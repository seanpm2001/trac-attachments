diff --git a/include/wx/filename.h b/include/wx/filename.h
index 1a6abd7..ddd71e9 100644
--- a/include/wx/filename.h
+++ b/include/wx/filename.h
@@ -65,6 +65,15 @@ enum wxPathFormat
     wxPATH_MAX // Not a valid value for specifying path format
 };
 
+// The different values for the size format.
+enum wxSizeFormat
+{
+    wxSIZE_FORMAT_REAL_SI = 0, // 1024 bytes = 1 KiB
+    wxSIZE_FORMAT_TRAD_1000 ,  // 1000 bytes = 1 KB
+    wxSIZE_FORMAT_TRAD_1024    // 1024 bytes = 1 KB
+};
+
+
 // the kind of normalization to do with the file name: these values can be
 // or'd together to perform several operations at once
 enum wxPathNormalize
@@ -543,8 +552,12 @@ public:
     wxString GetHumanReadableSize(const wxString &nullsize = wxGetTranslation(wxT("Not available")),
                                   int precision = 1) const;
     static wxString GetHumanReadableSize(const wxULongLong &sz,
-                                         const wxString &nullsize = wxGetTranslation(wxT("Not available")),
-                                         int precision = 1);
+                                         const wxString &nullsize 
+                                         = wxGetTranslation(wxT("Not available")),
+                                         int precision = 1,
+                                         wxSizeFormat format 
+                                         = wxSIZE_FORMAT_REAL_SI);
+
 #endif // wxUSE_LONGLONG
 
 
diff --git a/interface/wx/filename.h b/interface/wx/filename.h
index 3f40781..f578877 100644
--- a/interface/wx/filename.h
+++ b/interface/wx/filename.h
@@ -28,6 +28,22 @@ enum wxPathFormat
     wxPATH_MAX   //!< Not a valid value for specifying path format
 };
 
+/**
+   The Size format is normalized. But it is some 
+   traditionnal size format.
+   See wxFileName::GetHumanReadableSize() to
+   see how to choose your convention.
+*/
+enum wxSizeFormat
+{
+    /// 1000 bytes = 1KiB.
+    wxSIZE_FORMAT_REAL_SI = 0,
+    /// 1000 bytes = 1KB.
+    wxSIZE_FORMAT_TRAD_1000 , 
+    /// 1024 bytes = 1KB.
+    wxSIZE_FORMAT_TRAD_1024    
+};
+
 
 /**
     The kind of normalization to do with the file name: these values can be
@@ -540,12 +556,13 @@ public:
         If @a bytes is ::wxInvalidSize or zero, then @a nullsize is returned.
 
         In case of success, the returned string is a floating-point number with
-        @a precision decimal digits followed by the size unit (B, kB, MB, GB,
-        TB: respectively bytes, kilobytes, megabytes, gigabytes, terabytes).
+        @a precision decimal digits . The unit and the conversion is determined
+        by the @a format. See wxSizeFormat enum for more information.
     */
     static wxString GetHumanReadableSize(const wxULongLong& bytes,
                                          const wxString& nullsize = "Not available",
-                                         int precision = 1);
+                                         int precision = 1,
+                                         wxSizeFormat format = wxSIZE_FORMAT_REAL_SI);
 
     /**
         Return the long form of the path (returns identity on non-Windows platforms).
diff --git a/src/common/filename.cpp b/src/common/filename.cpp
index 917c89d..65fa837 100644
--- a/src/common/filename.cpp
+++ b/src/common/filename.cpp
@@ -2647,27 +2647,45 @@ wxULongLong wxFileName::GetSize(const wxString &filename)
 /* static */
 wxString wxFileName::GetHumanReadableSize(const wxULongLong &bs,
                                           const wxString &nullsize,
-                                          int precision)
+                                          int precision,
+                                          wxSizeFormat format)
 {
-    static const double KILOBYTESIZE = 1024.0;
-    static const double MEGABYTESIZE = 1024.0*KILOBYTESIZE;
-    static const double GIGABYTESIZE = 1024.0*MEGABYTESIZE;
-    static const double TERABYTESIZE = 1024.0*GIGABYTESIZE;
+    double multiplier = 1024.0;
+    wxString stringI = "";
+    wxString result;
+
+    if(format == wxSIZE_FORMAT_TRAD_1000)
+        multiplier = 1000.0;
+
+    if(format == wxSIZE_FORMAT_REAL_SI)
+        stringI = "i";
+
+    const double kiloByteSize = multiplier;
+    const double megaByteSize = multiplier * kiloByteSize;
+    const double gigaByteSize = multiplier * megaByteSize;
+    const double teraByteSize = multiplier * gigaByteSize;
 
     if (bs == 0 || bs == wxInvalidSize)
         return nullsize;
 
     double bytesize = bs.ToDouble();
-    if (bytesize < KILOBYTESIZE)
-        return wxString::Format(_("%s B"), bs.ToString().c_str());
-    if (bytesize < MEGABYTESIZE)
-        return wxString::Format(_("%.*f kB"), precision, bytesize/KILOBYTESIZE);
-    if (bytesize < GIGABYTESIZE)
-        return wxString::Format(_("%.*f MB"), precision, bytesize/MEGABYTESIZE);
-    if (bytesize < TERABYTESIZE)
-        return wxString::Format(_("%.*f GB"), precision, bytesize/GIGABYTESIZE);
-
-    return wxString::Format(_("%.*f TB"), precision, bytesize/TERABYTESIZE);
+
+    if (bytesize < kiloByteSize)
+        result = wxString::Format(wxT("%s B"), bs.ToString().c_str());
+    else if (bytesize < megaByteSize)
+        result = wxString::Format(wxT("%.*f K%sB"), precision, 
+                        bytesize/kiloByteSize, stringI.c_str());
+    else if (bytesize < gigaByteSize)
+        result = wxString::Format(wxT("%.*f M%sB"), precision, 
+                        bytesize/megaByteSize, stringI.c_str());
+    else if (bytesize < teraByteSize)
+        result = wxString::Format(wxT("%.*f G%sB"), precision, 
+                        bytesize/gigaByteSize, stringI.c_str());
+    else
+        result = wxString::Format(wxT("%.*f T%sB"), precision, 
+                        bytesize/teraByteSize, stringI.c_str());
+
+    return result;
 }
 
 wxULongLong wxFileName::GetSize() const
diff --git a/tests/filename/filenametest.cpp b/tests/filename/filenametest.cpp
index c1a9c5e..7d8b494 100644
--- a/tests/filename/filenametest.cpp
+++ b/tests/filename/filenametest.cpp
@@ -125,6 +125,7 @@ private:
         CPPUNIT_TEST( TestStrip );
         CPPUNIT_TEST( TestNormalize );
         CPPUNIT_TEST( TestReplace );
+        CPPUNIT_TEST( TestGetHumanReadable );
 #ifdef __WINDOWS__
         CPPUNIT_TEST( TestShortLongPath );
 #endif // __WINDOWS__
@@ -139,6 +140,7 @@ private:
     void TestStrip();
     void TestNormalize();
     void TestReplace();
+    void TestGetHumanReadable();
 #ifdef __WINDOWS__
     void TestShortLongPath();
 #endif // __WINDOWS__
@@ -478,6 +480,17 @@ void FileNameTestCase::TestReplace()
                           fn.GetFullPath(wxPATH_UNIX) );
 }
 
+void FileNameTestCase::TestGetHumanReadable()
+{
+    CPPUNIT_ASSERT_EQUAL(wxString("Not available"), wxFileName::GetHumanReadableSize(wxULongLong()));
+    CPPUNIT_ASSERT_EQUAL(wxString("2.0 KiB"), wxFileName::GetHumanReadableSize(wxULongLong(2000)));
+    CPPUNIT_ASSERT_EQUAL(wxString("1.953 KiB"), wxFileName::GetHumanReadableSize(wxULongLong(2000), wxT("Not available"), 3));
+    CPPUNIT_ASSERT_EQUAL(wxString("2.000 KB"), wxFileName::GetHumanReadableSize(wxULongLong(2000), wxT("Not available"), 3, wxSIZE_FORMAT_TRAD_1000));
+    CPPUNIT_ASSERT_EQUAL(wxString("1.953 KB"), wxFileName::GetHumanReadableSize(wxULongLong(2000), wxT("Not available"), 3, wxSIZE_FORMAT_TRAD_1024));
+
+
+}
+
 void FileNameTestCase::TestStrip()
 {
     CPPUNIT_ASSERT_EQUAL( "", wxFileName::StripExtension("") );

Index: include/wx/generic/grid.h
===================================================================
--- include/wx/generic/grid.h	(revision 71573)
+++ include/wx/generic/grid.h	(working copy)
@@ -65,6 +65,19 @@
     wxGRID_ROW
 };
 
+enum wxGridRenderStyle
+{
+    wxGRID_DRAW_ROWS_HEADER = 0x001,
+    wxGRID_DRAW_COLS_HEADER = 0x002,
+    wxGRID_DRAW_CELL_LINES = 0x004,
+    wxGRID_DRAW_BOX_RECT = 0x008,
+    wxGRID_DRAW_SELECTION = 0x010,
+    wxGRID_DRAW_DEFAULT = wxGRID_DRAW_ROWS_HEADER | 
+                          wxGRID_DRAW_COLS_HEADER |
+                          wxGRID_DRAW_CELL_LINES |
+                          wxGRID_DRAW_BOX_RECT
+};
+
 // ----------------------------------------------------------------------------
 // forward declarations
 // ----------------------------------------------------------------------------
@@ -1002,7 +1015,9 @@
     void DrawGridCellArea( wxDC& dc , const wxGridCellCoordsArray& cells );
     void DrawGridSpace( wxDC& dc );
     void DrawCellBorder( wxDC& dc, const wxGridCellCoords& );
-    void DrawAllGridLines( wxDC& dc, const wxRegion & reg );
+    void DrawAllGridLines( wxDC& dc, const wxRegion& reg, 
+                           const wxGridCellCoordsArray& arrayCoords = 
+                           wxGridCellCoordsArray() );
     void DrawCell( wxDC& dc, const wxGridCellCoords& );
     void DrawHighlight(wxDC& dc, const wxGridCellCoordsArray& cells);
 
@@ -1030,6 +1045,14 @@
                             int verticalAlignment = wxALIGN_TOP,
                             int textOrientation = wxHORIZONTAL ) const;
 
+    // ------ grid render function for printing
+    //
+    void Render( wxDC* dc, 
+                 const wxPoint& pos = wxDefaultPosition,
+                 const wxSize& size = wxDefaultSize,
+                 const wxGridCellCoords& topLeft = wxGridCellCoords(-1, -1),
+                 const wxGridCellCoords& bottomRight = wxGridCellCoords(-1, -1),
+                 wxGridRenderStyle style = wxGRID_DRAW_DEFAULT );

+     void SetRenderScale( wxDC &dc, const wxPoint& pos, const wxSize& size, 
                           int gridWidth, int gridHeight );

 
     // Split a string containing newline characters into an array of
     // strings and return the number of lines
Index: src/generic/grid.cpp
===================================================================
--- src/generic/grid.cpp	(revision 71573)
+++ src/generic/grid.cpp	(working copy)
@@ -1776,6 +1776,265 @@
     m_owner->DrawHighlight( dc, dirtyCells );
 }
 
+void wxGrid::Render( wxDC& dc,
+                     const wxPoint& position,
+                     const wxSize& size,
+                     const wxGridCellCoords& topLeft,
+                     const wxGridCellCoords& bottomRight,
+                     wxGridRenderStyle style )
+{
+    wxCHECK_RET( bottomRight.GetCol() < GetNumberCols(), 
+                 "wxGrid::Render specified right column is greater than column count" ); 
+    wxCHECK_RET( bottomRight.GetRow() < GetNumberRows(),
+                 "wxGrid::Render specified bottom row is greater than row count" ); 
+
+    // store user settings and reset later
+
+    // remove grid selection, don't paint selection colour
+    // unless we have wxGRID_DRAW_SELECTION
+    // block selections are the only ones catered for here
+    wxGridCellCoordsArray selectedCells;
+    bool hasSelection = IsSelection();
+    if ( hasSelection && !( style & wxGRID_DRAW_SELECTION ) )
+    {
+        selectedCells = GetSelectionBlockTopLeft();
+        // non block selections may not have a bottom right
+        if ( GetSelectionBlockBottomRight().Count() )
+            selectedCells.Add( GetSelectionBlockBottomRight()[ 0 ] );
+
+        ClearSelection();
+    }
+
+    // store user device origin
+    wxCoord userOriginX, userOriginY;
+    dc.GetDeviceOrigin( &userOriginX, &userOriginY );
+ 
+    // store user scale
+    double scaleUserX, scaleUserY;
+    dc.GetUserScale( &scaleUserX, &scaleUserY );
+    
+    // set defaults if necessary
+    long colLeft = topLeft.GetCol() > -1 ? topLeft.GetCol() : 0;
+    long rowTop = topLeft.GetRow() > -1 ? topLeft.GetRow() : 0;
+    long colRight = bottomRight.GetCol() > -1 ? bottomRight.GetCol() : GetNumberCols() - 1;
+    long rowBottom = bottomRight.GetRow() > -1 ? bottomRight.GetRow() : GetNumberRows() - 1;
+
+    // get grid area size to be rendered
+    long offsetCols = 0, offsetRows = 0;
+    wxGridCellCoordsArray renderCells;
+    wxArrayInt arrayCols;
+    wxArrayInt arrayRows; 
+    int col, row, gridWidth, gridHeight;
+
+    // fill array with cells to be rendered
+    // calculate width of cell drawn area
+    // and get grid column offset used where startcol > 0
+    gridWidth = 0;
+    wxGridSizesInfo sizeinfo = GetColSizes();
+    for ( col = 0; col <= colRight; col++ )
+    {
+        if ( col < colLeft )
+        {
+            offsetCols += sizeinfo.GetSize( col );
+        }
+        else
+        {
+            for ( row = rowTop; row <= rowBottom; row++ )
+            {
+                renderCells.Add( wxGridCellCoords( row, col ));
+                arrayRows.Add( row ); // column labels rendered in DrawColLabels
+            }
+            arrayCols.Add( col ); // row labels rendered in DrawRowLabels
+            gridWidth += sizeinfo.GetSize( col );
+        }
+    }
+
+    // calculate height of rendered cells
+    // and row Y offset where startrow > 0
+    gridHeight = 0;
+    sizeinfo = GetRowSizes();
+    for ( row = 0; row <= rowBottom; row++ )
+    {
+        if ( row < rowTop )
+            offsetRows += sizeinfo.GetSize( row );
+        else
+            gridHeight += sizeinfo.GetSize( row );
+    }
+
+    // add headers/labels to dimensions
+    if ( style & wxGRID_DRAW_ROWS_HEADER )
+        gridWidth += GetRowLabelSize();
+    if ( style & wxGRID_DRAW_COLS_HEADER )
+        gridHeight += GetColLabelSize();
+    
+    // set drawing start position DeviceOrigin
+    // if not specified use previous dc draw extents MaxX and MaxY
+    wxPoint positionRender = position;
+    if ( !positionRender.IsFullySpecified() )
+    {
+        if ( positionRender.x == wxDefaultPosition.x )
+            positionRender.x = dc.MaxX();
+        
+        if ( positionRender.y == wxDefaultPosition.y )
+            positionRender.y = dc.MaxY();
+    }
+
+    // positionRender should be in logical units
+    wxCoord originX = dc.LogicalToDeviceX( positionRender.x );
+    wxCoord originY = dc.LogicalToDeviceY( positionRender.y );
+
+    dc.SetDeviceOrigin( originX, originY );
+
+    SetRenderScale( dc, positionRender, size, gridWidth, gridHeight );
+
+    // draw row headers at specified origin
+    if ( GetRowLabelSize() > 0 && ( style & wxGRID_DRAW_ROWS_HEADER ) )
+    {
+        if ( style & wxGRID_DRAW_COLS_HEADER )
+        {
+            DrawCornerLabel( dc ); // do only if both col and row labels drawn
+            originY += dc.LogicalToDeviceYRel( GetColLabelSize() );
+        }
+            
+        originY -= dc.LogicalToDeviceYRel( offsetRows );
+        dc.SetDeviceOrigin( originX, originY );
+
+        DrawRowLabels( dc, arrayRows );
+        
+        // reset for columns
+        if ( style & wxGRID_DRAW_COLS_HEADER )
+            originY -= dc.LogicalToDeviceYRel( GetColLabelSize() );
+
+        originY += dc.LogicalToDeviceYRel( offsetRows );
+        // X offset so we don't overwrite row labels
+        originX += dc.LogicalToDeviceXRel( GetRowLabelSize() );
+    }
+
+    // subtract col offset where startcol > 0
+    originX -= dc.LogicalToDeviceXRel( offsetCols );
+    // no y offset for col labels, they are at the Y origin
+
+    // draw column labels
+    if ( style & wxGRID_DRAW_COLS_HEADER )
+    {
+        dc.SetDeviceOrigin( originX, originY );
+        DrawColLabels( dc, arrayCols );
+        // don't overwrite the labels, increment originY
+        originY += dc.LogicalToDeviceYRel( GetColLabelSize() );
+    }
+
+    // set device origin to draw grid cells and lines 
+    originY -= dc.LogicalToDeviceYRel( offsetRows );
+    dc.SetDeviceOrigin( originX, originY );
+
+    // draw cell area background
+    dc.SetBrush( GetDefaultCellBackgroundColour() );
+    dc.SetPen( *wxTRANSPARENT_PEN );
+    // subtract headers from grid area dimensions
+    unsigned cellsWidth = gridWidth, cellsHeight = gridHeight;
+    if ( style & wxGRID_DRAW_ROWS_HEADER )
+        cellsWidth -= GetRowLabelSize();
+    if ( style & wxGRID_DRAW_COLS_HEADER )
+        cellsHeight -= GetColLabelSize();
+
+    dc.DrawRectangle( wxPoint( offsetCols, offsetRows ), 
+                      wxSize( cellsWidth, cellsHeight ) );
+
+    // draw cells
+    DrawGridCellArea( dc, renderCells );
+
+    // calculate region for drawing grid lines
+    if ( style & wxGRID_DRAW_CELL_LINES )
+    {
+        wxRegion regionClip( offsetCols, 
+                             offsetRows, 
+                             cellsWidth,
+                             cellsHeight );
+
+        wxGridCellCoordsArray arrayCoords;
+        arrayCoords.Add( renderCells[ 0 ] );
+        arrayCoords.Add( renderCells[ renderCells.Count() -1 ] );
+
+        DrawAllGridLines( dc, regionClip, arrayCoords );
+    }
+    
+    // draw render rectangle bounding lines
+    // useful where there is multi cell row or col clipping and no cell border
+    if ( style & wxGRID_DRAW_BOX_RECT )
+    {
+        int bottom = offsetRows + cellsHeight, right = offsetCols + cellsWidth - 1;
+        
+        // horiz top line if we are not drawing column header/labels
+        if ( !( style & wxGRID_DRAW_COLS_HEADER ) )
+        {
+            int left =  offsetCols;
+            left +=  ( style & wxGRID_DRAW_COLS_HEADER ) 
+                      ? - GetRowLabelSize() : 0;
+            dc.SetPen( GetRowGridLinePen( rowTop ) );
+            dc.DrawLine( left,
+                         offsetRows, 
+                         right, 
+                         offsetRows );
+        }
+
+        // horiz bottom line
+        dc.SetPen( GetRowGridLinePen( rowBottom ) );
+        dc.DrawLine( offsetCols, bottom - 1, right, bottom - 1 );
+
+        // left vertical line if we are not drawing row header/labels
+        if ( !( style & wxGRID_DRAW_ROWS_HEADER ) )
+        {
+            int top =  offsetRows;
+            top +=  ( style & wxGRID_DRAW_COLS_HEADER ) 
+                      ? - GetColLabelSize() : 0;
+            dc.SetPen( GetColGridLinePen( colLeft ) );
+            dc.DrawLine( offsetCols -1, 
+                         top,
+                         offsetCols - 1, 
+                         bottom - 1 );
+        }
+
+        // right vertical line
+        dc.SetPen( GetColGridLinePen( colRight ) );
+        dc.DrawLine( right, offsetRows, right, bottom - 1 );
+    }
+
+    // restore user setings
+    dc.SetDeviceOrigin( userOriginX, userOriginY );
+    dc.SetUserScale( scaleUserX, scaleUserY );
+
+    if ( selectedCells.Count() && !( style & wxGRID_DRAW_SELECTION ) )
+    {
+        SelectBlock( selectedCells[ 0 ].GetRow(), 
+                     selectedCells[ 0 ].GetCol(),
+                     selectedCells[ selectedCells.Count() -1 ].GetRow(), 
+                     selectedCells[ selectedCells.Count() -1 ].GetCol() );
+    }
+}
+
+void wxGrid::SetRenderScale( wxDC &dc, const wxPoint& pos, const wxSize& size, int gridWidth, int gridHeight )
+{
+    double scaleX, scaleY;
+    wxSize sizeTemp;
+
+    if ( size.GetX() != wxDefaultSize.GetX() ) // size.x was specified
+        sizeTemp.SetWidth( size.GetX() );
+    else
+        sizeTemp.SetWidth( dc.DeviceToLogicalXRel( dc.GetSize().GetX() ) 
+                           - pos.x );
+
+    if ( size.GetY() != wxDefaultSize.GetY() ) // size.y was specified
+        sizeTemp.SetHeight( size.GetY() ); 
+    else
+        sizeTemp.SetHeight( dc.DeviceToLogicalYRel( dc.GetSize().GetY() ) 
+                            - pos.y );
+
+    scaleX = (double)( (double) sizeTemp.GetX() / (double) gridWidth );
+    scaleY = (double)( (double) sizeTemp.GetY() / (double) gridHeight );
+
+    dc.SetUserScale( wxMin( scaleX, scaleY), wxMin( scaleX, scaleY ) );
+}
+
 void wxGridWindow::ScrollWindow( int dx, int dy, const wxRect *rect )
 {
     wxWindow::ScrollWindow( dx, dy, rect );
@@ -5346,95 +5605,176 @@
     }
 }
 
-// This is used to redraw all grid lines e.g. when the grid line colour
-// has been changed
-//
-void wxGrid::DrawAllGridLines( wxDC& dc, const wxRegion & WXUNUSED(reg) )
+// This is used to redraw all grid lines
+// e.g. when the grid line colour has been changed
+// or for wxGrid::Render
+void wxGrid::DrawAllGridLines( wxDC& dc, 
+                               const wxRegion& reg, 
+                               const wxGridCellCoordsArray& arrayCoords )
 {
     if ( !m_gridLinesEnabled )
          return;
 
     int top, bottom, left, right;
+    int leftCol, topRow, rightCol, bottomRow;
 
-    int cw, ch;
-    m_gridWin->GetClientSize(&cw, &ch);
-    CalcUnscrolledPosition( 0, 0, &left, &top );
-    CalcUnscrolledPosition( cw, ch, &right, &bottom );
-
-    // avoid drawing grid lines past the last row and col
-    if ( m_gridLinesClipHorz )
+    if( dc.GetWindow() != GetGridWindow() ) // must be wxGrid::Render
     {
-        if ( !m_numCols )
-            return;
+        wxCHECK_RET( arrayCoords.Count() >= 2, 
+                     "wxGrid::DrawAllGridLines arrayCoords count < 2" );
+        
+        int width, height;
+        reg.GetBox( left, top, width, height );
+        
+        right = left + width;
+        bottom = top + height;
+        
+        // create a clipping region
+        wxRegion clippedcells( dc.LogicalToDeviceX( left ),
+                               dc.LogicalToDeviceY( top ),
+                               dc.LogicalToDeviceXRel( width ),
+                               dc.LogicalToDeviceYRel( height ) );
+        
+        // subtract multi cell span area from clipping region for lines
+        leftCol = arrayCoords[ 0 ].GetCol();
+        topRow = arrayCoords[ 0 ].GetRow();
+        rightCol = arrayCoords[ arrayCoords.Count() - 1 ].GetCol();
+        bottomRow = arrayCoords[ arrayCoords.Count() - 1 ].GetRow();
 
-        const int lastColRight = GetColRight(GetColAt(m_numCols - 1));
-        if ( right > lastColRight )
-            right = lastColRight;
-    }
+        int col, cell_rows, cell_cols;
+        wxRect rect;
+        for ( int row = topRow; row <= bottomRow; row++ )
+        {
+            for ( col = leftCol; col <= rightCol; col++ )
+            {
+                GetCellSize( row, col, &cell_rows, &cell_cols );
+                if( cell_rows > 1 || cell_cols > 1 ) // multi cell
+                {
+                    rect = CellToRect( row, col );
+                    // cater for scaling
+                    // device origin already set in ::Render() for x, y
+                    rect.x = dc.LogicalToDeviceX( rect.x );
+                    rect.y = dc.LogicalToDeviceY( rect.y );
+                    rect.width = dc.LogicalToDeviceXRel( rect.width );
+                    rect.height = dc.LogicalToDeviceYRel( rect.height ) - 1;
+                    clippedcells.Subtract( rect );
+                }
+                else if( cell_rows < 0 || cell_cols < 0 ) // part of multicell
+                {
+                    rect = CellToRect( row + cell_rows, col + cell_cols );
+                    rect.x = dc.LogicalToDeviceX( rect.x );
+                    rect.y = dc.LogicalToDeviceY( rect.y );
+                    rect.width = dc.LogicalToDeviceXRel( rect.width );
+                    rect.height = dc.LogicalToDeviceYRel( rect.height ) - 1;
+                    clippedcells.Subtract( rect );
+                }
+            }
+        }
 
-    if ( m_gridLinesClipVert )
-    {
-        if ( !m_numRows )
-            return;
+#ifdef __WXMSW__
+        dc.SetDeviceClippingRegion( clippedcells );
+#else
+        // my workaround for OSX
+        //double x;
+        //dc.GetUserScale( &x, NULL );
+        //if( x == 1 )
+            dc.SetDeviceClippingRegion( clippedcells );
 
-        const int lastRowBottom = GetRowBottom(m_numRows - 1);
-        if ( bottom > lastRowBottom )
-            bottom = lastRowBottom;
+        // test clipping region with black rectangle
+        // dc.SetBrush( *wxBLACK_BRUSH );
+        // dc.DrawRectangle( wxPoint( -100, -100 ), wxSize( width + 400, height + 400 ) );
+        
+        // test rectangle without clipping region
+        // dc.DrawRectangle( left, top, width, height ); // draws correctly on MSW and OSX
+#endif
+
     }
+    else // grid window
+    {
+        int cw, ch;
+        m_gridWin->GetClientSize(&cw, &ch);
+        CalcUnscrolledPosition( 0, 0, &left, &top );
+        CalcUnscrolledPosition( cw, ch, &right, &bottom );
 
-    // no gridlines inside multicells, clip them out
-    int leftCol = GetColPos( internalXToCol(left) );
-    int topRow = internalYToRow(top);
-    int rightCol = GetColPos( internalXToCol(right) );
-    int bottomRow = internalYToRow(bottom);
+        // avoid drawing grid lines past the last row and col
+        if ( m_gridLinesClipHorz )
+        {
+            if ( !m_numCols )
+                return;
 
-    wxRegion clippedcells(0, 0, cw, ch);
+            const int lastColRight = GetColRight(GetColAt(m_numCols - 1));
+            if ( right > lastColRight )
+                right = lastColRight;
+        }
 
-    int cell_rows, cell_cols;
-    wxRect rect;
+        if ( m_gridLinesClipVert )
+        {
+            if ( !m_numRows )
+                return;
 
-    for ( int j = topRow; j <= bottomRow; j++ )
-    {
-        for ( int colPos = leftCol; colPos <= rightCol; colPos++ )
+            const int lastRowBottom = GetRowBottom(m_numRows - 1);
+            if ( bottom > lastRowBottom )
+                bottom = lastRowBottom;
+        }
+
+        // no gridlines inside multicells, clip them out
+        leftCol = GetColPos( internalXToCol(left) );
+        topRow = internalYToRow(top);
+        rightCol = GetColPos( internalXToCol(right) );
+        bottomRow = internalYToRow(bottom);
+
+        wxRegion clippedcells(0, 0, cw, ch);
+
+        int cell_rows, cell_cols;
+        wxRect rect;
+
+        for ( int j = topRow; j <= bottomRow; j++ )
         {
-            int i = GetColAt( colPos );
+            for ( int colPos = leftCol; colPos <= rightCol; colPos++ )
+            {
+                int i = GetColAt( colPos );
 
-            GetCellSize( j, i, &cell_rows, &cell_cols );
-            if ((cell_rows > 1) || (cell_cols > 1))
-            {
-                rect = CellToRect(j,i);
-                CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
-                clippedcells.Subtract(rect);
+                GetCellSize( j, i, &cell_rows, &cell_cols );
+                if ((cell_rows > 1) || (cell_cols > 1))
+                {
+                    rect = CellToRect(j,i);
+                    CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
+                    clippedcells.Subtract(rect);
+                }
+                else if ((cell_rows < 0) || (cell_cols < 0))
+                {
+                    rect = CellToRect(j + cell_rows, i + cell_cols);
+                    CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
+                    clippedcells.Subtract(rect);
+                }
             }
-            else if ((cell_rows < 0) || (cell_cols < 0))
-            {
-                rect = CellToRect(j + cell_rows, i + cell_cols);
-                CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
-                clippedcells.Subtract(rect);
-            }
         }
+        dc.SetDeviceClippingRegion( clippedcells );
+        
+        topRow = internalYToRow( top );
+        bottomRow = m_numRows;
+        rightCol = m_numCols;
     }
 
-    dc.SetDeviceClippingRegion( clippedcells );
-
-
     // horizontal grid lines
-    for ( int i = internalYToRow(top); i < m_numRows; i++ )
+    int rowPos;
+    for ( rowPos = topRow; rowPos < bottomRow; rowPos++ )
     {
-        int bot = GetRowBottom(i) - 1;
+        int bot = GetRowBottom( rowPos ) - 1;
 
         if ( bot > bottom )
             break;
 
         if ( bot >= top )
         {
-            dc.SetPen( GetRowGridLinePen(i) );
+            dc.SetPen( GetRowGridLinePen( rowPos ) );
             dc.DrawLine( left, bot, right, bot );
         }
     }
 
     // vertical grid lines
-    for ( int colPos = leftCol; colPos < m_numCols; colPos++ )
+    int colPos;
+    for ( colPos = leftCol; colPos < rightCol; colPos++ )
     {
         int i = GetColAt( colPos );
 

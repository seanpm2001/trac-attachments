Left base folder: C:\lib\wxWidgets-2.6.2
Right base folder: C:\_Downloads\wxMSW-2.6.2.zip\wxWidgets-2.6.2
--- include\wx\generic\grid.h	2006-01-10 18:34:54.000000000 -0800
+++ include\wx\generic\grid.h	2005-06-01 09:09:02.000000000 -0800
@@ -1126,13 +1126,12 @@
     void ProcessCornerLabelMouseEvent( wxMouseEvent& event );
     void ProcessGridCellMouseEvent( wxMouseEvent& event );
     bool ProcessTableMessage( wxGridTableMessage& );
 
     void DoEndDragResizeRow();
     void DoEndDragResizeCol();
-    void DoEndDragMoveCol();
 
     wxGridTableBase * GetTable() const { return m_table; }
     bool SetTable( wxGridTableBase *table, bool takeOwnership = false,
                    wxGrid::wxGridSelectionModes selmode =
                    wxGrid::wxGridSelectCells );
 
@@ -1230,13 +1229,13 @@
     //  Note that all of these functions work with the logical coordinates of
     //  grid cells and labels so you will need to convert from device
     //  coordinates for mouse events etc.
     //
     void XYToCell( int x, int y, wxGridCellCoords& );
     int  YToRow( int y );
-    int  XToCol( int x, bool clipToMinMax = false );
+    int  XToCol( int x );
 
     int  YToEdgeOfRow( int y );
     int  XToEdgeOfCol( int x );
 
     wxRect CellToRect( int row, int col );
     wxRect CellToRect( const wxGridCellCoords& coords )
@@ -1365,42 +1364,12 @@
     void     SetDefaultRowSize( int height, bool resizeExistingRows = false );
     void     SetRowSize( int row, int height );
     void     SetDefaultColSize( int width, bool resizeExistingCols = false );
 
     void     SetColSize( int col, int width );
 
-    //Column positions
-    void SetUserCanMoveColumns( bool canMove );
-    bool GetUserCanMoveColumns() { return m_canMoveColPos; };
-
-    int GetColAt( int colPos ) const
-    {
-        if ( m_colAt.IsEmpty() )
-            return colPos;
-        else
-            return m_colAt[colPos];
-    }
-
-    void SetColPos( int colID, int newPos );
-
-    int GetColPos( int colID ) const
-    {
-        if ( m_colAt.IsEmpty() )
-            return colID;
-        else
-        {
-            for ( int i = 0; i < m_numCols; i++ )
-            {
-                if ( m_colAt[i] == colID )
-                    return i;
-            }
-        }
-
-        return -1;
-    }
-
     // automatically size the column or row to fit to its contents, if
     // setAsMin is true, this optimal width will also be set as minimal width
     // for this column
     void     AutoSizeColumn( int col, bool setAsMin = true )
         { AutoSizeColOrRow(col, setAsMin, true); }
     void     AutoSizeRow( int row, bool setAsMin = true )
@@ -1903,14 +1872,13 @@
     enum CursorMode
     {
         WXGRID_CURSOR_SELECT_CELL,
         WXGRID_CURSOR_RESIZE_ROW,
         WXGRID_CURSOR_RESIZE_COL,
         WXGRID_CURSOR_SELECT_ROW,
-        WXGRID_CURSOR_SELECT_COL,
-        WXGRID_CURSOR_MOVE_COL
+        WXGRID_CURSOR_SELECT_COL
     };
 
     // this method not only sets m_cursorMode but also sets the correct cursor
     // for the given mode and, if captureMouse is not false releases the mouse
     // if it was captured and captures it if it must be captured
     //
@@ -1919,17 +1887,12 @@
     void ChangeCursorMode(CursorMode mode,
                           wxWindow *win = (wxWindow *)NULL,
                           bool captureMouse = true);
 
     wxWindow *m_winCapture;     // the window which captured the mouse
     CursorMode m_cursorMode;
-
-    //Column positions
-    wxArrayInt m_colAt;
-    bool m_canMoveColPos;
-    int m_moveToCol;
 
     bool    m_canDragRowSize;
     bool    m_canDragColSize;
     bool    m_canDragGridSize;
     bool    m_canDragCell;
     int     m_dragLastPos;
--- src\generic\grid.cpp	2006-01-18 22:35:23.000000000 -0800
+++ src\generic\grid.cpp	2005-08-05 12:45:52.000000000 -0800
@@ -114,13 +114,12 @@
 DEFINE_EVENT_TYPE(wxEVT_GRID_LABEL_LEFT_CLICK)
 DEFINE_EVENT_TYPE(wxEVT_GRID_LABEL_RIGHT_CLICK)
 DEFINE_EVENT_TYPE(wxEVT_GRID_LABEL_LEFT_DCLICK)
 DEFINE_EVENT_TYPE(wxEVT_GRID_LABEL_RIGHT_DCLICK)
 DEFINE_EVENT_TYPE(wxEVT_GRID_ROW_SIZE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_COL_SIZE)
-DEFINE_EVENT_TYPE(wxEVT_GRID_COL_MOVE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_RANGE_SELECT)
 DEFINE_EVENT_TYPE(wxEVT_GRID_CELL_CHANGE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_SELECT_CELL)
 DEFINE_EVENT_TYPE(wxEVT_GRID_EDITOR_SHOWN)
 DEFINE_EVENT_TYPE(wxEVT_GRID_EDITOR_HIDDEN)
 DEFINE_EVENT_TYPE(wxEVT_GRID_EDITOR_CREATED)
@@ -626,13 +625,13 @@
                                   wxWindowID id,
                                   wxEvtHandler* evtHandler)
 {
     m_control = new wxTextCtrl(parent, id, wxEmptyString,
                                wxDefaultPosition, wxDefaultSize
 #if defined(__WXMSW__)
-                               , wxTE_PROCESS_TAB | wxTE_AUTO_SCROLL | wxNO_BORDER
+                               , wxTE_PROCESS_TAB | wxTE_AUTO_SCROLL
 #endif
                               );
 
     // set max length allowed in the textctrl, if the parameter was set
     if (m_maxChars != 0)
     {
@@ -664,38 +663,32 @@
     {
         rect.x += 1;
         rect.y += 1;
         rect.width -= 1;
         rect.height -= 1;
     }
-#elif defined(__WXMSW__)
-    if ( rect.x == 0 )
-        rect.x += 2;
-    else
-        rect.x += 3;
+#else // !GTK
+    int extra_x = ( rect.x > 2 )? 2 : 1;
 
-    if ( rect.y == 0 )
-        rect.y += 2;
-    else
-        rect.y += 3;
-
-    rect.width -= 2;
-    rect.height -= 2;
+// MB: treat MSW separately here otherwise the caret doesn't show
+// when the editor is in the first row.
+#if defined(__WXMSW__)
+    int extra_y = 2;
 #else
-    int extra_x = ( rect.x > 2 )? 2 : 1;
     int extra_y = ( rect.y > 2 )? 2 : 1;
+#endif // MSW
 
-    #if defined(__WXMOTIF__)
-        extra_x *= 2;
-        extra_y *= 2;
-    #endif
+#if defined(__WXMOTIF__)
+    extra_x *= 2;
+    extra_y *= 2;
+#endif
     rect.SetLeft( wxMax(0, rect.x - extra_x) );
     rect.SetTop( wxMax(0, rect.y - extra_y) );
     rect.SetRight( rect.GetRight() + 2*extra_x );
     rect.SetBottom( rect.GetBottom() + 2*extra_y );
-#endif
+#endif // GTK/!GTK
 
     wxGridCellEditor::SetSize(rect);
 }
 
 void wxGridCellTextEditor::BeginEdit(int row, int col, wxGrid* grid)
 {
@@ -3363,21 +3356,12 @@
 
     if ( pos >= curNumCols )
     {
         return AppendCols( numCols );
     }
 
-    if ( !m_colLabels.IsEmpty() )
-    {
-        m_colLabels.Insert( wxEmptyString, pos, numCols );
-
-        size_t i;
-        for ( i = pos; i < pos + numCols; i++ )
-            m_colLabels[i] = wxGridTableBase::GetColLabelValue( i );
-    }
-
     for ( row = 0;  row < curNumRows;  row++ )
     {
         for ( col = pos;  col < pos + numCols;  col++ )
         {
             m_data[row].Insert( wxEmptyString, col );
         }
@@ -3444,37 +3428,26 @@
                         (unsigned long)numCols,
                         (unsigned long)curNumCols
                     ) );
         return false;
     }
 
-    int colID;
-    if ( GetView() )
-        colID = GetView()->GetColAt( pos );
-    else
-        colID = pos;
-
-    if ( numCols > curNumCols - colID )
+    if ( numCols > curNumCols - pos )
     {
-        numCols = curNumCols - colID;
-    }
-
-    if ( !m_colLabels.IsEmpty() )
-    {
-        m_colLabels.RemoveAt( colID, numCols );
+        numCols = curNumCols - pos;
     }
 
     for ( row = 0;  row < curNumRows;  row++ )
     {
         if ( numCols >= curNumCols )
         {
             m_data[row].Clear();
         }
         else
         {
-            m_data[row].RemoveAt( colID, numCols );
+            m_data[row].RemoveAt( pos, numCols );
         }
     }
     if ( GetView() )
     {
         wxGridTableMessage msg( this,
                                 wxGRIDTABLE_NOTIFY_COLS_DELETED,
@@ -3726,13 +3699,13 @@
     rect.SetY( 1 );
     rect.SetWidth( client_width - 2 );
     rect.SetHeight( client_height - 2 );
 
     wxRendererNative::Get().DrawHeaderButton( this, dc, rect, 0 );
 #else // !__WXGTK__
-    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DSHADOW),1, wxSOLID) );
+    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW),1, wxSOLID) );
     dc.DrawLine( client_width-1, client_height-1, client_width-1, 0 );
     dc.DrawLine( client_width-1, client_height-1, 0, client_height-1 );
     dc.DrawLine( 0, 0, client_width, 0 );
     dc.DrawLine( 0, 0, 0, client_height );
 
     dc.SetPen( *wxWHITE_PEN );
@@ -3878,13 +3851,15 @@
 // Internal helper macros for simpler use of that function
 
 static int CoordToRowOrCol(int coord, int defaultDist, int minDist,
                            const wxArrayInt& BorderArray, int nMax,
                            bool clipToMinMax);
 
-#define internalXToCol(x) XToCol(x, true)
+#define internalXToCol(x) CoordToRowOrCol(x, m_defaultColWidth, \
+                                          m_minAcceptableColWidth, \
+                                          m_colRights, m_numCols, true)
 #define internalYToRow(y) CoordToRowOrCol(y, m_defaultRowHeight, \
                                           m_minAcceptableRowHeight, \
                                           m_rowBottoms, m_numRows, true)
 /////////////////////////////////////////////////////////////////////
 
 #if wxUSE_EXTENDED_RTTI
@@ -4246,14 +4221,12 @@
     m_gridLineColour = wxColour( 192,192,192 );
     m_gridLinesEnabled = true;
     m_cellHighlightColour = *wxBLACK;
     m_cellHighlightPenWidth = 2;
     m_cellHighlightROPenWidth = 1;
 
-    m_canMoveColPos = false;
-
     m_cursorMode  = WXGRID_CURSOR_SELECT_CELL;
     m_winCapture = (wxWindow *)NULL;
     m_canDragRowSize = true;
     m_canDragColSize = true;
     m_canDragGridSize = true;
     m_canDragCell = false;
@@ -4325,31 +4298,31 @@
     int colRight = 0;
 
     m_colWidths.Add( m_defaultColWidth, m_numCols );
 
     for ( int i = 0;  i < m_numCols;  i++ )
     {
-        colRight = ( GetColPos( i ) + 1 ) * m_defaultColWidth;
+        colRight += m_defaultColWidth;
         m_colRights.Add( colRight );
     }
 }
 
 int wxGrid::GetColWidth(int col) const
 {
     return m_colWidths.IsEmpty() ? m_defaultColWidth : m_colWidths[col];
 }
 
 int wxGrid::GetColLeft(int col) const
 {
-    return m_colRights.IsEmpty() ? GetColPos( col ) * m_defaultColWidth
+    return m_colRights.IsEmpty() ? col * m_defaultColWidth
                                  : m_colRights[col] - m_colWidths[col];
 }
 
 int wxGrid::GetColRight(int col) const
 {
-    return m_colRights.IsEmpty() ? (GetColPos( col ) + 1) * m_defaultColWidth
+    return m_colRights.IsEmpty() ? (col + 1) * m_defaultColWidth
                                  : m_colRights[col];
 }
 
 int wxGrid::GetRowHeight(int row) const
 {
     return m_rowHeights.IsEmpty() ? m_defaultRowHeight : m_rowHeights[row];
@@ -4375,13 +4348,13 @@
     if ( m_rowLabelWin->IsShown() )
         cw -= m_rowLabelWidth;
     if ( m_colLabelWin->IsShown() )
         ch -= m_colLabelHeight;
 
     // grid total size
-    int w = m_numCols > 0 ? GetColRight(GetColAt( m_numCols - 1 )) + m_extraWidth + 1 : 0;
+    int w = m_numCols > 0 ? GetColRight(m_numCols - 1) + m_extraWidth + 1 : 0;
     int h = m_numRows > 0 ? GetRowBottom(m_numRows - 1) + m_extraHeight + 1 : 0;
 
     // take into account editor if shown
     if( IsCellEditControlShown() )
     {
       int w2, h2;
@@ -4616,44 +4589,22 @@
         case wxGRIDTABLE_NOTIFY_COLS_INSERTED:
         {
             size_t pos = msg.GetCommandInt();
             int numCols = msg.GetCommandInt2();
             m_numCols += numCols;
 
-            if ( !m_colAt.IsEmpty() )
-            {
-                //Shift the column IDs
-                int i;
-                for ( i = 0; i < m_numCols - numCols; i++ )
-                {
-                    if ( m_colAt[i] >= (int)pos )
-                        m_colAt[i] += numCols;
-                }
-
-                m_colAt.Insert( pos, pos, numCols );
-
-                //Set the new columns' positions
-                for ( i = pos + 1; i < (int)pos + numCols; i++ )
-                {
-                    m_colAt[i] = i;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.Insert( m_defaultColWidth, pos, numCols );
                 m_colRights.Insert( 0, pos, numCols );
 
                 int right = 0;
-                if ( pos > 0 ) right = m_colRights[GetColAt( pos-1 )];
+                if ( pos > 0 ) right = m_colRights[pos-1];
 
-                int colPos;
-                for ( colPos = pos;  colPos < m_numCols;  colPos++ )
+                for ( i = pos;  i < m_numCols;  i++ )
                 {
-                    i = GetColAt( colPos );
-
                     right += m_colWidths[i];
                     m_colRights[i] = right;
                 }
             }
             if ( m_currentCellCoords == wxGridNoCellCoords )
             {
@@ -4680,38 +4631,22 @@
 
         case wxGRIDTABLE_NOTIFY_COLS_APPENDED:
         {
             int numCols = msg.GetCommandInt();
             int oldNumCols = m_numCols;
             m_numCols += numCols;
-
-            if ( !m_colAt.IsEmpty() )
-            {
-                m_colAt.Add( 0, numCols );
-
-                //Set the new columns' positions
-                int i;
-                for ( i = oldNumCols; i < m_numCols; i++ )
-                {
-                    m_colAt[i] = i;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.Add( m_defaultColWidth, numCols );
                 m_colRights.Add( 0, numCols );
 
                 int right = 0;
-                if ( oldNumCols > 0 ) right = m_colRights[GetColAt( oldNumCols-1 )];
+                if ( oldNumCols > 0 ) right = m_colRights[oldNumCols-1];
 
-                int colPos;
-                for ( colPos = oldNumCols;  colPos < m_numCols;  colPos++ )
+                for ( i = oldNumCols;  i < m_numCols;  i++ )
                 {
-                    i = GetColAt( colPos );
-
                     right += m_colWidths[i];
                     m_colRights[i] = right;
                 }
             }
             if ( m_currentCellCoords == wxGridNoCellCoords )
             {
@@ -4732,38 +4667,20 @@
         case wxGRIDTABLE_NOTIFY_COLS_DELETED:
         {
             size_t pos = msg.GetCommandInt();
             int numCols = msg.GetCommandInt2();
             m_numCols -= numCols;
 
-            if ( !m_colAt.IsEmpty() )
-            {
-                int colID = GetColAt( pos );
-
-                m_colAt.RemoveAt( pos, numCols );
-
-                //Shift the column IDs
-                int colPos;
-                for ( colPos = 0; colPos < m_numCols; colPos++ )
-                {
-                    if ( m_colAt[colPos] > colID )
-                        m_colAt[colPos] -= numCols;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.RemoveAt( pos, numCols );
                 m_colRights.RemoveAt( pos, numCols );
 
                 int w = 0;
-                int colPos;
-                for ( colPos = 0;  colPos < m_numCols;  colPos++ )
+                for ( i = 0;  i < m_numCols;  i++ )
                 {
-                    i = GetColAt( colPos );
-
                     w += m_colWidths[i];
                     m_colRights[i] = w;
                 }
             }
             if ( !m_numCols )
             {
@@ -4888,17 +4805,14 @@
         CalcUnscrolledPosition( r.GetLeft(), 0, &left, &dummy );
         CalcUnscrolledPosition( r.GetRight(), 0, &right, &dummy );
 
         // find the cells within these bounds
         //
         int col;
-        int colPos;
-        for ( colPos = GetColPos( internalXToCol(left) );  colPos < m_numCols;  colPos++ )
+        for ( col = internalXToCol(left);  col < m_numCols;  col++ )
         {
-            col = GetColAt( colPos );
-
             if ( GetColRight(col) < left )
                 continue;
 
             if ( GetColLeft(col) > right )
                 break;
 
@@ -4950,17 +4864,14 @@
             if ( GetRowBottom(row) <= top )
                 continue;
 
             if ( GetRowTop(row) > bottom )
                 break;
 
-            int colPos;
-            for ( colPos = GetColPos( internalXToCol(left) );  colPos < m_numCols;  colPos++ )
+            for ( col = internalXToCol(left);  col < m_numCols;  col++ )
             {
-                col = GetColAt( colPos );
-
                 if ( GetColRight(col) <= left )
                     continue;
 
                 if ( GetColLeft(col) > right )
                     break;
 
@@ -5209,15 +5120,12 @@
     if ( event.Dragging() )
     {
         if (!m_isDragging)
         {
             m_isDragging = true;
             m_colLabelWin->CaptureMouse();
-
-            if ( m_cursorMode == WXGRID_CURSOR_MOVE_COL )
-                m_dragRowOrCol = XToCol( x );
         }
 
         if ( event.LeftIsDown() )
         {
             switch( m_cursorMode )
             {
@@ -5255,72 +5163,12 @@
                                                     event.MetaDown() );
                         }
                     }
                 }
                 break;
 
-                case WXGRID_CURSOR_MOVE_COL:
-                {
-                    if ( x < 0 )
-                        m_moveToCol = GetColAt( 0 );
-                    else
-                        m_moveToCol = XToCol( x );
-
-                    int markerX;
-
-                    if ( m_moveToCol < 0 )
-                        markerX = GetColRight( GetColAt( m_numCols - 1 ) );
-                    else
-                        markerX = GetColLeft( m_moveToCol );
-
-                    if ( markerX != m_dragLastPos )
-                    {
-                        wxClientDC dc( m_colLabelWin );
-                        dc.BeginDrawing();
-
-                        int cw, ch;
-                        m_colLabelWin->GetClientSize( &cw, &ch );
-
-                        markerX++;
-
-                        //Clean up the last indicator
-                        if ( m_dragLastPos >= 0 )
-                        {
-                            wxPen pen( m_colLabelWin->GetBackgroundColour(), 2 );
-                            dc.SetPen(pen);
-                            dc.DrawLine( m_dragLastPos + 1, 0, m_dragLastPos + 1, ch );
-                            dc.SetPen(wxNullPen);
-
-                            if ( XToCol( m_dragLastPos ) != -1 )
-                                DrawColLabel( dc, XToCol( m_dragLastPos ) );
-                        }
-
-                        //Moving to the same place? Don't draw a marker
-                        if ( (m_moveToCol == m_dragRowOrCol)
-                          || (GetColPos( m_moveToCol ) == GetColPos( m_dragRowOrCol ) + 1)
-                          || (m_moveToCol < 0 && m_dragRowOrCol == GetColAt( m_numCols - 1 )))
-                        {
-                            m_dragLastPos = -1;
-                            return;
-                        }
-
-                        //Draw the marker
-                        wxPen pen( *wxBLUE, 2 );
-                        dc.SetPen(pen);
-
-                        dc.DrawLine( markerX, 0, markerX, ch );
-
-                        dc.SetPen(wxNullPen);
-
-                        dc.EndDrawing();
-
-                        m_dragLastPos = markerX - 1;
-                    }
-                }
-                break;
-
                 // default label to suppress warnings about "enumeration value
                 // 'xxx' not handled in switch
                 default:
                     break;
             }
         }
@@ -5355,52 +5203,37 @@
         if ( XToEdgeOfCol(x) < 0 )
         {
             col = XToCol(x);
             if ( col >= 0  &&
                  !SendEvent( wxEVT_GRID_LABEL_LEFT_CLICK, -1, col, event ) )
             {
-                if ( m_canMoveColPos )
-                {
-                    //Show button as pressed
-                    wxClientDC dc( m_colLabelWin );
-                    int colLeft = GetColLeft( col );
-                    int colRight = GetColRight( col ) - 1;
-                    dc.SetPen( wxPen( m_colLabelWin->GetBackgroundColour(), 1 ) );
-                    dc.DrawLine( colLeft, 1, colLeft, m_colLabelHeight-1 );
-                    dc.DrawLine( colLeft, 1, colRight, 1 );
-
-                    ChangeCursorMode(WXGRID_CURSOR_MOVE_COL, m_colLabelWin);
-                }
-                else
-                {
-                    if ( !event.ShiftDown() && !event.ControlDown() )
-                        ClearSelection();
-                    if ( m_selection )
-                    {
-                        if ( event.ShiftDown() )
-                        {
-                            m_selection->SelectBlock( 0,
-                                                    m_currentCellCoords.GetCol(),
-                                                    GetNumberRows() - 1, col,
-                                                    event.ControlDown(),
-                                                    event.ShiftDown(),
-                                                    event.AltDown(),
-                                                    event.MetaDown() );
-                        }
-                        else
-                        {
-                            m_selection->SelectCol( col,
-                                                    event.ControlDown(),
-                                                    event.ShiftDown(),
-                                                    event.AltDown(),
-                                                    event.MetaDown() );
-                        }
-                    }
+                if ( !event.ShiftDown() && !event.ControlDown() )
+                    ClearSelection();
+                if ( m_selection )
+                {
+                    if ( event.ShiftDown() )
+                    {
+                        m_selection->SelectBlock( 0,
+                                                  m_currentCellCoords.GetCol(),
+                                                  GetNumberRows() - 1, col,
+                                                  event.ControlDown(),
+                                                  event.ShiftDown(),
+                                                  event.AltDown(),
+                                                  event.MetaDown() );
+                    }
+                    else
+                    {
+                        m_selection->SelectCol( col,
+                                                event.ControlDown(),
+                                                event.ShiftDown(),
+                                                event.AltDown(),
+                                                event.MetaDown() );
+                    }
+                }
 
-                    ChangeCursorMode(WXGRID_CURSOR_SELECT_COL, m_colLabelWin);
-                }
+                ChangeCursorMode(WXGRID_CURSOR_SELECT_COL, m_colLabelWin);
             }
         }
         else
         {
             // starting to drag-resize a col
             //
@@ -5436,32 +5269,20 @@
 
 
     // ------------ Left button released
     //
     else if ( event.LeftUp() )
     {
-        switch ( m_cursorMode )
-        {
-            case WXGRID_CURSOR_RESIZE_COL:
-            {
-                DoEndDragResizeCol();
+        if ( m_cursorMode == WXGRID_CURSOR_RESIZE_COL )
+        {
+            DoEndDragResizeCol();
 
-                // Note: we are ending the event *after* doing
-                // default processing in this case
-                //
-                SendEvent( wxEVT_GRID_COL_SIZE, -1, m_dragRowOrCol, event );
-            }
-            break;
-
-            case WXGRID_CURSOR_MOVE_COL:
-            {
-                DoEndDragMoveCol();
-
-                SendEvent( wxEVT_GRID_COL_MOVE, -1, m_dragRowOrCol, event );
-            }
-            break;
+            // Note: we are ending the event *after* doing
+            // default processing in this case
+            //
+            SendEvent( wxEVT_GRID_COL_SIZE, -1, m_dragRowOrCol, event );
         }
 
         ChangeCursorMode(WXGRID_CURSOR_SELECT_CELL, m_colLabelWin);
         m_dragLastPos  = -1;
     }
 
@@ -5651,13 +5472,13 @@
         }
 
         m_isDragging = true;
         if ( m_cursorMode == WXGRID_CURSOR_SELECT_CELL )
         {
             // Hide the edit control, so it
-            // won't interfere with drag-shrinking.
+            // won't interfer with drag-shrinking.
             if ( IsCellEditControlShown() )
             {
                 HideCellEditControl();
                 SaveEditControlValue();
             }
 
@@ -6131,118 +5952,12 @@
         ShowCellEditControl();
     }
 }
 
 
 
-void wxGrid::DoEndDragMoveCol()
-{
-    //The user clicked on the column but didn't actually drag
-    if ( m_dragLastPos < 0 )
-    {
-        m_colLabelWin->Refresh();   //Do this to "unpress" the column
-        return;
-    }
-
-    int newPos;
-    if ( m_moveToCol == -1 )
-        newPos = m_numCols - 1;
-    else
-    {
-        newPos = GetColPos( m_moveToCol );
-        if ( newPos > GetColPos( m_dragRowOrCol ) )
-            newPos--;
-    }
-
-    SetColPos( m_dragRowOrCol, newPos );
-}
-
-void wxGrid::SetColPos( int colID, int newPos )
-{
-    if ( m_colAt.IsEmpty() )
-    {
-        m_colAt.Alloc( m_numCols );
-
-        int i;
-        for ( i = 0; i < m_numCols; i++ )
-        {
-            m_colAt.Add( i );
-        }
-    }
-
-    int oldPos = GetColPos( colID );
-    
-    //Reshuffle the m_colAt array
-    if ( newPos > oldPos )
-    {
-        int i;
-        for ( i = oldPos; i < newPos; i++ )
-        {
-            m_colAt[i] = m_colAt[i+1];
-        }
-    }
-    else
-    {
-        int i;
-        for ( i = oldPos; i > newPos; i-- )
-        {
-            m_colAt[i] = m_colAt[i-1];
-        }
-    }
-
-    m_colAt[newPos] = colID;
-
-    //Recalculate the column rights
-    if ( !m_colWidths.IsEmpty() )
-    {
-        int colRight = 0;
-        int colPos;
-        for ( colPos = 0; colPos < m_numCols; colPos++ )
-        {
-            int colID = GetColAt( colPos );
-
-            colRight += m_colWidths[colID];
-            m_colRights[colID] = colRight;
-        }
-    }
-
-    m_colLabelWin->Refresh();
-    m_gridWin->Refresh();
-}
-
-
-
-void wxGrid::SetUserCanMoveColumns( bool canMove )
-{
-    if ( m_canMoveColPos == canMove )
-        return;
-
-    m_canMoveColPos = canMove;
-
-    if ( !m_canMoveColPos )
-    {
-        m_colAt.Clear();
-
-        //Recalculate the column rights
-        if ( !m_colWidths.IsEmpty() )
-        {
-            int colRight = 0;
-            int colPos;
-            for ( colPos = 0; colPos < m_numCols; colPos++ )
-            {
-                colRight += m_colWidths[colPos];
-                m_colRights[colPos] = colRight;
-            }
-        }
-
-        m_colLabelWin->Refresh();
-        m_gridWin->Refresh();
-    }
-}
-
-
 //
 // ------ interaction with data model
 //
 bool wxGrid::ProcessTableMessage( wxGridTableMessage& msg )
 {
     switch ( msg.GetId() )
@@ -7251,13 +6966,13 @@
   int cw, ch;
   m_gridWin->GetClientSize( &cw, &ch );
 
   int right, bottom;
   CalcUnscrolledPosition( cw, ch, &right, &bottom );
 
-  int rightCol = m_numCols > 0 ? GetColRight(GetColAt( m_numCols - 1 )) : 0;
+  int rightCol = m_numCols > 0 ? GetColRight(m_numCols - 1) : 0;
   int bottomRow = m_numRows > 0 ? GetRowBottom(m_numRows - 1) : 0 ;
 
   if ( right > rightCol || bottom > bottomRow )
   {
       int left, top;
       CalcUnscrolledPosition( 0, 0, &left, &top );
@@ -7333,14 +7048,14 @@
     // it doesn't look really good
 
     int penWidth = attr->IsReadOnly() ? m_cellHighlightROPenWidth : m_cellHighlightPenWidth;
 
     if (penWidth > 0)
     {
-        // The center of the drawn line is where the position/width/height of
-        // the rectangle is actually at, (on wxMSW at least,) so we will
+        // The center of th drawn line is where the position/width/height of
+        // the rectangle is actually at, (on wxMSW atr least,) so we will
         // reduce the size of the rectangle to compensate for the thickness of
         // the line.  If this is too strange on non wxMSW platforms then
         // please #ifdef this appropriately.
         rect.x += penWidth/2;
         rect.y += penWidth/2;
         rect.width -= penWidth-1;
@@ -7473,35 +7188,32 @@
       CalcUnscrolledPosition( 0, 0, &left, &top );
       CalcUnscrolledPosition( cw, ch, &right, &bottom );
 #endif
 
     // avoid drawing grid lines past the last row and col
     //
-    right = wxMin( right, GetColRight(GetColAt( m_numCols - 1 )) );
+    right = wxMin( right, GetColRight(m_numCols - 1) );
     bottom = wxMin( bottom, GetRowBottom(m_numRows - 1) );
 
     // no gridlines inside multicells, clip them out
-    int leftCol   = GetColPos( internalXToCol(left) );
+    int leftCol   = internalXToCol(left);
     int topRow    = internalYToRow(top);
-    int rightCol  = GetColPos( internalXToCol(right) );
+    int rightCol  = internalXToCol(right);
     int bottomRow = internalYToRow(bottom);
 
 #ifndef __WXMAC__
     // CS: I don't know why suddenly unscrolled coordinates are used for clipping
     wxRegion clippedcells(0, 0, cw, ch);
 
     int i, j, cell_rows, cell_cols;
     wxRect rect;
 
     for (j=topRow; j<bottomRow; j++)
     {
-        int colPos;
-        for ( colPos = leftCol; colPos < rightCol; colPos++)
+        for (i=leftCol; i<rightCol; i++)
         {
-            i = GetColAt( colPos );
-
             GetCellSize( j, i, &cell_rows, &cell_cols );
             if ((cell_rows > 1) || (cell_cols > 1))
             {
                 rect = CellToRect(j,i);
                 CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
                 clippedcells.Subtract(rect);
@@ -7560,17 +7272,14 @@
         }
     }
 
 
     // vertical grid lines
     //
-    int colPos;
-    for ( colPos = leftCol; colPos < m_numCols; colPos++ )
+    for ( i = internalXToCol(left); i < m_numCols; i++ )
     {
-        i = GetColAt( colPos );
-
         int colRight = GetColRight(i) - 1;
         if ( colRight > right )
         {
             break;
         }
 
@@ -7615,13 +7324,13 @@
 
     wxRendererNative::Get().DrawHeaderButton( win_dc->m_owner, dc, rect, 0 );
 #else
     int rowTop = GetRowTop(row),
         rowBottom = GetRowBottom(row) - 1;
 
-    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DSHADOW),1, wxSOLID) );
+    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW),1, wxSOLID) );
     dc.DrawLine( m_rowLabelWidth-1, rowTop,
                  m_rowLabelWidth-1, rowBottom );
 
     dc.DrawLine( 0, rowTop, 0, rowBottom );
 
     dc.DrawLine( 0, rowBottom, m_rowLabelWidth, rowBottom );
@@ -7676,13 +7385,13 @@
     wxWindowDC *win_dc = (wxWindowDC*) &dc;
 
     wxRendererNative::Get().DrawHeaderButton( win_dc->m_owner, dc, rect, 0 );
 #else
     int colRight = GetColRight(col) - 1;
 
-    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DSHADOW),1, wxSOLID) );
+    dc.SetPen( wxPen(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW),1, wxSOLID) );
     dc.DrawLine( colRight, 0,
                  colRight, m_colLabelHeight-1 );
 
     dc.DrawLine( colLeft, 0, colRight, 0 );
 
     dc.DrawLine( colLeft, m_colLabelHeight-1,
@@ -8050,19 +7759,22 @@
             }
 
             // convert to scrolled coords
             //
             CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
 
+            // done in PaintBackground()
+#if 0
             // erase the highlight and the cell contents because the editor
             // might not cover the entire cell
             wxClientDC dc( m_gridWin );
             PrepareDC( dc );
-            dc.SetBrush(wxBrush(GetCellAttr(row, col)->GetBackgroundColour(), wxSOLID));
+            dc.SetBrush(*wxLIGHT_GREY_BRUSH); //wxBrush(attr->GetBackgroundColour(), wxSOLID));
             dc.SetPen(*wxTRANSPARENT_PEN);
             dc.DrawRectangle(rect);
+#endif // 0
 
             // cell is shifted by one pixel
             // However, don't allow x or y to become negative
             // since the SetSize() method interprets that as
             // "don't change."
             if (rect.x > 0)
@@ -8287,71 +7999,16 @@
 {
     return CoordToRowOrCol(y, m_defaultRowHeight,
                            m_minAcceptableRowHeight, m_rowBottoms, m_numRows, false);
 }
 
 
-int wxGrid::XToCol( int x, bool clipToMinMax )
+int wxGrid::XToCol( int x )
 {
-    if (x < 0)
-        return clipToMinMax && (m_numCols > 0) ? GetColAt( 0 ) : -1;
-
-    if (!m_defaultColWidth)
-        m_defaultColWidth = 1;
-
-    int maxPos = x / m_defaultColWidth;
-    int minPos = 0;
-
-    if (m_colRights.IsEmpty())
-    {
-        if(maxPos < m_numCols)
-            return GetColAt( maxPos );
-        return clipToMinMax ? GetColAt( m_numCols - 1 ) : -1;
-    }
-
-    if ( maxPos >= m_numCols)
-        maxPos = m_numCols - 1;
-    else
-    {
-        if ( x >= m_colRights[GetColAt( maxPos )])
-        {
-            minPos = maxPos;
-            if (m_minAcceptableColWidth)
-                maxPos = x / m_minAcceptableColWidth;
-            else
-                maxPos =  m_numCols - 1;
-        }
-        if ( maxPos >= m_numCols)
-            maxPos = m_numCols - 1;
-    }
-    
-    //X is beyond the last column
-    if ( x >= m_colRights[GetColAt( maxPos )])
-        return clipToMinMax ? GetColAt( maxPos ) : -1;
-
-    //X is before the first column
-    if ( x < m_colRights[GetColAt( 0 )] )
-        return GetColAt( 0 );
-
-    //Perform a binary search
-    while ( maxPos - minPos > 0 )
-    {
-        wxCHECK_MSG(m_colRights[GetColAt( minPos )] <= x && x < m_colRights[GetColAt( maxPos )],
-                    0, _T("wxGrid: internal error in XToCol"));
-
-        if (x >=  m_colRights[GetColAt( maxPos - 1 )])
-            return GetColAt( maxPos );
-        else
-            maxPos--;
-        int median = minPos + (maxPos - minPos + 1) / 2;
-        if (x < m_colRights[GetColAt( median )])
-            maxPos = median;
-        else
-            minPos = median;
-    }
-    return GetColAt( maxPos );
+    return CoordToRowOrCol(x, m_defaultColWidth,
+                           m_minAcceptableColWidth, m_colRights, m_numCols, false);
 }
 
 
 // return the row number that that the y coord is near the edge of, or
 // -1 if not near an edge
 //
@@ -8628,22 +8285,19 @@
                 m_selectingKeyboard.SetCol( m_selectingKeyboard.GetCol() - 1 );
                 MakeCellVisible( m_selectingKeyboard.GetRow(),
                         m_selectingKeyboard.GetCol() );
                 HighlightBlock( m_currentCellCoords, m_selectingKeyboard );
             }
         }
-        else if ( GetColPos( m_currentCellCoords.GetCol() ) > 0 )
+        else if ( m_currentCellCoords.GetCol() > 0 )
         {
             ClearSelection();
-
-            int newColID = GetColAt( GetColPos( m_currentCellCoords.GetCol() ) - 1 );
-
             MakeCellVisible( m_currentCellCoords.GetRow(),
-                             newColID );
+                             m_currentCellCoords.GetCol() - 1 );
             SetCurrentCell( m_currentCellCoords.GetRow(),
-                            newColID );
+                            m_currentCellCoords.GetCol() - 1 );
         }
         else
             return false;
         return true;
     }
 
@@ -8665,22 +8319,19 @@
                 m_selectingKeyboard.SetCol( m_selectingKeyboard.GetCol() + 1 );
                 MakeCellVisible( m_selectingKeyboard.GetRow(),
                         m_selectingKeyboard.GetCol() );
                 HighlightBlock( m_currentCellCoords, m_selectingKeyboard );
             }
         }
-        else if ( GetColPos( m_currentCellCoords.GetCol() ) < m_numCols - 1 )
+        else if ( m_currentCellCoords.GetCol() < m_numCols - 1 )
         {
             ClearSelection();
-
-            int newColID = GetColAt( GetColPos( m_currentCellCoords.GetCol() ) + 1 );
-
             MakeCellVisible( m_currentCellCoords.GetRow(),
-                             newColID );
+                             m_currentCellCoords.GetCol() + 1 );
             SetCurrentCell( m_currentCellCoords.GetRow(),
-                            newColID );
+                            m_currentCellCoords.GetCol() + 1 );
         }
         else
             return false;
         return true;
     }
 
@@ -10008,13 +9659,13 @@
 {
     wxCHECK_RET( col >= 0 && col < m_numCols, _T("invalid column index") );
 
     // should we check that it's bigger than GetColMinimalWidth(col) here?
     //                                                                 (VZ)
     // No, because it is reasonable to assume the library user know's
-    // what he is doing. However we should test against the weaker
+    // what he is doing. However whe should test against the weaker
     // constariant of minimalAcceptableWidth, as this breaks rendering
     //
     // This test then fixes sf.net bug #645734
 
     if ( width < GetColMinimalAcceptableWidth()) { return; }
 
@@ -10037,16 +9688,14 @@
     }
     int w = wxMax( 0, width );
     int diff = w - m_colWidths[col];
     m_colWidths[col] = w;
 
     int i;
-    int colPos;
-    for ( colPos = GetColPos( col ); colPos < m_numCols; colPos++ )
+    for ( i = col;  i < m_numCols;  i++ )
     {
-        i = GetColAt( colPos );
         m_colRights[i] += diff;
     }
     if ( !GetBatchCount() )
         CalcDimensions();
 }
 

 	  	 

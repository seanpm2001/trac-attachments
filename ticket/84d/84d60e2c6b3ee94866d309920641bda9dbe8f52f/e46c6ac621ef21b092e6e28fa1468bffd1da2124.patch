Index: tests/test.cpp
===================================================================
--- tests/test.cpp	(revision 62453)
+++ tests/test.cpp	(working copy)
@@ -254,7 +254,7 @@
     virtual void OnInitCmdLine(wxCmdLineParser& parser);
     virtual bool OnCmdLineParsed(wxCmdLineParser& parser);
     virtual bool OnInit();
-    virtual int  OnRun();
+    virtual void  OnTestStart(const wxTimerEvent&);
     virtual int  OnExit();
 
     // used by events propagation test
@@ -283,6 +283,7 @@
     bool m_timing;
     wxArrayString m_registries;
     wxLocale *m_locale;
+    wxTimer* m_timer;
 
     // event handling hooks
     FilterEventFunc m_filterEventFunc;
@@ -418,9 +419,13 @@
 
 #if wxUSE_GUI
     // create a hidden parent window to be used as parent for the GUI controls
-    new wxFrame(NULL, wxID_ANY, "Hidden wx test frame");
+    wxFrame* mainFrame = new wxFrame(NULL, wxID_ANY, "Hidden wx test frame");
+    mainFrame->Show();
 #endif // wxUSE_GUI
+    m_timer = new wxTimer(this);
+    Bind(wxEVT_TIMER, &TestApp::OnTestStart, this);
 
+    m_timer->Start(50, true);
     return true;
 }
 
@@ -509,14 +514,8 @@
 
 // Run
 //
-int TestApp::OnRun()
+void TestApp::OnTestStart(const wxTimerEvent&)
 {
-#if wxUSE_GUI
-#ifdef __WXOSX__
-    // make sure there's always an autorelease pool ready
-    wxMacAutoreleasePool autoreleasepool;
-#endif
-#endif
 
 #if wxUSE_LOG
     // Switch off logging unless --verbose
@@ -548,7 +547,7 @@
             if ( !test )
             {
                 cerr << "No such test suite: " << string(reg.mb_str()) << endl;
-                return 2;
+                return; // 2;
             }
 
             AddTest(runner, test);
@@ -556,7 +555,7 @@
     }
 
     if ( m_list )
-        return EXIT_SUCCESS;
+        return; // EXIT_SUCCESS;
 
     runner.setOutputter(new CppUnit::CompilerOutputter(&runner.result(), cout));
 
@@ -577,7 +576,10 @@
     runner.eventManager().pushProtector(new wxUnitTestProtector);
 
     bool printProgress = !(verbose || m_detail || m_timing);
-    return runner.run("", false, true, printProgress) ? EXIT_SUCCESS : EXIT_FAILURE;
+    int result = runner.run("", false, true, printProgress) ? EXIT_SUCCESS : EXIT_FAILURE;
+    
+    delete m_timer;
+    ExitMainLoop();
 }
 
 int TestApp::OnExit()

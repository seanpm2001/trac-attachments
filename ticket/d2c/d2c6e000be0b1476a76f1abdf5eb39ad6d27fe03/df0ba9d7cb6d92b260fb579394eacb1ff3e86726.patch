Index: webview_ie.h
===================================================================
--- webview_ie.h	(revision 69184)
+++ webview_ie.h	(working copy)
@@ -10,10 +10,10 @@
 #ifndef wxWebViewIE_H
 #define wxWebViewIE_H
 
+#if wxUSE_WEBVIEW && wxUSE_WEBVIEW_IE && defined(__WXMSW__)
+
 #include "wx/setup.h"
 
-#if wxUSE_WEBVIEW && wxUSE_WEBVIEW_IE && defined(__WXMSW__)
-
 #include "wx/control.h"
 #include "wx/webview.h"
 #include "wx/msw/ole/automtn.h"
@@ -21,6 +21,180 @@
 #include "wx/sharedptr.h"
 #include "wx/vector.h"
 
+typedef struct _tagPROTOCOLDATA
+    {
+    DWORD grfFlags;
+    DWORD dwState;
+    LPVOID pData;
+    ULONG cbData;
+    } 	PROTOCOLDATA;
+
+typedef /* [public] */ 
+enum __MIDL_IBindStatusCallback_0006
+    {	BSCF_FIRSTDATANOTIFICATION	= 0x1,
+	BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
+	BSCF_LASTDATANOTIFICATION	= 0x4,
+	BSCF_DATAFULLYAVAILABLE	= 0x8,
+	BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10
+    } 	BSCF;
+
+typedef struct _tagBINDINFO
+    {
+    ULONG cbSize;
+    LPWSTR szExtraInfo;
+    STGMEDIUM stgmedData;
+    DWORD grfBindInfoF;
+    DWORD dwBindVerb;
+    LPWSTR szCustomVerb;
+    DWORD cbstgmedData;
+    DWORD dwOptions;
+    DWORD dwOptionsFlags;
+    DWORD dwCodePage;
+    SECURITY_ATTRIBUTES securityAttributes;
+    IID iid;
+    IUnknown *pUnk;
+    DWORD dwReserved;
+    } 	BINDINFO;
+
+EXTERN_C const IID CLSID_FileProtocol;   
+EXTERN_C const IID IID_IInternetProtocolRoot;
+EXTERN_C const IID IID_IInternetProtocol;
+
+    class IInternetProtocolSink : public IUnknown
+    {
+    public:
+        virtual HRESULT STDMETHODCALLTYPE Switch( 
+            /* [in] */ PROTOCOLDATA *pProtocolData) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE ReportProgress( 
+            /* [in] */ ULONG ulStatusCode,
+            /* [in] */ LPCWSTR szStatusText) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE ReportData( 
+            /* [in] */ DWORD grfBSCF,
+            /* [in] */ ULONG ulProgress,
+            /* [in] */ ULONG ulProgressMax) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE ReportResult( 
+            /* [in] */ HRESULT hrResult,
+            /* [in] */ DWORD dwError,
+            /* [in] */ LPCWSTR szResult) = 0;
+        
+    };
+
+    class IInternetBindInfo : public IUnknown
+    {
+    public:
+        virtual HRESULT STDMETHODCALLTYPE GetBindInfo( 
+            /* [out] */ DWORD *grfBINDF,
+            /* [unique][out][in] */ BINDINFO *pbindinfo) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE GetBindString( 
+            /* [in] */ ULONG ulStringType,
+            /* [out][in] */ LPOLESTR *ppwzStr,
+            /* [in] */ ULONG cEl,
+            /* [out][in] */ ULONG *pcElFetched) = 0;
+        
+    };
+
+    class IInternetProtocolRoot : public IUnknown
+    {
+    public:
+        virtual HRESULT STDMETHODCALLTYPE Start( 
+            /* [in] */ LPCWSTR szUrl,
+            /* [in] */ IInternetProtocolSink *pOIProtSink,
+            /* [in] */ IInternetBindInfo *pOIBindInfo,
+            /* [in] */ DWORD grfPI,
+            /* [in] */ HANDLE_PTR dwReserved) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Continue( 
+            /* [in] */ PROTOCOLDATA *pProtocolData) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Abort( 
+            /* [in] */ HRESULT hrReason,
+            /* [in] */ DWORD dwOptions) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Terminate( 
+            /* [in] */ DWORD dwOptions) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Suspend( void) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
+        
+    };
+
+    class IInternetProtocol : public IInternetProtocolRoot
+    {
+    public:
+        virtual HRESULT STDMETHODCALLTYPE Read( 
+            /* [length_is][size_is][out][in] */ void *pv,
+            /* [in] */ ULONG cb,
+            /* [out] */ ULONG *pcbRead) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE Seek( 
+            /* [in] */ LARGE_INTEGER dlibMove,
+            /* [in] */ DWORD dwOrigin,
+            /* [out] */ ULARGE_INTEGER *plibNewPosition) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE LockRequest( 
+            /* [in] */ DWORD dwOptions) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE UnlockRequest( void) = 0;
+        
+    };
+
+    class IInternetSession : public IUnknown
+    {
+    public:
+        virtual HRESULT STDMETHODCALLTYPE RegisterNameSpace( 
+            /* [in] */ IClassFactory *pCF,
+            /* [in] */ REFCLSID rclsid,
+            /* [in] */ LPCWSTR pwzProtocol,
+            /* [in] */ ULONG cPatterns,
+            /* [in] */ const LPCWSTR *ppwzPatterns,
+            /* [in] */ DWORD dwReserved) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE UnregisterNameSpace( 
+            /* [in] */ IClassFactory *pCF,
+            /* [in] */ LPCWSTR pszProtocol) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE RegisterMimeFilter( 
+            /* [in] */ IClassFactory *pCF,
+            /* [in] */ REFCLSID rclsid,
+            /* [in] */ LPCWSTR pwzType) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE UnregisterMimeFilter( 
+            /* [in] */ IClassFactory *pCF,
+            /* [in] */ LPCWSTR pwzType) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE CreateBinding( 
+            /* [in] */ LPBC pBC,
+            /* [in] */ LPCWSTR szUrl,
+            /* [in] */ IUnknown *pUnkOuter,
+            /* [unique][out] */ IUnknown **ppUnk,
+            /* [unique][out] */ IInternetProtocol **ppOInetProt,
+            /* [in] */ DWORD dwOption) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE SetSessionOption( 
+            /* [in] */ DWORD dwOption,
+            /* [in] */ LPVOID pBuffer,
+            /* [in] */ DWORD dwBufferLength,
+            /* [in] */ DWORD dwReserved) = 0;
+        
+        virtual HRESULT STDMETHODCALLTYPE GetSessionOption( 
+            /* [in] */ DWORD dwOption,
+            /* [out][in] */ LPVOID pBuffer,
+            /* [out][in] */ DWORD *pdwBufferLength,
+            /* [in] */ DWORD dwReserved) = 0;
+        
+    };
+
+STDAPI CoInternetGetSession(             
+    DWORD       dwSessionMode,           
+    /*__deref_out*/ IInternetSession **ppIInternetSession,
+    DWORD       dwReserved               
+    );                                   
+
 struct IHTMLDocument2;
 class wxFSFile;
 

Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	(revision 66180)
+++ samples/dataview/dataview.cpp	(working copy)
@@ -79,6 +79,7 @@
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
 
+    void OnRecreate(wxCommandEvent& event);
     void OnClearLog(wxCommandEvent& event);
     void OnPageChanged(wxBookCtrlEvent& event);
 
@@ -142,6 +143,9 @@
 
     wxDataViewCtrl* m_ctrl[4];
 
+    // Debugging variable so we can find the sizer again
+    wxSizer* m_Panel3Sizer;
+
     // the models associated with the first two DVC:
 
     wxObjectDataPtr<MyMusicTreeModel> m_music_model;
@@ -259,6 +263,7 @@
     ID_BACKGROUND_COLOUR,
     ID_FOREGROUND_COLOUR,
     ID_STYLE_MENU,
+    ID_RECREATE_MENU,
 
     // file menu
     //ID_SINGLE,        wxDV_SINGLE==0 so it's always present
@@ -306,6 +311,7 @@
     EVT_MENU( ID_EXIT, MyFrame::OnQuit )
     EVT_MENU( ID_ABOUT, MyFrame::OnAbout )
     EVT_MENU( ID_CLEARLOG, MyFrame::OnClearLog )
+    EVT_MENU( ID_RECREATE_MENU, MyFrame::OnRecreate)
 
     EVT_MENU( ID_FOREGROUND_COLOUR, MyFrame::OnSetForegroundColour )
     EVT_MENU( ID_BACKGROUND_COLOUR, MyFrame::OnSetBackgroundColour )
@@ -391,6 +397,7 @@
     file_menu->Append(ID_FOREGROUND_COLOUR, "Set &foreground colour...\tCtrl-S");
     file_menu->Append(ID_BACKGROUND_COLOUR, "Set &background colour...\tCtrl-B");
     file_menu->Append(ID_STYLE_MENU, "&Style", style_menu);
+    file_menu->Append(ID_RECREATE_MENU, "Recreate panel 3");
     file_menu->AppendSeparator();
     file_menu->Append(ID_EXIT, "E&xit");
 
@@ -478,6 +485,7 @@
     BuildDataViewCtrl(thirdPanel, 2);    // sets m_ctrl[2]
 
     wxSizer *thirdPanelSz = new wxBoxSizer( wxVERTICAL );
+    m_Panel3Sizer = thirdPanelSz;
     thirdPanelSz->Add(m_ctrl[2], 1, wxGROW|wxALL, 5);
     thirdPanel->SetSizerAndFit(thirdPanelSz);
 
@@ -654,7 +662,12 @@
             m_ctrl[2] = lc;
 
             lc->AppendToggleColumn( "Toggle" );
-            lc->AppendTextColumn( "Text" );
+
+        lc->GetStore()->AppendColumn( "long" );
+        wxDataViewColumn* col = new wxDataViewColumn( "Text", new wxDataViewSpinRenderer( -10, 20, wxDATAVIEW_CELL_EDITABLE ) , lc->GetStore()->GetColumnCount()-1 );
+        lc->wxDataViewCtrl::AppendColumn( col );
+
+//            lc->AppendTextColumn( "Text", wxDATAVIEW_CELL_EDITABLE);
             lc->AppendProgressColumn( "Progress" );
 
             wxVector<wxVariant> data;
@@ -662,7 +675,7 @@
             {
                 data.clear();
                 data.push_back( (i%3) == 0 );
-                data.push_back( wxString::Format("row %d", i) );
+                data.push_back( wxString::Format("%d", i) );
                 data.push_back( long(5*i) );
 
                 lc->AppendItem( data );
@@ -704,6 +717,44 @@
 // MyFrame - generic event handlers
 // ----------------------------------------------------------------------------
 
+void MyFrame::OnRecreate( wxCommandEvent& WXUNUSED(event) )
+{
+    wxWindow* parent = m_ctrl[2]->GetParent();
+
+    wxDataViewCtrl* old = m_ctrl[2];
+
+    wxDataViewListCtrl* lc =
+        new wxDataViewListCtrl( parent, wxID_ANY, wxDefaultPosition,
+                                wxDefaultSize);
+
+    m_ctrl[2] = lc;
+
+    lc->AppendToggleColumn( "Toggle" );
+
+    lc->GetStore()->AppendColumn( "long" );
+    wxDataViewColumn* col = new wxDataViewColumn( "Text", new wxDataViewSpinRenderer( -10, 20, wxDATAVIEW_CELL_EDITABLE ) , lc->GetStore()->GetColumnCount()-1 );
+    lc->wxDataViewCtrl::AppendColumn( col );
+
+//    lc->AppendTextColumn( "Text", wxDATAVIEW_CELL_EDITABLE);
+    lc->AppendProgressColumn( "Progress" );
+
+    wxVector<wxVariant> data;
+    for (unsigned int i=0; i<10; i++)
+    {
+        data.clear();
+        data.push_back( (i%3) == 0 );
+        data.push_back( wxString::Format("%d", i) );
+        data.push_back( long(5*i) );
+
+        lc->AppendItem( data );
+    }
+
+    m_Panel3Sizer->Replace(old, lc);
+    m_Panel3Sizer->Layout();
+
+    old->Destroy();
+}
+
 void MyFrame::OnClearLog( wxCommandEvent& WXUNUSED(event) )
 {
     m_log->Clear();

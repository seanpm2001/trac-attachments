Index: slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/widgets/slider.cpp,v
retrieving revision 1.10
diff -r1.10 slider.cpp
38a39,42
> #if wxUSE_TOOLTIPS
>     #include "wx/tooltip.h"
> #endif
> 
55a60
>     SliderPage_SetThumbLen,
61c66,68
<     SliderPage_OtherSide,
---
>     SliderPage_ThumbLenText,
>     SliderPage_RadioSides,
>     SliderPage_BothSides,
64a72,80
> // sides radiobox values
> enum
> {
>     StaticSides_Top,
>     StaticSides_Bottom,
>     StaticSides_Left,
>     StaticSides_Right
> };
> 
81a98
>     void OnButtonSetThumbLen(wxCommandEvent& event);
87d103
<     void OnUpdateUIOtherSide(wxUpdateUIEvent& event);
90a107,109
>     void OnUpdateUIThumbLen(wxUpdateUIEvent& event);
>     void OnUpdateUIRadioSides(wxUpdateUIEvent& event);
>     void OnUpdateUIBothSides(wxUpdateUIEvent& event);
104a124,126
>     // set the thumb len from the text field value
>     void DoSetThumbLen();
> 
117d138
<                *m_chkOtherSide,
119c140,143
<                *m_chkTicks;
---
>                *m_chkTicks,
>                *m_chkBothSides;
> 
>     wxRadioBox *m_radioSides;
129c153,154
<                *m_textTickFreq;
---
>                *m_textTickFreq,
>                *m_textThumbLen;
145,146c170
< 
<     EVT_UPDATE_UI(SliderPage_OtherSide, SliderWidgetsPage::OnUpdateUIOtherSide)
---
>     EVT_BUTTON(SliderPage_SetThumbLen, SliderWidgetsPage::OnButtonSetThumbLen)
150a175
>     EVT_UPDATE_UI(SliderPage_SetThumbLen, SliderWidgetsPage::OnUpdateUIThumbLen)
151a177,178
>     EVT_UPDATE_UI(SliderPage_RadioSides, SliderWidgetsPage::OnUpdateUIRadioSides)
>     EVT_UPDATE_UI(SliderPage_BothSides, SliderWidgetsPage::OnUpdateUIBothSides)
182c209,211
<     m_chkOtherSide = (wxCheckBox *)NULL;
---
>     m_chkBothSides = (wxCheckBox *)NULL;
> 
>     m_radioSides = (wxRadioBox *)NULL;
196,201c225,241
<     m_chkOtherSide = CreateCheckBoxAndAddToSizer
<                      (
<                         sizerLeft,
<                         _T("On &other side"),
<                         SliderPage_OtherSide
<                      );
---
>     static const wxString sides[] =
>     {
>         _T("top"),
>         _T("bottom"),
>         _T("left"),
>         _T("right"),
>     };
>     m_radioSides = new wxRadioBox(this, SliderPage_RadioSides, _T("&Ticks/Labels"),
>                                  wxDefaultPosition, wxDefaultSize,
>                                  WXSIZEOF(sides), sides,
>                                  1, wxRA_SPECIFY_COLS);
>     sizerLeft->Add(m_radioSides, 0, wxGROW | wxALL, 5);
>     m_chkBothSides = CreateCheckBoxAndAddToSizer
>                      (sizerLeft, _T("&Both sides"), SliderPage_BothSides);
> #if wxUSE_TOOLTIPS
>     m_chkBothSides->SetToolTip( _T("\"Both sides\" is only supported \nin Win95 and Universal") );
> #endif // wxUSE_TOOLTIPS
247a288,294
>     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetThumbLen,
>                                             _T("Thumb &lenght"),
>                                             SliderPage_ThumbLenText,
>                                             &m_textThumbLen);
> 
>     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
> 
250c297
<     sizerRight->SetMinSize(150, 0);
---
>     sizerRight->SetMinSize(150, 40);
278,279d324
<     m_chkLabels->SetValue(TRUE);
<     m_chkTicks->SetValue(FALSE);
281c326,330
<     m_chkOtherSide->SetValue(FALSE);
---
>     m_chkTicks->SetValue(TRUE);
>     m_chkLabels->SetValue(TRUE);
>     m_chkBothSides->SetValue(FALSE);
> 
>     m_radioSides->SetSelection(StaticSides_Top);
297,301d345
< 
<         if ( m_chkOtherSide->GetValue() )
<             flags |= isVert ? wxSL_RIGHT : wxSL_BOTTOM;
<         else
<             flags |= isVert ? wxSL_LEFT : wxSL_TOP;
308a353,376
>     switch ( m_radioSides->GetSelection() )
>     {
>         case StaticSides_Top:
>             flags |= wxSL_TOP;
>             break;
>         case StaticSides_Left:
>             flags |= wxSL_LEFT;
>             break;
>         case StaticSides_Bottom:
>             flags |= wxSL_BOTTOM;
>             break;
>         case StaticSides_Right:
>             flags |= wxSL_RIGHT;
>             break;
>         default:
>             wxFAIL_MSG(_T("unexpected radiobox selection"));
>             // fall through
>     }
> 
>     if ( m_chkBothSides->GetValue() )
>     {
>         flags |= wxSL_BOTH;
>     }
> 
366a435,447
> void SliderWidgetsPage::DoSetThumbLen()
> {
>     long len;
>     if ( !m_textThumbLen->GetValue().ToLong(&len) )
>     {
>         wxLogWarning(_T("Invalid slider thumb lenght"));
> 
>         return;
>     }
> 
>     m_slider->SetThumbLength(len);
> }
> 
382a464,468
> void SliderWidgetsPage::OnButtonSetThumbLen(wxCommandEvent& WXUNUSED(event))
> {
>     DoSetThumbLen();
> }
> 
428a515,520
> void SliderWidgetsPage::OnUpdateUIThumbLen(wxUpdateUIEvent& event)
> {
>     long val;
>     event.Enable( m_textThumbLen->GetValue().ToLong(&val));
> }
> 
439a532
>                   !m_chkTicks->GetValue() ||
441,442c534
<                   m_chkOtherSide->GetValue() ||
<                   m_chkTicks->GetValue() );
---
>                   m_chkBothSides->GetValue() );
455c547,552
< void SliderWidgetsPage::OnUpdateUIOtherSide(wxUpdateUIEvent& event)
---
> void SliderWidgetsPage::OnUpdateUIRadioSides(wxUpdateUIEvent& event)
> {
>     event.Enable( m_chkLabels->GetValue() || m_chkTicks->GetValue() );
> }
> 
> void SliderWidgetsPage::OnUpdateUIBothSides(wxUpdateUIEvent& event)
457c554,558
<     event.Enable( m_chkLabels->GetValue() );
---
> #if defined(__WIN95__) || defined(__WXUNIVERSAL__)
>     event.Enable( m_chkTicks->GetValue() );
> #else
>     event.Enable( FALSE );
> #endif // defined(__WIN95__) || defined(__WXUNIVERSAL__)

 	  	 

diff -rup .\original\/include/wx/msw/textctrl.h .\modified\/include/wx/msw/textctrl.h
--- .\original\/include/wx/msw/textctrl.h	2015-07-27 10:35:00.000000000 +0700
+++ .\modified\/include/wx/msw/textctrl.h	2015-08-05 10:25:54.610166700 +0700
@@ -67,6 +67,11 @@ public:
     virtual long GetInsertionPoint() const;
     virtual wxTextPos GetLastPosition() const;
 
+    // autocomplete; see textentry
+    // ----------------------------------
+    virtual bool MSWAutoCompleteHandleReturnKey();
+    virtual bool MSWAutoCompleteHandleTABKey();
+
     // implement base class pure virtuals
     // ----------------------------------
 
diff -rup .\original\/include/wx/msw/textentry.h .\modified\/include/wx/msw/textentry.h
--- .\original\/include/wx/msw/textentry.h	2015-07-27 10:35:00.000000000 +0700
+++ .\modified\/include/wx/msw/textentry.h	2015-08-01 20:55:36.855028600 +0700
@@ -54,6 +54,10 @@ public:
 #endif // wxUSE_UXTHEME
 
 protected:
+    // this is an autocomplete 
+    virtual bool MSWAutoCompleteHandleReturnKey() { return false; }
+    virtual bool MSWAutoCompleteHandleTABKey() { return false; }
+
     virtual wxString DoGetValue() const;
 
     // this is really a hook for multiline text controls as the single line
diff -rup .\original\/src/msw/textctrl.cpp .\modified\/src/msw/textctrl.cpp
--- .\original\/src/msw/textctrl.cpp	2015-07-27 10:35:00.000000000 +0700
+++ .\modified\/src/msw/textctrl.cpp	2015-08-08 11:27:42.063793300 +0700
@@ -1437,6 +1437,39 @@ void wxTextCtrl::DoSetSelection(long fro
 }
 
 // ----------------------------------------------------------------------------
+// AutoComplete
+// ----------------------------------------------------------------------------
+
+bool wxTextCtrl::MSWAutoCompleteHandleReturnKey()
+{
+    if ( !HasFlag(wxTE_PROCESS_ENTER) )
+        return false;
+
+    wxKeyEvent char_event( wxEVT_CHAR );
+    char_event.m_keyCode = WXK_RETURN;
+    char_event.SetId( GetId() );
+    char_event.SetEventObject( this );
+    char_event.SetShiftDown( wxIsShiftDown() );
+    char_event.SetControlDown( wxIsCtrlDown() );
+    char_event.SetAltDown( wxIsAltDown() );
+    GetEventHandler()->AddPendingEvent( char_event );
+    return true;
+}
+
+bool wxTextCtrl::MSWAutoCompleteHandleTABKey()
+{
+    wxKeyEvent char_event( wxEVT_CHAR );
+    char_event.m_keyCode = WXK_TAB;
+    char_event.SetId( GetId() );
+    char_event.SetEventObject( this );
+    char_event.SetShiftDown( wxIsShiftDown() );
+    char_event.SetControlDown( wxIsCtrlDown() );
+    char_event.SetAltDown( wxIsAltDown() );
+    GetEventHandler()->AddPendingEvent( char_event );
+    return true;
+}
+
+// ----------------------------------------------------------------------------
 // dirty status
 // ----------------------------------------------------------------------------
 
diff -rup .\original\/src/msw/textentry.cpp .\modified\/src/msw/textentry.cpp
--- .\original\/src/msw/textentry.cpp	2015-07-27 10:35:00.000000000 +0700
+++ .\modified\/src/msw/textentry.cpp	2015-08-08 12:53:03.016071600 +0700
@@ -573,24 +573,51 @@ private:
 
     void OnCharHook(wxKeyEvent& event)
     {
-        // If the autocomplete drop-down list is currently displayed when the
-        // user presses Escape, we need to dismiss it manually from here as
-        // Escape could be eaten by something else (e.g. EVT_CHAR_HOOK in the
-        // dialog that this control is found in) otherwise.
-        if ( event.GetKeyCode() == WXK_ESCAPE )
+        int iKeyCode = event.GetKeyCode();
+        switch ( iKeyCode )
         {
-            DWORD dwFlags = 0;
-            if ( SUCCEEDED(m_autoCompleteDropDown->GetDropDownStatus(&dwFlags,
-                                                                     NULL))
-                    && dwFlags == ACDD_VISIBLE )
+        case WXK_NUMPAD_ENTER:
+            iKeyCode = WXK_RETURN;
+        case WXK_RETURN:
+        case WXK_ESCAPE:
+        case WXK_TAB:
             {
-                ::SendMessage(GetHwndOf(m_win), WM_KEYDOWN, WXK_ESCAPE, 0);
-
-                // Do not skip the event in this case, we've already handled it.
-                return;
+                // If the autocomplete drop-down list is currently displayed when the
+                // user presses Escape, we need to dismiss it manually from here as
+                // Escape could be eaten by something else (e.g. EVT_CHAR_HOOK in the
+                // dialog that this control is found in) otherwise.
+                // Also handle the return key (and the numpad return) and TAB as well.
+                DWORD dwFlags = 0;
+                if ( SUCCEEDED(m_autoCompleteDropDown->GetDropDownStatus(&dwFlags,
+                    NULL)))
+                {
+                    if ( dwFlags == ACDD_VISIBLE && iKeyCode != WXK_TAB )
+                    {
+                        ::SendMessage(GetHwndOf(m_win), WM_KEYDOWN, iKeyCode, 0);
+
+                        // Do not skip the event in this case, we've already handled it.
+                        return;
+                    }
+                    else if ( dwFlags == 0x00 && m_entry )
+                    {
+                        if ( iKeyCode == WXK_RETURN )
+                        {
+                            // send wxEVT_CHAR event with WXK_RETURN to trigger
+                            // sending wxEVT_TEXT_ENTER event from OnChar()
+                            if ( m_entry->MSWAutoCompleteHandleReturnKey() )
+                                return;
+                        }
+                        else if ( iKeyCode == WXK_TAB )
+                        {
+                            // send wxEVT_CHAR event with WXK_TAB
+                            if ( m_entry->MSWAutoCompleteHandleTABKey() )
+                                return;
+                        }
+                    }
+                }
             }
+            break;
         }
-
         event.Skip();
     }
 

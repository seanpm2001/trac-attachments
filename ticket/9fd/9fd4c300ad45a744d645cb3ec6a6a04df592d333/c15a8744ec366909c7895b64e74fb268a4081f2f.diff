diff -rNbu2 wxWidgets-2.5.2_2/build/bakefiles/files.bkl wxWidgets-2.5.2/build/bakefiles/files.bkl
--- wxWidgets-2.5.2_2/build/bakefiles/files.bkl	2004-05-30 11:41:06.000000000 -0700
+++ wxWidgets-2.5.2/build/bakefiles/files.bkl	2004-07-25 14:37:02.000000000 -0700
@@ -143,4 +143,5 @@
 <set var="BASE_CMN_SRC" hints="files">
     src/common/appbase.cpp
+    src/common/chartrt.cpp
     src/common/cmdline.cpp
     src/common/config.cpp
@@ -209,4 +210,5 @@
     wx/buffer.h
     wx/build.h
+    wx/chartrt.h
     wx/chkconf.h
     wx/cmdline.h
diff -rNbu2 wxWidgets-2.5.2_2/include/wx/chartrt.h wxWidgets-2.5.2/include/wx/chartrt.h
--- wxWidgets-2.5.2_2/include/wx/chartrt.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets-2.5.2/include/wx/chartrt.h	2004-07-25 13:51:36.000000000 -0700
@@ -0,0 +1,116 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/chartrt.h
+// Purpose:     wxCharTraits class
+// Author:      Ryan Norton
+// Modified by:
+// Created:     06/27/2004
+// RCS-ID:      $Id: string.h,v 1.178 2004/06/10 19:00:56 VS Exp $
+// Copyright:   (c) 2004 Ryan Norton <wxprojects@comcast.net>
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+//
+//  STL-compatable char_traits copy
+//
+
+#ifndef _WX_WXCHARTRTH__
+#define _WX_WXCHARTRTH__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "chartrt.h"
+#endif
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "wx/defs.h"        // everybody should include this
+
+#include "wx/wxchar.h"      // for character definitions
+
+// ----------------------------------------------------------------------------
+// definitions
+// ----------------------------------------------------------------------------
+
+#if wxUSE_STL
+
+// Use STL char_traits instead
+
+#include "wx/beforestd.h"
+#include <string>
+#include "wx/afterstd.h"
+
+typedef std::char_traits<wxChar> wxCharTraits;
+
+#else // if !wxUSE_STL
+
+//in STL char_traits is a struct - so this'll be one also
+struct wxCharTraits
+{
+    ////////////////////////////
+    // typedefs
+
+    typedef wxChar char_type; 
+    typedef wxInt32 int_type; //integer than can also be a character or EOF
+    typedef size_t  off_type;    
+    typedef size_t pos_type;
+    typedef void* state_type; //implementation-defined
+
+    ////////////////////////////
+    // members
+
+    //assigns a character to another
+    static void assign(char_type& cOut, const char_type& cIn);
+
+    //puts nNum characters into szOut 
+    static char_type *assign(char_type* szOut, 
+                             const pos_type& nNum , const char_type& cIn);
+
+    // compares two strings
+    static int compare(const char_type* sz1, 
+                       const char_type* sz2, 
+                       const pos_type& nLength);
+
+    // copies one string into another
+    static char_type *copy(char_type* szOut, 
+                           const char_type* szIn, 
+                           const pos_type& nLength); 
+
+    //  returns the end-of-file (string) character
+    static int_type eof( );
+
+    //  returns true if the characters are equal
+    static bool eq(const char_type& c1, const char_type& c2); 
+
+    //  returns true if the ints are equal
+    static bool eq_int_type(const int_type& c1, const int_type& c2);
+
+    // attempts to find cChar in szString
+    static const char_type* find(const char_type* szString, 
+                                 const pos_type& nLength, 
+                                 const char_type& cChar); 
+
+    // returns the length of a string 
+    //NOTE: this is the only function that deals with "C" strings
+    static pos_type length(const char_type* szString);
+
+    // returns whether c1 is less than c2
+    static bool lt(const char_type& c1, const char_type& c2);
+
+    // moves szIn into szOut.  Overlapping allowed.
+    static char_type *move(char_type* szOut, 
+                           const char_type* szIn, 
+                           const pos_type& nLength);
+
+    // returns whether c is not the eof character
+    static int_type not_eof(const int_type& nIn);
+
+    // converts an int into a char
+    static char_type to_char_type(const int_type& nIn);
+
+    // converts an char into an int
+    static int_type to_int_type(const char_type& cIn);
+};
+
+#endif //!wxUSE_STL
+#endif //_WX_WXCHARTRTH__
\ No newline at end of file
diff -rNbu2 wxWidgets-2.5.2_2/include/wx/string.h wxWidgets-2.5.2/include/wx/string.h
--- wxWidgets-2.5.2_2/include/wx/string.h	2004-05-23 21:50:26.000000000 -0700
+++ wxWidgets-2.5.2/include/wx/string.h	2004-07-25 14:37:20.000000000 -0700
@@ -55,4 +55,5 @@
 #include "wx/buffer.h"      // for wxCharBuffer
 #include "wx/strconv.h"     // for wxConvertXXX() macros and wxMBConv classes
+#include "wx/chartrt.h"     // for wxCharTraits
 
 // ---------------------------------------------------------------------------
@@ -171,8 +172,4 @@
 #if wxUSE_STL
 
-#include "wx/beforestd.h"
-#include <string>
-#include "wx/afterstd.h"
-
 #if wxUSE_UNICODE
     #ifdef HAVE_STD_WSTRING
@@ -292,4 +289,5 @@
   typedef value_type *iterator;
   typedef const value_type *const_iterator;
+  typedef wxCharTraits traits_type;
 
   // constructors and destructor
@@ -575,7 +573,6 @@
     // equal or greater than the compare() argument.
 
-    // just like strcmp()
-  int compare(const wxStringBase& str) const
-    { return wxStrcmp(c_str(), str.c_str()); }
+    // comparision of two wxStringBase
+  int compare(const wxStringBase& str) const;
     // comparison with a substring
   int compare(size_t nStart, size_t nLen, const wxStringBase& str) const;
@@ -584,6 +581,5 @@
               const wxStringBase& str, size_t nStart2, size_t nLen2) const;
     // just like strcmp()
-  int compare(const wxChar* sz) const
-    { return wxStrcmp(c_str(), sz); }
+  int compare(const wxChar* sz) const;
     // substring comparison with first nCount characters of sz
   int compare(size_t nStart, size_t nLen,
@@ -976,7 +972,9 @@
   // string comparison
     // case-sensitive comparison (returns a value < 0, = 0 or > 0)
-  int Cmp(const wxChar *psz) const { return wxStrcmp(c_str(), psz); }
+  int Cmp(const wxChar *psz) const;
+  int Cmp(const wxString& s) const;
     // same as Cmp() but not case-sensitive
-  int CmpNoCase(const wxChar *psz) const { return wxStricmp(c_str(), psz); }
+  int CmpNoCase(const wxChar *psz) const;
+  int CmpNoCase(const wxString& s) const;
     // test for the string equality, either considering case or not
     // (if compareWithCase then the case matters)
--- wxWidgets-2.5.2_2/include/wx/wxchar.h	2004-05-23 21:50:26.000000000 -0700
+++ wxWidgets-2.5.2/include/wx/wxchar.h	2004-07-25 14:39:24.000000000 -0700
@@ -974,4 +974,80 @@
 #endif
 
+//undef existing ones
+#ifdef wxMemchr
+#undef wxMemchr
+#endif
+
+#ifdef wxMemcmp
+#undef wxMemcmp
+#endif
+
+#ifdef wxMemcpy
+#undef wxMemcpy
+#endif
+
+#ifdef wxMemmove
+#undef wxMemmove
+#endif
+
+#ifdef wxMemset
+#undef wxMemset
+#endif
+
+#ifdef __cplusplus
+
+    #if wxUSE_UNICODE
+        #include <string.h> //for mem funcs
+        
+        //implement our own wmem variants
+        inline wxChar* wxMemchr(const wxChar* s, wxChar c, size_t l)
+        {
+            for(;l && *s != c;--l, ++s) {}
+
+            if(l)
+                return (wxChar*)s;
+            return NULL;
+        }
+
+        inline int wxMemcmp(const wxChar* sz1, const wxChar* sz2, size_t len)
+        {
+            for(; *sz1 == *sz2 && len; --len, ++sz1, ++sz2) {}
+
+            if(len)
+                return *sz1 < *sz2 ? -1 : *sz1 > *sz2;
+            else
+                return 0;
+        }
+
+        inline wxChar* wxMemcpy(wxChar* szOut, const wxChar* szIn, size_t len)
+        {
+            return (wxChar*) memcpy(szOut, szIn, len * sizeof(wxChar));
+        }
+
+        inline wxChar* wxMemmove(wxChar* szOut, const wxChar* szIn, size_t len)
+        {
+            return (wxChar*) memmove(szOut, szIn, len * sizeof(wxChar));
+        }
+
+        inline wxChar* wxMemset(wxChar* szOut, const wxChar cIn, size_t len)
+        {
+            wxChar* szRet = szOut;
+
+            while (len--)
+                *szOut++ = cIn;
+
+            return szRet;
+        }
+
+    #else //!wxUSE_UNICODE
+    #   define wxMemchr memchr
+    #   define wxMemcmp memcmp
+    #   define wxMemcpy memcpy
+    #   define wxMemmove memmove
+    #   define wxMemset memset
+    #endif
+
+#endif /*__cplusplus*/
+
 #endif /* _WX_WXCHAR_H_ */
 
diff -rNbu2 wxWidgets-2.5.2_2/src/common/chartrt.cpp wxWidgets-2.5.2/src/common/chartrt.cpp
--- wxWidgets-2.5.2_2/src/common/chartrt.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets-2.5.2/src/common/chartrt.cpp	2004-07-25 13:51:32.000000000 -0700
@@ -0,0 +1,143 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        chartrt.cpp
+// Purpose:     wxCharTraits class
+// Author:      Ryan Norton
+// Modified by:
+// Created:     06/27/2004
+// RCS-ID:      $Id: string.cpp,v 1.202 2004/06/08 20:11:26 VS Exp $
+// Copyright:   (c) 2004 Ryan Norton <wxprojects@comcast.net>
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+  #pragma implementation "chartrt.h"
+#endif
+
+// ===========================================================================
+// headers
+// ===========================================================================
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+  #include "wx/defs.h"
+  #include "wx/chartrt.h"
+#endif
+
+
+#if !wxUSE_STL
+
+#include <ctype.h>
+#include <string.h>
+#include <stdlib.h>
+
+#ifdef __SALFORDC__
+  #include <clib.h>
+#endif
+
+// ===========================================================================
+// compiler defines
+// ===========================================================================
+
+//find out which compilers have the wmemXXX functions
+//defined in the posix standard
+
+#if (__VISUALC__ >= 1200) 
+#   define wxHAVE_WMEM 1
+#else
+#   define wxHAVE_WMEM 0
+#endif
+
+// ===========================================================================
+// implementation
+// ===========================================================================
+
+// ---------------------------------------------------------------------------
+// wxCharTraits
+// ---------------------------------------------------------------------------
+
+void wxCharTraits::assign(char_type& cOut, const char_type& cIn)
+{
+    cOut = cIn;
+}
+
+wxCharTraits::char_type *wxCharTraits::assign(char_type* szOut, 
+                             const pos_type& nNum , const char_type& cIn)
+{
+    return (char_type*) wxMemset(szOut, cIn, nNum);
+}
+
+int wxCharTraits::compare(const char_type* sz1, 
+                       const char_type* sz2, 
+                       const pos_type& nLength)
+{
+    return wxMemcmp(sz1, sz2, nLength);
+}
+
+wxCharTraits::char_type *wxCharTraits::copy(char_type* szOut, 
+                           const char_type* szIn, 
+                           const pos_type& nLength)
+{
+    return (char_type*) wxMemcpy(szOut, szIn, nLength);
+}
+
+wxCharTraits::int_type wxCharTraits::eof( )
+{
+    return '\0';
+}
+
+bool wxCharTraits::eq(const char_type& c1, const char_type& c2)
+{
+    return c1 == c2;
+}
+
+bool wxCharTraits::eq_int_type(const int_type& c1, const int_type& c2)
+{
+    return c1 == c2;
+}
+
+const wxCharTraits::char_type* wxCharTraits::find(const char_type* szString, 
+                                 const pos_type& nLength, 
+                                 const char_type& cChar)
+{
+    return (char_type*) wxMemchr(szString, cChar, nLength);
+}
+
+wxCharTraits::pos_type wxCharTraits::length(const char_type* szString)
+{
+    return wxStrlen(szString);
+}
+
+bool wxCharTraits::lt(const char_type& c1, const char_type& c2)
+{
+    return c1 < c2;
+}
+
+wxCharTraits::char_type *wxCharTraits::move(char_type* szOut, 
+                           const char_type* szIn, 
+                           const pos_type& nLength)
+{
+    return (char_type*) wxMemmove(szOut, szIn, nLength);    
+}
+
+wxCharTraits::int_type wxCharTraits::not_eof(const int_type& nIn)
+{
+    return nIn != eof();
+}
+
+wxCharTraits::char_type wxCharTraits::to_char_type(const int_type& nIn)
+{
+    return (char_type) nIn;
+}
+
+wxCharTraits::int_type wxCharTraits::to_int_type(const char_type& cIn)
+{
+    return (int_type) cIn;
+}
+
+#endif //!wxUSE_STL
\ No newline at end of file
diff -rNbu2 wxWidgets-2.5.2_2/src/common/string.cpp wxWidgets-2.5.2/src/common/string.cpp
--- wxWidgets-2.5.2_2/src/common/string.cpp	2004-05-23 21:52:04.000000000 -0700
+++ wxWidgets-2.5.2/src/common/string.cpp	2004-07-25 14:38:54.000000000 -0700
@@ -196,7 +196,7 @@
   // if the length is not given, assume the string to be NUL terminated
   if ( nLength == npos ) {
-    wxASSERT_MSG( nPos <= wxStrlen(psz), _T("index out of bounds") );
+      wxASSERT_MSG( nPos <= traits_type::length(psz), _T("index out of bounds") );
 
-    nLength = wxStrlen(psz + nPos);
+    nLength = traits_type::length(psz + nPos);
   }
 
@@ -433,5 +433,5 @@
   wxASSERT( nPos <= length() );
 
-  if ( n == npos ) n = wxStrlen(sz);
+  if ( n == npos ) n = traits_type::length(sz);
   if ( n == 0 ) return *this;
 
@@ -461,7 +461,25 @@
   wxASSERT( nStart <= length() );
 
-  const wxChar *p = wxStrstr(c_str() + nStart, str.c_str());
+  //anchor
+  const wxChar* p = traits_type::find(c_str() + nStart, 
+                    length() - nStart, 
+                    str.c_str()[0]);
 
-  return p == NULL ? npos : p - c_str();
+  if(!p)
+      return npos;
+
+  while(p - c_str() + str.length() <= length() &&
+        traits_type::compare(p, str.c_str(), str.length()) )
+  {
+      //anchor again
+      p = traits_type::find(++p, 
+                    length() - (p - c_str()), 
+                    str.c_str()[0]);
+
+      if(!p)
+          return npos;
+  }
+
+  return (p - c_str() + str.length() <= length()) ? p - c_str() : npos;
 }
 
@@ -475,5 +493,5 @@
   wxASSERT( nStart <= length() );
 
-  const wxChar *p = wxStrchr(c_str() + nStart, ch);
+  const wxChar *p = traits_type::find(c_str() + nStart, length() - nStart, ch);
 
   return p == NULL ? npos : p - c_str();
@@ -502,6 +520,6 @@
         do
         {
-            if ( memcmp(cursor, str.c_str(),
-                        str.length() * sizeof(wxChar)) == 0 )
+            if ( traits_type::compare(cursor, str.c_str(),
+                        str.length()) == 0 )
             {
                 return cursor - c_str();
@@ -542,10 +560,19 @@
 size_t wxStringBase::find_first_of(const wxChar* sz, size_t nStart) const
 {
-    const wxChar *start = c_str() + nStart;
-    const wxChar *firstOf = wxStrpbrk(start, sz);
-    if ( firstOf )
-        return firstOf - c_str();
-    else
+    wxASSERT(nStart < length());
+
+    traits_type::pos_type len = traits_type::length(sz);
+
+    size_t i;
+    for(i = nStart; i < this->length(); ++i)
+    {
+        if (traits_type::find(sz, len, *(c_str() + i)))
+            break;
+    }
+
+    if(i == this->length())
         return npos;
+    else
+        return i;
 }
 
@@ -568,7 +595,9 @@
     }
 
+    traits_type::pos_type len = traits_type::length(sz);
+
     for ( const wxChar *p = c_str() + nStart; p >= c_str(); --p )
     {
-        if ( wxStrchr(sz, *p) )
+        if ( traits_type::find(sz, len, *p) )
             return p - c_str();
     }
@@ -594,9 +623,17 @@
     }
 
-    size_t nAccept = wxStrspn(c_str() + nStart, sz);
-    if ( nAccept >= length() - nStart )
+    traits_type::pos_type len = traits_type::length(sz);
+
+    size_t i;
+    for(i = nStart; i < this->length(); ++i)
+    {
+        if (!traits_type::find(sz, len, *(c_str() + i)))
+            break;
+    }
+
+    if(i == this->length())
         return npos;
     else
-        return nStart + nAccept;
+        return i;
 }
 
@@ -631,7 +668,9 @@
     }
 
+    traits_type::pos_type len = traits_type::length(sz);
+
     for ( const wxChar *p = c_str() + nStart; p >= c_str(); --p )
     {
-        if ( !wxStrchr(sz, *p) )
+        if ( !traits_type::find(sz, len,*p) )
             return p - c_str();
     }
@@ -745,5 +784,5 @@
 wxStringBase& wxStringBase::operator=(const wxChar *psz)
 {
-  if ( !AssignCopy(wxStrlen(psz), psz) ) {
+    if ( !AssignCopy(traits_type::length(psz), psz) ) {
     wxFAIL_MSG( _T("out of memory in wxStringBase::operator=(const wxChar *)") );
   }
@@ -863,13 +902,13 @@
 {
     if( l1 == l2 )
-        return wxStrncmp(s1, s2, l1);
+        return wxString::traits_type::compare(s1, s2, l1);
     else if( l1 < l2 )
     {
-        int ret = wxStrncmp(s1, s2, l1);
+        int ret = wxString::traits_type::compare(s1, s2, l1);
         return ret == 0 ? -1 : ret;
     }
     else if( l1 > l2 )
     {
-        int ret = wxStrncmp(s1, s2, l2);
+        int ret = wxString::traits_type::compare(s1, s2, l2);
         return ret == 0 ? +1 : ret;
     }
@@ -879,6 +918,4 @@
 }
 
-#if wxUSE_STL
-
 int STRINGCLASS::compare(const wxStringBase& str) const
 {
@@ -886,6 +923,4 @@
 }
 
-#endif
-
 int STRINGCLASS::compare(size_t nStart, size_t nLen,
                          const wxStringBase& str) const
@@ -910,14 +945,10 @@
 }
 
-#if wxUSE_STL
-
 int STRINGCLASS::compare(const wxChar* sz) const
 {
-    size_t nLen = wxStrlen(sz);
+    size_t nLen = traits_type::length(sz);
     return ::wxDoCmp(data(), length(), sz, nLen);
 }
 
-#endif
-
 int STRINGCLASS::compare(size_t nStart, size_t nLen,
                          const wxChar* sz, size_t nCount) const
@@ -927,5 +958,5 @@
     nLen = strLen < nLen ? strLen : nLen;
     if( nCount == npos )
-        nCount = wxStrlen(sz);
+        nCount = traits_type::length(sz);
 
     return ::wxDoCmp(data() + nStart, nLen, sz, nCount);
@@ -1064,5 +1095,5 @@
 void wxString::UngetWriteBuf()
 {
-  GetStringData()->nDataLength = wxStrlen(m_pchData);
+  GetStringData()->nDataLength = traits_type::length(m_pchData);
   GetStringData()->Validate(TRUE);
 }
@@ -1185,4 +1216,63 @@
 // ===========================================================================
 
+int wxString::Cmp(const wxString& s) const
+{
+    return compare(s);
+}
+
+int wxString::Cmp(const wxChar* psz) const
+{
+    return compare(psz);
+}
+
+static inline int wxDoCmpNoCase(const wxChar* s1, size_t l1,
+                                const wxChar* s2, size_t l2)
+{
+    size_t i;
+
+    if( l1 == l2 )
+    {
+        for(i = 0; i < l1; ++i)
+        {
+            if(wxTolower(s1[i]) != wxTolower(s2[i]))
+                break;
+        }
+        return i == l1 ? 0 : s1[i] < s2[i] ? -1 : 1;
+    }
+    else if( l1 < l2 )
+    {
+        for(i = 0; i < l1; ++i)
+        {
+            if(wxTolower(s1[i]) != wxTolower(s2[i]))
+                break;
+        }
+        return i == l1 ? -1 : s1[i] < s2[i] ? -1 : 1;
+    }
+    else if( l1 > l2 )
+    {
+        for(i = 0; i < l2; ++i)
+        {
+            if(wxTolower(s1[i]) != wxTolower(s2[i]))
+                break;
+        }
+        return i == l2 ? 1 : s1[i] < s2[i] ? -1 : 1;
+    }
+
+    wxFAIL;   // must never get there
+    return 0; // quiet compilers
+}
+
+int wxString::CmpNoCase(const wxString& s) const
+{
+    return wxDoCmpNoCase(data(), length(), s.data(), s.length());
+}
+
+int wxString::CmpNoCase(const wxChar* psz) const
+{
+    int nLen = traits_type::length(psz);
+
+    return wxDoCmpNoCase(data(), length(), psz, nLen);
+}
+
 #if wxUSE_UNICODE
 
@@ -1387,5 +1477,5 @@
   size_t uiCount = 0;   // count of replacements made
 
-  size_t uiOldLen = wxStrlen(szOld);
+  size_t uiOldLen = traits_type::length(szOld);
 
   wxString strTemp;
@@ -1452,5 +1542,5 @@
 {
   const wxChar *s = (const wxChar*) *this;
-  if (wxStrlen(s))
+  if (traits_type::length(s))
      if ((s[0] == '-') || (s[0] == '+')) s++;
   while(*s){
@@ -1728,5 +1818,5 @@
     // first translate the shell-like mask into a regex
     wxString pattern;
-    pattern.reserve(wxStrlen(pszMask));
+    pattern.reserve(traits_type::length(pszMask));
 
     pattern += _T('^');
@@ -1813,5 +1903,5 @@
           else {
             // we have to match the remainder of the string
-            uiLenMask = wxStrlen(pszMask);
+            uiLenMask = traits_type::length(pszMask);
           }
 
@@ -2129,5 +2219,5 @@
       i = (lo + hi)/2;
 
-      res = wxStrcmp(str, m_pItems[i]);
+      res = str.Cmp(m_pItems[i]);
       if ( res < 0 )
         hi = i;
@@ -2274,5 +2364,5 @@
   else {
     // maybe we should use wxStrcoll
-    int result = wxStrcmp(strFirst->c_str(), strSecond->c_str());
+    int result = strFirst->Cmp(*strSecond);
 
     return gs_sortAscending ? result : -result;
@@ -2335,9 +2425,9 @@
 int wxCMPFUNC_CONV wxStringSortAscending(wxString* s1, wxString* s2)
 {
-    return wxStrcmp(s1->c_str(), s2->c_str());
+    return  s1->Cmp(*s2);
 }
 
 int wxCMPFUNC_CONV wxStringSortDescending(wxString* s1, wxString* s2)
 {
-    return -wxStrcmp(s1->c_str(), s2->c_str());
+    return -s1->Cmp(*s2);
 }

 	  	 

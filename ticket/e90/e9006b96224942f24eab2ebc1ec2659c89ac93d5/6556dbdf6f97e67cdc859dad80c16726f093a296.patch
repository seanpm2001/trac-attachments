--- C:/wxWidgets-3.1.4/samples/mdi/original/mdi.h	Wed Jul 22 18:20:06 2020
+++ C:/wxWidgets-3.1.4/samples/mdi/mdi.h	Sat Sep 26 15:09:54 2020
@@ -57,6 +57,17 @@
     wxDECLARE_NO_COPY_CLASS(MenuEventLogger);
 };
 
+class MyCanvas;
+
+class RenderTimer : public wxTimer
+{
+    MyCanvas* m_pane;
+public:
+    RenderTimer(MyCanvas* pane) { m_pane = pane; }
+    void Notify();
+    void Start() { wxTimer::Start(10); }
+};
+
 class MyCanvas : public wxScrolledWindow,
                  private MenuEventLogger
 {
@@ -81,6 +92,9 @@
     wxString m_text;
 
     bool m_dirty;
+
+    wxListCtrl* m_ListCtrl;
+    RenderTimer* m_RenderTimer;
 
     wxDECLARE_EVENT_TABLE();
 };
--- C:/wxWidgets-3.1.4/samples/mdi/original/mdi.cpp	Wed Jul 22 18:20:06 2020
+++ C:/wxWidgets-3.1.4/samples/mdi/mdi.cpp	Sat Sep 26 15:21:49 2020
@@ -27,6 +27,7 @@
 #ifndef WX_PRECOMP
     #include "wx/wx.h"
     #include "wx/mdi.h"
+    #include "wx/listctrl.h"
 #endif
 
 #include "wx/toolbar.h"
@@ -360,6 +361,8 @@
 // MyCanvas
 // ---------------------------------------------------------------------------
 
+void RenderTimer::Notify() { m_pane->Refresh(); }
+
 // Define a constructor for my canvas
 MyCanvas::MyCanvas(wxFrame *parent, const wxPoint& pos, const wxSize& size)
         : wxScrolledWindow(parent, wxID_ANY, pos, size,
@@ -372,38 +375,27 @@
 
     SetScrollbars(20, 20, 50, 50);
 
+    m_ListCtrl = new wxListCtrl(parent, wxID_ANY, pos, wxSize(200,200), wxLC_REPORT | wxLC_HRULES | wxLC_VRULES);
+
+    m_ListCtrl->InsertColumn(0, _T("One"), wxLIST_FORMAT_LEFT, 100);
+    m_ListCtrl->InsertColumn(1, _T("Two"), wxLIST_FORMAT_LEFT, 100);
+
+    m_ListCtrl->InsertItem(0, _T(""));
+    m_ListCtrl->SetItem(0, 1, _T(""));
+
+    m_RenderTimer = new RenderTimer(this);
+    m_RenderTimer->Start();
+
     m_dirty = false;
 }
 
 // Define the repainting behaviour
 void MyCanvas::OnDraw(wxDC& dc)
 {
-    if ( !m_text.empty() )
-        dc.DrawText(m_text, 10, 10);
-
-    dc.SetFont(*wxSWISS_FONT);
-    dc.SetPen(*wxGREEN_PEN);
-    dc.DrawLine(0, 0, 200, 200);
-    dc.DrawLine(200, 0, 0, 200);
-
-    dc.SetBrush(*wxCYAN_BRUSH);
-    dc.SetPen(*wxRED_PEN);
-    dc.DrawRectangle(100, 100, 100, 50);
-    dc.DrawRoundedRectangle(150, 150, 100, 50, 20);
-
-    dc.DrawEllipse(250, 250, 100, 50);
-#if wxUSE_SPLINES
-    dc.DrawSpline(50, 200, 50, 100, 200, 10);
-#endif // wxUSE_SPLINES
-    dc.DrawLine(50, 230, 200, 230);
-    dc.DrawText("This is a test string", 50, 230);
-
-    wxPoint points[3];
-    points[0].x = 200; points[0].y = 300;
-    points[1].x = 100; points[1].y = 400;
-    points[2].x = 300; points[2].y = 400;
+    m_ListCtrl->SetItem(0, 0, wxString::Format(_T("%u"), rand() % 100));
+    m_ListCtrl->SetItem(0, 1, wxString::Format(_T("%u"), rand() % 100));
 
-    dc.DrawPolygon(3, points);
+    m_ListCtrl->Refresh();
 }
 
 // This implements a tiny doodling program! Drag the mouse using the left

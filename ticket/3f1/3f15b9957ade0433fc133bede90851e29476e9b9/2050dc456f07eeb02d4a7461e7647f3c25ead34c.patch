Index: datetime/datetimetest.cpp
===================================================================
--- datetime/datetimetest.cpp	(revision 70250)
+++ datetime/datetimetest.cpp	(working copy)
@@ -666,8 +666,20 @@
        { CompareTime, "Time is %H:%M:%S or %I:%M:%S %p" },
        { CompareNone, "The day of year: %j, the week of year: %W" },
        { CompareDate, "ISO date without separators: %Y%m%d" },
+       { CompareBoth, "RFC 2822 string: %Y-%m-%d %H:%M:%S.%l %z" },
+
     };
 
+    const long timeZonesOffsets[] = 
+    {
+        wxDateTime::TimeZone(wxDateTime::Local).GetOffset(),
+
+        // Fictitious TimeZone offsets to ensure time zone formating and
+        //  interpretation works
+        -( 1 * 3600 + 2*60),
+        3*3600 + 30*60
+    };
+
     static const Date formatTestDates[] =
     {
         { 29, wxDateTime::May, 1976, 18, 30, 00, 0.0, wxDateTime::Inv_WeekDay },
@@ -686,78 +698,100 @@
 #endif
     };
 
-    for ( size_t d = 0; d < WXSIZEOF(formatTestDates); d++ )
+    for ( unsigned idxtz = 0; idxtz < WXSIZEOF(timeZonesOffsets); ++idxtz )
     {
-        wxDateTime dt = formatTestDates[d].DT();
-        for ( unsigned n = 0; n < WXSIZEOF(formatTestFormats); n++ )
+        wxDateTime::TimeZone tz(timeZonesOffsets[idxtz]);
+        bool isLocalTz = tz.GetOffset() == -wxGetTimeZone();
+
+        for ( size_t d = 0; d < WXSIZEOF(formatTestDates); d++ )
         {
-            const char *fmt = formatTestFormats[n].format;
+            wxDateTime dt = formatTestDates[d].DT();
+            for ( unsigned n = 0; n < WXSIZEOF(formatTestFormats); n++ )
+            {
+                const char *fmt = formatTestFormats[n].format;
 
-            // skip the check with %p for those locales which have empty AM/PM strings:
-            // for those locales it's impossible to pass the test with %p...
-            wxString am, pm;
-            wxDateTime::GetAmPmStrings(&am, &pm);
-            if (am.empty() && pm.empty() && wxStrstr(fmt, "%p") != NULL)
-                continue;
+                // skip the check with %p for those locales which have empty AM/PM strings:
+                // for those locales it's impossible to pass the test with %p...
+                wxString am, pm;
+                wxDateTime::GetAmPmStrings(&am, &pm);
+                if (am.empty() && pm.empty() && wxStrstr(fmt, "%p") != NULL)
+                    continue;
 
-            wxString s = dt.Format(fmt);
+                // DST won't work for dates above 2038 so no way to make
+                //  timezone conversions accurately
+                if ( !isLocalTz && dt.GetYear() >= 2038 )
+                    continue;
+                
+                // date-only formats and TZ tests are incompatible as they play
+                //  on the attempt to check date near the day limit and the 
+                //  absence of time make it impossible to check TZ information
+                if ( !isLocalTz &&
+                     formatTestFormats[n].compareKind == CompareDate )
+                    continue;
 
-            // what can we recover?
-            CompareKind kind = formatTestFormats[n].compareKind;
+                wxString s = dt.Format(fmt, tz);
 
-            // convert back
-            wxDateTime dt2;
-            const char *result = dt2.ParseFormat(s, fmt);
-            if ( !result )
-            {
-                // conversion failed - should it have?
-                WX_ASSERT_MESSAGE(
-                    ("Test #%u failed: failed to parse \"%s\"", n, s),
-                    kind == CompareNone
-                );
-            }
-            else // conversion succeeded
-            {
-                // currently ParseFormat() doesn't support "%Z" and so is
-                // incapable of parsing time zone part used at the end of date
-                // representations in many (but not "C") locales, compensate
-                // for it ourselves by simply consuming and ignoring it
-                while ( *result && (*result >= 'A' && *result <= 'Z') )
-                    result++;
+                // what can we recover?
+                CompareKind kind = formatTestFormats[n].compareKind;
 
-                WX_ASSERT_MESSAGE(
-                    ("Test #%u failed: \"%s\" was left unparsed in \"%s\"",
-                     n, result, s),
-                    !*result
-                );
-
-                switch ( kind )
+                // convert back
+                wxDateTime dt2;
+                const char *result = dt2.ParseFormat(s, fmt);
+                if ( !result )
                 {
-                    case CompareYear:
-                        if ( dt2.GetCentury() != dt.GetCentury() )
-                        {
-                            CPPUNIT_ASSERT_EQUAL(dt.GetYear() % 100,
-                                                 dt2.GetYear() % 100);
+                    // conversion failed - should it have?
+                    WX_ASSERT_MESSAGE(
+                        ("Test #%u failed: failed to parse \"%s\"", n, s),
+                        kind == CompareNone
+                    );
+                }
+                else // conversion succeeded
+                {
+                    // currently ParseFormat() doesn't support "%Z" and so is
+                    // incapable of parsing time zone part used at the end of date
+                    // representations in many (but not "C") locales, compensate
+                    // for it ourselves by simply consuming and ignoring it
+                    while ( *result && (*result >= 'A' && *result <= 'Z') )
+                        result++;
 
-                            dt2.SetYear(dt.GetYear());
-                        }
-                        // fall through and compare everything
+                    WX_ASSERT_MESSAGE(
+                        ("Test #%u failed: \"%s\" was left unparsed in \"%s\"",
+                         n, result, s),
+                        !*result
+                    );
 
-                    case CompareBoth:
-                        CPPUNIT_ASSERT_EQUAL( dt, dt2 );
-                        break;
+                    bool fmtHasTz = strstr(fmt, "%z") != NULL;
+                    if (!fmtHasTz && !isLocalTz)
+                        dt2.MakeFromTimezone(tz);
 
-                    case CompareDate:
-                        CPPUNIT_ASSERT( dt.IsSameDate(dt2) );
-                        break;
+                    switch ( kind )
+                    {
+                        case CompareYear:
+                            if ( dt2.GetCentury() != dt.GetCentury() )
+                            {
+                                CPPUNIT_ASSERT_EQUAL(dt.GetYear() % 100,
+                                                     dt2.GetYear() % 100);
 
-                    case CompareTime:
-                        CPPUNIT_ASSERT( dt.IsSameTime(dt2) );
-                        break;
+                                dt2.SetYear(dt.GetYear());
+                            }
+                            // fall through and compare everything
 
-                    case CompareNone:
-                        wxFAIL_MSG( wxT("unexpected") );
-                        break;
+                        case CompareBoth:
+                            CPPUNIT_ASSERT_EQUAL( dt, dt2 );
+                            break;
+
+                        case CompareDate:
+                            CPPUNIT_ASSERT( dt.IsSameDate(dt2) );
+                            break;
+
+                        case CompareTime:
+                            CPPUNIT_ASSERT( dt.IsSameTime(dt2) );
+                            break;
+
+                        case CompareNone:
+                            wxFAIL_MSG( wxT("unexpected") );
+                            break;
+                    }
                 }
             }
         }
@@ -1096,6 +1130,12 @@
             {  1, wxDateTime::Jan, 9999,  0,  0,  0},
             false
         },
+
+        {
+            "2012-01-01 10:12:05 +0100",
+            {  1, wxDateTime::Jan, 2012,  10,  12,  5, -1 },
+            false // ParseDateTime does know yet +0100
+        },
     };
 
     // the test strings here use "PM" which is not available in all locales so

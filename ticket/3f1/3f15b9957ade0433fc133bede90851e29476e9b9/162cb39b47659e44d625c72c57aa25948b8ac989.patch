Index: datetimefmt.cpp
===================================================================
--- datetimefmt.cpp	(revision 70250)
+++ datetimefmt.cpp	(working copy)
@@ -1,4 +1,4 @@
-///////////////////////////////////////////////////////////////////////////////
+ï»¿///////////////////////////////////////////////////////////////////////////////
 // Name:        src/common/datetimefmt.cpp
 // Purpose:     wxDateTime formatting & parsing code
 // Author:      Vadim Zeitlin
@@ -320,10 +320,15 @@
 #endif
     // we have to use our own implementation if the date is out of range of
     // strftime() or if we use non standard specifiers
+    // %z is not supported on Windows as on Unix so use our own implementation
 #ifdef wxHAS_STRFTIME
     time_t time = GetTicks();
 
-    if ( (time != (time_t)-1) && !wxStrstr(format, wxT("%l")) )
+    if ( (time != (time_t)-1) && !wxStrstr(format, wxT("%l"))
+#ifdef __WXMSW__
+            && !wxStrstr(format, wxT("%z"))
+#endif
+       )
     {
         // use strftime()
         struct tm tmstruct;
@@ -397,6 +402,7 @@
         switch ( (*++p).GetValue() )
         {
             case wxT('Y'):               // year has 4 digits
+            case wxT('z'):               // time zone as well
                 fmt = wxT("%04d");
                 break;
 
@@ -639,6 +645,11 @@
                     res += wxString::Format(fmt, tm.year);
                     break;
 
+                case wxT('z'):       // time zone as [-+]HHMM
+                    res += tz.GetOffset() < 0 ? "-" : "+";
+                    res += wxString::Format(fmt, abs((tz.GetOffset()/3600*100)+((tz.GetOffset()/60)%60)));
+                    break;
+
                 case wxT('Z'):       // timezone name
 #ifdef wxHAS_STRFTIME
                     res += CallStrftime(wxT("%Z"), &tmTimeOnly);
@@ -929,6 +940,8 @@
     bool hourIsIn12hFormat = false, // or in 24h one?
          isPM = false;              // AM by default
 
+    bool haveTimeZone = false;
+
     // and the value of the items we have (init them to get rid of warnings)
     wxDateTime_t msec = 0,
                  sec = 0,
@@ -939,6 +952,7 @@
                  mday = 0;
     wxDateTime::Month mon = Inv_Month;
     int year = 0;
+    long timeZone = 0;	// time zone in seconds as expected in Tm structure
 
     wxString::const_iterator input = date.begin();
     const wxString::const_iterator end = date.end();
@@ -1377,6 +1391,32 @@
                 year = (wxDateTime_t)num;
                 break;
 
+			case _T('z'):
+				{
+					bool minusFound;
+					if ( *input == _T('-') )
+						minusFound = true;
+					else if (*input == _T('+'))
+						minusFound = false;
+					else
+						return false;	// no match
+	
+					// here should follow 4 digits HHMM
+					++input;
+					unsigned long tzHourMin;
+					if (!GetNumericToken(4, input, end, &tzHourMin))
+						return false;	// no match
+	
+					haveTimeZone = true;
+					if ((tzHourMin/100)>12 || (tzHourMin%100)>59)
+						return false;	// bad format
+	
+					timeZone = ((tzHourMin/100)*60 + (tzHourMin%100)) * 60;
+					if (minusFound)
+						timeZone = -timeZone;
+				}
+				break;
+
             case wxT('Z'):       // timezone name
                 // FIXME: currently we just ignore everything that looks like a
                 //        time zone here
@@ -1482,6 +1522,12 @@
 
     Set(tm);
 
+    // if a time zone was specified and it is not the local time zone,
+    //  shift the time accordingly, note that avoiding the call to
+    //  MakeFromTimeZone is necessary to avoid DST problems
+    if ( haveTimeZone && timeZone != -wxGetTimeZone() )
+        MakeFromTimezone (timeZone);
+
     // finally check that the week day is consistent -- if we had it
     if ( haveWDay && GetWeekDay() != wday )
         return false;

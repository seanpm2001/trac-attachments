Index: docs/latex/wx/mouseevt.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/mouseevt.tex,v
retrieving revision 1.10
diff -c -c -b -r1.10 mouseevt.tex
*** docs/latex/wx/mouseevt.tex	2000/07/15 19:49:54	1.10
--- docs/latex/wx/mouseevt.tex	2001/05/03 07:01:30
***************
*** 50,55 ****
--- 50,56 ----
  \twocolitem{{\bf EVT\_MOTION(func)}}{Process a wxEVT\_MOTION event.}
  \twocolitem{{\bf EVT\_ENTER\_WINDOW(func)}}{Process a wxEVT\_ENTER\_WINDOW event.}
  \twocolitem{{\bf EVT\_LEAVE\_WINDOW(func)}}{Process a wxEVT\_LEAVE\_WINDOW event.}
+ \twocolitem{{\bf EVT\_MOUSEWHEEL(func)}}{Process a wxEVT\_MOUSEWHEEL event.}
  \twocolitem{{\bf EVT\_MOUSE\_EVENTS(func)}}{Process all mouse events.}
  \end{twocollist}%
  
***************
*** 85,96 ****
  
  TRUE if the right mouse button is currently pressed down.
  
- \membersection{wxMouseEvent::m\_leftDown}
- 
- \member{bool}{m\_leftDown}
- 
- TRUE if the left mouse button is currently pressed down.
- 
  \membersection{wxMouseEvent::m\_metaDown}
  
  \member{bool}{m\_metaDown}
--- 86,91 ----
***************
*** 115,120 ****
--- 110,135 ----
  
  Y-coordinate of the event.
  
+ \membersection{wxMouseEvent::m\_wheelRotation}
+ 
+ \member{int}{m\_wheelRotation}
+ 
+ The distance the mouse wheel is rotated.
+ 
+ \membersection{wxMouseEvent::m\_wheelDelta}
+ 
+ \member{int}{m\_wheelDelta}
+ 
+ The wheel delta, normally 120.
+ 
+ \membersection{wxMouseEvent::m\_linesPerAction}
+ 
+ \member{int}{m\_linesPerAction}
+ 
+ The configured number of lines (or whatever) to be scrolled per wheel
+ action.
+ 
+ 
  \membersection{wxMouseEvent::wxMouseEvent}
  
  \func{}{wxMouseEvent}{\param{WXTYPE}{ mouseEventType = 0}, \param{int}{ id = 0}}
***************
*** 135,140 ****
--- 150,156 ----
  \item {\bf wxEVT\_RIGHT\_UP}
  \item {\bf wxEVT\_RIGHT\_DCLICK}
  \item {\bf wxEVT\_MOTION}
+ \item {\bf wxEVT\_MOUSEWHEEL}
  \end{itemize}
  
  \membersection{wxMouseEvent::AltDown}
***************
*** 217,222 ****
--- 233,266 ----
  Returns the logical mouse position in pixels (i.e. translated according to the
  translation set for the DC, which usually indicates that the window has been scrolled).
  
+ 
+ \membersection{wxMouseEvent::GetLinesPerAction}\label{wxmouseeventgetlinesperaction}
+ 
+ \constfunc{int}{GetLinesPerAction}{\void}
+ 
+ Returns the configured number of lines (or whatever) to be scrolled per
+ wheel action.  Defaults to one.
+ 
+ \membersection{wxMouseEvent::GetWheelRotation}\label{wxmouseeventgetwheelrotation}
+ 
+ \constfunc{int}{GetWheelRotation}{\void}
+ 
+ Get wheel rotation, positive or negative indicates direction of
+ rotation.  Current devices all send an event when rotation is equal to
+ +/-WheelDelta, but this allows for finer resolution devices to be
+ created in the future.  Because of this you shouldn't assume that one
+ event is equal to 1 line or whatever, but you should be able to either
+ do partial line scrolling or wait until +/-WheelDelta rotation values
+ have been accumulated before scrolling.
+ 
+ \membersection{wxMouseEvent::GetWheelDelta}\label{wxmouseeventgetwheeldelta}
+ 
+ \constfunc{int}{GetWheelDelta}{\void}
+ 
+ Get wheel delta, normally 120.  This is the threshold for action to be
+ taken, and one such action (for example, scrolling one increment)
+ should occur for each delta.
+ 
  \membersection{wxMouseEvent::GetX}\label{wxmouseeventgetx}
  
  \constfunc{long}{GetX}{\void}
Index: include/wx/event.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/event.h,v
retrieving revision 1.116
diff -c -c -b -r1.116 event.h
*** include/wx/event.h	2001/05/02 19:48:07	1.116
--- include/wx/event.h	2001/05/03 07:01:31
***************
*** 151,156 ****
--- 151,157 ----
      DECLARE_EVENT_TYPE(wxEVT_RIGHT_DCLICK, 111)
      DECLARE_EVENT_TYPE(wxEVT_SET_FOCUS, 112)
      DECLARE_EVENT_TYPE(wxEVT_KILL_FOCUS, 113)
+     DECLARE_EVENT_TYPE(wxEVT_MOUSEWHEEL, 114)
  
          // Non-client mouse events
      DECLARE_EVENT_TYPE(wxEVT_NC_LEFT_DOWN, 200)
***************
*** 669,674 ****
--- 670,694 ----
      // Get Y position
      wxCoord GetY() const { return m_y; }
  
+     // Get wheel rotation, positive or negative indicates direction of
+     // rotation.  Current devices all send an event when rotation is equal to
+     // +/-WheelDelta, but this allows for finer resolution devices to be
+     // created in the future.  Because of this you shouldn't assume that one
+     // event is equal to 1 line or whatever, but you should be able to either
+     // do partial line scrolling or wait until +/-WheelDelta rotation values
+     // have been accumulated before scrolling.
+     int GetWheelRotation() const { return m_wheelRotation; }
+ 
+     // Get wheel delta, normally 120.  This is the threshold for action to be
+     // taken, and one such action (for example, scrolling one increment)
+     // should occur for each delta.
+     int GetWheelDelta() const { return m_wheelDelta; }
+ 
+     // Returns the configured number of lines (or whatever) to be scrolled per
+     // wheel action.  Defaults to one.
+     int GetLinesPerAction() const { return m_linesPerAction; }
+ 
+ 
      void CopyObject(wxObject& obj) const;
  
  public:
***************
*** 682,687 ****
--- 702,711 ----
      bool          m_shiftDown;
      bool          m_altDown;
      bool          m_metaDown;
+ 
+     int           m_wheelRotation;
+     int           m_wheelDelta;
+     int           m_linesPerAction;
  };
  
  // Cursor set event
***************
*** 1756,1761 ****
--- 1780,1786 ----
  #define EVT_RIGHT_DCLICK(func) DECLARE_EVENT_TABLE_ENTRY( wxEVT_RIGHT_DCLICK, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
  #define EVT_LEAVE_WINDOW(func) DECLARE_EVENT_TABLE_ENTRY( wxEVT_LEAVE_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
  #define EVT_ENTER_WINDOW(func) DECLARE_EVENT_TABLE_ENTRY( wxEVT_ENTER_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
+ #define EVT_MOUSEWHEEL(func) DECLARE_EVENT_TABLE_ENTRY( wxEVT_MOUSEWHEEL, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
  
  // All mouse events
  #define EVT_MOUSE_EVENTS(func) \
***************
*** 1770,1776 ****
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_MIDDLE_DCLICK, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_RIGHT_DCLICK, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_ENTER_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
!  DECLARE_EVENT_TABLE_ENTRY( wxEVT_LEAVE_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
  
  // EVT_COMMAND
  #define EVT_COMMAND(id, event, fn)  DECLARE_EVENT_TABLE_ENTRY( event, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
--- 1795,1802 ----
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_MIDDLE_DCLICK, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_RIGHT_DCLICK, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
   DECLARE_EVENT_TABLE_ENTRY( wxEVT_ENTER_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
!  DECLARE_EVENT_TABLE_ENTRY( wxEVT_LEAVE_WINDOW, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),\
!  DECLARE_EVENT_TABLE_ENTRY( wxEVT_MOUSEWHEEL, -1, -1, (wxObjectEventFunction) (wxEventFunction) (wxMouseEventFunction) & func, (wxObject *) NULL ),
  
  // EVT_COMMAND
  #define EVT_COMMAND(id, event, fn)  DECLARE_EVENT_TABLE_ENTRY( event, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
Index: include/wx/msw/setup0.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/msw/setup0.h,v
retrieving revision 1.77
diff -c -c -b -r1.77 setup0.h
*** include/wx/msw/setup0.h	2001/04/22 22:22:21	1.77
--- include/wx/msw/setup0.h	2001/05/03 07:01:31
***************
*** 532,537 ****
--- 532,540 ----
  #define wxUSE_WX_RESOURCES        1
                                  // Use .wxr resource mechanism (requires PrologIO library)
  
+ #define wxUSE_MOUSEWHEEL        1
+                                 // Include mouse wheel support
+ 
  // ----------------------------------------------------------------------------
  // postscript support settings
  // ----------------------------------------------------------------------------
Index: include/wx/msw/window.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/msw/window.h,v
retrieving revision 1.65
diff -c -c -b -r1.65 window.h
*** include/wx/msw/window.h	2001/05/02 19:48:07	1.65
--- include/wx/msw/window.h	2001/05/03 07:01:31
***************
*** 327,332 ****
--- 327,333 ----
  
      bool HandleMouseEvent(WXUINT msg, int x, int y, WXUINT flags);
      bool HandleMouseMove(int x, int y, WXUINT flags);
+     bool HandleMouseWheel(WXWPARAM wParam, WXLPARAM lParam);
  
      bool HandleChar(WXWPARAM wParam, WXLPARAM lParam, bool isASCII = FALSE);
      bool HandleKeyDown(WXWPARAM wParam, WXLPARAM lParam);
Index: src/common/event.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/event.cpp,v
retrieving revision 1.85
diff -c -c -b -r1.85 event.cpp
*** src/common/event.cpp	2001/04/21 15:43:33	1.85
--- src/common/event.cpp	2001/05/03 07:01:31
***************
*** 150,155 ****
--- 150,156 ----
  DEFINE_EVENT_TYPE(wxEVT_RIGHT_DCLICK)
  DEFINE_EVENT_TYPE(wxEVT_SET_FOCUS)
  DEFINE_EVENT_TYPE(wxEVT_KILL_FOCUS)
+ DEFINE_EVENT_TYPE(wxEVT_MOUSEWHEEL)
  
  // Non-client mouse events
  DEFINE_EVENT_TYPE(wxEVT_NC_LEFT_DOWN)
***************
*** 414,419 ****
--- 415,423 ----
      m_middleDown = FALSE;
      m_x = 0;
      m_y = 0;
+     m_wheelRotation = 0;
+     m_wheelDelta = 0;
+     m_linesPerAction = 0;
  }
  
  void wxMouseEvent::CopyObject(wxObject& obj_d) const
Index: src/msw/window.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/msw/window.cpp,v
retrieving revision 1.205
diff -c -c -b -r1.205 window.cpp
*** src/msw/window.cpp	2001/05/02 19:48:13	1.205
--- src/msw/window.cpp	2001/05/03 07:01:32
***************
*** 108,113 ****
--- 108,122 ----
  #define SIF_TRACKPOS 16
  #endif
  
+ #if wxUSE_MOUSEWHEEL
+     #ifndef WM_MOUSEWHEEL
+         #define WM_MOUSEWHEEL           0x020A
+         #define WHEEL_DELTA             120
+         #define SPI_GETWHEELSCROLLLINES 104
+     #endif
+ #endif
+ 
+ 
  // ---------------------------------------------------------------------------
  // global variables
  // ---------------------------------------------------------------------------
***************
*** 1910,1915 ****
--- 1919,1930 ----
                                          wParam);
              break;
  
+ #if wxUSE_MOUSEWHEEL
+         case WM_MOUSEWHEEL:
+             processed = HandleMouseWheel(wParam, lParam);
+             break;
+ #endif
+ 
          case WM_LBUTTONDOWN:
             // set focus to this window
             if (AcceptsFocus())
***************
*** 3347,3352 ****
--- 3362,3392 ----
      return HandleMouseEvent(WM_MOUSEMOVE, x, y, flags);
  }
  
+ 
+ bool wxWindow::HandleMouseWheel(WXWPARAM wParam, WXLPARAM lParam)
+ {
+ #if wxUSE_MOUSEWHEEL
+     wxMouseEvent event(wxEVT_MOUSEWHEEL);
+     InitMouseEvent(event,
+                    GET_X_LPARAM(lParam),
+                    GET_Y_LPARAM(lParam),
+                    LOWORD(wParam));
+ 
+     event.m_wheelRotation = (short)HIWORD(wParam);
+     event.m_wheelDelta = WHEEL_DELTA;
+ 
+     int linesPer;
+     if (!SystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &linesPer, 0))
+         linesPer = 1;
+     event.m_linesPerAction = linesPer;
+ 
+     return GetEventHandler()->ProcessEvent(event);
+ #else
+     return FALSE;
+ #endif
+ }
+ 
+ 
  // ---------------------------------------------------------------------------
  // keyboard handling
  // ---------------------------------------------------------------------------
***************
*** 4098,4103 ****
--- 4138,4144 ----
          case 0x0207: return "WM_MBUTTONDOWN";
          case 0x0208: return "WM_MBUTTONUP";
          case 0x0209: return "WM_MBUTTONDBLCLK";
+         case 0x020A: return "WM_MOUSEWHEEL";
          case 0x0210: return "WM_PARENTNOTIFY";
          case 0x0211: return "WM_ENTERMENULOOP";
          case 0x0212: return "WM_EXITMENULOOP";

 	  	 

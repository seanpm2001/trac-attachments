Index: interface/wx/spinctrl.h
===================================================================
--- interface/wx/spinctrl.h	(revision 65639)
+++ interface/wx/spinctrl.h	(working copy)
@@ -159,6 +159,14 @@
            The value wraps at the minimum and maximum.
     @endStyleTable
 
+    @beginEventEmissionTable{wxSpinDoubleEvent}
+    @event{EVT_SPINCTRLDOUBLE(id, func)}
+        Generated whenever the numeric value of the spin control is changed,
+        that is, when the up/down spin button is clicked, when ENTER is pressed,
+        or the control loses focus and the new value is different from the last.
+        See wxSpinDoubleEvent.
+    @endEventTable
+
     @library{wxcore}
     @category{ctrl}
     @appearance{spinctrldouble.png}
@@ -274,3 +282,49 @@
     */
     void SetValue(double value);
 };
+
+/**
+    @class wxSpinDoubleEvent
+
+    This event class is used for the events generated by wxSpinCtrlDouble.
+
+    @beginEventTable{wxSpinDoubleEvent}
+    @event{EVT_SPINCTRLDOUBLE(id, func)}
+        Generated whenever the numeric value of the spin control is changed,
+        that is, when the up/down spin button is clicked, when ENTER is pressed,
+        or the control loses focus and the new value is different from the last.
+        See wxSpinDoubleEvent.
+    @endEventTable
+
+    @library{wxcore}
+    @category{events}
+
+    @see wxSpinCtrlDouble
+*/
+class wxSpinDoubleEvent : public wxNotifyEvent
+{
+public:
+    /**
+        The constructor. Not normally used by the user code.
+    */
+    wxSpinDoubleEvent(wxEventType commandType = wxEVT_NULL, int winid = 0,
+                      double value = 0);
+
+    /**
+        The copy constructor.
+    */
+    wxSpinDoubleEvent(const wxSpinDoubleEvent& event);
+
+    /**
+        Returns the value associated with this spin control event.
+    */
+    double GetValue() const;
+
+    /**
+        Set the value associated with the event.
+        (Not normally used by user code.)
+    */
+    void SetValue(double value);
+
+    // virtual wxEvent *Clone() const;   // Already documented in the base class??
+};

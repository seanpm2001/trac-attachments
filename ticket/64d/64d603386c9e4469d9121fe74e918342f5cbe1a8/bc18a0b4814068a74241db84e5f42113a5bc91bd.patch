diff --git a/src/msw/bitmap.cpp b/src/msw/bitmap.cpp
--- a/src/msw/bitmap.cpp
+++ b/src/msw/bitmap.cpp
@@ -55,6 +55,9 @@
     #define CLR_INVALID ((COLORREF)-1)
 #endif // no CLR_INVALID
 
+// ROP which doesn't have standard name
+#define DSTERASE 0x00220326     // dest = (NOT src) AND dest
+
 // ----------------------------------------------------------------------------
 // wxBitmapRefData
 // ----------------------------------------------------------------------------
@@ -513,7 +516,6 @@ bool wxBitmap::CopyFromIconOrCursor(const wxGDIImage& icon,
         // AND mask: 0 <= y <= h-1
         // XOR mask: h <= y <= 2*h-1
         // First we need to extract and store XOR mask from this bitmap.
-        // AND mask will be extracted later at creation of inverted mask.
         HBITMAP hbmp = ::CreateBitmap(w, h, 1, wxDisplayDepth(), NULL);
         if ( !hbmp )
         {
@@ -531,6 +533,17 @@ bool wxBitmap::CopyFromIconOrCursor(const wxGDIImage& icon,
             {
                 wxLogLastError(wxT("wxBitmap::CopyFromIconOrCursor - BitBlt"));
             }
+            // Prepare AND mask to be compatible with wxBitmap mask
+            // by set its bits to 0 wherever XOR mask (image) bits are set to 1.
+            // This is done in-place by applying following ROP:
+            // dest = dest AND (NOT src) where dest=AND mask, src=XOR mask
+            // AND mask will be extracted later at creation of inverted mask.
+            if ( !::BitBlt((HDC)dcSrc, 0, 0, w, h,
+                           (HDC)dcSrc, 0, h,
+                           DSTERASE) )
+            {
+                wxLogLastError(wxT("wxBitmap::CopyFromIconOrCursor - BitBlt"));
+            }
         }
         refData->m_width = w;
         refData->m_height = h;

diff --git a/include/wx/msw/radiobut.h b/include/wx/msw/radiobut.h
index 4e9af38..3634081 100644
--- a/include/wx/msw/radiobut.h
+++ b/include/wx/msw/radiobut.h
@@ -47,18 +47,35 @@ public:
     // implementation only from now on
     virtual bool MSWCommand(WXUINT param, WXWORD id);
     virtual void Command(wxCommandEvent& event);
+    virtual bool SetForegroundColour(const wxColour& colour);
+    virtual bool MSWOnDraw(WXDRAWITEMSTRUCT *item);
+
     virtual bool HasTransparentBackground() { return true; }
 
+    // make the radiobutton owner drawn or reset it to normal style
+    void MSWMakeOwnerDrawn(bool ownerDrawn);
+
     virtual WXDWORD MSWGetStyle(long style, WXDWORD *exstyle) const;
 
 protected:
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }
     virtual wxSize DoGetBestSize() const;
 
+    // return true if this checkbox is owner drawn
+    bool IsOwnerDrawn() const;
+
 private:
     // common part of all ctors
     void Init();
 
+    // event handlers used by owner-drawn radiobutton
+    void OnMouseEnterOrLeave(wxMouseEvent& event);
+    void OnMouseLeft(wxMouseEvent& event);
+    void OnFocus(wxFocusEvent& event);
+
+    // true if the radio button is currently pressed
+    bool m_isPressed;
+
     // we need to store the state internally as the result of GetValue()
     // sometimes gets out of sync in WM_COMMAND handler
     bool m_isChecked;
diff --git a/src/msw/radiobut.cpp b/src/msw/radiobut.cpp
index 17323a9..449262e 100644
--- a/src/msw/radiobut.cpp
+++ b/src/msw/radiobut.cpp
@@ -34,6 +34,9 @@
 #endif
 
 #include "wx/msw/private.h"
+#include "wx/msw/dc.h"          // for wxDCTemp
+#include "wx/renderer.h"
+#include "wx/msw/uxtheme.h"
 
 // ============================================================================
 // wxRadioButton implementation
@@ -46,6 +49,7 @@
 void wxRadioButton::Init()
 {
     m_isChecked = false;
+    m_isPressed = false;
 }
 
 bool wxRadioButton::Create(wxWindow *parent,
@@ -82,11 +86,14 @@ bool wxRadioButton::Create(wxWindow *parent,
 
 void wxRadioButton::SetValue(bool value)
 {
-    ::SendMessage(GetHwnd(), BM_SETCHECK,
-                  value ? BST_CHECKED : BST_UNCHECKED, 0);
-
     m_isChecked = value;
 
+    if ( !IsOwnerDrawn() )
+        ::SendMessage(GetHwnd(), BM_SETCHECK,
+                      value ? BST_CHECKED : BST_UNCHECKED, 0);
+    else // owner drawn buttons don't react to this message
+        Refresh();
+
     if ( !value )
         return;
 
@@ -296,4 +303,217 @@ WXDWORD wxRadioButton::MSWGetStyle(long style, WXDWORD *exstyle) const
     return msStyle;
 }
 
+// ----------------------------------------------------------------------------
+// owner drawn radio button stuff
+// ----------------------------------------------------------------------------
+
+bool wxRadioButton::SetForegroundColour(const wxColour& colour)
+{
+    if ( !wxControl::SetForegroundColour(colour) )
+        return false;
+
+    // the only way to change the radiobox foreground colour if themes are enablad
+    // is to owner draw it
+    if ( wxUxThemeEngine::GetIfActive() )
+        MSWMakeOwnerDrawn(colour.IsOk());
+
+    return true;
+}
+
+bool wxRadioButton::IsOwnerDrawn() const
+{
+    return
+        (::GetWindowLong(GetHwnd(), GWL_STYLE) & BS_OWNERDRAW) == BS_OWNERDRAW;
+}
+
+void wxRadioButton::MSWMakeOwnerDrawn(bool ownerDrawn)
+{
+    long style = ::GetWindowLong(GetHwnd(), GWL_STYLE);
+
+    // note that BS_RADIOBUTTON & BS_OWNERDRAW != 0 so we can't operate on
+    // them as on independent style bits
+
+    if ( ownerDrawn )
+    {
+        style &= ~BS_RADIOBUTTON;
+        style |= BS_OWNERDRAW;
+
+        Connect(wxEVT_ENTER_WINDOW,
+                wxMouseEventHandler(wxRadioButton::OnMouseEnterOrLeave));
+        Connect(wxEVT_LEAVE_WINDOW,
+                wxMouseEventHandler(wxRadioButton::OnMouseEnterOrLeave));
+        Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(wxRadioButton::OnMouseLeft));
+        Connect(wxEVT_LEFT_UP, wxMouseEventHandler(wxRadioButton::OnMouseLeft));
+        Connect(wxEVT_SET_FOCUS, wxFocusEventHandler(wxRadioButton::OnFocus));
+        Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(wxRadioButton::OnFocus));
+    }
+    else // reset to default colour
+    {
+        style &= ~BS_OWNERDRAW;
+        style |= BS_RADIOBUTTON;
+
+        Disconnect(wxEVT_ENTER_WINDOW,
+                   wxMouseEventHandler(wxRadioButton::OnMouseEnterOrLeave));
+        Disconnect(wxEVT_LEAVE_WINDOW,
+                   wxMouseEventHandler(wxRadioButton::OnMouseEnterOrLeave));
+        Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(wxRadioButton::OnMouseLeft));
+        Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(wxRadioButton::OnMouseLeft));
+        Disconnect(wxEVT_SET_FOCUS, wxFocusEventHandler(wxRadioButton::OnFocus));
+        Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(wxRadioButton::OnFocus));
+    }
+
+    ::SetWindowLong(GetHwnd(), GWL_STYLE, style);
+}
+
+void wxRadioButton::OnMouseEnterOrLeave(wxMouseEvent& event)
+{
+    const bool isHot = event.GetEventType() == wxEVT_ENTER_WINDOW;
+    if ( !isHot )
+        m_isPressed = false;
+
+    Refresh();
+
+    event.Skip();
+}
+
+void wxRadioButton::OnMouseLeft(wxMouseEvent& event)
+{
+    // TODO: we should capture the mouse here to be notified about left up
+    //       event but this interferes with BN_CLICKED generation so if we
+    //       want to do this we'd need to generate them ourselves
+    m_isPressed = event.GetEventType() == wxEVT_LEFT_DOWN;
+    Refresh();
+
+    event.Skip();
+}
+
+void wxRadioButton::OnFocus(wxFocusEvent& event)
+{
+    Refresh();
+
+    event.Skip();
+}
+
+bool wxRadioButton::MSWOnDraw(WXDRAWITEMSTRUCT *item)
+{
+    DRAWITEMSTRUCT *dis = (DRAWITEMSTRUCT *)item;
+
+    if ( !IsOwnerDrawn() || dis->CtlType != ODT_BUTTON )
+        return wxControl::MSWOnDraw(item);
+
+    // calculate the rectangles for the radio button itself and the label
+    HDC hdc = dis->hDC;
+    RECT& rect = dis->rcItem;
+    RECT rectRadio,
+         rectLabel;
+    rectLabel.top = rect.top + (rect.bottom - rect.top - GetBestSize().y) / 2;
+    rectLabel.bottom = rectLabel.top + GetBestSize().y;
+    // With these parameters the radio button is most similar to the native one.
+    const int MARGIN = 3;
+    const int CXMENUCHECK = ::GetSystemMetrics(SM_CXMENUCHECK)+1;
+    // The space between the radio button and the label
+    // is included in the radio button bitmap.
+    const int radioSize = wxMin(CXMENUCHECK - MARGIN, GetSize().y);
+    rectRadio.top = rect.top + (rect.bottom - rect.top - radioSize) / 2;
+    rectRadio.bottom = rectRadio.top + radioSize;
+
+    const bool isRightAligned = HasFlag(wxALIGN_RIGHT);
+    if ( isRightAligned )
+    {
+        rectLabel.right = rect.right - CXMENUCHECK;
+        rectLabel.left = rect.left;
+
+        rectRadio.left = rectLabel.right + ( CXMENUCHECK + MARGIN - radioSize ) / 2;
+        rectRadio.right = rectRadio.left + radioSize;
+    }
+    else // normal, left-aligned radio button
+    {
+        rectRadio.left = rect.left + ( CXMENUCHECK - MARGIN - radioSize ) / 2;
+        rectRadio.right = rectRadio.left + radioSize;
+
+        rectLabel.left = rect.left + CXMENUCHECK;
+        rectLabel.right = rect.right;
+    }
+
+    // shall we draw a focus rect?
+    const bool isFocused = m_isPressed || FindFocus() == this;
+
+    // draw the radio button itself
+    wxDCTemp dc(hdc);
+
+    int flags = 0;
+    if ( !IsEnabled() )
+        flags |= wxCONTROL_DISABLED;
+
+    if( m_isChecked )
+        flags |= wxCONTROL_CHECKED;
+
+    if( m_isPressed )
+        flags |= wxCONTROL_PRESSED;
+
+    if ( wxFindWindowAtPoint(wxGetMousePosition()) == this )
+        flags |= wxCONTROL_CURRENT;
+
+    wxRendererNative::Get().
+        DrawRadioBitmap(this, dc, wxRectFromRECT(rectRadio), flags);
+
+    // draw the text
+    const wxString& label = GetLabel();
+
+    // first we need to measure it
+    UINT fmt = DT_NOCLIP;
+
+    // drawing underlying doesn't look well with focus rect (and the native
+    // control doesn't do it)
+    if ( isFocused )
+        fmt |= DT_HIDEPREFIX;
+    if ( isRightAligned )
+        fmt |= DT_RIGHT;
+    // TODO: also use DT_HIDEPREFIX if the system is configured so
+
+    // we need to get the label real size first if we have to draw a focus rect
+    // around it
+    if ( isFocused )
+    {
+        RECT oldLabelRect = rectLabel; // needed if right aligned
+
+        if ( !::DrawText(hdc, label.t_str(), label.length(), &rectLabel,
+                         fmt | DT_CALCRECT) )
+        {
+            wxLogLastError(wxT("DrawText(DT_CALCRECT)"));
+        }
+
+        if ( isRightAligned )
+        {
+            // move the label rect to the right
+            const int labelWidth = rectLabel.right - rectLabel.left;
+            rectLabel.right = oldLabelRect.right;
+            rectLabel.left = rectLabel.right - labelWidth;
+        }
+    }
+
+    if ( !IsEnabled() )
+    {
+        ::SetTextColor(hdc, ::GetSysColor(COLOR_GRAYTEXT));
+    }
+
+    if ( !::DrawText(hdc, label.t_str(), label.length(), &rectLabel, fmt) )
+    {
+        wxLogLastError(wxT("DrawText()"));
+    }
+
+    // finally draw the focus
+    if ( isFocused )
+    {
+        rectLabel.left--;
+        rectLabel.right++;
+        if ( !::DrawFocusRect(hdc, &rectLabel) )
+        {
+            wxLogLastError(wxT("DrawFocusRect()"));
+        }
+    }
+
+    return true;
+}
+
 #endif // wxUSE_RADIOBTN

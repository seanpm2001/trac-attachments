--- wxWindows.remote/include/wx/thread.h	Thu Feb 21 14:47:24 2002
+++ wxWindows/include/wx/thread.h	Tue Apr  2 14:06:06 2002
@@ -79,8 +79,9 @@
 // ----------------------------------------------------------------------------
 
 // you should consider wxMutexLocker whenever possible instead of directly
 // working with wxMutex class - it is safer
+class wxConditionInternal;
 class WXDLLEXPORT wxMutexInternal;
 class WXDLLEXPORT wxMutex
 {
 public:
@@ -104,8 +105,10 @@
     wxMutex& operator=(const wxMutex&);
 
     int m_locked;
     wxMutexInternal *m_internal;
+
+    friend class wxConditionInternal;
 };
 
 // a helper class which locks the mutex in the ctor and unlocks it in the dtor:
 // this ensures that mutex is always unlocked, even if the function returns or
@@ -209,40 +212,93 @@
 
     wxCriticalSection& m_critsect;
 };
 
-// ----------------------------------------------------------------------------
-// Condition variable: allows to block the thread execution until something
-// happens (== condition is signaled)
-// ----------------------------------------------------------------------------
 
 class wxConditionInternal;
 class WXDLLEXPORT wxCondition
 {
-public:
-    // constructor & destructor
-    wxCondition();
+public :
+    // constructor and destructor
+
+    // Each wxCondition object is associated with
+    // with a wxMutex object
+    // The mutex object MUST be locked
+    // before calling  Wait()
+    wxCondition( wxMutex *mutex );
     ~wxCondition();
 
-    // wait until the condition is signaled
-        // waits indefinitely.
+    // NOTE : the associated mutex MUST be locked beforehand by the calling thread
+    // 
+    // it atomically releases the lock on the associated mutex
+    // and starts waiting to be woken up by a Signal()/Broadcast()
+    // once its signaled, then it will wait until it can reacquire
+    // the lock on the associated mutex object, before returning.
     void Wait();
-        // waits until a signal is raised or the timeout elapses
-    bool Wait(unsigned long sec, unsigned long nsec);
 
-    // signal the condition
-        // wakes up one (and only one) of the waiting threads
+    // NOTE : the associated mutex MUST be locked beforehand by the calling thread
+    //
+    // this method atomically release the lock on the associated mutex
+    // and starts waiting till its woken up by Signal()/Broadcast() or 
+    // the specified time elapses. Then the thread will wait until it reacquires
+    // the lock on the associated mutex before returning
+    // 
+    // the time params given specify a interval that needs to be waited ( relative time )
+    bool Wait( unsigned long timeout_millis );
+
+    // NOTE : the associated mutex may or may not be locked by the calling thread
+    //
+    // this method unblocks one thread if any are blocking on the condition.
+    // if no thread is blocking in Wait(), then the signal is NOT remembered
+    // The thread which was blocking on Wait(), will then reacquire the lock
+    // on the associated mutex object before returning
     void Signal();
-        // wakes up all threads waiting on this condition
-    void Broadcast();
 
-#ifdef __WXDEBUG__
-    // for debugging purposes only
-    void *GetId() const { return m_internal; }
-#endif // __WXDEBUG__
+    // NOTE : the associated mutex may or may not be locked by the calling thread
+    //
+    // this method unblocks all threads if any are blocking on the condition.
+    // if no thread is blocking in Wait(), then the signal is NOT remembered
+    // The threads which were blocking on Wait(), will then reacquire the lock
+    // on the associated mutex object before returning.
+    void Broadcast();
 
-private:
+private :
     wxConditionInternal *m_internal;
+
+    friend class wxConditionInternal;
+};
+
+class wxSemaphoreInternal;
+class WXDLLEXPORT wxSemaphore
+{
+public :
+
+    // specifying a maxcount of 0 actually makes
+    // wxSemaphore behave as if there is no upper limit
+    wxSemaphore( int initialcount = 0, int maxcount = 0 );
+    ~wxSemaphore();
+
+    // wait indefinitely, until the semaphore count goes beyond 0
+    // and then decrement it and return
+    void Wait();
+
+    // same as Wait(), but does not block, 
+    // returns true if successful
+    // returns false if the count is zero
+    bool TryWait();
+
+    // same as Wait(), but as a timeout limit
+    // returns true if successfull
+    // returns false if timedout
+    bool Wait( unsigned long timeout_millis );
+
+    // increments the semaphore count
+    // and signals one of the waiting threads
+    void Post();
+
+private :
+    wxSemaphoreInternal *m_internal;
+
 };
 
 // ----------------------------------------------------------------------------
 // Thread class
--- wxWindows.remote/src/msw/thread.cpp	Thu Feb 21 14:47:24 2002
+++ wxWindows/src/msw/thread.cpp	Tue Apr  2 14:03:49 2002
@@ -222,99 +222,277 @@
 
     return wxMUTEX_NO_ERROR;
 }
 
-// ----------------------------------------------------------------------------
-// wxCondition implementation
-// ----------------------------------------------------------------------------
+// ==========================================================================
+// wxSemaphore
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// wxSemaphoreInternal
+// --------------------------------------------------------------------------
 
-class wxConditionInternal
+class wxSemaphoreInternal
 {
-public:
-    wxConditionInternal()
-    {
-        m_hEvent = ::CreateEvent(
-                                 NULL,   // default secutiry
-                                 FALSE,  // not manual reset
-                                 FALSE,  // nonsignaled initially
-                                 NULL    // nameless event
-                                );
-        if ( !m_hEvent )
-        {
-            wxLogSysError(_("Can not create event object."));
-        }
+public :
+    wxSemaphoreInternal( int initialcount = 0, int maxcount = 0 );
+    ~wxSemaphoreInternal();
+
+    void Wait();
+    bool TryWait();
+
+    bool Wait( unsigned long timeout_millis );
+    
+    void Post();
+
+private :
+    HANDLE m_semaphore;
+};
 
-        // nobody waits for us yet
-        m_nWaiters = 0;
+wxSemaphoreInternal::wxSemaphoreInternal( int initialcount, int maxcount )
+{
+    if ( maxcount == 0 ) {
+        maxcount = 32767; // TODO : this should some kind of #define ( MAX_INT ? )
+    }
+    m_semaphore = CreateSemaphore( NULL, initialcount, maxcount, NULL );
+    if ( m_semaphore == NULL ) {
+        wxFAIL_MSG( _T("CreateSemaphore() failed") );
     }
+}
 
-    bool Wait(DWORD timeout)
-    {
-        // as m_nWaiters variable is accessed from multiple waiting threads
-        // (and possibly from the broadcasting thread), we need to change its
-        // value atomically
-        ::InterlockedIncrement(&m_nWaiters);
-
-        // FIXME this should be MsgWaitForMultipleObjects() as we want to keep
-        //       processing Windows messages while waiting (or don't we?)
-        DWORD rc = ::WaitForSingleObject(m_hEvent, timeout);
-
-        ::InterlockedDecrement(&m_nWaiters);
-
-        return rc != WAIT_TIMEOUT;
-    }
-
-    void Signal()
-    {
-        // set the event to signaled: if a thread is already waiting on it, it
-        // will be woken up, otherwise the event will remain in the signaled
-        // state until someone waits on it. In any case, the system will return
-        // it to a non signalled state afterwards. If multiple threads are
-        // waiting, only one will be woken up.
-        if ( !::SetEvent(m_hEvent) )
-        {
-            wxLogLastError(wxT("SetEvent"));
-        }
+wxSemaphoreInternal::~wxSemaphoreInternal()
+{
+    CloseHandle( m_semaphore );
+}
+
+void wxSemaphoreInternal::Wait()
+{
+    DWORD result = WaitForSingleObject( m_semaphore, INFINITE );
+    if ( result != WAIT_OBJECT_0 ) {
+        wxFAIL_MSG( _T("Semaphore Wait() error") );
     }
+}
 
-    void Broadcast()
-    {
-        // we need to save the original value as m_nWaiters is goign to be
-        // decreased by the signalled thread resulting in the loop being
-        // executed less times than needed
-        LONG nWaiters = m_nWaiters;
-
-        // this works because all these threads are already waiting and so each
-        // SetEvent() inside Signal() is really a PulseEvent() because the
-        // event state is immediately returned to non-signaled
-        for ( LONG n = 0; n < nWaiters; n++ )
-        {
-            Signal();
-        }
+bool wxSemaphoreInternal::TryWait()
+{
+    DWORD result = WaitForSingleObject( m_semaphore, 0 );
+    if ( (result != WAIT_OBJECT_0) && (result != WAIT_TIMEOUT) ) {
+        wxFAIL_MSG( _T("Error in Semaphore TryWay()") );
     }
+    if ( result == WAIT_TIMEOUT ) {
+        return false;
+    }
+    return true;
+}
 
-    ~wxConditionInternal()
-    {
-        if ( m_hEvent )
-        {
-            if ( !::CloseHandle(m_hEvent) )
-            {
-                wxLogLastError(wxT("CloseHandle(event)"));
-            }
-        }
+bool wxSemaphoreInternal::Wait( unsigned long timeout_millis )
+{
+    DWORD result = WaitForSingleObject( m_semaphore, timeout_millis );
+    if ( (result != WAIT_OBJECT_0) && (result != WAIT_TIMEOUT) ) {
+        wxFAIL_MSG( _T("Unable to wait for semaphore") );
+    }
+    if ( result == WAIT_TIMEOUT ) {
+        return false;
+    }
+
+    return true;
+}
+
+void wxSemaphoreInternal::Post()
+{
+    BOOL result = ReleaseSemaphore( m_semaphore, 1, NULL );
+    if ( !result ) {
+        wxFAIL_MSG( _T("Error in Semaphore Post()") );
     }
+}
+
+// --------------------------------------------------------------------------
+// wxSemaphore
+// --------------------------------------------------------------------------
+
+wxSemaphore::wxSemaphore( int initialcount, int maxcount )
+{
+    m_internal = new wxSemaphoreInternal( initialcount, maxcount );
+}
+
+wxSemaphore::~wxSemaphore()
+{
+    delete m_internal;
+}
+
+void wxSemaphore::Wait()
+{
+    m_internal->Wait();
+}
+
+bool wxSemaphore::TryWait()
+{
+    return m_internal->TryWait();
+}
+
+bool wxSemaphore::Wait( unsigned long timeout_millis )
+{
+    return m_internal->Wait( timeout_millis );
+}
+
+void wxSemaphore::Post()
+{
+    m_internal->Post();
+}
+
+
+// ==========================================================================
+// wxCondition
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// wxConditionInternal
+// --------------------------------------------------------------------------
+
+class wxConditionInternal
+{
+public :
 
-private:
-    // the Win32 synchronization object corresponding to this event
-    HANDLE m_hEvent;
+    wxConditionInternal( wxMutex *mutex );
+    ~wxConditionInternal();
 
-    // number of threads waiting for this condition
-    LONG m_nWaiters;
+    void Wait();
+
+    bool Wait( unsigned long timeout_millis );
+
+    void Signal();
+    
+    void Broadcast();
+
+private :
+    int m_nwaiters;
+    wxMutex m_nwaiters_mutex;
+
+    wxMutex *m_mutex;
+
+    wxSemaphore m_semaphore;
 };
 
-wxCondition::wxCondition()
+wxConditionInternal::wxConditionInternal( wxMutex *mutex )
+{
+    this->m_mutex = mutex;
+
+    m_nwaiters = 0;
+}
+
+wxConditionInternal::~wxConditionInternal()
+{
+}
+
+void wxConditionInternal::Wait()
+{
+    // increment the number of waiters
+    m_nwaiters_mutex.Lock();
+    m_nwaiters++;
+    m_nwaiters_mutex.Unlock();
+
+    m_mutex->Unlock();
+
+    // a potential race condition can occur here
+    // 
+    // after a thread increments nwaiters, and unlocks the mutex
+    // and before the semaphore.Wait() is called, 
+    // if another thread can cause a signal to be generated
+    //
+    // this race condition is handled by using a semaphore
+    // and incrementing the semaphore only if 'nwaiters'
+    // is greater that zero
+    // since the semaphore, can 'remember' signals
+    // the race condition will not occur
+
+    // wait ( if necessary ) and decrement semaphore
+    m_semaphore.Wait();
+
+    m_mutex->Lock();
+}
+
+bool wxConditionInternal::Wait( unsigned long timeout_millis )
+{
+    m_nwaiters_mutex.Lock();
+    m_nwaiters++;
+    m_nwaiters_mutex.Unlock();
+
+    m_mutex->Unlock();
+
+    // a race condition can occur at this point in the code
+    // 
+    // please see the comments in wait(), for details
+
+    bool success = true;
+
+    bool result = m_semaphore.Wait( timeout_millis );
+
+    if ( !result ) {
+        // another potential race condition exists here
+        // it is caused when a 'waiting' thread timesout,
+        // and returns from WaitForSingleObject, but
+        // has not yet decremented 'nwaiters'.
+        //
+        // at this point if another thread calls signal()
+        // then the semaphore will be incremented, but
+        // the waiting thread will miss it.
+        //
+        // to handle this particular case, the waiting
+        // thread calls WaitForSingleObject again with
+        // a timeout of 0, after locking 'nwaiters_mutex'.
+        // this call does not block because
+        // of the zero timeout, but will allow the waiting thread
+        // to catch the missed signals.
+
+        m_nwaiters_mutex.Lock();
+        result = m_semaphore.Wait( 0 );
+
+        if ( !result ) {
+            m_nwaiters--;
+            success = false;
+        }
+
+        m_nwaiters_mutex.Unlock();
+    }
+
+    m_mutex->Lock();
+
+    return success;
+}
+
+void wxConditionInternal::Signal()
+{
+    m_nwaiters_mutex.Lock();
+
+    if ( m_nwaiters > 0 ) {
+        // increment the semaphore by 1
+        m_semaphore.Post();
+
+        m_nwaiters--;
+    }
+
+    m_nwaiters_mutex.Unlock();
+}
+
+void wxConditionInternal::Broadcast()
+{
+    m_nwaiters_mutex.Lock();
+
+    while ( m_nwaiters > 0 ) {
+        m_semaphore.Post();
+        m_nwaiters --;
+    }
+
+    m_nwaiters_mutex.Unlock();
+}
+
+// ----------------------------------------------------------------------------
+// wxCondition implementation
+// ----------------------------------------------------------------------------
+
+wxCondition::wxCondition( wxMutex *mutex )
 {
-    m_internal = new wxConditionInternal;
+    m_internal = new wxConditionInternal( mutex );
 }
 
 wxCondition::~wxCondition()
 {
@@ -322,15 +500,14 @@
 }
 
 void wxCondition::Wait()
 {
-    (void)m_internal->Wait(INFINITE);
+    m_internal->Wait();
 }
 
-bool wxCondition::Wait(unsigned long sec,
-                       unsigned long nsec)
+bool wxCondition::Wait( unsigned long timeout_millis ) 
 {
-    return m_internal->Wait(sec*1000 + nsec/1000000);
+    return m_internal->Wait(timeout_millis);
 }
 
 void wxCondition::Signal()
 {
--- wxWindows.remote/src/unix/threadpsx.cpp	Thu Feb 21 14:47:24 2002
+++ wxWindows/src/unix/threadpsx.cpp	Tue Apr  2 14:05:02 2002
@@ -33,8 +33,9 @@
 #include "wx/utils.h"
 #include "wx/log.h"
 #include "wx/intl.h"
 #include "wx/dynarray.h"
+#include "wx/timer.h"
 
 #include <stdio.h>
 #include <unistd.h>
 #include <pthread.h>
@@ -88,37 +89,8 @@
 static void ScheduleThreadForDeletion();
 static void DeleteThread(wxThread *This);
 
 // ----------------------------------------------------------------------------
-// private classes
-// ----------------------------------------------------------------------------
-
-// same as wxMutexLocker but for "native" mutex
-class MutexLock
-{
-public:
-    MutexLock(pthread_mutex_t& mutex)
-    {
-        m_mutex = &mutex;
-        if ( pthread_mutex_lock(m_mutex) != 0 )
-        {
-            wxLogDebug(_T("pthread_mutex_lock() failed"));
-        }
-    }
-
-    ~MutexLock()
-    {
-        if ( pthread_mutex_unlock(m_mutex) != 0 )
-        {
-            wxLogDebug(_T("pthread_mutex_unlock() failed"));
-        }
-    }
-
-private:
-    pthread_mutex_t *m_mutex;
-};
-
-// ----------------------------------------------------------------------------
 // types
 // ----------------------------------------------------------------------------
 
 WX_DEFINE_ARRAY(wxThread *, wxArrayThread);
@@ -142,9 +114,9 @@
 // until there are any left
 static size_t gs_nThreadsBeingDeleted = 0;
 
 // a mutex to protect gs_nThreadsBeingDeleted
-static pthread_mutex_t gs_mutexDeleteThread;
+static wxMutex *gs_mutexDeleteThread = (wxMutex *)NULL;
 
 // and a condition variable which will be signaled when all
 // gs_nThreadsBeingDeleted will have been deleted
 static wxCondition *gs_condAllDeleted = (wxCondition *)NULL;
@@ -173,8 +145,10 @@
     wxMutexError Unlock();
 
 private:
     pthread_mutex_t m_mutex;
+
+    friend class wxConditionInternal;
 };
 
 wxMutexInternal::wxMutexInternal()
 {
@@ -341,211 +315,372 @@
 
     return m_internal->Unlock();
 }
 
-// ============================================================================
+// ===========================================================================
 // wxCondition implementation
-// ============================================================================
+// ===========================================================================
 
-// ----------------------------------------------------------------------------
+// ---------------------------------------------------------------------------
 // wxConditionInternal
-// ----------------------------------------------------------------------------
+// ---------------------------------------------------------------------------
 
-// The native POSIX condition variables are dumb: if the condition is signaled
-// before another thread starts to wait on it, the signal is lost and so this
-// other thread will be never woken up. It's much more convenient to us to
-// remember that the condition was signaled and to return from Wait()
-// immediately in this case (this is more like Win32 automatic event objects)
 class wxConditionInternal
 {
-public:
-    wxConditionInternal();
+public :
+    wxConditionInternal( wxMutex *mutex );
     ~wxConditionInternal();
 
-    // wait with the given timeout or indefinitely if NULL
-    bool Wait(const timespec* ts = NULL);
+    void Wait();
 
-    void Signal(bool all = FALSE);
+    bool Wait( const timespec *ts );
 
-private:
-    // the number of Signal() calls we "missed", i.e. which were done while
-    // there were no threads to wait for them
-    size_t m_nQueuedSignals;
+    void Signal();
 
-    // counts all pending waiters
-    size_t m_nWaiters;
+    void Broadcast();
 
-    // the condition itself
-    pthread_cond_t m_condition;
+private :
 
-    // the mutex used with the conditon: it also protects the counters above
-    pthread_mutex_t m_mutex;
+    wxMutex *m_mutex;
+    pthread_cond_t m_cond;
 };
 
-wxConditionInternal::wxConditionInternal()
+wxConditionInternal::wxConditionInternal( wxMutex *mutex )
 {
-    m_nQueuedSignals =
-    m_nWaiters = 0;
-
-    if ( pthread_cond_init(&m_condition, (pthread_condattr_t *)NULL) != 0 )
-    {
-        // this is supposed to never happen
+    this->m_mutex = mutex;
+    int result = pthread_cond_init( &m_cond, NULL );
+    if ( result != 0 ) {
         wxFAIL_MSG( _T("pthread_cond_init() failed") );
     }
+}
 
-    if ( pthread_mutex_init(&m_mutex, NULL) != 0 )
-    {
-        // neither this
-        wxFAIL_MSG( _T("wxCondition: pthread_mutex_init() failed") );
+wxConditionInternal::~wxConditionInternal()
+{
+    int result = pthread_cond_destroy( &m_cond );
+    if ( result != 0 ) {
+        wxFAIL_MSG( _T("pthread_cond_destroy() failed") );
     }
 }
 
-wxConditionInternal::~wxConditionInternal()
+void wxConditionInternal::Wait()
 {
-    if ( pthread_cond_destroy( &m_condition ) != 0 )
-    {
-        wxLogDebug(_T("Failed to destroy condition variable (some "
-                      "threads are probably still waiting on it?)"));
+    int result = pthread_cond_wait( &m_cond, &(m_mutex->m_internal->m_mutex) );
+    if ( result != 0 ) {
+        wxFAIL_MSG( _T("pthread_cond_wait() failed") );
     }
+}
 
-    if ( pthread_mutex_destroy( &m_mutex ) != 0 ) 
-    {
-        wxLogDebug(_T("Failed to destroy mutex (it is probably locked)"));
+bool wxConditionInternal::Wait( const timespec *ts )
+{
+    int result = pthread_cond_timedwait( &m_cond, &(m_mutex->m_internal->m_mutex), ts );
+    if ( result == ETIMEDOUT ) {
+        return false;
     }
+    if ( result != 0 ) {
+        wxFAIL_MSG( _T("pthread_cond_timedwait() failed") );
+    }
+    return true;
 }
 
-bool wxConditionInternal::Wait(const timespec* ts)
+void wxConditionInternal::Signal()
 {
-    MutexLock lock(m_mutex);
+    int result = pthread_cond_signal( &m_cond );
+    if ( result != 0 ) {
+        wxFAIL_MSG( _T("pthread_cond_signal() failed") );
+    }
+}
 
-    if ( m_nQueuedSignals )
-    {
-        m_nQueuedSignals--;
+void wxConditionInternal::Broadcast()
+{
+    int result = pthread_cond_broadcast( &m_cond );
+    if ( result != 0 ) {
+        wxFAIL_MSG( _T("pthread_cond_broadcast() failed") );
+    }
+}
 
-        wxLogTrace(TRACE_THREADS,
-                   _T("wxCondition(%08x)::Wait(): Has been signaled before"),
-                   this);
 
-        return TRUE;
-    }
+// ---------------------------------------------------------------------------
+// wxCondition
+// ---------------------------------------------------------------------------
 
-    // there are no queued signals, so start really waiting
-    m_nWaiters++;
+wxCondition::wxCondition( wxMutex *mutex )
+{
+    m_internal = new wxConditionInternal( mutex );
+}
 
-    // calling wait function below unlocks the mutex and Signal() or
-    // Broadcast() will be able to continue to run now if they were
-    // blocking for it in the loop locking all mutexes)
-    wxLogTrace(TRACE_THREADS,
-               _T("wxCondition(%08x)::Wait(): starting to wait"), this);
+wxCondition::~wxCondition()
+{
+    delete m_internal;
+}
 
-    int err = ts ? pthread_cond_timedwait(&m_condition, &m_mutex, ts)
-                 : pthread_cond_wait(&m_condition, &m_mutex);
-    switch ( err )
-    {
-        case 0:
-            // condition was signaled
-            wxLogTrace(TRACE_THREADS,
-                       _T("wxCondition(%08x)::Wait(): ok"), this);
-            break;
+void wxCondition::Wait()
+{
+    m_internal->Wait();
+}
 
-        default:
-            wxLogDebug(_T("unexpected pthread_cond_[timed]wait() return"));
-            // fall through
+bool wxCondition::Wait( unsigned long timeout_millis ) 
+{
+
+    wxLongLong curtime = wxGetLocalTimeMillis();
+    curtime += timeout_millis;
+    wxLongLong temp = curtime / 1000;
+    int sec = temp.GetLo();
+    temp = temp * 1000;
+    temp = curtime - temp;
+    int millis = temp.GetLo();
+
+    timespec tspec;
+
+    tspec.tv_sec = sec;
+    tspec.tv_nsec = millis * 1000L * 1000L;
 
-        case ETIMEDOUT:
-        case EINTR:
-            // The condition has not been signaled, so we have to
-            // decrement the counter manually
-            --m_nWaiters;
+    return m_internal->Wait(&tspec);
+}
+
+void wxCondition::Signal()
+{
+    m_internal->Signal();
+}
+
+void wxCondition::Broadcast()
+{
+    m_internal->Broadcast();
+}
+
+// ===========================================================================
+// wxSemaphore implementation
+// ===========================================================================
 
-            // wait interrupted or timeout elapsed
-            wxLogTrace(TRACE_THREADS,
-                       _T("wxCondition(%08x)::Wait(): timeout/intr"), this);
+// ---------------------------------------------------------------------------
+// wxSemaphoreInternal
+// ---------------------------------------------------------------------------
+
+class wxSemaphoreInternal
+{
+public :
+    wxSemaphoreInternal( int initialcount, int maxcount );
+    ~wxSemaphoreInternal();
+
+    void Wait();
+    bool TryWait();
+
+    bool Wait( unsigned long timeout_millis );
+    
+    void Post();
+
+private :
+    wxMutex *m_mutex;
+    wxCondition *m_cond;
+    int maxcount;
+    int count;
+};
+
+wxSemaphoreInternal::wxSemaphoreInternal( int initialcount, int maxcount )
+{
+
+    if ( (initialcount < 0) || ((maxcount > 0) && (initialcount > maxcount)) ) {
+        wxFAIL_MSG( _T("Semaphore invalid initial count") );
     }
 
-    return err == 0;
+    this->maxcount = maxcount;
+    count = initialcount;
+    m_mutex = new wxMutex();
+    m_cond = new wxCondition( m_mutex );
 }
 
-void wxConditionInternal::Signal(bool all)
+wxSemaphoreInternal::~wxSemaphoreInternal()
 {
-    // make sure that only one Signal() or Broadcast() is in progress
-    MutexLock lock(m_mutex);
+    delete m_cond;
+    delete m_mutex;
+}
 
-    // Are there any waiters?
-    if ( m_nWaiters == 0 )
-    {
-        // No, there are not, so don't signal but keep in mind for the next
-        // Wait()
-        m_nQueuedSignals++;
+void wxSemaphoreInternal::Wait()
+{
+    wxMutexLocker locker(*m_mutex);
 
-        return;
+    while ( count <= 0 ) {
+        m_cond->Wait();
     }
 
-    // now we can finally signal it
-    wxLogTrace(TRACE_THREADS, _T("wxCondition(%08x)::Signal(): preparing to %s"),
-               this, all ? _T("broadcast") : _T("signal"));
+    count--;
+}
 
-    int err = all ? pthread_cond_broadcast(&m_condition)
-                  : pthread_cond_signal(&m_condition);
+bool wxSemaphoreInternal::TryWait()
+{
+    wxMutexLocker locker(*m_mutex);
 
-    if ( all )
-    {
-        m_nWaiters = 0;
+    if ( count <= 0 ) {
+        return false;
     }
-    else
-    {
-        --m_nWaiters;
+
+    count--;
+
+    return true;
+}
+
+bool wxSemaphoreInternal::Wait( unsigned long timeout_millis )
+{
+    wxMutexLocker locker( *m_mutex );
+
+    wxLongLong startTime = wxGetLocalTimeMillis();
+
+    while ( count <= 0 ) {
+        wxLongLong elapsed = wxGetLocalTimeMillis() - startTime;
+        long remainingTime = (long)timeout_millis - (long)elapsed.GetLo();
+        if ( remainingTime <= 0 ) {
+            return false;
+        }
+        bool result = m_cond->Wait( remainingTime );
+        if ( !result ) {
+            return false;
+        }
     }
 
-    if ( err )
-    {
-        // shouldn't ever happen
-        wxFAIL_MSG(_T("pthread_cond_{broadcast|signal}() failed"));
+    count--;
+
+    return true;
+}
+
+void wxSemaphoreInternal::Post()
+{
+    wxMutexLocker locker(*m_mutex);
+
+    if ( (maxcount > 0) && (count == maxcount) ) {
+        wxFAIL_MSG( _T("Semaphore Post() overflow") );
     }
+
+    count++;
+
+    m_cond->Signal();
 }
 
-// ----------------------------------------------------------------------------
-// wxCondition
-// ----------------------------------------------------------------------------
 
-wxCondition::wxCondition()
+// --------------------------------------------------------------------------
+// wxSemaphore
+// --------------------------------------------------------------------------
+
+wxSemaphore::wxSemaphore( int initialcount, int maxcount )
 {
-    m_internal = new wxConditionInternal;
+    m_internal = new wxSemaphoreInternal( initialcount, maxcount );
 }
 
-wxCondition::~wxCondition()
+wxSemaphore::~wxSemaphore()
 {
     delete m_internal;
 }
 
-void wxCondition::Wait()
+void wxSemaphore::Wait()
 {
-    (void)m_internal->Wait();
+    m_internal->Wait();
 }
 
-bool wxCondition::Wait(unsigned long sec, unsigned long nsec)
+bool wxSemaphore::TryWait()
 {
-    timespec tspec;
-
-    tspec.tv_sec = time(0L) + sec;  // FIXME is time(0) correct here?
-    tspec.tv_nsec = nsec;
-
-    return m_internal->Wait(&tspec);
+    return m_internal->TryWait();
 }
 
-void wxCondition::Signal()
+bool wxSemaphore::Wait( unsigned long timeout_millis )
 {
-    m_internal->Signal();
+    return m_internal->Wait( timeout_millis );
 }
 
-void wxCondition::Broadcast()
+void wxSemaphore::Post()
 {
-    m_internal->Signal(TRUE /* all */);
+    m_internal->Post();
 }
 
-// ============================================================================
+// This class is used by wxThreadInternal to support Delete() on
+// a detached thread
+//
+class wxRefCountedCondition
+{
+    int m_refCount;
+
+    wxMutex *m_mutex;
+    wxCondition *m_cond;
+
+    bool m_signaled;
+
+    // Cannot delete this object directly
+    // call DeleteRef() instead
+    ~wxRefCountedCondition()
+    {
+        delete m_cond;
+        delete m_mutex;
+    }
+
+public :
+
+    // start with a initial 
+    // reference count of 1
+    wxRefCountedCondition()
+    {
+        m_refCount = 1;
+        m_signaled = false;
+
+        m_mutex = new wxMutex();
+        m_cond = new wxCondition( m_mutex );
+    }
+
+    // increment the reference count
+    void AddRef()
+    {
+        wxMutexLocker locker( *m_mutex );
+
+        m_refCount++;
+    }
+
+    // decrement the reference count
+    // if reference count is zero
+    // then delete the object
+    void DeleteRef()
+    {
+        bool shouldDelete = false;
+
+        m_mutex->Lock();
+        
+        if ( (--m_refCount) == 0 ) {
+            shouldDelete = true;
+        }
+
+        m_mutex->Unlock();
+
+        if ( shouldDelete ) {
+            delete this;
+        }
+    }
+
+
+    // sets the object to signaled
+    // this signal will be a persistent signal
+    // all further Wait()s on the object 
+    // will return without blocking
+    void SetSignaled()
+    {
+        wxMutexLocker locker( *m_mutex );
+
+        m_signaled = true;
+
+        m_cond->Broadcast();
+    }
+
+    // wait till the object is signaled
+    // if the object was already signaled
+    // then return immediately
+    void Wait()
+    {
+        wxMutexLocker locker( *m_mutex );
+        
+        if ( m_signaled ) {
+            return;
+        }
+        m_cond->Wait();
+    }
+};
+
+// ===========================================================================
 // wxThread implementation
-// ============================================================================
+// ===========================================================================
 
 // the thread callback functions must have the C linkage
 extern "C"
 {
@@ -579,9 +714,9 @@
     void Wait();
         // wake up threads waiting for our termination
     void SignalExit();
         // wake up threads waiting for our start
-    void SignalRun() { m_condRun.Signal(); }
+    void SignalRun() { m_semRun.Post(); }
         // go to sleep until Resume() is called
     void Pause();
         // resume the thread
     void Resume();
@@ -629,9 +764,9 @@
 
     // this flag is set when the thread should terminate
     bool m_cancelled;
 
-    // this flag is set when the thread is blocking on m_condSuspend
+    // this flag is set when the thread is blocking on m_semSuspend
     bool m_isPaused;
 
     // the thread exit code - only used for joinable (!detached) threads and
     // is only valid after the thread termination
@@ -643,24 +778,20 @@
     bool m_shouldBeJoined;
     bool m_shouldBroadcast;
     bool m_isDetached;
 
-    // VZ: it's possible that we might do with less than three different
-    //     condition objects - for example, m_condRun and m_condEnd a priori
-    //     won't be used in the same time. But for now I prefer this may be a
-    //     bit less efficient but safer solution of having distinct condition
-    //     variables for each purpose.
-
-    // this condition is signaled by Run() and the threads Entry() is not
+    // this semaphore is posted by Run() and the threads Entry() is not
     // called before it is done
-    wxCondition m_condRun;
+    wxSemaphore m_semRun;
 
     // this one is signaled when the thread should resume after having been
     // Pause()d
-    wxCondition m_condSuspend;
+    wxSemaphore m_semSuspend;
 
     // finally this one is signalled when the thread exits
-    wxCondition m_condEnd;
+    // we are using a reference counted condition to support
+    // Delete() for a detached thread
+    wxRefCountedCondition *m_condEnd;
 };
 
 // ----------------------------------------------------------------------------
 // thread startup and exit functions
@@ -696,10 +827,10 @@
     // cancelled
     pthread_cleanup_push(wxPthreadCleanup, thread);
 #endif // HAVE_THREAD_CLEANUP_FUNCTIONS
 
-    // wait for the condition to be signaled from Run()
-    pthread->m_condRun.Wait();
+    // wait for the semaphore to be posted from Run()
+    pthread->m_semRun.Wait();
 
     // test whether we should run the run at all - may be it was deleted
     // before it started to Run()?
     {
@@ -791,19 +922,22 @@
     m_prio = WXTHREAD_DEFAULT_PRIORITY;
     m_threadId = 0;
     m_exitcode = 0;
 
-    // set to TRUE only when the thread starts waiting on m_condSuspend
+    // set to TRUE only when the thread starts waiting on m_semSuspend
     m_isPaused = FALSE;
 
     // defaults for joinable threads
     m_shouldBeJoined = TRUE;
     m_shouldBroadcast = TRUE;
     m_isDetached = FALSE;
+
+    m_condEnd = new wxRefCountedCondition();
 }
 
 wxThreadInternal::~wxThreadInternal()
 {
+    m_condEnd->DeleteRef();
 }
 
 wxThreadError wxThreadInternal::Run()
 {
@@ -831,9 +965,17 @@
                _T("Starting to wait for thread %ld to exit."), id);
 
     // wait until the thread terminates (we're blocking in _another_ thread,
     // of course)
-    m_condEnd.Wait();
+
+    // a reference counting condition is used to handle the
+    // case where a detached thread deletes itself 
+    // before m_condEnd->Wait() returns
+    // in this case the deletion of the condition object is deferred until
+    // all Wait()ing threads have finished calling DeleteRef()
+    m_condEnd->AddRef();
+    m_condEnd->Wait();
+    m_condEnd->DeleteRef();
 
     wxLogTrace(TRACE_THREADS, _T("Finished waiting for thread %ld."), id);
 
     // we can't use any member variables any more if the thread is detached
@@ -876,9 +1018,9 @@
     {
         wxLogTrace(TRACE_THREADS, _T("Thread %ld signals end condition."),
                    GetId());
 
-        m_condEnd.Broadcast();
+        m_condEnd->SetSignaled();
     }
 }
 
 void wxThreadInternal::Pause()
@@ -889,10 +1031,10 @@
                  wxT("thread must first be paused with wxThread::Pause().") );
 
     wxLogTrace(TRACE_THREADS, _T("Thread %ld goes to sleep."), GetId());
 
-    // wait until the condition is signaled from Resume()
-    m_condSuspend.Wait();
+    // wait until the semaphore is Post()ed from Resume()
+    m_semSuspend.Wait();
 }
 
 void wxThreadInternal::Resume()
 {
@@ -905,9 +1047,9 @@
     {
         wxLogTrace(TRACE_THREADS, _T("Waking up thread %ld"), GetId());
 
         // wake up Pause()
-        m_condSuspend.Signal();
+        m_semSuspend.Post();
 
         // reset the flag
         SetReallyPaused(FALSE);
     }
@@ -1306,9 +1448,9 @@
     switch ( state )
     {
         case STATE_NEW:
             // we need to wake up the thread so that PthreadStart() will
-            // terminate - right now it's blocking on m_condRun
+            // terminate - right now it's blocking on m_semRun
             m_internal->SignalRun();
 
             // fall through
 
@@ -1489,9 +1631,10 @@
     // detached thread will decrement this counter in DeleteThread(), but it
     // is not called for the joinable threads, so do it here
     if ( !m_isDetached )
     {
-        MutexLock lock(gs_mutexDeleteThread);
+        wxMutexLocker lock( *gs_mutexDeleteThread );
+        
         gs_nThreadsBeingDeleted--;
 
         wxLogTrace(TRACE_THREADS, _T("%u scheduled for deletion threads left."),
                    gs_nThreadsBeingDeleted - 1);
@@ -1565,11 +1708,10 @@
 
     gs_mutexGui->Lock();
 #endif // wxUSE_GUI
 
-    // under Solaris we get a warning from CC when using
-    // PTHREAD_MUTEX_INITIALIZER, so do it dynamically
-    pthread_mutex_init(&gs_mutexDeleteThread, NULL);
+    gs_mutexDeleteThread = new wxMutex();
+    gs_condAllDeleted = new wxCondition( gs_mutexDeleteThread );
 
     return TRUE;
 }
 
@@ -1578,20 +1720,20 @@
     wxASSERT_MSG( wxThread::IsMain(), wxT("only main thread can be here") );
 
     // are there any threads left which are being deleted right now?
     size_t nThreadsBeingDeleted;
-    {
-        MutexLock lock(gs_mutexDeleteThread);
-        nThreadsBeingDeleted = gs_nThreadsBeingDeleted;
-    }
 
-    if ( nThreadsBeingDeleted > 0 )
     {
-        wxLogTrace(TRACE_THREADS, _T("Waiting for %u threads to disappear"),
-                   nThreadsBeingDeleted);
-
-        // have to wait until all of them disappear
-        gs_condAllDeleted->Wait();
+        wxMutexLocker lock( *gs_mutexDeleteThread );
+        nThreadsBeingDeleted = gs_nThreadsBeingDeleted;
+        
+        if ( nThreadsBeingDeleted > 0 ) {
+            wxLogTrace(TRACE_THREADS, _T("Waiting for %u threads to disappear"),
+                           nThreadsBeingDeleted);
+            
+            // have to wait until all of them disappear
+            gs_condAllDeleted->Wait();
+        }
     }
 
     // terminate any threads left
     size_t count = gs_allThreads.GetCount();
@@ -1616,22 +1758,20 @@
 #endif // wxUSE_GUI
 
     // and free TLD slot
     (void)pthread_key_delete(gs_keySelf);
+
+    delete gs_condAllDeleted;
+    delete gs_mutexDeleteThread;
 }
 
 // ----------------------------------------------------------------------------
 // global functions
 // ----------------------------------------------------------------------------
 
 static void ScheduleThreadForDeletion()
 {
-    MutexLock lock(gs_mutexDeleteThread);
-
-    if ( gs_nThreadsBeingDeleted == 0 )
-    {
-        gs_condAllDeleted = new wxCondition;
-    }
+    wxMutexLocker lock( *gs_mutexDeleteThread );
 
     gs_nThreadsBeingDeleted++;
 
     wxLogTrace(TRACE_THREADS, _T("%u thread%s waiting to be deleted"),
@@ -1642,30 +1782,25 @@
 static void DeleteThread(wxThread *This)
 {
     // gs_mutexDeleteThread should be unlocked before signalling the condition
     // or wxThreadModule::OnExit() would deadlock
-    {
-        MutexLock lock(gs_mutexDeleteThread);
+    wxMutexLocker locker( *gs_mutexDeleteThread );
 
-        wxLogTrace(TRACE_THREADS, _T("Thread %ld auto deletes."), This->GetId());
+    wxLogTrace(TRACE_THREADS, _T("Thread %ld auto deletes."), This->GetId());
 
-        delete This;
+    delete This;
 
-        wxCHECK_RET( gs_nThreadsBeingDeleted > 0,
+    wxCHECK_RET( gs_nThreadsBeingDeleted > 0,
                      _T("no threads scheduled for deletion, yet we delete "
                         "one?") );
-    }
 
     wxLogTrace(TRACE_THREADS, _T("%u scheduled for deletion threads left."),
                gs_nThreadsBeingDeleted - 1);
 
     if ( !--gs_nThreadsBeingDeleted )
     {
         // no more threads left, signal it
         gs_condAllDeleted->Signal();
-
-        delete gs_condAllDeleted;
-        gs_condAllDeleted = (wxCondition *)NULL;
     }
 }
 
 void wxMutexGuiEnter()

 	  	 

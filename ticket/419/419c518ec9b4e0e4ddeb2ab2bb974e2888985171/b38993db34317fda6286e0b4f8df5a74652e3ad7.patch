Index: samples/sockets/client.cpp
===================================================================
--- samples/sockets/client.cpp	(revision 63658)
+++ samples/sockets/client.cpp	(working copy)
@@ -53,7 +53,7 @@
 };
 
 // Define a new frame type: this is going to be our main frame
-class MyFrame : public wxFrame
+class MyFrame : public wxFrame, public wxThreadHelper
 {
 public:
   MyFrame();
@@ -89,6 +89,10 @@
   // convenience functions
   void UpdateStatusBar();
 
+  void DownloadFile();
+
+protected:
+  virtual wxThread::ExitCode Entry();
 private:
   wxSocketClient *m_sock;
   wxTextCtrl     *m_text;
@@ -98,6 +102,7 @@
   wxMenu         *m_menuProtocols;
   wxMenuBar      *m_menuBar;
   bool            m_busy;
+  wxString        m_url;
 
   // any class wishing to process wxWidgets events must use this macro
   DECLARE_EVENT_TABLE()
@@ -578,7 +583,7 @@
 void MyFrame::OnTestURL(wxCommandEvent& WXUNUSED(event))
 {
     // Ask for the URL
-    static wxString s_urlname("http://www.google.com/");
+    static wxString s_urlname("http://svn.wxwidgets.org/svn/wx/wxWidgets/trunk/docs/changes.txt");
     wxString urlname = wxGetTextFromUser
                        (
                         _("Enter an URL to get"),
@@ -588,44 +593,80 @@
     if ( urlname.empty() )
         return; // cancelled by user
 
-    s_urlname = urlname;
+    m_url = s_urlname = urlname;
 
+    if (CreateThread(wxTHREAD_JOINABLE) != wxTHREAD_NO_ERROR)
+    {
+        wxLogError("Could not create the worker thread!");
+        return;
+    }
 
-    TestLogger logtest("URL");
+    // go!
+    if (GetThread()->Run() != wxTHREAD_NO_ERROR)
+    {
+        wxLogError("Could not run the worker thread!");
+        return;
+    }
+    
+}
 
-    // Parse the URL
-    wxURL url(urlname);
-    if ( url.GetError() != wxURL_NOERR )
-    {
-        wxLogError("Failed to parse URL \"%s\"", urlname);
-        return;
-    }
+void MyFrame::DownloadFile()
+{
+    TestLogger logtest("URL");
 
-    // Try to get the input stream (connects to the given URL)
-    wxLogMessage("Establishing connection to \"%s\"...", urlname);
-    const std::auto_ptr<wxInputStream> data(url.GetInputStream());
-    if ( !data.get() )
-    {
-        wxLogError("Failed to retrieve URL \"%s\"", urlname);
-        return;
-    }
+    // Parse the URL
+    wxURL url(m_url);
+    if ( url.GetError() != wxURL_NOERR )
+    {
+        wxLogError("Failed to parse URL \"%s\"", m_url);
+        return;
+    }
 
-    // Print the contents type and file size
-    wxLogMessage("Contents type: %s\nFile size: %i\nStarting to download...",
-                 url.GetProtocol().GetContentType(),
-                 data->GetSize());
+    // Try to get the input stream (connects to the given URL)
+    wxLogMessage("Establishing connection to \"%s\"...", m_url);
+    const std::auto_ptr<wxInputStream> data(url.GetInputStream());
+    if ( !data.get() )
+    {
+        wxLogError("Failed to retrieve URL \"%s\"", m_url);
+        return;
+    }
 
-    // Get the data
-    wxStringOutputStream sout;
-    if ( data->Read(sout).GetLastError() != wxSTREAM_EOF )
-    {
-        wxLogError("Error reading the input stream.");
-    }
+    // Print the contents type and file size
+    wxLogMessage("Contents type: %s\nFile size: %i\nStarting to download...",
+        url.GetProtocol().GetContentType(),
+        data->GetSize());
 
-    wxLogMessage("Text retrieved from URL \"%s\" follows:\n%s",
-                 urlname, sout.GetString());
+    // Get the data
+
+    // copied from wxInputStream::Read(wxOutputStream& stream_out)
+    size_t lastcount = 0;
+    char buf[1];
+
+    for ( ;; )
+    {
+        size_t bytes_read = data->Read(buf, WXSIZEOF(buf)).LastRead();
+        if ( !bytes_read )
+            break;
+
+        lastcount += bytes_read;
+    }
+
+    int err = data->GetLastError();
+    if ( err != wxSTREAM_EOF )
+    {
+        wxLogError("Error reading the input stream.");
+    }
+
+    wxLogMessage("Read bytes count: %d", lastcount);
 }
 
+
+wxThread::ExitCode MyFrame::Entry()
+{
+    DownloadFile();
+    return 0;
+}
+
 #endif // wxUSE_URL
 
 void MyFrame::OnSocketEvent(wxSocketEvent& event)

diff --git a/samples/toolbar/toolbar.cpp b/samples/toolbar/toolbar.cpp
index ac7bc3daad..87bcfd43dc 100644
--- a/samples/toolbar/toolbar.cpp
+++ b/samples/toolbar/toolbar.cpp
@@ -34,6 +34,8 @@
 #include "wx/colordlg.h"
 #include "wx/srchctrl.h"
 
+#include <wx/rawbmp.h>
+
 // define this to use XPMs everywhere (by default, BMPs are used under Win)
 // BMPs use less space, but aren't compiled into the executable on other platforms
 #if defined(__WINDOWS__) && wxUSE_WXDIB
@@ -367,6 +369,34 @@ void MyFrame::RecreateToolbar()
     PopulateToolbar(toolBar);
 }
 
+static void rectfill2wxbmap(int x, int y, int width, int height, int color, wxBitmap *dstbm)
+{
+	int r = (color & 0xff0000) >> 16;
+	int g = (color & 0xff00) >> 8;
+	int b = (color & 0xff);
+
+	wxAlphaPixelData pixData(*dstbm, wxPoint(x, y), wxSize(width, height));
+	if(!pixData) return;
+
+        wxAlphaPixelData::Iterator p(pixData);
+
+	for(int y = 0; y < height; y++) {
+
+		wxAlphaPixelData::Iterator rowStart = p;
+
+		for(int x = 0; x < width; x++) {
+			p.Red()   = r;
+			p.Green() = g;
+			p.Blue()  = b;
+			p.Alpha() = 255;
+			p++;
+		}
+
+		p = rowStart;
+		p.OffsetY(pixData, 1);
+	}
+}
+
 void MyFrame::PopulateToolbar(wxToolBarBase* toolBar)
 {
     // Set up toolbar
@@ -383,46 +413,16 @@ void MyFrame::PopulateToolbar(wxToolBarBase* toolBar)
         Tool_Max
     };
 
-    wxBitmap toolBarBitmaps[Tool_Max];
-
-#if USE_XPM_BITMAPS
-    #define INIT_TOOL_BMP(bmp) \
-        toolBarBitmaps[Tool_##bmp] = wxBitmap(bmp##_xpm)
-#else // !USE_XPM_BITMAPS
-    #define INIT_TOOL_BMP(bmp) \
-        toolBarBitmaps[Tool_##bmp] = wxBITMAP(bmp)
-#endif // USE_XPM_BITMAPS/!USE_XPM_BITMAPS
-
-    INIT_TOOL_BMP(new);
-    INIT_TOOL_BMP(open);
-    INIT_TOOL_BMP(save);
-    INIT_TOOL_BMP(copy);
-    INIT_TOOL_BMP(cut);
-    INIT_TOOL_BMP(paste);
-    INIT_TOOL_BMP(print);
-    INIT_TOOL_BMP(help);
-
-    int w = toolBarBitmaps[Tool_new].GetWidth(),
-        h = toolBarBitmaps[Tool_new].GetHeight();
-
-    if ( !m_smallToolbar )
-    {
-        w *= 2;
-        h *= 2;
-
-        for ( size_t n = Tool_new; n < WXSIZEOF(toolBarBitmaps); n++ )
-        {
-            toolBarBitmaps[n] =
-                wxBitmap(toolBarBitmaps[n].ConvertToImage().Scale(w, h));
-        }
-    }
+    wxBitmap *bm = new wxBitmap();
+    bm->CreateScaled(24, 24, 32, 2);
+    rectfill2wxbmap(0, 0, 48, 48, 0xff0000, bm);
 
     // this call is actually unnecessary as the toolbar will adjust its tools
     // size to fit the biggest icon used anyhow but it doesn't hurt neither
-    toolBar->SetToolBitmapSize(wxSize(w, h));
+//    toolBar->SetToolBitmapSize(wxSize(w, h));
 
     toolBar->AddTool(wxID_NEW, "New",
-                     toolBarBitmaps[Tool_new], wxNullBitmap, wxITEM_DROPDOWN,
+                     *bm, wxNullBitmap, wxITEM_DROPDOWN,
                      "New file", "This is help for new file tool");
 
     wxMenu* menu = new wxMenu;
@@ -433,7 +433,7 @@ void MyFrame::PopulateToolbar(wxToolBarBase* toolBar)
     toolBar->SetDropdownMenu(wxID_NEW, menu);
 
     toolBar->AddTool(wxID_OPEN, "Open",
-                     toolBarBitmaps[Tool_open], wxNullBitmap, wxITEM_NORMAL,
+                     *bm, wxNullBitmap, wxITEM_NORMAL,
                      "Open file", "This is help for open file tool");
 
 #if USE_CONTROLS_IN_TOOLBAR
@@ -450,56 +450,20 @@ void MyFrame::PopulateToolbar(wxToolBarBase* toolBar)
     }
 #endif // USE_CONTROLS_IN_TOOLBAR
 
-    toolBar->AddTool(wxID_SAVE, "Save", toolBarBitmaps[Tool_save], "Toggle button 1", wxITEM_CHECK);
+    toolBar->AddTool(wxID_SAVE, "Save", *bm, "Toggle button 1", wxITEM_CHECK);
 
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_COPY, "Copy", toolBarBitmaps[Tool_copy], "Toggle button 2", wxITEM_CHECK);
-    toolBar->AddTool(wxID_CUT, "Cut", toolBarBitmaps[Tool_cut], "Toggle/Untoggle help button");
-    toolBar->AddTool(wxID_PASTE, "Paste", toolBarBitmaps[Tool_paste], "Paste");
+    toolBar->AddTool(wxID_COPY, "Copy", *bm, "Toggle button 2", wxITEM_CHECK);
+    toolBar->AddTool(wxID_CUT, "Cut", *bm, "Toggle/Untoggle help button");
+    toolBar->AddTool(wxID_PASTE, "Paste", *bm, "Paste");
     toolBar->AddSeparator();
 
-    if ( m_useCustomDisabled )
-    {
-        wxBitmap bmpDisabled(w, h);
-        {
-            wxMemoryDC dc;
-            dc.SelectObject(bmpDisabled);
-            dc.DrawBitmap(toolBarBitmaps[Tool_print], 0, 0);
-
-            wxPen pen(*wxRED, 5);
-            dc.SetPen(pen);
-            dc.DrawLine(0, 0, w, h);
-        }
-
-        toolBar->AddTool(wxID_PRINT, "Print", toolBarBitmaps[Tool_print],
-                         bmpDisabled);
-    }
-    else
-    {
-        toolBar->AddTool(wxID_PRINT, "Print", toolBarBitmaps[Tool_print],
-                         "Delete this tool. This is a very long tooltip to test whether it does the right thing when the tooltip is more than Windows can cope with.");
-    }
-
     m_nPrint = 1;
 
     // add a stretchable space before the "Help" button to make it
     // right-aligned
     toolBar->AddStretchableSpace();
-    toolBar->AddTool(wxID_HELP, "Help", toolBarBitmaps[Tool_help], "Help button", wxITEM_CHECK);
-
-    if ( !m_pathBmp.empty() )
-    {
-        // create a tool with a custom bitmap for testing
-        wxImage img(m_pathBmp);
-        if ( img.IsOk() )
-        {
-            if ( img.GetWidth() > w && img.GetHeight() > h )
-                img = img.GetSubImage(wxRect(0, 0, w, h));
-
-            toolBar->AddSeparator();
-            toolBar->AddTool(wxID_ANY, "Custom", img);
-        }
-    }
+    toolBar->AddTool(wxID_HELP, "Help", *bm, "Help button", wxITEM_CHECK);
 
     // after adding the buttons to the toolbar, must call Realize() to reflect
     // the changes
@@ -887,6 +851,7 @@ void MyFrame::DoToggleHelp()
 
 void MyFrame::OnToggleSearch(wxCommandEvent& WXUNUSED(event))
 {
+/*
     wxToolBarBase * const tb = GetToolBar();
     if ( !m_searchTool )
     {
@@ -911,6 +876,7 @@ void MyFrame::OnToggleSearch(wxCommandEvent& WXUNUSED(event))
     }
 
     tb->Realize();
+*/
 }
 
 void MyFrame::OnUpdateCopyAndCut(wxUpdateUIEvent& event)

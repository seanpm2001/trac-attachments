diff -ur ../wxWidgets/include/wx/gtk/private.h ./include/wx/gtk/private.h
--- ../wxWidgets/include/wx/gtk/private.h	2006-01-22 16:30:05.000000000 -0800
+++ ./include/wx/gtk/private.h	2006-01-23 20:14:39.000000000 -0800
@@ -12,7 +12,6 @@
 #ifndef _WX_GTK_PRIVATE_H_
 #define _WX_GTK_PRIVATE_H_
 
-#include <gdk/gdk.h>
 #include <gtk/gtk.h>
 
 #include "wx/event.h"
@@ -31,40 +30,6 @@
     #define wxGTK_CONV_BACK(s)  wxConvLocal.cWC2WX( (wxConvUTF8.cMB2WC( s ) ) )
 #endif
 
-// FIXME: Make gtk2 only, so no macros needed - MR
-// GTK+ 2.0 compatibility define is broken when used from C++ as it
-// casts enum to int implicitly
-#undef gtk_signal_disconnect_by_func
-#define gtk_signal_disconnect_by_func(object,func,data) \
-    gtk_signal_compat_matched((object), (func), (data), \
-                              (GSignalMatchType)(G_SIGNAL_MATCH_FUNC | \
-                                                 G_SIGNAL_MATCH_DATA), 0)
-
-// child is not a member of GTK_BUTTON() any more in GTK+ 2.0
-#define BUTTON_CHILD(w) GTK_BIN((w))->child
-
-// event_window has disappeared from GtkToggleButton in GTK+ 2.0
-#define TOGGLE_BUTTON_EVENT_WIN(w) GTK_BUTTON((w))->event_window
-
-// gtk_editable_{copy|cut|paste}_clipboard() had an extra argument under
-// previous GTK+ versions but no more
-#if defined(__WXGTK20__) || (GTK_MINOR_VERSION > 0)
-    #define DUMMY_CLIPBOARD_ARG
-#else
-    #define DUMMY_CLIPBOARD_ARG  ,0
-#endif
-
-// _GtkEditable is now private
-#define GET_EDITABLE_POS(w) gtk_editable_get_position(GTK_EDITABLE(w))
-#define SET_EDITABLE_POS(w, pos) \
-    gtk_editable_set_position(GTK_EDITABLE(w), (pos))
-
-// this GtkNotebook struct field has been renamed
-#define NOTEBOOK_PANEL(nb)  GTK_NOTEBOOK(nb)->event_window
-
-#define SCROLLBAR_CBACK_ARG
-#define GET_SCROLL_TYPE(w)   GTK_SCROLL_JUMP
-
 // translate a GTK+ scroll type to a wxEventType
 inline wxEventType GtkScrollTypeToWx(guint scrollType)
 {
diff -ur ../wxWidgets/src/gtk/bmpbuttn.cpp ./src/gtk/bmpbuttn.cpp
--- ../wxWidgets/src/gtk/bmpbuttn.cpp	2006-01-22 16:30:05.000000000 -0800
+++ ./src/gtk/bmpbuttn.cpp	2006-01-23 21:05:40.000000000 -0800
@@ -192,7 +192,7 @@
 
 void wxBitmapButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
-    if ( !BUTTON_CHILD(m_widget) )
+    if (!GTK_BIN(m_widget)->child)
         return;
 
     wxButton::DoApplyWidgetStyle(style);
@@ -220,7 +220,7 @@
     GdkBitmap *mask = (GdkBitmap *) NULL;
     if (the_one.GetMask()) mask = the_one.GetMask()->GetBitmap();
 
-    GtkWidget *child = BUTTON_CHILD(m_widget);
+    GtkWidget *child = GTK_BIN(m_widget)->child;
     if (child == NULL)
     {
         // initial bitmap
diff -ur ../wxWidgets/src/gtk/button.cpp ./src/gtk/button.cpp
--- ../wxWidgets/src/gtk/button.cpp	2006-01-22 16:30:05.000000000 -0800
+++ ./src/gtk/button.cpp	2006-01-23 19:52:07.000000000 -0800
@@ -145,8 +145,8 @@
     else
 #endif
     {
-        if (GTK_IS_MISC(BUTTON_CHILD(m_widget)))
-            gtk_misc_set_alignment (GTK_MISC (BUTTON_CHILD (m_widget)),
+        if (GTK_IS_MISC(GTK_BIN(m_widget)->child))
+            gtk_misc_set_alignment(GTK_MISC(GTK_BIN(m_widget)->child),
                                 x_alignment, y_alignment);
     }
 
@@ -255,7 +255,7 @@
     if ( !wxControl::Enable( enable ) )
         return FALSE;
 
-    gtk_widget_set_sensitive( BUTTON_CHILD(m_widget), enable );
+    gtk_widget_set_sensitive(GTK_BIN(m_widget)->child, enable);
 
     return TRUE;
 }
@@ -268,7 +268,7 @@
 void wxButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     gtk_widget_modify_style(m_widget, style);
-    gtk_widget_modify_style(BUTTON_CHILD(m_widget), style);
+    gtk_widget_modify_style(GTK_BIN(m_widget)->child, style);
 }
 
 wxSize wxButton::DoGetBestSize() const
diff -ur ../wxWidgets/src/gtk/checkbox.cpp ./src/gtk/checkbox.cpp
--- ../wxWidgets/src/gtk/checkbox.cpp	2006-01-22 16:30:05.000000000 -0800
+++ ./src/gtk/checkbox.cpp	2006-01-23 19:59:31.000000000 -0800
@@ -156,7 +156,7 @@
     else
     {
         m_widgetCheckbox = gtk_check_button_new_with_label("");
-        m_widgetLabel = BUTTON_CHILD( m_widgetCheckbox );
+        m_widgetLabel = GTK_BIN(m_widgetCheckbox)->child;
         m_widget = m_widgetCheckbox;
     }
     SetLabel( label );
@@ -236,7 +236,7 @@
 
 bool wxCheckBox::IsOwnGtkWindow( GdkWindow *window )
 {
-    return window == TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    return window == GTK_BUTTON(m_widget)->event_window;
 }
 
 void wxCheckBox::OnInternalIdle()
@@ -244,7 +244,7 @@
     wxCursor cursor = m_cursor;
     if (g_globalCursor.Ok()) cursor = g_globalCursor;
 
-    GdkWindow *event_window = TOGGLE_BUTTON_EVENT_WIN(m_widgetCheckbox);
+    GdkWindow *event_window = GTK_BUTTON(m_widgetCheckbox)->event_window;
     if ( event_window && cursor.Ok() )
     {
         /* I now set the cursor the anew in every OnInternalIdle call
diff -ur ../wxWidgets/src/gtk/choice.cpp ./src/gtk/choice.cpp
--- ../wxWidgets/src/gtk/choice.cpp	2006-01-22 16:30:05.000000000 -0800
+++ ./src/gtk/choice.cpp	2006-01-23 19:40:54.000000000 -0800
@@ -334,7 +334,7 @@
         if (bin->child)
             label = GTK_LABEL(bin->child);
         if (!label)
-            label = GTK_LABEL( BUTTON_CHILD(m_widget) );
+            label = GTK_LABEL(GTK_BIN(m_widget)->child);
 
         wxASSERT_MSG( label != NULL , wxT("wxChoice: invalid label") );
 
@@ -373,7 +373,7 @@
             if (bin->child)
                 label = GTK_LABEL(bin->child);
             if (!label)
-                label = GTK_LABEL( BUTTON_CHILD(m_widget) );
+                label = GTK_LABEL(GTK_BIN(m_widget)->child);
 
             wxASSERT_MSG( label != NULL , wxT("wxChoice: invalid label") );
 
@@ -402,7 +402,7 @@
             if (bin->child)
                 label = GTK_LABEL(bin->child);
             if (!label)
-                label = GTK_LABEL( BUTTON_CHILD(m_widget) );
+                label = GTK_LABEL(GTK_BIN(m_widget)->child);
 
             wxASSERT_MSG( label != NULL , wxT("wxChoice: invalid label") );
 
@@ -475,7 +475,7 @@
         if (bin->child)
             label = bin->child;
         if (!label)
-            label = BUTTON_CHILD(m_widget);
+            label = GTK_BIN(m_widget)->child;
 
         gtk_widget_modify_style( label, style );
 
diff -ur ../wxWidgets/src/gtk/combobox.cpp ./src/gtk/combobox.cpp
--- ../wxWidgets/src/gtk/combobox.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/combobox.cpp	2006-01-23 20:04:26.000000000 -0800
@@ -691,7 +691,7 @@
     wxCHECK_RET( m_widget != NULL, wxT("invalid combobox") );
 
     GtkWidget *entry = GTK_COMBO(m_widget)->entry;
-    gtk_editable_copy_clipboard( GTK_EDITABLE(entry) DUMMY_CLIPBOARD_ARG );
+    gtk_editable_copy_clipboard(GTK_EDITABLE(entry));
 }
 
 void wxComboBox::Cut()
@@ -699,7 +699,7 @@
     wxCHECK_RET( m_widget != NULL, wxT("invalid combobox") );
 
     GtkWidget *entry = GTK_COMBO(m_widget)->entry;
-    gtk_editable_cut_clipboard( GTK_EDITABLE(entry) DUMMY_CLIPBOARD_ARG );
+    gtk_editable_cut_clipboard(GTK_EDITABLE(entry));
 }
 
 void wxComboBox::Paste()
@@ -707,7 +707,7 @@
     wxCHECK_RET( m_widget != NULL, wxT("invalid combobox") );
 
     GtkWidget *entry = GTK_COMBO(m_widget)->entry;
-    gtk_editable_paste_clipboard( GTK_EDITABLE(entry) DUMMY_CLIPBOARD_ARG);
+    gtk_editable_paste_clipboard(GTK_EDITABLE(entry));
 }
 
 void wxComboBox::Undo()
@@ -780,7 +780,7 @@
 
 long wxComboBox::GetInsertionPoint() const
 {
-    return (long) GET_EDITABLE_POS( GTK_COMBO(m_widget)->entry );
+    return (long) gtk_editable_get_position(GTK_EDITABLE(GTK_COMBO(m_widget)->entry));
 }
 
 wxTextPos wxComboBox::GetLastPosition() const
diff -ur ../wxWidgets/src/gtk/notebook.cpp ./src/gtk/notebook.cpp
--- ../wxWidgets/src/gtk/notebook.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/notebook.cpp	2006-01-23 20:08:57.000000000 -0800
@@ -830,7 +830,7 @@
 bool wxNotebook::IsOwnGtkWindow( GdkWindow *window )
 {
     return ((m_widget->window == window) ||
-            (NOTEBOOK_PANEL(m_widget) == window));
+            GTK_NOTEBOOK(m_widget)->event_window == window);
 }
 
 // static
diff -ur ../wxWidgets/src/gtk/radiobox.cpp ./src/gtk/radiobox.cpp
--- ../wxWidgets/src/gtk/radiobox.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/radiobox.cpp	2006-01-23 20:30:25.000000000 -0800
@@ -381,7 +381,7 @@
 
     wxCHECK_MSG( node, wxEmptyString, wxT("radiobox wrong index") );
 
-    GtkLabel *label = GTK_LABEL( BUTTON_CHILD(node->GetData()) );
+    GtkLabel *label = GTK_LABEL(GTK_BIN(node->GetData())->child);
 
     wxString str( wxGTK_CONV_BACK( gtk_label_get_text(label) ) );
 
@@ -403,7 +403,7 @@
 
     wxCHECK_RET( node, wxT("radiobox wrong index") );
 
-    GtkLabel *g_label = GTK_LABEL( BUTTON_CHILD(node->GetData()) );
+    GtkLabel *g_label = GTK_LABEL(GTK_BIN(node->GetData())->child);
 
     gtk_label_set( g_label, wxGTK_CONV( label ) );
 }
@@ -417,7 +417,7 @@
     while (node)
     {
         GtkButton *button = GTK_BUTTON( node->GetData() );
-        GtkLabel *label = GTK_LABEL( BUTTON_CHILD(button) );
+        GtkLabel *label = GTK_LABEL(GTK_BIN(button)->child);
 
         gtk_widget_set_sensitive( GTK_WIDGET(button), enable );
         gtk_widget_set_sensitive( GTK_WIDGET(label), enable );
@@ -436,7 +436,7 @@
     wxCHECK_MSG( node, false, wxT("radiobox wrong index") );
 
     GtkButton *button = GTK_BUTTON( node->GetData() );
-    GtkLabel *label = GTK_LABEL( BUTTON_CHILD(button) );
+    GtkLabel *label = GTK_LABEL(GTK_BIN(button)->child);
 
     gtk_widget_set_sensitive( GTK_WIDGET(button), enable );
     gtk_widget_set_sensitive( GTK_WIDGET(label), enable );
@@ -531,7 +531,7 @@
         GtkWidget *widget = GTK_WIDGET( node->GetData() );
 
         gtk_widget_modify_style( widget, style );
-        gtk_widget_modify_style( BUTTON_CHILD(node->GetData()), style );
+        gtk_widget_modify_style(GTK_BIN(widget)->child, style);
 
         node = node->GetNext();
     }
diff -ur ../wxWidgets/src/gtk/radiobut.cpp ./src/gtk/radiobut.cpp
--- ../wxWidgets/src/gtk/radiobut.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/radiobut.cpp	2006-01-23 19:59:54.000000000 -0800
@@ -125,7 +125,7 @@
 {
     wxCHECK_RET( m_widget != NULL, wxT("invalid radiobutton") );
 
-    GTKSetLabelForLabel(GTK_LABEL(BUTTON_CHILD(m_widget)), label);
+    GTKSetLabelForLabel(GTK_LABEL(GTK_BIN(m_widget)->child), label);
 }
 
 void wxRadioButton::SetValue( bool val )
@@ -163,7 +163,7 @@
     if ( !wxControl::Enable( enable ) )
         return FALSE;
 
-    gtk_widget_set_sensitive( BUTTON_CHILD(m_widget), enable );
+    gtk_widget_set_sensitive(GTK_BIN(m_widget)->child, enable);
 
     return TRUE;
 }
@@ -171,12 +171,12 @@
 void wxRadioButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     gtk_widget_modify_style(m_widget, style);
-    gtk_widget_modify_style(BUTTON_CHILD(m_widget), style);
+    gtk_widget_modify_style(GTK_BIN(m_widget)->child, style);
 }
 
 bool wxRadioButton::IsOwnGtkWindow( GdkWindow *window )
 {
-    return window == TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    return window == GTK_BUTTON(m_widget)->event_window;
 }
 
 void wxRadioButton::OnInternalIdle()
@@ -184,7 +184,7 @@
     wxCursor cursor = m_cursor;
     if (g_globalCursor.Ok()) cursor = g_globalCursor;
 
-    GdkWindow *win = TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    GdkWindow *win = GTK_BUTTON(m_widget)->event_window;
     if ( win && cursor.Ok())
     {
         /* I now set the cursor the anew in every OnInternalIdle call
diff -ur ../wxWidgets/src/gtk/scrolbar.cpp ./src/gtk/scrolbar.cpp
--- ../wxWidgets/src/gtk/scrolbar.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/scrolbar.cpp	2006-01-23 20:11:55.000000000 -0800
@@ -42,7 +42,6 @@
 
 extern "C" {
 static void gtk_scrollbar_callback( GtkAdjustment *adjust,
-                                    SCROLLBAR_CBACK_ARG
                                     wxScrollBar *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -55,7 +54,7 @@
 
     win->m_oldPos = adjust->value;
 
-    wxEventType command = GtkScrollTypeToWx(GET_SCROLL_TYPE(win->m_widget));
+    wxEventType command = GtkScrollTypeToWx(GTK_SCROLL_JUMP);
 
     double dvalue = adjust->value;
     int value = (int)(dvalue < 0 ? dvalue - 0.5 : dvalue + 0.5);
diff -ur ../wxWidgets/src/gtk/slider.cpp ./src/gtk/slider.cpp
--- ../wxWidgets/src/gtk/slider.cpp	2006-01-22 16:30:06.000000000 -0800
+++ ./src/gtk/slider.cpp	2006-01-23 20:09:43.000000000 -0800
@@ -79,7 +79,6 @@
 
 extern "C" {
 static void gtk_slider_callback( GtkAdjustment *adjust,
-                                 SCROLLBAR_CBACK_ARG
                                  wxSlider *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
diff -ur ../wxWidgets/src/gtk/textctrl.cpp ./src/gtk/textctrl.cpp
--- ../wxWidgets/src/gtk/textctrl.cpp	2006-01-22 16:30:07.000000000 -0800
+++ ./src/gtk/textctrl.cpp	2006-01-23 20:07:30.000000000 -0800
@@ -830,7 +830,7 @@
         gtk_editable_delete_selection( GTK_EDITABLE(m_text) );
 
         // This moves the cursor pos to behind the inserted text.
-        gint len = GET_EDITABLE_POS(m_text);
+        gint len = gtk_editable_get_position(GTK_EDITABLE(m_text));
 
 #if wxUSE_UNICODE
         wxCharBuffer buffer( wxConvUTF8.cWX2MB( text ) );
@@ -977,7 +977,7 @@
         gtk_entry_set_position( GTK_ENTRY(m_text), (int)pos );
 
         // Bring editable's cursor uptodate. Bug in GTK.
-        SET_EDITABLE_POS(m_text, (guint32)pos);
+        gtk_editable_set_position(GTK_EDITABLE(m_text), int(pos));
     }
 }
 
@@ -1191,7 +1191,7 @@
     }
     else
     {
-        return (long) GET_EDITABLE_POS(m_text);
+        return (long) gtk_editable_get_position(GTK_EDITABLE(m_text));
     }
 }
 
@@ -1252,7 +1252,7 @@
     if (m_windowStyle & wxTE_MULTILINE)
         g_signal_emit_by_name (m_text, "cut-clipboard");
     else
-        gtk_editable_cut_clipboard(GTK_EDITABLE(m_text) DUMMY_CLIPBOARD_ARG);
+        gtk_editable_cut_clipboard(GTK_EDITABLE(m_text));
 }
 
 void wxTextCtrl::Copy()
@@ -1262,7 +1262,7 @@
     if (m_windowStyle & wxTE_MULTILINE)
         g_signal_emit_by_name (m_text, "copy-clipboard");
     else
-        gtk_editable_copy_clipboard(GTK_EDITABLE(m_text) DUMMY_CLIPBOARD_ARG);
+        gtk_editable_copy_clipboard(GTK_EDITABLE(m_text));
 }
 
 void wxTextCtrl::Paste()
@@ -1272,7 +1272,7 @@
     if (m_windowStyle & wxTE_MULTILINE)
         g_signal_emit_by_name (m_text, "paste-clipboard");
     else
-        gtk_editable_paste_clipboard(GTK_EDITABLE(m_text) DUMMY_CLIPBOARD_ARG);
+        gtk_editable_paste_clipboard(GTK_EDITABLE(m_text));
 }
 
 // Undo/redo
diff -ur ../wxWidgets/src/gtk/tglbtn.cpp ./src/gtk/tglbtn.cpp
--- ../wxWidgets/src/gtk/tglbtn.cpp	2006-01-22 16:30:07.000000000 -0800
+++ ./src/gtk/tglbtn.cpp	2006-01-23 20:00:18.000000000 -0800
@@ -136,7 +136,7 @@
     GdkBitmap *mask = (GdkBitmap *) NULL;
     if (m_bitmap.GetMask()) mask = m_bitmap.GetMask()->GetBitmap();
 
-    GtkWidget *child = BUTTON_CHILD(m_widget);
+    GtkWidget *child = GTK_BIN(m_widget)->child;
     if (child == NULL)
     {
         // initial bitmap
@@ -156,7 +156,7 @@
     if (!wxControl::Enable(enable))
         return false;
 
-    gtk_widget_set_sensitive(BUTTON_CHILD(m_widget), enable);
+    gtk_widget_set_sensitive(GTK_BIN(m_widget)->child, enable);
 
     return true;
 }
@@ -164,12 +164,12 @@
 void wxToggleBitmapButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     gtk_widget_modify_style(m_widget, style);
-    gtk_widget_modify_style(BUTTON_CHILD(m_widget), style);
+    gtk_widget_modify_style(GTK_BIN(m_widget)->child, style);
 }
 
 bool wxToggleBitmapButton::IsOwnGtkWindow(GdkWindow *window)
 {
-    return window == TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    return window == GTK_BUTTON(m_widget)->event_window;
 }
 
 void wxToggleBitmapButton::OnInternalIdle()
@@ -179,7 +179,7 @@
     if (g_globalCursor.Ok())
         cursor = g_globalCursor;
 
-    GdkWindow *win = TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    GdkWindow *win = GTK_BUTTON(m_widget)->event_window;
     if ( win && cursor.Ok() )
     {
       /* I now set the cursor the anew in every OnInternalIdle call
@@ -289,7 +289,7 @@
 
     wxControl::SetLabel(label);
 
-    gtk_label_set(GTK_LABEL(BUTTON_CHILD(m_widget)), wxGTK_CONV( GetLabel() ) );
+    gtk_label_set(GTK_LABEL(GTK_BIN(m_widget)->child), wxGTK_CONV(GetLabel()));
 }
 
 bool wxToggleButton::Enable(bool enable /*=true*/)
@@ -297,7 +297,7 @@
     if (!wxControl::Enable(enable))
         return false;
 
-    gtk_widget_set_sensitive(BUTTON_CHILD(m_widget), enable);
+    gtk_widget_set_sensitive(GTK_BIN(m_widget)->child, enable);
 
     return true;
 }
@@ -305,12 +305,12 @@
 void wxToggleButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     gtk_widget_modify_style(m_widget, style);
-    gtk_widget_modify_style(BUTTON_CHILD(m_widget), style);
+    gtk_widget_modify_style(GTK_BIN(m_widget)->child, style);
 }
 
 bool wxToggleButton::IsOwnGtkWindow(GdkWindow *window)
 {
-    return window == TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    return window == GTK_BUTTON(m_widget)->event_window;
 }
 
 void wxToggleButton::OnInternalIdle()
@@ -320,7 +320,7 @@
     if (g_globalCursor.Ok())
         cursor = g_globalCursor;
 
-    GdkWindow *win = TOGGLE_BUTTON_EVENT_WIN(m_widget);
+    GdkWindow *win = GTK_BUTTON(m_widget)->event_window;
     if ( win && cursor.Ok() )
     {
       /* I now set the cursor the anew in every OnInternalIdle call
diff -ur ../wxWidgets/src/gtk/window.cpp ./src/gtk/window.cpp
--- ../wxWidgets/src/gtk/window.cpp	2006-01-22 16:30:07.000000000 -0800
+++ ./src/gtk/window.cpp	2006-01-23 20:28:16.000000000 -0800
@@ -2016,7 +2016,6 @@
 
 extern "C" {
 static void gtk_window_vscroll_callback( GtkAdjustment *adjust,
-                                         SCROLLBAR_CBACK_ARG
                                          wxWindowGTK *win )
 {
     DEBUG_MAIN_THREAD
@@ -2033,7 +2032,7 @@
 
     win->m_oldVerticalPos = adjust->value;
 
-    wxEventType         command = GtkScrollWinTypeToWx(GET_SCROLL_TYPE(sw->vscrollbar));
+    wxEventType command = GtkScrollWinTypeToWx(GTK_SCROLL_JUMP);
 
     int value = (int)(adjust->value+0.5);
 
@@ -2049,7 +2048,6 @@
 
 extern "C" {
 static void gtk_window_hscroll_callback( GtkAdjustment *adjust,
-                                         SCROLLBAR_CBACK_ARG
                                          wxWindowGTK *win )
 {
     DEBUG_MAIN_THREAD
@@ -2063,7 +2061,7 @@
     float diff = adjust->value - win->m_oldHorizontalPos;
     if (fabs(diff) < 0.2) return;
 
-    wxEventType         command = GtkScrollWinTypeToWx(GET_SCROLL_TYPE(sw->hscrollbar));
+    wxEventType command = GtkScrollWinTypeToWx(GTK_SCROLL_JUMP);
 
     win->m_oldHorizontalPos = adjust->value;
 
diff -ur ../wxWidgets/src/gtk/wx_gtk_vmsjackets.c ./src/gtk/wx_gtk_vmsjackets.c
--- ../wxWidgets/src/gtk/wx_gtk_vmsjackets.c	2006-01-22 16:30:07.000000000 -0800
+++ ./src/gtk/wx_gtk_vmsjackets.c	2006-01-23 19:56:36.000000000 -0800
@@ -1854,7 +1854,7 @@
 					   GtkSignalFunc	func,
 					   gpointer		data)
 {
-   gtk_signal_disconnect_by_func	  (object,
+    g_signal_handlers_disconnect_by_func  (object,
 					   func,
 					   data);
 }

 	  	 

Index: include/wx/evtloop.h
===================================================================
--- include/wx/evtloop.h	(revision 62679)
+++ include/wx/evtloop.h	(working copy)
@@ -103,6 +103,10 @@
     // return true if any events are available
     virtual bool Pending() const = 0;
 
+    // return true if any 'priority' messages are queued.  On MSW, this
+    // means all messages excluding WM_PAINT and WM_TIMER.
+    virtual bool PendingPriorityMessages() const;
+
     // dispatch a single event, return false if we should exit from the loop
     virtual bool Dispatch() = 0;
 
Index: include/wx/msw/evtloop.h
===================================================================
--- include/wx/msw/evtloop.h	(revision 62679)
+++ include/wx/msw/evtloop.h	(working copy)
@@ -29,6 +29,7 @@
 
     // implement base class pure virtuals
     virtual bool Pending() const;
+    virtual bool PendingPriorityMessages() const;
 
 protected:
     // get the next message from queue and return true or return false if we
Index: src/common/evtloopcmn.cpp
===================================================================
--- src/common/evtloopcmn.cpp	(revision 62679)
+++ src/common/evtloopcmn.cpp	(working copy)
@@ -81,6 +81,12 @@
     return YieldFor(wxEVT_CATEGORY_ALL);
 }
 
+bool 
+wxEventLoopBase::PendingPriorityMessages() const
+{
+    return Pending();
+}
+
 // wxEventLoopManual is unused in the other ports
 #if defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXDFB__) || (defined(__UNIX__) && wxUSE_BASE)
 
@@ -147,7 +153,7 @@
                 // Pending() returns true, do process them
                 if ( m_shouldExit )
                 {
-                    while ( Pending() )
+                    while ( PendingPriorityMessages() )
                         ProcessEvents();
 
                     break;
Index: src/msw/evtloop.cpp
===================================================================
--- src/msw/evtloop.cpp	(revision 62679)
+++ src/msw/evtloop.cpp	(working copy)
@@ -77,6 +77,11 @@
     return ::PeekMessage(&msg, 0, 0, 0, PM_NOREMOVE) != 0;
 }
 
+bool wxMSWEventLoopBase::PendingPriorityMessages() const
+{
+    return (0 != ::GetQueueStatus(QS_ALLINPUT & ~(QS_TIMER | QS_PAINT)));
+}
+
 bool wxMSWEventLoopBase::GetNextMessage(WXMSG* msg)
 {
     const BOOL rc = ::GetMessage(msg, NULL, 0, 0);

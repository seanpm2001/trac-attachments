--- include/wx/weakref-svn.h	2008-01-13 18:10:10.000000000 +0100
+++ include/wx/weakref.h	2008-01-13 18:13:04.000000000 +0100
@@ -191,7 +191,7 @@
     template <class TDerived>
     wxWeakRef(TDerived* pobj)
     {
-        Assign(pobj);
+        this->Assign(pobj);
     }
 
     template <class TDerived>
@@ -207,14 +207,16 @@
         return *this;
     }
 
-    virtual ~wxWeakRef() { Release(); }
+    virtual ~wxWeakRef() { this->Release(); }
 
     // Smart pointer functions
-    T& operator*() const { return *m_pobj; }
-    T* operator->() const { return m_pobj; }
+    T& operator*() const { return *this->m_pobj; }
+    T* operator->() const { return this->m_pobj; }
 
-    T* get() const { return m_pobj; }
+    operator T* (){ return this->m_pobj; }
+    T* get() const { return this->m_pobj; }
 
+    /*
     // test for pointer validity: defining conversion to unspecified_bool_type
     // and not more obvious bool to avoid implicit conversions to integer types
     typedef T *(wxWeakRef<T>::*unspecified_bool_type)() const;
@@ -222,6 +224,7 @@
     {
         return this->m_pobj ? &wxWeakRef<T>::get : NULL;
     }
+    */
 };
 
 
@@ -245,10 +248,10 @@
     T* operator -> (){ wxASSERT(this->m_pobj); return m_pobj; }
     T* operator = (T* pobj) { Assign(pobj); return m_pobj; }
 
+    operator T* (){ return this->m_pobj; }
     T* get(){ return this->m_pobj; }
 
-    // operator T* (){ return this->m_pobj; }
-
+    /*
     // test for pointer validity: defining conversion to unspecified_bool_type
     // and not more obvious bool to avoid implicit conversions to integer types
     typedef T *(wxWeakRef<T>::*unspecified_bool_type)() const;
@@ -259,6 +262,7 @@
 
     // Assign from another weak ref, point to same object
     T* operator = (const wxWeakRef<T> &wr) { Assign( wr.get() ); return this->m_pobj; }
+    */
 
     void Release()
     {
@@ -300,11 +304,6 @@
         }
     }
 
-    void AssignCopy(const wxWeakRefDynamic& wr)
-    {
-        Assign(wr.m_pobj);
-    }
-
     virtual void OnObjectDestroy()
     {
         wxASSERT_MSG( m_pobj, "tracked object should have removed us itself" );
@@ -323,3 +322,5 @@
 typedef wxWeakRef<wxWindow>      wxWindowRef;
 
 #endif // _WX_WEAKREF_H_
+
+
--- include/wx/tracker-svn.h	2008-01-13 17:53:47.000000000 +0100
+++ include/wx/tracker.h	2008-01-13 18:00:42.000000000 +0100
@@ -13,7 +13,7 @@
 
 #include "wx/defs.h"
 
-class wxEventConnectionRef;
+struct wxEventConnectionRef;
 
 // This class represents an object tracker and is stored in a linked list
 // in the tracked object. It is only used in one of its derived forms.
@@ -76,9 +76,10 @@
 protected:
     wxTrackerNode *m_first;
 
-    DECLARE_NO_COPY_CLASS(wxTrackable)
+    // It is OK to copy this class (as part of another class). However, we should not 
+    // copy the reference list (which implicit C++ copy would do).
+    wxTrackable& operator = (const wxTrackable& WXUNUSED(other)) { return *this; }
 };
 
 #endif // _WX_TRACKER_H_
 
-

 	  	 

--- include/wx/event-svn.h	2008-01-25 17:21:29.000000000 +0100
+++ include/wx/event.h	2008-01-25 17:26:01.000000000 +0100
@@ -2102,10 +2102,18 @@
 // event handler and related classes
 // ============================================================================
 
-// for backwards compatibility and to prevent eVC 4 for ARM from crashing with
+typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
+
+#if !defined(__WXWINCE__) && (!defined(WXWIN_COMPATIBILITY_2_6) || WXWIN_COMPATIBILITY_2_6==0)
+	// The default case. wxObjectEventFunction will be a wxEvtHandler member function
+	// (contradicting its name). 
+	typedef wxEventFunction wxObjectEventFunction;
+#else
+    // For backwards compatibility and to prevent eVC 4 for ARM from crashing with
 // internal compiler error when compiling wx, we define wxObjectEventFunction
-// as a wxObject method even though it can only be a wxEvtHandler one
+    // as a wxObject method even though it can only be a wxEvtHandler one.
 typedef void (wxObject::*wxObjectEventFunction)(wxEvent&);
+#endif 
 
 // struct containing the members common to static and dynamic event tables
 // entries
@@ -2263,7 +2271,10 @@
 // wxEvtHandler: the base class for all objects handling wxWidgets events
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_BASE wxEvtHandler : public wxObject, public wxTrackable
+class WXDLLIMPEXP_BASE wxEvtHandler : public wxObject
+#if wxUSE_WEAKREF==1
+    , public wxTrackable
+#endif    
 {
 public:
     wxEvtHandler();
@@ -2363,7 +2374,9 @@
 
     // Avoid problems at exit by cleaning up static hash table gracefully
     void ClearEventHashTable() { GetEventHashTable().Clear(); }
+#if wxUSE_WEAKREF==1
     void OnSinkDestroyed( wxEvtHandler *sink );
+#endif     
 
 private:
     static const wxEventTableEntry sm_eventTableEntries[];
@@ -2430,13 +2443,16 @@
     virtual void DoSetClientData( void *data );
     virtual void *DoGetClientData() const;
 
+#if wxUSE_WEAKREF==1
     // Search tracker objects for event connection with this sink
     wxEventConnectionRef *FindRefInTrackerList(wxEvtHandler *eventSink);
+#endif     
 
 private:
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxEvtHandler)
 };
 
+#if wxUSE_WEAKREF==1
 // ----------------------------------------------------------------------------
 // wxEventConnectionRef represents all connections between two event handlers
 // and enables automatic disconnect when an event handler sink goes out of
@@ -2485,6 +2501,7 @@
 
     DECLARE_NO_ASSIGN_CLASS(wxEventConnectionRef)
 };
+#endif // wxUSE_WEAKREF==1
 
 // Post a message to the given eventhandler which will be processed during the
 // next event loop iteration
@@ -2495,8 +2512,6 @@
     dest->AddPendingEvent(event);
 }
 
-typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
-
 #define wxEventHandler(func) \
     (wxObjectEventFunction)wxStaticCastEvent(wxEventFunction, &func)
 
--- include/wx/setup_inc-svn.h	2008-01-25 17:41:35.000000000 +0100
+++ include/wx/setup_inc.h	2008-01-25 17:42:48.000000000 +0100
@@ -230,6 +230,17 @@
 // Recommended setting: 0 unless you do plan to develop MT applications
 #define wxUSE_THREADS 1
 
+// Set wxUSE_WEAKREF to 1 t support use of weak references to common classes
+// in wxWidgets (wxWeakRef<T>). Set to 0 if your compiler has problems with
+// the template-based implementation (Embedded Visual C 4  for ARM has a bug 
+// in this area, Visual C compiler options "/vmm /vmg" may help then). 
+// 
+// Default is 1
+//
+// Recommended setting: 1
+#define wxUSE_WEAKREF 1
+
 // If enabled, compiles wxWidgets streams classes
 //
 // wx stream classes are used for image IO, process IO redirection, network
--- include/wx/chkconf-svn.h	2008-01-25 17:50:43.000000000 +0100
+++ include/wx/chkconf.h	2008-01-25 18:01:22.000000000 +0100
@@ -61,6 +61,12 @@
 #   define wxUSE_EXCEPTIONS 0
 #endif /* VC++ without exceptions support */
 
+/* 
+    Use wxWeakRef by default. 
+ */
+#ifndef wxUSE_WEAKREF
+    #define wxUSE_WEAKREF 1 
+#endif 
 
 /*
    Section 1a: tests for non GUI features.
--- src/common/event-svn.cpp	2008-01-25 17:36:19.000000000 +0100
+++ src/common/event.cpp	2008-01-25 17:35:08.000000000 +0100
@@ -1053,6 +1053,7 @@
         {
             wxDynamicEventTableEntry *entry = (wxDynamicEventTableEntry*)*it;
 
+#if wxUSE_WEAKREF==1
             // Remove ourselves from sink destructor notifications
             // (this has usually been been done, in wxTrackable destructor)
             wxEvtHandler *eventSink = entry->m_eventSink;
@@ -1066,6 +1067,7 @@
                     delete evtConnRef;
                 }
             }
+#endif // wxUSE_WEAKREF==1
 
             if (entry->m_callbackUserData)
                 delete entry->m_callbackUserData;
@@ -1367,6 +1369,7 @@
     // Insert at the front of the list so most recent additions are found first
     m_dynamicEvents->Insert( (wxObject*) entry );
 
+#if wxUSE_WEAKREF==1
     // Make sure we get to know when a sink is destroyed
     if ( eventSink )
     {
@@ -1376,6 +1379,7 @@
         else
             evtConnRef = new wxEventConnectionRef(this, eventSink);
     }
+#endif // wxUSE_WEAKREF==1
 }
 
 bool wxEvtHandler::Disconnect( int id, int lastId, wxEventType eventType,
@@ -1386,6 +1390,7 @@
     if (!m_dynamicEvents)
         return false;
 
+#if wxUSE_WEAKREF==1
     // Remove connection from tracker node (wxEventConnectionRef)
     if ( eventSink )
     {
@@ -1393,6 +1398,7 @@
         if ( evtConnRef )
             evtConnRef->DecRef();
     }
+#endif // wxUSE_WEAKREF==1
 
     wxList::compatibility_iterator node = m_dynamicEvents->GetFirst();
     while (node)
@@ -1484,6 +1490,7 @@
     return m_clientData;
 }
 
+#if wxUSE_WEAKREF==1
 // A helper to find an wxEventConnectionRef object
 wxEventConnectionRef *
 wxEvtHandler::FindRefInTrackerList(wxEvtHandler *eventSink)
@@ -1523,6 +1530,7 @@
         node = node_nxt;
     }
 }
+#endif // wxUSE_WEAKREF==1
 
 #endif // wxUSE_BASE
 

 	  	 

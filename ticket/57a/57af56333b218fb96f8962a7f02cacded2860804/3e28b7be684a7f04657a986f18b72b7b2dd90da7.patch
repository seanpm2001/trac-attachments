Index: include/wx/datetime.h
===================================================================
--- include/wx/datetime.h	(revision 72750)
+++ include/wx/datetime.h	(working copy)
@@ -1275,6 +1275,9 @@
     // get current time using thread-safe function
     static struct tm *GetTmNow(struct tm *tmstruct);
 
+    // time_t error code (-1)
+    static const time_t ms_ticks_err;
+
 private:
     // the current country - as it's the same for all program objects (unless
     // it runs on a _really_ big cluster system :-), this is a static member:
@@ -1781,7 +1784,7 @@
 #if (!(defined(__VISAGECPP__) && __IBMCPP__ >= 400))
 inline wxDateTime& wxDateTime::Set(time_t timet)
 {
-    if ( timet == (time_t)-1 )
+    if ( timet == ms_ticks_err )
     {
         m_time = wxInvalidDateTime.m_time;
     }
@@ -1867,7 +1870,7 @@
     wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
     if ( !IsInStdRange() )
     {
-        return (time_t)-1;
+        return ms_ticks_err;
     }
 
     return (time_t)((m_time / (long)TIME_T_FACTOR).ToLong()) + WX_TIME_BASE_OFFSET;
Index: interface/wx/datetime.h
===================================================================
--- interface/wx/datetime.h	(revision 72750)
+++ interface/wx/datetime.h	(working copy)
@@ -1583,6 +1583,13 @@
         @see Now(), wxGetUTCTimeMillis()
     */
     static wxDateTime UNow();
+
+    /**
+        time_t error code (-1)
+
+        @since 2.9.5
+    */
+    static const time_t ms_ticks_err;
 };
 
 /**
Index: src/common/datetime.cpp
===================================================================
--- src/common/datetime.cpp	(revision 72750)
+++ src/common/datetime.cpp	(working copy)
@@ -188,6 +188,8 @@
     { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 }
 };
 
+const time_t wxDateTime::ms_ticks_err = (time_t)-1;
+
 const long wxDateTime::TIME_T_FACTOR = 1000l;
 
 // ----------------------------------------------------------------------------
@@ -1111,7 +1113,7 @@
     struct tm tm2(tm);
     time_t timet = mktime(&tm2);
 
-    if ( timet == (time_t)-1 )
+    if ( timet == ms_ticks_err )
     {
         // mktime() rather unintuitively fails for Jan 1, 1970 if the hour is
         // less than timezone - try to make it work for this case
@@ -1366,7 +1368,7 @@
     wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     time_t time = GetTicks();
-    if ( time != (time_t)-1 )
+    if ( time != ms_ticks_err )
     {
         // use C RTL functions
         struct tm tmstruct;
@@ -2030,7 +2032,7 @@
 
     // use the C RTL for the dates in the standard range
     time_t timet = GetTicks();
-    if ( timet != (time_t)-1 )
+    if ( timet != ms_ticks_err )
     {
         struct tm tmstruct;
         tm *tm = wxLocaltime_r(&timet, &tmstruct);
Index: src/common/datetimefmt.cpp
===================================================================
--- src/common/datetimefmt.cpp	(revision 72750)
+++ src/common/datetimefmt.cpp	(working copy)
@@ -331,7 +331,7 @@
 #ifdef wxHAS_STRFTIME
     time_t time = GetTicks();
 
-    if ( (time != (time_t)-1) && !wxStrstr(format, wxT("%l"))
+    if ( (time != ms_ticks_err) && !wxStrstr(format, wxT("%l"))
 #ifdef __WINDOWS__
             && !wxStrstr(format, wxT("%z"))
 #endif
Index: src/common/filefn.cpp
===================================================================
--- src/common/filefn.cpp	(revision 72750)
+++ src/common/filefn.cpp	(working copy)
@@ -1642,7 +1642,7 @@
 {
     wxDateTime mtime;
     if ( !wxFileName(filename).GetTimes(NULL, &mtime, NULL) )
-        return (time_t)-1;
+        return wxDateTime::ms_ticks_err;
 
     return mtime.GetTicks();
 }

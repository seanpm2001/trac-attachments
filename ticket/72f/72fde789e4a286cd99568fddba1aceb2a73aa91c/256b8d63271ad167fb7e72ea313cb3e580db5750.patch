diff -Nru2 wxWidgets.orig/configure wxWidgets.new/configure
--- wxWidgets.orig/configure	2005-11-30 12:24:31.000000000 -0500
+++ wxWidgets.new/configure	2005-12-03 01:42:28.921875000 -0500
@@ -43642,5 +43642,5 @@
 
         USE_XRC=1
-        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc"
+        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc wxrc"
     fi
 fi
diff -Nru2 wxWidgets.orig/configure.in wxWidgets.new/configure.in
--- wxWidgets.orig/configure.in	2005-11-30 12:24:35.000000000 -0500
+++ wxWidgets.new/configure.in	2005-12-03 01:42:20.562500000 -0500
@@ -6561,5 +6561,5 @@
         AC_DEFINE(wxUSE_XRC)
         USE_XRC=1
-        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc"
+        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc wxrc"
     fi
 fi
diff -Nru2 wxWidgets.orig/docs/latex/wx/txrc.tex wxWidgets.new/docs/latex/wx/txrc.tex
--- wxWidgets.orig/docs/latex/wx/txrc.tex	2005-06-27 09:11:12.000000000 -0400
+++ wxWidgets.new/docs/latex/wx/txrc.tex	2005-12-03 01:44:50.187500000 -0500
@@ -422,23 +422,24 @@
 Using the {\tt -e} switch together with {\tt -c}, a C++ header file is written
 containing class definitions for the GUI windows defined in the XRC file.
-This code generation can make it easier to use XRC and automate program
-development.
-The classes can be used as basis for development, freeing the
-programmer from dealing with most of the XRC specifics (e.g. {\tt XRCCTRL}).
-
-For each top level window defined in the XRC file a C++ class definition is
-generated, containing as class members the named widgets of the window.
-A default constructor for each class is also generated. Inside the constructor 
-all XRC loading is done and all class members representing widgets are initialized. 
-
-A simple example will help understand how the scheme works. Suppose you have
-a XRC file defining a top level window {\tt TestWnd\_Base}, which subclasses {\tt wxFrame} (any 
-other class like {\tt wxDialog} will do also), and has subwidgets {\tt wxTextCtrl} A and {\tt wxButton} B.
-The XRC file and corresponding class definition in the header file will be something like:
+This code generation can automate program development by freeing the
+programmer from dealing with certain XRC specifics (e.g. {\tt XRCCTRL})
+and affording compile-time checking of control names.
+
+For each top-level window defined in the XRC file, a C++ class definition is
+generated.  The contructor loads the XRC and initializes all widgets in the window.
+Additional member functions are provided for accessing each widget object by name
+(instead of using {\tt XRCCTRL}) or retrieving numeric identifiers
+(instead of using {\tt XRCID}).
+
+A simple example will help understand how the scheme works. Suppose
+you have a XRC file defining a top level window {\tt test_window},
+which subclasses {\tt wxFrame} (any other class like {\tt wxDialog} 
+will do also) and has subwidgets {\tt wxTextCtrl} test_text and {\tt wxButton} 
+test_button.  The XRC file will be something like this:
 
 \begin{verbatim}
 <?xml version="1.0"?>
 <resource version="2.3.0.1">
-    <object class="wxFrame" name="TestWnd_Base">
+    <object class="wxFrame" name="test_window">
         <size>-1,-1</size>
         <title>Test</title>
@@ -446,10 +447,10 @@
             <orient>wxHORIZONTAL</orient>
             <object class="sizeritem">
-                <object class="wxTextCtrl" name="A">
-                    <label>Test label</label>
+                <object class="wxTextCtrl" name="test_text">
+                    <label>Test text</label>
                 </object>
             </object>
             <object class="sizeritem">
-                <object class="wxButton" name="B">
+                <object class="wxButton" name="test_button">
                     <label>Test button</label>
                 </object>
@@ -458,54 +459,89 @@
     </object>
 </resource>
+\end{verbatim}
 
+The generated header file will look something like this:
 
-class TestWnd_Base : public wxFrame {
-protected:
- wxTextCtrl* A;
- wxButton* B;
+\begin{verbatim}
+//
+// This file was automatically generated by wxrc, do not edit by hand.
+//
 
-private:
- void InitWidgetsFromXRC(){
-  wxXmlResource::Get()->LoadObject(this,NULL,"TestWnd","wxFrame");
-  A = XRCCTRL(*this,"A",wxTextCtrl);
-  B = XRCCTRL(*this,"B",wxButton);
- }
+#ifndef __resource_h__
+#define __resource_h__
+
+class test_window_base : public wxFrame {
 public:
-TestWnd::TestWnd(){
-  InitWidgetsFromXRC();
- }
+    test_window_base::test_window_base() {}
+    test_window_base::test_window_base(wxWindow * parent) {
+        ConstructFromXRC(parent);
+    }
+    void ConstructFromXRC(wxWindow * parent) {
+        ConstructFromXRC(this, parent);
+    }
+    void ConstructFromXRC(wxWindow * instance, wxWindow * parent) {
+        LoadObjectsFromXRC(instance, parent);
+        IndexObjectsFromXRC(instance);
+    }
+    void LoadObjectsFromXRC(wxWindow * parent) {
+        LoadObjectsFromXRC(this, parent);
+    }
+    void LoadObjectsFromXRC(wxWindow * instance, wxWindow * parent) {
+        wxXmlResource::Get()->LoadObject(instance, parent, "test_window", "wxFrame");
+    }
+    void IndexObjectsFromXRC(wxWindow * instance) {
+        m_test_text = XRCCTRL(*instance, "test_text", wxTextCtrl);
+        m_test_button = XRCCTRL(*instance, "test_button", wxButton);
+    }
+
+    wxTextCtrl* test_text() const { return m_test_text; }
+    wxButton* test_button() const { return m_test_button; }
+
+    static int test_text_id() { return XRCID("test_text"); }
+    static int test_button_id() { return XRCID("test_button"); }
+private:
+    wxTextCtrl* m_test_text;
+    wxButton* m_test_button;
 };
-\end{verbatim}
 
-The generated window class can be used as basis for the full window class. The
-class members which represent widgets may be accessed by name instead of using
-{\tt XRCCTRL} every time you wish to reference them (note that they are {\tt protected} class members), 
-though you must still use {\tt XRCID} to refer to widget IDs in the event
-table. 
+void 
+InitXmlResource();
+#endif // __resource_h__
+\end{verbatim}
 
-Example:
+Example usage:
 
 \begin{verbatim}
 #include "resource.h"
 
-class TestWnd : public TestWnd_Base {
-	public:
-		TestWnd(){
-			// A, B already initialised at this point
-			A->SetValue("Updated in TestWnd::TestWnd");
-			B->SetValue("Nice :)");
-		}
-		void OnBPressed(wxEvent& event){
-			Close();
-		}
-		DECLARE_EVENT_TABLE();
+class TestWnd : public test_window_base
+{
+public:
+    TestWnd(wxWindow * parent = NULL)
+        : test_window_base(parent)  // Non-default contructor builds dialog
+                                    // from XRC data
+    {
+        // Each control can be accessed using a member function
+        // corresponding to the control name given in the XRC.
+        test_text()->SetValue("Updated in TestWnd::TestWnd");
+        test_button()->SetValue("Nice :)");
+    }
+    void OnButtonPressed(wxEvent& event){
+        Close();
+    }
+    DECLARE_EVENT_TABLE();
 };
 
-BEGIN_EVENT_TABLE(TestWnd,TestWnd_Base)
-EVT_BUTTON(XRCID("B"),TestWnd::OnBPressed)
+// Define event map.  The numeric ID of each control can be
+// accessed using a static member function of the same XRC name
+// followed by "_id".
+BEGIN_EVENT_TABLE(TestWnd, test_window_base)
+EVT_BUTTON(test_button_id(), TestWnd::OnButtonPressed)
 END_EVENT_TABLE()
-
 \end{verbatim}
 
+Alternately, your window class may contain test_window_base rather than inherit from it.
+See the wxrc sample projects for details.
+
 \subsection{Adding new resource handlers}\label{newresourcehandlers}
 
diff -Nru2 wxWidgets.orig/samples/wxrc/resource.xrc wxWidgets.new/samples/wxrc/resource.xrc
--- wxWidgets.orig/samples/wxrc/resource.xrc	1969-12-31 19:00:00.000000000 -0500
+++ wxWidgets.new/samples/wxrc/resource.xrc	2005-12-03 01:43:19.765625000 -0500
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<resource version="2.3.0.1" xmlns="http://www.wxwidgets.org/wxxrc">
+    <object class="wxDialog" name="my_dialog" subclass="MyDialog">
+        <style>wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX</style>
+        <exstyle>wxWS_EX_BLOCK_EVENTS</exstyle>
+        <size>400,300</size>
+        <title>My Dialog</title>
+        <centered>1</centered>
+        <object class="wxBoxSizer">
+            <orient>wxVERTICAL</orient>
+            <object class="sizeritem">
+                <flag>wxALIGN_CENTER_HORIZONTAL|wxALL</flag>
+                <border>5</border>
+                <object class="wxButton" name="test_button">
+                    <label>Test</label>
+                </object>
+            </object>
+            <object class="sizeritem">
+                <flag>wxALIGN_CENTER_HORIZONTAL|wxALL</flag>
+                <border>5</border>
+                <object class="wxStaticText" name="test_label">
+                    <label>---</label>
+                </object>
+            </object>
+            <object class="sizeritem">
+                <flag>wxALIGN_CENTER_HORIZONTAL|wxALL</flag>
+                <border>5</border>
+                <object class="wxButton" name="wxID_OK">
+                    <label>OK</label>
+                </object>
+            </object>
+        </object>
+    </object>
+</resource>
diff -Nru2 wxWidgets.orig/samples/wxrc/wxrcdemo.bkl wxWidgets.new/samples/wxrc/wxrcdemo.bkl
--- wxWidgets.orig/samples/wxrc/wxrcdemo.bkl	1969-12-31 19:00:00.000000000 -0500
+++ wxWidgets.new/samples/wxrc/wxrcdemo.bkl	2005-12-03 01:43:19.765625000 -0500
@@ -0,0 +1,27 @@
+<?xml version="1.0" ?>
+<makefile>
+
+    <include file="../../build/bakefiles/common_samples.bkl"/>
+
+    <exe id="wxrcdemo" template="wx_sample" template_append="wx_append">
+        <sources>
+            wxrcdemo.cpp
+            resource.cpp
+        </sources>
+        <wx-lib>xrc</wx-lib>
+        <wx-lib>html</wx-lib>
+        <wx-lib>adv</wx-lib>
+        <wx-lib>core</wx-lib>
+        <wx-lib>xml</wx-lib>
+        <wx-lib>base</wx-lib>
+        <win32-res>wxrcdemo.rc</win32-res>
+    </exe>
+
+    <wx-data id="data">
+        <dstdir>$(BUILDDIR)/rc</dstdir>
+        <srcdir>$(SRCDIR)/rc</srcdir>
+        <files>
+        </files>
+    </wx-data>
+
+</makefile>
diff -Nru2 wxWidgets.orig/samples/wxrc/wxrcdemo.cpp wxWidgets.new/samples/wxrc/wxrcdemo.cpp
--- wxWidgets.orig/samples/wxrc/wxrcdemo.cpp	1969-12-31 19:00:00.000000000 -0500
+++ wxWidgets.new/samples/wxrc/wxrcdemo.cpp	2005-12-03 01:43:19.765625000 -0500
@@ -0,0 +1,151 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        samples/menu.cpp
+// Purpose:     XML resources sample: using "wxrc -c -e" utility
+// Author:      David Manura
+// Created:     2005-12-02
+// RCS-ID:      $Id: $
+// Copyright:   (c) David Manura
+// Licence:     wxWindows licence
+//
+// This example demonstrates the use of the wxrc utility to compile an
+// XRC file (resource.xrc) into C++ code (resource.cpp and
+// resource.h).  The generated resource.cpp contains the entire XRC
+// data in a format suitable for linking directly into your
+// executable, eliminating the need to distribute a separate XRC file
+// with your application.  The generated resource.h file contains
+// class definitions that simplify access to the XRC resources.  Use
+// of the functions in resource.h can be preferred over the XRCCTRL()
+// and XRCID() macros since the former affords compile-time (rather
+// than run-time) checking of control names and (less importantly)
+// would be slightly more efficient.
+//
+// wxrc is invoked as follows:
+//
+//   wxrc -c -e resource.cpp resource.xrc
+//
+/////////////////////////////////////////////////////////////////////////////
+
+// Include the standard wxWidgets headers.
+#include "wx/wxprec.h"
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#include "wx/xrc/xmlres.h"  // Include general XRC support.
+#include "resource.h"       // include definitions generated by wxrc.
+
+// Declare the application class.
+class MyApp : public wxApp
+{
+public:
+    // Override application initialization.
+    virtual bool OnInit();
+};
+
+// This applications defines two simple dialog box classes.
+
+// The first dialog inherits from the wxrc-generated class
+// (my_dialog_base).  The wxrc-generated class is named using the
+// dialog's name in the XRC (i.e. "my_dialog") followed by "_base".
+// The wxrc-generated class creates the dialog from the XRC data and
+// exposes member functions for accessing the dialog's controls.
+// Note: the macro "CTRL" is defined below just so that the MyDialog
+// and MyDialog2 code is similar.
+#define CTRL(name) (name ())
+class MyDialog : public my_dialog_base  // Inherit from wxrc-generated class.
+{
+public:
+    MyDialog(wxWindow * parent = NULL)
+        : my_dialog_base(parent)  // Non-default contructor builds
+                                  // dialog from XRC data.
+    {
+    }
+private:
+    void OnTestClick(wxCommandEvent& event) {
+        // Each control can be accessed using a member function
+        // corresponding to the control name given in the XRC.
+        // Any errors in the control names will be detected by the compiler.
+        CTRL(test_label)->SetLabel("Test clicked.");
+        CTRL(test_label)->SetBackgroundColour(*wxWHITE);
+        CTRL(wxID_OK)->SetLabel("OK...");
+    }
+
+    DECLARE_EVENT_TABLE()
+};
+#undef CTRL
+
+
+// The second dialog _contains_ the wxrc-generated class--unlike
+// MyDialog which inherits from it.  Use whichever approach you
+// prefer.
+#define CTRL(name) (m_controls. name ())
+class MyDialog2 : public wxDialog
+{
+public:
+    MyDialog2(wxWindow * parent = NULL) {
+        // Build dialog from XRC data and index controls.
+        m_controls.ConstructFromXRC(this, parent);
+    }
+private:
+    void OnTestClick(wxCommandEvent& event) {
+        CTRL(test_label)->SetLabel("Test clicked.");
+        CTRL(test_label)->SetBackgroundColour(*wxWHITE);
+	CTRL(wxID_OK)->SetLabel("OK...");
+    }
+
+    // The wxrc-generates class is a member.
+    my_dialog_base m_controls;
+
+    DECLARE_EVENT_TABLE()
+};
+#undef CTRL
+
+// Application object
+IMPLEMENT_APP(MyApp)
+
+// Define MyDialog event map.  The numeric ID of each control can be
+// accessed using a static member function of the same XRC name
+// followed by "_id".  For example, "test_button_id()" returns the
+// numeric ID for the control named "test_button" in the XRC.  These
+// functions currently internally use the XRCID() macro as so require
+// that names be globally unique.  (This constraint may be difficult
+// to enforce, so I think it would be better if XRCID could take an
+// additional parameter to search only under a given document, like
+// XRCCTRL() allows, rather than search globally.  I generally prefer
+// using validators rather than event maps anyway.)
+BEGIN_EVENT_TABLE(MyDialog, my_dialog_base)
+    EVT_BUTTON(test_button_id(), MyDialog::OnTestClick)
+END_EVENT_TABLE()
+
+// Define MyDialog2 event map.
+BEGIN_EVENT_TABLE(MyDialog2, my_dialog_base)
+    EVT_BUTTON(my_dialog_base::test_button_id(), MyDialog2::OnTestClick)
+END_EVENT_TABLE()
+
+bool MyApp::OnInit()
+{
+    wxXmlResource::Get()->InitAllHandlers();  // standard XRC initialization
+
+    // Load XRC data from resource.cpp.
+    InitXmlResource();
+
+    // Show the first dialog.
+    MyDialog *dialog = new MyDialog();
+    dialog->test_label()->SetLabel("Test of Dialog");  // function is public
+    dialog->ShowModal();
+    dialog->Destroy();
+
+    // Show the second dialog.
+    MyDialog2 *dialog2 = new MyDialog2();
+    dialog2->ShowModal();
+    dialog2->Destroy();
+
+    return true; // continue
+}
+
+// For additional usage information, see the generated resource.h
+// code.  wxMenuBar's and user-defined control classes are handled
+// specially.  See also "wxrc --help".
diff -Nru2 wxWidgets.orig/samples/wxrc/wxrcdemo.rc wxWidgets.new/samples/wxrc/wxrcdemo.rc
--- wxWidgets.orig/samples/wxrc/wxrcdemo.rc	1969-12-31 19:00:00.000000000 -0500
+++ wxWidgets.new/samples/wxrc/wxrcdemo.rc	2005-12-03 01:43:19.937500000 -0500
@@ -0,0 +1 @@
+#include "wx/msw/wx.rc"
diff -Nru2 wxWidgets.orig/utils/wxrc/wxrc.cpp wxWidgets.new/utils/wxrc/wxrc.cpp
--- wxWidgets.orig/utils/wxrc/wxrc.cpp	2005-09-25 15:58:28.000000000 -0400
+++ wxWidgets.new/utils/wxrc/wxrc.cpp	2005-12-03 01:45:29.109375000 -0500
@@ -28,4 +28,5 @@
 #include "wx/wfstream.h"
 #include "wx/utils.h"
+#include "wx/hashset.h"
 
 
@@ -33,21 +34,32 @@
 {
 public:
-    XRCWidgetData(const wxString& vname,const wxString& vclass)
-        : m_class(vclass), m_name(vname)  {}
+    XRCWidgetData(const wxString& vname,const wxString& vclass,
+                  const wxString& vsubclass)
+        : m_name(vname), m_class(vclass), m_subclass(vsubclass)  {}
     const wxString& GetName() const { return m_name; }
     const wxString& GetClass() const { return m_class; }
+    const wxString& GetSubclass() const { return m_subclass; }
+
+    const wxString& GetEffectiveClass() const {
+        if(m_subclass != "")
+            return m_subclass;
+        else
+            return m_class;
+    }
 private:
-    wxString m_class;
     wxString m_name;
+    wxString m_class;
+    wxString m_subclass;
 };
 
 #include "wx/arrimpl.cpp"
 WX_DECLARE_OBJARRAY(XRCWidgetData,ArrayOfXRCWidgetData);
-WX_DEFINE_OBJARRAY(ArrayOfXRCWidgetData)
+WX_DEFINE_OBJARRAY(ArrayOfXRCWidgetData);
+WX_DECLARE_HASH_SET( wxString, wxStringHash, wxStringEqual, UsedSet);
 
 class XRCWndClassData
 {
 private:
-    wxString m_className;
+    wxString m_name;
     wxString m_parentClassName;
     ArrayOfXRCWidgetData m_wdata;
@@ -57,4 +69,5 @@
         wxString classValue;
         wxString nameValue;
+        wxString subclassValue;
         wxXmlNode* children;
         while (node)
@@ -64,5 +77,7 @@
                 && node->GetPropVal(_T("name"),&nameValue))
             {
-                m_wdata.Add(XRCWidgetData(nameValue,classValue));
+                node->GetPropVal(_T("subclass"),&subclassValue);
+
+                m_wdata.Add(XRCWidgetData(nameValue,classValue, subclassValue));
             }
             children = node->GetChildren();
@@ -75,5 +90,5 @@
 public:
     XRCWndClassData(const wxString& className,const wxString& parentClassName, const wxXmlNode* node) :
-        m_className(className) , m_parentClassName(parentClassName)
+        m_name(className) , m_parentClassName(parentClassName)
     {
         BrowseXmlNode(node->GetChildren());
@@ -85,5 +100,5 @@
     }
 
-    bool IsRealClass(const wxString& name)
+    static bool IsRealClass(const wxString& name)
     {
         if (name == _T("tool") ||
@@ -101,49 +116,122 @@
     void GenerateHeaderCode(wxFFile& file)
     {
-
-        file.Write(_T("class ") + m_className + _T(" : public ") + m_parentClassName
-                   + _T(" {\nprotected:\n"));
         size_t i;
+
+        wxString className = m_name + "_base";
+
+        // note: prefix names to reduce probability of clashes with XRC.
+
+        file.Write(_T("\n"));
+
+        // Generate forward declarations for any subclasses
+        UsedSet used;
         for(i=0;i<m_wdata.Count();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
-            if( !IsRealClass(w.GetClass()) ) continue;
+            if( !IsRealClass(w.GetEffectiveClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
+            if( w.GetSubclass().Length() == 0) continue;
+            if( used.find(w.GetSubclass()) != used.end() ) continue;
+            used.insert(w.GetSubclass());
             file.Write(
-                _T(" ") + w.GetClass() + _T("* ") + w.GetName()
-                + _T(";\n"));
+                _T("class ") + w.GetEffectiveClass() + _T(";\n"));
         }
-        file.Write(_T("\nprivate:\n void InitWidgetsFromXRC(){\n")
-                   _T("  wxXmlResource::Get()->LoadObject(this,NULL,_T(\"")
-                   +  m_className
-                   +  _T("\"), _T(\"")
-                   +  m_parentClassName
-                   +  _T("\"));\n"));
+
+        file.Write(_T("class ") + className + _T(" : public ") + m_parentClassName + _T(" {\n"));
+        file.Write(_T("public:\n"));
+
+        // Generate construction functions.
+        file.Write(
+              _T("    ") + className + _T("::") + className + _T("() {}\n")
+            + _T("    ") + className + _T("::") + className + _T("(wxWindow * parent) {\n")
+            + _T("        ConstructFromXRC(parent);\n")
+            + _T("    }\n")
+            + _T("    void ConstructFromXRC(wxWindow * parent) {\n")
+            + _T("        ConstructFromXRC(this, parent);\n")
+            + _T("    }\n")
+            + _T("    void ConstructFromXRC(wxWindow * instance, wxWindow * parent) {\n")
+            + _T("        LoadObjectsFromXRC(instance, parent);\n")
+            + _T("        IndexObjectsFromXRC(instance);\n")
+            + _T("    }\n")
+            + _T("    void LoadObjectsFromXRC(wxWindow * parent) {\n")
+            + _T("        LoadObjectsFromXRC(this, parent);\n")
+            + _T("    }\n")
+            + _T("    void LoadObjectsFromXRC(wxWindow * instance, wxWindow * parent) {\n")
+            + _T("        wxXmlResource::Get()->LoadObject(instance, parent, \"")
+            +             m_name +  _T("\", \"")
+            +             m_parentClassName +  _T("\");\n")
+            + _T("    }\n")
+        );
+
+        // Generate indexer function.
+        file.Write(
+              _T("    void IndexObjectsFromXRC(wxWindow * instance) {\n")
+        );
         for(i=0;i<m_wdata.Count();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
-            if( !IsRealClass(w.GetClass()) ) continue;
+            if( !IsRealClass(w.GetEffectiveClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
-            file.Write( _T("  ")
-                        + w.GetName()
-                        + _T(" = XRCCTRL(*this,\"")
-                        + w.GetName()
-                        + _T("\",")
-                        + w.GetClass()
-                        + _T(");\n")
+            if( w.GetClass() == "wxMenuBar" )  // special case
+                file.Write(
+                      _T("        m_") + w.GetName()
+                    + _T(" = GetMenuBar();\n")
+                );
+            else if( w.GetSubclass().Length() != 0 ) // special case
+                // note: special cast since custom subclass may not
+                // be declared yet
+                file.Write(
+                       _T("        m_")
+                     + w.GetName() + _T(" = wx_reinterpret_cast(") + w.GetSubclass() + _T("*, XRCCTRL(*instance, \"")
+                     + w.GetName() + _T("\", ") + w.GetClass() + _T("));\n")
+                );
+            else
+                file.Write(
+                       _T("        m_")
+                     + w.GetName() + _T(" = XRCCTRL(*instance, \"")
+                     + w.GetName() + _T("\", ") + w.GetEffectiveClass() + _T(");\n")
                 );
         }
-        file.Write(_T(" }\n"));
+        file.Write(_T("    }\n"));
 
-        file.Write(
-            _T("public:\n")
-            + m_className
-            + _T("::")
-            + m_className
-            + _T("(){\n")
-            + _T("  InitWidgetsFromXRC();\n")
-              _T(" }\n")
-              _T("};\n")
-        );
+        // Generate accessor functions for controls
+        file.Write(_T("\n"));
+        for(i=0;i<m_wdata.Count();++i)
+        {
+            const XRCWidgetData& w = m_wdata.Item(i);
+            if( !IsRealClass(w.GetEffectiveClass()) ) continue;
+            if( w.GetName().Length() == 0 ) continue;
+            file.Write(
+                _T("    ") + w.GetEffectiveClass() + _T("* ") + w.GetName()
+                + _T("() const { return m_") + w.GetName() + _T("; }\n"));
+        }
+
+        // Generate accessor functions for control IDs
+        // Note: don't bother caching these.
+        // Note: Names must be globally unique for IDs to be valid.
+        file.Write(_T("\n"));
+        for(i=0;i<m_wdata.Count();++i)
+        {
+            const XRCWidgetData& w = m_wdata.Item(i);
+            if( !IsRealClass(w.GetEffectiveClass()) ) continue;
+            if( w.GetName().Length() == 0 ) continue;
+            file.Write(
+                _T("    static int ") + w.GetName()
+                + _T("_id() { return XRCID(\"") + w.GetName() + _T("\"); }\n"));
+        }
+
+        // Generate data members for controls.
+        file.Write(_T("private:\n"));
+        for(i=0;i<m_wdata.Count();++i)
+        {
+            const XRCWidgetData& w = m_wdata.Item(i);
+            if( !IsRealClass(w.GetEffectiveClass()) ) continue;
+            if( w.GetName().Length() == 0 ) continue;
+            file.Write(
+                _T("    ") + w.GetEffectiveClass() + _T("* m_") + w.GetName()
+                + _T(";\n"));
+        }
+
+        file.Write(_T("};\n"));
     };
 };
@@ -619,5 +707,5 @@
                 _T("\nvoid \n")
                 + parFuncname
-                + _T("();\n#endif\n"));
+                + _T("();\n#endif // __") + fileSpec + _T("_h__\n"));
 }
 

 	  	 

Index: include/wx/msw/private/fswatcher.h
===================================================================
--- include/wx/msw/private/fswatcher.h	(revision 73687)
+++ include/wx/msw/private/fswatcher.h	(working copy)
@@ -215,7 +215,7 @@
     // This function can block forever in it's wait for completion status.
     // Use PostEmptyStatus() to wake it up (and end the worker thread)
     bool GetStatus(unsigned long* count, wxFSWatchEntryMSW** watch,
-                   OVERLAPPED** overlapped)
+                   OVERLAPPED** overlapped, bool& rootDeleted)
     {
         wxCHECK_MSG( m_iocp != INVALID_HANDLE_VALUE, false, "IOCP not init" );
         wxCHECK_MSG( count != NULL, false, "Null out parameter 'count'");
@@ -227,6 +227,11 @@
                                             overlapped, INFINITE);
         if (!ret)
         {
+            if (!wxFileName::DirExists((*watch)->GetPath()))
+            {
+                rootDeleted = true;
+                return true;
+            }
             wxLogSysError(_("Unable to dequeue completion packet"));
         }
         return ret != 0;
Index: src/msw/fswatcher.cpp
===================================================================
--- src/msw/fswatcher.cpp	(revision 73687)
+++ src/msw/fswatcher.cpp	(working copy)
@@ -225,9 +225,18 @@
     unsigned long count = 0;
     wxFSWatchEntryMSW* watch = NULL;
     OVERLAPPED* overlapped = NULL;
-    if (!m_iocp->GetStatus(&count, &watch, &overlapped))
+    bool rootDeleted = false;
+    if (!m_iocp->GetStatus(&count, &watch, &overlapped, rootDeleted))
         return true; // error was logged already, we don't want to exit
 
+    if (rootDeleted)
+    {
+        // A 'root' watch was removed. Signal this.
+        wxFileSystemWatcherEvent event(wxFSW_EVENT_ERROR, watch->GetPath(), watch->GetPath(), wxID_ANY);
+        SendEvent(event);
+        return true;
+    }
+
     // this is our exit condition, so we return false
     if (!count && !watch && !overlapped)
         return false;

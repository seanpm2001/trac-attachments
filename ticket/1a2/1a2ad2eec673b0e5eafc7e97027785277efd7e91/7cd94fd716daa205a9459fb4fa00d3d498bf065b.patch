--- wxBase-2.5.5.orig/src/common/string.cpp	2005-04-04 09:02:27.000000000 +0200
+++ wxBase-2.5.5/src/common/string.cpp	2005-04-14 11:38:04.243052384 +0200
@@ -1865,137 +1865,65 @@
 // of them)
 bool wxString::Matches(const wxChar *pszMask) const
 {
-    // I disable this code as it doesn't seem to be faster (in fact, it seems
-    // to be much slower) than the old, hand-written code below and using it
-    // here requires always linking with libregex even if the user code doesn't
-    // use it
-#if 0 // wxUSE_REGEX
-    // first translate the shell-like mask into a regex
-    wxString pattern;
-    pattern.reserve(wxStrlen(pszMask));
+    // the char currently being checked
+    const wxChar *pszTxt = c_str();
 
-    pattern += _T('^');
-    while ( *pszMask )
-    {
-        switch ( *pszMask )
-        {
-            case _T('?'):
-                pattern += _T('.');
-                break;
-
-            case _T('*'):
-                pattern += _T(".*");
-                break;
-
-            case _T('^'):
-            case _T('.'):
-            case _T('$'):
-            case _T('('):
-            case _T(')'):
-            case _T('|'):
-            case _T('+'):
-            case _T('\\'):
-                // these characters are special in a RE, quote them
-                // (however note that we don't quote '[' and ']' to allow
-                // using them for Unix shell like matching)
-                pattern += _T('\\');
-                // fall through
-
-            default:
-                pattern += *pszMask;
-        }
-
-        pszMask++;
-    }
-    pattern += _T('$');
-
-    // and now use it
-    return wxRegEx(pattern, wxRE_NOSUB | wxRE_EXTENDED).Matches(c_str());
-#else // !wxUSE_REGEX
-  // TODO: this is, of course, awfully inefficient...
-
-  // the char currently being checked
-  const wxChar *pszTxt = c_str();
-
-  // the last location where '*' matched
-  const wxChar *pszLastStarInText = NULL;
-  const wxChar *pszLastStarInMask = NULL;
-
-match:
-  for ( ; *pszMask != wxT('\0'); pszMask++, pszTxt++ ) {
-    switch ( *pszMask ) {
-      case wxT('?'):
-        if ( *pszTxt == wxT('\0') )
-          return false;
-
-        // pszTxt and pszMask will be incremented in the loop statement
-
-        break;
-
-      case wxT('*'):
-        {
-          // remember where we started to be able to backtrack later
-          pszLastStarInText = pszTxt;
-          pszLastStarInMask = pszMask;
-
-          // ignore special chars immediately following this one
-          // (should this be an error?)
-          while ( *pszMask == wxT('*') || *pszMask == wxT('?') )
-            pszMask++;
-
-          // if there is nothing more, match
-          if ( *pszMask == wxT('\0') )
-            return true;
-
-          // are there any other metacharacters in the mask?
-          size_t uiLenMask;
-          const wxChar *pEndMask = wxStrpbrk(pszMask, wxT("*?"));
-
-          if ( pEndMask != NULL ) {
-            // we have to match the string between two metachars
-            uiLenMask = pEndMask - pszMask;
-          }
-          else {
-            // we have to match the remainder of the string
-            uiLenMask = wxStrlen(pszMask);
-          }
-
-          wxString strToMatch(pszMask, uiLenMask);
-          const wxChar* pMatch = wxStrstr(pszTxt, strToMatch);
-          if ( pMatch == NULL )
-            return false;
-
-          // -1 to compensate "++" in the loop
-          pszTxt = pMatch + uiLenMask - 1;
-          pszMask += uiLenMask - 1;
-        }
-        break;
-
-      default:
-        if ( *pszMask != *pszTxt )
-          return false;
-        break;
+    for ( ; *pszMask != wxT('\0'); pszMask++, pszTxt++ ) {
+	switch ( *pszMask ) {
+	    case wxT('?'):
+		if ( *pszTxt == wxT('\0') ) return false;
+		break;
+
+	    case wxT('*'): {
+		// ignore special chars immediately following this one
+		do {
+		    pszMask++;
+		} while ( *pszMask == wxT('*') || *pszMask == wxT('?') );
+
+		// if there is nothing more, match
+		if ( *pszMask == wxT('\0') ) return true;
+
+		// are there any other metacharacters in the mask?
+		const wxChar *pEndMask = wxStrpbrk(pszMask, wxT("*?"));
+
+		if ( pEndMask == NULL ) {
+		    // ends have to match
+		    int iSkipTxt;
+		    iSkipTxt = wxStrlen(pszTxt) - wxStrlen(pszMask);
+		    if (iSkipTxt < 0) {
+			return false;
+		    } else {
+			pszTxt += iSkipTxt;
+		    }
+		}
+		else {
+		    // we have to match the string between two metachars
+		    size_t uiLenMask;
+		    uiLenMask = pEndMask - pszMask;
+		    wxString strToMatch(pszMask, uiLenMask);
+		    const wxChar* pMatch = wxStrstr(pszTxt, strToMatch);
+		    if ( pMatch == NULL ) return false;
+
+		    // -1 to compensate "++" in the loop
+		    pszTxt = pMatch + uiLenMask - 1;
+		    pszMask += uiLenMask - 1;
+		}
+
+	    }
+	    break;
+
+	    default:
+		if ( *pszMask != *pszTxt ) return false;
+		break;
+	}
+    }
+
+    // match only if nothing left
+    if ( *pszTxt == wxT('\0') ) {
+	return true;
     }
-  }
-
-  // match only if nothing left
-  if ( *pszTxt == wxT('\0') )
-    return true;
-
-  // if we failed to match, backtrack if we can
-  if ( pszLastStarInText ) {
-    pszTxt = pszLastStarInText + 1;
-    pszMask = pszLastStarInMask;
-
-    pszLastStarInText = NULL;
-
-    // don't bother resetting pszLastStarInMask, it's unnecessary
-
-    goto match;
-  }
 
-  return false;
-#endif // wxUSE_REGEX/!wxUSE_REGEX
+    return false;
 }
 
 // Count the number of chars

 	  	 

diff -uNr wxWidgets-0/include/wx/aui/floatpane.h wxWidgets-1/include/wx/aui/floatpane.h
--- wxWidgets-0/include/wx/aui/floatpane.h	2013-07-26 20:31:06.000000000 -0400
+++ wxWidgets-1/include/wx/aui/floatpane.h	2014-03-17 15:39:19.669425262 -0400
@@ -36,8 +36,7 @@
                    const wxAuiPaneInfo& pane,
                    wxWindowID id = wxID_ANY,
                    long style = wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
-                                wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
-                                wxCLIP_CHILDREN
+                                wxFRAME_NO_TASKBAR | wxCLIP_CHILDREN
                    );
     virtual ~wxAuiFloatingFrame();
     void SetPaneWindow(const wxAuiPaneInfo& pane);
diff -uNr wxWidgets-0/include/wx/aui/framemanager.h wxWidgets-1/include/wx/aui/framemanager.h
--- wxWidgets-0/include/wx/aui/framemanager.h	2013-07-26 20:31:06.000000000 -0400
+++ wxWidgets-1/include/wx/aui/framemanager.h	2014-03-17 15:41:40.501083302 -0400
@@ -249,6 +249,7 @@
     bool IsMovable() const { return HasFlag(optionMovable); }
     bool IsDestroyOnClose() const { return HasFlag(optionDestroyOnClose); }
     bool IsMaximized() const { return HasFlag(optionMaximized); }
+    bool IsTransient() const { return HasFlag(optionTransient); }
     bool HasCaption() const { return HasFlag(optionCaption); }
     bool HasGripper() const { return HasFlag(optionGripper); }
     bool HasBorder() const { return HasFlag(optionPaneBorder); }
@@ -316,6 +317,7 @@
     wxAuiPaneInfo& RightDockable(bool b = true) { return SetFlag(optionRightDockable, b); }
     wxAuiPaneInfo& Floatable(bool b = true) { return SetFlag(optionFloatable, b); }
     wxAuiPaneInfo& Movable(bool b = true) { return SetFlag(optionMovable, b); }
+    wxAuiPaneInfo& Transient(bool b = true) { return SetFlag(optionTransient, b); }
     wxAuiPaneInfo& DockFixed(bool b = true) { return SetFlag(optionDockFixed, b); }
 
     wxAuiPaneInfo& Dockable(bool b = true)
@@ -329,7 +331,8 @@
         test.state |= optionTopDockable | optionBottomDockable |
                  optionLeftDockable | optionRightDockable |
                  optionFloatable | optionMovable | optionResizable |
-                 optionCaption | optionPaneBorder | buttonClose;
+                 optionTransient | optionCaption | optionPaneBorder | 
+                 buttonClose;
         wxCHECK_MSG(test.IsValid(), *this,
                     "window settings and pane settings are incompatible");
         *this = test;
@@ -403,6 +406,7 @@
         optionGripperTop      = 1 << 15,
         optionMaximized       = 1 << 16,
         optionDockFixed       = 1 << 17,
+        optionTransient       = 1 << 18,
 
         buttonClose           = 1 << 21,
         buttonMaximize        = 1 << 22,
diff -uNr wxWidgets-0/include/wx/gtk/minifram.h wxWidgets-1/include/wx/gtk/minifram.h
--- wxWidgets-0/include/wx/gtk/minifram.h	2013-07-26 20:31:25.000000000 -0400
+++ wxWidgets-1/include/wx/gtk/minifram.h	2014-03-17 16:02:24.102222170 -0400
@@ -27,7 +27,7 @@
             const wxString& title,
             const wxPoint& pos = wxDefaultPosition,
             const wxSize& size = wxDefaultSize,
-            long style = wxCAPTION | wxRESIZE_BORDER,
+            long style = wxCAPTION | wxRESIZE_BORDER | wxFRAME_FLOAT_ON_PARENT,
             const wxString& name = wxFrameNameStr)
     {
         Create(parent, id, title, pos, size, style, name);
diff -uNr wxWidgets-0/include/wx/msw/minifram.h wxWidgets-1/include/wx/msw/minifram.h
--- wxWidgets-0/include/wx/msw/minifram.h	2013-07-26 20:31:17.000000000 -0400
+++ wxWidgets-1/include/wx/msw/minifram.h	2014-03-17 16:06:26.545315797 -0400
@@ -23,13 +23,14 @@
               const wxString& title,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
-              long style = wxCAPTION | wxCLIP_CHILDREN | wxRESIZE_BORDER,
+              long style = wxCAPTION | wxCLIP_CHILDREN | wxRESIZE_BORDER |
+			     wxFRAME_FLOAT_ON_PARENT,
               const wxString& name = wxFrameNameStr)
   {
+	  if ((style & wxFRAME_FLOAT_ON_PARENT) && !parent)
+		  style &= ~wxFRAME_FLOAT_ON_PARENT;
       return wxFrame::Create(parent, id, title, pos, size,
-                             style |
-                             wxFRAME_TOOL_WINDOW |
-                             (parent ? wxFRAME_FLOAT_ON_PARENT : 0), name);
+                             style | wxFRAME_TOOL_WINDOW, name);
   }
 
   wxMiniFrame(wxWindow *parent,
@@ -37,7 +38,8 @@
               const wxString& title,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
-              long style = wxCAPTION | wxCLIP_CHILDREN | wxRESIZE_BORDER,
+              long style = wxCAPTION | wxCLIP_CHILDREN | wxRESIZE_BORDER |
+			     wxFRAME_FLOAT_ON_PARENT,
               const wxString& name = wxFrameNameStr)
   {
       Create(parent, id, title, pos, size, style, name);
diff -uNr wxWidgets-0/interface/wx/aui/framemanager.h wxWidgets-1/interface/wx/aui/framemanager.h
--- wxWidgets-0/interface/wx/aui/framemanager.h	2013-07-26 20:31:39.000000000 -0400
+++ wxWidgets-1/interface/wx/aui/framemanager.h	2014-03-17 16:10:45.980274962 -0400
@@ -715,6 +715,13 @@
     bool IsTopDockable() const;
 
     /**
+        IsTransient() returns @true if the pane is meant to be transient (like
+        a palette). This option forces the pane to always float above the
+        parent frame. 
+    */
+    bool IsTransient() const;
+
+    /**
         Layer() determines the layer of the docked pane. The dock layer is similar to
         an onion, the inner-most layer being layer 0. Each shell moving in the outward
         direction has a higher layer number. This allows for more complex docking layout
@@ -843,6 +850,14 @@
     wxAuiPaneInfo& TopDockable(bool b = true);
 
     /**
+        Transient() indicates whether a pane is meant to be transient (like
+        a palette). If a frame is transient, it always floats above the 
+        parent frame. By default, a pane is transient. Turning the transient
+        feature off is only currently implemented in wxGTK and wxMSW.
+    */
+    wxAuiPaneInfo& Transient(bool b = true);
+
+    /**
         Window() assigns the window pointer that the wxAuiPaneInfo should use.
         This normally does not need to be specified, as the window pointer is
         automatically assigned to the wxAuiPaneInfo structure as soon as it is added
diff -uNr wxWidgets-0/samples/aui/auidemo.cpp wxWidgets-1/samples/aui/auidemo.cpp
--- wxWidgets-0/samples/aui/auidemo.cpp	2013-07-26 20:31:50.000000000 -0400
+++ wxWidgets-1/samples/aui/auidemo.cpp	2014-03-17 16:11:29.172105488 -0400
@@ -63,6 +63,7 @@
         ID_CreateHTML,
         ID_CreateNotebook,
         ID_CreateSizeReport,
+        ID_CreateNonTransPane,
         ID_GridContent,
         ID_TextContent,
         ID_TreeContent,
@@ -143,6 +144,7 @@
     void OnCreateNotebook(wxCommandEvent& evt);
     void OnCreateText(wxCommandEvent& evt);
     void OnCreateSizeReport(wxCommandEvent& evt);
+    void OnCreateNonTransPane(wxCommandEvent& evt);
     void OnChangeContentPane(wxCommandEvent& evt);
     void OnDropDownToolbarItem(wxAuiToolBarEvent& evt);
     void OnCreatePerspective(wxCommandEvent& evt);
@@ -582,6 +584,7 @@
     EVT_MENU(MyFrame::ID_CreateText, MyFrame::OnCreateText)
     EVT_MENU(MyFrame::ID_CreateHTML, MyFrame::OnCreateHTML)
     EVT_MENU(MyFrame::ID_CreateSizeReport, MyFrame::OnCreateSizeReport)
+    EVT_MENU(MyFrame::ID_CreateNonTransPane, MyFrame::OnCreateNonTransPane)
     EVT_MENU(MyFrame::ID_CreateNotebook, MyFrame::OnCreateNotebook)
     EVT_MENU(MyFrame::ID_CreatePerspective, MyFrame::OnCreatePerspective)
     EVT_MENU(MyFrame::ID_CopyPerspectiveCode, MyFrame::OnCopyPerspectiveCode)
@@ -687,6 +690,7 @@
     view_menu->Append(ID_CreateGrid, _("Create Grid"));
     view_menu->Append(ID_CreateNotebook, _("Create Notebook"));
     view_menu->Append(ID_CreateSizeReport, _("Create Size Reporter"));
+    view_menu->Append(ID_CreateNonTransPane, _("Create Non-Transient Pane"));
     view_menu->AppendSeparator();
     view_menu->Append(ID_GridContent, _("Use a Grid for the Content Pane"));
     view_menu->Append(ID_TextContent, _("Use a Text Control for the Content Pane"));
@@ -1444,6 +1448,15 @@
                   Float().FloatingPosition(GetStartPosition()));
     m_mgr.Update();
 }
+
+void MyFrame::OnCreateNonTransPane(wxCommandEvent& WXUNUSED(event))
+{
+    m_mgr.AddPane(CreateTextCtrl("This pane can be obscured by main frame"), 
+                  wxAuiPaneInfo().
+                  Caption(wxT("Non-Transient Panel")).Transient(false).
+                  Float().FloatingPosition(GetStartPosition()));
+    m_mgr.Update();
+}
 
 void MyFrame::OnCreateSizeReport(wxCommandEvent& WXUNUSED(event))
 {
diff -uNr wxWidgets-0/src/aui/floatpane.cpp wxWidgets-1/src/aui/floatpane.cpp
--- wxWidgets-0/src/aui/floatpane.cpp	2013-07-26 20:30:26.000000000 -0400
+++ wxWidgets-1/src/aui/floatpane.cpp	2014-03-17 16:13:36.447612195 -0400
@@ -42,15 +42,15 @@
                 const wxAuiPaneInfo& pane,
                 wxWindowID id /*= wxID_ANY*/,
                 long style /*=wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
-                              wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
-                              wxCLIP_CHILDREN
+                              wxFRAME_NO_TASKBAR | wxCLIP_CHILDREN
                            */)
                 : wxAuiFloatingFrameBaseClass(parent, id, wxEmptyString,
                         pane.floating_pos, pane.floating_size,
                         style |
                         (pane.HasCloseButton()?wxCLOSE_BOX:0) |
                         (pane.HasMaximizeButton()?wxMAXIMIZE_BOX:0) |
-                        (pane.IsFixed()?0:wxRESIZE_BORDER)
+                        (pane.IsFixed()?0:wxRESIZE_BORDER) |
+                        (pane.IsTransient()?wxFRAME_FLOAT_ON_PARENT:0)
                         )
 {
     m_ownerMgr = owner_mgr;
diff -uNr wxWidgets-0/src/aui/framemanager.cpp wxWidgets-1/src/aui/framemanager.cpp
--- wxWidgets-0/src/aui/framemanager.cpp	2013-07-26 20:30:26.000000000 -0400
+++ wxWidgets-1/src/aui/framemanager.cpp	2014-03-17 16:14:56.011308360 -0400
@@ -849,7 +849,7 @@
             m_hintWnd = new wxFrame(m_frame, wxID_ANY, wxEmptyString,
                                      wxDefaultPosition, wxSize(1,1),
                                          wxFRAME_TOOL_WINDOW |
-                                         wxFRAME_FLOAT_ON_PARENT |
+                                         //wxFRAME_FLOAT_ON_PARENT |
                                          wxFRAME_NO_TASKBAR |
                                          wxNO_BORDER);
 
@@ -3330,6 +3330,16 @@
 
         m_hintWnd->Raise();
 
+        // if action window does not have wxFRAME_FLOAT_ON_PARENT style,
+        // make sure it is not obscured by the hint
+        if (m_action == actionDragFloatingPane && m_actionWindow) 
+        {
+            if (!(m_actionWindow->GetWindowStyleFlag() & 
+               wxFRAME_FLOAT_ON_PARENT))
+            {
+                m_actionWindow->Raise();
+            }
+        }
 
         if (m_hintFadeAmt != m_hintFadeMax) //  Only fade if we need to
         {
diff -uNr wxWidgets-0/src/gtk/minifram.cpp wxWidgets-1/src/gtk/minifram.cpp
--- wxWidgets-0/src/gtk/minifram.cpp	2014-03-02 20:30:24.000000000 -0500
+++ wxWidgets-1/src/gtk/minifram.cpp	2014-03-17 16:23:04.393515633 -0400
@@ -376,9 +376,14 @@
     memset(&m_decorSize, 0, sizeof(m_decorSize));
     m_deferShow = false;
 
-    if (m_parent && (GTK_IS_WINDOW(m_parent->m_widget)))
+    // Check if miniframe should float on parent
+    if (style & wxFRAME_FLOAT_ON_PARENT)
     {
-        gtk_window_set_transient_for( GTK_WINDOW(m_widget), GTK_WINDOW(m_parent->m_widget) );
+        if (m_parent && (GTK_IS_WINDOW(m_parent->m_widget)))
+        {
+            gtk_window_set_transient_for( GTK_WINDOW(m_widget), 
+                GTK_WINDOW(m_parent->m_widget) );
+        }
     }
 
     if (m_miniTitle && (style & wxCLOSE_BOX))

Files wx-old/include/wx/.features.h.swp and wx-new/include/wx/.features.h.swp differ
diff -uNr wx-old/include/wx/aui/framemanager.h wx-new/include/wx/aui/framemanager.h
--- wx-old/include/wx/aui/framemanager.h	2014-04-06 14:39:07.180649698 -0400
+++ wx-new/include/wx/aui/framemanager.h	2014-05-05 12:11:00.676288033 -0400
@@ -136,6 +136,7 @@
 WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiPaneInfo, wxAuiPaneInfoArray, WXDLLIMPEXP_AUI);
 WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiPaneInfo*, wxAuiPaneInfoPtrArray, class WXDLLIMPEXP_AUI);
 WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiDockInfo*, wxAuiDockInfoPtrArray, class WXDLLIMPEXP_AUI);
+WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxFrame*, wxFramePtrArray, class WXDLLIMPEXP_AUI);
 #endif // SWIG
 
 extern WXDLLIMPEXP_AUI wxAuiDockInfo wxAuiNullDockInfo;
@@ -249,6 +250,7 @@
     bool IsMovable() const { return HasFlag(optionMovable); }
     bool IsDestroyOnClose() const { return HasFlag(optionDestroyOnClose); }
     bool IsMaximized() const { return HasFlag(optionMaximized); }
+    bool IsTransient() const { return HasFlag(optionTransient); }
     bool HasCaption() const { return HasFlag(optionCaption); }
     bool HasGripper() const { return HasFlag(optionGripper); }
     bool HasBorder() const { return HasFlag(optionPaneBorder); }
@@ -316,6 +318,13 @@
     wxAuiPaneInfo& RightDockable(bool b = true) { return SetFlag(optionRightDockable, b); }
     wxAuiPaneInfo& Floatable(bool b = true) { return SetFlag(optionFloatable, b); }
     wxAuiPaneInfo& Movable(bool b = true) { return SetFlag(optionMovable, b); }
+    wxAuiPaneInfo& Transient(bool b = true) 
+    { 
+#if !defined(__WXGTK__) && !defined(__WXMSW__)
+        b = true;
+#endif
+        return SetFlag(optionTransient, b);
+    }
     wxAuiPaneInfo& DockFixed(bool b = true) { return SetFlag(optionDockFixed, b); }
 
     wxAuiPaneInfo& Dockable(bool b = true)
@@ -329,7 +338,8 @@
         test.state |= optionTopDockable | optionBottomDockable |
                  optionLeftDockable | optionRightDockable |
                  optionFloatable | optionMovable | optionResizable |
-                 optionCaption | optionPaneBorder | buttonClose;
+                 optionTransient | optionCaption | optionPaneBorder | 
+                 buttonClose;
         wxCHECK_MSG(test.IsValid(), *this,
                     "window settings and pane settings are incompatible");
         *this = test;
@@ -403,6 +413,7 @@
         optionGripperTop      = 1 << 15,
         optionMaximized       = 1 << 16,
         optionDockFixed       = 1 << 17,
+        optionTransient       = 1 << 18,
 
         buttonClose           = 1 << 21,
         buttonMaximize        = 1 << 22,
@@ -528,7 +539,7 @@
                  const wxPoint& pt,
                  const wxPoint& offset);
 
-    virtual void ShowHint(const wxRect& rect);
+    virtual void ShowHint(const wxRect& rect, wxWindow* paneWindow=0);
     virtual void HideHint();
 
     void OnHintActivate(wxActivateEvent& event);
@@ -543,7 +554,7 @@
 
 protected:
 
-    void UpdateHintWindowConfig();
+    void UpdateHintWindowConfig(bool transient=true);
 
     void DoFrameLayout();
 
@@ -607,6 +618,7 @@
     void OnPaint(wxPaintEvent& evt);
     void OnEraseBackground(wxEraseEvent& evt);
     void OnSize(wxSizeEvent& evt);
+    void OnIconize(wxIconizeEvent& evt);
     void OnSetCursor(wxSetCursorEvent& evt);
     void OnLeftDown(wxMouseEvent& evt);
     void OnLeftUp(wxMouseEvent& evt);
@@ -638,6 +650,7 @@
     wxAuiPaneInfoArray m_panes;     // array of panes structures
     wxAuiDockInfoArray m_docks;     // array of docks structures
     wxAuiDockUIPartArray m_uiParts; // array of UI parts (captions, buttons, etc)
+    wxFramePtrArray m_panesToShowOnRestore; // array of non-transient floating frames at iconize time (that need to be shown on a "restore")
 
     int m_action;                // current mouse action
     wxPoint m_actionStart;      // position where the action click started
diff -uNr wx-old/interface/wx/aui/framemanager.h wx-new/interface/wx/aui/framemanager.h
--- wx-old/interface/wx/aui/framemanager.h	2014-04-06 14:39:17.629086676 -0400
+++ wx-new/interface/wx/aui/framemanager.h	2014-05-05 10:53:30.277091069 -0400
@@ -358,9 +358,12 @@
         This function is used by controls to explicitly show a hint window at the
         specified rectangle. It is rarely called, and is mostly used by controls
         implementing custom pane drag/drop behaviour.
-        The specified rectangle should be in screen coordinates.
+        The specified rectangle should be in screen coordinates. The optional
+        pane window is used to give the hint window the same type of "float
+        on parent" style as the one passed in here, which should be the window
+        being dragged. If not specified, the "float on parent" style is true.
     */
-    virtual void ShowHint(const wxRect& rect);
+    virtual void ShowHint(const wxRect& rect, wxWindow *paneWindow = 0);
 
     /**
         Uninitializes the framework and should be called before a managed frame or
@@ -715,6 +718,15 @@
     bool IsTopDockable() const;
 
     /**
+        IsTransient() returns @true if the pane is meant to be transient (like
+        a palette). This option forces the pane to always float above the
+        parent frame. 
+
+        @since 3.1.0
+    */
+    bool IsTransient() const;
+
+    /**
         Layer() determines the layer of the docked pane. The dock layer is similar to
         an onion, the inner-most layer being layer 0. Each shell moving in the outward
         direction has a higher layer number. This allows for more complex docking layout
@@ -843,6 +855,16 @@
     wxAuiPaneInfo& TopDockable(bool b = true);
 
     /**
+        Transient() indicates whether a pane is meant to be transient (like
+        a palette). If a frame is transient, it always floats above the 
+        parent frame. By default, a pane is transient. Making a pane
+        non-transient is supported on wxGTK and wxMSW.
+
+        @since 3.1.0
+    */
+    wxAuiPaneInfo& Transient(bool b = true);
+
+    /**
         Window() assigns the window pointer that the wxAuiPaneInfo should use.
         This normally does not need to be specified, as the window pointer is
         automatically assigned to the wxAuiPaneInfo structure as soon as it is added
diff -uNr wx-old/samples/aui/auidemo.cpp wx-new/samples/aui/auidemo.cpp
--- wx-old/samples/aui/auidemo.cpp	2014-04-06 14:39:25.693423913 -0400
+++ wx-new/samples/aui/auidemo.cpp	2014-04-06 14:42:06.900280458 -0400
@@ -63,6 +63,7 @@
         ID_CreateHTML,
         ID_CreateNotebook,
         ID_CreateSizeReport,
+        ID_CreateNonTransPane,
         ID_GridContent,
         ID_TextContent,
         ID_TreeContent,
@@ -143,6 +144,7 @@
     void OnCreateNotebook(wxCommandEvent& evt);
     void OnCreateText(wxCommandEvent& evt);
     void OnCreateSizeReport(wxCommandEvent& evt);
+    void OnCreateNonTransPane(wxCommandEvent& evt);
     void OnChangeContentPane(wxCommandEvent& evt);
     void OnDropDownToolbarItem(wxAuiToolBarEvent& evt);
     void OnCreatePerspective(wxCommandEvent& evt);
@@ -582,6 +584,7 @@
     EVT_MENU(MyFrame::ID_CreateText, MyFrame::OnCreateText)
     EVT_MENU(MyFrame::ID_CreateHTML, MyFrame::OnCreateHTML)
     EVT_MENU(MyFrame::ID_CreateSizeReport, MyFrame::OnCreateSizeReport)
+    EVT_MENU(MyFrame::ID_CreateNonTransPane, MyFrame::OnCreateNonTransPane)
     EVT_MENU(MyFrame::ID_CreateNotebook, MyFrame::OnCreateNotebook)
     EVT_MENU(MyFrame::ID_CreatePerspective, MyFrame::OnCreatePerspective)
     EVT_MENU(MyFrame::ID_CopyPerspectiveCode, MyFrame::OnCopyPerspectiveCode)
@@ -687,6 +690,9 @@
     view_menu->Append(ID_CreateGrid, _("Create Grid"));
     view_menu->Append(ID_CreateNotebook, _("Create Notebook"));
     view_menu->Append(ID_CreateSizeReport, _("Create Size Reporter"));
+#if defined(__WXGTK__) || defined(__WXMSW__)
+    view_menu->Append(ID_CreateNonTransPane, _("Create Non-Transient Pane"));
+#endif
     view_menu->AppendSeparator();
     view_menu->Append(ID_GridContent, _("Use a Grid for the Content Pane"));
     view_menu->Append(ID_TextContent, _("Use a Text Control for the Content Pane"));
@@ -1444,6 +1450,15 @@
                   Float().FloatingPosition(GetStartPosition()));
     m_mgr.Update();
 }
+
+void MyFrame::OnCreateNonTransPane(wxCommandEvent& WXUNUSED(event))
+{
+    m_mgr.AddPane(CreateTextCtrl("This pane can be obscured by main frame"), 
+                  wxAuiPaneInfo().
+                  Caption(wxT("Non-Transient Panel")).Transient(false).
+                  Float().FloatingPosition(GetStartPosition()));
+    m_mgr.Update();
+}
 
 void MyFrame::OnCreateSizeReport(wxCommandEvent& WXUNUSED(event))
 {
diff -uNr wx-old/src/aui/floatpane.cpp wx-new/src/aui/floatpane.cpp
--- wx-old/src/aui/floatpane.cpp	2014-04-06 14:39:39.674008490 -0400
+++ wx-new/src/aui/floatpane.cpp	2014-04-06 14:42:24.709045803 -0400
@@ -45,14 +45,18 @@
                               wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
                               wxCLIP_CHILDREN
                            */)
-                : wxAuiFloatingFrameBaseClass(parent, id, wxEmptyString,
-                        pane.floating_pos, pane.floating_size,
-                        style |
-                        (pane.HasCloseButton()?wxCLOSE_BOX:0) |
-                        (pane.HasMaximizeButton()?wxMAXIMIZE_BOX:0) |
-                        (pane.IsFixed()?0:wxRESIZE_BORDER)
-                        )
 {
+    wxWindow *p = pane.IsTransient()?parent:0;
+    if (!p) style &= ~wxFRAME_FLOAT_ON_PARENT;
+    wxAuiFloatingFrameBaseClass::Create(p, id, wxEmptyString,
+        pane.floating_pos, pane.floating_size,
+        style |
+        (pane.HasCloseButton()?wxCLOSE_BOX:0) |
+        (pane.HasMaximizeButton()?wxMAXIMIZE_BOX:0) |
+        (pane.IsFixed()?0:wxRESIZE_BORDER),
+        wxFrameNameStr
+        );
+
     m_ownerMgr = owner_mgr;
     m_moving = false;
     m_mgr.SetManagedWindow(this);
diff -uNr wx-old/src/aui/framemanager.cpp wx-new/src/aui/framemanager.cpp
--- wx-old/src/aui/framemanager.cpp	2014-04-06 14:39:39.706009828 -0400
+++ wx-new/src/aui/framemanager.cpp	2014-05-05 12:11:37.369634931 -0400
@@ -650,6 +650,18 @@
     }
 #endif
 
+    // Non-transient floating panes do not get destroyed since they have no
+    // parent. We need to dispose of them here.
+    size_t i;
+    for (i = 0; i < m_panes.size(); i++ )
+    {
+        wxAuiPaneInfo& pinfo = m_panes[i];
+        if (!pinfo.IsTransient() && pinfo.IsFloating()) 
+        {
+            if (pinfo.frame) pinfo.frame->Destroy();
+        }
+    }
+
     delete m_art;
 }
 
@@ -813,8 +825,10 @@
 }
 
 
-void wxAuiManager::UpdateHintWindowConfig()
+void wxAuiManager::UpdateHintWindowConfig(bool transient)
 {
+    long float_style = transient ? wxFRAME_FLOAT_ON_PARENT : 0;
+
     // find out if the system can do transparent frames
     bool can_do_transparent = false;
 
@@ -849,7 +863,7 @@
             m_hintWnd = new wxFrame(m_frame, wxID_ANY, wxEmptyString,
                                      wxDefaultPosition, wxSize(1,1),
                                          wxFRAME_TOOL_WINDOW |
-                                         wxFRAME_FLOAT_ON_PARENT |
+                                         float_style |
                                          wxFRAME_NO_TASKBAR |
                                          wxNO_BORDER);
 
@@ -888,7 +902,7 @@
                                                       wxDefaultPosition,
                                                       wxSize(1,1),
                                                             wxFRAME_TOOL_WINDOW |
-                                                            wxFRAME_FLOAT_ON_PARENT |
+                                                            float_style |
                                                             wxFRAME_NO_TASKBAR |
                                                             wxNO_BORDER);
             m_hintFadeMax = 128;
@@ -907,6 +921,15 @@
     m_frame = wnd;
     m_frame->PushEventHandler(this);
 
+    // when we iconify, the non-transient floating panes are not hidden;
+    // trap the iconify event so we can manual hide them
+    wxFrame *f = wxDynamicCast(m_frame, wxFrame);
+    if (f) 
+    {
+       f->Connect(wxEVT_ICONIZE, wxIconizeEventHandler(wxAuiManager::OnIconize),
+          NULL, this);
+    }
+
 #if wxUSE_MDI
     // if the owner is going to manage an MDI parent frame,
     // we need to add the MDI client window as the default
@@ -3300,10 +3323,21 @@
     m_hintWnd->SetTransparent(m_hintFadeAmt);
 }
 
-void wxAuiManager::ShowHint(const wxRect& rect)
+void wxAuiManager::ShowHint(const wxRect& rect, wxWindow *paneWindow)
 {
     if (m_hintWnd)
     {
+        // make sure hint window has the same float style as docking pane
+        bool hint_float = m_hintWnd->GetWindowStyleFlag()
+           & wxFRAME_FLOAT_ON_PARENT;
+        if (paneWindow) 
+        {
+            bool pane_float = GetPane(paneWindow).IsTransient();
+            if (hint_float != pane_float) UpdateHintWindowConfig(pane_float);
+        } else if (!hint_float) {
+           UpdateHintWindowConfig(true);
+        }
+
         // if the hint rect is the same as last time, don't do anything
         if (m_lastHint == rect)
             return;
@@ -3366,15 +3400,20 @@
                     pane.frame &&
                         pane.frame->IsShown())
             {
-                wxRect r = pane.frame->GetRect();
+                // don't subtract non-transient windows unless it is 
+                // the window trying to get docked
+                if (pane.IsTransient() || pane.window == paneWindow)
+                {
+                    wxRect r = pane.frame->GetRect();
 #ifdef __WXGTK__
-                // wxGTK returns the client size, not the whole frame size
-                r.width += 15;
-                r.height += 35;
-                r.Inflate(5);
+                    // wxGTK returns the client size, not the whole frame size
+                    r.width += 15;
+                    r.height += 35;
+                    r.Inflate(5);
 #endif
 
-                clip.Subtract(r);
+                    clip.Subtract(r);
+                }
             }
         }
 
@@ -3575,7 +3614,7 @@
     }
     else
     {
-        ShowHint(rect);
+        ShowHint(rect, pane_window);
     }
 }
 
@@ -3971,6 +4010,33 @@
     event.Skip();
 }
 
+void wxAuiManager::OnIconize(wxIconizeEvent& event)
+{
+    if (event.IsIconized()) 
+    {
+        // if we are iconified, hide the non-transient floating panes
+        for (size_t i = 0; i < m_panes.size(); i++) 
+        {
+            wxAuiPaneInfo& pinfo = m_panes[i];
+            if (!pinfo.IsTransient() && pinfo.IsFloating() && pinfo.IsShown()) 
+            {
+                m_panesToShowOnRestore.Add(pinfo.frame);
+                pinfo.frame->Show(false);
+            }
+        }
+    } 
+    else 
+    {
+        // if we are restored, show the non-transient floating panes
+        for (size_t i = 0; i < m_panesToShowOnRestore.size(); i++) 
+        {
+            m_panesToShowOnRestore[i]->Show(true);
+        }
+        m_panesToShowOnRestore.Empty();
+    }
+    event.Skip(true);
+}
+
 void wxAuiManager::OnFindManager(wxAuiManagerEvent& evt)
 {
     // get the window we are managing, if none, return NULL

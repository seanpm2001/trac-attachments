Index: include/wx/stc/stc.h
===================================================================
--- include/wx/stc/stc.h	(revision 73107)
+++ include/wx/stc/stc.h	(working copy)
@@ -4628,8 +4628,24 @@
     // implement wxTextAreaBase pure virtual methods
     // ---------------------------------------------
 
-    virtual int GetLineLength(long n) const { return GetLine(n).length(); }
-    virtual wxString GetLineText(long n) const { return GetLine(n); }
+    virtual int GetLineLength(long n) const { return (int)GetLineText(n).length(); }
+    virtual wxString GetLineText(long n) const
+    { 
+        wxString text = GetLine((int)n);
+        
+        for (wxString::reverse_iterator it = text.rbegin(); it != text.rend(); it++)
+        {
+            if ( (*it != '\n') && (*it != '\r') )
+            {
+                // found last non-newline char, remove anything after it if
+                // necessary and stop in any case
+                if ( it != text.rbegin() )
+                    text.erase(it.base(), text.end());
+                break;
+            }
+        }
+        return text;
+    }
     virtual int GetNumberOfLines() const { return GetLineCount(); }
 
     virtual bool IsModified() const { return GetModify(); }
Index: src/stc/stc.h.in
===================================================================
--- src/stc/stc.h.in	(revision 73107)
+++ src/stc/stc.h.in	(working copy)
@@ -370,8 +370,24 @@
     // implement wxTextAreaBase pure virtual methods
     // ---------------------------------------------
 
-    virtual int GetLineLength(long n) const { return GetLine(n).length(); }
-    virtual wxString GetLineText(long n) const { return GetLine(n); }
+    virtual int GetLineLength(long n) const { return (int)GetLineText(n).length(); }
+    virtual wxString GetLineText(long n) const
+    { 
+        wxString text = GetLine((int)n);
+        
+        for (wxString::reverse_iterator it = text.rbegin(); it != text.rend(); it++)
+        {
+            if ( (*it != '\n') && (*it != '\r') )
+            {
+                // found last non-newline char, remove anything after it if
+                // necessary and stop in any case
+                if ( it != text.rbegin() )
+                    text.erase(it.base(), text.end());
+                break;
+            }
+        }
+        return text;
+    }
     virtual int GetNumberOfLines() const { return GetLineCount(); }
 
     virtual bool IsModified() const { return GetModify(); }

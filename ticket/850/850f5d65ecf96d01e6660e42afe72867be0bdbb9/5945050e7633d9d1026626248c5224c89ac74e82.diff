Index: menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/menu.cpp,v
retrieving revision 1.47
diff -u -r1.47 menu.cpp
--- menu.cpp	2004/05/23 20:53:13	1.47
+++ menu.cpp	2004/10/03 14:53:51
@@ -47,7 +47,7 @@
 //
 // The (popup) menu title has this special id
 //
-static const int                    idMenuTitle = -2;
+static const int                    idMenuTitle = -3;
 
 //
 // The unique ID for Menus
@@ -280,7 +280,7 @@
         rItem.id = pItem->GetId();
     }
 
-    BYTE*                           pData;
+    BYTE*                           pData=NULL;
 
 #if wxUSE_OWNER_DRAWN
     if (pItem->IsOwnerDrawn())
@@ -304,10 +304,18 @@
     }
     else
     {
-        //
-        // Menu is just a normal string (passed in data parameter)
-        //
-        rItem.afStyle |= MIS_TEXT;
+        if (pItem->GetId() == idMenuTitle)
+        {
+            // Item is an unselectable title to be passed via pData
+            rItem.afStyle = MIS_STATIC;
+        }
+        else
+        {
+            //
+            // Menu is just a normal string (passed in data parameter)
+            //
+            rItem.afStyle |= MIS_TEXT;
+        }
         pData = (char*)pItem->GetText().c_str();
     }
 
Index: window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/window.cpp,v
retrieving revision 1.144
diff -u -r1.144 window.cpp
--- window.cpp	2004/09/29 14:28:56	1.144
+++ window.cpp	2004/10/03 14:54:25
@@ -1951,10 +1954,15 @@
     HWND                            hWndParent = GetHwnd();
     HWND                            hMenu = GetHmenuOf(pMenu);
     bool                            bIsWaiting = TRUE;
+    int                             nHeight;
+
+    // Protect against recursion
+    if (wxCurrentPopupMenu)
+        return false;
 
     pMenu->SetInvokingWindow(this);
     pMenu->UpdateUI();
-    
+
     if ( nX == -1 && nY == -1 )
     {
         wxPoint mouse = wxGetMousePosition();
@@ -1965,6 +1973,8 @@
         DoClientToScreen( &nX
                          ,&nY
                         );
+        DoGetSize(0,&nHeight);
+        nY = nHeight - nY;
     }
     wxCurrentPopupMenu = pMenu;
 
@@ -1981,13 +1991,12 @@
     {
         QMSG                            vMsg;
 
-        if (vMsg.msg == WM_MENUEND || vMsg.msg == WM_COMMAND)
-        {
+        ::WinGetMsg(vHabmain,&vMsg, (HWND)0, 0, 0);
+        if (vMsg.msg == WM_COMMAND)
             bIsWaiting = FALSE;
-        }
         ::WinDispatchMsg(vHabmain, (PQMSG)&vMsg);
-
     }
+
     wxCurrentPopupMenu = NULL;
     pMenu->SetInvokingWindow(NULL);
     return TRUE;
@@ -2958,6 +2967,20 @@
                 mResult = (MRESULT)TRUE;
             }
             break;
+
+#if wxUSE_MENUS_NATIVE
+         case WM_MENUEND:
+            if (wxCurrentPopupMenu)
+            {
+                if (GetHmenuOf(wxCurrentPopupMenu) == (HWND)lParam)
+                {
+                    // Break out of msg loop in DoPopupMenu
+                    ::WinPostMsg((HWND)lParam,WM_COMMAND,wParam,0);
+                }
+            }
+            break;
+#endif // wxUSE_MENUS_NATIVE
+
     }
     if (!bProcessed)
     {
@@ -4047,7 +4073,7 @@
 
     //
     // The mouse events take consecutive IDs from WM_MOUSEFIRST to
-    // WM_MOUSELAST, so it's enough to substract WM_MOUSEMOVE == WM_MOUSEFIRST
+    // WM_MOUSELAST, so it's enough to subtract WM_MOUSEMOVE == WM_MOUSEFIRST
     // from the message id and take the value in the table to get wxWin event
     // id
     //
@@ -4064,27 +4090,31 @@
         wxEVT_MIDDLE_UP,
         wxEVT_MIDDLE_DCLICK
     };
-
-    wxMouseEvent                    vEvent(eventsMouse[uMsg - WM_MOUSEMOVE]);
-
-    InitMouseEvent( vEvent
-                   ,nX
-                   ,nY
-                   ,uFlags
-                  );
 
-    bProcessed = GetEventHandler()->ProcessEvent(vEvent);
-    if (!bProcessed)
+    // Bounds check
+    if ((uMsg >= WM_MOUSEMOVE) && (uMsg <= WM_BUTTON3DBLCLK))
     {
-        HPOINTER                    hCursor = (HPOINTER)GetCursor().GetHCURSOR();
+        wxMouseEvent               vEvent(eventsMouse[uMsg - WM_MOUSEMOVE]);
+
+        InitMouseEvent( vEvent
+                       ,nX
+                       ,nY
+                       ,uFlags
+                       );
 
-        if (hCursor != NULLHANDLE)
+        bProcessed = GetEventHandler()->ProcessEvent(vEvent);
+        if (!bProcessed)
         {
-            ::WinSetPointer(HWND_DESKTOP, hCursor);
-            bProcessed = TRUE;
+            HPOINTER               hCursor = (HPOINTER)GetCursor().GetHCURSOR();
+
+            if (hCursor != NULLHANDLE)
+            {
+                ::WinSetPointer(HWND_DESKTOP, hCursor);
+                bProcessed = TRUE;
+            }
         }
     }
-    return GetEventHandler()->ProcessEvent(vEvent);
+    return bProcessed;
 } // end of wxWindowOS2::HandleMouseEvent
 
 bool wxWindowOS2::HandleMouseMove(

 	  	 

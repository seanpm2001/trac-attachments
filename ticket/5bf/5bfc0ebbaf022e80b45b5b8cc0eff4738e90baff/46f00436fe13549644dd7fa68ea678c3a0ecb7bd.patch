Index: Array.cpp
===================================================================
--- Array.cpp	(revision 63814)
+++ Array.cpp	(working copy)
@@ -23,7 +23,7 @@
 ArrayIterator ArrayIterator::operator++(int)
 {
 	ArrayIterator ret(*this);
-	ret.m_idx++;
+	m_idx++;
 	return ret;
 }
 
@@ -39,15 +39,13 @@
 		throw "Error access out of bounds";
 
 	ArrayIterator ret(*this);
-	ret.m_idx--;
+	m_idx--;
 	return ret;
 }
 
 ArrayIterator& ArrayIterator::operator--()
 {
-	if ( m_idx == 0 )
-
-
+	if ( m_idx > 0 )
 		m_idx--;
 	return (*this);
 }
@@ -140,13 +138,13 @@
 Array::~Array()
 {
 	if ( m_data )
-		delete m_data;
+		delete [] m_data;
 }
 
 Array& Array::operator=( const Array& rhs )
 {
 	if ( m_data )
-		delete m_data;
+		delete [] m_data;
 
 	m_data = 0L;
 	m_size = 0;
@@ -163,18 +161,7 @@
 
 void Array::reserve( size_t len )
 {
-	if ( len <= m_size || len == 0 )
-		return;
-
-	SelectionRange* data = 0L;
-	data = new SelectionRange[len];
-
-	if ( m_data ) {
-		memcpy( data , m_data , m_size*sizeof(SelectionRange) );
-		delete m_data;
-		m_data = data;
-	} else
-		m_data = data;
+	// Current version of Array class doesn't need implementation of this method
 }
 
 void Array::push_back( const SelectionRange& val )
@@ -189,6 +176,7 @@
 	SelectionRange* data = 0L;
 	data = new SelectionRange[m_size+1];
 	memcpy( data , m_data , m_size*sizeof(SelectionRange) );
+	delete [] m_data;
 	m_data = data;
 	*(m_data+m_size) = val;
 	m_size++;
@@ -207,7 +195,7 @@
 		memcpy( data , m_data , m_size*sizeof(SelectionRange) );
 	}
 
-	delete m_data;
+	delete [] m_data;
 	m_data = data;
 }
 
@@ -222,19 +210,19 @@
 		data = new SelectionRange[idx+1];
 		memcpy( data , m_data , m_size*sizeof(SelectionRange) );
 		m_size = idx+1;
-		delete m_data;
+		delete [] m_data;
 		m_data = data;
 	} else if ( idx == 0 ) {
 		data = new SelectionRange[m_size+1];
 		memcpy( data + 1 , m_data , m_size*sizeof(SelectionRange) );
-		delete m_data;
+		delete [] m_data;
 		m_size++;
 		m_data = data;
 	} else {
 		data = new SelectionRange[m_size+1];
 		memcpy( data , m_data , idx*sizeof(SelectionRange) );
 		memcpy( data + idx + 1 , m_data + idx , (m_size-idx)*sizeof(SelectionRange) );
-		delete m_data;
+		delete [] m_data;
 		m_size++;
 		m_data = data;
 	}
@@ -250,20 +238,20 @@
 
 	SelectionRange* data = 0L;
 	if ( m_size == 1 ) {
-		delete m_data;
+		delete [] m_data;
+		m_size = 0;
 		m_data = 0L;
-		return;
 	} else if ( idx == 0) {
 		data = new SelectionRange[m_size-1];
 		memcpy( data , m_data + 1 , (m_size-1)*sizeof(SelectionRange) );
-		delete m_data;
+		delete [] m_data;
 		m_size--;
 		m_data = data;
 	} else {
 		data = new SelectionRange[m_size-1];
 		memcpy( data , m_data , (idx)*sizeof(SelectionRange) );
 		memcpy( data + idx , m_data + idx + 1 , (m_size-idx-1)*sizeof(SelectionRange) );
-		delete m_data;
+		delete [] m_data;
 		m_size--;
 		m_data = data;
 	}
@@ -274,7 +262,7 @@
 	if ( !m_data )
 		return;
 
-	delete m_data;
+	delete [] m_data;
 	m_data = 0L;
 	m_size = 0;
 }
@@ -285,15 +273,16 @@
 		return;
 
 	if ( n == 0 ) {
-		delete m_data;
+		delete [] m_data;
 		m_data = 0L;
 		m_size = 0;
+		return;
 	}
 
 	SelectionRange* data = 0L;
 	data = new SelectionRange[n];
 	memcpy( data , m_data , m_size*sizeof(SelectionRange) );
-	delete m_data;
+	delete [] m_data;
 	m_data = data;
 
 	for ( size_t i = m_size ; i < n ; ++i )
@@ -343,7 +332,7 @@
 
 		do {
 			i++;
-		} while (array[j] < x);
+		} while (array[i] < x);
 
 		if (i < j) {
 			temp = array[i];
@@ -365,7 +354,6 @@
 		quicksort(num, top, middle);   // sort first section
 		quicksort(num, middle+1, bottom);    // sort second section
 	}
-	return;
 }
 
 void ArraySort( ArrayIterator start , ArrayIterator finish )

Index: docs/latex/wx/animatctrl.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/animatctrl.tex,v
retrieving revision 1.3
diff -bu2 -r1.3 docs/latex/wx/animatctrl.tex
--- docs/latex/wx/animatctrl.tex
+++ docs/latex/wx/animatctrl.tex
@@ -111,4 +111,12 @@
 
 
+\membersection{wxAnimationCtrl::GetInactiveBitmap}\label{wxanimationctrlgetinactivebitmap}
+
+\constfunc{wxBitmap}{GetInactiveBitmap}{\void}
+
+Returns the inactive bitmap shown in this control when the;
+see \helpref{SetInactiveBitmap}{wxanimationctrlsetinactivebitmap} for more info.
+
+
 \membersection{wxAnimationCtrl::IsPlaying}\label{wxanimationctrlisplaying}
 
@@ -144,10 +152,22 @@
 If the previous animation is being played, it's \helpref{Stopped}{wxanimationctrlstop}.
 
-Until \helpref{Play}{wxanimationctrlplay} isn't called, the first frame
-of the animation is displayed.
+Until \helpref{Play}{wxanimationctrlplay} isn't called, a static image, the first
+frame of the given animation or the background colour will be shown
+(see \helpref{SetInactiveBitmap}{wxanimationctrlsetinactivebitmap} for more info).
+
+
+\membersection{wxAnimationCtrl::SetInactiveBitmap}\label{wxanimationctrlsetinactivebitmap}
+
+\func{void}{SetInactiveBitmap}{\param{const wxBitmap\& }{bmp}}
 
-If {\tt wxNullAnimation} is given as animation, the control will be cleared to display
-the background colour (see \helpref{wxWindow::GetBackgroundColour}{wxwindowgetbackgroundcolour}).
+Sets the bitmap to show on the control when it's not playing an animation.
+If you set as inactive bitmap {\tt wxNullBitmap} (which is the default), then the
+first frame of the animation is instead shown when the control is inactive; in this case,
+if there's no valid animation associated with the control (see \helpref{SetAnimation}{wxanimationctrlsetanimation}),
+then the background colour of the window is shown.
 
+If the control is not playing the animation, the given bitmap will be immediately
+shown, otherwise it will be shown as soon as \helpref{Stop}{wxanimationctrlstop}
+is called.
 
 \membersection{wxAnimationCtrl::Stop}\label{wxanimationctrlstop}
@@ -156,4 +176,6 @@
 
 Stops playing the animation.
-The control will show the last frame rendered of the current animation until \helpref{Play}{wxanimationctrlplay} is called.
+The control will show the first frame of the animation, a custom static image or
+the window's background colour as specified by the
+last \helpref{SetInactiveBitmap}{wxanimationctrlsetinactivebitmap} call.
 
Index: include/wx/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/animate.h,v
retrieving revision 1.5
diff -bu2 -r1.5 include/wx/animate.h
--- include/wx/animate.h
+++ include/wx/animate.h
@@ -65,5 +65,4 @@
 #define wxAC_DEFAULT_STYLE       (wxNO_BORDER)
 
-
 class WXDLLIMPEXP_ADV wxAnimationCtrlBase : public wxControl
 {
@@ -83,4 +82,12 @@
     virtual bool IsPlaying() const = 0;
 
+    virtual void SetInactiveBitmap(const wxBitmap &bmp)
+        { m_bmpStatic=bmp; }
+    wxBitmap GetInactiveBitmap() const
+        { return m_bmpStatic; }
+
+protected:
+    wxBitmap m_bmpStatic;
+
 private:
     DECLARE_ABSTRACT_CLASS(wxAnimationCtrlBase)
Index: include/wx/generic/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/animate.h,v
retrieving revision 1.6
diff -bu2 -r1.6 include/wx/generic/animate.h
--- include/wx/generic/animate.h
+++ include/wx/generic/animate.h
@@ -109,4 +109,6 @@
         { return m_animation; }
 
+    void SetInactiveBitmap(const wxBitmap &bmp);
+
 public:     // event handlers
 
@@ -141,7 +143,9 @@
 
     // Draw the background; use this when e.g. previous frame had wxANIM_TOBACKGROUND disposal.
+    void DisposeToBackground();
     void DisposeToBackground(wxDC& dc);
     void DisposeToBackground(wxDC& dc, const wxPoint &pos, const wxSize &sz);
 
+    void UpdateBackingStoreWithStaticImage();
     void IncrementalUpdateBackingStore();
     bool RebuildBackingStoreUpToFrame(size_t);
Index: include/wx/gtk/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/animate.h,v
retrieving revision 1.4
diff -bu2 -r1.4 include/wx/gtk/animate.h
--- include/wx/gtk/animate.h
+++ include/wx/gtk/animate.h
@@ -69,7 +69,4 @@
     GdkPixbufAnimation *m_pixbuf;
 
-    // used temporary by Load()
-    //bool m_bLoadComplete;
-
 private:
     void UnRef();
@@ -133,4 +130,5 @@
 
     bool SetBackgroundColour( const wxColour &colour );
+    void SetInactiveBitmap(const wxBitmap &bmp);
 
 protected:
@@ -139,4 +137,5 @@
     void FitToAnimation();
     void ClearToBackgroundColour();
+    void DisplayStaticImage();
 
     void ResetAnim();
Index: src/common/animatecmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/animatecmn.cpp,v
retrieving revision 1.1
diff -bu2 -r1.1 src/common/animatecmn.cpp
--- src/common/animatecmn.cpp
+++ src/common/animatecmn.cpp
@@ -27,9 +27,6 @@
 wxAnimation wxNullAnimation;
 
-//wxIMPLEMENT_HANDLER_LIST_MANAGER(wxAnimation,
 IMPLEMENT_ABSTRACT_CLASS(wxAnimationBase, wxObject)
 IMPLEMENT_ABSTRACT_CLASS(wxAnimationCtrlBase, wxControl)
 
-
-
 #endif      // wxUSE_ANIMATIONCTRL
Index: src/generic/animateg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/animateg.cpp,v
retrieving revision 1.10
diff -bu2 -r1.10 src/generic/animateg.cpp
--- src/generic/animateg.cpp
+++ src/generic/animateg.cpp
@@ -336,25 +336,17 @@
         FitToAnimation();
 
-    // display first frame
+    // reset frame counter
     m_currentFrame = 0;
-    if (m_animation.IsOk())
-    {
-        if (!RebuildBackingStoreUpToFrame(0))
-        {
-            m_animation = wxNullAnimation;
-            return;
-        }
-    }
-    else
-    {
-        // clear to
-        wxMemoryDC dc;
-        dc.SelectObject(m_backingStore);
 
-        // Draw the background
-        DisposeToBackground(dc);
-    }
+    UpdateBackingStoreWithStaticImage();
+}
 
-    Refresh();
+void wxAnimationCtrl::SetInactiveBitmap(const wxBitmap &bmp)
+{
+    wxAnimationCtrlBase::SetInactiveBitmap(bmp);
+
+    // if not playing, update the backing store now
+    if (!IsPlaying())
+        UpdateBackingStoreWithStaticImage();
 }
 
@@ -371,7 +363,8 @@
 void wxAnimationCtrl::Stop()
 {
-    // leave current frame displayed until Play() is called again
     m_timer.Stop();
     m_isPlaying = false;
+
+    UpdateBackingStoreWithStaticImage();
 }
 
@@ -393,4 +386,8 @@
     m_isPlaying = true;
 
+    // do a ClearBackground() to avoid that e.g. the custom static bitmap which
+    // was eventually shown previously remains partially drawn
+    ClearBackground();
+
     // DrawCurrentFrame() will use our updated backing store
     wxClientDC clientDC(this);
@@ -506,4 +503,27 @@
 }
 
+void wxAnimationCtrl::UpdateBackingStoreWithStaticImage()
+{
+    wxASSERT(!IsPlaying());
+
+    if (m_bmpStatic.IsOk())
+    {
+        // copy the inactive bitmap in the backing store
+        m_backingStore = m_bmpStatic;
+    }
+    else
+    {
+        // put in the backing store the first frame of the animation
+        if (!m_animation.IsOk() ||
+            !RebuildBackingStoreUpToFrame(0))
+        {
+            m_animation = wxNullAnimation;
+            DisposeToBackground();
+        }
+    }
+
+    Refresh();
+}
+
 void wxAnimationCtrl::DrawFrame(wxDC &dc, size_t frame)
 {
@@ -524,5 +544,13 @@
 
     // m_backingStore always contains the current frame
-    dc.DrawBitmap(m_backingStore, 0, 0);
+    dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+}
+
+void wxAnimationCtrl::DisposeToBackground()
+{
+    // clear the backing store
+    wxMemoryDC dc;
+    dc.SelectObject(m_backingStore);
+    DisposeToBackground(dc);
 }
 
@@ -557,8 +585,12 @@
     wxPaintDC dc(this);
 
-    // both if we are playing or not, we need to refresh the current frame
     if ( m_backingStore.IsOk() )
         DrawCurrentFrame(dc);
-    //else: m_animation is not valid and thus we don't have a valid backing store...
+    else
+    {
+        // m_animation is not valid and thus we don't have a valid backing store...
+        // clear then our area to the background colour
+        DisposeToBackground(dc);
+    }
 }
 
@@ -571,6 +603,5 @@
         if (!m_looped)
         {
-            m_timer.Stop();
-            m_isPlaying = false;
+            Stop();
             return;
         }
Index: src/gtk/animate.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/animate.cpp,v
retrieving revision 1.5
diff -bu2 -r1.5 src/gtk/animate.cpp
--- src/gtk/animate.cpp
+++ src/gtk/animate.cpp
@@ -118,5 +118,4 @@
     g_signal_connect(loader, "area-updated", G_CALLBACK(gdk_pixbuf_area_updated), this);
 
-    //m_bLoadComplete = false;
     guchar buf[2048];
     while (stream.IsOk())
@@ -140,5 +139,4 @@
         return false;
     }
-    //m_bLoadComplete = true;
 
     // wait until we get the last area_updated signal
@@ -260,14 +258,7 @@
         if (!this->HasFlag(wxAC_NO_AUTORESIZE))
             FitToAnimation();
-
-        // display first frame
-        gtk_image_set_from_pixbuf(GTK_IMAGE(m_widget),
-                                  gdk_pixbuf_animation_get_static_image(m_anim));
-    }
-    else
-    {
-        // we need to clear the control to the background colour
-        ClearToBackgroundColour();
     }
+
+    DisplayStaticImage();
 }
 
@@ -281,6 +272,4 @@
 
     // update our size to fit animation
-    //if (w > 0 && h > 0)
-//        gtk_widget_set_size_request(m_widget, w, h);
         SetSize(w, h);
 }
@@ -325,4 +314,47 @@
         m_timer.Stop();
     m_bPlaying = false;
+
+    ResetIter();
+    DisplayStaticImage();
+}
+
+void wxAnimationCtrl::SetInactiveBitmap(const wxBitmap &bmp)
+{
+    wxAnimationCtrlBase::SetInactiveBitmap(bmp);
+
+    // update the pixbuf associated with m_widget now...
+    if (!IsPlaying())
+        DisplayStaticImage();
+}
+
+void wxAnimationCtrl::DisplayStaticImage()
+{
+    wxASSERT(!IsPlaying());
+
+    if (m_bmpStatic.IsOk())
+    {
+        // show inactive bitmap
+        GdkBitmap *mask = (GdkBitmap *) NULL;
+        if (m_bmpStatic.GetMask())
+            mask = m_bmpStatic.GetMask()->GetBitmap();
+
+        if (m_bmpStatic.HasPixbuf())
+        {
+            gtk_image_set_from_pixbuf(GTK_IMAGE(m_widget),
+                                        m_bmpStatic.GetPixbuf());
+        }
+        else
+        {
+            gtk_image_set_from_pixmap(GTK_IMAGE(m_widget),
+                                        m_bmpStatic.GetPixmap(), mask);
+        }
+    }
+    else
+    {
+        // even if not clearly documented, gdk_pixbuf_animation_get_static_image()
+        // always returns the first frame of the animation
+        gtk_image_set_from_pixbuf(GTK_IMAGE(m_widget),
+                                    gdk_pixbuf_animation_get_static_image(m_anim));
+    }
 }
 
@@ -359,6 +391,4 @@
     gdk_pixbuf_fill(newpix, col);
 
-    wxLogDebug(wxT("Clearing to background %s"), clr.GetAsString().c_str());
-
     gtk_image_set_from_pixbuf(GTK_IMAGE(m_widget), newpix);
     g_object_unref(newpix);

 	  	 

Index: sizer.cpp
===================================================================
--- sizer.cpp	(revision 63512)
+++ sizer.cpp	(working copy)
@@ -2034,10 +2034,12 @@
     // the position at which we put the next child
     wxPoint pt(m_position);
 
-    int totalProportion = m_totalProportion;
+    // initialize sizes in major direction with minimum sizes
+    wxArrayInt majorSizes;
+    wxSizerItemList stretchableChildren;
     for ( i = m_children.begin();
-          i != m_children.end();
-          ++i )
+        i != m_children.end();
+        ++i )
     {
         wxSizerItem * const item = *i;
 
@@ -2047,26 +2049,77 @@
         const wxSize sizeThis(item->GetMinSizeWithBorder());
 
         // adjust the size in the major direction using the proportion
-        wxCoord majorSize = GetSizeInMajorDir(sizeThis);
+        majorSizes.Add(GetSizeInMajorDir(sizeThis));
 
-        // if there is not enough space, don't try to distribute negative space
-        // among the children, this would result in overlapping windows which
-        // we don't want
-        if ( delta > 0 )
+        if( item->IsShown() && item->GetProportion())
+            stretchableChildren.push_back(item);
+    }
+
+    // distribute delta space to children, adhering to min/max limits
+    int totalProportion = m_totalProportion;
+    int newTotalProportion = totalProportion;
+    while ( delta > 0 && !stretchableChildren.empty() )
+    {        
+        wxSizerItemList::iterator it;
+        for ( it = stretchableChildren.begin();
+            it != stretchableChildren.end(); )
         {
+            // if there is not enough space, don't try to distribute negative space
+            // among the children, this would result in overlapping windows which
+            // we don't want
+            if ( delta <= 0 )
+                break;
+
+            wxSizerItem * const item = *it;
+
+            // get max size in the major direction
+            wxCoord maxMajorSize;
+            if ( item->IsWindow() )
+                maxMajorSize = GetSizeInMajorDir(item->GetWindow()->GetMaxSize());
+            else
+                maxMajorSize = -1; // non-windows have a min size but not max
+
+            const int idx = m_children.IndexOf(item);
+            wxCoord& majorSize = majorSizes.Item(idx);
+
             const int propItem = item->GetProportion();
-            if ( propItem )
-            {
-                const int deltaItem = (delta * propItem) / totalProportion;
+            int deltaItem = ceil((delta * propItem) / (float)totalProportion);
 
-                majorSize += deltaItem;
+            // don't allow size to go beyond max size
+            if ( maxMajorSize!=-1 && majorSize+deltaItem>maxMajorSize )
+                deltaItem = maxMajorSize - majorSize;
 
-                delta -= deltaItem;
-                totalProportion -= propItem;
+            totalProportion -= propItem;
+            majorSize += deltaItem;
+            delta -= deltaItem;
+
+            // erase element from list if it's reached the max
+            if ( maxMajorSize!=-1 && majorSize>=maxMajorSize ) {
+                newTotalProportion -= propItem;
+                it = stretchableChildren.erase(it);
             }
+            else
+                ++it;
         }
+        totalProportion = newTotalProportion;
+    }
 
+    // apply sizes to children
+    for ( i = m_children.begin();
+        i != m_children.end();
+        ++i )
+    {
+        wxSizerItem * const item = *i;
+        const int idx = m_children.IndexOf(item);
 
+        if ( !item->IsShown() )
+            continue;
+
+        const wxSize sizeThis(item->GetMinSizeWithBorder());
+
+        // adjust the size in the major direction using the proportion
+        const wxCoord majorSize = majorSizes.Item(idx);
+
         // apply the alignment in the minor direction
         wxPoint posChild(pt);
 

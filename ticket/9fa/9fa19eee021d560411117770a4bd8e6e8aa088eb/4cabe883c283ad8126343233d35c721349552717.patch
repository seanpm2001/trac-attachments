Index: include/wx/xrc/xh_sizer.h
===================================================================
--- include/wx/xrc/xh_sizer.h	(revision 63701)
+++ include/wx/xrc/xh_sizer.h	(working copy)
@@ -27,13 +27,16 @@
     virtual wxObject *DoCreateResource();
     virtual bool CanHandle(wxXmlNode *node);
 
+protected:
+    virtual wxSizer* DoCreateSizer(const wxString& class_name);
+    virtual bool IsSizerNode(wxXmlNode *node);
+
 private:
     bool m_isInside;
     bool m_isGBS;
 
     wxSizer *m_parentSizer;
 
-    bool IsSizerNode(wxXmlNode *node);
 
     wxObject* Handle_sizeritem();
     wxObject* Handle_spacer();
Index: interface/wx/xrc/xh_sizer.h
===================================================================
--- interface/wx/xrc/xh_sizer.h	(revision 0)
+++ interface/wx/xrc/xh_sizer.h	(revision 0)
@@ -0,0 +1,87 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        xrc/xh_sizer.h
+// Purpose:     XML resource handler for wxSizer
+// Author:      wxWidgets team
+// RCS-ID:      $Id:  $
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxSizerXmlHandler
+
+    @class wxXmlResourceHandler
+
+    wxSizerXmlHandler is a class for resource handlers capable of creating
+    a wxSizer object from an XML node.
+
+    @see wxXmlResourceHandler, wxSizer
+
+    @library{wxxrc}
+    @category{xrc}
+*/
+class wxSizerXmlHandler : public wxXmlResourceHandler
+{
+public:
+    /**
+        Constructor.
+        Initializes the attributes and adds the supported styles.
+    */
+    wxSizerXmlHandler();
+    /**
+        Creates a sizer, sizeritem or spacer object, depending on
+        the current handled node.
+        @see wxXmlResourceHandler::DoCreateResource().
+    */
+    virtual wxObject *DoCreateResource();
+    /**
+        Returns @true if the given node can be handled by this class.
+        If the node concerns a sizer object, the method IsSizerNode is called
+        to know if the class is managed or not.
+        If the node concerns a sizer item or a spacer, @true is returned.
+        Otherwise @false is returned.
+        @see wxXmlResourceHandler::CanHandle().
+    */
+    virtual bool CanHandle(wxXmlNode *node);
+
+protected:
+    /**
+        Creates an object of type wxSizer from the XML node content.
+        This method can be overloaded to manage a personalized sizer.
+        Example of use of this method:
+        @code
+            void MySizerXmlHandler::DoCreateSizer(const wxString& class_name)
+            {
+                if (class_name == wxT("MySizer"))
+                    return Handle_MySizer();
+                else
+                    return wxSizerXmlHandler::DoCreateSizer(class_name);
+            }
+          
+        private:
+
+            wxSizer* MySizerXmlHandler::Handle_MySizer()
+            {
+                //Create your own sizer here from XRC content (see
+                //wxXmlResource methods) and return the instance.
+            }
+        @endcode
+    */
+    virtual wxSizer* DoCreateSizer(const wxString& class_name);
+    /**
+        Used by the method CanHandle to know if the given node contains some
+        understandable sizer data.
+        This method should be overloaded to let the program know it can handle
+        a personalized sizer.
+        Example of use of this method:
+        @code
+            bool MySizerXmlHandler::IsSizerNode(wxXmlNode *node)
+            {
+                return (IsOfClass(node, wxT("MySizer")) ||
+                        wxSizerXmlHandler::IsSizerNode(node));
+            }
+        @endcode
+    */
+    virtual bool IsSizerNode(wxXmlNode *node);
+
+};
+
Index: src/xrc/xh_sizer.cpp
===================================================================
--- src/xrc/xh_sizer.cpp	(revision 63701)
+++ src/xrc/xh_sizer.cpp	(working copy)
@@ -115,8 +115,39 @@
 }
 
 
+wxSizer* wxSizerXmlHandler::DoCreateSizer(const wxString& class_name)
+{
+    if (class_name == wxT("wxBoxSizer"))
+        return Handle_wxBoxSizer();
+#if wxUSE_STATBOX
+    else if (class_name == wxT("wxStaticBoxSizer"))
+        return Handle_wxStaticBoxSizer();
+#endif
+    else if (class_name == wxT("wxGridSizer"))
+    {
+        if ( !ValidateGridSizerChildren() )
+            return NULL;
+        return Handle_wxGridSizer();
+    }
+    else if (class_name == wxT("wxFlexGridSizer"))
+    {
+        return Handle_wxFlexGridSizer();
+    }
+    else if (class_name == wxT("wxGridBagSizer"))
+    {
+        return Handle_wxGridBagSizer();
+    }
+    else if (class_name == wxT("wxWrapSizer"))
+    {
+        return Handle_wxWrapSizer();
+    }
 
+    ReportError(wxString::Format("unknown sizer class \"%s\"", class_name));
+    return NULL;
+}
 
+
+
 bool wxSizerXmlHandler::IsSizerNode(wxXmlNode *node)
 {
     return (IsOfClass(node, wxT("wxBoxSizer"))) ||
@@ -208,36 +239,11 @@
         return NULL;
     }
 
-    if (m_class == wxT("wxBoxSizer"))
-        sizer = Handle_wxBoxSizer();
-#if wxUSE_STATBOX
-    else if (m_class == wxT("wxStaticBoxSizer"))
-        sizer = Handle_wxStaticBoxSizer();
-#endif
-    else if (m_class == wxT("wxGridSizer"))
+    sizer = DoCreateSizer(m_class);
+    if (sizer->IsKindOf(CLASSINFO(wxFlexGridSizer)))
     {
-        if ( !ValidateGridSizerChildren() )
-            return NULL;
-        sizer = Handle_wxGridSizer();
+        flexsizer = wxDynamicCast(sizer, wxFlexGridSizer);
     }
-    else if (m_class == wxT("wxFlexGridSizer"))
-    {
-        flexsizer = Handle_wxFlexGridSizer();
-        sizer = flexsizer;
-    }
-    else if (m_class == wxT("wxGridBagSizer"))
-    {
-        flexsizer = Handle_wxGridBagSizer();
-        sizer = flexsizer;
-    }
-    else if (m_class == wxT("wxWrapSizer"))
-    {
-        sizer = Handle_wxWrapSizer();
-    }
-    else
-    {
-        ReportError(wxString::Format("unknown sizer class \"%s\"", m_class));
-    }
 
     // creation of sizer failed for some (already reported) reason, so exit:
     if ( !sizer )

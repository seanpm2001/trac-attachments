--- window.cpp	2005-01-27 02:52:32.000000000 +0800
+++ window.cpp.patched	2005-01-27 01:48:56.000000000 +0800
@@ -1114,4 +1114,5 @@
     
 #ifdef __WXGTK20__
+/*    
     // We have to pass key press events through GTK+'s Input Method context
     // object in order to get correct characters. By doing so, we loose the
@@ -1130,23 +1131,57 @@
     bool useIM = (win->m_imData != NULL) &&
                  memcmp(gdk_event, &s_lastEvent, sizeof(GdkEventKey)) != 0;
+*/
     
-    s_lastEvent = *gdk_event;
+    //  2005.01.26 modified by PCMan (hzysoft@sina.com.tw):
+    //  There is no need to store lastEvent.
+    //  Though preserved essential keyEvents, the original code makes GTK+ IM dysfunction.
+    //  So I make this little fix.  Let me explain what I thought in brief.
+    //  When we get a key_press event here, it could be ORIGINATE from CURRENT widgets or its
+    //  child widgets.  However, only the widgets with INPUT FOCUS can generate the INITIAL
+    //  key_press event.  That is, if CURRENT widget doesn't has the FOCUS at all, this event
+    //  is definitely originated from its child widgets and shouldn't be passed to IM context.
+    //  In fact, what a GTK+ IM should do is filtering keyEvents and convert them into text input
+    //  ONLY WHEN THE WIDGET HAS INPUT FOCUS.  Besides, when current widgets has both IM context
+    //  and input focus, the event should be filtered by gtk_im_context_filter_keypress().
+    //  Then, we should, according to GTK+ 2.0 API doc, return whatever it returns.
+    bool useIM = (win->m_imData != NULL) && ( wxWindow::FindFocus() == win );
+
+//    s_lastEvent = *gdk_event;
 #endif
     
-    wxKeyEvent event( wxEVT_KEY_DOWN );
-    if ( !wxTranslateGTKKeyEventToWx(event, win, gdk_event) )
-    {
-        // unknown key pressed, ignore (the event would be useless anyhow)
 #ifdef __WXGTK20__
+    //  2005.01.26 modified by PCMan (hzysoft@sina.com.tw):
+    //  We should let GTK+ IM filter key event first.
+    //  According to GTK+ 2.0 API doc, if IM filter returns true, NO FURTHER PROCESSING 
+    //  SHOULD BE DONE for this keystroke.
+    //  Making wxWidgets unable to receive EVT_KEY_DOWN in this situation is resonable.
+    //  In reality, when IM is activated, wxWidgets should receive EVT_CHAR instead.
         if ( useIM )
         {
             // it may be useful for the input method, though:
-            win->m_imData->lastKeyEvent = gdk_event;
-            bool ret = gtk_im_context_filter_keypress(win->m_imData->context,
-                                                      gdk_event);
+        bool ret = gtk_im_context_filter_keypress(win->m_imData->context, gdk_event);
             win->m_imData->lastKeyEvent = NULL;
+        if( ret )
+        {
+            wxLogTrace(TRACE_KEYS, _T("Key event intercepted by IM"));
             return ret;
         }
+    }
 #endif
+
+    wxKeyEvent event( wxEVT_KEY_DOWN );
+    if ( !wxTranslateGTKKeyEventToWx(event, win, gdk_event) )
+    {
+        // unknown key pressed, ignore (the event would be useless anyhow)
+        // 2005.02.22 modified by PCMan.
+        // In GTK+ 1.2, strings sent by IMs are also regarded as key_press events whose 
+        // keyCodes cannot be recognized by wxWidgets. These MBCS strings, however, are 
+        // composed of more than one character, which means gdk_event->length will always 
+        // greater than one.
+        // When gtk_event->length == 1, this may be an ASCII character and can be translated 
+        // by WX.  However, when MBCS characters are sent by IM, gdk_event->length will >= 2.
+        // So when gdk_event->length >= 2, this is not an invalid key but a part of a string 
+        // sent by IM which contains user input and shouldn't be ignored.
+        if ( gdk_event->length <= 1 ) // Only ignore those keys whose gdk_event->length <=1.
         return FALSE;
     }
@@ -1179,24 +1214,4 @@
     if (!ret)
     {
-#ifdef __WXGTK20__
-        if (useIM)
-        {
-            // In GTK 2.0, we need to hand over the key event to an input method
-            // and the IM will emit a "commit" event containing the actual utf8
-            // character.  In that case the EVT_CHAR events will be sent from
-            // there.
-            win->m_imData->lastKeyEvent = gdk_event;
-            if ( gtk_im_context_filter_keypress(win->m_imData->context,
-                                                gdk_event) )
-            {
-                win->m_imData->lastKeyEvent = NULL;
-                wxLogTrace(TRACE_KEYS, _T("Key event intercepted by IM"));
-                return TRUE;
-            }
-            else
-                win->m_imData->lastKeyEvent = NULL;
-        }
-#endif
-
         long key_code;
         KeySym keysym = gdk_event->keyval;

 	  	 

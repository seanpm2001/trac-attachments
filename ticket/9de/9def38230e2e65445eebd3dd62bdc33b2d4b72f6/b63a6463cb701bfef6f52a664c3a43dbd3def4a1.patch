Index: include/wx/docview.h
===================================================================
--- include/wx/docview.h	(revision 67201)
+++ include/wx/docview.h	(working copy)
@@ -209,6 +209,9 @@
     wxString GetViewName() const { return m_viewTypeName; }
     void SetViewName(const wxString& name) { m_viewTypeName = name; }
 
+    wxWindow *GetWindow() const { return m_viewWindow; }
+    void SetWindow(wxWindow *window) { m_viewWindow = window; }
+
     wxWindow *GetFrame() const { return m_viewFrame ; }
     void SetFrame(wxWindow *frame) { m_viewFrame = frame; }
 
@@ -259,6 +262,7 @@
     wxDocument*       m_viewDocument;
     wxString          m_viewTypeName;
     wxWindow*         m_viewFrame;
+    wxWindow*         m_viewWindow;
 
     wxDocChildFrameAnyBase *m_docChildFrame;
 
Index: interface/wx/docview.h
===================================================================
--- interface/wx/docview.h	(revision 67201)
+++ interface/wx/docview.h	(working copy)
@@ -841,10 +841,23 @@
         "frame" is not a wxFrame at all in the generic MDI implementation which
         uses notebook pages instead of frames and this is why this method
         returns a wxWindow and not a wxFrame.
+
+        @return
+            A pointer to the frame holding the view if one is specified with SetFrame(), else NULL.
     */
     wxWindow* GetFrame() const;
 
     /**
+        Gets the window associated with the view (if any).
+
+        @return
+            A pointer to the window associated with the view if one is specified with SetWindow(), else NULL.
+
+        @since 2.9.2
+    */
+    wxWindow* GetWindow() const;
+
+    /**
         Gets the name associated with the view (passed to the wxDocTemplate
         constructor). Not currently used by the framework.
     */
@@ -930,6 +943,14 @@
     virtual void SetDocument(wxDocument* doc);
 
     /**
+        Sets the window associated with this view. The application should call
+        this if possible.
+
+        @since 2.9.2
+    */
+    void SetWindow(wxWindow* frame);
+
+    /**
         Sets the frame associated with this view. The application should call
         this if possible, to tell the view about the frame.
 
Index: samples/docview/view.cpp
===================================================================
--- samples/docview/view.cpp	(revision 67201)
+++ samples/docview/view.cpp	(working copy)
@@ -52,13 +52,14 @@
         // create a new window and canvas inside it
         wxFrame* frame = app.CreateChildFrame(this, true);
         wxASSERT(frame == GetFrame());
-        m_canvas = new MyCanvas(this);
+        SetWindow(new MyCanvas(this));
     }
     else // single document mode
     {
         // reuse the existing window and canvas
-        m_canvas = app.GetMainWindowCanvas();
-        m_canvas->SetView(this);
+        MyCanvas* canvas = app.GetMainWindowCanvas();
+        canvas->SetView(this);
+        SetWindow(canvas);
 
         // Initialize the edit menu Undo and Redo items
         doc->GetCommandProcessor()->SetEditMenu(app.GetMainWindowEditMenu());
@@ -101,8 +102,8 @@
 void DrawingView::OnUpdate(wxView* sender, wxObject* hint)
 {
     wxView::OnUpdate(sender, hint);
-    if ( m_canvas )
-        m_canvas->Refresh();
+    if ( GetWindow() )
+        GetWindow()->Refresh();
 }
 
 // Clean up windows used for displaying the view.
@@ -116,10 +117,12 @@
     // Clear the canvas in single-window mode in which it stays alive
     if ( wxGetApp().GetMode() == MyApp::Mode_Single )
     {
-        m_canvas->ClearBackground();
-        m_canvas->ResetView();
-        m_canvas = NULL;
+        MyCanvas* canvas = GetCanvas();
 
+        canvas->ClearBackground();
+        canvas->ResetView();
+        SetWindow(NULL);
+
         if (GetFrame())
             wxStaticCast(GetFrame(), wxFrame)->SetTitle(wxTheApp->GetAppDisplayName());
     }
@@ -160,9 +163,9 @@
 
     wxFrame* frame = wxGetApp().CreateChildFrame(this, false);
     wxASSERT(frame == GetFrame());
-    m_text = new wxTextCtrl(frame, wxID_ANY, "",
+    SetWindow(new wxTextCtrl(frame, wxID_ANY, "",
                             wxDefaultPosition, wxDefaultSize,
-                            wxTE_MULTILINE);
+                            wxTE_MULTILINE));
     frame->Show();
 
     return true;
@@ -182,7 +185,7 @@
 
     if ( wxGetApp().GetMode() == MyApp::Mode_Single )
     {
-        m_text->Clear();
+        GetText()->Clear();
     }
     else // not single window mode
     {
@@ -315,7 +318,7 @@
 
     wxFrame* frame = wxGetApp().CreateChildFrame(this, false);
     wxASSERT(frame == GetFrame());
-    m_canvas = new ImageCanvas(this);
+    SetWindow(new ImageCanvas(this));
     frame->Show();
 
     return true;
@@ -327,7 +330,7 @@
     wxImage image = GetDocument()->GetImage();
     if ( image.IsOk() )
     {
-        m_canvas->SetVirtualSize(image.GetWidth(), image.GetHeight());
+        GetCanvas()->SetVirtualSize(image.GetWidth(), image.GetHeight());
     }
 }
 
Index: samples/docview/view.h
===================================================================
--- samples/docview/view.h	(revision 67201)
+++ samples/docview/view.h	(working copy)
@@ -67,7 +67,7 @@
 class DrawingView : public wxView
 {
 public:
-    DrawingView() : wxView(), m_canvas(NULL) {}
+    DrawingView() : wxView() {}
 
     virtual bool OnCreate(wxDocument *doc, long flags);
     virtual void OnDraw(wxDC *dc);
@@ -76,11 +76,14 @@
 
     DrawingDocument* GetDocument();
 
+    MyCanvas *GetCanvas() const
+    {
+        return static_cast<MyCanvas*>(GetWindow());
+    }
+
 private:
     void OnCut(wxCommandEvent& event);
 
-    MyCanvas *m_canvas;
-
     DECLARE_EVENT_TABLE()
     DECLARE_DYNAMIC_CLASS(DrawingView)
 };
@@ -93,21 +96,22 @@
 class TextEditView : public wxView
 {
 public:
-    TextEditView() : wxView(), m_text(NULL) {}
+    TextEditView() : wxView() {}
 
     virtual bool OnCreate(wxDocument *doc, long flags);
     virtual void OnDraw(wxDC *dc);
     virtual bool OnClose(bool deleteWindow = true);
 
-    wxTextCtrl *GetText() const { return m_text; }
+    wxTextCtrl *GetText() const
+    {
+        return wxStaticCast(GetWindow(), wxTextCtrl);
+    }
 
 private:
-    void OnCopy(wxCommandEvent& WXUNUSED(event)) { m_text->Copy(); }
-    void OnPaste(wxCommandEvent& WXUNUSED(event)) { m_text->Paste(); }
-    void OnSelectAll(wxCommandEvent& WXUNUSED(event)) { m_text->SelectAll(); }
+    void OnCopy(wxCommandEvent& WXUNUSED(event)) { GetText()->Copy(); }
+    void OnPaste(wxCommandEvent& WXUNUSED(event)) { GetText()->Paste(); }
+    void OnSelectAll(wxCommandEvent& WXUNUSED(event)) { GetText()->SelectAll(); }
 
-    wxTextCtrl *m_text;
-
     DECLARE_EVENT_TABLE()
     DECLARE_DYNAMIC_CLASS(TextEditView)
 };
@@ -142,9 +146,12 @@
 
     ImageDocument* GetDocument();
 
+    ImageCanvas* GetCanvas() const
+    {
+        return static_cast<ImageCanvas*>(GetWindow());
+    }
+
 private:
-    ImageCanvas* m_canvas;
-
     DECLARE_DYNAMIC_CLASS(ImageView)
 };
 
Index: src/common/docview.cpp
===================================================================
--- src/common/docview.cpp	(revision 67201)
+++ src/common/docview.cpp	(working copy)
@@ -642,9 +642,8 @@
 wxView::wxView()
 {
     m_viewDocument = NULL;
-
+    m_viewWindow = NULL;
     m_viewFrame = NULL;
-
     m_docChildFrame = NULL;
 }
 

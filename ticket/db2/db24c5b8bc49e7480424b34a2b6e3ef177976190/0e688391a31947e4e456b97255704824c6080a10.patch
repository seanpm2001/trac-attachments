diff -ru wxWidgets.orig/include/wx/msw/statbmp.h wxWidgets/include/wx/msw/statbmp.h
--- wxWidgets.orig/include/wx/msw/statbmp.h	2005-02-24 19:26:46.000000000 +1100
+++ wxWidgets/include/wx/msw/statbmp.h	2005-08-30 18:33:24.000000000 +1000
@@ -73,9 +73,6 @@
     // implementation only from now on
     // -------------------------------
 
-    // implement base class virtuals
-    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
-
 protected:
     virtual wxBorder GetDefaultBorder() const;
     virtual wxSize DoGetBestSize() const;
diff -ru wxWidgets.orig/src/msw/statbmp.cpp wxWidgets/src/msw/statbmp.cpp
--- wxWidgets.orig/src/msw/statbmp.cpp	2005-05-18 12:22:59.000000000 +1000
+++ wxWidgets/src/msw/statbmp.cpp	2005-08-30 18:33:08.000000000 +1000
@@ -188,7 +188,7 @@
 
     // we use SS_CENTERIMAGE to prevent the control from resizing the bitmap to
     // fit to its size -- this is unexpected and doesn't happen in other ports
-    msStyle |= SS_CENTERIMAGE;
+    msStyle |= SS_CENTERIMAGE | SS_NOTIFY;
 
     return msStyle;
 }
@@ -268,28 +268,5 @@
     ::InvalidateRect(GetHwndOf(GetParent()), &rect, TRUE);
 }
 
-WXLRESULT wxStaticBitmap::MSWWindowProc(WXUINT nMsg,
-                                   WXWPARAM wParam,
-                                   WXLPARAM lParam)
-{
-#ifndef __WXWINCE__
-    static int s_useHTClient = -1;
-    if (s_useHTClient == -1)
-        s_useHTClient = wxSystemOptions::GetOptionInt(wxT("msw.staticbitmap.htclient"));
-    if (s_useHTClient == 1)
-    {
-        // Ensure that static items get messages. Some controls don't like this
-        // message to be intercepted (e.g. RichEdit), hence the tests.
-        // Also, this code breaks some other processing such as enter/leave tracking
-        // so it's off by default.
-        
-        if ( nMsg == WM_NCHITTEST )
-            return (long)HTCLIENT;
-    }
-#endif
-
-    return wxWindow::MSWWindowProc(nMsg, wParam, lParam);
-}
-
 #endif // wxUSE_STATBMP
 
diff -ru wxWidgets.orig/src/msw/stattext.cpp wxWidgets/src/msw/stattext.cpp
--- wxWidgets.orig/src/msw/stattext.cpp	2005-07-30 09:25:06.000000000 +1000
+++ wxWidgets/src/msw/stattext.cpp	2005-08-30 18:33:08.000000000 +1000
@@ -123,6 +123,7 @@
     else
         msStyle |= SS_LEFT;
 
+    msStyle |= SS_NOTIFY;
     return msStyle;
 }
 
diff -ru wxWidgets.orig/src/msw/window.cpp wxWidgets/src/msw/window.cpp
--- wxWidgets.orig/src/msw/window.cpp	2005-08-30 09:50:51.000000000 +1000
+++ wxWidgets/src/msw/window.cpp	2005-08-30 18:33:08.000000000 +1000
@@ -165,8 +165,10 @@
 // get the text metrics for the current font
 static TEXTMETRIC wxGetTextMetrics(const wxWindowMSW *win);
 
+#if defined(__WXUNIVERSAL__) || defined(__WXWINCE__)
 // find the window for the mouse event at the specified position
 static wxWindowMSW *FindWindowForMouseEvent(wxWindowMSW *win, int *x, int *y); //TW:REQ:Univ
+#endif // __WXUNIVERSAL__ || __WXWINCE__
 
 // wrapper around BringWindowToTop() API
 static inline void wxBringWindowToTop(HWND hwnd)
@@ -2503,6 +2505,7 @@
                 int x = GET_X_LPARAM(lParam),
                     y = GET_Y_LPARAM(lParam);
 
+#if defined(__WXUNIVERSAL__) || defined(__WXWINCE__)
                 // redirect the event to a static control if necessary by
                 // finding one under mouse
                 wxWindowMSW *win;
@@ -2520,6 +2523,9 @@
                     wxCHECK_MSG( win, 0,
                                  _T("FindWindowForMouseEvent() returned NULL") );
                 }
+#else
+                wxWindowMSW *win = this;
+#endif // __WXUNIVERSAL__ || __WXWINCE__
 
                 processed = win->HandleMouseEvent(message, x, y, wParam);
 
@@ -4468,6 +4474,7 @@
 #endif // wxUSE_MOUSEEVENT_HACK
 }
 
+#if defined(__WXUNIVERSAL__) || defined(__WXWINCE__)
 // Windows doesn't send the mouse events to the static controls (which are
 // transparent in the sense that their WM_NCHITTEST handler returns
 // HTTRANSPARENT) at all but we want all controls to receive the mouse events
@@ -4531,6 +4538,7 @@
 
     return win;
 }
+#endif // __WXUNIVERSAL__ || __WXWINCE__
 
 bool wxWindowMSW::HandleMouseEvent(WXUINT msg, int x, int y, WXUINT flags)
 {

 	  	 

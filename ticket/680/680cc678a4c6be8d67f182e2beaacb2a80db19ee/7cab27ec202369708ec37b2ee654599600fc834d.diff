diff --git a/samples/uiaction/uiaction.cpp b/samples/uiaction/uiaction.cpp
index d3de14ce4d..4cf999bd14 100644
--- a/samples/uiaction/uiaction.cpp
+++ b/samples/uiaction/uiaction.cpp
@@ -34,6 +34,7 @@
 #endif
 
 #include "wx/stopwatch.h"
+#include "wx/grid.h"
 
 // ----------------------------------------------------------------------------
 // resources
@@ -87,7 +88,8 @@ public:
 private:
     wxButton* m_button;
     wxTextCtrl* m_text;
-
+    wxGrid* m_grid;
+    
     wxDECLARE_EVENT_TABLE();
 };
 
@@ -171,10 +173,28 @@ MyFrame::MyFrame(const wxString& title)
     m_button = new wxButton(panel, wxID_ANY, "&Button");
     sizer->Add(m_button, wxSizerFlags().Centre().Border());
 
+    m_grid = new wxGrid(panel, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
+    m_grid->CreateGrid(5, 5);
+    m_grid->EnableEditing(true);
+    m_grid->EnableGridLines(true);
+    m_grid->EnableDragGridSize(false);
+    m_grid->SetMargins(0, 0);
+    m_grid->EnableDragColMove(false);
+    m_grid->EnableDragColSize(true);
+    m_grid->SetColLabelSize(30);
+    m_grid->SetColLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
+    m_grid->EnableDragRowSize(true);
+    m_grid->SetRowLabelSize(80);
+    m_grid->SetRowLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
+    m_grid->SetDefaultCellAlignment(wxALIGN_LEFT, wxALIGN_TOP);
+    sizer->Add(m_grid, 0, wxALL, 5);
+
     m_text = new wxTextCtrl(panel, wxID_ANY, "",
                             wxDefaultPosition, wxDefaultSize,
                             wxTE_MULTILINE);
     sizer->Add(m_text, wxSizerFlags(1).Expand().Border());
+    
+    this->SetSize(600,400);
 }
 
 
@@ -185,6 +205,32 @@ void MyFrame::OnNew(wxCommandEvent& WXUNUSED(event))
     m_text->AppendText("\"New\" menu item was selected\n");
 }
 
+static wxPoint GetTargetCenter(const wxGrid* const gridPtr, const int rowIndex, const int colIndex)
+{
+    if (!gridPtr || gridPtr->GetNumberRows() <= rowIndex || gridPtr->GetNumberCols() <= colIndex)
+    {
+        return wxDefaultPosition;
+    }
+    const wxPoint gridScreenPos = gridPtr->GetScreenPosition();
+    const wxRect cellRect = gridPtr->CellToRect(rowIndex, colIndex);
+    int xOffset = gridPtr->GetRowLabelSize(); // Returns the current width of the row labels.
+    for (int i = 0; i < colIndex; ++i)
+    {
+        xOffset += gridPtr->CellToRect(rowIndex, colIndex).GetWidth();
+    }
+    int yOffset = gridPtr->GetColLabelSize(); // Returns the current height of the column labels.
+    for (int i = 0; i < rowIndex; ++i)
+    {
+        yOffset += gridPtr->CellToRect(rowIndex, colIndex).GetHeight();
+    }
+
+    const wxPoint gridCellCenter(gridScreenPos +  // Screen coordinates of the control (left upper corner)
+                                 wxPoint(xOffset, yOffset) + // calculated distance to the left upper corner of the cell
+                                 wxPoint(cellRect.GetWidth() / 2, cellRect.GetHeight() / 2)); // Center of the cell
+
+    return gridCellCenter;
+}
+
 void MyFrame::OnRunSimulation(wxCommandEvent& WXUNUSED(event))
 {
     m_text->SetValue("=== Starting the simulation "
@@ -196,11 +242,43 @@ void MyFrame::OnRunSimulation(wxCommandEvent& WXUNUSED(event))
     // and keeping it pressed would totally derail the test below, e.g. "A" key
     // press would actually become "Ctrl+A" selecting the entire text and so on.
     wxMilliSleep(500);
-
+    
     wxStopWatch sw;
 
     wxUIActionSimulator sim;
-
+    wxYield();
+    for (int colIndex = 0; colIndex < m_grid->GetNumberCols(); ++colIndex)
+    {
+		for (int rowIndex = 0; rowIndex < m_grid->GetNumberRows(); ++rowIndex)
+        {
+			// Calculate destination position
+            const wxPoint targetCenter = GetTargetCenter(m_grid, rowIndex, colIndex);
+            
+            // Ensure mouse is in position
+            do{ sim.MouseMove(targetCenter); }
+            while((targetCenter != wxGetMousePosition()));
+            
+			// Set focus to the grid
+            m_grid->SetFocus();
+            while(!m_grid->HasFocus());
+            
+            // Calculate target center of actual cell
+            sim.MouseDblClick(wxMOUSE_BTN_LEFT);
+            
+            // Process the resulting button event
+            wxYield();
+            
+            do{ sim.MouseMove(targetCenter); wxYield(); }
+            while((targetCenter != wxGetMousePosition()));
+            sim.Text("test");
+            // Process the resulting text events
+            wxYield();
+
+			// Wait for next iteration
+            wxMilliSleep(200);
+        }
+    }
+    
     // Add some extra distance to take account of window decorations
     sim.MouseMove(m_button->GetScreenPosition() + wxPoint(10, 10));
     sim.MouseClick(wxMOUSE_BTN_LEFT);

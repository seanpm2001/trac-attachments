Index: docs/latex/wx/htmltags.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/htmltags.tex,v
retrieving revision 1.8
diff -u -r1.8 htmltags.tex
--- docs/latex/wx/htmltags.tex	2002/01/23 22:10:01	1.8
+++ docs/latex/wx/htmltags.tex	2004/03/08 11:24:21
@@ -130,6 +130,7 @@
                 WIDTH=[percent|pixels]
                 COLSPAN=[pixels]
                 ROWSPAN=[pixels]
+                NOWRAP
 TH              ALIGN=[alignment]
                 VALIGN=[v_alignment]
                 BGCOLOR=[color]
Index: include/wx/html/htmlcell.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/html/htmlcell.h,v
retrieving revision 1.51
diff -u -r1.51 htmlcell.h
--- include/wx/html/htmlcell.h	2004/01/17 22:16:54	1.51
+++ include/wx/html/htmlcell.h	2004/03/08 11:24:21
@@ -172,6 +172,11 @@
     int GetPosX() const {return m_PosX;}
     int GetPosY() const {return m_PosY;}
     int GetWidth() const {return m_Width;}
+    
+    // Returns the maximum possible length of the cell.
+    // Call Layout at least once before using GetMaxTotalWidth()
+    virtual int GetMaxTotalWidth() const { return m_Width; }
+
     int GetHeight() const {return m_Height;}
     int GetDescent() const {return m_Descent;}
 
@@ -428,6 +433,10 @@
     // below first/last terminal cell). For internal use only.
     void RemoveExtraSpacing(bool top, bool bottom);
 
+    // Returns the maximum possible length of the container.
+    // Call Layout at least once before using GetMaxTotalWidth()
+    virtual int GetMaxTotalWidth() const { return m_MaxTotalWidth; }
+
 protected:
     void UpdateRenderingStatePre(wxHtmlRenderingInfo& info,
                                  wxHtmlCell *cell) const;
@@ -457,7 +466,10 @@
     int m_LastLayout;
             // if != -1 then call to Layout may be no-op
             // if previous call to Layout has same argument
+    int m_MaxTotalWidth;
+            // Maximum possible length if ignoring line wrap
 
+    
     DECLARE_ABSTRACT_CLASS(wxHtmlContainerCell)
     DECLARE_NO_COPY_CLASS(wxHtmlContainerCell)
 };
Index: src/html/htmlcell.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/html/htmlcell.cpp,v
retrieving revision 1.82
diff -u -r1.82 htmlcell.cpp
--- src/html/htmlcell.cpp	2004/01/17 22:16:56	1.82
+++ src/html/htmlcell.cpp	2004/03/08 11:24:24
@@ -529,6 +529,7 @@
 {
     m_Cells = m_LastCell = NULL;
     m_Parent = parent;
+    m_MaxTotalWidth = 0;
     if (m_Parent) m_Parent->InsertCell(this);
     m_AlignHor = wxHTML_ALIGN_LEFT;
     m_AlignVer = wxHTML_ALIGN_BOTTOM;
@@ -644,6 +645,8 @@
     int ysizeup = 0, ysizedown = 0;
     int MaxLineWidth = 0;
     int xcnt = 0;
+    int curLineWidth = 0;
+    m_MaxTotalWidth = 0;
 
 
     /*
@@ -698,6 +701,20 @@
         // layout nonbreakable run of cells:
         cell->SetPos(xpos, ybasicpos + cell->GetDescent());
         xpos += cell->GetWidth();
+        if (!cell->IsTerminalCell())
+        {
+            // Container cell indicates new line
+            if (curLineWidth > m_MaxTotalWidth)
+                m_MaxTotalWidth = curLineWidth;
+
+            if (wxMax(cell->GetWidth(), cell->GetMaxTotalWidth()) > m_MaxTotalWidth)
+                m_MaxTotalWidth = cell->GetMaxTotalWidth();
+            curLineWidth = 0;
+        }
+        else
+            // Normal cell, add maximum cell width to line width
+            curLineWidth += cell->GetMaxTotalWidth();
+
         cell = cell->GetNext();
         xcnt++;
             
@@ -785,6 +802,10 @@
         m_Height = m_MinHeight;
     }
 
+    if (curLineWidth > m_MaxTotalWidth)
+        m_MaxTotalWidth = curLineWidth;
+            
+    m_MaxTotalWidth += s_indent + ((m_IndentRight < 0) ? (-m_IndentRight * m_Width / 100) : m_IndentRight);
     MaxLineWidth += s_indent + ((m_IndentRight < 0) ? (-m_IndentRight * m_Width / 100) : m_IndentRight);
     if (m_Width < MaxLineWidth) m_Width = MaxLineWidth;
 
Index: src/html/m_list.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/html/m_list.cpp,v
retrieving revision 1.21
diff -u -r1.21 m_list.cpp
--- src/html/m_list.cpp	2003/08/09 12:46:16	1.21
+++ src/html/m_list.cpp	2004/03/08 11:24:24

@@ -67,10 +66,130 @@
                    (m_Width / 3), (m_Width / 3));
 }
 
+//-----------------------------------------------------------------------------
+// wxHtmlListCell
+//-----------------------------------------------------------------------------
+
+struct listItemStruct
+{
+    wxHtmlContainerCell *mark;
+    wxHtmlContainerCell *cont;
+    int minWidth;
+    int maxWidth;
+};
+
+class wxHtmlListCell : public wxHtmlContainerCell
+{
+    private:
+        wxBrush m_Brush;
+
+        int m_NumRows;
+        listItemStruct *m_RowInfo;
+        void ReallocRows(int rows);
+        void ComputeMinMaxWidths();
+        int m_ListmarkWidth;
+
+    public:
+        wxHtmlListCell(wxHtmlContainerCell *parent);
+        virtual ~wxHtmlListCell();
+        void AddRow(wxHtmlContainerCell *mark, wxHtmlContainerCell *cont);
+        virtual void Layout(int w);
+        
+    DECLARE_NO_COPY_CLASS(wxHtmlListCell)
+};
+
+wxHtmlListCell::wxHtmlListCell(wxHtmlContainerCell *parent) : wxHtmlContainerCell(parent)
+{
+    m_NumRows = 0;
+    m_RowInfo = 0;
+    m_ListmarkWidth = 0;
+}
+
+wxHtmlListCell::~wxHtmlListCell()
+{
+    if (m_RowInfo) free(m_RowInfo);
+}
+
+void wxHtmlListCell::Layout(int w)
+{
+    wxHtmlCell::Layout(w);
 
+    ComputeMinMaxWidths();
+    m_Width = wxMax(m_Width, wxMin(w, GetMaxTotalWidth()));
 
+    int s_width = m_Width - m_IndentLeft;
 
+    int vpos = 0;
+    for (int r = 0; r < m_NumRows; r++)
+    {
+        m_RowInfo[r].mark->Layout(m_ListmarkWidth);
+        m_RowInfo[r].mark->SetPos(m_IndentLeft, vpos);
+        m_RowInfo[r].cont->Layout(s_width - m_ListmarkWidth);
+        m_RowInfo[r].cont->SetPos(m_IndentLeft + m_ListmarkWidth, vpos);
+        vpos += wxMax(m_RowInfo[r].cont->GetHeight(), m_RowInfo[r].mark->GetHeight());
+    }
+    m_Height = vpos;
+}
+
+void wxHtmlListCell::AddRow(wxHtmlContainerCell *mark, wxHtmlContainerCell *cont)
+{
+    ReallocRows(++m_NumRows);
+    m_RowInfo[m_NumRows - 1].mark = mark;
+    m_RowInfo[m_NumRows - 1].cont = cont;
+}
+
+void wxHtmlListCell::ReallocRows(int rows)
+{
+    m_RowInfo = (listItemStruct*) realloc(m_RowInfo, sizeof(listItemStruct) * rows);
+    m_RowInfo[rows - 1].mark = 0;
+    m_RowInfo[rows - 1].cont = 0;
+    m_RowInfo[rows - 1].minWidth = 0;
+    m_RowInfo[rows - 1].maxWidth = 0;
+
+    m_NumRows = rows;
+}
+
+void wxHtmlListCell::ComputeMinMaxWidths()
+{
+    if (m_NumRows == 0) return;
+    
+    m_MaxTotalWidth = 0;
+    m_Width = 0;
+
+    for (int r = 0; r < m_NumRows; r++)
+    {
+        listItemStruct& row = m_RowInfo[r];
+        row.mark->Layout(1);
+        row.cont->Layout(1);
+        int maxWidth = row.cont->GetMaxTotalWidth();
+        int width = row.cont->GetWidth();
+        if (row.mark->GetWidth() > m_ListmarkWidth)
+            m_ListmarkWidth = row.mark->GetWidth();
+        if (maxWidth > m_MaxTotalWidth)
+            m_MaxTotalWidth = maxWidth;
+        if (width > m_Width)
+            m_Width = width;
+    }
+    m_Width += m_ListmarkWidth + m_IndentLeft;
+    m_MaxTotalWidth += m_ListmarkWidth + m_IndentLeft;
+}
+
+//-----------------------------------------------------------------------------
+// wxHtmlListcontentCell
 //-----------------------------------------------------------------------------
+
+class wxHtmlListcontentCell : public wxHtmlContainerCell
+{
+public:
+    wxHtmlListcontentCell(wxHtmlContainerCell *p) : wxHtmlContainerCell(p) {}
+    virtual void Layout(int w) { 
+        // Reset top indentation, fixes <li><p>
+        SetIndent(0, wxHTML_INDENT_TOP);
+        wxHtmlContainerCell::Layout(w);
+    }
+};
+
+//-----------------------------------------------------------------------------
 // The list handler:
 //-----------------------------------------------------------------------------
 
@@ -78,6 +197,7 @@
 TAG_HANDLER_BEGIN(OLULLI, "OL,UL,LI")
 
     TAG_HANDLER_VARS
+        wxHtmlListCell *m_List;
         int m_Numbering;
                 // this is number of actual item of list or 0 for dots
 
@@ -91,14 +211,12 @@
         wxHtmlContainerCell *c;
 
         // List Item:
-        if (tag.GetName() == wxT("LI"))
+        if (m_List && tag.GetName() == wxT("LI"))
         {
-            m_WParser->GetContainer()->SetIndent(0, wxHTML_INDENT_TOP);
-                // this is to prevent indetation in <li><p> case
-            m_WParser->CloseContainer();
-            m_WParser->CloseContainer();
+            c = m_WParser->SetContainer(new wxHtmlContainerCell(m_List));
+            c->SetAlignVer(wxHTML_ALIGN_TOP);
 
-            c = m_WParser->OpenContainer();
+            wxHtmlContainerCell *mark = c;
             c->SetWidthFloat(2 * m_WParser->GetCharWidth(), wxHTML_UNITS_PIXELS);
             if (m_Numbering == 0)
             {
@@ -116,51 +234,40 @@
             m_WParser->CloseContainer();
 
             c = m_WParser->OpenContainer();
-            c->SetIndent(m_WParser->GetCharWidth() / 4, wxHTML_INDENT_LEFT);
-            c->SetWidthFloat(-2 * m_WParser->GetCharWidth(), wxHTML_UNITS_PIXELS);
 
-            m_WParser->OpenContainer();
-
+            m_List->AddRow(mark, c);
+            c = m_WParser->OpenContainer();
+            m_WParser->SetContainer(new wxHtmlListcontentCell(c));
+            
             if (m_Numbering != 0) m_Numbering++;
-
-            return FALSE;
         }
 
         // Begin of List (not-numbered): "UL", "OL"
-        else
+        else if (tag.GetName() == wxT("UL") || tag.GetName() == wxT("OL"))
         {
             int oldnum = m_Numbering;
 
             if (tag.GetName() == wxT("UL")) m_Numbering = 0;
             else m_Numbering = 1;
 
-            c = m_WParser->GetContainer();
-            if (c->GetFirstChild() != NULL)
-            {
-                m_WParser->CloseContainer();
-                m_WParser->OpenContainer();
-                c = m_WParser->GetContainer();
-            }
-            c->SetAlignHor(wxHTML_ALIGN_LEFT);
-            c->SetIndent(2 * m_WParser->GetCharWidth(), wxHTML_INDENT_LEFT);
-            m_WParser->OpenContainer()->SetAlignVer(wxHTML_ALIGN_TOP);
+            wxHtmlContainerCell *oldcont;
+            oldcont = c = m_WParser->OpenContainer();
 
-            m_WParser->OpenContainer();
-            m_WParser->OpenContainer();
+            wxHtmlListCell *oldList = m_List;
+            m_List = new wxHtmlListCell(c);
+            m_List->SetIndent(2 * m_WParser->GetCharWidth(), wxHTML_INDENT_LEFT);
+            
             ParseInner(tag);
 
-            m_WParser->GetContainer()->SetIndent(0, wxHTML_INDENT_TOP);
-                // this is to prevent indetation in <li><p> case
+            m_WParser->SetContainer(oldcont);
             m_WParser->CloseContainer();
 
-            m_WParser->CloseContainer();
-            m_WParser->CloseContainer();
-            m_WParser->CloseContainer();
-            m_WParser->OpenContainer();
-
             m_Numbering = oldnum;
+            m_List = oldList;
             return TRUE;
         }
+        return FALSE;
+
     }
 
 TAG_HANDLER_END(OLULLI)
Index: src/html/m_tables.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/html/m_tables.cpp,v
retrieving revision 1.31
diff -u -r1.31 m_tables.cpp
--- src/html/m_tables.cpp	2003/08/09 12:46:16	1.31
+++ src/html/m_tables.cpp	2004/03/08 11:24:24
@@ -22,14 +22,6 @@
 #ifndef WXPRECOMP
 #endif
 
-
-/*
-REMARKS:
-    1. This version of m_tables doesn't support auto-layout algorithm.
-       This means that all columns are of same width unless explicitly specified.
-*/
-
-
 #include "wx/html/forcelnk.h"
 #include "wx/html/m_templ.h"
 
@@ -73,6 +65,7 @@
     int colspan, rowspan;
     int minheight, valign;
     cellState flag;
+    bool nowrap;
 };
 
 
@@ -346,6 +339,12 @@
         else m_CellInfo[r][c].valign = wxHTML_ALIGN_CENTER;
     }
 
+    // nowrap
+    if (tag.HasParam(wxT("NOWRAP")))
+        m_CellInfo[r][c].nowrap = true;
+    else
+        m_CellInfo[r][c].nowrap = false;
+
     cell->SetIndent(m_Padding, wxHTML_INDENT_ALL, wxHTML_UNITS_PIXELS);
 }
 
@@ -353,6 +352,8 @@
 {
     if (m_NumCols == 0 || m_ColsInfo[0].minWidth != -1) return;
     
+    m_MaxTotalWidth = 0;
+    int percentage = 0;
     for (int c = 0; c < m_NumCols; c++)
     {
         for (int r = 0; r < m_NumRows; r++)
@@ -361,21 +362,41 @@
             if (cell.flag == cellUsed)
             {
                 cell.cont->Layout(2*m_Padding + 1);
-                int width = cell.cont->GetWidth();
+                int maxWidth = cell.cont->GetMaxTotalWidth();
+                int width = cell.nowrap?maxWidth:cell.cont->GetWidth();
                 width -= (cell.colspan-1) * m_Spacing;
+                maxWidth -= (cell.colspan-1) * m_Spacing;
                 // HTML 4.0 says it is acceptable to distribute min/max
                 width /= cell.colspan;
-                for (int j = 0; j < cell.colspan; j++)
+                maxWidth /= cell.colspan;
+                for (int j = 0; j < cell.colspan; j++) {
                     if (width > m_ColsInfo[c+j].minWidth)
                         m_ColsInfo[c+j].minWidth = width;
+                    if (maxWidth > m_ColsInfo[c+j].maxWidth)
+                        m_ColsInfo[c+j].maxWidth = maxWidth;
+                }
             }
         }
+        // Calculate maximum table width, required for nested tables
+        if (m_ColsInfo[c].units == wxHTML_UNITS_PIXELS)
+            m_MaxTotalWidth += wxMax(m_ColsInfo[c].width, m_ColsInfo[c].minWidth);
+        else if ((m_ColsInfo[c].units == wxHTML_UNITS_PERCENT) && (m_ColsInfo[c].width != 0))
+            percentage += m_ColsInfo[c].width;
+        else
+            m_MaxTotalWidth += m_ColsInfo[c].maxWidth;
     }
-    
-    // FIXME -- compute maxWidth as well. Not needed yet, so there's no
-    //          point in computing it. 
-}
 
+    if (percentage >= 100)
+    {
+        // Table would have infinite length
+        // Make it ridiculous large
+        m_MaxTotalWidth = 0xFFFFFF;
+    }
+    else
+        m_MaxTotalWidth = m_MaxTotalWidth * 100 / (100 - percentage);
+
+    m_MaxTotalWidth += (m_NumCols + 1) * m_Spacing;
+}
 
 void wxHtmlTableCell::Layout(int w)
 {
@@ -391,8 +412,18 @@
 
     if (m_WidthFloatUnits == wxHTML_UNITS_PERCENT)
     {
-        if (m_WidthFloat < 0) m_Width = (100 + m_WidthFloat) * w / 100;
-        else m_Width = m_WidthFloat * w / 100;
+        if (m_WidthFloat < 0)
+        {
+            if (m_WidthFloat < -100)
+                m_WidthFloat = -100;
+            m_Width = (100 + m_WidthFloat) * w / 100;
+        }
+        else 
+        {
+            if (m_WidthFloat > 100)
+                m_WidthFloat = 100;
+            m_Width = m_WidthFloat * w / 100;
+        }
     }
     else
     {
@@ -407,7 +438,10 @@
 
     */
 
-    /* 1.  setup columns widths: */
+    /* 1.  setup columns widths: 
+           
+           The algorithm tries to keep the table size less than w if possible.
+       */
     {
         int wpix = m_Width - (m_NumCols + 1) * m_Spacing;
         int i, j;
@@ -421,29 +455,103 @@
                 wpix -= m_ColsInfo[i].pixwidth;
             }
 
-        // 1b. setup floating-width columns:
-        int wtemp = 0;
+        // 1b. Calculate maximum possible width if line wrapping would be disabled
+        // Recalculate total width if m_WidthFloat is zero to keep tables as small
+        // as possible.
+        int maxWidth = 0;
         for (i = 0; i < m_NumCols; i++)
+            if (m_ColsInfo[i].width == 0)
+            {
+                maxWidth += m_ColsInfo[i].maxWidth;
+            }
+
+        if (!m_WidthFloat)
+        {
+            // Recalculate table width since no table width was initially given
+            int newWidth = m_Width - wpix +  maxWidth;
+
+            // Make sure that floating-width columns will have the right size.
+            // Calculate sum of all floating-width columns
+            int percentage = 0;
+            for (i = 0; i < m_NumCols; i++)
+                if ((m_ColsInfo[i].units == wxHTML_UNITS_PERCENT) && (m_ColsInfo[i].width != 0))
+                    percentage += m_ColsInfo[i].width;
+
+            if (percentage >= 100)
+                newWidth = w;
+            else
+                newWidth = newWidth * 100 / (100 - percentage);
+                
+            newWidth = wxMin(newWidth, w - (m_NumCols + 1) * m_Spacing);
+            wpix -= m_Width - newWidth;
+            m_Width = newWidth;
+        }
+        
+
+        // 1c. setup floating-width columns:
+        int wtemp = wpix;
+        for (i = 0; i < m_NumCols; i++)
             if ((m_ColsInfo[i].units == wxHTML_UNITS_PERCENT) && (m_ColsInfo[i].width != 0))
             {
-                m_ColsInfo[i].pixwidth = wxMax(m_ColsInfo[i].width * wpix / 100,
-                                               m_ColsInfo[i].minWidth);
-                wtemp += m_ColsInfo[i].pixwidth;
+                m_ColsInfo[i].pixwidth = wxMin(m_ColsInfo[i].width, 100) * wpix / 100;
+
+                // Make sure to leave enough space for the other columns
+                int minRequired = 0;
+                for (j = 0; j < m_NumCols; j++)
+                {
+                    if ((m_ColsInfo[j].units == wxHTML_UNITS_PERCENT && j > i) ||
+                        !m_ColsInfo[j].width)
+                        minRequired += m_ColsInfo[j].minWidth;
+                }
+                m_ColsInfo[i].pixwidth = wxMax(wxMin(wtemp - minRequired, m_ColsInfo[i].pixwidth), m_ColsInfo[i].minWidth);
+
+                wtemp -= m_ColsInfo[i].pixwidth;
             }
-        wpix -= wtemp;
+        wpix = wtemp;
 
-        // 1c. setup defalut columns (no width specification supplied):
-        // FIXME: This algorithm doesn't conform to HTML standard : it assigns
-        //        equal widths instead of optimal
+        // 1d. setup default columns (no width specification supplied):
+        // The algorithm assigns calculates the maximum possible width if line
+        // wrapping would be disabled and assigns column width as a fraction
+        // based upon the maximum width of a column
+        // FIXME: I'm not sure if this algorithm is conform to HTML standard,
+        //        though it seems to be much better than the old one
+
         for (i = j = 0; i < m_NumCols; i++)
             if (m_ColsInfo[i].width == 0) j++;
+        if (wpix < 0)
+            wpix = 0;
+
+        // Assign widths
         for (i = 0; i < m_NumCols; i++)
             if (m_ColsInfo[i].width == 0)
             {
-                // FIXME: this is not optimal, because if we allocate more than
-                //        wpix/j pixels to one column, we should try to allocate
-                //        smaller place to other columns
-                m_ColsInfo[i].pixwidth = wxMax(wpix/j, m_ColsInfo[i].minWidth);
+                // Assign with, make sure not to drop below minWidth
+                if (maxWidth)
+                    m_ColsInfo[i].pixwidth = wpix * (m_ColsInfo[i].maxWidth / (float)maxWidth) + 0.5;
+                else
+                    m_ColsInfo[i].pixwidth = wpix / j;
+                
+                // Make sure to leave enough space for the other columns
+                int minRequired = 0;
+                int r;
+                for (r = i + 1; r < m_NumCols; r++)
+                {
+                    if (!m_ColsInfo[r].width)
+                        minRequired += m_ColsInfo[r].minWidth;
+                }
+                m_ColsInfo[i].pixwidth = wxMax(wxMin(wpix - minRequired, m_ColsInfo[i].pixwidth), m_ColsInfo[i].minWidth);
+
+                if (maxWidth)
+                {
+                    if (m_ColsInfo[i].pixwidth > (wpix * (m_ColsInfo[i].maxWidth / (float)maxWidth) + 0.5))
+                    {
+                        int diff = m_ColsInfo[i].pixwidth - (wpix * m_ColsInfo[i].maxWidth / (float)maxWidth + 0.5);
+                        maxWidth += diff - m_ColsInfo[i].maxWidth;
+                    }
+                    else
+                        maxWidth -= m_ColsInfo[i].maxWidth;
+                }
+                wpix -= m_ColsInfo[i].pixwidth;
             }
     }
 
@@ -555,9 +663,31 @@
             wxHtmlContainerCell *oldcont;
 
             oldcont = c = m_WParser->OpenContainer();
+
+            m_Table = new wxHtmlTableCell(c, tag);
 
-            c->SetWidthFloat(tag, m_WParser->GetPixelScale());
-            m_Table = new wxHtmlTableCell(c, tag, m_WParser->GetPixelScale());
+            // width:
+            {
+                if (tag.HasParam(wxT("WIDTH")))
+                {
+                    wxString wd = tag.GetParam(wxT("WIDTH"));
+
+                    if (wd[wd.Length()-1] == wxT('%'))
+                    {
+                        int width = 0;
+                        wxSscanf(wd.c_str(), wxT("%i%%"), &width);
+                        m_Table->SetWidthFloat(width, wxHTML_UNITS_PERCENT);
+                    }
+                    else
+                    {
+                        int width = 0;
+                        wxSscanf(wd.c_str(), wxT("%i"), &width);
+                        m_Table->SetWidthFloat(m_WParser->GetPixelScale() * width, wxHTML_UNITS_PIXELS);
+                    }
+                }
+                else
+                    m_Table->SetWidthFloat(0, wxHTML_UNITS_PIXELS);
+            }
             int oldAlign = m_WParser->GetAlign();
             m_tAlign = wxEmptyString;
             if (tag.HasParam(wxT("ALIGN")))

 	  	 

Index: wxWidgets-2.9/include/wx/datstrm.h
===================================================================
--- wxWidgets-2.9/include/wx/datstrm.h	(revision 59685)
+++ wxWidgets-2.9/include/wx/datstrm.h	(working copy)
@@ -40,6 +40,7 @@
     wxUint16 Read16();
     wxUint8 Read8();
     double ReadDouble();
+    float ReadFloat();
     wxString ReadString();
 
 #if wxHAS_INT64
@@ -58,6 +59,7 @@
     void Read16(wxUint16 *buffer, size_t size);
     void Read8(wxUint8 *buffer, size_t size);
     void ReadDouble(double *buffer, size_t size);
+    void ReadFloat(float *buffer, size_t size);
 
     wxDataInputStream& operator>>(wxString& s);
     wxDataInputStream& operator>>(wxInt8& c);
@@ -74,10 +76,11 @@
     wxDataInputStream& operator>>(wxULongLong& i);
     wxDataInputStream& operator>>(wxLongLong& i);
 #endif
-    wxDataInputStream& operator>>(double& i);
+    wxDataInputStream& operator>>(double& d);
     wxDataInputStream& operator>>(float& f);
 
     void BigEndianOrdered(bool be_order) { m_be_order = be_order; }
+    void UseIeeeExtended(bool use_ieee_extended) { m_use_ieee_extended = use_ieee_extended; }
     
 #if wxUSE_UNICODE
     void SetConv( const wxMBConv &conv );
@@ -87,6 +90,7 @@
 protected:
     wxInputStream *m_input;
     bool m_be_order;
+    bool m_use_ieee_extended;
 #if wxUSE_UNICODE
     wxMBConv *m_conv;
 #endif
@@ -118,6 +122,7 @@
     void Write16(wxUint16 i);
     void Write8(wxUint8 i);
     void WriteDouble(double d);
+    void WriteFloat(float f);
     void WriteString(const wxString& string);
 
 #if wxHAS_INT64
@@ -136,6 +141,7 @@
     void Write16(const wxUint16 *buffer, size_t size);
     void Write8(const wxUint8 *buffer, size_t size);
     void WriteDouble(const double *buffer, size_t size);
+    void WriteFloat(const float *buffer, size_t size);
 
     wxDataOutputStream& operator<<(const wxString& string);
     wxDataOutputStream& operator<<(wxInt8 c);
@@ -152,10 +158,11 @@
     wxDataOutputStream& operator<<(const wxULongLong &i);
     wxDataOutputStream& operator<<(const wxLongLong &i);
 #endif
-    wxDataOutputStream& operator<<(double f);
+    wxDataOutputStream& operator<<(double d);
     wxDataOutputStream& operator<<(float f);
 
     void BigEndianOrdered(bool be_order) { m_be_order = be_order; }
+    void UseIeeeExtended(bool use_ieee_extended) { m_use_ieee_extended = use_ieee_extended; }
 
 #if wxUSE_UNICODE
     void SetConv( const wxMBConv &conv );
@@ -165,6 +172,7 @@
 protected:
     wxOutputStream *m_output;
     bool m_be_order;
+    bool m_use_ieee_extended;
 #if wxUSE_UNICODE
     wxMBConv *m_conv;
 #endif
Index: wxWidgets-2.9/interface/wx/datstrm.h
===================================================================
--- wxWidgets-2.9/interface/wx/datstrm.h	(revision 59685)
+++ wxWidgets-2.9/interface/wx/datstrm.h	(working copy)
@@ -11,7 +11,8 @@
 
     This class provides functions that write binary data types in a portable
     way. Data can be written in either big-endian or little-endian format,
-    little-endian being the default on all architectures.
+    little-endian being the default on all architectures. For singles and floats,
+    data is written in endian independant 80-bit IEEE extended format by default.
 
     If you want to write data to text files (or streams) use wxTextOutputStream
     instead.
@@ -57,6 +58,14 @@
         order.
     */
     void BigEndianOrdered(bool be_order);
+
+    /**
+        If @a use_ieee_extended is @true, floats and doubles will be written
+        in 80-bit IEEE extended format, otherwise data will be written in
+        32-bit IEEE single precision format for floats and 64-bit IEEE
+        double precision format for doubles.
+    */
+    void UseIeeeExtended(bool use_ieee_extended);
     
     /**
        Returns the current text conversion class used for
@@ -110,13 +119,23 @@
     void Write64(const wxUint64* buffer, size_t size);
 
     /**
-        Writes the double @a f to the stream using the IEEE format.
+        Writes the float @a f to the stream using the IEEE format.
     */
-    void WriteDouble(double f);
+    void WriteFloat(float f);
     /**
-        Writes an array of double to the stream. The amount of double to write is
+        Writes an array of float to the stream. The amount of floats to write is
         specified with the @a size variable.
     */
+    void WriteFloat(const float* buffer, size_t size);
+
+    /**
+        Writes the double @a d to the stream using the IEEE format.
+    */
+    void WriteDouble(double d);
+    /**
+        Writes an array of double to the stream. The amount of doubles to write is
+        specified with the @a size variable.
+    */
     void WriteDouble(const double* buffer, size_t size);
 
     /**
@@ -141,7 +160,8 @@
 
     This class provides functions that read binary data types in a portable
     way. Data can be read in either big-endian or little-endian format,
-    little-endian being the default on all architectures.
+    little-endian being the default on all architectures. For singles and floats,
+    data is written in endian independant 80-bit IEEE extended format by default.
 
     If you want to read data from text files (or streams) use wxTextInputStream
     instead.
@@ -204,6 +224,13 @@
     */
     void BigEndianOrdered(bool be_order);
 
+    /**
+        If @a use_ieee_extended is @true, floats and doubles will be read
+        in 80-bit IEEE extended format, otherwise data will be read in
+        32-bit IEEE single precision format for floats and 64-bit IEEE
+        double precision format for doubles.
+    */
+    void UseIeeeExtended(bool use_ieee_extended);
     
     /**
        Returns the current text conversion class used for
@@ -255,6 +282,16 @@
     void Read64(wxUint64* buffer, size_t size);
 
     /**
+        Reads a float (IEEE encoded) from the stream.
+    */
+    float ReadFloat();
+    /**
+        Reads float data (IEEE encoded) from the stream in a specified buffer.
+        The amount of floats to read is specified by the @a size variable.
+    */
+    void ReadFloat(float* buffer, size_t size);
+
+    /**
         Reads a double (IEEE encoded) from the stream.
     */
     double ReadDouble();
Index: wxWidgets-2.9/src/common/datstrm.cpp
===================================================================
--- wxWidgets-2.9/src/common/datstrm.cpp	(revision 59685)
+++ wxWidgets-2.9/src/common/datstrm.cpp	(working copy)
@@ -24,16 +24,27 @@
     #include "wx/math.h"
 #endif //WX_PRECOMP
 
+// helper unions used to swap bytes of floats and doubles
+union Float32Data {
+    wxFloat32 f;
+    wxUint32 i;
+};
+
+union Float64Data {
+    wxFloat64 f;
+    wxUint32 i[2];
+};
+
 // ---------------------------------------------------------------------------
 // wxDataInputStream
 // ---------------------------------------------------------------------------
 
 #if wxUSE_UNICODE
 wxDataInputStream::wxDataInputStream(wxInputStream& s, const wxMBConv& conv)
-  : m_input(&s), m_be_order(false), m_conv(conv.Clone())
+  : m_input(&s), m_be_order(false), m_use_ieee_extended(true), m_conv(conv.Clone())
 #else
 wxDataInputStream::wxDataInputStream(wxInputStream& s)
-  : m_input(&s), m_be_order(false)
+  : m_input(&s), m_be_order(false), m_use_ieee_extended(true)
 #endif
 {
 }
@@ -96,16 +107,51 @@
 
 double wxDataInputStream::ReadDouble()
 {
+    if ( m_use_ieee_extended )
+    {
 #if wxUSE_APPLE_IEEE
-  char buf[10];
+        char buf[10];
 
-  m_input->Read(buf, 10);
-  return wxConvertFromIeeeExtended((const wxInt8 *)buf);
+        m_input->Read(buf, 10);
+        return wxConvertFromIeeeExtended((const wxInt8 *)buf);
 #else
-  return 0.0;
+        return 0.0;
 #endif
+    }
+    else
+    {
+        Float64Data floatData;
+
+        if ( m_be_order == (wxBYTE_ORDER == wxBIG_ENDIAN) )
+        {
+            floatData.i[0] = Read32();
+            floatData.i[1] = Read32();
+        }
+        else
+        {
+            floatData.i[1] = Read32();
+            floatData.i[0] = Read32();
+        }
+
+        return (double)(floatData.f);
+    }
 }
 
+float wxDataInputStream::ReadFloat()
+{
+    if ( m_use_ieee_extended )
+    {
+        return (float)ReadDouble();
+    }
+    else
+    {
+        Float32Data floatData;
+
+        floatData.i = Read32();
+        return (float)(floatData.f);
+    }
+}
+
 wxString wxDataInputStream::ReadString()
 {
     wxString ret;
@@ -378,6 +424,14 @@
   }
 }
 
+void wxDataInputStream::ReadFloat(float *buffer, size_t size)
+{
+  for (wxUint32 i=0; i<size; i++)
+  {
+    *(buffer++) = ReadFloat();
+  }
+}
+
 wxDataInputStream& wxDataInputStream::operator>>(wxString& s)
 {
   s = ReadString();
@@ -448,15 +502,15 @@
 }
 #endif // wxLongLong_t
 
-wxDataInputStream& wxDataInputStream::operator>>(double& i)
+wxDataInputStream& wxDataInputStream::operator>>(double& d)
 {
-  i = ReadDouble();
+  d = ReadDouble();
   return *this;
 }
 
 wxDataInputStream& wxDataInputStream::operator>>(float& f)
 {
-  f = (float)ReadDouble();
+  f = ReadFloat();
   return *this;
 }
 
@@ -466,10 +520,10 @@
 
 #if wxUSE_UNICODE
 wxDataOutputStream::wxDataOutputStream(wxOutputStream& s, const wxMBConv& conv)
-  : m_output(&s), m_be_order(false), m_conv(conv.Clone())
+  : m_output(&s), m_be_order(false), m_use_ieee_extended(true), m_conv(conv.Clone())
 #else
 wxDataOutputStream::wxDataOutputStream(wxOutputStream& s)
-  : m_output(&s), m_be_order(false)
+  : m_output(&s), m_be_order(false), m_use_ieee_extended(true)
 #endif
 {
 }
@@ -544,20 +598,55 @@
 
 void wxDataOutputStream::WriteDouble(double d)
 {
-  char buf[10];
+    if ( m_use_ieee_extended )
+    {
+        char buf[10];
 
 #if wxUSE_APPLE_IEEE
-  wxConvertToIeeeExtended(d, (wxInt8 *)buf);
+        wxConvertToIeeeExtended(d, (wxInt8 *)buf);
 #else
-  wxUnusedVar(d);
+        wxUnusedVar(d);
 #if !defined(__VMS__) && !defined(__GNUG__)
 # pragma warning "wxDataOutputStream::WriteDouble() not using IeeeExtended - will not work!"
 #endif
-   buf[0] = '\0';
+        buf[0] = '\0';
 #endif
-  m_output->Write(buf, 10);
+        m_output->Write(buf, 10);
+    }
+    else
+    {
+        Float64Data floatData;
+
+        floatData.f = (wxFloat64)d;
+
+        if ( m_be_order == (wxBYTE_ORDER == wxBIG_ENDIAN) )
+        {
+            Write32(floatData.i[0]);
+            Write32(floatData.i[1]);
+        }
+        else
+        {
+            Write32(floatData.i[1]);
+            Write32(floatData.i[0]);
+        }
+    }
 }
 
+void wxDataOutputStream::WriteFloat(float f)
+{
+    if ( m_use_ieee_extended )
+    {
+        WriteDouble((double)f);
+    }
+    else
+    {
+        Float32Data floatData;
+       
+        floatData.f = (wxFloat32)f;
+        Write32(floatData.i);
+    }
+}
+
 #if wxHAS_INT64
 void wxDataOutputStream::Write64(const wxUint64 *buffer, size_t size)
 {
@@ -669,6 +758,14 @@
   }
 }
 
+void wxDataOutputStream::WriteFloat(const float *buffer, size_t size)
+{
+  for (wxUint32 i=0; i<size; i++)
+  {
+    WriteFloat(*(buffer++));
+  }
+}
+
 wxDataOutputStream& wxDataOutputStream::operator<<(const wxString& string)
 {
   WriteString(string);
@@ -739,15 +836,15 @@
 }
 #endif // wxLongLong_t
 
-wxDataOutputStream& wxDataOutputStream::operator<<(double f)
+wxDataOutputStream& wxDataOutputStream::operator<<(double d)
 {
-  WriteDouble(f);
+  WriteDouble(d);
   return *this;
 }
 
 wxDataOutputStream& wxDataOutputStream::operator<<(float f)
 {
-  WriteDouble((double)f);
+  WriteFloat(f);
   return *this;
 }
 

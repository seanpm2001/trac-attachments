--- a/include/wx/msw/private.h
+++ b/include/wx/msw/private.h
@@ -1013,6 +1013,28 @@ inline long wxSetWindowExStyle(const wxWindowMSW *win, long style)
     return ::SetWindowLong(GetHwndOf(win), GWL_EXSTYLE, style);
 }
 
+// Update layout direction flag for window of Edit class (EDIT control)
+inline bool wxUpdateEditLayoutDirFlag(WXHWND hWnd, bool setRTL)
+{
+    LONG_PTR styleOld = ::GetWindowLongPtr(hWnd, GWL_EXSTYLE);
+    wxASSERT_MSG( !(styleOld & WS_EX_LAYOUTRTL),
+            wxT("WS_EX_LAYOUTRTL flag is not expected for EDIT control") );
+
+    LONG_PTR styleNew = styleOld;
+    if ( setRTL )
+        styleNew |= (WS_EX_RIGHT|WS_EX_RTLREADING|WS_EX_LEFTSCROLLBAR);
+    else
+        styleNew &= ~(WS_EX_RIGHT|WS_EX_RTLREADING|WS_EX_LEFTSCROLLBAR);
+
+    if ( styleNew != styleOld )
+    {
+        ::SetWindowLongPtr(hWnd, GWL_EXSTYLE, styleNew);
+        return true;
+    }
+
+    return false;
+}
+
 // ----------------------------------------------------------------------------
 // functions mapping HWND to wxWindow
 // ----------------------------------------------------------------------------
--- a/include/wx/msw/textctrl.h
+++ b/include/wx/msw/textctrl.h
@@ -101,6 +101,9 @@ public:
         return wxTextCtrlBase::HitTest(pt, col, row);
     }
 
+    void SetLayoutDirection(wxLayoutDirection dir) wxOVERRIDE;
+    wxLayoutDirection GetLayoutDirection() const wxOVERRIDE;
+
     // Caret handling (Windows only)
     bool ShowNativeCaret(bool show = true);
     bool HideNativeCaret() { return ShowNativeCaret(false); }
--- a/src/msw/textctrl.cpp
+++ b/src/msw/textctrl.cpp
@@ -1793,6 +1793,61 @@ void wxTextCtrl::SetMaxLength(unsigned long len)
     }
 }
 
+void wxTextCtrl::SetLayoutDirection(wxLayoutDirection dir)
+{
+#ifdef __WXWINCE__
+    wxUnusedVar(dir);
+#else
+    wxCHECK_RET( GetHwnd(),
+                 wxT("layout direction must be set after window creation") );
+    wxCHECK_RET( dir == wxLayout_LeftToRight || dir == wxLayout_RightToLeft,
+                 wxT("unsupported layout direction") );
+
+    // If text field is plain EDIT control then we need
+    // to set its layout direction in a specific way.
+    if ( !IsRich() )
+    {
+        if(wxUpdateEditLayoutDirFlag(GetHwnd(), dir == wxLayout_RightToLeft))
+        {
+            // Update layout: whether we have children or are drawing something, we
+            // need to redo it with the new layout.
+            SendSizeEvent();
+            Refresh();
+        }
+    }
+    else
+    {
+        wxTextCtrlBase::SetLayoutDirection(dir);
+    }
+#endif
+}
+
+wxLayoutDirection wxTextCtrl::GetLayoutDirection() const
+{
+#ifdef __WXWINCE__
+    return wxTextCtrlBase::GetLayoutDirection();
+#else
+    wxCHECK_MSG( GetHwnd(), wxLayout_Default, wxT("invalid window") );
+    // If text field is plain EDIT control then
+    // get its layout direction in a specific way.
+    if ( !IsRich() )
+    {
+        wxASSERT_MSG( !wxHasWindowExStyle(this, WS_EX_LAYOUTRTL),
+             wxT("WS_EX_LAYOUTRTL flag is not expected for EDIT control") );
+        // For EDIT control WS_EX_LAYOUTRTL flag is not active
+        // and we need to check the alternative set of flags.
+        // Note: WS_EX_RIGHT is not used here deliberately.
+        const long flags = WS_EX_RTLREADING|WS_EX_LEFTSCROLLBAR;
+        return  (wxGetWindowExStyle(this) & flags) == flags ?
+                         wxLayout_RightToLeft : wxLayout_LeftToRight;
+    }
+    else
+    {
+        return wxTextCtrlBase::GetLayoutDirection();
+    }
+#endif
+}
+
 // ----------------------------------------------------------------------------
 // Undo/redo
 // ----------------------------------------------------------------------------

--- a/include/wx/msw/combobox.h
+++ b/include/wx/msw/combobox.h
@@ -126,6 +126,8 @@ public:
     virtual bool SetHint(const wxString& hint);
 #endif // wxUSE_UXTHEME
 
+    void SetLayoutDirection(wxLayoutDirection dir) wxOVERRIDE;
+
 protected:
 #if wxUSE_TOOLTIPS
     virtual void DoSetToolTip(wxToolTip *tip);
--- a/include/wx/msw/private.h
+++ b/include/wx/msw/private.h
@@ -1035,6 +1035,25 @@ inline bool wxUpdateEditLayoutDirFlag(WXHWND hWnd, bool setRTL)
     return false;
 }
 
+// Update layout direction flag for ordinary window
+inline bool wxUpdateLayoutDirFlag(WXHWND hWnd, bool setRTL)
+{
+    LONG_PTR styleOld = ::GetWindowLongPtr(hWnd, GWL_EXSTYLE);
+    LONG_PTR styleNew = styleOld;
+    if ( setRTL )
+        styleNew |= WS_EX_LAYOUTRTL;
+    else
+        styleNew &= ~WS_EX_LAYOUTRTL;
+
+    if ( styleNew != styleOld )
+    {
+        ::SetWindowLongPtr(hWnd, GWL_EXSTYLE, styleNew);
+        return true;
+    }
+
+    return false;
+}
+
 // ----------------------------------------------------------------------------
 // functions mapping HWND to wxWindow
 // ----------------------------------------------------------------------------
--- a/src/msw/combobox.cpp
+++ b/src/msw/combobox.cpp
@@ -707,4 +707,44 @@ wxWindow *wxComboBox::MSWFindItem(long id, WXHWND hWnd) const
     return wxChoice::MSWFindItem(id, hWnd);
 }
 
+void wxComboBox::SetLayoutDirection(wxLayoutDirection dir)
+{
+#ifdef __WXWINCE__
+    wxUnusedVar(dir);
+#else
+    wxCHECK_RET( GetHwnd(),
+                 wxT("layout direction must be set after window creation") );
+    wxCHECK_RET( dir == wxLayout_LeftToRight || dir == wxLayout_RightToLeft,
+                 wxT("unsupported layout direction") );
+    // Edit field and drop-down list must be handled explicitly.
+
+    const bool setRTL = (dir == wxLayout_RightToLeft);
+    // Edit field is a special EDIT control
+    // (e.g. it always returns null extended styl flags)
+    // so its layout direction should be set using the same extended flag
+    // as for ordinary window but reset simply with alignment flags.
+    if ( setRTL )
+    {
+        wxUpdateLayoutDirFlag(GetEditHWND(), setRTL);
+    }
+    else
+    {
+        LONG_PTR style = ::GetWindowLongPtr(GetEditHWND(), GWL_STYLE);
+        if ( !(style & ES_CENTER) )
+        {
+            style &= ~ES_RIGHT;
+            ::SetWindowLongPtr(GetEditHWND(), GWL_STYLE, style);
+        }
+    }
+    // Layout for the drop-down list also must be set explicitly.
+    WinStruct<COMBOBOXINFO> info;
+    if ( ::GetComboBoxInfo(GetHwnd(), &info) )
+    {
+        wxUpdateLayoutDirFlag(info.hwndList, setRTL);
+    }
+
+    wxChoice::SetLayoutDirection(dir);
+#endif
+}
+
 #endif // wxUSE_COMBOBOX
--- a/src/msw/window.cpp
+++ b/src/msw/window.cpp
@@ -1137,29 +1137,11 @@ void wxWindowMSW::SetLayoutDirection(wxLayoutDirection dir)
 #else
     wxCHECK_RET( GetHwnd(),
                  wxT("layout direction must be set after window creation") );
+    wxCHECK_RET( dir == wxLayout_LeftToRight || dir == wxLayout_RightToLeft,
+                 wxT("unsupported layout direction") );
 
-    LONG styleOld = wxGetWindowExStyle(this);
-
-    LONG styleNew = styleOld;
-    switch ( dir )
+    if(wxUpdateLayoutDirFlag(GetHwnd(), dir == wxLayout_RightToLeft))
     {
-        case wxLayout_LeftToRight:
-            styleNew &= ~WS_EX_LAYOUTRTL;
-            break;
-
-        case wxLayout_RightToLeft:
-            styleNew |= WS_EX_LAYOUTRTL;
-            break;
-
-        default:
-            wxFAIL_MSG(wxT("unsupported layout direction"));
-            break;
-    }
-
-    if ( styleNew != styleOld )
-    {
-        wxSetWindowExStyle(this, styleNew);
-
         // Update layout: whether we have children or are drawing something, we
         // need to redo it with the new layout.
         SendSizeEvent();

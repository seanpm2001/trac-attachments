Index: docs/latex/wx/filename.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/filename.tex,v
retrieving revision 1.21
diff -u -r1.21 filename.tex
--- docs/latex/wx/filename.tex	2003/01/25 12:01:57	1.21
+++ docs/latex/wx/filename.tex	2003/06/20 09:32:03
@@ -38,13 +38,14 @@
 {
     wxPATH_NATIVE = 0,      // the path format for the current platform
     wxPATH_UNIX,
+    wxPATH_BEOS = wxPATH_UNIX,
     wxPATH_MAC,
     wxPATH_DOS,
+    wxPATH_WIN = wxPATH_DOS,
+    wxPATH_OS2 = wxPATH_DOS,
     wxPATH_VMS,
 
-    wxPATH_BEOS = wxPATH_UNIX,
-    wxPATH_WIN = wxPATH_DOS,
-    wxPATH_OS2 = wxPATH_DOS
+    wxPATH_MAX // Not a valid value for specifying path format
 }
 \end{verbatim}
 
@@ -189,7 +190,7 @@
 
 \membersection{wxFileName::AssignCwd}\label{wxfilenameassigncwd}
 
-\func{void}{AssignCwd}{\param{const wxString\& }{volume = ""}}
+\func{static void}{AssignCwd}{\param{const wxString\& }{volume = wxEmptyString}}
 
 Makes this object refer to the current working directory on the specified
 volume (or current volume if {\it volume} is empty).
@@ -261,11 +262,11 @@
 
 \func{static bool}{DirExists}{\param{const wxString\& }{dir}}
 
-Returns true if the directory with this name exists.
+Returns {\tt true} if the directory with this name exists.
 
 \membersection{wxFileName::DirName}\label{wxfilenamedirname}
 
-\func{wxFileName}{DirName}{\param{const wxString\& }{dir}}
+\func{static wxFileName}{DirName}{\param{const wxString\& }{dir}}
 
 Returns the directory name.
 
@@ -275,7 +276,7 @@
 
 \func{static bool}{FileExists}{\param{const wxString\& }{file}}
 
-Returns true if the file with this name exists.
+Returns {\tt true} if the file with this name exists.
 
 \wxheading{See also}
 
@@ -283,13 +284,13 @@
 
 \membersection{wxFileName::FileName}\label{wxfilenamefilename}
 
-\func{wxFileName}{FileName}{\param{const wxString\& }{file}}
+\func{static wxFileName}{FileName}{\param{const wxString\& }{file}}
 
 Static pseudo constructors.
 
 \membersection{wxFileName::GetCwd}\label{wxfilenamegetcwd}
 
-\func{wxString}{GetCwd}{\param{const wxString\& }{volume = ""}}
+\func{static wxString}{GetCwd}{\param{const wxString\& }{volume = wxEmptyString}}
 
 Retrieves the value of the current working directory on the specified volume. If
 the volume is empty, the programs current working directory is returned for the
@@ -322,9 +323,15 @@
 
 Returns the file name extension.
 
+\membersection{wxFileName::GetForbiddenChars}\label{wxfilenamegetforbiddenchars}
+
+\func{static wxString}{GetForbiddenChars}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+
+Returns the characters that can't be used in filenames and directory names for the specified format.
+
 \membersection{wxFileName::GetFormat}\label{wxfilenamegetformat}
 
-\func{wxPathFormat}{GetFormat}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static wxPathFormat}{GetFormat}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 Returns the canonical path format for this platform.
 
@@ -342,7 +349,7 @@
 
 \membersection{wxFileName::GetHomeDir}\label{wxfilenamegethomedir}
 
-\func{wxString}{GetHomeDir}{\void}
+\func{static wxString}{GetHomeDir}{\void}
 
 Returns the home directory.
 
@@ -382,7 +389,7 @@
 
 \membersection{wxFileName::GetPathSeparator}\label{wxfilenamegetpathseparator}
 
-\func{wxChar}{GetPathSeparator}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static wxChar}{GetPathSeparator}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 Returns the usually used path separator for this format. For all formats but 
 {\tt wxPATH\_DOS} there is only one path separator anyhow, but for DOS there
@@ -395,7 +402,7 @@
 
 \membersection{wxFileName::GetPathSeparators}\label{wxfilenamegetpathseparators}
 
-\func{wxString}{GetPathSeparators}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static wxString}{GetPathSeparators}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 Returns the string containing all the path separators for this format. For all
 formats but {\tt wxPATH\_DOS} this string contains only one character but for
@@ -441,7 +448,7 @@
 
 \membersection{wxFileName::GetVolumeSeparator}\label{wxfilenamegetvolumeseparator}
 
-\func{wxString}{GetVolumeSeparator}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static wxString}{GetVolumeSeparator}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 Returns the string separating the volume from the path for this format.
 
@@ -449,19 +456,19 @@
 
 \constfunc{bool}{HasExt}{\void}
 
-Returns true if an extension is present.
+Returns {\tt true} if an extension is present.
 
 \membersection{wxFileName::HasName}\label{wxfilenamehasname}
 
 \constfunc{bool}{HasName}{\void}
 
-Returns true if a name is present.
+Returns {\tt true} if a name is present.
 
 \membersection{wxFileName::HasVolume}\label{wxfilenamehasvolume}
 
 \constfunc{bool}{HasVolume}{\void}
 
-Returns true if a volume specifier is present.
+Returns {\tt true} if a volume specifier is present.
 
 \membersection{wxFileName::InsertDir}\label{wxfilenameinsertdir}
 
@@ -473,13 +480,13 @@
 
 \func{bool}{IsAbsolute}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
-Returns true if this filename is absolute.
+Returns {\tt true} if this filename is absolute.
 
 \membersection{wxFileName::IsCaseSensitive}\label{wxfilenameiscasesensitive}
 
-\func{bool}{IsCaseSensitive}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static bool}{IsCaseSensitive}{\param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
-Returns true if the file names of this type are case-sensitive.
+Returns {\tt true} if the file names of this type are case-sensitive.
 
 \membersection{wxFileName::IsOk}\label{wxfilenameisok}
 
@@ -492,7 +499,7 @@
 
 \membersection{wxFileName::IsPathSeparator}\label{wxfilenameispathseparator}
 
-\func{bool}{IsPathSeparator}{\param{wxChar }{ch}, \param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{static bool}{IsPathSeparator}{\param{wxChar }{ch}, \param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 Returns {\tt true} if the char is a path separator for this format.
 
@@ -527,7 +534,7 @@
 
 \membersection{wxFileName::MakeRelativeTo}\label{wxfilenamemakerelativeto}
 
-\func{bool}{MakeRelativeTo}{\param{const wxString\& }{pathBase = ""}, \param{wxPathFormat }{format = wxPATH\_NATIVE}}
+\func{bool}{MakeRelativeTo}{\param{const wxString\& }{pathBase = wxEmptyString}, \param{wxPathFormat }{format = wxPATH\_NATIVE}}
 
 This function tries to put this file name in a form relative to {\it pathBase}.
 In other words, it returns the file name which should be used to access this
Index: include/wx/filename.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filename.h,v
retrieving revision 1.38
diff -u -r1.38 filename.h
--- include/wx/filename.h	2003/04/19 18:12:30	1.38
+++ include/wx/filename.h	2003/06/20 09:34:10
@@ -51,13 +51,14 @@
 {
     wxPATH_NATIVE = 0,      // the path format for the current platform
     wxPATH_UNIX,
+    wxPATH_BEOS = wxPATH_UNIX,
     wxPATH_MAC,
     wxPATH_DOS,
+    wxPATH_WIN = wxPATH_DOS,
+    wxPATH_OS2 = wxPATH_DOS,
     wxPATH_VMS,
 
-    wxPATH_BEOS = wxPATH_UNIX,
-    wxPATH_WIN = wxPATH_DOS,
-    wxPATH_OS2 = wxPATH_DOS
+    wxPATH_MAX // Not a valid value for specifying path format
 };
 
 // the kind of normalization to do with the file name: these values can be
@@ -149,7 +150,7 @@
                 wxPathFormat format = wxPATH_NATIVE)
     {
         // empty volume
-        Assign(_T(""), path, name, ext, format);
+        Assign(wxEmptyString, path, name, ext, format);
     }
 
     void AssignDir(const wxString& dir, wxPathFormat format = wxPATH_NATIVE);
@@ -243,7 +244,6 @@
                                        wxFile *fileTemp = NULL);
 
     // directory creation and removal.
-    // if full is TRUE, will try to make each directory in the path.
     bool Mkdir( int perm = 0777, int flags = 0);
     static bool Mkdir( const wxString &dir, int perm = 0777, int flags = 0 );
 
@@ -266,10 +266,10 @@
         //
         // pass an empty string to get a path relative to the working directory
         //
-        // returns TRUE if the file name was modified, FALSE if we failed to do
+        // returns true if the file name was modified, false if we failed to do
         // anything with it (happens when the file is on a different volume,
         // for example)
-    bool MakeRelativeTo(const wxString& pathBase = _T(""),
+    bool MakeRelativeTo(const wxString& pathBase = wxEmptyString,
                         wxPathFormat format = wxPATH_NATIVE);
 
         // make the path absolute
@@ -308,6 +308,10 @@
     bool IsRelative(wxPathFormat format = wxPATH_NATIVE) const
         { return !IsAbsolute(format); }
 
+    // Returns the characters that aren't allowed in filenames
+    // on the specified platform.
+    static wxString GetForbiddenChars(wxPathFormat format = wxPATH_NATIVE);
+
     // Information about path format
 
     // get the string separating the volume from the path for this format,
@@ -416,9 +420,9 @@
     // that our path is '/', i.e. the root directory
     //
     // we use m_relative to distinguish between these two cases, it will be
-    // TRUE in the former and FALSE in the latter
+    // true in the former and false in the latter
     //
-    // NB: the path is not absolute just because m_relative is FALSE, it still
+    // NB: the path is not absolute just because m_relative is false, it still
     //     needs the drive (i.e. volume) in some formats (Windows)
     bool            m_relative;
 };
Index: src/common/filename.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/filename.cpp,v
retrieving revision 1.107
diff -u -r1.107 filename.cpp
--- src/common/filename.cpp	2003/03/29 15:50:13	1.107
+++ src/common/filename.cpp	2003/06/20 09:34:48
@@ -185,7 +185,7 @@
         }
     }
 
-    // return TRUE only if the file could be opened successfully
+    // return true only if the file could be opened successfully
     bool IsOk() const { return m_hFile != INVALID_HANDLE_VALUE; }
 
     // get the handle
@@ -340,9 +340,13 @@
 
             case wxPATH_VMS:
                 // TODO: what is the relative path format here?
-                m_relative = FALSE;
+                m_relative = false;
                 break;
 
+            default:
+                wxFAIL_MSG( _T("Unknown path format") );
+                // !! Fall through !!
+
             case wxPATH_UNIX:
                 // the paths of the form "~" or "~username" are absolute
                 m_relative = leadingChar != wxT('/') && leadingChar != _T('~');
@@ -352,9 +356,6 @@
                 m_relative = !IsPathSeparator(leadingChar, my_format);
                 break;
 
-            default:
-                wxFAIL_MSG( wxT("error") );
-                break;
         }
 
         // 2) Break up the path into its members. If the original path
@@ -383,7 +384,7 @@
     }
     else // no path at all
     {
-        m_relative = TRUE;
+        m_relative = true;
     }
 }
 
@@ -447,7 +448,7 @@
     m_ext = wxEmptyString;
 
     // we don't have any absolute path for now
-    m_relative = TRUE;
+    m_relative = true;
 }
 
 /* static */
@@ -799,12 +800,12 @@
                 if (!wxMkdir(currPath, perm))
                 {
                     // no need to try creating further directories
-                    return FALSE;
+                    return false;
                 }
             }
         }
 
-        return TRUE;
+        return true;
 
     }
 
@@ -913,7 +914,7 @@
                 {
                     wxLogError(_("The path '%s' contains too many \"..\"!"),
                                GetFullPath().c_str());
-                    return FALSE;
+                    return false;
                 }
 
                 m_dirs.RemoveAt(m_dirs.GetCount() - 1);
@@ -945,7 +946,7 @@
     // we do have the path now
     //
     // NB: need to do this before (maybe) calling Assign() below
-    m_relative = FALSE;
+    m_relative = false;
 
 #if defined(__WIN32__)
     if ( (flags & wxPATH_NORM_LONG) && (format == wxPATH_DOS) )
@@ -954,7 +955,7 @@
     }
 #endif // Win32
 
-    return TRUE;
+    return true;
 }
 
 // ----------------------------------------------------------------------------
@@ -966,17 +967,17 @@
     // if our path doesn't start with a path separator, it's not an absolute
     // path
     if ( m_relative )
-        return FALSE;
+        return false;
 
     if ( !GetVolumeSeparator(format).empty() )
     {
         // this format has volumes and an absolute path must have one, it's not
         // enough to have the full path to bean absolute file under Windows
         if ( GetVolume().empty() )
-            return FALSE;
+            return false;
     }
 
-    return TRUE;
+    return true;
 }
 
 bool wxFileName::MakeRelativeTo(const wxString& pathBase, wxPathFormat format)
@@ -994,7 +995,7 @@
     if ( !GetVolume().IsSameAs(fnBase.GetVolume(), withCase) )
     {
         // nothing done
-        return FALSE;
+        return false;
     }
 
     // same drive, so we don't need our volume
@@ -1026,10 +1027,10 @@
         }
     }
 
-    m_relative = TRUE;
+    m_relative = true;
 
     // we were modified
-    return TRUE;
+    return true;
 }
 
 // ----------------------------------------------------------------------------
@@ -1047,12 +1048,12 @@
     fn2.Normalize(wxPATH_NORM_ALL & ~wxPATH_NORM_CASE, cwd, format);
 
     if ( fn1.GetFullPath() == fn2.GetFullPath() )
-        return TRUE;
+        return true;
 
     // TODO: compare inodes for Unix, this works even when filenames are
     //       different but files are the same (symlinks) (VZ)
 
-    return FALSE;
+    return false;
 }
 
 /* static */
@@ -1063,6 +1064,41 @@
 }
 
 /* static */
+wxString wxFileName::GetForbiddenChars(wxPathFormat format)
+{
+    // Inits to forbidden characters that are common to (almost) all platforms.
+    wxString strForbiddenChars = wxT("*?");
+
+    // If asserts, wxPathFormat has been changed. In case of a new path format
+    // addition, the following code might have to be updated.
+    wxCOMPILE_TIME_ASSERT(wxPATH_MAX == 5, wxPathFormatChanged);
+    switch ( GetFormat(format) )
+    {
+        default :
+            wxFAIL_MSG( wxT("Unknown path format") );
+            // !! Fall through !!
+
+        case wxPATH_UNIX :
+            break;
+
+        case wxPATH_MAC :
+            // On a Mac even names with * and ? are allowed (Tested with OS
+            // 9.2.1 and OS X 10.2.5)
+            strForbiddenChars = wxEmptyString;
+            break;
+
+        case wxPATH_DOS :
+            strForbiddenChars += wxT("\\/:\"<>|");
+            break;
+
+        case wxPATH_VMS :
+            break;
+    }
+
+    return strForbiddenChars;
+}
+
+/* static */
 wxString wxFileName::GetVolumeSeparator(wxPathFormat format)
 {
     wxString sepVol;
@@ -1090,7 +1126,7 @@
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown wxPATH_XXX style") );
+            wxFAIL_MSG( _T("Unknown wxPATH_XXX style") );
             // fall through
 
         case wxPATH_UNIX:
@@ -1189,7 +1225,7 @@
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown path format") );
+            wxFAIL_MSG( wxT("Unknown path format") );
             // fall through
 
         case wxPATH_UNIX:
@@ -1239,7 +1275,7 @@
                     break;
 
                 default:
-                    wxFAIL_MSG( wxT("unexpected path format") );
+                    wxFAIL_MSG( wxT("Unexpected path format") );
                     // still fall through
 
                 case wxPATH_DOS:
@@ -1315,19 +1351,19 @@
              path = GetFullPath();
 
 #if defined(__WIN32__) && !defined(__WXMICROWIN__)
-    bool success = FALSE;
+    bool success = false;
 
 #if wxUSE_DYNAMIC_LOADER
     typedef DWORD (WINAPI *GET_LONG_PATH_NAME)(const wxChar *, wxChar *, DWORD);
 
-    static bool s_triedToLoad = FALSE;
+    static bool s_triedToLoad = false;
 
     if ( !s_triedToLoad )
     {
         // suppress the errors about missing GetLongPathName[AW]
         wxLogNull noLog;
 
-        s_triedToLoad = TRUE;
+        s_triedToLoad = true;
         wxDynamicLibrary dllKernel(_T("kernel32"));
         if ( dllKernel.IsLoaded() )
         {
@@ -1358,7 +1394,7 @@
                                 ) != 0;
                         pathOut.UngetWriteBuf();
 
-                        success = TRUE;
+                        success = true;
                     }
                 }
             }
@@ -1657,7 +1693,7 @@
                                dtAccess ? &ftAccess : NULL,
                                dtMod ? &ftWrite : NULL) )
             {
-                return TRUE;
+                return true;
             }
         }
     }
@@ -1665,7 +1701,7 @@
     if ( !dtAccess && !dtMod )
     {
         // can't modify the creation time anyhow, don't try
-        return TRUE;
+        return true;
     }
 
     // if dtAccess or dtMod is not specified, use the other one (which must be
@@ -1675,7 +1711,7 @@
     utm.modtime = dtMod ? dtMod->GetTicks() : dtAccess->GetTicks();
     if ( utime(GetFullPath().fn_str(), &utm) == 0 )
     {
-        return TRUE;
+        return true;
     }
 #else // other platform
 #endif // platforms
@@ -1683,7 +1719,7 @@
     wxLogSysError(_("Failed to modify file times for '%s'"),
                   GetFullPath().c_str());
 
-    return FALSE;
+    return false;
 }
 
 bool wxFileName::Touch()
@@ -1692,12 +1728,12 @@
     // under Unix touching file is simple: just pass NULL to utime()
     if ( utime(GetFullPath().fn_str(), NULL) == 0 )
     {
-        return TRUE;
+        return true;
     }
 
     wxLogSysError(_("Failed to touch the file '%s'"), GetFullPath().c_str());
 
-    return FALSE;
+    return false;
 #else // other platform
     wxDateTime dtNow = wxDateTime::Now();
 
@@ -1739,7 +1775,7 @@
         }
         else
         {
-            ok = FALSE;
+            ok = false;
         }
     }
 
@@ -1752,7 +1788,7 @@
         if ( dtMod )
             ConvertFileTimeToWx(dtMod, ftWrite);
 
-        return TRUE;
+        return true;
     }
 #elif defined(__UNIX_LIKE__) || defined(__WXMAC__) || (defined(__DOS__) && defined(__WATCOMC__))
     wxStructStat stBuf;
@@ -1765,7 +1801,7 @@
         if ( dtCreate )
             dtCreate->Set(stBuf.st_ctime);
 
-        return TRUE;
+        return true;
     }
 #else // other platform
 #endif // platforms
@@ -1773,7 +1809,7 @@
     wxLogSysError(_("Failed to retrieve file times for '%s'"),
                   GetFullPath().c_str());
 
-    return FALSE;
+    return false;
 }
 
 #endif // wxUSE_DATETIME

 	  	 

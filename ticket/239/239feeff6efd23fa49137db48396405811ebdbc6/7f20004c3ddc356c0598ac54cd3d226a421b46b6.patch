diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/build/bakefiles/files.bkl wxWidgets/build/bakefiles/files.bkl
--- ..\..\wxWidgets/build/bakefiles/files.bkl	2006-12-07 15:07:23.859250000 -0800
+++ wxWidgets/build/bakefiles/files.bkl	2006-12-07 14:30:16.562375000 -0800
@@ -673,6 +673,7 @@
     src/generic/selstore.cpp
     src/generic/spinctlg.cpp
     src/generic/splitter.cpp
+    src/generic/srchctlg.cpp
     src/generic/textdlgg.cpp
     src/generic/tipwin.cpp
     src/generic/toolbkg.cpp
@@ -854,6 +855,7 @@
     wx/spinbutt.h
     wx/spinctrl.h
     wx/splitter.h
+    wx/srchctrl.h
     wx/statline.h
     wx/tab.h
     wx/tabctrl.h
@@ -1583,6 +1585,7 @@
     wx/generic/clrpickerg.h
     wx/generic/fontpickerg.h
     wx/generic/filepickerg.h
+    wx/generic/srchctlg.h
     wx/msw/accel.h
     wx/msw/app.h
     wx/msw/bitmap.h
@@ -2135,6 +2138,7 @@
     src/mac/carbon/slider.cpp
     src/mac/carbon/spinbutt.cpp
     src/mac/carbon/spinctrl.cpp
+    src/mac/carbon/srchctrl.cpp
     src/mac/carbon/statbmp.cpp
     src/mac/carbon/statbox.cpp
     src/mac/carbon/statbrma.cpp
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/docs/latex/wx/classes.tex wxWidgets/docs/latex/wx/classes.tex
--- ..\..\wxWidgets/docs/latex/wx/classes.tex	2006-12-07 15:08:10.296750000 -0800
+++ wxWidgets/docs/latex/wx/classes.tex	2006-12-04 21:45:06.796750000 -0800
@@ -348,6 +348,7 @@
 \input setcursorevt.tex
 \input ipcservr.tex
 \input hprovsmp.tex
+\input srchctrl.tex
 \input sngchdlg.tex
 \input snglinst.tex
 \input size.tex
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/docs/latex/wx/srchctrl.tex wxWidgets/docs/latex/wx/srchctrl.tex
--- ..\..\wxWidgets/docs/latex/wx/srchctrl.tex	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/docs/latex/wx/srchctrl.tex	2006-12-07 10:19:30.718375000 -0800
@@ -0,0 +1,156 @@
+%%%%%%%%%%%%%%%%%%%%%%%%%%%% wxSearchCtrl %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+
+\section{\class{wxSearchCtrl}}\label{wxsearchctrl}
+
+A search control is a composite control with a search button, a text 
+control, and a cancel button.
+
+\wxheading{Derived from}
+
+\helpref{wxTextCtrl}{wxsearchctrl}\\
+streambuf\\
+\helpref{wxControl}{wxcontrol}\\
+\helpref{wxWindow}{wxwindow}\\
+\helpref{wxEvtHandler}{wxevthandler}\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/srchctrl.h>
+
+\wxheading{Window styles}
+
+\twocolwidtha{5cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\windowstyle{wxTE\_PROCESS\_ENTER}}{The control will generate
+the event wxEVT\_COMMAND\_TEXT\_ENTER (otherwise pressing Enter key
+is either processed internally by the control or used for navigation between
+dialog controls).}
+\twocolitem{\windowstyle{wxTE\_PROCESS\_TAB}}{The control will receive
+wxEVT\_CHAR events for TAB pressed - normally, TAB is used for passing to the
+next control in a dialog instead. For the control created with this style,
+you can still use Ctrl-Enter to pass to the next control from the keyboard.}
+\twocolitem{\windowstyle{wxTE\_NOHIDESEL}}{By default, the Windows text control
+doesn't show the selection when it doesn't have focus - use this style to force
+it to always show it. It doesn't do anything under other platforms.}
+\twocolitem{\windowstyle{wxTE\_LEFT}}{The text in the control will be left-justified (default).}
+\twocolitem{\windowstyle{wxTE\_CENTRE}}{The text in the control will be centered (currently wxMSW and wxGTK2 only).}
+\twocolitem{\windowstyle{wxTE\_RIGHT}}{The text in the control will be right-justified (currently wxMSW and wxGTK2 only).}
+\twocolitem{\windowstyle{wxTE\_CAPITALIZE}}{On PocketPC and Smartphone, causes the first letter to be capitalized.}
+\end{twocollist}
+
+See also \helpref{window styles overview}{windowstyles} and \helpref{wxSearchCtrl::wxSearchCtrl}{wxsearchctrlctor}.
+
+\wxheading{Event handling}
+
+To process input from a search control, use these event handler macros to direct input to member
+functions that take a \helpref{wxCommandEvent}{wxcommandevent} argument.
+
+\twocolwidtha{9cm}%
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf EVT\_SEARCHCTRL\_SEARCH(id, func)}}{Respond to a wxEVT\_SEARCHCTRL\_SEARCH event,
+generated when the search button is clicked.}
+\twocolitem{{\bf EVT\_SEARCHCTRL\_CANCEL(id, func)}}{Respond to a wxEVT\_SEARCHCTRL\_CANCEL event,
+generated when the cancel button is clicked.}
+\end{twocollist}%
+
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+
+\membersection{wxSearchCtrl::wxSearchCtrl}\label{wxsearchctrlctor}
+
+\func{}{wxSearchCtrl}{\void}
+
+Default constructor.
+
+\func{}{wxSearchCtrl}{\param{wxWindow* }{parent}, \param{wxWindowID}{ id},\rtfsp
+\param{const wxString\& }{value = ``"}, \param{const wxPoint\& }{pos = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator = wxDefaultValidator}, \param{const wxString\& }{name = wxSearchCtrlNameStr}}
+
+Constructor, creating and showing a text control.
+
+\wxheading{Parameters}
+
+\docparam{parent}{Parent window. Should not be NULL.}
+
+\docparam{id}{Control identifier. A value of -1 denotes a default value.}
+
+\docparam{value}{Default text value.}
+
+\docparam{pos}{Text control position.}
+
+\docparam{size}{Text control size.}
+
+\docparam{style}{Window style. See \helpref{wxSearchCtrl}{wxsearchctrl}.}
+
+\docparam{validator}{Window validator.}
+
+\docparam{name}{Window name.}
+
+\wxheading{See also}
+
+\helpref{wxTextCtrl::Create}{wxtextctrlcreate}, \helpref{wxValidator}{wxvalidator}
+
+
+\membersection{wxSearchCtrl::\destruct{wxSearchCtrl}}\label{wxsearchctrldtor}
+
+\func{}{\destruct{wxSearchCtrl}}{\void}
+
+Destructor, destroying the search control.
+
+
+\membersection{wxSearchCtrl::SetMenu}\label{wxsearchctrlsetmenu}
+
+\func{virtual void}{SetMenu}{\param{wxMenu* }{ menu}}
+
+Sets the search control's menu object.  If there is already a menu associated with
+the search control it is deleted.
+
+
+\wxheading{Parameters}
+
+\docparam{menu}{Menu to attach to the search control.}
+
+\membersection{wxSearchCtrl::GetMenu}\label{wxsearchctrlgetmenu}
+
+\func{virtual wxMenu*}{GetMenu}{\void}
+
+Returns a pointer to the search control's menu object or NULL if there is no 
+menu attached.
+
+
+\membersection{wxSearchCtrl::SetSearchButtonVisible}\label{wxsearchctrlsetsearchbuttonvisible}
+
+\func{virtual void}{SetSearchButtonVisible}{\param{bool }{ show}}
+
+Sets the search button visibility value on the search control.  
+If there is a menu attached, the search button will be visible regardless of the search
+button visibility value. 
+
+This has no effect in Mac OS X v10.3
+
+
+\membersection{wxSearchCtrl::GetSearchButtonVisible}\label{wxsearchctrlgetsearchbuttonvisible}
+
+\func{virtual bool}{GetSearchButtonVisible}{\void}
+
+Returns the search button visibility value.  
+If there is a menu attached, the search button will be visible regardless of the search
+button visibility value. 
+
+This always returns false in Mac OS X v10.3
+
+
+\membersection{wxSearchCtrl::SetCancelButtonVisible}\label{wxsearchctrlsetcancelbuttonvisible}
+
+\func{virtual void}{SetCancelButtonVisible}{\param{bool }{ show}}
+
+Shows or hides the cancel button.
+
+
+\membersection{wxSearchCtrl::GetCancelButtonVisible}\label{wxsearchctrlgetcancelbuttonvisible}
+
+\func{virtual bool}{GetCancelButtonVisible}{\void}
+
+Indicates whether the cancel button is visible.
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/event.h wxWidgets/include/wx/event.h
--- ..\..\wxWidgets/include/wx/event.h	2006-12-07 15:08:31.124875000 -0800
+++ wxWidgets/include/wx/event.h	2006-12-03 09:22:00.343750000 -0800
@@ -152,6 +152,8 @@
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOOL_RCLICKED, 16)
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOOL_ENTER, 17)
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_SPINCTRL_UPDATED, 18)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SEARCHCTRL_CANCEL, 19)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SEARCHCTRL_SEARCH, 20)
 
         // Sockets and timers send events, too
     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_SOCKET, 50)
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/generic/srchctlg.h wxWidgets/include/wx/generic/srchctlg.h
--- ..\..\wxWidgets/include/wx/generic/srchctlg.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/include/wx/generic/srchctlg.h	2006-12-07 10:36:51.562125000 -0800
@@ -0,0 +1,268 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/srchctlg.h
+// Purpose:     generic wxSearchCtrl class
+// Author:      Vince Harron
+// Modified by:
+// Created:     2006-02-19
+// RCS-ID:      
+// Copyright:   Vince Harron
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GENERIC_SEARCHCTRL_H_
+#define _WX_GENERIC_SEARCHCTRL_H_
+
+#if wxUSE_SEARCHCTRL
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "srchctlg.h"
+#endif
+
+class WXDLLEXPORT wxSearchButton;
+class WXDLLEXPORT wxSearchTextCtrl;
+
+class WXDLLEXPORT wxSearchCtrlBase : public wxTextCtrlBase
+{
+public:
+    wxSearchCtrlBase() {}
+    virtual ~wxSearchCtrlBase() {}
+
+    // search control 
+    virtual void SetMenu( wxMenu* menu ) = 0;
+    virtual wxMenu* GetMenu() = 0;
+
+
+    // get/set options
+    virtual void SetSearchButtonVisible( bool show ) = 0;
+    virtual bool GetSearchButtonVisible() const = 0;
+
+    virtual void SetCancelButtonVisible( bool show ) = 0;
+    virtual bool GetCancelButtonVisible() const = 0;
+protected:
+};
+
+// ----------------------------------------------------------------------------
+// wxSearchCtrl is a combination of wxTextCtrl and wxSearchButton
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxSearchCtrl : public wxSearchCtrlBase
+{
+public:
+    // creation
+    // --------
+
+    wxSearchCtrl();
+    wxSearchCtrl(wxWindow *parent, wxWindowID id,
+               const wxString& value = wxEmptyString,
+               const wxPoint& pos = wxDefaultPosition,
+               const wxSize& size = wxDefaultSize,
+               long style = 0,
+               const wxValidator& validator = wxDefaultValidator,
+               const wxString& name = wxSearchCtrlNameStr);
+
+    ~wxSearchCtrl();
+
+    bool Create(wxWindow *parent, wxWindowID id,
+                const wxString& value = wxEmptyString,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxSearchCtrlNameStr);
+
+    // get/set search button menu
+    // --------------------------
+    virtual void SetMenu( wxMenu* menu );
+    virtual wxMenu* GetMenu();
+    
+    // get/set search options
+    // ----------------------
+    virtual void SetSearchButtonVisible( bool show );
+    virtual bool GetSearchButtonVisible() const;
+
+    virtual void SetCancelButtonVisible( bool show );
+    virtual bool GetCancelButtonVisible() const;
+
+    // accessors
+    // ---------
+
+    virtual wxString GetValue() const;
+    virtual void SetValue(const wxString& value);
+
+    virtual wxString GetRange(long from, long to) const;
+
+    virtual int GetLineLength(long lineNo) const;
+    virtual wxString GetLineText(long lineNo) const;
+    virtual int GetNumberOfLines() const;
+
+    virtual bool IsModified() const;
+    virtual bool IsEditable() const;
+
+    // more readable flag testing methods
+    virtual bool IsSingleLine() const;
+    virtual bool IsMultiLine() const;
+
+    // If the return values from and to are the same, there is no selection.
+    virtual void GetSelection(long* from, long* to) const;
+
+    virtual wxString GetStringSelection() const;
+
+    // operations
+    // ----------
+
+    // editing
+    virtual void Clear();
+    virtual void Replace(long from, long to, const wxString& value);
+    virtual void Remove(long from, long to);
+
+    // load/save the controls contents from/to the file
+    virtual bool LoadFile(const wxString& file);
+    virtual bool SaveFile(const wxString& file = wxEmptyString);
+
+    // sets/clears the dirty flag
+    virtual void MarkDirty();
+    virtual void DiscardEdits();
+
+    // set the max number of characters which may be entered in a single line
+    // text control
+    virtual void SetMaxLength(unsigned long WXUNUSED(len));
+
+    // writing text inserts it at the current position, appending always
+    // inserts it at the end
+    virtual void WriteText(const wxString& text);
+    virtual void AppendText(const wxString& text);
+
+    // insert the character which would have resulted from this key event,
+    // return true if anything has been inserted
+    virtual bool EmulateKeyPress(const wxKeyEvent& event);
+
+    // text control under some platforms supports the text styles: these
+    // methods allow to apply the given text style to the given selection or to
+    // set/get the style which will be used for all appended text
+    virtual bool SetStyle(long start, long end, const wxTextAttr& style);
+    virtual bool GetStyle(long position, wxTextAttr& style);
+    virtual bool SetDefaultStyle(const wxTextAttr& style);
+    virtual const wxTextAttr& GetDefaultStyle() const;
+
+    // translate between the position (which is just an index in the text ctrl
+    // considering all its contents as a single strings) and (x, y) coordinates
+    // which represent column and line.
+    virtual long XYToPosition(long x, long y) const;
+    virtual bool PositionToXY(long pos, long *x, long *y) const;
+
+    virtual void ShowPosition(long pos);
+
+    // find the character at position given in pixels
+    //
+    // NB: pt is in device coords (not adjusted for the client area origin nor
+    //     scrolling)
+    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
+    virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
+                                            wxTextCoord *col,
+                                            wxTextCoord *row) const;
+
+    // Clipboard operations
+    virtual void Copy();
+    virtual void Cut();
+    virtual void Paste();
+
+    virtual bool CanCopy() const;
+    virtual bool CanCut() const;
+    virtual bool CanPaste() const;
+
+    // Undo/redo
+    virtual void Undo();
+    virtual void Redo();
+
+    virtual bool CanUndo() const;
+    virtual bool CanRedo() const;
+
+    // Insertion point
+    virtual void SetInsertionPoint(long pos);
+    virtual void SetInsertionPointEnd();
+    virtual long GetInsertionPoint() const;
+    virtual wxTextPos GetLastPosition() const;
+
+    virtual void SetSelection(long from, long to);
+    virtual void SelectAll();
+    virtual void SetEditable(bool editable);
+
+#if 0
+
+    // override streambuf method
+#if wxHAS_TEXT_WINDOW_STREAM
+    int overflow(int i);
+#endif // wxHAS_TEXT_WINDOW_STREAM
+
+    // stream-like insertion operators: these are always available, whether we
+    // were, or not, compiled with streambuf support
+    wxTextCtrl& operator<<(const wxString& s);
+    wxTextCtrl& operator<<(int i);
+    wxTextCtrl& operator<<(long i);
+    wxTextCtrl& operator<<(float f);
+    wxTextCtrl& operator<<(double d);
+    wxTextCtrl& operator<<(const wxChar c);
+#endif
+
+    // do the window-specific processing after processing the update event
+    virtual void DoUpdateWindowUI(wxUpdateUIEvent& event);
+
+    virtual bool ShouldInheritColours() const;
+
+    // wxWindow overrides
+    virtual bool SetFont(const wxFont& font);
+
+    // search control generic only
+    void SetSearchBitmap( const wxBitmap& bitmap );
+    void SetSearchMenuBitmap( const wxBitmap& bitmap );
+    void SetCancelBitmap( const wxBitmap& bitmap );
+
+protected:
+    virtual void DoSetValue(const wxString& value, int flags = 0);
+
+    // override the base class virtuals involved into geometry calculations
+    virtual wxSize DoGetBestSize() const;
+    virtual void DoMoveWindow(int x, int y, int width, int height);
+    virtual void LayoutControls(int x, int y, int width, int height);
+
+    virtual void RecalcBitmaps();
+
+    void Init();
+
+    virtual wxBitmap RenderSearchBitmap( int x, int y, bool renderDrop );
+    virtual wxBitmap RenderCancelBitmap( int x, int y );
+
+    virtual void OnSearchButton( wxCommandEvent& event );
+
+    void OnSetFocus( wxFocusEvent& event );
+
+private:
+    friend class wxSearchButton;
+
+    void PopupSearchMenu();
+
+    // the subcontrols
+    wxSearchTextCtrl *m_text;
+    wxSearchButton *m_searchButton;
+    wxSearchButton *m_cancelButton;
+    wxMenu *m_menu;
+
+    bool m_searchButtonVisible;
+    bool m_cancelButtonVisible;
+
+    bool m_searchBitmapUser;
+    bool m_searchMenuBitmapUser;
+    bool m_cancelBitmapUser;
+    wxBitmap m_searchBitmap;
+    wxBitmap m_searchMenuBitmap;
+    wxBitmap m_cancelBitmap;
+private:
+    DECLARE_DYNAMIC_CLASS(wxSearchCtrl)
+
+    DECLARE_EVENT_TABLE()
+};
+
+#endif // wxUSE_SEARCHCTRL
+
+#endif // _WX_GENERIC_SEARCHCTRL_H_
+
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/carbon/private/mactext.h wxWidgets/include/wx/mac/carbon/private/mactext.h
--- ..\..\wxWidgets/include/wx/mac/carbon/private/mactext.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/include/wx/mac/carbon/private/mactext.h	2006-12-07 10:19:30.812125000 -0800
@@ -0,0 +1,115 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        mactext.h
+// Purpose:     private wxMacTextControl base class
+// Author:      Stefan Csomor
+// Modified by:
+// Created:     03/02/99
+// RCS-ID:      $Id: 
+// Copyright:   (c) Stefan Csomor
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_MAC_PRIVATE_MACTEXT_H_
+#define _WX_MAC_PRIVATE_MACTEXT_H_
+
+#include "wx/mac/private.h"
+
+// common interface for all implementations
+class wxMacTextControl : public wxMacControl
+{
+public :
+    wxMacTextControl( wxTextCtrl *peer ) ;
+    virtual ~wxMacTextControl() ;
+
+    virtual wxString GetStringValue() const = 0 ;
+    virtual void SetStringValue( const wxString &val ) = 0 ;
+    virtual void SetSelection( long from, long to ) = 0 ;
+    virtual void GetSelection( long* from, long* to ) const = 0 ;
+    virtual void WriteText( const wxString& str ) = 0 ;
+
+    virtual void SetStyle( long start, long end, const wxTextAttr& style ) ;
+    virtual void Copy() ;
+    virtual void Cut() ;
+    virtual void Paste() ;
+    virtual bool CanPaste() const ;
+    virtual void SetEditable( bool editable ) ;
+    virtual wxTextPos GetLastPosition() const ;
+    virtual void Replace( long from, long to, const wxString &str ) ;
+    virtual void Remove( long from, long to ) ;
+
+
+    virtual bool HasOwnContextMenu() const
+    { return false ; }
+
+    virtual bool SetupCursor( const wxPoint& pt )
+    { return false ; }
+
+    virtual void Clear() ;
+    virtual bool CanUndo() const;
+    virtual void Undo() ;
+    virtual bool CanRedo() const;
+    virtual void Redo() ;
+    virtual int GetNumberOfLines() const ;
+    virtual long XYToPosition(long x, long y) const;
+    virtual bool PositionToXY(long pos, long *x, long *y) const ;
+    virtual void ShowPosition(long WXUNUSED(pos)) ;
+    virtual int GetLineLength(long lineNo) const ;
+    virtual wxString GetLineText(long lineNo) const ;
+    virtual void CheckSpelling(bool check) { }
+
+#ifndef __WXMAC_OSX__
+    virtual void            MacControlUserPaneDrawProc(wxInt16 part) = 0 ;
+    virtual wxInt16         MacControlUserPaneHitTestProc(wxInt16 x, wxInt16 y) = 0 ;
+    virtual wxInt16         MacControlUserPaneTrackingProc(wxInt16 x, wxInt16 y, void* actionProc) = 0 ;
+    virtual void            MacControlUserPaneIdleProc() = 0 ;
+    virtual wxInt16         MacControlUserPaneKeyDownProc(wxInt16 keyCode, wxInt16 charCode, wxInt16 modifiers) = 0 ;
+    virtual void            MacControlUserPaneActivateProc(bool activating) = 0 ;
+    virtual wxInt16         MacControlUserPaneFocusProc(wxInt16 action) = 0 ;
+    virtual void            MacControlUserPaneBackgroundProc(void* info) = 0 ;
+#endif
+} ;
+
+#if TARGET_API_MAC_OSX
+
+class wxMacUnicodeTextControl : public wxMacTextControl
+{
+public :
+    wxMacUnicodeTextControl( wxTextCtrl *wxPeer ) ;
+    wxMacUnicodeTextControl( wxTextCtrl *wxPeer,
+                             const wxString& str,
+                             const wxPoint& pos,
+                             const wxSize& size, long style ) ;
+    virtual ~wxMacUnicodeTextControl();
+
+    virtual bool Create( wxTextCtrl *wxPeer,
+                         const wxString& str,
+                         const wxPoint& pos,
+                         const wxSize& size, long style ) ;
+    virtual void VisibilityChanged(bool shown);
+    virtual wxString GetStringValue() const ;
+    virtual void SetStringValue( const wxString &str) ;
+    virtual void Copy();
+    virtual void Cut();
+    virtual void Paste();
+    virtual bool CanPaste() const;
+    virtual void SetEditable(bool editable) ;
+    virtual void GetSelection( long* from, long* to) const ;
+    virtual void SetSelection( long from , long to ) ;
+    virtual void WriteText(const wxString& str) ;
+
+protected :
+	virtual void CreateControl( wxTextCtrl* peer, const Rect* bounds, CFStringRef cfr );
+
+    // contains the tag for the content (is different for password and non-password controls)
+    OSType m_valueTag ;
+
+    // as the selection tag only works correctly when the control has the focus we have to mirror the
+    // intended value
+    EventHandlerRef m_focusHandlerRef ;
+public :
+    ControlEditTextSelectionRec m_selection ;
+};
+
+#endif // TARGET_API_MAC_OSX
+
+#endif // _WX_MAC_PRIVATE_MACTEXT_H_
\ No newline at end of file
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/carbon/srchctrl.h wxWidgets/include/wx/mac/carbon/srchctrl.h
--- ..\..\wxWidgets/include/wx/mac/carbon/srchctrl.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/include/wx/mac/carbon/srchctrl.h	2006-12-07 10:19:30.812125000 -0800
@@ -0,0 +1,107 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/mac/carbon/srchctrl.h
+// Purpose:     mac carbon wxSearchCtrl class
+// Author:      Vince Harron
+// Modified by:
+// Created:     2006-02-19
+// RCS-ID:      
+// Copyright:   Vince Harron
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_SEARCHCTRL_H_
+#define _WX_SEARCHCTRL_H_
+
+#if wxUSE_SEARCHCTRL
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "srchctrl.h"
+#endif
+
+class WXDLLEXPORT wxSearchCtrlBase : public wxTextCtrl
+{
+public:
+    wxSearchCtrlBase() {}
+    virtual ~wxSearchCtrlBase() {}
+
+    // search control 
+    virtual void SetMenu( wxMenu* menu ) = 0;
+    virtual wxMenu* GetMenu() = 0;
+
+
+    // get/set options
+    virtual void SetSearchButtonVisible( bool show ) = 0;
+    virtual bool GetSearchButtonVisible() const = 0;
+
+    virtual void SetCancelButtonVisible( bool show ) = 0;
+    virtual bool GetCancelButtonVisible() const = 0;
+protected:
+};
+
+class wxMacSearchFieldControl;
+
+class WXDLLEXPORT wxSearchCtrl : public wxSearchCtrlBase
+{
+public:
+    // creation
+    // --------
+
+    wxSearchCtrl();
+    wxSearchCtrl(wxWindow *parent, wxWindowID id,
+               const wxString& value = wxEmptyString,
+               const wxPoint& pos = wxDefaultPosition,
+               const wxSize& size = wxDefaultSize,
+               long style = 0,
+               const wxValidator& validator = wxDefaultValidator,
+               const wxString& name = wxSearchCtrlNameStr);
+
+    ~wxSearchCtrl();
+
+    bool Create(wxWindow *parent, wxWindowID id,
+                const wxString& value = wxEmptyString,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxSearchCtrlNameStr);
+
+    // get/set search button menu
+    // --------------------------
+    virtual void SetMenu( wxMenu* menu );
+    virtual wxMenu* GetMenu();
+    
+    // get/set search options
+    // ----------------------
+    virtual void SetSearchButtonVisible( bool show );
+    virtual bool GetSearchButtonVisible() const;
+
+    virtual void SetCancelButtonVisible( bool show );
+    virtual bool GetCancelButtonVisible() const;
+
+    virtual wxInt32     MacSearchFieldSearchHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
+    virtual wxInt32     MacSearchFieldCancelHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
+
+    wxMacSearchFieldControl * GetPeer() const
+    { return (wxMacSearchFieldControl*) m_peer; }
+	
+protected:
+
+    void Init();
+
+    virtual void CreatePeer(
+           const wxString& str,
+           const wxPoint& pos,
+           const wxSize& size, long style );
+
+    wxMenu *m_menu;
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxSearchCtrl)
+
+    DECLARE_EVENT_TABLE()
+};
+
+#endif // wxUSE_SEARCHCTRL
+
+#endif // _WX_SEARCHCTRL_H_
+
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/carbon/textctrl.h wxWidgets/include/wx/mac/carbon/textctrl.h
--- ..\..\wxWidgets/include/wx/mac/carbon/textctrl.h	2006-12-07 15:08:35.515500000 -0800
+++ wxWidgets/include/wx/mac/carbon/textctrl.h	2006-12-07 10:19:30.812125000 -0800
@@ -192,6 +192,8 @@
 
     virtual wxSize DoGetBestSize() const;
 
+    virtual void CreatePeer(const wxString& str, const wxPoint& pos, const wxSize& size, long style );
+	
     virtual void DoSetValue(const wxString& value, int flags = 0);
 
     bool  m_editable;
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/carbon/window.h wxWidgets/include/wx/mac/carbon/window.h
--- ..\..\wxWidgets/include/wx/mac/carbon/window.h	2006-12-07 15:08:36.468625000 -0800
+++ wxWidgets/include/wx/mac/carbon/window.h	2006-12-07 10:19:30.827750000 -0800
@@ -189,6 +189,8 @@
     virtual void        MacEnabledStateChanged() ;
     virtual void        MacHiliteChanged() ;
     virtual wxInt32     MacControlHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
+    virtual wxInt32     MacSearchFieldSearchHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
+    virtual wxInt32     MacSearchFieldCancelHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
 
     bool                MacIsReallyShown() ;
     bool                MacIsReallyEnabled() ;
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/setup0.h wxWidgets/include/wx/mac/setup0.h
--- ..\..\wxWidgets/include/wx/mac/setup0.h	2006-12-07 15:08:37.046750000 -0800
+++ wxWidgets/include/wx/mac/setup0.h	2006-12-07 15:49:28.843625000 -0800
@@ -639,6 +639,7 @@
 #define wxUSE_RADIOBOX      1   // wxRadioBox
 #define wxUSE_RADIOBTN      1   // wxRadioButton
 #define wxUSE_SCROLLBAR     1   // wxScrollBar
+#define wxUSE_SEARCHCTRL    1   // wxSearchCtrl
 #define wxUSE_SLIDER        1   // wxSlider
 #define wxUSE_SPINBTN       1   // wxSpinButton
 #define wxUSE_SPINCTRL      1   // wxSpinCtrl
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/mac/srchctrl.h wxWidgets/include/wx/mac/srchctrl.h
--- ..\..\wxWidgets/include/wx/mac/srchctrl.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/include/wx/mac/srchctrl.h	2006-12-07 10:19:31.030875000 -0800
@@ -0,0 +1,5 @@
+#ifdef __WXMAC_CLASSIC__
+#include "wx/generic/srchctlg.h"
+#else
+#include "wx/mac/carbon/srchctrl.h"
+#endif
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/msw/setup0.h wxWidgets/include/wx/msw/setup0.h
--- ..\..\wxWidgets/include/wx/msw/setup0.h	2006-12-07 15:08:40.828000000 -0800
+++ wxWidgets/include/wx/msw/setup0.h	2006-12-07 15:51:26.562375000 -0800
@@ -638,6 +638,7 @@
 #define wxUSE_RADIOBOX      1   // wxRadioBox
 #define wxUSE_RADIOBTN      1   // wxRadioButton
 #define wxUSE_SCROLLBAR     1   // wxScrollBar
+#define wxUSE_SEARCHCTRL    1   // wxSearchCtrl
 #define wxUSE_SLIDER        1   // wxSlider
 #define wxUSE_SPINBTN       1   // wxSpinButton
 #define wxUSE_SPINCTRL      1   // wxSpinCtrl
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/srchctrl.h wxWidgets/include/wx/srchctrl.h
--- ..\..\wxWidgets/include/wx/srchctrl.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/include/wx/srchctrl.h	2006-12-07 12:46:01.781125000 -0800
@@ -0,0 +1,61 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        srchctrl.h
+// Purpose:     wxSearchCtrlBase class
+// Author:      Vince Harron
+// Modified by:
+// Created:     2006-02-18
+// RCS-ID:      
+// Copyright:   (c) Vince Harron
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_SEARCHCTRL_H_BASE_
+#define _WX_SEARCHCTRL_H_BASE_
+
+#include "wx/defs.h"
+
+#if wxUSE_SEARCHCTRL
+
+#include "wx/textctrl.h"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+extern WXDLLEXPORT_DATA(const wxChar) wxSearchCtrlNameStr[];
+
+// ----------------------------------------------------------------------------
+// a search ctrl is a text control with a search button and a cancel button
+// it is based on the MacOSX 10.3 control HISearchFieldCreate
+// ----------------------------------------------------------------------------
+
+// ----------------------------------------------------------------------------
+// include the platform-dependent class implementation
+// ----------------------------------------------------------------------------
+
+#if !defined(__WXUNIVERSAL__) && defined( __WXMAC__ ) && defined( __WXMAC_OSX__ ) && ( MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3 )
+    // search control was introduced in Mac OS X 10.3 Panther
+    #define USE_NATIVE_SEARCH_CONTROL 1
+#else
+    //not supported on these platforms, leave 0
+    #define USE_NATIVE_SEARCH_CONTROL 0
+#endif
+
+#if USE_NATIVE_SEARCH_CONTROL
+    #if defined(__WXMAC__)
+        #include "wx/mac/srchctrl.h"
+    #endif
+#else
+    #include "wx/generic/srchctlg.h"
+#endif
+
+// macros for handling search events
+#define EVT_SEARCHCTRL_CANCEL(id, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_SEARCHCTRL_CANCEL, id, wxCommandEventHandler(fn))
+
+#define EVT_SEARCHCTRL_SEARCH(id, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_SEARCHCTRL_SEARCH, id, wxCommandEventHandler(fn))
+
+#endif // wxUSE_SEARCHCTRL
+
+#endif // _WX_SEARCHCTRL_H_BASE_
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/univ/setup0.h wxWidgets/include/wx/univ/setup0.h
--- ..\..\wxWidgets/include/wx/univ/setup0.h	2006-12-07 15:08:50.749875000 -0800
+++ wxWidgets/include/wx/univ/setup0.h	2006-12-07 15:52:19.390500000 -0800
@@ -662,6 +662,7 @@
 #define wxUSE_RADIOBOX         1    // wxRadioBox
 #define wxUSE_RADIOBTN         1    // wxRadioButton
 #define wxUSE_SCROLLBAR        1    // wxScrollBar
+#define wxUSE_SEARCHCTRL       1    // wxSearchCtrl
 #define wxUSE_SLIDER           1    // wxSlider
 #define wxUSE_SPINBTN          1    // wxSpinButton
 #define wxUSE_SPINCTRL         1    // wxSpinCtrl
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/include/wx/wx.h wxWidgets/include/wx/wx.h
--- ..\..\wxWidgets/include/wx/wx.h	2006-12-07 15:08:51.874875000 -0800
+++ wxWidgets/include/wx/wx.h	2006-12-03 13:51:39.625000000 -0800
@@ -80,6 +80,7 @@
 #include "wx/radiobut.h"
 #include "wx/textctrl.h"
 #include "wx/slider.h"
+#include "wx/srchctrl.h"
 #include "wx/gauge.h"
 #include "wx/scrolwin.h"
 #include "wx/dirdlg.h"
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/samples.bkl wxWidgets/samples/samples.bkl
--- ..\..\wxWidgets/samples/samples.bkl	2006-12-07 15:10:01.921750000 -0800
+++ wxWidgets/samples/samples.bkl	2006-12-04 16:26:07.750000000 -0800
@@ -73,6 +73,7 @@
     <subproject id="rotate" template="sub"/>
     <subproject id="sashtest" template="sub"/>
     <subproject id="scroll" template="sub"/>
+    <subproject id="srchctrl" template="sub"/>
     <subproject id="scrollsub" template="sub"/>
     <subproject id="shaped" template="sub"/>
     <subproject id="sockets" template="sub"/>
Files ..\..\wxWidgets/samples/srchctrl/bitmaps/toolbrai.ico and wxWidgets/samples/srchctrl/bitmaps/toolbrai.ico differ
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/bitmaps/toolbrai.xpm wxWidgets/samples/srchctrl/bitmaps/toolbrai.xpm
--- ..\..\wxWidgets/samples/srchctrl/bitmaps/toolbrai.xpm	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/bitmaps/toolbrai.xpm	2006-12-02 18:18:33.562500000 -0800
@@ -0,0 +1,42 @@
+/* XPM */
+static char * toolbrai_xpm[] = {
+/* width height ncolors chars_per_pixel */
+"32 32 4 1",
+/* colors */
+" 	s None	c None",
+".	c #000080",
+"+	c #ff0000",
+"@	c #00ffff",
+/* pixels */
+"                                ",
+"                                ",
+"                       .....    ",
+"     .....            .+++++.   ",
+"    .+++++.           .+++++.   ",
+"   .+++++++.          .+++++.   ",
+"    .+++++.            .....    ",
+"     .....            @         ",
+"        @            @          ",
+"         @          @           ",
+"          @        @            ",
+"           @  .....             ",
+"            ..+++++..           ",
+"           .+++++++++.          ",
+"           .+++++++++.          ",
+"           .+++++++++.          ",
+"           @..+++++..           ",
+"          @   .....@            ",
+"         @       @  @           ",
+"        @        @   @  ......  ",
+"       @         @    @.++++++. ",
+"      @          @     .++++++. ",
+"     @           @     .++++++. ",
+"  ......         @     .++++++. ",
+" .++++++.        @      ......  ",
+" .++++++.       ....            ",
+" .++++++.      .++++.           ",
+" .++++++.      .++++.           ",
+"  ......       .++++.           ",
+"               .++++.           ",
+"                ....            ",
+"                                "};
Files ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchar.ico and wxWidgets/samples/srchctrl/bitmaps/toolchar.ico differ
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchar.xpm wxWidgets/samples/srchctrl/bitmaps/toolchar.xpm
--- ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchar.xpm	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/bitmaps/toolchar.xpm	2006-12-02 18:18:33.562500000 -0800
@@ -0,0 +1,42 @@
+/* XPM */
+static char *toolchar_xpm[] = {
+/* columns rows colors chars-per-pixel */
+"32 32 4 1",
+". c Black",
+"X c #FFFF00",
+"  c None",
+"o c #C00000",
+/* pixels */
+"                                ",
+"             .....              ",
+"          ...XXXXX...           ",
+"        ..XXXXXXXXXXX..         ",
+"       .XXXXXXXXXXXXXXX.        ",
+"     ..XXXXXXXXXXXXXXXXX..      ",
+"     .XXXXXXXXXXXXXXXXXXXX.     ",
+"    .XXXXXX.XXXXXXX.XXXXXX.     ",
+"   .XXXXXX.X.XXXXX.X.XXXXXX.    ",
+"   .XXXXX.XXX.XXX.XXX.XXXXXX.   ",
+"  .XXXXX.XXXXXXXXXXXXX.XXXXX.   ",
+"  .XXXXXXXX.XXXXXXX.XXXXXXXX.   ",
+"  .XXXXXXXX.XXXXXXX.XXXXXXXX.   ",
+" .XXXXXXXXXXXXXXXXXXXXXXXXXXX.  ",
+" .XXXXXXXXXXXXXXXXXXXXXXXXXXX.  ",
+" .XXXXXXXXXXXXXXXXXXXXXXXXXXX.  ",
+" .XXXXXXXXXXXXXXXXXXXXXXXXXXX.  ",
+" .XXXXXXX.XXXXXXXXXXX.XXXXXXX.  ",
+"  .XXXXXX...XXXXXXX...XXXXXX.   ",
+"  .XXXXXX.oo..XXX..oo.XXXXXX.   ",
+"  .XXXXXXX.ooo...ooo.XXXXXXX.   ",
+"   .XXXXXXX.ooooooo.XXXXXXXX.   ",
+"   .XXXXXXXX..ooo..XXXXXXXX.    ",
+"    .XXXXXXXXX...XXXXXXXXX.     ",
+"     .XXXXXXXXXXXXXXXXXXXX.     ",
+"     ..XXXXXXXXXXXXXXXXX..      ",
+"       .XXXXXXXXXXXXXXX.        ",
+"        ..XXXXXXXXXXX..         ",
+"          ...XXXXX...           ",
+"             .....              ",
+"                                ",
+"                                "
+};
Files ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchec.ico and wxWidgets/samples/srchctrl/bitmaps/toolchec.ico differ
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchec.xpm wxWidgets/samples/srchctrl/bitmaps/toolchec.xpm
--- ..\..\wxWidgets/samples/srchctrl/bitmaps/toolchec.xpm	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/bitmaps/toolchec.xpm	2006-12-02 18:18:33.562500000 -0800
@@ -0,0 +1,54 @@
+/* XPM */
+static char *toolchec_xpm[] = {
+/* columns rows colors chars-per-pixel */
+"32 32 16 1",
+"X c Black",
+". c #4B4B4B",
+"% c #696969",
+": c #353535",
+"o c #181818",
+"O c #CCCCCC",
+"@ c #0B0B0B",
+"  c None",
+"+ c #292929",
+"= c #383838",
+"; c #747474",
+"# c #8B8B8B",
+"& c #A9A9A9",
+"- c #575757",
+"* c #B2B2B2",
+"$ c #959595",
+/* pixels */
+"                                ",
+"                                ",
+"                            .XX ",
+"                           oXXO ",
+"                         .XX+   ",
+"                        oXX@#   ",
+"                       oXX@     ",
+"                      oXX#      ",
+"                     @XX$       ",
+"                    oXX$        ",
+"                   oXX.         ",
+"                  +XXX          ",
+"                 %XXX           ",
+"                &XXX*           ",
+"               .XXX=            ",
+"               XXXo             ",
+"     .        @XXX              ",
+"   -XXo      +XXX.              ",
+"  XXXXX;    $XXXX               ",
+" .+XXXXX    XXXX.               ",
+"   +XXXX=  XXXX=                ",
+"    @XXXX *XXXX                 ",
+"     XXXX$XXXX$                 ",
+"     +XXXXXXXX                  ",
+"      XXXXXXX.                  ",
+"      oXXXXX:                   ",
+"      ;XXXXX.                   ",
+"       XXXX#                    ",
+"       @XX                      ",
+"        =                       ",
+"                                ",
+"                                "
+};
Files ..\..\wxWidgets/samples/srchctrl/mondrian.ico and wxWidgets/samples/srchctrl/mondrian.ico differ
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/mondrian.xpm wxWidgets/samples/srchctrl/mondrian.xpm
--- ..\..\wxWidgets/samples/srchctrl/mondrian.xpm	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/mondrian.xpm	2006-12-02 18:18:33.796875000 -0800
@@ -0,0 +1,44 @@
+/* XPM */
+static char *mondrian_xpm[] = {
+/* columns rows colors chars-per-pixel */
+"32 32 6 1",
+"  c Black",
+". c Blue",
+"X c #00bf00",
+"o c Red",
+"O c Yellow",
+"+ c Gray100",
+/* pixels */
+"                                ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+" oooooo +++++++++++++++++++++++ ",
+"                                ",
+" ++++++ ++++++++++++++++++ .... ",
+" ++++++ ++++++++++++++++++ .... ",
+" ++++++ ++++++++++++++++++ .... ",
+" ++++++ ++++++++++++++++++ .... ",
+" ++++++ ++++++++++++++++++ .... ",
+" ++++++ ++++++++++++++++++      ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++ ++++++++++++++++++ ++++ ",
+" ++++++                    ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+" ++++++ OOOOOOOOOOOO XXXXX ++++ ",
+"                                "
+};
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/srchctrl.bkl wxWidgets/samples/srchctrl/srchctrl.bkl
--- ..\..\wxWidgets/samples/srchctrl/srchctrl.bkl	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/srchctrl.bkl	2006-12-04 18:37:38.109250000 -0800
@@ -0,0 +1,13 @@
+<?xml version="1.0" ?>
+<makefile>
+
+    <include file="../../build/bakefiles/common_samples.bkl"/>
+
+    <exe id="srchtest" template="wx_sample" template_append="wx_append">
+        <sources>srchtest.cpp</sources>
+        <wx-lib>core</wx-lib>
+        <wx-lib>base</wx-lib>
+        <win32-res>srchtest.rc</win32-res>
+    </exe>
+
+</makefile>
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/srchtest.cpp wxWidgets/samples/srchctrl/srchtest.cpp
--- ..\..\wxWidgets/samples/srchctrl/srchtest.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/srchtest.cpp	2006-12-07 12:46:01.843625000 -0800
@@ -0,0 +1,1464 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        srchtest.cpp
+// Purpose:     wxSearchCtrl wxWidgets sample
+// Author:      Vince Harron, Robert Roebling
+// Modified by:
+// RCS-ID:      $Id: srchctrl.cpp,v 1.91 2006/10/08 20:38:14 VZ Exp $
+// Copyright:   (c) Vince Harron, Robert Roebling, Julian Smart, Vadim Zeitlin
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#if wxUSE_CLIPBOARD
+    #include "wx/dataobj.h"
+    #include "wx/clipbrd.h"
+#endif
+
+#if wxUSE_FILE
+    #include "wx/file.h"
+#endif
+
+#if wxUSE_TOOLTIPS
+    #include "wx/tooltip.h"
+#endif
+
+// We test for wxUSE_DRAG_AND_DROP also, because data objects may not be
+// implemented for compilers that can't cope with the OLE parts in
+// wxUSE_DRAG_AND_DROP.
+#if !wxUSE_DRAG_AND_DROP
+    #undef wxUSE_CLIPBOARD
+    #define wxUSE_CLIPBOARD 0
+#endif
+
+#include "wx/colordlg.h"
+#include "wx/fontdlg.h"
+#include "wx/numdlg.h"
+#include "wx/tokenzr.h"
+
+//----------------------------------------------------------------------
+// class definitions
+//----------------------------------------------------------------------
+
+class MyApp: public wxApp
+{
+public:
+    bool OnInit();
+};
+
+// a text ctrl which allows to call different wxTextCtrl functions
+// interactively by pressing function keys in it
+class MySearchCtrl : public wxSearchCtrl
+{
+public:
+    MySearchCtrl(wxWindow *parent, wxWindowID id, const wxString &value,
+               const wxPoint &pos, const wxSize &size, int style = 0)
+        : wxSearchCtrl(parent, id, value, pos, size, style)
+    {
+        m_hasCapture = false;
+    }
+
+    void OnKeyDown(wxKeyEvent& event);
+    void OnKeyUp(wxKeyEvent& event);
+    void OnChar(wxKeyEvent& event);
+
+    void OnText(wxCommandEvent& event);
+    void OnTextEnter(wxCommandEvent& event);
+    void OnTextURL(wxTextUrlEvent& event);
+    void OnTextMaxLen(wxCommandEvent& event);
+
+    void OnTextCut(wxClipboardTextEvent & event);
+    void OnTextCopy(wxClipboardTextEvent & event);
+    void OnTextPaste(wxClipboardTextEvent & event);
+
+    void OnMouseEvent(wxMouseEvent& event);
+
+    void OnSetFocus(wxFocusEvent& event);
+    void OnKillFocus(wxFocusEvent& event);
+
+    void OnSearchButton(wxCommandEvent& event);
+    void OnCancelButton(wxCommandEvent& event);
+    void OnSearchMenu(wxCommandEvent& event);
+
+    static bool ms_logKey;
+    static bool ms_logChar;
+    static bool ms_logMouse;
+    static bool ms_logText;
+    static bool ms_logFocus;
+    static bool ms_logClip;
+
+private:
+    static inline wxChar GetChar(bool on, wxChar c) { return on ? c : _T('-'); }
+
+    void LogKeyEvent(const wxChar *name, wxKeyEvent& event) const;
+    void LogClipEvent(const wxChar *what, wxClipboardTextEvent& event);
+
+    bool m_hasCapture;
+
+    DECLARE_EVENT_TABLE()
+};
+
+class MyPanel: public wxPanel
+{
+public:
+    MyPanel(wxFrame *frame, int x, int y, int w, int h);
+    virtual ~MyPanel()
+    {
+#if wxUSE_LOG
+        delete wxLog::SetActiveTarget(m_logOld);
+#endif // wxUSE_LOG
+    }
+
+#if wxUSE_CLIPBOARD
+    void DoPasteFromClipboard();
+    void DoCopyToClipboard();
+#endif // wxUSE_CLIPBOARD
+
+    void DoRemoveText();
+    void DoReplaceText();
+    void DoSelectText();
+    void DoMoveToEndOfText();
+    void DoMoveToEndOfEntry();
+
+    // return true if currently text control has any selection
+    bool HasSelection() const
+    {
+        long from, to;
+        GetFocusedText()->GetSelection(&from, &to);
+        return from != to;
+    }
+
+    MySearchCtrl    *m_searchBasic;
+    MySearchCtrl    *m_searchBitmaps;
+
+#if wxUSE_LOG
+    wxTextCtrl    *m_log;
+    wxLog         *m_logOld;
+#endif // wxUSE_LOG
+
+    // get the currently focused search control or return the default one
+    // (m_searchBasic) is no search ctrl has focus -- in any case, returns
+    // something non NULL
+    wxSearchCtrl *GetFocusedText() const;
+};
+
+class MyFrame: public wxFrame
+{
+public:
+    MyFrame(wxFrame *frame, const wxChar *title, int x, int y, int w, int h);
+
+    void OnQuit(wxCommandEvent& event);
+    void OnAbout(wxCommandEvent& event);
+#if wxUSE_TOOLTIPS
+    void OnSetTooltipDelay(wxCommandEvent& event);
+    void OnToggleTooltips(wxCommandEvent& event);
+#endif // wxUSE_TOOLTIPS
+
+    void OnUndo( wxCommandEvent& WXUNUSED(event) )
+    {
+        wxLogMessage(_T("Undo"));
+        m_panel->GetFocusedText()->Undo();
+    }
+    void OnUpdateUndo( wxUpdateUIEvent& event )
+    {
+        event.Enable( m_panel->GetFocusedText()->CanUndo() );
+    }
+
+#if wxUSE_CLIPBOARD
+    void OnPasteFromClipboard( wxCommandEvent& WXUNUSED(event) )
+    {
+        wxLogMessage(_T("Pasting text from clipboard."));
+        m_panel->DoPasteFromClipboard();
+    }
+    void OnCopyToClipboard( wxCommandEvent& WXUNUSED(event) )
+    {
+        wxLogMessage(_T("Copying text to clipboard."));
+        m_panel->DoCopyToClipboard();
+    }
+
+    void OnUpdatePasteFromClipboard(wxUpdateUIEvent& event)
+    {
+        wxClipboardLocker lockClip;
+
+        event.Enable( wxTheClipboard->IsSupported(wxDF_TEXT) );
+    }
+
+    void OnUpdateCopyToClipboard(wxUpdateUIEvent& event)
+    {
+        event.Enable( m_panel->HasSelection() );
+    }
+#endif // wxUSE_CLIPBOARD
+
+    void OnAddTextFreeze( wxCommandEvent& WXUNUSED(event) )
+        { DoAddText(true); }
+    void OnAddText( wxCommandEvent& WXUNUSED(event) )
+        { DoAddText(false); }
+    void OnRemoveText( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoRemoveText(); }
+    void OnReplaceText( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoReplaceText(); }
+    void OnSelectText( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoSelectText(); }
+
+    void OnMoveToEndOfText( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoMoveToEndOfText(); }
+    void OnMoveToEndOfEntry( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoMoveToEndOfEntry(); }
+
+#if wxUSE_LOG
+    void OnLogClear(wxCommandEvent& event);
+#endif // wxUSE_LOG
+    void OnFileSave(wxCommandEvent& event);
+    void OnFileLoad(wxCommandEvent& event);
+
+    void OnSetEditable(wxCommandEvent& event);
+    void OnSetEnabled(wxCommandEvent& event);
+
+    void OnToggleSearchButton(wxCommandEvent& event);
+    void OnToggleCancelButton(wxCommandEvent& event);
+    void OnToggleSearchMenu(wxCommandEvent& event);
+
+    void OnLogKey(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logKey = event.IsChecked();
+    }
+
+    void OnLogChar(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logChar = event.IsChecked();
+    }
+
+    void OnLogMouse(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logMouse = event.IsChecked();
+    }
+
+    void OnLogText(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logText = event.IsChecked();
+    }
+
+    void OnLogFocus(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logFocus = event.IsChecked();
+    }
+
+    void OnLogClip(wxCommandEvent& event)
+    {
+        MySearchCtrl::ms_logClip = event.IsChecked();
+    }
+
+    void OnSetText(wxCommandEvent& WXUNUSED(event))
+    {
+        m_panel->GetFocusedText()->SetValue(_T("Hello, world! (what else did you expect?)"));
+    }
+
+    void OnChangeText(wxCommandEvent& WXUNUSED(event))
+    {
+        m_panel->GetFocusedText()->ChangeValue(_T("Changed, not set: no event"));
+    }
+
+    void OnIdle( wxIdleEvent& event );
+
+private:
+    void DoAddText(bool freeze)
+    {
+        wxSearchCtrl * const text = m_panel->GetFocusedText();
+        text->Clear();
+
+        if ( freeze )
+            text->Freeze();
+
+        for ( int i = 0; i < 100; i++ )
+        {
+            text->AppendText(wxString::Format(wxT("Line %i\n"), i));
+        }
+
+        if ( freeze )
+            text->Thaw();
+
+        text->SetInsertionPoint(0);
+    }
+
+    MyPanel *m_panel;
+
+    DECLARE_EVENT_TABLE()
+};
+
+//----------------------------------------------------------------------
+// main()
+//----------------------------------------------------------------------
+
+IMPLEMENT_APP(MyApp)
+
+//----------------------------------------------------------------------
+// MyApp
+//----------------------------------------------------------------------
+
+enum
+{
+    TEXT_QUIT = wxID_EXIT,
+    TEXT_ABOUT = wxID_ABOUT,
+    TEXT_LOAD = 101,
+    TEXT_SAVE,
+    TEXT_CLEAR,
+
+    // edit menu
+    TEXT_UNDO = 200,
+    TEXT_CLIPBOARD_COPY,
+    TEXT_CLIPBOARD_PASTE,
+    TEXT_CLIPBOARD_VETO,
+
+    // tooltip menu
+    TEXT_TOOLTIPS_SETDELAY = 300,
+    TEXT_TOOLTIPS_ENABLE,
+
+    // text menu
+    TEXT_ADD_SOME = 400,
+    TEXT_ADD_FREEZE,
+    TEXT_MOVE_ENDTEXT,
+    TEXT_MOVE_ENDENTRY,
+    TEXT_SET_EDITABLE,
+    TEXT_SET_ENABLED,
+
+    TEXT_TOGGLE_SEARCH_BUTTON,
+    TEXT_TOGGLE_CANCEL_BUTTON,
+    TEXT_TOGGLE_SEARCH_MENU,
+
+    TEXT_REMOVE,
+    TEXT_REPLACE,
+    TEXT_SELECT,
+    TEXT_SET,
+    TEXT_CHANGE,
+
+    // log menu
+    TEXT_LOG_KEY,
+    TEXT_LOG_CHAR,
+    TEXT_LOG_MOUSE,
+    TEXT_LOG_TEXT,
+    TEXT_LOG_FOCUS,
+    TEXT_LOG_CLIP,
+
+    TEXT_END
+};
+
+bool MyApp::OnInit()
+{
+    // Create the main frame window
+    MyFrame *frame = new MyFrame((wxFrame *) NULL,
+            _T("Text wxWidgets sample"), 50, 50, 700, 550);
+    frame->SetSizeHints( 500, 400 );
+
+    wxMenu *file_menu = new wxMenu;
+    file_menu->Append(TEXT_SAVE, _T("&Save file\tCtrl-S"),
+                      _T("Save the text control contents to file"));
+    file_menu->Append(TEXT_LOAD, _T("&Load file\tCtrl-O"),
+                      _T("Load the sample file into text control"));
+    file_menu->AppendSeparator();
+    file_menu->Append(TEXT_ABOUT, _T("&About\tAlt-A"));
+    file_menu->AppendSeparator();
+    file_menu->Append(TEXT_QUIT, _T("E&xit\tAlt-X"), _T("Quit this sample"));
+
+    wxMenuBar *menu_bar = new wxMenuBar( wxMB_DOCKABLE );
+    menu_bar->Append(file_menu, _T("&File"));
+
+#if wxUSE_TOOLTIPS
+    wxMenu *tooltip_menu = new wxMenu;
+    tooltip_menu->Append(TEXT_TOOLTIPS_SETDELAY, _T("Set &delay\tCtrl-D"));
+    tooltip_menu->AppendSeparator();
+    tooltip_menu->Append(TEXT_TOOLTIPS_ENABLE, _T("&Toggle tooltips\tCtrl-T"),
+            _T("enable/disable tooltips"), true);
+    tooltip_menu->Check(TEXT_TOOLTIPS_ENABLE, true);
+    menu_bar->Append(tooltip_menu, _T("&Tooltips"));
+#endif // wxUSE_TOOLTIPS
+
+    // notice that we use non default accelerators on purpose here to compare
+    // their behaviour with the built in handling of standard Ctrl/Cmd-C/V
+    wxMenu *edit_menu = new wxMenu;
+    edit_menu->Append(TEXT_UNDO, _T("&Undo\tCtrl-Shift-Z"),
+                          _T("Undo the last action"));
+#if wxUSE_CLIPBOARD
+    edit_menu->AppendSeparator();
+    edit_menu->Append(TEXT_CLIPBOARD_COPY, _T("&Copy\tCtrl-Shift-C"),
+                          _T("Copy the selection to the clipboard"));
+    edit_menu->Append(TEXT_CLIPBOARD_PASTE, _T("&Paste\tCtrl-Shift-V"),
+                          _T("Paste from clipboard to the text control"));
+    edit_menu->AppendSeparator();
+    edit_menu->AppendCheckItem(TEXT_CLIPBOARD_VETO, _T("Vet&o\tCtrl-Shift-O"),
+                                   _T("Veto all clipboard operations"));
+#endif // wxUSE_CLIPBOARD
+    menu_bar->Append(edit_menu, _T("&Edit"));
+
+    wxMenu *menuText = new wxMenu;
+    menuText->Append(TEXT_ADD_SOME, _T("&Append some text\tCtrl-A"));
+    menuText->Append(TEXT_ADD_FREEZE, _T("&Append text with freeze/thaw\tShift-Ctrl-A"));
+    menuText->Append(TEXT_REMOVE, _T("&Remove first 10 characters\tCtrl-Y"));
+    menuText->Append(TEXT_REPLACE, _T("&Replace characters 4 to 8 with ABC\tCtrl-R"));
+    menuText->Append(TEXT_SELECT, _T("&Select characters 4 to 8\tCtrl-I"));
+    menuText->Append(TEXT_SET, _T("&Set the first text zone value\tCtrl-E"));
+    menuText->Append(TEXT_CHANGE, _T("&Change the first text zone value\tShift-Ctrl-E"));
+    menuText->AppendSeparator();
+    menuText->Append(TEXT_MOVE_ENDTEXT, _T("Move cursor to the end of &text"));
+    menuText->Append(TEXT_MOVE_ENDENTRY, _T("Move cursor to the end of &entry"));
+    menuText->AppendCheckItem(TEXT_SET_EDITABLE, _T("Toggle &editable state"));
+    menuText->AppendCheckItem(TEXT_SET_ENABLED, _T("Toggle e&nabled state"));
+    menuText->Check(TEXT_SET_EDITABLE, true);
+    menuText->Check(TEXT_SET_ENABLED, true);
+    menuText->AppendSeparator();
+
+    menuText->AppendCheckItem(TEXT_TOGGLE_SEARCH_BUTTON, _T("Toggle search button"));
+    menuText->AppendCheckItem(TEXT_TOGGLE_CANCEL_BUTTON, _T("Toggle cancel button"));
+    menuText->AppendCheckItem(TEXT_TOGGLE_SEARCH_MENU, _T("Toggle search menu"));
+    menuText->Check(TEXT_TOGGLE_SEARCH_BUTTON, true);
+    menuText->AppendSeparator();
+
+    menu_bar->Append(menuText, _T("Te&xt"));
+
+#if wxUSE_LOG
+    wxMenu *menuLog = new wxMenu;
+    menuLog->AppendCheckItem(TEXT_LOG_KEY, _T("Log &key events"));
+    menuLog->AppendCheckItem(TEXT_LOG_CHAR, _T("Log &char events"));
+    menuLog->AppendCheckItem(TEXT_LOG_MOUSE, _T("Log &mouse events"));
+    menuLog->AppendCheckItem(TEXT_LOG_TEXT, _T("Log &text events"));
+    menuLog->AppendCheckItem(TEXT_LOG_FOCUS, _T("Log &focus events"));
+    menuLog->AppendCheckItem(TEXT_LOG_CLIP, _T("Log clip&board events"));
+    menuLog->AppendSeparator();
+    menuLog->Append(TEXT_CLEAR, _T("&Clear the log\tCtrl-L"),
+                    _T("Clear the log window contents"));
+
+    // select only the interesting events by default
+    MySearchCtrl::ms_logClip =
+    MySearchCtrl::ms_logText = true;
+
+    menuLog->Check(TEXT_LOG_KEY, MySearchCtrl::ms_logKey);
+    menuLog->Check(TEXT_LOG_CHAR, MySearchCtrl::ms_logChar);
+    menuLog->Check(TEXT_LOG_TEXT, MySearchCtrl::ms_logText);
+
+    menu_bar->Append(menuLog, _T("&Log"));
+#endif // wxUSE_LOG
+
+    frame->SetMenuBar(menu_bar);
+
+    frame->Show(true);
+#ifdef __WXWINCE__
+    frame->Maximize();
+#endif
+
+    SetTopWindow(frame);
+
+    // report success
+    return true;
+}
+
+//----------------------------------------------------------------------
+// MySearchCtrl
+//----------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(MySearchCtrl, wxSearchCtrl)
+    EVT_KEY_DOWN(MySearchCtrl::OnKeyDown)
+    EVT_KEY_UP(MySearchCtrl::OnKeyUp)
+    EVT_CHAR(MySearchCtrl::OnChar)
+
+    EVT_TEXT(wxID_ANY, MySearchCtrl::OnText)
+    EVT_TEXT_ENTER(wxID_ANY, MySearchCtrl::OnTextEnter)
+    EVT_TEXT_URL(wxID_ANY, MySearchCtrl::OnTextURL)
+    EVT_TEXT_MAXLEN(wxID_ANY, MySearchCtrl::OnTextMaxLen)
+    EVT_TEXT_CUT(wxID_ANY,   MySearchCtrl::OnTextCut)
+    EVT_TEXT_COPY(wxID_ANY,  MySearchCtrl::OnTextCopy)
+    EVT_TEXT_PASTE(wxID_ANY, MySearchCtrl::OnTextPaste)
+
+    EVT_MOUSE_EVENTS(MySearchCtrl::OnMouseEvent)
+
+    EVT_SET_FOCUS(MySearchCtrl::OnSetFocus)
+    EVT_KILL_FOCUS(MySearchCtrl::OnKillFocus)
+
+    EVT_SEARCHCTRL_SEARCH( wxID_ANY, MySearchCtrl::OnSearchButton )
+    EVT_SEARCHCTRL_CANCEL( wxID_ANY, MySearchCtrl::OnCancelButton )
+END_EVENT_TABLE()
+
+bool MySearchCtrl::ms_logKey = false;
+bool MySearchCtrl::ms_logChar = false;
+bool MySearchCtrl::ms_logMouse = false;
+bool MySearchCtrl::ms_logText = false;
+bool MySearchCtrl::ms_logFocus = false;
+bool MySearchCtrl::ms_logClip = false;
+
+void MySearchCtrl::LogKeyEvent(const wxChar *name, wxKeyEvent& event) const
+{
+    wxString key;
+    long keycode = event.GetKeyCode();
+    {
+        switch ( keycode )
+        {
+            case WXK_BACK: key = _T("BACK"); break;
+            case WXK_TAB: key = _T("TAB"); break;
+            case WXK_RETURN: key = _T("RETURN"); break;
+            case WXK_ESCAPE: key = _T("ESCAPE"); break;
+            case WXK_SPACE: key = _T("SPACE"); break;
+            case WXK_DELETE: key = _T("DELETE"); break;
+            case WXK_START: key = _T("START"); break;
+            case WXK_LBUTTON: key = _T("LBUTTON"); break;
+            case WXK_RBUTTON: key = _T("RBUTTON"); break;
+            case WXK_CANCEL: key = _T("CANCEL"); break;
+            case WXK_MBUTTON: key = _T("MBUTTON"); break;
+            case WXK_CLEAR: key = _T("CLEAR"); break;
+            case WXK_SHIFT: key = _T("SHIFT"); break;
+            case WXK_ALT: key = _T("ALT"); break;
+            case WXK_CONTROL: key = _T("CONTROL"); break;
+            case WXK_MENU: key = _T("MENU"); break;
+            case WXK_PAUSE: key = _T("PAUSE"); break;
+            case WXK_CAPITAL: key = _T("CAPITAL"); break;
+            case WXK_END: key = _T("END"); break;
+            case WXK_HOME: key = _T("HOME"); break;
+            case WXK_LEFT: key = _T("LEFT"); break;
+            case WXK_UP: key = _T("UP"); break;
+            case WXK_RIGHT: key = _T("RIGHT"); break;
+            case WXK_DOWN: key = _T("DOWN"); break;
+            case WXK_SELECT: key = _T("SELECT"); break;
+            case WXK_PRINT: key = _T("PRINT"); break;
+            case WXK_EXECUTE: key = _T("EXECUTE"); break;
+            case WXK_SNAPSHOT: key = _T("SNAPSHOT"); break;
+            case WXK_INSERT: key = _T("INSERT"); break;
+            case WXK_HELP: key = _T("HELP"); break;
+            case WXK_NUMPAD0: key = _T("NUMPAD0"); break;
+            case WXK_NUMPAD1: key = _T("NUMPAD1"); break;
+            case WXK_NUMPAD2: key = _T("NUMPAD2"); break;
+            case WXK_NUMPAD3: key = _T("NUMPAD3"); break;
+            case WXK_NUMPAD4: key = _T("NUMPAD4"); break;
+            case WXK_NUMPAD5: key = _T("NUMPAD5"); break;
+            case WXK_NUMPAD6: key = _T("NUMPAD6"); break;
+            case WXK_NUMPAD7: key = _T("NUMPAD7"); break;
+            case WXK_NUMPAD8: key = _T("NUMPAD8"); break;
+            case WXK_NUMPAD9: key = _T("NUMPAD9"); break;
+            case WXK_MULTIPLY: key = _T("MULTIPLY"); break;
+            case WXK_ADD: key = _T("ADD"); break;
+            case WXK_SEPARATOR: key = _T("SEPARATOR"); break;
+            case WXK_SUBTRACT: key = _T("SUBTRACT"); break;
+            case WXK_DECIMAL: key = _T("DECIMAL"); break;
+            case WXK_DIVIDE: key = _T("DIVIDE"); break;
+            case WXK_F1: key = _T("F1"); break;
+            case WXK_F2: key = _T("F2"); break;
+            case WXK_F3: key = _T("F3"); break;
+            case WXK_F4: key = _T("F4"); break;
+            case WXK_F5: key = _T("F5"); break;
+            case WXK_F6: key = _T("F6"); break;
+            case WXK_F7: key = _T("F7"); break;
+            case WXK_F8: key = _T("F8"); break;
+            case WXK_F9: key = _T("F9"); break;
+            case WXK_F10: key = _T("F10"); break;
+            case WXK_F11: key = _T("F11"); break;
+            case WXK_F12: key = _T("F12"); break;
+            case WXK_F13: key = _T("F13"); break;
+            case WXK_F14: key = _T("F14"); break;
+            case WXK_F15: key = _T("F15"); break;
+            case WXK_F16: key = _T("F16"); break;
+            case WXK_F17: key = _T("F17"); break;
+            case WXK_F18: key = _T("F18"); break;
+            case WXK_F19: key = _T("F19"); break;
+            case WXK_F20: key = _T("F20"); break;
+            case WXK_F21: key = _T("F21"); break;
+            case WXK_F22: key = _T("F22"); break;
+            case WXK_F23: key = _T("F23"); break;
+            case WXK_F24: key = _T("F24"); break;
+            case WXK_NUMLOCK: key = _T("NUMLOCK"); break;
+            case WXK_SCROLL: key = _T("SCROLL"); break;
+            case WXK_PAGEUP: key = _T("PAGEUP"); break;
+            case WXK_PAGEDOWN: key = _T("PAGEDOWN"); break;
+            case WXK_NUMPAD_SPACE: key = _T("NUMPAD_SPACE"); break;
+            case WXK_NUMPAD_TAB: key = _T("NUMPAD_TAB"); break;
+            case WXK_NUMPAD_ENTER: key = _T("NUMPAD_ENTER"); break;
+            case WXK_NUMPAD_F1: key = _T("NUMPAD_F1"); break;
+            case WXK_NUMPAD_F2: key = _T("NUMPAD_F2"); break;
+            case WXK_NUMPAD_F3: key = _T("NUMPAD_F3"); break;
+            case WXK_NUMPAD_F4: key = _T("NUMPAD_F4"); break;
+            case WXK_NUMPAD_HOME: key = _T("NUMPAD_HOME"); break;
+            case WXK_NUMPAD_LEFT: key = _T("NUMPAD_LEFT"); break;
+            case WXK_NUMPAD_UP: key = _T("NUMPAD_UP"); break;
+            case WXK_NUMPAD_RIGHT: key = _T("NUMPAD_RIGHT"); break;
+            case WXK_NUMPAD_DOWN: key = _T("NUMPAD_DOWN"); break;
+            case WXK_NUMPAD_PAGEUP: key = _T("NUMPAD_PAGEUP"); break;
+            case WXK_NUMPAD_PAGEDOWN: key = _T("NUMPAD_PAGEDOWN"); break;
+            case WXK_NUMPAD_END: key = _T("NUMPAD_END"); break;
+            case WXK_NUMPAD_BEGIN: key = _T("NUMPAD_BEGIN"); break;
+            case WXK_NUMPAD_INSERT: key = _T("NUMPAD_INSERT"); break;
+            case WXK_NUMPAD_DELETE: key = _T("NUMPAD_DELETE"); break;
+            case WXK_NUMPAD_EQUAL: key = _T("NUMPAD_EQUAL"); break;
+            case WXK_NUMPAD_MULTIPLY: key = _T("NUMPAD_MULTIPLY"); break;
+            case WXK_NUMPAD_ADD: key = _T("NUMPAD_ADD"); break;
+            case WXK_NUMPAD_SEPARATOR: key = _T("NUMPAD_SEPARATOR"); break;
+            case WXK_NUMPAD_SUBTRACT: key = _T("NUMPAD_SUBTRACT"); break;
+            case WXK_NUMPAD_DECIMAL: key = _T("NUMPAD_DECIMAL"); break;
+
+            default:
+            {
+               if ( wxIsprint((int)keycode) )
+                   key.Printf(_T("'%c'"), (char)keycode);
+               else if ( keycode > 0 && keycode < 27 )
+                   key.Printf(_("Ctrl-%c"), _T('A') + keycode - 1);
+               else
+                   key.Printf(_T("unknown (%ld)"), keycode);
+            }
+        }
+    }
+
+#if wxUSE_UNICODE
+    key += wxString::Format(_T(" (Unicode: %#04x)"), event.GetUnicodeKey());
+#endif // wxUSE_UNICODE
+
+    wxLogMessage( _T("%s event: %s (flags = %c%c%c%c)"),
+                  name,
+                  key.c_str(),
+                  GetChar( event.ControlDown(), _T('C') ),
+                  GetChar( event.AltDown(), _T('A') ),
+                  GetChar( event.ShiftDown(), _T('S') ),
+                  GetChar( event.MetaDown(), _T('M') ) );
+}
+
+static wxString GetMouseEventDesc(const wxMouseEvent& ev)
+{
+    // click event
+    wxString button;
+    bool dbl, up;
+    if ( ev.LeftDown() || ev.LeftUp() || ev.LeftDClick() )
+    {
+        button = _T("Left");
+        dbl = ev.LeftDClick();
+        up = ev.LeftUp();
+    }
+    else if ( ev.MiddleDown() || ev.MiddleUp() || ev.MiddleDClick() )
+    {
+        button = _T("Middle");
+        dbl = ev.MiddleDClick();
+        up = ev.MiddleUp();
+    }
+    else if ( ev.RightDown() || ev.RightUp() || ev.RightDClick() )
+    {
+        button = _T("Right");
+        dbl = ev.RightDClick();
+        up = ev.RightUp();
+    }
+    else
+    {
+        return _T("Unknown mouse event");
+    }
+
+    return wxString::Format(_T("%s mouse button %s"),
+                            button.c_str(),
+                            dbl ? _T("double clicked")
+                                : up ? _T("released") : _T("clicked"));
+}
+
+void MySearchCtrl::OnMouseEvent(wxMouseEvent& ev)
+{
+    ev.Skip();
+
+    if ( !ms_logMouse )
+        return;
+
+    if ( !ev.Moving() )
+    {
+        wxString msg;
+        if ( ev.Entering() )
+        {
+            msg = _T("Mouse entered the window");
+        }
+        else if ( ev.Leaving() )
+        {
+            msg = _T("Mouse left the window");
+        }
+        else
+        {
+            msg = GetMouseEventDesc(ev);
+        }
+
+        msg << _T(" at (") << ev.GetX() << _T(", ") << ev.GetY() << _T(") ");
+
+        long pos;
+        wxTextCtrlHitTestResult rc = HitTest(ev.GetPosition(), &pos);
+        if ( rc != wxTE_HT_UNKNOWN )
+        {
+            msg << _T("at position ") << pos << _T(' ');
+        }
+
+        msg << _T("[Flags: ")
+            << GetChar( ev.LeftIsDown(), _T('1') )
+            << GetChar( ev.MiddleIsDown(), _T('2') )
+            << GetChar( ev.RightIsDown(), _T('3') )
+            << GetChar( ev.ControlDown(), _T('C') )
+            << GetChar( ev.AltDown(), _T('A') )
+            << GetChar( ev.ShiftDown(), _T('S') )
+            << GetChar( ev.MetaDown(), _T('M') )
+            << _T(']');
+
+        wxLogMessage(msg);
+    }
+    //else: we're not interested in mouse move events
+}
+
+void MySearchCtrl::OnSetFocus(wxFocusEvent& event)
+{
+    if ( ms_logFocus )
+        wxLogMessage( wxT("%p got focus."), this);
+
+    event.Skip();
+}
+
+void MySearchCtrl::OnKillFocus(wxFocusEvent& event)
+{
+    if ( ms_logFocus )
+        wxLogMessage( wxT("%p lost focus"), this);
+
+    event.Skip();
+}
+
+void MySearchCtrl::OnText(wxCommandEvent& event)
+{
+    if ( !ms_logText )
+        return;
+
+    MySearchCtrl *win = (MySearchCtrl *)event.GetEventObject();
+    const wxChar *changeVerb = win->IsModified() ? _T("changed")
+                                                 : _T("set by program");
+    const wxChar *data = (const wxChar *)(win->GetClientData());
+    if ( data )
+    {
+        wxLogMessage(_T("Text %s in control \"%s\""), changeVerb, data);
+    }
+    else
+    {
+        wxLogMessage(_T("Text %s in some control"), changeVerb);
+    }
+}
+
+void MySearchCtrl::OnTextEnter(wxCommandEvent& event)
+{
+    if ( !ms_logText )
+        return;
+
+    MySearchCtrl *win = (MySearchCtrl *)event.GetEventObject();
+    const wxChar *data = (const wxChar *)(win->GetClientData());
+    if ( data )
+    {
+        wxLogMessage(_T("Enter pressed in control '%s'"), data);
+    }
+    else
+    {
+        wxLogMessage(_T("Enter pressed in some control"));
+    }
+}
+
+void MySearchCtrl::OnSearchButton(wxCommandEvent& event)
+{
+    if ( !ms_logText )
+        return;
+
+    MySearchCtrl *win = (MySearchCtrl *)event.GetEventObject();
+    const wxChar *data = (const wxChar *)(win->GetClientData());
+    if ( data )
+    {
+        wxLogMessage(_T("Search pressed in control '%s'"), data);
+    }
+    else
+    {
+        wxLogMessage(_T("Search pressed in some control"));
+    }
+}
+
+void MySearchCtrl::OnCancelButton(wxCommandEvent& event)
+{
+    if ( !ms_logText )
+        return;
+
+    MySearchCtrl *win = (MySearchCtrl *)event.GetEventObject();
+    const wxChar *data = (const wxChar *)(win->GetClientData());
+    if ( data )
+    {
+        wxLogMessage(_T("Cancel pressed in control '%s'"), data);
+    }
+    else
+    {
+        wxLogMessage(_T("Cancel pressed in some control"));
+    }
+}
+
+const int ID_SEARCHMENU = 10000;
+
+void MySearchCtrl::OnSearchMenu(wxCommandEvent& event)
+{
+    if ( !ms_logText )
+        return;
+
+    int item = event.GetId() - ID_SEARCHMENU;
+    MySearchCtrl *win = (MySearchCtrl *)event.GetEventObject();
+    const wxChar *data = (const wxChar *)(win->GetClientData());
+    if ( data )
+    {
+        wxLogMessage(_T("Menu item %i selected in '%s'"), item, data);
+    }
+    else
+    {
+        wxLogMessage(_T("Menu item %i selected in some control"), item );
+    }
+}
+
+void MySearchCtrl::OnTextMaxLen(wxCommandEvent& WXUNUSED(event))
+{
+    wxLogMessage(_T("You can't enter more characters into this control."));
+}
+
+
+void MySearchCtrl::OnTextCut(wxClipboardTextEvent& event)
+{
+    LogClipEvent(_T("cut to"), event);
+}
+
+void MySearchCtrl::OnTextCopy(wxClipboardTextEvent& event)
+{
+    LogClipEvent(_T("copied to"), event);
+}
+
+void MySearchCtrl::OnTextPaste(wxClipboardTextEvent& event)
+{
+    LogClipEvent(_T("pasted from"), event);
+}
+
+void MySearchCtrl::LogClipEvent(const wxChar *what, wxClipboardTextEvent& event)
+{
+    wxFrame *frame = wxDynamicCast(wxGetTopLevelParent(this), wxFrame);
+    wxCHECK_RET( frame, _T("no parent frame?") );
+
+    const bool veto = frame->GetMenuBar()->IsChecked(TEXT_CLIPBOARD_VETO);
+    if ( !veto )
+        event.Skip();
+
+    if ( ms_logClip )
+    {
+        wxLogMessage(_T("Text %s%s the clipboard."),
+                     veto ? _T("not ") : _T(""), what);
+    }
+}
+
+
+void MySearchCtrl::OnTextURL(wxTextUrlEvent& event)
+{
+    const wxMouseEvent& ev = event.GetMouseEvent();
+
+    // filter out mouse moves, too many of them
+    if ( ev.Moving() )
+        return;
+
+    long start = event.GetURLStart(),
+         end = event.GetURLEnd();
+
+    wxLogMessage(_T("Mouse event over URL '%s': %s"),
+                 GetValue().Mid(start, end - start).c_str(),
+                 GetMouseEventDesc(ev).c_str());
+}
+
+void MySearchCtrl::OnChar(wxKeyEvent& event)
+{
+    if ( ms_logChar )
+        LogKeyEvent( _T("Char"), event);
+
+    event.Skip();
+}
+
+void MySearchCtrl::OnKeyUp(wxKeyEvent& event)
+{
+    if ( ms_logKey )
+        LogKeyEvent( _T("Key up"), event);
+
+    event.Skip();
+}
+
+void MySearchCtrl::OnKeyDown(wxKeyEvent& event)
+{
+    switch ( event.GetKeyCode() )
+    {
+        case WXK_F1:
+            // show current position and text length
+            {
+                long line, column, pos = GetInsertionPoint();
+                PositionToXY(pos, &column, &line);
+
+                wxLogMessage(_T("Current position: %ld\nCurrent line, column: (%ld, %ld)\nNumber of lines: %ld\nCurrent line length: %ld\nTotal text length: %u (%ld)"),
+                        pos,
+                        line, column,
+                        (long) GetNumberOfLines(),
+                        (long) GetLineLength(line),
+                        (unsigned int) GetValue().length(),
+                        GetLastPosition());
+
+                long from, to;
+                GetSelection(&from, &to);
+
+                wxString sel = GetStringSelection();
+
+                wxLogMessage(_T("Selection: from %ld to %ld."), from, to);
+                wxLogMessage(_T("Selection = '%s' (len = %u)"),
+                             sel.c_str(),
+                             (unsigned int) sel.length());
+            }
+            break;
+
+        case WXK_F2:
+            // go to the end
+            SetInsertionPointEnd();
+            break;
+
+        case WXK_F3:
+            // go to position 10
+            SetInsertionPoint(10);
+            break;
+
+        case WXK_F4:
+            if (!m_hasCapture)
+            {
+                wxLogDebug( wxT("Now capturing mouse and events.") );
+                m_hasCapture = true;
+                CaptureMouse();
+            }
+            else
+            {
+                wxLogDebug( wxT("Stopped capturing mouse and events.") );
+                m_hasCapture = false;
+                ReleaseMouse();
+            }
+            break;
+
+        case WXK_F5:
+            // insert a blank line
+            WriteText(_T("\n"));
+            break;
+
+        case WXK_F6:
+            wxLogMessage(_T("IsModified() before SetValue(): %d"),
+                         IsModified());
+            ChangeValue(_T("ChangeValue() has been called"));
+            wxLogMessage(_T("IsModified() after SetValue(): %d"),
+                         IsModified());
+            break;
+
+        case WXK_F7:
+            wxLogMessage(_T("Position 10 should be now visible."));
+            ShowPosition(10);
+            break;
+
+        case WXK_F8:
+            wxLogMessage(_T("Control has been cleared"));
+            Clear();
+            break;
+
+        case WXK_F9:
+            WriteText(_T("WriteText() has been called"));
+            break;
+
+        case WXK_F10:
+            AppendText(_T("AppendText() has been called"));
+            break;
+
+        case WXK_F11:
+            DiscardEdits();
+            wxLogMessage(_T("Control marked as non modified"));
+            break;
+    }
+
+    if ( ms_logKey )
+        LogKeyEvent( wxT("Key down"), event);
+
+    event.Skip();
+}
+
+//----------------------------------------------------------------------
+// MyPanel
+//----------------------------------------------------------------------
+
+#if defined(__WXWINCE__) || !defined(__WXMSW__)
+    #include "bitmaps/toolbrai.xpm"
+    #include "bitmaps/toolchar.xpm"
+    #include "bitmaps/toolchec.xpm"
+#endif
+
+wxMenu* CreateTestMenu( wxWindow* target )
+{
+    wxMenu* menu = new wxMenu;
+    const int SEARCH_MENU_SIZE = 5;
+    wxMenuItem* menuItem = menu->Append(wxID_ANY, _T("Recent Searches"), wxT(""), wxITEM_NORMAL);
+    menuItem->Enable(false);
+    for ( int i = 0; i < SEARCH_MENU_SIZE; i++ )
+    {
+        wxString itemText = wxString::Format(wxT("item %i"),i);
+        wxString tipText = wxString::Format(wxT("tip %i"),i);
+        menu->Append(ID_SEARCHMENU+i, itemText, tipText, wxITEM_NORMAL);
+    }
+    target->Connect( 
+        ID_SEARCHMENU,
+        ID_SEARCHMENU+SEARCH_MENU_SIZE,
+        wxEVT_COMMAND_MENU_SELECTED,
+        wxCommandEventHandler(MySearchCtrl::OnSearchMenu)
+        );
+    return menu;
+}
+
+MyPanel::MyPanel( wxFrame *frame, int x, int y, int w, int h )
+       : wxPanel( frame, wxID_ANY, wxPoint(x, y), wxSize(w, h) )
+{
+    // single line text controls
+    m_searchBasic = new MySearchCtrl( this, wxID_ANY, _T(""),
+                             wxDefaultPosition, wxDefaultSize,
+                             wxTE_PROCESS_ENTER);
+    m_searchBasic->SetClientData((void *)_T("m_searchBasic"));
+
+    m_searchBitmaps = new MySearchCtrl( this, wxID_ANY, _T(""),
+                             wxDefaultPosition, wxDefaultSize,
+                             wxTE_PROCESS_ENTER);
+    m_searchBitmaps->SetClientData((void *)_T("m_searchBitmaps"));
+
+#ifdef _WX_GENERIC_SEARCHCTRL_H_
+#if defined(__WXMSW__) && !defined(__WXWINCE__) 
+    // icon->bitmap conversion is not currently supported under WinCE
+    wxIcon searchIcon(_T("icon1"), wxBITMAP_TYPE_ICO_RESOURCE);
+    wxIcon searchMenuIcon(_T("icon2"), wxBITMAP_TYPE_ICO_RESOURCE);
+    wxIcon cancelIcon(_T("icon3"), wxBITMAP_TYPE_ICO_RESOURCE);
+    wxBitmap searchBitmap( searchIcon );
+    wxBitmap searchMenuBitmap( searchMenuIcon );
+    wxBitmap cancelBitmap( cancelIcon );
+#else
+    wxBitmap searchBitmap( toolbrai_xpm );
+    wxBitmap searchMenuBitmap( toolchar_xpm );
+    wxBitmap cancelBitmap( toolchec_xpm );
+#endif
+
+    m_searchBitmaps->SetSearchBitmap( searchBitmap );
+    m_searchBitmaps->SetSearchMenuBitmap( searchMenuBitmap );
+    m_searchBitmaps->SetCancelBitmap( cancelBitmap );
+#endif // _WX_GENERIC_SEARCHCTRL_H_
+
+#ifdef __WXWINCE__
+    const int SIZER_MARGIN = 1;
+#else
+    const int SIZER_MARGIN = 10;
+#endif
+	
+    // lay out the controls
+    wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
+    topSizer->Add( m_searchBasic, 0, wxALL, SIZER_MARGIN );
+    topSizer->Add( m_searchBitmaps, 0, wxALL, SIZER_MARGIN );
+
+#if wxUSE_LOG
+    m_log = new wxTextCtrl( this, wxID_ANY, _T("This is the log window.\n"),
+                            wxDefaultPosition, wxDefaultSize,
+                            wxTE_MULTILINE | wxTE_READONLY );
+
+    m_logOld = wxLog::SetActiveTarget( new wxLogTextCtrl( m_log ) );
+#endif // wxUSE_LOG
+
+#if wxUSE_LOG
+    topSizer->Add( m_log, 1, wxALL | wxEXPAND, SIZER_MARGIN );
+#endif
+
+    SetAutoLayout( true );
+    SetSizer(topSizer);
+}
+
+wxSearchCtrl *MyPanel::GetFocusedText() const
+{
+    wxWindow *win = FindFocus();
+
+    while (win)
+    {
+        wxSearchCtrl *text = win ? wxDynamicCast(win, wxSearchCtrl) : NULL;
+        if ( text )
+        {
+            return text;
+        }
+        // check to see if any of the parents of the focus are wxSearchCtrl objects
+        win = win->GetParent();
+    }
+    // just return m_searchBasic
+    return m_searchBasic;
+}
+
+#if wxUSE_CLIPBOARD
+void MyPanel::DoPasteFromClipboard()
+{
+    // On X11, we want to get the data from the primary selection instead
+    // of the normal clipboard (which isn't normal under X11 at all). This
+    // call has no effect under MSW.
+    wxTheClipboard->UsePrimarySelection();
+
+    if (!wxTheClipboard->Open())
+    {
+#if wxUSE_LOG
+        *m_log << _T("Error opening the clipboard.\n");
+#endif // wxUSE_LOG
+        return;
+    }
+    else
+    {
+#if wxUSE_LOG
+        *m_log << _T("Successfully opened the clipboard.\n");
+#endif // wxUSE_LOG
+    }
+
+    wxTextDataObject data;
+
+    if (wxTheClipboard->IsSupported( data.GetFormat() ))
+    {
+#if wxUSE_LOG
+        *m_log << _T("Clipboard supports requested format.\n");
+#endif // wxUSE_LOG
+
+        if (wxTheClipboard->GetData( data ))
+        {
+#if wxUSE_LOG
+            *m_log << _T("Successfully retrieved data from the clipboard.\n");
+#endif // wxUSE_LOG
+            GetFocusedText()->AppendText(data.GetText());
+        }
+        else
+        {
+#if wxUSE_LOG
+            *m_log << _T("Error getting data from the clipboard.\n");
+#endif // wxUSE_LOG
+        }
+    }
+    else
+    {
+#if wxUSE_LOG
+        *m_log << _T("Clipboard doesn't support requested format.\n");
+#endif // wxUSE_LOG
+    }
+
+    wxTheClipboard->Close();
+
+#if wxUSE_LOG
+    *m_log << _T("Closed the clipboard.\n");
+#endif // wxUSE_LOG
+}
+
+void MyPanel::DoCopyToClipboard()
+{
+    // On X11, we want to get the data from the primary selection instead
+    // of the normal clipboard (which isn't normal under X11 at all). This
+    // call has no effect under MSW.
+    wxTheClipboard->UsePrimarySelection();
+
+    wxString text( GetFocusedText()->GetStringSelection() );
+
+    if (text.IsEmpty())
+    {
+#if wxUSE_LOG
+        *m_log << _T("No text to copy.\n");
+#endif // wxUSE_LOG
+
+        return;
+    }
+
+    if (!wxTheClipboard->Open())
+    {
+#if wxUSE_LOG
+        *m_log << _T("Error opening the clipboard.\n");
+#endif // wxUSE_LOG
+
+        return;
+    }
+    else
+    {
+#if wxUSE_LOG
+        *m_log << _T("Successfully opened the clipboard.\n");
+#endif // wxUSE_LOG
+    }
+
+    wxTextDataObject *data = new wxTextDataObject( text );
+
+    if (!wxTheClipboard->SetData( data ))
+    {
+#if wxUSE_LOG
+        *m_log << _T("Error while copying to the clipboard.\n");
+#endif // wxUSE_LOG
+    }
+    else
+    {
+#if wxUSE_LOG
+        *m_log << _T("Successfully copied data to the clipboard.\n");
+#endif // wxUSE_LOG
+    }
+
+    wxTheClipboard->Close();
+
+#if wxUSE_LOG
+    *m_log << _T("Closed the clipboard.\n");
+#endif // wxUSE_LOG
+}
+
+#endif // wxUSE_CLIPBOARD
+
+void MyPanel::DoMoveToEndOfText()
+{
+    GetFocusedText()->SetInsertionPointEnd();
+}
+
+void MyPanel::DoMoveToEndOfEntry()
+{
+    GetFocusedText()->SetInsertionPointEnd();
+}
+
+void MyPanel::DoRemoveText()
+{
+    GetFocusedText()->Remove(0, 10);
+}
+
+void MyPanel::DoReplaceText()
+{
+    GetFocusedText()->Replace(3, 8, _T("ABC"));
+}
+
+void MyPanel::DoSelectText()
+{
+    GetFocusedText()->SetSelection(3, 8);
+}
+
+//----------------------------------------------------------------------
+// MyFrame
+//----------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    EVT_MENU(TEXT_QUIT,   MyFrame::OnQuit)
+    EVT_MENU(TEXT_ABOUT,  MyFrame::OnAbout)
+    EVT_MENU(TEXT_SAVE,   MyFrame::OnFileSave)
+    EVT_MENU(TEXT_LOAD,   MyFrame::OnFileLoad)
+
+    EVT_MENU(TEXT_LOG_KEY,  MyFrame::OnLogKey)
+    EVT_MENU(TEXT_LOG_CHAR, MyFrame::OnLogChar)
+    EVT_MENU(TEXT_LOG_MOUSE,MyFrame::OnLogMouse)
+    EVT_MENU(TEXT_LOG_TEXT, MyFrame::OnLogText)
+    EVT_MENU(TEXT_LOG_FOCUS,MyFrame::OnLogFocus)
+    EVT_MENU(TEXT_LOG_CLIP, MyFrame::OnLogClip)
+#if wxUSE_LOG
+    EVT_MENU(TEXT_CLEAR,    MyFrame::OnLogClear)
+#endif // wxUSE_LOG
+
+#if wxUSE_TOOLTIPS
+    EVT_MENU(TEXT_TOOLTIPS_SETDELAY,  MyFrame::OnSetTooltipDelay)
+    EVT_MENU(TEXT_TOOLTIPS_ENABLE,    MyFrame::OnToggleTooltips)
+#endif // wxUSE_TOOLTIPS
+
+    EVT_MENU(TEXT_UNDO,      MyFrame::OnUndo)
+    EVT_UPDATE_UI(TEXT_UNDO, MyFrame::OnUpdateUndo)
+
+#if wxUSE_CLIPBOARD
+    EVT_MENU(TEXT_CLIPBOARD_PASTE,    MyFrame::OnPasteFromClipboard)
+    EVT_MENU(TEXT_CLIPBOARD_COPY,     MyFrame::OnCopyToClipboard)
+
+    EVT_UPDATE_UI(TEXT_CLIPBOARD_PASTE, MyFrame::OnUpdatePasteFromClipboard)
+    EVT_UPDATE_UI(TEXT_CLIPBOARD_COPY,  MyFrame::OnUpdateCopyToClipboard)
+#endif // wxUSE_CLIPBOARD
+
+    EVT_MENU(TEXT_REMOVE,             MyFrame::OnRemoveText)
+    EVT_MENU(TEXT_REPLACE,            MyFrame::OnReplaceText)
+    EVT_MENU(TEXT_SELECT,             MyFrame::OnSelectText)
+    EVT_MENU(TEXT_ADD_SOME,           MyFrame::OnAddText)
+    EVT_MENU(TEXT_ADD_FREEZE,         MyFrame::OnAddTextFreeze)
+    EVT_MENU(TEXT_MOVE_ENDTEXT,       MyFrame::OnMoveToEndOfText)
+    EVT_MENU(TEXT_MOVE_ENDENTRY,      MyFrame::OnMoveToEndOfEntry)
+
+    EVT_MENU(TEXT_SET_EDITABLE,       MyFrame::OnSetEditable)
+    EVT_MENU(TEXT_SET_ENABLED,        MyFrame::OnSetEnabled)
+
+    EVT_MENU(TEXT_TOGGLE_SEARCH_BUTTON,       MyFrame::OnToggleSearchButton)
+    EVT_MENU(TEXT_TOGGLE_CANCEL_BUTTON,       MyFrame::OnToggleCancelButton)
+    EVT_MENU(TEXT_TOGGLE_SEARCH_MENU,         MyFrame::OnToggleSearchMenu)
+
+    EVT_MENU(TEXT_SET,                MyFrame::OnSetText)
+    EVT_MENU(TEXT_CHANGE,             MyFrame::OnChangeText)
+
+    EVT_IDLE(MyFrame::OnIdle)
+END_EVENT_TABLE()
+
+MyFrame::MyFrame(wxFrame *frame, const wxChar *title, int x, int y, int w, int h)
+       : wxFrame(frame, wxID_ANY, title, wxPoint(x, y), wxSize(w, h) )
+{
+#if wxUSE_STATUSBAR
+    CreateStatusBar(2);
+#endif // wxUSE_STATUSBAR
+
+    m_panel = new MyPanel( this, 10, 10, 300, 100 );
+}
+
+void MyFrame::OnQuit (wxCommandEvent& WXUNUSED(event) )
+{
+    Close(true);
+}
+
+void MyFrame::OnAbout( wxCommandEvent& WXUNUSED(event) )
+{
+    wxBeginBusyCursor();
+
+    wxMessageDialog dialog(this,
+      _T("This is a text control sample. It demonstrates the many different\n")
+      _T("text control styles, the use of the clipboard, setting and handling\n")
+      _T("tooltips and intercepting key and char events.\n")
+      _T("\n")
+        _T("Copyright (c) 1999, Robert Roebling, Julian Smart, Vadim Zeitlin"),
+        _T("About wxTextCtrl Sample"),
+        wxOK | wxICON_INFORMATION);
+
+    dialog.ShowModal();
+
+    wxEndBusyCursor();
+}
+
+#if wxUSE_TOOLTIPS
+
+void MyFrame::OnSetTooltipDelay(wxCommandEvent& WXUNUSED(event))
+{
+    static long s_delay = 5000;
+
+    wxString delay;
+    delay.Printf( _T("%ld"), s_delay);
+
+    delay = wxGetTextFromUser(_T("Enter delay (in milliseconds)"),
+                              _T("Set tooltip delay"),
+                              delay,
+                              this);
+    if ( !delay )
+        return; // cancelled
+
+    wxSscanf(delay, _T("%ld"), &s_delay);
+
+    wxToolTip::SetDelay(s_delay);
+
+    wxLogStatus(this, _T("Tooltip delay set to %ld milliseconds"), s_delay);
+}
+
+void MyFrame::OnToggleTooltips(wxCommandEvent& WXUNUSED(event))
+{
+    static bool s_enabled = true;
+
+    s_enabled = !s_enabled;
+
+    wxToolTip::Enable(s_enabled);
+
+    wxLogStatus(this, _T("Tooltips %sabled"), s_enabled ? _T("en") : _T("dis") );
+}
+#endif // tooltips
+
+#if wxUSE_LOG
+void MyFrame::OnLogClear(wxCommandEvent& WXUNUSED(event))
+{
+    m_panel->m_log->Clear();
+}
+#endif // wxUSE_LOG
+
+void MyFrame::OnSetEditable(wxCommandEvent& WXUNUSED(event))
+{
+    static bool s_editable = true;
+
+    s_editable = !s_editable;
+    m_panel->m_searchBasic->SetEditable(s_editable);
+    m_panel->m_searchBitmaps->SetEditable(s_editable);
+}
+
+void MyFrame::OnSetEnabled(wxCommandEvent& WXUNUSED(event))
+{
+    bool enabled = m_panel->m_searchBasic->IsEnabled();
+    enabled = !enabled;
+
+    m_panel->m_searchBasic->Enable(enabled);
+    m_panel->m_searchBitmaps->Enable(enabled);
+}
+
+void MyFrame::OnToggleSearchButton(wxCommandEvent& WXUNUSED(event))
+{
+    bool value = !m_panel->m_searchBasic->GetSearchButtonVisible();
+
+    m_panel->m_searchBasic->SetSearchButtonVisible( value );
+    m_panel->m_searchBitmaps->SetSearchButtonVisible( value );
+}
+
+void MyFrame::OnToggleCancelButton(wxCommandEvent& WXUNUSED(event))
+{
+    bool value = !m_panel->m_searchBasic->GetCancelButtonVisible();
+
+    m_panel->m_searchBasic->SetCancelButtonVisible( value );
+    m_panel->m_searchBitmaps->SetCancelButtonVisible( value );
+}
+
+void MyFrame::OnToggleSearchMenu(wxCommandEvent& WXUNUSED(event))
+{
+    if ( m_panel->m_searchBasic->GetMenu() )
+    {
+        m_panel->m_searchBasic->SetMenu( 0 );
+        m_panel->m_searchBitmaps->SetMenu( 0 );
+    }
+    else
+    {
+        m_panel->m_searchBasic->SetMenu( CreateTestMenu(m_panel) );
+        m_panel->m_searchBitmaps->SetMenu( CreateTestMenu(m_panel) );
+    }
+}
+
+void MyFrame::OnFileSave(wxCommandEvent& WXUNUSED(event))
+{
+    if ( m_panel->GetFocusedText()->SaveFile(_T("dummy.txt")) )
+    {
+#if wxUSE_FILE
+        // verify that the fil length is correct (it wasn't under Win95)
+        wxFile file(wxT("dummy.txt"));
+        wxLogStatus(this,
+                    _T("Successfully saved file (text len = %lu, file size = %ld)"),
+                    (unsigned long)m_panel->GetFocusedText()->GetValue().length(),
+                    (long) file.Length());
+#endif
+    }
+    else
+        wxLogStatus(this, _T("Couldn't save the file"));
+}
+
+void MyFrame::OnFileLoad(wxCommandEvent& WXUNUSED(event))
+{
+    if ( m_panel->GetFocusedText()->LoadFile(_T("dummy.txt")) )
+        wxLogStatus(this, _T("Successfully loaded file"));
+    else
+        wxLogStatus(this, _T("Couldn't load the file"));
+}
+
+void MyFrame::OnIdle( wxIdleEvent& event )
+{
+    // track the window which has the focus in the status bar
+    static wxWindow *s_windowFocus = (wxWindow *)NULL;
+    wxWindow *focus = wxWindow::FindFocus();
+    if ( focus && (focus != s_windowFocus) )
+    {
+        s_windowFocus = focus;
+
+        wxString msg;
+        msg.Printf(
+#ifdef __WXMSW__
+                _T("Focus: wxWindow = %p, HWND = %08x"),
+#else
+                _T("Focus: wxWindow = %p"),
+#endif
+                s_windowFocus
+#ifdef __WXMSW__
+                , (unsigned int) s_windowFocus->GetHWND()
+#endif
+                  );
+
+#if wxUSE_STATUSBAR
+        SetStatusText(msg);
+#endif // wxUSE_STATUSBAR
+    }
+    event.Skip();
+}
+
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/srchtest.h wxWidgets/samples/srchctrl/srchtest.h
--- ..\..\wxWidgets/samples/srchctrl/srchtest.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/srchtest.h	2006-12-02 18:18:33.765625000 -0800
@@ -0,0 +1,208 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        listctrl.h
+// Purpose:     wxListCtrl sample
+// Author:      Julian Smart
+// Modified by:
+// Created:     04/01/98
+// RCS-ID:      $Id: listtest.h,v 1.46 2006/05/28 18:10:10 VZ Exp $
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// not all ports have support for EVT_CONTEXT_MENU yet, don't define
+// USE_CONTEXT_MENU for those which don't
+#if defined(__WXMOTIF__) || defined(__WXPM__) || defined(__WXX11__) || defined(__WXMGL__)
+    #define USE_CONTEXT_MENU 0
+#else
+    #define USE_CONTEXT_MENU 1
+#endif
+
+// Define a new application type
+class MyApp: public wxApp
+{
+public:
+    MyApp() { }
+
+    virtual bool OnInit();
+
+private:
+    DECLARE_NO_COPY_CLASS(MyApp)
+};
+
+class MyListCtrl: public wxListCtrl
+{
+public:
+    MyListCtrl(wxWindow *parent,
+               const wxWindowID id,
+               const wxPoint& pos,
+               const wxSize& size,
+               long style)
+        : wxListCtrl(parent, id, pos, size, style),
+          m_attr(*wxBLUE, *wxLIGHT_GREY, wxNullFont)
+        {
+#ifdef __POCKETPC__
+            EnableContextMenu();
+#endif
+        }
+
+    // add one item to the listctrl in report mode
+    void InsertItemInReportView(int i);
+
+    void OnColClick(wxListEvent& event);
+    void OnColRightClick(wxListEvent& event);
+    void OnColBeginDrag(wxListEvent& event);
+    void OnColDragging(wxListEvent& event);
+    void OnColEndDrag(wxListEvent& event);
+    void OnBeginDrag(wxListEvent& event);
+    void OnBeginRDrag(wxListEvent& event);
+    void OnBeginLabelEdit(wxListEvent& event);
+    void OnEndLabelEdit(wxListEvent& event);
+    void OnDeleteItem(wxListEvent& event);
+    void OnDeleteAllItems(wxListEvent& event);
+#if WXWIN_COMPATIBILITY_2_4
+    void OnGetInfo(wxListEvent& event);
+    void OnSetInfo(wxListEvent& event);
+#endif
+    void OnSelected(wxListEvent& event);
+    void OnDeselected(wxListEvent& event);
+    void OnListKeyDown(wxListEvent& event);
+    void OnActivated(wxListEvent& event);
+    void OnFocused(wxListEvent& event);
+    void OnCacheHint(wxListEvent& event);
+
+    void OnChar(wxKeyEvent& event);
+
+#if USE_CONTEXT_MENU
+    void OnContextMenu(wxContextMenuEvent& event);
+#endif
+
+    void OnRightClick(wxMouseEvent& event);
+
+private:
+    void ShowContextMenu(const wxPoint& pos);
+    wxLog *m_logOld;
+    void SetColumnImage(int col, int image);
+
+    void LogEvent(const wxListEvent& event, const wxChar *eventName);
+    void LogColEvent(const wxListEvent& event, const wxChar *eventName);
+
+    virtual wxString OnGetItemText(long item, long column) const;
+    virtual int OnGetItemColumnImage(long item, long column) const;
+    virtual wxListItemAttr *OnGetItemAttr(long item) const;
+
+    wxListItemAttr m_attr;
+
+    DECLARE_NO_COPY_CLASS(MyListCtrl)
+    DECLARE_EVENT_TABLE()
+};
+
+// Define a new frame type
+class MyFrame: public wxFrame
+{
+public:
+    MyFrame(const wxChar *title);
+    virtual ~MyFrame();
+
+    void DoSize();
+
+protected:
+    void OnSize(wxSizeEvent& event);
+
+    void OnQuit(wxCommandEvent& event);
+    void OnAbout(wxCommandEvent& event);
+    void OnListView(wxCommandEvent& event);
+    void OnReportView(wxCommandEvent& event);
+    void OnIconView(wxCommandEvent& event);
+    void OnIconTextView(wxCommandEvent& event);
+    void OnSmallIconView(wxCommandEvent& event);
+    void OnSmallIconTextView(wxCommandEvent& event);
+    void OnVirtualView(wxCommandEvent& event);
+    void OnSmallVirtualView(wxCommandEvent& event);
+
+    void OnFocusLast(wxCommandEvent& event);
+    void OnToggleFirstSel(wxCommandEvent& event);
+    void OnDeselectAll(wxCommandEvent& event);
+    void OnSelectAll(wxCommandEvent& event);
+    void OnAdd(wxCommandEvent& event);
+    void OnEdit(wxCommandEvent& event);
+    void OnDelete(wxCommandEvent& event);
+    void OnDeleteAll(wxCommandEvent& event);
+    void OnSort(wxCommandEvent& event);
+    void OnSetFgColour(wxCommandEvent& event);
+    void OnSetBgColour(wxCommandEvent& event);
+    void OnToggleMultiSel(wxCommandEvent& event);
+    void OnShowColInfo(wxCommandEvent& event);
+    void OnShowSelInfo(wxCommandEvent& event);
+    void OnFreeze(wxCommandEvent& event);
+    void OnThaw(wxCommandEvent& event);
+    void OnToggleLines(wxCommandEvent& event);
+
+    void OnUpdateShowColInfo(wxUpdateUIEvent& event);
+    void OnUpdateToggleMultiSel(wxUpdateUIEvent& event);
+
+    wxImageList *m_imageListNormal;
+    wxImageList *m_imageListSmall;
+
+    wxPanel *m_panel;
+    MyListCtrl *m_listCtrl;
+    wxTextCtrl *m_logWindow;
+
+private:
+    // recreate the list control with the new flags
+    void RecreateList(long flags, bool withText = true);
+
+    // fill the control with items depending on the view
+    void InitWithListItems();
+    void InitWithReportItems();
+    void InitWithIconItems(bool withText, bool sameIcon = false);
+    void InitWithVirtualItems();
+
+    // return true if the control is not in virtual view, give an error message
+    // and return false if it is
+    bool CheckNonVirtual() const;
+
+
+    wxLog *m_logOld;
+
+    bool m_smallVirtual;
+
+    DECLARE_NO_COPY_CLASS(MyFrame)
+    DECLARE_EVENT_TABLE()
+};
+
+
+// IDs for the menu commands
+enum
+{
+    LIST_ABOUT = wxID_ABOUT,
+    LIST_QUIT = wxID_EXIT,
+
+    LIST_LIST_VIEW = wxID_HIGHEST,
+    LIST_ICON_VIEW,
+    LIST_ICON_TEXT_VIEW,
+    LIST_SMALL_ICON_VIEW,
+    LIST_SMALL_ICON_TEXT_VIEW,
+    LIST_REPORT_VIEW,
+    LIST_VIRTUAL_VIEW,
+    LIST_SMALL_VIRTUAL_VIEW,
+
+    LIST_DESELECT_ALL,
+    LIST_SELECT_ALL,
+    LIST_DELETE_ALL,
+    LIST_DELETE,
+    LIST_ADD,
+    LIST_EDIT,
+    LIST_SORT,
+    LIST_SET_FG_COL,
+    LIST_SET_BG_COL,
+    LIST_TOGGLE_MULTI_SEL,
+    LIST_TOGGLE_FIRST,
+    LIST_SHOW_COL_INFO,
+    LIST_SHOW_SEL_INFO,
+    LIST_FOCUS_LAST,
+    LIST_FREEZE,
+    LIST_THAW,
+    LIST_TOGGLE_LINES,
+
+    LIST_CTRL                   = 1000
+};
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/samples/srchctrl/srchtest.rc wxWidgets/samples/srchctrl/srchtest.rc
--- ..\..\wxWidgets/samples/srchctrl/srchtest.rc	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/samples/srchctrl/srchtest.rc	2006-12-04 18:43:44.171750000 -0800
@@ -0,0 +1,7 @@
+aaaa     ICON "mondrian.ico"
+mondrian ICON "mondrian.ico"
+#include "wx/msw/wx.rc"
+
+icon1       ICON    "bitmaps/toolbrai.ico"
+icon2       ICON    "bitmaps/toolchar.ico"
+icon3       ICON    "bitmaps/toolchec.ico"
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/common/datacmn.cpp wxWidgets/src/common/datacmn.cpp
--- ..\..\wxWidgets/src/common/datacmn.cpp	2006-12-07 15:10:13.890500000 -0800
+++ wxWidgets/src/common/datacmn.cpp	2006-12-03 14:00:19.609375000 -0800
@@ -54,6 +54,7 @@
 extern WXDLLEXPORT_DATA(const wxChar) wxRadioButtonNameStr[] = wxT("radioButton");
 extern WXDLLEXPORT_DATA(const wxChar) wxBitmapRadioButtonNameStr[] = wxT("radioButton");
 extern WXDLLEXPORT_DATA(const wxChar) wxScrollBarNameStr[] = wxT("scrollBar");
+extern WXDLLEXPORT_DATA(const wxChar) wxSearchCtrlNameStr[] = wxT("searchCtrl");
 extern WXDLLEXPORT_DATA(const wxChar) wxSliderNameStr[] = wxT("slider");
 extern WXDLLEXPORT_DATA(const wxChar) wxStatusLineNameStr[] = wxT("status_line");
 extern WXDLLEXPORT_DATA(const wxChar) wxTextCtrlNameStr[] = wxT("text");
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/common/event.cpp wxWidgets/src/common/event.cpp
--- ..\..\wxWidgets/src/common/event.cpp	2006-12-07 15:10:13.984250000 -0800
+++ wxWidgets/src/common/event.cpp	2006-12-03 09:22:59.234375000 -0800
@@ -172,6 +172,8 @@
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_TOOL_RCLICKED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_TOOL_ENTER)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_SPINCTRL_UPDATED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_SEARCHCTRL_CANCEL)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_SEARCHCTRL_SEARCH)
 
 // Sockets and timers send events, too
 DEFINE_EVENT_TYPE(wxEVT_TIMER)
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/generic/srchctlg.cpp wxWidgets/src/generic/srchctlg.cpp
--- ..\..\wxWidgets/src/generic/srchctlg.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/src/generic/srchctlg.cpp	2006-12-07 12:46:01.984250000 -0800
@@ -0,0 +1,1055 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/generic/srchctlg.cpp
+// Purpose:     implements wxSearchCtrl as a composite control
+// Author:      Vince Harron
+// Modified by:
+// Created:     2006-02-19
+// RCS-ID:      
+// Copyright:   Vince Harron
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma implementation "srchctlg.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/button.h"
+#endif //WX_PRECOMP
+
+#if wxUSE_SEARCHCTRL
+
+#if !USE_NATIVE_SEARCH_CONTROL
+
+#include "wx/srchctrl.h"
+#include "wx/image.h"
+
+#define WXMIN(a,b) (a)<(b)?(a):(b)
+#define WXMAX(a,b) (a)>(b)?(a):(b)
+
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// the margin between the text control and the search/cancel buttons
+static const wxCoord MARGIN = 2;
+
+// 1 pixel border around all controls (wxSIMPLE_BORDER)
+static const wxCoord BORDER = 2;
+
+// ----------------------------------------------------------------------------
+// wxSearchTextCtrl: text control used by search control
+// ----------------------------------------------------------------------------
+
+class wxSearchTextCtrl : public wxTextCtrl
+{
+public:
+    wxSearchTextCtrl(wxSearchCtrl *search, const wxString& value)
+        : wxTextCtrl(search, wxID_ANY, value, wxDefaultPosition, wxDefaultSize, wxNO_BORDER )
+    {
+        m_search = search;
+
+        // remove the default minsize, the searchctrl will have one instead
+        SetSizeHints(wxDefaultCoord,wxDefaultCoord);
+    }
+
+protected:
+    void OnText(wxCommandEvent& eventText)
+    {
+        wxCommandEvent event(eventText);
+        event.SetEventObject(m_search);
+        event.SetId(m_search->GetId());
+
+        m_search->GetEventHandler()->ProcessEvent(event);
+    }
+
+    void OnTextUrl(wxTextUrlEvent& eventText)
+    {
+        // copy constructor is disabled for some reason?
+        //wxTextUrlEvent event(eventText);
+        wxTextUrlEvent event(
+            m_search->GetId(), 
+            eventText.GetMouseEvent(),
+            eventText.GetURLStart(),
+            eventText.GetURLEnd()
+            );
+        event.SetEventObject(m_search);
+
+        m_search->GetEventHandler()->ProcessEvent(event);
+    }
+
+private:
+    wxSearchCtrl* m_search;
+
+    DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(wxSearchTextCtrl, wxTextCtrl)
+    EVT_TEXT(wxID_ANY, wxSearchTextCtrl::OnText)
+    EVT_TEXT_ENTER(wxID_ANY, wxSearchTextCtrl::OnText)
+    EVT_TEXT_URL(wxID_ANY, wxSearchTextCtrl::OnTextUrl)
+    EVT_TEXT_MAXLEN(wxID_ANY, wxSearchTextCtrl::OnText)
+END_EVENT_TABLE()
+
+// ----------------------------------------------------------------------------
+// wxSearchButton: search button used by search control
+// ----------------------------------------------------------------------------
+
+class wxSearchButton : public wxBitmapButton
+{
+public:
+    wxSearchButton(wxSearchCtrl *search, int eventType, const wxBitmap& bmp)
+        : wxBitmapButton(search, wxID_ANY, bmp, wxDefaultPosition, wxDefaultSize, wxNO_BORDER)
+    {
+        m_search = search;
+        m_eventType = eventType;
+
+        // remove the default minsize, the searchctrl will have one instead
+        SetSizeHints(wxDefaultCoord,wxDefaultCoord);
+    }
+
+protected:
+    void OnButton(wxCommandEvent& /*eventSearch*/)
+    {
+        wxCommandEvent event(m_eventType, m_search->GetId());
+        event.SetEventObject(m_search);
+
+        GetEventHandler()->ProcessEvent(event);
+
+        m_search->SetFocus();
+
+        if ( m_eventType == wxEVT_COMMAND_SEARCHCTRL_SEARCH )
+        {
+            // this happens automatically, just like on Mac OS X
+            m_search->PopupSearchMenu();
+        }
+    }
+
+private:
+    wxSearchCtrl *m_search;
+    wxEventType   m_eventType;
+
+    DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(wxSearchButton, wxButton)
+    EVT_BUTTON(wxID_ANY, wxSearchButton::OnButton)
+END_EVENT_TABLE()
+
+BEGIN_EVENT_TABLE(wxSearchCtrl, wxSearchCtrlBase)
+    EVT_SEARCHCTRL_SEARCH(wxID_ANY, wxSearchCtrl::OnSearchButton)
+    EVT_SET_FOCUS(wxSearchCtrl::OnSetFocus)
+END_EVENT_TABLE()
+
+IMPLEMENT_DYNAMIC_CLASS(wxSearchCtrl, wxSearchCtrlBase)
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// wxSearchCtrl creation
+// ----------------------------------------------------------------------------
+
+// creation
+// --------
+
+wxSearchCtrl::wxSearchCtrl()
+{ 
+    Init();
+}
+
+wxSearchCtrl::wxSearchCtrl(wxWindow *parent, wxWindowID id,
+           const wxString& value,
+           const wxPoint& pos,
+           const wxSize& size,
+           long style,
+           const wxValidator& validator,
+           const wxString& name)
+{
+    Init();
+
+    Create(parent, id, value, pos, size, style, validator, name);
+}
+
+void wxSearchCtrl::Init()
+{
+    m_text = 0;
+    m_searchButton = 0;
+    m_cancelButton = 0;
+    m_menu = 0;
+
+    m_searchButtonVisible = true;
+    m_cancelButtonVisible = false;
+
+    m_searchMenuBitmapUser = false;
+    m_searchBitmapUser = false;
+    m_cancelBitmapUser = false;
+}
+
+bool wxSearchCtrl::Create(wxWindow *parent, wxWindowID id,
+            const wxString& value,
+            const wxPoint& pos,
+            const wxSize& size,
+            long style,
+            const wxValidator& validator,
+            const wxString& name)
+{
+    if ( !wxTextCtrlBase::Create(parent, id, pos, size, wxSIMPLE_BORDER | style, validator, name) )
+    {
+        return false;
+    }
+
+    m_text = new wxSearchTextCtrl(this,value);
+    wxSize sizeText = m_text->GetBestSize();
+
+    m_searchButton = new wxSearchButton(this,wxEVT_COMMAND_SEARCHCTRL_SEARCH,m_searchBitmap);
+    m_cancelButton = new wxSearchButton(this,wxEVT_COMMAND_SEARCHCTRL_CANCEL,m_cancelBitmap);
+
+    SetForegroundColour( m_text->GetForegroundColour() );
+    m_searchButton->SetForegroundColour( m_text->GetForegroundColour() );
+    m_cancelButton->SetForegroundColour( m_text->GetForegroundColour() );
+
+    SetBackgroundColour( m_text->GetBackgroundColour() );
+    m_searchButton->SetBackgroundColour( m_text->GetBackgroundColour() );
+    m_cancelButton->SetBackgroundColour( m_text->GetBackgroundColour() );
+
+    RecalcBitmaps();
+
+    SetInitialSize(size);
+    Move(pos);
+    return true;
+}
+
+wxSearchCtrl::~wxSearchCtrl()
+{
+    delete m_text;
+    delete m_searchButton;
+    delete m_cancelButton;
+    delete m_menu;
+}
+
+
+// search control specific interfaces
+void wxSearchCtrl::SetMenu( wxMenu* menu )
+{
+    if ( menu == m_menu )
+    {
+        // no change
+        return;
+    }
+    delete m_menu;
+    bool hadMenu = (m_menu!=0);
+    m_menu = menu;
+
+    if ( m_menu && !hadMenu )
+    {
+        m_searchButton->SetBitmapLabel(m_searchMenuBitmap);
+        m_searchButton->Refresh();
+        if ( !m_searchButtonVisible )
+        {
+            // adding the menu will force the search button to be visible
+            wxRect rect = GetRect();
+            LayoutControls(0, 0, rect.GetWidth(), rect.GetHeight());
+        }
+    }
+    else if ( !m_menu && hadMenu )
+    {
+        m_searchButton->SetBitmapLabel(m_searchBitmap);
+        if ( m_searchButtonVisible )
+        {
+            m_searchButton->Refresh();
+        }
+        else
+        {
+            wxRect rect = GetRect();
+            LayoutControls(0, 0, rect.GetWidth(), rect.GetHeight());
+        }
+    }
+}
+
+wxMenu* wxSearchCtrl::GetMenu()
+{
+    return m_menu;
+}
+
+void wxSearchCtrl::SetSearchButtonVisible( bool show )
+{
+    if ( m_searchButtonVisible == show )
+    {
+        // no change
+        return;
+    }
+    m_searchButtonVisible = show;
+    if ( m_searchButtonVisible )
+    {
+        RecalcBitmaps();
+    }
+
+    wxRect rect = GetRect();
+    LayoutControls(0, 0, rect.GetWidth(), rect.GetHeight());
+}
+
+bool wxSearchCtrl::GetSearchButtonVisible() const
+{
+    return m_searchButtonVisible;
+}
+
+
+void wxSearchCtrl::SetCancelButtonVisible( bool show )
+{
+    if ( m_cancelButtonVisible == show )
+    {
+        // no change
+        return;
+    }
+    m_cancelButtonVisible = show;
+
+    wxRect rect = GetRect();
+    LayoutControls(0, 0, rect.GetWidth(), rect.GetHeight());
+}
+
+bool wxSearchCtrl::GetCancelButtonVisible() const
+{
+    return m_cancelButtonVisible;
+}
+
+
+// ----------------------------------------------------------------------------
+// geometry
+// ----------------------------------------------------------------------------
+
+wxSize wxSearchCtrl::DoGetBestSize() const
+{
+    wxSize sizeText = m_text->GetBestSize();
+    wxSize sizeSearch(0,0);
+    wxSize sizeCancel(0,0);
+    int searchMargin = 0;
+    int cancelMargin = 0;
+    if ( m_searchButtonVisible || m_menu )
+    {
+        sizeSearch = m_searchButton->GetBestSize();
+        searchMargin = MARGIN;
+    }
+    if ( m_cancelButtonVisible )
+    {
+        sizeCancel = m_cancelButton->GetBestSize();
+        cancelMargin = MARGIN;
+    }
+
+    int horizontalBorder = 1 + ( sizeText.y - sizeText.y * 14 / 21 ) / 2;
+
+    // buttons are square and equal to the height of the text control
+    int height = sizeText.y;
+    return wxSize(sizeSearch.x + searchMargin + sizeText.x + cancelMargin + sizeCancel.x + 2*horizontalBorder, height + 2*BORDER);
+}
+
+void wxSearchCtrl::DoMoveWindow(int x, int y, int width, int height)
+{
+    wxSearchCtrlBase::DoMoveWindow(x, y, width, height);
+
+    LayoutControls(0, 0, width, height);
+}
+
+void wxSearchCtrl::LayoutControls(int x, int y, int width, int height)
+{
+    wxSize sizeText = m_text->GetBestSize();
+    // make room for the search menu & clear button
+    int horizontalBorder = 1 + ( sizeText.y - sizeText.y * 14 / 21 ) / 2;
+    x += horizontalBorder;
+    y += BORDER;
+    width -= horizontalBorder*2;
+    height -= BORDER*2;
+
+    wxSize sizeSearch(0,0);
+    wxSize sizeCancel(0,0);
+    int searchMargin = 0;
+    int cancelMargin = 0;
+    if ( m_searchButtonVisible || m_menu )
+    {
+        sizeSearch = m_searchButton->GetBestSize();
+        searchMargin = MARGIN;
+    }
+    if ( m_cancelButtonVisible )
+    {
+        sizeCancel = m_cancelButton->GetBestSize();
+        cancelMargin = MARGIN;
+    }
+    m_searchButton->Show( m_searchButtonVisible || m_menu );
+    m_cancelButton->Show( m_cancelButtonVisible );
+
+    if ( sizeSearch.x + sizeCancel.x > width )
+    {
+        sizeSearch.x = width/2;
+        sizeCancel.x = width/2;
+        searchMargin = 0;
+        cancelMargin = 0;
+    }
+    wxCoord textWidth = width - sizeSearch.x - sizeCancel.x - searchMargin - cancelMargin;
+
+    // position the subcontrols inside the client area
+
+    m_searchButton->SetSize(x, y, sizeSearch.x, height);
+    m_text->SetSize(x + sizeSearch.x + searchMargin, y, textWidth, height);
+    m_cancelButton->SetSize(x + sizeSearch.x + searchMargin + textWidth + cancelMargin,y,sizeCancel.x,height);
+}
+
+
+// accessors
+// ---------
+
+wxString wxSearchCtrl::GetValue() const
+{
+    return m_text->GetValue();
+}
+void wxSearchCtrl::SetValue(const wxString& value)
+{
+    m_text->SetValue(value);
+}
+
+wxString wxSearchCtrl::GetRange(long from, long to) const
+{
+    return m_text->GetRange(from, to);
+}
+
+int wxSearchCtrl::GetLineLength(long lineNo) const
+{
+    return m_text->GetLineLength(lineNo);
+}
+wxString wxSearchCtrl::GetLineText(long lineNo) const
+{
+    return m_text->GetLineText(lineNo);
+}
+int wxSearchCtrl::GetNumberOfLines() const
+{
+    return m_text->GetNumberOfLines();
+}
+
+bool wxSearchCtrl::IsModified() const
+{
+    return m_text->IsModified();
+}
+bool wxSearchCtrl::IsEditable() const
+{
+    return m_text->IsEditable();
+}
+
+// more readable flag testing methods
+bool wxSearchCtrl::IsSingleLine() const
+{
+    return m_text->IsSingleLine();
+}
+bool wxSearchCtrl::IsMultiLine() const
+{
+    return m_text->IsMultiLine();
+}
+
+// If the return values from and to are the same, there is no selection.
+void wxSearchCtrl::GetSelection(long* from, long* to) const
+{
+    m_text->GetSelection(from, to);
+}
+
+wxString wxSearchCtrl::GetStringSelection() const
+{
+    return m_text->GetStringSelection();
+}
+
+// operations
+// ----------
+
+// editing
+void wxSearchCtrl::Clear()
+{
+    m_text->Clear();
+}
+void wxSearchCtrl::Replace(long from, long to, const wxString& value)
+{
+    m_text->Replace(from, to, value);
+}
+void wxSearchCtrl::Remove(long from, long to)
+{
+    m_text->Remove(from, to);
+}
+
+// load/save the controls contents from/to the file
+bool wxSearchCtrl::LoadFile(const wxString& file)
+{
+    return m_text->LoadFile(file);
+}
+bool wxSearchCtrl::SaveFile(const wxString& file)
+{
+    return m_text->SaveFile(file);
+}
+
+// sets/clears the dirty flag
+void wxSearchCtrl::MarkDirty()
+{
+    m_text->MarkDirty();
+}
+void wxSearchCtrl::DiscardEdits()
+{
+    m_text->DiscardEdits();
+}
+
+// set the max number of characters which may be entered in a single line
+// text control
+void wxSearchCtrl::SetMaxLength(unsigned long len)
+{
+    m_text->SetMaxLength(len);
+}
+
+// writing text inserts it at the current position, appending always
+// inserts it at the end
+void wxSearchCtrl::WriteText(const wxString& text)
+{
+    m_text->WriteText(text);
+}
+void wxSearchCtrl::AppendText(const wxString& text)
+{
+    m_text->AppendText(text);
+}
+
+// insert the character which would have resulted from this key event,
+// return true if anything has been inserted
+bool wxSearchCtrl::EmulateKeyPress(const wxKeyEvent& event)
+{
+    return m_text->EmulateKeyPress(event);
+}
+
+// text control under some platforms supports the text styles: these
+// methods allow to apply the given text style to the given selection or to
+// set/get the style which will be used for all appended text
+bool wxSearchCtrl::SetStyle(long start, long end, const wxTextAttr& style)
+{
+    return m_text->SetStyle(start, end, style);
+}
+bool wxSearchCtrl::GetStyle(long position, wxTextAttr& style)
+{
+    return m_text->GetStyle(position, style);
+}
+bool wxSearchCtrl::SetDefaultStyle(const wxTextAttr& style)
+{
+    return m_text->SetDefaultStyle(style);
+}
+const wxTextAttr& wxSearchCtrl::GetDefaultStyle() const
+{
+    return m_text->GetDefaultStyle();
+}
+
+// translate between the position (which is just an index in the text ctrl
+// considering all its contents as a single strings) and (x, y) coordinates
+// which represent column and line.
+long wxSearchCtrl::XYToPosition(long x, long y) const
+{
+    return m_text->XYToPosition(x, y);
+}
+bool wxSearchCtrl::PositionToXY(long pos, long *x, long *y) const
+{
+    return m_text->PositionToXY(pos, x, y);
+}
+
+void wxSearchCtrl::ShowPosition(long pos)
+{
+    m_text->ShowPosition(pos);
+}
+
+// find the character at position given in pixels
+//
+// NB: pt is in device coords (not adjusted for the client area origin nor
+//     scrolling)
+wxTextCtrlHitTestResult wxSearchCtrl::HitTest(const wxPoint& pt, long *pos) const
+{
+    return m_text->HitTest(pt, pos);
+}
+wxTextCtrlHitTestResult wxSearchCtrl::HitTest(const wxPoint& pt,
+                                        wxTextCoord *col,
+                                        wxTextCoord *row) const
+{
+    return m_text->HitTest(pt, col, row);
+}
+
+// Clipboard operations
+void wxSearchCtrl::Copy()
+{
+    m_text->Copy();
+}
+void wxSearchCtrl::Cut()
+{
+    m_text->Cut();
+}
+void wxSearchCtrl::Paste()
+{
+    m_text->Paste();
+}
+
+bool wxSearchCtrl::CanCopy() const
+{
+    return m_text->CanCopy();
+}
+bool wxSearchCtrl::CanCut() const
+{
+    return m_text->CanCut();
+}
+bool wxSearchCtrl::CanPaste() const
+{
+    return m_text->CanPaste();
+}
+
+// Undo/redo
+void wxSearchCtrl::Undo()
+{
+    m_text->Undo();
+}
+void wxSearchCtrl::Redo()
+{
+    m_text->Redo();
+}
+
+bool wxSearchCtrl::CanUndo() const
+{
+    return m_text->CanUndo();
+}
+bool wxSearchCtrl::CanRedo() const
+{
+    return m_text->CanRedo();
+}
+
+// Insertion point
+void wxSearchCtrl::SetInsertionPoint(long pos)
+{
+    m_text->SetInsertionPoint(pos);
+}
+void wxSearchCtrl::SetInsertionPointEnd()
+{
+    m_text->SetInsertionPointEnd();
+}
+long wxSearchCtrl::GetInsertionPoint() const
+{
+    return m_text->GetInsertionPoint();
+}
+wxTextPos wxSearchCtrl::GetLastPosition() const
+{
+    return m_text->GetLastPosition();
+}
+
+void wxSearchCtrl::SetSelection(long from, long to)
+{
+    m_text->SetSelection(from, to);
+}
+void wxSearchCtrl::SelectAll()
+{
+    m_text->SelectAll();
+}
+
+void wxSearchCtrl::SetEditable(bool editable)
+{
+    m_text->SetEditable(editable);
+}
+
+bool wxSearchCtrl::SetFont(const wxFont& font)
+{
+    bool result = wxSearchCtrlBase::SetFont(font);
+    if ( result && m_text )
+    {
+        result &= m_text->SetFont(font);
+    }
+    RecalcBitmaps();
+    return result;
+}
+
+// search control generic only
+void wxSearchCtrl::SetSearchBitmap( const wxBitmap& bitmap )
+{
+    m_searchBitmap = bitmap;
+    m_searchBitmapUser = bitmap.Ok();
+    if ( m_searchBitmapUser )
+    {
+        if ( m_searchButton && !m_menu )
+        {
+            m_searchButton->SetBitmapLabel( m_searchBitmap );
+        }
+    }
+    else
+    {
+        // the user bitmap was just cleared, generate one
+        RecalcBitmaps();
+    }
+}
+
+void wxSearchCtrl::SetSearchMenuBitmap( const wxBitmap& bitmap )
+{
+    m_searchMenuBitmap = bitmap;
+    m_searchMenuBitmapUser = bitmap.Ok();
+    if ( m_searchMenuBitmapUser )
+    {
+        if ( m_searchButton && m_menu )
+        {
+            m_searchButton->SetBitmapLabel( m_searchMenuBitmap );
+        }
+    }
+    else
+    {
+        // the user bitmap was just cleared, generate one
+        RecalcBitmaps();
+    }
+}
+
+void wxSearchCtrl::SetCancelBitmap( const wxBitmap& bitmap )
+{
+    m_cancelBitmap = bitmap;
+    m_cancelBitmapUser = bitmap.Ok();
+    if ( m_cancelBitmapUser )
+    {
+        if ( m_cancelButton )
+        {
+            m_cancelButton->SetBitmapLabel( m_cancelBitmap );
+        }
+    }
+    else
+    {
+        // the user bitmap was just cleared, generate one
+        RecalcBitmaps();
+    }
+}
+
+#if 0
+
+// override streambuf method
+#if wxHAS_TEXT_WINDOW_STREAM
+int overflow(int i);
+#endif // wxHAS_TEXT_WINDOW_STREAM
+
+// stream-like insertion operators: these are always available, whether we
+// were, or not, compiled with streambuf support
+wxTextCtrl& operator<<(const wxString& s);
+wxTextCtrl& operator<<(int i);
+wxTextCtrl& operator<<(long i);
+wxTextCtrl& operator<<(float f);
+wxTextCtrl& operator<<(double d);
+wxTextCtrl& operator<<(const wxChar c);
+#endif
+
+void wxSearchCtrl::DoSetValue(const wxString& value, int flags)
+{
+    m_text->ChangeValue( value );
+    if ( flags & SetValue_SendEvent )
+        SendTextUpdatedEvent();
+}
+
+// do the window-specific processing after processing the update event
+void wxSearchCtrl::DoUpdateWindowUI(wxUpdateUIEvent& event)
+{
+    wxSearchCtrlBase::DoUpdateWindowUI(event);
+}
+
+bool wxSearchCtrl::ShouldInheritColours() const
+{
+    return true;
+}
+
+// icons are rendered at 3-8 times larger than necessary and downscaled for
+// antialiasing
+static int GetMultiplier()
+{
+#ifdef __WXWINCE__
+    // speed up bitmap generation by using a small bitmap
+    return 3;
+#else
+    int depth = ::wxDisplayDepth();
+
+    if  ( depth >= 24 )
+    {
+        return 8;
+    }
+    return 6;
+#endif
+}
+
+wxBitmap wxSearchCtrl::RenderSearchBitmap( int x, int y, bool renderDrop )
+{
+    wxColour bg = GetBackgroundColour();
+    wxColour fg = GetForegroundColour();
+
+    //===============================================================================
+    // begin drawing code
+    //===============================================================================
+    // image stats
+
+    // force width:height ratio
+    if ( 14*x > y*20 )
+    {
+        // x is too big
+        x = y*20/14;
+    }
+    else
+    {
+        // y is too big
+        y = x*14/20;
+    }
+
+    // glass 11x11, top left corner
+    // handle (9,9)-(13,13)
+    // drop (13,16)-(19,6)-(16,9)
+
+    int multiplier = GetMultiplier();
+    int penWidth = multiplier * 2;
+
+    penWidth = penWidth * x / 20;
+
+    wxBitmap bitmap( multiplier*x, multiplier*y );
+    wxMemoryDC mem;
+    mem.SelectObject(bitmap);
+
+    // clear background
+    mem.SetBrush( wxBrush(bg) );
+    mem.SetPen( wxPen(bg) );
+    mem.DrawRectangle(0,0,bitmap.GetWidth(),bitmap.GetHeight());
+
+    // draw drop glass
+    mem.SetBrush( wxBrush(fg) );
+    mem.SetPen( wxPen(fg) );
+    int glassBase = 5 * x / 20;
+    int glassFactor = 2*glassBase + 1;
+    int radius = multiplier*glassFactor/2;
+    mem.DrawCircle(radius,radius,radius);
+    mem.SetBrush( wxBrush(bg) );
+    mem.SetPen( wxPen(bg) );
+    mem.DrawCircle(radius,radius,radius-penWidth);
+
+    // draw handle
+    int lineStart = radius + (radius-penWidth/2) * 707 / 1000; // 707 / 1000 = 0.707 = 1/sqrt(2);
+
+    mem.SetPen( wxPen(fg) );
+    mem.SetBrush( wxBrush(fg) );
+    int handleCornerShift = penWidth * 707 / 1000 / 2; // 707 / 1000 = 0.707 = 1/sqrt(2);
+    handleCornerShift = WXMAX( handleCornerShift, 1 );
+    int handleBase = 4 * x / 20;
+    int handleLength = 2*handleBase+1;
+    wxPoint handlePolygon[] =
+    {
+        wxPoint(-handleCornerShift,+handleCornerShift),
+        wxPoint(+handleCornerShift,-handleCornerShift),
+        wxPoint(multiplier*handleLength/2+handleCornerShift,multiplier*handleLength/2-handleCornerShift),
+        wxPoint(multiplier*handleLength/2-handleCornerShift,multiplier*handleLength/2+handleCornerShift),
+    };
+    mem.DrawPolygon(WXSIZEOF(handlePolygon),handlePolygon,lineStart,lineStart);
+
+    // draw drop triangle
+    int triangleX = 13 * x / 20;
+    int triangleY = 5 * x / 20;
+    int triangleBase = 3 * x / 20;
+    int triangleFactor = triangleBase*2+1;
+    if ( renderDrop )
+    {
+        wxPoint dropPolygon[] =
+        {
+            wxPoint(multiplier*0,multiplier*0), // triangle left
+            wxPoint(multiplier*triangleFactor-1,multiplier*0), // triangle right
+            wxPoint(multiplier*triangleFactor/2,multiplier*triangleFactor/2), // triangle bottom
+        };
+        mem.DrawPolygon(WXSIZEOF(dropPolygon),dropPolygon,multiplier*triangleX,multiplier*triangleY);
+    }
+
+    //===============================================================================
+    // end drawing code
+    //===============================================================================
+
+    if ( multiplier != 1 )
+    {
+        wxImage image = bitmap.ConvertToImage();
+        image.Rescale(x,y);
+        bitmap = wxBitmap( image );
+    }
+
+    return bitmap;
+}
+
+wxBitmap wxSearchCtrl::RenderCancelBitmap( int x, int y )
+{
+    wxColour bg = GetBackgroundColour();
+    wxColour fg = GetForegroundColour();
+
+    //===============================================================================
+    // begin drawing code
+    //===============================================================================
+    // image stats
+
+    // total size 14x14
+    // force 1:1 ratio
+    if ( x > y )
+    {
+        // x is too big
+        x = y;
+    }
+    else
+    {
+        // y is too big
+        y = x;
+    }
+
+    // 14x14 circle
+    // cross line starts (4,4)-(10,10)
+    // drop (13,16)-(19,6)-(16,9)
+
+    int multiplier = GetMultiplier();
+
+    int penWidth = multiplier * x / 14;
+
+    wxBitmap bitmap( multiplier*x, multiplier*y );
+    wxMemoryDC mem;
+    mem.SelectObject(bitmap);
+
+    // clear background
+    mem.SetBrush( wxBrush(bg) );
+    mem.SetPen( wxPen(bg) );
+    mem.DrawRectangle(0,0,bitmap.GetWidth(),bitmap.GetHeight());
+
+    // draw drop glass
+    mem.SetBrush( wxBrush(fg) );
+    mem.SetPen( wxPen(fg) );
+    int radius = multiplier*x/2;
+    mem.DrawCircle(radius,radius,radius);
+
+    // draw cross
+    int lineStartBase = 4 * x / 14;
+    int lineLength = x - 2*lineStartBase;
+
+    mem.SetPen( wxPen(bg) );
+    mem.SetBrush( wxBrush(bg) );
+    int handleCornerShift = penWidth/2;
+    handleCornerShift = WXMAX( handleCornerShift, 1 );
+    wxPoint handlePolygon[] =
+    {
+        wxPoint(-handleCornerShift,+handleCornerShift),
+        wxPoint(+handleCornerShift,-handleCornerShift),
+        wxPoint(multiplier*lineLength+handleCornerShift,multiplier*lineLength-handleCornerShift),
+        wxPoint(multiplier*lineLength-handleCornerShift,multiplier*lineLength+handleCornerShift),
+    };
+    mem.DrawPolygon(WXSIZEOF(handlePolygon),handlePolygon,multiplier*lineStartBase,multiplier*lineStartBase);
+    wxPoint handlePolygon2[] =
+    {
+        wxPoint(+handleCornerShift,+handleCornerShift),
+        wxPoint(-handleCornerShift,-handleCornerShift),
+        wxPoint(multiplier*lineLength-handleCornerShift,-multiplier*lineLength-handleCornerShift),
+        wxPoint(multiplier*lineLength+handleCornerShift,-multiplier*lineLength+handleCornerShift),
+    };
+    mem.DrawPolygon(WXSIZEOF(handlePolygon2),handlePolygon2,multiplier*lineStartBase,multiplier*(x-lineStartBase));
+
+    //===============================================================================
+    // end drawing code
+    //===============================================================================
+
+    if ( multiplier != 1 )
+    {
+        wxImage image = bitmap.ConvertToImage();
+        image.Rescale(x,y);
+        bitmap = wxBitmap( image );
+    }
+
+    return bitmap;
+}
+
+void wxSearchCtrl::RecalcBitmaps()
+{
+    if ( !m_text )
+    {
+        return;
+    }
+    wxSize sizeText = m_text->GetBestSize();
+
+    //int bitmapHeight = sizeText.y * 14 / 21;
+    //int bitmapWidth  = bitmapHeight * 20 / 14;
+    int bitmapHeight = sizeText.y;
+    int bitmapWidth  = sizeText.y * 20 / 14;
+
+    if ( !m_searchBitmapUser )
+    {
+        if ( 
+            !m_searchBitmap.Ok() ||
+            m_searchBitmap.GetHeight() != bitmapHeight || 
+            m_searchBitmap.GetWidth() != bitmapWidth
+            )
+        {
+            m_searchBitmap = RenderSearchBitmap(bitmapWidth,bitmapHeight,false);
+            if ( !m_menu )
+            {
+                m_searchButton->SetBitmapLabel(m_searchBitmap);
+            }
+        }
+        // else this bitmap was set by user, don't alter
+    }
+
+    if ( !m_searchMenuBitmapUser )
+    {
+        if ( 
+            !m_searchMenuBitmap.Ok() ||
+            m_searchMenuBitmap.GetHeight() != bitmapHeight || 
+            m_searchMenuBitmap.GetWidth() != bitmapWidth
+            )
+        {
+            m_searchMenuBitmap = RenderSearchBitmap(bitmapWidth,bitmapHeight,true);
+            if ( m_menu )
+            {
+                m_searchButton->SetBitmapLabel(m_searchMenuBitmap);
+            }
+        }
+        // else this bitmap was set by user, don't alter
+    }
+
+    if ( !m_cancelBitmapUser )
+    {
+        if ( 
+            !m_cancelBitmap.Ok() ||
+            m_cancelBitmap.GetHeight() != bitmapHeight || 
+            m_cancelBitmap.GetWidth() != bitmapHeight
+            )
+        {
+            m_cancelBitmap = RenderCancelBitmap(bitmapHeight-BORDER,bitmapHeight-BORDER); // square
+            m_cancelButton->SetBitmapLabel(m_cancelBitmap);
+        }
+        // else this bitmap was set by user, don't alter
+    }
+}
+
+void wxSearchCtrl::OnSearchButton( wxCommandEvent& event )
+{
+    event.Skip();
+}
+
+void wxSearchCtrl::OnSetFocus( wxFocusEvent& /*event*/ )
+{
+    if ( m_text )
+    {
+        m_text->SetFocus();
+    }
+}
+
+void wxSearchCtrl::PopupSearchMenu()
+{
+    if ( m_menu )
+    {
+        wxSize size = GetSize();
+        PopupMenu( m_menu, 0, size.y );
+    }
+}
+
+#endif // !USE_NATIVE_SEARCH_CONTROL
+
+#endif // wxUSE_SEARCHCTRL
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/mac/carbon/srchctrl.cpp wxWidgets/src/mac/carbon/srchctrl.cpp
--- ..\..\wxWidgets/src/mac/carbon/srchctrl.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgets/src/mac/carbon/srchctrl.cpp	2006-12-07 12:46:02.156125000 -0800
@@ -0,0 +1,322 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/mac/carbon/srchctrl.cpp
+// Purpose:     implements mac carbon wxSearchCtrl
+// Author:      Vince Harron
+// Modified by:
+// Created:     2006-02-19
+// RCS-ID:      
+// Copyright:   Vince Harron
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma implementation "srchctrl.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/menu.h"
+#endif //WX_PRECOMP
+
+#if wxUSE_SEARCHCTRL
+
+#if USE_NATIVE_SEARCH_CONTROL
+
+#include "wx/srchctrl.h"
+#include "wx/mac/uma.h"
+#include "wx/mac/carbon/private/mactext.h"
+
+BEGIN_EVENT_TABLE(wxSearchCtrl, wxSearchCtrlBase)
+END_EVENT_TABLE()
+
+IMPLEMENT_DYNAMIC_CLASS(wxSearchCtrl, wxSearchCtrlBase)
+
+// ============================================================================
+// wxMacSearchFieldControl
+// ============================================================================
+
+#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+
+class wxMacSearchFieldControl : public wxMacUnicodeTextControl
+{
+public :
+    wxMacSearchFieldControl( wxTextCtrl *wxPeer,
+                             const wxString& str,
+                             const wxPoint& pos,
+                             const wxSize& size, long style ) : wxMacUnicodeTextControl( wxPeer )
+    {
+        Create( wxPeer, str, pos, size, style );
+    }
+
+    // search field options
+    virtual void SetSearchButtonVisible( bool show );
+    virtual bool GetSearchButtonVisible() const;
+
+    virtual void SetCancelButtonVisible( bool show );
+    virtual bool GetCancelButtonVisible() const;
+
+    virtual void SetSearchMenu( wxMenu* menu );
+    virtual wxMenu* GetSearchMenu() const;
+protected :
+    virtual void CreateControl( wxTextCtrl* peer, const Rect* bounds, CFStringRef crf );
+
+private:
+    wxMenu* m_menu;
+} ;
+
+void wxMacSearchFieldControl::CreateControl( wxTextCtrl* /*peer*/, const Rect* bounds, CFStringRef crf )
+{
+    OptionBits attributes = 0;
+    if ( UMAGetSystemVersion() >= 0x1040 )
+    {
+		attributes = kHISearchFieldAttributesSearchIcon;
+	}
+    HIRect hibounds = { { bounds->left, bounds->top }, { bounds->right-bounds->left, bounds->bottom-bounds->top } };
+    verify_noerr( HISearchFieldCreate( 
+        &hibounds,
+        attributes,
+        0, // MenuRef
+        CFSTR("Search"),
+        &m_controlRef
+        ) );
+    HIViewSetVisible (m_controlRef, true); 
+}
+
+// search field options
+void wxMacSearchFieldControl::SetSearchButtonVisible( bool show )
+{
+    if ( UMAGetSystemVersion() >= 0x1040 )
+    {
+        OptionBits set = 0;
+        OptionBits clear = 0;
+        if ( show )
+        {
+            set |= kHISearchFieldAttributesSearchIcon;
+        }
+        else
+        {
+            clear |= kHISearchFieldAttributesSearchIcon;
+        }
+        HISearchFieldChangeAttributes( m_controlRef, set, clear );
+    }
+}
+
+bool wxMacSearchFieldControl::GetSearchButtonVisible() const
+{ 
+    OptionBits attributes = 0;
+    verify_noerr( HISearchFieldGetAttributes( m_controlRef, &attributes ) );
+    return ( attributes & kHISearchFieldAttributesSearchIcon ) != 0;
+}
+
+void wxMacSearchFieldControl::SetCancelButtonVisible( bool show )
+{
+    OptionBits set = 0;
+    OptionBits clear = 0;
+    if ( show )
+    {
+        set |= kHISearchFieldAttributesCancel;
+    }
+    else
+    {
+        clear |= kHISearchFieldAttributesCancel;
+    }
+    HISearchFieldChangeAttributes( m_controlRef, set, clear );
+}
+
+bool wxMacSearchFieldControl::GetCancelButtonVisible() const
+{ 
+    OptionBits attributes = 0;
+    verify_noerr( HISearchFieldGetAttributes( m_controlRef, &attributes ) );
+    return ( attributes & kHISearchFieldAttributesCancel ) != 0;
+}
+
+void wxMacSearchFieldControl::SetSearchMenu( wxMenu* menu )
+{
+    m_menu = menu;
+    if ( m_menu )
+    {
+        verify_noerr( HISearchFieldSetSearchMenu( m_controlRef, MAC_WXHMENU(m_menu->GetHMenu()) ) );
+    }
+    else
+    {
+        verify_noerr( HISearchFieldSetSearchMenu( m_controlRef, 0 ) );
+    }
+}
+
+wxMenu* wxMacSearchFieldControl::GetSearchMenu() const
+{
+    return m_menu;
+}
+
+#endif
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// wxSearchCtrl creation
+// ----------------------------------------------------------------------------
+
+// creation
+// --------
+
+wxSearchCtrl::wxSearchCtrl()
+{ 
+    Init();
+}
+
+wxSearchCtrl::wxSearchCtrl(wxWindow *parent, wxWindowID id,
+           const wxString& value,
+           const wxPoint& pos,
+           const wxSize& size,
+           long style,
+           const wxValidator& validator,
+           const wxString& name)
+{
+    Init();
+
+    Create(parent, id, value, pos, size, style, validator, name);
+}
+
+void wxSearchCtrl::Init()
+{
+    m_menu = 0;
+}
+
+bool wxSearchCtrl::Create(wxWindow *parent, wxWindowID id,
+            const wxString& value,
+            const wxPoint& pos,
+            const wxSize& size,
+            long style,
+            const wxValidator& validator,
+            const wxString& name)
+{
+    if ( !wxTextCtrl::Create(parent, id, wxEmptyString, pos, size, wxBORDER_NONE | style, validator, name) )
+    {
+        return false;
+    }
+
+    return true;
+}
+
+wxSearchCtrl::~wxSearchCtrl()
+{
+    delete m_menu;
+}
+
+// search control specific interfaces
+// wxSearchCtrl owns menu after this call
+void wxSearchCtrl::SetMenu( wxMenu* menu )
+{
+    if ( menu == m_menu )
+    {
+        // no change
+        return;
+    }
+
+    if ( m_menu )
+    {
+        m_menu->SetInvokingWindow( 0 );
+    }
+
+    delete m_menu;
+    m_menu = menu;
+
+    if ( m_menu )
+    {
+        m_menu->SetInvokingWindow( this );
+    }
+
+    GetPeer()->SetSearchMenu( m_menu );
+}
+
+wxMenu* wxSearchCtrl::GetMenu()
+{
+    return m_menu;
+}
+
+void wxSearchCtrl::SetSearchButtonVisible( bool show )
+{
+    if ( GetSearchButtonVisible() == show )
+    {
+        // no change
+        return;
+    }
+    GetPeer()->SetSearchButtonVisible( show );
+}
+
+bool wxSearchCtrl::GetSearchButtonVisible() const
+{
+    return GetPeer()->GetSearchButtonVisible();
+}
+
+
+void wxSearchCtrl::SetCancelButtonVisible( bool show )
+{
+    if ( GetCancelButtonVisible() == show )
+    {
+        // no change
+        return;
+    }
+    GetPeer()->SetCancelButtonVisible( show );
+}
+
+bool wxSearchCtrl::GetCancelButtonVisible() const
+{
+    return GetPeer()->GetCancelButtonVisible();
+}
+
+wxInt32 wxSearchCtrl::MacSearchFieldSearchHit(WXEVENTHANDLERREF WXUNUSED(handler) , WXEVENTREF WXUNUSED(event) )
+{
+    wxCommandEvent event(wxEVT_COMMAND_SEARCHCTRL_SEARCH, m_windowId );
+    event.SetEventObject(this);
+    ProcessCommand(event);
+    return eventNotHandledErr ;
+}
+
+wxInt32 wxSearchCtrl::MacSearchFieldCancelHit(WXEVENTHANDLERREF WXUNUSED(handler) , WXEVENTREF WXUNUSED(event) )
+{
+    wxCommandEvent event(wxEVT_COMMAND_SEARCHCTRL_CANCEL, m_windowId );
+    event.SetEventObject(this);
+    ProcessCommand(event);
+    return eventNotHandledErr ;
+}
+
+
+void wxSearchCtrl::CreatePeer(
+           const wxString& str,
+           const wxPoint& pos,
+           const wxSize& size, long style )
+{
+#ifdef __WXMAC_OSX__
+#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+    if ( UMAGetSystemVersion() >= 0x1030 )
+    {
+        m_peer = new wxMacSearchFieldControl( this , str , pos , size , style );
+    }
+#endif
+#endif
+    if ( !m_peer )
+    {
+        wxTextCtrl::CreatePeer( str, pos, size, style );
+    }
+}
+
+#endif // USE_NATIVE_SEARCH_CONTROL
+
+#endif // wxUSE_SEARCHCTRL
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/mac/carbon/textctrl.cpp wxWidgets/src/mac/carbon/textctrl.cpp
--- ..\..\wxWidgets/src/mac/carbon/textctrl.cpp	2006-12-07 15:10:42.999875000 -0800
+++ wxWidgets/src/mac/carbon/textctrl.cpp	2006-12-07 10:19:31.093375000 -0800
@@ -63,6 +63,7 @@
 #endif
 
 #include "wx/mac/uma.h"
+#include "wx/mac/carbon/private/mactext.h"
 
 #ifndef __WXMAC_OSX__
 enum
@@ -165,60 +166,6 @@
     return result ;
 }
 
-// common interface for all implementations
-class wxMacTextControl : public wxMacControl
-{
-public :
-    wxMacTextControl( wxTextCtrl *peer ) ;
-    virtual ~wxMacTextControl() ;
-
-    virtual wxString GetStringValue() const = 0 ;
-    virtual void SetStringValue( const wxString &val ) = 0 ;
-    virtual void SetSelection( long from, long to ) = 0 ;
-    virtual void GetSelection( long* from, long* to ) const = 0 ;
-    virtual void WriteText( const wxString& str ) = 0 ;
-
-    virtual void SetStyle( long start, long end, const wxTextAttr& style ) ;
-    virtual void Copy() ;
-    virtual void Cut() ;
-    virtual void Paste() ;
-    virtual bool CanPaste() const ;
-    virtual void SetEditable( bool editable ) ;
-    virtual wxTextPos GetLastPosition() const ;
-    virtual void Replace( long from, long to, const wxString &str ) ;
-    virtual void Remove( long from, long to ) ;
-
-
-    virtual bool HasOwnContextMenu() const
-    { return false ; }
-
-    virtual bool SetupCursor( const wxPoint& pt )
-    { return false ; }
-
-    virtual void Clear() ;
-    virtual bool CanUndo() const;
-    virtual void Undo() ;
-    virtual bool CanRedo() const;
-    virtual void Redo() ;
-    virtual int GetNumberOfLines() const ;
-    virtual long XYToPosition(long x, long y) const;
-    virtual bool PositionToXY(long pos, long *x, long *y) const ;
-    virtual void ShowPosition(long WXUNUSED(pos)) ;
-    virtual int GetLineLength(long lineNo) const ;
-    virtual wxString GetLineText(long lineNo) const ;
-    virtual void CheckSpelling(bool check) { }
-
-#ifndef __WXMAC_OSX__
-    virtual void            MacControlUserPaneDrawProc(wxInt16 part) = 0 ;
-    virtual wxInt16         MacControlUserPaneHitTestProc(wxInt16 x, wxInt16 y) = 0 ;
-    virtual wxInt16         MacControlUserPaneTrackingProc(wxInt16 x, wxInt16 y, void* actionProc) = 0 ;
-    virtual void            MacControlUserPaneIdleProc() = 0 ;
-    virtual wxInt16         MacControlUserPaneKeyDownProc(wxInt16 keyCode, wxInt16 charCode, wxInt16 modifiers) = 0 ;
-    virtual void            MacControlUserPaneActivateProc(bool activating) = 0 ;
-    virtual wxInt16         MacControlUserPaneFocusProc(wxInt16 action) = 0 ;
-    virtual void            MacControlUserPaneBackgroundProc(void* info) = 0 ;
-#endif
-} ;
 
 // common parts for implementations based on MLTE
 
@@ -319,38 +266,6 @@
 
 #endif
 
-class wxMacUnicodeTextControl : public wxMacTextControl
-{
-public :
-    wxMacUnicodeTextControl( wxTextCtrl *wxPeer,
-                             const wxString& str,
-                             const wxPoint& pos,
-                             const wxSize& size, long style ) ;
-    virtual ~wxMacUnicodeTextControl();
-
-    virtual void VisibilityChanged(bool shown);
-    virtual wxString GetStringValue() const ;
-    virtual void SetStringValue( const wxString &str) ;
-    virtual void Copy();
-    virtual void Cut();
-    virtual void Paste();
-    virtual bool CanPaste() const;
-    virtual void SetEditable(bool editable) ;
-    virtual void GetSelection( long* from, long* to) const ;
-    virtual void SetSelection( long from , long to ) ;
-    virtual void WriteText(const wxString& str) ;
-
-protected :
-    // contains the tag for the content (is different for password and non-password controls)
-    OSType m_valueTag ;
-
-    // as the selection tag only works correctly when the control has the focus we have to mirror the
-    // intended value
-    EventHandlerRef m_focusHandlerRef ;
-public :
-    ControlEditTextSelectionRec m_selection ;
-};
-
 #endif
 
 // 'classic' MLTE implementation
@@ -480,6 +395,27 @@
         style |= wxTE_PROCESS_ENTER ;
     }
 
+    CreatePeer( str, pos, size, style );
+
+    MacPostControlCreate(pos, size) ;
+
+    // only now the embedding is correct and we can do a positioning update
+
+    MacSuperChangedPosition() ;
+
+    if ( m_windowStyle & wxTE_READONLY)
+        SetEditable( false ) ;
+
+    SetCursor( wxCursor( wxCURSOR_IBEAM ) ) ;
+
+    return true;
+}
+
+void wxTextCtrl::CreatePeer(
+           const wxString& str,
+           const wxPoint& pos,
+           const wxSize& size, long style )
+{
     bool forceMLTE = false ;
 
 #if wxUSE_SYSTEM_OPTIONS
@@ -517,21 +453,9 @@
     if ( !m_peer )
         m_peer = new wxMacMLTEClassicControl( this , str , pos , size , style ) ;
 #endif
-
-    MacPostControlCreate(pos, size) ;
-
-    // only now the embedding is correct and we can do a positioning update
-
-    MacSuperChangedPosition() ;
-
-    if ( m_windowStyle & wxTE_READONLY)
-        SetEditable( false ) ;
-
-    SetCursor( wxCursor( wxCURSOR_IBEAM ) ) ;
-
-    return true;
 }
 
+
 void wxTextCtrl::MacSuperChangedPosition()
 {
     wxWindow::MacSuperChangedPosition() ;
@@ -1426,12 +1350,24 @@
 
 DEFINE_ONE_SHOT_HANDLER_GETTER( wxMacUnicodeTextControlEventHandler )
 
+wxMacUnicodeTextControl::wxMacUnicodeTextControl( wxTextCtrl *wxPeer ) : wxMacTextControl( wxPeer )
+{
+}
+
 wxMacUnicodeTextControl::wxMacUnicodeTextControl( wxTextCtrl *wxPeer,
     const wxString& str,
     const wxPoint& pos,
     const wxSize& size, long style )
     : wxMacTextControl( wxPeer )
 {
+    Create( wxPeer, str, pos, size, style );
+}
+
+bool wxMacUnicodeTextControl::Create( wxTextCtrl *wxPeer,
+    const wxString& str,
+    const wxPoint& pos,
+    const wxSize& size, long style )
+{
     m_font = wxPeer->GetFont() ;
     m_windowStyle = style ;
     Rect bounds = wxMacGetBoundsForControl( wxPeer , pos , size ) ;
@@ -1439,13 +1375,9 @@
     wxMacConvertNewlines10To13( &st ) ;
     wxMacCFStringHolder cf(st , m_font.GetEncoding()) ;
     CFStringRef cfr = cf ;
-    Boolean isPassword = ( m_windowStyle & wxTE_PASSWORD ) != 0 ;
-    m_valueTag = isPassword ? kControlEditTextPasswordCFStringTag : kControlEditTextCFStringTag ;
-
-    OSStatus err = CreateEditUnicodeTextControl(
-        MAC_WXHWND(wxPeer->MacGetTopLevelWindowRef()), &bounds , cfr ,
-        isPassword , NULL , &m_controlRef ) ;
-    verify_noerr( err );
+    
+    m_valueTag = kControlEditTextCFStringTag ;
+    CreateControl( wxPeer, &bounds, cfr );
 
     if ( !(m_windowStyle & wxTE_MULTILINE) )
         SetData<Boolean>( kControlEditTextPart , kControlEditTextSingleLineTag , true ) ;
@@ -1453,6 +1385,8 @@
     InstallControlEventHandler( m_controlRef , GetwxMacUnicodeTextControlEventHandlerUPP(),
                                 GetEventTypeCount(unicodeTextControlEventList), unicodeTextControlEventList, this,
                                 &m_focusHandlerRef);
+                                
+    return true;
 }
 
 wxMacUnicodeTextControl::~wxMacUnicodeTextControl()
@@ -1505,6 +1439,19 @@
     verify_noerr( SetData<CFStringRef>( 0, m_valueTag , cf ) ) ;
 }
 
+void wxMacUnicodeTextControl::CreateControl( wxTextCtrl* peer, const Rect* bounds, CFStringRef cfr )
+{
+    Boolean isPassword = ( m_windowStyle & wxTE_PASSWORD ) != 0 ;
+    if ( isPassword )
+    {
+        m_valueTag = kControlEditTextPasswordCFStringTag ;
+    }
+    OSStatus err = CreateEditUnicodeTextControl(
+        MAC_WXHWND(peer->MacGetTopLevelWindowRef()), bounds , cfr ,
+        isPassword , NULL , &m_controlRef ) ;
+    verify_noerr( err );
+}
+
 void wxMacUnicodeTextControl::Copy()
 {
     SendHICommand( kHICommandCopy ) ;
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/mac/carbon/window.cpp wxWidgets/src/mac/carbon/window.cpp
--- ..\..\wxWidgets/src/mac/carbon/window.cpp	2006-12-07 15:10:44.453000000 -0800
+++ wxWidgets/src/mac/carbon/window.cpp	2006-12-07 10:19:31.093375000 -0800
@@ -175,6 +175,11 @@
 
 //    { kEventClassControl , kEventControlInvalidateForSizeChange } , // 10.3 only
 //    { kEventClassControl , kEventControlBoundsChanged } ,
+
+#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+    { kEventClassSearchField, kEventSearchFieldCancelClicked } ,
+    { kEventClassSearchField, kEventSearchFieldSearchClicked } ,
+#endif
 } ;
 
 static pascal OSStatus wxMacWindowControlEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
@@ -645,6 +650,34 @@
     return result ;
 }
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+
+static pascal OSStatus wxMacWindowSearchFieldEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
+{
+    OSStatus result = eventNotHandledErr ;
+
+    wxMacCarbonEvent cEvent( event ) ;
+
+    ControlRef controlRef ;
+    wxWindowMac* thisWindow = (wxWindowMac*) data ;
+    wxTextCtrl* textCtrl = wxDynamicCast( thisWindow , wxTextCtrl ) ;
+    cEvent.GetParameter( kEventParamDirectObject , &controlRef ) ;
+
+    switch( GetEventKind( event ) )
+    {
+        case kEventSearchFieldCancelClicked :
+            thisWindow->MacSearchFieldCancelHit( handler , event ) ;
+            break ;
+        case kEventSearchFieldSearchClicked :
+            thisWindow->MacSearchFieldSearchHit( handler , event ) ;
+            break ;
+    }
+
+    return result ;
+}
+
+#endif // MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+
 pascal OSStatus wxMacWindowEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
 {
     EventRef formerEvent = (EventRef) wxTheApp->MacGetCurrentEvent() ;
@@ -666,6 +699,12 @@
             result = wxMacWindowServiceEventHandler( handler, event , data ) ;
             break ;
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+        case kEventClassSearchField :
+            result = wxMacWindowSearchFieldEventHandler( handler, event , data ) ;
+            break ;
+#endif // MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_2
+
         case kEventClassTextInput :
             result = wxMacUnicodeTextEventHandler( handler , event , data ) ;
             break ;
@@ -3332,6 +3371,16 @@
     return eventNotHandledErr ;
 }
 
+wxInt32 wxWindowMac::MacSearchFieldSearchHit(WXEVENTHANDLERREF WXUNUSED(handler) , WXEVENTREF WXUNUSED(event) )
+{
+    return eventNotHandledErr ;
+}
+
+wxInt32 wxWindowMac::MacSearchFieldCancelHit(WXEVENTHANDLERREF WXUNUSED(handler) , WXEVENTREF WXUNUSED(event) )
+{
+    return eventNotHandledErr ;
+}
+
 bool wxWindowMac::Reparent(wxWindowBase *newParentBase)
 {
     wxWindowMac *newParent = (wxWindowMac *)newParentBase;
diff -ruN -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' -x'*.vcproj' -x'*.sln' -x'*.vcproj' -x'*.vcproj*' -x'*.obj' -xBuildLog.htm -x'*.pch' -x'*.vcp' -x'*.vcw' -x'*.dsp' -x'*.dsw' -x'*.html' -x'*.con' -x '*.hhc' -x'manual.*' -x.bakefile_gen.state -xwxwin.pyc -x'*.ncb' -x'*.suo' -x'*.vssscc' -x'*.vsscc' -x'*.chm' -xsetup.h -x'*.pdb' -xrcdefs.h -x'*.idb' -x'*.lib' -xMSSCCPRJ.SCC -x'vc_msw*' -x'evc_*' -x'*.res' ..\..\wxWidgets/src/wxWindows.xcodeproj/project.pbxproj wxWidgets/src/wxWindows.xcodeproj/project.pbxproj
--- ..\..\wxWidgets/src/wxWindows.xcodeproj/project.pbxproj	2006-12-07 15:11:21.999875000 -0800
+++ wxWidgets/src/wxWindows.xcodeproj/project.pbxproj	2006-12-07 12:46:02.218625000 -0800
@@ -406,7 +406,6 @@
 		4086C859063AB2FF00D4CD53 /* pngwrite.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863DB01FA022D0175ACA7 /* pngwrite.c */; };
 		4086C85A063AB2FF00D4CD53 /* pngwio.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863DA01FA022D0175ACA7 /* pngwio.c */; };
 		4086C85B063AB2FF00D4CD53 /* pngtrans.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D901FA022D0175ACA7 /* pngtrans.c */; };
-		4086C85C063AB2FF00D4CD53 /* pngtest.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D801FA022D0175ACA7 /* pngtest.c */; };
 		4086C85D063AB2FF00D4CD53 /* pngset.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D701FA022D0175ACA7 /* pngset.c */; };
 		4086C85E063AB2FF00D4CD53 /* pngrutil.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D601FA022D0175ACA7 /* pngrutil.c */; };
 		4086C85F063AB2FF00D4CD53 /* pngrtran.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D501FA022D0175ACA7 /* pngrtran.c */; };
@@ -780,7 +779,6 @@
 		4086CB6C063AB30000D4CD53 /* pngwrite.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863DB01FA022D0175ACA7 /* pngwrite.c */; };
 		4086CB6D063AB30000D4CD53 /* pngwio.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863DA01FA022D0175ACA7 /* pngwio.c */; };
 		4086CB6E063AB30000D4CD53 /* pngtrans.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D901FA022D0175ACA7 /* pngtrans.c */; };
-		4086CB6F063AB30000D4CD53 /* pngtest.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D801FA022D0175ACA7 /* pngtest.c */; };
 		4086CB70063AB30000D4CD53 /* pngset.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D701FA022D0175ACA7 /* pngset.c */; };
 		4086CB71063AB30000D4CD53 /* pngrutil.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D601FA022D0175ACA7 /* pngrutil.c */; };
 		4086CB72063AB30000D4CD53 /* pngrtran.c in Sources */ = {isa = PBXBuildFile; fileRef = F5A863D501FA022D0175ACA7 /* pngrtran.c */; };
@@ -1112,6 +1110,15 @@
 		43DFF5BB09926F7B0033000B /* helpwnd.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 43DFF5B909926F7B0033000B /* helpwnd.cpp */; };
 		43DFF5BC09926F7B0033000B /* helpdlg.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 43DFF5B809926F7B0033000B /* helpdlg.cpp */; };
 		43DFF5BD09926F7B0033000B /* helpwnd.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 43DFF5B909926F7B0033000B /* helpwnd.cpp */; };
+		61048A650B2756CB009C253D /* srchctrl.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048A640B2756CB009C253D /* srchctrl.cpp */; };
+		61048A660B2756CB009C253D /* srchctrl.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048A640B2756CB009C253D /* srchctrl.cpp */; };
+		61048A740B277DE5009C253D /* mactext.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048A6E0B277DE5009C253D /* mactext.h */; };
+		61048A750B277DE5009C253D /* overlay.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048A6F0B277DE5009C253D /* overlay.h */; };
+		61048A760B277DE5009C253D /* print.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048A700B277DE5009C253D /* print.h */; };
+		61048AE20B278C9A009C253D /* srchctrl.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048AE10B278C9A009C253D /* srchctrl.h */; };
+		61048AE30B278C9A009C253D /* srchctrl.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048AE10B278C9A009C253D /* srchctrl.h */; };
+		61048BE90B27B7D0009C253D /* srchctlg.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048BE80B27B7D0009C253D /* srchctlg.cpp */; };
+		61048BEA0B27B7D0009C253D /* srchctlg.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048BE80B27B7D0009C253D /* srchctlg.cpp */; };
 /* End PBXBuildFile section */
 
 /* Begin PBXBuildRule section */
@@ -1125,23 +1132,6 @@
 		};
 /* End PBXBuildRule section */
 
-/* Begin PBXBuildStyle section */
-		402AB2150AFF45A400C0D0C9 /* Development */ = {
-			isa = PBXBuildStyle;
-			buildSettings = {
-				COPY_PHASE_STRIP = NO;
-			};
-			name = Development;
-		};
-		402AB2160AFF45A400C0D0C9 /* Deployment */ = {
-			isa = PBXBuildStyle;
-			buildSettings = {
-				COPY_PHASE_STRIP = YES;
-			};
-			name = Deployment;
-		};
-/* End PBXBuildStyle section */
-
 /* Begin PBXContainerItemProxy section */
 		4086D202063BC05E00D4CD53 /* PBXContainerItemProxy */ = {
 			isa = PBXContainerItemProxy;
@@ -1159,18 +1149,6 @@
 		};
 /* End PBXContainerItemProxy section */
 
-/* Begin PBXCopyFilesBuildPhase section */
-		409E9DD5065140690091DE7E /* CopyFiles */ = {
-			isa = PBXCopyFilesBuildPhase;
-			buildActionMask = 2147483647;
-			dstPath = "";
-			dstSubfolderSpec = 7;
-			files = (
-			);
-			runOnlyForDeploymentPostprocessing = 0;
-		};
-/* End PBXCopyFilesBuildPhase section */
-
 /* Begin PBXFileReference section */
 		08FB77AAFE841565C02AAC07 /* Carbon.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Carbon.framework; path = /System/Library/Frameworks/Carbon.framework; sourceTree = "<absolute>"; };
 		0A98CB6A07146A06007B4289 /* statbar.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = statbar.cpp; sourceTree = "<group>"; };
@@ -1352,6 +1330,12 @@
 		43DFF59C09926B080033000B /* helpwnd.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; path = helpwnd.h; sourceTree = "<group>"; };
 		43DFF5B809926F7B0033000B /* helpdlg.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = helpdlg.cpp; sourceTree = "<group>"; };
 		43DFF5B909926F7B0033000B /* helpwnd.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = helpwnd.cpp; sourceTree = "<group>"; };
+		61048A640B2756CB009C253D /* srchctrl.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = srchctrl.cpp; sourceTree = "<group>"; };
+		61048A6E0B277DE5009C253D /* mactext.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; name = mactext.h; path = private/mactext.h; sourceTree = "<group>"; };
+		61048A6F0B277DE5009C253D /* overlay.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; name = overlay.h; path = private/overlay.h; sourceTree = "<group>"; };
+		61048A700B277DE5009C253D /* print.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; name = print.h; path = private/print.h; sourceTree = "<group>"; };
+		61048AE10B278C9A009C253D /* srchctrl.h */ = {isa = PBXFileReference; fileEncoding = 30; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = srchctrl.h; sourceTree = "<group>"; tabWidth = 4; usesTabs = 0; };
+		61048BE80B27B7D0009C253D /* srchctlg.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = srchctlg.cpp; sourceTree = "<group>"; };
 		CA0CB57B0450773900000102 /* accesscmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = accesscmn.cpp; sourceTree = "<group>"; };
 		CA0CB57C0450773900000102 /* datacmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = datacmn.cpp; sourceTree = "<group>"; };
 		CA0CB57D0450773900000102 /* dpycmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = dpycmn.cpp; sourceTree = "<group>"; };
@@ -2017,7 +2001,7 @@
 		F5A861FB01FA022C0175ACA7 /* statlmac.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = statlmac.cpp; sourceTree = "<group>"; };
 		F5A861FC01FA022C0175ACA7 /* stattext.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = stattext.cpp; sourceTree = "<group>"; };
 		F5A861FD01FA022C0175ACA7 /* tabctrl.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = tabctrl.cpp; sourceTree = "<group>"; };
-		F5A861FF01FA022C0175ACA7 /* textctrl.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = textctrl.cpp; sourceTree = "<group>"; };
+		F5A861FF01FA022C0175ACA7 /* textctrl.cpp */ = {isa = PBXFileReference; fileEncoding = 30; indentWidth = 4; lastKnownFileType = sourcecode.cpp.cpp; path = textctrl.cpp; sourceTree = "<group>"; tabWidth = 4; usesTabs = 0; };
 		F5A8620101FA022C0175ACA7 /* timer.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = timer.cpp; sourceTree = "<group>"; };
 		F5A8620201FA022C0175ACA7 /* toolbar.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = toolbar.cpp; sourceTree = "<group>"; };
 		F5A8620301FA022C0175ACA7 /* tooltip.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = tooltip.cpp; sourceTree = "<group>"; };
@@ -2036,7 +2020,6 @@
 		F5A863D501FA022D0175ACA7 /* pngrtran.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngrtran.c; sourceTree = "<group>"; };
 		F5A863D601FA022D0175ACA7 /* pngrutil.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngrutil.c; sourceTree = "<group>"; };
 		F5A863D701FA022D0175ACA7 /* pngset.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngset.c; sourceTree = "<group>"; };
-		F5A863D801FA022D0175ACA7 /* pngtest.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngtest.c; sourceTree = "<group>"; };
 		F5A863D901FA022D0175ACA7 /* pngtrans.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngtrans.c; sourceTree = "<group>"; };
 		F5A863DA01FA022D0175ACA7 /* pngwio.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngwio.c; sourceTree = "<group>"; };
 		F5A863DB01FA022D0175ACA7 /* pngwrite.c */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.c; path = pngwrite.c; sourceTree = "<group>"; };
@@ -2287,6 +2270,16 @@
 			path = richtext;
 			sourceTree = "<group>";
 		};
+		61048A6D0B277DC2009C253D /* private */ = {
+			isa = PBXGroup;
+			children = (
+				61048A6E0B277DE5009C253D /* mactext.h */,
+				61048A6F0B277DE5009C253D /* overlay.h */,
+				61048A700B277DE5009C253D /* print.h */,
+			);
+			name = private;
+			sourceTree = "<group>";
+		};
 		CADEF54203C8C0A800000133 /* morefilex */ = {
 			isa = PBXGroup;
 			children = (
@@ -2483,6 +2476,7 @@
 				F5A85F2801FA022B0175ACA7 /* spinctrl.h */,
 				F5A85F2901FA022B0175ACA7 /* splash.h */,
 				F5A85F2A01FA022B0175ACA7 /* splitter.h */,
+				61048AE10B278C9A009C253D /* srchctrl.h */,
 				F5A85F2B01FA022B0175ACA7 /* stack.h */,
 				F5A85F2C01FA022B0175ACA7 /* statbmp.h */,
 				F5A85F2D01FA022B0175ACA7 /* statbox.h */,
@@ -2611,6 +2605,7 @@
 		F5A85D3B01FA022B0175ACA7 /* mac/carbon */ = {
 			isa = PBXGroup;
 			children = (
+				61048A6D0B277DC2009C253D /* private */,
 				F5A85D3C01FA022B0175ACA7 /* accel.h */,
 				F5A85D3D01FA022B0175ACA7 /* aga.h */,
 				F5A85D3E01FA022B0175ACA7 /* app.h */,
@@ -2972,6 +2967,7 @@
 				CA60176D04D43CAA00000080 /* selstore.cpp */,
 				F5A8609701FA022C0175ACA7 /* splash.cpp */,
 				F5A8609801FA022C0175ACA7 /* splitter.cpp */,
+				61048BE80B27B7D0009C253D /* srchctlg.cpp */,
 				F5A8609A01FA022C0175ACA7 /* statusbr.cpp */,
 				F5A8609B01FA022C0175ACA7 /* tabg.cpp */,
 				F5A8609D01FA022C0175ACA7 /* textdlgg.cpp */,
@@ -3148,6 +3144,7 @@
 				4086C3A2063A454900D4CD53 /* sound.cpp */,
 				F5A861F501FA022C0175ACA7 /* spinbutt.cpp */,
 				407A90F6065742ED00F01665 /* spinctrl.cpp */,
+				61048A640B2756CB009C253D /* srchctrl.cpp */,
 				F5A861F701FA022C0175ACA7 /* statbmp.cpp */,
 				F5A861F801FA022C0175ACA7 /* statbox.cpp */,
 				F5A861F901FA022C0175ACA7 /* statbrma.cpp */,
@@ -3199,7 +3196,6 @@
 				F5A863D501FA022D0175ACA7 /* pngrtran.c */,
 				F5A863D601FA022D0175ACA7 /* pngrutil.c */,
 				F5A863D701FA022D0175ACA7 /* pngset.c */,
-				F5A863D801FA022D0175ACA7 /* pngtest.c */,
 				F5A863D901FA022D0175ACA7 /* pngtrans.c */,
 				F5A863DA01FA022D0175ACA7 /* pngwio.c */,
 				F5A863DB01FA022D0175ACA7 /* pngwrite.c */,
@@ -3275,6 +3271,7 @@
 				40011F3D0897D8DF00E4DE95 /* setup0.h in Headers */,
 				43DFF59D09926B080033000B /* helpdlg.h in Headers */,
 				43DFF59E09926B080033000B /* helpwnd.h in Headers */,
+				61048AE20B278C9A009C253D /* srchctrl.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3286,6 +3283,10 @@
 				40011F3C0897D8DF00E4DE95 /* setup0.h in Headers */,
 				43DFF59F09926B080033000B /* helpdlg.h in Headers */,
 				43DFF5A009926B080033000B /* helpwnd.h in Headers */,
+				61048A740B277DE5009C253D /* mactext.h in Headers */,
+				61048A750B277DE5009C253D /* overlay.h in Headers */,
+				61048A760B277DE5009C253D /* print.h in Headers */,
+				61048AE30B278C9A009C253D /* srchctrl.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3296,8 +3297,6 @@
 			isa = PBXNativeTarget;
 			buildConfigurationList = 18B5B98A08564B5D002803C9 /* Build configuration list for PBXNativeTarget "static" */;
 			buildPhases = (
-				4086C743063AB2FF00D4CD53 /* ShellScript */,
-				409E9DD5065140690091DE7E /* CopyFiles */,
 				4086C744063AB2FF00D4CD53 /* Headers */,
 				4086C746063AB2FF00D4CD53 /* Sources */,
 				4086C8C8063AB2FF00D4CD53 /* Frameworks */,
@@ -3338,12 +3337,6 @@
 		0867D690FE84028FC02AAC07 /* Project object */ = {
 			isa = PBXProject;
 			buildConfigurationList = 18B5B99E08564B5D002803C9 /* Build configuration list for PBXProject "wxWindows" */;
-			buildSettings = {
-			};
-			buildStyles = (
-				402AB2150AFF45A400C0D0C9 /* Development */,
-				402AB2160AFF45A400C0D0C9 /* Deployment */,
-			);
 			hasScannedForEncodings = 1;
 			mainGroup = 0867D691FE84028FC02AAC07 /* wxWindows */;
 			productRefGroup = 034768DDFF38A45A11DB9C8B /* Products */;
@@ -3374,15 +3367,6 @@
 /* End PBXRezBuildPhase section */
 
 /* Begin PBXShellScriptBuildPhase section */
-		4086C743063AB2FF00D4CD53 /* ShellScript */ = {
-			isa = PBXShellScriptBuildPhase;
-			buildActionMask = 2147483647;
-			files = (
-			);
-			runOnlyForDeploymentPostprocessing = 0;
-			shellPath = /bin/sh;
-			shellScript = "$SRCROOT/../distrib/mac/pbsetup-sh \"${SRCROOT}\" \"${SYMROOT}\"";
-		};
 		4086CA56063AB30000D4CD53 /* ShellScript */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
@@ -3668,7 +3652,6 @@
 				4086C859063AB2FF00D4CD53 /* pngwrite.c in Sources */,
 				4086C85A063AB2FF00D4CD53 /* pngwio.c in Sources */,
 				4086C85B063AB2FF00D4CD53 /* pngtrans.c in Sources */,
-				4086C85C063AB2FF00D4CD53 /* pngtest.c in Sources */,
 				4086C85D063AB2FF00D4CD53 /* pngset.c in Sources */,
 				4086C85E063AB2FF00D4CD53 /* pngrutil.c in Sources */,
 				4086C85F063AB2FF00D4CD53 /* pngrtran.c in Sources */,
@@ -3933,6 +3916,8 @@
 				402AB2810AFF567600C0D0C9 /* xh_collpane.cpp in Sources */,
 				402AB2820AFF567600C0D0C9 /* xh_htmllbox.cpp in Sources */,
 				402AB42C0AFF574600C0D0C9 /* imagtga.cpp in Sources */,
+				61048A650B2756CB009C253D /* srchctrl.cpp in Sources */,
+				61048BE90B27B7D0009C253D /* srchctlg.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -4209,7 +4194,6 @@
 				4086CB6C063AB30000D4CD53 /* pngwrite.c in Sources */,
 				4086CB6D063AB30000D4CD53 /* pngwio.c in Sources */,
 				4086CB6E063AB30000D4CD53 /* pngtrans.c in Sources */,
-				4086CB6F063AB30000D4CD53 /* pngtest.c in Sources */,
 				4086CB70063AB30000D4CD53 /* pngset.c in Sources */,
 				4086CB71063AB30000D4CD53 /* pngrutil.c in Sources */,
 				4086CB72063AB30000D4CD53 /* pngrtran.c in Sources */,
@@ -4474,6 +4458,8 @@
 				402AB27E0AFF567600C0D0C9 /* xh_collpane.cpp in Sources */,
 				402AB27F0AFF567600C0D0C9 /* xh_htmllbox.cpp in Sources */,
 				402AB42B0AFF574600C0D0C9 /* imagtga.cpp in Sources */,
+				61048A660B2756CB009C253D /* srchctrl.cpp in Sources */,
+				61048BEA0B27B7D0009C253D /* srchctlg.cpp in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};

 	  	 

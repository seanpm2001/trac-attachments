 include/wx/generic/private/dataview.h | 118 ++++++++++++++++++++
 include/wx/generic/private/listctrl.h |   3 +
 samples/listctrl/listtest.cpp         |  20 ++--
 src/generic/datavgen.cpp              | 196 +++++++++++-----------------------
 src/generic/listctrl.cpp              | 124 +++++++++++++--------
 5 files changed, 271 insertions(+), 190 deletions(-)

diff --git a/include/wx/generic/private/dataview.h b/include/wx/generic/private/dataview.h
new file mode 100644
index 0000000..c5c08a1
--- /dev/null
+++ b/include/wx/generic/private/dataview.h
@@ -0,0 +1,118 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/private/dataview.h
+// Purpose:     private definitions of wxDataViewCtrl/wxListCtrl helpers
+// Author:      
+// Copyright:   
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GENERIC_DATAVIEW_PRIVATE_H_
+#define _WX_GENERIC_DATAVIEW_PRIVATE_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_LISTCTRL
+
+#include "wx/timer.h"
+
+// ============================================================================
+// private classes
+// ============================================================================
+
+//-----------------------------------------------------------------------------
+//  wxMaxWidthCalculatorBase (internal)
+//-----------------------------------------------------------------------------
+
+class wxMaxWidthCalculatorBase
+{
+public:
+    // column of which calculate the width
+    wxMaxWidthCalculatorBase(size_t column)
+        : m_column(column)
+        , m_width(0)
+    {}
+
+    void UpdateWithWidth(int width)
+    {
+        m_width = wxMax(m_width, width);
+    }
+
+    // Update the max with for the expected row
+    virtual void UpdateWithRow(int row) = 0;
+
+    int GetMaxWidth() const { return m_width; }
+    size_t GetColumn() const { return m_column; }
+    
+    void ComputeBestColumnWidth(size_t count, size_t first_visible, size_t last_visible)
+    {
+        // The code below deserves some explanation. For very large controls, we
+        // simply can't afford to calculate sizes for all items, it takes too
+        // long. So the best we can do is to check the first and the last N/2
+        // items in the control for some sufficiently large N and calculate best
+        // sizes from that. That can result in the calculated best width being too
+        // small for some outliers, but it's better to get slightly imperfect
+        // result than to wait several seconds after every update. To avoid highly
+        // visible miscalculations, we also include all currently visible items
+        // no matter what.  Finally, the value of N is determined dynamically by
+        // measuring how much time we spent on the determining item widths so far.
+
+#if wxUSE_STOPWATCH
+        size_t top_part_end = count;
+        static const long CALC_TIMEOUT = 20/*ms*/;
+        // don't call wxStopWatch::Time() too often
+        static const unsigned CALC_CHECK_FREQ = 100;
+        wxStopWatch timer;
+#else
+        // use some hard-coded limit, that's the best we can do without timer
+        size_t top_part_end = wxMin(500, count);
+#endif // wxUSE_STOPWATCH/!wxUSE_STOPWATCH
+
+        size_t row = 0;
+
+        for ( row = 0; row < top_part_end; row++ )
+        {
+#if wxUSE_STOPWATCH
+            if ( row % CALC_CHECK_FREQ == CALC_CHECK_FREQ-1 &&
+                 timer.Time() > CALC_TIMEOUT )
+                break;
+#endif // wxUSE_STOPWATCH
+            UpdateWithRow(row);
+        }
+
+        // row is the first unmeasured item now; that's our value of N/2
+        if ( row < count )
+        {
+            top_part_end = row;
+
+            // add bottom N/2 items now:
+            const size_t bottom_part_start = wxMax(row, count - row);
+            for ( row = bottom_part_start; row < count; row++ )
+            {
+                UpdateWithRow(row);
+            }
+
+            // finally, include currently visible items in the calculation:
+            first_visible = wxMax(first_visible, top_part_end);
+            last_visible = wxMin(bottom_part_start, last_visible);
+
+            for ( row = first_visible; row < last_visible; row++ )
+            {
+                UpdateWithRow(row);
+            }
+
+            wxLogTrace("items container",
+                       "determined best size from %d top, %d bottom plus %d more visible items out of %d total",
+                       top_part_end,
+                       count - bottom_part_start,
+                       wxMax(0, last_visible - first_visible),
+                       count);
+        }
+    }
+
+private:
+    size_t m_column;
+    int m_width;
+};
+
+#endif // wxUSE_LISTCTRL
+#endif // _WX_GENERIC_DATAVIEW_PRIVATE_H_
diff --git a/include/wx/generic/private/listctrl.h b/include/wx/generic/private/listctrl.h
index 5cd210f..639f32b 100644
--- a/include/wx/generic/private/listctrl.h
+++ b/include/wx/generic/private/listctrl.h
@@ -465,6 +465,8 @@ private:
 //  wxListMainWindow (internal)
 //-----------------------------------------------------------------------------
 
+class wxListCtrlMaxWidthCalculator;
+
 WX_DECLARE_LIST(wxListHeaderData, wxListHeaderDataList);
 
 class wxListMainWindow : public wxWindow
@@ -863,6 +865,7 @@ private:
     DECLARE_EVENT_TABLE()
 
     friend class wxGenericListCtrl;
+    friend class wxListCtrlMaxWidthCalculator;
 };
 
 #endif // wxUSE_LISTCTRL
diff --git a/samples/listctrl/listtest.cpp b/samples/listctrl/listtest.cpp
index 26e1a3f..ef9ee66 100644
--- a/samples/listctrl/listtest.cpp
+++ b/samples/listctrl/listtest.cpp
@@ -519,11 +519,11 @@ void MyFrame::InitWithReportItems()
     itemCol.SetImage(-1);
     m_listCtrl->InsertColumn(0, itemCol);
 
-    itemCol.SetText(wxT("Column 2"));
+    itemCol.SetText(wxT("Column 2 (auto size excluding header)"));
     itemCol.SetAlign(wxLIST_FORMAT_CENTRE);
     m_listCtrl->InsertColumn(1, itemCol);
 
-    itemCol.SetText(wxT("Column 3"));
+    itemCol.SetText(wxT("Column 3 (auto size including header)"));
     itemCol.SetAlign(wxLIST_FORMAT_RIGHT);
     m_listCtrl->InsertColumn(2, itemCol);
 
@@ -558,10 +558,6 @@ void MyFrame::InitWithReportItems()
 
     m_listCtrl->SetTextColour(*wxBLUE);
 
-    m_listCtrl->SetColumnWidth( 0, wxLIST_AUTOSIZE );
-    m_listCtrl->SetColumnWidth( 1, wxLIST_AUTOSIZE );
-    m_listCtrl->SetColumnWidth( 2, wxLIST_AUTOSIZE );
-
     // Set images in columns
     m_listCtrl->SetItemColumnImage(1, 1, 0);
 
@@ -573,6 +569,10 @@ void MyFrame::InitWithReportItems()
 
     // test SetItemFont too
     m_listCtrl->SetItemFont(0, *wxITALIC_FONT);
+
+    m_listCtrl->SetColumnWidth( 0, wxLIST_AUTOSIZE );
+    m_listCtrl->SetColumnWidth( 1, wxLIST_AUTOSIZE );
+    m_listCtrl->SetColumnWidth( 2, wxLIST_AUTOSIZE_USEHEADER );
 }
 
 void MyFrame::InitWithIconItems(bool withText, bool sameIcon)
@@ -671,11 +671,11 @@ void MyFrame::InitWithVirtualItems()
     }
     else
     {
-        m_listCtrl->AppendColumn(wxT("First Column"));
-        m_listCtrl->AppendColumn(wxT("Second Column"));
-        m_listCtrl->SetColumnWidth(0, 150);
-        m_listCtrl->SetColumnWidth(1, 150);
+        m_listCtrl->AppendColumn(wxT("First Column (size auto)"));
+        m_listCtrl->AppendColumn(wxT("Second Column (150px)"));
         m_listCtrl->SetItemCount(1000000);
+        m_listCtrl->SetColumnWidth(0, wxLIST_AUTOSIZE_USEHEADER);
+        m_listCtrl->SetColumnWidth(1, 150);
     }
 }
 
diff --git a/src/generic/datavgen.cpp b/src/generic/datavgen.cpp
index 092f265..757eca8 100644
--- a/src/generic/datavgen.cpp
+++ b/src/generic/datavgen.cpp
@@ -49,6 +49,7 @@
 #include "wx/selstore.h"
 #include "wx/stopwatch.h"
 #include "wx/weakref.h"
+#include "wx/generic/private/dataview.h"
 
 //-----------------------------------------------------------------------------
 // classes
@@ -4882,156 +4883,83 @@ int wxDataViewCtrl::GetModelColumnIndex( unsigned int model_column ) const
     return wxNOT_FOUND;
 }
 
-unsigned int wxDataViewCtrl::GetBestColumnWidth(int idx) const
+class wxDataViewMaxWidthCalculator : public wxMaxWidthCalculatorBase
 {
-    if ( m_colsBestWidths[idx].width != 0 )
-        return m_colsBestWidths[idx].width;
-
-    const int count = m_clientArea->GetRowCount();
-    wxDataViewColumn *column = GetColumn(idx);
-    wxDataViewRenderer *renderer =
-        const_cast<wxDataViewRenderer*>(column->GetRenderer());
-
-    class MaxWidthCalculator
-    {
-    public:
-        MaxWidthCalculator(const wxDataViewCtrl *dvc,
-                           wxDataViewMainWindow *clientArea,
-                           wxDataViewRenderer *renderer,
-                           const wxDataViewModel *model,
-                           unsigned int model_column,
-                           int expanderSize)
-            : m_width(0),
-              m_dvc(dvc),
-              m_clientArea(clientArea),
-              m_renderer(renderer),
-              m_model(model),
-              m_model_column(model_column),
-              m_expanderSize(expanderSize)
-
+public:
+    wxDataViewMaxWidthCalculator(const wxDataViewCtrl *dvc,
+                       wxDataViewMainWindow *clientArea,
+                       wxDataViewRenderer *renderer,
+                       const wxDataViewModel *model,
+                       size_t model_column,
+                       int expanderSize)
+        : wxMaxWidthCalculatorBase(model_column)
+        , m_dvc(dvc)
+        , m_clientArea(clientArea)
+        , m_renderer(renderer)
+        , m_model(model)
+        , m_expanderSize(expanderSize)
+    {
+        int index = dvc->GetModelColumnIndex( model_column );
+        wxDataViewColumn* column = index == wxNOT_FOUND ? NULL : dvc->GetColumn(index);
+        m_isExpanderCol =
+            !clientArea->IsList() &&
+            (column == 0 ||
+             GetExpanderColumnOrFirstOne(const_cast<wxDataViewCtrl*>(dvc)) == column );
+    }
+
+    virtual void UpdateWithRow(int row)
+    {
+        int indent = 0;
+        wxDataViewItem item;
+
+        if ( m_isExpanderCol )
         {
-            int index = dvc->GetModelColumnIndex( model_column );
-            wxDataViewColumn* column = index == wxNOT_FOUND ? NULL : dvc->GetColumn(index);
-            m_isExpanderCol =
-                !clientArea->IsList() &&
-                (column == 0 ||
-                 GetExpanderColumnOrFirstOne(const_cast<wxDataViewCtrl*>(dvc)) == column );
+            wxDataViewTreeNode *node = m_clientArea->GetTreeNodeByRow(row);
+            item = node->GetItem();
+            indent = m_dvc->GetIndent() * node->GetIndentLevel() + m_expanderSize;
         }
-
-        void UpdateWithWidth(int width)
+        else
         {
-            m_width = wxMax(m_width, width);
+            item = m_clientArea->GetItemByRow(row);
         }
 
-        void UpdateWithRow(int row)
-        {
-            int indent = 0;
-            wxDataViewItem item;
+        m_renderer->PrepareForItem(m_model, item, GetColumn());
+        UpdateWithWidth(m_renderer->GetSize().x + indent);
+    }
 
-            if ( m_isExpanderCol )
-            {
-                wxDataViewTreeNode *node = m_clientArea->GetTreeNodeByRow(row);
-                item = node->GetItem();
-                indent = m_dvc->GetIndent() * node->GetIndentLevel() + m_expanderSize;
-            }
-            else
-            {
-                item = m_clientArea->GetItemByRow(row);
-            }
+private:
+    const wxDataViewCtrl *m_dvc;
+    wxDataViewMainWindow *m_clientArea;
+    wxDataViewRenderer *m_renderer;
+    const wxDataViewModel *m_model;
+    bool m_isExpanderCol;
+    int m_expanderSize;
+};
 
-            m_renderer->PrepareForItem(m_model, item, m_model_column);
-            m_width = wxMax(m_width, m_renderer->GetSize().x + indent);
-        }
 
-        int GetMaxWidth() const { return m_width; }
-
-    private:
-        int m_width;
-        const wxDataViewCtrl *m_dvc;
-        wxDataViewMainWindow *m_clientArea;
-        wxDataViewRenderer *m_renderer;
-        const wxDataViewModel *m_model;
-        unsigned m_model_column;
-        bool m_isExpanderCol;
-        int m_expanderSize;
-    };
+unsigned int wxDataViewCtrl::GetBestColumnWidth(int idx) const
+{
+    if ( m_colsBestWidths[idx].width != 0 )
+        return m_colsBestWidths[idx].width;
+
+    const int count = m_clientArea->GetRowCount();
+    wxDataViewColumn *column = GetColumn(idx);
+    wxDataViewRenderer *renderer =
+        const_cast<wxDataViewRenderer*>(column->GetRenderer());
 
-    MaxWidthCalculator calculator(this, m_clientArea, renderer,
-                                  GetModel(), column->GetModelColumn(),
-                                  m_clientArea->GetRowHeight());
+    wxDataViewMaxWidthCalculator calculator(this, m_clientArea, renderer,
+                                            GetModel(), column->GetModelColumn(),
+                                            m_clientArea->GetRowHeight());
 
     calculator.UpdateWithWidth(column->GetMinWidth());
 
     if ( m_headerArea )
         calculator.UpdateWithWidth(m_headerArea->GetColumnTitleWidth(*column));
 
-    // The code below deserves some explanation. For very large controls, we
-    // simply can't afford to calculate sizes for all items, it takes too
-    // long. So the best we can do is to check the first and the last N/2
-    // items in the control for some sufficiently large N and calculate best
-    // sizes from that. That can result in the calculated best width being too
-    // small for some outliers, but it's better to get slightly imperfect
-    // result than to wait several seconds after every update. To avoid highly
-    // visible miscalculations, we also include all currently visible items
-    // no matter what.  Finally, the value of N is determined dynamically by
-    // measuring how much time we spent on the determining item widths so far.
-
-#if wxUSE_STOPWATCH
-    int top_part_end = count;
-    static const long CALC_TIMEOUT = 20/*ms*/;
-    // don't call wxStopWatch::Time() too often
-    static const unsigned CALC_CHECK_FREQ = 100;
-    wxStopWatch timer;
-#else
-    // use some hard-coded limit, that's the best we can do without timer
-    int top_part_end = wxMin(500, count);
-#endif // wxUSE_STOPWATCH/!wxUSE_STOPWATCH
-
-    int row = 0;
-
-    for ( row = 0; row < top_part_end; row++ )
-    {
-#if wxUSE_STOPWATCH
-        if ( row % CALC_CHECK_FREQ == CALC_CHECK_FREQ-1 &&
-             timer.Time() > CALC_TIMEOUT )
-            break;
-#endif // wxUSE_STOPWATCH
-        calculator.UpdateWithRow(row);
-    }
-
-    // row is the first unmeasured item now; that's our value of N/2
-
-    if ( row < count )
-    {
-        top_part_end = row;
-
-        // add bottom N/2 items now:
-        const int bottom_part_start = wxMax(row, count - row);
-        for ( row = bottom_part_start; row < count; row++ )
-        {
-            calculator.UpdateWithRow(row);
-        }
-
-        // finally, include currently visible items in the calculation:
-        const wxPoint origin = CalcUnscrolledPosition(wxPoint(0, 0));
-        int first_visible = m_clientArea->GetLineAt(origin.y);
-        int last_visible = m_clientArea->GetLineAt(origin.y + GetClientSize().y);
-
-        first_visible = wxMax(first_visible, top_part_end);
-        last_visible = wxMin(bottom_part_start, last_visible);
-
-        for ( row = first_visible; row < last_visible; row++ )
-        {
-            calculator.UpdateWithRow(row);
-        }
-
-        wxLogTrace("dataview",
-                   "determined best size from %d top, %d bottom plus %d more visible items out of %d total",
-                   top_part_end,
-                   count - bottom_part_start,
-                   wxMax(0, last_visible - first_visible),
-                   count);
-    }
+    const wxPoint origin = CalcUnscrolledPosition(wxPoint(0, 0));
+    calculator.ComputeBestColumnWidth(count,
+                                      m_clientArea->GetLineAt(origin.y),
+                                      m_clientArea->GetLineAt(origin.y + GetClientSize().y));
 
     int max_width = calculator.GetMaxWidth();
     if ( max_width > 0 )
diff --git a/src/generic/listctrl.cpp b/src/generic/listctrl.cpp
index 2920a9b..7cc782c 100644
--- a/src/generic/listctrl.cpp
+++ b/src/generic/listctrl.cpp
@@ -39,6 +39,7 @@
 #include "wx/imaglist.h"
 #include "wx/renderer.h"
 #include "wx/generic/private/listctrl.h"
+#include "wx/generic/private/dataview.h"
 
 #ifdef __WXMAC__
     #include "wx/osx/private.h"
@@ -3194,6 +3195,34 @@ void wxListMainWindow::SetColumn( int col, const wxListItem &item )
     m_headerWidth = 0;
 }
 
+class wxListCtrlMaxWidthCalculator : public wxMaxWidthCalculatorBase
+{
+public:
+    wxListCtrlMaxWidthCalculator(wxListMainWindow *listmain, unsigned int column)
+        : wxMaxWidthCalculatorBase(column)
+        , m_listmain(listmain)
+    {}
+
+    virtual void UpdateWithRow(int row)
+    {
+        wxListLineData *line = m_listmain->GetLine( row );
+        wxListItemDataList::compatibility_iterator n = line->m_items.Item( GetColumn() );
+
+        wxCHECK_RET( n, wxT("no subitem?") );
+
+        wxListItemData *itemData = n->GetData();
+        wxListItem      item;
+
+        itemData->GetItem(item);
+        
+        UpdateWithWidth(m_listmain->GetItemWidthWithImage(&item));
+    }
+
+private:
+    wxListMainWindow *m_listmain;
+};
+
+
 void wxListMainWindow::SetColumnWidth( int col, int width )
 {
     wxCHECK_RET( col >= 0 && col < GetColumnCount(),
@@ -3214,49 +3243,43 @@ void wxListMainWindow::SetColumnWidth( int col, int width )
     wxListHeaderData *column = node->GetData();
 
     size_t count = GetItemCount();
-
-    if (width == wxLIST_AUTOSIZE_USEHEADER)
+    
+    if ( (width == wxLIST_AUTOSIZE_USEHEADER) || (width == wxLIST_AUTOSIZE) )
     {
-        width = ComputeMinHeaderWidth(column);
-    }
-    else if ( width == wxLIST_AUTOSIZE )
-    {
-        width = ComputeMinHeaderWidth(column);
-
-        if ( !IsVirtual() )
-        {
-            wxClientDC dc(this);
-            dc.SetFont( GetFont() );
-
-            int max = AUTOSIZE_COL_MARGIN;
-
-            //  if the cached column width isn't valid then recalculate it
-            if (m_aColWidths.Item(col)->bNeedsUpdate)
-            {
-                for (size_t i = 0; i < count; i++)
-                {
-                    wxListLineData *line = GetLine( i );
-                    wxListItemDataList::compatibility_iterator n = line->m_items.Item( col );
-
-                    wxCHECK_RET( n, wxT("no subitem?") );
+        wxListCtrlMaxWidthCalculator calculator(this, col);
+        
+        calculator.UpdateWithWidth(AUTOSIZE_COL_MARGIN);
 
-                    wxListItemData *itemData = n->GetData();
-                    wxListItem      item;
+        if (width == wxLIST_AUTOSIZE_USEHEADER)
+            calculator.UpdateWithWidth(ComputeMinHeaderWidth(column));
 
-                    itemData->GetItem(item);
-                    int itemWidth = GetItemWidthWithImage(&item);
-                    if (itemWidth > max)
-                        max = itemWidth;
-                }
-
-                m_aColWidths.Item(col)->bNeedsUpdate = false;
-                m_aColWidths.Item(col)->nMaxWidth = max;
-            }
+        //  if the cached column width isn't valid then recalculate it
+        wxColWidthInfo *pWidthInfo = m_aColWidths.Item(col);
+        if (pWidthInfo->bNeedsUpdate)
+        {
+            size_t first_visible, last_visible;
+            GetVisibleLinesRange(&first_visible, &last_visible);
 
-            max = m_aColWidths.Item(col)->nMaxWidth + AUTOSIZE_COL_MARGIN;
-            if ( width < max )
-                width = max;
+            calculator.ComputeBestColumnWidth(count, first_visible, last_visible);
+            pWidthInfo->nMaxWidth = calculator.GetMaxWidth();
+            pWidthInfo->bNeedsUpdate = false;
         }
+        else
+        {
+            calculator.UpdateWithWidth(pWidthInfo->nMaxWidth);
+        }
+        
+        // expand the last column to fit the client size
+        // only for AUTOSIZE_USEHEADER to mimic MSW behaviour
+        int margin = 0;
+        if ( (width == wxLIST_AUTOSIZE_USEHEADER) && (col == GetColumnCount()-1) )
+        {
+            margin = GetClientSize().GetX();
+            for (int i = 0; i < col && margin > 0; ++i)
+                margin -= m_columns.Item(i)->GetData()->GetWidth();
+        }
+
+        width = wxMax(margin, calculator.GetMaxWidth() + AUTOSIZE_COL_MARGIN);
     }
 
     column->SetWidth( width );
@@ -3323,8 +3346,12 @@ void wxListMainWindow::SetItem( wxListItem &item )
             //  update the Max Width Cache if needed
             int width = GetItemWidthWithImage(&item);
 
-            if (width > m_aColWidths.Item(item.m_col)->nMaxWidth)
-                m_aColWidths.Item(item.m_col)->nMaxWidth = width;
+            wxColWidthInfo *pWidthInfo = m_aColWidths.Item(item.m_col);
+            if (width > pWidthInfo->nMaxWidth)
+            {
+                pWidthInfo->nMaxWidth = width;
+                pWidthInfo->bNeedsUpdate = true;
+            }
         }
     }
 
@@ -3544,7 +3571,7 @@ int wxListMainWindow::GetSelectedItemCount() const
     if ( IsSingleSel() )
         return HasCurrent() ? IsHighlighted(m_current) : false;
 
-    // virtual controls remmebers all its selections itself
+    // virtual controls remembers all its selections itself
     if ( IsVirtual() )
         return m_selStore.GetSelectedCount();
 
@@ -3967,8 +3994,9 @@ void wxListMainWindow::DeleteItem( long lindex )
 
             itemWidth = GetItemWidthWithImage(&item);
 
-            if (itemWidth >= m_aColWidths.Item(i)->nMaxWidth)
-                m_aColWidths.Item(i)->bNeedsUpdate = true;
+            wxColWidthInfo *pWidthInfo = m_aColWidths.Item(i);
+            if (itemWidth >= pWidthInfo->nMaxWidth)
+                pWidthInfo->bNeedsUpdate = true;
         }
 
         ResetVisibleLinesRange();
@@ -4233,7 +4261,10 @@ void wxListMainWindow::InsertItem( wxListItem &item )
         int width = GetItemWidthWithImage(&item);
         item.SetWidth(width);
         if (width > pWidthInfo->nMaxWidth)
+        {
             pWidthInfo->nMaxWidth = width;
+            pWidthInfo->bNeedsUpdate = true;
+        }
     }
 
     wxListLineData *line = new wxListLineData(this);
@@ -4279,7 +4310,7 @@ long wxListMainWindow::InsertColumn( long col, const wxListItem &item )
         if (item.m_width == wxLIST_AUTOSIZE_USEHEADER)
             column->SetWidth(ComputeMinHeaderWidth(column));
 
-        wxColWidthInfo *colWidthInfo = new wxColWidthInfo();
+        wxColWidthInfo *colWidthInfo = new wxColWidthInfo(0, IsVirtual());
 
         bool insert = (col >= 0) && ((size_t)col < m_columns.GetCount());
         if ( insert )
@@ -4334,7 +4365,8 @@ int wxListMainWindow::GetItemWidthWithImage(wxListItem * item)
     if (!item->GetText().empty())
     {
         wxCoord w;
-        dc.GetTextExtent( item->GetText(), &w, NULL );
+        wxFont font = item->GetFont();
+        dc.GetTextExtent( item->GetText(), &w, NULL, NULL, NULL, (font.IsOk() ? &font : NULL) );
         width += w;
     }
 
@@ -4593,7 +4625,7 @@ bool wxGenericListCtrl::Create(wxWindow *parent,
                   wxT("wxListCtrl style should have exactly one mode bit set") );
 
     if ( !wxListCtrlBase::Create( parent, id, pos, size,
-                                  style | wxVSCROLL | wxHSCROLL,
+                                  style | wxScrolledWindowStyle,
                                   validator, name ) )
         return false;
 

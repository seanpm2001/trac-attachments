Index: interface/wx/generic/aboutdlgg.h
===================================================================
--- interface/wx/generic/aboutdlgg.h	(revision 0)
+++ interface/wx/generic/aboutdlgg.h	(working copy)
@@ -0,0 +1,119 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/aboutdlgg.h
+// Purpose:     generic wxAboutBox() implementation
+// Author:      Vadim Zeitlin
+// Created:     2006-10-07
+// RCS-ID:      $Id$
+// Copyright:   (c) 2006 Vadim Zeitlin <vadim@wxwindows.org>
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxGenericAboutDialog
+
+	This class defines a customizable @e About dialog. If you don't need customization,
+	you would prefer to use the global functions wxGenericAboutBox() or wxAboutBox().
+
+	Typically, you derive your own class from wxGenericAboutDialog and override
+	the virtual method DoAddCustomControls() for customization inside your own class.
+
+	To instanciate an object from your wxGenericAboutDialog-based class, you go through
+	the default constructor, then Create(), or directly using the alternate constructor.
+	In both cases, you have to prepare a wxAboutDialogInfo containing standard
+	informations to display in an about-box.
+
+    Example of usage, MyAboutDlg being a class derived from wxGenericAboutDialog :
+    @code
+    void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+    {
+        wxAboutDialogInfo aboutInfo;
+
+        aboutInfo.SetName("MyApp");
+        aboutInfo.SetVersion(MY_APP_VERSION_STRING);
+        aboutInfo.SetDescription(_("My wxWidgets-based application!"));
+        aboutInfo.SetCopyright("(C) 1992-2012");
+        aboutInfo.SetWebSite("http://myapp.org");
+        aboutInfo.AddDeveloper("My Self");
+
+		MyAboutDlg dlgAbout(aboutInfo, this);
+		dlgAbout.ShowModal();
+    }
+    @endcode
+
+    @library{wxadv}
+    @category{cmndlg}
+
+    @see wxAboutDialogInfo
+*/
+class wxGenericAboutDialog
+{
+public:
+    /**
+        Default constructor leaves all fields initially uninitialized.
+    	Subsequently, you must use Create() to initialize them, passing
+    	a wxAboutDialogInfo which should has been informed using, at least,
+    	SetVersion(), SetCopyright() and SetDescription().
+    */
+    wxGenericAboutDialog();
+
+    /**
+    	This constructor initializes the fields using the wxAboutDialogInfo
+    	instance passed in parameter. It internally calls Create() by itself.
+    */
+    wxGenericAboutDialog(const wxAboutDialogInfo& info, wxWindow* parent = NULL);
+
+    /**
+    	This method initializes the fields using the passed wxAboutDialogInfo
+    	and must be only called if the default constructor has been used.
+    */
+    bool Create(const wxAboutDialogInfo& info, wxWindow* parent = NULL);
+
+protected:
+    /**
+    	This virtual method may be overriden to add some more controls to the
+    	dialog using the protected AddControl(), AddText() and AddCollapsiblePane()
+    	methods.
+
+    	This method is automatically called by Create(). So, see the constructors
+    	help to know in which case you have to call Create() explicitely or not.
+    */
+    virtual void DoAddCustomControls() { }
+
+    /**
+    	Add arbitrary control to the sizer content with the specified flags.
+
+    	For example, here we add an expandable line with a border of 3 pixels,
+    	then a line of text :
+    	@code
+    	wxSizerFlags sizer;
+
+    	sizer.Expand();
+    	sizer.Border(wxALL, 3);
+    	AddControl(new wxStaticLine(this), sizer);
+
+    	AddText(_("This line is just an example of custom text."));
+    	@endcode
+    */
+    void AddControl(wxWindow *win, const wxSizerFlags& flags);
+
+    /**
+    	Add arbitrary control to the sizer content and center-it.
+    */
+    void AddControl(wxWindow *win);
+
+    /**
+    	Add the given (no empty) text to the sizer content.
+    */
+    void AddText(const wxString& text);
+
+    /**
+    	Add a wxCollapsiblePane containing the given text.
+    */
+    void AddCollapsiblePane(const wxString& title, const wxString& text);
+};
+
+/**
+    This function does the same thing as wxAboutBox() except that it always uses
+    the generic wxWidgets version of the dialog instead of the native one.
+*/
+void wxGenericAboutBox(const wxAboutDialogInfo& info, wxWindow* parent = NULL);

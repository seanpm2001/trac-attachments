--- wxWidgets.orig/include/wx/dcbuffer.h	Tue Oct 17 08:18:17 2006
+++ wxWidgets/include/wx/dcbuffer.h	Wed Oct 18 18:23:46 2006
@@ -19,5 +19,5 @@
 // Split platforms into two groups - those which have well-working
 // double-buffering by default, and those which do not.
-#if defined(__WXMAC__) || defined(__WXGTK20__)
+#if defined(__WXMAC__) || defined(__WXGTK20__) || defined(__WXDFB__)
     #define wxALWAYS_NATIVE_DOUBLE_BUFFER       1
 #else
@@ -42,5 +42,5 @@
 public:
     // Default ctor, must subsequently call Init for two stage construction.
-    wxBufferedDC() : m_dc( 0 ), m_style(0)
+    wxBufferedDC() : m_dc( 0 ), m_buffer(NULL), m_style(0)
     {
     }
@@ -51,5 +51,5 @@
                  int style = wxBUFFER_CLIENT_AREA)
         : m_dc( dc ),
-          m_buffer( buffer ),
+          m_buffer( &buffer ),
           m_style(style)
     {
@@ -62,9 +62,9 @@
     wxBufferedDC(wxDC *dc, const wxSize &area, int style = wxBUFFER_CLIENT_AREA)
         : m_dc( dc ),
-          m_buffer( area.GetWidth(), area.GetHeight() ),
+          m_buffer(NULL),
           m_style(style)
 
     {
-        UseBuffer();
+        UseBuffer(area.x, area.y);
     }
 
@@ -83,8 +83,8 @@
               int style = wxBUFFER_CLIENT_AREA)
     {
-        wxASSERT_MSG( m_dc == 0 && m_buffer == wxNullBitmap,
+        wxASSERT_MSG( m_dc == 0 && m_buffer == NULL,
                       _T("wxBufferedDC already initialised") );
         m_dc = dc;
-        m_buffer = buffer;
+        m_buffer = &buffer;
         m_style = style;
         UseBuffer();
@@ -93,5 +93,10 @@
     void Init(wxDC *dc, const wxSize &area, int style = wxBUFFER_CLIENT_AREA)
     {
-        Init(dc, wxBitmap(area.GetWidth(), area.GetHeight()), style);
+        wxASSERT_MSG( m_dc == 0 && m_buffer == NULL,
+                      _T("wxBufferedDC already initialised") );
+        m_dc = dc;
+        m_buffer = NULL;
+        m_style = style;
+        UseBuffer(area.x, area.y);
     }
 
@@ -113,5 +118,5 @@
 
         m_dc->Blit( 0, 0,
-                    m_buffer.GetWidth(), m_buffer.GetHeight(), this,
+                    m_buffer->GetWidth(), m_buffer->GetHeight(), this,
                     -x, -y );
         m_dc = NULL;
@@ -124,15 +129,5 @@
 private:
     // check that the bitmap is valid and use it
-    void UseBuffer()
-    {
-        if (!m_buffer.Ok())
-        {
-            wxCoord w, h;
-            m_dc->GetSize(&w, &h);
-            m_buffer = wxBitmap(w, h);
-        }
-
-        SelectObject(m_buffer);
-    }
+    void UseBuffer(wxCoord w = -1, wxCoord h = -1);
 
     // the underlying DC to which we copy everything drawn on this one in
@@ -144,5 +139,5 @@
 
     // the buffer (selected in this DC)
-    wxBitmap m_buffer;
+    const wxBitmap *m_buffer;
 
     // the buffering style
@@ -239,5 +234,5 @@
         // Help the user to get the double-buffering working properly.
         wxASSERT_MSG( win->GetBackgroundStyle() == wxBG_STYLE_CUSTOM,
-                      wxT("In constructor, you need to call GetBackgroundStyle(wxBG_STYLE_CUSTOM), ")
+                      wxT("In constructor, you need to call SetBackgroundStyle(wxBG_STYLE_CUSTOM), ")
                       wxT("and also, if needed, paint the background manually in the paint event handler."));
     }
--- wxWidgets.orig/src/common/dcbufcmn.cpp	Tue Oct 17 08:19:01 2006
+++ wxWidgets/src/common/dcbufcmn.cpp	Wed Oct 18 18:26:23 2006
@@ -35,6 +35,54 @@
 // ============================================================================
 
-// This file is intentionally empty.  It has not been removed in case another
-// wxBufferedDC reimplementation is attempted in the near future.  If not then
-// this file can be removed and the bakefiles updated.
+// ============================================================================
+// wxSharedDCBufferManager
+//   Helper class to free shared buffer when the app exists.
+// ============================================================================
+
+class wxSharedDCBufferManager
+{
+    friend class wxBufferedDC;
+public:
+
+    wxSharedDCBufferManager() { }
+    ~wxSharedDCBufferManager() { }
+
+    wxBitmap* GetBuffer(int w, int h)
+    {
+        if ( !m_buffer.IsOk() ||
+             w > m_buffer.GetWidth() ||
+             h > m_buffer.GetHeight() )
+        {
+            // Create slightly larger bitmap so we don't need to
+            // be reallocating constantly when the user enlarges
+            // the frame for the first time.
+            m_buffer = wxBitmap(w, h);
+        }
+
+        return &m_buffer;
+    }
+
+private:
+    wxBitmap    m_buffer;
+};
+
+static wxSharedDCBufferManager gs_sharedDCBufferManager;
+
+
+// ============================================================================
+// wxBufferedDC
+// ============================================================================
+
+void wxBufferedDC::UseBuffer(wxCoord w, wxCoord h)
+{
+    if ( !m_buffer )
+    {
+        if ( w == -1 )
+            m_dc->GetSize(&w, &h);
+
+        m_buffer = gs_sharedDCBufferManager.GetBuffer(w, h);
+    }
+
+    SelectObject(*m_buffer);
+}
 

 	  	 

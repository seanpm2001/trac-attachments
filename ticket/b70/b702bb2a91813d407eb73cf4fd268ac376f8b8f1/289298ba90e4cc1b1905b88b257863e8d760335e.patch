Index: include/wx/msw/enhmeta.h
===================================================================
--- include/wx/msw/enhmeta.h	(revision 76110)
+++ include/wx/msw/enhmeta.h	(working copy)
@@ -51,7 +51,13 @@
     // for backwards compatibility (with wxMetaFile) only, they are ignored by
     // this method
     bool SetClipboard(int width = 0, int height = 0);
-
+    // detach the wxmetafile object from its handle, i.e. prevent the object from
+    // unloading the object in its dtor -- the caller is now responsible for
+    // doing this
+    WXHANDLE Detach() { WXHANDLE h = m_hMF; m_hMF = 0; return h; }
+    // close (destroy) the metafile object by the given handle
+    static void Close(WXHANDLE handle);
+    
     // implementation
     WXHANDLE GetHENHMETAFILE() const { return m_hMF; }
     void SetHENHMETAFILE(WXHANDLE hMF) { Free(); m_hMF = hMF; }
@@ -58,7 +64,7 @@
 
 protected:
     void Init();
-    void Free();
+    void Free() { Close(m_hMF); }
     void Assign(const wxEnhMetaFile& mf);
 
     // we don't use these functions (but probably should) but have to implement
Index: src/msw/enhmeta.cpp
===================================================================
--- src/msw/enhmeta.cpp	(revision 76110)
+++ src/msw/enhmeta.cpp	(working copy)
@@ -120,11 +120,12 @@
     }
 }
 
-void wxEnhMetaFile::Free()
+/* static */
+void wxEnhMetaFile::Close(WXHANDLE handle)
 {
-    if ( m_hMF )
+    if ( handle )
     {
-        if ( !::DeleteEnhMetaFile(GetEMF()) )
+        if ( !::DeleteEnhMetaFile((HENHMETAFILE) handle) )
         {
             wxLogLastError(wxT("DeleteEnhMetaFile"));
         }

Index: src/aui/auibook.cpp
===================================================================
--- src/aui/auibook.cpp	(revision 70897)
+++ src/aui/auibook.cpp	(working copy)
@@ -37,6 +37,13 @@
 #include "wx/osx/private.h"
 #endif
 
+#if defined(__WXGTK20__)
+    #define GSocket GLibSocket
+    #include <gtk/gtk.h>
+    #undef GSocket
+    #include "wx/gtk/dcclient.h"
+#endif // __WXGTK20__
+
 #include "wx/arrimpl.cpp"
 WX_DEFINE_OBJARRAY(wxAuiNotebookPageArray)
 WX_DEFINE_OBJARRAY(wxAuiTabContainerButtonArray)
@@ -1288,7 +1295,437 @@
     m_measuringFont = font;
 }
 
+#if defined(__WXGTK20__)
+namespace
+{
+
+static GtkWidget *g_window = NULL;
+static GtkWidget *g_container = NULL;
+static GtkWidget *g_notebook = NULL;
+static GtkWidget *g_button = NULL;
+static int s_CloseIconSize = 16; // default size
+
+
+void SetCloseIconSize(int size)
+{
+    s_CloseIconSize = size;
+}
+
+static void setup_widget_prototype(GtkWidget* widget)
+{
+    if (!g_window)
+    {
+        g_window = gtk_window_new(GTK_WINDOW_POPUP);
+        gtk_widget_realize(g_window);
+    }
+    if (!g_container)
+    {
+        g_container = gtk_fixed_new();
+        gtk_container_add(GTK_CONTAINER(g_window), g_container);
+    }
+
+    gtk_container_add(GTK_CONTAINER(g_container), widget);
+    gtk_widget_realize(widget);
+}
+
+static GtkStyle * get_style_button()
+{
+    if (!g_button)
+    {
+        g_button = gtk_button_new();
+        setup_widget_prototype(g_button);
+    }
+    return gtk_widget_get_style(g_button);
+}
+
+static GtkStyle * get_style_notebook()
+{
+    if (!g_notebook)
+    {
+        g_notebook = gtk_notebook_new();
+        setup_widget_prototype(g_notebook);
+    }
+    return gtk_widget_get_style(g_notebook);
+}
+
+}
+
+NbStyleGTK::NbStyleGTK():
+    m_Xthickness(0),
+    m_Ythickness(0),
+    m_TabHBorder(0),
+    m_TabVBorder(0)
+
+{
+}
+
+wxAuiTabArt* NbStyleGTK::Clone()
+{
+    NbStyleGTK* clone = new NbStyleGTK();
+
+    clone->SetNormalFont(m_normalFont);
+    clone->SetSelectedFont(m_normalFont);
+    clone->SetMeasuringFont(m_normalFont);
+
+    return clone;
+}
+
+void NbStyleGTK::DrawBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect)
+{
+    GtkStyle* style_notebook = get_style_notebook();
+    GtkNotebook* notebook = GTK_NOTEBOOK (g_notebook);
+
+    // if one of the parameters have changed, the height needs to be recalculated, so we force it,
+    if(m_Xthickness  != style_notebook->xthickness ||
+       m_Ythickness  != style_notebook->ythickness ||
+       m_TabVBorder != notebook->tab_vborder ||
+       m_TabHBorder != notebook->tab_hborder)
+    {
+        m_Xthickness  = style_notebook->xthickness;
+        m_Ythickness  = style_notebook->ythickness;
+        m_TabVBorder = notebook->tab_vborder;
+        m_TabHBorder = notebook->tab_hborder;
+        wxAuiNotebook* nb = NULL;
+        if(wnd)
+             nb = (wxAuiNotebook*)wnd->GetParent();
+        if(nb)
+            nb->SetTabCtrlHeight(-1);
+    }
+    wxGTKDCImpl *impldc = (wxGTKDCImpl*) dc.GetImpl();
+    GdkWindow* window = impldc->GetGDKWindow();
+
+    gtk_style_apply_default_background(style_notebook, window, 1, GTK_STATE_NORMAL, NULL,
+                                       rect.x, rect.y, rect.width, rect.height);
+}
+
+wxRect DrawSimpleButton(wxDC& dc, GtkWidget *widget, int button_state, wxRect const &in_rect)
+{
+    wxRect r;
+
+    r.height = in_rect.height - 3 * get_style_notebook()->ythickness;
+    r.width = r.height;
+    r.x = in_rect.x + in_rect.width - r.width;
+
+    wxGTKDCImpl *impldc = (wxGTKDCImpl*) dc.GetImpl();
+    GdkWindow* window = impldc->GetGDKWindow();
+
+    if (button_state == wxAUI_BUTTON_STATE_HOVER)
+    {
+        gtk_paint_box(get_style_button(), window,
+                      GTK_STATE_PRELIGHT, GTK_SHADOW_OUT, NULL, widget, "button",
+                      r.x, r.y, r.width, r.height);
+    }
+    else if (button_state == wxAUI_BUTTON_STATE_PRESSED)
+    {
+        gtk_paint_box(get_style_button(), window,
+                      GTK_STATE_ACTIVE, GTK_SHADOW_IN, NULL, widget, "button",
+                      r.x, r.y, r.width, r.height);
+    }
+
+    return r;
+}
+
+void NbStyleGTK::DrawTab(wxDC& dc, wxWindow* wnd, const wxAuiNotebookPage& page,
+                             const wxRect& in_rect, int close_button_state, wxRect* out_tab_rect,
+                             wxRect* out_button_rect, int* x_extent)
+{
+    GtkWidget *widget = wnd->GetHandle();
+    GtkStyle *style_notebook = get_style_notebook();
+    GtkStyle *style_button = get_style_button();
+    wxRect const &window_rect = wnd->GetRect();
+
+    int padding;
+    int focus_width = 0;
+
+    gtk_widget_style_get (widget,
+        "focus-line-width", &focus_width,
+        NULL);
+
+    padding = focus_width + m_TabHBorder;
+
+
+    // figure out the size of the tab
+    wxSize tab_size = GetTabSize(dc, wnd, page.caption, page.bitmap,
+                                    page.active, close_button_state, x_extent);
+
+    wxRect tab_rect = in_rect;
+    tab_rect.width = tab_size.x;
+    tab_rect.height = page.active ? tab_size.y + m_Ythickness : tab_size.y;
+
+    int clip_width = tab_rect.width;
+    if (tab_rect.x + tab_rect.width > in_rect.x + in_rect.width - 4)
+        clip_width = (in_rect.x + in_rect.width) - tab_rect.x - 4;
+
+    dc.SetClippingRegion(tab_rect.x, tab_rect.y, clip_width, tab_rect.height);
+
+    GdkRectangle area;
+    area.x = ((tab_rect.x > 20)  && !page.active) ? tab_rect.x + m_TabVBorder : tab_rect.x;
+    area.y = tab_rect.y;
+    area.width = ((tab_rect.x > 20)  && !page.active) ? clip_width - m_TabVBorder : clip_width;
+    area.height = page.active ? tab_rect.height : tab_rect.height + m_Ythickness;
+
+    wxGTKDCImpl *impldc = (wxGTKDCImpl*) dc.GetImpl();
+    GdkWindow* window = impldc->GetGDKWindow();
+
+    // if page is active, we draw a box without border, in some styles the gap is transparent (e.g. Human)
+    // and a line would be visible at the bottom of the tab
+    gtk_paint_box(style_notebook, window, GTK_STATE_NORMAL,page.active?GTK_SHADOW_NONE:GTK_SHADOW_OUT,
+                  NULL, widget, "notebook",
+                  window_rect.x, in_rect.y + in_rect.height - 3 * m_Ythickness, window_rect.width, 4 * m_Ythickness);
+    if (page.active)
+    {
+        gtk_paint_box_gap(style_notebook, window, GTK_STATE_NORMAL, GTK_SHADOW_OUT,
+                          NULL, widget, "notebook",
+                          window_rect.x, in_rect.y + in_rect.height - 3 * m_Ythickness, window_rect.width, 4 * m_Ythickness,
+                          GTK_POS_TOP, tab_rect.x - 1 , tab_rect.width);
+    }
+    gtk_paint_extension(style_notebook, window,
+                       page.active ? GTK_STATE_NORMAL : GTK_STATE_ACTIVE, GTK_SHADOW_OUT,
+                       &area, widget, "tab",
+                       tab_rect.x, page.active ? tab_rect.y : tab_rect.y + m_Ythickness,
+                       tab_rect.width, tab_rect.height,
+                       GTK_POS_BOTTOM);
+    wxCoord textX = tab_rect.x + padding + m_Xthickness;
+
+    int bitmap_offset = 0;
+    if (page.bitmap.IsOk())
+    {
+        bitmap_offset = textX;
+
+        // draw bitmap
+        int bitmapY = tab_rect.y +(tab_rect.height - page.bitmap.GetHeight()) / 2;
+        if(!page.active)
+            bitmapY += m_Ythickness;
+        dc.DrawBitmap(page.bitmap,
+                      bitmap_offset,
+                      bitmapY,
+                      true);
+
+        textX += page.bitmap.GetWidth() + padding;
+    }
+
+    wxCoord textW, textH, textY;
+
+    dc.SetFont(m_normalFont);
+    dc.GetTextExtent(page.caption, &textW, &textH);
+    textY = tab_rect.y + (tab_rect.height - textH) / 2;
+    if(!page.active)
+        textY += m_Ythickness;
+
+    // draw tab text
+    GdkColor text_colour = page.active ? style_notebook->fg[GTK_STATE_NORMAL] : style_notebook->fg[GTK_STATE_ACTIVE];
+    dc.SetTextForeground(wxColor(text_colour));
+    GdkRectangle focus_area;
+
+    int padding_focus = padding - focus_width;
+    focus_area.x = tab_rect.x + padding_focus;
+    focus_area.y = textY - focus_width;
+    focus_area.width = tab_rect.width - 2 * padding_focus;
+    focus_area.height = textH + 2 * focus_width;
+
+    if(page.active && (wnd->FindFocus() == wnd) && focus_area.x <= (area.x + area.width))
+    {
+        // clipping seems not to work here, so we we have to recalc the focus-area manually
+        if((focus_area.x + focus_area.width) > (area.x + area.width))
+            focus_area.width = area.x + area.width - focus_area.x + focus_width;
+        gtk_paint_focus (style_notebook, window,
+                         GTK_STATE_ACTIVE, &area, widget, "tab",
+                         focus_area.x, focus_area.y, focus_area.width, focus_area.height);
+    }
+
+    dc.DrawText(page.caption, textX, textY);
+
+    // draw close-button on tab (if enabled)
+    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
+    {
+        wxBitmap bmp;
+        bmp.SetPixbuf(gtk_widget_render_icon(widget, GTK_STOCK_CLOSE, GTK_ICON_SIZE_SMALL_TOOLBAR, "tab"));
+        if(bmp.GetWidth() != s_CloseIconSize || bmp.GetHeight() != s_CloseIconSize)
+        {
+            wxImage img = bmp.ConvertToImage();
+            img.Rescale(s_CloseIconSize, s_CloseIconSize);
+            bmp = img;
+        }
+
+        int button_size = s_CloseIconSize + 2 * m_Xthickness;
+        int buttonY = tab_rect.y + (tab_rect.GetHeight() - button_size) / 2;
+        if(!page.active)
+            buttonY += m_Ythickness;
+        wxRect rect(tab_rect.x + tab_rect.width - button_size - padding,
+                    buttonY ,
+                    button_size,
+                    button_size);
+
+        if (close_button_state == wxAUI_BUTTON_STATE_HOVER)
+        {
+            gtk_paint_box(style_button, window,
+                          GTK_STATE_PRELIGHT, GTK_SHADOW_OUT, &area, widget, "button",
+                          rect.x, rect.y, rect.width, rect.height);
+        }
+        else if (close_button_state == wxAUI_BUTTON_STATE_PRESSED)
+        {
+            gtk_paint_box(style_button, window,
+                          GTK_STATE_ACTIVE, GTK_SHADOW_IN, &area, widget, "button",
+                          rect.x, rect.y, rect.width, rect.height);
+        }
+
+        dc.DrawBitmap(bmp, rect.x + m_Xthickness, rect.y + style_notebook->ythickness, true);
+        *out_button_rect = rect;
+    }
+
+    tab_rect.width = std::min(tab_rect.width, clip_width);
+    *out_tab_rect = tab_rect;
+
+    dc.DestroyClippingRegion();
+}
+
+void ArrowStateAndShadow(int button_state, GtkStateType &state, GtkShadowType &shadow)
+{
 
+    if (button_state & wxAUI_BUTTON_STATE_DISABLED)
+    {
+        state = GTK_STATE_INSENSITIVE;
+        shadow = GTK_SHADOW_ETCHED_IN;
+    }
+    else if (button_state & wxAUI_BUTTON_STATE_HOVER)
+    {
+        state = GTK_STATE_PRELIGHT;
+        shadow = GTK_SHADOW_OUT;
+    }
+    else if (button_state & wxAUI_BUTTON_STATE_PRESSED)
+    {
+        state = GTK_STATE_ACTIVE;
+        shadow = GTK_SHADOW_IN;
+    }
+    else
+    {
+        state = GTK_STATE_NORMAL;
+        shadow = GTK_SHADOW_OUT;
+    }
+}
+
+wxRect DrawSimpleArrow(wxDC& dc,
+                       GtkWidget *widget,
+                       int button_state,
+                       wxRect const &in_rect,
+                       int orientation,
+                       GtkArrowType arrow_type)
+{
+    int scroll_arrow_hlength, scroll_arrow_vlength;
+    gtk_widget_style_get(widget,
+                         "scroll-arrow-hlength", &scroll_arrow_hlength,
+                         "scroll-arrow-vlength", &scroll_arrow_vlength,
+                         NULL);
+
+    GtkStateType state;
+    GtkShadowType shadow;
+    ArrowStateAndShadow(button_state, state, shadow);
+
+    wxRect out_rect;
+
+    if (orientation == wxLEFT)
+        out_rect.x = in_rect.x;
+    else
+        out_rect.x = in_rect.x + in_rect.width - scroll_arrow_hlength;
+    out_rect.y = (in_rect.y + in_rect.height - 3 * get_style_notebook()->ythickness - scroll_arrow_vlength) / 2;
+    out_rect.width = scroll_arrow_hlength;
+    out_rect.height = scroll_arrow_vlength;
+
+    wxGTKDCImpl *impldc = (wxGTKDCImpl*) dc.GetImpl();
+    GdkWindow* window = impldc->GetGDKWindow();
+    gtk_paint_arrow (get_style_button(), window, state, shadow, NULL, widget, "notebook",
+                     arrow_type, TRUE, out_rect.x, out_rect.y, out_rect.width, out_rect.height);
+
+    return out_rect;
+}
+
+wxRect MakeButtonScaledRect(wxRect const &button_rect, float scale)
+{
+    GtkStyle *style_button = get_style_button();
+    wxRect r;
+    r.width = (button_rect.width - 2 * style_button->xthickness);
+    r.height = (button_rect.height - 2 * style_button->ythickness);
+    r.x = button_rect.x + roundf(r.width * (1.0f - scale) / 2.0) + style_button->xthickness;
+    r.y = button_rect.y + roundf(r.height * (1.0f - scale) / 2.0) + style_button->ythickness;
+    r.width = roundf(r.width * scale);
+    r.height = roundf(r.height * scale);
+    return r;
+}
+
+wxRect MakeButtonIconRect(wxRect const &button_rect, int icon_size)
+{
+    GtkStyle *style_button = get_style_button();
+    wxRect r;
+
+    r.x = button_rect.x + style_button->xthickness
+          + (button_rect.width - 2 * style_button->xthickness - icon_size) / 2;
+    r.y = button_rect.y + style_button->ythickness
+          + (button_rect.width - 2 * style_button->ythickness - icon_size) / 2;
+    r.width = r.height = icon_size;
+    return r;
+}
+
+void NbStyleGTK::DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& in_rect, int bitmap_id,
+                                int button_state, int orientation, wxRect* out_rect)
+{
+    GtkWidget *widget = wnd->GetHandle();
+    wxRect r;
+
+    switch (bitmap_id)
+    {
+        case wxAUI_BUTTON_LEFT:
+            r = DrawSimpleArrow(dc, widget, button_state, in_rect, orientation, GTK_ARROW_LEFT);
+            break;
+
+        case wxAUI_BUTTON_RIGHT:
+            r = DrawSimpleArrow(dc, widget, button_state, in_rect, orientation, GTK_ARROW_RIGHT);
+            break;
+
+        case wxAUI_BUTTON_WINDOWLIST:
+            {
+                float const scale = 0.5f;
+
+                r = DrawSimpleButton(dc, widget, button_state, in_rect);//, s_CloseIconSize);
+
+                wxRect const &arrow = MakeButtonScaledRect(r, scale);
+                GtkStateType state;
+                GtkShadowType shadow;
+
+                ArrowStateAndShadow(button_state, state, shadow);
+
+                wxGTKDCImpl *impldc = (wxGTKDCImpl*) dc.GetImpl();
+                GdkWindow* window = impldc->GetGDKWindow();
+
+                gtk_paint_arrow(get_style_notebook(), window, state,
+                                shadow, NULL, widget, "notebook",
+                                GTK_ARROW_DOWN, TRUE,
+                                arrow.x, arrow.y, arrow.width, arrow.height);
+            }
+            break;
+    }
+
+    *out_rect = r;
+}
+
+
+int NbStyleGTK::GetBestTabCtrlSize(wxWindow* wnd,
+                                    const wxAuiNotebookPageArray& pages,
+                                    const wxSize& required_bmp_size)
+{
+    SetMeasuringFont(m_normalFont);
+    SetSelectedFont(m_normalFont);
+    int tab_height = 3 * get_style_notebook()->ythickness + wxAuiDefaultTabArt::GetBestTabCtrlSize(wnd, pages, required_bmp_size);
+    return tab_height;
+}
+
+wxSize NbStyleGTK::GetTabSize(wxDC& dc, wxWindow* wnd, const wxString& caption, const wxBitmap& bitmap, bool active,
+                                  int close_button_state, int* x_extent)
+{
+    wxSize s = wxAuiDefaultTabArt::GetTabSize(dc, wnd, caption, bitmap, active, close_button_state, x_extent);
+    *x_extent -= GTK_NOTEBOOK (g_notebook)->tab_hborder;
+    return s;
+}
+#endif // __WXGTK20__
 
 
 // -- wxAuiTabContainer class implementation --
@@ -4510,10 +4947,10 @@
     return DoModifySelection(n, false);
 }
 
-bool wxAuiNotebook::AddPage(wxWindow *page, const wxString &text, bool select, 
+bool wxAuiNotebook::AddPage(wxWindow *page, const wxString &text, bool select,
                             int imageId)
 {
-    if(HasImageList()) 
+    if(HasImageList())
     {
         return AddPage(page, text, select, GetImageList()->GetBitmap(imageId));
     }
@@ -4533,13 +4970,13 @@
     return true;
 }
 
-bool wxAuiNotebook::InsertPage(size_t index, wxWindow *page, 
-                               const wxString &text, bool select, 
+bool wxAuiNotebook::InsertPage(size_t index, wxWindow *page,
+                               const wxString &text, bool select,
                                int imageId)
 {
     if(HasImageList())
     {
-        return InsertPage(index, page, text, select, 
+        return InsertPage(index, page, text, select,
                           GetImageList()->GetBitmap(imageId));
     }
     else
Index: include/wx/aui/auibook.h
===================================================================
--- include/wx/aui/auibook.h	(revision 70897)
+++ include/wx/aui/auibook.h	(working copy)
@@ -359,12 +359,35 @@
     unsigned int m_flags;
 };
 
+#if defined(__WXGTK20__)
+class WXDLLIMPEXP_AUI NbStyleGTK : public wxAuiDefaultTabArt
+{
+public:
+    NbStyleGTK();
 
-
-
-
-
-
+    virtual wxAuiTabArt* Clone();
+    virtual void DrawBackground(wxDC& dc, wxWindow* wnd, const wxRect& rect);
+    virtual void DrawTab(wxDC& dc,
+                         wxWindow* wnd,
+                         const wxAuiNotebookPage& page,
+                         const wxRect& in_rect,
+                         int close_button_state,
+                         wxRect* out_tab_rect,
+                         wxRect* out_button_rect,
+                         int* x_extent);
+    void DrawButton(wxDC& dc, wxWindow* wnd, const wxRect& in_rect, int bitmap_id,
+                    int button_state, int orientation, wxRect* out_rect);
+    int GetBestTabCtrlSize(wxWindow* wnd, const wxAuiNotebookPageArray& pages,
+                            const wxSize& required_bmp_size);
+    virtual wxSize GetTabSize(wxDC& dc, wxWindow* wnd, const wxString& caption, const wxBitmap& bitmap, bool active,
+                              int close_button_state, int* x_extent);
+private:
+    int m_Xthickness;
+    int m_Ythickness;
+    int m_TabHBorder;
+    int m_TabVBorder;
+};
+#endif // __WXGTK20__
 
 
 class WXDLLIMPEXP_AUI wxAuiTabContainer
@@ -598,7 +621,7 @@
 
     virtual int ChangeSelection(size_t n);
 
-    virtual bool AddPage(wxWindow *page, const wxString &text, bool select, 
+    virtual bool AddPage(wxWindow *page, const wxString &text, bool select,
                          int imageId);
     virtual bool DeleteAllPages();
     virtual bool InsertPage(size_t index, wxWindow *page, const wxString &text,
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 70897)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -1191,7 +1191,11 @@
 
             if (id == ID_NotebookArtGloss)
             {
+            #if defined(__WXGTK20__)
+                nb->SetArtProvider(new NbStyleGTK);
+            #else
                 nb->SetArtProvider(new wxAuiDefaultTabArt);
+            #endif
                 m_notebook_theme = 0;
             }
              else if (id == ID_NotebookArtSimple)
@@ -1639,6 +1643,7 @@
                                     wxPoint(client_size.x, client_size.y),
                                     wxSize(430,200),
                                     m_notebook_style);
+    ctrl->SetArtProvider(new NbStyleGTK);
    ctrl->Freeze();
 
    wxBitmap page_bmp = wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16));

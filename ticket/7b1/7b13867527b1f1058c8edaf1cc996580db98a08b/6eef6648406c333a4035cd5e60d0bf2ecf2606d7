31a32
>     void AllocColour( GdkColormap* cmap );
37c38,41
< 
---
>   
>   /* reference counter for system with <= 8-Bit grafic. */
>     static gushort colMapAllocCounter[ 256 ];
>   
40a45,61
> gushort wxColourRefData::colMapAllocCounter[ 256 ] = 
> {  
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
> };
> 
55a77,111
> /* Allocates the colour in a given colormap if necessary. It's
>    necessary on <= 8-bit grphic systems. After allocation the
>    correspondent reference counter has to be incremented. */
> void wxColourRefData::AllocColour( GdkColormap *cmap )
> {
>   if(  m_hasPixel  &&  m_colormap == cmap  )
>     return;
> 
>   FreeColour();
> 
> #ifdef __WXGTK20__
>         if ((m_colormap->visual->type == GDK_VISUAL_GRAYSCALE) ||
>             (m_colormap->visual->type == GDK_VISUAL_PSEUDO_COLOR))
> #else
>         GdkColormapPrivate *private_colormap = (GdkColormapPrivate*) m_colormap;
>         if ((private_colormap->visual->type == GDK_VISUAL_GRAYSCALE) ||
>             (private_colormap->visual->type == GDK_VISUAL_PSEUDO_COLOR))
> #endif
>   {
>     m_hasPixel = gdk_colormap_alloc_color( cmap, &m_color, FALSE, TRUE );
>     int idx = m_color.pixel;
>     colMapAllocCounter[ idx ] = colMapAllocCounter[ idx ] + 1;
>   }
>   else
>   {
>     m_hasPixel = gdk_color_alloc( cmap, &m_color );
>   }
>   m_colormap = cmap;
> }
> 
> 
> /* Frees colors from the colortable if necessary. The color is freed
>    from the colormap if the reference counter has reachd zero,
>    otherwise there exists still a wxColourRefData pointing to the same
>    colormap entry. */
71c127,132
<             gdk_colormap_free_colors( m_colormap, &m_color, 1 );
---
> 	  int idx = m_color.pixel;
> 	  colMapAllocCounter[ idx ] = colMapAllocCounter[ idx ] - 1;
> 	  if(  colMapAllocCounter[ idx ] ==  0  )
> 	  {
> 	    gdk_colormap_free_colors( m_colormap, &m_color, 1 );
> 	  }
196,216c257
<     if ((M_COLDATA->m_hasPixel) && (M_COLDATA->m_colormap == cmap)) return;
<     
<     M_COLDATA->FreeColour();
< 
< #ifdef __WXGTK20__
<     if ((cmap->visual->type == GDK_VISUAL_GRAYSCALE) ||
<         (cmap->visual->type == GDK_VISUAL_PSEUDO_COLOR))
< #else
<     GdkColormapPrivate *private_colormap = (GdkColormapPrivate*) cmap;
<     if ((private_colormap->visual->type == GDK_VISUAL_GRAYSCALE) ||
<         (private_colormap->visual->type == GDK_VISUAL_PSEUDO_COLOR))
< #endif
<     {
<         M_COLDATA->m_hasPixel = gdk_colormap_alloc_color( cmap, &M_COLDATA->m_color, FALSE, TRUE );
<     }
<     else
<     { 
<         M_COLDATA->m_hasPixel = gdk_color_alloc( cmap, &M_COLDATA->m_color );
<     }
< 
<     M_COLDATA->m_colormap = cmap;
---
>     M_COLDATA->AllocColour( cmap );

 	  	 

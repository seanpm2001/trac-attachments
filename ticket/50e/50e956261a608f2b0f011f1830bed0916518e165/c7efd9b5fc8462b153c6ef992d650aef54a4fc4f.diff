Index: wxWidgets/src/common/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/image.cpp,v
retrieving revision 1.191
diff -b -u -2 -r1.191 image.cpp
--- wxWidgets/src/common/image.cpp	2005/02/19 21:51:33	1.191
+++ wxWidgets/src/common/image.cpp	2005/02/27 00:15:25
@@ -607,4 +607,5 @@
 
     if ((!HasMask() && !image.HasMask()) ||
+        (HasMask() && !image.HasMask()) ||
        ((HasMask() && image.HasMask() &&
          (GetMaskRed()==image.GetMaskRed()) &&
Index: wxWidgets/src/msw/cursor.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/cursor.cpp,v
retrieving revision 1.58
diff -b -u -2 -r1.58 cursor.cpp
--- wxWidgets/src/msw/cursor.cpp	2004/10/20 01:20:57	1.58
+++ wxWidgets/src/msw/cursor.cpp	2005/02/27 00:15:25
@@ -181,6 +181,6 @@
     const int h = wxCursorRefData::GetStandardHeight();
 
-    const int hotSpotX = image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_X);
-    const int hotSpotY = image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y);
+    int hotSpotX = image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_X);
+    int hotSpotY = image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y);
 
     wxASSERT_MSG( hotSpotX >= 0 && hotSpotX < w &&
@@ -188,7 +188,52 @@
                   _T("invalid cursor hot spot coordinates") );
 
+    wxBitmap bitmap;
+
+    // if bitmap is smaller then draw it centered
+    if ((w > image.GetWidth()) && (h > image.GetHeight()))
+    {
+        // fix hotspot to point to the same place in the image
+        hotSpotX = hotSpotX + (w - image.GetWidth())/2;
+        hotSpotY = hotSpotY + (h - image.GetHeight())/2;
+
+        wxImage fullImage(w, h, true);
+        unsigned char r = 0, g = 0, b = 0;
+
+        // need to make the outlying area transparent
+        if (image.HasMask())
+        {
+            r = image.GetMaskRed();
+            g = image.GetMaskGreen();
+            b = image.GetMaskBlue();
+        }
+        else
+        {
+            image.FindFirstUnusedColour(&r, &g, &b);
+        }
+
+        // fill full image with mask colour, but don't set mask since we're
+        // pasting the image on top anyway
+        fullImage.Replace(0, 0, 0, r, g, b);
+
+        fullImage.Paste(image, 
+                        (w - image.GetWidth())/2, (h - image.GetHeight())/2);
+
+        fullImage.SetMaskColour(r, g, b);
+
+        bitmap = wxBitmap(fullImage);      
+    }
+    else if ((w == image.GetWidth()) && (h == image.GetHeight()))
+        bitmap = wxBitmap(image);
+    else
+    {
+        hotSpotX = int(hotSpotX * double(w) / double(image.GetWidth())); 
+        hotSpotY = int(hotSpotY * double(h) / double(image.GetHeight())); 
+
+        bitmap = wxBitmap(image.Scale(w, h));
+    }
+
     HCURSOR hcursor = wxBitmapToHCURSOR
                       (
-                        wxBitmap(image.Scale(w, h)),
+                        bitmap,
                         hotSpotX,
                         hotSpotY
Index: wxWidgets/src/mac/carbon/cursor.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/cursor.cpp,v
retrieving revision 1.24
diff -b -u -2 -r1.24 cursor.cpp
--- wxWidgets/src/mac/carbon/cursor.cpp	2005/02/12 11:34:02	1.24
+++ wxWidgets/src/mac/carbon/cursor.cpp	2005/02/27 00:15:25
@@ -294,14 +294,7 @@
 void wxCursor::CreateFromImage(const wxImage & image) 
 {
+    wxCHECK_RET(image.Ok(), wxT("Invalid image in wxCursor::CreateFromImage"));
     m_refData = new wxCursorRefData;
 
-    wxImage image16 = image.Scale(16,16) ;
-       unsigned char * rgbBits = image16.GetData();
- 
-    
-    int w = image16.GetWidth()  ;
-    int h = image16.GetHeight() ;
-    bool bHasMask = image16.HasMask() ;
-
        int hotSpotX = image16.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_X);
     int hotSpotY = image16.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y);
@@ -311,4 +304,53 @@
             hotSpotY = 0;
             
+    wxImage image16;    
+    const int cursor_w = 16, cursor_h = 16;
+    if ((cursor_w > image.GetWidth()) && (cursor_h > image.GetHeight()))
+    {
+        // fix hotspot to point to the same place in the image
+        hotSpotX = hotSpotX + (cursor_w - image.GetWidth())/2;
+        hotSpotY = hotSpotY + (cursor_h - image.GetHeight())/2;
+
+        image16.Create(cursor_w, cursor_h, true);
+        unsigned char r = 0, g = 0, b = 0;
+
+        // need to make the outlying area transparent
+        if (image.HasMask())
+        {
+            r = image.GetMaskRed();
+            g = image.GetMaskGreen();
+            b = image.GetMaskBlue();
+        }
+        else
+        {
+            image.FindFirstUnusedColour(&r, &g, &b);
+        }
+
+        // fill full image with mask colour, but don't set mask since we're
+        // pasting the image on top anyway
+        image16.Replace(0, 0, 0, r, g, b);
+
+        image16.Paste(image, 
+                        (cursor_w - image.GetWidth())/2, 
+                        (cursor_h - image.GetHeight())/2);
+
+        image16.SetMaskColour(r, g, b);
+    }
+    else if ((cursor_w == image.GetWidth()) && (cursor_h == image.GetHeight()))
+        image16 = image;    
+    else
+    {
+        hotSpotX = int(hotSpotX * double(cursor_w) / double(image.GetWidth())); 
+        hotSpotY = int(hotSpotY * double(cursor_h) / double(image.GetHeight())); 
+    
+        image16 = image.Scale(cursor_w, cursor_h) ;
+    }
+    
+    unsigned char * rgbBits = image16.GetData();
+     
+    int w = image16.GetWidth()  ;
+    int h = image16.GetHeight() ;
+    bool bHasMask = image16.HasMask() ;
+
     PixMapHandle pm = (PixMapHandle) NewHandleClear( sizeof (PixMap))  ;
     short extent = 16 ;
Index: wxWidgets/src/mac/classic/cursor.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/classic/cursor.cpp,v
retrieving revision 1.3
diff -b -u -2 -r1.3 cursor.cpp
--- wxWidgets/src/mac/classic/cursor.cpp	2004/05/23 20:52:39	1.3
+++ wxWidgets/src/mac/classic/cursor.cpp	2005/02/27 00:15:26
@@ -129,14 +129,7 @@
 void wxCursor::CreateFromImage(const wxImage & image) 
 {
+    wxCHECK_RET(image.Ok(), wxT("Invalid image in wxCursor::CreateFromImage"));
     m_refData = new wxCursorRefData;
 
-    wxImage image16 = image.Scale(16,16) ;
-       unsigned char * rgbBits = image16.GetData();
- 
-    
-    int w = image16.GetWidth()  ;
-    int h = image16.GetHeight() ;
-    bool bHasMask = image16.HasMask() ;
-
        int hotSpotX = image16.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_X);
     int hotSpotY = image16.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y);
@@ -146,4 +139,53 @@
             hotSpotY = 0;
             
+    wxImage image16;    
+    const int cursor_w = 16, cursor_h = 16;
+    if ((cursor_w > image.GetWidth()) && (cursor_h > image.GetHeight()))
+    {
+        // fix hotspot to point to the same place in the image
+        hotSpotX = hotSpotX + (cursor_w - image.GetWidth())/2;
+        hotSpotY = hotSpotY + (cursor_h - image.GetHeight())/2;
+
+        image16.Create(cursor_w, cursor_h, true);
+        unsigned char r = 0, g = 0, b = 0;
+
+        // need to make the outlying area transparent
+        if (image.HasMask())
+        {
+            r = image.GetMaskRed();
+            g = image.GetMaskGreen();
+            b = image.GetMaskBlue();
+        }
+        else
+        {
+            image.FindFirstUnusedColour(&r, &g, &b);
+        }
+
+        // fill full image with mask colour, but don't set mask since we're
+        // pasting the image on top anyway
+        image16.Replace(0, 0, 0, r, g, b);
+
+        image16.Paste(image, 
+                        (cursor_w - image.GetWidth())/2, 
+                        (cursor_h - image.GetHeight())/2);
+
+        image16.SetMaskColour(r, g, b);
+    }
+    else if ((cursor_w == image.GetWidth()) && (cursor_h == image.GetHeight()))
+        image16 = image;    
+    else
+    {
+        hotSpotX = int(hotSpotX * double(cursor_w) / double(image.GetWidth())); 
+        hotSpotY = int(hotSpotY * double(cursor_h) / double(image.GetHeight())); 
+    
+        image16 = image.Scale(cursor_w, cursor_h) ;
+    }
+        
+    unsigned char * rgbBits = image16.GetData();
+    
+    int w = image16.GetWidth()  ;
+    int h = image16.GetHeight() ;
+    bool bHasMask = image16.HasMask() ;
+   
 #if 0
     // monochrome implementation

 	  	 

Index: src/richtext/richtexthtml.cpp
===================================================================
--- src/richtext/richtexthtml.cpp	(revision 65703)
+++ src/richtext/richtexthtml.cpp	(working copy)
@@ -58,7 +58,39 @@
     return (ext.Lower() == wxT("html") || ext.Lower() == wxT("htm"));
 }
 
+// For HTML blanks need to converted to &nbsp; if:
+// * the first character of the string is a blank, else the HTML page does not show it
+// * multiple blanks are printed as else these will reduce to a single blank
+wxString ConvertSpacesToSymbolic(const wxString &in)
+{
+    wxString out;
+    size_t spcnt = 0;
+    for(unsigned i=0; i<in.size(); ++i)
+    {
+        if(in[i] == ' ' && i<in.size()-1)
+        {
+            ++spcnt;
+            continue;
+        }
 
+        if(spcnt == 0); // sort out first the most common case
+        else if ((spcnt == 1) && (i > 1))
+        {
+            out += wxT(" ");
+            spcnt = 0;
+        }
+        else // if(spcnt > 1)
+        {
+            for(unsigned j=0; j<spcnt; ++j)
+                out += wxT("&nbsp;");
+            spcnt = 0;
+        }
+        out += in[i];
+    }
+
+    return out;
+}
+
 #if wxUSE_STREAMS
 bool wxRichTextHTMLHandler::DoLoadFile(wxRichTextBuffer *WXUNUSED(buffer), wxInputStream& WXUNUSED(stream))
 {
@@ -145,6 +177,8 @@
                         wxString toReplace = wxRichTextLineBreakChar;
                         text.Replace(toReplace, wxT("<br>"));
 
+                        text = ConvertSpacesToSymbolic(text);
+
                         str << text;
 
                         EndCharacterFormatting(currentCharStyle, charStyle, paraStyle, str);

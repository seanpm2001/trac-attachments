Index: include/wx/os2/menuitem.h
===================================================================
--- include/wx/os2/menuitem.h	(wersja 61986)
+++ include/wx/os2/menuitem.h	(kopia robocza)
@@ -23,7 +23,8 @@
 // headers - only because ownerdrw.h is not always included and I don't want
 // to write #ifdef's everywhere...
 #if wxUSE_OWNER_DRAWN
-    #include  "wx/ownerdrw.h"
+    #include "wx/ownerdrw.h"
+    #include "wx/bitmap.h"
 #endif
 
 // ----------------------------------------------------------------------------
@@ -66,7 +67,6 @@
     // Override base class virtuals
     //
     virtual void SetItemLabel(const wxString& rStrName);
-    virtual void SetCheckable(bool bCheckable);
 
     virtual void Enable(bool bDoEnable = true);
     virtual void Check(bool bDoCheck = true);
@@ -97,6 +97,48 @@
     //
     MENUITEM                        m_vMenuData;
 
+#if wxUSE_OWNER_DRAWN
+
+    void SetBitmaps(const wxBitmap& bmpChecked,
+                    const wxBitmap& bmpUnchecked = wxNullBitmap)
+    {
+        m_bmpChecked = bmpChecked;
+        m_bmpUnchecked = bmpUnchecked;
+        SetOwnerDrawn(true);
+    }
+
+    void SetBitmap(const wxBitmap& bmp, bool bChecked = true)
+    {
+        if ( bChecked )
+            m_bmpChecked = bmp;
+        else
+            m_bmpUnchecked = bmp;
+        SetOwnerDrawn(true);
+    }
+
+    void SetDisabledBitmap(const wxBitmap& bmpDisabled)
+    {
+        m_bmpDisabled = bmpDisabled;
+        SetOwnerDrawn(true);
+    }
+
+    const wxBitmap& GetBitmap(bool bChecked = true) const
+        { return (bChecked ? m_bmpChecked : m_bmpUnchecked); }
+
+    const wxBitmap& GetDisabledBitmap() const
+        { return m_bmpDisabled; }
+
+
+    // override wxOwnerDrawn base class virtuals
+    virtual wxString GetName() const;
+    virtual bool OnMeasureItem(size_t *pwidth, size_t *pheight);
+    virtual bool OnDrawItem(wxDC& dc, const wxRect& rc, wxODAction act, wxODStatus stat);
+
+protected:
+    virtual void GetFontToUse(wxFont& font) const;
+
+#endif // wxUSE_OWNER_DRAWN
+
 private:
     void Init();
 
@@ -117,6 +159,13 @@
     //
     bool                            m_bIsRadioGroupStart;
 
+#if wxUSE_OWNER_DRAWN
+    // item bitmaps
+    wxBitmap m_bmpChecked,     // bitmap to put near the item
+             m_bmpUnchecked,   // (checked is used also for 'uncheckable' items)
+             m_bmpDisabled;
+#endif // wxUSE_OWNER_DRAWN
+
     DECLARE_DYNAMIC_CLASS(wxMenuItem)
 }; // end of CLASS wxMenuItem
 
Index: include/wx/os2/ownerdrw.h
===================================================================
--- include/wx/os2/ownerdrw.h	(wersja 0)
+++ include/wx/os2/ownerdrw.h	(wersja 0)
@@ -0,0 +1,29 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/os2/ownerdrw.h
+// Purpose:     wxOwnerDrawn class
+// Author:      Marcin Malich
+// Modified by:
+// Created:     2009-09-22
+// RCS-ID:      $Id$
+// Copyright:   (c) 2009 Marcin Malich <me@malcom.pl>
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_OWNERDRW_H_
+#define _WX_OWNERDRW_H_
+
+#if wxUSE_OWNER_DRAWN
+
+class WXDLLIMPEXP_CORE wxOwnerDrawn : public wxOwnerDrawnBase
+{
+public:
+    wxOwnerDrawn() {}
+    virtual ~wxOwnerDrawn() {}
+
+    virtual bool OnDrawItem(wxDC& dc, const wxRect& rc,
+                            wxODAction act, wxODStatus stat);
+};
+
+#endif // wxUSE_OWNER_DRAWN
+
+#endif // _WX_OWNERDRW_H_

Zmiany atrybutów dla: include\wx\os2\ownerdrw.h
___________________________________________________________________
Dodane: svn:keywords
   + Date Revision Author HeadURL Id

Index: src/os2/checklst.cpp
===================================================================
--- src/os2/checklst.cpp	(wersja 61986)
+++ src/os2/checklst.cpp	(kopia robocza)
@@ -40,6 +40,12 @@
 #include <os2.h>
 
 // ----------------------------------------------------------------------------
+// constants for base class
+// ----------------------------------------------------------------------------
+
+static const int CHECK_MARK_WIDTH = 15;
+
+// ----------------------------------------------------------------------------
 // private functions
 // ----------------------------------------------------------------------------
 
@@ -81,6 +87,8 @@
     void Check(bool bCheck);
     void Toggle(void) { Check(!IsChecked()); }
 
+    virtual wxString GetName() const { return m_pParent->GetString(m_nIndex); }
+
 private:
     bool            m_bChecked;
     wxCheckListBox* m_pParent;
@@ -101,7 +109,7 @@
     // done in OnMeasure while they are used only in OnDraw and we
     // know that there will always be OnMeasure before OnDraw
     //
-    SetMarginWidth(GetDefaultMarginWidth());
+    SetMarginWidth(CHECK_MARK_WIDTH);
 } // end of wxCheckListBoxItem::wxCheckListBoxItem
 
 
@@ -128,7 +136,7 @@
     vRect.y -= 3;
     if (wxOwnerDrawn::OnDrawItem( rDc, vRect, eAct, eStat))
     {
-        size_t    nCheckWidth  = GetDefaultMarginWidth();
+        size_t    nCheckWidth  = CHECK_MARK_WIDTH;
         size_t    nCheckHeight = m_pParent->GetItemHeight();
         int       nParentHeight;
         int       nX = rRect.GetX();
@@ -333,7 +341,7 @@
         //
         // Add place for the check mark
         //
-        pStruct->rclItem.xRight += wxOwnerDrawn::GetDefaultMarginWidth();
+        pStruct->rclItem.xRight += CHECK_MARK_WIDTH;
         return long(MRFROM2SHORT((USHORT)m_nItemHeight, (USHORT)(pStruct->rclItem.xRight - pStruct->rclItem.xLeft)));
     }
     return 0L;
@@ -374,7 +382,7 @@
     //
     // Clicking on the item selects it, clicking on the checkmark toggles
     //
-    if (rEvent.GetX() <= wxOwnerDrawn::GetDefaultMarginWidth())
+    if (rEvent.GetX() <= CHECK_MARK_WIDTH)
     {
         int                         nParentHeight;
         wxScreenDC                  vDc;
Index: src/os2/listbox.cpp
===================================================================
--- src/os2/listbox.cpp	(wersja 61986)
+++ src/os2/listbox.cpp	(kopia robocza)
@@ -50,25 +50,25 @@
 class wxListBoxItem : public wxOwnerDrawn
 {
 public:
-    wxListBoxItem(const wxString& rsStr = wxEmptyString);
-};
+    wxListBoxItem(wxListBox *parent)
+        { m_parent = parent; }
 
-wxListBoxItem::wxListBoxItem(
-  const wxString& rsStr
-)
-: wxOwnerDrawn( rsStr
-               ,false
-              )
-{
-    //
-    // No bitmaps/checkmarks
-    //
-    SetMarginWidth(0);
-} // end of wxListBoxItem::wxListBoxItem
+    wxListBox *GetParent() const
+        { return m_parent; }
 
+    int GetIndex() const
+        { return m_parent->GetItemIndex(const_cast<wxListBoxItem*>(this)); }
+
+    wxString GetName() const
+        { return m_parent->GetString(GetIndex()); }
+
+private:
+    wxListBox *m_parent;
+};
+
 wxOwnerDrawn* wxListBox::CreateItem( size_t WXUNUSED(n) )
 {
-    return new wxListBoxItem();
+    return new wxListBoxItem(this);
 } // end of wxListBox::CreateItem
 
 #endif  //USE_OWNER_DRAWN
@@ -225,14 +225,7 @@
 
 wxListBox::~wxListBox()
 {
-#if wxUSE_OWNER_DRAWN
-    size_t lUiCount = m_aItems.Count();
-
-    while (lUiCount-- != 0)
-    {
-        delete m_aItems[lUiCount];
-    }
-#endif // wxUSE_OWNER_DRAWN
+    Clear();
 } // end of wxListBox::~wxListBox
 
 void wxListBox::SetupColours()
@@ -261,7 +254,7 @@
 #if wxUSE_OWNER_DRAWN
     delete m_aItems[n];
     m_aItems.RemoveAt(n);
-#endif // wxUSE_OWNER_DRAWN/!wxUSE_OWNER_DRAWN
+#endif // wxUSE_OWNER_DRAWN
 
     ::WinSendMsg(GetHwnd(), LM_DELETEITEM, (MPARAM)n, (MPARAM)0);
     m_nNumItems--;
@@ -303,12 +296,9 @@
 #if wxUSE_OWNER_DRAWN
         if (HasFlag(wxLB_OWNERDRAW))
         {
-            wxOwnerDrawn*               pNewItem = CreateItem(n); // dummy argument
-            wxScreenDC                  vDc; // FIXME: is it really needed here?
-
-            pNewItem->SetName(items[i]);
-            m_aItems.Insert(pNewItem, n);
+            wxOwnerDrawn* pNewItem = CreateItem(n); // dummy argument
             pNewItem->SetFont(GetFont());
+            m_aItems.Insert(pNewItem, n);
         }
 #endif
         AssignNewItemClientData(n, clientData, i, type);
@@ -323,14 +313,10 @@
 void wxListBox::DoClear()
 {
 #if wxUSE_OWNER_DRAWN
-    unsigned int lUiCount = m_aItems.Count();
-
-    while (lUiCount-- != 0)
+    if ( m_windowStyle & wxLB_OWNERDRAW )
     {
-        delete m_aItems[lUiCount];
+        WX_CLEAR_ARRAY(m_aItems);
     }
-
-    m_aItems.Clear();
 #endif // wxUSE_OWNER_DRAWN
     ::WinSendMsg(GetHwnd(), LM_DELETEALL, (MPARAM)0, (MPARAM)0);
 
@@ -537,14 +523,6 @@
     //
     if (bWasSelected)
         Select(n);
-
-#if wxUSE_OWNER_DRAWN
-    if (m_windowStyle & wxLB_OWNERDRAW)
-        //
-        // Update item's text
-        //
-        m_aItems[n]->SetName(rsString);
-#endif  //USE_OWNER_DRAWN
 } // end of wxListBox::SetString
 
 unsigned int wxListBox::GetCount() const
@@ -793,7 +771,7 @@
     return pData->OnDrawItem( vDc
                              ,vRect
                              ,(wxOwnerDrawn::wxODAction)eAction
-                             ,(wxOwnerDrawn::wxODStatus)eStatus
+                             ,(wxOwnerDrawn::wxODStatus)(eStatus | wxOwnerDrawn::wxODHidePrefix)
                             );
 } // end of wxListBox::OS2OnDraw
 
Index: src/os2/menuitem.cpp
===================================================================
--- src/os2/menuitem.cpp	(wersja 61986)
+++ src/os2/menuitem.cpp	(kopia robocza)
@@ -82,11 +82,6 @@
                  ,eKind
                  ,pSubMenu
                 )
-#if wxUSE_OWNER_DRAWN
-,  wxOwnerDrawn( wxPMTextToLabel(rsText)
-                ,eKind == wxITEM_CHECK
-               )
-#endif // owner drawn
 {
     wxASSERT_MSG(pParentMenu != NULL, wxT("a menu item should have a parent"));
     memset(&m_vMenuData, '\0', sizeof(m_vMenuData));
@@ -110,11 +105,6 @@
                  ,bIsCheckable ? wxITEM_CHECK : wxITEM_NORMAL
                  ,pSubMenu
                 )
-#if wxUSE_OWNER_DRAWN
-,  wxOwnerDrawn( wxPMTextToLabel(rsText)
-                ,bIsCheckable
-               )
-#endif // owner drawn
 {
     wxASSERT_MSG(pParentMenu != NULL, wxT("a menu item should have a parent"));
     memset(&m_vMenuData, '\0', sizeof(m_vMenuData));
@@ -132,21 +122,13 @@
     //
     // Set default menu colors
     //
-    #define SYS_COLOR(c) (wxSystemSettings::GetColour(wxSYS_COLOUR_##c))
+    SetTextColour(wxNullColour);
+    SetBackgroundColour(wxNullColour);
 
-    SetTextColour(SYS_COLOR(MENUTEXT));
-    SetBackgroundColour(SYS_COLOR(MENU));
-
     //
     // We don't want normal items be owner-drawn
     //
-    ResetOwnerDrawn();
-    #undef  SYS_COLOR
-
-    //
-    // Tell the owner drawing code to to show the accel string as well
-    //
-    SetAccelString(m_text.AfterFirst(wxT('\t')));
+    SetOwnerDrawn(false);
 #endif // wxUSE_OWNER_DRAWN
 } // end of wxMenuItem::Init
 
@@ -376,19 +358,8 @@
     // wxMenuItemBase will do stock ID checks
     wxMenuItemBase::SetItemLabel(sText);
 
-    // m_text could now be different from 'text' if we are a stock menu item,
-    // so use only m_text below
+    HWND hMenu = GetHmenuOf(m_parentMenu);
 
-    OWNER_DRAWN_ONLY(wxOwnerDrawn::SetName(m_text));
-#if  wxUSE_OWNER_DRAWN
-    if (rText.IsEmpty())
-        SetAccelString(m_text.AfterFirst(wxT('\t')));
-    else
-        SetAccelString(rText.AfterFirst(wxT('\t')));
-#endif // wxUSE_OWNER_DRAWN
-
-    HWND                            hMenu = GetHmenuOf(m_parentMenu);
-
     wxCHECK_RET(hMenu, wxT("menuitem without menu"));
 
 #if wxUSE_ACCEL
@@ -456,14 +427,371 @@
     }
 } // end of wxMenuItem::SetText
 
-void wxMenuItem::SetCheckable(
-  bool                              bCheckable
-)
+#if wxUSE_OWNER_DRAWN
+
+wxString wxMenuItem::GetName() const
 {
-    wxMenuItemBase::SetCheckable(bCheckable);
-    OWNER_DRAWN_ONLY(wxOwnerDrawn::SetCheckable(bCheckable));
-} // end of wxMenuItem::SetCheckable
+    return GetItemLabelText();
+}
 
+bool wxMenuItem::OnMeasureItem( size_t* pWidth, size_t* pHeight )
+{
+    wxMemoryDC vDC;
+
+    wxString  sStr = GetName();
+
+    //
+    // If we have a valid accel string, then pad out
+    // the menu string so that the menu and accel string are not
+    // placed on top of each other.
+    wxString accel = GetItemLabel().AfterFirst(wxT('\t'));
+    if (!accel.empty() )
+    {
+        sStr.Pad(sStr.length()%8);
+        sStr += accel;
+    }
+    vDC.SetFont(GetFont());
+    vDC.GetTextExtent( sStr
+                      ,(wxCoord *)pWidth
+                      ,(wxCoord *)pHeight
+                     );
+    if (!accel.empty())
+    {
+        //
+        // Measure the accelerator string, and add its width to
+        // the total item width, plus 16 (Accelerators are right justified,
+        // with the right edge of the text rectangle 16 pixels left of
+        // the right edge of the menu)
+        //
+        int                         nAccelWidth;
+        int                         nAccelHeight;
+
+        vDC.GetTextExtent( m_strAccel
+                          ,&nAccelWidth
+                          ,&nAccelHeight
+                         );
+        *pWidth += nAccelWidth;
+    }
+
+    //
+    // Add space at the end of the menu for the submenu expansion arrow.
+    // This will also allow offsetting the accel string from the right edge
+    //
+    *pWidth = (size_t)(*pWidth + GetDefaultMarginWidth() * 1.5);
+
+    //
+    // JACS: items still look too tightly packed, so adding 5 pixels.
+    //
+    (*pHeight) += 5;
+
+    //
+    // Ray Gilbert's changes - Corrects the problem of a BMP
+    // being placed next to text in a menu item, and the BMP does
+    // not match the size expected by the system.  This will
+    // resize the space so the BMP will fit.  Without this, BMPs
+    // must be no larger or smaller than 16x16.
+    //
+    if (m_bmpChecked.Ok())
+    {
+        //
+        // Is BMP height larger then text height?
+        //
+        size_t                      nAdjustedHeight = m_bmpChecked.GetHeight() +
+                                                      wxSystemSettings::GetMetric(wxSYS_EDGE_Y);
+        if (*pHeight < nAdjustedHeight)
+            *pHeight = nAdjustedHeight;
+
+        //
+        // Does BMP encroach on default check menu position?
+        //
+        size_t                      nAdjustedWidth = m_bmpChecked.GetWidth() +
+                                                     (wxSystemSettings::GetMetric(wxSYS_EDGE_X) * 2);
+
+        //
+        // Do we need to widen margin to fit BMP?
+        //
+        if ((size_t)GetMarginWidth() < nAdjustedWidth)
+            SetMarginWidth(nAdjustedWidth);
+
+        //
+        // Add the size of the bitmap to our total size...
+        //
+        *pWidth += GetMarginWidth();
+    }
+
+    //
+    // Add the size of the bitmap to our total size - even if we don't have
+    // a bitmap we leave room for one...
+    //
+    *pWidth += GetMarginWidth();
+
+    //
+    // Make sure that this item is at least as
+    // tall as the user's system settings specify
+    //
+    const size_t heightStd = 6; // FIXME: get value from the system
+    if ( *pHeight < heightStd )
+      *pHeight = heightStd;
+    m_nHeight = *pHeight;                // remember height for use in OnDrawItem
+    return true;
+} // end of wxOwnerDrawn::OnMeasureItem
+
+bool wxMenuItem::OnDrawItem( wxDC& rDC,
+                               const wxRect& rRect,
+                               wxODAction eAction,
+                               wxODStatus eStatus )
+{
+
+    //
+    // Select the font and draw the text
+    // ---------------------------------
+    //
+
+    CHARBUNDLE                      vCbnd;
+    wxPMDCImpl                      *impl = (wxPMDCImpl*) rDC.GetImpl();
+    HPS                             hPS= impl->GetHPS();
+    wxFont                          vFont;
+    wxColour                        vColBack;
+    wxColour                        vColText;
+    COLORREF                        vRef;
+    RECTL                           vRect = {rRect.x + 4, rRect.y + 1, rRect.x + (rRect.width - 2), rRect.y + rRect.height};
+
+    memset(&vCbnd, 0, sizeof(CHARBUNDLE));
+
+    GetFontToUse(vFont);
+    GetColourToUse(eStatus, vColText, vColBack);
+
+    rDC.SetFont(vFont);
+    rDC.SetTextBackground(vColBack);
+    rDC.SetTextForeground(vColText);
+    rDC.SetBackgroundMode(wxTRANSPARENT);
+
+    vCbnd.lColor     = vColText.GetPixel();
+    vCbnd.lBackColor = vColBack.GetPixel();
+    ::GpiSetAttrs( hPS
+                  ,PRIM_CHAR
+                  ,CBB_BACK_COLOR | CBB_COLOR
+                  ,0
+                  ,&vCbnd
+                 );
+    ::GpiSetBackMix( hPS
+                    ,BM_LEAVEALONE
+                   );
+
+    //
+    // Paint the background
+    //
+    ::WinFillRect(hPS, &vRect, vColBack.GetPixel());
+
+    //
+    // Determine where to draw and leave space for a check-mark.
+    //
+    int nX = rRect.x + GetMarginWidth();
+
+    //
+    // Unfortunately, unlike Win32, PM has no owner drawn specific text
+    // drawing methods like ::DrawState that can cleanly handle accel
+    // mnemonics and deal, automatically, with various states, so we have
+    // to handle them ourselves. Notice Win32 can't handle \t in ownerdrawn
+    // strings either.  We cannot handle mnemonics either.  We display
+    // them, though, in the hope we can figure them out some day.
+    //
+
+    //
+    // Display main text and accel text separately to align better
+    //
+    wxString sTgt = wxT("\t");
+    wxString sFullString = GetItemLabel(); // need to save the original text
+    wxString sAccel;
+    int      nIndex;
+    size_t   nWidth;
+    size_t   nCharWidth;
+    size_t   nHeight;
+    bool     bFoundMnemonic = false;
+    bool     bFoundAccel = false;
+
+    //
+    // Deal with the tab, extracting the Accel text
+    //
+    nIndex = sFullString.Find(sTgt);
+    if (nIndex != -1)
+    {
+        bFoundAccel = true;
+        sAccel = sFullString.Mid(nIndex + 1);
+        sFullString.Remove(nIndex);
+    }
+
+    //
+    // Deal with the mnemonic character
+    //
+    sTgt = wxT("~");
+    nIndex = sFullString.Find(sTgt);
+    if (nIndex != -1)
+    {
+        wxString sTmp = sFullString;
+
+        bFoundMnemonic = true;
+        sTmp.Remove(nIndex);
+        rDC.GetTextExtent( sTmp
+                          ,(wxCoord *)&nWidth
+                          ,(wxCoord *)&nHeight
+                         );
+        sTmp = sFullString[(size_t)(nIndex + 1)];
+        rDC.GetTextExtent( sTmp
+                          ,(wxCoord *)&nCharWidth
+                          ,(wxCoord *)&nHeight
+                         );
+        sFullString.Replace(sTgt.c_str(), wxEmptyString, true);
+    }
+
+    //
+    // Draw the main item text sans the accel text
+    //
+    POINTL                      vPntStart = {nX, rRect.y + 4};
+    ::GpiCharStringAt( impl->GetHPS()
+                      ,&vPntStart
+                      ,sFullString.length()
+                      ,sFullString.char_str()
+                     );
+    if (bFoundMnemonic)
+    {
+        //
+        // Underline the mnemonic -- still won't work, but at least it "looks" right
+        //
+        wxPen                       vPen;
+        POINTL                      vPntEnd = {nX + nWidth + nCharWidth - 3, rRect.y + 2}; //CharWidth is bit wide
+
+        vPntStart.x = nX + nWidth - 1;
+        vPntStart.y = rRect.y + 2; // Make it look pretty!
+        vPen = wxPen(vColText, 1, wxSOLID); // Assuming we are always black
+        rDC.SetPen(vPen);
+        ::GpiMove(hPS, &vPntStart);
+        ::GpiLine(hPS, &vPntEnd);
+    }
+
+    //
+    // Now draw the accel text
+    //
+    if (bFoundAccel)
+    {
+        size_t                      nWidth;
+        size_t                      nHeight;
+
+        rDC.GetTextExtent( sAccel
+                          ,(wxCoord *)&nWidth
+                          ,(wxCoord *)&nHeight
+                         );
+        //
+        // Back off the starting position from the right edge
+        //
+        vPntStart.x = rRect.width - (nWidth + 7);
+        vPntStart.y = rRect.y + 4;
+        ::GpiCharStringAt( impl->GetHPS()
+                          ,&vPntStart
+                          ,sAccel.length()
+                          ,sAccel.char_str()
+                         );
+    }
+
+    //
+    // Draw the bitmap
+    // ---------------
+    //
+    if (IsCheckable() && !m_bmpChecked.Ok())
+    {
+        if (eStatus & wxODChecked)
+        {
+            RECTL                   vRect;
+            HBITMAP                 hBmpCheck = ::WinGetSysBitmap(HWND_DESKTOP, SBMP_MENUCHECK);
+
+            vRect.xLeft   = rRect.x;
+            vRect.xRight  = rRect.x + GetMarginWidth();
+            vRect.yBottom = rRect.y;
+            vRect.yTop    = rRect.y + m_nHeight - 3;
+
+            ::WinDrawBitmap( hPS             // PS for this menuitem
+                            ,hBmpCheck       // system checkmark
+                            ,NULL            // draw the whole bitmap
+                            ,(PPOINTL)&vRect // destination -- bottom left corner of the menuitem area
+                            ,0L              // ignored
+                            ,0L              // draw a bitmap
+                            ,DBM_NORMAL      // draw normal size
+                           );
+        }
+    }
+    else
+    {
+        //
+        // For uncheckable item we use only the 'checked' bitmap
+        //
+        wxBitmap vBmp(GetBitmap(IsCheckable() ? ((eStatus & wxODChecked) != 0) : TRUE));
+
+        if (vBmp.Ok())
+        {
+
+            wxMemoryDC              vDCMem(&rDC);
+            wxMemoryDC*             pOldDC = (wxMemoryDC*)vBmp.GetSelectedInto();
+
+            if(pOldDC != NULL)
+            {
+                vBmp.SetSelectedInto(NULL);
+            }
+            vDCMem.SelectObject(vBmp);
+
+            //
+            // Center bitmap
+            //
+            int                     nBmpWidth = vBmp.GetWidth();
+            int                     nBmpHeight = vBmp.GetHeight();
+
+            //
+            // There should be enough space!
+            //
+            wxASSERT((nBmpWidth <= rRect.width) && (nBmpHeight <= rRect.height));
+
+            int                     nHeightDiff = m_nHeight - nBmpHeight;
+
+            rDC.Blit( rRect.x + (GetMarginWidth() - nBmpWidth) / 2
+                     ,rRect.y + nHeightDiff / 2
+                     ,nBmpWidth
+                     ,nBmpHeight
+                     ,&vDCMem
+                     ,0
+                     ,0
+                     ,wxCOPY
+                     ,true
+                    );
+
+            if (eStatus & wxODSelected)
+            {
+                POINTL              vPnt1 = {rRect.x + 1, rRect.y + 3}; // Leave a little background border
+                POINTL              vPnt2 = {rRect.x + GetMarginWidth(), rRect.y + m_nHeight - 3};
+
+                LINEBUNDLE          vLine;
+
+                vLine.lColor = vColBack.GetPixel();
+                ::GpiSetAttrs( hPS
+                              ,PRIM_LINE
+                              ,LBB_COLOR
+                              ,0
+                              ,&vLine
+                             );
+                ::GpiMove(hPS, &vPnt1);
+                ::GpiBox( hPS
+                         ,DRO_OUTLINE
+                         ,&vPnt2
+                         ,0L
+                         ,0L
+                        );
+            }
+            vBmp.SetSelectedInto(NULL);
+        }
+    }
+    return true;
+} // end of wxOwnerDrawn::OnDrawItem
+
+#endif // wxUSE_OWNER_DRAWN
+
 // ----------------------------------------------------------------------------
 // wxMenuItemBase
 // ----------------------------------------------------------------------------
Index: src/os2/ownerdrw.cpp
===================================================================
--- src/os2/ownerdrw.cpp	(wersja 61986)
+++ src/os2/ownerdrw.cpp	(kopia robocza)
@@ -2,7 +2,7 @@
 // Name:        src/os2/ownerdrw.cpp
 // Purpose:     implementation of wxOwnerDrawn class
 // Author:      David Webster
-// Modified by:
+// Modified by: Marcin Malich
 // Created:     10/12/99
 // RCS-ID:      $Id$
 // Copyright:   (c) David Webster
@@ -14,166 +14,26 @@
 
 #if wxUSE_OWNER_DRAWN
 
-#ifndef WX_PRECOMP
-    #include "wx/window.h"
-    #include "wx/os2/private.h"
-    #include "wx/font.h"
-    #include "wx/bitmap.h"
-    #include "wx/dcmemory.h"
-    #include "wx/menu.h"
-    #include "wx/utils.h"
-    #include "wx/settings.h"
-    #include "wx/menuitem.h"
-#endif
-
 #include "wx/ownerdrw.h"
+#include "wx/os2/private.h"
 #include "wx/os2/dcclient.h"
 
+// ----------------------------------------------------------------------------
+// constants for base class
+// ----------------------------------------------------------------------------
+
+int wxOwnerDrawnBase::ms_defaultMargin = 3;
+
 // ============================================================================
 // implementation of wxOwnerDrawn class
 // ============================================================================
 
-//
-// ctor
-// ----
-//
-wxOwnerDrawn::wxOwnerDrawn( const wxString& rsStr,
-                            bool            bCheckable,
-                            bool            WXUNUSED(bMenuItem) )
-: m_strName(rsStr)
-{
-    m_bCheckable   = bCheckable;
-    m_bOwnerDrawn  = false;
-    m_nHeight      = 0;
-    m_nMarginWidth = ms_nLastMarginWidth;
-    if (wxNORMAL_FONT)
-        m_font = *wxNORMAL_FONT;
-} // end of wxOwnerDrawn::wxOwnerDrawn
-
-wxOwnerDrawn::~wxOwnerDrawn() { }
-
-size_t wxOwnerDrawn::ms_nDefaultMarginWidth = 15;
-
-size_t wxOwnerDrawn::ms_nLastMarginWidth = ms_nDefaultMarginWidth;
-
-//
-// Drawing
-// -------
-//
-
-bool wxOwnerDrawn::OnMeasureItem( size_t* pWidth,
-                                  size_t* pHeight )
-{
-    wxMemoryDC vDC;
-
-    wxString  sStr = wxStripMenuCodes(m_strName);
-
-    //
-    // If we have a valid accel string, then pad out
-    // the menu string so that the menu and accel string are not
-    // placed on top of each other.
-    if (!m_strAccel.empty() )
-    {
-        sStr.Pad(sStr.length()%8);
-        sStr += m_strAccel;
-    }
-    vDC.SetFont(GetFont());
-    vDC.GetTextExtent( sStr
-                      ,(wxCoord *)pWidth
-                      ,(wxCoord *)pHeight
-                     );
-    if (!m_strAccel.empty())
-    {
-        //
-        // Measure the accelerator string, and add its width to
-        // the total item width, plus 16 (Accelerators are right justified,
-        // with the right edge of the text rectangle 16 pixels left of
-        // the right edge of the menu)
-        //
-        int                         nAccelWidth;
-        int                         nAccelHeight;
-
-        vDC.GetTextExtent( m_strAccel
-                          ,&nAccelWidth
-                          ,&nAccelHeight
-                         );
-        *pWidth += nAccelWidth;
-    }
-
-    //
-    // Add space at the end of the menu for the submenu expansion arrow.
-    // This will also allow offsetting the accel string from the right edge
-    //
-    *pWidth = (size_t)(*pWidth + GetDefaultMarginWidth() * 1.5);
-
-    //
-    // JACS: items still look too tightly packed, so adding 5 pixels.
-    //
-    (*pHeight) += 5;
-
-    //
-    // Ray Gilbert's changes - Corrects the problem of a BMP
-    // being placed next to text in a menu item, and the BMP does
-    // not match the size expected by the system.  This will
-    // resize the space so the BMP will fit.  Without this, BMPs
-    // must be no larger or smaller than 16x16.
-    //
-    if (m_bmpChecked.Ok())
-    {
-        //
-        // Is BMP height larger then text height?
-        //
-        size_t                      nAdjustedHeight = m_bmpChecked.GetHeight() +
-                                                      wxSystemSettings::GetMetric(wxSYS_EDGE_Y);
-        if (*pHeight < nAdjustedHeight)
-            *pHeight = nAdjustedHeight;
-
-        //
-        // Does BMP encroach on default check menu position?
-        //
-        size_t                      nAdjustedWidth = m_bmpChecked.GetWidth() +
-                                                     (wxSystemSettings::GetMetric(wxSYS_EDGE_X) * 2);
-
-        //
-        // Do we need to widen margin to fit BMP?
-        //
-        if ((size_t)GetMarginWidth() < nAdjustedWidth)
-            SetMarginWidth(nAdjustedWidth);
-
-        //
-        // Add the size of the bitmap to our total size...
-        //
-        *pWidth += GetMarginWidth();
-    }
-
-    //
-    // Add the size of the bitmap to our total size - even if we don't have
-    // a bitmap we leave room for one...
-    //
-    *pWidth += GetMarginWidth();
-
-    //
-    // Make sure that this item is at least as
-    // tall as the user's system settings specify
-    //
-    const size_t heightStd = 6; // FIXME: get value from the system
-    if ( *pHeight < heightStd )
-      *pHeight = heightStd;
-    m_nHeight = *pHeight;                // remember height for use in OnDrawItem
-    return true;
-} // end of wxOwnerDrawn::OnMeasureItem
-
 // draw the item
 bool wxOwnerDrawn::OnDrawItem( wxDC& rDC,
                                const wxRect& rRect,
                                wxODAction eAction,
                                wxODStatus eStatus )
 {
-    //
-    // We do nothing on focus change
-    //
-    if (eAction == wxODFocusChanged )
-        return true;
 
     //
     // Select the font and draw the text
@@ -183,6 +43,7 @@
     CHARBUNDLE                      vCbnd;
     wxPMDCImpl                      *impl = (wxPMDCImpl*) rDC.GetImpl();
     HPS                             hPS= impl->GetHPS();
+    wxFont                          vFont;
     wxColour                        vColBack;
     wxColour                        vColText;
     COLORREF                        vRef;
@@ -190,85 +51,14 @@
 
     memset(&vCbnd, 0, sizeof(CHARBUNDLE));
 
-    //
-    // Use default font if no font set
-    //
-    if (m_font.Ok())
-    {
-        m_font.RealizeResource();
-    }
-    else
-    {
-        ::GpiSetCharSet(hPS, LCID_DEFAULT);
-    }
+    GetFontToUse(vFont);
+    GetColourToUse(eStatus, vColText, vColBack);
 
-    //
-    // Based on the status of the menu item, pick the right colors
-    //
-    if (eStatus & wxODSelected)
-    {
-        vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                         ,SYSCLR_MENUHILITEBGND
-                                         ,0L
-                                        );
-        vColBack.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-        vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                         ,SYSCLR_MENUHILITE
-                                         ,0L
-                                        );
-        vColText.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-    }
-    else if (eStatus & wxODDisabled)
-    {
-        vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                         ,SYSCLR_MENU // Light gray
-                                         ,0L
-                                        );
-        vColBack.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-        vRef = (ULONG)::WinQuerySysColor( HWND_DESKTOP
-                                         ,SYSCLR_MENUDISABLEDTEXT // dark gray
-                                         ,0L
-                                        );
-        vColText.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-    }
-    else
-    {
-        //
-        // Fall back to default colors if none explicitly specified
-        //
-        vRef = ::WinQuerySysColor( HWND_DESKTOP
-                                  ,SYSCLR_MENU  // we are using gray for all our window backgrounds in wxWidgets
-                                  ,0L
-                                 );
-        vColBack.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-        vRef = ::WinQuerySysColor( HWND_DESKTOP
-                                  ,SYSCLR_WINDOWTEXT // Black
-                                  ,0L
-                                 );
-        vColText.Set( GetRValue(vRef)
-                     ,GetGValue(vRef)
-                     ,GetBValue(vRef)
-                    );
-    }
-
+    rDC.SetFont(vFont);
     rDC.SetTextBackground(vColBack);
     rDC.SetTextForeground(vColText);
     rDC.SetBackgroundMode(wxTRANSPARENT);
+
     vCbnd.lColor     = vColText.GetPixel();
     vCbnd.lBackColor = vColBack.GetPixel();
     ::GpiSetAttrs( hPS
@@ -289,7 +79,7 @@
     //
     // Determine where to draw and leave space for a check-mark.
     //
-    int                             nX = rRect.x + GetMarginWidth();
+    int nX = rRect.x + GetMarginWidth();
 
     //
     // Unfortunately, unlike Win32, PM has no owner drawn specific text
@@ -301,34 +91,19 @@
     //
 
     //
-    // Display main text and accel text separately to align better
+    // Display main text
     //
-    wxString sTgt = wxT("\t");
-    wxString sFullString = m_strName; // need to save the original text
-    wxString sAccel;
+    wxString sFullString = GetItemLabel(); // need to save the original text
     int      nIndex;
     size_t   nWidth;
     size_t   nCharWidth;
     size_t   nHeight;
     bool     bFoundMnemonic = false;
-    bool     bFoundAccel = false;
 
     //
-    // Deal with the tab, extracting the Accel text
-    //
-    nIndex = sFullString.Find(sTgt);
-    if (nIndex != -1)
-    {
-        bFoundAccel = true;
-        sAccel = sFullString.Mid(nIndex + 1);
-        sFullString.Remove(nIndex);
-    }
-
-    //
     // Deal with the mnemonic character
     //
-    sTgt = wxT("~");
-    nIndex = sFullString.Find(sTgt);
+    nIndex = sFullString.Find(wxT("~"));
     if (nIndex != -1)
     {
         wxString sTmp = sFullString;
@@ -372,124 +147,6 @@
         ::GpiLine(hPS, &vPntEnd);
     }
 
-    //
-    // Now draw the accel text
-    //
-    if (bFoundAccel)
-    {
-        size_t                      nWidth;
-        size_t                      nHeight;
-
-        rDC.GetTextExtent( sAccel
-                          ,(wxCoord *)&nWidth
-                          ,(wxCoord *)&nHeight
-                         );
-        //
-        // Back off the starting position from the right edge
-        //
-        vPntStart.x = rRect.width - (nWidth + 7);
-        vPntStart.y = rRect.y + 4;
-        ::GpiCharStringAt( impl->GetHPS()
-                          ,&vPntStart
-                          ,sAccel.length()
-                          ,sAccel.char_str()
-                         );
-    }
-
-    //
-    // Draw the bitmap
-    // ---------------
-    //
-    if (IsCheckable() && !m_bmpChecked.Ok())
-    {
-        if (eStatus & wxODChecked)
-        {
-            RECTL                   vRect;
-            HBITMAP                 hBmpCheck = ::WinGetSysBitmap(HWND_DESKTOP, SBMP_MENUCHECK);
-
-            vRect.xLeft   = rRect.x;
-            vRect.xRight  = rRect.x + GetMarginWidth();
-            vRect.yBottom = rRect.y;
-            vRect.yTop    = rRect.y + m_nHeight - 3;
-
-            ::WinDrawBitmap( hPS             // PS for this menuitem
-                            ,hBmpCheck       // system checkmark
-                            ,NULL            // draw the whole bitmap
-                            ,(PPOINTL)&vRect // destination -- bottom left corner of the menuitem area
-                            ,0L              // ignored
-                            ,0L              // draw a bitmap
-                            ,DBM_NORMAL      // draw normal size
-                           );
-        }
-    }
-    else
-    {
-        //
-        // For uncheckable item we use only the 'checked' bitmap
-        //
-        wxBitmap vBmp(GetBitmap(IsCheckable() ? ((eStatus & wxODChecked) != 0) : TRUE));
-
-        if (vBmp.Ok())
-        {
-
-            wxMemoryDC              vDCMem(&rDC);
-            wxMemoryDC*             pOldDC = (wxMemoryDC*)vBmp.GetSelectedInto();
-
-            if(pOldDC != NULL)
-            {
-                vBmp.SetSelectedInto(NULL);
-            }
-            vDCMem.SelectObject(vBmp);
-
-            //
-            // Center bitmap
-            //
-            int                     nBmpWidth = vBmp.GetWidth();
-            int                     nBmpHeight = vBmp.GetHeight();
-
-            //
-            // There should be enough space!
-            //
-            wxASSERT((nBmpWidth <= rRect.width) && (nBmpHeight <= rRect.height));
-
-            int                     nHeightDiff = m_nHeight - nBmpHeight;
-
-            rDC.Blit( rRect.x + (GetMarginWidth() - nBmpWidth) / 2
-                     ,rRect.y + nHeightDiff / 2
-                     ,nBmpWidth
-                     ,nBmpHeight
-                     ,&vDCMem
-                     ,0
-                     ,0
-                     ,wxCOPY
-                     ,true
-                    );
-
-            if (eStatus & wxODSelected)
-            {
-                POINTL              vPnt1 = {rRect.x + 1, rRect.y + 3}; // Leave a little background border
-                POINTL              vPnt2 = {rRect.x + GetMarginWidth(), rRect.y + m_nHeight - 3};
-
-                LINEBUNDLE          vLine;
-
-                vLine.lColor = vColBack.GetPixel();
-                ::GpiSetAttrs( hPS
-                              ,PRIM_LINE
-                              ,LBB_COLOR
-                              ,0
-                              ,&vLine
-                             );
-                ::GpiMove(hPS, &vPnt1);
-                ::GpiBox( hPS
-                         ,DRO_OUTLINE
-                         ,&vPnt2
-                         ,0L
-                         ,0L
-                        );
-            }
-            vBmp.SetSelectedInto(NULL);
-        }
-    }
     return true;
 } // end of wxOwnerDrawn::OnDrawItem
 

Index: samples/minimal/minimal.cpp
===================================================================
--- samples/minimal/minimal.cpp	(revision 72262)
+++ samples/minimal/minimal.cpp	(working copy)
@@ -66,9 +66,13 @@
 
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
+    void OnTest(wxCommandEvent& event);
+    void OnTestTimer(wxTimerEvent& event);
     void OnAbout(wxCommandEvent& event);
 
 private:
+    wxTimer testTimer;
+    int testState;
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -82,6 +86,10 @@
 {
     // menu items
     Minimal_Quit = wxID_EXIT,
+    Minimal_Test1 = wxID_HIGHEST + 1,
+    Minimal_Test2,
+    Minimal_Test3,
+    Minimal_Test4,
 
     // it is important for the id corresponding to the "About" command to have
     // this standard value as otherwise it won't be handled properly under Mac
@@ -98,7 +106,9 @@
 // simple menu events like this the static method is much simpler.
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
+    EVT_MENU_RANGE(Minimal_Test1, Minimal_Test4, MyFrame::OnTest)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_TIMER(wxID_ANY,     MyFrame::OnTestTimer)
 END_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
@@ -156,6 +166,10 @@
     wxMenu *helpMenu = new wxMenu;
     helpMenu->Append(Minimal_About, "&About\tF1", "Show about dialog");
 
+    fileMenu->Append(Minimal_Test1, "Test Hide-Minimize-Show-Restore");
+    fileMenu->Append(Minimal_Test2, "Test Minimize-Hide-Restore-Show");
+    fileMenu->Append(Minimal_Test3, "Test Hide-Minimize-Restore-Show");
+    fileMenu->Append(Minimal_Test4, "Test Minimize-Hide-Show-Restore");
     fileMenu->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
 
     // now append the freshly created menu to the menu bar...
@@ -172,6 +186,8 @@
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+    testTimer.SetOwner(this);
 }
 
 
@@ -183,6 +199,37 @@
     Close(true);
 }
 
+void MyFrame::OnTest(wxCommandEvent& event)
+{
+    testState = 10*(event.GetId() - Minimal_Test1);
+    testTimer.Start(2000, wxTIMER_CONTINUOUS);
+}
+
+void MyFrame::OnTestTimer(wxTimerEvent& WXUNUSED(event))
+{
+    switch (testState++) {
+        case  0: Show(false);       break;
+        case  1: Iconize(true);     break;
+        case  2: Show(true);        break;
+        case  3: Iconize(false);    testTimer.Stop(); break;
+
+        case 10: Iconize(true);     break;
+        case 11: Show(false);       break;
+        case 12: Iconize(false);    break;
+        case 13: Show(true);        testTimer.Stop(); break;
+
+        case 20: Show(false);       break;
+        case 21: Iconize(true);     break;
+        case 22: Iconize(false);    break;
+        case 23: Show(true);        testTimer.Stop(); break;
+
+        case 30: Iconize(true);     break;
+        case 31: Show(false);       break;
+        case 32: Show(true);        break;
+        case 33: Iconize(false);    testTimer.Stop(); break;
+    }
+}
+
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageBox(wxString::Format

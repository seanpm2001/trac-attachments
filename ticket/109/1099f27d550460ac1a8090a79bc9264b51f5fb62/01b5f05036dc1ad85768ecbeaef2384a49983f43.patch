diff -rbu2 org_wx/include/wx/fileconf.h mh_wx/include/wx/fileconf.h
--- org_wx/include/wx/fileconf.h	Fri Nov  9 18:35:51 2001
+++ mh_wx/include/wx/fileconf.h	Fri Nov  9 18:29:24 2001
@@ -122,4 +122,7 @@
                long style = wxCONFIG_USE_LOCAL_FILE);
 
+    // ctor that takes an input stream.
+  wxFileConfig(wxInputStream &InStream);
+
     // dtor will save unsaved data
   virtual ~wxFileConfig();
@@ -211,5 +214,5 @@
 
   // parse the whole file
-  void Parse(wxTextFile& file, bool bLocal);
+  void Parse(wxTextBuffer& buffer, bool bLocal);
 
   // the same as SetPath("/")
diff -rbu2 org_wx/include/wx/textfile.h mh_wx/include/wx/textfile.h
--- org_wx/include/wx/textfile.h	Fri Nov  9 18:36:03 2001
+++ mh_wx/include/wx/textfile.h	Thu Nov  8 13:56:32 2001
@@ -21,25 +21,6 @@
 #include "wx/defs.h"
 
-// ----------------------------------------------------------------------------
-// constants
-// ----------------------------------------------------------------------------
-
-// NB: this is always defined, even if !wxUSE_TEXTFILE
-
-// the line termination type
-enum wxTextFileType
-{
-    wxTextFileType_None,  // incomplete (the last line of the file only)
-    wxTextFileType_Unix,  // line is terminated with 'LF' = 0xA = 10 = '\n'
-    wxTextFileType_Dos,   //                         'CR' 'LF'
-    wxTextFileType_Mac,   //                         'CR' = 0xD = 13 = '\r'
-    wxTextFileType_Os2    //                         'CR' 'LF'
-};
-
-#if wxUSE_TEXTFILE
-
-#include "wx/string.h"
 #include "wx/file.h"
-#include "wx/dynarray.h"
+#include "wx/textbuffer.h"
 
 // ----------------------------------------------------------------------------
@@ -47,153 +28,21 @@
 // ----------------------------------------------------------------------------
 
-WX_DEFINE_EXPORTED_ARRAY(wxTextFileType, ArrayFileType);
-
-class WXDLLEXPORT wxTextFile
+class WXDLLEXPORT wxTextFile : public wxTextBuffer
 {
 public:
-  // constants and static functions
-    // default type for current platform (determined at compile time)
-  static const wxTextFileType typeDefault;
-
-    // this function returns a string which is identical to "text" passed in
-    // except that the line terminator characters are changed to correspond the
-    // given type. Called with the default argument, the function translates
-    // the string to the native format (Unix for Unix, DOS for Windows, ...).
-  static wxString Translate(const wxString& text,
-                            wxTextFileType type = typeDefault);
-
-    // get the file termination string
-  static const wxChar *GetEOL(wxTextFileType type = typeDefault);
-
-  // ctors
-    // def ctor, use Open(string)
+    // Constructors.
   wxTextFile() { }
-    //
-  wxTextFile(const wxString& strFile);
-
-  // file operations
-    // file exists?
-  bool Exists() const;
-    // create the file if it doesn't already exist
-  bool Create();
-    // same as Create() but with (another) file name
-  bool Create(const wxString& strFile);
-    // Open() also loads file in memory on success
-  bool Open(wxMBConv& conv = wxConvLibc);
-    // same as Open() but with (another) file name
-  bool Open(const wxString& strFile, wxMBConv& conv = wxConvLibc);
-    // closes the file and frees memory, losing all changes
-  bool Close();
-    // is file currently opened?
-  bool IsOpened() const { return m_isOpened; }
-
-  // accessors
-    // get the number of lines in the file
-  size_t GetLineCount() const { return m_aLines.Count(); }
-    // the returned line may be modified (but don't add CR/LF at the end!)
-  wxString& GetLine(size_t n)    const { return m_aLines[n]; }
-  wxString& operator[](size_t n) const { return m_aLines[n]; }
-
-    // the current line has meaning only when you're using
-    // GetFirstLine()/GetNextLine() functions, it doesn't get updated when
-    // you're using "direct access" i.e. GetLine()
-  size_t GetCurrentLine() const { return m_nCurLine; }
-  void GoToLine(size_t n) { m_nCurLine = n; }
-  bool Eof() const { return (m_aLines.Count() == 0 || m_nCurLine == m_aLines.Count() - 1); }
-
-    // these methods allow more "iterator-like" traversal of the list of
-    // lines, i.e. you may write something like:
-    //  for ( str = GetFirstLine(); !Eof(); str = GetNextLine() ) { ... }
-
-    // NB: const is commented out because not all compilers understand
-    //     'mutable' keyword yet (m_nCurLine should be mutable)
-  wxString& GetFirstLine() /* const */ { return m_aLines[m_nCurLine = 0]; }
-  wxString& GetNextLine()  /* const */ { return m_aLines[++m_nCurLine];   }
-  wxString& GetPrevLine()  /* const */
-    { wxASSERT(m_nCurLine > 0); return m_aLines[--m_nCurLine];   }
-  wxString& GetLastLine() /* const */
-    { return m_aLines[m_nCurLine = m_aLines.Count() - 1]; }
-
-    // get the type of the line (see also GetEOL)
-  wxTextFileType GetLineType(size_t n) const { return m_aTypes[n]; }
-    // guess the type of file (m_file is supposed to be opened)
-  wxTextFileType GuessType() const;
-    // get the name of the file
-  const wxChar *GetName() const { return m_strFile.c_str(); }
-
-  // add/remove lines
-    // add a line to the end
-  void AddLine(const wxString& str, wxTextFileType type = typeDefault)
-    { m_aLines.Add(str); m_aTypes.Add(type); }
-    // insert a line before the line number n
-  void InsertLine(const wxString& str,
-                  size_t n,
-                  wxTextFileType type = typeDefault)
-    { m_aLines.Insert(str, n); m_aTypes.Insert(type, n); }
-    // delete one line
-  void RemoveLine(size_t n) { m_aLines.RemoveAt(n); m_aTypes.RemoveAt(n); }
+    wxTextFile(const wxString& strFileName);
 
-  // change the file on disk (default argument means "don't change type")
-  // possibly in another format
-  bool Write(wxTextFileType typeNew = wxTextFileType_None,
-             wxMBConv& conv = wxConvLibc);
-
-  // dtor
-  ~wxTextFile();
+protected:
+    virtual bool OnExists() const;
+    virtual bool OnOpen(const wxString &strBufferName, wxTextBufferOpenMode OpenMode);
+    virtual bool OnClose();
+    virtual bool OnRead(wxMBConv& conv);
+    virtual bool OnWrite(wxTextFileType typeNew, wxMBConv& conv = wxConvLibc);
 
 private:
-  // copy ctor/assignment operator not implemented
-  wxTextFile(const wxTextFile&);
-  wxTextFile& operator=(const wxTextFile&);
-
-  // read the file in memory (m_file is supposed to be just opened)
-  bool Read(wxMBConv& conv);
-
-  wxFile        m_file;     // current file
-
-  ArrayFileType m_aTypes;   // type of each line
-  wxArrayString m_aLines;   // lines of file
-
-  size_t        m_nCurLine; // number of current line in the file
-
-  bool          m_isOpened; // was the file successfully opened the last time?
-
-  wxString      m_strFile;  // name of the file
+    wxFile m_file;
 };
-
-#else // !wxUSE_TEXTFILE
-
-// these static wxTextFile methods are used internally by wxWindows, so should
-// be defined even if we're compiling without wxTextFile at all.
-
-class WXDLLEXPORT wxTextFile
-{
-public:
-    // default type for current platform (determined at compile time)
-    static const wxTextFileType typeDefault;
-
-    // this function returns a string which is identical to "text" passed in
-    // except that the line terminator characters are changed to correspond the
-    // given type. Called with the default argument, the function translates
-    // the string to the native format (Unix for Unix, DOS for Windows, ...).
-    static wxString Translate(const wxString& text,
-                              wxTextFileType type = typeDefault);
-
-    // get the file termination string
-    static const wxChar *GetEOL(wxTextFileType type = typeDefault);
-
-private:
-    // copy ctor/assignment operator not implemented
-    wxTextFile(const wxTextFile&);
-    wxTextFile& operator=(const wxTextFile&);
-
-    // suppress the gcc warning: 'class defines only private constructors and
-    // has no friends'
-#ifdef __GNUG__
-    friend class wxTextFileDummyFriend;
-#endif // gcc
-};
-
-#endif // wxUSE_TEXTFILE
 
 #endif // _WX_TEXTFILE_H
diff -rbu2 org_wx/src/common/fileconf.cpp mh_wx/src/common/fileconf.cpp
--- org_wx/src/common/fileconf.cpp	Fri Nov  9 18:52:40 2001
+++ mh_wx/src/common/fileconf.cpp	Fri Nov  9 18:30:29 2001
@@ -39,4 +39,5 @@
 #include  "wx/config.h"
 #include  "wx/fileconf.h"
+#include  "wx/stream.h"
 
 #include  "wx/utils.h"    // for wxGetHomeDir
@@ -524,4 +525,68 @@
 }
 
+
+wxFileConfig::wxFileConfig(wxInputStream &InStream)
+{
+    // always local_file when this constructor is called (?)
+    SetStyle(GetStyle() | wxCONFIG_USE_LOCAL_FILE);
+
+    SetUmask(-1);
+
+    m_pCurrentGroup =
+    m_pRootGroup    = new wxFileConfigGroup(NULL, "", this);
+
+    m_linesHead =
+    m_linesTail = NULL;
+
+    // Our goal is to put the content from the stream into a wxMemoryText thingy.
+    // So we can assume that the stream-content must contain some newlines. However,
+    // we have no way of knowing which newline-character(s) that has been used.
+    // To compensate for this, we put the content from the stream into a wxString, and
+    // utilizes wxTextBuffer::Translate to translate it all to the current operating
+    // system's newline char(s).
+
+    wxString TranslatedString;
+    {
+        wxString TempString;
+
+        char Buf[1024];
+        while (!InStream.Read(Buf, 1024).Eof())
+            TempString += wxString(Buf, InStream.LastRead());
+
+        TempString += wxString(Buf, InStream.LastRead());
+
+        TranslatedString = wxTextBuffer::Translate(TempString);
+    }
+
+    wxMemoryText MemText("");
+
+    // Now we can add the text to the memory text. To do this we extract line by line
+    // from the translated string, until we've reached the end.
+
+    const wxChar *pEOL = wxTextBuffer::GetEOL(wxTextBuffer::typeDefault);
+    size_t EOLLen = strlen(pEOL);
+
+    int FindPos = TranslatedString.Find(pEOL);
+    while (FindPos != -1)
+    {
+        wxString OneLine(TranslatedString.Left(FindPos));
+
+        MemText.AddLine(OneLine);
+
+        TranslatedString = TranslatedString.Mid(FindPos + EOLLen);
+
+        FindPos = TranslatedString.Find(pEOL);
+    }
+
+    // also add whatever we have left in the translated string.
+    MemText.AddLine(TranslatedString);
+
+    // Finally we can parse it all.
+    Parse(MemText, TRUE /* local */);
+
+    SetRootPath();
+}
+
+
 void wxFileConfig::CleanUp()
 {
@@ -547,5 +612,5 @@
 // ----------------------------------------------------------------------------
 
-void wxFileConfig::Parse(wxTextFile& file, bool bLocal)
+void wxFileConfig::Parse(wxTextBuffer& buffer, bool bLocal)
 {
   const wxChar *pStart;
@@ -553,7 +618,7 @@
   wxString strLine;
 
-  size_t nLineCount = file.GetLineCount();
+  size_t nLineCount = buffer.GetLineCount();
   for ( size_t n = 0; n < nLineCount; n++ ) {
-    strLine = file[n];
+    strLine = buffer[n];
 
     // add the line to linked list
@@ -586,5 +651,5 @@
       if ( *pEnd != wxT(']') ) {
         wxLogError(_("file '%s': unexpected character %c at line %d."),
-                   file.GetName(), *pEnd, n + 1);
+                   buffer.GetName(), *pEnd, n + 1);
         continue; // skip this line
       }
@@ -618,5 +683,5 @@
           default:
             wxLogWarning(_("file '%s', line %d: '%s' ignored after group header."),
-                         file.GetName(), n + 1, pEnd);
+                         buffer.GetName(), n + 1, pEnd);
             bCont = FALSE;
         }
@@ -647,5 +712,5 @@
       if ( *pEnd++ != wxT('=') ) {
         wxLogError(_("file '%s', line %d: '=' expected."),
-                   file.GetName(), n + 1);
+                   buffer.GetName(), n + 1);
       }
       else {
@@ -663,5 +728,5 @@
             // immutable keys can't be changed by user
             wxLogWarning(_("file '%s', line %d: value for immutable key '%s' ignored."),
-                         file.GetName(), n + 1, strKey.c_str());
+                         buffer.GetName(), n + 1, strKey.c_str());
             continue;
           }
@@ -673,5 +738,5 @@
           else if ( !bLocal || pEntry->IsLocal() ) {
             wxLogWarning(_("file '%s', line %d: key '%s' was first found at line %d."),
-                         file.GetName(), n + 1, strKey.c_str(), pEntry->Line());
+                         buffer.GetName(), n + 1, strKey.c_str(), pEntry->Line());
 
             if ( bLocal )
diff -rbu2 org_wx/src/common/textfile.cpp mh_wx/src/common/textfile.cpp
--- org_wx/src/common/textfile.cpp	Fri Nov  9 18:52:52 2001
+++ mh_wx/src/common/textfile.cpp	Fri Nov  9 18:24:35 2001
@@ -42,120 +42,9 @@
 // ============================================================================
 
-// ----------------------------------------------------------------------------
-// static methods (always compiled in)
-// ----------------------------------------------------------------------------
-
-// default type is the native one
-// the native type under Mac OS X is:
-//   - Unix when compiling with the Apple Developer Tools (__UNIX__)
-//   - Mac when compiling with CodeWarrior (__WXMAC__)
-
-const wxTextFileType wxTextFile::typeDefault =
-#if   defined(__WINDOWS__)
-  wxTextFileType_Dos;
-#elif defined(__UNIX__)
-  wxTextFileType_Unix;
-#elif defined(__WXMAC__)
-  wxTextFileType_Mac;
-#elif defined(__WXPM__)
-  wxTextFileType_Os2;
-#else
-  wxTextFileType_None;
-  #error  "wxTextFile: unsupported platform."
-#endif
-
-const wxChar *wxTextFile::GetEOL(wxTextFileType type)
+wxTextFile::wxTextFile(const wxString& strFileName)
+: wxTextBuffer(strFileName)
 {
-    switch ( type ) {
-      default:
-        wxFAIL_MSG(wxT("bad file type in wxTextFile::GetEOL."));
-        // fall through nevertheless - we must return something...
-
-      case wxTextFileType_None: return wxT("");
-      case wxTextFileType_Unix: return wxT("\n");
-      case wxTextFileType_Dos:  return wxT("\r\n");
-      case wxTextFileType_Mac:  return wxT("\r");
-    }
-}
-
-wxString wxTextFile::Translate(const wxString& text, wxTextFileType type)
-{
-    // don't do anything if there is nothing to do
-    if ( type == wxTextFileType_None )
-        return text;
-
-    // GRG: don't do anything either if it is empty
-    if ( text.IsEmpty() )
-        return text;
-
-    wxString eol = GetEOL(type), result;
-
-    // optimization: we know that the length of the new string will be about
-    // the same as the length of the old one, so prealloc memory to aviod
-    // unnecessary relocations
-    result.Alloc(text.Len());
-
-    wxChar chLast = 0;
-    for ( const wxChar *pc = text.c_str(); *pc; pc++ )
-    {
-        wxChar ch = *pc;
-        switch ( ch ) {
-            case _T('\n'):
-                // Dos/Unix line termination
-                result += eol;
-                chLast = 0;
-                break;
-
-            case _T('\r'):
-                if ( chLast == _T('\r') ) {
-                    // Mac empty line
-                    result += eol;
-                }
-                else {
-                    // just remember it: we don't know whether it is just "\r"
-                    // or "\r\n" yet
-                    chLast = _T('\r');
-                }
-                break;
-
-            default:
-                if ( chLast == _T('\r') ) {
-                    // Mac line termination
-                    result += eol;
-
-                    // reset chLast to avoid inserting another eol before the
-                    // next character
-                    chLast = 0;
-                }
-
-                // add to the current line
-                result += ch;
-        }
-    }
-
-    if ( chLast ) {
-        // trailing '\r'
-        result += eol;
-    }
-
-    return result;
 }
 
-#if wxUSE_TEXTFILE
-
-// ----------------------------------------------------------------------------
-// ctors & dtor
-// -----------------------------------------------
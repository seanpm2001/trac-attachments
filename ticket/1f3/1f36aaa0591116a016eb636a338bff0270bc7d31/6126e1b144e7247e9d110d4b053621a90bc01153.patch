diff --git a/docs/doxygen/overviews/eventhandling.h b/docs/doxygen/overviews/eventhandling.h
index 9b9ea23..5d9ee93 100644
--- a/docs/doxygen/overviews/eventhandling.h
+++ b/docs/doxygen/overviews/eventhandling.h
@@ -58,6 +58,7 @@ unbind, the handlers dynamically, i.e. during run-time depending on some
 conditions. It also allows the direct binding of events to:
 @li A handler method in another object.
 @li An ordinary function like a static method or a global function.
+@li A lambda expression
 @li An arbitrary functor like boost::function<>.
 
 The static event tables can only handle events in the object where they are
@@ -254,7 +255,8 @@ Now let us describe the semantic differences:
         which allows to bind an event to:
         @li A method in another object.
         @li An ordinary function like a static method or a global function.
-        @li An arbitrary functor like boost::function<>.
+		@li A lambda expression.
+		@li An arbitrary functor like std::function<> or boost::function<>.
 
         This is impossible to do with the event tables because it is not
         possible to specify these handlers to dispatch the event to, so it
@@ -347,6 +349,18 @@ MyFrame::MyFrame()
 }
 @endcode
 
+
+You can bind a lambda expression as an event handler:
+
+@code
+MyFrame::MyFrame()
+{
+    Bind(wxEVT_COMMAND_MENU_SELECTED,
+        []( wxCommandEvent & ) { /* Do something useful */ }, wxID_EXIT );
+}
+@endcode
+
+
 And finally you can bind to an arbitrary functor and use it as an event
 handler:
 
@@ -368,10 +382,10 @@ MyFrame::MyFrame()
 }
 @endcode
 
-A common example of a functor is boost::function<>:
+A common example of a functor is std::function<>:
 
 @code
-using namespace boost;
+using namespace std;
 
 void MyHandler::OnExit( wxCommandEvent & )
 {
@@ -382,17 +396,22 @@ MyHandler myHandler;
 
 MyFrame::MyFrame()
 {
-    function< void ( wxCommandEvent & ) > exitHandler( bind( &MyHandler::OnExit, &myHandler, _1 ));
+    function< void ( wxCommandEvent & ) > exitHandler( bind( &MyHandler::OnExit, &myHandler, placeholder::_1 ));
 
     Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
 }
 @endcode
 
 
-With the aid of boost::bind<>() you can even use methods or functions which
+The use of function<> above adds considerable overhead to the event handler call with no added benefits and so one
+of the other ways of
+specifying the event handler should be used. Where function<> becomes useful is with the aid of std::bind<>()
+so that you can use methods or functions which
 don't quite have the correct signature:
 
 @code
+using namespace std;
+
 void MyHandler::OnExit( int exitCode, wxCommandEvent &, wxString goodByeMessage )
 {
     // Do something useful
@@ -402,13 +421,35 @@ MyHandler myHandler;
 
 MyFrame::MyFrame()
 {
-    function< void ( wxCommandEvent & ) > exitHandler(
-            bind( &MyHandler::OnExit, &myHandler, EXIT_FAILURE, _1, "Bye" ));
+    function< void ( wxCommandEvent & ) > exitHandler =
+        bind( &MyHandler::OnExit, &myHandler, EXIT_FAILURE, placeholder::_1, "Bye" ));
 
     Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
 }
 @endcode
 
+For C++ compilers that are not C++11 compliant, the boost libraries must be used. Here is the
+example above modified to use boost:
+
+@code
+using namespace boost;
+
+void MyHandler::OnExit(int exitCode, wxCommandEvent &, wxString goodByeMessage)
+{
+	// Do something useful
+}
+
+MyHandler myHandler;
+
+MyFrame::MyFrame()
+{
+	function< void(wxCommandEvent &) > exitHandler =
+		bind(&MyHandler::OnExit, &myHandler, EXIT_FAILURE, _1, "Bye"));
+
+    Bind(wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT);
+}
+@endcode
+
 
 To summarize, using Bind<>() requires slightly more typing but is much more
 flexible than using static event tables so don't hesitate to use it when you

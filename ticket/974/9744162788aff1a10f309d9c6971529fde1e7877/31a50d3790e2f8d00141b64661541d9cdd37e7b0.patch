diff -bru /home/igor/wxWidgets/docs/msw/install.txt /mnt/win7/wxWidgets/docs/msw/install.txt
--- /home/igor/wxWidgets/docs/msw/install.txt	2012-09-13 10:35:54.000000000 -0700
+++ /mnt/win7/wxWidgets/docs/msw/install.txt	2012-09-13 13:39:36.797800400 -0700
@@ -128,10 +128,6 @@
 
 Please note that the VC++ 6.0 project files will work for VC++ .NET as well.
 
-VC++ 5.0 can also be used, providing Service Pack 3 is applied. Without it
-you will have trouble with internal compiler errors. It is available for
-download at: ftp://ftp.microsoft.com/developr/visualstudio/sp3/full.
-
 Using project files (VC++ 6 and later):
 
 1. Unarchive wxWidgets-x.y.z-vc.zip, the VC++ 6 project
@@ -139,7 +135,6 @@
 2. Open build\msw\wx.dsw, which has configurations for static
    compilation or DLL compilation, and each of these available in
    Unicode/ANSI, Debug/Release and wxUniversal or native variations.
-   Normally you'll use a static linking ANSI configuration.
    Choose the Win32 Debug or Win32 Release configuration (or any other that
    suits your needs) and use Batch Build to compile _all_ projects. If you
    know you won't need some of the libraries (e.g. the HTML part), you don't have
@@ -148,7 +143,7 @@
 
    If you want to build DLL configurations in wx.dsw project you unfortunately
    need to build them in the proper order (jpeg, png, tiff, zlib, regex, expat,
-   base, net, odbc, core, gl, html, media, qa, adv, dbgrid, xrc, aui, richtext,
+   base, net, core, gl, html, media, qa, adv, xrc, aui, richtext,
    propgrid) manually because VC6 doesn't always respect the correct build order.
 
    Alternatively, use the special wx_dll.dsw project which adds the
@@ -221,8 +216,7 @@
 
 Using project files:
 
-1. Open the VC++ 6 workspace file: build\msw\wx.dsw. Visual Studio will then
-   convert the projects to the current Visual C++ project format.
+1. Open the VC++ 7 workspace file: build\msw\wx_vc7.sln.
 
 2. To add 64-bit targets, go to the 'Build' menu and choose 'Configuration
    Manager...'.  In the 'Active solution platform' drop down choose '<new>',
@@ -245,7 +239,7 @@
    build other configurations.
 
 4. To compile one of the samples open one of the sample projects, such as
-   samples\minimal\minimal.dsw. Visual Studio will convert the project as in
+   samples\minimal\minimal_vc7.vcproj. Visual Studio will convert the project as in
    step 1, then add a 64-bit target as in step 2, and build.
 
 Using makefiles:
@@ -346,12 +340,6 @@
 (check the samples -- e.g., \wx2\samples\minimal\minimal.cpp -- for
 more details)
 
-Borland 16 Bit Compilation for Windows 3.1
-----------------------------------------------------------------
-
-The last version of wxWidgets to support 16-bit compilation with Borland was
-2.2.7 - Please download and read the instructions in that release
-
 Watcom C++ 10.6/11 and OpenWatcom Compilation
 ----------------------------------------------------------------
 
@@ -393,8 +381,7 @@
 
 Both Cygwin and MinGW can be used with configure (assuming you have MSYS
 installed in case of MinGW). You will need new enough MinGW version, preferably
-MinGW 2.0 (ships with gcc3) or at least 1.0 (gcc-2.95.3). GCC versions older
-than 2.95.3 don't work; you can use wxWidgets 2.4 with them.
+MinGW 3.4.2+ (ships with gcc3).
 
 NOTE: some notes specific to old Cygwin (< 1.1.x) are at the end of this
       section (see OLD VERSIONS)
@@ -464,16 +451,7 @@
 2. libwx.a is 100 MB or more - but much less if compiled with no
    debug info (-g0) and level 4 optimization (-O4).
 
-3. If you get a link error under MinGW 2.95.2 referring to:
-
-   EnumDAdvise__11IDataObjectPP13IEnumSTATDATA@8
-
-   then you need to edit the file objidl.h at line 663 and add
-   a missing PURE keyword:
-
-   STDMETHOD(EnumDAdvise)(THIS_ IEnumSTATDATA**) PURE;
-
-4. There's a bug in MinGW headers for some early distributions.
+3. There's a bug in MinGW headers for some early distributions.
 
    in include/windows32/defines.h, where it says:
 
@@ -485,7 +463,7 @@
 
    (a missing bracket).
 
-5. OpenGL support should work with MinGW as-is. However,
+4. OpenGL support should work with MinGW as-is. However,
    if you wish to generate import libraries appropriate either for
    the MS OpenGL libraries or the SGI OpenGL libraries, go to
    include/wx/msw/gl and use:
@@ -498,7 +476,7 @@
 
    and similarly for glu[32].def.
 
-6. The 'make install' step is optional, and copies files
+5. The 'make install' step is optional, and copies files
    as follows:
 
    /usr/local/lib - wxmswXYZd.dll.a and wxmswXYZd.dll
@@ -508,12 +486,12 @@
    You may need to do this if using wx-config with the
    default root path.
 
-7. With Cygwin, you can invoke gdb --nw myfile.exe to
+6. With Cygwin, you can invoke gdb --nw myfile.exe to
    debug an executable. If there are memory leaks, they will be
    flagged when the program quits. You can use Cygwin gdb
    to debug MinGW executables.
 
-8. Note that gcc's precompiled headers do not work on current versions of
+7. Note that gcc's precompiled headers do not work on current versions of
    Cygwin. If your version of Cygwin is affected you will need to use the
    --disable-precomp-headers configure option.
 
@@ -535,44 +513,17 @@
 Symantec & DigitalMars C++ Compilation
 ----------------------------------------------------------------
 
-The DigitalMars compiler is a free successor to the Symantec compiler
-and can be downloaded from http://www.digitalmars.com/
+Digital Mars compiler is no longer updated. The project is dead and the author of it spends time on other projects. wxWidgets TRUNK is not compilable with Digital Mars compiler.
 
-1. You need to download and unzip in turn (later packages will overwrite
-   older files)
-      Digital Mars C/C++ Compiler Version 8.40 or later
-      Basic utilities
-   from http://www.digitalmars.com/download/freecompiler.html
-
-2. Change directory to build\msw and type 'make -f makefile.dmc' to
-   make the wxWidgets core library.
-
-3. Change directory to samples\minimal and type 'make -f makefile.dmc'
-   to make this sample. Most of the other samples also work.
-
-
-Note that if you don't have the files makefile.dmc you may create them yourself
-using bakefile tool according to the instructions in build\bakefiles\README:
-
-    cd build\bakefiles
-    bakefile_gen -f dmars -b wx.bkl
-    bakefile_gen -f dmars -b ../../samples/minimal/minimal.bkl
-
-
-Note that wxUSE_STD_STRING is disabled in wx/string.h for Digital Mars as this
-compiler doesn't come with standard C++ library headers by default. If you
-install STLPort or another STL implementation, you'll need to edit wx/string.h
-and remove the check for Digital Mars in it (search for __DMC__).
-
-
-16-bit compilation is no longer supported.
 
 Configuring the Build
 ================================================================
 
 So far the instructions only explain how to build release DLLs of wxWidgets
 and did not cover any configuration. It is possible to change many aspects of
-the build, including debug/release and ANSI/Unicode settings. All makefiles in
+the build, including debug/release and ANSI/Unicode settings. 
+Keep in mind that currently wxWidgets officially support Unicode mode only. It is possible to compile ANSI version but strongly discouraged.
+All makefiles in
 build\msw directory use same options (with a few exceptions documented below)
 and the only difference between them is in object files and library directory
 names and in make invocation command.
@@ -594,26 +545,26 @@
 below are set analogically):
 
 Visual C++:
-  > nmake -f makefile.vc BUILD=debug UNICODE=1
+  > nmake -f makefile.vc BUILD=debug
 
 Borland C++:
-  > make -f makefile.bcc -DBUILD=debug -DUNICODE=1
+  > make -f makefile.bcc -DBUILD=debug
   (Note that you have to use -D to set the variable, unlike in other make
   tools!)
 
 Watcom C/C++:
-  > wmake -f makefile.wat BUILD=debug UNICODE=1
+  > wmake -f makefile.wat BUILD=debug
 
 MinGW using native makefiles:
-  > mingw32-make -f makefile.gcc BUILD=debug UNICODE=1
+  > mingw32-make -f makefile.gcc BUILD=debug
 
 MinGW using configure:
-  > ./configure --enable-debug --enable-unicode
+  > ./configure --enable-debug
   (see ./configure --help on details; configure is not covered in this
   section)
 
 Cygwin using configure:
-  > ./configure --disable-precomp-headers --enable-debug --enable-unicode
+  > ./configure --disable-precomp-headers --enable-debug
   (use --disable-precomp-headers if Cygwin doesn't support precompiled
   headers)
 

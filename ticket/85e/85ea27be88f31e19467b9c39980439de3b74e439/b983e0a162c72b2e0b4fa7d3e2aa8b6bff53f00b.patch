diff -brut wxWidgets.orig/include/wx/font.h wxWidgets.patched/include/wx/font.h
--- wxWidgets.orig/include/wx/font.h	2011-11-30 14:41:33.000000000 -0800
+++ wxWidgets.patched/include/wx/font.h	2011-12-06 16:26:58.000000000 -0800
@@ -227,6 +227,8 @@
     virtual wxFontStyle GetStyle() const = 0;
     virtual wxFontWeight GetWeight() const = 0;
     virtual bool GetUnderlined() const = 0;
+        // TODO: Implement for all platforms
+        virtual bool GetStrikethrough() const { return false; };
     virtual wxString GetFaceName() const = 0;
     virtual wxFontEncoding GetEncoding() const = 0;
     virtual const wxNativeFontInfo *GetNativeFontInfo() const = 0;
@@ -244,6 +246,8 @@
     virtual void SetWeight( wxFontWeight weight ) = 0;
 
     virtual void SetUnderlined( bool underlined ) = 0;
+        //TODO: Implement for all platforms
+        virtual void SetStrikethrough( bool WXUNUSED(strikethrough) ) {}
     virtual void SetEncoding(wxFontEncoding encoding) = 0;
     virtual bool SetFaceName( const wxString& faceName );
     void SetNativeFontInfo(const wxNativeFontInfo& info)
@@ -329,6 +333,7 @@
     wxFont& MakeBold(); \
     wxFont& MakeItalic(); \
     wxFont& MakeUnderlined(); \
+        wxFont& MakeStrikethrough(); \
     wxFont& MakeLarger() { return Scale(1.2f); } \
     wxFont& MakeSmaller() { return Scale(1/1.2f); } \
     wxFont& Scale(float x); \
@@ -336,6 +341,7 @@
     wxFont Bold() const; \
     wxFont Italic() const; \
     wxFont Underlined() const; \
+        wxFont Strikethrough() const; \
     wxFont Larger() const { return Scaled(1.2f); } \
     wxFont Smaller() const { return Scaled(1/1.2f); } \
     wxFont Scaled(float x) const
diff -brut wxWidgets.orig/include/wx/fontutil.h wxWidgets.patched/include/wx/fontutil.h
--- wxWidgets.orig/include/wx/fontutil.h	2011-11-30 14:41:33.000000000 -0800
+++ wxWidgets.patched/include/wx/fontutil.h	2011-12-06 16:26:58.000000000 -0800
@@ -172,6 +172,7 @@
     wxFontStyle   m_style;
     wxFontWeight  m_weight;
     bool          m_underlined;
+        bool          m_strikethrough;
     wxString      m_faceName;
     wxFontEncoding m_encoding;
 public :
@@ -187,6 +188,7 @@
     wxFontStyle   style;
     wxFontWeight  weight;
     bool          underlined;
+        bool          strikethrough;
     wxString      faceName;
     wxFontEncoding encoding;
 #endif // platforms
@@ -224,6 +226,7 @@
         SetStyle((wxFontStyle)font.GetStyle());
         SetWeight((wxFontWeight)font.GetWeight());
         SetUnderlined(font.GetUnderlined());
+                SetStrikethrough(font.GetStrikethrough());
 #if defined(__WXMSW__)
         if ( font.IsUsingSizeInPixels() )
             SetPixelSize(font.GetPixelSize());
@@ -252,6 +255,7 @@
     wxFontStyle GetStyle() const;
     wxFontWeight GetWeight() const;
     bool GetUnderlined() const;
+        bool GetStrikethrough() const;
     wxString GetFaceName() const;
     wxFontFamily GetFamily() const;
     wxFontEncoding GetEncoding() const;
@@ -261,6 +265,7 @@
     void SetStyle(wxFontStyle style);
     void SetWeight(wxFontWeight weight);
     void SetUnderlined(bool underlined);
+        void SetStrikethrough(bool strikethrough);
     bool SetFaceName(const wxString& facename);
     void SetFamily(wxFontFamily family);
     void SetEncoding(wxFontEncoding encoding);
diff -brut wxWidgets.orig/include/wx/gtk/font.h wxWidgets.patched/include/wx/gtk/font.h
--- wxWidgets.orig/include/wx/gtk/font.h	2011-11-30 14:41:33.000000000 -0800
+++ wxWidgets.patched/include/wx/gtk/font.h	2011-12-08 14:55:21.000000000 -0800
@@ -63,6 +63,12 @@
         SetPixelSize(pixelSize);
     }
 
+    wxFont(int pointSize,
+           wxFontFamily family,
+           int flags = wxFONTFLAG_DEFAULT,
+           const wxString &face = wxEmptyString,
+           wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
+
     bool Create(int size,
                 wxFontFamily family,
                 wxFontStyle style,
@@ -82,6 +88,7 @@
     virtual wxFontWeight GetWeight() const;
     virtual wxString GetFaceName() const;
     virtual bool GetUnderlined() const;
+    virtual bool GetStrikethrough() const;
     virtual wxFontEncoding GetEncoding() const;
     virtual const wxNativeFontInfo *GetNativeFontInfo() const;
     virtual bool IsFixedWidth() const;
@@ -92,6 +99,7 @@
     virtual void SetWeight(wxFontWeight weight);
     virtual bool SetFaceName( const wxString& faceName );
     virtual void SetUnderlined( bool underlined );
+    virtual void SetStrikethrough(bool strikethrough);
     virtual void SetEncoding(wxFontEncoding encoding);
 
     wxDECLARE_COMMON_FONT_METHODS();
diff -brut wxWidgets.orig/include/wx/gtk/private.h wxWidgets.patched/include/wx/gtk/private.h
--- wxWidgets.orig/include/wx/gtk/private.h	2011-11-30 14:41:33.000000000 -0800
+++ wxWidgets.patched/include/wx/gtk/private.h	2011-12-08 14:55:21.000000000 -0800
@@ -87,6 +87,8 @@
     #define wxGTK_CONV_BACK_SYS(s) wxConvertFromGTK((s))
 #endif
 
+void CheckUnderlineOrStrikethrough(bool underline, bool strikethrough, size_t datalen, PangoLayout *m_layout, bool needshack);
+
 // ----------------------------------------------------------------------------
 // various private helper functions
 // ----------------------------------------------------------------------------
diff -brut wxWidgets.orig/include/wx/msw/font.h wxWidgets.patched/include/wx/msw/font.h
--- wxWidgets.orig/include/wx/msw/font.h	2011-11-30 14:41:34.000000000 -0800
+++ wxWidgets.patched/include/wx/msw/font.h	2011-12-06 16:26:58.000000000 -0800
@@ -91,6 +91,12 @@
         Create(info, hFont);
     }
 
+    wxFont(int pointSize,
+                   wxFontFamily family,
+                   int flags = wxFONTFLAG_DEFAULT,
+                   const wxString &face = wxEmptyString,
+                   wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
+
     wxFont(const wxString& fontDesc);
 
 
@@ -117,6 +123,7 @@
     virtual wxFontStyle GetStyle() const;
     virtual wxFontWeight GetWeight() const;
     virtual bool GetUnderlined() const;
+        virtual bool GetStrikethrough() const;
     virtual wxString GetFaceName() const;
     virtual wxFontEncoding GetEncoding() const;
     virtual const wxNativeFontInfo *GetNativeFontInfo() const;
@@ -128,6 +135,7 @@
     virtual void SetWeight(wxFontWeight weight);
     virtual bool SetFaceName(const wxString& faceName);
     virtual void SetUnderlined(bool underlined);
+        virtual void SetStrikethrough(bool strikethrough);
     virtual void SetEncoding(wxFontEncoding encoding);
 
     wxDECLARE_COMMON_FONT_METHODS();
diff -brut wxWidgets.orig/include/wx/textctrl.h wxWidgets.patched/include/wx/textctrl.h
--- wxWidgets.orig/include/wx/textctrl.h	2011-11-30 14:41:33.000000000 -0800
+++ wxWidgets.patched/include/wx/textctrl.h	2011-12-10 14:50:47.000000000 -0800
@@ -171,11 +171,12 @@
     wxTEXT_ATTR_FONT_WEIGHT          = 0x00000010,
     wxTEXT_ATTR_FONT_ITALIC          = 0x00000020,
     wxTEXT_ATTR_FONT_UNDERLINE       = 0x00000040,
+    wxTEXT_ATTR_FONT_STRIKETHROUGH   = 0x08000000,
     wxTEXT_ATTR_FONT_ENCODING        = 0x02000000,
     wxTEXT_ATTR_FONT_FAMILY          = 0x04000000,
     wxTEXT_ATTR_FONT = \
         ( wxTEXT_ATTR_FONT_FACE | wxTEXT_ATTR_FONT_SIZE | wxTEXT_ATTR_FONT_WEIGHT | \
-            wxTEXT_ATTR_FONT_ITALIC | wxTEXT_ATTR_FONT_UNDERLINE | wxTEXT_ATTR_FONT_ENCODING | wxTEXT_ATTR_FONT_FAMILY ),
+            wxTEXT_ATTR_FONT_ITALIC | wxTEXT_ATTR_FONT_UNDERLINE | wxTEXT_ATTR_FONT_STRIKETHROUGH | wxTEXT_ATTR_FONT_ENCODING | wxTEXT_ATTR_FONT_FAMILY ),
 
     wxTEXT_ATTR_ALIGNMENT            = 0x00000080,
     wxTEXT_ATTR_LEFT_INDENT          = 0x00000100,
@@ -317,6 +318,7 @@
     void SetFontWeight(wxFontWeight fontWeight) { m_fontWeight = fontWeight; m_flags |= wxTEXT_ATTR_FONT_WEIGHT; }
     void SetFontFaceName(const wxString& faceName) { m_fontFaceName = faceName; m_flags |= wxTEXT_ATTR_FONT_FACE; }
     void SetFontUnderlined(bool underlined) { m_fontUnderlined = underlined; m_flags |= wxTEXT_ATTR_FONT_UNDERLINE; }
+    void SetFontStrikethrough(bool strikethrough) { m_fontStrikethrough = strikethrough; m_flags |= wxTEXT_ATTR_FONT_STRIKETHROUGH; }
     void SetFontEncoding(wxFontEncoding encoding) { m_fontEncoding = encoding; m_flags |= wxTEXT_ATTR_FONT_ENCODING; }
     void SetFontFamily(wxFontFamily family) { m_fontFamily = family; m_flags |= wxTEXT_ATTR_FONT_FAMILY; }
 
@@ -355,6 +357,7 @@
     wxFontStyle GetFontStyle() const { return m_fontStyle; }
     wxFontWeight GetFontWeight() const { return m_fontWeight; }
     bool GetFontUnderlined() const { return m_fontUnderlined; }
+    bool GetFontStrikethrough() const { return m_fontStrikethrough; }
     const wxString& GetFontFaceName() const { return m_fontFaceName; }
     wxFontEncoding GetFontEncoding() const { return m_fontEncoding; }
     wxFontFamily GetFontFamily() const { return m_fontFamily; }
@@ -389,6 +392,7 @@
     bool HasFontSize() const { return HasFlag(wxTEXT_ATTR_FONT_SIZE); }
     bool HasFontItalic() const { return HasFlag(wxTEXT_ATTR_FONT_ITALIC); }
     bool HasFontUnderlined() const { return HasFlag(wxTEXT_ATTR_FONT_UNDERLINE); }
+    bool HasFontStrikethrough() const { return HasFlag(wxTEXT_ATTR_FONT_STRIKETHROUGH); }
     bool HasFontFaceName() const { return HasFlag(wxTEXT_ATTR_FONT_FACE); }
     bool HasFontEncoding() const { return HasFlag(wxTEXT_ATTR_FONT_ENCODING); }
     bool HasFontFamily() const { return HasFlag(wxTEXT_ATTR_FONT_FAMILY); }
@@ -500,6 +504,7 @@
     wxFontWeight        m_fontWeight;
     wxFontFamily        m_fontFamily;
     bool                m_fontUnderlined;
+    bool                m_fontStrikethrough;
     wxString            m_fontFaceName;
 
     // Character style
diff -brut wxWidgets.orig/interface/wx/font.h wxWidgets.patched/interface/wx/font.h
--- wxWidgets.orig/interface/wx/font.h	2011-11-30 14:41:34.000000000 -0800
+++ wxWidgets.patched/interface/wx/font.h	2011-12-07 14:53:46.000000000 -0800
@@ -303,6 +303,45 @@
     wxFont(const wxFont& font);
 
     /**
+            Creates a font object with the specified attributes
+
+        @param pointSize
+                    Size in points. See SetPointSize() for more info
+                @param family
+                    The font family: a generic portable way of referring to fonts without specifying a
+                        facename. This parameter must be one of the ::wxFontFamily enumeration values.
+                        If the @a faceName argument is provided, then it overrides the font family.
+                @param flags
+                    Flags indicating the style of the font.
+                @param face
+                    An optional string specifying the face name to be used.
+                        If it is an empty string, a default face name will be chosen based on the family
+                @param encoding
+            An encoding which may be one of the enumeration values of ::wxFontEncoding.
+            Briefly these can be summed up as:
+            <TABLE>
+                <TR><TD>@c wxFONTENCODING_SYSTEM</TD><TD>Default system encoding.</TD></TR>
+                <TR><TD>@c wxFONTENCODING_DEFAULT</TD><TD>
+                    Default application encoding: this is the encoding set by calls to
+                    SetDefaultEncoding() and which may be set to, say, KOI8 to create all
+                    fonts by default with KOI8 encoding. Initially, the default application
+                    encoding is the same as default system encoding.</TD></TR>
+                <TR><TD>@c wxFONTENCODING_ISO8859_1...15</TD><TD>ISO8859 encodings.</TD></TR>
+                <TR><TD>@c wxFONTENCODING_KOI8</TD><TD>The standard Russian encoding for Internet.</TD></TR>
+                <TR><TD>@c wxFONTENCODING_CP1250...1252</TD><TD>Windows encodings similar to ISO8859 (but not identical).</TD></TR>
+            </TABLE>
+            If the specified encoding isn't available, no font is created
+            (see also @ref overview_fontencoding).
+
+        @remarks If the desired font does not exist, the closest match will be
+                 chosen. Under Windows, only scalable TrueType fonts are used.
+
+        @since 2.9.4
+        */
+    wxFont(int pointSize, wxFontFamily family, int flags,
+           const wxString& faceName = wxEmptyString,
+           wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
+    /**
         Creates a font object with the specified attributes.
 
         @param pointSize
@@ -526,6 +565,15 @@
     virtual bool GetUnderlined() const;
 
     /**
+                Returns @true if the font is striken, @false otherwise.
+
+                @see SetStrikethrough()
+
+                @since 2.9.4
+        */
+        virtual bool GetStrikethrough() const;
+
+    /**
         Gets the font weight. See ::wxFontWeight for a list of valid weight identifiers.
 
         @see SetWeight()
@@ -612,6 +660,15 @@
     wxFont Underlined() const;
 
     /**
+                Returns striken version of this font.
+
+                @see MakeStrikethrough()
+
+                @since 2.9.4
+        */
+        wxFont Strikethrough() const;
+
+    /**
         Changes this font to be bold.
 
         @see Bold()
@@ -663,6 +720,15 @@
     wxFont& MakeUnderlined();
 
     /**
+                Changes this font to be striken
+
+                @see Strikethrough()
+
+                @since 2.9.4
+        */
+        wxFont& MakeStrikethrough();
+
+    /**
         Changes the size of this font.
 
         The font size is multiplied by the given factor (which may be less than
@@ -854,6 +920,18 @@
     virtual void SetUnderlined(bool underlined);
 
     /**
+                Sets strikethrough option
+
+                @param strikethrough
+                    @true to strikethrough, @false otherwise
+
+                @see GetStrikethrough()
+
+                @since 2.9.4
+        */
+        virtual void SetStrikethrough(bool strikethrough);
+
+    /**
         Sets the font weight.
 
         @param weight
diff -brut wxWidgets.orig/samples/font/font.cpp wxWidgets.patched/samples/font/font.cpp
--- wxWidgets.orig/samples/font/font.cpp	2011-11-30 14:41:32.000000000 -0800
+++ wxWidgets.patched/samples/font/font.cpp	2011-12-08 15:56:50.000000000 -0800
@@ -107,6 +107,7 @@
     void OnSlant(wxCommandEvent& event);
 
     void OnUnderline(wxCommandEvent& event);
+    void OnStrikethrough(wxCommandEvent& event);
 
     void OnwxPointerFont(wxCommandEvent& event);
     void OnwxSystemSettingsFont(wxCommandEvent& event);
@@ -178,6 +179,7 @@
     Font_Slant,
 
     Font_Underlined,
+    Font_Strikethrough,
 
     // standard global wxFont objects:
     Font_wxNORMAL_FONT,
@@ -231,6 +233,7 @@
     EVT_MENU(Font_Slant, MyFrame::OnSlant)
 
     EVT_MENU(Font_Underlined, MyFrame::OnUnderline)
+    EVT_MENU(Font_Strikethrough, MyFrame::OnStrikethrough)
 
     EVT_MENU(Font_wxNORMAL_FONT, MyFrame::OnwxPointerFont)
     EVT_MENU(Font_wxSMALL_FONT, MyFrame::OnwxPointerFont)
@@ -330,6 +333,8 @@
     menuFont->AppendSeparator();
     menuFont->AppendCheckItem(Font_Underlined, wxT("&Underlined\tCtrl-U"),
                               wxT("Toggle underlined state"));
+    menuFont->AppendCheckItem(Font_Strikethrough, wxT("&Strikethrough"),
+                                      wxT("Toggle strikethrough state"));
 
     menuFont->AppendSeparator();
     menuFont->Append(Font_SetNativeDesc,
@@ -735,6 +740,13 @@
     DoChangeFont(font);
 }
 
+void MyFrame::OnStrikethrough(wxCommandEvent& event)
+{
+        wxFont font = m_canvas->GetTextFont();
+        font.SetStrikethrough(event.IsChecked());
+        DoChangeFont(font);
+}
+
 void MyFrame::OnwxPointerFont(wxCommandEvent& event)
 {
     wxFont font;
@@ -813,6 +825,7 @@
     m_textctrl->SetFont(font);
     if ( col.IsOk() )
         m_textctrl->SetForegroundColour(col);
+    m_textctrl->Refresh();
 
     // update the state of the bold/italic/underlined menu items
     wxMenuBar *mbar = GetMenuBar();
@@ -827,6 +840,7 @@
 #endif
 
         mbar->Check(Font_Underlined, font.GetUnderlined());
+                mbar->Check(Font_Strikethrough, font.GetStrikethrough());
     }
 }
 
diff -brut wxWidgets.orig/src/common/fontcmn.cpp wxWidgets.patched/src/common/fontcmn.cpp
--- wxWidgets.orig/src/common/fontcmn.cpp	2011-11-30 14:41:31.000000000 -0800
+++ wxWidgets.patched/src/common/fontcmn.cpp	2011-12-07 14:12:34.000000000 -0800
@@ -113,6 +113,8 @@
            wxT("Helpstring"), wxT("group")) // wxFontWeight
 wxPROPERTY( Underlined, bool, SetUnderlined, GetUnderlined, false, 0 /*flags*/, \
            wxT("Helpstring"), wxT("group"))
+wxPROPERTY( Strikethrough, bool, SetStrikethrough, GetStrikethrough, false, 0, \
+                   wxT("Helpstring"), wxT("group"))
 wxPROPERTY( Face, wxString, SetFaceName, GetFaceName, wxEMPTY_PARAMETER_VALUE, \
            0 /*flags*/, wxT("Helpstring"), wxT("group"))
 wxPROPERTY( Encoding, wxFontEncoding, SetEncoding, GetEncoding, \
@@ -155,6 +157,11 @@
     return (flags & wxFONTFLAG_UNDERLINED) != 0;
 }
 
+static inline bool flags2Strikethrough(int flags)
+{
+        return (flags & wxFONTFLAG_STRIKETHROUGH) != 0;
+}
+
 // ----------------------------------------------------------------------------
 // wxFontBase
 // ----------------------------------------------------------------------------
@@ -328,6 +335,7 @@
     SetStyle(info.style);
     SetWeight(info.weight);
     SetUnderlined(info.underlined);
+        SetStrikethrough(info.strikethrough);
     SetFaceName(info.faceName);
     SetEncoding(info.encoding);
 #else
@@ -415,6 +423,7 @@
             GetStyle() == font.GetStyle() &&
             GetWeight() == font.GetWeight() &&
             GetUnderlined() == font.GetUnderlined() &&
+                        GetStrikethrough() == font.GetStrikethrough() &&
             GetFaceName().IsSameAs(font.GetFaceName(), false) &&
             GetEncoding() == font.GetEncoding()
            );
@@ -554,6 +563,19 @@
     return font;
 }
 
+wxFont wxFont::Strikethrough() const
+{
+        wxFont font(*this);
+        font.MakeStrikethrough();
+        return font;
+}
+
+wxFont& wxFont::MakeStrikethrough()
+{
+        SetStrikethrough(true);
+        return *this;
+}
+
 wxFont& wxFont::Scale(float x)
 {
     SetPointSize(int(x*GetPointSize() + 0.5));
@@ -604,13 +626,13 @@
 bool wxNativeFontInfo::FromString(const wxString& s)
 {
     long l;
+        short version;
 
     wxStringTokenizer tokenizer(s, wxT(";"));
 
     wxString token = tokenizer.GetNextToken();
-    //
-    //  Ignore the version for now
-    //
+    if( !token.ToLong(&version) )
+                return false;
 
     token = tokenizer.GetNextToken();
     if ( !token.ToLong(&l) )
@@ -637,6 +659,14 @@
         return false;
     underlined = l != 0;
 
+    if( version == 1 )
+        {
+                token = tokenizer.GetNextToken();
+                if( !token.ToLong(&l) )
+                        return false;
+                strikethrough = l != 0;
+        }
+
     faceName = tokenizer.GetNextToken();
 
 #ifndef __WXMAC__
@@ -656,13 +686,14 @@
 {
     wxString s;
 
-    s.Printf(wxT("%d;%d;%d;%d;%d;%d;%s;%d"),
-             0,                                 // version
+    s.Printf(wxT("%d;%d;%d;%d;%d;%d;%d,%s;%d"),
+             1,                                 // version
              pointSize,
              family,
              (int)style,
              (int)weight,
              underlined,
+                         strikethrough,
              faceName.GetData(),
              (int)encoding);
 
@@ -676,6 +707,7 @@
     style = wxFONTSTYLE_NORMAL;
     weight = wxFONTWEIGHT_NORMAL;
     underlined = false;
+        strikethrough = false;
     faceName.clear();
     encoding = wxFONTENCODING_DEFAULT;
 }
@@ -700,6 +732,11 @@
     return underlined;
 }
 
+bool wxNativeFontInfo::GetStrikethrough() const
+{
+        return strikethrough;
+}
+
 wxString wxNativeFontInfo::GetFaceName() const
 {
     return faceName;
@@ -735,6 +772,11 @@
     underlined = underlined_;
 }
 
+void wxNativeFontInfo::SetStrikethrough(bool strikethrough_)
+{
+        strikethrough = strikethrough_;
+}
+
 bool wxNativeFontInfo::SetFaceName(const wxString& facename_)
 {
     faceName = facename_;
@@ -771,6 +813,11 @@
         desc << _("underlined");
     }
 
+        if( GetStrikethrough() )
+        {
+                desc << _("strikethrough");
+        }
+
     switch ( GetWeight() )
     {
         default:
@@ -943,6 +990,10 @@
         {
             SetUnderlined(true);
         }
+                else if ( token == wxT("strikethrough") || token == _("strikethrough") )
+                {
+                        SetStrikethrough(true);
+                }
         else if ( token == wxT("light") || token == _("light") )
         {
             SetWeight(wxFONTWEIGHT_LIGHT);
diff -brut wxWidgets.orig/src/common/textcmn.cpp wxWidgets.patched/src/common/textcmn.cpp
--- wxWidgets.orig/src/common/textcmn.cpp	2011-11-30 14:41:31.000000000 -0800
+++ wxWidgets.patched/src/common/textcmn.cpp	2011-12-10 17:30:42.000000000 -0800
@@ -403,6 +403,10 @@
     if (HasFontUnderlined())
         underlined = GetFontUnderlined();
 
+    bool strikethrough = false;
+    if (HasFontStrikethrough())
+        strikethrough = GetFontStrikethrough();
+
     wxString fontFaceName;
     if (HasFontFaceName())
         fontFaceName = GetFontFaceName();
@@ -416,6 +420,8 @@
         fontFamily = GetFontFamily();
 
     wxFont font(fontSize, fontFamily, fontStyle, fontWeight, underlined, fontFaceName, encoding);
+    if( strikethrough )
+        font.SetStrikethrough( true );
     return font;
 }
 
@@ -437,6 +443,9 @@
     if (flags & wxTEXT_ATTR_FONT_UNDERLINE)
         m_fontUnderlined = font.GetUnderlined();
 
+    if (flags & wxTEXT_ATTR_FONT_STRIKETHROUGH)
+        m_fontStrikethrough = font.GetStrikethrough();
+
     if (flags & wxTEXT_ATTR_FONT_FACE)
         m_fontFaceName = font.GetFaceName();
 
@@ -500,6 +509,12 @@
             destStyle.SetFontUnderlined(style.GetFontUnderlined());
     }
 
+    if (style.HasFontStrikethrough())
+    {
+        if (!(compareWith && compareWith->HasFontStrikethrough() && compareWith->GetFontStrikethrough() == style.GetFontStrikethrough()))
+            destStyle.SetFontStrikethrough(style.GetFontStrikethrough());
+    }
+
     if (style.HasFontFaceName())
     {
         if (!(compareWith && compareWith->HasFontFaceName() && compareWith->GetFontFaceName() == style.GetFontFaceName()))
diff -brut wxWidgets.orig/src/gtk/dcclient.cpp wxWidgets.patched/src/gtk/dcclient.cpp
--- wxWidgets.orig/src/gtk/dcclient.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/dcclient.cpp	2011-12-08 14:55:22.000000000 -0800
@@ -1373,6 +1373,7 @@
     gdk_pango_context_set_colormap( m_context, m_cmap );  // not needed in gtk+ >= 2.6
 
     bool underlined = m_font.IsOk() && m_font.GetUnderlined();
+    bool strikethrough = m_font.IsOk() && m_font.GetStrikethrough();
 
     wxCharBuffer data = wxGTK_CONV(text);
     if ( !data )
@@ -1408,10 +1409,11 @@
     }
 
     pango_layout_set_text(m_layout, data, datalen);
-
+    CheckUnderlineOrStrikethrough( underlined, strikethrough, datalen, m_layout, needshack );
+/*    PangoAttrList *attrs = NULL;
     if (underlined)
     {
-        PangoAttrList *attrs = pango_attr_list_new();
+        attrs = pango_attr_list_new();
         PangoAttribute *a = pango_attr_underline_new(PANGO_UNDERLINE_SINGLE);
         a->start_index = 0;
         a->end_index = datalen;
@@ -1435,7 +1437,19 @@
         pango_layout_set_attributes(m_layout, attrs);
         pango_attr_list_unref(attrs);
     }
-
+    if (strikethrough)
+    {
+        if( !attrs )
+            attrs = pango_attr_list_new();
+        else
+            pango_attr_list_ref( attrs );
+        PangoAttribute *a = pango_attr_strikethrough_new( TRUE );
+        a->start_index = 0;
+        a->end_index = datalen;
+        pango_attr_list_insert( attrs, a );
+        pango_layout_set_attributes( m_layout, attrs );
+        pango_attr_list_unref( attrs );
+    }*/
     int oldSize = 0;
     const bool isScaled = fabs(m_scaleY - 1.0) > 0.00001;
     if (isScaled)
@@ -1473,7 +1487,7 @@
          // actually apply unscaled font
          pango_layout_set_font_description( m_layout, m_fontdesc );
     }
-    if (underlined)
+    if (underlined || strikethrough)
     {
         // undo underline attributes setting:
         pango_layout_set_attributes(m_layout, NULL);
@@ -1499,7 +1513,8 @@
         y = YLOG2DEV(y);
 
         pango_layout_set_text(m_layout, wxGTK_CONV(text), -1);
-
+    size_t datalen = 0;
+/*        PangoAttrList *attrs = NULL;
         if (m_font.GetUnderlined())
         {
             PangoAttrList *attrs = pango_attr_list_new();
@@ -1507,8 +1522,8 @@
             pango_attr_list_insert(attrs, a);
             pango_layout_set_attributes(m_layout, attrs);
             pango_attr_list_unref(attrs);
-        }
-
+        }*/
+        CheckUnderlineOrStrikethrough( m_font.GetUnderlined(), m_font.GetStrikethrough(), datalen, m_layout, false );
         int oldSize = 0;
         const bool isScaled = fabs(m_scaleY - 1.0) > 0.00001;
         if (isScaled)
@@ -1561,7 +1576,7 @@
         gdk_draw_layout_with_colors(m_gdkwindow, m_textGC, x+minX, y+minY,
                                     m_layout, NULL, bg_col);
 
-        if (m_font.GetUnderlined())
+        if (m_font.GetUnderlined() || m_font.GetStrikethrough())
             pango_layout_set_attributes(m_layout, NULL);
 
         // clean up the transformation matrix
@@ -2304,6 +2319,52 @@
     return gdk_drawable_get_depth(m_gdkwindow);
 }
 
+void CheckUnderlineOrStrikethrough(bool underline, bool strikethrough, size_t datalen, PangoLayout *m_layout, bool needshack)
+{
+    PangoAttrList *attrs = NULL;
+    if (underline)
+    {
+        attrs = pango_attr_list_new();
+        PangoAttribute *a = pango_attr_underline_new(PANGO_UNDERLINE_SINGLE);
+        if( datalen != 0 )
+        {
+            a->start_index = 0;
+            a->end_index = datalen;
+        }
+        pango_attr_list_insert(attrs, a);
+
+        if (needshack)
+        {
+            // dummy colour for the leading space
+            a = pango_attr_foreground_new (0x0057, 0x52A9, 0xD614);
+            a->start_index = 0;
+            a->end_index = 1;
+            pango_attr_list_insert(attrs, a);
+
+            // dummy colour for the trailing space
+            a = pango_attr_foreground_new (0x0057, 0x52A9, 0xD614);
+            a->start_index = datalen - 1;
+            a->end_index = datalen;
+            pango_attr_list_insert(attrs, a);
+        }
+
+        pango_layout_set_attributes(m_layout, attrs);
+        pango_attr_list_unref(attrs);
+    }
+    if (strikethrough)
+    {
+        if( !attrs )
+            attrs = pango_attr_list_new();
+        else
+            pango_attr_list_ref( attrs );
+        PangoAttribute *a = pango_attr_strikethrough_new( TRUE );
+        a->start_index = 0;
+        a->end_index = datalen;
+        pango_attr_list_insert( attrs, a );
+        pango_layout_set_attributes( m_layout, attrs );
+        pango_attr_list_unref( attrs );
+    }
+}
 
 //-----------------------------------------------------------------------------
 // wxClientDCImpl
diff -brut wxWidgets.orig/src/gtk/font.cpp wxWidgets.patched/src/gtk/font.cpp
--- wxWidgets.orig/src/gtk/font.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/font.cpp	2011-12-08 15:04:13.000000000 -0800
@@ -52,6 +52,7 @@
                   wxFontStyle style = wxFONTSTYLE_NORMAL,
                   wxFontWeight weight = wxFONTWEIGHT_NORMAL,
                   bool underlined = false,
+                  bool strikethrough = false,
                   const wxString& faceName = wxEmptyString,
                   wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
 
@@ -69,6 +70,7 @@
     void SetStyle(wxFontStyle style);
     void SetWeight(wxFontWeight weight);
     void SetUnderlined(bool underlined);
+    void SetStrikethrough(bool strikethrough);
     bool SetFaceName(const wxString& facename);
     void SetEncoding(wxFontEncoding encoding);
 
@@ -82,6 +84,7 @@
               wxFontStyle style,
               wxFontWeight weight,
               bool underlined,
+              bool strikethrough,
               const wxString& faceName,
               wxFontEncoding encoding);
 
@@ -90,7 +93,7 @@
 
 private:
     bool            m_underlined;
-
+    bool            m_strikethrough;
     // The native font info: basically a PangoFontDescription
     wxNativeFontInfo m_nativeFontInfo;
 
@@ -108,6 +111,7 @@
                          wxFontStyle style,
                          wxFontWeight weight,
                          bool underlined,
+                         bool strikethrough,
                          const wxString& faceName,
                          wxFontEncoding WXUNUSED(encoding))
 {
@@ -115,6 +119,7 @@
         family = wxFONTFAMILY_SWISS;
 
     m_underlined = underlined;
+    m_strikethrough = strikethrough;
 
     // Create native font info
     m_nativeFontInfo.description = pango_font_description_new();
@@ -149,12 +154,14 @@
 
     // Pango description are never underlined
     m_underlined = false;
+    m_strikethrough = false;
 }
 
 wxFontRefData::wxFontRefData( const wxFontRefData& data )
              : wxGDIRefData()
 {
     m_underlined = data.m_underlined;
+    m_strikethrough = data.m_strikethrough;
 
     // Forces a copy of the internal data.  wxNativeFontInfo should probably
     // have a copy ctor and assignment operator to fix this properly but that
@@ -163,11 +170,11 @@
 }
 
 wxFontRefData::wxFontRefData(int size, wxFontFamily family, wxFontStyle style,
-                             wxFontWeight weight, bool underlined,
+                             wxFontWeight weight, bool underlined, bool strikethrough,
                              const wxString& faceName,
                              wxFontEncoding encoding)
 {
-    Init(size, family, style, weight, underlined, faceName, encoding);
+    Init(size, family, style, weight, underlined, strikethrough, faceName, encoding);
 }
 
 wxFontRefData::wxFontRefData(const wxString& nativeFontInfoString)
@@ -244,6 +251,11 @@
     // here we just need to save the underlined attribute
 }
 
+void wxFontRefData::SetStrikethrough(bool strikethrough)
+{
+    m_strikethrough = strikethrough;
+}
+
 bool wxFontRefData::SetFaceName(const wxString& facename)
 {
     return m_nativeFontInfo.SetFaceName(facename);
@@ -288,7 +300,7 @@
     UnRef();
 
     m_refData = new wxFontRefData(pointSize, family, style, weight,
-                                  underlined, face, encoding);
+                                  underlined, false, face, encoding);
 
     return true;
 }
@@ -356,6 +368,13 @@
     return M_FONTDATA->m_underlined;
 }
 
+bool wxFont::GetStrikethrough() const
+{
+    wxCHECK_MSG( IsOk(), false, wxT("invalid font") );
+
+    return M_FONTDATA->m_strikethrough;
+}
+
 wxFontEncoding wxFont::GetEncoding() const
 {
     wxCHECK_MSG( IsOk(), wxFONTENCODING_SYSTEM, wxT("invalid font") );
@@ -425,6 +444,13 @@
     M_FONTDATA->SetUnderlined(underlined);
 }
 
+void wxFont::SetStrikethrough(bool strikethrough)
+{
+    AllocExclusive();
+
+    M_FONTDATA->SetStrikethrough(strikethrough);
+}
+
 void wxFont::SetEncoding(wxFontEncoding encoding)
 {
     AllocExclusive();
diff -brut wxWidgets.orig/src/gtk/gnome/gprint.cpp wxWidgets.patched/src/gtk/gnome/gprint.cpp
--- wxWidgets.orig/src/gtk/gnome/gprint.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/gnome/gprint.cpp	2011-12-08 15:07:08.000000000 -0800
@@ -1593,13 +1593,15 @@
     double yy = YLOG2DEV(y);
 
     bool underlined = m_font.IsOk() && m_font.GetUnderlined();
+    bool strikethrough = mfont.IsOk() && m_font.GetStrikethrough();
 
     const wxScopedCharBuffer data(text.utf8_str());
 
     size_t datalen = strlen(data);
     pango_layout_set_text( m_layout, data, datalen);
 
-    if (underlined)
+    CheckUnderlineOrStrikethrough( underlined, strikethrough, datalen, m_layout, false );
+/*    if (underlined)
     {
         PangoAttrList *attrs = pango_attr_list_new();
         PangoAttribute *a = pango_attr_underline_new(PANGO_UNDERLINE_SINGLE);
@@ -1609,7 +1611,7 @@
         pango_layout_set_attributes(m_layout, attrs);
         pango_attr_list_unref(attrs);
     }
-
+*/
     if (m_textForegroundColour.IsOk())
     {
         unsigned char red = m_textForegroundColour.Red();
diff -brut wxWidgets.orig/src/gtk/print.cpp wxWidgets.patched/src/gtk/print.cpp
--- wxWidgets.orig/src/gtk/print.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/print.cpp	2011-12-08 15:06:54.000000000 -0800
@@ -1739,13 +1739,15 @@
     angle = -angle;
 
     bool underlined = m_font.IsOk() && m_font.GetUnderlined();
+    bool strikethrough = m_font.IsOk() && m_font.GetUnderlined();
 
     const wxScopedCharBuffer data = text.utf8_str();
 
     size_t datalen = strlen(data);
     pango_layout_set_text( m_layout, data, datalen);
 
-    if (underlined)
+    CheckUnderlineOrStrikethrough( underlined, strikethrough, datalen, m_layout, false );
+/*    if (underlined)
     {
         PangoAttrList *attrs = pango_attr_list_new();
         PangoAttribute *a = pango_attr_underline_new(PANGO_UNDERLINE_SINGLE);
@@ -1755,7 +1757,7 @@
         pango_layout_set_attributes(m_layout, attrs);
         pango_attr_list_unref(attrs);
     }
-
+*/
     if (m_textForegroundColour.IsOk())
     {
         unsigned char red = m_textForegroundColour.Red();
diff -brut wxWidgets.orig/src/gtk/stattext.cpp wxWidgets.patched/src/gtk/stattext.cpp
--- wxWidgets.orig/src/gtk/stattext.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/stattext.cpp	2011-12-10 13:22:59.000000000 -0800
@@ -153,9 +153,11 @@
 bool wxStaticText::SetFont( const wxFont &font )
 {
     const bool wasUnderlined = GetFont().GetUnderlined();
+    const bool strikethrough = GetFont().GetStrikethrough();
 
     bool ret = wxControl::SetFont(font);
 
+    PangoAttrList *attrs = NULL;
     if ( font.GetUnderlined() != wasUnderlined )
     {
         // the underlines for mnemonics are incompatible with using attributes
@@ -170,7 +172,7 @@
         }
         else // the text is underlined now
         {
-            PangoAttrList *attrs = pango_attr_list_new();
+            attrs = pango_attr_list_new();
             PangoAttribute *a = pango_attr_underline_new(PANGO_UNDERLINE_SINGLE);
             a->start_index = 0;
             a->end_index = (guint)-1;
@@ -179,6 +181,19 @@
             pango_attr_list_unref(attrs);
         }
     }
+    if( strikethrough )
+    {
+        if( !attrs )
+            attrs = pango_attr_list_new();
+        else
+            pango_attr_list_ref( attrs );
+        PangoAttribute *a = pango_attr_strikethrough_new( TRUE );
+        a->start_index = 0;
+        a->end_index = (guint) -1;
+        pango_attr_list_insert(attrs, a);
+        gtk_label_set_attributes(GTK_LABEL(m_widget), attrs);
+        pango_attr_list_unref(attrs);
+    }
 
     // adjust the label size to the new label unless disabled
     if (!HasFlag(wxST_NO_AUTORESIZE))
diff -brut wxWidgets.orig/src/gtk/textctrl.cpp wxWidgets.patched/src/gtk/textctrl.cpp
--- wxWidgets.orig/src/gtk/textctrl.cpp	2011-11-30 14:41:30.000000000 -0800
+++ wxWidgets.patched/src/gtk/textctrl.cpp	2011-12-10 09:28:17.000000000 -0800
@@ -110,6 +110,18 @@
                                                   NULL );
             gtk_text_buffer_apply_tag (text_buffer, tag, start, end);
         }
+        if (font.GetStrikethrough())
+        {
+            g_snprintf(buf, sizeof(buf), "WXFONTSTRIKETHROUGH");
+            tag = gtk_text_tag_table_lookup( gtk_text_buffer_get_tag_table( text_buffer ),
+                                             buf );
+            if (!tag)
+                tag = gtk_text_buffer_create_tag( text_buffer, buf,
+                                                  "strikethrough-set", TRUE,
+                                                  "strikethrough", TRUE,
+                                                  NULL );
+            gtk_text_buffer_apply_tag (text_buffer, tag, start, end);
+        }
     }
 
     if (attr.HasTextColour())
diff -brut wxWidgets.orig/src/msw/font.cpp wxWidgets.patched/src/msw/font.cpp
--- wxWidgets.orig/src/msw/font.cpp	2011-11-30 14:41:31.000000000 -0800
+++ wxWidgets.patched/src/msw/font.cpp	2011-12-07 14:12:34.000000000 -0800
@@ -63,7 +63,7 @@
     wxFontRefData()
     {
         Init(-1, wxSize(0,0), false, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL,
-             wxFONTWEIGHT_NORMAL, false, wxEmptyString,
+             wxFONTWEIGHT_NORMAL, false, false, wxEmptyString,
              wxFONTENCODING_DEFAULT);
     }
 
@@ -74,11 +74,12 @@
                   wxFontStyle style,
                   wxFontWeight weight,
                   bool underlined,
+                                  bool strikethrough,
                   const wxString& faceName,
                   wxFontEncoding encoding)
     {
         Init(size, pixelSize, sizeUsingPixels, family, style, weight,
-             underlined, faceName, encoding);
+             underlined, strikethrough, faceName, encoding);
     }
 
     wxFontRefData(const wxNativeFontInfo& info, WXHFONT hFont = 0)
@@ -134,6 +135,11 @@
         return m_nativeFontInfo.GetUnderlined();
     }
 
+    bool GetStrikethrough() const
+        {
+                return m_nativeFontInfo.GetStrikethrough();
+        }
+
     wxString GetFaceName() const
     {
         wxString facename = m_nativeFontInfo.GetFaceName();
@@ -225,6 +231,13 @@
         m_nativeFontInfo.SetUnderlined(underlined);
     }
 
+        void SetStrikethrough(bool strikethrough)
+        {
+                Free();
+
+                m_nativeFontInfo.SetStrikethrough(strikethrough);
+        }
+
     void SetEncoding(wxFontEncoding encoding)
     {
         Free();
@@ -262,6 +275,7 @@
               wxFontStyle style,
               wxFontWeight weight,
               bool underlined,
+                          bool strikethrough,
               const wxString& faceName,
               wxFontEncoding encoding);
 
@@ -336,6 +350,7 @@
                          wxFontStyle style,
                          wxFontWeight weight,
                          bool underlined,
+                                                 bool strikethrough,
                          const wxString& faceName,
                          wxFontEncoding encoding)
 {
@@ -350,6 +365,7 @@
     SetStyle(style);
     SetWeight(weight);
     SetUnderlined(underlined);
+    SetStrikethrough(strikethrough);
 
     // set the family/facename
     SetFamily(family);
@@ -463,6 +479,11 @@
     return lf.lfUnderline != 0;
 }
 
+bool wxNativeFontInfo::GetStrikethrough() const
+{
+        return lf.lfStrikeOut != 0;
+}
+
 wxString wxNativeFontInfo::GetFaceName() const
 {
     return lf.lfFaceName;
@@ -583,6 +604,11 @@
     lf.lfUnderline = underlined;
 }
 
+void wxNativeFontInfo::SetStrikethrough(bool strikethrough)
+{
+        lf.lfStrikeOut = strikethrough;
+}
+
 bool wxNativeFontInfo::SetFaceName(const wxString& facename)
 {
     wxStrlcpy(lf.lfFaceName, facename.c_str(), WXSIZEOF(lf.lfFaceName));
@@ -808,7 +834,7 @@
 
     m_refData = new wxFontRefData(pointSize, pixelSize, sizeUsingPixels,
                                   family, style, weight,
-                                  underlined, faceName, encoding);
+                                  underlined, false, faceName, encoding);
 
     return RealizeResource();
 }
@@ -930,6 +956,13 @@
     M_FONTDATA->SetUnderlined(underlined);
 }
 
+void wxFont::SetStrikethrough(bool strikethrough)
+{
+        AllocExclusive();
+
+        M_FONTDATA->SetStrikethrough(strikethrough);
+}
+
 void wxFont::SetEncoding(wxFontEncoding encoding)
 {
     AllocExclusive();
@@ -995,6 +1028,13 @@
     return M_FONTDATA->GetUnderlined();
 }
 
+bool wxFont::GetStrikethrough() const
+{
+        wxCHECK_MSG( IsOk(), false, wxT("invalid font") );
+
+        return M_FONTDATA->GetStrikethrough();
+}
+
 wxString wxFont::GetFaceName() const
 {
     wxCHECK_MSG( IsOk(), wxEmptyString, wxT("invalid font") );

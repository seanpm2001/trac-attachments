Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 55267)
+++ include/wx/font.h	(working copy)
@@ -168,6 +168,8 @@
     virtual int GetStyle() const = 0;
     virtual int GetWeight() const = 0;
     virtual bool GetUnderlined() const = 0;
+// TODO: implement for other platforms than msw
+    virtual bool GetStrikethrough() const = 0;
     virtual wxString GetFaceName() const = 0;
     virtual wxFontEncoding GetEncoding() const = 0;
     virtual const wxNativeFontInfo *GetNativeFontInfo() const = 0;
@@ -184,6 +186,8 @@
     virtual void SetStyle( int style ) = 0;
     virtual void SetWeight( int weight ) = 0;
     virtual void SetUnderlined( bool underlined ) = 0;
+// TODO: implement for other platforms than msw
+    virtual void SetStrikethrough( bool strikethrough ) = 0;
     virtual void SetEncoding(wxFontEncoding encoding) = 0;
     virtual bool SetFaceName( const wxString& faceName );
     void SetNativeFontInfo(const wxNativeFontInfo& info)
Index: include/wx/fontutil.h
===================================================================
--- include/wx/fontutil.h	(revision 55267)
+++ include/wx/fontutil.h	(working copy)
@@ -187,6 +187,7 @@
     wxFontStyle GetStyle() const;
     wxFontWeight GetWeight() const;
     bool GetUnderlined() const;
+    bool GetStrikethrough() const;
     wxString GetFaceName() const;
     wxFontFamily GetFamily() const;
     wxFontEncoding GetEncoding() const;
@@ -196,6 +197,7 @@
     void SetStyle(wxFontStyle style);
     void SetWeight(wxFontWeight weight);
     void SetUnderlined(bool underlined);
+    void SetStrikethrough(bool strikethrough);
     bool SetFaceName(const wxString& facename);
     void SetFamily(wxFontFamily family);
     void SetEncoding(wxFontEncoding encoding);
Index: include/wx/msw/font.h
===================================================================
--- include/wx/msw/font.h	(revision 55267)
+++ include/wx/msw/font.h	(working copy)
@@ -52,6 +52,12 @@
         Create(info, hFont);
     }
 
+    wxFont(int pointSize,
+           wxFontFamily family,
+           int flags = wxFONTFLAG_DEFAULT,
+           const wxString& face = wxEmptyString,
+           wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
+
     wxFont(const wxString& fontDesc);
 
     bool Create(int size,
@@ -63,7 +69,7 @@
                 wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
     {
         return DoCreate(size, wxDefaultSize, false, family, style,
-                        weight, underlined, face, encoding);
+                        weight, underlined, false, face, encoding);
     }
 
     bool Create(const wxSize& pixelSize,
@@ -75,7 +81,7 @@
                 wxFontEncoding encoding = wxFONTENCODING_DEFAULT)
     {
         return DoCreate(-1, pixelSize, true, family, style,
-                        weight, underlined, face, encoding);
+                        weight, underlined, false, face, encoding);
     }
 
     bool Create(const wxNativeFontInfo& info, WXHFONT hFont = 0);
@@ -94,6 +100,7 @@
     virtual int GetStyle() const;
     virtual int GetWeight() const;
     virtual bool GetUnderlined() const;
+    virtual bool GetStrikethrough() const;
     virtual wxString GetFaceName() const;
     virtual wxFontEncoding GetEncoding() const;
     virtual const wxNativeFontInfo *GetNativeFontInfo() const;
@@ -105,6 +112,7 @@
     virtual void SetWeight(int weight);
     virtual bool SetFaceName(const wxString& faceName);
     virtual void SetUnderlined(bool underlined);
+    virtual void SetStrikethrough(bool strikethrough);
     virtual void SetEncoding(wxFontEncoding encoding);
 
     virtual bool IsFixedWidth() const;
@@ -129,6 +137,7 @@
                   int style,
                   int weight,
                   bool underlined = false,
+                  bool strikethrough = false,
                   const wxString& face = wxEmptyString,
                   wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
 
Index: interface/wx/font.h
===================================================================
--- interface/wx/font.h	(revision 55267)
+++ interface/wx/font.h	(working copy)
@@ -263,6 +263,11 @@
            const bool underline = false,
            const wxString& faceName = "",
            wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
+    wxFont(int pointSize,
+           wxFontFamily family,
+           int flags = wxFONTFLAG_DEFAULT,
+           const wxString& face = wxEmptyString,
+           wxFontEncoding encoding = wxFONTENCODING_DEFAULT);
     //@}
 
     /**
@@ -346,6 +351,13 @@
     bool GetUnderlined() const;
 
     /**
+        Returns @true if the font is striked, @false otherwise.
+
+        @see SetStrikethrough()
+    */
+    bool GetStrikethrough() const;
+
+    /**
         Gets the font weight. See wxFont() for a list of valid
         weight identifiers.
 
@@ -584,6 +596,16 @@
     void SetUnderlined(const bool underlined);
 
     /**
+        Sets a striked font.
+
+        @param strikethrough
+            @true to stike, @false otherwise.
+
+        @see GetStrikethrough()
+    */
+    void SetStrikethrough(const bool strikethrough);
+
+    /**
         Sets the font weight.
 
         @param weight
Index: src/common/fontcmn.cpp
===================================================================
--- src/common/fontcmn.cpp	(revision 55267)
+++ src/common/fontcmn.cpp	(working copy)
@@ -171,8 +171,7 @@
                         const wxString& face,
                         wxFontEncoding encoding)
 {
-    return New(pointSize, family, flags2Style(flags), flags2Weight(flags),
-               flags2Underlined(flags), face, encoding);
+    return new wxFont(pointSize, family, flags, face, encoding);
 }
 
 /* static */
@@ -336,6 +335,7 @@
             GetStyle() == font.GetStyle() &&
             GetWeight() == font.GetWeight() &&
             GetUnderlined() == font.GetUnderlined() &&
+            GetStrikethrough() == font.GetStrikethrough() &&
             GetFaceName().IsSameAs(font.GetFaceName(), false) &&
             GetEncoding() == font.GetEncoding()
            );
Index: src/msw/font.cpp
===================================================================
--- src/msw/font.cpp	(revision 55267)
+++ src/msw/font.cpp	(working copy)
@@ -109,7 +109,7 @@
     wxFontRefData()
     {
         Init(-1, wxSize(0,0), false, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL,
-             wxFONTWEIGHT_NORMAL, false, wxEmptyString,
+             wxFONTWEIGHT_NORMAL, false, false, wxEmptyString,
              wxFONTENCODING_DEFAULT);
     }
 
@@ -120,11 +120,12 @@
                   int style,
                   int weight,
                   bool underlined,
+                  bool strikethrough,
                   const wxString& faceName,
                   wxFontEncoding encoding)
     {
         Init(size, pixelSize, sizeUsingPixels, family, style, weight,
-             underlined, faceName, encoding);
+             underlined, strikethrough, faceName, encoding);
     }
 
     wxFontRefData(const wxNativeFontInfo& info, WXHFONT hFont = 0)
@@ -142,7 +143,8 @@
         {
             Init(data.m_pointSize, data.m_pixelSize, data.m_sizeUsingPixels,
                  data.m_family, data.m_style, data.m_weight,
-                 data.m_underlined, data.m_faceName, data.m_encoding);
+                 data.m_underlined, data.m_strikethrough,
+                 data.m_faceName, data.m_encoding);
         }
     }
 
@@ -194,6 +196,12 @@
                                   : m_underlined;
     }
 
+    bool GetStrikethrough() const
+    {
+        return m_nativeFontInfoOk ? m_nativeFontInfo.GetStrikethrough()
+                                  : m_strikethrough;
+    }
+
     wxString GetFaceName() const
     {
         wxString s;
@@ -305,6 +313,16 @@
             m_underlined = underlined;
     }
 
+    void SetStrikethrough(bool strikethrough)
+    {
+        Free();
+
+        if ( m_nativeFontInfoOk )
+            m_nativeFontInfo.SetStrikethrough(strikethrough);
+        else
+            m_strikethrough = strikethrough;
+    }
+
     void SetEncoding(wxFontEncoding encoding)
     {
         Free();
@@ -338,6 +356,7 @@
               int style,
               int weight,
               bool underlined,
+              bool strikethrough,
               const wxString& faceName,
               wxFontEncoding encoding);
 
@@ -351,6 +370,7 @@
     int           m_style;
     int           m_weight;
     bool          m_underlined;
+    bool          m_strikethrough;
     wxString      m_faceName;
     wxFontEncoding m_encoding;
 
@@ -379,6 +399,7 @@
                          int style,
                          int weight,
                          bool underlined,
+                         bool strikethrough,
                          const wxString& faceName,
                          wxFontEncoding encoding)
 {
@@ -390,6 +411,7 @@
     m_style = style;
     m_weight = weight;
     m_underlined = underlined;
+    m_strikethrough = strikethrough;
     m_faceName = faceName;
     m_encoding = encoding;
 
@@ -509,6 +531,11 @@
     return lf.lfUnderline != 0;
 }
 
+bool wxNativeFontInfo::GetStrikethrough() const
+{
+    return lf.lfStrikeOut != 0;
+}
+
 wxString wxNativeFontInfo::GetFaceName() const
 {
     return lf.lfFaceName;
@@ -616,6 +643,11 @@
     lf.lfUnderline = underlined;
 }
 
+void wxNativeFontInfo::SetStrikethrough(bool strikethrough)
+{
+    lf.lfStrikeOut = strikethrough;
+}
+
 bool wxNativeFontInfo::SetFaceName(const wxString& facename)
 {
     size_t len = WXSIZEOF(lf.lfFaceName);
@@ -861,6 +893,35 @@
         (void)Create(info);
 }
 
+wxFont::wxFont(int pointSize,
+               wxFontFamily family,
+               int flags,
+               const wxString& face,
+               wxFontEncoding encoding)
+{
+    wxNativeFontInfo info;
+
+    info.SetPointSize(pointSize);
+    info.SetFamily(family);
+    info.SetFaceName(face);
+    info.SetEncoding(encoding);
+
+    info.SetStyle(flags & wxFONTFLAG_ITALIC
+                    ? wxFONTSTYLE_ITALIC
+                    : flags & wxFONTFLAG_SLANT
+                        ? wxFONTSTYLE_SLANT
+                        : wxFONTSTYLE_NORMAL);
+    info.SetWeight(flags & wxFONTFLAG_LIGHT
+                    ? wxFONTWEIGHT_LIGHT
+                    : flags & wxFONTFLAG_BOLD
+                        ? wxFONTWEIGHT_BOLD
+                        : wxFONTWEIGHT_NORMAL);
+    info.SetUnderlined((flags & wxFONTFLAG_UNDERLINED) != 0);
+    info.SetStrikethrough((flags & wxFONTFLAG_STRIKETHROUGH) != 0);
+
+    Create(info, 0);
+}
+
 bool wxFont::DoCreate(int pointSize,
                       const wxSize& pixelSize,
                       bool sizeUsingPixels,
@@ -868,6 +929,7 @@
                       int style,
                       int weight,
                       bool underlined,
+                      bool strikethrough,
                       const wxString& faceName,
                       wxFontEncoding encoding)
 {
@@ -882,7 +944,8 @@
 
     m_refData = new wxFontRefData(pointSize, pixelSize, sizeUsingPixels,
                                   family, style, weight,
-                                  underlined, faceName, encoding);
+                                  underlined, strikethrough,
+                                  faceName, encoding);
 
     return RealizeResource();
 }
@@ -1003,6 +1066,13 @@
     M_FONTDATA->SetUnderlined(underlined);
 }
 
+void wxFont::SetStrikethrough(bool strikethrough)
+{
+    AllocExclusive();
+
+    M_FONTDATA->SetStrikethrough(strikethrough);
+}
+
 void wxFont::SetEncoding(wxFontEncoding encoding)
 {
     AllocExclusive();
@@ -1070,6 +1140,13 @@
     return M_FONTDATA->GetUnderlined();
 }
 
+bool wxFont::GetStrikethrough() const
+{
+    wxCHECK_MSG( Ok(), false, wxT("invalid font") );
+
+    return M_FONTDATA->GetStrikethrough();
+}
+
 wxString wxFont::GetFaceName() const
 {
     wxCHECK_MSG( Ok(), wxEmptyString, wxT("invalid font") );

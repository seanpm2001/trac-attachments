diff -r f626299f182c include/wx/chkconf.h
--- a/include/wx/chkconf.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/chkconf.h	Fri Dec 26 20:12:11 2008 +0100
@@ -1759,16 +1759,6 @@
 #   endif
 #endif /* !wxUSE_IMAGLIST */
 
-#if !wxUSE_MSGDLG
-#   ifdef wxABORT_ON_CONFIG_ERROR
-        /* FIXME: should compile without it, of course, but doesn't */
-#       error "wxMessageBox is always needed"
-#   else
-#       undef wxUSE_MSGDLG
-#       define wxUSE_MSGDLG 1
-#   endif
-#endif
-
 #if wxUSE_RADIOBOX
 #   if !wxUSE_RADIOBTN
 #        ifdef wxABORT_ON_CONFIG_ERROR
diff -r f626299f182c include/wx/msw/frame.h
--- a/include/wx/msw/frame.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/msw/frame.h	Fri Dec 26 20:12:11 2008 +0100
@@ -133,8 +133,11 @@
     // wxMDIChildFrame
     bool MSWDoTranslateMessage(wxFrame *frame, WXMSG *msg);
 
+    
+#if wxUSE_MENUS
     // handle WM_INITMENUPOPUP message to generate wxEVT_MENU_OPEN
     bool HandleInitMenuPopup(WXHMENU hMenu);
+#endif
 
     virtual bool IsMDIChild() const { return false; }
 
diff -r f626299f182c include/wx/msw/region.h
--- a/include/wx/msw/region.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/msw/region.h	Fri Dec 26 20:12:11 2008 +0100
@@ -21,6 +21,7 @@
     wxRegion(const wxRect& rect);
     wxRegion(WXHRGN hRegion); // Hangs on to this region
     wxRegion(size_t n, const wxPoint *points, int fillStyle = wxODDEVEN_RULE );
+#if wxUSE_IMAGE
     wxRegion( const wxBitmap& bmp)
     {
         Union(bmp);
@@ -30,6 +31,7 @@
     {
         Union(bmp, transColour, tolerance);
     }
+#endif // wxUSE_IMAGE
 
     virtual ~wxRegion();
 
diff -r f626299f182c include/wx/msw/setup.h
--- a/include/wx/msw/setup.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/msw/setup.h	Fri Dec 26 20:12:11 2008 +0100
@@ -811,7 +811,7 @@
 //
 // Default is 1.
 //
-// Recommended setting: 1 (can't be disabled under MSW)
+// Recommended setting: 1
 #define wxUSE_MENUS         1
 
 // Use wxSashWindow class.
diff -r f626299f182c include/wx/msw/setup0.h
--- a/include/wx/msw/setup0.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/msw/setup0.h	Fri Dec 26 20:12:11 2008 +0100
@@ -811,7 +811,7 @@
 //
 // Default is 1.
 //
-// Recommended setting: 1 (can't be disabled under MSW)
+// Recommended setting: 1
 #define wxUSE_MENUS         1
 
 // Use wxSashWindow class.
diff -r f626299f182c include/wx/msw/window.h
--- a/include/wx/msw/window.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/msw/window.h	Fri Dec 26 20:12:11 2008 +0100
@@ -348,7 +348,7 @@
 #if wxUSE_ACCEL
     bool HandleHotKey(WXWPARAM wParam, WXLPARAM lParam);
 #endif
-#ifdef __WIN32__
+#if defined(__WIN32__) && wxUSE_MENUS
     int HandleMenuChar(int chAccel, WXLPARAM lParam);
 #endif
     // Create and process a clipboard event specified by type.
diff -r f626299f182c include/wx/taskbar.h
--- a/include/wx/taskbar.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/taskbar.h	Fri Dec 26 20:12:11 2008 +0100
@@ -33,15 +33,21 @@
     virtual bool SetIcon(const wxIcon& icon,
                          const wxString& tooltip = wxEmptyString) = 0;
     virtual bool RemoveIcon() = 0;
+#ifdef wxUSE_MENUS
     virtual bool PopupMenu(wxMenu *menu) = 0;
+#endif
 
 protected:
+#ifdef wxUSE_MENUS
     // creates menu to be displayed when user clicks on the icon
     virtual wxMenu *CreatePopupMenu() { return NULL; }
+#endif
 
 private:
+#ifdef wxUSE_MENUS
     // default events handling, calls CreatePopupMenu:
     void OnRightButtonDown(wxTaskBarIconEvent& event);
+#endif
 
     DECLARE_EVENT_TABLE()
     DECLARE_NO_COPY_CLASS(wxTaskBarIconBase)
diff -r f626299f182c include/wx/univ/setup.h
--- a/include/wx/univ/setup.h	Sun Nov 30 10:28:28 2008 +0100
+++ b/include/wx/univ/setup.h	Fri Dec 26 20:12:11 2008 +0100
@@ -836,7 +836,7 @@
 //
 // Default is 1.
 //
-// Recommended setting: 1 (can't be disabled under MSW)
+// Recommended setting: 1
 #define wxUSE_MENUS 1
 
 // Use wxSashWindow class.
diff -r f626299f182c src/common/containr.cpp
--- a/src/common/containr.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/common/containr.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -146,7 +146,7 @@
 // within the same group. Used by wxSetFocusToChild on wxMSW
 // --------------------------------------------------------------------
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__) && wxUSE_RADIOBTN
 
 wxRadioButton* wxGetPreviousButtonInGroup(wxRadioButton *btn)
 {
@@ -256,7 +256,7 @@
     return NULL;
 }
 
-#endif // __WXMSW__
+#endif // defined(__WXMSW__) && wxUSE_RADIOBTN
 
 // ----------------------------------------------------------------------------
 // Keyboard handling - this is the place where the TAB traversal logic is
@@ -369,7 +369,7 @@
 
         if ( winFocus )
         {
-#ifdef __WXMSW__
+#if defined(__WXMSW__) && wxUSE_RADIOBTN
             // If we are in a radio button group, start from the first item in the
             // group
             if ( event.IsFromTab() && wxIsKindOf(winFocus, wxRadioButton ) )
@@ -448,7 +448,7 @@
 
         wxWindow *child = node->GetData();
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__) && wxUSE_RADIOBTN
         if ( event.IsFromTab() )
         {
             if ( wxIsKindOf(child, wxRadioButton) )
@@ -502,7 +502,7 @@
                 return;
             }
         }
-#endif // __WXMSW__
+#endif // defined(__WXMSW__) && wxUSE_RADIOBTN
 
         if ( child->AcceptsFocusFromKeyboard() )
         {
@@ -652,7 +652,7 @@
         
         if ( child->AcceptsFocusFromKeyboard() && !child->IsTopLevel() )
         {
-#ifdef __WXMSW__
+#if defined(__WXMSW__) && wxUSE_RADIOBTN
             // If a radiobutton is the first focusable child, search for the
             // selected radiobutton in the same group
             wxRadioButton* btn = wxDynamicCast(child, wxRadioButton);
diff -r f626299f182c src/common/memory.cpp
--- a/src/common/memory.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/common/memory.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -557,9 +557,11 @@
   wxMemStruct * st = NULL;
   for (st = from; st != 0; st = st->m_next)
   {
+#if wxUSE_LOG
       void* data = st->GetActualData();
 //      if ((data != (void*)m_debugStream) && (data != (void*) m_streamBuf))
       if (data != (void*) wxLog::GetActiveTarget())
+#endif //wxUSE_LOG
       {
         (st->*func) ();
       }
@@ -671,8 +673,13 @@
   wxMemStruct *st;
   for (st = from; st != 0; st = st->m_next)
   {
+#if wxUSE_LOG
     void* data = st->GetActualData();
-    if (detailed && (data != (void*) wxLog::GetActiveTarget()))
+    const bool dataIsLog = (data == (void*) wxLog::GetActiveTarget());
+#else
+    const bool dataIsLog = false;
+#endif //wxUSE_LOG
+    if (detailed && !dataIsLog)
     {
       wxChar *className = (wxChar*) wxT("nonobject");
       if (st->m_isObject && st->GetActualData())
@@ -694,7 +701,7 @@
       stats->totalSize += st->RequestSize();
     }
 
-    if (data != (void*) wxLog::GetActiveTarget())
+    if (!dataIsLog)
     {
         totalSize += st->RequestSize();
         if (st->m_isObject)
@@ -828,8 +835,10 @@
 
   for (wxMemStruct * st = from; st != 0; st = st->m_next)
   {
+#if wxUSE_LOG
       void* data = st->GetActualData();
       if (data != (void*) wxLog::GetActiveTarget())
+#endif //wxUSE_LOG
           n ++;
   }
 
diff -r f626299f182c src/common/msgout.cpp
--- a/src/common/msgout.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/common/msgout.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -216,7 +216,9 @@
     if ( wxTheApp )
         title.Printf(_("%s message"), wxTheApp->GetAppName().c_str());
 
+#if wxUSE_MSGDLG
     ::wxMessageBox(out, title);
+#endif // wxUSE_MSGDLG
 }
 
 #endif // wxUSE_GUI
diff -r f626299f182c src/common/wincmn.cpp
--- a/src/common/wincmn.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/common/wincmn.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -2392,9 +2392,9 @@
         wxMessageBox(msg, _T("wxWidgets information"),
                      wxICON_INFORMATION | wxOK,
                      (wxWindow *)this);
+#endif // wxUSE_MSGDLG
     }
     else
-#endif // wxUSE_MSGDLG
     {
         event.Skip();
     }
diff -r f626299f182c src/generic/aboutdlgg.cpp
--- a/src/generic/aboutdlgg.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/generic/aboutdlgg.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -204,6 +204,7 @@
         AddControl(new wxStaticText(this, wxID_ANY, text));
 }
 
+#if wxUSE_COLLPANE
 void wxGenericAboutDialog::AddCollapsiblePane(const wxString& title,
                                               const wxString& text)
 {
@@ -219,6 +220,7 @@
     // NB: all the wxCollapsiblePanes must be added with a null proportion value
     m_sizerText->Add(pane, wxSizerFlags(0).Expand().Border(wxBOTTOM));
 }
+#endif
 
 // ----------------------------------------------------------------------------
 // public functions
diff -r f626299f182c src/msw/frame.cpp
--- a/src/msw/frame.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/frame.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -563,6 +563,7 @@
         }
 #endif // wxUSE_TOOLBAR
 
+#if wxUSE_MENUS
         if (m_fsStyle & wxFULLSCREEN_NOMENUBAR)
         {
             WXHMENU menu = m_hMenu;
@@ -584,6 +585,7 @@
                 ::SetMenu(GetHwnd(), (HMENU)menu);
             }
         }
+#endif
 
 #if wxUSE_STATUSBAR
         wxStatusBar *theStatusBar = GetStatusBar();
@@ -1000,11 +1002,13 @@
 #endif
     else
     {
+#if wxUSE_MENUS || wxUSE_TOOLBAR
         // don't give hints for separators (doesn't make sense) nor for the
         // items opening popup menus (they don't have them anyhow) but do clear
         // the status line - otherwise, we would be left with the help message
         // for the previous item which doesn't apply any more
         DoGiveHelp(wxEmptyString, false);
+#endif
 
         return false;
     }
@@ -1066,9 +1070,11 @@
             processed = HandlePaint();
             break;
 
+#if wxUSE_MENUS
         case WM_INITMENUPOPUP:
             processed = HandleInitMenuPopup((WXHMENU) wParam);
             break;
+#endif
 
 #if !defined(__WXMICROWIN__) && !defined(__WXWINCE__)
         case WM_MENUSELECT:
@@ -1103,6 +1109,7 @@
     return rc;
 }
 
+#if wxUSE_MENUS
 // handle WM_INITMENUPOPUP message
 bool wxFrame::HandleInitMenuPopup(WXHMENU hMenu)
 {
@@ -1125,6 +1132,7 @@
 
     return GetEventHandler()->ProcessEvent(event);
 }
+#endif
 
 // ----------------------------------------------------------------------------
 // wxFrame size management: we exclude the areas taken by menu/status/toolbars
diff -r f626299f182c src/msw/main.cpp
--- a/src/msw/main.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/main.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -181,6 +181,7 @@
             wxStrcpy(fullname, _T("c:\\"));
         }
 
+#if wxUSE_DATETIME
         // use PID and date to make the report file name more unique
         wxString name = wxString::Format
                         (
@@ -190,6 +191,16 @@
                             wxDateTime::Now().Format(_T("%Y%m%dT%H%M%S")).c_str(),
                             ::GetCurrentProcessId()
                         );
+#else
+        // use PID to make the report file name more unique
+        wxString name = wxString::Format
+                        (
+                            _T("%s_%lu.dmp"),
+                            wxTheApp ? wxTheApp->GetAppName().c_str()
+                                     : _T("wxwindows"),
+                            ::GetCurrentProcessId()
+                        );
+#endif
 
         wxStrncat(fullname, name, WXSIZEOF(fullname) - wxStrlen(fullname) - 1);
 
diff -r f626299f182c src/msw/msgdlg.cpp
--- a/src/msw/msgdlg.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/msgdlg.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -16,6 +16,8 @@
     #pragma hdrstop
 #endif
 
+#if wxUSE_MSGDLG
+
 #include "wx/msgdlg.h"
 
 #ifndef WX_PRECOMP
@@ -152,3 +154,5 @@
     }
     return ans;
 }
+
+#endif // wxUSE_MSGDLG
diff -r f626299f182c src/msw/taskbar.cpp
--- a/src/msw/taskbar.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/taskbar.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -184,6 +184,7 @@
     return Shell_NotifyIcon(NIM_DELETE, &notifyData) != 0;
 }
 
+#if wxUSE_MENUS
 bool wxTaskBarIcon::PopupMenu(wxMenu *menu)
 {
     wxASSERT_MSG( m_win != NULL, _T("taskbar icon not initialized") );
@@ -219,6 +220,7 @@
 
     return rval;
 }
+#endif
 
 #if WXWIN_COMPATIBILITY_2_4
 // Overridables
diff -r f626299f182c src/msw/tooltip.cpp
--- a/src/msw/tooltip.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/tooltip.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -421,6 +421,7 @@
         }
     }
 
+#if wxUSE_COMBOBOX
     // VZ: it's ugly to do it here, but I don't want any major changes right
     //     now, later we will probably want to have wxWindow::OnGotToolTip() or
     //     something like this where the derived class can do such things
@@ -436,6 +437,7 @@
             Add(hwndComboEdit);
         }
     }
+#endif // wxUSE_COMBOBOX
 #endif // !defined(__WXUNIVERSAL__)
 }
 
diff -r f626299f182c src/msw/utils.cpp
--- a/src/msw/utils.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/utils.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -1311,6 +1311,8 @@
 // font encoding <-> Win32 codepage conversion functions
 // ----------------------------------------------------------------------------
 
+#include "wx/fontenc.h"
+
 extern WXDLLIMPEXP_BASE long wxEncodingToCharset(wxFontEncoding encoding)
 {
     switch ( encoding )
diff -r f626299f182c src/msw/window.cpp
--- a/src/msw/window.cpp	Sun Nov 30 10:28:28 2008 +0100
+++ b/src/msw/window.cpp	Fri Dec 26 20:12:11 2008 +0100
@@ -3091,11 +3091,11 @@
             }
             break;
 
-#if wxUSE_HOTKEY
+#if wxUSE_HOTKEY && wxUSE_ACCEL
         case WM_HOTKEY:
             processed = HandleHotKey((WORD)wParam, lParam);
             break;
-#endif // wxUSE_HOTKEY
+#endif // wxUSE_HOTKEY && wxUSE_ACCEL
 
         case WM_HSCROLL:
         case WM_VSCROLL:
@@ -3296,6 +3296,7 @@
             break;
 #endif
 
+#if defined(__WIN32__) && wxUSE_MENUS
         case WM_MENUCHAR:
             // we're only interested in our own menus, not MF_SYSMENU
             if ( HIWORD(wParam) == MF_POPUP )
@@ -3309,6 +3310,7 @@
                 }
             }
             break;
+#endif
 
 #ifndef __WXWINCE__
         case WM_POWERBROADCAST:
@@ -5439,6 +5441,7 @@
     return GetEventHandler()->ProcessEvent(event);
 }
 
+#if defined(__WIN32__) && wxUSE_MENUS
 int wxWindowMSW::HandleMenuChar(int WXUNUSED_IN_WINCE(chAccel),
                                 WXLPARAM WXUNUSED_IN_WINCE(lParam))
 {
@@ -5508,6 +5511,7 @@
 #endif
     return wxNOT_FOUND;
 }
+#endif
 
 bool wxWindowMSW::HandleClipboardEvent( WXUINT nMsg )
 {

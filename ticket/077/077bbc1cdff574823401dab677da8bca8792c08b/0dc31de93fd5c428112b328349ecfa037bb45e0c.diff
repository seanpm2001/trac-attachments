diff --git tests/menu/menu.cpp tests/menu/menu.cpp
new file mode 100644
index 0000000..79a8032
--- /dev/null
+++ tests/menu/menu.cpp
@@ -0,0 +1,249 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/menu/menu.cpp
+// Purpose:     XRC classes unit test
+// Author:      wxWidgets team
+// Created:     2010-11-10
+// RCS-ID:      $Id$
+// Copyright:   (c) 2010 wxWidgets team
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif // WX_PRECOMP
+
+#include "wx/menu.h"
+#include <stdarg.h>
+
+
+// ----------------------------------------------------------------------------
+// helper
+// ----------------------------------------------------------------------------
+
+namespace
+{
+
+enum
+{ 
+    MenuTestCase_Quit = wxID_EXIT, MenuTestCase_About = wxID_ABOUT,
+    MenuTestCase_First = 10000
+};
+
+void PopulateMenu(wxMenu* menu, const wxString& name,  size_t& itemcount)
+{
+    for (int n=1; n< 6; ++n, ++itemcount)   // Start at item 1 to make it human-readable ;)
+    {
+        wxString label = name; label << n;
+        menu->Append(MenuTestCase_First + itemcount, label, label + " help string");
+    }
+}
+
+void RecursivelyCountMenuItems(const wxMenu* menu, size_t& count)
+{
+    CPPUNIT_ASSERT( menu );
+
+    count += menu->GetMenuItemCount();
+    for (size_t n=0; n < menu->GetMenuItemCount(); ++n)
+    {
+        wxMenuItem* item = menu->FindItemByPosition(n);
+        if (item->IsSubMenu())
+        {
+            RecursivelyCountMenuItems(item->GetSubMenu(), count);
+        }
+    }
+}
+
+} // anon namespace
+
+
+// ----------------------------------------------------------------------------
+// test class
+// ----------------------------------------------------------------------------
+
+class MenuTestCase : public CppUnit::TestCase
+{
+public:
+    MenuTestCase() {}
+
+    virtual void setUp() { CreateFrame(); }
+    virtual void tearDown() { m_frame->Destroy(); }
+
+private:
+    CPPUNIT_TEST_SUITE( MenuTestCase );
+        CPPUNIT_TEST( Menubar_Finding );
+        CPPUNIT_TEST( Menu_Finding );
+        CPPUNIT_TEST( Counting );
+    CPPUNIT_TEST_SUITE_END();
+
+    void CreateFrame();
+
+    void Menubar_Finding();
+    void Menu_Finding();
+    void Counting();
+
+    wxFrame* m_frame;
+    size_t m_itemCount;         // Holds the number of menuitems contained in all the menus
+    int m_submenu_item_id;      // Store here the id of a known submenu item, to be searched for later
+    int m_subsubmenu_item_id;   // and a sub-submenu item
+    wxArrayString m_menuLabels;
+
+    DECLARE_NO_COPY_CLASS(MenuTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( MenuTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( MenuTestCase, "MenuTestCase" );
+
+void MenuTestCase::CreateFrame()
+{
+    m_frame = new wxFrame(NULL, wxID_ANY, "test frame");
+    
+    wxMenu *fileMenu = new wxMenu;
+    wxMenu *helpMenu = new wxMenu;
+    wxMenu *subMenu = new wxMenu;
+    wxMenu *subsubMenu = new wxMenu;
+
+    size_t itemcount = 0;
+
+    PopulateMenu(subsubMenu, "Subsubmenu item ", itemcount);
+    m_subsubmenu_item_id = MenuTestCase_First + itemcount - 2;   // Store one of its IDs for later
+
+    PopulateMenu(subMenu, "Submenu item ", itemcount);
+    m_submenu_item_id = MenuTestCase_First + itemcount - 2;      // Store one of its IDs for later
+    subMenu->AppendSubMenu(subsubMenu, "Subsubmen&u", "Test a subsubmenu");
+
+    PopulateMenu(fileMenu, "Filemenu item ", itemcount);
+    // Add a 'real' item too, for future tests
+    fileMenu->Append(MenuTestCase_Quit, "E&xit\tAlt-X", "Quit this program");
+    
+
+    PopulateMenu(helpMenu, "Helpmenu item ", itemcount);
+    helpMenu->Append(MenuTestCase_About, "&About...\tF1", "(Would normally) Show about dialog");
+    helpMenu->AppendSubMenu(subMenu, "Sub&menu", "Test a submenu");
+
+    m_itemCount = itemcount + 4;    // +2 for E&xit and &About, +2 for the 2 submenus
+    
+    m_menuLabels.Add("&File");      // Use an arraystring here, to help with future tests
+    m_menuLabels.Add("&Help");
+
+    wxMenuBar *menuBar = new wxMenuBar();
+    menuBar->Append(fileMenu, m_menuLabels[0]);
+    menuBar->Append(helpMenu, m_menuLabels[1]);
+    m_frame->SetMenuBar(menuBar);
+}
+
+void MenuTestCase::Menubar_Finding()
+{
+    wxMenuBar* bar = m_frame->GetMenuBar();
+
+    // Find by name:
+    CPPUNIT_ASSERT( bar->FindMenu("File") != wxNOT_FOUND );
+    CPPUNIT_ASSERT( bar->FindMenu("&File") != wxNOT_FOUND );
+    CPPUNIT_ASSERT( bar->FindMenu("&Fail") == wxNOT_FOUND );
+
+    // Find by menu name plus item name:
+    CPPUNIT_ASSERT( bar->FindMenuItem("File", "Exit") != wxNOT_FOUND );
+    CPPUNIT_ASSERT( bar->FindMenuItem("&File", "E&xit") != wxNOT_FOUND );
+    // and using the menu title
+    int index = bar->FindMenu("&File");
+    wxString menutitle = bar->GetMenu(index)->GetTitle();
+    CPPUNIT_ASSERT( bar->FindMenuItem(menutitle, "E&xit") != wxNOT_FOUND );
+
+    // Find by position:
+    for (size_t n=0; n < bar->GetMenuCount(); ++n)
+    {
+        CPPUNIT_ASSERT( bar->GetMenu(n) );
+    }
+    
+    // Find by id:
+    wxMenu* menu = NULL;
+    wxMenuItem* item = NULL;
+    item = bar->FindItem(MenuTestCase_Quit, &menu);
+    CPPUNIT_ASSERT( item );
+    CPPUNIT_ASSERT( menu );
+    // Check that the correct menu was found
+    CPPUNIT_ASSERT( menu->FindChildItem(MenuTestCase_Quit) );
+
+    // Find submenu item:
+    item = bar->FindItem(m_submenu_item_id, &menu);
+    CPPUNIT_ASSERT( item );
+    CPPUNIT_ASSERT( menu );
+    // and, for completeness, a submenu one:
+    item = bar->FindItem(m_subsubmenu_item_id, &menu);
+    CPPUNIT_ASSERT( item );
+    CPPUNIT_ASSERT( menu );
+}
+
+void MenuTestCase::Menu_Finding()
+{
+    wxMenuBar* bar = m_frame->GetMenuBar();
+
+    // Find by name:
+    wxMenu* menu_find = bar->GetMenu(0);
+    CPPUNIT_ASSERT( menu_find->FindItem("Exit") != wxNOT_FOUND );
+    CPPUNIT_ASSERT( menu_find->FindItem("E&xit") != wxNOT_FOUND );
+    // and for submenus
+    wxMenu* menu_help = bar->GetMenu(1);
+    CPPUNIT_ASSERT( menu_help->FindItem("Submenu") != wxNOT_FOUND );
+    CPPUNIT_ASSERT( menu_help->FindItem("Sub&menu") != wxNOT_FOUND );
+
+    // Find by position:
+    for (size_t n=0; n < menu_help->GetMenuItemCount(); ++n)
+    {
+        CPPUNIT_ASSERT( menu_help->FindItemByPosition(n) );
+    }
+    
+    // Find by id:
+    CPPUNIT_ASSERT( menu_help->FindItem(MenuTestCase_About) );
+    CPPUNIT_ASSERT( menu_help->FindItem(MenuTestCase_Quit) == NULL );
+
+    for (size_t n=0; n < menu_help->GetMenuItemCount(); ++n)
+    {
+        size_t located_at;
+        wxMenuItem* item_by_pos = menu_help->FindItemByPosition(n);
+        CPPUNIT_ASSERT( item_by_pos );
+        wxMenuItem* item_by_id = menu_help->FindChildItem(item_by_pos->GetId(), &located_at);
+        CPPUNIT_ASSERT_EQUAL( item_by_pos, item_by_id );
+        CPPUNIT_ASSERT_EQUAL( located_at, n );
+    }
+
+    // Find submenu item:
+    for (size_t n=0; n < menu_help->GetMenuItemCount(); ++n)
+    {
+        wxMenuItem* item = menu_help->FindItemByPosition(n);
+        if (item->IsSubMenu())
+        {
+            wxMenu* submenu;
+            wxMenuItem* submenu_item = menu_help->FindItem(m_submenu_item_id, &submenu);
+            CPPUNIT_ASSERT( submenu_item );
+            CPPUNIT_ASSERT( item->GetSubMenu() == submenu );
+        }
+    }
+}
+
+void MenuTestCase::Counting()
+{
+    wxMenuBar* bar = m_frame->GetMenuBar();
+    // I suppose you could call this "counting menubars" :)
+    CPPUNIT_ASSERT( bar );
+
+    CPPUNIT_ASSERT_EQUAL( bar->GetMenuCount(), 2 );
+
+    size_t count = 0;
+    for (size_t n=0; n < bar->GetMenuCount(); ++n)
+    {
+        RecursivelyCountMenuItems(bar->GetMenu(n), count);
+    }
+    CPPUNIT_ASSERT_EQUAL( count, m_itemCount );
+}
diff --git tests/test.bkl tests/test.bkl
index 65dcac6..bd04f82 100644
--- tests/test.bkl
+++ tests/test.bkl
@@ -181,6 +181,7 @@
             image/image.cpp
             image/rawbmp.cpp
             html/htmlwindow.cpp
+            menu/menu.cpp
             misc/guifuncs.cpp
             misc/selstoretest.cpp
             misc/garbage.cpp

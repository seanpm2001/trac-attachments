Index: include/wx/gbsizer.h
===================================================================
--- include/wx/gbsizer.h	(revision 53603)
+++ include/wx/gbsizer.h	(working copy)
@@ -50,31 +50,6 @@
 };
 
 
-class WXDLLIMPEXP_CORE wxGBSpan
-{
-public:
-    wxGBSpan() : m_rowspan(1), m_colspan(1) {}
-    wxGBSpan(int rowspan, int colspan) : m_rowspan(rowspan), m_colspan(colspan) {}
-
-    // default copy ctor and assignment operator are okay.
-
-    int GetRowspan() const { return m_rowspan; }
-    int GetColspan() const { return m_colspan; }
-    void SetRowspan(int rowspan) { m_rowspan = rowspan; }
-    void SetColspan(int colspan) { m_colspan = colspan; }
-
-    bool operator==(const wxGBSpan& o) const { return m_rowspan == o.m_rowspan && m_colspan == o.m_colspan; }
-    bool operator!=(const wxGBSpan& o) const { return !(*this == o); }
-
-private:
-    int m_rowspan;
-    int m_colspan;
-};
-
-
-extern WXDLLIMPEXP_DATA_CORE(const wxGBSpan) wxDefaultSpan;
-
-
 //---------------------------------------------------------------------------
 // wxGBSizerItem
 //---------------------------------------------------------------------------
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 53603)
+++ include/wx/sizer.h	(working copy)
@@ -274,6 +274,9 @@
     wxSizerItem();
     virtual ~wxSizerItem();
 
+    // this is a hack.. see wxGridSizerItem::Insert
+    virtual bool IsBase() const { return true; };
+
     virtual void DeleteWindows();
 
     // Enable deleting the SizerItem without destroying the contained sizer.
@@ -690,7 +693,134 @@
     DECLARE_CLASS(wxSizer)
 };
 
+// ----------------------------------------------------------------------------
+// wxGridSpan, wxRowSpan, wxColSpan
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxGridSpan
+{
+public:
+    wxGridSpan() : m_rowspan(1), m_colspan(1) {};
+    wxGridSpan(int rowspan, int colspan) : 
+        m_rowspan(rowspan < 1 ? 1 : rowspan), m_colspan(colspan < 1 ? 1 : colspan) {};
+
+    // default copy ctor and assignment operator are okay.
+
+    int GetRowspan() const { return m_rowspan; }
+    int GetColspan() const { return m_colspan; }
+    void SetRowspan(int rowspan) { m_rowspan = rowspan < 1 ? 1 : rowspan; }
+    void SetColspan(int colspan) { m_colspan = colspan < 1 ? 1 : colspan; }
+
+    bool operator==(const wxGridSpan& o) const { return m_rowspan == o.m_rowspan && m_colspan == o.m_colspan; }
+    bool operator!=(const wxGridSpan& o) const { return !(*this == o); }
+
+private:
+    int m_rowspan;
+    int m_colspan;
+};
+
+// more intuitive way to say wxGridSpan(rowspan, 1)
+class WXDLLIMPEXP_CORE wxRowSpan : public wxGridSpan
+{
+public:
+    wxRowSpan(int rowspan) : wxGridSpan(rowspan, 1) {};
+};
+
+// more intuitive way to say wxGridSpan(1, colspan)
+class WXDLLIMPEXP_CORE wxColSpan : public wxGridSpan
+{
+public:
+    wxColSpan(int colspan) : wxGridSpan(1, colspan) {};
+};
+
+extern WXDLLIMPEXP_DATA_CORE(const wxGridSpan) wxDefaultSpan;
+
+// compatibility with wxGBSpan... since, they're exactly the same, and it
+// makes more sense to have it implemented here instead
+typedef wxGridSpan wxGBSpan;
+typedef wxRowSpan wxGBRowSpan;      // these two
+typedef wxColSpan wxGBColSpan;      // for consistancy
+
 //---------------------------------------------------------------------------
+// wxGridSizerItem
+//---------------------------------------------------------------------------
+
+
+class WXDLLIMPEXP_CORE wxGridSizerItem : public wxSizerItem
+{
+public:
+    // window
+    wxGridSizerItem( wxWindow *window,
+                int proportion,
+                int flag,
+                int border,
+                wxObject* userData,
+                const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem( window, proportion, flag, border, userData ), m_span(span)
+    {};
+
+    // window with flags
+    wxGridSizerItem(wxWindow *window, 
+                const wxSizerFlags& flags,
+                const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem(window, flags), m_span(span)
+    {};
+
+    // subsizer
+    wxGridSizerItem( wxSizer *sizer,
+                int proportion,
+                int flag,
+                int border,
+                wxObject* userData,
+                const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem( sizer, proportion, flag, border, userData ), m_span(span)
+    {};
+
+    // sizer with flags
+    wxGridSizerItem(wxSizer *sizer, 
+                const wxSizerFlags& flags,
+                const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem(sizer, flags), m_span(span)
+    {};
+
+    // spacer
+    wxGridSizerItem( int width,
+                 int height,
+                 int proportion,
+                 int flag,
+                 int border,
+                 wxObject* userData,
+                 const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem( width, height, proportion, flag, border, userData), m_span(span)
+    {};
+
+    // spacer with flags
+    wxGridSizerItem(int width, 
+                int height, 
+                const wxSizerFlags& flags,
+                const wxGridSpan& span = wxDefaultSpan ) :
+        wxSizerItem(width, height, flags), m_span(span)
+    {};
+
+    // default ctor
+    wxGridSizerItem() : wxSizerItem(), m_span(wxDefaultSpan) {};
+
+    // get/set
+    wxGridSpan GetSpan() const              { return m_span; };
+    void SetSpan(const wxGridSpan& span)    { m_span = span; };
+
+    // this is a hack.. see wxGridSizer::Insert
+    virtual bool IsBase() const { return false; };
+
+protected:
+    wxGridSpan m_span;
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxGridSizerItem)
+    DECLARE_NO_COPY_CLASS(wxGridSizerItem)
+};
+
+//---------------------------------------------------------------------------
 // wxGridSizer
 //---------------------------------------------------------------------------
 
@@ -712,6 +842,112 @@
     int GetVGap() const         { return m_vgap; }
     int GetHGap() const         { return m_hgap; }
 
+    // methods for adding elements to the sizer: there are Add/Insert/Prepend
+    // overloads for each of window/sizer/spacer/wxSizerItem
+    wxGridSizerItem* Add(wxWindow *window,
+                     int proportion = 0,
+                     int flag = 0,
+                     int border = 0,
+                     wxObject* userData = NULL,
+                     const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add(wxSizer *sizer,
+                     int proportion = 0,
+                     int flag = 0,
+                     int border = 0,
+                     wxObject* userData = NULL,
+                     const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add(int width,
+                     int height,
+                     int proportion = 0,
+                     int flag = 0,
+                     int border = 0,
+                     wxObject* userData = NULL,
+                     const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add( wxWindow *window, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add( wxSizer *sizer, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add( int width, int height, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Add( wxGridSizerItem *item);
+
+    wxGridSizerItem* AddSpacer(int size, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* AddStretchSpacer(int prop = 1, const wxGridSpan& span = wxDefaultSpan );
+
+    wxGridSizerItem* Insert(size_t index,
+                        wxWindow *window,
+                        int proportion = 0,
+                        int flag = 0,
+                        int border = 0,
+                        wxObject* userData = NULL,
+                        const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Insert(size_t index,
+                        wxSizer *sizer,
+                        int proportion = 0,
+                        int flag = 0,
+                        int border = 0,
+                        wxObject* userData = NULL,
+                        const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Insert(size_t index,
+                        int width,
+                        int height,
+                        int proportion = 0,
+                        int flag = 0,
+                        int border = 0,
+                        wxObject* userData = NULL,
+                        const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Insert(size_t index,
+                        wxWindow *window,
+                        const wxSizerFlags& flags,
+                        const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Insert(size_t index,
+                        wxSizer *sizer,
+                        const wxSizerFlags& flags,
+                        const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Insert(size_t index,
+                        int width,
+                        int height,
+                        const wxSizerFlags& flags,
+                        const wxGridSpan& span = wxDefaultSpan );
+
+    // This function: virtual wxSizerItem* wxGridSizer::Insert( size_t index, wxSizerItem *item )
+    // should be implemented, but we can't do it properly so we will have to hack 
+    // around it. Ideally, it should convert the wxSizerItem to a wxGridSizer item, 
+    // to ensure that only derived objects are stored in m_children. However, there
+    // doesn't seem to be a way to do that, so thats why the IsBase() function exists
+
+    wxGridSizerItem* Insert(size_t index, wxGridSizerItem *item)
+    {
+        return (wxGridSizerItem*)this->wxSizer::Insert(index, item);
+    }
+
+    wxGridSizerItem* InsertSpacer(size_t index, int size, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* InsertStretchSpacer(size_t index, int prop = 1, const wxGridSpan& span = wxDefaultSpan );
+
+    wxGridSizerItem* Prepend(wxWindow *window,
+                         int proportion = 0,
+                         int flag = 0,
+                         int border = 0,
+                         wxObject* userData = NULL,
+                         const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(wxSizer *sizer,
+                         int proportion = 0,
+                         int flag = 0,
+                         int border = 0,
+                         wxObject* userData = NULL,
+                         const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(int width,
+                         int height,
+                         int proportion = 0,
+                         int flag = 0,
+                         int border = 0,
+                         wxObject* userData = NULL, 
+                         const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(wxWindow *window, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(wxSizer *sizer, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(int width, int height, const wxSizerFlags& flags, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* Prepend(wxGridSizerItem *item );
+
+    wxGridSizerItem* PrependSpacer(int size, const wxGridSpan& span = wxDefaultSpan );
+    wxGridSizerItem* PrependStretchSpacer(int prop = 1, const wxGridSpan& span = wxDefaultSpan );
+
 protected:
     int    m_rows;
     int    m_cols;
@@ -720,6 +956,7 @@
 
     // return the number of total items and the number of columns and rows
     int CalcRowsCols(int& rows, int& cols) const;
+    wxSize wxGridSizer::CalcMaxWH() const;
 
     void SetItemBounds( wxSizerItem *item, int x, int y, int w, int h );
 
@@ -1187,4 +1424,186 @@
     return Insert(index, 0, 0, prop);
 }
 
+
+// ----------------------------------------------------------------------------
+// even more inline functions implementation
+// ----------------------------------------------------------------------------
+
+
+inline wxGridSizerItem*
+wxGridSizer::Add( wxGridSizerItem *item )
+{
+    return Insert( m_children.GetCount(), item);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( wxWindow *window, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span )
+{
+    return Add( new wxGridSizerItem( window, proportion, flag, border, userData, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( wxSizer *sizer, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span  )
+{
+    return Add( new wxGridSizerItem( sizer, proportion, flag, border, userData, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( int width, int height, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span  )
+{
+    return Add( new wxGridSizerItem( width, height, proportion, flag, border, userData, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( wxWindow *window, const wxSizerFlags& flags, const wxGridSpan& span  )
+{
+    return Add( new wxGridSizerItem(window, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( wxSizer *sizer, const wxSizerFlags& flags, const wxGridSpan& span  )
+{
+    return Add( new wxGridSizerItem(sizer, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Add( int width, int height, const wxSizerFlags& flags, const wxGridSpan& span  )
+{
+    return Add( new wxGridSizerItem(width, height, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::AddSpacer(int size, const wxGridSpan& span )
+{
+    return Add(size, size, 0, 0, 0, NULL, span);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::AddStretchSpacer(int prop, const wxGridSpan& span )
+{
+    return Add(0, 0, prop, 0, 0, NULL, span);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( wxGridSizerItem *item )
+{
+    return Insert( 0, item);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( wxWindow *window, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span  )
+{
+    return Prepend( new wxGridSizerItem( window, proportion, flag, border, userData, span ) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( wxSizer *sizer, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span  )
+{
+    return Prepend( new wxGridSizerItem( sizer, proportion, flag, border, userData, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( int width, int height, int proportion, int flag, int border, wxObject* userData, const wxGridSpan& span  )
+{
+    return Prepend( new wxGridSizerItem( width, height, proportion, flag, border, userData, span ) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::PrependSpacer(int size, const wxGridSpan& span )
+{
+    return Prepend(size, size, 0, 0, 0, NULL, span);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::PrependStretchSpacer(int prop, const wxGridSpan& span )
+{
+    return Prepend(0, 0, prop, 0, 0, NULL, span);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( wxWindow *window, const wxSizerFlags& flags, const wxGridSpan& span  )
+{
+    return Prepend( new wxGridSizerItem(window, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( wxSizer *sizer, const wxSizerFlags& flags, const wxGridSpan& span )
+{
+    return Prepend( new wxGridSizerItem(sizer, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Prepend( int width, int height, const wxSizerFlags& flags, const wxGridSpan& span )
+{
+    return Prepend( new wxGridSizerItem(width, height, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index,
+                 wxWindow *window,
+                 int proportion,
+                 int flag,
+                 int border,
+                 wxObject* userData,
+                 const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem( window, proportion, flag, border, userData, span ) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index,
+                 wxSizer *sizer,
+                 int proportion,
+                 int flag,
+                 int border,
+                 wxObject* userData,
+                 const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem( sizer, proportion, flag, border, userData, span ) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index,
+                 int width,
+                 int height,
+                 int proportion,
+                 int flag,
+                 int border,
+                 wxObject* userData,
+                 const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem( width, height, proportion, flag, border, userData, span ) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index, wxWindow *window, const wxSizerFlags& flags, const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem(window, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index, wxSizer *sizer, const wxSizerFlags& flags, const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem(sizer, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::Insert( size_t index, int width, int height, const wxSizerFlags& flags, const wxGridSpan& span )
+{
+    return Insert( index, new wxGridSizerItem(width, height, flags, span) );
+}
+
+inline wxGridSizerItem*
+wxGridSizer::InsertSpacer(size_t index, int size, const wxGridSpan& span )
+{
+    return Insert(index, size, size, 0, 0, 0, NULL, span);
+}
+
+inline wxGridSizerItem*
+wxGridSizer::InsertStretchSpacer(size_t index, int prop, const wxGridSpan& span )
+{
+    return Insert(index, 0, 0, prop, 0, 0, NULL, span);
+}
+
+
 #endif // __WXSIZER_H__
Index: samples/layout/layout.cpp
===================================================================
--- samples/layout/layout.cpp	(revision 53603)
+++ samples/layout/layout.cpp	(working copy)
@@ -61,7 +61,8 @@
   EVT_MENU(LAYOUT_QUIT, MyFrame::OnQuit)
 
   EVT_MENU(LAYOUT_TEST_PROPORTIONS, MyFrame::TestProportions)
-  EVT_MENU(LAYOUT_TEST_SIZER, MyFrame::TestFlexSizers)
+  EVT_MENU(LAYOUT_TEST_GRID_SIZER, MyFrame::TestGridSizers)
+  EVT_MENU(LAYOUT_TEST_FLEX_SIZER, MyFrame::TestFlexSizers)
   EVT_MENU(LAYOUT_TEST_NB_SIZER, MyFrame::TestNotebookSizers)
   EVT_MENU(LAYOUT_TEST_GB_SIZER, MyFrame::TestGridBagSizer)
   EVT_MENU(LAYOUT_TEST_SET_MINIMAL, MyFrame::TestSetMinimal)
@@ -79,12 +80,13 @@
   wxMenu *file_menu = new wxMenu;
 
   file_menu->Append(LAYOUT_TEST_PROPORTIONS, _T("&Proportions demo...\tF1"));
-  file_menu->Append(LAYOUT_TEST_SIZER, _T("Test wx&FlexSizer...\tF2"));
-  file_menu->Append(LAYOUT_TEST_NB_SIZER, _T("Test &notebook sizers...\tF3"));
-  file_menu->Append(LAYOUT_TEST_GB_SIZER, _T("Test &gridbag sizer...\tF4"));
-  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, _T("Test Set&ItemMinSize...\tF5"));
-  file_menu->Append(LAYOUT_TEST_NESTED, _T("Test nested sizer in a wxPanel...\tF6"));
-  file_menu->Append(LAYOUT_TEST_WRAP, _T("Test wrap sizers...\tF6"));
+  file_menu->Append(LAYOUT_TEST_GRID_SIZER, _T("Test complex wx&GridSizer...\tF2"));
+  file_menu->Append(LAYOUT_TEST_FLEX_SIZER, _T("Test wx&FlexSizer...\tF3"));
+  file_menu->Append(LAYOUT_TEST_NB_SIZER, _T("Test &notebook sizers...\tF4"));
+  file_menu->Append(LAYOUT_TEST_GB_SIZER, _T("Test &gridbag sizer...\tF5"));
+  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, _T("Test Set&ItemMinSize...\tF6"));
+  file_menu->Append(LAYOUT_TEST_NESTED, _T("Test nested sizer in a wxPanel...\tF7"));
+  file_menu->Append(LAYOUT_TEST_WRAP, _T("Test wrap sizers...\tF8"));
 
   file_menu->AppendSeparator();
   file_menu->Append(LAYOUT_QUIT, _T("E&xit"), _T("Quit program"));
@@ -188,6 +190,12 @@
     (new MyProportionsFrame(this))->Show();
 }
 
+void MyFrame::TestGridSizers(wxCommandEvent& WXUNUSED(event) )
+{
+    MyGridSizerFrame *newFrame = new MyGridSizerFrame(_T("Grid Sizer Test Frame"), 50, 50);
+    newFrame->Show(true);
+}
+
 void MyFrame::TestFlexSizers(wxCommandEvent& WXUNUSED(event) )
 {
     MyFlexSizerFrame *newFrame = new MyFlexSizerFrame(_T("Flex Sizer Test Frame"), 50, 50);
@@ -291,6 +299,51 @@
 }
 
 // ----------------------------------------------------------------------------
+//  MyGridSizerFrame
+// ----------------------------------------------------------------------------
+
+void MyGridSizerFrame::AddCtrl(wxGridSizer* sizer, wxWindow* parent, int row, int col, int rowspan, int colspan)
+{
+    /*
+    sizer->Add(new wxStaticText
+                   (
+   */
+    sizer->Add(new wxButton
+                   (
+                    parent,
+                    wxID_ANY,
+                    wxString::Format(_T("(%d, %d) rs=%d cs=%d"), row, col, rowspan, colspan),
+                    wxDefaultPosition,
+                    wxDefaultSize
+                   ),
+               0, wxEXPAND | wxALL, 3, NULL, wxGridSpan(rowspan, colspan));
+}
+
+MyGridSizerFrame::MyGridSizerFrame(const wxString &title, int x, int y )
+            : wxFrame(NULL, wxID_ANY, title, wxPoint(x, y) )
+{
+    wxGridSizer *sizer = new wxGridSizer(5, 0, 20);
+    wxPanel* p = new wxPanel(this, wxID_ANY);
+
+    // create grids
+    AddCtrl(sizer, p, 0, 0, 2, 2);
+    AddCtrl(sizer, p, 0, 2, 2, 3);
+    AddCtrl(sizer, p, 2, 0, 3, 2);
+    AddCtrl(sizer, p, 2, 2, 1, 1);
+    AddCtrl(sizer, p, 2, 3, 1, 2);
+    AddCtrl(sizer, p, 3, 2, 2, 1);
+    AddCtrl(sizer, p, 3, 3, 1, 1);
+    AddCtrl(sizer, p, 3, 4, 1, 1);
+    AddCtrl(sizer, p, 4, 3, 1, 1);
+    AddCtrl(sizer, p, 4, 4, 1, 1);
+    
+
+    p->SetSizer(sizer);
+    sizer->SetSizeHints(this);
+}
+
+
+// ----------------------------------------------------------------------------
 //  MyFlexSizerFrame
 // ----------------------------------------------------------------------------
 
@@ -685,7 +738,9 @@
 
     // A number of checkboxes inside a wrap sizer 
     wxSizer *ps_mid = new wxStaticBoxSizer( wxVERTICAL, this, "Wrapping check-boxes" );
-    wxSizer *ps_mid_wrap = new wxWrapSizer(wxHORIZONTAL);
+    wxSizer *ps_mid_wrap = new wxStaticBoxSizer(wxHORIZONTAL, this, "Implement me please" );
+    // WrapSizer not implemented for some reason... 
+    //wxSizer *ps_mid_wrap = new wxWrapSizer(wxHORIZONTAL);
     ps_mid->Add( ps_mid_wrap, 100, wxEXPAND );
     for( int ix=0; ix<6; ix++ )
             ps_mid_wrap->Add( new wxCheckBox(this,wxID_ANY,wxString::Format("Option %d",ix+1)), 0, wxALIGN_CENTRE|wxALIGN_CENTER_VERTICAL, 5 );
Index: samples/layout/layout.h
===================================================================
--- samples/layout/layout.h	(revision 53603)
+++ samples/layout/layout.h	(working copy)
@@ -24,6 +24,7 @@
     MyFrame();
 
     void TestProportions(wxCommandEvent& event);
+    void TestGridSizers(wxCommandEvent& event);
     void TestFlexSizers(wxCommandEvent& event);
     void TestNotebookSizers(wxCommandEvent& event);
     void TestGridBagSizer(wxCommandEvent& event);
@@ -54,6 +55,17 @@
     wxSizer *m_sizer;
 };
 
+// a frame using grid sizers for layout
+class MyGridSizerFrame : public wxFrame
+{
+public:
+    MyGridSizerFrame(const wxString &title, int x, int y );
+
+private:
+    void MyGridSizerFrame::AddCtrl(wxGridSizer* sizer, wxWindow* parent, int row, int col, int rowspan, int colspan);
+};
+
+
 // a frame using flex sizers for layout
 class MyFlexSizerFrame : public wxFrame
 {
@@ -138,7 +150,8 @@
 // controls and menu constants
 enum
 {
-    LAYOUT_TEST_SIZER = 101,
+    LAYOUT_TEST_FLEX_SIZER = 101,
+    LAYOUT_TEST_GRID_SIZER,
     LAYOUT_TEST_NB_SIZER,
     LAYOUT_TEST_GB_SIZER,
     LAYOUT_TEST_PROPORTIONS,
Index: src/common/gbsizer.cpp
===================================================================
--- src/common/gbsizer.cpp	(revision 53603)
+++ src/common/gbsizer.cpp	(working copy)
@@ -25,7 +25,6 @@
 IMPLEMENT_DYNAMIC_CLASS(wxGBSizerItem, wxSizerItem)
 IMPLEMENT_CLASS(wxGridBagSizer, wxFlexGridSizer)
 
-const wxGBSpan wxDefaultSpan;
 
 //---------------------------------------------------------------------------
 // wxGBSizerItem
Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 53603)
+++ src/common/sizer.cpp	(working copy)
@@ -2,8 +2,8 @@
 // Name:        src/common/sizer.cpp
 // Purpose:     provide new wxSizer class for layout
 // Author:      Robert Roebling and Robin Dunn, contributions by
-//              Dirk Holtwick, Ron Lee
-// Modified by: Ron Lee
+//              Dirk Holtwick, Ron Lee, Dustin Spicuzza
+// Modified by: Ron Lee, Dustin Spicuzza
 // Created:
 // RCS-ID:      $Id$
 // Copyright:   (c) Robin Dunn, Robert Roebling
@@ -37,6 +37,9 @@
 
 //---------------------------------------------------------------------------
 
+IMPLEMENT_DYNAMIC_CLASS(wxGridSizerItem, wxSizerItem)
+const wxGridSpan wxDefaultSpan;
+
 IMPLEMENT_CLASS(wxSizerItem, wxObject)
 IMPLEMENT_CLASS(wxSizer, wxObject)
 IMPLEMENT_CLASS(wxGridSizer, wxSizer)
@@ -88,6 +91,7 @@
 // wxSizerItem
 // ----------------------------------------------------------------------------
 
+
 // check for flags conflicts
 static const int SIZER_FLAGS_MASK =
     wxADD_FLAG(wxCENTRE,
@@ -1325,8 +1329,25 @@
 int wxGridSizer::CalcRowsCols(int& nrows, int& ncols) const
 {
     int nitems = m_children.GetCount();
-    if ( nitems)
+
+    if ( nitems )
     {
+		// colspan/rowspan affects this, calculate those. Assume they are in the right
+        // place, since a later step will catch those errors. 
+        wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
+        while (node)
+        {
+            wxSizerItem *item = node->GetData();
+            
+            // hack
+            if (!item->IsBase()){
+                wxGridSpan span = ((wxGridSizerItem*)item)->GetSpan();
+                nitems += (span.GetRowspan() * span.GetColspan() - 1);
+            }
+
+            node = node->GetNext();
+        }
+
         if ( m_cols )
         {
             ncols = m_cols;
@@ -1350,7 +1371,7 @@
 
 void wxGridSizer::RecalcSizes()
 {
-    int nitems, nrows, ncols;
+    int nitems, nrows, ncols, ntot;
     if ( (nitems = CalcRowsCols(nrows, ncols)) == 0 )
         return;
 
@@ -1360,34 +1381,78 @@
     int w = (sz.x - (ncols - 1) * m_hgap) / ncols;
     int h = (sz.y - (nrows - 1) * m_vgap) / nrows;
 
-    int x = pt.x;
-    for (int c = 0; c < ncols; c++)
+    // need to keep track of any spanning cells so we don't overwrite
+    ntot = nrows*ncols;
+    bool * filled_cells = new bool[ntot];
+
+    // initialize this
+    for (int ai = 0; ai < ntot; ai++)
+        filled_cells[ai] = false;
+
+    wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
+    wxSizerItem* item;
+
+    int y = pt.y;
+    for (int r = 0; r < nrows; r++)
     {
-        int y = pt.y;
-        for (int r = 0; r < nrows; r++)
+        int offset = r*ncols;
+        int x = pt.x;
+
+        for (int c = 0; c < ncols; c++)
         {
-            int i = r * ncols + c;
-            if (i < nitems)
+            // see if something is already here
+            if (!filled_cells[offset + c])
             {
-                wxSizerItemList::compatibility_iterator node = m_children.Item( i );
-
                 wxASSERT_MSG( node, _T("Failed to find SizerItemList node") );
+        
+                item = node->GetData();
 
-                SetItemBounds( node->GetData(), x, y, w, h);
+                if (item->IsBase())
+                    SetItemBounds( node->GetData(), x, y, w, h);
+                else {
+
+                    // determine if it spans
+                    wxGridSpan span = ((wxGridSizerItem*)item)->GetSpan();
+                    int cs = span.GetColspan();
+                    int rs = span.GetRowspan();
+                    
+                    if (cs <= 1 && rs <= 1)
+                        SetItemBounds( node->GetData(), x, y, w, h);
+                    else {
+
+                        SetItemBounds( node->GetData(), x, y, w*cs + (cs-1)*m_hgap, h*rs + (rs-1)*m_vgap );
+
+                        // since it spans, fill out its places in the array
+                        cs = c + cs > ncols ? ncols : c + cs;
+                        rs = r + rs > nrows ? nrows : r + rs;
+
+                        for (int t_r = r; t_r < rs; t_r++)
+                        {
+                            int t_offset = t_r*ncols;
+                            for (int t_c = c; t_c < cs; t_c++)
+                            {
+                                filled_cells[t_offset + t_c] = true;
+                            }
+                        }
+                    }
+                }
+
+                node = node->GetNext();
+
+                if (!node)
+                    break;
             }
-            y = y + h + m_vgap;
+            x = x + w + m_hgap;   
         }
-        x = x + w + m_hgap;
+        y = y + h + m_vgap;
     }
+
+    delete [] filled_cells;
 }
 
-wxSize wxGridSizer::CalcMin()
-{
-    int nrows, ncols;
-    if ( CalcRowsCols(nrows, ncols) == 0 )
-        return wxSize();
-
-    // Find the max width and height for any component
+// Find the max width and height for any component (divided by its colspan or rowspan)
+wxSize wxGridSizer::CalcMaxWH() const {
+   
     int w = 0;
     int h = 0;
 
@@ -1395,45 +1460,91 @@
     while (node)
     {
         wxSizerItem     *item = node->GetData();
-        wxSize           sz( item->CalcMin() );
+        wxSize          sz( item->CalcMin() );
 
+        // if there is a possibility of a span, then need to adjust for
+        // gaps/spans to ensure uniform feel
+        if (!item->IsBase())
+        {
+            wxGridSpan span = ((wxGridSizerItem*)item)->GetSpan();
+            int cs = span.GetColspan();
+            int rs = span.GetRowspan();
+
+            if (cs > 1)
+            {
+                // adjust for the gaps
+                sz.x = sz.x - (cs-1)*m_hgap;
+                if (sz.x < 0)
+                    sz.x = 0;
+
+                // then divide by the span so it doesn't effect overall width
+                if (sz.x % cs)
+                    sz.x = (sz.x + cs)/cs;
+                else
+                    sz.x = sz.x / cs;
+            }
+
+            if (rs > 1)
+            {
+                // adjust for the gaps
+                sz.y = sz.y - (rs-1)*m_vgap;
+                if (sz.y < 0)
+                    sz.y = 0;
+
+                // then divide by the span so it doesn't effect overall width
+                if (sz.y % rs)
+                    sz.y = (sz.y + rs)/rs;
+                else
+                    sz.y = sz.y / rs;
+            }
+        }
+
         w = wxMax( w, sz.x );
         h = wxMax( h, sz.y );
 
         node = node->GetNext();
     }
 
+    return wxSize(w,h);
+}
+
+wxSize wxGridSizer::CalcMin()
+{
+    int nrows, ncols;
+    if ( CalcRowsCols(nrows, ncols) == 0 )
+        return wxSize();
+
+    // get max sizes
+    wxSize cell_max = CalcMaxWH();
+
     // In case we have a nested sizer with a two step algo , give it
     // a chance to adjust to that (we give it width component)
-    node = m_children.GetFirst();
+    wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     bool didChangeMinSize = false;
     while (node)
     {
         wxSizerItem     *item = node->GetData();
-        didChangeMinSize |= item->InformFirstDirection( wxHORIZONTAL, w, -1 );
+        int             max_x = cell_max.x;
 
+        if (!item->IsBase())
+        {
+            int cs = ((wxGridSizerItem*)item)->GetSpan().GetColspan();
+
+            // ok, need to tell it to readjust
+            if (cs > 1)  
+                max_x = max_x*cs + (cs-1)*m_hgap;
+        }
+
+        didChangeMinSize |= item->InformFirstDirection( wxHORIZONTAL, max_x, -1 );
         node = node->GetNext();
     }
 
-    // And redo iteration in case min size changed
+    // And get the max sizes once again if its changed
     if( didChangeMinSize )
-    {
-        node = m_children.GetFirst();
-        w = h = 0;
-        while (node)
-        {
-            wxSizerItem     *item = node->GetData();
-            wxSize           sz( item->GetMinSizeWithBorder() );
+       cell_max = CalcMaxWH();
 
-            w = wxMax( w, sz.x );
-            h = wxMax( h, sz.y );
-
-            node = node->GetNext();
-        }
-    }
-
-    return wxSize( ncols * w + (ncols-1) * m_hgap,
-                   nrows * h + (nrows-1) * m_vgap );
+    return wxSize( ncols * cell_max.x + (ncols-1) * m_hgap,
+                   nrows * cell_max.y + (nrows-1) * m_vgap );
 }
 
 void wxGridSizer::SetItemBounds( wxSizerItem *item, int x, int y, int w, int h )

 	  	 

Index: interface/wx/docmdi.h
===================================================================
--- interface/wx/docmdi.h	(revision 67303)
+++ interface/wx/docmdi.h	(working copy)
@@ -97,7 +97,32 @@
 {
 public:
     /**
-        Constructor.
+        Constructor, creating the window.
+
+        @param doc
+            Document instance to manage, or @NULL.
+        @param view
+            View instance to manage. If there are more than one view associated with the document
+            and all the views are to be managed by wxDocMDIChildFrame, specify @NULL.
+        @param parent
+            The window parent. This should not be @NULL.
+        @param id
+            The window identifier. It may take a value of -1 to indicate a default
+            value.
+        @param title
+            The caption to be displayed on the frame's title bar.
+        @param pos
+            The window position. The value ::wxDefaultPosition indicates a default position,
+            chosen by either the windowing system or wxWidgets, depending on platform.
+        @param size
+            The window size. The value ::wxDefaultSize indicates a default size, chosen by
+            either the windowing system or wxWidgets, depending on platform.
+        @param style
+            The window style.
+        @param name
+            The name of the window. This parameter is used to associate a name with the
+            item, allowing the application user to set Motif resource values for individual
+            windows.
     */
     wxDocMDIChildFrame(wxDocument* doc, wxView* view,
                        wxMDIParentFrame* parent, wxWindowID id,
Index: src/common/docview.cpp
===================================================================
--- src/common/docview.cpp	(revision 67303)
+++ src/common/docview.cpp	(working copy)
@@ -1964,7 +1964,45 @@
         m_childView->SetDocChildFrame(NULL);
         wxDELETE(m_childView);
     }
+    else if ( m_childDocument )
+    {
+        wxList& viewlist = m_childDocument->GetViews();
+        bool ok = true;
+        
+        for (wxList::iterator it = viewlist.begin(); 
+             ok && (it != viewlist.end());
+             it++)
+        {
+           wxView* view = (wxView*)*it;
+           
+           ok = view->Close(false); // false means don't delete associated window
+        }
+        if (ok)
+        {
+            // as we delete elements we iterate over, don't use the usual "from
+            // begin to end" loop
+            for ( ;; )
+            {
+                wxView *view = (wxView *)*viewlist.begin();
 
+                bool isLastOne = viewlist.size() == 1;
+
+                // this always deletes the node implicitly and if this is the last
+                // view also deletes the doc object
+                view->Activate(false);
+                delete view;
+
+                if ( isLastOne )
+                    break;
+            }
+        }
+        else if (event.CanVeto())
+        {
+            event.Veto();
+            return false;
+        }
+    }
+
     m_childDocument = NULL;
 
     return true;

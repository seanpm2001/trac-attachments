Index: include/wx/docview.h
===================================================================
--- include/wx/docview.h	(revision 67401)
+++ include/wx/docview.h	(working copy)
@@ -597,10 +597,7 @@
     // we're not a wxEvtHandler but we provide this wxEvtHandler-like function
     // which is called from TryBefore() of the derived classes to give our view
     // a chance to process the message before the frame event handlers are used
-    bool TryProcessEvent(wxEvent& event)
-    {
-        return m_childView && m_childView->ProcessEventLocally(event);
-    }
+    bool TryProcessEvent(wxEvent& event);
 
     // called from EVT_CLOSE handler in the frame: check if we can close and do
     // cleanup if so; veto the event otherwise
Index: interface/wx/docmdi.h
===================================================================
--- interface/wx/docmdi.h	(revision 67401)
+++ interface/wx/docmdi.h	(working copy)
@@ -97,7 +97,32 @@
 {
 public:
     /**
-        Constructor.
+        Constructor, creating the window.
+
+        @param doc
+            Document instance to manage, or @NULL.
+        @param view
+            View instance to manage. If there are more than one view associated with the document
+            and all the views are to be managed by wxDocMDIChildFrame, specify @NULL.
+        @param parent
+            The window parent. This should not be @NULL.
+        @param id
+            The window identifier. It may take a value of -1 to indicate a default
+            value.
+        @param title
+            The caption to be displayed on the frame's title bar.
+        @param pos
+            The window position. The value ::wxDefaultPosition indicates a default position,
+            chosen by either the windowing system or wxWidgets, depending on platform.
+        @param size
+            The window size. The value ::wxDefaultSize indicates a default size, chosen by
+            either the windowing system or wxWidgets, depending on platform.
+        @param style
+            The window style.
+        @param name
+            The name of the window. This parameter is used to associate a name with the
+            item, allowing the application user to set Motif resource values for individual
+            windows.
     */
     wxDocMDIChildFrame(wxDocument* doc, wxView* view,
                        wxMDIParentFrame* parent, wxWindowID id,
Index: src/common/docview.cpp
===================================================================
--- src/common/docview.cpp	(revision 67401)
+++ src/common/docview.cpp	(working copy)
@@ -1942,6 +1942,33 @@
 // wxDocChildFrameAnyBase
 // ----------------------------------------------------------------------------
 
+// we're not a wxEvtHandler but we provide this wxEvtHandler-like function
+// which is called from TryBefore() of the derived classes to give our view
+// a chance to process the message before the frame event handlers are used
+bool wxDocChildFrameAnyBase::TryProcessEvent(wxEvent& event)
+{
+    if ( m_childView )
+    {
+        return m_childView->ProcessEventLocally(event);
+    }
+    else if ( m_childDocument )
+    {
+        wxList& views = m_childDocument->GetViews();
+        
+        const wxList::iterator end = views.end();
+        for (wxList::iterator i = views.begin(); i != end; ++i)
+        {
+           wxView* view = (wxView*)*i;
+           
+           if (view->ProcessEventLocally(event))
+           {
+               return true;
+           }
+        }
+    }
+    return false;
+}
+
 bool wxDocChildFrameAnyBase::CloseView(wxCloseEvent& event)
 {
     if ( m_childView )
@@ -1964,7 +1991,44 @@
         m_childView->SetDocChildFrame(NULL);
         wxDELETE(m_childView);
     }
+    else if ( m_childDocument )
+    {
+        // just as wxDocument::DeleteAllViews(), except for the vetoing
+        wxList& views = m_childDocument->GetViews();
 
+        const wxList::iterator end = views.end();
+        for (wxList::iterator i = views.begin(); i != end; ++i)
+        {
+           wxView *view = (wxView *)*i;
+           
+           if (!view->Close(false)) // false means don't delete associated window
+           {
+               if (event.CanVeto())
+               {
+                  event.Veto();
+                  return false;
+               }
+           }
+        }
+        // as we delete elements we iterate over, don't use the usual "from
+        // begin to end" loop
+        for ( ;; )
+        {
+            wxView *view = (wxView *)*views.begin();
+
+            bool isLastOne = views.size() == 1;
+
+            // this always deletes the node implicitly and if this is the last
+            // view also deletes the doc object
+            view->Activate(false);
+            view->SetDocChildFrame(NULL);
+            delete view;
+
+            if ( isLastOne )
+                break;
+        }
+    }
+
     m_childDocument = NULL;
 
     return true;

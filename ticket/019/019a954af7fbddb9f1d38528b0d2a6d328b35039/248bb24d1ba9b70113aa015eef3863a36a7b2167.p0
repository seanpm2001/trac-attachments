--- include/wx/defs-svn.h	2008-02-24 14:37:54.000000000 +0100
+++ include/wx/defs.h	2008-02-26 19:25:11.000000000 +0100
@@ -459,6 +464,21 @@
     #endif
 #endif // __VISUALC__
 
+
+#ifndef HAVE_TEMPLATE_OVERLOAD_RESOLUTION
+    #ifdef HAVE_PARTIAL_SPECIALIZATION
+        // If the compiler can use type or const expresssions as template arguments
+        #define HAVE_TEMPLATE_OVERLOAD_RESOLUTION
+    #endif
+#endif
+
+#ifdef __BORLANDC__
+    // Currently no Borland C++ compiler can use type or const expressions 
+    // as template arguments in specialized templates.
+    #undef HAVE_TEMPLATE_OVERLOAD_RESOLUTION
+#endif // __BORLANDC__
+
+
 /*  ---------------------------------------------------------------------------- */
 /*  portable calling conventions macros */
 /*  ---------------------------------------------------------------------------- */
--- include/wx/weakref-svn.h	2008-02-26 19:20:58.000000000 +0100
+++ include/wx/weakref.h	2008-02-26 19:29:04.000000000 +0100
@@ -3,7 +3,7 @@
 // Purpose:     wxWeakRef - Generic weak references for wxWidgets
 // Author:      Arne Steinarson
 // Created:     27 Dec 07
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: weakref.h 51663 2008-02-11 20:51:24Z VZ $
 // Copyright:   (c) 2007 Arne Steinarson
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -16,12 +16,14 @@
 #include "wx/meta/convertible.h"
 #include "wx/meta/int2type.h"
 
+
 template <class T>
 struct wxIsStaticTrackable
 {
     enum { value = wxConvertibleTo<T, wxTrackable>::value };
 };
 
+
 // Weak ref implementation when T has wxTrackable as a known base class
 template <class T>
 class wxWeakRefStatic : public wxTrackerNode
@@ -74,8 +76,13 @@
     T *m_pobj;
 };
 
-#ifdef HAVE_PARTIAL_SPECIALIZATION
 
+#if !defined(HAVE_PARTIAL_SPECIALIZATION) || !defined(HAVE_TEMPLATE_OVERLOAD_RESOLUTION)
+    #define USE_STATIC_WEAKREF 
+#endif 
+
+
+#ifndef USE_STATIC_WEAKREF
 template<class T,bool use_static>
 struct wxWeakRefImpl;
 
@@ -169,17 +176,18 @@
     wxTrackable *m_ptbase;
 };
 
-#endif // HAVE_PARTIAL_SPECIALIZATION
+#endif // #ifndef USE_STATIC_WEAKREF
+
 
 
 // A weak reference to an object of type T, where T has type wxTrackable
 // (usually statically but if not dynamic_cast<> is tried).
 template <class T>
 class wxWeakRef : public
-#ifdef HAVE_PARTIAL_SPECIALIZATION
-                  wxWeakRefImpl<T, wxIsStaticTrackable<T>::value>
-#else
+#ifdef USE_STATIC_WEAKREF
                   wxWeakRefStatic<T>
+#else
+                  wxWeakRefImpl<T, wxIsStaticTrackable<T>::value>
 #endif
 {
 public:
@@ -303,10 +311,12 @@
     T *m_pobj;
 };
 
+
 // Provide some basic types of weak references
 class WXDLLIMPEXP_FWD_BASE wxEvtHandler;
 class WXDLLIMPEXP_FWD_CORE wxWindow;
 
+
 typedef wxWeakRef<wxEvtHandler>  wxEvtHandlerRef;
 typedef wxWeakRef<wxWindow>      wxWindowRef;
 

 	  	 

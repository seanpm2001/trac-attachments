Index: trunk/src/common/sizer.cpp
===================================================================
--- trunk/src/common/sizer.cpp	(revision 62670)
+++ trunk/src/common/sizer.cpp	(working copy)
@@ -1924,8 +1924,10 @@
 
 void wxFlexGridSizer::AddGrowableRow( size_t idx, int proportion )
 {
-    wxASSERT_MSG( !IsRowGrowable( idx ),
-                  "AddGrowableRow() called for growable row" );
+    //As we now check if the row is growable and correct,
+    //this assert is no longer necessary.
+    //wxASSERT_MSG( !IsRowGrowable( idx ),
+    //              "AddGrowableRow() called for growable row" );
 
     // notice that we intentionally don't check the index validity here in (the
     // common) case when the number of rows was not specified in the ctor -- in
@@ -1933,19 +1935,31 @@
     // the sizer, and the check will be done in AdjustForGrowables()
     wxCHECK_RET( !m_rows || idx < (size_t)m_rows, "invalid row index" );
 
+    if( IsRowGrowable( idx ) )
+    {
+        RemoveGrowableRow( idx );
+    }
+
     m_growableRows.Add( idx );
     m_growableRowsProportions.Add( proportion );
 }
 
 void wxFlexGridSizer::AddGrowableCol( size_t idx, int proportion )
 {
-    wxASSERT_MSG( !IsColGrowable( idx ),
-                  "AddGrowableCol() called for growable column" );
+    //As we now check if the column is growable and correct,
+    //this assert is no longer necessary.
+    //wxASSERT_MSG( !IsColGrowable( idx ),
+    //              "AddGrowableCol() called for growable column" );
 
     // see comment in AddGrowableRow(): although it's less common to omit the
     // specification of the number of columns, it still can also happen
     wxCHECK_RET( !m_cols || idx < (size_t)m_cols, "invalid column index" );
 
+    if( IsColGrowable( idx ) )
+    {
+        RemoveGrowableCol( idx );
+    }
+
     m_growableCols.Add( idx );
     m_growableColsProportions.Add( proportion );
 }
Index: trunk/interface/wx/sizer.h
===================================================================
--- trunk/interface/wx/sizer.h	(revision 62670)
+++ trunk/interface/wx/sizer.h	(working copy)
@@ -1460,11 +1460,6 @@
         The @a proportion parameter has the same meaning as the stretch factor
         for the sizers (see wxBoxSizer) except that if all proportions are 0,
         then all columns are resized equally (instead of not being resized at all).
-
-        Notice that the column must not be already growable, if you need to change
-        the proportion you must call RemoveGrowableCol() first and then make it
-        growable (with a different proportion) again. You can use IsColGrowable()
-        to check whether a column is already growable.
     */
     void AddGrowableCol(size_t idx, int proportion = 0);
 

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 54389)
+++ build/bakefiles/files.bkl	(working copy)
@@ -1026,6 +1026,7 @@
     src/gtk/minifram.cpp
     src/gtk/pen.cpp
     src/gtk/popupwin.cpp
+    src/gtk/private.cpp
     src/gtk/region.cpp
     src/gtk/renderer.cpp
     src/gtk/settings.cpp
Index: include/wx/gtk/private.h
===================================================================
--- include/wx/gtk/private.h	(revision 54389)
+++ include/wx/gtk/private.h	(working copy)
@@ -104,5 +104,22 @@
 
 } // extern "C"
 
+
+// ----------------------------------------------------------------------------
+// wxGTKPrivate functions definition
+// ----------------------------------------------------------------------------
+
+namespace wxGTKPrivate
+{
+
+    GtkWidget *GetButtonWidget();
+    GtkWidget *GetCheckButtonWidget();
+    GtkWidget *GetEntryWidget();
+    GtkWidget *GetHeaderButtonWidget();
+    GtkWidget *GetSplitterWidget();
+    GtkWidget *GetTreeWidget();
+
+} // wxGTKPrivate
+
 #endif // _WX_GTK_PRIVATE_H_
 
Index: include/wx/renderer.h
===================================================================
--- include/wx/renderer.h	(revision 54389)
+++ include/wx/renderer.h	(working copy)
@@ -28,7 +28,7 @@
 class WXDLLIMPEXP_FWD_CORE wxDC;
 class WXDLLIMPEXP_FWD_CORE wxWindow;
 
-#include "wx/gdicmn.h" // for wxPoint
+#include "wx/gdicmn.h" // for wxPoint, wxSize
 #include "wx/colour.h"
 #include "wx/font.h"
 #include "wx/bitmap.h"
@@ -227,6 +227,9 @@
                               const wxRect& rect,
                               int flags = 0) = 0;
 
+    // Returns the default size of a check box.
+    virtual wxSize GetCheckBoxSize(wxWindow *win) = 0;
+
     // draw blank button
     //
     // flags may use wxCONTROL_PRESSED, wxCONTROL_CURRENT and wxCONTROL_ISDEFAULT
@@ -373,6 +376,9 @@
                               int flags = 0 )
         { m_rendererNative.DrawCheckBox( win, dc, rect, flags ); }
 
+    virtual wxSize GetCheckBoxSize(wxWindow *win)
+        { return m_rendererNative.GetCheckBoxSize(win); }
+
     virtual void DrawPushButton(wxWindow *win,
                                 wxDC& dc,
                                 const wxRect& rect,
Index: interface/wx/renderer.h
===================================================================
--- interface/wx/renderer.h	(revision 54389)
+++ interface/wx/renderer.h	(working copy)
@@ -211,6 +211,8 @@
     virtual void DrawCheckBox(wxWindow *win, wxDC& dc,
                               const wxRect& rect, int flags = 0 );
 
+    virtual wxSize GetCheckBoxSize(wxWindow *win);
+
     virtual void DrawPushButton(wxWindow *win, wxDC& dc,
                                 const wxRect& rect, int flags = 0 );
 
@@ -286,7 +288,7 @@
     ~wxRendererNative();
 
     /**
-        Draw a check box (used by wxDataViewCtrl).
+        Draw a check box.
 
         @a flags may have the @c wxCONTROL_CHECKED, @c wxCONTROL_CURRENT or
         @c wxCONTROL_UNDETERMINED bit set, see @ref wxCONTROL_FLAGS.
@@ -428,6 +430,11 @@
     static wxRendererNative GetGeneric();
 
     /**
+        Returns the size of a check box.
+    */
+    virtual wxSize GetCheckBoxSize(wxWindow *win);
+
+    /**
         Returns the height of a header button, either a fixed platform height if
         available, or a
         generic height based on the window's font.
Index: src/generic/renderg.cpp
===================================================================
--- src/generic/renderg.cpp	(revision 54389)
+++ src/generic/renderg.cpp	(working copy)
@@ -98,6 +98,8 @@
                               const wxRect& rect,
                               int flags = 0);
 
+    virtual wxSize GetCheckBoxSize(wxWindow *win);
+
     virtual void DrawPushButton(wxWindow *win,
                                 wxDC& dc,
                                 const wxRect& rect,
@@ -618,6 +620,11 @@
     }
 }
 
+wxSize wxRendererGeneric::GetCheckBoxSize(wxWindow *WXUNUSED(win))
+{
+    return wxSize(16, 16);
+}
+
 void
 wxRendererGeneric::DrawPushButton(wxWindow *win,
                                   wxDC& dc,
Index: src/gtk/private.cpp
===================================================================
--- src/gtk/private.cpp	(revision 0)
+++ src/gtk/private.cpp	(revision 0)
@@ -0,0 +1,168 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/gtk/private.cpp
+// Purpose:     implementation of wxGTK private functions
+// Author:      Marcin Malich
+// Modified by:
+// Created:     28.06.2008
+// RCS-ID:      $Id$
+// Copyright:   (c) 2008 Marcin Malich <me@malcom.pl>
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/module.h"
+#endif
+
+#include "wx/gtk/private.h"
+
+
+// ----------------------------------------------------------------------------
+// wxGTKPrivate functions implementation
+// ----------------------------------------------------------------------------
+
+namespace wxGTKPrivate
+{
+
+    static GtkWidget* gs_container;
+
+    static GtkContainer* GetContainer()
+    {
+        if ( gs_container == NULL )
+        {
+            GtkWidget* window = gtk_window_new(GTK_WINDOW_POPUP);
+            gs_container = gtk_fixed_new();
+            gtk_container_add(GTK_CONTAINER(window), gs_container);
+        }
+        return GTK_CONTAINER(gs_container);
+    }
+
+    GtkWidget *GetButtonWidget()
+    {
+        static GtkWidget *s_button = NULL;
+
+        if ( !s_button )
+        {
+            s_button = gtk_button_new();
+            gtk_container_add(GetContainer(), s_button);
+            gtk_widget_realize(s_button);
+        }
+
+        return s_button;
+    }
+
+    GtkWidget *GetCheckButtonWidget()
+    {
+        static GtkWidget *s_button = NULL;
+
+        if ( !s_button )
+        {
+            s_button = gtk_check_button_new();
+            gtk_container_add(GetContainer(), s_button);
+            gtk_widget_realize(s_button);
+        }
+
+        return s_button;
+    }
+
+    GtkWidget *GetEntryWidget()
+    {
+        static GtkWidget *s_entry = NULL;
+
+        if ( !s_entry )
+        {
+            s_entry = gtk_entry_new();
+            gtk_container_add(GetContainer(), s_entry);
+            gtk_widget_realize(s_entry);
+        }
+
+        return s_entry;
+    }
+
+    // This one just gets the button used by the column header. Although it's
+    // still a gtk_button the themes will typically differentiate and draw them
+    // differently if the button is in a treeview.
+    GtkWidget *GetHeaderButtonWidget()
+    {
+        static GtkWidget *s_button = NULL;
+
+        if ( !s_button )
+        {
+            // Get the dummy tree widget, give it a column, and then use the
+            // widget in the column header for the rendering code.
+            GtkWidget* treewidget = GetTreeWidget();
+            GtkTreeViewColumn *column = gtk_tree_view_column_new();
+            gtk_tree_view_append_column(GTK_TREE_VIEW(treewidget), column);
+            s_button = column->button;
+        }
+
+        return s_button;
+    }
+
+    GtkWidget* GetSplitterWidget()
+    {
+        static GtkWidget* widget;
+
+        if (widget == NULL)
+        {
+            widget = gtk_vpaned_new();
+            gtk_container_add(GetContainer(), widget);
+            gtk_widget_realize(widget);
+        }
+
+        return widget;
+    }
+
+    GtkWidget *GetTreeWidget()
+    {
+        static GtkWidget *s_tree = NULL;
+
+        if ( !s_tree )
+        {
+            s_tree = gtk_tree_view_new();
+            gtk_container_add(GetContainer(), s_tree);
+            gtk_widget_realize(s_tree);
+        }
+
+        return s_tree;
+    }
+
+
+    // Module for destroying created widgets
+    class Module : public wxModule
+    {
+    public:
+        virtual bool OnInit()
+        {
+            return true;
+        }
+        virtual void OnExit()
+        {
+            if ( gs_container )
+            {
+                GtkWidget* parent = gtk_widget_get_parent(gs_container);
+                gtk_widget_destroy(parent);
+            }
+        }
+        DECLARE_DYNAMIC_CLASS(Module)
+    };
+
+    IMPLEMENT_DYNAMIC_CLASS(Module, wxModule)
+
+    static Module gs_module;
+
+} // wxGTKPrivate

Property changes on: src\gtk\private.cpp
___________________________________________________________________
Name: svn:keywords
   + Author Date Id Revision
Name: svn:eol-style
   + native

Index: src/gtk/renderer.cpp
===================================================================
--- src/gtk/renderer.cpp	(revision 54389)
+++ src/gtk/renderer.cpp	(working copy)
@@ -34,6 +34,7 @@
 #endif
 
 #include "wx/gtk/dc.h"
+#include "wx/gtk/private.h"
 
 #include <gtk/gtk.h>
 
@@ -96,58 +97,15 @@
 
     virtual void DrawFocusRect(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0);
 
-    virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
+    virtual wxSize GetCheckBoxSize(wxWindow *win);
 
-    class Module;
-    friend class Module;
-
-private:
-    // used by DrawPushButton and DrawDropArrow
-    static GtkWidget *GetButtonWidget();
-
-    // used by DrawTreeItemButton()
-    static GtkWidget *GetTreeWidget();
-
-    // used by DrawCheckBox()
-    static GtkWidget *GetCheckButtonWidget();
-
-    // Used by DrawHeaderButton
-    static GtkWidget *GetHeaderButtonWidget();
-
-    static GtkWidget* GetSplitterWidget();
-
-    // container for created widgets
-    static GtkContainer* GetContainer();
-    static GtkWidget* ms_container;
+    virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
 };
 
-// Module for destroying created widgets
-class wxRendererGTK::Module: public wxModule
-{
-public:
-    virtual bool OnInit()
-    {
-        return true;
-    }
-    virtual void OnExit()
-    {
-        if (wxRendererGTK::ms_container)
-        {
-            GtkWidget* parent =
-                gtk_widget_get_parent(wxRendererGTK::ms_container);
-            gtk_widget_destroy(parent);
-        }
-    }
-    DECLARE_DYNAMIC_CLASS(wxRendererGTK::Module)
-};
-IMPLEMENT_DYNAMIC_CLASS(wxRendererGTK::Module, wxModule)
-
 // ============================================================================
 // implementation
 // ============================================================================
 
-GtkWidget* wxRendererGTK::ms_container;
-
 /* static */
 wxRendererNative& wxRendererNative::GetDefault()
 {
@@ -157,117 +115,6 @@
 }
 
 // ----------------------------------------------------------------------------
-// helper functions
-// ----------------------------------------------------------------------------
-
-GtkContainer* wxRendererGTK::GetContainer()
-{
-    if (ms_container == NULL)
-    {
-        GtkWidget* window = gtk_window_new(GTK_WINDOW_POPUP);
-        ms_container = gtk_fixed_new();
-        gtk_container_add(GTK_CONTAINER(window), ms_container);
-    }
-    return GTK_CONTAINER(ms_container);
-}
-
-GtkWidget *
-wxRendererGTK::GetButtonWidget()
-{
-    static GtkWidget *s_button = NULL;
-
-    if ( !s_button )
-    {
-        s_button = gtk_button_new();
-        gtk_container_add(GetContainer(), s_button);
-        gtk_widget_realize( s_button );
-    }
-
-    return s_button;
-}
-
-GtkWidget *
-wxRendererGTK::GetCheckButtonWidget()
-{
-    static GtkWidget *s_button = NULL;
-
-    if ( !s_button )
-    {
-        s_button = gtk_check_button_new();
-        gtk_container_add(GetContainer(), s_button);
-        gtk_widget_realize( s_button );
-    }
-
-    return s_button;
-}
-
-GtkWidget *
-wxRendererGTK::GetTreeWidget()
-{
-    static GtkWidget *s_tree = NULL;
-
-    if ( !s_tree )
-    {
-        s_tree = gtk_tree_view_new();
-        gtk_container_add(GetContainer(), s_tree);
-        gtk_widget_realize( s_tree );
-    }
-
-    return s_tree;
-}
-
-// used elsewhere
-GtkWidget *GetEntryWidget()
-{
-    static GtkWidget *s_entry = NULL;
-    static GtkWidget *s_window = NULL;
-
-    if ( !s_entry )
-    {
-        s_window = gtk_window_new( GTK_WINDOW_POPUP );
-        gtk_widget_realize( s_window );
-        s_entry = gtk_entry_new();
-        gtk_container_add( GTK_CONTAINER(s_window), s_entry );
-        gtk_widget_realize( s_entry );
-    }
-
-    return s_entry;
-}
-
-// This one just gets the button used by the column header.  Although it's
-// still a gtk_button the themes will typically differentiate and draw them
-// differently if the button is in a treeview.
-GtkWidget *
-wxRendererGTK::GetHeaderButtonWidget()
-{
-    static GtkWidget *s_button = NULL;
-
-    if ( !s_button )
-    {
-        // Get the dummy tree widget, give it a column, and then use the
-        // widget in the column header for the rendering code.
-        GtkWidget* treewidget = GetTreeWidget();
-        GtkTreeViewColumn*  column = gtk_tree_view_column_new();
-        gtk_tree_view_append_column(GTK_TREE_VIEW(treewidget), column);
-        s_button = column->button;
-    }
-
-    return s_button;
-}
-
-GtkWidget* wxRendererGTK::GetSplitterWidget()
-{
-    static GtkWidget* widget;
-    if (widget == NULL)
-    {
-        widget = gtk_vpaned_new();
-        gtk_container_add(GetContainer(), widget);
-        gtk_widget_realize(widget);
-    }
-    return widget;
-}
-
-// ----------------------------------------------------------------------------
 // list/tree controls drawing
 // ----------------------------------------------------------------------------
 
@@ -280,7 +127,7 @@
                                 wxHeaderButtonParams* params)
 {
 
-    GtkWidget *button = GetHeaderButtonWidget();
+    GtkWidget *button = wxGTKPrivate::GetHeaderButtonWidget();
 
     GdkWindow* gdk_window = NULL;
 #if wxUSE_NEW_DC
@@ -327,7 +174,7 @@
 wxRendererGTK::DrawTreeItemButton(wxWindow* win,
                                   wxDC& dc, const wxRect& rect, int flags)
 {
-    GtkWidget *tree = GetTreeWidget();
+    GtkWidget *tree = wxGTKPrivate::GetTreeWidget();
 
     GdkWindow* gdk_window = NULL;
 #if wxUSE_NEW_DC
@@ -387,7 +234,7 @@
     // we don't draw any border, hence 0 for the second field
     return wxSplitterRenderParams
            (
-               GetGtkSplitterFullSize(GetSplitterWidget()),
+               GetGtkSplitterFullSize(wxGTKPrivate::GetSplitterWidget()),
                0,
                true     // hot sensitive
            );
@@ -428,7 +275,7 @@
     wxASSERT_MSG( gdk_window,
                   wxT("cannot use wxRendererNative on wxDC of this type") );
 
-    wxCoord full_size = GetGtkSplitterFullSize(GetSplitterWidget());
+    wxCoord full_size = GetGtkSplitterFullSize(wxGTKPrivate::GetSplitterWidget());
 
     // are we drawing vertical or horizontal splitter?
     const bool isVert = orient == wxVERTICAL;
@@ -477,7 +324,7 @@
                              const wxRect& rect,
                              int flags)
 {
-    GtkWidget *button = GetButtonWidget();
+    GtkWidget *button = wxGTKPrivate::GetButtonWidget();
 
     // If we give GTK_PIZZA(win->m_wxwindow)->bin_window as
     // a window for gtk_paint_xxx function, then it won't
@@ -546,13 +393,26 @@
     DrawDropArrow(win,dc,rect);
 }
 
+wxSize
+wxRendererGTK::GetCheckBoxSize(wxWindow *WXUNUSED(win))
+{
+    gint indicator_size, indicator_spacing;
+    gtk_widget_style_get(wxGTKPrivate::GetCheckButtonWidget(),
+                         "indicator_size", &indicator_size,
+                         "indicator_spacing", &indicator_spacing,
+                         NULL);
+
+    int size = indicator_size + indicator_spacing * 2;
+    return wxSize(size, size);
+}
+
 void
 wxRendererGTK::DrawCheckBox(wxWindow *WXUNUSED(win),
                             wxDC& dc,
                             const wxRect& rect,
                             int flags )
 {
-    GtkWidget *button = GetCheckButtonWidget();
+    GtkWidget *button = wxGTKPrivate::GetCheckButtonWidget();
 
     GdkWindow* gdk_window = NULL;
 #if wxUSE_NEW_DC
@@ -566,6 +426,12 @@
     wxASSERT_MSG( gdk_window,
                   wxT("cannot use wxRendererNative on wxDC of this type") );
 
+    gint indicator_size, indicator_spacing;
+    gtk_widget_style_get(button,
+                         "indicator_size", &indicator_size,
+                         "indicator_spacing", &indicator_spacing,
+                         NULL);
+
     GtkStateType state;
 
     if ( flags & wxCONTROL_PRESSED )
@@ -586,9 +452,9 @@
         NULL,
         button,
         "cellcheck",
-        dc.LogicalToDeviceX(rect.x)+2,
-        dc.LogicalToDeviceY(rect.y)+3,
-        13, 13
+        dc.LogicalToDeviceX(rect.x) + indicator_spacing,
+        dc.LogicalToDeviceY(rect.y) + indicator_spacing,
+        indicator_size, indicator_size
     );
 }
 
@@ -598,7 +464,7 @@
                               const wxRect& rect,
                               int flags)
 {
-    GtkWidget *button = GetButtonWidget();
+    GtkWidget *button = wxGTKPrivate::GetButtonWidget();
 
     GdkWindow* gdk_window = NULL;
 #if wxUSE_NEW_DC
Index: src/gtk/win_gtk.cpp
===================================================================
--- src/gtk/win_gtk.cpp	(revision 54389)
+++ src/gtk/win_gtk.cpp	(working copy)
@@ -8,6 +8,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 
 #include "wx/defs.h"
+#include "wx/gtk/private.h"
 #include "wx/gtk/private/win_gtk.h"
 
 /*
@@ -382,8 +383,6 @@
     }
 }
 
-extern GtkWidget *GetEntryWidget();
-
 void wxPizza::get_border_widths(int& x, int& y)
 {
     x = y = 0;
@@ -391,7 +390,7 @@
         x = y = 1;
     else if (m_border_style)
     {
-        GtkWidget *entry_widget = GetEntryWidget();
+        GtkWidget *entry_widget = wxGTKPrivate::GetEntryWidget();
         if (entry_widget->style)
         {
             x = entry_widget->style->xthickness;
Index: src/gtk/window.cpp
===================================================================
--- src/gtk/window.cpp	(revision 54389)
+++ src/gtk/window.cpp	(working copy)
@@ -278,8 +278,6 @@
 
 #ifndef __WXUNIVERSAL__
 
-GtkWidget* GetEntryWidget();
-
 extern "C" {
 static gboolean
 expose_event_border(GtkWidget* widget, GdkEventExpose* gdk_event, wxWindow* win)
@@ -320,7 +318,7 @@
             // for scrollable ones
             detail = "viewport";
 
-        GtkWidget* styleWidget = GetEntryWidget();
+        GtkWidget* styleWidget = wxGTKPrivate::GetEntryWidget();
         gtk_paint_shadow(
            styleWidget->style, gdk_event->window, GTK_STATE_NORMAL,
            shadow, NULL, styleWidget, detail, x, y, w, h);
Index: src/msw/renderer.cpp
===================================================================
--- src/msw/renderer.cpp	(revision 54389)
+++ src/msw/renderer.cpp	(working copy)
@@ -122,6 +122,8 @@
                                const wxRect& rect,
                                int flags = 0);
 
+    virtual wxSize GetCheckBoxSize(wxWindow *win);
+
     virtual int GetHeaderButtonHeight(wxWindow *win);
 
 private:
@@ -295,6 +297,12 @@
     ::DrawFocusRect(GetHdcOf(*((wxMSWDCImpl*)dc.GetImpl())), &rc);
 }
 
+wxSize wxRendererMSW::GetCheckBoxSize(wxWindow * WXUNUSED(win))
+{
+    return wxSize(::GetSystemMetrics(SM_CXMENUCHECK),
+                  ::GetSystemMetrics(SM_CYMENUCHECK));
+}
+
 int wxRendererMSW::GetHeaderButtonHeight(wxWindow * WXUNUSED(win))
 {
     // some "reasonable" value returned in case of error, it doesn't really
@@ -560,7 +568,7 @@
     dc.SetBrush(brush);
     dc.SetPen(*wxTRANSPARENT_PEN);
     dc.DrawRectangle( rect );
-    
+
     if ((flags & wxCONTROL_FOCUSED) && (flags & wxCONTROL_CURRENT))
         DrawFocusRect( win, dc, rect, flags );
 }
Index: src/osx/carbon/renderer.cpp
===================================================================
--- src/osx/carbon/renderer.cpp	(revision 54389)
+++ src/osx/carbon/renderer.cpp	(working copy)
@@ -62,6 +62,8 @@
                               const wxRect& rect,
                               int flags = 0);
 
+    virtual wxSize GetCheckBoxSize(wxWindow* win);
+
     virtual void DrawComboBoxDropButton(wxWindow *win,
                                         wxDC& dc,
                                         const wxRect& rect,
@@ -344,6 +346,27 @@
                        kThemeCheckBox, kThemeAdornmentNone);
 }
 
+wxSize wxRendererMac::GetCheckBoxSize(wxWindow* WXUNUSED(win))
+{
+    wxSize size;
+    SInt32 width, height;
+    OSStatus errStatus;
+
+    errStatus = GetThemeMetric(kThemeMetricCheckBoxWidth, &width);
+    if (errStatus == noErr)
+    {
+        size.SetWidth(width);
+    }
+
+    errStatus = GetThemeMetric(kThemeMetricCheckBoxHeight, &height);
+    if (errStatus == noErr)
+    {
+        size.SetHeight(height);
+    }
+
+    return size;
+}
+
 void
 wxRendererMac::DrawComboBoxDropButton(wxWindow *win,
                               wxDC& dc,
@@ -405,4 +428,3 @@
 
     HIThemeDrawFocusRect( &cgrect , true , cgContext , kHIThemeOrientationNormal ) ;
 }
-

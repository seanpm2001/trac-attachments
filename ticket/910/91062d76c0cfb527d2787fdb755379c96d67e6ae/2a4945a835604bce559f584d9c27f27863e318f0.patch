Index: docs/latex/wx/stream.tex
===================================================================
--- docs/latex/wx/stream.tex	(revision 50961)
+++ docs/latex/wx/stream.tex	(working copy)
@@ -72,6 +72,9 @@
 
 \helpref{wxStreamBuffer:SetBufferIO}{wxstreambuffersetbufferio}
 
+% -----------
+% ctor & dtor
+% -----------
 \membersection{wxStreamBuffer::\destruct{wxStreamBuffer}}\label{wxstreambufferdtor}
 
 \func{}{wxStreamBuffer}{\destruct{wxStreamBuffer}}
@@ -79,44 +82,88 @@
 Destructor. It finalizes all IO calls and frees all internal buffers if
 necessary.
 
-% -----------
-% Filtered IO
-% -----------
-\membersection{wxStreamBuffer::Read}\label{wxstreambufferread}
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::FillBuffer}\label{wxstreambufferfillbuffer}
 
-\func{size\_t}{Read}{\param{void *}{buffer}, \param{size\_t }{size}}
+\func{bool}{FillBuffer}{\void}
 
-Reads a block of the specified {\it size} and stores the data in {\it buffer}.
-This function tries to read from the buffer first and if more data has been
-requested, reads more data from the associated stream and updates the buffer
-accordingly until all requested data is read.
+Fill the IO buffer.
 
-\wxheading{Return value}
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::Fixed}\label{wxstreambufferfixed}
 
-It returns the size of the data read. If the returned size is different of the specified 
-{\it size}, an error has occurred and should be tested using 
-\helpref{GetLastError}{wxstreambasegetlasterror}.
+\func{void}{Fixed}{\param{bool}{ fixed}}
 
-\func{size\_t}{Read}{\param{wxStreamBuffer *}{buffer}}
+Toggles the fixed flag. Usually this flag is toggled at the same time as 
+{\it flushable}. This flag allows (when it has the false value) or forbids
+(when it has the true value) the stream buffer to resize dynamically the IO buffer.
 
-Copies data to {\it buffer}. The function returns when {\it buffer} is full or when there isn't
-any more data in the current buffer.
-
 \wxheading{See also}
 
-\helpref{wxStreamBuffer::Write}{wxstreambufferwrite}
+\helpref{wxStreamBuffer::SetBufferIO}{wxstreambuffersetbufferio}
 
-\membersection{wxStreamBuffer::Write}\label{wxstreambufferwrite}
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::Flushable}\label{wxstreambufferflushable}
 
-\func{size\_t}{Write}{\param{const void *}{buffer}, \param{size\_t }{size}}
+\func{void}{Flushable}{\param{bool}{ flushable}}
 
-Writes a block of the specified {\it size} using data of {\it buffer}. The data
-are cached in a buffer before being sent in one block to the stream.
+Toggles the flushable flag. If {\it flushable} is disabled, no data are sent
+to the parent stream.
 
-\func{size\_t}{Write}{\param{wxStreamBuffer *}{buffer}}
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::FlushBuffer}\label{wxstreambufferflushbuffer}
 
-See \helpref{Read}{wxstreambufferread}.
+\func{bool}{FlushBuffer}{\void}
 
+Flushes the IO buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetBufferEnd}\label{wxstreambuffergetbufferend}
+
+\constfunc{void *}{GetBufferEnd}{\void}
+
+Returns a pointer on the end of the stream buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetBufferPos}\label{wxstreambuffergetbufferpos}
+
+\constfunc{void *}{GetBufferPos}{\void}
+
+Returns a pointer on the current position of the stream buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetBufferSize}\label{wxstreambuffergetbuffersize}
+
+\constfunc{size\_t}{GetBufferSize}{\void}
+
+Returns the size of the buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetBufferStart}\label{wxstreambuffergetbufferstart}
+
+\constfunc{void *}{GetBufferStart}{\void}
+
+Returns a pointer on the start of the stream buffer.
+
+% -----------
+% Filtered IO
+% -----------
 \membersection{wxStreamBuffer::GetChar}\label{wxstreambuffergetchar}
 
 \func{char}{GetChar}{\void}
@@ -131,6 +178,36 @@
 
 \helpref{wxStreamBuffer::Read}{wxstreambufferread}
 
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetDataLeft}\label{wxstreambuffergetdataleft}
+
+\func{size\_t}{GetDataLeft}{\void}
+
+Returns the amount of available data in the buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetIntPosition}\label{wxstreambuffergetintposition}
+
+\constfunc{off\_t}{GetIntPosition}{\void}
+
+Returns the current position (counted in bytes) in the stream buffer.
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::GetLastAccess}\label{wxstreambuffergetlastaccess}
+
+\constfunc{size\_t}{GetLastAccess}{\void}
+
+Returns the amount of bytes read during the last IO call to the parent stream.
+
+% -----------
+% Filtered IO
+% -----------
 \membersection{wxStreamBuffer::PutChar}\label{wxstreambufferputchar}
 
 \func{void}{PutChar}{\param{char }{c}}
@@ -145,20 +222,45 @@
 
 \helpref{wxStreamBuffer::Read}{wxstreambufferwrite}
 
-\membersection{wxStreamBuffer::Tell}\label{wxstreambuffertell}
+% -----------
+% Filtered IO
+% -----------
+\membersection{wxStreamBuffer::Read}\label{wxstreambufferread}
 
-\constfunc{off\_t}{Tell}{\void}
+\func{size\_t}{Read}{\param{void *}{buffer}, \param{size\_t }{size}}
 
-Gets the current position in the stream. This position is calculated from
-the {\it real} position in the stream and from the internal buffer position: so
-it gives you the position in the {\it real} stream counted from the start of
-the stream.
+Reads a block of the specified {\it size} and stores the data in {\it buffer}.
+This function tries to read from the buffer first and if more data has been
+requested, reads more data from the associated stream and updates the buffer
+accordingly until all requested data is read.
 
 \wxheading{Return value}
 
-Returns the current position in the stream if possible, wxInvalidOffset in the
-other case.
+It returns the size of the data read. If the returned size is different of the specified 
+{\it size}, an error has occurred and should be tested using 
+\helpref{GetLastError}{wxstreambasegetlasterror}.
 
+\func{size\_t}{Read}{\param{wxStreamBuffer *}{buffer}}
+
+Copies data to {\it buffer}. The function returns when {\it buffer} is full or when there isn't
+any more data in the current buffer.
+
+\wxheading{See also}
+
+\helpref{wxStreamBuffer::Write}{wxstreambufferwrite}
+
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::ResetBuffer}\label{wxstreambufferresetbuffer}
+
+\func{void}{ResetBuffer}{\void}
+
+Resets to the initial state variables concerning the buffer.
+
+% -----------
+% Filtered IO
+% -----------
 \membersection{wxStreamBuffer::Seek}\label{wxstreambufferseek}
 
 \func{off\_t}{Seek}{\param{off\_t }{pos}, \param{wxSeekMode }{mode}}
@@ -182,23 +284,6 @@
 % --------------
 % Buffer control
 % --------------
-\membersection{wxStreamBuffer::ResetBuffer}\label{wxstreambufferresetbuffer}
-
-\func{void}{ResetBuffer}{\void}
-
-Resets to the initial state variables concerning the buffer.
-
-
-\membersection{wxStreamBuffer::Truncate}\label{wxstreambuffertruncate}
-
-\func{void}{Truncate}{\void}
-
-Truncates the buffer to the current position.
-
-Note: Truncate() cannot be used to enlarge the buffer. This is
-usually not needed since the buffer expands automatically.
-
-
 \membersection{wxStreamBuffer::SetBufferIO}\label{wxstreambuffersetbufferio}
 
 \func{void}{SetBufferIO}{\param{char*}{ buffer\_start}, \param{char*}{ buffer\_end}}
@@ -239,30 +324,9 @@
 \helpref{wxStreamBuffer::Fixed}{wxstreambufferfixed}\\
 \helpref{wxStreamBuffer::Flushable}{wxstreambufferflushable}
 
-\membersection{wxStreamBuffer::GetBufferStart}\label{wxstreambuffergetbufferstart}
-
-\constfunc{void *}{GetBufferStart}{\void}
-
-Returns a pointer on the start of the stream buffer.
-
-\membersection{wxStreamBuffer::GetBufferEnd}\label{wxstreambuffergetbufferend}
-
-\constfunc{void *}{GetBufferEnd}{\void}
-
-Returns a pointer on the end of the stream buffer.
-
-\membersection{wxStreamBuffer::GetBufferPos}\label{wxstreambuffergetbufferpos}
-
-\constfunc{void *}{GetBufferPos}{\void}
-
-Returns a pointer on the current position of the stream buffer.
-
-\membersection{wxStreamBuffer::GetIntPosition}\label{wxstreambuffergetintposition}
-
-\constfunc{off\_t}{GetIntPosition}{\void}
-
-Returns the current position (counted in bytes) in the stream buffer.
-
+% --------------
+% Buffer control
+% --------------
 \membersection{wxStreamBuffer::SetIntPosition}\label{wxstreambuffersetintposition}
 
 \func{void}{SetIntPosition}{\param{size\_t}{ pos}}
@@ -274,61 +338,55 @@
 Since it is a very low-level function, there is no check on the position:
 specifying an invalid position can induce unexpected results.
 
-\membersection{wxStreamBuffer::GetLastAccess}\label{wxstreambuffergetlastaccess}
+% --------------
+% Administration
+% --------------
+\membersection{wxStreamBuffer::Stream}\label{wxstreambufferstream}
 
-\constfunc{size\_t}{GetLastAccess}{\void}
+\func{wxStreamBase*}{Stream}{\void}
 
-Returns the amount of bytes read during the last IO call to the parent stream.
+Returns the parent stream of the stream buffer.
 
-\membersection{wxStreamBuffer::Fixed}\label{wxstreambufferfixed}
+% -----------
+% Filtered IO
+% -----------
+\membersection{wxStreamBuffer::Tell}\label{wxstreambuffertell}
 
-\func{void}{Fixed}{\param{bool}{ fixed}}
+\constfunc{off\_t}{Tell}{\void}
 
-Toggles the fixed flag. Usually this flag is toggled at the same time as 
-{\it flushable}. This flag allows (when it has the false value) or forbids
-(when it has the true value) the stream buffer to resize dynamically the IO buffer.
+Gets the current position in the stream. This position is calculated from
+the {\it real} position in the stream and from the internal buffer position: so
+it gives you the position in the {\it real} stream counted from the start of
+the stream.
 
-\wxheading{See also}
+\wxheading{Return value}
 
-\helpref{wxStreamBuffer::SetBufferIO}{wxstreambuffersetbufferio}
+Returns the current position in the stream if possible, wxInvalidOffset in the
+other case.
 
-\membersection{wxStreamBuffer::Flushable}\label{wxstreambufferflushable}
+% --------------
+% Buffer control
+% --------------
+\membersection{wxStreamBuffer::Truncate}\label{wxstreambuffertruncate}
 
-\func{void}{Flushable}{\param{bool}{ flushable}}
+\func{void}{Truncate}{\void}
 
-Toggles the flushable flag. If {\it flushable} is disabled, no data are sent
-to the parent stream.
+Truncates the buffer to the current position.
 
-\membersection{wxStreamBuffer::FlushBuffer}\label{wxstreambufferflushbuffer}
+Note: Truncate() cannot be used to enlarge the buffer. This is
+usually not needed since the buffer expands automatically.
 
-\func{bool}{FlushBuffer}{\void}
+% -----------
+% Filtered IO
+% -----------
+\membersection{wxStreamBuffer::Write}\label{wxstreambufferwrite}
 
-Flushes the IO buffer.
+\func{size\_t}{Write}{\param{const void *}{buffer}, \param{size\_t }{size}}
 
-\membersection{wxStreamBuffer::FillBuffer}\label{wxstreambufferfillbuffer}
+Writes a block of the specified {\it size} using data of {\it buffer}. The data
+are cached in a buffer before being sent in one block to the stream.
 
-\func{bool}{FillBuffer}{\void}
+\func{size\_t}{Write}{\param{wxStreamBuffer *}{buffer}}
 
-Fill the IO buffer.
+See \helpref{Read}{wxstreambufferread}.
 
-\membersection{wxStreamBuffer::GetBufferSize}\label{wxstreambuffergetbuffersize}
-
-\constfunc{size\_t}{GetBufferSize}{\void}
-
-Returns the size of the buffer.
-
-\membersection{wxStreamBuffer::GetDataLeft}\label{wxstreambuffergetdataleft}
-
-\func{size\_t}{GetDataLeft}{\void}
-
-Returns the amount of available data in the buffer.
-
-% --------------
-% Administration
-% --------------
-\membersection{wxStreamBuffer::Stream}\label{wxstreambufferstream}
-
-\func{wxStreamBase*}{Stream}{\void}
-
-Returns the parent stream of the stream buffer.
-
Index: include/wx/stream.h
===================================================================
--- include/wx/stream.h	(revision 50961)
+++ include/wx/stream.h	(working copy)
@@ -444,7 +444,7 @@
     void *GetBufferStart() const { return m_buffer_start; }
     void *GetBufferEnd() const { return m_buffer_end; }
     void *GetBufferPos() const { return m_buffer_pos; }
-    size_t GetBufferSize() const { return m_buffer_size; }
+    size_t GetBufferSize() const { return m_buffer_end - m_buffer_start; }
     size_t GetIntPosition() const { return m_buffer_pos - m_buffer_start; }
     void SetIntPosition(size_t pos) { m_buffer_pos = m_buffer_start + pos; }
     size_t GetLastAccess() const { return m_buffer_end - m_buffer_start; }
@@ -459,7 +459,7 @@
 
     // misc accessors
     wxStreamBase *GetStream() const { return m_stream; }
-    bool HasBuffer() const { return m_buffer_size != 0; }
+    bool HasBuffer() const { return m_buffer_start != m_buffer_end; }
 
     bool IsFixed() const { return m_fixed; }
     bool IsFlushable() const { return m_flushable; }
@@ -499,10 +499,6 @@
          *m_buffer_end,
          *m_buffer_pos;
 
-    // the buffer size
-    // FIXME: isn't it the same as m_buffer_end - m_buffer_start? (VZ)
-    size_t m_buffer_size;
-
     // the stream we're associated with
     wxStreamBase *m_stream;
 
Index: src/common/stream.cpp
===================================================================
--- src/common/stream.cpp	(revision 50961)
+++ src/common/stream.cpp	(working copy)
@@ -63,7 +63,6 @@
     m_buffer_start =
     m_buffer_end =
     m_buffer_pos = NULL;
-    m_buffer_size = 0;
 
     // if we are going to allocate the buffer, we should free it later as well
     m_destroybuf = true;
@@ -106,7 +105,6 @@
     m_buffer_start = buffer.m_buffer_start;
     m_buffer_end = buffer.m_buffer_end;
     m_buffer_pos = buffer.m_buffer_pos;
-    m_buffer_size = buffer.m_buffer_size;
     m_fixed = buffer.m_fixed;
     m_flushable = buffer.m_flushable;
     m_stream = buffer.m_stream;
@@ -156,8 +154,6 @@
     m_buffer_start = (char *)start;
     m_buffer_end   = m_buffer_start + len;
 
-    m_buffer_size = len;
-
     // if we own it, we free it
     m_destroybuf = takeOwnership;
 
@@ -195,7 +191,7 @@
 void wxStreamBuffer::Truncate()
 {
     size_t new_size = m_buffer_pos - m_buffer_start;
-    if ( new_size == m_buffer_size )
+    if ( m_buffer_end == m_buffer_pos )
         return;
 
     if ( !new_size )
@@ -209,8 +205,7 @@
     wxCHECK_RET( new_size, _T("shrinking buffer shouldn't fail") );
 
     m_buffer_start = new_start;
-    m_buffer_size = new_size;
-    m_buffer_end = m_buffer_start + m_buffer_size;
+    m_buffer_end = m_buffer_start + new_size;
     m_buffer_pos = m_buffer_end;
 }
 
@@ -223,7 +218,7 @@
     if ( !inStream )
         return false;
 
-    size_t count = inStream->OnSysRead(m_buffer_start, m_buffer_size);
+    size_t count = inStream->OnSysRead(m_buffer_start, m_buffer_end - m_buffer_start);
     if ( !count )
         return false;
 
@@ -293,25 +288,27 @@
         else // !m_fixed
         {
             // realloc the buffer to have enough space for the data
-            size_t delta = m_buffer_pos - m_buffer_start;
+			if ( m_buffer_pos + size > m_buffer_end )
+			{
+				size_t delta    = (m_buffer_pos - m_buffer_start);
+				size_t new_size = delta + size;
 
-            char *startOld = m_buffer_start;
-            m_buffer_size += size;
-            m_buffer_start = (char *)realloc(m_buffer_start, m_buffer_size);
-            if ( !m_buffer_start )
-            {
-                // don't leak memory if realloc() failed
-                m_buffer_start = startOld;
-                m_buffer_size -= size;
+				char *startOld = m_buffer_start;
+				m_buffer_start = (char *)realloc(m_buffer_start, new_size);
+				if ( !m_buffer_start )
+				{
+					// don't leak memory if realloc() failed
+					m_buffer_start = startOld;
 
-                // what else can we do?
-                return;
-            }
+					// what else can we do?
+					return;
+				}
 
-            // adjust the pointers invalidated by realloc()
-            m_buffer_pos = m_buffer_start + delta;
-            m_buffer_end = m_buffer_start + m_buffer_size;
-        }
+				// adjust the pointers invalidated by realloc()
+				m_buffer_pos = m_buffer_start + delta;
+				m_buffer_end = m_buffer_start + new_size;
+			} // else: the buffer is big enough
+		}
     }
 
     memcpy(m_buffer_pos, buffer, size);

 	  	 

Index: samples/widgets/widgets.cpp
===================================================================
--- samples/widgets/widgets.cpp	(revision 64305)
+++ samples/widgets/widgets.cpp	(working copy)
@@ -99,7 +99,9 @@
     TextEntry_AutoCompleteFilenames,
 
     TextEntry_SetHint,
-    TextEntry_End
+    TextEntry_End,
+
+    Menu_LogFocus
 };
 
 const wxChar *WidgetsCategories[MAX_PAGES] = {
@@ -146,6 +148,8 @@
     // event handlers
 #if USE_LOG
     void OnButtonClearLog(wxCommandEvent& event);
+    void OnFocusMenu( wxCommandEvent& event);
+    void OnIdle( wxIdleEvent& event);
 #endif // USE_LOG
     void OnExit(wxCommandEvent& event);
 
@@ -207,6 +211,9 @@
     wxFont   m_font;
 #endif // wxUSE_MENUS
 
+    bool      m_showFocus;
+    wxWindow* m_windowFocus; // used to track the current focus window
+
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -304,6 +311,12 @@
                         WidgetsFrame::OnUpdateTextUI)
 
     EVT_MENU(wxID_EXIT, WidgetsFrame::OnExit)
+
+#if USE_LOG
+    EVT_MENU(Menu_LogFocus, WidgetsFrame::OnFocusMenu)
+    EVT_IDLE(WidgetsFrame::OnIdle)
+#endif
+
 #endif // wxUSE_MENUS
 END_EVENT_TABLE()
 
@@ -370,6 +383,7 @@
     m_logTarget = NULL;
 #endif // USE_LOG
     m_book = NULL;
+    m_showFocus = false;
 
 #if wxUSE_MENUS
     // create the menubar
@@ -399,6 +413,10 @@
                                 wxT("Toggle &global busy cursor\tCtrl-Shift-U"));
     menuWidget->AppendCheckItem(Widgets_BusyCursor,
                                 wxT("Toggle b&usy cursor\tCtrl-U"));
+#if USE_LOG
+    menuWidget->AppendSeparator();
+    menuWidget->AppendCheckItem(Menu_LogFocus, wxT("Toggle focus messages"));
+#endif
 
     menuWidget->AppendSeparator();
     menuWidget->Append(wxID_EXIT, wxT("&Quit\tCtrl-Q"));
@@ -685,6 +703,51 @@
 #endif
 }
 
+// check/uncheck menuitem and enable/disable focus logmessages
+void WidgetsFrame::OnFocusMenu( wxCommandEvent& event)
+{
+    if( event.IsChecked())
+        m_showFocus = true;
+    else
+        m_showFocus = false;
+
+    GetMenuBar()->Check(Menu_LogFocus, m_showFocus);
+}
+
+#if USE_LOG
+// track the window which has focus
+void WidgetsFrame::OnIdle( wxIdleEvent& WXUNUSED(event) )
+{
+    if( m_showFocus)
+    {
+        wxWindow* winFocus = wxWindow::FindFocus();
+        if( winFocus != m_windowFocus)
+        {
+            wxString s;
+            m_windowFocus = winFocus;
+            if( winFocus)
+            {
+                s = wxT("Focus(): Pointer = ");
+                s += wxString::Format("0x%p", winFocus);
+#ifdef __WXMSW__
+                s += wxString::Format(", HWND = %08x", (unsigned int) winFocus->GetHWND());
+#endif
+                s += wxT(", ID = ");
+                s << winFocus->GetId();
+                s += wxT(", ClassName = ");
+                s += winFocus->GetClassInfo()->GetClassName();
+                s += wxT(", Name = ");
+                s += winFocus->GetName();
+            }
+            else
+                s = wxT("No focus");
+
+            wxLogMessage(s.c_str());
+        }
+    }
+}
+#endif // USE_LOG
+
 void WidgetsFrame::OnPageChanged(WidgetsBookCtrlEvent& event)
 {
     const int sel = event.GetSelection();

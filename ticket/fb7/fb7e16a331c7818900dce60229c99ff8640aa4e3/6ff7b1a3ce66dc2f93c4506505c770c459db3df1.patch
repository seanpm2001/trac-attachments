Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 63646)
+++ include/wx/aui/auibar.h	(working copy)
@@ -21,6 +21,7 @@
 #include "wx/pen.h"
 
 //class WXDLLIMPEXP_FWD_CORE wxSizerItem;
+class wxAuiPaneInfo;
 
 enum wxAuiToolBarStyle
 {
@@ -29,9 +30,17 @@
     wxAUI_TB_NO_AUTORESIZE = 1 << 2,
     wxAUI_TB_GRIPPER       = 1 << 3,
     wxAUI_TB_OVERFLOW      = 1 << 4,
+    // using this style forces the toolbar to be vertical and
+    // be only dockable to the left or right sides of the window
+    // whereas by default it can be horizontal or vertical and
+    // be docked anywhere    
     wxAUI_TB_VERTICAL      = 1 << 5,
     wxAUI_TB_HORZ_LAYOUT   = 1 << 6,
+    // analogous to wxAUI_TB_VERTICAL, but forces the toolbar
+    // to be horizontal
+    wxAUI_TB_HORIZONTAL    = 1 << 7,
     wxAUI_TB_HORZ_TEXT     = (wxAUI_TB_HORZ_LAYOUT | wxAUI_TB_TEXT),
+    wxAUI_ORIENTATION_MASK = (wxAUI_TB_VERTICAL | wxAUI_TB_HORIZONTAL),
     wxAUI_TB_DEFAULT_STYLE = 0
 };
 
@@ -564,6 +573,10 @@
     void SetCustomOverflowItems(const wxAuiToolBarItemArray& prepend,
                                 const wxAuiToolBarItemArray& append);
 
+    // auto-orientation
+    wxSize GetHintSize(int dock_direction) const;
+    bool IsPaneValid(const wxAuiPaneInfo& pane) const;
+
 protected:
 
     virtual void OnCustomRender(wxDC& WXUNUSED(dc),
@@ -636,6 +649,14 @@
     bool m_overflow_visible;
     long m_style;
 
+    // auto-orientation
+    bool RealizeHelper(wxClientDC& dc, bool horizontal);
+    static bool IsPaneValid(long style, const wxAuiPaneInfo& pane);
+    bool IsPaneValid(long style) const;
+    wxOrientation m_orientation;
+    wxSize m_horzHintSize;
+    wxSize m_vertHintSize;
+
     DECLARE_EVENT_TABLE()
     DECLARE_CLASS(wxAuiToolBar)
 };
Index: include/wx/aui/framemanager.h
===================================================================
--- include/wx/aui/framemanager.h	(revision 63646)
+++ include/wx/aui/framemanager.h	(working copy)
@@ -222,6 +222,7 @@
         source.window = window;
         source.frame = frame;
         source.buttons = buttons;
+        wxCHECK(source.IsValid(), void(0));
         // now assign
         *this = source;
     }
@@ -253,7 +254,7 @@
 #ifdef SWIG
     %typemap(out) wxAuiPaneInfo& { $result = $self; Py_INCREF($result); }
 #endif
-    wxAuiPaneInfo& Window(wxWindow* w) { window = w; return *this; }
+    wxAuiPaneInfo& Window(wxWindow* w) { wxAuiPaneInfo test(*this); test.window = w; wxCHECK(test.IsValid(), *this); window = w; return *this; }
     wxAuiPaneInfo& Name(const wxString& n) { name = n; return *this; }
     wxAuiPaneInfo& Caption(const wxString& c) { caption = c; return *this; }
     wxAuiPaneInfo& Left() { dock_direction = wxAUI_DOCK_LEFT; return *this; }
@@ -308,6 +309,12 @@
 
     wxAuiPaneInfo& DefaultPane()
     {
+        wxAuiPaneInfo test(*this);
+        test.state |= optionTopDockable | optionBottomDockable |
+                 optionLeftDockable | optionRightDockable |
+                 optionFloatable | optionMovable | optionResizable |
+                 optionCaption | optionPaneBorder | buttonClose;
+        wxCHECK(test.IsValid(), *this);
         state |= optionTopDockable | optionBottomDockable |
                  optionLeftDockable | optionRightDockable |
                  optionFloatable | optionMovable | optionResizable |
@@ -334,7 +341,13 @@
 
     wxAuiPaneInfo& SetFlag(int flag, bool option_state)
     {
+        wxAuiPaneInfo test(*this);
         if (option_state)
+            test.state |= flag;
+        else
+            test.state &= ~flag;
+        wxCHECK(test.IsValid(), *this);
+        if (option_state)
             state |= flag;
         else
             state &= ~flag;
@@ -416,6 +429,8 @@
     wxAuiPaneButtonArray buttons; // buttons on the pane
 
     wxRect rect;              // current rectangle (populated by wxAUI)
+
+    bool IsValid() const;
 };
 
 
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 63646)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -789,7 +789,7 @@
 
 
     wxAuiToolBar* tb2 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW);
+                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_HORIZONTAL);
     tb2->SetToolBitmapSize(wxSize(16,16));
 
     wxBitmap tb2_bmp1 = wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16));
@@ -943,8 +943,7 @@
     // add the toolbars to the manager
     m_mgr.AddPane(tb1, wxAuiPaneInfo().
                   Name(wxT("tb1")).Caption(wxT("Big Toolbar")).
-                  ToolbarPane().Top().
-                  LeftDockable(false).RightDockable(false));
+                  ToolbarPane().Top());
 
     m_mgr.AddPane(tb2, wxAuiPaneInfo().
                   Name(wxT("tb2")).Caption(wxT("Toolbar 2")).
@@ -953,19 +952,19 @@
 
     m_mgr.AddPane(tb3, wxAuiPaneInfo().
                   Name(wxT("tb3")).Caption(wxT("Toolbar 3")).
-                  ToolbarPane().Top().Row(1).Position(1).
-                  LeftDockable(false).RightDockable(false));
+                  ToolbarPane().Top().Row(1).Position(1));
 
     m_mgr.AddPane(tb4, wxAuiPaneInfo().
                   Name(wxT("tb4")).Caption(wxT("Sample Bookmark Toolbar")).
-                  ToolbarPane().Top().Row(2).
-                  LeftDockable(false).RightDockable(false));
+                  ToolbarPane().Top().Row(2));
 
     m_mgr.AddPane(tb5, wxAuiPaneInfo().
                   Name(wxT("tb5")).Caption(wxT("Sample Vertical Toolbar")).
                   ToolbarPane().Left().
                   GripperTop().
                   TopDockable(false).BottomDockable(false));
+    // assert and rejected for vertical toolbar
+    m_mgr.GetPane(tb5).TopDockable(true);
 
     m_mgr.AddPane(new wxButton(this, wxID_ANY, _("Test Button")),
                   wxAuiPaneInfo().Name(wxT("tb6")).
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 63646)
+++ src/aui/auibar.cpp	(working copy)
@@ -837,13 +837,24 @@
     m_gripper_sizer_item = NULL;
     m_overflow_sizer_item = NULL;
     m_dragging = false;
+    // auto-orientation
+    // if both orientations, assert and reject orientation
+    wxCHECK2((style & wxAUI_ORIENTATION_MASK) != wxAUI_ORIENTATION_MASK,
+            style &= ~wxAUI_ORIENTATION_MASK);
+    m_orientation = style & wxAUI_TB_VERTICAL ? wxVERTICAL : wxHORIZONTAL;
     m_style = style | wxBORDER_NONE;
     m_gripper_visible = (m_style & wxAUI_TB_GRIPPER) ? true : false;
     m_overflow_visible = (m_style & wxAUI_TB_OVERFLOW) ? true : false;
     m_overflow_state = 0;
     SetMargins(5, 5, 2, 2);
     SetFont(*wxNORMAL_FONT);
-    m_art->SetFlags((unsigned int)m_style);
+    // auto-orientation
+    unsigned int artflags = m_style & ~wxAUI_ORIENTATION_MASK;
+    if (m_orientation == wxVERTICAL)
+    {
+        artflags |= wxAUI_TB_VERTICAL;
+    }
+    m_art->SetFlags(artflags);
     SetExtraStyle(wxWS_EX_PROCESS_IDLE);
     if (style & wxAUI_TB_HORZ_LAYOUT)
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
@@ -859,13 +870,25 @@
 
 void wxAuiToolBar::SetWindowStyleFlag(long style)
 {
+    // auto-orientation
+    // if both orientations, assert and reject orientation
+    wxCHECK2((style & wxAUI_ORIENTATION_MASK) == wxAUI_ORIENTATION_MASK,
+            style &= ~wxAUI_ORIENTATION_MASK);
+    wxCHECK(IsPaneValid(style), void(0));
+
     wxControl::SetWindowStyleFlag(style);
 
     m_style = style;
 
     if (m_art)
     {
-        m_art->SetFlags((unsigned int)m_style);
+        // auto-orientation
+        unsigned int artflags = m_style & ~wxAUI_ORIENTATION_MASK;
+        if (m_orientation == wxVERTICAL)
+        {
+            artflags |= wxAUI_TB_VERTICAL;
+        }
+        m_art->SetFlags(artflags);
     }
 
     if (m_style & wxAUI_TB_GRIPPER)
@@ -898,7 +921,13 @@
 
     if (m_art)
     {
-        m_art->SetFlags((unsigned int)m_style);
+        // auto-orientation
+        unsigned int artflags = m_style & ~wxAUI_ORIENTATION_MASK;
+        if (m_orientation == wxVERTICAL)
+        {
+            artflags |= wxAUI_TB_VERTICAL;
+        }
+        m_art->SetFlags(artflags);
         m_art->SetTextOrientation(m_tool_text_orientation);
     }
 }
@@ -1342,8 +1371,23 @@
 }
 
 
-void wxAuiToolBar::SetOrientation(int WXUNUSED(orientation))
+void wxAuiToolBar::SetOrientation(int orientation)
 {
+    // auto-orientation
+    wxCHECK(orientation == wxHORIZONTAL ||
+                orientation == wxVERTICAL,
+            void(0));
+    if (orientation != m_orientation)
+    {
+        wxCHECK(IsPaneValid(m_style), void(0));
+        m_orientation = wxOrientation(orientation);
+        unsigned int artflags = m_style & ~wxAUI_ORIENTATION_MASK;
+        if (m_orientation == wxVERTICAL)
+        {
+            artflags |= wxAUI_TB_VERTICAL;
+        }
+        m_art->SetFlags(artflags);
+    }
 }
 
 void wxAuiToolBar::SetMargins(int left, int right, int top, int bottom)
@@ -1651,7 +1695,56 @@
     m_custom_overflow_append = append;
 }
 
+// auto-orientation
+wxSize wxAuiToolBar::GetHintSize(int dock_direction) const
+{
+    switch (dock_direction)
+    {
+        case wxAUI_DOCK_TOP:
+        case wxAUI_DOCK_BOTTOM:
+            return m_horzHintSize;
+        case wxAUI_DOCK_RIGHT:
+        case wxAUI_DOCK_LEFT:
+            return m_vertHintSize;
+        default:
+            wxCHECK(false, wxDefaultSize);
+    }
+}
 
+bool wxAuiToolBar::IsPaneValid(const wxAuiPaneInfo& pane) const
+{
+    return IsPaneValid(m_style, pane);
+}
+
+bool wxAuiToolBar::IsPaneValid(long style, const wxAuiPaneInfo& pane)
+{
+    if (style & wxAUI_TB_HORIZONTAL)
+    {
+        if (pane.IsLeftDockable() || pane.IsRightDockable())
+        {
+            return false;
+        }
+    }
+    else if (style & wxAUI_TB_VERTICAL)
+    {
+        if (pane.IsTopDockable() || pane.IsBottomDockable())
+        {
+            return false;
+        }
+    }
+    return true;
+}
+
+bool wxAuiToolBar::IsPaneValid(long style) const
+{
+    wxAuiManager* manager = wxAuiManager::GetManager(const_cast<wxAuiToolBar*>(this));
+    if (manager)
+    {
+        return IsPaneValid(style, manager->GetPane(const_cast<wxAuiToolBar*>(this)));
+    }
+    return true;
+}
+
 size_t wxAuiToolBar::GetToolCount() const
 {
     return m_items.size();
@@ -1688,7 +1781,8 @@
 
     wxRect rect = m_items[tool_idx].sizer_item->GetRect();
 
-    if (m_style & wxAUI_TB_VERTICAL)
+    // auto-orientation
+    if (m_orientation == wxVERTICAL)
     {
         // take the dropdown size into account
         if (m_overflow_visible)
@@ -1745,11 +1839,41 @@
     if (!dc.IsOk())
         return false;
 
-    bool horizontal = true;
-    if (m_style & wxAUI_TB_VERTICAL)
-        horizontal = false;
+    // auto-orientation
+    // calculate hint sizes for both horizontal and vertical
+    // in the order that leaves toolbar in correct final state
+    bool retval = false;
+    if (m_orientation == wxHORIZONTAL)
+    {
+        if (RealizeHelper(dc, false))
+        {
+            m_vertHintSize = GetSize();
+            if (RealizeHelper(dc, true))
+            {
+                m_horzHintSize = GetSize();
+                retval = true;
+            }
+        }
+    }
+    else
+    {
+        if (RealizeHelper(dc, true))
+        {
+            m_horzHintSize = GetSize();
+            if (RealizeHelper(dc, false))
+            {
+                m_vertHintSize = GetSize();
+                retval = true;
+            }
+        }
+    }
 
+    Refresh(false);
+    return retval;
+}
 
+bool wxAuiToolBar::RealizeHelper(wxClientDC& dc, bool horizontal)
+{
     // create the new sizer to add toolbar elements to
     wxBoxSizer* sizer = new wxBoxSizer(horizontal ? wxHORIZONTAL : wxVERTICAL);
 
@@ -1986,7 +2110,6 @@
         m_sizer->SetDimension(0, 0, cur_size.x, cur_size.y);
     }
 
-    Refresh(false);
     return true;
 }
 
@@ -2001,7 +2124,8 @@
     wxRect overflow_rect = m_overflow_sizer_item->GetRect();
     int overflow_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
 
-    if (m_style & wxAUI_TB_VERTICAL)
+    // auto-orientation
+    if (m_orientation == wxVERTICAL)
     {
         overflow_rect.y = cli_rect.height - overflow_size;
         overflow_rect.x = 0;
@@ -2119,11 +2243,6 @@
     int x, y;
     GetClientSize(&x, &y);
 
-    if (x > y)
-        SetOrientation(wxHORIZONTAL);
-    else
-        SetOrientation(wxVERTICAL);
-
     if (((x >= y) && m_absolute_min_size.x > x) ||
         ((y > x) && m_absolute_min_size.y > y))
     {
@@ -2180,6 +2299,41 @@
 
 void wxAuiToolBar::OnIdle(wxIdleEvent& evt)
 {
+    // auto-orientation
+    // if orientation doesn't match dock, fix it
+    wxAuiManager* manager = wxAuiManager::GetManager(this);
+    if (manager)
+    {
+        wxAuiPaneInfo& pane = manager->GetPane(this);
+        switch (pane.dock_direction)
+        {
+            case wxAUI_DOCK_TOP:
+            case wxAUI_DOCK_BOTTOM:
+                if (m_orientation == wxVERTICAL)
+                {
+                    wxCHECK2(!(m_style & wxAUI_TB_VERTICAL), break);
+                    SetOrientation(wxHORIZONTAL);
+                    Realize();
+                    pane.best_size = GetHintSize(pane.dock_direction);
+                    pane.floating_size = wxDefaultSize;
+                }
+                break;
+            case wxAUI_DOCK_LEFT:
+            case wxAUI_DOCK_RIGHT:
+                if (m_orientation == wxHORIZONTAL)
+                {
+                    wxCHECK2(!(m_style & wxAUI_TB_HORIZONTAL), break);
+                    SetOrientation(wxVERTICAL);
+                    Realize();
+                    pane.best_size = GetHintSize(pane.dock_direction);
+                    pane.floating_size = wxDefaultSize;
+                }
+                break;
+            default:
+                wxCHECK(false, void(0));
+        }
+    }
+
     DoIdleUpdate();
     evt.Skip();
 }
@@ -2190,9 +2344,7 @@
     wxRect cli_rect(wxPoint(0,0), GetClientSize());
 
 
-    bool horizontal = true;
-    if (m_style & wxAUI_TB_VERTICAL)
-        horizontal = false;
+    bool horizontal = m_orientation == wxHORIZONTAL;
 
 
     m_art->DrawBackground(dc, this, cli_rect);
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 63646)
+++ src/aui/framemanager.cpp	(working copy)
@@ -698,6 +698,19 @@
 
 
 
+// wxAuiToolBar auto-orientation
+bool wxAuiPaneInfo::IsValid() const
+{
+    // Should this RTTI and function call be rewritten as
+    // sending a new event type to allow other window types
+    // to check the pane?
+    wxAuiToolBar* toolbar = wxDynamicCast(window, wxAuiToolBar);
+    if (toolbar)
+    {
+        return toolbar->IsPaneValid(*this);
+    }
+    return true;
+}
 
 // -- wxAuiManager class implementation --
 
@@ -1121,6 +1134,11 @@
     if (pane_info.IsDocked())
         RestoreMaximizedPane();
 
+    // wxAuiToolBar auto-orientation
+    wxAuiPaneInfo test(pane_info);
+    test.window = window;
+    wxCHECK(test.IsValid(), false);
+
     m_panes.Add(pane_info);
 
     wxAuiPaneInfo& pinfo = m_panes.Last();
@@ -2901,7 +2919,18 @@
     }
 
     if (allowed)
+    {
         target = new_pos;
+        wxAuiToolBar* toolbar = wxDynamicCast(target.window, wxAuiToolBar);
+        if (toolbar)
+        {
+            if (target.best_size != toolbar->GetHintSize(target.dock_direction))
+            {
+                target.best_size = toolbar->GetHintSize(target.dock_direction);
+                target.floating_size = wxDefaultSize;
+            }
+        }
+    }
 
     return allowed;
 }

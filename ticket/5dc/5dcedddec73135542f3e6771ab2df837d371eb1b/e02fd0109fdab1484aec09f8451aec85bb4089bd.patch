Index: include/wx/textctrl.h
===================================================================
--- include/wx/textctrl.h	(revision 67751)
+++ include/wx/textctrl.h	(working copy)
@@ -574,6 +574,13 @@
     virtual long XYToPosition(long x, long y) const = 0;
     virtual bool PositionToXY(long pos, long *x, long *y) const = 0;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long WXUNUSED(pos)) const
+    {
+        return wxPoint (-1, -1);
+    }
+
     virtual void ShowPosition(long pos) = 0;
 
     // find the character at position given in pixels
Index: include/wx/msw/textctrl.h
===================================================================
--- include/wx/msw/textctrl.h	(revision 67751)
+++ include/wx/msw/textctrl.h	(working copy)
@@ -93,6 +93,10 @@
     virtual long XYToPosition(long x, long y) const;
     virtual bool PositionToXY(long pos, long *x, long *y) const;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long pos) const;
+
     virtual void ShowPosition(long pos);
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
Index: include/wx/gtk/textctrl.h
===================================================================
--- include/wx/gtk/textctrl.h	(revision 67751)
+++ include/wx/gtk/textctrl.h	(working copy)
@@ -71,6 +71,10 @@
     virtual long XYToPosition(long x, long y) const;
     virtual bool PositionToXY(long pos, long *x, long *y) const;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long pos) const;
+
     virtual void ShowPosition(long pos);
 
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
Index: interface/wx/textctrl.h
===================================================================
--- interface/wx/textctrl.h	(revision 67751)
+++ interface/wx/textctrl.h	(working copy)
@@ -1349,6 +1349,25 @@
     virtual bool PositionToXY(long pos, long* x, long* y) const;
 
     /**
+        Converts given position to client coordinates.
+
+        @since 2.9.2
+
+        @param pos
+            Position.
+
+        @return
+            On success returns a wxPoint which contains client coordinates for the given position. wxPoint(-1,-1) on failure.
+
+        @notes
+
+            This function returns wxPoint(-1, -1) in the following cases
+                - Too large position value.
+                - Not available for the current platform. Currently it is implemented only on wxGTK and wxMSW.
+    */
+    virtual wxPoint PositionToCoords(long pos) const;
+
+    /**
         Saves the contents of the control in a text file.
 
         @param filename
Index: src/gtk/textctrl.cpp
===================================================================
--- src/gtk/textctrl.cpp	(revision 67751)
+++ src/gtk/textctrl.cpp	(working copy)
@@ -1218,6 +1218,37 @@
     }
 }
 
+wxPoint wxTextCtrl::PositionToCoords(long pos) const
+{
+    if( IsMultiLine() )
+    {
+        // Window coordinates for the given position is calculated by getting the buffer coordinate
+        // and converting it to window coordinate
+
+        GtkTextView *textview = GTK_TEXT_VIEW (m_text);
+
+        GtkTextIter iter;
+        gtk_text_buffer_get_iter_at_offset (m_buffer, &iter, pos);
+
+        GdkRectangle buffer_coord;
+        gtk_text_view_get_iter_location (textview, &iter, &buffer_coord);
+
+        gint win_coord_x = 0, win_coord_y = 0;
+        gtk_text_view_buffer_to_window_coords (textview, GTK_TEXT_WINDOW_WIDGET, 
+                                               buffer_coord.x, buffer_coord.y, 
+                                               &win_coord_x, &win_coord_y);
+        
+        return wxPoint (win_coord_x, win_coord_y);
+    }
+    else
+    {
+        if (pos <= gtk_entry_get_text_length(GTK_ENTRY(m_text)))
+            return wxPoint (pos, 0);
+    }
+
+    return wxPoint (-1, -1);
+}
+
 int wxTextCtrl::GetNumberOfLines() const
 {
     if ( IsMultiLine() )
Index: src/msw/textctrl.cpp
===================================================================
--- src/msw/textctrl.cpp	(revision 67751)
+++ src/msw/textctrl.cpp	(working copy)
@@ -1489,6 +1489,32 @@
     return rc;
 }
 
+wxPoint wxTextCtrl::PositionToCoords(long pos) const
+{
+	HWND hWnd = GetHwnd();
+
+	POINTL pt;	
+
+#if wxUSE_RICHEDIT
+    if ( IsRich() )
+    {
+        long status = ::SendMessage(hWnd, EM_POSFROMCHAR, (WPARAM)&pt, pos);
+		if ( status != -1 )
+			return wxPoint (pt.x, pt.y);
+    }
+    else
+#endif // wxUSE_RICHEDIT
+    {
+        LRESULT lRc = ::SendMessage(hWnd, EM_POSFROMCHAR, pos, 0);
+
+        if ( lRc != -1 )
+			return wxPoint (LOWORD(lRc), HIWORD(lRc));
+    }
+
+	return wxPoint (-1, -1);
+}
+
+
 // ----------------------------------------------------------------------------
 //
 // ----------------------------------------------------------------------------
Index: tests/controls/textctrltest.cpp
===================================================================
--- tests/controls/textctrltest.cpp	(revision 67751)
+++ tests/controls/textctrltest.cpp	(working copy)
@@ -59,6 +59,7 @@
         CPPUNIT_TEST( Style );
         CPPUNIT_TEST( Lines );
         CPPUNIT_TEST( LogTextCtrl );
+        CPPUNIT_TEST( PositionToCoords );
     CPPUNIT_TEST_SUITE_END();
 
     void MultiLineReplace();
@@ -71,6 +72,7 @@
     void Style();
     void Lines();
     void LogTextCtrl();
+    void PositionToCoords();
 
     wxTextCtrl *m_text;
 
@@ -422,4 +424,23 @@
     CPPUNIT_ASSERT(!m_text->IsEmpty());
 }
 
+void TextCtrlTestCase::PositionToCoords()
+{
+#if defined(__WXMSW__)  || defined(__WXGTK20__)
+    delete m_text;
+    m_text = new wxTextCtrl(wxTheApp->GetTopWindow(), wxID_ANY, "",
+                            wxDefaultPosition, wxSize(400, 200),
+                            wxTE_MULTILINE);
+
+    m_text->SetInsertionPoint (0);
+
+    wxPoint p = m_text->PositionToCoords (m_text->GetInsertionPoint());
+
+    CPPUNIT_ASSERT(p.x != -1);
+    CPPUNIT_ASSERT(p.y != -1);
+
+#endif
+}
+
+
 #endif //wxUSE_TEXTCTRL
Index: samples/text/text.cpp
===================================================================
--- samples/text/text.cpp	(revision 67751)
+++ samples/text/text.cpp	(working copy)
@@ -128,6 +128,7 @@
     void DoSelectText();
     void DoMoveToEndOfText();
     void DoMoveToEndOfEntry();
+    void DoGetWindowCoordinates();
 
     // return true if currently text control has any selection
     bool HasSelection() const
@@ -217,6 +218,10 @@
 
     void OnMoveToEndOfText( wxCommandEvent& WXUNUSED(event) )
         { m_panel->DoMoveToEndOfText(); }
+
+    void OnGetWindowCoordinates( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoGetWindowCoordinates(); }
+
     void OnMoveToEndOfEntry( wxCommandEvent& WXUNUSED(event) )
         { m_panel->DoMoveToEndOfEntry(); }
 
@@ -415,6 +420,7 @@
     TEXT_ADD_FREEZE,
     TEXT_ADD_LINE,
     TEXT_MOVE_ENDTEXT,
+    TEXT_GET_WINDOW_COORD,
     TEXT_MOVE_ENDENTRY,
     TEXT_SET_EDITABLE,
     TEXT_SET_ENABLED,
@@ -513,6 +519,7 @@
     menuText->Append(TEXT_LINE_UP, wxT("Scroll text one line up"));
     menuText->Append(TEXT_PAGE_DOWN, wxT("Scroll text one page down"));
     menuText->Append(TEXT_PAGE_UP, wxT("Scroll text one page up"));
+	menuText->Append(TEXT_GET_WINDOW_COORD, wxT("Get window coordinates"));
     menuText->AppendSeparator();
     menuText->Append(TEXT_GET_LINE, wxT("Get the text of a line of the tabbed multiline"));
     menuText->Append(TEXT_GET_LINELENGTH, wxT("Get the length of a line of the tabbed multiline"));
@@ -1299,6 +1306,13 @@
     m_multitext->SetFocus();
 }
 
+void MyPanel::DoGetWindowCoordinates()
+{
+    long pos = m_multitext->GetInsertionPoint();	
+    wxPoint point = m_multitext->PositionToCoords(pos);
+    *m_log << wxT("Window coordinates - X : ") << point.x << wxT(", Y : ")  << point.y << wxT("\n");
+}
+
 void MyPanel::DoMoveToEndOfEntry()
 {
     m_text->SetInsertionPointEnd();
@@ -1361,6 +1375,7 @@
     EVT_MENU(TEXT_ADD_FREEZE,         MyFrame::OnAddTextFreeze)
     EVT_MENU(TEXT_ADD_LINE,           MyFrame::OnAddTextLine)
     EVT_MENU(TEXT_MOVE_ENDTEXT,       MyFrame::OnMoveToEndOfText)
+    EVT_MENU(TEXT_GET_WINDOW_COORD,   MyFrame::OnGetWindowCoordinates)
     EVT_MENU(TEXT_MOVE_ENDENTRY,      MyFrame::OnMoveToEndOfEntry)
 
     EVT_MENU(TEXT_SET_EDITABLE,       MyFrame::OnSetEditable)

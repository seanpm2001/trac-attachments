commit 1195d3309cd6d4e21fc8fb1aabf383505c177538
Author: Vadim Zeitlin <vadim@wxwidgets.org>
Date:   Mon May 16 13:19:10 2011 +0200

    Add wxTextCtrl::PositionToCoords() functions for wxMSW and wxGTK.
    
    The new method allows to find the coordinates in pixels of the given character
    in a text control.
    
    Closes #13221.

diff --git a/docs/changes.txt b/docs/changes.txt
index cdcb867..0539da1 100644
--- a/docs/changes.txt
+++ b/docs/changes.txt
@@ -475,6 +475,7 @@ All (GUI):
 - wxHTML: render in RTL order inside RTL window (Richard Bullington-McGuire).
 - wxRibbon: added EVT_RIBBONGALLERY_CLICKED event (John Roberts).
 - wxRibbon: allow hiding the panels and showing tabs only (snowleopard).
+- Added wxTextCtrl::PositionToCoords() (Navaneeth).
 - Add support for CP-866 encoding to wxEncodingConverter (madnut).
 - Consistency fixes for keyboard events across all major ports.
 - Added EVT_RIBBONBAR_TAB_LEFT_DCLICK event (snowleopard).
diff --git a/include/wx/gtk/textctrl.h b/include/wx/gtk/textctrl.h
index 9db822c..a138207 100644
--- a/include/wx/gtk/textctrl.h
+++ b/include/wx/gtk/textctrl.h
@@ -71,6 +71,10 @@ class WXDLLIMPEXP_CORE wxTextCtrl: public wxTextCtrlBase
     virtual long XYToPosition(long x, long y) const;
     virtual bool PositionToXY(long pos, long *x, long *y) const;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long pos) const;
+
     virtual void ShowPosition(long pos);
 
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
diff --git a/include/wx/msw/textctrl.h b/include/wx/msw/textctrl.h
index 888ea4c..5f2d85c 100644
--- a/include/wx/msw/textctrl.h
+++ b/include/wx/msw/textctrl.h
@@ -93,6 +93,10 @@ class WXDLLIMPEXP_CORE wxTextCtrl : public wxTextCtrlBase
     virtual long XYToPosition(long x, long y) const;
     virtual bool PositionToXY(long pos, long *x, long *y) const;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long pos) const;
+
     virtual void ShowPosition(long pos);
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt,
diff --git a/include/wx/textctrl.h b/include/wx/textctrl.h
index f26cb8a..1d925c8 100644
--- a/include/wx/textctrl.h
+++ b/include/wx/textctrl.h
@@ -574,6 +574,13 @@ class WXDLLIMPEXP_CORE wxTextAreaBase
     virtual long XYToPosition(long x, long y) const = 0;
     virtual bool PositionToXY(long pos, long *x, long *y) const = 0;
 
+    // translate the given position (which is just an index in the text control)
+    // to client coordinates
+    virtual wxPoint PositionToCoords(long WXUNUSED(pos)) const
+    {
+        return wxDefaultPosition;
+    }
+
     virtual void ShowPosition(long pos) = 0;
 
     // find the character at position given in pixels
diff --git a/interface/wx/textctrl.h b/interface/wx/textctrl.h
index 746954e..759d2eb 100644
--- a/interface/wx/textctrl.h
+++ b/interface/wx/textctrl.h
@@ -1349,6 +1349,26 @@ class wxTextCtrl : public wxControl,
     virtual bool PositionToXY(long pos, long* x, long* y) const;
 
     /**
+        Converts given text position to client coordinates in pixels.
+
+        This function allows to find where is the character at the given
+        position displayed in the text control.
+
+        @onlyfor{wxmsw,wxgtk}
+
+        @param pos
+            Text position in 0 to GetLastPosition() range (inclusive).
+        @return
+            On success returns a wxPoint which contains client coordinates for
+            the given position in pixels, otherwise returns wxDefaultPosition.
+
+        @since 2.9.2
+
+        @see XYToPosition(), PositionToXY()
+    */
+    virtual wxPoint PositionToCoords(long pos) const;
+
+    /**
         Saves the contents of the control in a text file.
 
         @param filename
diff --git a/samples/text/text.cpp b/samples/text/text.cpp
index 624770b..28570c5 100644
--- a/samples/text/text.cpp
+++ b/samples/text/text.cpp
@@ -128,6 +128,7 @@ class MyPanel: public wxPanel
     void DoSelectText();
     void DoMoveToEndOfText();
     void DoMoveToEndOfEntry();
+    void DoGetWindowCoordinates();
 
     // return true if currently text control has any selection
     bool HasSelection() const
@@ -217,6 +218,10 @@ class MyFrame: public wxFrame
 
     void OnMoveToEndOfText( wxCommandEvent& WXUNUSED(event) )
         { m_panel->DoMoveToEndOfText(); }
+
+    void OnGetWindowCoordinates( wxCommandEvent& WXUNUSED(event) )
+        { m_panel->DoGetWindowCoordinates(); }
+
     void OnMoveToEndOfEntry( wxCommandEvent& WXUNUSED(event) )
         { m_panel->DoMoveToEndOfEntry(); }
 
@@ -415,6 +420,7 @@ enum
     TEXT_ADD_FREEZE,
     TEXT_ADD_LINE,
     TEXT_MOVE_ENDTEXT,
+    TEXT_GET_WINDOW_COORD,
     TEXT_MOVE_ENDENTRY,
     TEXT_SET_EDITABLE,
     TEXT_SET_ENABLED,
@@ -513,6 +519,7 @@ bool MyApp::OnInit()
     menuText->Append(TEXT_LINE_UP, wxT("Scroll text one line up"));
     menuText->Append(TEXT_PAGE_DOWN, wxT("Scroll text one page down"));
     menuText->Append(TEXT_PAGE_UP, wxT("Scroll text one page up"));
+    menuText->Append(TEXT_GET_WINDOW_COORD, wxT("Get window coordinates"));
     menuText->AppendSeparator();
     menuText->Append(TEXT_GET_LINE, wxT("Get the text of a line of the tabbed multiline"));
     menuText->Append(TEXT_GET_LINELENGTH, wxT("Get the length of a line of the tabbed multiline"));
@@ -1299,6 +1306,18 @@ void MyPanel::DoMoveToEndOfText()
     m_multitext->SetFocus();
 }
 
+void MyPanel::DoGetWindowCoordinates()
+{
+    wxTextCtrl * const text = GetFocusedText();
+
+    const wxPoint pt0 = text->PositionToCoords(0);
+    const wxPoint ptCur = text->PositionToCoords(text->GetInsertionPoint());
+    *m_log << "Current position coordinates: "
+              "(" << ptCur.x << ", "  << ptCur.y << "), "
+              "first position coordinates: "
+              "(" << pt0.x << ", "  << pt0.y << ")\n";
+}
+
 void MyPanel::DoMoveToEndOfEntry()
 {
     m_text->SetInsertionPointEnd();
@@ -1361,6 +1380,7 @@ void MyPanel::DoSelectText()
     EVT_MENU(TEXT_ADD_FREEZE,         MyFrame::OnAddTextFreeze)
     EVT_MENU(TEXT_ADD_LINE,           MyFrame::OnAddTextLine)
     EVT_MENU(TEXT_MOVE_ENDTEXT,       MyFrame::OnMoveToEndOfText)
+    EVT_MENU(TEXT_GET_WINDOW_COORD,   MyFrame::OnGetWindowCoordinates)
     EVT_MENU(TEXT_MOVE_ENDENTRY,      MyFrame::OnMoveToEndOfEntry)
 
     EVT_MENU(TEXT_SET_EDITABLE,       MyFrame::OnSetEditable)
diff --git a/src/gtk/textctrl.cpp b/src/gtk/textctrl.cpp
index ee0c631..2922168 100644
--- a/src/gtk/textctrl.cpp
+++ b/src/gtk/textctrl.cpp
@@ -1218,6 +1218,37 @@ int wxTextCtrl::GetLineLength(long lineNo) const
     }
 }
 
+wxPoint wxTextCtrl::PositionToCoords(long pos) const
+{
+    if ( IsMultiLine() )
+    {
+        // Window coordinates for the given position is calculated by getting
+        // the buffer coordinate and converting it to window coordinate
+        GtkTextView *textview = GTK_TEXT_VIEW (m_text);
+
+        GtkTextIter iter;
+        gtk_text_buffer_get_iter_at_offset (m_buffer, &iter, pos);
+
+        GdkRectangle buffer_coord;
+        gtk_text_view_get_iter_location (textview, &iter, &buffer_coord);
+
+        gint win_coord_x = 0,
+             win_coord_y = 0;
+        gtk_text_view_buffer_to_window_coords (textview, GTK_TEXT_WINDOW_WIDGET,
+                                               buffer_coord.x, buffer_coord.y,
+                                               &win_coord_x, &win_coord_y);
+
+        return wxPoint(win_coord_x, win_coord_y);
+    }
+    else
+    {
+        if ( pos <= gtk_entry_get_text_length(GTK_ENTRY(m_text)) )
+            return wxPoint(pos, 0);
+    }
+
+    return wxDefaultPosition;
+}
+
 int wxTextCtrl::GetNumberOfLines() const
 {
     if ( IsMultiLine() )
diff --git a/src/msw/textctrl.cpp b/src/msw/textctrl.cpp
index b4b0cff..76666e9 100644
--- a/src/msw/textctrl.cpp
+++ b/src/msw/textctrl.cpp
@@ -1489,6 +1489,41 @@ bool wxTextCtrl::PositionToXY(long pos, long *x, long *y) const
     return rc;
 }
 
+wxPoint wxTextCtrl::PositionToCoords(long pos) const
+{
+    // FIXME: This code is broken for rich edit version 2.0 as it uses the same
+    // API as plain edit i.e. the coordinates are returned directly instead of
+    // filling the POINT passed as WPARAM with them but we can't distinguish
+    // between 2.0 and 3.0 unfortunately (see also the use of EM_POSFROMCHAR
+    // above).
+#if wxUSE_RICHEDIT
+    if ( IsRich() )
+    {
+        POINT pt;
+        LRESULT rc = ::SendMessage(GetHwnd(), EM_POSFROMCHAR, (WPARAM)&pt, pos);
+        if ( rc != -1 )
+            return wxPoint(pt.x, pt.y);
+    }
+    else
+#endif // wxUSE_RICHEDIT
+    {
+        LRESULT rc = ::SendMessage(GetHwnd(), EM_POSFROMCHAR, pos, 0);
+
+        if ( rc != -1 )
+        {
+            // Notice that {LO,HI}WORD macros return WORDs, i.e. unsigned
+            // shorts, while we want to have signed values here (the y
+            // coordinate of any position above the first currently visible
+            // line is negative, for example), hence the need for casts.
+            return wxPoint(static_cast<short>(LOWORD(rc)),
+                           static_cast<short>(HIWORD(rc)));
+        }
+    }
+
+    return wxDefaultPosition;
+}
+
+
 // ----------------------------------------------------------------------------
 //
 // ----------------------------------------------------------------------------
diff --git a/tests/controls/textctrltest.cpp b/tests/controls/textctrltest.cpp
index 24213ce..620586d 100644
--- a/tests/controls/textctrltest.cpp
+++ b/tests/controls/textctrltest.cpp
@@ -59,6 +59,7 @@ class TextCtrlTestCase : public TextEntryTestCase, public CppUnit::TestCase
         CPPUNIT_TEST( Style );
         CPPUNIT_TEST( Lines );
         CPPUNIT_TEST( LogTextCtrl );
+        CPPUNIT_TEST( PositionToCoords );
     CPPUNIT_TEST_SUITE_END();
 
     void MultiLineReplace();
@@ -71,6 +72,7 @@ class TextCtrlTestCase : public TextEntryTestCase, public CppUnit::TestCase
     void Style();
     void Lines();
     void LogTextCtrl();
+    void PositionToCoords();
 
     wxTextCtrl *m_text;
 
@@ -422,4 +424,22 @@ void TextCtrlTestCase::LogTextCtrl()
     CPPUNIT_ASSERT(!m_text->IsEmpty());
 }
 
+void TextCtrlTestCase::PositionToCoords()
+{
+#if defined(__WXMSW__) || defined(__WXGTK20__)
+    delete m_text;
+    m_text = new wxTextCtrl(wxTheApp->GetTopWindow(), wxID_ANY, "",
+                            wxDefaultPosition, wxSize(400, 200),
+                            wxTE_MULTILINE);
+
+    m_text->SetInsertionPoint(0);
+
+    wxPoint p = m_text->PositionToCoords(m_text->GetInsertionPoint());
+
+    CPPUNIT_ASSERT(p.x != -1);
+    CPPUNIT_ASSERT(p.y != -1);
+#endif
+}
+
+
 #endif //wxUSE_TEXTCTRL

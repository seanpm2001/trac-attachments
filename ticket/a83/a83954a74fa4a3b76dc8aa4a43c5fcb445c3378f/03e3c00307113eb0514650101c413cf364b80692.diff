Index: include/wx/protocol/http.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/protocol/http.h,v
retrieving revision 1.19
diff -u -r1.19 http.h
--- include/wx/protocol/http.h	2004/05/23 20:51:44	1.19
+++ include/wx/protocol/http.h	2005/12/15 08:13:27
@@ -2,7 +2,7 @@
 // Name:        http.h
 // Purpose:     HTTP protocol
 // Author:      Guilhem Lavaux
-// Modified by:
+// Modified by: Simo Virokannas (authentication, Dec 2005)
 // Created:     August 1997
 // RCS-ID:      $Id: http.h,v 1.19 2004/05/23 20:51:44 JS Exp $
 // Copyright:   (c) 1997, 1998 Guilhem Lavaux
@@ -43,6 +43,9 @@
 
   int GetResponse() { return m_http_response; }
 
+  virtual void SetUser(const wxString& user) { m_username = user; }
+  virtual void SetPassword(const wxString& passwd ) { m_password = passwd; }
+
 protected:
   enum wxHTTP_Req
   {
@@ -58,6 +61,8 @@
   void SendHeaders();
   bool ParseHeaders();
 
+  wxString GenerateAuthString(const wxString& user, const wxString& pass) const;
+
   // find the header in m_headers
   wxHeaderIterator FindHeader(const wxString& header);
   wxHeaderConstIterator FindHeader(const wxString& header) const;
@@ -72,6 +77,8 @@
   wxSockAddress *m_addr;
   wxString m_post_buf;
   int m_http_response;
+  wxString m_username;
+  wxString m_password;
 
   DECLARE_DYNAMIC_CLASS(wxHTTP)
   DECLARE_PROTOCOL(wxHTTP)
Index: src/common/http.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/http.cpp,v
retrieving revision 1.77
diff -u -r1.77 http.cpp
--- src/common/http.cpp	2005/10/08 16:54:43	1.77
+++ src/common/http.cpp	2005/12/15 08:13:30
@@ -2,7 +2,7 @@
 // Name:        http.cpp
 // Purpose:     HTTP protocol
 // Author:      Guilhem Lavaux
-// Modified by:
+// Modified by: Simo Virokannas (authentication, Dec 2005)
 // Created:     August 1997
 // RCS-ID:      $Id: http.cpp,v 1.77 2005/10/08 16:54:43 VZ Exp $
 // Copyright:   (c) 1997, 1998 Guilhem Lavaux
@@ -115,6 +115,38 @@
     return it == m_headers.end() ? wxGetEmptyString() : it->second;
 }
 
+wxString wxHTTP::GenerateAuthString(const wxString& user, const wxString& pass) const
+{
+    static const char *base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+
+    wxString buf;
+    wxString toencode;
+
+    buf.Printf(wxT("Basic "));
+
+    toencode.Printf(wxT("%s:%s"),user.c_str(),pass.c_str());
+
+    size_t len = toencode.Length();
+    const wxChar *from = toencode.c_str();
+    while (len >= 3) { // encode full blocks first
+        buf << wxString::Format(wxT("%c%c"), base64[(from[0] >> 2) & 0x3f], base64[((from[0] << 4) & 0x30) | ((from[1] >> 4) & 0xf)]);
+        buf << wxString::Format(wxT("%c%c"), base64[((from[1] << 2) & 0x3c) | ((from[2] >> 6) & 0x3)], base64[from[2] & 0x3f]);
+        from += 3;
+        len -= 3;
+    }
+    if (len > 0) { // pad the remaining characters
+        buf << wxString::Format(wxT("%c"), base64[(from[0] >> 2) & 0x3f]);
+        if (len == 1) {
+            buf << wxString::Format(wxT("%c="), base64[(from[0] << 4) & 0x30]);
+        } else {
+            buf << wxString::Format(wxT("%c%c"), base64[(from[0] << 4) & 0x30] + ((from[1] >> 4) & 0xf), base64[(from[1] << 2) & 0x3c]);
+        }
+        buf << wxString::Format(wxT("="));
+    }
+
+    return buf;
+}
+
 void wxHTTP::SetPostBuffer(const wxString& post_buf)
 {
     m_post_buf = post_buf;
@@ -227,6 +259,11 @@
     // If there is no User-Agent defined, define it.
     if (GetHeader(wxT("User-Agent")).IsNull())
         SetHeader(wxT("User-Agent"), wxT("wxWidgets 2.x"));
+
+    // Send authentication information
+    if (m_username.Length()>0 || m_password.Length()>0) {
+        SetHeader(wxT("Authorization"), GenerateAuthString(m_username, m_password));
+    }
 
     SaveState();
 

 	  	 

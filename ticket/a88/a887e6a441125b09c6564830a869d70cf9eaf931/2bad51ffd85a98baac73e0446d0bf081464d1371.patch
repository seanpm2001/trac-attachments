diff -ru wxWidgets.orig/include/wx/generic/progdlgg.h wxWidgets/include/wx/generic/progdlgg.h
--- wxWidgets.orig/include/wx/generic/progdlgg.h	2007-11-10 23:07:45.000000000 +0100
+++ wxWidgets/include/wx/generic/progdlgg.h	2007-11-11 21:32:04.000000000 +0100
@@ -26,6 +26,94 @@
 /* Progress dialog which shows a moving progress bar.
     Taken from the Mahogany project.*/
 
+class WXDLLEXPORT wxProgressPanel : public wxPanel
+{
+public:
+    // the status bar
+    wxGauge *m_gauge;
+    // the message displayed
+    wxStaticText *m_msg;
+    // displayed elapsed, estimated, remaining time
+    wxStaticText *m_elapsed,
+                 *m_estimated,
+                 *m_remaining;
+
+    // time when the dialog was created
+    unsigned long m_timeStart;
+    // time when the dialog was closed or cancelled
+    unsigned long m_timeStop;
+    // time between the moment the dialog was closed/cancelled and resume
+    unsigned long m_break;
+
+    // the maximum value
+    int m_maximum;
+
+    // saves the time when elapsed time was updated so there is only one
+    // update per second
+    unsigned long m_last_timeupdate;
+    // tells how often a change of the estimated time has to be confirmed
+    // before it is actually displayed - this reduces the frequence of updates
+    // of estimated and remaining time
+    const int m_delay;
+    // counts the confirmations
+    int m_ctdelay;
+    unsigned long m_display_estimated;
+
+    // continue processing or not (return value for Update())
+    enum
+    {
+        Uncancelable = -1,   // dialog can't be canceled
+        Canceled,            // can be cancelled and, in fact, was
+        Continue,            // can be cancelled but wasn't
+        Finished             // finished, waiting to be removed from screen
+    } m_state;
+
+    // skip some portion
+    bool m_skip;
+
+#if defined(__WXMSW__ ) || defined(__WXPM__)
+    // the factor we use to always keep the value in 16 bit range as the native
+    // control only supports ranges from 0 to 65,535
+    size_t m_factor;
+#endif // __WXMSW__
+
+    wxProgressPanel();
+    void Init(const wxString& message, int style);
+
+    // create the label with given text and another one to show the time nearby
+    // as the next windows in the sizer, returns the created control
+    wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);
+
+    // updates the label message
+    void UpdateMessage(const wxString &newmsg);
+    void Resume();
+    bool OnCancel(void);
+    void OnSkip(void);
+    bool OnClose(bool* veto);
+
+    // shortcuts for enabling buttons
+    virtual void EnableClose() {}
+    virtual void EnableSkip(bool enable = true);
+    virtual void EnableAbort(bool enable = true);
+    virtual bool EnableCloseButton(bool enable = true);
+    virtual void ShowModal(void) {}
+    virtual void ReenableOtherWindows(void) {}
+    
+    /* Switches the dialog to use a gauge in indeterminate mode and calls
+       wxGauge::Pulse() to show to the user a bit of progress */
+    virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool *skip = NULL);
+    virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
+    // Must provide overload to avoid hiding it (and warnings about it)
+    virtual void Update() { wxPanel::Update(); }
+
+protected:
+    // common part of Update() and Pulse(), returns true if not cancelled
+    bool DoAfterUpdate(bool *skip);
+
+    DECLARE_EVENT_TABLE()
+    DECLARE_NO_COPY_CLASS(wxProgressPanel)
+};
+
 class WXDLLEXPORT wxProgressDialog : public wxDialog
 {
 DECLARE_DYNAMIC_CLASS(wxProgressDialog)
@@ -43,7 +131,7 @@
                      wxWindow *parent = NULL,
                      int style = wxPD_APP_MODAL | wxPD_AUTO_HIDE);
     /* Destructor.
-        Re-enables event handling for other windows.
+       Re-enables event handling for other windows.
     */
     virtual ~wxProgressDialog();
 
@@ -65,9 +153,14 @@
        the program decided to continue the operation (e.g., user didn't
        confirm it)
     */
+    // updates the label message
+    void UpdateMessage(const wxString &newmsg);
     void Resume();
 
     virtual bool Show( bool show = true );
+    virtual void EnableSkip(bool enable=true);
+    virtual void EnableAbort(bool enable=true);
+    virtual void EnableClose();
 
 protected:
     // callback for optional abort button
@@ -83,88 +176,28 @@
     // the dialog was shown
     void ReenableOtherWindows();
 
+    wxProgressPanel* m_panel;
 private:
-    // create the label with given text and another one to show the time nearby
-    // as the next windows in the sizer, returns the created control
-    wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);
-
-    // updates the label message
-    void UpdateMessage(const wxString &newmsg);
-
-    // common part of Update() and Pulse(), returns true if not cancelled
-    bool DoAfterUpdate(bool *skip);
-
-    // shortcuts for enabling buttons
-    void EnableClose();
-    void EnableSkip(bool enable=true);
-    void EnableAbort(bool enable=true);
-    inline void DisableSkip() { EnableSkip(false); }
-    inline void DisableAbort() { EnableAbort(false); }
-
-    // the status bar
-    wxGauge *m_gauge;
-    // the message displayed
-    wxStaticText *m_msg;
-    // displayed elapsed, estimated, remaining time
-    wxStaticText *m_elapsed,
-                 *m_estimated,
-                 *m_remaining;
-    // time when the dialog was created
-    unsigned long m_timeStart;
-    // time when the dialog was closed or cancelled
-    unsigned long m_timeStop;
-    // time between the moment the dialog was closed/cancelled and resume
-    unsigned long m_break;
 
     // parent top level window (may be NULL)
     wxWindow *m_parentTop;
 
-    // continue processing or not (return value for Update())
-    enum
-    {
-        Uncancelable = -1,   // dialog can't be canceled
-        Canceled,            // can be cancelled and, in fact, was
-        Continue,            // can be cancelled but wasn't
-        Finished             // finished, waiting to be removed from screen
-    } m_state;
-
-    // skip some portion
-    bool m_skip;
-
 #if !defined(__SMARTPHONE__)
     // the abort and skip buttons (or NULL if none)
     wxButton *m_btnAbort;
     wxButton *m_btnSkip;
 #endif
-
-    // the maximum value
-    int m_maximum;
-
-    // saves the time when elapsed time was updated so there is only one
-    // update per second
-    unsigned long m_last_timeupdate;
-    // tells how often a change of the estimated time has to be confirmed
-    // before it is actually displayed - this reduces the frequence of updates
-    // of estimated and remaining time
-    const int m_delay;
-    // counts the confirmations
-    int m_ctdelay;
-    unsigned long m_display_estimated;
-
     bool m_hasAbortButton,
          m_hasSkipButton;
 
-#if defined(__WXMSW__ ) || defined(__WXPM__)
-    // the factor we use to always keep the value in 16 bit range as the native
-    // control only supports ranges from 0 to 65,535
-    size_t m_factor;
-#endif // __WXMSW__
-
     // for wxPD_APP_MODAL case
     class WXDLLIMPEXP_FWD_CORE wxWindowDisabler *m_winDisabler;
 
     DECLARE_EVENT_TABLE()
     DECLARE_NO_COPY_CLASS(wxProgressDialog)
+
+    friend class wxProgressPanel;
+    friend class wxProgressPanelImpl;
 };
 
 #endif // wxUSE_PROGRESSDLG
diff -ru wxWidgets.orig/src/generic/progdlgg.cpp wxWidgets/src/generic/progdlgg.cpp
--- wxWidgets.orig/src/generic/progdlgg.cpp	2007-11-10 00:31:56.000000000 +0100
+++ wxWidgets/src/generic/progdlgg.cpp	2007-11-11 21:35:47.000000000 +0100
@@ -72,64 +72,24 @@
 static void SetTimeLabel(unsigned long val, wxStaticText *label);
 
 // ----------------------------------------------------------------------------
-// event tables
+// wxProgressPanel
 // ----------------------------------------------------------------------------
 
-BEGIN_EVENT_TABLE(wxProgressDialog, wxDialog)
-    EVT_BUTTON(wxID_CANCEL, wxProgressDialog::OnCancel)
-    EVT_BUTTON(wxID_SKIP, wxProgressDialog::OnSkip)
-
-    EVT_CLOSE(wxProgressDialog::OnClose)
+BEGIN_EVENT_TABLE(wxProgressPanel, wxPanel)
 END_EVENT_TABLE()
 
-IMPLEMENT_CLASS(wxProgressDialog, wxDialog)
-
-// ============================================================================
-// wxProgressDialog implementation
-// ============================================================================
-
-// ----------------------------------------------------------------------------
-// wxProgressDialog creation
-// ----------------------------------------------------------------------------
-
-wxProgressDialog::wxProgressDialog(const wxString& title,
-                                   const wxString& message,
-                                   int maximum,
-                                   wxWindow *parent,
-                                   int style)
-                : wxDialog(GetParentForModalDialog(parent), wxID_ANY, title),
-                  m_skip(false),
-                  m_delay(3),
-                  m_hasAbortButton(false),
-                  m_hasSkipButton(false)
+wxProgressPanel::wxProgressPanel() : wxPanel(), m_skip(false), m_delay(3)
 {
-    // we may disappear at any moment, let the others know about it
-    SetExtraStyle(GetExtraStyle() | wxWS_EX_TRANSIENT);
-    m_windowStyle |= style;
-
-    m_hasAbortButton = (style & wxPD_CAN_ABORT) != 0;
-    m_hasSkipButton = (style & wxPD_CAN_SKIP) != 0;
-
-    bool isPda = (wxSystemSettings::GetScreenType() <= wxSYS_SCREEN_PDA);
-
-#if defined(__WXMSW__) && !defined(__WXUNIVERSAL__)
-    // we have to remove the "Close" button from the title bar then as it is
-    // confusing to have it - it doesn't work anyhow
-    //
-    // FIXME: should probably have a (extended?) window style for this
-    if ( !m_hasAbortButton )
-    {
-        EnableCloseButton(false);
-    }
-#endif // wxMSW
-
-#if defined(__SMARTPHONE__)
-    SetLeftMenu();
-#endif
-
-    m_state = m_hasAbortButton ? Continue : Uncancelable;
-    m_maximum = maximum;
+    // create the estimated/remaining/total time zones if requested
+    m_msg = m_elapsed = m_estimated = m_remaining = (wxStaticText*)NULL;
+    m_display_estimated = m_last_timeupdate = m_break = 0;
+    m_ctdelay = 0;
+    m_gauge = (wxGauge*)NULL;
+    m_state = Continue;
+}
 
+void wxProgressPanel::Init(const wxString& message, int style)
+{
 #if defined(__WXMSW__) || defined(__WXPM__)
     // we can't have values > 65,536 in the progress control under Windows, so
     // scale everything down
@@ -137,23 +97,14 @@
     m_maximum /= m_factor;
 #endif // __WXMSW__
 
-    m_parentTop = wxGetTopLevelParent(parent);
-
-    wxClientDC dc(this);
-    dc.SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
-    wxCoord widthText = 0;
-    dc.GetTextExtent(message, &widthText, NULL, NULL, NULL, NULL);
-
     wxSizer* sizer = new wxBoxSizer(wxVERTICAL);
 
     m_msg = new wxStaticText(this, wxID_ANY, message);
     sizer->Add(m_msg, 0, wxLEFT | wxTOP, 2*LAYOUT_MARGIN);
 
-    wxSize sizeDlg,
-           sizeLabel = m_msg->GetSize();
-    sizeDlg.y = 2*LAYOUT_MARGIN + sizeLabel.y;
+    wxSize sizeLabel = m_msg->GetSize();
 
-    if ( maximum > 0 )
+    if ( m_maximum > 0 )
     {
         int gauge_style = wxGA_HORIZONTAL;
         if ( ( style & wxPD_SMOOTH ) == wxPD_SMOOTH )
@@ -164,138 +115,40 @@
 
         sizer->Add(m_gauge, 0, wxLEFT | wxRIGHT | wxTOP | wxEXPAND, 2*LAYOUT_MARGIN);
         m_gauge->SetValue(0);
-
-        wxSize sizeGauge = m_gauge->GetSize();
-        sizeDlg.y += 2*LAYOUT_MARGIN + sizeGauge.y;
     }
     else
         m_gauge = (wxGauge *)NULL;
 
-    // create the estimated/remaining/total time zones if requested
-    m_elapsed = m_estimated = m_remaining = (wxStaticText*)NULL;
-    m_display_estimated = m_last_timeupdate = m_break = 0;
-    m_ctdelay = 0;
-
-    // if we are going to have at least one label, remember it in this var
-    wxStaticText *label = NULL;
-
-    // also count how many labels we really have
-    size_t nTimeLabels = 0;
-
-    wxSizer* flex = new wxFlexGridSizer(2);
+    wxSizer* flex = new wxFlexGridSizer(2, LAYOUT_MARGIN, LAYOUT_MARGIN);
 
     if ( style & wxPD_ELAPSED_TIME )
     {
-        nTimeLabels++;
-
-        label =
         m_elapsed = CreateLabel(_("Elapsed time:"), flex);
     }
 
     if ( style & wxPD_ESTIMATED_TIME )
     {
-        nTimeLabels++;
-
-        label =
         m_estimated = CreateLabel(_("Estimated time:"), flex);
     }
 
     if ( style & wxPD_REMAINING_TIME )
     {
-        nTimeLabels++;
-
-        label =
         m_remaining = CreateLabel(_("Remaining time:"), flex);
     }
     sizer->Add(flex, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
+    SetSizer(sizer);
 
-    if ( nTimeLabels > 0 )
-    {
-        // set it to the current time
-        m_timeStart = wxGetCurrentTime();
-        sizeDlg.y += nTimeLabels * (label->GetSize().y + LAYOUT_MARGIN);
-    }
-
-#if defined(__SMARTPHONE__)
-    if ( m_hasSkipButton )
-        SetRightMenu(wxID_SKIP, _("Skip"));
-    if ( m_hasAbortButton )
-        SetLeftMenu(wxID_CANCEL);
-#else
-    m_btnAbort = m_btnSkip = (wxButton *)NULL;
-    bool sizeDlgModified = false;
-    wxBoxSizer *buttonSizer = new wxBoxSizer(wxHORIZONTAL);
-
-    const int sizerFlags =
-#if defined(__WXMSW__) || defined(__WXPM__)
-                           wxALIGN_RIGHT | wxALL
-#else // !MSW
-                           wxALIGN_CENTER_HORIZONTAL | wxBOTTOM | wxTOP
-#endif // MSW/!MSW
-                           ;
-
-    if ( m_hasSkipButton )
-    {
-        m_btnSkip = new wxButton(this, wxID_SKIP, _("Skip"));
-
-        // Windows dialogs usually have buttons in the lower right corner
-        buttonSizer->Add(m_btnSkip, 0, sizerFlags, LAYOUT_MARGIN);
-        sizeDlg.y += 2*LAYOUT_MARGIN + wxButton::GetDefaultSize().y;
-        sizeDlgModified = true;
-    }
-
-    if ( m_hasAbortButton )
-    {
-        m_btnAbort = new wxButton(this, wxID_CANCEL);
-
-        // Windows dialogs usually have buttons in the lower right corner
-        buttonSizer->Add(m_btnAbort, 0, sizerFlags, LAYOUT_MARGIN);
-        if(!sizeDlgModified)
-            sizeDlg.y += 2*LAYOUT_MARGIN + wxButton::GetDefaultSize().y;
-    }
-
-    sizer->Add(buttonSizer, 0, sizerFlags, LAYOUT_MARGIN );
-#endif // __SMARTPHONE__/!__SMARTPHONE__
-
-    SetSizerAndFit(sizer);
-
-    if (!isPda)
-    {
-        sizeDlg.y += 2*LAYOUT_MARGIN;
-
-        // try to make the dialog not square but rectangular of reasonable width
-        sizeDlg.x = (wxCoord)wxMax(3*widthText/2, 4*sizeDlg.y/3);
-        SetClientSize(sizeDlg);
-    }
-
-    Centre(wxCENTER_FRAME | wxBOTH);
-
-    if ( style & wxPD_APP_MODAL )
-    {
-        m_winDisabler = new wxWindowDisabler(this);
-    }
-    else
-    {
-        if ( m_parentTop )
-            m_parentTop->Disable();
-        m_winDisabler = NULL;
-    }
-
-    Show();
-    Enable();
+    // set it to the current time
+    m_timeStart = wxGetCurrentTime();
 
     // this one can be initialized even if the others are unknown for now
-    //
-    // NB: do it after calling Layout() to keep the labels correctly aligned
     if ( m_elapsed )
     {
         SetTimeLabel(0, m_elapsed);
     }
-
-    Update();
 }
 
-wxStaticText *wxProgressDialog::CreateLabel(const wxString& text,
+wxStaticText *wxProgressPanel::CreateLabel(const wxString& text,
                                             wxSizer *sizer)
 {
     wxStaticText *dummy = new wxStaticText(this, wxID_ANY, text);
@@ -304,27 +157,32 @@
     // select placement most native or nice on target GUI
 #if defined(__SMARTPHONE__)
     // label and time to the left in two rows
-    sizer->Add(dummy, 1, wxALIGN_LEFT);
-    sizer->Add(label, 1, wxALIGN_LEFT);
+    sizer->Add(dummy, 1);
+    sizer->Add(label, 1);
 #elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
     // label and time centered in one row
-    sizer->Add(dummy, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT) | wxTOP | wxRIGHT, LAYOUT_MARGIN);
-    sizer->Add(label, 1, wxALIGN_LEFT | wxTOP, LAYOUT_MARGIN);
+    sizer->Add(dummy, 1);
+    sizer->Add(label, 1);
 #else
     // label and time to the right in one row
     sizer->Add(dummy);
-    sizer->Add(label, 0, wxLEFT, LAYOUT_MARGIN);
+    sizer->Add(label, 0);
 #endif
 
     return label;
 }
 
-// ----------------------------------------------------------------------------
-// wxProgressDialog operations
-// ----------------------------------------------------------------------------
+void wxProgressPanel::UpdateMessage(const wxString &newmsg)
+{
+    if ( !newmsg.empty() && newmsg != m_msg->GetLabel() )
+    {
+        m_msg->SetLabel(newmsg);
 
-bool
-wxProgressDialog::Update(int value, const wxString& newmsg, bool *skip)
+        wxYieldIfNeeded() ;
+    }
+}
+
+bool wxProgressPanel::Update(int value, const wxString& newmsg, bool *skip)
 {
     wxASSERT_MSG( value == -1 || m_gauge, wxT("cannot update non existent dialog") );
 
@@ -402,13 +260,13 @@
         // so that we return true below and that out [Cancel] handler knew what
         // to do
         m_state = Finished;
-        if( !(GetWindowStyle() & wxPD_AUTO_HIDE) )
+        if (!(GetWindowStyle() & wxPD_AUTO_HIDE))
         {
             EnableClose();
-            DisableSkip();
-#if defined(__WXMSW__) && !defined(__WXUNIVERSAL__)
+            EnableSkip(false);
+    #if defined(__WXMSW__) && !defined(__WXUNIVERSAL__)
             EnableCloseButton();
-#endif // __WXMSW__
+    #endif // __WXMSW__
 
             if ( newmsg.empty() )
             {
@@ -416,7 +274,7 @@
                 m_msg->SetLabel(_("Done."));
             }
 
-            wxYieldIfNeeded() ;
+            wxYieldIfNeeded();
 
             (void)ShowModal();
         }
@@ -441,7 +299,7 @@
     return m_state != Canceled;
 }
 
-bool wxProgressDialog::Pulse(const wxString& newmsg, bool *skip)
+bool wxProgressPanel::Pulse(const wxString& newmsg, bool *skip)
 {
     wxASSERT_MSG( m_gauge, wxT("cannot update non existent dialog") );
 
@@ -462,7 +320,7 @@
     return DoAfterUpdate(skip);
 }
 
-bool wxProgressDialog::DoAfterUpdate(bool *skip)
+bool wxProgressPanel::DoAfterUpdate(bool *skip)
 {
     // we have to yield because not only we want to update the display but
     // also to process the clicks on the cancel and skip buttons
@@ -480,39 +338,24 @@
     return m_state != Canceled;
 }
 
-void wxProgressDialog::Resume()
+void wxProgressPanel::Resume()
 {
     m_state = Continue;
     m_ctdelay = m_delay; // force an update of the elapsed/estimated/remaining time
     m_break += wxGetCurrentTime()-m_timeStop;
-
     EnableAbort();
     EnableSkip();
     m_skip = false;
 }
 
-bool wxProgressDialog::Show( bool show )
-{
-    // reenable other windows before hiding this one because otherwise
-    // Windows wouldn't give the focus back to the window which had
-    // been previously focused because it would still be disabled
-    if(!show)
-        ReenableOtherWindows();
-
-    return wxDialog::Show(show);
-}
-
-// ----------------------------------------------------------------------------
-// event handlers
-// ----------------------------------------------------------------------------
-
-void wxProgressDialog::OnCancel(wxCommandEvent& event)
+bool wxProgressPanel::OnCancel(void)
 {
+    bool processed = true;
     if ( m_state == Finished )
     {
         // this means that the count down is already finished and we're being
         // shown as a modal dialog - so just let the default handler do the job
-        event.Skip();
+        processed = false;
     }
     else
     {
@@ -522,41 +365,265 @@
 
         // update the buttons state immediately so that the user knows that the
         // request has been noticed
-        DisableAbort();
-        DisableSkip();
+        EnableAbort(false);
+        EnableSkip(false);
 
         // save the time when the dialog was stopped
         m_timeStop = wxGetCurrentTime();
     }
+    return processed;
 }
 
-void wxProgressDialog::OnSkip(wxCommandEvent& WXUNUSED(event))
+void wxProgressPanel::OnSkip(void)
 {
-    DisableSkip();
+    EnableSkip(false);
     m_skip = true;
 }
 
-void wxProgressDialog::OnClose(wxCloseEvent& event)
+bool wxProgressPanel::OnClose(bool* veto)
 {
+    bool processed = true;
+    *veto = false;
     if ( m_state == Uncancelable )
     {
         // can't close this dialog
-        event.Veto();
+        *veto = true;
     }
     else if ( m_state == Finished )
     {
         // let the default handler close the window as we already terminated
-        event.Skip();
+        processed = false;
     }
     else
     {
         // next Update() will notice it
         m_state = Canceled;
-        DisableAbort();
-        DisableSkip();
+        EnableAbort(false);
+        EnableSkip(false);
 
         m_timeStop = wxGetCurrentTime();
     }
+    return processed;
+}
+
+void wxProgressPanel::EnableSkip(bool WXUNUSED(enable))
+{
+}
+
+void wxProgressPanel::EnableAbort(bool WXUNUSED(enable))
+{
+}
+
+bool wxProgressPanel::EnableCloseButton(bool WXUNUSED(enable))
+{ 
+    return false;
+}
+
+// ----------------------------------------------------------------------------
+// wxProgressPanelImpl
+// ----------------------------------------------------------------------------
+
+class wxProgressPanelImpl : public wxProgressPanel
+{
+public:
+    wxProgressDialog* m_dlg;
+    wxProgressPanelImpl(wxProgressDialog* dlg) : wxProgressPanel(), m_dlg(dlg) {}
+    virtual void EnableClose() { m_dlg->EnableClose(); }
+    virtual void EnableSkip(bool enable) { m_dlg->EnableSkip(enable); }
+    virtual void EnableAbort(bool enable) { m_dlg->EnableAbort(enable); }
+    virtual bool EnableCloseButton(bool enable) { return m_dlg->EnableCloseButton(enable); }
+    virtual void ShowModal(void) { m_dlg->ShowModal(); }
+    virtual void ReenableOtherWindows(void) { m_dlg->ReenableOtherWindows(); }
+};
+
+IMPLEMENT_CLASS(wxProgressDialog, wxDialog)
+
+// ============================================================================
+// wxProgressDialog implementation
+// ============================================================================
+
+BEGIN_EVENT_TABLE(wxProgressDialog, wxDialog)
+    EVT_BUTTON(wxID_CANCEL, wxProgressDialog::OnCancel)
+    EVT_BUTTON(wxID_SKIP, wxProgressDialog::OnSkip)
+    EVT_CLOSE(wxProgressDialog::OnClose)
+END_EVENT_TABLE()
+
+// ----------------------------------------------------------------------------
+// wxProgressDialog creation
+// ----------------------------------------------------------------------------
+
+wxProgressDialog::wxProgressDialog(const wxString& title,
+                                   const wxString& message,
+                                   int maximum,
+                                   wxWindow *parent,
+                                   int style)
+                : wxDialog(GetParentForModalDialog(parent), wxID_ANY, title, wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER),
+                  m_hasAbortButton(false),
+                  m_hasSkipButton(false)
+{
+    // we may disappear at any moment, let the others know about it
+    SetExtraStyle(GetExtraStyle() | wxWS_EX_TRANSIENT);
+    m_windowStyle |= style;
+
+    m_hasAbortButton = (style & wxPD_CAN_ABORT) != 0;
+    m_hasSkipButton = (style & wxPD_CAN_SKIP) != 0;
+
+    bool isPda = (wxSystemSettings::GetScreenType() <= wxSYS_SCREEN_PDA);
+
+#if defined(__WXMSW__) && !defined(__WXUNIVERSAL__)
+    // we have to remove the "Close" button from the title bar then as it is
+    // confusing to have it - it doesn't work anyhow
+    //
+    // FIXME: should probably have a (extended?) window style for this
+    if ( !m_hasAbortButton )
+    {
+        EnableCloseButton(false);
+    }
+#endif // wxMSW
+
+#if defined(__SMARTPHONE__)
+    SetLeftMenu();
+#endif
+
+    m_parentTop = wxGetTopLevelParent(parent);
+
+    m_panel = new wxProgressPanelImpl(this);
+    m_panel->m_state = m_hasAbortButton ? wxProgressPanel::Continue : wxProgressPanel::Uncancelable;    
+    m_panel->m_maximum = maximum;
+
+    wxSizer* sizer = new wxBoxSizer(wxVERTICAL);
+
+    m_panel->Create(this);
+    m_panel->Init(message, style);
+    wxSize sizeDlg(0,0);
+    sizeDlg.y += m_panel->GetSize().y + LAYOUT_MARGIN;
+    
+    wxClientDC dc(this);
+    dc.SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
+    wxCoord widthText = 0;
+    dc.GetTextExtent(message, &widthText, NULL, NULL, NULL, NULL);
+
+#if defined(__SMARTPHONE__)
+    if ( m_hasSkipButton )
+        SetRightMenu(wxID_SKIP, _("Skip"));
+    if ( m_hasAbortButton )
+        SetLeftMenu(wxID_CANCEL);
+#else
+    m_btnAbort = m_btnSkip = (wxButton *)NULL;
+    bool sizeDlgModified = false;
+    wxBoxSizer *buttonSizer = new wxBoxSizer(wxHORIZONTAL);
+
+    const int sizerFlags =
+#if defined(__WXMSW__) || defined(__WXPM__)
+                           wxALIGN_RIGHT | wxALL
+#else // !MSW
+                           wxALIGN_CENTER_HORIZONTAL | wxBOTTOM | wxTOP
+#endif // MSW/!MSW
+                           ;
+
+    if ( m_hasSkipButton )
+    {
+        m_btnSkip = new wxButton(this, wxID_SKIP, _("Skip"));
+
+        // Windows dialogs usually have buttons in the lower right corner
+        buttonSizer->Add(m_btnSkip, 0, sizerFlags, LAYOUT_MARGIN);
+        sizeDlg.y += 2*LAYOUT_MARGIN + wxButton::GetDefaultSize().y;
+        sizeDlgModified = true;
+    }
+
+    if ( m_hasAbortButton )
+    {
+        m_btnAbort = new wxButton(this, wxID_CANCEL);
+
+        // Windows dialogs usually have buttons in the lower right corner
+        buttonSizer->Add(m_btnAbort, 0, sizerFlags, LAYOUT_MARGIN);
+        if(!sizeDlgModified)
+            sizeDlg.y += 2*LAYOUT_MARGIN + wxButton::GetDefaultSize().y;
+    }
+
+    sizer->Add(m_panel, 0, wxEXPAND);
+    sizer->Add(buttonSizer, 0, sizerFlags, LAYOUT_MARGIN );
+#endif // __SMARTPHONE__/!__SMARTPHONE__
+
+    SetSizerAndFit(sizer);
+
+    if (!isPda)
+    {
+        sizeDlg.y += 2*LAYOUT_MARGIN;
+
+        // try to make the dialog not square but rectangular of reasonable width
+        sizeDlg.x = (wxCoord)wxMax(3*widthText/2, 4*sizeDlg.y/3);
+        SetClientSize(sizeDlg);
+    }
+
+    Centre(wxCENTER_FRAME | wxBOTH);
+
+    if ( style & wxPD_APP_MODAL )
+    {
+        m_winDisabler = new wxWindowDisabler(this);
+    }
+    else
+    {
+        if ( m_parentTop )
+            m_parentTop->Disable();
+        m_winDisabler = NULL;
+    }
+
+    Show();
+    Enable();
+
+    Update();
+}
+
+// ----------------------------------------------------------------------------
+// wxProgressDialog operations
+// ----------------------------------------------------------------------------
+
+bool wxProgressDialog::Update(int value, const wxString& newmsg, bool *skip)
+{
+    return m_panel->Update(value, newmsg, skip);
+}
+
+bool wxProgressDialog::Pulse(const wxString& newmsg, bool *skip)
+{
+    return m_panel->Pulse(newmsg, skip);
+}
+
+void wxProgressDialog::Resume()
+{
+    m_panel->Resume();
+}
+
+bool wxProgressDialog::Show( bool show )
+{
+    // reenable other windows before hiding this one because otherwise
+    // Windows wouldn't give the focus back to the window which had
+    // been previously focused because it would still be disabled
+    if(!show)
+        ReenableOtherWindows();
+
+    return wxDialog::Show(show);
+}
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void wxProgressDialog::OnCancel(wxCommandEvent& event)
+{
+    if (!m_panel->OnCancel()) event.Skip();
+}
+
+void wxProgressDialog::OnSkip(wxCommandEvent& WXUNUSED(event))
+{
+    m_panel->OnSkip();
+}
+
+void wxProgressDialog::OnClose(wxCloseEvent& event)
+{
+    bool veto;
+    if (!m_panel->OnClose(&veto)) event.Skip();
+    if (veto) event.Veto();
 }
 
 // ----------------------------------------------------------------------------
@@ -660,12 +727,7 @@
 
 void wxProgressDialog::UpdateMessage(const wxString &newmsg)
 {
-    if ( !newmsg.empty() && newmsg != m_msg->GetLabel() )
-    {
-        m_msg->SetLabel(newmsg);
-
-        wxYieldIfNeeded() ;
-    }
+    m_panel->UpdateMessage(newmsg);
 }
 
 #endif // wxUSE_PROGRESSDLG

 	  	 

diff -ru wxWidgets.orig/include/wx/generic/progdlgg.h wxWidgets/include/wx/generic/progdlgg.h
--- wxWidgets.orig/include/wx/generic/progdlgg.h	2007-11-08 04:54:04.000000000 +0100
+++ wxWidgets/include/wx/generic/progdlgg.h	2007-11-10 23:07:45.937500000 +0100
@@ -30,29 +30,29 @@
 {
 DECLARE_DYNAMIC_CLASS(wxProgressDialog)
 public:
-   /* Creates and displays dialog, disables event handling for other
+    /* Creates and displays dialog, disables event handling for other
        frames or parent frame to avoid recursion problems.
        @param title title for window
        @param message message to display in window
        @param maximum value for status bar, if <= 0, no bar is shown
        @param parent window or NULL
        @param style is the bit mask of wxPD_XXX constants from wx/defs.h
-   */
-   wxProgressDialog(const wxString &title, wxString const &message,
-                    int maximum = 100,
-                    wxWindow *parent = NULL,
-                    int style = wxPD_APP_MODAL | wxPD_AUTO_HIDE);
-   /* Destructor.
-       Re-enables event handling for other windows.
-   */
-   virtual ~wxProgressDialog();
+    */
+    wxProgressDialog(const wxString& title, const wxString& message,
+                     int maximum = 100,
+                     wxWindow *parent = NULL,
+                     int style = wxPD_APP_MODAL | wxPD_AUTO_HIDE);
+    /* Destructor.
+        Re-enables event handling for other windows.
+    */
+    virtual ~wxProgressDialog();
 
-   /* Update the status bar to the new value.
+    /* Update the status bar to the new value.
        @param value new value
        @param newmsg if used, new message to display
        @returns true if ABORT button has not been pressed
-   */
-   virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
+    */
+    virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
 
     /* Switches the dialog to use a gauge in indeterminate mode and calls
        wxGauge::Pulse() to show to the user a bit of progress */
@@ -61,63 +61,63 @@
     // Must provide overload to avoid hiding it (and warnings about it)
     virtual void Update() { wxDialog::Update(); }
 
-   /* Can be called to continue after the cancel button has been pressed, but
+    /* Can be called to continue after the cancel button has been pressed, but
        the program decided to continue the operation (e.g., user didn't
        confirm it)
-   */
-   void Resume();
+    */
+    void Resume();
 
-   virtual bool Show( bool show = true );
+    virtual bool Show( bool show = true );
 
 protected:
-   // callback for optional abort button
-   void OnCancel(wxCommandEvent& event);
+    // callback for optional abort button
+    void OnCancel(wxCommandEvent&);
 
-   // callback for optional skip button
-   void OnSkip(wxCommandEvent& event);
+    // callback for optional skip button
+    void OnSkip(wxCommandEvent&);
 
-   // callback to disable "hard" window closing
-   void OnClose(wxCloseEvent& event);
+    // callback to disable "hard" window closing
+    void OnClose(wxCloseEvent&);
 
-   // must be called to reenable the other windows temporarily disabled while
-   // the dialog was shown
-   void ReenableOtherWindows();
+    // must be called to reenable the other windows temporarily disabled while
+    // the dialog was shown
+    void ReenableOtherWindows();
 
 private:
-   // create the label with given text and another one to show the time nearby
-   // as the next windows in the sizer, returns the created control
-   wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);
+    // create the label with given text and another one to show the time nearby
+    // as the next windows in the sizer, returns the created control
+    wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);
 
     // updates the label message
-   void UpdateMessage(const wxString &newmsg);
+    void UpdateMessage(const wxString &newmsg);
 
-   // common part of Update() and Pulse(), returns true if not cancelled
-   bool DoAfterUpdate(bool *skip);
+    // common part of Update() and Pulse(), returns true if not cancelled
+    bool DoAfterUpdate(bool *skip);
 
-   // shortcuts for enabling buttons
-   void EnableClose();
-   void EnableSkip(bool enable=true);
-   void EnableAbort(bool enable=true);
-   inline void DisableSkip() { EnableSkip(false); }
-   inline void DisableAbort() { EnableAbort(false); }
-
-   // the status bar
-   wxGauge *m_gauge;
-   // the message displayed
-   wxStaticText *m_msg;
-   // displayed elapsed, estimated, remaining time
-   class wxStaticText *m_elapsed,
-                      *m_estimated,
-                      *m_remaining;
-   // time when the dialog was created
-   unsigned long m_timeStart;
-   // time when the dialog was closed or cancelled
-   unsigned long m_timeStop;
-   // time between the moment the dialog was closed/cancelled and resume
-   unsigned long m_break;
+    // shortcuts for enabling buttons
+    void EnableClose();
+    void EnableSkip(bool enable=true);
+    void EnableAbort(bool enable=true);
+    inline void DisableSkip() { EnableSkip(false); }
+    inline void DisableAbort() { EnableAbort(false); }
+
+    // the status bar
+    wxGauge *m_gauge;
+    // the message displayed
+    wxStaticText *m_msg;
+    // displayed elapsed, estimated, remaining time
+    wxStaticText *m_elapsed,
+                 *m_estimated,
+                 *m_remaining;
+    // time when the dialog was created
+    unsigned long m_timeStart;
+    // time when the dialog was closed or cancelled
+    unsigned long m_timeStop;
+    // time between the moment the dialog was closed/cancelled and resume
+    unsigned long m_break;
 
-   // parent top level window (may be NULL)
-   wxWindow *m_parentTop;
+    // parent top level window (may be NULL)
+    wxWindow *m_parentTop;
 
     // continue processing or not (return value for Update())
     enum
diff -ru wxWidgets.orig/src/generic/progdlgg.cpp wxWidgets/src/generic/progdlgg.cpp
--- wxWidgets.orig/src/generic/progdlgg.cpp	2007-11-08 04:54:00.000000000 +0100
+++ wxWidgets/src/generic/progdlgg.cpp	2007-11-10 00:31:56.000000000 +0100
@@ -92,8 +92,8 @@
 // wxProgressDialog creation
 // ----------------------------------------------------------------------------
 
-wxProgressDialog::wxProgressDialog(wxString const &title,
-                                   wxString const &message,
+wxProgressDialog::wxProgressDialog(const wxString& title,
+                                   const wxString& message,
                                    int maximum,
                                    wxWindow *parent,
                                    int style)
@@ -144,7 +144,7 @@
     wxCoord widthText = 0;
     dc.GetTextExtent(message, &widthText, NULL, NULL, NULL, NULL);
 
-    wxBoxSizer *sizer = new wxBoxSizer(wxVERTICAL);
+    wxSizer* sizer = new wxBoxSizer(wxVERTICAL);
 
     m_msg = new wxStaticText(this, wxID_ANY, message);
     sizer->Add(m_msg, 0, wxLEFT | wxTOP, 2*LAYOUT_MARGIN);
@@ -182,12 +182,14 @@
     // also count how many labels we really have
     size_t nTimeLabels = 0;
 
+    wxSizer* flex = new wxFlexGridSizer(2);
+
     if ( style & wxPD_ELAPSED_TIME )
     {
         nTimeLabels++;
 
         label =
-        m_elapsed = CreateLabel(_("Elapsed time : "), sizer);
+        m_elapsed = CreateLabel(_("Elapsed time:"), flex);
     }
 
     if ( style & wxPD_ESTIMATED_TIME )
@@ -195,7 +197,7 @@
         nTimeLabels++;
 
         label =
-        m_estimated = CreateLabel(_("Estimated time : "), sizer);
+        m_estimated = CreateLabel(_("Estimated time:"), flex);
     }
 
     if ( style & wxPD_REMAINING_TIME )
@@ -203,8 +205,9 @@
         nTimeLabels++;
 
         label =
-        m_remaining = CreateLabel(_("Remaining time : "), sizer);
+        m_remaining = CreateLabel(_("Remaining time:"), flex);
     }
+    sizer->Add(flex, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
 
     if ( nTimeLabels > 0 )
     {
@@ -295,27 +298,22 @@
 wxStaticText *wxProgressDialog::CreateLabel(const wxString& text,
                                             wxSizer *sizer)
 {
-    wxBoxSizer *locsizer = new wxBoxSizer(wxLARGESMALL(wxHORIZONTAL,wxVERTICAL));
-
     wxStaticText *dummy = new wxStaticText(this, wxID_ANY, text);
     wxStaticText *label = new wxStaticText(this, wxID_ANY, _("unknown"));
 
     // select placement most native or nice on target GUI
 #if defined(__SMARTPHONE__)
     // label and time to the left in two rows
-    locsizer->Add(dummy, 1, wxALIGN_LEFT);
-    locsizer->Add(label, 1, wxALIGN_LEFT);
-    sizer->Add(locsizer, 0, wxALIGN_LEFT | wxTOP | wxLEFT, LAYOUT_MARGIN);
+    sizer->Add(dummy, 1, wxALIGN_LEFT);
+    sizer->Add(label, 1, wxALIGN_LEFT);
 #elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
     // label and time centered in one row
-    locsizer->Add(dummy, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT));
-    locsizer->Add(label, 1, wxALIGN_LEFT | wxLEFT, LAYOUT_MARGIN);
-    sizer->Add(locsizer, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
+    sizer->Add(dummy, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT) | wxTOP | wxRIGHT, LAYOUT_MARGIN);
+    sizer->Add(label, 1, wxALIGN_LEFT | wxTOP, LAYOUT_MARGIN);
 #else
     // label and time to the right in one row
-    sizer->Add(locsizer, 0, wxALIGN_RIGHT | wxRIGHT | wxTOP, LAYOUT_MARGIN);
-    locsizer->Add(dummy);
-    locsizer->Add(label, 0, wxLEFT, LAYOUT_MARGIN);
+    sizer->Add(dummy);
+    sizer->Add(label, 0, wxLEFT, LAYOUT_MARGIN);
 #endif
 
     return label;

 	  	 

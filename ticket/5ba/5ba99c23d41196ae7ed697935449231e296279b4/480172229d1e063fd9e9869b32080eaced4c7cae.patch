Index: src/stc/stc.cpp
===================================================================
--- src/stc/stc.cpp	(revision 63497)
+++ src/stc/stc.cpp	(working copy)
@@ -102,6 +102,7 @@
 wxDEFINE_EVENT( wxEVT_STC_SAVEPOINTREACHED, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_SAVEPOINTLEFT, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_ROMODIFYATTEMPT, wxStyledTextEvent );
+wxDEFINE_EVENT( wxEVT_STC_KEY_PROCESS, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_KEY, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_DOUBLECLICK, wxStyledTextEvent );
 wxDEFINE_EVENT( wxEVT_STC_UPDATEUI, wxStyledTextEvent );
@@ -3821,8 +3822,109 @@
     evt.Skip();
 }
 
+void wxStyledTextCtrl::OnKeyDown(wxKeyEvent& evt) {
 
-void wxStyledTextCtrl::OnKeyDown(wxKeyEvent& evt) {
+/*********************************************************
+* This is the beginning of my additions...
+* the aim is to generate a pre Key processing event for
+* the parent control in order to allow the event to be vetowed by
+* the parent.
+* for example in case of a console if we do not want to allow
+* users to process enter in an other line than the last one
+*********************************************************/
+    /** first build a wxStyledTextEvent with the proper keys */
+    int key = evt.GetKeyCode();
+    bool shift = evt.ShiftDown(),
+         ctrl  = evt.ControlDown(),
+         alt   = evt.AltDown();
+
+    if (ctrl && key >= 1 && key <= 26 && key != WXK_BACK)
+        key += 'A' - 1;
+    
+    switch (key) {
+    case WXK_DOWN:              key = wxSTC_KEY_DOWN;     break;
+    case WXK_UP:                key = wxSTC_KEY_UP;       break;
+    case WXK_LEFT:              key = wxSTC_KEY_LEFT;     break;
+    case WXK_RIGHT:             key = wxSTC_KEY_RIGHT;    break;
+    case WXK_HOME:              key = wxSTC_KEY_HOME;     break;
+    case WXK_END:               key = wxSTC_KEY_END;      break;
+    case WXK_PAGEUP:            key = wxSTC_KEY_PRIOR;    break;
+    case WXK_PAGEDOWN:          key = wxSTC_KEY_NEXT;     break;
+    case WXK_NUMPAD_DOWN:       key = wxSTC_KEY_DOWN;     break;
+    case WXK_NUMPAD_UP:         key = wxSTC_KEY_UP;       break;
+    case WXK_NUMPAD_LEFT:       key = wxSTC_KEY_LEFT;     break;
+    case WXK_NUMPAD_RIGHT:      key = wxSTC_KEY_RIGHT;    break;
+    case WXK_NUMPAD_HOME:       key = wxSTC_KEY_HOME;     break;
+    case WXK_NUMPAD_END:        key = wxSTC_KEY_END;      break;
+    case WXK_NUMPAD_PAGEUP:     key = wxSTC_KEY_PRIOR;    break;
+    case WXK_NUMPAD_PAGEDOWN:   key = wxSTC_KEY_NEXT;     break;
+    case WXK_NUMPAD_DELETE:     key = wxSTC_KEY_DELETE;   break;
+    case WXK_NUMPAD_INSERT:     key = wxSTC_KEY_INSERT;   break;
+    case WXK_DELETE:            key = wxSTC_KEY_DELETE;   break;
+    case WXK_INSERT:            key = wxSTC_KEY_INSERT;   break;
+    case WXK_ESCAPE:            key = wxSTC_KEY_ESCAPE;   break;
+    case WXK_BACK:              key = wxSTC_KEY_BACK;     break;
+    case WXK_TAB:               key = wxSTC_KEY_TAB;      break;
+    case WXK_NUMPAD_ENTER:      // fall through
+    case WXK_RETURN:            key = wxSTC_KEY_RETURN;   break;
+    case WXK_ADD:               // fall through
+    case WXK_NUMPAD_ADD:        key = wxSTC_KEY_ADD;      break;
+    case WXK_SUBTRACT:          // fall through
+    case WXK_NUMPAD_SUBTRACT:   key = wxSTC_KEY_SUBTRACT; break;
+    case WXK_DIVIDE:            // fall through
+    case WXK_NUMPAD_DIVIDE:     key = wxSTC_KEY_DIVIDE;   break;
+    case WXK_CONTROL:           key = 0; break;
+    case WXK_ALT:               key = 0; break;
+    case WXK_SHIFT:             key = 0; break;
+    case WXK_MENU:              key = 0; break;
+    }
+
+#ifdef __WXMAC__
+    if ( evt.MetaDown() ) {
+        // check for a few common Mac Meta-key combos and remap them to Ctrl
+        // for Scintilla
+        switch ( key ) {
+        case 'Z':       // Undo
+        case 'X':       // Cut
+        case 'C':       // Copy
+        case 'V':       // Paste
+        case 'A':       // Select All
+            ctrl = true;
+            break;
+        }
+    }
+#endif
+    
+    /** then build the event */
+    wxStyledTextEvent event(wxEVT_STC_KEY_PROCESS, GetId());
+
+    event.SetEventObject(this);
+    event.SetPosition(-1);
+    event.SetKey(key);
+    int modifiers = 0;
+    if( ctrl )
+	modifiers |= wxSTC_SCMOD_CTRL;
+    if( alt )
+	modifiers |= wxSTC_SCMOD_ALT;
+    if( shift )
+	modifiers |= wxSTC_SCMOD_SHIFT;
+
+    if( modifiers == 0 )
+	modifiers = wxSTC_SCMOD_NORM;
+
+    /** finally send it to the parent event handler */
+    event.SetModifiers(modifiers);
+    GetEventHandler()->ProcessEvent(event);
+    
+    /** as a result if the event has not been skipped this means that it has to be vetowed */
+    if( !event.GetSkipped() )
+    {
+	return;
+    }
+/****************************************************************
+* END OF MODIFICATIONS
+****************************************************************/
+
     int processed = m_swx->DoKeyDown(evt, &m_lastKeyDownConsumed);
     if (!processed && !m_lastKeyDownConsumed)
         evt.Skip();
@@ -4026,7 +4128,7 @@
     default:
         return;
     }
-
+	
     GetEventHandler()->ProcessEvent(evt);
 }
 
Index: include/wx/stc/stc.h
===================================================================
--- include/wx/stc/stc.h	(revision 63497)
+++ include/wx/stc/stc.h	(working copy)
@@ -3966,6 +3966,7 @@
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_SAVEPOINTREACHED, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_SAVEPOINTLEFT, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_ROMODIFYATTEMPT, wxStyledTextEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_KEY_PROCESS, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_KEY, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_DOUBLECLICK, wxStyledTextEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_STC, wxEVT_STC_UPDATEUI, wxStyledTextEvent );
@@ -3996,6 +3997,7 @@
         wxEVT_STC_SAVEPOINTREACHED,
         wxEVT_STC_SAVEPOINTLEFT,
         wxEVT_STC_ROMODIFYATTEMPT,
+	wxEVT_STC_KEY_PROCESS,
         wxEVT_STC_KEY,
         wxEVT_STC_DOUBLECLICK,
         wxEVT_STC_UPDATEUI,
@@ -4035,6 +4037,7 @@
 #define EVT_STC_SAVEPOINTREACHED(id, fn)   DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_SAVEPOINTREACHED,      id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_SAVEPOINTLEFT(id, fn)      DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_SAVEPOINTLEFT,         id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_ROMODIFYATTEMPT(id, fn)    DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_ROMODIFYATTEMPT,       id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
+#define EVT_STC_KEY_PROCESS(id, fn)        DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_KEY_PROCESS,           id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_KEY(id, fn)                DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_KEY,                   id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_DOUBLECLICK(id, fn)        DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_DOUBLECLICK,           id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),
 #define EVT_STC_UPDATEUI(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_STC_UPDATEUI,              id, wxID_ANY, wxStyledTextEventHandler( fn ), (wxObject *) NULL ),

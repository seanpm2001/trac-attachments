Only in wxGTK-2.3.2.fab: config.cache
Only in wxGTK-2.3.2.fab: config.log
Only in wxGTK-2.3.2.fab: config.status
Only in wxGTK-2.3.2.fab/contrib: config.log
Only in wxGTK-2.3.2.fab/contrib: config.status
Only in wxGTK-2.3.2.fab/contrib/samples: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/applet: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/canvas: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/canvas/simple: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/canvas/test: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl/fl_demo1: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl/fl_demo2: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl/fl_sample1: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl/fl_sample2: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/fl/fl_sample3: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos/dynsash: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos/dynsash_switch: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos/editlbox: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos/multicell: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/gizmos/splittree: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/mmedia: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/ogl: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/ogl/ogledit: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/ogl/studio: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/plot: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/stc: Makefile
Only in wxGTK-2.3.2.fab/contrib/samples/xrc: Makefile
Only in wxGTK-2.3.2.fab/contrib/src: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/applet: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/canvas: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/fl: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/gizmos: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/mmedia: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/net: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/ogl: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/plot: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/stc: Makefile
Only in wxGTK-2.3.2.fab/contrib/src/xrc: Makefile
Only in wxGTK-2.3.2.fab/contrib/utils: Makefile
Only in wxGTK-2.3.2.fab/contrib/utils/convertrc: Makefile
Only in wxGTK-2.3.2.fab/contrib/utils/wxrc: Makefile
Only in wxGTK-2.3.2.fab/contrib/utils/wxrcedit: Makefile
Only in wxGTK-2.3.2.fab/demos: Makefile
Only in wxGTK-2.3.2.fab/demos/bombs: Makefile
Only in wxGTK-2.3.2.fab/demos: config.log
Only in wxGTK-2.3.2.fab/demos: config.status
Only in wxGTK-2.3.2.fab/demos/dbbrowse: Makefile
Only in wxGTK-2.3.2.fab/demos/forty: Makefile
Only in wxGTK-2.3.2.fab/demos/fractal: Makefile
Only in wxGTK-2.3.2.fab/demos/life: Makefile
Only in wxGTK-2.3.2.fab/demos/poem: Makefile
Only in wxGTK-2.3.2.fab/lib: wx
Only in wxGTK-2.3.2.fab/locale: sl.mo
Only in wxGTK-2.3.2.fab: obj-shared
Only in wxGTK-2.3.2.fab: obj-shared-nodebug
Only in wxGTK-2.3.2.fab/samples: Makefile
Only in wxGTK-2.3.2.fab/samples/calendar: Makefile
Only in wxGTK-2.3.2.fab/samples/caret: Makefile
Only in wxGTK-2.3.2.fab/samples/checklst: Makefile
Only in wxGTK-2.3.2.fab/samples/config: Makefile
Only in wxGTK-2.3.2.fab/samples: config.log
Only in wxGTK-2.3.2.fab/samples: config.status
Only in wxGTK-2.3.2.fab/samples/console: Makefile
Only in wxGTK-2.3.2.fab/samples/controls: Makefile
Only in wxGTK-2.3.2.fab/samples/db: Makefile
Only in wxGTK-2.3.2.fab/samples/dialogs: Makefile
Only in wxGTK-2.3.2.fab/samples/dialup: Makefile
Only in wxGTK-2.3.2.fab/samples/dnd: Makefile
Only in wxGTK-2.3.2.fab/samples/docview: Makefile
Only in wxGTK-2.3.2.fab/samples/docvwmdi: Makefile
Only in wxGTK-2.3.2.fab/samples/dragimag: Makefile
Only in wxGTK-2.3.2.fab/samples/drawing: Makefile
Only in wxGTK-2.3.2.fab/samples/dynamic: Makefile
Only in wxGTK-2.3.2.fab/samples/erase: Makefile
Only in wxGTK-2.3.2.fab/samples/event: Makefile
Only in wxGTK-2.3.2.fab/samples/exec: Makefile
Only in wxGTK-2.3.2.fab/samples/font: Makefile
Only in wxGTK-2.3.2.fab/samples/grid: Makefile
Only in wxGTK-2.3.2.fab/samples/help: Makefile
Only in wxGTK-2.3.2.fab/samples/html: Makefile
Only in wxGTK-2.3.2.fab/samples/html/about: Makefile
Only in wxGTK-2.3.2.fab/samples/html/help: Makefile
Only in wxGTK-2.3.2.fab/samples/html/helpview: Makefile
Only in wxGTK-2.3.2.fab/samples/html/printing: Makefile
Only in wxGTK-2.3.2.fab/samples/html/test: Makefile
Only in wxGTK-2.3.2.fab/samples/html/virtual: Makefile
Only in wxGTK-2.3.2.fab/samples/html/widget: Makefile
Only in wxGTK-2.3.2.fab/samples/html/zip: Makefile
Only in wxGTK-2.3.2.fab/samples/image: Makefile
Only in wxGTK-2.3.2.fab/samples/internat: Makefile
Only in wxGTK-2.3.2.fab/samples/ipc: Makefile
Only in wxGTK-2.3.2.fab/samples/joytest: Makefile
Only in wxGTK-2.3.2.fab/samples/layout: Makefile
Only in wxGTK-2.3.2.fab/samples/listctrl: Makefile
Only in wxGTK-2.3.2.fab/samples/mdi: Makefile
Only in wxGTK-2.3.2.fab/samples/memcheck: Makefile
Only in wxGTK-2.3.2.fab/samples/menu: Makefile
Only in wxGTK-2.3.2.fab/samples/minifram: Makefile
Only in wxGTK-2.3.2.fab/samples/minimal: Makefile
Only in wxGTK-2.3.2.fab/samples/newgrid: Makefile
Only in wxGTK-2.3.2.fab/samples/notebook: Makefile
Only in wxGTK-2.3.2.fab/samples/opengl: Makefile
Only in wxGTK-2.3.2.fab/samples/opengl/cube: Makefile
Only in wxGTK-2.3.2.fab/samples/opengl/isosurf: Makefile
Only in wxGTK-2.3.2.fab/samples/opengl/penguin: Makefile
Only in wxGTK-2.3.2.fab/samples/png: Makefile
Only in wxGTK-2.3.2.fab/samples/printing: Makefile
Only in wxGTK-2.3.2.fab/samples/proplist: Makefile
Only in wxGTK-2.3.2.fab/samples/propsize: Makefile
Only in wxGTK-2.3.2.fab/samples/resource: Makefile
Only in wxGTK-2.3.2.fab/samples/richedit: Makefile
Only in wxGTK-2.3.2.fab/samples/rotate: Makefile
Only in wxGTK-2.3.2.fab/samples/sashtest: Makefile
Only in wxGTK-2.3.2.fab/samples/scroll: Makefile
Only in wxGTK-2.3.2.fab/samples/scrollsub: Makefile
Only in wxGTK-2.3.2.fab/samples/sockets: Makefile
Only in wxGTK-2.3.2.fab/samples/splitter: Makefile
Only in wxGTK-2.3.2.fab/samples/statbar: Makefile
Only in wxGTK-2.3.2.fab/samples/text: Makefile
Only in wxGTK-2.3.2.fab/samples/thread: Makefile
Only in wxGTK-2.3.2.fab/samples/toolbar: Makefile
Only in wxGTK-2.3.2.fab/samples/treectrl: Makefile
Only in wxGTK-2.3.2.fab/samples/treelay: Makefile
Only in wxGTK-2.3.2.fab/samples/typetest: Makefile
Only in wxGTK-2.3.2.fab/samples/validate: Makefile
Only in wxGTK-2.3.2.fab/samples/widgets: Makefile
Only in wxGTK-2.3.2.fab/samples/wizard: Makefile
Only in wxGTK-2.3.2.fab/src: make.env
Only in wxGTK-2.3.2.fab/src: makelib.env
Only in wxGTK-2.3.2.fab/src: makeprog.env
diff -rbu wxGTK-2.3.2/src/unix/threadpsx.cpp wxGTK-2.3.2.fab/src/unix/threadpsx.cpp
--- wxGTK-2.3.2/src/unix/threadpsx.cpp	Tue Jan 29 15:10:26 2002
+++ wxGTK-2.3.2.fab/src/unix/threadpsx.cpp	Tue Jan 29 14:51:19 2002
@@ -34,13 +34,13 @@
 #include "wx/log.h"
 #include "wx/intl.h"
 #include "wx/dynarray.h"
+#include "wx/listimpl.cpp"
 
 #include <stdio.h>
 #include <unistd.h>
 #include <pthread.h>
 #include <errno.h>
 #include <time.h>
-
 #if HAVE_SCHED_H
     #include <sched.h>
 #endif
@@ -257,6 +257,8 @@
 // remember that the condition was signaled and to return from Wait()
 // immediately in this case (this is more like Win32 automatic event objects)
 
+WX_DECLARE_LIST(pthread_mutex_t,mutexlist);
+
 class wxConditionInternal
 {
 public:
@@ -269,25 +271,29 @@
     void Signal();
     void Broadcast();
 
-    void WaitDone();
-    bool ShouldWait();
+    void WaitDone(mutexlist::Node *mutexnode);
+    mutexlist::Node *ShouldWait();
     bool HasWaiters();
 
 private:
+    void LockAllMutexes();          // locks all mutexes on the list
+    void UnlockAllMutexes();       // unlocks mutexes after signaling / broadcasting
+
     bool m_wasSignaled;             // TRUE if condition was signaled while
                                     // nobody waited for it
-    size_t m_nWaiters;              // TRUE if someone already waits for us
 
     pthread_mutex_t m_mutexProtect; // protects access to vars above
 
-    pthread_mutex_t m_mutex;        // the mutex used with the condition
+    mutexlist m_mutexes;            // The mutexes which are used for the condition variable
+
     pthread_cond_t m_condition;     // the condition itself
 };
 
+WX_DEFINE_LIST(mutexlist);
+
 wxConditionInternal::wxConditionInternal()
 {
     m_wasSignaled = FALSE;
-    m_nWaiters = 0;
 
     if ( pthread_cond_init(&m_condition, (pthread_condattr_t *)NULL) != 0 )
     {
@@ -295,19 +301,12 @@
         wxFAIL_MSG( _T("pthread_cond_init() failed") );
     }
 
-    if ( pthread_mutex_init(&m_mutex, (pthread_mutexattr_t *)NULL) != 0 ||
-         pthread_mutex_init(&m_mutexProtect, NULL) != 0 )
+    if ( pthread_mutex_init(&m_mutexProtect, NULL) != 0 )
     {
         // neither this
         wxFAIL_MSG( _T("wxCondition: pthread_mutex_init() failed") );
     }
 
-    // initially the mutex is locked, so no thread can Signal() or Broadcast()
-    // until another thread starts to Wait()
-    if ( pthread_mutex_lock(&m_mutex) != 0 )
-    {
-        wxFAIL_MSG( _T("wxCondition: pthread_mutex_lock() failed") );
-    }
 }
 
 wxConditionInternal::~wxConditionInternal()
@@ -318,26 +317,40 @@
                       "threads are probably still waiting on it?)"));
     }
 
-    if ( pthread_mutex_unlock( &m_mutex ) != 0 )
+    mutexlist::Node *node = m_mutexes.GetFirst();
+
+    while(node){
+      pthread_mutex_t *currentmutex = node->GetData();
+      if ( pthread_mutex_unlock( currentmutex ) != 0 )
     {
         wxLogDebug(_T("wxCondition: failed to unlock the mutex"));
+      } else {
+	delete currentmutex;
     }
+      node = node->GetNext();
+    }
+
+    m_mutexes.DeleteContents(true);
 
-    if ( pthread_mutex_destroy( &m_mutex ) != 0 ||
-         pthread_mutex_destroy( &m_mutexProtect ) != 0 )
+    if ( pthread_mutex_destroy( &m_mutexProtect ) != 0 )
     {
         wxLogDebug(_T("Failed to destroy mutex (it is probably locked)"));
     }
 }
 
-void wxConditionInternal::WaitDone()
+void wxConditionInternal::WaitDone(mutexlist::Node *mutexnode)
 {
     MutexLock lock(m_mutexProtect);
 
-    m_nWaiters--;
+    pthread_mutex_unlock(mutexnode->GetData());
+    pthread_mutex_destroy(mutexnode->GetData());
+    delete mutexnode->GetData();
+
+    m_mutexes.DeleteNode(mutexnode);
+
 }
 
-bool wxConditionInternal::ShouldWait()
+mutexlist::Node *wxConditionInternal::ShouldWait()
 {
     MutexLock lock(m_mutexProtect);
 
@@ -347,20 +360,26 @@
         // flag and return
         m_wasSignaled = FALSE;
 
-        return FALSE;
+        return NULL;
     }
 
     // we start to wait for it
-    m_nWaiters++;
 
-    return TRUE;
+    pthread_mutex_t *waitmutex = new pthread_mutex_t;
+    if ( pthread_mutex_init(waitmutex, (pthread_mutexattr_t *)NULL) != 0 )
+    {
+        // neither this
+        wxFAIL_MSG( _T("wxCondition: pthread_mutex_init() failed when starting waiting") );
+    }
+
+    pthread_mutex_lock(waitmutex);
+
+    return ( m_mutexes.Append(waitmutex) );
 }
 
 bool wxConditionInternal::HasWaiters()
 {
-    MutexLock lock(m_mutexProtect);
-
-    if ( m_nWaiters )
+    if ( m_mutexes.GetCount() )
     {
         // someone waits for us, signal the condition normally
         return TRUE;
@@ -375,14 +394,16 @@
 
 void wxConditionInternal::Wait()
 {
-    if ( ShouldWait() )
+    mutexlist::Node *ownmutexnode = ShouldWait();
+
+    if ( ownmutexnode )
     {
-        if ( pthread_cond_wait( &m_condition, &m_mutex ) != 0 )
+        if ( pthread_cond_wait( &m_condition, ownmutexnode->GetData() ) != 0 )
         {
             // not supposed to ever happen
             wxFAIL_MSG( _T("pthread_cond_wait() failed") );
         }
-	WaitDone();
+	WaitDone(ownmutexnode);
     }
 
 }
@@ -391,9 +412,11 @@
 {
     bool ok;
 
-    if ( ShouldWait() )
+    mutexlist::Node *ownmutexnode = ShouldWait();
+
+    if ( ownmutexnode )
     {
-        switch ( pthread_cond_timedwait( &m_condition, &m_mutex, ts ) )
+        switch ( pthread_cond_timedwait( &m_condition, ownmutexnode->GetData(), ts ) )
         {
             case 0:
                 // condition signaled
@@ -410,7 +433,7 @@
                 // wait interrupted or timeout elapsed
                 ok = FALSE;
         }
-	WaitDone();
+	WaitDone(ownmutexnode);
     }
     else
     {
@@ -422,31 +445,59 @@
     return ok;
 }
 
+void wxConditionInternal::LockAllMutexes(){
+  mutexlist::Node *mutexnode = m_mutexes.GetFirst();
+  while(mutexnode){
+    pthread_mutex_lock(mutexnode->GetData());
+    mutexnode = mutexnode->GetNext();
+  }
+}
+
+void wxConditionInternal::UnlockAllMutexes(){
+  mutexlist::Node *mutexnode = m_mutexes.GetFirst();
+  while(mutexnode){
+    pthread_mutex_unlock(mutexnode->GetData());
+    mutexnode = mutexnode->GetNext();
+  }
+}
+
 void wxConditionInternal::Signal()
 {
+
+  MutexLock lock(m_mutexProtect);
+  
+
     if ( HasWaiters() )
     {
-        MutexLock lock(m_mutex);
+        LockAllMutexes();
 
         if ( pthread_cond_signal( &m_condition ) != 0 )
         {
             // shouldn't ever happen
             wxFAIL_MSG(_T("pthread_cond_signal() failed"));
         }
+
+	UnlockAllMutexes();
+
     }
 }
 
 void wxConditionInternal::Broadcast()
 {
+
+  MutexLock lock(m_mutexProtect);
+  
     if ( HasWaiters() )
     {
-        MutexLock lock(m_mutex);
+        LockAllMutexes();
 
         if ( pthread_cond_broadcast( &m_condition ) != 0 )
         {
             // shouldn't ever happen
             wxFAIL_MSG(_T("pthread_cond_broadcast() failed"));
         }
+	UnlockAllMutexes();
+
     }
 }
 
Only in wxGTK-2.3.2.fab/utils/HelpGen: Makefile
Only in wxGTK-2.3.2.fab/utils/HelpGen/src: Makefile
Only in wxGTK-2.3.2.fab/utils: Makefile
Only in wxGTK-2.3.2.fab/utils: config.log
Only in wxGTK-2.3.2.fab/utils: config.status
Only in wxGTK-2.3.2.fab/utils/dialoged: Makefile
Only in wxGTK-2.3.2.fab/utils/hhp2cached: Makefile
Only in wxGTK-2.3.2.fab/utils/makegen: Makefile
Only in wxGTK-2.3.2.fab/utils/tex2rtf: Makefile
Only in wxGTK-2.3.2.fab/utils/tex2rtf/src: Makefile
Only in wxGTK-2.3.2.fab: wx-config
Only in wxGTK-2.3.2.fab: wxgtkd-2.3-config
Only in wxGTK-2.3.2.fab: wxstd.lang

 	  	 

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 72418)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3332,6 +3332,7 @@
     $(WEBVIEW_SRC_PLATFORM)
     src/common/webview.cpp
     src/common/webviewarchivehandler.cpp
+    src/common/webviewfhhandler.cpp
 </set>
 
 <set var="WEBVIEW_HDR_PLATFORM" hints="files">
@@ -3352,6 +3353,7 @@
     $(WEBVIEW_HDR_PLATFORM)
     wx/webview.h
     wx/webviewarchivehandler.h
+    wx/webviewfshandler.h
 </set>
 
 <!-- ====================================================================== -->
Index: include/wx/webviewfshandler.h
===================================================================
--- include/wx/webviewfshandler.h	(revision 0)
+++ include/wx/webviewfshandler.h	(working copy)
@@ -0,0 +1,38 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        webviewfshandler.h
+// Purpose:     Custom webview handler for virtual file system
+// Author:      Nick Matthews
+// Id:          $Id$
+// Copyright:   (c) 2012 Steven Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// Based on webviewarchivehandler.h file by Steven Lamerton
+
+#ifndef _WX_WEB_VIEW_FS_HANDLER_H_
+#define _WX_WEB_VIEW_FS_HANDLER_H_
+
+#include "wx/setup.h"
+
+#if wxUSE_WEBVIEW
+
+class wxFSFile;
+class wxFileSystem;
+
+#include "wx/webview.h"
+
+//Loads from uris such as scheme:example.html
+
+class WXDLLIMPEXP_WEBVIEW wxWebViewFSHandler : public wxWebViewHandler
+{
+public:
+    wxWebViewFSHandler(const wxString& scheme);
+    virtual ~wxWebViewFSHandler();
+    virtual wxFSFile* GetFile(const wxString &uri);
+private:
+    wxFileSystem* m_fileSystem;
+};
+
+#endif // wxUSE_WEBVIEW
+
+#endif // _WX_WEB_VIEW_FS_HANDLER_H_
Index: include/wx/webviewfshandler.h
===================================================================
--- include/wx/webviewfshandler.h	(revision 0)
+++ include/wx/webviewfshandler.h	(working copy)

Property changes on: include/wx/webviewfshandler.h
___________________________________________________________________
Added: svn:keywords
## -0,0 +1 ##
+Author Date Id Rev URL
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: interface/wx/fs_mem.h
===================================================================
--- interface/wx/fs_mem.h	(revision 72418)
+++ interface/wx/fs_mem.h	(working copy)
@@ -13,7 +13,7 @@
     them accessible via an URL.
 
     It is particularly suitable for storing bitmaps from resources or included XPM
-    files so that they can be used with wxHTML.
+    files so that they can be used with wxHTML or wxWebView.
 
     Filenames are prefixed with @c "memory:", e.g. @c "memory:myfile.html".
 
@@ -26,24 +26,30 @@
 
     void MyFrame::OnAbout(wxCommandEvent&)
     {
-        wxBusyCursor bcur;
         wxFileSystem::AddHandler(new wxMemoryFSHandler);
-        wxMemoryFSHandler::AddFile("logo.pcx", wxBITMAP(logo), wxBITMAP_TYPE_PCX);
+        wxMemoryFSHandler::AddFile("logo.png", wxBITMAP(logo), wxBITMAP_TYPE_PNG);
         wxMemoryFSHandler::AddFile("about.htm",
                                 "<html><body>About: "
-                                "<img src=\"memory:logo.pcx\"></body></html>");
+                                "<img src=\"memory:logo.png\"></body></html>");
 
         wxDialog dlg(this, -1, wxString(_("About")));
         wxBoxSizer *topsizer;
-        wxHtmlWindow *html;
         topsizer = new wxBoxSizer(wxVERTICAL);
-        html = new wxHtmlWindow(&dlg, -1, wxDefaultPosition,
-                                wxSize(380, 160), wxHW_SCROLLBAR_NEVER);
-        html->SetBorders(0);
-        html->LoadPage("memory:about.htm");
-        html->SetSize(html->GetInternalRepresentation()->GetWidth(),
-                    html->GetInternalRepresentation()->GetHeight());
-        topsizer->Add(html, 1, wxALL, 10);
+    #ifdef USE_wxWebView
+        wxWebView* browser = wxWebView::New(&dlg, wxID_ANY, wxWebViewDefaultURLStr,
+                                 wxDefaultPosition, wxSize(380, 160));
+        browser->RegisterHandler(wxSharedPtr<wxWebViewHandler>(new wxWebViewFSHandler("memory")));
+        browser->LoadURL("memory:about.htm");
+    #else // Use wxHtml
+        wxHtmlWindow *browser;
+        browser = new wxHtmlWindow(&dlg, -1, wxDefaultPosition,
+                                   wxSize(380, 160), wxHW_SCROLLBAR_NEVER);
+        browser->SetBorders(0);
+        browser->LoadPage("memory:about.htm");
+        browser->SetSize(browser->GetInternalRepresentation()->GetWidth(),
+                    browser->GetInternalRepresentation()->GetHeight());
+    #endif
+        topsizer->Add(browser, 1, wxALL, 10);
         topsizer->Add(new wxStaticLine(&dlg, -1), 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
         topsizer->Add(new wxButton(&dlg, wxID_OK, "Ok"),
                     0, wxALL | wxALIGN_RIGHT, 15);
@@ -53,7 +59,7 @@
         dlg.Centre();
         dlg.ShowModal();
 
-        wxMemoryFSHandler::RemoveFile("logo.pcx");
+        wxMemoryFSHandler::RemoveFile("logo.png");
         wxMemoryFSHandler::RemoveFile("about.htm");
     }
     @endcode
Index: interface/wx/webview.h
===================================================================
--- interface/wx/webview.h	(revision 72418)
+++ interface/wx/webview.h	(working copy)
@@ -231,7 +231,11 @@
     wxFSFile which represents the given url. You can then register your handler
     with RegisterHandler() it will be called for all pages and resources.
 
-    wxWebFileHandler is provided to allow the navigation of pages inside a zip
+    wxWebViewFSHandler is provided to access the virtual file system encapsulated by
+    wxFileSystem. The wxMemoryFSHandler documentation gives an example of how this
+    may be used.
+
+    wxWebViewArchiveHandler is provided to allow the navigation of pages inside a zip
     archive. It overrides the @c file scheme and provides support for the
     standard @c file syntax as well as paths to archives of the form
     @c file:///C:/example/docs.zip;protocol=zip/main.htm
@@ -607,13 +611,13 @@
         @param flags The flags for the search.
         @return If search phrase was not found in combination with the flags
                 then @c wxNOT_FOUND is returned. If called for the first time
-                with search phrase then the total number of results will be 
+                with search phrase then the total number of results will be
                 returned. Then for every time its called with the same search
                 phrase it will return the number of the current match.
         @note This function will restart the search if the flags
               @c wxWEB_VIEW_FIND_ENTIRE_WORD or @c wxWEB_VIEW_FIND_MATCH_CASE
               are changed, since this will require a new search. To reset the
-              search, for example reseting the highlights call the function 
+              search, for example reseting the highlights call the function
               with an empty search phrase. This always returns @c wxNOT_FOUND
               on the OSX WebKit backend.
         @since 2.9.5
Index: interface/wx/webviewfshandler.h
===================================================================
--- interface/wx/webviewfshandler.h	(revision 0)
+++ interface/wx/webviewfshandler.h	(working copy)
@@ -0,0 +1,32 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        webviewfshandler.h
+// Purpose:     interface of wxWebViewFSHandler
+// Author:      wxWidgets team
+// RCS-ID:      $Id$
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxWebViewFSHandler
+
+    A wxWebView file system handler to support standard wxFileSystem protocols
+    of the form <code> example:page.htm </code> The handler allows wxWebView to
+    use wxFileSystem in a similar fashion to its use with wxHtml.
+
+    The wxMemoryFSHandler documentation gives an example of how it may be used.
+
+    @since 2.9.5
+    @library{wxwebview}
+    @category{webview}
+
+    @see wxWebView, wxWebViewHandler, wxWebViewArchiveHandler
+ */
+class wxWebViewFSHandler : public wxWebViewHandler
+{
+public:
+    /**
+        Constructor.
+    */
+    wxWebViewFSHandler(const wxString& scheme);
+    virtual wxFSFile* GetFile(const wxString &uri);
+};
Index: interface/wx/webviewfshandler.h
===================================================================
--- interface/wx/webviewfshandler.h	(revision 0)
+++ interface/wx/webviewfshandler.h	(working copy)

Property changes on: interface/wx/webviewfshandler.h
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:keywords
## -0,0 +1 ##
+Author Date Id Rev URL
\ No newline at end of property
Index: samples/webview/webview.cpp
===================================================================
--- samples/webview/webview.cpp	(revision 72418)
+++ samples/webview/webview.cpp	(working copy)
@@ -32,9 +32,11 @@
 #include "wx/settings.h"
 #include "wx/webview.h"
 #include "wx/webviewarchivehandler.h"
+#include "wx/webviewfshandler.h"
 #include "wx/infobar.h"
 #include "wx/filesys.h"
 #include "wx/fs_arc.h"
+#include "wx/fs_mem.h"
 
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
@@ -136,6 +138,7 @@
     void OnDeleteSelection(wxCommandEvent& evt);
     void OnSelectAll(wxCommandEvent& evt);
     void OnLoadScheme(wxCommandEvent& evt);
+    void OnUseMemoryFS(wxCommandEvent& evt);
     void OnFind(wxCommandEvent& evt);
     void OnFindDone(wxCommandEvent& evt);
     void OnFindText(wxCommandEvent& evt);
@@ -213,6 +216,27 @@
     if ( !wxApp::OnInit() )
         return false;
 
+    //Required for virtual file system archive and memory support
+    wxFileSystem::AddHandler(new wxArchiveFSHandler);
+    wxFileSystem::AddHandler(new wxMemoryFSHandler);
+
+    // Create the memory files
+    wxImage::AddHandler(new wxPNGHandler);
+    wxMemoryFSHandler::AddFile("logo.png", 
+        wxBitmap(wxlogo_xpm), wxBITMAP_TYPE_PNG);
+    wxMemoryFSHandler::AddFile("page1.htm",
+        "<html><head><title>File System Example</title>"
+        "<link rel='stylesheet' type='text/css' href='memory:test.css'>"
+        "</head><body><h1>Page 1</h1>"
+        "<p><img src='memory:logo.png'></p>"
+        "<p>Some text about <a href='memory:page2.htm'>Page 2</a>.</p></body>");
+    wxMemoryFSHandler::AddFile("page2.htm",
+        "<html><head><title>File System Example</title>"
+        "<link rel='stylesheet' type='text/css' href='memory:test.css'>"
+        "</head><body><h1>Page 2</h1>"
+        "<p><a href='memory:page1.htm'>Page 1</a> was better.</p></body>");
+    wxMemoryFSHandler::AddFile("test.css", "h1 {color: red;}");
+
     WebFrame *frame = new WebFrame(m_url);
     frame->Show();
 
@@ -222,9 +246,6 @@
 WebFrame::WebFrame(const wxString& url) :
     wxFrame(NULL, wxID_ANY, "wxWebView Sample")
 {
-    //Required from virtual file system archive support
-    wxFileSystem::AddHandler(new wxArchiveFSHandler);
-
     // set the frame icon
     SetIcon(wxICON(sample));
     SetTitle("wxWebView Sample");
@@ -309,6 +330,8 @@
 
     //We register the wxfs:// protocol for testing purposes
     m_browser->RegisterHandler(wxSharedPtr<wxWebViewHandler>(new wxWebViewArchiveHandler("wxfs")));
+    //And the memory: file system
+    m_browser->RegisterHandler(wxSharedPtr<wxWebViewHandler>(new wxWebViewFSHandler("memory")));
 
     SetSizer(topsizer);
 
@@ -378,6 +401,7 @@
     editmenu->AppendSubMenu(selection, "Selection");
 
     wxMenuItem* loadscheme =  m_tools_menu->Append(wxID_ANY, _("Custom Scheme Example"));
+    wxMenuItem* usememoryfs =  m_tools_menu->Append(wxID_ANY, _("Memory File System Example"));
 
     //By default we want to handle navigation and new windows
     m_tools_handle_navigation->Check();
@@ -481,6 +505,8 @@
             wxCommandEventHandler(WebFrame::OnSelectAll),  NULL, this );
     Connect(loadscheme->GetId(), wxEVT_COMMAND_MENU_SELECTED,
             wxCommandEventHandler(WebFrame::OnLoadScheme),  NULL, this );
+    Connect(usememoryfs->GetId(), wxEVT_COMMAND_MENU_SELECTED,
+            wxCommandEventHandler(WebFrame::OnUseMemoryFS),  NULL, this );
     Connect(m_find->GetId(), wxEVT_COMMAND_MENU_SELECTED,
             wxCommandEventHandler(WebFrame::OnFind),  NULL, this );
 
@@ -628,6 +654,11 @@
     m_browser->LoadURL(path);
 }
 
+void WebFrame::OnUseMemoryFS(wxCommandEvent& WXUNUSED(evt))
+{
+    m_browser->LoadURL("memory:page1.htm");
+}
+
 void WebFrame::OnFind(wxCommandEvent& WXUNUSED(evt))
 {
     wxString value = m_browser->GetSelectedText();
Index: src/common/webviewfshandler.cpp
===================================================================
--- src/common/webviewfshandler.cpp	(revision 0)
+++ src/common/webviewfshandler.cpp	(working copy)
@@ -0,0 +1,38 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        webviewfshandler.cpp
+// Purpose:     Custom webview handler for virtual file system
+// Author:      Nick Matthews
+// Id:          $Id$
+// Copyright:   (c) 2012 Steven Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#if wxUSE_WEBVIEW
+
+#if defined(__BORLANDC__)
+    #pragma hdrstop
+#endif
+
+#include "wx/webviewfshandler.h"
+#include "wx/filesys.h"
+
+wxWebViewFSHandler::wxWebViewFSHandler(const wxString& scheme) :
+                         wxWebViewHandler(scheme)
+{
+    m_fileSystem = new wxFileSystem();
+}
+
+wxWebViewFSHandler::~wxWebViewFSHandler()
+{
+    wxDELETE(m_fileSystem);
+}
+
+wxFSFile* wxWebViewFSHandler::GetFile(const wxString &uri)
+{
+    return m_fileSystem->OpenFile(uri);
+}
+
+#endif // wxUSE_WEBVIEW
Index: src/common/webviewfshandler.cpp
===================================================================
--- src/common/webviewfshandler.cpp	(revision 0)
+++ src/common/webviewfshandler.cpp	(working copy)

Property changes on: src/common/webviewfshandler.cpp
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:keywords
## -0,0 +1 ##
+Author Date Id Rev URL
\ No newline at end of property

1087c1087,1091
<     // Modified to find error codes on failure
---
>     if (SQLGetInfo(hdbc, SQL_OUTER_JOINS, (UCHAR*) dbInf.outerJoins, 2, &cb) != SQL_SUCCESS)
> 	{
> 		// TODO: BugTracker# 785080 : fails with mysql 4 on linux - edr
> 		// TODO: dbInf.outerJoins[0]='N';
> 		// TODO: dbInf.outerJoins[1]='\x0';
1088a1093,1102
> 		DispAllErrors(henv, hdbc);
> 		if (failOnDataTypeUnsupported)
> 			return FALSE;
> 	}
> 
>     if (SQLGetInfo(hdbc, SQL_PROCEDURES, (UCHAR*) dbInf.procedureSupport, 2, &cb) != SQL_SUCCESS)
> 	{
> 		// TODO: BugTracker# 785080 : fails with mysql 4 on linux - edr
> 		// TODO: dbInf.procedureSupport[0]='N';
> 		// TODO: dbInf.procedureSupport[1]='\x0';
1090,1112c1104,1118
<     retcode = SQLGetInfo(hdbc, SQL_OUTER_JOINS, (UCHAR*) dbInf.outerJoins, 2, &cb);
<     if(retcode != SQL_SUCCESS || retcode != SQL_SUCCESS_WITH_INFO)
<       {
< 	DispAllErrors(henv, hdbc);
< 	if (failOnDataTypeUnsupported)
< 	  return FALSE;
<       }
< 
<     retcode = SQLGetInfo(hdbc, SQL_PROCEDURES, (UCHAR*) dbInf.procedureSupport, 2, &cb);
<     if(retcode != SQL_SUCCESS || retcode != SQL_SUCCESS_WITH_INFO)
<       {
< 	DispAllErrors(henv, hdbc);
< 	if (failOnDataTypeUnsupported)
< 	  return FALSE;
<       }
< 
<     retcode = SQLGetInfo(hdbc, SQL_ACCESSIBLE_TABLES, (UCHAR*) dbInf.accessibleTables, 2, &cb);
<     if(retcode != SQL_SUCCESS || retcode != SQL_SUCCESS_WITH_INFO)
<       {
< 	DispAllErrors(henv, hdbc);
< 	if (failOnDataTypeUnsupported)
< 	  return FALSE;
<       }
---
> 		DispAllErrors(henv, hdbc);
> 		if (failOnDataTypeUnsupported)
> 			return FALSE;
> 	}
> 
>     if (SQLGetInfo(hdbc, SQL_ACCESSIBLE_TABLES, (UCHAR*) dbInf.accessibleTables, 2, &cb) != SQL_SUCCESS)
> 	{
> 		// TODO: BugTracker# 785080 : fails with mysql 4 on linux - edr
> 		// TODO: dbInf.accessibleTables[0]='N';
> 		// TODO: dbInf.accessibleTables[1]='\x0';
> 
> 		DispAllErrors(henv, hdbc);
> 		if (failOnDataTypeUnsupported)
> 			return FALSE;
> 	}
1135,1141c1141,1150
<     retcode = SQLGetInfo(hdbc, SQL_ODBC_SQL_OPT_IEF, (UCHAR*) dbInf.supportIEF, 2, &cb);
<     if(retcode != SQL_SUCCESS || retcode != SQL_SUCCESS_WITH_INFO)
<       {
< 	DispAllErrors(henv, hdbc);
< 	if (failOnDataTypeUnsupported)
< 	  return FALSE;
<       }
---
>     if (SQLGetInfo(hdbc, SQL_ODBC_SQL_OPT_IEF, (UCHAR*) dbInf.supportIEF, 2, &cb) != SQL_SUCCESS)
> 	{
> 		// TODO: BugTracker# 785080 : fails with mysql 4 on linux - edr
> 		// TODO: dbInf.supportIEF[0]='N';
> 		// TODO: dbInf.supportIEF[1]='\x0';
> 
> 		DispAllErrors(henv, hdbc);
> 		if (failOnDataTypeUnsupported)
> 			return FALSE;
> 	}
1614,1619c1623,1625
<     while (SQLError(aHenv, aHdbc, aHstmt, (SQLTCHAR FAR *) sqlState, &nativeError,
< 		    (SQLTCHAR FAR *) errorMsg, SQL_MAX_MESSAGE_LENGTH - 1, &cbErrorMsg)
< 	   == SQL_SUCCESS)
<       {
<         odbcErrMsg.Printf(wxT("SQL State = %s\nNative Error Code = %li\nError Message = %s\n"),
< 			  sqlState, nativeError, errorMsg);
---
>     while (SQLError(aHenv, aHdbc, aHstmt, (SQLTCHAR FAR *) sqlState, &nativeError, (SQLTCHAR FAR *) errorMsg, SQL_MAX_MESSAGE_LENGTH - 1, &cbErrorMsg) == SQL_SUCCESS)
>     {
>         odbcErrMsg.Printf(wxT("SQL State = %s\nNative Error Code = %li\nError Message = %s\n"), sqlState, nativeError, errorMsg);
3801c3807
<         opened = pList->PtrDb->Open(pDbConfig->GetDsn(), pDbConfig->GetUserID(), pDbConfig->GetPassword(), false);
---
>         opened = pList->PtrDb->Open(pDbConfig->GetDsn(), pDbConfig->GetUserID(), pDbConfig->GetPassword());

 	  	 

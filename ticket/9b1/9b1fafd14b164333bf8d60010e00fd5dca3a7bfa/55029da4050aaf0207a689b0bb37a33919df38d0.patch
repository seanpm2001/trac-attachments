Index: docs/latex/wx/animatctrl.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/animatctrl.tex,v
retrieving revision 1.4
diff -u2 -r1.4 docs/latex/wx/animatctrl.tex
--- docs/latex/wx/animatctrl.tex
+++ docs/latex/wx/animatctrl.tex
@@ -81,5 +81,5 @@
 \wxheading{Parameters}
 
-\docparam{parent}{Parent window, must not be non-\texttt{NULL}.}
+\docparam{parent}{Parent window, must be non-\texttt{NULL}.}
 
 \docparam{id}{The identifier for the control.}
@@ -141,5 +141,5 @@
 The animation is always played in loop mode (unless the last frame of the animation
 has an infinite delay time) and always start from the first frame
-(even if you \helpref{atopped}{wxanimationctrlstop} it while some other frame was
+(even if you \helpref{stopped}{wxanimationctrlstop} it while some other frame was
 displayed).
 
@@ -171,4 +171,9 @@
 is called.
 
+Note that the inactive bitmap, if smaller than the control's size, won't be centered:
+it will be drawn in top-left portion of the control's area (so typically it's better
+to use as static bitmap an image with the same size of the animation).
+
+
 \membersection{wxAnimationCtrl::Stop}\label{wxanimationctrlstop}
 
Index: include/wx/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/animate.h,v
retrieving revision 1.7
diff -u2 -r1.7 include/wx/animate.h
Index: include/wx/generic/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/animate.h,v
retrieving revision 1.9
diff -u2 -r1.9 include/wx/generic/animate.h
--- include/wx/generic/animate.h
+++ include/wx/generic/animate.h
@@ -108,4 +108,7 @@
     void SetInactiveBitmap(const wxBitmap &bmp);
 
+    // wxWindow override
+    bool SetBackgroundColour(const wxColour &);
+
 public:     // event handlers
 
Index: include/wx/gtk/animate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/animate.h,v
retrieving revision 1.6
diff -u2 -r1.6 include/wx/gtk/animate.h
--- include/wx/gtk/animate.h
+++ include/wx/gtk/animate.h
@@ -28,5 +28,5 @@
 {
 public:
-    wxAnimation(GdkPixbufAnimation *p = NULL) { m_pixbuf = p; }
+    wxAnimation(GdkPixbufAnimation *p = NULL);
     wxAnimation(const wxAnimation&);
     ~wxAnimation() { UnRef(); }
Index: samples/animate/anitest.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.bkl,v
retrieving revision 1.1
diff -u2 -r1.1 samples/animate/anitest.bkl
Index: samples/animate/anitest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.cpp,v
retrieving revision 1.7
diff -u2 -r1.7 samples/animate/anitest.cpp
--- samples/animate/anitest.cpp
+++ samples/animate/anitest.cpp
@@ -34,4 +34,6 @@
 
 #include "wx/aboutdlg.h"
+#include "wx/artprov.h"
+#include "wx/colordlg.h"
 #include "anitest.h"
 
@@ -53,9 +55,18 @@
 enum
 {
-    ID_PLAY = 1
+    ID_PLAY = 1,
+    ID_SET_NULL_ANIMATION,
+    ID_SET_INACTIVE_BITMAP,
+    ID_SET_NO_AUTO_RESIZE,
+    ID_SET_BGCOLOR
 };
 
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(ID_PLAY, MyFrame::OnPlay)
+    EVT_MENU(ID_SET_NULL_ANIMATION, MyFrame::OnSetNullAnimation)
+    EVT_MENU(ID_SET_INACTIVE_BITMAP, MyFrame::OnSetInactiveBitmap)
+    EVT_MENU(ID_SET_NO_AUTO_RESIZE, MyFrame::OnSetNoAutoResize)
+    EVT_MENU(ID_SET_BGCOLOR, MyFrame::OnSetBgColor)
+
     EVT_MENU(wxID_STOP, MyFrame::OnStop)
     EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
@@ -83,6 +94,6 @@
 
     MyFrame* frame = new MyFrame((wxFrame *)NULL, wxID_ANY, _T("Animation Demo"),
-                        wxDefaultPosition, wxSize(500, 400),
-                        wxDEFAULT_FRAME_STYLE);
+                                 wxDefaultPosition, wxSize(500, 400),
+                                 wxDEFAULT_FRAME_STYLE);
 
     // Give it an icon
@@ -100,4 +111,13 @@
     play_menu->Append(ID_PLAY, _T("Play\tCtrl+P"), _T("Play the animation"));
     play_menu->Append(wxID_STOP, _T("Stop\tCtrl+P"), _T("Stop the animation"));
+    play_menu->AppendSeparator();
+    play_menu->Append(ID_SET_NULL_ANIMATION, _T("Set null animation"),
+                      _T("Sets the empty animation in the control"));
+    play_menu->AppendCheckItem(ID_SET_INACTIVE_BITMAP, _T("Set inactive bitmap"),
+                               _T("Sets an inactive bitmap for the control"));
+    play_menu->AppendCheckItem(ID_SET_NO_AUTO_RESIZE, _T("Set no autoresize"),
+                               _T("Tells the control not to resize automatically"));
+    play_menu->Append(ID_SET_BGCOLOR, _T("Set background colour..."),
+                      _T("Sets the background colour of the control"));
 
     wxMenu *help_menu = new wxMenu;
@@ -140,8 +160,17 @@
                           style | wxNO_FULL_REPAINT_ON_RESIZE)
 {
-    m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY, wxNullAnimation,
-                                          wxPoint(0,0),wxSize(100,100));
+    // use a wxBoxSizer otherwise wxFrame will automatically
+    // resize the m_animationCtrl to fill its client area on
+    // user resizes
+    wxSizer *sz = new wxBoxSizer(wxVERTICAL);
+    sz->Add(new wxStaticText(this, wxID_ANY, wxT("wxAnimationCtrl:")),
+            0, wxALIGN_CENTRE|wxALL, 5);
+
+    m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY);
     if (m_animationCtrl->LoadFile(wxT("throbber.gif")))
         m_animationCtrl->Play();
+
+    sz->Add(m_animationCtrl, 0, wxALIGN_CENTRE|wxALL, 5);
+    SetSizer(sz);
 }
 
@@ -161,4 +190,60 @@
 }
 
+void MyFrame::OnSetNullAnimation(wxCommandEvent& WXUNUSED(event))
+{
+    m_animationCtrl->SetAnimation(wxNullAnimation);
+}
+
+void MyFrame::OnSetInactiveBitmap(wxCommandEvent& event)
+{
+    if (event.IsChecked())
+    {
+        // set a dummy bitmap as the inactive bitmap
+        wxBitmap bmp = wxArtProvider::GetBitmap(wxART_MISSING_IMAGE);
+        m_animationCtrl->SetInactiveBitmap(bmp);
+    }
+    else
+        m_animationCtrl->SetInactiveBitmap(wxNullBitmap);
+}
+
+void MyFrame::OnSetNoAutoResize(wxCommandEvent& event)
+{
+    // recreate the control with the new flag if necessary
+    long style = wxAC_DEFAULT_STYLE |
+                    (event.IsChecked() ? wxAC_NO_AUTORESIZE : 0);
+
+    if (style != m_animationCtrl->GetWindowStyle())
+    {
+        // save status of the control before destroying it
+        wxAnimation curr = m_animationCtrl->GetAnimation();
+        wxBitmap inactive = m_animationCtrl->GetInactiveBitmap();
+        wxColour bg = m_animationCtrl->GetBackgroundColour();
+
+        // destroy & rebuild
+        wxAnimationCtrl *old = m_animationCtrl;
+        m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY, curr,
+                                              wxDefaultPosition, wxDefaultSize,
+                                              style);
+
+        GetSizer()->Replace(old, m_animationCtrl);
+        delete old;
+
+        // load old status in new control
+        m_animationCtrl->SetInactiveBitmap(inactive);
+        m_animationCtrl->SetBackgroundColour(bg);
+
+        GetSizer()->Layout();
+    }
+}
+
+void MyFrame::OnSetBgColor(wxCommandEvent& WXUNUSED(event))
+{
+    wxColour clr = wxGetColourFromUser(this, m_animationCtrl->GetBackgroundColour(),
+                                       wxT("Choose the background colour"));
+
+    if (clr.IsOk())
+        m_animationCtrl->SetBackgroundColour(clr);
+}
+
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
@@ -225,4 +310,6 @@
     #endif
 #endif
+
+        GetSizer()->Layout();
     }
 }
@@ -233,4 +320,5 @@
     GetMenuBar()->FindItem(wxID_STOP)->Enable(m_animationCtrl->IsPlaying());
     GetMenuBar()->FindItem(ID_PLAY)->Enable(!m_animationCtrl->IsPlaying());
+    GetMenuBar()->FindItem(ID_SET_NO_AUTO_RESIZE)->Enable(!m_animationCtrl->IsPlaying());
 }
 
Index: samples/animate/anitest.dsp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.dsp,v
retrieving revision 1.2
diff -u2 -r1.2 samples/animate/anitest.dsp
Index: samples/animate/anitest.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.h,v
retrieving revision 1.2
diff -u2 -r1.2 samples/animate/anitest.h
--- samples/animate/anitest.h
+++ samples/animate/anitest.h
@@ -32,4 +32,8 @@
 
     void OnPlay(wxCommandEvent& event);
+    void OnSetNullAnimation(wxCommandEvent& event);
+    void OnSetInactiveBitmap(wxCommandEvent& event);
+    void OnSetNoAutoResize(wxCommandEvent& event);
+    void OnSetBgColor(wxCommandEvent& event);
     void OnStop(wxCommandEvent& event);
 
Index: src/common/animatecmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/animatecmn.cpp,v
retrieving revision 1.3
diff -u2 -r1.3 src/common/animatecmn.cpp
Index: src/generic/animateg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/animateg.cpp,v
retrieving revision 1.14
diff -u2 -r1.14 src/generic/animateg.cpp
--- src/generic/animateg.cpp
+++ src/generic/animateg.cpp
@@ -186,5 +186,4 @@
         // a good reason to add and remove duplicate handlers (and they
         // may) we should probably refcount the duplicates.
-        //   also an issue in InsertHandler below.
 
         wxLogDebug( _T("Adding duplicate animation handler for '%d' type"),
@@ -295,4 +294,6 @@
 
     // by default we get the same background colour of our parent
+    // NOTE: this call is required as the default bg colour is different
+    //       than our parent's bg colour
     SetBackgroundColour(parent->GetBackgroundColour());
 
@@ -331,5 +332,11 @@
         Stop();
 
+    // set new animation even if it's wxNullAnimation
     m_animation = animation;
+    if (!m_animation.IsOk())
+    {
+        UpdateBackingStoreWithStaticImage();
+        return;
+    }
 
     if (m_animation.GetBackgroundColour() == wxNullColour)
@@ -338,7 +345,4 @@
         FitToAnimation();
 
-    // reset frame counter
-    m_currentFrame = 0;
-
     UpdateBackingStoreWithStaticImage();
 }
@@ -348,4 +352,13 @@
     m_bmpStatic = bmp;
 
+    // in case the given bitmap has a mask associated,
+    // then we need to set as our background colour the
+    // colour of our parent otherwise when calling DrawCurrentFrame() 
+    // (which uses the bitmap's mask), our background colour
+    // would be used for transparent areas - and that's not 
+    // what we want (at least for coherency with GTK version)
+    if (bmp.GetMask() != NULL && GetParent() != NULL)
+        SetBackgroundColour(GetParent()->GetBackgroundColour());
+
     // if not playing, update the backing store now
     if (!IsPlaying())
@@ -358,4 +371,17 @@
 }
 
+bool wxAnimationCtrl::SetBackgroundColour(const wxColour& colour)
+{
+    if (!wxWindow::SetBackgroundColour(colour))
+        return false;
+
+    // if not playing this change must be seen immediately
+    // (unless there's an inactive bitmap set; in that case the
+    //  bitmap has higher priority over bg colour)
+    if (!IsPlaying())
+        UpdateBackingStoreWithStaticImage();
+    return true;
+}
+
 
 // ----------------------------------------------------------------------------
@@ -368,4 +394,7 @@
     m_isPlaying = false;
 
+    // reset frame counter
+    m_currentFrame = 0;
+
     UpdateBackingStoreWithStaticImage();
 }
@@ -508,5 +537,14 @@
     {
         // copy the inactive bitmap in the backing store
-        m_backingStore = m_bmpStatic;
+        // eventually using the mask if the static bitmap has one
+        if (m_bmpStatic.GetMask())
+        {
+            wxMemoryDC temp;
+            temp.SelectObject(m_backingStore);
+            DisposeToBackground(temp);
+            temp.DrawBitmap(m_bmpStatic, 0, 0, true /* use mask */);
+        }
+        else
+            m_backingStore = m_bmpStatic;
     }
     else
@@ -558,4 +596,5 @@
                     ? GetBackgroundColour()
                     : m_animation.GetBackgroundColour();
+
     wxBrush brush(col);
     dc.SetBackground(brush);
@@ -584,5 +623,10 @@
 
     if ( m_backingStore.IsOk() )
-        DrawCurrentFrame(dc);
+    {
+        // NOTE: we draw the bitmap explicitely ignoring the mask (if any);
+        //       i.e. we don't want to combine the backing store with the 
+        //       possibly wrong preexisting contents of the window!
+        dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+    }
     else
     {
@@ -640,6 +684,6 @@
         if (IsPlaying())
         {
-        if (!RebuildBackingStoreUpToFrame(m_currentFrame))
-            Stop();     // in case we are playing
+            if (!RebuildBackingStoreUpToFrame(m_currentFrame))
+                Stop();     // in case we are playing
         }
     }
Index: src/gtk/animate.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/animate.cpp,v
retrieving revision 1.10
diff -u2 -r1.10 src/gtk/animate.cpp
--- src/gtk/animate.cpp
+++ src/gtk/animate.cpp
@@ -60,4 +60,11 @@
 }
 
+wxAnimation::wxAnimation(GdkPixbufAnimation *p)
+{
+    m_pixbuf = p;
+    if (m_pixbuf)
+        g_object_ref(m_pixbuf);
+}
+
 wxAnimation& wxAnimation::operator=(const wxAnimation& that)
 {
@@ -272,5 +279,5 @@
 
     // update our size to fit animation
-        SetSize(w, h);
+    SetSize(w, h);
 }
 
@@ -409,5 +416,11 @@
     if (!wxControl::SetBackgroundColour(colour))
         return false;
-    ClearToBackgroundColour();
+
+    // if not playing the change must take place immediately but
+    // remember that the inactive bitmap has higher priority over the background
+    // colour; DisplayStaticImage() will handle that
+    if (!IsPlaying())
+        DisplayStaticImage();
+
     return true;
 }

 	  	 

--- grid.cpp_orig	Sat Sep  7 12:08:13 2002
+++ grid.cpp	Sun Sep  8 14:40:10 2002
@@ -1557,4 +1557,13 @@
 {
     wxRect rect = rectCell;
+    rect.Inflate(-1);
+
+    // erase only this cells background, overflow cells should have been erased
+    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
+
+    int hAlign, vAlign;
+    attr.GetAlignment(&hAlign, &vAlign);
+
+    int overflowCols = 0;
 
     if (attr.GetOverflow())
@@ -1564,4 +1573,5 @@
         int cell_rows, cell_cols;
         attr.GetSize( &cell_rows, &cell_cols ); // shouldn't get here if <=0
+
         if ((best_width > rectCell.width) && (col < cols) && grid.GetTable())
         {
@@ -1569,27 +1579,64 @@
             for (i = col+cell_cols; i < cols; i++)
             {
+                bool is_empty = TRUE;
+                for (int j=row; j<row+cell_rows; j++)
+                {
                 // check w/ anchor cell for multicell block
-                grid.GetCellSize(row, i, &c_rows, &c_cols);
+                    grid.GetCellSize(j, i, &c_rows, &c_cols);
                 if (c_rows > 0) c_rows = 0;
-                if (grid.GetTable()->IsEmptyCell(row+c_rows, i))
+
+                    if (!grid.GetTable()->IsEmptyCell(j+c_rows, i))
                 {
-                    rect.width += grid.GetColSize(i);
-                    if (rect.width >= best_width) break;
+                        is_empty = FALSE;
+                        break;
+                    }
                 }
-                else break;
+                if (is_empty)
+                    rect.width += grid.GetColSize(i);
+                else
+                {
+                    i--;
+                    break;
             }
+
+                if (rect.width >= best_width) break;
         }
+            overflowCols = i - col - cell_cols + 1;
+            if (overflowCols >= cols) overflowCols = cols - 1;
     }
 
-    // erase only this cells background, overflow cells should have been erased
-    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
+        if (overflowCols > 0) // redraw overflow cells w/ proper hilight
+        {
+            hAlign = wxALIGN_LEFT; // if oveflowed then it's left aligned
 
-    // now we only have to draw the text
-    SetTextColoursAndFont(grid, attr, dc, isSelected);
+            wxRect clip = rect; 
+            clip.x += rectCell.width;
 
-    int hAlign, vAlign;
-    attr.GetAlignment(&hAlign, &vAlign);
+            // draw each overflow cell individually
+            int col_end = col+cell_cols+overflowCols;
+            if (col_end >= grid.GetNumberCols()) col_end = grid.GetNumberCols() - 1;
 
+            for (int i = col+cell_cols; i <= col_end; i++)
+            {
+                clip.width = grid.GetColSize(i) - 1;
+                dc.DestroyClippingRegion();
+                dc.SetClippingRegion(clip);
+
+                SetTextColoursAndFont(grid, attr, dc, grid.IsInSelection(row,i));
+
+                grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
+                                       rect, hAlign, vAlign);
+                clip.x += grid.GetColSize(i) - 1;
+            }
+
+            rect = rectCell;            // just draw the single original cell
     rect.Inflate(-1);
+            rect.width++;
+            dc.DestroyClippingRegion();
+        }
+    }
+
+    // now we only have to draw the text
+    SetTextColoursAndFont(grid, attr, dc, isSelected);
 
     grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
@@ -6307,9 +6354,9 @@
     if ( !m_numRows || !m_numCols ) return;
 
-    int i, j, k, l, numCells = cells.GetCount();
+    int numCells = cells.GetCount();
     int row, col, cell_rows, cell_cols;
     wxGridCellCoordsArray redrawCells;
 
-    for ( i = numCells-1; i >= 0;  i-- )
+    for (int i = numCells-1; i >= 0;  i-- )
     {
         row = cells[i].GetRow();
@@ -6322,5 +6369,5 @@
             wxGridCellCoords cell(row+cell_rows, col+cell_cols);
             bool marked = FALSE;
-            for ( j = 0;  j < numCells;  j++ )
+            for (int j = 0;  j < numCells;  j++ )
             {
                 if ( cell == cells[j] )
@@ -6333,5 +6380,5 @@
             {
                 int count = redrawCells.GetCount();
-                for (j = 0; j < count; j++)
+                for (int j = 0; j < count; j++)
                 {
                     if ( cell == redrawCells[j] )
@@ -6349,7 +6396,15 @@
         if (m_table && m_table->IsEmptyCell(row, col))
         {
-            for ( l = 0; l < cell_rows; l++ )
+            for (int l = 0; l < cell_rows; l++ )
             {
-                for (j = col-1; j >= 0; j--)
+                // find a cell in this row to left alreay marked for repaint
+                int left = col;
+                for (int k = 0; k < int(redrawCells.GetCount()); k++)
+                    if ((redrawCells[k].GetCol() < left) && (redrawCells[k].GetRow() == row))
+                        left=redrawCells[k].GetCol();
+
+                if (left == col) left = 0; // oh well
+
+                for (int j = col-1; j >= left; j--)
                 {
                     if (!m_table->IsEmptyCell(row+l, j))
@@ -6360,5 +6415,5 @@
                             bool marked = FALSE;
 
-                            for (k = 0; k < numCells; k++)
+                            for (int k = 0; k < numCells; k++)
                             {
                                 if ( cell == cells[k] )
@@ -6371,5 +6426,5 @@
                             {
                                 int count = redrawCells.GetCount();
-                                for (k = 0; k < count; k++)
+                                for (int k = 0; k < count; k++)
                                 {
                                     if ( cell == redrawCells[k] )
@@ -6392,5 +6447,5 @@
     numCells = redrawCells.GetCount();
 
-    for ( i = numCells - 1; i >= 0;  i-- )
+    for (int i = numCells - 1; i >= 0;  i-- )
     {
         DrawCell( dc, redrawCells[i] );
@@ -7123,4 +7178,11 @@
                 rect.y--;
 
+#if defined (__WXGTK__)
+            rect.x--;
+            rect.y--;
+            rect.width += 3;
+            rect.height += 3;
+#endif
+
             wxGridCellAttr* attr = GetCellAttr(row, col);
             wxGridCellEditor* editor = attr->GetEditor(this, row, col);
@@ -7142,30 +7204,33 @@
 
             // resize editor to overflow into righthand cells if allowed
+            int maxWidth = rect.width;
+
             wxString value = GetCellValue(row, col);
-            if ( (value != wxEmptyString) && (attr->GetOverflow()) )
+            if (value != wxEmptyString)
             {
-                wxClientDC dc(m_gridWin);
-                wxCoord y = 0, best_width = 0;
-                dc.SetFont(attr->GetFont());
-                dc.GetTextExtent(value, &best_width, &y);
+                int y;
+                GetTextExtent(value, &maxWidth, &y, NULL, NULL, &attr->GetFont());
+                if (maxWidth < rect.width) maxWidth = rect.width;
+            }
 
-                int cell_rows, cell_cols;
-                attr->GetSize( &cell_rows, &cell_cols );
+            int client_right = m_gridWin->GetClientSize().GetWidth();
+            if (rect.x+maxWidth > client_right) maxWidth = client_right - rect.x;
 
-                if ((best_width > rect.width) && (col < m_numCols) && m_table)
+            if ((maxWidth > rect.width) && (col < m_numCols) && m_table)
                 {
-                    int i;
-                    for (i = col+cell_cols; i < m_numCols; i++)
-                    {
-                        if (m_table->IsEmptyCell(row,i))
+                GetCellSize( row, col, &cell_rows, &cell_cols );  // may have changed earlier
+
+                for (int i = col+cell_cols; i < m_numCols; i++)
                         {
+                    int c_rows, c_cols;
+                    GetCellSize( row, i, &c_rows, &c_cols ); // looks weird going over a multicell
+                    if (m_table->IsEmptyCell(row,i) && (rect.width < maxWidth) && (c_rows == 1))
                             rect.width += GetColWidth(i);
-                            if (rect.width >= best_width) break;
-                        }
                         else
                             break;
                     }
+                if (rect.GetRight() > client_right) rect.SetRight(client_right-1);
                 }
-            }
+
             editor->SetSize( rect );
 



############ cut me off if you do a diff

void wxGridCellStringRenderer::Draw(wxGrid& grid,
                                    wxGridCellAttr& attr,
                                    wxDC& dc,
                                    const wxRect& rectCell,
                                    int row, int col,
                                    bool isSelected)
{
    wxRect rect = rectCell;
    rect.Inflate(-1);

    // erase only this cells background, overflow cells should have been erased
    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);

    int hAlign, vAlign;
    attr.GetAlignment(&hAlign, &vAlign);

    int overflowCols = 0;

    if (attr.GetOverflow())
    {
        int cols = grid.GetNumberCols();
        int best_width = GetBestSize(grid,attr,dc,row,col).GetWidth();
        int cell_rows, cell_cols;
        attr.GetSize( &cell_rows, &cell_cols ); // shouldn't get here if <=0

        if ((best_width > rectCell.width) && (col < cols) && grid.GetTable())
        {
            int i, c_cols, c_rows;
            for (i = col+cell_cols; i < cols; i++)
            {
                bool is_empty = TRUE;
                for (int j=row; j<row+cell_rows; j++)
                {
                    // check w/ anchor cell for multicell block
                    grid.GetCellSize(j, i, &c_rows, &c_cols);
                    if (c_rows > 0) c_rows = 0;

                    if (!grid.GetTable()->IsEmptyCell(j+c_rows, i))
                    {
                        is_empty = FALSE;
                        break;
                    }
                }
                if (is_empty)
                    rect.width += grid.GetColSize(i);
                else
                {
                    i--;
                    break;
                }

                if (rect.width >= best_width) break;
            }
            overflowCols = i - col - cell_cols + 1;
            if (overflowCols >= cols) overflowCols = cols - 1;
        }

        if (overflowCols > 0) // redraw overflow cells w/ proper hilight
        {
            hAlign = wxALIGN_LEFT; // if oveflowed then it's left aligned

            wxRect clip = rect; 
            clip.x += rectCell.width;

            // draw each overflow cell individually
            int col_end = col+cell_cols+overflowCols;
            if (col_end >= grid.GetNumberCols()) col_end = grid.GetNumberCols() - 1;

            for (int i = col+cell_cols; i <= col_end; i++)
            {
                clip.width = grid.GetColSize(i) - 1;
                dc.DestroyClippingRegion();
                dc.SetClippingRegion(clip);

                SetTextColoursAndFont(grid, attr, dc, grid.IsInSelection(row,i));

                grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
                                       rect, hAlign, vAlign);
                clip.x += grid.GetColSize(i) - 1;
            }

            rect = rectCell;            // just draw the single original cell
            rect.Inflate(-1);
            rect.width++;
            dc.DestroyClippingRegion();
        }
    }

    // now we only have to draw the text
    SetTextColoursAndFont(grid, attr, dc, isSelected);

    grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
                           rect, hAlign, vAlign);
}



########### this is at the end of  ShowCellEditControl


            editor->Show( TRUE, attr );

            // resize editor to overflow into righthand cells if allowed
            int maxWidth = rect.width;

            wxString value = GetCellValue(row, col);
            if (value != wxEmptyString)
            {
                int y;
                GetTextExtent(value, &maxWidth, &y, NULL, NULL, &attr->GetFont());
                if (maxWidth < rect.width) maxWidth = rect.width;
            }

            int client_right = m_gridWin->GetClientSize().GetWidth();
            if (rect.x+maxWidth > client_right) maxWidth = client_right - rect.x;

            if ((maxWidth > rect.width) && (col < m_numCols) && m_table)
            {
                GetCellSize( row, col, &cell_rows, &cell_cols );  // may have changed earlier

                for (int i = col+cell_cols; i < m_numCols; i++)
                {
                    int c_rows, c_cols;
                    GetCellSize( row, i, &c_rows, &c_cols ); // looks weird going over a multicell
                    if (m_table->IsEmptyCell(row,i) && (rect.width < maxWidth) && (c_rows == 1))
                        rect.width += GetColWidth(i);
                    else
                        break;
                }
                if (rect.GetRight() > client_right) rect.SetRight(client_right-1);
            }

            editor->SetSize( rect );

            editor->BeginEdit(row, col, this);

            editor->DecRef();
            attr->DecRef();
         }
    }
}




 	  	 

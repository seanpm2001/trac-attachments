Index: include/wx/dynarray.h
===================================================================
--- include/wx/dynarray.h	(revision 50038)
+++ include/wx/dynarray.h	(working copy)
@@ -1007,6 +1007,12 @@
 WX_DEFINE_USER_EXPORTED_ARRAY_PTR(void *, wxArrayPtrVoid, class WXDLLIMPEXP_BASE);
 
 // -----------------------------------------------------------------------------
+// Predefined arrays that really use one of the above, but named differently
+// For portablility (in case type changes) and readability.
+// -----------------------------------------------------------------------------
+#define wxArrayWindowId wxArrayInt
+
+// -----------------------------------------------------------------------------
 // convenience macros
 // -----------------------------------------------------------------------------
 
Index: include/wx/menuitem.h
===================================================================
--- include/wx/menuitem.h	(revision 50038)
+++ include/wx/menuitem.h	(working copy)
@@ -146,6 +146,7 @@
 
 protected:
     int           m_id;             // numeric id of the item >= 0 or wxID_ANY or wxID_SEPARATOR
+    bool          m_freeId;         // whether to release the ID on destruction
     wxMenu       *m_parentMenu,     // the menu we belong to
                  *m_subMenu;        // our sub menu or NULL
     wxString      m_text,           // label of the item
Index: include/wx/msw/menu.h
===================================================================
--- include/wx/msw/menu.h	(revision 50038)
+++ include/wx/msw/menu.h	(working copy)
@@ -19,6 +19,10 @@
     WX_DEFINE_EXPORTED_ARRAY_PTR(wxAcceleratorEntry *, wxAcceleratorArray);
 #endif // wxUSE_ACCEL
 
+#if defined(WINCE_WITHOUT_COMMANDBAR) && !wxUSE_ACCEL
+    #include "wx/dynarray.h"
+#endif
+
 class WXDLLIMPEXP_FWD_CORE wxFrame;
 
 #if defined(__WXWINCE__) && wxUSE_TOOLBAR
@@ -224,9 +228,14 @@
 
 #ifdef WINCE_WITH_COMMANDBAR
     WXHWND      m_commandBar;
+    wxWindowId  m_commandBarId; // Need to be released when destroyed
     bool        m_adornmentsAdded;
 #endif
 
+#ifdef WINCE_WITHOUT_COMMANDBAR
+    wxArrayWindowId m_autoIds;
+#endif
+
 private:
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxMenuBar)
 };
Index: include/wx/msw/radiobox.h
===================================================================
--- include/wx/msw/radiobox.h	(revision 50038)
+++ include/wx/msw/radiobox.h	(working copy)
@@ -13,6 +13,7 @@
 #define _WX_RADIOBOX_H_
 
 #include "wx/statbox.h"
+#include "wx/dynarray.h"
 
 class WXDLLIMPEXP_FWD_CORE wxSubwindows;
 
@@ -158,6 +159,7 @@
 
     // the buttons we contain
     wxSubwindows *m_radioButtons;
+    wxArrayWindowId    m_radioButtonIds; // Could do like below and use our own array
 
     // array of widths and heights of the buttons, may be wxDefaultCoord if the
     // corresponding quantity should be computed
Index: include/wx/msw/slider95.h
===================================================================
--- include/wx/msw/slider95.h	(revision 50038)
+++ include/wx/msw/slider95.h	(working copy)
@@ -118,6 +118,7 @@
 
     // the labels windows, if any
     wxSubwindows *m_labels;
+    wxArrayWindowId m_labelIds; // To be released in destruction
 
     int           m_rangeMin;
     int           m_rangeMax;
Index: include/wx/os2/radiobox.h
===================================================================
--- include/wx/os2/radiobox.h	(revision 50038)
+++ include/wx/os2/radiobox.h	(working copy)
@@ -179,6 +179,10 @@
 
 
     WXHWND* m_ahRadioButtons;
+    wxArrayWindowId m_radioIds;
+    // Could also do ou own  array like;
+    // wxWindowId* m_radioIds;
+    
     int*    m_pnRadioWidth;  // for bitmaps
     int*    m_pnRadioHeight;
     int     m_nSelectedButton;
Index: include/wx/os2/slider.h
===================================================================
--- include/wx/os2/slider.h	(revision 50038)
+++ include/wx/os2/slider.h	(working copy)
@@ -138,6 +138,7 @@
     double                          m_dPixelToRange;
     int                             m_nThumbLength;
     int                             m_nSizeFlags;
+    wxArrayWindowId                 m_autoIds;
 
     virtual void DoGetSize( int* pnWidth
                            ,int* pnHeight
Index: include/wx/private/timer.h
===================================================================
--- include/wx/private/timer.h	(revision 50038)
+++ include/wx/private/timer.h	(working copy)
@@ -24,7 +24,10 @@
 public:
     // default ctor, SetOwner() must be called after it (wxTimer does it)
     wxTimerImpl(wxTimer *owner);
-
+    
+    // dtor
+    ~wxTimerImpl();
+    
     // this must be called initially but may be also called later
     void SetOwner(wxEvtHandler *owner, int timerid);
 
@@ -63,6 +66,7 @@
     wxEvtHandler *m_owner;
 
     int     m_idTimer;      // id passed to wxTimerEvent
+    bool    m_freeId;
     int     m_milli;        // the timer interval
     bool    m_oneShot;      // true if one shot
 
Index: include/wx/tbarbase.h
===================================================================
--- include/wx/tbarbase.h	(revision 50038)
+++ include/wx/tbarbase.h	(working copy)
@@ -75,9 +75,17 @@
           m_dropdownMenu(NULL)
     {
         m_tbar = tbar;
-        m_id = toolid;
-        if (m_id == wxID_ANY)
+        
+        if(toolid == wxID_ANY)
+        {
             m_id = wxWindow::NewControlId();
+            m_freeId = true;
+        }
+        else
+        {
+            m_id = toolid;
+            m_freeId = false;
+        }
         m_clientData = clientData;
 
         m_bmpNormal = bmpNormal;
@@ -100,6 +108,7 @@
         m_tbar = tbar;
         m_control = control;
         m_id = control->GetId();
+        m_freeId = false;
 
         m_kind = wxITEM_MAX;    // invalid value
 
Index: include/wx/window.h
===================================================================
--- include/wx/window.h	(revision 50038)
+++ include/wx/window.h	(working copy)
@@ -231,8 +231,15 @@
         // mark an id previously returned by NewControlId() as being unused any
         // more so that it can be reused again for another control later
     static void ReleaseControlId(wxWindowID id);
+    
+        // Used only in debug mode for a basic ID leak detection
+        // Are any IDs currently in use
+#ifdef __WXDEBUG__
+    static bool AllAutoGeneratedIdsFree();
+#endif
 
 
+
     // moving/resizing
     // ---------------
 
Index: src/common/init.cpp
===================================================================
--- src/common/init.cpp	(revision 50038)
+++ src/common/init.cpp	(working copy)
@@ -30,6 +30,9 @@
     #include "wx/thread.h"
     #include "wx/intl.h"
     #include "wx/module.h"
+    #ifdef __WXDEBUG__
+        #include "wx/window.h" // Needed for ID leak detection
+    #endif
 #endif
 
 #include "wx/init.h"
@@ -374,6 +377,16 @@
     FreeConvertedArgs();
 #endif // wxUSE_UNICODE
 
+    // Test if all auto-generated IDs have been released
+    // Since this does debug logging, any debug logging facilities should not
+    // use auto-generated IDs (else they may not be cleaned up yet)
+#ifdef __WXDEBUG__
+    if(wxWindowBase::AllAutoGeneratedIdsFree() == false)
+    {
+        ::wxLogDebug(wxT("All auto-generated IDs were not released."));
+    }
+#endif
+
     // use Set(NULL) and not Get() to avoid creating a message output object on
     // demand when we just want to delete it
     delete wxMessageOutput::Set(NULL);
Index: src/common/menucmn.cpp
===================================================================
--- src/common/menucmn.cpp	(revision 50038)
+++ src/common/menucmn.cpp	(working copy)
@@ -66,8 +66,17 @@
     m_isChecked   = false;
     m_id          = id;
     m_kind        = kind;
+    
     if (m_id == wxID_ANY)
+    {
         m_id = wxWindow::NewControlId();
+        m_freeId = true;
+    }
+    else
+    {
+        m_freeId = false;
+    }
+    
     if (m_id == wxID_SEPARATOR)
         m_kind = wxITEM_SEPARATOR;
 
@@ -78,6 +87,10 @@
 wxMenuItemBase::~wxMenuItemBase()
 {
     delete m_subMenu;
+    
+    // release control id if needed
+    if(m_freeId)
+        wxWindow::ReleaseControlId(m_id);
 }
 
 #if wxUSE_ACCEL
Index: src/common/tbarbase.cpp
===================================================================
--- src/common/tbarbase.cpp	(revision 50038)
+++ src/common/tbarbase.cpp	(working copy)
@@ -62,6 +62,10 @@
 wxToolBarToolBase::~wxToolBarToolBase()
 {
     delete m_dropdownMenu;
+    
+    // release allocated ID
+    if(m_freeId)
+        wxWindow::ReleaseControlId(m_id);
 }
 
 
Index: src/common/timerimpl.cpp
===================================================================
--- src/common/timerimpl.cpp	(revision 50038)
+++ src/common/timerimpl.cpp	(working copy)
@@ -35,14 +35,31 @@
     m_timer = timer;
     m_owner = NULL;
     m_idTimer = wxID_ANY;
+    m_freeId = false;
     m_milli = 0;
     m_oneShot = false;
 }
 
+wxTimerImpl::~wxTimerImpl()
+{
+    if(m_freeId)
+        wxWindow::ReleaseControlId();
+}
+
 void wxTimerImpl::SetOwner(wxEvtHandler *owner, int timerid)
 {
     m_owner = owner;
-    m_idTimer = timerid == wxID_ANY ? wxNewId() : timerid;
+    
+    if(timerId = wxID_ANY)
+    {
+        m_idTimer = wxWindow::NewControlId();
+        m_freeId = true;
+    }
+    else
+    {
+        m_idTimer = timerid;
+        m_freeId = false;
+    }
 }
 
 void wxTimerImpl::SendEvent()
Index: src/common/wincmn.cpp
===================================================================
--- src/common/wincmn.cpp	(revision 50038)
+++ src/common/wincmn.cpp	(working copy)
@@ -3302,6 +3302,8 @@
     }
 
     // if we get here, there are not enough consecutive free ids
+    ::wxLogError(_("Unable to generate user interface ID.  It is recommended"
+                   " to restart the application.")); // Change to something better
     return wxID_NONE;
 }
 
@@ -3311,3 +3313,20 @@
 
     FreeAutoId(id);
 }
+
+#ifdef __WXDEBUG__
+bool wxWindowBase::AllAutoGeneratedIdsFree()
+{
+    // A fast test
+    const int len = (wxID_AUTO_HIGHEST - wxID_AUTO_LOWEST + 1)/8 + 1;
+    
+    // All bytes should be 0 if they are all free
+    for(int pos = 0; pos < len; pos++)
+    {
+        if(gs_autoIdsInUse[pos] != 0x00)
+            return false;
+    }
+    
+    return true;
+}
+#endif
Index: src/generic/editlbox.cpp
===================================================================
--- src/generic/editlbox.cpp	(revision 50038)
+++ src/generic/editlbox.cpp	(working copy)
@@ -195,24 +195,7 @@
 
 IMPLEMENT_CLASS(wxEditableListBox, wxPanel)
 
-// NB: generate the IDs at runtime to avoid conflict with XRCID values,
-//     they could cause XRCCTRL() failures in XRC-based dialogs
-const int wxID_ELB_DELETE = wxWindow::NewControlId();
-const int wxID_ELB_EDIT = wxWindow::NewControlId();
-const int wxID_ELB_NEW = wxWindow::NewControlId();
-const int wxID_ELB_UP = wxWindow::NewControlId();
-const int wxID_ELB_DOWN = wxWindow::NewControlId();
-const int wxID_ELB_LISTCTRL = wxWindow::NewControlId();
 
-BEGIN_EVENT_TABLE(wxEditableListBox, wxPanel)
-    EVT_LIST_ITEM_SELECTED(wxID_ELB_LISTCTRL, wxEditableListBox::OnItemSelected)
-    EVT_LIST_END_LABEL_EDIT(wxID_ELB_LISTCTRL, wxEditableListBox::OnEndLabelEdit)
-    EVT_BUTTON(wxID_ELB_NEW, wxEditableListBox::OnNewItem)
-    EVT_BUTTON(wxID_ELB_UP, wxEditableListBox::OnUpItem)
-    EVT_BUTTON(wxID_ELB_DOWN, wxEditableListBox::OnDownItem)
-    EVT_BUTTON(wxID_ELB_EDIT, wxEditableListBox::OnEditItem)
-    EVT_BUTTON(wxID_ELB_DELETE, wxEditableListBox::OnDelItem)
-END_EVENT_TABLE()
 
 bool wxEditableListBox::Create(wxWindow *parent, wxWindowID id,
                           const wxString& label,
@@ -244,27 +227,37 @@
     if ( m_style & wxEL_ALLOW_EDIT )
     {
         m_bEdit = new wxBitmapButton(subp, wxID_ELB_EDIT, wxBitmap(eledit_xpm));
+        Connect(m_bEdit->GetId(), wxEVT_BUTTON,
+                wxCommandEventHandler(wxEditableListBox::OnEditItem));
         subsizer->Add(m_bEdit, 0, wxALIGN_CENTRE_VERTICAL | wxTOP | wxBOTTOM, BTN_BORDER);
     }
 
     if ( m_style & wxEL_ALLOW_NEW )
     {
         m_bNew = new wxBitmapButton(subp, wxID_ELB_NEW, wxBitmap(elnew_xpm));
+        Connect(m_bNew->GetId(), wxEVT_BUTTON,
+                wxCommandEventHandler(wxEditableListBox::OnNewItem));
         subsizer->Add(m_bNew, 0, wxALIGN_CENTRE_VERTICAL | wxTOP | wxBOTTOM, BTN_BORDER);
     }
 
     if ( m_style & wxEL_ALLOW_DELETE )
     {
         m_bDel = new wxBitmapButton(subp, wxID_ELB_DELETE, wxBitmap(eldel_xpm));
+        Connect(m_bDel->GetId(), wxEVT_BUTTON,
+                wxCommandEventHandler(wxEditableListBox::OnDelItem));
         subsizer->Add(m_bDel, 0, wxALIGN_CENTRE_VERTICAL | wxTOP | wxBOTTOM, BTN_BORDER);
     }
 
     if (!(m_style & wxEL_NO_REORDER))
     {
         m_bUp = new wxBitmapButton(subp, wxID_ELB_UP, wxBitmap(elup_xpm));
+        Connect(m_bUp->GetId(), wxEVT_BUTTON,
+                wxCommandEventHandler(wxEditableListBox::OnUpItem));
         subsizer->Add(m_bUp, 0, wxALIGN_CENTRE_VERTICAL | wxTOP | wxBOTTOM, BTN_BORDER);
 
         m_bDown = new wxBitmapButton(subp, wxID_ELB_DOWN, wxBitmap(eldown_xpm));
+        Connect(m_bDown->GetId(), wxEVT_BUTTON,
+                wxCommandEventHandler(wxEditableListBox::OnDownItem));
         subsizer->Add(m_bDown, 0, wxALIGN_CENTRE_VERTICAL | wxTOP | wxBOTTOM, BTN_BORDER);
     }
 
@@ -286,6 +279,12 @@
          st |= wxLC_EDIT_LABELS;
     m_listCtrl = new CleverListCtrl(this, wxID_ELB_LISTCTRL,
                                     wxDefaultPosition, wxDefaultSize, st);
+                                    
+    Connect(m_listCtrl->GetId(), wxEVT_COMMAND_LIST_ITEM_SELECTED,
+                wxListEventHandler(wxEditableListBox::OnItemSelected));
+    Connect(m_listCtrl->GetId(), wxEVT_COMMAND_LIST__END_LABEL_EDIT,
+                wxListEventHandler(wxEditableListBox::OnEndLabelEdit));
+                
     wxArrayString empty_ar;
     SetStrings(empty_ar);
 
Index: src/generic/notebook.cpp
===================================================================
--- src/generic/notebook.cpp	(revision 50038)
+++ src/generic/notebook.cpp	(working copy)
@@ -148,13 +148,9 @@
                         const wxString& name)
 {
     // base init
-    SetName(name);
-
     if ( (style & wxBK_ALIGN_MASK) == wxBK_DEFAULT )
         style |= wxBK_TOP;
 
-    m_windowId = id == wxID_ANY ? NewControlId() : id;
-
     if (!wxControl::Create(parent, id, pos, size, style|wxNO_BORDER, wxDefaultValidator, name))
         return false;
 
Index: src/mac/carbon/checkbox.cpp
===================================================================
--- src/mac/carbon/checkbox.cpp	(revision 50038)
+++ src/mac/carbon/checkbox.cpp	(working copy)
@@ -139,20 +139,6 @@
     const wxValidator& wxVALIDATOR_PARAM(validator),
     const wxString& name)
 {
-    SetName(name);
-#if wxUSE_VALIDATORS
-    SetValidator(validator);
-#endif
-    m_windowStyle = style;
-
-    if (parent)
-        parent->AddChild(this);
-
-    if ( id == -1 )
-        m_windowId = NewControlId();
-    else
-        m_windowId = id;
-
     // TODO: Create the bitmap checkbox
 
     return false;
Index: src/mac/carbon/mdi.cpp
===================================================================
--- src/mac/carbon/mdi.cpp	(revision 50038)
+++ src/mac/carbon/mdi.cpp	(working copy)
@@ -350,16 +350,8 @@
                              long style,
                              const wxString& name)
 {
-    SetName(name);
+    CreateBase(parent, id, title, pos, size, style, name);    
 
-    if ( id == wxID_ANY )
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = id;
-
-    if (parent)
-        parent->AddChild(this);
-
     MacCreateRealWindow( title, pos , size , MacRemoveBordersFromStyle(style) , name ) ;
 
     SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
Index: src/mac/carbon/statbmp.cpp
===================================================================
--- src/mac/carbon/statbmp.cpp	(revision 50038)
+++ src/mac/carbon/statbmp.cpp	(working copy)
@@ -36,19 +36,11 @@
            long style,
            const wxString& name)
 {
-    SetName(name);
-
     m_backgroundColour = parent->GetBackgroundColour() ;
     m_foregroundColour = parent->GetForegroundColour() ;
 
     m_bitmap = bitmap;
-    if ( id == wxID_ANY )
-          m_windowId = (int)NewControlId();
-    else
-        m_windowId = id;
 
-    m_windowStyle = style;
-
     bool ret = wxControl::Create( parent, id, pos, size, style , wxDefaultValidator , name );
     SetInitialSize( size ) ;
 
Index: src/mac/carbon/toplevel.cpp
===================================================================
--- src/mac/carbon/toplevel.cpp	(revision 50038)
+++ src/mac/carbon/toplevel.cpp	(working copy)
@@ -954,11 +954,8 @@
     // init our fields
     Init();
 
-    m_windowStyle = style;
+    CreateBase(parent, id, title, pos, size, style, name);
 
-    SetName( name );
-
-    m_windowId = id == -1 ? NewControlId() : id;
     wxWindow::SetLabel( title ) ;
 
     DoMacCreateRealWindow( parent, title, pos , size , style , name ) ;
@@ -970,9 +967,6 @@
 
     wxTopLevelWindows.Append(this);
 
-    if ( parent )
-        parent->AddChild(this);
-
     return true;
 }
 
Index: src/mac/carbon/treectrl.cpp
===================================================================
--- src/mac/carbon/treectrl.cpp	(revision 50038)
+++ src/mac/carbon/treectrl.cpp	(working copy)
@@ -36,19 +36,6 @@
     m_imageListState = NULL;
     m_textCtrl = NULL;
 
-    SetName(name);
-#if wxUSE_VALIDATORS
-    SetValidator(validator);
-#endif
-    SetParent(parent);
-
-    m_windowStyle = style;
-
-    m_windowId = (id == wxID_ANY) ? NewControlId() : id;
-
-    if (parent)
-        parent->AddChild(this);
-
     // TODO: create tree control
 
     return false;
Index: src/motif/mdi.cpp
===================================================================
--- src/motif/mdi.cpp	(revision 50038)
+++ src/motif/mdi.cpp	(working copy)
@@ -335,14 +335,8 @@
                              long style,
                              const wxString& name)
 {
-    SetName(name);
-    SetWindowStyleFlag(style);
+    CreateBase(parent, id, title, pos, size, style, name);
 
-    if ( id > -1 )
-        m_windowId = id;
-    else
-        m_windowId = (int)NewControlId();
-
     wxMDIClientWindow* clientWindow = parent->GetClientWindow();
 
     wxCHECK_MSG( clientWindow, false, "Missing MDI client window." );
Index: src/motif/spinbutt.cpp
===================================================================
--- src/motif/spinbutt.cpp	(revision 50038)
+++ src/motif/spinbutt.cpp	(working copy)
@@ -269,8 +269,6 @@
                            const wxPoint& pos, const wxSize& size,
                            long style, const wxString& name )
 {
-    m_windowStyle = style;
-
     wxSize newSize = GetBestSize();
     if( size.x != -1 ) newSize.x = size.x;
     if( size.y != -1 ) newSize.y = size.y;
@@ -280,17 +278,13 @@
         return false;
     }
 
-    SetName(name);
-
-    m_windowId = ( id == wxID_ANY ) ? NewControlId() : id;
-
     bool isVert = IsVertical();
     wxPoint pt1, pt2;
     wxSize sz1, sz2;
     CalcSizes( wxPoint(0,0), newSize, pt1, sz1, pt2, sz2, isVert );
-    m_up = new wxArrowButton( this, -1, isVert ? wxARROW_UP : wxARROW_RIGHT,
+    m_up = new wxArrowButton( this, wxID_ANY, isVert ? wxARROW_UP : wxARROW_RIGHT,
                               pt1, sz1, 1 );
-    m_down = new wxArrowButton( this, -1,
+    m_down = new wxArrowButton( this, wxID_ANY,
                                 isVert ? wxARROW_DOWN : wxARROW_LEFT,
                                 pt2, sz2, -1 );
 
Index: src/motif/toplevel.cpp
===================================================================
--- src/motif/toplevel.cpp	(revision 50038)
+++ src/motif/toplevel.cpp	(working copy)
@@ -103,20 +103,15 @@
                                     long style,
                                     const wxString& name )
 {
-    SetName(name);
-    m_windowStyle = style;
-
-    if ( parent )
-        parent->AddChild(this);
-
+    CreateBase(parent, id, title, pos, size, style, name);
+    
     wxTopLevelWindows.Append(this);
 
-    m_windowId = ( id > -1 ) ? id : NewControlId();
-    // MBN: More backward compatible, but uglier
+        // MBN: More backward compatible, but uglier
     m_font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
     m_inheritFont = true;
 
-    bool retval = XmDoCreateTLW( parent, id, title, pos, size, style, name );
+    bool retval = XmDoCreateTLW( parent, GetId(), title, pos, size, style, name );
 
     if( !retval ) return false;
 
Index: src/msw/bmpbuttn.cpp
===================================================================
--- src/msw/bmpbuttn.cpp	(revision 50038)
+++ src/msw/bmpbuttn.cpp	(working copy)
@@ -130,27 +130,19 @@
     const wxValidator& wxVALIDATOR_PARAM(validator),
     const wxString& name)
 {
+    CreateBase(parent, id, pos, size, style, validator, name);
+    // Or should it be wxBitmapButtonBase::Create or wxControl::Create
+    
     SetBitmapLabel(bitmap);
-    SetName(name);
 
-#if wxUSE_VALIDATORS
-    SetValidator(validator);
-#endif // wxUSE_VALIDATORS
+    
 
-    parent->AddChild(this);
-
-    m_windowStyle = style;
-
     if ( style & wxBU_AUTODRAW )
     {
         m_marginX =
         m_marginY = 4;
     }
 
-    if (id == wxID_ANY)
-        m_windowId = NewControlId();
-    else
-        m_windowId = id;
 
     long msStyle = WS_VISIBLE | WS_TABSTOP | WS_CHILD | BS_OWNERDRAW ;
 
Index: src/msw/mdi.cpp
===================================================================
--- src/msw/mdi.cpp	(revision 50038)
+++ src/msw/mdi.cpp	(working copy)
@@ -177,22 +177,14 @@
       m_windowMenu->Append(IDM_WINDOWPREV, _("&Previous"));
   }
 
+  CreateBase(parent, id, title, pos, size, style, name);
+  
   m_parentFrameActive = true;
 
   if (!parent)
     wxTopLevelWindows.Append(this);
 
-  SetName(name);
-  m_windowStyle = style;
-
-  if ( parent )
-      parent->AddChild(this);
-
-  if ( id != wxID_ANY )
-    m_windowId = id;
-  else
-    m_windowId = NewControlId();
-
+  
   WXDWORD exflags;
   WXDWORD msflags = MSWGetCreateWindowFlags(&exflags);
   msflags &= ~WS_VSCROLL;
@@ -689,18 +681,8 @@
                              long style,
                              const wxString& name)
 {
-  SetName(name);
-
-  if ( id != wxID_ANY )
-    m_windowId = id;
-  else
-    m_windowId = (int)NewControlId();
-
-  if ( parent )
-  {
-      parent->AddChild(this);
-  }
-
+  CreateBase(parent, id, pos, size, style, wxDefaultValidator, name);
+  
   int x = pos.x;
   int y = pos.y;
   int width = size.x;
@@ -708,7 +690,7 @@
 
   MDICREATESTRUCT mcs;
 
-  mcs.szClass = style & wxFULL_REPAINT_ON_RESIZE
+  mcs.szClass = m_windowStyle & wxFULL_REPAINT_ON_RESIZE
                     ? wxMDIChildFrameClassName
                     : wxMDIChildFrameClassNameNoRedraw;
   mcs.szTitle = title.wx_str();
@@ -734,19 +716,19 @@
       mcs.cy = CW_USEDEFAULT;
 
   DWORD msflags = WS_OVERLAPPED | WS_CLIPCHILDREN;
-  if (style & wxMINIMIZE_BOX)
+  if (m_windowStyle & wxMINIMIZE_BOX)
     msflags |= WS_MINIMIZEBOX;
-  if (style & wxMAXIMIZE_BOX)
+  if (m_windowStyle & wxMAXIMIZE_BOX)
     msflags |= WS_MAXIMIZEBOX;
-  if (style & wxRESIZE_BORDER)
+  if (m_windowStyle & wxRESIZE_BORDER)
     msflags |= WS_THICKFRAME;
-  if (style & wxSYSTEM_MENU)
+  if (m_windowStyle & wxSYSTEM_MENU)
     msflags |= WS_SYSMENU;
-  if ((style & wxMINIMIZE) || (style & wxICONIZE))
+  if ((m_windowStyle & wxMINIMIZE) || (m_windowStyle & wxICONIZE))
     msflags |= WS_MINIMIZE;
-  if (style & wxMAXIMIZE)
+  if (m_windowStyle & wxMAXIMIZE)
     msflags |= WS_MAXIMIZE;
-  if (style & wxCAPTION)
+  if (m_windowStyle & wxCAPTION)
     msflags |= WS_CAPTION;
 
   mcs.style = msflags;
Index: src/msw/menu.cpp
===================================================================
--- src/msw/menu.cpp	(revision 50038)
+++ src/msw/menu.cpp	(working copy)
@@ -839,6 +839,7 @@
     // menubar.
 #if defined(WINCE_WITH_COMMANDBAR)
     m_commandBar = NULL;
+    m_commandBarId = wxID_NONE;
     m_adornmentsAdded = false;
 #endif
 }
@@ -893,6 +894,21 @@
         m_hMenu = (WXHMENU)NULL;
     }
 #endif
+
+// Make sure to release any used automatic generated ids
+#ifdef WINCE_WITHOUT_COMMANDBAR
+    for(int pos = 0; pos < m_autoIds.size(); int++)
+    {
+        ReleaseControlId(m_autoIds[pos]);
+    }
+#endif
+
+#ifdef WINCE_WITH_COMMANDBAR
+    if(m_commandBarId != wxID_NONE)
+    {
+        ReleaseControlId(m_commandBarId);
+    }
+#endif
 }
 
 // ---------------------------------------------------------------------------
@@ -954,7 +970,11 @@
         wxString label = wxStripMenuCodes(GetMenuLabel(i));
         tbButton.iString = (int) label.wx_str();
 
-        tbButton.idCommand = NewControlId();
+        // Add button id to auto-generate list for later releasing
+        wxWindowId btnId = NewControlId();
+        m_autoIds.Add(btnId);
+        tbButton.idCommand = btnId;
+        
         if ( !::SendMessage(hCommandBar, TB_INSERTBUTTON, i, (LPARAM)&tbButton) )
         {
             wxLogLastError(wxT("TB_INSERTBUTTON"));
@@ -1189,7 +1209,11 @@
         wxString label = wxStripMenuCodes(title);
         tbButton.iString = (int) label.wx_str();
 
-        tbButton.idCommand = NewControlId();
+        // Remember id to release it later
+        wxWindowId btnId = NewControlId();
+        tbButton.idCommand = btnId;
+        m_autoIds.Add(btnId);
+        
         if (!::SendMessage((HWND) GetToolBar()->GetHWND(), TB_INSERTBUTTON, pos, (LPARAM)&tbButton))
         {
             wxLogLastError(wxT("TB_INSERTBUTTON"));
@@ -1250,7 +1274,11 @@
         wxString label = wxStripMenuCodes(title);
         tbButton.iString = (int) label.wx_str();
 
-        tbButton.idCommand = NewControlId();
+        // Remember id to release it later
+        wxWindowId btnId = NewControlId();
+        tbButton.idCommand = btnId;
+        m_autoIds.Add(btnId);
+        
         if (!::SendMessage((HWND) GetToolBar()->GetHWND(), TB_INSERTBUTTON, pos, (LPARAM)&tbButton))
         {
             wxLogLastError(wxT("TB_INSERTBUTTON"));
@@ -1294,6 +1322,29 @@
 #if defined(WINCE_WITHOUT_COMMANDBAR)
         if (GetToolBar())
         {
+            TBBUTTON tbb;
+            
+            // First, get the ID of the button and release it if is it in the list
+            if (!::SendMessage((HWND) GetToolBar()->GetHWND(), TB_GETBUTTON, (UINT) pos, (LPARAM) &tbb))
+            {
+                wxLogLastError(wxT("TB_GETBUTTON"));
+            }
+            
+            // Release id if needed
+            for(int arpos = 0; arpos < m_autoIds.size(); arpos++)
+            {
+                // TODO: Make sure the item is properly cast
+                // According to PSDK, the type is an int
+                if(m_autoIds[arpos] == (wxWindowId)tbb.idCommand)
+                {
+                    wxWindow::ReleaseControlId(m_autoIds[arPos]);
+                    m_autoIds.RemoveAt(arpos);
+                    break;
+                }
+            }
+            
+            
+        
             if (!::SendMessage((HWND) GetToolBar()->GetHWND(), TB_DELETEBUTTON, (UINT) pos, (LPARAM) 0))
             {
                 wxLogLastError(wxT("TB_DELETEBUTTON"));
@@ -1362,7 +1413,16 @@
     if (!m_hMenu)
         this->Create();
     if (!m_commandBar)
-        m_commandBar = (WXHWND) CommandBar_Create(wxGetInstance(), (HWND) frame->GetHWND(), NewControlId());
+    {
+        m_commandBarId = NewControlId();
+        m_commandBar = (WXHWND) CommandBar_Create(wxGetInstance(), (HWND) frame->GetHWND(), m_commandBarId);
+        if(!m_commandBar)
+        {
+            ReleaseControlId(m_commandBarId);
+            m_commandBarId = wxID_NONE;
+        }
+    }
+    
     if (m_commandBar)
     {
         if (m_hMenu)
Index: src/msw/radiobox.cpp
===================================================================
--- src/msw/radiobox.cpp	(revision 50038)
+++ src/msw/radiobox.cpp	(working copy)
@@ -159,6 +159,9 @@
     m_radioWidth = new int[n];
     m_radioHeight = new int[n];
 
+    // Try to allocate all needed IDs at once
+    long nextId = NewControlId(n + 1);
+    
     for ( int i = 0; i < n; i++ )
     {
         m_radioWidth[i] =
@@ -167,7 +170,8 @@
         if ( i == 0 )
             styleBtn |= WS_GROUP;
 
-        long newId = NewControlId();
+        long newId = (nextId == wxID_NONE) ? NewControlId() : nextId++;
+        m_radioButtonIds.Add(newId);
 
         HWND hwndBtn = ::CreateWindow(_T("BUTTON"),
                                       choices[i].wx_str(),
@@ -193,11 +197,14 @@
     }
 
     // Create a dummy radio control to end the group.
+    long newId = (nextId == wxID_NONE) ? NewControlId() : nextId++;
+    m_radioButtonIds.Add(newId);
+    
     (void)::CreateWindow(_T("BUTTON"),
                          wxEmptyString,
                          WS_GROUP | BS_AUTORADIOBUTTON | WS_CHILD,
                          0, 0, 0, 0, GetHwndOf(parent),
-                         (HMENU)NewControlId(), wxGetInstance(), NULL);
+                         (HMENU)newId, wxGetInstance(), NULL);
 
     m_radioButtons->SetFont(GetFont());
 
@@ -239,6 +246,12 @@
     delete m_radioButtons;
     delete[] m_radioWidth;
     delete[] m_radioHeight;
+    
+    // Release IDs
+    for(int pos = 0; pos < m_radioButtonIds.size(); pos++)
+    {
+        ReleaseControlId(m_radioButtonIds[pos]);
+    }
 }
 
 // NB: if this code is changed, wxGetWindowForHWND() which relies on having the
Index: src/msw/slider95.cpp
===================================================================
--- src/msw/slider95.cpp	(revision 50038)
+++ src/msw/slider95.cpp	(working copy)
@@ -204,10 +204,15 @@
     if ( m_windowStyle & wxSL_LABELS )
     {
         m_labels = new wxSubwindows(SliderLabel_Last);
-
+        wxWindowId nextId = NewControlId(SliderLabel_Last);
+        
         HWND hwndParent = GetHwndOf(parent);
         for ( size_t n = 0; n < SliderLabel_Last; n++ )
         {
+            // Label id
+            wxWindowId lblId = (nextId == wxID_NONE) ? NewControlId() : nextId++;
+            m_labelIds.Add(lblId);
+            
             (*m_labels)[n] = ::CreateWindow
                                (
                                     wxT("STATIC"),
@@ -215,7 +220,7 @@
                                     WS_CHILD | WS_VISIBLE | SS_CENTER,
                                     0, 0, 0, 0,
                                     hwndParent,
-                                    (HMENU)NewControlId(),
+                                    (HMENU)lblId,
                                     wxGetInstance(),
                                     NULL
                                );
@@ -282,6 +287,12 @@
 wxSlider::~wxSlider()
 {
     delete m_labels;
+    
+    // release IDs
+    for(int pos = 0; pos < m_labelIds.size(); pos++)
+    {
+        ReleaseControlId(m_labelIds[pos];
+    }
 }
 
 // ----------------------------------------------------------------------------
Index: src/msw/spinbutt.cpp
===================================================================
--- src/msw/spinbutt.cpp	(revision 50038)
+++ src/msw/spinbutt.cpp	(working copy)
@@ -126,19 +126,16 @@
                           const wxString& name)
 {
     // basic initialization
-    m_windowId = (id == wxID_ANY) ? NewControlId() : id;
-
-    SetName(name);
-
+    CreateBase(parent, id, pos, size, style, wxDefaultValidator, name);
+    
+    
     int x = pos.x;
     int y = pos.y;
     int width = size.x;
     int height = size.y;
 
-    m_windowStyle = style;
+    
 
-    SetParent(parent);
-
     // get the right size for the control
     if ( width <= 0 || height <= 0 )
     {
@@ -188,11 +185,6 @@
         return false;
     }
 
-    if ( parent )
-    {
-        parent->AddChild(this);
-    }
-
     SubclassWin(m_hWnd);
 
     SetInitialSize(size);
Index: src/msw/statbr95.cpp
===================================================================
--- src/msw/statbr95.cpp	(revision 50038)
+++ src/msw/statbr95.cpp	(working copy)
@@ -68,14 +68,8 @@
 {
     wxCHECK_MSG( parent, false, wxT("status bar must have a parent") );
 
-    SetName(name);
-    SetWindowStyleFlag(style);
-    SetParent(parent);
-
-    parent->AddChild(this);
-
-    m_windowId = id == wxID_ANY ? NewControlId() : id;
-
+    CreateBase(parent, id, wxDefaultPosition, wxDefaultSize, style, wxDefaultValidator, name);
+    
     DWORD wstyle = WS_CHILD | WS_VISIBLE;
 
     if ( style & wxCLIP_SIBLINGS )
Index: src/msw/tabctrl.cpp
===================================================================
--- src/msw/tabctrl.cpp	(revision 50038)
+++ src/msw/tabctrl.cpp	(working copy)
@@ -53,17 +53,13 @@
       GetGValue(GetSysColor(COLOR_BTNFACE)), GetBValue(GetSysColor(COLOR_BTNFACE)));
   m_foregroundColour = *wxBLACK ;
 
-  SetName(name);
+  CreateBase(parent, id, pos, size, style, wxDefaultValidator, name);
 
   int x = pos.x;
   int y = pos.y;
   int width = size.x;
   int height = size.y;
 
-  m_windowStyle = style;
-
-  SetParent(parent);
-
   if (width <= 0)
     width = 100;
   if (height <= 0)
@@ -73,8 +69,6 @@
   if (y < 0)
     y = 0;
 
-  m_windowId = (id < 0 ? NewControlId() : id);
-
   long tabStyle = WS_CHILD | WS_VISIBLE;
   if (m_windowStyle & wxTC_MULTILINE)
     tabStyle |= TCS_MULTILINE;
@@ -103,7 +97,6 @@
     NULL );                                 // No class data.
 
   m_hWnd = (WXHWND) hWndTabCtrl;
-  if (parent) parent->AddChild(this);
 
   SubclassWin((WXHWND) hWndTabCtrl);
 
Index: src/msw/toplevel.cpp
===================================================================
--- src/msw/toplevel.cpp	(revision 50038)
+++ src/msw/toplevel.cpp	(working copy)
@@ -513,18 +513,11 @@
     {
         sizeReal.SetDefaults(GetDefaultSize());
     }
+    
+    CreateBase(parent, id, pos, sizeReal, style, wxDefaultValidator, name);
 
-    m_windowStyle = style;
-
-    SetName(name);
-
-    m_windowId = id == wxID_ANY ? NewControlId() : id;
-
     wxTopLevelWindows.Append(this);
 
-    if ( parent )
-        parent->AddChild(this);
-
     if ( GetExtraStyle() & wxTOPLEVEL_EX_DIALOG )
     {
         // we have different dialog templates to allows creation of dialogs
@@ -546,7 +539,7 @@
 
         // reuse the code in MSWGetStyle() but correct the results slightly for
         // the dialog
-        dlgTemplate->style = MSWGetStyle(style, &dlgTemplate->dwExtendedStyle);
+        dlgTemplate->style = MSWGetStyle(m_windowStyle, &dlgTemplate->dwExtendedStyle);
 
         // all dialogs are popups
         dlgTemplate->style |= WS_POPUP;
@@ -558,7 +551,7 @@
         }
 
         // force 3D-look if necessary, it looks impossibly ugly otherwise
-        if ( style & (wxRESIZE_BORDER | wxCAPTION) )
+        if ( m_windowStyle & (wxRESIZE_BORDER | wxCAPTION) )
             dlgTemplate->style |= DS_MODALFRAME;
 #endif
 
@@ -589,7 +582,7 @@
     // Note: if we include PocketPC in this test, dialogs can fail to show up,
     // for example the text entry dialog in the dialogs sample. Problem with Maximise()?
 #if defined(__WXWINCE__) && (defined(__SMARTPHONE__) || defined(__WINCE_STANDARDSDK__))
-    if ( ( style & wxMAXIMIZE ) || IsAlwaysMaximized() )
+    if ( ( m_windowStyle & wxMAXIMIZE ) || IsAlwaysMaximized() )
     {
         this->Maximize();
     }
Index: src/msw/wince/tbarwce.cpp
===================================================================
--- src/msw/wince/tbarwce.cpp	(revision 50038)
+++ src/msw/wince/tbarwce.cpp	(working copy)
@@ -597,11 +597,8 @@
     // TODO: we may need to make this a dummy hidden window to
     // satisfy other parts of wxWidgets.
 
-    parent->AddChild(this);
+    CreateBase(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, style, wxDefaultValidator, name);
 
-    SetWindowStyle(style);
-    SetName(name);
-
     return true;
 }
 
Index: src/os2/bmpbuttn.cpp
===================================================================
--- src/os2/bmpbuttn.cpp	(revision 50038)
+++ src/os2/bmpbuttn.cpp	(working copy)
@@ -35,19 +35,15 @@
                              const wxValidator& rValidator,
                              const wxString&    rsName )
 {
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+    
     m_bmpNormal = rBitmap;
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
 
-    pParent->AddChild(this);
-
     m_backgroundColour = pParent->GetBackgroundColour() ;
     m_foregroundColour = pParent->GetForegroundColour() ;
-    m_windowStyle = lStyle;
 
-    if (lStyle & wxBU_AUTODRAW)
+
+    if (m_windowStyle & wxBU_AUTODRAW)
     {
         m_marginX = wxDEFAULT_BUTTON_MARGIN;
         m_marginY = wxDEFAULT_BUTTON_MARGIN;
@@ -58,10 +54,6 @@
     int nWidth  = rSize.x;
     int nHeight = rSize.y;
 
-    if (vId == wxID_ANY)
-        m_windowId = NewControlId();
-    else
-        m_windowId = vId;
 
     if (nWidth == wxDefaultCoord && rBitmap.Ok())
         nWidth = rBitmap.GetWidth() + 4 * m_marginX;
Index: src/os2/button.cpp
===================================================================
--- src/os2/button.cpp	(revision 50038)
+++ src/os2/button.cpp	(working copy)
@@ -58,16 +58,8 @@
 
     wxString                        sLabel = ::wxPMTextToLabel(rsLabel);
 
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
-    m_windowStyle = lStyle;
-    pParent->AddChild((wxButton *)this);
-    if (vId == -1)
-        m_windowId = NewControlId();
-    else
-        m_windowId = vId;
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+
     lStyle = WS_VISIBLE | WS_TABSTOP | BS_PUSHBUTTON;
 
     //
@@ -85,7 +77,7 @@
                                        ,0, 0, 0, 0           // Location and size
                                        ,GetHwndOf(pParent)   // Owner handle
                                        ,HWND_TOP             // Top of Z-Order
-                                       ,vId                  // Identifier
+                                       ,m_windowId           // Identifier
                                        ,NULL                 // No control data
                                        ,NULL                 // No Presentation parameters
                                       );
Index: src/os2/checkbox.cpp
===================================================================
--- src/os2/checkbox.cpp	(revision 50038)
+++ src/os2/checkbox.cpp	(working copy)
@@ -161,21 +161,11 @@
                                const wxValidator& rValidator,
                                const wxString&    rsName)
 {
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
-    if (pParent)
-        pParent->AddChild(this);
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
 
     SetBackgroundColour(pParent->GetBackgroundColour()) ;
     SetForegroundColour(pParent->GetForegroundColour()) ;
-    m_windowStyle = lStyle;
 
-    if (vId == -1)
-        m_windowId = NewControlId();
-    else
-        m_windowId = vId;
 
     int                             nX      = rPos.x;
     int                             nY      = rPos.y;
Index: src/os2/gauge.cpp
===================================================================
--- src/os2/gauge.cpp	(revision 50038)
+++ src/os2/gauge.cpp	(working copy)
@@ -146,24 +146,14 @@
     long lMsStyle = 0L;
     SWP vSwp;
 
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
-    if (pParent)
-        pParent->AddChild(this);
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+
     m_backgroundColour.Set(wxString(wxT("LIGHT GREY")));
     m_foregroundColour.Set(wxString(wxT("NAVY")));
 
     m_nRangeMax   = nRange;
     m_nGaugePos   = 0;
-    m_windowStyle = lStyle;
 
-    if (vId == wxID_ANY)
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = vId;
-
     if (m_windowStyle & wxCLIP_SIBLINGS )
         lMsStyle |= WS_CLIPSIBLINGS;
 
Index: src/os2/listbox.cpp
===================================================================
--- src/os2/listbox.cpp	(revision 50038)
+++ src/os2/listbox.cpp	(working copy)
@@ -114,28 +114,19 @@
     m_hWnd      = 0;
     m_nSelected = 0;
 
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
 
-    if (pParent)
-        pParent->AddChild(this);
-
     wxSystemSettings                vSettings;
 
     SetBackgroundColour(vSettings.GetColour(wxSYS_COLOUR_WINDOW));
     SetForegroundColour(pParent->GetForegroundColour());
 
-    m_windowId = (vId == -1) ? (int)NewControlId() : vId;
 
     int                             nX      = rPos.x;
     int                             nY      = rPos.y;
     int                             nWidth  = rSize.x;
     int                             nHeight = rSize.y;
 
-    m_windowStyle = lStyle;
-
     lStyle = WS_VISIBLE;
 
     if (m_windowStyle & wxCLIP_SIBLINGS )
Index: src/os2/listctrl.cpp
===================================================================
--- src/os2/listctrl.cpp	(revision 50038)
+++ src/os2/listctrl.cpp	(working copy)
@@ -821,13 +821,6 @@
     int nWidth = rSize.x;
     int nHeight = rSize.y;
 
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif // wxUSE_VALIDATORS
-
-    SetName(rsName);
-    SetWindowStyleFlag(lStyle);
-    SetParent(pParent);
     if (nWidth <= 0)
         nWidth = 100;
     if (nHeight <= 0)
@@ -837,7 +830,7 @@
     if (nY < 0)
         nY = 0;
 
-    m_windowId = (vId == -1) ? NewControlId() : vId;
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
 
     long lSstyle = WS_VISIBLE | WS_TABSTOP;
 
@@ -850,8 +843,7 @@
                          ,nHeight
                         ))
         return false;
-    if (pParent)
-        pParent->AddChild(this);
+
    return true;
 } // end of wxListCtrl::Create
 
Index: src/os2/radiobox.cpp
===================================================================
--- src/os2/radiobox.cpp	(revision 50038)
+++ src/os2/radiobox.cpp	(working copy)
@@ -95,6 +95,13 @@
         delete[] m_pnRadioWidth;
     if (m_pnRadioHeight)
         delete[] m_pnRadioHeight;
+        
+    // release ids
+    for(int pos = 0; pos < m_radioIds.size(); pos++)
+    {
+        ReleaseControlId(m_radioIds[pos]);
+    }
+    
 } // end of wxRadioBox::~wxRadioBox
 
 void wxRadioBox::Command ( wxCommandEvent& rEvent )
@@ -184,12 +191,17 @@
     m_ahRadioButtons = new WXHWND[nNum];
     m_pnRadioWidth   = new int[nNum];
     m_pnRadioHeight  = new int[nNum];
+    
+    wxWindowId nextId = NewControlId(nNum + 1);
 
     for (int i = 0; i < nNum; i++)
     {
         m_pnRadioWidth[i] = m_pnRadioHeight[i] = -1;
         long                        lStyleBtn = BS_AUTORADIOBUTTON | WS_VISIBLE;
-        int                         nNewId = NewControlId();
+        
+        // Id for radio control
+        wxWindow nNewId = (nextId == wxID_NONE) ? NewControlId() : nextId++;
+        m_radioIds.Add(nNewId);
 
         if (i == 0)
             lStyleBtn |= WS_GROUP | WS_TABSTOP;
@@ -237,6 +249,9 @@
     //
     // Create a dummy control to end the group.
     //
+    wxWindow nNewId = (nextId = wxID_NONE) ? NewControlId() : nextId++;
+    m_radioIds.Add(nNewId);
+     
     (void)::WinCreateWindow ( hWndParent,
                               WC_BUTTON,
                               "",
@@ -244,7 +259,7 @@
                               0, 0, 0, 0,
                               hWndParent,
                               HWND_TOP,
-                              (HMENU)NewControlId(),
+                              (HMENU)nNewId,
                               NULL,
                               NULL
                             );
Index: src/os2/scrolbar.cpp
===================================================================
--- src/os2/scrolbar.cpp	(revision 50038)
+++ src/os2/scrolbar.cpp	(working copy)
@@ -42,19 +42,11 @@
     if (!pParent)
         return false;
 
-    pParent->AddChild(this);
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+    
     SetBackgroundColour(pParent->GetBackgroundColour()) ;
     SetForegroundColour(pParent->GetForegroundColour()) ;
 
-    if (vId == wxID_ANY)
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = vId;
-
     if (nWidth == wxDefaultCoord)
     {
         if (lStyle & wxHORIZONTAL)
Index: src/os2/slider.cpp
===================================================================
--- src/os2/slider.cpp	(revision 50038)
+++ src/os2/slider.cpp	(working copy)
@@ -50,6 +50,12 @@
         ::WinDestroyWindow((HWND)m_hStaticMax);
     if (m_hStaticValue)
         ::WinDestroyWindow((HWND)m_hStaticValue);
+        
+    // release ids
+    for(int pos = 0; pos < m_autoIds.size(); pos++)
+    {
+        ReleaseControlId(m_autoIds[pos];
+    }
 } // end of wxSlider::~wxSlider
 
 void wxSlider::AdjustSubControls( int nX,
@@ -215,12 +221,8 @@
     long                            lMsStyle = 0L;
     long                            lWstyle  = 0L;
 
-    SetName(rsName);
-#if wxUSE_VALIDATORS
-    SetValidator(rValidator);
-#endif
-    if (pParent)
-        pParent->AddChild(this);
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+    
     SetBackgroundColour(pParent->GetBackgroundColour()) ;
     SetForegroundColour(pParent->GetForegroundColour()) ;
 
@@ -229,20 +231,17 @@
     m_hStaticMax   = 0L;
     m_nPageSize    = 1;
     m_nLineSize    = 1;
-    m_windowStyle  = lStyle;
     m_nTickFreq    = 0;
 
-    if (vId == wxID_ANY)
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = vId;
-
     if (m_windowStyle & wxCLIP_SIBLINGS )
         lMsStyle |= WS_CLIPSIBLINGS;
 
     if (m_windowStyle & wxSL_LABELS)
     {
         lMsStyle |= WS_VISIBLE | SS_TEXT | DT_VCENTER;
+        
+        wxWindowId theId = NewControlId();
+        m_autoIds.Add(theId);
 
         m_hStaticValue = (WXHWND)::WinCreateWindow( (HWND)GetHwndOf(pParent) // Parent window handle
                                                    ,WC_STATIC                // Window class
@@ -251,7 +250,7 @@
                                                    ,0L, 0L, 0L, 0L           // Origin -- 0 size
                                                    ,(HWND)GetHwndOf(pParent) // owner window handle (same as parent
                                                    ,HWND_TOP                 // initial z position
-                                                   ,(ULONG)NewControlId()    // Window identifier
+                                                   ,(ULONG)theId    // Window identifier
                                                    ,NULL                     // no control data
                                                    ,NULL                     // no Presentation parameters
                                                   );
@@ -263,6 +262,9 @@
         lWstyle = SS_TEXT|DT_LEFT|WS_VISIBLE;
         if (m_windowStyle & wxCLIP_SIBLINGS)
             lWstyle |= WS_CLIPSIBLINGS;
+            
+        theId = NewControlId();
+        m_autoIds.Add(theId);
 
         m_hStaticMin = (WXHWND)::WinCreateWindow( (HWND)GetHwndOf(pParent) // Parent window handle
                                                  ,WC_STATIC                // Window class
@@ -271,7 +273,7 @@
                                                  ,0L, 0L, 0L, 0L           // Origin -- 0 size
                                                  ,(HWND)GetHwndOf(pParent) // owner window handle (same as parent
                                                  ,HWND_TOP                 // initial z position
-                                                 ,(ULONG)NewControlId()    // Window identifier
+                                                 ,(ULONG)theId    // Window identifier
                                                  ,NULL                     // no control data
                                                  ,NULL                     // no Presentation parameters
                                                 );
@@ -359,6 +361,9 @@
         if (m_windowStyle & wxCLIP_SIBLINGS)
             lMsStyle |= WS_CLIPSIBLINGS;
 
+        theId = NewControlId();
+        m_autoIds.Add(theId);
+        
         m_hStaticMax = (WXHWND)::WinCreateWindow( (HWND)GetHwndOf(pParent) // Parent window handle
                                                  ,WC_STATIC                // Window class
                                                  ,(PSZ)wxBuffer            // Initial Text
@@ -366,7 +371,7 @@
                                                  ,0L, 0L, 0L, 0L           // Origin -- 0 size
                                                  ,(HWND)GetHwndOf(pParent) // owner window handle (same as parent
                                                  ,HWND_TOP                 // initial z position
-                                                 ,(ULONG)NewControlId()    // Window identifier
+                                                 ,(ULONG)theId    // Window identifier
                                                  ,NULL                     // no control data
                                                  ,NULL                     // no Presentation parameters
                                                 );
Index: src/os2/spinbutt.cpp
===================================================================
--- src/os2/spinbutt.cpp	(revision 50038)
+++ src/os2/spinbutt.cpp	(working copy)
@@ -57,18 +57,14 @@
     int                             nHeight = rSize.y;
     SWP                             vSwp;
 
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+
     m_min = 0;
     m_max = 100;
-    if (vId == -1)
-        m_windowId = NewControlId();
-    else
-        m_windowId = vId;
     m_backgroundColour = pParent->GetBackgroundColour();
     m_foregroundColour = pParent->GetForegroundColour();
-    SetName(rsName);
-    SetParent(pParent);
-    m_windowStyle      = lStyle;
 
+
     //
     // Get the right size for the control
     //
@@ -112,9 +108,8 @@
         return FALSE;
     }
     SetRange(m_min, m_max);
-    if(pParent)
-        pParent->AddChild((wxSpinButton *)this);
 
+
     ::WinQueryWindowPos(m_hWnd, &vSwp);
     SetXComp(vSwp.x);
     SetYComp(vSwp.y-5); // compensate for the associated TextControl border
Index: src/os2/spinctrl.cpp
===================================================================
--- src/os2/spinctrl.cpp	(revision 50038)
+++ src/os2/spinctrl.cpp	(working copy)
@@ -122,16 +122,12 @@
                          int             nInitial,
                          const wxString& rsName )
 {
-    if (vId == wxID_ANY)
-        m_windowId = NewControlId();
-    else
-        m_windowId = vId;
+    CreateBase(pParent, vId, rPos, rSize, lStyle, rValidator, rsName);
+
     m_backgroundColour = pParent->GetBackgroundColour();
     m_foregroundColour = pParent->GetForegroundColour();
-    SetName(rsName);
-    SetParent(pParent);
-    m_windowStyle      = lStyle;
 
+
     int lSstyle = 0L;
 
     lSstyle = WS_VISIBLE      |
@@ -158,7 +154,7 @@
                                        ,0L, 0L, 0L, 0L
                                        ,GetWinHwnd(pParent)
                                        ,HWND_TOP
-                                       ,(HMENU)vId
+                                       ,(HMENU)m_windowId
                                        ,(PVOID)&vCtrlData
                                        ,NULL
                                       );
@@ -167,9 +163,8 @@
         return false;
     }
     m_hWndBuddy = m_hWnd; // One in the same for OS/2
-    if(pParent)
-        pParent->AddChild((wxSpinButton *)this);
 
+
     SetFont(*wxSMALL_FONT);
     SetXComp(0);
     SetYComp(0);
Index: src/os2/statbmp.cpp
===================================================================
--- src/os2/statbmp.cpp	(revision 50038)
+++ src/os2/statbmp.cpp	(working copy)
@@ -78,23 +78,14 @@
     wxString                        sError;
 
     Init();
+    
+    CreateBase(pParent, nId, rPos, wxDefaultSize, lStyle, wxDefaultValidator, rName);
 
-    SetName(rName);
-    if (pParent)
-        pParent->AddChild(this);
 
-    if (nId == -1)
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = nId;
-
-    m_windowStyle = lStyle;
-
     int                             nX= rPos.x;
     int                             nY = rPos.y;
     char                            zId[16];
 
-    m_windowStyle = lStyle;
 
     m_bIsIcon = rBitmap.IsKindOf(CLASSINFO(wxIcon));
 
Index: src/os2/stattext.cpp
===================================================================
--- src/os2/stattext.cpp	(revision 50038)
+++ src/os2/stattext.cpp	(working copy)
@@ -34,25 +34,16 @@
                            long             lStyle,
                            const wxString&  rsName )
 {
-    SetName(rsName);
-    if (pParent)
-        pParent->AddChild(this);
-
+    CreateBase(pParent, vId, rPos, rSize, lStyle, wxDefaultValidator, rsName);
+    
     SetBackgroundColour(pParent->GetBackgroundColour()) ;
     SetForegroundColour(pParent->GetForegroundColour()) ;
 
-    if ( vId == wxID_ANY )
-        m_windowId = (int)NewControlId();
-    else
-        m_windowId = vId;
-
     int nX      = rPos.x;
     int nY      = rPos.y;
     int nWidth  = rSize.x;
     int nHeight = rSize.y;
 
-    m_windowStyle = lStyle;
-
     long lSstyle = 0L;
 
     // Used to have DT_VCENTER but that doesn't work correctly with
Index: src/os2/tabctrl.cpp
===================================================================
--- src/os2/tabctrl.cpp	(revision 50038)
+++ src/os2/tabctrl.cpp	(working copy)
@@ -48,18 +48,14 @@
 //        GetGValue(GetSysColor(COLOR_BTNFACE)), GetBValue(GetSysColor(COLOR_BTNFACE)));
     m_foregroundColour = *wxBLACK ;
 
-    SetName(name);
-
     int x = pos.x;
     int y = pos.y;
     int width = size.x;
     int height = size.y;
 
-    m_windowStyle = style;
 
     SetFont(* (wxTheFontList->FindOrCreateFont(11, wxSWISS, wxNORMAL, wxNORMAL)));
 
-    SetParent(parent);
 
     if (width <= 0)
         width = 100;
@@ -70,14 +66,12 @@
     if (y < 0)
         y = 0;
 
-    m_windowId = (id < 0 ? NewControlId() : id);
 
     // Create the toolbar control.
     HWND hWndTabCtrl = 0;
     // TODO: create tab control
 
     m_hWnd = (WXHWND) hWndTabCtrl;
-    if (parent) parent->AddChild(this);
 
     SubclassWin((WXHWND) hWndTabCtrl);
 
Index: src/os2/toplevel.cpp
===================================================================
--- src/os2/toplevel.cpp	(revision 50038)
+++ src/os2/toplevel.cpp	(working copy)
@@ -616,9 +616,8 @@
     // Init our fields
     //
     Init();
-    m_windowStyle = lStyle;
-    SetName(rsName);
-    m_windowId = vId == -1 ? NewControlId() : vId;
+    
+    CreateBase(pParent, vId, rPos, rSizeOrig, lStyle, wxDefaultValidator, rsName);
 
     // always create a frame of some reasonable, even if arbitrary, size (at
     // least for MSW compatibility)
@@ -633,9 +632,7 @@
     }
 
     wxTopLevelWindows.Append(this);
-    if (pParent)
-        pParent->AddChild(this);
-
+    
     if (GetExtraStyle() & wxTOPLEVEL_EX_DIALOG)
     {
         //
Index: src/palmos/statbrpalm.cpp
===================================================================
--- src/palmos/statbrpalm.cpp	(revision 50038)
+++ src/palmos/statbrpalm.cpp	(working copy)
@@ -56,12 +56,8 @@
 
     StatusTextBuffer = NULL;
 
-    SetName(name);
-    SetParent(parent);
-    SetId( id == wxID_ANY ? NewControlId() : id );
-
-    parent->AddChild(this);
-
+    CreateBase(parent, id, wxDefaultPosition, wxDefaultSize, style, wxDefaultValidator, name);
+    
     SetFieldsCount(1);
 
     return true;
Index: src/palmos/toplevel.cpp
===================================================================
--- src/palmos/toplevel.cpp	(revision 50038)
+++ src/palmos/toplevel.cpp	(working copy)
@@ -99,11 +99,8 @@
 
     wxTopLevelWindows.Append(this);
 
-    if ( parent )
-        parent->AddChild(this);
-
-    SetId( id == wxID_ANY ? NewControlId() : id );
-
+    CreateBase(parent, id, pos, size, style ,wxDefaultValidator, name);
+    
     WinConstraintsType constraints;
     memset(&constraints, 0, sizeof(WinConstraintsType));
     // position
Index: src/x11/toplevel.cpp
===================================================================
--- src/x11/toplevel.cpp	(revision 50038)
+++ src/x11/toplevel.cpp	(working copy)
@@ -80,16 +80,8 @@
     // init our fields
     Init();
 
-    m_windowStyle = style;
-    m_parent = parent;
+    CreateBase(parent, id, pos, size, style, wxDefaultValidator, name);
 
-    SetName(name);
-
-    m_windowId = id == wxID_ANY ? NewControlId() : id;
-
-    if (parent)
-        parent->AddChild(this);
-
     wxTopLevelWindows.Append(this);
 
     Display *xdisplay = wxGlobalDisplay();

 	  	 

--- collpaneg.cpp.orig	2013-07-27 03:30:58.000000000 +0300
+++ collpaneg.cpp.mine	2014-04-05 18:54:14.000000000 +0300
@@ -34,6 +34,186 @@
 #endif // !WX_PRECOMP
 
 #include "wx/statline.h"
+#include "wx/dc.h"
+#include "wx/dcclient.h"
+#include "wx/renderer.h"
+
+
+#if defined( __WXMAC__ ) && !defined(__WXUNIVERSAL__)
+#else
+class WXDLLIMPEXP_CORE wxDisclosureTriangle : public wxControl
+{
+private:
+    bool m_value;
+    bool m_hasFocus;
+    bool m_mouseInWindow;
+
+public:
+    ~wxDisclosureTriangle()
+    {
+    }
+
+    wxDisclosureTriangle(wxWindow *parent,
+             wxWindowID id,
+             const wxString& label = wxEmptyString,
+             const wxPoint& pos = wxDefaultPosition,
+             const wxSize& size = wxDefaultSize,
+             long style = wxBORDER_NONE,
+             const wxValidator& validator = wxDefaultValidator,
+             const wxString& name = wxButtonNameStr)
+    {
+        Create(parent, id, label, pos, size, style, validator, name);
+    }
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label = wxEmptyString,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxBORDER_NONE,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxButtonNameStr)
+    {
+        if ( !wxControl::Create(parent, id, pos, size, style, validator, name) )
+            return false;
+
+        SetLabel(label);
+        SetBackgroundColour(GetParent()->GetBackgroundColour());
+
+        m_hasFocus = false;
+        m_value = false;
+        m_mouseInWindow = false;
+
+        return true;
+    }
+
+    void SetOpen( bool open )
+    {
+        m_value = open;
+        Refresh();
+    }
+
+    bool IsOpen() const { return m_value; }
+
+    void   OnPaint(wxPaintEvent& event)
+    {
+        wxPaintDC dc(this);
+        dc.Clear();
+
+        static const int bulletWidth = 7;
+        static const int bulletHeight = 7;
+
+        wxSize sz = GetTextExtent(GetLabel());
+        int y_mid = wxMax(bulletHeight/2, sz.y/2);
+
+#if 0
+        int flag = m_value ? wxCONTROL_EXPANDED : 0;
+
+        wxRendererNative::Get().DrawTreeItemButton
+                                (
+                                    this,
+                                    dc,
+                                    wxRect(/*x - bulletWidth/2*/0,
+                                           y_mid - bulletHeight/2,
+                                           bulletWidth, bulletHeight),
+                                    flag
+                                );
+#else
+        int x = 0;
+        int y = y_mid - bulletHeight/2;
+
+        dc.SetPen(m_mouseInWindow ? *wxBLACK_PEN : *wxGREY_PEN);
+        dc.SetBrush(m_mouseInWindow ? *wxBLACK_BRUSH : *wxGREY_BRUSH);
+
+        if (m_value)
+        {
+            wxPoint pts[3];
+            pts[0].x = x;                   pts[0].y = y;
+            pts[1].x = x + bulletWidth;     pts[1].y = y;
+            pts[2].x = x + bulletWidth/2;   pts[2].y = y + bulletHeight;
+
+            dc.DrawPolygon(3, pts);
+        }
+        else
+        {
+            wxPoint pts[3];
+            pts[0].x = x;                   pts[0].y = y;
+            pts[1].x = x + bulletWidth;     pts[1].y = y + bulletHeight/2;
+            pts[2].x = x;                   pts[2].y = y + bulletHeight;
+
+            dc.DrawPolygon(3, pts);
+        }
+#endif
+
+        dc.DrawLabel(GetLabel(), wxRect(bulletWidth+5, y_mid-sz.y/2, sz.x, sz.y));
+    }
+
+    void   OnEnterWindow(wxMouseEvent& event)
+    {
+        m_mouseInWindow = true;
+        Refresh();
+    }
+
+    void   OnLeaveWindow(wxMouseEvent& event)
+    {
+        m_mouseInWindow = false;
+        Refresh();
+    }
+
+    void   OnMouseUp(wxMouseEvent& evt)
+    {
+        //if ( (evt.LeftUp() || evt.RightUp() )
+        //{
+            // Just emit button event for now
+            wxCommandEvent event(wxEVT_BUTTON, m_windowId);
+            event.SetEventObject(this);
+            ProcessCommand(event);
+        //}
+    }
+
+    void OnSetFocus( wxFocusEvent &event )
+    {
+        m_hasFocus = true;
+
+        //RefreshSelected();
+
+        event.Skip();
+    }
+
+    void OnKillFocus( wxFocusEvent &event )
+    {
+        m_hasFocus = false;
+
+        // RefreshSelected();
+
+        event.Skip();
+    }
+
+protected:
+    virtual wxSize DoGetBestSize() const
+    {
+        wxSize size = wxWindow::DoGetBestSize();
+
+        wxSize sz = GetTextExtent(GetLabel());
+        size.x += sz.x + (9+5);
+        size.y += wxMax(9, sz.y);
+
+        return size;
+    }
+
+    DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(wxDisclosureTriangle, wxControl)
+    EVT_PAINT          (wxDisclosureTriangle::OnPaint)
+    EVT_SET_FOCUS      (wxDisclosureTriangle::OnSetFocus)
+    EVT_KILL_FOCUS     (wxDisclosureTriangle::OnKillFocus)
+    EVT_ENTER_WINDOW   (wxDisclosureTriangle::OnEnterWindow)
+    EVT_LEAVE_WINDOW   (wxDisclosureTriangle::OnLeaveWindow)
+    EVT_LEFT_UP        (wxDisclosureTriangle::OnMouseUp)
+END_EVENT_TABLE()
+#endif
+
 
 // ----------------------------------------------------------------------------
 // constants
@@ -89,6 +269,7 @@
     m_pButton = new wxDisclosureTriangle(this, wxID_ANY, GetBtnLabel());
     m_sz->Add(m_pButton);
 #else
+#if 0
     // create children and lay them out using a wxBoxSizer
     // (so that we automatically get RTL features)
     m_pButton = new wxButton(this, wxID_ANY, GetBtnLabel(), wxPoint(0, 0),
@@ -98,6 +279,11 @@
     // on other platforms we put the static line and the button horizontally
     m_sz->Add(m_pButton, 0, wxLEFT|wxTOP|wxBOTTOM, GetBorder());
     m_sz->Add(m_pStaticLine, 1, wxALIGN_CENTER|wxLEFT|wxRIGHT, GetBorder());
+#else
+    m_pStaticLine = NULL;
+    m_pButton = new wxDisclosureTriangle(this, wxID_ANY, GetBtnLabel());
+    m_sz->Add(m_pButton);
+#endif
 #endif
 
     // FIXME: at least under wxCE and wxGTK1 the background is black if we don't do
@@ -149,7 +335,11 @@
 #ifdef __WXMAC__
     return m_strLabel;
 #else
+#if 0
     return m_strLabel + (IsCollapsed() ? wxT(" >>") : wxT(" <<"));
+#else
+    return m_strLabel;
+#endif
 #endif
 }
 
@@ -198,8 +388,12 @@
 #if defined( __WXMAC__ ) && !defined(__WXUNIVERSAL__)
     m_pButton->SetOpen( !collapse );
 #else
+#if 0
     // NB: this must be done after updating our "state"
     m_pButton->SetLabel(GetBtnLabel());
+#else
+    m_pButton->SetOpen( !collapse );
+#endif
 #endif
 
 
@@ -212,8 +406,12 @@
 #ifdef __WXMAC__
     m_pButton->SetLabel(GetBtnLabel());
 #else
+#if 0
     m_pButton->SetLabel(GetBtnLabel());
     m_pButton->SetInitialSize();
+#else
+    m_pButton->SetLabel(GetBtnLabel());
+#endif
 #endif
 
     Layout();
@@ -225,8 +423,13 @@
     if (!m_pButton || !m_pPane || !m_sz)
         return false;     // we need to complete the creation first!
 #else
+#if 0
     if (!m_pButton || !m_pStaticLine || !m_pPane || !m_sz)
         return false;     // we need to complete the creation first!
+#else
+    if (!m_pButton || !m_pPane || !m_sz)
+        return false;     // we need to complete the creation first!
+#endif
 #endif
 
     wxSize oursz(GetSize());
@@ -254,9 +457,13 @@
 #if defined( __WXMAC__ )
     return 6;
 #elif defined(__WXMSW__)
+#if 0
     wxASSERT(m_pButton);
     return m_pButton->ConvertDialogToPixels(wxSize(2, 0)).x;
 #else
+    return 6;
+#endif
+#else
     return 5;
 #endif
 }

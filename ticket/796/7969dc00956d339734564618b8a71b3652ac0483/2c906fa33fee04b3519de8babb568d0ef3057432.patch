55c55
< static struct tm * __cdecl common_localtime(const time_t * WXUNUSED(t), BOOL bLocal)
---
> static struct tm * __cdecl common_localtime(const time_t * t, BOOL bLocal)
57a58,59
>     wxLongLong i64;
>     FILETIME   ft;
71c73,84
<     ::GetLocalTime(&SystemTime) ;
---
>     if (!*t) ::GetLocalTime(&SystemTime);
>     else
>     {
>       i64 = *t;
>       i64 = i64 * 10000000 + 116444736000000000;
> 
>       ft.dwLowDateTime  = i64.GetLo();
>       ft.dwHighDateTime = i64.GetHi();
> 
>       ::FileTimeToSystemTime(&ft, &SystemTime);
>     }
> 
126,143c139,155
<     time_t prog = 0 ;
<     static int mdays[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 } ;
< 
<     while (--month)
<     {
<         prog += mdays[month - 1] ;
<         if (month == 2 && is_leap(year))
<             prog++ ;
<     }
< 
<     // Calculate seconds in elapsed days
<     prog = day - 1 ;        // align first day of the year to zero
<     prog += (DAYS_IN_ONE_YEAR * (year - 1970) + (year - 1901) / 4 - 19) ;
<     prog *= SECONDS_IN_ONE_DAY ;
< 
<     // Add Calculated elapsed seconds in the current day
<     prog += (hour * SECONDS_IN_ONE_HOUR + minute *
<                                SECONDS_IN_ONE_MIN + second) ;
---
>     wxLongLong i64;
>     SYSTEMTIME st;
>     FILETIME   ft;
> 
>     st.wDay = day;
>     st.wMonth = month;
>     st.wYear = year;
>     st.wHour = hour;
>     st.wMinute = minute;
>     st.wSecond = second;
> 
>     SystemTimeToFileTime(&st, &ft);
> 
>     i64 = ft.dwHighDateTime;
>     i64 <<= 32;
>     i64 += ft.dwLowDateTime;
>     i64 = (i64 - 116444736000000000) / 10000000;
145c157
<     return prog ;
---
>     return (time_t)i64.GetValue();

 	  	 

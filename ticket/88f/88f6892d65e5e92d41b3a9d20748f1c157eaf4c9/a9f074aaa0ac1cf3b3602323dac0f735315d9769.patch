--- wxWidgets.orig/docs/latex/wx/toolbar.tex
+++ wxWidgets/docs/latex/wx/toolbar.tex
@@ -165,12 +165,20 @@
 
 \membersection{wxToolBar::AddControl}\label{wxtoolbaraddcontrol}
 
-\func{bool}{AddControl}{\param{wxControl*}{ control}}
+\func{bool}{AddControl}{\param{wxControl*}{ control}, \param{const wxString&}{ label = ""}}
 
 Adds any control to the toolbar, typically e.g. a combobox.
 
 \docparam{control}{The control to be added.}
 
+\docparam{label}{Text to be displayed near the control.}
+
+\wxheading{Remarks}
+
+wxMSW: the label is only displayed if there is enough space available below the embedded control.
+
+wxMac: labels are only displayed if wxWidgets is built with wxMAC_USE_NATIVE_TOOLBAR 1
+
 
 \membersection{wxToolBar::AddSeparator}\label{wxtoolbaraddseparator}
 
--- wxWidgets.orig/include/wx/generic/buttonbar.h
+++ wxWidgets/include/wx/generic/buttonbar.h
@@ -73,7 +73,7 @@
                                           wxObject *clientData,
                                           const wxString& shortHelp,
                                           const wxString& longHelp);
-    virtual wxToolBarToolBase *CreateTool(wxControl *control);
+    virtual wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label);
 
     virtual wxSize DoGetBestClientSize() const;
 
--- wxWidgets.orig/include/wx/mac/carbon/toolbar.h
+++ wxWidgets/include/wx/mac/carbon/toolbar.h
@@ -90,7 +90,7 @@
                                           wxObject *clientData,
                                           const wxString& shortHelp,
                                           const wxString& longHelp);
-    virtual wxToolBarToolBase *CreateTool(wxControl *control);
+    virtual wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label);
 
     DECLARE_EVENT_TABLE()
 #if wxMAC_USE_NATIVE_TOOLBAR
--- wxWidgets.orig/include/wx/msw/tbar95.h
+++ wxWidgets/include/wx/msw/tbar95.h
@@ -101,7 +101,7 @@
                                           wxObject *clientData,
                                           const wxString& shortHelp,
                                           const wxString& longHelp);
-    virtual wxToolBarToolBase *CreateTool(wxControl *control);
+    virtual wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label);
 
     // return the appropriate size and flags for the toolbar control
     virtual wxSize DoGetBestSize() const;
--- wxWidgets.orig/include/wx/tbarbase.h
+++ wxWidgets/include/wx/tbarbase.h
@@ -91,7 +91,8 @@
                                            : wxTOOL_STYLE_BUTTON;
     }
 
-    wxToolBarToolBase(wxToolBarBase *tbar, wxControl *control)
+    wxToolBarToolBase(wxToolBarBase *tbar, wxControl *control, const wxString& label)
+        : m_label(label)
     {
         m_tbar = tbar;
         m_control = control;
@@ -321,9 +322,9 @@
     // its position/size)
     //
     // NB: the control should have toolbar as its parent
-    virtual wxToolBarToolBase *AddControl(wxControl *control);
-    virtual wxToolBarToolBase *InsertControl(size_t pos, wxControl *control);
-
+    virtual wxToolBarToolBase *AddControl(wxControl *control, const wxString& label = wxEmptyString);
+    virtual wxToolBarToolBase *InsertControl(size_t pos, wxControl *control, const wxString& label = wxEmptyString);
+    
     // get the control with the given id or return NULL
     virtual wxControl *FindControl( int toolid );
 
@@ -559,7 +560,7 @@
                                           const wxString& shortHelp,
                                           const wxString& longHelp) = 0;
 
-    virtual wxToolBarToolBase *CreateTool(wxControl *control) = 0;
+    virtual wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label) = 0;
 
     // helper functions
     // ----------------
--- wxWidgets.orig/include/wx/univ/toolbar.h
+++ wxWidgets/include/wx/univ/toolbar.h
@@ -98,7 +98,7 @@
                                           wxObject *clientData,
                                           const wxString& shortHelp,
                                           const wxString& longHelp);
-    virtual wxToolBarToolBase *CreateTool(wxControl *control);
+    virtual wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label);
 
     virtual wxSize DoGetBestClientSize() const;
     virtual void DoSetSize(int x, int y,
--- wxWidgets.orig/samples/toolbar/toolbar.cpp
+++ wxWidgets/samples/toolbar/toolbar.cpp
@@ -397,7 +397,7 @@
         combo->Append(_T("combobox"));
         combo->Append(_T("in a"));
         combo->Append(_T("toolbar"));
-        toolBar->AddControl(combo);
+        toolBar->AddControl(combo,_T("Combo Label"));
 
         //wxSpinCtrl *spin = new wxSpinCtrl( toolBar, ID_SPIN, wxT("0"), wxDefaultPosition, wxSize(80,wxDefaultCoord), 0, 100, 0 );
         //toolBar->AddControl( spin );
--- wxWidgets.orig/src/common/tbarbase.cpp
+++ wxWidgets/src/common/tbarbase.cpp
@@ -195,12 +195,12 @@
     return tool;
 }
 
-wxToolBarToolBase *wxToolBarBase::AddControl(wxControl *control)
+wxToolBarToolBase *wxToolBarBase::AddControl(wxControl *control, const wxString& label)
 {
-    return InsertControl(GetToolsCount(), control);
+    return InsertControl(GetToolsCount(), control, label);
 }
 
-wxToolBarToolBase *wxToolBarBase::InsertControl(size_t pos, wxControl *control)
+wxToolBarToolBase *wxToolBarBase::InsertControl(size_t pos, wxControl *control, const wxString& label)
 {
     wxCHECK_MSG( control, (wxToolBarToolBase *)NULL,
                  _T("toolbar: can't insert NULL control") );
@@ -211,7 +211,7 @@
     wxCHECK_MSG( pos <= GetToolsCount(), (wxToolBarToolBase *)NULL,
                  _T("invalid position in wxToolBar::InsertControl()") );
 
-    wxToolBarToolBase *tool = CreateTool(control);
+    wxToolBarToolBase *tool = CreateTool(control, label);
 
     if ( !InsertTool(pos, tool) )
     {
--- wxWidgets.orig/src/generic/buttonbar.cpp
+++ wxWidgets/src/generic/buttonbar.cpp
@@ -66,8 +66,8 @@
         m_button = NULL;
     }
 
-    wxButtonToolBarTool(wxButtonToolBar *tbar, wxControl *control)
-        : wxToolBarToolBase(tbar, control)
+    wxButtonToolBarTool(wxButtonToolBar *tbar, wxControl *control, const wxString& label)
+        : wxToolBarToolBase(tbar, control, label)
     {
         m_x = m_y = wxDefaultCoord;
         m_width =
@@ -271,9 +271,9 @@
                              clientData, shortHelp, longHelp);
 }
 
-wxToolBarToolBase *wxButtonToolBar::CreateTool(wxControl *control)
+wxToolBarToolBase *wxButtonToolBar::CreateTool(wxControl *control, const wxString& label)
 {
-    return new wxButtonToolBarTool(this, control);
+    return new wxButtonToolBarTool(this, control, label);
 }
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/src/mac/carbon/toolbar.cpp
+++ wxWidgets/src/mac/carbon/toolbar.cpp
@@ -71,8 +71,8 @@
         const wxString& shortHelp,
         const wxString& longHelp );
 
-    wxToolBarTool(wxToolBar *tbar, wxControl *control)
-        : wxToolBarToolBase(tbar, control)
+    wxToolBarTool(wxToolBar *tbar, wxControl *control, const wxString& label)
+        : wxToolBarToolBase(tbar, control, label)
     {
         Init();
         if (control != NULL)
@@ -522,9 +522,9 @@
         clientData, shortHelp, longHelp );
 }
 
-wxToolBarToolBase * wxToolBar::CreateTool( wxControl *control )
+wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control, const wxString& label)
 {
-    return new wxToolBarTool( this, control );
+    return new wxToolBarTool(this, control, label);
 }
 
 void wxToolBar::Init()
@@ -1423,7 +1423,17 @@
                     InstallEventHandler(
                         HIObjectGetEventTarget(item), GetwxMacToolBarEventHandlerUPP(),
                         GetEventTypeCount(toolBarEventList), toolBarEventList, tool, NULL );
-                    HIToolbarItemSetLabel( item, wxMacCFStringHolder(tool->GetLabel(), m_font.GetEncoding()) );
+                    
+                    // For some reason, MSW native toolbar strips '&' characters off 
+                    // of labels.  This wxStripMenuCodes call is here for compatability 
+                    // with that behavior.  
+                    
+                    // Does it make more sense to add these codes to the MSW
+                    // labels instead of stripping them here?
+                    wxString strippedLabel = wxStripMenuCodes( tool->GetLabel() );
+                    
+                    HIToolbarItemSetLabel( item, wxMacCFStringHolder(strippedLabel, m_font.GetEncoding()) );
+                    
                     HIToolbarItemSetIconRef( item, info.u.iconRef );
                     HIToolbarItemSetCommandID( item, kHIToolbarCommandPressAction );
                     tool->SetToolbarItemRef( item );
@@ -1456,8 +1466,18 @@
                 // reference count to make sure we are not dealing with zombie controls after the native toolbar has released its views
                 CFRetain( viewRef ) ;
                 CFDataRef data = CFDataCreate( kCFAllocatorDefault , (UInt8*) &viewRef , sizeof(viewRef) ) ;
-                 err = HIToolbarCreateItemWithIdentifier((HIToolbarRef) m_macHIToolbarRef,kControlToolbarItemClassID,
-                   data , &item ) ;
+                err = HIToolbarCreateItemWithIdentifier((HIToolbarRef) m_macHIToolbarRef,kControlToolbarItemClassID,
+                    data , &item ) ;
+
+                // For some reason, MSW native toolbar strips '&' characters off 
+                // of labels.  This wxStripMenuCodes call is here for compatability 
+                // with that behavior.  
+                 
+                // Does it make more sense to add these codes to the MSW
+                // labels instead of stripping them here?
+                wxString strippedLabel = wxStripMenuCodes( tool->GetLabel() );
+                
+                HIToolbarItemSetLabel( item, wxMacCFStringHolder(strippedLabel, m_font.GetEncoding()) );
 
                 if (err  == noErr)
                 {
--- wxWidgets.orig/src/msw/tbar95.cpp
+++ wxWidgets/src/msw/tbar95.cpp
@@ -148,14 +148,30 @@
                             clientData, shortHelp, longHelp)
     {
         m_nSepCount = 0;
+        m_staticText = 0;
     }
 
-    wxToolBarTool(wxToolBar *tbar, wxControl *control)
-        : wxToolBarToolBase(tbar, control)
+    wxToolBarTool(wxToolBar *tbar, wxControl *control, const wxString& label)
+        : wxToolBarToolBase(tbar, control, label)
     {
+        if ( IsControl() )
+        {
+            // create a control to render the control's label
+            m_staticText = new wxStaticText(
+                m_tbar,wxID_ANY,m_label,
+                wxDefaultPosition,wxDefaultSize,
+                wxALIGN_CENTRE|wxST_NO_AUTORESIZE
+                );
+        }
+
         m_nSepCount = 1;
     }
 
+    ~wxToolBarTool()
+    {
+        delete m_staticText;
+    }
+
     virtual void SetLabel(const wxString& label)
     {
         if ( label == m_label )
@@ -163,12 +179,23 @@
 
         wxToolBarToolBase::SetLabel(label);
 
+        if ( m_staticText )
+        {
+            m_staticText->SetLabel(label);
+        }
+
         // we need to update the label shown in the toolbar because it has a
         // pointer to the internal buffer of the old label
         //
         // TODO: use TB_SETBUTTONINFO
     }
 
+    wxStaticText* GetStaticText()
+    {
+        wxASSERT_MSG( IsControl(), _T("only makes sense for embedded control tools") );
+        return m_staticText;
+    }
+
     // set/get the number of separators which we use to cover the space used by
     // a control in the toolbar
     void SetSeparatorsCount(size_t count) { m_nSepCount = count; }
@@ -176,6 +203,7 @@
 
 private:
     size_t m_nSepCount;
+    wxStaticText* m_staticText;
 
     DECLARE_NO_COPY_CLASS(wxToolBarTool)
 };
@@ -201,9 +229,9 @@
                              clientData, shortHelp, longHelp);
 }
 
-wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control)
+wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control, const wxString& label)
 {
-    return new wxToolBarTool(this, control);
+    return new wxToolBarTool(this, control, label);
 }
 
 // ----------------------------------------------------------------------------
@@ -489,13 +517,16 @@
     // takes care of all normal items)
     for ( /* node -> first after deleted */ ; node; node = node->GetNext() )
     {
-        wxToolBarToolBase *tool2 = node->GetData();
+        wxToolBarTool *tool2 = (wxToolBarTool*)node->GetData();
         if ( tool2->IsControl() )
         {
             int x;
             wxControl *control = tool2->GetControl();
             control->GetPosition(&x, NULL);
             control->Move(x - width, wxDefaultCoord);
+
+            wxStaticText* staticText = tool2->GetStaticText();
+            staticText->Move(x - width, wxDefaultCoord);
         }
     }
 
@@ -944,7 +975,7 @@
     size_t index = 0;
     for ( node = m_tools.GetFirst(); node; node = node->GetNext(), index++ )
     {
-        wxToolBarToolBase *tool = node->GetData();
+        wxToolBarTool *tool = (wxToolBarTool*)node->GetData();
 
         // we calculate the running y coord for vertical toolbars so we need to
         // get the items size for all items but for the horizontal ones we
@@ -971,7 +1002,10 @@
         }
 
         wxControl *control = tool->GetControl();
+        wxStaticText* staticText = tool->GetStaticText();
+
         wxSize size = control->GetSize();
+        wxSize staticTextSize = staticText->GetSize();
 
         // the position of the leftmost controls corner
         int left = wxDefaultCoord;
@@ -1026,18 +1060,33 @@
             ((wxToolBarTool *)tool)->SetSeparatorsCount(nSeparators);
 
             // adjust the controls width to exactly cover the separators
-            control->SetSize((nSeparators + 1)*widthSep, wxDefaultCoord);
+            size.x = (nSeparators + 1)*widthSep;
+            control->SetSize(size.x, wxDefaultCoord);
         }
 
         // position the control itself correctly vertically
-        int height = r.bottom - r.top;
+        // center it on the icon area of the toolbar
+        int height = r.bottom - r.top - (staticTextSize.y+3);
         int diff = height - size.y;
-        if ( diff < 0 )
+        if ( diff < 0 || !HasFlag(wxTB_TEXT) )
         {
-            // the control is too high, resize to fit
-            control->SetSize(wxDefaultCoord, height - 2);
+            // not enough room for the static text
+            staticText->Hide();
+
+            // recalculate height & diff without the staticText control
+            height = r.bottom - r.top;
+            diff = height - size.y;
+            if ( diff < 0 )
+            {
+                // the control is too high, resize to fit
+                control->SetSize(wxDefaultCoord, height - 2);
 
-            diff = 2;
+                diff = 2;
+            }
+        }
+        else
+        {
+            staticText->Show();
         }
 
         int top;
@@ -1057,6 +1106,8 @@
         }
 
         control->Move(left, top + (diff + 1) / 2);
+        int offset = (size.x-staticTextSize.x)/2;
+        staticText->Move(left+offset, r.bottom - staticTextSize.y - 3 );
     }
 
     // the max index is the "real" number of buttons - i.e. counting even the
@@ -1515,12 +1566,18 @@
     //     otherwise
     for ( node = m_tools.GetFirst(); node; node = node->GetNext() )
     {
-        wxToolBarToolBase *tool = node->GetData();
+        wxToolBarTool *tool = (wxToolBarTool*)node->GetData();
         if ( tool->IsControl() )
         {
             // get the control rect in our client coords
             wxControl *control = tool->GetControl();
+            wxStaticText *staticText = tool->GetStaticText();
             wxRect rectCtrl = control->GetRect();
+            wxRect rectStaticText(0,0,0,0);
+            if ( staticText )
+            {
+                rectStaticText = staticText->GetRect();
+            }
 
             // iterate over all buttons
             TBBUTTON tbb;
@@ -1561,6 +1618,15 @@
                     // style in the parent: the controls can disappear
                     control->Refresh(false);
                 }
+                if ( staticText && rectStaticText.Intersects(rectItem) )
+                {
+                    // yes, do erase it!
+                    dc.DrawRectangle(rectItem);
+
+                    // Necessary in case we use a no-paint-on-size
+                    // style in the parent: the controls can disappear
+                    staticText->Refresh(false);
+                }
             }
         }
     }
--- wxWidgets.orig/src/univ/toolbar.cpp
+++ wxWidgets/src/univ/toolbar.cpp
@@ -104,8 +104,8 @@
         m_underMouse = false;
     }
 
-    wxToolBarTool(wxToolBar *tbar, wxControl *control)
-        : wxToolBarToolBase(tbar, control)
+    wxToolBarTool(wxToolBar *tbar, wxControl *control, const wxString& label)
+        : wxToolBarToolBase(tbar, control, label)
     {
         // no position yet
         m_x =
@@ -328,9 +328,9 @@
                              clientData, shortHelp, longHelp);
 }
 
-wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control)
+wxToolBarToolBase *wxToolBar::CreateTool(wxControl *control, const wxString& label)
 {
-    return new wxToolBarTool(this, control);
+    return new wxToolBarTool(this, control, label);
 }
 
 // ----------------------------------------------------------------------------

 	  	 

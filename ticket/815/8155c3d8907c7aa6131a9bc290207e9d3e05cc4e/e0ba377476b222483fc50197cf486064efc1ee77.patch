From d0e46a6356959bc2c86a6e994e25357be5551f29 Mon Sep 17 00:00:00 2001
From: Roberto Perpuly <robertop2004@gmail.com>
Date: Fri, 24 Apr 2015 00:55:45 -0700
Subject: [PATCH] enhancements to wxFileSystemWatcher on Mac OS X

wxFileSystemWatcher is now using FS Events on Mac OS X; the
FS events framework allows us to create watches in entire trees
of directories in an effificent manner.

Also, enabled FS watcher tests on Mac OS X. In order to
do this, the tests were moved to the gui tests since
the tests rely on a run loop.
---
 Makefile.in                         |  39 ++-
 build/bakefiles/files.bkl           |   2 +
 build/files                         |   2 +
 include/wx/fswatcher.h              |   6 +-
 include/wx/osx/cocoa/chkconf.h      |  10 +
 include/wx/osx/fswatcher_fsevents.h |  89 +++++++
 interface/wx/fswatcher.h            |  22 +-
 src/osx/fswatcher_fsevents.cpp      | 509 ++++++++++++++++++++++++++++++++++++
 src/unix/fswatcher_kqueue.cpp       |   4 +-
 tests/Makefile.in                   |   8 +-
 tests/fswatcher/fswatchertest.cpp   |  24 +-
 tests/makefile.bcc                  |   8 +-
 tests/makefile.gcc                  |   8 +-
 tests/makefile.vc                   |   8 +-
 tests/test.bkl                      |   2 +-
 tests/test_vc7_test.vcproj          |   3 -
 tests/test_vc7_test_gui.vcproj      |   3 +
 tests/test_vc8_test.vcproj          |   4 -
 tests/test_vc8_test_gui.vcproj      |   4 +
 tests/test_vc9_test.vcproj          |   4 -
 tests/test_vc9_test_gui.vcproj      |   4 +
 21 files changed, 693 insertions(+), 70 deletions(-)
 create mode 100644 include/wx/osx/fswatcher_fsevents.h
 create mode 100644 src/osx/fswatcher_fsevents.cpp

diff --git a/Makefile.in b/Makefile.in
index 2483738..de571fc 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -2253,7 +2253,8 @@ COND_TOOLKIT_OSX_CARBON_BASE_OSX_SRC =  \
 	src/unix/threadpsx.cpp \
 	src/unix/utilsunx.cpp \
 	src/unix/wakeuppipe.cpp \
-	src/unix/fswatcher_kqueue.cpp
+	src/unix/fswatcher_kqueue.cpp \
+	src/osx/fswatcher_fsevents.cpp
 @COND_TOOLKIT_OSX_CARBON@BASE_OSX_SRC = $(COND_TOOLKIT_OSX_CARBON_BASE_OSX_SRC)
 COND_TOOLKIT_OSX_COCOA_BASE_OSX_SRC =  \
 	src/osx/core/mimetype.cpp \
@@ -2277,7 +2278,8 @@ COND_TOOLKIT_OSX_COCOA_BASE_OSX_SRC =  \
 	src/unix/threadpsx.cpp \
 	src/unix/utilsunx.cpp \
 	src/unix/wakeuppipe.cpp \
-	src/unix/fswatcher_kqueue.cpp
+	src/unix/fswatcher_kqueue.cpp \
+	src/osx/fswatcher_fsevents.cpp
 @COND_TOOLKIT_OSX_COCOA@BASE_OSX_SRC = $(COND_TOOLKIT_OSX_COCOA_BASE_OSX_SRC)
 COND_TOOLKIT_OSX_IPHONE_BASE_OSX_SRC =  \
 	src/osx/core/mimetype.cpp \
@@ -2301,7 +2303,8 @@ COND_TOOLKIT_OSX_IPHONE_BASE_OSX_SRC =  \
 	src/unix/threadpsx.cpp \
 	src/unix/utilsunx.cpp \
 	src/unix/wakeuppipe.cpp \
-	src/unix/fswatcher_kqueue.cpp
+	src/unix/fswatcher_kqueue.cpp \
+	src/osx/fswatcher_fsevents.cpp
 @COND_TOOLKIT_OSX_IPHONE@BASE_OSX_SRC = $(COND_TOOLKIT_OSX_IPHONE_BASE_OSX_SRC)
 COND_TOOLKIT_COCOA_BASE_OSX_SRC =  \
 	src/common/fdiodispatcher.cpp \
@@ -2442,7 +2445,8 @@ COND_TOOLKIT_OSX_CARBON_BASE_OSX_HDR =  \
 	wx/unix/stdpaths.h \
 	wx/unix/stackwalk.h \
 	wx/unix/tls.h \
-	wx/unix/fswatcher_kqueue.h
+	wx/unix/fswatcher_kqueue.h \
+	wx/osx/fswatcher_fsevents.h
 @COND_TOOLKIT_OSX_CARBON@BASE_OSX_HDR = $(COND_TOOLKIT_OSX_CARBON_BASE_OSX_HDR)
 COND_TOOLKIT_OSX_COCOA_BASE_OSX_HDR =  \
 	wx/osx/core/cfdataref.h \
@@ -2463,7 +2467,8 @@ COND_TOOLKIT_OSX_COCOA_BASE_OSX_HDR =  \
 	wx/unix/stdpaths.h \
 	wx/unix/stackwalk.h \
 	wx/unix/tls.h \
-	wx/unix/fswatcher_kqueue.h
+	wx/unix/fswatcher_kqueue.h \
+	wx/osx/fswatcher_fsevents.h
 @COND_TOOLKIT_OSX_COCOA@BASE_OSX_HDR = $(COND_TOOLKIT_OSX_COCOA_BASE_OSX_HDR)
 COND_TOOLKIT_COCOA_BASE_OSX_HDR =  \
 	wx/unix/app.h \
@@ -4513,7 +4518,8 @@ COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS =  \
 	monodll_threadpsx.o \
 	monodll_utilsunx.o \
 	monodll_wakeuppipe.o \
-	monodll_fswatcher_kqueue.o
+	monodll_fswatcher_kqueue.o \
+	monodll_fswatcher_fsevents.o
 @COND_PLATFORM_MACOSX_1@__BASE_PLATFORM_SRC_OBJECTS = $(COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS)
 @COND_PLATFORM_MSDOS_1@__BASE_PLATFORM_SRC_OBJECTS = \
 @COND_PLATFORM_MSDOS_1@	monodll_msdos_dir.o monodll_msdos_mimetype.o \
@@ -6888,7 +6894,8 @@ COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_1 =  \
 	monolib_threadpsx.o \
 	monolib_utilsunx.o \
 	monolib_wakeuppipe.o \
-	monolib_fswatcher_kqueue.o
+	monolib_fswatcher_kqueue.o \
+	monolib_fswatcher_fsevents.o
 @COND_PLATFORM_MACOSX_1@__BASE_PLATFORM_SRC_OBJECTS_1 = $(COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_1)
 @COND_PLATFORM_MSDOS_1@__BASE_PLATFORM_SRC_OBJECTS_1 \
 @COND_PLATFORM_MSDOS_1@	= monolib_msdos_dir.o monolib_msdos_mimetype.o \
@@ -9316,7 +9323,8 @@ COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_2 =  \
 	basedll_threadpsx.o \
 	basedll_utilsunx.o \
 	basedll_wakeuppipe.o \
-	basedll_fswatcher_kqueue.o
+	basedll_fswatcher_kqueue.o \
+	basedll_fswatcher_fsevents.o
 @COND_PLATFORM_MACOSX_1@__BASE_PLATFORM_SRC_OBJECTS_2 = $(COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_2)
 @COND_PLATFORM_MSDOS_1@__BASE_PLATFORM_SRC_OBJECTS_2 \
 @COND_PLATFORM_MSDOS_1@	= basedll_msdos_dir.o basedll_msdos_mimetype.o \
@@ -9404,7 +9412,8 @@ COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_3 =  \
 	baselib_threadpsx.o \
 	baselib_utilsunx.o \
 	baselib_wakeuppipe.o \
-	baselib_fswatcher_kqueue.o
+	baselib_fswatcher_kqueue.o \
+	baselib_fswatcher_fsevents.o
 @COND_PLATFORM_MACOSX_1@__BASE_PLATFORM_SRC_OBJECTS_3 = $(COND_PLATFORM_MACOSX_1___BASE_PLATFORM_SRC_OBJECTS_3)
 @COND_PLATFORM_MSDOS_1@__BASE_PLATFORM_SRC_OBJECTS_3 \
 @COND_PLATFORM_MSDOS_1@	= baselib_msdos_dir.o baselib_msdos_mimetype.o \
@@ -17740,6 +17749,9 @@ monodll_strconv_cf.o: $(srcdir)/src/osx/core/strconv_cf.cpp $(MONODLL_ODEP)
 monodll_utilsexc_base.o: $(srcdir)/src/osx/core/utilsexc_base.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/core/utilsexc_base.cpp
 
+monodll_fswatcher_fsevents.o: $(srcdir)/src/osx/fswatcher_fsevents.cpp $(MONODLL_ODEP)
+	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/osx/fswatcher_fsevents.cpp
+
 monodll_msdos_dir.o: $(srcdir)/src/msdos/dir.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/msdos/dir.cpp
 
@@ -23662,6 +23674,9 @@ monolib_strconv_cf.o: $(srcdir)/src/osx/core/strconv_cf.cpp $(MONOLIB_ODEP)
 monolib_utilsexc_base.o: $(srcdir)/src/osx/core/utilsexc_base.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/core/utilsexc_base.cpp
 
+monolib_fswatcher_fsevents.o: $(srcdir)/src/osx/fswatcher_fsevents.cpp $(MONOLIB_ODEP)
+	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/osx/fswatcher_fsevents.cpp
+
 monolib_msdos_dir.o: $(srcdir)/src/msdos/dir.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/msdos/dir.cpp
 
@@ -29584,6 +29599,9 @@ basedll_strconv_cf.o: $(srcdir)/src/osx/core/strconv_cf.cpp $(BASEDLL_ODEP)
 basedll_utilsexc_base.o: $(srcdir)/src/osx/core/utilsexc_base.cpp $(BASEDLL_ODEP)
 	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/osx/core/utilsexc_base.cpp
 
+basedll_fswatcher_fsevents.o: $(srcdir)/src/osx/fswatcher_fsevents.cpp $(BASEDLL_ODEP)
+	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/osx/fswatcher_fsevents.cpp
+
 basedll_msdos_dir.o: $(srcdir)/src/msdos/dir.cpp $(BASEDLL_ODEP)
 	$(CXXC) -c -o $@ $(BASEDLL_CXXFLAGS) $(srcdir)/src/msdos/dir.cpp
 
@@ -30064,6 +30082,9 @@ baselib_strconv_cf.o: $(srcdir)/src/osx/core/strconv_cf.cpp $(BASELIB_ODEP)
 baselib_utilsexc_base.o: $(srcdir)/src/osx/core/utilsexc_base.cpp $(BASELIB_ODEP)
 	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/osx/core/utilsexc_base.cpp
 
+baselib_fswatcher_fsevents.o: $(srcdir)/src/osx/fswatcher_fsevents.cpp $(BASELIB_ODEP)
+	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/osx/fswatcher_fsevents.cpp
+
 baselib_msdos_dir.o: $(srcdir)/src/msdos/dir.cpp $(BASELIB_ODEP)
 	$(CXXC) -c -o $@ $(BASELIB_CXXFLAGS) $(srcdir)/src/msdos/dir.cpp
 
diff --git a/build/bakefiles/files.bkl b/build/bakefiles/files.bkl
index ae2b56d..4526cae 100644
--- a/build/bakefiles/files.bkl
+++ b/build/bakefiles/files.bkl
@@ -210,10 +210,12 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/osx/core/mimetype.cpp
     $(BASE_COREFOUNDATION_SRC)
     $(BASE_UNIX_AND_DARWIN_SRC)
+    src/osx/fswatcher_fsevents.cpp
 </set>
 <set var="BASE_OSX_SHARED_HDR" hints="files">
     $(BASE_COREFOUNDATION_HDR)
     $(BASE_UNIX_AND_DARWIN_HDR)
+    wx/osx/fswatcher_fsevents.h
 </set>
 <!-- Base and GUI files used by OS X -->
 <set var="BASE_AND_GUI_OSX_CARBON_SRC" hints="files">
diff --git a/build/files b/build/files
index cb3c450..d582b8e 100644
--- a/build/files
+++ b/build/files
@@ -151,10 +151,12 @@ BASE_COREFOUNDATION_HDR =
 # Base files used by OS X ports (not Carbon)
 BASE_OSX_SHARED_SRC =
     src/osx/core/mimetype.cpp
+    src/osx/fswatcher_fsevents.cpp
     $(BASE_COREFOUNDATION_SRC)
     $(BASE_UNIX_AND_DARWIN_SRC)
 
 BASE_OSX_SHARED_HDR =
+    wx/osx/fswatcher_fsevents.h
     $(BASE_COREFOUNDATION_HDR)
     $(BASE_UNIX_AND_DARWIN_HDR)
 
diff --git a/include/wx/fswatcher.h b/include/wx/fswatcher.h
index 7f0fcbd..a29ff83 100644
--- a/include/wx/fswatcher.h
+++ b/include/wx/fswatcher.h
@@ -52,7 +52,7 @@ enum
                          wxFSW_EVENT_RENAME | wxFSW_EVENT_MODIFY |
                          wxFSW_EVENT_ACCESS | wxFSW_EVENT_ATTRIB |
                          wxFSW_EVENT_WARNING | wxFSW_EVENT_ERROR
-#ifdef wxHAS_INOTIFY
+#if defined(wxHAS_INOTIFY) || defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
     ,wxFSW_EVENT_UNMOUNT = 0x2000
 #endif
 };
@@ -395,6 +395,10 @@ protected:
 #ifdef wxHAS_INOTIFY
     #include "wx/unix/fswatcher_inotify.h"
     #define wxFileSystemWatcher wxInotifyFileSystemWatcher
+#elif  defined(wxHAS_KQUEUE) && defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
+    #include "wx/unix/fswatcher_kqueue.h"
+    #include "wx/osx/fswatcher_fsevents.h"
+    #define wxFileSystemWatcher wxFsEventsFileSystemWatcher
 #elif defined(wxHAS_KQUEUE)
     #include "wx/unix/fswatcher_kqueue.h"
     #define wxFileSystemWatcher wxKqueueFileSystemWatcher
diff --git a/include/wx/osx/cocoa/chkconf.h b/include/wx/osx/cocoa/chkconf.h
index 03fd501..f8517e1 100644
--- a/include/wx/osx/cocoa/chkconf.h
+++ b/include/wx/osx/cocoa/chkconf.h
@@ -50,6 +50,16 @@
 #define wxOSX_USE_QUICKTIME 0
 #define wxOSX_USE_AUDIOTOOLBOX 1
 
+/* 
+   Use the more efficient FS Events framework instead of kqueue
+   events for file system watcher, but only on Mac OS X >= 10.7 since that version
+   introduced a flag that allows watching files as well
+   as sub directories.
+ */
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_7
+#define wxHAVE_FSEVENTS_FILE_NOTIFICATIONS 1
+#endif
+
 /*
  * turning off capabilities that don't work under cocoa yet
  */
diff --git a/include/wx/osx/fswatcher_fsevents.h b/include/wx/osx/fswatcher_fsevents.h
new file mode 100644
index 0000000..b19f682
--- /dev/null
+++ b/include/wx/osx/fswatcher_fsevents.h
@@ -0,0 +1,89 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/osx/fswatcher_fsevents.h
+// Purpose:     File System watcher that uses the FS Events framework
+//              of Mac OS X to efficiently watch trees
+// Author:      Roberto Perpuly
+// Created:     2015-04-24
+// Copyright:   (c) 2015 Roberto Perpuly <robertop2004@gmail.com>
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_FSWATCHER_FSEVENTS_H_
+#define _WX_FSWATCHER_FSEVENTS_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_FSWATCHER
+
+#include <CoreServices/CoreServices.h>
+#include "wx/unix/fswatcher_kqueue.h"
+
+WX_DECLARE_STRING_HASH_MAP(FSEventStreamRef, FSEventStreamRefMap);
+
+/*
+ The fs events watcher uses the newer FS Events service
+ that is available in Mac OS X, the service allows for
+ efficient watching of entire directory hierarchies.
+ Note that adding a single file watch (or directory 
+ watch) still use kqueue events.
+
+ We take care to only use this on Mac OS X >= 10.7, as that 
+ version introduced the ability to get file-level notifications.
+
+ See the following docs that outline the FS Events framework
+
+ https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/UsingtheFSEventsFramework/UsingtheFSEventsFramework.html
+
+ https://developer.apple.com/library/mac/documentation/Darwin/Reference/FSEvents_Ref/index.html
+*/
+class WXDLLIMPEXP_BASE wxFsEventsFileSystemWatcher :
+        public wxKqueueFileSystemWatcher
+{
+public:
+    wxFsEventsFileSystemWatcher();
+
+    wxFsEventsFileSystemWatcher(const wxFileName& path,
+                              int events = wxFSW_EVENT_ALL);
+
+    ~wxFsEventsFileSystemWatcher();
+  
+    // reimplement adding a tree so that it does not use
+    // kqueue at all
+    bool AddTree(const wxFileName& path, int events = wxFSW_EVENT_ALL,
+                const wxString& filespec = wxEmptyString) wxOVERRIDE;
+    
+    // reimplement removing a tree so that we
+    // cleanup the opened fs streams
+    bool RemoveTree(const wxFileName& path) wxOVERRIDE;
+    
+    // reimplement remove all so that we cleanup
+    // watches from kqeueue and from fs events
+    bool RemoveAll() wxOVERRIDE;
+    
+    // post an file change event to the owner 
+    void PostChange(const wxFileName& oldFileName, 
+      const wxFileName& newFileName, int event);
+    
+    // post a warning event to the owner
+    void PostWarning(wxFSWWarningType warning, const wxString& msg);
+    
+    // post an error event to the owner
+    void PostError(const wxString& msg);
+
+    // reimplement count to include the FS stream watches
+    int GetWatchedPathsCount() const;
+
+    // reimplement to include paths from FS stream watches
+	int GetWatchedPaths(wxArrayString* paths) const;
+ 
+private:
+  
+  // map of path => FSEventStreamRef
+  FSEventStreamRefMap m_streams;
+
+};
+
+#endif /* wxUSE_FSWATCHER */
+
+#endif  /* _WX_FSWATCHER_FSEVENTS_H_ */
+
diff --git a/interface/wx/fswatcher.h b/interface/wx/fswatcher.h
index cd4cd29..00cc96a 100644
--- a/interface/wx/fswatcher.h
+++ b/interface/wx/fswatcher.h
@@ -78,10 +78,11 @@ public:
         Additionally a file mask can be specified to include only files
         matching that particular mask.
 
-        This method is implemented efficiently on MSW, but should be used with
-        care on other platforms for directories with lots of children (e.g. the
-        root directory) as it calls Add() for each subdirectory, potentially
-        creating a lot of watches and taking a long time to execute.
+        This method is implemented efficiently on MSW and Mac OS X >= 10.7, but 
+        should be used with care on other platforms for directories with lots 
+        of children (e.g. the root directory) as it calls Add() for each 
+        subdirectory, potentially creating a lot of watches and taking a long 
+        time to execute.
 
         Note that on platforms that use symbolic links, you will probably want
         to have called wxFileName::DontFollowLink on @a path. This is especially
@@ -242,8 +243,9 @@ enum wxFSWFlags
         Notice that under MSW this event is sometimes -- although not always --
         followed by a ::wxFSW_EVENT_MODIFY for the new file.
 
-        Under OS X this event is currently not detected and instead separate
-        ::wxFSW_EVENT_CREATE and ::wxFSW_EVENT_DELETE events are.
+        Under OS X this event is only detected when watching entire trees. When
+        watching directories, separate ::wxFSW_EVENT_CREATE and 
+        ::wxFSW_EVENT_DELETE events are detected instead.
      */
     wxFSW_EVENT_RENAME = 0x04,
 
@@ -253,7 +255,7 @@ enum wxFSWFlags
         Depending on the program doing the file modification, multiple such
         events can be reported for a single logical file update.
 
-        Under OS X this event is currently not detected.
+        Under OS X this event is only detected when watching entire trees.
      */
     wxFSW_EVENT_MODIFY = 0x08,
 
@@ -267,7 +269,8 @@ enum wxFSWFlags
     /**
         The item's metadata was changed, e.g.\ its permissions or timestamps.
 
-        This event is currently only detected under Linux.
+        This event is currently only detected under Linux or OS X.
+        Under OS X this event is only detected when watching entire trees.
 
         @since 2.9.5
      */
@@ -279,7 +282,8 @@ enum wxFSWFlags
         wxFSW_EVENT_UNMOUNT cannot be set; unmount events are produced automatically. This flag
         is therefore not included in wxFSW_EVENT_ALL.
 
-        This event is currently only detected under Linux.
+        This event is currently only detected under Linux or OS X.
+        Under OS X this event is only detected when watching entire trees.
 
         @since 2.9.5
     */
diff --git a/src/osx/fswatcher_fsevents.cpp b/src/osx/fswatcher_fsevents.cpp
new file mode 100644
index 0000000..5b647ae
--- /dev/null
+++ b/src/osx/fswatcher_fsevents.cpp
@@ -0,0 +1,509 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/osx/fswatcher_fsevents.cpp
+// Purpose:     File System watcher that uses the FS Events framework
+//              of Mac OS X to efficiently watch trees
+// Author:      Roberto Perpuly
+// Created:     2015-04-24
+// Copyright:   (c) 2015 Roberto Perpuly <robertop2004@gmail.com>
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_FSWATCHER
+
+#include "wx/fswatcher.h"
+#include "wx/osx/core/cfstring.h"
+#include <CoreFoundation/CoreFoundation.h>
+
+// a small class that we will give the fs events 
+// framework, which will be forwarded to the function
+// that gets called when files change.
+class wxFSEventWatcherContext
+{
+public:
+  
+    // Watcher pointer will not be owned by this class.
+    wxFSEventWatcherContext(wxFsEventsFileSystemWatcher* watcher, 
+    int watcherEventFlags,
+    const wxString& filespec)
+    : m_watcher(watcher)
+    , m_watcherEventFlags(watcherEventFlags)
+    , m_filespec(filespec)
+    {    
+
+    }
+
+    // Will return true if the given event file and flags
+    // match the filespec and event flags given to the
+    // AddTree method.
+    bool IsDesiredEvent(const wxFileName& eventFileName, int eventFlags)
+    {
+        // warning and errors are always sent to the event handler
+        if ( eventFlags & wxFSW_EVENT_ERROR )
+        {
+            return true;
+        }
+        if ( eventFlags & wxFSW_EVENT_WARNING )
+        {
+            return true;
+        }
+        
+        if ( (m_watcherEventFlags & eventFlags) == 0 )
+        {
+        // event handler does not want to see this event
+            return false;
+        }
+        
+        return m_filespec.empty() || 
+            wxMatchWild(m_filespec, eventFileName.GetFullName());
+    }
+    
+    wxFsEventsFileSystemWatcher* m_watcher;
+    
+    // the event flags that the event handler
+    // desires to be notified of
+    int m_watcherEventFlags;
+    
+    // the filespec that the event handler
+    // desires to be notified of
+    wxString m_filespec;
+    
+private:
+
+    wxDECLARE_NO_COPY_CLASS(wxFSEventWatcherContext);
+};
+
+// Translate kFSEventStreamEventFlag* flags
+// to wxFSW_EVENT_* flags.
+// warning and msg are out parameters, filled in when
+// there is an error in the stream
+static int wxFSEventsToWatcherFlags(FSEventStreamEventFlags flags, 
+wxFSWWarningType& warning, wxString& msg)
+{
+    msg = "";
+    warning = wxFSW_WARNING_NONE;
+    
+    // see https://developer.apple.com/library/mac/documentation/Darwin/Reference/FSEvents_Ref/index.html
+    // for event flag meanings
+    int ret = 0;
+    int warnings =
+        kFSEventStreamEventFlagMustScanSubDirs
+        | kFSEventStreamEventFlagUserDropped
+        | kFSEventStreamEventFlagKernelDropped
+        | kFSEventStreamEventFlagMount
+    ;
+    
+    int errors = kFSEventStreamEventFlagRootChanged;
+    
+    // the following flags are not handled
+    // kFSEventStreamEventFlagHistoryDone (we never ask for old events)
+    // kFSEventStreamEventFlagEventIdsWrapped ( we don't keep track nor
+    //  expose event IDs)
+    
+    int created = kFSEventStreamEventFlagItemCreated;
+    int deleted = kFSEventStreamEventFlagItemRemoved;
+    int renamed = kFSEventStreamEventFlagItemRenamed;
+    int modified = kFSEventStreamEventFlagItemModified;
+    int attrib = kFSEventStreamEventFlagItemChangeOwner
+        | kFSEventStreamEventFlagItemFinderInfoMod
+        | kFSEventStreamEventFlagItemInodeMetaMod
+        | kFSEventStreamEventFlagItemXattrMod;
+    
+    if ( created & flags )
+    {
+        ret |= wxFSW_EVENT_CREATE;
+    }
+    if ( deleted & flags )
+    {
+        ret |= wxFSW_EVENT_DELETE;
+    } 
+    if ( renamed & flags )
+    {
+        ret |= wxFSW_EVENT_RENAME;
+    }
+    if ( modified & flags )
+    {
+        ret |= wxFSW_EVENT_MODIFY;
+    }
+    if ( attrib & flags )
+    {
+        ret |= wxFSW_EVENT_ATTRIB;
+    }
+    if ( kFSEventStreamEventFlagUnmount & flags )
+    {
+        ret |= wxFSW_EVENT_UNMOUNT;
+    }
+    if ( warnings & flags )
+    {
+        warning = wxFSW_WARNING_GENERAL;
+        ret |= wxFSW_EVENT_WARNING;
+        if (flags & kFSEventStreamEventFlagMustScanSubDirs)
+        {
+            msg += "Must re-scan sub directories.";
+        }
+        if (flags & kFSEventStreamEventFlagUserDropped)
+        {
+            msg += "User dropped events";
+            warning = wxFSW_WARNING_OVERFLOW;
+        }
+        if (flags & kFSEventStreamEventFlagKernelDropped)
+        {
+            msg += "Kernel dropped events";
+            warning = wxFSW_WARNING_OVERFLOW;
+        }
+        if (flags & kFSEventStreamEventFlagMount)
+        {
+            msg += "A volume was mounted underneath the watched directory.";
+        }
+    }
+    if ( errors & flags )
+    {
+        ret |= wxFSW_EVENT_ERROR;
+        msg = "Path being watched has been renamed";
+    }
+    
+    //  don't think that fs events tells us about wxFSW_EVENT_ACCESS
+    return ret;
+}
+    
+// Fills in eventFileName appropriately based on whether the 
+// event was on a file or a directory
+static void FileNameFromEvent(wxFileName& eventFileName, char* path, 
+    FSEventStreamEventFlags flags)
+{
+    wxString strPath(path);
+    if ( flags & kFSEventStreamEventFlagItemIsFile )
+    {
+        eventFileName.Assign(strPath);
+    }
+    if ( flags & kFSEventStreamEventFlagItemIsDir ) 
+    { 
+        eventFileName.AssignDir(strPath);
+    }
+}
+
+// this is the function that the FsEvents framework
+// will call to notify us that a file has been changed
+static void wxFSEventCallback(ConstFSEventStreamRef WXUNUSED(streamRef), void *clientCallBackInfo, 
+    size_t numEvents, void *eventPaths, const FSEventStreamEventFlags eventFlags[], 
+    const FSEventStreamEventId WXUNUSED(eventIds)[])
+{
+    wxFSEventWatcherContext* context = 
+        (wxFSEventWatcherContext*) clientCallBackInfo;
+
+    char** paths = (char**) eventPaths;
+    int lastWxEventFlags = 0;
+    wxFileName lastEventFileName;
+    wxString msg;
+    wxFSWWarningType warning = wxFSW_WARNING_NONE;
+    wxFileName eventFileName;
+    for ( size_t i = 0; i < numEvents; i++ )
+    {
+        FSEventStreamEventFlags flags = eventFlags[i];
+        FileNameFromEvent(eventFileName, paths[i], flags);
+        int wxEventFlags = wxFSEventsToWatcherFlags(flags, warning, msg);
+        if ( context->IsDesiredEvent(eventFileName, wxEventFlags) )
+        {
+            // this is a naive way of looking for file renames
+            // wx presents a renames with a from and to paths
+            // but fs events events do not give us this (it only 
+            // provides that a file was renamed, not what the new 
+            // name is)
+            // we deduce the old and new paths by looking for consecutive
+            // renames. This is very naive and won't catch simulatenous
+            // renames inside the latency period, nor renames from/to
+            // a directory that is not inside the watched paths.
+            if (wxEventFlags == wxFSW_EVENT_RENAME && lastWxEventFlags == wxFSW_EVENT_RENAME)
+            {
+                context->m_watcher->PostChange(lastEventFileName, eventFileName, wxEventFlags);
+            }
+            else if (flags == kFSEventStreamEventFlagRootChanged)
+            {
+                // send two events: the delete event and the error event
+                context->m_watcher->PostChange(eventFileName, eventFileName, wxFSW_EVENT_DELETE);
+                context->m_watcher->PostError(msg);
+            }
+            else if (wxEventFlags != wxFSW_EVENT_RENAME)
+            {
+                context->m_watcher->PostChange(eventFileName, eventFileName, wxEventFlags);
+            }
+            else 
+            {
+                // this is a "rename" event that we only saw once, meaning that
+                // a file was renamed to somewhere inside the watched tree
+                // OR a file was renamed to somewhere outside the watched tree
+                if (!eventFileName.IsDir())
+                {
+                    int fileEventType = eventFileName.FileExists() ? wxFSW_EVENT_CREATE : wxFSW_EVENT_DELETE;
+                    context->m_watcher->PostChange(eventFileName, eventFileName, fileEventType); 
+                }
+                if (eventFileName.IsDir())
+                {
+                    int dirEventType = eventFileName.DirExists() ? wxFSW_EVENT_CREATE : wxFSW_EVENT_DELETE;
+                    context->m_watcher->PostChange(eventFileName, eventFileName, dirEventType); 
+                }
+            }
+
+            if (wxEventFlags & wxFSW_EVENT_WARNING)
+            {
+                context->m_watcher->PostWarning(warning, msg);
+            }
+
+            // a single rename (without the second rename) may be due
+            // to the file being renamed into a directory outside of the
+            // watch path    
+            lastWxEventFlags = wxEventFlags;
+            lastEventFileName = eventFileName;
+        }
+    }
+}
+
+static void wxDeleteContext(const void* context)
+{
+    wxFSEventWatcherContext* watcherContext =
+        (wxFSEventWatcherContext*) context;
+    delete watcherContext;
+}
+
+wxFsEventsFileSystemWatcher::wxFsEventsFileSystemWatcher()
+: wxKqueueFileSystemWatcher()
+{
+
+}
+
+wxFsEventsFileSystemWatcher::wxFsEventsFileSystemWatcher(const wxFileName& path,
+    int events)
+: wxKqueueFileSystemWatcher(path, events)
+{
+
+}
+
+wxFsEventsFileSystemWatcher::~wxFsEventsFileSystemWatcher()
+{
+
+}
+
+bool wxFsEventsFileSystemWatcher::AddTree(const wxFileName& path, int events,
+    const wxString& filespec) 
+{
+    if (!path.DirExists())
+    {
+        return false;
+    }
+    wxString canonical = GetCanonicalPath(path);
+    if ( canonical.empty() )
+    {
+        return false;
+    }
+    CFRunLoopRef cfLoop = CFRunLoopGetCurrent();
+    wxASSERT_MSG(
+        cfLoop, 
+        "there must be a current event loop; this file watcher needs it."
+    );
+    if ( ! cfLoop )
+    {
+        return false;
+    }
+
+    if ( m_streams.find(canonical) != m_streams.end() )
+    {
+        // how to take into account filespec
+        // if client adds a watch for /home/*.cpp
+        // and then on another call wants to add a
+        // call to /home/*.h
+        // ideally we should not create another watch
+        // however we would need to keep both filespecs
+        // around, which we don't do now
+        return false;
+    }
+
+    // will need to pass the desired event flags
+    // and filespec to our callback via the context
+    // we make sure to give the context a cleanup
+    // callback
+    FSEventStreamContext ctx;
+    wxFSEventWatcherContext* watcherContext = new wxFSEventWatcherContext(
+        this, events, filespec.Clone()
+    );
+    ctx.version = 0;
+    ctx.info = watcherContext;
+    ctx.retain = NULL;
+    ctx.release = &wxDeleteContext;
+    ctx.copyDescription = NULL;  
+    CFTimeInterval latency = 0.2;
+
+    wxMacUniCharBuffer pathChars(path.GetPath());
+    CFStringRef pathRef = CFStringCreateWithCharacters(
+        kCFAllocatorDefault,
+        pathChars.GetBuffer(),
+        pathChars.GetChars()
+    );
+    CFArrayRef pathRefs = CFArrayCreate(
+        kCFAllocatorDefault, (const void**)&pathRef, 1, NULL
+    );
+    FSEventStreamCreateFlags flags = kFSEventStreamCreateFlagWatchRoot 
+        | kFSEventStreamCreateFlagFileEvents;
+
+    FSEventStreamRef stream = FSEventStreamCreate(
+        kCFAllocatorDefault, 
+        &wxFSEventCallback, 
+        &ctx, 
+        pathRefs, kFSEventStreamEventIdSinceNow,
+        latency, flags);
+    bool started = false;
+    if ( stream )
+    {
+        FSEventStreamScheduleWithRunLoop(stream, cfLoop, kCFRunLoopDefaultMode);
+        started = FSEventStreamStart(stream);
+        if ( started )
+        {
+            m_streams[canonical] = stream;
+        }
+    }
+
+    // cleanup the paths, as we own the pointers
+    CFRelease(pathRef);
+    CFRelease(pathRefs);
+
+    wxASSERT_MSG(stream, "could not create FS stream");
+    return started;
+}
+
+bool wxFsEventsFileSystemWatcher::RemoveTree(const wxFileName& path) 
+{
+    wxString canonical = GetCanonicalPath(path);
+    if ( canonical.empty() )
+    {
+        return false;
+    }
+
+    // remove any kqueue watches created with Add()
+    // RemoveTree() should remove all watches no matter
+    // if they are tree watches or single directory watches
+    wxArrayString dirsWatched;
+    wxKqueueFileSystemWatcher::GetWatchedPaths(&dirsWatched);
+    for ( size_t i = 0; i < dirsWatched.size(); i++ )
+    {
+        if (dirsWatched[i].Find(canonical) == 0)
+        {
+            wxKqueueFileSystemWatcher::Remove(dirsWatched[i]);
+        }
+    }
+    
+    FSEventStreamRefMap::iterator it = m_streams.find(canonical);
+    bool removed = false;
+    if ( it != m_streams.end() )
+    {
+        FSEventStreamStop(it->second);
+        FSEventStreamInvalidate(it->second);
+        FSEventStreamRelease(it->second);
+        m_streams.erase(it);
+        removed = true;
+    }
+    return removed;
+}
+
+bool wxFsEventsFileSystemWatcher::RemoveAll() 
+{
+    // remove all watches created with Add()
+    bool ret = wxKqueueFileSystemWatcher::RemoveAll();
+    FSEventStreamRefMap::iterator it = m_streams.begin();
+    while ( it != m_streams.end() )
+    {
+        FSEventStreamStop(it->second);
+        FSEventStreamInvalidate(it->second);
+        FSEventStreamRelease(it->second);
+        it++;
+        ret |= true;
+    }
+    m_streams.clear();
+    return ret;
+}
+
+void wxFsEventsFileSystemWatcher::PostChange(const wxFileName& oldFileName, 
+    const wxFileName& newFileName, int event)
+{
+    wxASSERT_MSG(this->GetOwner(), "owner must exist");
+    if ( !this->GetOwner() )
+    {
+        return;
+    }
+
+    // fs events flags are a bit mask, but wx FSW events
+    // are not, meaning that fs event flag
+    // might be 
+    // kFSEventStreamEventFlagItemCreated | kFSEventStreamEventFlagItemInodeMetaMod
+    // this means we must send 2 events not 1
+    int allEvents[6] = {
+        wxFSW_EVENT_CREATE,
+        wxFSW_EVENT_DELETE,
+        wxFSW_EVENT_RENAME,
+        wxFSW_EVENT_MODIFY,
+        wxFSW_EVENT_ACCESS,
+        wxFSW_EVENT_ATTRIB    
+    };
+
+    for ( int i = 0; i < 6; i++ )
+    {
+        if ( event & allEvents[i] )
+        {
+            wxFileSystemWatcherEvent* evt = new wxFileSystemWatcherEvent(
+                allEvents[i], oldFileName, newFileName
+            );
+            wxQueueEvent(this->GetOwner(), evt);
+        }
+    }
+}
+
+void wxFsEventsFileSystemWatcher::PostWarning(wxFSWWarningType warning, 
+    const wxString& msg)
+{
+    wxFileSystemWatcherEvent* evt = new wxFileSystemWatcherEvent(
+        wxFSW_EVENT_WARNING, warning, msg
+    );
+    wxASSERT_MSG(this->GetOwner(), "owner must exist");
+    if (this->GetOwner())
+    {
+        wxQueueEvent(this->GetOwner(), evt);
+    }
+}
+
+void wxFsEventsFileSystemWatcher::PostError(const wxString& msg)
+{
+    wxFileSystemWatcherEvent* evt = new wxFileSystemWatcherEvent(
+        wxFSW_EVENT_ERROR, wxFSW_WARNING_NONE, msg
+    );
+    wxASSERT_MSG(this->GetOwner(), "owner must exist");
+    if (this->GetOwner())
+    {
+        wxQueueEvent(this->GetOwner(), evt);
+    }
+}
+
+int wxFsEventsFileSystemWatcher::GetWatchedPathsCount() const
+{
+    return m_streams.size() + wxFileSystemWatcherBase::GetWatchedPathsCount();
+}
+
+int wxFsEventsFileSystemWatcher::GetWatchedPaths(wxArrayString* paths) const
+{
+    wxCHECK_MSG( paths != NULL, -1, "Null array passed to retrieve paths");
+    if ( !paths )
+    {
+        return 0;
+    }
+    wxFileSystemWatcherBase::GetWatchedPaths(paths);
+    FSEventStreamRefMap::const_iterator it = m_streams.begin();
+    for ( ; it != m_streams.end(); it++ )
+    {
+        paths->push_back(it->first);
+    }
+    return paths->size();
+}
+#endif // wxUSE_FSWATCHER
diff --git a/src/unix/fswatcher_kqueue.cpp b/src/unix/fswatcher_kqueue.cpp
index 5ac0796..0fd8023 100644
--- a/src/unix/fswatcher_kqueue.cpp
+++ b/src/unix/fswatcher_kqueue.cpp
@@ -279,8 +279,8 @@ protected:
     {
         wxASSERT_MSG(e.udata, "Null user data associated with kevent!");
 
-        wxLogTrace(wxTRACE_FSWATCHER, "Event: ident=%d, filter=%d, flags=%u, "
-                   "fflags=%u, data=%d, user_data=%p",
+        wxLogTrace(wxTRACE_FSWATCHER, "Event: ident=%llu, filter=%d, flags=%u, "
+                   "fflags=%u, data=%lld, user_data=%lp",
                    e.ident, e.filter, e.flags, e.fflags, e.data, e.udata);
 
         // for ease of use
diff --git a/tests/Makefile.in b/tests/Makefile.in
index 600ea18..fbe282b 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -83,7 +83,6 @@ TEST_OBJECTS =  \
 	test_filesystest.o \
 	test_fontmaptest.o \
 	test_formatconvertertest.o \
-	test_fswatchertest.o \
 	test_hashes.o \
 	test_output.o \
 	test_input.o \
@@ -238,6 +237,7 @@ TEST_GUI_OBJECTS =  \
 	test_gui_keyboard.o \
 	test_gui_exec.o \
 	test_gui_fonttest.o \
+	test_gui_fswatchertest.o \
 	test_gui_image.o \
 	test_gui_rawbmp.o \
 	test_gui_htmlparser.o \
@@ -571,9 +571,6 @@ test_fontmaptest.o: $(srcdir)/fontmap/fontmaptest.cpp $(TEST_ODEP)
 test_formatconvertertest.o: $(srcdir)/formatconverter/formatconvertertest.cpp $(TEST_ODEP)
 	$(CXXC) -c -o $@ $(TEST_CXXFLAGS) $(srcdir)/formatconverter/formatconvertertest.cpp
 
-test_fswatchertest.o: $(srcdir)/fswatcher/fswatchertest.cpp $(TEST_ODEP)
-	$(CXXC) -c -o $@ $(TEST_CXXFLAGS) $(srcdir)/fswatcher/fswatchertest.cpp
-
 test_hashes.o: $(srcdir)/hashes/hashes.cpp $(TEST_ODEP)
 	$(CXXC) -c -o $@ $(TEST_CXXFLAGS) $(srcdir)/hashes/hashes.cpp
 
@@ -976,6 +973,9 @@ test_gui_exec.o: $(srcdir)/exec/exec.cpp $(TEST_GUI_ODEP)
 test_gui_fonttest.o: $(srcdir)/font/fonttest.cpp $(TEST_GUI_ODEP)
 	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/font/fonttest.cpp
 
+test_gui_fswatchertest.o: $(srcdir)/fswatcher/fswatchertest.cpp $(TEST_GUI_ODEP)
+	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/fswatcher/fswatchertest.cpp
+
 test_gui_image.o: $(srcdir)/image/image.cpp $(TEST_GUI_ODEP)
 	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/image/image.cpp
 
diff --git a/tests/fswatcher/fswatchertest.cpp b/tests/fswatcher/fswatchertest.cpp
index 2aaf600..ec6e835 100644
--- a/tests/fswatcher/fswatchertest.cpp
+++ b/tests/fswatcher/fswatchertest.cpp
@@ -191,10 +191,9 @@ public:
     enum { WAIT_DURATION = 3 };
 
     EventHandler(int types = wxFSW_EVENT_ALL) :
-        eg(EventGenerator::Get()), m_loop(0), m_count(0), m_watcher(0),
+        eg(EventGenerator::Get()), m_count(0), m_watcher(0),
         m_eventTypes(types)
     {
-        m_loop = new wxEventLoop();
         Connect(wxEVT_IDLE, wxIdleEventHandler(EventHandler::OnIdle));
         Connect(wxEVT_FSWATCHER, wxFileSystemWatcherEventHandler(
                                             EventHandler::OnFileSystemEvent));
@@ -203,17 +202,11 @@ public:
     virtual ~EventHandler()
     {
         delete m_watcher;
-        if (m_loop)
-        {
-            if (m_loop->IsRunning())
-                m_loop->Exit();
-            delete m_loop;
-        }
     }
 
     void Exit()
     {
-        m_loop->Exit();
+        wxEventLoopBase::GetActive()->Exit();
     }
 
     // sends idle event, so we get called in a moment
@@ -226,7 +219,6 @@ public:
     void Run()
     {
         SendIdle();
-        m_loop->Run();
     }
 
     void OnIdle(wxIdleEvent& /*evt*/)
@@ -386,7 +378,6 @@ public:
 
 protected:
     EventGenerator& eg;
-    wxEventLoopBase* m_loop;    // loop reference
     int m_count;                // idle events count
 
     wxFileSystemWatcher* m_watcher;
@@ -412,9 +403,6 @@ public:
     virtual void setUp();
     virtual void tearDown();
 
-protected:
-    wxEventLoopBase* m_loop;
-
 private:
     CPPUNIT_TEST_SUITE( FileSystemWatcherTestCase );
         CPPUNIT_TEST( TestEventCreate );
@@ -459,15 +447,9 @@ private:
     wxDECLARE_NO_COPY_CLASS(FileSystemWatcherTestCase);
 };
 
-// the test currently hangs under OS X for some reason and this prevents tests
-// ran by buildbot from completing so disable it until someone has time to
-// debug it
-//
-// FIXME: debug and fix this!
-#ifndef __WXOSX__
 // register in the unnamed registry so that these tests are run by default
 CPPUNIT_TEST_SUITE_REGISTRATION( FileSystemWatcherTestCase );
-#endif
+
 
 // also include in its own registry so that these tests can be run alone
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( FileSystemWatcherTestCase,
diff --git a/tests/makefile.bcc b/tests/makefile.bcc
index 18075e7..de152e5 100644
--- a/tests/makefile.bcc
+++ b/tests/makefile.bcc
@@ -63,7 +63,6 @@ TEST_OBJECTS =  \
 	$(OBJS)\test_filesystest.obj \
 	$(OBJS)\test_fontmaptest.obj \
 	$(OBJS)\test_formatconvertertest.obj \
-	$(OBJS)\test_fswatchertest.obj \
 	$(OBJS)\test_hashes.obj \
 	$(OBJS)\test_output.obj \
 	$(OBJS)\test_input.obj \
@@ -222,6 +221,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_keyboard.obj \
 	$(OBJS)\test_gui_exec.obj \
 	$(OBJS)\test_gui_fonttest.obj \
+	$(OBJS)\test_gui_fswatchertest.obj \
 	$(OBJS)\test_gui_image.obj \
 	$(OBJS)\test_gui_rawbmp.obj \
 	$(OBJS)\test_gui_htmlparser.obj \
@@ -609,9 +609,6 @@ $(OBJS)\test_fontmaptest.obj: .\fontmap\fontmaptest.cpp
 $(OBJS)\test_formatconvertertest.obj: .\formatconverter\formatconvertertest.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_CXXFLAGS) .\formatconverter\formatconvertertest.cpp
 
-$(OBJS)\test_fswatchertest.obj: .\fswatcher\fswatchertest.cpp
-	$(CXX) -q -c -P -o$@ $(TEST_CXXFLAGS) .\fswatcher\fswatchertest.cpp
-
 $(OBJS)\test_hashes.obj: .\hashes\hashes.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_CXXFLAGS) .\hashes\hashes.cpp
 
@@ -1020,6 +1017,9 @@ $(OBJS)\test_gui_exec.obj: .\exec\exec.cpp
 $(OBJS)\test_gui_fonttest.obj: .\font\fonttest.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\font\fonttest.cpp
 
+$(OBJS)\test_gui_fswatchertest.obj: .\fswatcher\fswatchertest.cpp
+	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\fswatcher\fswatchertest.cpp
+
 $(OBJS)\test_gui_image.obj: .\image\image.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\image\image.cpp
 
diff --git a/tests/makefile.gcc b/tests/makefile.gcc
index cf4a00d..617a4d5 100644
--- a/tests/makefile.gcc
+++ b/tests/makefile.gcc
@@ -55,7 +55,6 @@ TEST_OBJECTS =  \
 	$(OBJS)\test_filesystest.o \
 	$(OBJS)\test_fontmaptest.o \
 	$(OBJS)\test_formatconvertertest.o \
-	$(OBJS)\test_fswatchertest.o \
 	$(OBJS)\test_hashes.o \
 	$(OBJS)\test_output.o \
 	$(OBJS)\test_input.o \
@@ -216,6 +215,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_keyboard.o \
 	$(OBJS)\test_gui_exec.o \
 	$(OBJS)\test_gui_fonttest.o \
+	$(OBJS)\test_gui_fswatchertest.o \
 	$(OBJS)\test_gui_image.o \
 	$(OBJS)\test_gui_rawbmp.o \
 	$(OBJS)\test_gui_htmlparser.o \
@@ -585,9 +585,6 @@ $(OBJS)\test_fontmaptest.o: ./fontmap/fontmaptest.cpp
 $(OBJS)\test_formatconvertertest.o: ./formatconverter/formatconvertertest.cpp
 	$(CXX) -c -o $@ $(TEST_CXXFLAGS) $(CPPDEPS) $<
 
-$(OBJS)\test_fswatchertest.o: ./fswatcher/fswatchertest.cpp
-	$(CXX) -c -o $@ $(TEST_CXXFLAGS) $(CPPDEPS) $<
-
 $(OBJS)\test_hashes.o: ./hashes/hashes.cpp
 	$(CXX) -c -o $@ $(TEST_CXXFLAGS) $(CPPDEPS) $<
 
@@ -996,6 +993,9 @@ $(OBJS)\test_gui_exec.o: ./exec/exec.cpp
 $(OBJS)\test_gui_fonttest.o: ./font/fonttest.cpp
 	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
 
+$(OBJS)\test_gui_fswatchertest.o: ./fswatcher/fswatchertest.cpp
+	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
+
 $(OBJS)\test_gui_image.o: ./image/image.cpp
 	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
 
diff --git a/tests/makefile.vc b/tests/makefile.vc
index c640e26..d00d6c3 100644
--- a/tests/makefile.vc
+++ b/tests/makefile.vc
@@ -57,7 +57,6 @@ TEST_OBJECTS =  \
 	$(OBJS)\test_filesystest.obj \
 	$(OBJS)\test_fontmaptest.obj \
 	$(OBJS)\test_formatconvertertest.obj \
-	$(OBJS)\test_fswatchertest.obj \
 	$(OBJS)\test_hashes.obj \
 	$(OBJS)\test_output.obj \
 	$(OBJS)\test_input.obj \
@@ -226,6 +225,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_keyboard.obj \
 	$(OBJS)\test_gui_exec.obj \
 	$(OBJS)\test_gui_fonttest.obj \
+	$(OBJS)\test_gui_fswatchertest.obj \
 	$(OBJS)\test_gui_image.obj \
 	$(OBJS)\test_gui_rawbmp.obj \
 	$(OBJS)\test_gui_htmlparser.obj \
@@ -786,9 +786,6 @@ $(OBJS)\test_fontmaptest.obj: .\fontmap\fontmaptest.cpp
 $(OBJS)\test_formatconvertertest.obj: .\formatconverter\formatconvertertest.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_CXXFLAGS) .\formatconverter\formatconvertertest.cpp
 
-$(OBJS)\test_fswatchertest.obj: .\fswatcher\fswatchertest.cpp
-	$(CXX) /c /nologo /TP /Fo$@ $(TEST_CXXFLAGS) .\fswatcher\fswatchertest.cpp
-
 $(OBJS)\test_hashes.obj: .\hashes\hashes.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_CXXFLAGS) .\hashes\hashes.cpp
 
@@ -1197,6 +1194,9 @@ $(OBJS)\test_gui_exec.obj: .\exec\exec.cpp
 $(OBJS)\test_gui_fonttest.obj: .\font\fonttest.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\font\fonttest.cpp
 
+$(OBJS)\test_gui_fswatchertest.obj: .\fswatcher\fswatchertest.cpp
+	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\fswatcher\fswatchertest.cpp
+
 $(OBJS)\test_gui_image.obj: .\image\image.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\image\image.cpp
 
diff --git a/tests/test.bkl b/tests/test.bkl
index 3a12c9a..646111d 100644
--- a/tests/test.bkl
+++ b/tests/test.bkl
@@ -52,7 +52,6 @@
             filesys/filesystest.cpp
             fontmap/fontmaptest.cpp
             formatconverter/formatconvertertest.cpp
-            fswatcher/fswatchertest.cpp
             hashes/hashes.cpp
             interactive/output.cpp
             interactive/input.cpp
@@ -243,6 +242,7 @@
              -->
             exec/exec.cpp
             font/fonttest.cpp
+            fswatcher/fswatchertest.cpp
             image/image.cpp
             image/rawbmp.cpp
             html/htmlparser.cpp
diff --git a/tests/test_vc7_test.vcproj b/tests/test_vc7_test.vcproj
index af0c66e..55de408 100644
--- a/tests/test_vc7_test.vcproj
+++ b/tests/test_vc7_test.vcproj
@@ -413,9 +413,6 @@
 				RelativePath=".\formatconverter\formatconvertertest.cpp">
 			</File>
 			<File
-				RelativePath=".\fswatcher\fswatchertest.cpp">
-			</File>
-			<File
 				RelativePath=".\uris\ftp.cpp">
 			</File>
 			<File
diff --git a/tests/test_vc7_test_gui.vcproj b/tests/test_vc7_test_gui.vcproj
index e8c42fa..0ca161c 100644
--- a/tests/test_vc7_test_gui.vcproj
+++ b/tests/test_vc7_test_gui.vcproj
@@ -404,6 +404,9 @@
 				RelativePath=".\controls\frametest.cpp">
 			</File>
 			<File
+				RelativePath=".\fswatcher\fswatchertest.cpp">
+			</File>
+			<File
 				RelativePath=".\misc\garbage.cpp">
 			</File>
 			<File
diff --git a/tests/test_vc8_test.vcproj b/tests/test_vc8_test.vcproj
index 1ad54b5..b8ab0d1 100644
--- a/tests/test_vc8_test.vcproj
+++ b/tests/test_vc8_test.vcproj
@@ -1019,10 +1019,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\fswatcher\fswatchertest.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\uris\ftp.cpp"
 				>
 			</File>
diff --git a/tests/test_vc8_test_gui.vcproj b/tests/test_vc8_test_gui.vcproj
index 74627c1..01db114 100644
--- a/tests/test_vc8_test_gui.vcproj
+++ b/tests/test_vc8_test_gui.vcproj
@@ -1007,6 +1007,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\fswatcher\fswatchertest.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\misc\garbage.cpp"
 				>
 			</File>
diff --git a/tests/test_vc9_test.vcproj b/tests/test_vc9_test.vcproj
index 2fd3a42..5e8428f 100644
--- a/tests/test_vc9_test.vcproj
+++ b/tests/test_vc9_test.vcproj
@@ -991,10 +991,6 @@
 				>
 			</File>
 			<File
-				RelativePath=".\fswatcher\fswatchertest.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\uris\ftp.cpp"
 				>
 			</File>
diff --git a/tests/test_vc9_test_gui.vcproj b/tests/test_vc9_test_gui.vcproj
index 6c71a3b..81dac1d 100644
--- a/tests/test_vc9_test_gui.vcproj
+++ b/tests/test_vc9_test_gui.vcproj
@@ -979,6 +979,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\fswatcher\fswatchertest.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\misc\garbage.cpp"
 				>
 			</File>
-- 
2.3.2 (Apple Git-55)


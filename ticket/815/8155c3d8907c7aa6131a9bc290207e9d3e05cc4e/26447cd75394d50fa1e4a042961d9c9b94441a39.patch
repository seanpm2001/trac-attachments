From fd64d759471a4343df37db6ba8d26b78ae425c64 Mon Sep 17 00:00:00 2001
From: Roberto Perpuly <robertop2004@gmail.com>
Date: Fri, 22 May 2015 00:19:21 -0700
Subject: [PATCH 1/2] Fixed and re-enabled fs watcher tests on OS X.

The FS watcher tests now run by default on all platforms.
---
 tests/fswatcher/fswatchertest.cpp | 57 +++++++++++++++++++++++++++------------
 1 file changed, 40 insertions(+), 17 deletions(-)

diff --git a/tests/fswatcher/fswatchertest.cpp b/tests/fswatcher/fswatchertest.cpp
index 2aaf600..d5da8c3 100644
--- a/tests/fswatcher/fswatchertest.cpp
+++ b/tests/fswatcher/fswatchertest.cpp
@@ -191,10 +191,11 @@ public:
     enum { WAIT_DURATION = 3 };
 
     EventHandler(int types = wxFSW_EVENT_ALL) :
-        eg(EventGenerator::Get()), m_loop(0), m_count(0), m_watcher(0),
+        eg(EventGenerator::Get()), m_loop(0), m_loopActivator(NULL), m_count(0), m_watcher(0),
         m_eventTypes(types)
     {
         m_loop = new wxEventLoop();
+        m_loopActivator = new wxEventLoopActivator(m_loop);
         Connect(wxEVT_IDLE, wxIdleEventHandler(EventHandler::OnIdle));
         Connect(wxEVT_FSWATCHER, wxFileSystemWatcherEventHandler(
                                             EventHandler::OnFileSystemEvent));
@@ -203,6 +204,7 @@ public:
     virtual ~EventHandler()
     {
         delete m_watcher;
+        delete m_loopActivator;
         if (m_loop)
         {
             if (m_loop->IsRunning())
@@ -221,6 +223,13 @@ public:
     {
         wxIdleEvent* e = new wxIdleEvent();
         QueueEvent(e);
+#ifdef __WXOSX__
+
+        // The fs watcher test cases will hang on OSX if Yield() is not called.
+        // It seems that the OS X event loop and / or queueing behaves
+        // differently than on MSW and linux.
+        m_loop->Yield(true);
+#endif
     }
 
     void Run()
@@ -387,6 +396,7 @@ public:
 protected:
     EventGenerator& eg;
     wxEventLoopBase* m_loop;    // loop reference
+    wxEventLoopActivator* m_loopActivator;
     int m_count;                // idle events count
 
     wxFileSystemWatcher* m_watcher;
@@ -441,7 +451,7 @@ private:
         CPPUNIT_TEST( TestSingleWatchtypeEvent );
 #endif // wxHAS_INOTIFY
 
-        CPPUNIT_TEST( TestNoEventsAfterRemove );
+    CPPUNIT_TEST( TestNoEventsAfterRemove );
     CPPUNIT_TEST_SUITE_END();
 
     void TestEventCreate();
@@ -459,23 +469,23 @@ private:
     wxDECLARE_NO_COPY_CLASS(FileSystemWatcherTestCase);
 };
 
-// the test currently hangs under OS X for some reason and this prevents tests
-// ran by buildbot from completing so disable it until someone has time to
-// debug it
-//
-// FIXME: debug and fix this!
-#ifndef __WXOSX__
 // register in the unnamed registry so that these tests are run by default
-CPPUNIT_TEST_SUITE_REGISTRATION( FileSystemWatcherTestCase );
-#endif
-
 // also include in its own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_REGISTRATION( FileSystemWatcherTestCase );
 CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( FileSystemWatcherTestCase,
                                         "FileSystemWatcherTestCase" );
 
 void FileSystemWatcherTestCase::setUp()
 {
     wxLog::AddTraceMask(wxTRACE_FSWATCHER);
+
+    //  before each test, remove the dir it exists
+    // it would exist if the previous test run was aborted
+    wxString tmp = wxStandardPaths::Get().GetTempDir();
+    wxFileName dir;
+    dir.AssignDir(tmp);
+    dir.AppendDir("fswatcher_test");
+    dir.Rmdir(wxPATH_RMDIR_RECURSIVE);
     EventGenerator::Get().GetWatchDir();
 }
 
@@ -802,12 +812,12 @@ void FileSystemWatcherTestCase::TestTrees()
             CPPUNIT_ASSERT(m_watcher);
 
             size_t treeitems = 1; // the trunk
-#ifndef __WINDOWS__
-            // When there's no file mask, wxMSW sets a single watch
+#if !defined(__WINDOWS__) && !defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
+            // When there's no file mask, wxMSW and wxOSX sets a single watch
             // on the trunk which is implemented recursively.
             // wxGTK always sets an additional watch for each subdir
             treeitems += subdirs + 1; // +1 for 'child'
-#endif // __WINDOWS__
+#endif // !__WINDOWS__ && !defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
 
             // Store the initial count; there may already be some watches
             const int initial = m_watcher->GetWatchedPathsCount();
@@ -833,9 +843,9 @@ void FileSystemWatcherTestCase::TestTrees()
             // Except that in wxMSW this isn't true: each watch will be a
             // single, recursive dir; so fudge the count
             size_t fudge = 0;
-#ifdef __WINDOWS__
+#if defined(__WINDOWS__) || defined(wxHAVE_FSEVENTS_FILE_NOTIFICATIONS)
             fudge = 1;
-#endif // __WINDOWS__
+#endif // __WINDOWS__ || wxHAVE_FSEVENTS_FILE_NOTIFICATIONS
             m_watcher->AddTree(dir);
             CPPUNIT_ASSERT_EQUAL(plustree + fudge, m_watcher->GetWatchedPathsCount());
             m_watcher->RemoveTree(child);
@@ -871,9 +881,13 @@ void FileSystemWatcherTestCase::TestTrees()
             // When we use a filter, both wxMSW and wxGTK implementations set
             // an additional watch for each subdir (+1 for the root dir itself
             // and another +1 for "child").
+            // on Mac, if we use FS events then we still only have 1 watch
+#ifdef wxHAVE_FSEVENTS_FILE_NOTIFICATIONS
+            const size_t treeitems = 1;
+#else
             const size_t treeitems = subdirs + 2;
+#endif
             m_watcher->AddTree(dir, wxFSW_EVENT_ALL, "*.txt");
-
             const int plustree = m_watcher->GetWatchedPathsCount();
             CPPUNIT_ASSERT_EQUAL(initial + treeitems, plustree);
 
@@ -943,7 +957,16 @@ void FileSystemWatcherTestCase::TestTrees()
     };
 
     TreeTester tester;
+
+// The fs watcher test cases will hang on OSX if we call Run().
+// This is likely due to differences between the event loop
+// between OS X and the other ports.
+#ifdef __WXOSX__
+    tester.Init();
+    tester.GenerateEvent();
+#else
     tester.Run();
+#endif
 }
 
 
-- 
2.3.2 (Apple Git-55)


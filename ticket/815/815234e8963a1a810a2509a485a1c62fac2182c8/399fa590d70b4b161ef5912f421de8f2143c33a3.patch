Index: include/wx/affinematrix2d.h
===================================================================
--- include/wx/affinematrix2d.h	(revision 0)
+++ include/wx/affinematrix2d.h	(revision 0)
@@ -0,0 +1,71 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:         wx/affinematrix2d.h
+// Purpose:      wxAffineMatrix2D class.
+// Author:       Based on wxTransformMatrix by Chris Breeze, Julian Smart
+// Created:      2011-04-05
+// Copyright:    (c) wxWidgets team
+// Licence:      wxWidgets licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AFFINEMATRIX2D_H_
+#define _WX_AFFINEMATRIX2D_H_
+
+#include "wx/affinematrix2dbase.h"
+
+
+//  A 3x2 matrix to do 2D transformations.
+//  It can be used to map data to window coordinates.
+//  For example drawing a picture (composed of several primitives)
+//  at a certain coordinate and angle within another parent picture.
+class WXDLLIMPEXP_CORE wxAffineMatrix2D : public wxAffineMatrix2DBase
+{
+public:
+    wxAffineMatrix2D() : m_11(1), m_12(0),
+                         m_21(0), m_22(1),
+                         m_tx(0), m_ty(0)
+    {}
+
+    // sets the matrix to the respective values
+    virtual void Set( const wxMatrix2D& mat2D, const wxPoint2DDouble& tr );
+
+    // gets the component values of the matrix
+    virtual void Get( wxMatrix2D* mat2D, wxPoint2DDouble* tr ) const;
+
+    // concatenates the matrices
+    virtual void Concat( const wxAffineMatrix2DBase& t );
+
+    // makes this its inverse matrix
+    virtual bool Invert();
+
+    // return true if this is the identity matrix
+    virtual bool IsIdentity() const;
+
+    // returns true if the elements of the transformation matrix are equal
+    virtual bool IsEqual( const wxAffineMatrix2DBase& t ) const;
+
+    //
+    // transformation
+    //
+
+    // add the translation to this matrix
+    virtual void Translate( wxDouble dx, wxDouble dy );
+
+    // add the scale to this matrix
+    virtual void Scale( wxDouble xScale, wxDouble yScale );
+
+    // add the rotation to this matrix (counter clockwise, radians)
+    virtual void Rotate( wxDouble ccRadians );
+
+protected:
+    // applies that matrix to the point
+    virtual wxPoint2DDouble DoTransformPoint( const wxPoint2DDouble& src ) const;
+
+    // applies the matrix except for translations
+    virtual wxPoint2DDouble DoTransformDistance( const wxPoint2DDouble& src ) const;
+
+
+private:
+    wxDouble  m_11, m_12, m_21, m_22, m_tx, m_ty;
+};
+
+#endif // _WX_AFFINEMATRIX2D_H_
Index: include/wx/affinematrix2dbase.h
===================================================================
--- include/wx/affinematrix2dbase.h	(revision 0)
+++ include/wx/affinematrix2dbase.h	(revision 0)
@@ -0,0 +1,112 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:         wx/affinematrix2dbase.h
+// Purpose:      Common interface for 2D transformation matrices.
+// Author:       Catalin Raceanu
+// Created:      2011-04-06
+// Copyright:    (c) wxWidgets team
+// Licence:      wxWidgets licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AFFINEMATRIX2DBASE_H_
+#define _WX_AFFINEMATRIX2DBASE_H_
+
+#include "wx/defs.h"
+#include "wx/geometry.h"
+
+struct wxMatrix2D
+{
+    wxMatrix2D(wxDouble v11 = 1, wxDouble v12 = 0, wxDouble v21 = 0, wxDouble v22 = 1)
+    {
+        m_11 = v11;  m_12 = v12;
+        m_21 = v21;  m_22 = v22;
+    }
+
+    wxDouble  m_11, m_12, m_21, m_22;
+};
+
+//  A 2x3 matrix to do 2D transformations.
+//  It can be used to map data to window coordinates.
+//  For example drawing a picture (composed of several primitives)
+//  at a certain coordinate and angle within another parent picture.
+class WXDLLIMPEXP_CORE wxAffineMatrix2DBase
+{
+public:
+    wxAffineMatrix2DBase() {}
+
+    // sets the matrix to the respective values
+    virtual void Set( const wxMatrix2D& mat2D, const wxPoint2DDouble& tr ) = 0;
+
+    // gets the component valuess of the matrix
+    virtual void Get( wxMatrix2D* mat2D, wxPoint2DDouble* tr ) const = 0;
+
+    // concatenates the matrix
+    virtual void Concat( const wxAffineMatrix2DBase& t ) = 0;
+
+    // makes this the inverse matrix
+    virtual bool Invert() = 0;
+
+    // return true if this is the identity matrix
+    virtual bool IsIdentity() const = 0;
+
+    // returns true if the elements of the transformation matrix are equal ?
+    virtual bool IsEqual( const wxAffineMatrix2DBase& t ) const = 0;
+    bool operator == ( const wxAffineMatrix2DBase& t ) const { return IsEqual(t); }
+    bool operator != ( const wxAffineMatrix2DBase& t ) const { return !IsEqual(t); }
+
+    //
+    // transformation
+    //
+
+    // add the translation to this matrix
+    virtual void Translate( wxDouble dx, wxDouble dy ) = 0;
+
+    // add the scale to this matrix
+    virtual void Scale( wxDouble xScale, wxDouble yScale ) = 0;
+
+    // add the rotation to this matrix (counter clockwise, radians)
+    virtual void Rotate( wxDouble ccRadians ) = 0;
+
+    // add mirroring to this matrix
+    void Mirror( int direction = wxHORIZONTAL )
+    {
+        wxDouble x = (direction & wxHORIZONTAL) ? -1 : 1;
+        wxDouble y = (direction & wxVERTICAL) ? -1 : 1;
+        Scale( x , y );
+    }
+
+    //
+    // apply the transforms
+    //
+
+    // applies that matrix to the point
+    wxPoint2DDouble TransformPoint( const wxPoint2DDouble& src ) const
+    { return DoTransformPoint(src); }
+
+    void TransformPoint( wxDouble* x, wxDouble* y ) const
+    {
+        wxCHECK_RET( x && y, "Can't be NULL" );
+
+        const wxPoint2DDouble& dst = DoTransformPoint(wxPoint2DDouble(*x, *y));
+        *x = dst.m_x;
+        *y = dst.m_y;
+    }
+
+    // applies the matrix except for translations
+    wxPoint2DDouble TransformDistance( const wxPoint2DDouble& src ) const
+    { return DoTransformDistance(src); }
+
+    void TransformDistance( wxDouble* dx, wxDouble* dy ) const
+    {
+        wxCHECK_RET( dx && dy, "Can't be NULL" );
+
+        const wxPoint2DDouble& dst = DoTransformDistance(wxPoint2DDouble(*dx, *dy));
+        *dx = dst.m_x;
+        *dy = dst.m_y;
+    }
+
+protected:
+    virtual wxPoint2DDouble DoTransformPoint( const wxPoint2DDouble& src ) const = 0;
+    virtual wxPoint2DDouble DoTransformDistance( const wxPoint2DDouble& src ) const = 0;
+};
+
+#endif // _WX_AFFINEMATRIX2DBASE_H_
Index: interface/wx/affinematrix2d.h
===================================================================
--- interface/wx/affinematrix2d.h	(revision 0)
+++ interface/wx/affinematrix2d.h	(revision 0)
@@ -0,0 +1,173 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        affinematrix2d.h
+// Purpose:     interface of wxAffineMatrix2D
+// Author:      wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxAffineMatrix2D
+
+    A 3x2 matrix to do 2D transformations.
+
+    It can be used to map data to window coordinates.
+    For example drawing a picture (composed of several primitives)
+    at a certain coordinate and angle within another parent picture.
+    It is used where possible to optimize calculations (i.e. wxDC).
+
+    @library{wxcore}
+    @category{misc}
+
+    @see wxDC
+*/
+class wxAffineMatrix2D
+{
+public:
+    /**
+        Default constructor.
+    */
+    wxAffineMatrix2D();
+
+    /**
+        Copy constructor.
+    */
+    wxAffineMatrix2D(const wxAffineMatrix2D& mat);
+
+    /**
+        Gets the component values of the matrix.
+
+        @param mat2D
+            The rotational components of the matrix (upper 2 x 2).
+        @param tr
+            The translational components of the matrix.
+    */
+    virtual void Get( wxMatrix2D* mat2D, wxPoint2DDouble* tr ) const;
+
+    /**
+        Set the element in the matrix at row,col.
+
+        @param mat2D
+            The rotational components of the matrix (upper 2 x 2).
+        @param tr
+            The translational components of the matrix.
+    */
+    virtual void Set( const wxMatrix2D& mat2D, const wxPoint2DDouble& tr );
+
+    /**
+        Concatenates this with another matrix. The parameter matrix is
+        the multiplicand.
+
+        @param wxAffineMatrix2DBase
+            The multiplicand.
+
+        @code
+        //           | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
+        // matrix' = | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
+        //           | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |
+        @endcode
+    */
+    virtual void Concat( const wxAffineMatrix2DBase& t );
+
+    /**
+        Makes this its invert matrix.
+
+        @code
+        //           | m_11  m_12  0 |
+        // Invert    | m_21  m_22  0 |
+        //           | m_tx  m_ty  1 |
+        @endcode
+    */
+    virtual bool Invert();
+
+    /**
+        Check if this is the identity matrix.
+    */
+    virtual bool IsIdentity() const;
+
+    //@{
+    /**
+        Check that this matrix is identical with @t.
+
+        @param wxAffineMatrix2DBase
+            The matrix compared with this.
+    */
+    virtual void IsEqual( const wxAffineMatrix2DBase& t );
+    bool operator == ( const wxAffineMatrix2DBase& t ) const;
+    //@}
+
+    /**
+        Check that this matrix differs from @t.
+
+        @param wxAffineMatrix2DBase
+            The matrix compared with this.
+    */
+    bool operator != ( const wxAffineMatrix2DBase& t ) const;
+
+    /**
+        Add the translation to this matrix.
+
+        @param dx
+            The translation in x direction.
+        @param dy
+            The translation in y direction.
+    */
+    virtual void Translate( wxDouble dx, wxDouble dy );
+
+    /**
+        Add scaling to this matrix.
+
+        @param xScale
+            Scaling in x direction.
+        @param yScale
+            Scaling in y direction.
+    */
+    virtual void Scale( wxDouble xScale, wxDouble yScale );
+
+    /**
+        Add mirroring to this matrix.
+
+        @param direction
+            The direction(s) used for mirroring. One of wxHORIZONTAL, wxVERTICAL, wxBOTH.
+    */
+    void Mirror( int direction = wxHORIZONTAL );
+
+    /**
+        Add counter clockwise rotation to this matrix.
+
+        @param ccRadians
+            Rotation angle in radians.
+    */
+    virtual void Rotate( wxDouble ccRadians );
+
+    /**
+        Applies this matrix to the point.
+
+        @param src
+            The point receiving the transformations.
+
+        @return The point with the transformations applied.
+    */
+    wxPoint2DDouble TransformPoint( const wxPoint2DDouble& src ) const;
+
+    /**
+        Applies this matrix except for translations.
+
+        @param src
+            The source receiving the transformations.
+
+        @return The source with the transformations applied.
+    */
+    wxPoint2DDouble TransformDistance( const wxPoint2DDouble& src ) const;
+
+protected:
+    /**
+        This method is called by TransformPoint() to really apply the transformations.
+    */
+    virtual wxPoint2DDouble DoTransformPoint( const wxPoint2DDouble& src ) const;
+
+    /**
+        This method is called by TransformDistance() to really apply the transformations.
+    */
+    virtual wxPoint2DDouble DoTransformDistance( const wxPoint2DDouble& src ) const;
+    
+};
Index: src/common/affinematrix2d.cpp
===================================================================
--- src/common/affinematrix2d.cpp	(revision 0)
+++ src/common/affinematrix2d.cpp	(revision 0)
@@ -0,0 +1,169 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        affinematrix2d.cpp
+// Purpose:     implementation of wxAffineMatrix2D
+// Author:      Based on wxTransformMatrix by Chris Breeze, Julian Smart
+// Created:     2011-04-05
+// Copyright:   (c) wxWidgets team
+// Licence:     wxWidgets licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "wx/affinematrix2d.h"
+#include "wx/math.h"
+
+    // sets the matrix to the respective values
+void wxAffineMatrix2D::Set( const wxMatrix2D &mat2D, const wxPoint2DDouble &tr )
+{
+    m_11 = mat2D.m_11;
+    m_12 = mat2D.m_12;
+    m_21 = mat2D.m_21;
+    m_22 = mat2D.m_22;
+    m_tx = tr.m_x;
+    m_ty = tr.m_y;
+}
+
+// gets the component valuess of the matrix
+void wxAffineMatrix2D::Get( wxMatrix2D *mat2D, wxPoint2DDouble *tr ) const
+{
+    mat2D->m_11 = m_11;
+    mat2D->m_12 = m_12;
+    mat2D->m_21 = m_21;
+    mat2D->m_22 = m_22;
+
+    if(tr)
+    {
+        tr->m_x = m_tx;
+        tr->m_y = m_ty;
+    }
+}
+
+// concatenates the matrix
+// | t.m_11  t.m_12  0 |   | m_11  m_12   0 |
+// | t.m_21  t.m_22  0 | x | m_21  m_22   0 |
+// | t.m_tx  t.m_ty  1 |   | m_tx  m_ty   1 |
+void wxAffineMatrix2D::Concat( const wxAffineMatrix2DBase &t )
+{
+    wxMatrix2D mat;
+    wxPoint2DDouble tr;
+    t.Get(&mat, &tr);
+
+    m_tx += tr.m_x*m_11 + tr.m_y*m_21;
+    m_ty += tr.m_x*m_12 + tr.m_y*m_22;
+    wxDouble e11 = mat.m_11*m_11 + mat.m_12*m_21;
+    wxDouble e12 = mat.m_11*m_12 + mat.m_12*m_22;
+    wxDouble e21 = mat.m_21*m_11 + mat.m_22*m_21;
+    m_22 = mat.m_21*m_12 + mat.m_22*m_22;
+    m_11 = e11;
+    m_12 = e12;
+    m_21 = e21;
+}
+
+// makes this its inverse matrix.
+// Invert
+// | m_11  m_12   0 |
+// | m_21  m_22   0 |
+// | m_tx  m_ty   1 |
+bool wxAffineMatrix2D::Invert()
+{
+    wxDouble det = m_11*m_22 - m_12*m_21;
+    
+    if(!det)
+        return false;
+
+    wxDouble ex = (m_21*m_ty - m_22*m_tx) / det;
+    m_ty = (-m_11*m_ty + m_12*m_tx) / det;
+    m_tx = ex;
+    wxDouble e11 = m_22 / det;
+    m_12 = -m_12 / det;
+    m_21 = -m_21 / det;
+    m_22 = m_11 / det;
+    m_11 = e11;
+
+    return true;
+}
+
+// returns true if the elements of the transformation matrix are equal
+bool wxAffineMatrix2D::IsEqual( const wxAffineMatrix2DBase& t ) const
+{
+    wxMatrix2D mat;
+    wxPoint2DDouble tr;
+    t.Get(&mat, &tr);
+
+    return ( m_11 == mat.m_11 && m_12 == mat.m_12 &&
+             m_21 == mat.m_21 && m_22 == mat.m_22 &&
+             m_tx == tr.m_x && m_ty == tr.m_y );
+}
+
+//
+// transformations
+//
+
+// add the translation to this matrix
+void wxAffineMatrix2D::Translate( wxDouble dx, wxDouble dy )
+{
+    m_tx += dx;
+    m_ty += dy;
+}
+
+// add the scale to this matrix
+// | xScale   0      0 |   | m_11  m_12   0 |
+// |   0    yScale   0 | x | m_21  m_22   0 |
+// |   0      0      1 |   | m_tx  m_ty   1 |
+void wxAffineMatrix2D::Scale( wxDouble xScale, wxDouble yScale )
+{
+    m_11 *= xScale;
+    m_12 *= xScale;
+    m_21 *= yScale;
+    m_22 *= yScale;
+}
+
+// add the rotation to this matrix (counter clockwise, radians)
+// | cos   -sin   0 |   | m_11  m_12   0 |
+// | sin    cos   0 | x | m_21  m_22   0 |
+// |  0      0    1 |   | m_tx  m_ty   1 |
+void wxAffineMatrix2D::Rotate( wxDouble ccRadians )
+{
+    wxDouble c = cos(ccRadians);
+    wxDouble s = sin(ccRadians);
+
+    wxDouble e11 = c*m_11 - s*m_21;
+    wxDouble e12 = c*m_12 - s*m_22;
+    m_21 = s*m_11 + c*m_21;
+    m_22 = s*m_12 + c*m_22;
+    m_11 = e11;
+    m_12 = e12;
+}
+
+//
+// apply the transforms
+//
+
+// applies that matrix to the point
+//                           | m_11  m_12   0 |
+// | src.m_x  src._my  1 | x | m_21  m_22   0 |
+//                           | m_tx  m_ty   1 |
+wxPoint2DDouble wxAffineMatrix2D::DoTransformPoint( const wxPoint2DDouble &src ) const
+{
+    wxPoint2DDouble trPt( IsIdentity() ? src.m_x : src.m_x * m_11 + src.m_y * m_21 + m_tx,
+                          IsIdentity() ? src.m_y : src.m_y * m_12 + src.m_y * m_22 + m_ty );
+
+    return trPt;
+}
+
+// applies the matrix except for translations
+//                           | m_11  m_12   0 |
+// | src.m_x  src._my  0 | x | m_21  m_22   0 |
+//                           | m_tx  m_ty   1 |
+wxPoint2DDouble wxAffineMatrix2D::DoTransformDistance( const wxPoint2DDouble &src ) const
+{
+    wxPoint2DDouble trDist( (IsIdentity() ? src.m_x : src.m_x * m_11 + src.m_y * m_21),
+                            (IsIdentity() ? src.m_y : src.m_y * m_12 + src.m_y * m_22) );
+
+    return trDist;
+}
+
+bool wxAffineMatrix2D::IsIdentity() const
+{
+    return ( m_11 == 1 && m_12 == 0 &&
+             m_21 == 0 && m_22 == 1 &&
+             m_tx == 0 && m_ty == 0 );
+}

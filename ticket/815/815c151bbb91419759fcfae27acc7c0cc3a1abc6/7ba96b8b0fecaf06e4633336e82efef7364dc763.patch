--- gridctrl.cpp.ori	2013-06-10 14:53:57.246793275 +0200
+++ gridctrl.cpp	2013-06-12 21:09:47.317780963 +0200
@@ -305,44 +305,103 @@
     wxCoord max_x = rect.GetWidth();
 
     dc.SetFont(attr.GetFont());
-    wxStringTokenizer tk(data , wxT(" \n\t\r"));
+    
+    bool tooWide = false;
+    // Prevent the right most character from being hidden
+    wxCoord right_margin = 0;
+    dc.GetTextExtent(wxT("Z"), &right_margin, &y);
+    max_x = (max_x > right_margin) ? (max_x - right_margin) : max_x;
+    
+    wxStringTokenizer tkzToLine(data , wxT("\n\r"));
     wxString thisline = wxEmptyString;
-
-    while ( tk.HasMoreTokens() )
+    
+    // For each line
+    while ( tkzToLine.HasMoreTokens() )
     {
-        wxString tok = tk.GetNextToken();
-        //FIXME: this causes us to print an extra unnecessary
-        //       space at the end of the line. But it
-        //       is invisible , simplifies the size calculation
-        //       and ensures tokens are separated in the display
-        tok += wxT(" ");
-
-        dc.GetTextExtent(tok, &x, &y);
-        if ( curr_x + x > max_x)
-        {
-            if ( curr_x == 0 )
-            {
-                // this means that a single token is wider than the maximal
-                // width -- still use it as is as we need to show at least the
-                // part of it which fits
-                lines.Add(tok);
-            }
-            else
-            {
-                lines.Add(thisline);
-                thisline = tok;
-                curr_x = x;
-            }
-        }
-        else
-        {
-            thisline+= tok;
-            curr_x += x;
-        }
+	wxString tokLine = tkzToLine.GetNextToken();
+	dc.GetTextExtent(tokLine, &x, &y);
+	tooWide = ( curr_x + x > max_x);
+	if (!tooWide) {
+	  // Line fits, it is stored
+	  lines.Add(tokLine);
+	  curr_x = 0;
+	  thisline = wxEmptyString;
+	} else {
+	  // Line does not fit : for each word
+	  wxStringTokenizer tkzToWord(tokLine , wxT(" \t"), wxTOKEN_RET_DELIMS);
+	  while (tkzToWord.HasMoreTokens()) {
+	    wxString tokWord = tkzToWord.GetNextToken();
+	    dc.GetTextExtent(tokWord, &x, &y);
+	    tooWide = ( curr_x + x > max_x);
+	    if (!tooWide) {
+	      // Word fits : build the line
+	      thisline += tokWord;
+	      curr_x += x;
+	      if (!tkzToWord.HasMoreTokens()) {
+		// Last word reached : store the line
+		lines.Add(thisline);
+		thisline = wxEmptyString;
+		curr_x = 0;
+	      }
+	    } else {
+	      // Word does not fit
+	      // Check whether the word is itself wider that available width
+	      tooWide = ( x > max_x);
+	      if (!tooWide) {
+		// Word can fit in available width : store line and start a new line
+		lines.Add(thisline);
+		thisline = tokWord;
+		curr_x = x;
+		if (!tkzToWord.HasMoreTokens()) {
+		  // Last word reached : store the line
+		  lines.Add(thisline);
+		  thisline = wxEmptyString;
+		  curr_x = 0;
+		}
+	      } else {
+		// Word cannot fit in available width : store built line
+		if (thisline != wxEmptyString) {
+		  lines.Add(thisline);
+		  thisline = wxEmptyString;
+		  curr_x = 0;
+		}
+		// and proceed character by character
+		int nb = tokWord.Length();
+		wxString partialWord = wxEmptyString;
+		int from = 0, count = 0;
+		for (int i = 0; i < nb; i++) {
+		  count++;
+		  partialWord = tokWord.Mid(from, count);
+		  dc.GetTextExtent(partialWord, &x, &y);
+		  tooWide = ( curr_x + x > max_x);
+		  if (tooWide) {
+		    // Built line fills available space : store the line
+		    lines.Add(partialWord);
+		    // and continue with the rest of the word
+		    from = i + 1;
+		    count = 0;
+		    curr_x = 0;
+		  } else {
+		    // until the last character
+		    if (i == (nb - 1)) {
+		      thisline = partialWord;
+		      curr_x = x;
+		      if (!tkzToWord.HasMoreTokens()) {
+			lines.Add(thisline);
+			curr_x = 0;
+			thisline = wxEmptyString;
+		      }
+		    }
+		  }
+		}
+	      }
+	    }
+	  }
+	}
     }
     //Add last line
-    lines.Add( wxString(thisline) );
-
+    if (thisline != wxEmptyString) lines.Add( wxString(thisline) );
+	
     return lines;
 }
 

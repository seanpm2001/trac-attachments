diff -bu1 -r wxWidgets/demos/forty/canvas.cpp wxW/demos/forty/canvas.cpp
--- wxWidgets/demos/forty/canvas.cpp	2002-12-22 20:57:11.000000000 +0100
+++ wxW/demos/forty/canvas.cpp	2004-03-10 20:12:30.000000000 +0100
@@ -40,8 +40,8 @@
 
-FortyCanvas::FortyCanvas(wxWindow* parent, int x, int y, int w, int h) :
-	wxScrolledWindow(parent, -1, wxPoint(x, y), wxSize(w, h)),
-	m_helpingHand(TRUE),
-	m_rightBtnUndo(TRUE),
+FortyCanvas::FortyCanvas(wxWindow* parent, const wxPoint& pos, const wxSize& size) :
+	wxScrolledWindow(parent, wxID_ANY, pos, size),
+	m_helpingHand(true),
+	m_rightBtnUndo(true),
 	m_playerDialog(0),
-	m_leftBtnDown(FALSE)
+	m_leftBtnDown(false)
 {
@@ -118,3 +118,3 @@
 			// user cancelled the dialog - exit the app
-			((wxFrame*)GetParent())->Close(TRUE);
+			((wxFrame*)GetParent())->Close(true);
 		}
@@ -150,3 +150,3 @@
 			// user cancelled the dialog - exit the app
-			((wxFrame*)GetParent())->Close(TRUE);
+			((wxFrame*)GetParent())->Close(true);
 		}
@@ -164,5 +164,5 @@
 	{
-        return FALSE;
+        return false;
 	}
-	return TRUE;
+	return true;
 }
@@ -182,3 +182,3 @@
 		{
-			m_leftBtnDown = FALSE;
+			m_leftBtnDown = false;
 			ReleaseMouse();
@@ -192,3 +192,3 @@
 		{
-			m_leftBtnDown = TRUE;
+			m_leftBtnDown = true;
 			CaptureMouse();
@@ -201,3 +201,3 @@
 		{
-			m_leftBtnDown = FALSE;
+			m_leftBtnDown = false;
 			ReleaseMouse();
@@ -208,3 +208,3 @@
 	{
-		// only allow right button undo if m_rightBtnUndo is TRUE
+		// only allow right button undo if m_rightBtnUndo is true
 		if (m_rightBtnUndo)
diff -bu1 -r wxWidgets/demos/forty/canvas.h wxW/demos/forty/canvas.h
--- wxWidgets/demos/forty/canvas.h	2002-03-21 14:10:16.000000000 +0100
+++ wxW/demos/forty/canvas.h	2004-03-10 19:28:01.000000000 +0100
@@ -23,3 +23,3 @@
 public:
-	FortyCanvas(wxWindow* parent, int x, int y, int w, int h);
+	FortyCanvas(wxWindow* parent, const wxPoint& pos, const wxSize& size);
 	virtual ~FortyCanvas();
diff -bu1 -r wxWidgets/demos/forty/card.cpp wxW/demos/forty/card.cpp
--- wxWidgets/demos/forty/card.cpp	2003-09-18 16:33:25.000000000 +0200
+++ wxW/demos/forty/card.cpp	2004-03-10 13:08:53.000000000 +0100
@@ -113,3 +113,3 @@
 		m_pipValue = 1 + (value - 1) % 13;
-		m_status = TRUE;
+		m_status = true;
     }
@@ -117,3 +117,3 @@
     {
-        m_status = FALSE;
+        m_status = false;
     }
diff -bu1 -r wxWidgets/demos/forty/forty.bkl wxW/demos/forty/forty.bkl
--- wxWidgets/demos/forty/forty.bkl	2003-08-03 21:47:24.000000000 +0200
+++ wxW/demos/forty/forty.bkl	2004-03-11 14:37:08.000000000 +0100
@@ -17,2 +17,3 @@
         <wx-lib>html</wx-lib>
+        <wx-lib>adv</wx-lib>
         <wx-lib>core</wx-lib>
diff -bu1 -r wxWidgets/demos/forty/forty.cpp wxW/demos/forty/forty.cpp
--- wxWidgets/demos/forty/forty.cpp	2002-12-22 20:57:11.000000000 +0100
+++ wxW/demos/forty/forty.cpp	2004-03-11 13:27:24.000000000 +0100
@@ -75,3 +75,4 @@
 {
-        bool largecards = FALSE;
+  bool largecards = false;
+
         wxSize size(668,510);
@@ -80,3 +81,3 @@
         {
-            largecards = TRUE;
+    largecards = true;
             size = wxSize(1000,750);
@@ -87,3 +88,5 @@
 			_T("Forty Thieves"),
-                        -1, -1, size.x, size.y,largecards
+    wxDefaultPosition,
+    size,
+    largecards
 			);
@@ -91,3 +94,3 @@
  	// Show the frame
-	frame->Show(TRUE);
+	frame->Show(true);
 
@@ -95,3 +98,3 @@
 
-	return TRUE;
+	return true;
 }
@@ -129,4 +132,4 @@
 // My frame constructor
-FortyFrame::FortyFrame(wxFrame* frame, const wxString& title, int x, int y, int w, int h,bool largecards):
-	wxFrame(frame, -1, title, wxPoint(x, y), wxSize(w, h))
+FortyFrame::FortyFrame(wxFrame* frame, const wxString& title, const wxPoint& pos, const wxSize& size, bool largecards):
+	wxFrame(frame, wxID_ANY, title, pos, size)
 {
@@ -159,3 +162,3 @@
 			_T("Enables/disables right mouse button undo and redo"),
-			TRUE
+			true
 			);
@@ -164,3 +167,3 @@
 			_T("Enables/disables hand cursor when a card can be moved"),
-			TRUE
+			true
 			);
@@ -169,7 +172,7 @@
                         _T("Enables/disables large cards for high resolution displays"),
-                        TRUE
+                        true
                         );
-	optionsMenu->Check(HELPING_HAND, TRUE);
-	optionsMenu->Check(RIGHT_BUTTON_UNDO, TRUE);
-        optionsMenu->Check(LARGE_CARDS, largecards ? TRUE : FALSE);
+	optionsMenu->Check(HELPING_HAND, true);
+	optionsMenu->Check(RIGHT_BUTTON_UNDO, true);
+        optionsMenu->Check(LARGE_CARDS, largecards ? true : false);
 
@@ -189,9 +192,8 @@
 
-	m_canvas = new FortyCanvas(this, 0, 0, 400, 400);
-	wxLayoutConstraints* constr = new wxLayoutConstraints;
-	constr->left.SameAs(this, wxLeft);
-	constr->top.SameAs(this, wxTop);
-	constr->right.SameAs(this, wxRight);
-	constr->height.SameAs(this, wxHeight);
-	m_canvas->SetConstraints(constr);
+	m_canvas = new FortyCanvas(this, wxDefaultPosition, size);
+
+  wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
+  topsizer->Add( m_canvas, 1, wxEXPAND | wxALL, 0);
+  SetSizer( topsizer );
+  topsizer->SetSizeHints( this );
 
@@ -227,3 +229,3 @@
 #endif
-	Close(TRUE);
+	Close(true);
 }
@@ -236,3 +238,3 @@
     {
-        FortyAboutDialog dialog(this, -1, wxT("About Forty Thieves"));
+        FortyAboutDialog dialog(this, wxID_ANY, wxT("About Forty Thieves"));
         if (dialog.ShowModal() == wxID_OK)
@@ -381,3 +383,2 @@
 
-    parent->SetAutoLayout( TRUE );
     parent->SetSizer( item0 );
@@ -388,3 +389,3 @@
 
-    return TRUE;
+    return true;
 }
diff -bu1 -r wxWidgets/demos/forty/forty.h wxW/demos/forty/forty.h
--- wxWidgets/demos/forty/forty.h	2002-12-22 20:57:11.000000000 +0100
+++ wxW/demos/forty/forty.h	2004-03-10 13:14:08.000000000 +0100
@@ -36,3 +36,3 @@
 public:
-        FortyFrame(wxFrame* frame, const wxString& title, int x, int y, int w, int h,bool largecards);
+  FortyFrame(wxFrame* frame, const wxString& title, const wxPoint& pos, const wxSize& size, bool largecards);
 	virtual ~FortyFrame();
diff -bu1 -r wxWidgets/demos/forty/game.cpp wxW/demos/forty/game.cpp
--- wxWidgets/demos/forty/game.cpp	2003-09-18 16:33:25.000000000 +0200
+++ wxW/demos/forty/game.cpp	2004-03-10 13:09:13.000000000 +0100
@@ -37,3 +37,3 @@
 Game::Game(int wins, int games, int score) :
-	m_inPlay(FALSE),
+	m_inPlay(false),
 	m_moveIndex(0),
@@ -183,3 +183,3 @@
 	{
-		m_inPlay = TRUE;
+		m_inPlay = true;
 		m_numGames++;
@@ -200,3 +200,3 @@
 		// This game is over
-		m_inPlay = FALSE;
+		m_inPlay = false;
 
@@ -214,3 +214,3 @@
 			// user cancelled the dialog - exit the app
-			((wxFrame*)canvas->GetParent())->Close(TRUE);
+			((wxFrame*)canvas->GetParent())->Close(true);
 		}
@@ -317,3 +317,3 @@
     m_currentScore = 0;
-    m_inPlay = FALSE;
+    m_inPlay = false;
 }
@@ -526,7 +526,7 @@
 {
-    if (m_pack->GetTopCard()) return FALSE;
-    if (m_discard->GetTopCard()) return FALSE;
+    if (m_pack->GetTopCard()) return false;
+    if (m_discard->GetTopCard()) return false;
     for(int i = 0; i < 10; i++)
     {
-    	if (m_bases[i]->GetTopCard()) return FALSE;
+    	if (m_bases[i]->GetTopCard()) return false;
     }
@@ -535,3 +535,3 @@
     m_currentScore = 0;
-    return TRUE;
+    return true;
 }
@@ -540,3 +540,3 @@
 // See whether the card under the cursor can be moved somewhere else
-// Returns TRUE if it can be moved, FALSE otherwise
+// Returns 'true' if it can be moved, 'false' otherwise
 bool Game::CanYouGo(int x, int y)
@@ -555,3 +555,3 @@
 		{
-                    return TRUE;
+                    return true;
 		}
@@ -564,3 +564,3 @@
 		{
-		    return TRUE;
+		    return true;
 		}
@@ -569,3 +569,3 @@
     }
-    return FALSE;
+    return false;
 }
@@ -644,3 +644,3 @@
 {
-    bool retval = FALSE;
+    bool retval = false;
     if (pile->Overlap(x, y))
@@ -649,3 +649,3 @@
 	{
-	    retval = TRUE;
+	    retval = true;
         }
@@ -845,3 +845,3 @@
 {
-    bool retval = FALSE;
+    bool retval = false;
 
@@ -852,3 +852,3 @@
 	    {
-            retval = TRUE;
+            retval = true;
         }
@@ -858,3 +858,3 @@
 		// pile is empty - ACCEPT
-        retval = TRUE;
+        retval = true;
     }
@@ -879,3 +879,3 @@
 {
-    bool retval = FALSE;
+    bool retval = false;
 
@@ -886,3 +886,3 @@
 	    {
-            retval = TRUE;
+            retval = true;
         }
@@ -892,3 +892,3 @@
 	    // It's an ace and the pile is empty - ACCEPT
-        retval = TRUE;
+        retval = true;
     }
diff -bu1 -r wxWidgets/demos/forty/pile.cpp wxW/demos/forty/pile.cpp
--- wxWidgets/demos/forty/pile.cpp	2003-09-18 16:33:25.000000000 +0200
+++ wxW/demos/forty/pile.cpp	2004-03-10 13:09:17.000000000 +0100
@@ -226,5 +226,5 @@
     {
-    	if (card == m_cards[i]) return TRUE;
+    	if (card == m_cards[i]) return true;
     }
-    return FALSE;
+    return false;
 }
@@ -296,5 +296,5 @@
     {
-	    return TRUE;
+	    return true;
     }
-    return FALSE;
+    return false;
 }
diff -bu1 -r wxWidgets/demos/forty/pile.h wxW/demos/forty/pile.h
--- wxWidgets/demos/forty/pile.h	2002-03-06 18:50:52.000000000 +0100
+++ wxW/demos/forty/pile.h	2004-03-10 13:09:49.000000000 +0100
@@ -68,3 +68,3 @@
 	// Functions to add a card to the top of a pile
-	virtual bool AcceptCard(Card*) { return FALSE; }
+	virtual bool AcceptCard(Card*) { return false; }
 	virtual void AddCard(Card* card);	// Add card to top of pile
diff -bu1 -r wxWidgets/demos/forty/playerdg.cpp wxW/demos/forty/playerdg.cpp
--- wxWidgets/demos/forty/playerdg.cpp	2003-09-18 16:33:25.000000000 +0200
+++ wxW/demos/forty/playerdg.cpp	2004-03-11 13:27:55.000000000 +0100
@@ -46,4 +46,4 @@
 							) :
-	wxDialog(parent, -1, _T("Player Selection"),
-			wxDefaultPosition, wxSize(320, 200),
+	wxDialog(parent, wxID_ANY, _T("Player Selection"),
+			wxDefaultPosition, wxDefaultSize,
 			wxDIALOG_MODAL | wxDEFAULT_DIALOG_STYLE),
@@ -51,6 +51,3 @@
 {
-	// enable constraints
-	SetAutoLayout (TRUE);
-
-	wxStaticText* msg = new wxStaticText(this, -1, _T("Please select a name or type a new one:"));
+	wxStaticText* msg = new wxStaticText(this, wxID_ANY, _T("Please select a name or type a new one:"));
 
@@ -70,3 +67,3 @@
 
-	m_textField = new wxTextCtrl(this, -1, _T(""), wxDefaultPosition, wxDefaultSize, 0);
+	m_textField = new wxTextCtrl(this, wxID_ANY, _T(""), wxDefaultPosition, wxDefaultSize, 0);
 
@@ -75,54 +72,15 @@
 
-	wxLayoutConstraints* layout;
+  wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );
+  button_sizer->Add( m_OK, 0, wxALL, 10 );
+  button_sizer->Add( m_cancel, 0, wxALL, 10 );
+
+  wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
+  topsizer->Add( msg, 0, wxALL , 10 );
+  topsizer->Add( list, 1, wxEXPAND | wxLEFT | wxRIGHT, 10 );
+  topsizer->Add( m_textField, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 10 );
+  topsizer->Add( button_sizer, 0, wxALIGN_LEFT );
 
-	// Constrain the msg at the top of the window
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->top.SameAs		(this,	wxTop,	10);
-	layout->height.AsIs();
-	layout->width.AsIs();
-	msg->SetConstraints(layout);
-
-	// Constrain the OK button
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->bottom.SameAs	(this,	 wxBottom,	10);
-	layout->height.AsIs();
-	layout->width.AsIs();
-	m_OK->SetConstraints(layout);
-
-	// Constrain the OK button
-	layout = new wxLayoutConstraints;
-	layout->left.RightOf	(m_OK,	10);
-	layout->bottom.SameAs	(this,	wxBottom,	10);
-	layout->height.AsIs();
-	layout->width.AsIs();
-	m_cancel->SetConstraints(layout);
-
-	// Constrain the Name text entry field
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->right.SameAs	(this,	wxRight,	10);
-	layout->bottom.SameAs	(m_OK,	wxTop,		10);
-	layout->height.AsIs();
-	m_textField->SetConstraints(layout);
-
-	// Constrain the list of players
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->right.SameAs	(this,	wxRight,	10);
-	layout->top.Below		(msg,	10);
-	layout->bottom.SameAs	(m_textField,	wxTop,	10);
-	list->SetConstraints(layout);
+  SetSizer( topsizer );
 
-	wxString prevPlayer = m_scoreFile->GetPreviousPlayer();
-	if ((prevPlayer.Length() > 0) && (list->FindString(prevPlayer) != -1))
-	{
-		list->SetStringSelection(prevPlayer);
-		m_textField->SetValue(prevPlayer);
-	}
-
-    m_textField->SetFocus();
-
-	Layout();
+  topsizer->SetSizeHints( this );
     
@@ -144,3 +102,3 @@
 	m_player = "";
-	Show(TRUE);
+	Show(true);
 */
diff -bu1 -r wxWidgets/demos/forty/scoredg.cpp wxW/demos/forty/scoredg.cpp
--- wxWidgets/demos/forty/scoredg.cpp	2003-09-18 16:33:25.000000000 +0200
+++ wxW/demos/forty/scoredg.cpp	2004-03-11 13:24:52.000000000 +0100
@@ -29,2 +29,3 @@
 
+#include "wx/grid.h"
 #include "scorefil.h"
@@ -32,97 +33,2 @@
 
-class ScoreCanvas : public wxScrolledWindow
-{
-public:
-	ScoreCanvas(wxWindow* parent, ScoreFile* scoreFile);
-	virtual ~ScoreCanvas();
-
-	void OnDraw(wxDC& dc);
-
-private:
-	wxFont*		m_font;
-	wxString	m_text;
-};
-
-
-ScoreCanvas::ScoreCanvas(wxWindow* parent, ScoreFile* scoreFile) :
-	wxScrolledWindow(parent)
-{
-#ifdef __WXGTK__
-	m_font = wxTheFontList->FindOrCreateFont(12, wxROMAN, wxNORMAL, wxNORMAL);
-#else
-	m_font = wxTheFontList->FindOrCreateFont(10, wxSWISS, wxNORMAL, wxNORMAL);
-#endif
-
-        wxArrayString players;
-	scoreFile->GetPlayerList( players);
-
-	wxString os;
-
-	os << wxT("Player\tWins\tGames\tScore\n");
-	for (unsigned int i = 0; i < players.Count(); i++)
-	{
-		int wins, games, score;
-		scoreFile->ReadPlayersScore(players[i], wins, games, score);
-		int average = 0;
-		if (games > 0)
-		{
-			average = (2 * score + games) / (2 * games);
-		}
-
-		os << players[i] << wxT('\t') 
-		   << wins  << wxT('\t')
-		   << games << wxT('\t')
-		   << average << wxT('\n');
-	}
-	os << wxT('\0');
-	m_text = os;
-}
-
-ScoreCanvas::~ScoreCanvas()
-{
-}
-
-void ScoreCanvas::OnDraw(wxDC& dc)
-{
-	dc.SetFont(* m_font);
-
-	const wxChar* str = m_text;
-	unsigned int tab = 0;
-	unsigned int tabstops[] = { 5, 100, 150, 200 };
-
-	// get the line spacing for the current font
-	int lineSpacing;
-	{
-		long w, h;
-		dc.GetTextExtent(wxT("Testing"), &w, &h);
-		lineSpacing = (int)h;
-	}
-
-	int y = 0;
-	while (*str)
-	{
-		wxChar text[256];
-		wxChar* dest = text;
-		
-		while (*str && *str >= ' ') *dest++ = *str++;
-		*dest = '\0';
-
-		dc.DrawText(text, tabstops[tab], y);
-
-		if (*str == '\t')
-		{
-			if (tab < sizeof(tabstops) / sizeof(tabstops[0]) - 1)
-			{
-				tab++;
-			}
-		}
-		else if (*str == '\n')
-		{
-			tab = 0;
-			y += lineSpacing;
-		}
-		if (*str) str++;
-	}
-}
-
 BEGIN_EVENT_TABLE(ScoreDialog, wxDialog)
@@ -135,4 +41,4 @@
 							) :
-	wxDialog(parent, -1, _("Scores"),
-			wxDefaultPosition, wxSize(310, 200),
+	wxDialog(parent, wxID_ANY, _("Scores"),
+			wxDefaultPosition, wxDefaultSize,
 			wxDIALOG_MODAL | wxDEFAULT_DIALOG_STYLE),
@@ -140,27 +46,48 @@
 {
-	// enable constraints
-	SetAutoLayout (TRUE);
+  // create grid with players
+  wxArrayString players;
+	file->GetPlayerList(players);
+	wxGrid* list = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
+  list->CreateGrid(players.Count(), 4);
+	for (unsigned int i = 0; i < players.Count(); i++)
+	{
+		int wins, games, score;
+    wxString string_value;
 
-	ScoreCanvas* list = new ScoreCanvas(this, m_scoreFile);
-	m_OK = new wxButton(this, wxID_OK, _("OK"));
+		file->ReadPlayersScore(players[i], wins, games, score);
+		int average = 0;
+		if (games > 0)
+		{
+			average = (2 * score + games) / (2 * games);
+		}
+    list->SetCellValue(i,0,players[i]);
+    string_value.Printf( _T("%u"), wins );
+    list->SetCellValue(i,1,string_value);
+    string_value.Printf( _T("%u"), games );
+    list->SetCellValue(i,2,string_value);
+    string_value.Printf( _T("%u"), average );
+    list->SetCellValue(i,3,string_value);
+	}
+  list->SetColLabelValue(0, _T("Players"));
+  list->SetColLabelValue(1, _T("Wins"));
+  list->SetColLabelValue(2, _T("Games"));
+  list->SetColLabelValue(3, _T("Score"));
+  list->SetEditable(false);
+  list->AutoSizeColumns();
+  list->AutoSizeRows();
+  list->SetRowLabelSize(0);
+  list->EnableDragRowSize(false);
+  list->EnableDragColSize(false);
+  list->EnableDragGridSize(false);
+
+  // locate and resize with sizers
+  wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
+  topsizer->Add( list, 0, wxALL, 10 );
+  topsizer->Add( new wxButton(this, wxID_OK, _("OK")), 0, wxALL , 10 );
 
-	wxLayoutConstraints* layout;
+  SetSizer( topsizer );
 
-	// Constrain the OK button
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->bottom.SameAs	(this,	 wxBottom,	10);
-	layout->height.AsIs();
-	layout->width.AsIs();
-	m_OK->SetConstraints(layout);
-
-	// Constrain the list of players
-	layout = new wxLayoutConstraints;
-	layout->left.SameAs		(this,	wxLeft,		10);
-	layout->right.SameAs	(this,	wxRight,	10);
-	layout->top.SameAs		(this,	wxTop,		10);
-	layout->bottom.SameAs	(m_OK,	wxTop,		10);
-	list->SetConstraints(layout);
+  topsizer->SetSizeHints( this );
 
-	Layout();
+  CentreOnParent();
 }
@@ -173,3 +100,3 @@
 {
-	Show(TRUE);
+	Show(true);
 }

 	  	 

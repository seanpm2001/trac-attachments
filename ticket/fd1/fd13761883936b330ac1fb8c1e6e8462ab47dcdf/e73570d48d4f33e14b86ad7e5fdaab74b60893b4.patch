Index: include/wx/msw/ole/dropsrc.h
===================================================================
--- include/wx/msw/ole/dropsrc.h	(revision 72382)
+++ include/wx/msw/ole/dropsrc.h	(working copy)
@@ -65,15 +65,41 @@
     // too slow). Just return false if you want default feedback.
     virtual bool GiveFeedback(wxDragResult effect);
 
+    // Create a drag image based on the given image.
+    void CreateDragImageFromImage(const wxImage&, const wxPoint& hotSpot);
+
+    // Create a drag image based on the associated window.
+    void CreateDragImageFromWindow();
+
 protected:
     void Init();
 
 private:
     wxIDropSource *m_pIDropSource;  // the pointer to COM interface
+    wxWindow      *m_win;  // the pointer to the associated window
 
     wxDECLARE_NO_COPY_CLASS(wxDropSource);
 };
 
+
+// ----------------------------------------------------------------------------
+// wxDropSourceHelper is used to create the image that will be displayed 
+// during the drag-drop operation.
+// ----------------------------------------------------------------------------
+class WXDLLIMPEXP_CORE wxDropSourceHelper
+{   
+public:
+    // ctor
+    wxDropSourceHelper();
+
+    // Create a drag image based on the given image.
+    void CreateDragImage(wxDataObject*, const wxImage&, const wxPoint& hotSpot);
+
+    // Create a drag image based on the associated window.
+    void CreateDragImage(wxDataObject*, wxWindow*);
+};
+
+
 #endif  //wxUSE_DRAG_AND_DROP
 
 #endif  //_WX_OLEDROPSRC_H
Index: include/wx/msw/ole/droptgt.h
===================================================================
--- include/wx/msw/ole/droptgt.h	(revision 72382)
+++ include/wx/msw/ole/droptgt.h	(working copy)
@@ -14,6 +14,8 @@
 
 #if wxUSE_DRAG_AND_DROP
 
+#include <shlobj.h>
+
 // ----------------------------------------------------------------------------
 // forward declarations
 // ----------------------------------------------------------------------------
@@ -60,12 +62,21 @@
     // GetData() when it's called from inside OnData()
     void MSWSetDataSource(IDataObject *pIDataSource);
 
+    // drag image support
+    virtual void EndDragImageSupport();
+    virtual void InitDragImageSupport();
+    virtual void UpdateDragImageOnData(wxCoord x, wxCoord y, wxDragResult);
+    virtual void UpdateDragImageOnDragOver(wxCoord x, wxCoord y, wxDragResult);
+    virtual void UpdateDragImageOnEnter(wxCoord x, wxCoord y, wxDragResult);
+    virtual void UpdateDragImageOnLeave();
+
 private:
     // helper used by IsAcceptedData() and GetData()
     wxDataFormat MSWGetSupportedFormat(IDataObject *pIDataSource) const;
 
-    wxIDropTarget *m_pIDropTarget; // the pointer to our COM interface
-    IDataObject   *m_pIDataSource; // the pointer to the source data object
+    wxIDropTarget     *m_pIDropTarget; // the pointer to our COM interface
+    IDataObject       *m_pIDataSource; // the pointer to the source data object
+    IDropTargetHelper *m_dropSourceHelper; // the pointer to the drop source helper
 
     wxDECLARE_NO_COPY_CLASS(wxDropTarget);
 };
Index: src/msw/ole/dataobj.cpp
===================================================================
--- src/msw/ole/dataobj.cpp	(revision 72382)
+++ src/msw/ole/dataobj.cpp	(working copy)
@@ -142,8 +142,115 @@
     bool m_mustDelete;
 
     wxDECLARE_NO_COPY_CLASS(wxIDataObject);
+
+    // The following code is need to be able to store auxilary data the operating system 
+    // is using for it own purposes, eg. drag images.
+    
+    // struct and typedef to store auxilary data
+    struct DataStorage 
+    {
+        LPFORMATETC lpFmt;
+        LPSTGMEDIUM lpMed;
+    };
+    typedef std::vector<DataStorage>    DATASTORAGES;
+
+    // Get auxilary data specified by the given format
+    bool                    GetAuxData(const wxDataFormat&, STGMEDIUM*) const;
+
+    // Determines if the data object contains auxilary data specified by the given format.
+    bool                    HasAuxData(const wxDataFormat&) const;
+
+    // Save auxilary data
+    HRESULT                 SaveAuxData(FORMATETC*, STGMEDIUM*, BOOL fRelease);
+
+    // Container for auxilary data
+    DATASTORAGES            m_auxDataStorages;
+
 };
 
+// Get auxilary data specified by the given format
+bool
+wxIDataObject::GetAuxData(const wxDataFormat& format, 
+                                STGMEDIUM* medium) const
+{
+    //
+    for (DATASTORAGES::const_iterator it = m_auxDataStorages.begin(); it != m_auxDataStorages.end(); ++it)
+    {
+        FORMATETC* formatEtc = it->lpFmt;
+        if (formatEtc->cfFormat == format)
+        {
+            CopyStgMedium(it->lpMed, medium);
+            return true;
+        }
+    }
+    return false;
+}
+
+// Determines if the data object contains auxilary data specified by the given format.
+bool
+wxIDataObject::HasAuxData(const wxDataFormat& format) const
+{
+    //
+    for (DATASTORAGES::const_iterator it = m_auxDataStorages.begin(); it != m_auxDataStorages.end(); ++it)
+    {
+        FORMATETC* formatEtc = it->lpFmt;
+        if (formatEtc->cfFormat == format)
+        {
+            return true;
+        }
+    }
+    return false;
+}
+
+// Save auxilary data
+HRESULT
+wxIDataObject::SaveAuxData(FORMATETC* pFE,
+                                    STGMEDIUM* pSM,
+                                    BOOL fRelease)
+{
+    // Valid args?
+    if (pFE == NULL || pSM == NULL) return E_INVALIDARG;
+
+    // Remove storage if already available
+    for(DATASTORAGES::iterator it = m_auxDataStorages.begin(); it != m_auxDataStorages.end(); ++it)
+    {
+        if (pFE->tymed & it->lpFmt->tymed &&
+            pFE->dwAspect == it->lpFmt->dwAspect &&
+            pFE->cfFormat == it->lpFmt->cfFormat)
+        {
+            m_auxDataStorages.erase(it);
+            break;
+        }
+    }
+
+    // Create new format/medium
+    FORMATETC* fetc=new FORMATETC;
+    STGMEDIUM* pStgMed = new STGMEDIUM;
+    if (fetc == NULL || pStgMed == NULL) return E_OUTOFMEMORY;
+
+    // Clear memory
+    ZeroMemory(fetc, sizeof(FORMATETC));
+    ZeroMemory(pStgMed, sizeof(STGMEDIUM));
+
+    // Copy format
+    *fetc = *pFE;
+
+    // Copy or take ownerschip of medium
+    if (fRelease)
+        *pStgMed = *pSM;
+    else
+        CopyStgMedium(pSM, pStgMed);
+
+    // Save storage
+    DataStorage storage;
+    storage.lpFmt = fetc;
+    storage.lpMed = pStgMed;
+    m_auxDataStorages.push_back(storage);
+
+    //
+    return S_OK;
+}
+
 // ============================================================================
 // implementation
 // ============================================================================
@@ -310,6 +417,13 @@
     wxDataFormat format = (wxDataFormat::NativeFormat)pformatetcIn->cfFormat;
     format = HtmlFormatFixup(format);
 
+    // is this auxilary data?
+    if (GetAuxData(format, pmedium))
+    {
+        return S_OK;
+    }
+
+    //
     switch ( format )
     {
         case wxDF_BITMAP:
@@ -445,6 +559,17 @@
             m_pDataObject->SetData(wxDF_ENHMETAFILE, 0, &pmedium->hEnhMetaFile);
             break;
 
+        case TYMED_ISTREAM:
+        {
+            // check if this format is supported
+            // if not, this is auxilary data and has to be saved. 
+            wxDataFormat format = pformatetc->cfFormat;
+            if ( !m_pDataObject->IsSupported(format, wxDataObject::Set) )
+            {
+                return SaveAuxData(pformatetc, pmedium, fRelease);
+            }
+        }
+
         case TYMED_MFPICT:
             // fall through - we pass METAFILEPICT through HGLOBAL
         case TYMED_HGLOBAL:
@@ -453,15 +578,11 @@
 
                 format = HtmlFormatFixup(format);
 
-                // this is quite weird, but for file drag and drop, explorer
-                // calls our SetData() with the formats we do *not* support!
-                //
-                // as we can't fix this bug in explorer (it's a bug because it
-                // should only use formats returned by EnumFormatEtc), do the
-                // check here
-                if ( !m_pDataObject->IsSupported(format, wxDataObject::Set) ) {
-                    // go away!
-                    return DV_E_FORMATETC;
+               // check if this format is supported
+               // if not, this is auxilary data and has to be saved. 
+               if ( !m_pDataObject->IsSupported(format, wxDataObject::Set) ) {
+                    //
+                    return SaveAuxData(pformatetc, pmedium, fRelease);
                 }
 
                 // copy data
@@ -595,6 +716,13 @@
         wxLogTrace(wxTRACE_OleCalls, wxT("wxIDataObject::QueryGetData: %s ok"),
                    wxGetFormatName(format));
     }
+    else if (HasAuxData(format))
+    {
+        wxLogTrace(wxTRACE_OleCalls, wxT("wxIDataObject::QueryGetData: %s ok"),
+                   wxGetFormatName(format));
+        // this is auxilary data. no further checks needed.
+        return S_OK;
+    }
     else {
         wxLogTrace(wxTRACE_OleCalls,
                    wxT("wxIDataObject::QueryGetData: %s unsupported"),
@@ -640,19 +768,23 @@
     wxDataObject::Direction dir = dwDir == DATADIR_GET ? wxDataObject::Get
                                                        : wxDataObject::Set;
 
-    ULONG nFormatCount = wx_truncate_cast(ULONG, m_pDataObject->GetFormatCount(dir));
-    wxDataFormat format;
-    wxDataFormat *formats;
-    formats = nFormatCount == 1 ? &format : new wxDataFormat[nFormatCount];
+    // format count is total of user specified and auxilary formats.
+    ULONG nFormatCount = wx_truncate_cast(ULONG, m_pDataObject->GetFormatCount(dir)) + m_auxDataStorages.size();
+    wxDataFormat *formats = new wxDataFormat[nFormatCount];
     m_pDataObject->GetAllFormats(formats, dir);
+    int start = nFormatCount - m_auxDataStorages.size();
+    for (size_t j=0;j<m_auxDataStorages.size();j++)
+    {
+        DataStorage& storage = m_auxDataStorages[j];
+        wxDataFormat& format = formats[start + j];
+        format = storage.lpFmt->cfFormat;
+    }
 
     wxIEnumFORMATETC *pEnum = new wxIEnumFORMATETC(formats, nFormatCount);
     pEnum->AddRef();
     *ppenumFormatEtc = pEnum;
 
-    if ( formats != &format ) {
-        delete [] formats;
-    }
+    delete [] formats;
 
     return S_OK;
 }
Index: src/msw/ole/dropsrc.cpp
===================================================================
--- src/msw/ole/dropsrc.cpp	(revision 72382)
+++ src/msw/ole/dropsrc.cpp	(working copy)
@@ -152,21 +152,23 @@
     m_pIDropSource->AddRef();
 }
 
-wxDropSource::wxDropSource(wxWindow* WXUNUSED(win),
+wxDropSource::wxDropSource(wxWindow* win,
                            const wxCursor &cursorCopy,
                            const wxCursor &cursorMove,
                            const wxCursor &cursorStop)
-            : wxDropSourceBase(cursorCopy, cursorMove, cursorStop)
+            : wxDropSourceBase(cursorCopy, cursorMove, cursorStop),
+              m_win(win)
 {
     Init();
 }
 
 wxDropSource::wxDropSource(wxDataObject& data,
-                           wxWindow* WXUNUSED(win),
+                           wxWindow* win,
                            const wxCursor &cursorCopy,
                            const wxCursor &cursorMove,
                            const wxCursor &cursorStop)
-            : wxDropSourceBase(cursorCopy, cursorMove, cursorStop)
+            : wxDropSourceBase(cursorCopy, cursorMove, cursorStop),
+              m_win(win)
 {
     Init();
     SetData(data);
@@ -245,4 +247,82 @@
     }
 }
 
+
+void wxDropSource::CreateDragImageFromWindow()
+{
+    //
+    wxDropSourceHelper helper;
+    helper.CreateDragImage(GetDataObject(), m_win);
+}   
+
+
+void wxDropSource::CreateDragImageFromImage(const wxImage& img, 
+                                            const wxPoint& hotSpot)
+{
+    //
+    wxDropSourceHelper helper;
+    helper.CreateDragImage(GetDataObject(), img, hotSpot);
+}
+    
+
+// ----------------------------------------------------------------------------
+// wxDropSourceHelper implementation
+// ----------------------------------------------------------------------------
+
+// ctor
+wxDropSourceHelper::wxDropSourceHelper()
+{
+}
+
+void
+wxDropSourceHelper::CreateDragImage(wxDataObject* dataObj,
+                                    wxWindow* win)
+{
+    // valid window?
+    if (win == NULL) return;
+
+    //
+    IDragSourceHelper* helper = NULL;
+    if(SUCCEEDED(CoCreateInstance(CLSID_DragDropHelper, NULL, CLSCTX_INPROC_SERVER,
+                    IID_IDragSourceHelper,(void**)&helper))) 
+    {
+        //
+        POINT pt = {0,0};
+        helper->InitializeFromWindow(win->GetHWND(), &pt, dataObj->GetInterface());
+    }
+}
+
+void
+wxDropSourceHelper::CreateDragImage(wxDataObject* dataObj, 
+                                const wxImage& image,
+                                const wxPoint& hotSpot)
+{
+    // valid image?
+    if (!image.IsOk()) return;
+
+    //
+    IDragSourceHelper* helper = NULL;
+    if(SUCCEEDED(CoCreateInstance(CLSID_DragDropHelper, NULL, CLSCTX_INPROC_SERVER,
+                  IID_IDragSourceHelper,(void**)&helper))) 
+    {
+        //
+        wxBitmap bmp = image;
+        HBITMAP hBmp = bmp.GetHBITMAP();
+        COLORREF crColorKey = GetSysColor(COLOR_WINDOW); 
+
+        //
+        SHDRAGIMAGE di;
+        di.sizeDragImage.cx = bmp.GetWidth();
+        di.sizeDragImage.cy = bmp.GetHeight();
+        di.crColorKey = crColorKey;
+        di.hbmpDragImage = hBmp;
+        di.ptOffset.x = hotSpot.x;
+        di.ptOffset.y = hotSpot.y;
+
+        //
+        helper->InitializeFromBitmap(&di, dataObj->GetInterface());
+    }
+}
+
+
 #endif  // wxUSE_OLE && wxUSE_DRAG_AND_DROP
Index: src/msw/ole/droptgt.cpp
===================================================================
--- src/msw/ole/droptgt.cpp	(revision 72382)
+++ src/msw/ole/droptgt.cpp	(working copy)
@@ -63,6 +63,7 @@
     virtual ~wxIDropTarget();
 
     // accessors for wxDropTarget
+    HWND GetHWND() const { return m_hwnd; }
     void SetHwnd(HWND hwnd) { m_hwnd = hwnd; }
 
     // IDropTarget methods
@@ -192,13 +193,6 @@
     }
 #endif // 0
 
-    if ( !m_pTarget->MSWIsAcceptedData(pIDataSource) ) {
-        // we don't accept this kind of data
-        *pdwEffect = DROPEFFECT_NONE;
-
-        return S_OK;
-    }
-
     // for use in OnEnter and OnDrag calls
     m_pTarget->MSWSetDataSource(pIDataSource);
 
@@ -206,22 +200,36 @@
     m_pIDataObject = pIDataSource;
     m_pIDataObject->AddRef();
 
-    // we need client coordinates to pass to wxWin functions
-    if ( !ScreenToClient(m_hwnd, (POINT *)&pt) )
+    if ( !m_pTarget->MSWIsAcceptedData(pIDataSource) ) {
+        // we don't accept this kind of data
+        *pdwEffect = DROPEFFECT_NONE;
+    }
+    else
     {
-        wxLogLastError(wxT("ScreenToClient"));
+        // we need client coordinates to pass to wxWin functions
+        if ( !ScreenToClient(m_hwnd, (POINT *)&pt) )
+        {
+            wxLogLastError(wxT("ScreenToClient"));
+        }
+
+        // give some visual feedback
+        *pdwEffect = ConvertDragResultToEffect(
+            m_pTarget->OnEnter(pt.x, pt.y, ConvertDragEffectToResult(
+                GetDropEffect(grfKeyState, m_pTarget->GetDefaultAction(), *pdwEffect))
+                        )
+                     );
     }
 
-    // give some visual feedback
-    *pdwEffect = ConvertDragResultToEffect(
-        m_pTarget->OnEnter(pt.x, pt.y, ConvertDragEffectToResult(
-            GetDropEffect(grfKeyState, m_pTarget->GetDefaultAction(), *pdwEffect))
-                    )
-                 );
+    // handle drag image
+    m_pTarget->UpdateDragImageOnEnter(pt.x, pt.y, ConvertDragEffectToResult(*pdwEffect));
+    m_pTarget->UpdateDragImageOnDragOver(pt.x, pt.y, ConvertDragEffectToResult(*pdwEffect));
 
+    //
     return S_OK;
 }
 
+
+
 // Name    : wxIDropTarget::DragOver
 // Purpose : Indicates that the mouse was moved inside the window represented
 //           by this drop target.
@@ -262,6 +270,10 @@
         *pdwEffect = DROPEFFECT_NONE;
     }
 
+    // handle drag image
+    m_pTarget->UpdateDragImageOnDragOver(pt.x, pt.y, ConvertDragEffectToResult(*pdwEffect));
+
+    //
     return S_OK;
 }
 
@@ -279,6 +291,10 @@
   // release the held object
   RELEASE_AND_NULL(m_pIDataObject);
 
+  // handle drag image
+  m_pTarget->UpdateDragImageOnLeave();
+
+  //
   return S_OK;
 }
 
@@ -333,6 +349,10 @@
     // release the held object
     RELEASE_AND_NULL(m_pIDataObject);
 
+    // handle drag image
+    m_pTarget->UpdateDragImageOnData(pt.x, pt.y, ConvertDragEffectToResult(*pdwEffect));
+
+    //
     return S_OK;
 }
 
@@ -345,7 +365,8 @@
 // ----------------------------------------------------------------------------
 
 wxDropTarget::wxDropTarget(wxDataObject *dataObj)
-            : wxDropTargetBase(dataObj)
+            : wxDropTargetBase(dataObj),
+              m_dropSourceHelper(NULL)
 {
     // create an IDropTarget implementation which will notify us about d&d
     // operations.
@@ -396,6 +417,9 @@
     // we will need the window handle for coords transformation later
     m_pIDropTarget->SetHwnd((HWND)hwnd);
 
+    //
+    InitDragImageSupport();
+
     return true;
 #endif
 }
@@ -417,6 +441,10 @@
     ::CoLockObjectExternal(m_pIDropTarget, FALSE, TRUE);
 #endif
 
+    //
+    EndDragImageSupport();
+
+    //
     m_pIDropTarget->SetHwnd(0);
 #endif
 }
@@ -437,9 +465,6 @@
 {
     wxDataFormat format = MSWGetSupportedFormat(m_pIDataSource);
     if ( format == wxDF_INVALID ) {
-        // this is strange because IsAcceptedData() succeeded previously!
-        wxFAIL_MSG(wxT("strange - did supported formats list change?"));
-
         return false;
     }
 
@@ -540,6 +565,81 @@
 }
 
 // ----------------------------------------------------------------------------
+// drag image functions
+// ----------------------------------------------------------------------------
+void
+wxDropTarget::EndDragImageSupport()
+{
+    //
+    if (m_dropSourceHelper != NULL)
+    {
+        m_dropSourceHelper->Release();
+        m_dropSourceHelper = NULL;
+    }
+}
+
+void
+wxDropTarget::InitDragImageSupport()
+{
+    // init drop target helper to show shell drag images
+    CoCreateInstance(CLSID_DragDropHelper, NULL, CLSCTX_INPROC_SERVER,
+                     IID_IDropTargetHelper, (LPVOID*)&m_dropSourceHelper);
+}
+
+void 
+wxDropTarget::UpdateDragImageOnData(wxCoord x, 
+                                        wxCoord y, 
+                                        wxDragResult dragResult)
+{
+    //
+    if (m_dropSourceHelper != NULL)
+    {
+        POINT pt = {x, y};
+        DWORD dwEffect = ConvertDragResultToEffect(dragResult);
+        m_dropSourceHelper->Drop(m_pIDataSource, &pt, dwEffect);
+    }
+}
+
+void 
+wxDropTarget::UpdateDragImageOnDragOver(wxCoord x, 
+                                        wxCoord y, 
+                                        wxDragResult dragResult)
+{
+    //
+    if (m_dropSourceHelper != NULL)
+    {
+        POINT pt = {x, y};
+        DWORD dwEffect = ConvertDragResultToEffect(dragResult);
+        m_dropSourceHelper->DragOver(&pt, dwEffect);
+    }
+}
+
+void 
+wxDropTarget::UpdateDragImageOnEnter(wxCoord x, 
+                                        wxCoord y, 
+                                        wxDragResult dragResult)
+{
+    //
+    if (m_dropSourceHelper != NULL)
+    {
+        POINT pt = {x, y};
+        DWORD dwEffect = ConvertDragResultToEffect(dragResult);
+        m_dropSourceHelper->DragEnter(m_pIDropTarget->GetHWND(), m_pIDataSource, &pt, dwEffect);
+    }
+}
+
+void 
+wxDropTarget::UpdateDragImageOnLeave()
+{
+    //
+    if (m_dropSourceHelper != NULL)
+    {
+        m_dropSourceHelper->DragLeave();
+    }
+}
+
+
+// ----------------------------------------------------------------------------
 // private functions
 // ----------------------------------------------------------------------------
 

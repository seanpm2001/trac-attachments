diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ c:\wxWindows\src\msw\ownerdrw.cpp c:\supp\wxWindows\src\msw\ownerdrw.cpp
--- c:\wxWindows\src\msw\ownerdrw.cpp	Sat May 03 06:56:38 2003
+++ c:\supp\wxWindows\src\msw\ownerdrw.cpp	Sat May 03 15:41:50 2003
@@ -40,4 +40,55 @@
 
 
+
+
+// these static variables are by the wxMSWSystemMenuFontModule object
+// and reflect the system settings returned by the Win32 API's
+// SystemParametersInfo() call.
+
+static wxFont* gs_systemMenuFont = NULL;
+static int gs_systemMenuButtonWidth = 18;   // windows clean install default
+static int gs_systemMenuHeight = 18;        // windows clean install default
+
+
+class wxMSWSystemMenuFontModule : public wxModule
+{
+public:
+
+    virtual bool OnInit()
+    {
+        gs_systemMenuFont = new wxFont;
+
+#if defined(__WXMSW__) && defined(__WIN32__) && defined(SM_CXMENUCHECK)
+        NONCLIENTMETRICS nm;
+        nm.cbSize = sizeof(NONCLIENTMETRICS);
+        SystemParametersInfo(SPI_GETNONCLIENTMETRICS,0,&nm,0); 
+
+        gs_systemMenuButtonWidth = nm.iMenuHeight;
+        gs_systemMenuHeight = nm.iMenuHeight;
+
+        // create menu font
+        wxNativeFontInfo info;
+        memcpy(&info.lf, &nm.lfMenuFont, sizeof(LOGFONT));
+        gs_systemMenuFont->Create(info);
+#endif
+
+        return true;
+    }
+
+    virtual void OnExit()
+    {
+        delete gs_systemMenuFont;
+        gs_systemMenuFont = NULL;
+    }
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxMSWSystemMenuFontModule)
+};
+
+IMPLEMENT_DYNAMIC_CLASS(wxMSWSystemMenuFontModule, wxModule)
+
+
+
+
 // ============================================================================
 // implementation of wxOwnerDrawn class
@@ -50,48 +101,18 @@
             : m_strName(str)
 {
-#if defined(__WXMSW__) && defined(__WIN32__) && defined(SM_CXMENUCHECK)
-    // get the default menu height and font from the system
-    NONCLIENTMETRICS nm;
-    nm.cbSize = sizeof (NONCLIENTMETRICS);
-    SystemParametersInfo (SPI_GETNONCLIENTMETRICS,0,&nm,0); 
-    m_nMinHeight = nm.iMenuHeight;
-    
-    // nm.iMenuWidth is the system default for the width of
-    // menu icons and checkmarks
     if (ms_nDefaultMarginWidth == 0)
     {
-       ms_nDefaultMarginWidth = nm.iMenuWidth;
-       ms_nLastMarginWidth = nm.iMenuWidth;
+       ms_nDefaultMarginWidth = gs_systemMenuButtonWidth;
+       ms_nLastMarginWidth = gs_systemMenuButtonWidth;
     }
 
-    if (bMenuItem)
+    if (gs_systemMenuFont->Ok() && bMenuItem)
     {
-        static wxFont menu_font;
-        if (!menu_font.Ok())
-        {
-            // create menu font
-            wxNativeFontInfo info;
-            memcpy(&info.lf, &nm.lfMenuFont, sizeof(LOGFONT));
-            menu_font.Create(info);
-        }
-
-        m_font = menu_font;
+        m_font = *gs_systemMenuFont;
     }
-    else
+     else
     {
         m_font = *wxNORMAL_FONT;
     }
-#else
-    // windows clean install default
-    m_nMinHeight = 18;
-    
-    if (ms_nDefaultMarginWidth == 0)
-    {
-        ms_nDefaultMarginWidth = 18;
-        ms_nLastMarginWidth = 18;
-    }
-    if (wxNORMAL_FONT)
-       m_font = *wxNORMAL_FONT;
-#endif
 
     m_bCheckable   = bCheckable;
@@ -99,4 +120,5 @@
     m_nHeight      = 0;
     m_nMarginWidth = ms_nLastMarginWidth;
+    m_nMinHeight   = gs_systemMenuHeight;
 }
 


 	  	 

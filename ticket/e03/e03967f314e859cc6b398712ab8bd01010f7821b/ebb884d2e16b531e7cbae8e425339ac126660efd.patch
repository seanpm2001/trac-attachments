Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 68618)
+++ include/wx/aui/auibar.h	(working copy)
@@ -19,6 +19,7 @@
 #include "wx/control.h"
 #include "wx/sizer.h"
 #include "wx/pen.h"
+#include "wx/image.h"
 
 class WXDLLIMPEXP_FWD_CORE wxClientDC;
 class WXDLLIMPEXP_FWD_AUI wxAuiPaneInfo;
@@ -41,6 +42,16 @@
     wxAUI_TB_HORIZONTAL    = 1 << 7,
     wxAUI_TB_HORZ_TEXT     = (wxAUI_TB_HORZ_LAYOUT | wxAUI_TB_TEXT),
     wxAUI_ORIENTATION_MASK = (wxAUI_TB_VERTICAL | wxAUI_TB_HORIZONTAL),
+    wxAUI_TB_VERT_LAYOUT   = 1 << 8,
+    //rotation flags are used with wxAUI_TB_VERT_LAYOUT to define the
+    //toolbar tools rotation (fixed 90°, fixed 270° or automatic)
+    wxAUI_TB_ROTATION_90   = 1 << 9,
+    wxAUI_TB_ROTATION_270  = 1 << 10,
+    wxAUI_TB_ROTATION_AUTO = 1 << 11,
+    //vertical layout with auto rotated text and icon (90°, 270°)
+    wxAUI_TB_VERT_TEXT     = (wxAUI_TB_VERT_LAYOUT | wxAUI_TB_ROTATION_AUTO | wxAUI_TB_TEXT),
+    //auto-orientation (horz, vert) and auto-rotation (0°, 90°, 270°)
+    wxAUI_TB_SPIN_TEXT     = (wxAUI_TB_VERT_TEXT | wxAUI_TB_HORZ_LAYOUT),
     wxAUI_TB_DEFAULT_STYLE = 0
 };
 
@@ -55,10 +66,16 @@
 {
     wxAUI_TBTOOL_TEXT_LEFT = 0,     // unused/unimplemented
     wxAUI_TBTOOL_TEXT_RIGHT = 1,
-    wxAUI_TBTOOL_TEXT_TOP = 2,      // unused/unimplemented
+    wxAUI_TBTOOL_TEXT_TOP = 2,
     wxAUI_TBTOOL_TEXT_BOTTOM = 3
 };
 
+enum wxAuiToolBarToolOrientation
+{
+    wxAUI_TBTOOL_HORIZONTAL = 0,   // standard
+    wxAUI_TBTOOL_VERTICAL_90 = 1,  // rotation of 90° on the right
+    wxAUI_TBTOOL_VERTICAL_270 = 2, // rotation of 90° on the left
+};
 
 // aui toolbar event class
 
@@ -118,6 +135,8 @@
     wxAuiToolBarItem()
     {
         window = NULL;
+        bmp90 = bmp270 = wxNullBitmap;
+        disbmp90 = disbmp270 = wxNullBitmap;
         sizer_item = NULL;
         spacer_pixels = 0;
         toolid = 0;
@@ -129,6 +148,7 @@
         sticky = true;
         user_data = 0;
         alignment = wxALIGN_CENTER;
+        rotation = wxAUI_TBTOOL_HORIZONTAL;
     }
 
     wxAuiToolBarItem(const wxAuiToolBarItem& c)
@@ -163,6 +183,7 @@
         sticky = c.sticky;
         user_data = c.user_data;
         alignment = c.alignment;
+        rotation = c.rotation;
     }
 
 
@@ -185,10 +206,10 @@
     const wxString& GetLabel() const { return label; }
 
     void SetBitmap(const wxBitmap& bmp) { bitmap = bmp; }
-    const wxBitmap& GetBitmap() const { return bitmap; }
+    const wxBitmap& GetBitmap() const { return GetRotatedBitmap(false); }
 
     void SetDisabledBitmap(const wxBitmap& bmp) { disabled_bitmap = bmp; }
-    const wxBitmap& GetDisabledBitmap() const { return disabled_bitmap; }
+    const wxBitmap& GetDisabledBitmap() const { return GetRotatedBitmap(true); }
 
     void SetHoverBitmap(const wxBitmap& bmp) { hover_bitmap = bmp; }
     const wxBitmap& GetHoverBitmap() const { return hover_bitmap; }
@@ -223,8 +244,37 @@
     void SetAlignment(int l) { alignment = l; }
     int GetAlignment() const { return alignment; }
 
+    void SetRotation(int a) { rotation = a; }
+    const int GetRotation() const { return rotation; }
+
 private:
 
+    const wxBitmap& GetRotatedBitmap(bool disabled) const
+    {
+        const wxBitmap &bitmap_to_rotate = disabled ? disabled_bitmap : bitmap;
+        if (!bitmap_to_rotate.IsOk() || (rotation == wxAUI_TBTOOL_HORIZONTAL))
+            return bitmap_to_rotate;
+
+        wxBitmap *rotated_bitmap = NULL;
+        bool clockwise = true;
+        switch(rotation)
+        {
+        case wxAUI_TBTOOL_VERTICAL_90:
+            rotated_bitmap = disabled ? &disbmp90 : &bmp90;
+	        break;
+        case wxAUI_TBTOOL_VERTICAL_270:
+            rotated_bitmap = disabled ? &disbmp270 : &bmp270;
+            clockwise = false;
+	        break;
+        }
+
+        if (!rotated_bitmap->IsOk())
+            *rotated_bitmap = wxBitmap(bitmap_to_rotate.ConvertToImage().Rotate90(clockwise));
+
+        return *rotated_bitmap;
+    }
+
+
     wxWindow* window;          // item's associated window
     wxString label;            // label displayed on the item
     wxBitmap bitmap;           // item's bitmap
@@ -244,6 +294,12 @@
     bool sticky;               // overrides button states if true (always active)
     long user_data;            // user-specified data
     int alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
+
+    mutable wxBitmap bmp90;    // 90° rotated item's bitmap
+    mutable wxBitmap bmp270;   // 270° rotated item's bitmap
+    mutable wxBitmap disbmp90; // 90° rotated item's disabled bitmap
+    mutable wxBitmap disbmp270;// 270° rotated item's disabled bitmap
+    int rotation;              // tool rotation (default wxAUI_TBTOOL_HORIZONTAL)
 };
 
 #ifndef SWIG
@@ -269,6 +325,8 @@
     virtual wxFont GetFont() = 0;
     virtual void SetTextOrientation(int orientation) = 0;
     virtual int GetTextOrientation() = 0;
+    virtual void SetRotation(int rotation) = 0;
+    virtual int GetRotation() = 0;
 
     virtual void DrawBackground(
                          wxDC& dc,
@@ -350,6 +408,8 @@
     virtual wxFont GetFont();
     virtual void SetTextOrientation(int orientation);
     virtual int GetTextOrientation();
+    virtual void SetRotation(int rotation);
+    virtual int GetRotation();
 
     virtual void DrawBackground(
                 wxDC& dc,
@@ -412,6 +472,14 @@
     virtual int ShowDropDown(wxWindow* wnd,
                              const wxAuiToolBarItemArray& items);
 
+private:
+    //Calculates the position of the bitmap and of the text for the given rect
+    void GetToolsPosition(wxDC& dc,
+                          const wxAuiToolBarItem& item,
+                          const wxRect& rect,
+                          wxRect &bmp_rect,
+                          wxRect &text_rect);
+
 protected:
 
     wxBitmap m_button_dropdown_bmp;
@@ -423,6 +491,7 @@
     wxFont m_font;
     unsigned int m_flags;
     int m_text_orientation;
+    int m_rotation;
 
     wxPen m_gripper_pen1;
     wxPen m_gripper_pen2;
@@ -492,6 +561,9 @@
     wxAuiToolBarItem* AddLabel(int tool_id,
                   const wxString& label = wxEmptyString,
                   const int width = -1);
+    static wxSize GetLabelSize(wxDC& dc,
+                               const wxString& label,
+                               int rotation);
     wxAuiToolBarItem* AddControl(wxControl* control,
                     const wxString& label = wxEmptyString);
     wxAuiToolBarItem* AddSeparator();
@@ -546,6 +618,9 @@
     void SetToolTextOrientation(int orientation);
     int  GetToolTextOrientation() const;
 
+    void SetToolRotation(int rotation);
+    int  GetToolRotation() const;
+
     void SetToolPacking(int packing);
     int  GetToolPacking() const;
 
@@ -644,6 +719,7 @@
     int m_tool_packing;
     int m_tool_border_padding;
     int m_tool_text_orientation;
+    int m_tool_rotation;
     int m_overflow_state;
     bool m_dragging;
     bool m_gripper_visible;
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 68618)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -872,6 +872,17 @@
     tb5->SetCustomOverflowItems(prepend_items, append_items);
     tb5->Realize();
 
+    wxAuiToolBar* tb6 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_SPIN_TEXT);
+    tb6->SetToolBitmapSize(wxSize(48,48));
+    tb6->AddTool(ID_SampleItem+35, wxT("Automatic"), wxArtProvider::GetBitmap(wxART_ERROR, wxART_OTHER, wxSize(16,16)));
+    tb6->AddSeparator();
+    tb6->AddTool(ID_SampleItem+36, wxT("Orientation"), wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16)));
+    tb6->AddTool(ID_DropDownToolbarItem, wxT("Rotation"), wxArtProvider::GetBitmap(wxART_WARNING, wxART_OTHER, wxSize(16,16)));
+    tb6->SetCustomOverflowItems(prepend_items, append_items);
+    tb6->SetToolDropDown(ID_DropDownToolbarItem, true);
+    tb6->Realize();
+
     // add a bunch of panes
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test1")).Caption(wxT("Pane Caption")).
@@ -982,8 +993,12 @@
                   ToolbarPane().Left().
                   GripperTop());
 
+    m_mgr.AddPane(tb6, wxAuiPaneInfo().
+                  Name(wxT("tb6")).Caption(wxT("Automatic Rotation and Orientation")).
+                  ToolbarPane().Right().GripperTop());
+
     m_mgr.AddPane(new wxButton(this, wxID_ANY, _("Test Button")),
-                  wxAuiPaneInfo().Name(wxT("tb6")).
+                  wxAuiPaneInfo().Name(wxT("tb7")).
                   ToolbarPane().Top().Row(2).Position(1).
                   LeftDockable(false).RightDockable(false));
 
@@ -997,7 +1012,7 @@
         if (!all_panes.Item(i).IsToolbar())
             all_panes.Item(i).Hide();
     m_mgr.GetPane(wxT("tb1")).Hide();
-    m_mgr.GetPane(wxT("tb6")).Hide();
+    m_mgr.GetPane(wxT("tb7")).Hide();
     m_mgr.GetPane(wxT("test8")).Show().Left().Layer(0).Row(0).Position(0);
     m_mgr.GetPane(wxT("test10")).Show().Bottom().Layer(0).Row(0).Position(0);
     m_mgr.GetPane(wxT("notebook_content")).Show();
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 68618)
+++ src/aui/auibar.cpp	(working copy)
@@ -131,6 +131,7 @@
 
     m_flags = 0;
     m_text_orientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+    m_rotation = wxAUI_TBTOOL_HORIZONTAL;
     m_highlight_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
 
     m_separator_size = 7;
@@ -187,6 +188,11 @@
     m_text_orientation = orientation;
 }
 
+void wxAuiDefaultToolBarArt::SetRotation(int rotation)
+{
+    m_rotation = rotation;
+}
+
 unsigned int wxAuiDefaultToolBarArt::GetFlags()
 {
     return m_flags;
@@ -202,6 +208,11 @@
     return m_text_orientation;
 }
 
+int wxAuiDefaultToolBarArt::GetRotation()
+{
+    return m_rotation;
+}
+
 void wxAuiDefaultToolBarArt::DrawBackground(
                                     wxDC& dc,
                                     wxWindow* WXUNUSED(wnd),
@@ -223,74 +234,44 @@
     dc.SetFont(m_font);
     dc.SetTextForeground(*wxBLACK);
 
-    // we only care about the text height here since the text
-    // will get cropped based on the width of the item
-    int text_width = 0, text_height = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &text_width, &text_height);
+    wxSize label_size = wxAuiToolBar::GetLabelSize(dc,
+        item.GetLabel(), item.GetRotation());
+    int text_width = label_size.GetWidth(),
+        text_height = label_size.GetHeight();
 
-    // set the clipping region
-    wxRect clip_rect = rect;
-    clip_rect.width -= 1;
-    dc.SetClippingRegion(clip_rect);
-
     int text_x, text_y;
-    text_x = rect.x + 1;
-    text_y = rect.y + (rect.height-text_height)/2;
-    dc.DrawText(item.GetLabel(), text_x, text_y);
-    dc.DestroyClippingRegion();
+    switch(item.GetRotation())
+    {
+    default:
+    case wxAUI_TBTOOL_HORIZONTAL:
+        text_x = rect.x;
+        text_y = rect.y + (rect.height-text_height)/2;
+        dc.DrawText(item.GetLabel(), text_x, text_y);
+        break;
+    case wxAUI_TBTOOL_VERTICAL_90:
+        text_x = rect.x + (rect.width+text_width)/2;
+        text_y = rect.y;
+        dc.DrawRotatedText(item.GetLabel(), text_x, text_y, 270);
+    	break;
+    case wxAUI_TBTOOL_VERTICAL_270:
+        text_x = rect.x + (rect.width-text_width)/2;
+        text_y = rect.y + text_height;
+        dc.DrawRotatedText(item.GetLabel(), text_x, text_y, 90);
+    	break;
+    }
 }
 
 
 void wxAuiDefaultToolBarArt::DrawButton(
                                     wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
+                                    wxWindow* wnd,
                                     const wxAuiToolBarItem& item,
                                     const wxRect& rect)
 {
-    int text_width = 0, text_height = 0;
+    wxRect bmp_rect;
+    wxRect text_rect;
+    GetToolsPosition(dc, item, rect, bmp_rect, text_rect);
 
-    if (m_flags & wxAUI_TB_TEXT)
-    {
-        dc.SetFont(m_font);
-
-        int tx, ty;
-
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-        text_width = 0;
-        dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
-    }
-
-    int bmp_x = 0, bmp_y = 0;
-    int text_x = 0, text_y = 0;
-
-    if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
-    {
-        bmp_x = rect.x +
-                (rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
-
-        bmp_y = rect.y +
-                ((rect.height-text_height)/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        text_x = rect.x + (rect.width/2) - (text_width/2) + 1;
-        text_y = rect.y + rect.height - text_height - 1;
-    }
-    else if (m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT)
-    {
-        bmp_x = rect.x + 3;
-
-        bmp_y = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        text_x = bmp_x + 3 + item.GetBitmap().GetWidth();
-        text_y = rect.y +
-                 (rect.height/2) -
-                 (text_height/2);
-    }
-
-
     if (!(item.GetState() & wxAUI_BUTTON_STATE_DISABLED))
     {
         if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
@@ -328,7 +309,7 @@
         bmp = item.GetBitmap();
 
     if ( bmp.IsOk() )
-        dc.DrawBitmap(bmp, bmp_x, bmp_y, true);
+        dc.DrawBitmap(bmp, bmp_rect.x, bmp_rect.y, true);
 
     // set the item's text color based on if it is disabled
     dc.SetTextForeground(*wxBLACK);
@@ -336,81 +317,83 @@
         dc.SetTextForeground(DISABLED_TEXT_COLOR);
 
     if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
-    {
-        dc.DrawText(item.GetLabel(), text_x, text_y);
-    }
+        DrawLabel(dc, wnd, item, text_rect);
 }
 
 
 void wxAuiDefaultToolBarArt::DrawDropDownButton(
                                     wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
+                                    wxWindow* wnd,
                                     const wxAuiToolBarItem& item,
                                     const wxRect& rect)
 {
-    int text_width = 0, text_height = 0, text_x = 0, text_y = 0;
-    int bmp_x = 0, bmp_y = 0, dropbmp_x = 0, dropbmp_y = 0;
-
-    wxRect button_rect = wxRect(rect.x,
-                                rect.y,
-                                rect.width-BUTTON_DROPDOWN_WIDTH,
-                                rect.height);
-    wxRect dropdown_rect = wxRect(rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1,
-                                  rect.y,
-                                  BUTTON_DROPDOWN_WIDTH+1,
-                                  rect.height);
-
-    if (m_flags & wxAUI_TB_TEXT)
+    int dropbmp_x = 0, dropbmp_y = 0;
+    bool horizontal = true;
+    wxRect button_rect;
+    wxRect dropdown_rect;
+    switch(item.GetRotation())
     {
-        dc.SetFont(m_font);
-
-        int tx, ty;
-        if (m_flags & wxAUI_TB_TEXT)
+    case wxAUI_TBTOOL_VERTICAL_90:
         {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-            text_width = 0;
+        button_rect = wxRect(rect.x,
+                             rect.y,
+                             rect.width,
+                             rect.height-BUTTON_DROPDOWN_WIDTH);
+        dropdown_rect = wxRect(rect.x,
+                               rect.y+rect.height-BUTTON_DROPDOWN_WIDTH-1,
+                               rect.width,
+                               BUTTON_DROPDOWN_WIDTH+1);
+        horizontal = false;
         }
+    	break;
+    case wxAUI_TBTOOL_VERTICAL_270:
+        {
+        button_rect = wxRect(rect.x,
+                             rect.y+BUTTON_DROPDOWN_WIDTH,
+                             rect.width,
+                             rect.height-BUTTON_DROPDOWN_WIDTH);
+        dropdown_rect = wxRect(rect.x,
+                               rect.y,
+                               rect.width,
+                               BUTTON_DROPDOWN_WIDTH+1);
+        horizontal = false;
+        }
+        break;
+    case wxAUI_TBTOOL_HORIZONTAL:
+    default:
+        {
+        button_rect = wxRect(rect.x,
+                             rect.y,
+                             rect.width-BUTTON_DROPDOWN_WIDTH,
+                             rect.height);
+        dropdown_rect = wxRect(rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1,
+                               rect.y,
+                               BUTTON_DROPDOWN_WIDTH+1,
+                               rect.height);
+        }
+    	break;
+    }
 
-        dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
+    int dropbmp_width = m_button_dropdown_bmp.GetWidth();
+    int dropbmp_height = m_button_dropdown_bmp.GetHeight();
+    if (!horizontal)
+    {
+        int tmp = dropbmp_width;
+        dropbmp_width = dropbmp_height;
+        dropbmp_height = tmp;
     }
-
-
-
     dropbmp_x = dropdown_rect.x +
                 (dropdown_rect.width/2) -
-                (m_button_dropdown_bmp.GetWidth()/2);
+                (dropbmp_width/2);
     dropbmp_y = dropdown_rect.y +
                 (dropdown_rect.height/2) -
-                (m_button_dropdown_bmp.GetHeight()/2);
+                (dropbmp_height/2);
 
 
-    if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
-    {
-        bmp_x = button_rect.x +
-                (button_rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
-        bmp_y = button_rect.y +
-                ((button_rect.height-text_height)/2) -
-                (item.GetBitmap().GetHeight()/2);
+    wxRect bmp_rect;
+    wxRect text_rect;
+    GetToolsPosition(dc, item, button_rect, bmp_rect, text_rect);
 
-        text_x = rect.x + (rect.width/2) - (text_width/2) + 1;
-        text_y = rect.y + rect.height - text_height - 1;
-    }
-    else if (m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT)
-    {
-        bmp_x = rect.x + 3;
-
-        bmp_y = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        text_x = bmp_x + 3 + item.GetBitmap().GetWidth();
-        text_y = rect.y +
-                 (rect.height/2) -
-                 (text_height/2);
-    }
-
-
     if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
     {
         dc.SetPen(wxPen(m_highlight_colour));
@@ -454,8 +437,17 @@
     if (!bmp.IsOk())
         return;
 
-    dc.DrawBitmap(bmp, bmp_x, bmp_y, true);
-    dc.DrawBitmap(dropbmp, dropbmp_x, dropbmp_y, true);
+    dc.DrawBitmap(bmp, bmp_rect.x, bmp_rect.y, true);
+    if (horizontal)
+    {
+        dc.DrawBitmap(dropbmp, dropbmp_x, dropbmp_y, true);
+    }
+    else
+    {
+        dc.DrawBitmap(dropbmp.ConvertToImage().
+            Rotate90(item.GetRotation() == wxAUI_TBTOOL_VERTICAL_90),
+            dropbmp_x, dropbmp_y, true);
+    }
 
     // set the item's text color based on if it is disabled
     dc.SetTextForeground(*wxBLACK);
@@ -463,9 +455,7 @@
         dc.SetTextForeground(DISABLED_TEXT_COLOR);
 
     if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
-    {
-        dc.DrawText(item.GetLabel(), text_x, text_y);
-    }
+        DrawLabel(dc, wnd, item, text_rect);
 }
 
 void wxAuiDefaultToolBarArt::DrawControlLabel(
@@ -477,22 +467,16 @@
     if (!(m_flags & wxAUI_TB_TEXT))
         return;
 
-    if (m_text_orientation != wxAUI_TBTOOL_TEXT_BOTTOM)
-        return;
-
     int text_x = 0, text_y = 0;
     int text_width = 0, text_height = 0;
 
     dc.SetFont(m_font);
 
-    int tx, ty;
-    if (m_flags & wxAUI_TB_TEXT)
-    {
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-        text_width = 0;
-    }
+    wxSize label_size = wxAuiToolBar::GetLabelSize(dc,
+        item.GetLabel(), item.GetRotation());
 
-    dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
+    text_height = label_size.GetHeight();
+    text_width = label_size.GetWidth();
 
     // don't draw the label if it is wider than the item width
     if (text_width > rect.width)
@@ -516,21 +500,10 @@
                                         const wxAuiToolBarItem& item)
 {
     dc.SetFont(m_font);
+    wxSize label_size = wxAuiToolBar::GetLabelSize(dc,
+        item.GetLabel(), m_rotation);
 
-    // get label's height
-    int width = 0, height = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &width, &height);
-
-    // get item's width
-    width = item.GetMinSize().GetWidth();
-
-    if (width == -1)
-    {
-        // no width specified, measure the text ourselves
-        width = dc.GetTextExtent(item.GetLabel()).GetX();
-    }
-
-    return wxSize(width, height);
+    return wxSize(item.GetMinSize().GetWidth(), label_size.GetHeight());
 }
 
 wxSize wxAuiDefaultToolBarArt::GetToolSize(
@@ -547,37 +520,51 @@
     if (m_flags & wxAUI_TB_TEXT)
     {
         dc.SetFont(m_font);
-        int tx, ty;
+        wxSize label_size = wxAuiToolBar::GetLabelSize(dc,
+            item.GetLabel(), GetRotation());
 
-        if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+        int padding = 6;
+        if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM ||
+            m_text_orientation == wxAUI_TBTOOL_TEXT_TOP)
         {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &ty);
-            height += ty;
+            if (GetRotation() != wxAUI_TBTOOL_HORIZONTAL)
+            {
+                height += 3; // space between top border and bitmap
+                height += 3; // space between bitmap and text
+                padding = 0;
+            }
 
+            height += label_size.GetHeight();
+
             if ( !item.GetLabel().empty() )
-            {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
-                width = wxMax(width, tx+6);
-            }
+                width = wxMax(width, label_size.GetWidth()+padding);
         }
         else if ( m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT &&
                   !item.GetLabel().empty() )
         {
-            width += 3; // space between left border and bitmap
-            width += 3; // space between bitmap and text
+            if (GetRotation() == wxAUI_TBTOOL_HORIZONTAL)
+            {
+                width += 3; // space between left border and bitmap
+                width += 3; // space between bitmap and text
+                padding = 0;
+            }
 
             if ( !item.GetLabel().empty() )
             {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
-                width += tx;
-                height = wxMax(height, ty);
+                width += label_size.GetWidth();
+                height = wxMax(height, label_size.GetHeight()+padding);
             }
         }
     }
 
     // if the tool has a dropdown button, add it to the width
     if (item.HasDropDown())
-        width += (BUTTON_DROPDOWN_WIDTH+4);
+    {
+        if (item.GetRotation() == wxAUI_TBTOOL_HORIZONTAL)
+            width += (BUTTON_DROPDOWN_WIDTH+4);
+        else
+            height += (BUTTON_DROPDOWN_WIDTH+4);
+    }
 
     return wxSize(width, height);
 }
@@ -683,9 +670,25 @@
         }
     }
 
-    int x = rect.x+1+(rect.width-m_overflow_bmp.GetWidth())/2;
-    int y = rect.y+1+(rect.height-m_overflow_bmp.GetHeight())/2;
-    dc.DrawBitmap(m_overflow_bmp, x, y, true);
+
+    wxAuiToolBar *toolbar = wxDynamicCast(wnd, wxAuiToolBar);
+
+    if (toolbar &&
+        toolbar->GetToolRotation() == wxAUI_TBTOOL_VERTICAL_90 ||
+        toolbar->GetToolRotation() == wxAUI_TBTOOL_VERTICAL_270)
+    {
+        int x = rect.x+1+(rect.width-m_overflow_bmp.GetHeight())/2;
+        int y = rect.y+1+(rect.height-m_overflow_bmp.GetWidth())/2;
+        dc.DrawBitmap(m_overflow_bmp.ConvertToImage().
+            Rotate90(toolbar->GetToolRotation() == wxAUI_TBTOOL_VERTICAL_90),
+            x, y, true);
+    }
+    else
+    {
+        int x = rect.x+1+(rect.width-m_overflow_bmp.GetWidth())/2;
+        int y = rect.y+1+(rect.height-m_overflow_bmp.GetHeight())/2;
+        dc.DrawBitmap(m_overflow_bmp, x, y, true);
+    }
 }
 
 int wxAuiDefaultToolBarArt::GetElementSize(int element_id)
@@ -732,7 +735,10 @@
 
             wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text, item.GetShortHelp());
 
+            int orientation = item.GetRotation();
+            item.SetRotation(wxAUI_TBTOOL_HORIZONTAL);
             m->SetBitmap(item.GetBitmap());
+            item.SetRotation(orientation);
             menuPopup.Append(m);
             items_added++;
         }
@@ -761,8 +767,114 @@
 }
 
 
+void wxAuiDefaultToolBarArt::GetToolsPosition(wxDC& dc,
+                                              const wxAuiToolBarItem& item,
+                                              const wxRect& rect,
+                                              wxRect &bmp_rect,
+                                              wxRect &text_rect)
+{
+    int text_width = 0, text_height = 0;
+    int bmp_with = item.GetBitmap().GetWidth();
+    int bmp_height = item.GetBitmap().GetHeight();
 
+    if (m_flags & wxAUI_TB_TEXT)
+    {
+        dc.SetFont(m_font);
 
+        wxSize label_size = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(), m_rotation);
+
+        text_height = label_size.GetHeight();
+        text_width = label_size.GetWidth();
+    }
+
+    int bmp_x = 0, bmp_y = 0;
+    int text_x = 0, text_y = 0;
+
+    if (m_rotation == wxAUI_TBTOOL_HORIZONTAL)
+    {
+        if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+        {
+            bmp_x = rect.x +
+                    (rect.width/2) -
+                    (bmp_with/2);
+            bmp_y = rect.y + 3;
+
+            text_x = rect.x +
+                     (rect.width/2) -
+                     (text_width/2);
+            text_y = rect.y +
+                     ((bmp_y - rect.y) * 2) +
+                     bmp_height;
+        }
+        else if (m_text_orientation == wxAUI_TBTOOL_TEXT_TOP)
+        {
+            text_x = rect.x +
+                     (rect.width/2) -
+                     (text_width/2);
+            text_y = rect.y + 3;
+
+            bmp_x = rect.x +
+                    (rect.width/2) -
+                    (bmp_with/2);
+            bmp_y = rect.y +
+                    ((text_y - rect.y) * 2) +
+                    text_height;
+        }
+        else if (m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT)
+        {
+            bmp_x = rect.x + 3;
+            bmp_y = rect.y +
+                    (rect.height/2) -
+                    (bmp_height / 2);
+
+            text_x = rect.x +
+                     ((bmp_x - rect.x) * 2) +
+                     bmp_with;
+            text_y = rect.y +
+                     (rect.height/2) -
+                     (text_height/2);
+        }
+    }
+    else
+    {
+        if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+        {
+            bmp_x = rect.x +
+                    (rect.width / 2) -
+                    (bmp_with / 2);
+            bmp_y = rect.y + 3;
+
+            text_x = rect.x + 1 +
+                     (rect.width / 2) -
+                     (text_width / 2);
+            text_y = rect.y +
+                     ((bmp_y - rect.y) * 2) +
+                     bmp_height;
+        }
+        else if (m_text_orientation == wxAUI_TBTOOL_TEXT_TOP)
+        {
+            bmp_x = rect.x +
+                    (rect.width / 2) -
+                    (bmp_with / 2);
+            bmp_y = rect.y +
+                    rect.height -
+                    bmp_height - 3;
+
+            text_x = rect.x - 2 +
+                     (rect.width / 2) -
+                     (text_width / 2);
+            text_y = bmp_y -
+                     text_height - 3;
+        }
+    }
+
+    bmp_rect.SetPosition(wxPoint(bmp_x, bmp_y));
+    bmp_rect.SetSize(wxSize(bmp_with, bmp_height));
+    text_rect.SetPosition(wxPoint(text_x, text_y));
+    text_rect.SetSize(wxSize(text_width, text_height));
+}
+
+
 static wxOrientation GetOrientation(long& style)
 {
     switch (style & wxAUI_ORIENTATION_MASK)
@@ -822,6 +934,7 @@
     m_tool_packing = 2;
     m_tool_border_padding = 3;
     m_tool_text_orientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+    m_tool_rotation = wxAUI_TBTOOL_HORIZONTAL;
     m_gripper_sizer_item = NULL;
     m_overflow_sizer_item = NULL;
     m_dragging = false;
@@ -840,6 +953,13 @@
     SetExtraStyle(wxWS_EX_PROCESS_IDLE);
     if (style & wxAUI_TB_HORZ_LAYOUT)
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
+    else if (style & wxAUI_TB_VERT_LAYOUT)
+    {
+        if (style & wxAUI_TB_ROTATION_270)
+            SetToolRotation(wxAUI_TBTOOL_VERTICAL_270);
+        else
+            SetToolRotation(wxAUI_TBTOOL_VERTICAL_90);
+    }
     SetBackgroundStyle(wxBG_STYLE_CUSTOM);
 }
 
@@ -879,7 +999,18 @@
     if (style & wxAUI_TB_HORZ_LAYOUT)
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
     else
-        SetToolTextOrientation(wxAUI_TBTOOL_TEXT_BOTTOM);
+    {
+        SetToolTextOrientation(style & wxAUI_TB_ROTATION_270 ?
+            wxAUI_TBTOOL_TEXT_TOP : wxAUI_TBTOOL_TEXT_BOTTOM);
+    }
+
+    if (style & wxAUI_TB_VERT_LAYOUT)
+    {
+        if (style & wxAUI_TB_ROTATION_270)
+            SetToolRotation(wxAUI_TBTOOL_VERTICAL_270);
+        else
+            SetToolRotation(wxAUI_TBTOOL_VERTICAL_90);
+    }
 }
 
 long wxAuiToolBar::GetWindowStyleFlag() const
@@ -897,6 +1028,7 @@
     {
         SetArtFlags();
         m_art->SetTextOrientation(m_tool_text_orientation);
+        m_art->SetRotation(m_tool_rotation);
     }
 }
 
@@ -952,6 +1084,7 @@
     item.min_size = wxDefaultSize;
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     if (item.toolid == wxID_ANY)
         item.toolid = wxNewId();
@@ -987,6 +1120,7 @@
     item.min_size = control->GetEffectiveMinSize();
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1016,6 +1150,7 @@
     item.min_size = min_size;
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     if (item.toolid == wxID_ANY)
         item.toolid = wxNewId();
@@ -1024,6 +1159,28 @@
     return &m_items.Last();
 }
 
+wxSize wxAuiToolBar::GetLabelSize(wxDC& dc, const wxString& label, int rotation)
+{
+    int tx, ty;
+    int text_width = 0, text_height = 0;
+
+    // get the text height
+    dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
+
+    // get the text width
+    if ( !label.empty() )
+        dc.GetTextExtent(label, &text_width, &ty);
+
+    if (rotation != wxAUI_TBTOOL_HORIZONTAL)
+    {
+        int tmp = text_height;
+        text_height = text_width;
+        text_width = tmp;
+    }
+
+    return wxSize(text_width, text_height);
+}
+
 wxAuiToolBarItem* wxAuiToolBar::AddSeparator()
 {
     wxAuiToolBarItem item;
@@ -1041,6 +1198,7 @@
     item.min_size = wxDefaultSize;
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1064,6 +1222,7 @@
     item.min_size = wxDefaultSize;
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1087,6 +1246,7 @@
     item.min_size = wxDefaultSize;
     item.user_data = 0;
     item.sticky = false;
+    item.rotation = m_tool_rotation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1325,6 +1485,32 @@
     return m_tool_text_orientation;
 }
 
+
+void wxAuiToolBar::SetToolRotation(int rotation)
+{
+    m_tool_rotation = rotation;
+
+    if (m_style & wxAUI_TB_ROTATION_AUTO)
+    {
+        size_t i, count;
+        for (i = 0, count = m_items.GetCount(); i < count; ++i)
+        {
+            wxAuiToolBarItem& item = m_items.Item(i);
+            item.SetRotation(rotation);
+        }
+    }
+
+    if (m_art)
+    {
+        m_art->SetRotation(rotation);
+    }
+}
+
+int wxAuiToolBar::GetToolRotation() const
+{
+    return m_tool_rotation;
+}
+
 void wxAuiToolBar::SetToolPacking(int packing)
 {
     m_tool_packing = packing;
@@ -1941,7 +2127,8 @@
                 ctrl_sizer_item = vert_sizer->Add(item.window, 0, wxEXPAND);
                 vert_sizer->AddStretchSpacer(1);
                 if ( (m_style & wxAUI_TB_TEXT) &&
-                     m_tool_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM &&
+                     (m_tool_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM ||
+                      m_tool_text_orientation == wxAUI_TBTOOL_TEXT_TOP) &&
                      !item.GetLabel().empty() )
                 {
                     wxSize s = GetLabelSize(item.GetLabel());
@@ -2111,19 +2298,8 @@
 wxSize wxAuiToolBar::GetLabelSize(const wxString& label)
 {
     wxClientDC dc(this);
-
-    int tx, ty;
-    int text_width = 0, text_height = 0;
-
     dc.SetFont(m_font);
-
-    // get the text height
-    dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-
-    // get the text width
-    dc.GetTextExtent(label, &text_width, &ty);
-
-    return wxSize(text_width, text_height);
+    return wxAuiToolBar::GetLabelSize(dc, label, m_tool_rotation);
 }
 
 
@@ -2282,6 +2458,8 @@
         if (ok)
         {
             wxOrientation newOrientation = m_orientation;
+            int newRotation = m_tool_rotation;
+            int newTextOrientation = m_tool_text_orientation;
             if (pane.IsDocked())
             {
                 switch (pane.dock_direction)
@@ -2289,10 +2467,45 @@
                     case wxAUI_DOCK_TOP:
                     case wxAUI_DOCK_BOTTOM:
                         newOrientation = wxHORIZONTAL;
+                        if (m_style & wxAUI_TB_HORZ_LAYOUT)
+                        {
+                            newRotation = wxAUI_TBTOOL_HORIZONTAL;
+                            newTextOrientation = wxAUI_TBTOOL_TEXT_RIGHT;
+                        }
                         break;
                     case wxAUI_DOCK_LEFT:
+                        newOrientation = wxVERTICAL;
+                        if (m_style & wxAUI_TB_VERT_LAYOUT)
+                        {
+                            if (m_style & wxAUI_TB_ROTATION_AUTO ||
+                                m_style & wxAUI_TB_ROTATION_90)
+                            {
+                                newRotation = wxAUI_TBTOOL_VERTICAL_90;
+                                newTextOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+                            }
+                            else if (m_style & wxAUI_TB_ROTATION_270)
+                            {
+                                newRotation = wxAUI_TBTOOL_VERTICAL_270;
+                                newTextOrientation = wxAUI_TBTOOL_TEXT_TOP;
+                            }
+                        }
+                        break;
                     case wxAUI_DOCK_RIGHT:
                         newOrientation = wxVERTICAL;
+                        if (m_style & wxAUI_TB_VERT_LAYOUT)
+                        {
+                            if (m_style & wxAUI_TB_ROTATION_AUTO ||
+                                m_style & wxAUI_TB_ROTATION_270)
+                            {
+                                newRotation = wxAUI_TBTOOL_VERTICAL_270;
+                                newTextOrientation = wxAUI_TBTOOL_TEXT_TOP;
+                            }
+                            else if (m_style & wxAUI_TB_ROTATION_90)
+                            {
+                                newRotation = wxAUI_TBTOOL_VERTICAL_90;
+                                newTextOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+                            }
+                        }
                         break;
                     default:
                         wxFAIL_MSG("invalid dock location value");
@@ -2308,15 +2521,30 @@
                 if (x > y)
                 {
                     newOrientation = wxHORIZONTAL;
+                    newRotation = wxAUI_TBTOOL_HORIZONTAL;
+                    newTextOrientation = wxAUI_TBTOOL_TEXT_RIGHT;
                 }
                 else
                 {
                     newOrientation = wxVERTICAL;
+                    if (m_style & wxAUI_TB_VERT_LAYOUT)
+                    {
+                        newRotation = newRotation == wxAUI_TBTOOL_VERTICAL_270 ||
+                                      m_style & wxAUI_TB_ROTATION_270 ?
+                                      wxAUI_TBTOOL_VERTICAL_270 : wxAUI_TBTOOL_VERTICAL_90;
+                        newTextOrientation = newTextOrientation == wxAUI_TBTOOL_TEXT_TOP ||
+                                             m_style & wxAUI_TB_ROTATION_270 ?
+                                             wxAUI_TBTOOL_TEXT_TOP : wxAUI_TBTOOL_TEXT_BOTTOM;
+                    }
                 }
             }
-            if (newOrientation != m_orientation)
+            if (newOrientation != m_orientation ||
+                newRotation != m_tool_rotation ||
+                newTextOrientation != m_tool_text_orientation)
             {
                 SetOrientation(newOrientation);
+                SetToolRotation(newRotation);
+                SetToolTextOrientation(newTextOrientation);
                 Realize();
                 if (newOrientation == wxHORIZONTAL)
                 {
@@ -2550,10 +2778,15 @@
         e.SetToolId(m_action_item->toolid);
 
         int mouse_x = evt.GetX();
+        int mouse_y = evt.GetY();
         wxRect rect = m_action_item->sizer_item->GetRect();
         const bool dropDownHit = m_action_item->dropdown &&
+                                 (m_action_item->rotation == wxAUI_TBTOOL_HORIZONTAL &&
                                  mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
-                                 mouse_x < (rect.x+rect.width);
+                                 mouse_x < (rect.x+rect.width)) ||
+                                 (m_action_item->rotation != wxAUI_TBTOOL_HORIZONTAL &&
+                                 mouse_y >= (rect.y+rect.height-BUTTON_DROPDOWN_WIDTH-1) &&
+                                 mouse_y < (rect.y+rect.height));
         e.SetDropDownClicked(dropDownHit);
 
         e.SetClickPoint(evt.GetPosition());

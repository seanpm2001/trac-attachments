--- include/wx/window-owrap1.h	2007-09-17 00:00:53.000000000 +0200
+++ include/wx/window.h	2007-11-06 13:50:33.000000000 +0100
@@ -490,6 +490,14 @@
     // components of the result respectively
     virtual wxSize GetWindowBorderSize() const;
 
+    // wxSizer and friends use this to give a chance to a component to recalc
+    // its min size once one of the final size components is known. Override 
+    // this function when that is useful (such as for wxStaticText which can 
+    // stretch over several lines). Parameter availableOtherDir
+    // tells the item how much more space there is available in the opposite 
+    // direction (-1 if unknown).
+    virtual bool InformFirstDirection( int WXUNUSED(direction), int WXUNUSED(size), int WXUNUSED(availableOtherDir) )
+    { return false; }
 
     // window state
     // ------------
--- include/wx/sizer-wrap-o0.h	2007-11-10 14:50:25.000000000 +0100
+++ include/wx/sizer-wrap2.h	2007-11-06 15:27:53.000000000 +0100
@@ -345,6 +345,12 @@
     wxPoint GetPosition() const
         { return m_pos; }
 
+    // Called once the first component of an item has been decided. This is 
+    // used in algorithms that depend on knowing the size in one direction 
+    // before the min size in the other direction can be known. 
+    // Returns true if it made use of the information (and min size was changed).
+    bool InformFirstDirection( int direction, int size, int availableOtherDir=-1 );
+
     // these functions delete the current contents of the item if it's a sizer
     // or a spacer but not if it is a window
     void AssignWindow(wxWindow *window)
@@ -551,6 +557,11 @@
     virtual void Clear( bool delete_windows = false );
     virtual void DeleteWindows();
 
+    // Inform sizer about the first direction that has been decided (by parent item)
+    // Returns true if it made use of the informtion (and recalculated min size)
+    virtual bool InformFirstDirection( int WXUNUSED(direction), int WXUNUSED(size), int WXUNUSED(availableOtherDir) )
+    { return false; }
+    
     void SetMinSize( int width, int height )
         { DoSetMinSize( width, height ); }
     void SetMinSize( const wxSize& size )
@@ -748,6 +759,7 @@
 protected:
     void AdjustForFlexDirection();
     void AdjustForGrowables(const wxSize& sz);
+    void FindWidthsAndHeights(int nrows, int ncols);
 
     // the heights/widths of all rows/columns
     wxArrayInt  m_rowHeights,
--- src/common/sizer-wrap-o0.cpp	2007-11-10 14:52:02.000000000 +0100
+++ src/common/sizer-wrap2.cpp	2007-11-10 14:43:36.000000000 +0100
@@ -272,6 +272,73 @@
     return ret;
 }
 
+bool wxSizerItem::InformFirstDirection(int direction, int size, int availableOtherDir)
+{
+	// The size that come here will be including borders. Child items should get it 
+	// without borders. 
+	if( size>0 )
+	{
+		if( direction==wxHORIZONTAL )
+		{
+		    if (m_flag & wxWEST)
+		        size -= m_border;
+		    if (m_flag & wxEAST)
+		        size -= m_border;
+		}
+		else if( direction==wxVERTICAL )
+		{
+		    if (m_flag & wxNORTH)
+		        size -= m_border;
+		    if (m_flag & wxSOUTH)
+		        size -= m_border;
+		}
+	}
+	
+    bool didUse = false;
+    // Pass the information along to the held object
+    if (IsSizer())
+    {
+        didUse = GetSizer()->InformFirstDirection(direction,size,availableOtherDir);
+        if (didUse)
+        	m_minSize = GetSizer()->CalcMin();
+    }
+    else if (IsWindow())
+    {
+        didUse =  GetWindow()->InformFirstDirection(direction,size,availableOtherDir);
+        if (didUse)
+            m_minSize = m_window->GetEffectiveMinSize();
+    
+	    // This information is useful for items with wxSHAPED flag, since 
+	    // we can request an optimal min size for such an item. Even if 
+	    // we overwrite the m_minSize member here, we can read it back from 
+	    // the owned window (happens automatically).
+	    if( (m_flag & wxSHAPED) && (m_flag & wxEXPAND) && direction )
+	    {
+	        if( !wxIsNullDouble(m_ratio) )
+	        {
+	            wxCHECK_MSG( (m_proportion==0), false, _T("Shaped item, non-zero proportion in wxSizerItem::InformFirstDirection()") );
+	            if( direction==wxHORIZONTAL && !wxIsNullDouble(m_ratio) )
+	            {
+	                // Clip size so that we don't take too much
+	                if( availableOtherDir>=0 && int(size/m_ratio)-m_minSize.y>availableOtherDir )
+	                    size = int((availableOtherDir+m_minSize.y)*m_ratio);
+	                m_minSize = wxSize(size,int(size/m_ratio));
+	            }
+	            else if( direction==wxVERTICAL )
+	            {
+	                // Clip size so that we don't take too much
+	                if( availableOtherDir>=0 && int(size*m_ratio)-m_minSize.x>availableOtherDir )
+	                    size = int((availableOtherDir+m_minSize.x)/m_ratio);
+	                m_minSize = wxSize(int(size*m_ratio),size);
+	            }
+	            didUse = true;
+	        }
+	    }
+    }
+        
+    return didUse;
+}
+
 wxSize wxSizerItem::CalcMin()
 {
     if (IsSizer())
@@ -1314,6 +1381,33 @@
         node = node->GetNext();
     }
 
+    // In case we have a nested sizer with a two step algo , give it 
+    // a chance to adjust to that (we give it width component)
+    node = m_children.GetFirst();
+    bool didChangeMinSize = false;
+    while (node)
+    {
+        wxSizerItem     *item = node->GetData();
+        didChangeMinSize |= item->InformFirstDirection( wxHORIZONTAL, w, -1 );
+    }
+    
+    // And redo iteration in case min size changed
+    if( didChangeMinSize )
+    {
+        node = m_children.GetFirst();
+        w = h = 0;
+        while (node)
+        {
+            wxSizerItem     *item = node->GetData();
+            wxSize           sz( item->GetMinSizeWithBorder() );
+
+            w = wxMax( w, sz.x );
+            h = wxMax( h, sz.y );
+
+            node = node->GetNext();
+        }    
+    }
+    
     return wxSize( ncols * w + (ncols-1) * m_hgap,
                    nrows * h + (nrows-1) * m_vgap );
 }
@@ -1456,16 +1550,8 @@
     return total;
 }
 
-wxSize wxFlexGridSizer::CalcMin()
+void wxFlexGridSizer::FindWidthsAndHeights(int nrows, int ncols)
 {
-    int nrows,
-        ncols;
-
-    // Number of rows/columns can change as items are added or removed.
-    if ( !CalcRowsCols(nrows, ncols) )
-        return wxSize();
-
-
     // We have to recalculate the sizes in case the item minimum size has
     // changed since the previous layout, or the item has been hidden using
     // wxSizer::Show(). If all the items in a row/column are hidden, the final
@@ -1483,7 +1569,9 @@
         wxSizerItem * const item = *i;
         if ( item->IsShown() )
         {
-            const wxSize sz(item->CalcMin());
+            // NOTE: Not doing the calculation here, this is just 
+            // for finding max values.
+            const wxSize sz(item->GetMinSizeWithBorder());
 
             const int row = n / ncols;
             const int col = n % ncols;
@@ -1499,6 +1587,42 @@
 
     m_calculatedMinSize = wxSize(SumArraySizes(m_colWidths, m_hgap),
                                  SumArraySizes(m_rowHeights, m_vgap));
+}
+
+wxSize wxFlexGridSizer::CalcMin()
+{
+    int nrows,
+        ncols;
+
+    // Number of rows/columns can change as items are added or removed.
+    if ( !CalcRowsCols(nrows, ncols) )
+        return wxSize();
+
+
+    // We have to recalculate the sizes in case the item minimum size has
+    // changed since the previous layout, or the item has been hidden using
+    // wxSizer::Show(). If all the items in a row/column are hidden, the final
+    // dimension of the row/column will be -1, indicating that the column
+    // itself is hidden.
+    m_rowHeights.assign(nrows, -1);
+    m_colWidths.assign(ncols, -1);
+
+    // n is the index of the item in left-to-right top-to-bottom order
+    size_t n = 0;
+    for ( wxSizerItemList::iterator i = m_children.begin();
+          i != m_children.end();
+          ++i, ++n )
+    {
+        wxSizerItem * const item = *i;
+        if ( item->IsShown() )
+        {
+            item->CalcMin();
+        }
+    }
+
+    // The stage of looking for max values in each row/column has been 
+    // made a separate function, since it's reused in AdjustForGrowables.
+    FindWidthsAndHeights(nrows,ncols);
 
     return m_calculatedMinSize;
 }
@@ -1616,21 +1740,35 @@
 
 void wxFlexGridSizer::AdjustForGrowables(const wxSize& sz)
 {
-    if ( (m_flexDirection & wxVERTICAL) || (m_growMode != wxFLEX_GROWMODE_NONE) )
+    if ( (m_flexDirection & wxHORIZONTAL) || (m_growMode != wxFLEX_GROWMODE_NONE) )
     {
-        // pass NULL instead of proportions if the grow mode is ALL as we
-        // should treat all rows as having proportion of 1 then
         DoAdjustForGrowables
         (
-            sz.y - m_calculatedMinSize.y,
-            m_growableRows,
-            m_rowHeights,
-            m_growMode == wxFLEX_GROWMODE_SPECIFIED ? &m_growableRowsProportions
+            sz.x - m_calculatedMinSize.x,
+            m_growableCols,
+            m_colWidths,
+            m_growMode == wxFLEX_GROWMODE_SPECIFIED ? &m_growableColsProportions
                                                     : NULL
         );
+        
+        // This gives nested objects that benefit from knowing one size 
+        // component in advance the chance to use that. 
+        bool didAdjustMinSize = false;
+        int nrows, ncols;
+        CalcRowsCols(nrows, ncols);
+         
+        // Iterate over all items and inform about column width
+        size_t n = 0;
+        for ( wxSizerItemList::iterator i = m_children.begin();
+              i != m_children.end();
+              ++i, ++n )
+        {
+            const int col = n % ncols;
+            didAdjustMinSize |= (*i)->InformFirstDirection(wxHORIZONTAL, m_colWidths[col], sz.y - m_calculatedMinSize.y);
     }
 
-    if ( (m_flexDirection & wxHORIZONTAL) || (m_growMode != wxFLEX_GROWMODE_NONE) )
+        // Only redo if info was actually used 
+        if( didAdjustMinSize )
     {
         DoAdjustForGrowables
         (
@@ -1643,6 +1781,21 @@
     }
 }
 
+    if ( (m_flexDirection & wxVERTICAL) || (m_growMode != wxFLEX_GROWMODE_NONE) )
+    {
+        // pass NULL instead of proportions if the grow mode is ALL as we
+        // should treat all rows as having proportion of 1 then
+        DoAdjustForGrowables
+        (
+            sz.y - m_calculatedMinSize.y,
+            m_growableRows,
+            m_rowHeights,
+            m_growMode == wxFLEX_GROWMODE_SPECIFIED ? &m_growableRowsProportions
+                                                    : NULL
+        );
+    }
+}
+
 
 void wxFlexGridSizer::AddGrowableRow( size_t idx, int proportion )
 {
@@ -1693,15 +1846,47 @@
     if ( m_children.empty() )
         return;
 
+    const wxCoord totalMinorSize = SizeInMinorDir(m_size);
+
     // the amount of free space which we should redistribute among the
     // stretchable items (i.e. those with non zero proportion)
     int delta = SizeInMajorDir(m_size) - SizeInMajorDir(m_minSize);
 
+    
+    // Inform child items about the size in minor direction, that can
+    // change how much free space we have in major dir and how to distribute it.
+    int majorMinSum = 0;
+    for ( wxSizerItemList::const_iterator i = m_children.begin();
+          i != m_children.end();
+          ++i )
+    {
+        wxSizerItem * const item = *i;
+
+        if ( !item->IsShown() )
+            continue;
+
+        wxSize szMinPrev = item->GetMinSizeWithBorder();
+        item->InformFirstDirection(m_orient^wxBOTH,totalMinorSize,delta);
+        wxSize szMin = item->GetMinSizeWithBorder();
+        int deltaChange = SizeInMajorDir(szMin-szMinPrev); 
+        if( deltaChange )
+        {
+	        // Since we passed available space along to the item, it should not 
+        	// take too much ,so delat should not become negative. 
+	        delta -= deltaChange;
+        }
+        majorMinSum += SizeInMajorDir(item->GetMinSizeWithBorder());
+    }
+    // And update our min size
+    SizeInMajorDir(m_minSize) = majorMinSum;
+
+
+    // might have a new delta now
+    delta = SizeInMajorDir(m_size) - SizeInMajorDir(m_minSize);
+    
     // the position at which we put the next child
     wxPoint pt(m_position);
 
-    const wxCoord totalMinorSize = SizeInMinorDir(m_size);
-
     int totalProportion = m_totalProportion;
     for ( wxSizerItemList::const_iterator i = m_children.begin();
           i != m_children.end();
@@ -1711,6 +1896,7 @@
 
         if ( !item->IsShown() )
             continue;
+            
 #ifndef __DMC__
         // DMC doesn't distinguish between 
         //     int  SizeInMajorDir(const wxSize& sz) const
@@ -1719,7 +1905,6 @@
 #endif 
         wxSize sizeThis(item->GetMinSizeWithBorder());
 
-
         // adjust the size in the major direction using the proportion
         wxCoord majorSize = SizeInMajorDir(sizeThis);
         const int propItem = item->GetProportion();

 	  	 

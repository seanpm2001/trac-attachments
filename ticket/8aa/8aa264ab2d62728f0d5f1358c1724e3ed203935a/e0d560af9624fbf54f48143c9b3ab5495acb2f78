Index: include/wx/msw/seh.h
===================================================================
--- include/wx/msw/seh.h	(revision 73156)
+++ include/wx/msw/seh.h	(working copy)
@@ -15,21 +15,19 @@
 
     // the exception handler which should be called from the exception filter
     //
-    // it calsl wxApp::OnFatalException() if possible
+    // it calls wxApp::OnFatalException() if possible
     extern unsigned long wxGlobalSEHandler(EXCEPTION_POINTERS *pExcPtrs);
 
     // helper macro for wxSEH_HANDLE
 #if defined(__BORLANDC__) || (defined(__VISUALC__) && (__VISUALC__ <= 1200))
     // some compilers don't understand that this code is unreachable and warn
-    // about no value being returned from the function without it, so calm them
-    // down
+    // about no value being returned from the function, so calm them down
     #define wxSEH_DUMMY_RETURN(rc) return rc;
 #else
     #define wxSEH_DUMMY_RETURN(rc)
 #endif
 
-    // macros which allow to avoid many #if wxUSE_ON_FATAL_EXCEPTION in the code
-    // which uses them
+    // macros to avoid many #if wxUSE_ON_FATAL_EXCEPTION
     #define wxSEH_TRY __try
     #define wxSEH_IGNORE __except ( EXCEPTION_EXECUTE_HANDLER ) { }
     #define wxSEH_HANDLE(rc)                                                  \
@@ -47,27 +45,44 @@
     #define wxSEH_HANDLE(rc)
 #endif // wxUSE_ON_FATAL_EXCEPTION
 
+
+// When VC compiles with /EHa (i.e. "asynchronous/SE handling model" [1]).
+// SE's will be caught by any enclosing "catch(...)", which is probably
+// undesirable because SE's include errors that normally should be fatal
+// like division by zero or access violations.
+// To allow SE's through, we can install a suitable SE translator function
+// that does a "throw;".
+// This function is normally intended to translate SE's into typed C++
+// exceptions, but a contained "throw;" apparently can prevent
+// "catch(...)" from handling SE's.
+// This workaround is not needed in the likely case you don't use
+// /EHa or don't do "catch(...)".
+// 
+// [1] http://msdn.microsoft.com/en-us/library/1deeycx5.aspx
+//
 #if wxUSE_ON_FATAL_EXCEPTION && defined(__VISUALC__) && !defined(__WXWINCE__)
     #include <eh.h>
 
-    // C++ exception to structured exceptions translator: we need it in order
-    // to prevent VC++ from "helpfully" translating structured exceptions (such
-    // as division by 0 or access violation) to C++ pseudo-exceptions
-    extern void wxSETranslator(unsigned int code, EXCEPTION_POINTERS *ep);
+    inline void DisableAutomaticSETranslator() {
+        // Officially, _set_se_translator should only be used under /EHa,
+        // and doing otherwise can give the compiler warning
+        // "calling _set_se_translator() requires /EHa" under /W4.
+        // We don't appear to have a simple way to detect /EHa and otherwise
+        // avoid calling, but this call appears harmless and has no effect
+        // (i.e. sets an unused pointer __pSETranslator) without /EHa,
+        // at least up to VC 11.
+        #pragma warning(push)
+        #if __VISUALC__ <= 1700  // you may need to increase this
+            #pragma warning(disable: 4535)
+        #endif
 
-    // up to VC 9 this warning ("calling _set_se_translator() requires /EHa")
-    // is harmless and it's easier to suppress it than use different makefiles
-    // for VC5 and 6 (which don't support /EHa at all) and VC7 (which does
-    // accept it but it seems to change nothing for it anyhow)
-    #if __VISUALC__ < 1600
-        #pragma warning(disable: 4535)
-    #endif
+        extern void wxSETranslator(unsigned int code, EXCEPTION_POINTERS *ep);
+        _set_se_translator(wxSETranslator);
 
-    // note that the SE translator must be called wxSETranslator!
-    #define DisableAutomaticSETranslator() _set_se_translator(wxSETranslator)
+        #pragma warning(pop)
+    }
 #else // !__VISUALC__
-    // the other compilers do nothing as stupid by default so nothing to do for
-    // them
+    // Other compilers do nothing as stupid by default, so do nothing here.
     #define DisableAutomaticSETranslator()
 #endif // __VISUALC__/!__VISUALC__
 

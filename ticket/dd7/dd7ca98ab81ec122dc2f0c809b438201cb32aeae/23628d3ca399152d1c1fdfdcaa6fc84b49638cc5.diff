Index: include/wx/bmpbuttn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/bmpbuttn.h,v
retrieving revision 1.29
diff --unified -r1.29 bmpbuttn.h
--- include/wx/bmpbuttn.h	2006/01/23 03:27:30	1.29
+++ include/wx/bmpbuttn.h	2007/04/16 02:51:08
@@ -39,11 +39,11 @@
     void SetBitmapLabel(const wxBitmap& bitmap)
         { m_bmpNormal = bitmap; OnSetBitmap(); }
     void SetBitmapSelected(const wxBitmap& sel)
-        { m_bmpSelected = sel; OnSetBitmap(); };
+        { m_bmpSelected = sel; OnSetBitmap(); }
     void SetBitmapFocus(const wxBitmap& focus)
-        { m_bmpFocus = focus; OnSetBitmap(); };
+        { m_bmpFocus = focus; OnSetBitmap(); }
     void SetBitmapDisabled(const wxBitmap& disabled)
-        { m_bmpDisabled = disabled; OnSetBitmap(); };
+        { m_bmpDisabled = disabled; OnSetBitmap(); }
     void SetBitmapHover(const wxBitmap& hover)
         { m_bmpHover = hover; OnSetBitmap(); }
 
Index: include/wx/cmndata.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/cmndata.h,v
retrieving revision 1.61
diff --unified -r1.61 cmndata.h
--- include/wx/cmndata.h	2006/11/09 19:46:26	1.61
+++ include/wx/cmndata.h	2007/04/16 02:51:09
@@ -292,39 +292,39 @@
     wxPrintDialogData(const wxPrintData& printData);
     virtual ~wxPrintDialogData();
 
-    int GetFromPage() const { return m_printFromPage; };
-    int GetToPage() const { return m_printToPage; };
-    int GetMinPage() const { return m_printMinPage; };
-    int GetMaxPage() const { return m_printMaxPage; };
-    int GetNoCopies() const { return m_printNoCopies; };
-    bool GetAllPages() const { return m_printAllPages; };
-    bool GetSelection() const { return m_printSelection; };
-    bool GetCollate() const { return m_printCollate; };
-    bool GetPrintToFile() const { return m_printToFile; };
+    int GetFromPage() const { return m_printFromPage; }
+    int GetToPage() const { return m_printToPage; }
+    int GetMinPage() const { return m_printMinPage; }
+    int GetMaxPage() const { return m_printMaxPage; }
+    int GetNoCopies() const { return m_printNoCopies; }
+    bool GetAllPages() const { return m_printAllPages; }
+    bool GetSelection() const { return m_printSelection; }
+    bool GetCollate() const { return m_printCollate; }
+    bool GetPrintToFile() const { return m_printToFile; }
 #if WXWIN_COMPATIBILITY_2_4
-    bool GetSetupDialog() const { return m_printSetupDialog; };
+    bool GetSetupDialog() const { return m_printSetupDialog; }
 #endif
-    void SetFromPage(int v) { m_printFromPage = v; };
-    void SetToPage(int v) { m_printToPage = v; };
-    void SetMinPage(int v) { m_printMinPage = v; };
-    void SetMaxPage(int v) { m_printMaxPage = v; };
-    void SetNoCopies(int v) { m_printNoCopies = v; };
-    void SetAllPages(bool flag) { m_printAllPages = flag; };
-    void SetSelection(bool flag) { m_printSelection = flag; };
-    void SetCollate(bool flag) { m_printCollate = flag; };
-    void SetPrintToFile(bool flag) { m_printToFile = flag; };
+    void SetFromPage(int v) { m_printFromPage = v; }
+    void SetToPage(int v) { m_printToPage = v; }
+    void SetMinPage(int v) { m_printMinPage = v; }
+    void SetMaxPage(int v) { m_printMaxPage = v; }
+    void SetNoCopies(int v) { m_printNoCopies = v; }
+    void SetAllPages(bool flag) { m_printAllPages = flag; }
+    void SetSelection(bool flag) { m_printSelection = flag; }
+    void SetCollate(bool flag) { m_printCollate = flag; }
+    void SetPrintToFile(bool flag) { m_printToFile = flag; }
 #if WXWIN_COMPATIBILITY_2_4
-    void SetSetupDialog(bool flag) { m_printSetupDialog = flag; };
+    void SetSetupDialog(bool flag) { m_printSetupDialog = flag; }
 #endif
-    void EnablePrintToFile(bool flag) { m_printEnablePrintToFile = flag; };
-    void EnableSelection(bool flag) { m_printEnableSelection = flag; };
-    void EnablePageNumbers(bool flag) { m_printEnablePageNumbers = flag; };
-    void EnableHelp(bool flag) { m_printEnableHelp = flag; };
-
-    bool GetEnablePrintToFile() const { return m_printEnablePrintToFile; };
-    bool GetEnableSelection() const { return m_printEnableSelection; };
-    bool GetEnablePageNumbers() const { return m_printEnablePageNumbers; };
-    bool GetEnableHelp() const { return m_printEnableHelp; };
+    void EnablePrintToFile(bool flag) { m_printEnablePrintToFile = flag; }
+    void EnableSelection(bool flag) { m_printEnableSelection = flag; }
+    void EnablePageNumbers(bool flag) { m_printEnablePageNumbers = flag; }
+    void EnableHelp(bool flag) { m_printEnableHelp = flag; }
+
+    bool GetEnablePrintToFile() const { return m_printEnablePrintToFile; }
+    bool GetEnableSelection() const { return m_printEnableSelection; }
+    bool GetEnablePageNumbers() const { return m_printEnablePageNumbers; }
+    bool GetEnableHelp() const { return m_printEnableHelp; }
 
     // Is this data OK for showing the print dialog?
     bool Ok() const { return IsOk(); }
@@ -374,20 +374,20 @@
     wxPageSetupDialogData(const wxPrintData& printData);
     virtual ~wxPageSetupDialogData();
 
-    wxSize GetPaperSize() const { return m_paperSize; };
-    wxPaperSize GetPaperId() const { return m_printData.GetPaperId(); };
-    wxPoint GetMinMarginTopLeft() const { return m_minMarginTopLeft; };
-    wxPoint GetMinMarginBottomRight() const { return m_minMarginBottomRight; };
-    wxPoint GetMarginTopLeft() const { return m_marginTopLeft; };
-    wxPoint GetMarginBottomRight() const { return m_marginBottomRight; };
-
-    bool GetDefaultMinMargins() const { return m_defaultMinMargins; };
-    bool GetEnableMargins() const { return m_enableMargins; };
-    bool GetEnableOrientation() const { return m_enableOrientation; };
-    bool GetEnablePaper() const { return m_enablePaper; };
-    bool GetEnablePrinter() const { return m_enablePrinter; };
-    bool GetDefaultInfo() const { return m_getDefaultInfo; };
-    bool GetEnableHelp() const { return m_enableHelp; };
+    wxSize GetPaperSize() const { return m_paperSize; }
+    wxPaperSize GetPaperId() const { return m_printData.GetPaperId(); }
+    wxPoint GetMinMarginTopLeft() const { return m_minMarginTopLeft; }
+    wxPoint GetMinMarginBottomRight() const { return m_minMarginBottomRight; }
+    wxPoint GetMarginTopLeft() const { return m_marginTopLeft; }
+    wxPoint GetMarginBottomRight() const { return m_marginBottomRight; }
+
+    bool GetDefaultMinMargins() const { return m_defaultMinMargins; }
+    bool GetEnableMargins() const { return m_enableMargins; }
+    bool GetEnableOrientation() const { return m_enableOrientation; }
+    bool GetEnablePaper() const { return m_enablePaper; }
+    bool GetEnablePrinter() const { return m_enablePrinter; }
+    bool GetDefaultInfo() const { return m_getDefaultInfo; }
+    bool GetEnableHelp() const { return m_enableHelp; }
 
     // Is this data OK for showing the page setup dialog?
     bool Ok() const { return IsOk(); }
@@ -397,23 +397,23 @@
     // paper size id member as well.
     void SetPaperSize(const wxSize& sz);
 
-    void SetPaperId(wxPaperSize id) { m_printData.SetPaperId(id); };
+    void SetPaperId(wxPaperSize id) { m_printData.SetPaperId(id); }
 
     // Sets the wxPrintData id, plus the paper width/height if found in the paper database.
     void SetPaperSize(wxPaperSize id);
 
-    void SetMinMarginTopLeft(const wxPoint& pt) { m_minMarginTopLeft = pt; };
-    void SetMinMarginBottomRight(const wxPoint& pt) { m_minMarginBottomRight = pt; };
-    void SetMarginTopLeft(const wxPoint& pt) { m_marginTopLeft = pt; };
-    void SetMarginBottomRight(const wxPoint& pt) { m_marginBottomRight = pt; };
-    void SetDefaultMinMargins(bool flag) { m_defaultMinMargins = flag; };
-    void SetDefaultInfo(bool flag) { m_getDefaultInfo = flag; };
-
-    void EnableMargins(bool flag) { m_enableMargins = flag; };
-    void EnableOrientation(bool flag) { m_enableOrientation = flag; };
-    void EnablePaper(bool flag) { m_enablePaper = flag; };
-    void EnablePrinter(bool flag) { m_enablePrinter = flag; };
-    void EnableHelp(bool flag) { m_enableHelp = flag; };
+    void SetMinMarginTopLeft(const wxPoint& pt) { m_minMarginTopLeft = pt; }
+    void SetMinMarginBottomRight(const wxPoint& pt) { m_minMarginBottomRight = pt; }
+    void SetMarginTopLeft(const wxPoint& pt) { m_marginTopLeft = pt; }
+    void SetMarginBottomRight(const wxPoint& pt) { m_marginBottomRight = pt; }
+    void SetDefaultMinMargins(bool flag) { m_defaultMinMargins = flag; }
+    void SetDefaultInfo(bool flag) { m_getDefaultInfo = flag; }
+
+    void EnableMargins(bool flag) { m_enableMargins = flag; }
+    void EnableOrientation(bool flag) { m_enableOrientation = flag; }
+    void EnablePaper(bool flag) { m_enablePaper = flag; }
+    void EnablePrinter(bool flag) { m_enablePrinter = flag; }
+    void EnableHelp(bool flag) { m_enableHelp = flag; }
 
     // Use paper size defined in this object to set the wxPrintData
     // paper id
Index: include/wx/combo.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/combo.h,v
retrieving revision 1.29
diff --unified -r1.29 combo.h
--- include/wx/combo.h	2006/11/28 23:11:21	1.29
+++ include/wx/combo.h	2007/04/16 02:51:10
@@ -647,7 +647,7 @@
     // variable has been initialized before the call.
     // NOTE: It is not in constructor so the derived class doesn't need to redefine
     //       a default constructor of its own.
-    virtual void Init() { };
+    virtual void Init() { }
 
     virtual ~wxComboPopup();
 
Index: include/wx/db.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/db.h,v
retrieving revision 1.107
diff --unified -r1.107 db.h
--- include/wx/db.h	2006/11/27 13:16:38	1.107
+++ include/wx/db.h	2007/04/16 02:51:11
@@ -326,38 +326,38 @@
         void             FreeHenv();
 
         // Accessors
-        const HENV       &GetHenv()          { return Henv; };
+        const HENV       &GetHenv()          { return Henv; }
 
-        const wxChar    *GetDsn()           { return Dsn; };
+        const wxChar    *GetDsn()           { return Dsn; }
 
-        const wxChar    *GetUid()           { return Uid; };
-        const wxChar    *GetUserID()        { return Uid; };
+        const wxChar    *GetUid()           { return Uid; }
+        const wxChar    *GetUserID()        { return Uid; }
 
-        const wxChar    *GetAuthStr()       { return AuthStr; };
-        const wxChar    *GetPassword()      { return AuthStr; };
+        const wxChar    *GetAuthStr()       { return AuthStr; }
+        const wxChar    *GetPassword()      { return AuthStr; }
 
-        const wxChar    *GetConnectionStr() { return ConnectionStr; };
-        bool             UseConnectionStr() { return useConnectionStr; };
+        const wxChar    *GetConnectionStr() { return ConnectionStr; }
+        bool             UseConnectionStr() { return useConnectionStr; }
 
-        const wxChar    *GetDescription()   { return Description; };
-        const wxChar    *GetFileType()      { return FileType; };
-        const wxChar    *GetDefaultDir()    { return DefaultDir; };
+        const wxChar    *GetDescription()   { return Description; }
+        const wxChar    *GetFileType()      { return FileType; }
+        const wxChar    *GetDefaultDir()    { return DefaultDir; }
 
-        void             SetHenv(const HENV henv)               { Henv = henv; };
+        void             SetHenv(const HENV henv)               { Henv = henv; }
 
         void             SetDsn(const wxString &dsn);
 
         void             SetUserID(const wxString &userID);
-        void             SetUid(const wxString &uid)            { SetUserID(uid); };
+        void             SetUid(const wxString &uid)            { SetUserID(uid); }
 
         void             SetPassword(const wxString &password);
-        void             SetAuthStr(const wxString &authstr)    { SetPassword(authstr); };
+        void             SetAuthStr(const wxString &authstr)    { SetPassword(authstr); }
 
         void             SetConnectionStr(const wxString &connectStr);
 
-        void             SetDescription(const wxString &desc)   { Description   = desc;     };
-        void             SetFileType(const wxString &fileType)  { FileType      = fileType; };
-        void             SetDefaultDir(const wxString &defDir)  { DefaultDir    = defDir;   };
+        void             SetDescription(const wxString &desc)   { Description   = desc;     }
+        void             SetFileType(const wxString &fileType)  { FileType      = fileType; }
+        void             SetDefaultDir(const wxString &defDir)  { DefaultDir    = defDir;   }
 };  // class wxDbConnectInf
 
 
@@ -558,8 +558,8 @@
 
 public:
 
-    void             setCached(bool cached)  { dbIsCached = cached; };  // This function must only be called by wxDbGetConnection() and wxDbCloseConnections!!!
-    bool             IsCached() { return dbIsCached; };
+    void             setCached(bool cached)  { dbIsCached = cached; }  // This function must only be called by wxDbGetConnection() and wxDbCloseConnections!!!
+    bool             IsCached() { return dbIsCached; }
 
     bool             GetDataTypeInfo(SWORD fSqlType, wxDbSqlTypeInfo &structSQLTypeInfo)
                             { return getDataTypeInfo(fSqlType, structSQLTypeInfo); }
Index: include/wx/docview.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/docview.h,v
retrieving revision 1.75
diff --unified -r1.75 docview.h
--- include/wx/docview.h	2007/01/14 16:38:53	1.75
+++ include/wx/docview.h	2007/04/16 02:51:11
@@ -70,10 +70,10 @@
     void SetFilename(const wxString& filename, bool notifyViews = false);
     wxString GetFilename() const { return m_documentFile; }
 
-    void SetTitle(const wxString& title) { m_documentTitle = title; };
+    void SetTitle(const wxString& title) { m_documentTitle = title; }
     wxString GetTitle() const { return m_documentTitle; }
 
-    void SetDocumentName(const wxString& name) { m_documentTypeName = name; };
+    void SetDocumentName(const wxString& name) { m_documentTypeName = name; }
     wxString GetDocumentName() const { return m_documentTypeName; }
 
     bool GetDocumentSaved() const { return m_savedYet; }
@@ -180,7 +180,7 @@
     virtual void SetDocument(wxDocument *doc);
 
     wxString GetViewName() const { return m_viewTypeName; }
-    void SetViewName(const wxString& name) { m_viewTypeName = name; };
+    void SetViewName(const wxString& name) { m_viewTypeName = name; }
 
     wxWindow *GetFrame() const { return m_viewFrame ; }
     void SetFrame(wxWindow *frame) { m_viewFrame = frame; }
@@ -194,7 +194,7 @@
 
     // Called by framework if created automatically by the default document
     // manager class: gives view a chance to initialise
-    virtual bool OnCreate(wxDocument *WXUNUSED(doc), long WXUNUSED(flags)) { return true; };
+    virtual bool OnCreate(wxDocument *WXUNUSED(doc), long WXUNUSED(flags)) { return true; }
 
     // Checks if the view is the last one for the document; if so, asks user
     // to confirm save data (if modified). If ok, deletes itself and returns
@@ -260,21 +260,21 @@
     // creation
     virtual bool InitDocument(wxDocument* doc, const wxString& path, long flags = 0);
 
-    wxString GetDefaultExtension() const { return m_defaultExt; };
+    wxString GetDefaultExtension() const { return m_defaultExt; }
     wxString GetDescription() const { return m_description; }
-    wxString GetDirectory() const { return m_directory; };
+    wxString GetDirectory() const { return m_directory; }
     wxDocManager *GetDocumentManager() const { return m_documentManager; }
     void SetDocumentManager(wxDocManager *manager) { m_documentManager = manager; }
-    wxString GetFileFilter() const { return m_fileFilter; };
-    long GetFlags() const { return m_flags; };
+    wxString GetFileFilter() const { return m_fileFilter; }
+    long GetFlags() const { return m_flags; }
     virtual wxString GetViewName() const { return m_viewTypeName; }
     virtual wxString GetDocumentName() const { return m_docTypeName; }
 
-    void SetFileFilter(const wxString& filter) { m_fileFilter = filter; };
-    void SetDirectory(const wxString& dir) { m_directory = dir; };
-    void SetDescription(const wxString& descr) { m_description = descr; };
-    void SetDefaultExtension(const wxString& ext) { m_defaultExt = ext; };
-    void SetFlags(long flags) { m_flags = flags; };
+    void SetFileFilter(const wxString& filter) { m_fileFilter = filter; }
+    void SetDirectory(const wxString& dir) { m_directory = dir; }
+    void SetDescription(const wxString& descr) { m_description = descr; }
+    void SetDefaultExtension(const wxString& ext) { m_defaultExt = ext; }
+    void SetFlags(long flags) { m_flags = flags; }
 
     bool IsVisible() const { return ((m_flags & wxTEMPLATE_VISIBLE) == wxTEMPLATE_VISIBLE); }
 
Index: include/wx/dynarray.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/dynarray.h,v
retrieving revision 1.92
diff --unified -r1.92 dynarray.h
--- include/wx/dynarray.h	2006/11/24 00:56:22	1.92
+++ include/wx/dynarray.h	2007/04/16 02:51:13
@@ -472,7 +472,7 @@
   const_reverse_iterator rbegin() const;                              \
   reverse_iterator rend() { return reverse_iterator(begin() - 1); }   \
   const_reverse_iterator rend() const;                                \
-  void reserve(size_type n) { base::reserve(n); };                    \
+  void reserve(size_type n) { base::reserve(n); }                     \
   void resize(size_type n, value_type v = value_type())               \
     { base::resize(n, v); }                                           \
 }
Index: include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/event.h,v
retrieving revision 1.262
diff --unified -r1.262 event.h
--- include/wx/event.h	2006/11/05 21:22:10	1.262
+++ include/wx/event.h	2007/04/16 02:51:16
@@ -351,7 +351,7 @@
     // to allow the event processing by the base classes (calling event.Skip()
     // is the analog of calling the base class version of a virtual function)
     void Skip(bool skip = true) { m_skipped = skip; }
-    bool GetSkipped() const { return m_skipped; };
+    bool GetSkipped() const { return m_skipped; }
 
     // this function is used to create a copy of the event polymorphically and
     // all derived classes must implement it because otherwise wxPostEvent()
@@ -1788,7 +1788,7 @@
 
     virtual wxEvent *Clone() const { return new wxMouseCaptureChangedEvent(*this); }
 
-    wxWindow* GetCapturedWindow() const { return m_gainedCapture; };
+    wxWindow* GetCapturedWindow() const { return m_gainedCapture; }
 
 private:
     wxWindow* m_gainedCapture;
Index: include/wx/hash.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/hash.h,v
retrieving revision 1.45
diff --unified -r1.45 hash.h
--- include/wx/hash.h	2006/09/05 20:45:03	1.45
+++ include/wx/hash.h	2007/04/16 02:51:16
@@ -159,7 +159,7 @@
     typedef wxHashTableBase_Node Node;
 
     wxHashTableBase();
-    virtual ~wxHashTableBase() { };
+    virtual ~wxHashTableBase() { }
 
     void Create( wxKeyType keyType = wxKEY_INTEGER,
                  size_t size = wxHASH_SIZE_DEFAULT );
Index: include/wx/hashmap.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/hashmap.h,v
retrieving revision 1.63
diff --unified -r1.63 hashmap.h
--- include/wx/hashmap.h	2006/11/03 21:32:39	1.63
+++ include/wx/hashmap.h	2007/04/16 02:51:17
@@ -271,9 +271,9 @@
     const_iterator end() const { return const_iterator( 0, this ); } \
     iterator end() { return iterator( 0, this ); } \
     const_iterator begin() const \
-        { return const_iterator( (Node*)GetFirstNode( m_tableBuckets, (_wxHashTable_NodeBase**)m_table ), this ); }; \
+        { return const_iterator( (Node*)GetFirstNode( m_tableBuckets, (_wxHashTable_NodeBase**)m_table ), this ); } \
     iterator begin() \
-        { return iterator( (Node*)GetFirstNode( m_tableBuckets, (_wxHashTable_NodeBase**)m_table ), this ); }; \
+        { return iterator( (Node*)GetFirstNode( m_tableBuckets, (_wxHashTable_NodeBase**)m_table ), this ); } \
  \
     size_type erase( const const_key_type& key ) \
     { \
Index: include/wx/helpbase.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/helpbase.h,v
retrieving revision 1.32
diff --unified -r1.32 helpbase.h
--- include/wx/helpbase.h	2005/10/26 09:31:53	1.32
+++ include/wx/helpbase.h	2007/04/16 02:51:17
@@ -57,7 +57,7 @@
     virtual bool DisplaySection(int sectionNo) = 0;
 
     // Display the section using a context id
-    virtual bool DisplayContextPopup(int WXUNUSED(contextId)) { return false; };
+    virtual bool DisplayContextPopup(int WXUNUSED(contextId)) { return false; }
 
     // Display the text in a popup, if possible
     virtual bool DisplayTextPopup(const wxString& WXUNUSED(text), const wxPoint& WXUNUSED(pos)) { return false; }
Index: include/wx/imagbmp.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/imagbmp.h,v
retrieving revision 1.22
diff --unified -r1.22 imagbmp.h
--- include/wx/imagbmp.h	2006/10/30 11:56:11	1.22
+++ include/wx/imagbmp.h	2007/04/16 02:51:17
@@ -56,7 +56,7 @@
         m_extension = _T("bmp");
         m_type = wxBITMAP_TYPE_BMP;
         m_mime = _T("image/x-bmp");
-    };
+    }
 
 #if wxUSE_STREAMS
     virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true );
@@ -90,7 +90,7 @@
         m_extension = _T("ico");
         m_type = wxBITMAP_TYPE_ICO;
         m_mime = _T("image/x-ico");
-    };
+    }
 
 #if wxUSE_STREAMS
     virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true );
@@ -119,7 +119,7 @@
         m_extension = _T("cur");
         m_type = wxBITMAP_TYPE_CUR;
         m_mime = _T("image/x-cur");
-    };
+    }
 
     // VS: This handler's meat is implemented inside wxICOHandler (the two
     //     formats are almost identical), but we hide this fact at
@@ -146,11 +146,11 @@
         m_extension = _T("ani");
         m_type = wxBITMAP_TYPE_ANI;
         m_mime = _T("image/x-ani");
-    };
+    }
 
 
 #if wxUSE_STREAMS
-    virtual bool SaveFile( wxImage *WXUNUSED(image), wxOutputStream& WXUNUSED(stream), bool WXUNUSED(verbose=true) ){return false ;};
+    virtual bool SaveFile( wxImage *WXUNUSED(image), wxOutputStream& WXUNUSED(stream), bool WXUNUSED(verbose=true) ){return false ;}
     virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 );
     virtual int GetImageCount( wxInputStream& stream );
 protected:
Index: include/wx/ipcbase.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/ipcbase.h,v
retrieving revision 1.28
diff --unified -r1.28 ipcbase.h
--- include/wx/ipcbase.h	2006/09/05 20:45:03	1.28
+++ include/wx/ipcbase.h	2007/04/16 02:51:17
@@ -73,28 +73,28 @@
                                wxChar *WXUNUSED(data),
                                int WXUNUSED(size),
                                wxIPCFormat WXUNUSED(format) )
-                             { return false; };
+                             { return false; }
 
   virtual wxChar *OnRequest    ( const wxString& WXUNUSED(topic),
                                const wxString& WXUNUSED(item),
                                int *WXUNUSED(size),
                                wxIPCFormat WXUNUSED(format) )
-                             { return (wxChar *) NULL; };
+                             { return (wxChar *) NULL; }
 
   virtual bool OnPoke        ( const wxString& WXUNUSED(topic),
                                const wxString& WXUNUSED(item),
                                wxChar *WXUNUSED(data),
                                int WXUNUSED(size),
                                wxIPCFormat WXUNUSED(format) )
-                             { return false; };
+                             { return false; }
 
   virtual bool OnStartAdvise ( const wxString& WXUNUSED(topic),
                                const wxString& WXUNUSED(item) )
-                             { return false; };
+                             { return false; }
 
   virtual bool OnStopAdvise  ( const wxString& WXUNUSED(topic),
                                const wxString& WXUNUSED(item) )
-                             { return false; };
+                             { return false; }
 
   // Callbacks to CLIENT - override at will
   virtual bool OnAdvise      ( const wxString& WXUNUSED(topic),
@@ -102,7 +102,7 @@
                                wxChar *WXUNUSED(data),
                                int WXUNUSED(size),
                                wxIPCFormat WXUNUSED(format) )
-                             { return false; };
+                             { return false; }
 
   // Callbacks to BOTH - override at will
   // Default behaviour is to delete connection and return true
Index: include/wx/matrix.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/matrix.h,v
retrieving revision 1.17
diff --unified -r1.17 matrix.h
--- include/wx/matrix.h	2006/06/15 18:14:22	1.17
+++ include/wx/matrix.h	2007/04/16 02:51:18
@@ -94,7 +94,7 @@
     // Is the matrix the identity matrix?
     // Only returns a flag, which is set whenever an operation
     // is done.
-    inline bool IsIdentity(void) const { return m_isIdentity; };
+    inline bool IsIdentity(void) const { return m_isIdentity; }
 
     // This does an actual check.
     inline bool IsIdentity1(void) const ;
Index: include/wx/socket.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/socket.h,v
retrieving revision 1.71
diff --unified -r1.71 socket.h
--- include/wx/socket.h	2006/10/08 21:55:11	1.71
+++ include/wx/socket.h	2007/04/16 02:51:18
@@ -109,11 +109,11 @@
 
   // state
   inline bool Ok() const { return IsOk(); }
-  inline bool IsOk() const { return (m_socket != NULL); };
-  inline bool Error() const { return m_error; };
-  inline bool IsConnected() const { return m_connected; };
-  inline bool IsData() { return WaitForRead(0, 0); };
-  inline bool IsDisconnected() const { return !IsConnected(); };
+  inline bool IsOk() const { return (m_socket != NULL); }
+  inline bool Error() const { return m_error; }
+  inline bool IsConnected() const { return m_connected; }
+  inline bool IsData() { return WaitForRead(0, 0); }
+  inline bool IsDisconnected() const { return !IsConnected(); }
   inline wxUint32 LastCount() const { return m_lcount; }
   inline wxSocketError LastError() const { return (wxSocketError)m_socket->GetError(); }
   void SaveState();
@@ -134,7 +134,7 @@
   wxSocketBase& Write(const void *buffer, wxUint32 nbytes);
   wxSocketBase& WriteMsg(const void *buffer, wxUint32 nbytes);
 
-  void InterruptWait() { m_interrupt = true; };
+  void InterruptWait() { m_interrupt = true; }
   bool Wait(long seconds = -1, long milliseconds = 0);
   bool WaitForRead(long seconds = -1, long milliseconds = 0);
   bool WaitForWrite(long seconds = -1, long milliseconds = 0);
@@ -146,7 +146,7 @@
 
   bool GetOption(int level, int optname, void *optval, int *optlen);
   bool SetOption(int level, int optname, const void *optval, int optlen);
-  inline wxUint32 GetLastIOSize() const { return m_lcount; };
+  inline wxUint32 GetLastIOSize() const { return m_lcount; }
 
   // event handling
   void *GetClientData() const { return m_clientData; }
Index: include/wx/tbarbase.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/tbarbase.h,v
retrieving revision 1.65
diff --unified -r1.65 tbarbase.h
--- include/wx/tbarbase.h	2007/01/21 06:43:59	1.65
+++ include/wx/tbarbase.h	2007/04/16 02:51:19
@@ -402,14 +402,14 @@
     // get/set the size of the bitmaps used by the toolbar: should be called
     // before adding any tools to the toolbar
     virtual void SetToolBitmapSize(const wxSize& size)
-        { m_defaultWidth = size.x; m_defaultHeight = size.y; };
+        { m_defaultWidth = size.x; m_defaultHeight = size.y; }
     virtual wxSize GetToolBitmapSize() const
         { return wxSize(m_defaultWidth, m_defaultHeight); }
 
     // the button size in some implementations is bigger than the bitmap size:
     // get the total button size (by default the same as bitmap size)
     virtual wxSize GetToolSize() const
-        { return GetToolBitmapSize(); } ;
+        { return GetToolBitmapSize(); }
 
     // returns a (non separator) tool containing the point (x, y) or NULL if
     // there is no tool at this point (corrdinates are client)
Index: include/wx/validate.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/validate.h,v
retrieving revision 1.21
diff --unified -r1.21 validate.h
--- include/wx/validate.h	2005/09/23 12:48:50	1.21
+++ include/wx/validate.h	2007/04/16 02:51:19
@@ -50,13 +50,13 @@
 
     // Called when the value in the window must be validated.
     // This function can pop up an error message.
-    virtual bool Validate(wxWindow *WXUNUSED(parent)) { return false; };
+    virtual bool Validate(wxWindow *WXUNUSED(parent)) { return false; }
 
     // Called to transfer data to the window
     virtual bool TransferToWindow() { return false; }
 
     // Called to transfer data from the window
-    virtual bool TransferFromWindow() { return false; };
+    virtual bool TransferFromWindow() { return false; }
 
     // accessors
     wxWindow *GetWindow() const { return (wxWindow *)m_validatorWindow; }
Index: include/wx/vector.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/vector.h,v
retrieving revision 1.13
diff --unified -r1.13 vector.h
--- include/wx/vector.h	2006/02/08 21:44:24	1.13
+++ include/wx/vector.h	2007/04/16 02:51:19
@@ -155,7 +155,7 @@
 #define _WX_DECLARE_VECTOR(obj, cls, exp)\
 class exp cls : public wxVectorBase\
 {\
-    WX_DECLARE_VECTORBASE(obj, cls);\
+    WX_DECLARE_VECTORBASE(obj, cls)\
 public:\
     void push_back(const obj& o)\
     {\
Index: include/wx/window.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/window.h,v
retrieving revision 1.234
diff --unified -r1.234 window.h
--- include/wx/window.h	2006/12/04 11:10:48	1.234
+++ include/wx/window.h	2007/04/16 02:51:20
@@ -1069,7 +1069,7 @@
     void SetAccessible(wxAccessible* accessible) ;
 
     // Returns the accessible object.
-    wxAccessible* GetAccessible() { return m_accessible; };
+    wxAccessible* GetAccessible() { return m_accessible; }
 
     // Returns the accessible object, creating if necessary.
     wxAccessible* GetOrCreateAccessible() ;
Index: include/wx/aui/tabmdi.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/aui/tabmdi.h,v
retrieving revision 1.16
diff --unified -r1.16 tabmdi.h
--- include/wx/aui/tabmdi.h	2007/01/01 19:49:04	1.16
+++ include/wx/aui/tabmdi.h	2007/04/16 02:51:21
@@ -63,7 +63,7 @@
     wxAuiNotebook* GetNotebook() const;
     
 #if wxUSE_MENUS
-    wxMenu* GetWindowMenu() const { return m_pWindowMenu; };
+    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
     void SetWindowMenu(wxMenu* pMenu);
 
     virtual void SetMenuBar(wxMenuBar *pMenuBar);
Index: include/wx/generic/laywin.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/laywin.h,v
retrieving revision 1.29
diff --unified -r1.29 laywin.h
--- include/wx/generic/laywin.h	2006/01/05 23:11:58	1.29
+++ include/wx/generic/laywin.h	2007/04/16 02:51:21
@@ -165,11 +165,11 @@
         const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = wxT("layoutWindow"));
 
 // Accessors
-    inline wxLayoutAlignment GetAlignment() const { return m_alignment; };
-    inline wxLayoutOrientation GetOrientation() const { return m_orientation; };
+    inline wxLayoutAlignment GetAlignment() const { return m_alignment; }
+    inline wxLayoutOrientation GetOrientation() const { return m_orientation; }
 
-    inline void SetAlignment(wxLayoutAlignment align) { m_alignment = align; };
-    inline void SetOrientation(wxLayoutOrientation orient) { m_orientation = orient; };
+    inline void SetAlignment(wxLayoutAlignment align) { m_alignment = align; }
+    inline void SetOrientation(wxLayoutOrientation orient) { m_orientation = orient; }
 
     // Give the window default dimensions
     inline void SetDefaultSize(const wxSize& size) { m_defaultSize = size; }
Index: include/wx/generic/splitter.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/splitter.h,v
retrieving revision 1.55
diff --unified -r1.55 splitter.h
--- include/wx/generic/splitter.h	2007/01/01 19:48:58	1.55
+++ include/wx/generic/splitter.h	2007/04/16 02:51:21
@@ -97,7 +97,7 @@
     }
 
     // Gets the split mode
-    wxSplitMode GetSplitMode() const { return m_splitMode; };
+    wxSplitMode GetSplitMode() const { return m_splitMode; }
 
     // Initialize with one window
     void Initialize(wxWindow *window);
Index: include/wx/html/helpdlg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/helpdlg.h,v
retrieving revision 1.5
diff --unified -r1.5 helpdlg.h
--- include/wx/html/helpdlg.h	2006/09/05 20:45:45	1.5
+++ include/wx/html/helpdlg.h	2007/04/16 02:51:22
@@ -66,7 +66,7 @@
     void SetTitleFormat(const wxString& format);
 
     // Override to add custom buttons to the toolbar
-    virtual void AddToolbarButtons(wxToolBar* WXUNUSED(toolBar), int WXUNUSED(style)) {};
+    virtual void AddToolbarButtons(wxToolBar* WXUNUSED(toolBar), int WXUNUSED(style)) {}
 
 protected:
     void Init(wxHtmlHelpData* data = NULL);
Index: include/wx/html/helpfrm.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/helpfrm.h,v
retrieving revision 1.52
diff --unified -r1.52 helpfrm.h
--- include/wx/html/helpfrm.h	2006/10/24 01:16:18	1.52
+++ include/wx/html/helpfrm.h	2007/04/16 02:51:22
@@ -105,7 +105,7 @@
     void AddGrabIfNeeded();
 
     // Override to add custom buttons to the toolbar
-    virtual void AddToolbarButtons(wxToolBar* WXUNUSED(toolBar), int WXUNUSED(style)) {};
+    virtual void AddToolbarButtons(wxToolBar* WXUNUSED(toolBar), int WXUNUSED(style)) {}
 
     // we don't want to prevent the app from closing just because a help window
     // remains opened
Index: include/wx/html/winpars.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/winpars.h,v
retrieving revision 1.36
diff --unified -r1.36 winpars.h
--- include/wx/html/winpars.h	2006/09/05 20:45:46	1.36
+++ include/wx/html/winpars.h	2007/04/16 02:51:22
@@ -230,7 +230,7 @@
 public:
     wxHtmlWinTagHandler() : wxHtmlTagHandler() {}
 
-    virtual void SetParser(wxHtmlParser *parser) {wxHtmlTagHandler::SetParser(parser); m_WParser = (wxHtmlWinParser*) parser;};
+    virtual void SetParser(wxHtmlParser *parser) {wxHtmlTagHandler::SetParser(parser); m_WParser = (wxHtmlWinParser*) parser;}
 
 protected:
     wxHtmlWinParser *m_WParser; // same as m_Parser, but overcasted
Index: include/wx/msw/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/colour.h,v
retrieving revision 1.29
diff --unified -r1.29 colour.h
--- include/wx/msw/colour.h	2006/10/08 21:56:02	1.29
+++ include/wx/msw/colour.h	2007/04/16 02:51:23
@@ -56,7 +56,7 @@
 
     bool operator != (const wxColour& colour) const { return !(*this == colour); }
 
-    WXCOLORREF GetPixel() const { return m_pixel; };
+    WXCOLORREF GetPixel() const { return m_pixel; }
 
 
 public:
Index: include/wx/msw/control.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/control.h,v
retrieving revision 1.55
diff --unified -r1.55 control.h
--- include/wx/msw/control.h	2006/09/04 13:34:59	1.55
+++ include/wx/msw/control.h	2007/04/16 02:51:23
@@ -59,8 +59,8 @@
     virtual bool MSWOnNotify(int idCtrl, WXLPARAM lParam, WXLPARAM *result);
 
     // For ownerdraw items
-    virtual bool MSWOnDraw(WXDRAWITEMSTRUCT *WXUNUSED(item)) { return false; };
-    virtual bool MSWOnMeasure(WXMEASUREITEMSTRUCT *WXUNUSED(item)) { return false; };
+    virtual bool MSWOnDraw(WXDRAWITEMSTRUCT *WXUNUSED(item)) { return false; }
+    virtual bool MSWOnMeasure(WXMEASUREITEMSTRUCT *WXUNUSED(item)) { return false; }
 
     const wxArrayLong& GetSubcontrols() const { return m_subControls; }
 
Index: include/wx/msw/frame.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/frame.h,v
retrieving revision 1.79
diff --unified -r1.79 frame.h
--- include/wx/msw/frame.h	2006/05/07 01:14:50	1.79
+++ include/wx/msw/frame.h	2007/04/16 02:51:23
@@ -70,9 +70,9 @@
 
     // TODO: should this go into a wxFrameworkSettings class perhaps?
     static void UseNativeStatusBar(bool useNative)
-        { m_useNativeStatusBar = useNative; };
+        { m_useNativeStatusBar = useNative; }
     static bool UsesNativeStatusBar()
-        { return m_useNativeStatusBar; };
+        { return m_useNativeStatusBar; }
 #endif // wxUSE_STATUSBAR
 
 #if wxUSE_MENUS
Index: include/wx/msw/mdi.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/mdi.h,v
retrieving revision 1.40
diff --unified -r1.40 mdi.h
--- include/wx/msw/mdi.h	2007/01/07 16:42:00	1.40
+++ include/wx/msw/mdi.h	2007/04/16 02:51:23
@@ -62,7 +62,7 @@
     virtual wxMDIClientWindow *OnCreateClient(void);
 
     // MDI windows menu
-    wxMenu* GetWindowMenu() const { return m_windowMenu; };
+    wxMenu* GetWindowMenu() const { return m_windowMenu; }
     void SetWindowMenu(wxMenu* menu) ;
     virtual void DoMenuUpdates(wxMenu* menu = NULL);
 
Index: include/wx/msw/pen.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/pen.h,v
retrieving revision 1.31
diff --unified -r1.31 pen.h
--- include/wx/msw/pen.h	2006/10/30 22:03:31	1.31
+++ include/wx/msw/pen.h	2007/04/16 02:51:23
@@ -103,20 +103,20 @@
     void SetJoin(int join);
     void SetCap(int cap);
 
-    wxColour& GetColour() const { return (M_PENDATA ? M_PENDATA->m_colour : wxNullColour); };
-    int GetWidth() const { return (M_PENDATA ? M_PENDATA->m_width : 0); };
-    int GetStyle() const { return (M_PENDATA ? M_PENDATA->m_style : 0); };
-    int GetJoin() const { return (M_PENDATA ? M_PENDATA->m_join : 0); };
-    int GetCap() const { return (M_PENDATA ? M_PENDATA->m_cap : 0); };
+    wxColour& GetColour() const { return (M_PENDATA ? M_PENDATA->m_colour : wxNullColour); }
+    int GetWidth() const { return (M_PENDATA ? M_PENDATA->m_width : 0); }
+    int GetStyle() const { return (M_PENDATA ? M_PENDATA->m_style : 0); }
+    int GetJoin() const { return (M_PENDATA ? M_PENDATA->m_join : 0); }
+    int GetCap() const { return (M_PENDATA ? M_PENDATA->m_cap : 0); }
     int GetDashes(wxDash **ptr) const
     {
         *ptr = (M_PENDATA ? (wxDash*)M_PENDATA->m_dash : (wxDash*) NULL);
         return (M_PENDATA ? M_PENDATA->m_nbDash : 0);
     }
-    wxDash* GetDash() const { return (M_PENDATA ? (wxDash*)M_PENDATA->m_dash : (wxDash*)NULL); };
-    inline int GetDashCount() const { return (M_PENDATA ? M_PENDATA->m_nbDash : 0); };
+    wxDash* GetDash() const { return (M_PENDATA ? (wxDash*)M_PENDATA->m_dash : (wxDash*)NULL); }
+    inline int GetDashCount() const { return (M_PENDATA ? M_PENDATA->m_nbDash : 0); }
 
-    inline wxBitmap *GetStipple() const { return (M_PENDATA ? (& M_PENDATA->m_stipple) : (wxBitmap*) NULL); };
+    inline wxBitmap *GetStipple() const { return (M_PENDATA ? (& M_PENDATA->m_stipple) : (wxBitmap*) NULL); }
 
     // Internal
     bool RealizeResource();
Index: include/wx/msw/window.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/window.h,v
retrieving revision 1.170
diff --unified -r1.170 window.h
--- include/wx/msw/window.h	2006/10/09 16:39:10	1.170
+++ include/wx/msw/window.h	2007/04/16 02:51:24
@@ -193,7 +193,7 @@
     wxWindow *FindItemByHWND(WXHWND hWnd, bool controlOnly = false) const;
 
     // MSW only: true if this control is part of the main control
-    virtual bool ContainsHWND(WXHWND WXUNUSED(hWnd)) const { return false; };
+    virtual bool ContainsHWND(WXHWND WXUNUSED(hWnd)) const { return false; }
 
 #if wxUSE_TOOLTIPS
     // MSW only: true if this window or any of its children have a tooltip
Index: include/wx/msw/ole/automtn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/ole/automtn.h,v
retrieving revision 1.14
diff --unified -r1.14 automtn.h
--- include/wx/msw/ole/automtn.h	2006/09/24 13:12:47	1.14
+++ include/wx/msw/ole/automtn.h	2007/04/16 02:51:24
@@ -38,7 +38,7 @@
     virtual ~wxAutomationObject();
 
     // Set/get dispatch pointer
-    inline void SetDispatchPtr(WXIDISPATCH* dispatchPtr) { m_dispatchPtr = dispatchPtr; };
+    inline void SetDispatchPtr(WXIDISPATCH* dispatchPtr) { m_dispatchPtr = dispatchPtr; }
     inline WXIDISPATCH* GetDispatchPtr() const { return m_dispatchPtr; }
 
     // Get a dispatch pointer from the current object associated
Index: include/wx/protocol/ftp.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/protocol/ftp.h,v
retrieving revision 1.23
diff --unified -r1.23 ftp.h
--- include/wx/protocol/ftp.h	2005/09/24 21:42:27	1.23
+++ include/wx/protocol/ftp.h	2007/04/16 02:51:25
@@ -47,7 +47,7 @@
     // Parameters set up
 
     // set transfer mode now
-    void SetPassive(bool pasv) { m_bPassive = pasv; };
+    void SetPassive(bool pasv) { m_bPassive = pasv; }
     void SetDefaultTimeout(wxUint32 Value);
     bool SetBinary() { return SetTransferMode(BINARY); }
     bool SetAscii() { return SetTransferMode(ASCII); }
Index: src/common/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/image.cpp,v
retrieving revision 1.239.4.1
diff --unified -r1.239.4.1 image.cpp
--- src/common/image.cpp	2007/03/16 00:23:07	1.239.4.1
+++ src/common/image.cpp	2007/04/16 02:51:28
@@ -3099,8 +3099,8 @@
 DECLARE_DYNAMIC_CLASS(wxImageModule)
 public:
     wxImageModule() {}
-    bool OnInit() { wxImage::InitStandardHandlers(); return true; };
-    void OnExit() { wxImage::CleanUpHandlers(); };
+    bool OnInit() { wxImage::InitStandardHandlers(); return true; }
+    void OnExit() { wxImage::CleanUpHandlers(); }
 };
 
 IMPLEMENT_DYNAMIC_CLASS(wxImageModule, wxModule)
Index: src/common/variant.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/variant.cpp,v
retrieving revision 1.94
diff --unified -r1.94 variant.cpp
--- src/common/variant.cpp	2006/10/02 07:09:20	1.94
+++ src/common/variant.cpp	2007/04/16 02:51:29
@@ -226,7 +226,7 @@
     virtual bool Write(wxOutputStream &str) const;
 #endif // wxUSE_STREAMS
 
-    virtual wxString GetType() const { return wxT("long"); };
+    virtual wxString GetType() const { return wxT("long"); }
 
 protected:
     long m_value;
@@ -377,7 +377,7 @@
     virtual bool Read(wxInputStream& str);
     virtual bool Write(wxOutputStream &str) const;
 #endif // wxUSE_STREAMS
-    virtual wxString GetType() const { return wxT("double"); };
+    virtual wxString GetType() const { return wxT("double"); }
 
 protected:
     double m_value;
@@ -517,7 +517,7 @@
     virtual bool Read(wxInputStream& str);
     virtual bool Write(wxOutputStream& str) const;
 #endif // wxUSE_STREAMS
-    virtual wxString GetType() const { return wxT("bool"); };
+    virtual wxString GetType() const { return wxT("bool"); }
 
 protected:
     bool m_value;
@@ -658,7 +658,7 @@
     virtual bool Read(wxInputStream& str);
     virtual bool Write(wxOutputStream& str) const;
 #endif // wxUSE_STREAMS
-    virtual wxString GetType() const { return wxT("char"); };
+    virtual wxString GetType() const { return wxT("char"); }
 
 protected:
     wxChar m_value;
@@ -793,13 +793,13 @@
     virtual bool Read(wxString& str);
     virtual bool Write(wxString& str) const;
 #if wxUSE_STD_IOSTREAM
-    virtual bool Read(wxSTD istream& WXUNUSED(str)) { return false; };
+    virtual bool Read(wxSTD istream& WXUNUSED(str)) { return false; }
 #endif
 #if wxUSE_STREAMS
     virtual bool Read(wxInputStream& str);
     virtual bool Write(wxOutputStream& str) const;
 #endif // wxUSE_STREAMS
-    virtual wxString GetType() const { return wxT("string"); };
+    virtual wxString GetType() const { return wxT("string"); }
 
 protected:
     wxString m_value;
@@ -1066,7 +1066,7 @@
     virtual bool Read(wxSTD istream& str);
 #endif
     virtual bool Read(wxString& str);
-    virtual wxString GetType() const { return wxT("void*"); };
+    virtual wxString GetType() const { return wxT("void*"); }
     virtual wxVariantData* Clone() { return new wxVariantDataVoidPtr; }
 
 protected:
@@ -1190,7 +1190,7 @@
     virtual bool Read(wxSTD istream& str);
 #endif
     virtual bool Read(wxString& str);
-    virtual wxString GetType() const { return wxT("datetime"); };
+    virtual wxString GetType() const { return wxT("datetime"); }
     virtual wxVariantData* Clone() { return new wxVariantDataDateTime; }
 
 protected:
@@ -1356,7 +1356,7 @@
     virtual bool Read(wxSTD istream& str);
 #endif
     virtual bool Read(wxString& str);
-    virtual wxString GetType() const { return wxT("arrstring"); };
+    virtual wxString GetType() const { return wxT("arrstring"); }
     virtual wxVariantData* Clone() { return new wxVariantDataArrayString; }
 
 protected:
@@ -1485,7 +1485,7 @@
     virtual bool Read(wxSTD istream& str);
 #endif
     virtual bool Read(wxString& str);
-    virtual wxString GetType() const { return wxT("list"); };
+    virtual wxString GetType() const { return wxT("list"); }
 
     void Clear();
 
Index: src/generic/animateg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/animateg.cpp,v
retrieving revision 1.18
diff --unified -r1.18 animateg.cpp
--- src/generic/animateg.cpp	2006/12/10 14:18:28	1.18
+++ src/generic/animateg.cpp	2007/04/16 02:51:30
@@ -254,8 +254,8 @@
 DECLARE_DYNAMIC_CLASS(wxAnimationModule)
 public:
     wxAnimationModule() {}
-    bool OnInit() { wxAnimation::InitStandardHandlers(); return true; };
-    void OnExit() { wxAnimation::CleanUpHandlers(); };
+    bool OnInit() { wxAnimation::InitStandardHandlers(); return true; }
+    void OnExit() { wxAnimation::CleanUpHandlers(); }
 };
 
 IMPLEMENT_DYNAMIC_CLASS(wxAnimationModule, wxModule)
Index: src/generic/datavgen.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/datavgen.cpp,v
retrieving revision 1.44
diff --unified -r1.44 datavgen.cpp
--- src/generic/datavgen.cpp	2007/01/07 20:13:16	1.44
+++ src/generic/datavgen.cpp	2007/04/16 02:51:31
@@ -176,7 +176,7 @@
     bool HasCurrentRow() { return m_currentRow != (unsigned int)-1; }
     void ChangeCurrentRow( unsigned int row );
 
-    bool IsSingleSel() const { return !GetParent()->HasFlag(wxDV_MULTIPLE); };
+    bool IsSingleSel() const { return !GetParent()->HasFlag(wxDV_MULTIPLE); }
     bool IsEmpty() { return GetRowCount() == 0; }
 
     int GetCountPerPage();
Index: src/generic/renderg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/renderg.cpp,v
retrieving revision 1.47
diff --unified -r1.47 renderg.cpp
--- src/generic/renderg.cpp	2006/11/30 23:44:47	1.47
+++ src/generic/renderg.cpp	2007/04/16 02:51:32
@@ -671,8 +671,8 @@
 DECLARE_DYNAMIC_CLASS(wxGenericRendererModule)
 public:
     wxGenericRendererModule() {}
-    bool OnInit() { return true; };
-    void OnExit() { wxRendererGeneric::Cleanup(); };
+    bool OnInit() { return true; }
+    void OnExit() { wxRendererGeneric::Cleanup(); }
 };
 
 IMPLEMENT_DYNAMIC_CLASS(wxGenericRendererModule, wxModule)
Index: src/msw/dc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/dc.cpp,v
retrieving revision 1.215
diff --unified -r1.215 dc.cpp
--- src/msw/dc.cpp	2006/11/19 13:31:15	1.215
+++ src/msw/dc.cpp	2007/04/16 02:51:35
@@ -209,7 +209,7 @@
     wxOnceOnlyDLLLoader(const wxChar *dllName)
         : m_dllName(dllName)
     {
-    };
+    }
 
 
     // return the symbol with the given name or NULL if the DLL not loaded
Index: src/msw/listctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/listctrl.cpp,v
retrieving revision 1.272.2.1
diff --unified -r1.272.2.1 listctrl.cpp
--- src/msw/listctrl.cpp	2007/04/13 23:38:28	1.272.2.1
+++ src/msw/listctrl.cpp	2007/04/16 02:51:37
@@ -205,7 +205,7 @@
    {
        if (attr)
            delete attr;
-   };
+   }
 
     DECLARE_NO_COPY_CLASS(wxListItemInternalData)
 };
Index: src/msw/mediactrl_qt.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/mediactrl_qt.cpp,v
retrieving revision 1.1
diff --unified -r1.1 mediactrl_qt.cpp
--- src/msw/mediactrl_qt.cpp	2006/11/06 01:11:48	1.1
+++ src/msw/mediactrl_qt.cpp	2007/04/16 02:51:38
@@ -205,94 +205,94 @@
     bool m_ok;
 
 public:
-    wxDL_VOIDMETHOD_DEFINE( StartMovie, (Movie m), (m) );
-    wxDL_VOIDMETHOD_DEFINE( StopMovie, (Movie m), (m) );
-    wxDL_METHOD_DEFINE( bool, IsMovieDone, (Movie m), (m), false);
-    wxDL_VOIDMETHOD_DEFINE( GoToBeginningOfMovie, (Movie m), (m) );
-    wxDL_METHOD_DEFINE( OSErr, GetMoviesError, (), (), -1);
-    wxDL_METHOD_DEFINE( OSErr, EnterMovies, (), (), -1);
-    wxDL_VOIDMETHOD_DEFINE( ExitMovies, (), () );
-    wxDL_METHOD_DEFINE( OSErr, InitializeQTML, (long flags), (flags), -1);
-    wxDL_VOIDMETHOD_DEFINE( TerminateQTML, (), () );
+    wxDL_VOIDMETHOD_DEFINE( StartMovie, (Movie m), (m) )
+    wxDL_VOIDMETHOD_DEFINE( StopMovie, (Movie m), (m) )
+    wxDL_METHOD_DEFINE( bool, IsMovieDone, (Movie m), (m), false)
+    wxDL_VOIDMETHOD_DEFINE( GoToBeginningOfMovie, (Movie m), (m) )
+    wxDL_METHOD_DEFINE( OSErr, GetMoviesError, (), (), -1)
+    wxDL_METHOD_DEFINE( OSErr, EnterMovies, (), (), -1)
+    wxDL_VOIDMETHOD_DEFINE( ExitMovies, (), () )
+    wxDL_METHOD_DEFINE( OSErr, InitializeQTML, (long flags), (flags), -1)
+    wxDL_VOIDMETHOD_DEFINE( TerminateQTML, (), () )
 
     wxDL_METHOD_DEFINE( OSErr, NativePathNameToFSSpec,
                         (char* inName, FSSpec* outFile, long flags),
-                        (inName, outFile, flags), -1);
+                        (inName, outFile, flags), -1)
 
     wxDL_METHOD_DEFINE( OSErr, OpenMovieFile,
                         (const FSSpec * fileSpec, short * resRefNum, wxInt8 permission),
-                        (fileSpec, resRefNum, permission), -1 );
+                        (fileSpec, resRefNum, permission), -1 )
 
     wxDL_METHOD_DEFINE( OSErr, CloseMovieFile,
-                        (short resRefNum), (resRefNum), -1);
+                        (short resRefNum), (resRefNum), -1)
 
     wxDL_METHOD_DEFINE( OSErr, NewMovieFromFile,
                             (Movie * theMovie, short resRefNum, short *  resId,
                              StringPtr resName, short newMovieFlags,
                              bool * dataRefWasChanged),
                              (theMovie, resRefNum, resId, resName, newMovieFlags,
-                              dataRefWasChanged), -1);
+                              dataRefWasChanged), -1)
 
-    wxDL_VOIDMETHOD_DEFINE( SetMovieRate, (Movie m, Fixed rate), (m, rate) );
-    wxDL_METHOD_DEFINE( Fixed, GetMovieRate, (Movie m), (m), 0);
-    wxDL_VOIDMETHOD_DEFINE( MoviesTask, (Movie m, long maxms), (m, maxms) );
+    wxDL_VOIDMETHOD_DEFINE( SetMovieRate, (Movie m, Fixed rate), (m, rate) )
+    wxDL_METHOD_DEFINE( Fixed, GetMovieRate, (Movie m), (m), 0)
+    wxDL_VOIDMETHOD_DEFINE( MoviesTask, (Movie m, long maxms), (m, maxms) )
     wxDL_VOIDMETHOD_DEFINE( BlockMove,
-        (const char* p1, const char* p2, long s), (p1,p2,s) );
-    wxDL_METHOD_DEFINE( Handle, NewHandleClear, (long s), (s), NULL );
+        (const char* p1, const char* p2, long s), (p1,p2,s) )
+    wxDL_METHOD_DEFINE( Handle, NewHandleClear, (long s), (s), NULL )
 
     wxDL_METHOD_DEFINE( OSErr, NewMovieFromDataRef,
                            (Movie * m, short flags, short * id,
                             Handle  dataRef, OSType  dataRefType),
-                            (m,flags,id,dataRef,dataRefType), -1 );
+                            (m,flags,id,dataRef,dataRefType), -1 )
 
-    wxDL_VOIDMETHOD_DEFINE( DisposeHandle, (Handle h), (h) );
-    wxDL_VOIDMETHOD_DEFINE( GetMovieNaturalBoundsRect, (Movie m, Rect* r), (m,r) );
+    wxDL_VOIDMETHOD_DEFINE( DisposeHandle, (Handle h), (h) )
+    wxDL_VOIDMETHOD_DEFINE( GetMovieNaturalBoundsRect, (Movie m, Rect* r), (m,r) )
     wxDL_METHOD_DEFINE( void*, GetMovieIndTrackType,
                         (Movie m, long index, OSType type, long flags),
-                        (m,index,type,flags), NULL );
+                        (m,index,type,flags), NULL )
     wxDL_VOIDMETHOD_DEFINE( CreatePortAssociation,
-            (void* hWnd, void* junk, long morejunk), (hWnd, junk, morejunk) );
-    wxDL_METHOD_DEFINE(void*, GetNativeWindowPort, (void* hWnd), (hWnd), NULL);
+            (void* hWnd, void* junk, long morejunk), (hWnd, junk, morejunk) )
+    wxDL_METHOD_DEFINE(void*, GetNativeWindowPort, (void* hWnd), (hWnd), NULL)
     wxDL_VOIDMETHOD_DEFINE(SetMovieGWorld, (Movie m, CGrafPtr port, void* whatever),
-                            (m, port, whatever) );
-    wxDL_VOIDMETHOD_DEFINE(DisposeMovie, (Movie m), (m) );
-    wxDL_VOIDMETHOD_DEFINE(SetMovieBox, (Movie m, Rect* r), (m,r));
-    wxDL_VOIDMETHOD_DEFINE(SetMovieTimeScale, (Movie m, long s), (m,s));
-    wxDL_METHOD_DEFINE(long, GetMovieDuration, (Movie m), (m), 0);
-    wxDL_METHOD_DEFINE(TimeBase, GetMovieTimeBase, (Movie m), (m), 0);
-    wxDL_METHOD_DEFINE(TimeScale, GetMovieTimeScale, (Movie m), (m), 0);
-    wxDL_METHOD_DEFINE(long, GetMovieTime, (Movie m, void* cruft), (m,cruft), 0);
-    wxDL_VOIDMETHOD_DEFINE(SetMovieTime, (Movie m, TimeRecord* tr), (m,tr) );
-    wxDL_METHOD_DEFINE(short, GetMovieVolume, (Movie m), (m), 0);
-    wxDL_VOIDMETHOD_DEFINE(SetMovieVolume, (Movie m, short sVolume), (m,sVolume) );
-    wxDL_VOIDMETHOD_DEFINE(SetMovieTimeValue, (Movie m, long s), (m,s));
-    wxDL_METHOD_DEFINE(ComponentInstance, NewMovieController, (Movie m, const Rect* mr, long fl), (m,mr,fl), 0);
-    wxDL_VOIDMETHOD_DEFINE(DisposeMovieController, (ComponentInstance ci), (ci));
-    wxDL_METHOD_DEFINE(int, MCSetVisible, (ComponentInstance m, int b), (m, b), 0);
-
-    wxDL_VOIDMETHOD_DEFINE(PrePrerollMovie, (Movie m, long t, Fixed r, WXFARPROC p1, void* p2), (m,t,r,p1,p2) );
-    wxDL_VOIDMETHOD_DEFINE(PrerollMovie, (Movie m, long t, Fixed r), (m,t,r) );
-    wxDL_METHOD_DEFINE(Fixed, GetMoviePreferredRate, (Movie m), (m), 0);
-    wxDL_METHOD_DEFINE(long, GetMovieLoadState, (Movie m), (m), 0);
-    wxDL_METHOD_DEFINE(void*, NewRoutineDescriptor, (WXFARPROC f, int l, void* junk), (f, l, junk), 0);
-    wxDL_VOIDMETHOD_DEFINE(DisposeRoutineDescriptor, (void* f), (f));
-    wxDL_METHOD_DEFINE(void*, GetCurrentArchitecture, (), (), 0);
-    wxDL_METHOD_DEFINE(int, MCDoAction, (ComponentInstance ci, long f, void* p), (ci,f,p), 0);
-    wxDL_VOIDMETHOD_DEFINE(MCSetControllerBoundsRect, (ComponentInstance ci, Rect* r), (ci,r));
-    wxDL_VOIDMETHOD_DEFINE(DestroyPortAssociation, (CGrafPtr g), (g));
-    wxDL_VOIDMETHOD_DEFINE(NativeEventToMacEvent, (MSG* p1, EventRecord* p2), (p1,p2));
-    wxDL_VOIDMETHOD_DEFINE(MCIsPlayerEvent, (ComponentInstance ci, EventRecord* p2), (ci, p2));
+                            (m, port, whatever) )
+    wxDL_VOIDMETHOD_DEFINE(DisposeMovie, (Movie m), (m) )
+    wxDL_VOIDMETHOD_DEFINE(SetMovieBox, (Movie m, Rect* r), (m,r))
+    wxDL_VOIDMETHOD_DEFINE(SetMovieTimeScale, (Movie m, long s), (m,s))
+    wxDL_METHOD_DEFINE(long, GetMovieDuration, (Movie m), (m), 0)
+    wxDL_METHOD_DEFINE(TimeBase, GetMovieTimeBase, (Movie m), (m), 0)
+    wxDL_METHOD_DEFINE(TimeScale, GetMovieTimeScale, (Movie m), (m), 0)
+    wxDL_METHOD_DEFINE(long, GetMovieTime, (Movie m, void* cruft), (m,cruft), 0)
+    wxDL_VOIDMETHOD_DEFINE(SetMovieTime, (Movie m, TimeRecord* tr), (m,tr) )
+    wxDL_METHOD_DEFINE(short, GetMovieVolume, (Movie m), (m), 0)
+    wxDL_VOIDMETHOD_DEFINE(SetMovieVolume, (Movie m, short sVolume), (m,sVolume) )
+    wxDL_VOIDMETHOD_DEFINE(SetMovieTimeValue, (Movie m, long s), (m,s))
+    wxDL_METHOD_DEFINE(ComponentInstance, NewMovieController, (Movie m, const Rect* mr, long fl), (m,mr,fl), 0)
+    wxDL_VOIDMETHOD_DEFINE(DisposeMovieController, (ComponentInstance ci), (ci))
+    wxDL_METHOD_DEFINE(int, MCSetVisible, (ComponentInstance m, int b), (m, b), 0)
+
+    wxDL_VOIDMETHOD_DEFINE(PrePrerollMovie, (Movie m, long t, Fixed r, WXFARPROC p1, void* p2), (m,t,r,p1,p2) )
+    wxDL_VOIDMETHOD_DEFINE(PrerollMovie, (Movie m, long t, Fixed r), (m,t,r) )
+    wxDL_METHOD_DEFINE(Fixed, GetMoviePreferredRate, (Movie m), (m), 0)
+    wxDL_METHOD_DEFINE(long, GetMovieLoadState, (Movie m), (m), 0)
+    wxDL_METHOD_DEFINE(void*, NewRoutineDescriptor, (WXFARPROC f, int l, void* junk), (f, l, junk), 0)
+    wxDL_VOIDMETHOD_DEFINE(DisposeRoutineDescriptor, (void* f), (f))
+    wxDL_METHOD_DEFINE(void*, GetCurrentArchitecture, (), (), 0)
+    wxDL_METHOD_DEFINE(int, MCDoAction, (ComponentInstance ci, long f, void* p), (ci,f,p), 0)
+    wxDL_VOIDMETHOD_DEFINE(MCSetControllerBoundsRect, (ComponentInstance ci, Rect* r), (ci,r))
+    wxDL_VOIDMETHOD_DEFINE(DestroyPortAssociation, (CGrafPtr g), (g))
+    wxDL_VOIDMETHOD_DEFINE(NativeEventToMacEvent, (MSG* p1, EventRecord* p2), (p1,p2))
+    wxDL_VOIDMETHOD_DEFINE(MCIsPlayerEvent, (ComponentInstance ci, EventRecord* p2), (ci, p2))
     wxDL_METHOD_DEFINE(int, MCSetMovie, (ComponentInstance ci, Movie m, void* p1, Point w),
-                          (ci,m,p1,w),0);
+                          (ci,m,p1,w),0)
     wxDL_VOIDMETHOD_DEFINE(MCPositionController,
-        (ComponentInstance ci, Rect* r, void* junk, void* morejunk), (ci,r,junk,morejunk));
+        (ComponentInstance ci, Rect* r, void* junk, void* morejunk), (ci,r,junk,morejunk))
     wxDL_VOIDMETHOD_DEFINE(MCSetActionFilterWithRefCon,
-        (ComponentInstance ci, WXFARPROC cb, void* ref), (ci,cb,ref));
-    wxDL_VOIDMETHOD_DEFINE(MCGetControllerInfo, (MovieController mc, long* flags), (mc,flags));
-    wxDL_VOIDMETHOD_DEFINE(BeginUpdate, (CGrafPtr port), (port));
-    wxDL_VOIDMETHOD_DEFINE(UpdateMovie, (Movie m), (m));
-    wxDL_VOIDMETHOD_DEFINE(EndUpdate, (CGrafPtr port), (port));
-    wxDL_METHOD_DEFINE( OSErr, GetMoviesStickyError, (), (), -1);
+        (ComponentInstance ci, WXFARPROC cb, void* ref), (ci,cb,ref))
+    wxDL_VOIDMETHOD_DEFINE(MCGetControllerInfo, (MovieController mc, long* flags), (mc,flags))
+    wxDL_VOIDMETHOD_DEFINE(BeginUpdate, (CGrafPtr port), (port))
+    wxDL_VOIDMETHOD_DEFINE(UpdateMovie, (Movie m), (m))
+    wxDL_VOIDMETHOD_DEFINE(EndUpdate, (CGrafPtr port), (port))
+    wxDL_METHOD_DEFINE( OSErr, GetMoviesStickyError, (), (), -1)
 };
 
 bool wxQuickTimeLibrary::Initialize()
Index: src/msw/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/window.cpp,v
retrieving revision 1.730.2.3
diff --unified -r1.730.2.3 window.cpp
--- src/msw/window.cpp	2007/03/23 16:23:01	1.730.2.3
+++ src/msw/window.cpp	2007/04/16 02:51:44
@@ -6605,7 +6605,7 @@
         }
 
         return CallNextHookEx(ms_hMsgHookProc, nCode, wParam, lParam);
-    };
+    }
 
 private:
     static HHOOK ms_hMsgHookProc;
Index: src/richtext/richtextbuffer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/richtext/richtextbuffer.cpp,v
retrieving revision 1.72.2.8
diff --unified -r1.72.2.8 richtextbuffer.cpp
--- src/richtext/richtextbuffer.cpp	2007/03/11 12:48:38	1.72.2.8
+++ src/richtext/richtextbuffer.cpp	2007/04/16 02:51:51
@@ -5903,7 +5903,7 @@
         wxRichTextBuffer::InitStandardHandlers();
         wxRichTextParagraph::InitDefaultTabs();
         return true;
-    };
+    }
     void OnExit()
     {
         wxRichTextBuffer::CleanUpHandlers();
@@ -5911,7 +5911,7 @@
         wxRichTextParagraph::ClearDefaultTabs();
         wxRichTextCtrl::ClearAvailableFontNames();
         wxRichTextBuffer::SetRenderer(NULL);
-    };
+    }
 };
 
 IMPLEMENT_DYNAMIC_CLASS(wxRichTextModule, wxModule)
Index: src/richtext/richtextformatdlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/richtext/richtextformatdlg.cpp,v
retrieving revision 1.11
diff --unified -r1.11 richtextformatdlg.cpp
--- src/richtext/richtextformatdlg.cpp	2006/11/08 14:05:47	1.11
+++ src/richtext/richtextformatdlg.cpp	2007/04/16 02:51:52
@@ -380,8 +380,8 @@
 DECLARE_DYNAMIC_CLASS(wxRichTextFormattingDialogModule)
 public:
     wxRichTextFormattingDialogModule() {}
-    bool OnInit() { wxRichTextFormattingDialog::SetFormattingDialogFactory(new wxRichTextFormattingDialogFactory); return true; };
-    void OnExit() { wxRichTextFormattingDialog::SetFormattingDialogFactory(NULL); };
+    bool OnInit() { wxRichTextFormattingDialog::SetFormattingDialogFactory(new wxRichTextFormattingDialogFactory); return true; }
+    void OnExit() { wxRichTextFormattingDialog::SetFormattingDialogFactory(NULL); }
 };
 
 IMPLEMENT_DYNAMIC_CLASS(wxRichTextFormattingDialogModule, wxModule)

 	  	 

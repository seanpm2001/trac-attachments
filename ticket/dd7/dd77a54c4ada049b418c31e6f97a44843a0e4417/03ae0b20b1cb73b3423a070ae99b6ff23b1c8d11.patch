Index: samples/stc/defsext.h
===================================================================
--- samples/stc/defsext.h	(revision 53094)
+++ samples/stc/defsext.h	(working copy)
@@ -73,6 +73,7 @@
     myID_PAGEPREV,
     myID_PAGENEXT,
     myID_SELECTLINE,
+    myID_WINDOW_MINIMAL,
 
     // other IDs
     myID_STATUSBAR,
@@ -93,9 +94,6 @@
 // global items
 // ----------------------------------------------------------------------------
 
-//! global application name
-extern wxString *g_appname;
-
 #if wxUSE_PRINTING_ARCHITECTURE
 
 //! global print data, to remember settings during the session
Index: samples/stc/edit.cpp
===================================================================
--- samples/stc/edit.cpp	(revision 53094)
+++ samples/stc/edit.cpp	(working copy)
@@ -58,330 +58,324 @@
 // Edit
 //----------------------------------------------------------------------------
 
-BEGIN_EVENT_TABLE (Edit, wxStyledTextCtrl)
+BEGIN_EVENT_TABLE(Edit, wxStyledTextCtrl)
     // common
-    EVT_SIZE (                         Edit::OnSize)
+    EVT_SIZE(                         Edit::OnSize)
     // edit
-    EVT_MENU (wxID_CLEAR,              Edit::OnEditClear)
-    EVT_MENU (wxID_CUT,                Edit::OnEditCut)
-    EVT_MENU (wxID_COPY,               Edit::OnEditCopy)
-    EVT_MENU (wxID_PASTE,              Edit::OnEditPaste)
-    EVT_MENU (myID_INDENTINC,          Edit::OnEditIndentInc)
-    EVT_MENU (myID_INDENTRED,          Edit::OnEditIndentRed)
-    EVT_MENU (wxID_SELECTALL,          Edit::OnEditSelectAll)
-    EVT_MENU (myID_SELECTLINE,         Edit::OnEditSelectLine)
-    EVT_MENU (wxID_REDO,               Edit::OnEditRedo)
-    EVT_MENU (wxID_UNDO,               Edit::OnEditUndo)
+    EVT_MENU(myID_INDENTINC,          Edit::OnEditIndentInc)
+    EVT_MENU(myID_INDENTRED,          Edit::OnEditIndentRed)
+    EVT_MENU(myID_SELECTLINE,         Edit::OnEditSelectLine)
     // find
-    EVT_MENU (wxID_FIND,               Edit::OnFind)
-    EVT_MENU (myID_FINDNEXT,           Edit::OnFindNext)
-    EVT_MENU (myID_REPLACE,            Edit::OnReplace)
-    EVT_MENU (myID_REPLACENEXT,        Edit::OnReplaceNext)
-    EVT_MENU (myID_BRACEMATCH,         Edit::OnBraceMatch)
-    EVT_MENU (myID_GOTO,               Edit::OnGoto)
+    EVT_MENU(wxID_FIND,               Edit::OnFind)
+    EVT_MENU(myID_FINDNEXT,           Edit::OnFindNext)
+    EVT_MENU(myID_REPLACE,            Edit::OnReplace)
+    EVT_MENU(myID_REPLACENEXT,        Edit::OnReplaceNext)
+    EVT_MENU(myID_BRACEMATCH,         Edit::OnBraceMatch)
+    EVT_MENU(myID_GOTO,               Edit::OnGoto)
     // view
     EVT_MENU_RANGE (myID_HILIGHTFIRST, myID_HILIGHTLAST,
                                        Edit::OnHilightLang)
-    EVT_MENU (myID_DISPLAYEOL,         Edit::OnDisplayEOL)
-    EVT_MENU (myID_INDENTGUIDE,        Edit::OnIndentGuide)
-    EVT_MENU (myID_LINENUMBER,         Edit::OnLineNumber)
-    EVT_MENU (myID_LONGLINEON,         Edit::OnLongLineOn)
-    EVT_MENU (myID_WHITESPACE,         Edit::OnWhiteSpace)
-    EVT_MENU (myID_FOLDTOGGLE,         Edit::OnFoldToggle)
-    EVT_MENU (myID_OVERTYPE,           Edit::OnSetOverType)
-    EVT_MENU (myID_READONLY,           Edit::OnSetReadOnly)
-    EVT_MENU (myID_WRAPMODEON,         Edit::OnWrapmodeOn)
-    EVT_MENU (myID_CHARSETANSI,        Edit::OnUseCharset)
-    EVT_MENU (myID_CHARSETMAC,         Edit::OnUseCharset)
+    EVT_MENU(myID_DISPLAYEOL,         Edit::OnDisplayEOL)
+    EVT_MENU(myID_INDENTGUIDE,        Edit::OnIndentGuide)
+    EVT_MENU(myID_LINENUMBER,         Edit::OnLineNumber)
+    EVT_MENU(myID_LONGLINEON,         Edit::OnLongLineOn)
+    EVT_MENU(myID_WHITESPACE,         Edit::OnWhiteSpace)
+    EVT_MENU(myID_FOLDTOGGLE,         Edit::OnFoldToggle)
+    EVT_MENU(myID_OVERTYPE,           Edit::OnSetOverType)
+    EVT_MENU(myID_READONLY,           Edit::OnSetReadOnly)
+    EVT_MENU(myID_WRAPMODEON,         Edit::OnWrapmodeOn)
+    EVT_MENU(myID_CHARSETANSI,        Edit::OnUseCharset)
+    EVT_MENU(myID_CHARSETMAC,         Edit::OnUseCharset)
     // extra
-    EVT_MENU (myID_CHANGELOWER,        Edit::OnChangeCase)
-    EVT_MENU (myID_CHANGEUPPER,        Edit::OnChangeCase)
-    EVT_MENU (myID_CONVERTCR,          Edit::OnConvertEOL)
-    EVT_MENU (myID_CONVERTCRLF,        Edit::OnConvertEOL)
-    EVT_MENU (myID_CONVERTLF,          Edit::OnConvertEOL)
+    EVT_MENU(myID_CHANGELOWER,        Edit::OnChangeCase)
+    EVT_MENU(myID_CHANGEUPPER,        Edit::OnChangeCase)
+    EVT_MENU(myID_CONVERTCR,          Edit::OnConvertEOL)
+    EVT_MENU(myID_CONVERTCRLF,        Edit::OnConvertEOL)
+    EVT_MENU(myID_CONVERTLF,          Edit::OnConvertEOL)
     // stc
-    EVT_STC_MARGINCLICK (wxID_ANY,     Edit::OnMarginClick)
-    EVT_STC_CHARADDED (wxID_ANY,       Edit::OnCharAdded)
+    EVT_STC_MARGINCLICK(wxID_ANY,     Edit::OnMarginClick)
+    EVT_STC_CHARADDED(wxID_ANY,       Edit::OnCharAdded)
 END_EVENT_TABLE()
 
-Edit::Edit (wxWindow *parent, wxWindowID id,
+Edit::Edit(wxWindow *parent, wxWindowID id,
             const wxPoint &pos,
             const wxSize &size,
             long style)
-    : wxStyledTextCtrl (parent, id, pos, size, style) {
-
+    : wxStyledTextCtrl(parent, id, pos, size, style)
+{
     m_filename = wxEmptyString;
 
-    m_LineNrID = 0;
-    m_DividerID = 1;
-    m_FoldingID = 2;
-
     // initialize language
     m_language = NULL;
 
     // default font for all styles
-    SetViewEOL (g_CommonPrefs.displayEOLEnable);
-    SetIndentationGuides (g_CommonPrefs.indentGuideEnable);
-    SetEdgeMode (g_CommonPrefs.longLineOnEnable?
-                 wxSTC_EDGE_LINE: wxSTC_EDGE_NONE);
-    SetViewWhiteSpace (g_CommonPrefs.whiteSpaceEnable?
+    SetViewEOL(g_CommonPrefs.displayEOLEnable);
+    SetIndentationGuides(g_CommonPrefs.indentGuideEnable);
+    SetEdgeMode(g_CommonPrefs.longLineOnEnable ? wxSTC_EDGE_LINE: wxSTC_EDGE_NONE);
+    SetViewWhiteSpace(g_CommonPrefs.whiteSpaceEnable?
                        wxSTC_WS_VISIBLEALWAYS: wxSTC_WS_INVISIBLE);
-    SetOvertype (g_CommonPrefs.overTypeInitial);
-    SetReadOnly (g_CommonPrefs.readOnlyInitial);
-    SetWrapMode (g_CommonPrefs.wrapModeInitial?
-                 wxSTC_WRAP_WORD: wxSTC_WRAP_NONE);
-    wxFont font (10, wxMODERN, wxNORMAL, wxNORMAL);
-    StyleSetFont (wxSTC_STYLE_DEFAULT, font);
-    StyleSetForeground (wxSTC_STYLE_DEFAULT, *wxBLACK);
-    StyleSetBackground (wxSTC_STYLE_DEFAULT, *wxWHITE);
-    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (_T("DARK GREY")));
-    StyleSetBackground (wxSTC_STYLE_LINENUMBER, *wxWHITE);
-    StyleSetForeground(wxSTC_STYLE_INDENTGUIDE, wxColour (_T("DARK GREY")));
-    InitializePrefs (DEFAULT_LANGUAGE);
+    SetOvertype(g_CommonPrefs.overTypeInitial);
+    SetReadOnly(g_CommonPrefs.readOnlyInitial);
+    SetWrapMode(g_CommonPrefs.wrapModeInitial? wxSTC_WRAP_WORD: wxSTC_WRAP_NONE);
+    wxFont font(10, wxMODERN, wxNORMAL, wxNORMAL);
+    StyleSetFont(wxSTC_STYLE_DEFAULT, font);
+    StyleSetForeground(wxSTC_STYLE_DEFAULT, *wxBLACK);
+    StyleSetBackground(wxSTC_STYLE_DEFAULT, *wxWHITE);
+    StyleSetForeground(wxSTC_STYLE_LINENUMBER, wxColour(wxT("DARK GREY")));
+    StyleSetBackground(wxSTC_STYLE_LINENUMBER, *wxWHITE);
+    StyleSetForeground(wxSTC_STYLE_INDENTGUIDE, wxColour(wxT("DARK GREY")));
+    InitializePrefs(DEFAULT_LANGUAGE);
 
     // set visibility
-    SetVisiblePolicy (wxSTC_VISIBLE_STRICT|wxSTC_VISIBLE_SLOP, 1);
-    SetXCaretPolicy (wxSTC_CARET_EVEN|wxSTC_VISIBLE_STRICT|wxSTC_CARET_SLOP, 1);
-    SetYCaretPolicy (wxSTC_CARET_EVEN|wxSTC_VISIBLE_STRICT|wxSTC_CARET_SLOP, 1);
+    SetVisiblePolicy(wxSTC_VISIBLE_STRICT|wxSTC_VISIBLE_SLOP, 1);
+    SetXCaretPolicy(wxSTC_CARET_EVEN|wxSTC_VISIBLE_STRICT|wxSTC_CARET_SLOP, 1);
+    SetYCaretPolicy(wxSTC_CARET_EVEN|wxSTC_VISIBLE_STRICT|wxSTC_CARET_SLOP, 1);
 
     // markers
-    MarkerDefine (wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_DOTDOTDOT, _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN, _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_DOTDOTDOT, _T("BLACK"), _T("WHITE"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN, _T("BLACK"), _T("WHITE"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_BOXPLUS, wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_BOXMINUS,  wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_VLINE,     wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_BOXPLUSCONNECTED, wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_BOXMINUSCONNECTED, wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_TCORNER,     wxT("WHITE"), wxT("BLACK"));
+    MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_LCORNER,     wxT("WHITE"), wxT("BLACK"));
 
     // miscelaneous
-    m_LineNrMargin = TextWidth (wxSTC_STYLE_LINENUMBER, _T("_999999"));
+    m_LineNrMargin = TextWidth(wxSTC_STYLE_LINENUMBER, wxT("_999999"));
     m_FoldingMargin = 16;
-    CmdKeyClear (wxSTC_KEY_TAB, 0); // this is done by the menu accelerator key
-    SetLayoutCache (wxSTC_CACHE_PAGE);
+    CmdKeyClear(wxSTC_KEY_TAB, 0); // this is done by the menu accelerator key
+    SetLayoutCache(wxSTC_CACHE_PAGE);
+}
 
+Edit::~Edit()
+{
 }
 
-Edit::~Edit () {}
-
 //----------------------------------------------------------------------------
 // common event handlers
-void Edit::OnSize( wxSizeEvent& event ) {
-    int x = GetClientSize().x +
+void Edit::OnSize( wxSizeEvent& event )
+{
+    const int x = GetClientSize().x +
             (g_CommonPrefs.lineNumberEnable? m_LineNrMargin: 0) +
             (g_CommonPrefs.foldEnable? m_FoldingMargin: 0);
-    if (x > 0) SetScrollWidth (x);
+    if (x > 0) SetScrollWidth(x);
     event.Skip();
 }
 
 // edit event handlers
-void Edit::OnEditRedo (wxCommandEvent &WXUNUSED(event)) {
-    if (!CanRedo()) return;
-    Redo ();
+void Edit::OnFind(wxCommandEvent& WXUNUSED(event))
+{
 }
 
-void Edit::OnEditUndo (wxCommandEvent &WXUNUSED(event)) {
-    if (!CanUndo()) return;
-    Undo ();
+void Edit::OnFindNext(wxCommandEvent& WXUNUSED(event))
+{
 }
 
-void Edit::OnEditClear (wxCommandEvent &WXUNUSED(event)) {
-    if (GetReadOnly()) return;
-    Clear ();
+void Edit::OnReplace(wxCommandEvent& WXUNUSED(event))
+{
 }
 
-void Edit::OnEditCut (wxCommandEvent &WXUNUSED(event)) {
-    if (GetReadOnly() || (GetSelectionEnd()-GetSelectionStart() <= 0)) return;
-    Cut ();
+void Edit::OnReplaceNext(wxCommandEvent& WXUNUSED(event))
+{
 }
 
-void Edit::OnEditCopy (wxCommandEvent &WXUNUSED(event)) {
-    if (GetSelectionEnd()-GetSelectionStart() <= 0) return;
-    Copy ();
-}
-
-void Edit::OnEditPaste (wxCommandEvent &WXUNUSED(event)) {
-    if (!CanPaste()) return;
-    Paste ();
-}
-
-void Edit::OnFind (wxCommandEvent &WXUNUSED(event)) {
-}
-
-void Edit::OnFindNext (wxCommandEvent &WXUNUSED(event)) {
-}
-
-void Edit::OnReplace (wxCommandEvent &WXUNUSED(event)) {
-}
-
-void Edit::OnReplaceNext (wxCommandEvent &WXUNUSED(event)) {
-}
-
-void Edit::OnBraceMatch (wxCommandEvent &WXUNUSED(event)) {
-    int min = GetCurrentPos ();
-    int max = BraceMatch (min);
-    if (max > (min+1)) {
-        BraceHighlight (min+1, max);
-        SetSelection (min+1, max);
-    }else{
-        BraceBadLight (min);
+void Edit::OnBraceMatch(wxCommandEvent& WXUNUSED(event))
+{
+    int min = GetCurrentPos();
+    int max = BraceMatch(min);
+    if (max > (min+1))
+    {
+        BraceHighlight(min+1, max);
+        SetSelection(min+1, max);
     }
+    else
+    {
+        BraceBadLight(min);
+    }
 }
 
-void Edit::OnGoto (wxCommandEvent &WXUNUSED(event)) {
+void Edit::OnGoto(wxCommandEvent& WXUNUSED(event))
+{
 }
 
-void Edit::OnEditIndentInc (wxCommandEvent &WXUNUSED(event)) {
-    CmdKeyExecute (wxSTC_CMD_TAB);
+void Edit::OnEditIndentInc(wxCommandEvent& WXUNUSED(event))
+{
+    CmdKeyExecute(wxSTC_CMD_TAB);
 }
 
-void Edit::OnEditIndentRed (wxCommandEvent &WXUNUSED(event)) {
-    CmdKeyExecute (wxSTC_CMD_DELETEBACK);
+void Edit::OnEditIndentRed(wxCommandEvent& WXUNUSED(event))
+{
+    CmdKeyExecute(wxSTC_CMD_DELETEBACK);
 }
 
-void Edit::OnEditSelectAll (wxCommandEvent &WXUNUSED(event)) {
-    SetSelection (0, GetTextLength ());
+void Edit::OnEditSelectAll(wxCommandEvent& WXUNUSED(event))
+{
+    SetSelection(0, GetTextLength());
 }
 
-void Edit::OnEditSelectLine (wxCommandEvent &WXUNUSED(event)) {
-    int lineStart = PositionFromLine (GetCurrentLine());
-    int lineEnd = PositionFromLine (GetCurrentLine() + 1);
-    SetSelection (lineStart, lineEnd);
+void Edit::OnEditSelectLine(wxCommandEvent& WXUNUSED(event))
+{
+    int lineStart = PositionFromLine(GetCurrentLine());
+    int lineEnd = PositionFromLine(GetCurrentLine() + 1);
+    SetSelection(lineStart, lineEnd);
 }
 
-void Edit::OnHilightLang (wxCommandEvent &event) {
-    InitializePrefs (g_LanguagePrefs [event.GetId() - myID_HILIGHTFIRST].name);
+void Edit::OnHilightLang(wxCommandEvent& event)
+{
+    InitializePrefs(g_LanguagePrefs[event.GetId() - myID_HILIGHTFIRST].name);
 }
 
-void Edit::OnDisplayEOL (wxCommandEvent &WXUNUSED(event)) {
-    SetViewEOL (!GetViewEOL());
+void Edit::OnDisplayEOL(wxCommandEvent& WXUNUSED(event))
+{
+    SetViewEOL(!GetViewEOL());
 }
 
-void Edit::OnIndentGuide (wxCommandEvent &WXUNUSED(event)) {
-    SetIndentationGuides (!GetIndentationGuides());
+void Edit::OnIndentGuide(wxCommandEvent& WXUNUSED(event))
+{
+    SetIndentationGuides(!GetIndentationGuides());
 }
 
-void Edit::OnLineNumber (wxCommandEvent &WXUNUSED(event)) {
-    SetMarginWidth (m_LineNrID,
-                    GetMarginWidth (m_LineNrID) == 0? m_LineNrMargin: 0);
+void Edit::OnLineNumber(wxCommandEvent& WXUNUSED(event))
+{
+    SetMarginWidth(margin_id_line,
+                    (GetMarginWidth(margin_id_line) == 0) ? m_LineNrMargin : 0);
 }
 
-void Edit::OnLongLineOn (wxCommandEvent &WXUNUSED(event)) {
-    SetEdgeMode (GetEdgeMode() == 0? wxSTC_EDGE_LINE: wxSTC_EDGE_NONE);
+void Edit::OnLongLineOn(wxCommandEvent& WXUNUSED(event))
+{
+    SetEdgeMode( (GetEdgeMode() == 0) ? wxSTC_EDGE_LINE : wxSTC_EDGE_NONE);
 }
 
-void Edit::OnWhiteSpace (wxCommandEvent &WXUNUSED(event)) {
-    SetViewWhiteSpace (GetViewWhiteSpace() == 0?
-                       wxSTC_WS_VISIBLEALWAYS: wxSTC_WS_INVISIBLE);
+void Edit::OnWhiteSpace(wxCommandEvent& WXUNUSED(event))
+{
+    SetViewWhiteSpace( (GetViewWhiteSpace() == 0) ? wxSTC_WS_VISIBLEALWAYS : wxSTC_WS_INVISIBLE);
 }
 
-void Edit::OnFoldToggle (wxCommandEvent &WXUNUSED(event)) {
-    ToggleFold (GetFoldParent(GetCurrentLine()));
+void Edit::OnFoldToggle(wxCommandEvent& WXUNUSED(event))
+{
+    ToggleFold(GetFoldParent(GetCurrentLine()));
 }
 
-void Edit::OnSetOverType (wxCommandEvent &WXUNUSED(event)) {
-    SetOvertype (!GetOvertype());
+void Edit::OnSetOverType(wxCommandEvent& WXUNUSED(event))
+{
+    SetOvertype(!GetOvertype());
 }
 
-void Edit::OnSetReadOnly (wxCommandEvent &WXUNUSED(event)) {
-    SetReadOnly (!GetReadOnly());
+void Edit::OnSetReadOnly(wxCommandEvent& WXUNUSED(event))
+{
+    SetReadOnly(!GetReadOnly());
 }
 
-void Edit::OnWrapmodeOn (wxCommandEvent &WXUNUSED(event)) {
-    SetWrapMode (GetWrapMode() == 0? wxSTC_WRAP_WORD: wxSTC_WRAP_NONE);
+void Edit::OnWrapmodeOn(wxCommandEvent& WXUNUSED(event))
+{
+    SetWrapMode( (GetWrapMode() == 0) ? wxSTC_WRAP_WORD : wxSTC_WRAP_NONE);
 }
 
-void Edit::OnUseCharset (wxCommandEvent &event) {
+void Edit::OnUseCharset(wxCommandEvent& event)
+{
     int Nr;
     int charset = GetCodePage();
-    switch (event.GetId()) {
-        case myID_CHARSETANSI: {charset = wxSTC_CHARSET_ANSI; break;}
-        case myID_CHARSETMAC: {charset = wxSTC_CHARSET_ANSI; break;}
+    switch (event.GetId())
+    {
+        case myID_CHARSETANSI: charset = wxSTC_CHARSET_ANSI; break;
+        case myID_CHARSETMAC:  charset = wxSTC_CHARSET_ANSI; break;
     }
-    for (Nr = 0; Nr < wxSTC_STYLE_LASTPREDEFINED; Nr++) {
-        StyleSetCharacterSet (Nr, charset);
+    for (Nr = 0; Nr < wxSTC_STYLE_LASTPREDEFINED; Nr++)
+    {
+        StyleSetCharacterSet(Nr, charset);
     }
-    SetCodePage (charset);
+    SetCodePage(charset);
 }
 
-void Edit::OnChangeCase (wxCommandEvent &event) {
-    switch (event.GetId()) {
-        case myID_CHANGELOWER: {
-            CmdKeyExecute (wxSTC_CMD_LOWERCASE);
+void Edit::OnChangeCase(wxCommandEvent& event)
+{
+    switch (event.GetId())
+    {
+        case myID_CHANGELOWER:
+            CmdKeyExecute(wxSTC_CMD_LOWERCASE);
             break;
-        }
-        case myID_CHANGEUPPER: {
-            CmdKeyExecute (wxSTC_CMD_UPPERCASE);
+        case myID_CHANGEUPPER:
+            CmdKeyExecute(wxSTC_CMD_UPPERCASE);
             break;
-        }
     }
 }
 
-void Edit::OnConvertEOL (wxCommandEvent &event) {
+void Edit::OnConvertEOL(wxCommandEvent& event)
+{
     int eolMode = GetEOLMode();
-    switch (event.GetId()) {
-        case myID_CONVERTCR: { eolMode = wxSTC_EOL_CR; break;}
-        case myID_CONVERTCRLF: { eolMode = wxSTC_EOL_CRLF; break;}
-        case myID_CONVERTLF: { eolMode = wxSTC_EOL_LF; break;}
+    switch (event.GetId())
+    {
+        case myID_CONVERTCR:   eolMode = wxSTC_EOL_CR; break;
+        case myID_CONVERTCRLF: eolMode = wxSTC_EOL_CRLF; break;
+        case myID_CONVERTLF:   eolMode = wxSTC_EOL_LF; break;
     }
-    ConvertEOLs (eolMode);
-    SetEOLMode (eolMode);
+    ConvertEOLs(eolMode);
+    SetEOLMode(eolMode);
 }
 
 //! misc
-void Edit::OnMarginClick (wxStyledTextEvent &event) {
-    if (event.GetMargin() == 2) {
-        int lineClick = LineFromPosition (event.GetPosition());
-        int levelClick = GetFoldLevel (lineClick);
-        if ((levelClick & wxSTC_FOLDLEVELHEADERFLAG) > 0) {
-            ToggleFold (lineClick);
+void Edit::OnMarginClick(wxStyledTextEvent &event)
+{
+    if (event.GetMargin() == margin_id_fold)
+    {
+        int lineClick = LineFromPosition(event.GetPosition());
+        int levelClick = GetFoldLevel(lineClick);
+        if ((levelClick & wxSTC_FOLDLEVELHEADERFLAG) > 0)
+        {
+            ToggleFold(lineClick);
         }
     }
 }
 
-void Edit::OnCharAdded (wxStyledTextEvent &event) {
+void Edit::OnCharAdded(wxStyledTextEvent &event)
+{
     char chr = (char)event.GetKey();
     int currentLine = GetCurrentLine();
     // Change this if support for mac files with \r is needed
-    if (chr == '\n') {
+    if (chr == '\n')
+    {
         int lineInd = 0;
-        if (currentLine > 0) {
+        if (currentLine > 0)
+        {
             lineInd = GetLineIndentation(currentLine - 1);
         }
         if (lineInd == 0) return;
-        SetLineIndentation (currentLine, lineInd);
-        GotoPos(PositionFromLine (currentLine) + lineInd);
+        SetLineIndentation(currentLine, lineInd);
+        GotoPos(PositionFromLine(currentLine) + lineInd);
     }
 }
 
-
 //----------------------------------------------------------------------------
 // private functions
-wxString Edit::DeterminePrefs (const wxString &filename) {
-
+wxString Edit::DeterminePrefs(const wxString &filename) const
+{
     LanguageInfo const* curInfo;
 
     // determine language from filepatterns
     int languageNr;
-    for (languageNr = 0; languageNr < g_LanguagePrefsSize; languageNr++) {
+    for (languageNr = 0; languageNr < g_LanguagePrefsSize; languageNr++)
+    {
         curInfo = &g_LanguagePrefs [languageNr];
         wxString filepattern = curInfo->filepattern;
         filepattern.Lower();
-        while (!filepattern.empty()) {
-            wxString cur = filepattern.BeforeFirst (';');
+        while (!filepattern.empty())
+        {
+            wxString cur = filepattern.BeforeFirst(';');
             if ((cur == filename) ||
-                (cur == (filename.BeforeLast ('.') + _T(".*"))) ||
-                (cur == (_T("*.") + filename.AfterLast ('.')))) {
+                (cur == (filename.BeforeLast('.') + wxT(".*"))) ||
+                (cur == (wxT("*.") + filename.AfterLast('.'))))
+            {
                 return curInfo->name;
             }
-            filepattern = filepattern.AfterFirst (';');
+            filepattern = filepattern.AfterFirst(';');
         }
     }
     return wxEmptyString;
 
 }
 
-bool Edit::InitializePrefs (const wxString &name) {
-
+bool Edit::InitializePrefs(const wxString &name)
+{
     // initialize styles
     StyleClearAll();
     LanguageInfo const* curInfo = NULL;
@@ -389,9 +383,11 @@
     // determine language
     bool found = false;
     int languageNr;
-    for (languageNr = 0; languageNr < g_LanguagePrefsSize; languageNr++) {
+    for (languageNr = 0; languageNr < g_LanguagePrefsSize; languageNr++)
+    {
         curInfo = &g_LanguagePrefs [languageNr];
-        if (curInfo->name == name) {
+        if (curInfo->name == name)
+        {
             found = true;
             break;
         }
@@ -399,141 +395,148 @@
     if (!found) return false;
 
     // set lexer and language
-    SetLexer (curInfo->lexer);
+    SetLexer(curInfo->lexer);
     m_language = curInfo;
 
     // set margin for line numbers
-    SetMarginType (m_LineNrID, wxSTC_MARGIN_NUMBER);
-    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (_T("DARK GREY")));
-    StyleSetBackground (wxSTC_STYLE_LINENUMBER, *wxWHITE);
-    SetMarginWidth (m_LineNrID, 0); // start out not visible
+    SetMarginType(margin_id_line, wxSTC_MARGIN_NUMBER);
+    StyleSetForeground(wxSTC_STYLE_LINENUMBER, wxColour(wxT("DARK GREY")));
+    StyleSetBackground(wxSTC_STYLE_LINENUMBER, *wxWHITE);
+    SetMarginWidth(margin_id_line, 0); // start out not visible
 
     // default fonts for all styles!
     int Nr;
-    for (Nr = 0; Nr < wxSTC_STYLE_LASTPREDEFINED; Nr++) {
-        wxFont font (10, wxMODERN, wxNORMAL, wxNORMAL);
+    for (Nr = 0; Nr < wxSTC_STYLE_LASTPREDEFINED; Nr++)
+    {
+        wxFont font(10, wxMODERN, wxNORMAL, wxNORMAL);
         StyleSetFont (Nr, font);
     }
 
     // set common styles
-    StyleSetForeground (wxSTC_STYLE_DEFAULT, wxColour (_T("DARK GREY")));
-    StyleSetForeground (wxSTC_STYLE_INDENTGUIDE, wxColour (_T("DARK GREY")));
+    StyleSetForeground(wxSTC_STYLE_DEFAULT, wxColour(wxT("DARK GREY")));
+    StyleSetForeground(wxSTC_STYLE_INDENTGUIDE, wxColour(wxT("DARK GREY")));
 
     // initialize settings
-    if (g_CommonPrefs.syntaxEnable) {
+    if (g_CommonPrefs.syntaxEnable)
+    {
         int keywordnr = 0;
-        for (Nr = 0; Nr < STYLE_TYPES_COUNT; Nr++) {
+        for (Nr = 0; Nr < STYLE_TYPES_COUNT; Nr++)
+        {
             if (curInfo->styles[Nr].type == -1) continue;
             const StyleInfo &curType = g_StylePrefs [curInfo->styles[Nr].type];
-            wxFont font (curType.fontsize, wxMODERN, wxNORMAL, wxNORMAL, false,
-                         curType.fontname);
-            StyleSetFont (Nr, font);
-            if (curType.foreground) {
-                StyleSetForeground (Nr, wxColour (curType.foreground));
+            wxFont font(curType.fontsize, wxMODERN, wxNORMAL, wxNORMAL, false,
+                        curType.fontname);
+            StyleSetFont(Nr, font);
+            if (curType.foreground)
+            {
+                StyleSetForeground(Nr, wxColour(curType.foreground));
             }
-            if (curType.background) {
-                StyleSetBackground (Nr, wxColour (curType.background));
+            if (curType.background)
+            {
+                StyleSetBackground(Nr, wxColour(curType.background));
             }
-            StyleSetBold (Nr, (curType.fontstyle & mySTC_STYLE_BOLD) > 0);
-            StyleSetItalic (Nr, (curType.fontstyle & mySTC_STYLE_ITALIC) > 0);
-            StyleSetUnderline (Nr, (curType.fontstyle & mySTC_STYLE_UNDERL) > 0);
-            StyleSetVisible (Nr, (curType.fontstyle & mySTC_STYLE_HIDDEN) == 0);
-            StyleSetCase (Nr, curType.lettercase);
+            StyleSetBold(Nr, (curType.fontstyle & mySTC_STYLE_BOLD) > 0);
+            StyleSetItalic(Nr, (curType.fontstyle & mySTC_STYLE_ITALIC) > 0);
+            StyleSetUnderline(Nr, (curType.fontstyle & mySTC_STYLE_UNDERL) > 0);
+            StyleSetVisible(Nr, (curType.fontstyle & mySTC_STYLE_HIDDEN) == 0);
+            StyleSetCase(Nr, curType.lettercase);
             const char *pwords = curInfo->styles[Nr].words;
-            if (pwords) {
-                SetKeyWords (keywordnr, pwords);
+            if (pwords)
+            {
+                SetKeyWords(keywordnr, pwords);
                 keywordnr += 1;
             }
         }
     }
 
     // set margin as unused
-    SetMarginType (m_DividerID, wxSTC_MARGIN_SYMBOL);
-    SetMarginWidth (m_DividerID, 0);
-    SetMarginSensitive (m_DividerID, false);
+    SetMarginType(margin_id_separator, wxSTC_MARGIN_SYMBOL);
+    SetMarginWidth(margin_id_separator, 0);
+    SetMarginSensitive(margin_id_separator, false);
 
     // folding
-    SetMarginType (m_FoldingID, wxSTC_MARGIN_SYMBOL);
-    SetMarginMask (m_FoldingID, wxSTC_MASK_FOLDERS);
-    StyleSetBackground (m_FoldingID, *wxWHITE);
-    SetMarginWidth (m_FoldingID, 0);
-    SetMarginSensitive (m_FoldingID, false);
-    if (g_CommonPrefs.foldEnable) {
-        SetMarginWidth (m_FoldingID, curInfo->folds != 0? m_FoldingMargin: 0);
-        SetMarginSensitive (m_FoldingID, curInfo->folds != 0);
-        SetProperty (_T("fold"), curInfo->folds != 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.comment"),
-                     (curInfo->folds & mySTC_FOLD_COMMENT) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.compact"),
-                     (curInfo->folds & mySTC_FOLD_COMPACT) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.preprocessor"),
-                     (curInfo->folds & mySTC_FOLD_PREPROC) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.html"),
-                     (curInfo->folds & mySTC_FOLD_HTML) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.html.preprocessor"),
-                     (curInfo->folds & mySTC_FOLD_HTMLPREP) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.comment.python"),
-                     (curInfo->folds & mySTC_FOLD_COMMENTPY) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.quotes.python"),
-                     (curInfo->folds & mySTC_FOLD_QUOTESPY) > 0? _T("1"): _T("0"));
+    SetMarginType(margin_id_fold, wxSTC_MARGIN_SYMBOL);
+    SetMarginMask(margin_id_fold, wxSTC_MASK_FOLDERS);
+    StyleSetBackground(margin_id_fold, *wxWHITE);
+    SetMarginWidth(margin_id_fold, 0);
+    SetMarginSensitive(margin_id_fold, false);
+    if (g_CommonPrefs.foldEnable)
+    {
+        SetMarginWidth(margin_id_fold, curInfo->folds != 0? m_FoldingMargin: 0);
+        SetMarginSensitive(margin_id_fold, curInfo->folds != 0);
+        SetProperty(wxT("fold"), curInfo->folds != 0? wxT("1"): wxT("0"));
+        SetProperty(wxT("fold.comment"),
+                    ( (curInfo->folds & mySTC_FOLD_COMMENT) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.compact"),
+                    ( (curInfo->folds & mySTC_FOLD_COMPACT) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.preprocessor"),
+                    ( (curInfo->folds & mySTC_FOLD_PREPROC) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.html"),
+                    ( (curInfo->folds & mySTC_FOLD_HTML) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.html.preprocessor"),
+                    ( (curInfo->folds & mySTC_FOLD_HTMLPREP) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.comment.python"),
+                    ( (curInfo->folds & mySTC_FOLD_COMMENTPY) > 0) ? wxT("1") : wxT("0"));
+        SetProperty(wxT("fold.quotes.python"),
+                    ( (curInfo->folds & mySTC_FOLD_QUOTESPY) > 0) ? wxT("1"): wxT("0"));
     }
-    SetFoldFlags (wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED |
-                  wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
+    SetFoldFlags(wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED |
+                 wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
 
     // set spaces and indention
-    SetTabWidth (4);
-    SetUseTabs (false);
-    SetTabIndents (true);
-    SetBackSpaceUnIndents (true);
-    SetIndent (g_CommonPrefs.indentEnable? 4: 0);
+    SetTabWidth(4);
+    SetUseTabs(false);
+    SetTabIndents(true);
+    SetBackSpaceUnIndents(true);
+    SetIndent(g_CommonPrefs.indentEnable? 4: 0);
 
     // others
-    SetViewEOL (g_CommonPrefs.displayEOLEnable);
-    SetIndentationGuides (g_CommonPrefs.indentGuideEnable);
-    SetEdgeColumn (80);
-    SetEdgeMode (g_CommonPrefs.longLineOnEnable? wxSTC_EDGE_LINE: wxSTC_EDGE_NONE);
-    SetViewWhiteSpace (g_CommonPrefs.whiteSpaceEnable?
-                       wxSTC_WS_VISIBLEALWAYS: wxSTC_WS_INVISIBLE);
-    SetOvertype (g_CommonPrefs.overTypeInitial);
-    SetReadOnly (g_CommonPrefs.readOnlyInitial);
-    SetWrapMode (g_CommonPrefs.wrapModeInitial?
-                 wxSTC_WRAP_WORD: wxSTC_WRAP_NONE);
+    SetViewEOL(g_CommonPrefs.displayEOLEnable);
+    SetIndentationGuides(g_CommonPrefs.indentGuideEnable);
+    SetEdgeColumn(80);
+    SetEdgeMode(g_CommonPrefs.longLineOnEnable ? wxSTC_EDGE_LINE:  wxSTC_EDGE_NONE);
+    SetViewWhiteSpace (g_CommonPrefs.whiteSpaceEnable ? wxSTC_WS_VISIBLEALWAYS : wxSTC_WS_INVISIBLE);
+    SetOvertype(g_CommonPrefs.overTypeInitial);
+    SetReadOnly(g_CommonPrefs.readOnlyInitial);
+    SetWrapMode(g_CommonPrefs.wrapModeInitial ? wxSTC_WRAP_WORD : wxSTC_WRAP_NONE);
 
     return true;
 }
 
-bool Edit::LoadFile ()
+bool Edit::LoadFile()
 {
 #if wxUSE_FILEDLG
     // get filname
-    if (!m_filename) {
-        wxFileDialog dlg (this, _T("Open file"), wxEmptyString, wxEmptyString,
-                          _T("Any file (*)|*"), wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
+    if (!m_filename)
+    {
+        wxFileDialog dlg(this, _("Open file"), wxEmptyString, wxEmptyString,
+                         wxALL_FILES, wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
         if (dlg.ShowModal() != wxID_OK) return false;
         m_filename = dlg.GetPath();
     }
 
     // load file
-    return LoadFile (m_filename);
+    return LoadFile(m_filename);
 #else
     return false;
 #endif // wxUSE_FILEDLG
 }
 
-bool Edit::LoadFile (const wxString &filename) {
-
+bool Edit::LoadFile(const wxString& filename)
+{
     // load file in edit and clear undo
     if (!filename.empty()) m_filename = filename;
-//     wxFile file (m_filename);
+//     wxFile file(m_filename);
 //     if (!file.IsOpened()) return false;
-    ClearAll ();
-//     long lng = file.Length ();
-//     if (lng > 0) {
+    ClearAll();
+//     long lng = file.Length();
+//     if (lng > 0)
+//     {
 //         wxString buf;
-//         wxChar *buff = buf.GetWriteBuf (lng);
-//         file.Read (buff, lng);
-//         buf.UngetWriteBuf ();
-//         InsertText (0, buf);
+//         wxChar *buff = buf.GetWriteBuf(lng);
+//         file.Read(buff, lng);
+//         buf.UngetWriteBuf();
+//         InsertText(0, buf);
 //     }
 //     file.Close();
 
@@ -542,44 +545,45 @@
     EmptyUndoBuffer();
 
     // determine lexer language
-    wxFileName fname (m_filename);
-    InitializePrefs (DeterminePrefs (fname.GetFullName()));
+    wxFileName fname(m_filename);
+    InitializePrefs(DeterminePrefs(fname.GetFullName()));
 
     return true;
 }
 
-bool Edit::SaveFile ()
+bool Edit::SaveFile()
 {
 #if wxUSE_FILEDLG
     // return if no change
     if (!Modified()) return true;
 
     // get filname
-    if (!m_filename) {
-        wxFileDialog dlg (this, _T("Save file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"),
-                          wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
+    if (!m_filename)
+    {
+        wxFileDialog dlg(this, _("Save file"), wxEmptyString, wxEmptyString, wxALL_FILES,
+                         wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
         if (dlg.ShowModal() != wxID_OK) return false;
         m_filename = dlg.GetPath();
     }
 
     // save file
-    return SaveFile (m_filename);
+    return SaveFile(m_filename);
 #else
     return false;
 #endif // wxUSE_FILEDLG
 }
 
-bool Edit::SaveFile (const wxString &filename) {
-
+bool Edit::SaveFile(const wxString &filename)
+{
     // return if no change
     if (!Modified()) return true;
 
 //     // save edit in file and clear undo
 //     if (!filename.empty()) m_filename = filename;
-//     wxFile file (m_filename, wxFile::write);
+//     wxFile file(m_filename, wxFile::write);
 //     if (!file.IsOpened()) return false;
 //     wxString buf = GetText();
-//     bool okay = file.Write (buf);
+//     bool okay = file.Write(buf);
 //     file.Close();
 //     if (!okay) return false;
 //     EmptyUndoBuffer();
@@ -588,11 +592,10 @@
 //     return true;
 
     return wxStyledTextCtrl::SaveFile(filename);
-
 }
 
-bool Edit::Modified () {
-
+bool Edit::Modified()
+{
     // return modified state
     return (GetModify() && !GetReadOnly());
 }
@@ -601,104 +604,104 @@
 // EditProperties
 //----------------------------------------------------------------------------
 
-EditProperties::EditProperties (Edit *edit,
-                                long style)
-        : wxDialog (edit, wxID_ANY, wxEmptyString,
-                    wxDefaultPosition, wxDefaultSize,
-                    style | wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER) {
-
+EditProperties::EditProperties(Edit *edit, long style)
+        : wxDialog(edit, wxID_ANY, wxEmptyString,
+                   wxDefaultPosition, wxDefaultSize,
+                   style | wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
+{
     // sets the application title
-    SetTitle (_("Properties"));
+    SetTitle(_("Properties"));
     wxString text;
 
     // fullname
-    wxBoxSizer *fullname = new wxBoxSizer (wxHORIZONTAL);
-    fullname->Add (10, 0);
-    fullname->Add (new wxStaticText (this, wxID_ANY, _("Full filename"),
+    wxBoxSizer *fullname = new wxBoxSizer(wxHORIZONTAL);
+    fullname->Add(10, 0);
+    fullname->Add(new wxStaticText(this, wxID_ANY, _("Full filename"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL);
-    fullname->Add (new wxStaticText (this, wxID_ANY, edit->GetFilename()),
+    fullname->Add(new wxStaticText(this, wxID_ANY, edit->GetFilename()),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL);
 
     // text info
-    wxGridSizer *textinfo = new wxGridSizer (4, 0, 2);
-    textinfo->Add (new wxStaticText (this, wxID_ANY, _("Language"),
+    wxGridSizer *textinfo = new wxGridSizer(4, 0, 2);
+    textinfo->Add(new wxStaticText(this, wxID_ANY, _("Language"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    textinfo->Add (new wxStaticText (this, wxID_ANY, edit->m_language->name),
+    textinfo->Add(new wxStaticText(this, wxID_ANY, edit->m_language->name),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
-    textinfo->Add (new wxStaticText (this, wxID_ANY, _("Lexer-ID: "),
+    textinfo->Add(new wxStaticText(this, wxID_ANY, _("Lexer-ID: "),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetLexer());
-    textinfo->Add (new wxStaticText (this, wxID_ANY, text),
+    text = wxString::Format(wxT("%d"), edit->GetLexer());
+    textinfo->Add(new wxStaticText(this, wxID_ANY, text),
                    0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     wxString EOLtype = wxEmptyString;
-    switch (edit->GetEOLMode()) {
-        case wxSTC_EOL_CR: {EOLtype = _T("CR (Unix)"); break; }
-        case wxSTC_EOL_CRLF: {EOLtype = _T("CRLF (Windows)"); break; }
-        case wxSTC_EOL_LF: {EOLtype = _T("CR (Macintosh)"); break; }
+    switch (edit->GetEOLMode())
+    {
+        case wxSTC_EOL_CR:   EOLtype = _("CR (Unix)"); break;
+        case wxSTC_EOL_CRLF: EOLtype = _("CRLF (Windows)"); break;
+        case wxSTC_EOL_LF:   EOLtype = _("CR (Macintosh)"); break;
     }
-    textinfo->Add (new wxStaticText (this, wxID_ANY, _("Line endings"),
+    textinfo->Add(new wxStaticText(this, wxID_ANY, _("Line endings"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    textinfo->Add (new wxStaticText (this, wxID_ANY, EOLtype),
+    textinfo->Add(new wxStaticText(this, wxID_ANY, EOLtype),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
 
     // text info box
-    wxStaticBoxSizer *textinfos = new wxStaticBoxSizer (
-                     new wxStaticBox (this, wxID_ANY, _("Informations")),
+    wxStaticBoxSizer* textinfos = new wxStaticBoxSizer(
+                     new wxStaticBox(this, wxID_ANY, _("Information")),
                      wxVERTICAL);
-    textinfos->Add (textinfo, 0, wxEXPAND);
-    textinfos->Add (0, 6);
+    textinfos->Add(textinfo, 0, wxEXPAND);
+    textinfos->Add(0, 6);
 
     // statistic
-    wxGridSizer *statistic = new wxGridSizer (4, 0, 2);
-    statistic->Add (new wxStaticText (this, wxID_ANY, _("Total lines"),
+    wxGridSizer *statistic = new wxGridSizer(4, 0, 2);
+    statistic->Add(new wxStaticText(this, wxID_ANY, _("Total lines"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetLineCount());
-    statistic->Add (new wxStaticText (this, wxID_ANY, text),
+    text = wxString::Format(wxT("%d"), edit->GetLineCount());
+    statistic->Add(new wxStaticText(this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
-    statistic->Add (new wxStaticText (this, wxID_ANY, _("Total chars"),
+    statistic->Add(new wxStaticText(this, wxID_ANY, _("Total chars"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetTextLength());
-    statistic->Add (new wxStaticText (this, wxID_ANY, text),
+    text = wxString::Format(wxT("%d"), edit->GetTextLength());
+    statistic->Add(new wxStaticText(this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
-    statistic->Add (new wxStaticText (this, wxID_ANY, _("Current line"),
+    statistic->Add(new wxStaticText(this, wxID_ANY, _("Current line"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetCurrentLine());
-    statistic->Add (new wxStaticText (this, wxID_ANY, text),
+    text = wxString::Format(wxT("%d"), edit->GetCurrentLine());
+    statistic->Add(new wxStaticText(this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
-    statistic->Add (new wxStaticText (this, wxID_ANY, _("Current pos"),
+    statistic->Add(new wxStaticText(this, wxID_ANY, _("Current pos"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetCurrentPos());
-    statistic->Add (new wxStaticText (this, wxID_ANY, text),
+    text = wxString::Format(wxT("%d"), edit->GetCurrentPos());
+    statistic->Add(new wxStaticText(this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
 
     // char/line statistics
-    wxStaticBoxSizer *statistics = new wxStaticBoxSizer (
-                     new wxStaticBox (this, wxID_ANY, _("Statistics")),
+    wxStaticBoxSizer *statistics = new wxStaticBoxSizer(
+                     new wxStaticBox(this, wxID_ANY, _("Statistics")),
                      wxVERTICAL);
-    statistics->Add (statistic, 0, wxEXPAND);
-    statistics->Add (0, 6);
+    statistics->Add(statistic, 0, wxEXPAND);
+    statistics->Add(0, 6);
 
     // total pane
-    wxBoxSizer *totalpane = new wxBoxSizer (wxVERTICAL);
-    totalpane->Add (fullname, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 10);
-    totalpane->Add (0, 6);
-    totalpane->Add (textinfos, 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
-    totalpane->Add (0, 10);
-    totalpane->Add (statistics, 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
-    totalpane->Add (0, 6);
-    wxButton *okButton = new wxButton (this, wxID_OK, _("OK"));
+    wxBoxSizer *totalpane = new wxBoxSizer(wxVERTICAL);
+    totalpane->Add(fullname, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 10);
+    totalpane->Add(0, 6);
+    totalpane->Add(textinfos, 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
+    totalpane->Add(0, 10);
+    totalpane->Add(statistics, 0, wxEXPAND | wxLEFT | wxRIGHT, 10);
+    totalpane->Add(0, 6);
+    wxButton *okButton = new wxButton(this, wxID_OK, _("OK"));
     okButton->SetDefault();
-    totalpane->Add (okButton, 0, wxALIGN_CENTER | wxALL, 10);
+    totalpane->Add(okButton, 0, wxALIGN_CENTER | wxALL, 10);
 
-    SetSizerAndFit (totalpane);
+    SetSizerAndFit(totalpane);
 
     ShowModal();
 }
@@ -709,40 +712,35 @@
 // EditPrint
 //----------------------------------------------------------------------------
 
-EditPrint::EditPrint (Edit *edit, const wxChar *title)
-              : wxPrintout(title) {
+EditPrint::EditPrint(Edit* edit, const wxString& title) : wxPrintout(title)
+{
     m_edit = edit;
     m_printed = 0;
-
 }
 
-bool EditPrint::OnPrintPage (int page) {
-
+bool EditPrint::OnPrintPage(int page)
+{
     wxDC *dc = GetDC();
     if (!dc) return false;
 
     // scale DC
-    PrintScaling (dc);
+    PrintScaling(dc);
 
     // print page
     if (page == 1) m_printed = 0;
-    m_printed = m_edit->FormatRange (1, m_printed, m_edit->GetLength(),
+    m_printed = m_edit->FormatRange(1, m_printed, m_edit->GetLength(),
                                      dc, dc, m_printRect, m_pageRect);
 
     return true;
 }
 
-bool EditPrint::OnBeginDocument (int startPage, int endPage) {
-
-    if (!wxPrintout::OnBeginDocument (startPage, endPage)) {
-        return false;
-    }
-
-    return true;
+bool EditPrint::OnBeginDocument(int startPage, int endPage)
+{
+    return wxPrintout::OnBeginDocument(startPage, endPage);
 }
 
-void EditPrint::GetPageInfo (int *minPage, int *maxPage, int *selPageFrom, int *selPageTo) {
-
+void EditPrint::GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo)
+{
     // initialize values
     *minPage = 0;
     *maxPage = 0;
@@ -752,18 +750,15 @@
     // scale DC if possible
     wxDC *dc = GetDC();
     if (!dc) return;
-    PrintScaling (dc);
+    PrintScaling(dc);
 
     // get print page informations and convert to printer pixels
     wxSize ppiScr;
-    GetPPIScreen (&ppiScr.x, &ppiScr.y);
+    GetPPIScreen(&ppiScr.x, &ppiScr.y);
     wxSize page = g_pageSetupData->GetPaperSize();
     page.x = static_cast<int> (page.x * ppiScr.x / 25.4);
     page.y = static_cast<int> (page.y * ppiScr.y / 25.4);
-    m_pageRect = wxRect (0,
-                         0,
-                         page.x,
-                         page.y);
+    m_pageRect = wxRect(0, 0, page.x, page.y);
 
     // get margins informations and convert to printer pixels
     wxPoint pt = g_pageSetupData->GetMarginTopLeft();
@@ -778,14 +773,14 @@
     left = static_cast<int> (left * ppiScr.x / 25.4);
     right = static_cast<int> (right * ppiScr.x / 25.4);
 
-    m_printRect = wxRect (left,
-                          top,
-                          page.x - (left + right),
-                          page.y - (top + bottom));
+    m_printRect = wxRect(left, top,
+                         page.x - (left + right),
+                         page.y - (top + bottom));
 
     // count pages
-    while (HasPage (*maxPage)) {
-        m_printed = m_edit->FormatRange (0, m_printed, m_edit->GetLength(),
+    while (HasPage(*maxPage))
+    {
+        m_printed = m_edit->FormatRange(0, m_printed, m_edit->GetLength(),
                                        dc, dc, m_printRect, m_pageRect);
         *maxPage += 1;
     }
@@ -794,39 +789,41 @@
     *selPageTo = *maxPage;
 }
 
-bool EditPrint::HasPage (int WXUNUSED(page)) {
-
+bool EditPrint::HasPage(int WXUNUSED(page))
+{
     return (m_printed < m_edit->GetLength());
 }
 
-bool EditPrint::PrintScaling (wxDC *dc){
-
+bool EditPrint::PrintScaling(wxDC *dc)
+{
     // check for dc, return if none
     if (!dc) return false;
 
     // get printer and screen sizing values
     wxSize ppiScr;
-    GetPPIScreen (&ppiScr.x, &ppiScr.y);
-    if (ppiScr.x == 0) { // most possible guess 96 dpi
+    GetPPIScreen(&ppiScr.x, &ppiScr.y);
+    if (ppiScr.x == 0)
+    { // most possible guess 96 dpi
         ppiScr.x = 96;
         ppiScr.y = 96;
     }
     wxSize ppiPrt;
-    GetPPIPrinter (&ppiPrt.x, &ppiPrt.y);
-    if (ppiPrt.x == 0) { // scaling factor to 1
+    GetPPIPrinter(&ppiPrt.x, &ppiPrt.y);
+    if (ppiPrt.x == 0)
+    { // scaling factor to 1
         ppiPrt.x = ppiScr.x;
         ppiPrt.y = ppiScr.y;
     }
     wxSize dcSize = dc->GetSize();
     wxSize pageSize;
-    GetPageSizePixels (&pageSize.x, &pageSize.y);
+    GetPageSizePixels(&pageSize.x, &pageSize.y);
 
     // set user scale
     float scale_x = (float)(ppiPrt.x * dcSize.x) /
                     (float)(ppiScr.x * pageSize.x);
     float scale_y = (float)(ppiPrt.y * dcSize.y) /
                     (float)(ppiScr.y * pageSize.y);
-    dc->SetUserScale (scale_x, scale_y);
+    dc->SetUserScale(scale_x, scale_y);
 
     return true;
 }
Index: samples/stc/edit.h
===================================================================
--- samples/stc/edit.h	(revision 53094)
+++ samples/stc/edit.h	(working copy)
@@ -39,7 +39,8 @@
 
 //----------------------------------------------------------------------------
 //! Edit
-class Edit: public wxStyledTextCtrl {
+class Edit: public wxStyledTextCtrl
+{
     friend class EditProperties;
     friend class EditPrint;
 
@@ -48,7 +49,7 @@
     Edit (wxWindow *parent, wxWindowID id = wxID_ANY,
           const wxPoint &pos = wxDefaultPosition,
           const wxSize &size = wxDefaultSize,
-          long style = 
+          long style =
 #ifndef __WXMAC__
           wxSUNKEN_BORDER|
 #endif
@@ -56,18 +57,11 @@
          );
 
     //! destructor
-    ~Edit ();
+    virtual ~Edit ();
 
     // event handlers
     // common
     void OnSize( wxSizeEvent &event );
-    // edit
-    void OnEditRedo (wxCommandEvent &event);
-    void OnEditUndo (wxCommandEvent &event);
-    void OnEditClear (wxCommandEvent &event);
-    void OnEditCut (wxCommandEvent &event);
-    void OnEditCopy (wxCommandEvent &event);
-    void OnEditPaste (wxCommandEvent &event);
     // find
     void OnFind (wxCommandEvent &event);
     void OnFindNext (wxCommandEvent &event);
@@ -99,7 +93,7 @@
     void OnCharAdded  (wxStyledTextEvent &event);
 
     //! language/lexer
-    wxString DeterminePrefs (const wxString &filename);
+    wxString DeterminePrefs (const wxString &filename) const;
     bool InitializePrefs (const wxString &filename);
     bool UserSettings (const wxString &filename);
     LanguageInfo const* GetLanguageInfo () {return m_language;};
@@ -113,7 +107,7 @@
     wxString GetFilename () {return m_filename;};
     void SetFilename (const wxString &filename) {m_filename = filename;};
 
-private:
+protected:
     // file
     wxString m_filename;
 
@@ -121,38 +115,36 @@
     LanguageInfo const* m_language;
 
     // margin variables
-    int m_LineNrID;
+    enum
+    {
+       margin_id_line,
+       margin_id_separator,
+       margin_id_fold,
+    };
     int m_LineNrMargin;
-    int m_FoldingID;
     int m_FoldingMargin;
-    int m_DividerID;
 
     DECLARE_EVENT_TABLE()
 };
 
 //----------------------------------------------------------------------------
 //! EditProperties
-class EditProperties: public wxDialog {
-
+class EditProperties: public wxDialog
+{
 public:
-
     //! constructor
     EditProperties (Edit *edit, long style = 0);
-
-private:
-
 };
 
 #if wxUSE_PRINTING_ARCHITECTURE
 
 //----------------------------------------------------------------------------
 //! EditPrint
-class EditPrint: public wxPrintout {
-
+class EditPrint: public wxPrintout
+{
 public:
-
     //! constructor
-    EditPrint (Edit *edit, const wxChar *title = _T(""));
+    EditPrint (Edit *edit, const wxString& title = wxT("Printout"));
 
     //! event handlers
     bool OnPrintPage (int page);
@@ -162,7 +154,7 @@
     bool HasPage (int page);
     void GetPageInfo (int *minPage, int *maxPage, int *selPageFrom, int *selPageTo);
 
-private:
+protected:
     Edit *m_edit;
     int m_printed;
     wxRect m_pageRect;
Index: samples/stc/prefs.cpp
===================================================================
--- samples/stc/prefs.cpp	(revision 53094)
+++ samples/stc/prefs.cpp	(working copy)
@@ -40,7 +40,8 @@
 
 //----------------------------------------------------------------------------
 //! language types
-const CommonInfo g_CommonPrefs = {
+const CommonInfo g_CommonPrefs =
+{
     // editor functionality prefs
     true,  // syntaxEnable
     true,  // foldEnable
@@ -99,7 +100,8 @@
 
 //----------------------------------------------------------------------------
 //! languages
-const LanguageInfo g_LanguagePrefs [] = {
+const LanguageInfo g_LanguagePrefs [] =
+{
     // C++
     {"C++",
      "*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hpp;*.hxx;*.sma",
@@ -217,161 +219,162 @@
 
 //----------------------------------------------------------------------------
 //! style types
-const StyleInfo g_StylePrefs [] = {
+const StyleInfo g_StylePrefs [] =
+{
     // mySTC_TYPE_DEFAULT
-    {_T("Default"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Default"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD1
-    {_T("Keyword1"),
-     _T("BLUE"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_BOLD, 0},
+    {wxT("Keyword1"),
+     wxT("BLUE"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_BOLD, 0},
 
     // mySTC_TYPE_WORD2
-    {_T("Keyword2"),
-     _T("DARK BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword2"),
+     wxT("MIDNIGHT BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD3
-    {_T("Keyword3"),
-     _T("CORNFLOWER BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword3"),
+     wxT("CORNFLOWER BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD4
-    {_T("Keyword4"),
-     _T("CYAN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword4"),
+     wxT("CYAN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD5
-    {_T("Keyword5"),
-     _T("DARK GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword5"),
+     wxT("DARK GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD6
-    {_T("Keyword6"),
-     _T("GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword6"),
+     wxT("GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT
-    {_T("Comment"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_DOC
-    {_T("Comment (Doc)"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment (Doc)"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_LINE
-    {_T("Comment line"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment line"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_SPECIAL
-    {_T("Special comment"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Special comment"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_CHARACTER
-    {_T("Character"),
-     _T("KHAKI"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Character"),
+     wxT("KHAKI"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_CHARACTER_EOL
-    {_T("Character (EOL)"),
-     _T("KHAKI"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Character (EOL)"),
+     wxT("KHAKI"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_STRING
-    {_T("String"),
-     _T("BROWN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("String"),
+     wxT("BROWN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_STRING_EOL
-    {_T("String (EOL)"),
-     _T("BROWN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("String (EOL)"),
+     wxT("BROWN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_DELIMITER
-    {_T("Delimiter"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Delimiter"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_PUNCTUATION
-    {_T("Punctuation"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Punctuation"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_OPERATOR
-    {_T("Operator"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_BOLD, 0},
+    {wxT("Operator"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_BOLD, 0},
 
     // mySTC_TYPE_BRACE
-    {_T("Label"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Label"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMAND
-    {_T("Command"),
-     _T("BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Command"),
+     wxT("BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_IDENTIFIER
-    {_T("Identifier"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Identifier"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_LABEL
-    {_T("Label"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Label"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_NUMBER
-    {_T("Number"),
-     _T("SIENNA"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Number"),
+     wxT("SIENNA"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_PARAMETER
-    {_T("Parameter"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Parameter"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_REGEX
-    {_T("Regular expression"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Regular expression"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_UUID
-    {_T("UUID"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("UUID"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_VALUE
-    {_T("Value"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Value"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_PREPROCESSOR
-    {_T("Preprocessor"),
-     _T("GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Preprocessor"),
+     wxT("GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_SCRIPT
-    {_T("Script"),
-     _T("DARK GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Script"),
+     wxT("DARK GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_ERROR
-    {_T("Error"),
-     _T("RED"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Error"),
+     wxT("RED"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_UNDEFINED
-    {_T("Undefined"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0}
+    {wxT("Undefined"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0}
 
     };
 
Index: samples/stc/prefs.h
===================================================================
--- samples/stc/prefs.h	(revision 53094)
+++ samples/stc/prefs.h	(working copy)
@@ -100,7 +100,8 @@
 //----------------------------------------------------------------------------
 // CommonInfo
 
-struct CommonInfo {
+struct CommonInfo
+{
     // editor functionality prefs
     bool syntaxEnable;
     bool foldEnable;
@@ -120,11 +121,13 @@
 //----------------------------------------------------------------------------
 // LanguageInfo
 
-struct LanguageInfo {
+struct LanguageInfo
+{
     const char *name;
     const char *filepattern;
     int lexer;
-    struct {
+    struct
+    {
         int type;
         const char *words;
     } styles [STYLE_TYPES_COUNT];
@@ -136,7 +139,8 @@
 
 //----------------------------------------------------------------------------
 // StyleInfo
-struct StyleInfo {
+struct StyleInfo
+{
     const wxChar *name;
     const wxChar *foreground;
     const wxChar *background;
Index: samples/stc/stctest.cpp
===================================================================
--- samples/stc/stctest.cpp	(revision 53094)
+++ samples/stc/stctest.cpp	(working copy)
@@ -33,6 +33,7 @@
 #include "wx/settings.h" // system settings
 #include "wx/string.h"   // strings support
 #include "wx/image.h"    // images support
+#include "wx/stockitem.h"
 
 //! application headers
 #include "defsext.h"     // Additional definitions
@@ -53,19 +54,19 @@
 // declarations
 //============================================================================
 
-#define APP_NAME _T("STC-Test")
+#define APP_NAME wxT("STC-Test")
 #define APP_DESCR _("See http://wxguide.sourceforge.net/")
 
-#define APP_MAINT _T("Otto Wyss")
-#define APP_VENDOR _T("wxWidgets")
-#define APP_COPYRIGTH _T("(C) 2003 Otto Wyss")
-#define APP_LICENCE _T("wxWidgets")
+#define APP_MAINT wxT("Otto Wyss")
+#define APP_VENDOR wxT("wxWidgets")
+#define APP_COPYRIGHT wxT("(C) 2003 Otto Wyss")
+#define APP_LICENCE wxT("wxWidgets")
 
-#define APP_VERSION _T("0.1.alpha")
+#define APP_VERSION wxT("0.1.alpha")
 #define APP_BUILD __DATE__
 
-#define APP_WEBSITE _T("http://www.wxWidgets.org")
-#define APP_MAIL _T("mailto://???")
+#define APP_WEBSITE wxT("http://www.wxWidgets.org")
+#define APP_MAIL wxT("mailto://???")
 
 #define NONAME _("<untitled>")
 
@@ -73,8 +74,6 @@
 
 
 //----------------------------------------------------------------------------
-//! global application name
-wxString *g_appname = NULL;
 
 #if wxUSE_PRINTING_ARCHITECTURE
 
@@ -85,126 +84,274 @@
 #endif // wxUSE_PRINTING_ARCHITECTURE
 
 
-class AppFrame;
+class MainFrame;
 
 //----------------------------------------------------------------------------
 //! application APP_VENDOR-APP_NAME.
-class App: public wxApp {
-    friend class AppFrame;
+class App : public wxApp
+{
+protected:
+    //! frame window
+    MainFrame* m_frame;
 
 public:
+    App() : wxApp(), m_frame(NULL)
+    {
+    }
     //! the main function called durning application start
-    virtual bool OnInit ();
+    virtual bool OnInit();
 
     //! application exit function
-    virtual int OnExit ();
+    virtual int OnExit();
 
-private:
-    //! frame window
-    AppFrame* m_frame;
+    wxFrame* MinimalEditor();
+protected:
+    void OnMinimalEditor(wxCommandEvent&);
+    DECLARE_EVENT_TABLE()
 
+    friend class MainFrame;
 };
 
 // created dynamically by wxWidgets
-DECLARE_APP (App);
+DECLARE_APP(App);
 
 //----------------------------------------------------------------------------
 //! frame of the application APP_VENDOR-APP_NAME.
-class AppFrame: public wxFrame {
+class wxStcEditMenuEvtHandler;
+class MainFrame : public wxFrame
+{
     friend class App;
     friend class AppBook;
     friend class AppAbout;
 
 public:
     //! constructor
-    AppFrame (const wxString &title);
+    MainFrame(const wxString &title);
 
     //! destructor
-    ~AppFrame ();
+    virtual ~MainFrame();
 
     //! event handlers
     //! common
-    void OnClose (wxCloseEvent &event);
-    void OnAbout (wxCommandEvent &event);
-    void OnExit (wxCommandEvent &event);
-    void OnTimerEvent (wxTimerEvent &event);
+    void OnClose        (wxCloseEvent&);
+    void OnAbout        (wxCommandEvent&);
+    void OnExit         (wxCommandEvent&);
+    void OnTimerEvent   (wxTimerEvent&);
     //! file
-    void OnFileNew (wxCommandEvent &event);
-    void OnFileNewFrame (wxCommandEvent &event);
-    void OnFileOpen (wxCommandEvent &event);
-    void OnFileOpenFrame (wxCommandEvent &event);
-    void OnFileSave (wxCommandEvent &event);
-    void OnFileSaveAs (wxCommandEvent &event);
-    void OnFileClose (wxCommandEvent &event);
+    void OnFileNew      (wxCommandEvent&);
+    void OnFileNewFrame (wxCommandEvent&);
+    void OnFileOpen     (wxCommandEvent&);
+    void OnFileOpenFrame(wxCommandEvent&);
+    void OnFileSave     (wxCommandEvent&);
+    void OnFileSaveAs   (wxCommandEvent&);
+    void OnFileClose    (wxCommandEvent&);
     //! properties
-    void OnProperties (wxCommandEvent &event);
+    void OnProperties   (wxCommandEvent&);
     //! print
-    void OnPrintSetup (wxCommandEvent &event);
-    void OnPrintPreview (wxCommandEvent &event);
-    void OnPrint (wxCommandEvent &event);
+    void OnPrintSetup   (wxCommandEvent&);
+    void OnPrintPreview (wxCommandEvent&);
+    void OnPrint        (wxCommandEvent&);
     //! edit events
-    void OnEdit (wxCommandEvent &event);
+    void OnEdit         (wxCommandEvent&);
 
-private:
+protected:
+    wxStcEditMenuEvtHandler* m_editmenu_handler;
+
     // edit object
     Edit *m_edit;
-    void FileOpen (wxString fname);
+    void FileOpen(const wxString& fname);
 
     //! creates the application menu bar
     wxMenuBar *m_menuBar;
-    void CreateMenu ();
+    void CreateMenu();
 
     // print preview position and size
-    wxRect DeterminePrintSize ();
+    wxRect DeterminePrintSize();
 
     DECLARE_EVENT_TABLE()
 };
 
 //----------------------------------------------------------------------------
 //! about box of the application APP_VENDOR-APP_NAME
-class AppAbout: public wxDialog {
-
+class AppAbout : public wxDialog
+{
+protected:
+    // timer
+    wxTimer *m_timer;
 public:
     //! constructor
-    AppAbout (wxWindow *parent,
-              int milliseconds = 0,
-              long style = 0);
+    AppAbout(wxWindow *parent,
+             int milliseconds = 0,
+             long style = 0);
 
     //! destructor
-    ~AppAbout ();
+    virtual ~AppAbout();
 
+protected:
     // event handlers
-    void OnTimerEvent (wxTimerEvent &event);
+    void OnTimerEvent(wxTimerEvent&);
+    DECLARE_EVENT_TABLE()
+};
 
-private:
-    // timer
-    wxTimer *m_timer;
+// ----------------------------------------------------------------------------
+// wxStcEditMenuEvtHandler: wxStyledTextCtrl helper class, handling menu commands + updates
+// ----------------------------------------------------------------------------
 
+class wxStcEditMenuEvtHandler : public wxEvtHandler
+{
+protected:
+    wxStyledTextCtrl* m_edit;
+public:
+    wxStcEditMenuEvtHandler(wxStyledTextCtrl*);
+
+    bool HasSelection();
+    bool IsEmpty();
+protected:
+    void OnCopy(wxCommandEvent&);
+    void OnCut(wxCommandEvent&);
+    void OnPaste(wxCommandEvent&);
+    void OnUndo(wxCommandEvent&);
+    void OnRedo(wxCommandEvent&);
+    void OnDelete(wxCommandEvent&);
+    void OnSelectAll(wxCommandEvent&);
+
+    void OnUpdateCut(wxUpdateUIEvent&);
+    void OnUpdateCopy(wxUpdateUIEvent&);
+    void OnUpdatePaste(wxUpdateUIEvent&);
+    void OnUpdateUndo(wxUpdateUIEvent&);
+    void OnUpdateRedo(wxUpdateUIEvent&);
+    void OnUpdateDelete(wxUpdateUIEvent&);
+    void OnUpdateSelectAll(wxUpdateUIEvent&);
     DECLARE_EVENT_TABLE()
 };
 
+// ----------------------------------------------------------------------------
+// wxStcEditMenuEvtHandler: wxStyledTextCtrl helper class, handling menu commands + updates
+// ----------------------------------------------------------------------------
 
+BEGIN_EVENT_TABLE(wxStcEditMenuEvtHandler, wxEvtHandler)
+    EVT_MENU(wxID_CUT, wxStcEditMenuEvtHandler::OnCut)
+    EVT_MENU(wxID_COPY, wxStcEditMenuEvtHandler::OnCopy)
+    EVT_MENU(wxID_PASTE, wxStcEditMenuEvtHandler::OnPaste)
+    EVT_MENU(wxID_UNDO, wxStcEditMenuEvtHandler::OnUndo)
+    EVT_MENU(wxID_REDO, wxStcEditMenuEvtHandler::OnRedo)
+    EVT_MENU(wxID_CLEAR, wxStcEditMenuEvtHandler::OnDelete)
+    EVT_MENU(wxID_SELECTALL, wxStcEditMenuEvtHandler::OnSelectAll)
+
+    EVT_UPDATE_UI(wxID_CUT, wxStcEditMenuEvtHandler::OnUpdateCut)
+    EVT_UPDATE_UI(wxID_COPY, wxStcEditMenuEvtHandler::OnUpdateCopy)
+    EVT_UPDATE_UI(wxID_PASTE, wxStcEditMenuEvtHandler::OnUpdatePaste)
+    EVT_UPDATE_UI(wxID_UNDO, wxStcEditMenuEvtHandler::OnUpdateUndo)
+    EVT_UPDATE_UI(wxID_REDO, wxStcEditMenuEvtHandler::OnUpdateRedo)
+    EVT_UPDATE_UI(wxID_CLEAR, wxStcEditMenuEvtHandler::OnUpdateDelete)
+    EVT_UPDATE_UI(wxID_SELECTALL, wxStcEditMenuEvtHandler::OnUpdateSelectAll)
+END_EVENT_TABLE()
+
+wxStcEditMenuEvtHandler::wxStcEditMenuEvtHandler(wxStyledTextCtrl* edit) : wxEvtHandler(), m_edit(edit)
+{
+}
+
+bool wxStcEditMenuEvtHandler::HasSelection()
+{
+    return m_edit->GetSelectionStart() != m_edit->GetSelectionEnd();
+}
+
+bool wxStcEditMenuEvtHandler::IsEmpty()
+{
+    return 0 == m_edit->GetTextLength();
+}
+
+void wxStcEditMenuEvtHandler::OnCopy(wxCommandEvent&)
+{
+    m_edit->Copy();
+}
+
+void wxStcEditMenuEvtHandler::OnCut(wxCommandEvent&)
+{
+    m_edit->Cut();
+}
+
+void wxStcEditMenuEvtHandler::OnPaste(wxCommandEvent&)
+{
+    m_edit->Paste();
+}
+
+void wxStcEditMenuEvtHandler::OnUndo(wxCommandEvent&)
+{
+    m_edit->Undo();
+}
+
+void wxStcEditMenuEvtHandler::OnRedo(wxCommandEvent&)
+{
+    m_edit->Undo();
+}
+
+void wxStcEditMenuEvtHandler::OnDelete(wxCommandEvent&)
+{
+    m_edit->Clear();
+}
+
+void wxStcEditMenuEvtHandler::OnSelectAll(wxCommandEvent&)
+{
+    m_edit->SelectAll();
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateCut(wxUpdateUIEvent& event)
+{
+    event.Enable(HasSelection() && !m_edit->GetReadOnly());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateCopy(wxUpdateUIEvent& event)
+{
+    event.Enable(HasSelection());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdatePaste(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanPaste());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateUndo(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanUndo());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateRedo(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanRedo());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateSelectAll(wxUpdateUIEvent& event)
+{
+    event.Enable(!IsEmpty());
+}
+
+void wxStcEditMenuEvtHandler::OnUpdateDelete(wxUpdateUIEvent& event)
+{
+    event.Enable(HasSelection() && !m_edit->GetReadOnly());
+}
+
 //============================================================================
 // implementation
 //============================================================================
 
-IMPLEMENT_APP (App)
+IMPLEMENT_APP(App)
 
 //----------------------------------------------------------------------------
 // App
 //----------------------------------------------------------------------------
 
-bool App::OnInit () {
+BEGIN_EVENT_TABLE(App, wxApp)
+    EVT_MENU(myID_WINDOW_MINIMAL, App::OnMinimalEditor)
+END_EVENT_TABLE()
 
+bool App::OnInit()
+{
     wxInitAllImageHandlers();
 
     // set application and vendor name
-    SetAppName (APP_NAME);
-    SetVendorName (APP_VENDOR);
-    g_appname = new wxString ();
-    g_appname->Append (APP_VENDOR);
-    g_appname->Append (_T("-"));
-    g_appname->Append (APP_NAME);
+    SetVendorName(APP_VENDOR);
+    SetAppName(wxString(APP_VENDOR) + wxT("-")APP_NAME);
 
 #if wxUSE_PRINTING_ARCHITECTURE
     // initialize print data and setup
@@ -213,199 +360,222 @@
 #endif // wxUSE_PRINTING_ARCHITECTURE
 
     // create application frame
-    m_frame = new AppFrame (*g_appname);
+    wxFrame* frame;
+#ifdef x__WXDEBUG__
+    frame = MinimalEditor();
+#else
+    frame = m_frame = new MainFrame(GetAppDisplayName());
+#endif
 
     // open application frame
-    m_frame->Layout ();
-    m_frame->Show (true);
-    SetTopWindow (m_frame);
+    frame->Layout();
+    frame->Show(true);
+    SetTopWindow(frame);
 
     return true;
 }
 
-int App::OnExit () {
-
-    // delete global appname
-    delete g_appname;
-
+int App::OnExit()
+{
 #if wxUSE_PRINTING_ARCHITECTURE
     // delete global print data and setup
-    if (g_printData) delete g_printData;
-    if (g_pageSetupData) delete g_pageSetupData;
+    wxDELETE(g_printData)
+    wxDELETE(g_pageSetupData)
 #endif // wxUSE_PRINTING_ARCHITECTURE
-
     return 0;
 }
 
 //----------------------------------------------------------------------------
-// AppFrame
+// MainFrame
 //----------------------------------------------------------------------------
 
-BEGIN_EVENT_TABLE (AppFrame, wxFrame)
+BEGIN_EVENT_TABLE(MainFrame, wxFrame)
     // common
-    EVT_CLOSE (                      AppFrame::OnClose)
+    EVT_CLOSE(                      MainFrame::OnClose)
     // file
-    EVT_MENU (wxID_OPEN,             AppFrame::OnFileOpen)
-    EVT_MENU (wxID_SAVE,             AppFrame::OnFileSave)
-    EVT_MENU (wxID_SAVEAS,           AppFrame::OnFileSaveAs)
-    EVT_MENU (wxID_CLOSE,            AppFrame::OnFileClose)
+    EVT_MENU(wxID_OPEN,             MainFrame::OnFileOpen)
+    EVT_MENU(wxID_SAVE,             MainFrame::OnFileSave)
+    EVT_MENU(wxID_SAVEAS,           MainFrame::OnFileSaveAs)
+    EVT_MENU(wxID_CLOSE,            MainFrame::OnFileClose)
     // properties
-    EVT_MENU (myID_PROPERTIES,       AppFrame::OnProperties)
+    EVT_MENU(myID_PROPERTIES,       MainFrame::OnProperties)
     // print and exit
-    EVT_MENU (wxID_PRINT_SETUP,      AppFrame::OnPrintSetup)
-    EVT_MENU (wxID_PREVIEW,          AppFrame::OnPrintPreview)
-    EVT_MENU (wxID_PRINT,            AppFrame::OnPrint)
-    EVT_MENU (wxID_EXIT,             AppFrame::OnExit)
+    EVT_MENU(wxID_PRINT_SETUP,      MainFrame::OnPrintSetup)
+    EVT_MENU(wxID_PREVIEW,          MainFrame::OnPrintPreview)
+    EVT_MENU(wxID_PRINT,            MainFrame::OnPrint)
+    EVT_MENU(wxID_EXIT,             MainFrame::OnExit)
     // edit
-    EVT_MENU (wxID_CLEAR,            AppFrame::OnEdit)
-    EVT_MENU (wxID_CUT,              AppFrame::OnEdit)
-    EVT_MENU (wxID_COPY,             AppFrame::OnEdit)
-    EVT_MENU (wxID_PASTE,            AppFrame::OnEdit)
-    EVT_MENU (myID_INDENTINC,        AppFrame::OnEdit)
-    EVT_MENU (myID_INDENTRED,        AppFrame::OnEdit)
-    EVT_MENU (wxID_SELECTALL,        AppFrame::OnEdit)
-    EVT_MENU (myID_SELECTLINE,       AppFrame::OnEdit)
-    EVT_MENU (wxID_REDO,             AppFrame::OnEdit)
-    EVT_MENU (wxID_UNDO,             AppFrame::OnEdit)
+    EVT_MENU(myID_INDENTINC,        MainFrame::OnEdit)
+    EVT_MENU(myID_INDENTRED,        MainFrame::OnEdit)
+    EVT_MENU(myID_SELECTLINE,       MainFrame::OnEdit)
     // find
-    EVT_MENU (wxID_FIND,             AppFrame::OnEdit)
-    EVT_MENU (myID_FINDNEXT,         AppFrame::OnEdit)
-    EVT_MENU (myID_REPLACE,          AppFrame::OnEdit)
-    EVT_MENU (myID_REPLACENEXT,      AppFrame::OnEdit)
-    EVT_MENU (myID_BRACEMATCH,       AppFrame::OnEdit)
-    EVT_MENU (myID_GOTO,             AppFrame::OnEdit)
+    EVT_MENU(wxID_FIND,             MainFrame::OnEdit)
+    EVT_MENU(myID_FINDNEXT,         MainFrame::OnEdit)
+    EVT_MENU(myID_REPLACE,          MainFrame::OnEdit)
+    EVT_MENU(myID_REPLACENEXT,      MainFrame::OnEdit)
+    EVT_MENU(myID_BRACEMATCH,       MainFrame::OnEdit)
+    EVT_MENU(myID_GOTO,             MainFrame::OnEdit)
     // view
     EVT_MENU_RANGE (myID_HILIGHTFIRST, myID_HILIGHTLAST,
-                                     AppFrame::OnEdit)
-    EVT_MENU (myID_DISPLAYEOL,       AppFrame::OnEdit)
-    EVT_MENU (myID_INDENTGUIDE,      AppFrame::OnEdit)
-    EVT_MENU (myID_LINENUMBER,       AppFrame::OnEdit)
-    EVT_MENU (myID_LONGLINEON,       AppFrame::OnEdit)
-    EVT_MENU (myID_WHITESPACE,       AppFrame::OnEdit)
-    EVT_MENU (myID_FOLDTOGGLE,       AppFrame::OnEdit)
-    EVT_MENU (myID_OVERTYPE,         AppFrame::OnEdit)
-    EVT_MENU (myID_READONLY,         AppFrame::OnEdit)
-    EVT_MENU (myID_WRAPMODEON,       AppFrame::OnEdit)
+                                     MainFrame::OnEdit)
+    EVT_MENU(myID_DISPLAYEOL,       MainFrame::OnEdit)
+    EVT_MENU(myID_INDENTGUIDE,      MainFrame::OnEdit)
+    EVT_MENU(myID_LINENUMBER,       MainFrame::OnEdit)
+    EVT_MENU(myID_LONGLINEON,       MainFrame::OnEdit)
+    EVT_MENU(myID_WHITESPACE,       MainFrame::OnEdit)
+    EVT_MENU(myID_FOLDTOGGLE,       MainFrame::OnEdit)
+    EVT_MENU(myID_OVERTYPE,         MainFrame::OnEdit)
+    EVT_MENU(myID_READONLY,         MainFrame::OnEdit)
+    EVT_MENU(myID_WRAPMODEON,       MainFrame::OnEdit)
     // extra
-    EVT_MENU (myID_CHANGELOWER,      AppFrame::OnEdit)
-    EVT_MENU (myID_CHANGEUPPER,      AppFrame::OnEdit)
-    EVT_MENU (myID_CONVERTCR,        AppFrame::OnEdit)
-    EVT_MENU (myID_CONVERTCRLF,      AppFrame::OnEdit)
-    EVT_MENU (myID_CONVERTLF,        AppFrame::OnEdit)
-    EVT_MENU (myID_CHARSETANSI,      AppFrame::OnEdit)
-    EVT_MENU (myID_CHARSETMAC,       AppFrame::OnEdit)
+    EVT_MENU(myID_CHANGELOWER,      MainFrame::OnEdit)
+    EVT_MENU(myID_CHANGEUPPER,      MainFrame::OnEdit)
+    EVT_MENU(myID_CONVERTCR,        MainFrame::OnEdit)
+    EVT_MENU(myID_CONVERTCRLF,      MainFrame::OnEdit)
+    EVT_MENU(myID_CONVERTLF,        MainFrame::OnEdit)
+    EVT_MENU(myID_CHARSETANSI,      MainFrame::OnEdit)
+    EVT_MENU(myID_CHARSETMAC,       MainFrame::OnEdit)
     // help
-    EVT_MENU (wxID_ABOUT,            AppFrame::OnAbout)
-END_EVENT_TABLE ()
+    EVT_MENU(wxID_ABOUT,            MainFrame::OnAbout)
+END_EVENT_TABLE()
 
-AppFrame::AppFrame (const wxString &title)
-        : wxFrame ((wxFrame *)NULL, wxID_ANY, title, wxDefaultPosition, wxSize(750,550),
-                    wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE) {
-
+MainFrame::MainFrame(const wxString &title)
+        : wxFrame((wxFrame *)NULL, wxID_ANY, title, wxDefaultPosition, wxSize(750,550),
+                    wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE)
+{
     // intitialize important variables
     m_edit = NULL;
+    m_editmenu_handler = NULL;
 
     // set icon and background
-    SetTitle (*g_appname);
-    SetIcon (wxICON (mondrian));
-    SetBackgroundColour (_T("WHITE"));
+    SetTitle(wxTheApp->GetAppDisplayName());
+    SetIcon(wxICON(mondrian));
+    SetBackgroundColour(wxT("WHITE"));
 
     // about box shown for 1 seconds
     AppAbout dlg(this, 1000);
 
     // create menu
     m_menuBar = new wxMenuBar;
-    CreateMenu ();
+    CreateMenu();
 
     // open first page
-    m_edit = new Edit (this, wxID_ANY);
+    m_edit = new Edit(this, wxID_ANY);
     m_edit->SetFocus();
 
-    FileOpen (_T("stctest.cpp"));
+    m_editmenu_handler = new wxStcEditMenuEvtHandler(m_edit);
+    PushEventHandler(m_editmenu_handler);
+
+    FileOpen(wxT("stctest.cpp"));
+
+#ifdef x__WXDEBUG__
+    wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED, myID_WINDOW_MINIMAL);
+    wxPostEvent(this, event);
+#endif
 }
 
-AppFrame::~AppFrame () {
+MainFrame::~MainFrame()
+{
+    if (m_editmenu_handler)
+    {
+        RemoveEventHandler(m_editmenu_handler);
+        wxDELETE(m_editmenu_handler)
+    }
 }
 
 // common event handlers
-void AppFrame::OnClose (wxCloseEvent &event) {
+void MainFrame::OnClose(wxCloseEvent &event)
+{
     wxCommandEvent evt;
-    OnFileClose (evt);
-    if (m_edit && m_edit->Modified()) {
-        if (event.CanVeto()) event.Veto (true);
+    OnFileClose(evt);
+    if (m_edit && m_edit->Modified())
+    {
+        if (event.CanVeto()) event.Veto(true);
         return;
     }
     Destroy();
 }
 
-void AppFrame::OnAbout (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+{
     AppAbout dlg(this);
 }
 
-void AppFrame::OnExit (wxCommandEvent &WXUNUSED(event)) {
-    Close (true);
+void MainFrame::OnExit(wxCommandEvent& WXUNUSED(event))
+{
+    Close(true);
 }
 
 // file event handlers
-void AppFrame::OnFileOpen (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnFileOpen(wxCommandEvent& WXUNUSED(event))
+{
     if (!m_edit) return;
 #if wxUSE_FILEDLG
     wxString fname;
-    wxFileDialog dlg (this, _T("Open file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"),
+    wxFileDialog dlg (this, wxT("Open file"), wxEmptyString, wxEmptyString, wxALL_FILES,
                       wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
     if (dlg.ShowModal() != wxID_OK) return;
-    fname = dlg.GetPath ();
-    FileOpen (fname);
+    fname = dlg.GetPath();
+    FileOpen(fname);
 #endif // wxUSE_FILEDLG
 }
 
-void AppFrame::OnFileSave (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnFileSave(wxCommandEvent& WXUNUSED(event))
+{
     if (!m_edit) return;
-    if (!m_edit->Modified()) {
-        wxMessageBox (_("There is nothing to save!"), _("Save file"),
+    if (!m_edit->Modified())
+    {
+        wxMessageBox(_("There is nothing to save!"), _("Save file"),
                       wxOK | wxICON_EXCLAMATION);
         return;
     }
-    m_edit->SaveFile ();
+    m_edit->SaveFile();
 }
 
-void AppFrame::OnFileSaveAs (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnFileSaveAs(wxCommandEvent& WXUNUSED(event))
+{
     if (!m_edit) return;
 #if wxUSE_FILEDLG
     wxString filename = wxEmptyString;
-    wxFileDialog dlg (this, _T("Save file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"), wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
+    wxFileDialog dlg (this, wxT("Save file"), wxEmptyString, wxEmptyString, wxALL_FILES, wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
     if (dlg.ShowModal() != wxID_OK) return;
     filename = dlg.GetPath();
-    m_edit->SaveFile (filename);
+    m_edit->SaveFile(filename);
 #endif // wxUSE_FILEDLG
 }
 
-void AppFrame::OnFileClose (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnFileClose(wxCommandEvent& WXUNUSED(event))
+{
     if (!m_edit) return;
-    if (m_edit->Modified()) {
-        if (wxMessageBox (_("Text is not saved, save before closing?"), _("Close"),
-                          wxYES_NO | wxICON_QUESTION) == wxYES) {
+    if (m_edit->Modified())
+    {
+        if (wxMessageBox(_("Text is not saved, save before closing?"), _("Close"),
+                          wxYES_NO | wxICON_QUESTION) == wxYES)
+        {
             m_edit->SaveFile();
-            if (m_edit->Modified()) {
-                wxMessageBox (_("Text could not be saved!"), _("Close abort"),
+            if (m_edit->Modified())
+            {
+                wxMessageBox(_("Text could not be saved!"), _("Close abort"),
                               wxOK | wxICON_EXCLAMATION);
                 return;
             }
         }
     }
-    m_edit->SetFilename (wxEmptyString);
+    m_edit->SetFilename(wxEmptyString);
     m_edit->ClearAll();
     m_edit->SetSavePoint();
 }
 
 // properties event handlers
-void AppFrame::OnProperties (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnProperties(wxCommandEvent& WXUNUSED(event))
+{
     if (!m_edit) return;
     EditProperties dlg(m_edit, 0);
 }
 
 // print event handlers
-void AppFrame::OnPrintSetup (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnPrintSetup(wxCommandEvent& WXUNUSED(event))
+{
 #if wxUSE_PRINTING_ARCHITECTURE
     (*g_pageSetupData) = * g_printData;
     wxPageSetupDialog pageSetupDialog(this, g_pageSetupData);
@@ -415,38 +585,41 @@
 #endif // wxUSE_PRINTING_ARCHITECTURE
 }
 
-void AppFrame::OnPrintPreview (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnPrintPreview(wxCommandEvent& WXUNUSED(event))
+{
 #if wxUSE_PRINTING_ARCHITECTURE
     wxPrintDialogData printDialogData( *g_printData);
     wxPrintPreview *preview =
-        new wxPrintPreview (new EditPrint (m_edit),
-                            new EditPrint (m_edit),
-                            &printDialogData);
-    if (!preview->Ok()) {
-        delete preview;
-        wxMessageBox (_("There was a problem with previewing.\n\
-                         Perhaps your current printer is not correctly?"),
-                      _("Previewing"), wxOK);
+        new wxPrintPreview(new EditPrint (m_edit),
+                           new EditPrint (m_edit),
+                           &printDialogData);
+    if (!preview->Ok())
+    {
+        wxDELETE(preview)
+        wxMessageBox(_("There was a problem with previewing.\nPerhaps your current printer is not correctly?"),
+                     _("Previewing"), wxOK);
         return;
     }
     wxRect rect = DeterminePrintSize();
-    wxPreviewFrame *frame = new wxPreviewFrame (preview, this, _("Print Preview"));
-    frame->SetSize (rect);
+    wxPreviewFrame *frame = new wxPreviewFrame(preview, this);
+    frame->SetSize(rect);
     frame->Centre(wxBOTH);
     frame->Initialize();
     frame->Show(true);
 #endif // wxUSE_PRINTING_ARCHITECTURE
 }
 
-void AppFrame::OnPrint (wxCommandEvent &WXUNUSED(event)) {
+void MainFrame::OnPrint(wxCommandEvent& WXUNUSED(event))
+{
 #if wxUSE_PRINTING_ARCHITECTURE
     wxPrintDialogData printDialogData( *g_printData);
-    wxPrinter printer (&printDialogData);
-    EditPrint printout (m_edit);
-    if (!printer.Print (this, &printout, true)) {
-        if (wxPrinter::GetLastError() == wxPRINTER_ERROR) {
-        wxMessageBox (_("There was a problem with printing.\n\
-                         Perhaps your current printer is not correctly?"),
+    wxPrinter printer(&printDialogData);
+    EditPrint printout(m_edit);
+    if (!printer.Print(this, &printout, true))
+    {
+        if (wxPrinter::GetLastError() == wxPRINTER_ERROR)
+        {
+            wxMessageBox(_("There was a problem with printing.\nPerhaps your current printer is not correctly?"),
                       _("Previewing"), wxOK);
             return;
         }
@@ -456,140 +629,145 @@
 }
 
 // edit events
-void AppFrame::OnEdit (wxCommandEvent &event) {
-    if (m_edit) m_edit->ProcessEvent (event);
+void MainFrame::OnEdit(wxCommandEvent& event)
+{
+    if (m_edit) m_edit->ProcessEvent(event);
 }
 
 // private functions
-void AppFrame::CreateMenu ()
+void MainFrame::CreateMenu()
 {
     // File menu
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append (wxID_OPEN, _("&Open ..\tCtrl+O"));
-    menuFile->Append (wxID_SAVE, _("&Save\tCtrl+S"));
-    menuFile->Append (wxID_SAVEAS, _("Save &as ..\tCtrl+Shift+S"));
-    menuFile->Append (wxID_CLOSE, _("&Close\tCtrl+W"));
+    menuFile->Append(wxID_OPEN);
+    menuFile->Append(wxID_SAVE);
+    menuFile->Append(wxID_SAVEAS, _("Save &As...\tCtrl+Shift+S"));
+    menuFile->Append(wxID_CLOSE, _("&Close\tCtrl+W"));
     menuFile->AppendSeparator();
-    menuFile->Append (myID_PROPERTIES, _("Proper&ties ..\tCtrl+I"));
+    menuFile->Append(myID_PROPERTIES, _("Proper&ties...\tCtrl+I"));
     menuFile->AppendSeparator();
-    menuFile->Append (wxID_PRINT_SETUP, _("Print Set&up .."));
-    menuFile->Append (wxID_PREVIEW, _("Print Pre&view\tCtrl+Shift+P"));
-    menuFile->Append (wxID_PRINT, _("&Print ..\tCtrl+P"));
+    menuFile->Append(wxID_PRINT_SETUP, _("Print Set&up..."));
+    menuFile->Append(wxID_PREVIEW, _("Print Pre&view\tCtrl+Shift+P"));
+    menuFile->Append(wxID_PRINT, _("&Print...\tCtrl+P"));
     menuFile->AppendSeparator();
-    menuFile->Append (wxID_EXIT, _("&Quit\tCtrl+Q"));
+    menuFile->Append(wxID_EXIT, _("&Quit\tCtrl+Q"));
 
     // Edit menu
     wxMenu *menuEdit = new wxMenu;
-    menuEdit->Append (wxID_UNDO, _("&Undo\tCtrl+Z"));
-    menuEdit->Append (wxID_REDO, _("&Redo\tCtrl+Shift+Z"));
+    menuEdit->Append(wxID_UNDO, _("&Undo\tCtrl+Z"));
+    menuEdit->Append(wxID_REDO, _("&Redo\tCtrl+Shift+Z"));
     menuEdit->AppendSeparator();
-    menuEdit->Append (wxID_CUT, _("Cu&t\tCtrl+X"));
-    menuEdit->Append (wxID_COPY, _("&Copy\tCtrl+C"));
-    menuEdit->Append (wxID_PASTE, _("&Paste\tCtrl+V"));
-    menuEdit->Append (wxID_CLEAR, _("&Delete\tDel"));
+    menuEdit->Append(wxID_CUT);
+    menuEdit->Append(wxID_COPY);
+    menuEdit->Append(wxID_PASTE);
+    menuEdit->Append(wxID_CLEAR, _("&Delete\tDel"));
     menuEdit->AppendSeparator();
-    menuEdit->Append (wxID_FIND, _("&Find\tCtrl+F"));
-    menuEdit->Enable (wxID_FIND, false);
-    menuEdit->Append (myID_FINDNEXT, _("Find &next\tF3"));
-    menuEdit->Enable (myID_FINDNEXT, false);
-    menuEdit->Append (myID_REPLACE, _("&Replace\tCtrl+H"));
-    menuEdit->Enable (myID_REPLACE, false);
-    menuEdit->Append (myID_REPLACENEXT, _("Replace &again\tShift+F4"));
-    menuEdit->Enable (myID_REPLACENEXT, false);
+    menuEdit->Append(wxID_FIND, _("&Find\tCtrl+F"));
+    menuEdit->Enable(wxID_FIND, false);
+    menuEdit->Append(myID_FINDNEXT, _("Find &next\tF3"));
+    menuEdit->Enable(myID_FINDNEXT, false);
+    menuEdit->Append(myID_REPLACE, _("&Replace\tCtrl+H"));
+    menuEdit->Enable(myID_REPLACE, false);
+    menuEdit->Append(myID_REPLACENEXT, _("Replace &again\tShift+F4"));
+    menuEdit->Enable(myID_REPLACENEXT, false);
     menuEdit->AppendSeparator();
-    menuEdit->Append (myID_BRACEMATCH, _("&Match brace\tCtrl+M"));
-    menuEdit->Append (myID_GOTO, _("&Goto\tCtrl+G"));
-    menuEdit->Enable (myID_GOTO, false);
+    menuEdit->Append(myID_BRACEMATCH, _("&Match brace\tCtrl+M"));
+    menuEdit->Append(myID_GOTO, _("&Goto\tCtrl+G"));
+    menuEdit->Enable(myID_GOTO, false);
     menuEdit->AppendSeparator();
-    menuEdit->Append (myID_INDENTINC, _("&Indent increase\tTab"));
-    menuEdit->Append (myID_INDENTRED, _("I&ndent reduce\tBackspace"));
+    menuEdit->Append(myID_INDENTINC, _("&Indent increase\tTab"));
+    menuEdit->Append(myID_INDENTRED, _("I&ndent reduce\tBackspace"));
     menuEdit->AppendSeparator();
-    menuEdit->Append (wxID_SELECTALL, _("&Select all\tCtrl+A"));
-    menuEdit->Append (myID_SELECTLINE, _("Select &line\tCtrl+L"));
+    menuEdit->Append(wxID_SELECTALL, _("&Select all\tCtrl+A"));
+    menuEdit->Append(myID_SELECTLINE, _("Select &line\tCtrl+L"));
 
     // hilight submenu
     wxMenu *menuHilight = new wxMenu;
     int Nr;
-    for (Nr = 0; Nr < g_LanguagePrefsSize; Nr++) {
-        menuHilight->Append (myID_HILIGHTFIRST + Nr,
+    for (Nr = 0; Nr < g_LanguagePrefsSize; Nr++)
+    {
+        menuHilight->Append(myID_HILIGHTFIRST + Nr,
                              g_LanguagePrefs [Nr].name);
     }
 
     // charset submenu
     wxMenu *menuCharset = new wxMenu;
-    menuCharset->Append (myID_CHARSETANSI, _("&ANSI (Windows)"));
-    menuCharset->Append (myID_CHARSETMAC, _("&MAC (Macintosh)"));
+    menuCharset->Append(myID_CHARSETANSI, _("&ANSI (Windows)"));
+    menuCharset->Append(myID_CHARSETMAC, _("&MAC (Macintosh)"));
 
     // View menu
     wxMenu *menuView = new wxMenu;
-    menuView->Append (myID_HILIGHTLANG, _("&Hilight language .."), menuHilight);
+    menuView->Append(myID_HILIGHTLANG, _("&Hilight language..."), menuHilight);
     menuView->AppendSeparator();
-    menuView->AppendCheckItem (myID_FOLDTOGGLE, _("&Toggle current fold\tCtrl+T"));
-    menuView->AppendCheckItem (myID_OVERTYPE, _("&Overwrite mode\tIns"));
-    menuView->AppendCheckItem (myID_WRAPMODEON, _("&Wrap mode\tCtrl+U"));
+    menuView->AppendCheckItem(myID_FOLDTOGGLE, _("&Toggle current fold\tCtrl+T"));
+    menuView->AppendCheckItem(myID_OVERTYPE, _("&Overwrite mode\tIns"));
+    menuView->AppendCheckItem(myID_WRAPMODEON, _("&Wrap mode\tCtrl+U"));
     menuView->AppendSeparator();
-    menuView->AppendCheckItem (myID_DISPLAYEOL, _("Show line &endings"));
-    menuView->AppendCheckItem (myID_INDENTGUIDE, _("Show &indent guides"));
-    menuView->AppendCheckItem (myID_LINENUMBER, _("Show line &numbers"));
-    menuView->AppendCheckItem (myID_LONGLINEON, _("Show &long line marker"));
-    menuView->AppendCheckItem (myID_WHITESPACE, _("Show white&space"));
+    menuView->AppendCheckItem(myID_DISPLAYEOL, _("Show line &endings"));
+    menuView->AppendCheckItem(myID_INDENTGUIDE, _("Show &indent guides"));
+    menuView->AppendCheckItem(myID_LINENUMBER, _("Show line &numbers"));
+    menuView->AppendCheckItem(myID_LONGLINEON, _("Show &long line marker"));
+    menuView->AppendCheckItem(myID_WHITESPACE, _("Show white&space"));
     menuView->AppendSeparator();
-    menuView->Append (myID_USECHARSET, _("Use &code page of .."), menuCharset);
+    menuView->Append(myID_USECHARSET, _("Use &code page of..."), menuCharset);
 
     // change case submenu
     wxMenu *menuChangeCase = new wxMenu;
-    menuChangeCase->Append (myID_CHANGEUPPER, _("&Upper case"));
-    menuChangeCase->Append (myID_CHANGELOWER, _("&Lower case"));
+    menuChangeCase->Append(myID_CHANGEUPPER, _("&Upper case"));
+    menuChangeCase->Append(myID_CHANGELOWER, _("&Lower case"));
 
     // convert EOL submenu
     wxMenu *menuConvertEOL = new wxMenu;
-    menuConvertEOL->Append (myID_CONVERTCR, _("CR (&Linux)"));
-    menuConvertEOL->Append (myID_CONVERTCRLF, _("CR+LF (&Windows)"));
-    menuConvertEOL->Append (myID_CONVERTLF, _("LF (&Macintosh)"));
+    menuConvertEOL->Append(myID_CONVERTCR, _("CR (&Linux)"));
+    menuConvertEOL->Append(myID_CONVERTCRLF, _("CR+LF (&Windows)"));
+    menuConvertEOL->Append(myID_CONVERTLF, _("LF (&Macintosh)"));
 
     // Extra menu
     wxMenu *menuExtra = new wxMenu;
-    menuExtra->AppendCheckItem (myID_READONLY, _("&Readonly mode"));
+    menuExtra->AppendCheckItem(myID_READONLY, _("&Readonly mode"));
     menuExtra->AppendSeparator();
-    menuExtra->Append (myID_CHANGECASE, _("Change &case to .."), menuChangeCase);
+    menuExtra->Append(myID_CHANGECASE, _("Change &case to..."), menuChangeCase);
     menuExtra->AppendSeparator();
-    menuExtra->Append (myID_CONVERTEOL, _("Convert line &endings to .."), menuConvertEOL);
+    menuExtra->Append(myID_CONVERTEOL, _("Convert line &endings to..."), menuConvertEOL);
 
     // Window menu
     wxMenu *menuWindow = new wxMenu;
-    menuWindow->Append (myID_PAGEPREV, _("&Previous\tCtrl+Shift+Tab"));
-    menuWindow->Append (myID_PAGENEXT, _("&Next\tCtrl+Tab"));
+    menuWindow->Append(myID_PAGEPREV, _("&Previous\tCtrl+Shift+Tab"));
+    menuWindow->Append(myID_PAGENEXT, _("&Next\tCtrl+Tab"));
+    menuExtra->AppendSeparator();
+    menuWindow->Append(myID_WINDOW_MINIMAL, _("&Minimal editor"));
 
     // Help menu
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append (wxID_ABOUT, _("&About ..\tShift+F1"));
+    menuHelp->Append(wxID_ABOUT, _("&About...\tShift+F1"));
 
     // construct menu
-    m_menuBar->Append (menuFile, _("&File"));
-    m_menuBar->Append (menuEdit, _("&Edit"));
-    m_menuBar->Append (menuView, _("&View"));
-    m_menuBar->Append (menuExtra, _("E&xtra"));
-    m_menuBar->Append (menuWindow, _("&Window"));
-    m_menuBar->Append (menuHelp, _("&Help"));
-    SetMenuBar (m_menuBar);
+    m_menuBar->Append(menuFile, wxGetStockLabel(wxID_FILE));
+    m_menuBar->Append(menuEdit, wxGetStockLabel(wxID_EDIT));
+    m_menuBar->Append(menuView, _("&View"));
+    m_menuBar->Append(menuExtra, _("E&xtra"));
+    m_menuBar->Append(menuWindow, _("&Window"));
+    m_menuBar->Append(menuHelp, wxGetStockLabel(wxID_HELP));
+    SetMenuBar(m_menuBar);
 }
 
-void AppFrame::FileOpen (wxString fname)
+void MainFrame::FileOpen(const wxString& fname)
 {
-    wxFileName w(fname); w.Normalize(); fname = w.GetFullPath();
-    m_edit->LoadFile (fname);
+    wxFileName w(fname);
+    w.Normalize();
+    m_edit->LoadFile(w.GetFullPath());
 }
 
-wxRect AppFrame::DeterminePrintSize () {
-
+wxRect MainFrame::DeterminePrintSize()
+{
     wxSize scr = wxGetDisplaySize();
 
     // determine position and size (shifting 16 left and down)
     wxRect rect = GetRect();
     rect.x += 16;
     rect.y += 16;
-    rect.width = wxMin (rect.width, (scr.x - rect.x));
-    rect.height = wxMin (rect.height, (scr.x - rect.y));
+    rect.width = wxMin(rect.width, (scr.x - rect.x));
+    rect.height = wxMin(rect.height, (scr.x - rect.y));
 
     return rect;
 }
@@ -599,85 +777,214 @@
 // AppAbout
 //----------------------------------------------------------------------------
 
-BEGIN_EVENT_TABLE (AppAbout, wxDialog)
-    EVT_TIMER (myID_ABOUTTIMER, AppAbout::OnTimerEvent)
-END_EVENT_TABLE ()
+BEGIN_EVENT_TABLE(AppAbout, wxDialog)
+    EVT_TIMER(myID_ABOUTTIMER, AppAbout::OnTimerEvent)
+END_EVENT_TABLE()
 
-AppAbout::AppAbout (wxWindow *parent,
-                    int milliseconds,
-                    long style)
-        : wxDialog (parent, wxID_ANY, wxEmptyString,
-                    wxDefaultPosition, wxDefaultSize,
-                    style | wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER) {
-
+AppAbout::AppAbout(wxWindow *parent, int milliseconds, long style)
+        : wxDialog(parent, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
+                   style | wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
+{
     // set timer if any
     m_timer = NULL;
-    if (milliseconds > 0) {
-        m_timer = new wxTimer (this, myID_ABOUTTIMER);
-        m_timer->Start (milliseconds, wxTIMER_ONE_SHOT);
+    if (milliseconds > 0)
+    {
+        m_timer = new wxTimer(this, myID_ABOUTTIMER);
+        m_timer->Start(milliseconds, wxTIMER_ONE_SHOT);
     }
 
     // sets the application title
-    SetTitle (_("About .."));
+    SetTitle(_("About"));
 
     // about info
-    wxGridSizer *aboutinfo = new wxGridSizer (2, 0, 2);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, _("Written by: ")),
-                    0, wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, APP_MAINT),
-                    1, wxEXPAND | wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, _("Version: ")),
-                    0, wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, APP_VERSION),
-                    1, wxEXPAND | wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, _("Licence type: ")),
-                    0, wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, APP_LICENCE),
-                    1, wxEXPAND | wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, _("Copyright: ")),
-                    0, wxALIGN_LEFT);
-    aboutinfo->Add (new wxStaticText(this, wxID_ANY, APP_COPYRIGTH),
-                    1, wxEXPAND | wxALIGN_LEFT);
+    wxGridSizer *aboutinfo = new wxGridSizer(2, 0, 2);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, _("Written by: ")), 0, wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, APP_MAINT), 1, wxEXPAND | wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, _("Version: ")), 0, wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, APP_VERSION), 1, wxEXPAND | wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, _("Licence type: ")), 0, wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, APP_LICENCE), 1, wxEXPAND | wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, _("Copyright: ")), 0, wxALIGN_LEFT);
+    aboutinfo->Add(new wxStaticText(this, wxID_ANY, APP_COPYRIGHT), 1, wxEXPAND | wxALIGN_LEFT);
 
     // about icontitle//info
-    wxBoxSizer *aboutpane = new wxBoxSizer (wxHORIZONTAL);
-    wxBitmap bitmap = wxBitmap(wxICON (mondrian));
-    aboutpane->Add (new wxStaticBitmap (this, wxID_ANY, bitmap),
-                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 20);
-    aboutpane->Add (aboutinfo, 1, wxEXPAND);
-    aboutpane->Add (60, 0);
+    wxBoxSizer *aboutpane = new wxBoxSizer(wxHORIZONTAL);
+    wxBitmap bitmap = wxBitmap(wxICON(mondrian));
+    aboutpane->Add(new wxStaticBitmap (this, wxID_ANY, bitmap),
+                   0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 20);
+    aboutpane->Add(aboutinfo, 1, wxEXPAND);
+    aboutpane->Add(60, 0);
 
     // about complete
-    wxBoxSizer *totalpane = new wxBoxSizer (wxVERTICAL);
-    totalpane->Add (0, 20);
-    wxStaticText *appname = new wxStaticText(this, wxID_ANY, *g_appname);
-    appname->SetFont (wxFont (24, wxDEFAULT, wxNORMAL, wxBOLD));
-    totalpane->Add (appname, 0, wxALIGN_CENTER | wxLEFT | wxRIGHT, 40);
-    totalpane->Add (0, 10);
-    totalpane->Add (aboutpane, 0, wxEXPAND | wxALL, 4);
-    totalpane->Add (new wxStaticText(this, wxID_ANY, APP_DESCR),
-                    0, wxALIGN_CENTER | wxALL, 10);
-    wxButton *okButton = new wxButton (this, wxID_OK, _("OK"));
-    okButton->SetDefault();
-    totalpane->Add (okButton, 0, wxALIGN_CENTER | wxLEFT | wxRIGHT | wxBOTTOM, 10);
+    wxBoxSizer *totalpane = new wxBoxSizer(wxVERTICAL);
+    totalpane->Add(0, 20);
+    wxStaticText *appname = new wxStaticText(this, wxID_ANY, wxTheApp->GetAppDisplayName());
+    appname->SetFont(wxFont (24, wxDEFAULT, wxNORMAL, wxBOLD));
+    totalpane->Add(appname, 0, wxALIGN_CENTER | wxLEFT | wxRIGHT, 40);
+    totalpane->Add(0, 10);
+    totalpane->Add(aboutpane, 0, wxEXPAND | wxALL, 4);
+    totalpane->Add(new wxStaticText(this, wxID_ANY, APP_DESCR), 0, wxALIGN_CENTER | wxALL, 10);
+    wxButton *okButton = new wxButton(this, wxID_OK, _("OK"));
+    if (m_timer)
+    {
+        okButton->Show(false);
+    }
+    else
+    {
+        okButton->SetDefault();
+    }
+    totalpane->Add(okButton, 0, wxALIGN_CENTER | wxLEFT | wxRIGHT | wxBOTTOM, 10);
 
-    SetSizerAndFit (totalpane);
+    SetSizerAndFit(totalpane);
 
-    CenterOnScreen();
+    if (m_timer) CenterOnScreen();
+    else Center();
     ShowModal();
 }
 
-AppAbout::~AppAbout () {
-    if (m_timer)  {
-        delete m_timer;
-        m_timer = NULL;
-    }
+AppAbout::~AppAbout()
+{
+    wxDELETE(m_timer)
 }
 
 //----------------------------------------------------------------------------
 // event handlers
-void AppAbout::OnTimerEvent (wxTimerEvent &WXUNUSED(event)) {
-    if (m_timer) delete m_timer;
-    m_timer = NULL;
-    EndModal (wxID_OK);
+void AppAbout::OnTimerEvent(wxTimerEvent &WXUNUSED(event))
+{
+    wxDELETE(m_timer)
+    EndModal(wxID_OK);
 }
+
+/////////////////////////////////////////////////////////////////////////////
+// Minimal editor added by Troels K 2008-04-08
+// Thanks to geralds for SetLexerXml() - http://wxforum.shadonet.com/viewtopic.php?t=7155
+
+class MinimalEditor : public wxStyledTextCtrl
+{
+    enum
+    {
+        margin_id_lineno,
+        margin_id_fold,
+    };
+
+public:
+    MinimalEditor(wxWindow* parent, wxWindowID id = wxID_ANY) : wxStyledTextCtrl(parent, id)
+    {
+        SetLexerXml();
+
+        SetProperty(wxT("fold"), wxT("1"));
+        SetProperty(wxT("fold.comment"), wxT("1"));
+        SetProperty(wxT("fold.compact"), wxT("1"));
+        SetProperty(wxT("fold.preprocessor"), wxT("1"));
+        SetProperty(wxT("fold.html"), wxT("1"));
+        SetProperty(wxT("fold.html.preprocessor"), wxT("1"));
+
+        SetMarginType(margin_id_lineno, wxSTC_MARGIN_NUMBER);
+        SetMarginWidth(margin_id_lineno, 32);
+
+        MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_BOXPLUS, wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_BOXMINUS,  wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_VLINE,     wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_BOXPLUSCONNECTED, wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_BOXMINUSCONNECTED, wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_TCORNER,     wxT("WHITE"), wxT("BLACK"));
+        MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_LCORNER,     wxT("WHITE"), wxT("BLACK"));
+
+        SetMarginMask(margin_id_fold, wxSTC_MASK_FOLDERS);
+        SetMarginWidth(margin_id_fold, 32);
+        SetMarginSensitive(margin_id_fold, true);
+
+        SetFoldFlags(wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED | wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
+
+        SetTabWidth(4);
+        SetUseTabs(false);
+        SetWrapMode(wxSTC_WRAP_WORD);
+        SetWrapVisualFlags(wxSTC_WRAPVISUALFLAG_END);
+    }
+    virtual bool SetFont(const wxFont& font)
+    {
+        StyleSetFont(wxSTC_STYLE_DEFAULT, (wxFont&)font);
+        return wxStyledTextCtrl::SetFont(font);
+    }
+    void SetLexerXml()
+    {
+        SetLexer(wxSTC_LEX_XML);
+        StyleSetForeground(wxSTC_H_DEFAULT, *wxBLACK);
+        StyleSetForeground(wxSTC_H_TAG, *wxBLUE);
+        StyleSetForeground(wxSTC_H_TAGUNKNOWN, *wxBLUE);
+        StyleSetForeground(wxSTC_H_ATTRIBUTE, *wxRED);
+        StyleSetForeground(wxSTC_H_ATTRIBUTEUNKNOWN, *wxRED);
+        StyleSetBold(wxSTC_H_ATTRIBUTEUNKNOWN, true);
+        StyleSetForeground(wxSTC_H_NUMBER, *wxBLACK);
+        StyleSetForeground(wxSTC_H_DOUBLESTRING, *wxBLACK);
+        StyleSetForeground(wxSTC_H_SINGLESTRING, *wxBLACK);
+        StyleSetForeground(wxSTC_H_OTHER, *wxBLUE);
+        StyleSetForeground(wxSTC_H_COMMENT, wxTheColourDatabase->Find(wxT("GREY")));
+        StyleSetForeground(wxSTC_H_ENTITY, *wxRED);
+        StyleSetBold(wxSTC_H_ENTITY, true);
+        StyleSetForeground(wxSTC_H_TAGEND, *wxBLUE);
+        StyleSetForeground(wxSTC_H_XMLSTART, *wxBLUE);
+        StyleSetForeground(wxSTC_H_XMLEND, *wxBLUE);
+        StyleSetForeground(wxSTC_H_CDATA, *wxRED);
+    }
+protected:
+    void OnMarginClick(wxStyledTextEvent&);
+    void OnText(wxStyledTextEvent&);
+    DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(MinimalEditor, wxStyledTextCtrl)
+    EVT_STC_MARGINCLICK(wxID_ANY, MinimalEditor::OnMarginClick)
+    EVT_STC_CHANGE(wxID_ANY, MinimalEditor::OnText)
+END_EVENT_TABLE()
+
+void MinimalEditor::OnMarginClick(wxStyledTextEvent &event)
+{
+    if (event.GetMargin() == margin_id_fold)
+    {
+        int lineClick = LineFromPosition(event.GetPosition());
+        int levelClick = GetFoldLevel(lineClick);
+        if ((levelClick & wxSTC_FOLDLEVELHEADERFLAG) > 0)
+        {
+            ToggleFold(lineClick);
+        }
+    }
+}
+
+void MinimalEditor::OnText(wxStyledTextEvent& event)
+{
+    wxLogDebug(wxT("Modified"));
+    event.Skip();
+}
+
+class MinimalEditorFrame : public wxFrame
+{
+public:
+    MinimalEditorFrame() : wxFrame(NULL, wxID_ANY, _("Minimal Editor"))
+    {
+        MinimalEditor* editor = new MinimalEditor(this);
+        editor->SetFont(wxSystemSettings::GetFont(wxSYS_ANSI_FIXED_FONT));
+        wxBoxSizer* sizer = new wxBoxSizer(wxHORIZONTAL);
+        sizer->Add(editor, 1, wxEXPAND);
+        SetSizer(sizer);
+        editor->SetText(
+           "<xml>\n"
+           "   <text>\n"
+           "      This is xml with syntax highlighting, line numbers, folding, word wrap and context menu\n"
+           "   </text>\n"
+           "</xml>"
+           );
+    }
+};
+
+wxFrame* App::MinimalEditor()
+{
+    MinimalEditorFrame* frame = new MinimalEditorFrame;
+    frame->Show();
+    return frame;
+}
+
+void App::OnMinimalEditor(wxCommandEvent& WXUNUSED(event))
+{
+    MinimalEditor();
+}

 	  	 

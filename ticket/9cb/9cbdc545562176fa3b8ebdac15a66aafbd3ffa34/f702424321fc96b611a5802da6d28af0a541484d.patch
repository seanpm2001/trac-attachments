Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 56079)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -556,6 +556,57 @@
 END_EVENT_TABLE()
 
 
+class ToolBarFrame : public wxFrame
+{
+public:
+    wxAuiManager mgr;
+    void Create()
+    {
+        wxFrame::Create(NULL, wxID_ANY, wxT("ToolBarFrame"));
+      
+        wxAuiToolBar* tb_aui = new wxAuiToolBar(this, wxID_ANY);
+        tb_aui->AddTool(wxID_CLOSE, wxT("Quit"), wxArtProvider::GetBitmap(wxART_QUIT));
+        tb_aui->Realize();
+
+        wxToolBar* tb_native = new wxToolBar(this, wxID_ANY);
+        tb_native->AddTool(wxID_CLOSE, wxT("Quit"), wxArtProvider::GetBitmap(wxART_QUIT));
+        tb_native->Realize();
+
+        mgr.SetManagedWindow(this);
+
+        mgr.AddPane(tb_aui   , wxAuiPaneInfo().CaptionVisible(false).Top());
+        mgr.AddPane(tb_native, wxAuiPaneInfo().CaptionVisible(false).Bottom());
+        mgr.Update();
+        Show();
+   }
+   virtual ~ToolBarFrame()
+   {
+       mgr.UnInit();
+   }
+   virtual bool Destroy()
+   {
+       // Use TLW destroy mechanism: delay -> no aui toolbar crash
+       //bool ok = wxTopLevelWindowBase::Destroy();
+
+       // Use non-TLW destroy mechanism: no delay -> aui toolbar crash
+       bool ok = wxWindow::Destroy();
+
+       return ok;
+   }
+
+   void OnMenuClose(wxCommandEvent&);
+   DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(ToolBarFrame, wxFrame)
+    EVT_MENU(wxID_CLOSE, ToolBarFrame::OnMenuClose)
+END_EVENT_TABLE()
+
+void ToolBarFrame::OnMenuClose(wxCommandEvent& WXUNUSED(event))
+{
+   Close(true);
+}
+
 bool MyApp::OnInit()
 {
     if ( !wxApp::OnInit() )
@@ -569,6 +620,8 @@
     SetTopWindow(frame);
     frame->Show();
 
+    (new ToolBarFrame())->Create();
+
     return true;
 }
 

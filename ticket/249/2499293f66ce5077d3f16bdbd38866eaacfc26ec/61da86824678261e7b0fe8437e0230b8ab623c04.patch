44c44
< #include "wx/dcscreen.h"
---
> #include "wx/paper.h"
111,112c111,112
<     wxScreenDC screenDC;
<     wxSize screenPPI = screenDC.GetPPI();
---
>     wxSize ScreenPixels = wxGetDisplaySize();
>     wxSize ScreenMM = wxGetDisplaySizeMM();
114,115c114,115
<     printout->SetPPIScreen( screenPPI.GetWidth(),
<                             screenPPI.GetHeight() );
---
>     printout->SetPPIScreen( (int) ((ScreenPixels.GetWidth() * 25.4) / ScreenMM.GetWidth()),
>                             (int) ((ScreenPixels.GetHeight() * 25.4) / ScreenMM.GetHeight()) );
325c325,331
<     wxPostScriptDC dc( GetPrintDialogData().GetPrintData() );
---
>     wxPaperSize paperType = m_printDialogData.GetPrintData().GetPaperId();
>     if (paperType == wxPAPER_NONE)
>         paperType = wxPAPER_NONE;
> 
>     wxPrintPaperType *paper = wxThePrintPaperDatabase->FindPaperType(paperType);
>     if (!paper)
>         paper = wxThePrintPaperDatabase->FindPaperType(wxPAPER_A4);
327,328c333,336
<     wxScreenDC screenDC;
<     wxSize screenPPI = screenDC.GetPPI();
---
>     if (paper)
>     {
>         wxSize ScreenPixels = wxGetDisplaySize();
>         wxSize ScreenMM = wxGetDisplaySizeMM();
330,336c338,346
<     m_previewPrintout->SetPPIScreen( screenPPI.GetWidth(), 
<                                      screenPPI.GetHeight() );
<     m_previewPrintout->SetPPIPrinter( wxPostScriptDC::GetResolution(), 
<                                       wxPostScriptDC::GetResolution() );
<     int mw, mh;
<     dc.GetSizeMM(&mw, &mh);
<     m_previewPrintout->SetPageSizeMM((int)mw, (int)mh);
---
>         m_previewPrintout->SetPPIScreen( (int) ((ScreenPixels.GetWidth() * 25.4) / ScreenMM.GetWidth()),
>                                          (int) ((ScreenPixels.GetHeight() * 25.4) / ScreenMM.GetHeight()) );
>         m_previewPrintout->SetPPIPrinter(wxPostScriptDC::GetResolution(), wxPostScriptDC::GetResolution());
> 
>         wxSize sizeDevUnits(paper->GetSizeDeviceUnits());
>         sizeDevUnits.x = (wxCoord)((float)sizeDevUnits.x * wxPostScriptDC::GetResolution() / 72.0);
>         sizeDevUnits.y = (wxCoord)((float)sizeDevUnits.y * wxPostScriptDC::GetResolution() / 72.0);
>         wxSize sizeTenthsMM(paper->GetSize());
>         wxSize sizeMM(sizeTenthsMM.x / 10, sizeTenthsMM.y / 10);
338,348c348,367
<     int w, h;
<     dc.GetSize(&w, &h);
<     m_previewPrintout->SetPageSizePixels((int)w, (int)h);
<     m_previewPrintout->SetPaperRectPixels(wxRect(0, 0, w, h));
< 
<     m_pageWidth = w;
<     m_pageHeight = h;
< 
<     // At 100%, the page should look about page-size on the screen.
<     m_previewScaleX = float(screenPPI.GetWidth()) / wxPostScriptDC::GetResolution();
<     m_previewScaleY = float(screenPPI.GetHeight()) / wxPostScriptDC::GetResolution();
---
>         // If in landscape mode, we need to swap the width and height.
>         if ( m_printDialogData.GetPrintData().GetOrientation() == wxLANDSCAPE )
>         {
>             m_pageWidth = sizeDevUnits.y;
>             m_pageHeight = sizeDevUnits.x;
>             m_previewPrintout->SetPageSizeMM(sizeMM.y, sizeMM.x);
>         }
>         else
>         {
>             m_pageWidth = sizeDevUnits.x;
>             m_pageHeight = sizeDevUnits.y;
>             m_previewPrintout->SetPageSizeMM(sizeMM.x, sizeMM.y);
>         }
>         m_previewPrintout->SetPageSizePixels(m_pageWidth, m_pageHeight);
>         m_previewPrintout->SetPaperRectPixels(wxRect(0, 0, m_pageWidth, m_pageHeight));
> 
>         // At 100%, the page should look about page-size on the screen.
>         m_previewScaleX = (float)0.8 * 72.0 / (float)wxPostScriptDC::GetResolution();
>         m_previewScaleY = m_previewScaleX;
>     }

 	  	 

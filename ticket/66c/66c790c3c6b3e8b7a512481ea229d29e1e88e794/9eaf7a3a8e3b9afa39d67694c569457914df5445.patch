Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	(revision 63602)
+++ src/common/datavcmn.cpp	(working copy)
@@ -589,25 +589,131 @@
     return const_cast<wxDataViewRendererBase*>(this)->GetOwner()->GetOwner();
 }
 
-class wxKillRef: public wxWindowRef
+namespace
 {
-public:
-   wxKillRef( wxWindow *win ) : wxWindowRef( win ) { }
-   virtual void OnObjectDestroy()
-   {
-      get()->PopEventHandler( true );
-      m_pobj = NULL;
-      delete this;
-   }
-};
+#ifndef wxHAS_EVENT_BIND
+    class EditorCtrlEvtHandler : public wxEvtHandler
+#else
+    class EditorCtrlEvtHandler
+#endif
+    {
+    public:
+        EditorCtrlEvtHandler( wxControl* editorCtrl, wxDataViewRenderer* owner )
+            : m_editorCtrl(editorCtrl), m_owner(owner), m_focusOnIdle(false)
+        {
+            m_editorCtrl->SetWindowStyleFlag(m_editorCtrl->GetWindowStyleFlag()|wxWANTS_CHARS);
 
+#ifndef wxHAS_EVENT_BIND
+            m_editorCtrl->Connect(wxID_ANY, wxEVT_CHAR, wxKeyEventHandler(EditorCtrlEvtHandler::OnChar), NULL, this);
+            m_editorCtrl->Connect(wxID_ANY, wxEVT_KILL_FOCUS, wxFocusEventHandler(EditorCtrlEvtHandler::OnKillFocus), NULL, this);
+            m_editorCtrl->Connect(wxID_ANY, wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(EditorCtrlEvtHandler::OnTextEnter), NULL, this);
+#    if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
+            m_editorCtrl->Connect(wxID_ANY, wxEVT_IDLE, wxIdleEventHandler(EditorCtrlEvtHandler::OnIdle), NULL, this);
+#    endif
+#else
+            m_editorCtrl->Bind(wxEVT_CHAR, &EditorCtrlEvtHandler::OnChar, this);
+            m_editorCtrl->Bind(wxEVT_KILL_FOCUS, &EditorCtrlEvtHandler::OnKillFocus, this);
+            m_editorCtrl->Bind(wxEVT_COMMAND_TEXT_ENTER, &EditorCtrlEvtHandler::OnTextEnter, this, wxID_ANY);
+#    if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
+            m_editorCtrl->Bind(wxEVT_IDLE, &EditorCtrlEvtHandler::OnIdle, this);
+#    endif
+#endif
+        }
+
+        void shutDownControl(bool canceled)
+        {
+#ifndef wxHAS_EVENT_BIND
+            // disconnect all handlers before telling our owner about the end of the edit operation
+#    if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
+            m_editorCtrl->Disconnect(wxID_ANY, wxEVT_IDLE, NULL, (wxObject*)NULL, this);
+#    endif
+            m_editorCtrl->Disconnect(wxID_ANY, wxEVT_COMMAND_TEXT_ENTER, NULL, (wxObject*)NULL, this);
+            m_editorCtrl->Disconnect(wxID_ANY, wxEVT_KILL_FOCUS, NULL, (wxObject*)NULL, this);
+            m_editorCtrl->Disconnect(wxID_ANY, wxEVT_CHAR, NULL, (wxObject*)NULL, this);
+#else
+            // unbind all handlers before telling our owner about the end of the edit operation
+#    if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
+            m_editorCtrl->Unbind(wxEVT_IDLE, &EditorCtrlEvtHandler::OnIdle, this);
+#    endif
+            m_editorCtrl->Unbind(wxEVT_COMMAND_TEXT_ENTER, &EditorCtrlEvtHandler::OnTextEnter, this, wxID_ANY);
+            m_editorCtrl->Unbind(wxEVT_KILL_FOCUS, &EditorCtrlEvtHandler::OnKillFocus, this);
+            m_editorCtrl->Unbind(wxEVT_CHAR, &EditorCtrlEvtHandler::OnChar, this);
+#endif
+
+            m_editorCtrl->Hide();
+
+            if(canceled)
+                m_owner->CancelEditing();
+            else
+                m_owner->FinishEditing();
+
+            wxTheApp->ScheduleForDestruction(m_editorCtrl);
+
+            // we can self-destruct now, because we are done with the editor
+            delete this;
+        }
+
+        void OnTextEnter( wxCommandEvent& WXUNUSED(event) )
+        {
+            shutDownControl(false);
+        }
+
+        void OnChar( wxKeyEvent& event )
+        {
+            switch ( event.m_keyCode )
+            {
+            case WXK_RETURN:
+                shutDownControl(false);
+                break;
+
+            case WXK_ESCAPE:
+                shutDownControl(true);
+            default:
+                event.Skip();
+            }
+        }
+
+        void OnKillFocus( wxFocusEvent& WXUNUSED(event) )
+        {
+            shutDownControl(false);
+        }
+
+#if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
+        void SetFocusOnIdle( bool focus = true )
+        {
+            m_focusOnIdle = focus;
+        }
+
+        void OnIdle( wxIdleEvent& event )
+        {
+            if (m_focusOnIdle)
+            {
+                m_focusOnIdle = false;
+                if (wxWindow::FindFocus() != m_editorCtrl)
+                    m_editorCtrl->SetFocus();
+            }
+
+            event.Skip();
+        }
+#endif
+
+    private:
+        wxControl* m_editorCtrl;
+        wxDataViewRenderer* m_owner;
+        bool m_focusOnIdle;
+    };
+
+}
+
 bool wxDataViewRendererBase::StartEditing( const wxDataViewItem &item, wxRect labelRect )
 {
     wxDataViewCtrl* dv_ctrl = GetOwner()->GetOwner();
+    const unsigned int col = GetOwner()->GetModelColumn();
 
     // Before doing anything we send an event asking if editing of this item is really wanted.
     wxDataViewEvent start_event( wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING, dv_ctrl->GetId() );
     start_event.SetDataViewColumn( GetOwner() );
+    start_event.SetColumn( col );
     start_event.SetModel( dv_ctrl->GetModel() );
     start_event.SetItem( item );
     start_event.SetEventObject( dv_ctrl );
@@ -617,7 +723,6 @@
 
     m_item = item; // remember for later
 
-    unsigned int col = GetOwner()->GetModelColumn();
     wxVariant value;
     dv_ctrl->GetModel()->GetValue( value, item, col );
 
@@ -627,13 +732,9 @@
     if(!m_editorCtrl)
         return false;
 
-    (void) new wxKillRef( m_editorCtrl.get() );
+    // this handler will call CancelEditing() or FinishEditing() and delete itself afterwards
+    new EditorCtrlEvtHandler( m_editorCtrl, (wxDataViewRenderer*) this );
 
-    wxDataViewEditorCtrlEvtHandler *handler =
-        new wxDataViewEditorCtrlEvtHandler( m_editorCtrl, (wxDataViewRenderer*) this );
-
-    m_editorCtrl->PushEventHandler( handler );
-
 #if defined(__WXGTK20__) && !defined(wxUSE_GENERICDATAVIEWCTRL)
     handler->SetFocusOnIdle();
 #else
@@ -643,6 +744,7 @@
     // Now we should send Editing Started event
     wxDataViewEvent event( wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED, dv_ctrl->GetId() );
     event.SetDataViewColumn( GetOwner() );
+    event.SetColumn( col );
     event.SetModel( dv_ctrl->GetModel() );
     event.SetItem( item );
     event.SetEventObject( dv_ctrl );
@@ -657,9 +759,6 @@
         return;
 
     GetOwner()->GetOwner()->GetMainWindow()->SetFocus();
-
-    m_editorCtrl->Hide();
-    wxPendingDelete.Append( m_editorCtrl );
 }
 
 bool wxDataViewRendererBase::FinishEditing()
@@ -674,18 +773,16 @@
 
     dv_ctrl->GetMainWindow()->SetFocus();
 
-    m_editorCtrl->Hide();
-    wxPendingDelete.Append( m_editorCtrl );
-
     if (!Validate(value))
         return false;
 
-    unsigned int col = GetOwner()->GetModelColumn();
+    const unsigned int col = GetOwner()->GetModelColumn();
     dv_ctrl->GetModel()->ChangeValue(value, m_item, col);
 
     // Now we should send Editing Done event
     wxDataViewEvent event( wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE, dv_ctrl->GetId() );
     event.SetDataViewColumn( GetOwner() );
+    event.SetColumn( col );
     event.SetModel( dv_ctrl->GetModel() );
     event.SetItem( m_item );
     event.SetEventObject( dv_ctrl );
@@ -815,10 +912,6 @@
 //-----------------------------------------------------------------------------
 
 BEGIN_EVENT_TABLE(wxDataViewEditorCtrlEvtHandler, wxEvtHandler)
-    EVT_CHAR           (wxDataViewEditorCtrlEvtHandler::OnChar)
-    EVT_KILL_FOCUS     (wxDataViewEditorCtrlEvtHandler::OnKillFocus)
-    EVT_IDLE           (wxDataViewEditorCtrlEvtHandler::OnIdle)
-    EVT_TEXT_ENTER     (-1, wxDataViewEditorCtrlEvtHandler::OnTextEnter)
 END_EVENT_TABLE()
 
 wxDataViewEditorCtrlEvtHandler::wxDataViewEditorCtrlEvtHandler(

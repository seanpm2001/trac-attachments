Index: src/msw/timer.cpp
===================================================================
--- src/msw/timer.cpp	(revision 63402)
+++ src/msw/timer.cpp	(working copy)
@@ -51,6 +51,24 @@
     return s_timerMap;
 }
 
+// This gets a unique, non-zero timer ID and creates an entry in the TimerMap
+UINT_PTR GetNewTimerId(wxMSWTimerImpl *t)
+{
+    static UINT_PTR lastTimerId = 0;
+
+    while (lastTimerId == 0 ||
+            TimerMap().find(lastTimerId) != TimerMap().end())
+    {
+        lastTimerId = lastTimerId + 1;
+    }
+
+    TimerMap()[lastTimerId] = t;
+
+    return lastTimerId;
+}
+
+
+
 // ----------------------------------------------------------------------------
 // private functions
 // ----------------------------------------------------------------------------
@@ -100,67 +118,45 @@
 // wxMSWTimerImpl class
 // ----------------------------------------------------------------------------
 
+wxMSWTimerImpl::wxMSWTimerImpl(wxTimer *timer)
+:wxTimerImpl(timer)
+{
+    m_id = GetNewTimerId(this);
+}
+
+wxMSWTimerImpl::~wxMSWTimerImpl()
+{
+    TimerMap().erase(m_id);
+}
+
 bool wxMSWTimerImpl::Start(int milliseconds, bool oneShot)
 {
     if ( !wxTimerImpl::Start(milliseconds, oneShot) )
         return false;
 
-    // SetTimer() doesn't accept 0 timer id so use something else if the timer
-    // id at wx level is 0: as -1 (wxID_ANY) can't be used, we can safely
-    // replace 0 with it at MSW level
-    UINT idTimer = GetId();
-    if ( !idTimer )
-        idTimer = (UINT)-1;
-
     // SetTimer() normally returns just idTimer but this might change in the
     // future so use its return value to be safe
-    m_id = ::SetTimer
+    UINT_PTR ret = ::SetTimer
              (
               wxTimerHiddenWindowModule::GetHWND(),  // window for WM_TIMER
-              idTimer,                               // timer ID to create
+              m_id,                                  // timer ID to create
               (UINT)m_milli,                         // delay
               NULL                                   // timer proc (unused)
              );
 
-    if ( !m_id )
+    if ( ret == 0 )
     {
         wxLogSysError(_("Couldn't create a timer"));
 
         return false;
     }
 
-    // check that SetTimer() didn't reuse an existing id: according to the MSDN
-    // this can happen and this would be catastrophic to us as we rely on ids
-    // uniquely identifying the timers because we use them as keys in the hash
-    //
-    // notice that this also happens if the same id is reused for multiple
-    // timers: this used to work in previous versions but was never supported
-    // and absolutely shouldn't be done, use wxID_ANY to assign an id to the
-    // timer automatically or ensure that all your timers have unique ids
-    if ( TimerMap().find(m_id) != TimerMap().end() )
-    {
-        wxLogError(_("Timer creation failed."));
-
-        ::KillTimer(wxTimerHiddenWindowModule::GetHWND(), m_id);
-        m_id = 0;
-
-        return false;
-    }
-
-    TimerMap()[m_id] = this;
-
     return true;
 }
 
 void wxMSWTimerImpl::Stop()
 {
-    wxASSERT_MSG( m_id, wxT("should be running") );
-
     ::KillTimer(wxTimerHiddenWindowModule::GetHWND(), m_id);
-
-    TimerMap().erase(m_id);
-
-    m_id = 0;
 }
 
 // ----------------------------------------------------------------------------
Index: include/wx/msw/private/timer.h
===================================================================
--- include/wx/msw/private/timer.h	(revision 63402)
+++ include/wx/msw/private/timer.h	(working copy)
@@ -19,7 +19,8 @@
 class WXDLLIMPEXP_BASE wxMSWTimerImpl : public wxTimerImpl
 {
 public:
-    wxMSWTimerImpl(wxTimer *timer) : wxTimerImpl(timer) { m_id = 0; }
+    wxMSWTimerImpl(wxTimer *timer);
+    virtual ~wxMSWTimerImpl();
 
     virtual bool Start(int milliseconds = -1, bool oneShot = false);
     virtual void Stop();

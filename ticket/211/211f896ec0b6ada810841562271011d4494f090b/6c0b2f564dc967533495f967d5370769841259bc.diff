Index: wxWidgets/src/ribbon/bar.cpp
===================================================================
--- wxWidgets/src/ribbon/bar.cpp	(revision 72513)
+++ wxWidgets/src/ribbon/bar.cpp	(working copy)
@@ -465,11 +465,22 @@
     RecalculateTabSizes();
 }
 
-static int OrderPageTabInfoBySmallWidthAsc(wxRibbonPageTabInfo **first, wxRibbonPageTabInfo **second)
+struct PageComparedBySmallWidthAsc
 {
-    return (**first).small_must_have_separator_width - (**second).small_must_have_separator_width;
-}
+    wxEXPLICIT PageComparedBySmallWidthAsc(wxRibbonPageTabInfo* page)
+        : m_page(page)
+    {
+    }
 
+    bool operator<(const PageComparedBySmallWidthAsc& other) const
+    {
+        return m_page->small_must_have_separator_width 
+                < other.m_page->small_must_have_separator_width;
+    }
+
+    wxRibbonPageTabInfo *m_page;
+};
+
 void wxRibbonBar::RecalculateTabSizes()
 {
     size_t numtabs = m_pages.GetCount();
@@ -624,30 +635,27 @@
             if(width >= total_small_width)
             {
                 // Do (2)
-                wxRibbonPageTabInfoArray sorted_pages;
-                for(i = 0; i < numtabs; ++i)
-                {
-                    // Sneaky obj array trickery to not copy the tab descriptors
-                    if (!m_pages.Item(i).shown)
-                        continue;
-                    sorted_pages.Add(&m_pages.Item(i));
-                }
-                sorted_pages.Sort(OrderPageTabInfoBySmallWidthAsc);
+                wxVector<PageComparedBySmallWidthAsc> sorted_pages;
+                sorted_pages.reserve(numtabs);
+                for ( i = 0; i < numtabs; ++i )
+                    sorted_pages.push_back(PageComparedBySmallWidthAsc(&m_pages.Item(i)));
+
+                wxVectorSort(sorted_pages);
                 width -= tabsep * (numtabs - 1);
                 for(i = 0; i < numtabs; ++i)
                 {
-                    wxRibbonPageTabInfo& info = sorted_pages.Item(i);
-                    if (!info.shown)
+                    wxRibbonPageTabInfo* info = sorted_pages[i].m_page;
+                    if (!info->shown)
                         continue;
-                    if(info.small_must_have_separator_width * (int)(numtabs - i) <= width)
+                    if(info->small_must_have_separator_width * (int)(numtabs - i) <= width)
                     {
-                        info.rect.width = info.small_must_have_separator_width;;
+                        info->rect.width = info->small_must_have_separator_width;;
                     }
                     else
                     {
-                        info.rect.width = width / (numtabs - i);
+                        info->rect.width = width / (numtabs - i);
                     }
-                    width -= info.rect.width;
+                    width -= info->rect.width;
                 }
                 for(i = 0; i < numtabs; ++i)
                 {
@@ -658,7 +666,6 @@
                     info.rect.y = y;
                     info.rect.height = m_tab_height;
                     x += info.rect.width + tabsep;
-                    sorted_pages.Detach(numtabs - (i + 1));
                 }
             }
             else

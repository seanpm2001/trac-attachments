diff --git a/samples/html/printing/p1.htm b/samples/html/printing/p1.htm
new file mode 100644
index 00000000..c4732326
--- /dev/null
+++ b/samples/html/printing/p1.htm
@@ -0,0 +1,25 @@
+<html>
+<head>
+	<title> Kalypso Printout </title>
+</head>
+
+<body>
+<!-- template vars " = @
+"WIDTH"
+"HEIGHT"
+"IMAGE"
+"IMAGEDESC"
+"IMAGEDATE"
+!-->
+<table cellspacing=10 cellpadding=0>
+<tr>
+<td>
+<div align="center">
+<img src="@IMAGE@" width="@WIDTH@" height="@HEIGHT@"></img><br>@IMAGEDATE@ @IMAGEDESC@
+</div>
+</td>
+</tr>
+</table>
+</body>
+</html>
+
diff --git a/samples/html/printing/printing.cpp b/samples/html/printing/printing.cpp
index a0a6b4e1..de725c1a 100644
--- a/samples/html/printing/printing.cpp
+++ b/samples/html/printing/printing.cpp
@@ -1,285 +1,542 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        printing.cpp
-// Purpose:     wxHtml sample: wxHtmlEasyPrinting test
-// Author:      Vaclav Slavik
-// Copyright:   (c) 1998-2009 wxWidgets team
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-
-// For compilers that support precompilation, includes "wx/wx.h".
-#include "wx/wxprec.h"
+#ifdef WX_PRECOMP
+#include "wx_pch.h"
+#endif
 
 #ifdef __BORLANDC__
 #pragma hdrstop
-#endif
+#endif //__BORLANDC__
 
-// for all others, include the necessary headers (this file is usually all you
-// need because it includes almost all "standard" wxWidgets headers
-#ifndef WX_PRECOMP
-#include "wx/wx.h"
-#endif
+#include <wx/wx.h>
+#include <wx/app.h>
+#include <wx/html/htmprint.h>
+#include <wx/print.h>
+#include <wx/textfile.h>
+#include <wx/image.h>
 
-#include "wx/image.h"
-#include "wx/html/htmlwin.h"
-#include "wx/html/htmprint.h"
 
-#ifndef wxHAS_IMAGES_IN_RESOURCES
-    #include "../../sample.xpm"
-#endif
 
 
-// ----------------------------------------------------------------------------
-// private classes
-// ----------------------------------------------------------------------------
+ class myApp : public wxApp
+ {
+    public:
+    virtual bool OnInit( ) ;
+ };
 
-// Define a new application type, each program should derive a class from wxApp
-class MyApp : public wxApp
-{
-public:
-    // override base class virtuals
-    // ----------------------------
+class myframe : public wxFrame
+ {
+ public:
+    myframe( ) ;
 
-    // this one is called on application startup and is a good place for the app
-    // initialization (doing it here and not in the ctor allows to have an error
-    // return: if OnInit() returns false, the application terminates)
+ private:
+	wxTextCtrl* h_fileText ;
 
-    virtual bool OnInit() wxOVERRIDE;
-};
+	void showPrintPreview( wxString file ) ;
+	void OnOk( wxCommandEvent& ev ) ;
+
+	enum {
+		idText = 24433,
+	};
+
+} ;
+
+
+//DECLARE_EVENT_TYPE( EVT_TEMPLATE_SELECTED, -1)
+/***
+ ** Html DC renderer
+ * copied from src/html/htmprint.cpp
+ * addded GetTotalWidth()
+ */
 
-// Define a new frame type: this is going to be our main frame
-class MyFrame : public wxFrame
+class WXDLLIMPEXP_HTML KalHtmlDCRenderer : public wxObject
 {
 public:
-    // ctor and dtor
+    KalHtmlDCRenderer();
+    virtual ~KalHtmlDCRenderer();
 
-    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);
-    virtual ~MyFrame();
+    // Following 3 methods *must* be called before any call to Render:
 
-    // event handlers (these functions should _not_ be virtual)
-    void OnQuit(wxCommandEvent& event);
-    void OnAbout(wxCommandEvent& event);
+    // Assign DC to this render
+    void SetDC(wxDC *dc, double pixel_scale = 1.0);
 
-    void OnPageSetup(wxCommandEvent& event);
-    void OnPrint(wxCommandEvent& event);
-    void OnPreview(wxCommandEvent& event);
-    void OnOpen(wxCommandEvent& event);
+    void SetSize(int width, int height);
 
-    void OnPrintSmall(wxCommandEvent& event);
-    void OnPrintNormal(wxCommandEvent& event);
-    void OnPrintHuge(wxCommandEvent& event);
+    void SetHtmlText(const wxString& html, const wxString& basepath = wxEmptyString, bool isdir = true);
 
+    void SetFonts(const wxString& normal_face, const wxString& fixed_face, const int *sizes = NULL);
 
-private:
-    wxHtmlWindow *m_Html;
-    wxHtmlEasyPrinting *m_Prn;
-    wxString m_Name;
+    void SetStandardFonts(int size = -1,
+                          const wxString& normal_face = wxEmptyString,
+                          const wxString& fixed_face = wxEmptyString);
 
-    // any class wishing to process wxWidgets events must use this macro
-    wxDECLARE_EVENT_TABLE();
+    int Render(int x, int y, int page_height, int from = 0,
+               int dont_render = FALSE, int to = INT_MAX);
+
+    int GetTotalHeight();
+
+	// the ONLY addition to KalHtmlDCRenderer
+    int GetTotalWidth() {
+        if (m_Cells) return m_Cells->GetMaxTotalWidth();
+          else return -1;
+    }
+
+protected:
+    wxDC *m_DC;
+    wxHtmlWinParser *m_Parser;
+    wxFileSystem *m_FS;
+    wxHtmlContainerCell *m_Cells;
+    int m_MaxWidth, m_Width, m_Height;
+
+    DECLARE_NO_COPY_CLASS(KalHtmlDCRenderer)
+};
+
+/***
+ ** KalyspoHtmlPrintout
+ */
+class KalHtmlPrintout : public wxPrintout
+{
+public:
+
+    KalHtmlPrintout( const wxString& title = _T("Kal Printout")) ;
+    virtual ~KalHtmlPrintout() ;
+
+    // ADD ONS
+    // prepares the class for printing this html document.
+    // Must be called before using the class, in fact just after constructor
+    // It can be called many times with different page nums. Each html doc is forced
+    // to fit on a page.
+    //
+    // basepath is base directory (html string would be stored there if it was in
+    // file). It is used to determine path for loading images, for example.
+    // isdir is false if basepath is filename, true if it is directory name
+    // (see wxFileSystem for detailed explanation)
+    void SetHtmlText(const wxString& html, const wxString &basepath = wxEmptyString, bool isdir = true);
+
+
+    // wxPrintout stuff:
+	//virtualize in order to derive from our
+    virtual bool OnPrintPage(int page);
+    virtual bool HasPage(int page);
+    virtual void GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo);
+
+// protectize on order to derive
+protected:
+    wxString m_Document ;
+    wxString m_BasePath;
+    bool m_BasePathIsDir;
+    KalHtmlDCRenderer *m_Renderer ;
+
+    void RenderPage(wxDC *dc, int page);
 };
 
-// ----------------------------------------------------------------------------
-// constants
-// ----------------------------------------------------------------------------
+wxPrintData* g_printData = NULL ;
+wxPageSetupDialogData* g_pageSetupData = NULL ;
+
+/*************************************************************************88
+ *** IMPLEMENTATION **
+ ***************************************************************************/
+
+/*************************************************************************88
+ *** Printout **
+ ***************************************************************************/
 
-// IDs for the controls and the menu commands
-enum
+KalHtmlPrintout::KalHtmlPrintout( const wxString& title ) :
+        wxPrintout( title )
 {
-    // menu items
-    Minimal_Quit = 1,
-    Minimal_Print,
-    Minimal_Preview,
-    Minimal_PageSetup,
-    Minimal_Open,
-    Minimal_PrintSmall,
-    Minimal_PrintNormal,
-    Minimal_PrintHuge
 
+    m_BasePath = wxEmptyString;
+    m_BasePathIsDir = true;
+    m_Renderer = new KalHtmlDCRenderer;
+ 
 };
 
-// ----------------------------------------------------------------------------
-// event tables and other macros for wxWidgets
-// ----------------------------------------------------------------------------
-
-// the event tables connect the wxWidgets events with the functions (event
-// handlers) which process them. It can be also done at run-time, but for the
-// simple menu events like this the static method is much simpler.
-wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
-    EVT_MENU(Minimal_Quit, MyFrame::OnQuit)
-    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
-    EVT_MENU(Minimal_Print, MyFrame::OnPrint)
-    EVT_MENU(Minimal_Preview, MyFrame::OnPreview)
-    EVT_MENU(Minimal_PageSetup, MyFrame::OnPageSetup)
-    EVT_MENU(Minimal_Open, MyFrame::OnOpen)
-    EVT_MENU(Minimal_PrintSmall, MyFrame::OnPrintSmall)
-    EVT_MENU(Minimal_PrintNormal, MyFrame::OnPrintNormal)
-    EVT_MENU(Minimal_PrintHuge, MyFrame::OnPrintHuge)
-wxEND_EVENT_TABLE()
-
-// Create a new application object: this macro will allow wxWidgets to create
-// the application object during program execution (it's better than using a
-// static object for many reasons) and also declares the accessor function
-// wxGetApp() which will return the reference of the right type (i.e. MyApp and
-// not wxApp)
-wxIMPLEMENT_APP(MyApp);
-
-// ============================================================================
-// implementation
-// ============================================================================
-
-// ----------------------------------------------------------------------------
-// the application class
-// ----------------------------------------------------------------------------
-// `Main program' equivalent: the program execution "starts" here
-
-bool MyApp::OnInit()
+KalHtmlPrintout::~KalHtmlPrintout()
 {
-    if ( !wxApp::OnInit() )
-        return false;
+    delete m_Renderer;
+}
 
-#if wxUSE_LIBPNG
-    wxImage::AddHandler(new wxPNGHandler);
-#endif
-#if wxUSE_LIBJPEG
-    wxImage::AddHandler(new wxJPEGHandler);
-#endif
-#if wxUSE_GIF
-    wxImage::AddHandler(new wxGIFHandler);
-#endif
 
-    MyFrame *frame = new MyFrame(_("Printing test"),
-        wxDefaultPosition, wxSize(640, 480));
 
-    // Show it
-    frame->Show(true);
+void KalHtmlPrintout::SetHtmlText(const wxString& html, const wxString &basepath , bool isdir )
+{
+	m_Document = html ;
 
-    // success: wxApp::OnRun() will be called which will enter the main message
-    // loop and the application will run. If we returned false here, the
-    // application would exit immediately.
-    return true;
+    m_BasePath = basepath;
+    m_BasePathIsDir = isdir;
 }
 
-// ----------------------------------------------------------------------------
-// main frame
-// ----------------------------------------------------------------------------
+bool KalHtmlPrintout::OnPrintPage(int page)
+{
+    wxDC *dc = GetDC();
+    if (dc && dc->IsOk())
+    {
+        if (HasPage(page))
+            RenderPage(dc, page);
 
+        return true;
+    }
+    else return false;
+}
+
+void KalHtmlPrintout::GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo)
+{
+    *minPage = ( signed int ) 1;
+    *maxPage = ( signed int ) 1 ;
+    *selPageFrom = ( signed int ) 1;
+    *selPageTo = ( signed int ) 1 ;
+}
 
-// frame constructor
-MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
-        : wxFrame((wxFrame *)NULL, wxID_ANY, title, pos, size)
+bool KalHtmlPrintout::HasPage(int pageNum)
 {
-    SetIcon(wxICON(sample));
-
-    // create a menu bar
-    wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Minimal_Open, _("Open...\tCtrl-O"));
-    menuFile->AppendSeparator();
-    menuFile->Append(Minimal_PageSetup, _("Page &Setup"));
-    menuFile->Append(Minimal_Preview, _("Print pre&view..."));
-    menuFile->Append(Minimal_Print, _("Print...\tCtrl-P"));
-    menuFile->AppendSeparator();
-    menuFile->Append(wxID_ABOUT, _("&About"));
-    menuFile->AppendSeparator();
-    menuFile->Append(Minimal_Quit, _("&Exit"));
-
-    wxMenu *menuFonts = new wxMenu;
-    menuFonts->AppendRadioItem(Minimal_PrintSmall, _("&Small Printer Fonts"));
-    menuFonts->AppendRadioItem(Minimal_PrintNormal, _("&Normal Printer Fonts"));
-    menuFonts->AppendRadioItem(Minimal_PrintHuge, _("&Huge Printer Fonts"));
-
-    // now append the freshly created menu to the menu bar...
-    wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _("&File"));
-    menuBar->Append(menuFonts, _("F&onts"));
-
-    // ... and attach this menu bar to the frame
-    SetMenuBar(menuBar);
-
-#if wxUSE_STATUSBAR
-    CreateStatusBar(1);
-#endif // wxUSE_STATUSBAR
-
-    m_Html = new wxHtmlWindow(this);
-    m_Html -> SetRelatedFrame(this, _("HTML : %s"));
-#if wxUSE_STATUSBAR
-    m_Html -> SetRelatedStatusBar(0);
-#endif // wxUSE_STATUSBAR
-    m_Name = "test.htm";
-    m_Html -> LoadPage(m_Name);
-
-    m_Prn = new wxHtmlEasyPrinting(_("Easy Printing Demo"), this);
-    m_Prn -> SetHeader(m_Name + "(@PAGENUM@/@PAGESCNT@)<hr>", wxPAGE_ALL);
-
-    // To specify where the AFM files are kept on Unix,
-    // you may wish to do something like this
-    // m_Prn->GetPrintData()->SetFontMetricPath("/home/julians/afm");
+    return pageNum > 0 && (unsigned) pageNum <= 1;
+}
+
+/* Code taken from src/html/htmprint.cpp */
+void KalHtmlPrintout::RenderPage(wxDC *dc, int page)
+{
+    wxBusyCursor wait;
+
+    int pageWidth, pageHeight, mm_w, mm_h, dc_w, dc_h;
+    double ppmm_w, ppmm_h;
+
+    GetPageSizePixels(&pageWidth, &pageHeight);
+    GetPageSizeMM(&mm_w, &mm_h);
+    /* from mm to LU1 */
+    ppmm_w = ( (double) pageWidth / (double) mm_w);
+    ppmm_h = ( (double) pageHeight / (double) mm_h);
+    //wxDisplaySize(&scr_w, &scr_h);
+
+    //Get Screen/Printer Resolution
+    int ppiPrinterX, ppiPrinterY;
+    GetPPIPrinter(&ppiPrinterX, &ppiPrinterY);
+    wxUnusedVar(ppiPrinterX);
+    int ppiScreenX, ppiScreenY;
+    GetPPIScreen(&ppiScreenX, &ppiScreenY);
+    wxUnusedVar(ppiScreenX);
+
+    wxASSERT_MSG( page<= (int) 1 , _T("ERROR RederPage: Asked for a too big page"));
+    // for each page
+    //calc scale initialize DC
+
+    // Get page size in device units (zoom here)
+    dc->GetSize(&dc_w, &dc_h);
+
+    double scale1X,scale1Y;
+    // Scale from logical units1 to device
+    scale1X = (double)dc_w / (double)pageWidth;
+    scale1Y = (double)dc_h / (double)pageHeight;
+
+
+    /*
+     A hack to force the selected html data to FIT on to the selected DC
+    eff_height : height of efficient space in logical units 1
+    html_height : totoal height of the html to be rendered in logical units 1
+    */
+
+    int eff_height = (int) (ppmm_h * (mm_h )) ;
+    int eff_width = (int) (ppmm_w * (mm_w )) ;
+
+     //DP 1
+    m_Renderer->SetDC(dc, (double)ppiPrinterY / (double)ppiScreenY );
+    // Renderer needs width to calculate height !!
+    m_Renderer->SetSize( eff_width, eff_height );
+    m_Renderer->SetHtmlText(m_Document, m_BasePath, m_BasePathIsDir);
+
+    int html_height = m_Renderer->GetTotalHeight() ;
+    wxCHECK_RET( html_height > 0 , _T("  KalPrinting:: RenderPage : html height is not gt 0") );
+    int html_width = m_Renderer->GetTotalWidth() ;
+    if ( html_width <=0 ) {
+        wxLogWarning (_T(" ** RenderPage html_width = %d. Falling back to maximum (%d)"), html_width, eff_width ) ;
+        html_width = eff_width ;
+    }
+    wxCHECK_RET( html_width, _T("  RenderPage : html width is not gt 0") );
+
+    m_Renderer->SetSize( html_width, html_height );
+    //TOCHECK :: Do we need to actually reset html text ?
+    m_Renderer->SetHtmlText( m_Document, m_BasePath, m_BasePathIsDir);
+
+    /* Calculate the scales for html_* (LU2) to fit inside eff_* (LU1)*/
+    // Convert from LU2 (html_height) to LU1 eff_height
+    double m_pageFitScaleX = (double)eff_width / (double) html_width ;
+    double m_pageFitScaleY = (double)eff_height / (double)html_height ;
+
+   //Keep html page aspect ratio
+   // if ( m_keepAspectRatio ) {
+        m_pageFitScaleX = m_pageFitScaleY = wxMin( m_pageFitScaleX, m_pageFitScaleY ) ;
+   // }
+
+    /* Margins */
+
+    int myMarginLeftLU1,myMarginTopLU1 ; /* LU1 */
+    //Compute xtra space to deside for alignment  in LU1
+    int xtraX = eff_width - (int) ((html_width) * m_pageFitScaleX) ;
+    //wxASSERT (xtraX>=0) ;
+    if ( xtraX < 0 ) {
+        //html_width > eff_width
+        wxLogDebug(_T("  RenderPage html_width is gt eff_width. Truncating. xtraX=%d"), xtraX );
+        xtraX = 0 ;
+    }
+	/* align center */
+    xtraX = xtraX * ( (float) 1 / 2 ) ;
+    myMarginLeftLU1 = (int) /*(m_MarginLeft * ppmm_w) +*/ xtraX ;
+
+    //int xtraY = eff_height / m_pageFitScaleY - html_height ;
+    int xtraY = eff_height - (int) (( html_height) * m_pageFitScaleY) ;
+    //wxASSERT(xtraY>=0) ;
+    if ( xtraY < 0 ) {
+        //html_width > eff_width
+        wxLogDebug(_T("  RenderPage html_height is gt eff_height. Truncating") );
+        xtraY = 0 ;
+    }
+    xtraY = xtraY * ( (float) 1 / 2 ) ;
+    myMarginTopLU1 = (int) /*(m_MarginTop * ppmm_h) + */ xtraY ;
+
+    wxLogDebug( _T("  RenderPage xtraX = %d, xtraY = %d"), xtraX, xtraY ) ;
+
+    // Till here from previous OnPrepare
+
+    //m_Renderer->SetDC(dc, (double)ppiPrinterY / (double)ppiScreenY);
+
+
+    //if (m_drawMarginRect) {
+        dc->SetUserScale( scale1X, scale1Y );
+        /* Draw the margin rectangle in LU1 */
+        dc->SetBrush(*wxTRANSPARENT_BRUSH);
+        dc->SetPen(*wxLIGHT_GREY_PEN);
+        dc->DrawRectangle( (int) (myMarginLeftLU1),
+                           (int) (myMarginTopLU1 ) ,
+                    (int)  (eff_width - 2*myMarginLeftLU1),
+                    (int) ( eff_height - 2*myMarginTopLU1) ) ;
+    //}
+
+
+    dc->SetUserScale( scale1X * m_pageFitScaleX, scale1Y * m_pageFitScaleY );
+    dc->SetBackgroundMode(wxTRANSPARENT);
+
+    //MODA SCALE Convert LU1 to LU2 we draw on LU2
+    m_Renderer->Render( myMarginLeftLU1 / m_pageFitScaleX,
+                        ( myMarginTopLU1) / m_pageFitScaleY,
+                         -1, 0 );
+                         //m_PageBreaks, m_PageBreaks[page-1], false, m_PageBreaks[page]-m_PageBreaks[page-1]);
+
+
+   wxLogDebug(_T("  RenderPage html_height=%d, eff_height=%d, dc_h=%d, \n   html_width=%d, eff_width=%d, dc_w=%d"),
+                html_height, eff_height, dc_h, html_width, eff_width, dc_w );
+   wxLogDebug(_T("  RenderPage/t m_pageFitScaleY=%lf, m_pageFitScaleX=%lf "), m_pageFitScaleY, m_pageFitScaleX );
+
+
 }
 
-// frame destructor
-MyFrame::~MyFrame()
+
+/*************************************************************************88
+ *** APLL **
+ ***************************************************************************/
+
+IMPLEMENT_APP( myApp )
+ bool myApp::OnInit()
+ {
+
+        wxApp::SetAppName( _("htmltest" ) );
+        
+	/*** initialize print structs ***/
+	  g_printData = new wxPrintData;
+    // You could set an initial paper size here
+      g_printData->SetPaperId(wxPAPER_A4);    // for everyone else
+     g_pageSetupData = new wxPageSetupDialogData;
+     // copy over initial paper size from print record
+     (*g_pageSetupData) = *g_printData;
+
+	 wxImage::AddHandler( new wxPNGHandler ) ;
+
+        wxFrame* myf = new myframe  ;
+        myf->Show() ;
+
+        return true ;
+ }
+
+
+
+/*************************************************************************88
+ *** Frame **
+ ***************************************************************************/
+
+myframe::myframe() :
+	wxFrame( NULL, wxID_ANY, _("html test") ) 
 {
-    wxDELETE(m_Prn);
+	
+	wxSizer* szMain = new wxBoxSizer( wxVERTICAL ) ;
+
+	h_fileText = new wxTextCtrl( this, idText, _T("./tpl_small.htm") ) ;
+	szMain->Add( h_fileText, 0, wxEXPAND | wxALL, 5 ) ;
+
+	wxButton* OKbt = new wxButton( this, wxID_OK, _T("Preview") ) ;
+	szMain->Add( OKbt, 0, wxALL, 5 ) ;
+
+	wxTextCtrl* debugText = new wxTextCtrl( this, wxID_ANY, _T(""), wxDefaultPosition, wxSize(500, 400 ), wxTE_MULTILINE | wxTE_READONLY ) ;
+	szMain->Add( debugText, 1, wxEXPAND | wxALL, 5 );
+
+	wxLogTextCtrl* txLog = new wxLogTextCtrl( debugText  ) ;
+	wxLog* oldLog = wxLog::SetActiveTarget( txLog ) ;
+	wxDELETE( oldLog ) ;
+
+	SetSizerAndFit( szMain ) ;
+
+	Connect( wxID_OK, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( myframe::OnOk ) ) ;
+
 }
 
+void myframe::OnOk( wxCommandEvent& )
+{
+	wxTextFile      tfile;
+    wxString out ;
+    wxString line ;
+
+    if ( ! tfile.Open( h_fileText->GetValue() ) ) {
+        wxString str;
+        str.Printf (_("Could open selected template file [%s]") ,h_fileText->GetValue().c_str() );
+        return ;
+    }
+
+    for ( line = tfile.GetFirstLine(); !tfile.Eof(); line = tfile.GetNextLine() )
+    {
+        out+=line ;// do something with the current line in str
+    }
 
-// event handlers
+	showPrintPreview( out ) ;
+}
 
-void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
+void myframe::showPrintPreview( wxString file )
 {
-    // true is to force the frame to close
-    Close(true);
+	/*** Create printout */
+    KalHtmlPrintout* kalPrintout = new KalHtmlPrintout( ) ;
+	kalPrintout->SetHtmlText( file ) ;
+
+
+	/*** Create Preview ***/
+    //Read Print Dialog data (pages, # copies ..
+    wxPrintDialogData printDialogData(* g_printData);
+    // PrintPreview takes ownership of kalypsPrintout
+     wxPrintPreview *preview = (wxPrintPreview*) new wxPrintPreview( kalPrintout, NULL , & printDialogData);
+    if (!preview->Ok()) {
+            delete preview;
+            return;
+    }
+
+	/*** Create preview frame ***/
+    wxPreviewFrame* frameP = new wxPreviewFrame( preview, this, _("Print Preview") );
+
+    frameP->Initialize() ;
+    //frameP->SetIcon( wxIcon(wxART_PRINT) );
+    frameP->Show() ;
 }
 
 
-void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+
+//--------------------------------------------------------------------------------
+// KalHtmlDCRenderer
+//--------------------------------------------------------------------------------
+
+
+KalHtmlDCRenderer::KalHtmlDCRenderer() : wxObject()
 {
-    wxMessageBox(_("HTML printing sample\n\n(c) Vaclav Slavik, 1999"));
+    m_DC = NULL;
+    m_Width = m_Height = 0;
+    m_Cells = NULL;
+    m_Parser = new wxHtmlWinParser();
+    m_FS = new wxFileSystem();
+    m_Parser->SetFS(m_FS);
 }
 
 
-void MyFrame::OnPageSetup(wxCommandEvent& WXUNUSED(event))
+
+KalHtmlDCRenderer::~KalHtmlDCRenderer()
 {
-    m_Prn -> PageSetup();
+    if (m_Cells) delete m_Cells;
+    if (m_Parser) delete m_Parser;
+    if (m_FS) delete m_FS;
 }
 
 
-void MyFrame::OnPrint(wxCommandEvent& WXUNUSED(event))
+
+void KalHtmlDCRenderer::SetDC(wxDC *dc, double pixel_scale)
 {
-    m_Prn -> PrintFile(m_Name);
+    m_DC = dc;
+    m_Parser->SetDC(m_DC, pixel_scale);
 }
 
 
-void MyFrame::OnPreview(wxCommandEvent& WXUNUSED(event))
+
+void KalHtmlDCRenderer::SetSize(int width, int height)
 {
-    m_Prn -> PreviewFile(m_Name);
+    m_Width = width;
+    m_Height = height;
 }
 
 
-void MyFrame::OnOpen(wxCommandEvent& WXUNUSED(event))
+void KalHtmlDCRenderer::SetHtmlText(const wxString& html, const wxString& basepath, bool isdir)
 {
-    wxFileDialog dialog(this, _("Open HTML page"), "", "", "*.htm", 0);
+    if (m_DC == NULL) return;
 
-    if (dialog.ShowModal() == wxID_OK)
-    {
-        m_Name = dialog.GetPath();
-        m_Html -> LoadPage(m_Name);
-        m_Prn -> SetHeader(m_Name + "(@PAGENUM@/@PAGESCNT@)<hr>", wxPAGE_ALL);
-    }
+    if (m_Cells != NULL) delete m_Cells;
+
+    m_FS->ChangePathTo(basepath, isdir);
+    m_Cells = (wxHtmlContainerCell*) m_Parser->Parse(html);
+    m_Cells->SetIndent(0, wxHTML_INDENT_ALL, wxHTML_UNITS_PIXELS);
+    m_Cells->Layout(m_Width);
 }
 
 
-void MyFrame::OnPrintSmall(wxCommandEvent& WXUNUSED(event))
+void KalHtmlDCRenderer::SetFonts(const wxString& normal_face, const wxString& fixed_face,
+                                const int *sizes)
+{
+    m_Parser->SetFonts(normal_face, fixed_face, sizes);
+    if (m_DC == NULL && m_Cells != NULL)
+        m_Cells->Layout(m_Width);
+}
+
+void KalHtmlDCRenderer::SetStandardFonts(int size,
+                                        const wxString& normal_face,
+                                        const wxString& fixed_face)
 {
-    m_Prn->SetStandardFonts(8);
+    m_Parser->SetStandardFonts(size, normal_face, fixed_face);
+    if (m_DC == NULL && m_Cells != NULL)
+        m_Cells->Layout(m_Width);
 }
 
-void MyFrame::OnPrintNormal(wxCommandEvent& WXUNUSED(event))
+int KalHtmlDCRenderer::Render(int x, int y,
+                             int page_height,
+                             int from, int dont_render, int to)
 {
-    m_Prn->SetStandardFonts(12);
+    int pbreak, hght;
+
+    if (m_Cells == NULL || m_DC == NULL) return 0;
+
+    pbreak = (int)(from + m_Height);
+    while (m_Cells->AdjustPagebreak(&pbreak, page_height)) {}
+    hght = pbreak - from;
+    if(to < hght)
+        hght = to;
+
+    if (!dont_render)
+    {
+        wxHtmlRenderingInfo rinfo;
+        wxDefaultHtmlRenderingStyle rstyle;
+        rinfo.SetStyle(&rstyle);
+        m_DC->SetBrush(*wxWHITE_BRUSH);
+        m_DC->SetClippingRegion(x, y, m_Width, hght);
+        m_Cells->Draw(*m_DC,
+                      x, (y - from),
+                      y, pbreak + (y /*- from*/),
+                      rinfo);
+        m_DC->DestroyClippingRegion();
+    }
+
+    if (pbreak < m_Cells->GetHeight()) return pbreak;
+    else return GetTotalHeight();
 }
 
-void MyFrame::OnPrintHuge(wxCommandEvent& WXUNUSED(event))
+
+int KalHtmlDCRenderer::GetTotalHeight()
 {
-    m_Prn->SetStandardFonts(28);
+    if (m_Cells) return m_Cells->GetHeight();
+    else return 0;
 }
diff --git a/samples/html/printing/tpl_big.htm b/samples/html/printing/tpl_big.htm
new file mode 100644
index 00000000..1c867fd3
--- /dev/null
+++ b/samples/html/printing/tpl_big.htm
@@ -0,0 +1,25 @@
+<html>
+<head>
+	<title> Kal Printout Big</title>
+</head>
+
+<body>
+<!-- template vars " = @
+"WIDTH"
+"HEIGHT"
+"IMAGE"
+"IMAGEDESC"
+"IMAGEDATE"
+!-->
+<table cellspacing=10 cellpadding=0>
+<tr>
+<td>
+<div align="center">
+<img src="tst.png" width="850" height="450"></img><br> image 850x450
+</div>
+</td>
+</tr>
+</table>
+</body>
+</html>
+
diff --git a/samples/html/printing/tpl_small.htm b/samples/html/printing/tpl_small.htm
new file mode 100644
index 00000000..bde4dd7c
--- /dev/null
+++ b/samples/html/printing/tpl_small.htm
@@ -0,0 +1,25 @@
+<html>
+<head>
+	<title> Kal Printout Small</title>
+</head>
+
+<body>
+<!-- template vars " = @
+"WIDTH"
+"HEIGHT"
+"IMAGE"
+"IMAGEDESC"
+"IMAGEDATE"
+!-->
+<table cellspacing=10 cellpadding=0>
+<tr>
+<td>
+<div align="center">
+<img src="tst.png" width="150" height="150"></img><br> image 150x150
+</div>
+</td>
+</tr>
+</table>
+</body>
+</html>
+

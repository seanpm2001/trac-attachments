Index: include/wx/mac/carbon/tglbtn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/tglbtn.h,v
retrieving revision 1.6
diff -u -r1.6 tglbtn.h
--- include/wx/mac/carbon/tglbtn.h	2006/01/16 14:59:34	1.6
+++ include/wx/mac/carbon/tglbtn.h	2006/10/19 03:53:16
@@ -15,6 +15,55 @@
 
 WXDLLEXPORT_DATA(extern const wxChar) wxCheckBoxNameStr[];
 
+class WXDLLEXPORT wxToggleBitmapButton: public wxControl
+{
+public:
+    // construction/destruction
+    wxToggleBitmapButton() {}
+    wxToggleBitmapButton(wxWindow *parent,
+                   wxWindowID id,
+                   const wxBitmap& label,
+                   const wxPoint& pos = wxDefaultPosition,
+                   const wxSize& size = wxDefaultSize,
+                   long style = 0,
+                   const wxValidator& validator = wxDefaultValidator,
+                   const wxString& name = wxCheckBoxNameStr)
+    {
+        Create(parent, id, label, pos, size, style, validator, name);
+    }
+
+    // Create the control
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxBitmap& label,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize, long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxCheckBoxNameStr);
+
+    // Get/set the value
+    void SetValue(bool state);
+    bool GetValue() const;
+
+    // Set the label
+    virtual void SetLabel(const wxString& label) { wxControl::SetLabel(label); }
+    virtual void SetLabel(const wxBitmap& label);
+
+    virtual wxInt32 MacControlHit( WXEVENTHANDLERREF handler , WXEVENTREF event ) ;
+
+    // implementation
+    wxBitmap  m_bmpNormal;
+
+protected:
+    virtual wxSize DoGetBestSize() const;
+
+private:
+    int m_marginX,
+        m_marginY;
+    DECLARE_DYNAMIC_CLASS(wxToggleBitmapButton)
+};
+
+
 // Checkbox item (single checkbox)
 class WXDLLEXPORT wxToggleButton : public wxControl
 {
Index: samples/controls/controls.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/controls/controls.cpp,v
retrieving revision 1.251
diff -u -r1.251 controls.cpp
--- samples/controls/controls.cpp	2006/07/13 00:41:55	1.251
+++ samples/controls/controls.cpp	2006/10/19 03:53:16
@@ -966,11 +966,21 @@
     dc.Clear();
     dc.DrawEllipse(5, 5, 90, 90);
     dc.DrawText(_T("Bitmap"), 30, 40);
+
+    wxBitmap tbitmap( 100, 100 );
+    dc.SelectObject( tbitmap );
+    dc.SetBackground(*wxBLUE);
+    dc.SetPen(*wxRED_PEN);
+    dc.Clear();
+    dc.DrawEllipse(10, 10, 85, 85);
+    dc.DrawText(_T("Toggle me"), 20, 40);
+
     dc.SelectObject( wxNullBitmap );
 
+
     (void)new wxBitmapButton(panel, ID_BITMAP_BTN, bitmap, wxPoint(100, 20));
-    (void)new wxToggleButton(panel, ID_BITMAP_BTN_ENABLE,
-                             _T("Enable/disable &bitmap"), wxPoint(100, 140));
+    (void)new wxToggleBitmapButton(panel, ID_BITMAP_BTN_ENABLE, tbitmap,
+                              wxPoint(100, 140));
 
 #if defined(__WXMSW__) || defined(__WXMOTIF__)
     // test for masked bitmap display
@@ -1153,6 +1163,7 @@
 
 void MyPanel::OnBmpButtonToggle(wxCommandEvent& event)
 {
+    wxLogMessage(_T("Toggle bitmap button clicked."));
     FindWindow(ID_BITMAP_BTN)->Enable(!event.IsChecked());
 }
 
Index: src/mac/carbon/tglbtn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/tglbtn.cpp,v
retrieving revision 1.11
diff -u -r1.11 tglbtn.cpp
--- src/mac/carbon/tglbtn.cpp	2006/10/09 05:14:39	1.11
+++ src/mac/carbon/tglbtn.cpp	2006/10/19 03:53:17
@@ -38,6 +38,133 @@
 // ============================================================================
 
 // ----------------------------------------------------------------------------
+// wxToggleBitmapButton
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxToggleBitmapButton, wxControl)
+
+bool wxToggleBitmapButton::Create(wxWindow *parent, wxWindowID id,
+                            const wxBitmap& bitmap, const wxPoint& pos,
+                            const wxSize& size, long style,
+                            const wxValidator& validator,
+                            const wxString& name)
+{
+    m_macIsUserPane = FALSE ;
+    
+    if ( !wxControl::Create(parent, id, pos, size, style, validator, name) )
+        return false;
+
+    if ( style & wxBU_AUTODRAW )
+    {
+        m_marginX =
+        m_marginY = wxDEFAULT_BUTTON_MARGIN;
+    }
+    else
+    {
+        m_marginX =
+        m_marginY = 0;
+    }
+
+    Rect bounds = wxMacGetBoundsForControl( this , pos , size ) ;
+    
+    m_peer = new wxMacControl(this) ;
+
+    if ( !m_bmpNormal.Ok() )
+        m_bmpNormal = bitmap;
+
+    OSStatus err = noErr;
+    ControlButtonContentInfo info;
+
+#ifdef __WXMAC_OSX__
+    if ( HasFlag( wxBORDER_NONE ) )
+    {
+        wxMacCreateBitmapButton( &info, m_bmpNormal, kControlContentIconRef );
+        err = CreateIconControl(
+                MAC_WXHWND(parent->MacGetTopLevelWindowRef()),
+                &bounds, &info, false, m_peer->GetControlRefAddr() );
+    }
+    else
+#endif
+    {
+        wxMacCreateBitmapButton( &info, m_bmpNormal );
+        err = CreateBevelButtonControl(
+                MAC_WXHWND(parent->MacGetTopLevelWindowRef()), &bounds, CFSTR(""),
+                ((style & wxBU_AUTODRAW) ? kControlBevelButtonSmallBevel : kControlBevelButtonNormalBevel ),
+                kControlBehaviorOffsetContents | kControlBehaviorToggles, &info,
+                0, 0, 0, m_peer->GetControlRefAddr() );
+    }
+
+    verify_noerr( err );
+
+    wxMacReleaseBitmapButton( &info );
+    wxASSERT_MSG( m_peer != NULL && m_peer->Ok(), wxT("No valid native Mac control") );
+
+    MacPostControlCreate( pos, size );
+
+    return TRUE;
+}
+
+bool wxToggleBitmapButton::GetValue() const
+{
+    return m_peer->GetValue() ;
+}
+
+void wxToggleBitmapButton::SetValue(bool val)
+{
+    m_peer->SetValue( val ) ;
+}
+
+void wxToggleBitmapButton::SetLabel( const wxBitmap& bitmap )
+{
+    m_bmpNormal = bitmap;
+    InvalidateBestSize();
+
+    ControlButtonContentInfo info;
+
+#ifdef __WXMAC_OSX__
+    if ( HasFlag( wxBORDER_NONE ) )
+    {
+        wxMacCreateBitmapButton( &info, m_bmpNormal, kControlContentIconRef );
+        if ( info.contentType != kControlNoContent )
+            m_peer->SetData( kControlIconPart, kControlIconContentTag, info );
+    }
+    else
+#endif
+    {
+        wxMacCreateBitmapButton( &info, m_bmpNormal );
+        if ( info.contentType != kControlNoContent )
+            m_peer->SetData( kControlButtonPart, kControlBevelButtonContentTag, info );
+    }
+
+    wxMacReleaseBitmapButton( &info );
+}
+
+wxSize wxToggleBitmapButton::DoGetBestSize() const
+{
+    wxSize best;
+
+    best.x = 2 * m_marginX;
+    best.y = 2 * m_marginY;
+    if ( m_bmpNormal.Ok() )
+    {
+        best.x += m_bmpNormal.GetWidth();
+        best.y += m_bmpNormal.GetHeight();
+    }
+
+    return best;
+}
+
+wxInt32 wxToggleBitmapButton::MacControlHit(WXEVENTHANDLERREF WXUNUSED(handler) , WXEVENTREF WXUNUSED(event) )
+{
+    wxCommandEvent event(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, m_windowId);
+    event.SetInt(GetValue());
+    event.SetEventObject(this);
+    ProcessCommand(event);
+    return noErr ;
+}
+
+
+// ----------------------------------------------------------------------------
 // wxToggleButton
 // ----------------------------------------------------------------------------
 

 	  	 

Index: src/stc/gen_iface.py
===================================================================
--- src/stc/gen_iface.py	(revision 71039)
+++ src/stc/gen_iface.py	(working copy)
@@ -758,6 +758,26 @@
 
 #----------------------------------------------------------------------------
 
+def strip(str):
+	if hasattr(string, 'strip'):
+		return string.strip(str)
+	
+	return str.strip()
+
+def split(str, sep=None):
+	if hasattr(string, 'split'):
+		return string.split(str, sep)
+	
+	return str.split(sep)
+
+def upper(str):
+	if hasattr(string, 'upper'):
+		return string.upper(str)
+
+	return str.upper()
+
+#----------------------------------------------------------------------------
+
 def processIface(iface, h_tmplt, cpp_tmplt, h_dest, cpp_dest, docstr_dest):
     curDocStrings = []
     values = []
@@ -785,7 +805,7 @@
             curDocStrings = []
 
         elif op == 'cat ':
-            if string.strip(line[4:]) == 'Deprecated':
+            if strip(line[4:]) == 'Deprecated':
                 break    # skip the rest of the file
 
         elif op == 'evt ':
@@ -798,7 +818,7 @@
             pass
 
         else:
-            print '***** Unknown line type: ', line
+            print('***** Unknown line type: ' + line)
 
 
     # process templates
@@ -825,8 +845,11 @@
 
 
 def joinWithNewLines(values):
-    return string.join(values, '\n')
+	if hasattr(string, 'join'):
+		return string.join(values, '\n')
 
+	return '\n'.join(values)
+
 #----------------------------------------------------------------------------
 
 def processVals(values):
@@ -905,21 +928,23 @@
 
 def checkMethodOverride(name, number, docs):
     theDef = theImp = None
-    if methodOverrideMap.has_key(name):
+    try:
         item = methodOverrideMap[name]
+    except KeyError:
+        return name, theDef, theImp, docs
 
-        try:
-            if item[0] != 0:
-                name = item[0]
-            if item[1] != 0:
-                theDef = '    ' + (item[1] % name)
-            if item[2] != 0:
-                theImp = item[2] % ('wxStyledTextCtrl::'+name, number) + '\n}'
-            if item[3] != 0:
-                docs = item[3]
-        except:
-            print "*************", name
-            raise
+    try:
+        if item[0] != 0:
+            name = item[0]
+        if item[1] != 0:
+            theDef = '    ' + (item[1] % name)
+        if item[2] != 0:
+            theImp = item[2] % ('wxStyledTextCtrl::'+name, number) + '\n}'
+        if item[3] != 0:
+            docs = item[3]
+    except:
+        print("************* " + name)
+        raise
 
     return name, theDef, theImp, docs
 
@@ -958,7 +983,7 @@
 #----------------------------------------------------------------------------
 
 def parseVal(line, values, docs):
-    name, val = string.split(line, '=')
+    name, val = split(line, '=')
 
     # remove prefixes such as SCI, etc.
     for old, new in valPrefixes:
@@ -981,16 +1006,16 @@
 
 def parseFun(line, methods, docs, values, is_const):
     def parseParam(param):
-        param = string.strip(param)
+        param = strip(param)
         if param == '':
             param = None
         else:
-            param = tuple(string.split(param))
+            param = tuple(split(param))
         return param
 
     mo = funregex.match(line)
     if mo is None:
-        print "***** Line doesn't match! : " + line
+        print("***** Line doesn't match! : " + line)
 
     retType, name, number, param1, param2 = mo.groups()
 
@@ -998,10 +1023,10 @@
     param2 = parseParam(param2)
 
     # Special case.  For the key command functions we want a value defined too
-    num = string.atoi(number)
+    num = int(number)
     for v in cmdValues:
         if (type(v) == type(()) and v[0] <= num <= v[1]) or v == num:
-            parseVal('CMD_%s=%s' % (string.upper(name), number), values, docs)
+            parseVal('CMD_%s=%s' % (upper(name), number), values, docs)
 
             # if we are not also doing a function for CMD values, then
             # just return, otherwise fall through to the append blow.
@@ -1019,7 +1044,7 @@
     # TODO: parse command line args to replace default input/output files???
 
     if not os.path.exists(IFACE):
-        print 'Please run this script from src/stc subdirectory.'
+        print('Please run this script from src/stc subdirectory.')
         sys.exit(1)
 
     # Now just do it

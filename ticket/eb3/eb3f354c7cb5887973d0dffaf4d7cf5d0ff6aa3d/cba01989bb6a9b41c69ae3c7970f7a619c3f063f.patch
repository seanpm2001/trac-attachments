Index: docs/latex/wx/log.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/log.tex,v
retrieving revision 1.21.2.1
diff -u -4 -b -r1.21.2.1 log.tex
--- docs/latex/wx/log.tex	2002/11/28 13:28:33	1.21.2.1
+++ docs/latex/wx/log.tex	2002/12/31 01:33:56
@@ -313,8 +313,21 @@
 \func{static bool}{GetVerbose}{\void}
 
 Returns whether the verbose mode is currently active.
 
+\membersection{wxLog::SetLogLevel}\label{wxlogsetloglevel}
+
+\func{static void}{SetLogLevel}{\param{wxLogLevel }{ logLevel}}
+
+Specifies that log messages with level > logLevel should be ignored
+and not sent to the active log target.
+
+\membersection{wxLog::GetLogLevel}\label{wxloggetloglevel}
+
+\func{static wxLogLevel}{GetLogLevel}{\void}
+
+Returns the current loge level limit.
+
 \membersection{wxLog::SetTimestamp}\label{wxlogsettimestamp}
 
 \func{void}{SetTimestamp}{\param{const char * }{ format}}
 
Index: include/wx/log.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/log.h,v
retrieving revision 1.72
diff -u -4 -b -r1.72 log.h
--- include/wx/log.h	2002/09/04 09:35:13	1.72
+++ include/wx/log.h	2002/12/31 01:33:56
@@ -54,10 +54,10 @@
     wxLOG_FatalError, // program can't continue, abort immediately
     wxLOG_Error,      // a serious error, user must be informed about it
     wxLOG_Warning,    // user is normally informed about it but may be ignored
     wxLOG_Message,    // normal message (i.e. normal output of a non GUI app)
-    wxLOG_Info,       // informational message (a.k.a. 'Verbose')
     wxLOG_Status,     // informational: might go to the status line of GUI app
+    wxLOG_Info,       // informational message (a.k.a. 'Verbose')
     wxLOG_Debug,      // never shown to the user, disabled in release mode
     wxLOG_Trace,      // trace messages are also only enabled in debug mode
     wxLOG_Progress,   // used for progress indicator (not yet)
     wxLOG_User = 100  // user defined levels start here
@@ -119,9 +119,9 @@
     // static sink function - see DoLog() for function to overload in the
     // derived classes
     static void OnLog(wxLogLevel level, const wxChar *szString, time_t t)
     {
-        if ( IsEnabled() ) {
+        if ( IsEnabled() && ms_logLevel >= level ) {
             wxLog *pLogger = GetActiveTarget();
             if ( pLogger )
                 pLogger->DoLog(level, szString, t);
         }
@@ -164,8 +164,12 @@
     // functions controlling the default wxLog behaviour
         // verbose mode is activated by standard command-line '-verbose'
         // option
     static void SetVerbose(bool bVerbose = TRUE) { ms_bVerbose = bVerbose; }
+
+        // Set log level.  Log messages with level > logLevel will not be logged.
+    static void SetLogLevel(wxLogLevel logLevel) { ms_logLevel = logLevel; }
+
         // should GetActiveTarget() try to create a new log object if the
         // current is NULL?
     static void DontCreateOnDemand();
 
@@ -184,20 +188,24 @@
         // for the log targets which add time stamps to the messages - set it
         // to NULL to disable time stamping completely.
     static void SetTimestamp(const wxChar *ts) { ms_timestamp = ts; }
 
+
     // accessors
         // gets the verbose status
     static bool GetVerbose() { return ms_bVerbose; }
         // get trace mask
     static wxTraceMask GetTraceMask() { return ms_ulTraceMask; }
         // is this trace mask in the list?
     static bool IsAllowedTraceMask(const wxChar *mask)
         { return ms_aTraceMasks.Index(mask) != wxNOT_FOUND; }
+        // return the current loglevel limit
+    static wxLogLevel GetLogLevel() { return ms_logLevel; }
 
         // get the current timestamp format string (may be NULL)
     static const wxChar *GetTimestamp() { return ms_timestamp; }
 
+
     // helpers
         // put the time stamp into the string if ms_timestamp != NULL (don't
         // change it otherwise)
     static void TimeStamp(wxString *str);
@@ -223,8 +231,10 @@
     static wxLog      *ms_pLogger;      // currently active log sink
     static bool        ms_doLog;        // FALSE => all logging disabled
     static bool        ms_bAutoCreate;  // create new log targets on demand?
     static bool        ms_bVerbose;     // FALSE => ignore LogInfo messages
+
+    static wxLogLevel  ms_logLevel;     // limit logging to levels <= ms_logLevel
 
     static size_t      ms_suspendCount; // if positive, logs are not flushed
 
     // format string for strftime(), if NULL, time stamping log messages is
Index: src/common/log.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/log.cpp,v
retrieving revision 1.128.2.1
diff -u -4 -b -r1.128.2.1 log.cpp
--- src/common/log.cpp	2002/09/26 08:52:09	1.128.2.1
+++ src/common/log.cpp	2002/12/31 01:33:57
@@ -844,8 +844,10 @@
 bool            wxLog::ms_doLog        = TRUE;
 bool            wxLog::ms_bAutoCreate  = TRUE;
 bool            wxLog::ms_bVerbose     = FALSE;
 
+wxLogLevel      wxLog::ms_logLevel     = UINT_MAX;  // log everything by default
+
 size_t          wxLog::ms_suspendCount = 0;
 
 #if wxUSE_GUI
     const wxChar *wxLog::ms_timestamp  = wxT("%X");  // time only, no date

 	  	 

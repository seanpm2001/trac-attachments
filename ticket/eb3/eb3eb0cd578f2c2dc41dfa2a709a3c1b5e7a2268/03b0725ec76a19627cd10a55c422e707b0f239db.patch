diff --git a/include/wx/generic/private/grid.h b/include/wx/generic/private/grid.h
index be70fc0..48db784 100644
--- a/include/wx/generic/private/grid.h
+++ b/include/wx/generic/private/grid.h
@@ -31,7 +31,6 @@ struct wxGridCellWithAttr
     wxGridCellWithAttr(int row, int col, wxGridCellAttr *attr_)
         : coords(row, col), attr(attr_)
     {
-        wxASSERT( attr );
     }
 
     wxGridCellWithAttr(const wxGridCellWithAttr& other)
@@ -66,15 +65,36 @@ struct wxGridCellWithAttr
 
     ~wxGridCellWithAttr()
     {
-        attr->DecRef();
+        if (attr)
+            attr->DecRef();
     }
 
     wxGridCellCoords coords;
     wxGridCellAttr  *attr;
 };
 
-WX_DECLARE_OBJARRAY_WITH_DECL(wxGridCellWithAttr, wxGridCellWithAttrArray,
-                              class WXDLLIMPEXP_ADV);
+static int CompareGridCellWithAttr(wxGridCellWithAttr *c1, wxGridCellWithAttr *c2)
+{
+    const int row1 = c1->coords.GetRow();
+    const int row2 = c2->coords.GetRow();
+
+    if (row1 < row2)
+        return -1;
+    else if (row1 > row2)
+        return 1;
+
+    const int col1 = c1->coords.GetCol();
+    const int col2 = c2->coords.GetCol();
+
+    if (col1 < col2)
+        return -1;
+    else if (col1 > col2)
+        return 1;
+
+    return 0;
+}
+
+WX_DEFINE_SORTED_USER_EXPORTED_ARRAY(wxGridCellWithAttr *, wxGridCellWithAttrArray, WXDLLIMPEXP_ADV);
 
 
 // ----------------------------------------------------------------------------
@@ -411,6 +431,15 @@ private:
 class WXDLLIMPEXP_ADV wxGridCellAttrData
 {
 public:
+    wxGridCellAttrData() : m_attrs(CompareGridCellWithAttr)
+    {
+    }
+
+    ~wxGridCellAttrData()
+    {
+        WX_CLEAR_ARRAY(m_attrs);
+    }
+
     void SetAttr(wxGridCellAttr *attr, int row, int col);
     wxGridCellAttr *GetAttr(int row, int col) const;
     void UpdateAttrRows( size_t pos, int numRows );
diff --git a/samples/grid/griddemo.cpp b/samples/grid/griddemo.cpp
index 20eb366..8fe3b9b 100644
--- a/samples/grid/griddemo.cpp
+++ b/samples/grid/griddemo.cpp
@@ -436,6 +436,15 @@ GridFrame::GridFrame()
     grid->DeleteRows(0, ir);
     grid->AppendRows(ir);
 
+    for (int row=0; row<ir; ++row)
+    {
+        for (int col=0; col<grid->GetNumberCols(); ++col)
+        {
+            if ((row ^ col) & 1)
+                grid->SetCellBackgroundColour(row, col, *wxLIGHT_GREY);
+        }
+    }
+
     grid->SetRowSize( 0, 60 );
     grid->SetCellValue( 0, 0, wxT("Ctrl+Home\nwill go to\nthis cell") );
 
diff --git a/src/generic/grid.cpp b/src/generic/grid.cpp
index b271878..1011a09 100644
--- a/src/generic/grid.cpp
+++ b/src/generic/grid.cpp
@@ -116,7 +116,6 @@ const int DRAG_SENSITIVITY = 3;
 #include "wx/arrimpl.cpp"
 
 WX_DEFINE_OBJARRAY(wxGridCellCoordsArray)
-WX_DEFINE_OBJARRAY(wxGridCellWithAttrArray)
 
 // ----------------------------------------------------------------------------
 // events
@@ -619,11 +618,12 @@ void wxGridCellAttrData::SetAttr(wxGridCellAttr *attr, int row, int col)
         if ( attr )
         {
             // change the attribute
-            m_attrs[(size_t)n].ChangeAttr(attr);
+            m_attrs[(size_t)n]->ChangeAttr(attr);
         }
         else
         {
             // remove this attribute
+            delete m_attrs[(size_t)n];
             m_attrs.RemoveAt((size_t)n);
         }
     }
@@ -636,7 +636,7 @@ wxGridCellAttr *wxGridCellAttrData::GetAttr(int row, int col) const
     int n = FindIndex(row, col);
     if ( n != wxNOT_FOUND )
     {
-        attr = m_attrs[(size_t)n].attr;
+        attr = m_attrs[(size_t)n]->attr;
         attr->IncRef();
     }
 
@@ -648,7 +648,7 @@ void wxGridCellAttrData::UpdateAttrRows( size_t pos, int numRows )
     size_t count = m_attrs.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
-        wxGridCellCoords& coords = m_attrs[n].coords;
+        wxGridCellCoords& coords = m_attrs[n]->coords;
         wxCoord row = coords.GetRow();
         if ((size_t)row >= pos)
         {
@@ -682,7 +682,7 @@ void wxGridCellAttrData::UpdateAttrCols( size_t pos, int numCols )
     size_t count = m_attrs.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
-        wxGridCellCoords& coords = m_attrs[n].coords;
+        wxGridCellCoords& coords = m_attrs[n]->coords;
         wxCoord col = coords.GetCol();
         if ( (size_t)col >= pos )
         {
@@ -713,17 +713,8 @@ void wxGridCellAttrData::UpdateAttrCols( size_t pos, int numCols )
 
 int wxGridCellAttrData::FindIndex(int row, int col) const
 {
-    size_t count = m_attrs.GetCount();
-    for ( size_t n = 0; n < count; n++ )
-    {
-        const wxGridCellCoords& coords = m_attrs[n].coords;
-        if ( (coords.GetRow() == row) && (coords.GetCol() == col) )
-        {
-            return n;
-        }
-    }
-
-    return wxNOT_FOUND;
+    wxGridCellWithAttr attr(row, col, NULL);
+    return m_attrs.Index(&attr);
 }
 
 // ----------------------------------------------------------------------------
diff --git a/tests/benchmarks/image.cpp b/tests/benchmarks/image.cpp
index 350cd9f..d7b0071 100644
--- a/tests/benchmarks/image.cpp
+++ b/tests/benchmarks/image.cpp
@@ -88,3 +88,67 @@ BENCHMARK_FUNC(ShrinkHighQuality)
 {
     return GetTestImage().Scale(50, 50, wxIMAGE_QUALITY_HIGH).IsOk();
 }
+
+#include "wx/frame.h"
+#include "wx/grid.h"
+#ifdef _DEBUG
+#pragma comment (lib, "wxmsw31ud_adv.lib")
+#else
+#pragma comment (lib, "wxmsw31u_adv.lib")
+#endif
+
+namespace
+{
+
+wxGrid *gs_grid = NULL;
+int gs_numRows = 100;
+int gs_numCols = 100;
+
+bool InitBareGrid()
+{
+    wxFrame *frame = new wxFrame(NULL, wxID_ANY, "");
+
+    gs_grid = new wxGrid(frame, wxID_ANY);
+
+    gs_grid->CreateGrid(gs_numRows, gs_numCols);
+
+    return true;
+}
+
+bool InitCheckeredGrid()
+{
+    InitBareGrid();
+
+    for (int row=0; row<gs_numRows; ++row)
+    {
+        for (int col=0; col<gs_numCols; ++col)
+        {
+            if ((row ^ col) & 1)
+                gs_grid->SetCellBackgroundColour(row, col, *wxLIGHT_GREY);
+        }
+    }
+
+    return true;
+}
+
+} // anonymous namespace
+
+bool RunGridMoveBenchmark()
+{
+    static bool s_MoveToEnd = false;
+    s_MoveToEnd = !s_MoveToEnd;
+
+    gs_grid->GoToCell(s_MoveToEnd * (gs_numRows - 1), s_MoveToEnd * (gs_numCols - 1));
+
+    return true;
+}
+
+BENCHMARK_FUNC_WITH_INIT(BareGridMove, InitBareGrid, NULL)
+{
+    return RunGridMoveBenchmark();
+}
+
+BENCHMARK_FUNC_WITH_INIT(CheckeredGridMove, InitCheckeredGrid, NULL)
+{
+    return RunGridMoveBenchmark();
+}

Index: include/wx/msw/ole/automtn.h
===================================================================
--- include/wx/msw/ole/automtn.h	(revision 73137)
+++ include/wx/msw/ole/automtn.h	(working copy)
@@ -116,11 +116,21 @@
     // this object. The default is LOCALE_SYSTEM_DEFAULT.
     void SetLCID(WXLCID lcid);
 
+    // Returns the flags used for conversions between wxVariant and OLE VARIANT,
+    // see wxConvertVariantToOleFlags. The default value is wxOleConvertVariant_Default. 
+    // Objects obtained by GetObject() inherit the flags from the one that created them.
+    long GetConvertVariantFlags() const;
+
+    // Sets the flags used for conversions between wxVariant and OLE VARIANT,
+    // see wxConvertVariantToOleFlags. The default value is wxOleConvertVariant_Default.
+    void SetConvertVariantFlags(long flags);
+
 public: // public for compatibility only, don't use m_dispatchPtr directly.
     WXIDISPATCH*  m_dispatchPtr;
 
 private:
     WXLCID m_lcid;
+    long   m_convertVariantFlags;
 
     wxDECLARE_NO_COPY_CLASS(wxAutomationObject);
 };
Index: include/wx/msw/ole/oleutils.h
===================================================================
--- include/wx/msw/ole/oleutils.h	(revision 73137)
+++ include/wx/msw/ole/oleutils.h	(working copy)
@@ -317,9 +317,20 @@
     SAFEARRAY* m_value;
 };
 
+// Used by wxAutomationObject for its wxConvertOleToVariant() calls.
+enum wxOleConvertVariantFlags
+{
+    wxOleConvertVariant_Default = 0,
 
+    // If wxOleConvertVariant_ReturnSafeArrays  flag is set, SAFEARRAYs
+    // contained in OLE VARIANTs will be returned as wxVariants 
+    // with wxVariantDataSafeArray type instead of wxVariants 
+    // with the list type containing the (flattened) SAFEARRAY's elements.
+    wxOleConvertVariant_ReturnSafeArrays  = 1    
+};
+
 WXDLLIMPEXP_CORE bool wxConvertVariantToOle(const wxVariant& variant, VARIANTARG& oleVariant);
-WXDLLIMPEXP_CORE bool wxConvertOleToVariant(const VARIANTARG& oleVariant, wxVariant& variant);
+WXDLLIMPEXP_CORE bool wxConvertOleToVariant(const VARIANTARG& oleVariant, wxVariant& variant, long flags = wxOleConvertVariant_Default);
 #endif // wxUSE_VARIANT
 
 // Convert string to Unicode
Index: interface/wx/msw/ole/automtn.h
===================================================================
--- interface/wx/msw/ole/automtn.h	(revision 73137)
+++ interface/wx/msw/ole/automtn.h	(working copy)
@@ -43,6 +43,34 @@
 };
 
 /**
+    Flags used for conversions between wxVariant and OLE VARIANT.
+
+    These flags are used by wxAutomationObject for its wxConvertOleToVariant() calls.
+    They can be obtained by wxAutomationObject::GetConvertVariantFlags() and set 
+    by wxAutomationObject::SetConvertVariantFlags().
+
+    @since 2.9.5
+
+    @header{wx/msw/ole/oleutils.h}
+*/
+enum wxOleConvertVariantFlags
+{
+    /**
+        Default value.
+    */
+    wxOleConvertVariant_Default = 0,
+
+    /**
+        If wxOleConvertVariant_ReturnSafeArrays flag is set, SAFEARRAYs
+        contained in OLE VARIANTs will be returned as wxVariants 
+        with wxVariantDataSafeArray type instead of wxVariants 
+        with the list type containing the (flattened) SAFEARRAY's elements.
+    */
+    wxOleConvertVariant_ReturnSafeArrays = 1    
+};
+
+
+/**
     @class wxVariantDataCurrency
 
     This class represents a thin wrapper for Microsoft Windows CURRENCY type.
@@ -581,5 +609,23 @@
     */
     void SetLCID(LCID lcid);
 
+    /**
+        Returns the flags used for conversions between wxVariant and OLE VARIANT, see wxConvertVariantToOleFlags. 
+        
+        The default value is wxOleConvertVariant_Default. 
+        Objects obtained by GetObject() inherit the flags from the one that created them.
+
+        @since 2.9.5
+    */
+    long GetConvertVariantFlags() const;
+
+    /**
+        Sets the flags used for conversions between wxVariant and OLE VARIANT, see wxConvertVariantToOleFlags. 
+        
+        The default value is wxOleConvertVariant_Default.
+
+        @since 2.9.5
+    */
+    void SetConvertVariantFlags(long flags);
 };
 
Index: src/msw/ole/automtn.cpp
===================================================================
--- src/msw/ole/automtn.cpp	(revision 73137)
+++ src/msw/ole/automtn.cpp	(working copy)
@@ -71,6 +71,7 @@
 {
     m_dispatchPtr = dispatchPtr;
     m_lcid = LOCALE_SYSTEM_DEFAULT;
+    m_convertVariantFlags = wxOleConvertVariant_Default;
 }
 
 wxAutomationObject::~wxAutomationObject()
@@ -215,7 +216,7 @@
         if (vReturnPtr)
         {
             // Convert result to wxVariant form
-            if (!wxConvertOleToVariant(vReturn, retValue))
+            if (!wxConvertOleToVariant(vReturn, retValue, m_convertVariantFlags))
                 return false;
             // Mustn't release the dispatch pointer
             if (vReturn.vt == VT_DISPATCH)
@@ -475,6 +476,7 @@
     {
         obj.SetDispatchPtr(dispatch);
         obj.SetLCID(GetLCID());
+        obj.SetConvertVariantFlags(GetConvertVariantFlags());
         return true;
     }
     else
@@ -489,6 +491,7 @@
     {
         obj.SetDispatchPtr(dispatch);
         obj.SetLCID(GetLCID());
+        obj.SetConvertVariantFlags(GetConvertVariantFlags());
         return true;
     }
     else
@@ -608,6 +611,17 @@
     m_lcid = lcid;
 }
 
+long wxAutomationObject::GetConvertVariantFlags() const
+{
+    return m_convertVariantFlags;
+}
+
+void wxAutomationObject::SetConvertVariantFlags(long flags)
+{
+    m_convertVariantFlags = flags;    
+}
+
+
 static void
 ShowException(const wxString& member,
               HRESULT hr,
Index: src/msw/ole/oleutils.cpp
===================================================================
--- src/msw/ole/oleutils.cpp	(revision 73137)
+++ src/msw/ole/oleutils.cpp	(working copy)
@@ -415,57 +415,53 @@
 #endif
 
 WXDLLEXPORT bool
-wxConvertOleToVariant(const VARIANTARG& oleVariant, wxVariant& variant)
+wxConvertOleToVariant(const VARIANTARG& oleVariant, wxVariant& variant, long flags)
 {
     bool ok = true;
     if ( oleVariant.vt & VT_ARRAY )
     {
-        // TODO: We currently return arrays as wxVariant of the list type
-        //       containing the flattened form of array but we should allow
-        //       getting it as wxVariantDataSafeArray instead. Doing this is
-        //       simple, we'd just need to do something like this:
-        //
-        //  if ( oleVariant.parray && SafeArrayGetDim(oleVariant.parray) > 1 )
-        //  {
-        //      variant.SetData(new wxVariantDataSafeArray(oleVariant.parray));
-        //  }
-        //
-        //      but currently we don't do it for compatibility reasons.
-        switch (oleVariant.vt & VT_TYPEMASK)
+        if ( flags & wxOleConvertVariant_ReturnSafeArrays  )
         {
-            case VT_I2:
-                ok = wxSafeArray<VT_I2>::ConvertToVariant(oleVariant.parray, variant);
-                break;
-            case VT_I4:
-                ok = wxSafeArray<VT_I4>::ConvertToVariant(oleVariant.parray, variant);
-                break;
-            case VT_R4:
-                ok = wxSafeArray<VT_R4>::ConvertToVariant(oleVariant.parray, variant);
-                break;
-            case VT_R8:
-                ok = wxSafeArray<VT_R8>::ConvertToVariant(oleVariant.parray, variant);
-                break;
-            case VT_VARIANT:
-                ok = wxSafeArray<VT_VARIANT>::ConvertToVariant(oleVariant.parray, variant);
-                break;
-            case VT_BSTR:
-                {
-                    wxArrayString strings;
-                    if ( wxSafeArray<VT_BSTR>::ConvertToArrayString(oleVariant.parray, strings) )
-                        variant = strings;
-                    else
-                        ok = false;
-                }
-                break;
-            default:
-                ok = false;
-                break;
+            variant.SetData(new wxVariantDataSafeArray(oleVariant.parray));
         }
-        if ( !ok )
+        else
         {
-            wxLogDebug(wxT("unhandled VT_ARRAY type %x in wxConvertOleToVariant"),
-                       oleVariant.vt & VT_TYPEMASK);
-            variant = wxVariant();
+            switch (oleVariant.vt & VT_TYPEMASK)
+            {
+                case VT_I2:
+                    ok = wxSafeArray<VT_I2>::ConvertToVariant(oleVariant.parray, variant);
+                    break;
+                case VT_I4:
+                    ok = wxSafeArray<VT_I4>::ConvertToVariant(oleVariant.parray, variant);
+                    break;
+                case VT_R4:
+                    ok = wxSafeArray<VT_R4>::ConvertToVariant(oleVariant.parray, variant);
+                    break;
+                case VT_R8:
+                    ok = wxSafeArray<VT_R8>::ConvertToVariant(oleVariant.parray, variant);
+                    break;
+                case VT_VARIANT:
+                    ok = wxSafeArray<VT_VARIANT>::ConvertToVariant(oleVariant.parray, variant);
+                    break;
+                case VT_BSTR:
+                    {
+                        wxArrayString strings;
+                        if ( wxSafeArray<VT_BSTR>::ConvertToArrayString(oleVariant.parray, strings) )
+                            variant = strings;
+                        else
+                            ok = false;
+                    }
+                    break;
+                default:
+                    ok = false;
+                    break;
+            }
+            if ( !ok )
+            {
+                wxLogDebug(wxT("unhandled VT_ARRAY type %x in wxConvertOleToVariant"),
+                           oleVariant.vt & VT_TYPEMASK);
+                variant = wxVariant();
+            }
         }
     }
     else if ( oleVariant.vt & VT_BYREF )
Index: tests/misc/safearrayconverttest.cpp
===================================================================
--- tests/misc/safearrayconverttest.cpp	(revision 0)
+++ tests/misc/safearrayconverttest.cpp	(working copy)
@@ -0,0 +1,184 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/misc/safearrayconverttest.cpp
+// Purpose:     Test conversions between wxVariant and OLE VARIANT using SAFEARRAYs
+// Author:      PB
+// RCS-ID:      $Id: typeinfotest.cpp 67656 2011-04-30 10:57:04Z DS $
+// Copyright:   (c) the wxWidgets team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+#   pragma hdrstop
+#endif
+
+#ifdef __WXMSW__
+
+#if wxUSE_OLE && wxUSE_VARIANT
+
+#include <wx/msw/ole/oleutils.h>
+#include <wx/msw/ole/safearray.h>
+
+
+// ----------------------------------------------------------------------------
+// test class
+// ----------------------------------------------------------------------------
+
+class SafeArrayConvertTestCase  : public CppUnit::TestCase
+{
+public:
+    SafeArrayConvertTestCase () { }
+    
+
+private:
+     CPPUNIT_TEST_SUITE( SafeArrayConvertTestCase  );
+        CPPUNIT_TEST( VariantListDefault );
+        CPPUNIT_TEST( VariantStringsDefault );
+        CPPUNIT_TEST( VariantListReturnSafeArray );
+        CPPUNIT_TEST( StringsReturnSafeArray );
+     CPPUNIT_TEST_SUITE_END();
+
+    void VariantListDefault();
+    void VariantStringsDefault();
+
+    void VariantListReturnSafeArray();
+    void StringsReturnSafeArray();
+
+    DECLARE_NO_COPY_CLASS(SafeArrayConvertTestCase )
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( SafeArrayConvertTestCase  );
+
+// also include in its own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( SafeArrayConvertTestCase , "SafeArrayConvertTestCase" );
+
+
+
+// test converting a wxVariant with the list type to an OLE VARIANT
+// and back to wxVariant the list type
+void SafeArrayConvertTestCase::VariantListDefault()
+{
+    wxVariant variant;
+    VARIANT oleVariant;
+
+    variant.NullList();
+    variant.Append(true);
+    variant.Append(12.34);
+    variant.Append(42L);
+    variant.Append("ABC");
+    CPPUNIT_ASSERT( wxConvertVariantToOle(variant, oleVariant) );
+
+    wxVariant variantCopy;
+
+    CPPUNIT_ASSERT( wxConvertOleToVariant(oleVariant, variantCopy) );
+    CPPUNIT_ASSERT( variant == variantCopy );
+}
+
+// test converting a wxVariant with the arrstring type to an OLE VARIANT
+// and back to a wxVariant with the arrstring type
+void SafeArrayConvertTestCase::VariantStringsDefault()
+{
+    wxVariant variant;
+    wxArrayString as;
+    VARIANT oleVariant;
+
+    as.push_back("abc");
+    as.push_back("def");
+    as.push_back("ghi");
+    variant = as;
+    CPPUNIT_ASSERT( wxConvertVariantToOle(variant, oleVariant) );
+
+    wxVariant variantCopy;
+
+    CPPUNIT_ASSERT( wxConvertOleToVariant(oleVariant, variantCopy) );
+    CPPUNIT_ASSERT( variant == variantCopy );
+}
+
+// test converting a wxVariant with the list type to an OLE VARIANT
+// and then to a wxVariant with the safearray type
+void SafeArrayConvertTestCase::VariantListReturnSafeArray()
+{
+    wxVariant variant;
+    VARIANT oleVariant;
+
+    variant.NullList();
+    variant.Append(true);
+    variant.Append(12.34);
+    variant.Append(42L);
+    variant.Append("test");
+    CPPUNIT_ASSERT( wxConvertVariantToOle(variant, oleVariant) );
+
+    wxVariant variantCopy;
+
+    CPPUNIT_ASSERT( wxConvertOleToVariant(oleVariant, variantCopy, wxOleConvertVariant_ReturnSafeArrays) );
+    CPPUNIT_ASSERT( variantCopy.GetType() == wxT("safearray") );
+
+    wxSafeArray<VT_VARIANT> safeArray;
+    wxVariantDataSafeArray* vsa = wxStaticCastVariantData(variantCopy.GetData(), wxVariantDataSafeArray);
+    long bound;
+
+    CPPUNIT_ASSERT( vsa );
+    CPPUNIT_ASSERT( safeArray.Attach(vsa->GetValue()) );
+    CPPUNIT_ASSERT( safeArray.GetDim() == 1 );
+    CPPUNIT_ASSERT( safeArray.GetLBound(1, bound) );
+    CPPUNIT_ASSERT( bound == 0 );
+    CPPUNIT_ASSERT( safeArray.GetUBound(1, bound) );
+    CPPUNIT_ASSERT( bound + 1 == (long)variant.GetCount() ); // bound + 1 because safearray elements are accessed by index ranging from LBound to UBound inclusive
+
+    wxVariant variantItem;
+
+    for ( long i = 0; (size_t)i < variant.GetCount(); i++ )
+    {
+        CPPUNIT_ASSERT( safeArray.GetElement(&i, variantItem) );
+        CPPUNIT_ASSERT( variantItem == variant[i] );
+    }
+}
+
+// test converting a wxArrayString to an OLE VARIANT
+// and then to a wxVariant with the safearray type
+void SafeArrayConvertTestCase::StringsReturnSafeArray()
+{
+    wxArrayString as;
+    wxSafeArray<VT_BSTR> safeArray;
+
+    as.push_back("abc");
+    as.push_back("def");
+    as.push_back("ghi");
+    CPPUNIT_ASSERT( safeArray.CreateFromArrayString(as) );
+
+    VARIANT oleVariant;
+    wxVariant variant;
+
+    oleVariant.vt = VT_BSTR | VT_ARRAY;
+    oleVariant.parray = safeArray.Detach();
+    CPPUNIT_ASSERT( oleVariant.parray );
+    CPPUNIT_ASSERT( wxConvertOleToVariant(oleVariant, variant, wxOleConvertVariant_ReturnSafeArrays) );
+    CPPUNIT_ASSERT( variant.GetType() == wxT("safearray") );
+
+    wxVariantDataSafeArray* vsa = wxStaticCastVariantData(variant.GetData(), wxVariantDataSafeArray);
+    long bound;
+
+    CPPUNIT_ASSERT( vsa );
+    CPPUNIT_ASSERT( safeArray.Attach(vsa->GetValue()) );
+    CPPUNIT_ASSERT( safeArray.GetDim() == 1 );
+    CPPUNIT_ASSERT( safeArray.GetLBound(1, bound) );
+    CPPUNIT_ASSERT( bound == 0 );
+    CPPUNIT_ASSERT( safeArray.GetUBound(1, bound) );
+    CPPUNIT_ASSERT( bound + 1 == (long)as.size() ); // bound + 1 because safearray elements are accessed by index ranging from LBound to UBound inclusive
+
+    wxString str;
+
+    for ( long i = 0; (size_t)i < as.size(); i++ )
+    {
+        CPPUNIT_ASSERT( safeArray.GetElement(&i, str) );
+        CPPUNIT_ASSERT( str == as[i] );
+    }
+}
+
+
+
+#endif // #ifdef __WXMSW__
+
+#endif // #if wxUSE_OLE && wxUSE_VARIANT
\ No newline at end of file
Index: tests/test.bkl
===================================================================
--- tests/test.bkl	(revision 73137)
+++ tests/test.bkl	(working copy)
@@ -69,6 +69,7 @@
             misc/module.cpp
             misc/pathlist.cpp
             misc/typeinfotest.cpp
+            misc/safearrayconverttest.cpp
             net/ipc.cpp
             net/socket.cpp
             regex/regextest.cpp

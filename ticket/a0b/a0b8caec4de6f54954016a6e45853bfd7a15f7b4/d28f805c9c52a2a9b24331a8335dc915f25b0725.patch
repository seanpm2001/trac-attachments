Index: include/wx/msw/textctrl.h
===================================================================
--- include/wx/msw/textctrl.h	(revision 53062)
+++ include/wx/msw/textctrl.h	(working copy)
@@ -150,22 +150,6 @@
     void OnDropFiles(wxDropFilesEvent& event);
     void OnChar(wxKeyEvent& event); // Process 'enter' if required
 
-    void OnCut(wxCommandEvent& event);
-    void OnCopy(wxCommandEvent& event);
-    void OnPaste(wxCommandEvent& event);
-    void OnUndo(wxCommandEvent& event);
-    void OnRedo(wxCommandEvent& event);
-    void OnDelete(wxCommandEvent& event);
-    void OnSelectAll(wxCommandEvent& event);
-
-    void OnUpdateCut(wxUpdateUIEvent& event);
-    void OnUpdateCopy(wxUpdateUIEvent& event);
-    void OnUpdatePaste(wxUpdateUIEvent& event);
-    void OnUpdateUndo(wxUpdateUIEvent& event);
-    void OnUpdateRedo(wxUpdateUIEvent& event);
-    void OnUpdateDelete(wxUpdateUIEvent& event);
-    void OnUpdateSelectAll(wxUpdateUIEvent& event);
-
     // Show a context menu for Rich Edit controls (the standard
     // EDIT control has one already)
     void OnContextMenu(wxContextMenuEvent& event);
Index: include/wx/textctrl.h
===================================================================
--- include/wx/textctrl.h	(revision 53062)
+++ include/wx/textctrl.h	(working copy)
@@ -588,6 +588,35 @@
 };
 
 // ----------------------------------------------------------------------------
+// wxEditMenuEvtHandler: wxTextCtrl helper class, handling menu commands + updates
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxEditMenuEvtHandler : public wxEvtHandler
+{
+protected:
+    wxTextCtrl* m_edit;
+public:
+    wxEditMenuEvtHandler(wxTextCtrl*);
+protected:
+    void OnCopy(wxCommandEvent&);
+    void OnCut(wxCommandEvent&);
+    void OnPaste(wxCommandEvent&);
+    void OnUndo(wxCommandEvent&);
+    void OnRedo(wxCommandEvent&);
+    void OnDelete(wxCommandEvent&);
+    void OnSelectAll(wxCommandEvent&);
+
+    void OnUpdateCut(wxUpdateUIEvent&);
+    void OnUpdateCopy(wxUpdateUIEvent&);
+    void OnUpdatePaste(wxUpdateUIEvent&);
+    void OnUpdateUndo(wxUpdateUIEvent&);
+    void OnUpdateRedo(wxUpdateUIEvent&);
+    void OnUpdateDelete(wxUpdateUIEvent&);
+    void OnUpdateSelectAll(wxUpdateUIEvent&);
+    DECLARE_EVENT_TABLE()
+};
+
+// ----------------------------------------------------------------------------
 // wxTextCtrl: a single or multiple line text zone where user can edit text
 // ----------------------------------------------------------------------------
 
@@ -598,12 +627,14 @@
                                    public wxTextAreaBase,
                                    public wxTextEntry
 {
+protected:
+    wxEditMenuEvtHandler* m_editmenu_handler;
 public:
     // creation
     // --------
 
-    wxTextCtrlBase() { }
-    virtual ~wxTextCtrlBase() { }
+    wxTextCtrlBase();
+    virtual ~wxTextCtrlBase();
 
 
     // more readable flag testing methods
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 53062)
+++ samples/docview/docview.cpp	(working copy)
@@ -41,7 +41,7 @@
 #endif
 #include "wx/stockitem.h"
 
-static MyFrame* frame = NULL;
+static MainFrame* frame = NULL;
 
 // In single window mode, don't have any child windows; use
 // main window.
@@ -101,7 +101,7 @@
     }
 
     //// Create the main frame window
-    frame = new MyFrame(m_docManager, NULL, wxID_ANY, GetAppDisplayName(), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
+    frame = new MainFrame(m_docManager, NULL, wxID_ANY, GetAppDisplayName(), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
 
     //// Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
@@ -175,11 +175,10 @@
 * in 'single window' mode.
 */
 
-wxFrame *MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
+MyFrame* MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
 {
     //// Make a child frame
-    wxDocChildFrame *subframe = new wxDocChildFrame(doc, view, GetMainFrame(), wxID_ANY, wxT("Child Frame"),
-        wxPoint(10, 10), wxSize(300, 300), wxDEFAULT_FRAME_STYLE);
+    MyFrame* subframe = new MyFrame(doc, view, GetMainFrame());
 
 #ifdef __WXMSW__
     subframe->SetIcon(wxString(isCanvas ? wxT("chrt_icn") : wxT("notepad_icn")));
@@ -215,9 +214,14 @@
     }
     else
     {
+        edit_menu->Append(wxID_UNDO);
+        edit_menu->Append(wxID_REDO);
+        edit_menu->AppendSeparator();
         edit_menu->Append(wxID_COPY);
+        edit_menu->Append(wxID_CUT);
         edit_menu->Append(wxID_PASTE);
         edit_menu->Append(wxID_SELECTALL);
+        edit_menu->Append(wxID_CLEAR);
     }
 
     wxMenu *help_menu = new wxMenu;
@@ -241,12 +245,12 @@
 * This is the top-level window of the application.
 */
 
-IMPLEMENT_CLASS(MyFrame, wxDocParentFrame)
-BEGIN_EVENT_TABLE(MyFrame, wxDocParentFrame)
-    EVT_MENU(DOCVIEW_ABOUT, MyFrame::OnAbout)
+IMPLEMENT_CLASS(MainFrame, wxDocParentFrame)
+BEGIN_EVENT_TABLE(MainFrame, wxDocParentFrame)
+    EVT_MENU(DOCVIEW_ABOUT, MainFrame::OnAbout)
 END_EVENT_TABLE()
 
-MyFrame::MyFrame(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title,
+MainFrame::MainFrame(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title,
                  const wxPoint& pos, const wxSize& size, const long type):
 wxDocParentFrame(manager, frame, id, title, pos, size, type)
 {
@@ -255,9 +259,10 @@
     m_editMenu = NULL;
 }
 
-void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
+void MainFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageBox(wxT("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe [-single]"), wxT("About DocView"));
+    wxMessageBox(wxTheApp->GetAppDisplayName() + wxT("\nAuthor: Julian Smart\nUsage: docview.exe [-single]"), 
+       wxString(wxT("About ") + wxTheApp->GetAppDisplayName()));
 /*
     Better, but brings in adv lib
     wxAboutDialogInfo info;
@@ -270,7 +275,7 @@
 // Creates a canvas. Called either from view.cc when a new drawing
 // view is created, or in OnInit as a child of the main window,
 // if in 'single window' mode.
-MyCanvas *MyFrame::CreateCanvas(DrawingView* view, wxFrame *parent)
+MyCanvas *MainFrame::CreateCanvas(DrawingView* view, wxFrame *parent)
 {
     wxSize size = parent->GetClientSize();
 
@@ -286,7 +291,7 @@
     return canvas;
 }
 
-MyFrame *GetMainFrame(void)
+MainFrame *GetMainFrame(void)
 {
     return frame;
 }
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 53062)
+++ samples/docview/docview.h	(working copy)
@@ -17,6 +17,7 @@
 class wxDocManager;
 
 // Define a new application
+class MyFrame;
 class MyApp : public wxApp
 {
 public:
@@ -24,7 +25,7 @@
     bool OnInit(void);
     int OnExit(void);
 
-    wxFrame *CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas);
+    MyFrame* CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas);
 
 protected:
     wxDocManager* m_docManager;
@@ -35,16 +36,16 @@
 // Define a new frame
 class MyCanvas;
 class DrawingView;
-class MyFrame : public wxDocParentFrame
+class MainFrame : public wxDocParentFrame
 {
-    DECLARE_CLASS(MyFrame)
+    DECLARE_CLASS(MainFrame)
 public:
     wxMenu* m_editMenu;
 
     // This pointer only needed if in single window mode
     MyCanvas* m_canvas;
 
-    MyFrame(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size,
+    MainFrame(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size,
         const long type);
 
     MyCanvas* CreateCanvas(DrawingView*, wxFrame *parent);
@@ -54,8 +55,34 @@
     DECLARE_EVENT_TABLE()
 };
 
-extern MyFrame *GetMainFrame();
+class MyFrame : public wxDocChildFrame
+{
+protected:
+    wxEditMenuEvtHandler* m_editmenu_handler; // route Edit menu to wxTextCtrl
+public:
+    MyFrame(wxDocument* doc, wxView* view, wxFrame* frame) 
+      : wxDocChildFrame(doc, view, frame, wxID_ANY, wxT("Child Frame"),
+        wxPoint(10, 10), wxSize(300, 300), wxDEFAULT_FRAME_STYLE)
+    {
+        m_editmenu_handler = NULL;
+    }
+    void InitEditMenuHandler(wxTextCtrl* edit)
+    {
+        m_editmenu_handler = new wxEditMenuEvtHandler(edit);
+        PushEventHandler(m_editmenu_handler);
+    }
+    virtual ~MyFrame()
+    {
+        if (m_editmenu_handler)
+        {
+            RemoveEventHandler(m_editmenu_handler);
+            wxDELETE(m_editmenu_handler)
+        }
+    }
+};
 
+extern MainFrame *GetMainFrame();
+
 #define DOCVIEW_CUT     1
 #define DOCVIEW_ABOUT   wxID_ABOUT
 
Index: samples/docview/view.cpp
===================================================================
--- samples/docview/view.cpp	(revision 53062)
+++ samples/docview/view.cpp	(working copy)
@@ -72,7 +72,7 @@
         Activate(true);
 
         // Initialize the edit menu Undo and Redo items
-        doc->GetCommandProcessor()->SetEditMenu(((MyFrame*)m_frame)->m_editMenu);
+        doc->GetCommandProcessor()->SetEditMenu(((MainFrame*)m_frame)->m_editMenu);
         doc->GetCommandProcessor()->Initialize();
     }
 
@@ -157,19 +157,29 @@
 IMPLEMENT_DYNAMIC_CLASS(TextEditView, wxView)
 
 BEGIN_EVENT_TABLE(TextEditView, wxView)
-    EVT_MENU(wxID_COPY, TextEditView::OnCopy)
-    EVT_MENU(wxID_PASTE, TextEditView::OnPaste)
-    EVT_MENU(wxID_SELECTALL, TextEditView::OnSelectAll)
 END_EVENT_TABLE()
 
+TextEditView::TextEditView(): wxView()
+{ 
+    m_frame = NULL; 
+    m_textsw = NULL; 
+}
+
+TextEditView::~TextEditView()
+{ 
+}
+
 bool TextEditView::OnCreate(wxDocument *doc, long WXUNUSED(flags) )
 {
-    m_frame = wxGetApp().CreateChildFrame(doc, this, false);
+    MyFrame* frame = wxGetApp().CreateChildFrame(doc, this, false);
+    m_frame = frame;
 
-    wxSize size = m_frame->GetClientSize();
-    m_textsw = new MyTextWindow(this, m_frame, wxPoint(0, 0), size, wxTE_MULTILINE);
-    m_frame->SetTitle(wxT("TextEditView"));
+    wxSize size = frame->GetClientSize();
+    m_textsw = new MyTextWindow(this, frame, wxPoint(0, 0), size, wxTE_MULTILINE);
+    frame->SetTitle(wxT("TextEditView"));
 
+    frame->InitEditMenuHandler(m_textsw);
+
 #ifdef __X__
     // X seems to require a forced resize
     int x, y;
@@ -177,7 +187,7 @@
     frame->SetSize(wxDefaultCoord, wxDefaultCoord, x, y);
 #endif
 
-    m_frame->Show(true);
+    frame->Show(true);
     Activate(true);
 
     return true;
Index: samples/docview/view.h
===================================================================
--- samples/docview/view.h	(revision 53062)
+++ samples/docview/view.h	(working copy)
@@ -62,25 +62,21 @@
 
 class TextEditView : public wxView
 {
+    DECLARE_DYNAMIC_CLASS(TextEditView)
 public:
     wxFrame*      m_frame;
     MyTextWindow* m_textsw;
 
-    TextEditView(): wxView() { m_frame = NULL; m_textsw = NULL; }
-    virtual ~TextEditView() {}
+    TextEditView();
+    virtual ~TextEditView();
 
     virtual bool OnCreate(wxDocument *doc, long flags);
     virtual void OnDraw(wxDC *dc);
     virtual void OnUpdate(wxView *sender, wxObject *hint = NULL);
     virtual bool OnClose(bool deleteWindow = true);
 
-private:
-    void OnCopy(wxCommandEvent& WXUNUSED(event)) { m_textsw->Copy(); }
-    void OnPaste(wxCommandEvent& WXUNUSED(event)) { m_textsw->Paste(); }
-    void OnSelectAll(wxCommandEvent& WXUNUSED(event)) { m_textsw->SelectAll(); }
-
+protected:
     DECLARE_EVENT_TABLE()
-    DECLARE_DYNAMIC_CLASS(TextEditView)
 };
 
 #endif
Index: samples/docvwmdi/docview.cpp
===================================================================
--- samples/docvwmdi/docview.cpp	(revision 53062)
+++ samples/docvwmdi/docview.cpp	(working copy)
@@ -38,7 +38,7 @@
 #include "view.h"
 #include "wx/stockitem.h"
 
-static MyFrame* frame = NULL;
+static MainFrame* frame = NULL;
 
 IMPLEMENT_APP(MyApp)
 
@@ -66,7 +66,7 @@
           CLASSINFO(TextEditDocument), CLASSINFO(TextEditView));
 
     //// Create the main frame window
-    frame = new MyFrame(m_docManager, NULL,
+    frame = new MainFrame(m_docManager, NULL,
                       GetAppDisplayName(), wxPoint(0, 0), wxSize(500, 400),
                       wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE);
 
@@ -124,14 +124,10 @@
  * Called from view.cpp, when a view is created.
  */
 
-wxMDIChildFrame *MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
+MyFrame* MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
 {
-  //// Make a child frame
-    wxDocMDIChildFrame *subframe =
-      new wxDocMDIChildFrame(doc, view, GetMainFrame(), wxID_ANY, wxT("Child Frame"),
-                             wxPoint(10, 10), wxSize(300, 300),
-                             wxDEFAULT_FRAME_STYLE |
-                             wxNO_FULL_REPAINT_ON_RESIZE);
+    //// Make a child frame
+    MyFrame* subframe = new MyFrame(doc, view, GetMainFrame());
 
 #ifdef __WXMSW__
     subframe->SetIcon(wxString(isCanvas ? wxT("chart") : wxT("notepad")));
@@ -172,9 +168,14 @@
     }
     else
     {
+        edit_menu->Append(wxID_UNDO);
+        edit_menu->Append(wxID_REDO);
+        edit_menu->AppendSeparator();
         edit_menu->Append(wxID_COPY);
+        edit_menu->Append(wxID_CUT);
         edit_menu->Append(wxID_PASTE);
         edit_menu->Append(wxID_SELECTALL);
+        edit_menu->Append(wxID_CLEAR);
     }
     wxMenu *help_menu = new wxMenu;
     help_menu->Append(DOCVIEW_ABOUT);
@@ -195,21 +196,22 @@
  * This is the top-level window of the application.
  */
 
-IMPLEMENT_CLASS(MyFrame, wxDocMDIParentFrame)
-BEGIN_EVENT_TABLE(MyFrame, wxDocMDIParentFrame)
-    EVT_MENU(DOCVIEW_ABOUT, MyFrame::OnAbout)
+IMPLEMENT_CLASS(MainFrame, wxDocMDIParentFrame)
+BEGIN_EVENT_TABLE(MainFrame, wxDocMDIParentFrame)
+    EVT_MENU(DOCVIEW_ABOUT, MainFrame::OnAbout)
 END_EVENT_TABLE()
 
-MyFrame::MyFrame(wxDocManager *manager, wxFrame *frame, const wxString& title,
+MainFrame::MainFrame(wxDocManager *manager, wxFrame *frame, const wxString& title,
     const wxPoint& pos, const wxSize& size, long type):
   wxDocMDIParentFrame(manager, frame, wxID_ANY, title, pos, size, type, wxT("myFrame"))
 {
     m_editMenu = NULL;
 }
 
-void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
+void MainFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageBox(wxT("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe"), wxT("About DocView"));
+    wxMessageBox(wxTheApp->GetAppDisplayName() + wxT("\nAuthor: Julian Smart\nUsage: docview.exe"), 
+       wxString(wxT("About ") + wxTheApp->GetAppDisplayName()));
 /*
     Better, but brings in adv lib
     wxAboutDialogInfo info;
@@ -221,7 +223,7 @@
 
 // Creates a canvas. Called from view.cpp when a new drawing
 // view is created.
-MyCanvas* MyFrame::CreateCanvas(DrawingView* view, wxMDIChildFrame* parent)
+MyCanvas* MainFrame::CreateCanvas(DrawingView* view, wxMDIChildFrame* parent)
 {
     wxSize size = parent->GetClientSize();
 
@@ -235,7 +237,7 @@
     return canvas;
 }
 
-MyFrame* GetMainFrame()
+MainFrame* GetMainFrame()
 {
     return frame;
 }
Index: samples/docvwmdi/docview.h
===================================================================
--- samples/docvwmdi/docview.h	(revision 53062)
+++ samples/docvwmdi/docview.h	(working copy)
@@ -19,6 +19,7 @@
 class wxDocManager;
 
 // Define a new application
+class MyFrame;
 class MyApp: public wxApp
 {
 public:
@@ -26,7 +27,7 @@
     virtual bool OnInit();
     virtual int OnExit();
 
-    wxMDIChildFrame* CreateChildFrame(wxDocument*, wxView*, bool isCanvas);
+    MyFrame* CreateChildFrame(wxDocument*, wxView*, bool isCanvas);
 
 protected:
     wxDocManager* m_docManager;
@@ -37,12 +38,12 @@
 // Define a new frame
 class MyCanvas;
 class DrawingView;
-class MyFrame: public wxDocMDIParentFrame
+class MainFrame: public wxDocMDIParentFrame
 {
 public:
     wxMenu* m_editMenu;
 
-    MyFrame(wxDocManager*, wxFrame*, const wxString& title, const wxPoint&, const wxSize&, long type);
+    MainFrame(wxDocManager*, wxFrame*, const wxString& title, const wxPoint&, const wxSize&, long type);
 
     MyCanvas* CreateCanvas(DrawingView*, wxMDIChildFrame*);
 
@@ -50,11 +51,39 @@
     void OnAbout(wxCommandEvent&);
 
     DECLARE_EVENT_TABLE()
-    DECLARE_CLASS(MyFrame)
+    DECLARE_CLASS(MainFrame)
 };
 
-extern MyFrame* GetMainFrame();
+class MyFrame : public wxDocMDIChildFrame
+{
+protected:
+    wxEditMenuEvtHandler* m_editmenu_handler; // route Edit menu to wxTextCtrl
+public:
+    MyFrame(wxDocument* doc, wxView* view, wxDocMDIParentFrame* frame) 
+      : wxDocMDIChildFrame(doc, view, frame, wxID_ANY, wxT("Child Frame"),
+                             wxPoint(10, 10), wxSize(300, 300),
+                             wxDEFAULT_FRAME_STYLE |
+                             wxNO_FULL_REPAINT_ON_RESIZE)
+    {
+        m_editmenu_handler = NULL;
+    }
+    void InitEditMenuHandler(wxTextCtrl* edit)
+    {
+        m_editmenu_handler = new wxEditMenuEvtHandler(edit);
+        PushEventHandler(m_editmenu_handler);
+    }
+    virtual ~MyFrame()
+    {
+        if (m_editmenu_handler)
+        {
+            RemoveEventHandler(m_editmenu_handler);
+            wxDELETE(m_editmenu_handler)
+        }
+    }
+};
 
+extern MainFrame* GetMainFrame();
+
 #define DOCVIEW_CUT     1
 #define DOCVIEW_ABOUT   wxID_ABOUT
 
Index: samples/docvwmdi/view.cpp
===================================================================
--- samples/docvwmdi/view.cpp	(revision 53062)
+++ samples/docvwmdi/view.cpp	(working copy)
@@ -136,27 +136,26 @@
 IMPLEMENT_DYNAMIC_CLASS(TextEditView, wxView)
 
 BEGIN_EVENT_TABLE(TextEditView, wxView)
-    EVT_MENU(wxID_COPY, TextEditView::OnCopy)
-    EVT_MENU(wxID_PASTE, TextEditView::OnPaste)
-    EVT_MENU(wxID_SELECTALL, TextEditView::OnSelectAll)
 END_EVENT_TABLE()
 
 bool TextEditView::OnCreate(wxDocument* doc, long WXUNUSED(flags) )
 {
-    m_frame = wxGetApp().CreateChildFrame(doc, this, false);
+    MyFrame* frame = wxGetApp().CreateChildFrame(doc, this, false);
+    m_frame = frame;
 
-    wxSize size = m_frame->GetClientSize();
-    m_textsw = new MyTextWindow(this, m_frame, wxPoint(0, 0), size, wxTE_MULTILINE);
-    m_frame->SetTitle(wxT("TextEditView"));
+    wxSize size = frame->GetClientSize();
+    m_textsw = new MyTextWindow(this, frame, wxPoint(0, 0), size, wxTE_MULTILINE);
+    frame->SetTitle(wxT("TextEditView"));
+    frame->InitEditMenuHandler(m_textsw);
 
 #ifdef __X__
     // X seems to require a forced resize
     int x, y;
-    m_frame->GetSize(&x, &y);
-    m_frame->SetSize(wxDefaultCoord, wxDefaultCoord, x, y);
+    frame->GetSize(&x, &y);
+    frame->SetSize(wxDefaultCoord, wxDefaultCoord, x, y);
 #endif
 
-    m_frame->Show(true);
+    frame->Show(true);
     Activate(true);
 
     return true;
@@ -186,21 +185,6 @@
     return true;
 }
 
-bool TextEditView::ProcessEvent(wxEvent& event)
-{
-    bool processed = false;
-    if (!processed) switch (event.GetId())
-    {
-        case wxID_COPY:
-        case wxID_PASTE:
-        case wxID_SELECTALL:
-            processed = m_textsw->ProcessEvent(event);
-            break;
-    }
-    if (!processed) processed = wxView::ProcessEvent(event);
-    return processed;
-}
-
 /*
  * Window implementations
  */
Index: samples/docvwmdi/view.h
===================================================================
--- samples/docvwmdi/view.h	(revision 53062)
+++ samples/docvwmdi/view.h	(working copy)
@@ -60,6 +60,7 @@
 
 class TextEditView: public wxView
 {
+    DECLARE_DYNAMIC_CLASS(TextEditView)
 public:
     wxMDIChildFrame* m_frame;
     MyTextWindow* m_textsw;
@@ -71,15 +72,9 @@
     virtual void OnDraw(wxDC* dc);
     virtual void OnUpdate(wxView *sender, wxObject *hint = NULL);
     virtual bool OnClose(bool deleteWindow = true);
-    virtual bool ProcessEvent(wxEvent&);
 
-private:
-    void OnCopy(wxCommandEvent& WXUNUSED(event)) { m_textsw->Copy(); }
-    void OnPaste(wxCommandEvent& WXUNUSED(event)) { m_textsw->Paste(); }
-    void OnSelectAll(wxCommandEvent& WXUNUSED(event)) { m_textsw->SelectAll(); }
-
+protected:
     DECLARE_EVENT_TABLE()
-    DECLARE_DYNAMIC_CLASS(TextEditView)
 };
 
 #endif
Index: src/common/textcmn.cpp
===================================================================
--- src/common/textcmn.cpp	(revision 53062)
+++ src/common/textcmn.cpp	(working copy)
@@ -669,6 +669,22 @@
     return true;
 }
 
+// Constructor
+wxTextCtrlBase::wxTextCtrlBase()
+{
+    m_editmenu_handler = NULL;
+}
+
+// Destructor
+wxTextCtrlBase::~wxTextCtrlBase()
+{
+    if (m_editmenu_handler)
+    {
+        RemoveEventHandler(m_editmenu_handler);
+        wxDELETE(m_editmenu_handler)
+    }
+}
+
 // apply styling to text range
 bool wxTextCtrlBase::SetStyle(long WXUNUSED(start), long WXUNUSED(end),
                               const wxTextAttr& WXUNUSED(style))
@@ -994,6 +1010,102 @@
     return win->GetEventHandler()->ProcessEvent(event);
 }
 
+// ----------------------------------------------------------------------------
+// standard handlers for standard edit menu events
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(wxEditMenuEvtHandler, wxEvtHandler)
+    EVT_MENU(wxID_CUT, wxEditMenuEvtHandler::OnCut)
+    EVT_MENU(wxID_COPY, wxEditMenuEvtHandler::OnCopy)
+    EVT_MENU(wxID_PASTE, wxEditMenuEvtHandler::OnPaste)
+    EVT_MENU(wxID_UNDO, wxEditMenuEvtHandler::OnUndo)
+    EVT_MENU(wxID_REDO, wxEditMenuEvtHandler::OnRedo)
+    EVT_MENU(wxID_CLEAR, wxEditMenuEvtHandler::OnDelete)
+    EVT_MENU(wxID_SELECTALL, wxEditMenuEvtHandler::OnSelectAll)
+
+    EVT_UPDATE_UI(wxID_CUT, wxEditMenuEvtHandler::OnUpdateCut)
+    EVT_UPDATE_UI(wxID_COPY, wxEditMenuEvtHandler::OnUpdateCopy)
+    EVT_UPDATE_UI(wxID_PASTE, wxEditMenuEvtHandler::OnUpdatePaste)
+    EVT_UPDATE_UI(wxID_UNDO, wxEditMenuEvtHandler::OnUpdateUndo)
+    EVT_UPDATE_UI(wxID_REDO, wxEditMenuEvtHandler::OnUpdateRedo)
+    EVT_UPDATE_UI(wxID_CLEAR, wxEditMenuEvtHandler::OnUpdateDelete)
+    EVT_UPDATE_UI(wxID_SELECTALL, wxEditMenuEvtHandler::OnUpdateSelectAll)
+END_EVENT_TABLE()
+
+wxEditMenuEvtHandler::wxEditMenuEvtHandler(wxTextCtrl* edit) : wxEvtHandler(), m_edit(edit)
+{
+}
+
+void wxEditMenuEvtHandler::OnCopy(wxCommandEvent&)
+{
+    m_edit->Copy();
+}
+
+void wxEditMenuEvtHandler::OnCut(wxCommandEvent&)
+{
+    m_edit->Cut();
+}
+
+void wxEditMenuEvtHandler::OnPaste(wxCommandEvent&)
+{
+    m_edit->Paste();
+}
+
+void wxEditMenuEvtHandler::OnUndo(wxCommandEvent&)
+{
+    m_edit->Undo();
+}
+
+void wxEditMenuEvtHandler::OnRedo(wxCommandEvent&)
+{
+    m_edit->Undo();
+}
+
+void wxEditMenuEvtHandler::OnDelete(wxCommandEvent&)
+{
+    m_edit->Clear();
+}
+
+void wxEditMenuEvtHandler::OnSelectAll(wxCommandEvent&)
+{
+    m_edit->SelectAll();
+}
+
+void wxEditMenuEvtHandler::OnUpdateCut(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanCut());
+}
+
+void wxEditMenuEvtHandler::OnUpdateCopy(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanCopy());
+}
+
+void wxEditMenuEvtHandler::OnUpdatePaste(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanPaste());
+}
+
+void wxEditMenuEvtHandler::OnUpdateUndo(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanUndo());
+}
+
+void wxEditMenuEvtHandler::OnUpdateRedo(wxUpdateUIEvent& event)
+{
+    event.Enable(m_edit->CanRedo());
+}
+
+void wxEditMenuEvtHandler::OnUpdateSelectAll(wxUpdateUIEvent& event)
+{
+    event.Enable(!m_edit->IsEmpty());
+}
+
+void wxEditMenuEvtHandler::OnUpdateDelete(wxUpdateUIEvent& event)
+{ 
+    event.Enable(m_edit->HasSelection() && m_edit->IsEditable());
+}
+
 #else // !wxUSE_TEXTCTRL
 
 // define this one even if !wxUSE_TEXTCTRL because it is also used by other
Index: src/msw/textctrl.cpp
===================================================================
--- src/msw/textctrl.cpp	(revision 53062)
+++ src/msw/textctrl.cpp	(working copy)
@@ -254,23 +254,6 @@
 #if wxUSE_RICHEDIT
     EVT_CONTEXT_MENU(wxTextCtrl::OnContextMenu)
 #endif
-
-    EVT_MENU(wxID_CUT, wxTextCtrl::OnCut)
-    EVT_MENU(wxID_COPY, wxTextCtrl::OnCopy)
-    EVT_MENU(wxID_PASTE, wxTextCtrl::OnPaste)
-    EVT_MENU(wxID_UNDO, wxTextCtrl::OnUndo)
-    EVT_MENU(wxID_REDO, wxTextCtrl::OnRedo)
-    EVT_MENU(wxID_CLEAR, wxTextCtrl::OnDelete)
-    EVT_MENU(wxID_SELECTALL, wxTextCtrl::OnSelectAll)
-
-    EVT_UPDATE_UI(wxID_CUT, wxTextCtrl::OnUpdateCut)
-    EVT_UPDATE_UI(wxID_COPY, wxTextCtrl::OnUpdateCopy)
-    EVT_UPDATE_UI(wxID_PASTE, wxTextCtrl::OnUpdatePaste)
-    EVT_UPDATE_UI(wxID_UNDO, wxTextCtrl::OnUpdateUndo)
-    EVT_UPDATE_UI(wxID_REDO, wxTextCtrl::OnUpdateRedo)
-    EVT_UPDATE_UI(wxID_CLEAR, wxTextCtrl::OnUpdateDelete)
-    EVT_UPDATE_UI(wxID_SELECTALL, wxTextCtrl::OnUpdateSelectAll)
-
     EVT_SET_FOCUS(wxTextCtrl::OnSetFocus)
 END_EVENT_TABLE()
 
@@ -295,6 +278,9 @@
     m_privateContextMenu = NULL;
     m_updatesCount = -1;
     m_isNativeCaretShown = true;
+
+    m_editmenu_handler = new wxEditMenuEvtHandler(this);
+    PushEventHandler(m_editmenu_handler);
 }
 
 wxTextCtrl::~wxTextCtrl()
@@ -2063,80 +2049,6 @@
     return wxSize(wText, hText);
 }
 
-// ----------------------------------------------------------------------------
-// standard handlers for standard edit menu events
-// ----------------------------------------------------------------------------
-
-void wxTextCtrl::OnCut(wxCommandEvent& WXUNUSED(event))
-{
-    Cut();
-}
-
-void wxTextCtrl::OnCopy(wxCommandEvent& WXUNUSED(event))
-{
-    Copy();
-}
-
-void wxTextCtrl::OnPaste(wxCommandEvent& WXUNUSED(event))
-{
-    Paste();
-}
-
-void wxTextCtrl::OnUndo(wxCommandEvent& WXUNUSED(event))
-{
-    Undo();
-}
-
-void wxTextCtrl::OnRedo(wxCommandEvent& WXUNUSED(event))
-{
-    Redo();
-}
-
-void wxTextCtrl::OnDelete(wxCommandEvent& WXUNUSED(event))
-{
-    RemoveSelection();
-}
-
-void wxTextCtrl::OnSelectAll(wxCommandEvent& WXUNUSED(event))
-{
-    SelectAll();
-}
-
-void wxTextCtrl::OnUpdateCut(wxUpdateUIEvent& event)
-{
-    event.Enable( CanCut() );
-}
-
-void wxTextCtrl::OnUpdateCopy(wxUpdateUIEvent& event)
-{
-    event.Enable( CanCopy() );
-}
-
-void wxTextCtrl::OnUpdatePaste(wxUpdateUIEvent& event)
-{
-    event.Enable( CanPaste() );
-}
-
-void wxTextCtrl::OnUpdateUndo(wxUpdateUIEvent& event)
-{
-    event.Enable( CanUndo() );
-}
-
-void wxTextCtrl::OnUpdateRedo(wxUpdateUIEvent& event)
-{
-    event.Enable( CanRedo() );
-}
-
-void wxTextCtrl::OnUpdateDelete(wxUpdateUIEvent& event)
-{
-    event.Enable( HasSelection() && IsEditable() );
-}
-
-void wxTextCtrl::OnUpdateSelectAll(wxUpdateUIEvent& event)
-{
-    event.Enable( !IsEmpty() );
-}
-
 void wxTextCtrl::OnContextMenu(wxContextMenuEvent& event)
 {
 #if wxUSE_RICHEDIT

 	  	 

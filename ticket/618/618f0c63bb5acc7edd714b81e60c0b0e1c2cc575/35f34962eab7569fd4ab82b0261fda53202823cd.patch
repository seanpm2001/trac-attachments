Nur in ./trunk-w/: bk-deps.
Nur in ./trunk-w/: bk-make-pch.
Nur in ./trunk-w/: config.log.
Nur in ./trunk-w/: config.status.
Nur in ./trunk-w/demos/bombs: Makefile.
Nur in ./trunk-w/demos/forty: Makefile.
Nur in ./trunk-w/demos/fractal: Makefile.
Nur in ./trunk-w/demos/life: Makefile.
Nur in ./trunk-w/demos: Makefile.
Nur in ./trunk-w/demos/poem: Makefile.
diff -r ./trunk-o/include/wx/xrc/xh_menu.h ./trunk-w/include/wx/xrc/xh_menu.h
15a16,31
> #if wxUSE_XRC && (wxUSE_MENUS || wxUSE_TOOLBAR)
> 
> class WXDLLIMPEXP_XRC wxSeparatorXmlHandler : public wxXmlResourceHandler
> {
> 
>     DECLARE_DYNAMIC_CLASS(wxSeparatorXmlHandler);
> 
> public:
>     wxSeparatorXmlHandler();
>     virtual wxObject *DoCreateResource();
>     virtual bool CanHandle(wxXmlNode *node);
> 
> };
> 
> #endif // wxUSE_XRC && (wxUSE_MENUS || wxUSE_TOOLBAR)
> 
17a34,50
> class WXDLLIMPEXP_XRC wxMenuItemXmlHandler : public wxXmlResourceHandler
> {
> 
>     DECLARE_DYNAMIC_CLASS(wxMenuItemXmlHandler)
> 
> public:
>     wxMenuItemXmlHandler();
>     virtual wxObject *DoCreateResource();
>     virtual bool CanHandle(wxXmlNode *node);
> 
> private:    
>     void DoCreateBreakResource();
>     void DoCreateMenuItemResource();
> 
> };
> 
> 
26,28d58
< 
< private:
<     bool m_insideMenu;
Nur in ./trunk-w/lib: wx.
Nur in ./trunk-w/: Makefile.
Nur in ./trunk-w/samples/animate: Makefile.
Nur in ./trunk-w/samples/artprov: Makefile.
Nur in ./trunk-w/samples/aui: Makefile.
Nur in ./trunk-w/samples/calendar: Makefile.
Nur in ./trunk-w/samples/caret: Makefile.
Nur in ./trunk-w/samples/clipboard: Makefile.
Nur in ./trunk-w/samples/collpane: Makefile.
Nur in ./trunk-w/samples/combo: Makefile.
Nur in ./trunk-w/samples/config: Makefile.
Nur in ./trunk-w/samples/console: Makefile.
Nur in ./trunk-w/samples/controls: Makefile.
Nur in ./trunk-w/samples/dataview: Makefile.
Nur in ./trunk-w/samples/debugrpt: Makefile.
Nur in ./trunk-w/samples/dialogs: Makefile.
Nur in ./trunk-w/samples/dialup: Makefile.
Nur in ./trunk-w/samples/display: Makefile.
Nur in ./trunk-w/samples/dnd: Makefile.
Nur in ./trunk-w/samples/docview: Makefile.
Nur in ./trunk-w/samples/dragimag: Makefile.
Nur in ./trunk-w/samples/drawing: Makefile.
Nur in ./trunk-w/samples/erase: Makefile.
Nur in ./trunk-w/samples/event: Makefile.
Nur in ./trunk-w/samples/except: Makefile.
Nur in ./trunk-w/samples/exec: Makefile.
Nur in ./trunk-w/samples/font: Makefile.
Nur in ./trunk-w/samples/fswatcher: Makefile.
Nur in ./trunk-w/samples/grid: Makefile.
Nur in ./trunk-w/samples/help: Makefile.
Nur in ./trunk-w/samples/htlbox: Makefile.
Nur in ./trunk-w/samples/html/about: Makefile.
Nur in ./trunk-w/samples/html/help: Makefile.
Nur in ./trunk-w/samples/html/helpview: Makefile.
Nur in ./trunk-w/samples/html: Makefile.
Nur in ./trunk-w/samples/html/printing: Makefile.
Nur in ./trunk-w/samples/html/test: Makefile.
Nur in ./trunk-w/samples/html/virtual: Makefile.
Nur in ./trunk-w/samples/html/widget: Makefile.
Nur in ./trunk-w/samples/html/zip: Makefile.
Nur in ./trunk-w/samples/image: Makefile.
Nur in ./trunk-w/samples/internat: Makefile.
Nur in ./trunk-w/samples/ipc: Makefile.
Nur in ./trunk-w/samples/joytest: Makefile.
Nur in ./trunk-w/samples/keyboard: Makefile.
Nur in ./trunk-w/samples/layout: Makefile.
Nur in ./trunk-w/samples/listctrl: Makefile.
Nur in ./trunk-w/samples: Makefile.
Nur in ./trunk-w/samples/mdi: Makefile.
Nur in ./trunk-w/samples/menu: Makefile.
Nur in ./trunk-w/samples/minimal: Makefile.
Nur in ./trunk-w/samples/notebook: Makefile.
Nur in ./trunk-w/samples/opengl/cube: Makefile.
Nur in ./trunk-w/samples/opengl/isosurf: Makefile.
Nur in ./trunk-w/samples/opengl: Makefile.
Nur in ./trunk-w/samples/opengl/penguin: Makefile.
Nur in ./trunk-w/samples/popup: Makefile.
Nur in ./trunk-w/samples/printing: Makefile.
Nur in ./trunk-w/samples/propgrid: Makefile.
Nur in ./trunk-w/samples/render: Makefile.
Nur in ./trunk-w/samples/ribbon: Makefile.
Nur in ./trunk-w/samples/richtext: Makefile.
Nur in ./trunk-w/samples/sashtest: Makefile.
Nur in ./trunk-w/samples/scroll: Makefile.
Nur in ./trunk-w/samples/shaped: Makefile.
Nur in ./trunk-w/samples/sockets: Makefile.
Nur in ./trunk-w/samples/sound: Makefile.
Nur in ./trunk-w/samples/splash: Makefile.
Nur in ./trunk-w/samples/splitter: Makefile.
Nur in ./trunk-w/samples/statbar: Makefile.
Nur in ./trunk-w/samples/stc: Makefile.
Nur in ./trunk-w/samples/svg: Makefile.
Nur in ./trunk-w/samples/taborder: Makefile.
Nur in ./trunk-w/samples/taskbar: Makefile.
Nur in ./trunk-w/samples/text: Makefile.
Nur in ./trunk-w/samples/thread: Makefile.
Nur in ./trunk-w/samples/toolbar: Makefile.
Nur in ./trunk-w/samples/treectrl: Makefile.
Nur in ./trunk-w/samples/typetest: Makefile.
Nur in ./trunk-w/samples/validate: Makefile.
Nur in ./trunk-w/samples/vscroll: Makefile.
Nur in ./trunk-w/samples/widgets: Makefile.
Nur in ./trunk-w/samples/wizard: Makefile.
Nur in ./trunk-w/samples/wrapsizer: Makefile.
Nur in ./trunk-w/samples/xrc: Makefile.
diff -r ./trunk-o/samples/xrc/rc/menu.xrc ./trunk-w/samples/xrc/rc/menu.xrc
18c18,19
< 
---
>         <object class="separator">
>         </object>
diff -r ./trunk-o/src/xrc/xh_menu.cpp ./trunk-w/src/xrc/xh_menu.cpp
18,19d17
< #if wxUSE_XRC && wxUSE_MENUS
< 
28c26,28
< IMPLEMENT_DYNAMIC_CLASS(wxMenuXmlHandler, wxXmlResourceHandler)
---
> #if wxUSE_XRC && (wxUSE_MENUS || wxUSE_TOOLBAR)
> 
> IMPLEMENT_DYNAMIC_CLASS(wxSeparatorXmlHandler, wxXmlResourceHandler)
30,31c30,31
< wxMenuXmlHandler::wxMenuXmlHandler() :
<         wxXmlResourceHandler(), m_insideMenu(false)
---
> wxSeparatorXmlHandler::wxSeparatorXmlHandler()
>     : wxXmlResourceHandler()
33c33
<     XRC_ADD_STYLE(wxMENU_TEAROFF);
---
> 
36c36
< wxObject *wxMenuXmlHandler::DoCreateResource()
---
> wxObject *wxSeparatorXmlHandler::DoCreateResource()
38c38,47
<     if (m_class == wxT("wxMenu"))
---
>     // Assert parent for separator is of type wxMenu or wxToolBar.
>     if (
>         m_class == wxT("separator") &&
> #if wxUSE_MENUS
>         wxDynamicCast(m_parent, wxMenu) == NULL &&
> #endif
> #if wxUSE_TOOLBAR
>         wxDynamicCast(m_parent, wxToolBar) == NULL
> #endif
>        )
40,41c49,63
<         wxMenu *menu = m_instance ? wxStaticCast(m_instance, wxMenu)
<                                   : new wxMenu(GetStyle());
---
>         ReportError
>         (
>             m_node,
>             "parent of separator must be of class wxMenu or wxToolBar"
>         );
>         return NULL;
>     }
> 
> #if wxUSE_TOOLBAR
>     if (m_parent->IsKindOf(CLASSINFO(wxToolBar)) == true)
>     {
>         wxToolBar *toolBar = wxDynamicCast(m_parent, wxToolBar);
>         toolBar->AddSeparator();
>     }
> #endif
43,44c65,71
<         wxString title = GetText(wxT("label"));
<         wxString help = GetText(wxT("help"));
---
> #if wxUSE_MENUS
>     if (m_parent->IsKindOf(CLASSINFO(wxMenu)) == true)
>     {
>         wxMenu *menu = wxDynamicCast(m_parent, wxMenu);
>         menu->AppendSeparator();
>     }
> #endif
46,49c73,74
<         bool oldins = m_insideMenu;
<         m_insideMenu = true;
<         CreateChildren(menu, true/*only this handler*/);
<         m_insideMenu = oldins;
---
>     return NULL;
> }
51,65c76,79
<         wxMenuBar *p_bar = wxDynamicCast(m_parent, wxMenuBar);
<         if (p_bar)
<         {
<             p_bar->Append(menu, title);
<         }
<         else
<         {
<             wxMenu *p_menu = wxDynamicCast(m_parent, wxMenu);
<             if (p_menu)
<             {
<                 p_menu->Append(GetID(), title, menu, help);
<                 if (HasParam(wxT("enabled")))
<                     p_menu->Enable(GetID(), GetBool(wxT("enabled")));
<             }
<         }
---
> bool wxSeparatorXmlHandler::CanHandle(wxXmlNode *node)
> {
>     return IsOfClass(node, wxT("separator"));
> }
67c81,117
<         return menu;
---
> #endif
> 
> #if wxUSE_XRC && wxUSE_MENUS
> 
> IMPLEMENT_DYNAMIC_CLASS(wxMenuItemXmlHandler, wxXmlResourceHandler)
> 
> wxMenuItemXmlHandler::wxMenuItemXmlHandler()
>     : wxXmlResourceHandler()
> {
> 
> }
> 
> wxObject *wxMenuItemXmlHandler::DoCreateResource()
> {
>     // Assert parent to be non-NULL.
>     if (m_parent == NULL)
>     {
>         ReportError
>         (
>             m_node,
>             "m_parent == NULL"
>         );
>         return NULL;
>     }
> 
>     // Assert parent of wxMenuItem or break is of type wxMenu.
>     if (
>         m_class == wxT("wxMenuItem") &&
>         wxDynamicCast(m_parent, wxMenu) == NULL
>        )
>     {
>         ReportError
>         (
>             m_node,
>             "parent of wxMenuItem must be of class wxMenu"
>         );
>         return NULL;
69a120,137
>     // Assert parent of break is of type wxMenu.
>     if (
>         m_class == wxT("break") &&
>         wxDynamicCast(m_parent, wxMenu) == NULL
>        )
>     {
>         ReportError
>         (
>             m_node,
>             "parent of wxMenuItem must be of class wxMenu"
>         );
>         return NULL;
>     }
> 
>     if (m_class == wxT("break"))
>     {
>         DoCreateBreakResource();
>     }
72c140,141
<         wxMenu *p_menu = wxDynamicCast(m_parent, wxMenu);
---
>         DoCreateMenuItemResource();
>     }
74,78c143,193
<         if (m_class == wxT("separator"))
<             p_menu->AppendSeparator();
<         else if (m_class == wxT("break"))
<             p_menu->Break();
<         else /*wxMenuItem*/
---
>     return NULL;
> }
> 
> bool wxMenuItemXmlHandler::CanHandle(wxXmlNode *node)
> {
>     // We can not perform a check wether we are inside a menu or not (according to documentation)
>     // here as we can not expect this instance to be initialized yet. The check is performed in
>     // wxMenuItemXmlHandler::DoCreateResource.
>     return (
>             IsOfClass(node, wxT("wxMenuItem")) ||
>             IsOfClass(node, wxT("break"))
>            );
> }
> 
> void wxMenuItemXmlHandler::DoCreateBreakResource()
> {
>     wxMenu *p_menu = wxDynamicCast(m_parent, wxMenu);
> 
>     // A break is not an object of its own right like wxMenuItem so it does not
>     // deserve its own wxXmlResourceHandler class. However, it is still more sensible
>     // to handle it here than inside wxMenuXmlHandler.
>     p_menu->Break();
> }
> 
> void wxMenuItemXmlHandler::DoCreateMenuItemResource()
> {
>     wxMenu *p_menu = wxDynamicCast(m_parent, wxMenu);
> 
>     int id = GetID();
>     
>     wxString label = GetText(wxT("label"));
> 
>     wxString accel = GetText(wxT("accel"), false);
> 
>     wxString help = GetText(wxT("help"));
> 
>     wxString fullLabel = label;
>     if (!accel.empty())
>     {
>         fullLabel << wxT("\t") << accel;
>     }
> 
>     wxItemKind itemKind = wxITEM_NORMAL;
>     if (GetBool(wxT("radio")))
>     {
>         itemKind = wxITEM_RADIO;
>     }
> 
>     if (GetBool(wxT("checkable")))
>     {
>         if (itemKind != wxITEM_NORMAL)
80,99c195,200
<             int id = GetID();
<             wxString label = GetText(wxT("label"));
<             wxString accel = GetText(wxT("accel"), false);
<             wxString fullLabel = label;
<             if (!accel.empty())
<                 fullLabel << wxT("\t") << accel;
< 
<             wxItemKind kind = wxITEM_NORMAL;
<             if (GetBool(wxT("radio")))
<                 kind = wxITEM_RADIO;
<             if (GetBool(wxT("checkable")))
<             {
<                 if ( kind != wxITEM_NORMAL )
<                 {
<                     ReportParamError
<                     (
<                         "checkable",
<                         "menu item can't have both <radio> and <checkable> properties"
<                     );
<                 }
---
>             ReportParamError
>             (
>                 "checkable",
>                 "menu item can't have both <radio> and <checkable> properties"
>             );
>         }
101,102c202,203
<                 kind = wxITEM_CHECK;
<             }
---
>         itemKind = wxITEM_CHECK;
>     }
104,105c205
<             wxMenuItem *mitem = new wxMenuItem(p_menu, id, fullLabel,
<                                                GetText(wxT("help")), kind);
---
>     wxMenuItem *p_menuItem = new wxMenuItem(p_menu, id, fullLabel, help, itemKind);
108,111c208,211
<             if (HasParam(wxT("bitmap")))
<             {
<                 // currently only wxMSW has support for using different checked
<                 // and unchecked bitmaps for menu items
---
>     if (HasParam(wxT("bitmap")))
>     {
>         // currently only wxMSW has support for using different checked
>         // and unchecked bitmaps for menu items
113,116c213,216
<                 if (HasParam(wxT("bitmap2")))
<                     mitem->SetBitmaps(GetBitmap(wxT("bitmap2"), wxART_MENU),
<                                       GetBitmap(wxT("bitmap"), wxART_MENU));
<                 else
---
>         if (HasParam(wxT("bitmap2")))
>             p_menuItem ->SetBitmaps(GetBitmap(wxT("bitmap2"), wxART_MENU),
>                                     GetBitmap(wxT("bitmap"), wxART_MENU));
>         else
118,119c218,219
<                     mitem->SetBitmap(GetBitmap(wxT("bitmap"), wxART_MENU));
<             }
---
>             p_menuItem ->SetBitmap(GetBitmap(wxT("bitmap"), wxART_MENU));
>     }
121,126c221,226
<             p_menu->Append(mitem);
<             mitem->Enable(GetBool(wxT("enabled"), true));
<             if (kind == wxITEM_CHECK)
<                 mitem->Check(GetBool(wxT("checked")));
<         }
<         return NULL;
---
> 
>     p_menuItem ->Enable(GetBool(wxT("enabled"), true));
>     
>     if (itemKind == wxITEM_CHECK)
>     {
>         p_menuItem ->Check(GetBool(wxT("checked")));
127a228,237
> 
>     p_menu->Append(p_menuItem);
> }
> 
> IMPLEMENT_DYNAMIC_CLASS(wxMenuXmlHandler, wxXmlResourceHandler)
> 
> wxMenuXmlHandler::wxMenuXmlHandler()
>     : wxXmlResourceHandler()
> {
>     XRC_ADD_STYLE(wxMENU_TEAROFF);
129a240,243
> wxObject *wxMenuXmlHandler::DoCreateResource()
> {
>     wxMenu *p_menu = m_instance ? wxStaticCast(m_instance, wxMenu)
>                                 : new wxMenu(GetStyle());
130a245,269
>     wxString title = GetText(wxT("label"));
>     wxString help = GetText(wxT("help"));
> 
>     wxMenuBar *p_menuBar = wxDynamicCast(m_parent, wxMenuBar);
>     if (p_menuBar)
>     {
>         p_menuBar->Append(p_menu, title);
>     }
>     else
>     {
>         wxMenu *p_menu = wxDynamicCast(m_parent, wxMenu);
>         if (p_menu)
>         {
>             p_menu->Append(GetID(), title, p_menu, help);
>             if (HasParam(wxT("enabled")))
>             {
>                 p_menu->Enable(GetID(), GetBool(wxT("enabled")));
>             }
>         }
>     }
> 
>     CreateChildren(p_menu);
> 
>     return p_menu;
> }
134,139c273
<     return IsOfClass(node, wxT("wxMenu")) ||
<            (m_insideMenu &&
<                (IsOfClass(node, wxT("wxMenuItem")) ||
<                 IsOfClass(node, wxT("break")) ||
<                 IsOfClass(node, wxT("separator")))
<            );
---
>     return IsOfClass(node, wxT("wxMenu"));
diff -r ./trunk-o/src/xrc/xh_toolb.cpp ./trunk-w/src/xrc/xh_toolb.cpp
149a150,151
>         CreateChildren(m_toolbar);
> /*
155a158
> */
234,235c237
<             (m_isInside && IsOfClass(node, wxT("tool"))) ||
<             (m_isInside && IsOfClass(node, wxT("separator"))));
---
>             (m_isInside && IsOfClass(node, wxT("tool"))));
diff -r ./trunk-o/src/xrc/xmlrsall.cpp ./trunk-w/src/xrc/xmlrsall.cpp
126a127,131
> 
> #if (wxUSE_MENUS || wxUSE_TOOLBAR)
>     AddHandler(new wxSeparatorXmlHandler);
> #endif
> 
127a133
>     AddHandler(new wxMenuItemXmlHandler);
Nur in ./trunk-w/utils/emulator: Makefile.
Nur in ./trunk-w/utils/emulator/src: Makefile.
Nur in ./trunk-w/utils/execmon: Makefile.
Nur in ./trunk-w/utils/helpview: Makefile.
Nur in ./trunk-w/utils/helpview/src: Makefile.
Nur in ./trunk-w/utils/hhp2cached: Makefile.
Nur in ./trunk-w/utils/ifacecheck: rungccxml.sh.
Nur in ./trunk-w/utils/ifacecheck/src: Makefile.
Nur in ./trunk-w/utils: Makefile.
Nur in ./trunk-w/utils/screenshotgen: Makefile.
Nur in ./trunk-w/utils/screenshotgen/src: Makefile.
Nur in ./trunk-w/utils/wxrc: Makefile.
Nur in ./trunk-w/: version-script.
Nur in ./trunk-w/: wx-config.

Index: src/osx/cocoa/glcanvas.mm
===================================================================
--- src/osx/cocoa/glcanvas.mm	(revision 77686)
+++ src/osx/cocoa/glcanvas.mm	(working copy)
@@ -80,108 +80,112 @@
 
 WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
 {
-    NSOpenGLPixelFormatAttribute data[512];
-    const NSOpenGLPixelFormatAttribute defaultAttribs[] =
+    NSOpenGLPixelFormatAttribute attribs[512];
+
+    unsigned p = 0;
+    attribs[p++] = NSOpenGLPFAMinimumPolicy; // make _SIZE tags behave more like GLX
+
+    // Test if we support hardware acceleration
+    const NSOpenGLPixelFormatAttribute testAttribs[] = { NSOpenGLPFAAccelerated, 0 };
+    WXGLPixelFormat testFormat = [[NSOpenGLPixelFormat alloc] initWithAttributes:(NSOpenGLPixelFormatAttribute*) testAttribs];
+    if ( testFormat )
     {
-        NSOpenGLPFADoubleBuffer,
-        NSOpenGLPFAMinimumPolicy,
-        NSOpenGLPFAColorSize,(NSOpenGLPixelFormatAttribute)8,
-        NSOpenGLPFAAlphaSize,(NSOpenGLPixelFormatAttribute)0,
-        NSOpenGLPFADepthSize,(NSOpenGLPixelFormatAttribute)8,
-        NSOpenGLPFAAccelerated, // use hardware accelerated context
-        0
-    };
+        attribs[p++] = NSOpenGLPFAAccelerated; // use hardware accelerated context
+        [testFormat release];
+    }
 
-    const NSOpenGLPixelFormatAttribute *attribs;
     if ( !attribList )
     {
-        attribs = defaultAttribs;
+        // Default attributes
+        attribs[p++] = NSOpenGLPFADoubleBuffer;
+        attribs[p++] = NSOpenGLPFAColorSize;
+        attribs[p++] = (NSOpenGLPixelFormatAttribute)8;
+        attribs[p++] = NSOpenGLPFAAlphaSize;
+        attribs[p++] = (NSOpenGLPixelFormatAttribute)0;
+        attribs[p++] = NSOpenGLPFADepthSize;
+        attribs[p++] = (NSOpenGLPixelFormatAttribute)8;
     }
     else
     {
-        unsigned p = 0;
-        data[p++] = NSOpenGLPFAMinimumPolicy; // make _SIZE tags behave more like GLX
-        data[p++] = NSOpenGLPFAAccelerated; // use hardware accelerated context
-
-        for ( unsigned arg = 0; attribList[arg] !=0 && p < WXSIZEOF(data); )
+        for ( unsigned arg = 0; attribList[arg] !=0 && p < WXSIZEOF(attribs); )
         {
             switch ( attribList[arg++] )
             {
                 case WX_GL_RGBA:
-                    //data[p++] = AGL_RGBA;
+                    //attribs[p++] = AGL_RGBA;
                     break;
 
                 case WX_GL_BUFFER_SIZE:
-                    //data[p++] = AGL_BUFFER_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_BUFFER_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_LEVEL:
-                    //data[p++]=AGL_LEVEL;
-                    //data[p++]=attribList[arg++];
+                    //attribs[p++]=AGL_LEVEL;
+                    //attribs[p++]=attribList[arg++];
                     break;
 
                 case WX_GL_DOUBLEBUFFER:
-                    data[p++] = NSOpenGLPFADoubleBuffer;
+                    attribs[p++] = NSOpenGLPFADoubleBuffer;
                     break;
 
                 case WX_GL_STEREO:
-                    data[p++] = NSOpenGLPFAStereo;
+                    attribs[p++] = NSOpenGLPFAStereo;
                     break;
 
                 case WX_GL_AUX_BUFFERS:
-                    data[p++] = NSOpenGLPFAAuxBuffers;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFAAuxBuffers;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_MIN_RED:
-                    data[p++] = NSOpenGLPFAColorSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFAColorSize;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_MIN_GREEN:
-                    //data[p++] = AGL_GREEN_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_GREEN_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_MIN_BLUE:
-                    //data[p++] = AGL_BLUE_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_BLUE_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_MIN_ALPHA:
-                    data[p++] = NSOpenGLPFAAlphaSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFAAlphaSize;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_DEPTH_SIZE:
-                    data[p++] = NSOpenGLPFADepthSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFADepthSize;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_STENCIL_SIZE:
-                    data[p++] = NSOpenGLPFAStencilSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFAStencilSize;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_MIN_ACCUM_RED:
-                    data[p++] = NSOpenGLPFAAccumSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFAAccumSize;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_MIN_ACCUM_GREEN:
-                    //data[p++] = AGL_ACCUM_GREEN_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_ACCUM_GREEN_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_MIN_ACCUM_BLUE:
-                    //data[p++] = AGL_ACCUM_BLUE_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_ACCUM_BLUE_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_MIN_ACCUM_ALPHA:
-                    //data[p++] = AGL_ACCUM_ALPHA_SIZE;
-                    //data[p++] = attribList[arg++];
+                    //attribs[p++] = AGL_ACCUM_ALPHA_SIZE;
+                    //attribs[p++] = attribList[arg++];
                     break;
 
                 case WX_GL_SAMPLE_BUFFERS:
@@ -193,11 +197,11 @@
                         return nil;
                     }
 
-                    data[p++] = NSOpenGLPFASampleBuffers;
-                    if ( (data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++]) == true )
+                    attribs[p++] = NSOpenGLPFASampleBuffers;
+                    if ( (attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++]) == true )
                     {
                         // don't use software fallback
-                        data[p++] = NSOpenGLPFANoRecovery;
+                        attribs[p++] = NSOpenGLPFANoRecovery;
                     }
                     break;
 
@@ -210,26 +214,24 @@
                         return nil;
                     }
 
-                    data[p++] = NSOpenGLPFASamples;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
+                    attribs[p++] = NSOpenGLPFASamples;
+                    attribs[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
 
                 case WX_GL_CORE_PROFILE:
-                    data[p++] = NSOpenGLPFAOpenGLProfile;
+                    attribs[p++] = NSOpenGLPFAOpenGLProfile;
                     // request an OpenGL core profile
                     // will use the highest available OpenGL version
                     // which will be at least 3.2
-                    data[p++] = NSOpenGLProfileVersion3_2Core;
+                    attribs[p++] = NSOpenGLProfileVersion3_2Core;
 
                     break;
             }
         }
+    }
 
-        data[p] = 0;
+    attribs[p] = 0;
 
-        attribs = data;
-    }
-
     return [[NSOpenGLPixelFormat alloc] initWithAttributes:(NSOpenGLPixelFormatAttribute*) attribs];
 }
 

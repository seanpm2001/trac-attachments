Index: wx/chkconf.h
===================================================================
--- wx/chkconf.h	(revision 77954)
+++ wx/chkconf.h	(working copy)
@@ -227,6 +227,14 @@
 #   endif
 #endif /* !defined(wxUSE_PRINTF_POS_PARAMS) */
 
+#ifndef wxUSE_WXVSNPRINTF_ALWAYS
+#   ifdef wxABORT_ON_CONFIG_ERROR
+#       error "wxUSE_WXVSNPRINTF_ALWAYS must be defined, please read comment near the top of this file."
+#   else
+#       define wxUSE_WXVSNPRINTF_ALWAYS 0
+#   endif
+#endif /* !defined(wxUSE_WXVSNPRINTF_ALWAYS) */
+
 #ifndef wxUSE_PROTOCOL
 #   ifdef wxABORT_ON_CONFIG_ERROR
 #       error "wxUSE_PROTOCOL must be defined, please read comment near the top of this file."
Index: wx/msw/setup0.h
===================================================================
--- wx/msw/setup0.h	(revision 77954)
+++ wx/msw/setup0.h	(working copy)
@@ -266,6 +266,23 @@
 // Recommended setting: 1 if you want to support multiple languages
 #define wxUSE_PRINTF_POS_PARAMS      1
 
+// Always use the wxWidgets implementation of vsnprintf instead of the 
+// system's implementation.
+//
+// This is useful to make vsnprintf more consistent across platforms, such as
+// support for %zu for size_t variables which is not supported by the system's 
+// implementation under windows.
+//
+// Disadvantage is that wxWidgets's implementation does not support 
+// width/precision specifiers as a parameter in combination with positional
+// parameters.
+//
+// Default is 0
+//
+// Recommended setting: 0 if you do not care about specifiers not supported
+// under windows.
+#define wxUSE_WXVSNPRINTF_ALWAYS      0
+
 // Enable the use of compiler-specific thread local storage keyword, if any.
 // This is used for wxTLS_XXX() macros implementation and normally should use
 // the compiler-provided support as it's simpler and more efficient, but is
Index: wx/private/wxprintf.h
===================================================================
--- wx/private/wxprintf.h	(revision 77954)
+++ wx/private/wxprintf.h	(working copy)
@@ -310,7 +310,11 @@
                 // for this purpose in libc5 and by wx <= 2.8
                 ilen = 3;
                 CHECK_PREC
+#ifdef __VISUALC__
+				m_szFlags[flagofs++] = 'I';
+#else // !__VISUALC__
                 m_szFlags[flagofs++] = char(ch);
+#endif // __VISUALC__/!__VISUALC__
                 break;
 
             case wxT('*'):
Index: wx/wxcrtvararg.h
===================================================================
--- wx/wxcrtvararg.h	(revision 77954)
+++ wx/wxcrtvararg.h	(working copy)
@@ -92,66 +92,72 @@
     #endif
 #endif /* __MINGW32__ */
 
-#if wxUSE_PRINTF_POS_PARAMS
+#if wxUSE_WXVSNPRINTF_ALWAYS
     /*
-        The systems where vsnprintf() supports positional parameters should
-        define the HAVE_UNIX98_PRINTF symbol.
-
-        On systems which don't (e.g. Windows) we are forced to use
-        our wxVsnprintf() implementation.
-    */
-    #if defined(HAVE_UNIX98_PRINTF)
-        #ifdef HAVE_VSWPRINTF
-            #define wxCRT_VsnprintfW   vswprintf
-        #endif
-        #ifdef HAVE_BROKEN_VSNPRINTF_DECL
-            #define wxCRT_VsnprintfA    wx_fixed_vsnprintf
-        #else
-            #define wxCRT_VsnprintfA    vsnprintf
-        #endif
-    #else /* !HAVE_UNIX98_PRINTF */
+	    Always use our own wxVsnprintf() implementation
+	*/
+#else /* !wxUSE_WXVSNPRINTF_ALWAYS */
+    #if wxUSE_PRINTF_POS_PARAMS
         /*
-            The only compiler with positional parameters support under Windows
-            is VC++ 8.0 which provides a new xxprintf_p() functions family.
-            The 2003 PSDK includes a slightly earlier version of VC8 than the
-            main release and does not have the printf_p functions.
-         */
-        #if defined _MSC_FULL_VER && _MSC_FULL_VER >= 140050727 && !defined __WXWINCE__
-            #define wxCRT_VsnprintfA    _vsprintf_p
-            #define wxCRT_VsnprintfW    _vswprintf_p
-        #endif
-    #endif /* HAVE_UNIX98_PRINTF/!HAVE_UNIX98_PRINTF */
-#else /* !wxUSE_PRINTF_POS_PARAMS */
-    /*
-       We always want to define safe snprintf() function to be used instead of
-       sprintf(). Some compilers already have it (or rather vsnprintf() which
-       we really need...), otherwise we implement it using our own printf()
-       code.
-
-       We define function with a trailing underscore here because the real one
-       is a wrapper around it as explained below
-     */
-
-    #if defined(__VISUALC__) || \
-            (defined(__BORLANDC__) && __BORLANDC__ >= 0x540)
-        #define wxCRT_VsnprintfA    _vsnprintf
-        #define wxCRT_VsnprintfW    _vsnwprintf
-    #else
-        #if defined(HAVE__VSNWPRINTF)
-            #define wxCRT_VsnprintfW    _vsnwprintf
-        #elif defined(HAVE_VSWPRINTF)
-            #define wxCRT_VsnprintfW     vswprintf
-        #endif
-
-        #if defined(HAVE_VSNPRINTF)
+            The systems where vsnprintf() supports positional parameters should
+            define the HAVE_UNIX98_PRINTF symbol.
+    
+            On systems which don't (e.g. Windows) we are forced to use
+            our wxVsnprintf() implementation.
+        */
+        #if defined(HAVE_UNIX98_PRINTF)
+            #ifdef HAVE_VSWPRINTF
+                #define wxCRT_VsnprintfW   vswprintf
+            #endif
             #ifdef HAVE_BROKEN_VSNPRINTF_DECL
                 #define wxCRT_VsnprintfA    wx_fixed_vsnprintf
             #else
                 #define wxCRT_VsnprintfA    vsnprintf
             #endif
+        #else /* !HAVE_UNIX98_PRINTF */
+            /*
+                The only compiler with positional parameters support under Windows
+                is VC++ 8.0 which provides a new xxprintf_p() functions family.
+                The 2003 PSDK includes a slightly earlier version of VC8 than the
+                main release and does not have the printf_p functions.
+             */
+            #if defined _MSC_FULL_VER && _MSC_FULL_VER >= 140050727 && !defined __WXWINCE__
+                #define wxCRT_VsnprintfA    _vsprintf_p
+                #define wxCRT_VsnprintfW    _vswprintf_p
+            #endif
+        #endif /* HAVE_UNIX98_PRINTF/!HAVE_UNIX98_PRINTF */
+    #else /* !wxUSE_PRINTF_POS_PARAMS */
+        /*
+           We always want to define safe snprintf() function to be used instead of
+           sprintf(). Some compilers already have it (or rather vsnprintf() which
+           we really need...), otherwise we implement it using our own printf()
+           code.
+    
+           We define function with a trailing underscore here because the real one
+           is a wrapper around it as explained below
+         */
+    
+        #if defined(__VISUALC__) || \
+                (defined(__BORLANDC__) && __BORLANDC__ >= 0x540)
+            #define wxCRT_VsnprintfA    _vsnprintf
+            #define wxCRT_VsnprintfW    _vsnwprintf
+        #else
+            #if defined(HAVE__VSNWPRINTF)
+                #define wxCRT_VsnprintfW    _vsnwprintf
+            #elif defined(HAVE_VSWPRINTF)
+                #define wxCRT_VsnprintfW     vswprintf
+            #endif
+    
+            #if defined(HAVE_VSNPRINTF)
+                #ifdef HAVE_BROKEN_VSNPRINTF_DECL
+                    #define wxCRT_VsnprintfA    wx_fixed_vsnprintf
+                #else
+                    #define wxCRT_VsnprintfA    vsnprintf
+                #endif
+            #endif
         #endif
-    #endif
-#endif /* wxUSE_PRINTF_POS_PARAMS/!wxUSE_PRINTF_POS_PARAMS */
+    #endif /* wxUSE_PRINTF_POS_PARAMS/!wxUSE_PRINTF_POS_PARAMS */
+#endif /* wxUSE_WXVSNPRINTF_ALWAYS */
 
 #ifndef wxCRT_VsnprintfW
     /* no (suitable) vsnprintf(), cook our own */

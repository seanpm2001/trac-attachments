Index: include/wx/msw/registry.h
===================================================================
--- include/wx/msw/registry.h	(revision 66684)
+++ include/wx/msw/registry.h	(working copy)
@@ -66,6 +66,22 @@
       Write     // read and write
   };
 
+  // different registry views supported under WOW64
+  enum RegView
+  {
+      // 32 bit registry for 32 bit applications, 64 bit registry
+      // for 64 bit ones
+      RegView_Default,
+
+      // can be used in 64 bit apps to access 32 bit registry,
+      // has no effect (i.e. treated as default) in 32 bit apps
+      RegView_32,
+
+      // can be used in 32 bit apps to access 64 bit registry,
+      // has no effect (i.e. treated as default) in 64 bit apps
+      RegView_64
+  };
+
   // information about standard (predefined) registry keys
     // number of standard keys
   static const size_t nStdKeys;
@@ -82,11 +98,13 @@
 
   // ctors
     // root key is set to HKCR (the only root key under Win16)
-  wxRegKey();
+  wxRegKey(RegView regView = RegView_Default);
     // strKey is the full name of the key (i.e. starting with HKEY_xxx...)
-  wxRegKey(const wxString& strKey);
+  wxRegKey(const wxString& strKey, RegView regView = RegView_Default);
     // strKey is the name of key under (standard key) keyParent
-  wxRegKey(StdKey keyParent, const wxString& strKey);
+  wxRegKey(StdKey keyParent,
+           const wxString& strKey,
+           RegView regView = RegView_Default);
     // strKey is the name of key under (previously created) keyParent
   wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
     // dtor closes the key
@@ -105,6 +123,8 @@
   // get infomation about the key
     // get the (full) key name. Abbreviate std root keys if bShortPrefix.
   wxString GetName(bool bShortPrefix = true) const;
+    // retrieves the registry view used by this key
+  RegView GetView() const { return m_regView; }
     // return true if the key exists
   bool  Exists() const;
     // get the info about key (any number of these pointers may be NULL)
@@ -145,7 +165,7 @@
     // deletes the subkey with all of it's subkeys/values recursively
   bool  DeleteKey(const wxString& szKey);
     // deletes the named value (may be empty string to remove the default value)
-  bool DeleteValue(const wxString& szValue);
+  bool  DeleteValue(const wxString& szValue);
 
   // access to values and subkeys
     // get value type
@@ -216,6 +236,14 @@
   // for wxRegConfig usage only: preallocate some memory for the name
   void ReserveMemoryForName(size_t bytes) { m_strKey.reserve(bytes); }
 
+  // return the WOW64 registry view flag which can be used with MSW registry
+  // functions for opening the key in the specified view
+  static long GetMSWRegView(RegView regView);
+
+  // return the access rights which can be used with MSW registry functions for
+  // opening the key in the specified mode
+  static long GetMSWAccess(AccessMode mode, RegView view);
+
 private:
   // common part of all ctors
   void Init()
@@ -235,14 +263,14 @@
   wxString FormatValue(const wxString& name) const;
 
 
-  WXHKEY      m_hKey,           // our handle
-              m_hRootKey;       // handle of the top key (i.e. StdKey)
-  wxString    m_strKey;         // key name (relative to m_hRootKey)
+  WXHKEY       m_hKey,           // our handle
+               m_hRootKey;       // handle of the top key (i.e. StdKey)
+  wxString     m_strKey;         // key name (relative to m_hRootKey)
+  RegView      m_regView;        // which view to select under WOW64
+  AccessMode   m_mode;           // valid only if key is opened
+  long         m_dwLastError;    // last error (0 if none)
 
-  AccessMode  m_mode;           // valid only if key is opened
-  long        m_dwLastError;    // last error (0 if none)
 
-
   wxDECLARE_NO_COPY_CLASS(wxRegKey);
 };
 
Index: src/msw/registry.cpp
===================================================================
--- src/msw/registry.cpp	(revision 66684)
+++ src/msw/registry.cpp	(working copy)
@@ -27,6 +27,8 @@
     #include "wx/intl.h"
     #include "wx/log.h"
     #include "wx/crt.h"
+    #include "wx/utils.h"
+    #include "wx/dynlib.h"
 #endif
 
 #include "wx/file.h"
@@ -114,7 +116,10 @@
 static inline void RemoveTrailingSeparator(wxString& str);
 
 // returns true if given registry key exists
-static bool KeyExists(WXHKEY hRootKey, const wxString& szKey);
+static bool KeyExists(
+        WXHKEY hRootKey,
+        const wxString& szKey,
+        wxRegKey::RegView regView = wxRegKey::RegView_Default);
 
 // combines value and key name
 static wxString GetFullName(const wxRegKey *pKey);
@@ -179,6 +184,50 @@
   return (StdKey)ui;
 }
 
+/* static */
+long wxRegKey::GetMSWRegView(RegView regView)
+{
+    long samRegView = 0;
+
+    switch ( regView )
+    {
+        case RegView_32:
+#ifdef __WIN64__    // the flag is only needed by 64 bit apps
+            samRegView = KEY_WOW64_32KEY;
+#endif // Win64
+            break;
+
+        case RegView_64:
+#ifndef __WIN64__   // the flag is only needed by 32 bit apps
+            // 64 bit registry can only be accessed under 64 bit platforms
+            if ( wxIsPlatform64Bit() )
+                samRegView = KEY_WOW64_64KEY;
+#endif // Win32
+            break;
+
+        default:
+            wxFAIL_MSG("Unknown registry view.");
+            // fall through
+
+        case RegView_Default:
+            // Use default registry view for the current application,
+            // i.e. 32 bits for 32 bit ones and 64 bits for 64 bit apps
+            ;
+    }
+
+    return samRegView;
+}
+
+/* static */
+long wxRegKey::GetMSWAccess(AccessMode mode, RegView regView)
+{
+    long sam = mode == Read ? KEY_READ : KEY_ALL_ACCESS;
+
+    sam |= GetMSWRegView(regView);
+
+    return sam;
+}
+
 wxRegKey::StdKey wxRegKey::GetStdKeyFromHkey(WXHKEY hkey)
 {
   for ( size_t ui = 0; ui < nStdKeys; ui++ ) {
@@ -195,14 +244,15 @@
 // ctors and dtor
 // ----------------------------------------------------------------------------
 
-wxRegKey::wxRegKey()
+wxRegKey::wxRegKey(RegView regView) : m_regView(regView)
 {
   m_hRootKey = (WXHKEY) aStdKeys[HKCR].hkey;
 
   Init();
 }
 
-wxRegKey::wxRegKey(const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(const wxString& strKey, RegView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   m_hRootKey  = (WXHKEY) aStdKeys[ExtractKeyName(m_strKey)].hkey;
 
@@ -210,7 +260,10 @@
 }
 
 // parent is a predefined (and preopened) key
-wxRegKey::wxRegKey(StdKey keyParent, const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(StdKey keyParent,
+                   const wxString& strKey,
+                   RegView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   RemoveTrailingSeparator(m_strKey);
   m_hRootKey  = (WXHKEY) aStdKeys[keyParent].hkey;
@@ -220,7 +273,7 @@
 
 // parent is a normal regkey
 wxRegKey::wxRegKey(const wxRegKey& keyParent, const wxString& strKey)
-        : m_strKey(keyParent.m_strKey)
+        : m_strKey(keyParent.m_strKey), m_regView(keyParent.GetView())
 {
   // combine our name with parent's to get the full name
   if ( !m_strKey.empty() &&
@@ -316,7 +369,7 @@
 bool wxRegKey::Exists() const
 {
   // opened key has to exist, try to open it if not done yet
-  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str());
+  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str(), m_regView);
 }
 
 // returns the full name of the key (prefix is abbreviated if bShortPrefix)
@@ -399,7 +452,7 @@
                         (HKEY) m_hRootKey,
                         m_strKey.t_str(),
                         RESERVED,
-                        mode == Read ? KEY_READ : KEY_ALL_ACCESS,
+                        GetMSWAccess(mode, m_regView),
                         &tmpKey
                     );
 
@@ -427,19 +480,17 @@
     return true;
 
   HKEY tmpKey;
-#ifdef __WXWINCE__
   DWORD disposition;
+  // Minimum supported OS for RegCreateKeyEx: Win 95, Win NT 3.1, Win CE 1.0
   m_dwLastError = RegCreateKeyEx((HKEY) m_hRootKey, m_strKey.wx_str(),
-      NULL, // reserved
-      NULL, // class string
-      0,
-      0,
-      NULL,
+      0,    // reserved and must be 0
+      NULL, // The user-defined class type of this key.
+      REG_OPTION_NON_VOLATILE, // supports other values as well; see MS docs
+      GetMSWAccess(wxRegKey::Write, m_regView),
+      NULL, // pointer to a SECURITY_ATTRIBUTES structure
       &tmpKey,
       &disposition);
-#else
-  m_dwLastError = RegCreateKey((HKEY) m_hRootKey, m_strKey.t_str(), &tmpKey);
-#endif
+
   if ( m_dwLastError != ERROR_SUCCESS ) {
     wxLogSysError(m_dwLastError, _("Can't create registry key '%s'"),
                   GetName().c_str());
@@ -710,8 +761,25 @@
   // now delete this key itself
   Close();
 
-  m_dwLastError = RegDeleteKey((HKEY) m_hRootKey, m_strKey.t_str());
   // deleting a key which doesn't exist is not considered an error
+#if wxUSE_DYNLIB_CLASS
+  wxDynamicLibrary dllAdvapi32(wxT("Advapi32"));
+  // Minimum supported OS for RegDeleteKeyEx: Vista, XP Pro x64, Win Server 2008, Win Server 2003 SP1
+  if(dllAdvapi32.HasSymbol(wxT("RegDeleteKeyEx")))
+  {
+    typedef LONG (WINAPI *RegDeleteKeyEx_t)(HKEY, LPCTSTR, REGSAM, DWORD);
+    wxDYNLIB_FUNCTION(RegDeleteKeyEx_t, RegDeleteKeyEx, dllAdvapi32);
+
+    m_dwLastError = (*pfnRegDeleteKeyEx)((HKEY) m_hRootKey, m_strKey.t_str(),
+        GetMSWRegView(m_regView),
+        0);    // This parameter is reserved and must be zero.
+  }
+  else
+#endif // wxUSE_DYNLIB_CLASS
+  {
+    m_dwLastError = RegDeleteKey((HKEY) m_hRootKey, m_strKey.wx_str());
+  }
+
   if ( m_dwLastError != ERROR_SUCCESS &&
           m_dwLastError != ERROR_FILE_NOT_FOUND ) {
     wxLogSysError(m_dwLastError, _("Can't delete key '%s'"),
@@ -803,7 +871,7 @@
   if ( !CONST_CAST Open(Read) )
     return false;
 
-  return KeyExists(m_hKey, szKey);
+  return KeyExists(m_hKey, szKey, m_regView);
 }
 
 wxRegKey::ValueType wxRegKey::GetValueType(const wxString& szValue) const
@@ -1410,7 +1478,9 @@
 // implementation of global private functions
 // ============================================================================
 
-bool KeyExists(WXHKEY hRootKey, const wxString& szKey)
+bool KeyExists(WXHKEY hRootKey,
+               const wxString& szKey,
+               wxRegKey::RegView regView)
 {
     // don't close this key itself for the case of empty szKey!
     if ( szKey.empty() )
@@ -1422,7 +1492,8 @@
             (HKEY)hRootKey,
             szKey.t_str(),
             RESERVED,
-            KEY_READ,        // we might not have enough rights for rw access
+            // we might not have enough rights for rw access
+            wxRegKey::GetMSWAccess(wxRegKey::Read, regView),
             &hkeyDummy
          ) == ERROR_SUCCESS )
     {

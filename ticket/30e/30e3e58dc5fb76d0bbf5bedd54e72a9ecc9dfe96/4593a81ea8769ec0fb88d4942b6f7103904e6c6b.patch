Index: include/wx/msw/registry.h
===================================================================
--- include/wx/msw/registry.h	(revision 64019)
+++ include/wx/msw/registry.h	(working copy)
@@ -66,6 +66,22 @@
       Write     // read and write
   };
 
+  // how to deal with WOW64
+  enum RegistryView
+  {
+      // 32 bit registry for 32 bit applications, 64 bit registry
+      // for 64 bit ones
+      Registry_Default,
+
+      // can be used in 64 bit apps to access 32 bit registry,
+      // has no effect (i.e. treated as default) in 32 bit apps
+      Registry_32,
+
+      // can be used in 32 bit apps to access 64 bit registry,
+      // has no effect (i.e. treated as default) in 64 bit apps
+      Registry_64
+  };
+
   // information about standard (predefined) registry keys
     // number of standard keys
   static const size_t nStdKeys;
@@ -80,13 +96,18 @@
   // leaves only the part after it (i.e. modifies the string passed!)
   static StdKey ExtractKeyName(wxString& str);
 
+  // gives the security attribute mask from the associated registry view
+  static long GetSAMFromRegistryView(RegistryView regView);
+
   // ctors
     // root key is set to HKCR (the only root key under Win16)
-  wxRegKey();
+  wxRegKey(RegistryView regView = Registry_Default);
     // strKey is the full name of the key (i.e. starting with HKEY_xxx...)
-  wxRegKey(const wxString& strKey);
+  wxRegKey(const wxString& strKey, RegistryView regView = Registry_Default);
     // strKey is the name of key under (standard key) keyParent
-  wxRegKey(StdKey keyParent, const wxString& strKey);
+  wxRegKey(StdKey keyParent,
+           const wxString& strKey,
+           RegistryView regView = Registry_Default);
     // strKey is the name of key under (previously created) keyParent
   wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
     // dtor closes the key
@@ -105,6 +126,8 @@
   // get infomation about the key
     // get the (full) key name. Abbreviate std root keys if bShortPrefix.
   wxString GetName(bool bShortPrefix = true) const;
+    // retrieves the registry view.
+  RegistryView GetRegistryView() const { return m_regView; }
     // return true if the key exists
   bool  Exists() const;
     // get the info about key (any number of these pointers may be NULL)
@@ -233,16 +256,16 @@
   // return the text representation (in REGEDIT4 format) of the value with the
   // given name
   wxString FormatValue(const wxString& name) const;
+  
+  WXHKEY       m_hKey,           // our handle
+               m_hRootKey;       // handle of the top key (i.e. StdKey)
+  wxString     m_strKey;         // key name (relative to m_hRootKey)
+  RegistryView m_regView;        // how to interact with WOW64
 
+  AccessMode   m_mode;           // valid only if key is opened
+  long         m_dwLastError;    // last error (0 if none)
 
-  WXHKEY      m_hKey,           // our handle
-              m_hRootKey;       // handle of the top key (i.e. StdKey)
-  wxString    m_strKey;         // key name (relative to m_hRootKey)
 
-  AccessMode  m_mode;           // valid only if key is opened
-  long        m_dwLastError;    // last error (0 if none)
-
-
   wxDECLARE_NO_COPY_CLASS(wxRegKey);
 };
 
Index: interface/wx/msw/registry.h
===================================================================
--- interface/wx/msw/registry.h	(revision 64019)
+++ interface/wx/msw/registry.h	(working copy)
@@ -71,20 +71,23 @@
 public:
     /**
         Default constructor, initializes to @c HKEY_CLASSES_ROOT.
+        The regView parameter is new since wxWidgets 2.9.1
     */
-    wxRegKey();
+    wxRegKey(RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key.
+        The regView parameter is new since wxWidgets 2.9.1
     */
-    wxRegKey(const wxString& strKey);
+    wxRegKey(const wxString& strKey, RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key using one of the
         standard keys, that is, HKCR, HKCU, HKLM, HKUSR, HKPD, HKCC or HKDD.
+        The regView parameter is new since wxWidgets 2.9.1
     */
-    wxRegKey(StdKey keyParent, const wxString& strKey);
+    wxRegKey(StdKey keyParent, const wxString& strKey, RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key under a previously created
-        parent.
+        parent. The registry view is inherited from the parent.
     */
     wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
 
@@ -133,6 +136,44 @@
     };
 
     /**
+        Used to determine how the registry will be viewed, either as
+        32-bit or 64-bit.
+        This enum is new since wxWidgets 2.9.1
+    */
+    enum RegistryView
+    {
+        /**
+            Uses 32-bit registry for 32-bit applications and
+            64-bit registry for 64-bit ones.
+        */
+        Registry_Default,
+
+        /**
+            Can be used in 64-bit apps to access the 32-bit registry,
+            has no effect (i.e. treated as default) in 32-bit apps.
+        */
+        Registry_32,
+
+        /**
+            Can be used in 32-bit apps to access the 64-bit registry,
+            has no effect (i.e. treated as default) in 64-bit apps.
+        */
+        Registry_64
+    };
+
+    /**
+        Converts a RegistryView to a security attribute mask that can be used in a call to
+        RegOpenKeyEx.
+        This method is new since wxWidgets 2.9.1
+
+        @param regView
+            The registry view to convert.
+        @return
+            Either KEY_WOW64_32KEY, KEY_WOW64_64KEY or 0.
+    */
+    static long GetSAMFromRegistryView(RegistryView regView);
+
+    /**
         Closes the key.
     */
     void Close();
@@ -225,6 +266,14 @@
     wxString GetName(bool bShortPrefix = true) const;
 
     /**
+        Retrieves the registry view.
+        This method new since wxWidgets 2.9.1
+
+        @return The registry view given at the object's construction.
+    */
+    RegistryView GetRegistryView() const { return m_regView; }
+
+    /**
         Gets the next key. Returns @true if successful.
     */
     bool GetNextKey(wxString& strKeyName, long& lIndex) const;
Index: samples/regtest/regtest.cpp
===================================================================
--- samples/regtest/regtest.cpp	(revision 64019)
+++ samples/regtest/regtest.cpp	(working copy)
@@ -102,6 +102,7 @@
     void CreateNewKey(const wxString& strName);
     void CreateNewTextValue(const wxString& strName);
     void CreateNewBinaryValue(const wxString& strName);
+    void SetRegistryView(wxRegKey::RegistryView regView);
 
     // information
     bool IsKeySelected() const;
@@ -119,6 +120,7 @@
         TreeChildren  m_aChildren;  // array of subkeys/values
         bool          m_bKey;       // key or value?
         wxRegKey     *m_pKey;       // only may be !NULL if m_bKey == true
+        wxRegKey::RegistryView m_regView; // How to view the registry.
 
         // trivial accessors
         wxTreeItemId  Id()     const { return m_id;              }
@@ -135,6 +137,7 @@
         bool DeleteChild(TreeNode *child);
         void DestroyChildren();
         const wxChar *FullName() const;
+        void SetRegistryView(wxRegKey::RegistryView regView);
 
         // get the associated key: make sure the pointer is !NULL
         wxRegKey& Key() { if ( !m_pKey ) OnExpand(); return *m_pKey; }
@@ -155,6 +158,8 @@
 
     wxString     m_nameOld;           // the initial value of item being renamed
 
+    wxRegKey::RegistryView m_regView; // Registry view to use for keys.
+
     TreeNode *GetNode(const wxTreeEvent& event)
         { return (TreeNode *)GetItemData(event.GetItem()); }
 
@@ -163,7 +168,8 @@
     TreeNode *InsertNewTreeNode(TreeNode *pParent,
         const wxString& strName,
         int idImage = RegImageList::ClosedKey,
-        const wxString *pstrValue = NULL);
+        const wxString *pstrValue = NULL,
+        wxRegKey::RegistryView regView = wxRegKey::Registry_Default);
 
     // add standard registry keys
     void AddStdKeys();
@@ -203,6 +209,8 @@
 
     void OnInfo     (wxCommandEvent& event);
 
+    void OnViewChange (wxCommandEvent& event);
+
     DECLARE_EVENT_TABLE()
 
 private:
@@ -232,6 +240,10 @@
     Menu_NewBinary,
     Menu_Delete,
     Menu_Info,
+    Menu_View,
+    Menu_ViewDefault,
+    Menu_View32,
+    Menu_View64,
 
     Ctrl_RegTree  = 200
 };
@@ -241,19 +253,22 @@
 // ----------------------------------------------------------------------------
 
 BEGIN_EVENT_TABLE(RegFrame, wxFrame)
-    EVT_MENU(Menu_Test,     RegFrame::OnTest)
-    EVT_MENU(Menu_About,    RegFrame::OnAbout)
-    EVT_MENU(Menu_Quit,     RegFrame::OnQuit)
-    EVT_MENU(Menu_GoTo,     RegFrame::OnGoTo)
-    EVT_MENU(Menu_Expand,   RegFrame::OnExpand)
-    EVT_MENU(Menu_Collapse, RegFrame::OnCollapse)
-    EVT_MENU(Menu_Toggle,   RegFrame::OnToggle)
-    EVT_MENU(Menu_Refresh,  RegFrame::OnRefresh)
-    EVT_MENU(Menu_Delete,   RegFrame::OnDelete)
-    EVT_MENU(Menu_NewKey,   RegFrame::OnNewKey)
-    EVT_MENU(Menu_NewText,  RegFrame::OnNewText)
-    EVT_MENU(Menu_NewBinary,RegFrame::OnNewBinary)
-    EVT_MENU(Menu_Info,     RegFrame::OnInfo)
+    EVT_MENU(Menu_Test,        RegFrame::OnTest)
+    EVT_MENU(Menu_About,       RegFrame::OnAbout)
+    EVT_MENU(Menu_Quit,        RegFrame::OnQuit)
+    EVT_MENU(Menu_GoTo,        RegFrame::OnGoTo)
+    EVT_MENU(Menu_Expand,      RegFrame::OnExpand)
+    EVT_MENU(Menu_Collapse,    RegFrame::OnCollapse)
+    EVT_MENU(Menu_Toggle,      RegFrame::OnToggle)
+    EVT_MENU(Menu_Refresh,     RegFrame::OnRefresh)
+    EVT_MENU(Menu_Delete,      RegFrame::OnDelete)
+    EVT_MENU(Menu_NewKey,      RegFrame::OnNewKey)
+    EVT_MENU(Menu_NewText,     RegFrame::OnNewText)
+    EVT_MENU(Menu_NewBinary,   RegFrame::OnNewBinary)
+    EVT_MENU(Menu_Info,        RegFrame::OnInfo)
+    EVT_MENU(Menu_ViewDefault, RegFrame::OnViewChange)
+    EVT_MENU(Menu_View32,      RegFrame::OnViewChange)
+    EVT_MENU(Menu_View64,      RegFrame::OnViewChange)
 END_EVENT_TABLE()
 
 #if DO_REGTEST
@@ -295,6 +310,20 @@
     pMenuNew->Append(Menu_NewText,   wxT("&Text value"),   wxT("Create a new text value"));
     pMenuNew->Append(Menu_NewBinary, wxT("&Binary value"), wxT("Create a new binary value"));
 
+    wxMenu *pMenuView = new wxMenu;
+    pMenuView->AppendRadioItem(
+        Menu_ViewDefault,
+        wxT("&Default"),
+        wxT("View the registry based on the current platform."));
+    pMenuView->AppendRadioItem(
+        Menu_View32,
+        wxT("32-bit Registry"),
+        wxT("View the registry as 32-bit."));
+    pMenuView->AppendRadioItem(
+        Menu_View64,
+        wxT("64-bit Registry"),
+        wxT("View the registry as 64-bit."));
+
     wxMenu *pMenuReg = new wxMenu;
     pMenuReg->Append(Menu_New, wxT("&New"), pMenuNew);
     pMenuReg->Append(Menu_Delete,   wxT("&Delete..."), wxT("Delete selected key/value"));
@@ -305,6 +334,7 @@
     pMenuReg->Append(Menu_Toggle,   wxT("&Toggle"),    wxT("Toggle current key"));
     pMenuReg->AppendSeparator();
     pMenuReg->Append(Menu_Refresh,  wxT("&Refresh"),   wxT("Refresh the subtree"));
+    pMenuReg->Append(Menu_View,     wxT("&View"),      pMenuView);
     pMenuReg->AppendSeparator();
     pMenuReg->Append(Menu_Info,     wxT("&Properties"),wxT("Information about current selection"));
 
@@ -496,6 +526,29 @@
 #endif
 }
 
+void RegFrame::OnViewChange (wxCommandEvent& event)
+{
+#if DO_REGTEST
+    switch (event.GetId() - Menu_ViewDefault) {
+        case 0: // Menu_ViewDefault
+            m_treeCtrl->SetRegistryView(wxRegKey::Registry_Default);
+            break;
+
+        case 1: // Menu_View32
+            m_treeCtrl->SetRegistryView(wxRegKey::Registry_32);
+            break;
+
+        case 2: // Menu_View64
+            m_treeCtrl->SetRegistryView(wxRegKey::Registry_64);
+            break;
+
+        default:
+            wxFAIL_MSG("Unexpected event source for view change.");
+            break;
+    }
+#endif
+}
+
 // ----------------------------------------------------------------------------
 // RegImageList
 // ----------------------------------------------------------------------------
@@ -517,10 +570,12 @@
 // ----------------------------------------------------------------------------
 
 // create a new tree item and insert it into the tree
-RegTreeCtrl::TreeNode *RegTreeCtrl::InsertNewTreeNode(TreeNode *pParent,
-                                                      const wxString& strName,
-                                                      int idImage,
-                                                      const wxString *pstrValue)
+RegTreeCtrl::TreeNode *RegTreeCtrl::InsertNewTreeNode(
+    TreeNode *pParent,
+    const wxString& strName,
+    int idImage,
+    const wxString *pstrValue,
+    wxRegKey::RegistryView regView)
 {
     // create new item & insert it
     TreeNode *pNewNode = new TreeNode;
@@ -529,6 +584,7 @@
     pNewNode->m_strName = strName;
     pNewNode->m_bKey    = pstrValue == NULL;
     pNewNode->m_pKey    = NULL;
+    pNewNode->m_regView = regView;
     if (pParent)
     {
         pNewNode->m_id  = AppendItem(pParent->Id(),
@@ -574,6 +630,7 @@
     // init members
     m_draggedItem = NULL;
     m_restoreStatus = false;
+    m_regView = wxRegKey::Registry_Default;
 
     // create the image list
     // ---------------------
@@ -582,7 +639,13 @@
 
     // create root keys
     // ----------------
-    m_pRoot = InsertNewTreeNode(NULL, wxT("Registry Root"), RegImageList::Root);
+    m_pRoot =
+        InsertNewTreeNode(
+            NULL,
+            wxT("Registry Root"),
+            RegImageList::Root,
+            NULL,
+            m_regView);
 
     // create popup menu
     // -----------------
@@ -600,7 +663,12 @@
 {
     for ( unsigned int ui = 0; ui < wxRegKey::nStdKeys; ui++ )
     {
-        InsertNewTreeNode(m_pRoot, wxRegKey::GetStdKeyName(ui));
+        InsertNewTreeNode(
+            m_pRoot,
+            wxRegKey::GetStdKeyName(ui),
+            RegImageList::ClosedKey,
+            NULL,
+            m_regView);
     }
 }
 
@@ -930,7 +998,7 @@
     if ( Parent()->IsRoot() )
     {
         // we're a standard key
-        m_pKey = new wxRegKey(m_strName);
+        m_pKey = new wxRegKey(m_strName, m_regView);
     }
     else
     {
@@ -956,7 +1024,12 @@
     bCont = m_pKey->GetFirstKey(str, l);
     while ( bCont )
     {
-        m_pTree->InsertNewTreeNode(this, str, RegImageList::ClosedKey);
+        m_pTree->InsertNewTreeNode(
+            this,
+            str,
+            RegImageList::ClosedKey,
+            NULL,
+            m_regView);
         bCont = m_pKey->GetNextKey(str, l);
 
         // we have at least this key...
@@ -1007,7 +1080,7 @@
             icon = RegImageList::BinaryValue;
         }
 
-        m_pTree->InsertNewTreeNode(this, str, icon, &strItem);
+        m_pTree->InsertNewTreeNode(this, str, icon, &strItem, m_regView);
         bCont = m_pKey->GetNextValue(str, l);
 
         // we have at least this value...
@@ -1123,6 +1196,16 @@
     }
 }
 
+void RegTreeCtrl::TreeNode::SetRegistryView(wxRegKey::RegistryView regView)
+{
+    m_regView = regView;
+
+    // Update children with new view.
+    size_t nCount = m_aChildren.GetCount();
+    for (size_t n = 0; n < nCount; n++)
+        m_aChildren[n]->SetRegistryView(regView);
+}
+
 // ----------------------------------------------------------------------------
 // operations on RegTreeCtrl
 // ----------------------------------------------------------------------------
@@ -1277,6 +1360,13 @@
         pCurrent->Refresh();
 }
 
+void RegTreeCtrl::SetRegistryView(wxRegKey::RegistryView regView)
+{
+    m_regView = regView;
+    m_pRoot->SetRegistryView(regView);
+    m_pRoot->Refresh();
+};
+
 void RegTreeCtrl::ShowProperties()
 {
     wxTreeItemId lCurrent = GetSelection();
Index: src/msw/registry.cpp
===================================================================
--- src/msw/registry.cpp	(revision 64019)
+++ src/msw/registry.cpp	(working copy)
@@ -114,7 +114,10 @@
 static inline void RemoveTrailingSeparator(wxString& str);
 
 // returns true if given registry key exists
-static bool KeyExists(WXHKEY hRootKey, const wxString& szKey);
+static bool KeyExists(
+        WXHKEY hRootKey,
+        const wxString& szKey,
+        wxRegKey::RegistryView regView = wxRegKey::Registry_Default);
 
 // combines value and key name
 static wxString GetFullName(const wxRegKey *pKey);
@@ -179,6 +182,37 @@
   return (StdKey)ui;
 }
 
+long wxRegKey::GetSAMFromRegistryView(RegistryView regView)
+{
+    switch (regView) {
+        case Registry_32:
+#ifdef __WIN64__
+            return KEY_WOW64_32KEY;
+#else
+            return 0;
+#endif
+
+        case Registry_64:
+#ifdef __WIN64__
+            return 0;
+#else
+            // we can only access 64 bit registry under 64 bit platforms
+            return wxIsPlatform64Bit() ? KEY_WOW64_64KEY : 0;
+#endif
+
+        default:
+            wxFAIL_MSG("Unknown registry view.");
+            // fall through
+
+        case Registry_Default:
+            // Use default registry view for the current application,
+            // i.e. 32 bits for 32 bit ones and 64 bits for 64 bit apps
+            return 0;
+    }
+
+    return 0; // Should not be reached, makes compilers happy.
+}
+
 wxRegKey::StdKey wxRegKey::GetStdKeyFromHkey(WXHKEY hkey)
 {
   for ( size_t ui = 0; ui < nStdKeys; ui++ ) {
@@ -195,14 +229,15 @@
 // ctors and dtor
 // ----------------------------------------------------------------------------
 
-wxRegKey::wxRegKey()
+wxRegKey::wxRegKey(RegistryView regView) : m_regView(regView)
 {
   m_hRootKey = (WXHKEY) aStdKeys[HKCR].hkey;
 
   Init();
 }
 
-wxRegKey::wxRegKey(const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(const wxString& strKey, RegistryView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   m_hRootKey  = (WXHKEY) aStdKeys[ExtractKeyName(m_strKey)].hkey;
 
@@ -210,7 +245,10 @@
 }
 
 // parent is a predefined (and preopened) key
-wxRegKey::wxRegKey(StdKey keyParent, const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(StdKey keyParent,
+                   const wxString& strKey,
+                   RegistryView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   RemoveTrailingSeparator(m_strKey);
   m_hRootKey  = (WXHKEY) aStdKeys[keyParent].hkey;
@@ -220,7 +258,7 @@
 
 // parent is a normal regkey
 wxRegKey::wxRegKey(const wxRegKey& keyParent, const wxString& strKey)
-        : m_strKey(keyParent.m_strKey)
+        : m_strKey(keyParent.m_strKey), m_regView(keyParent.GetRegistryView())
 {
   // combine our name with parent's to get the full name
   if ( !m_strKey.empty() &&
@@ -316,7 +354,7 @@
 bool wxRegKey::Exists() const
 {
   // opened key has to exist, try to open it if not done yet
-  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str());
+  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str(), m_regView);
 }
 
 // returns the full name of the key (prefix is abbreviated if bShortPrefix)
@@ -399,7 +437,8 @@
                         (HKEY) m_hRootKey,
                         m_strKey.t_str(),
                         RESERVED,
-                        mode == Read ? KEY_READ : KEY_ALL_ACCESS,
+                        (mode == Read ? KEY_READ : KEY_ALL_ACCESS)
+                            | GetSAMFromRegistryView(m_regView),
                         &tmpKey
                     );
 
@@ -803,7 +842,7 @@
   if ( !CONST_CAST Open(Read) )
     return false;
 
-  return KeyExists(m_hKey, szKey);
+  return KeyExists(m_hKey, szKey, m_regView);
 }
 
 wxRegKey::ValueType wxRegKey::GetValueType(const wxString& szValue) const
@@ -1410,7 +1449,9 @@
 // implementation of global private functions
 // ============================================================================
 
-bool KeyExists(WXHKEY hRootKey, const wxString& szKey)
+bool KeyExists(WXHKEY hRootKey,
+               const wxString& szKey,
+               wxRegKey::RegistryView regView)
 {
     // don't close this key itself for the case of empty szKey!
     if ( szKey.empty() )
@@ -1422,7 +1463,8 @@
             (HKEY)hRootKey,
             szKey.t_str(),
             RESERVED,
-            KEY_READ,        // we might not have enough rights for rw access
+            KEY_READ // we might not have enough rights for rw access
+                | wxRegKey::GetSAMFromRegistryView(regView),
             &hkeyDummy
          ) == ERROR_SUCCESS )
     {

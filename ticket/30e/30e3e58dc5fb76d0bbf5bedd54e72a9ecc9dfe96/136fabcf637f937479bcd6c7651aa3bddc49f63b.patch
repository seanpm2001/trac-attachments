Index: include/wx/msw/registry.h
===================================================================
--- include/wx/msw/registry.h	(revision 64019)
+++ include/wx/msw/registry.h	(working copy)
@@ -66,6 +66,22 @@
       Write     // read and write
   };
 
+  // how to deal with WOW64
+  enum RegistryView
+  {
+      // 32 bit registry for 32 bit applications, 64 bit registry
+      // for 64 bit ones
+      Registry_Default,
+
+      // can be used in 64 bit apps to access 32 bit registry,
+      // has no effect (i.e. treated as default) in 32 bit apps
+      Registry_32,
+
+      // can be used in 32 bit apps to access 64 bit registry,
+      // has no effect (i.e. treated as default) in 64 bit apps
+      Registry_64
+  };
+
   // information about standard (predefined) registry keys
     // number of standard keys
   static const size_t nStdKeys;
@@ -80,15 +96,18 @@
   // leaves only the part after it (i.e. modifies the string passed!)
   static StdKey ExtractKeyName(wxString& str);
 
+  // gives the security attribute mask from the associated registry view
+  static long GetSAMFromRegistryView(RegistryView regView);
+
   // ctors
     // root key is set to HKCR (the only root key under Win16)
-  wxRegKey();
+  wxRegKey(RegistryView regView = Registry_Default);
     // strKey is the full name of the key (i.e. starting with HKEY_xxx...)
-  wxRegKey(const wxString& strKey);
+  wxRegKey(const wxString& strKey, RegistryView regView = Registry_Default);
     // strKey is the name of key under (standard key) keyParent
-  wxRegKey(StdKey keyParent, const wxString& strKey);
+  wxRegKey(StdKey keyParent, const wxString& strKey, RegistryView regView = Registry_Default);
     // strKey is the name of key under (previously created) keyParent
-  wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
+  wxRegKey(const wxRegKey& keyParent, const wxString& strKey, RegistryView regView = Registry_Default);
     // dtor closes the key
  ~wxRegKey();
 
@@ -105,6 +124,8 @@
   // get infomation about the key
     // get the (full) key name. Abbreviate std root keys if bShortPrefix.
   wxString GetName(bool bShortPrefix = true) const;
+    // retrieves the registry view.
+  RegistryView GetRegistryView() const { return m_regView; }
     // return true if the key exists
   bool  Exists() const;
     // get the info about key (any number of these pointers may be NULL)
@@ -233,16 +254,16 @@
   // return the text representation (in REGEDIT4 format) of the value with the
   // given name
   wxString FormatValue(const wxString& name) const;
+  
+  WXHKEY       m_hKey,           // our handle
+               m_hRootKey;       // handle of the top key (i.e. StdKey)
+  wxString     m_strKey;         // key name (relative to m_hRootKey)
+  RegistryView m_regView;        // how to interact with WOW64
 
+  AccessMode   m_mode;           // valid only if key is opened
+  long         m_dwLastError;    // last error (0 if none)
 
-  WXHKEY      m_hKey,           // our handle
-              m_hRootKey;       // handle of the top key (i.e. StdKey)
-  wxString    m_strKey;         // key name (relative to m_hRootKey)
 
-  AccessMode  m_mode;           // valid only if key is opened
-  long        m_dwLastError;    // last error (0 if none)
-
-
   wxDECLARE_NO_COPY_CLASS(wxRegKey);
 };
 
Index: interface/wx/msw/registry.h
===================================================================
--- interface/wx/msw/registry.h	(revision 64019)
+++ interface/wx/msw/registry.h	(working copy)
@@ -72,21 +72,21 @@
     /**
         Default constructor, initializes to @c HKEY_CLASSES_ROOT.
     */
-    wxRegKey();
+    wxRegKey(RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key.
     */
-    wxRegKey(const wxString& strKey);
+    wxRegKey(const wxString& strKey, RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key using one of the
         standard keys, that is, HKCR, HKCU, HKLM, HKUSR, HKPD, HKCC or HKDD.
     */
-    wxRegKey(StdKey keyParent, const wxString& strKey);
+    wxRegKey(StdKey keyParent, const wxString& strKey, RegistryView regView = Registry_Default);
     /**
         The constructor to set the full name of the key under a previously created
-        parent.
+        parent. The registry view is not inherited.
     */
-    wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
+    wxRegKey(const wxRegKey& keyParent, const wxString& strKey, RegistryView regView = Registry_Default);
 
     /**
         Access modes for wxRegKey.
@@ -133,6 +133,27 @@
     };
 
     /**
+        Used to determine how the registry will be viewed, either as 32-bit or 64-bit.
+    */
+    enum RegistryView
+    {
+        Registry_Default, ///< 32 bit registry for 32 bit applications, 64 bit registry for 64 bit ones.
+        Registry_32,      ///< Can be used in 64 bit apps to access 32 bit registry, has no effect (i.e. treated as default) in 32 bit apps.
+        Registry_64       ///< Can be used in 32 bit apps to access 64 bit registry, has no effect (i.e. treated as default) in 64 bit apps.
+    };
+
+    /**
+        Converts a RegistryView to a security attribute mask that can be used in a call to
+        RegOpenKeyEx.
+
+        @param regView
+            The registry view to convert.
+        @return
+            Either KEY_WOW64_32KEY or KEY_WOW64_64KEY.
+    */
+    static long GetSAMFromRegistryView(RegistryView regView);
+
+    /**
         Closes the key.
     */
     void Close();
@@ -224,6 +245,13 @@
     */
     wxString GetName(bool bShortPrefix = true) const;
 
+	/**
+        Retrieves the registry view.
+
+        @return The registry view given at the object's construction.
+	*/
+    RegistryView GetRegistryView() const { return m_regView; }
+
     /**
         Gets the next key. Returns @true if successful.
     */
Index: src/msw/registry.cpp
===================================================================
--- src/msw/registry.cpp	(revision 64019)
+++ src/msw/registry.cpp	(working copy)
@@ -114,7 +114,7 @@
 static inline void RemoveTrailingSeparator(wxString& str);
 
 // returns true if given registry key exists
-static bool KeyExists(WXHKEY hRootKey, const wxString& szKey);
+static bool KeyExists(WXHKEY hRootKey, const wxString& szKey, wxRegKey::RegistryView regView = wxRegKey::Registry_Default);
 
 // combines value and key name
 static wxString GetFullName(const wxRegKey *pKey);
@@ -179,6 +179,24 @@
   return (StdKey)ui;
 }
 
+long wxRegKey::GetSAMFromRegistryView(RegistryView regView)
+{
+    if (regView == Registry_32)
+        return KEY_WOW64_32KEY;
+    else if (regView == Registry_64)
+        return KEY_WOW64_64KEY;
+
+    // Handle the Default_Registry case.
+#ifdef _WIN64
+    return KEY_WOW64_64KEY;
+#else
+    if (wxIsPlatform64Bit())
+        return KEY_WOW64_64KEY;
+
+    return KEY_WOW64_32KEY;
+#endif // ifdef _WIN64
+}
+
 wxRegKey::StdKey wxRegKey::GetStdKeyFromHkey(WXHKEY hkey)
 {
   for ( size_t ui = 0; ui < nStdKeys; ui++ ) {
@@ -195,14 +213,15 @@
 // ctors and dtor
 // ----------------------------------------------------------------------------
 
-wxRegKey::wxRegKey()
+wxRegKey::wxRegKey(RegistryView regView) : m_regView(regView)
 {
   m_hRootKey = (WXHKEY) aStdKeys[HKCR].hkey;
 
   Init();
 }
 
-wxRegKey::wxRegKey(const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(const wxString& strKey, RegistryView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   m_hRootKey  = (WXHKEY) aStdKeys[ExtractKeyName(m_strKey)].hkey;
 
@@ -210,7 +229,8 @@
 }
 
 // parent is a predefined (and preopened) key
-wxRegKey::wxRegKey(StdKey keyParent, const wxString& strKey) : m_strKey(strKey)
+wxRegKey::wxRegKey(StdKey keyParent, const wxString& strKey, RegistryView regView)
+        : m_strKey(strKey), m_regView(regView)
 {
   RemoveTrailingSeparator(m_strKey);
   m_hRootKey  = (WXHKEY) aStdKeys[keyParent].hkey;
@@ -219,8 +239,8 @@
 }
 
 // parent is a normal regkey
-wxRegKey::wxRegKey(const wxRegKey& keyParent, const wxString& strKey)
-        : m_strKey(keyParent.m_strKey)
+wxRegKey::wxRegKey(const wxRegKey& keyParent, const wxString& strKey, RegistryView regView)
+        : m_strKey(keyParent.m_strKey), m_regView(regView)
 {
   // combine our name with parent's to get the full name
   if ( !m_strKey.empty() &&
@@ -316,7 +336,7 @@
 bool wxRegKey::Exists() const
 {
   // opened key has to exist, try to open it if not done yet
-  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str());
+  return IsOpened() ? true : KeyExists(m_hRootKey, m_strKey.wx_str(), m_regView);
 }
 
 // returns the full name of the key (prefix is abbreviated if bShortPrefix)
@@ -399,7 +419,8 @@
                         (HKEY) m_hRootKey,
                         m_strKey.t_str(),
                         RESERVED,
-                        mode == Read ? KEY_READ : KEY_ALL_ACCESS,
+                        (mode == Read ? KEY_READ : KEY_ALL_ACCESS)
+						    | GetSAMFromRegistryView(m_regView),
                         &tmpKey
                     );
 
@@ -803,7 +824,7 @@
   if ( !CONST_CAST Open(Read) )
     return false;
 
-  return KeyExists(m_hKey, szKey);
+  return KeyExists(m_hKey, szKey, m_regView);
 }
 
 wxRegKey::ValueType wxRegKey::GetValueType(const wxString& szValue) const
@@ -1410,7 +1431,7 @@
 // implementation of global private functions
 // ============================================================================
 
-bool KeyExists(WXHKEY hRootKey, const wxString& szKey)
+bool KeyExists(WXHKEY hRootKey, const wxString& szKey, wxRegKey::RegistryView regView)
 {
     // don't close this key itself for the case of empty szKey!
     if ( szKey.empty() )
@@ -1422,7 +1443,7 @@
             (HKEY)hRootKey,
             szKey.t_str(),
             RESERVED,
-            KEY_READ,        // we might not have enough rights for rw access
+            KEY_READ | wxRegKey::GetSAMFromRegistryView(regView), // we might not have enough rights for rw access
             &hkeyDummy
          ) == ERROR_SUCCESS )
     {

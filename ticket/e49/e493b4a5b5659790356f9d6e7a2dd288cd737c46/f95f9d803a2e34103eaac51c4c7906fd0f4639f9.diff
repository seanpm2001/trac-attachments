diff --git a/samples/minimal/minimal.cpp b/samples/minimal/minimal.cpp
index f765a70..ce93ae4 100644
--- a/samples/minimal/minimal.cpp
+++ b/samples/minimal/minimal.cpp
@@ -29,6 +29,9 @@
     #include "wx/wx.h"
 #endif
 
+#include "wx/persist.h"
+#include "wx/persist/toplevel.h"
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -62,14 +65,20 @@ class MyFrame : public wxFrame
 public:
     // ctor(s)
     MyFrame(const wxString& title);
+	
+	~MyFrame();
 
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
 
+	void OnWindowClose( wxCloseEvent& event )
+	{
+		event.Skip();
+	}
+	
 private:
     // any class wishing to process wxWidgets events must use this macro
-    wxDECLARE_EVENT_TABLE();
 };
 
 // ----------------------------------------------------------------------------
@@ -95,10 +104,6 @@ enum
 // the event tables connect the wxWidgets events with the functions (event
 // handlers) which process them. It can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
-wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
-    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
-    EVT_MENU(Minimal_About, MyFrame::OnAbout)
-wxEND_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
 // the application object during program execution (it's better than using a
@@ -177,8 +182,20 @@ MyFrame::MyFrame(const wxString& title)
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+	
+	this->Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( MyFrame::OnWindowClose ) );
+	this->Connect( Minimal_About, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MyFrame::OnAbout ) );
+	this->Connect( Minimal_Quit, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MyFrame::OnQuit ) );
+	
+	wxPersistenceManager::Get().RegisterAndRestore(this);
 }
 
+MyFrame::~MyFrame()
+{
+	this->Disconnect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( MyFrame::OnWindowClose ) );
+	this->Disconnect( Minimal_About, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MyFrame::OnAbout ) );
+	this->Disconnect( Minimal_Quit, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler( MyFrame::OnQuit ) );
+}
 
 // event handlers
 

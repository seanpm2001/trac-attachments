Index: include/wx/univ/renderer.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/univ/renderer.h,v
retrieving revision 1.16
diff -r1.16 renderer.h
230a231
> 								 int lenThumb,
232a234
> 								 long style = 0,
239c241,242
<                                  int flags = 0) = 0;
---
>                                  int flags = 0,
> 								 long style = 0) = 0;
244c247
<                                  const wxSize& sizeThumb,
---
> 								 int lenThumb,
249c252,253
<                                  int flags = 0) = 0;
---
>                                  int flags = 0,
> 								 long style = 0) = 0;
408c412,414
<                                       wxOrientation orient) const = 0;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const = 0;
412c418,420
<                                       wxOrientation orient) const = 0;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const = 0;
639a648
> 								 int lenThumb,
641a651
> 								 long style = 0,
643c653
<         { m_renderer->DrawSliderShaft(dc, rect, orient, flags, rectShaft); }
---
>         { m_renderer->DrawSliderShaft(dc, rect, lenThumb, orient, flags, style, rectShaft); }
647,648c657,659
<                                  int flags = 0)
<         { m_renderer->DrawSliderThumb(dc, rect, orient, flags); }
---
>                                  int flags = 0,
> 								 long style = 0)
>         { m_renderer->DrawSliderThumb(dc, rect, orient, flags, style); }
651c662
<                                  const wxSize& sizeThumb,
---
> 								 int lenThumb,
656,658c667,670
<                                  int flags = 0)
<         { m_renderer->DrawSliderTicks(dc, rect, sizeThumb, orient,
<                                       start, end, start, flags); }
---
>                                  int flags = 0,
> 								 long style = 0)
>         { m_renderer->DrawSliderTicks(dc, rect, lenThumb, orient,
>                                       start, end, start, flags, style); }
781,782c793,796
<                                       wxOrientation orient) const
<         { return m_renderer->GetSliderShaftRect(rect, orient); }
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const
>         { return m_renderer->GetSliderShaftRect(rect, lenThumb, orient, style); }
784,785c798,801
<                                       wxOrientation orient) const
<         { return m_renderer->GetSliderThumbSize(rect, orient); }
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const
>         { return m_renderer->GetSliderThumbSize(rect, lenThumb, orient, style); }

Index: include/wx/univ/slider.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/univ/slider.h,v
retrieving revision 1.6
diff -r1.6 slider.h
98c98,100
<     bool HasLabels() const { return (GetWindowStyle() & wxSL_LABELS) != 0; }
---
> 	bool HasLabels() const 
> 		{ return ((GetWindowStyle() & wxSL_LABELS) != 0) &
> 				 ((GetWindowStyle() & (wxSL_TOP|wxSL_BOTTOM|wxSL_LEFT|wxSL_RIGHT)) != 0); }
101c103,105
<     bool HasTicks() const { return (GetWindowStyle() & wxSL_TICKS) != 0; }
---
>     bool HasTicks() const 
> 		{ return ((GetWindowStyle() & wxSL_TICKS) != 0) &
> 				 ((GetWindowStyle() & (wxSL_TOP|wxSL_BOTTOM|wxSL_LEFT|wxSL_RIGHT|wxSL_BOTH)) != 0); }

Index: src/univ/slider.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/univ/slider.cpp,v
retrieving revision 1.7
diff -r1.7 slider.cpp
144,145c144
<     if ( !wxSliderBase::Create(parent, id, pos, size, style,
<                                validator, name) )
---
>     if (!wxSliderBase::Create(parent, id, pos, size, style, validator, name)) {
146a146
> 	}
171c171
<     if ( value < m_min )
---
>     if (value < m_min) {
173c173
<     else if ( value > m_max )
---
>     }else if (value > m_max) {
175c175
<     else
---
>     }else{
176a177
> 	}
185a187,189
>     // check if the value is going to change at all
>     if (value == m_value) return FALSE;
> 
190,196d193
<     // check if the value is going to change at all
<     if ( value == m_value )
<         return FALSE;
< 
<     // refresh the old thumb position
<     RefreshThumb();
< 
199,200c196
<     // and the new one
<     RefreshThumb();
---
> 	Refresh();
269c265
<     wxCHECK_RET( lineSize > 0, _T("invalid slider line size") );
---
>     wxCHECK_RET( lineSize >= 0, _T("invalid slider line size") );
276c272
<     wxCHECK_RET( pageSize > 0, _T("invalid slider page size") );
---
>     wxCHECK_RET( pageSize >= 0, _T("invalid slider page size") );
297c293
<         wxConstCast(this, wxSlider)->m_pageSize = (m_max - m_min) / 10;
---
>         wxConstCast(this, wxSlider)->m_pageSize = m_tickFreq;
305c301
<     wxCHECK_RET( lenPixels > 0, _T("invalid slider thumb size") );
---
>     wxCHECK_RET (lenPixels >= 0, _T("invalid slider thumb size"));
319,322c315,320
<     if ( !m_thumbSize )
<     {
<         wxSize sz = GetDefaultThumbSize();
<         return IsVert() ? sz.y : sz.x;
---
> 	wxSize sz = GetDefaultThumbSize();
> 	int len = (IsVert() ? sz.x : sz.y);
>     if (m_thumbSize > len) {
> 		return m_thumbSize;
> 	}else{
> 		return len;
325d322
<     return m_thumbSize;
333a331,332
>     wxCHECK_RET (n > 0, _T("invalid slider tick frequency"));
> 
459a459
> 	long style = GetWindowStyle();
469,500c469,485
<         // split the rect
<         if ( IsVert() )
<         {
<             sizeLabels.x += SLIDER_LABEL_MARGIN;
< 
<             if ( GetWindowStyle() & wxSL_LEFT )
<             {
<                 // shrink and offset the slider to the right
<                 m_rectSlider.x += sizeLabels.x;
<                 m_rectSlider.width -= sizeLabels.x;
<             }
<             else // wxSL_RIGHT
<             {
<                 // just shrink the slider and move the label to the right
<                 m_rectSlider.width -= sizeLabels.x;
< 
<                 m_rectLabel.x += m_rectSlider.width + SLIDER_LABEL_MARGIN;
<             }
<         }
<         else // horizontal
<         {
<             // same logic as above but x/y are trasnposed
<             sizeLabels.y += SLIDER_LABEL_MARGIN;
< 
<             if ( GetWindowStyle() & wxSL_TOP )
<             {
<                 m_rectSlider.y += sizeLabels.y;
<                 m_rectSlider.height -= sizeLabels.y;
<             }
<             else // wxSL_BOTTOM
<             {
<                 m_rectSlider.height -= sizeLabels.y;
---
> 		if (style & wxSL_TOP) {
> 			// shrink and offset the slider to the bottom
> 			m_rectSlider.y += sizeLabels.y + SLIDER_LABEL_MARGIN;
> 			m_rectSlider.height -= sizeLabels.y + SLIDER_LABEL_MARGIN;
> 		}else if (style & wxSL_BOTTOM) {
> 			// shrink the slider and move the label to the bottom
> 			m_rectSlider.height -= sizeLabels.y + SLIDER_LABEL_MARGIN;
> 			m_rectLabel.y += m_rectSlider.height + SLIDER_LABEL_MARGIN;
> 		}else if (style & wxSL_LEFT) {
> 			// shrink and offset the slider to the right
> 			m_rectSlider.x += sizeLabels.x + SLIDER_LABEL_MARGIN;
> 			m_rectSlider.width -= sizeLabels.x + SLIDER_LABEL_MARGIN;
> 		}else if (style & wxSL_RIGHT) {
> 			// shrink the slider and move the label to the right
> 			m_rectSlider.width -= sizeLabels.x + SLIDER_LABEL_MARGIN;
> 			m_rectLabel.x += m_rectSlider.width + SLIDER_LABEL_MARGIN;
> 		}
502,504d486
<                 m_rectLabel.y += m_rectSlider.height + SLIDER_LABEL_MARGIN;
<             }
<         }
517,526d498
<         if ( IsVert() )
<         {
<             m_rectSlider.width -= lenTick;
<         }
<         else // horizontal
<         {
<             m_rectSlider.height -= lenTick;
<         }
< 
<         // note that we must compute m_rectSlider first as GetShaftRect() uses
532,533c504,509
<             m_rectTicks.x = m_rectSlider.x + m_rectSlider.width;
<             m_rectTicks.width = lenTick;
---
>             if (style & (wxSL_LEFT|wxSL_BOTH)) {
> 	            m_rectTicks.x = m_rectSlider.x;
> 			}else{ // wxSL_RIGHT
> 	            m_rectTicks.x = m_rectSlider.x + m_rectSlider.width - lenTick;
> 			}
> 	        m_rectTicks.width = lenTick;
537c513,517
<             m_rectTicks.y = m_rectSlider.y + m_rectSlider.height;
---
>             if (style & (wxSL_TOP|wxSL_BOTH)) {
> 	            m_rectTicks.y = m_rectSlider.y;
> 			}else{ // wxSL_BOTTOM
> 	            m_rectTicks.y = m_rectSlider.y + m_rectSlider.height - lenTick;
> 			}
546c526,527
<     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), GetOrientation());
---
> 	// Default size has no styles (arrows)
>     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), 0, GetOrientation(), 0);
551,563c532
<     wxSize sizeThumb = GetDefaultThumbSize();
< 
<     // if we have our own thumb length (set by the user), use it instead of the
<     // default value
<     if ( m_thumbSize )
<     {
<         if ( IsVert() )
<             sizeThumb.y = m_thumbSize;
<         else
<             sizeThumb.x = m_thumbSize;
<     }
< 
<     return sizeThumb;
---
>     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), m_thumbSize, GetOrientation(), GetWindowStyle());
572c541
<     return GetRenderer()->GetSliderShaftRect(m_rectSlider, GetOrientation());
---
>     return GetRenderer()->GetSliderShaftRect(m_rectSlider, m_thumbSize, GetOrientation(), GetWindowStyle());
602,603c571
<     if ( isVertical )
<     {
---
>     if (isVertical) {
623c591,595
<         *p += ((lenShaft - lenThumb)*(value - m_min))/(m_max - m_min);
---
>         if ( isVertical ){
> 	        *p += ((lenShaft - lenThumb)*(m_max - value))/(m_max - m_min);
> 		}else{ // horz
> 	        *p += ((lenShaft - lenThumb)*(value - m_min))/(m_max - m_min);
> 		}
628a601
> 		long style = GetWindowStyle();
632,641c605,613
<         if ( isVertical )
<         {
<             rectLabel.y =
<                 rectThumb.y + (rectThumb.height - m_rectLabel.height)/2;
<         }
<         else // horz
<         {
<             rectLabel.x =
<                 rectThumb.x + (rectThumb.width - m_rectLabel.width)/2;
<         }
---
> 		if (style & wxSL_TOP) {
>             rectLabel.x = rectThumb.x + (rectThumb.width - m_rectLabel.width)/2;
> 		}else if (style & wxSL_BOTTOM) {
>             rectLabel.x = rectThumb.x + (rectThumb.width - m_rectLabel.width)/2;
> 		}else if (style & wxSL_LEFT) {
>             rectLabel.y = rectThumb.y + (rectThumb.height - m_rectLabel.height)/2;
> 		}else if (style & wxSL_RIGHT) {
>             rectLabel.y = rectThumb.y + (rectThumb.height - m_rectLabel.height)/2;
> 		}
665d636
<     bool isVertical = IsVert();
667a639,642
> 	long style = GetWindowStyle();
> 
> 	wxSize sz = GetDefaultThumbSize();
> 	int len = wxMax (m_thumbSize, (IsVert() ? sz.x : sz.y));
670c645
<     wxRect rectShaft = rend->GetSliderShaftRect(m_rectSlider, orient);
---
>     wxRect rectShaft = rend->GetSliderShaftRect(m_rectSlider, len, orient, style);
673c648
<         rend->DrawSliderShaft(dc, m_rectSlider, orient, flags);
---
>         rend->DrawSliderShaft(dc, m_rectSlider, len, orient, flags, style);
680c655,656
<     if ( rectUpdate.Intersects(rectThumb) )
---
>     // then draw the ticks
>     if ( HasTicks() && rectUpdate.Intersects(m_rectTicks) )
682c658,659
<         rend->DrawSliderThumb(dc, rectThumb, orient, flags | m_thumbFlags);
---
>         rend->DrawSliderTicks(dc, m_rectSlider, len, orient,
>                               m_min, m_max, m_tickFreq, flags, style);
685,686c662,663
<     // then draw the ticks
<     if ( HasTicks() && rectUpdate.Intersects(m_rectTicks) )
---
>     // then draw the thumb
>     if ( rectUpdate.Intersects(rectThumb) )
688,689c665
<         rend->DrawSliderTicks(dc, m_rectTicks, rectThumb.GetSize(), orient,
<                               m_min, m_max, m_tickFreq);
---
>         rend->DrawSliderThumb(dc, rectThumb, orient, flags | m_thumbFlags, style);
696,706c672,681
<         int align;
<         if ( isVertical )
<         {
<             align = wxALIGN_CENTRE_VERTICAL |
<                     (GetWindowStyle() & wxSL_RIGHT ? wxALIGN_LEFT
<                                                    : wxALIGN_RIGHT);
<         }
<         else // horz
<         {
<             align = wxALIGN_CENTRE;
<         }
---
>         int align = 0;
> 		if (style & wxSL_TOP) {
>             align = wxALIGN_CENTRE_HORIZONTAL|wxALIGN_TOP;
> 		}else if (style & wxSL_BOTTOM) {
>             align = wxALIGN_CENTRE_HORIZONTAL|wxALIGN_BOTTOM;
> 		}else if (style & wxSL_LEFT) {
>             align = wxALIGN_CENTRE_VERTICAL|wxALIGN_LEFT;
> 		}else if (style & wxSL_RIGHT) {
>             align = wxALIGN_CENTRE_VERTICAL|wxALIGN_RIGHT;
> 		}
717,728d691
< void wxSlider::RefreshThumb()
< {
<     wxRect rectThumb, rectLabel;
<     CalcThumbRect(NULL, &rectThumb, &rectLabel);
< 
<     Refresh(TRUE /* erase background */, &rectThumb);
<     if ( HasLabels() )
<     {
<         Refresh(TRUE, &rectLabel);
<     }
< }
< 
751c714
<         ChangeValueBy(-GetLineSize());
---
>         ChangeValueBy(+GetLineSize());
753c716
<     else if ( action == wxACTION_SLIDER_PAGE_UP )
---
>     else if ( action == wxACTION_SLIDER_LINE_DOWN )
755c718
<         return PerformAction(wxACTION_SLIDER_PAGE_CHANGE, -1);
---
>         ChangeValueBy(-GetLineSize());
757c720
<     else if ( action == wxACTION_SLIDER_LINE_DOWN )
---
>     else if ( action == wxACTION_SLIDER_PAGE_UP )
759c722
<         ChangeValueBy(GetLineSize());
---
>         ChangeValueBy(+GetPageSize());
763c726
<         return PerformAction(wxACTION_SLIDER_PAGE_CHANGE, 1);
---
>         ChangeValueBy(-GetPageSize());
790,795d752
<     if ( !rectShaft.Inside(pt) )
<     {
<         return wxScrollThumb::Shaft_None;
<     }
< 
<     // inside the shaft, where is it relatively to the thumb?
798a756,760
> 	// check for possible shaft or thumb hit
>     if (!rectShaft.Inside(pt) && !rectThumb.Inside(pt)) {
>         return wxScrollThumb::Shaft_None;
>     }
> 
800,802c762,763
<     wxCoord x, x1, x2;
<     if ( IsVert() )
<     {
---
>     wxCoord x, x1, x2, x3, x4;
> 	if (IsVert()) {
804,808c765,769
<         x1 = rectThumb.GetTop();
<         x2 = rectThumb.GetBottom();
<     }
<     else // horz
<     {
---
>         x1 = rectThumb.GetBottom();
>         x2 = rectShaft.GetBottom();
>         x3 = rectShaft.GetTop();
>         x4 = rectThumb.GetTop();
>     }else{ // horz
810,811c771,774
<         x1 = rectThumb.GetLeft();
<         x2 = rectThumb.GetRight();
---
>         x1 = rectShaft.GetLeft();
>         x2 = rectThumb.GetLeft();
>         x3 = rectThumb.GetRight();
>         x4 = rectShaft.GetRight();
813,815c776
< 
<     if ( x < x1 )
<     {
---
>     if ((x1 <= x) & (x < x2)) {
820,821c781
<     if ( x > x2 )
<     {
---
>     if ((x3 < x) & (x <= x4)) {
883c843
<         RefreshThumb();
---
> 		Refresh();
889c849,853
<     PerformAction(wxACTION_SLIDER_THUMB_DRAG, pos);
---
>     if (IsVert()) {
> 	    PerformAction(wxACTION_SLIDER_THUMB_DRAG, m_max - pos);
> 	}else{
> 	    PerformAction(wxACTION_SLIDER_THUMB_DRAG, pos);
> 	}
894c858,862
<     PerformAction(wxACTION_SLIDER_THUMB_MOVE, pos);
---
>     if (IsVert()) {
> 	    PerformAction(wxACTION_SLIDER_THUMB_MOVE, m_max - pos);
> 	}else{
> 	    PerformAction(wxACTION_SLIDER_THUMB_MOVE, pos);
> 	}
899c867,871
<     PerformAction(wxACTION_SLIDER_THUMB_RELEASE, pos);
---
>     if (IsVert()) {
> 	    PerformAction(wxACTION_SLIDER_THUMB_RELEASE, m_max - pos);
> 	}else{
> 	    PerformAction(wxACTION_SLIDER_THUMB_RELEASE, pos);
> 	}
931c903
<                 action = wxACTION_SLIDER_START;
---
>                 action = wxACTION_SLIDER_END;
935c907
<                 action = wxACTION_SLIDER_END;
---
>                 action = wxACTION_SLIDER_START;
938c910
<             case WXK_LEFT:
---
>             case WXK_RIGHT:
943c915
<             case WXK_RIGHT:
---
>             case WXK_LEFT:

Index: src/univ/themes/gtk.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/univ/themes/gtk.cpp,v
retrieving revision 1.29
diff -r1.29 gtk.cpp
186a187
> 								 int lenThumb,
188a190
> 								 long style = 0,
193c195,196
<                                  int flags = 0);
---
>                                  int flags = 0,
> 								 long style = 0);
196c199
<                                  const wxSize& sizeThumb,
---
> 								 int lenThumb,
200,201c203,205
<                                  int step,
<                                  int flags)
---
>                                  int step = 1,
>                                  int flags = 0,
> 								 long style = 0)
308c312,314
<                                       wxOrientation orient) const;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const;
310c316,318
<                                       wxOrientation orient) const;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const;
1864c1872,1874
<                                          wxOrientation orient) const
---
> 									     int lenThumb,
>                                          wxOrientation orient,
> 									     long style) const
1870c1880
<     wxRect rectShaft = GetSliderShaftRect(rect, orient);
---
>     wxRect rectShaft = GetSliderShaftRect(rect, SLIDER_THUMB_LENGTH, orient, style);
1886c1896,1898
<                                          wxOrientation WXUNUSED(orient)) const
---
> 									     int lenThumb,
>                                          wxOrientation WXUNUSED(orient),
> 									     long style) const
1892a1905
> 								    int lenThumb,
1894a1908
> 									long style,
1921c1935,1936
<                                     int flags)
---
>                                     int flags,
> 									long style)

Index: src/univ/themes/win32.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/univ/themes/win32.cpp,v
retrieving revision 1.53
diff -r1.53 win32.cpp
255a256
> 								 int lenThumb,
257a259
> 								 long style = 0,
262c264,265
<                                  int flags = 0);
---
>                                  int flags = 0,
> 								 long style = 0);
265c268
<                                  const wxSize& sizeThumb,
---
> 								 int lenThumb,
270c273,274
<                                  int flags = 0);
---
>                                  int flags = 0,
> 								 long style = 0);
370c374
<     virtual wxCoord GetSliderTickLen() const { return 4; }
---
>     virtual wxCoord GetSliderTickLen() const { return 6; }
372c376,378
<                                       wxOrientation orient) const;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const;
374c380,382
<                                       wxOrientation orient) const;
---
> 									  int lenThumb,
>                                       wxOrientation orient,
> 									  long style = 0) const;
2575c2583,2585
<                                            wxOrientation orient) const
---
> 									       int lenThumb,
>                                            wxOrientation orient,
> 										   long style) const
2576a2587,2588
>     static const wxCoord SLIDER_THUMB_LENGTH = 21;
> 
2577a2590,2591
> 	wxCoord width  = wxMax (lenThumb, SLIDER_THUMB_LENGTH) / 2;
> 	wxCoord height = wxMax (lenThumb, SLIDER_THUMB_LENGTH);
2579,2588c2593,2598
<     wxRect rectShaft = GetSliderShaftRect(rect, orient);
<     if ( orient == wxHORIZONTAL )
<     {
<         size.y = rect.height - 6;
<         size.x = wxMin(size.y / 2, rectShaft.width);
<     }
<     else // vertical
<     {
<         size.x = rect.width - 6;
<         size.y = wxMin(size.x / 2, rectShaft.height);
---
>     if (orient == wxHORIZONTAL) {
>         size.x = width;
>         size.y = height;
>     }else{ // == wxVERTICAL
>         size.x = height;
>         size.y = width;
2595c2605,2607
<                                            wxOrientation orient) const
---
> 									       int lenThumb,
>                                            wxOrientation orient,
> 										   long style) const
2598a2611,2620
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_TOP) != 0) & !transpose |
> 				  ((style & wxSL_LEFT) != 0) & transpose |
> 				  ((style & wxSL_BOTH) != 0));
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_BOTTOM) != 0) & !transpose |
> 				  ((style & wxSL_RIGHT) != 0) & transpose |
> 				  ((style & wxSL_BOTH) != 0));
> 
2601,2618c2623
<     if ( orient == wxHORIZONTAL )
<     {
<         // make the rect of minimal width and centre it
<         rect.height = 2*BORDER_THICKNESS;
<         rect.y = rectOrig.y + (rectOrig.height - rect.height) / 2;
<         if ( rect.y < 0 )
<             rect.y = 0;
< 
<         // leave margins on the sides
<         rect.Deflate(SLIDER_MARGIN, 0);
<     }
<     else // vertical
<     {
<         // same as above but in other direction
<         rect.width = 2*BORDER_THICKNESS;
<         rect.x = rectOrig.x + (rectOrig.width - rect.width) / 2;
<         if ( rect.x < 0 )
<             rect.x = 0;
---
>     wxSize sizeThumb = GetSliderThumbSize (rect, lenThumb, orient, style);
2620c2625,2646
<         rect.Deflate(0, SLIDER_MARGIN);
---
>     if (orient == wxHORIZONTAL) {
> 		rect.x += SLIDER_MARGIN;
> 		if (left & right) {
> 			rect.y += wxMax ((rect.height - 2*BORDER_THICKNESS) / 2, sizeThumb.y/2);
> 		}else if (left) {
> 			rect.y += wxMax ((rect.height - 2*BORDER_THICKNESS - sizeThumb.y/2), sizeThumb.y/2);
> 		}else{
> 			rect.y += sizeThumb.y/2;
> 		}
> 		rect.width -= 2*SLIDER_MARGIN;
> 		rect.height = 2*BORDER_THICKNESS;
>     }else{ // == wxVERTICAL
> 		rect.y += SLIDER_MARGIN;
> 		if (left & right) {
> 			rect.x += wxMax ((rect.width - 2*BORDER_THICKNESS) / 2, sizeThumb.x/2);
> 		}else if (left) {
> 			rect.x += wxMax ((rect.width - 2*BORDER_THICKNESS - sizeThumb.x/2), sizeThumb.x/2);
> 		}else{
> 			rect.x += sizeThumb.x/2;
> 		}
> 		rect.width = 2*BORDER_THICKNESS;
> 		rect.height -= 2*SLIDER_MARGIN;
2627a2654
> 									  int lenThumb,
2629a2657
> 									  long style,
2632,2633c2660,2678
<     if ( flags & wxCONTROL_FOCUSED )
<     {
---
> 	/*	show shaft geometry
> 
> 		     shaft
> 		+-------------+
> 		|             |
> 		|     XXX     |  <-- x1
> 		|     XXX     |
> 		|     XXX     |
> 		|     XXX     |
> 		|     XXX     |  <-- x2
> 		|             |
> 		+-------------+
> 
> 		      ^ ^
> 		      | |
> 		     y1 y2
> 	*/
> 
>     if (flags & wxCONTROL_FOCUSED) {
2637c2682
<     wxRect rect = GetSliderShaftRect(rectOrig, orient);
---
>     wxRect rect = GetSliderShaftRect(rectOrig, lenThumb, orient, style);
2639,2640c2684
<     if ( rectShaft )
<         *rectShaft = rect;
---
>     if (rectShaft) *rectShaft = rect;
2648c2692,2693
<                                       int flags)
---
>                                       int flags,
> 									  long style)
2650,2651c2695
<     /*
<        we are drawing a shape of this form
---
> 	/*	show thumb geometry
2653,2667c2697,2716
<        HHHHHHB <--- y
<        H    DB
<        H    DB
<        H    DB   where H is hightlight colour
<        H    DB         D    dark grey
<        H    DB         B    black
<        H    DB
<        H    DB <--- y3
<         H  DB
<          HDB
<           B    <--- y2
< 
<        ^  ^  ^
<        |  |  |
<        x x3  x2
---
>              H       <--- y1
>            H H B
>          H     H B
>        H         H B <--- y3
>        H         D B
>        H         D B
>        H         D B
>        H         D B   where H is hightlight colour
>        H         D B         D    dark grey
>        H         D B         B    black
>        H         D B
>        H         D B
>        H         D B <--- y4
>          H     D B
>            H D B
>              B       <--- y2
> 
>        ^     ^     ^
>        |     |     |
>        x1    x3    x2
2675,2691c2724,2732
<     bool transpose = orient == wxVERTICAL;
< 
<     wxCoord x, y, x2, y2;
<     if ( transpose )
<     {
<         x = rect.y;
<         y = rect.x;
<         x2 = rect.GetBottom();
<         y2 = rect.GetRight();
<     }
<     else
<     {
<         x = rect.x;
<         y = rect.y;
<         x2 = rect.GetRight();
<         y2 = rect.GetBottom();
<     }
---
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_TOP) != 0) & !transpose |
> 				  ((style & wxSL_LEFT) != 0) & transpose) &
> 				 ((style & wxSL_BOTH) == 0);
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_BOTTOM) != 0) & !transpose |
> 				  ((style & wxSL_RIGHT) != 0) & transpose) &
> 				 ((style & wxSL_BOTH) == 0);
2693d2733
<     // the size of the pointed part of the thumb
2694a2735
> 	wxCoord c = ((transpose ? rect.height : rect.width) - 2*sizeArrow);
2696,2702c2737,2744
<     wxCoord x3 = x + sizeArrow,
<             y3 = y2 - sizeArrow;
< 
<     dc.SetPen(m_penHighlight);
<     DrawLine(dc, x, y, x2, y, transpose);
<     DrawLine(dc, x, y + 1, x, y2 - sizeArrow, transpose);
<     DrawLine(dc, x, y3, x3, y2, transpose);
---
>     wxCoord x1, x2, x3, y1, y2, y3, y4;
>     x1 = (transpose ? rect.y : rect.x);
>     x2 = (transpose ? rect.GetBottom() : rect.GetRight());
>     x3 = (x1-1+c) + sizeArrow;
>     y1 = (transpose ? rect.x : rect.y);
>     y2 = (transpose ? rect.GetRight() : rect.GetBottom());
> 	y3 = (left  ? (y1-1+c) + sizeArrow : y1);
> 	y4 = (right ? (y2+1-c) - sizeArrow : y2);
2705,2706c2747,2755
<     DrawLine(dc, x3, y2, x2, y3, transpose);
<     DrawLine(dc, x2, y3, x2, y - 1, transpose);
---
> 	if (left) {
> 	    DrawLine(dc, x3+1-c, y1, x2, y3, transpose);
> 	}
>     DrawLine(dc, x2, y3, x2, y4, transpose);
> 	if (right) {
> 	    DrawLine(dc, x3+1-c, y2, x2, y4, transpose);
> 	}else{
> 	    DrawLine(dc, x1, y2, x2, y2, transpose);
> 	}
2709,2710c2758,2763
<     DrawLine(dc, x3, y2 - 1, x2 - 1, y3, transpose);
<     DrawLine(dc, x2 - 1, y3, x2 - 1, y, transpose);
---
>     DrawLine(dc, x2-1, y3+1, x2-1, y4-1, transpose);
> 	if (right) {
> 	    DrawLine(dc, x3+1-c, y2-1, x2-1, y4, transpose);
> 	}else{
> 	    DrawLine(dc, x1+1, y2-1, x2-1, y2-1, transpose);
> 	}
2712,2713c2765,2777
<     if ( flags & wxCONTROL_PRESSED )
<     {
---
>     dc.SetPen(m_penHighlight);
> 	if (left) {
> 	    DrawLine(dc, x1, y3, x3, y1, transpose);
> 	    DrawLine(dc, x3+1-c, y1+1, x2-1, y3, transpose);
> 	}else{
> 	    DrawLine(dc, x1, y1, x2, y1, transpose);
> 	}
>     DrawLine(dc, x1, y3, x1, y4, transpose);
> 	if (right) {
> 	    DrawLine(dc, x1, y4, x3+c, y2+c, transpose);
> 	}
> 
>     if (flags & wxCONTROL_PRESSED) {
2716,2719c2780,2786
<         if ( transpose )
<             rectInt.SetRight(y3);
<         else
<             rectInt.SetBottom(y3);
---
>         if ( transpose ) {
>             rectInt.SetLeft(y3);
>             rectInt.SetRight(y4);
>         }else{
>             rectInt.SetTop(y3);
>             rectInt.SetBottom(y4);
> 		}
2761c2828
<                                       const wxSize& sizeThumb,
---
> 									  int lenThumb,
2766c2833,2834
<                                       int flags)
---
>                                       int flags,
> 								      long style)
2768,2780c2836
<     if ( end == start )
<     {
<         // empty slider?
<         return;
<     }
< 
<     // the variable names correspond to horizontal case, but they can be used
<     // for both orientations
<     wxCoord x1, x2, y1, y2, len, widthThumb;
<     if ( orient == wxHORIZONTAL )
<     {
<         x1 = rect.GetLeft();
<         x2 = rect.GetRight();
---
> 	/*	show ticks geometry
2782,2811c2838,2880
<         // draw from bottom to top to leave one pixel space between the ticks
<         // and the slider as Windows do
<         y1 = rect.GetBottom();
<         y2 = rect.GetTop();
< 
<         len = rect.width;
< 
<         widthThumb = sizeThumb.x;
<     }
<     else // vertical
<     {
<         x1 = rect.GetTop();
<         x2 = rect.GetBottom();
< 
<         y1 = rect.GetRight();
<         y2 = rect.GetLeft();
< 
<         len = rect.height;
< 
<         widthThumb = sizeThumb.y;
<     }
< 
<     // the first tick should be positioned in such way that a thumb drawn in
<     // the first position points down directly to it
<     x1 += widthThumb / 2;
<     x2 -= widthThumb / 2;
< 
<     // this also means that we have slightly less space for the ticks in
<     // between the first and the last
<     len -= widthThumb;
---
> 		left        right
> 		ticks shaft ticks
> 		----   XX   ----  <-- x1
> 		----   XX   ----
> 		----   XX   ----
> 		----   XX   ----  <-- x2
> 
> 		^  ^        ^  ^
> 		|  |        |  |
> 		y3 y1       y2 y4
> 	*/
> 
> 	// empty slider?
>     if (end == start) return;
> 
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_TOP) != 0) & !transpose |
> 				  ((style & wxSL_LEFT) != 0) & transpose |
> 				  ((style & wxSL_BOTH) != 0));
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
> 				 (((style & wxSL_BOTTOM) != 0) & !transpose |
> 				  ((style & wxSL_RIGHT) != 0) & transpose |
> 				  ((style & wxSL_BOTH) != 0));
> 
> 	// default thumb size
>     wxSize sizeThumb = GetSliderThumbSize (rect, 0, orient, 0);
> 	wxCoord defaultLen = (transpose ? sizeThumb.x : sizeThumb.y);
> 
> 	// normal thumb size
>     sizeThumb = GetSliderThumbSize (rect, lenThumb, orient, style);
> 	wxCoord widthThumb  = (transpose ? sizeThumb.y : sizeThumb.x);
> 
>     wxRect rectShaft = GetSliderShaftRect (rect, lenThumb, orient, style);
> 
> 	wxCoord x1, x2, y1, y2, y3, y4 , len;
>     x1 = (transpose ? rectShaft.y : rectShaft.x) + widthThumb/2;
>     x2 = (transpose ? rectShaft.GetBottom() : rectShaft.GetRight()) - widthThumb/2;
>     y1 = (transpose ? rectShaft.x : rectShaft.y) - defaultLen/2;
>     y2 = (transpose ? rectShaft.GetRight() : rectShaft.GetBottom()) + defaultLen/2;
> 	y3 = (transpose ? rect.x : rect.y);
> 	y4 = (transpose ? rect.GetRight() : rect.GetBottom());
> 	len = x2 - x1;
2816,2817c2885
<     for ( int n = 0; n < range; n += step )
<     {
---
>     for ( int n = 0; n < range; n += step ) {
2820c2888,2893
<         DrawLine(dc, x, y1, x, y2, orient == wxVERTICAL);
---
> 		if (left & (y1 > y3)) {
> 			DrawLine(dc, x, y1, x, y3, orient == wxVERTICAL);
> 		}
> 		if (right & (y4 > y2)) {
> 			DrawLine(dc, x, y2, x, y4, orient == wxVERTICAL);
> 		}
2822d2894
< 
2824c2896,2901
<     DrawLine(dc, x2, y1, x2, y2, orient == wxVERTICAL);
---
> 	if (left & (y1 > y3)) {
> 		DrawLine(dc, x2, y1, x2, y3, orient == wxVERTICAL);
> 	}
> 	if (right & (y4 > y2)) {
> 		DrawLine(dc, x2, y2, x2, y4, orient == wxVERTICAL);
> 	}


 	  	 

Index: include/wx/univ/renderer.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/univ/renderer.h,v
retrieving revision 1.17
diff -r1.17 renderer.h
7c7
< // RCS-ID:      $Id: renderer.h,v 1.17 2002/12/06 21:02:45 VZ Exp $
---
> // RCS-ID:      $Id: renderer.h,v 1.16 2002/04/25 20:19:15 MBN Exp $
230a231
>                                  int lenThumb,
232a234
>                                  long style = 0,
239c241,242
<                                  int flags = 0) = 0;
---
>                                  int flags = 0,
>                                  long style = 0) = 0;
244c247
<                                  const wxSize& sizeThumb,
---
>                                  int lenThumb,
249c252,253
<                                  int flags = 0) = 0;
---
>                                  int flags = 0,
>                                  long style = 0) = 0;
408c412,414
<                                       wxOrientation orient) const = 0;
---
>                                       int lenThumb,
>                                       wxOrientation orient,
>                                       long style = 0) const = 0;
411a418
>                                       int lenThumb,
639a647
>                                  int lenThumb,
641a650
>                                  long style = 0,
643c652
<         { m_renderer->DrawSliderShaft(dc, rect, orient, flags, rectShaft); }
---
>         { m_renderer->DrawSliderShaft(dc, rect, lenThumb, orient, flags, style, rectShaft); }
647,648c656,658
<                                  int flags = 0)
<         { m_renderer->DrawSliderThumb(dc, rect, orient, flags); }
---
>                                  int flags = 0,
>                                  long style = 0)
>         { m_renderer->DrawSliderThumb(dc, rect, orient, flags, style); }
651c661
<                                  const wxSize& sizeThumb,
---
>                                  int lenThumb,
656,658c666,669
<                                  int flags = 0)
<         { m_renderer->DrawSliderTicks(dc, rect, sizeThumb, orient,
<                                       start, end, step, flags); }
---
>                                  int flags = 0,
>                                  long style = 0)
>         { m_renderer->DrawSliderTicks(dc, rect, lenThumb, orient,
>                                       start, end, start, flags, style); }
781,782c792,795
<                                       wxOrientation orient) const
<         { return m_renderer->GetSliderShaftRect(rect, orient); }
---
>                                       int lenThumb,
>                                       wxOrientation orient,
>                                       long style = 0) const
>         { return m_renderer->GetSliderShaftRect(rect, lenThumb, orient, style); }
783a797
>                                       int lenThumb,
785c799
<         { return m_renderer->GetSliderThumbSize(rect, orient); }
---
>         { return m_renderer->GetSliderThumbSize(rect, lenThumb, orient); }
Index: include/wx/univ/slider.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/univ/slider.h,v
retrieving revision 1.6
diff -r1.6 slider.h
98c98,100
<     bool HasLabels() const { return (GetWindowStyle() & wxSL_LABELS) != 0; }
---
>     bool HasLabels() const 
>         { return ((GetWindowStyle() & wxSL_LABELS) != 0) &
>                  ((GetWindowStyle() & (wxSL_TOP|wxSL_BOTTOM|wxSL_LEFT|wxSL_RIGHT)) != 0); }
101c103,105
<     bool HasTicks() const { return (GetWindowStyle() & wxSL_TICKS) != 0; }
---
>     bool HasTicks() const 
>         { return ((GetWindowStyle() & wxSL_TICKS) != 0) &
>                  ((GetWindowStyle() & (wxSL_TOP|wxSL_BOTTOM|wxSL_LEFT|wxSL_RIGHT|wxSL_BOTH)) != 0); }
Index: src/univ/slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/univ/slider.cpp,v
retrieving revision 1.8
diff -r1.8 slider.cpp
185a186,188
>     // check if the value is going to change at all
>     if (value == m_value) return FALSE;
> 
190,196d192
<     // check if the value is going to change at all
<     if ( value == m_value )
<         return FALSE;
< 
<     // refresh the old thumb position
<     RefreshThumb();
< 
199,200c195
<     // and the new one
<     RefreshThumb();
---
>     Refresh();
269c264
<     wxCHECK_RET( lineSize > 0, _T("invalid slider line size") );
---
>     wxCHECK_RET( lineSize >= 0, _T("invalid slider line size") );
276c271
<     wxCHECK_RET( pageSize > 0, _T("invalid slider page size") );
---
>     wxCHECK_RET( pageSize >= 0, _T("invalid slider page size") );
296,297c291,292
<         // the default page increment is 1/10 of the range
<         wxConstCast(this, wxSlider)->m_pageSize = (m_max - m_min) / 10;
---
>         // the default page increment is m_tickFreq
>         wxConstCast(this, wxSlider)->m_pageSize = m_tickFreq;
305c300
<     wxCHECK_RET( lenPixels > 0, _T("invalid slider thumb size") );
---
>     wxCHECK_RET( lenPixels >= 0, _T("invalid slider thumb size") );
319c314,316
<     if ( !m_thumbSize )
---
>     wxSize sz = GetDefaultThumbSize();
>     int len = (IsVert() ? sz.x : sz.y);
>     if (m_thumbSize > len) 
321,322c318,322
<         wxSize sz = GetDefaultThumbSize();
<         return IsVert() ? sz.y : sz.x;
---
>         return m_thumbSize;
>     }
>     else
>     {
>         return len;
325d324
<     return m_thumbSize;
333a333,334
>     wxCHECK_RET (n > 0, _T("invalid slider tick frequency"));
> 
367c368,370
<     static const wxCoord SLIDER_WIDTH = 100;
---
>     static const wxCoord SLIDER_WIDTH = 40;
> 
>     long style = GetWindowStyle();
388a392,395
>         if (style & wxSL_BOTH) 
>         {
>             lenTick = 2 * lenTick;
>         }
401c408,409
<         if ( IsVert() )
---
>         if (style & (wxSL_LEFT|wxSL_RIGHT))
>         {
403c411,413
<         else
---
>         }
>         else if (style & (wxSL_TOP|wxSL_BOTTOM))
>         {
404a415
>         }
459a471
>     long style = GetWindowStyle();
460a473
>     // initialize to the full client rect
461a475,478
>     m_rectSlider = rectTotal;
>     wxSize sizeThumb = GetThumbSize();
> 
>     // Labels reduce the size of the slider rect
464c481
<         wxSize sizeLabels = CalcLabelSize();
---
>        wxSize sizeLabels = CalcLabelSize();
466d482
<         m_rectSlider = rectTotal;
469,470c485
<         // split the rect
<         if ( IsVert() )
---
>         if (style & wxSL_TOP) 
472,486c487,489
<             sizeLabels.x += SLIDER_LABEL_MARGIN;
< 
<             if ( GetWindowStyle() & wxSL_LEFT )
<             {
<                 // shrink and offset the slider to the right
<                 m_rectSlider.x += sizeLabels.x;
<                 m_rectSlider.width -= sizeLabels.x;
<             }
<             else // wxSL_RIGHT
<             {
<                 // just shrink the slider and move the label to the right
<                 m_rectSlider.width -= sizeLabels.x;
< 
<                 m_rectLabel.x += m_rectSlider.width + SLIDER_LABEL_MARGIN;
<             }
---
>             // shrink and offset the slider to the bottom
>             m_rectSlider.y += sizeLabels.y + SLIDER_LABEL_MARGIN;
>             m_rectSlider.height -= sizeLabels.y + SLIDER_LABEL_MARGIN;
488c491
<         else // horizontal
---
>         else if (style & wxSL_BOTTOM) 
490,503c493,507
<             // same logic as above but x/y are trasnposed
<             sizeLabels.y += SLIDER_LABEL_MARGIN;
< 
<             if ( GetWindowStyle() & wxSL_TOP )
<             {
<                 m_rectSlider.y += sizeLabels.y;
<                 m_rectSlider.height -= sizeLabels.y;
<             }
<             else // wxSL_BOTTOM
<             {
<                 m_rectSlider.height -= sizeLabels.y;
< 
<                 m_rectLabel.y += m_rectSlider.height + SLIDER_LABEL_MARGIN;
<             }
---
>             // shrink the slider and move the label to the bottom
>             m_rectSlider.height -= sizeLabels.y + SLIDER_LABEL_MARGIN;
>             m_rectLabel.y += m_rectSlider.height + SLIDER_LABEL_MARGIN;
>         }
>         else if (style & wxSL_LEFT) 
>         {
>             // shrink and offset the slider to the right
>             m_rectSlider.x += sizeLabels.x + SLIDER_LABEL_MARGIN;
>             m_rectSlider.width -= sizeLabels.x + SLIDER_LABEL_MARGIN;
>         }
>         else if (style & wxSL_RIGHT) 
>         {
>             // shrink the slider and move the label to the right
>             m_rectSlider.width -= sizeLabels.x + SLIDER_LABEL_MARGIN;
>             m_rectLabel.x += m_rectSlider.width + SLIDER_LABEL_MARGIN;
505,509d508
<     }
<     else // no labels
<     {
<         // the slider takes the whole client rect
<         m_rectSlider = rectTotal;
512c511
<     // now adjust for ticks too
---
>     // calculate ticks too
517,526d515
<         if ( IsVert() )
<         {
<             m_rectSlider.width -= lenTick;
<         }
<         else // horizontal
<         {
<             m_rectSlider.height -= lenTick;
<         }
< 
<         // note that we must compute m_rectSlider first as GetShaftRect() uses
532c521,528
<             m_rectTicks.x = m_rectSlider.x + m_rectSlider.width;
---
>             if (style & (wxSL_LEFT|wxSL_BOTH)) 
>             {
>                 m_rectTicks.x = m_rectSlider.x;
>             }
>             else
>             { // wxSL_RIGHT
>                 m_rectTicks.x = m_rectSlider.x + m_rectSlider.width - lenTick;
>             }
537c533,540
<             m_rectTicks.y = m_rectSlider.y + m_rectSlider.height;
---
>             if (style & (wxSL_TOP|wxSL_BOTH)) 
>             {
>                 m_rectTicks.y = m_rectSlider.y;
>             }
>             else
>             { // wxSL_BOTTOM
>                 m_rectTicks.y = m_rectSlider.y + m_rectSlider.height - lenTick;
>             }
539a543
>     }
540a545,554
>     // slider is never smaller than thumb size unless rectTotal
>     if ( IsVert() )
>     {
>         wxCoord width = wxMin ( rectTotal.width, sizeThumb.x );
>         m_rectSlider.width = wxMax ( m_rectSlider.width, width );
>     }
>     else
>     {
>         wxCoord height = wxMin ( rectTotal.height, sizeThumb.y );
>         m_rectSlider.height = wxMax ( m_rectSlider.height, height );
546c560,561
<     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), GetOrientation());
---
>     // Default size has no styles (arrows)
>     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), 0, GetOrientation());
551,563c566
<     wxSize sizeThumb = GetDefaultThumbSize();
< 
<     // if we have our own thumb length (set by the user), use it instead of the
<     // default value
<     if ( m_thumbSize )
<     {
<         if ( IsVert() )
<             sizeThumb.y = m_thumbSize;
<         else
<             sizeThumb.x = m_thumbSize;
<     }
< 
<     return sizeThumb;
---
>     return GetRenderer()->GetSliderThumbSize(GetSliderRect(), m_thumbSize, GetOrientation());
572c575
<     return GetRenderer()->GetSliderShaftRect(m_rectSlider, GetOrientation());
---
>     return GetRenderer()->GetSliderShaftRect(m_rectSlider, m_thumbSize, GetOrientation(), GetWindowStyle());
623c626,633
<         *p += ((lenShaft - lenThumb)*(value - m_min))/(m_max - m_min);
---
>         if ( isVertical )
>         {
>             *p += ((lenShaft - lenThumb)*(m_max - value))/(m_max - m_min);
>         }
>         else
>         { // horz
>             *p += ((lenShaft - lenThumb)*(value - m_min))/(m_max - m_min);
>         }
628a639
>         long style = GetWindowStyle();
632c643
<         if ( isVertical )
---
>         if (style & (wxSL_TOP|wxSL_BOTTOM))
634,635c645
<             rectLabel.y =
<                 rectThumb.y + (rectThumb.height - m_rectLabel.height)/2;
---
>             rectLabel.x = rectThumb.x + (rectThumb.width - m_rectLabel.width)/2;
637c647
<         else // horz
---
>         else if (style & (wxSL_LEFT|wxSL_RIGHT))
639,640c649
<             rectLabel.x =
<                 rectThumb.x + (rectThumb.width - m_rectLabel.width)/2;
---
>             rectLabel.y = rectThumb.y + (rectThumb.height - m_rectLabel.height)/2;
646a656
> 
665d674
<     bool isVertical = IsVert();
667a677,680
>     long style = GetWindowStyle();
> 
>     wxSize sz = GetThumbSize();
>     int len = IsVert() ? sz.x : sz.y;
670c683
<     wxRect rectShaft = rend->GetSliderShaftRect(m_rectSlider, orient);
---
>     wxRect rectShaft = rend->GetSliderShaftRect(m_rectSlider, len, orient, style);
673c686
<         rend->DrawSliderShaft(dc, m_rectSlider, orient, flags);
---
>         rend->DrawSliderShaft(dc, m_rectSlider, len, orient, flags, style);
680c693,694
<     if ( rectUpdate.Intersects(rectThumb) )
---
>     // then draw the ticks
>     if ( HasTicks() && rectUpdate.Intersects(m_rectTicks) )
682c696,697
<         rend->DrawSliderThumb(dc, rectThumb, orient, flags | m_thumbFlags);
---
>         rend->DrawSliderTicks(dc, m_rectSlider, len, orient,
>                               m_min, m_max, m_tickFreq, flags, style);
685,686c700,701
<     // then draw the ticks
<     if ( HasTicks() && rectUpdate.Intersects(m_rectTicks) )
---
>     // then draw the thumb
>     if ( rectUpdate.Intersects(rectThumb) )
688,689c703
<         rend->DrawSliderTicks(dc, m_rectTicks, rectThumb.GetSize(), orient,
<                               m_min, m_max, m_tickFreq);
---
>         rend->DrawSliderThumb(dc, rectThumb, orient, flags | m_thumbFlags, style);
696,697c710,711
<         int align;
<         if ( isVertical )
---
>         int align = 0;
>         if (style & wxSL_TOP) 
699,701c713
<             align = wxALIGN_CENTRE_VERTICAL |
<                     (GetWindowStyle() & wxSL_RIGHT ? wxALIGN_LEFT
<                                                    : wxALIGN_RIGHT);
---
>             align = wxALIGN_CENTRE_HORIZONTAL|wxALIGN_TOP;
703c715
<         else // horz
---
>         else if (style & wxSL_BOTTOM) 
705c717,725
<             align = wxALIGN_CENTRE;
---
>             align = wxALIGN_CENTRE_HORIZONTAL|wxALIGN_BOTTOM;
>         }
>         else if (style & wxSL_LEFT) 
>         {
>             align = wxALIGN_CENTRE_VERTICAL|wxALIGN_LEFT;
>         }
>         else if (style & wxSL_RIGHT) 
>         {
>             align = wxALIGN_CENTRE_VERTICAL|wxALIGN_RIGHT;
717,728d736
< void wxSlider::RefreshThumb()
< {
<     wxRect rectThumb, rectLabel;
<     CalcThumbRect(NULL, &rectThumb, &rectLabel);
< 
<     Refresh(TRUE /* erase background */, &rectThumb);
<     if ( HasLabels() )
<     {
<         Refresh(TRUE, &rectLabel);
<     }
< }
< 
737c745
<     if ( action == wxACTION_SLIDER_START )
---
>      if ( action == wxACTION_SLIDER_START )
751c759
<         ChangeValueBy(-GetLineSize());
---
>         ChangeValueBy(+GetLineSize());
753c761
<     else if ( action == wxACTION_SLIDER_PAGE_UP )
---
>     else if ( action == wxACTION_SLIDER_LINE_DOWN )
755c763
<         return PerformAction(wxACTION_SLIDER_PAGE_CHANGE, -1);
---
>         ChangeValueBy(-GetLineSize());
757c765
<     else if ( action == wxACTION_SLIDER_LINE_DOWN )
---
>     else if ( action == wxACTION_SLIDER_PAGE_UP )
759c767
<         ChangeValueBy(GetLineSize());
---
>         ChangeValueBy(+GetPageSize());
763c771
<         return PerformAction(wxACTION_SLIDER_PAGE_CHANGE, 1);
---
>         ChangeValueBy(-GetPageSize());
793,794c801,802
< 	// check for possible shaft or thumb hit
<     if (!rectShaft.Inside(pt) && !rectThumb.Inside(pt))
---
>     // check for possible shaft or thumb hit
>     if (!rectShaft.Inside(pt) && !rectThumb.Inside(pt)) 
799d806
< 
801,802c808,809
<     wxCoord x, x1, x2;
<     if ( IsVert() )
---
>     wxCoord x, x1, x2, x3, x4;
>     if (IsVert()) 
805,806c812,815
<         x1 = rectThumb.GetTop();
<         x2 = rectThumb.GetBottom();
---
>         x1 = rectThumb.GetBottom();
>         x2 = rectShaft.GetBottom();
>         x3 = rectShaft.GetTop();
>         x4 = rectThumb.GetTop();
808,809c817,818
<     else // horz
<     {
---
>     else
>     { // horz
811,812c820,823
<         x1 = rectThumb.GetLeft();
<         x2 = rectThumb.GetRight();
---
>         x1 = rectShaft.GetLeft();
>         x2 = rectThumb.GetLeft();
>         x3 = rectThumb.GetRight();
>         x4 = rectShaft.GetRight();
814,815c825
< 
<     if ( x < x1 )
---
>     if ((x1 <= x) & (x < x2)) 
821,822c831
<     if ( x > x2 )
<     {
---
>     if ((x3 < x) & (x <= x4)) {
884c893
<         RefreshThumb();
---
>         Refresh();
890c899,906
<     PerformAction(wxACTION_SLIDER_THUMB_DRAG, pos);
---
>     if (IsVert()) 
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_DRAG, m_max - pos);
>     }
>     else
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_DRAG, pos);
>     }
895c911,918
<     PerformAction(wxACTION_SLIDER_THUMB_MOVE, pos);
---
>     if (IsVert()) 
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_MOVE, m_max - pos);
>     }
>     else
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_MOVE, pos);
>     }
900c923,930
<     PerformAction(wxACTION_SLIDER_THUMB_RELEASE, pos);
---
>     if (IsVert()) 
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_RELEASE, m_max - pos);
>     }
>     else
>     {
>         PerformAction(wxACTION_SLIDER_THUMB_RELEASE, pos);
>     }
924c954
<     if ( pressed )
---
>    if ( pressed )
932c962
<                 action = wxACTION_SLIDER_START;
---
>                 action = wxACTION_SLIDER_END;
936c966
<                 action = wxACTION_SLIDER_END;
---
>                 action = wxACTION_SLIDER_START;
939c969
<             case WXK_LEFT:
---
>             case WXK_RIGHT:
944c974
<             case WXK_RIGHT:
---
>             case WXK_LEFT:
Index: src/univ/themes/gtk.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/univ/themes/gtk.cpp,v
retrieving revision 1.31
diff -r1.31 gtk.cpp
186a187
>                                  int lenThumb,
188a190
>                                  long style = 0,
193c195,196
<                                  int flags = 0);
---
>                                  int flags = 0,
>                                  long style = 0);
196c199
<                                  const wxSize& sizeThumb,
---
>                                  int lenThumb,
200,201c203,205
<                                  int step,
<                                  int flags)
---
>                                  int step = 1,
>                                  int flags = 0,
>                                  long style = 0)
308c312,314
<                                       wxOrientation orient) const;
---
>                                       int lenThumb,
>                                       wxOrientation orient,
>                                       long style = 0) const;
309a316
>                                       int lenThumb,
1867a1875
>                                          int lenThumb,
1874c1882
<     wxRect rectShaft = GetSliderShaftRect(rect, orient);
---
>     wxRect rectShaft = GetSliderShaftRect(rect, lenThumb, orient);
1890c1898,1900
<                                          wxOrientation WXUNUSED(orient)) const
---
>                                          int lenThumb,
>                                          wxOrientation WXUNUSED(orient),
>                                          long style) const
1896a1907
>                                     int lenThumb,
1898a1910
>                                     long style,
1925c1937,1938
<                                     int flags)
---
>                                     int flags,
>                                     long style)
Index: src/univ/themes/win32.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/univ/themes/win32.cpp,v
retrieving revision 1.55
diff -r1.55 win32.cpp
82a83,86
> static const wxCoord SLIDER_MARGIN = 6; // margin around slider
> static const wxCoord SLIDER_THUMB_LENGTH = 18;
> static const wxCoord SLIDER_TICK_LENGTH = 6;
> 
255a260
>                                  int lenThumb,
257a263
>                                  long style = 0,
262c268,269
<                                  int flags = 0);
---
>                                  int flags = 0,
>                                  long style = 0);
265c272
<                                  const wxSize& sizeThumb,
---
>                                  int lenThumb,
270c277,278
<                                  int flags = 0);
---
>                                  int flags = 0,
>                                  long style = 0);
369,370c377,378
<     virtual wxCoord GetSliderDim() const { return 20; }
<     virtual wxCoord GetSliderTickLen() const { return 4; }
---
>     virtual wxCoord GetSliderDim() const { return SLIDER_THUMB_LENGTH + 2*BORDER_THICKNESS; }
>     virtual wxCoord GetSliderTickLen() const { return SLIDER_TICK_LENGTH; }
372c380,382
<                                       wxOrientation orient) const;
---
>                                       int lenThumb,
>                                       wxOrientation orient,
>                                       long style = 0) const;
373a384
>                                       int lenThumb,
2573a2585
>                                            int lenThumb,
2576a2589,2590
>     wxCoord width  = wxMax (lenThumb, SLIDER_THUMB_LENGTH) / 2;
>     wxCoord height = wxMax (lenThumb, SLIDER_THUMB_LENGTH);
2578,2579c2592
<     wxRect rectShaft = GetSliderShaftRect(rect, orient);
<     if ( orient == wxHORIZONTAL )
---
>     if (orient == wxHORIZONTAL) 
2581,2582c2594,2595
<         size.y = rect.height - 6;
<         size.x = wxMin(size.y / 2, rectShaft.width);
---
>         size.x = width;
>         size.y = height;
2584,2587c2597,2600
<     else // vertical
<     {
<         size.x = rect.width - 6;
<         size.y = wxMin(size.x / 2, rectShaft.height);
---
>     else
>     { // == wxVERTICAL
>         size.x = height;
>         size.y = width;
2594,2596c2607,2619
<                                            wxOrientation orient) const
< {
<     static const wxCoord SLIDER_MARGIN = 6;
---
>                                            int lenThumb,
>                                            wxOrientation orient,
>                                            long style) const
> {
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_TOP) != 0) & !transpose |
>                   ((style & wxSL_LEFT) != 0) & transpose |
>                   ((style & wxSL_BOTH) != 0));
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_BOTTOM) != 0) & !transpose |
>                   ((style & wxSL_RIGHT) != 0) & transpose |
>                   ((style & wxSL_BOTH) != 0));
2600,2606c2623
<     if ( orient == wxHORIZONTAL )
<     {
<         // make the rect of minimal width and centre it
<         rect.height = 2*BORDER_THICKNESS;
<         rect.y = rectOrig.y + (rectOrig.height - rect.height) / 2;
<         if ( rect.y < 0 )
<             rect.y = 0;
---
>     wxSize sizeThumb = GetSliderThumbSize (rect, lenThumb, orient);
2608,2609c2625,2640
<         // leave margins on the sides
<         rect.Deflate(SLIDER_MARGIN, 0);
---
>     if (orient == wxHORIZONTAL) {
>         rect.x += SLIDER_MARGIN;
>         if (left & right) 
>         {
>             rect.y += wxMax ((rect.height - 2*BORDER_THICKNESS) / 2, sizeThumb.y/2);
>         }
>         else if (left) 
>         {
>             rect.y += wxMax ((rect.height - 2*BORDER_THICKNESS - sizeThumb.y/2), sizeThumb.y/2);
>         }
>         else
>         {
>             rect.y += sizeThumb.y/2;
>         }
>         rect.width -= 2*SLIDER_MARGIN;
>         rect.height = 2*BORDER_THICKNESS;
2611,2613c2642,2656
<     else // vertical
<     {
<         // same as above but in other direction
---
>     else
>     { // == wxVERTICAL
>         rect.y += SLIDER_MARGIN;
>         if (left & right) 
>         {
>             rect.x += wxMax ((rect.width - 2*BORDER_THICKNESS) / 2, sizeThumb.x/2);
>         }
>         else if (left) 
>         {
>             rect.x += wxMax ((rect.width - 2*BORDER_THICKNESS - sizeThumb.x/2), sizeThumb.x/2);
>         }
>         else
>         {
>             rect.x += sizeThumb.x/2;
>         }
2615,2619c2658
<         rect.x = rectOrig.x + (rectOrig.width - rect.width) / 2;
<         if ( rect.x < 0 )
<             rect.x = 0;
< 
<         rect.Deflate(0, SLIDER_MARGIN);
---
>         rect.height -= 2*SLIDER_MARGIN;
2626a2666
>                                       int lenThumb,
2628a2669
>                                       long style,
2631,2632c2672,2690
<     if ( flags & wxCONTROL_FOCUSED )
<     {
---
>     /*    show shaft geometry
> 
>              shaft
>         +-------------+
>         |             |
>         |     XXX     |  <-- x1
>         |     XXX     |
>         |     XXX     |
>         |     XXX     |
>         |     XXX     |  <-- x2
>         |             |
>         +-------------+
> 
>               ^ ^
>               | |
>              y1 y2
>     */
> 
>     if (flags & wxCONTROL_FOCUSED) {
2636c2694
<     wxRect rect = GetSliderShaftRect(rectOrig, orient);
---
>     wxRect rect = GetSliderShaftRect(rectOrig, lenThumb, orient, style);
2638,2639c2696
<     if ( rectShaft )
<         *rectShaft = rect;
---
>     if (rectShaft) *rectShaft = rect;
2647c2704,2705
<                                       int flags)
---
>                                       int flags,
>                                       long style)
2649,2650c2707
<     /*
<        we are drawing a shape of this form
---
>     /*    show thumb geometry
2652,2666c2709,2728
<        HHHHHHB <--- y
<        H    DB
<        H    DB
<        H    DB   where H is hightlight colour
<        H    DB         D    dark grey
<        H    DB         B    black
<        H    DB
<        H    DB <--- y3
<         H  DB
<          HDB
<           B    <--- y2
< 
<        ^  ^  ^
<        |  |  |
<        x x3  x2
---
>              H       <--- y1
>            H H B
>          H     H B
>        H         H B <--- y3
>        H         D B
>        H         D B
>        H         D B
>        H         D B   where H is hightlight colour
>        H         D B         D    dark grey
>        H         D B         B    black
>        H         D B
>        H         D B
>        H         D B <--- y4
>          H     D B
>            H D B
>              B       <--- y2
> 
>        ^     ^     ^
>        |     |     |
>        x1    x3    x2
2674c2736,2756
<     bool transpose = orient == wxVERTICAL;
---
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_TOP) != 0) & !transpose |
>                   ((style & wxSL_LEFT) != 0) & transpose) &
>                  ((style & wxSL_BOTH) == 0);
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_BOTTOM) != 0) & !transpose |
>                   ((style & wxSL_RIGHT) != 0) & transpose) &
>                  ((style & wxSL_BOTH) == 0);
> 
>     wxCoord sizeArrow = (transpose ? rect.height : rect.width) / 2;
>     wxCoord c = ((transpose ? rect.height : rect.width) - 2*sizeArrow);
> 
>     wxCoord x1, x2, x3, y1, y2, y3, y4;
>     x1 = (transpose ? rect.y : rect.x);
>     x2 = (transpose ? rect.GetBottom() : rect.GetRight());
>     x3 = (x1-1+c) + sizeArrow;
>     y1 = (transpose ? rect.x : rect.y);
>     y2 = (transpose ? rect.GetRight() : rect.GetBottom());
>     y3 = (left  ? (y1-1+c) + sizeArrow : y1);
>     y4 = (right ? (y2+1-c) - sizeArrow : y2);
2676,2677c2758,2763
<     wxCoord x, y, x2, y2;
<     if ( transpose )
---
>     dc.SetPen(m_penBlack);
>     if (left) {
>         DrawLine(dc, x3+1-c, y1, x2, y3, transpose);
>     }
>     DrawLine(dc, x2, y3, x2, y4, transpose);
>     if (right) 
2679,2682c2765
<         x = rect.y;
<         y = rect.x;
<         x2 = rect.GetBottom();
<         y2 = rect.GetRight();
---
>         DrawLine(dc, x3+1-c, y2, x2, y4, transpose);
2686,2689c2769
<         x = rect.x;
<         y = rect.y;
<         x2 = rect.GetRight();
<         y2 = rect.GetBottom();
---
>         DrawLine(dc, x1, y2, x2, y2, transpose);
2692,2706d2771
<     // the size of the pointed part of the thumb
<     wxCoord sizeArrow = (transpose ? rect.height : rect.width) / 2;
< 
<     wxCoord x3 = x + sizeArrow,
<             y3 = y2 - sizeArrow;
< 
<     dc.SetPen(m_penHighlight);
<     DrawLine(dc, x, y, x2, y, transpose);
<     DrawLine(dc, x, y + 1, x, y2 - sizeArrow, transpose);
<     DrawLine(dc, x, y3, x3, y2, transpose);
< 
<     dc.SetPen(m_penBlack);
<     DrawLine(dc, x3, y2, x2, y3, transpose);
<     DrawLine(dc, x2, y3, x2, y - 1, transpose);
< 
2708,2709c2773,2780
<     DrawLine(dc, x3, y2 - 1, x2 - 1, y3, transpose);
<     DrawLine(dc, x2 - 1, y3, x2 - 1, y, transpose);
---
>     DrawLine(dc, x2-1, y3+1, x2-1, y4-1, transpose);
>     if (right) {
>         DrawLine(dc, x3+1-c, y2-1, x2-1, y4, transpose);
>     }
>     else
>     {
>         DrawLine(dc, x1+1, y2-1, x2-1, y2-1, transpose);
>     }
2711c2782,2793
<     if ( flags & wxCONTROL_PRESSED )
---
>     dc.SetPen(m_penHighlight);
>     if (left) 
>     {
>         DrawLine(dc, x1, y3, x3, y1, transpose);
>         DrawLine(dc, x3+1-c, y1+1, x2-1, y3, transpose);
>     }
>     else
>     {
>         DrawLine(dc, x1, y1, x2, y1, transpose);
>     }
>     DrawLine(dc, x1, y3, x1, y4, transpose);
>     if (right) 
2712a2795,2798
>         DrawLine(dc, x1, y4, x3+c, y2+c, transpose);
>     }
> 
>     if (flags & wxCONTROL_PRESSED) {
2715,2716c2801,2805
<         if ( transpose )
<             rectInt.SetRight(y3);
---
>         if ( transpose ) 
>         {
>             rectInt.SetLeft(y3);
>             rectInt.SetRight(y4);
>         }
2718c2807,2810
<             rectInt.SetBottom(y3);
---
>         {
>             rectInt.SetTop(y3);
>             rectInt.SetBottom(y4);
>         }
2760c2852
<                                       const wxSize& sizeThumb,
---
>                                       int lenThumb,
2765c2857,2858
<                                       int flags)
---
>                                       int flags,
>                                       long style)
2767,2771c2860
<     if ( end == start )
<     {
<         // empty slider?
<         return;
<     }
---
>     /*    show ticks geometry
2773,2804c2862,2872
<     // this would lead to an infinite loop below
<     wxCHECK_RET( step > 1, _T("invalid step in wxRenderer::DrawSliderTicks") );
< 
<     // the variable names correspond to horizontal case, but they can be used
<     // for both orientations
<     wxCoord x1, x2, y1, y2, len, widthThumb;
<     if ( orient == wxHORIZONTAL )
<     {
<         x1 = rect.GetLeft();
<         x2 = rect.GetRight();
< 
<         // draw from bottom to top to leave one pixel space between the ticks
<         // and the slider as Windows do
<         y1 = rect.GetBottom();
<         y2 = rect.GetTop();
< 
<         len = rect.width;
< 
<         widthThumb = sizeThumb.x;
<     }
<     else // vertical
<     {
<         x1 = rect.GetTop();
<         x2 = rect.GetBottom();
< 
<         y1 = rect.GetRight();
<         y2 = rect.GetLeft();
< 
<         len = rect.height;
< 
<         widthThumb = sizeThumb.y;
<     }
---
>         left        right
>         ticks shaft ticks
>         ----   XX   ----  <-- x1
>         ----   XX   ----
>         ----   XX   ----
>         ----   XX   ----  <-- x2
> 
>         ^  ^        ^  ^
>         |  |        |  |
>         y3 y1       y2 y4
>     */
2806,2809c2874,2875
<     // the first tick should be positioned in such way that a thumb drawn in
<     // the first position points down directly to it
<     x1 += widthThumb / 2;
<     x2 -= widthThumb / 2;
---
>     // empty slider?
>     if (end == start) return;
2811,2813c2877,2904
<     // this also means that we have slightly less space for the ticks in
<     // between the first and the last
<     len -= widthThumb;
---
>     bool transpose = (orient == wxVERTICAL);
>     bool left  = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_TOP) != 0) & !transpose |
>                   ((style & wxSL_LEFT) != 0) & transpose |
>                   ((style & wxSL_BOTH) != 0));
>     bool right = ((style & wxSL_AUTOTICKS) != 0) &
>                  (((style & wxSL_BOTTOM) != 0) & !transpose |
>                   ((style & wxSL_RIGHT) != 0) & transpose |
>                   ((style & wxSL_BOTH) != 0));
> 
>     // default thumb size
>     wxSize sizeThumb = GetSliderThumbSize (rect, 0, orient);
>     wxCoord defaultLen = (transpose ? sizeThumb.x : sizeThumb.y);
> 
>     // normal thumb size
>     sizeThumb = GetSliderThumbSize (rect, lenThumb, orient);
>     wxCoord widthThumb  = (transpose ? sizeThumb.y : sizeThumb.x);
> 
>     wxRect rectShaft = GetSliderShaftRect (rect, lenThumb, orient, style);
> 
>     wxCoord x1, x2, y1, y2, y3, y4 , len;
>     x1 = (transpose ? rectShaft.y : rectShaft.x) + widthThumb/2;
>     x2 = (transpose ? rectShaft.GetBottom() : rectShaft.GetRight()) - widthThumb/2;
>     y1 = (transpose ? rectShaft.x : rectShaft.y) - defaultLen/2;
>     y2 = (transpose ? rectShaft.GetRight() : rectShaft.GetBottom()) + defaultLen/2;
>     y3 = (transpose ? rect.x : rect.y);
>     y4 = (transpose ? rect.GetRight() : rect.GetBottom());
>     len = x2 - x1;
2818,2819c2909
<     for ( int n = 0; n < range; n += step )
<     {
---
>     for ( int n = 0; n < range; n += step ) {
2822c2912,2917
<         DrawLine(dc, x, y1, x, y2, orient == wxVERTICAL);
---
>         if (left & (y1 > y3)) {
>             DrawLine(dc, x, y1, x, y3, orient == wxVERTICAL);
>         }
>         if (right & (y4 > y2)) {
>             DrawLine(dc, x, y2, x, y4, orient == wxVERTICAL);
>         }
2824d2918
< 
2826c2920,2925
<     DrawLine(dc, x2, y1, x2, y2, orient == wxVERTICAL);
---
>     if (left & (y1 > y3)) {
>         DrawLine(dc, x2, y1, x2, y3, orient == wxVERTICAL);
>     }
>     if (right & (y4 > y2)) {
>         DrawLine(dc, x2, y2, x2, y4, orient == wxVERTICAL);
>     }
3987a4087,4098
>         }
> 
>         // for compatibility with other ports, the buttons default size is never
>         // less than the standard one, but not when display not PDAs.
>         if (wxSystemSettings::GetScreenType() > wxSYS_SCREEN_PDA)
>         {
>         if ( !(window->GetWindowStyle() & wxBU_EXACTFIT) )
>             {
> 			wxSize szDef = wxButton::GetDefaultSize();
>                 if ( size->x < szDef.x )
>                     size->x = szDef.x;
>             }

 	  	 

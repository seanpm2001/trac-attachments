Index: tests/drawing/drawing.h
===================================================================
--- tests/drawing/drawing.h	(revision 76473)
+++ tests/drawing/drawing.h	(working copy)
@@ -17,6 +17,14 @@
 #include "wx/dcsvg.h"
 #endif
 
+// A few helper functions, useful to the tests
+#ifndef M_PI
+const double M_PI = 3.14159265358979;
+#endif
+
+inline double DegToRad(double deg) { return (deg * M_PI) / 180.0; }
+inline double RadToDeg(double deg) { return (deg * 180.0) / M_PI; }
+
 class WXDLLIMPEXP_FWD_BASE wxDynamicLibrary;
 
 class GraphicsContextDrawingTestCase : public CppUnit::TestCase
@@ -43,6 +51,12 @@
 //        CPPUNIT_TEST( DrawToSVG_Basics );
 #endif
         CPPUNIT_TEST( DrawToPlugins_Basics );
+
+        CPPUNIT_TEST( DrawToImage_Fonts );
+#if wxUSE_SVG
+//        CPPUNIT_TEST( DrawToSVG_Fonts );
+#endif
+        CPPUNIT_TEST( DrawToPlugins_Fonts );
    CPPUNIT_TEST_SUITE_END();
 
     class ImageGraphicsContextLifeCycle: public DrawingTestGCFactory
@@ -99,9 +113,11 @@
 
     // test cases
     static const DrawingTestCase ms_drawingBasicTc;
+    static const DrawingTestCase ms_drawingFontTc;
 
     // cases functions
     void DoBasicDrawings (wxGraphicsContext *gc);
+    void DoFontDrawings (wxGraphicsContext *gc);
 
     void RunIndividualDrawingCase (
         DrawingTestGCFactory& gcFactory,
@@ -127,6 +143,17 @@
     void DrawToPlugins_Basics() {
         RunPluginsDrawingCase (ms_drawingBasicTc);
     }
+    void DrawToImage_Fonts() {
+        RunIndividualDrawingCase (ms_imageLifeCycle, ms_drawingFontTc);
+    }
+#if wxUSE_SVG
+    void DrawToSVG_Fonts() {
+        RunIndividualDrawingCase (ms_svgLifeCycle, ms_drawingFontTc);
+    }
+#endif
+    void DrawToPlugins_Fonts() {
+        RunPluginsDrawingCase (ms_drawingFontTc);
+    }
 
     bool GetBuildReference() const;
 
Index: tests/drawing/fonttest.cpp
===================================================================
--- tests/drawing/fonttest.cpp	(revision 0)
+++ tests/drawing/fonttest.cpp	(working copy)
@@ -0,0 +1,115 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/drawing/basictest.cpp
+// Purpose:     Basic tests for wxGraphicsContext
+// Author:      Armel Asselin
+// Created:     2014-02-28
+// Copyright:   (c) 2014 Elli√© Computing <opensource@elliecomputing.com>
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "testprec.h"
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/font.h"
+#endif // WX_PRECOMP
+
+#include "drawing.h"
+
+#ifdef __WXGTK__
+#include "glib-object.h"
+#endif
+
+#if wxUSE_TEST_GC_DRAWING
+
+const GraphicsContextDrawingTestCase::DrawingTestCase
+GraphicsContextDrawingTestCase::ms_drawingFontTc = {
+    2, &GraphicsContextDrawingTestCase::DoFontDrawings, 800, 600, 72., false
+};
+
+void GraphicsContextDrawingTestCase::DoFontDrawings (wxGraphicsContext *gc)
+{
+#ifdef __WXGTK__
+    g_type_init();
+#endif
+
+    // This test is expected to treat about fonts/texts. Fonts are a bit special
+    // because we cannot expect the same rendering by several engines, and the
+    // dimensions of the same text in same font will vary.
+
+    wxGraphicsBrush gbBackground =
+        gc->CreateBrush( wxBrush ( wxColour ( 240, 240, 240 ) ) );
+
+    gc->SetBrush( gbBackground );
+    gc->DrawRectangle(0, 0, 800, 600);
+
+    wxGraphicsBrush gbTextBackground =
+        gc->CreateBrush( wxBrush ( wxColour ( 192, 192, 192 ) ) );
+
+    // set underlined font for testing
+    gc->SetFont( wxFont(wxFontInfo(12).Family(wxFONTFAMILY_MODERN).Underlined()), *wxBLACK );
+    gc->DrawText( wxT("This is text"), 110, 10, gbTextBackground );
+    gc->DrawText( wxT("That is text"), 20, 10, DegToRad(-45), gbTextBackground );
+
+    // use wxSWISS_FONT and not wxNORMAL_FONT as the latter can't be rotated
+    // under Win9x (it is not TrueType)
+    gc->SetFont( wxFont(wxFontInfo(12).Family(wxFONTFAMILY_SWISS)), *wxBLACK );
+
+    wxString text;
+
+    for ( int n = -180; n < 180; n += 30 )
+    {
+        text.Printf(wxT("     %d rotated text"), n);
+        gc->DrawText(text , 400, 400, DegToRad(n) );
+    }
+
+    wxFont swissDcFont( wxFontInfo(18).Family(wxFONTFAMILY_SWISS) );
+    wxGraphicsFont swissFont = gc->CreateFont( swissDcFont, *wxBLACK );
+    gc->SetFont( swissFont );
+
+    gc->DrawText( wxT("This is Swiss 18pt text."), 110, 40 );
+
+    wxDouble length;
+    wxDouble height;
+    wxDouble descent;
+    gc->GetTextExtent( wxT("This is Swiss 18pt text."), &length, &height, &descent );
+    text.Printf( wxT("Dimensions are length %f, height %f, descent %f"), length, height, descent );
+    gc->DrawText( text, 110, 80 );
+
+    // (did not find equivalent to CharHeight())
+
+    gc->SetBrush( *wxWHITE_BRUSH );
+
+    gc->DrawRectangle( 100, 40, 4, height );
+
+    // test the logical function effect
+    wxCoord y = 150;
+    // text drawing should ignore logical function
+    gc->DrawText( wxT("There should be a text below"), 110, 150 );
+    gc->DrawRectangle( 110, y, 100, height );
+
+    y += height;
+    gc->DrawText( wxT("Visible text"), 110, y );
+    gc->DrawRectangle( 110, y, 100, height );
+    gc->DrawText( wxT("Visible text"), 110, y );
+    gc->DrawRectangle( 110, y, 100, height );
+
+    y += height;
+    gc->DrawRectangle( 110, y, 100, height );
+    gc->DrawText( wxT("Another visible text"), 110, y );
+
+    y += height;
+    gc->DrawText("And\nmore\ntext on\nmultiple\nlines", 110, y);
+    y += 5*height;
+
+    gc->SetFont( swissDcFont, *wxBLUE );
+    gc->DrawText( "Rotated text\ncan have\nmultiple lines\nas well", 110, y, DegToRad(15) );
+}
+
+#endif // wxUSE_TEST_GC_DRAWING
Index: tests/drawing/references/image_test_image_cairo-1.8_2_ref.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: tests/drawing/references/image_test_image_cairo-1.8_2_ref.png
===================================================================
--- tests/drawing/references/image_test_image_cairo-1.8_2_ref.png	(revision 0)
+++ tests/drawing/references/image_test_image_cairo-1.8_2_ref.png	(working copy)

Property changes on: tests/drawing/references/image_test_image_cairo-1.8_2_ref.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: tests/drawing/references/image_test_image_cg-10.5_2_ref.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: tests/drawing/references/image_test_image_cg-10.5_2_ref.png
===================================================================
--- tests/drawing/references/image_test_image_cg-10.5_2_ref.png	(revision 0)
+++ tests/drawing/references/image_test_image_cg-10.5_2_ref.png	(working copy)

Property changes on: tests/drawing/references/image_test_image_cg-10.5_2_ref.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png
===================================================================
--- tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png	(revision 0)
+++ tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png	(working copy)

Property changes on: tests/drawing/references/image_test_image_gdiplus-6.1_2_ref.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: tests/test.bkl
===================================================================
--- tests/test.bkl	(revision 76473)
+++ tests/test.bkl	(working copy)
@@ -133,6 +133,7 @@
             drawing/drawing.cpp
             drawing/plugindriver.cpp
             drawing/basictest.cpp
+            drawing/fonttest.cpp
         </sources>
         <wx-lib>core</wx-lib>
         <wx-lib>net</wx-lib>

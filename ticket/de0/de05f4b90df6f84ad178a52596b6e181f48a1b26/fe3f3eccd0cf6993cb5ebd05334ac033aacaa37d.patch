Index: include/wx/msw/ole/oleutils.h
===================================================================
--- include/wx/msw/ole/oleutils.h	(revision 72076)
+++ include/wx/msw/ole/oleutils.h	(working copy)
@@ -237,6 +237,50 @@
 // Convert variants
 class WXDLLIMPEXP_FWD_BASE wxVariant;
 
+// wrapper for CURRENCY type used in VARIANT (VARIANT.vt == VT_CY)
+class WXDLLIMPEXP_CORE wxVariantDataCurrency : public wxVariantData
+{
+public:
+    wxVariantDataCurrency() { VarCyFromR8(0.0, &m_value); }
+    wxVariantDataCurrency(const CURRENCY& value) { m_value = value; }
+    
+    CURRENCY GetValue() const { return m_value; }
+    void SetValue(CURRENCY value) { m_value = value; }
+    
+    virtual bool Eq(wxVariantData& data) const;
+    
+    virtual bool Write(wxString& str) const;
+
+    wxVariantData* Clone() const { return new wxVariantDataCurrency(m_value); }
+    virtual wxString GetType() const { return wxS("currency"); }
+
+    DECLARE_WXANY_CONVERSION()
+private:
+    CURRENCY m_value;
+};
+
+
+// wrapper for SCODE type used in VARIANT (VARIANT.vt == VT_ERROR)
+class WXDLLIMPEXP_CORE wxVariantDataErrorCode : public wxVariantData
+{
+public:
+    wxVariantDataErrorCode(SCODE value = S_OK) { m_value = value; }
+
+    SCODE GetValue() const { return m_value; }
+    void SetValue(SCODE value) { m_value = value; }
+    
+    virtual bool Eq(wxVariantData& data) const;
+
+    virtual bool Write(wxString& str) const;
+
+    wxVariantData* Clone() const { return new wxVariantDataErrorCode(m_value); }
+    virtual wxString GetType() const { return wxS("errorcode"); }
+
+    DECLARE_WXANY_CONVERSION()
+private:
+    SCODE m_value;
+};
+
 WXDLLIMPEXP_CORE bool wxConvertVariantToOle(const wxVariant& variant, VARIANTARG& oleVariant);
 WXDLLIMPEXP_CORE bool wxConvertOleToVariant(const VARIANTARG& oleVariant, wxVariant& variant);
 #endif // wxUSE_VARIANT
Index: src/msw/ole/oleutils.cpp
===================================================================
--- src/msw/ole/oleutils.cpp	(revision 72076)
+++ src/msw/ole/oleutils.cpp	(working copy)
@@ -221,6 +221,89 @@
 } // unnamed namespace
 
 
+// ----------------------------------------------------------------------------
+// wxVariantDataCurrency
+// ----------------------------------------------------------------------------
+
+
+#if wxUSE_ANY
+
+bool wxVariantDataCurrency::GetAsAny(wxAny* any) const
+{
+    *any = m_value;
+    return true;
+}
+
+wxVariantData* wxVariantDataCurrency::VariantDataFactory(const wxAny& any)
+{
+    return new wxVariantDataCurrency(wxANY_AS(any, CURRENCY));
+}
+
+REGISTER_WXANY_CONVERSION(CURRENCY, wxVariantDataCurrency)
+
+#endif // wxUSE_ANY
+
+bool wxVariantDataCurrency::Eq(wxVariantData& data) const
+{
+    wxASSERT_MSG( (data.GetType() == wxS("currency")),
+                  "wxVariantDataCurrency::Eq: argument mismatch" );
+
+    wxVariantDataCurrency& otherData = (wxVariantDataCurrency&) data;
+
+    return (otherData.m_value.int64 == m_value.int64);
+}
+
+bool wxVariantDataCurrency::Write(wxString& str) const
+{
+    BSTR bStr = NULL;
+    if ( SUCCEEDED(VarBstrFromCy(m_value, LOCALE_USER_DEFAULT, 0, &bStr)) )
+    {
+        str = wxConvertStringFromOle(bStr); 
+        SysFreeString(bStr); 
+        return true;
+    }
+    return false;
+}
+
+// ----------------------------------------------------------------------------
+// wxVariantDataErrorCode
+// ----------------------------------------------------------------------------
+
+#if wxUSE_ANY
+
+bool wxVariantDataErrorCode::GetAsAny(wxAny* any) const
+{
+    *any = m_value;
+    return true;
+}
+
+wxVariantData* wxVariantDataErrorCode::VariantDataFactory(const wxAny& any)
+{
+    return new wxVariantDataErrorCode(wxANY_AS(any, SCODE));
+}
+
+REGISTER_WXANY_CONVERSION(SCODE, wxVariantDataErrorCode)
+
+#endif // wxUSE_ANY
+
+bool wxVariantDataErrorCode::Eq(wxVariantData& data) const
+{
+    wxASSERT_MSG( (data.GetType() == wxS("errorcode")),
+                  "wxVariantDataErrorCode::Eq: argument mismatch" );
+
+    wxVariantDataErrorCode& otherData = (wxVariantDataErrorCode&) data;
+
+    return (otherData.m_value == m_value);
+}
+
+bool wxVariantDataErrorCode::Write(wxString& str) const
+{
+    str << m_value;
+    return true;
+}
+
+
+
 WXDLLEXPORT bool wxConvertVariantToOle(const wxVariant& variant, VARIANTARG& oleVariant)
 {
     VariantInit(&oleVariant);
@@ -231,10 +314,21 @@
     }
 
     wxString type(variant.GetType());
-
-
-    if (type == wxT("long"))
+    
+    if (type == wxT("errorcode"))
     {
+        wxVariantDataErrorCode* ec = wxDynamicCastVariantData(variant.GetData(), wxVariantDataErrorCode);
+        oleVariant.vt = VT_ERROR;
+        oleVariant.scode = ec->GetValue();
+    }
+    else if (type == wxT("currency"))
+    {
+        wxVariantDataCurrency* c = wxDynamicCastVariantData(variant.GetData(), wxVariantDataCurrency);        
+        oleVariant.vt = VT_CY;
+        oleVariant.cyVal = c->GetValue();
+    }
+    else if (type == wxT("long"))
+    {
         oleVariant.vt = VT_I4;
         oleVariant.lVal = variant.GetLong() ;
     }
@@ -420,6 +514,14 @@
     {
         switch ( oleVariant.vt & VT_TYPEMASK )
         {
+            case VT_ERROR:
+                variant.SetData(new wxVariantDataErrorCode(oleVariant.scode));
+                break;
+
+            case VT_CY:                
+                variant.SetData(new wxVariantDataCurrency(oleVariant.cyVal));
+                break;
+
             case VT_BSTR:
                 {
                     wxString str(wxConvertStringFromOle(oleVariant.bstrVal));

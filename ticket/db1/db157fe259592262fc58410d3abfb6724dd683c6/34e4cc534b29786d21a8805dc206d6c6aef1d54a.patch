Index: include/wx/gtk/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/glcanvas.h,v
retrieving revision 1.13
diff -b -u -2 -r1.13 glcanvas.h
--- include/wx/gtk/glcanvas.h	2005/03/27 18:06:35	1.13
+++ include/wx/gtk/glcanvas.h	2005/06/09 14:01:46
@@ -47,5 +47,6 @@
   WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
   WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-  WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };
 
Index: include/wx/mac/carbon/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/glcanvas.h,v
retrieving revision 1.7
diff -b -u -2 -r1.7 glcanvas.h
--- include/wx/mac/carbon/glcanvas.h	2005/02/21 01:52:23	1.7
+++ include/wx/mac/carbon/glcanvas.h	2005/06/09 14:01:46
@@ -54,5 +54,6 @@
   WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
   WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-  WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+  WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+  WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };
 
Index: include/wx/mac/classic/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/classic/glcanvas.h,v
retrieving revision 1.5
diff -b -u -2 -r1.5 glcanvas.h
--- include/wx/mac/classic/glcanvas.h	2005/02/21 01:52:22	1.5
+++ include/wx/mac/classic/glcanvas.h	2005/06/09 14:01:46
@@ -54,5 +54,6 @@
   WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
   WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-  WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+  WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+  WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };
 
Index: include/wx/msw/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/glcanvas.h,v
retrieving revision 1.15
diff -b -u -2 -r1.15 glcanvas.h
--- include/wx/msw/glcanvas.h	2005/02/21 01:52:19	1.15
+++ include/wx/msw/glcanvas.h	2005/06/09 14:01:46
@@ -50,5 +50,6 @@
     WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
     WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-    WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };
 
Index: include/wx/palmos/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/palmos/glcanvas.h,v
retrieving revision 1.2
diff -b -u -2 -r1.2 glcanvas.h
--- include/wx/palmos/glcanvas.h	2005/01/18 21:14:25	1.2
+++ include/wx/palmos/glcanvas.h	2005/06/09 14:01:46
@@ -50,5 +50,6 @@
     WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
     WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-    WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };
 
Index: include/wx/x11/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/x11/glcanvas.h,v
retrieving revision 1.9
diff -b -u -2 -r1.9 glcanvas.h
--- include/wx/x11/glcanvas.h	2005/02/21 01:52:23	1.9
+++ include/wx/x11/glcanvas.h	2005/06/09 14:01:48
@@ -45,5 +45,6 @@
         WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
         WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-        WX_GL_MIN_ACCUM_ALPHA  /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+        WX_GL_MIN_ACCUM_ALPHA, /* use blue buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+        WX_GL_NOT_ACCELERATED  /* disable use of OpenGL hardware implementation (try this with buggy video card drivers) */
 };

Index: src/msw/glcanvas.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/glcanvas.cpp,v
retrieving revision 1.33
diff -b -u -2 -r1.33 glcanvas.cpp
--- src/msw/glcanvas.cpp	2005/05/31 15:01:31	1.33
+++ src/msw/glcanvas.cpp	2005/06/09 14:01:55
@@ -387,12 +387,124 @@
 }
 
-static void AdjustPFDForAttributes(PIXELFORMATDESCRIPTOR& pfd, int *attribList)
+// The following code uses a gamer's heuristics to choose a suitable pixel format
+// c.f. http://www.wischik.com/lu/programmer/wingl.html#accelerated
+//  bpp   -> -1 don't care. (or a positive integer)
+//  depth -> -1 don't care. (or a positive integer)
+//  dbl   -> we want double-buffering. (or -1 for 'don't care', or 0 for 'none')
+//  acc   -> we want acceleration. (or -1 or 0)
+static int ChoosePixelFormatEx( HDC hdc,
+                                int *p_bpp,
+                                int *p_depth,
+                                int *p_dbl,
+                                int *p_acc,
+                                PIXELFORMATDESCRIPTOR *p_pfd )
+{
+    int wbpp;
+    if (p_bpp == NULL)
+        wbpp = -1;
+    else
+        wbpp = *p_bpp;
+    int wdepth;
+    if (p_depth == NULL)
+        wdepth = 16;
+    else
+        wdepth = *p_depth;
+    int wdbl;
+    if (p_dbl == NULL)
+        wdbl = -1;
+    else 
+        wdbl = *p_dbl;
+    int wacc;
+    if (p_acc == NULL)
+        wacc = 1;
+    else
+        wacc = *p_acc;
+  
+    // get total numbers of available pfd
+    PIXELFORMATDESCRIPTOR pfd;
+    ZeroMemory(&pfd, sizeof(pfd));
+    pfd.nSize = sizeof(pfd);
+    pfd.nVersion = 1;
+    int num = DescribePixelFormat(hdc, 1, sizeof(pfd), &pfd);
+    if (num == 0)
+        return 0;
+  
+    // loop on available pfd and search for the best one
+    unsigned int maxqual = 0; int maxindex = 0;
+    int max_bpp = 0, max_depth = 0, max_dbl = 0, max_acc = 0;
+    PIXELFORMATDESCRIPTOR max_pfd;
+    ZeroMemory(&max_pfd, sizeof(max_pfd));
+    for (int i = 1; i <= num; i++)
+    {
+        ZeroMemory(&pfd, sizeof(pfd));
+        pfd.nSize = sizeof(pfd);
+        pfd.nVersion = 1;
+        DescribePixelFormat(hdc, i, sizeof(pfd), &pfd);
+        int bpp = pfd.cColorBits;
+        int depth = pfd.cDepthBits;
+        bool pal = (pfd.iPixelType == PFD_TYPE_COLORINDEX);
+        bool mcd = ((pfd.dwFlags & PFD_GENERIC_FORMAT) && (pfd.dwFlags & PFD_GENERIC_ACCELERATED));
+        bool soft = ((pfd.dwFlags & PFD_GENERIC_FORMAT) && !(pfd.dwFlags & PFD_GENERIC_ACCELERATED));
+        bool icd = (!(pfd.dwFlags & PFD_GENERIC_FORMAT) && !(pfd.dwFlags & PFD_GENERIC_ACCELERATED));
+        bool opengl = (pfd.dwFlags & PFD_SUPPORT_OPENGL) != 0;
+        bool window = (pfd.dwFlags & PFD_DRAW_TO_WINDOW) != 0;
+        bool bitmap = (pfd.dwFlags & PFD_DRAW_TO_BITMAP) != 0;
+        bool dbuff = (pfd.dwFlags & PFD_DOUBLEBUFFER) != 0;
+        // calculate the heuristic
+        unsigned int q = 0;
+        if (opengl && window) q=q+0x8000;
+        if (wdepth==-1 || (wdepth>0 && depth>0)) q=q+0x4000;
+        if (wdbl==-1 || (wdbl==0 && !dbuff) || (wdbl==1 && dbuff)) q=q+0x2000;
+        if (wacc==-1 || (wacc==0 && soft) || (wacc==1 && (mcd || icd))) q=q+0x1000;
+        if (mcd || icd) q=q+0x0040; if (icd) q=q+0x0002;
+        if (wbpp==-1 || (wbpp==bpp)) q=q+0x0800;
+        if (bpp>=16) q=q+0x0020; if (bpp==16) q=q+0x0008;
+        if (wdepth==-1 || (wdepth==depth)) q=q+0x0400;
+        if (depth>=16) q=q+0x0010; if (depth==16) q=q+0x0004;
+        if (!pal) q=q+0x0080;
+        if (bitmap) q=q+0x0001;
+        if ( q > maxqual )
+        {
+            // this pixelformat is a best one, remember it
+            maxqual = q;
+            maxindex = i;
+            max_bpp = bpp;
+            max_depth = depth;
+            max_dbl = dbuff ? 1 : 0;
+            max_acc = soft ? 0 : 1;
+            max_pfd = pfd;
+        }
+    }
+
+    // pfd found ?
+    if (maxindex == 0)
+        return maxindex;
+    // ok store the parameters
+    if (p_bpp != NULL)
+        *p_bpp = max_bpp;
+    if (p_depth != NULL)
+        *p_depth = max_depth;
+    if (p_dbl != NULL)
+        *p_dbl = max_dbl;
+    if (p_acc != NULL)
+        *p_acc = max_acc;
+    if (p_pfd != NULL)
+        *p_pfd = max_pfd;
+
+    // return the pixelformat value
+    return maxindex;
+}
+
+static void AdjustPixelFormatAttributes( int *p_bpp,
+                                         int *p_depth,
+                                         int *p_dbl,
+                                         int *p_acc,
+                                         int *attribList)
 {
-  if (attribList) {
-    pfd.dwFlags &= ~PFD_DOUBLEBUFFER;
-    pfd.iPixelType = PFD_TYPE_COLORINDEX;
-    pfd.cColorBits = 0;
-    int arg=0;
+    if (attribList)
+    {
+        *p_dbl = 0; // disabled by default
 
+        int arg = 0;
     while( (attribList[arg]!=0) )
     {
@@ -400,60 +512,51 @@
       {
         case WX_GL_RGBA:
-          pfd.iPixelType = PFD_TYPE_RGBA;
           break;
         case WX_GL_BUFFER_SIZE:
-          pfd.cColorBits = (BYTE)attribList[arg++];
+                *p_bpp = (BYTE)attribList[arg++];
           break;
         case WX_GL_LEVEL:
-          // this member looks like it may be obsolete
-          if (attribList[arg] > 0) {
-            pfd.iLayerType = (BYTE)PFD_OVERLAY_PLANE;
-          } else if (attribList[arg] < 0) {
-            pfd.iLayerType = (BYTE)PFD_UNDERLAY_PLANE;
-          } else {
-            pfd.iLayerType = (BYTE)PFD_MAIN_PLANE;
-          }
           arg++;
           break;
         case WX_GL_DOUBLEBUFFER:
-          pfd.dwFlags |= PFD_DOUBLEBUFFER;
+                *p_dbl = 1;
           break;
         case WX_GL_STEREO:
-          pfd.dwFlags |= PFD_STEREO;
           break;
         case WX_GL_AUX_BUFFERS:
-          pfd.cAuxBuffers = (BYTE)attribList[arg++];
+                arg++;
           break;
         case WX_GL_MIN_RED:
-          pfd.cColorBits = (BYTE)(pfd.cColorBits + (pfd.cRedBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_GREEN:
-          pfd.cColorBits = (BYTE)(pfd.cColorBits + (pfd.cGreenBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_BLUE:
-          pfd.cColorBits = (BYTE)(pfd.cColorBits + (pfd.cBlueBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_ALPHA:
-          // doesn't count in cColorBits
-          pfd.cAlphaBits = (BYTE)attribList[arg++];
+                arg++;
           break;
         case WX_GL_DEPTH_SIZE:
-          pfd.cDepthBits = (BYTE)attribList[arg++];
+                *p_depth = attribList[arg++];
           break;
         case WX_GL_STENCIL_SIZE:
-          pfd.cStencilBits = (BYTE)attribList[arg++];
+                arg++;
           break;
         case WX_GL_MIN_ACCUM_RED:
-          pfd.cAccumBits = (BYTE)(pfd.cAccumBits + (pfd.cAccumRedBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_ACCUM_GREEN:
-          pfd.cAccumBits = (BYTE)(pfd.cAccumBits + (pfd.cAccumGreenBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_ACCUM_BLUE:
-          pfd.cAccumBits = (BYTE)(pfd.cAccumBits + (pfd.cAccumBlueBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
         case WX_GL_MIN_ACCUM_ALPHA:
-          pfd.cAccumBits = (BYTE)(pfd.cAccumBits + (pfd.cAccumAlphaBits = (BYTE)attribList[arg++]));
+                arg++;
           break;
+              case WX_GL_NOT_ACCELERATED:
+                *p_acc = 0;
         default:
           break;
@@ -463,35 +566,28 @@
 }
 
+
 void wxGLCanvas::SetupPixelFormat(int *attribList) // (HDC hDC)
 {
-  PIXELFORMATDESCRIPTOR pfd = {
-        sizeof(PIXELFORMATDESCRIPTOR),    /* size */
-        1,                /* version */
-        PFD_SUPPORT_OPENGL |
-        PFD_DRAW_TO_WINDOW |
-        PFD_DOUBLEBUFFER,        /* support double-buffering */
-        PFD_TYPE_RGBA,            /* color type */
-        16,                /* preferred color depth */
-        0, 0, 0, 0, 0, 0,        /* color bits (ignored) */
-        0,                /* no alpha buffer */
-        0,                /* alpha bits (ignored) */
-        0,                /* no accumulation buffer */
-        0, 0, 0, 0,            /* accum bits (ignored) */
-        16,                /* depth buffer */
-        0,                /* no stencil buffer */
-        0,                /* no auxiliary buffers */
-        PFD_MAIN_PLANE,            /* main layer */
-        0,                /* reserved */
-        0, 0, 0,            /* no layer, visible, damage masks */
-    };
+  /* setup default values */
+  int bpp = -1;   /* prefered color depth: don't care */
+  int depth = -1; /* depth buffer: don't care */
+  int dbl = 1;    /* support double-buffering (or -1 for 'don't care', or 0 for 'none') */
+  int acc = 1;    /* we want acceleration. (or -1 or 0) */
 
-  AdjustPFDForAttributes(pfd, attribList);
+  /* adjust pixel format parameters depending on the user's attribute list */
+  AdjustPixelFormatAttributes( &bpp, &depth, &dbl, &acc, attribList);
 
-  int pixelFormat = ChoosePixelFormat((HDC) m_hDC, &pfd);
-  if (pixelFormat == 0) {
+  /* choose the best pixel format matching the given parameters */
+  PIXELFORMATDESCRIPTOR pfd;
+  int pixelFormat = ChoosePixelFormatEx((HDC) m_hDC, &bpp, &depth, &dbl, &acc, &pfd);
+
+  if (pixelFormat == 0)
+  {
     wxLogLastError(_T("ChoosePixelFormat"));
   }
-  else {
-    if ( !::SetPixelFormat((HDC) m_hDC, pixelFormat, &pfd) ) {
+  else
+  {
+    if ( !::SetPixelFormat((HDC) m_hDC, pixelFormat, &pfd) )
+    {
       wxLogLastError(_T("SetPixelFormat"));
     }
@@ -779,30 +875,16 @@
 bool wxGLApp::InitGLVisual(int *attribList)
 {
-  int pixelFormat;
-  PIXELFORMATDESCRIPTOR pfd = {
-        sizeof(PIXELFORMATDESCRIPTOR),    /* size */
-        1,                /* version */
-        PFD_SUPPORT_OPENGL |
-        PFD_DRAW_TO_WINDOW |
-        PFD_DOUBLEBUFFER,        /* support double-buffering */
-        PFD_TYPE_RGBA,            /* color type */
-        16,                /* preferred color depth */
-        0, 0, 0, 0, 0, 0,        /* color bits (ignored) */
-        0,                /* no alpha buffer */
-        0,                /* alpha bits (ignored) */
-        0,                /* no accumulation buffer */
-        0, 0, 0, 0,            /* accum bits (ignored) */
-        16,                /* depth buffer */
-        0,                /* no stencil buffer */
-        0,                /* no auxiliary buffers */
-        PFD_MAIN_PLANE,            /* main layer */
-        0,                /* reserved */
-        0, 0, 0,            /* no layer, visible, damage masks */
-    };
+  /* setup default values */
+  int bpp = -1;   /* prefered color depth: don't care */
+  int depth = -1; /* depth buffer: don't care */
+  int dbl = 1;    /* support double-buffering (or -1 for 'don't care', or 0 for 'none') */
+  int acc = 1;    /* we want acceleration. (or -1 or 0) */
 
-  AdjustPFDForAttributes(pfd, attribList);
+  /* adjust pixel format parameters depending on the user's attribute list */
+  AdjustPixelFormatAttributes( &bpp, &depth, &dbl, &acc, attribList);
 
-  // use DC for whole (root) screen, since no windows have yet been created
-  pixelFormat = ChoosePixelFormat(ScreenHDC(), &pfd);
+  /* choose the best pixel format matching the given parameters */
+  PIXELFORMATDESCRIPTOR pfd;
+  int pixelFormat = ChoosePixelFormatEx(ScreenHDC(), &bpp, &depth, &dbl, &acc, &pfd);
 
   if (pixelFormat == 0) {

 	  	 

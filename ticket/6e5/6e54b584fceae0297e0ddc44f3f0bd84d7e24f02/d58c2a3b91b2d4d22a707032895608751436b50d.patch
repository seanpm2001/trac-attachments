Index: samples/mediaplayer/mediaplayer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/mediaplayer/mediaplayer.cpp,v
retrieving revision 1.19
diff -u -r1.19 mediaplayer.cpp
--- samples/mediaplayer/mediaplayer.cpp	2005/05/31 21:12:22	1.19
+++ samples/mediaplayer/mediaplayer.cpp	2005/06/29 21:33:20
@@ -12,12 +12,12 @@
 // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 // MediaPlayer
 //
-// This is a simple example of how to use all the funtionality of
-// the wxMediaCtrl class in wxWidgets.
+// This is a somewhat comprehensive example of how to use all the funtionality
+// of the wxMediaCtrl class in wxWidgets.
 //
 // To use this sample, simply select Open File from the file menu,
 // select the file you want to play - and MediaPlayer will play the file in a
-// new notebook page, showing video if necessary.
+// the current notebook page, showing video if necessary.
 //
 // You can select one of the menu options, or move the slider around
 // to manipulate what is playing.
@@ -59,8 +59,13 @@
 #include "wx/slider.h"      //for a slider for seeking within media
 #include "wx/sizer.h"       //for positioning controls/wxBoxSizer
 #include "wx/timer.h"       //timer for updating status bar
-#include "wx/textdlg.h"     //for getting user text from OpenURL
+#include "wx/textdlg.h"     //for getting user text from OpenURL/Debug
 #include "wx/notebook.h"    //for wxNotebook and putting movies in pages
+#include "wx/cmdline.h"     //for wxCmdLineParser (optional)
+#include "wx/listctrl.h"    //for wxListCtrl
+#include "wx/dnd.h"         //drag and drop for the playlist
+#include "wx/filename.h"    //For wxFileName::GetName()
+#include "wx/config.h"      //for native wxConfig
 
 // Use some stuff that's not part of the current API, such as loading
 // media from a URL, etc.
@@ -75,8 +80,9 @@
 #error "This is a GUI sample"
 #endif
 
-#if !wxUSE_MEDIACTRL || !wxUSE_MENUS || !wxUSE_SLIDER || !wxUSE_TIMER || !wxUSE_NOTEBOOK
-#error "menus, slider, mediactrl, notebook, and timers must all be enabled for this sample!"
+#if !wxUSE_MEDIACTRL || !wxUSE_MENUS || !wxUSE_SLIDER || !wxUSE_TIMER || \
+    !wxUSE_NOTEBOOK || !wxUSE_LISTCTRL || !wxUSE_DRAG_AND_DROP
+#error "Not all required elements are enabled.  Please modify setup.h!"
 #endif
 
 // ============================================================================
@@ -90,7 +96,7 @@
 // IDs for the controls and the menu commands
 enum
 {
-    // menu items
+    // Menu event IDs
     wxID_LOOP = 1,
     wxID_OPENFILESAMEPAGE,
     wxID_OPENFILENEWPAGE,
@@ -99,34 +105,54 @@
     wxID_CLOSECURRENTPAGE,
     wxID_PLAY,
     wxID_PAUSE,
+    wxID_NEXT,
+    wxID_PREV,
+    wxID_SELECTBACKEND,
 //    wxID_STOP,   [built-in to wxWidgets]
 //    wxID_ABOUT,  [built-in to wxWidgets]
 //    wxID_EXIT,   [built-in to wxWidgets]
-    wxID_SLIDER,    // event id for our slider
-    wxID_NOTEBOOK,  // event id for our notebook
-    wxID_MEDIACTRL  // event id for our wxMediaCtrl
+    // Control event IDs
+    wxID_SLIDER,    
+    wxID_NOTEBOOK, 
+    wxID_MEDIACTRL,  
+    wxID_BUTTONNEXT,
+    wxID_BUTTONPREV,
+    wxID_BUTTONSTOP,
+    wxID_BUTTONPLAY,
+    wxID_LISTCTRL,
+    wxID_GAUGE
 };
 
 // ----------------------------------------------------------------------------
-// MyApp
+// wxMediaPlayerApp
 // ----------------------------------------------------------------------------
 
-class MyApp : public wxApp
+class wxMediaPlayerApp : public wxApp
 {
 public:
+#ifdef __WXMAC__
+    virtual void MacOpenFile(const wxString & fileName )
+    {
+        //Called when a user drags a file over our app
+        m_frame->DoOpenFile(fileName);
+    }
+#endif
     virtual bool OnInit();
+
+protected:
+    class wxMediaPlayerFrame* m_frame;
 };
 
 // ----------------------------------------------------------------------------
-// MyFrame
+// wxMediaPlayerFrame
 // ----------------------------------------------------------------------------
 
-class MyFrame : public wxFrame
+class wxMediaPlayerFrame : public wxFrame
 {
 public:
     // Ctor/Dtor
-    MyFrame(const wxString& title);
-    ~MyFrame();
+    wxMediaPlayerFrame(const wxString& title);
+    ~wxMediaPlayerFrame();
 
     // Menu event handlers
     void OnQuit(wxCommandEvent& event);
@@ -142,10 +168,23 @@
     void OnPlay(wxCommandEvent& event);
     void OnPause(wxCommandEvent& event);
     void OnStop(wxCommandEvent& event);
+    void OnNext(wxCommandEvent& event);
+    void OnPrev(wxCommandEvent& event);
 
+    void OnSelectBackend(wxCommandEvent& event);
+
     // Notebook event handlers
     void OnPageChange(wxNotebookEvent& event);
 
+    // Key event handlers
+    void OnKeyDown(wxKeyEvent& event);
+
+    // Quickie for playing from command line
+    void AddToPlayList(const wxString& szString);
+
+    // ListCtrl event handlers
+    void OnChangeSong(wxListEvent& event);
+
 private:
     // Rebuild base status string (see Implementation)
     void ResetStatus();
@@ -153,59 +192,177 @@
     // Common open file code
     void OpenFile(bool bNewPage);
     void OpenURL(bool bNewPage);
+    void DoOpenFile(const wxString& path, bool bNewPage);
+    void DoPlayFile(const wxString& path);
 
-    // Get the media control and slider of current notebook page
+    // Get the controls of current notebook page
     wxMediaCtrl* GetCurrentMediaCtrl();
     wxSlider*    GetCurrentSlider();
+    wxGauge*    GetCurrentGauge();
 
-    class MyTimer* m_timer;     //Timer to write info to status bar
+    int      m_nLastFileId;     //List ID of played file in listctrl
+    wxString m_szFile;          //Name of currently playing file/location
+    class wxMediaPlayerTimer* m_timer;     //Timer to write info to status bar
     wxString m_basestatus;      //Base status string (see ResetStatus())
     wxNotebook* m_notebook;     //Notebook containing our pages
 
-    // So that mytimer can access MyFrame's members
-    friend class MyTimer;
+    // Maybe I should use more accessors, but for simplicity
+    // I'll allow the other classes access to our members
+    friend class wxMediaPlayerApp;
+    friend class wxMediaPlayerNotebookPage;
+    friend class wxMediaPlayerTimer;
 };
 
 
 
 // ----------------------------------------------------------------------------
-// MyNotebookPage
+// wxMediaPlayerNotebookPage
 // ----------------------------------------------------------------------------
 
-class MyNotebookPage : public wxPanel
+class wxMediaPlayerNotebookPage : public wxPanel
 {
-    MyNotebookPage(wxNotebook* book);
+    wxMediaPlayerNotebookPage(wxMediaPlayerFrame* parentFrame, 
+        wxNotebook* book, const wxString& be = wxEmptyString);
 
     // Slider event handlers
-    void OnSeek(wxCommandEvent& event);
+    void OnBeginSeek(wxScrollEvent& event);
+    void OnEndSeek(wxScrollEvent& event);
 
     // Media event handlers
     void OnMediaFinished(wxMediaEvent& event);
 
+
 public:
-    friend class MyFrame;       //make MyFrame able to access private members
+    bool IsBeingDragged();      //accessor for m_bIsBeingDragged
+
+    friend class wxMediaPlayerFrame;       //make wxMediaPlayerFrame able to access private members
     wxMediaCtrl* m_mediactrl;   //Our media control
+    class wxMediaPlayerListCtrl* m_playlist;  //Our playlist
     wxSlider* m_slider;         //The slider below our media control
     int m_nLoops;               //Number of times media has looped
     bool m_bLoop;               //Whether we are looping or not
+    bool m_bIsBeingDragged;     //Whether the user is dragging the scroll bar
+    wxMediaPlayerFrame* m_parentFrame;  //Main wxFrame of our sample
+    wxButton* m_prevButton;     //Go to previous file button
+    wxButton* m_playButton;     //Play/pause file button
+    wxButton* m_stopButton;     //Stop playing file button
+    wxButton* m_nextButton;     //Next file button
+    wxGauge*  m_gauge;          //Gauge to keep in line with slider
 };
 
 // ----------------------------------------------------------------------------
-// MyTimer
+// wxMediaPlayerTimer
 // ----------------------------------------------------------------------------
 
-class MyTimer : public wxTimer
+class wxMediaPlayerTimer : public wxTimer
 {
 public:
     //Ctor
-    MyTimer(MyFrame* frame) {m_frame = frame;}
+    wxMediaPlayerTimer(wxMediaPlayerFrame* frame) {m_frame = frame;}
 
     //Called each time the timer's timeout expires
     void Notify();
 
-    MyFrame* m_frame;       //The MyFrame
+    wxMediaPlayerFrame* m_frame;       //The wxMediaPlayerFrame
 };
 
+// ----------------------------------------------------------------------------
+// wxMediaPlayerListCtrl
+// ----------------------------------------------------------------------------
+class wxMediaPlayerListCtrl : public wxListCtrl
+{
+public:
+    virtual ~wxMediaPlayerListCtrl ()
+    {
+        wxConfigBase* conf = wxConfigBase::Get();
+        conf->DeleteAll();
+        wxListItem item;
+        item.SetMask(wxLIST_MASK_DATA); 
+
+        for(int i = 0;; ++i)
+        {
+            item.SetId(i);
+            wxLog::EnableLogging(false); 
+            if(!this->GetItem(item))
+            {
+                wxLog::EnableLogging(true);
+                break;
+            }
+            wxLog::EnableLogging(true);
+            wxString s;
+            s << i;
+            conf->Write(s, *((wxString*) item.GetData()));
+            delete (wxString*) item.GetData();
+        }
+    }
+
+    void AddToPlayList(const wxString& szString)
+    {
+        wxListItem kNewItem;
+        kNewItem.SetAlign(wxLIST_FORMAT_LEFT);
+
+        int nID;
+
+        kNewItem.SetId(nID = this->GetItemCount());
+        kNewItem.SetMask(wxLIST_MASK_DATA);
+        kNewItem.SetData(new wxString(szString));
+
+        this->InsertItem(kNewItem);
+        this->SetItem(nID, 0, _T("*"));
+        this->SetItem(nID, 1, wxFileName(szString).GetName());
+
+        if (nID % 2)
+        {
+            kNewItem.SetBackgroundColour(wxColour(192,192,192));
+            this->SetItem(kNewItem);
+        }
+    }
+
+    void GetSelectedItem(wxListItem& listitem)
+    {
+        listitem.SetMask(wxLIST_MASK_TEXT |  wxLIST_MASK_DATA);
+        int nLast = -1, nLastSelected = -1;
+        while ((nLast = this->GetNextItem(nLast,
+                                         wxLIST_NEXT_ALL,
+                                         wxLIST_STATE_SELECTED)) != -1)
+        {
+            listitem.SetId(nLast);
+            this->GetItem(listitem);
+            if ((listitem.GetState() & wxLIST_STATE_FOCUSED) )
+                break;
+            nLastSelected = nLast;
+        }
+        if (nLast == -1 && nLastSelected == -1)
+            return;
+        listitem.SetId(nLastSelected == -1 ? nLast : nLastSelected);
+        this->GetItem(listitem);
+    }
+
+};
+
+// ----------------------------------------------------------------------------
+// wxPlayListDropTarget
+//
+//  Drop target for playlist (i.e. user drags a file from explorer unto 
+//  playlist it adds the file)
+// ----------------------------------------------------------------------------
+class wxPlayListDropTarget : public wxFileDropTarget
+{
+public:
+    wxPlayListDropTarget(wxMediaPlayerListCtrl& list) : m_list(list) {}
+    ~wxPlayListDropTarget(){}
+        virtual bool OnDropFiles(wxCoord WXUNUSED(x), wxCoord WXUNUSED(y),
+                         const wxArrayString& files)
+    {
+        for (size_t i = 0; i < files.GetCount(); ++i)
+        {
+            m_list.AddToPlayList(files[i]);
+        }
+        return true;
+    }
+    wxMediaPlayerListCtrl& m_list;
+};
+
 // ============================================================================
 //
 // Implementation
@@ -240,7 +397,7 @@
 
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
-// MyApp
+// wxMediaPlayerApp
 //
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
@@ -255,33 +412,63 @@
 // routine, such as main or WinMain().  Use IMPLEMENT_APP_NO_MAIN if you do
 // not desire this behavior.
 // ----------------------------------------------------------------------------
-IMPLEMENT_APP(MyApp)
+IMPLEMENT_APP(wxMediaPlayerApp)
 
-
 // ----------------------------------------------------------------------------
-// MyApp::OnInit
+// wxMediaPlayerApp::OnInit
 //
 // Where execution starts - akin to a main or WinMain.
 // 1) Create the frame and show it to the user
-// 2) return true specifying that we want execution to continue past OnInit
+// 2) Process filenames from the commandline
+// 3) return true specifying that we want execution to continue past OnInit
 // ----------------------------------------------------------------------------
-bool MyApp::OnInit()
+bool wxMediaPlayerApp::OnInit()
 {
-    MyFrame *frame = new MyFrame(_T("MediaPlayer wxWidgets Sample"));
+    wxMediaPlayerFrame *frame = new wxMediaPlayerFrame(_T("MediaPlayer wxWidgets Sample"));
     frame->Show(true);
 
+#if wxUSE_CMDLINE_PARSER
+    // 
+    //  What this does is get all the command line arguments
+    //  and treat each one as a file to put to the initial playlist
+    //
+    wxCmdLineEntryDesc cmdLineDesc[2];
+    cmdLineDesc[0].kind = wxCMD_LINE_PARAM;
+    cmdLineDesc[0].shortName = NULL;
+    cmdLineDesc[0].longName = NULL;
+    cmdLineDesc[0].description = wxT("input files");
+    cmdLineDesc[0].type = wxCMD_LINE_VAL_STRING;
+    cmdLineDesc[0].flags = wxCMD_LINE_PARAM_OPTIONAL | wxCMD_LINE_PARAM_MULTIPLE;
+
+    cmdLineDesc[1].kind = wxCMD_LINE_NONE;
+
+    //gets the passed media files from cmd line
+    wxCmdLineParser parser (cmdLineDesc, argc, argv);
+
+    // get filenames from the commandline
+    if (parser.Parse() == 0) 
+    {
+        for (size_t paramNr=0; paramNr < parser.GetParamCount(); ++paramNr) 
+        {
+            frame->AddToPlayList((parser.GetParam (paramNr)));
+        }
+        wxCommandEvent emptyevt;
+        frame->OnNext(emptyevt);
+    }
+#endif
+
     return true;
 }
 
 
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
-// MyFrame
+// wxMediaPlayerFrame
 //
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 // ----------------------------------------------------------------------------
-// MyFrame Constructor
+// wxMediaPlayerFrame Constructor
 //
 // 1) Create our menus
 // 2) Create our notebook control and add it to the frame
@@ -290,49 +477,62 @@
 // 5) Start our timer
 // ----------------------------------------------------------------------------
 
-MyFrame::MyFrame(const wxString& title)
-       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(400,400))
+wxMediaPlayerFrame::wxMediaPlayerFrame(const wxString& title)
+       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(600,600)), 
+       m_nLastFileId(0)
 {
     //
     //  Create Menus
     //
-    wxMenu *menuFile = new wxMenu;
-
+    wxMenu *fileMenu = new wxMenu;
+    wxMenu *controlsMenu = new wxMenu;
+    wxMenu *optionsMenu = new wxMenu;
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_ABOUT,
-                     _T("&About...\tF1"),
-                     _T("Show about dialog"));
+    wxMenu *debugMenu = new wxMenu;
 
-    menuFile->Append(wxID_OPENFILESAMEPAGE, _T("&Open File"),
+    fileMenu->Append(wxID_OPENFILESAMEPAGE, _T("&Open File\tCtrl-O"),
                         _T("Open a File in the current notebook page"));
-    menuFile->Append(wxID_OPENFILENEWPAGE, _T("&Open File in a new page"),
+    fileMenu->Append(wxID_OPENFILENEWPAGE, _T("&Open File in a new page"),
                         _T("Open a File in a new notebook page"));
 #if wxUSE_UNOFFICIALSTUFF
-    menuFile->Append(wxID_OPENURLSAMEPAGE, _T("&Open URL"),
+    fileMenu->Append(wxID_OPENURLSAMEPAGE, _T("&Open URL"),
                         _T("Open a URL in the current notebook page"));
-    menuFile->Append(wxID_OPENURLNEWPAGE, _T("&Open URL in a new page"),
+    fileMenu->Append(wxID_OPENURLNEWPAGE, _T("&Open URL in a new page"),
                         _T("Open a URL in a new notebook page"));
 #endif
-    menuFile->AppendSeparator();
-    menuFile->Append(wxID_CLOSECURRENTPAGE, _T("&Close Current Page"),
+    fileMenu->AppendSeparator();
+    fileMenu->Append(wxID_CLOSECURRENTPAGE, _T("&Close Current Page\tCtrl-C"),
                         _T("Close current notebook page"));
-    menuFile->AppendSeparator();
-    menuFile->Append(wxID_PLAY, _T("&Play"), _T("Resume playback"));
-    menuFile->Append(wxID_PAUSE, _T("P&ause"), _T("Pause playback"));
-    menuFile->Append(wxID_STOP, _T("&Stop"), _T("Stop playback"));
-    menuFile->AppendSeparator();
-    menuFile->AppendCheckItem(wxID_LOOP,
-                              _T("&Loop"),
-                              _T("Loop Selected Media"));
-    menuFile->AppendSeparator();
-    menuFile->Append(wxID_EXIT,
+    fileMenu->AppendSeparator();
+    fileMenu->Append(wxID_EXIT,
                      _T("E&xit\tAlt-X"),
                      _T("Quit this program"));
 
+    controlsMenu->Append(wxID_PLAY, _T("&Play/Pause\tCtrl-P"), _T("Resume/Pause playback"));
+    controlsMenu->Append(wxID_STOP, _T("&Stop\tCtrl-S"), _T("Stop playback"));
+    controlsMenu->AppendSeparator();
+    controlsMenu->Append(wxID_PREV, _T("&Previous\tCtrl-B"), _T("Go to previous track"));
+    controlsMenu->Append(wxID_NEXT, _T("&Next\tCtrl-N"), _T("Skip to next track"));
+
+    optionsMenu->AppendCheckItem(wxID_LOOP,
+                              _T("&Loop\tCtrl-L"),
+                              _T("Loop Selected Media"));
+
+    debugMenu->Append(wxID_SELECTBACKEND,
+                     _T("&Select Backend...\tCtrl-D"),
+                     _T("Select a backend manually"));
+
+    helpMenu->Append(wxID_ABOUT,
+                     _T("&About...\tF1"),
+                     _T("Show about dialog"));
+
+
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(fileMenu, _T("&File"));
+    menuBar->Append(controlsMenu, _T("&Controls"));
+    menuBar->Append(optionsMenu, _T("&Options"));
+    menuBar->Append(debugMenu, _T("&Debug"));
     menuBar->Append(helpMenu, _T("&Help"));
-
     SetMenuBar(menuBar);
 
     //
@@ -357,14 +557,14 @@
     //
     //  Message Maps are implemented by putting
     //  DECLARE_MESSAGE_MAP in your wxEvtHandler-derived
-    //  class you want to use for events, such as MyFrame.
+    //  class you want to use for events, such as wxMediaPlayerFrame.
     //
     //  Then after your class declaration you put
-    //  BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    //  BEGIN_EVENT_TABLE(wxMediaPlayerFrame, wxFrame)
     //  EVT_XXX(XXX)...
     //  END_EVENT_TABLE()
     //
-    //  Where MyFrame is the class with the DECLARE_MESSAGE_MAP
+    //  Where wxMediaPlayerFrame is the class with the DECLARE_MESSAGE_MAP
     //  in it.  EVT_XXX(XXX) are each of your handlers, such
     //  as EVT_MENU for menu events and the XXX inside
     //  is the parameters to the event macro - in the case
@@ -395,12 +595,12 @@
     //  type, then to a wxEventFunction, then to a
     //  wxObjectEventFunction - I.E.
     //  (wxObjectEventFunction)(wxEventFunction)
-    //  (wxCommandEventFunction) &MyFrame::MyHandler
+    //  (wxCommandEventFunction) &wxMediaPlayerFrame::MyHandler
     //
     //  Or, you can use the new (2.5.5+) event handler
     //  conversion macros - for instance the above could
     //  be done as 
-    //  wxCommandEventHandler(MyFrame::MyHandler)
+    //  wxCommandEventHandler(wxMediaPlayerFrame::MyHandler)
     //  pretty simple, eh?
     //
     //  The fourth is an optional userdata param -
@@ -422,73 +622,100 @@
     // Menu events
     //
     this->Connect(wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnQuit));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnQuit));
 
     this->Connect(wxID_ABOUT, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnAbout));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnAbout));
 
     this->Connect(wxID_LOOP, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnLoop));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnLoop));
 
     this->Connect(wxID_OPENFILENEWPAGE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnOpenFileNewPage));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnOpenFileNewPage));
 
     this->Connect(wxID_OPENFILESAMEPAGE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnOpenFileSamePage));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnOpenFileSamePage));
 
     this->Connect(wxID_OPENURLNEWPAGE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnOpenURLNewPage));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnOpenURLNewPage));
 
     this->Connect(wxID_OPENURLSAMEPAGE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnOpenURLSamePage));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnOpenURLSamePage));
 
     this->Connect(wxID_CLOSECURRENTPAGE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnCloseCurrentPage));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnCloseCurrentPage));
 
     this->Connect(wxID_PLAY, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnPlay));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnPlay));
 
-    this->Connect(wxID_PAUSE, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnPause));
-
     this->Connect(wxID_STOP, wxEVT_COMMAND_MENU_SELECTED,
-                  wxCommandEventHandler(MyFrame::OnStop));
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnStop));
+
+    this->Connect(wxID_NEXT, wxEVT_COMMAND_MENU_SELECTED,
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnNext));
 
+    this->Connect(wxID_PREV, wxEVT_COMMAND_MENU_SELECTED,
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnPrev));
+
+    this->Connect(wxID_SELECTBACKEND, wxEVT_COMMAND_MENU_SELECTED,
+                  wxCommandEventHandler(wxMediaPlayerFrame::OnSelectBackend));
+
     //
     // Notebook events
     //
     this->Connect(wxID_NOTEBOOK, wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED,
-                  wxNotebookEventHandler(MyFrame::OnPageChange));
+                  wxNotebookEventHandler(wxMediaPlayerFrame::OnPageChange));
 
     //
+    // Key events
+    //
+    wxTheApp->Connect(wxID_ANY, wxEVT_KEY_DOWN,
+                  wxKeyEventHandler(wxMediaPlayerFrame::OnKeyDown),
+                  (wxObject*)0, this);
+
+    //
     // End of Events
     //
 
+    m_notebook->AddPage(new wxMediaPlayerNotebookPage(this, m_notebook), wxT(""), true);
+
     //
     //  Create a timer to update our status bar
     //
-    m_timer = new MyTimer(this);
+    m_timer = new wxMediaPlayerTimer(this);
     m_timer->Start(100);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame Destructor
+// wxMediaPlayerFrame Destructor
 //
 // 1) Deletes child objects implicitly
 // 2) Delete our timer explicitly
 // ----------------------------------------------------------------------------
-MyFrame::~MyFrame()
+wxMediaPlayerFrame::~wxMediaPlayerFrame()
 {
     delete m_timer;
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::ResetStatus
+// wxMediaPlayerFrame::AddToPlayList
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::AddToPlayList(const wxString& szString)
+{   
+    wxMediaPlayerNotebookPage* currentpage = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage());
+    
+    currentpage->m_playlist->AddToPlayList(szString);    
+}
+
+    
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::ResetStatus
 //
 // Here we just make a simple status string with some useful info about
 // the media that we won't change later - such as the length of the media.
 //
-// We then append some other info that changes in MyTimer::Notify, then
+// We then append some other info that changes in wxMediaPlayerTimer::Notify, then
 // set the status bar to this text.
 //
 // In real applications, you'd want to find a better way to do this,
@@ -499,7 +726,7 @@
 //
 // We also reset our loop counter here.
 // ----------------------------------------------------------------------------
-void MyFrame::ResetStatus()
+void wxMediaPlayerFrame::ResetStatus()
 {
     wxMediaCtrl* currentMediaCtrl = GetCurrentMediaCtrl();
 
@@ -513,48 +740,55 @@
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::GetCurrentMediaCtrl
+// wxMediaPlayerFrame::GetCurrentMediaCtrl
 //
 // Obtains the media control of the current page, or NULL if there are no
 // pages open
 // ----------------------------------------------------------------------------
-wxMediaCtrl* MyFrame::GetCurrentMediaCtrl()
+wxMediaCtrl* wxMediaPlayerFrame::GetCurrentMediaCtrl()
 {
-    wxASSERT(m_notebook->GetCurrentPage() != NULL);
-    return ((MyNotebookPage*)m_notebook->GetCurrentPage())->m_mediactrl;
+    return ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_mediactrl;
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::GetCurrentSlider
+// wxMediaPlayerFrame::GetCurrentSlider
 //
-// Obtains the slider of the current page, or NULL if there are no
-// pages open
+// Obtains the slider of the current page
 // ----------------------------------------------------------------------------
-wxSlider*    MyFrame::GetCurrentSlider()
+wxSlider*    wxMediaPlayerFrame::GetCurrentSlider()
 {
-    wxASSERT(m_notebook->GetCurrentPage() != NULL);
-    return ((MyNotebookPage*)m_notebook->GetCurrentPage())->m_slider;
+    return ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_slider;
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnQuit
+// wxMediaPlayerFrame::GetCurrentGauge
 //
+// Obtains the gauge of the current page
+// ----------------------------------------------------------------------------
+wxGauge*    wxMediaPlayerFrame::GetCurrentGauge()
+{
+    return ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_gauge;
+}
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::OnQuit
+//
 // Called from file->quit.
 // Closes this application.
 // ----------------------------------------------------------------------------
-void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
     // true is to force the frame to close
     Close(true);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnAbout
+// wxMediaPlayerFrame::OnAbout
 //
 // Called from help->about.
 // Gets some info about this application.
 // ----------------------------------------------------------------------------
-void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
     msg.Printf( _T("This is a test of wxMediaCtrl.\n")
@@ -564,12 +798,12 @@
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnLoop
+// wxMediaPlayerFrame::OnLoop
 //
 // Called from file->loop.
 // Changes the state of whether we want to loop or not.
 // ----------------------------------------------------------------------------
-void MyFrame::OnLoop(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnLoop(wxCommandEvent& WXUNUSED(event))
 {
     if(!m_notebook->GetCurrentPage())
     {
@@ -577,130 +811,229 @@
         return;
     }
 
-    ((MyNotebookPage*)m_notebook->GetCurrentPage())->m_bLoop =
-            !((MyNotebookPage*)m_notebook->GetCurrentPage())->m_bLoop;
+    ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_bLoop =
+            !((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_bLoop;
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnOpenFileSamePage
+// wxMediaPlayerFrame::OnOpenFileSamePage
 //
 // Called from file->openfile.
 // Opens and plays a media file in the current notebook page
 // ----------------------------------------------------------------------------
-void MyFrame::OnOpenFileSamePage(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnOpenFileSamePage(wxCommandEvent& WXUNUSED(event))
 {
     OpenFile(false);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnOpenFileNewPage
+// wxMediaPlayerFrame::OnOpenFileNewPage
 //
 // Called from file->openfileinnewpage.
 // Opens and plays a media file in a new notebook page
 // ----------------------------------------------------------------------------
-void MyFrame::OnOpenFileNewPage(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnOpenFileNewPage(wxCommandEvent& WXUNUSED(event))
 {
     OpenFile(true);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OpenFile
-//
-// Code to actually open the media file
+// wxMediaPlayerFrame::OpenFile
 //
-// 1) Create file dialog and ask the user for input file
-// 2) If the user didn't want anything, break out
-// 3) Create a new page if the user wanted one or there isn't a current page
-// 4) Load the media
-// 5) Play the media
-// 6) Reset the text on the status bar
-// 7) Set the slider of the current page to accurately reflect media length
+// Opens a file dialog asking the user for a filename, then
+// calls DoOpenFile which will add the file to the playlist and play it
 // ----------------------------------------------------------------------------
-void MyFrame::OpenFile(bool bNewPage)
+void wxMediaPlayerFrame::OpenFile(bool bNewPage)
 {
     wxFileDialog fd(this);
 
     if(fd.ShowModal() == wxID_OK)
     {
-        if(bNewPage || !m_notebook->GetCurrentPage())
-            m_notebook->AddPage(new MyNotebookPage(m_notebook), fd.GetPath(), true);
-        else //don't forget to update notebook page title
-            m_notebook->SetPageText(m_notebook->GetSelection(), fd.GetPath());
+        DoOpenFile(fd.GetPath(), bNewPage);
+    }
+}
 
-        if( !GetCurrentMediaCtrl()->Load(fd.GetPath()) )
-            wxMessageBox(wxT("Couldn't load file!"));
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::DoOpenFile
+//
+// Adds the file to our playlist, selects it in the playlist,
+// and then calls DoPlayFile to play it
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::DoOpenFile(const wxString& path, bool bNewPage)
+{
+    if(bNewPage)
+    {
+        m_notebook->AddPage(
+            new wxMediaPlayerNotebookPage(this, m_notebook), 
+            path, 
+            true);
+    }
+
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    m_playlist->SetItemState(m_nLastFileId, 0, wxLIST_STATE_SELECTED);
+
+    wxListItem newlistitem;
+    newlistitem.SetAlign(wxLIST_FORMAT_LEFT);
+
+    int nID;
+
+    newlistitem.SetId(nID = m_playlist->GetItemCount());
+    newlistitem.SetMask(wxLIST_MASK_DATA | wxLIST_MASK_STATE);
+    newlistitem.SetState(wxLIST_STATE_SELECTED);
+    newlistitem.SetData(new wxString(path));
+
+    m_playlist->InsertItem(newlistitem);
+    m_playlist->SetItem(nID, 0, _T("*"));
+    m_playlist->SetItem(nID, 1, wxFileName(path).GetName());
+    
+    if (nID % 2)
+    {
+        newlistitem.SetBackgroundColour(wxColour(192,192,192));
+        m_playlist->SetItem(newlistitem);
+    }
+
+    DoPlayFile(path);
+     //        m_playlist->Focus(nID);
+}
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::DoPlayFile
+//
+// Pauses the file if its the currently playing file,
+// otherwise it plays the file
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::DoPlayFile(const wxString& path)
+{
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
 
+    wxListItem listitem;
+    m_playlist->GetSelectedItem(listitem);
+
+    if(listitem.GetData() != NULL && m_szFile.compare(path) == 0)
+    {
+        if(GetCurrentMediaCtrl()->GetState() == wxMEDIASTATE_PLAYING)
+        {
+            if( !GetCurrentMediaCtrl()->Pause() )
+                wxMessageBox(wxT("Couldn't pause movie!"));
+            else
+                m_playlist->SetItem(listitem.GetId(), 0, _T("||"));
+        }
+        else
+        {
+            if( !GetCurrentMediaCtrl()->Play() )
+                wxMessageBox(wxT("Couldn't pause movie!"));
+            else
+                m_playlist->SetItem(listitem.GetId(), 0, _T(">"));
+        }
+    }
+    else
+    {
+        m_notebook->SetPageText(m_notebook->GetSelection(), wxFileName(path).GetName());
+
+    #if wxUSE_UNOFFICIALSTUFF
+        wxURI uripath(path);
+        if( uripath.IsReference() )
+        {
+    #endif
+            if( !GetCurrentMediaCtrl()->Load(path) )
+                wxMessageBox(wxT("Couldn't load file!"));
+    #if wxUSE_UNOFFICIALSTUFF
+        }
+        else
+        {
+            if( !GetCurrentMediaCtrl()->Load(uripath) )
+                wxMessageBox(wxT("Couldn't load file!"));
+        }
+    #endif
+
+        m_playlist->SetItem(m_nLastFileId, 0, _T("*"));
+        m_playlist->SetItem(listitem.GetId(), 1, wxFileName(path).GetName());
+        m_playlist->SetItem(listitem.GetId(), 2, wxString::Format(wxT("%u"), 
+                            (unsigned) GetCurrentMediaCtrl()->Length() / 1000) );
+
         if( !GetCurrentMediaCtrl()->Play() )
+        {
             wxMessageBox(wxT("Couldn't play movie!"));
+            m_playlist->SetItem(listitem.GetId(), 0, _T("E"));
+        }
+        else
+        {
+            m_playlist->SetItem(listitem.GetId(), 0, _T(">"));
+        }
 
+        m_nLastFileId = listitem.GetId();
+        m_szFile = path;
+
         ResetStatus();
 
         GetCurrentSlider()->SetRange(0,
                         (int)(GetCurrentMediaCtrl()->Length() / 1000));
+        GetCurrentGauge()->SetRange((int)(GetCurrentMediaCtrl()->Length() / 1000));
+    }
+}
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::OnSelectBackend
+//
+// Little debugging routine - enter the class name of a backend and it
+// will use that instead of letting wxMediaCtrl search the wxMediaBackend
+// RTTI class list.
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::OnSelectBackend(wxCommandEvent& WXUNUSED(evt))
+{
+    int sel = m_notebook->GetSelection();
+
+    if (sel != wxNOT_FOUND)
+    {
+        m_notebook->DeletePage(sel);
     }
+
+    m_notebook->AddPage(new wxMediaPlayerNotebookPage(this, m_notebook, 
+                                wxGetTextFromUser(wxT("Enter backend to use"))
+                                                     ), wxT(""), true);
+    DoOpenFile(m_szFile, false);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnOpenURLSamePage
+// wxMediaPlayerFrame::OnOpenURLSamePage
 //
 // Called from file->openurl.
 // Opens and plays a media file from a URL in the current notebook page
 // ----------------------------------------------------------------------------
-void MyFrame::OnOpenURLSamePage(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnOpenURLSamePage(wxCommandEvent& WXUNUSED(event))
 {
     OpenURL(false);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnOpenURLNewPage
+// wxMediaPlayerFrame::OnOpenURLNewPage
 //
 // Called from file->openurlinnewpage.
 // Opens and plays a media file from a URL in a new notebook page
 // ----------------------------------------------------------------------------
-void MyFrame::OnOpenURLNewPage(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnOpenURLNewPage(wxCommandEvent& WXUNUSED(event))
 {
     OpenURL(true);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OpenURL
-//
-// Code to actually open the media file from a URL
+// wxMediaPlayerFrame::OpenURL
 //
-// 1) Create text input dialog and ask the user for an input URL
-// 2) If the user didn't want anything, break out
-// 3) Create a new page if the user wanted one or there isn't a current page
-// 4) Load the media
-// 5) Play the media
-// 6) Reset the text on the status bar
-// 7) Set the slider of the current page to accurately reflect media length
+// Just calls DoOpenFile with the url path - which calls DoPlayFile
+// which handles the real dirty work
 // ----------------------------------------------------------------------------
-void MyFrame::OpenURL(bool bNewPage)
+void wxMediaPlayerFrame::OpenURL(bool bNewPage)
 {
-   wxString theURL = wxGetTextFromUser(wxT("Enter the URL that has the movie to play"));
-
-    if(!theURL.empty())
-    {
-        if(bNewPage || !m_notebook->GetCurrentPage())
-            m_notebook->AddPage(new MyNotebookPage(m_notebook), theURL, true);
-        else //don't forget to update notebook page title
-            m_notebook->SetPageText(m_notebook->GetSelection(), theURL);
-
-        if( !GetCurrentMediaCtrl()->Load(wxURI(theURL)) )
-            wxMessageBox(wxT("Couldn't load URL!"));
-
-        if( !GetCurrentMediaCtrl()->Play() )
-            wxMessageBox(wxT("Couldn't play movie!"));
-
-        ResetStatus();
-
-        GetCurrentSlider()->SetRange(0,
-                        (int)(GetCurrentMediaCtrl()->Length() / 1000));
-    }
+   DoOpenFile(
+        wxGetTextFromUser(wxT("Enter the URL that has the movie to play")), 
+        bNewPage);
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnCloseCurrentPage
+// wxMediaPlayerFrame::OnCloseCurrentPage
 //
 // Called when the user wants to close the current notebook page
 //
@@ -708,54 +1041,93 @@
 // 2) If there is no current page, break out
 // 3) Delete the current page
 // ----------------------------------------------------------------------------
-void MyFrame::OnCloseCurrentPage(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnCloseCurrentPage(wxCommandEvent& WXUNUSED(event))
 {
-    int sel = m_notebook->GetSelection();
+    if( m_notebook->GetPageCount() > 1 )
+    {
+        int sel = m_notebook->GetSelection();
 
-    if (sel != wxNOT_FOUND)
+        if (sel != wxNOT_FOUND)
+        {
+            m_notebook->DeletePage(sel);
+        }
+    }
+    else
     {
-        m_notebook->DeletePage(sel);
+        wxMessageBox(wxT("Cannot close main page"));
     }
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnPlay
+// wxMediaPlayerFrame::OnPlay
 //
 // Called from file->play.
 // Resumes the media if it is paused or stopped.
 // ----------------------------------------------------------------------------
-void MyFrame::OnPlay(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnPlay(wxCommandEvent& WXUNUSED(event))
 {
-    if(!m_notebook->GetCurrentPage())
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    wxListItem listitem;
+    m_playlist->GetSelectedItem(listitem);
+    if (listitem.GetData() == NULL)
     {
-        wxMessageBox(wxT("No files are currently open!"));
-        return;
+        int nLast = -1;
+        if ((nLast = m_playlist->GetNextItem(nLast,
+                                         wxLIST_NEXT_ALL,
+                                         wxLIST_STATE_DONTCARE)) == -1)
+        {
+            //no items in list
+            wxMessageBox(_T("No items in playlist!"));
+            return;
+        }
+        wxListItem listitem;
+        listitem.SetId(nLast);
+        m_playlist->GetItem(listitem);
+        listitem.SetMask(listitem.GetMask() | wxLIST_MASK_STATE);
+        listitem.SetState(listitem.GetState() | wxLIST_STATE_SELECTED);
+        m_playlist->SetItem(listitem);
+        wxListEvent event;
+        OnChangeSong(event);
     }
-
-    if( !GetCurrentMediaCtrl()->Play() )
-        wxMessageBox(wxT("Couldn't play movie!"));
+    else
+    {
+        wxListEvent event;
+        OnChangeSong(event);
+    }
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnPause
+// wxMediaPlayerFrame::OnKeyDown
 //
-// Called from file->pause.
-// Pauses the media in-place.
+// Deletes all selected files from the playlist if the backspace key is pressed
 // ----------------------------------------------------------------------------
-void MyFrame::OnPause(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnKeyDown(wxKeyEvent& event)
 {
-    if(!m_notebook->GetCurrentPage())
-    {
-        wxMessageBox(wxT("No files are currently open!"));
-        return;
-    }
+   if(event.GetKeyCode() == WXK_BACK/*DELETE*/)
+   {
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+       //delete all selected items
+       while(true)
+       {
+           wxInt32 nSelectedItem = m_playlist->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+           if (nSelectedItem == -1)
+               break;
+
+           wxListItem listitem;
+           listitem.SetId(nSelectedItem);
+           m_playlist->GetItem(listitem);
+           delete (wxString*) listitem.GetData();
 
-    if( !GetCurrentMediaCtrl()->Pause() )
-        wxMessageBox(wxT("Couldn't pause movie!"));
+           m_playlist->DeleteItem(nSelectedItem);
+       }
+   }
 }
 
 // ----------------------------------------------------------------------------
-// MyFrame::OnStop
+// wxMediaPlayerFrame::OnStop
 //
 // Called from file->stop.
 // Where it stops depends on whether you can seek in the
@@ -763,8 +1135,15 @@
 // otherwise it will appear to be at the end - but it will start over again
 // when Play() is called
 // ----------------------------------------------------------------------------
-void MyFrame::OnStop(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnStop(wxCommandEvent& WXUNUSED(evt))
 {
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    wxListItem listitem;
+    m_playlist->GetSelectedItem(listitem);
+    m_playlist->SetItem(listitem.GetId(), 0, _T("[]"));
+
     if(!m_notebook->GetCurrentPage())
     {
         wxMessageBox(wxT("No files are currently open!"));
@@ -775,72 +1154,204 @@
         wxMessageBox(wxT("Couldn't stop movie!"));
 }
 
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::OnChangeSong
+//
+// Routine that plays the currently selected file in the playlist.
+// Called when the user actives the song from the playlist,
+// and from other various places in the sample
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::OnChangeSong(wxListEvent& WXUNUSED(evt))
+{
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    wxListItem listitem;
+    m_playlist->GetSelectedItem(listitem);
+    DoPlayFile((*((wxString*) listitem.GetData())));
+}
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::OnPrev
+//
+// Tedious wxListCtrl stuff.  Goes to prevous song in list, or if at the 
+// beginning goes to the last in the list.
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::OnPrev(wxCommandEvent& WXUNUSED(event))
+{
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    if (m_playlist->GetItemCount() == 0)
+        return;
+
+    wxInt32 nLastSelectedItem = -1;
+    while(true)
+    {
+        wxInt32 nSelectedItem = m_playlist->GetNextItem(nLastSelectedItem,
+                                                     wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+        if (nSelectedItem == -1)
+            break;
+        nLastSelectedItem = nSelectedItem;
+        m_playlist->SetItemState(nSelectedItem, 0, wxLIST_STATE_SELECTED);
+    }
+
+    if (nLastSelectedItem <= 0)
+        nLastSelectedItem = m_playlist->GetItemCount() - 1;
+    else
+        nLastSelectedItem -= 1;
+
+    wxListItem listitem;
+    listitem.SetId(nLastSelectedItem);
+    m_playlist->GetItem(listitem);
+    listitem.SetMask(listitem.GetMask() | wxLIST_MASK_STATE);
+    listitem.SetState(listitem.GetState() | wxLIST_STATE_SELECTED);
+    m_playlist->SetItem(listitem);
+
+    wxListEvent emptyEvent;
+    OnChangeSong(emptyEvent);
+}
+
 // ----------------------------------------------------------------------------
-// MyFrame::OnCloseCurrentPage
+// wxMediaPlayerFrame::OnNext
 //
+// Tedious wxListCtrl stuff.  Goes to next song in list, or if at the 
+// end goes to the first in the list.
+// ----------------------------------------------------------------------------
+void wxMediaPlayerFrame::OnNext(wxCommandEvent& WXUNUSED(event))
+{
+    wxMediaPlayerListCtrl* m_playlist = 
+        ((wxMediaPlayerNotebookPage*)m_notebook->GetCurrentPage())->m_playlist;
+
+    if (m_playlist->GetItemCount() == 0)
+        return;
+
+    wxInt32 nLastSelectedItem = -1;
+    while(true)
+    {
+        wxInt32 nSelectedItem = m_playlist->GetNextItem(nLastSelectedItem,
+                                                     wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+        if (nSelectedItem == -1)
+            break;
+        nLastSelectedItem = nSelectedItem;
+        m_playlist->SetItemState(nSelectedItem, 0, wxLIST_STATE_SELECTED);
+    }
+
+    if (nLastSelectedItem == -1)
+        nLastSelectedItem = 0;
+    else
+    {
+        if (nLastSelectedItem == m_playlist->GetItemCount() - 1)
+            nLastSelectedItem = 0;
+        else
+            nLastSelectedItem += 1;
+    }
+
+    wxListItem listitem;
+    listitem.SetId(nLastSelectedItem);
+    m_playlist->GetItem(listitem);
+    listitem.SetMask(listitem.GetMask() | wxLIST_MASK_STATE);
+    listitem.SetState(listitem.GetState() | wxLIST_STATE_SELECTED);
+    m_playlist->SetItem(listitem);
+
+    wxListEvent emptyEvent;
+    OnChangeSong(emptyEvent);
+}
+
+
+
+// ----------------------------------------------------------------------------
+// wxMediaPlayerFrame::OnCloseCurrentPage
+//
 // Called when the user wants to closes the current notebook page
 // ----------------------------------------------------------------------------
 
-void MyFrame::OnPageChange(wxNotebookEvent& WXUNUSED(event))
+void wxMediaPlayerFrame::OnPageChange(wxNotebookEvent& WXUNUSED(event))
 {
     ResetStatus();
 }
 
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
-// MyTimer
+// wxMediaPlayerTimer
 //
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 // ----------------------------------------------------------------------------
-// MyTimer::Notify
+// wxMediaPlayerTimer::Notify
 //
 // 1) Update our slider with the position were are in in the media
-// 2) Update our status bar with the base text from MyFrame::ResetStatus,
+// 2) Update our status bar with the base text from wxMediaPlayerFrame::ResetStatus,
 //    append some non-static (changing) info to it, then set the
 //    status bar text to that result
 // ----------------------------------------------------------------------------
-void MyTimer::Notify()
+void wxMediaPlayerTimer::Notify()
 {
-    if (!m_frame->m_notebook->GetCurrentPage()) return;
-        wxMediaCtrl* m_mediactrl = ((MyNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_mediactrl;
-        wxSlider* m_slider = ((MyNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_slider;
-        if (!m_mediactrl) return;
+    // get some control pointers from current notebook page
+    wxMediaCtrl* mediactrl = 
+        ((wxMediaPlayerNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_mediactrl;
+    wxSlider* slider = 
+        ((wxMediaPlayerNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_slider;
+    wxGauge* gauge = 
+        ((wxMediaPlayerNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_gauge;
 
-    long lPosition = (long)( m_mediactrl->Tell() / 1000 );
-    m_slider->SetValue(lPosition);
+    // if the slider is being dragged then update it with the song position
+    if(((wxMediaPlayerNotebookPage*)m_frame->m_notebook->GetCurrentPage())->IsBeingDragged() == false)
+    {
+        long lPosition = (long)( mediactrl->Tell() / 1000 );
+        slider->SetValue(lPosition);
+    }
 
+    // update guage with value from slider
+    gauge->SetValue(slider->GetValue());
 #if wxUSE_STATUSBAR
     m_frame->SetStatusText(wxString::Format(
                      _T("%s Pos:%u State:%s Loops:%i"),
                      m_frame->m_basestatus.c_str(),
-                     (unsigned int)lPosition,
-                     wxGetMediaStateText(m_mediactrl->GetState()),
-                    ((MyNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_nLoops
+                     slider->GetValue(),
+                     wxGetMediaStateText(mediactrl->GetState()),
+                    ((wxMediaPlayerNotebookPage*)m_frame->m_notebook->GetCurrentPage())->m_nLoops
 
                                             )
                            );
 #endif
-
 }
 
 
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
-// MyNotebookPage
+// wxMediaPlayerNotebookPage
 //
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 // ----------------------------------------------------------------------------
-// MyNotebookPage Constructor
+// wxMediaPlayerNotebookPage Constructor
 //
 // Creates a media control and slider and adds it to this panel,
 // along with some sizers for positioning
 // ----------------------------------------------------------------------------
 
-MyNotebookPage::MyNotebookPage(wxNotebook* theBook) :
-    wxPanel(theBook, wxID_ANY), m_nLoops(0), m_bLoop(false)
-{
+wxMediaPlayerNotebookPage::wxMediaPlayerNotebookPage(wxMediaPlayerFrame* parentFrame,
+                                                      wxNotebook* theBook, 
+                                                const wxString& szBackend) :
+    wxPanel(theBook, wxID_ANY), m_bIsBeingDragged(false),
+        m_nLoops(0), m_bLoop(false), m_parentFrame(parentFrame)
+{               
+
+    //
+    //  Layout
+    //
+    //  [wxMediaCtrl]
+    //  [playlist]
+    //  [5 control buttons]
+    //  [slider]
+    //  [gauge]
+    //
+    wxColour bgColor(0,0x40, 0x80);
+    SetBackgroundColour(bgColor);
+    
+
     //
     //  Create and attach the sizer
     //
@@ -856,13 +1367,83 @@
     m_mediactrl = new wxMediaCtrl();
 
     //  Make sure creation was successful
-    bool bOK = m_mediactrl->Create(this, wxID_MEDIACTRL);
+    bool bOK = m_mediactrl->Create(this, wxID_MEDIACTRL, wxEmptyString,
+                                    wxDefaultPosition, wxDefaultSize, 0,
+                                   szBackend);
     wxASSERT_MSG(bOK, wxT("Could not create media control!"));
     wxUnusedVar(bOK);
 
     sizer->Add(m_mediactrl, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxEXPAND, 5);
 
     //
+    //  Create the playlist/listctrl
+    //
+    m_playlist = new wxMediaPlayerListCtrl();
+    m_playlist->Create(this, wxID_LISTCTRL, wxDefaultPosition, 
+                    wxDefaultSize,
+                    wxLC_REPORT //wxLC_LIST
+                    | wxSUNKEN_BORDER);
+
+    //  Set the background of our listctrl to white
+    m_playlist->SetBackgroundColour(wxColour(255,255,255));
+
+    //  The layout of the headers of the listctrl are like
+    //  |   | File               |  Length
+    //
+    //  Where Column one is a character representing the state the file is in:
+    //  * - not the current file
+    //  E - Error has occured 
+    //  > - Currently Playing
+    //  [] - Stopped
+    //  || - Paused
+    //
+    //  Column two is the name of the file
+    //
+    //  Column three is the length in seconds of the file
+    m_playlist->InsertColumn(0,_(""), wxLIST_FORMAT_CENTER, 20);
+    m_playlist->InsertColumn(1,_("File"), wxLIST_FORMAT_LEFT, /*wxLIST_AUTOSIZE_USEHEADER*/305);
+    m_playlist->InsertColumn(2,_("Length"), wxLIST_FORMAT_CENTER, 75);
+
+    m_playlist->SetDropTarget(new wxPlayListDropTarget(*m_playlist));
+    sizer->Add(m_playlist, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxEXPAND, 5);
+
+    wxConfigBase* conf = wxConfigBase::Get(); 
+    wxString key, outstring; 
+    for(int i = 0; ; ++i) 
+    { 
+        key.clear(); 
+        key << i; 
+        if(!conf->Read(key, &outstring)) 
+            break; 
+        m_playlist->AddToPlayList(outstring); 
+    } 
+
+    //
+    //  Create the control buttons  
+    //  TODO/FIXME/HACK:  This part about sizers is really a nice hack
+    //                    and probably isn't proper
+    //
+    wxBoxSizer* horsizer1 = new wxBoxSizer(wxHORIZONTAL);
+    wxBoxSizer* vertsizer = new wxBoxSizer(wxHORIZONTAL);
+
+    m_prevButton = new wxButton();
+    m_playButton = new wxButton();
+    m_stopButton = new wxButton();
+    m_nextButton = new wxButton();
+
+    m_prevButton->Create(this, wxID_BUTTONPREV, _T("|<"));
+    m_playButton->Create(this, wxID_BUTTONPLAY, _T(">"));
+    m_stopButton->Create(this, wxID_BUTTONSTOP, _T("[]"));
+    m_nextButton->Create(this, wxID_BUTTONNEXT, _T(">|"));
+    vertsizer->Add(m_prevButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+    vertsizer->Add(m_playButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+    vertsizer->Add(m_stopButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+    vertsizer->Add(m_nextButton, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+    horsizer1->Add(vertsizer, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+    sizer->Add(horsizer1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
+
+
+    //
     //  Create our slider
     //
     m_slider = new wxSlider(this, wxID_SLIDER, 0, //init
@@ -870,50 +1451,116 @@
                             0, //end
                             wxDefaultPosition, wxDefaultSize,
                             wxSL_HORIZONTAL );
+    m_slider->SetBackgroundColour(bgColor);
     sizer->Add(m_slider, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxEXPAND , 5);
+    
+
+    //
+    //  Create the gauge
+    //
+    m_gauge = new wxGauge();
+    m_gauge->Create(this, wxID_GAUGE, 0, wxDefaultPosition, wxDefaultSize,
+                        wxGA_HORIZONTAL | wxGA_SMOOTH);
+    sizer->Add(m_gauge, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxEXPAND , 5);
+        
+    //
+    // ListCtrl events
+    //
+    this->Connect( wxID_LISTCTRL, wxEVT_COMMAND_LIST_ITEM_ACTIVATED, 
+        wxListEventHandler(wxMediaPlayerFrame::OnChangeSong),
+        (wxObject*)0, parentFrame);
 
     //
     // Slider events
     //
-    this->Connect(wxID_SLIDER, wxEVT_COMMAND_SLIDER_UPDATED,
-                  wxCommandEventHandler(MyNotebookPage::OnSeek));
+    this->Connect(wxID_SLIDER, wxEVT_SCROLL_THUMBTRACK,
+                  wxScrollEventHandler(wxMediaPlayerNotebookPage::OnBeginSeek));
+    this->Connect(wxID_SLIDER, wxEVT_SCROLL_THUMBRELEASE,
+                  wxScrollEventHandler(wxMediaPlayerNotebookPage::OnEndSeek));
 
     //
     // Media Control events
     //
     this->Connect(wxID_MEDIACTRL, wxEVT_MEDIA_FINISHED,
-                  wxMediaEventHandler(MyNotebookPage::OnMediaFinished));
+                  wxMediaEventHandler(wxMediaPlayerNotebookPage::OnMediaFinished));
+
+    //
+    // Button events
+    //
+    this->Connect( wxID_BUTTONPREV, wxEVT_COMMAND_BUTTON_CLICKED, 
+        wxCommandEventHandler(wxMediaPlayerFrame::OnPrev),
+        (wxObject*)0, parentFrame);
+    this->Connect( wxID_BUTTONPLAY, wxEVT_COMMAND_BUTTON_CLICKED, 
+        wxCommandEventHandler(wxMediaPlayerFrame::OnPlay),
+        (wxObject*)0, parentFrame);
+    this->Connect( wxID_BUTTONSTOP, wxEVT_COMMAND_BUTTON_CLICKED, 
+        wxCommandEventHandler(wxMediaPlayerFrame::OnStop),
+        (wxObject*)0, parentFrame);
+    this->Connect( wxID_BUTTONNEXT, wxEVT_COMMAND_BUTTON_CLICKED, 
+        wxCommandEventHandler(wxMediaPlayerFrame::OnNext),
+        (wxObject*)0, parentFrame);
 }
 
 // ----------------------------------------------------------------------------
-// MyNotebook::OnSeek
+// MyNotebook::OnBeginSeek
 //
+// Sets m_bIsBeingDragged to true to stop the timer from changing the position
+// of our slider
+// ----------------------------------------------------------------------------
+void wxMediaPlayerNotebookPage::OnBeginSeek(wxScrollEvent& WXUNUSED(event))
+{
+    m_bIsBeingDragged = true;
+}
+
+// ----------------------------------------------------------------------------
+// MyNotebook::OnEndSeek
+//
 // Called from file->seek.
 // Called when the user moves the slider -
 // seeks to a position within the media
+// then sets m_bIsBeingDragged to false to ok the timer to change the position
 // ----------------------------------------------------------------------------
-void MyNotebookPage::OnSeek(wxCommandEvent& WXUNUSED(event))
+void wxMediaPlayerNotebookPage::OnEndSeek(wxScrollEvent& WXUNUSED(event))
 {
     if( m_mediactrl->Seek(
             m_slider->GetValue() * 1000
                                    ) == wxInvalidOffset )
         wxMessageBox(wxT("Couldn't seek in movie!"));
+
+    m_bIsBeingDragged = false;
 }
 
 // ----------------------------------------------------------------------------
+// wxMediaPlayerNotebookPage::IsBeingDragged
+//
+// Returns true if the user is dragging the slider
+// ----------------------------------------------------------------------------
+bool wxMediaPlayerNotebookPage::IsBeingDragged()
+{   
+    return m_bIsBeingDragged;   
+}
+
+// ----------------------------------------------------------------------------
 // OnMediaFinished
 //
 // Called when the media stops playing.
 // Here we loop it if the user wants to (has been selected from file menu)
 // ----------------------------------------------------------------------------
-void MyNotebookPage::OnMediaFinished(wxMediaEvent& WXUNUSED(event))
+void wxMediaPlayerNotebookPage::OnMediaFinished(wxMediaEvent& WXUNUSED(event))
 {
     if(m_bLoop)
     {
         if ( !m_mediactrl->Play() )
+        {
             wxMessageBox(wxT("Couldn't loop movie!"));
+            m_playlist->SetItem(m_parentFrame->m_nLastFileId, 0, _T("E"));        
+        }
         else
             ++m_nLoops;
+    }
+    else
+    {
+        m_playlist->SetItem(m_parentFrame->m_nLastFileId, 0, _T("[]"));        
     }
 }
 

 	  	 

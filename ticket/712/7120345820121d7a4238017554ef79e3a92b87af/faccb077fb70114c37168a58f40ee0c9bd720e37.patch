diff -ru wxWidgets.orig/include/wx/msw/statbr95.h wxWidgets/include/wx/msw/statbr95.h
--- wxWidgets.orig/include/wx/msw/statbr95.h	2005-09-25 19:14:42.000000000 +1000
+++ wxWidgets/include/wx/msw/statbr95.h	2005-12-21 00:47:03.000000000 +1100
@@ -62,6 +62,7 @@
     void SetFieldsWidth();
 
     // override base class virtual
+    virtual wxSize DoGetBestSize() const;
     void DoMoveWindow(int x, int y, int width, int height);
 
     virtual WXLRESULT MSWWindowProc(WXUINT nMsg,
diff -ru wxWidgets.orig/src/msw/statbr95.cpp wxWidgets/src/msw/statbr95.cpp
--- wxWidgets.orig/src/msw/statbr95.cpp	2005-12-20 20:17:20.000000000 +1100
+++ wxWidgets/src/msw/statbr95.cpp	2005-12-21 00:59:11.000000000 +1100
@@ -272,6 +272,64 @@
     return true;
 }
 
+// no idea for a default width, just choose something
+#define DEFAULT_FIELD_WIDTH 25
+
+wxSize wxStatusBar95::DoGetBestSize() const
+{
+    int borders[3];
+    SendMessage(GetHwnd(), SB_GETBORDERS, 0, (LPARAM)borders);
+
+    // calculate width
+    int width;
+    if ( m_statusWidths )
+    {
+        width = 0;
+        for ( int i = 0; i < m_nFields; ++i )
+        {
+            if ( m_statusWidths[i] >= 0 )
+            {
+                width += m_statusWidths[i];
+            }
+            else
+            {
+                // variable width field
+                width += DEFAULT_FIELD_WIDTH;
+            }
+
+            // add the space between fields
+            width += borders[2];
+        }
+    }
+    else
+    {
+        if ( m_nFields )
+        {
+            width = 0;
+            for ( int i = 0; i < m_nFields; ++i )
+            {
+                width += DEFAULT_FIELD_WIDTH;
+                width += borders[2];
+            }
+        }
+        else
+        {
+            // this is a complete guess
+            width = 50;
+        }
+    }
+
+    // calculate height
+    int height;
+    wxGetCharSize(GetHWND(), NULL, &height, GetFont());
+    height = EDIT_HEIGHT_FROM_CHAR_HEIGHT(height);
+    height += borders[1];
+
+    wxSize best(width, height);
+    CacheBestSize(best);
+    return best;
+}
+
 #ifndef SWP_NOSENDCHANGING
 #define SWP_NOSENDCHANGING 0
 #endif

 	  	 

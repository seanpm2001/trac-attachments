Index: wxWidgets/samples/ribbon/ribbondemo.cpp
===================================================================
--- wxWidgets/samples/ribbon/ribbondemo.cpp	(revision 72922)
+++ wxWidgets/samples/ribbon/ribbondemo.cpp	(working copy)
@@ -31,6 +31,8 @@
 #include "wx/combobox.h"
 #include "wx/tglbtn.h"
 #include "wx/wrapsizer.h"
+#include "wx/checkbox.h" 
+#include "wx/stattext.h" 
 
 // -- application --
 
@@ -419,6 +421,19 @@
         bar->AddButton(ID_REMOVE_PAGE, wxT("Remove"), wxArtProvider::GetBitmap(wxART_DELETE, wxART_OTHER, wxSize(24, 24)));
         bar->AddButton(ID_HIDE_PAGES, wxT("Hide Pages"), ribbon_xpm);
         bar->AddButton(ID_SHOW_PAGES, wxT("Show Pages"), ribbon_xpm);
+
+        //Demonstrate transparent additional controls:
+        panel = new wxRibbonPanel(page, wxID_ANY, wxT("Transparency"), ribbon_xpm); 
+        wxCheckBox* checkBox = new wxCheckBox(panel, wxID_ANY, wxT("Checkbox"), wxDefaultPosition, wxDefaultSize, wxTRANSPARENT_WINDOW); 
+        wxStaticText* text = new wxStaticText(panel, wxID_ANY, wxT("StaticText"), wxDefaultPosition, wxDefaultSize, wxTRANSPARENT_WINDOW); 
+#       if defined(__WXMSW__)
+           //This may be required in some situations:
+           checkBox->MSWMakeOwnerDrawn(true);
+#       endif
+        wxSizer *s = new wxBoxSizer(wxVERTICAL); 
+        s->Add(checkBox); 
+        s->Add(text); 
+        panel->SetSizer(s);  
     }
     new wxRibbonPage(m_ribbon, wxID_ANY, wxT("Highlight Page"), empty_xpm);
     m_ribbon->AddPageHighlight(m_ribbon->GetPageCount()-1);
Index: wxWidgets/src/msw/control.cpp
===================================================================
--- wxWidgets/src/msw/control.cpp	(revision 72922)
+++ wxWidgets/src/msw/control.cpp	(working copy)
@@ -427,6 +427,15 @@
 
 WXHBRUSH wxControl::MSWControlColor(WXHDC pDC, WXHWND hWnd)
 {
+    DWORD dwExStyle = ::GetWindowLong(hWnd, GWL_EXSTYLE);
+    if (dwExStyle & WS_EX_TRANSPARENT)
+    {
+        wxColour fgColour = GetForegroundColour();
+        ::SetTextColor((HDC)pDC, RGB(fgColour.Red(), fgColour.Green(), fgColour.Blue()));
+        ::SetBkMode((HDC)pDC, TRANSPARENT);
+        return (WXHBRUSH)GetStockObject(HOLLOW_BRUSH);
+    }
+
     if ( HasTransparentBackground() )
         ::SetBkMode((HDC)pDC, TRANSPARENT);
 

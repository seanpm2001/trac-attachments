diff --git a/samples/aui/auidemo.cpp b/samples/aui/auidemo.cpp
index affb1a9..8c2269f 100644
--- a/samples/aui/auidemo.cpp
+++ b/samples/aui/auidemo.cpp
@@ -33,6 +33,7 @@
 #include "wx/statusbr.h"
 #include "wx/msgdlg.h"
 #include "wx/textdlg.h"
+#include "wx/propgrid/propgrid.h"
 
 #include "wx/aui/aui.h"
 #include "../sample.xpm"
@@ -102,6 +103,7 @@ class MyFrame : public wxFrame
         ID_NotebookArtSimple,
         ID_NotebookAlignTop,
         ID_NotebookAlignBottom,
+		idGrid,
 
         ID_SampleItem,
 
@@ -164,7 +166,7 @@ private:
     void OnUpdateUI(wxUpdateUIEvent& evt);
 
     void OnPaneClose(wxAuiManagerEvent& evt);
-
+	void OnIdle(wxIdleEvent &evt);
 private:
 
     wxAuiManager m_mgr;
@@ -653,6 +655,8 @@ wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_AUINOTEBOOK_ALLOW_DND(wxID_ANY, MyFrame::OnAllowNotebookDnD)
     EVT_AUINOTEBOOK_PAGE_CLOSE(wxID_ANY, MyFrame::OnNotebookPageClose)
     EVT_AUINOTEBOOK_PAGE_CLOSED(wxID_ANY, MyFrame::OnNotebookPageClosed)
+	
+	EVT_IDLE(MyFrame::OnIdle)
 wxEND_EVENT_TABLE()
 
 
@@ -915,7 +919,30 @@ MyFrame::MyFrame(wxWindow* parent,
                   Bottom().Layer(1).
                   CloseButton(true).MaximizeButton(true));
 
-    wxWindow* wnd10 = CreateTextCtrl(wxT("This pane will prompt the user before hiding."));
+    //wxWindow* wnd10 = CreateTextCtrl(wxT("This pane will prompt the user before hiding."));
+	wxPanel *wnd10 = new wxPanel(this, wxID_ANY);
+	wxBoxSizer *bs = new wxBoxSizer(wxVERTICAL);
+    wxPropertyGrid *grid = new wxPropertyGrid(wnd10, idGrid, wxDefaultPosition, wxDefaultSize,
+												wxPG_SPLITTER_AUTO_CENTER /*| wxTAB_TRAVERSAL /*| wxWANTS_CHARS*/);
+
+    grid->SetExtraStyle(wxPG_EX_HELP_AS_TOOLTIPS);
+//    grid->SetDropTarget(new WatchesDropTarget);
+    grid->SetColumnCount(3);
+    bs->Add(grid, 1, wxEXPAND | wxALL);
+
+    wnd10->SetAutoLayout(true);
+    wnd10->SetSizer(bs);
+
+    grid->SetColumnProportion(0, 40);
+    grid->SetColumnProportion(1, 40);
+    grid->SetColumnProportion(2, 20);
+	
+	for (int ii = 0; ii < 5; ++ii)
+	{
+		wxString name=wxString::Format("name%d", ii);
+		wxPGProperty *prop = grid->Append(new wxStringProperty(name, name, "value"));
+		grid->SetPropertyAttribute(prop, wxT("Units"), wxEmptyString);
+	}
 
     // Give this pane an icon, too, just for testing.
     int iconSize = m_mgr.GetArtProvider()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE);
@@ -1757,3 +1784,22 @@ wxString MyFrame::GetIntroText()
 
     return wxString::FromAscii(text);
 }
+
+void MyFrame::OnIdle(wxIdleEvent &evt)
+{
+    // This code is useful for debugging focus problems
+    static wxWindow* last_focus = (wxWindow*) NULL;
+
+    wxWindow* cur_focus = ::wxWindow::FindFocus();
+
+    if ( cur_focus != last_focus )
+    {
+        const wxChar* class_name = wxT("<none>");
+        if ( cur_focus )
+            class_name = cur_focus->GetClassInfo()->GetClassName();
+        last_focus = cur_focus;
+        wxLogDebug( wxT("FOCUSED: %s %p"), class_name, cur_focus);
+    }
+
+    evt.Skip();
+}

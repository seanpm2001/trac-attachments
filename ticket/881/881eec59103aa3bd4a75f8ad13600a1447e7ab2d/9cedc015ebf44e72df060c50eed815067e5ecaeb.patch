diff -uNr wxWidgets.orig/include/wx/osx/cocoa/private.h wxWidgets/include/wx/osx/cocoa/private.h
--- wxWidgets.orig/include/wx/osx/cocoa/private.h	2016-02-29 13:42:55.000000000 +0200
+++ wxWidgets/include/wx/osx/cocoa/private.h	2016-02-29 13:44:39.000000000 +0200
@@ -276,6 +276,8 @@
     WXWindow        m_macWindow;
     void *          m_macFullScreenData ;
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxNonOwnedWindowCocoaImpl);
+private:
+	void SetUpForModalParent();
 };
 
 DECLARE_WXCOCOA_OBJC_CLASS( wxNSButton );
diff -uNr wxWidgets.orig/src/osx/cocoa/nonownedwnd.mm wxWidgets/src/osx/cocoa/nonownedwnd.mm
--- wxWidgets.orig/src/osx/cocoa/nonownedwnd.mm	2016-02-04 16:28:14.000000000 +0200
+++ wxWidgets/src/osx/cocoa/nonownedwnd.mm	2016-02-29 13:39:22.000000000 +0200
@@ -717,29 +717,7 @@
         [[m_macWindow standardWindowButton:NSWindowMiniaturizeButton] setHidden:YES];
     }
     
-    // If the parent is modal, windows with wxFRAME_FLOAT_ON_PARENT style need
-    // to be in kCGUtilityWindowLevel and not kCGFloatingWindowLevel to stay
-    // above the parent.
-    wxDialog * const parentDialog = parent == NULL ? NULL : wxDynamicCast(parent->MacGetTopLevelWindow(), wxDialog);
-    if (parentDialog && parentDialog->IsModal())
-    {
-        if (level == kCGFloatingWindowLevel)
-        {
-            level = kCGUtilityWindowLevel;
-        }
-
-        // Cocoa's modal loop does not process other windows by default, but
-        // don't call this on normal window levels so nested modal dialogs will
-        // still behave modally.
-        if (level != kCGNormalWindowLevel)
-        {
-            if ([m_macWindow isKindOfClass:[NSPanel class]])
-            {
-                [(NSPanel*)m_macWindow setWorksWhenModal:YES];
-            }
-        }
-    }
-
+    // The level may be changed later in SetUpForModalParent()
     [m_macWindow setLevel:level];
     m_macWindowLevel = level;
 
@@ -767,6 +745,7 @@
 
 void wxNonOwnedWindowCocoaImpl::Raise()
 {
+    SetUpForModalParent();
     [m_macWindow makeKeyAndOrderFront:nil];
 }
 
@@ -775,8 +754,45 @@
     [m_macWindow orderWindow:NSWindowBelow relativeTo:0];
 }
 
+void wxNonOwnedWindowCocoaImpl::SetUpForModalParent()
+{
+    wxNonOwnedWindow* wxpeer = GetWXPeer();
+    if ( wxpeer )
+    {
+        // If the parent is modal, windows with wxFRAME_FLOAT_ON_PARENT style need
+        // to be in kCGUtilityWindowLevel and not kCGFloatingWindowLevel to stay
+        // above the parent.
+        wxDialog * const parentDialog = wxDynamicCast(wxGetTopLevelParent(wxpeer->GetParent()), wxDialog);
+        if (parentDialog && parentDialog->IsModal())
+        {
+            if (m_macWindowLevel == kCGFloatingWindowLevel)
+                m_macWindowLevel = kCGUtilityWindowLevel;
+
+            // Cocoa's modal loop does not process other windows by default, but
+            // don't call this on normal window levels so nested modal dialogs will
+            // still behave modally.
+            CGWindowLevel level = m_macWindowLevel;
+            if (level != kCGNormalWindowLevel)
+            {
+                if ([m_macWindow isKindOfClass:[NSPanel class]])
+                {
+                    [(NSPanel*)m_macWindow setWorksWhenModal:YES];
+                }
+            }
+
+            // This was added to the original logic in wxNonOwnedWindowCocoaImpl::Create() to
+            // fix the problem that opening popups in nested modal dialogs could make the
+            // popup's parent go behind another dialog
+            wxNonOwnedWindowImpl * parentimpl = parentDialog->GetNonOwnedPeer();
+            if (parentimpl)
+                parentimpl->RestoreWindowLevel();
+        }
+    }
+}
+
 void wxNonOwnedWindowCocoaImpl::ShowWithoutActivating()
 {
+    SetUpForModalParent();
     [m_macWindow orderFront:nil];
     [[m_macWindow contentView] setNeedsDisplay: YES];
 }
@@ -800,7 +816,7 @@
                         [parentNSWindow addChildWindow:m_macWindow ordered:NSWindowAbove];
                 }
             }
-            
+            SetUpForModalParent();
             if (!(wxpeer->GetWindowStyle() & wxFRAME_TOOL_WINDOW)) 
                 [m_macWindow makeKeyAndOrderFront:nil];
             else 

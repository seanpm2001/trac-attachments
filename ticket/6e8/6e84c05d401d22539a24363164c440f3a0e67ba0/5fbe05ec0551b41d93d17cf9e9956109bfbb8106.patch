Index: include/wx/msw/radiobox.h
===================================================================
--- include/wx/msw/radiobox.h	(revision 51065)
+++ include/wx/msw/radiobox.h	(working copy)
@@ -160,7 +160,8 @@
     wxSubwindows *m_radioButtons;
 
     // and the special dummy button used only as a tab group boundary
-    wxSubwindows *m_dummyButton;
+    WXWidget m_dummyHwnd; // Use WXWidget, not HWND
+    wxWindowIDRef m_dummyId;
 
     // array of widths and heights of the buttons, may be wxDefaultCoord if the
     // corresponding quantity should be computed
Index: include/wx/msw/subwin.h
===================================================================
--- include/wx/msw/subwin.h	(revision 51065)
+++ include/wx/msw/subwin.h	(working copy)
@@ -40,7 +40,10 @@
     {
         for ( size_t n = 0; n < m_count; n++ )
         {
-            ::DestroyWindow(m_hwnds[n]);
+            if(m_hwnds[n])
+            {
+                ::DestroyWindow(m_hwnds[n]);
+            }
         }
 
         free(m_hwnds);
@@ -95,7 +98,10 @@
         int sw = show ? SW_SHOW : SW_HIDE;
         for ( size_t n = 0; n < m_count; n++ )
         {
-            ::ShowWindow(m_hwnds[n], sw);
+            if(m_hwnds[n])
+            {
+                ::ShowWindow(m_hwnds[n], sw);
+            }
         }
     }
 
@@ -104,7 +110,10 @@
     {
         for ( size_t n = 0; n < m_count; n++ )
         {
-            ::EnableWindow(m_hwnds[n], enable);
+            if(m_hwnds[n])
+            {
+                ::EnableWindow(m_hwnds[n], enable);
+            }
         }
     }
 
@@ -116,10 +125,13 @@
 
         for ( size_t n = 0; n < m_count; n++ )
         {
-            ::SendMessage(m_hwnds[n], WM_SETFONT, (WPARAM)hfont, 0);
+            if(m_hwnds[n])
+            {
+                ::SendMessage(m_hwnds[n], WM_SETFONT, (WPARAM)hfont, 0);
 
-            // otherwise the window might not be redrawn correctly
-            ::InvalidateRect(m_hwnds[n], NULL, FALSE /* don't erase bg */);
+                // otherwise the window might not be redrawn correctly
+                ::InvalidateRect(m_hwnds[n], NULL, FALSE /* don't erase bg */);
+            }
         }
     }
 
@@ -129,10 +141,14 @@
         wxRect r;
         for ( size_t n = 0; n < m_count; n++ )
         {
-            RECT rc;
-            ::GetWindowRect(m_hwnds[n], &rc);
+            if(m_hwnds[n])
+            {
+                RECT rc;
+                
+                ::GetWindowRect(m_hwnds[n], &rc);
 
-            r.Union(wxRectFromRECT(rc));
+                r.Union(wxRectFromRECT(rc));
+            }
         }
 
         return r;
Index: src/msw/radiobox.cpp
===================================================================
--- src/msw/radiobox.cpp	(revision 51065)
+++ src/msw/radiobox.cpp	(working copy)
@@ -129,7 +129,7 @@
 {
     m_selectedButton = wxNOT_FOUND;
     m_radioButtons = NULL;
-    m_dummyButton = NULL;
+    m_dummyHwnd = NULL;
     m_radioWidth = NULL;
     m_radioHeight = NULL;
 }
@@ -164,9 +164,7 @@
     // For instance, we don't want the bounding box of the radio
     // buttons to include the dummy button
     m_radioButtons = new wxSubwindows(n);
-    m_dummyButton = new wxSubwindows(1);
 
-
     m_radioWidth = new int[n];
     m_radioHeight = new int[n];
 
@@ -206,19 +204,14 @@
     }
 
     // Create a dummy radio control to end the group.
-    wxWindowIDRef subid = NewControlId();
+    m_dummyId = NewControlId();
 
-    HWND dummy = ::CreateWindow(_T("BUTTON"),
+    m_dummyHwnd = (WXWidget)::CreateWindow(_T("BUTTON"),
                          wxEmptyString,
                          WS_GROUP | BS_AUTORADIOBUTTON | WS_CHILD,
                          0, 0, 0, 0, GetHwndOf(parent),
-                         (HMENU)subid.GetValue(), wxGetInstance(), NULL);
+                         (HMENU)m_dummyId.GetValue(), wxGetInstance(), NULL);
 
-    // Keep track of the subwindow so it will be destroyed when the radio
-    // box is and it's id will be freed.
-    // Also, do we need to consider this dummy item a subcontrol and add it
-    // to m_subControls
-    m_dummyButton->Set(0, dummy, subid);
 
     m_radioButtons->SetFont(GetFont());
 
@@ -258,7 +251,10 @@
     m_isBeingDeleted = true;
 
     delete m_radioButtons;
-    delete m_dummyButton;
+    if(m_dummyHwnd)
+    {
+        DestroyWindow((HWND)m_dummyHwnd);
+    }
     delete[] m_radioWidth;
     delete[] m_radioHeight;
 }

 	  	 

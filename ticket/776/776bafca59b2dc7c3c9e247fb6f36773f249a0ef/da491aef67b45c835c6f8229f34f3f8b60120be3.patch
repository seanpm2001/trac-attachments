Index: src/mac/corefoundation/cfstring.cpp
===================================================================
--- src/mac/corefoundation/cfstring.cpp	(revision 51611)
+++ src/mac/corefoundation/cfstring.cpp	(working copy)
@@ -610,12 +610,24 @@
             (UniChar*)str.wc_str() , str.Len() ) );
 #else
         wxMBConvUTF16 converter ;
-        size_t unicharlen = converter.WC2MB( NULL , str.wc_str() , 0 ) ;
-        UniChar *unibuf = new UniChar[ unicharlen / sizeof(UniChar) + 1 ] ;
-        converter.WC2MB( (char*)unibuf , str.wc_str() , unicharlen ) ;
-        reset( CFStringCreateWithCharacters( kCFAllocatorDefault ,
-            unibuf , unicharlen / sizeof(UniChar) ) );
+        
+        size_t unicharbytes = converter.FromWChar( NULL , 0 , str.wc_str() , str.Length() ) ;
+        wxASSERT( unicharbytes != wxCONV_FAILED );
+        if ( unicharbytes == wxCONV_FAILED )
+        {
+            // create an empty string
+            reset( CFStringCreateWithCharacters( kCFAllocatorDefault , 0 , 0 ) ) ;
+        }
+        else
+        {
+            // unicharbytes: number of bytes needed for UTF-16 encoded string (without terminating null)
+            // unichars: number of UTF-16 characters (without terminating null)
+            size_t unichars = unicharbytes /  sizeof(UniChar) ;
+            UniChar *unibuf = new UniChar[ unichars ] ;
+            converter.FromWChar( (char*)unibuf , unicharbytes , str.wc_str() , str.Length() ) ;
+            reset( CFStringCreateWithCharacters( kCFAllocatorDefault , unibuf , unichars ) ) ;
         delete[] unibuf ;
+        }
 #endif
 #else // not wxUSE_UNICODE
         reset( CFStringCreateWithCString( kCFAllocatorSystemDefault , str.c_str() ,

 	  	 

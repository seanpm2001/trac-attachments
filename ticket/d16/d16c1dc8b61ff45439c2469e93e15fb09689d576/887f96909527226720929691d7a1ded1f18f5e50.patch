diff -uNr d:/wxWidgets-orig/src/richtext/richtextbuffer.cpp d:/wxWidgets-mine/src/richtext/richtextbuffer.cpp
--- d:/wxWidgets-orig/src/richtext/richtextbuffer.cpp	2013-05-27 08:30:12 +0800
+++ d:/wxWidgets-mine/src/richtext/richtextbuffer.cpp	2013-06-21 20:42:16 +0800
@@ -55,7 +55,14 @@
 
 // Use GetPartialTextExtents for platforms that support it natively
 #define wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS 1
-
+static int wxCellIntCompared(int* a,int* b)
+{
+    if(*a < *b)
+    return 1;
+    else if(*a == *b)
+    return 0;
+    return -1;
+}
 const wxChar wxRichTextLineBreakChar = (wxChar) 29;
 
 // Helper classes for floating layout
@@ -1441,31 +1448,31 @@
                 if (child->CanSplit(context))
                 {
                     childAfterSplit = child->Split(context);
-                    node = m_children.Find(childAfterSplit);                        
+                    node = m_children.Find(childAfterSplit);
                 }
 
                 if (node->GetNext())
                 {
                     wxRichTextObject* nextChild = node->GetNext()->GetData();
-                    
+
                     // First split child and nextChild so we have smaller fragments to merge.
                     // Then Merge only has to test per-object virtual attributes
                     // because for an object with all the same sub-object attributes,
                     // then any general virtual attributes should be merged with sub-objects by
                     // the implementation.
-                    
+
                     wxRichTextObject* nextChildAfterSplit = nextChild;
 
                     if (nextChildAfterSplit->CanSplit(context))
                         nextChildAfterSplit = nextChild->Split(context);
 
                     bool splitNextChild = nextChild != nextChildAfterSplit;
-                        
+
                     // See if we can merge this new fragment with (perhaps the first part of) the next object.
                     // Note that we use nextChild because if we had split nextChild, the first object always
                     // remains (and further parts are appended). However we must use childAfterSplit since
                     // it's the last part of a possibly split child.
-                    
+
                     if (childAfterSplit->CanMerge(nextChild, context) && childAfterSplit->Merge(nextChild, context))
                     {
                         nextChild->Dereference();
@@ -1852,7 +1859,7 @@
 
     if (wxRichTextBuffer::GetFloatingLayoutMode())
         DrawFloats(dc, context, range, selection, rect, descent, style);
-    
+
     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
     while (node)
     {
@@ -5107,7 +5114,7 @@
             wxCheckSetFont(dc, font);
             lineHeight = dc.GetCharHeight();
         }
-        
+
         if (maxDescent == 0)
         {
             int w, h;
@@ -7053,13 +7060,13 @@
         wxRichTextPlainText* otherObj = wxDynamicCast(object, wxRichTextPlainText);
         if (!otherObj || m_text.empty())
             return false;
-            
+
         if (!wxTextAttrEq(GetAttributes(), object->GetAttributes()) || !(m_properties == object->GetProperties()))
             return false;
-            
+
         // Check if differing virtual attributes makes it impossible to merge
         // these strings.
-        
+
         bool hasVirtualAttr1 = context.HasVirtualAttributes((wxRichTextObject*) this);
         bool hasVirtualAttr2 = context.HasVirtualAttributes((wxRichTextObject*) object);
         if (!hasVirtualAttr1 && !hasVirtualAttr2)
@@ -7111,18 +7118,18 @@
         {
             const wxRichTextAttr emptyAttr;
             wxRichTextObjectList::compatibility_iterator next = node->GetNext();
-    
+
             wxArrayInt positions;
             wxRichTextAttrArray attributes;
             if (context.GetVirtualSubobjectAttributes(this, positions, attributes) && positions.GetCount() > 0)
             {
                 wxASSERT(positions.GetCount() == attributes.GetCount());
-                
+
                 // We will gather up runs of text with the same virtual attributes
-                
+
                 int len = m_text.Length();
                 int i = 0;
-                
+
                 // runStart and runEnd represent the accumulated run with a consistent attribute
                 // that hasn't yet been appended
                 int runStart = -1;
@@ -7130,7 +7137,7 @@
                 wxRichTextAttr currentAttr;
                 wxString text = m_text;
                 wxRichTextPlainText* lastPlainText = this;
-                
+
                 for (i = 0; i < (int) positions.GetCount(); i++)
                 {
                     int pos = positions[i];
@@ -7138,7 +7145,7 @@
                     if (pos >= 0 && pos < len)
                     {
                         const wxRichTextAttr& attr = attributes[i];
-                        
+
                         if (pos == 0)
                         {
                             runStart = 0;
@@ -7185,7 +7192,7 @@
                                         else
                                             parent->GetChildren().Append(obj);
                                     }
-                                    
+
                                     runStart = runEnd+1;
                                     runEnd = pos-1;
 
@@ -7193,7 +7200,7 @@
                                 }
                             }
                         }
-                            
+
                         wxASSERT(runEnd == pos-1);
 
                         // Now we only have to deal with the previous run
@@ -7236,7 +7243,7 @@
                         }
                     }
                 }
-                
+
                 // We may still have a run to add, and possibly a no-attribute text fragment after that.
                 // If the whole string was already a single attribute (the run covers the whole string), don't split.
                 if ((runStart != -1) && !(runStart == 0 && runEnd == (len-1)))
@@ -7261,14 +7268,14 @@
                             obj->SetAttributes(GetAttributes());
                             obj->SetProperties(GetProperties());
                             obj->SetParent(parent);
-                        
+
                             obj->SetText(text.Mid(runStart, runEnd - runStart + 1));
                             if (next)
                                 parent->GetChildren().Insert(next, obj);
                             else
-                                parent->GetChildren().Append(obj);                        
+                                parent->GetChildren().Append(obj);
                         }
-                        
+
                         runStart = runEnd+1;
                         runEnd = (len-1);
                     }
@@ -7282,17 +7289,17 @@
                         obj->SetAttributes(GetAttributes());
                         obj->SetProperties(GetProperties());
                         obj->SetParent(parent);
-                        
+
                         obj->SetText(text.Mid(runStart, runEnd - runStart + 1));
                         if (next)
                             parent->GetChildren().Insert(next, obj);
                         else
                             parent->GetChildren().Append(obj);
-                        
+
                         lastPlainText = obj;
                     }
                 }
-                
+
                 return lastPlainText;
             }
         }
@@ -9826,99 +9833,402 @@
 
     // (??) TODO: take max width into account
 
-    // (6) Lay out all cells again with the current values
-
-    int maxRight = 0;
-    int y = availableSpace.y;
-    for (j = 0; j < m_rowCount; j++)
-    {
-        int x = availableSpace.x; // TODO: take into account centering etc.
-        int maxCellHeight = 0;
-        int maxSpecifiedCellHeight = 0;
-
-        wxArrayInt actualWidths;
-        actualWidths.Add(0, m_colCount);
-
-        wxTextAttrDimensionConverter converter(dc, scale);
-        for (i = 0; i < m_colCount; i++)
-        {
-            wxRichTextCell* cell = GetCell(j, i);
-            if (cell->IsShown())
-            {
-                // Get max specified cell height
-                // Don't handle percentages for height
-                if (cell->GetAttributes().GetTextBoxAttr().GetHeight().IsValid() && cell->GetAttributes().GetTextBoxAttr().GetHeight().GetUnits() != wxTEXT_ATTR_UNITS_PERCENTAGE)
-                {
-                    int h = converter.GetPixels(cell->GetAttributes().GetTextBoxAttr().GetHeight());
-                    if (h > maxSpecifiedCellHeight)
-                        maxSpecifiedCellHeight = h;
-                }
-
-                if (colWidths[i] > 0) // absolute or proportional width has been specified
-                {
-                    int colSpan = 1;
-                    if (cell->GetProperties().HasProperty(wxT("colspan")))
-                        colSpan = cell->GetProperties().GetPropertyLong(wxT("colspan"));
-
-                    wxRect availableCellSpace;
-
-                    // TODO: take into acount spans
-                    if (colSpan > 1)
-                    {
-                        // Calculate the size of this spanning cell from its constituent columns
-                        int xx = x;
-                        int spans = wxMin(colSpan, m_colCount - i);
-                        for (k = i; k < spans; k++)
-                        {
-                            if (k != i)
-                                xx += paddingX;
-                            xx += colWidths[k];
-                        }
-                        availableCellSpace = wxRect(x, y, xx, -1);
-                    }
-                    else
-                        availableCellSpace = wxRect(x, y, colWidths[i], -1);
-
-                    // Store actual width so we can force cell to be the appropriate width on the final loop
-                    actualWidths[i] = availableCellSpace.GetWidth();
-
-                    // Lay out cell
-                    cell->Invalidate(wxRICHTEXT_ALL);
-                    cell->Layout(dc, context, availableCellSpace, availableSpace, style);
-
-                    // TODO: use GetCachedSize().x to compute 'natural' size
-
-                    x += (availableCellSpace.GetWidth() + paddingX);
-                    if (cell->GetCachedSize().y > maxCellHeight)
-                        maxCellHeight = cell->GetCachedSize().y;
-                }
-            }
-        }
-
-        maxCellHeight = wxMax(maxCellHeight, maxSpecifiedCellHeight);
-
-        for (i = 0; i < m_colCount; i++)
-        {
-            wxRichTextCell* cell = GetCell(j, i);
-            if (cell->IsShown())
-            {
-                wxRect availableCellSpace = wxRect(cell->GetPosition(), wxSize(actualWidths[i], maxCellHeight));
-                // Lay out cell with new height
-                cell->Invalidate(wxRICHTEXT_ALL);
-                cell->Layout(dc, context, availableCellSpace, availableSpace, style);
-
-                // Make sure the cell size really is the appropriate size,
-                // not the calculated box size
-                cell->SetCachedSize(wxSize(actualWidths[i], maxCellHeight));
-
-                maxRight = wxMax(maxRight, cell->GetPosition().x + cell->GetCachedSize().x);
-            }
-        }
-
-        y += maxCellHeight;
-        if (j < (m_rowCount-1))
-            y += paddingY;
-    }
+    // (6) Lay out all cells again with the current values
+    int maxRight = 0;
+    int y = availableSpace.y;
+    int maxCellHeight = 0;
+    int lastMaxCellHeight = 0;///max Cell height of the last row.
+    int cellHeight = 0;///the height of any shown cell.
+    wxArrayInt rowMaxHeightArr; ///an array of max cell height of each row,(which we can call a row height), used for collect all the row heights of the table.
+    int rowMaxAccHeight = 0;/// the cell height with row span property, it is a accumulated height of some row heights.
+
+
+    for (j = 0; j < m_rowCount; j++)
+    {
+        int x = availableSpace.x; // TODO: take into account centering etc.
+
+        maxCellHeight = 0;
+        cellHeight = 0;
+
+
+        int rowSpannedCellHeight = 0; /// the cell height of the cell with row span property.
+
+
+        int maxSpecifiedCellHeight = 0;
+
+        bool hasCellShown = false; ///check: is there any cell shown in current row ? if yes, the value is true, otherwise is false.
+        wxArrayInt actualWidths;
+        actualWidths.Add(0, m_colCount);
+
+        wxTextAttrDimensionConverter converter(dc, scale);
+        for (i = 0; i < m_colCount; i++)
+        {
+            wxRichTextCell* cell = GetCell(j, i);
+            if (cell->IsShown())
+            {
+
+                hasCellShown = true;
+                int colSpan = 1;
+                int rowSpan = 1;
+                if (cell->GetProperties().HasProperty(wxT("colspan")))
+                    colSpan = cell->GetProperties().GetPropertyLong(wxT("colspan"));
+                if (cell->GetProperties().HasProperty(wxT("rowspan")))
+                    rowSpan = cell->GetProperties().GetPropertyLong(wxT("rowspan"));
+
+
+                // Get max specified cell height
+                // Don't handle percentages for height
+                if (cell->GetAttributes().GetTextBoxAttr().GetHeight().IsValid() && cell->GetAttributes().GetTextBoxAttr().GetHeight().GetUnits() != wxTEXT_ATTR_UNITS_PERCENTAGE)
+                {
+                    int h = converter.GetPixels(cell->GetAttributes().GetTextBoxAttr().GetHeight());
+                    if (h > maxSpecifiedCellHeight)
+                        maxSpecifiedCellHeight = h;
+                }
+
+                if (colWidths[i] > 0) // absolute or proportional width has been specified
+                {
+                    int colSpan = 1;
+                    if (cell->GetProperties().HasProperty(wxT("colspan")))
+                        colSpan = cell->GetProperties().GetPropertyLong(wxT("colspan"));
+
+                    wxRect availableCellSpace;
+
+                    // TODO: take into acount spans
+                    if (colSpan > 1)
+                    {
+                        // Calculate the size of this spanning cell from its constituent columns
+                        int xx = x;
+                        int spans = wxMin(colSpan, m_colCount - i);
+                        for (k = i; k < spans; k++)
+                        {
+                            if (k != i)
+                                xx += paddingX;
+                            xx += colWidths[k];
+                        }
+                        availableCellSpace = wxRect(x, y, xx, -1);
+                    }
+                    else
+                        availableCellSpace = wxRect(x, y, colWidths[i], -1);
+
+                    // Store actual width so we can force cell to be the appropriate width on the final loop
+                    actualWidths[i] = availableCellSpace.GetWidth();
+
+                    // Lay out cell
+                    cell->Invalidate(wxRICHTEXT_ALL);
+                    cell->Layout(dc, context, availableCellSpace, availableSpace, style);
+
+                    // TODO: use GetCachedSize().x to compute 'natural' size
+
+                    x += (availableCellSpace.GetWidth() + paddingX);
+
+                        if(cell->GetCachedSize().y > cellHeight)
+                            cellHeight = cell->GetCachedSize().y;
+
+                    if (rowSpan == 1&& cellHeight > maxCellHeight)
+                        maxCellHeight = cellHeight;
+
+                    else
+                        rowSpannedCellHeight = cellHeight;
+
+
+
+                  if( rowSpan > 1)
+                  {
+
+
+                     int rowSpanValue = wxMin(rowSpan, m_rowCount - j);///row span value( how many rows are spanned) : use wxMin to ensure the row span value is not larger than the remained actual row numbers of the table.
+                     int colSpanValue = wxMin(colSpan, m_colCount - i);///column span value( how many columns are spanned); use wxMin to ensure the column span value is not larger than the remained actual column numbers of the table.
+
+                    ///in order to conveniently obtain information, here, we store the infomation of the cell with row span property in a series of cells, these cells may not be shown and together form the right border of the cell with row span peroperty,
+                   /// the following scheme is a table with row =5, and col =4, and its Cell(0,1) has rowspan = 4, and colspan = 2; we store information at cell (0,2),(1,2),(2,2) and (3,2); As shown in the following scheme,
+                  /// cells marked with 'i' are the cells which are used for storing the information.
+                    //   1      2      3      4
+                   //  ________________________
+                   // |______|          i|_____| 1
+                   // |______|          i|_____| 2
+                   // |______|          i|_____| 3
+                   // |______|______(i,d)|_____| 4
+                   // |______|___________|_____| 5
+                   /// May be an array of a struct like cells list/as the member variables of the cell used to store the information is/are more preferable.
+
+                    for(int k = j; k < j+rowSpanValue; ++k)
+
+                    {
+
+
+                        wxRichTextCell* pcell = GetCell(k, i+colSpanValue-1);///colSpan-1
+
+                        {
+                            pcell->GetProperties().SetProperty(wxT("rowSpannedCellWidth"),(long)actualWidths[i]);///the width of the cell with row span property; this is not the final with.
+                            pcell->GetProperties().SetProperty(wxT("spannedRowX"),(long)x); /// horizontal position of the cell with row span property.
+
+                            if(k == j+rowSpanValue-1)
+                            {
+                             /// here we set a mark, which is used to check whether we should lay out the cell with row span property or not, in above scheme, it is marked with "d",
+                             ///here,which cell we should select is not unique, any subsumed cell by spanning cell in this row is Ok, in above scheme, we also can select cell(3,1).
+                             pcell->GetProperties().SetProperty(wxT("show"),(long)1);
+                             pcell->GetProperties().SetProperty(wxT("orgRowspan"),(long)rowSpan); /// orignial row span value.
+                             pcell->GetProperties().SetProperty(wxT("orgColspan"),(long)colSpan);/// orignial col span value.
+                             pcell->GetProperties().SetProperty(wxT("rowSpanValue"),(long)rowSpanValue);
+                             pcell->GetProperties().SetProperty(wxT("colSpanValue"),(long)colSpanValue);
+                             pcell->GetProperties().SetProperty(wxT("spannedRowStart"),(long)j); /// the first row of the cell with row span property, in above scheme, j= 0;
+                             pcell->GetProperties().SetProperty(wxT("rowSpannedCellHeight"),(long)rowSpannedCellHeight);
+
+
+                            }
+                        }
+
+                    }
+
+
+
+                  }
+
+                }
+            }
+
+            else
+            {
+
+
+                      ///if current row has the cell which is not shown, especially, those cells are subsumed by above cell with row span property.
+                      ///In above scheme, cell (1,2),(2,2) and (3,2) are subsumed by the cell (0,1), we should take into account the x postion, it has been occupied,
+                      ///and the set current x value with SpannedRowX;
+                      if(cell->GetProperties().HasProperty(wxT("spannedRowX")))
+                       x = cell->GetProperties().GetPropertyLong(wxT("spannedRowX"));
+
+
+            }
+
+
+
+        }
+
+/// the following seven lines of code are used to ensure the current row has a certain height more than zero,
+///here, the algorithm is not perfect, especially when cellHeight = 0 and lastMaxCellHeight = 0; for example, in a 4*4 table(especially its cell has no child objects), the first cell(0,0) is a spanning cell with rowspan = 2 and colspan =4;
+///now, the lastMaxCellHeight is always zero, and if its height of the TextBoxAttr  is zero, the maxCellHeight may be zero, in this case, a default cell height may be more preferable.
+        if(!hasCellShown)
+        {
+            ///if there is no any shown cell in current row and the maxCellHeight = 0 , we use the CellHeight,
+            if(cellHeight)
+            maxCellHeight = cellHeight;
+             /// if cellHeight = 0, we use the the max Cell height of the last row,
+            else if(lastMaxCellHeight)
+            maxCellHeight = lastMaxCellHeight;
+            ///
+            /**
+            else
+            maxCellHeight = defaultCellHeight;
+            **/
+        }
+
+
+
+
+
+        maxCellHeight = wxMax(maxCellHeight, maxSpecifiedCellHeight);
+
+        lastMaxCellHeight = maxCellHeight;
+
+
+              rowMaxAccHeight = 0;
+              int remainningHeight = 0;/// the remaining height of the cell with row span property, after the cell height substracts the last N-1 row heights.
+
+
+
+         wxArrayInt rowRemainningHeightArr; ///an array of the remaining height of the current Row.
+
+        /// check if there is any cell which has "show" property in current row,
+        for (i = 0; i < m_colCount; i++)
+        {
+            wxRichTextCell* pcell = GetCell(j, i);
+
+            /// if yes, we'll lay out the cell, before we lay out it,we should calculate its height.
+
+            if(pcell->GetProperties().HasProperty(wxT("show")))
+            {
+              rowSpannedCellHeight = pcell->GetProperties().GetPropertyLong(wxT("rowSpannedCellHeight"));
+              int spannedRowStart = pcell->GetProperties().GetPropertyLong(wxT("spannedRowStart"));
+
+              rowMaxAccHeight = 0;
+
+              ///calculate the height of the cell with row span property, if the rowspan = N; we only accumulate to N-1.
+              for(int kk = spannedRowStart; kk < j; ++kk)
+              rowMaxAccHeight += rowMaxHeightArr[kk];
+              ///
+              remainningHeight = rowSpannedCellHeight -rowMaxAccHeight;
+              if(remainningHeight > 0)
+              rowRemainningHeightArr.Add(remainningHeight);
+
+            }
+
+
+
+
+        }
+         ///here we calculate the max remaining height in current row.
+
+         /// sort, ensure the max remaining height is the first item of the array.
+         if(rowRemainningHeightArr.GetCount())
+          rowRemainningHeightArr.Sort(wxCellIntCompared);
+
+          if(rowRemainningHeightArr.GetCount())
+          {
+           /// if the remaining height value is larger than current maxCellHeight, replace maxCellHeight.
+           if(rowRemainningHeightArr.Item(0) > 0&& maxCellHeight < rowRemainningHeightArr.Item(0))
+            maxCellHeight = rowRemainningHeightArr.Item(0);
+          }
+           rowRemainningHeightArr.Clear();
+
+           ///add the maxCellHeight to rowmaxHeightArr
+           rowMaxHeightArr.Add(maxCellHeight);
+
+
+
+///
+
+
+        for (i = 0; i < m_colCount; i++)
+        {
+            wxRichTextCell* cell = GetCell(j, i);
+            if (cell->IsShown())
+            {
+
+                int checkedRowSpan = 1;
+                if (cell->GetProperties().HasProperty(wxT("rowspan")))
+                    checkedRowSpan = cell->GetProperties().GetPropertyLong(wxT("rowspan"));
+
+                 ///here, we only lay out those cells with  rowspan =1;
+                 if(checkedRowSpan == 1)
+                {
+
+                wxRect availableCellSpace = wxRect(cell->GetPosition(), wxSize(actualWidths[i], maxCellHeight));
+                // Lay out cell with new height
+                cell->Invalidate(wxRICHTEXT_ALL);
+                cell->Layout(dc, context, availableCellSpace, availableSpace, style);
+
+                // Make sure the cell size really is the appropriate size,
+                // not the calculated box size
+                cell->SetCachedSize(wxSize(actualWidths[i], maxCellHeight));
+
+                maxRight = wxMax(maxRight, cell->GetPosition().x + cell->GetCachedSize().x);
+
+                }
+
+
+
+
+
+            }
+           ///here, we only lay out those cells with rowspan value greater than 1;
+            else
+            {
+
+              rowMaxAccHeight = 0;
+              int actualWidth  = 0; ///actual with of the cell with row span property.
+              /// now if the cell with "show" property, we should lay out the cell assiated it at this position.
+             if(cell->GetProperties().HasProperty(wxT("show")))
+               {
+                   /// now we take out the value from the properties which we add.
+                  int storedRowSpan = cell->GetProperties().GetPropertyLong(wxT("rowSpanValue"));
+                  int storedColSpan = cell->GetProperties().GetPropertyLong(wxT("colSpanValue"));
+                  int spannedRowStart = cell->GetProperties().GetPropertyLong(wxT("spannedRowStart"));
+                  int orgRowSpan = cell->GetProperties().GetPropertyLong(wxT("orgRowspan"));
+                  int orgColSpan = cell->GetProperties().GetPropertyLong(wxT("orgColspan"));
+
+
+
+                actualWidth =  cell->GetProperties().GetPropertyLong(wxT("rowSpannedCellWidth"));
+
+              rowMaxAccHeight = 0;
+
+              ///calculate the height of the cell with row span property, all the spanned rows are calculated.
+              for(int kk = spannedRowStart; kk < j+1; ++kk)
+              rowMaxAccHeight += rowMaxHeightArr[kk];
+
+              int checkedRowSpan = 1;
+              int checkedColSpan = 1;
+
+              /// now we obtain the cell with row span property.
+               wxRichTextCell* pcell = GetCell(j-storedRowSpan+1, i-storedColSpan+1);
+
+              if(pcell->GetProperties().HasProperty(wxT("rowspan")))
+              checkedRowSpan = pcell->GetProperties().GetPropertyLong(wxT("rowspan"));
+
+
+
+              if(pcell->GetProperties().HasProperty(wxT("colspan")))
+              checkedColSpan = pcell->GetProperties().GetPropertyLong(wxT("colspan"));
+
+              ///ensure the cell with row span property is the cell that we are going to lay out.
+                   if(checkedRowSpan == orgRowSpan && checkedColSpan == orgColSpan&&pcell->IsShown())
+                   {
+
+                wxRect availableCellSpace = wxRect(pcell->GetPosition(), wxSize(actualWidth, rowMaxAccHeight));
+                // Lay out cell with new height
+
+                pcell->Invalidate(wxRICHTEXT_ALL);
+                pcell->Layout(dc, context, availableCellSpace, availableSpace, style);
+
+                // Make sure the cell size really is the appropriate size,
+                // not the calculated box size
+
+                pcell->SetCachedSize(wxSize(actualWidth, rowMaxAccHeight));
+
+                maxRight = wxMax(maxRight, pcell->GetPosition().x + pcell->GetCachedSize().x);
+
+
+                 }
+
+
+
+
+
+
+          }
+
+            }
+
+
+        }
+
+        y += maxCellHeight;
+        if (j < (m_rowCount-1))
+            y += paddingY;
+    }
+
+
+          /// now remove all the propeties which we added.
+          for (j = 0; j < m_rowCount; j++)
+               {
+                   for (i = 0; i < m_colCount; i++)
+                   {
+                     wxRichTextCell* cell = GetCell(j, i);
+
+                       if(cell->GetProperties().HasProperty(wxT("rowSpannedCellWidth")))
+                           {
+                               cell->GetProperties().Remove(wxT("rowSpannedCellWidth"));
+                               cell->GetProperties().Remove(wxT("spannedRowX"));
+
+                               if(cell->GetProperties().HasProperty(wxT("show")))
+                                      {
+                                         cell->GetProperties().Remove(wxT("show"));
+                                         cell->GetProperties().Remove(wxT("rowSpanValue"));
+                                         cell->GetProperties().Remove(wxT("colSpanValue"));
+                                         cell->GetProperties().Remove(wxT("spannedRowStart"));
+                                         cell->GetProperties().Remove(wxT("rowSpannedCellHeight"));
+                                         cell->GetProperties().Remove(wxT("orgrowspan"));
+                                         cell->GetProperties().Remove(wxT("orgcolspan"));
+                                      }
+                           }
+                    }
+
+
+                }
+
+
+
+    rowMaxHeightArr.Clear();
 
     // We need to add back the margins etc.
     {
@@ -10270,9 +10580,12 @@
 
     wxCHECK_MSG(noRows != m_rowCount, false, "Trying to delete all the cells in a table");
 
-    wxRichTextBuffer* buffer = GetBuffer();
-    wxRichTextCtrl* rtc = buffer->GetRichTextCtrl();
-
+    wxRichTextBuffer* buffer = GetBuffer();
+    wxRichTextCtrl* rtc = NULL;
+    if(buffer)
+     rtc = buffer->GetRichTextCtrl();
+    if(buffer)
+    {
     wxPosition position = GetFocusedCell();
     int focusCol = position.GetCol();
     int focusRow = position.GetRow();
@@ -10290,10 +10603,10 @@
             rtc->SetFocusObject(GetCell(startRow - 1, focusCol));
         }
     }
-
+    }
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!rtc->SuppressingUndo())
+    if (buffer&&!rtc->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
@@ -10320,7 +10633,7 @@
 
     m_rowCount = m_rowCount - noRows;
 
-    if (!rtc->SuppressingUndo())
+    if (buffer&&!rtc->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures
@@ -10338,9 +10651,12 @@
 
     wxCHECK_MSG(noCols != m_colCount, false, "Trying to delete all the cells in a table");
 
-    wxRichTextBuffer* buffer = GetBuffer();
-    wxRichTextCtrl* rtc = buffer->GetRichTextCtrl();
-
+    wxRichTextBuffer* buffer = GetBuffer();
+    wxRichTextCtrl* rtc = NULL;
+    if(buffer)
+    rtc = buffer->GetRichTextCtrl();
+    if(buffer)
+    {
     wxPosition position = GetFocusedCell();
     int focusCol = position.GetCol();
     int focusRow = position.GetRow();
@@ -10358,10 +10674,10 @@
             rtc->SetFocusObject(GetCell(focusRow, startCol - 1));
         }
     }
-
+   }
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!rtc->SuppressingUndo())
+    if (buffer&&!rtc->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
@@ -10377,7 +10693,7 @@
     for (i = 0; i < m_rowCount; i++)
     {
         wxRichTextObjectPtrArray& colArray = m_cells[deleteRows ? 0 : i];
-        for (j = 0; j < noCols; j++) 
+        for (j = 0; j < noCols; j++)
         {
             wxRichTextObject* cell = colArray[startCol];
             RemoveChild(cell, true);
@@ -10392,7 +10708,7 @@
         m_rowCount = 0;
     m_colCount = m_colCount - noCols;
 
-    if (!rtc->SuppressingUndo())
+    if (buffer&&!rtc->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures
@@ -10411,7 +10727,7 @@
     wxRichTextBuffer* buffer = GetBuffer();
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (buffer&&!buffer->GetRichTextCtrl()->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
@@ -10450,7 +10766,7 @@
 
     m_rowCount = m_rowCount + noRows;
 
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (buffer&&!buffer->GetRichTextCtrl()->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures
@@ -10469,7 +10785,7 @@
     wxRichTextBuffer* buffer = GetBuffer();
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (buffer&&!buffer->GetRichTextCtrl()->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
@@ -10500,7 +10816,7 @@
 
     m_colCount = m_colCount + noCols;
 
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (buffer&&!buffer->GetRichTextCtrl()->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures
@@ -10549,7 +10865,6 @@
         wxRichTextXMLHandler::RegisterNodeName(wxT("cell"), wxT("wxRichTextCell"));
         wxRichTextXMLHandler::RegisterNodeName(wxT("table"), wxT("wxRichTextTable"));
         wxRichTextXMLHandler::RegisterNodeName(wxT("field"), wxT("wxRichTextField"));
-
         return true;
     }
     void OnExit()
@@ -14179,6 +14494,7 @@
 
     sm_fieldTypes.clear();
 }
+
 
 #endif
     // wxUSE_RICHTEXT

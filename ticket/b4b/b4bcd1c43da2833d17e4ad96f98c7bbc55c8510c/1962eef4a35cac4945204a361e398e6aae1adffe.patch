diff -ru wxWidgets.orig/src/common/socket.cpp wxWidgets/src/common/socket.cpp
--- wxWidgets.orig/src/common/socket.cpp	2007-02-13 12:01:08.000000000 +0100
+++ wxWidgets/src/common/socket.cpp	2007-02-23 15:37:43.000000000 +0100
@@ -1344,14 +1344,18 @@
     // Create the socket
     m_socket = GSocket_new();
 
-    if(!m_socket)
+    if (!m_socket)
     {
         wxFAIL_MSG( _T("datagram socket not new'd") );
         return;
     }
     // Setup the socket as non connection oriented
     m_socket->SetLocal(addr.GetAddress());
-    if( m_socket->SetNonOriented() != GSOCK_NOERROR )
+    if (flags & wxSOCKET_REUSEADDR)
+    {
+        m_socket->SetReusable();
+    }
+    if ( m_socket->SetNonOriented() != GSOCK_NOERROR )
     {
         delete m_socket;
         m_socket = NULL;
diff -ru wxWidgets.orig/src/msw/gsocket.cpp wxWidgets/src/msw/gsocket.cpp
--- wxWidgets.orig/src/msw/gsocket.cpp	2007-02-13 12:01:04.000000000 +0100
+++ wxWidgets/src/msw/gsocket.cpp	2007-02-23 15:49:42.187198700 +0100
@@ -399,8 +399,9 @@
   /* allow a socket to re-bind if the socket is in the TIME_WAIT
      state after being previously closed.
    */
-  if (m_reusable) {
-    setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(u_long));
+  if (m_reusable)
+  {
+    setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(arg));
   }
 
   /* Bind to the local address,
@@ -596,7 +597,7 @@
   // If the reuse flag is set, use the applicable socket reuse flag
   if (m_reusable)
   {
-     setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(u_long));
+     setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(arg));
   }
 
   // If a local address has been set, then we need to bind to it before calling connect
@@ -701,6 +702,12 @@
   ioctlsocket(m_fd, FIONBIO, (u_long FAR *) &arg);
   gs_gui_functions->Enable_Events(this);
 
+  if (m_reusable)
+  {
+    setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(arg));
+  }
+  // TODO: if (m_broadcast) setsockopt(m_fd, SOL_SOCKET, SO_BROADCAST, (const char*)&arg, sizeof(arg));
+
   /* Bind to the local address,
    * and retrieve the actual address bound.
    */

 	  	 

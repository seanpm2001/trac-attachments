Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	(wersja 62891)
+++ src/common/datavcmn.cpp	(kopia robocza)
@@ -792,7 +792,7 @@
                                         text,
                                         *dc,
                                         GetEllipsizeMode(),
-                                        rect.width,
+                                        rectText.width,
                                         wxELLIPSIZE_FLAGS_NONE
                                     );
     }
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(wersja 62891)
+++ src/generic/datavgen.cpp	(kopia robocza)
@@ -800,6 +800,10 @@
     if (GetMode() != wxDATAVIEW_CELL_ACTIVATABLE)
         flags |= wxCONTROL_DISABLED;
 
+    // we do not have to worry about situations checksize > cell.width
+    // the clipping region in OnPaint prevent drawing outside cell
+    cell.SetSize(GetSize());
+
     wxRendererNative::Get().DrawCheckBox(
             GetOwner()->GetOwner(),
             *dc,
@@ -1248,7 +1252,7 @@
 
 wxDataViewMainWindow::wxDataViewMainWindow( wxDataViewCtrl *parent, wxWindowID id,
     const wxPoint &pos, const wxSize &size, const wxString &name ) :
-    wxWindow( parent, id, pos, size, wxWANTS_CHARS|wxBORDER_NONE, name ),
+    wxWindow( parent, id, pos, size, wxWANTS_CHARS|wxBORDER_NONE|wxFULL_REPAINT_ON_RESIZE, name ),
     m_selection( wxDataViewSelectionCmp )
 
 {
@@ -1650,7 +1654,8 @@
             if (m_hasFocus)
                 flags |= wxCONTROL_FOCUSED;
 
-            wxRect rect( x_start, GetLineStart( item ), x_last, GetLineHeight( item ) );
+            wxRect rect( x_start, GetLineStart( item ),
+                         x_last - x_start, GetLineHeight( item ) );
             wxRendererNative::Get().DrawItemSelectionRect
                                 (
                                     this,
@@ -1665,7 +1670,7 @@
     if (m_dropHint)
     {
         wxRect rect( x_start, GetLineStart( m_dropHintLine ),
-                    x_last, GetLineHeight( m_dropHintLine ) );
+                     x_last - x_start, GetLineHeight( m_dropHintLine ) );
         dc.SetPen( *wxBLACK_PEN );
         dc.SetBrush( *wxTRANSPARENT_BRUSH );
         dc.DrawRectangle( rect );
@@ -1689,7 +1694,7 @@
         wxDataViewRenderer *cell = col->GetRenderer();
         cell_rect.width = col->GetWidth();
 
-        if (col->IsHidden())
+        if (col->IsHidden() || cell_rect.width == 0)
             continue;       // skip it!
 
         for (unsigned int item = item_start; item < item_last; item++)
@@ -1731,38 +1736,39 @@
             int indent = 0;
             if ((!IsVirtualList()) && (col == expander))
             {
-                indent = node->GetIndentLevel();
-
                 // Calculate the indent first
-                indent = cell_rect.x + GetOwner()->GetIndent() * indent;
+                indent = GetOwner()->GetIndent() * node->GetIndentLevel();
 
-                int expander_width = m_lineHeight - 2*EXPANDER_MARGIN;
+                int exp_x = cell_rect.x + indent + EXPANDER_MARGIN;
 
-                // change the cell_rect.x to the appropriate pos
-                int expander_x = indent + EXPANDER_MARGIN;
-                int expander_y = cell_rect.y + EXPANDER_MARGIN + (GetLineHeight(item) / 2)
-                                 - (expander_width/2) - EXPANDER_OFFSET;
+                // draw expander if needed and visible
+                if( node->HasChildren() && exp_x < cell_rect.GetRight() )
+                {
+                    dc.SetPen(m_penExpander);
+                    dc.SetBrush(wxNullBrush);
 
-                indent = indent + m_lineHeight;
-                    // try to use the m_lineHeight as the expander space
+                    int exp_w = m_lineHeight - 2*EXPANDER_MARGIN;
+                    int exp_y = cell_rect.y + EXPANDER_MARGIN + (GetLineHeight(item) / 2)
+                              - (exp_w/2) - EXPANDER_OFFSET;
 
-                dc.SetPen( m_penExpander );
-                dc.SetBrush( wxNullBrush );
-                if( node->HasChildren() )
-                {
-                    wxRect rect( expander_x , expander_y, expander_width, expander_width);
+                    wxRect rect(exp_x, exp_y, exp_w, exp_w);
+
                     int flag = 0;
-                    if (m_underMouse == node)
-                    {
+                    if ( m_underMouse == node )
                         flag |= wxCONTROL_CURRENT;
-                    }
-                    if( node->IsOpen() )
-                        wxRendererNative::Get().DrawTreeItemButton( this, dc, rect,
-                                                                    flag|wxCONTROL_EXPANDED );
-                    else
-                        wxRendererNative::Get().DrawTreeItemButton( this, dc, rect, flag);
+                    if ( node->IsOpen() )
+                        flag |= wxCONTROL_EXPANDED;
+
+                    // clipping region for avoid drawing expander outside cell
+                    // (if position of expander is near end of cell)
+                    wxDCClipper clip(dc, cell_rect);
+
+                    wxRendererNative::Get().DrawTreeItemButton(this, dc, rect, flag);
                 }
 
+                indent += m_lineHeight;
+                    // try to use the m_lineHeight as the expander space
+
                 // force the expander column to left-center align
                 cell->SetAlignment( wxALIGN_CENTER_VERTICAL );
             }
@@ -1780,6 +1786,9 @@
             item_rect.x += indent;
             item_rect.width -= indent;
 
+            if (item_rect.width <= 0)
+                continue;
+
             int state = 0;
             if (m_hasFocus && (m_selection.Index(item) != wxNOT_FOUND))
                 state |= wxDATAVIEW_CELL_SELECTED;
@@ -4113,9 +4122,9 @@
         // Unselect all rows before select another in the single select mode
         if (m_clientArea->IsSingleSel())
             m_clientArea->SelectAllRows(false);
-            
+
         m_clientArea->SelectRow(row, true);
-        
+
         // Also set focus to the selected item
         m_clientArea->ChangeCurrentRow( row );
     }

Description: Use unpatched version of SWIG to generate Python wrappers
 The changes are:

 wxPython/src/_defs.i: Use standard %(regex:...)s instead of custom %(wxpy)s to
 remove leading wx (except for wxEVT*).  This feature requires SWIG 2.0.1
 (released 2010-10-04).

 wxPython/config.py: Fix the version check to allow for SWIG 2.0.x.

 wxPython/pyfragments.swg: New file - if pyfragments.swg exists in the current
 directory, SWIG will read it early on in processing, so we can use it to
 supply an overridden version of %argfail_fmt without needing to patch the
 SWIG source code.  Requires SWIG 1.3.23 for pyfragments.swg support and
 and 1.3.32 (released 2007-11-15) for allowing %argfail_fmt to be overridden.

 src/_core_api.i: SWIG_Python_NewPointerObj() is internal to SWIG and has
 gained another parameter, but we can just use SWIG_NewPointerObj() here
 instead (which is a macro which expands to a suitable call to
 SWIG_Python_NewPointerObj() in both older and newer versions of SWIG).

 src/_core_api.i: PySwigObject_New() got renamed to SwigPyObject_New() as
 the Python docs explicitly say not to use names prefixed by "Py" in your
 own code, and similarly PySwigObject_Check() was renamed to
 SwigPyObject_Check().

 wxPython/src/_icon.i: I had to fix the return type of wxIconBundle::wxIcon()
 here to match C++ reality (it returns wxIcon, not const wxIcon&).  This was
 also the case in 2.9.5, so I'm assuming that older SWIG must have worked with
 this.  Newer SWIG produces code which doesn't compile if we lie to it about
 the return type like this, but giving it the correct return type should work
 with older and newer SWIG versions.

 Several of the hunks in wxPython/SWIG/swig-1.3.29.patch have been applied to
 newer SWIG versions already.  Currently I've not dealt with the following
 hunks:

      "SWIG changed how the import statements are output to the proxy
      file, but this also caused the order to change (they all moved to
      the very top of the file) so this broke the module docstring, as
      well as some behavior that Chandler development is depending upon,
      so this patch changes back to how it was done in prior releases."

    The SWIG code has changed so this doesn't apply as is, but if I look at
    my generated wx/combo.py (picking a file at random), I don't see the import
    statements at the very top of the file - the first is after the module
    docstring and others are further down the file.  So I think this may have
    been fixed in SWIG, but I'd like confirmation from someone who better
    understands what the problem actually was.

      "Don't set a module attribute for the *_swigregister functions,
      just call the one in the extension module directly."

    This seems to be a minor optimisation, and so not vital to have.  If it's
    actually useful we should get it added as an option in SWIG.
 
    There's also this hunk, which doesn't seem to be documented in
    wxPython/SWIG/README:

	@@ -1154,10 +1145,15 @@
		 
	       // Do the param type too?
	       if (showTypes) {
		 type =  SwigType_base(type);
	-       lookup = Swig_symbol_clookup(type, 0);
	-       if (lookup) type = Getattr(lookup, "sym:name");
	+        SwigType* qt = SwigType_typedef_resolve_all(type);
	+        if (SwigType_isenum(qt))
	+          type = NewString("int");
	+        else {
	+          lookup = Swig_symbol_clookup(type, 0);
	+          if (lookup) type = Getattr(lookup, "sym:name");
	+        }
		 Printf(doc, "%s ", type);
	       }
	  
	       if (name) {

    I don't fully follow this, but I think it is fixed by changes in SWIG 2.0.5:
    https://github.com/swig/swig/commit/3243cbaad43fcc53a8a2fa1c96863b008365a466
 
Author: Olly Betts <olly@survex.com>
Forwarded: no
Last-Update: 2013-10-16

--- wxwidgets2.9-2.9.5.0+dfsg2.orig/wxPython/src/_defs.i
+++ wxwidgets2.9-2.9.5.0+dfsg2/wxPython/src/_defs.i
@@ -33,7 +33,7 @@
 
 // For all items that don't have a %rename already, give them a %rename that
 // removes the leading 'wx' (except for wxEVT_* items.)
-%rename("%(wxpy)s") "";
+%rename("%(regex:/^wx(?!EVT)(.*)/\\1/)s") "";
 
 // For now, just supress the warning about using Python keywords as parameter
 // names.  Will need to come back later and correct these rather than just
diff --git a/wxPython/config.py b/wxPython/config.py
index 4fbd83f..56e6b1d 100644
--- a/wxPython/config.py
+++ b/wxPython/config.py
@@ -1221,7 +1221,7 @@ swig_args += i_files_includes
 
 if USE_SWIG:
     SVER = swig_version()
-    if int(SVER[-2:]) >= 29:
+    if SVER >= '2' or int(SVER[-2:]) >= 29:
         swig_args += [ '-fastdispatch',
                        '-fvirtual',
                        '-fastinit',
diff --git a/wxPython/pyfragments.swg b/wxPython/pyfragments.swg
new file mode 100644
index 0000000..f3e3edb
--- /dev/null
+++ b/wxPython/pyfragments.swg
@@ -0,0 +1,3 @@
+// Change the exception message used for TypeErrors to make a little more
+// sense.
+#define %argfail_fmt(_type,_name,_argn)    "in method '" `_name` "', expected argument " `_argn`" of type '" `_type`"'"
diff --git a/wxPython/src/_core_api.i b/wxPython/src/_core_api.i
index d773ce1..9cdd441 100644
--- a/wxPython/src/_core_api.i
+++ b/wxPython/src/_core_api.i
@@ -82,7 +82,7 @@ PyObject* wxPyConstructObject(void* ptr,
     swig_type_info* swigType = wxPyFindSwigType(className);
     wxCHECK_MSG(swigType != NULL, NULL, wxT("Unknown type in wxPyConstructObject"));
 
-    return SWIG_Python_NewPointerObj(ptr, swigType, setThisOwn);
+    return SWIG_NewPointerObj(ptr, swigType, setThisOwn);
 }
 
 
@@ -125,7 +125,7 @@ PyObject* wxPyMakeSwigPtr(void* ptr, const wxString& className) {
 }
 %}
 
-#else // SWIG_VERSION >= 1.3.28
+#elif SWIG_VERSION < 0x010337 // SWIG_VERSION >= 1.3.28 and < 1.3.37
 %{
 // Make a SWIGified pointer object suitable for a .this attribute
 PyObject* wxPyMakeSwigPtr(void* ptr, const wxString& className) {
@@ -139,6 +139,20 @@ PyObject* wxPyMakeSwigPtr(void* ptr, const wxString& className) {
     return robj;
 }
 %}
+#else // SWIG_VERSION >= 1.3.37
+%{
+// Make a SWIGified pointer object suitable for a .this attribute
+PyObject* wxPyMakeSwigPtr(void* ptr, const wxString& className) {
+    
+    PyObject* robj = NULL;
+
+    swig_type_info* swigType = wxPyFindSwigType(className);
+    wxCHECK_MSG(swigType != NULL, NULL, wxT("Unknown type in wxPyMakeSwigPtr"));
+
+    robj = SwigPyObject_New(ptr, swigType, 0);
+    return robj;
+}
+%}
 #endif
 
 
@@ -161,7 +175,11 @@ bool wxPySwigInstance_Check(PyObject* obj) {
     
     PyObject* this_attr = PyObject_GetAttr(obj, this_str);
     if (this_attr) {
+#if SWIG_VERSION < 0x010337
         bool retval = (PySwigObject_Check(this_attr) != 0);
+#else
+        bool retval = (SwigPyObject_Check(this_attr) != 0);
+#endif
         Py_DECREF(this_attr);
         return retval;
     }
diff --git a/wxPython/src/_icon.i b/wxPython/src/_icon.i
index 963f8d1..f4d7704 100644
--- a/wxPython/src/_icon.i
+++ b/wxPython/src/_icon.i
@@ -204,7 +204,7 @@ are replaced", "",
     
 
     DocDeclStr(
-        const wxIcon& , GetIcon( const wxSize& size, int flags = wxIconBundle::FALLBACK_SYSTEM ) const,
+        wxIcon , GetIcon( const wxSize& size, int flags = wxIconBundle::FALLBACK_SYSTEM ) const,
         "Returns the icon with the given size; if no such icon exists, returns
 the icon with size wxSYS_ICON_[XY]; if no such icon exists, returns
 the first icon in the bundle", "");

Index: docs/changes.txt
===================================================================
--- docs/changes.txt	(revision 66577)
+++ docs/changes.txt	(working copy)
@@ -422,6 +422,7 @@
 - Added wxFile::GetLastError() and ClearLastError() (ryazanov).
 - Added negatable command line switches (Armel Asselin).
 - Added wxVersionInfo and various GetLibraryVersionInfo() functions (troelsk).
+- Added wxGIFDecoder::GetComment() and wxIMAGE_OPTION_GIF_COMMENT (troelsk).
 
 Unix:
 
Index: include/wx/gifdecod.h
===================================================================
--- include/wx/gifdecod.h	(revision 66577)
+++ include/wx/gifdecod.h	(working copy)
@@ -51,7 +51,7 @@
 public:
     // constructor, destructor, etc.
     wxGIFDecoder();
-    ~wxGIFDecoder();
+    virtual ~wxGIFDecoder();
 
     // get data of current frame
     unsigned char* GetData(unsigned int frame) const;
@@ -59,7 +59,7 @@
     unsigned int GetNcolours(unsigned int frame) const;
     int GetTransparentColourIndex(unsigned int frame) const;
     wxColour GetTransparentColour(unsigned int frame) const;
-
+    const wxString& GetComment(unsigned int frame) const;
     virtual wxSize GetFrameSize(unsigned int frame) const;
     virtual wxPoint GetFramePosition(unsigned int frame) const;
     virtual wxAnimationDisposal GetDisposalMethod(unsigned int frame) const;
Index: include/wx/imaggif.h
===================================================================
--- include/wx/imaggif.h	(revision 66577)
+++ include/wx/imaggif.h	(working copy)
@@ -19,6 +19,8 @@
 
 #if wxUSE_GIF
 
+#define wxIMAGE_OPTION_GIF_COMMENT wxT("GifComment")
+
 class WXDLLIMPEXP_CORE wxGIFHandler : public wxImageHandler
 {
 public:
Index: interface/wx/image.h
===================================================================
--- interface/wx/image.h	(revision 66577)
+++ interface/wx/image.h	(working copy)
@@ -1134,6 +1134,9 @@
             the resulting PNG file. Use this option if your application produces
             images with small size variation.
 
+        Options specific to wxGIFHandler:
+        @li @c wxIMAGE_OPTION_GIF_COMMENT: The comment text that is saved in the gif file.
+
         @param name
             The name of the option, case-insensitive.
         @return
Index: src/common/gifdecod.cpp
===================================================================
--- src/common/gifdecod.cpp	(revision 66577)
+++ src/common/gifdecod.cpp	(working copy)
@@ -61,6 +61,7 @@
     unsigned char *p;               // bitmap
     unsigned char *pal;             // palette
     unsigned int ncolours;          // number of colours
+    wxString comment;
 
     wxDECLARE_NO_COPY_CLASS(GIFImage);
 };
@@ -135,7 +136,7 @@
     image->Create(sz.GetWidth(), sz.GetHeight());
     image->SetType(wxBITMAP_TYPE_GIF);
 
-    if (!image->Ok())
+    if (!image->IsOk())
         return false;
 
     pal = GetPalette(frame);
@@ -189,6 +190,12 @@
         *(dst++) = pal[3 * (*src) + 2];
     }
 
+    wxString comment = GetComment(frame);
+    if (comment.Length())
+    {
+        image->SetOption(wxIMAGE_OPTION_GIF_COMMENT, comment);
+    }
+
     return true;
 }
 
@@ -222,6 +229,11 @@
     return GetFrame(frame)->delay;
 }
 
+const wxString& wxGIFDecoder::GetComment(unsigned int frame) const
+{
+    return GetFrame(frame)->comment;
+}
+
 wxColour wxGIFDecoder::GetTransparentColour(unsigned int frame) const
 {
     unsigned char *pal = GetFrame(frame)->pal;
@@ -672,6 +684,7 @@
     int transparent = -1;
     disposal = wxANIM_UNSPECIFIED;
     delay = -1;
+    wxString comment;
 
     bool done = false;
     while (!done)
@@ -701,38 +714,53 @@
                 done = true;
                 break;
             case GIF_MARKER_EXT:
-                if (stream.GetC() == GIF_MARKER_EXT_GRAPHICS_CONTROL)
-                // graphics control extension, parse it
+                switch (stream.GetC())
                 {
-                    static const unsigned int gceSize = 6;
-                    stream.Read(buf, gceSize);
-                    if (stream.LastRead() != gceSize)
+                    case GIF_MARKER_EXT_GRAPHICS_CONTROL:
                     {
-                        Destroy();
-                        return wxGIF_INVFORMAT;
-                    }
+                        // graphics control extension, parse it
 
-                    // read delay and convert from 1/100 of a second to ms
-                    delay = 10 * (buf[2] + 256 * buf[3]);
+                        static const unsigned int gceSize = 6;
+                        stream.Read(buf, gceSize);
+                        if (stream.LastRead() != gceSize)
+                        {
+                            Destroy();
+                            return wxGIF_INVFORMAT;
+                        }
 
-                    // read transparent colour index, if used
-                    transparent = buf[1] & 0x01 ? buf[4] : -1;
+                        // read delay and convert from 1/100 of a second to ms
+                        delay = 10 * (buf[2] + 256 * buf[3]);
 
-                    // read disposal method
-                    disposal = (wxAnimationDisposal)(((buf[1] & 0x1C) >> 2) - 1);
-                }
-                else
-                // other extension, skip
-                {
-                    while ((i = stream.GetC()) != 0)
+                        // read transparent colour index, if used
+                        transparent = buf[1] & 0x01 ? buf[4] : -1;
+
+                        // read disposal method
+                        disposal = (wxAnimationDisposal)(((buf[1] & 0x1C) >> 2) - 1);
+                        break;
+                    }
+                    case GIF_MARKER_EXT_COMMENT:
                     {
-                        if (stream.Eof() || (stream.LastRead() == 0) ||
-                            stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                        int len = stream.GetC();
+                        wxCharBuffer charbuf(len);
+                        for (i = 0; i < len; i++)
                         {
-                            done = true;
-                            break;
+                            charbuf.data()[i] = (char)stream.GetC();
                         }
+                        comment = wxConvertMB2WX(charbuf.data());
+                        break;
                     }
+                    default:
+                        // other extension, skip
+                        while ((i = stream.GetC()) != 0)
+                        {
+                            if (stream.Eof() || (stream.LastRead() == 0) ||
+                                stream.SeekI(i, wxFromCurrent) == wxInvalidOffset)
+                            {
+                                done = true;
+                                break;
+                            }
+                        }
+                        break;
                 }
                 break;
             case GIF_MARKER_SEP:
@@ -751,6 +779,8 @@
                 if (stream.LastRead() != idbSize)
                     return wxGIF_INVFORMAT;
 
+                pimg->comment = comment;
+                comment.Empty();
                 pimg->left = buf[0] + 256 * buf[1];
                 pimg->top = buf[2] + 256 * buf[3];
     /*

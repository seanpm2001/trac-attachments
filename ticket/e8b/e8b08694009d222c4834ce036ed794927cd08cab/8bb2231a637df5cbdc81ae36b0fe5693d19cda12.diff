Index: drawing.cpp
===================================================================
--- drawing.cpp	(revision 67969)
+++ drawing.cpp	(working copy)
@@ -1595,6 +1595,18 @@
         default:
             break;
     }
+    // Creates a red cross at Y location 200000.
+    // When we have a scaling error, this line is *not* at y position = 200000
+    // (see the y position displayed by the two previous lines
+    // when the mouse is on this line
+    dc.SetPen(*wxRED_PEN);
+    // Draw a horizontal line at user coordinate 200000
+    #define MY_LINE_YPOS 200000
+    dc.DrawLine(0, MY_LINE_YPOS, 1000, MY_LINE_YPOS);
+    // Draw a vertical line
+    dc.DrawLine(200, MY_LINE_YPOS-400, 200, MY_LINE_YPOS+400);
+    // draw a text at Y = MY_LINE_YPOS+1
+    dc.DrawText(wxT("Horiz. Line at logical Y pos = 200000"), 210, MY_LINE_YPOS + 1);
 }
 
 void MyCanvas::OnMouseMove(wxMouseEvent &event)
@@ -1611,6 +1623,31 @@
         wxString str;
         str.Printf( wxT("Current mouse position: %d,%d"), (int)x, (int)y );
         m_owner->SetStatusText( str );
+        // Calculate actual Y scale like in dc.cpp:
+        static const int VIEWPORT_EXTENT = 1024;
+        double actualscale = (double)(wxRound(VIEWPORT_EXTENT * m_owner->m_yUserScale)) / VIEWPORT_EXTENT;
+        if( m_owner->m_yUserScale < 1.0 )
+             actualscale = (double)VIEWPORT_EXTENT / (wxRound(VIEWPORT_EXTENT / m_owner->m_yUserScale));
+        // Calculate logical y position, using actual Y scale, not m_yUserScale
+        wxPoint actualpos;
+        CalcUnscrolledPosition( pos.x, pos.y, &actualpos.x, &actualpos.y );
+        actualpos.y = (int) (actualpos.y/actualscale);
+        str.Printf( wxT("yscale %g, error %d actualYpos %d"), m_owner->m_yUserScale,
+                    y - MY_LINE_YPOS, actualpos.y);
+        m_owner->SetStatusText( str, 1 );
+
+        // Draw a cross
+        dc.SetPen(*wxGREEN_PEN);
+        static wxPoint oldPos;
+        // Erase old cross
+        dc.SetLogicalFunction(wxXOR);
+        dc.DrawLine(oldPos.x, oldPos.y-10, oldPos.x, oldPos.y+10);
+        dc.DrawLine(oldPos.x+10, oldPos.y, oldPos.x-10, oldPos.y);
+        // Draw new cross
+        oldPos.x = x;
+        oldPos.y = y;
+        dc.DrawLine(oldPos.x, oldPos.y-10, oldPos.x, oldPos.y+10);
+        dc.DrawLine(oldPos.x+10, oldPos.y, oldPos.x-10, oldPos.y);
     }
 
     if ( m_rubberBand )
@@ -1790,7 +1827,7 @@
 
     m_mapMode = wxMM_TEXT;
     m_xUserScale = 1.0;
-    m_yUserScale = 1.0;
+    m_yUserScale = 1.11;    // this value creates a large Y offset error
     m_xLogicalOrigin = 0;
     m_yLogicalOrigin = 0;
     m_xAxisReversed =
@@ -1801,7 +1838,9 @@
     m_textureBackground = false;
 
     m_canvas = new MyCanvas( this );
-    m_canvas->SetScrollbars( 10, 10, 100, 240 );
+    // Creates a large virtual area, to show scale error:
+    // Y virtual size is 240000 pixels
+    m_canvas->SetScrollbars( 10, 100, 100, 2400 );
 }
 
 // event handlers
@@ -1889,10 +1928,10 @@
             m_xUserScale /= 1.10;
             break;
         case UserScale_StretchVertic:
-            m_yUserScale *= 1.10;
+            m_yUserScale *= 1.010;
             break;
         case UserScale_ShrinkVertic:
-            m_yUserScale /= 1.10;
+            m_yUserScale /= 1.010;
             break;
         case UserScale_Restore:
             m_xUserScale =

Index: samples/drawing/drawing.cpp
===================================================================
--- samples/drawing/drawing.cpp	(revision 67940)
+++ samples/drawing/drawing.cpp	(working copy)
@@ -1611,6 +1611,12 @@
         wxString str;
         str.Printf( wxT("Current mouse position: %d,%d"), (int)x, (int)y );
         m_owner->SetStatusText( str );
+
+        // Creates a red marker at mouse cursor location.
+        // When we have a scaling error, this marker is *not* ar mouse cursor location
+        dc.SetPen(*wxRED_PEN);
+        dc.DrawLine(x, y, x-10, y);
+        dc.DrawLine(x, y, x, y-10);
     }
 
     if ( m_rubberBand )
@@ -1801,7 +1807,8 @@
     m_textureBackground = false;
 
     m_canvas = new MyCanvas( this );
-    m_canvas->SetScrollbars( 10, 10, 100, 240 );
+    // Creates a large virtual area, to show scale error:
+    m_canvas->SetScrollbars( 10, 10, 100, 24000 );
 }
 
 // event handlers
Index: src/msw/dc.cpp
===================================================================
--- src/msw/dc.cpp	(revision 67940)
+++ src/msw/dc.cpp	(working copy)
@@ -1976,6 +1976,7 @@
     // and to divide by it if it's < 1.
     int devExtX, devExtY,   // Viewport, i.e. device space, extents.
         logExtX, logExtY;   // Window, i.e. logical coordinate space, extents.
+#if 0   // Native version of wxWidgets
     if ( m_scaleX >= 1 )
     {
         devExtX = VIEWPORT_EXTENT*m_scaleX;
@@ -1997,7 +1998,35 @@
         devExtY = VIEWPORT_EXTENT;
         logExtY = m_signY*VIEWPORT_EXTENT/m_scaleY;
     }
+#else
+    // My version to reduce scale error
+    // It uses for the bigger param ( devExtX or logExtX )
+    // the max value for INT that does not creates overflows in calculations
+#define VIEWPORT_EXTENT_FOR_SCALE (INT_MAX/16)      // bigger value seems create overflow,
+                                                    // at least on 32 bits machines
+    if ( m_scaleX <= 1 )
+    {
+        devExtX = wxRound( VIEWPORT_EXTENT_FOR_SCALE * m_scaleX );
+        logExtX = m_signX * VIEWPORT_EXTENT_FOR_SCALE;
+    }
+    else
+    {
+        devExtX = VIEWPORT_EXTENT_FOR_SCALE;
+        logExtX = wxRound( m_signX * VIEWPORT_EXTENT_FOR_SCALE / m_scaleX );
+    }
 
+    if ( m_scaleY <= 1 )
+    {
+        devExtY = wxRound( VIEWPORT_EXTENT_FOR_SCALE * m_scaleY );
+        logExtY = m_signY * VIEWPORT_EXTENT_FOR_SCALE;
+    }
+    else
+    {
+        devExtY = VIEWPORT_EXTENT_FOR_SCALE;
+        logExtY = wxRound( m_signY * VIEWPORT_EXTENT_FOR_SCALE / m_scaleY );
+    }
+#endif
+
     ::SetViewportExtEx(GetHdc(), devExtX, devExtY, NULL);
     ::SetWindowExtEx(GetHdc(), logExtX, logExtY, NULL);
 

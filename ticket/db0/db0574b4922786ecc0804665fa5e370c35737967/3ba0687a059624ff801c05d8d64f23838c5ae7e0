diff -bu2r wxWidgets.orig/docs/latex/wx/classes.tex wxWidgets/docs/latex/wx/classes.tex
--- wxWidgets.orig/docs/latex/wx/classes.tex	2004-11-10 15:05:19.000000000 -0500
+++ wxWidgets/docs/latex/wx/classes.tex	2004-11-10 20:09:47.000000000 -0500
@@ -253,4 +253,6 @@
 \input radiobut.tex
 \input realpoin.tex
+\input realrect.tex
+\input realsize.tex
 \input rect.tex
 \input recguard.tex
Only in wxWidgets/docs/latex/wx: manual.con
Only in wxWidgets/docs/latex/wx: manual.ref
Only in wxWidgets/docs/latex/wx: manual.rtf
diff -bu2r wxWidgets.orig/docs/latex/wx/realpoin.tex wxWidgets/docs/latex/wx/realpoin.tex
--- wxWidgets.orig/docs/latex/wx/realpoin.tex	2004-09-24 23:04:13.000000000 -0400
+++ wxWidgets/docs/latex/wx/realpoin.tex	2004-11-10 20:00:12.000000000 -0500
@@ -33,3 +33,51 @@
 Members of the {\bf wxRealPoint} object.
 
+\membersection{wxRealPoint::operator $==$}\label{wxrealpointcompare}
+\func{bool}{operator $==$}{\param{const wxRealPoint\& }{p}}
 
+Comparison operator. Does this equal p?
+
+\membersection{wxRealPoint::operator! $=$}\label{wxrealpointcomparenot}
+\func{bool}{operator! $=$}{\param{const wxRealPoint\& }{p}}
+
+Comparison operator. Is this not equal to p?
+
+\membersection{wxRealPoint::operator $+$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $+$}{\param{const wxRealPoint\& }{p}}
+
+Add p to this wxRealPoint, and return the new wxRealPoint.
+
+\membersection{wxRealPoint::operator $+$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $+$}{\param{const wxRealSize\& }{p}}
+
+Add p to this wxRealPoint, and return the new wxRealPoint.
+
+\membersection{wxRealPoint::operator $-$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $-$}{\param{const wxRealPoint\& }{p}}
+
+Subtract p from this wxRealPoint, and return the new wxRealPoint.
+
+\membersection{wxRealPoint::operator $-$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $-$}{\param{const wxRealSize\& }{p}}
+
+Subtract p from this wxRealPoint, and return the new wxRealPoint.
+
+\membersection{wxRealPoint::operator $+=$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $+$}{\param{const wxRealPoint\& }{p}}
+
+Add p to this wxRealPoint, and store the new value back into this wxRealPoint.
+
+\membersection{wxRealPoint::operator $+=$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $+$}{\param{const wxRealSize\& }{p}}
+
+Add p to this wxRealPoint, and store the new value back into this wxRealPoint.
+
+\membersection{wxRealPoint::operator $-=$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $-$}{\param{const wxRealPoint\& }{p}}
+
+Subtract p from this wxRealPoint, and store the new value back into this wxRealPoint.
+
+\membersection{wxRealPoint::operator $-=$}\label{wxrealpointplus}
+\func{wxRealPoint}{operator $-$}{\param{const wxRealSize\& }{p}}
+
+Subtract p from this wxRealPoint, and store the new value back into this wxRealPoint.
Only in wxWidgets/docs/latex/wx: realrect.tex
Only in wxWidgets/docs/latex/wx: realsize.tex
diff -bu2r wxWidgets.orig/include/wx/gdicmn.h wxWidgets/include/wx/gdicmn.h
--- wxWidgets.orig/include/wx/gdicmn.h	2004-11-05 23:02:41.000000000 -0500
+++ wxWidgets/include/wx/gdicmn.h	2004-11-10 15:13:26.000000000 -0500
@@ -253,4 +253,57 @@
 
 // ---------------------------------------------------------------------------
+// wxRealSize
+// ---------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRealSize
+{
+public:
+	// members are public for compatibility, don't use them directly.
+	double x,y;
+
+	// constructors
+	wxRealSize() : x(0.0), y(0.0) { }
+	wxRealSize(double xx, double yy) : x(xx), y(yy) { }
+
+	// no copy ctor or assigment operator - the defaults are ok
+	
+	bool operator==(const wxRealSize& sz) const { return x == sz.x && y == sz.y; }
+	bool operator!=(const wxRealSize& sz) const { return x != sz.x && y == sz.y; }
+
+	// FIXME are these really useful? If they're, we should have += &c as well
+	wxRealSize operator+(const wxRealSize& sz) { return wxRealSize(x + sz.x, y + sz.y); }
+	wxRealSize operator-(const wxRealSize& sz) { return wxRealSize(x + sz.x, y + sz.y); }
+
+	void IncTo(const wxRealSize& sz)
+        { if ( sz.x > x ) x = sz.x; if ( sz.y > y ) y = sz.y; }
+	void DecTo(const wxRealSize& sz)
+        { if ( sz.x < x ) x = sz.x; if ( sz.y < y ) y = sz.y; }
+
+    // accessors
+    void Set(double xx, double yy) { x = xx; y = yy; }
+    void SetWidth(double w) { x = w; }
+    void SetHeight(double h) { y = h; }
+
+    double GetWidth() const { return x; }
+    double GetHeight() const { return y; }
+
+    bool IsFullySpecified() const { return x != -1 && y != -1; }
+
+    // combine this size with the other one replacing the default (i.e. equal
+    // to -1) components of this object with those of the other
+    void SetDefaults(const wxRealSize& size)
+    {
+        if ( x == -1 )
+            x = size.x;
+        if ( y == -1 )
+            y = size.y;
+    }
+
+    // compatibility
+    double GetX() const { return x; }
+    double GetY() const { return y; }
+};
+
+// ---------------------------------------------------------------------------
 // Point classes: with real or integer coordinates
 // ---------------------------------------------------------------------------
@@ -259,15 +312,27 @@
 {
 public:
-    double x;
-    double y;
+    double x, y;
 
     wxRealPoint() : x(0.0), y(0.0) { }
     wxRealPoint(double xx, double yy) : x(xx), y(yy) { }
 
-    wxRealPoint operator+(const wxRealPoint& pt) const { return wxRealPoint(x + pt.x, y + pt.y); }
-    wxRealPoint operator-(const wxRealPoint& pt) const { return wxRealPoint(x - pt.x, y - pt.y); }
+	// no copy ctor or assigment operator - the defaults are ok
 
+	// comparison
     bool operator==(const wxRealPoint& pt) const { return x == pt.x && y == pt.y; }
     bool operator!=(const wxRealPoint& pt) const { return x != pt.x || y != pt.y; }
+
+	// arithmetic operations (component wise)
+    wxRealPoint operator+(const wxRealPoint& p) const { return wxRealPoint(x + p.x, y + p.y); }
+    wxRealPoint operator-(const wxRealPoint& p) const { return wxRealPoint(x - p.x, y - p.y); }
+
+    wxRealPoint& operator+=(const wxRealPoint& p) { x += p.x; y += p.y; return *this; }
+    wxRealPoint& operator-=(const wxRealPoint& p) { x -= p.x; y -= p.y; return *this; }
+
+    wxRealPoint& operator+=(const wxRealSize& s) { x += s.GetWidth(); y += s.GetHeight(); return *this; }
+    wxRealPoint& operator-=(const wxRealSize& s) { x -= s.GetWidth(); y -= s.GetHeight(); return *this; }
+
+    wxRealPoint operator+(const wxRealSize& s) const { return wxRealPoint(x + s.GetWidth(), y + s.GetHeight()); }
+    wxRealPoint operator-(const wxRealSize& s) const { return wxRealPoint(x - s.GetWidth(), y - s.GetHeight()); }
 };
 
@@ -301,4 +366,108 @@
 
 // ---------------------------------------------------------------------------
+// wxRealRect
+// ---------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRealRect
+{
+public:
+    wxRealRect()
+        : x(0.0), y(0.0), width(0.0), height(0.0)
+        { }
+    wxRealRect(double xx, double yy, double ww, double hh)
+        : x(xx), y(yy), width(ww), height(hh)
+        { }
+    wxRealRect(const wxRealPoint& topLeft, const wxRealPoint& bottomRight);
+    wxRealRect(const wxRealPoint& pos, const wxRealSize& size);
+
+    // default copy ctor and assignment operators ok
+
+    double GetX() const { return x; }
+    void SetX(double xx) { x = xx; }
+
+    double GetY() const { return y; }
+    void SetY(double yy) { y = yy; }
+
+    double GetWidth() const { return width; }
+    void SetWidth(double w) { width = w; }
+
+    double GetHeight() const { return height; }
+    void SetHeight(double h) { height = h; }
+
+    wxRealPoint GetPosition() const { return wxRealPoint(x, y); }
+    void SetPosition( const wxRealPoint &p ) { x = p.x; y = p.y; }
+
+    wxRealSize GetSize() const { return wxRealSize(width, height); }
+    void SetSize( const wxRealSize &s ) { width = s.GetWidth(); height = s.GetHeight(); }
+
+    wxRealPoint GetTopLeft() const { return GetPosition(); }
+    wxRealPoint GetLeftTop() const { return GetTopLeft(); }
+    void SetTopLeft(const wxRealPoint &p) { SetPosition(p); }
+    void SetLeftTop(const wxRealPoint &p) { SetTopLeft(p); }
+
+    wxRealPoint GetBottomRight() const { return wxRealPoint(GetRight(), GetBottom()); }
+    wxRealPoint GetRightBottom() const { return GetBottomRight(); }
+    void SetBottomRight(const wxRealPoint &p) { SetRight(p.x); SetBottom(p.y); }
+    void SetRightBottom(const wxRealPoint &p) { SetBottomRight(p); }
+
+    double GetLeft()   const { return x; }
+    double GetTop()    const { return y; }
+    double GetBottom() const { return y + height - 1; }
+    double GetRight()  const { return x + width - 1; }
+
+    void SetLeft(double left) { x = left; }
+    void SetRight(double right) { width = right - x + 1; }
+    void SetTop(double top) { y = top; }
+    void SetBottom(double bottom) { height = bottom - y + 1; }
+
+    // operations with rect
+    wxRealRect& Inflate(double dx, double dy);
+    wxRealRect& Inflate(double d) { return Inflate(d, d); }
+    wxRealRect Inflate(double dx, double dy) const
+    {
+        wxRealRect r = *this;
+        r.Inflate(dx, dy);
+        return r;
+    }
+
+    wxRealRect& Deflate(double dx, double dy) { return Inflate(-dx, -dy); }
+    wxRealRect& Deflate(double d) { return Inflate(-d); }
+    wxRealRect Deflate(double dx, double dy) const
+    {
+        wxRealRect r = *this;
+        r.Deflate(dx, dy);
+        return r;
+    }
+
+    void Offset(double dx, double dy) { x += dx; y += dy; }
+    void Offset(const wxRealPoint& pt) { Offset(pt.x, pt.y); }
+
+    wxRealRect& Intersect(const wxRealRect& rect);
+    wxRealRect Intersect(const wxRealRect& rect) const
+    {
+        wxRealRect r = *this;
+        r.Intersect(rect);
+        return r;
+    }
+
+    wxRealRect operator+(const wxRealRect& rect) const;
+    wxRealRect& operator+=(const wxRealRect& rect);
+
+    // compare rectangles
+    bool operator==(const wxRealRect& rect) const;
+    bool operator!=(const wxRealRect& rect) const { return !(*this == rect); }
+
+    // return TRUE if the point is (not strcitly) inside the rect
+    bool Inside(double x, double y) const;
+    bool Inside(const wxRealPoint& pt) const { return Inside(pt.x, pt.y); }
+
+    // return TRUE if the rectangles have a non empty intersection
+    bool Intersects(const wxRealRect& rect) const;
+
+public:
+    double x, y, width, height;
+};
+
+// ---------------------------------------------------------------------------
 // wxRect
 // ---------------------------------------------------------------------------
Only in wxWidgets/include/wx: gdicmn.h.orig
diff -bu2r wxWidgets.orig/src/common/gdicmn.cpp wxWidgets/src/common/gdicmn.cpp
--- wxWidgets.orig/src/common/gdicmn.cpp	2004-11-05 23:04:13.000000000 -0500
+++ wxWidgets/src/common/gdicmn.cpp	2004-11-10 15:13:26.000000000 -0500
@@ -220,4 +220,120 @@
 }
 
+wxRealRect::wxRealRect(const wxRealPoint& point1, const wxRealPoint& point2)
+{
+  x = point1.x;
+  y = point1.y;
+  width = point2.x - point1.x;
+  height = point2.y - point1.y;
+
+  if (width < 0)
+  {
+    width = -width;
+    x = point2.x;
+  }
+  width++;
+
+  if (height < 0)
+  {
+    height = -height;
+    y = point2.y;
+  }
+  height++;
+}
+
+wxRealRect::wxRealRect(const wxRealPoint& point, const wxRealSize& size)
+{
+    x = point.x; y = point.y;
+    width = size.x; height = size.y;
+}
+
+bool wxRealRect::operator==(const wxRealRect& rect) const
+{
+  return ((x == rect.x) &&
+          (y == rect.y) &&
+          (width == rect.width) &&
+          (height == rect.height));
+}
+
+wxRealRect& wxRealRect::operator += (const wxRealRect& rect)
+{
+    *this = (*this + rect);
+    return ( *this ) ;
+}
+
+wxRealRect wxRealRect::operator + (const wxRealRect& rect) const
+{
+    int x1 = wxMin(this->x, rect.x);
+    int y1 = wxMin(this->y, rect.y);
+    int y2 = wxMax(y+height, rect.height+rect.y);
+    int x2 = wxMax(x+width, rect.width+rect.x);
+    return wxRealRect(x1, y1, x2-x1, y2-y1);
+}
+
+wxRealRect& wxRealRect::Inflate(double dx, double dy)
+{
+    x -= dx;
+    y -= dy;
+    width += 2*dx;
+    height += 2*dy;
+
+    // check that we didn't make the rectangle invalid by accident (you almost
+    // never want to have negative coords and never want negative size)
+    if ( x < 0 )
+        x = 0;
+    if ( y < 0 )
+        y = 0;
+
+    // what else can we do?
+    if ( width < 0 )
+        width = 0;
+    if ( height < 0 )
+        height = 0;
+
+    return *this;
+}
+
+bool wxRealRect::Inside(double cx, double cy) const
+{
+    return ( (cx >= x) && (cy >= y)
+          && ((cy - y) < height)
+          && ((cx - x) < width)
+          );
+}
+
+wxRealRect& wxRealRect::Intersect(const wxRealRect& rect)
+{
+    double	x2 = GetRight(),
+			y2 = GetBottom();
+
+    if ( x < rect.x )
+        x = rect.x;
+    if ( y < rect.y )
+        y = rect.y;
+    if ( x2 > rect.GetRight() )
+        x2 = rect.GetRight();
+    if ( y2 > rect.GetBottom() )
+        y2 = rect.GetBottom();
+
+    width = x2 - x + 1;
+    height = y2 - y + 1;
+
+    if ( width <= 0 || height <= 0 )
+    {
+        width =
+        height = 0;
+    }
+
+    return *this;
+}
+
+bool wxRealRect::Intersects(const wxRealRect& rect) const
+{
+    wxRealRect r = Intersect(rect);
+
+    // if there is no intersection, both width and height are 0
+    return r.width != 0;
+}
+
 // ============================================================================
 // wxColourDatabase
Only in wxWidgets/src/common: gdicmn.cpp.orig

 	  	 

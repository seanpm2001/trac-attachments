--- a/src/msw/dc.cpp
+++ b/src/msw/dc.cpp
@@ -2758,18 +2758,6 @@ static bool AlphaBlt(wxMSWDCImpl* dcDst,
     bf.BlendFlags = 0;
     bf.SourceConstantAlpha = 0xff;
     bf.AlphaFormat = AC_SRC_ALPHA;
-
-    if ( !wxDynLoadWrappers::AlphaBlend
-          (
-            GetHdcOf(*dcDst), x, y, dstWidth, dstHeight,
-            hdcSrc, srcX, srcY, srcWidth, srcHeight,
-            bf
-          ) )
-    {
-        wxLogLastError(wxT("AlphaBlend"));
-        return false;
-    }
-
     // There is an extra complication with drawing bitmaps with alpha
     // on bitmaps without alpha: AlphaBlt() modifies the alpha
     // component of the destination bitmap even if it hadn't had it
@@ -2778,53 +2766,53 @@ static bool AlphaBlt(wxMSWDCImpl* dcDst,
     // are now fully transparent: they already had 0 value of alpha
     // before but it didn't count as long as all other pixels had 0
     // alpha as well, but now that some of them are not transparent any
-    // more, the rest of pixels with 0 alpha is transparent. So undo
-    // this to avoid "losing" the existing bitmap contents outside of
-    // the area affected by AlphaBlt(), see #14403.
-#ifdef wxHAS_RAW_BITMAP
+    // more, the rest of pixels with 0 alpha is transparent.
+    // (See #14403)
+    // To avoid "losing" the existing bitmap contents outside of
+    // the area affected by AlphaBlt(), we do actual drawing
+    // on the 24-bit copy of the destination area and afterwards
+    // transfer the result back to the destination bitmap.
     const wxBitmap& bmpDst = dcDst->GetSelectedBitmap();
     if ( bmpDst.IsOk() && !bmpDst.HasAlpha() && bmpDst.GetDepth() == 32 )
     {
-        // We need to deselect the bitmap from the memory DC it is
-        // currently selected into before modifying it.
-        wxBitmap bmpOld = bmpDst;
-        dcDst->DoSelect(wxNullBitmap);
-
-        // Notice the extra block: we must destroy wxAlphaPixelData
-        // before selecting the bitmap into the DC again.
+        // Temporary 24-bit bitmap to hold the contenst
+        // of the destination area.
+        // (24-bit bitmap is enough since we know
+        // that destination is 32-bit but has no alpha channel.)
+        wxBitmap bmp(dstWidth, dstHeight, 24);
+        wxMemoryDC dc(bmp);
+
+        // Fetch the content of the destination area into the temporary buffer.
+        wxRect r(x, y, dstWidth, dstHeight);
+        dc.DrawBitmap(dcDst->DoGetAsBitmap(&r), 0, 0);
+        // Drawing the source over the temporary buffer.
+        if ( !wxDynLoadWrappers::AlphaBlend
+                (
+                GetHdcOf(dc), 0, 0, dstWidth, dstHeight,
+                hdcSrc, srcX, srcY, srcWidth, srcHeight,
+                bf
+                ) )
         {
-            wxAlphaPixelData data(bmpOld);
-            if ( data )
-            {
-                wxAlphaPixelData::Iterator p(data);
-                for ( int y = 0; y < data.GetHeight(); y++ )
-                {
-                    wxAlphaPixelData::Iterator rowStart = p;
-
-                    for ( int x = 0; x < data.GetWidth(); x++ )
-                    {
-                        // We choose to use wxALPHA_TRANSPARENT instead
-                        // of perhaps more logical wxALPHA_OPAQUE here
-                        // to ensure that the bitmap remains the same
-                        // as before, i.e. without any alpha at all.
-                        p.Alpha() = wxALPHA_TRANSPARENT;
-                        ++p;
-                    }
-
-                    p = rowStart;
-                    p.OffsetY(data, 1);
-                }
-            }
+            wxLogLastError(wxT("AlphaBlend"));
+            return false;
         }
 
-        // Using wxAlphaPixelData sets the internal "has alpha" flag
-        // which is usually what we need, but in this particular case
-        // we use it to get rid of alpha, not set it, so reset it back.
-        bmpOld.ResetAlpha();
-
-        dcDst->DoSelect(bmpOld);
+        // Transfer temporary buffer back to the destination area.
+        dcDst->DoBlit(x, y, dstWidth, dstHeight, &dc, 0, 0);
+    }
+    else
+    {
+        if ( !wxDynLoadWrappers::AlphaBlend
+              (
+                GetHdcOf(*dcDst), x, y, dstWidth, dstHeight,
+                hdcSrc, srcX, srcY, srcWidth, srcHeight,
+                bf
+              ) )
+        {
+            wxLogLastError(wxT("AlphaBlend"));
+            return false;
+        }
     }
-#endif // wxHAS_RAW_BITMAP
 
     return true;
 }

Index: xh_sizer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xrc/xh_sizer.cpp,v
retrieving revision 1.26
diff -u -r1.26 xh_sizer.cpp
--- xh_sizer.cpp	2006/03/08 00:05:44	1.26
+++ xh_sizer.cpp	2006/03/15 13:17:08
@@ -26,7 +26,32 @@
 #include "wx/panel.h"
 #include "wx/tokenzr.h"
 
+/* static wxString objects to avoid awfully repeated construction/destruction
+   of wxStrings from string literals (constants) in this hotspot code */
+static const wxString str_sizeritem = wxT("sizeritem");
+static const wxString str_spacer = wxT("spacer");
+static const wxString str_wxBoxSizer = wxT("wxBoxSizer");
+static const wxString str_wxStaticBoxSizer = wxT("wxStaticBoxSizer");
+static const wxString str_wxGridSizer = wxT("wxGridSizer");
+static const wxString str_wxFlexGridSizer = wxT("wxFlexGridSizer");
+static const wxString str_wxGridBagSizer = wxT("wxGridBagSizer");
+static const wxString str_object = wxT("object");
+static const wxString str_object_ref = wxT("object_ref");
+static const wxString str_minsize = wxT("minsize");
+static const wxString str_orient = wxT("orient");
+static const wxString str_label = wxT("label");
+static const wxString str_rows = wxT("rows");
+static const wxString str_cols = wxT("cols");
+static const wxString str_vgap = wxT("vgap");
+static const wxString str_hgap = wxT("hgap");
+static const wxString str_option = wxT("option");
+static const wxString str_flag = wxT("flag");
+static const wxString str_border = wxT("border");
+static const wxString str_ratio = wxT("ratio");
+static const wxString str_wxStdDialogButtonSizer = wxT("wxStdDialogButtonSizer");
+static const wxString str_button = wxT("button");
 
+
 //-----------------------------------------------------------------------------
 // wxSizerXmlHandler
 //-----------------------------------------------------------------------------
@@ -78,8 +103,8 @@
 bool wxSizerXmlHandler::CanHandle(wxXmlNode *node)
 {
     return ( (!m_isInside && IsSizerNode(node)) ||
-             (m_isInside && IsOfClass(node, wxT("sizeritem"))) ||
-             (m_isInside && IsOfClass(node, wxT("spacer")))
+             (m_isInside && IsOfClass(node, str_sizeritem)) ||
+             (m_isInside && IsOfClass(node, str_spacer))
         );
 }
 
@@ -101,20 +126,20 @@
 
 bool wxSizerXmlHandler::IsSizerNode(wxXmlNode *node)
 {
-    return (IsOfClass(node, wxT("wxBoxSizer"))) ||
-           (IsOfClass(node, wxT("wxStaticBoxSizer"))) ||
-           (IsOfClass(node, wxT("wxGridSizer"))) ||
-           (IsOfClass(node, wxT("wxFlexGridSizer"))) ||
-           (IsOfClass(node, wxT("wxGridBagSizer")));
+    return (IsOfClass(node, str_wxBoxSizer)) ||
+           (IsOfClass(node, str_wxStaticBoxSizer)) ||
+           (IsOfClass(node, str_wxGridSizer)) ||
+           (IsOfClass(node, str_wxFlexGridSizer)) ||
+           (IsOfClass(node, str_wxGridBagSizer));
 }
 
 
 wxObject* wxSizerXmlHandler::Handle_sizeritem()
 {
     // find the item to be managed by this sizeritem
-    wxXmlNode *n = GetParamNode(wxT("object"));
+    wxXmlNode *n = GetParamNode(str_object);
     if ( !n )
-        n = GetParamNode(wxT("object_ref"));
+        n = GetParamNode(str_object_ref);
 
     // did we find one?
     if (n)
@@ -206,7 +231,7 @@
         return NULL;
     }
 
-    wxSize minsize = GetSize(wxT("minsize"));
+    wxSize minsize = GetSize(str_minsize);
     if (!(minsize == wxDefaultSize))
         sizer->SetMinSize(minsize);
 
@@ -245,7 +270,7 @@
 
 wxSizer*  wxSizerXmlHandler::Handle_wxBoxSizer()
 {
-    return new wxBoxSizer(GetStyle(wxT("orient"), wxHORIZONTAL));
+    return new wxBoxSizer(GetStyle(str_orient, wxHORIZONTAL));
 }
 
 wxSizer*  wxSizerXmlHandler::Handle_wxStaticBoxSizer()
@@ -253,25 +278,25 @@
     return new wxStaticBoxSizer(
             new wxStaticBox(m_parentAsWindow,
                             GetID(),
-                            GetText(wxT("label")),
+                            GetText(str_label),
                             wxDefaultPosition, wxDefaultSize,
                             0/*style*/,
                             GetName()),
-            GetStyle(wxT("orient"), wxHORIZONTAL));
+            GetStyle(str_orient, wxHORIZONTAL));
 }
 
 wxSizer*  wxSizerXmlHandler::Handle_wxGridSizer()
 {
-    return new wxGridSizer(GetLong(wxT("rows")), GetLong(wxT("cols")),
-                           GetDimension(wxT("vgap")), GetDimension(wxT("hgap")));
+    return new wxGridSizer(GetLong(str_rows), GetLong(str_cols),
+                           GetDimension(str_vgap), GetDimension(str_hgap));
 }
 
 
 wxSizer*  wxSizerXmlHandler::Handle_wxFlexGridSizer()
 {
     wxFlexGridSizer *sizer =
-        new wxFlexGridSizer(GetLong(wxT("rows")), GetLong(wxT("cols")),
-                            GetDimension(wxT("vgap")), GetDimension(wxT("hgap")));
+        new wxFlexGridSizer(GetLong(str_rows), GetLong(str_cols),
+                            GetDimension(str_vgap), GetDimension(str_hgap));
     SetGrowables(sizer, wxT("growablerows"), true);
     SetGrowables(sizer, wxT("growablecols"), false);
     return sizer;
@@ -281,7 +306,7 @@
 wxSizer*  wxSizerXmlHandler::Handle_wxGridBagSizer()
 {
     wxGridBagSizer *sizer =
-        new wxGridBagSizer(GetDimension(wxT("vgap")), GetDimension(wxT("hgap")));
+        new wxGridBagSizer(GetDimension(str_vgap), GetDimension(str_hgap));
     SetGrowables(sizer, wxT("growablerows"), true);
     SetGrowables(sizer, wxT("growablecols"), false);
     return sizer;
@@ -339,13 +364,13 @@
 
 void wxSizerXmlHandler::SetSizerItemAttributes(wxSizerItem* sitem)
 {
-    sitem->SetProportion(GetLong(wxT("option")));  // Should this check for "proportion" too?
-    sitem->SetFlag(GetStyle(wxT("flag")));
-    sitem->SetBorder(GetDimension(wxT("border")));
-    wxSize sz = GetSize(wxT("minsize"));
+    sitem->SetProportion(GetLong(str_option));  // Should this check for "proportion" too?
+    sitem->SetFlag(GetStyle(str_flag));
+    sitem->SetBorder(GetDimension(str_border));
+    wxSize sz = GetSize(str_minsize);
     if (!(sz == wxDefaultSize))
         sitem->SetMinSize(sz);
-    sz = GetSize(wxT("ratio"));
+    sz = GetSize(str_ratio);
     if (!(sz == wxDefaultSize))
         sitem->SetRatio(sz);
 
@@ -401,9 +426,9 @@
         wxASSERT( m_parentSizer );
 
         // find the item to be managed by this sizeritem
-        wxXmlNode *n = GetParamNode(wxT("object"));
+        wxXmlNode *n = GetParamNode(str_object);
         if ( !n )
-            n = GetParamNode(wxT("object_ref"));
+            n = GetParamNode(str_object_ref);
 
         // did we find one?
         if (n)
@@ -428,8 +453,8 @@
 
 bool wxStdDialogButtonSizerXmlHandler::CanHandle(wxXmlNode *node)
 {
-    return (!m_isInside && IsOfClass(node, wxT("wxStdDialogButtonSizer"))) ||
-           (m_isInside && IsOfClass(node, wxT("button")));
+    return (!m_isInside && IsOfClass(node, str_wxStdDialogButtonSizer)) ||
+           (m_isInside && IsOfClass(node, str_button));
 }
 
 #endif // wxUSE_XRC
Index: xmlres.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xrc/xmlres.cpp,v
retrieving revision 1.79
diff -u -r1.79 xmlres.cpp
--- xmlres.cpp	2006/03/04 22:40:16	1.79
+++ xmlres.cpp	2006/03/15 13:17:08
@@ -44,6 +44,22 @@
 #include "wx/arrimpl.cpp"
 WX_DEFINE_OBJARRAY(wxXmlResourceDataRecords)
 
+/* static wxString objects to avoid awfully repeated construction/destruction
+   of wxStrings from string literals (constants) in this hotspot code */
+static const wxString str_minus_1 = wxT("-1");
+static const wxString str_class = wxT("class");
+static const wxString str_name = wxT("name");
+static const wxString str_platform = wxT("platform");
+static const wxString str_ref = wxT("ref");
+static const wxString str_subclass = wxT("subclass");
+static const wxString str_wxBitmap = wxT("wxBitmap");
+static const wxString str_wxDialog = wxT("wxDialog");
+static const wxString str_wxFrame = wxT("wxFrame");
+static const wxString str_wxIcon = wxT("wxIcon");
+static const wxString str_wxMenu = wxT("wxMenu");
+static const wxString str_wxMenuBar = wxT("wxMenuBar");
+static const wxString str_wxPanel = wxT("wxPanel");
+static const wxString str_wxToolBar = wxT("wxToolBar");
 
 wxXmlResource *wxXmlResource::ms_instance = NULL;
 
@@ -231,14 +247,14 @@
 
 wxMenu *wxXmlResource::LoadMenu(const wxString& name)
 {
-    return (wxMenu*)CreateResFromNode(FindResource(name, wxT("wxMenu")), NULL, NULL);
+    return (wxMenu*)CreateResFromNode(FindResource(name, str_wxMenu), NULL, NULL);
 }
 
 
 
 wxMenuBar *wxXmlResource::LoadMenuBar(wxWindow *parent, const wxString& name)
 {
-    return (wxMenuBar*)CreateResFromNode(FindResource(name, wxT("wxMenuBar")), parent, NULL);
+    return (wxMenuBar*)CreateResFromNode(FindResource(name, str_wxMenuBar), parent, NULL);
 }
 
 
@@ -246,47 +262,47 @@
 #if wxUSE_TOOLBAR
 wxToolBar *wxXmlResource::LoadToolBar(wxWindow *parent, const wxString& name)
 {
-    return (wxToolBar*)CreateResFromNode(FindResource(name, wxT("wxToolBar")), parent, NULL);
+    return (wxToolBar*)CreateResFromNode(FindResource(name, str_wxToolBar), parent, NULL);
 }
 #endif
 
 
 wxDialog *wxXmlResource::LoadDialog(wxWindow *parent, const wxString& name)
 {
-    return (wxDialog*)CreateResFromNode(FindResource(name, wxT("wxDialog")), parent, NULL);
+    return (wxDialog*)CreateResFromNode(FindResource(name, str_wxDialog), parent, NULL);
 }
 
 bool wxXmlResource::LoadDialog(wxDialog *dlg, wxWindow *parent, const wxString& name)
 {
-    return CreateResFromNode(FindResource(name, wxT("wxDialog")), parent, dlg) != NULL;
+    return CreateResFromNode(FindResource(name, str_wxDialog), parent, dlg) != NULL;
 }
 
 
 
 wxPanel *wxXmlResource::LoadPanel(wxWindow *parent, const wxString& name)
 {
-    return (wxPanel*)CreateResFromNode(FindResource(name, wxT("wxPanel")), parent, NULL);
+    return (wxPanel*)CreateResFromNode(FindResource(name, str_wxPanel), parent, NULL);
 }
 
 bool wxXmlResource::LoadPanel(wxPanel *panel, wxWindow *parent, const wxString& name)
 {
-    return CreateResFromNode(FindResource(name, wxT("wxPanel")), parent, panel) != NULL;
+    return CreateResFromNode(FindResource(name, str_wxPanel), parent, panel) != NULL;
 }
 
 wxFrame *wxXmlResource::LoadFrame(wxWindow* parent, const wxString& name)
 {
-    return (wxFrame*)CreateResFromNode(FindResource(name, wxT("wxFrame")), parent, NULL);
+    return (wxFrame*)CreateResFromNode(FindResource(name, str_wxFrame), parent, NULL);
 }
 
 bool wxXmlResource::LoadFrame(wxFrame* frame, wxWindow *parent, const wxString& name)
 {
-    return CreateResFromNode(FindResource(name, wxT("wxFrame")), parent, frame) != NULL;
+    return CreateResFromNode(FindResource(name, str_wxFrame), parent, frame) != NULL;
 }
 
 wxBitmap wxXmlResource::LoadBitmap(const wxString& name)
 {
     wxBitmap *bmp = (wxBitmap*)CreateResFromNode(
-                               FindResource(name, wxT("wxBitmap")), NULL, NULL);
+                               FindResource(name, str_wxBitmap), NULL, NULL);
     wxBitmap rt;
 
     if (bmp) { rt = *bmp; delete bmp; }
@@ -296,7 +312,7 @@
 wxIcon wxXmlResource::LoadIcon(const wxString& name)
 {
     wxIcon *icon = (wxIcon*)CreateResFromNode(
-                            FindResource(name, wxT("wxIcon")), NULL, NULL);
+                            FindResource(name, str_wxIcon), NULL, NULL);
     wxIcon rt;
 
     if (icon) { rt = *icon; delete icon; }
@@ -339,7 +355,7 @@
     while (c)
     {
         isok = false;
-        if (!c->GetPropVal(wxT("platform"), &s))
+        if (!c->GetPropVal(str_platform, &s))
             isok = true;
         else
         {
@@ -391,6 +407,7 @@
     wxUnusedVar(file);
     wxFileSystem fsys;
 #   endif
+    size_t n;
 
     wxString encoding(wxT("UTF-8"));
 #if !wxUSE_UNICODE && wxUSE_INTL
@@ -403,7 +420,8 @@
     }
 #endif
 
-    for (size_t i = 0; i < m_data.GetCount(); i++)
+    n = m_data.GetCount();
+    for (size_t i = 0; i < n; i++)
     {
         modif = (m_data[i].Doc == NULL);
 
@@ -469,8 +487,10 @@
             {
                 long version;
                 int v1, v2, v3, v4;
+                static const wxString str_version = wxT("version");
+                static const wxString str_null_ver = wxT("0.0.0.0");
                 wxString verstr = m_data[i].Doc->GetRoot()->GetPropVal(
-                                      wxT("version"), wxT("0.0.0.0"));
+                                      str_version, str_null_ver);
                 if (wxSscanf(verstr.c_str(), wxT("%i.%i.%i.%i"),
                     &v1, &v2, &v3, &v4) == 4)
                     version = v1*256*256*256+v2*256*256+v3*256+v4;
@@ -522,20 +542,20 @@
         if ( node->GetType() == wxXML_ELEMENT_NODE &&
                  (node->GetName() == wxT("object") ||
                   node->GetName() == wxT("object_ref")) &&
-             node->GetPropVal(wxT("name"), &dummy) && dummy == name )
+             node->GetPropVal(str_name, &dummy) && dummy == name )
         {
-            wxString cls(node->GetPropVal(wxT("class"), wxEmptyString));
+            wxString cls(node->GetPropVal(str_class, wxEmptyString));
             if (!classname || cls == classname)
                 return node;
             // object_ref may not have 'class' property:
             if (cls.empty() && node->GetName() == wxT("object_ref"))
             {
-                wxString refName = node->GetPropVal(wxT("ref"), wxEmptyString);
+                wxString refName = node->GetPropVal(str_ref, wxEmptyString);
                 if (refName.empty())
                     continue;
                 wxXmlNode* refNode = FindResource(refName, wxEmptyString, true);
                 if (refNode &&
-                    refNode->GetPropVal(wxT("class"), wxEmptyString) == classname)
+                    refNode->GetPropVal(str_class, wxEmptyString) == classname)
                 {
                     return node;
                 }
@@ -563,16 +583,19 @@
                                        const wxString& classname,
                                        bool recursive)
 {
+    size_t n;
+    wxXmlNode *root;
+
     UpdateResources(); //ensure everything is up-to-date
 
-    wxString dummy;
-    for (size_t f = 0; f < m_data.GetCount(); f++)
+    n = m_data.GetCount();
+    for (size_t f = 0; f < n; f++)
     {
-        if ( m_data[f].Doc == NULL || m_data[f].Doc->GetRoot() == NULL )
+        if ( m_data[f].Doc == NULL
+        ||  (root = m_data[f].Doc->GetRoot()) == NULL )
             continue;
 
-        wxXmlNode* found = DoFindResource(m_data[f].Doc->GetRoot(),
-                                          name, classname, recursive);
+        wxXmlNode* found = DoFindResource(root, name, classname, recursive);
         if ( found )
         {
 #if wxUSE_FILESYSTEM
@@ -610,13 +633,13 @@
     // Merge child nodes:
     for (wxXmlNode* node = with.GetChildren(); node; node = node->GetNext())
     {
-        wxString name = node->GetPropVal(wxT("name"), wxEmptyString);
+        const wxString &name = node->GetPropVal(str_name, wxEmptyString);
         wxXmlNode *dnode;
 
         for (dnode = dest.GetChildren(); dnode; dnode = dnode->GetNext() )
         {
             if ( dnode->GetName() == node->GetName() &&
-                 dnode->GetPropVal(wxT("name"), wxEmptyString) == name &&
+                 dnode->GetPropVal(str_name, wxEmptyString) == name &&
                  dnode->GetType() == node->GetType() )
             {
                 MergeNodes(*dnode, *node);
@@ -641,7 +664,7 @@
     // handling of referenced resource
     if ( node->GetName() == wxT("object_ref") )
     {
-        wxString refName = node->GetPropVal(wxT("ref"), wxEmptyString);
+        wxString refName = node->GetPropVal(str_ref, wxEmptyString);
         wxXmlNode* refNode = FindResource(refName, wxEmptyString, true);
 
         if ( !refNode )
@@ -736,10 +759,10 @@
     wxWindow *myParentAW = m_parentAsWindow;
 
     m_instance = instance;
-    if (!m_instance && node->HasProp(wxT("subclass")) &&
+    if (!m_instance && node->HasProp(str_subclass) &&
         !(m_resource->GetFlags() & wxXRC_NO_SUBCLASSING))
     {
-        wxString subclass = node->GetPropVal(wxT("subclass"), wxEmptyString);
+        wxString subclass = node->GetPropVal(str_subclass, wxEmptyString);
         if (!subclass.empty())
         {
             for (wxXmlSubclassFactoriesList::compatibility_iterator i = wxXmlResource::ms_subclassFactories->GetFirst();
@@ -752,7 +775,7 @@
 
             if (!m_instance)
             {
-                wxString name = node->GetPropVal(wxT("name"), wxEmptyString);
+                wxString name = node->GetPropVal(str_name, wxEmptyString);
                 wxLogError(_("Subclass '%s' not found for resource '%s', not subclassing!"),
                            subclass.c_str(), name.c_str());
             }
@@ -760,7 +783,7 @@
     }
 
     m_node = node;
-    m_class = node->GetPropVal(wxT("class"), wxEmptyString);
+    m_class = node->GetPropVal(str_class, wxEmptyString);
     m_parent = parent;
     m_parentAsWindow = wxDynamicCast(m_parent, wxWindow);
 
@@ -963,7 +986,7 @@
 
 wxString wxXmlResourceHandler::GetName()
 {
-    return m_node->GetPropVal(wxT("name"), wxT("-1"));
+    return m_node->GetPropVal(str_name, str_minus_1);
 }
 
 

 	  	 

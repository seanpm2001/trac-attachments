Index: include/wx/filename.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/include/wx/filename.h,v
retrieving revision 1.53
diff -b -u -2 -r1.53 filename.h
--- include/wx/filename.h	2004/05/23 20:50:21	1.53
+++ include/wx/filename.h	2004/06/10 16:57:39
@@ -426,5 +426,5 @@
     // check whether this dir is valid for Append/Prepend/InsertDir()
     static bool IsValidDirComponent(const wxString& dir);
-
+	static void SeparateVolume(wxString *pstrfullpathWithVolume,wxString *pstrVolume,wxPathFormat format);
     // the drive/volume/device specification (always empty for Unix)
     wxString        m_volume;
Index: src/common/filename.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/src/common/filename.cpp,v
retrieving revision 1.133
diff -b -u -2 -r1.133 filename.cpp
--- src/common/filename.cpp	2004/05/23 20:52:01	1.133
+++ src/common/filename.cpp	2004/06/10 16:59:01
@@ -316,13 +316,21 @@
 {
     m_dirs.Clear();
-
+	m_volume.clear();
     if ( !path.empty() )
     {
         wxPathFormat my_format = GetFormat( format );
-        wxString my_path = path;
+		wxString my_path=path;
+		wxString my_volume;
+		SeparateVolume(&my_path,&my_volume,my_format);
 
         // 1) Determine if the path is relative or absolute.
+		if(!my_volume.empty() )
+		{
+			m_relative = false;
+			SetVolume(my_volume);  // set our volume  to the volume of the new path
+		}
+		else
+		{
         wxChar leadingChar = my_path[0u];
-
         switch (my_format)
         {
@@ -363,5 +371,5 @@
 
         }
-
+		}
         // 2) Break up the path into its members. If the original path
         //    was just "/" or "\\", m_dirs will be empty. We know from
@@ -1617,17 +1625,8 @@
 // path splitting function
 // ----------------------------------------------------------------------------
-
 /* static */
-void wxFileName::SplitPath(const wxString& fullpathWithVolume,
-                           wxString *pstrVolume,
-                           wxString *pstrPath,
-                           wxString *pstrName,
-                           wxString *pstrExt,
-                           wxPathFormat format)
+void wxFileName::SeparateVolume(wxString *pstrfullpathWithVolume,wxString *pstrVolume,wxPathFormat format)
 {
-    format = GetFormat(format);
-
-    wxString fullpath = fullpathWithVolume;
-
+	wxString & fullpath = *pstrfullpathWithVolume; // make life easier
     // under VMS the end of the path is ']', not the path separator used to
     // separate the components
@@ -1673,4 +1672,24 @@
     }
 
+}
+
+/* static */
+void wxFileName::SplitPath(const wxString& fullpathWithVolume,
+                           wxString *pstrVolume,
+                           wxString *pstrPath,
+                           wxString *pstrName,
+                           wxString *pstrExt,
+                           wxPathFormat format)
+{
+    format = GetFormat(format);
+
+    wxString fullpath = fullpathWithVolume;
+
+    // under VMS the end of the path is ']', not the path separator used to
+    // separate the components
+    wxString sepPath = format == wxPATH_VMS ? wxString(_T(']'))
+                                            : GetPathSeparators(format);
+
+	SeparateVolume(&fullpath, pstrVolume,format);
     // find the positions of the last dot and last path separator in the path
     size_t posLastDot = fullpath.find_last_of(wxFILE_SEP_EXT);

 	  	 

Index: docs/latex/wx/filesys.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/filesys.tex,v
retrieving revision 1.13
diff -bu10 -r1.13 docs/latex/wx/filesys.tex
--- docs/latex/wx/filesys.tex
+++ docs/latex/wx/filesys.tex
@@ -29,23 +29,30 @@
 \membersection{wxFileSystem::wxFileSystem}\label{wxfilesystemwxfilesystem}
 
 \func{}{wxFileSystem}{\void}
 
 Constructor. 
 
 \membersection{wxFileSystem::AddHandler}\label{wxfilesystemaddhandler}
 
 \func{static void}{AddHandler}{\param{wxFileSystemHandler }{*handler}}
 
-This static function adds new handler into the list of handlers.
+This static function prepends the new handler into the list of handlers.
 The \helpref{handlers}{wxfilesystemhandler} provide access to virtual FS.
 
+Note that when \helpref{OpenFile}{wxfilesystemopenfile} is called, the
+list of handlers is cycled from the first to the last item until one of
+the handler returns with success. This means that the handlers at the top of
+the list, i.e. handlers added later, have higher priority over handlers at the
+bottom of the list, i.e. handlers added earlier.
+
+
 \wxheading{Note}
 
 You can call:
 
 \begin{verbatim}
 wxFileSystem::AddHandler(new My_FS_Handler);
 \end{verbatim}
 
 This is because (a) AddHandler is a static method, and (b) the handlers
 are deleted in wxFileSystem's destructor so that you don't have to
Index: src/common/filesys.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filesys.cpp,v
retrieving revision 1.62
diff -bu10 -r1.62 src/common/filesys.cpp
--- src/common/filesys.cpp
+++ src/common/filesys.cpp
@@ -444,21 +444,26 @@
 wxString wxFileSystem::FindNext()
 {
     if (m_FindFileHandler == NULL) return wxEmptyString;
     else return m_FindFileHandler -> FindNext();
 }
 
 
 
 void wxFileSystem::AddHandler(wxFileSystemHandler *handler)
 {
-    m_Handlers.Append(handler);
+    // prepend the given handler to the list; this will make it
+    // the handler with the highest 'priority'
+    // (i.e. the handler checked first).
+
+    // NB: casts are to avoid errors about ambiguous call
+    m_Handlers.Insert((size_t)0, (wxObject *)handler);
 }
 
 
 void wxFileSystem::CleanUpHandlers()
 {
     WX_CLEAR_LIST(wxList, m_Handlers);
 }
 
 static const wxString g_unixPathString(wxT("/"));
 static const wxString g_nativePathString(wxFILE_SEP_PATH);

 	  	 

Index: include/wx/ribbon/art.h
===================================================================
--- include/wx/ribbon/art.h	(revision 72304)
+++ include/wx/ribbon/art.h	(working copy)
@@ -21,6 +21,7 @@
 #include "wx/font.h"
 #include "wx/pen.h"
 #include "wx/bitmap.h"
+#include "wx/ribbon/bar.h"
 
 class WXDLLIMPEXP_FWD_CORE wxDC;
 class WXDLLIMPEXP_FWD_CORE wxWindow;
@@ -306,7 +307,7 @@
                         wxDC& dc,
                         wxRibbonBar* wnd,
                         const wxRect& rect,
-                        bool upBitmap) = 0;
+                        wxRibbonToggleButtonState ribbon_state) = 0;
 
     virtual void GetBarTabWidth(
                         wxDC& dc,
@@ -510,7 +511,7 @@
                         wxDC& dc,
                         wxRibbonBar* wnd,
                         const wxRect& rect,
-                        bool upBitmap);
+                        wxRibbonToggleButtonState ribbon_state);
 
     void GetBarTabWidth(
                         wxDC& dc,
@@ -632,6 +633,7 @@
     wxBitmap m_panel_extension_bitmap[2];
     wxBitmap m_ribbon_toggle_up_bitmap[2];
     wxBitmap m_ribbon_toggle_down_bitmap[2];
+    wxBitmap m_ribbon_toggle_pin_bitmap[2];
 
     wxColour m_primary_scheme_colour;
     wxColour m_secondary_scheme_colour;
Index: include/wx/ribbon/bar.h
===================================================================
--- include/wx/ribbon/bar.h	(revision 72304)
+++ include/wx/ribbon/bar.h	(working copy)
@@ -41,6 +41,13 @@
                                 | wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS
 };
 
+enum wxRibbonToggleButtonState
+{
+    wxRIBBON_BAR_TOGGLE_BUTTON_EXPANDED,
+    wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED,
+    wxRIBBON_BAR_TOGGLE_BUTTON_PINNED
+};
+
 class WXDLLIMPEXP_RIBBON wxRibbonBarEvent : public wxNotifyEvent
 {
 public:
@@ -140,6 +147,8 @@
     // Implementation only.
     bool IsToggleButtonHovered() const { return m_toggle_button_hovered; }
 
+    void HideIfPinned();
+
 protected:
     friend class wxRibbonPage;
 
@@ -170,6 +179,8 @@
     void OnMouseLeave(wxMouseEvent& evt);
     void OnMouseDoubleClick(wxMouseEvent& evt);
     void DoMouseButtonCommon(wxMouseEvent& evt, wxEventType tab_event_type);
+    void OnKillFocus(wxFocusEvent& evt);
+    
 
     wxRibbonPageTabInfoArray m_pages;
     wxRect m_tab_scroll_left_button_rect;
@@ -191,6 +202,8 @@
     bool m_bar_hovered;
     bool m_toggle_button_hovered;
 
+    wxRibbonToggleButtonState m_ribbon_state;
+
 #ifndef SWIG
     DECLARE_CLASS(wxRibbonBar)
     DECLARE_EVENT_TABLE()
Index: include/wx/ribbon/page.h
===================================================================
--- include/wx/ribbon/page.h	(revision 72304)
+++ include/wx/ribbon/page.h	(working copy)
@@ -61,6 +61,8 @@
 
     virtual void RemoveChild(wxWindowBase *child);
 
+    void HideIfPinned();
+
 protected:
     virtual wxSize DoGetBestSize() const;
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }
Index: include/wx/ribbon/panel.h
===================================================================
--- include/wx/ribbon/panel.h	(revision 72304)
+++ include/wx/ribbon/panel.h	(working copy)
@@ -84,6 +84,8 @@
 
     long GetFlags() { return m_flags; }
 
+    void HideIfPinned();
+
 protected:
     virtual wxSize DoGetBestSize() const;
     virtual wxSize GetPanelSizerBestSize() const;
Index: src/ribbon/art_msw.cpp
===================================================================
--- src/ribbon/art_msw.cpp	(revision 72304)
+++ src/ribbon/art_msw.cpp	(working copy)
@@ -19,7 +19,6 @@
 
 #include "wx/ribbon/art.h"
 #include "wx/ribbon/art_internal.h"
-#include "wx/ribbon/bar.h"
 #include "wx/ribbon/buttonbar.h"
 #include "wx/ribbon/gallery.h"
 #include "wx/ribbon/toolbar.h"
@@ -122,6 +121,22 @@
   "x     x",
   "       ",};
 
+static const char* const ribbon_toggle_pin_xpm[] = {
+  "12 9 3 1",
+  "  c None",
+  "x c #FF00FF",
+  ". c #FF00FF",
+  "   xx       ",
+  "   x.x   xxx",
+  "   x..xxx..x",
+  "xxxx.......x",
+  "x..........x",
+  "xxxx.......x",
+  "   x..xxx..x",
+  "   x.x   xxx",
+  "   xx       "
+};
+
 wxRibbonMSWArtProvider::wxRibbonMSWArtProvider(bool set_colour_scheme)
 {
     m_flags = 0;
@@ -343,6 +358,7 @@
         copy->m_panel_extension_bitmap[i] = m_panel_extension_bitmap[i];
         copy->m_ribbon_toggle_up_bitmap[i] = m_ribbon_toggle_up_bitmap[i];
         copy->m_ribbon_toggle_down_bitmap[i] = m_ribbon_toggle_down_bitmap[i];
+        copy->m_ribbon_toggle_pin_bitmap[i] = m_ribbon_toggle_pin_bitmap[i];
     }
     copy->m_toolbar_drop_bitmap = m_toolbar_drop_bitmap;
 
@@ -1023,11 +1039,13 @@
             m_page_toggle_face_colour = colour;
             m_ribbon_toggle_down_bitmap[0] = wxRibbonLoadPixmap(panel_toggle_down_xpm, colour);
             m_ribbon_toggle_up_bitmap[0] = wxRibbonLoadPixmap(panel_toggle_up_xpm, colour);
+            m_ribbon_toggle_pin_bitmap[0] = wxRibbonLoadPixmap(ribbon_toggle_pin_xpm, colour);
             break;
         case wxRIBBON_ART_PAGE_TOGGLE_HOVER_FACE_COLOUR:
             m_page_toggle_hover_face_colour = colour;
             m_ribbon_toggle_down_bitmap[1] = wxRibbonLoadPixmap(panel_toggle_down_xpm, colour);
             m_ribbon_toggle_up_bitmap[1] = wxRibbonLoadPixmap(panel_toggle_up_xpm, colour);
+            m_ribbon_toggle_pin_bitmap[1] = wxRibbonLoadPixmap(ribbon_toggle_pin_xpm, colour);
             break;
         default:
             wxFAIL_MSG(wxT("Invalid Metric Ordinal"));
@@ -2482,8 +2500,9 @@
 wxRibbonMSWArtProvider::DrawToggleButton(wxDC& dc,
                                          wxRibbonBar* wnd,
                                          const wxRect& rect,
-                                         bool upBitmap)
+                                         wxRibbonToggleButtonState ribbon_state)
 {
+    int bindex = 0;
     DrawPartialPageBackground(dc, wnd, rect, false);
 
     dc.DestroyClippingRegion();
@@ -2494,17 +2513,19 @@
         dc.SetPen(m_ribbon_toggle_pen);
         dc.SetBrush(m_ribbon_toggle_brush);
         dc.DrawRoundedRectangle(rect.GetX(), rect.GetY(), 12, 12, 1.0);
-        if(upBitmap)
-            dc.DrawBitmap(m_ribbon_toggle_up_bitmap[1], rect.GetX()+2, rect.GetY()+2, true);
-        else
-            dc.DrawBitmap(m_ribbon_toggle_down_bitmap[1], rect.GetX()+2, rect.GetY()+2, true);
+        bindex = 1; 
     }
-    else
+    switch(ribbon_state)
     {
-        if(upBitmap)
-            dc.DrawBitmap(m_ribbon_toggle_up_bitmap[0], rect.GetX()+2, rect.GetY()+2, true);
-        else
-            dc.DrawBitmap(m_ribbon_toggle_down_bitmap[0], rect.GetX()+2, rect.GetY()+2, true);
+        case wxRIBBON_BAR_TOGGLE_BUTTON_EXPANDED:
+            dc.DrawBitmap(m_ribbon_toggle_up_bitmap[bindex], rect.GetX()+2, rect.GetY()+2, true);
+            break;
+        case wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED:
+            dc.DrawBitmap(m_ribbon_toggle_down_bitmap[bindex], rect.GetX()+2, rect.GetY()+2, true);
+            break;
+        case wxRIBBON_BAR_TOGGLE_BUTTON_PINNED:
+            dc.DrawBitmap(m_ribbon_toggle_pin_bitmap[bindex], rect.GetX (), rect.GetY ()+2, true);
+            break;
     }
 }
 
Index: src/ribbon/bar.cpp
===================================================================
--- src/ribbon/bar.cpp	(revision 72304)
+++ src/ribbon/bar.cpp	(working copy)
@@ -58,6 +58,7 @@
   EVT_RIGHT_UP(wxRibbonBar::OnMouseRightUp)
   EVT_LEFT_DCLICK(wxRibbonBar::OnMouseDoubleClick)
   EVT_SIZE(wxRibbonBar::OnSize)
+  EVT_KILL_FOCUS(wxRibbonBar::OnKillFocus)
 END_EVENT_TABLE()
 
 void wxRibbonBar::AddPage(wxRibbonPage *page)
@@ -731,6 +732,8 @@
 
     m_toggle_button_hovered = false;
     m_bar_hovered = false;
+
+    m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_EXPANDED;
 }
 
 void wxRibbonBar::SetArtProvider(wxRibbonArtProvider* art)
@@ -845,7 +848,7 @@
     }
     wxRect rect(GetClientSize().GetWidth() - 30, 6, 12, 12);
     if ( m_flags & wxRIBBON_BAR_SHOW_TOGGLE_BUTTON  )
-        m_art->DrawToggleButton(dc, this, rect, ArePanelsShown());
+        m_art->DrawToggleButton(dc, this, rect, this->m_ribbon_state);
 }
 
 void wxRibbonBar::OnEraseBackground(wxEraseEvent& WXUNUSED(evt))
@@ -916,6 +919,28 @@
 void wxRibbonBar::OnMouseLeftDown(wxMouseEvent& evt)
 {
     wxRibbonPageTabInfo *tab = HitTestTabs(evt.GetPosition());
+    this->SetFocus();
+    if(tab)
+    {
+        if(this->m_ribbon_state == wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED)
+        {
+            this->ShowPanels();
+            this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_PINNED;
+        }		
+        else if((tab == &m_pages.Item(m_current_page)) && (this->m_ribbon_state == wxRIBBON_BAR_TOGGLE_BUTTON_PINNED))
+        {
+            this->HidePanels();
+            this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED;
+        }
+    }
+    else 
+    {
+        if(this->m_ribbon_state == wxRIBBON_BAR_TOGGLE_BUTTON_PINNED)
+        {
+            this->HidePanels();
+            this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED;
+        }
+    }
     if(tab && tab != &m_pages.Item(m_current_page))
     {
         wxRibbonBarEvent query(wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING, GetId(), tab->page);
@@ -953,7 +978,12 @@
         {
             if(m_toggle_button_rect.Contains(position))
             {
-                ShowPanels(!ArePanelsShown());
+                bool pshown = ArePanelsShown();
+                ShowPanels(!pshown);
+                if(pshown)
+		    this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED;
+                else
+                    this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_EXPANDED;
                 wxRibbonBarEvent event(wxEVT_COMMAND_RIBBONBAR_TOGGLED, GetId());
                 event.SetEventObject(this);
                 ProcessWindowEvent(event);
@@ -1168,4 +1198,23 @@
     }
 }
 
+void wxRibbonBar::HideIfPinned()
+{
+    if( this->m_ribbon_state == wxRIBBON_BAR_TOGGLE_BUTTON_PINNED)
+    {
+        this->HidePanels();
+        this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_COLLAPSED;
+    }
+    else
+    {
+        this->ShowPanels();
+        this->m_ribbon_state = wxRIBBON_BAR_TOGGLE_BUTTON_EXPANDED;
+    }
+}
+
+void wxRibbonBar::OnKillFocus(wxFocusEvent& evt)
+{
+    HideIfPinned();
+}
+
 #endif // wxUSE_RIBBON
Index: src/ribbon/buttonbar.cpp
===================================================================
--- src/ribbon/buttonbar.cpp	(revision 72304)
+++ src/ribbon/buttonbar.cpp	(working copy)
@@ -17,6 +17,7 @@
 
 #if wxUSE_RIBBON
 
+#include "wx/ribbon/panel.h"
 #include "wx/ribbon/buttonbar.h"
 #include "wx/ribbon/art.h"
 #include "wx/dcbuffer.h"
@@ -1100,6 +1101,8 @@
                 m_lock_active_state = true;
                 ProcessWindowEvent(notification);
                 m_lock_active_state = false;
+
+                ((wxRibbonPanel *)this->m_parent)->HideIfPinned();
             } while(false);
             if(m_active_button) // may have been NULLed by event handler
             {
Index: src/ribbon/page.cpp
===================================================================
--- src/ribbon/page.cpp	(revision 72304)
+++ src/ribbon/page.cpp	(working copy)
@@ -1091,4 +1091,9 @@
     return best;
 }
 
+void wxRibbonPage::HideIfPinned()
+{
+    ((wxRibbonBar *)this->m_parent)->HideIfPinned();
+}
+
 #endif // wxUSE_RIBBON
Index: src/ribbon/panel.cpp
===================================================================
--- src/ribbon/panel.cpp	(revision 72304)
+++ src/ribbon/panel.cpp	(working copy)
@@ -218,6 +218,7 @@
         m_ext_button_hovered = ext_button_hovered;
         Refresh(false);
     }
+	
 }
 
 void wxRibbonPanel::AddChild(wxWindowBase *child)
@@ -1099,4 +1100,9 @@
     return best;
 }
 
+void wxRibbonPanel::HideIfPinned()
+{
+    ((wxRibbonPage *)this->m_parent)->HideIfPinned();
+}
+
 #endif // wxUSE_RIBBON
Index: src/ribbon/toolbar.cpp
===================================================================
--- src/ribbon/toolbar.cpp	(revision 72304)
+++ src/ribbon/toolbar.cpp	(working copy)
@@ -1149,6 +1149,8 @@
             notification.SetEventObject(this);
             notification.SetBar(this);
             ProcessEvent(notification);
+
+            ((wxRibbonPanel *)this->m_parent)->HideIfPinned();
         }
 
         // Notice that m_active_tool could have been reset by the event handler

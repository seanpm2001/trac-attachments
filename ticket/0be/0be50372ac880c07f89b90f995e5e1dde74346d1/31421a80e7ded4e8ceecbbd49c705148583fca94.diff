--- docs/latex/wx/filesysh.tex	2003-01-18 03:16:31.000000000 +0300
+++ docs/latex/wx/filesysh.tex	2005-03-30 16:45:04.000000000 +0400
@@ -9,7 +9,7 @@
 to access virtual file systems. Its public interface consists
 of two methods: \helpref{CanOpen}{wxfilesystemhandlercanopen} 
 and \helpref{OpenFile}{wxfilesystemhandleropenfile}. 
-It provides additional protected methods to simplify the process
+It provides additional methods to simplify the process
 of opening the file: GetProtocol, GetLeftLocation, GetRightLocation,
 GetAnchor, GetMimeTypeFromExt.
 
@@ -72,7 +72,7 @@
 
 \membersection{wxFileSystemHandler::GetAnchor}\label{wxfilesystemhandlergetanchor}
 
-\constfunc{wxString}{GetAnchor}{\param{const wxString\& }{location}}
+\func{static wxString}{GetAnchor}{\param{const wxString\& }{location}}
 
 Returns the anchor if present in the location.
 See \helpref{wxFSFile}{wxfsfilegetanchor} for details.
@@ -83,7 +83,7 @@
 
 \membersection{wxFileSystemHandler::GetLeftLocation}\label{wxfilesystemhandlergetleftlocation}
 
-\constfunc{wxString}{GetLeftLocation}{\param{const wxString\& }{location}}
+\func{static wxString}{GetLeftLocation}{\param{const wxString\& }{location}}
 
 Returns the left location string extracted from {\it location}. 
 
@@ -91,7 +91,7 @@
 
 \membersection{wxFileSystemHandler::GetMimeTypeFromExt}\label{wxfilesystemhandlergetmimetypefromext}
 
-\func{wxString}{GetMimeTypeFromExt}{\param{const wxString\& }{location}}
+\func{static wxString}{GetMimeTypeFromExt}{\param{const wxString\& }{location}}
 
 Returns the MIME type based on {\bf extension} of {\it location}. (While wxFSFile::GetMimeType
 returns real MIME type - either extension-based or queried from HTTP.)
@@ -100,7 +100,7 @@
 
 \membersection{wxFileSystemHandler::GetProtocol}\label{wxfilesystemhandlergetprotocol}
 
-\constfunc{wxString}{GetProtocol}{\param{const wxString\& }{location}}
+\func{static wxString}{GetProtocol}{\param{const wxString\& }{location}}
 
 Returns the protocol string extracted from {\it location}. 
 
@@ -108,12 +108,20 @@
 
 \membersection{wxFileSystemHandler::GetRightLocation}\label{wxfilesystemhandlergetrightlocation}
 
-\constfunc{wxString}{GetRightLocation}{\param{const wxString\& }{location}}
+\func{static wxString}{GetRightLocation}{\param{const wxString\& }{location}}
 
 Returns the right location string extracted from {\it location}. 
 
 Example : GetRightLocation("file:myzipfile.zip\#zip:index.htm") == "index.htm"
 
+\membersection{wxFileSystemHandler::IsLocalPath}\label{wxfilesystemhandlerislocalpath}
+
+\func{static bool}{IsLocalPath}{\param{const wxString\& }{location}}
+
+Returns {\it true} if the {\it location} is a local path.\\
+Returns {\it false} if the {\it location} is a VFS path, even for the
+{\it "file"} protocol.
+
 \membersection{wxFileSystemHandler::FindFirst}\label{wxfilesystemhandlerfindfirst}
 
 \func{virtual wxString}{FindFirst}{\param{const wxString\& }{wildcard}, \param{int }{flags = 0}}
--- include/wx/filesys.h	2004-10-21 21:44:35.000000000 +0400
+++ include/wx/filesys.h	2005-03-21 17:12:08.000000000 +0300
@@ -121,28 +121,30 @@
     virtual wxString FindFirst(const wxString& spec, int flags = 0);
     virtual wxString FindNext();
 
-protected:
     // returns protocol ("file", "http", "tar" etc.) The last (most right)
     // protocol is used:
     // {it returns "tar" for "file:subdir/archive.tar.gz#tar:/README.txt"}
-    wxString GetProtocol(const wxString& location) const;
+    static wxString GetProtocol(const wxString& location);
 
     // returns left part of address:
     // {it returns "file:subdir/archive.tar.gz" for "file:subdir/archive.tar.gz#tar:/README.txt"}
-    wxString GetLeftLocation(const wxString& location) const;
+    static wxString GetLeftLocation(const wxString& location);
 
     // returns anchor part of address:
     // {it returns "anchor" for "file:subdir/archive.tar.gz#tar:/README.txt#anchor"}
     // NOTE:  anchor is NOT a part of GetLeftLocation()'s return value
-    wxString GetAnchor(const wxString& location) const;
+    static wxString GetAnchor(const wxString& location);
 
     // returns right part of address:
     // {it returns "/README.txt" for "file:subdir/archive.tar.gz#tar:/README.txt"}
-    wxString GetRightLocation(const wxString& location) const;
+    static wxString GetRightLocation(const wxString& location);
 
     // Returns MIME type of the file - w/o need to open it
     // (default behaviour is that it returns type based on extension)
-    wxString GetMimeTypeFromExt(const wxString& location);
+    static wxString GetMimeTypeFromExt(const wxString& location);
+
+    // Returns true if the location is a local path ( = not VFS path)
+    static bool IsLocalPath(const wxString& location);
 
     DECLARE_ABSTRACT_CLASS(wxFileSystemHandler)
 };
--- src/common/filesys.cpp	2005-02-02 21:30:35.000000000 +0300
+++ src/common/filesys.cpp	2005-03-21 17:14:43.000000000 +0300
@@ -121,7 +121,7 @@
 
 
 
-wxString wxFileSystemHandler::GetProtocol(const wxString& location) const
+wxString wxFileSystemHandler::GetProtocol(const wxString& location)
 {
     wxString s = wxEmptyString;
     int i, l = location.Length();
@@ -136,7 +136,7 @@
 }
 
 
-wxString wxFileSystemHandler::GetLeftLocation(const wxString& location) const
+wxString wxFileSystemHandler::GetLeftLocation(const wxString& location)
 {
     int i;
     bool fnd = false;
@@ -148,7 +148,7 @@
     return wxEmptyString;
 }
 
-wxString wxFileSystemHandler::GetRightLocation(const wxString& location) const
+wxString wxFileSystemHandler::GetRightLocation(const wxString& location)
 {
     int i, l = location.Length();
     int l2 = l + 1;
@@ -164,7 +164,7 @@
     else return location.Mid(i + 1, l2 - i - 2);
 }
 
-wxString wxFileSystemHandler::GetAnchor(const wxString& location) const
+wxString wxFileSystemHandler::GetAnchor(const wxString& location)
 {
     wxChar c;
     int l = location.Length();
@@ -177,6 +177,12 @@
     return wxEmptyString;
 }
 
+bool wxFileSystemHandler::IsLocalPath(const wxString& location)
+{
+    return (GetProtocol(location).IsSameAs(wxT("file")) &&
+	    !location.StartsWith(wxT("file")));
+}
+
 
 wxString wxFileSystemHandler::FindFirst(const wxString& WXUNUSED(spec),
                                         int WXUNUSED(flags))

 	  	 

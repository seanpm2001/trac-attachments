Index: interface/wx/mediactrl.h
===================================================================
--- interface/wx/mediactrl.h	(revision 70667)
+++ interface/wx/mediactrl.h	(working copy)
@@ -85,7 +85,7 @@
     want to render, catch the @c EVT_MEDIA_LOADED event, and then call Play()
     to show the video/audio of the media in that event.
 
-    More complex operations are generally more heavily dependant on the capabilities
+    More complex operations are generally more heavily dependent on the capabilities
     of the backend. For example, QuickTime cannot set the playback rate of certain
     streaming media - while DirectShow is slightly more flexible in that regard.
 
@@ -337,7 +337,7 @@
 
     /**
         Loads the location that uri refers to. Note that this is very
-        implementation-dependant, although HTTP URI/URLs are generally
+        implementation-dependent, although HTTP URI/URLs are generally
         supported, for example. Returns @false if loading fails.
     */
     bool Load(const wxURI& uri);
Index: interface/wx/infobar.h
===================================================================
--- interface/wx/infobar.h	(revision 70667)
+++ interface/wx/infobar.h	(working copy)
@@ -52,7 +52,7 @@
 
     void MyFrame::SomeMethod()
     {
-        m_infoBar->ShowMessage("Something happend", wxICON_INFORMATION);
+        m_infoBar->ShowMessage("Something happened", wxICON_INFORMATION);
     }
     @endcode
 
Index: interface/wx/hashmap.h
===================================================================
--- interface/wx/hashmap.h	(revision 70667)
+++ interface/wx/hashmap.h	(working copy)
@@ -11,7 +11,7 @@
 
     This is a simple, type-safe, and reasonably efficient hash map class,
     whose interface is a subset of the interface of STL containers.
-    In particular, the interface is modeled after std::map, and the various,
+    In particular, the interface is modelled after std::map, and the various,
     non-standard, std::hash_map (http://www.cppreference.com/wiki/stl/map/start).
 
     Example:
Index: interface/wx/propgrid/property.h
===================================================================
--- interface/wx/propgrid/property.h	(revision 70667)
+++ interface/wx/propgrid/property.h	(working copy)
@@ -517,7 +517,7 @@
     wxDateTime property. Default editor is DatePickerCtrl, although TextCtrl
     should work as well. wxPG_DATE_FORMAT attribute can be used to change
     string wxDateTime::Format uses (although default is recommended as it is
-    locale-dependant), and wxPG_DATE_PICKER_STYLE allows changing window
+    locale-dependent), and wxPG_DATE_PICKER_STYLE allows changing window
     style given to DatePickerCtrl (default is wxDP_DEFAULT|wxDP_SHOWCENTURY).
     Using wxDP_ALLOWNONE will enable better unspecified value support.
 
Index: interface/wx/event.h
===================================================================
--- interface/wx/event.h	(revision 70667)
+++ interface/wx/event.h	(working copy)
@@ -2693,7 +2693,7 @@
     wxClientData* GetClientObject() const;
 
     /**
-        Returns extra information dependant on the event objects type.
+        Returns extra information dependent on the event objects type.
 
         If the event comes from a listbox selection, it is a boolean
         determining whether the event was a selection (@true) or a
Index: interface/wx/uri.h
===================================================================
--- interface/wx/uri.h	(revision 70667)
+++ interface/wx/uri.h	(working copy)
@@ -49,7 +49,7 @@
     @endcode
 
     @note On URIs with a "file" scheme wxURI does not parse the userinfo,
-          server, or port portion. This is to keep compatability with
+          server, or port portion. This is to keep compatibility with
           wxFileSystem, the old wxURL, and older url specifications.
 
     @library{wxbase}
Index: interface/wx/ribbon/buttonbar.h
===================================================================
--- interface/wx/ribbon/buttonbar.h	(revision 70667)
+++ interface/wx/ribbon/buttonbar.h	(working copy)
@@ -20,19 +20,19 @@
 enum wxRibbonButtonBarButtonState
 {
     /**
-        Button is small (the interpretation of small is dependant upon the art
+        Button is small (the interpretation of small is dependent upon the art
         provider, but it will be smaller than medium).
     */
     wxRIBBON_BUTTONBAR_BUTTON_SMALL     = 0 << 0,
     
     /**
-        Button is medium sized (the interpretation of medium is dependant upon
+        Button is medium sized (the interpretation of medium is dependent upon
         the art provider, but it will be between small and large).
     */
     wxRIBBON_BUTTONBAR_BUTTON_MEDIUM    = 1 << 0,
     
     /**
-        Button is large (the interpretation of large is dependant upon the art
+        Button is large (the interpretation of large is dependent upon the art
         provider, but it will be larger than medium).
     */
     wxRIBBON_BUTTONBAR_BUTTON_LARGE     = 2 << 0,
Index: interface/wx/ribbon/art.h
===================================================================
--- interface/wx/ribbon/art.h	(revision 70667)
+++ interface/wx/ribbon/art.h	(working copy)
@@ -301,7 +301,7 @@
         default colours of the art provider.
         Note that if SetColour() is called, then GetColourScheme() does not try
         and return a colour scheme similar to colours being used - it's return
-        values are dependant upon the last values given to SetColourScheme(),
+        values are dependent upon the last values given to SetColourScheme(),
         as described above.
         
         @param[out] primary
Index: interface/wx/grid.h
===================================================================
--- interface/wx/grid.h	(revision 70667)
+++ interface/wx/grid.h	(working copy)
@@ -265,7 +265,7 @@
 
     /**
         The parameters string format is "width[,precision[,format]]" where
-        @c format should be choosen beween f|e|g|E|G (f is used by default)
+        @c format should be chosen between f|e|g|E|G (f is used by default)
     */
     virtual void SetParameters(const wxString& params);
 
@@ -656,7 +656,7 @@
 
     /**
         The parameters string format is "width[,precision[,format]]" where
-        @c format should be choosen beween f|e|g|E|G (f is used by default)
+        @c format should be chosen between f|e|g|E|G (f is used by default)
     */
     virtual void SetParameters(const wxString& params);
 };

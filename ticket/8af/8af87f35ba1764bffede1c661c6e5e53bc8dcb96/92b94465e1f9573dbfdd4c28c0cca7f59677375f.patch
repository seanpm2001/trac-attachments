Index: docs/latex/wx/mbcnvut7.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/mbcnvut7.tex,v
retrieving revision 1.3
diff -b -u -2 -r1.3 mbcnvut7.tex
--- docs/latex/wx/mbcnvut7.tex	2003/09/22 20:34:03	1.3
+++ docs/latex/wx/mbcnvut7.tex	2004/10/26 14:55:57
@@ -9,6 +9,4 @@
 It has one predefined instance, {\bf wxConvUTF7}.
 
-{\bf WARNING:} this class is not implemented yet.
-
 \wxheading{Derived from}
 
@@ -24,5 +22,19 @@
 \helpref{wxMBConv classes overview}{mbconvclasses}
 
+\wxheading{Remarks}
+
+UTF-7 is a compatibility encoding used to encode Unicode text into anything
+that was originally written for 7-bit strings, including (but not limited to)
+filenames, transfer protocols, and database fields. It is defined in RFC2152.
+Basically, most ASCII characters (character values under 128) are encoded as
+plain ASCII (1 byte per character), but the standard permits some more ASCII
+characters to be encoded (the so-called optional direct characters and
+whitespace characters). The wxWidgets UTF-7 encoder always encodes all these
+characters, to make the resulting encoded string directly usable in as many
+applications (e.g. XML documents and email headers) as possible. The decoder
+accepts all forms of UTF-7.
+
 \latexignore{\rtfignore{\wxheading{Members}}}
+
 
 \membersection{wxMBConvUTF7::MB2WC}\label{wxmbconvutf7mb2wc}
Index: src/common/strconv.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/strconv.cpp,v
retrieving revision 1.113
diff -b -u -2 -r1.113 strconv.cpp
--- src/common/strconv.cpp	2004/10/12 20:47:04	1.113
+++ src/common/strconv.cpp	2004/10/26 14:56:04
@@ -2,5 +2,6 @@
 // Name:        strconv.cpp
 // Purpose:     Unicode conversion classes
-// Author:      Ove Kaaven, Robert Roebling, Vadim Zeitlin, Vaclav Slavik
+// Author:      Ove Kaaven, Robert Roebling, Vadim Zeitlin, Vaclav Slavik,
+//              contributions by Fredrik Roubert
 // Modified by:
 // Created:     29/01/98
@@ -8,4 +9,5 @@
 // Copyright:   (c) 1999 Ove Kaaven, Robert Roebling, Vaclav Slavik
 //              (c) 2000-2003 Vadim Zeitlin
+//              (c) 2004 Fredrik Roubert
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -230,32 +232,204 @@
 }
 
+
 // ----------------------------------------------------------------------------
 // UTF-7
 // ----------------------------------------------------------------------------
-
-#if 0
-static char utf7_setD[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
-                        "abcdefghijklmnopqrstuvwxyz"
-                        "0123456789'(),-./:?";
-static char utf7_setO[]="!\"#$%&*;<=>@[]^_`{|}";
-static char utf7_setB[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
-                        "abcdefghijklmnopqrstuvwxyz"
-                        "0123456789+/";
-#endif
 
-// TODO: write actual implementations of UTF-7 here
-size_t wxMBConvUTF7::MB2WC(wchar_t * WXUNUSED(buf),
-                           const char * WXUNUSED(psz),
-                           size_t WXUNUSED(n)) const
+size_t wxMBConvUTF7::MB2WC(wchar_t *buf, const char *psz, size_t n) const
 {
-  return 0;
+    //
+    // BASE64 decoding table
+    //
+    static const unsigned char b64[] =
+    {
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0x3e, 0xff, 0xff, 0xff, 0x3f,
+        0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
+        0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
+        0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
+        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
+        0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
+        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
+        0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
+        0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
+
+    size_t len = 0;
+
+    while (*psz && ((!buf) || (len < n)))
+    {
+        unsigned char cc = *psz++;
+        if (cc != '+')
+        {
+            // plain ASCII char
+            if (buf)
+                *buf++ = cc;
+            len++;
+        }
+        else if (*psz == '-')
+        {
+            // encoded plus sign
+            if (buf)
+                *buf++ = cc;
+            len++;
+            psz++;
+        }
+        else
+        {
+            // BASE64 encoded string
+            bool lsb;
+            unsigned char c;
+            unsigned int d, l;
+            for (lsb = false, d = 0, l = 0;
+                (cc = b64[(unsigned char)*psz]) != 0xff; psz++)
+            {
+                d <<= 6;
+                d += cc;
+                for (l += 6; l >= 8; lsb = !lsb)
+                {
+                    c = (d >> (l -= 8)) % 256;
+                    if (lsb)
+                    {
+                        if (buf)
+                            *buf++ |= c;
+                        len ++;
+                    }
+                    else
+                        if (buf)
+                            *buf = c << 8;
+                }
+            }
+            if (*psz == '-')
+                psz++;
+        }
+    }
+    if (buf && (len < n))
+        *buf = 0;
+    return len;
 }
 
-size_t wxMBConvUTF7::WC2MB(char * WXUNUSED(buf),
-                           const wchar_t * WXUNUSED(psz),
-                           size_t WXUNUSED(n)) const
+size_t wxMBConvUTF7::WC2MB(char *buf, const wchar_t *psz, size_t n) const
 {
-  return 0;
+    //
+    // BASE64 encoding table
+    //
+    static const unsigned char b64[] =
+    {
+        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
+        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
+        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
+        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
+        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
+        'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
+        'w', 'x', 'y', 'z', '0', '1', '2', '3',
+        '4', '5', '6', '7', '8', '9', '+', '/'
+    };
+
+    //
+    // UTF-7 encoding table
+    //
+    // 0 - Set D (directly encoded characters)
+    // 1 - Set O (optional direct characters)
+    // 2 - whitespace characters (optional)
+    // 3 - special characters
+    //
+    static const unsigned char utf7[128] =
+    {
+        3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3,
+        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
+        2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 3, 0, 0, 0, 3,
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
+        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 1, 1,
+        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3
+    };
+
+    size_t len = 0;
+
+    while (*psz && ((!buf) || (len < n)))
+    {
+        wchar_t cc = *psz++;
+        if (cc < 0x80 && utf7[cc] < 1)
+        {
+            // plain ASCII char
+            if (buf)
+                *buf++ = (char)cc;
+            len++;
+        }
+#ifndef WC_UTF16
+        else if (cc > 0xffff)
+        {
+            // no surrogate pair generation (yet?)
+            return (size_t)-1;
+        }
+#endif
+        else
+        {
+            if (buf)
+                *buf++ = '+';
+            len++;
+            if (cc != '+')
+            {
+                // BASE64 encode string
+                unsigned int lsb, d, l;
+                for (d = 0, l = 0;; psz++)
+                {
+                    for (lsb = 0; lsb < 2; lsb ++)
+                    {
+                        d <<= 8;
+                        d += lsb ? cc & 0xff : (cc & 0xff00) >> 8;
+
+                        for (l += 8; l >= 6; )
+                        {
+                            l -= 6;
+                            if (buf)
+                                *buf++ = b64[(d >> l) % 64];
+                            len++;
+                        }
+                    }
+                    if (!(cc = *psz) || (cc < 0x80 && utf7[cc] < 1))
+                        break;
+                }
+                if (l != 0)
+                {
+                    if (buf)
+                        *buf++ = b64[((d % 16) << (6 - l)) % 64];
+                    len++;
+                }
+            }
+            if (buf)
+                *buf++ = '-';
+            len++;
+        }
+    }
+    if (buf && (len < n))
+        *buf = 0;
+    return len;
 }
+
 
 // ----------------------------------------------------------------------------
Index: src/common/string.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/string.cpp,v
retrieving revision 1.216
diff -b -u -2 -r1.216 string.cpp
--- src/common/string.cpp	2004/10/14 17:36:04	1.216
+++ src/common/string.cpp	2004/10/26 14:56:05
@@ -1016,5 +1016,5 @@
         nActualLength += nLen + 1;
 
-        wxASSERT(nActualLength <= (nStringLen<<1) + 1); //If this is true it means buffer overflow
+        wxASSERT(nActualLength <= (nStringLen * 5) + 1); //If this is true it means buffer overflow
 
         //Convert the current (sub)string
@@ -1148,6 +1148,10 @@
 const wxCharBuffer wxString::mb_str(wxMBConv& conv) const
 {
-    //*2 is the worst case - probably for UTF8
-    wxCharBuffer buffer((length() << 1) + 1);
+    // Worst case for UTF-7 is a single wide character represented by a five
+    // ASCII character sequence. (This is true as long as generation of
+    // surrogate pairs is not implemented in the UTF-7 encoder.) There is
+    // probably no other encoding that needs more space, so we use this worst
+    // case for buffer allocation.
+    wxCharBuffer buffer((length() * 5) + 1);
 
     //Do the actual conversion (will return a blank string on error)

 	  	 

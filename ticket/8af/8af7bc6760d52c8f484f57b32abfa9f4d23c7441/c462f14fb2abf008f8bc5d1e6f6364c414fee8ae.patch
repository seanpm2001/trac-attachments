Index: include/wx/protocol/http.h
===================================================================
--- include/wx/protocol/http.h	(Revision 59912)
+++ include/wx/protocol/http.h	(Arbeitskopie)
@@ -39,6 +39,12 @@
     void SetPostBuffer(const wxString& post_buf);
     void SetProxyMode(bool on);
 
+    /* Cookies */
+    wxString GetCookie(const wxString& cookie) const;
+	bool HasCookies() { return m_cookies.size() > 0; }
+    void EnableCookies(bool on = true) { m_useCookies = on; }
+	void DisableCookies() { EnableCookies(false); }
+
 protected:
     enum wxHTTP_Req
     {
@@ -49,6 +55,8 @@
 
     typedef wxStringToStringHashMap::iterator wxHeaderIterator;
     typedef wxStringToStringHashMap::const_iterator wxHeaderConstIterator;
+    typedef wxStringToStringHashMap::iterator wxCookieIterator;
+    typedef wxStringToStringHashMap::const_iterator wxCookieConstIterator;
 
     bool BuildRequest(const wxString& path, wxHTTP_Req req);
     void SendHeaders();
@@ -59,13 +67,18 @@
     // find the header in m_headers
     wxHeaderIterator FindHeader(const wxString& header);
     wxHeaderConstIterator FindHeader(const wxString& header) const;
+    wxCookieIterator FindCookie(const wxString& cookie);
+    wxCookieConstIterator FindCookie(const wxString& cookie) const;
 
     // deletes the header value strings
     void ClearHeaders();
+    void ClearCookies();
 
-
     // internal variables:
 
+    bool m_useCookies;
+    wxStringToStringHashMap m_cookies;
+
     wxStringToStringHashMap m_headers;
     bool m_read,
          m_proxy_mode;
Index: src/common/http.cpp
===================================================================
--- src/common/http.cpp	(Revision 59912)
+++ src/common/http.cpp	(Arbeitskopie)
@@ -48,6 +48,7 @@
     m_addr = NULL;
     m_read = false;
     m_proxy_mode = false;
+    m_useCookies = false;
     m_post_buf = wxEmptyString;
     m_http_response = 0;
 
@@ -66,6 +67,11 @@
     m_headers.clear();
 }
 
+void wxHTTP::ClearCookies()
+{
+    m_cookies.clear();
+}
+
 wxString wxHTTP::GetContentType() const
 {
     return GetHeader(wxT("Content-Type"));
@@ -100,6 +106,30 @@
     return it;
 }
 
+wxHTTP::wxCookieIterator wxHTTP::FindCookie(const wxString& cookie)
+{
+    wxCookieIterator it = m_cookies.begin();
+    for ( wxCookieIterator en = m_cookies.end(); it != en; ++it )
+    {
+        if ( cookie.CmpNoCase(it->first) == 0 )
+            break;
+    }
+
+    return it;
+}
+
+wxHTTP::wxCookieConstIterator wxHTTP::FindCookie(const wxString& cookie) const
+{
+    wxCookieConstIterator it = m_cookies.begin();
+    for ( wxCookieConstIterator en = m_cookies.end(); it != en; ++it )
+    {
+        if ( cookie.CmpNoCase(it->first) == 0 )
+            break;
+    }
+
+    return it;
+}
+
 void wxHTTP::SetHeader(const wxString& header, const wxString& h_data)
 {
     if (m_read) {
@@ -121,6 +151,13 @@
     return it == m_headers.end() ? wxGetEmptyString() : it->second;
 }
 
+wxString wxHTTP::GetCookie(const wxString& cookie) const
+{
+    wxCookieConstIterator it = FindCookie(cookie);
+
+    return it == m_cookies.end() ? wxGetEmptyString() : it->second;
+}
+
 wxString wxHTTP::GenerateAuthString(const wxString& user, const wxString& pass) const
 {
     static const char *base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
@@ -178,6 +215,7 @@
     wxStringTokenizer tokenzr;
 
     ClearHeaders();
+    ClearCookies();
     m_read = true;
 
     for ( ;; )
@@ -190,7 +228,16 @@
             break;
 
         wxString left_str = line.BeforeFirst(':');
-        m_headers[left_str] = line.AfterFirst(':').Strip(wxString::both);
+        if(!left_str.CmpNoCase("Set-Cookie") && m_useCookies)
+        {
+            wxString cookieName = line.AfterFirst(':').Strip(wxString::both).BeforeFirst('=');
+            wxString cookieValue = line.AfterFirst(':').Strip(wxString::both).AfterFirst('=').BeforeFirst(';');
+            m_cookies[cookieName] = cookieValue;
+        }
+        else
+        {
+            m_headers[left_str] = line.AfterFirst(':').Strip(wxString::both);
+        }
     }
     return true;
 }

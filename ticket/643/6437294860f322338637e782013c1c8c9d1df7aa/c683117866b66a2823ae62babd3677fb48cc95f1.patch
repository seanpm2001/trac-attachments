Index: include/wx/colour.h
===================================================================
--- include/wx/colour.h	(revision 53593)
+++ include/wx/colour.h	(working copy)
@@ -27,8 +27,10 @@
     wxColour(ChannelType red,                                                 \
              ChannelType green,                                               \
              ChannelType blue,                                                \
-             ChannelType alpha = wxALPHA_OPAQUE)                              \
+             wxAlphaChannel alpha = wxALPHA_OPAQUE)                              \
         { Init(); Set(red, green, blue, alpha); }                             \
+    wxColour(const wxRGB& clr, wxAlphaChannel alpha = wxALPHA_OPAQUE)                   \
+        { Init(); Set(clr.red, clr.green, clr.blue, alpha); }                 \
     wxColour(unsigned long colRGB) { Init(); Set(colRGB    ); }               \
     wxColour(const wxString& colourName) { Init(); Set(colourName); }         \
     wxColour(const char *colourName) { Init(); Set(colourName); }             \
@@ -41,8 +43,8 @@
 #define wxC2S_HTML_SYNTAX       4   // return colour in #rrggbb syntax
 
 
-const unsigned char wxALPHA_TRANSPARENT = 0;
-const unsigned char wxALPHA_OPAQUE = 0xff;
+const wxAlphaChannel wxALPHA_TRANSPARENT = 0;
+const wxAlphaChannel wxALPHA_OPAQUE = 0xff;
 
 // ----------------------------------------------------------------------------
 // wxVariant support
@@ -77,7 +79,7 @@
 {
 public:
     // type of a single colour component
-    typedef unsigned char ChannelType;
+    typedef wxColourChannel ChannelType;
 
     wxColourBase() {}
     virtual ~wxColourBase() {}
@@ -89,7 +91,7 @@
     void Set(ChannelType red,
              ChannelType green,
              ChannelType blue,
-             ChannelType alpha = wxALPHA_OPAQUE)
+             wxAlphaChannel alpha = wxALPHA_OPAQUE)
         { InitRGBA(red,green,blue, alpha); }
 
     // implemented in colourcmn.cpp
@@ -105,17 +107,27 @@
             (ChannelType)(0xFF & (colRGB >> 16)));
     }
 
+    void Set(const wxRGB& rgb)
+    {
+       Set(rgb.red, rgb.green, rgb.blue);
+    }
 
-
     // accessors
     // ---------
 
     virtual ChannelType Red() const = 0;
     virtual ChannelType Green() const = 0;
     virtual ChannelType Blue() const = 0;
-    virtual ChannelType Alpha() const
+    virtual wxAlphaChannel Alpha() const
         { return wxALPHA_OPAQUE ; }
 
+    void GetAsRGB(wxRGB* rgb) const
+    {
+        rgb->red   = Red();
+        rgb->green = Green();
+        rgb->blue  = Blue();
+    }
+
     // implemented in colourcmn.cpp
     virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;
 
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 53593)
+++ include/wx/defs.h	(working copy)
@@ -2565,6 +2565,20 @@
 };
 
 /*  ---------------------------------------------------------------------------- */
+/*  colour */
+/*  ---------------------------------------------------------------------------- */
+
+typedef unsigned char wxColourChannel;
+typedef unsigned char wxAlphaChannel;
+
+typedef struct _wxRGB
+{ 
+    wxColourChannel red;
+    wxColourChannel green;
+    wxColourChannel blue;
+} wxRGB;
+
+/*  ---------------------------------------------------------------------------- */
 /*  miscellaneous */
 /*  ---------------------------------------------------------------------------- */
 
Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 53593)
+++ include/wx/image.h	(working copy)
@@ -61,9 +61,9 @@
 // alpha channel values: fully transparent, default threshold separating
 // transparent pixels from opaque for a few functions dealing with alpha and
 // fully opaque
-const unsigned char wxIMAGE_ALPHA_TRANSPARENT = 0;
-const unsigned char wxIMAGE_ALPHA_THRESHOLD = 0x80;
-const unsigned char wxIMAGE_ALPHA_OPAQUE = 0xff;
+const wxAlphaChannel wxIMAGE_ALPHA_TRANSPARENT = 0;
+const wxAlphaChannel wxIMAGE_ALPHA_THRESHOLD = 0x80;
+const wxAlphaChannel wxIMAGE_ALPHA_OPAQUE = 0xff;
 
 //-----------------------------------------------------------------------------
 // classes
@@ -158,9 +158,9 @@
     wxImageHistogram() : wxImageHistogramBase(256) { }
 
     // get the key in the histogram for the given RGB values
-    static unsigned long MakeKey(unsigned char r,
-                                 unsigned char g,
-                                 unsigned char b)
+    static unsigned long MakeKey(wxColourChannel r,
+                                 wxColourChannel g,
+                                 wxColourChannel b)
     {
         return (r << 16) | (g << 8) | b;
     }
@@ -170,12 +170,12 @@
     //
     // returns true and puts this colour in r, g, b (each of which may be NULL)
     // on success or returns false if there are no more free colours
-    bool FindFirstUnusedColour(unsigned char *r,
-                               unsigned char *g,
-                               unsigned char *b,
-                               unsigned char startR = 1,
-                               unsigned char startG = 0,
-                               unsigned char startB = 0 ) const;
+    bool FindFirstUnusedColour(wxColourChannel *r,
+                               wxColourChannel *g,
+                               wxColourChannel *b,
+                               wxColourChannel startR = 1,
+                               wxColourChannel startG = 0,
+                               wxColourChannel startB = 0 ) const;
 };
 
 //-----------------------------------------------------------------------------
@@ -187,14 +187,13 @@
 public:
     // red, green and blue are 8 bit unsigned integers in the range of 0..255
     // We use the identifier RGBValue instead of RGB, since RGB is #defined
-    class RGBValue
+    class RGBValue : public _wxRGB
     {
     public:
-      RGBValue(unsigned char r=0, unsigned char g=0, unsigned char b=0)
-        : red(r), green(g), blue(b) {}
-        unsigned char red;
-        unsigned char green;
-        unsigned char blue;
+      RGBValue(wxColourChannel r=0, wxColourChannel g=0, wxColourChannel b=0)
+      {
+           red = r, green = g, blue = b;
+      }
     };
 
     // hue, saturation and value are doubles in the range 0.0..1.0
@@ -280,8 +279,8 @@
     wxImage Mirror( bool horizontally = true ) const;
 
     // replace one colour with another
-    void Replace( unsigned char r1, unsigned char g1, unsigned char b1,
-                  unsigned char r2, unsigned char g2, unsigned char b2 );
+    void Replace( wxColourChannel r1, wxColourChannel g1, wxColourChannel b1,
+                  wxColourChannel r2, wxColourChannel g2, wxColourChannel b2 );
 
     // Convert to greyscale image. Uses the luminance component (Y) of the image.
     // The luma value (YUV) is calculated using (R * lr) + (G * lg) + (B * lb), defaults to ITU-T BT.601
@@ -289,30 +288,30 @@
 
     // convert to monochrome image (<r,g,b> will be replaced by white,
     // everything else by black)
-    wxImage ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const;
+    wxImage ConvertToMono( wxColourChannel r, wxColourChannel g, wxColourChannel b ) const;
 
     // these routines are slow but safe
-    void SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b );
-    void SetRGB( const wxRect& rect, unsigned char r, unsigned char g, unsigned char b );
-    unsigned char GetRed( int x, int y ) const;
-    unsigned char GetGreen( int x, int y ) const;
-    unsigned char GetBlue( int x, int y ) const;
+    void SetRGB( int x, int y, wxColourChannel r, wxColourChannel g, wxColourChannel b );
+    void SetRGB( const wxRect& rect, wxColourChannel r, wxColourChannel g, wxColourChannel b );
+    wxColourChannel GetRed( int x, int y ) const;
+    wxColourChannel GetGreen( int x, int y ) const;
+    wxColourChannel GetBlue( int x, int y ) const;
 
-    void SetAlpha(int x, int y, unsigned char alpha);
-    unsigned char GetAlpha(int x, int y) const;
+    void SetAlpha(int x, int y, wxAlphaChannel alpha);
+    wxAlphaChannel GetAlpha(int x, int y) const;
 
     // find first colour that is not used in the image and has higher
     // RGB values than <startR,startG,startB>
-    bool FindFirstUnusedColour( unsigned char *r, unsigned char *g, unsigned char *b,
-                                unsigned char startR = 1, unsigned char startG = 0,
-                                unsigned char startB = 0 ) const;
+    bool FindFirstUnusedColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b,
+                                wxColourChannel startR = 1, wxColourChannel startG = 0,
+                                wxColourChannel startB = 0 ) const;
     // Set image's mask to the area of 'mask' that has <r,g,b> colour
     bool SetMaskFromImage(const wxImage & mask,
-                          unsigned char mr, unsigned char mg, unsigned char mb);
+                          wxColourChannel mr, wxColourChannel mg, wxColourChannel mb);
 
     // converts image's alpha channel to mask, if it has any, does nothing
     // otherwise:
-    bool ConvertAlphaToMask(unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD);
+    bool ConvertAlphaToMask(wxAlphaChannel threshold = wxIMAGE_ALPHA_THRESHOLD);
 
     // This method converts an image where the original alpha
     // information is only available as a shades of a colour
@@ -324,7 +323,7 @@
     // and white text (actually only the red channel is read).
     // The method will then fill up the whole image with the
     // colour given.
-    bool ConvertColourToAlpha( unsigned char r, unsigned char g, unsigned char b );
+    bool ConvertColourToAlpha( wxColourChannel r, wxColourChannel g, wxColourChannel b );
 
     static bool CanRead( const wxString& name );
     static int GetImageCount( const wxString& name, long type = wxBITMAP_TYPE_ANY );
@@ -366,16 +365,16 @@
     // return true if this pixel is masked or has alpha less than specified
     // threshold
     bool IsTransparent(int x, int y,
-                       unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD) const;
+                       wxAlphaChannel threshold = wxIMAGE_ALPHA_THRESHOLD) const;
 
     // Mask functions
-    void SetMaskColour( unsigned char r, unsigned char g, unsigned char b );
+    void SetMaskColour( wxColourChannel r, wxColourChannel g, wxColourChannel b );
     // Get the current mask colour or find a suitable colour
     // returns true if using current mask colour
-    bool GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const;
-    unsigned char GetMaskRed() const;
-    unsigned char GetMaskGreen() const;
-    unsigned char GetMaskBlue() const;
+    bool GetOrFindMaskColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b ) const;
+    wxColourChannel GetMaskRed() const;
+    wxColourChannel GetMaskGreen() const;
+    wxColourChannel GetMaskBlue() const;
     void SetMask( bool mask = true );
     bool HasMask() const;
 
Index: include/wx/msw/colour.h
===================================================================
--- include/wx/msw/colour.h	(revision 53593)
+++ include/wx/msw/colour.h	(working copy)
@@ -30,19 +30,19 @@
 
     virtual bool IsOk() const { return m_isInit; }
 
-    unsigned char Red() const { return m_red; }
-    unsigned char Green() const { return m_green; }
-    unsigned char Blue() const { return m_blue; }
-    unsigned char Alpha() const { return m_alpha ; }
+    ChannelType Red  () const { return m_rgb.red  ; }
+    ChannelType Green() const { return m_rgb.green; }
+    ChannelType Blue () const { return m_rgb.blue ; }
+    wxAlphaChannel Alpha() const { return m_alpha    ; }
 
     // comparison
     bool operator==(const wxColour& colour) const
     {
-        return m_isInit == colour.m_isInit
-            && m_red == colour.m_red
-            && m_green == colour.m_green
-            && m_blue == colour.m_blue
-            && m_alpha == colour.m_alpha;
+        return m_isInit    == colour.m_isInit
+            && m_rgb.red   == colour.m_rgb.red
+            && m_rgb.green == colour.m_rgb.green
+            && m_rgb.blue  == colour.m_rgb.blue
+            && m_alpha     == colour.m_alpha;
     }
 
     bool operator!=(const wxColour& colour) const { return !(*this == colour); }
@@ -57,14 +57,12 @@
     void Init();
 
     virtual void
-    InitRGBA(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
+    InitRGBA(ChannelType r, ChannelType g, ChannelType b, wxAlphaChannel a);
 
 private:
     bool          m_isInit;
-    unsigned char m_red;
-    unsigned char m_blue;
-    unsigned char m_green;
-    unsigned char m_alpha;
+    wxRGB         m_rgb;
+    wxAlphaChannel m_alpha;
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColour)
Index: include/wx/msw/palette.h
===================================================================
--- include/wx/msw/palette.h	(revision 53593)
+++ include/wx/msw/palette.h	(working copy)
@@ -18,24 +18,34 @@
 {
 public:
     wxPalette() { }
-    wxPalette(int n,
-              unsigned char *red, unsigned char *green, unsigned char *blue)
+    wxPalette(size_t n,
+              wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue)
     {
         Create(n, red, green, blue);
     }
+    wxPalette(size_t n, const wxRGB* array)
+    {
+        Create(n, array);
+    }
 
-    bool Create(int n,
-                unsigned char *red, unsigned char *green, unsigned char *blue);
+    bool Create(size_t n,
+                wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue);
+    bool Create(size_t n, const wxRGB* array);
 
     virtual int GetColoursCount() const;
 
     int
-    GetPixel(unsigned char red, unsigned char green, unsigned char blue) const;
+    GetPixel(wxColourChannel red, wxColourChannel green, wxColourChannel blue) const;
 
     bool
     GetRGB(int pixel,
-           unsigned char *red, unsigned char *green, unsigned char *blue) const;
+           wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue) const;
 
+    bool GetRGB(int pixel, wxRGB* clr) const
+    {
+        return GetRGB(pixel, &clr->red, &clr->green, &clr->blue);
+    }
+
     // implemetation
     WXHPALETTE GetHPALETTE() const;
     void SetHPALETTE(WXHPALETTE pal);
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 53593)
+++ src/common/image.cpp	(working copy)
@@ -67,7 +67,7 @@
     unsigned char  *m_data;
 
     bool            m_hasMask;
-    unsigned char   m_maskRed,m_maskGreen,m_maskBlue;
+    wxRGB           m_mask;
 
     // alpha channel data, may be NULL for the formats without alpha support
     unsigned char  *m_alpha;
@@ -97,9 +97,9 @@
     m_data =
     m_alpha = (unsigned char *) NULL;
 
-    m_maskRed = 0;
-    m_maskGreen = 0;
-    m_maskBlue = 0;
+    m_mask.red = 0;
+    m_mask.green = 0;
+    m_mask.blue = 0;
     m_hasMask = false;
 
     m_ok = false;
@@ -256,9 +256,9 @@
     wxImageRefData* refData_new = new wxImageRefData;
     refData_new->m_width = refData->m_width;
     refData_new->m_height = refData->m_height;
-    refData_new->m_maskRed = refData->m_maskRed;
-    refData_new->m_maskGreen = refData->m_maskGreen;
-    refData_new->m_maskBlue = refData->m_maskBlue;
+    refData_new->m_mask.red = refData->m_mask.red;
+    refData_new->m_mask.green = refData->m_mask.green;
+    refData_new->m_mask.blue = refData->m_mask.blue;
     refData_new->m_hasMask = refData->m_hasMask;
     refData_new->m_ok = true;
     unsigned size = unsigned(refData->m_width) * unsigned(refData->m_height);
@@ -318,9 +318,9 @@
     wxCHECK_MSG( data, image, wxT("unable to create image") );
 
     bool hasMask = false ;
-    unsigned char maskRed = 0;
-    unsigned char maskGreen = 0;
-    unsigned char maskBlue =0 ;
+    wxColourChannel maskRed = 0;
+    wxColourChannel maskGreen = 0;
+    wxColourChannel maskBlue =0 ;
 
     unsigned char *source_data = M_IMGDATA->m_data;
     unsigned char *target_data = data;
@@ -329,13 +329,13 @@
     if (M_IMGDATA->m_hasMask)
     {
         hasMask = true ;
-        maskRed = M_IMGDATA->m_maskRed;
-        maskGreen = M_IMGDATA->m_maskGreen;
-        maskBlue =M_IMGDATA->m_maskBlue ;
+        maskRed = M_IMGDATA->m_mask.red;
+        maskGreen = M_IMGDATA->m_mask.green;
+        maskBlue =M_IMGDATA->m_mask.blue ;
 
-        image.SetMaskColour( M_IMGDATA->m_maskRed,
-                             M_IMGDATA->m_maskGreen,
-                             M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red,
+                             M_IMGDATA->m_mask.green,
+                             M_IMGDATA->m_mask.blue );
     }
     else
     {
@@ -363,10 +363,10 @@
                 for ( int x1 = 0 ; x1 < xFactor ; ++x1 )
                 {
                     unsigned char *pixel = source_data + 3 * ( y_offset + x * xFactor + x1 ) ;
-                    unsigned char red = pixel[0] ;
-                    unsigned char green = pixel[1] ;
-                    unsigned char blue = pixel[2] ;
-                    unsigned char alpha = 255  ;
+                    wxColourChannel red = pixel[0] ;
+                    wxColourChannel green = pixel[1] ;
+                    wxColourChannel blue = pixel[2] ;
+                    wxAlphaChannel  alpha = 255  ;
                     if ( source_alpha )
                         alpha = *(source_alpha + y_offset + x * xFactor + x1) ;
                     if ( !hasMask || red != maskRed || green != maskGreen || blue != maskBlue )
@@ -384,17 +384,17 @@
             }
             if ( counter == 0 )
             {
-                *(target_data++) = M_IMGDATA->m_maskRed ;
-                *(target_data++) = M_IMGDATA->m_maskGreen ;
-                *(target_data++) = M_IMGDATA->m_maskBlue ;
+                *(target_data++) = M_IMGDATA->m_mask.red ;
+                *(target_data++) = M_IMGDATA->m_mask.green ;
+                *(target_data++) = M_IMGDATA->m_mask.blue ;
             }
             else
             {
                 if ( source_alpha )
-                    *(target_alpha++) = (unsigned char)(avgAlpha / counter ) ;
-                *(target_data++) = (unsigned char)(avgRed / counter);
-                *(target_data++) = (unsigned char)(avgGreen / counter);
-                *(target_data++) = (unsigned char)(avgBlue / counter);
+                    *(target_alpha++) = (wxAlphaChannel)(avgAlpha / counter ) ;
+                *(target_data++) = (wxColourChannel)(avgRed / counter);
+                *(target_data++) = (wxColourChannel)(avgGreen / counter);
+                *(target_data++) = (wxColourChannel)(avgBlue / counter);
             }
         }
     }
@@ -507,9 +507,9 @@
     // If the original image has a mask, apply the mask to the new image
     if (M_IMGDATA->m_hasMask)
     {
-        image.SetMaskColour( M_IMGDATA->m_maskRed,
-                            M_IMGDATA->m_maskGreen,
-                            M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red,
+                            M_IMGDATA->m_mask.green,
+                            M_IMGDATA->m_mask.blue );
     }
 
     // In case this is a cursor, make sure the hotspot is scaled accordingly:
@@ -596,12 +596,12 @@
             }
 
             // Calculate the average from the sum and number of averaged pixels
-            dst_data[0] = (unsigned char)(sum_r / averaged_pixels);
-            dst_data[1] = (unsigned char)(sum_g / averaged_pixels);
-            dst_data[2] = (unsigned char)(sum_b / averaged_pixels);
+            dst_data[0] = (wxColourChannel)(sum_r / averaged_pixels);
+            dst_data[1] = (wxColourChannel)(sum_g / averaged_pixels);
+            dst_data[2] = (wxColourChannel)(sum_b / averaged_pixels);
             dst_data += 3;
             if ( src_alpha )
-                *dst_alpha++ = (unsigned char)(sum_a / averaged_pixels);
+                *dst_alpha++ = (wxAlphaChannel)(sum_a / averaged_pixels);
         }
     }
 
@@ -724,13 +724,13 @@
 
             // Put the data into the destination image.  The summed values are
             // of double data type and are rounded here for accuracy
-            dst_data[0] = (unsigned char)(sum_r + 0.5);
-            dst_data[1] = (unsigned char)(sum_g + 0.5);
-            dst_data[2] = (unsigned char)(sum_b + 0.5);
+            dst_data[0] = (wxColourChannel)(sum_r + 0.5);
+            dst_data[1] = (wxColourChannel)(sum_g + 0.5);
+            dst_data[2] = (wxColourChannel)(sum_b + 0.5);
             dst_data += 3;
 
             if ( src_alpha )
-                *dst_alpha++ = (unsigned char)sum_a;
+                *dst_alpha++ = (wxAlphaChannel)sum_a;
         }
     }
 
@@ -756,9 +756,9 @@
     }
     else if ( M_IMGDATA->m_hasMask )
     {
-        ret_image.SetMaskColour(M_IMGDATA->m_maskRed,
-                                M_IMGDATA->m_maskGreen,
-                                M_IMGDATA->m_maskBlue);
+        ret_image.SetMaskColour(M_IMGDATA->m_mask.red,
+                                M_IMGDATA->m_mask.green,
+                                M_IMGDATA->m_mask.blue);
     }
 
     // number of pixels we average over
@@ -799,11 +799,11 @@
         }
 
         dst = dst_data + y * M_IMGDATA->m_width*3;
-        dst[0] = (unsigned char)(sum_r / blurArea);
-        dst[1] = (unsigned char)(sum_g / blurArea);
-        dst[2] = (unsigned char)(sum_b / blurArea);
+        dst[0] = (wxColourChannel)(sum_r / blurArea);
+        dst[1] = (wxColourChannel)(sum_g / blurArea);
+        dst[2] = (wxColourChannel)(sum_b / blurArea);
         if ( src_alpha )
-            dst_alpha[y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+            dst_alpha[y * M_IMGDATA->m_width] = (wxAlphaChannel)(sum_a / blurArea);
 
         // Now average the values of the rest of the pixels by just moving the
         // blur radius box along the row
@@ -841,11 +841,11 @@
 
             // Save off the averaged data
             dst = dst_data + x*3 + y*M_IMGDATA->m_width*3;
-            dst[0] = (unsigned char)(sum_r / blurArea);
-            dst[1] = (unsigned char)(sum_g / blurArea);
-            dst[2] = (unsigned char)(sum_b / blurArea);
+            dst[0] = (wxColourChannel)(sum_r / blurArea);
+            dst[1] = (wxColourChannel)(sum_g / blurArea);
+            dst[2] = (wxColourChannel)(sum_b / blurArea);
             if ( src_alpha )
-                dst_alpha[x + y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+                dst_alpha[x + y * M_IMGDATA->m_width] = (wxAlphaChannel)(sum_a / blurArea);
         }
     }
 
@@ -871,9 +871,9 @@
     }
     else if ( M_IMGDATA->m_hasMask )
     {
-        ret_image.SetMaskColour(M_IMGDATA->m_maskRed,
-                                M_IMGDATA->m_maskGreen,
-                                M_IMGDATA->m_maskBlue);
+        ret_image.SetMaskColour(M_IMGDATA->m_mask.red,
+                                M_IMGDATA->m_mask.green,
+                                M_IMGDATA->m_mask.blue);
     }
 
     // number of pixels we average over
@@ -914,11 +914,11 @@
         }
 
         dst = dst_data + x*3;
-        dst[0] = (unsigned char)(sum_r / blurArea);
-        dst[1] = (unsigned char)(sum_g / blurArea);
-        dst[2] = (unsigned char)(sum_b / blurArea);
+        dst[0] = (wxColourChannel)(sum_r / blurArea);
+        dst[1] = (wxColourChannel)(sum_g / blurArea);
+        dst[2] = (wxColourChannel)(sum_b / blurArea);
         if ( src_alpha )
-            dst_alpha[x] = (unsigned char)(sum_a / blurArea);
+            dst_alpha[x] = (wxAlphaChannel)(sum_a / blurArea);
 
         // Now average the values of the rest of the pixels by just moving the
         // box along the column from top to bottom
@@ -956,11 +956,11 @@
 
             // Save off the averaged data
             dst = dst_data + (x + y * M_IMGDATA->m_width) * 3;
-            dst[0] = (unsigned char)(sum_r / blurArea);
-            dst[1] = (unsigned char)(sum_g / blurArea);
-            dst[2] = (unsigned char)(sum_b / blurArea);
+            dst[0] = (wxColourChannel)(sum_r / blurArea);
+            dst[1] = (wxColourChannel)(sum_g / blurArea);
+            dst[2] = (wxColourChannel)(sum_b / blurArea);
             if ( src_alpha )
-                dst_alpha[x + y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+                dst_alpha[x + y * M_IMGDATA->m_width] = (wxAlphaChannel)(sum_a / blurArea);
         }
     }
 
@@ -1000,7 +1000,7 @@
 
     if (M_IMGDATA->m_hasMask)
     {
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
     }
     else
     {
@@ -1065,7 +1065,7 @@
     }
 
     if (M_IMGDATA->m_hasMask)
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
 
     long height = M_IMGDATA->m_height;
     long width  = M_IMGDATA->m_width;
@@ -1165,7 +1165,7 @@
     }
 
     if (M_IMGDATA->m_hasMask)
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
 
     const int width = GetWidth();
     const int pixsoff = rect.GetLeft() + width * rect.GetTop();
@@ -1199,9 +1199,9 @@
     int width = GetWidth(), height = GetHeight();
     image.Create(size.GetWidth(), size.GetHeight(), false);
 
-    unsigned char r = (unsigned char)r_;
-    unsigned char g = (unsigned char)g_;
-    unsigned char b = (unsigned char)b_;
+    wxColourChannel r = (wxColourChannel)r_;
+    wxColourChannel g = (wxColourChannel)g_;
+    wxColourChannel b = (wxColourChannel)b_;
     if ((r_ == -1) && (g_ == -1) && (b_ == -1))
     {
         GetOrFindMaskColour( &r, &g, &b );
@@ -1305,9 +1305,9 @@
 
     if (!HasMask() && image.HasMask())
     {
-        unsigned char r = image.GetMaskRed();
-        unsigned char g = image.GetMaskGreen();
-        unsigned char b = image.GetMaskBlue();
+        wxColourChannel r = image.GetMaskRed();
+        wxColourChannel g = image.GetMaskGreen();
+        wxColourChannel b = image.GetMaskBlue();
 
         width *= 3;
         unsigned char* source_data = image.GetData() + xx*3 + yy*3*image.GetWidth();
@@ -1333,8 +1333,8 @@
     }
 }
 
-void wxImage::Replace( unsigned char r1, unsigned char g1, unsigned char b1,
-                       unsigned char r2, unsigned char g2, unsigned char b2 )
+void wxImage::Replace( wxColourChannel r1, wxColourChannel g1, wxColourChannel b1,
+                       wxColourChannel r2, wxColourChannel g2, wxColourChannel b2 )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
@@ -1372,9 +1372,9 @@
 
     unsigned char *src = M_IMGDATA->m_data;
     bool hasMask = M_IMGDATA->m_hasMask;
-    unsigned char maskRed = M_IMGDATA->m_maskRed;
-    unsigned char maskGreen = M_IMGDATA->m_maskGreen;
-    unsigned char maskBlue = M_IMGDATA->m_maskBlue;
+    wxColourChannel maskRed = M_IMGDATA->m_mask.red;
+    wxColourChannel maskGreen = M_IMGDATA->m_mask.green;
+    wxColourChannel maskBlue = M_IMGDATA->m_mask.blue;
 
     if ( hasMask )
         image.SetMaskColour(maskRed, maskGreen, maskBlue);
@@ -1391,7 +1391,7 @@
         {
             // calculate the luma
             double luma = (src[0] * lr + src[1] * lg + src[2] * lb) + 0.5;
-            dest[0] = dest[1] = dest[2] = wx_static_cast(unsigned char, luma);
+            dest[0] = dest[1] = dest[2] = wx_static_cast(wxColourChannel, luma);
         }
     }
 
@@ -1408,7 +1408,7 @@
     return image;
 }
 
-wxImage wxImage::ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const
+wxImage wxImage::ConvertToMono( wxColourChannel r, wxColourChannel g, wxColourChannel b ) const
 {
     wxImage image;
 
@@ -1422,8 +1422,8 @@
 
     if (M_IMGDATA->m_hasMask)
     {
-        if (M_IMGDATA->m_maskRed == r && M_IMGDATA->m_maskGreen == g &&
-                                         M_IMGDATA->m_maskBlue == b)
+        if (M_IMGDATA->m_mask.red == r && M_IMGDATA->m_mask.green == g &&
+                                         M_IMGDATA->m_mask.blue == b)
             image.SetMaskColour( 255, 255, 255 );
         else
             image.SetMaskColour( 0, 0, 0 );
@@ -1471,7 +1471,7 @@
     return -1;
 }
 
-void wxImage::SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetRGB( int x, int y, wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     long pos = XYToIndex(x, y);
     wxCHECK_RET( pos != -1, wxT("invalid image coordinates") );
@@ -1485,7 +1485,7 @@
     M_IMGDATA->m_data[ pos+2 ] = b;
 }
 
-void wxImage::SetRGB( const wxRect& rect_, unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetRGB( const wxRect& rect_, wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
@@ -1523,7 +1523,7 @@
     }
 }
 
-unsigned char wxImage::GetRed( int x, int y ) const
+wxColourChannel wxImage::GetRed( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1533,7 +1533,7 @@
     return M_IMGDATA->m_data[pos];
 }
 
-unsigned char wxImage::GetGreen( int x, int y ) const
+wxColourChannel wxImage::GetGreen( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1543,7 +1543,7 @@
     return M_IMGDATA->m_data[pos+1];
 }
 
-unsigned char wxImage::GetBlue( int x, int y ) const
+wxColourChannel wxImage::GetBlue( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1578,9 +1578,9 @@
     newRefData->m_height = M_IMGDATA->m_height;
     newRefData->m_data = data;
     newRefData->m_ok = true;
-    newRefData->m_maskRed = M_IMGDATA->m_maskRed;
-    newRefData->m_maskGreen = M_IMGDATA->m_maskGreen;
-    newRefData->m_maskBlue = M_IMGDATA->m_maskBlue;
+    newRefData->m_mask.red = M_IMGDATA->m_mask.red;
+    newRefData->m_mask.green = M_IMGDATA->m_mask.green;
+    newRefData->m_mask.blue = M_IMGDATA->m_mask.blue;
     newRefData->m_hasMask = M_IMGDATA->m_hasMask;
     newRefData->m_static = static_data;
 
@@ -1599,9 +1599,9 @@
         newRefData->m_height = new_height;
         newRefData->m_data = data;
         newRefData->m_ok = true;
-        newRefData->m_maskRed = M_IMGDATA->m_maskRed;
-        newRefData->m_maskGreen = M_IMGDATA->m_maskGreen;
-        newRefData->m_maskBlue = M_IMGDATA->m_maskBlue;
+        newRefData->m_mask.red = M_IMGDATA->m_mask.red;
+        newRefData->m_mask.green = M_IMGDATA->m_mask.green;
+        newRefData->m_mask.blue = M_IMGDATA->m_mask.blue;
         newRefData->m_hasMask = M_IMGDATA->m_hasMask;
     }
     else
@@ -1622,7 +1622,7 @@
 // alpha channel support
 // ----------------------------------------------------------------------------
 
-void wxImage::SetAlpha(int x, int y, unsigned char alpha)
+void wxImage::SetAlpha(int x, int y, wxAlphaChannel alpha)
 {
     wxCHECK_RET( HasAlpha(), wxT("no alpha channel") );
 
@@ -1634,7 +1634,7 @@
     M_IMGDATA->m_alpha[pos] = alpha;
 }
 
-unsigned char wxImage::GetAlpha(int x, int y) const
+wxAlphaChannel wxImage::GetAlpha(int x, int y) const
 {
     wxCHECK_MSG( HasAlpha(), 0, wxT("no alpha channel") );
 
@@ -1645,7 +1645,7 @@
 }
 
 bool
-wxImage::ConvertColourToAlpha(unsigned char r, unsigned char g, unsigned char b)
+wxImage::ConvertColourToAlpha(wxColourChannel r, wxColourChannel g, wxColourChannel b)
 {
     SetAlpha(NULL);
 
@@ -1709,9 +1709,9 @@
         // use the mask to initialize the alpha channel.
         const unsigned char * const alphaEnd = alpha + lenAlpha;
 
-        const unsigned char mr = M_IMGDATA->m_maskRed;
-        const unsigned char mg = M_IMGDATA->m_maskGreen;
-        const unsigned char mb = M_IMGDATA->m_maskBlue;
+        const wxColourChannel mr = M_IMGDATA->m_mask.red;
+        const wxColourChannel mg = M_IMGDATA->m_mask.green;
+        const wxColourChannel mb = M_IMGDATA->m_mask.blue;
         for ( unsigned char *src = M_IMGDATA->m_data;
               alpha < alphaEnd;
               src += 3, alpha++ )
@@ -1734,27 +1734,27 @@
 // mask support
 // ----------------------------------------------------------------------------
 
-void wxImage::SetMaskColour( unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetMaskColour( wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
     AllocExclusive();
 
-    M_IMGDATA->m_maskRed = r;
-    M_IMGDATA->m_maskGreen = g;
-    M_IMGDATA->m_maskBlue = b;
+    M_IMGDATA->m_mask.red = r;
+    M_IMGDATA->m_mask.green = g;
+    M_IMGDATA->m_mask.blue = b;
     M_IMGDATA->m_hasMask = true;
 }
 
-bool wxImage::GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const
+bool wxImage::GetOrFindMaskColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b ) const
 {
     wxCHECK_MSG( Ok(), false, wxT("invalid image") );
 
     if (M_IMGDATA->m_hasMask)
     {
-        if (r) *r = M_IMGDATA->m_maskRed;
-        if (g) *g = M_IMGDATA->m_maskGreen;
-        if (b) *b = M_IMGDATA->m_maskBlue;
+        if (r) *r = M_IMGDATA->m_mask.red;
+        if (g) *g = M_IMGDATA->m_mask.green;
+        if (b) *b = M_IMGDATA->m_mask.blue;
         return true;
     }
     else
@@ -1764,25 +1764,25 @@
     }
 }
 
-unsigned char wxImage::GetMaskRed() const
+wxColourChannel wxImage::GetMaskRed() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskRed;
+    return M_IMGDATA->m_mask.red;
 }
 
-unsigned char wxImage::GetMaskGreen() const
+wxColourChannel wxImage::GetMaskGreen() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskGreen;
+    return M_IMGDATA->m_mask.green;
 }
 
-unsigned char wxImage::GetMaskBlue() const
+wxColourChannel wxImage::GetMaskBlue() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskBlue;
+    return M_IMGDATA->m_mask.blue;
 }
 
 void wxImage::SetMask( bool mask )
@@ -1801,7 +1801,7 @@
     return M_IMGDATA->m_hasMask;
 }
 
-bool wxImage::IsTransparent(int x, int y, unsigned char threshold) const
+bool wxImage::IsTransparent(int x, int y, wxAlphaChannel threshold) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, false, wxT("invalid image coordinates") );
@@ -1810,9 +1810,9 @@
     if ( M_IMGDATA->m_hasMask )
     {
         const unsigned char *p = M_IMGDATA->m_data + 3*pos;
-        if ( p[0] == M_IMGDATA->m_maskRed &&
-                p[1] == M_IMGDATA->m_maskGreen &&
-                    p[2] == M_IMGDATA->m_maskBlue )
+        if ( p[0] == M_IMGDATA->m_mask.red &&
+                p[1] == M_IMGDATA->m_mask.green &&
+                    p[2] == M_IMGDATA->m_mask.blue )
         {
             return true;
         }
@@ -1833,7 +1833,7 @@
 }
 
 bool wxImage::SetMaskFromImage(const wxImage& mask,
-                               unsigned char mr, unsigned char mg, unsigned char mb)
+                               wxColourChannel mr, wxColourChannel mg, wxColourChannel mb)
 {
     // check that the images are the same size
     if ( (M_IMGDATA->m_height != mask.GetHeight() ) || (M_IMGDATA->m_width != mask.GetWidth () ) )
@@ -1843,7 +1843,7 @@
     }
 
     // find unused colour
-    unsigned char r,g,b ;
+    wxColourChannel r,g,b ;
     if (!FindFirstUnusedColour(&r, &g, &b))
     {
         wxLogError( _("No unused colour in image being masked.") );
@@ -1879,12 +1879,12 @@
     return true;
 }
 
-bool wxImage::ConvertAlphaToMask(unsigned char threshold)
+bool wxImage::ConvertAlphaToMask(wxAlphaChannel threshold)
 {
     if (!HasAlpha())
         return true;
 
-    unsigned char mr, mg, mb;
+    wxColourChannel mr, mg, mb;
     if (!FindFirstUnusedColour(&mr, &mg, &mb))
     {
         wxLogError( _("No unused colour in image being masked.") );
@@ -2569,9 +2569,9 @@
         }
     }
 
-    return RGBValue((unsigned char)(red * 255.0),
-                    (unsigned char)(green * 255.0),
-                    (unsigned char)(blue * 255.0));
+    return RGBValue((wxColourChannel)(red * 255.0),
+                    (wxColourChannel)(green * 255.0),
+                    (wxColourChannel)(blue * 255.0));
 }
 
 /*
@@ -2716,12 +2716,12 @@
 // ----------------------------------------------------------------------------
 
 bool
-wxImageHistogram::FindFirstUnusedColour(unsigned char *r,
-                                        unsigned char *g,
-                                        unsigned char *b,
-                                        unsigned char r2,
-                                        unsigned char b2,
-                                        unsigned char g2) const
+wxImageHistogram::FindFirstUnusedColour(wxColourChannel *r,
+                                        wxColourChannel *g,
+                                        wxColourChannel *b,
+                                        wxColourChannel r2,
+                                        wxColourChannel b2,
+                                        wxColourChannel g2) const
 {
     unsigned long key = MakeKey(r2, g2, b2);
 
@@ -2759,12 +2759,12 @@
 }
 
 bool
-wxImage::FindFirstUnusedColour(unsigned char *r,
-                               unsigned char *g,
-                               unsigned char *b,
-                               unsigned char r2,
-                               unsigned char b2,
-                               unsigned char g2) const
+wxImage::FindFirstUnusedColour(wxColourChannel *r,
+                               wxColourChannel *g,
+                               wxColourChannel *b,
+                               wxColourChannel r2,
+                               wxColourChannel b2,
+                               wxColourChannel g2) const
 {
     wxImageHistogram histogram;
 
@@ -2786,7 +2786,7 @@
 {
     wxHashTable h;
     wxObject dummy;
-    unsigned char r, g, b;
+    wxColourChannel r, g, b;
     unsigned char *p;
     unsigned long size, nentries, key;
 
@@ -2821,7 +2821,7 @@
 
     const unsigned long size = GetWidth() * GetHeight();
 
-    unsigned char r, g, b;
+    wxColourChannel r, g, b;
     for ( unsigned long n = 0; n < size; n++ )
     {
         r = *p++;
@@ -2934,9 +2934,9 @@
 
     // if the original image has a mask, use its RGB values as the blank pixel,
     // else, fall back to default (black).
-    unsigned char blank_r = 0;
-    unsigned char blank_g = 0;
-    unsigned char blank_b = 0;
+    wxColourChannel blank_r = 0;
+    wxColourChannel blank_g = 0;
+    wxColourChannel blank_b = 0;
 
     if (HasMask())
     {
@@ -3063,15 +3063,15 @@
 
                         // GRG: Unrolled.
 
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *(v1++) + w2 * *(v2++) +
                                w3 * *(v3++) + w4 * *(v4++)) /
                               (w1 + w2 + w3 + w4) );
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *(v1++) + w2 * *(v2++) +
                                w3 * *(v3++) + w4 * *(v4++)) /
                               (w1 + w2 + w3 + w4) );
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *v1 + w2 * *v2 +
                                w3 * *v3 + w4 * *v4) /
                               (w1 + w2 + w3 + w4) );
@@ -3083,7 +3083,7 @@
                             v3 = alpha[y2] + (x2);
                             v4 = alpha[y2] + (x1);
 
-                            *(alpha_dst++) = (unsigned char)
+                            *(alpha_dst++) = (wxAlphaChannel)
                                 ( (w1 * *v1 + w2 * *v2 +
                                    w3 * *v3 + w4 * *v4) /
                                   (w1 + w2 + w3 + w4) );
Index: src/msw/colour.cpp
===================================================================
--- src/msw/colour.cpp	(revision 53593)
+++ src/msw/colour.cpp	(working copy)
@@ -49,12 +49,12 @@
 IMPLEMENT_DYNAMIC_CLASS_WITH_COPY_AND_STREAMERS_XTI( wxColour , wxObject , "wx/colour.h" ,  &wxTO_STRING( wxColour ) , &wxFROM_STRING( wxColour ))
 
 wxBEGIN_PROPERTIES_TABLE(wxColour)
-    wxREADONLY_PROPERTY( Red, unsigned char, Red, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
-    wxREADONLY_PROPERTY( Green, unsigned char, Green, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
-    wxREADONLY_PROPERTY( Blue, unsigned char, Blue, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
+    wxREADONLY_PROPERTY( Red, ChannelType, Red, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
+    wxREADONLY_PROPERTY( Green, ChannelType, Green, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
+    wxREADONLY_PROPERTY( Blue, ChannelType, Blue, EMPTY_MACROVALUE , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
 wxEND_PROPERTIES_TABLE()
 
-wxDIRECT_CONSTRUCTOR_3( wxColour, unsigned char, Red, unsigned char, Green, unsigned char, Blue )
+wxDIRECT_CONSTRUCTOR_3( wxColour, ChannelType, Red, ChannelType, Green, ChannelType, Blue )
 
 wxBEGIN_HANDLERS_TABLE(wxColour)
 wxEND_HANDLERS_TABLE()
@@ -69,18 +69,18 @@
     m_isInit = false;
     m_pixel = 0;
     m_alpha =
-    m_red =
-    m_blue =
-    m_green = 0;
+    m_rgb.red =
+    m_rgb.blue =
+    m_rgb.green = 0;
 }
 
-void wxColour::InitRGBA(unsigned char r, unsigned char g, unsigned char b,
-                        unsigned char a)
+void wxColour::InitRGBA(ChannelType r, ChannelType g, ChannelType b,
+                        wxAlphaChannel a)
 {
-    m_red = r;
-    m_green = g;
-    m_blue = b;
+    m_rgb.red = r;
+    m_rgb.green = g;
+    m_rgb.blue = b;
     m_alpha = a;
     m_isInit = true;
-    m_pixel = PALETTERGB(m_red, m_green, m_blue);
+    m_pixel = PALETTERGB(m_rgb.red, m_rgb.green, m_rgb.blue);
 }
Index: src/msw/palette.cpp
===================================================================
--- src/msw/palette.cpp	(revision 53593)
+++ src/msw/palette.cpp	(working copy)
@@ -31,10 +31,7 @@
 public:
     wxPaletteRefData() { Init(); }
 
-    wxPaletteRefData(int n,
-                     unsigned char *red,
-                     unsigned char *green,
-                     unsigned char *blue)
+    wxPaletteRefData(size_t n, const wxRGB* array)
     {
         Init();
 
@@ -42,11 +39,11 @@
         if ( !pPal )
             return;
 
-        for ( int i = 0; i < n; i++ )
+        for ( size_t i = 0; i < n; i++ )
         {
-            pPal->palPalEntry[i].peRed = red[i];
-            pPal->palPalEntry[i].peGreen = green[i];
-            pPal->palPalEntry[i].peBlue = blue[i];
+            pPal->palPalEntry[i].peRed = array[i].red;
+            pPal->palPalEntry[i].peGreen = array[i].green;
+            pPal->palPalEntry[i].peBlue = array[i].blue;
             pPal->palPalEntry[i].peFlags = 0;
         }
 
@@ -115,16 +112,30 @@
 
 #define M_PALETTEDATA ((wxPaletteRefData *)m_refData)
 
-bool wxPalette::Create(int n,
-                       unsigned char *red,
-                       unsigned char *green,
-                       unsigned char *blue)
+bool wxPalette::Create(size_t n, const wxRGB* array)
 {
-    m_refData = new wxPaletteRefData(n, red, green, blue);
+    m_refData = new wxPaletteRefData(n, array);
 
     return IsOk();
 }
 
+bool wxPalette::Create(size_t n,
+                       wxColourChannel *red,
+                       wxColourChannel *green,
+                       wxColourChannel *blue)
+{
+    wxRGB* array = new wxRGB[n];
+    for (size_t i = 0; i < n; i++)
+    {
+       array[i].red   = red[i];
+       array[i].green = green[i];
+       array[i].blue  = blue[i];
+    }
+    m_refData = new wxPaletteRefData(n, array);
+    wxDELETEA(array)
+    return IsOk();
+}
+
 wxGDIRefData *wxPalette::CreateGDIRefData() const
 {
     return new wxPaletteRefData;
@@ -140,9 +151,9 @@
     return IsOk() ? M_PALETTEDATA->GetEntries() : 0;
 }
 
-int wxPalette::GetPixel(unsigned char red,
-                        unsigned char green,
-                        unsigned char blue) const
+int wxPalette::GetPixel(wxColourChannel red,
+                        wxColourChannel green,
+                        wxColourChannel blue) const
 {
     if ( !m_refData )
         return wxNOT_FOUND;
@@ -152,9 +163,9 @@
 }
 
 bool wxPalette::GetRGB(int index,
-                       unsigned char *red,
-                       unsigned char *green,
-                       unsigned char *blue) const
+                       wxColourChannel *red,
+                       wxColourChannel *green,
+                       wxColourChannel *blue) const
 {
     if ( !m_refData )
         return false;

 	  	 

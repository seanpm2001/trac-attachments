Index: include/wx/colour.h
===================================================================
--- include/wx/colour.h	(revision 53592)
+++ include/wx/colour.h	(working copy)
@@ -29,6 +29,8 @@
              ChannelType blue,                                                \
              ChannelType alpha = wxALPHA_OPAQUE)                              \
         { Init(); Set(red, green, blue, alpha); }                             \
+    wxColour(const wxRGB& clr, ChannelType alpha = wxALPHA_OPAQUE)                   \
+        { Init(); Set(clr.red, clr.green, clr.blue, alpha); }                 \
     wxColour(unsigned long colRGB) { Init(); Set(colRGB    ); }               \
     wxColour(const wxString& colourName) { Init(); Set(colourName); }         \
     wxColour(const char *colourName) { Init(); Set(colourName); }             \
@@ -77,7 +79,7 @@
 {
 public:
     // type of a single colour component
-    typedef unsigned char ChannelType;
+    typedef wxColourChannel ChannelType;
 
     wxColourBase() {}
     virtual ~wxColourBase() {}
@@ -105,8 +107,11 @@
             (ChannelType)(0xFF & (colRGB >> 16)));
     }
 
+    void Set(const wxRGB& clr)
+    {
+       Set(clr.red, clr.green, clr.blue);
+    }
 
-
     // accessors
     // ---------
 
@@ -116,6 +121,13 @@
     virtual ChannelType Alpha() const
         { return wxALPHA_OPAQUE ; }
 
+    void GetAsRGB(wxRGB* clr) const
+    {
+        clr->red   = Red();
+        clr->green = Green();
+        clr->blue  = Blue();
+    }
+
     // implemented in colourcmn.cpp
     virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;
 
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 53592)
+++ include/wx/defs.h	(working copy)
@@ -2565,6 +2565,19 @@
 };
 
 /*  ---------------------------------------------------------------------------- */
+/*  colour */
+/*  ---------------------------------------------------------------------------- */
+
+typedef unsigned char wxColourChannel;
+
+typedef struct _wxRGB
+{ 
+    wxColourChannel red;
+    wxColourChannel green;
+    wxColourChannel blue;
+} wxRGB;
+
+/*  ---------------------------------------------------------------------------- */
 /*  miscellaneous */
 /*  ---------------------------------------------------------------------------- */
 
Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 53592)
+++ include/wx/image.h	(working copy)
@@ -61,9 +61,9 @@
 // alpha channel values: fully transparent, default threshold separating
 // transparent pixels from opaque for a few functions dealing with alpha and
 // fully opaque
-const unsigned char wxIMAGE_ALPHA_TRANSPARENT = 0;
-const unsigned char wxIMAGE_ALPHA_THRESHOLD = 0x80;
-const unsigned char wxIMAGE_ALPHA_OPAQUE = 0xff;
+const wxColourChannel wxIMAGE_ALPHA_TRANSPARENT = 0;
+const wxColourChannel wxIMAGE_ALPHA_THRESHOLD = 0x80;
+const wxColourChannel wxIMAGE_ALPHA_OPAQUE = 0xff;
 
 //-----------------------------------------------------------------------------
 // classes
@@ -158,9 +158,9 @@
     wxImageHistogram() : wxImageHistogramBase(256) { }
 
     // get the key in the histogram for the given RGB values
-    static unsigned long MakeKey(unsigned char r,
-                                 unsigned char g,
-                                 unsigned char b)
+    static unsigned long MakeKey(wxColourChannel r,
+                                 wxColourChannel g,
+                                 wxColourChannel b)
     {
         return (r << 16) | (g << 8) | b;
     }
@@ -170,12 +170,12 @@
     //
     // returns true and puts this colour in r, g, b (each of which may be NULL)
     // on success or returns false if there are no more free colours
-    bool FindFirstUnusedColour(unsigned char *r,
-                               unsigned char *g,
-                               unsigned char *b,
-                               unsigned char startR = 1,
-                               unsigned char startG = 0,
-                               unsigned char startB = 0 ) const;
+    bool FindFirstUnusedColour(wxColourChannel *r,
+                               wxColourChannel *g,
+                               wxColourChannel *b,
+                               wxColourChannel startR = 1,
+                               wxColourChannel startG = 0,
+                               wxColourChannel startB = 0 ) const;
 };
 
 //-----------------------------------------------------------------------------
@@ -187,14 +187,13 @@
 public:
     // red, green and blue are 8 bit unsigned integers in the range of 0..255
     // We use the identifier RGBValue instead of RGB, since RGB is #defined
-    class RGBValue
+    class RGBValue : public _wxRGB
     {
     public:
-      RGBValue(unsigned char r=0, unsigned char g=0, unsigned char b=0)
-        : red(r), green(g), blue(b) {}
-        unsigned char red;
-        unsigned char green;
-        unsigned char blue;
+        RGBValue(wxColourChannel r=0, wxColourChannel g=0, wxColourChannel b=0)
+        {
+            red = r, green = g, blue = b;
+        }
     };
 
     // hue, saturation and value are doubles in the range 0.0..1.0
@@ -210,8 +209,8 @@
 
     wxImage(){}
     wxImage( int width, int height, bool clear = true );
-    wxImage( int width, int height, unsigned char* data, bool static_data = false );
-    wxImage( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data = false );
+    wxImage( int width, int height, wxColourChannel* data, bool static_data = false );
+    wxImage( int width, int height, wxColourChannel* data, wxColourChannel* alpha, bool static_data = false );
     wxImage( const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1 );
     wxImage( const wxString& name, const wxString& mimetype, int index = -1 );
     wxImage( const char* const* xpmData );
@@ -222,8 +221,8 @@
 #endif // wxUSE_STREAMS
 
     bool Create( int width, int height, bool clear = true );
-    bool Create( int width, int height, unsigned char* data, bool static_data = false );
-    bool Create( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data = false );
+    bool Create( int width, int height, wxColourChannel* data, bool static_data = false );
+    bool Create( int width, int height, wxColourChannel* data, wxColourChannel* alpha, bool static_data = false );
     bool Create( const char* const* xpmData );
 #ifdef __BORLANDC__
     // needed for Borland 5.5
@@ -280,8 +279,8 @@
     wxImage Mirror( bool horizontally = true ) const;
 
     // replace one colour with another
-    void Replace( unsigned char r1, unsigned char g1, unsigned char b1,
-                  unsigned char r2, unsigned char g2, unsigned char b2 );
+    void Replace( wxColourChannel r1, wxColourChannel g1, wxColourChannel b1,
+                  wxColourChannel r2, wxColourChannel g2, wxColourChannel b2 );
 
     // Convert to greyscale image. Uses the luminance component (Y) of the image.
     // The luma value (YUV) is calculated using (R * lr) + (G * lg) + (B * lb), defaults to ITU-T BT.601
@@ -289,30 +288,30 @@
 
     // convert to monochrome image (<r,g,b> will be replaced by white,
     // everything else by black)
-    wxImage ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const;
+    wxImage ConvertToMono( wxColourChannel r, wxColourChannel g, wxColourChannel b ) const;
 
     // these routines are slow but safe
-    void SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b );
-    void SetRGB( const wxRect& rect, unsigned char r, unsigned char g, unsigned char b );
-    unsigned char GetRed( int x, int y ) const;
-    unsigned char GetGreen( int x, int y ) const;
-    unsigned char GetBlue( int x, int y ) const;
+    void SetRGB( int x, int y, wxColourChannel r, wxColourChannel g, wxColourChannel b );
+    void SetRGB( const wxRect& rect, wxColourChannel r, wxColourChannel g, wxColourChannel b );
+    wxColourChannel GetRed( int x, int y ) const;
+    wxColourChannel GetGreen( int x, int y ) const;
+    wxColourChannel GetBlue( int x, int y ) const;
 
-    void SetAlpha(int x, int y, unsigned char alpha);
-    unsigned char GetAlpha(int x, int y) const;
+    void SetAlpha(int x, int y, wxColourChannel alpha);
+    wxColourChannel GetAlpha(int x, int y) const;
 
     // find first colour that is not used in the image and has higher
     // RGB values than <startR,startG,startB>
-    bool FindFirstUnusedColour( unsigned char *r, unsigned char *g, unsigned char *b,
-                                unsigned char startR = 1, unsigned char startG = 0,
-                                unsigned char startB = 0 ) const;
+    bool FindFirstUnusedColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b,
+                                wxColourChannel startR = 1, wxColourChannel startG = 0,
+                                wxColourChannel startB = 0 ) const;
     // Set image's mask to the area of 'mask' that has <r,g,b> colour
     bool SetMaskFromImage(const wxImage & mask,
-                          unsigned char mr, unsigned char mg, unsigned char mb);
+                          wxColourChannel mr, wxColourChannel mg, wxColourChannel mb);
 
     // converts image's alpha channel to mask, if it has any, does nothing
     // otherwise:
-    bool ConvertAlphaToMask(unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD);
+    bool ConvertAlphaToMask(wxColourChannel threshold = wxIMAGE_ALPHA_THRESHOLD);
 
     // This method converts an image where the original alpha
     // information is only available as a shades of a colour
@@ -324,7 +323,7 @@
     // and white text (actually only the red channel is read).
     // The method will then fill up the whole image with the
     // colour given.
-    bool ConvertColourToAlpha( unsigned char r, unsigned char g, unsigned char b );
+    bool ConvertColourToAlpha( wxColourChannel r, wxColourChannel g, wxColourChannel b );
 
     static bool CanRead( const wxString& name );
     static int GetImageCount( const wxString& name, long type = wxBITMAP_TYPE_ANY );
@@ -354,28 +353,36 @@
 
     // these functions provide fastest access to wxImage data but should be
     // used carefully as no checks are done
-    unsigned char *GetData() const;
-    void SetData( unsigned char *data, bool static_data=false );
-    void SetData( unsigned char *data, int new_width, int new_height, bool static_data=false );
+    wxColourChannel *GetData() const;
+    void SetData( wxColourChannel *data, bool static_data=false );
+    void SetData( wxColourChannel *data, int new_width, int new_height, bool static_data=false );
 
-    unsigned char *GetAlpha() const;    // may return NULL!
+    wxColourChannel *GetAlpha() const;    // may return NULL!
     bool HasAlpha() const { return GetAlpha() != NULL; }
-    void SetAlpha(unsigned char *alpha = NULL, bool static_data=false);
+    void SetAlpha(wxColourChannel *alpha = NULL, bool static_data=false);
     void InitAlpha();
 
     // return true if this pixel is masked or has alpha less than specified
     // threshold
     bool IsTransparent(int x, int y,
-                       unsigned char threshold = wxIMAGE_ALPHA_THRESHOLD) const;
+                       wxColourChannel threshold = wxIMAGE_ALPHA_THRESHOLD) const;
 
     // Mask functions
-    void SetMaskColour( unsigned char r, unsigned char g, unsigned char b );
+    void SetMaskColour( wxColourChannel r, wxColourChannel g, wxColourChannel b );
+    void SetMaskColour( const wxRGB& clr) { SetMaskColour(clr.red, clr.green, clr.blue); }
+
     // Get the current mask colour or find a suitable colour
     // returns true if using current mask colour
-    bool GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const;
-    unsigned char GetMaskRed() const;
-    unsigned char GetMaskGreen() const;
-    unsigned char GetMaskBlue() const;
+    bool GetOrFindMaskColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b ) const;
+    wxColourChannel GetMaskRed() const;
+    wxColourChannel GetMaskGreen() const;
+    wxColourChannel GetMaskBlue() const;
+    void GetMaskColour(wxRGB* clr) const
+    {
+       clr->red   = GetMaskRed();
+       clr->green = GetMaskGreen();
+       clr->blue  = GetMaskBlue();
+    }
     void SetMask( bool mask = true );
     bool HasMask() const;
 
Index: include/wx/msw/palette.h
===================================================================
--- include/wx/msw/palette.h	(revision 53592)
+++ include/wx/msw/palette.h	(working copy)
@@ -18,24 +18,34 @@
 {
 public:
     wxPalette() { }
-    wxPalette(int n,
-              unsigned char *red, unsigned char *green, unsigned char *blue)
+    wxPalette(size_t n,
+              wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue)
     {
         Create(n, red, green, blue);
     }
+    wxPalette(size_t n, const wxRGB* array)
+    {
+        Create(n, array);
+    }
 
-    bool Create(int n,
-                unsigned char *red, unsigned char *green, unsigned char *blue);
+    bool Create(size_t n,
+                wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue);
+    bool Create(size_t n, const wxRGB* array);
 
     virtual int GetColoursCount() const;
 
     int
-    GetPixel(unsigned char red, unsigned char green, unsigned char blue) const;
+    GetPixel(wxColourChannel red, wxColourChannel green, wxColourChannel blue) const;
 
     bool
     GetRGB(int pixel,
-           unsigned char *red, unsigned char *green, unsigned char *blue) const;
+           wxColourChannel *red, wxColourChannel *green, wxColourChannel *blue) const;
 
+    bool GetRGB(int pixel, wxRGB* clr) const
+    {
+        return GetRGB(pixel, &clr->red, &clr->green, &clr->blue);
+    }
+
     // implemetation
     WXHPALETTE GetHPALETTE() const;
     void SetHPALETTE(WXHPALETTE pal);
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 53592)
+++ src/common/image.cpp	(working copy)
@@ -64,13 +64,14 @@
 
     int             m_width;
     int             m_height;
-    unsigned char  *m_data;
+    wxColourChannel  *m_data;
 
     bool            m_hasMask;
-    unsigned char   m_maskRed,m_maskGreen,m_maskBlue;
+    //wxColourChannel   m_mask.red,m_mask.green,m_mask.blue;
+    wxRGB           m_mask;
 
     // alpha channel data, may be NULL for the formats without alpha support
-    unsigned char  *m_alpha;
+    wxColourChannel  *m_alpha;
 
     bool            m_ok;
 
@@ -95,11 +96,11 @@
     m_width = 0;
     m_height = 0;
     m_data =
-    m_alpha = (unsigned char *) NULL;
+    m_alpha = (wxColourChannel *) NULL;
 
-    m_maskRed = 0;
-    m_maskGreen = 0;
-    m_maskBlue = 0;
+    m_mask.red = 0;
+    m_mask.green = 0;
+    m_mask.blue = 0;
     m_hasMask = false;
 
     m_ok = false;
@@ -130,12 +131,12 @@
     Create( width, height, clear );
 }
 
-wxImage::wxImage( int width, int height, unsigned char* data, bool static_data )
+wxImage::wxImage( int width, int height, wxColourChannel* data, bool static_data )
 {
     Create( width, height, data, static_data );
 }
 
-wxImage::wxImage( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data )
+wxImage::wxImage( int width, int height, wxColourChannel* data, wxColourChannel* alpha, bool static_data )
 {
     Create( width, height, data, alpha, static_data );
 }
@@ -186,7 +187,7 @@
 
     m_refData = new wxImageRefData();
 
-    M_IMGDATA->m_data = (unsigned char *) malloc( width*height*3 );
+    M_IMGDATA->m_data = (wxColourChannel *) malloc( width*height*3 );
     if (!M_IMGDATA->m_data)
     {
         UnRef();
@@ -203,7 +204,7 @@
     return true;
 }
 
-bool wxImage::Create( int width, int height, unsigned char* data, bool static_data )
+bool wxImage::Create( int width, int height, wxColourChannel* data, bool static_data )
 {
     UnRef();
 
@@ -220,7 +221,7 @@
     return true;
 }
 
-bool wxImage::Create( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data )
+bool wxImage::Create( int width, int height, wxColourChannel* data, wxColourChannel* alpha, bool static_data )
 {
     UnRef();
 
@@ -256,19 +257,19 @@
     wxImageRefData* refData_new = new wxImageRefData;
     refData_new->m_width = refData->m_width;
     refData_new->m_height = refData->m_height;
-    refData_new->m_maskRed = refData->m_maskRed;
-    refData_new->m_maskGreen = refData->m_maskGreen;
-    refData_new->m_maskBlue = refData->m_maskBlue;
+    refData_new->m_mask.red = refData->m_mask.red;
+    refData_new->m_mask.green = refData->m_mask.green;
+    refData_new->m_mask.blue = refData->m_mask.blue;
     refData_new->m_hasMask = refData->m_hasMask;
     refData_new->m_ok = true;
     unsigned size = unsigned(refData->m_width) * unsigned(refData->m_height);
     if (refData->m_alpha != NULL)
     {
-        refData_new->m_alpha = (unsigned char*)malloc(size);
+        refData_new->m_alpha = (wxColourChannel*)malloc(size);
         memcpy(refData_new->m_alpha, refData->m_alpha, size);
     }
     size *= 3;
-    refData_new->m_data = (unsigned char*)malloc(size);
+    refData_new->m_data = (wxColourChannel*)malloc(size);
     memcpy(refData_new->m_data, refData->m_data, size);
 #if wxUSE_PALETTE
     refData_new->m_palette = refData->m_palette;
@@ -318,24 +319,24 @@
     wxCHECK_MSG( data, image, wxT("unable to create image") );
 
     bool hasMask = false ;
-    unsigned char maskRed = 0;
-    unsigned char maskGreen = 0;
-    unsigned char maskBlue =0 ;
+    wxColourChannel maskRed = 0;
+    wxColourChannel maskGreen = 0;
+    wxColourChannel maskBlue =0 ;
 
-    unsigned char *source_data = M_IMGDATA->m_data;
-    unsigned char *target_data = data;
-    unsigned char *source_alpha = 0 ;
-    unsigned char *target_alpha = 0 ;
+    wxColourChannel *source_data = M_IMGDATA->m_data;
+    wxColourChannel *target_data = data;
+    wxColourChannel *source_alpha = 0 ;
+    wxColourChannel *target_alpha = 0 ;
     if (M_IMGDATA->m_hasMask)
     {
         hasMask = true ;
-        maskRed = M_IMGDATA->m_maskRed;
-        maskGreen = M_IMGDATA->m_maskGreen;
-        maskBlue =M_IMGDATA->m_maskBlue ;
+        maskRed = M_IMGDATA->m_mask.red;
+        maskGreen = M_IMGDATA->m_mask.green;
+        maskBlue =M_IMGDATA->m_mask.blue ;
 
-        image.SetMaskColour( M_IMGDATA->m_maskRed,
-                             M_IMGDATA->m_maskGreen,
-                             M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red,
+                             M_IMGDATA->m_mask.green,
+                             M_IMGDATA->m_mask.blue );
     }
     else
     {
@@ -362,11 +363,11 @@
                 long y_offset = (y * yFactor + y1) * old_width;
                 for ( int x1 = 0 ; x1 < xFactor ; ++x1 )
                 {
-                    unsigned char *pixel = source_data + 3 * ( y_offset + x * xFactor + x1 ) ;
-                    unsigned char red = pixel[0] ;
-                    unsigned char green = pixel[1] ;
-                    unsigned char blue = pixel[2] ;
-                    unsigned char alpha = 255  ;
+                    wxColourChannel *pixel = source_data + 3 * ( y_offset + x * xFactor + x1 ) ;
+                    wxColourChannel red = pixel[0] ;
+                    wxColourChannel green = pixel[1] ;
+                    wxColourChannel blue = pixel[2] ;
+                    wxColourChannel alpha = 255  ;
                     if ( source_alpha )
                         alpha = *(source_alpha + y_offset + x * xFactor + x1) ;
                     if ( !hasMask || red != maskRed || green != maskGreen || blue != maskBlue )
@@ -384,17 +385,17 @@
             }
             if ( counter == 0 )
             {
-                *(target_data++) = M_IMGDATA->m_maskRed ;
-                *(target_data++) = M_IMGDATA->m_maskGreen ;
-                *(target_data++) = M_IMGDATA->m_maskBlue ;
+                *(target_data++) = M_IMGDATA->m_mask.red ;
+                *(target_data++) = M_IMGDATA->m_mask.green ;
+                *(target_data++) = M_IMGDATA->m_mask.blue ;
             }
             else
             {
                 if ( source_alpha )
-                    *(target_alpha++) = (unsigned char)(avgAlpha / counter ) ;
-                *(target_data++) = (unsigned char)(avgRed / counter);
-                *(target_data++) = (unsigned char)(avgGreen / counter);
-                *(target_data++) = (unsigned char)(avgBlue / counter);
+                    *(target_alpha++) = (wxColourChannel)(avgAlpha / counter ) ;
+                *(target_data++) = (wxColourChannel)(avgRed / counter);
+                *(target_data++) = (wxColourChannel)(avgGreen / counter);
+                *(target_data++) = (wxColourChannel)(avgBlue / counter);
             }
         }
     }
@@ -456,14 +457,14 @@
         }
         image.Create( width, height, false );
 
-        unsigned char *data = image.GetData();
+        wxColourChannel *data = image.GetData();
 
         wxCHECK_MSG( data, image, wxT("unable to create image") );
 
-        unsigned char *source_data = M_IMGDATA->m_data;
-        unsigned char *target_data = data;
-        unsigned char *source_alpha = 0 ;
-        unsigned char *target_alpha = 0 ;
+        wxColourChannel *source_data = M_IMGDATA->m_data;
+        wxColourChannel *target_data = data;
+        wxColourChannel *source_alpha = 0 ;
+        wxColourChannel *target_alpha = 0 ;
 
         if ( !M_IMGDATA->m_hasMask )
         {
@@ -478,19 +479,19 @@
         long x_delta = (old_width<<16) / width;
         long y_delta = (old_height<<16) / height;
 
-        unsigned char* dest_pixel = target_data;
+        wxColourChannel* dest_pixel = target_data;
 
         long y = 0;
         for ( long j = 0; j < height; j++ )
         {
-            unsigned char* src_line = &source_data[(y>>16)*old_width*3];
-            unsigned char* src_alpha_line = source_alpha ? &source_alpha[(y>>16)*old_width] : 0 ;
+            wxColourChannel* src_line = &source_data[(y>>16)*old_width*3];
+            wxColourChannel* src_alpha_line = source_alpha ? &source_alpha[(y>>16)*old_width] : 0 ;
 
             long x = 0;
             for ( long i = 0; i < width; i++ )
             {
-                unsigned char* src_pixel = &src_line[(x>>16)*3];
-                unsigned char* src_alpha_pixel = source_alpha ? &src_alpha_line[(x>>16)] : 0 ;
+                wxColourChannel* src_pixel = &src_line[(x>>16)*3];
+                wxColourChannel* src_alpha_pixel = source_alpha ? &src_alpha_line[(x>>16)] : 0 ;
                 dest_pixel[0] = src_pixel[0];
                 dest_pixel[1] = src_pixel[1];
                 dest_pixel[2] = src_pixel[2];
@@ -507,9 +508,9 @@
     // If the original image has a mask, apply the mask to the new image
     if (M_IMGDATA->m_hasMask)
     {
-        image.SetMaskColour( M_IMGDATA->m_maskRed,
-                            M_IMGDATA->m_maskGreen,
-                            M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red,
+                            M_IMGDATA->m_mask.green,
+                            M_IMGDATA->m_mask.blue );
     }
 
     // In case this is a cursor, make sure the hotspot is scaled accordingly:
@@ -538,10 +539,10 @@
     const int scale_factor_x_2 = (int)(scale_factor_x / 2);
     const int scale_factor_y_2 = (int)(scale_factor_y / 2);
 
-    unsigned char* src_data = M_IMGDATA->m_data;
-    unsigned char* src_alpha = M_IMGDATA->m_alpha;
-    unsigned char* dst_data = ret_image.GetData();
-    unsigned char* dst_alpha = NULL;
+    wxColourChannel* src_data = M_IMGDATA->m_data;
+    wxColourChannel* src_alpha = M_IMGDATA->m_alpha;
+    wxColourChannel* dst_data = ret_image.GetData();
+    wxColourChannel* dst_alpha = NULL;
 
     if ( src_alpha )
     {
@@ -596,12 +597,12 @@
             }
 
             // Calculate the average from the sum and number of averaged pixels
-            dst_data[0] = (unsigned char)(sum_r / averaged_pixels);
-            dst_data[1] = (unsigned char)(sum_g / averaged_pixels);
-            dst_data[2] = (unsigned char)(sum_b / averaged_pixels);
+            dst_data[0] = (wxColourChannel)(sum_r / averaged_pixels);
+            dst_data[1] = (wxColourChannel)(sum_g / averaged_pixels);
+            dst_data[2] = (wxColourChannel)(sum_b / averaged_pixels);
             dst_data += 3;
             if ( src_alpha )
-                *dst_alpha++ = (unsigned char)(sum_a / averaged_pixels);
+                *dst_alpha++ = (wxColourChannel)(sum_a / averaged_pixels);
         }
     }
 
@@ -656,10 +657,10 @@
 
     ret_image.Create(width, height, false);
 
-    unsigned char* src_data = M_IMGDATA->m_data;
-    unsigned char* src_alpha = M_IMGDATA->m_alpha;
-    unsigned char* dst_data = ret_image.GetData();
-    unsigned char* dst_alpha = NULL;
+    wxColourChannel* src_data = M_IMGDATA->m_data;
+    wxColourChannel* src_alpha = M_IMGDATA->m_alpha;
+    wxColourChannel* dst_data = ret_image.GetData();
+    wxColourChannel* dst_alpha = NULL;
 
     if ( src_alpha )
     {
@@ -724,13 +725,13 @@
 
             // Put the data into the destination image.  The summed values are
             // of double data type and are rounded here for accuracy
-            dst_data[0] = (unsigned char)(sum_r + 0.5);
-            dst_data[1] = (unsigned char)(sum_g + 0.5);
-            dst_data[2] = (unsigned char)(sum_b + 0.5);
+            dst_data[0] = (wxColourChannel)(sum_r + 0.5);
+            dst_data[1] = (wxColourChannel)(sum_g + 0.5);
+            dst_data[2] = (wxColourChannel)(sum_b + 0.5);
             dst_data += 3;
 
             if ( src_alpha )
-                *dst_alpha++ = (unsigned char)sum_a;
+                *dst_alpha++ = (wxColourChannel)sum_a;
         }
     }
 
@@ -743,10 +744,10 @@
     wxImage ret_image;
     ret_image.Create(M_IMGDATA->m_width, M_IMGDATA->m_height, false);
 
-    unsigned char* src_data = M_IMGDATA->m_data;
-    unsigned char* dst_data = ret_image.GetData();
-    unsigned char* src_alpha = M_IMGDATA->m_alpha;
-    unsigned char* dst_alpha = NULL;
+    wxColourChannel* src_data = M_IMGDATA->m_data;
+    wxColourChannel* dst_data = ret_image.GetData();
+    wxColourChannel* src_alpha = M_IMGDATA->m_alpha;
+    wxColourChannel* dst_alpha = NULL;
 
     // Check for a mask or alpha
     if ( src_alpha )
@@ -756,9 +757,9 @@
     }
     else if ( M_IMGDATA->m_hasMask )
     {
-        ret_image.SetMaskColour(M_IMGDATA->m_maskRed,
-                                M_IMGDATA->m_maskGreen,
-                                M_IMGDATA->m_maskBlue);
+        ret_image.SetMaskColour(M_IMGDATA->m_mask.red,
+                                M_IMGDATA->m_mask.green,
+                                M_IMGDATA->m_mask.blue);
     }
 
     // number of pixels we average over
@@ -775,8 +776,8 @@
              sum_a = 0;
 
         long pixel_idx;
-        const unsigned char *src;
-        unsigned char *dst;
+        const wxColourChannel *src;
+        wxColourChannel *dst;
 
         // Calculate the average of all pixels in the blur radius for the first
         // pixel of the row
@@ -799,11 +800,11 @@
         }
 
         dst = dst_data + y * M_IMGDATA->m_width*3;
-        dst[0] = (unsigned char)(sum_r / blurArea);
-        dst[1] = (unsigned char)(sum_g / blurArea);
-        dst[2] = (unsigned char)(sum_b / blurArea);
+        dst[0] = (wxColourChannel)(sum_r / blurArea);
+        dst[1] = (wxColourChannel)(sum_g / blurArea);
+        dst[2] = (wxColourChannel)(sum_b / blurArea);
         if ( src_alpha )
-            dst_alpha[y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+            dst_alpha[y * M_IMGDATA->m_width] = (wxColourChannel)(sum_a / blurArea);
 
         // Now average the values of the rest of the pixels by just moving the
         // blur radius box along the row
@@ -841,11 +842,11 @@
 
             // Save off the averaged data
             dst = dst_data + x*3 + y*M_IMGDATA->m_width*3;
-            dst[0] = (unsigned char)(sum_r / blurArea);
-            dst[1] = (unsigned char)(sum_g / blurArea);
-            dst[2] = (unsigned char)(sum_b / blurArea);
+            dst[0] = (wxColourChannel)(sum_r / blurArea);
+            dst[1] = (wxColourChannel)(sum_g / blurArea);
+            dst[2] = (wxColourChannel)(sum_b / blurArea);
             if ( src_alpha )
-                dst_alpha[x + y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+                dst_alpha[x + y * M_IMGDATA->m_width] = (wxColourChannel)(sum_a / blurArea);
         }
     }
 
@@ -858,10 +859,10 @@
     wxImage ret_image;
     ret_image.Create(M_IMGDATA->m_width, M_IMGDATA->m_height, false);
 
-    unsigned char* src_data = M_IMGDATA->m_data;
-    unsigned char* dst_data = ret_image.GetData();
-    unsigned char* src_alpha = M_IMGDATA->m_alpha;
-    unsigned char* dst_alpha = NULL;
+    wxColourChannel* src_data = M_IMGDATA->m_data;
+    wxColourChannel* dst_data = ret_image.GetData();
+    wxColourChannel* src_alpha = M_IMGDATA->m_alpha;
+    wxColourChannel* dst_alpha = NULL;
 
     // Check for a mask or alpha
     if ( src_alpha )
@@ -871,9 +872,9 @@
     }
     else if ( M_IMGDATA->m_hasMask )
     {
-        ret_image.SetMaskColour(M_IMGDATA->m_maskRed,
-                                M_IMGDATA->m_maskGreen,
-                                M_IMGDATA->m_maskBlue);
+        ret_image.SetMaskColour(M_IMGDATA->m_mask.red,
+                                M_IMGDATA->m_mask.green,
+                                M_IMGDATA->m_mask.blue);
     }
 
     // number of pixels we average over
@@ -890,8 +891,8 @@
              sum_a = 0;
 
         long pixel_idx;
-        const unsigned char *src;
-        unsigned char *dst;
+        const wxColourChannel *src;
+        wxColourChannel *dst;
 
         // Calculate the average of all pixels in our blur radius box for the
         // first pixel of the column
@@ -914,11 +915,11 @@
         }
 
         dst = dst_data + x*3;
-        dst[0] = (unsigned char)(sum_r / blurArea);
-        dst[1] = (unsigned char)(sum_g / blurArea);
-        dst[2] = (unsigned char)(sum_b / blurArea);
+        dst[0] = (wxColourChannel)(sum_r / blurArea);
+        dst[1] = (wxColourChannel)(sum_g / blurArea);
+        dst[2] = (wxColourChannel)(sum_b / blurArea);
         if ( src_alpha )
-            dst_alpha[x] = (unsigned char)(sum_a / blurArea);
+            dst_alpha[x] = (wxColourChannel)(sum_a / blurArea);
 
         // Now average the values of the rest of the pixels by just moving the
         // box along the column from top to bottom
@@ -956,11 +957,11 @@
 
             // Save off the averaged data
             dst = dst_data + (x + y * M_IMGDATA->m_width) * 3;
-            dst[0] = (unsigned char)(sum_r / blurArea);
-            dst[1] = (unsigned char)(sum_g / blurArea);
-            dst[2] = (unsigned char)(sum_b / blurArea);
+            dst[0] = (wxColourChannel)(sum_r / blurArea);
+            dst[1] = (wxColourChannel)(sum_g / blurArea);
+            dst[2] = (wxColourChannel)(sum_b / blurArea);
             if ( src_alpha )
-                dst_alpha[x + y * M_IMGDATA->m_width] = (unsigned char)(sum_a / blurArea);
+                dst_alpha[x + y * M_IMGDATA->m_width] = (wxColourChannel)(sum_a / blurArea);
         }
     }
 
@@ -988,19 +989,19 @@
 
     image.Create( M_IMGDATA->m_height, M_IMGDATA->m_width, false );
 
-    unsigned char *data = image.GetData();
+    wxColourChannel *data = image.GetData();
 
     wxCHECK_MSG( data, image, wxT("unable to create image") );
 
-    unsigned char *source_data = M_IMGDATA->m_data;
-    unsigned char *target_data;
-    unsigned char *alpha_data = 0 ;
-    unsigned char *source_alpha = 0 ;
-    unsigned char *target_alpha = 0 ;
+    wxColourChannel *source_data = M_IMGDATA->m_data;
+    wxColourChannel *target_data;
+    wxColourChannel *alpha_data = 0 ;
+    wxColourChannel *source_alpha = 0 ;
+    wxColourChannel *target_alpha = 0 ;
 
     if (M_IMGDATA->m_hasMask)
     {
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
     }
     else
     {
@@ -1053,8 +1054,8 @@
 
     image.Create( M_IMGDATA->m_width, M_IMGDATA->m_height, false );
 
-    unsigned char *data = image.GetData();
-    unsigned char *alpha = NULL;
+    wxColourChannel *data = image.GetData();
+    wxColourChannel *alpha = NULL;
 
     wxCHECK_MSG( data, image, wxT("unable to create image") );
 
@@ -1065,13 +1066,13 @@
     }
 
     if (M_IMGDATA->m_hasMask)
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
 
     long height = M_IMGDATA->m_height;
     long width  = M_IMGDATA->m_width;
 
-    unsigned char *source_data = M_IMGDATA->m_data;
-    unsigned char *target_data;
+    wxColourChannel *source_data = M_IMGDATA->m_data;
+    wxColourChannel *target_data;
 
     if (horizontally)
     {
@@ -1091,11 +1092,11 @@
         {
             // src_alpha starts at the first pixel and increases by 1 after each step
             // (a step here is the copy of the alpha value of one pixel)
-            const unsigned char *src_alpha = M_IMGDATA->m_alpha;
+            const wxColourChannel *src_alpha = M_IMGDATA->m_alpha;
             // dest_alpha starts just beyond the first line, decreases before each step,
             // and after each line is finished, increases by 2 widths (skipping the line
             // just copied and the line that will be copied next)
-            unsigned char *dest_alpha = alpha + width;
+            wxColourChannel *dest_alpha = alpha + width;
 
             for (long jj = 0; jj < height; ++jj)
             {
@@ -1119,10 +1120,10 @@
         {
             // src_alpha starts at the first pixel and increases by 1 width after each step
             // (a step here is the copy of the alpha channel of an entire line)
-            const unsigned char *src_alpha = M_IMGDATA->m_alpha;
+            const wxColourChannel *src_alpha = M_IMGDATA->m_alpha;
             // dest_alpha starts just beyond the last line (beyond the whole image)
             // and decreases by 1 width before each step
-            unsigned char *dest_alpha = alpha + width * height;
+            wxColourChannel *dest_alpha = alpha + width * height;
 
             for (long jj = 0; jj < height; ++jj)
             {
@@ -1151,10 +1152,10 @@
 
     image.Create( subwidth, subheight, false );
 
-    const unsigned char *src_data = GetData();
-    const unsigned char *src_alpha = M_IMGDATA->m_alpha;
-    unsigned char *subdata = image.GetData();
-    unsigned char *subalpha = NULL;
+    const wxColourChannel *src_data = GetData();
+    const wxColourChannel *src_alpha = M_IMGDATA->m_alpha;
+    wxColourChannel *subdata = image.GetData();
+    wxColourChannel *subalpha = NULL;
 
     wxCHECK_MSG( subdata, image, wxT("unable to create image") );
 
@@ -1165,7 +1166,7 @@
     }
 
     if (M_IMGDATA->m_hasMask)
-        image.SetMaskColour( M_IMGDATA->m_maskRed, M_IMGDATA->m_maskGreen, M_IMGDATA->m_maskBlue );
+        image.SetMaskColour( M_IMGDATA->m_mask.red, M_IMGDATA->m_mask.green, M_IMGDATA->m_mask.blue );
 
     const int width = GetWidth();
     const int pixsoff = rect.GetLeft() + width * rect.GetTop();
@@ -1199,9 +1200,9 @@
     int width = GetWidth(), height = GetHeight();
     image.Create(size.GetWidth(), size.GetHeight(), false);
 
-    unsigned char r = (unsigned char)r_;
-    unsigned char g = (unsigned char)g_;
-    unsigned char b = (unsigned char)b_;
+    wxColourChannel r = (wxColourChannel)r_;
+    wxColourChannel g = (wxColourChannel)g_;
+    wxColourChannel b = (wxColourChannel)b_;
     if ((r_ == -1) && (g_ == -1) && (b_ == -1))
     {
         GetOrFindMaskColour( &r, &g, &b );
@@ -1269,10 +1270,10 @@
          (GetMaskBlue()==image.GetMaskBlue()))))
     {
         width *= 3;
-        unsigned char* source_data = image.GetData() + xx*3 + yy*3*image.GetWidth();
+        wxColourChannel* source_data = image.GetData() + xx*3 + yy*3*image.GetWidth();
         int source_step = image.GetWidth()*3;
 
-        unsigned char* target_data = GetData() + (x+xx)*3 + (y+yy)*3*M_IMGDATA->m_width;
+        wxColourChannel* target_data = GetData() + (x+xx)*3 + (y+yy)*3*M_IMGDATA->m_width;
         int target_step = M_IMGDATA->m_width*3;
         for (int j = 0; j < height; j++)
         {
@@ -1289,10 +1290,10 @@
         if ( !HasAlpha() )
             InitAlpha();
 
-        unsigned char* source_data = image.GetAlpha() + xx + yy*image.GetWidth();
+        wxColourChannel* source_data = image.GetAlpha() + xx + yy*image.GetWidth();
         int source_step = image.GetWidth();
 
-        unsigned char* target_data = GetAlpha() + (x+xx) + (y+yy)*M_IMGDATA->m_width;
+        wxColourChannel* target_data = GetAlpha() + (x+xx) + (y+yy)*M_IMGDATA->m_width;
         int target_step = M_IMGDATA->m_width;
 
         for (int j = 0; j < height; j++,
@@ -1305,15 +1306,15 @@
 
     if (!HasMask() && image.HasMask())
     {
-        unsigned char r = image.GetMaskRed();
-        unsigned char g = image.GetMaskGreen();
-        unsigned char b = image.GetMaskBlue();
+        wxColourChannel r = image.GetMaskRed();
+        wxColourChannel g = image.GetMaskGreen();
+        wxColourChannel b = image.GetMaskBlue();
 
         width *= 3;
-        unsigned char* source_data = image.GetData() + xx*3 + yy*3*image.GetWidth();
+        wxColourChannel* source_data = image.GetData() + xx*3 + yy*3*image.GetWidth();
         int source_step = image.GetWidth()*3;
 
-        unsigned char* target_data = GetData() + (x+xx)*3 + (y+yy)*3*M_IMGDATA->m_width;
+        wxColourChannel* target_data = GetData() + (x+xx)*3 + (y+yy)*3*M_IMGDATA->m_width;
         int target_step = M_IMGDATA->m_width*3;
 
         for (int j = 0; j < height; j++)
@@ -1333,14 +1334,14 @@
     }
 }
 
-void wxImage::Replace( unsigned char r1, unsigned char g1, unsigned char b1,
-                       unsigned char r2, unsigned char g2, unsigned char b2 )
+void wxImage::Replace( wxColourChannel r1, wxColourChannel g1, wxColourChannel b1,
+                       wxColourChannel r2, wxColourChannel g2, wxColourChannel b2 )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
     AllocExclusive();
 
-    unsigned char *data = GetData();
+    wxColourChannel *data = GetData();
 
     const int w = GetWidth();
     const int h = GetHeight();
@@ -1366,15 +1367,15 @@
 
     image.Create(M_IMGDATA->m_width, M_IMGDATA->m_height, false);
 
-    unsigned char *dest = image.GetData();
+    wxColourChannel *dest = image.GetData();
 
     wxCHECK_MSG( dest, image, wxT("unable to create image") );
 
-    unsigned char *src = M_IMGDATA->m_data;
+    wxColourChannel *src = M_IMGDATA->m_data;
     bool hasMask = M_IMGDATA->m_hasMask;
-    unsigned char maskRed = M_IMGDATA->m_maskRed;
-    unsigned char maskGreen = M_IMGDATA->m_maskGreen;
-    unsigned char maskBlue = M_IMGDATA->m_maskBlue;
+    wxColourChannel maskRed = M_IMGDATA->m_mask.red;
+    wxColourChannel maskGreen = M_IMGDATA->m_mask.green;
+    wxColourChannel maskBlue = M_IMGDATA->m_mask.blue;
 
     if ( hasMask )
         image.SetMaskColour(maskRed, maskGreen, maskBlue);
@@ -1391,7 +1392,7 @@
         {
             // calculate the luma
             double luma = (src[0] * lr + src[1] * lg + src[2] * lb) + 0.5;
-            dest[0] = dest[1] = dest[2] = wx_static_cast(unsigned char, luma);
+            dest[0] = dest[1] = dest[2] = wx_static_cast(wxColourChannel, luma);
         }
     }
 
@@ -1399,7 +1400,7 @@
     if (HasAlpha())
     {
         const size_t alphaSize = GetWidth() * GetHeight();
-        unsigned char *alpha = (unsigned char*)malloc(alphaSize);
+        wxColourChannel *alpha = (wxColourChannel*)malloc(alphaSize);
         memcpy(alpha, GetAlpha(), alphaSize);
         image.InitAlpha();
         image.SetAlpha(alpha);
@@ -1408,7 +1409,7 @@
     return image;
 }
 
-wxImage wxImage::ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const
+wxImage wxImage::ConvertToMono( wxColourChannel r, wxColourChannel g, wxColourChannel b ) const
 {
     wxImage image;
 
@@ -1416,14 +1417,14 @@
 
     image.Create( M_IMGDATA->m_width, M_IMGDATA->m_height, false );
 
-    unsigned char *data = image.GetData();
+    wxColourChannel *data = image.GetData();
 
     wxCHECK_MSG( data, image, wxT("unable to create image") );
 
     if (M_IMGDATA->m_hasMask)
     {
-        if (M_IMGDATA->m_maskRed == r && M_IMGDATA->m_maskGreen == g &&
-                                         M_IMGDATA->m_maskBlue == b)
+        if (M_IMGDATA->m_mask.red == r && M_IMGDATA->m_mask.green == g &&
+                                         M_IMGDATA->m_mask.blue == b)
             image.SetMaskColour( 255, 255, 255 );
         else
             image.SetMaskColour( 0, 0, 0 );
@@ -1431,8 +1432,8 @@
 
     long size = M_IMGDATA->m_height * M_IMGDATA->m_width;
 
-    unsigned char *srcd = M_IMGDATA->m_data;
-    unsigned char *tard = image.GetData();
+    wxColourChannel *srcd = M_IMGDATA->m_data;
+    wxColourChannel *tard = image.GetData();
 
     for ( long i = 0; i < size; i++, srcd += 3, tard += 3 )
     {
@@ -1471,7 +1472,7 @@
     return -1;
 }
 
-void wxImage::SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetRGB( int x, int y, wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     long pos = XYToIndex(x, y);
     wxCHECK_RET( pos != -1, wxT("invalid image coordinates") );
@@ -1485,7 +1486,7 @@
     M_IMGDATA->m_data[ pos+2 ] = b;
 }
 
-void wxImage::SetRGB( const wxRect& rect_, unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetRGB( const wxRect& rect_, wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
@@ -1509,7 +1510,7 @@
         x2 = rect.GetRight() + 1,
         y2 = rect.GetBottom() + 1;
 
-    unsigned char *data wxDUMMY_INITIALIZE(NULL);
+    wxColourChannel *data wxDUMMY_INITIALIZE(NULL);
     int x, y, width = GetWidth();
     for (y = y1; y < y2; y++)
     {
@@ -1523,7 +1524,7 @@
     }
 }
 
-unsigned char wxImage::GetRed( int x, int y ) const
+wxColourChannel wxImage::GetRed( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1533,7 +1534,7 @@
     return M_IMGDATA->m_data[pos];
 }
 
-unsigned char wxImage::GetGreen( int x, int y ) const
+wxColourChannel wxImage::GetGreen( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1543,7 +1544,7 @@
     return M_IMGDATA->m_data[pos+1];
 }
 
-unsigned char wxImage::GetBlue( int x, int y ) const
+wxColourChannel wxImage::GetBlue( int x, int y ) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, 0, wxT("invalid image coordinates") );
@@ -1561,14 +1562,14 @@
     return data && data->m_ok && data->m_width && data->m_height;
 }
 
-unsigned char *wxImage::GetData() const
+wxColourChannel *wxImage::GetData() const
 {
-    wxCHECK_MSG( Ok(), (unsigned char *)NULL, wxT("invalid image") );
+    wxCHECK_MSG( Ok(), (wxColourChannel *)NULL, wxT("invalid image") );
 
     return M_IMGDATA->m_data;
 }
 
-void wxImage::SetData( unsigned char *data, bool static_data  )
+void wxImage::SetData( wxColourChannel *data, bool static_data  )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
@@ -1578,9 +1579,9 @@
     newRefData->m_height = M_IMGDATA->m_height;
     newRefData->m_data = data;
     newRefData->m_ok = true;
-    newRefData->m_maskRed = M_IMGDATA->m_maskRed;
-    newRefData->m_maskGreen = M_IMGDATA->m_maskGreen;
-    newRefData->m_maskBlue = M_IMGDATA->m_maskBlue;
+    newRefData->m_mask.red = M_IMGDATA->m_mask.red;
+    newRefData->m_mask.green = M_IMGDATA->m_mask.green;
+    newRefData->m_mask.blue = M_IMGDATA->m_mask.blue;
     newRefData->m_hasMask = M_IMGDATA->m_hasMask;
     newRefData->m_static = static_data;
 
@@ -1589,7 +1590,7 @@
     m_refData = newRefData;
 }
 
-void wxImage::SetData( unsigned char *data, int new_width, int new_height, bool static_data )
+void wxImage::SetData( wxColourChannel *data, int new_width, int new_height, bool static_data )
 {
     wxImageRefData *newRefData = new wxImageRefData();
 
@@ -1599,9 +1600,9 @@
         newRefData->m_height = new_height;
         newRefData->m_data = data;
         newRefData->m_ok = true;
-        newRefData->m_maskRed = M_IMGDATA->m_maskRed;
-        newRefData->m_maskGreen = M_IMGDATA->m_maskGreen;
-        newRefData->m_maskBlue = M_IMGDATA->m_maskBlue;
+        newRefData->m_mask.red = M_IMGDATA->m_mask.red;
+        newRefData->m_mask.green = M_IMGDATA->m_mask.green;
+        newRefData->m_mask.blue = M_IMGDATA->m_mask.blue;
         newRefData->m_hasMask = M_IMGDATA->m_hasMask;
     }
     else
@@ -1622,7 +1623,7 @@
 // alpha channel support
 // ----------------------------------------------------------------------------
 
-void wxImage::SetAlpha(int x, int y, unsigned char alpha)
+void wxImage::SetAlpha(int x, int y, wxColourChannel alpha)
 {
     wxCHECK_RET( HasAlpha(), wxT("no alpha channel") );
 
@@ -1634,7 +1635,7 @@
     M_IMGDATA->m_alpha[pos] = alpha;
 }
 
-unsigned char wxImage::GetAlpha(int x, int y) const
+wxColourChannel wxImage::GetAlpha(int x, int y) const
 {
     wxCHECK_MSG( HasAlpha(), 0, wxT("no alpha channel") );
 
@@ -1645,15 +1646,15 @@
 }
 
 bool
-wxImage::ConvertColourToAlpha(unsigned char r, unsigned char g, unsigned char b)
+wxImage::ConvertColourToAlpha(wxColourChannel r, wxColourChannel g, wxColourChannel b)
 {
     SetAlpha(NULL);
 
     const int w = M_IMGDATA->m_width;
     const int h = M_IMGDATA->m_height;
 
-    unsigned char *alpha = GetAlpha();
-    unsigned char *data = GetData();
+    wxColourChannel *alpha = GetAlpha();
+    wxColourChannel *data = GetData();
 
     for ( int y = 0; y < h; y++ )
     {
@@ -1669,7 +1670,7 @@
     return true;
 }
 
-void wxImage::SetAlpha( unsigned char *alpha, bool static_data )
+void wxImage::SetAlpha( wxColourChannel *alpha, bool static_data )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
@@ -1677,7 +1678,7 @@
 
     if ( !alpha )
     {
-        alpha = (unsigned char *)malloc(M_IMGDATA->m_width*M_IMGDATA->m_height);
+        alpha = (wxColourChannel *)malloc(M_IMGDATA->m_width*M_IMGDATA->m_height);
     }
 
     if( !M_IMGDATA->m_staticAlpha )
@@ -1687,9 +1688,9 @@
     M_IMGDATA->m_staticAlpha = static_data;
 }
 
-unsigned char *wxImage::GetAlpha() const
+wxColourChannel *wxImage::GetAlpha() const
 {
-    wxCHECK_MSG( Ok(), (unsigned char *)NULL, wxT("invalid image") );
+    wxCHECK_MSG( Ok(), (wxColourChannel *)NULL, wxT("invalid image") );
 
     return M_IMGDATA->m_alpha;
 }
@@ -1701,18 +1702,18 @@
     // initialize memory for alpha channel
     SetAlpha();
 
-    unsigned char *alpha = M_IMGDATA->m_alpha;
+    wxColourChannel *alpha = M_IMGDATA->m_alpha;
     const size_t lenAlpha = M_IMGDATA->m_width * M_IMGDATA->m_height;
 
     if ( HasMask() )
     {
         // use the mask to initialize the alpha channel.
-        const unsigned char * const alphaEnd = alpha + lenAlpha;
+        const wxColourChannel * const alphaEnd = alpha + lenAlpha;
 
-        const unsigned char mr = M_IMGDATA->m_maskRed;
-        const unsigned char mg = M_IMGDATA->m_maskGreen;
-        const unsigned char mb = M_IMGDATA->m_maskBlue;
-        for ( unsigned char *src = M_IMGDATA->m_data;
+        const wxColourChannel mr = M_IMGDATA->m_mask.red;
+        const wxColourChannel mg = M_IMGDATA->m_mask.green;
+        const wxColourChannel mb = M_IMGDATA->m_mask.blue;
+        for ( wxColourChannel *src = M_IMGDATA->m_data;
               alpha < alphaEnd;
               src += 3, alpha++ )
         {
@@ -1734,27 +1735,27 @@
 // mask support
 // ----------------------------------------------------------------------------
 
-void wxImage::SetMaskColour( unsigned char r, unsigned char g, unsigned char b )
+void wxImage::SetMaskColour( wxColourChannel r, wxColourChannel g, wxColourChannel b )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
 
     AllocExclusive();
 
-    M_IMGDATA->m_maskRed = r;
-    M_IMGDATA->m_maskGreen = g;
-    M_IMGDATA->m_maskBlue = b;
+    M_IMGDATA->m_mask.red = r;
+    M_IMGDATA->m_mask.green = g;
+    M_IMGDATA->m_mask.blue = b;
     M_IMGDATA->m_hasMask = true;
 }
 
-bool wxImage::GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const
+bool wxImage::GetOrFindMaskColour( wxColourChannel *r, wxColourChannel *g, wxColourChannel *b ) const
 {
     wxCHECK_MSG( Ok(), false, wxT("invalid image") );
 
     if (M_IMGDATA->m_hasMask)
     {
-        if (r) *r = M_IMGDATA->m_maskRed;
-        if (g) *g = M_IMGDATA->m_maskGreen;
-        if (b) *b = M_IMGDATA->m_maskBlue;
+        if (r) *r = M_IMGDATA->m_mask.red;
+        if (g) *g = M_IMGDATA->m_mask.green;
+        if (b) *b = M_IMGDATA->m_mask.blue;
         return true;
     }
     else
@@ -1764,25 +1765,25 @@
     }
 }
 
-unsigned char wxImage::GetMaskRed() const
+wxColourChannel wxImage::GetMaskRed() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskRed;
+    return M_IMGDATA->m_mask.red;
 }
 
-unsigned char wxImage::GetMaskGreen() const
+wxColourChannel wxImage::GetMaskGreen() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskGreen;
+    return M_IMGDATA->m_mask.green;
 }
 
-unsigned char wxImage::GetMaskBlue() const
+wxColourChannel wxImage::GetMaskBlue() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
 
-    return M_IMGDATA->m_maskBlue;
+    return M_IMGDATA->m_mask.blue;
 }
 
 void wxImage::SetMask( bool mask )
@@ -1801,7 +1802,7 @@
     return M_IMGDATA->m_hasMask;
 }
 
-bool wxImage::IsTransparent(int x, int y, unsigned char threshold) const
+bool wxImage::IsTransparent(int x, int y, wxColourChannel threshold) const
 {
     long pos = XYToIndex(x, y);
     wxCHECK_MSG( pos != -1, false, wxT("invalid image coordinates") );
@@ -1809,10 +1810,10 @@
     // check mask
     if ( M_IMGDATA->m_hasMask )
     {
-        const unsigned char *p = M_IMGDATA->m_data + 3*pos;
-        if ( p[0] == M_IMGDATA->m_maskRed &&
-                p[1] == M_IMGDATA->m_maskGreen &&
-                    p[2] == M_IMGDATA->m_maskBlue )
+        const wxColourChannel *p = M_IMGDATA->m_data + 3*pos;
+        if ( p[0] == M_IMGDATA->m_mask.red &&
+                p[1] == M_IMGDATA->m_mask.green &&
+                    p[2] == M_IMGDATA->m_mask.blue )
         {
             return true;
         }
@@ -1833,7 +1834,7 @@
 }
 
 bool wxImage::SetMaskFromImage(const wxImage& mask,
-                               unsigned char mr, unsigned char mg, unsigned char mb)
+                               wxColourChannel mr, wxColourChannel mg, wxColourChannel mb)
 {
     // check that the images are the same size
     if ( (M_IMGDATA->m_height != mask.GetHeight() ) || (M_IMGDATA->m_width != mask.GetWidth () ) )
@@ -1843,7 +1844,7 @@
     }
 
     // find unused colour
-    unsigned char r,g,b ;
+    wxColourChannel r,g,b ;
     if (!FindFirstUnusedColour(&r, &g, &b))
     {
         wxLogError( _("No unused colour in image being masked.") );
@@ -1852,8 +1853,8 @@
 
     AllocExclusive();
 
-    unsigned char *imgdata = GetData();
-    unsigned char *maskdata = mask.GetData();
+    wxColourChannel *imgdata = GetData();
+    wxColourChannel *maskdata = mask.GetData();
 
     const int w = GetWidth();
     const int h = GetHeight();
@@ -1879,12 +1880,12 @@
     return true;
 }
 
-bool wxImage::ConvertAlphaToMask(unsigned char threshold)
+bool wxImage::ConvertAlphaToMask(wxColourChannel threshold)
 {
     if (!HasAlpha())
         return true;
 
-    unsigned char mr, mg, mb;
+    wxColourChannel mr, mg, mb;
     if (!FindFirstUnusedColour(&mr, &mg, &mb))
     {
         wxLogError( _("No unused colour in image being masked.") );
@@ -1896,8 +1897,8 @@
     SetMask(true);
     SetMaskColour(mr, mg, mb);
 
-    unsigned char *imgdata = GetData();
-    unsigned char *alphadata = GetAlpha();
+    wxColourChannel *imgdata = GetData();
+    wxColourChannel *alphadata = GetAlpha();
 
     int w = GetWidth();
     int h = GetHeight();
@@ -2569,9 +2570,9 @@
         }
     }
 
-    return RGBValue((unsigned char)(red * 255.0),
-                    (unsigned char)(green * 255.0),
-                    (unsigned char)(blue * 255.0));
+    return RGBValue((wxColourChannel)(red * 255.0),
+                    (wxColourChannel)(green * 255.0),
+                    (wxColourChannel)(blue * 255.0));
 }
 
 /*
@@ -2582,8 +2583,8 @@
 {
     AllocExclusive();
 
-    unsigned char *srcBytePtr;
-    unsigned char *dstBytePtr;
+    wxColourChannel *srcBytePtr;
+    wxColourChannel *dstBytePtr;
     unsigned long count;
     wxImage::HSVValue hsv;
     wxImage::RGBValue rgb;
@@ -2716,12 +2717,12 @@
 // ----------------------------------------------------------------------------
 
 bool
-wxImageHistogram::FindFirstUnusedColour(unsigned char *r,
-                                        unsigned char *g,
-                                        unsigned char *b,
-                                        unsigned char r2,
-                                        unsigned char b2,
-                                        unsigned char g2) const
+wxImageHistogram::FindFirstUnusedColour(wxColourChannel *r,
+                                        wxColourChannel *g,
+                                        wxColourChannel *b,
+                                        wxColourChannel r2,
+                                        wxColourChannel b2,
+                                        wxColourChannel g2) const
 {
     unsigned long key = MakeKey(r2, g2, b2);
 
@@ -2759,12 +2760,12 @@
 }
 
 bool
-wxImage::FindFirstUnusedColour(unsigned char *r,
-                               unsigned char *g,
-                               unsigned char *b,
-                               unsigned char r2,
-                               unsigned char b2,
-                               unsigned char g2) const
+wxImage::FindFirstUnusedColour(wxColourChannel *r,
+                               wxColourChannel *g,
+                               wxColourChannel *b,
+                               wxColourChannel r2,
+                               wxColourChannel b2,
+                               wxColourChannel g2) const
 {
     wxImageHistogram histogram;
 
@@ -2786,8 +2787,8 @@
 {
     wxHashTable h;
     wxObject dummy;
-    unsigned char r, g, b;
-    unsigned char *p;
+    wxColourChannel r, g, b;
+    wxColourChannel *p;
     unsigned long size, nentries, key;
 
     p = GetData();
@@ -2814,14 +2815,14 @@
 
 unsigned long wxImage::ComputeHistogram( wxImageHistogram &h ) const
 {
-    unsigned char *p = GetData();
+    wxColourChannel *p = GetData();
     unsigned long nentries = 0;
 
     h.clear();
 
     const unsigned long size = GetWidth() * GetHeight();
 
-    unsigned char r, g, b;
+    wxColourChannel r, g, b;
     for ( unsigned long n = 0; n < size; n++ )
     {
         r = *p++;
@@ -2880,16 +2881,16 @@
     int i;
 
     // Create pointer-based array to accelerate access to wxImage's data
-    unsigned char ** data = new unsigned char * [h];
+    wxColourChannel ** data = new wxColourChannel * [h];
     data[0] = GetData();
     for (i = 1; i < h; i++)
         data[i] = data[i - 1] + (3 * w);
 
     // Same for alpha channel
-    unsigned char ** alpha = NULL;
+    wxColourChannel ** alpha = NULL;
     if (has_alpha)
     {
-        alpha = new unsigned char * [h];
+        alpha = new wxColourChannel * [h];
         alpha[0] = GetAlpha();
         for (i = 1; i < h; i++)
             alpha[i] = alpha[i - 1] + w;
@@ -2928,15 +2929,15 @@
 
     // the rotated (destination) image is always accessed sequentially via this
     // pointer, there is no need for pointer-based arrays here
-    unsigned char *dst = rotated.GetData();
+    wxColourChannel *dst = rotated.GetData();
 
-    unsigned char *alpha_dst = has_alpha ? rotated.GetAlpha() : NULL;
+    wxColourChannel *alpha_dst = has_alpha ? rotated.GetAlpha() : NULL;
 
     // if the original image has a mask, use its RGB values as the blank pixel,
     // else, fall back to default (black).
-    unsigned char blank_r = 0;
-    unsigned char blank_g = 0;
-    unsigned char blank_b = 0;
+    wxColourChannel blank_r = 0;
+    wxColourChannel blank_g = 0;
+    wxColourChannel blank_b = 0;
 
     if (HasMask())
     {
@@ -3013,7 +3014,7 @@
                     // d1,d2,d3,d4 are positive -- no need for abs()
                     if (d1 < wxROTATE_EPSILON)
                     {
-                        unsigned char *p = data[y1] + (3 * x1);
+                        wxColourChannel *p = data[y1] + (3 * x1);
                         *(dst++) = *(p++);
                         *(dst++) = *(p++);
                         *(dst++) = *p;
@@ -3023,7 +3024,7 @@
                     }
                     else if (d2 < wxROTATE_EPSILON)
                     {
-                        unsigned char *p = data[y1] + (3 * x2);
+                        wxColourChannel *p = data[y1] + (3 * x2);
                         *(dst++) = *(p++);
                         *(dst++) = *(p++);
                         *(dst++) = *p;
@@ -3033,7 +3034,7 @@
                     }
                     else if (d3 < wxROTATE_EPSILON)
                     {
-                        unsigned char *p = data[y2] + (3 * x2);
+                        wxColourChannel *p = data[y2] + (3 * x2);
                         *(dst++) = *(p++);
                         *(dst++) = *(p++);
                         *(dst++) = *p;
@@ -3043,7 +3044,7 @@
                     }
                     else if (d4 < wxROTATE_EPSILON)
                     {
-                        unsigned char *p = data[y2] + (3 * x1);
+                        wxColourChannel *p = data[y2] + (3 * x1);
                         *(dst++) = *(p++);
                         *(dst++) = *(p++);
                         *(dst++) = *p;
@@ -3054,24 +3055,24 @@
                     else
                     {
                         // weights for the weighted average are proportional to the inverse of the distance
-                        unsigned char *v1 = data[y1] + (3 * x1);
-                        unsigned char *v2 = data[y1] + (3 * x2);
-                        unsigned char *v3 = data[y2] + (3 * x2);
-                        unsigned char *v4 = data[y2] + (3 * x1);
+                        wxColourChannel *v1 = data[y1] + (3 * x1);
+                        wxColourChannel *v2 = data[y1] + (3 * x2);
+                        wxColourChannel *v3 = data[y2] + (3 * x2);
+                        wxColourChannel *v4 = data[y2] + (3 * x1);
 
                         const double w1 = 1/d1, w2 = 1/d2, w3 = 1/d3, w4 = 1/d4;
 
                         // GRG: Unrolled.
 
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *(v1++) + w2 * *(v2++) +
                                w3 * *(v3++) + w4 * *(v4++)) /
                               (w1 + w2 + w3 + w4) );
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *(v1++) + w2 * *(v2++) +
                                w3 * *(v3++) + w4 * *(v4++)) /
                               (w1 + w2 + w3 + w4) );
-                        *(dst++) = (unsigned char)
+                        *(dst++) = (wxColourChannel)
                             ( (w1 * *v1 + w2 * *v2 +
                                w3 * *v3 + w4 * *v4) /
                               (w1 + w2 + w3 + w4) );
@@ -3083,7 +3084,7 @@
                             v3 = alpha[y2] + (x2);
                             v4 = alpha[y2] + (x1);
 
-                            *(alpha_dst++) = (unsigned char)
+                            *(alpha_dst++) = (wxColourChannel)
                                 ( (w1 * *v1 + w2 * *v2 +
                                    w3 * *v3 + w4 * *v4) /
                                   (w1 + w2 + w3 + w4) );
@@ -3115,7 +3116,7 @@
 
                 if (0 <= xs && xs < w && 0 <= ys && ys < h)
                 {
-                    unsigned char *p = data[ys] + (3 * xs);
+                    wxColourChannel *p = data[ys] + (3 * xs);
                     *(dst++) = *(p++);
                     *(dst++) = *(p++);
                     *(dst++) = *p;
Index: src/msw/app.cpp
===================================================================
--- src/msw/app.cpp	(revision 53592)
+++ src/msw/app.cpp	(working copy)
@@ -471,7 +471,7 @@
         retval = false;
     }
 
-    delete [] *ppClassName;
+    //delete [] *ppClassName;
     *ppClassName = NULL;
 
     return retval;
Index: src/msw/palette.cpp
===================================================================
--- src/msw/palette.cpp	(revision 53592)
+++ src/msw/palette.cpp	(working copy)
@@ -31,10 +31,7 @@
 public:
     wxPaletteRefData() { Init(); }
 
-    wxPaletteRefData(int n,
-                     unsigned char *red,
-                     unsigned char *green,
-                     unsigned char *blue)
+    wxPaletteRefData(size_t n, const wxRGB* array)
     {
         Init();
 
@@ -42,11 +39,11 @@
         if ( !pPal )
             return;
 
-        for ( int i = 0; i < n; i++ )
+        for ( size_t i = 0; i < n; i++ )
         {
-            pPal->palPalEntry[i].peRed = red[i];
-            pPal->palPalEntry[i].peGreen = green[i];
-            pPal->palPalEntry[i].peBlue = blue[i];
+            pPal->palPalEntry[i].peRed = array[i].red;
+            pPal->palPalEntry[i].peGreen = array[i].green;
+            pPal->palPalEntry[i].peBlue = array[i].blue;
             pPal->palPalEntry[i].peFlags = 0;
         }
 
@@ -115,16 +112,30 @@
 
 #define M_PALETTEDATA ((wxPaletteRefData *)m_refData)
 
-bool wxPalette::Create(int n,
-                       unsigned char *red,
-                       unsigned char *green,
-                       unsigned char *blue)
+bool wxPalette::Create(size_t n, const wxRGB* array)
 {
-    m_refData = new wxPaletteRefData(n, red, green, blue);
+    m_refData = new wxPaletteRefData(n, array);
 
     return IsOk();
 }
 
+bool wxPalette::Create(size_t n,
+                       wxColourChannel *red,
+                       wxColourChannel *green,
+                       wxColourChannel *blue)
+{
+    wxRGB* array = new wxRGB[n];
+    for (size_t i = 0; i < n; i++)
+    {
+       array[i].red   = red[i];
+       array[i].green = green[i];
+       array[i].blue  = blue[i];
+    }
+    m_refData = new wxPaletteRefData(n, array);
+    wxDELETEA(array)
+    return IsOk();
+}
+
 wxGDIRefData *wxPalette::CreateGDIRefData() const
 {
     return new wxPaletteRefData;
@@ -140,9 +151,9 @@
     return IsOk() ? M_PALETTEDATA->GetEntries() : 0;
 }
 
-int wxPalette::GetPixel(unsigned char red,
-                        unsigned char green,
-                        unsigned char blue) const
+int wxPalette::GetPixel(wxColourChannel red,
+                        wxColourChannel green,
+                        wxColourChannel blue) const
 {
     if ( !m_refData )
         return wxNOT_FOUND;
@@ -152,9 +163,9 @@
 }
 
 bool wxPalette::GetRGB(int index,
-                       unsigned char *red,
-                       unsigned char *green,
-                       unsigned char *blue) const
+                       wxColourChannel *red,
+                       wxColourChannel *green,
+                       wxColourChannel *blue) const
 {
     if ( !m_refData )
         return false;

 	  	 

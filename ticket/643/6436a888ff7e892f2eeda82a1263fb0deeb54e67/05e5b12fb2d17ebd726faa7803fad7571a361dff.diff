--- C:/wxWidgets-3.1.3/samples/minimal/minimal.cpp	Sun Oct 27 17:41:42 2019
+++ C:/Users/benbrown/Desktop/minimal.cpp	Tue Feb 11 17:17:37 2020
@@ -66,8 +66,12 @@
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
+	void OnThreadEvent(wxThreadEvent &event);
+	void OnIdleEvent(wxIdleEvent& event);
 
 private:
+	wxStaticText *m_st_thread;
+
     // any class wishing to process wxWidgets events must use this macro
     wxDECLARE_EVENT_TABLE();
 };
@@ -98,6 +102,7 @@
 wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
+	EVT_THREAD(wxID_ANY, MyFrame::OnThreadEvent)
 wxEND_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
@@ -110,6 +115,38 @@
 // ============================================================================
 // implementation
 // ============================================================================
+#include <wx/thread.h>
+
+// a thread class that will periodically send events to the GUI thread
+class MyThread : public wxThread
+{
+protected:
+   wxEvtHandler* m_parent;
+
+public:
+   MyThread(wxEvtHandler *parent) : wxThread(), m_parent(parent)
+	{
+	};
+
+	ExitCode Entry();
+};
+
+
+wxThread::ExitCode MyThread::Entry()
+{
+   for (unsigned n = 0; n < 1000; n++)
+   {
+      // notify the main thread
+      wxThreadEvent *evt = new wxThreadEvent(wxEVT_THREAD);
+
+      m_parent->QueueEvent(evt);
+
+      this->Sleep(200);
+   }
+
+   return NULL;
+}
+
 
 // ----------------------------------------------------------------------------
 // the application class
@@ -178,10 +215,31 @@
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+	wxPanel *panel = new wxPanel(this, wxID_ANY);
+	m_st_thread = new wxStaticText( panel, wxID_ANY, "", wxPoint(10,100), wxSize(80,-1) );
+
+    MyThread *thread = new MyThread( this );
+	if( thread->Create()==wxTHREAD_NO_ERROR )
+	{
+		thread->Run();
+	}
+
+    Connect(wxID_ANY, wxEVT_IDLE, wxIdleEventHandler(MyFrame::OnIdleEvent));
 }
 
 
 // event handlers
+void MyFrame::OnThreadEvent(wxThreadEvent &event)
+{
+	static int counter = 1;
+	m_st_thread->SetLabel( wxString::Format("thread: %d", counter++) );
+}
+
+void MyFrame::OnIdleEvent(wxIdleEvent& event)
+{
+    event.RequestMore();
+}
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {

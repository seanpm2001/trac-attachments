Index: docs/latex/wx/category.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/category.tex,v
retrieving revision 1.76
diff -b -u -r1.76 category.tex
--- docs/latex/wx/category.tex	2003/08/21 23:16:41	1.76
+++ docs/latex/wx/category.tex	2003/11/06 21:12:02
@@ -357,6 +357,7 @@
 \begin{twocollist}\itemsep=0pt
 \twocolitem{\helpref{wxDialUpManager}{wxdialupmanager}}{Provides functions to check the status of network connection and to establish one}
 \twocolitem{\helpref{wxIPV4address}{wxipv4address}}{Represents an Internet address}
+\twocolitem{\helpref{wxIPaddress}{wxipaddress}}{Represents an Internet address}
 \twocolitem{\helpref{wxSocketBase}{wxsocketbase}}{Represents a socket base object}
 \twocolitem{\helpref{wxSocketClient}{wxsocketclient}}{Represents a socket client}
 \twocolitem{\helpref{wxSocketServer}{wxsocketserver}}{Represents a socket server}
Index: docs/latex/wx/classes.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/classes.tex,v
retrieving revision 1.143
diff -b -u -r1.143 classes.tex
--- docs/latex/wx/classes.tex	2003/09/26 20:24:34	1.143
+++ docs/latex/wx/classes.tex	2003/11/06 21:12:02
@@ -168,6 +168,7 @@
 \input ilayout.tex
 \input indlgevt.tex
 \input inputstr.tex
+\input ipaddr.tex
 \input ipvaddr.tex
 \input joystick.tex
 \input joyevent.tex
Index: docs/latex/wx/ipvaddr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/ipvaddr.tex,v
retrieving revision 1.6
diff -b -u -r1.6 ipvaddr.tex
--- docs/latex/wx/ipvaddr.tex	2003/07/09 23:14:55	1.6
+++ docs/latex/wx/ipvaddr.tex	2003/11/06 21:12:03
@@ -5,7 +5,7 @@
 
 \wxheading{Derived from}
 
-\helpref{wxSockAddress}{wxsockaddress}
+\helpref{wxIPaddress}{wxipaddress}
 
 \wxheading{Include files}
 
Index: docs/latex/wx/sckaddr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/sckaddr.tex,v
retrieving revision 1.9
diff -b -u -r1.9 sckaddr.tex
--- docs/latex/wx/sckaddr.tex	2000/02/06 19:11:05	1.9
+++ docs/latex/wx/sckaddr.tex	2003/11/06 21:12:03
@@ -16,6 +16,7 @@
 \wxheading{See also}
 
 \helpref{wxSocketBase}{wxsocketbase}
+\helpref{wxIPaddress}{wxipaddress}
 \helpref{wxIPV4address}{wxipv4address}
 
 % ----------------------------------------------------------------------------
Index: include/wx/sckaddr.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/sckaddr.h,v
retrieving revision 1.23
diff -b -u -r1.23 sckaddr.h
--- include/wx/sckaddr.h	2003/08/09 12:37:14	1.23
+++ include/wx/sckaddr.h	2003/11/06 21:12:05
@@ -52,24 +52,58 @@
   void Init();
 };
 
-class WXDLLIMPEXP_NET wxIPV4address : public wxSockAddress {
+// Interface to an IP address (either IPV4 or IPV6)
+class WXDLLIMPEXP_NET wxIPaddress : public wxSockAddress {
+  DECLARE_ABSTRACT_CLASS(wxIPaddress)
+public:
+  wxIPaddress();
+  wxIPaddress(const wxIPaddress& other);
+  virtual ~wxIPaddress();
+
+  virtual bool Hostname(const wxString& name) = 0;
+  virtual bool Service(const wxString& name) = 0;
+  virtual bool Service(unsigned short port) = 0;
+
+  virtual bool LocalHost() = 0;
+  virtual bool IsLocalHost() const = 0;
+
+  virtual bool AnyAddress() = 0;
+
+  virtual wxString IPAddress() const = 0;
+
+  virtual wxString Hostname() const = 0;
+  virtual unsigned short Service() const = 0;
+};
+
+class WXDLLIMPEXP_NET wxIPV4address : public wxIPaddress {
   DECLARE_DYNAMIC_CLASS(wxIPV4address)
 public:
   wxIPV4address();
   wxIPV4address(const wxIPV4address& other);
   virtual ~wxIPV4address();
 
-  bool Hostname(const wxString& name);
+  // IPV4 name formats
+  //
+  //                    hostname
+  // dot format         a.b.c.d
+  virtual bool Hostname(const wxString& name);
   bool Hostname(unsigned long addr);
-  bool Service(const wxString& name);
-  bool Service(unsigned short port);
-  bool LocalHost();
-  bool AnyAddress();
+  virtual bool Service(const wxString& name);
+  virtual bool Service(unsigned short port);
+
+  // localhost (127.0.0.1)
+  virtual bool LocalHost();
+  virtual bool IsLocalHost() const;
 
-  wxString Hostname();
+  // any (0.0.0.0)
+  virtual bool AnyAddress();
+
+  virtual wxString Hostname() const;
   wxString OrigHostname() { return m_origHostname; }
-  unsigned short Service();
-  wxString IPAddress() const;
+  virtual unsigned short Service() const;
+
+  // a.b.c.d
+  virtual wxString IPAddress() const;
 
   virtual int Type() { return wxSockAddress::IPV4; }
   virtual wxSockAddress *Clone() const;
@@ -78,8 +112,12 @@
   wxString m_origHostname;
 };
 
-#ifdef ENABLE_IPV6
-class WXDLLIMPEXP_NET wxIPV6address : public wxSockAddress {
+#if wxUSE_IPV6
+
+// Experimental Only:
+//
+// IPV6 has not yet been implemented in socket layer
+class WXDLLIMPEXP_NET wxIPV6address : public wxIPaddress {
   DECLARE_DYNAMIC_CLASS(wxIPV6address)
 private:
   struct sockaddr_in6 *m_addr;
@@ -87,20 +125,38 @@
   wxIPV6address();
   wxIPV6address(const wxIPV6address& other);
   virtual ~wxIPV6address();
+
+  // IPV6 name formats
+  //
+  //                          hostname
+  //                          3ffe:ffff:0100:f101:0210:a4ff:fee3:9566 
+  // compact (base85)         Itu&-ZQ82s>J%s99FJXT
+  // compressed format        ::1
+  // ipv4 mapped              ::ffff:1.2.3.4
+  virtual bool Hostname(const wxString& name);
 
-  bool Hostname(const wxString& name);
   bool Hostname(unsigned char addr[16]);
-  bool Service(const wxString& name);
-  bool Service(unsigned short port);
-  bool LocalHost();
+  virtual bool Service(const wxString& name);
+  virtual bool Service(unsigned short port);
 
-  wxString Hostname() const;
-  unsigned short Service() const;
+  // localhost (0000:0000:0000:0000:0000:0000:0000:0001 (::1))
+  virtual bool LocalHost();
+  virtual bool IsLocalHost() const;
 
+  // any (0000:0000:0000:0000:0000:0000:0000:0000 (::))
+  virtual bool AnyAddress();
+
+  // 3ffe:ffff:0100:f101:0210:a4ff:fee3:9566 
+  virtual wxString IPAddress() const;
+
+  virtual wxString Hostname() const;
+  virtual unsigned short Service() const;
+
   virtual int Type() { return wxSockAddress::IPV6; }
   virtual wxSockAddress *Clone() const { return new wxIPV6address(*this); }
 };
-#endif
+
+#endif // wxUSE_IPV6
 
 #if defined(__UNIX__) && !defined(__WINE__) && (!defined(__WXMAC__) || defined(__DARWIN__))
 #include <sys/socket.h>
Index: src/common/sckaddr.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/sckaddr.cpp,v
retrieving revision 1.38
diff -b -u -r1.38 sckaddr.cpp
--- src/common/sckaddr.cpp	2003/08/09 12:45:48	1.38
+++ src/common/sckaddr.cpp	2003/11/06 21:12:21
@@ -42,16 +42,17 @@
 #include "wx/sckaddr.h"
 
 IMPLEMENT_ABSTRACT_CLASS(wxSockAddress, wxObject)
-IMPLEMENT_DYNAMIC_CLASS(wxIPV4address, wxSockAddress)
-#ifdef ENABLE_IPV6
-IMPLEMENT_DYNAMIC_CLASS(wxIPV6address, wxSockAddress)
+IMPLEMENT_ABSTRACT_CLASS(wxIPaddress, wxSockAddress)
+IMPLEMENT_DYNAMIC_CLASS(wxIPV4address, wxIPaddress)
+#if wxUSE_IPV6
+IMPLEMENT_DYNAMIC_CLASS(wxIPV6address, wxIPaddress)
 #endif
 #if defined(__UNIX__) && !defined(__WINE__) && (!defined(__WXMAC__) || defined(__DARWIN__))
 IMPLEMENT_DYNAMIC_CLASS(wxUNIXaddress, wxSockAddress)
 #endif
 
 // ---------------------------------------------------------------------------
-// wxIPV4address
+// wxSockAddress
 // ---------------------------------------------------------------------------
 
 void wxSockAddress::Init()
@@ -102,15 +103,34 @@
 }
 
 // ---------------------------------------------------------------------------
+// wxIPaddress
+// ---------------------------------------------------------------------------
+
+wxIPaddress::wxIPaddress()
+            : wxSockAddress()
+{
+}
+
+wxIPaddress::wxIPaddress(const wxIPaddress& other)
+            : wxSockAddress(other)
+{
+}
+
+wxIPaddress::~wxIPaddress()
+{
+}
+
+// ---------------------------------------------------------------------------
 // wxIPV4address
 // ---------------------------------------------------------------------------
 
 wxIPV4address::wxIPV4address()
+             : wxIPaddress()
 {
 }
 
 wxIPV4address::wxIPV4address(const wxIPV4address& other)
-             : wxSockAddress(other)
+             : wxIPaddress(other)
 {
 }
 
@@ -155,12 +175,17 @@
   return (GAddress_INET_SetHostName(m_address, "localhost") == GSOCK_NOERROR);
 }
 
+bool wxIPV4address::IsLocalHost() const
+{
+  return (Hostname() == wxT("localhost") || IPAddress() == wxT("127.0.0.1"));
+}
+
 bool wxIPV4address::AnyAddress()
 {
   return (GAddress_INET_SetAnyAddress(m_address) == GSOCK_NOERROR);
 }
 
-wxString wxIPV4address::Hostname()
+wxString wxIPV4address::Hostname() const
 {
    char hostname[1024];
 
@@ -169,7 +194,7 @@
    return wxString::FromAscii(hostname);
 }
 
-unsigned short wxIPV4address::Service()
+unsigned short wxIPV4address::Service() const
 {
   return GAddress_INET_GetPort(m_address);
 }
@@ -193,18 +218,18 @@
 		);
 }
 
-#if 0
+#if wxUSE_IPV6
 // ---------------------------------------------------------------------------
 // wxIPV6address
 // ---------------------------------------------------------------------------
 
 wxIPV6address::wxIPV6address()
-  : wxSockAddress()
+  : wxIPaddress()
 {
 }
 
 wxIPV6address::wxIPV6address(const wxIPV6address& other)
-             : wxSockAddress(other)
+             : wxIPaddress(other)
 {
 }
 
@@ -214,17 +239,22 @@
 
 bool wxIPV6address::Hostname(const wxString& name)
 {
-  return (GAddress_INET_SetHostName(m_address, name.fn_str()) == GSOCK_NOERROR);
+  if (name == wxT(""))
+  {
+    wxLogWarning( _("Trying to solve a NULL hostname: giving up") );
+    return FALSE;
+  }
+  return (GAddress_INET_SetHostName(m_address, name.mb_str()) == GSOCK_NOERROR);
 }
 
-bool wxIPV6address::Hostname(unsigned char addr[16])
+bool wxIPV6address::Hostname(unsigned char[16] WXUNUSED(addr))
 {
   return TRUE;
 }
 
-bool wxIPV6address::Service(const char *name)
+bool wxIPV6address::Service(const wxString& name)
 {
-  return (GAddress_INET_SetPortName(m_address, name.fn_str()) == GSOCK_NOERROR);
+  return (GAddress_INET_SetPortName(m_address, name.mb_str(), "tcp") == GSOCK_NOERROR);
 }
 
 bool wxIPV6address::Service(unsigned short port)
@@ -237,17 +267,43 @@
   return (GAddress_INET_SetHostName(m_address, "localhost") == GSOCK_NOERROR);
 }
 
-const wxString& wxIPV6address::Hostname()
+bool wxIPV6address::IsLocalHost() const
 {
-  return wxString(GAddress_INET_GetHostName(m_address));
+  return (Hostname() == wxT("localhost") || IPAddress() == wxT("127.0.0.1"));
+}
+
+bool wxIPV6address::AnyAddress()
+{
+  return (GAddress_INET_SetAnyAddress(m_address) == GSOCK_NOERROR);
+}
+
+wxString wxIPV6address::IPAddress() const
+{	
+	unsigned long raw =  GAddress_INET_GetHostAddress(m_address);
+	return wxString::Format(
+		_T("%u.%u.%u.%u"),
+		(unsigned char)(raw & 0xff),
+		(unsigned char)((raw>>8) & 0xff),
+		(unsigned char)((raw>>16) & 0xff),
+		(unsigned char)((raw>>24) & 0xff)
+		);
+}
+
+wxString wxIPV6address::Hostname() const
+{
+   char hostname[1024];
+
+   hostname[0] = 0;
+   GAddress_INET_GetHostName(m_address, hostname, 1024);
+   return wxString::FromAscii(hostname);
 }
 
-unsigned short wxIPV6address::Service()
+unsigned short wxIPV6address::Service() const
 {
   return GAddress_INET_GetPort(m_address);
 }
 
-#endif // 0
+#endif // wxUSE_IPV6
 
 #if defined(__UNIX__) && !defined(__WINE__) && (!defined(__WXMAC__) || defined(__DARWIN__))
 

 	  	 

Index: src/x11/window.cpp
===================================================================
--- src/x11/window.cpp	(revision 63686)
+++ src/x11/window.cpp	(working copy)
@@ -148,7 +148,7 @@
     if (parent->GetInsertIntoMain())
     {
         // wxLogDebug( "Inserted into main: %s", GetName().c_str() );
-        xparent = (Window) parent->GetMainWindow();
+        xparent = (Window) parent->X11GetMainWindow();
     }
 
     // Size (not including the border) must be nonzero (or a Value error results)!
@@ -1267,7 +1267,7 @@
             x = sb->GetPosition().x;
 
             Display *xdisplay = wxGlobalDisplay();
-            Window xwindow = (Window) GetMainWindow();
+            Window xwindow = (Window) X11GetMainWindow();
             Colormap cm = (Colormap) wxTheApp->GetMainColormap( wxGetDisplay() );
             wxColour colour = wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE);
             colour.CalcPixel( (WXColormap) cm );
@@ -1408,7 +1408,7 @@
 // X11-specific accessors
 // ----------------------------------------------------------------------------
 
-WXWindow wxWindowX11::GetMainWindow() const
+WXWindow wxWindowX11::X11GetMainWindow() const
 {
     return m_mainWindow;
 }
Index: src/x11/reparent.cpp
===================================================================
--- src/x11/reparent.cpp	(revision 63686)
+++ src/x11/reparent.cpp	(working copy)
@@ -89,12 +89,12 @@
 
     old = XSetErrorHandler(ErrorHandler);
     XReparentWindow( wxGlobalDisplay(),
-                     (Window) toReparent->GetMainWindow(),
-                     (Window) newParent->GetMainWindow(),
+                     (Window) toReparent->X11GetMainWindow(),
+                     (Window) newParent->X11GetMainWindow(),
                      0, 0);
 
     if (!XQueryTree( wxGlobalDisplay(),
-                     (Window) toReparent->GetMainWindow(),
+                     (Window) toReparent->X11GetMainWindow(),
                      &returnroot, &returnparent,
                      &children, &numchildren) || Xerror)
     {
@@ -123,7 +123,7 @@
               "Reparenting child at offset %d and position %d, %d.\n",
                parentOffset, parentOffset+xwa.x, parentOffset+xwa.y);
             XReparentWindow( wxGlobalDisplay(),
-                             children[each], (Window) newParent->GetMainWindow(),
+                             children[each], (Window) newParent->X11GetMainWindow(),
                              xwa.x, xwa.y);
         }
     }
Index: src/x11/toplevel.cpp
===================================================================
--- src/x11/toplevel.cpp	(revision 63686)
+++ src/x11/toplevel.cpp	(working copy)
@@ -198,9 +198,9 @@
     {
        if (GetExtraStyle() & wxTOPLEVEL_EX_DIALOG)
        {
-            if (GetParent() && GetParent()->GetMainWindow())
+            if (GetParent() && GetParent()->X11GetMainWindow())
             {
-                Window xparentwindow = (Window) GetParent()->GetMainWindow();
+                Window xparentwindow = (Window) GetParent()->X11GetMainWindow();
                 XSetTransientForHint( xdisplay, xwindow, xparentwindow );
             }
         }
@@ -220,7 +220,7 @@
     if (GetParent())
     {
         wm_hints.flags |= WindowGroupHint;
-        wm_hints.window_group = (Window) GetParent()->GetMainWindow();
+        wm_hints.window_group = (Window) GetParent()->X11GetMainWindow();
     }
     wm_hints.input = True;
     wm_hints.initial_state = NormalState;
@@ -318,10 +318,10 @@
         return;
     }
 
-    if (!m_iconized && GetMainWindow())
+    if (!m_iconized && X11GetMainWindow())
     {
         if (XIconifyWindow(wxGlobalDisplay(),
-            (Window) GetMainWindow(), DefaultScreen(wxGlobalDisplay())) != 0)
+            (Window) X11GetMainWindow(), DefaultScreen(wxGlobalDisplay())) != 0)
             m_iconized = true;
     }
 }
@@ -334,9 +334,9 @@
 void wxTopLevelWindowX11::Restore()
 {
     // This is the way to deiconify the window, according to the X FAQ
-    if (m_iconized && GetMainWindow())
+    if (m_iconized && X11GetMainWindow())
     {
-        XMapWindow(wxGlobalDisplay(), (Window) GetMainWindow());
+        XMapWindow(wxGlobalDisplay(), (Window) X11GetMainWindow());
         m_iconized = false;
     }
 }
@@ -377,7 +377,7 @@
 
 void wxTopLevelWindowX11::DoSetIcon(const wxIcon& icon)
 {
-    if (icon.Ok() && GetMainWindow())
+    if (icon.Ok() && X11GetMainWindow())
     {
 #if !wxUSE_NANOX
         XWMHints *wmHints = XAllocWMHints();
@@ -391,7 +391,7 @@
             wmHints->icon_mask = (Pixmap) icon.GetMask()->GetBitmap();
         }
 
-        XSetWMHints(wxGlobalDisplay(), (Window) GetMainWindow(), wmHints);
+        XSetWMHints(wxGlobalDisplay(), (Window) X11GetMainWindow(), wmHints);
         XFree(wmHints);
 #endif
     }
@@ -403,13 +403,13 @@
     wxTopLevelWindowBase::SetIcons( icons );
 
     DoSetIcon( icons.GetIcon( -1 ) );
-    wxSetIconsX11( wxGlobalDisplay(), GetMainWindow(), icons );
+    wxSetIconsX11( wxGlobalDisplay(), X11GetMainWindow(), icons );
 }
 
 bool wxTopLevelWindowX11::SetShape(const wxRegion& region)
 {
     return wxDoSetShape( wxGlobalDisplay(),
-                         (Window)GetMainWindow(),
+                         (Window)X11GetMainWindow(),
                          region );
 }
 
@@ -417,18 +417,18 @@
 {
     m_title = title;
 
-    if (GetMainWindow())
+    if (X11GetMainWindow())
     {
 #if wxUSE_UNICODE
         //  I wonder of e.g. Metacity takes UTF-8 here
-        XStoreName(wxGlobalDisplay(), (Window) GetMainWindow(),
+        XStoreName(wxGlobalDisplay(), (Window) X11GetMainWindow(),
             (const char*) title.ToAscii() );
-        XSetIconName(wxGlobalDisplay(), (Window) GetMainWindow(),
+        XSetIconName(wxGlobalDisplay(), (Window) X11GetMainWindow(),
             (const char*) title.ToAscii() );
 #else
-        XStoreName(wxGlobalDisplay(), (Window) GetMainWindow(),
+        XStoreName(wxGlobalDisplay(), (Window) X11GetMainWindow(),
             (const char*) title);
-        XSetIconName(wxGlobalDisplay(), (Window) GetMainWindow(),
+        XSetIconName(wxGlobalDisplay(), (Window) X11GetMainWindow(),
             (const char*) title);
 #endif
     }
@@ -484,7 +484,7 @@
     size_hints.flags = PSize;
     size_hints.width = width;
     size_hints.height = height;
-    XSetWMNormalHints( wxGlobalDisplay(), (Window) GetMainWindow(), &size_hints );
+    XSetWMNormalHints( wxGlobalDisplay(), (Window) X11GetMainWindow(), &size_hints );
 #endif
 
     wxWindowX11::DoSetClientSize(width, height);
@@ -523,7 +523,7 @@
     size_hints.y = m_y;
     size_hints.width = m_width;
     size_hints.height = m_height;
-    XSetWMNormalHints( wxGlobalDisplay(), (Window) GetMainWindow(), &size_hints);
+    XSetWMNormalHints( wxGlobalDisplay(), (Window) X11GetMainWindow(), &size_hints);
 #endif
 
     wxWindowX11::DoSetSize(x, y, width, height, sizeFlags);
Index: src/x11/glcanvas.cpp
===================================================================
--- src/x11/glcanvas.cpp	(revision 63686)
+++ src/x11/glcanvas.cpp	(working copy)
@@ -61,7 +61,7 @@
                         long style,
                         const wxString& name,
                         const int *attribList,
-                        const wxPalette& palette)
+                        const wxPalette& WXUNUSED(palette))
 {
     if ( !wxWindow::Create(parent, id, pos, size, style, name) )
         return false;
Index: src/x11/app.cpp
===================================================================
--- src/x11/app.cpp	(revision 63686)
+++ src/x11/app.cpp	(working copy)
@@ -338,7 +338,7 @@
 
                 // If we only have one X11 window, always indicate
                 // that borders might have to be redrawn.
-                if (win->GetMainWindow() == win->GetClientAreaWindow())
+                if (win->X11GetMainWindow() == win->GetClientAreaWindow())
                     win->NeedUpdateNcAreaInIdle();
 
                 // Only erase background, paint in idle time.
Index: src/x11/dcclient.cpp
===================================================================
--- src/x11/dcclient.cpp	(revision 63686)
+++ src/x11/dcclient.cpp	(working copy)
@@ -183,7 +183,7 @@
 
     m_font = window->GetFont();
 
-    m_x11window = (WXWindow*) window->GetMainWindow();
+    m_x11window = (WXWindow*) window->X11GetMainWindow();
 
     // not realized ?
     if (!m_x11window)
@@ -2356,7 +2356,7 @@
     m_x11window = (WXWindow*) window->GetClientAreaWindow();
 
     // Adjust the client area when the wxWindow is not using 2 X11 windows.
-    if (m_x11window == (WXWindow*) window->GetMainWindow())
+    if (m_x11window == (WXWindow*) window->X11GetMainWindow())
     {
         wxPoint ptOrigin = window->GetClientAreaOrigin();
         SetDeviceOrigin(ptOrigin.x, ptOrigin.y);
Index: src/x11/pango_x.cpp
===================================================================
--- src/x11/pango_x.cpp	(revision 63686)
+++ src/x11/pango_x.cpp	(working copy)
@@ -88,6 +88,7 @@
 #endif
     {
         pango_x_render( wxGlobalDisplay(), drawable, gc, font, glyphs, x, y );
+	colour=colour; // Avoids "unused parameter" warning
     }
 }
 
Index: include/wx/x11/window.h
===================================================================
--- include/wx/x11/window.h	(revision 63686)
+++ include/wx/x11/window.h	(working copy)
@@ -82,7 +82,7 @@
     virtual void DragAcceptFiles(bool accept);
 
     // Get the unique identifier of a window
-    virtual WXWindow GetHandle() const { return GetMainWindow(); }
+    virtual WXWindow GetHandle() const { return X11GetMainWindow(); }
 
     // implementation from now on
     // --------------------------
@@ -91,7 +91,7 @@
     // ---------
 
     // Get main X11 window
-    virtual WXWindow GetMainWindow() const;
+    virtual WXWindow X11GetMainWindow() const;
 
     // Get X11 window representing the client area
     virtual WXWindow GetClientAreaWindow() const;
Index: include/wx/x11/reparent.h
===================================================================
--- include/wx/x11/reparent.h	(revision 63686)
+++ include/wx/x11/reparent.h	(working copy)
@@ -60,7 +60,7 @@
     virtual ~wxAdoptedWindow();
 
     void SetHandle(WXWindow window) { m_mainWindow = window; m_clientWindow = window; }
-    WXWindow GetHandle() const { return GetMainWindow(); }
+    WXWindow GetHandle() const { return X11GetMainWindow(); }
 };
 
 #endif

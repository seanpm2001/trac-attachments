diff -ur wxWidgets-2.6.0.orig/docs/latex/wx/db.tex wxWidgets-2.6.0/docs/latex/wx/db.tex
--- wxWidgets-2.6.0.orig/docs/latex/wx/db.tex	2005-04-11 13:18:14.000000000 -0700
+++ wxWidgets-2.6.0/docs/latex/wx/db.tex	2005-05-12 18:59:12.000000000 -0700
@@ -707,6 +707,20 @@
 
 If the view does not exist, this function will return true.  Note that views are not supported with all datasources.
 
+\membersection{wxDb::EscapeSqlChars}\label{wxdbescapesqlchars}
+
+\func{wxString}{EscapeSqlChars}{param{wxString}{value}}
+
+Escapes special characters out of the SQL statement so that the database server will treat it regular text.
+
+\wxheading{Parameters}
+
+\docparam{value}{The value to be escaped.}
+
+\wxheading{Remarks}
+
+This function is used internally by wxWidgets while building SQL statements.  It has been provided to help users who wish to explicity construct SQL statements to be sent to the server.  The function takes the value passed and returns it with any special characters escaped.  Which characters are considered special depends on what type of datasource the object is connected to.  For example, most database servers use a backslash (\\) as the escape character; if the value passed contains a backlash it will be replaced with a double backslash (\\\\) before it is passed to the server.  This function can be used to avoid passing statements with syntax errors to the server as well as prevent SQL injection attacks.
+
 \membersection{wxDb::ExecSql}\label{wxdbexecsql}
 
 \func{bool}{ExecSql}{\param{const wxString \&}{pSqlStmt}}
Only in wxWidgets-2.6.0/docs/latex/wx: db.tex~
diff -ur wxWidgets-2.6.0.orig/include/wx/db.h wxWidgets-2.6.0/include/wx/db.h
--- wxWidgets-2.6.0.orig/include/wx/db.h	2005-04-16 02:44:18.000000000 -0700
+++ wxWidgets-2.6.0/include/wx/db.h	2005-05-10 09:17:47.000000000 -0700
@@ -709,6 +709,13 @@
 
     bool         FwdOnlyCursors(void)  {return fwdOnlyCursors;}
 
+	/* Added by DPB to allow for building clauses that aren't vulnerable to SQL injection attacks .
+	   Currently this is only called by wxDbTable::BuildWhereClause().  I defined it in this class because
+	   character escaping is naturally dependant on what type of database connection is in use.
+	   DPB - May 5 2005
+	 */
+	wxString		EscapeSqlChars(wxString value);
+
     // These two functions are provided strictly for use by wxDbTable.
     // DO NOT USE THESE FUNCTIONS, OR MEMORY LEAKS MAY OCCUR
     void         incrementTableCount() { nTables++; return; }
diff -ur wxWidgets-2.6.0.orig/src/common/db.cpp wxWidgets-2.6.0/src/common/db.cpp
--- wxWidgets-2.6.0.orig/src/common/db.cpp	2005-04-16 02:44:28.000000000 -0700
+++ wxWidgets-2.6.0/src/common/db.cpp	2005-05-10 09:34:59.000000000 -0700
@@ -290,7 +290,7 @@
         if ((i_sqlDataType == SQL_VARCHAR)
 #if wxUSE_UNICODE
     #if defined(SQL_WCHAR)
-            || (i_sqlDataType == SQL_WCHAR) 
+            || (i_sqlDataType == SQL_WCHAR)
     #endif
     #if defined(SQL_WVARCHAR)
             || (i_sqlDataType == SQL_WVARCHAR)
@@ -4047,6 +4047,30 @@
 
 } // wxDb::ModifyColumn()
 
+/********** wxDb::EscapeSqlChars() **********/
+wxString wxDb::EscapeSqlChars(wxString value)
+{
+	/* We should check for the various types of DB engines here and escape every possible
+	   special character for that platform.  Since I only use MS Access and MySQL, we'll start with
+	   those.
+	   DPB May 5 2005
+	 */
+	 switch (Dbms())
+	 {
+	 case dbmsACCESS:
+	 	// Access doesn't seem to care about backslashes, so only escape single quotes.
+	 	value.Replace(wxT("'"), wxT("''"));
+	 	break;
+
+	 default:
+	 	// All the others should be the same???
+	 	value.Replace(wxT("\\"), wxT("\\\\"));	// Do this first, otherwise we'll escape our escape in the next step. :)
+	 	value.Replace(wxT("'"), wxT("\\'"));
+	 	break;
+ 	}
+
+	return value;
+} // wxDb::EscapeSqlChars()
 
 /********** wxDbGetConnection() **********/
 wxDb WXDLLIMPEXP_ODBC *wxDbGetConnection(wxDbConnectInf *pDbConfig, bool FwdOnlyCursors)
diff -ur wxWidgets-2.6.0.orig/src/common/dbtable.cpp wxWidgets-2.6.0/src/common/dbtable.cpp
--- wxWidgets-2.6.0.orig/src/common/dbtable.cpp	2005-03-21 04:19:40.000000000 -0700
+++ wxWidgets-2.6.0/src/common/dbtable.cpp	2005-05-10 09:18:08.000000000 -0700
@@ -1312,7 +1312,13 @@
                 case SQL_C_WCHAR:
 #endif
                 //case SQL_C_WXCHAR:  SQL_C_WXCHAR is covered by either SQL_C_CHAR or SQL_C_WCHAR
-                    colValue.Printf(wxT("'%s'"), (UCHAR FAR *) colDefs[colNumber].PtrDataObj);
+                    colValue = GetDb()->EscapeSqlChars((UCHAR FAR *)colDefs[colNumber].PtrDataObj);
+
+                    /* I don't think colValue.Printf(wxT("'%s'"), colValue.c_str()) is safe, so do it the slower way...
+                       DPB May 8 2005
+                     */
+                    colValue.Prepend('\'');
+                    colValue.Append('\'');
                     break;
                 case SQL_C_SHORT:
                 case SQL_C_SSHORT:
@@ -1348,7 +1354,6 @@
     }
 }  // wxDbTable::BuildWhereClause()
 
-
 /***** DEPRECATED: use wxDbTable::BuildWhereClause(wxString &....) form *****/
 void wxDbTable::BuildWhereClause(wxChar *pWhereClause, int typeOfWhere,
                                  const wxString &qualTableName, bool useLikeComparison)

 	  	 

Index: docs/latex/wx/point.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/point.tex,v
retrieving revision 1.5
diff -u2 -r1.5 docs/latex/wx/point.tex
--- docs/latex/wx/point.tex
+++ docs/latex/wx/point.tex
@@ -40,15 +40,34 @@
 y member.
 
-\membersection{wxPoint::operator $==$}\label{wxpointequal}
+\membersection{Operators}\label{wxpointoperators}
 
-\func{bool}{operator $==$}{\param{const wxPoint\& }{pt}}
+\func{void}{operator $=$}{\param{const wxPoint\& }{pt}}
 
-Equality operator: returns \true if two points are the same.
+Assignment operator.
 
 
-\membersection{wxPoint::operator $!=$}\label{wxpointnotequal}
+\func{bool}{operator $==$}{\param{const wxPoint\& }{pt}}
 
 \func{bool}{operator $!=$}{\param{const wxPoint\& }{pt}}
 
-Inequality operator: returns \true if two points are different.
+\func{wxPoint}{operator $+$}{\param{const wxPoint\& }{pt}}
+
+\func{wxPoint}{operator $-$}{\param{const wxPoint\& }{pt}}
+
+\func{wxPoint\&}{operator $+=$}{\param{const wxPoint\& }{pt}}
+
+\func{wxPoint\&}{operator $-=$}{\param{const wxPoint\& }{pt}}
+
+Operators for comparison, sum and subtraction between \helpref{wxPoint}{wxpoint} objects.
+
+
+\func{wxPoint}{operator $+$}{\param{const wxSize\& }{sz}}
+
+\func{wxPoint}{operator $-$}{\param{const wxSize\& }{sz}}
+
+\func{wxPoint\&}{operator $+=$}{\param{const wxSize\& }{sz}}
+
+\func{wxPoint\&}{operator $-=$}{\param{const wxSize\& }{sz}}
 
+Operators for sum and subtraction between a \helpref{wxPoint}{wxpoint} object and a
+\helpref{wxSize}{wxsize} object.
Index: docs/latex/wx/size.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/size.tex,v
retrieving revision 1.14
diff -u2 -r1.14 docs/latex/wx/size.tex
--- docs/latex/wx/size.tex
+++ docs/latex/wx/size.tex
@@ -55,8 +55,8 @@
 
 Returns \true if neither of the size object components is equal to $-1$, which
-is used as default for the size values in wxWidgets (hence the predefined 
+is used as default for the size values in wxWidgets (hence the predefined
 \texttt{wxDefaultSize} has both of its components equal to $-1$).
 
-This method is typically used before calling 
+This method is typically used before calling
 \helpref{SetDefaults}{wxsizesetdefaults}.
 
@@ -90,4 +90,14 @@
 
 
+\membersection{wxSize::Scale}\label{wxsizescale}
+
+\func{void}{Scale}{\param{float}{ xscale}, \param{float}{ yscale}}
+
+Scales the dimensions of this object by the given factors.
+If you want to scale both dimensions by the same factor you can also use
+the \helpref{operator *=}{wxsizeoperators}
+
+
+
 \membersection{wxSize::Set}\label{wxsizeset}
 
@@ -130,5 +140,5 @@
 
 
-\membersection{wxSize::operator $=$}\label{wxsizeassign}
+\membersection{Operators}\label{wxsizeoperators}
 
 \func{void}{operator $=$}{\param{const wxSize\& }{sz}}
@@ -137,2 +147,26 @@
 
 
+\func{bool}{operator $==$}{\param{const wxSize\& }{sz}}
+
+\func{bool}{operator $!=$}{\param{const wxSize\& }{sz}}
+
+\func{wxSize}{operator $+$}{\param{const wxSize\& }{sz}}
+
+\func{wxSize}{operator $-$}{\param{const wxSize\& }{sz}}
+
+\func{wxSize\&}{operator $+=$}{\param{const wxSize\& }{sz}}
+
+\func{wxSize\&}{operator $-=$}{\param{const wxSize\& }{sz}}
+
+Operators for comparison, sum and subtraction between \helpref{wxSize}{wxsize} objects.
+
+
+\func{wxSize}{operator $/$}{\param{int }{factor}}
+
+\func{wxSize}{operator $*$}{\param{int }{factor}}
+
+\func{wxSize\&}{operator $/=$}{\param{int }{factor}}
+
+\func{wxSize\&}{operator $*=$}{\param{int }{factor}}
+
+Operators for division and multiplication between a \helpref{wxSize}{wxsize} object and an integer.
Index: include/wx/gdicmn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gdicmn.h,v
retrieving revision 1.110
diff -u2 -r1.110 include/wx/gdicmn.h
--- include/wx/gdicmn.h
+++ include/wx/gdicmn.h
@@ -230,4 +230,7 @@
         { if ( sz.x < x ) x = sz.x; if ( sz.y < y ) y = sz.y; }
 
+    void Scale(float xscale, float yscale)
+        { x = (int)(x*xscale); y = (int)(y*yscale); }
+
     // accessors
     void Set(int xx, int yy) { x = xx; y = yy; }

 	  	 

Index: src/unix/glx11.cpp
===================================================================
--- src/unix/glx11.cpp	(revision 51376)
+++ src/unix/glx11.cpp	(working copy)
@@ -297,6 +297,24 @@
     return *pXVisual != NULL;
 }
 
+/* static */
+bool
+wxGLCanvasX11::IsDisplaySupported(const int *attribList)
+{
+
+    GLXFBConfig *fbConfig = NULL;
+    XVisualInfo *visual = NULL;
+    bool isSupported;
+
+    isSupported = InitXVisualInfo(attribList, &fbConfig, &visual);
+
+    if (fbConfig) XFree(fbConfig);
+    if (visual) XFree(visual);
+
+    return isSupported;
+
+}
+
 // ----------------------------------------------------------------------------
 // default visual management
 // ----------------------------------------------------------------------------
Index: src/mac/carbon/glcanvas.cpp
===================================================================
--- src/mac/carbon/glcanvas.cpp	(revision 51376)
+++ src/mac/carbon/glcanvas.cpp	(working copy)
@@ -312,6 +312,22 @@
         aglDestroyPixelFormat(m_aglFormat);
 }
 
+/* static */
+bool wxGLCanvas::IsDisplaySupported(const int *attribList)
+{
+
+    bool isSupported;
+
+    AGLPixelFormat aglFormat = ChoosePixelFormat(attribList);
+    isSupported = aglFormat != NULL;
+
+    if ( aglFormat )
+        aglDestroyPixelFormat(aglFormat);
+
+    return isSupported;
+
+}
+
 bool wxGLCanvas::SwapBuffers()
 {
     AGLContext context = aglGetCurrentContext();
Index: src/msw/glcanvas.cpp
===================================================================
--- src/msw/glcanvas.cpp	(revision 51376)
+++ src/msw/glcanvas.cpp	(working copy)
@@ -450,6 +450,25 @@
     return ::ChoosePixelFormat(hdc, ppfd);
 }
 
+/* static */
+bool wxGLCanvas::IsDisplaySupported(const int *attribList)
+{
+
+    // We need a device context to test the pixel format, so get one
+    // for the root window.
+    HDC hDC = ::GetDC(GetDesktopWindow());
+    bool isSupported;
+
+    if ( !hDC )
+        return false;
+
+    isSupported = ChooseMatchingPixelFormat(hDC, attribList) > 0;
+    ReleaseDC(GetDesktopWindow(), hDC);
+
+    return isSupported;
+
+}
+
 bool wxGLCanvas::DoSetup(const int *attribList)
 {
     PIXELFORMATDESCRIPTOR pfd;
Index: docs/latex/wx/glcanvas.tex
===================================================================
--- docs/latex/wx/glcanvas.tex	(revision 51376)
+++ docs/latex/wx/glcanvas.tex	(working copy)
@@ -125,6 +125,17 @@
 Ignored under most platforms.}
 
 
+\membersection{wxGLCanvas::IsDisplaySupported}\label{wxglcanvasisdisplaysupported}
+
+\func{static bool}{IsDisplaySupported}{ \param{const int *}{ attribList = NULL} }
+
+Determines if a canvas having the specified attributes is available.
+
+\docparam{attribList}{See \arg{attribList} for \helpref{wxGLCanvas::wxGLCanvas}{wxglcanvasconstr}.}
+
+Returns \true if attributes are supported.
+
+
 \membersection{wxGLCanvas::SetCurrent}\label{wxglcanvassetcurrent}
 
 \func{bool}{SetCurrent}{ \param{const wxGLContext&}{ context} }
Index: include/wx/unix/glx11.h
===================================================================
--- include/wx/unix/glx11.h	(revision 51376)
+++ include/wx/unix/glx11.h	(working copy)
@@ -89,6 +89,9 @@
     // not found
     static bool InitDefaultVisualInfo(const int *attribList);
 
+    // check whether attributes are supported without creating a canvas
+    static bool IsDisplaySupported(const int *attribList);
+
     // get the default GL X11 visual (may be NULL, shouldn't be freed by caller)
     static XVisualInfo *GetDefaultXVisualInfo() { return ms_glVisualInfo; }
 
Index: include/wx/mac/carbon/glcanvas.h
===================================================================
--- include/wx/mac/carbon/glcanvas.h	(revision 51376)
+++ include/wx/mac/carbon/glcanvas.h	(working copy)
@@ -120,6 +120,9 @@
     // i.e. don't forget "event.Skip()" in your EVT_SIZE handler
     void OnSize(wxSizeEvent& event);
 
+    // check whether attributes are supported without creating a canvas
+    static bool IsDisplaySupported(const int *attribList);
+
     virtual void MacSuperChangedPosition();
     virtual void MacTopLevelWindowChangedPosition();
     virtual void MacVisibilityChanged();
Index: include/wx/msw/glcanvas.h
===================================================================
--- include/wx/msw/glcanvas.h	(revision 51376)
+++ include/wx/msw/glcanvas.h	(working copy)
@@ -82,6 +82,9 @@
     static int ChooseMatchingPixelFormat(HDC hdc, const int *attribList,
                                          PIXELFORMATDESCRIPTOR *pfd = NULL);
 
+    // check whether attributes are supported without creating a canvas
+    static bool IsDisplaySupported(const int *attribList);
+
 #if wxUSE_PALETTE
     // palette stuff
     bool SetupPalette(const wxPalette& palette);
Index: samples/opengl/cube/cube.cpp
===================================================================
--- samples/opengl/cube/cube.cpp	(revision 51376)
+++ samples/opengl/cube/cube.cpp	(working copy)
@@ -385,6 +385,11 @@
 
     SetClientSize(400, 400);
     Show();
+
+    static const int attribs[] = { WX_GL_RGBA, WX_GL_DOUBLEBUFFER, 0 };
+    if (!wxGLCanvas::IsDisplaySupported(attribs)) {
+        wxLogStatus(_T("Double-buffered display not supported."));
+    }
 }
 
 void MyFrame::OnClose(wxCommandEvent& WXUNUSED(event))

 	  	 

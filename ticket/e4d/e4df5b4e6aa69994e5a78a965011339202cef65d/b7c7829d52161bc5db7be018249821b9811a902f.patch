Index: include/wx/clrpicker.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/clrpicker.h,v
retrieving revision 1.1
diff -bu2 -r1.1 include/wx/clrpicker.h
--- include/wx/clrpicker.h
+++ include/wx/clrpicker.h
@@ -86,5 +86,5 @@
 // ----------------------------------------------------------------------------
 
-#define wxCLRP_USE_TEXTCTRL       wxPB_USE_TEXTCTRL
+#define wxCLRP_USE_TEXTCTRL       (wxPB_USE_TEXTCTRL)
 #define wxCLRP_DEFAULT_STYLE      0
 
Index: include/wx/filepicker.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/filepicker.h,v
retrieving revision 1.2
diff -bu2 -r1.2 include/wx/filepicker.h
--- include/wx/filepicker.h
+++ include/wx/filepicker.h
@@ -49,9 +49,9 @@
 
     wxString GetPath() const { return m_path; }
-    void SetPath(const wxString &str) { m_path=str; UpdateDialogPath(); }
+    virtual void SetPath(const wxString &str) { m_path=str; }
 
 protected:
-    virtual void UpdateDialogPath() = 0;
-    virtual void UpdatePathFromDialog() = 0;
+    virtual void UpdateDialogPath(wxDialog *) = 0;
+    virtual void UpdatePathFromDialog(wxDialog *) = 0;
 
     wxString m_path;
@@ -160,11 +160,11 @@
 // ----------------------------------------------------------------------------
 
-#define wxFLP_USE_TEXTCTRL            wxPB_USE_TEXTCTRL
+#define wxFLP_USE_TEXTCTRL            (wxPB_USE_TEXTCTRL)
 
 #ifdef __WXGTK__
     // GTK apps usually don't have a textctrl next to the picker
-    #define wxFLP_DEFAULT_STYLE       wxFLP_OPEN
+    #define wxFLP_DEFAULT_STYLE       (wxFLP_OPEN)
 #else
-    #define wxFLP_DEFAULT_STYLE       wxFLP_USE_TEXTCTRL|wxFLP_OPEN
+    #define wxFLP_DEFAULT_STYLE       (wxFLP_USE_TEXTCTRL|wxFLP_OPEN)
 #endif
 
@@ -254,5 +254,5 @@
 // ----------------------------------------------------------------------------
 
-#define wxDIRP_USE_TEXTCTRL            wxPB_USE_TEXTCTRL
+#define wxDIRP_USE_TEXTCTRL            (wxPB_USE_TEXTCTRL)
 
 #ifdef __WXGTK__
@@ -260,5 +260,5 @@
     #define wxDIRP_DEFAULT_STYLE       0
 #else
-    #define wxDIRP_DEFAULT_STYLE       wxDIRP_USE_TEXTCTRL
+    #define wxDIRP_DEFAULT_STYLE       (wxDIRP_USE_TEXTCTRL)
 #endif
 
Index: include/wx/fontpicker.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/fontpicker.h,v
retrieving revision 1.1
diff -bu2 -r1.1 include/wx/fontpicker.h
--- include/wx/fontpicker.h
+++ include/wx/fontpicker.h
@@ -81,6 +81,6 @@
 // ----------------------------------------------------------------------------
 
-#define wxFNTP_USE_TEXTCTRL       wxPB_USE_TEXTCTRL
-#define wxFNTP_DEFAULT_STYLE      wxFNTP_FONTDESC_AS_LABEL|wxFNTP_USEFONT_FOR_LABEL
+#define wxFNTP_USE_TEXTCTRL       (wxPB_USE_TEXTCTRL)
+#define wxFNTP_DEFAULT_STYLE      (wxFNTP_FONTDESC_AS_LABEL|wxFNTP_USEFONT_FOR_LABEL)
 
 // not a style but rather the default value of the maximum pointsize allowed
Index: include/wx/generic/clrpickerg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/clrpickerg.h,v
retrieving revision 1.3
diff -bu2 -r1.3 include/wx/generic/clrpickerg.h
--- include/wx/generic/clrpickerg.h
+++ include/wx/generic/clrpickerg.h
@@ -24,5 +24,5 @@
 
 // the default style
-#define wxCLRBTN_DEFAULT_STYLE  wxCLRBTN_SHOW_LABEL
+#define wxCLRBTN_DEFAULT_STYLE  (wxCLRBTN_SHOW_LABEL)
 
 
Index: include/wx/generic/filepickerg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/filepickerg.h,v
retrieving revision 1.4
diff -bu2 -r1.4 include/wx/generic/filepickerg.h
--- include/wx/generic/filepickerg.h
+++ include/wx/generic/filepickerg.h
@@ -31,5 +31,5 @@
 {
 public:
-    wxGenericFileDirButton() { m_dialog = NULL; }
+    wxGenericFileDirButton() { }
     wxGenericFileDirButton(wxWindow *parent,
                            wxWindowID id,
@@ -44,5 +44,4 @@
                            const wxString& name = wxFilePickerWidgetNameStr)
     {
-        m_dialog = NULL;
         Create(parent, id, label, path, message, wildcard,
                pos, size, style, validator, name);
@@ -53,10 +52,8 @@
 public:     // overrideable
 
-    virtual bool CreateDialog(const wxString &message,
-                              const wxString &wildcard) = 0;
+    virtual wxDialog *CreateDialog() = 0;
 
-    // NULL is because of a problem with destruction order in both generic & GTK code
     virtual wxWindow *GetDialogParent()
-        { return NULL; }
+        { return GetParent(); }
 
     virtual wxEventType GetEventType() const = 0;
@@ -64,10 +61,4 @@
 public:
 
-    bool Destroy()
-    {
-        if (m_dialog) m_dialog->Destroy();
-        return wxButton::Destroy();
-    }
-
     bool Create(wxWindow *parent, wxWindowID id,
            const wxString& label = wxFilePickerWidgetLabel,
@@ -84,5 +75,6 @@
     void OnButtonClick(wxCommandEvent &);
 
-    wxDialog *m_dialog;
+protected:
+    wxString m_message, m_wildcard;
 };
 
@@ -92,5 +84,5 @@
 //-----------------------------------------------------------------------------
 
-#define wxFILEBTN_DEFAULT_STYLE                     wxFLP_OPEN
+#define wxFILEBTN_DEFAULT_STYLE                     (wxFLP_OPEN)
 
 class WXDLLIMPEXP_CORE wxGenericFileButton : public wxGenericFileDirButton
@@ -134,22 +126,19 @@
     }
 
-    virtual bool CreateDialog(const wxString &message, const wxString &wildcard)
+    virtual wxDialog *CreateDialog()
     {
-        m_dialog = new wxFileDialog(GetDialogParent(), message,
+        wxFileDialog *p = new wxFileDialog(GetDialogParent(), m_message,
                                     wxEmptyString, wxEmptyString,
-                                    wildcard, GetDialogStyle());
+                                    m_wildcard, GetDialogStyle());
 
         // this sets both the default folder and the default file of the dialog
-        GetDialog()->SetPath(m_path);
-
-        return true;
+        p->SetPath(m_path);
+        return p;
     }
 
-    wxFileDialog *GetDialog()
-        { return wxStaticCast(m_dialog, wxFileDialog); }
-    void UpdateDialogPath()
-        { GetDialog()->SetPath(m_path); }
-    void UpdatePathFromDialog()
-        { m_path = GetDialog()->GetPath(); }
+    void UpdateDialogPath(wxDialog *p)
+        { wxStaticCast(p, wxFileDialog)->SetPath(m_path); }
+    void UpdatePathFromDialog(wxDialog *p)
+        { m_path = wxStaticCast(p, wxFileDialog)->GetPath(); }
     wxEventType GetEventType() const
         { return wxEVT_COMMAND_FILEPICKER_CHANGED; }
@@ -199,17 +188,14 @@
     }
 
-    virtual bool CreateDialog(const wxString &message, const wxString &WXUNUSED(wildcard))
+    virtual wxDialog *CreateDialog()
     {
-        m_dialog = new wxDirDialog(GetDialogParent(), message, m_path,
+        return new wxDirDialog(GetDialogParent(), m_message, m_path,
                                    GetDialogStyle());
-        return true;
     }
 
-    wxDirDialog *GetDialog()
-        { return wxStaticCast(m_dialog, wxDirDialog); }
-    void UpdateDialogPath()
-        { GetDialog()->SetPath(m_path); }
-    void UpdatePathFromDialog()
-        { m_path = GetDialog()->GetPath(); }
+    void UpdateDialogPath(wxDialog *p)
+        { wxStaticCast(p, wxDirDialog)->SetPath(m_path); }
+    void UpdatePathFromDialog(wxDialog *p)
+        { m_path = wxStaticCast(p, wxDirDialog)->GetPath(); }
     wxEventType GetEventType() const
         { return wxEVT_COMMAND_DIRPICKER_CHANGED; }
Index: include/wx/gtk/filepicker.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/filepicker.h,v
retrieving revision 1.1
diff -bu2 -r1.1 include/wx/gtk/filepicker.h
--- include/wx/gtk/filepicker.h
+++ include/wx/gtk/filepicker.h
@@ -18,4 +18,35 @@
 #include "wx/generic/filepickerg.h"
 
+
+
+//-----------------------------------------------------------------------------
+// wxFileButton and wxDirButton shared code
+// (cannot be a base class since they need to derive from wxGenericFileButton
+//  and from wxGenericDirButton classes !)
+//-----------------------------------------------------------------------------
+
+#define FILEDIRBTN_OVERRIDES                                                        \
+    /* NULL is because of a problem with destruction order which happens      */    \
+    /* if we pass GetParent(): in fact, this GTK native implementation        */    \
+    /* needs to create the dialog in ::Create() and not for each user request */    \
+    /* in response to the user click as the generic implementation does       */    \
+    virtual wxWindow *GetDialogParent()                                             \
+    {                                                                               \
+        return NULL;                                                                \
+    }                                                                               \
+                                                                                    \
+    virtual bool Destroy()                                                          \
+    {                                                                               \
+        m_dialog->Destroy();                                                        \
+        return wxButton::Destroy();                                                 \
+    }                                                                               \
+                                                                                    \
+    virtual void SetPath(const wxString &str)                                       \
+    {                                                                               \
+        m_path=str;                                                                 \
+        UpdateDialogPath(m_dialog);                                                 \
+    }
+
+
 //-----------------------------------------------------------------------------
 // wxFileButton
@@ -25,5 +56,5 @@
 {
 public:
-    wxFileButton() {}
+    wxFileButton() { m_dialog = NULL; }
     wxFileButton(wxWindow *parent,
                  wxWindowID id,
@@ -38,9 +69,10 @@
                  const wxString& name = wxFilePickerWidgetNameStr)
     {
+        m_dialog = NULL;
         Create(parent, id, label, path, message, wildcard,
                pos, size, style, validator, name);
     }
 
-    virtual ~wxFileButton() ;
+    virtual ~wxFileButton();
 
 
@@ -63,11 +95,20 @@
 
 
+public:     // some overrides
+
     // GtkFileChooserButton does not support GTK_FILE_CHOOSER_ACTION_SAVE
-    // so we replace it with GTK_FILE_CHOOSER_ACTION_OPEN
-    long GetDialogStyle() const
+    // so we replace it with GTK_FILE_CHOOSER_ACTION_OPEN; since wxFD_SAVE
+    // is not supported, wxFD_OVERWRITE_PROMPT isn't too...
+    virtual long GetDialogStyle() const
     {
-        return (wxGenericFileButton::GetDialogStyle() & ~wxFD_SAVE) | wxFD_OPEN;
+         return (wxGenericFileButton::GetDialogStyle() &
+                     ~(wxFD_SAVE | wxFD_OVERWRITE_PROMPT)) | wxFD_OPEN;
     }
 
+    // see macro defined above
+    FILEDIRBTN_OVERRIDES
+
+protected:
+    wxDialog *m_dialog;
 
 private:
@@ -83,5 +124,5 @@
 {
 public:
-    wxDirButton() {}
+    wxDirButton() { m_dialog = NULL;}
     wxDirButton(wxWindow *parent,
                 wxWindowID id,
@@ -95,4 +136,5 @@
                 const wxString& name = wxFilePickerWidgetNameStr)
     {
+        m_dialog = NULL;
         Create(parent, id, label, path, message, wxEmptyString,
                 pos, size, style, validator, name);
@@ -127,8 +169,16 @@
     }
 
+    // see macro defined above
+    FILEDIRBTN_OVERRIDES
+
+protected:
+    wxDialog *m_dialog;
+
 private:
     DECLARE_DYNAMIC_CLASS(wxDirButton)
 };
 
+#undef FILEDIRBTN_OVERRIDES
+
 #endif // _WX_GTK_FILEPICKER_H_
 
Index: samples/widgets/picker.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/widgets/picker.cpp,v
retrieving revision 1.2
diff -bu2 -r1.2 samples/widgets/picker.cpp
--- samples/widgets/picker.cpp
+++ samples/widgets/picker.cpp
@@ -31,4 +31,5 @@
     #include "wx/app.h"
     #include "wx/log.h"
+    #include "wx/radiobox.h"
 #endif
 
@@ -51,4 +52,10 @@
 // ----------------------------------------------------------------------------
 
+enum
+{
+    FilePickerMode_Open = 0,
+    FilePickerMode_Save
+};
+
 // control ids
 enum
@@ -81,5 +88,5 @@
     virtual ~PickerWidgetsPage(){};
 
-    virtual wxControl *GetWidget() const { /*return m_fontPicker;*/ return NULL; }
+    virtual wxControl *GetWidget() const { return m_filePicker; }
     virtual void RecreateWidget() { RecreateAllPickers(); }
 
@@ -109,4 +116,6 @@
     long GetPickerStyle(PickerKind kind);
 
+    // update filepicker radiobox
+    void UpdateFilePickerMode();
 
     // the pickers and the relative event handlers
@@ -141,4 +150,5 @@
                *m_chkFileMustExist,
                *m_chkFileChangeDir;
+    wxRadioBox *m_radioFilePickerMode;
 
     wxCheckBox *m_chkDirTextCtrl,
@@ -178,4 +188,5 @@
 
     EVT_CHECKBOX(wxID_ANY, PickerWidgetsPage::OnCheckBox)
+    EVT_RADIOBOX(wxID_ANY, PickerWidgetsPage::OnCheckBox)
 END_EVENT_TABLE()
 
@@ -209,4 +220,10 @@
 
 #if wxUSE_FILEPICKERCTRL
+    static const wxString mode[] = { _T("open"), _T("save") };
+    m_radioFilePickerMode = new wxRadioBox(this, wxID_ANY, _T("wxFilePicker mode"),
+                                           wxDefaultPosition, wxDefaultSize,
+                                           WXSIZEOF(mode), mode);
+    boxleft->Add(m_radioFilePickerMode, 0, wxALL|wxGROW, 5);
+
     wxStaticBoxSizer *filebox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&FilePicker style"));
     m_chkFileTextCtrl = CreateCheckBoxAndAddToSizer(filebox, _T("With textctrl"), false);
@@ -389,4 +406,9 @@
                 style |= wxFLP_CHANGE_DIR;
 
+            if (m_radioFilePickerMode->GetSelection() == FilePickerMode_Open)
+                style |= wxFLP_OPEN;
+            else
+                style |= wxFLP_SAVE;
+
             break;
 #endif // wxUSE_FILEPICKERCTRL
@@ -497,8 +519,12 @@
 
 #if wxUSE_FILEPICKERCTRL
+    m_radioFilePickerMode->SetSelection((wxFLP_DEFAULT_STYLE & wxFLP_OPEN) ?
+                                            FilePickerMode_Open : FilePickerMode_Save);
     m_chkFileTextCtrl->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_USE_TEXTCTRL) != 0);
     m_chkFileOverwritePrompt->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_OVERWRITE_PROMPT) != 0);
     m_chkFileMustExist->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_FILE_MUST_EXIST) != 0);
     m_chkFileChangeDir->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_CHANGE_DIR) != 0);
+
+    UpdateFilePickerMode();
 #endif
 
@@ -516,4 +542,21 @@
 }
 
+void PickerWidgetsPage::UpdateFilePickerMode()
+{
+    switch (m_radioFilePickerMode->GetSelection())
+    {
+    case FilePickerMode_Open:
+        m_chkFileOverwritePrompt->SetValue(false);
+        m_chkFileOverwritePrompt->Disable();
+        m_chkFileMustExist->Enable();
+        break;
+    case FilePickerMode_Save:
+        m_chkFileMustExist->SetValue(false);
+        m_chkFileMustExist->Disable();
+        m_chkFileOverwritePrompt->Enable();
+        break;
+    }
+}
+
 
 // ----------------------------------------------------------------------------
@@ -578,4 +621,10 @@
         event.GetEventObject() == m_chkFontUseFontForLabel)
         RecreatePicker(Picker_Font);
+
+    if (event.GetEventObject() == m_radioFilePickerMode)
+    {
+        UpdateFilePickerMode();
+        RecreatePicker(Picker_File);
+    }
 }
 
Index: src/common/filepickercmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filepickercmn.cpp,v
retrieving revision 1.2
diff -bu2 -r1.2 src/common/filepickercmn.cpp
--- src/common/filepickercmn.cpp
+++ src/common/filepickercmn.cpp
@@ -56,4 +56,17 @@
         return false;
 
+    if (!HasFlag(wxFLP_OPEN) && !HasFlag(wxFLP_SAVE))
+        m_windowStyle |= wxFLP_OPEN;     // wxFD_OPEN is the default
+
+    // check that the styles are not contradictory
+    wxASSERT_MSG( !(HasFlag(wxFLP_SAVE) && HasFlag(wxFLP_OPEN)),
+                  _T("can't specify both wxFLP_SAVE and wxFLP_OPEN at once") );
+
+    wxASSERT_MSG( !HasFlag(wxFLP_SAVE) || !HasFlag(wxFLP_FILE_MUST_EXIST),
+                   _T("wxFLP_FILE_MUST_EXIST can't be used with wxFLP_SAVE" ) );
+
+    wxASSERT_MSG( !HasFlag(wxFLP_OPEN) || !HasFlag(wxFLP_OVERWRITE_PROMPT),
+                  _T("wxFLP_OVERWRITE_PROMPT can't be used with wxFLP_OPEN") );
+
     // create a wxFilePickerWidget or a wxDirPickerWidget...
     if (!CreatePicker(this, path, message, wildcard))
Index: src/common/fldlgcmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fldlgcmn.cpp,v
retrieving revision 1.27
diff -bu2 -r1.27 src/common/fldlgcmn.cpp
--- src/common/fldlgcmn.cpp
+++ src/common/fldlgcmn.cpp
@@ -58,4 +58,7 @@
     m_filterIndex = 0;
 
+    if (!HasFlag(wxFD_OPEN) && !HasFlag(wxFD_SAVE))
+        m_windowStyle |= wxFD_OPEN;     // wxFD_OPEN is the default
+
     // check that the styles are not contradictory
     wxASSERT_MSG( !(HasFlag(wxFD_SAVE) && HasFlag(wxFD_OPEN)),
Index: src/generic/filepickerg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/filepickerg.cpp,v
retrieving revision 1.3
diff -bu2 -r1.3 src/generic/filepickerg.cpp
--- src/generic/filepickerg.cpp
+++ src/generic/filepickerg.cpp
@@ -67,13 +67,17 @@
     // create the dialog associated with this button
     m_path = path;
-    return CreateDialog(message, wildcard);
+    m_message = message;
+    m_wildcard = wildcard;
+
+    return true;
 }
 
 void wxGenericFileDirButton::OnButtonClick(wxCommandEvent& WXUNUSED(ev))
 {
-    if (m_dialog->ShowModal() == wxID_OK)
+    wxDialog *p = CreateDialog();
+    if (p->ShowModal() == wxID_OK)
     {
-        // save the path
-        UpdatePathFromDialog();
+        // save updated path in m_path
+        UpdatePathFromDialog(p);
 
         // fire an event
@@ -81,4 +85,6 @@
         GetEventHandler()->ProcessEvent(event);
     }
+
+    wxDELETE(p);
 }
 
Index: src/gtk/filepicker.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/filepicker.cpp,v
retrieving revision 1.2
diff -bu2 -r1.2 src/gtk/filepicker.cpp
--- src/gtk/filepicker.cpp
+++ src/gtk/filepicker.cpp
@@ -67,7 +67,11 @@
 
         // create the dialog associated with this button
+        // NB: unlike generic implementation, native GTK implementation needs to create
+        //     the filedialog here as it needs to use gtk_file_chooser_button_new_with_dialog()
         SetWindowStyle(style);
         m_path = path;
-        if (!CreateDialog(message, wildcard))
+        m_message = message;
+        m_wildcard = wildcard;
+        if ((m_dialog = CreateDialog()) == NULL)
             return false;
 
@@ -123,5 +127,5 @@
     {
         // ...update our path
-        UpdatePathFromDialog();
+        UpdatePathFromDialog(m_dialog);
 
         // ...and fire an event
@@ -200,6 +204,7 @@
         // create the dialog associated with this button
         SetWindowStyle(style);
-        m_path = path;
-        if (!CreateDialog(message, wildcard))
+        m_message = message;
+        m_wildcard = wildcard;
+        if ((m_dialog = CreateDialog()) == NULL)
             return false;
 
Index: src/gtk/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/window.cpp,v
retrieving revision 1.614
diff -bu2 -r1.614 src/gtk/window.cpp
--- src/gtk/window.cpp
+++ src/gtk/window.cpp
@@ -2750,4 +2750,7 @@
     else if (GTK_IS_FILE_CHOOSER_BUTTON(m_widget))
     {
+        // If we connect to the "size_request" signal of a GtkFileChooserButton
+        // then that control won't be sized properly when placed inside sizers
+        // (this can be tested removing this elseif and running XRC or WIDGETS samples)
         // FIXME: what should be done here ?
     }
Index: src/msw/filedlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/filedlg.cpp,v
retrieving revision 1.87
diff -bu2 -r1.87 src/msw/filedlg.cpp
--- src/msw/filedlg.cpp
+++ src/msw/filedlg.cpp
@@ -137,6 +137,5 @@
 
 {
-    if ( ( m_windowStyle & wxFD_MULTIPLE ) && ( m_windowStyle & wxFD_SAVE ) )
-        m_windowStyle &= ~wxFD_MULTIPLE;
+    // NB: all style checks are done by wxFileDialogBase::Create
 
     m_bMovedWindow = false;
Index: src/os2/filedlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/filedlg.cpp,v
retrieving revision 1.19
diff -bu2 -r1.19 src/os2/filedlg.cpp
--- src/os2/filedlg.cpp
+++ src/os2/filedlg.cpp
@@ -79,6 +79,5 @@
 
 {
-    if ((m_windowStyle & wxFD_MULTIPLE) && (m_windowStyle & wxFD_SAVE))
-        m_windowStyle &= ~wxFD_MULTIPLE;
+    // NB: all style checks are done by wxFileDialogBase::Create
 
     m_filterIndex = 1;

 	  	 

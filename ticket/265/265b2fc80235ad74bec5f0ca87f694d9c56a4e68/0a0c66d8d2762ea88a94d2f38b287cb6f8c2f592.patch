Index: utils/tex2rtf/src/htmlutil.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/htmlutil.cpp,v
retrieving revision 1.33
diff -b -u -2 -r1.33 htmlutil.cpp
--- utils/tex2rtf/src/htmlutil.cpp	2005/09/23 12:56:33	1.33
+++ utils/tex2rtf/src/htmlutil.cpp	2005/11/09 20:59:19
@@ -34,5 +34,5 @@
 #endif
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 extern int passNumber;
@@ -344,10 +344,10 @@
         inVerbatim = true;
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2HTML(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
@@ -359,10 +359,10 @@
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2HTML(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
@@ -1292,7 +1292,8 @@
     {
       indentLevel --;
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         switch (struc->listType)
         {
@@ -1310,5 +1311,5 @@
 
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
     }
@@ -1561,8 +1562,8 @@
     if (!start)
     {
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         struc->currentItem += 1;
         if (struc->listType == LATEX_DESCRIPTION)
@@ -2365,5 +2366,8 @@
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
+      {
+        TexRef *ref = iTexRef->second;
       if (ref)
       {
@@ -2372,4 +2376,5 @@
         ref->sectionNumber = copystring(buf);
       }
+      }
 
       wxSnprintf(buf, sizeof(buf), _T("\n<DT> [%d] "), citeCount);
@@ -3261,10 +3266,12 @@
     if (texTopic->filename && texTopic->keywords)
     {
-      wxStringListNode *node1 = texTopic->keywords->GetFirst();
-      while (node1)
+      StringSet *set = texTopic->keywords;
+      if (set)
       {
-        wxChar *s = (wxChar *)node1->GetData();
+        for (StringSet::iterator iString = set->begin(); iString != set->begin(); ++iString)
+        {
+          const wxChar *s = iString->c_str();
         wxFprintf(fd, _T("%s|%s|%s\n"), topicName, texTopic->filename, s);
-        node1 = node1->GetNext();
+        }
       }
     }
@@ -3361,8 +3368,10 @@
     if (texTopic->filename && texTopic->keywords)
     {
-      wxStringListNode *node1 = texTopic->keywords->GetFirst();
-      while (node1)
+      StringSet *set = texTopic->keywords;
+      if (set)
       {
-        wxChar *s = (wxChar *)node1->GetData();
+        for (StringSet::iterator iString = set->begin(); iString != set->begin(); ++iString)
+        {
+          const wxChar *s = iString->c_str();
         wxFprintf(f,
             _T(" <LI> <OBJECT type=\"text/sitemap\">\n")
@@ -3371,5 +3380,5 @@
             _T("  </OBJECT>\n"),
         texTopic->filename, topicName, s);
-        node1 = node1->GetNext();
+        }
       }
     }
Index: utils/tex2rtf/src/rtfutils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/rtfutils.cpp,v
retrieving revision 1.27
diff -b -u -2 -r1.27 rtfutils.cpp
--- utils/tex2rtf/src/rtfutils.cpp	2005/09/23 12:56:33	1.27
+++ utils/tex2rtf/src/rtfutils.cpp	2005/11/09 20:59:20
@@ -47,5 +47,5 @@
 static wxChar *contentsLineValue = NULL;
 static TexChunk *descriptionItemArg = NULL;
-static wxStringList environmentStack; // Stack of paragraph styles we need to remember
+static wxArrayString environmentStack; // Stack of paragraph styles we need to remember
 static int footnoteCount = 0;
 static int citeCount = 1;
@@ -60,5 +60,5 @@
 extern wxChar *BigBuffer;
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 // Are we in verbatim mode? If so, format differently.
@@ -311,5 +311,5 @@
 }
 
-void SplitIndexEntry(wxChar *entry, wxChar *buf1, wxChar *buf2)
+void SplitIndexEntry(const wxChar *entry, wxChar *buf1, wxChar *buf2)
 {
   int len = wxStrlen(entry); int i = 0;
@@ -336,11 +336,10 @@
     return;
 
-  wxStringList *list = texTopic->keywords;
-  if (list)
+  StringSet *set = texTopic->keywords;
+  if (set)
   {
-    wxStringListNode *node = list->GetFirst();
-    while (node)
+    for (StringSet::iterator iString = set->begin(); iString != set->end(); ++iString)
     {
-      wxChar *s = (wxChar *)node->GetData();
+      const wxChar *s = iString->c_str();
 
       // Must separate out main entry form subentry (only 1 subentry allowed)
@@ -368,5 +367,4 @@
       }
       TexOutput(_T("}\n"));
-      node = node->GetNext();
     }
   }
@@ -404,10 +402,8 @@
 {
   wxFprintf(fd, _T("{\\colortbl"));
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     wxFprintf(fd, _T("\\red%d\\green%d\\blue%d;\n"), entry->red, entry->green, entry->blue);
-    node = node->GetNext();
   }
   wxFprintf(fd, _T("}"));
@@ -715,10 +711,10 @@
         inVerbatim = true;
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2RTF(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
@@ -730,10 +726,10 @@
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2RTF(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
@@ -782,10 +778,7 @@
 void PopEnvironmentStyle(void)
 {
-  wxStringListNode *node = environmentStack.GetLast();
-  if (node)
+  if (!environmentStack.IsEmpty())
   {
-    wxChar *val = (wxChar *)node->GetData();
-    delete[] val;
-    delete node;
+    environmentStack.RemoveAt(environmentStack.Count() - 1);
   }
 }
@@ -794,10 +787,7 @@
 void WriteEnvironmentStyles(void)
 {
-  wxStringListNode *node = environmentStack.GetLast();
-  while (node)
+  for (size_t index = environmentStack.GetCount() - 1; index >= 0; --index)
   {
-    wxChar *val = (wxChar *)node->GetData();
-    TexOutput(val);
-    node = node->GetNext();
+    TexOutput(environmentStack[index].c_str());
   }
   if (!inTabular && (ParIndent > 0) && (forbidParindent == 0))
@@ -2058,7 +2048,7 @@
 
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentSize1 = oldIndent + 20*labelIndentTab;
@@ -2077,9 +2067,10 @@
       PopEnvironmentStyle();
 
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
 /* Change 18/7/97 - don't know why we wish to do this
@@ -2100,7 +2091,7 @@
       indentLevel ++;
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentSize = oldIndent + TwoColWidthA;
@@ -2117,9 +2108,11 @@
       indentLevel --;
       PopEnvironmentStyle();
-      if (itemizeStack.GetFirst())
+
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
 /*
@@ -2144,8 +2137,8 @@
   case ltITEM:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (!start)
       {
@@ -2236,8 +2229,8 @@
   case ltTWOCOLITEMRULED:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (start)
       {
@@ -2245,9 +2238,13 @@
 
         int oldIndent = 0;
-        wxNode *node2 = NULL;
-        if (itemizeStack.GetCount() > 1) // TODO: do I actually mean Nth(0) here??
-            node2 = itemizeStack.Item(1);
-        if (node2)
-          oldIndent = ((ItemizeStruc *)node2->GetData())->indentation;
+        wxList::compatibility_iterator iNode2 = itemizeStack.GetFirst();
+        if (iNode2)
+        {
+          iNode2 = iNode2->GetNext();
+          if (iNode2)
+          {
+            oldIndent = ((ItemizeStruc *)iNode2->GetData())->indentation;
+          }
+        }
 
         TexOutput(_T("\n"));
@@ -4739,7 +4736,7 @@
 //      TexOutput(_T("\\fi0\n"));
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentValue = 20*ParseUnitArgument(GetArgData());
@@ -4757,9 +4754,10 @@
     {
       PopEnvironmentStyle();
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
       if (itemizeStack.GetCount() == 0)
@@ -4877,5 +4875,8 @@
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
+      {
+        TexRef *ref = iTexRef->second;
       if (ref)
       {
@@ -4883,4 +4884,5 @@
         wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
         ref->sectionNumber = copystring(buf);
+        }
       }
 
Index: utils/tex2rtf/src/tex2any.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/tex2any.cpp,v
retrieving revision 1.39
diff -b -u -2 -r1.39 tex2any.cpp
--- utils/tex2rtf/src/tex2any.cpp	2005/09/23 12:56:34	1.39
+++ utils/tex2rtf/src/tex2any.cpp	2005/11/09 20:59:21
@@ -152,5 +152,5 @@
 extern int passNumber;
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 /*
@@ -923,7 +923,8 @@
     if (wxStrlen(commandValue) > 0)
       macro->macroBody = copystring(commandValue);
-    if (!CustomMacroList.Find(commandName))
+    MacroMap::iterator it = CustomMacroMap.find(commandName);
+    if (it != CustomMacroMap.end())
     {
-      CustomMacroList.Append(commandName, macro);
+      CustomMacroMap[commandName] = macro;
       AddMacroDef(ltCUSTOM_MACRO, commandName, noArgs);
     }
@@ -1473,8 +1474,8 @@
             int n = buffer[pos] - 48;
             pos ++;
-            wxNode *node = customMacroArgs->children.Item(n-1);
-            if (node)
+            wxList::compatibility_iterator iNode = customMacroArgs->children.Item(n-1);
+            if (iNode)
             {
-              TexChunk *argChunk = (TexChunk *)node->GetData();
+              TexChunk *argChunk = (TexChunk *)iNode->GetData();
               children.Append((wxObject *)new TexChunk(*argChunk));
             }
@@ -1650,10 +1651,10 @@
 
   // Tell each argument how many args there are (useful when processing an arg)
-  wxNode *node = parent->children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = parent->children.GetFirst();
+  while (iNode)
   {
-    TexChunk *chunk = (TexChunk *)node->GetData();
+    TexChunk *chunk = (TexChunk *)iNode->GetData();
     chunk->no_args = maxArgs;
-    node = node->GetNext();
+    iNode = iNode->GetNext();
   }
   return pos;
@@ -1735,10 +1736,10 @@
 
   optional = toCopy.optional;
-  wxNode *node = toCopy.children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = toCopy.children.GetFirst();
+  while (iNode)
   {
-    TexChunk *child = (TexChunk *)node->GetData();
+    TexChunk *child = (TexChunk *)iNode->GetData();
     children.Append((wxObject *)new TexChunk(*child));
-    node = node->GetNext();
+    iNode = iNode->GetNext();
   }
 }
@@ -1748,13 +1749,12 @@
 //  if (name) delete[] name;
   if (value) delete[] value;
-  wxNode *node = children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = children.GetFirst();
+  while (iNode)
   {
-    TexChunk *child = (TexChunk *)node->GetData();
+    TexChunk *child = (TexChunk *)iNode->GetData();
     delete child;
-    wxNode *next = node->GetNext();
-    delete node;
-    node = next;
+    iNode = iNode->GetNext();
   }
+  children.Clear();
 }
 
@@ -1790,12 +1790,12 @@
       }
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         wxStrcat(currentArgData, _T("{"));
         GetArgData1(child_chunk);
         wxStrcat(currentArgData, _T("}"));
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
       break;
@@ -1803,10 +1803,10 @@
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         GetArgData1(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
       break;
@@ -1865,5 +1865,5 @@
 
 
-void TraverseFromChunk(TexChunk *chunk, wxNode *thisNode, bool childrenOnly)
+void TraverseFromChunk(TexChunk *chunk, wxList::compatibility_iterator* thisNode, bool childrenOnly)
 {
   Tex2RTFYield();
@@ -1881,10 +1881,10 @@
         OnMacro(chunk->macroId, chunk->no_args, true);
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
-        TraverseFromChunk(child_chunk, node);
-        node = node->GetNext();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
+        TraverseFromChunk(child_chunk, &iNode);
+        iNode = iNode->GetNext();
       }
 
@@ -1907,10 +1907,10 @@
       if (childrenOnly || OnArgument(chunk->macroId, chunk->argn, true))
       {
-        wxNode *node = chunk->children.GetFirst();
-        while (node)
+        wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+        while (iNode)
         {
-          TexChunk *child_chunk = (TexChunk *)node->GetData();
-          TraverseFromChunk(child_chunk, node);
-          node = node->GetNext();
+          TexChunk *child_chunk = (TexChunk *)iNode->GetData();
+          TraverseFromChunk(child_chunk, &iNode);
+          iNode = iNode->GetNext();
         }
       }
@@ -2044,33 +2044,26 @@
 /* Don't want to remove custom macros after each pass.*/
       SetFontSizes(10);
-      wxNode *node = CustomMacroList.GetFirst();
-      while (node)
+      for (MacroMap::iterator it = CustomMacroMap.begin(); it != CustomMacroMap.end(); ++it)
       {
-        CustomMacro *macro = (CustomMacro *)node->GetData();
-        delete macro;
-        delete node;
-        node = CustomMacroList.GetFirst();
+        CustomMacro* pMacro = it->second;
+        delete pMacro;
       }
+      CustomMacroMap.clear();
   }
 /**/
-  TexReferences.BeginFind();
-  wxHashTable::Node *refNode = TexReferences.Next();
-  while (refNode)
+  for (TexReferenceMap::iterator iTexRef = TexReferences.begin(); iTexRef != TexReferences.end(); ++iTexRef)
   {
-    TexRef *ref = (TexRef *)refNode->GetData();
+    TexRef *ref = iTexRef->second;
     delete ref;
-    refNode = TexReferences.Next();
   }
-  TexReferences.Clear();
+  TexReferences.clear();
 
-  wxNode* bibNode = BibList.GetFirst();
-  while (bibNode)
+  for (BibMap::iterator it = BibList.begin(); it != BibList.end(); ++it)
   {
-    BibEntry *entry = (BibEntry *)bibNode->GetData();
+    BibEntry *entry = it->second;
     delete entry;
-    delete bibNode;
-    bibNode = BibList.GetFirst();
   }
-  CitationList.Clear();
+  BibList.clear();
+  CitationList.clear();
   ResetTopicCounter();
 }
Index: utils/tex2rtf/src/tex2any.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/tex2any.h,v
retrieving revision 1.21
diff -b -u -2 -r1.21 tex2any.h
--- utils/tex2rtf/src/tex2any.h	2005/08/24 17:56:28	1.21
+++ utils/tex2rtf/src/tex2any.h	2005/11/09 20:59:21
@@ -14,4 +14,5 @@
 #include "wx/list.h"
 #include "wx/hash.h"
+#include "wx/hashset.h"
 #include "wx/tokenzr.h"
 #include "wxhlpblk.h"
@@ -119,4 +120,6 @@
 };
 
+WX_DECLARE_HASH_SET(wxString, wxStringHash, wxStringEqual, StringSet);
+
 // Represents a topic, used for generating a table of contents file (.cnt).
 // Also for storing keywords found in a topic, a list of which is then inserted
@@ -132,5 +135,5 @@
   bool hasChildren;
   wxChar *filename;
-  wxStringList *keywords;
+  StringSet *keywords;
   TexTopic(wxChar *f = NULL);
   ~TexTopic(void);
@@ -152,5 +155,5 @@
            wxChar *buffer, int pos, wxChar *environment = NULL, bool parseArgToBrace = true, TexChunk *customMacroArgs = NULL);
 void TraverseDocument(void);
-void TraverseFromChunk(TexChunk *chunk, wxNode *thisNode = NULL, bool childrenOnly = false);
+void TraverseFromChunk(TexChunk *chunk, wxList::compatibility_iterator* thisNode = NULL, bool childrenOnly = false);
 #define TraverseChildrenFromChunk(arg) TraverseFromChunk(arg, NULL, true)
 void SetCurrentOutput(FILE *fd);
@@ -405,4 +408,6 @@
 };
 
+WX_DECLARE_STRING_HASH_MAP(TexRef*, TexReferenceMap);
+
 /*
  * Add a reference
@@ -479,6 +484,5 @@
 };
 
-extern wxList BibList;
-extern wxStringList CitationList;
+extern StringSet CitationList;
 
 bool ReadBib(wxChar *filename);
@@ -493,6 +497,4 @@
  */
 
-extern wxList CustomMacroList;
-
 #define CUSTOM_MACRO_IGNORE 0
 #define CUSTOM_MACRO_OUTPUT 1
@@ -517,4 +519,10 @@
 };
 
+WX_DECLARE_STRING_HASH_MAP(CustomMacro*, MacroMap);
+extern MacroMap CustomMacroMap;
+
+WX_DECLARE_STRING_HASH_MAP(BibEntry*, BibMap);
+extern BibMap BibList;
+
 bool ReadCustomMacros(wxChar *filename);
 void ShowCustomMacros(void);
@@ -539,5 +547,6 @@
 };
 
-extern wxList ColourTable;
+WX_DECLARE_STRING_HASH_MAP(ColourTableEntry*, ColourTableMap);
+extern ColourTableMap ColourTable;
 extern void AddColour(const wxChar *theName, unsigned int r,  unsigned int g,  unsigned int b);
 extern int FindColourPosition(wxChar *theName);
Index: utils/tex2rtf/src/tex2rtf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/tex2rtf.cpp,v
retrieving revision 1.54
diff -b -u -2 -r1.54 tex2rtf.cpp
--- utils/tex2rtf/src/tex2rtf.cpp	2005/09/23 12:56:34	1.54
+++ utils/tex2rtf/src/tex2rtf.cpp	2005/11/09 20:59:21
@@ -88,5 +88,5 @@
 extern wxChar *TexBibName;         // Bibliography output file name
 extern wxChar *TexTmpBibName;      // Temporary bibliography output file name
-extern wxList ColourTable;
+extern ColourTableMap ColourTable;
 extern TexChunk *TopLevel;
 
@@ -160,5 +160,11 @@
   RefFileName = new wxChar[300];
 
-  WX_CLEAR_LIST(wxList,ColourTable);
+//  WX_CLEAR_LIST(wxList,ColourTable);
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
+  {
+    ColourTableEntry *entry = it->second;
+    delete entry;
+  }
+  ColourTable.clear();
 
   int n = 1;
@@ -464,12 +470,10 @@
 int MyApp::OnExit()
 {
-  wxNode *node = CustomMacroList.GetFirst();
-  while (node)
+  for (MacroMap::iterator it = CustomMacroMap.begin(); it != CustomMacroMap.end(); ++it)
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
     delete macro;
-    delete node;
-    node = CustomMacroList.GetFirst();
   }
+  CustomMacroMap.clear();
   MacroDefs.BeginFind();
   wxHashTable::Node* mNode = MacroDefs.Next();
Index: utils/tex2rtf/src/texutils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/texutils.cpp,v
retrieving revision 1.33
diff -b -u -2 -r1.33 texutils.cpp
--- utils/tex2rtf/src/texutils.cpp	2005/09/23 12:56:35	1.33
+++ utils/tex2rtf/src/texutils.cpp	2005/11/09 20:59:22
@@ -24,4 +24,5 @@
 #include "wx/app.h"
 #include "wx/hash.h"
+#include "wx/hashmap.h"
 
 #ifdef new
@@ -46,10 +47,10 @@
 #endif
 
-wxHashTable TexReferences(wxKEY_STRING);
-wxList BibList(wxKEY_STRING);
-wxStringList CitationList;
-wxList ColourTable(wxKEY_STRING);
+TexReferenceMap TexReferences;
+BibMap BibList;
+StringSet CitationList;
+ColourTableMap ColourTable;
 wxHashTable BibStringTable(wxKEY_STRING);
-wxList CustomMacroList(wxKEY_STRING);
+MacroMap CustomMacroMap;
 TexChunk *currentSection = NULL;
 wxChar *fakeCurrentSection = NULL;
@@ -176,14 +177,14 @@
       (chunk->macroId == ltLABEL))
   {
-    wxNode *node = chunk->children.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+    if (iNode)
     {
-      TexChunk *child = (TexChunk *)node->GetData();
+      TexChunk *child = (TexChunk *)iNode->GetData();
       if (child->type == CHUNK_TYPE_ARG)
       {
-        wxNode *snode = child->children.GetFirst();
-        if (snode)
+        wxList::compatibility_iterator iNode2 = child->children.GetFirst();
+        if (iNode2)
         {
-          TexChunk *schunk = (TexChunk *)snode->GetData();
+          TexChunk *schunk = (TexChunk *)iNode2->GetData();
           if (schunk->type == CHUNK_TYPE_STRING)
             topicName = schunk->value;
@@ -340,6 +341,9 @@
                int chapter, int section, int subsection, int subsubsection)
 {
-  TexRef *texRef = (TexRef *)TexReferences.Get(name);
-  if (texRef) TexReferences.Delete(name);
+  TexReferenceMap::iterator iTexRef = TexReferences.find(name);
+  if (iTexRef != TexReferences.end())
+  {
+    TexReferences.erase(iTexRef);
+  }
 
   wxChar buf[100];
@@ -382,5 +386,5 @@
   }
   wxChar *tmp = ((wxStrlen(buf) > 0) ? buf : (wxChar *)NULL);
-  TexReferences.Put(name, new TexRef(name, file, tmp, sectionName));
+  TexReferences[name] = new TexRef(name, file, tmp, sectionName);
 }
 
@@ -392,10 +396,8 @@
   if (ostr.bad()) return;
 
-  TexReferences.BeginFind();
-  wxHashTable::Node *node = TexReferences.Next();
-  while (node)
+  for (TexReferenceMap::iterator iTexRef = TexReferences.begin(); iTexRef != TexReferences.end(); ++iTexRef)
   {
     Tex2RTFYield();
-    TexRef *ref = (TexRef *)node->GetData();
+    TexRef *ref = iTexRef->second;
     converter = ref->refLabel;
     ostr << converter.mb_str();
@@ -416,5 +418,4 @@
       OnInform(buf);
     }
-    node = TexReferences.Next();
   }
 }
@@ -463,15 +464,17 @@
       // created here, as that is destroyed elsewhere.  Without doing this, there
       // were massive memory leaks
-      TexReferences.DeleteContents(true);
-      TexReferences.Put(
-        label_string.c_str(),
-        new TexRef(
+//      TexReferences.DeleteContents(true);
+      TexReferenceMap::iterator iTexRef = TexReferences.find(label_string.c_str());
+      if (iTexRef != TexReferences.end())
+      {
+        delete iTexRef->second;
+      }
+      
+      TexReferences[label_string.c_str()] = new TexRef(
               label_string.c_str(),
               file_string.c_str(),
               section_string.c_str(),
-              sectionName_string.c_str()
-        )
-      );
-      TexReferences.DeleteContents(false);
+        sectionName_string.c_str());
+ //     TexReferences.DeleteContents(false);
     }
   }
@@ -787,5 +790,5 @@
         }
       }
-      BibList.Append(recordKey, bibEntry);
+      BibList[recordKey] = bibEntry;
       BibEatWhiteSpace(istr);
     }
@@ -1010,17 +1013,18 @@
   }
 
-  wxStringListNode *node = CitationList.GetFirst();
-  while (node)
+  for (StringSet::iterator it = CitationList.begin(); it != CitationList.end(); ++it)
   {
-    wxChar *citeKey = (wxChar *)node->GetData();
-//    wxNode *texNode = TexReferences.Find(citeKey);
-    TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-    wxNode *bibNode = BibList.Find(citeKey);
-    if (bibNode && ref)
+    const wxString& citeKey = *it;
+    TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+    if (iTexRef != TexReferences.end())
     {
-      BibEntry *entry = (BibEntry *)bibNode->GetData();
+      TexRef *ref = iTexRef->second;
+      BibMap::iterator bibNode = BibList.find(citeKey);
+      if (bibNode != BibList.end() && ref)
+      {
+        BibEntry *entry = bibNode->second;
       OutputBibItem(ref, entry);
+      }
     }
-    node = node->GetNext();
   }
 }
@@ -1030,18 +1034,19 @@
 void ResolveBibReferences(void)
 {
-  if (CitationList.GetCount() > 0)
+  if (CitationList.size() > 0)
     OnInform(_T("Resolving bibliographic references..."));
 
   citeCount = 1;
   wxChar buf[200];
-  wxStringListNode *node = CitationList.GetFirst();
-  while (node)
+  for (StringSet::iterator it = CitationList.begin(); it != CitationList.end(); ++it)
   {
     Tex2RTFYield();
-    wxChar *citeKey = (wxChar *)node->GetData();
-//    wxNode *texNode = TexReferences.Find(citeKey);
-    TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-    wxNode *bibNode = BibList.Find(citeKey);
-    if (bibNode && ref)
+    const wxString& citeKey = *it;
+    TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+    if (iTexRef != TexReferences.end())
+    {
+      TexRef *ref = iTexRef->second;
+      BibMap::iterator iBibNode = BibList.find(citeKey);
+      if (iBibNode != BibList.end() && ref)
     {
       // Unused Variable
@@ -1054,9 +1059,9 @@
     else
     {
-      wxSnprintf(buf, sizeof(buf), _T("Warning: bib ref %s not resolved."), citeKey);
+        wxSnprintf(buf, sizeof(buf), _T("Warning: bib ref %s not resolved."), citeKey.c_str());
       OnInform(buf);
     }
-    node = node->GetNext();
   }
+  }
 }
 
@@ -1064,10 +1069,14 @@
 void AddCitation(wxChar *citeKey)
 {
-  if (!CitationList.Member(citeKey))
-    CitationList.Add(citeKey);
+  StringSet::iterator iCitation = CitationList.find(citeKey);
+  if (iCitation == CitationList.end())
+  {
+    CitationList.insert(citeKey);
+  }
 
-  if (!TexReferences.Get(citeKey))
+  TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+  if (iTexRef == TexReferences.end())
   {
-    TexReferences.Put(citeKey, new TexRef(citeKey, _T("??"), NULL));
+    TexReferences[citeKey] = new TexRef(citeKey, _T("??"), NULL);
   }
 }
@@ -1075,5 +1084,10 @@
 TexRef *FindReference(wxChar *key)
 {
-  return (TexRef *)TexReferences.Get(key);
+  TexReferenceMap::iterator iTexRef = TexReferences.find(key);
+  if (iTexRef != TexReferences.end())
+  {
+    return iTexRef->second;
+  }
+  return 0;
 }
 
@@ -1370,5 +1384,5 @@
   if (istr.bad()) return false;
 
-  CustomMacroList.Clear();
+  CustomMacroMap.clear();
   char ch;
   wxChar macroName[100];
@@ -1433,5 +1447,5 @@
 
       BibEatWhiteSpace(istr);
-      CustomMacroList.Append(macroName, macro);
+      CustomMacroMap[macroName] = macro;
       AddMacroDef(ltCUSTOM_MACRO, macroName, noArgs);
     }
@@ -1445,8 +1459,8 @@
 CustomMacro *FindCustomMacro(wxChar *name)
 {
-  wxNode *node = CustomMacroList.Find(name);
-  if (node)
+  MacroMap::iterator it = CustomMacroMap.find(name);
+  if (it != CustomMacroMap.end())
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
     return macro;
   }
@@ -1457,6 +1471,6 @@
 void ShowCustomMacros(void)
 {
-  wxNode *node = CustomMacroList.GetFirst();
-  if (!node)
+  MacroMap::iterator it = CustomMacroMap.begin();
+  if (it == CustomMacroMap.end())
   {
     OnInform(_T("No custom macros loaded.\n"));
@@ -1465,11 +1479,11 @@
 
   wxChar buf[400];
-  while (node)
+  while (it != CustomMacroMap.end())
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
     wxSnprintf(buf, sizeof(buf), _T("\\%s[%d]\n    {%s}"), macro->macroName, macro->noArgs,
      macro->macroBody ? macro->macroBody : _T(""));
     OnInform(buf);
-    node = node->GetNext();
+    ++it;
   }
 }
@@ -1538,8 +1552,8 @@
 void AddColour(const wxChar *theName, unsigned int r,  unsigned int g,  unsigned int b)
 {
-  wxNode *node = ColourTable.Find(theName);
-  if (node)
+  ColourTableMap::iterator it = ColourTable.find(theName);
+  if (it != ColourTable.end())
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (entry->red == r || entry->green == g || entry->blue == b)
       return;
@@ -1547,9 +1561,9 @@
     {
       delete entry;
-      delete node;
+      ColourTable.erase(it);
     }
   }
   ColourTableEntry *entry = new ColourTableEntry(theName, r, g, b);
-  ColourTable.Append(theName, entry);
+  ColourTable[theName] = entry;
 }
 
@@ -1557,12 +1571,10 @@
 {
   int i = 0;
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (wxStrcmp(theName, entry->name) == 0)
       return i;
     i ++;
-    node = node->GetNext();
   }
   return -1;
@@ -1573,8 +1585,7 @@
 bool FindColourHTMLString(wxChar *theName, wxChar *buf)
 {
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (wxStrcmp(theName, entry->name) == 0)
     {
@@ -1591,5 +1602,4 @@
         return true;
     }
-    node = node->GetNext();
   }
   return false;
@@ -1659,10 +1669,13 @@
   {
     texTopic = new TexTopic(filename);
-    texTopic->keywords = new wxStringList;
+    texTopic->keywords = new StringSet;
     TopicTable.Put(topic, texTopic);
   }
 
-  if (!texTopic->keywords->Member(entry))
-    texTopic->keywords->Add(entry);
+  StringSet::iterator iString = texTopic->keywords->find(entry);
+  if (iString != texTopic->keywords->end())
+  {
+    texTopic->keywords->insert(entry);
+  }
 }
 
Index: utils/tex2rtf/src/xlputils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/tex2rtf/src/xlputils.cpp,v
retrieving revision 1.11
diff -b -u -2 -r1.11 xlputils.cpp
--- utils/tex2rtf/src/xlputils.cpp	2005/09/23 12:56:35	1.11
+++ utils/tex2rtf/src/xlputils.cpp	2005/11/09 20:59:22
@@ -39,10 +39,12 @@
 static bool inTable = false;
 static int citeCount = 1;
-wxList hyperLinks(wxKEY_INTEGER);
-wxList hyperLabels(wxKEY_STRING);
+WX_DECLARE_HASH_MAP(int, wxChar*, wxIntegerHash, wxIntegerEqual, IntHashMap);
+IntHashMap hyperLinks;
+WX_DECLARE_STRING_HASH_MAP(long, StringLongMap);
+StringLongMap hyperLabels;
 FILE *Index = NULL;
 
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 
@@ -94,5 +96,5 @@
       SetCurrentOutput(Chapters);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
@@ -133,5 +135,5 @@
       SetCurrentOutput(Sections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
@@ -162,5 +164,5 @@
       SetCurrentOutput(Subsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
@@ -187,5 +189,5 @@
       SetCurrentOutput(Subsubsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
@@ -346,9 +348,10 @@
       indentLevel --;
 
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
     }
@@ -357,8 +360,8 @@
   case ltITEM:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (!start)
       {
@@ -693,5 +696,5 @@
       {
         wxChar *label = GetArgData();
-        hyperLinks.Append(currentBlockId, (wxObject *)copystring(label));
+        hyperLinks[currentBlockId] = copystring(label);
       }
 
@@ -798,5 +801,8 @@
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
+      {
+        TexRef *ref = iTexRef->second;
       if (ref)
       {
@@ -805,4 +811,5 @@
         ref->sectionNumber = copystring(buf);
       }
+      }
 
       wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{[%d]} "), hyBLOCK_BOLD, NewBlockId(), citeCount);
@@ -1162,16 +1169,14 @@
     TraverseDocument();
 
-    wxNode *node = hyperLinks.GetFirst();
-    while (node)
+    for (IntHashMap::iterator iHyperLink = hyperLinks.begin(); iHyperLink != hyperLinks.end(); ++iHyperLink)
     {
-      long from = node->GetKeyInteger();
-      wxChar *label = (wxChar *)node->GetData();
-      wxNode *otherNode = hyperLabels.Find(label);
-      if (otherNode)
+      long from = iHyperLink->first;
+      wxChar *label = iHyperLink->second;
+      StringLongMap::iterator iOther = hyperLabels.find(label);
+      if (iOther != hyperLabels.end())
       {
-        long to = (long)otherNode->GetData();
+        long to = iOther->second;
         wxFprintf(Index, _T("%ld %ld\n"), from, to);
       }
-      node = node->GetNext();
     }
 

 	  	 

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 66046)
+++ build/bakefiles/files.bkl	(working copy)
@@ -362,6 +362,7 @@
     src/common/mimecmn.cpp
     src/common/module.cpp
     src/common/mstream.cpp
+    src/common/numformatter.cpp
     src/common/object.cpp
     src/common/platinfo.cpp
     src/common/powercmn.cpp
@@ -490,6 +491,7 @@
     wx/msgout.h
     wx/msgqueue.h
     wx/mstream.h
+    wx/numformatter.h
     wx/object.h
     wx/platform.h
     wx/platinfo.h
@@ -743,6 +745,7 @@
     src/common/valgen.cpp
     src/common/validate.cpp
     src/common/valtext.cpp
+    src/common/valnumtext.cpp
     src/common/wincmn.cpp
     src/common/windowid.cpp
     src/common/wrapsizer.cpp
@@ -884,6 +887,7 @@
     wx/toolbar.h
     wx/validate.h
     wx/valtext.h
+    wx/valnumtext.h
     wx/window.h
     wx/windowid.h
     wx/wrapsizer.h
Index: docs/doxygen/mainpages/cat_classes.h
===================================================================
--- docs/doxygen/mainpages/cat_classes.h	(revision 66046)
+++ docs/doxygen/mainpages/cat_classes.h	(working copy)
@@ -208,6 +208,7 @@
 @li wxValidator: Base validator class
 @li wxTextValidator: Text control validator class
 @li wxGenericValidator: Generic control validator class
+@li wxNumericTextValidator: Text control validator class for entering numbers
 
 
 
Index: docs/doxygen/overviews/validator.h
===================================================================
--- docs/doxygen/overviews/validator.h	(revision 66046)
+++ docs/doxygen/overviews/validator.h	(working copy)
@@ -10,7 +10,7 @@
 
 @page overview_validator wxValidator Overview
 
-Classes: wxValidator, wxTextValidator, wxGenericValidator
+Classes: wxValidator, wxTextValidator, wxGenericValidator, wxNumericTextValidator
 
 @li @ref overview_validator_intro
 @li @ref overview_validator_anatomy
Index: include/wx/numformatter.h
===================================================================
--- include/wx/numformatter.h	(revision 0)
+++ include/wx/numformatter.h	(revision 0)
@@ -0,0 +1,53 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/numformatter.h
+// Purpose:     wxNumberFormatter class
+// Author:      Fulvio Senore
+// Modified by:
+// Created:     11/06/2010
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_NUMBER_FORMATTER_
+#define _WX_NUMBER_FORMATTER_
+
+#include "wx/string.h"
+
+enum wxNumberFormatterStyle
+{
+    wxNFS_NONE = 0x0,
+    wxNFS_THOUSANDS_SEP = 0x1
+};
+
+class WXDLLIMPEXP_CORE wxNumberFormatter
+{
+public:
+
+    // format a double var to a string
+//    static wxString FormatDoubleToString( double val, int maxLen, int precision, bool useThousandsSeparator );
+    static wxString FormatDoubleToString( double val, int maxLen, int precision, int flags );
+
+    // add the thousands separators to a string representing a number without the separators
+    static wxString AddThousandsSeparators( const wxString &s );
+
+    // remove the thousands separators from a string representing a number
+    static wxString RemoveThousandsSeparators( const wxString &s );
+
+    // remove trailing zeroes and possibly the decimal separator from a string representing a decimal number
+    // calling this function only makes sense for numbers with a decimal part, not for integers
+    static wxString RemoveTrailingZeroes( const wxString &s );
+
+private:
+
+    // set the decimal and thousands separators
+    static void SetSeparators();
+
+    // contains the decimal separator: changes from country to country
+    static wxChar m_decimalSeparator;
+    // contains the thousands separator: changes from country to country
+    static wxChar m_thousandsSeparator;
+
+};
+
+
+#endif
+
Index: include/wx/valnumtext.h
===================================================================
--- include/wx/valnumtext.h	(revision 0)
+++ include/wx/valnumtext.h	(revision 0)
@@ -0,0 +1,136 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        valnumtext.h
+// Purpose:     wxNumericTextValidator class
+// Author:      Fulvio Senore
+// Modified by:
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_VALNUMTEXTH__
+#define _WX_VALNUMTEXTH__
+
+#include "wx/defs.h"
+
+#if wxUSE_VALIDATORS && wxUSE_TEXTCTRL
+
+#include "wx/textctrl.h"
+#include "wx/validate.h"
+
+enum wxNumericTextValidatorStyle
+{
+    wxNTV_FILTER_NONE = 0x0,
+    wxNTV_THOUSANDS_SEPARATOR = 0x1,
+    wxNTV_ZERO_AS_BLANK = 0x2,
+    wxNTV_POSITIVE = 0x4,
+    wxNTV_NO_TRAILING_ZEROES = 0x8
+};
+
+    
+    
+class WXDLLEXPORT wxNumericTextValidator: public wxValidator
+{
+DECLARE_DYNAMIC_CLASS(wxNumericTextValidator)
+public:
+
+    wxNumericTextValidator();
+
+    // constructors for integer variables
+    // maxLen: maximum number of allowed characters (-1 = no limit)
+    wxNumericTextValidator( long style, int *val = NULL, int maxLen = -1 );
+
+    // constructors for double variables
+    // precision: maximum number of decimals allowed (-1 = no limit)
+    wxNumericTextValidator( long style, double *val = NULL, int maxLen = -1, int precision = -1 );
+
+    wxNumericTextValidator(const wxNumericTextValidator& val);
+
+    virtual ~wxNumericTextValidator(){}
+
+    // Make a clone of this validator (or return NULL) - currently necessary
+    // if you're passing a reference to a validator.
+    // Another possibility is to always pass a pointer to a new validator
+    // (so the calling code can use a copy constructor of the relevant class).
+    virtual wxObject *Clone() const { return new wxNumericTextValidator(*this); }
+    bool Copy(const wxNumericTextValidator& val);
+
+    // Called when the value in the window must be validated.
+    // This function can pop up an error message.
+    virtual bool Validate(wxWindow *parent);
+
+    // Called to transfer data to the window
+    virtual bool TransferToWindow();
+
+    // Called to transfer data from the window
+    virtual bool TransferFromWindow();
+
+    void SetMaxLen( int maxLen ) { m_maxLen = maxLen; }
+    void SetPrecision( int precision );
+
+    bool HasFlag(wxNumericTextValidatorStyle style) const
+        { return (m_validatorStyle & style) != 0; }
+
+    inline long GetStyle() const { return m_validatorStyle; }
+    void SetStyle(long style);
+
+    wxTextEntry *GetTextEntry();
+
+DECLARE_EVENT_TABLE()
+
+protected:
+
+    void Init();
+
+    // validate the keycode if this instance nust handle an integer value
+    // return true if the key is OK
+    bool ValidateInt( int keyCode );
+
+    // validate the keycode if this instance nust handle a double value
+    // return true if the key is OK
+    bool ValidateDouble( int keyCode );
+
+    // determine the current insertion point and text in the associated control
+    // removes selected text if any, because pressing a key would make it disappear
+    void GetCurrentValueAndInsertionPoint( wxString& val, int& ipoint );
+
+    // return true if a '-' char is ok
+    bool IsMinusOk( wxString& val, int ipoint );
+
+    // format a double var to a string accordingly to the validator's parameters (number of decimals)
+    wxString FormatDoubleToString( double val );
+
+    // type of the variable associated with this instance
+    enum VariableType { vtUndefined, vtInteger, vtDouble };
+
+    long            m_validatorStyle;
+    VariableType    m_vType;    // associated variable type
+    int             m_maxLen;   // maximum number of chars, 0 = unlimited
+    int             m_precision;   // maximum number of decimals, 0 = unlimited
+    int *           m_intValue;     // variable handled by this instance if it is associated with an integer
+    double *        m_doubleValue;  // variable handled by this instance if it is associated with a double
+
+    // contains the decimal separator: changes from country to country
+    static wxChar m_decimalSeparator;
+    // contains the thousands separator: changes from country to country
+    static wxChar m_thousandsSeparator;
+
+private:
+
+    // Filter keystrokes
+    void OnChar(wxKeyEvent& event);
+
+    void OnKillFocus(wxFocusEvent& event);
+
+    
+// Cannot use
+//  DECLARE_NO_COPY_CLASS(wxTextValidator)
+// because copy constructor is explicitly declared above;
+// but no copy assignment operator is defined, so declare
+// it private to prevent the compiler from defining it:
+    wxNumericTextValidator& operator=(const wxNumericTextValidator&);
+};
+
+#endif
+  // wxUSE_VALIDATORS && wxUSE_TEXTCTRL
+
+#endif
+  // _WX_VALTEXTH__
Index: interface/wx/numformatter.h
===================================================================
--- interface/wx/numformatter.h	(revision 0)
+++ interface/wx/numformatter.h	(revision 0)
@@ -0,0 +1,82 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        numformatter.h
+// Purpose:     interface to wxNumberFormatter
+// Author:      Fulvio Senore
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    Styles used by wxNumberFormatter.
+*/
+enum NumberFormatterStyle
+{
+    /// No particular action.
+    wxNFS_NONE = 0x0,
+
+    /// Add thousands separators to the string representing the number.
+    wxNFS_THOUSANDS_SEP = 0x1
+};
+
+
+/**
+    @class wxNumberFormatter
+
+    wxNumberFormatter handles strings representing numbers.
+	
+    It creates a string from a double variable and it handles adding and removing
+    the decimal separator.
+    
+    This class contains only static functions, so users must not create instances
+    but directly call the member functions.
+    
+    This class is used by @ref wxNumericTextValidator.
+
+    @library{wxbase}
+*/
+class wxNumberFormatter
+{
+public:
+
+	/**
+        Format a @c double variable to a string.
+        
+        @param val
+            The variable to convert to a string.
+        @param maxLen
+            Maximum lenght of the resulting string, currently non used.
+        @param precision
+            Number of decimals to write in formatted string.
+        @param flags
+            Values from the ::NumberFormatterStyle enumeration.
+    */
+    static wxString FormatDoubleToString( double val, int maxLen, int precision, int flags );
+
+    /**
+        Add the thousands separators to a string representing a number without separators.
+    */
+    static wxString AddThousandsSeparators( const wxString &s );
+
+	/**
+        Removes the thousands separators from a string representing a number.
+    */
+    static wxString RemoveThousandsSeparators( const wxString &s );
+
+	/**
+        Removes the trailing zeroes in the decimal part and possibly the decimal separator from a string representing a number.
+        For example "12.3400" becomes "12.34" and "23.00" becomes "23".
+        Calling this function only makes sense for numbers with a decimal part, not for integers.
+    */
+    static wxString RemoveTrailingZeroes( const wxString &s );
+
+private:
+
+    // set the decimal and thousands separators
+    static void SetSeparators();
+
+    // contains the decimal separator: changes from country to country
+    static wxChar m_decimalSeparator;
+    // contains the thousands separator: changes from country to country
+    static wxChar m_thousandsSeparator;
+
+};
+
Index: interface/wx/valgen.h
===================================================================
--- interface/wx/valgen.h	(revision 66046)
+++ interface/wx/valgen.h	(working copy)
@@ -27,7 +27,7 @@
     @library{wxcore}
     @category{validator}
 
-    @see @ref overview_validator, wxValidator, wxTextValidator
+    @see @ref overview_validator, wxValidator, wxTextValidator, wxNumericTextValidator
 */
 class wxGenericValidator : public wxValidator
 {
Index: interface/wx/validate.h
===================================================================
--- interface/wx/validate.h	(revision 66046)
+++ interface/wx/validate.h	(working copy)
@@ -38,7 +38,7 @@
     @stdobjects
     ::wxDefaultValidator
 
-    @see @ref overview_validator, wxTextValidator, wxGenericValidator
+    @see @ref overview_validator, wxTextValidator, wxGenericValidator, wxNumericTextValidator
 */
 class wxValidator : public wxEvtHandler
 {
Index: interface/wx/valnumtext.h
===================================================================
--- interface/wx/valnumtext.h	(revision 0)
+++ interface/wx/valnumtext.h	(revision 0)
@@ -0,0 +1,126 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        valnumtext.h
+// Purpose:     interface to wxNumericTextValidator
+// Author:      Fulvio Senore
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    Styles used by wxNumericTextValidator.
+*/
+enum wxNumericTextValidatorStyle
+{
+    /// No filtering takes place.
+	wxNTV_FILTER_NONE,
+	
+	/// Show numbers with thousands separators.
+	/// Numbers are formatted when the dialog is created and when the focus leaves the control.
+    wxNTV_THOUSANDS_SEPARATOR,
+	
+	/// Show a value of zero as an empty string.
+	/// With this style a value of zero in the associated variable is translated to an empty string.
+	/// An empty string is always translated to a value of zero, with or without this style.
+    wxNTV_ZERO_AS_BLANK,
+	
+	/// Only accept zero or positive numbers.
+    wxNTV_POSITIVE,
+    
+    /// Remove trailing zeroes from the decimal part of the number.
+    /// For example, if this style is set "12.3400" becomes "12.34" and "23.00" becomes "23".
+    wxNTV_NO_TRAILING_ZEROES
+
+};
+    
+/**
+    @class wxNumericTextValidator
+
+    wxNumericTextValidator validates text controls for numerical data entry.
+	
+    It links the text control and an @c int or @c double variable, with automatic conversion.
+
+    For more information, please see @ref overview_validator.
+
+    @library{wxcore}
+    @category{validator}
+
+    @see @ref overview_validator, wxValidator, wxGenericValidator, wxTextValidator
+*/
+class wxNumericTextValidator: public wxValidator
+{
+public:
+
+    /**
+        Default constructor.
+    */
+	wxNumericTextValidator();
+
+    /**
+        Constructor for @c int variables.
+
+        @param style
+            One or more of the ::wxNumericTextValidatorStyle styles.
+        @param val
+            A pointer to an @c int variable that contains the value. This
+            variable should have a lifetime equal to or longer than the
+            validator lifetime (which is usually determined by the lifetime of
+            the window).
+        @param maxLen
+            Maximum number of accepted characters (-1 = no limit).
+            Currently not implemented.
+    */
+	wxNumericTextValidator( long style, int *val = NULL, int maxLen = -1 );
+
+    /**
+        Constructor for @c double variables.
+
+        @param style
+            One or more of the ::wxNumericTextValidatorStyle styles.
+        @param val
+            A pointer to a @c double variable that contains the value. This
+            variable should have a lifetime equal to or longer than the
+            validator lifetime (which is usually determined by the lifetime of
+            the window).
+        @param maxLen
+            Maximum number of accepted characters (-1 = no limit).
+        @param precision
+            Maximum number of accepted decimals (-1 = no limit).
+    */
+	wxNumericTextValidator( long style, double *val = NULL, int maxLen = -1, int precision = -1 );
+
+    /**
+        Clones the validator using the copy constructor.
+    */
+    virtual wxObject *Clone();
+
+
+    /**
+        Returns the validator style.
+
+        @see HasFlag()
+    */
+    long GetStyle() const { return m_validatorStyle; }
+
+    /**
+        Returns @true if the given @a style bit is set in the current style.
+    */
+    bool HasFlag(wxNumericTextValidatorStyle style) const
+        { return (m_validatorStyle & style) != 0; }
+
+	/**
+        Sets the maximum lenght.
+    */
+	void SetMaxLen( int maxLen );
+
+	/**
+        Sets the number of decimals.
+    */
+	void SetPrecision( int precision );
+
+    /**
+        Sets the validator style which must be a combination of one or more
+        of the ::wxNumericTextValidatorStyle values.
+    */
+    void SetStyle(long style);
+
+};
+
Index: interface/wx/valtext.h
===================================================================
--- interface/wx/valtext.h	(revision 66046)
+++ interface/wx/valtext.h	(working copy)
@@ -77,7 +77,7 @@
     @library{wxcore}
     @category{validator}
 
-    @see @ref overview_validator, wxValidator, wxGenericValidator
+    @see @ref overview_validator, wxValidator, wxGenericValidator, wxNumericTextValidator
 */
 class wxTextValidator : public wxValidator
 {
Index: samples/validate/validate.cpp
===================================================================
--- samples/validate/validate.cpp	(revision 66046)
+++ samples/validate/validate.cpp	(working copy)
@@ -31,6 +31,8 @@
 #include "wx/sizer.h"
 #include "wx/valgen.h"
 #include "wx/valtext.h"
+#include "wx/valnumtext.h"
+#include "wx/numformatter.h"
 
 #ifndef __WXMSW__
     #include "../sample.xpm"
@@ -63,6 +65,8 @@
     m_string = wxT("Spaces are invalid here");
     m_string2 = "Valid text";
     m_listbox_choices.Add(0);
+    m_intValue = 0;
+    m_doubleValue = 12354.31;
 }
 
 // ----------------------------------------------------------------------------
@@ -215,6 +219,12 @@
         m_listbox->Append(wxString(wxT("checkbox: ")) + checkbox_state);
         m_listbox->Append(wxString(wxT("combobox: ")) + g_data.m_combobox_choice);
         m_listbox->Append(wxString(wxT("radiobox: ")) + g_radiobox_choices[g_data.m_radiobox_choice]);
+
+        wxString stmp = "integer value: ";
+        stmp << g_data.m_intValue;
+        m_listbox->Append( stmp );
+        stmp = "double value: " + wxNumberFormatter::FormatDoubleToString( g_data.m_doubleValue, 15, 5, wxNFS_NONE );
+        m_listbox->Append( stmp );
     }
 }
 
@@ -296,7 +306,21 @@
     btn->AddButton(new wxButton(this, wxID_CANCEL));
     btn->Realize();
 
+    // setup a sizer with the controls for wxNumericTextValidator
+    // ----------------------------------------------------------
 
+    m_numericTextInt = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0,
+                            wxNumericTextValidator(wxNTV_ZERO_AS_BLANK, &g_data.m_intValue));
+    m_numericTextInt->SetToolTip("uses wxNumericTextValidator with wxNTV_ZERO_AS_BLANK");
+    m_numericTextDouble = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0,
+                            wxNumericTextValidator(wxNTV_ZERO_AS_BLANK|wxNTV_THOUSANDS_SEPARATOR, &g_data.m_doubleValue, 10, 2));
+    m_numericTextDouble->SetToolTip("uses wxNumericTextValidator with 2 decimals");
+    wxBoxSizer *numSizer = new wxBoxSizer( wxHORIZONTAL );
+    numSizer->Add( m_numericTextInt, 1, wxALL, 10 );
+    numSizer->Add( m_numericTextDouble, 1, wxALL, 10 );
+
+
+
     // setup the main sizer
     // --------------------
 
@@ -310,6 +334,8 @@
                                     wxGenericValidator(&g_data.m_radiobox_choice)),
                    0, wxGROW | wxLEFT|wxBOTTOM|wxRIGHT, 10);
 
+    mainsizer->Add( numSizer, 0, wxGROW | wxALL );
+
     mainsizer->Add(btn, 0, wxGROW | wxALL, 10);
 
     SetSizer(mainsizer);
Index: samples/validate/validate.h
===================================================================
--- samples/validate/validate.h	(revision 66046)
+++ samples/validate/validate.h	(working copy)
@@ -52,6 +52,9 @@
     bool TransferDataToWindow();
     wxTextCtrl *m_text;
     wxComboBox *m_combobox;
+
+    wxTextCtrl *m_numericTextInt;
+    wxTextCtrl *m_numericTextDouble;
 };
 
 class MyData
@@ -72,6 +75,10 @@
     // the string entered in the combobox's text-edit field.
     wxString m_combobox_choice;
 
+    // variables handled by wxNumericTextValidator
+    int m_intValue;
+    double m_doubleValue;
+
     bool m_checkbox_state;
     int m_radiobox_choice;
 };
Index: src/common/numformatter.cpp
===================================================================
--- src/common/numformatter.cpp	(revision 0)
+++ src/common/numformatter.cpp	(revision 0)
@@ -0,0 +1,116 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        numformatter.cpp
+// Purpose:     wxNumberFormatter
+// Author:      Fulvio Senore
+// Modified by:
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#include "wx/numformatter.h"
+#include "wx/intl.h"
+
+// will be changed to the correct value by the first function call
+wxChar wxNumberFormatter::m_decimalSeparator = 'x';
+wxChar wxNumberFormatter::m_thousandsSeparator = 'x';
+
+void wxNumberFormatter::SetSeparators()
+{
+    if( m_decimalSeparator == 'x' )
+    {
+        wxString stmp = wxLocale::GetInfo(wxLOCALE_DECIMAL_POINT, wxLOCALE_CAT_NUMBER);
+        if( stmp.IsEmpty() ) stmp = wxT(".");
+        m_decimalSeparator = stmp[0];
+        stmp = wxLocale::GetInfo(wxLOCALE_THOUSANDS_SEP, wxLOCALE_CAT_NUMBER);
+        if( stmp.IsEmpty() ) stmp = wxT(",");
+        m_thousandsSeparator = stmp[0];
+    }
+}
+
+wxString wxNumberFormatter::FormatDoubleToString( double val, int WXUNUSED(maxLen), int precision, int flags )
+{
+    wxString stmp;
+    wxString fmt = wxEmptyString;
+    fmt << wxT("%.") << precision << wxT("f");
+    stmp.Printf( fmt, val );
+
+    if( (flags & wxNFS_THOUSANDS_SEP) != 0 )
+        stmp = AddThousandsSeparators( stmp );
+
+    return stmp;
+}
+
+wxString wxNumberFormatter::AddThousandsSeparators( const wxString &s )
+{
+    wxString decPart;   // the decimal part of the number, including the decimal separator
+    wxString intPart;   // the integer part of the number, excluding the decimal separator
+
+    SetSeparators();
+
+    int sepPos = s.Find( m_decimalSeparator );
+    if( sepPos == wxNOT_FOUND )
+    {
+        decPart = wxEmptyString;
+        intPart = s;
+    }
+    else
+    {
+        decPart =  s.Mid( sepPos );
+        intPart = s.Left( sepPos );
+    }
+
+    // now we work on intPart only
+    int n3 = 0;
+    wxString intPartNew = wxEmptyString;
+    int minIdx = 0;
+    if( intPart[0] == '-' ) minIdx = 1;
+    for( int k = intPart.Len() - 1; k >= minIdx; k-- )
+    {
+        intPartNew = intPart[k] + intPartNew;
+        n3++;
+        if( n3 == 3 )
+        {
+            if( k > minIdx )
+                intPartNew = m_thousandsSeparator + intPartNew;
+            n3 = 0;
+        }
+    }
+    if( minIdx == 1 ) intPartNew = intPart[0] + intPartNew;
+
+    return intPartNew + decPart;
+}
+
+wxString wxNumberFormatter::RemoveThousandsSeparators( const wxString &s )
+{
+    SetSeparators();
+
+    wxString sout = s;
+    sout.Replace( wxString(m_thousandsSeparator), wxEmptyString );
+    return sout;
+}
+
+wxString wxNumberFormatter::RemoveTrailingZeroes( const wxString &s )
+{
+    wxString retVal = s;
+
+    SetSeparators();
+
+    // remove trailing zeroes
+    while( !retVal.IsEmpty() && retVal.Right(1) == "0" ) {
+        retVal = retVal.Left( retVal.Len() - 1);
+    }
+    // remove decimal separator
+    if( !retVal.IsEmpty() && retVal.Right(1) == m_decimalSeparator ) {
+        retVal = retVal.Left( retVal.Len() - 1);
+    }
+
+    return retVal;
+}
+
+
Index: src/common/valnumtext.cpp
===================================================================
--- src/common/valnumtext.cpp	(revision 0)
+++ src/common/valnumtext.cpp	(revision 0)
@@ -0,0 +1,419 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        valnumtext.cpp
+// Purpose:     wxNumericTextValidator
+// Author:      Fulvio Senore
+// Modified by:
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#if wxUSE_VALIDATORS && wxUSE_TEXTCTRL
+
+#ifndef WX_PRECOMP
+#include "wx/textctrl.h"
+#include "wx/combobox.h"
+#include "wx/msgdlg.h"
+#endif
+
+#include "wx/valnumtext.h"
+#include "wx/numformatter.h"
+
+#include <string.h>
+
+#ifdef __SALFORDC__
+#include <clib.h>
+#endif
+
+IMPLEMENT_DYNAMIC_CLASS(wxNumericTextValidator, wxValidator)
+
+BEGIN_EVENT_TABLE(wxNumericTextValidator, wxValidator)
+EVT_CHAR(wxNumericTextValidator::OnChar)
+EVT_KILL_FOCUS(wxNumericTextValidator::OnKillFocus)
+END_EVENT_TABLE()
+
+// will be changed to the correct value by the first Init() call
+wxChar wxNumericTextValidator::m_decimalSeparator = 'x';
+wxChar wxNumericTextValidator::m_thousandsSeparator = 'x';
+
+wxNumericTextValidator::wxNumericTextValidator()
+{
+    Init();
+}
+
+wxNumericTextValidator::wxNumericTextValidator( long style, int *val, int maxLen )
+{
+    SetStyle(style);
+    Init();
+    m_intValue = val;
+    m_maxLen = maxLen;
+    m_vType = vtInteger;
+}
+
+wxNumericTextValidator::wxNumericTextValidator( long style, double *val, int maxLen, int precision )
+{
+    SetStyle(style);
+    Init();
+    m_doubleValue = val;
+    m_maxLen = maxLen;
+    SetPrecision( precision );
+    m_vType = vtDouble;
+}
+
+wxNumericTextValidator::wxNumericTextValidator(const wxNumericTextValidator& val)
+: wxValidator()
+{
+    Copy(val);
+}
+
+void wxNumericTextValidator::Init()
+{
+    m_vType = vtUndefined;
+
+    if( m_decimalSeparator == 'x' )
+    {
+        wxString stmp = wxLocale::GetInfo(wxLOCALE_DECIMAL_POINT, wxLOCALE_CAT_NUMBER);
+        if( stmp.IsEmpty() ) stmp = wxT(".");
+        m_decimalSeparator = stmp[0];
+        stmp = wxLocale::GetInfo(wxLOCALE_THOUSANDS_SEP, wxLOCALE_CAT_NUMBER);
+        if( stmp.IsEmpty() ) stmp = wxT(",");
+        m_thousandsSeparator = stmp[0];
+    }
+}
+
+void wxNumericTextValidator::SetPrecision( int precision )
+{
+    m_precision = precision;
+    if( m_precision == -1 ) m_precision = 20;   // set to a very high number
+}
+
+bool wxNumericTextValidator::Copy(const wxNumericTextValidator& val)
+{
+    wxValidator::Copy(val);
+
+    m_validatorStyle = val.m_validatorStyle;
+    m_vType = val.m_vType;
+    m_maxLen = val.m_maxLen;
+    m_precision = val.m_precision;
+    m_intValue = val.m_intValue;
+    m_doubleValue = val.m_doubleValue;
+
+    return true;
+}
+
+// Called when the value in the window must be validated.
+// This function can pop up an error message.
+bool wxNumericTextValidator::Validate( wxWindow* WXUNUSED(parent) )
+{
+    return true;
+}
+
+// Called to transfer data to the window
+bool wxNumericTextValidator::TransferToWindow(void)
+{
+    wxString stmp;
+
+    wxTextEntry * const control = GetTextEntry();
+    if ( !control )
+        return false;
+
+    switch( m_vType )
+    {
+        case vtInteger:
+            if( *m_intValue == 0 && HasFlag(wxNTV_ZERO_AS_BLANK) )
+                stmp = wxEmptyString;
+            else
+                stmp << *m_intValue;
+            break;
+        case vtDouble:
+            if( *m_doubleValue == 0 && HasFlag(wxNTV_ZERO_AS_BLANK) )
+                stmp = wxEmptyString;
+            else {
+                stmp = FormatDoubleToString( *m_doubleValue );
+                if( HasFlag(wxNTV_NO_TRAILING_ZEROES) )
+                    stmp = wxNumberFormatter::RemoveTrailingZeroes( stmp );
+            }
+            break;
+    }
+    control->SetValue( stmp );
+
+    return true;
+}
+
+// Called to transfer data from the window
+bool wxNumericTextValidator::TransferFromWindow(void)
+{
+    wxString stmp;
+
+    wxTextEntry * const control = GetTextEntry();
+    if ( !control )
+        return false;
+    stmp = control->GetValue();
+    stmp = wxNumberFormatter::RemoveThousandsSeparators( stmp );
+    switch( m_vType )
+    {
+        case vtInteger:
+            if( stmp.empty() )
+            {
+                *m_intValue = 0;
+            }
+            else
+            {
+                long ltmp;
+                stmp.ToLong( &ltmp );
+                *m_intValue = ltmp;
+            }
+            break;
+        case vtDouble:
+            if( stmp.empty() )
+            {
+                *m_doubleValue = 0;
+            }
+            else
+            {
+                double dtmp;
+                stmp.ToDouble( &dtmp );
+                *m_doubleValue = dtmp;
+            }
+            break;
+    }
+
+    return true;
+}
+
+void wxNumericTextValidator::OnKillFocus(wxFocusEvent& event)
+{
+    // calling SetValue() later in this function will clear the modified state for wxTextCtrl
+    // so we save the modified status and restore it after calling SetValue()
+    bool wasModified = false;
+    if (m_validatorWindow->IsKindOf(CLASSINFO(wxTextCtrl))) {
+        // modified status is only available for wxTextCtrl controls
+        wasModified = ((wxTextCtrl*)m_validatorWindow)->IsModified();
+    }
+
+    wxTextEntry * const control = GetTextEntry();
+    wxString stmp = control->GetValue();
+
+    if( m_vType == vtDouble )
+    {
+        // format the control's content with the specified number of decimals
+        stmp = wxNumberFormatter::RemoveThousandsSeparators( stmp );
+        if( !stmp.empty() )
+        {
+            double dtmp;
+            stmp.ToDouble( &dtmp );
+            if( dtmp == 0.0 && HasFlag(wxNTV_ZERO_AS_BLANK) ) {
+                stmp = wxEmptyString;
+            }
+            else
+            {
+                stmp = FormatDoubleToString( dtmp );
+                if( HasFlag(wxNTV_NO_TRAILING_ZEROES) )
+                    stmp = wxNumberFormatter::RemoveTrailingZeroes( stmp );
+            }
+            control->SetValue( stmp );
+        }
+    }
+    if( m_vType == vtInteger )
+    {
+        if( !stmp.empty() )
+        {
+            long ltmp;
+            stmp.ToLong( &ltmp );
+            if( ltmp == 0 && HasFlag(wxNTV_ZERO_AS_BLANK) )
+            {
+                control->SetValue( wxEmptyString );
+            }
+        }
+    }
+
+    if( wasModified ) {
+        // reset the modified status
+        ((wxTextCtrl*)m_validatorWindow)->MarkDirty();
+    }
+
+    event.Skip();
+}
+
+void wxNumericTextValidator::OnChar(wxKeyEvent& event)
+{
+    if ( !m_validatorWindow )
+    {
+        event.Skip();
+        return;
+    }
+
+    int keyCode = event.GetKeyCode();
+
+    if( keyCode < WXK_SPACE || keyCode == WXK_DELETE || keyCode > WXK_START )
+    {
+        // we don't filter special keys and Delete
+        event.Skip();
+        return;
+    }
+
+    bool ok = false;
+    switch( m_vType )
+    {
+        case vtInteger:
+            ok = ValidateInt( keyCode );
+            break;
+        case vtDouble:
+            if( m_precision == 0 )
+                ok = ValidateInt( keyCode );
+            else
+                ok = ValidateDouble( keyCode );
+            break;
+    }
+
+    if( !ok )
+    {
+        if ( !wxValidator::IsSilent() )
+            wxBell();
+    }
+    else
+    {
+        event.Skip();
+    }
+}
+
+bool wxNumericTextValidator::IsMinusOk( wxString& val, int ipoint )
+{
+    bool ok = !HasFlag(wxNTV_POSITIVE);
+    if( ok && !val.empty() )
+    {
+        ok = (val[0] != '-' );
+    }
+    if( ok )
+    {
+        ok = (ipoint == 0 );
+    }
+    return ok;
+}
+
+bool wxNumericTextValidator::ValidateInt( int keyCode )
+{
+    wxString val;
+    int ipoint;
+
+    GetCurrentValueAndInsertionPoint( val, ipoint );
+
+    if( m_maxLen > 0 && static_cast<int>(val.Len()) >= m_maxLen ) return false;
+
+    if( keyCode == '-' ) return IsMinusOk( val, ipoint );
+
+    return (keyCode >= '0' && keyCode <= '9');
+}
+
+bool wxNumericTextValidator::ValidateDouble( int keyCode )
+{
+    wxString val;
+    int ipoint;
+
+    GetCurrentValueAndInsertionPoint( val, ipoint );
+
+    if( keyCode == '-' ) return IsMinusOk( val, ipoint );
+
+    if( keyCode == m_decimalSeparator )
+    {
+        if( val.Find(m_decimalSeparator) != wxNOT_FOUND )
+        {
+            // there is already a decimal separator
+            return false;
+        }
+    }
+    else
+    {
+        if( !(keyCode >= '0' && keyCode <= '9') ) return false;
+    }
+
+    // let's see what would happen if we should accept the key
+    wxString valtmp = val.Left(ipoint) + wxChar(keyCode) + val.Mid(ipoint);
+    int sepPos = valtmp.Find(m_decimalSeparator);
+    wxString sx, dx;
+    if( sepPos == wxNOT_FOUND )
+    {
+        sx = valtmp;
+        dx = wxEmptyString;
+    }
+    else
+    {
+        sx = valtmp.Left( sepPos );
+        dx = valtmp.Mid( sepPos + 1 );
+    }
+    if( m_precision > 0 && static_cast<int>(dx.Len()) > m_precision ) return false;
+    if( m_maxLen > 0 )
+    {
+        int ltot = static_cast<int>(dx.Len()) + static_cast<int>(sx.Len()) + 1;
+        if( ltot > m_maxLen ) return false;
+    }
+
+    return true;
+}
+
+void wxNumericTextValidator::GetCurrentValueAndInsertionPoint( wxString& val, int& ipoint )
+{
+    wxTextEntry * const control = GetTextEntry();
+    val = control->GetValue();
+    ipoint = control->GetInsertionPoint();
+
+    long selFrom, selTo;
+    control->GetSelection( &selFrom, &selTo );
+
+    if( selFrom != selTo )
+    {
+        // remove the selected text
+        val = val.Left( selFrom ) + val.Mid( selTo );
+        if( ipoint > selFrom )
+        {
+            ipoint -= (selTo - selFrom);
+            wxASSERT( ipoint > 0 );
+        }
+    }
+}
+
+wxString wxNumericTextValidator::FormatDoubleToString( double val )
+{
+    int flags = wxNFS_NONE;
+    if( HasFlag(wxNTV_THOUSANDS_SEPARATOR) ) 
+        flags = wxNFS_THOUSANDS_SEP;
+
+    return wxNumberFormatter::FormatDoubleToString( val, m_maxLen, m_precision, flags );
+}
+
+void wxNumericTextValidator::SetStyle(long style)
+{
+    m_validatorStyle = style;
+}
+
+wxTextEntry *wxNumericTextValidator::GetTextEntry()
+{
+#if wxUSE_TEXTCTRL
+    if (m_validatorWindow->IsKindOf(CLASSINFO(wxTextCtrl)))
+    {
+        return (wxTextCtrl*)m_validatorWindow;
+    }
+#endif
+
+#if wxUSE_COMBOBOX
+    if (m_validatorWindow->IsKindOf(CLASSINFO(wxComboBox)))
+    {
+        return (wxComboBox*)m_validatorWindow;
+    }
+#endif
+
+    wxFAIL_MSG(
+        wxT("wxNumericTextValidator can only be used with wxTextCtrl or wxComboBox")
+        );
+
+    return NULL;
+}
+
+
+#endif
+// wxUSE_VALIDATORS && wxUSE_TEXTCTRL
Index: src/generic/grideditors.cpp
===================================================================
--- src/generic/grideditors.cpp	(revision 66046)
+++ src/generic/grideditors.cpp	(working copy)
@@ -28,12 +28,12 @@
     #include "wx/textctrl.h"
     #include "wx/checkbox.h"
     #include "wx/combobox.h"
-    #include "wx/valtext.h"
     #include "wx/intl.h"
     #include "wx/math.h"
     #include "wx/listbox.h"
 #endif
 
+#include "wx/valnumtext.h"
 #include "wx/textfile.h"
 #include "wx/spinctrl.h"
 #include "wx/tokenzr.h"
@@ -660,7 +660,7 @@
         wxGridCellTextEditor::Create(parent, id, evtHandler);
 
 #if wxUSE_VALIDATORS
-        Text()->SetValidator(wxTextValidator(wxFILTER_NUMERIC));
+        Text()->SetValidator(wxNumericTextValidator(wxNTV_FILTER_NONE, static_cast<int *>(NULL), 0));
 #endif
     }
 }
@@ -875,7 +875,8 @@
     wxGridCellTextEditor::Create(parent, id, evtHandler);
 
 #if wxUSE_VALIDATORS
-    Text()->SetValidator(wxTextValidator(wxFILTER_NUMERIC));
+    // validator defaults are zero
+    Text()->SetValidator(wxNumericTextValidator(wxNTV_FILTER_NONE, static_cast<double *>(NULL), m_width, m_precision));
 #endif
 }
 

diff --git a/src/common/filename.cpp b/src/common/filename.cpp
index b52e989..06953bc 100644
--- a/src/common/filename.cpp
+++ b/src/common/filename.cpp
@@ -1427,7 +1427,9 @@ bool wxFileName::Rmdir(const wxString& dir, int flags)
         wxString filename;
 
         // first delete all subdirectories
-        bool cont = d.GetFirst(&filename, "", wxDIR_DIRS | wxDIR_HIDDEN);
+        bool cont = d.GetFirst(&filename, "", wxDIR_DIRS
+                                            | wxDIR_HIDDEN
+                                            | wxDIR_NO_FOLLOW);
         while ( cont )
         {
             wxFileName::Rmdir(path + filename, flags);
@@ -1438,7 +1440,9 @@ bool wxFileName::Rmdir(const wxString& dir, int flags)
         if ( flags & wxPATH_RMDIR_RECURSIVE )
         {
             // delete all files too
-            cont = d.GetFirst(&filename, "", wxDIR_FILES | wxDIR_HIDDEN);
+            cont = d.GetFirst(&filename, "", wxDIR_FILES
+                                           | wxDIR_HIDDEN
+                                           | wxDIR_NO_FOLLOW);
             while ( cont )
             {
                 ::wxRemoveFile(path + filename);
@@ -1448,6 +1452,14 @@ bool wxFileName::Rmdir(const wxString& dir, int flags)
 #endif // !__WINDOWS__
     }
 
+    // In Unix, if dir is actually a symlink-to-dir, remove it as a file
+    if ( (flags & wxPATH_RMDIR_RECURSIVE ) && 
+          wxFileName::Exists(dir,
+                             wxFILE_EXISTS_SYMLINK | wxFILE_EXISTS_NO_FOLLOW))
+    {
+        return wxRemoveFile(dir);
+    }
+
     return ::wxRmdir(dir);
 }
 
diff --git a/tests/filename/filenametest.cpp b/tests/filename/filenametest.cpp
index 4864bf7..e9c7348 100644
--- a/tests/filename/filenametest.cpp
+++ b/tests/filename/filenametest.cpp
@@ -784,7 +784,7 @@ void FileNameTestCase::TestSymlinks()
     wxFileName targetfn(wxFileName::CreateTempFileName(tempdir));
     CPPUNIT_ASSERT(targetfn.FileExists());
 
-    // Create a symlink to that file, and another to the home dir
+    // Create a symlink to that file, and another to tempdir
     wxFileName linktofile(tempdir, "linktofile");
     CPPUNIT_ASSERT_EQUAL(0, symlink(targetfn.GetFullPath().c_str(),
                                         linktofile.GetFullPath().c_str()));
@@ -925,6 +925,9 @@ void FileNameTestCase::TestSymlinks()
     CPPUNIT_ASSERT(!wxFileName(tempdir, "linktofile").Exists());
     CPPUNIT_ASSERT(linktofile.Exists());
 
+    // This is a convenient place to test some parts of wxFilename::Rmdir
+    // This currently should fail without the wxPATH_RMDIR_RECURSIVE flag
+    CPPUNIT_ASSERT(!wxFileName::Rmdir(linktodirlnk.GetFullPath()));
     // Clean-up, and also tests removal of a dir containing a symlink-to-dir
     CPPUNIT_ASSERT(tempdirfn.Rmdir(wxPATH_RMDIR_RECURSIVE));
 }

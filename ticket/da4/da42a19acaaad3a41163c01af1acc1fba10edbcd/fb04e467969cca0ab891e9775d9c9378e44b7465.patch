diff -r -u -p a/samples/splitter/splitter.cpp b/samples/splitter/splitter.cpp
--- a/samples/splitter/splitter.cpp	2021-01-25 14:07:58.233133700 +0100
+++ b/samples/splitter/splitter.cpp	2021-01-26 15:13:02.393120400 +0100
@@ -34,6 +34,7 @@
 
 #include "wx/splitter.h"
 #include "wx/dcmirror.h"
+#include "wx/dcclient.h"
 
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
@@ -144,16 +145,23 @@ private:
     wxDECLARE_NO_COPY_CLASS(MySplitterWindow);
 };
 
-class MyCanvas: public wxScrolledWindow
+class MyCanvas: public wxPanel
 {
 public:
-    MyCanvas(wxWindow* parent, bool mirror);
+    MyCanvas(wxWindow* parent);
     virtual ~MyCanvas(){}
 
-    virtual void OnDraw(wxDC& dc) wxOVERRIDE;
+    static void InitDC(wxDC &dc) { dc.SetMapMode(wxMM_TEXT); }
+
+    void OnSize(wxSizeEvent& event);
+    void OnPaint(wxPaintEvent& event);
+
+protected:
+    wxSize m_ClientDcSize;
+    wxSize m_WnClientSize;
 
 private:
-    bool m_mirror;
+    wxDECLARE_EVENT_TABLE();
 
     wxDECLARE_NO_COPY_CLASS(MyCanvas);
 };
@@ -289,12 +297,12 @@ MyFrame::MyFrame()
     m_splitter->SetSashGravity(1.0);
 
 #if 1
-    m_left = new MyCanvas(m_splitter, true);
+    m_left = new MyCanvas(m_splitter);
     m_left->SetBackgroundColour(*wxRED);
     m_left->SetCursor(wxCursor(wxCURSOR_MAGNIFIER));
     m_left->SetToolTip("This is the left window");
 
-    m_right = new MyCanvas(m_splitter, false);
+    m_right = new MyCanvas(m_splitter);
     m_right->SetBackgroundColour(*wxCYAN);
     m_right->SetToolTip("And this is the window on the right");
 #else // for testing kbd navigation inside the splitter
@@ -554,26 +562,43 @@ void MySplitterWindow::OnUnsplitEvent(wx
 // MyCanvas
 // ----------------------------------------------------------------------------
 
-MyCanvas::MyCanvas(wxWindow* parent, bool mirror)
-        : wxScrolledWindow(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                           wxHSCROLL | wxVSCROLL)
+wxBEGIN_EVENT_TABLE( MyCanvas, wxPanel )
+    EVT_SIZE(MyCanvas::OnSize)
+    EVT_PAINT(MyCanvas::OnPaint)
+wxEND_EVENT_TABLE()
+//--------------------------------------------------------
+
+MyCanvas::MyCanvas(wxWindow *parent)
+    : wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxFULL_REPAINT_ON_RESIZE)
 {
-    m_mirror = mirror;
-    SetScrollbars(20, 20, 5, 5);
+    ;
+}
+
+void MyCanvas::OnSize(wxSizeEvent& event)
+{
+    wxClientDC dc(this);
+    InitDC( dc );
+    m_ClientDcSize = dc.GetSize(); // wrong values after dragging the sash (with GTK3)
+
+    m_WnClientSize = GetClientSize();
+
+    event.Skip();
 }
 
-void MyCanvas::OnDraw(wxDC& dcOrig)
+void MyCanvas::OnPaint(wxPaintEvent& WXUNUSED(event))
 {
-    wxMirrorDC dc(dcOrig, m_mirror);
+    wxPaintDC dc( this );
+    InitDC( dc );
 
-    dc.SetPen(*wxBLACK_PEN);
-    dc.DrawLine(0, 0, 100, 200);
+    wxClientDC cdc(this);
+    InitDC( cdc );
+    wxSize szCDc = cdc.GetSize();
 
-    dc.SetBackgroundMode(wxBRUSHSTYLE_TRANSPARENT);
-    dc.DrawText("Testing", 50, 50);
+    wxSize szWnd = GetClientSize();
 
-    dc.SetPen(*wxRED_PEN);
-    dc.SetBrush(*wxGREEN_BRUSH);
-    dc.DrawRectangle(120, 120, 100, 80);
+    wxString text = wxString::Format( "          wxClientDC / wxWindow\nOnSize  : %3d, %3d / %3d, %3d\nOnPaint: %3d, %3d / %3d, %3d",
+                                      m_ClientDcSize.x, m_ClientDcSize.y, m_WnClientSize.x, m_WnClientSize.y,
+                                      szCDc.x, szCDc.y, szWnd.x, szWnd.y );
+    dc.DrawText(text, 10, 10);
 }
 

I was thinking along these lines. This is not tested in any way, it
is just to indicate my thoughts.

-Rhialto.

diff -u orig/automtn.cpp ./automtn.cpp
--- orig/automtn.cpp	Fri Jan 23 17:22:40 2004
+++ ./automtn.cpp	Fri Jan 23 17:40:16 2004
@@ -102,13 +102,30 @@
 wxAutomationObject::wxAutomationObject(WXIDISPATCH* dispatchPtr)
 {
 	m_dispatchPtr = dispatchPtr;
+	// for backward compatibility, we cannot do an AddRef() here.
+}
+
+wxAutomationObject::wxAutomationObject(wxAutomationObject &original)
+{
+    m_dispatchPtr = original.GetDispatchPtr();
+    AddRef();
+}
+
+wxAutomationObject &operator = (const wxAutomationObject &rhs)
+{
+    if (this != &rhs) {
+	Release();
+	m_dispatchPtr = rhs.GetDispatchPtr();
+	AddRef();
+    }
+    return *this;
 }
 
 wxAutomationObject::~wxAutomationObject()
 {
 	if (m_dispatchPtr)
 	{
-		((IDispatch*)m_dispatchPtr)->Release();
+		Release();
 		m_dispatchPtr = NULL;
 	}
 }
@@ -274,6 +291,22 @@
 	return retVariant;
 }
 
+bool wxAutomationObject::CallMethod(wxAutomationObject &result, const wxString& member, int noArgs, wxVariant args[])
+{
+	wxVariant retVariant;
+	if (!Invoke(member, DISPATCH_METHOD, retVariant, noArgs, args))
+	{
+		retVariant.MakeNull();
+	}
+	WXIDISPATCH *d = retVariant.GetVoidPtr();
+	if (d)
+	{
+	    result.SetDispatchPtr(d);
+	    return TRUE;
+	}
+	return FALSE;
+}
+
 wxVariant wxAutomationObject::CallMethodArray(const wxString& member, int noArgs, const wxVariant **args)
 {
 	wxVariant retVariant;
@@ -284,6 +317,22 @@
 	return retVariant;
 }
 
+bool wxAutomationObject::CallMethodArray(wxAutomationObject &result, const wxString& member, int noArgs, const wxVariant **args)
+{
+	wxVariant retVariant;
+	if (!Invoke(member, DISPATCH_METHOD, retVariant, noArgs, NULL, args))
+	{
+		retVariant.MakeNull();
+	}
+	WXIDISPATCH *d = retVariant.GetVoidPtr();
+	if (d)
+	{
+	    result.SetDispatchPtr(d);
+	    return TRUE;
+	}
+	return FALSE;
+}
+
 wxVariant wxAutomationObject::CallMethod(const wxString& member,
 		const wxVariant& arg1, const wxVariant& arg2,
 		const wxVariant& arg3, const wxVariant& arg4,
@@ -655,6 +704,8 @@
     {
         oleVariant.vt = VT_DISPATCH;
         oleVariant.pdispVal = (IDispatch*) variant.GetVoidPtr();
+	if (oleVariant.pdispVal)
+	    oleVariant.pdispVal->AddRef();
     }
     else if (type == wxT("list") || type == wxT("stringlist"))
     {
diff -u orig/automtn.h ./automtn.h
--- orig/automtn.h	Fri Jan 23 17:22:42 2004
+++ ./automtn.h	Fri Jan 23 17:38:22 2004
@@ -35,10 +35,23 @@
 {
 public:
     wxAutomationObject(WXIDISPATCH* dispatchPtr = NULL);
+    wxAutomationObject(wxAutomationObject &original);
     ~wxAutomationObject();
 
+    wxAutomationObject &operator = (const wxAutomationObject &rhs);
+
 	// Set/get dispatch pointer
-    inline void SetDispatchPtr(WXIDISPATCH* dispatchPtr) { m_dispatchPtr = dispatchPtr; };
+    inline void SetDispatchPtr(WXIDISPATCH* dispatchPtr) {
+	// Free the previous COM object.
+	Release();
+	m_dispatchPtr = dispatchPtr;
+	// For backward compatibility, we cannot do an AddRef() here.
+	// This function is typically used to initialise wxAutomationObjects
+	// such as in GetObject(), where the initial AddRef() has been
+	// done already.
+	// The proper way to copy wxAutomationObjects is with
+	// the new copy constuctor anyway.
+    };
     inline WXIDISPATCH* GetDispatchPtr() const { return m_dispatchPtr; }
 
 	// Get a dispatch pointer from the current object associated
@@ -55,7 +68,9 @@
 
 	// Invoke a member function
 	wxVariant CallMethod(const wxString& method, int noArgs, wxVariant args[]);
+	bool CallMethod(wxAutomationObject &result, const wxString& method, int noArgs, wxVariant args[]);
 	wxVariant CallMethodArray(const wxString& method, int noArgs, const wxVariant **args);
+	bool CallMethodArray(wxAutomationObject &result, const wxString& method, int noArgs, const wxVariant **args);
 
 	// Convenience function
 	wxVariant CallMethod(const wxString& method,
@@ -89,6 +104,16 @@
 	// without having to deal with nasty IDispatch pointers.
 	bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs = 0, wxVariant args[] = (wxVariant*) NULL) const;
 	bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs, const wxVariant **args) const;
+
+	void Release() {
+	    if (m_dispatchPtr)
+		((IDispatch*)m_dispatchPtr)->Release();
+	}
+	long AddRef()   {
+	    if (m_dispatchPtr)
+		return ((IDispatch*)m_dispatchPtr)->AddRef();
+	    return 0;
+	}
 
 public:
     WXIDISPATCH*  m_dispatchPtr;

 	  	 

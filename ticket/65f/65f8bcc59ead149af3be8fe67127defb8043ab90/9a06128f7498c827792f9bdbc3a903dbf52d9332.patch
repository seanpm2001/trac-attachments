Index: include/wx/vlbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/vlbox.h,v
retrieving revision 1.18
diff -u2 -r1.18 include/wx/vlbox.h
--- include/wx/vlbox.h
+++ include/wx/vlbox.h
@@ -190,4 +190,7 @@
     void SetSelectionBackground(const wxColour& col);
 
+    // refreshes only the selected items
+    void RefreshSelected();
+
 
     virtual wxVisualAttributes GetDefaultAttributes() const
@@ -236,5 +239,5 @@
     void OnLeftDown(wxMouseEvent& event);
     void OnLeftDClick(wxMouseEvent& event);
-
+    void OnSetOrKillFocus(wxFocusEvent& event);
 
     // common part of all ctors
Index: src/generic/htmllbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/htmllbox.cpp,v
retrieving revision 1.29
diff -u2 -r1.29 src/generic/htmllbox.cpp
--- src/generic/htmllbox.cpp
+++ src/generic/htmllbox.cpp
@@ -366,15 +366,4 @@
     wxHtmlRenderingInfo htmlRendInfo;

-    // draw the selected cell in selected state
-    if ( IsSelected(n) )
-    {
-        wxHtmlSelection htmlSel;
-        htmlSel.Set(wxPoint(0,0), cell, wxPoint(INT_MAX, INT_MAX), cell);
-        htmlRendInfo.SetSelection(&htmlSel);
-        if ( m_htmlRendStyle )
-            htmlRendInfo.SetStyle(m_htmlRendStyle);
-        htmlRendInfo.GetState().SetSelectionState(wxHTML_SEL_IN);
-    }
-
     // note that we can't stop drawing exactly at the window boundary as then
     // even the visible cells part could be not drawn, so always draw the
Index: src/generic/vlbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/vlbox.cpp,v
retrieving revision 1.31
diff -u2 -r1.31 src/generic/vlbox.cpp
--- src/generic/vlbox.cpp
+++ src/generic/vlbox.cpp
@@ -37,4 +37,5 @@
 #include "wx/dcbuffer.h"
 #include "wx/selstore.h"
+#include "wx/renderer.h"
 
 // ----------------------------------------------------------------------------
@@ -48,4 +49,7 @@
     EVT_LEFT_DOWN(wxVListBox::OnLeftDown)
     EVT_LEFT_DCLICK(wxVListBox::OnLeftDClick)
+
+    EVT_SET_FOCUS(wxVListBox::OnSetOrKillFocus)
+    EVT_KILL_FOCUS(wxVListBox::OnSetOrKillFocus)
 END_EVENT_TABLE()
 
@@ -84,5 +88,8 @@
     // transparent drawing by default
     SetBackgroundColour(GetBackgroundColour());
-    m_colBgSel = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
+
+    // leave m_colBgSel in an invalid state: it means for OnDrawBackground()
+    // to use wxRendererNative instead of doing our own painting...
+    m_colBgSel = wxNullColour;
 
     // flicker-free drawing requires this
@@ -300,4 +307,12 @@
 }
 
+void wxVListBox::RefreshSelected()
+{
+    // only refresh those items which are currently visible and selected:
+    for (size_t i=GetVisibleBegin(), max=GetVisibleEnd(); i<max; i++)
+        if ( IsSelected(i) )
+            RefreshLine(i);
+}
+
 // ----------------------------------------------------------------------------
 // wxVListBox appearance parameters
@@ -336,23 +351,37 @@
 void wxVListBox::OnDrawBackground(wxDC& dc, const wxRect& rect, size_t n) const
 {
-    // we need to render selected and current items differently
-    const bool isSelected = IsSelected(n),
-               isCurrent = IsCurrent(n);
-    if ( isSelected || isCurrent )
+    if (m_colBgSel.IsOk())
     {
-        if ( isSelected )
+        // we need to render selected and current items differently
+        const bool isSelected = IsSelected(n),
+                isCurrent = IsCurrent(n);
+        if ( isSelected || isCurrent )
         {
-            dc.SetBrush(wxBrush(m_colBgSel, wxSOLID));
-        }
-        else // !selected
-        {
-            dc.SetBrush(*wxTRANSPARENT_BRUSH);
+            if ( isSelected )
+            {
+                dc.SetBrush(wxBrush(m_colBgSel, wxSOLID));
+            }
+            else // !selected
+            {
+                dc.SetBrush(*wxTRANSPARENT_BRUSH);
+            }
+            dc.SetPen(*(isCurrent ? wxBLACK_PEN : wxTRANSPARENT_PEN));
+            dc.DrawRectangle(rect);
         }
+        //else: do nothing for the normal items
+    }
+    else    // use wxRendererNative for a more native look&feel:
+    {
+        int flags = 0;
+        if (IsSelected(n))
+            flags |= wxCONTROL_SELECTED;
+        if (IsCurrent(n))
+            flags |= wxCONTROL_CURRENT;
+        if (wxWindow::FindFocus() == this)
+            flags |= wxCONTROL_FOCUSED;
 
-        dc.SetPen(*(isCurrent ? wxBLACK_PEN : wxTRANSPARENT_PEN));
-
-        dc.DrawRectangle(rect);
+        wxRendererNative::Get().DrawItemSelectionRect(
+            wx_const_cast(wxVListBox*, this), dc, rect, flags);
     }
-    //else: do nothing for the normal items
 }
 
@@ -411,4 +440,13 @@
 }
 
+void wxVListBox::OnSetOrKillFocus(wxFocusEvent& event)
+{
+    // we need to repaint the selection when we get the focus since
+    // wxRendererNative will generally draw the focused selection differently
+    // from the unfocused selection (see OnDrawItem):
+    RefreshSelected();
+}
+
+
 // ============================================================================
 // wxVListBox keyboard/mouse handling

 	  	 

diff -rbu2P .\wx2cvs3_org\samples\richedit/FDREPDLG.H .\wx2\samples\richedit/FDREPDLG.H
--- .\wx2cvs3_org\samples\richedit/FDREPDLG.H	Thu Jan  1 01:00:00 1970
+++ .\wx2\samples\richedit/FDREPDLG.H	Thu Jan  4 15:01:50 2001
@@ -0,0 +1,115 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/fdrepdlg.h
+// Purpose:     wxFindReplaceDialog class
+// Author:      Markus Greither
+// Modified by:
+// Created:     17/12/2000
+// RCS-ID:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_FINDREPLACEDLG_H_
+#define _WX_FINDREPLACEDLG_H_
+
+#ifdef __GNUG__
+//#pragma interface "fdrepdlg.h"
+#endif
+
+#include "wx/setup.h"
+#include "wx/dialog.h"
+//#include "wx/cmndata.h"
+
+// ----------------------------------------------------------------------------
+// Flags for wxFindReplaceData.Flags
+// ----------------------------------------------------------------------------
+
+// Flags for Feedback from Dialog
+
+#define wxFR_DIALOGTERM   FR_DIALOGTERM // Flag indicates that Dialog terminated
+#define wxFR_DOWN         FR_DOWN       // Flag indicates downward search/replace selected
+#define wxFR_FINDNEXT     FR_FINDNEXT   // Flag indicates Find Next button was pressed
+#define wxFR_REPLACE      FR_REPLACE    // Flag indicates Replace button was pressed
+#define wxFR_REPLACEALL   FR_REPLACEALL // Flag indicates Replace All button was pressed
+#define wxFR_WHOLEWORD    FR_WHOLEWORD  // Flag indicates Whole Word search/replace selected
+#define wxFR_MATCHCASE    FR_MATCHCASE  // Flag indicates Matching Case search/replace selected
+
+// Flag for Feedback from Dialog and Dialog Setup
+// If specified before Create() or Ctor is called, Replace Dialog is used, if not Find Dialog
+
+#define wxFR_REPLACE      FR_REPLACE    // Flag indicates Replace button was pressed
+
+// Flags for Dialog Setup (specify before calling Create() or Ctor)
+
+#define wxFR_NOUPDOWN     FR_NOUPDOWN   // Flag for deactivation of Up/Down Control
+#define wxFR_NOMATCHCASE  FR_NOMATCHCASE // Flag for deactivation of Match Case Control
+#define wxFR_NOWHOLEWORD  FR_NOWHOLEWORD // Flag for deactivation of Whole World Control
+
+// ----------------------------------------------------------------------------
+// Window Proc for handling RegisterWindowMessage(FINDMSGSTRING)
+// ----------------------------------------------------------------------------
+
+long FindReplaceWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceData: holds Setup Data/Feedback Data for wxFindReplaceDialog
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxFindReplaceData: public wxObject
+{
+ public:
+    void Init(wxUint32 flags,int buffSize);
+    wxFindReplaceData(wxUint32 flags,int buffSize);
+    wxFindReplaceData() {FindWhat = ReplaceWith = 0;};
+    virtual ~wxFindReplaceData();
+
+ public:
+    wxUint32   Flags;
+    char*    FindWhat;
+    char*    ReplaceWith;
+    int      BuffSize;
+};
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceDialog: dialog for searching / replacing text
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxFindReplaceDialog : public wxDialog
+{
+    DECLARE_DYNAMIC_CLASS(wxFindReplaceDialog)
+
+public:
+    wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    wxFindReplaceDialog();
+
+    void Create(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    void SetData(wxFindReplaceData *data) {m_FindReplaceData = data;};
+
+    void UpdateData(wxUint32 lParam);
+
+    virtual ~wxFindReplaceDialog() {if (HWindow) DestroyWindow(HWindow);};
+
+    bool Show(bool show);
+
+    // override some base class virtuals
+    virtual void SetTitle(const wxString& title);
+    virtual wxString GetTitle();
+
+protected:
+    virtual void DoGetSize(int *width, int *height) const;
+    virtual void DoGetClientSize(int *width, int *height) const;
+    virtual void DoSetSize(int x, int y,
+                           int width, int height,
+                           int sizeFlags = wxSIZE_AUTO);
+
+    wxFindReplaceData      *m_FindReplaceData;
+    wxString                m_title;
+    FINDREPLACE             m_Fr;
+    HWND                    HWindow;
+
+};
+
+#endif
+    // _WX_FDREPDLG_H_
diff -rbu2P .\wx2cvs3_org\samples\richedit/fdrepdlg.cpp .\wx2\samples\richedit/fdrepdlg.cpp
--- .\wx2cvs3_org\samples\richedit/fdrepdlg.cpp	Thu Jan  1 01:00:00 1970
+++ .\wx2\samples\richedit/fdrepdlg.cpp	Thu Jan  4 15:02:20 2001
@@ -0,0 +1,241 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/msw/FdRepdlg.cpp
+// Purpose:     wxFindReplaceDialog class
+// Author:      Markus Greither
+// Modified by:
+// Created:     17/12/2000
+// RCS-ID:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#ifdef __GNUG__
+    #pragma implementation "fdrepdlg.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include <stdio.h>
+    #include "wx/defs.h"
+    #include "wx/bitmap.h"
+    #include "wx/pen.h"
+    #include "wx/brush.h"
+    #include "wx/colour.h"
+    #include "wx/gdicmn.h"
+    #include "wx/utils.h"
+    #include "wx/frame.h"
+    #include "wx/dialog.h"
+    #include "wx/msgdlg.h"
+#endif
+
+#include <windows.h>
+
+#if !defined(__WIN32__) || defined(__SALFORDC__) || defined(__WXWINE__)
+    #include <commdlg.h>
+#endif
+
+#include "wx/msw/private.h"
+#include "fdrepdlg.h"
+
+#include <math.h>
+#include <stdlib.h>
+#include <string.h>
+
+static unsigned int message = 0; // registered Message for Dialog
+
+// ----------------------------------------------------------------------------
+// wxWin macros
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxFindReplaceDialog, wxDialog)
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// Window Proc for handling RegisterWindowMessage(FINDMSGSTRING)
+// ----------------------------------------------------------------------------
+
+// Call in the parents MSWWindowProc() before wxWindow::MsWindowProc()
+
+long FindReplaceWindowProc(WXUINT nMsg, WXWPARAM /*wParam*/, WXLPARAM lParam)
+{
+    if (nMsg == message)
+    {
+      FINDREPLACE *pCC = (FINDREPLACE *)lParam;
+      wxFindReplaceDialog *dialog = (wxFindReplaceDialog *)pCC->lCustData;
+
+      dialog->UpdateData(lParam);
+      wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+      dialog->GetParent()->AddPendingEvent(event);
+    }
+    return 0;
+};
+
+// ----------------------------------------------------------------------------
+// FindReplace dialog hook proc
+// ----------------------------------------------------------------------------
+
+UINT CALLBACK wxFindReplaceDialogHookProc(HWND hwnd,
+                                     UINT uiMsg,
+                                     WPARAM /*wParam*/,
+                                     LPARAM lParam)
+{
+    if ( uiMsg == WM_INITDIALOG )
+    {
+        FINDREPLACE *pCC = (FINDREPLACE *)lParam;
+        wxFindReplaceDialog *dialog = (wxFindReplaceDialog *)pCC->lCustData;
+
+        ::SetWindowText(hwnd, dialog->GetTitle());
+    }
+
+    return 0;
+}
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceData
+// ----------------------------------------------------------------------------
+
+wxFindReplaceData::~wxFindReplaceData()
+{
+  if (FindWhat) delete [] FindWhat;
+  if (ReplaceWith) delete [] ReplaceWith;
+}
+
+void wxFindReplaceData::Init(wxUint32 flags, int buffSize)
+{
+  if (FindWhat) delete [] FindWhat;
+  if (ReplaceWith) delete [] ReplaceWith;
+  Flags = flags;
+  BuffSize = buffSize;
+  FindWhat = BuffSize ? new char[BuffSize] : 0;
+  if (FindWhat) FindWhat[0] = 0;
+  ReplaceWith = BuffSize ? new char[BuffSize] : 0;
+  if (ReplaceWith) ReplaceWith[0] = 0;
+}
+
+wxFindReplaceData::wxFindReplaceData(wxUint32 flags, int buffSize)
+{
+  FindWhat = ReplaceWith = 0;
+  Init(flags,buffSize);
+}
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceDialog
+// ----------------------------------------------------------------------------
+
+wxFindReplaceDialog::wxFindReplaceDialog()
+{
+    message = RegisterWindowMessage(FINDMSGSTRING);
+};
+
+
+wxFindReplaceDialog::wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *data,const wxString &title)
+ : m_FindReplaceData(data)
+{
+    message = RegisterWindowMessage(FINDMSGSTRING);
+    Create(parent,data,title);
+};
+
+void wxFindReplaceDialog::Create(wxWindow *parent, wxFindReplaceData *data,const wxString &title)
+{
+    SetTitle(title);
+    m_FindReplaceData = data;
+    HWindow = 0;
+    m_parent = parent;
+}
+
+void wxFindReplaceDialog::UpdateData(wxUint32 lParam)
+{
+  if (lParam)
+    m_FindReplaceData->Flags = ((LPFINDREPLACE)lParam)->Flags;
+  else
+    m_FindReplaceData->Flags = m_Fr.Flags;
+}
+
+bool wxFindReplaceDialog::Show(bool show)
+{
+  if (HWindow)
+  {
+    if (!show) return ::ShowWindow(HWindow,SW_HIDE);
+    else return ::ShowWindow(HWindow,SW_SHOW);
+  }
+  m_Fr.lStructSize = sizeof(FINDREPLACE);
+  m_Fr.hwndOwner = GetHwndOf(m_parent);
+  m_Fr.hInstance = 0;
+  m_Fr.Flags = m_FindReplaceData->Flags | FR_ENABLEHOOK;
+  m_Fr.lpstrFindWhat = m_FindReplaceData->FindWhat;
+  m_Fr.wFindWhatLen = m_FindReplaceData->BuffSize;
+  m_Fr.lpstrReplaceWith = m_FindReplaceData->ReplaceWith;
+  m_Fr.wReplaceWithLen = m_FindReplaceData->BuffSize;
+  m_Fr.lCustData = (LPARAM)this;
+  m_Fr.lpfnHook = wxFindReplaceDialogHookProc;
+  m_Fr.lpTemplateName = 0;
+
+  // Show the Dialog
+  if (m_FindReplaceData->Flags & wxFR_REPLACE) HWindow = ::ReplaceText(&m_Fr);
+  else HWindow = ::FindText(&m_Fr);
+  ::ShowWindow(HWindow,SW_SHOW);
+  return HWindow != 0;
+}
+
+// ----------------------------------------------------------------------------
+// title
+// ----------------------------------------------------------------------------
+
+void wxFindReplaceDialog::SetTitle(const wxString& title)
+{
+    m_title = title;
+}
+
+wxString wxFindReplaceDialog::GetTitle()
+{
+    return m_title;
+}
+
+// ----------------------------------------------------------------------------
+// position/size
+// ----------------------------------------------------------------------------
+
+void wxFindReplaceDialog::DoSetSize(int WXUNUSED(x), int WXUNUSED(y),
+                               int WXUNUSED(width), int WXUNUSED(height),
+                               int WXUNUSED(sizeFlags))
+{
+    // ignore - we can't change the size of this standard dialog
+    return;
+}
+
+// NB: of course, both of these functions are completely bogus, but it's better
+//     than nothing
+void wxFindReplaceDialog::DoGetSize(int *width, int *height) const
+{
+    // the standard dialog size
+    if ( width )
+        *width = 225;
+    if ( height )
+        *height = 324;
+}
+
+void wxFindReplaceDialog::DoGetClientSize(int *width, int *height) const
+{
+    // the standard dialog size
+    if ( width )
+        *width = 219;
+    if ( height )
+        *height = 299;
+}
diff -rbu2P .\wx2cvs3_org\samples\richedit/makefile.b32 .\wx2\samples\richedit/makefile.b32
--- .\wx2cvs3_org\samples\richedit/makefile.b32	Tue Mar 14 12:51:30 2000
+++ .\wx2\samples\richedit/makefile.b32	Sun Mar  4 18:20:56 2001
@@ -11,5 +11,5 @@
 
 TARGET=wxlayout
-OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj
+OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj fdrepdlg.obj
 
 !include $(WXDIR)\src\makeprog.b32
diff -rbu2P .\wx2cvs3_org\samples\richedit/makefile.g95 .\wx2\samples\richedit/makefile.g95
--- .\wx2cvs3_org\samples\richedit/makefile.g95	Sun Jan 16 03:35:28 2000
+++ .\wx2\samples\richedit/makefile.g95	Mon Mar  5 16:34:04 2001
@@ -11,5 +11,5 @@
 
 TARGET=wxLayout
-OBJECTS = $(TARGET).o kbList.o wxllist.o wxlparser.o wxlwindow.o
+OBJECTS = $(TARGET).o kbList.o wxllist.o wxlparser.o wxlwindow.o fdrepdlg.o
 
 include $(WXDIR)/src/makeprog.g95
diff -rbu2P .\wx2cvs3_org\samples\richedit/makefile.vc .\wx2\samples\richedit/makefile.vc
--- .\wx2cvs3_org\samples\richedit/makefile.vc	Thu Jun 10 20:50:10 1999
+++ .\wx2\samples\richedit/makefile.vc	Mon Mar  5 17:41:46 2001
@@ -3,5 +3,5 @@
 # Author:	Julian Smart
 # Created:	1999
-# Updated:
+# Updated:            03/05/2001 Markus Greither
 # Copyright:	(c) Julian Smart
 #
@@ -13,5 +13,5 @@
 
 PROGRAM=wxLayout
-OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj
+OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj fdrepdlg.obj
 
 !include $(WXDIR)\src\makeprog.vc
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxLayout.cpp .\wx2\samples\richedit/wxLayout.cpp
--- .\wx2cvs3_org\samples\richedit/wxLayout.cpp	Sat Jan 15 22:45:30 2000
+++ .\wx2\samples\richedit/wxLayout.cpp	Mon Mar  5 18:05:12 2001
@@ -17,4 +17,15 @@
 #endif
 
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#endif
+
+#if defined(__WXMSW__) && !defined(M_BASEDIR)
+
+#include <windows.h>
+#include "fdrepdlg.h"
+
+#endif
+
 #include "wxLayout.h"
 #include <wx/textfile.h>
@@ -69,4 +80,7 @@
    wxFrame( (wxFrame *) NULL, -1, "wxLayout",
              wxPoint(880,100), wxSize(256,256) )
+#if defined(__WXMSW__) && !defined(M_BASEDIR)
+  ,SearchData(wxFR_DOWN,82) // initialize search data structure
+#endif
 {
    CreateStatusBar( 2 );
@@ -152,4 +166,10 @@
    m_lwin->SetBackgroundBitmap(bitmap);
 #endif // 0
+
+#if defined(__WXMSW__) && !defined(M_BASEDIR)
+
+  SearchDialog = 0;
+
+#endif
 };
 
@@ -249,4 +269,46 @@
 }
 
+#if defined(__WXMSW__) && !defined(M_BASEDIR)
+
+// Open/use wxFindReplaceDialog for text search
+void MyFrame::EditFindReplace(bool Replace)
+{
+  if (SearchDialog)
+  { // Dialog already created
+    if (SearchData.Flags & wxFR_DIALOGTERM)
+    { // MSW Dialog terminated (e. g. closed), so delete wxDialog
+      delete SearchDialog;
+      SearchDialog = 0;
+    }
+    else // Do the search of current search string
+    {
+      if (!m_lwin->FindExt(SearchData.FindWhat,
+                           SearchData.Flags & wxFR_DOWN,
+                           !(SearchData.Flags & wxFR_MATCHCASE)))
+      {
+        wxMessageBox(_("String not found !"),"String Search");
+      }
+    }
+  }
+  else
+  { // Dialog not open, so open
+    if (Replace) SearchData.Flags |= wxFR_REPLACE;
+    else SearchData.Flags &= ~wxFR_REPLACE;
+    SearchData.Flags |= FR_NOWHOLEWORD; // disable whole word search
+    SearchData.Flags &= ~wxFR_DIALOGTERM; // delete flag, in case of previously open dialog
+    SearchDialog = new wxFindReplaceDialog(this, &SearchData,
+                                           Replace ? _("Replace Text") : _("Search Text"));
+    SearchDialog->Show(true);
+  }
+}
+
+long MyFrame::MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
+{ // execute the Find/Replace window proc before frame, in order to handle registered message
+  FindReplaceWindowProc(nMsg,wParam,lParam);
+  return wxFrame::MSWWindowProc(nMsg,wParam,lParam);
+}
+
+#endif //ifdef wxMSW
+
 void
 MyFrame::Clear(void)
@@ -316,4 +378,10 @@
    case ID_FIND:
       m_lwin->Find("void");
+      m_lwin->Refresh(FALSE);
+      break;
+#elif defined(__WXMSW__)
+  case ID_FIND:
+  case wxID_FIND:
+      EditFindReplace(false);
       m_lwin->Refresh(FALSE);
       break;
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxLayout.h .\wx2\samples\richedit/wxLayout.h
--- .\wx2cvs3_org\samples\richedit/wxLayout.h	Thu Jun 17 19:29:18 1999
+++ .\wx2\samples\richedit/wxLayout.h	Sun Mar  4 18:18:18 2001
@@ -29,4 +29,16 @@
   DECLARE_DYNAMIC_CLASS(MyFrame)
 
+#if defined(__WXMSW__) && !defined(M_BASEDIR)
+
+   void EditFindReplace(bool Replace);
+
+   wxFindReplaceData SearchData; // Data structure for find/replace dialog
+   wxFindReplaceDialog* SearchDialog;  // Find or replace dialog
+
+   ~MyFrame() {delete SearchDialog;};
+
+   long MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
+#endif
+
   public:
   
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxllist.cpp .\wx2\samples\richedit/wxllist.cpp
--- .\wx2cvs3_org\samples\richedit/wxllist.cpp	Sat Jul 15 22:50:22 2000
+++ .\wx2\samples\richedit/wxllist.cpp	Mon Mar  5 18:05:38 2001
@@ -55,4 +55,5 @@
 #endif
 
+
 #ifdef WXLAYOUT_USE_CARET
 #   include <wx/caret.h>
@@ -807,8 +808,102 @@
     @param needle the text to find
     @param xpos the position where to start the search
+    @param down and ignorecase are search options
+    @return the cursoor coord where it was found or -1
+*/
+CoordType
+wxLayoutLine::FindStringOpt(const wxString &needle, CoordType xpos,bool down,bool ignorecase) const
+{
+   int cpos = 0,relpos = -1;
+   wxString const *text;
+   wxString searchtext = needle;
+
+   if (ignorecase) searchtext.MakeLower();
+   if (down)
+   {
+     for(wxLOiterator i = m_ObjectList.begin(); i != m_ObjectList.end(); i++)
+     {
+        if(cpos >= xpos) // search from here!
+        {
+           if((**i).GetType() == WXLO_TYPE_TEXT)
+           {
+              text = & ((wxLayoutObjectText*)(*i))->GetText();
+              wxString str = *text;
+              if (ignorecase)
+              {
+                 str.MakeLower();
+                 relpos = str.Find(searchtext);
+              }
+              else
+                 relpos = str.Find(searchtext);
+              if(relpos >= cpos-xpos) // -1 if not found
+              {
+                 return cpos+relpos;
+              }
+           }
+           cpos += (**i).GetLength();
+        }
+     }
+   }
+   else
+   { // upward search
+     wxLOiterator f = m_ObjectList.begin();
+     while (f != m_ObjectList.end())
+     { // calculate character count
+        if((**f).GetType() == WXLO_TYPE_TEXT)
+          cpos += (**f).GetLength();
+        f++;
+     }
+     wxLOiterator i = m_ObjectList.begin();
+     wxLOiterator tmp = i;
+     do
+     {
+       tmp++;
+       if (tmp != m_ObjectList.end()) i = tmp;
+     }
+     while (tmp != m_ObjectList.end());
+     bool finished = false;
+     if (i != m_ObjectList.end())
+     do
+     { // calculate character count
+        if(cpos <= xpos) // search from here!
+        {
+           cpos -= (**i).GetLength();
+           if((**i).GetType() == WXLO_TYPE_TEXT)
+           {
+              text = & ((wxLayoutObjectText*)(*i))->GetText();
+              wxString str = *text;
+              if (ignorecase)
+              {
+                 str.MakeLower();
+                 relpos = str.Find(searchtext);
+              }
+              else
+                relpos = str.Find(searchtext.c_str()[0],true);
+              if (relpos != -1)
+              {
+                wxString tmp = &str.c_str()[relpos];
+                int pos = tmp.Find(searchtext);
+                if (pos) relpos = -1; // only accept searchtext at pos 0
+              }
+              if((relpos != -1) && (relpos >= cpos-xpos)) // -1 if not found
+              {
+                 return cpos+relpos;
+              }
+           }
+        }
+        if (i != m_ObjectList.begin()) i--;
+        else finished = true;
+     }
+     while (!finished);
+   }
+   return -1; // not found
+}
+/** Finds text in this line.
+    @param needle the text to find
+    @param xpos the position where to start the search
     @return the cursoor coord where it was found or -1
 */
 CoordType
-wxLayoutLine::FindText(const wxString &needle, CoordType xpos) const
+wxLayoutLine::FindString(const wxString &needle, CoordType xpos) const
 {
    int
@@ -1799,5 +1894,5 @@
 
 wxPoint
-wxLayoutList::FindText(const wxString &needle, const wxPoint &cpos) const
+wxLayoutList::FindString(const wxString &needle, const wxPoint &cpos) const
 {
    int xpos;
@@ -1810,7 +1905,33 @@
       if(line->GetLineNumber() >= cpos.y)
       {
-         xpos = line->FindText(needle,
+         xpos = line->FindString(needle,
                                (line->GetLineNumber() == cpos.y) ?
                                cpos.x : 0);
+         if(xpos != -1)
+            return wxPoint(xpos, line->GetLineNumber());
+      }
+   }
+   return wxPoint(-1,-1);
+}
+
+wxPoint
+wxLayoutList::FindStringOpt(const wxString &needle, const wxPoint &cpos,bool down,bool ignorecase) const
+{
+   int xpos;
+
+   wxLayoutLine *line;
+   wxLayoutLine *tmp = m_FirstLine;
+   if (!down)
+     while (tmp->GetNextLine()) tmp = tmp->GetNextLine();
+
+   for(line = tmp;
+       line;
+       down ? line = line->GetNextLine() : line = line->GetPreviousLine())
+   {
+      if(down ? line->GetLineNumber() >= cpos.y : line->GetLineNumber() <= cpos.y)
+      {
+         xpos = line->FindStringOpt(needle,
+                                  (line->GetLineNumber() == cpos.y) ?
+                                  cpos.x : down ? 0 : line->GetLength(),down,ignorecase);
          if(xpos != -1)
             return wxPoint(xpos, line->GetLineNumber());
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxllist.h .\wx2\samples\richedit/wxllist.h
--- .\wx2cvs3_org\samples\richedit/wxllist.h	Sat Jul 15 22:50:22 2000
+++ .\wx2\samples\richedit/wxllist.h	Mon Mar  5 17:53:30 2001
@@ -584,5 +584,7 @@
        @return the cursoor coord where it was found or -1
    */
-   CoordType FindText(const wxString &needle, CoordType xpos = 0) const;
+   CoordType FindString(const wxString &needle, CoordType xpos = 0) const;
+
+   CoordType FindStringOpt(const wxString &needle, CoordType xpos = 0,bool down = true,bool ignorecase = false) const;
 
    /** Get the first object in the list. This is used by the wxlparser
@@ -937,5 +939,7 @@
        @return the cursor coord where it was found or (-1,-1)
    */
-   wxPoint FindText(const wxString &needle, const wxPoint &cpos = wxPoint(0,0)) const;
+   wxPoint FindString(const wxString &needle, const wxPoint &cpos = wxPoint(0,0)) const;
+
+   wxPoint FindStringOpt(const wxString &needle, const wxPoint &cpos = wxPoint(0,0),bool down = true,bool ignorecase = false) const;
 
    /**@name Formatting options */
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxlwindow.cpp .\wx2\samples\richedit/wxlwindow.cpp
--- .\wx2cvs3_org\samples\richedit/wxlwindow.cpp	Sat Jul 15 22:50:22 2000
+++ .\wx2\samples\richedit/wxlwindow.cpp	Mon Mar  5 18:05:20 2001
@@ -25,4 +25,8 @@
 #endif
 
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#endif
+
 #include "Mpch.h"
 
@@ -1265,6 +1269,6 @@
                      const wxString &configPath)
 {
-#ifdef M_BASEDIR
    wxPoint found;
+#ifdef M_BASEDIR
    
    if(needle.Length() == 0)
@@ -1281,8 +1285,11 @@
       m_FindString = needle;
    
+#elif defined(__WXMSW__)
+   m_FindString = needle;
+#endif
    if(fromWhere == NULL)
-      found = m_llist->FindText(m_FindString, m_llist->GetCursorPos());
+      found = m_llist->FindString(m_FindString, m_llist->GetCursorPos());
    else
-      found = m_llist->FindText(m_FindString, *fromWhere);
+      found = m_llist->FindString(m_FindString, *fromWhere);
    if(found.x != -1)
    {
@@ -1297,8 +1304,24 @@
       return true;
    }
-#endif
    return false;
 }
 
+
+bool
+wxLayoutWindow::FindExt(const wxString &needle,bool down,bool ignorecase)
+{
+   wxPoint found;
+   m_FindString = needle;
+   found = m_llist->FindStringOpt(m_FindString, m_llist->GetCursorPos(),down,ignorecase);
+   if(found.x != -1)
+   {
+      m_llist->MoveCursorTo(found);
+      ScrollToCursor();
+      RequestUpdate();
+      SetFocus();
+      return true;
+   }
+   return false;
+}
 
 bool
diff -rbu2P .\wx2cvs3_org\samples\richedit/wxlwindow.h .\wx2\samples\richedit/wxlwindow.h
--- .\wx2cvs3_org\samples\richedit/wxlwindow.h	Sat Jul 15 22:50:22 2000
+++ .\wx2\samples\richedit/wxlwindow.h	Mon Mar  5 14:24:50 2001
@@ -109,4 +109,8 @@
              wxPoint * fromWhere = NULL,
              const wxString &configPath = "MsgViewFindString");
+
+   /// find with additional options
+   bool FindExt(const wxString &needle,bool down = true,bool ignorecase = false);
+
    /// find the same string again
    bool FindAgain(void);

 	  	 

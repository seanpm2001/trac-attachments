diff -ur ../wxWidgets/include/wx/gtk/control.h ./include/wx/gtk/control.h
--- ../wxWidgets/include/wx/gtk/control.h	2004-06-21 15:58:10.000000000 -0700
+++ ./include/wx/gtk/control.h	2005-03-05 10:04:24.000000000 -0800
@@ -29,6 +29,13 @@
 // wxControl
 //-----------------------------------------------------------------------------
 
+// C-linkage function pointer types for GetDefaultAttributesFromGTKWidget
+extern "C" {
+    typedef GtkWidget* (*wxControl_C_fp_void)(void);
+    typedef GtkWidget* (*wxControl_C_fp_gchar)(const gchar*);
+    typedef GtkWidget* (*wxControl_C_fp_GtkAdjustment)(GtkAdjustment*);
+}
+
 class wxControl : public wxControlBase
 {
 public:
@@ -69,16 +76,16 @@
                                           bool useBase = false,
                                           int state = -1);
     static wxVisualAttributes
-        GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(void),
+        GetDefaultAttributesFromGTKWidget(wxControl_C_fp_void,
                                           bool useBase = false,
                                           int state = -1);
     static wxVisualAttributes
-        GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(const gchar*),
+        GetDefaultAttributesFromGTKWidget(wxControl_C_fp_gchar,
                                           bool useBase = false,
                                           int state = -1);
 
     static wxVisualAttributes
-        GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(GtkAdjustment*),
+        GetDefaultAttributesFromGTKWidget(wxControl_C_fp_GtkAdjustment,
                                           bool useBase = false,
                                           int state = -1);
 
diff -ur ../wxWidgets/src/gtk/bmpbuttn.cpp ./src/gtk/bmpbuttn.cpp
--- ../wxWidgets/src/gtk/bmpbuttn.cpp	2005-02-08 18:56:38.000000000 -0800
+++ ./src/gtk/bmpbuttn.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -45,6 +45,7 @@
 // "clicked"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_bmpbutton_clicked_callback( GtkWidget *WXUNUSED(widget), wxBitmapButton *button )
 {
     if (g_isIdle)
@@ -57,11 +58,13 @@
     event.SetEventObject(button);
     button->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "enter"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_bmpbutton_enter_callback( GtkWidget *WXUNUSED(widget), wxBitmapButton *button )
 {
     if (!button->m_hasVMT) return;
@@ -69,11 +72,13 @@
 
     button->HasFocus();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "leave"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_bmpbutton_leave_callback( GtkWidget *WXUNUSED(widget), wxBitmapButton *button )
 {
     if (!button->m_hasVMT) return;
@@ -81,11 +86,13 @@
 
     button->NotFocus();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "pressed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_bmpbutton_press_callback( GtkWidget *WXUNUSED(widget), wxBitmapButton *button )
 {
     if (!button->m_hasVMT) return;
@@ -93,11 +100,13 @@
 
     button->StartSelect();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "released"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_bmpbutton_release_callback( GtkWidget *WXUNUSED(widget), wxBitmapButton *button )
 {
     if (!button->m_hasVMT) return;
@@ -105,6 +114,7 @@
 
     button->EndSelect();
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxBitmapButton
diff -ur ../wxWidgets/src/gtk/button.cpp ./src/gtk/button.cpp
--- ../wxWidgets/src/gtk/button.cpp	2005-03-05 09:11:22.000000000 -0800
+++ ./src/gtk/button.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -46,6 +46,7 @@
 // "clicked"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_button_clicked_callback( GtkWidget *WXUNUSED(widget), wxButton *button )
 {
     if (g_isIdle)
@@ -58,6 +59,7 @@
     event.SetEventObject(button);
     button->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "style_set" from m_widget
diff -ur ../wxWidgets/src/gtk/checkbox.cpp ./src/gtk/checkbox.cpp
--- ../wxWidgets/src/gtk/checkbox.cpp	2004-06-26 08:52:24.000000000 -0700
+++ ./src/gtk/checkbox.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -42,6 +42,7 @@
 // "clicked"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_checkbox_toggled_callback(GtkWidget *widget, wxCheckBox *cb)
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -109,6 +110,7 @@
     event.SetEventObject(cb);
     cb->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxCheckBox
diff -ur ../wxWidgets/src/gtk/choice.cpp ./src/gtk/choice.cpp
--- ../wxWidgets/src/gtk/choice.cpp	2005-02-08 18:56:38.000000000 -0800
+++ ./src/gtk/choice.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -38,6 +38,7 @@
 // "activate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_choice_clicked_callback( GtkWidget *WXUNUSED(widget), wxChoice *choice )
 {
     if (g_isIdle)
@@ -84,6 +85,7 @@
 
     choice->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxChoice
diff -ur ../wxWidgets/src/gtk/clipbrd.cpp ./src/gtk/clipbrd.cpp
--- ../wxWidgets/src/gtk/clipbrd.cpp	2004-06-10 12:37:03.000000000 -0700
+++ ./src/gtk/clipbrd.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -78,6 +78,7 @@
 // "selection_received" for targets
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 targets_selection_received( GtkWidget *WXUNUSED(widget),
                             GtkSelectionData *selection_data,
@@ -133,11 +134,13 @@
 
     clipboard->m_waiting = FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "selection_received" for the actual data
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 selection_received( GtkWidget *WXUNUSED(widget),
                     GtkSelectionData *selection_data,
@@ -189,11 +192,13 @@
     wxTheClipboard->m_formatSupported = TRUE;
     clipboard->m_waiting = FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "selection_clear"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 selection_clear_clip( GtkWidget *WXUNUSED(widget), GdkEventSelection *event )
 {
@@ -230,11 +235,13 @@
     wxTheClipboard->m_waiting = FALSE;
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // selection handler for supplying data
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 selection_handler( GtkWidget *WXUNUSED(widget),
                    GtkSelectionData *selection_data,
@@ -295,6 +302,7 @@
 
     free(d);
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxClipboard
diff -ur ../wxWidgets/src/gtk/combobox.cpp ./src/gtk/combobox.cpp
--- ../wxWidgets/src/gtk/combobox.cpp	2005-03-01 13:36:52.000000000 -0800
+++ ./src/gtk/combobox.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -44,6 +44,7 @@
 //              if it doesn't match an item then just get a single changed
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_text_changed_callback( GtkWidget *WXUNUSED(widget), wxComboBox *combo )
 {
@@ -62,12 +63,16 @@
     event.SetEventObject( combo );
     combo->GetEventHandler()->ProcessEvent( event );
 }
+}
 
+extern "C" {
 static void
 gtk_dummy_callback(GtkEntry *WXUNUSED(entry), GtkCombo *WXUNUSED(combo))
 {
 }
+}
 
+extern "C" {
 static void
 gtk_popup_hide_callback(GtkCombo *WXUNUSED(gtk_combo), wxComboBox *combo)
 {
@@ -86,7 +91,9 @@
     // reset the selection flag to an identifiable value (-2 = hidden)
     g_SelectionBeforePopup = -2;
 }
+}
 
+extern "C" {
 static void
 gtk_popup_show_callback(GtkCombo *WXUNUSED(gtk_combo), wxComboBox *combo)
 {
@@ -94,11 +101,13 @@
   // if there is no selection, combo->GetSelection() returns -1
     g_SelectionBeforePopup = combo->GetSelection();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "select-child" - click/cursor get select-child, changed, select-child
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_combo_select_child_callback( GtkList *WXUNUSED(list), GtkWidget *WXUNUSED(widget), wxComboBox *combo )
 {
@@ -146,6 +155,7 @@
     event2.SetEventObject( combo );
     combo->GetEventHandler()->ProcessEvent( event2 );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxComboBox
diff -ur ../wxWidgets/src/gtk/control.cpp ./src/gtk/control.cpp
--- ../wxWidgets/src/gtk/control.cpp	2004-08-15 09:03:06.000000000 -0700
+++ ./src/gtk/control.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -231,7 +231,7 @@
 
 //static
 wxVisualAttributes
-wxControl::GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(void),
+wxControl::GetDefaultAttributesFromGTKWidget(wxControl_C_fp_void widget_new,
                                              bool useBase,
                                              int state)
 {
@@ -247,7 +247,7 @@
 
 //static
 wxVisualAttributes
-wxControl::GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(const gchar*),
+wxControl::GetDefaultAttributesFromGTKWidget(wxControl_C_fp_gchar widget_new,
                                              bool useBase,
                                              int state)
 {
@@ -264,7 +264,7 @@
 
 //static
 wxVisualAttributes
-wxControl::GetDefaultAttributesFromGTKWidget(GtkWidget* (*widget_new)(GtkAdjustment*),
+wxControl::GetDefaultAttributesFromGTKWidget(wxControl_C_fp_GtkAdjustment widget_new,
                                              bool useBase,
                                              int state)
 {
diff -ur ../wxWidgets/src/gtk/dnd.cpp ./src/gtk/dnd.cpp
--- ../wxWidgets/src/gtk/dnd.cpp	2005-01-17 12:09:39.000000000 -0800
+++ ./src/gtk/dnd.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -139,6 +139,7 @@
 // "drag_leave"
 // ----------------------------------------------------------------------------
 
+extern "C" {
 static void target_drag_leave( GtkWidget *WXUNUSED(widget),
                                GdkDragContext *context,
                                guint WXUNUSED(time),
@@ -160,11 +161,13 @@
     /* after this, invalidate the drop_target's GdkDragContext */
     drop_target->SetDragContext( (GdkDragContext*) NULL );
 }
+}
 
 // ----------------------------------------------------------------------------
 // "drag_motion"
 // ----------------------------------------------------------------------------
 
+extern "C" {
 static gboolean target_drag_motion( GtkWidget *WXUNUSED(widget),
                                     GdkDragContext *context,
                                     gint x,
@@ -240,11 +243,13 @@
 
     return ret;
 }
+}
 
 // ----------------------------------------------------------------------------
 // "drag_drop"
 // ----------------------------------------------------------------------------
 
+extern "C" {
 static gboolean target_drag_drop( GtkWidget *widget,
                                   GdkDragContext *context,
                                   gint x,
@@ -339,11 +344,13 @@
 
     return ret;
 }
+}
 
 // ----------------------------------------------------------------------------
 // "drag_data_received"
 // ----------------------------------------------------------------------------
 
+extern "C" {
 static void target_drag_data_received( GtkWidget *WXUNUSED(widget),
                                        GdkDragContext *context,
                                        gint x,
@@ -393,6 +400,7 @@
     /* after this, invalidate the drop_target's drag data */
     drop_target->SetDragData( (GtkSelectionData*) NULL );
 }
+}
 
 //----------------------------------------------------------------------------
 // wxDropTarget
@@ -545,6 +553,7 @@
 // "drag_data_get"
 //----------------------------------------------------------------------------
 
+extern "C" {
 static void
 source_drag_data_get  (GtkWidget          *WXUNUSED(widget),
                        GdkDragContext     *WXUNUSED(context),
@@ -610,11 +619,13 @@
 
     delete[] d;
 }
+}
 
 //----------------------------------------------------------------------------
 // "drag_data_delete"
 //----------------------------------------------------------------------------
 
+extern "C" {
 static void source_drag_data_delete( GtkWidget *WXUNUSED(widget),
                                      GdkDragContext *context,
                                      wxDropSource *WXUNUSED(drop_source) )
@@ -624,11 +635,13 @@
 
     // printf( "Drag source: drag_data_delete\n" );
 }
+}
 
 //----------------------------------------------------------------------------
 // "drag_begin"
 //----------------------------------------------------------------------------
 
+extern "C" {
 static void source_drag_begin( GtkWidget          *WXUNUSED(widget),
                                GdkDragContext     *WXUNUSED(context),
                                wxDropSource       *WXUNUSED(drop_source) )
@@ -638,11 +651,13 @@
 
     // printf( "Drag source: drag_begin.\n" );
 }
+}
 
 //----------------------------------------------------------------------------
 // "drag_end"
 //----------------------------------------------------------------------------
 
+extern "C" {
 static void source_drag_end( GtkWidget          *WXUNUSED(widget),
                              GdkDragContext     *WXUNUSED(context),
                              wxDropSource       *drop_source )
@@ -653,11 +668,13 @@
 
     drop_source->m_waiting = FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "configure_event" from m_iconWindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_dnd_window_configure_callback( GtkWidget *WXUNUSED(widget), GdkEventConfigure *WXUNUSED(event), wxDropSource *source )
 {
@@ -668,6 +685,7 @@
 
     return 0;
 }
+}
 
 //---------------------------------------------------------------------------
 // wxDropSource
diff -ur ../wxWidgets/src/gtk/filedlg.cpp ./src/gtk/filedlg.cpp
--- ../wxWidgets/src/gtk/filedlg.cpp	2005-01-03 11:48:35.000000000 -0800
+++ ./src/gtk/filedlg.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -38,6 +38,7 @@
 // "clicked" for OK-button
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_filedialog_ok_callback(GtkWidget *widget, wxFileDialog *dialog)
 {
     int style = dialog->GetStyle();
@@ -91,11 +92,13 @@
     event.SetEventObject(dialog);
     dialog->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "clicked" for Cancel-button
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_filedialog_cancel_callback(GtkWidget *WXUNUSED(w),
                                            wxFileDialog *dialog)
 {
@@ -103,7 +106,9 @@
     event.SetEventObject(dialog);
     dialog->GetEventHandler()->ProcessEvent(event);
 }
+}
 
+extern "C" {
 static void gtk_filedialog_response_callback(GtkWidget *w,
                                              int response,
                                              wxFileDialog *dialog)
@@ -120,7 +125,9 @@
         dialog->m_destroyed_by_delete = TRUE;
     }
 }
-#endif
+}
+
+#endif // __WXGTK24__
 
 //-----------------------------------------------------------------------------
 // wxFileDialog
@@ -160,7 +167,7 @@
         if (parent)
             gtk_parent = GTK_WINDOW(parent->m_widget);
     
-        gchar* ok_btn_stock;
+        const gchar* ok_btn_stock;
         if ((style & wxSAVE) == wxSAVE)
         {
             gtk_action = GTK_FILE_CHOOSER_ACTION_SAVE;
diff -ur ../wxWidgets/src/gtk/fontdlg.cpp ./src/gtk/fontdlg.cpp
--- ../wxWidgets/src/gtk/fontdlg.cpp	2004-11-05 10:23:38.000000000 -0800
+++ ./src/gtk/fontdlg.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -40,6 +40,7 @@
 // "delete_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static
 bool gtk_fontdialog_delete_callback( GtkWidget *WXUNUSED(widget), GdkEvent *WXUNUSED(event), wxDialog *win )
 {
@@ -57,11 +58,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "clicked" for OK-button
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static
 void gtk_fontdialog_ok_callback( GtkWidget *WXUNUSED(widget), wxFontDialog *dialog )
 {
@@ -90,11 +93,13 @@
     event.SetEventObject( dialog );
     dialog->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "clicked" for Cancel-button
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static
 void gtk_fontdialog_cancel_callback( GtkWidget *WXUNUSED(w), wxFontDialog *dialog )
 {
@@ -105,6 +110,7 @@
     event.SetEventObject( dialog );
     dialog->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxFontDialog
diff -ur ../wxWidgets/src/gtk/frame.cpp ./src/gtk/frame.cpp
--- ../wxWidgets/src/gtk/frame.cpp	2004-11-05 10:23:38.000000000 -0800
+++ ./src/gtk/frame.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -80,6 +80,7 @@
 // "child_attached" of menu bar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_attached_callback( GtkWidget *WXUNUSED(widget), GtkWidget *WXUNUSED(child), wxFrame *win )
 {
     if (!win->m_hasVMT) return;
@@ -87,11 +88,13 @@
     win->m_menuBarDetached = FALSE;
     win->GtkUpdateSize();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "child_detached" of menu bar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_detached_callback( GtkWidget *WXUNUSED(widget), GtkWidget *WXUNUSED(child), wxFrame *win )
 {
     if (g_isIdle)
@@ -105,6 +108,7 @@
     win->m_menuBarDetached = TRUE;
     win->GtkUpdateSize();
 }
+}
 
 #endif // wxUSE_MENUS_NATIVE
 
@@ -113,6 +117,7 @@
 // "child_attached" of tool bar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_toolbar_attached_callback( GtkWidget *WXUNUSED(widget), GtkWidget *WXUNUSED(child), wxFrame *win )
 {
     if (!win->m_hasVMT) return;
@@ -120,11 +125,13 @@
     win->m_toolBarDetached = FALSE;
     win->GtkUpdateSize();
 }
+}
 
 //-----------------------------------------------------------------------------
 // "child_detached" of tool bar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_toolbar_detached_callback( GtkWidget *WXUNUSED(widget), GtkWidget *WXUNUSED(child), wxFrame *win )
 {
     if (g_isIdle)
@@ -138,6 +145,7 @@
     win->m_toolBarDetached = TRUE;
     win->GtkUpdateSize();
 }
+}
 #endif // wxUSE_TOOLBAR
 
 
diff -ur ../wxWidgets/src/gtk/glcanvas.cpp ./src/gtk/glcanvas.cpp
--- ../wxWidgets/src/gtk/glcanvas.cpp	2005-03-01 13:36:52.000000000 -0800
+++ ./src/gtk/glcanvas.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -157,6 +157,7 @@
 // "realize" from m_wxwindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_glwindow_realized_callback( GtkWidget * WXUNUSED(widget), wxGLCanvas *win )
 {
@@ -171,11 +172,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "map" from m_wxwindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_glwindow_map_callback( GtkWidget * WXUNUSED(widget), wxGLCanvas *win )
 {
@@ -191,11 +194,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "expose_event" of m_wxwindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_glwindow_expose_callback( GtkWidget *WXUNUSED(widget), GdkEventExpose *gdk_event, wxGLCanvas *win )
 {
@@ -209,12 +214,14 @@
                                   gdk_event->area.width,
                                   gdk_event->area.height );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "draw" of m_wxwindow
 //-----------------------------------------------------------------------------
 
 #ifndef __WXGTK20__
+extern "C" {
 static void
 gtk_glwindow_draw_callback( GtkWidget *WXUNUSED(widget), GdkRectangle *rect, wxGLCanvas *win )
 {
@@ -226,12 +233,14 @@
     win->GetUpdateRegion().Union( rect->x, rect->y,
                                   rect->width, rect->height );
 }
+}
 #endif
 
 //-----------------------------------------------------------------------------
 // "size_allocate" of m_wxwindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_glcanvas_size_callback( GtkWidget *WXUNUSED(widget), GtkAllocation* alloc, wxGLCanvas *win )
 {
@@ -245,6 +254,7 @@
     event.SetEventObject( win );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //---------------------------------------------------------------------------
 // wxGlCanvas
diff -ur ../wxWidgets/src/gtk/gsockgtk.cpp ./src/gtk/gsockgtk.cpp
--- ../wxWidgets/src/gtk/gsockgtk.cpp	2004-08-03 20:04:46.000000000 -0700
+++ ./src/gtk/gsockgtk.cpp	2005-03-05 10:04:24.000000000 -0800
@@ -21,6 +21,8 @@
 #include "wx/unix/gsockunx.h"
 
 
+extern "C" {
+static
 void _GSocket_GDK_Input(gpointer data,
                         gint source,
                         GdkInputCondition condition)
@@ -32,6 +34,7 @@
   if (condition & GDK_INPUT_WRITE)
     socket->Detected_Write();
 }
+}
 
 bool GSocketGUIFunctionsTableConcrete::CanUseEventLoop()
 {   return true; }
diff -ur ../wxWidgets/src/gtk/listbox.cpp ./src/gtk/listbox.cpp
--- ../wxWidgets/src/gtk/listbox.cpp	2005-02-25 22:58:19.000000000 -0800
+++ ./src/gtk/listbox.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -67,7 +67,8 @@
     gint         m_tag;
 };
 
-extern "C" gint wxlistbox_idle_callback( gpointer gdata )
+extern "C" {
+static gint wxlistbox_idle_callback( gpointer gdata )
 {
     wxlistbox_idle_struct* data = (wxlistbox_idle_struct*) gdata;
     gdk_threads_enter();
@@ -88,11 +89,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus_in_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_listitem_focus_in_callback( GtkWidget *widget,
                                           GdkEvent *WXUNUSED(event),
                                           wxWindow *win )
@@ -120,11 +123,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus_out_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_listitem_focus_out_callback( GtkWidget *widget, GdkEventFocus *gdk_event, wxWindowGTK *win )
 {
     if (g_isIdle)
@@ -150,6 +155,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event"
@@ -161,6 +167,7 @@
    this can lead to race conditions so that we emit the dclick event
    after the GDK_BUTTON_RELEASE event after the GDK_2BUTTON_PRESS event */
 
+extern "C" {
 static gint
 gtk_listbox_button_release_callback( GtkWidget * WXUNUSED(widget),
                                      GdkEventButton * WXUNUSED(gdk_event),
@@ -200,11 +207,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_press_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_listbox_button_press_callback( GtkWidget *widget,
                                    GdkEventButton *gdk_event,
@@ -254,11 +263,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "key_press_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_listbox_key_press_callback( GtkWidget *widget, GdkEventKey *gdk_event, wxListBox *listbox )
 {
@@ -349,23 +360,12 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "select" and "deselect"
 //-----------------------------------------------------------------------------
 
-static void gtk_listitem_select_cb( GtkWidget *widget, wxListBox *listbox, bool is_selection );
-
-static void gtk_listitem_select_callback( GtkWidget *widget, wxListBox *listbox )
-{
-    gtk_listitem_select_cb( widget, listbox, TRUE );
-}
-
-static void gtk_listitem_deselect_callback( GtkWidget *widget, wxListBox *listbox )
-{
-    gtk_listitem_select_cb( widget, listbox, FALSE );
-}
-
 static void gtk_listitem_select_cb( GtkWidget *widget,
                                     wxListBox *listbox,
                                     bool is_selection )
@@ -416,10 +416,25 @@
     listbox->GetEventHandler()->ProcessEvent( event );
 }
 
+extern "C" {
+static void gtk_listitem_select_callback( GtkWidget *widget, wxListBox *listbox )
+{
+    gtk_listitem_select_cb( widget, listbox, TRUE );
+}
+}
+
+extern "C" {
+static void gtk_listitem_deselect_callback( GtkWidget *widget, wxListBox *listbox )
+{
+    gtk_listitem_select_cb( widget, listbox, FALSE );
+}
+}
+
 //-----------------------------------------------------------------------------
 // wxListBox
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_listbox_realized_callback( GtkWidget *m_widget, wxListBox *win )
 {
@@ -432,6 +447,7 @@
     
     return false;
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxListBox
diff -ur ../wxWidgets/src/gtk/mdi.cpp ./src/gtk/mdi.cpp
--- ../wxWidgets/src/gtk/mdi.cpp	2004-10-27 18:59:08.000000000 -0700
+++ ./src/gtk/mdi.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -52,6 +52,7 @@
 // "switch_page"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_mdi_page_change_callback( GtkNotebook *WXUNUSED(widget),
                               GtkNotebookPage *page,
@@ -104,6 +105,7 @@
     event2.SetEventObject( child);
     child->GetEventHandler()->ProcessEvent( event2 );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxMDIParentFrame
@@ -435,6 +437,7 @@
 // "size_allocate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_page_size_callback( GtkWidget *WXUNUSED(widget), GtkAllocation* alloc, wxWindow *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -450,6 +453,7 @@
 
     win->SetSize( alloc->x, alloc->y, alloc->width, alloc->height );
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild callback for wxMDIClientWindow
diff -ur ../wxWidgets/src/gtk/menu.cpp ./src/gtk/menu.cpp
--- ../wxWidgets/src/gtk/menu.cpp	2004-11-05 10:23:38.000000000 -0800
+++ ./src/gtk/menu.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -96,12 +96,14 @@
     guint have_pixmap_count;
 };
 
-
+extern "C" {
 GtkType    gtk_pixmap_menu_item_get_type       (void);
 GtkWidget* gtk_pixmap_menu_item_new            (void);
 void       gtk_pixmap_menu_item_set_pixmap     (GtkPixmapMenuItem *menu_item,
-                                                                    GtkWidget *pixmap);
-#endif // GTK 2.0
+                                                GtkWidget *pixmap);
+}
+
+#endif // !__WXGTK20__
 
 //-----------------------------------------------------------------------------
 // idle system
@@ -149,6 +151,7 @@
 // activate message from GTK
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_open_callback( GtkWidget *widget, wxMenu *menu )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -163,6 +166,7 @@
     wxWindow *win = menu->GetInvokingWindow();
     if (win) win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxMenuBar
@@ -589,6 +593,7 @@
 // "activate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_clicked_callback( GtkWidget *widget, wxMenu *menu )
 {
     if (g_isIdle)
@@ -659,11 +664,13 @@
         menu->SendEvent(id, item->IsCheckable() ? item->IsChecked() : -1);
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "select"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_hilight_callback( GtkWidget *widget, wxMenu *menu )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -685,11 +692,13 @@
     wxWindow *win = menu->GetInvokingWindow();
     if (win) win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "deselect"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_menu_nolight_callback( GtkWidget *widget, wxMenu *menu )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -712,6 +721,7 @@
     if (win)
         win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxMenuItem
@@ -1533,7 +1543,7 @@
 
 static GtkMenuItemClass *parent_class = NULL;
 
-}
+} // extern "C"
 
 #define BORDER_SPACING  3
 #define PMAP_WIDTH 20
@@ -1564,6 +1574,8 @@
   return pixmap_menu_item_type;
 }
 
+extern "C" {
+
 /**
  * gtk_pixmap_menu_item_new
  *
@@ -1842,5 +1854,7 @@
     gtk_widget_queue_resize(GTK_WIDGET(menu_item));
 }
 
-#endif
+} // extern "C"
+
+#endif // !__WXGTK20__
 
diff -ur ../wxWidgets/src/gtk/minifram.cpp ./src/gtk/minifram.cpp
--- ../wxWidgets/src/gtk/minifram.cpp	2004-11-05 10:23:38.000000000 -0800
+++ ./src/gtk/minifram.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -69,6 +69,7 @@
 // "expose_event" of m_mainWidget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_window_own_expose_callback( GtkWidget *widget, GdkEventExpose *gdk_event, wxFrame *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -109,12 +110,14 @@
         dc.DrawText( win->GetTitle(), 6, 3 );
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "draw" of m_mainWidget
 //-----------------------------------------------------------------------------
 
 #ifndef __WXGTK20__
+extern "C" {
 static void gtk_window_own_draw_callback( GtkWidget *widget, GdkRectangle *WXUNUSED(rect), wxFrame *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -154,12 +157,14 @@
         dc.DrawText( win->GetTitle(), 6, 3 );
     }
 }
+}
 #endif
 
 //-----------------------------------------------------------------------------
 // "button_press_event" of m_mainWidget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_button_press_callback( GtkWidget *widget, GdkEventButton *gdk_event, wxMiniFrame *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -203,11 +208,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event" of m_mainWidget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_button_release_callback( GtkWidget *widget, GdkEventButton *gdk_event, wxMiniFrame *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -236,11 +243,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "motion_notify_event" of m_mainWidget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_motion_notify_callback( GtkWidget *widget, GdkEventMotion *gdk_event, wxMiniFrame *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -269,17 +278,20 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "clicked" of X system button
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_button_clicked_callback( GtkWidget *WXUNUSED(widget), wxMiniFrame *mf )
 {
     if (g_isIdle) wxapp_install_idle_handler();
 
     mf->Close();
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxMiniFrame
diff -ur ../wxWidgets/src/gtk/notebook.cpp ./src/gtk/notebook.cpp
--- ../wxWidgets/src/gtk/notebook.cpp	2005-03-01 13:36:52.000000000 -0800
+++ ./src/gtk/notebook.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -90,6 +90,7 @@
 // "switch_page"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_notebook_page_change_callback(GtkNotebook *WXUNUSED(widget),
                                               GtkNotebookPage *WXUNUSED(page),
                                               gint page,
@@ -132,11 +133,13 @@
 
     notebook->m_inSwitchPage = FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "size_allocate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_page_size_callback( GtkWidget *WXUNUSED(widget), GtkAllocation* alloc, wxWindow *win )
 {
     if (g_isIdle)
@@ -163,11 +166,13 @@
         gtk_widget_size_allocate( win->m_wxwindow, alloc );
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "realize" from m_widget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_notebook_realized_callback( GtkWidget * WXUNUSED(widget), wxWindow *win )
 {
@@ -180,11 +185,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "key_press_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_notebook_key_press_callback( GtkWidget *widget, GdkEventKey *gdk_event, wxNotebook *notebook )
 {
     if (g_isIdle)
@@ -250,6 +257,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild callback for wxNotebook
diff -ur ../wxWidgets/src/gtk/popupwin.cpp ./src/gtk/popupwin.cpp
--- ../wxWidgets/src/gtk/popupwin.cpp	2005-02-25 22:58:19.000000000 -0800
+++ ./src/gtk/popupwin.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -38,6 +38,7 @@
 // "button_press"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_popup_button_press (GtkWidget *widget, GdkEvent *gdk_event, wxPopupWindow* win )
 {
     GtkWidget *child = gtk_get_event_widget (gdk_event);
@@ -66,11 +67,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus" from m_window
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_dialog_focus_callback( GtkWidget *widget, GtkDirectionType WXUNUSED(d), wxWindow *WXUNUSED(win) )
 {
     if (g_isIdle)
@@ -80,11 +83,13 @@
     gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "focus" );
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "delete_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 bool gtk_dialog_delete_callback( GtkWidget *WXUNUSED(widget), GdkEvent *WXUNUSED(event), wxPopupWindow *win )
 {
     if (g_isIdle)
@@ -95,11 +100,13 @@
 
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "size_allocate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_dialog_size_callback( GtkWidget *WXUNUSED(widget), GtkAllocation* alloc, wxPopupWindow *win )
 {
     if (g_isIdle)
@@ -114,6 +121,7 @@
         win->GtkUpdateSize();
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "realize" from m_widget
@@ -122,6 +130,7 @@
 /* we cannot MWM hints and icons before the widget has been realized,
    so we do this directly after realization */
 
+extern "C" {
 static gint
 gtk_dialog_realized_callback( GtkWidget * WXUNUSED(widget), wxPopupWindow *win )
 {
@@ -140,6 +149,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild for wxPopupWindow
diff -ur ../wxWidgets/src/gtk/radiobox.cpp ./src/gtk/radiobox.cpp
--- ../wxWidgets/src/gtk/radiobox.cpp	2005-03-01 13:36:53.000000000 -0800
+++ ./src/gtk/radiobox.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -45,6 +45,7 @@
 // "clicked"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_radiobutton_clicked_callback( GtkToggleButton *button, wxRadioBox *rb )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -60,11 +61,13 @@
     event.SetEventObject( rb );
     rb->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "key_press_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_radiobox_keypress_callback( GtkWidget *widget, GdkEventKey *gdk_event, wxRadioBox *rb )
 {
     if (g_isIdle)
@@ -111,7 +114,9 @@
 
     return TRUE;
 }
+}
 
+extern "C" {
 static gint gtk_radiobutton_focus_in( GtkWidget *widget,
                                       GdkEvent *WXUNUSED(event),
                                       wxRadioBox *win )
@@ -135,7 +140,9 @@
 
     return FALSE;
 }
+}
 
+extern "C" {
 static gint gtk_radiobutton_focus_out( GtkWidget *widget,
                                        GdkEvent *WXUNUSED(event),
                                        wxRadioBox *win )
@@ -152,6 +159,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxRadioBox
diff -ur ../wxWidgets/src/gtk/radiobut.cpp ./src/gtk/radiobut.cpp
--- ../wxWidgets/src/gtk/radiobut.cpp	2004-08-15 13:36:04.000000000 -0700
+++ ./src/gtk/radiobut.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -40,6 +40,7 @@
 // "clicked"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static 
 void gtk_radiobutton_clicked_callback( GtkToggleButton *button, wxRadioButton *rb )
 {
@@ -58,6 +59,7 @@
     event.SetEventObject( rb );
     rb->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxRadioButton
diff -ur ../wxWidgets/src/gtk/scrolbar.cpp ./src/gtk/scrolbar.cpp
--- ../wxWidgets/src/gtk/scrolbar.cpp	2005-02-25 22:58:24.000000000 -0800
+++ ./src/gtk/scrolbar.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -46,6 +46,7 @@
 
 // FIXME: is GtkScrollType really passed to us as 2nd argument?
 
+extern "C" {
 static void gtk_scrollbar_callback( GtkAdjustment *adjust,
                                     SCROLLBAR_CBACK_ARG
                                     wxScrollBar *win )
@@ -86,10 +87,12 @@
     win->ProcessEvent( cevent );
 */
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_press_event" from slider
 //-----------------------------------------------------------------------------
+extern "C" {
 static gint gtk_scrollbar_button_press_callback( GtkRange *widget,
                                                  GdkEventButton *gdk_event,
                                                  wxScrollBar *win )
@@ -128,11 +131,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event" from slider
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_scrollbar_button_release_callback( GtkRange *WXUNUSED(widget),
                                        GdkEventButton *WXUNUSED(gdk_event),
@@ -159,6 +164,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxScrollBar
diff -ur ../wxWidgets/src/gtk/scrolwin.cpp ./src/gtk/scrolwin.cpp
--- ../wxWidgets/src/gtk/scrolwin.cpp	2005-02-25 22:58:24.000000000 -0800
+++ ./src/gtk/scrolwin.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -72,6 +72,7 @@
 // "value_changed" from m_vAdjust
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_scrolled_window_vscroll_callback( GtkAdjustment *adjust,
                                                   SCROLLBAR_CBACK_ARG
                                                   wxScrolledWindow *win )
@@ -86,11 +87,13 @@
     win->GtkVScroll( adjust->value,
             GET_SCROLL_TYPE(GTK_SCROLLED_WINDOW(win->m_widget)->vscrollbar) );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "value_changed" from m_hAdjust
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_scrolled_window_hscroll_callback( GtkAdjustment *adjust,
                                                   SCROLLBAR_CBACK_ARG
                                                   wxScrolledWindow *win )
@@ -104,11 +107,13 @@
     win->GtkHScroll( adjust->value,
             GET_SCROLL_TYPE(GTK_SCROLLED_WINDOW(win->m_widget)->hscrollbar) );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_press_event" from scrollbar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_scrollbar_button_press_callback( GtkRange *widget,
                                                  GdkEventButton *gdk_event,
                                                  wxWindowGTK *win)
@@ -125,11 +130,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event" from scrollbar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_scrollbar_button_release_callback( GtkRange *widget,
                                                    GdkEventButton *WXUNUSED(gdk_event),
                                                    wxWindowGTK *win)
@@ -168,6 +175,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild for wxScrolledWindow
diff -ur ../wxWidgets/src/gtk/slider.cpp ./src/gtk/slider.cpp
--- ../wxWidgets/src/gtk/slider.cpp	2005-02-04 16:57:45.000000000 -0800
+++ ./src/gtk/slider.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -41,6 +41,7 @@
 // "value_changed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_slider_callback( GtkAdjustment *adjust,
                                  SCROLLBAR_CBACK_ARG
                                  wxSlider *win )
@@ -72,6 +73,7 @@
     cevent.SetInt( value );
     win->GetEventHandler()->ProcessEvent( cevent );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxSlider
diff -ur ../wxWidgets/src/gtk/spinbutt.cpp ./src/gtk/spinbutt.cpp
--- ../wxWidgets/src/gtk/spinbutt.cpp	2005-01-03 11:48:35.000000000 -0800
+++ ./src/gtk/spinbutt.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -43,6 +43,7 @@
 // "value_changed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_spinbutt_callback( GtkWidget *WXUNUSED(widget), wxSpinButton *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -98,6 +99,7 @@
         win->GetEventHandler()->ProcessEvent( event2 );
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxSpinButton
diff -ur ../wxWidgets/src/gtk/spinctrl.cpp ./src/gtk/spinctrl.cpp
--- ../wxWidgets/src/gtk/spinctrl.cpp	2005-01-03 11:48:35.000000000 -0800
+++ ./src/gtk/spinctrl.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -44,6 +44,7 @@
 // "value_changed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_spinctrl_callback( GtkWidget *WXUNUSED(widget), wxSpinCtrl *win )
 {
     if (g_isIdle) wxapp_install_idle_handler();
@@ -63,11 +64,13 @@
     event.SetInt( (int)ceil(win->m_adjust->value) );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 //  "changed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_spinctrl_text_changed_callback( GtkWidget *WXUNUSED(widget), wxSpinCtrl *win )
 {
@@ -83,6 +86,7 @@
     event.SetInt( (int)ceil(win->m_adjust->value) );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // wxSpinCtrl
diff -ur ../wxWidgets/src/gtk/tbargtk.cpp ./src/gtk/tbargtk.cpp
--- ../wxWidgets/src/gtk/tbargtk.cpp	2004-08-22 12:36:37.000000000 -0700
+++ ./src/gtk/tbargtk.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -168,6 +168,7 @@
 // "clicked" (internal from gtk_toolbar)
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_toolbar_callback( GtkWidget *WXUNUSED(widget),
                                   wxToolBarTool *tool )
 {
@@ -202,11 +203,13 @@
         tool->SetPixmap(tool->GetBitmap());
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "enter_notify_event" / "leave_notify_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_toolbar_tool_callback( GtkWidget *WXUNUSED(widget),
                                        GdkEventCrossing *gdk_event,
                                        wxToolBarTool *tool )
@@ -225,6 +228,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild callback for wxToolBar
diff -ur ../wxWidgets/src/gtk/textctrl.cpp ./src/gtk/textctrl.cpp
--- ../wxWidgets/src/gtk/textctrl.cpp	2005-02-25 22:58:25.000000000 -0800
+++ ./src/gtk/textctrl.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -144,6 +144,7 @@
 // "insert_text" for GtkEntry
 // ----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_insert_text_callback(GtkEditable *editable,
                          const gchar *new_text,
@@ -179,10 +180,12 @@
         win->GetEventHandler()->ProcessEvent( event );
     }
 }
+}
 
 #ifdef __WXGTK20__
 // Implementation of wxTE_AUTO_URL for wxGTK2 by Mart Raudsepp,
 
+extern "C" {
 static void
 au_apply_tag_callback(GtkTextBuffer *buffer,
                       GtkTextTag *tag,
@@ -193,34 +196,43 @@
     if(tag == gtk_text_tag_table_lookup(gtk_text_buffer_get_tag_table(buffer), "wxUrl"))
         g_signal_stop_emission_by_name(buffer, "apply_tag");
 }
+}
 
 //-----------------------------------------------------------------------------
 //  GtkTextCharPredicates for gtk_text_iter_*_find_char
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gboolean
 pred_whitespace (gunichar ch, gpointer user_data)
 {
     return g_unichar_isspace(ch);
 }
+}
 
+extern "C" {
 static gboolean
 pred_non_whitespace (gunichar ch, gpointer user_data)
 {
     return !g_unichar_isspace(ch);
 }
+}
 
+extern "C" {
 static gboolean
 pred_nonpunct (gunichar ch, gpointer user_data)
 {
     return !g_unichar_ispunct(ch);
 }
+}
 
+extern "C" {
 static gboolean
 pred_nonpunct_or_slash (gunichar ch, gpointer user_data)
 {
     return !g_unichar_ispunct(ch) || ch == '/';
 }
+}
 
 //-----------------------------------------------------------------------------
 //  Check for links between s and e and correct tags as necessary
@@ -228,6 +240,7 @@
 
 // This function should be made match better while being efficient at one point.
 // Most probably with a row of regular expressions.
+extern "C" {
 static void
 au_check_word( GtkTextIter *s, GtkTextIter *e )
 {
@@ -287,7 +300,9 @@
         g_signal_handler_unblock(buffer, signal_id);
     }
 }
+}
 
+extern "C" {
 static void
 au_check_range(GtkTextIter *s,
                GtkTextIter *range_end)
@@ -314,11 +329,13 @@
         gtk_text_iter_forward_find_char(&range_start, pred_non_whitespace, NULL, range_end);
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 //  "insert-text" for GtkTextBuffer
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 au_insert_text_callback(GtkTextBuffer *buffer,
                         GtkTextIter *end,
@@ -344,11 +361,13 @@
 
     au_check_range(&words_start, &words_end);
 }
+}
 
 //-----------------------------------------------------------------------------
 //  "delete-range" for GtkTextBuffer
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 au_delete_range_callback(GtkTextBuffer *buffer,
                          GtkTextIter *start,
@@ -367,6 +386,7 @@
 
     au_check_range(start, end);
 }
+}
 
 
 #endif
@@ -375,6 +395,7 @@
 //  "changed"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_text_changed_callback( GtkWidget *widget, wxTextCtrl *win )
 {
@@ -395,17 +416,20 @@
     event.SetEventObject( win );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "expose_event" from scrolled window and textview
 //-----------------------------------------------------------------------------
 
 #ifdef __WXGTK20__
+extern "C" {
 static gboolean
 gtk_text_exposed_callback( GtkWidget *widget, GdkEventExpose *event, wxTextCtrl *win )
 {
     return TRUE;
 }
+}
 #endif
 
 //-----------------------------------------------------------------------------
@@ -413,6 +437,7 @@
 //-----------------------------------------------------------------------------
 
 #ifndef __WXGTK20__
+extern "C" {
 static void
 gtk_scrollbar_changed_callback( GtkWidget *WXUNUSED(widget), wxTextCtrl *win )
 {
@@ -423,6 +448,7 @@
 
     win->CalculateScrollbar();
 }
+}
 #endif
 
 // ----------------------------------------------------------------------------
@@ -444,8 +470,8 @@
 
 static GtkDrawCallback gs_gtk_text_draw = NULL;
 
-extern "C"
-void wxgtk_text_draw( GtkWidget *widget, GdkRectangle *rect)
+extern "C" {
+static void wxgtk_text_draw( GtkWidget *widget, GdkRectangle *rect)
 {
     if ( !wxIsInsideYield )
     {
@@ -455,6 +481,7 @@
         gs_gtk_text_draw(widget, rect);
     }
 }
+}
 
 #endif // __WXGTK20__
 
diff -ur ../wxWidgets/src/gtk/tglbtn.cpp ./src/gtk/tglbtn.cpp
--- ../wxWidgets/src/gtk/tglbtn.cpp	2004-11-24 14:50:12.000000000 -0800
+++ ./src/gtk/tglbtn.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -26,6 +26,7 @@
 extern wxCursor   g_globalCursor;
 extern wxWindowGTK *g_delayedFocus;
 
+extern "C" {
 static void gtk_togglebutton_clicked_callback(GtkWidget *WXUNUSED(widget), wxToggleButton *cb)
 {
    if (g_isIdle)
@@ -42,6 +43,7 @@
    event.SetEventObject(cb);
    cb->GetEventHandler()->ProcessEvent(event);
 }
+}
 
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED)
 
diff -ur ../wxWidgets/src/gtk/timer.cpp ./src/gtk/timer.cpp
--- ../wxWidgets/src/gtk/timer.cpp	2004-05-23 13:52:21.000000000 -0700
+++ ./src/gtk/timer.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -27,7 +27,8 @@
 
 IMPLEMENT_ABSTRACT_CLASS(wxTimer, wxEvtHandler)
 
-extern "C" gint timeout_callback( gpointer data )
+extern "C" {
+static gint timeout_callback( gpointer data )
 {
     wxTimer *timer = (wxTimer*)data;
 
@@ -54,6 +55,7 @@
 
     return TRUE;
 }
+}
 
 void wxTimer::Init()
 {
diff -ur ../wxWidgets/src/gtk/toplevel.cpp ./src/gtk/toplevel.cpp
--- ../wxWidgets/src/gtk/toplevel.cpp	2005-02-25 22:58:25.000000000 -0800
+++ ./src/gtk/toplevel.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -82,6 +82,7 @@
 // "focus_in_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_frame_focus_in_callback( GtkWidget *widget,
                                          GdkEvent *WXUNUSED(event),
                                          wxTopLevelWindowGTK *win )
@@ -115,11 +116,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus_out_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_frame_focus_out_callback( GtkWidget *widget, 
                                           GdkEventFocus *WXUNUSED(gdk_event), 
                                           wxTopLevelWindowGTK *win )
@@ -148,11 +151,13 @@
         
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus" from m_window
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_frame_focus_callback( GtkWidget *widget, GtkDirectionType WXUNUSED(d), wxWindow *WXUNUSED(win) )
 {
     if (g_isIdle)
@@ -162,11 +167,13 @@
     gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "focus" );
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "size_allocate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_frame_size_callback( GtkWidget *WXUNUSED(widget), GtkAllocation* alloc, wxTopLevelWindowGTK *win )
 {
     if (g_isIdle)
@@ -192,11 +199,13 @@
         win->GtkUpdateSize();
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "delete_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_frame_delete_callback( GtkWidget *WXUNUSED(widget), GdkEvent *WXUNUSED(event), wxTopLevelWindowGTK *win )
 {
     if (g_isIdle)
@@ -209,12 +218,14 @@
 
     return TRUE;
 }
+}
 
 
 //-----------------------------------------------------------------------------
 // "configure_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint
 gtk_frame_configure_callback( GtkWidget *WXUNUSED(widget), GdkEventConfigure *WXUNUSED(event), wxTopLevelWindowGTK *win )
 {
@@ -237,6 +248,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "realize" from m_widget
@@ -245,6 +257,7 @@
 // we cannot MWM hints and icons before the widget has been realized,
 // so we do this directly after realization
 
+extern "C" {
 static void
 gtk_frame_realized_callback( GtkWidget * WXUNUSED(widget),
                              wxTopLevelWindowGTK *win )
@@ -273,11 +286,13 @@
         win->SetIcons( iconsOld );
     }
 }
+}
 
 //-----------------------------------------------------------------------------
 // "map_event" from m_widget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_frame_map_callback( GtkWidget * WXUNUSED(widget),
                         GdkEvent * WXUNUSED(event),
@@ -285,11 +300,13 @@
 {
     win->SetIconizeState(FALSE);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "unmap_event" from m_widget
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void
 gtk_frame_unmap_callback( GtkWidget * WXUNUSED(widget),
                           GdkEvent * WXUNUSED(event),
@@ -297,11 +314,13 @@
 {
     win->SetIconizeState(TRUE);
 }
+}
 
 //-----------------------------------------------------------------------------
 // "expose_event" of m_client
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static int gtk_window_expose_callback( GtkWidget *widget, GdkEventExpose *gdk_event, wxWindow *win )
 {
     GtkPizza *pizza = GTK_PIZZA(widget);
@@ -316,6 +335,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "draw" of m_client
@@ -323,6 +343,7 @@
 
 #ifndef __WXGTK20__
 
+extern "C" {
 static void gtk_window_draw_callback( GtkWidget *widget, GdkRectangle *rect, wxWindow *win )
 {
     GtkPizza *pizza = GTK_PIZZA(widget);
@@ -335,6 +356,7 @@
                         (char *)"base",
                         0, 0, -1, -1);
 }
+}
 
 #endif // GTK+ 1.x
 
diff -ur ../wxWidgets/src/gtk/utilsgtk.cpp ./src/gtk/utilsgtk.cpp
--- ../wxWidgets/src/gtk/utilsgtk.cpp	2004-06-27 06:42:17.000000000 -0700
+++ ./src/gtk/utilsgtk.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -194,7 +194,8 @@
 // subprocess routines
 // ----------------------------------------------------------------------------
 
-extern "C"
+extern "C" {
+static
 void GTK_EndProcessDetector(gpointer data, gint source,
                             GdkInputCondition WXUNUSED(condition) )
 {
@@ -225,6 +226,7 @@
 
    wxHandleProcessTermination(proc_data);
 }
+}
 
 int wxAddProcessCallback(wxEndProcessData *proc_data, int fd)
 {
diff -ur ../wxWidgets/src/gtk/window.cpp ./src/gtk/window.cpp
--- ../wxWidgets/src/gtk/window.cpp	2005-03-05 09:11:22.000000000 -0800
+++ ./src/gtk/window.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -379,7 +379,7 @@
             dh += hscroll_req.height;
             dh += scroll_class->scrollbar_spacing;
         }
-}
+    }
 
     int dx = 0;
     int dy = 0;
@@ -429,7 +429,8 @@
 // "expose_event" of m_widget
 //-----------------------------------------------------------------------------
 
-gint gtk_window_own_expose_callback( GtkWidget *widget, GdkEventExpose *gdk_event, wxWindowGTK *win )
+extern "C" {
+static gint gtk_window_own_expose_callback( GtkWidget *widget, GdkEventExpose *gdk_event, wxWindowGTK *win )
 {
     if (gdk_event->count > 0) return FALSE;
 
@@ -442,6 +443,7 @@
 #endif
     return TRUE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "draw" of m_widget
@@ -449,10 +451,12 @@
 
 #ifndef __WXGTK20__
 
+extern "C" {
 static void gtk_window_own_draw_callback( GtkWidget *widget, GdkRectangle *WXUNUSED(rect), wxWindowGTK *win )
 {
     draw_frame( widget, win );
 }
+}
 
 #endif // GTK+ < 2.0
 
@@ -460,8 +464,8 @@
 // "size_request" of m_widget
 //-----------------------------------------------------------------------------
 
-// make it extern because wxStatitText needs to disconnect this one
-extern "C"
+// make it extern because wxStaticText needs to disconnect this one
+extern "C" {
 void wxgtk_window_size_request_callback(GtkWidget *widget,
                                         GtkRequisition *requisition,
                                         wxWindow *win)
@@ -476,9 +480,10 @@
     requisition->height = h;
     requisition->width = w;
 }
+}
 
-
-extern "C"
+extern "C" {
+static
 void wxgtk_combo_size_request_callback(GtkWidget *widget,
                                        GtkRequisition *requisition,
                                        wxComboBox *win)
@@ -504,11 +509,13 @@
     requisition->width = w - entry_req.width;
     requisition->height = entry_req.height+4;  // TODO: why +4?
 }
+}
 
 //-----------------------------------------------------------------------------
 // "expose_event" of m_wxwindow
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static int gtk_window_expose_callback( GtkWidget *widget,
                                        GdkEventExpose *gdk_event,
                                        wxWindow *win )
@@ -578,6 +585,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "event" of m_wxwindow
@@ -589,6 +597,8 @@
 // There, we look for expose events ourselves whereas all other events are
 // handled normally.
 
+extern "C" {
+static
 gint gtk_window_event_event_callback( GtkWidget *widget,
                                       GdkEventExpose *event,
                                       wxWindow *win )
@@ -601,6 +611,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "draw" of m_wxwindow
@@ -611,6 +622,7 @@
 // This callback is a complete replacement of the gtk_pizza_draw() function,
 // which is disabled.
 
+extern "C" {
 static void gtk_window_draw_callback( GtkWidget *widget,
                                       GdkRectangle *rect,
                                       wxWindow *win )
@@ -686,6 +698,7 @@
     }
 #endif
 }
+}
 
 #endif
 
@@ -1129,6 +1142,7 @@
 };
 #endif
 
+extern "C" {
 static gint gtk_window_key_press_callback( GtkWidget *widget,
                                            GdkEventKey *gdk_event,
                                            wxWindow *win )
@@ -1389,8 +1403,10 @@
 
     return FALSE;
 }
+}
 
 #ifdef __WXGTK20__
+extern "C" {
 static void gtk_wxwindow_commit_cb (GtkIMContext *context,
                            const gchar  *str,
                            wxWindow     *window)
@@ -1444,6 +1460,7 @@
         }
     }
 }
+}
 #endif
 
 
@@ -1451,6 +1468,7 @@
 // "key_release_event" from any window
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_key_release_callback( GtkWidget *widget,
                                              GdkEventKey *gdk_event,
                                              wxWindowGTK *win )
@@ -1479,6 +1497,7 @@
     gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "key_release_event" );
     return TRUE;
 }
+}
 
 // ============================================================================
 // the mouse events
@@ -1622,6 +1641,7 @@
 // "button_press_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_button_press_callback( GtkWidget *widget,
                                               GdkEventButton *gdk_event,
                                               wxWindowGTK *win )
@@ -1820,11 +1840,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_button_release_callback( GtkWidget *widget,
                                                 GdkEventButton *gdk_event,
                                                 wxWindowGTK *win )
@@ -1880,11 +1902,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "motion_notify_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_motion_notify_callback( GtkWidget *widget,
                                                GdkEventMotion *gdk_event,
                                                wxWindowGTK *win )
@@ -1954,15 +1978,17 @@
 
     return FALSE;
 }
+}
 
 #ifdef __WXGTK20__
 //-----------------------------------------------------------------------------
 // "mouse_wheel_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_wheel_callback (GtkWidget * widget,
-					GdkEventScroll * gdk_event,
-					wxWindowGTK * win)
+                                       GdkEventScroll * gdk_event,
+                                       wxWindowGTK * win)
 {
     DEBUG_MAIN_THREAD
 
@@ -2010,10 +2036,12 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "popup-menu"
 //-----------------------------------------------------------------------------
+extern "C" {
 static gboolean wxgtk_window_popup_menu_callback(GtkWidget*, wxWindowGTK* win)
 {
     wxContextMenuEvent event(
@@ -2023,6 +2051,7 @@
     event.SetEventObject(win);
     return win->GetEventHandler()->ProcessEvent(event);
 }
+}
 #endif // __WXGTK20__
 
 //-----------------------------------------------------------------------------
@@ -2044,6 +2073,7 @@
     return win->GetEventHandler()->ProcessEvent(eventFocus);
 }
 
+extern "C" {
 static gint gtk_window_focus_in_callback( GtkWidget *widget,
                                           GdkEvent *WXUNUSED(event),
                                           wxWindow *win )
@@ -2093,11 +2123,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "focus_out_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_focus_out_callback( GtkWidget *widget, GdkEventFocus *gdk_event, wxWindowGTK *win )
 {
     DEBUG_MAIN_THREAD
@@ -2152,11 +2184,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "enter_notify_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static
 gint gtk_window_enter_callback( GtkWidget *widget,
                                 GdkEventCrossing *gdk_event,
@@ -2195,11 +2229,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "leave_notify_event"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_window_leave_callback( GtkWidget *widget, GdkEventCrossing *gdk_event, wxWindowGTK *win )
 {
     DEBUG_MAIN_THREAD
@@ -2245,11 +2281,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "value_changed" from m_vAdjust
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_window_vscroll_callback( GtkAdjustment *adjust,
                                          SCROLLBAR_CBACK_ARG
                                          wxWindowGTK *win )
@@ -2279,11 +2317,13 @@
     event.SetEventObject( win );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "value_changed" from m_hAdjust
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static void gtk_window_hscroll_callback( GtkAdjustment *adjust,
                                          SCROLLBAR_CBACK_ARG
                                          wxWindowGTK *win )
@@ -2312,11 +2352,13 @@
     event.SetEventObject( win );
     win->GetEventHandler()->ProcessEvent( event );
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_press_event" from scrollbar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_scrollbar_button_press_callback( GtkRange *widget,
                                                  GdkEventButton *gdk_event,
                                                  wxWindowGTK *win)
@@ -2336,11 +2378,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "button_release_event" from scrollbar
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static gint gtk_scrollbar_button_release_callback( GtkRange *widget,
                                                    GdkEventButton *WXUNUSED(gdk_event),
                                                    wxWindowGTK *win)
@@ -2381,6 +2425,7 @@
 
     return FALSE;
 }
+}
 
 // ----------------------------------------------------------------------------
 // this wxWindowBase function is implemented here (in platform-specific file)
@@ -2393,7 +2438,6 @@
     return (wxWindow *)g_focusWindow;
 }
 
-
 //-----------------------------------------------------------------------------
 // "realize" from m_widget
 //-----------------------------------------------------------------------------
@@ -2401,6 +2445,7 @@
 /* We cannot set colours and fonts before the widget has
    been realized, so we do this directly after realization. */
 
+extern "C" {
 static gint
 gtk_window_realized_callback( GtkWidget *m_widget, wxWindow *win )
 {
@@ -2424,11 +2469,13 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // "size_allocate"
 //-----------------------------------------------------------------------------
 
+extern "C" {
 static
 void gtk_window_size_callback( GtkWidget *WXUNUSED(widget),
                                GtkAllocation *WXUNUSED(alloc),
@@ -2455,6 +2502,7 @@
         win->GetEventHandler()->ProcessEvent( event );
     }
 }
+}
 
 
 #ifdef HAVE_XIM
@@ -2465,6 +2513,7 @@
 
 /* Resize XIM window */
 
+extern "C" {
 static
 void gtk_wxwindow_size_callback( GtkWidget* WXUNUSED_UNLESS_XIM(widget),
                                  GtkAllocation* WXUNUSED_UNLESS_XIM(alloc),
@@ -2488,6 +2537,7 @@
     }
 #endif // HAVE_XIM
 }
+}
 
 //-----------------------------------------------------------------------------
 // "realize" from m_wxwindow
@@ -2495,6 +2545,7 @@
 
 /* Initialize XIM support */
 
+extern "C" {
 static gint
 gtk_wxwindow_realized_callback( GtkWidget * WXUNUSED_UNLESS_XIM(widget),
                                 wxWindowGTK * WXUNUSED_UNLESS_XIM(win) )
@@ -2581,6 +2632,7 @@
 
     return FALSE;
 }
+}
 
 //-----------------------------------------------------------------------------
 // InsertChild for wxWindowGTK.
diff -ur ../wxWidgets/src/unix/utilsx11.cpp ./src/unix/utilsx11.cpp
--- ../wxWidgets/src/unix/utilsx11.cpp	2004-09-28 11:36:58.000000000 -0700
+++ ./src/unix/utilsx11.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -65,12 +65,15 @@
 
 // Suspends X11 errors. Used when we expect errors but they are not fatal
 // for us.
+extern "C" {
+    static int wxX11ErrorsSuspender_handler(Display*, XErrorEvent*) { return 0; }
+}
 class wxX11ErrorsSuspender
 {
 public:
     wxX11ErrorsSuspender(Display *d) : m_display(d)
     {
-        m_old = XSetErrorHandler(handler);
+        m_old = XSetErrorHandler(wxX11ErrorsSuspender_handler);
     }
     ~wxX11ErrorsSuspender()
     {
@@ -81,7 +84,6 @@
 private:
     Display *m_display;
     int (*m_old)(Display*, XErrorEvent *);
-    static int handler(Display *, XErrorEvent *) { return 0; }
 };
 
 
diff -ur ../wxWidgets/src/xml/xml.cpp ./src/xml/xml.cpp
--- ../wxWidgets/src/xml/xml.cpp	2005-02-04 16:57:57.000000000 -0800
+++ ./src/xml/xml.cpp	2005-03-05 10:04:25.000000000 -0800
@@ -385,6 +385,7 @@
     wxString   version;
 };
 
+extern "C" {
 static void StartElementHnd(void *userData, const char *name, const char **atts)
 {
     wxXmlParsingContext *ctx = (wxXmlParsingContext*)userData;
@@ -402,7 +403,9 @@
     ctx->node = node;
     ctx->lastAsText = NULL;
 }
+}
 
+extern "C" {
 static void EndElementHnd(void *userData, const char* WXUNUSED(name))
 {
     wxXmlParsingContext *ctx = (wxXmlParsingContext*)userData;
@@ -410,7 +413,9 @@
     ctx->node = ctx->node->GetParent();
     ctx->lastAsText = NULL;
 }
+}
 
+extern "C" {
 static void TextHnd(void *userData, const char *s, int len)
 {
     wxXmlParsingContext *ctx = (wxXmlParsingContext*)userData;
@@ -443,7 +448,9 @@
 
     delete[] buf;
 }
+}
 
+extern "C" {
 static void CommentHnd(void *userData, const char *data)
 {
     wxXmlParsingContext *ctx = (wxXmlParsingContext*)userData;
@@ -458,7 +465,9 @@
     }
     ctx->lastAsText = NULL;
 }
+}
 
+extern "C" {
 static void DefaultHnd(void *userData, const char *s, int len)
 {
     // XML header:
@@ -476,7 +485,9 @@
             ctx->version = buf.Mid(pos + 9).BeforeFirst(buf[(size_t)pos+8]);
     }
 }
+}
 
+extern "C" {
 static int UnknownEncodingHnd(void * WXUNUSED(encodingHandlerData),
                               const XML_Char *name, XML_Encoding *info)
 {
@@ -508,6 +519,7 @@
 
     return 1;
 }
+}
 
 bool wxXmlDocument::Load(wxInputStream& stream, const wxString& encoding)
 {

 	  	 

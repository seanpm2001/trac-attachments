Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 48640)
+++ include/wx/dataview.h	(working copy)
@@ -162,7 +162,16 @@
     // the user should not delete this class directly: he should use DecRef() instead!
     virtual ~wxDataViewModel() { }
 
+private:
+    #ifdef __VISUALC__
+        // "class 'wxDataViewModelNotifiers' needs to have dll-interface to be used by
+        // clients of class 'wxDataViewModel'" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
     wxDataViewModelNotifiers  m_notifiers;
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
 };
 
 // ---------------------------------------------------------
Index: include/wx/generic/dataview.h
===================================================================
--- include/wx/generic/dataview.h	(revision 48640)
+++ include/wx/generic/dataview.h	(working copy)
@@ -441,7 +441,15 @@
     wxWindow *GetMainWindow() { return (wxWindow*) m_clientArea; }
 
 private:
+    #ifdef __VISUALC__
+        // "class 'wxDataViewColumnList' needs to have dll-interface to be used by
+        // clients of class 'wxDataViewCtrl''" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
     wxDataViewColumnList m_cols;
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
     wxDataViewModelNotifier *m_notifier;
     wxDataViewMainWindow        *m_clientArea;
     wxDataViewHeaderWindow      *m_headerArea;
Index: include/wx/sstream.h
===================================================================
--- include/wx/sstream.h	(revision 48640)
+++ include/wx/sstream.h	(working copy)
@@ -39,7 +39,15 @@
     wxString m_str;
 
     // the buffer we're reading from
+    #ifdef __VISUALC__
+        // "class 'wxWCharBuffer' needs to have dll-interface to be used by
+        // clients of class 'wxStringInputStream'" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
     wxCharBuffer m_buf;
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
 
     // length of the buffer we're reading from
     size_t m_len;
@@ -93,8 +101,16 @@
 #endif
 
 #if wxUSE_UNICODE_WCHAR
+    #ifdef __VISUALC__
+        // "class 'wxMemoryBuffer' needs to have dll-interface to be used by
+        // clients of class 'wxStringOutputStream'" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
     // unconverted data from the last call to OnSysWrite()
     wxMemoryBuffer m_unconv;
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
 #endif // wxUSE_UNICODE_WCHAR
 
     DECLARE_NO_COPY_CLASS(wxStringOutputStream)
Index: include/wx/string.h
===================================================================
--- include/wx/string.h	(revision 48640)
+++ include/wx/string.h	(working copy)
@@ -2874,23 +2874,23 @@
 typedef wxStringInternalBuffer                wxUTF8StringBuffer;
 typedef wxStringInternalBufferLength          wxUTF8StringBufferLength;
 #elif wxUSE_UNICODE_WCHAR
-class WXDLLIMPEXP_BASE wxUTF8StringBuffer : public wxStringTypeBufferBase<char>
+class wxUTF8StringBuffer : public wxStringTypeBufferBase<char>
 {
 public:
-    wxUTF8StringBuffer(wxString& str, size_t lenWanted = 1024)
+    WXDLLIMPEXP_BASE wxUTF8StringBuffer(wxString& str, size_t lenWanted = 1024)
         : wxStringTypeBufferBase<char>(str, lenWanted) {}
-    ~wxUTF8StringBuffer();
+    WXDLLIMPEXP_BASE ~wxUTF8StringBuffer();
 
     DECLARE_NO_COPY_CLASS(wxUTF8StringBuffer)
 };
 
-class WXDLLIMPEXP_BASE wxUTF8StringBufferLength
+class wxUTF8StringBufferLength
     : public wxStringTypeBufferLengthBase<char>
 {
 public:
-    wxUTF8StringBufferLength(wxString& str, size_t lenWanted = 1024)
+    WXDLLIMPEXP_BASE wxUTF8StringBufferLength(wxString& str, size_t lenWanted = 1024)
         : wxStringTypeBufferLengthBase<char>(str, lenWanted) {}
-    ~wxUTF8StringBufferLength();
+    WXDLLIMPEXP_BASE ~wxUTF8StringBufferLength();
 
     DECLARE_NO_COPY_CLASS(wxUTF8StringBufferLength)
 };
Index: include/wx/tokenzr.h
===================================================================
--- include/wx/tokenzr.h	(revision 48640)
+++ include/wx/tokenzr.h	(working copy)
@@ -124,8 +124,7 @@
 
     wxString m_string;              // the string we tokenize
     wxString::const_iterator m_stringEnd;
-    // FIXME-UTF8: use wxWcharBuffer
-    wxWxCharBuffer m_delims;        // all possible delimiters
+
     size_t m_delimsLen;
 
     wxString::const_iterator m_pos; // the current position in m_string
@@ -133,6 +132,20 @@
     wxStringTokenizerMode m_mode;   // see wxTOKEN_XXX values
 
     wxChar   m_lastDelim;           // delimiter after last token or '\0'
+
+private:
+    // FIXME-UTF8: use wxWcharBuffer
+    #ifdef __VISUALC__
+        // "class 'wxWCharBuffer' needs to have dll-interface to be used by
+        // clients of class 'wxStringTokenizer'" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
+
+    wxWxCharBuffer m_delims;        // all possible delimiters
+
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
 };
 
 // ----------------------------------------------------------------------------
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 48640)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -274,7 +274,15 @@
     long m_version;
 
     int m_flags;
+    #ifdef __VISUALC__
+        // "class 'wxVector<T>' needs to have dll-interface to be used by
+        // clients of class 'wxXmlResource'" - this is private, we don't care
+        #pragma warning (disable:4251)
+    #endif
     wxVector<wxXmlResourceHandler*> m_handlers;
+    #ifdef __VISUALC__
+        #pragma warning (default:4251)
+    #endif
     wxXmlResourceDataRecords *m_data;
 #if wxUSE_FILESYSTEM
     wxFileSystem m_curFileSystem;
Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	(revision 48640)
+++ src/common/datavcmn.cpp	(working copy)
@@ -273,7 +273,7 @@
 }
 
 int wxDataViewIndexListModel::Compare( const wxDataViewItem &item1, const wxDataViewItem &item2,
-                                       unsigned int column, bool ascending )
+                                       unsigned int WXUNUSED(column), bool ascending )
 {
     if (ascending)
         return GetRow(item1) - GetRow(item2);
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 48640)
+++ src/generic/datavgen.cpp	(working copy)
@@ -1016,12 +1016,12 @@
     return true;
 }
 
-bool wxDataViewIconTextRenderer::GetValue( wxVariant &value ) const
+bool wxDataViewIconTextRenderer::GetValue( wxVariant& WXUNUSED(value) ) const
 {
     return false;
 }
     
-bool wxDataViewIconTextRenderer::Render( wxRect cell, wxDC *dc, int state )
+bool wxDataViewIconTextRenderer::Render( wxRect cell, wxDC *dc, int WXUNUSED(state) )
 {
     dc->SetFont( GetOwner()->GetOwner()->GetFont() );
     
@@ -1042,12 +1042,12 @@
     return wxSize(80,16);  // TODO
 }
 
-wxControl* wxDataViewIconTextRenderer::CreateEditorCtrl( wxWindow *parent, wxRect labelRect, const wxVariant &value )
+wxControl* wxDataViewIconTextRenderer::CreateEditorCtrl( wxWindow* WXUNUSED(parent), wxRect WXUNUSED(labelRect), const wxVariant& WXUNUSED(value) )
 {
     return NULL;
 }
 
-bool wxDataViewIconTextRenderer::GetValueFromEditorCtrl( wxControl* editor, wxVariant &value )
+bool wxDataViewIconTextRenderer::GetValueFromEditorCtrl( wxControl* WXUNUSED(editor), wxVariant& WXUNUSED(value) )
 {
     return false;
 }
@@ -2074,7 +2074,7 @@
     }
     bool isContainer = false;
     wxDataViewTreeNodes nds = node->GetNodes();
-    for (int i = 0; i < nds.GetCount(); i ++)
+    for (size_t i = 0; i < nds.GetCount(); i ++)
     {    
         if (nds[i]->GetItem() == item)
         {
@@ -2226,8 +2226,8 @@
     if( column != -1 )
     {
         wxRect rect = GetClientRect();
-        unsigned int colnum = 0;
-        unsigned int x_start = 0, x_end = 0, w = 0;
+        int colnum = 0;
+        int x_start = 0, x_end = 0, w = 0;
         int xx, yy, xe;
         m_owner->CalcUnscrolledPosition( rect.x, rect.y, &xx, &yy );
         for (x_start = 0; colnum < column; colnum++)
@@ -3016,7 +3016,7 @@
             }
 
             wxDataViewTreeNodes nodes = node->GetNodes();
-            int i = 0;
+            size_t i = 0;
             for (; i < nodes.GetCount(); i ++)
             {
                 if (nodes[i]->GetItem() == (**iter))
@@ -3163,7 +3163,7 @@
 
     wxDataViewItemArray children;
     unsigned int num = model->GetChildren( item, children);
-    int index = 0;
+    unsigned int index = 0;
     while( index < num )
     {
         if( model->IsContainer( children[index] ) )
@@ -3761,7 +3761,7 @@
 wxDataViewColumn* wxDataViewCtrl::GetColumn( unsigned int pos ) const
 {
     wxDataViewColumnList::const_iterator iter;
-    int i = 0;
+    unsigned int i = 0;
     for (iter = m_cols.begin(); iter!=m_cols.end(); iter++)
     {
         if (i == pos)

 	  	 

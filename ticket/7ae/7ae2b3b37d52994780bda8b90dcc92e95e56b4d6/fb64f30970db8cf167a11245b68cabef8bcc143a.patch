Index: samples/minimal/minimal.cpp
===================================================================
--- samples/minimal/minimal.cpp	(revision 76659)
+++ samples/minimal/minimal.cpp	(working copy)
@@ -30,6 +30,10 @@
     #include "wx/wx.h"
 #endif
 
+#include <wx/stdpaths.h>
+#include <wx/filename.h>
+#include <wx/sysopt.h>
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -141,6 +145,19 @@
 // main frame
 // ----------------------------------------------------------------------------
 
+bool CompareImages( const wxImage &image1, const wxImage &image2 )
+{
+    if( !image1.Ok() || !image2.Ok() )
+        return false;
+
+    if( image1.GetWidth()!=image2.GetWidth() || image1.GetHeight()!=image2.GetHeight() )
+        return false;
+
+    // ignoring alpha channel for this test
+    return memcmp( image1.GetData(), image2.GetData(), image1.GetHeight()*image1.GetWidth()*3 ) == 0;
+}
+
+
 // frame constructor
 MyFrame::MyFrame(const wxString& title)
        : wxFrame(NULL, wxID_ANY, title)
@@ -147,7 +164,7 @@
 {
     // set the frame icon
     SetIcon(wxICON(sample));
-
+  
 #if wxUSE_MENUS
     // create a menu bar
     wxMenu *fileMenu = new wxMenu;
@@ -172,6 +189,129 @@
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+    ::wxInitAllImageHandlers();
+
+    wxString image_path = wxStandardPaths::Get().GetExecutablePath().BeforeLast(wxFileName::GetPathSeparator());
+
+    const int image_width = 4000;
+    const int image_height = 4000;
+    const int image_scaled_width = 3333;
+    const int image_scaled_height = 3333;
+    const int pen_width = 64;
+
+    wxBitmap original_bmp(image_width,image_height);
+    wxMemoryDC mdc(original_bmp);
+
+    // clear background
+    mdc.SetPen(*wxWHITE_PEN);
+    mdc.SetBrush(*wxWHITE_BRUSH);
+    mdc.DrawRectangle( 0, 0, image_width, image_height );
+
+    // draw some circles onto the bitmap
+    wxPen pen = *wxBLUE_PEN;
+    pen.SetWidth(pen_width);
+    mdc.SetPen( pen );
+    mdc.SetBrush(*wxTRANSPARENT_BRUSH);
+    mdc.DrawCircle( image_width/2, image_height/2, image_width/2 - pen_width/2 ); 
+
+    pen = *wxRED_PEN;
+    pen.SetWidth(pen_width);
+    mdc.SetPen( pen );
+    mdc.DrawCircle( image_width/3, image_height/3, image_width/3 - pen_width/2 );
+
+    pen = *wxGREEN_PEN;
+    pen.SetWidth(pen_width);
+    mdc.SetPen( pen );
+    mdc.DrawCircle( image_width/4, image_height/4, image_width/4 - pen_width/2 );
+
+    mdc.SelectObject(wxNullBitmap);
+
+    wxImage original_image = original_bmp.ConvertToImage();
+    original_image.SaveFile( image_path + wxT("\\_image_original.png"), wxBITMAP_TYPE_PNG );
+
+    wxStopWatch sw;
+
+    //wxSystemOptions::SetOption("openmp_num_threads", 2);
+    for( int i=0; i<9; i++)
+    {
+        wxImage result_image_normal, result_image_openmp;
+
+        for(int openmp=0; openmp<=1; openmp++)
+        {
+            wxSystemOptions::SetOption("openmp_enabled", openmp);
+            wxString test_name;
+            wxString openmp_label = openmp ? "openmp" : "normal";
+            wxImage result_image;
+
+            sw.Start();
+            switch(i)
+            {
+                case 0:
+                    test_name = "ResampleNearest";
+                    result_image = original_image.ResampleNearest( image_scaled_width, image_scaled_height );
+                break;
+
+                case 1:
+                    test_name = "ShrinkBy";
+                    result_image = original_image.ShrinkBy( 3, 3 );
+                break;
+
+                case 2:
+                    test_name = "ResampleBox";
+                    result_image = original_image.ResampleBox( image_scaled_width, image_scaled_height );
+                break;
+
+                case 3:
+                    test_name = "ResampleBilinear";
+                    result_image = original_image.ResampleBilinear( image_scaled_width, image_scaled_height );
+                break;
+
+                case 4:
+                    test_name = "ResampleBicubic";
+                    result_image = original_image.ResampleBicubic( image_scaled_width, image_scaled_height );
+                break;
+
+                case 5:
+                    test_name = "BlurHorizontal";
+                    result_image = original_image.BlurHorizontal( 4 );
+                break;
+
+                case 6:
+                    test_name = "BlurVertical";
+                    result_image = original_image.BlurVertical( 4 );
+                break;
+
+                case 7:
+                    test_name = "Rotate_Not_Interpolating";
+                    result_image = original_image.Rotate( M_PI/15.0f, wxPoint(image_width/2, image_height/2), false );
+                break;
+
+                case 8:
+                    test_name = "Rotate_Interpolating";
+                    result_image = original_image.Rotate( M_PI/15.0f, wxPoint(image_width/2, image_height/2), true );
+                break;
+ 
+                default:
+                   test_name = "ERROR";
+                break;
+            }
+            sw.Pause();
+
+            if(openmp)
+                result_image_openmp = result_image;
+            else
+                result_image_normal = result_image;
+
+            result_image.SaveFile( image_path + wxT("\\_image_") + test_name + wxT("_") + openmp_label + wxT(".png"), wxBITMAP_TYPE_PNG );
+            wxLogMessage("%s (%s): %d ms", test_name, openmp_label, sw.Time() );
+        }
+
+        if( !CompareImages( result_image_openmp, result_image_normal) )
+        {
+            wxLogMessage( wxT("Warning: result images are not identical") );
+        }
+    }
 }
 
 

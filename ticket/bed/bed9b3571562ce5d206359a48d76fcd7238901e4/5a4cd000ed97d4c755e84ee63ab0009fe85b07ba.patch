Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/configure.in,v
retrieving revision 1.1187
diff -u2 -r1.1187 configure.in
--- configure.in
+++ configure.in
@@ -523,4 +523,5 @@
   DEFAULT_wxUSE_CHOICE=no
   DEFAULT_wxUSE_CHOICEBOOK=no
+  DEFAULT_wxUSE_COLLPANE=no
   DEFAULT_wxUSE_COLOURPICKERCTRL=no
   DEFAULT_wxUSE_COMBOBOX=no
@@ -744,4 +745,5 @@
   DEFAULT_wxUSE_CHOICE=yes
   DEFAULT_wxUSE_CHOICEBOOK=yes
+  DEFAULT_wxUSE_COLLPANE=yes
   DEFAULT_wxUSE_COLOURPICKERCTRL=yes
   DEFAULT_wxUSE_COMBOBOX=yes
@@ -1077,4 +1079,5 @@
   DEFAULT_wxUSE_CHOICE=yes
   DEFAULT_wxUSE_CHOICEBOOK=yes
+  DEFAULT_wxUSE_COLLPANE=yes
   DEFAULT_wxUSE_COLOURPICKERCTRL=yes
   DEFAULT_wxUSE_COMBOBOX=yes
@@ -1123,4 +1126,5 @@
   DEFAULT_wxUSE_CALCTRL=no
   DEFAULT_wxUSE_CARET=no
+  DEFAULT_wxUSE_COLLPANE=no
   DEFAULT_wxUSE_COMBOBOX=no
   DEFAULT_wxUSE_CHECKBOX=no
@@ -1180,4 +1184,5 @@
 WX_ARG_ENABLE(choice,      [  --enable-choice         use wxChoice class], wxUSE_CHOICE)
 WX_ARG_ENABLE(choicebook,  [  --enable-choicebook     use wxChoicebook class], wxUSE_CHOICEBOOK)
+WX_ARG_ENABLE(collpane,    [  --enable-collpane       use wxCollapsiblePane class], wxUSE_COLLPANE)
 WX_ARG_ENABLE(colourpicker,[  --enable-colourpicker   use wxColourPickerCtrl class], wxUSE_COLOURPICKERCTRL)
 WX_ARG_ENABLE(combobox,    [  --enable-combobox       use wxComboBox class], wxUSE_COMBOBOX)
@@ -5683,5 +5688,5 @@
 if test "$WXGTK20" = 1; then
     if test "$wxUSE_LIBHILDON" = "yes" ; then
-        PKG_CHECK_MODULES(HILDON, 
+        PKG_CHECK_MODULES(HILDON,
                           [hildon-lgpl >= 0.9],
             [
@@ -6576,4 +6581,10 @@
 fi
 
+if test "$wxUSE_COLLPANE" = "yes"; then
+  AC_DEFINE(wxUSE_COLLPANE)
+  USES_CONTROLS=1
+  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS collpane"
+fi
+
 if test "$wxUSE_COMBOBOX" = "yes"; then
   AC_DEFINE(wxUSE_COMBOBOX)
@@ -7589,5 +7600,5 @@
 
 dnl ---------------------------------------------------------------------------
-dnl Add Universal binary support 
+dnl Add Universal binary support
 dnl Note we don't do this earlier because adding these cpp/ld flags could
 dnl cause configure tests to fail.
@@ -7599,5 +7610,5 @@
         if test "x$wxUSE_UNIVERSAL_BINARY" == xyes; then
             OSX_UNIV_OPTS="-isysroot /Developer/SDKs/MacOSX10.4u.sdk"
-        else 
+        else
             dnl '' would mean universal with no SDK, which may be the case if
             dnl the compiler uses a sysroot by default
@@ -7677,5 +7688,5 @@
 fi
 
-dnl HACK ALERT!! 
+dnl HACK ALERT!!
 dnl For now, we need to alter bk-deps not to generate deps
 dnl when we've configured a Universal binary build.
Index: setup.h.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h.in,v
retrieving revision 1.239
diff -u2 -r1.239 setup.h.in
--- setup.h.in
+++ setup.h.in
@@ -319,4 +319,5 @@
 #define wxUSE_CHECKLISTBOX  0
 #define wxUSE_CHOICE        0
+#define wxUSE_COLLPANE      0
 #define wxUSE_COLOURPICKERCTRL 0
 #define wxUSE_COMBOBOX      0
Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/build/bakefiles/files.bkl,v
retrieving revision 1.394
diff -u2 -r1.394 build/bakefiles/files.bkl
--- build/bakefiles/files.bkl
+++ build/bakefiles/files.bkl
@@ -2956,4 +2956,5 @@
     src/xrc/xh_choicbk.cpp
     src/xrc/xh_clrpicker.cpp
+    src/xrc/xh_collpane.cpp
     src/xrc/xh_combo.cpp
     src/xrc/xh_datectrl.cpp
@@ -3013,4 +3014,5 @@
     wx/xrc/xh_choicbk.h
     wx/xrc/xh_clrpicker.h
+    wx/xrc/xh_collpane.h
     wx/xrc/xh_combo.h
     wx/xrc/xh_datectrl.h
Index: docs/latex/wx/collpane.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/collpane.tex,v
retrieving revision 1.2
diff -u2 -r1.2 docs/latex/wx/collpane.tex
--- docs/latex/wx/collpane.tex
+++ docs/latex/wx/collpane.tex
@@ -14,4 +14,12 @@
 used by the user to collapse or expand the pane's contents.
 
+Note that because of its nature of control which can dynamically (and drastically)
+change its size at run-time under user-input, when putting wxCollapsiblePane inside
+a \helpref{wxSizer}{wxsizer} you should be careful to add it with a proportion value
+of zero; this is because otherwise all other windows with non-null proportion values
+would automatically get resized each time the user expands or collaps the pane window.
+
+It is only available if \texttt{wxUSE\_COLLPANE} is set to $1$ (the default).
+
 \wxheading{Derived from}
 
@@ -27,7 +35,16 @@
 \wxheading{Window styles}
 
-There are no specific styles for this window.
+\twocolwidtha{5cm}%
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\windowstyle{wxCP\_DEFAULT\_STYLE}}{The default style: 0.}
+\end{twocollist}
+
+\wxheading{Event handling}
+
+\twocolwidtha{7cm}%
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf EVT\_COLLAPSIBLEPANE\_CHANGED(id, func)}}{The user showed or hidden the collapsible pane. }
+\end{twocollist}
 
-See also \helpref{window styles overview}{windowstyles}.
 
 \wxheading{See also}
Index: include/wx/chkconf.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/chkconf.h,v
retrieving revision 1.136
diff -u2 -r1.136 include/wx/chkconf.h
--- include/wx/chkconf.h
+++ include/wx/chkconf.h
@@ -441,4 +441,12 @@
 #endif /* !defined(wxUSE_CLIPBOARD) */
 
+#ifndef wxUSE_COLLPANE
+#   ifdef wxABORT_ON_CONFIG_ERROR
+#       error "wxUSE_COLLPANE must be defined."
+#   else
+#       define wxUSE_COLLPANE 0
+#   endif
+#endif /* !defined(wxUSE_COLLPANE) */
+
 #ifndef wxUSE_COLOURDLG
 #   ifdef wxABORT_ON_CONFIG_ERROR
Index: include/wx/collpane.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/collpane.h,v
retrieving revision 1.4
diff -u2 -r1.4 include/wx/collpane.h
--- include/wx/collpane.h
+++ include/wx/collpane.h
@@ -13,4 +13,9 @@
 #define _WX_COLLAPSABLE_PANE_H_BASE_
 
+#include "wx/defs.h"
+
+
+#if wxUSE_COLLPANE
+
 #include "wx/control.h"
 
@@ -20,5 +25,6 @@
 // ----------------------------------------------------------------------------
 
-#define wxCP_DEFAULT_STYLE          (0)
+#define wxCP_DEFAULT_STYLE          (wxNO_BORDER)
+#define wxCP_NO_TLW_RESIZE          (0x0002)
 
 class WXDLLIMPEXP_ADV wxCollapsiblePaneBase : public wxControl
@@ -82,5 +88,5 @@
 
 #define EVT_COLLAPSIBLEPANE_CHANGED(id, fn) \
-    wx__DECLARE_EVT1(wxEVT_COMMAND_COLLPANE_CHANGED, id, wxCollapsiblePaneEventFunction(fn))
+    wx__DECLARE_EVT1(wxEVT_COMMAND_COLLPANE_CHANGED, id, wxCollapsiblePaneEventHandler(fn))
 
 
@@ -89,7 +95,11 @@
 #else
     #include "wx/generic/collpaneg.h"
-    #define wxCollapsiblePane   wxGenericCollapsiblePane
+
+    // use a typedef and not a #define to avoid problems with XRC forward declarations
+    typedef wxCollapsiblePane wxGenericCollapsiblePane
 #endif
 
+#endif      // wxUSE_COLLPANE
+
 #endif
     // _WX_COLLAPSABLE_PANE_H_BASE_
Index: include/wx/setup_inc.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/setup_inc.h,v
retrieving revision 1.51
diff -u2 -r1.51 include/wx/setup_inc.h
--- include/wx/setup_inc.h
+++ include/wx/setup_inc.h
@@ -518,5 +518,5 @@
 // Default is 1.
 //
-// Recommended setting: 1 
+// Recommended setting: 1
 #define wxUSE_MEDIACTRL     1
 
@@ -613,4 +613,5 @@
 #define wxUSE_CHECKLISTBOX  1   // wxCheckListBox (requires wxUSE_OWNER_DRAWN)
 #define wxUSE_CHOICE        1   // wxChoice
+#define wxUSE_COLLPANE      1   // wxCollapsiblePane
 #define wxUSE_COLOURPICKERCTRL 1    // wxColourPickerCtrl
 #define wxUSE_COMBOBOX      1   // wxComboBox
Index: include/wx/setup_redirect.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/setup_redirect.h,v
retrieving revision 1.2
diff -u2 -r1.2 include/wx/setup_redirect.h
Index: include/wx/generic/collpaneg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/collpaneg.h,v
retrieving revision 1.5
diff -u2 -r1.5 include/wx/generic/collpaneg.h
--- include/wx/generic/collpaneg.h
+++ include/wx/generic/collpaneg.h
@@ -49,8 +49,11 @@
     {
         m_pButton = NULL;
-        m_pStatLine = NULL;
         m_pPane = NULL;
+        m_pStaticLine = NULL;
+        m_sz = NULL;
     }
 
+    ~wxGenericCollapsiblePane();
+
     bool Create(wxWindow *parent,
                 wxWindowID winid,
@@ -81,15 +84,14 @@
     // overridden methods
     virtual wxSize DoGetBestSize() const;
-
-    // internal helpers
-    void LayoutChildren();
+    bool Layout();
 
     wxString GetBtnLabel() const;
-
+    int GetBorder() const;
 
     // child controls
     wxButton *m_pButton;
-    wxStaticLine *m_pStatLine;
+    wxStaticLine *m_pStaticLine;
     wxWindow *m_pPane;
+    wxSizer *m_sz;
 
     // the button label without ">>" or "<<"
Index: include/wx/gtk/collpane.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/collpane.h,v
retrieving revision 1.2
diff -u2 -r1.2 include/wx/gtk/collpane.h
Index: include/wx/xrc/xh_all.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/xrc/xh_all.h,v
retrieving revision 1.19
diff -u2 -r1.19 include/wx/xrc/xh_all.h
--- include/wx/xrc/xh_all.h
+++ include/wx/xrc/xh_all.h
@@ -67,4 +67,5 @@
 #include "wx/xrc/xh_bmpcbox.h"
 #include "wx/xrc/xh_animatctrl.h"
+#include "wx/xrc/xh_collpane.h"
 
 #endif // _WX_XH_ALL_H_
Index: include/wx/xrc/xh_collpane.h
--- /dev/null
+++ include/wx/xrc/xh_collpane.h
@@ -0,0 +1,36 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_collpane.h
+// Purpose:     XML resource handler for wxCollapsiblePane
+// Author:      Francesco Montorsi
+// Created:     2006-10-27
+// RCS-ID:      $Id$
+// Copyright:   (c) 2006 Francesco Montorsi
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_COLLPANE_H_
+#define _WX_XH_COLLPANE_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_COLLPANE
+
+class WXDLLEXPORT wxCollapsiblePane;
+
+class WXDLLIMPEXP_XRC wxCollapsiblePaneXmlHandler : public wxXmlResourceHandler
+{
+    DECLARE_DYNAMIC_CLASS(wxCollapsiblePaneXmlHandler)
+
+public:
+    wxCollapsiblePaneXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    bool m_isInside;
+    wxCollapsiblePane *m_collpane;
+};
+
+#endif // wxUSE_XRC && wxUSE_COLLPANE
+
+#endif // _WX_XH_COLLPANE_H_
Index: samples/samples.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/samples.bkl,v
retrieving revision 1.19
diff -u2 -r1.19 samples/samples.bkl
--- samples/samples.bkl
+++ samples/samples.bkl
@@ -18,4 +18,5 @@
     <subproject id="caret" template="sub"/>
     <subproject id="checklst" template="sub"/>
+    <subproject id="collpane" template="sub"/>
     <subproject id="config" template="sub"/>
     <subproject id="combo" template="sub"/>
Index: samples/collpane/collpane.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/collpane.bkl,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/collpane.bkl
--- samples/collpane/collpane.bkl
+++ samples/collpane/collpane.bkl
@@ -6,4 +6,5 @@
     <exe id="collpane" template="wx_sample" template_append="wx_append">
         <sources>collpane.cpp</sources>
+        <wx-lib>adv</wx-lib>
         <wx-lib>core</wx-lib>
         <wx-lib>base</wx-lib>
Index: samples/collpane/collpane.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/collpane.cpp,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/collpane.cpp
--- samples/collpane/collpane.cpp
+++ samples/collpane/collpane.cpp
@@ -43,4 +43,5 @@
 #include "wx/filepicker.h"
 #include "wx/fontpicker.h"
+#include "wx/aboutdlg.h"
 
 // ----------------------------------------------------------------------------
@@ -55,4 +56,5 @@
     PANE_SETLABEL,
     PANE_SHOWDLG,
+    PANE_ABOUT = wxID_ABOUT,
     PANE_QUIT = wxID_EXIT
 };
@@ -85,4 +87,5 @@
     void OnShowDialog(wxCommandEvent& event);
     void Quit(wxCommandEvent& event);
+    void OnAbout(wxCommandEvent& event);
 
     // Menu command update functions
@@ -101,4 +104,5 @@
     MyDialog(wxFrame *parent);
     void OnToggleStatus(wxCommandEvent& WXUNUSED(ev));
+    void OnPaneChanged(wxCollapsiblePaneEvent& event);
 
 private:
@@ -140,4 +144,5 @@
     EVT_MENU(PANE_SETLABEL, MyFrame::OnSetLabel)
     EVT_MENU(PANE_SHOWDLG, MyFrame::OnShowDialog)
+    EVT_MENU(PANE_ABOUT, MyFrame::OnAbout)
     EVT_MENU(PANE_QUIT, MyFrame::Quit)
 
@@ -166,6 +171,10 @@
     paneMenu->Append(PANE_QUIT);
 
+    wxMenu *helpMenu = new wxMenu;
+    helpMenu->Append(PANE_ABOUT);
+
     wxMenuBar *menuBar = new wxMenuBar;
     menuBar->Append(paneMenu, _T("&Pane"));
+    menuBar->Append(helpMenu, _T("&Help"));
     SetMenuBar(menuBar);
 
@@ -212,4 +221,14 @@
 }
 
+void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
+{
+    wxAboutDialogInfo info;
+    info.SetName(_("wxCollapsiblePane sample"));
+    info.SetDescription(_("This sample program demonstrates usage of wxCollapsiblePane"));
+    info.SetCopyright(_T("(C) 2006 Francesco Montorsi <frm@users.sourceforge.net>"));
+
+    wxAboutBox(info);
+}
+
 void MyFrame::UpdateUI(wxUpdateUIEvent& event)
 {
@@ -218,4 +237,5 @@
 }
 
+
 // ----------------------------------------------------------------------------
 // MyDialog
@@ -229,4 +249,5 @@
 BEGIN_EVENT_TABLE(MyDialog, wxDialog)
     EVT_BUTTON(PANEDLG_TOGGLESTATUS_BTN, MyDialog::OnToggleStatus)
+    EVT_COLLAPSIBLEPANE_CHANGED(wxID_ANY, MyDialog::OnPaneChanged)
 END_EVENT_TABLE()
 
@@ -237,12 +258,12 @@
 {
     wxSizer *sz = new wxBoxSizer(wxVERTICAL);
-    sz->Add(new wxStaticText(this, -1, 
+    sz->Add(new wxStaticText(this, -1,
         wxT("This dialog allows you to test the wxCollapsiblePane control")),
         0, wxALL, 5);
-    sz->Add(new wxButton(this, PANEDLG_TOGGLESTATUS_BTN, wxT("Change status")), 
+    sz->Add(new wxButton(this, PANEDLG_TOGGLESTATUS_BTN, wxT("Change status")),
         1, wxGROW|wxALL, 5);
-    
+
     m_collPane = new wxCollapsiblePane(this, -1, wxT("Click here for a surprise"));
-    sz->Add(m_collPane, 1, wxGROW|wxALL, 5);
+    sz->Add(m_collPane, 0, wxGROW|wxALL, 5);
     sz->Add(new wxTextCtrl(this, -1, wxT("just a test")), 0, wxGROW|wxALL, 5);
     sz->AddSpacer(10);
@@ -268,2 +289,8 @@
 }
 
+void MyDialog::OnPaneChanged(wxCollapsiblePaneEvent &event)
+{
+    wxLogDebug(wxT("The pane has just been %s by the user"),
+               event.GetCollapsed() ? wxT("collapsed") : wxT("expanded"));
+}
+
Index: samples/collpane/collpane.dsp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/collpane.dsp,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/collpane.dsp
Index: samples/collpane/makefile.bcc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/makefile.bcc,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/makefile.bcc
Index: samples/collpane/makefile.gcc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/makefile.gcc,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/makefile.gcc
Index: samples/collpane/makefile.unx
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/makefile.unx,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/makefile.unx
Index: samples/collpane/makefile.vc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/makefile.vc,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/makefile.vc
Index: samples/collpane/makefile.wat
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/collpane/makefile.wat,v
retrieving revision 1.1
diff -u2 -r1.1 samples/collpane/makefile.wat
Index: samples/xrc/rc/appicon.ico
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/appicon.ico,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/appicon.ico
Index: samples/xrc/rc/appicon.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/appicon.xpm,v
retrieving revision 1.3
diff -u2 -r1.3 samples/xrc/rc/appicon.xpm
Index: samples/xrc/rc/artprov.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/artprov.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/artprov.xpm
Index: samples/xrc/rc/artprov.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/artprov.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/artprov.xrc
Index: samples/xrc/rc/basicdlg.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/basicdlg.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/basicdlg.xpm
Index: samples/xrc/rc/basicdlg.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/basicdlg.xrc,v
retrieving revision 1.3
diff -u2 -r1.3 samples/xrc/rc/basicdlg.xrc
Index: samples/xrc/rc/controls.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/controls.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/controls.xpm
Index: samples/xrc/rc/controls.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/controls.xrc,v
retrieving revision 1.14
diff -u2 -r1.14 samples/xrc/rc/controls.xrc
--- samples/xrc/rc/controls.xrc
+++ samples/xrc/rc/controls.xrc
@@ -1120,4 +1120,52 @@
 
                 <object class="notebookpage">
+                    <label>wxCollapsiblePane</label>
+                    <object class="wxPanel" name="collpane">
+                        <object class="wxFlexGridSizer">
+                            <cols>1</cols>
+                            <rows>1</rows>
+                            <vgap>0</vgap>
+                            <hgap>0</hgap>
+                            <growablecols>0</growablecols>
+                            <growablerows>0</growablerows>
+
+                            <object class="sizeritem">
+                                <flag>wxGROW|wxALL</flag>
+                                <border>5</border>
+                                <option>1</option>
+                                <object class="wxCollapsiblePane" name="controls_collpane">
+                                    <label>Details:</label>
+                                    <collapsed>0</collapsed>
+                                    <object class="panewindow">
+
+                                        <object class="wxFlexGridSizer">
+                                            <cols>1</cols>
+                                            <rows>1</rows>
+                                            <vgap>0</vgap>
+                                            <hgap>0</hgap>
+                                            <growablecols>0</growablecols>
+                                            <growablerows>0</growablerows>
+
+                                            <object class="sizeritem">
+                                                <flag>wxALIGN_CENTRE|wxALL</flag>
+                                                <border>5</border>
+                                                <object class="wxStaticText" name="controls_dialog_statictext">
+                                                    <label>
+Inside a wxCollapsiblePane you can put everything you want and
+lay them out using wxSizers, absolute positioning, everything you like!
+                                                    </label>
+                                                </object>
+                                            </object>
+                                        </object>
+
+                                    </object>
+                                </object>
+                            </object>
+
+                        </object>
+                    </object>
+                </object>
+
+                <object class="notebookpage">
                     <label>The Rest</label>
                     <object class="wxPanel" name="Rest">
Index: samples/xrc/rc/custclas.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/custclas.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/custclas.xpm
Index: samples/xrc/rc/custclas.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/custclas.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/custclas.xrc
Index: samples/xrc/rc/derivdlg.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/derivdlg.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/derivdlg.xpm
Index: samples/xrc/rc/derivdlg.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/derivdlg.xrc,v
retrieving revision 1.3
diff -u2 -r1.3 samples/xrc/rc/derivdlg.xrc
Index: samples/xrc/rc/fileopen.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/fileopen.gif,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/fileopen.gif
Index: samples/xrc/rc/filesave.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/filesave.gif,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/filesave.gif
Index: samples/xrc/rc/frame.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/frame.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/frame.xrc
Index: samples/xrc/rc/fuzzy.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/fuzzy.gif,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/fuzzy.gif
Index: samples/xrc/rc/menu.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/menu.xrc,v
retrieving revision 1.3
diff -u2 -r1.3 samples/xrc/rc/menu.xrc
Index: samples/xrc/rc/platform.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/platform.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/platform.xpm
Index: samples/xrc/rc/platform.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/platform.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/platform.xrc
Index: samples/xrc/rc/quotes.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/quotes.gif,v
retrieving revision 1.1
diff -u2 -r1.1 samples/xrc/rc/quotes.gif
Index: samples/xrc/rc/resource.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/resource.xrc,v
retrieving revision 1.4
diff -u2 -r1.4 samples/xrc/rc/resource.xrc
Index: samples/xrc/rc/stop.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/stop.xpm,v
retrieving revision 1.1
diff -u2 -r1.1 samples/xrc/rc/stop.xpm
Index: samples/xrc/rc/throbber.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/throbber.gif,v
retrieving revision 1.1
diff -u2 -r1.1 samples/xrc/rc/throbber.gif
Index: samples/xrc/rc/toolbar.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/toolbar.xrc,v
retrieving revision 1.3
diff -u2 -r1.3 samples/xrc/rc/toolbar.xrc
Index: samples/xrc/rc/uncenter.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/uncenter.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/uncenter.xpm
Index: samples/xrc/rc/uncenter.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/uncenter.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/uncenter.xrc
Index: samples/xrc/rc/update.gif
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/update.gif,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/update.gif
Index: samples/xrc/rc/variable.xpm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/variable.xpm,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/variable.xpm
Index: samples/xrc/rc/variable.xrc
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/xrc/rc/variable.xrc,v
retrieving revision 1.2
diff -u2 -r1.2 samples/xrc/rc/variable.xrc
Index: src/generic/collpaneg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/collpaneg.cpp,v
retrieving revision 1.8
diff -u2 -r1.8 src/generic/collpaneg.cpp
--- src/generic/collpaneg.cpp
+++ src/generic/collpaneg.cpp
@@ -17,8 +17,9 @@
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
+#include "wx/defs.h"
 
-#include "wx/collpane.h"
+#if wxUSE_COLLPANE && wxUSE_BUTTON && wxUSE_STATLINE
 
-#if wxUSE_BUTTON && wxUSE_STATLINE
+#include "wx/collpane.h"
 
 #ifndef WX_PRECOMP
@@ -34,8 +35,4 @@
 // ----------------------------------------------------------------------------
 
-// the number of pixels to leave between the button and the static line and
-// between the button and the pane
-#define wxCP_MARGIN         10
-
 // ============================================================================
 // implementation
@@ -72,8 +69,22 @@
     m_strLabel = label;
 
-    // create children; their size & position is set in OnSize()
+    // create children and lay them out using a wxBoxSizer
+    // (so that we automatically get RTL features)
     m_pButton = new wxButton(this, wxID_ANY, GetBtnLabel(), wxPoint(0, 0),
                              wxDefaultSize, wxBU_EXACTFIT);
-    m_pStatLine = new wxStaticLine(this, wxID_ANY);
+    m_pStaticLine = new wxStaticLine(this, wxID_ANY);
+#ifdef __WXMAC__
+    // on Mac we put the static libe above the button
+    m_sz = new wxBoxSizer(wxVERTICAL);
+    m_sz->Add(m_pStaticLine, 0, wxALL|wxGROW, GetBorder());
+    m_sz->Add(m_pButton, 0, wxLEFT|wxRIGHT|wxBOTTOM, GetBorder());
+#else
+    // on other platforms we put the static line and the button horizontally
+    m_sz = new wxBoxSizer(wxHORIZONTAL);
+    m_sz->Add(m_pButton, 0, wxLEFT|wxTOP|wxBOTTOM, GetBorder());
+    m_sz->Add(m_pStaticLine, 1, wxALIGN_CENTER|wxLEFT|wxRIGHT, GetBorder());
+#endif
+
+    // do not set sz as our sizers since we handle the pane window without using sizers
     m_pPane = new wxWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
                            wxNO_BORDER);
@@ -82,21 +93,30 @@
     m_pPane->Hide();
 
-    //CacheBestSize(GetBestSize());
     return true;
 }
 
-wxSize wxGenericCollapsiblePane::DoGetBestSize() const
+wxGenericCollapsiblePane::~wxGenericCollapsiblePane()
 {
-    wxSize sz = m_pButton->GetBestSize();
+    if (m_pButton && m_pStaticLine && m_sz)
+    {
+        m_pButton->SetContainingSizer(NULL);
+        m_pStaticLine->SetContainingSizer(NULL);
 
-    // set width
-    sz.SetWidth(sz.x + wxCP_MARGIN + m_pStatLine->GetBestSize().x);
-    const wxCoord paneWidth = m_pPane->GetBestSize().x;
-    if ( sz.x < paneWidth )
-        sz.x = paneWidth;
+        // our sizer is not deleted automatically since we didn't use SetSizer()!
+        wxDELETE(m_sz);
+    }
+}
+
+wxSize wxGenericCollapsiblePane::DoGetBestSize() const
+{
+    // NB: do not use GetSize() but rather GetMinSize()
+    wxSize sz = m_sz->GetMinSize();
 
     // when expanded, we need more vertical space
     if ( IsExpanded() )
-        sz.SetHeight(sz.y + wxCP_MARGIN + m_pPane->GetBestSize().y);
+    {
+        sz.SetWidth(wxMax( sz.GetWidth(), m_pPane->GetBestSize().x ));
+        sz.SetHeight(sz.y + GetBorder() + m_pPane->GetBestSize().y);
+    }
 
     return sz;
@@ -114,14 +134,25 @@
     SetSize(sz);
 
+    if (this->HasFlag(wxCP_NO_TLW_RESIZE))
+    {
+        // the user asked to explicitely handle the resizing itself...
+        return;
+    }
+
+
+    //
+    // NB: the following block of code has been accurately designed to
+    //     as much flicker-free as possible; be careful when modifying it!
+    //
+
     wxTopLevelWindow *
         top = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
     if ( top )
     {
-        // we've changed our size, thus our top level parent needs to relayout
-        // itself
-        top->Layout();
+        // NB: don't Layout() the 'top' window as its size has not been correctly
+        //     updated yet and we don't want to do an initial Layout() with the old
+        //     size immediately followed by a SetClientSize/Fit call for the new
+        //     size; that would provoke flickering!
 
-        // FIXME: this makes wxGenericCollapsiblePane behave as the user expect
-        //        but maybe there are cases where this is unwanted!
         if (top->GetSizer())
 #ifdef __WXGTK__
@@ -143,10 +174,21 @@
             if ( IsCollapsed() )
             {
-                // use SetClientSize() and not SetSize() otherwise the size for
-                // e.g. a wxFrame with a menubar wouldn't be correctly set
-                top->SetClientSize(sz);
+                // expanded -> collapsed transition
+                if (top->GetSizer())
+                {
+                    // we have just set the size hints...
+                    wxSize sz = top->GetSizer()->CalcMin();
+
+                    // use SetClientSize() and not SetSize() otherwise the size for
+                    // e.g. a wxFrame with a menubar wouldn't be correctly set
+                    top->SetClientSize(sz);
+                }
+                else
+                    top->Layout();
             }
             else
             {
+                // collapsed -> expanded transition
+
                 // force our parent to "fit", i.e. expand so that it can honour
                 // our minimal size
@@ -179,21 +221,44 @@
     m_pButton->SetBestFittingSize();
 
-    LayoutChildren();
+    Layout();
 }
 
-void wxGenericCollapsiblePane::LayoutChildren()
+bool wxGenericCollapsiblePane::Layout()
 {
-    wxSize btnSz = m_pButton->GetSize();
+    if (!m_pButton || !m_pStaticLine || !m_pPane || !m_sz)
+        return false;     // we need to complete the creation first!
+
+    wxSize oursz(GetSize());
 
-    // the button position & size are always ok...
+    // move & resize the button and the static line
+    m_sz->SetDimension(0, 0, oursz.GetWidth(), m_sz->GetMinSize().GetHeight());
+    m_sz->Layout();
 
-    // move & resize the static line
-    m_pStatLine->SetSize(btnSz.x + wxCP_MARGIN, btnSz.y/2,
-                         GetSize().x - btnSz.x - wxCP_MARGIN, -1,
-                         wxSIZE_USE_EXISTING);
+    if ( IsExpanded() )
+    {
+        // move & resize the container window
+        int yoffset = m_sz->GetSize().GetHeight() + GetBorder();
+        m_pPane->SetSize(0, yoffset,
+                        oursz.x, oursz.y - yoffset);
+
+        // this is very important to make the pane window layout show correctly
+        m_pPane->Layout();
+    }
 
-    // move & resize the container window
-    m_pPane->SetSize(0, btnSz.y + wxCP_MARGIN,
-                     GetSize().x, GetSize().y - btnSz.y - wxCP_MARGIN);
+    return true;
+}
+
+int wxGenericCollapsiblePane::GetBorder() const
+{
+#if defined( __WXMAC__ )
+    return 6;
+#elif defined(__WXGTK20__)
+    return 3;
+#elif defined(__WXMSW__)
+    wxASSERT(m_pButton);
+    return m_pButton->ConvertDialogToPixels(wxSize(2, 0)).x;
+#else
+    return 5;
+#endif
 }
 
@@ -230,13 +295,6 @@
 #endif
 
-
-    if (!m_pButton || !m_pStatLine || !m_pPane)
-        return;     // we need to complete the creation first!
-
-    LayoutChildren();
-
-    // this is very important to make the pane window layout show correctly
-    m_pPane->Layout();
+    Layout();
 }
 
-#endif // wxUSE_BUTTON && wxUSE_STATLINE
+#endif // wxUSE_COLLPANE && wxUSE_BUTTON && wxUSE_STATLINE
Index: src/gtk/collpane.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/collpane.cpp,v
retrieving revision 1.6
diff -u2 -r1.6 src/gtk/collpane.cpp
--- src/gtk/collpane.cpp
+++ src/gtk/collpane.cpp
@@ -18,8 +18,9 @@
 #include "wx/wxprec.h"
 
-#ifdef __WXGTK24__
+#if wxUSE_COLLPANE && defined( __WXGTK24__ )
 
 #include "wx/collpane.h"
 #include "wx/gtk/private.h"
+#include "wx/gtk/win_gtk.h"
 
 #include <gtk/gtkexpander.h>
@@ -51,16 +52,14 @@
     if ( p->IsExpanded() )
     {
-        // unfortunately there's no clean way to retrieve the minimal size of
-        // the expanded pane in this handler or in other handlers for the
-        // signals generated by user clicks on the GtkExpander button:
-        // p->GetBestSize() or p->GetMinSize() would still return the size for
-        // the collapsed expander even if the collapsed->expanded transition
-        // has already been completed (this because GTK+ queues some resize
-        // calls which still must be processed). So, the only solution to
-        // correctly set the size hints for this window is to calculate the
-        // expanded size ourselves, without relying on p->Get[Best|Min]Size:
-        sz = p->GetMinSize();
-        sz.SetWidth(wxMax(sz.x, p->GetPane()->GetMinSize().x));
-        sz.SetHeight(sz.y + p->GetPane()->GetMinSize().y + 10);
+        // NB: we cannot use the p->GetBestSize() or p->GetMinSize() functions
+        //     here as they would return the size for the collapsed expander
+        //     even if the collapsed->expanded transition has already been
+        //     completed; we solve this problem doing:
+
+        sz = p->m_szCollapsed;
+
+        wxSize panesz = p->GetPane()->GetBestSize();
+        sz.x = wxMax(sz.x, panesz.x);
+        sz.y += gtk_expander_get_spacing(GTK_EXPANDER(p->m_widget)) + panesz.y;
     }
     else // collapsed
@@ -73,6 +72,93 @@
     }
 
+#if 1
+    // this works good but in the expanded->collapsed transition it provokes
+    // a lot of flicker!!!
+    //
+    // It also has the problem that in the collapsed->expanded transition with the
+    // "clearlooks" GTK theme I get:
+    //
+    // ** (collpane:18928): CRITICAL **: clearlooks_style_draw_focus: assertion `height >= -1' failed
+    // ** (collpane:18928): CRITICAL **: clearlooks_style_draw_focus: assertion `height >= -1' failed
+    //
+    // Not sure however if this is a ClearLooks bug or rather my bug.
+    // Note that those warnings only appear:
+    //  1) if you're using clearlooks theme
+    //  2) if you use the "Change status" wxButton in samples/collpane application
     p->OnStateChange(sz);
 
+#else       // flicker-free code
+
+
+    // need to update our size hints
+    // NB: this function call won't actually do any long operation
+    //     (redraw/relayouting/resizing) so that it's flicker-free
+    p->SetMinSize(sz);
+
+    if (p->HasFlag(wxCP_NO_TLW_RESIZE))
+    {
+        // the user asked to explicitely handle the resizing itself...
+        return;
+    }
+
+    wxTopLevelWindow *
+        top = wxDynamicCast(wxGetTopLevelParent(p), wxTopLevelWindow);
+    if ( top && top->GetSizer() )
+    {
+        // recalculate minimal size of the top window
+        wxSize sz = top->GetSizer()->CalcMin();
+
+        // FIXME:
+        // THE PROBLEM WITH THIS CODE IS THAT IN THE EXPANDED->COLLAPSED TRANSITION
+        // IT DOES *NOT* SHRINK THE TOP WINDOW.
+        // However it's flicker-free, native code and it also does not have the
+        // ** (collpane:18928): CRITICAL **: clearlooks_style_draw_focus: assertion `height >= -1' failed
+        // problem
+
+        if (top->m_mainWidget)
+        {
+            wxLogDebug(wxT("setting min size to %d;%d"), sz.x, sz.y);
+
+            // set size hints
+            GdkGeometry     geom;
+
+            geom.min_width = sz.x;
+            geom.min_height = sz.y;
+
+            gtk_window_set_geometry_hints( GTK_WINDOW(top->m_widget),
+                                        (GtkWidget*) NULL,
+                                        &geom,
+                                        GDK_HINT_MIN_SIZE );
+            //gtk_window_set_default_size( GTK_WINDOW(top->m_widget), sz.x, sz.y );
+
+
+            /* I revert back to wxGTK's original behaviour. m_mainWidget holds the
+            * menubar, the toolbar and the client area, which is represented by
+            * m_wxwindow.
+            * this hurts in the eye, but I don't want to call SetSize()
+            * because I don't want to call any non-native functions here. */
+
+            top->m_width = sz.x;
+            top->m_height = sz.y;
+
+            int client_x = top->m_miniEdge;
+            int client_y = top->m_miniEdge + top->m_miniTitle;
+            int client_w = top->m_width - 2*top->m_miniEdge;
+            int client_h = top->m_height - 2*top->m_miniEdge - top->m_miniTitle;
+            if (client_w < 0)
+                client_w = 0;
+            if (client_h < 0)
+                client_h = 0;
+
+            // Let the parent perform the resize
+            gtk_pizza_set_size( GTK_PIZZA(top->m_mainWidget),
+                                top->m_wxwindow,
+                                client_x, client_y, client_w, client_h );
+
+            gtk_widget_set_size_request( top->m_wxwindow, sz.x, sz.y );
+
+        }
+    }
+#endif
     if ( p->m_bIgnoreNextChange )
     {
@@ -174,4 +260,5 @@
 
         // notice that we do not cache our best size here as it changes
+        // all times the user expands/hide our pane
         return wxSize(req.width, req.height);
     }
@@ -207,5 +294,11 @@
 {
     if (!gtk_check_version(2,4,0))
+    {
         gtk_expander_set_label(GTK_EXPANDER(m_widget), wxGTK_CONV(str));
+
+        // FIXME: we need to update our collapsed width in some way but using GetBestSize()
+        // we may get the size of the control with the pane size summed up if we are expanded!
+        //m_szCollapsed.x = GetBestSize().x;
+    }
     else
         wxGenericCollapsiblePane::SetLabel(str);
@@ -225,5 +318,5 @@
     // here we need to resize the pane window otherwise, even if the GtkExpander container
     // is expanded or shrinked, the pane window won't be updated!
-    m_pPane->SetSize(ev.GetSize());
+    m_pPane->SetSize(ev.GetSize().x, ev.GetSize().y - m_szCollapsed.y);
 
     // we need to explicitely call m_pPane->Layout() or else it won't correctly relayout
@@ -232,4 +325,4 @@
 }
 
-#endif //  __WXGTK24__
+#endif //  wxUSE_COLLPANE && defined( __WXGTK24__ )
 
Index: src/xrc/xh_collpane.cpp
--- /dev/null
+++ src/xrc/xh_collpane.cpp
@@ -0,0 +1,96 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_collpane.cpp
+// Purpose:     XML resource handler for wxCollapsiblePane
+// Author:      Francesco Montorsi
+// Created:     2006-10-27
+// RCS-ID:      $Id$
+// Copyright:   (c) 2006 Francesco Montorsi
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_COLLPANE
+
+#include "wx/xrc/xh_collpane.h"
+#include "wx/collpane.h"
+
+IMPLEMENT_DYNAMIC_CLASS(wxCollapsiblePaneXmlHandler, wxXmlResourceHandler)
+
+wxCollapsiblePaneXmlHandler::wxCollapsiblePaneXmlHandler() : wxXmlResourceHandler()
+{
+    XRC_ADD_STYLE(wxCP_NO_TLW_RESIZE);
+    XRC_ADD_STYLE(wxCP_DEFAULT_STYLE);
+    AddWindowStyles();
+}
+
+wxObject *wxCollapsiblePaneXmlHandler::DoCreateResource()
+{
+    if (m_class == wxT("panewindow"))   // read the XRC for the pane window
+    {
+        wxXmlNode *n = GetParamNode(wxT("object"));
+
+        if ( !n )
+            n = GetParamNode(wxT("object_ref"));
+
+        if (n)
+        {
+            bool old_ins = m_isInside;
+            m_isInside = false;
+            wxObject *item = CreateResFromNode(n, m_collpane->GetPane(), NULL);
+            m_isInside = old_ins;
+
+            return item;
+        }
+        else
+        {
+            wxLogError(wxT("Error in resource: no control within collapsible pane's <panewindow> tag."));
+            return NULL;
+        }
+    }
+    else
+    {
+        XRC_MAKE_INSTANCE(ctrl, wxCollapsiblePane)
+
+        wxString label = GetParamValue(wxT("label"));
+        if (label.empty())
+        {
+            wxLogError(wxT("Error in resource: empty label for wxCollapsiblePane"));
+            return NULL;
+        }
+
+        ctrl->Create(m_parentAsWindow,
+                    GetID(),
+                    label,
+                    GetPosition(), GetSize(),
+                    GetStyle(_T("style"), wxCP_DEFAULT_STYLE),
+                    wxDefaultValidator,
+                    GetName());
+
+        ctrl->Collapse(GetBool(_T("collapsed")));
+        SetupWindow(ctrl);
+
+        wxCollapsiblePane *old_par = m_collpane;
+        m_collpane = ctrl;
+        bool old_ins = m_isInside;
+        m_isInside = true;
+        CreateChildren(m_collpane, true/*only this handler*/);
+        m_isInside = old_ins;
+        m_collpane = old_par;
+
+        return ctrl;
+    }
+}
+
+bool wxCollapsiblePaneXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return IsOfClass(node, wxT("wxCollapsiblePane")) ||
+            (m_isInside && IsOfClass(node, wxT("panewindow")));
+}
+
+#endif // wxUSE_XRC && wxUSE_COLLPANE
Index: src/xrc/xmlrsall.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xrc/xmlrsall.cpp,v
retrieving revision 1.32
diff -u2 -r1.32 src/xrc/xmlrsall.cpp
--- src/xrc/xmlrsall.cpp
+++ src/xrc/xmlrsall.cpp
@@ -64,4 +64,7 @@
     AddHandler(new wxChoicebookXmlHandler);
 #endif
+#if wxUSE_COLLPANE
+    AddHandler(new wxCollapsiblePaneXmlHandler);
+#endif
 #if wxUSE_COLOURPICKERCTRL
     AddHandler(new wxColourPickerCtrlXmlHandler);

 	  	 

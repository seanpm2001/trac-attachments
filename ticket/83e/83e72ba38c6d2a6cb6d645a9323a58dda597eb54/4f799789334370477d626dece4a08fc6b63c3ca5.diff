Index: wxWindows/include/wx/generic/filedlgg.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/generic/filedlgg.h,v
retrieving revision 1.22
diff -b -u -2 -r1.22 filedlgg.h
--- wxWindows/include/wx/generic/filedlgg.h	2003/04/03 13:10:06	1.22
+++ wxWindows/include/wx/generic/filedlgg.h	2003/04/06 01:08:53
@@ -19,4 +19,5 @@
 #include "wx/dialog.h"
 #include "wx/listctrl.h"
+#include "wx/datetime.h"
 
 //-----------------------------------------------------------------------------
@@ -24,15 +25,16 @@
 //-----------------------------------------------------------------------------
 
-class wxCheckBox;
-class wxChoice;
-class wxFileData;
-class wxFileCtrl;
-class wxGenericFileDialog;
-class wxListEvent;
-class wxListItem;
-class wxStaticText;
-class wxTextCtrl;
+class WXDLLEXPORT wxBitmapButton;
+class WXDLLEXPORT wxCheckBox;
+class WXDLLEXPORT wxChoice;
+class WXDLLEXPORT wxFileData;
+class WXDLLEXPORT wxFileCtrl;
+class WXDLLEXPORT wxGenericFileDialog;
+class WXDLLEXPORT wxListEvent;
+class WXDLLEXPORT wxListItem;
+class WXDLLEXPORT wxStaticText;
+class WXDLLEXPORT wxTextCtrl;
 
-#if defined(__WXUNIVERSAL__)||defined(__WXGTK__)||defined(__WXX11__)||defined(__WXMGL__)
+#if defined(__WXUNIVERSAL__)||defined(__WXGTK__)||defined(__WXX11__)||defined(__WXMGL__)||defined(__WXCOCOA__)
     #define USE_GENERIC_FILEDIALOG
 #endif
@@ -105,6 +107,8 @@
     void OnCheck( wxCommandEvent &event );
 
-    void HandleAction( const wxString &fn );
+    virtual void HandleAction( const wxString &fn );
 
+    virtual void UpdateControls();
+
 protected:
     // use the filter with the given index
@@ -124,4 +128,6 @@
     wxCheckBox    *m_check;
     wxStaticText  *m_static;
+    wxBitmapButton *m_upDirButton;
+    wxBitmapButton *m_newDirButton;
 
 private:
@@ -202,5 +208,5 @@
     enum fileType
     {
-        is_file  = 0,
+        is_file  = 0x0000,
         is_dir   = 0x0001,
         is_link  = 0x0002,
@@ -209,49 +215,56 @@
     };
 
-    wxFileData( const wxString &name, const wxString &fname, fileType type );
-    wxString GetName() const;
-    wxString GetFullName() const;
-    wxString GetHint() const;
+    wxFileData( const wxString &filePath, const wxString &fileName,
+                fileType type, int image_id );
+
+    // get the name of the file, dir, drive
+    wxString GetFileName() const { return m_fileName; }
+    // get the full path + name of the file, dir, path
+    wxString GetFilePath() const { return m_filePath; }
+    long GetSize() const { return m_size; }
+    // Get the type of file, either file extension or <DIR>, <LINK>, <DRIVE>
+    wxString GetType() const;
+    // get the last modification time
+    wxDateTime GetTime() const { return m_dateTime; }
+    wxString GetModificationTime() const;
+    // in UNIX get rwx for file, in MSW get attributes ARHS
+    wxString GetPermissions() const { return m_permissions; }
+    int GetImageId() const { return m_image; }
+
+    bool IsDir() const   { return (m_type & is_dir  ) != 0; }
+    bool IsLink() const  { return (m_type & is_link ) != 0; }
+    bool IsExe() const   { return (m_type & is_exe  ) != 0; }
+    bool IsDrive() const { return (m_type & is_drive) != 0; }
 
+    int GetFileType() const { return m_type; }
+
     // the wxFileCtrl fields in report view
     enum fileListFieldType
     {
         FileList_Name,
+        FileList_Size,
         FileList_Type,
-        FileList_Date,
         FileList_Time,
-#ifdef __UNIX__
+#if defined(__UNIX__) || defined(__WIN32__)
         FileList_Perm,
-#endif // __UNIX__
+#endif // defined(__UNIX__) || defined(__WIN32__)
         FileList_Max
     };
 
     wxString GetEntry( fileListFieldType num ) const;
-
-    bool IsDir() const;
-    bool IsLink() const;
-    bool IsExe() const;
-    bool IsDrive() const;
-    long GetSize() const { return m_size; }
-    int GetHour() const { return m_hour; }
-    int GetMinute() const { return m_minute; }
-    int GetYear() const { return m_year; }
-    int GetMonth() const { return m_month; }
-    int GetDay() const { return m_day; }
 
+    // Get a string representation of the file info
+    wxString GetHint() const;
     void MakeItem( wxListItem &item );
-    void SetNewName( const wxString &name, const wxString &fname );
+    void SetNewName( const wxString &filePath, const wxString &fileName );
 
 private:
-    wxString m_name;
     wxString m_fileName;
+    wxString   m_filePath;
     long     m_size;
-    int      m_hour;
-    int      m_minute;
-    int      m_year;
-    int      m_month;
-    int      m_day;
+    wxDateTime m_dateTime;
     wxString m_permissions;
     int      m_type;
+    int        m_image;
 };
 
@@ -275,20 +288,18 @@
     virtual ~wxFileCtrl();
 
-    void ChangeToListMode();
-    void ChangeToReportMode();
-    void ChangeToIconMode();
-    void ShowHidden( bool show = TRUE );
+    virtual void ChangeToListMode();
+    virtual void ChangeToReportMode();
+    virtual void ChangeToSmallIconMode();
+    virtual void ShowHidden( bool show = TRUE );
     bool GetShowHidden() const { return m_showHidden; }
 
-    long Add( wxFileData *fd, wxListItem &item );
-    void UpdateFiles();
-    virtual void StatusbarText( wxChar *WXUNUSED(text) ) {};
-    void MakeDir();
-    void GoToParentDir();
-    void GoToHomeDir();
-    void GoToDir( const wxString &dir );
-    void SetWild( const wxString &wild );
+    virtual long Add( wxFileData *fd, wxListItem &item );
+    virtual void UpdateFiles();
+    virtual void MakeDir();
+    virtual void GoToParentDir();
+    virtual void GoToHomeDir();
+    virtual void GoToDir( const wxString &dir );
+    virtual void SetWild( const wxString &wild );
     wxString GetWild() const { return m_wild; }
-    void GetDir( wxString &dir );
     wxString GetDir() const { return m_dirName; }
 
@@ -296,16 +307,10 @@
     void OnListEndLabelEdit( wxListEvent &event );
     void OnListColClick( wxListEvent &event );
-
-    // Associate commonly used UI controls with wxFileCtrl so that they can be
-    // disabled when they cannot be used (e.g. can't go to parent directory
-    // if wxFileCtrl already is in the root dir):
-    void SetGoToParentControl(wxWindow *ctrl) { m_goToParentControl = ctrl; }
-    void SetNewDirControl(wxWindow *ctrl) { m_newDirControl = ctrl; }
 
-    void SortItems(wxFileData::fileListFieldType field, bool foward);
-    bool GetSortDirection() const { return m_sort_foward > 0; }
+    virtual void SortItems(wxFileData::fileListFieldType field, bool foward);
+    bool GetSortDirection() const { return m_sort_foward; }
     wxFileData::fileListFieldType GetSortField() const { return m_sort_field; }
 
-private:
+protected:
     void FreeItemData(const wxListItem& item);
     void FreeAllItemsData();
@@ -314,11 +319,9 @@
     bool          m_showHidden;
     wxString      m_wild;
-
-    wxWindow     *m_goToParentControl;
-    wxWindow     *m_newDirControl;
 
-    int m_sort_foward;
+    bool m_sort_foward;
     wxFileData::fileListFieldType m_sort_field;
 
+private:
     DECLARE_DYNAMIC_CLASS(wxFileCtrl);
     DECLARE_EVENT_TABLE()
Index: wxWindows/include/wx/generic/dirctrlg.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/generic/dirctrlg.h,v
retrieving revision 1.16
diff -b -u -2 -r1.16 dirctrlg.h
--- wxWindows/include/wx/generic/dirctrlg.h	2003/01/02 23:37:40	1.16
+++ wxWindows/include/wx/generic/dirctrlg.h	2003/04/06 01:08:53
@@ -32,4 +32,6 @@
 
 class WXDLLEXPORT wxTextCtrl;
+class WXDLLEXPORT wxImageList;
+class WXDLLEXPORT wxHashTable;
 
 //-----------------------------------------------------------------------------
@@ -173,5 +175,4 @@
     bool            m_showHidden;
     wxTreeItemId    m_rootId;
-    wxImageList*    m_imageList;
     wxString        m_defaultPath; // Starting path
     long            m_styleEx; // Extended style
@@ -235,4 +236,40 @@
 #define wxID_TREECTRL          7000
 #define wxID_FILTERLISTCTRL    7001
+
+//-------------------------------------------------------------------------
+// wxFileIconsTable - use wxTheFileIconsTable which is created as necessary
+//-------------------------------------------------------------------------
+
+class WXDLLEXPORT wxFileIconsTable
+{
+public:
+    wxFileIconsTable();
+    ~wxFileIconsTable();
+
+    enum iconId_Type
+    {
+        folder,
+        folder_open,
+        computer,
+        drive,
+        cdrom,
+        floppy,
+        removeable,
+        file,
+        executable
+    };
+
+    int GetIconID(const wxString& extension, const wxString& mime = wxEmptyString);
+    wxImageList *GetSmallImageList();
+
+protected:
+    void Create();  // create on first use
+
+    wxImageList *m_smallImageList;
+    wxHashTable *m_HashTable;
+};
+
+// The global fileicons table
+WXDLLEXPORT_DATA(extern wxFileIconsTable *) wxTheFileIconsTable;
 
 #endif // wxUSE_DIRDLG
Index: wxWindows/src/generic/filedlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/filedlgg.cpp,v
retrieving revision 1.86
diff -b -u -2 -r1.86 filedlgg.cpp
--- wxWindows/src/generic/filedlgg.cpp	2003/04/03 13:10:08	1.86
+++ wxWindows/src/generic/filedlgg.cpp	2003/04/06 01:08:53
@@ -31,4 +31,5 @@
 #if wxUSE_FILEDLG
 
+// NOTE : it probably also supports MAC, untested
 #if !defined(__UNIX__) && !defined(__DOS__) && !defined(__WIN32__)
 #error wxGenericFileDialog currently only supports Unix, win32 and DOS
@@ -47,15 +48,12 @@
 #include "wx/bmpbuttn.h"
 #include "wx/tokenzr.h"
-#include "wx/mimetype.h"
-#include "wx/image.h"
-#include "wx/module.h"
 #include "wx/config.h"
 #include "wx/imaglist.h"
 #include "wx/dir.h"
 #include "wx/artprov.h"
-#include "wx/hash.h"
 #include "wx/file.h"        // for wxS_IXXX constants only
 #include "wx/filedlg.h"     // wxOPEN, wxSAVE...
 #include "wx/generic/filedlgg.h"
+#include "wx/generic/dirctrlg.h" // for wxFileIconsTable
 
 #if wxUSE_TOOLTIPS
@@ -84,221 +82,31 @@
 
 // ----------------------------------------------------------------------------
-// private classes - icons list management
+// private functions
 // ----------------------------------------------------------------------------
-
-class wxFileIconEntry : public wxObject
-{
-public:
-    wxFileIconEntry(int i) { id = i; }
-
-    int id;
-};
-
-
-class wxFileIconsTable
-{
-public:
-    wxFileIconsTable();
-
-    int GetIconID(const wxString& extension, const wxString& mime = wxEmptyString);
-    wxImageList *GetImageList() { return &m_ImageList; }
-
-protected:
-    wxImageList m_ImageList;
-    wxHashTable m_HashTable;
-};
-
-static wxFileIconsTable *g_IconsTable = NULL;
-
-#define FI_FOLDER     0
-#define FI_UNKNOWN    1
-#define FI_EXECUTABLE 2
-
-wxFileIconsTable::wxFileIconsTable() :
-                    m_ImageList(16, 16),
-                    m_HashTable(wxKEY_STRING)
-{
-    m_HashTable.DeleteContents(TRUE);
-    // FI_FOLDER:
-    m_ImageList.Add(wxArtProvider::GetBitmap(wxART_FOLDER, wxART_CMN_DIALOG));
-    // FI_UNKNOWN:
-    m_ImageList.Add(wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_CMN_DIALOG));
-    // FI_EXECUTABLE:
-    if (GetIconID(wxEmptyString, _T("application/x-executable")) == FI_UNKNOWN)
-    {
-        m_ImageList.Add(wxArtProvider::GetBitmap(wxART_EXECUTABLE_FILE, wxART_CMN_DIALOG));
-        m_HashTable.Delete(_T("exe"));
-        m_HashTable.Put(_T("exe"), new wxFileIconEntry(FI_EXECUTABLE));
-    }
-    /* else put into list by GetIconID
-       (KDE defines application/x-executable for *.exe and has nice icon)
-     */
-}
-
-
-
-#if wxUSE_MIMETYPE
-// VS: we don't need this function w/o wxMimeTypesManager because we'll only have
-//     one icon and we won't resize it
-
-static wxBitmap CreateAntialiasedBitmap(const wxImage& img)
-{
-    wxImage smallimg (16, 16);
-    unsigned char *p1, *p2, *ps;
-    unsigned char mr = img.GetMaskRed(),
-                  mg = img.GetMaskGreen(),
-                  mb = img.GetMaskBlue();
-
-    unsigned x, y;
-    unsigned sr, sg, sb, smask;
-
-    p1 = img.GetData(), p2 = img.GetData() + 3 * 32, ps = smallimg.GetData();
-    smallimg.SetMaskColour(mr, mr, mr);
-
-    for (y = 0; y < 16; y++)
-    {
-        for (x = 0; x < 16; x++)
-        {
-            sr = sg = sb = smask = 0;
-            if (p1[0] != mr || p1[1] != mg || p1[2] != mb)
-                sr += p1[0], sg += p1[1], sb += p1[2];
-            else smask++;
-            p1 += 3;
-            if (p1[0] != mr || p1[1] != mg || p1[2] != mb)
-                sr += p1[0], sg += p1[1], sb += p1[2];
-            else smask++;
-            p1 += 3;
-            if (p2[0] != mr || p2[1] != mg || p2[2] != mb)
-                sr += p2[0], sg += p2[1], sb += p2[2];
-            else smask++;
-            p2 += 3;
-            if (p2[0] != mr || p2[1] != mg || p2[2] != mb)
-                sr += p2[0], sg += p2[1], sb += p2[2];
-            else smask++;
-            p2 += 3;
-
-            if (smask > 2)
-                ps[0] = ps[1] = ps[2] = mr;
-            else
-                ps[0] = sr >> 2, ps[1] = sg >> 2, ps[2] = sb >> 2;
-            ps += 3;
-        }
-        p1 += 32 * 3, p2 += 32 * 3;
-    }
-
-    return wxBitmap(smallimg);
-}
-
-// finds empty borders and return non-empty area of image:
-static wxImage CutEmptyBorders(const wxImage& img)
-{
-    unsigned char mr = img.GetMaskRed(),
-                  mg = img.GetMaskGreen(),
-                  mb = img.GetMaskBlue();
-    unsigned char *dt = img.GetData(), *dttmp;
-    unsigned w = img.GetWidth(), h = img.GetHeight();
-
-    unsigned top, bottom, left, right, i;
-    bool empt;
-
-#define MK_DTTMP(x,y)      dttmp = dt + ((x + y * w) * 3)
-#define NOEMPTY_PIX(empt)  if (dttmp[0] != mr || dttmp[1] != mg || dttmp[2] != mb) {empt = FALSE; break;}
-
-    for (empt = TRUE, top = 0; empt && top < h; top++)
-    {
-        MK_DTTMP(0, top);
-        for (i = 0; i < w; i++, dttmp+=3)
-            NOEMPTY_PIX(empt)
-    }
-    for (empt = TRUE, bottom = h-1; empt && bottom > top; bottom--)
-    {
-        MK_DTTMP(0, bottom);
-        for (i = 0; i < w; i++, dttmp+=3)
-            NOEMPTY_PIX(empt)
-    }
-    for (empt = TRUE, left = 0; empt && left < w; left++)
-    {
-        MK_DTTMP(left, 0);
-        for (i = 0; i < h; i++, dttmp+=3*w)
-            NOEMPTY_PIX(empt)
-    }
-    for (empt = TRUE, right = w-1; empt && right > left; right--)
-    {
-        MK_DTTMP(right, 0);
-        for (i = 0; i < h; i++, dttmp+=3*w)
-            NOEMPTY_PIX(empt)
-    }
-    top--, left--, bottom++, right++;
-
-    return img.GetSubImage(wxRect(left, top, right - left + 1, bottom - top + 1));
-}
-#endif // wxUSE_MIMETYPE
-
 
-
-int wxFileIconsTable::GetIconID(const wxString& extension, const wxString& mime)
+static
+int wxFileDataNameCompare( long data1, long data2, long data)
 {
-#if wxUSE_MIMETYPE
-    if (!extension.IsEmpty())
-    {
-        wxFileIconEntry *entry = (wxFileIconEntry*) m_HashTable.Get(extension);
-        if (entry) return (entry -> id);
-    }
-
-    wxFileType *ft = (mime.IsEmpty()) ?
-                   wxTheMimeTypesManager -> GetFileTypeFromExtension(extension) :
-                   wxTheMimeTypesManager -> GetFileTypeFromMimeType(mime);
-    wxIcon ic;
-    if (ft == NULL || (!ft -> GetIcon(&ic)) || (!ic.Ok()))
-    {
-        int newid = FI_UNKNOWN;
-        m_HashTable.Put(extension, new wxFileIconEntry(newid));
-        return newid;
-    }
-    
-    wxBitmap tmpBmp;
-    tmpBmp.CopyFromIcon(ic);
-    wxImage img = tmpBmp.ConvertToImage();
-    
-    delete ft;
-
-    int id = m_ImageList.GetImageCount();
-    if (img.GetWidth() == 16 && img.GetHeight() == 16)
-        m_ImageList.Add(wxBitmap(img));
-    else
-    {
-        if (img.GetWidth() != 32 || img.GetHeight() != 32)
-            m_ImageList.Add(CreateAntialiasedBitmap(CutEmptyBorders(img).Rescale(32, 32)));
-        else
-            m_ImageList.Add(CreateAntialiasedBitmap(img));
-    }
-    m_HashTable.Put(extension, new wxFileIconEntry(id));
-    return id;
-
-#else // !wxUSE_MIMETYPE
-
-    if (extension == wxT("exe"))
-        return FI_EXECUTABLE;
-    else
-        return FI_UNKNOWN;
-#endif // wxUSE_MIMETYPE/!wxUSE_MIMETYPE
+     wxFileData *fd1 = (wxFileData*)data1;
+     wxFileData *fd2 = (wxFileData*)data2;
+     if (fd1->GetFileName() == wxT("..")) return -data;
+     if (fd2->GetFileName() == wxT("..")) return data;
+     if (fd1->IsDir() && !fd2->IsDir()) return -data;
+     if (fd2->IsDir() && !fd1->IsDir()) return data;
+     return data*wxStrcmp( fd1->GetFileName(), fd2->GetFileName() );
 }
 
-
-
-// ----------------------------------------------------------------------------
-// private functions
-// ----------------------------------------------------------------------------
-
 static
-int wxFileDataNameCompare( long data1, long data2, long data)
+int wxFileDataSizeCompare( long data1, long data2, long data)
 {
      wxFileData *fd1 = (wxFileData*)data1;
      wxFileData *fd2 = (wxFileData*)data2;
-     if (fd1->GetName() == wxT("..")) return -data;
-     if (fd2->GetName() == wxT("..")) return data;
+     if (fd1->GetFileName() == wxT("..")) return -data;
+     if (fd2->GetFileName() == wxT("..")) return data;
      if (fd1->IsDir() && !fd2->IsDir()) return -data;
      if (fd2->IsDir() && !fd1->IsDir()) return data;
-     return data*wxStrcmp( fd1->GetName(), fd2->GetName() );
+     if (fd1->IsLink() && !fd2->IsLink()) return -data;
+     if (fd2->IsLink() && !fd1->IsLink()) return data;
+     return data*(fd1->GetSize() - fd2->GetSize());
 }
 
@@ -308,11 +116,11 @@
      wxFileData *fd1 = (wxFileData*)data1;
      wxFileData *fd2 = (wxFileData*)data2;
-     if (fd1->GetName() == wxT("..")) return -data;
-     if (fd2->GetName() == wxT("..")) return data;
+     if (fd1->GetFileName() == wxT("..")) return -data;
+     if (fd2->GetFileName() == wxT("..")) return data;
      if (fd1->IsDir() && !fd2->IsDir()) return -data;
      if (fd2->IsDir() && !fd1->IsDir()) return data;
      if (fd1->IsLink() && !fd2->IsLink()) return -data;
      if (fd2->IsLink() && !fd1->IsLink()) return data;
-     return data*(fd1->GetSize() - fd2->GetSize());
+     return data*wxStrcmp( fd1->GetType(), fd2->GetType() );
 }
 
@@ -322,19 +130,10 @@
      wxFileData *fd1 = (wxFileData*)data1;
      wxFileData *fd2 = (wxFileData*)data2;
-     if (fd1->GetName() == wxT("..")) return -data;
-     if (fd2->GetName() == wxT("..")) return data;
+     if (fd1->GetFileName() == wxT("..")) return -data;
+     if (fd2->GetFileName() == wxT("..")) return data;
      if (fd1->IsDir() && !fd2->IsDir()) return -data;
      if (fd2->IsDir() && !fd1->IsDir()) return data;
 
-     int val = fd1->GetYear() - fd2->GetYear();
-     if (val) return data*val;
-     val = fd1->GetMonth() - fd2->GetMonth();
-     if (val) return data*val;
-     val = fd1->GetDay() - fd2->GetDay();
-     if (val) return data*val;
-     val = fd1->GetHour() - fd2->GetHour();
-     if (val) return data*val;
-     val = fd1->GetMinute() - fd2->GetMinute();
-     return data*val;
+     return fd1->GetTime().IsLaterThan(fd2->GetTime()) ? int(data) : -int(data);
 }
 
@@ -348,29 +147,31 @@
 
 #if defined(__DOS__) || defined(__WINDOWS__)
+// defined in src/generic/dirctrlg.cpp
 extern bool wxIsDriveAvailable(const wxString& dirName);
 #endif
 
+// defined in src/generic/dirctrlg.cpp
+extern size_t wxGetAvailableDrives(wxArrayString &paths, wxArrayString &names, wxArrayInt &icon_ids);
+
 //-----------------------------------------------------------------------------
 //  wxFileData
 //-----------------------------------------------------------------------------
 
-wxFileData::wxFileData( const wxString &name, const wxString &fname, fileType type )
+wxFileData::wxFileData( const wxString &filePath, const wxString &fileName, fileType type, int image_id )
 {
-    m_name = name;
-    m_fileName = fname;
+    m_fileName = fileName;
+    m_filePath = filePath;
     m_type = type;
+    m_image = image_id;
 
-#if defined(__DOS__) || defined(__WINDOWS__)
-    // VS: In case the file is root directory of a volume (e.g. "C:"),
-    //     we don't want it stat()ed, since the drive may not be in:
-    if (name.length() == 2 && name[1u] == wxT(':'))
+    if (IsDrive())
     {
-        m_type = is_drive;
         m_size = 0;
         return;
     }
 
-    // This is a drive, even if MSW thinks c:\.. is a file
-    if ((name == wxT("..")) && (fname.length() <= 5))
+#if defined(__DOS__) || defined(__WINDOWS__)
+    // c:\.. is a drive don't stat it
+    if ((fileName == wxT("..")) && (filePath.length() <= 5))
     {
         m_type = is_drive;
@@ -383,8 +184,8 @@
 
 #if defined(__UNIX__) && (!defined( __EMX__ ) && !defined(__VMS))
-    lstat( m_fileName.fn_str(), &buff );
+    lstat( m_filePath.fn_str(), &buff );
     m_type |= S_ISLNK( buff.st_mode ) != 0 ? is_link : 0;
 #else // no lstat()
-    wxStat( m_fileName, &buff );
+    wxStat( m_filePath, &buff );
 #endif
 
@@ -392,50 +193,64 @@
     m_type |= (buff.st_mode & wxS_IXUSR) != 0 ? is_exe : 0;
 
+    // try to get a better icon
+    if (m_image == wxFileIconsTable::file)
+    {
+        if (IsExe())
+            m_image = wxFileIconsTable::executable;
+        else if (m_fileName.Find(wxT('.'), TRUE) != wxNOT_FOUND)
+            m_image = wxTheFileIconsTable->GetIconID(m_fileName.AfterLast(wxT('.')));
+    }
+
     m_size = buff.st_size;
 
-    const struct tm * const t = localtime( &buff.st_mtime );
-    m_hour = t->tm_hour;
-    m_minute = t->tm_min;
-    m_month = t->tm_mon+1;
-    m_day = t->tm_mday;
-    m_year = t->tm_year;
-    m_year += 1900;
+    m_dateTime = buff.st_mtime;
 
-    m_permissions.Printf(_T("%c%c%c"),
+#if defined(__UNIX__)
+    m_permissions.Printf(_T("%c%c%c%c%c%c%c%c%c"),
                          buff.st_mode & wxS_IRUSR ? _T('r') : _T('-'),
                          buff.st_mode & wxS_IWUSR ? _T('w') : _T('-'),
-                         buff.st_mode & wxS_IXUSR ? _T('x') : _T('-'));
+                         buff.st_mode & wxS_IXUSR ? _T('x') : _T('-'),
+                         buff.st_mode & wxS_IRGRP ? _T('r') : _T('-'),
+                         buff.st_mode & wxS_IWGRP ? _T('w') : _T('-'),
+                         buff.st_mode & wxS_IXGRP ? _T('x') : _T('-'),
+                         buff.st_mode & wxS_IROTH ? _T('r') : _T('-'),
+                         buff.st_mode & wxS_IWOTH ? _T('w') : _T('-'),
+                         buff.st_mode & wxS_IXOTH ? _T('x') : _T('-'));
+#elif defined(__WIN32__)
+    DWORD attribs = GetFileAttributes(filePath);
+    if (attribs != (DWORD)-1)
+    {
+        m_permissions.Printf(_T("%c%c%c%c"),
+                             attribs & FILE_ATTRIBUTE_ARCHIVE  ? _T('A') : _T(' '),
+                             attribs & FILE_ATTRIBUTE_READONLY ? _T('R') : _T(' '),
+                             attribs & FILE_ATTRIBUTE_HIDDEN   ? _T('H') : _T(' '),
+                             attribs & FILE_ATTRIBUTE_SYSTEM   ? _T('S') : _T(' '));
+    }
+#endif
 }
 
-wxString wxFileData::GetName() const
+wxString wxFileData::GetType() const
 {
-    return m_name;
-}
+    if (IsDir())
+        return _("<DIR>");
+    else if (IsLink())
+        return _("<LINK>");
+    else if (IsDrive())
+        return _("<DRIVE>");
+   else if (m_fileName.Find(wxT('.'), TRUE) != wxNOT_FOUND)
+        return m_fileName.AfterLast(wxT('.'));
 
-wxString wxFileData::GetFullName() const
-{
-    return m_fileName;
+    return wxEmptyString;
 }
 
-bool wxFileData::IsDir() const
-{
-    return (m_type & is_dir) != 0;
-}
-bool wxFileData::IsLink() const
-{
-    return (m_type & is_link) != 0;
-}
-bool wxFileData::IsExe() const
-{
-    return (m_type & is_exe) != 0;
-}
-bool wxFileData::IsDrive() const
+wxString wxFileData::GetModificationTime() const
 {
-    return (m_type & is_drive) != 0;
+    // want time as 01:02 so they line up nicely, no %r in WIN32
+    return m_dateTime.FormatDate() + wxT(" ") + m_dateTime.Format(wxT("%I:%M:%S %p"));
 }
 
 wxString wxFileData::GetHint() const
 {
-    wxString s = m_fileName;
+    wxString s = m_filePath;
     s += wxT("  ");
     if (IsDir())
@@ -454,14 +269,6 @@
     }
 
-    s += IntToString( m_day );
-    s += wxT(".");
-    s += IntToString( m_month );
-    s += wxT(".");
-    s += IntToString( m_year );
+    s += GetModificationTime();
     s += wxT("  ");
-    s += IntToString( m_hour );
-    s += wxT(":");
-    s += IntToString( m_minute );
-    s += wxT("  ");
     s += m_permissions;
     return s;
@@ -474,33 +281,26 @@
     {
         case FileList_Name:
-            s = m_name;
+            s = m_fileName;
             break;
 
-        case FileList_Type:
-            if (IsDir())
-                s = _("<DIR>");
-            else if (IsLink())
-                s = _("<LINK>");
-            else if (IsDrive())
-                s = _("<DRIVE>");
-            else
+        case FileList_Size:
+            if (!IsDir() && !IsLink() && !IsDrive())
                 s.Printf(_T("%ld"), m_size);
             break;
 
-        case FileList_Date:
-                if (!IsDrive())
-            s.Printf(_T("%02d.%02d.%d"), m_day, m_month, m_year);
+        case FileList_Type:
+            s = GetType();
             break;
 
         case FileList_Time:
                 if (!IsDrive())
-            s.Printf(_T("%02d:%02d"), m_hour, m_minute);
+                s = GetModificationTime();
             break;
 
-#ifdef __UNIX__
+#if defined(__UNIX__) || defined(__WIN32__)
         case FileList_Perm:
             s = m_permissions;
             break;
-#endif // __UNIX__
+#endif // defined(__UNIX__) || defined(__WIN32__)
 
         default:
@@ -511,13 +311,13 @@
 }
 
-void wxFileData::SetNewName( const wxString &name, const wxString &fname )
+void wxFileData::SetNewName( const wxString &filePath, const wxString &fileName )
 {
-    m_name = name;
-    m_fileName = fname;
+    m_fileName = fileName;
+    m_filePath = filePath;
 }
 
 void wxFileData::MakeItem( wxListItem &item )
 {
-    item.m_text = m_name;
+    item.m_text = m_fileName;
     item.ClearAttributes();
     if (IsExe())
@@ -526,14 +326,5 @@
         item.SetTextColour(*wxBLUE);
 
-    if (IsDir())
-        item.m_image = FI_FOLDER;
-    if (IsDrive())                 // FIXME - add icons for drives, see wxDirCtrl
-        item.m_image = FI_FOLDER;
-    else if (IsExe())
-        item.m_image = FI_EXECUTABLE;
-    else if (m_name.Find(wxT('.')) != wxNOT_FOUND)
-        item.m_image = g_IconsTable->GetIconID(m_name.AfterLast(wxT('.')));
-    else
-        item.m_image = FI_UNKNOWN;
+    item.m_image = m_image;
 
     if (IsLink())
@@ -561,6 +352,4 @@
 {
     m_showHidden = FALSE;
-    m_goToParentControl = NULL;
-    m_newDirControl = NULL;
     m_sort_foward = 1;
     m_sort_field = wxFileData::FileList_Name;
@@ -579,13 +368,8 @@
             m_wild(wild)
 {
-    if (! g_IconsTable)
-        g_IconsTable = new wxFileIconsTable;
-    wxImageList *imageList = g_IconsTable->GetImageList();
+    wxImageList *imageList = wxTheFileIconsTable->GetSmallImageList();
 
     SetImageList( imageList, wxIMAGE_LIST_SMALL );
 
-    m_goToParentControl =
-    m_newDirControl = NULL;
-
     m_showHidden = showHidden;
 
@@ -611,13 +395,21 @@
     SetSingleStyle( wxLC_REPORT );
 
+    // do this since WIN32 does mm/dd/yy UNIX does mm/dd/yyyy
+    // don't hardcode since mm/dd is dd/mm elsewhere
     int w, h;
-    GetTextExtent(wxT("CCCCCCCCC"), &w, &h);
-
-    InsertColumn( 0, _("Name"), wxLIST_FORMAT_LEFT, w*2 );
-    InsertColumn( 1, _("Size"), wxLIST_FORMAT_LEFT, w );
-    InsertColumn( 2, _("Date"), wxLIST_FORMAT_LEFT, w );
-    InsertColumn( 3, _("Time"), wxLIST_FORMAT_LEFT, w/2 );
-#ifdef __UNIX__
-    InsertColumn( 4, _("Permissions"), wxLIST_FORMAT_LEFT, (w*12)/9 );
+    wxDateTime dt(22, wxDateTime::Dec, 2002, 22, 22, 22);
+    wxString txt = dt.FormatDate() + wxT("22") + dt.Format(wxT("%I:%M:%S %p"));
+    GetTextExtent(txt, &w, &h);
+
+    InsertColumn( 0, _("Name"), wxLIST_FORMAT_LEFT, w );
+    InsertColumn( 1, _("Size"), wxLIST_FORMAT_LEFT, w/2 );
+    InsertColumn( 2, _("Type"), wxLIST_FORMAT_LEFT, w/2 );
+    InsertColumn( 3, _("Modified"), wxLIST_FORMAT_LEFT, w );
+#if defined(__UNIX__)
+    GetTextExtent(wxT("Permissions 2"), &w, &h);
+    InsertColumn( 4, _("Permissions"), wxLIST_FORMAT_LEFT, w );
+#elif defined(__WIN32__)
+    GetTextExtent(wxT("Attributes 2"), &w, &h);
+    InsertColumn( 4, _("Attributes"), wxLIST_FORMAT_LEFT, w );
 #endif
 
@@ -625,8 +417,8 @@
 }
 
-void wxFileCtrl::ChangeToIconMode()
+void wxFileCtrl::ChangeToSmallIconMode()
 {
     ClearAll();
-    SetSingleStyle( wxLC_ICON );
+    SetSingleStyle( wxLC_SMALL_ICON );
     UpdateFiles();
 }
@@ -650,5 +442,5 @@
             SetItem( item.m_itemId, i, fd->GetEntry((wxFileData::fileListFieldType)i) );
     }
-    else if (my_style & wxLC_LIST)
+    else if ((my_style & wxLC_LIST) || (my_style & wxLC_SMALL_ICON))
     {
         ret = InsertItem( item );
@@ -673,23 +465,20 @@
     item.m_col = 0;
 
-#if defined(__DOS__) || defined(__WINDOWS__)
+#if defined(__WINDOWS__) || defined(__DOS__) || defined(__WXMAC__) || defined(__WXPM__)
     if ( IsTopMostDir(m_dirName) )
-    {
-        // Pseudo-directory with all available drives listed...
-        for (int drive = 1; drive <= 26; drive++)
         {
-            wxString path;
-            path.Printf(wxT("%c:\\"), (char)(drive + 'A' - 1));
-            if ( wxIsDriveAvailable(path) )
+        wxArrayString names, paths;
+        wxArrayInt icons;
+        size_t n, count = wxGetAvailableDrives(paths, names, icons);
+
+        for (n=0; n<count; n++)
             {
-                path.RemoveLast();
-                fd = new wxFileData(path, path, wxFileData::is_drive);
+            fd = new wxFileData(paths[n], names[n], wxFileData::is_drive, icons[n]);
                 Add(fd, item);
                 item.m_itemId++;
             }
         }
-    }
     else
-#endif
+#endif // defined(__DOS__) || defined(__WINDOWS__)
     {
         // Real directory...
@@ -699,6 +488,6 @@
 #ifdef __UNIX__
             if (p.IsEmpty()) p = wxT("/");
-#endif
-            fd = new wxFileData( wxT(".."), p, wxFileData::is_dir );
+#endif // __UNIX__
+            fd = new wxFileData(p, wxT(".."), wxFileData::is_dir, wxFileIconsTable::folder);
             Add(fd, item);
             item.m_itemId++;
@@ -709,5 +498,5 @@
         if (dirname.length() == 2 && dirname[1u] == wxT(':'))
             dirname << wxT('\\');
-#endif
+#endif // defined(__DOS__) || defined(__WINDOWS__)
         wxDir dir(dirname);
 
@@ -727,5 +516,5 @@
             while (cont)
             {
-                fd = new wxFileData(f, dirPrefix + f, wxFileData::is_dir);
+                fd = new wxFileData(dirPrefix + f, f, wxFileData::is_dir, wxFileIconsTable::folder);
                 Add(fd, item);
                 item.m_itemId++;
@@ -742,5 +531,5 @@
                 while (cont)
                 {
-                    fd = new wxFileData(f, dirPrefix + f, wxFileData::is_file);
+                    fd = new wxFileData(dirPrefix + f, f, wxFileData::is_file, wxFileIconsTable::file);
                     Add(fd, item);
                     item.m_itemId++;
@@ -750,18 +539,13 @@
         }
     }
-
-    SortItems(m_sort_field, m_sort_foward > 0);
 
-    // Finally, enable/disable context-dependent controls:
-    if ( m_goToParentControl )
-        m_goToParentControl->Enable(!IsTopMostDir(m_dirName));
-#if defined(__DOS__) || defined(__WINDOWS__)
-    if ( m_newDirControl )
-        m_newDirControl->Enable(!IsTopMostDir(m_dirName));
-#endif
+    SortItems(m_sort_field, m_sort_foward);
 }
 
 void wxFileCtrl::SetWild( const wxString &wild )
 {
+    if (wild.Find(wxT('|')) != wxNOT_FOUND)
+        return;
+
     m_wild = wild;
     UpdateFiles();
@@ -799,5 +583,5 @@
     }
 
-    wxFileData *fd = new wxFileData( new_name, path, wxFileData::is_dir );
+    wxFileData *fd = new wxFileData( path, new_name, wxFileData::is_dir, wxFileIconsTable::folder );
     wxListItem item;
     item.m_itemId = 0;
@@ -807,5 +591,5 @@
     if (id != -1)
     {
-        SortItems(m_sort_field, m_sort_foward > 0);
+        SortItems(m_sort_field, m_sort_foward);
         id = FindItem( 0, (long)fd );
         EnsureVisible( id );
@@ -851,4 +635,6 @@
 void wxFileCtrl::GoToDir( const wxString &dir )
 {
+    if (!wxDirExists(dir)) return;
+
     m_dirName = dir;
     UpdateFiles();
@@ -857,9 +643,4 @@
 }
 
-void wxFileCtrl::GetDir( wxString &dir )
-{
-    dir = m_dirName;
-}
-
 void wxFileCtrl::FreeItemData(const wxListItem& item)
 {
@@ -903,5 +684,5 @@
     }
 
-    wxString new_name( wxPathOnly( fd->GetFullName() ) );
+    wxString new_name( wxPathOnly( fd->GetFilePath() ) );
     new_name += wxFILE_SEP_PATH;
     new_name += event.GetLabel();
@@ -916,5 +697,5 @@
     }
 
-    if (wxRenameFile(fd->GetFullName(),new_name))
+    if (wxRenameFile(fd->GetFilePath(),new_name))
     {
         fd->SetNewName( new_name, event.GetLabel() );
@@ -937,6 +718,6 @@
     {
         case wxFileData::FileList_Name :
+        case wxFileData::FileList_Size :
         case wxFileData::FileList_Type :
-        case wxFileData::FileList_Date :
         case wxFileData::FileList_Time : break;
         default : return;
@@ -944,9 +725,9 @@
 
     if ((wxFileData::fileListFieldType)col == m_sort_field)
-        m_sort_foward = -m_sort_foward;
+        m_sort_foward = !m_sort_foward;
     else
         m_sort_field = (wxFileData::fileListFieldType)col;
 
-    SortItems(m_sort_field, m_sort_foward > 0);
+    SortItems(m_sort_field, m_sort_foward);
 }
 
@@ -954,22 +735,27 @@
 {
     m_sort_field = field;
-    m_sort_foward = foward ? 1 : -1;
+    m_sort_foward = foward;
+    long sort_dir = foward ? 1 : -1;
 
     switch (m_sort_field)
     {
         case wxFileData::FileList_Name :
+        {
+            wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataNameCompare, sort_dir);
+            break;
+        }
+        case wxFileData::FileList_Size :
         {
-            wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataNameCompare, m_sort_foward);
+             wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataSizeCompare, sort_dir);
             break;
         }
         case wxFileData::FileList_Type :
         {
-             wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataTypeCompare, m_sort_foward);
+             wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataTypeCompare, sort_dir);
              break;
         }
-        case wxFileData::FileList_Date :
         case wxFileData::FileList_Time :
         {
-             wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataTimeCompare, m_sort_foward);
+             wxListCtrl::SortItems((wxListCtrlCompare)wxFileDataTimeCompare, sort_dir);
              break;
         }
@@ -1112,11 +898,10 @@
     buttonsizer->Add( 30, 5, 1 );
 
-    wxWindow *butDirUp =
-        new wxBitmapButton(this, ID_UP_DIR,
+    m_upDirButton = new wxBitmapButton(this, ID_UP_DIR,
                            wxArtProvider::GetBitmap(wxART_GO_DIR_UP, wxART_CMN_DIALOG));
 #if wxUSE_TOOLTIPS
-    butDirUp->SetToolTip( _("Go to parent directory") );
+    m_upDirButton->SetToolTip( _("Go to parent directory") );
 #endif
-    buttonsizer->Add( butDirUp, 0, wxALL, 5 );
+    buttonsizer->Add( m_upDirButton, 0, wxALL, 5 );
 
 #ifndef __DOS__ // VS: Home directory is meaningless in MS-DOS...
@@ -1131,11 +916,10 @@
 #endif //!__DOS__
 
-    wxWindow *butNewDir =
-        new wxBitmapButton(this, ID_NEW_DIR,
+    m_newDirButton = new wxBitmapButton(this, ID_NEW_DIR,
                            wxArtProvider::GetBitmap(wxART_NEW_DIR, wxART_CMN_DIALOG));
 #if wxUSE_TOOLTIPS
-    butNewDir->SetToolTip( _("Create new directory") );
+    m_newDirButton->SetToolTip( _("Create new directory") );
 #endif
-    buttonsizer->Add( butNewDir, 0, wxALL, 5 );
+    buttonsizer->Add( m_newDirButton, 0, wxALL, 5 );
 
     if (is_pda)
@@ -1160,7 +944,4 @@
                              style2);
 
-    m_list->SetNewDirControl(butNewDir);
-    m_list->SetGoToParentControl(butDirUp);
-
     if (is_pda)
     {
@@ -1247,5 +1028,5 @@
 {
     m_list->GoToDir(m_dir);
-    m_static->SetLabel(m_list->GetDir());
+    UpdateControls();
     m_text->SetValue(m_fileName);
 
@@ -1325,6 +1106,5 @@
     if (filename == wxT("..")) return;
 
-    wxString dir;
-    m_list->GetDir( dir );
+    wxString dir = m_list->GetDir();
     if (!IsTopMostDir(dir))
         dir += wxFILE_SEP_PATH;
@@ -1340,6 +1120,5 @@
 {
     wxString filename( fn );
-    wxString dir;
-    m_list->GetDir( dir );
+    wxString dir = m_list->GetDir();
     if (filename.IsEmpty()) return;
     if (filename == wxT(".")) return;
@@ -1349,5 +1128,5 @@
         m_list->GoToParentDir();
         m_list->SetFocus();
-        m_static->SetLabel(m_list->GetDir());
+        UpdateControls();
         return;
     }
@@ -1358,5 +1137,5 @@
         m_list->GoToHomeDir();
         m_list->SetFocus();
-        m_static->SetLabel(m_list->GetDir());
+        UpdateControls();
         return;
     }
@@ -1395,5 +1174,5 @@
     {
         m_list->GoToDir( filename );
-        m_static->SetLabel(m_list->GetDir());
+        UpdateControls();
         return;
     }
@@ -1476,5 +1255,5 @@
     m_list->GoToParentDir();
     m_list->SetFocus();
-    m_static->SetLabel(m_list->GetDir());
+    UpdateControls();
 }
 
@@ -1483,5 +1262,5 @@
     m_list->GoToHomeDir();
     m_list->SetFocus();
-    m_static->SetLabel(m_list->GetDir());
+    UpdateControls();
 }
 
@@ -1518,6 +1297,5 @@
     paths.Alloc( m_list->GetSelectedItemCount() );
 
-    wxString dir;
-    m_list->GetDir( dir );
+    wxString dir = m_list->GetDir();
 #ifdef __UNIX__
     if (dir != wxT("/"))
@@ -1561,4 +1339,17 @@
 }
 
+void wxGenericFileDialog::UpdateControls()
+{
+    wxString dir = m_list->GetDir();
+    m_static->SetLabel(dir);
+
+    bool enable = !IsTopMostDir(dir);
+    m_upDirButton->Enable(enable);
+
+#if defined(__DOS__) || defined(__WINDOWS__)
+    m_newDirButton->Enable(enable);
+#endif // defined(__DOS__) || defined(__WINDOWS__)
+}
+
 #ifdef USE_GENERIC_FILEDIALOG
 
@@ -1710,17 +1501,4 @@
                           GetWildcardString(ext), 0, parent);
 }
-
-// A module to allow icons table cleanup
-
-class wxFileDialogGenericModule: public wxModule
-{
-DECLARE_DYNAMIC_CLASS(wxFileDialogGenericModule)
-public:
-    wxFileDialogGenericModule() {}
-    bool OnInit() { return TRUE; }
-    void OnExit() { if (g_IconsTable) {delete g_IconsTable; g_IconsTable = NULL;} }
-};
-
-IMPLEMENT_DYNAMIC_CLASS(wxFileDialogGenericModule, wxModule)
 
 #endif // USE_GENERIC_FILEDIALOG
Index: wxWindows/src/generic/dirctrlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/dirctrlg.cpp,v
retrieving revision 1.53
diff -b -u -2 -r1.53 dirctrlg.cpp
--- wxWindows/src/generic/dirctrlg.cpp	2003/04/02 11:10:34	1.53
+++ wxWindows/src/generic/dirctrlg.cpp	2003/04/06 01:08:53
@@ -23,6 +23,7 @@
 #if wxUSE_DIRDLG
 
+#include "wx/generic/dirctrlg.h"
+
 #include "wx/utils.h"
-#include "wx/dialog.h"
 #include "wx/button.h"
 #include "wx/layout.h"
@@ -41,4 +42,9 @@
 #include "wx/dir.h"
 #include "wx/settings.h"
+#include "wx/artprov.h"
+#include "wx/hash.h"
+#include "wx/mimetype.h"
+#include "wx/image.h"
+#include "wx/choice.h"
 
 #if wxUSE_STATLINE
@@ -46,6 +52,4 @@
 #endif
 
-#include "wx/generic/dirctrlg.h"
-
 #if defined(__WXMAC__)
   #include  "wx/mac/private.h"  // includes mac headers
@@ -95,227 +99,168 @@
 #endif
 
-/* Closed folder */
-static const char * icon1_xpm[] = {
-/* width height ncolors chars_per_pixel */
-"16 16 6 1",
-/* colors */
-"   s None  c None",
-".  c #000000",
-"+  c #c0c0c0",
-"@  c #808080",
-"#  c #ffff00",
-"$  c #ffffff",
-/* pixels */
-"                ",
-"   @@@@@        ",
-"  @#+#+#@       ",
-" @#+#+#+#@@@@@@ ",
-" @$$$$$$$$$$$$@.",
-" @$#+#+#+#+#+#@.",
-" @$+#+#+#+#+#+@.",
-" @$#+#+#+#+#+#@.",
-" @$+#+#+#+#+#+@.",
-" @$#+#+#+#+#+#@.",
-" @$+#+#+#+#+#+@.",
-" @$#+#+#+#+#+#@.",
-" @@@@@@@@@@@@@@.",
-"  ..............",
-"                ",
-"                "};
+// ----------------------------------------------------------------------------
+// wxGetAvailableDrives, for WINDOWS, DOS, WXPM, MAC, UNIX (returns "/")
+// ----------------------------------------------------------------------------
 
-/* Open folder */
-static const char * icon2_xpm[] = {
-/* width height ncolors chars_per_pixel */
-"16 16 6 1",
-/* colors */
-"   s None  c None",
-".  c #000000",
-"+  c #c0c0c0",
-"@  c #808080",
-"#  c #ffff00",
-"$  c #ffffff",
-/* pixels */
-"                ",
-"   @@@@@        ",
-"  @$$$$$@       ",
-" @$#+#+#$@@@@@@ ",
-" @$+#+#+$$$$$$@.",
-" @$#+#+#+#+#+#@.",
-"@@@@@@@@@@@@@#@.",
-"@$$$$$$$$$$@@+@.",
-"@$#+#+#+#+##.@@.",
-" @$#+#+#+#+#+.@.",
-" @$+#+#+#+#+#.@.",
-"  @$+#+#+#+##@..",
-"  @@@@@@@@@@@@@.",
-"   .............",
-"                ",
-"                "};
+size_t wxGetAvailableDrives(wxArrayString &paths, wxArrayString &names, wxArrayInt &icon_ids)
+{
+#if defined(__WINDOWS__) || defined(__DOS__) || defined(__WXPM__)
 
-/* File */
-static const char * icon3_xpm[] = {
-/* width height ncolors chars_per_pixel */
-"16 16 3 1",
-/* colors */
-"     s None    c None",
-".    c #000000",
-"+    c #ffffff",
-/* pixels */
-"                ",
-"  ........      ",
-"  .++++++..     ",
-"  .+.+.++.+.    ",
-"  .++++++....   ",
-"  .+.+.+++++.   ",
-"  .+++++++++.   ",
-"  .+.+.+.+.+.   ",
-"  .+++++++++.   ",
-"  .+.+.+.+.+.   ",
-"  .+++++++++.   ",
-"  .+.+.+.+.+.   ",
-"  .+++++++++.   ",
-"  ...........   ",
-"                ",
-"                "};
+#ifdef __WIN32__
+    wxChar driveBuffer[256];
+    size_t n = (size_t) GetLogicalDriveStrings(255, driveBuffer);
+    size_t i = 0;
+    while (i < n)
+    {
+        wxString path, name;
+        path.Printf(wxT("%c:\\"), driveBuffer[i]);
+        name.Printf(wxT("%c:"), driveBuffer[i]);
 
-/* Computer */
-static const char * icon4_xpm[] = {
-"16 16 7 1",
-"     s None    c None",
-".    c #808080",
-"X    c #c0c0c0",
-"o    c Black",
-"O    c Gray100",
-"+    c #008080",
-"@    c Blue",
-"    ........... ",
-"   .XXXXXXXXXX.o",
-"   .OOOOOOOOO..o",
-"   .OoooooooX..o",
-"   .Oo+...@+X..o",
-"   .Oo+XXX.+X..o",
-"   .Oo+....+X..o",
-"   .Oo++++++X..o",
-"   .OXXXXXXXX.oo",
-"   ..........o.o",
-"   ...........Xo",
-"   .XXXXXXXXXX.o",
-"  .o.o.o.o.o...o",
-" .oXoXoXoXoXo.o ",
-".XOXXXXXXXXX.o  ",
-"............o   "};
+        int imageId = wxFileIconsTable::drive;
+        int driveType = ::GetDriveType(path);
+        switch (driveType)
+        {
+            case DRIVE_REMOVABLE:
+                if (path == wxT("a:\\") || path == wxT("b:\\"))
+                    imageId = wxFileIconsTable::floppy;
+                else
+                    imageId = wxFileIconsTable::removeable;
+                break;
+            case DRIVE_CDROM:
+                imageId = wxFileIconsTable::cdrom;
+                break;
+            case DRIVE_REMOTE:
+            case DRIVE_FIXED:
+            default:
+                imageId = wxFileIconsTable::drive;
+                break;
+        }
 
-/* Drive */
-static const char * icon5_xpm[] = {
-"16 16 7 1",
-"     s None    c None",
-".    c #808080",
-"X    c #c0c0c0",
-"o    c Black",
-"O    c Gray100",
-"+    c Green",
-"@    c #008000",
-"                ",
-"                ",
-"                ",
-"                ",
-"  ............. ",
-" .XXXXXXXXXXXX.o",
-".OOOOOOOOOOOO..o",
-".XXXXXXXXX+@X..o",
-".XXXXXXXXXXXX..o",
-".X..........X..o",
-".XOOOOOOOOOOX..o",
-"..............o ",
-" ooooooooooooo  ",
-"                ",
-"                ",
-"                "};
+        paths.Add(path);
+        names.Add(name);
+        icon_ids.Add(imageId);
 
-/* CD-ROM */
-static const char *icon6_xpm[] = {
-"16 16 10 1",
-"     s None    c None",
-".    c #808080",
-"X    c #c0c0c0",
-"o    c Yellow",
-"O    c Blue",
-"+    c Black",
-"@    c Gray100",
-"#    c #008080",
-"$    c Green",
-"%    c #008000",
-"        ...     ",
-"      ..XoX..   ",
-"     .O.XoXXX+  ",
-"    ...O.oXXXX+ ",
-"    .O..X.XXXX+ ",
-"   ....X.+..XXX+",
-"   .XXX.+@+.XXX+",
-"   .X@XX.+.X@@X+",
-" .....X...#XX@+ ",
-".@@@...XXo.O@X+ ",
-".@XXX..XXoXOO+  ",
-".@++++..XoX+++  ",
-".@$%@@XX+++X.+  ",
-".............+  ",
-" ++++++++++++   ",
-"                "};
+        while (driveBuffer[i] != wxT('\0'))
+            i ++;
+        i ++;
+        if (driveBuffer[i] == wxT('\0'))
+            break;
+    }
+#else // !__WIN32__
+    int drive;
 
-/* Floppy */
-static const char * icon7_xpm[] = {
-"16 16 7 1",
-"     s None    c None",
-".    c #808080",
-"X    c Gray100",
-"o    c #c0c0c0",
-"O    c Black",
-"+    c Cyan",
-"@    c Red",
-"         ......X",
-"        .ooooooO",
-"        .+++++OO",
-"        .++++++O",
-"        .++++++O",
-"        .ooooooO",
-"  .......o....oO",
-" .oooooo.o.O.XoO",
-".XXXXXXXXOOOOOO ",
-".ooooooooo@o..O ",
-".ooo....oooo..O ",
-".o..OOOO...o..O ",
-".oooXXXXoooo..O ",
-".............O  ",
-" OOOOOOOOOOOO   ",
-"                "};
+    /* If we can switch to the drive, it exists. */
+    for( drive = 1; drive <= 26; drive++ )
+    {
+        wxString path, name;
+        path.Printf(wxT("%c:\\"), (char) (drive + 'a' - 1));
+        name.Printf(wxT("%c:"), (char) (drive + 'A' - 1));
 
-/* Removeable */
-static const char * icon8_xpm[] = {
-"16 16 7 1",
-"     s None    c None",
-".    c #808080",
-"X    c #c0c0c0",
-"o    c Black",
-"O    c Gray100",
-"+    c Red",
-"@    c #800000",
-"                ",
-"                ",
-"                ",
-"  ............. ",
-" .XXXXXXXXXXXX.o",
-".OOOOOOOOOOOO..o",
-".OXXXXXXXXXXX..o",
-".O+@.oooooo.X..o",
-".OXXOooooooOX..o",
-".OXXXOOOOOOXX..o",
-".OXXXXXXXXXXX..o",
-".O............o ",
-" ooooooooooooo  ",
-"                ",
-"                ",
-"                "};
+        if (wxIsDriveAvailable(path))
+        {
+            paths.Add(path);
+            names.Add(name);
+            icon_ids.Add((drive <= 2) ? wxFileIconsTable::floppy : wxFileIconsTable::drive);
+        }
+    }
+#endif // __WIN32__/!__WIN32__
+
+#elif defined(__WXMAC__)
+#ifdef __DARWIN__
+    FSRef     **theVolRefs;
+    ItemCount   theVolCount;
+    char        thePath[FILENAME_MAX];
+
+    if (FSGetMountedVolumes(&theVolRefs, &theVolCount) == noErr) {
+        ItemCount index;
+        ::HLock( (Handle)theVolRefs ) ;
+        for (index = 0; index < theVolCount; ++index) {
+            // get the POSIX path associated with the FSRef
+            if ( FSRefMakePath(&((*theVolRefs)[index]),
+                                 (UInt8 *)thePath, sizeof(thePath)) != noErr ) {
+                continue;
+            }
+            // add path separator at end if necessary
+            wxString path( thePath ) ;
+            if (path.Last() != wxFILE_SEP_PATH) {
+                path += wxFILE_SEP_PATH;
+            }
+            // get Mac volume name for display
+            FSVolumeRefNum vRefNum ;
+            HFSUniStr255 volumeName ;
+
+            if ( FSGetVRefNum(&((*theVolRefs)[index]), &vRefNum) != noErr ) {
+                continue;
+            }
+            if ( FSGetVInfo(vRefNum, &volumeName, NULL, NULL) != noErr ) {
+                continue;
+            }
+            // get C string from Unicode HFS name
+            //   see: http://developer.apple.com/carbon/tipsandtricks.html
+            CFStringRef cfstr = CFStringCreateWithCharacters( kCFAllocatorDefault,
+                                                              volumeName.unicode,
+                                                              volumeName.length );
+            //	Do something with str
+            char *cstr = NewPtr(CFStringGetLength(cfstr) + 1);
+            if (( cstr == NULL ) ||
+                !CFStringGetCString(cfstr, cstr, CFStringGetLength(cfstr) + 1,
+                                    kCFStringEncodingMacRoman))
+            {
+                CFRelease( cstr );
+                continue;
+            }
+            wxString name( cstr );
+            DisposePtr( cstr );
+            CFRelease( cfstr );
+
+            GetVolParmsInfoBuffer volParmsInfo;
+            UInt32 actualSize;
+            if ( FSGetVolParms(vRefNum, sizeof(volParmsInfo), &volParmsInfo, &actualSize) != noErr ) {
+                continue;
+            }
 
+            paths.Add(path);
+            names.Add(name);
 
+            if ( VolIsEjectable(&volParmsInfo) )
+                icon_ids.Add(wxFileIconsTable::cdrom);
+            else
+                icon_ids.Add(wxFileIconsTable::drive);
+        }
+        ::HUnlock( (Handle)theVolRefs );
+        ::DisposeHandle( (Handle)theVolRefs );
+    }
+#else // !__DARWIN__
+    FSSpec volume;
+    short index = 1;
+    while(1)
+    {
+        short actualCount = 0 ;
+        if (OnLine(&volume, 1, &actualCount, &index ) != noErr || actualCount==0)
+        {
+            break;
+        }
+
+        wxString name = wxMacFSSpec2MacFilename( &volume );
+        paths.Add(name + wxFILE_SEP_PATH);
+        names.Add(name);
+        icon_ids.Add(wxFileIconsTable::drive);
+    }
+#endif // __DARWIN__
+
+#elif defined(__UNIX__)
+    paths.Add(wxT("/"));
+    names.Add(wxT("/"));
+    icon_ids.Add(wxFileIconsTable::computer);
+#else
+    #error "Unsupported platform in wxGenericDirCtrl!"
+#endif
+    return paths.GetCount();
+}
+
+// ----------------------------------------------------------------------------
+// wxIsDriveAvailable
+// ----------------------------------------------------------------------------
+
 #if defined(__DOS__)
 
@@ -532,14 +477,5 @@
         m_filterListCtrl->FillFilterList(filter, defaultFilter);
 
-    m_imageList = new wxImageList(16, 16, TRUE);
-    m_imageList->Add(wxIcon(icon1_xpm));
-    m_imageList->Add(wxIcon(icon2_xpm));
-    m_imageList->Add(wxIcon(icon3_xpm));
-    m_imageList->Add(wxIcon(icon4_xpm));
-    m_imageList->Add(wxIcon(icon5_xpm));
-    m_imageList->Add(wxIcon(icon6_xpm));
-    m_imageList->Add(wxIcon(icon7_xpm));
-    m_imageList->Add(wxIcon(icon8_xpm));
-    m_treeCtrl->AssignImageList(m_imageList);
+    m_treeCtrl->SetImageList(wxTheFileIconsTable->GetSmallImageList());
 
     m_showHidden = FALSE;
@@ -574,5 +510,4 @@
 {
     m_showHidden = FALSE;
-    m_imageList = NULL;
     m_currentFilter = 0;
     m_currentFilterStr = wxEmptyString; // Default: any file
@@ -595,152 +530,19 @@
 
     wxTreeItemId id = m_treeCtrl->AppendItem( m_rootId, name, imageId, -1, dir_item);
-
-    m_treeCtrl->SetItemHasChildren(id);
-}
-
-void wxGenericDirCtrl::SetupSections()
-{
-#if defined(__WINDOWS__) || defined(__DOS__) || defined(__WXPM__)
-
-#ifdef __WIN32__
-    wxChar driveBuffer[256];
-    size_t n = (size_t) GetLogicalDriveStrings(255, driveBuffer);
-    size_t i = 0;
-    while (i < n)
-    {
-        wxString path, name;
-        path.Printf(wxT("%c:\\"), driveBuffer[i]);
-        name.Printf(wxT("(%c:)"), driveBuffer[i]);
-
-        int imageId = 4;
-        int driveType = ::GetDriveType(path);
-        switch (driveType)
-        {
-            case DRIVE_REMOVABLE:
-                if (path == wxT("a:\\") || path == wxT("b:\\"))
-                    imageId = 6; // Floppy
-                else
-                    imageId = 7;
-                break;
-            case DRIVE_FIXED:
-                imageId = 4;
-                break;
-            case DRIVE_REMOTE:
-                imageId = 4;
-                break;
-            case DRIVE_CDROM:
-                imageId = 5;
-                break;
-            default:
-                imageId = 4;
-                break;
-        }
-
-        AddSection(path, name, imageId);
-
-        while (driveBuffer[i] != wxT('\0'))
-            i ++;
-        i ++;
-        if (driveBuffer[i] == wxT('\0'))
-            break;
-    }
-#else // !__WIN32__
-    int drive;
-
-    /* If we can switch to the drive, it exists. */
-    for( drive = 1; drive <= 26; drive++ )
-    {
-        wxString path, name;
-        path.Printf(wxT("%c:\\"), (char) (drive + 'a' - 1));
-        name.Printf(wxT("(%c:)"), (char) (drive + 'A' - 1));
-
-        if (wxIsDriveAvailable(path))
-        {
-            AddSection(path, name, (drive <= 2) ? 6/*floppy*/ : 4/*disk*/);
-        }
-    }
-#endif // __WIN32__/!__WIN32__
-
-#elif defined(__WXMAC__)
-#  ifdef __DARWIN__
-    FSRef     **theVolRefs;
-    ItemCount   theVolCount;
-    char        thePath[FILENAME_MAX];
-    
-    if (FSGetMountedVolumes(&theVolRefs, &theVolCount) == noErr) {
-        ItemCount index;
-        ::HLock( (Handle)theVolRefs ) ;
-        for (index = 0; index < theVolCount; ++index) {
-            // get the POSIX path associated with the FSRef
-            if ( FSRefMakePath(&((*theVolRefs)[index]),
-                                 (UInt8 *)thePath, sizeof(thePath)) != noErr ) {
-                continue;
-            }
-            // add path separator at end if necessary
-            wxString path( thePath ) ;
-            if (path.Last() != wxFILE_SEP_PATH) {
-                path += wxFILE_SEP_PATH;
-            }
-            // get Mac volume name for display
-            FSVolumeRefNum vRefNum ;
-            HFSUniStr255 volumeName ;
             
-            if ( FSGetVRefNum(&((*theVolRefs)[index]), &vRefNum) != noErr ) {
-                continue;
-            }
-            if ( FSGetVInfo(vRefNum, &volumeName, NULL, NULL) != noErr ) {
-                continue;
-            }
-            // get C string from Unicode HFS name
-            //   see: http://developer.apple.com/carbon/tipsandtricks.html
-            CFStringRef cfstr = CFStringCreateWithCharacters( kCFAllocatorDefault, 
-                                                              volumeName.unicode,
-                                                              volumeName.length );
-            //	Do something with str
-            char *cstr = NewPtr(CFStringGetLength(cfstr) + 1);
-            if (( cstr == NULL ) ||
-                !CFStringGetCString(cfstr, cstr, CFStringGetLength(cfstr) + 1, 
-                                    kCFStringEncodingMacRoman)) {
-                CFRelease( cstr );
-                continue;
-            }
-            wxString name( cstr ) ;
-            DisposePtr( cstr ) ;
-            CFRelease( cfstr );
-
-            GetVolParmsInfoBuffer volParmsInfo;
-            UInt32 actualSize;
-            if ( FSGetVolParms(vRefNum, sizeof(volParmsInfo), &volParmsInfo, &actualSize) != noErr ) {
-                continue;
-            }
+    m_treeCtrl->SetItemHasChildren(id);
+}
 
-            if ( VolIsEjectable(&volParmsInfo) ) {
-                AddSection(path, name, 5/*cd-rom*/);
-            }
-            else {
-                AddSection(path, name, 4/*disk*/);
-            }
-        }
-        ::HUnlock( (Handle)theVolRefs ) ;
-        ::DisposeHandle( (Handle)theVolRefs ) ;
-    }
-#  else
-    FSSpec volume ;
-    short index = 1 ;
-    while(1) {
-      short actualCount = 0 ;
-      if ( OnLine( &volume , 1 , &actualCount , &index ) != noErr || actualCount == 0 ) {
-        break ;
-      }
+void wxGenericDirCtrl::SetupSections()
+{
+    wxArrayString paths, names;
+    wxArrayInt icons;
+
+    size_t n, count = wxGetAvailableDrives(paths, names, icons);
       
-      wxString name = wxMacFSSpec2MacFilename( &volume ) ;
-      AddSection(name + wxFILE_SEP_PATH, name, 4/*disk*/);
+    for (n = 0; n < count; n++)
+    {
+        AddSection(paths[n], names[n], icons[n]);
     }
-#  endif /* __DARWIN__ */
-#elif defined(__UNIX__)
-    AddSection(wxT("/"), wxT("/"), 3/*computer icon*/);
-#else
-    #error "Unsupported platform in wxGenericDirCtrl!"
-#endif
 }
 
@@ -767,5 +569,7 @@
         (event.GetLabel() == _(".")) ||
         (event.GetLabel() == _("..")) ||
-        (event.GetLabel().First( wxT("/") ) != wxNOT_FOUND))
+        (event.GetLabel().Find(wxT('/')) != wxNOT_FOUND) ||
+        (event.GetLabel().Find(wxT('\\')) != wxNOT_FOUND) ||
+        (event.GetLabel().Find(wxT('|')) != wxNOT_FOUND))
     {
         wxMessageDialog dialog(this, _("Illegal directory name."), _("Error"), wxOK | wxICON_ERROR );
@@ -945,6 +749,8 @@
 
         wxDirItemData *dir_item = new wxDirItemData(path,eachFilename,TRUE);
-        wxTreeItemId id = m_treeCtrl->AppendItem( parentId, eachFilename, 0, -1, dir_item);
-        m_treeCtrl->SetItemImage( id, 1, wxTreeItemIcon_Expanded );
+        wxTreeItemId id = m_treeCtrl->AppendItem( parentId, eachFilename,
+                                      wxFileIconsTable::folder, -1, dir_item);
+        m_treeCtrl->SetItemImage( id, wxFileIconsTable::folder_open,
+                                  wxTreeItemIcon_Expanded );
 
         // Has this got any children? If so, make it expandable.
@@ -972,5 +778,8 @@
             //path = dirName + wxString(wxT("/")) + eachFilename;
             wxDirItemData *dir_item = new wxDirItemData(path,eachFilename,FALSE);
-            (void)m_treeCtrl->AppendItem( parentId, eachFilename, 2, -1, dir_item);
+            int image_id = wxFileIconsTable::file;
+            if (eachFilename.Find(wxT('.')) != wxNOT_FOUND)
+                image_id = wxTheFileIconsTable->GetIconID(eachFilename.AfterLast(wxT('.')));
+            (void)m_treeCtrl->AppendItem( parentId, eachFilename, image_id, -1, dir_item);
         }
     }
@@ -1340,4 +1149,415 @@
         SetSelection(defaultFilter);
     }
+}
+
+// ----------------------------------------------------------------------------
+// wxFileIconsTable icons
+// ----------------------------------------------------------------------------
+
+/* Open folder */
+static const char * file_icons_tbl_folder_open_xpm[] = {
+/* width height ncolors chars_per_pixel */
+"16 16 6 1",
+/* colors */
+"   s None  c None",
+".  c #000000",
+"+  c #c0c0c0",
+"@  c #808080",
+"#  c #ffff00",
+"$  c #ffffff",
+/* pixels */
+"                ",
+"   @@@@@        ",
+"  @$$$$$@       ",
+" @$#+#+#$@@@@@@ ",
+" @$+#+#+$$$$$$@.",
+" @$#+#+#+#+#+#@.",
+"@@@@@@@@@@@@@#@.",
+"@$$$$$$$$$$@@+@.",
+"@$#+#+#+#+##.@@.",
+" @$#+#+#+#+#+.@.",
+" @$+#+#+#+#+#.@.",
+"  @$+#+#+#+##@..",
+"  @@@@@@@@@@@@@.",
+"   .............",
+"                ",
+"                "};
+
+/* Computer */
+static const char * file_icons_tbl_computer_xpm[] = {
+"16 16 7 1",
+"     s None    c None",
+".    c #808080",
+"X    c #c0c0c0",
+"o    c Black",
+"O    c Gray100",
+"+    c #008080",
+"@    c Blue",
+"    ........... ",
+"   .XXXXXXXXXX.o",
+"   .OOOOOOOOO..o",
+"   .OoooooooX..o",
+"   .Oo+...@+X..o",
+"   .Oo+XXX.+X..o",
+"   .Oo+....+X..o",
+"   .Oo++++++X..o",
+"   .OXXXXXXXX.oo",
+"   ..........o.o",
+"   ...........Xo",
+"   .XXXXXXXXXX.o",
+"  .o.o.o.o.o...o",
+" .oXoXoXoXoXo.o ",
+".XOXXXXXXXXX.o  ",
+"............o   "};
+
+/* Drive */
+static const char * file_icons_tbl_drive_xpm[] = {
+"16 16 7 1",
+"     s None    c None",
+".    c #808080",
+"X    c #c0c0c0",
+"o    c Black",
+"O    c Gray100",
+"+    c Green",
+"@    c #008000",
+"                ",
+"                ",
+"                ",
+"                ",
+"  ............. ",
+" .XXXXXXXXXXXX.o",
+".OOOOOOOOOOOO..o",
+".XXXXXXXXX+@X..o",
+".XXXXXXXXXXXX..o",
+".X..........X..o",
+".XOOOOOOOOOOX..o",
+"..............o ",
+" ooooooooooooo  ",
+"                ",
+"                ",
+"                "};
+
+/* CD-ROM */
+static const char *file_icons_tbl_cdrom_xpm[] = {
+"16 16 10 1",
+"     s None    c None",
+".    c #808080",
+"X    c #c0c0c0",
+"o    c Yellow",
+"O    c Blue",
+"+    c Black",
+"@    c Gray100",
+"#    c #008080",
+"$    c Green",
+"%    c #008000",
+"        ...     ",
+"      ..XoX..   ",
+"     .O.XoXXX+  ",
+"    ...O.oXXXX+ ",
+"    .O..X.XXXX+ ",
+"   ....X.+..XXX+",
+"   .XXX.+@+.XXX+",
+"   .X@XX.+.X@@X+",
+" .....X...#XX@+ ",
+".@@@...XXo.O@X+ ",
+".@XXX..XXoXOO+  ",
+".@++++..XoX+++  ",
+".@$%@@XX+++X.+  ",
+".............+  ",
+" ++++++++++++   ",
+"                "};
+
+/* Floppy */
+static const char * file_icons_tbl_floppy_xpm[] = {
+"16 16 7 1",
+"     s None    c None",
+".    c #808080",
+"X    c Gray100",
+"o    c #c0c0c0",
+"O    c Black",
+"+    c Cyan",
+"@    c Red",
+"         ......X",
+"        .ooooooO",
+"        .+++++OO",
+"        .++++++O",
+"        .++++++O",
+"        .ooooooO",
+"  .......o....oO",
+" .oooooo.o.O.XoO",
+".XXXXXXXXOOOOOO ",
+".ooooooooo@o..O ",
+".ooo....oooo..O ",
+".o..OOOO...o..O ",
+".oooXXXXoooo..O ",
+".............O  ",
+" OOOOOOOOOOOO   ",
+"                "};
+
+/* Removeable */
+static const char * file_icons_tbl_removeable_xpm[] = {
+"16 16 7 1",
+"     s None    c None",
+".    c #808080",
+"X    c #c0c0c0",
+"o    c Black",
+"O    c Gray100",
+"+    c Red",
+"@    c #800000",
+"                ",
+"                ",
+"                ",
+"  ............. ",
+" .XXXXXXXXXXXX.o",
+".OOOOOOOOOOOO..o",
+".OXXXXXXXXXXX..o",
+".O+@.oooooo.X..o",
+".OXXOooooooOX..o",
+".OXXXOOOOOOXX..o",
+".OXXXXXXXXXXX..o",
+".O............o ",
+" ooooooooooooo  ",
+"                ",
+"                ",
+"                "};
+
+// ----------------------------------------------------------------------------
+// wxFileIconsTable & friends
+// ----------------------------------------------------------------------------
+
+// global instance of a wxFileIconsTable
+wxFileIconsTable* wxTheFileIconsTable = (wxFileIconsTable *)NULL;
+
+// A module to allow icons table cleanup
+
+class wxFileIconsTableModule: public wxModule
+{
+DECLARE_DYNAMIC_CLASS(wxFileIconsTableModule)
+public:
+    wxFileIconsTableModule() {}
+    bool OnInit() { wxTheFileIconsTable = new wxFileIconsTable; return TRUE; }
+    void OnExit()
+    {
+        if (wxTheFileIconsTable)
+        {
+            delete wxTheFileIconsTable;
+            wxTheFileIconsTable = NULL;
+        }
+    }
+};
+
+IMPLEMENT_DYNAMIC_CLASS(wxFileIconsTableModule, wxModule)
+
+class wxFileIconEntry : public wxObject
+{
+public:
+    wxFileIconEntry(int i) { id = i; }
+
+    int id;
+};
+
+wxFileIconsTable::wxFileIconsTable()
+{
+    m_HashTable = NULL;
+    m_smallImageList = NULL;
+}
+
+wxFileIconsTable::~wxFileIconsTable()
+{
+    if (m_HashTable) delete m_HashTable;
+    if (m_smallImageList) delete m_smallImageList;
+}
+
+// delayed initialization - wait until first use (wxArtProv not created yet)
+void wxFileIconsTable::Create()
+{
+    wxCHECK_RET(!m_smallImageList && !m_HashTable, wxT("creating icons twice"));
+printf("creating \n"); fflush(stdout);
+    m_HashTable = new wxHashTable(wxKEY_STRING);
+    m_smallImageList = new wxImageList(16, 16);
+
+    m_HashTable->DeleteContents(TRUE);
+    // folder:
+    m_smallImageList->Add(wxArtProvider::GetBitmap(wxART_FOLDER, wxART_CMN_DIALOG));
+    // folder_open
+    m_smallImageList->Add(wxIcon(file_icons_tbl_folder_open_xpm));
+    // computer
+    m_smallImageList->Add(wxIcon(file_icons_tbl_computer_xpm));
+    // drive
+    m_smallImageList->Add(wxIcon(file_icons_tbl_drive_xpm));
+    // cdrom
+    m_smallImageList->Add(wxIcon(file_icons_tbl_cdrom_xpm));
+    // floppy
+    m_smallImageList->Add(wxIcon(file_icons_tbl_floppy_xpm));
+    // removeable
+    m_smallImageList->Add(wxIcon(file_icons_tbl_removeable_xpm));
+    // file
+    m_smallImageList->Add(wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_CMN_DIALOG));
+    // executable
+    if (GetIconID(wxEmptyString, _T("application/x-executable")) == file)
+    {
+        m_smallImageList->Add(wxArtProvider::GetBitmap(wxART_EXECUTABLE_FILE, wxART_CMN_DIALOG));
+        m_HashTable->Delete(_T("exe"));
+        m_HashTable->Put(_T("exe"), new wxFileIconEntry(executable));
+    }
+    /* else put into list by GetIconID
+       (KDE defines application/x-executable for *.exe and has nice icon)
+     */
+}
+
+wxImageList *wxFileIconsTable::GetSmallImageList()
+{
+    if (!m_smallImageList)
+        Create();
+
+    return m_smallImageList;
+}
+
+#if wxUSE_MIMETYPE
+// VS: we don't need this function w/o wxMimeTypesManager because we'll only have
+//     one icon and we won't resize it
+
+static wxBitmap CreateAntialiasedBitmap(const wxImage& img)
+{
+    wxImage smallimg (16, 16);
+    unsigned char *p1, *p2, *ps;
+    unsigned char mr = img.GetMaskRed(),
+                  mg = img.GetMaskGreen(),
+                  mb = img.GetMaskBlue();
+
+    unsigned x, y;
+    unsigned sr, sg, sb, smask;
+
+    p1 = img.GetData(), p2 = img.GetData() + 3 * 32, ps = smallimg.GetData();
+    smallimg.SetMaskColour(mr, mr, mr);
+
+    for (y = 0; y < 16; y++)
+    {
+        for (x = 0; x < 16; x++)
+        {
+            sr = sg = sb = smask = 0;
+            if (p1[0] != mr || p1[1] != mg || p1[2] != mb)
+                sr += p1[0], sg += p1[1], sb += p1[2];
+            else smask++;
+            p1 += 3;
+            if (p1[0] != mr || p1[1] != mg || p1[2] != mb)
+                sr += p1[0], sg += p1[1], sb += p1[2];
+            else smask++;
+            p1 += 3;
+            if (p2[0] != mr || p2[1] != mg || p2[2] != mb)
+                sr += p2[0], sg += p2[1], sb += p2[2];
+            else smask++;
+            p2 += 3;
+            if (p2[0] != mr || p2[1] != mg || p2[2] != mb)
+                sr += p2[0], sg += p2[1], sb += p2[2];
+            else smask++;
+            p2 += 3;
+
+            if (smask > 2)
+                ps[0] = ps[1] = ps[2] = mr;
+            else
+                ps[0] = sr >> 2, ps[1] = sg >> 2, ps[2] = sb >> 2;
+            ps += 3;
+        }
+        p1 += 32 * 3, p2 += 32 * 3;
+    }
+
+    return wxBitmap(smallimg);
+}
+
+// finds empty borders and return non-empty area of image:
+static wxImage CutEmptyBorders(const wxImage& img)
+{
+    unsigned char mr = img.GetMaskRed(),
+                  mg = img.GetMaskGreen(),
+                  mb = img.GetMaskBlue();
+    unsigned char *dt = img.GetData(), *dttmp;
+    unsigned w = img.GetWidth(), h = img.GetHeight();
+
+    unsigned top, bottom, left, right, i;
+    bool empt;
+
+#define MK_DTTMP(x,y)      dttmp = dt + ((x + y * w) * 3)
+#define NOEMPTY_PIX(empt)  if (dttmp[0] != mr || dttmp[1] != mg || dttmp[2] != mb) {empt = FALSE; break;}
+
+    for (empt = TRUE, top = 0; empt && top < h; top++)
+    {
+        MK_DTTMP(0, top);
+        for (i = 0; i < w; i++, dttmp+=3)
+            NOEMPTY_PIX(empt)
+    }
+    for (empt = TRUE, bottom = h-1; empt && bottom > top; bottom--)
+    {
+        MK_DTTMP(0, bottom);
+        for (i = 0; i < w; i++, dttmp+=3)
+            NOEMPTY_PIX(empt)
+    }
+    for (empt = TRUE, left = 0; empt && left < w; left++)
+    {
+        MK_DTTMP(left, 0);
+        for (i = 0; i < h; i++, dttmp+=3*w)
+            NOEMPTY_PIX(empt)
+    }
+    for (empt = TRUE, right = w-1; empt && right > left; right--)
+    {
+        MK_DTTMP(right, 0);
+        for (i = 0; i < h; i++, dttmp+=3*w)
+            NOEMPTY_PIX(empt)
+    }
+    top--, left--, bottom++, right++;
+
+    return img.GetSubImage(wxRect(left, top, right - left + 1, bottom - top + 1));
+}
+#endif // wxUSE_MIMETYPE
+
+int wxFileIconsTable::GetIconID(const wxString& extension, const wxString& mime)
+{
+    if (!m_smallImageList)
+        Create();
+
+#if wxUSE_MIMETYPE
+    if (!extension.IsEmpty())
+    {
+        wxFileIconEntry *entry = (wxFileIconEntry*) m_HashTable->Get(extension);
+        if (entry) return (entry -> id);
+    }
+
+    wxFileType *ft = (mime.IsEmpty()) ?
+                   wxTheMimeTypesManager -> GetFileTypeFromExtension(extension) :
+                   wxTheMimeTypesManager -> GetFileTypeFromMimeType(mime);
+    wxIcon ic;
+    if (ft == NULL || (!ft->GetIcon(&ic)) || (!ic.Ok()))
+    {
+        int newid = file;
+        m_HashTable->Put(extension, new wxFileIconEntry(newid));
+        return newid;
+    }
+
+    wxBitmap tmpBmp;
+    tmpBmp.CopyFromIcon(ic);
+    wxImage img = tmpBmp.ConvertToImage();
+
+    delete ft;
+
+    int id = m_smallImageList->GetImageCount();
+    if (img.GetWidth() == 16 && img.GetHeight() == 16)
+        m_smallImageList->Add(wxBitmap(img));
+    else
+    {
+        if (img.GetWidth() != 32 || img.GetHeight() != 32)
+            m_smallImageList->Add(CreateAntialiasedBitmap(CutEmptyBorders(img).Rescale(32, 32)));
+        else
+            m_smallImageList->Add(CreateAntialiasedBitmap(img));
+    }
+    m_HashTable->Put(extension, new wxFileIconEntry(id));
+    return id;
+
+#else // !wxUSE_MIMETYPE
+
+    if (extension == wxT("exe"))
+        return executable;
+    else
+        return file;
+#endif // wxUSE_MIMETYPE/!wxUSE_MIMETYPE
 }
 

 	  	 

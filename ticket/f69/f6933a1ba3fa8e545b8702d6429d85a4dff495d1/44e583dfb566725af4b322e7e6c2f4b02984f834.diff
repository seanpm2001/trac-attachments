diff -uNr wxorig/src/common/dcsvg.cpp wxnew/src/common/dcsvg.cpp
--- wxorig/src/common/dcsvg.cpp	2011-03-19 21:30:38.000000000 -0400
+++ wxnew/src/common/dcsvg.cpp	2011-03-24 12:04:30.000000000 -0400
@@ -40,23 +40,55 @@
 
 inline double DegToRad(double deg) { return (deg * M_PI) / 180.0; }
 
+wxString wxPenString ( wxColour c, int style )
+{
+    wxString s = wxT("stroke:") + c.GetAsString(wxC2S_HTML_SYNTAX)  + wxT("; ");
+    // Use the color's alpha value (if not opaque) for the opacity.
+    // Note that a transparent pen will override the alpha value.
+    if (c.Alpha() != wxALPHA_OPAQUE && style != wxPENSTYLE_TRANSPARENT)
+    {
+        s += wxString::Format(wxT("stroke-opacity:%s; "), wxString::FromCDouble(c.Alpha()/(double)255, 2));
+    }
+    else
+    {
+        switch ( style )
+        {
+            case wxPENSTYLE_SOLID:
+                s += wxT("stroke-opacity:1.0; ");
+                break;
+            case wxPENSTYLE_TRANSPARENT:
+                s += wxT("stroke-opacity:0.0; ");
+                break;
+            default :
+                wxASSERT_MSG(false, wxT("wxSVGFileDC::Requested Pen Style not available"));
+        }
+    }
+    return s;
+}
+
 wxString wxBrushString ( wxColour c, int style )
 {
     wxString s = wxT("fill:") + c.GetAsString(wxC2S_HTML_SYNTAX)  + wxT("; ");
-    switch ( style )
+    // Use the color's alpha value (if not opaque) for the opacity.
+    // Note that a transparent brush will override the alpha value.
+    if (c.Alpha() != wxALPHA_OPAQUE && style != wxBRUSHSTYLE_TRANSPARENT)
     {
-        case wxBRUSHSTYLE_SOLID :
-            s = s + wxT("fill-opacity:1.0; ");
-            break;
-        case wxBRUSHSTYLE_TRANSPARENT:
-            s = s + wxT("fill-opacity:0.0; ");
-            break;
-
-        default :
-            wxASSERT_MSG(false, wxT("wxSVGFileDC::Requested Brush Style not available"));
-
+        s += wxString::Format(wxT("fill-opacity:%s; "), wxString::FromCDouble(c.Alpha()/(double)255, 2));
+    }
+    else
+    {
+        switch ( style )
+        {
+            case wxBRUSHSTYLE_SOLID:
+                s += wxT("fill-opacity:1.0; ");
+                break;
+            case wxBRUSHSTYLE_TRANSPARENT:
+                s += wxT("fill-opacity:0.0; ");
+                break;
+            default :
+                wxASSERT_MSG(false, wxT("wxSVGFileDC::Requested Brush Style not available"));
+        }
     }
-    s = s + wxT("\n");
     return s;
 }
 
@@ -230,31 +262,32 @@
         // just like DoDrawRectangle except we pass the text color to it and set the border to a 1 pixel wide text background
 
         wxASSERT_MSG(!wxSVG_DEBUG, wxT("wxSVGFileDC::Draw Rotated Text Call plotting text background"));
-        sTmp.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\"  "), x,y+desc-h, w, h );
-        s = sTmp + wxT("style=\"fill:") + m_textBackgroundColour.GetAsString(wxC2S_HTML_SYNTAX) + wxT("; ");
-        s = s + wxT("stroke-width:1; stroke:") + m_textBackgroundColour.GetAsString(wxC2S_HTML_SYNTAX) + wxT("; ");
-        sTmp.Printf ( wxT("\" transform=\"rotate( %s %d %d )  \">"), NumStr(-angle), x,y );
-        s = s + sTmp + wxT("\n");
+        sTmp.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" "), x,y+desc-h, w, h );
+        s = sTmp + wxT("style=\"") + wxBrushString(m_textBackgroundColour, wxBRUSHSTYLE_SOLID);
+        s += wxT("stroke-width:1; ") + wxPenString(m_textBackgroundColour, wxPENSTYLE_SOLID);
+        sTmp.Printf ( wxT("\" transform=\"rotate( %s %d %d )  \" />"), NumStr(-angle), x,y );
+        s += sTmp + wxT("\n");
         write(s);
     }
     //now do the text itself
     s.Printf (wxT(" <text x=\"%d\" y=\"%d\" "),x,y );
 
     sTmp = m_font.GetFaceName ();
-    if (sTmp.Len () > 0)  s = s + wxT("style=\"font-family:") + sTmp + wxT("; ");
-    else s = s + wxT("style=\" ");
+    if (sTmp.Len () > 0)  s += wxT("style=\"font-family:") + sTmp + wxT("; ");
+    else s += wxT("style=\" ");
 
     wxString fontweights [3] = { wxT("normal"), wxT("lighter"), wxT("bold") };
-    s = s + wxT("font-weight:") + fontweights[m_font.GetWeight() - wxNORMAL] + wxT("; ");
+    s += wxT("font-weight:") + fontweights[m_font.GetWeight() - wxNORMAL] + wxT("; ");
 
     wxString fontstyles [5] = { wxT("normal"), wxT("style error"), wxT("style error"), wxT("italic"), wxT("oblique") };
-    s = s + wxT("font-style:") + fontstyles[m_font.GetStyle() - wxNORMAL] + wxT("; ");
+    s += wxT("font-style:") + fontstyles[m_font.GetStyle() - wxNORMAL] + wxT("; ");
 
-    sTmp.Printf (wxT("font-size:%dpt; fill:"), m_font.GetPointSize () );
-    s = s + sTmp;
-    s = s + m_textForegroundColour.GetAsString(wxC2S_HTML_SYNTAX) + wxT("; stroke:") + m_textForegroundColour.GetAsString(wxC2S_HTML_SYNTAX) + wxT("; ");
+    sTmp.Printf (wxT("font-size:%dpt; "), m_font.GetPointSize () );
+    s += sTmp;
+    //text will be solid, unless alpha value isn't opaque in the foreground colour
+    s += wxBrushString(m_textForegroundColour, wxBRUSHSTYLE_SOLID) + wxPenString(m_textForegroundColour, wxPENSTYLE_SOLID);
     sTmp.Printf ( wxT("stroke-width:0;\"  transform=\"rotate( %s %d %d )  \" >"),  NumStr(-angle), x,y );
-    s = s + sTmp + sText + wxT("</text> ") + wxT("\n");
+    s += sTmp + sText + wxT("</text> ") + wxT("\n");
     if (m_OK)
     {
         write(s);
@@ -276,7 +309,7 @@
     s.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" rx=\"%s\" "),
             x, y, width, height, NumStr(radius) );
 
-    s = s + wxT(" /> ") + wxT("\n");
+    s += wxT(" /> \n");
     write(s);
 
     wxASSERT_MSG(!wxSVG_DEBUG, wxT("wxSVGFileDC::DoDrawRoundedRectangle Call executed"));
@@ -292,20 +325,20 @@
     wxString s, sTmp;
     s = wxT("<polygon style=\"");
     if ( fillStyle == wxODDEVEN_RULE )
-        s = s + wxT("fill-rule:evenodd; ");
+        s += wxT("fill-rule:evenodd; ");
     else
-        s = s + wxT("fill-rule:nonzero; ");
+        s += wxT("fill-rule:nonzero; ");
 
-    s = s  + wxT("\" \npoints=\"");
+    s += wxT("\" \npoints=\"");
 
     for (int i = 0; i < n;  i++)
     {
         sTmp.Printf ( wxT("%d,%d"), points [i].x+xoffset, points[i].y+yoffset );
-        s = s + sTmp + wxT("\n");
+        s += sTmp + wxT("\n");
         CalcBoundingBox ( points [i].x+xoffset, points[i].y+yoffset);
     }
-    s = s + wxT("\" /> ");
-    s = s + wxT("\n");
+    s += wxT("\" /> ");
+    s += wxT("\n");
     write(s);
 
     wxASSERT_MSG(!wxSVG_DEBUG, wxT("wxSVGFileDC::DoDrawPolygon Call executed"));
@@ -321,7 +354,7 @@
 
     wxString s;
     s.Printf ( wxT("<ellipse cx=\"%d\" cy=\"%d\" rx=\"%d\" ry=\"%d\" "), x+rw,y+rh, rw, rh );
-    s = s + wxT(" /> ") + wxT("\n");
+    s += wxT(" /> \n");
 
     write(s);
 
@@ -370,7 +403,7 @@
         x1,y1, NumStr(r1), NumStr(r2), fArc, fSweep, x2, y2, xc, yc );
 
     // the z means close the path and fill
-    s = s + wxT(" \" /> ") + wxT("\n");
+    s += wxT(" \" /> \n");
 
 
     if (m_OK)
@@ -433,8 +466,7 @@
         int(xs), int(ys), int(rx), int(ry),
         fArc, fSweep, int(xe), int(ye), int(xc), int(yc)  );
 
-
-    s = s + wxT(" \" /> ") + wxT("\n");
+    s += wxT(" \" /> \n");
 
     if (m_OK)
     {
@@ -518,16 +550,12 @@
 
 void wxSVGFileDCImpl::NewGraphics ()
 {
-
-    int w = m_pen.GetWidth ();
-    wxColour c = m_pen.GetColour ();
-
     wxString s, sBrush, sPenCap, sPenJoin, sPenStyle, sLast, sWarn;
 
-    sBrush = wxT("</g>\n<g style=\"") + wxBrushString ( m_brush.GetColour (), m_brush.GetStyle () )
-            + wxT("  stroke:") + c.GetAsString(wxC2S_HTML_SYNTAX) + wxT("; ");
+    sBrush = wxT("</g>\n<g style=\"") + wxBrushString ( m_brush.GetColour(), m_brush.GetStyle() )
+            + wxPenString(m_pen.GetColour(), m_pen.GetStyle());
 
-    switch ( m_pen.GetCap () )
+    switch ( m_pen.GetCap() )
     {
         case  wxCAP_PROJECTING :
             sPenCap = wxT("stroke-linecap:square; ");
@@ -552,21 +580,8 @@
             sPenJoin = wxT("stroke-linejoin:round; ");
     };
 
-    switch ( m_pen.GetStyle () )
-    {
-        case  wxPENSTYLE_SOLID :
-            sPenStyle = wxT("stroke-opacity:1.0; stroke-opacity:1.0; ");
-            break;
-        case  wxPENSTYLE_TRANSPARENT :
-            sPenStyle = wxT("stroke-opacity:0.0; stroke-opacity:0.0; ");
-            break;
-        default :
-            wxASSERT_MSG(false, wxT("wxSVGFileDC::SetPen Call called to set a Style which is not available"));
-            sWarn = sWarn + wxT("<!--- wxSVGFileDC::SetPen Call called to set a Style which is not available --> \n");
-    }
-
     sLast.Printf( wxT("stroke-width:%d\" \n   transform=\"translate(%s %s) scale(%s %s)\">"),
-                w, NumStr(m_logicalOriginX), NumStr(m_logicalOriginY), NumStr(m_scaleX), NumStr(m_scaleY)  );
+                m_pen.GetWidth(), NumStr(m_logicalOriginX), NumStr(m_logicalOriginY), NumStr(m_scaleX), NumStr(m_scaleY)  );
 
     s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast + wxT("\n") + sWarn;
     write(s);
@@ -652,9 +667,9 @@
     int w = myBitmap.GetWidth();
     int h = myBitmap.GetHeight();
     sTmp.Printf ( wxT(" <image x=\"%d\" y=\"%d\" width=\"%dpx\" height=\"%dpx\" "), x,y,w,h );
-    s = s + sTmp;
+    s += sTmp;
     sTmp.Printf ( wxT(" xlink:href=\"%s\"> \n"), sPNG.c_str() );
-    s = s + sTmp + wxT("<title>Image from wxSVG</title>  </image>") + wxT("\n");
+    s += sTmp + wxT("<title>Image from wxSVG</title>  </image>") + wxT("\n");
 
     if (m_OK && bPNG_OK)
     {

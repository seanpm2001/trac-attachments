Index: docs/latex/wx/menuitem.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/menuitem.tex,v
retrieving revision 1.24
diff -bu2 -r1.24 docs/latex/wx/menuitem.tex
--- docs/latex/wx/menuitem.tex
+++ docs/latex/wx/menuitem.tex
@@ -44,9 +44,31 @@

 The preferred way to create standard menu items is to use default value of
-\arg{text}. If no text is supplied and \arg{id} is one of standard IDs from
-\helpref{this list}{stockitems}, a standard label and a standard accelerator
-will be used. In addition to that, the button will be decorated with stock
+\arg{text} (the empty string). In fact, if no text is supplied and \arg{id}
+is one of standard IDs from \helpref{this list}{stockitems}, a standard label
+and a standard accelerator will be used.
+
+If \arg{helpString} is empty too, and \arg{id} is a stock ID,
+also a standard help string will be used for some of the most common IDs.
+
+In addition to that, if \arg{id} is a stock ID, the button will be decorated with stock
 icons under GTK+ 2.

+Note that you can e.g. use a stock menu label without using its stock help string:
+
+\begin{verbatim}
+// use all stock properties:
+helpMenu->Append(wxID_ABOUT);
+
+// use the stock label and the stock accelerator but not the stock help string:
+helpMenu->Append(wxID_ABOUT, wxEmptyString, wxT("My custom help string"));
+
+// use all stock properties except for the bitmap:
+wxMenuItem *mymenu = new wxMenuItem(helpMenu, wxID_ABOUT);
+mymenu->SetBitmap(wxArtProvider::GetBitmap(wxART_WARNING));
+helpMenu->Append(mymenu);
+\end{verbatim}
+
+that is, stock properties are set independently one from the other.
+
 \wxheading{Parameters}

Index: docs/latex/wx/stockitems.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/stockitems.tex,v
retrieving revision 1.4
diff -bu2 -r1.4 docs/latex/wx/stockitems.tex
--- docs/latex/wx/stockitems.tex
+++ docs/latex/wx/stockitems.tex
@@ -1,8 +1,10 @@
 \section{Stock items}\label{stockitems}

-Window IDs for which stock buttons are created
-(see \helpref{wxButton constructor}{wxbuttonctor}):
+Window IDs for which stock buttons and menu items are created
+(see \helpref{wxButton constructor}{wxbuttonctor} and
+\helpref{wxMenuItem constructor}{wxmenuitemctor}):

 \begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf Stock ID}}{{\bf Stock label}}
 \twocolitem{wxID\_ABOUT}{"\&About"}
 \twocolitem{wxID\_ADD}{"Add"}
@@ -59,3 +61,7 @@
 \twocolitem{wxID\_ZOOM\_IN}{"Zoom \&In"}
 \twocolitem{wxID\_ZOOM\_OUT}{"Zoom \&Out"}
-\end{twocollist}\itemsep=0pt
+\end{twocollist}
+
+
+Note that some of the IDs listed above have also a stock accelerator
+and an help string associated.
Index: include/wx/menuitem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/menuitem.h,v
retrieving revision 1.36
diff -bu2 -r1.36 include/wx/menuitem.h
--- include/wx/menuitem.h
+++ include/wx/menuitem.h
@@ -65,5 +65,5 @@
     //     different from the item's label which only contains the text shown
     //     in the menu
-    virtual void SetText(const wxString& str) { m_text = str; }
+    virtual void SetText(const wxString& str);
     wxString GetLabel() const { return GetLabelFromText(m_text); }
     const wxString& GetText() const { return m_text; }
@@ -93,5 +93,5 @@

     // help string (displayed in the status bar by default)
-    void SetHelp(const wxString& str) { m_help = str; }
+    void SetHelp(const wxString& str);
     const wxString& GetHelp() const { return m_help; }

Index: include/wx/stockitem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/stockitem.h,v
retrieving revision 1.8
diff -bu2 -r1.8 include/wx/stockitem.h
--- include/wx/stockitem.h
+++ include/wx/stockitem.h
@@ -52,4 +52,16 @@
 #endif

+// wxStockHelpStringClient conceptually works like wxArtClient: it gives an hint
+// to wxGetStockHelpString() about the context where the help string will be used.
+enum wxStockHelpStringClient
+{
+    wxSTOCK_MENU        // an help string to use for menu items
+};
+
+// Returns an help string for the given stock UI element and for the given "context".
+WXDLLEXPORT wxString wxGetStockHelpString(wxWindowID id,
+                                          wxStockHelpStringClient client = wxSTOCK_MENU);
+
+
 #ifdef __WXGTK20__

Index: samples/minimal/minimal.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/minimal/minimal.cpp,v
retrieving revision 1.71
diff -bu2 -r1.71 samples/minimal/minimal.cpp
--- samples/minimal/minimal.cpp
+++ samples/minimal/minimal.cpp
@@ -86,5 +86,6 @@
     // it is important for the id corresponding to the "About" command to have
     // this standard value as otherwise it won't be handled properly under Mac
-    // (where it is special and put into the "Apple" menu)
+    // (where it is special and put into the "Apple" menu) and it won't get a
+    // stock bitmap / help description
     Minimal_About = wxID_ABOUT
 };
@@ -142,4 +143,6 @@
 // ----------------------------------------------------------------------------

+#include "wx/artprov.h"
+
 // frame constructor
 MyFrame::MyFrame(const wxString& title)
@@ -155,7 +158,6 @@
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tF1"), _T("Show about dialog"));
-
-    fileMenu->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    helpMenu->Append(Minimal_About);        // Minimal_About (wxID_ABOUT) is a stock menu item
+    fileMenu->Append(Minimal_Quit);         // Minimal_Quit (wxID_EXIT) is a stock menu item

     // now append the freshly created menu to the menu bar...
Index: src/common/menucmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/menucmn.cpp,v
retrieving revision 1.62
diff -bu2 -r1.62 src/common/menucmn.cpp
--- src/common/menucmn.cpp
+++ src/common/menucmn.cpp
@@ -35,4 +35,6 @@
 #endif

+#include "wx/stockitem.h"
+
 // ----------------------------------------------------------------------------
 // template lists
@@ -175,11 +177,15 @@
 wxAcceleratorEntry::ParseAccel(const wxString& text, int *flagsOut, int *keyOut)
 {
-    // the parser won't like leading/trailing spaces
-    wxString label = text.Strip(wxString::both);
+    // the parser won't like trailing spaces
+    wxString label = text;
+    label.Trim(true);  // the initial \t must be preserved so don't strip leading whitespaces

     // check for accelerators: they are given after '\t'
     int posTab = label.Find(wxT('\t'));
     if ( posTab == wxNOT_FOUND )
+    {
+        wxLogDebug(wxT("Invalid menu label; no accelerators"));
         return false;
+    }

     // parse the accelerator string
@@ -361,6 +367,4 @@
                                wxItemKind kind,
                                wxMenu *subMenu)
-              : m_text(text),
-                m_help(help)
 {
     wxASSERT_MSG( parentMenu != NULL, wxT("menuitem should have a menu") );
@@ -376,4 +380,7 @@
     if (m_id == wxID_SEPARATOR)
         m_kind = wxITEM_SEPARATOR;
+
+    SetText(text);
+    SetHelp(help);
 }

@@ -404,4 +411,26 @@
 #endif // wxUSE_ACCEL

+void wxMenuItemBase::SetText(const wxString& str)
+{
+    m_text = str;
+
+    if (m_text.IsEmpty() && !IsSeparator())
+    {
+        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
+        m_text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+}
+
+void wxMenuItemBase::SetHelp(const wxString& str)
+{
+    m_help = str;
+
+    if (m_help.IsEmpty() && !IsSeparator() && wxIsStockID(GetId()))
+    {
+        // get a stock help string
+        m_help = wxGetStockHelpString(GetId());
+    }
+}
+
 bool wxMenuBase::ms_locked = true;

Index: src/common/stockitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/stockitem.cpp,v
retrieving revision 1.18
diff -bu2 -r1.18 src/common/stockitem.cpp
--- src/common/stockitem.cpp
+++ src/common/stockitem.cpp
@@ -191,4 +191,40 @@
 }

+wxString wxGetStockHelpString(wxWindowID id, wxStockHelpStringClient client)
+{
+    wxString stockHelp;
+
+    #define STOCKITEM(stockid, ctx, helpstr)             \
+        case stockid:                                    \
+            if (client==ctx) stockHelp = helpstr;        \
+            break;
+
+    switch (id)
+    {
+        // NB: these help string should be not too specific as they could be used
+        //     in completely different programs!
+        STOCKITEM(wxID_ABOUT,    wxSTOCK_MENU, _("Show about dialog"))
+        STOCKITEM(wxID_COPY,     wxSTOCK_MENU, _("Copy selection"))
+        STOCKITEM(wxID_CUT,      wxSTOCK_MENU, _("Cut selection"))
+        STOCKITEM(wxID_DELETE,   wxSTOCK_MENU, _("Delete selection"))
+        STOCKITEM(wxID_REPLACE,  wxSTOCK_MENU, _("Replace selection"))
+        STOCKITEM(wxID_PASTE,    wxSTOCK_MENU, _("Paste selection"))
+        STOCKITEM(wxID_EXIT,     wxSTOCK_MENU, _("Quit this program"))
+        STOCKITEM(wxID_REDO,     wxSTOCK_MENU, _("Redo last action"))
+        STOCKITEM(wxID_UNDO,     wxSTOCK_MENU, _("Undo last action"))
+        STOCKITEM(wxID_CLOSE,    wxSTOCK_MENU, _("Close current document"))
+        STOCKITEM(wxID_SAVE,     wxSTOCK_MENU, _("Save current document"))
+        STOCKITEM(wxID_SAVEAS,   wxSTOCK_MENU, _("Save current document with a different filename"))
+
+        default:
+            // there's no stock help string for this ID / client
+            return wxEmptyString;
+    }
+
+    #undef STOCKITEM
+
+    return stockHelp;
+}
+
 #if wxUSE_ACCEL

Index: src/gtk1/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk1/menu.cpp,v
retrieving revision 1.182
diff -bu2 -r1.182 src/gtk1/menu.cpp
--- src/gtk1/menu.cpp
+++ src/gtk1/menu.cpp
@@ -770,5 +770,5 @@
 {
     wxString str = string;
-    if (str.IsEmpty())
+    if (str.IsEmpty() && !IsSeparator())
     {
         wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
Index: src/msw/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/menuitem.cpp,v
retrieving revision 1.69
diff -bu2 -r1.69 src/msw/menuitem.cpp
--- src/msw/menuitem.cpp
+++ src/msw/menuitem.cpp
@@ -155,10 +155,4 @@
 void wxMenuItem::Init()
 {
-    if (m_text.IsEmpty())
-    {
-        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
-        m_text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
-    }
-
     m_radioGroup.start = -1;
     m_isRadioGroupStart = false;
@@ -352,15 +346,14 @@
         return;

-    if (text.IsEmpty())
-    {
-        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
-        text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
-    }
-
+    // wxMenuItemBase will do stock ID checks
     wxMenuItemBase::SetText(text);
-    OWNER_DRAWN_ONLY( wxOwnerDrawn::SetName(text) );
+
+    // m_text could now be different from 'text' if we are a stock menu item...
+    // so use only m_text
+
+    OWNER_DRAWN_ONLY( wxOwnerDrawn::SetName(m_text) );
 #if wxUSE_OWNER_DRAWN
     // tell the owner drawing code to to show the accel string as well
-    SetAccelString(text.AfterFirst(_T('\t')));
+    SetAccelString(m_text.AfterFirst(_T('\t')));
 #endif

@@ -400,5 +393,5 @@
         {
             flagsOld |= MF_STRING;
-            data = (wxChar*) text.c_str();
+            data = (wxChar*) m_text.c_str();
         }

@@ -414,5 +407,5 @@
         info.fMask = MIIM_TYPE;
         info.fType = MFT_STRING;
-        info.cch = text.length();
+        info.cch = m_text.length();
         info.dwTypeData = (LPTSTR) data ;
         if ( !::SetMenuItemInfo(hMenu, id, FALSE, & info) )
Index: src/os2/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/menuitem.cpp,v
retrieving revision 1.38
diff -bu2 -r1.38 src/os2/menuitem.cpp
--- src/os2/menuitem.cpp
+++ src/os2/menuitem.cpp
@@ -374,15 +374,14 @@
         return;

-    if (sText.IsEmpty())
-    {
-        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
-        sText = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
-    }
-
+    // wxMenuItemBase will do stock ID checks
     wxMenuItemBase::SetText(sText);
-    OWNER_DRAWN_ONLY(wxOwnerDrawn::SetName(sText));
+
+    // m_text could now be different from 'text' if we are a stock menu item...
+    // so use only m_text
+
+    OWNER_DRAWN_ONLY(wxOwnerDrawn::SetName(m_text));
 #if  wxUSE_OWNER_DRAWN
     if (rText.IsEmpty())
-        SetAccelString(sText.AfterFirst(_T('\t')));
+        SetAccelString(m_text.AfterFirst(_T('\t')));
     else
         SetAccelString(rText.AfterFirst(_T('\t')));
@@ -429,5 +428,5 @@
         {
             uFlagsOld |= MIS_TEXT;
-            pData = (BYTE*)sText.c_str();
+            pData = (BYTE*)m_text.c_str();
         }

Index: src/univ/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/univ/menu.cpp,v
retrieving revision 1.68
diff -bu2 -r1.68 src/univ/menu.cpp
--- src/univ/menu.cpp
+++ src/univ/menu.cpp
@@ -1539,16 +1539,10 @@
 }

-void wxMenuItem::SetText(const wxString& txt)
+void wxMenuItem::SetText(const wxString& text)
 {
-    if ( txt != m_text )
+    if ( text != m_text )
     {
-        wxString text = txt;
-        if (text.IsEmpty())
-        {
-            wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
-            text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
-        }
-
         // first call the base class version to change m_text
+        // it will also do stock item ID checks
         wxMenuItemBase::SetText(text);


 	  	 

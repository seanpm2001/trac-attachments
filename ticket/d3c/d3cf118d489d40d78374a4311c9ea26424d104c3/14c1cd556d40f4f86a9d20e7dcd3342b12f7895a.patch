Index: include/wx/accel.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/accel.h,v
retrieving revision 1.18
diff -u2 -r1.18 include/wx/accel.h
--- include/wx/accel.h
+++ include/wx/accel.h
@@ -101,4 +101,24 @@
 #endif
 
+    bool IsOk() const
+    {
+        return m_flags != 0 &&
+               m_keyCode != 0;
+    }
+
+
+    // string <-> wxAcceleratorEntry conversion
+    // ----------------------------------------
+
+    // returns a wxString for the this accelerator.
+    // this function formats it using the <flags>-<keycode> format
+    // where <flags> maybe a hyphen-separed list of "shift|alt|ctrl"
+    wxString ToString() const;
+
+    // returns true if the given string correctly initialized this object
+    // (i.e. if IsOk() returns true after this call)
+    bool FromString(const wxString &str);
+
+
 private:
     int m_flags;    // combination of wxACCEL_XXX constants
Index: include/wx/menu.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/menu.h,v
retrieving revision 1.47
diff -u2 -r1.47 include/wx/menu.h
--- include/wx/menu.h
+++ include/wx/menu.h
@@ -61,5 +61,5 @@
     // append any kind of item (normal/check/radio/separator)
     wxMenuItem* Append(int itemid,
-                       const wxString& text,
+                       const wxString& text = wxEmptyString,
                        const wxString& help = wxEmptyString,
                        wxItemKind kind = wxITEM_NORMAL)
@@ -109,5 +109,5 @@
     wxMenuItem* Insert(size_t pos,
                        int itemid,
-                       const wxString& text,
+                       const wxString& text = wxEmptyString,
                        const wxString& help = wxEmptyString,
                        wxItemKind kind = wxITEM_NORMAL)
@@ -159,5 +159,5 @@
     // prepend any item to the menu
     wxMenuItem* Prepend(int itemid,
-                        const wxString& text,
+                        const wxString& text = wxEmptyString,
                         const wxString& help = wxEmptyString,
                         wxItemKind kind = wxITEM_NORMAL)
Index: include/wx/stockitem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/stockitem.h,v
retrieving revision 1.6
diff -u2 -r1.6 include/wx/stockitem.h
--- include/wx/stockitem.h
+++ include/wx/stockitem.h
@@ -16,4 +16,5 @@
 #include "wx/wxchar.h"
 #include "wx/string.h"
+#include "wx/accel.h"
 
 // ----------------------------------------------------------------------------
@@ -28,13 +29,32 @@
 WXDLLEXPORT bool wxIsStockLabel(wxWindowID id, const wxString& label);
 
+enum wxStockLabelQueryFlag
+{
+    wxSTOCK_NOFLAGS = 0,
+
+    wxSTOCK_WITH_MNEMONIC = 1,
+    wxSTOCK_WITH_ACCELERATOR = 2
+};
+
 // Returns label that should be used for given stock UI element (e.g. "&OK"
-// for wxSTOCK_OK):
+// for wxSTOCK_OK); if wxSTOCK_WITH_MNEMONIC is given, the & character
+// is included; if wxSTOCK_WITH_ACCELERATOR is given, the stock accelerator
+// for given ID is concatenated to the label using \t as separator
 WXDLLEXPORT wxString wxGetStockLabel(wxWindowID id,
-                                     bool withCodes = true,
-                                     const wxString& accelerator = wxEmptyString);
+                                     long flags = wxSTOCK_WITH_MNEMONIC);
+
+// Returns the accelerator that should be used for given stock UI element
+// (e.g. "Ctrl+x" for wxSTOCK_EXIT)
+WXDLLEXPORT wxAcceleratorEntry wxGetStockAccelerator(wxWindowID id);
 
 #ifdef __WXGTK20__
+
+#include <gdk/gdktypes.h>
+
 // Translates stock ID to GTK+'s stock item string indentifier:
 WXDLLEXPORT const char *wxGetStockGtkID(wxWindowID id);
+
+// Returns stock accelerator modifier and key code for the given ID
+WXDLLEXPORT bool wxGetStockGtkAccelerator(const char *id, GdkModifierType *mod, guint *key);
 #endif
 
Index: include/wx/utils.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/utils.h,v
retrieving revision 1.136
diff -u2 -r1.136 include/wx/utils.h
--- include/wx/utils.h
+++ include/wx/utils.h
@@ -568,5 +568,7 @@
 #if wxUSE_ACCEL
 class WXDLLEXPORT wxAcceleratorEntry;
-WXDLLEXPORT wxAcceleratorEntry *wxGetAccelFromString(const wxString& label);
+wxDEPRECATED(
+    WXDLLEXPORT wxAcceleratorEntry *wxGetAccelFromString(const wxString& label)
+);
 #endif // wxUSE_ACCEL
 
Index: include/wx/gtk/menuitem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/menuitem.h,v
retrieving revision 1.25
diff -u2 -r1.25 include/wx/gtk/menuitem.h
--- include/wx/gtk/menuitem.h
+++ include/wx/gtk/menuitem.h
@@ -49,4 +49,8 @@
     wxString GetHotKey() const { return m_hotKey; }
 
+    // splits given string in the label, doing & => _ translation, which is returned,
+    // and in the hotkey which is used to set given pointer
+    static wxString GTKProcessMenuItemLabel(const wxString& str, wxString *hotKey);
+
     // compatibility only, don't use in new code
     wxMenuItem(wxMenu *parentMenu,
Index: src/aui/tabmdi.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/aui/tabmdi.cpp,v
retrieving revision 1.8
diff -u2 -r1.8 src/aui/tabmdi.cpp
--- src/aui/tabmdi.cpp
+++ src/aui/tabmdi.cpp
@@ -162,5 +162,5 @@
         if (pChild->GetMenuBar() == NULL)
             return;
-            
+
         // Do we need to save the current bar?
         if (m_pMyMenuBar == NULL)
@@ -284,5 +284,5 @@
     if (pMenuBar && m_pWindowMenu)
     {
-        int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,false));
+        int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,wxSTOCK_NOFLAGS));
         if (pos == wxNOT_FOUND)
             pMenuBar->Append(m_pWindowMenu, _("&Window"));
Index: src/common/menucmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/menucmn.cpp,v
retrieving revision 1.60
diff -u2 -r1.60 src/common/menucmn.cpp
--- src/common/menucmn.cpp
+++ src/common/menucmn.cpp
@@ -49,34 +49,7 @@
 
 // ----------------------------------------------------------------------------
-// wxMenuItem
+// wxAcceleratorEntry
 // ----------------------------------------------------------------------------
 
-wxMenuItemBase::wxMenuItemBase(wxMenu *parentMenu,
-                               int id,
-                               const wxString& text,
-                               const wxString& help,
-                               wxItemKind kind,
-                               wxMenu *subMenu)
-              : m_text(text),
-                m_help(help)
-{
-    wxASSERT_MSG( parentMenu != NULL, wxT("menuitem should have a menu") );
-
-    m_parentMenu  = parentMenu;
-    m_subMenu     = subMenu;
-    m_isEnabled   = true;
-    m_isChecked   = false;
-    m_id          = id;
-    m_kind        = kind;
-    if (m_id == wxID_ANY)
-        m_id = wxNewId();
-    if (m_id == wxID_SEPARATOR)
-        m_kind = wxITEM_SEPARATOR;
-}
-
-wxMenuItemBase::~wxMenuItemBase()
-{
-    delete m_subMenu;
-}
 
 #if wxUSE_ACCEL
@@ -173,9 +146,9 @@
 // first and last parameter specify the valid domain for "number" part
 static int
-IsNumberedAccelKey(const wxString& str,
-                   const wxChar *prefix,
-                   wxKeyCode prefixCode,
-                   unsigned first,
-                   unsigned last)
+        IsNumberedAccelKey(const wxString& str,
+                           const wxChar *prefix,
+                           wxKeyCode prefixCode,
+                           unsigned first,
+                           unsigned last)
 {
     const size_t lenPrefix = wxStrlen(prefix);
@@ -198,11 +171,17 @@
 }
 
-// return wxAcceleratorEntry for the given menu string or NULL if none
-wxAcceleratorEntry *wxGetAccelFromString(const wxString& label)
+bool wxAcceleratorEntry::FromString(const wxString& text)
 {
+    // the parser won't like leading/trailing spaces
+    wxString label = text.Strip(wxString::both);
+
+    // set to invalid state:
+    m_flags = 0;
+    m_keyCode = 0;
+
     // check for accelerators: they are given after '\t'
     int posTab = label.Find(wxT('\t'));
     if ( posTab == wxNOT_FOUND )
-        return NULL;
+        return false;
 
     // parse the accelerator string
@@ -253,5 +232,5 @@
         case 0:
             wxLogDebug(wxT("No accel key found, accel string ignored."));
-            return NULL;
+            return false;
 
         case 1:
@@ -268,5 +247,5 @@
         default:
             keyCode = IsNumberedAccelKey(current, wxTRANSLATE("F"),
-                                            WXK_F1, 1, 12);
+                                         WXK_F1, 1, 12);
             if ( !keyCode )
             {
@@ -284,8 +263,8 @@
             if ( !keyCode )
                 keyCode = IsNumberedAccelKey(current, wxTRANSLATE("KP_"),
-                                                WXK_NUMPAD0, 0, 9);
+                                             WXK_NUMPAD0, 0, 9);
             if ( !keyCode )
                 keyCode = IsNumberedAccelKey(current, wxTRANSLATE("SPECIAL"),
-                                                WXK_SPECIAL1, 1, 20);
+                                             WXK_SPECIAL1, 1, 20);
 
             if ( !keyCode )
@@ -293,5 +272,5 @@
                 wxLogDebug(wxT("Unrecognized accel key '%s', accel string ignored."),
                            current.c_str());
-                return NULL;
+                return false;
             }
     }
@@ -300,7 +279,98 @@
     wxASSERT_MSG( keyCode, _T("logic error: should have key code here") );
 
-    return new wxAcceleratorEntry(accelFlags, keyCode);
+    m_flags = accelFlags;
+    m_keyCode = keyCode;
+    return true;
+}
+
+wxString wxAcceleratorEntry::ToString() const
+{
+    wxString text;
+
+    int flags = GetFlags();
+    if ( flags & wxACCEL_ALT )
+        text += _("Alt-");
+    if ( flags & wxACCEL_CTRL )
+        text += _("Ctrl-");
+    if ( flags & wxACCEL_SHIFT )
+        text += _("Shift-");
+
+    const int code = GetKeyCode();
+
+    if ( wxIsalnum(code) )
+        text << (wxChar)code;
+    else if ( code >= WXK_F1 && code <= WXK_F12 )
+        text << _("F") << code - WXK_F1 + 1;
+    else if ( code >= WXK_NUMPAD0 && code <= WXK_NUMPAD9 )
+        text << _("KP_") << code - WXK_NUMPAD0;
+    else if ( code >= WXK_SPECIAL1 && code <= WXK_SPECIAL20 )
+        text << _("SPECIAL") << code - WXK_SPECIAL1 + 1;
+    else // check the named keys
+    {
+        size_t n;
+        for ( n = 0; n < WXSIZEOF(wxKeyNames); n++ )
+        {
+            const wxKeyName& kn = wxKeyNames[n];
+            if ( code == kn.code )
+            {
+                text << wxGetTranslation(kn.name);
+                break;
+            }
+        }
+
+        wxASSERT_MSG( n != WXSIZEOF(wxKeyNames),
+                      wxT("unknown keyboard accelerator code") );
+    }
+
+    return text;
+}
+
+wxAcceleratorEntry *wxGetAccelFromString(const wxString& label)
+{
+    wxAcceleratorEntry *ret = new wxAcceleratorEntry();
+    if (ret->FromString(label))
+        return ret;
+
+    wxDELETE(ret);
+    return NULL;
 }
 
+#endif      // wxUSE_ACCEL
+
+
+// ----------------------------------------------------------------------------
+// wxMenuItem
+// ----------------------------------------------------------------------------
+
+wxMenuItemBase::wxMenuItemBase(wxMenu *parentMenu,
+                               int id,
+                               const wxString& text,
+                               const wxString& help,
+                               wxItemKind kind,
+                               wxMenu *subMenu)
+              : m_text(text),
+                m_help(help)
+{
+    wxASSERT_MSG( parentMenu != NULL, wxT("menuitem should have a menu") );
+
+    m_parentMenu  = parentMenu;
+    m_subMenu     = subMenu;
+    m_isEnabled   = true;
+    m_isChecked   = false;
+    m_id          = id;
+    m_kind        = kind;
+    if (m_id == wxID_ANY)
+        m_id = wxNewId();
+    if (m_id == wxID_SEPARATOR)
+        m_kind = wxITEM_SEPARATOR;
+}
+
+wxMenuItemBase::~wxMenuItemBase()
+{
+    delete m_subMenu;
+}
+
+#if wxUSE_ACCEL
+
 wxAcceleratorEntry *wxMenuItemBase::GetAccel() const
 {
@@ -314,39 +384,5 @@
     {
         text += wxT('\t');
-
-        int flags = accel->GetFlags();
-        if ( flags & wxACCEL_ALT )
-            text += _("Alt-");
-        if ( flags & wxACCEL_CTRL )
-            text += _("Ctrl-");
-        if ( flags & wxACCEL_SHIFT )
-            text += _("Shift-");
-
-        const int code = accel->GetKeyCode();
-
-        if ( wxIsalnum(code) )
-            text << (wxChar)code;
-        else if ( code >= WXK_F1 && code <= WXK_F12 )
-            text << _("F") << code - WXK_F1 + 1;
-        else if ( code >= WXK_NUMPAD0 && code <= WXK_NUMPAD9 )
-            text << _("KP_") << code - WXK_NUMPAD0;
-        else if ( code >= WXK_SPECIAL1 && code <= WXK_SPECIAL20 )
-            text << _("SPECIAL") << code - WXK_SPECIAL1 + 1;
-        else // check the named keys
-        {
-            size_t n;
-            for ( n = 0; n < WXSIZEOF(wxKeyNames); n++ )
-            {
-                const wxKeyName& kn = wxKeyNames[n];
-                if ( code == kn.code )
-                {
-                    text << wxGetTranslation(kn.name);
-                    break;
-                }
-            }
-
-            wxASSERT_MSG( n != WXSIZEOF(wxKeyNames),
-                            wxT("unknown keyboard accelerator code") );
-        }
+        text += accel->ToString();
     }
 
Index: src/common/stockitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/stockitem.cpp,v
retrieving revision 1.16
diff -u2 -r1.16 src/common/stockitem.cpp
--- src/common/stockitem.cpp
+++ src/common/stockitem.cpp
@@ -36,4 +36,5 @@
     switch (id)
     {
+        case wxID_ABOUT:
         case wxID_ADD:
         case wxID_APPLY:
@@ -45,5 +46,7 @@
         case wxID_CUT:
         case wxID_DELETE:
+        case wxID_EDIT:
         case wxID_FIND:
+        case wxID_FILE:
         case wxID_REPLACE:
         case wxID_BACKWARD:
@@ -76,4 +79,5 @@
         case wxID_SAVE:
         case wxID_SAVEAS:
+        case wxID_SELECTALL:
         case wxID_STOP:
         case wxID_UNDELETE:
@@ -93,5 +97,5 @@
 }
 
-wxString wxGetStockLabel(wxWindowID id, bool withCodes, const wxString& accelerator)
+wxString wxGetStockLabel(wxWindowID id, long flags)
 {
     wxString stockLabel;
@@ -104,4 +108,5 @@
     switch (id)
     {
+        STOCKITEM(wxID_ABOUT,               _("&About"))
         STOCKITEM(wxID_ADD,                 _("Add"))
         STOCKITEM(wxID_APPLY,               _("&Apply"))
@@ -113,5 +118,7 @@
         STOCKITEM(wxID_CUT,                 _("Cu&t"))
         STOCKITEM(wxID_DELETE,              _("&Delete"))
+        STOCKITEM(wxID_EDIT,                _("&Edit"))
         STOCKITEM(wxID_FIND,                _("&Find"))
+        STOCKITEM(wxID_FILE,                _("&File"))
         STOCKITEM(wxID_REPLACE,             _("Rep&lace"))
         STOCKITEM(wxID_BACKWARD,            _("&Back"))
@@ -144,4 +151,5 @@
         STOCKITEM(wxID_SAVE,                _("&Save"))
         STOCKITEM(wxID_SAVEAS,              _("Save &As..."))
+        STOCKITEM(wxID_SELECTALL,           _("Select all"))
         STOCKITEM(wxID_STOP,                _("&Stop"))
         STOCKITEM(wxID_UNDELETE,            _("Undelete"))
@@ -162,12 +170,16 @@
     #undef STOCKITEM
 
-    if(!withCodes)
+    if(flags & wxSTOCK_WITH_MNEMONIC)
     {
         stockLabel = wxStripMenuCodes( stockLabel );
     }
-    else if (!stockLabel.empty() && !accelerator.empty())
+
+    if (!stockLabel.empty() && (flags & wxSTOCK_WITH_ACCELERATOR))
     {
         stockLabel += _T("\t");
-        stockLabel += accelerator;
+
+        wxAcceleratorEntry accel = wxGetStockAccelerator(id);
+        if (accel.IsOk())
+            stockLabel += accel.ToString();
     }
 
@@ -175,4 +187,38 @@
 }
 
+wxAcceleratorEntry wxGetStockAccelerator(wxWindowID id)
+{
+    wxAcceleratorEntry ret;
+
+    #define STOCKITEM(stockid, flags, keycode)      \
+        case stockid:                               \
+            ret.Set(flags, keycode, stockid);       \
+            break;
+
+    switch (id)
+    {
+        STOCKITEM(wxID_COPY,                wxACCEL_CTRL,'C')
+        STOCKITEM(wxID_CUT,                 wxACCEL_CTRL,'X')
+        STOCKITEM(wxID_FIND,                wxACCEL_CTRL,'F')
+        STOCKITEM(wxID_REPLACE,             wxACCEL_CTRL,'R')
+        STOCKITEM(wxID_HELP,                wxACCEL_CTRL,'H')
+        STOCKITEM(wxID_NEW,                 wxACCEL_CTRL,'N')
+        STOCKITEM(wxID_OPEN,                wxACCEL_CTRL,'O')
+        STOCKITEM(wxID_PASTE,               wxACCEL_CTRL,'V')
+        STOCKITEM(wxID_SAVE,                wxACCEL_CTRL,'S')
+
+        default:
+            // set the wxAcceleratorEntry to return into an invalid state:
+            // there's no stock accelerator for that.
+            ret.Set(0, 0, id);
+            break;
+    };
+
+    #undef STOCKITEM
+
+    // always use wxAcceleratorEntry::IsOk on returned value !
+    return ret;
+}
+
 bool wxIsStockLabel(wxWindowID id, const wxString& label)
 {
@@ -213,6 +259,20 @@
     #endif
 
+    #if GTK_CHECK_VERSION(2,6,0)
+        #define STOCKITEM_26(wx,gtk) STOCKITEM(wx,gtk)
+    #else
+        #define STOCKITEM_26(wx,gtk) STOCKITEM_MISSING(wx)
+    #endif
+
+    #if GTK_CHECK_VERSION(2,10,0)
+        #define STOCKITEM_210(wx,gtk) STOCKITEM(wx,gtk)
+    #else
+        #define STOCKITEM_210(wx,gtk) STOCKITEM_MISSING(wx)
+    #endif
+
+
     switch (id)
     {
+        STOCKITEM_26(wxID_ABOUT,         GTK_STOCK_ABOUT)
         STOCKITEM(wxID_ADD,              GTK_STOCK_ADD)
         STOCKITEM(wxID_APPLY,            GTK_STOCK_APPLY)
@@ -224,5 +284,7 @@
         STOCKITEM(wxID_CUT,              GTK_STOCK_CUT)
         STOCKITEM(wxID_DELETE,           GTK_STOCK_DELETE)
+        STOCKITEM_26(wxID_EDIT,          GTK_STOCK_EDIT)
         STOCKITEM(wxID_FIND,             GTK_STOCK_FIND)
+        STOCKITEM_26(wxID_FILE,          GTK_STOCK_FILE)
         STOCKITEM(wxID_REPLACE,          GTK_STOCK_FIND_AND_REPLACE)
         STOCKITEM(wxID_BACKWARD,         GTK_STOCK_GO_BACK)
@@ -255,4 +317,5 @@
         STOCKITEM(wxID_SAVE,             GTK_STOCK_SAVE)
         STOCKITEM(wxID_SAVEAS,           GTK_STOCK_SAVE_AS)
+        STOCKITEM_210(wxID_SELECTALL,    GTK_STOCK_SELECT_ALL)
         STOCKITEM(wxID_STOP,             GTK_STOCK_STOP)
         STOCKITEM(wxID_UNDELETE,         GTK_STOCK_UNDELETE)
@@ -276,3 +339,20 @@
 }
 
+bool wxGetStockGtkAccelerator(const char *id, GdkModifierType *mod, guint *key)
+{
+    GtkStockItem stock_item;
+    if (gtk_stock_lookup (id, &stock_item))
+    {
+        if (key) *key = stock_item.keyval;
+        if (mod) *mod = stock_item.modifier;
+
+        // some GTK stock items have zero values for the keyval;
+        // it means that they do not have an accelerator...
+        if (stock_item.keyval)
+            return true;
+    }
+
+    return false;
+}
+
 #endif // __WXGTK20__
Index: src/gtk/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/menu.cpp,v
retrieving revision 1.187
diff -u2 -r1.187 src/gtk/menu.cpp
--- src/gtk/menu.cpp
+++ src/gtk/menu.cpp
@@ -734,4 +734,10 @@
 void wxMenuItem::SetText( const wxString& str )
 {
+    // cache some data which must be used later
+    bool isstock = wxIsStockID(GetId());
+    const char *stockid = NULL;
+    if (isstock)
+        stockid = wxGetStockGtkID(GetId());
+
     // Some optimization to avoid flicker
     wxString oldLabel = m_text;
@@ -745,5 +751,5 @@
 
     if (oldLabel == label1 &&
-             oldhotkey == GetHotKey())    // Make sure we can change a hotkey even if the label is unaltered
+        oldhotkey == GetHotKey())    // Make sure we can change a hotkey even if the label is unaltered
         return;
 
@@ -756,36 +762,76 @@
             label = GTK_LABEL( GTK_BIN(m_menuItem)->child );
 
-        gtk_label_set_text_with_mnemonic( GTK_LABEL(label), wxGTK_CONV_SYS(m_text) );
+        // stock menu items can have empty labels:
+        wxString text = m_text;
+        if (text.IsEmpty() && !IsSeparator())
+        {
+            wxASSERT_MSG(isstock, wxT("A non-stock menu item with an empty label?"));
+            text = wxGetStockLabel(GetId());
+
+            // need & => _ conversion
+            text = GTKProcessMenuItemLabel(text, NULL);
+        }
+
+        gtk_label_set_text_with_mnemonic( GTK_LABEL(label), wxGTK_CONV_SYS(text) );
     }
 
+    // remove old accelerator from our parent's accelerator group, if present
     guint accel_key;
     GdkModifierType accel_mods;
-    gtk_accelerator_parse( (const char*) oldbuf, &accel_key, &accel_mods);
-    if (accel_key != 0)
+    if (oldbuf[(size_t)0] != '\0')
+    {
+        gtk_accelerator_parse( (const char*) oldbuf, &accel_key, &accel_mods);
+        if (accel_key != 0)
+        {
+            gtk_widget_remove_accelerator( GTK_WIDGET(m_menuItem),
+                                        m_parentMenu->m_accel,
+                                        accel_key,
+                                        accel_mods );
+        }
+    }
+    else if (isstock)
     {
-        gtk_widget_remove_accelerator( GTK_WIDGET(m_menuItem),
-                                       m_parentMenu->m_accel,
-                                       accel_key,
-                                       accel_mods );
+        // if the accelerator was taken from a stock ID, just get it back from GTK+ stock
+        if (wxGetStockGtkAccelerator(stockid, &accel_mods, &accel_key))
+            gtk_widget_remove_accelerator( GTK_WIDGET(m_menuItem),
+                                           m_parentMenu->m_accel,
+                                           accel_key,
+                                           accel_mods );
     }
 
+    // add new accelerator to our parent's accelerator group
     wxCharBuffer buf = wxGTK_CONV_SYS( GetGtkHotKey(*this) );
-    gtk_accelerator_parse( (const char*) buf, &accel_key, &accel_mods);
-    if (accel_key != 0)
+    if (buf[(size_t)0] != '\0')
     {
-        gtk_widget_add_accelerator( GTK_WIDGET(m_menuItem),
-                                    "activate",
-                                    m_parentMenu->m_accel,
-                                    accel_key,
-                                    accel_mods,
-                                    GTK_ACCEL_VISIBLE);
+        gtk_accelerator_parse( (const char*) buf, &accel_key, &accel_mods);
+        if (accel_key != 0)
+        {
+            gtk_widget_add_accelerator( GTK_WIDGET(m_menuItem),
+                                        "activate",
+                                        m_parentMenu->m_accel,
+                                        accel_key,
+                                        accel_mods,
+                                        GTK_ACCEL_VISIBLE);
+        }
+    }
+    else if (isstock)
+    {
+        // if the accelerator was taken from a stock ID, just get it back from GTK+ stock
+        if (wxGetStockGtkAccelerator(stockid, &accel_mods, &accel_key))
+            gtk_widget_remove_accelerator( GTK_WIDGET(m_menuItem),
+                                           m_parentMenu->m_accel,
+                                           accel_key,
+                                           accel_mods );
     }
 }
 
-// it's valid for this function to be called even if m_menuItem == NULL
-void wxMenuItem::DoSetText( const wxString& str )
+// NOTE: this function is different from the similar functions GTKProcessMnemonics()
+//       implemented in control.cpp and from wxMenuItemBase::GetLabelFromText...
+//       so there's no real code duplication
+wxString wxMenuItem::GTKProcessMenuItemLabel(const wxString& str, wxString *hotKey)
 {
+    wxString text;
+
     // '\t' is the deliminator indicating a hot key
-    m_text.Empty();
     const wxChar *pc = str;
     while ( (*pc != wxT('\0')) && (*pc != wxT('\t')) )
@@ -795,29 +841,39 @@
             // "&" is doubled to indicate "&" instead of accelerator
             ++pc;
-            m_text << wxT('&');
+            text << wxT('&');
         }
         else if (*pc == wxT('&'))
         {
-            m_text << wxT('_');
+            text << wxT('_');
         }
         else if ( *pc == wxT('_') )    // escape underscores
         {
-            m_text << wxT("__");
+            text << wxT("__");
         }
         else
         {
-            m_text << *pc;
+            text << *pc;
         }
         ++pc;
     }
 
-    m_hotKey = wxT("");
-
-    if(*pc == wxT('\t'))
+    if (hotKey)
     {
-       pc++;
-       m_hotKey = pc;
+        hotKey->Empty();
+        if(*pc == wxT('\t'))
+        {
+            pc++;
+            *hotKey = pc;
+        }
     }
 
+    return text;
+}
+
+// it's valid for this function to be called even if m_menuItem == NULL
+void wxMenuItem::DoSetText( const wxString& str )
+{
+    m_text.Empty();
+    m_text = GTKProcessMenuItemLabel(str, &m_hotKey);
     // wxPrintf( wxT("DoSetText(): str %s m_text %s hotkey %s\n"), str.c_str(), m_text.c_str(), m_hotKey.c_str() );
 }
@@ -936,5 +992,21 @@
     GtkWidget *menuItem;
 
-    wxString text;
+    // cache some data used later
+    wxString text = mitem->GetText();
+    int id = mitem->GetId();
+    bool isstock = wxIsStockID(id);
+    const char *stockid = NULL;
+    if (isstock)
+        stockid = wxGetStockGtkID(mitem->GetId());
+
+    // stock menu items can have an empty label
+    if (text.IsEmpty() && !mitem->IsSeparator())
+    {
+        wxASSERT_MSG(isstock, wxT("A non-stock menu item with an empty label?"));
+        text = wxGetStockLabel(id);
+
+        // need & => _ conversion
+        text = wxMenuItem::GTKProcessMenuItemLabel(text, NULL);
+    }
 
     if ( mitem->IsSeparator() )
@@ -943,8 +1015,6 @@
     }
     else if ( mitem->GetBitmap().Ok() ||
-                (mitem->GetKind() == wxITEM_NORMAL &&
-                    wxIsStockID(mitem->GetId())) )
+                (mitem->GetKind() == wxITEM_NORMAL && isstock) )
     {
-        text = mitem->GetText();
         wxBitmap bitmap(mitem->GetBitmap());
 
@@ -956,7 +1026,6 @@
             // use stock bitmap for this item if available on the assumption
             // that it never hurts to follow GTK+ conventions more closely
-            const char *stock = wxGetStockGtkID(mitem->GetId());
-            image = stock ? gtk_image_new_from_stock(stock, GTK_ICON_SIZE_MENU)
-                          : NULL;
+            image = stockid ? gtk_image_new_from_stock(stockid, GTK_ICON_SIZE_MENU)
+                            : NULL;
         }
         else // we have a custom bitmap
@@ -990,6 +1059,6 @@
     else // a normal item
     {
-        // text has "_" instead of "&" after mitem->SetText() so don't use it
-        text = mitem->GetText() ;
+        // NB: 'text' variable has "_" instead of "&" after mitem->SetText()
+        //     so don't use it
 
         switch ( mitem->GetKind() )
@@ -1039,13 +1108,27 @@
 
     // wxPrintf( wxT("item: %s hotkey %s\n"), mitem->GetText().c_str(), GetGtkHotKey(*mitem).c_str() );
-    gtk_accelerator_parse( (const char*) buf, &accel_key, &accel_mods);
-    if (accel_key != 0)
+    if (buf[(size_t)0] != '\0')
     {
-        gtk_widget_add_accelerator (GTK_WIDGET(menuItem),
-                                    "activate",
-                                    m_accel,
-                                    accel_key,
-                                    accel_mods,
-                                    GTK_ACCEL_VISIBLE);
+        gtk_accelerator_parse( (const char*) buf, &accel_key, &accel_mods);
+        if (accel_key != 0)
+        {
+            gtk_widget_add_accelerator (GTK_WIDGET(menuItem),
+                                        "activate",
+                                        m_accel,
+                                        accel_key,
+                                        accel_mods,
+                                        GTK_ACCEL_VISIBLE);
+        }
+    }
+    else if (isstock)
+    {
+        // if the accelerator was taken from a stock ID, just get it back from GTK+ stock
+        if (wxGetStockGtkAccelerator(stockid, &accel_mods, &accel_key))
+            gtk_widget_add_accelerator( GTK_WIDGET(menuItem),
+                                        "activate",
+                                        m_accel,
+                                        accel_key,
+                                        accel_mods,
+                                        GTK_ACCEL_VISIBLE);
     }
 
Index: src/gtk1/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk1/menu.cpp,v
retrieving revision 1.179
diff -u2 -r1.179 src/gtk1/menu.cpp
--- src/gtk1/menu.cpp
+++ src/gtk1/menu.cpp
@@ -12,4 +12,5 @@
 
 #include "wx/menu.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -766,6 +767,13 @@
 }
 
-void wxMenuItem::SetText( const wxString& str )
+void wxMenuItem::SetText( const wxString& string )
 {
+    wxString str = string;
+    if (str.IsEmpty())
+    {
+        wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+        str = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
     // Some optimization to avoid flicker
     wxString oldLabel = m_text;
Index: src/mac/carbon/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/menuitem.cpp,v
retrieving revision 1.42
diff -u2 -r1.42 src/mac/carbon/menuitem.cpp
--- src/mac/carbon/menuitem.cpp
+++ src/mac/carbon/menuitem.cpp
@@ -13,4 +13,5 @@
 
 #include "wx/menuitem.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -137,6 +138,13 @@
         return ;
 
-    UMASetMenuItemText( mhandle , index , wxStripMenuCodes(m_text) , wxFont::GetDefaultEncoding() ) ;
-    wxAcceleratorEntry *entry = wxGetAccelFromString( m_text ) ;
+    wxString text = m_text;
+    if (text.IsEmpty() && !IsSeparator())
+    {
+        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
+        text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
+    UMASetMenuItemText( mhandle , index , wxStripMenuCodes(text) , wxFont::GetDefaultEncoding() ) ;
+    wxAcceleratorEntry *entry = wxGetAccelFromString( text ) ;
     UMASetMenuItemShortcut( mhandle , index , entry ) ;
     delete entry ;
Index: src/mac/classic/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/classic/menuitem.cpp,v
retrieving revision 1.6
diff -u2 -r1.6 src/mac/classic/menuitem.cpp
--- src/mac/classic/menuitem.cpp
+++ src/mac/classic/menuitem.cpp
@@ -17,4 +17,5 @@
 
 #include "wx/menuitem.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -151,6 +152,13 @@
         return ;
 
-    UMASetMenuItemText( mhandle , index , m_text , wxFont::GetDefaultEncoding() ) ;
-    wxAcceleratorEntry *entry = wxGetAccelFromString( m_text ) ;
+    wxString text = m_text;
+    if (text.IsEmpty() && !IsSeparator())
+    {
+        wxASSERT_MSG(wxIsStockID(GetId()), wxT("A non-stock menu item with an empty label?"));
+        text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
+    UMASetMenuItemText( mhandle , index , text , wxFont::GetDefaultEncoding() ) ;
+    wxAcceleratorEntry *entry = wxGetAccelFromString( text ) ;
     UMASetMenuItemShortcut( mhandle , index , entry ) ;
     delete entry ;
Index: src/motif/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/motif/menuitem.cpp,v
retrieving revision 1.31
diff -u2 -r1.31 src/motif/menuitem.cpp
--- src/motif/menuitem.cpp
+++ src/motif/menuitem.cpp
@@ -22,4 +22,5 @@
 
 #include "wx/menuitem.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -173,7 +174,15 @@
             xmLabelGadgetClass, (Widget) menu, NULL);
     }
-    else if (!m_text.empty() && !m_subMenu)
+    else if (!IsSeparator() && !m_subMenu)
     {
-        wxString strName = wxStripMenuCodes(m_text);
+        wxString txt = m_text;
+
+        if (m_text.IsEmpty())
+        {
+            wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+            txt = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+        }
+
+        wxString strName = wxStripMenuCodes(txt);
         if (IsCheckable())
         {
@@ -231,5 +240,5 @@
             (XtPointer) this);
     }
-    else if (GetId() == wxID_SEPARATOR)
+    else if (IsSeparator())
     {
         m_buttonWidget = (WXWidget) XtVaCreateManagedWidget ("separator",
Index: src/msw/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/menuitem.cpp,v
retrieving revision 1.67
diff -u2 -r1.67 src/msw/menuitem.cpp
--- src/msw/menuitem.cpp
+++ src/msw/menuitem.cpp
@@ -28,4 +28,5 @@
 
 #include "wx/menuitem.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -154,4 +155,10 @@
 void wxMenuItem::Init()
 {
+    if (m_text.IsEmpty())
+    {
+        wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+        m_text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
     m_radioGroup.start = -1;
     m_isRadioGroupStart = false;
@@ -337,10 +344,18 @@
 }
 
-void wxMenuItem::SetText(const wxString& text)
+void wxMenuItem::SetText(const wxString& txt)
 {
+    wxString text = txt;
+
     // don't do anything if label didn't change
-    if ( m_text == text )
+    if ( m_text == txt )
         return;
 
+    if (text.IsEmpty())
+    {
+        wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+        text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
     wxMenuItemBase::SetText(text);
     OWNER_DRAWN_ONLY( wxOwnerDrawn::SetName(text) );
Index: src/msw/wince/menuce.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/wince/menuce.cpp,v
retrieving revision 1.8
diff -u2 -r1.8 src/msw/wince/menuce.cpp
--- src/msw/wince/menuce.cpp
+++ src/msw/wince/menuce.cpp
@@ -79,5 +79,5 @@
     m_id = id;
     if(label.empty() && wxIsStockID(id))
-        m_label = wxGetStockLabel(id, false);
+        m_label = wxGetStockLabel(id, wxSTOCK_NOFLAGS);
     else
         m_label = label;
Index: src/os2/menuitem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/menuitem.cpp,v
retrieving revision 1.36
diff -u2 -r1.36 src/os2/menuitem.cpp
--- src/os2/menuitem.cpp
+++ src/os2/menuitem.cpp
@@ -18,4 +18,5 @@
 
 #include "wx/menuitem.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -373,8 +374,17 @@
         return;
 
+    if (sText.IsEmpty())
+    {
+        wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+        sText = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+    }
+
     wxMenuItemBase::SetText(sText);
     OWNER_DRAWN_ONLY(wxOwnerDrawn::SetName(sText));
 #if  wxUSE_OWNER_DRAWN
-    SetAccelString(rText.AfterFirst(_T('\t')));
+    if (rText.IsEmpty())
+        SetAccelString(sText.AfterFirst(_T('\t')));
+    else
+        SetAccelString(rText.AfterFirst(_T('\t')));
 #endif // wxUSE_OWNER_DRAWN
 
Index: src/palmos/button.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/palmos/button.cpp,v
retrieving revision 1.14
diff -u2 -r1.14 src/palmos/button.cpp
--- src/palmos/button.cpp
+++ src/palmos/button.cpp
@@ -170,5 +170,5 @@
     wxString palmLabel = label;
     if( palmLabel.empty() && wxIsStockID(id) )
-        palmLabel = wxGetStockLabel(id, false);
+        palmLabel = wxGetStockLabel(id, wxSTOCK_NOFLAGS);
 
     if(!wxControl::Create(parent, id, palmPos, palmSize, style, validator, name))
Index: src/univ/menu.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/univ/menu.cpp,v
retrieving revision 1.66
diff -u2 -r1.66 src/univ/menu.cpp
--- src/univ/menu.cpp
+++ src/univ/menu.cpp
@@ -27,4 +27,5 @@
 
 #include "wx/menu.h"
+#include "wx/stockitem.h"
 
 #ifndef WX_PRECOMP
@@ -1538,8 +1539,15 @@
 }
 
-void wxMenuItem::SetText(const wxString& text)
+void wxMenuItem::SetText(const wxString& txt)
 {
-    if ( text != m_text )
+    if ( txt != m_text )
     {
+        wxString text = txt;
+        if (text.IsEmpty())
+        {
+            wxASSERT_MSG(wxIsStockId(GetId()), wxT("A non-stock menu item with an empty label?"));
+            text = wxGetStockLabel(GetId(), wxSTOCK_WITH_ACCELERATOR|wxSTOCK_WITH_MNEMONIC);
+        }
+
         // first call the base class version to change m_text
         wxMenuItemBase::SetText(text);

 	  	 

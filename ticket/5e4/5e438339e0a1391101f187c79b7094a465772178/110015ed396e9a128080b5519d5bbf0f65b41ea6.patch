From ffdb62c34d0fb49b962ba1e0a7096a491533c45e Mon Sep 17 00:00:00 2001
From: Eric Jensen <ericj@j-dev.de>
Date: Sat, 25 Jun 2016 11:29:34 +0200
Subject: [PATCH] sample to demonstrate issue with threadevent handling

---
 samples/minimal/minimal.cpp | 69 ++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 68 insertions(+), 1 deletion(-)

diff --git a/samples/minimal/minimal.cpp b/samples/minimal/minimal.cpp
index f765a70..9e28f91 100644
--- a/samples/minimal/minimal.cpp
+++ b/samples/minimal/minimal.cpp
@@ -53,7 +53,7 @@ public:
     // this one is called on application startup and is a good place for the app
     // initialization (doing it here and not in the ctor allows to have an error
     // return: if OnInit() returns false, the application terminates)
-    virtual bool OnInit() wxOVERRIDE;
+    virtual bool OnInit();
 };
 
 // Define a new frame type: this is going to be our main frame
@@ -66,8 +66,14 @@ public:
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
+    void OnTimerEvent(wxTimerEvent &event);
+    void OnThreadEvent(wxThreadEvent &event);
 
 private:
+    wxTimer m_timer;
+    wxStaticText *m_st_timer;
+    wxStaticText *m_st_thread;
+
     // any class wishing to process wxWidgets events must use this macro
     wxDECLARE_EVENT_TABLE();
 };
@@ -98,6 +104,8 @@ enum
 wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_THREAD(wxID_ANY, MyFrame::OnThreadEvent)
+    EVT_TIMER(wxID_ANY, MyFrame::OnTimerEvent)
 wxEND_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
@@ -110,6 +118,41 @@ wxIMPLEMENT_APP(MyApp);
 // ============================================================================
 // implementation
 // ============================================================================
+#include <wx/thread.h>
+
+// a thread class that will periodically send events to the GUI thread
+class MyThread : public wxThread
+{
+protected:
+   wxEvtHandler* m_parent;
+
+public:
+   MyThread(wxEvtHandler *parent) : wxThread(), m_parent(parent)
+	 {
+	 };
+
+   ExitCode Entry();
+};
+
+
+wxThread::ExitCode MyThread::Entry()
+{
+   for (unsigned n = 0; n < 1000; n++)
+   {
+      // notify the main thread
+      wxThreadEvent *evt = new wxThreadEvent(wxEVT_THREAD);
+      evt->SetInt(n);
+			wxLogDebug("before queueevent");
+      m_parent->QueueEvent(evt);
+			wxLogDebug("after queueevent");
+
+      this->Sleep(200);
+			wxLogDebug("after sleep");
+   }
+
+   return NULL;
+}
+
 
 // ----------------------------------------------------------------------------
 // the application class
@@ -177,10 +220,34 @@ MyFrame::MyFrame(const wxString& title)
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+    wxPanel *panel = new wxPanel(this, wxID_ANY);
+    m_st_timer = new wxStaticText( panel, wxID_ANY, "", wxPoint(10,60), wxSize(80,-1) );
+    m_st_thread = new wxStaticText( panel, wxID_ANY, "", wxPoint(10,100), wxSize(80,-1) );
+
+    MyThread *thread = new MyThread( this );
+    if( thread->Create()==wxTHREAD_NO_ERROR )
+    {
+	    thread->Run();
+    }
+
+    m_timer.SetOwner(this);
+    m_timer.Start(200);
 }
 
 
 // event handlers
+void MyFrame::OnTimerEvent(wxTimerEvent &event)
+{
+	static int counter = 1;
+	m_st_timer->SetLabel( wxString::Format("timer: %d", counter++) );
+}
+
+void MyFrame::OnThreadEvent(wxThreadEvent &event)
+{
+	static int counter = 1;
+	m_st_thread->SetLabel( wxString::Format("thread: %d", counter++) );
+}
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
-- 
2.6.2.windows.1


Index: include/wx/msw/ole/automtn.h
===================================================================
--- include/wx/msw/ole/automtn.h	(revision 72260)
+++ include/wx/msw/ole/automtn.h	(working copy)
@@ -106,8 +106,16 @@
     bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs = 0, wxVariant args[] = NULL) const;
     bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs, const wxVariant **args) const;
 
+    // Returns the locale identifier used in automation calls. The default is LOCALE_SYSTEM_DEFAULT.
+    // Objects obtained by GetObject() inherit the locale identifier from the one that created them.
+    LCID GetLCID() const;
+    
+    //  Sets the locale identifier to be used in automation calls peformed by this object. 
+    void SetLCID(LCID lcid);
+
 public:
     WXIDISPATCH*  m_dispatchPtr;
+    LCID          m_lcid;
 
     wxDECLARE_NO_COPY_CLASS(wxAutomationObject);
 };
Index: interface/wx/msw/ole/automtn.h
===================================================================
--- interface/wx/msw/ole/automtn.h	(revision 72260)
+++ interface/wx/msw/ole/automtn.h	(working copy)
@@ -429,5 +429,17 @@
         You may need to cast from IDispatch* to WXIDISPATCH* when calling this function.
     */
     void SetDispatchPtr(WXIDISPATCH* dispatchPtr);
+
+    /**
+        Returns the locale identifier used in automation calls. The default is LOCALE_SYSTEM_DEFAULT.
+        Objects obtained by GetObject() inherit the locale identifier from the one that created them.
+    */
+    LCID GetLCID() const;
+    
+    /**
+        Sets the locale identifier to be used in automation calls peformed by this object. 
+    */
+    void SetLCID(LCID lcid);
+
 };
 
Index: src/msw/ole/automtn.cpp
===================================================================
--- src/msw/ole/automtn.cpp	(revision 72260)
+++ src/msw/ole/automtn.cpp	(working copy)
@@ -70,6 +70,7 @@
 wxAutomationObject::wxAutomationObject(WXIDISPATCH* dispatchPtr)
 {
     m_dispatchPtr = dispatchPtr;
+    m_lcid = LOCALE_SYSTEM_DEFAULT;
 }
 
 wxAutomationObject::~wxAutomationObject()
@@ -161,7 +162,7 @@
                                 // We rely on the fact that wxBasicString is
                                 // just BSTR with some methods here.
                                 reinterpret_cast<BSTR *>(&argNames[0]),
-                                1 + namedArgCount, LOCALE_SYSTEM_DEFAULT, &dispIds[0]);
+                                1 + namedArgCount, m_lcid, &dispIds[0]);
     if (FAILED(hr))
     {
         ShowException(member, hr);
@@ -194,7 +195,7 @@
     EXCEPINFO excep;
     wxZeroMemory(excep);
 
-    hr = ((IDispatch*)m_dispatchPtr)->Invoke(dispIds[0], IID_NULL, LOCALE_SYSTEM_DEFAULT,
+    hr = ((IDispatch*)m_dispatchPtr)->Invoke(dispIds[0], IID_NULL, m_lcid,
                         (WORD)action, &dispparams, vReturnPtr, &excep, &uiArgErr);
 
     if (FAILED(hr))
@@ -467,6 +468,7 @@
     if (dispatch)
     {
         obj.SetDispatchPtr(dispatch);
+        obj.SetLCID(GetLCID());
         return true;
     }
     else
@@ -480,6 +482,7 @@
     if (dispatch)
     {
         obj.SetDispatchPtr(dispatch);
+        obj.SetLCID(GetLCID());
         return true;
     }
     else
@@ -589,6 +592,16 @@
     return m_dispatchPtr != NULL;
 }
 
+LCID wxAutomationObject::GetLCID() const
+{
+    return m_lcid;
+}
+
+void wxAutomationObject::SetLCID(LCID lcid)
+{
+    m_lcid = lcid;
+}
+
 static void
 ShowException(const wxString& member,
               HRESULT hr,

diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/Makefile.in ./wx2/samples/richedit/Makefile.in
--- ./cvs/wx2/wxwindows/samples/richedit/Makefile.in	Mon Jan 31 18:31:08 2000
+++ ./wx2/samples/richedit/Makefile.in	Sat May 26 12:10:12 2001
@@ -16,5 +16,5 @@
 PROGRAM=wxLayout
 
-OBJECTS=$(PROGRAM).o kbList.o wxllist.o wxlparser.o wxlwindow.o
+OBJECTS=$(PROGRAM).o kbList.o wxllist.o wxlparser.o wxlwindow.o fdrepdgg.o
 
 include ../../src/makeprog.env
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/fdrepdgg.cpp ./wx2/samples/richedit/fdrepdgg.cpp
--- ./cvs/wx2/wxwindows/samples/richedit/fdrepdgg.cpp	Thu Jan  1 01:00:00 1970
+++ ./wx2/samples/richedit/fdrepdgg.cpp	Sat May 26 12:21:08 2001
@@ -0,0 +1,271 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        fdrepgg.cpp
+// Purpose:     Find/Replace dialogs
+// Author:      Markus Greither
+// Modified by:
+// Created:     05/25/01
+// RCS-ID:
+// Copyright:   (c) wxWindows team
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+#ifdef __GNUG__
+    #pragma implementation "fdrepdlg.h"
+#endif
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include <stdio.h>
+    #include "wx/utils.h"
+    #include "wx/dialog.h"
+    #include "wx/button.h"
+    #include "wx/listbox.h"
+    #include "wx/stattext.h"
+    #include "wx/intl.h"
+    #include "wx/sizer.h"
+    #include "wx/radiobox.h"
+    #include "wx/textctrl.h"
+    #include "wx/checkbox.h"
+#endif
+
+#include "wx/fdrepdlg.h"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+#define wxID_SEARCHFOR         3000
+#define wxID_REPLACEWITH       3001
+#define wxID_REPLACE           3002
+#define wxID_REPLACE_ALL       3003
+#define wxID_WHOLEWORD         3004
+#define wxID_MATCHCASE         3005
+#define wxID_UPDOWN            3006
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// wxGenericFindReplaceDialog
+// ----------------------------------------------------------------------------
+
+void wxGenericFindReplaceDialog::Create(wxWindow *parent,
+                                 wxFindReplaceData *data,const wxString &title)
+{
+    m_FindReplaceData = data;
+    if ( !wxDialog::Create(parent, -1, title, wxDefaultPosition, wxDefaultSize,
+                           wxDEFAULT_DIALOG_STYLE) )
+        return;
+
+    wxBoxSizer *topsizer = new wxBoxSizer( wxHORIZONTAL );
+
+    wxBoxSizer *leftsizer = new wxBoxSizer( wxVERTICAL );
+
+    topsizer->Add(leftsizer);
+
+    wxBoxSizer *txtsizer = new wxBoxSizer( wxHORIZONTAL );
+
+    leftsizer->Add(txtsizer);
+
+    txtsizer->Add(new wxStaticText(this,-1,_("Search for:"),
+                                    wxDefaultPosition,wxSize(80,-1)),
+                                    0, wxLEFT | wxTOP | wxBOTTOM, 10);
+
+    txtsizer->Add(new wxTextCtrl(this, wxID_SEARCHFOR ,_T(""),
+                                 wxDefaultPosition,wxSize(150,-1)),
+                                 0, wxALL, 10);
+
+    if (m_FindReplaceData->Flags & wxFR_REPLACEDIALOG)
+    {
+        txtsizer = new wxBoxSizer( wxHORIZONTAL );
+
+        leftsizer->Add(txtsizer);
+
+        txtsizer->Add(new wxStaticText(this,-1,_("Replace with:"),
+                                    wxDefaultPosition,wxSize(80,-1)),
+                                    0, wxLEFT | wxTOP, 10);
+
+        txtsizer->Add(new wxTextCtrl(this, wxID_REPLACEWITH ,_T(""),
+                                     wxDefaultPosition,wxSize(150,-1)),
+                                     0, wxALL, 10);
+    }
+
+    wxBoxSizer *optsizer = new wxBoxSizer( wxHORIZONTAL );
+
+    wxBoxSizer *chksizer = new wxBoxSizer( wxVERTICAL);
+
+    chksizer->Add(new wxCheckBox(this,wxID_WHOLEWORD,_("Whole word")),0,wxALL,3);
+
+    chksizer->Add(new wxCheckBox(this,wxID_MATCHCASE,_("Match case")),0,wxALL,3);
+
+    optsizer->Add(chksizer,0,wxALL,10);
+
+    if (!(m_FindReplaceData->Flags & wxFR_REPLACEDIALOG))
+    {
+        wxString choices[2] = {_("Up"),_("Down")};
+        m_up = new wxRadioBox(this,wxID_UPDOWN,_("Search direction"),
+                              wxDefaultPosition,wxDefaultSize,2,choices);
+
+        optsizer->Add(m_up,0,wxALL,10);
+    }
+    else
+      m_up = 0;
+
+    leftsizer->Add(optsizer);
+
+    wxBoxSizer *bttnsizer = new wxBoxSizer(wxVERTICAL);
+
+    bttnsizer->Add(new wxButton(this,wxID_FIND,_("&Find")),0,wxALL,3);
+
+    bttnsizer->Add(new wxButton(this,wxID_CANCEL,_("&Cancel")),0,wxALL,3);
+
+    if (m_FindReplaceData->Flags & wxFR_REPLACEDIALOG)
+    {
+        bttnsizer->Add(new wxButton(this,wxID_REPLACE,_("&Replace")),0,wxALL,3);
+
+        bttnsizer->Add(new wxButton(this,wxID_REPLACE_ALL,_("Replace &all")),0,wxALL,3);
+    }
+
+    topsizer->Add(bttnsizer,0,wxALL,10);
+
+    if (m_FindReplaceData->Flags & wxFR_NOMATCHCASE)
+        FindWindow(wxID_MATCHCASE)->Enable(false);
+
+    if (m_FindReplaceData->Flags & wxFR_NOWHOLEWORD)
+        FindWindow(wxID_WHOLEWORD)->Enable(false);
+
+    if (m_up)
+    {
+        if (m_FindReplaceData->Flags & wxFR_NOUPDOWN)
+            m_up->Enable(false);
+
+        if (m_FindReplaceData->Flags & wxFR_DOWN)
+            m_up->SetSelection(1);
+        else
+            m_up->SetSelection(0);
+    }
+
+    SetAutoLayout( TRUE );
+    SetSizer( topsizer );
+
+    topsizer->SetSizeHints( this );
+    topsizer->Fit( this );
+
+    Centre( wxBOTH );
+
+   FindWindow(wxID_SEARCHFOR)->SetFocus();
+}
+
+BEGIN_EVENT_TABLE(wxGenericFindReplaceDialog, wxDialog)
+    EVT_BUTTON(wxID_FIND, wxGenericFindReplaceDialog::OnFind)
+    EVT_BUTTON(wxID_REPLACE, wxGenericFindReplaceDialog::OnReplace)
+    EVT_BUTTON(wxID_REPLACE_ALL, wxGenericFindReplaceDialog::OnReplaceAll)
+    EVT_BUTTON(wxID_CANCEL, wxGenericFindReplaceDialog::OnCancel)
+    EVT_CLOSE(wxGenericFindReplaceDialog::OnCloseWindow)
+END_EVENT_TABLE()
+
+wxGenericFindReplaceDialog::wxGenericFindReplaceDialog(wxWindow *parent,wxFindReplaceData *data,
+                                         const wxString &title)
+{
+    Create(parent,data,title);
+}
+
+void wxGenericFindReplaceDialog::GetStatusFlags()
+{
+  m_FindReplaceData->Flags = 0;
+  if (((wxCheckBox *)FindWindow(wxID_MATCHCASE))->GetValue())
+      m_FindReplaceData->Flags |= wxFR_MATCHCASE;
+
+  if (((wxCheckBox *)FindWindow(wxID_WHOLEWORD))->GetValue())
+      m_FindReplaceData->Flags |= wxFR_WHOLEWORD;
+
+  if (m_up)
+  {
+      if (m_up->GetSelection() == 1)
+          m_FindReplaceData->Flags |= wxFR_DOWN;
+      m_FindReplaceData->ReplaceWith[0] = 0;
+  }
+  else
+  {
+      wxStrcpy(m_FindReplaceData->ReplaceWith,
+               ((wxTextCtrl *)FindWindow(wxID_REPLACEWITH))->GetValue());
+      m_FindReplaceData->Flags |= wxFR_DOWN;
+  }
+
+  wxStrcpy(m_FindReplaceData->FindWhat,
+           ((wxTextCtrl *)FindWindow(wxID_SEARCHFOR))->GetValue());
+}
+
+void wxGenericFindReplaceDialog::OnFind()
+{
+    GetStatusFlags();
+    m_FindReplaceData->Flags |= wxFR_FINDNEXT;
+    wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+    m_parent->AddPendingEvent(event);
+}
+
+void wxGenericFindReplaceDialog::OnReplace()
+{
+    GetStatusFlags();
+    m_FindReplaceData->Flags |= wxFR_REPLACE;
+    wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+    m_parent->AddPendingEvent(event);
+}
+
+void wxGenericFindReplaceDialog::OnReplaceAll()
+{
+    GetStatusFlags();
+    m_FindReplaceData->Flags |= wxFR_REPLACEALL;
+    wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+    m_parent->AddPendingEvent(event);
+}
+
+void wxGenericFindReplaceDialog::OnCancel()
+{
+    GetStatusFlags();
+    m_FindReplaceData->Flags |= wxFR_DIALOGTERM;
+    wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+    m_parent->AddPendingEvent(event);
+    Show(false);
+}
+
+void wxGenericFindReplaceDialog::OnCloseWindow(wxCloseEvent &)
+{
+    OnCancel();
+}
+
+void wxGenericFindReplaceDialog::UpdateData(wxUint32 flags)
+{
+    m_FindReplaceData->Flags = flags;
+}
+
+// ----------------------------------------------------------------------------
+// title
+// ----------------------------------------------------------------------------
+
+void wxGenericFindReplaceDialog::SetTitle(const wxString& title)
+{
+    m_title = title;
+}
+
+wxString wxGenericFindReplaceDialog::GetTitle()
+{
+    return m_title;
+}
+
+
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/fdrepdlg.cpp ./wx2/samples/richedit/fdrepdlg.cpp
--- ./cvs/wx2/wxwindows/samples/richedit/fdrepdlg.cpp	Thu Jan  1 01:00:00 1970
+++ ./wx2/samples/richedit/fdrepdlg.cpp	Sat May 26 12:22:36 2001
@@ -0,0 +1,258 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/msw/FdRepdlg.cpp
+// Purpose:     wxFindReplaceDialog class
+// Author:      Markus Greither
+// Modified by:
+// Created:     23/03/2001
+// RCS-ID:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#ifdef __GNUG__
+    #pragma implementation "fdrepdlg.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include <stdio.h>
+    #include "wx/defs.h"
+    #include "wx/bitmap.h"
+    #include "wx/pen.h"
+    #include "wx/brush.h"
+    #include "wx/colour.h"
+    #include "wx/gdicmn.h"
+    #include "wx/utils.h"
+    #include "wx/frame.h"
+    #include "wx/dialog.h"
+    #include "wx/msgdlg.h"
+#endif
+
+#include <windows.h>
+
+#if !defined(__WIN32__) || defined(__SALFORDC__) || defined(__WXWINE__)
+    #include <commdlg.h>
+#endif
+
+#include "wx/msw/private.h"
+#include "wx/fdrepdlg.h"
+
+#include <math.h>
+#include <stdlib.h>
+#include <string.h>
+
+static unsigned int message = 0; // registered Message for Dialog
+
+WNDPROC ParentWndProc = 0;
+
+FINDREPLACE FindReplace;
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// Window Proc for handling RegisterWindowMessage(FINDMSGSTRING)
+// ----------------------------------------------------------------------------
+
+LRESULT APIENTRY FindReplaceWindowProc(HWND hwnd,WXUINT nMsg,
+                                       WPARAM wParam, LPARAM lParam)
+{
+    if (nMsg == message)
+    {
+        FINDREPLACE *pCC = (FINDREPLACE *)lParam;
+        wxFindReplaceDialog *dialog = (wxFindReplaceDialog *)pCC->lCustData;
+
+        wxUint32 flags = 0; // map flags from Windows
+        if (pCC->Flags & FR_DIALOGTERM)
+            flags |= wxFR_DIALOGTERM;
+        if (pCC->Flags & FR_DOWN)
+            flags |= wxFR_DOWN;
+        if (pCC->Flags & FR_FINDNEXT)
+            flags |= wxFR_FINDNEXT;
+        if (pCC->Flags & FR_REPLACE)
+            flags |= wxFR_REPLACE;
+        if (pCC->Flags & FR_REPLACEALL)
+            flags |= wxFR_REPLACEALL;
+        if (pCC->Flags & FR_WHOLEWORD)
+            flags |= wxFR_WHOLEWORD;
+        if (pCC->Flags & FR_MATCHCASE)
+            flags |= wxFR_MATCHCASE;
+
+        dialog->UpdateData(flags);
+
+        wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED,wxID_FIND);
+        dialog->GetParent()->AddPendingEvent(event);
+    }
+    return ::CallWindowProc(ParentWndProc, hwnd, nMsg, wParam, lParam);
+};
+
+// ----------------------------------------------------------------------------
+// FindReplace dialog hook proc
+// ----------------------------------------------------------------------------
+
+UINT CALLBACK wxFindReplaceDialogHookProc(HWND hwnd,
+                                          UINT uiMsg,
+                                          WPARAM /*wParam*/,
+                                          LPARAM lParam)
+{
+    if ( uiMsg == WM_INITDIALOG )
+    {
+        FINDREPLACE *pCC = (FINDREPLACE *)lParam;
+        wxFindReplaceDialog *dialog = (wxFindReplaceDialog *)pCC->lCustData;
+
+        ::SetWindowText(hwnd, dialog->GetTitle());
+    }
+
+    return 0;
+}
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceDialog
+// ----------------------------------------------------------------------------
+
+wxFindReplaceDialog::~wxFindReplaceDialog()
+{
+    if (m_hWnd)
+    {
+        ::SetWindowLong(GetHwndOf(m_parent), GWL_WNDPROC, (LONG)ParentWndProc);
+        ::DestroyWindow((HWND)m_hWnd);
+        ParentWndProc = 0;
+    }
+};
+
+wxFindReplaceDialog::wxFindReplaceDialog()
+{
+    message = RegisterWindowMessage(FINDMSGSTRING);
+};
+
+
+wxFindReplaceDialog::wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *data,const wxString &title)
+ : m_FindReplaceData(data)
+{
+    message = RegisterWindowMessage(FINDMSGSTRING);
+    Create(parent,data,title);
+};
+
+void wxFindReplaceDialog::Create(wxWindow *parent, wxFindReplaceData *data,const wxString &title)
+{
+    SetTitle(title);
+    m_FindReplaceData = data;
+    m_hWnd = 0;
+    m_parent = parent;
+}
+
+void wxFindReplaceDialog::UpdateData(wxUint32 flags)
+{
+    m_FindReplaceData->Flags = flags;
+}
+
+bool wxFindReplaceDialog::Show(bool show)
+{
+    if (m_hWnd)
+    {
+        if (!show)
+            return ::ShowWindow((HWND)m_hWnd,SW_HIDE);
+        else
+            return ::ShowWindow((HWND)m_hWnd,SW_SHOW);
+    }
+
+    if (ParentWndProc)
+        return false; // only one Find/Replace dialog at a time !
+
+    int flags = FR_ENABLEHOOK;
+    if (m_FindReplaceData->Flags & wxFR_NOMATCHCASE)
+        flags |= FR_NOMATCHCASE;
+    if (m_FindReplaceData->Flags & wxFR_NOWHOLEWORD)
+        flags |= FR_NOWHOLEWORD;
+    if (m_FindReplaceData->Flags & wxFR_NOUPDOWN)
+        flags |= FR_NOUPDOWN;
+    if (m_FindReplaceData->Flags & wxFR_DOWN)
+        flags |= FR_DOWN;
+    FindReplace.lStructSize = sizeof(FINDREPLACE);
+    FindReplace.hwndOwner = GetHwndOf(m_parent);
+    FindReplace.hInstance = 0;
+    FindReplace.Flags = flags;
+    FindReplace.lpstrFindWhat = m_FindReplaceData->FindWhat;
+    FindReplace.wFindWhatLen = m_FindReplaceData->BuffSize;
+    FindReplace.lpstrReplaceWith = m_FindReplaceData->ReplaceWith;
+    FindReplace.wReplaceWithLen = m_FindReplaceData->BuffSize;
+    FindReplace.lCustData = (LPARAM)this;
+    FindReplace.lpfnHook = wxFindReplaceDialogHookProc;
+    FindReplace.lpTemplateName = 0;
+
+    // Show the Dialog
+    if (m_FindReplaceData->Flags & wxFR_REPLACEDIALOG)
+        m_hWnd = (WXHANDLE)::ReplaceText(&FindReplace);
+    else
+        m_hWnd = (WXHANDLE)::FindText(&FindReplace);
+    if (m_hWnd)
+    {
+        // Subclass parent window in order to get FINDMSGSTRING message
+        ParentWndProc = (WNDPROC)SetWindowLong(GetHwndOf(m_parent),GWL_WNDPROC,
+                                              (LONG)FindReplaceWindowProc);
+
+        ::ShowWindow((HWND)m_hWnd,SW_SHOW);
+    }
+    return m_hWnd != 0;
+}
+
+// ----------------------------------------------------------------------------
+// title
+// ----------------------------------------------------------------------------
+
+void wxFindReplaceDialog::SetTitle(const wxString& title)
+{
+    m_title = title;
+}
+
+wxString wxFindReplaceDialog::GetTitle()
+{
+    return m_title;
+}
+
+// ----------------------------------------------------------------------------
+// position/size
+// ----------------------------------------------------------------------------
+
+void wxFindReplaceDialog::DoSetSize(int WXUNUSED(x), int WXUNUSED(y),
+                                    int WXUNUSED(width), int WXUNUSED(height),
+                                    int WXUNUSED(sizeFlags))
+{
+    // ignore - we can't change the size of this standard dialog
+    return;
+}
+
+// NB: of course, both of these functions are completely bogus, but it's better
+//     than nothing
+void wxFindReplaceDialog::DoGetSize(int *width, int *height) const
+{
+    // the standard dialog size
+    if ( width )
+        *width = 225;
+    if ( height )
+        *height = 324;
+}
+
+void wxFindReplaceDialog::DoGetClientSize(int *width, int *height) const
+{
+    // the standard dialog size
+    if ( width )
+        *width = 219;
+    if ( height )
+        *height = 299;
+}
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/makefile.b32 ./wx2/samples/richedit/makefile.b32
--- ./cvs/wx2/wxwindows/samples/richedit/makefile.b32	Tue Mar 14 11:51:30 2000
+++ ./wx2/samples/richedit/makefile.b32	Sat May 26 11:39:00 2001
@@ -13,4 +13,11 @@
 OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj
 
+!if "$(GENFDREP)" == "1"
+OBJECTS = $(OBJECTS) fdrepdgg.obj
+EXTRACPPFLAGS = $(EXTRACPPFLAGS) -DwxUSE_GENERIC_FIND_REPLACE_DIALOG=1
+!else
+OBJECTS = $(OBJECTS) fdrepdlg.obj
+!endif
+
 !include $(WXDIR)\src\makeprog.b32
 
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/makefile.g95 ./wx2/samples/richedit/makefile.g95
--- ./cvs/wx2/wxwindows/samples/richedit/makefile.g95	Sun Jan 16 02:35:28 2000
+++ ./wx2/samples/richedit/makefile.g95	Sat May 26 11:58:02 2001
@@ -11,5 +11,13 @@
 
 TARGET=wxLayout
-OBJECTS = $(TARGET).o kbList.o wxllist.o wxlparser.o wxlwindow.o
+OBJECTS_COMMON = $(TARGET).o kbList.o wxllist.o wxlparser.o wxlwindow.o
+
+ifeq ($(GENFDREP),1)
+OBJECTS=$(OBJECTS_COMMON) fdrepdgg.o
+EXTRACPPFLAGS = -DwxUSE_GENERIC_FIND_REPLACE_DIALOG=1 -I.
+else
+OBJECTS=$(OBJECTS_COMMON) fdrepdlg.o
+EXTRACPPFLAGS = -I.
+endif
 
 include $(WXDIR)/src/makeprog.g95
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/makefile.vc ./wx2/samples/richedit/makefile.vc
--- ./cvs/wx2/wxwindows/samples/richedit/makefile.vc	Thu Jun 10 19:50:10 1999
+++ ./wx2/samples/richedit/makefile.vc	Sat May 26 12:17:34 2001
@@ -3,5 +3,5 @@
 # Author:	Julian Smart
 # Created:	1999
-# Updated:
+# Updated:            03/05/2001 Markus Greither
 # Copyright:	(c) Julian Smart
 #
@@ -14,4 +14,10 @@
 PROGRAM=wxLayout
 OBJECTS = wxLayout.obj kbList.obj wxllist.obj wxlparser.obj wxlwindow.obj
+
+!if "$(GENFDREP)" == "1"
+OBJECTS = $(OBJECTS) fdrepdgg.obj
+EXTRACPPFLAGS = $(EXTRACPPFLAGS) -DwxUSE_GENERIC_FIND_REPLACE_DIALOG=1
+!else
+OBJECTS = $(OBJECTS) fdrepdlg.obj
 
 !include $(WXDIR)\src\makeprog.vc
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wx/fdrepdlg.h ./wx2/samples/richedit/wx/fdrepdlg.h
--- ./cvs/wx2/wxwindows/samples/richedit/wx/fdrepdlg.h	Thu Jan  1 01:00:00 1970
+++ ./wx2/samples/richedit/wx/fdrepdlg.h	Sat May 26 10:39:10 2001
@@ -0,0 +1,71 @@
+#ifndef _WX_FINDREPLACEDLG_H_
+#define _WX_FINDREPLACEDLG_H_
+
+// ----------------------------------------------------------------------------
+// Flags for wxFindReplaceData.Flags
+// ----------------------------------------------------------------------------
+
+enum wxFindReplaceActions
+{
+    wxFR_DIALOGTERM = 1,  // Flag indicates that Dialog terminated
+    wxFR_DOWN       = 2,  // Flag indicates downward search/replace selected
+    wxFR_FINDNEXT   = 4,  // Flag indicates Find Next button was pressed
+    wxFR_REPLACE    = 8,  // Flag indicates Replace button was pressed
+    wxFR_REPLACEALL = 16, // Flag indicates Replace All button was pressed
+    wxFR_WHOLEWORD  = 32, // Flag indicates Whole Word search/replace selected
+    wxFR_MATCHCASE  = 64  // Flag indicates Matching Case search/replace selected
+};
+
+enum wxFindReplaceDialogStyles
+{
+    wxFR_REPLACEDIALOG = 8,   // Flag for replace dialog instead of find dialog
+    wxFR_NOUPDOWN      = 128, // Flag for deactivation of Up/Down Control
+    wxFR_NOMATCHCASE   = 256, // Flag for deactivation of Match Case Control
+    wxFR_NOWHOLEWORD   = 512  // Flag for deactivation of Whole Word Control
+};
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceData: holds Setup Data/Feedback Data for wxFindReplaceDialog
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxFindReplaceData: public wxObject
+{
+ public:
+    void Init(wxUint32 flags,int buffSize)
+    {
+        delete [] FindWhat;
+        delete [] ReplaceWith;
+        Flags = flags;
+        BuffSize = buffSize;
+        FindWhat = BuffSize ? new wxChar[BuffSize] : 0;
+        if (FindWhat)
+            FindWhat[0] = 0;
+        ReplaceWith = BuffSize ? new wxChar[BuffSize] : 0;
+        if (ReplaceWith)
+            ReplaceWith[0] = 0;
+    }
+
+    wxFindReplaceData(wxUint32 flags,int buffSize)
+    {
+        FindWhat = ReplaceWith = 0;
+        Init(flags,buffSize);
+    }
+
+    wxFindReplaceData() {FindWhat = ReplaceWith = 0;};
+    ~wxFindReplaceData() {delete [] FindWhat; delete [] ReplaceWith;};
+
+ public:
+    wxUint32 Flags;
+    wxChar *FindWhat;
+    wxChar *ReplaceWith;
+    int BuffSize;
+};
+
+#if !defined(__WXMSW__) || wxUSE_GENERIC_FIND_REPLACE_DIALOG
+#include "wx/generic/fdrepdgg.h"
+#else
+#include "wx/msw/fdrepdlg.h"
+#endif
+
+#endif
+    // _WX_FDREPDLG_H_
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wx/generic/fdrepdgg.h ./wx2/samples/richedit/wx/generic/fdrepdgg.h
--- ./cvs/wx2/wxwindows/samples/richedit/wx/generic/fdrepdgg.h	Thu Jan  1 01:00:00 1970
+++ ./wx2/samples/richedit/wx/generic/fdrepdgg.h	Sat May 26 12:23:14 2001
@@ -0,0 +1,57 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/fdrepdlg.h
+// Purpose:     wxGenericFindReplaceDialog class
+// Author:      Markus Greither
+// Modified by:
+// Created:     25/05/2001
+// RCS-ID:
+// Copyright:   (c) wxWindows team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifdef __GNUG__
+//#pragma interface "fdrepdlg.h"
+#endif
+
+#include "wx/dialog.h"
+
+// ----------------------------------------------------------------------------
+// wxGenericFindReplaceDialog: dialog for searching / replacing text
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxGenericFindReplaceDialog : public wxDialog
+{
+public:
+    wxGenericFindReplaceDialog() {};
+
+    wxGenericFindReplaceDialog(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    void Create(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    void SetData(wxFindReplaceData *data) {m_FindReplaceData = data;};
+
+    void UpdateData(wxUint32 lParam);
+
+    // override some base class virtuals
+    virtual void SetTitle(const wxString& title);
+    virtual wxString GetTitle();
+
+    DECLARE_EVENT_TABLE()
+
+    void OnFind();
+    void OnReplace();
+    void OnReplaceAll();
+    void OnCancel();
+    void OnCloseWindow(wxCloseEvent &event);
+
+protected:
+    void GetStatusFlags();
+
+    wxFindReplaceData      *m_FindReplaceData;
+    wxString                m_title;
+    wxRadioBox             *m_up;
+};
+
+typedef wxGenericFindReplaceDialog wxFindReplaceDialog;
+
+
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wx/msw/Fdrepdlg.h ./wx2/samples/richedit/wx/msw/Fdrepdlg.h
--- ./cvs/wx2/wxwindows/samples/richedit/wx/msw/Fdrepdlg.h	Thu Jan  1 01:00:00 1970
+++ ./wx2/samples/richedit/wx/msw/Fdrepdlg.h	Sat May 26 12:23:24 2001
@@ -0,0 +1,55 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/fdrepdlg.h
+// Purpose:     wxFindReplaceDialog class
+// Author:      Markus Greither
+// Modified by:
+// Created:     23/03/2001
+// RCS-ID:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifdef __GNUG__
+//#pragma interface "fdrepdlg.h"
+#endif
+
+#include "wx/setup.h"
+#include "wx/dialog.h"
+
+// ----------------------------------------------------------------------------
+// wxFindReplaceDialog: dialog for searching / replacing text
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxFindReplaceDialog : public wxDialog
+{
+public:
+    wxFindReplaceDialog();
+
+    wxFindReplaceDialog(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    void Create(wxWindow *parent, wxFindReplaceData *data,const wxString &title);
+
+    void SetData(wxFindReplaceData *data) {m_FindReplaceData = data;};
+
+    void UpdateData(wxUint32 lParam);
+
+    virtual ~wxFindReplaceDialog();
+
+    bool Show(bool show);
+
+    // override some base class virtuals
+    virtual void SetTitle(const wxString& title);
+    virtual wxString GetTitle();
+
+protected:
+    virtual void DoGetSize(int *width, int *height) const;
+    virtual void DoGetClientSize(int *width, int *height) const;
+    virtual void DoSetSize(int x, int y,
+                           int width, int height,
+                           int sizeFlags = wxSIZE_AUTO);
+
+    wxFindReplaceData      *m_FindReplaceData;
+    wxString                m_title;
+};
+
+
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxLayout.cpp ./wx2/samples/richedit/wxLayout.cpp
--- ./cvs/wx2/wxwindows/samples/richedit/wxLayout.cpp	Sat Jan 15 21:45:30 2000
+++ ./wx2/samples/richedit/wxLayout.cpp	Sat May 26 12:26:52 2001
@@ -17,4 +17,14 @@
 #endif
 
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#endif
+
+#if !defined(M_BASEDIR)
+
+#include "wx/fdrepdlg.h"
+
+#endif
+
 #include "wxLayout.h"
 #include <wx/textfile.h>
@@ -67,6 +77,8 @@
 
 MyFrame::MyFrame(void) :
-   wxFrame( (wxFrame *) NULL, -1, "wxLayout",
-             wxPoint(880,100), wxSize(256,256) )
+   wxFrame( (wxFrame *) NULL, -1, "wxLayout")
+#if !defined(M_BASEDIR)
+  ,SearchData(wxFR_DOWN,82) // initialize search data structure
+#endif
 {
    CreateStatusBar( 2 );
@@ -152,4 +164,10 @@
    m_lwin->SetBackgroundBitmap(bitmap);
 #endif // 0
+
+#if !defined(M_BASEDIR)
+
+  SearchDialog = 0;
+
+#endif
 };
 
@@ -249,4 +267,40 @@
 }
 
+#if !defined(M_BASEDIR)
+
+// Open/use wxFindReplaceDialog for text search
+void MyFrame::EditFindReplace(bool Replace)
+{
+  if (SearchDialog)
+  { // Dialog already created
+    if (SearchData.Flags & wxFR_DIALOGTERM)
+    { // MSW Dialog terminated (e. g. closed), so delete wxDialog
+      delete SearchDialog;
+      SearchDialog = 0;
+    }
+    else // Do the search of current search string
+    {
+      if (!m_lwin->FindExt(SearchData.FindWhat,
+                           SearchData.Flags & wxFR_DOWN,
+                           !(SearchData.Flags & wxFR_MATCHCASE)))
+      {
+        wxMessageBox(_("String not found !"),"String Search");
+      }
+    }
+  }
+  else
+  { // Dialog not open, so open
+    if (Replace) SearchData.Flags |= wxFR_REPLACEDIALOG;
+    else SearchData.Flags &= ~wxFR_REPLACEDIALOG;
+    SearchData.Flags |= wxFR_NOWHOLEWORD; // disable whole word search
+    SearchData.Flags &= ~wxFR_DIALOGTERM; // delete flag, in case of previously open dialog
+    SearchDialog = new wxFindReplaceDialog(this, &SearchData,
+                                           Replace ? _("Replace Text") : _("Search Text"));
+    SearchDialog->Show(true);
+  }
+}
+
+#endif
+
 void
 MyFrame::Clear(void)
@@ -316,4 +370,10 @@
    case ID_FIND:
       m_lwin->Find("void");
+      m_lwin->Refresh(FALSE);
+      break;
+#else
+  case ID_FIND:
+  case wxID_FIND:
+      EditFindReplace(false);
       m_lwin->Refresh(FALSE);
       break;
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxLayout.h ./wx2/samples/richedit/wxLayout.h
--- ./cvs/wx2/wxwindows/samples/richedit/wxLayout.h	Thu Jun 17 18:29:18 1999
+++ ./wx2/samples/richedit/wxLayout.h	Sat May 26 11:33:42 2001
@@ -29,4 +29,14 @@
   DECLARE_DYNAMIC_CLASS(MyFrame)
 
+#if !defined(M_BASEDIR)
+
+   void EditFindReplace(bool Replace);
+
+   wxFindReplaceData SearchData; // Data structure for find/replace dialog
+   wxFindReplaceDialog* SearchDialog;  // Find or replace dialog
+
+   ~MyFrame() {delete SearchDialog;};
+#endif
+
   public:
   
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxllist.cpp ./wx2/samples/richedit/wxllist.cpp
--- ./cvs/wx2/wxwindows/samples/richedit/wxllist.cpp	Sat Jul 15 21:50:22 2000
+++ ./wx2/samples/richedit/wxllist.cpp	Sat May 26 11:25:28 2001
@@ -55,4 +55,5 @@
 #endif
 
+
 #ifdef WXLAYOUT_USE_CARET
 #   include <wx/caret.h>
@@ -807,8 +808,102 @@
     @param needle the text to find
     @param xpos the position where to start the search
+    @param down and ignorecase are search options
+    @return the cursoor coord where it was found or -1
+*/
+CoordType
+wxLayoutLine::FindStringOpt(const wxString &needle, CoordType xpos,bool down,bool ignorecase) const
+{
+   int cpos = 0,relpos = -1;
+   wxString const *text;
+   wxString searchtext = needle;
+
+   if (ignorecase) searchtext.MakeLower();
+   if (down)
+   {
+     for(wxLOiterator i = m_ObjectList.begin(); i != m_ObjectList.end(); i++)
+     {
+        if(cpos >= xpos) // search from here!
+        {
+           if((**i).GetType() == WXLO_TYPE_TEXT)
+           {
+              text = & ((wxLayoutObjectText*)(*i))->GetText();
+              wxString str = *text;
+              if (ignorecase)
+              {
+                 str.MakeLower();
+                 relpos = str.Find(searchtext);
+              }
+              else
+                 relpos = str.Find(searchtext);
+              if(relpos >= cpos-xpos) // -1 if not found
+              {
+                 return cpos+relpos;
+              }
+           }
+           cpos += (**i).GetLength();
+        }
+     }
+   }
+   else
+   { // upward search
+     wxLOiterator f = m_ObjectList.begin();
+     while (f != m_ObjectList.end())
+     { // calculate character count
+        if((**f).GetType() == WXLO_TYPE_TEXT)
+          cpos += (**f).GetLength();
+        f++;
+     }
+     wxLOiterator i = m_ObjectList.begin();
+     wxLOiterator tmp = i;
+     do
+     {
+       tmp++;
+       if (tmp != m_ObjectList.end()) i = tmp;
+     }
+     while (tmp != m_ObjectList.end());
+     bool finished = false;
+     if (i != m_ObjectList.end())
+     do
+     { // calculate character count
+        if(cpos <= xpos) // search from here!
+        {
+           cpos -= (**i).GetLength();
+           if((**i).GetType() == WXLO_TYPE_TEXT)
+           {
+              text = & ((wxLayoutObjectText*)(*i))->GetText();
+              wxString str = *text;
+              if (ignorecase)
+              {
+                 str.MakeLower();
+                 relpos = str.Find(searchtext);
+              }
+              else
+                relpos = str.Find(searchtext.c_str()[0],true);
+              if (relpos != -1)
+              {
+                wxString tmp = &str.c_str()[relpos];
+                int pos = tmp.Find(searchtext);
+                if (pos) relpos = -1; // only accept searchtext at pos 0
+              }
+              if((relpos != -1) && (relpos >= cpos-xpos)) // -1 if not found
+              {
+                 return cpos+relpos;
+              }
+           }
+        }
+        if (i != m_ObjectList.begin()) i--;
+        else finished = true;
+     }
+     while (!finished);
+   }
+   return -1; // not found
+}
+/** Finds text in this line.
+    @param needle the text to find
+    @param xpos the position where to start the search
     @return the cursoor coord where it was found or -1
 */
 CoordType
-wxLayoutLine::FindText(const wxString &needle, CoordType xpos) const
+wxLayoutLine::FindString(const wxString &needle, CoordType xpos) const
 {
    int
@@ -1799,5 +1894,5 @@
 
 wxPoint
-wxLayoutList::FindText(const wxString &needle, const wxPoint &cpos) const
+wxLayoutList::FindString(const wxString &needle, const wxPoint &cpos) const
 {
    int xpos;
@@ -1810,7 +1905,33 @@
       if(line->GetLineNumber() >= cpos.y)
       {
-         xpos = line->FindText(needle,
+         xpos = line->FindString(needle,
                                (line->GetLineNumber() == cpos.y) ?
                                cpos.x : 0);
+         if(xpos != -1)
+            return wxPoint(xpos, line->GetLineNumber());
+      }
+   }
+   return wxPoint(-1,-1);
+}
+
+wxPoint
+wxLayoutList::FindStringOpt(const wxString &needle, const wxPoint &cpos,bool down,bool ignorecase) const
+{
+   int xpos;
+
+   wxLayoutLine *line;
+   wxLayoutLine *tmp = m_FirstLine;
+   if (!down)
+     while (tmp->GetNextLine()) tmp = tmp->GetNextLine();
+
+   for(line = tmp;
+       line;
+       down ? line = line->GetNextLine() : line = line->GetPreviousLine())
+   {
+      if(down ? line->GetLineNumber() >= cpos.y : line->GetLineNumber() <= cpos.y)
+      {
+         xpos = line->FindStringOpt(needle,
+                                  (line->GetLineNumber() == cpos.y) ?
+                                  cpos.x : down ? 0 : line->GetLength(),down,ignorecase);
          if(xpos != -1)
             return wxPoint(xpos, line->GetLineNumber());
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxllist.h ./wx2/samples/richedit/wxllist.h
--- ./cvs/wx2/wxwindows/samples/richedit/wxllist.h	Sat Jul 15 21:50:22 2000
+++ ./wx2/samples/richedit/wxllist.h	Sat May 26 11:25:28 2001
@@ -584,5 +584,7 @@
        @return the cursoor coord where it was found or -1
    */
-   CoordType FindText(const wxString &needle, CoordType xpos = 0) const;
+   CoordType FindString(const wxString &needle, CoordType xpos = 0) const;
+
+   CoordType FindStringOpt(const wxString &needle, CoordType xpos = 0,bool down = true,bool ignorecase = false) const;
 
    /** Get the first object in the list. This is used by the wxlparser
@@ -937,5 +939,7 @@
        @return the cursor coord where it was found or (-1,-1)
    */
-   wxPoint FindText(const wxString &needle, const wxPoint &cpos = wxPoint(0,0)) const;
+   wxPoint FindString(const wxString &needle, const wxPoint &cpos = wxPoint(0,0)) const;
+
+   wxPoint FindStringOpt(const wxString &needle, const wxPoint &cpos = wxPoint(0,0),bool down = true,bool ignorecase = false) const;
 
    /**@name Formatting options */
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxlwindow.cpp ./wx2/samples/richedit/wxlwindow.cpp
--- ./cvs/wx2/wxwindows/samples/richedit/wxlwindow.cpp	Sat Jul 15 21:50:22 2000
+++ ./wx2/samples/richedit/wxlwindow.cpp	Sat May 26 11:25:28 2001
@@ -25,4 +25,8 @@
 #endif
 
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#endif
+
 #include "Mpch.h"
 
@@ -1265,6 +1269,6 @@
                      const wxString &configPath)
 {
-#ifdef M_BASEDIR
    wxPoint found;
+#ifdef M_BASEDIR
    
    if(needle.Length() == 0)
@@ -1281,8 +1285,11 @@
       m_FindString = needle;
    
+#elif defined(__WXMSW__)
+   m_FindString = needle;
+#endif
    if(fromWhere == NULL)
-      found = m_llist->FindText(m_FindString, m_llist->GetCursorPos());
+      found = m_llist->FindString(m_FindString, m_llist->GetCursorPos());
    else
-      found = m_llist->FindText(m_FindString, *fromWhere);
+      found = m_llist->FindString(m_FindString, *fromWhere);
    if(found.x != -1)
    {
@@ -1297,8 +1304,24 @@
       return true;
    }
-#endif
    return false;
 }
 
+
+bool
+wxLayoutWindow::FindExt(const wxString &needle,bool down,bool ignorecase)
+{
+   wxPoint found;
+   m_FindString = needle;
+   found = m_llist->FindStringOpt(m_FindString, m_llist->GetCursorPos(),down,ignorecase);
+   if(found.x != -1)
+   {
+      m_llist->MoveCursorTo(found);
+      ScrollToCursor();
+      RequestUpdate();
+      SetFocus();
+      return true;
+   }
+   return false;
+}
 
 bool
diff -rbu2P ./cvs/wx2/wxwindows/samples/richedit/wxlwindow.h ./wx2/samples/richedit/wxlwindow.h
--- ./cvs/wx2/wxwindows/samples/richedit/wxlwindow.h	Sat Jul 15 21:50:22 2000
+++ ./wx2/samples/richedit/wxlwindow.h	Sat May 26 11:25:28 2001
@@ -109,4 +109,8 @@
              wxPoint * fromWhere = NULL,
              const wxString &configPath = "MsgViewFindString");
+
+   /// find with additional options
+   bool FindExt(const wxString &needle,bool down = true,bool ignorecase = false);
+
    /// find the same string again
    bool FindAgain(void);

 	  	 

Index: docs/doxygen/mainpages/samples.h
===================================================================
--- docs/doxygen/mainpages/samples.h	(revision 62839)
+++ docs/doxygen/mainpages/samples.h	(working copy)
@@ -652,9 +652,10 @@
 
 @sampleabout{wxGLCanvas}
 
-@li @b cube Draws only a cube to demonstrate how to write a basic wxWidgets OpenGL program.
-@li @b isosurf Draws a surface by reading coordinates from a dat file.
-@li @b penguin Draws a rotatable penguin by reading data from a dxf file.
+@li @b cube Draws a cube to demonstrate how to write a basic wxWidgets OpenGL program.
+    Arrow keys rotate the cube. Space bar toggles spinning.
+@li @b isosurf Draws a surface by reading coordinates from a DAT file.
+@li @b penguin Draws a rotatable penguin by reading data from a DXF file.
 
 @sampledir{opengl}
 
Index: samples/opengl/cube/cube.cpp
===================================================================
--- samples/opengl/cube/cube.cpp	(revision 62839)
+++ samples/opengl/cube/cube.cpp	(working copy)
@@ -39,6 +39,16 @@
 #endif
 
 // ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// control ids
+enum
+{
+    SpinTimer = wxID_HIGHEST + 1
+};
+
+// ----------------------------------------------------------------------------
 // helper functions
 // ----------------------------------------------------------------------------
 
@@ -283,6 +293,7 @@
 BEGIN_EVENT_TABLE(TestGLCanvas, wxGLCanvas)
     EVT_PAINT(TestGLCanvas::OnPaint)
     EVT_KEY_DOWN(TestGLCanvas::OnKeyDown)
+    EVT_TIMER(SpinTimer, TestGLCanvas::OnSpinTimer)
 END_EVENT_TABLE()
 
 TestGLCanvas::TestGLCanvas(wxWindow *parent)
@@ -292,10 +303,11 @@
     // viewport settings.
     : wxGLCanvas(parent, wxID_ANY, NULL /* attribs */,
                  wxDefaultPosition, wxDefaultSize,
-                 wxFULL_REPAINT_ON_RESIZE)
+                 wxFULL_REPAINT_ON_RESIZE),
+      m_xangle(30.0),
+      m_yangle(30.0),
+      m_spinTimer(this,SpinTimer)
 {
-    m_xangle =
-    m_yangle = 30;
 }
 
 void TestGLCanvas::OnPaint(wxPaintEvent& WXUNUSED(event))
@@ -318,44 +330,52 @@
     SwapBuffers();
 }
 
+void TestGLCanvas::Spin( float xSpin, float ySpin )
+{
+m_xangle += xSpin;
+m_yangle += ySpin;
+
+Refresh(false);
+}
+
 void TestGLCanvas::OnKeyDown( wxKeyEvent& event )
 {
-    float *p = NULL;
+    float angle = 5.0;
 
-    bool inverse = false;
-
     switch ( event.GetKeyCode() )
     {
         case WXK_RIGHT:
-            inverse = true;
-            // fall through
+            Spin( 0.0, -angle );
+            break;
 
         case WXK_LEFT:
-            // rotate around Y axis
-            p = &m_yangle;
+            Spin( 0.0, angle );
             break;
 
         case WXK_DOWN:
-            inverse = true;
-            // fall through
+            Spin( -angle, 0.0 );
+            break;
 
         case WXK_UP:
-            // rotate around X axis
-            p = &m_xangle;
+            Spin( angle, 0.0 );
             break;
 
+        case WXK_SPACE:
+            if ( m_spinTimer.IsRunning() )
+                m_spinTimer.Stop();
+            else
+                m_spinTimer.Start( 25 );
+            break;
+
         default:
             event.Skip();
             return;
     }
+}
 
-    float angle = 5;
-    if ( inverse )
-        angle = -angle;
-
-    *p += angle;
-
-    Refresh(false);
+void TestGLCanvas::OnSpinTimer( wxTimerEvent& WXUNUSED(event) )
+{
+    Spin( 0.0, 4.0 );
 }
 
 
Index: samples/opengl/cube/cube.h
===================================================================
--- samples/opengl/cube/cube.h	(revision 62839)
+++ samples/opengl/cube/cube.h	(working copy)
@@ -67,12 +67,16 @@
 
 private:
     void OnPaint(wxPaintEvent& event);
+    void Spin(float xSpin, float ySpin);
     void OnKeyDown(wxKeyEvent& event);
+    void OnSpinTimer(wxTimerEvent& WXUNUSED(event));
 
     // angles of rotation around x- and y- axis
     float m_xangle,
           m_yangle;
 
+    wxTimer m_spinTimer;
+
     DECLARE_EVENT_TABLE()
 };
 

diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\include\wx\generic\datectrl.h wxWidgets\include\wx\generic\datectrl.h
--- wxWidgets.orig\include\wx\generic\datectrl.h	Sun Apr 03 14:29:23 2005
+++ wxWidgets\include\wx\generic\datectrl.h	Sun Apr 03 14:37:17 2005
@@ -90,4 +90,5 @@
     void OnKillFocus(wxFocusEvent &event);
     void OnChildSetFocus(wxChildFocusEvent &event);
+    void OnSize(wxSizeEvent& event);
 
 
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\src\generic\datectlg.cpp wxWidgets\src\generic\datectlg.cpp
--- wxWidgets.orig\src\generic\datectlg.cpp	Sun Apr 03 13:28:05 2005
+++ wxWidgets\src\generic\datectlg.cpp	Thu Apr 07 17:41:53 2005
@@ -73,21 +73,17 @@
 #endif
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__)
     #undef wxUSE_POPUPWIN
     #define wxUSE_POPUPWIN    0  // Popup not working
     #define TXTCTRL_FLAGS     wxNO_BORDER
-    #define BTN_FLAGS         wxNO_BORDER
     #define CALBORDER         0
-    #define RIGHTBUTTONBORDER 4
-    #define TOPBUTTONBORDER   0
-    #define BUTTONBORDER      4
     #define TXTPOSY           1
+#elif defined(__WXGTK__)
+    #define TXTCTRL_FLAGS     0
+    #define CALBORDER         4
+    #define TXTPOSY           0
 #else
     #define TXTCTRL_FLAGS     0
-    #define BTN_FLAGS         wxBU_AUTODRAW
     #define CALBORDER         4
-    #define RIGHTBUTTONBORDER 0
-    #define TOPBUTTONBORDER   0
-    #define BUTTONBORDER      0
     #define TXTPOSY           0
 #endif
@@ -98,4 +94,7 @@
 // ----------------------------------------------------------------------------
 
+// This flag indicates that combo box style drop button is to be created
+#define wxBU_COMBO          0x0400
+
 
 class wxDropdownButton : public wxBitmapButton
@@ -110,9 +109,4 @@
                      const wxValidator& validator = wxDefaultValidator);
 
-    void Init()
-    {
-        m_borderX = -1;
-        m_borderY = -1;
-    }
     bool Create(wxWindow *parent,
                 wxWindowID id,
@@ -122,11 +116,67 @@
                 const wxValidator& validator = wxDefaultValidator);
 
-    void DoMoveWindow(int x, int y, int w, int h);
+    virtual void DoMoveWindow(int x, int y, int w, int h);
 
 protected:
-    int m_borderX, m_borderY;
+
+    void OnSize(wxSizeEvent& event);
+    void OnMouseEnter(wxMouseEvent& event);
+    void OnMouseLeave(wxMouseEvent& event);
+
+    void RecreateBitmaps(int w, int h);
+
+    wxBitmap    m_bmpNormal;
+    wxBitmap    m_bmpHot;
+
+    int         m_borderX, m_borderY;
+
+    // True if DrawDropArrow should be used instead of DrawComboBoxDropButton
+    bool        m_useDropArrow;
+
+private:
+
+    void Init()
+    {
+        m_borderX = -1;
+        m_borderY = -1;
+    }
+
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS_NO_COPY(wxDropdownButton)
 };
 
 
+// Below, macro DROPBUT_USEDROPARROW should return false when
+// DrawComboBoxDropButton is to be used to render the entire button.
+// COMBOST is non-zero if wxBU_COMBO was set.
+
+#if defined(__WXMSW__)
+
+    #define DROPBUT_USEDROPARROW(COMBOST)   (COMBOST?false:true)
+    #define DROPBUT_DEFAULT_WIDTH           17
+
+#elif defined(__WXGTK__)
+
+    #define DROPBUT_USEDROPARROW(COMBOST)   true
+    #define DROPBUT_DEFAULT_WIDTH           19
+
+#else
+
+    #define DROPBUT_USEDROPARROW(COMBOST)   true
+    #define DROPBUT_DEFAULT_WIDTH           17
+
+#endif
+
+
+IMPLEMENT_DYNAMIC_CLASS(wxDropdownButton, wxBitmapButton)
+
+
+BEGIN_EVENT_TABLE(wxDropdownButton,wxBitmapButton)
+    EVT_ENTER_WINDOW(wxDropdownButton::OnMouseEnter)
+    EVT_LEAVE_WINDOW(wxDropdownButton::OnMouseLeave)
+    EVT_SIZE(wxDropdownButton::OnSize)
+END_EVENT_TABLE()
+
+
 wxDropdownButton::wxDropdownButton(wxWindow *parent,
                                    wxWindowID id,
@@ -145,5 +195,5 @@
                               const wxPoint& pos,
                               const wxSize& size,
-                              long WXUNUSED(style),
+                              long style,
                               const wxValidator& validator)
 {
@@ -151,7 +201,11 @@
     m_marginY = 0;
 
+    m_useDropArrow = DROPBUT_USEDROPARROW(style & wxBU_COMBO);
+
     wxBitmap chkBmp(15,15);  // arbitrary
     if ( !wxBitmapButton::Create(parent, id, chkBmp,
-                                 pos, wxDefaultSize, BTN_FLAGS, validator) )
+                                 pos, wxDefaultSize,
+                                 style | (m_useDropArrow ? wxBU_AUTODRAW : wxNO_BORDER),
+                                 validator) )
         return false;
 
@@ -162,8 +216,5 @@
     m_borderY = sz.y - m_marginY - h;
 
-    w = size.x > 0 ? size.x : sz.x;
-    h = size.y > 0 ? size.y : sz.y;
-
-    DoMoveWindow(pos.x, pos.y, w, h);
+    DoMoveWindow(pos.x, pos.y, size.x, size.y);
 
     return true;
@@ -171,65 +222,113 @@
 
 
-void wxDropdownButton::DoMoveWindow(int x, int y, int w, int h)
+void wxDropdownButton::RecreateBitmaps(int w, int h)
 {
-    if (m_borderX >= 0 && m_borderY >= 0 && (w >= 0 || h >= 0))
-    {
-        wxMemoryDC dc;
-        if (w < 0)
-              w = GetSize().x;
-#ifdef __WXGTK__
-        else
-            w = m_marginX + m_borderX + 15; // GTK magic size
-#endif
-        if (h < 0)
-            h = GetSize().y;
+    wxMemoryDC dc;
 
-        int borderX = m_marginX + m_borderX; 
-        int borderY = m_marginY + m_borderY;
-        int bw = w - borderX;
-        int bh = h - borderY;
-        if (bh < 11) bh=11;
-        if (bw < 9)  bw=9;
+    int borderX = m_marginX + m_borderX;
+    int borderY = m_marginY + m_borderY;
+    int bw = w - borderX;
+    int bh = h - borderY;
 
-        wxBitmap bmp(bw, bh);
-        dc.SelectObject(bmp);
+    wxBitmap bmp(bw, bh);
+    wxBitmap bmpSel(bw, bh);
+    wxRect r(0,0,w,h);
 
-        wxRendererNative& renderer = wxRendererNative::Get();
+    wxRendererNative& renderer = wxRendererNative::Get();
+
+    dc.SelectObject(bmp);
+
+    if ( m_useDropArrow )
+    {
+        // Use DrawDropArrow on transparent background.
 
-#ifdef __WXGTK__
-        wxRect r(-(borderX/2),-(borderY/2),w,h);
         wxColour magic(255,0,255);
-        dc.SetBrush( wxBrush( magic ) );
+        wxBrush magicBrush(magic);
+        r.x = -(borderX/2);
+        r.y = -(borderY/2);
+
+        dc.SetBrush( magicBrush );
         dc.SetPen( *wxTRANSPARENT_PEN );
         dc.DrawRectangle(0,0,bw,bh);
         renderer.DrawDropArrow(this, dc, r);
+        dc.SelectObject( wxNullBitmap );
         wxMask *mask = new wxMask( bmp, magic );
         bmp.SetMask( mask );
-#else
-        wxRect r(0,0,bw,bh);
-        renderer.DrawComboBoxDropButton(this, dc, r);
-#endif
-        SetBitmapLabel(bmp);
 
-        wxBitmap bmpSel(bw, bh);
         dc.SelectObject(bmpSel);
 
-#ifdef __WXGTK__
-        dc.SetBrush( wxBrush( magic ) );
+        dc.SetBrush( magicBrush );
         dc.SetPen( *wxTRANSPARENT_PEN );
         dc.DrawRectangle(0,0,bw,bh);
         renderer.DrawDropArrow(this, dc, r, wxCONTROL_PRESSED);
+        dc.SelectObject( wxNullBitmap );
         mask = new wxMask( bmpSel, magic );
         bmpSel.SetMask( mask );
-#else
+    }
+    else
+    {
+        // Use DrawComboBoxDropButton for the entire button
+        // (also render extra "hot" button state).
+
+        renderer.DrawComboBoxDropButton(this, dc, r);
+
+        dc.SelectObject(bmpSel);
+
         renderer.DrawComboBoxDropButton(this, dc, r, wxCONTROL_PRESSED);
-#endif
-        SetBitmapSelected(bmpSel);
+
+        wxBitmap bmpHot(bw,bh);
+        dc.SelectObject(bmpHot);
+        renderer.DrawComboBoxDropButton(this, dc, r, wxCONTROL_CURRENT);
+
+        m_bmpNormal = bmp;
+        m_bmpHot = bmpHot;
     }
 
+    SetBitmapLabel(bmp);
+    SetBitmapSelected(bmpSel);
+}
+
+
+void wxDropdownButton::DoMoveWindow(int x, int y, int w, int h)
+{
+    if (w < 0)
+        w = DROPBUT_DEFAULT_WIDTH;
+
     wxBitmapButton::DoMoveWindow(x, y, w, h);
 }
 
 
+void wxDropdownButton::OnSize(wxSizeEvent& event)
+{
+    if ( m_borderX >= 0 && m_borderY >= 0 )
+    {
+        int w, h;
+        GetClientSize(&w,&h);
+
+        if ( w > 1 && h > 1 )
+            RecreateBitmaps(w,h);
+    }
+    event.Skip();
+}
+
+
+void wxDropdownButton::OnMouseEnter(wxMouseEvent& event)
+{
+    if ( !m_useDropArrow )
+        SetBitmapLabel(m_bmpHot);
+
+    event.Skip();
+}
+
+
+void wxDropdownButton::OnMouseLeave(wxMouseEvent& event)
+{
+    if ( !m_useDropArrow )
+        SetBitmapLabel(m_bmpNormal);
+
+    event.Skip();
+}
+
+
 #if wxUSE_POPUPWIN
 
@@ -290,4 +389,5 @@
     EVT_TEXT(CTRLID_TXT, wxDatePickerCtrlGeneric::OnText)
     EVT_CHILD_FOCUS(wxDatePickerCtrlGeneric::OnChildSetFocus)
+    EVT_SIZE(wxDatePickerCtrlGeneric::OnSize)
 END_EVENT_TABLE()
 
@@ -331,7 +431,5 @@
                    NULL, this);
 
-    const int height = m_txt->GetBestSize().y - BUTTONBORDER;
-
-    m_btn = new wxDropdownButton(this, CTRLID_BTN, wxDefaultPosition, wxSize(height, height));
+    m_btn = new wxDropdownButton(this, CTRLID_BTN, wxDefaultPosition, wxDefaultSize, wxBU_COMBO);
 
     m_popup = new wxDatePopupInternal(this);
@@ -407,4 +505,6 @@
     SetBestFittingSize(size);
 
+    SetBackgroundColour(m_txt->GetBackgroundColour());
+
     return true;
 }
@@ -449,9 +549,4 @@
 {
     wxControl::DoMoveWindow(x, y, w, h);
-    wxSize bs=m_btn->GetBestSize();
-    int eh=m_txt->GetBestSize().y;
-
-    m_txt->SetSize(0, TXTPOSY, w-bs.x-RIGHTBUTTONBORDER, h > eh ? eh-TXTPOSY : h-TXTPOSY);
-    m_btn->SetSize(w - bs.x-RIGHTBUTTONBORDER, TOPBUTTONBORDER, bs.x, h > bs.y ? bs.y : h);
 
     if (m_dropped)
@@ -660,4 +755,21 @@
 
 
+void wxDatePickerCtrlGeneric::OnSize(wxSizeEvent& event)
+{
+    if ( m_btn )
+    {
+        wxSize sz = GetClientSize();
+
+        wxSize bs=m_btn->GetSize();
+        int eh=m_txt->GetBestSize().y;
+
+        m_txt->SetSize(0, TXTPOSY, sz.x-bs.x, sz.y > eh ? eh-TXTPOSY : sz.y-TXTPOSY);
+        m_btn->SetSize(sz.x - bs.x, 0, bs.x, sz.y);
+    }
+
+    event.Skip();
+}
+
+
 void wxDatePickerCtrlGeneric::OnChildSetFocus(wxChildFocusEvent &ev)
 {
@@ -676,5 +788,5 @@
     {
         DropDown(false);
-        if (ev.GetEventObject() == m_btn)
+        if (::wxFindWindowAtPoint(::wxGetMousePosition()) == m_btn)
             m_ignoreDrop = true;
     }
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\src\generic\renderg.cpp wxWidgets\src\generic\renderg.cpp
--- wxWidgets.orig\src\generic\renderg.cpp	Wed Apr 06 10:48:25 2005
+++ wxWidgets\src\generic\renderg.cpp	Wed Apr 06 21:44:21 2005
@@ -358,8 +358,13 @@
                                           int WXUNUSED(flags))
 {
-    // FIXME: Is it worth to do a better implementation?
-    // Generic wxComboDropButton should be drawn using
-    // combination of wxBitmapButton and DrawDropArrow
-    // anyway.
+    // Creating a generic button background that would actually be
+    // useful is rather difficult to accomplish. Best compromise
+    // is to use window's background colour to achieve transparent'
+    // ish appearance that should look decent in combo box style
+    // controls.
+    wxColour col = win->GetBackgroundColour();
+    dc.SetBrush(wxBrush(col));
+    dc.SetPen(wxPen(col));
+    dc.DrawRectangle(rect);
     DrawDropArrow(win,dc,rect);
 }

 	  	 

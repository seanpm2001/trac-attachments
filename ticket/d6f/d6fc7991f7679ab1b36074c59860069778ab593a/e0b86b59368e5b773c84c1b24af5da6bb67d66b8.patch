Index: combobox.cpp
===================================================================
--- combobox.cpp	(revision 54331)
+++ combobox.cpp	(working copy)
@@ -93,6 +93,7 @@
     ComboboxWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
 
     virtual wxControl *GetWidget() const { return m_combobox; }
+    virtual wxTextEntryBase *GetTextEntry() const { return m_combobox; }
     virtual wxItemContainer* GetContainer() const { return m_combobox; }
     virtual void RecreateWidget() { CreateCombo(); }
 
Index: odcombobox.cpp
===================================================================
--- odcombobox.cpp	(revision 54331)
+++ odcombobox.cpp	(working copy)
@@ -92,6 +92,7 @@
     ODComboboxWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
 
     virtual wxControl *GetWidget() const { return m_combobox; }
+    virtual wxTextEntryBase *GetTextEntry() const { return m_combobox ? m_combobox->GetTextCtrl() : (wxTextEntryBase *)NULL; }
     virtual wxItemContainer* GetContainer() const { return m_combobox; }
     virtual void RecreateWidget() { CreateCombo(); }
 
Index: searchctrl.cpp
===================================================================
--- searchctrl.cpp	(revision 54331)
+++ searchctrl.cpp	(working copy)
@@ -72,6 +72,7 @@
     virtual ~SearchCtrlWidgetsPage(){};
 
     virtual wxControl *GetWidget() const { return m_srchCtrl; }
+    virtual wxTextEntryBase *GetTextEntry() const { return m_srchCtrl; }
     virtual void RecreateWidget() { CreateControl(); }
 
     // lazy creation of the content
Index: textctrl.cpp
===================================================================
--- textctrl.cpp	(revision 54331)
+++ textctrl.cpp	(working copy)
@@ -138,6 +138,7 @@
     virtual ~TextWidgetsPage(){};
 
     virtual wxControl *GetWidget() const { return m_text; }
+    virtual wxTextEntryBase *GetTextEntry() const { return m_text; }
     virtual void RecreateWidget() { CreateText(); }
 
     // lazy creation of the content
Index: widgets.cpp
===================================================================
--- widgets.cpp	(revision 54331)
+++ widgets.cpp	(working copy)
@@ -87,7 +87,11 @@
     Widgets_BusyCursor,
 
     Widgets_GoToPage,
-    Widgets_GoToPageLast = Widgets_GoToPage + 100
+    Widgets_GoToPageLast = Widgets_GoToPage + 100,
+
+    TextEntry_DisableAutoComplete,
+    TextEntry_AutoCompleteFixed,
+    TextEntry_AutoCompleteFilenames
 };
 
 const wxChar *WidgetsCategories[MAX_PAGES] = {
@@ -153,6 +157,10 @@
 
     void OnToggleGlobalBusyCursor(wxCommandEvent& event);
     void OnToggleBusyCursor(wxCommandEvent& event);
+
+    void OnDisableAutoComplete(wxCommandEvent& event);
+    void OnAutoCompleteFixed(wxCommandEvent& event);
+    void OnAutoCompleteFilenames(wxCommandEvent& event);
 #endif // wxUSE_MENUS
 
     // initialize the book: add all pages to it
@@ -285,6 +293,10 @@
     EVT_MENU(Widgets_GlobalBusyCursor,  WidgetsFrame::OnToggleGlobalBusyCursor)
     EVT_MENU(Widgets_BusyCursor,        WidgetsFrame::OnToggleBusyCursor)
 
+    EVT_MENU(TextEntry_DisableAutoComplete,   WidgetsFrame::OnDisableAutoComplete)
+    EVT_MENU(TextEntry_AutoCompleteFixed,     WidgetsFrame::OnAutoCompleteFixed)
+    EVT_MENU(TextEntry_AutoCompleteFilenames, WidgetsFrame::OnAutoCompleteFilenames)
+
     EVT_MENU(wxID_EXIT, WidgetsFrame::OnExit)
 #endif // wxUSE_MENUS
 END_EVENT_TABLE()
@@ -384,6 +396,14 @@
     menuWidget->AppendSeparator();
     menuWidget->Append(wxID_EXIT, _T("&Quit\tCtrl-Q"));
     mbar->Append(menuWidget, _T("&Widget"));
+
+    wxMenu *menuTextEntry = new wxMenu;
+    menuTextEntry->Append(TextEntry_DisableAutoComplete,   _T("&Disable auto-completion\tCtrl-D"));
+    menuTextEntry->Append(TextEntry_AutoCompleteFixed,     _T("&Fixed-list auto-completion\tCtrl-Shift-F"));
+    menuTextEntry->Append(TextEntry_AutoCompleteFilenames, _T("&Files names auto-completion\tCtrl-Shift-N"));
+
+    mbar->Append(menuTextEntry, _T("&Text Entry"));
+
     SetMenuBar(mbar);
 
     mbar->Check(Widgets_Enable, true);
@@ -858,6 +878,54 @@
                                                 : wxSTANDARD_CURSOR));
 }
 
+void WidgetsFrame::OnDisableAutoComplete(wxCommandEvent& WXUNUSED(event))
+{
+    wxTextEntryBase *textEntryWidget = CurrentPage()->GetTextEntry();
+    if (textEntryWidget)
+    {
+        if (!textEntryWidget->AutoComplete(wxArrayString()))
+            wxLogMessage(_T("AutoComplete() failed."));
+    }
+    else
+        wxLogMessage(_T("No text entry on this page."));
+}
+
+void WidgetsFrame::OnAutoCompleteFixed(wxCommandEvent& WXUNUSED(event))
+{
+
+    wxTextEntryBase *textEntryWidget = CurrentPage()->GetTextEntry();
+    if (textEntryWidget)
+    {
+        wxArrayString completion_choices;
+
+        // add a few strings so a completion occurs on any letter typed
+        for (char idxc='a'; idxc<'z'; ++idxc)
+            completion_choices.Add (wxString::Format(wxT("%c%c"), idxc, idxc));
+
+        completion_choices.Add (wxT("is this string for test?"));
+        completion_choices.Add (wxT("this is a test string"));
+        completion_choices.Add (wxT("this is another test string"));
+        completion_choices.Add (wxT("this string is for test"));
+
+        if (!textEntryWidget->AutoComplete(completion_choices))
+            wxLogMessage(_T("AutoComplete() failed."));
+    }
+    else
+        wxLogMessage(_T("No text entry on this page."));
+}
+
+void WidgetsFrame::OnAutoCompleteFilenames(wxCommandEvent& WXUNUSED(event))
+{
+    wxTextEntryBase *textEntryWidget = CurrentPage()->GetTextEntry();
+    if (textEntryWidget)
+    {
+        if (!textEntryWidget->AutoCompleteFileNames())
+            wxLogMessage(_T("AutoCompleteFileNames() failed."));
+    }
+    else
+        wxLogMessage(_T("No text entry on this page."));
+}
+
 #endif // wxUSE_MENUS
 
 // ----------------------------------------------------------------------------
Index: widgets.h
===================================================================
--- widgets.h	(revision 54331)
+++ widgets.h	(working copy)
@@ -97,6 +97,9 @@
     // return the control shown by this page
     virtual wxControl *GetWidget() const = 0;
 
+    // return the control shown by this page, if it supports text entry interface
+    virtual wxTextEntryBase *GetTextEntry() const { return NULL; }
+
     // lazy creation of the content
     virtual void CreateContent() = 0;
 

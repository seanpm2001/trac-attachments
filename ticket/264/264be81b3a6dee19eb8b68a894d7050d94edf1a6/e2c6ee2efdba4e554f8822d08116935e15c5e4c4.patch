Index: utils/tex2rtf/src/tex2any.h
===================================================================
--- utils/tex2rtf/src/tex2any.h	(revision 47538)
+++ utils/tex2rtf/src/tex2any.h	(working copy)
@@ -13,6 +13,7 @@
 #include "wx/utils.h"
 #include "wx/list.h"
 #include "wx/hash.h"
+#include "wx/hashset.h"
 #include "wx/tokenzr.h"
 #include "wx/wfstream.h"
 #include "wx/txtstrm.h"
@@ -120,6 +121,8 @@
   virtual ~TexChunk(void);
 };
 
+WX_DECLARE_HASH_SET(wxString, wxStringHash, wxStringEqual, StringSet);
+
 // Represents a topic, used for generating a table of contents file (.cnt).
 // Also for storing keywords found in a topic, a list of which is then inserted
 // into the topic in the next pass.
@@ -133,7 +136,7 @@
   // a top-level topic has no children (?)
   bool hasChildren;
   wxChar *filename;
-  wxStringList *keywords;
+  StringSet *keywords;
   TexTopic(wxChar *f = NULL);
   virtual ~TexTopic(void);
 };
@@ -153,7 +156,7 @@
 int ParseMacroBody(const wxChar *macro_name, TexChunk *parent, int no_args,
            wxChar *buffer, int pos, wxChar *environment = NULL, bool parseArgToBrace = true, TexChunk *customMacroArgs = NULL);
 void TraverseDocument(void);
-void TraverseFromChunk(TexChunk *chunk, wxNode *thisNode = NULL, bool childrenOnly = false);
+void TraverseFromChunk(TexChunk *chunk, wxList::compatibility_iterator* thisNode = NULL, bool childrenOnly = false);
 #define TraverseChildrenFromChunk(arg) TraverseFromChunk(arg, NULL, true)
 void SetCurrentOutput(FILE *fd);
 void SetCurrentOutputs(FILE *fd1, FILE *fd2);
@@ -406,6 +409,8 @@
   virtual ~TexRef(void);
 };
 
+WX_DECLARE_STRING_HASH_MAP(TexRef*, TexReferenceMap);
+
 /*
  * Add a reference
  *
@@ -480,8 +485,7 @@
   }
 };
 
-extern wxList BibList;
-extern wxStringList CitationList;
+extern StringSet CitationList;
 
 bool ReadBib(wxChar *filename);
 void OutputBib(void);
@@ -494,8 +498,6 @@
  *
  */
 
-extern wxList CustomMacroList;
-
 #define CUSTOM_MACRO_IGNORE 0
 #define CUSTOM_MACRO_OUTPUT 1
 #define CUSTOM_MACRO_MARK   2
@@ -518,6 +520,12 @@
     virtual ~CustomMacro();
 };
 
+WX_DECLARE_STRING_HASH_MAP(CustomMacro*, MacroMap);
+extern MacroMap CustomMacroMap;
+
+WX_DECLARE_STRING_HASH_MAP(BibEntry*, BibMap);
+extern BibMap BibList;
+
 bool ReadCustomMacros(const wxString& filename);
 void ShowCustomMacros(void);
 CustomMacro *FindCustomMacro(wxChar *name);
@@ -540,7 +548,8 @@
   virtual ~ColourTableEntry(void);
 };
 
-extern wxList ColourTable;
+WX_DECLARE_STRING_HASH_MAP(ColourTableEntry*, ColourTableMap);
+extern ColourTableMap ColourTable;
 extern void AddColour(const wxChar *theName, unsigned int r,  unsigned int g,  unsigned int b);
 extern int FindColourPosition(wxChar *theName);
 // Converts e.g. "red" -> "#FF0000"
Index: utils/tex2rtf/src/htmlutil.cpp
===================================================================
--- utils/tex2rtf/src/htmlutil.cpp	(revision 47538)
+++ utils/tex2rtf/src/htmlutil.cpp	(working copy)
@@ -10,6 +10,10 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
+#ifdef __GNUG__
+#pragma implementation
+#endif
+
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
 
@@ -33,7 +37,7 @@
     { return wxStrcpy(new wxChar[wxStrlen(s) + 1], s); }
 #endif
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 extern int passNumber;
 
@@ -114,7 +118,7 @@
     label = copystring(theLabel);
     filename = copystring(theFile);
   }
-  virtual ~TexNextPage(void)
+  ~TexNextPage(void)
   {
     delete[] label;
     delete[] filename;
@@ -343,12 +347,12 @@
       if (def && (def->macroId == ltVERBATIM || def->macroId == ltVERB || def->macroId == ltSPECIAL))
         inVerbatim = true;
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2HTML(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
       if (def && (def->macroId == ltVERBATIM || def->macroId == ltVERB || def->macroId == ltSPECIAL))
@@ -358,12 +362,12 @@
     }
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2HTML(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
       break;
@@ -1291,9 +1295,10 @@
     else
     {
       indentLevel --;
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         switch (struc->listType)
         {
           case LATEX_ITEMIZE:
@@ -1309,7 +1314,7 @@
         }
 
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
     }
     break;
@@ -1560,10 +1565,10 @@
   {
     if (!start)
     {
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         struc->currentItem += 1;
         if (struc->listType == LATEX_DESCRIPTION)
         {
@@ -2191,7 +2196,8 @@
 #endif
           {
             TexOutput(_T("<img src=\""));
-            TexOutput(ConvertCase(wxFileNameFromPath(inlineFilename)));
+//            TexOutput(ConvertCase(wxFileNameFromPath(inlineFilename)));
+            TexOutput(wxFileNameFromPath(inlineFilename));
             TexOutput(_T("\""));
             TexOutput(alignment);
             TexOutput(_T(">"));
@@ -2274,7 +2280,8 @@
           TexOutput(_T("unknown"));
         TexOutput(_T("\">"));
         TexOutput(_T("<img src=\""));
-        TexOutput(ConvertCase(wxFileNameFromPath(imageFile)));
+//        TexOutput(ConvertCase(wxFileNameFromPath(imageFile)));
+        TexOutput(wxFileNameFromPath(imageFile));
         TexOutput(_T("\" ISMAP></A><P>"));
         delete[] imageFile;
         imageFile = NULL;
@@ -2364,12 +2371,16 @@
     if (arg_no == 1 && start)
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-      if (ref)
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
       {
-        if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
-        ref->sectionNumber = copystring(buf);
+        TexRef *ref = iTexRef->second;
+        if (ref)
+        {
+          if (ref->sectionNumber) delete[] ref->sectionNumber;
+          wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+          ref->sectionNumber = copystring(buf);
+        }
       }
 
       wxSnprintf(buf, sizeof(buf), _T("\n<DT> [%d] "), citeCount);
@@ -3260,12 +3271,14 @@
     const wxChar *topicName = node->GetKeyString();
     if (texTopic->filename && texTopic->keywords)
     {
-      wxStringListNode *node1 = texTopic->keywords->GetFirst();
-      while (node1)
+      StringSet *set = texTopic->keywords;
+      if (set)
       {
-        wxChar *s = (wxChar *)node1->GetData();
-        wxFprintf(fd, _T("%s|%s|%s\n"), topicName, texTopic->filename, s);
-        node1 = node1->GetNext();
+        for (StringSet::iterator iString = set->begin(); iString != set->begin(); ++iString)
+        {
+          const wxChar *s = iString->c_str();
+          wxFprintf(fd, _T("%s|%s|%s\n"), topicName, texTopic->filename, s);
+        }
       }
     }
     node = TopicTable.Next();
@@ -3360,17 +3373,19 @@
     const wxChar *topicName = node->GetKeyString();
     if (texTopic->filename && texTopic->keywords)
     {
-      wxStringListNode *node1 = texTopic->keywords->GetFirst();
-      while (node1)
+      StringSet *set = texTopic->keywords;
+      if (set)
       {
-        wxChar *s = (wxChar *)node1->GetData();
-        wxFprintf(f,
-            _T(" <LI> <OBJECT type=\"text/sitemap\">\n")
-            _T("  <param name=\"Local\" value=\"%s#%s\">\n")
-            _T("  <param name=\"Name\" value=\"%s\">\n")
-            _T("  </OBJECT>\n"),
-        texTopic->filename, topicName, s);
-        node1 = node1->GetNext();
+        for (StringSet::iterator iString = set->begin(); iString != set->begin(); ++iString)
+        {
+          const wxChar *s = iString->c_str();
+          wxFprintf(f,
+              _T(" <LI> <OBJECT type=\"text/sitemap\">\n")
+              _T("  <param name=\"Local\" value=\"%s#%s\">\n")
+              _T("  <param name=\"Name\" value=\"%s\">\n")
+              _T("  </OBJECT>\n"),
+          texTopic->filename, topicName, s);
+        }
       }
     }
     node = TopicTable.Next();
Index: utils/tex2rtf/src/tex2any.cpp
===================================================================
--- utils/tex2rtf/src/tex2any.cpp	(revision 47538)
+++ utils/tex2rtf/src/tex2any.cpp	(working copy)
@@ -151,7 +151,7 @@
 
 extern int passNumber;
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 /*
  * International support
@@ -925,9 +925,10 @@
     CustomMacro *macro = new CustomMacro(commandName, noArgs, NULL);
     if (wxStrlen(commandValue) > 0)
       macro->macroBody = copystring(commandValue);
-    if (!CustomMacroList.Find(commandName))
+    MacroMap::iterator it = CustomMacroMap.find(commandName);
+    if (it != CustomMacroMap.end())
     {
-      CustomMacroList.Append(commandName, macro);
+      CustomMacroMap[commandName] = macro;
       AddMacroDef(ltCUSTOM_MACRO, commandName, noArgs);
     }
     return true;
@@ -1479,10 +1480,10 @@
           {
             int n = buffer[pos] - 48;
             pos ++;
-            wxNode *node = customMacroArgs->children.Item(n-1);
-            if (node)
+            wxList::compatibility_iterator iNode = customMacroArgs->children.Item(n-1);
+            if (iNode)
             {
-              TexChunk *argChunk = (TexChunk *)node->GetData();
+              TexChunk *argChunk = (TexChunk *)iNode->GetData();
               children.Append((wxObject *)new TexChunk(*argChunk));
             }
           }
@@ -1656,12 +1657,12 @@
   parent->no_args = maxArgs;
 
   // Tell each argument how many args there are (useful when processing an arg)
-  wxNode *node = parent->children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = parent->children.GetFirst();
+  while (iNode)
   {
-    TexChunk *chunk = (TexChunk *)node->GetData();
+    TexChunk *chunk = (TexChunk *)iNode->GetData();
     chunk->no_args = maxArgs;
-    node = node->GetNext();
+    iNode = iNode->GetNext();
   }
   return pos;
 }
@@ -1741,12 +1742,12 @@
     value = NULL;
 
   optional = toCopy.optional;
-  wxNode *node = toCopy.children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = toCopy.children.GetFirst();
+  while (iNode)
   {
-    TexChunk *child = (TexChunk *)node->GetData();
+    TexChunk *child = (TexChunk *)iNode->GetData();
     children.Append((wxObject *)new TexChunk(*child));
-    node = node->GetNext();
+    iNode = iNode->GetNext();
   }
 }
 
@@ -1754,14 +1755,12 @@
 {
 //  if (name) delete[] name;
   if (value) delete[] value;
-  wxNode *node = children.GetFirst();
-  while (node)
+  wxList::compatibility_iterator iNode = children.GetFirst();
+  while (iNode)
   {
-    TexChunk *child = (TexChunk *)node->GetData();
+    TexChunk *child = (TexChunk *)iNode->GetData();
     delete child;
-    wxNode *next = node->GetNext();
-    delete node;
-    node = next;
+    iNode = iNode->GetNext();
   }
 }
 
@@ -1796,25 +1795,25 @@
         wxStrcat(currentArgData, def->name);
       }
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         wxStrcat(currentArgData, _T("{"));
         GetArgData1(child_chunk);
         wxStrcat(currentArgData, _T("}"));
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
       break;
     }
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         GetArgData1(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
       break;
     }
@@ -1871,7 +1870,7 @@
  */
 
 
-void TraverseFromChunk(TexChunk *chunk, wxNode *thisNode, bool childrenOnly)
+void TraverseFromChunk(TexChunk *chunk, wxList::compatibility_iterator* thisNode, bool childrenOnly)
 {
   Tex2RTFYield();
   if (stopRunning) return;
@@ -1887,12 +1886,12 @@
       if (!childrenOnly)
         OnMacro(chunk->macroId, chunk->no_args, true);
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
-        TraverseFromChunk(child_chunk, node);
-        node = node->GetNext();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
+        TraverseFromChunk(child_chunk, &iNode);
+        iNode = iNode->GetNext();
       }
 
       if (thisNode && thisNode->GetNext())
@@ -1913,12 +1912,12 @@
 
       if (childrenOnly || OnArgument(chunk->macroId, chunk->argn, true))
       {
-        wxNode *node = chunk->children.GetFirst();
-        while (node)
+        wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+        while (iNode)
         {
-          TexChunk *child_chunk = (TexChunk *)node->GetData();
-          TraverseFromChunk(child_chunk, node);
-          node = node->GetNext();
+          TexChunk *child_chunk = (TexChunk *)iNode->GetData();
+          TraverseFromChunk(child_chunk, &iNode);
+          iNode = iNode->GetNext();
         }
       }
 
@@ -2050,35 +2049,28 @@
   {
 /* Don't want to remove custom macros after each pass.*/
       SetFontSizes(10);
-      wxNode *node = CustomMacroList.GetFirst();
-      while (node)
+      for (MacroMap::iterator it = CustomMacroMap.begin(); it != CustomMacroMap.end(); ++it)
       {
-        CustomMacro *macro = (CustomMacro *)node->GetData();
-        delete macro;
-        delete node;
-        node = CustomMacroList.GetFirst();
+        CustomMacro* pMacro = it->second;
+        delete pMacro;
       }
+      CustomMacroMap.clear();
   }
 /**/
-  TexReferences.BeginFind();
-  wxHashTable::Node *refNode = TexReferences.Next();
-  while (refNode)
+  for (TexReferenceMap::iterator iTexRef = TexReferences.begin(); iTexRef != TexReferences.end(); ++iTexRef)
   {
-    TexRef *ref = (TexRef *)refNode->GetData();
+    TexRef *ref = iTexRef->second;
     delete ref;
-    refNode = TexReferences.Next();
   }
-  TexReferences.Clear();
+  TexReferences.clear();
 
-  wxNode* bibNode = BibList.GetFirst();
-  while (bibNode)
+  for (BibMap::iterator it = BibList.begin(); it != BibList.end(); ++it)
   {
-    BibEntry *entry = (BibEntry *)bibNode->GetData();
+    BibEntry *entry = it->second;
     delete entry;
-    delete bibNode;
-    bibNode = BibList.GetFirst();
   }
-  CitationList.Clear();
+  BibList.clear();
+  CitationList.clear();
   ResetTopicCounter();
 }
 
Index: utils/tex2rtf/src/tex2rtf.cpp
===================================================================
--- utils/tex2rtf/src/tex2rtf.cpp	(revision 47538)
+++ utils/tex2rtf/src/tex2rtf.cpp	(working copy)
@@ -87,7 +87,7 @@
 extern wxChar *TexFileRoot;
 extern wxChar *TexBibName;         // Bibliography output file name
 extern wxChar *TexTmpBibName;      // Temporary bibliography output file name
-extern wxList ColourTable;
+extern ColourTableMap ColourTable;
 extern TexChunk *TopLevel;
 
 #if wxUSE_HELP
@@ -160,8 +160,14 @@
   WinHelpContentsFileName = new wxChar[300];
   RefFileName = new wxChar[300];
 
-  WX_CLEAR_LIST(wxList,ColourTable);
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
+  {
+    ColourTableEntry *entry = it->second;
+    delete entry;
+  }
+  ColourTable.clear();
 
+
   int n = 1;
 
   // Read input/output files
@@ -476,14 +482,12 @@
 #ifndef NO_GUI
 int MyApp::OnExit()
 {
-  wxNode *node = CustomMacroList.GetFirst();
-  while (node)
+  for (MacroMap::iterator it = CustomMacroMap.begin(); it != CustomMacroMap.end(); ++it)
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
     delete macro;
-    delete node;
-    node = CustomMacroList.GetFirst();
   }
+  CustomMacroMap.clear();
   MacroDefs.BeginFind();
   wxHashTable::Node* mNode = MacroDefs.Next();
   while (mNode)
Index: utils/tex2rtf/src/rtfutils.cpp
===================================================================
--- utils/tex2rtf/src/rtfutils.cpp	(revision 47538)
+++ utils/tex2rtf/src/rtfutils.cpp	(working copy)
@@ -46,7 +46,7 @@
 static wxChar *contentsLineSection = NULL;
 static wxChar *contentsLineValue = NULL;
 static TexChunk *descriptionItemArg = NULL;
-static wxStringList environmentStack; // Stack of paragraph styles we need to remember
+static wxArrayString environmentStack; // Stack of paragraph styles we need to remember
 static int footnoteCount = 0;
 static int citeCount = 1;
 extern bool winHelp;
@@ -59,7 +59,7 @@
 // This is defined in the Tex2Any library and isn't in use after parsing
 extern wxChar *BigBuffer;
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 // Are we in verbatim mode? If so, format differently.
 static bool inVerbatim = false;
@@ -310,7 +310,7 @@
   }
 }
 
-void SplitIndexEntry(wxChar *entry, wxChar *buf1, wxChar *buf2)
+void SplitIndexEntry(const wxChar *entry, wxChar *buf1, wxChar *buf2)
 {
   int len = wxStrlen(entry); int i = 0;
   while ((i < len) && entry[i] != '!')
@@ -335,13 +335,12 @@
   if (!texTopic)
     return;
 
-  wxStringList *list = texTopic->keywords;
-  if (list)
+  StringSet *set = texTopic->keywords;
+  if (set)
   {
-    wxStringListNode *node = list->GetFirst();
-    while (node)
+    for (StringSet::iterator iString = set->begin(); iString != set->end(); ++iString)
     {
-      wxChar *s = (wxChar *)node->GetData();
+      const wxChar *s = iString->c_str();
 
       // Must separate out main entry form subentry (only 1 subentry allowed)
       wxChar buf1[100]; wxChar buf2[100];
@@ -367,7 +366,6 @@
         TexOutput(buf2);
       }
       TexOutput(_T("}\n"));
-      node = node->GetNext();
     }
   }
 }
@@ -403,12 +401,10 @@
 void WriteColourTable(FILE *fd)
 {
   wxFprintf(fd, _T("{\\colortbl"));
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     wxFprintf(fd, _T("\\red%d\\green%d\\blue%d;\n"), entry->red, entry->green, entry->blue);
-    node = node->GetNext();
   }
   wxFprintf(fd, _T("}"));
 }
@@ -714,12 +710,12 @@
       if (def && (def->macroId == ltVERBATIM || def->macroId == ltVERB))
         inVerbatim = true;
 
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2RTF(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
       if (def && (def->macroId == ltVERBATIM || def->macroId == ltVERB))
@@ -729,12 +725,12 @@
     }
     case CHUNK_TYPE_ARG:
     {
-      wxNode *node = chunk->children.GetFirst();
-      while (node)
+      wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+      while (iNode)
       {
-        TexChunk *child_chunk = (TexChunk *)node->GetData();
+        TexChunk *child_chunk = (TexChunk *)iNode->GetData();
         Text2RTF(child_chunk);
-        node = node->GetNext();
+        iNode = iNode->GetNext();
       }
 
       break;
@@ -781,24 +777,18 @@
 
 void PopEnvironmentStyle(void)
 {
-  wxStringListNode *node = environmentStack.GetLast();
-  if (node)
+  if (!environmentStack.IsEmpty())
   {
-    wxChar *val = (wxChar *)node->GetData();
-    delete[] val;
-    delete node;
+    environmentStack.RemoveAt(environmentStack.Count() - 1);
   }
 }
 
 // Write out the styles, most recent first.
 void WriteEnvironmentStyles(void)
 {
-  wxStringListNode *node = environmentStack.GetLast();
-  while (node)
+  for (size_t index = environmentStack.GetCount() - 1; index >= 0; --index)
   {
-    wxChar *val = (wxChar *)node->GetData();
-    TexOutput(val);
-    node = node->GetNext();
+    TexOutput(environmentStack[index].c_str());
   }
   if (!inTabular && (ParIndent > 0) && (forbidParindent == 0))
   {
@@ -2057,9 +2047,9 @@
         listType = LATEX_DESCRIPTION;
 
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentSize1 = oldIndent + 20*labelIndentTab;
       int indentSize2 = oldIndent + 20*itemIndentTab;
@@ -2076,11 +2066,12 @@
       indentLevel --;
       PopEnvironmentStyle();
 
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
 /* Change 18/7/97 - don't know why we wish to do this
       if (itemizeStack.Number() == 0)
@@ -2099,9 +2090,9 @@
     {
       indentLevel ++;
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentSize = oldIndent + TwoColWidthA;
 
@@ -2116,11 +2107,12 @@
     {
       indentLevel --;
       PopEnvironmentStyle();
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
 /*
       // JACS June 1997
@@ -2143,10 +2135,10 @@
   }
   case ltITEM:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (!start)
       {
         struc->currentItem += 1;
@@ -2235,20 +2227,24 @@
   case ltTWOCOLITEM:
   case ltTWOCOLITEMRULED:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (start)
       {
         struc->currentItem += 1;
 
         int oldIndent = 0;
-        wxNode *node2 = NULL;
-        if (itemizeStack.GetCount() > 1) // TODO: do I actually mean Nth(0) here??
-            node2 = itemizeStack.Item(1);
-        if (node2)
-          oldIndent = ((ItemizeStruc *)node2->GetData())->indentation;
+        wxList::compatibility_iterator iNode2 = itemizeStack.GetFirst();
+        if (iNode2)
+        {
+          iNode2 = iNode2->GetNext();
+          if (iNode2)
+          {
+            oldIndent = ((ItemizeStruc *)iNode2->GetData())->indentation;
+          }
+        }
 
         TexOutput(_T("\n"));
         // JACS
@@ -4738,9 +4734,9 @@
 //      indentLevel ++;
 //      TexOutput(_T("\\fi0\n"));
       int oldIndent = 0;
-      wxNode *node = itemizeStack.GetFirst();
-      if (node)
-        oldIndent = ((ItemizeStruc *)node->GetData())->indentation;
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
+        oldIndent = ((ItemizeStruc *)iNode->GetData())->indentation;
 
       int indentValue = 20*ParseUnitArgument(GetArgData());
       int indentSize = indentValue + oldIndent;
@@ -4756,11 +4752,12 @@
     if (!start && (arg_no == 2))
     {
       PopEnvironmentStyle();
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
       if (itemizeStack.GetCount() == 0)
       {
@@ -4876,12 +4873,16 @@
     if (arg_no == 1 && start)
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-      if (ref)
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
       {
-        if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
-        ref->sectionNumber = copystring(buf);
+        TexRef *ref = iTexRef->second;
+        if (ref)
+        {
+          if (ref->sectionNumber) delete[] ref->sectionNumber;
+          wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+          ref->sectionNumber = copystring(buf);
+        }
       }
 
       TexOutput(_T("\\li260\\fi-260 ")); // Indent from 2nd line
Index: utils/tex2rtf/src/texutils.cpp
===================================================================
--- utils/tex2rtf/src/texutils.cpp	(revision 47538)
+++ utils/tex2rtf/src/texutils.cpp	(working copy)
@@ -23,6 +23,7 @@
 
 #include "wx/app.h"
 #include "wx/hash.h"
+#include "wx/hashmap.h"
 #include "wx/textfile.h"
 
 #ifdef new
@@ -46,12 +47,12 @@
     { return wxStrcpy(new wxChar[wxStrlen(s) + 1], s); }
 #endif
 
-wxHashTable TexReferences(wxKEY_STRING);
-wxList BibList(wxKEY_STRING);
-wxStringList CitationList;
-wxList ColourTable(wxKEY_STRING);
+TexReferenceMap TexReferences;
+BibMap BibList;
+StringSet CitationList;
+ColourTableMap ColourTable;
 wxHashTable BibStringTable(wxKEY_STRING);
-wxList CustomMacroList(wxKEY_STRING);
+MacroMap CustomMacroMap;
 TexChunk *currentSection = NULL;
 wxChar *fakeCurrentSection = NULL;
 
@@ -176,16 +177,16 @@
   if (chunk && (chunk->type == CHUNK_TYPE_MACRO) &&
       (chunk->macroId == ltLABEL))
   {
-    wxNode *node = chunk->children.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = chunk->children.GetFirst();
+    if (iNode)
     {
-      TexChunk *child = (TexChunk *)node->GetData();
+      TexChunk *child = (TexChunk *)iNode->GetData();
       if (child->type == CHUNK_TYPE_ARG)
       {
-        wxNode *snode = child->children.GetFirst();
-        if (snode)
+        wxList::compatibility_iterator iNode2 = child->children.GetFirst();
+        if (iNode2)
         {
-          TexChunk *schunk = (TexChunk *)snode->GetData();
+          TexChunk *schunk = (TexChunk *)iNode2->GetData();
           if (schunk->type == CHUNK_TYPE_STRING)
             topicName = schunk->value;
         }
@@ -340,8 +341,11 @@
 void AddTexRef(wxChar *name, wxChar *file, wxChar *sectionName,
                int chapter, int section, int subsection, int subsubsection)
 {
-  TexRef *texRef = (TexRef *)TexReferences.Get(name);
-  if (texRef) TexReferences.Delete(name);
+  TexReferenceMap::iterator iTexRef = TexReferences.find(name);
+  if (iTexRef != TexReferences.end())
+  {
+    TexReferences.erase(iTexRef);
+  }
 
   wxChar buf[100];
   buf[0] = 0;
@@ -382,7 +386,7 @@
     wxStrcat(buf, buf2);
   }
   wxChar *tmp = ((wxStrlen(buf) > 0) ? buf : (wxChar *)NULL);
-  TexReferences.Put(name, new TexRef(name, file, tmp, sectionName));
+  TexReferences[name] = new TexRef(name, file, tmp, sectionName);
 }
 
 void WriteTexReferences(wxChar *filename)
@@ -395,12 +399,10 @@
 
     file.Clear();
 
-    TexReferences.BeginFind();
-    wxHashTable::Node *node = TexReferences.Next();
-    while (node)
+    for (TexReferenceMap::iterator iTexRef = TexReferences.begin(); iTexRef != TexReferences.end(); ++iTexRef)
     {
         Tex2RTFYield();
-        TexRef *ref = (TexRef *)node->GetData();
+        TexRef *ref = iTexRef->second;
         wxString converter = ref->refLabel;
         converter << wxT(" ");
         converter << (ref->refFile ? ref->refFile : _T("??"));
@@ -416,7 +418,6 @@
             wxSnprintf(buf, sizeof(buf), _T("Warning: reference %s not resolved."), ref->refLabel);
             OnInform(buf);
         }
-        node = TexReferences.Next();
     }
 
     file.Write();
@@ -448,17 +449,17 @@
         // strings it creates in the Put() function, but not the item that is
         // created here, as that is destroyed elsewhere.  Without doing this, there
         // were massive memory leaks
-        TexReferences.DeleteContents(true);
-        TexReferences.Put(
+        TexReferenceMap::iterator iTexRef = TexReferences.find(labelStr.c_str());
+        if (iTexRef != TexReferences.end())
+        {
+            delete iTexRef->second;
+        }
+
+        TexReferences[labelStr.c_str()] = new TexRef(
             labelStr.c_str(),
-            new TexRef(
-                labelStr.c_str(),
-                fileStr.c_str(),
-                sectionStr.c_str(),
-                sectionNameStr.c_str()
-            )
-        );
-        TexReferences.DeleteContents(false);
+            fileStr.c_str(),
+            sectionStr.c_str(),
+            sectionNameStr.c_str());
     }
 }
 
@@ -478,7 +479,11 @@
     }
 
     // Ignore end-of-line comments
+<<<<<<< .mine
+    if (!line.empty() && (line[0] == _T('%') || line[0] == _T(';') || line[0] == _T('#')))
+=======
     if ( !line.empty() && (line[0] == _T('%') || line[0] == _T(';') || line[0] == _T('#')))
+>>>>>>> .r47538
     {
         line.clear();
     }
@@ -883,7 +888,7 @@
           }
         }
       }
-      BibList.Append(recordKey, bibEntry);
+      BibList[recordKey] = bibEntry;
       BibEatWhiteSpace(istr);
     }
   }
@@ -1106,19 +1111,20 @@
     OnMacro(ltPAR, 0, false);
   }
 
-  wxStringListNode *node = CitationList.GetFirst();
-  while (node)
+  for (StringSet::iterator it = CitationList.begin(); it != CitationList.end(); ++it)
   {
-    wxChar *citeKey = (wxChar *)node->GetData();
-//    wxNode *texNode = TexReferences.Find(citeKey);
-    TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-    wxNode *bibNode = BibList.Find(citeKey);
-    if (bibNode && ref)
+    const wxString& citeKey = *it;
+    TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+    if (iTexRef != TexReferences.end())
     {
-      BibEntry *entry = (BibEntry *)bibNode->GetData();
-      OutputBibItem(ref, entry);
+      TexRef *ref = iTexRef->second;
+      BibMap::iterator bibNode = BibList.find(citeKey);
+      if (bibNode != BibList.end() && ref)
+      {
+        BibEntry *entry = bibNode->second;
+        OutputBibItem(ref, entry);
+      }
     }
-    node = node->GetNext();
   }
 }
 
@@ -1126,52 +1132,62 @@
 
 void ResolveBibReferences(void)
 {
-  if (CitationList.GetCount() > 0)
+  if (CitationList.size() > 0)
     OnInform(_T("Resolving bibliographic references..."));
 
   citeCount = 1;
   wxChar buf[200];
-  wxStringListNode *node = CitationList.GetFirst();
-  while (node)
+  for (StringSet::iterator it = CitationList.begin(); it != CitationList.end(); ++it)
   {
     Tex2RTFYield();
-    wxChar *citeKey = (wxChar *)node->GetData();
-//    wxNode *texNode = TexReferences.Find(citeKey);
-    TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-    wxNode *bibNode = BibList.Find(citeKey);
-    if (bibNode && ref)
+    const wxString& citeKey = *it;
+    TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+    if (iTexRef != TexReferences.end())
     {
-      // Unused Variable
-      //BibEntry *entry = (BibEntry *)bibNode->GetData();
-      if (ref->sectionNumber) delete[] ref->sectionNumber;
-      wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
-      ref->sectionNumber = copystring(buf);
-      citeCount ++;
+      TexRef *ref = iTexRef->second;
+      BibMap::iterator iBibNode = BibList.find(citeKey);
+      if (iBibNode != BibList.end() && ref)
+      {
+        // Unused Variable
+        //BibEntry *entry = (BibEntry *)bibNode->GetData();
+        if (ref->sectionNumber) delete[] ref->sectionNumber;
+        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+        ref->sectionNumber = copystring(buf);
+        citeCount ++;
+      }
+      else
+      {
+        wxSnprintf(buf, sizeof(buf), _T("Warning: bib ref %s not resolved."), citeKey.c_str());
+        OnInform(buf);
+      }
     }
-    else
-    {
-      wxSnprintf(buf, sizeof(buf), _T("Warning: bib ref %s not resolved."), citeKey);
-      OnInform(buf);
-    }
-    node = node->GetNext();
   }
 }
 
 // Remember we need to resolve this citation
 void AddCitation(wxChar *citeKey)
 {
-  if (!CitationList.Member(citeKey))
-    CitationList.Add(citeKey);
+  StringSet::iterator iCitation = CitationList.find(citeKey);
+  if (iCitation == CitationList.end())
+  {
+    CitationList.insert(citeKey);
+  }
 
-  if (!TexReferences.Get(citeKey))
+  TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+  if (iTexRef == TexReferences.end())
   {
-    TexReferences.Put(citeKey, new TexRef(citeKey, _T("??"), NULL));
+    TexReferences[citeKey] = new TexRef(citeKey, _T("??"), NULL);
   }
 }
 
 TexRef *FindReference(wxChar *key)
 {
-  return (TexRef *)TexReferences.Get(key);
+  TexReferenceMap::iterator iTexRef = TexReferences.find(key);
+  if (iTexRef != TexReferences.end())
+  {
+    return iTexRef->second;
+  }
+  return 0;
 }
 
 /*
@@ -1468,7 +1484,7 @@
     if(!input.Ok()) return false;
     wxTextInputStream ini( input );
 
-    CustomMacroList.Clear();
+    CustomMacroMap.clear();
 
     while (!input.Eof())
     {
@@ -1525,7 +1541,7 @@
                 macro->macroBody = copystring(macroBody.c_str());
 
             BibEatWhiteSpace(line);
-            CustomMacroList.Append(macroName.c_str(), macro);
+            CustomMacroMap[macroName] = macro;
             AddMacroDef(ltCUSTOM_MACRO, macroName.c_str(), noArgs);
         }
 
@@ -1538,10 +1554,11 @@
 
 CustomMacro *FindCustomMacro(wxChar *name)
 {
-  wxNode *node = CustomMacroList.Find(name);
-  if (node)
+  MacroMap::iterator it = CustomMacroMap.find(name);
+  if (it != CustomMacroMap.end())
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
+
     return macro;
   }
   return NULL;
@@ -1550,21 +1567,22 @@
 // Display custom macros
 void ShowCustomMacros(void)
 {
-  wxNode *node = CustomMacroList.GetFirst();
-  if (!node)
+  MacroMap::iterator it = CustomMacroMap.begin();
+  if (it == CustomMacroMap.end())
+
   {
     OnInform(_T("No custom macros loaded.\n"));
     return;
   }
 
   wxChar buf[400];
-  while (node)
+  while (it != CustomMacroMap.end())
   {
-    CustomMacro *macro = (CustomMacro *)node->GetData();
+    CustomMacro *macro = it->second;
     wxSnprintf(buf, sizeof(buf), _T("\\%s[%d]\n    {%s}"), macro->macroName, macro->noArgs,
      macro->macroBody ? macro->macroBody : _T(""));
     OnInform(buf);
-    node = node->GetNext();
+    ++it;
   }
 }
 
@@ -1631,33 +1649,31 @@
 
 void AddColour(const wxChar *theName, unsigned int r,  unsigned int g,  unsigned int b)
 {
-  wxNode *node = ColourTable.Find(theName);
-  if (node)
+  ColourTableMap::iterator it = ColourTable.find(theName);
+  if (it != ColourTable.end())
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (entry->red == r || entry->green == g || entry->blue == b)
       return;
     else
     {
       delete entry;
-      delete node;
+      ColourTable.erase(it);
     }
   }
   ColourTableEntry *entry = new ColourTableEntry(theName, r, g, b);
-  ColourTable.Append(theName, entry);
+  ColourTable[theName] = entry;
 }
 
 int FindColourPosition(wxChar *theName)
 {
   int i = 0;
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (wxStrcmp(theName, entry->name) == 0)
       return i;
     i ++;
-    node = node->GetNext();
   }
   return -1;
 }
@@ -1666,10 +1682,9 @@
 extern void DecToHex(int, wxChar *);
 bool FindColourHTMLString(wxChar *theName, wxChar *buf)
 {
-  wxNode *node = ColourTable.GetFirst();
-  while (node)
+  for (ColourTableMap::iterator it = ColourTable.begin(); it != ColourTable.end(); ++it)
   {
-    ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
+    ColourTableEntry *entry = it->second;
     if (wxStrcmp(theName, entry->name) == 0)
     {
         wxStrcpy(buf, _T("#"));
@@ -1684,7 +1699,6 @@
 
         return true;
     }
-    node = node->GetNext();
   }
   return false;
 }
@@ -1752,12 +1766,15 @@
   if (!texTopic)
   {
     texTopic = new TexTopic(filename);
-    texTopic->keywords = new wxStringList;
+    texTopic->keywords = new StringSet;
     TopicTable.Put(topic, texTopic);
   }
 
-  if (!texTopic->keywords->Member(entry))
-    texTopic->keywords->Add(entry);
+  StringSet::iterator iString = texTopic->keywords->find(entry);
+  if (iString != texTopic->keywords->end())
+  {
+    texTopic->keywords->insert(entry);
+  }
 }
 
 void ClearKeyWordTable(void)
Index: utils/tex2rtf/src/xlputils.cpp
===================================================================
--- utils/tex2rtf/src/xlputils.cpp	(revision 47538)
+++ utils/tex2rtf/src/xlputils.cpp	(working copy)
@@ -38,12 +38,14 @@
 static bool tableVerticalLineRight = false;
 static bool inTable = false;
 static int citeCount = 1;
-wxList hyperLinks(wxKEY_INTEGER);
-wxList hyperLabels(wxKEY_STRING);
+WX_DECLARE_HASH_MAP(int, wxChar*, wxIntegerHash, wxIntegerEqual, IntHashMap);
+IntHashMap hyperLinks;
+WX_DECLARE_STRING_HASH_MAP(long, StringLongMap);
+StringLongMap hyperLabels;
 FILE *Index = NULL;
 
 
-extern wxHashTable TexReferences;
+extern TexReferenceMap TexReferences;
 
 
 void PadToTab(int tabPos)
@@ -93,7 +95,7 @@
       wxFprintf(Chapters, _T("}\n\n"));
       SetCurrentOutput(Chapters);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
   }
@@ -132,7 +134,7 @@
       wxFprintf(Sections, _T("}\n\n"));
       SetCurrentOutput(Sections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
   }
@@ -161,7 +163,7 @@
       wxFprintf(Subsections, _T("}\n\n"));
       SetCurrentOutput(Subsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
   }
@@ -186,7 +188,7 @@
       wxFprintf(Subsubsections, _T("}\n\n"));
       SetCurrentOutput(Subsubsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
-      hyperLabels.Append(topicName, (wxObject *)currentBlockId);
+      hyperLabels[topicName] = currentBlockId;
     }
     break;
   }
@@ -345,21 +347,22 @@
     {
       indentLevel --;
 
-      if (itemizeStack.GetFirst())
+      wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+      if (iNode)
       {
-        ItemizeStruc *struc = (ItemizeStruc *)itemizeStack.GetFirst()->GetData();
+        ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
         delete struc;
-        delete itemizeStack.GetFirst();
+        itemizeStack.Erase(iNode);
       }
     }
     break;
   }
   case ltITEM:
   {
-    wxNode *node = itemizeStack.GetFirst();
-    if (node)
+    wxList::compatibility_iterator iNode = itemizeStack.GetFirst();
+    if (iNode)
     {
-      ItemizeStruc *struc = (ItemizeStruc *)node->GetData();
+      ItemizeStruc *struc = (ItemizeStruc *)iNode->GetData();
       if (!start)
       {
         struc->currentItem += 1;
@@ -692,7 +695,7 @@
       if (start)
       {
         wxChar *label = GetArgData();
-        hyperLinks.Append(currentBlockId, (wxObject *)copystring(label));
+        hyperLinks[currentBlockId] = copystring(label);
       }
 
       return false;
@@ -797,12 +800,16 @@
     if (arg_no == 1 && start)
     {
       wxChar *citeKey = GetArgData();
-      TexRef *ref = (TexRef *)TexReferences.Get(citeKey);
-      if (ref)
+      TexReferenceMap::iterator iTexRef = TexReferences.find(citeKey);
+      if (iTexRef != TexReferences.end())
       {
-        if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
-        ref->sectionNumber = copystring(buf);
+        TexRef *ref = iTexRef->second;
+        if (ref)
+        {
+          if (ref->sectionNumber) delete[] ref->sectionNumber;
+          wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+          ref->sectionNumber = copystring(buf);
+        }
       }
 
       wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{[%d]} "), hyBLOCK_BOLD, NewBlockId(), citeCount);
@@ -1161,18 +1168,16 @@
              contentsString ? contentsString : _T("WXHELPCONTENTS"));
     TraverseDocument();
 
-    wxNode *node = hyperLinks.GetFirst();
-    while (node)
+    for (IntHashMap::iterator iHyperLink = hyperLinks.begin(); iHyperLink != hyperLinks.end(); ++iHyperLink)
     {
-      long from = node->GetKeyInteger();
-      wxChar *label = (wxChar *)node->GetData();
-      wxNode *otherNode = hyperLabels.Find(label);
-      if (otherNode)
+      long from = iHyperLink->first;
+      wxChar *label = iHyperLink->second;
+      StringLongMap::iterator iOther = hyperLabels.find(label);
+      if (iOther != hyperLabels.end())
       {
-        long to = (long)otherNode->GetData();
+        long to = iOther->second;
         wxFprintf(Index, _T("%ld %ld\n"), from, to);
       }
-      node = node->GetNext();
     }
 
     wxFprintf(Index, _T("}\n"));

 	  	 

Index: src/unix/gsocket.cpp
===================================================================
--- src/unix/gsocket.cpp	(revision 49123)
+++ src/unix/gsocket.cpp	(working copy)
@@ -550,10 +550,17 @@
 void GSocket::Close()
 {
     gs_gui_functions->Disable_Events(this);
-    /* gsockosx.c calls CFSocketInvalidate which closes the socket for us */
-#if !(defined(__DARWIN__) && (defined(__WXMAC__) || defined(__WXCOCOA__)))
-    close(m_fd);
-#endif
+
+    /*  When running on OS X, the gsockosx implementation of GSocketGUIFunctionsTable
+        will close the socket during Disable_Events.  However, it will only do this
+        if it is being used.  That is, it won't do it in a console program.  To
+        ensure we get the right behavior, we have gsockosx set m_fd = INVALID_SOCKET
+        if it has closed the socket which indicates to us (at runtime, instead of
+        at compile time as this had been before) that the socket has already
+        been closed.
+     */
+    if(m_fd != INVALID_SOCKET)
+        close(m_fd);
     m_fd = INVALID_SOCKET;
 }
 
Index: src/mac/corefoundation/gsockosx.cpp
===================================================================
--- src/mac/corefoundation/gsockosx.cpp	(revision 49123)
+++ src/mac/corefoundation/gsockosx.cpp	(working copy)
@@ -206,6 +206,9 @@
     /* CFSocketInvalidate does CFRunLoopRemoveSource anyway */
     CFRunLoopRemoveSource(s_mainRunLoop, data->source, kCFRunLoopCommonModes);
     CFSocketInvalidate(data->socket);
+
+    // CFSocketInvalidate has closed the socket so we want to make sure GSocket knows this
+    socket->m_fd = -1 /*INVALID_SOCKET*/;
 }
 
 #endif // wxUSE_SOCKETS

 	  	 

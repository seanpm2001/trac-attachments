Index: demo/agw/LabelBook.py
===================================================================
--- demo/agw/LabelBook.py	(revision 64596)
+++ demo/agw/LabelBook.py	(working copy)
@@ -33,8 +33,8 @@
     """
     def __init__(self, parent, colour, label):
 
-        wx.Panel.__init__(self, parent, style=wx.BORDER_SUNKEN)
-        self.SetBackgroundColour(colour)
+        wx.Panel.__init__(self, parent, style=0)#wx.BORDER_SUNKEN)
+        self.SetBackgroundColour(wx.Colour(255,255,255))
 
         label = label + "\nEnjoy the LabelBook && FlatImageBook demo!"
         static = wx.StaticText(self, -1, label, pos=(10, 10))        
@@ -48,13 +48,15 @@
         wx.Frame.__init__(self, parent)
 
         self.initializing = True
+        self.book = None
+        self._oldTextSize = 1.0
 
         self.log = log
 
         self.splitter = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER|
                                           wx.SP_LIVE_UPDATE|wx.SP_3DSASH)
         self.mainpanel = wx.Panel(self.splitter, -1)
-        self.leftpanel = wx.Panel(self.splitter, -1, style=wx.SUNKEN_BORDER)
+        self.leftpanel = wx.Panel(self.splitter, -1, style=0)#wx.SUNKEN_BORDER)
 
         self.sizer_3_staticbox = wx.StaticBox(self.leftpanel, -1, "Book Styles")
         self.sizer_4_staticbox = wx.StaticBox(self.leftpanel, -1, "Colours")
@@ -76,12 +78,14 @@
         self.gradient = wx.CheckBox(self.leftpanel, -1, "Draw Gradient Shading")
         self.web = wx.CheckBox(self.leftpanel, -1, "Web Highlight")
         self.fittext = wx.CheckBox(self.leftpanel, -1, "Fit Label Text")
+        self.boldtext = wx.CheckBox(self.leftpanel, -1, "Bold Label Text")
+        self.textsize = wx.TextCtrl(self.leftpanel, -1, "1.0",style=wx.TE_PROCESS_ENTER)
         self.background = csel.ColourSelect(self.leftpanel, -1, "Choose...",
-                                            wx.Colour(127, 169, 241), size=(-1, 20))
+                                            wx.Colour(132, 164, 213), size=(-1, 20))
         self.activetab = csel.ColourSelect(self.leftpanel, -1, "Choose...",
-                                           wx.Colour(251, 250, 247), size=(-1, 20))
+                                           wx.Colour(255, 255, 255), size=(-1, 20))
         self.tabsborder = csel.ColourSelect(self.leftpanel, -1, "Choose...",
-                                            wx.Colour(172, 168, 153), size=(-1, 20))
+                                            wx.Colour(0, 0, 204), size=(-1, 20))
         self.textcolour = csel.ColourSelect(self.leftpanel, -1, "Choose...",
                                             wx.BLACK, size=(-1, 20))
         self.activetextcolour = csel.ColourSelect(self.leftpanel, -1, "Choose...",
@@ -104,6 +108,8 @@
         self.Bind(wx.EVT_CHECKBOX, self.OnStyle, self.gradient)
         self.Bind(wx.EVT_CHECKBOX, self.OnStyle, self.web)
         self.Bind(wx.EVT_CHECKBOX, self.OnStyle, self.fittext)
+        self.Bind(wx.EVT_CHECKBOX, self.OnStyle, self.boldtext)
+        self.Bind(wx.EVT_TEXT_ENTER,    self.OnStyle, self.textsize)
 
         self.Bind(csel.EVT_COLOURSELECT, self.OnBookColours, self.background)
         self.Bind(csel.EVT_COLOURSELECT, self.OnBookColours, self.activetab)
@@ -141,10 +147,13 @@
     def SetProperties(self):
 
         self.SetTitle("LabelBook & FlatImageBook wxPython Demo ;-)")
-        self.pin.SetValue(1)
         self.splitter.SetMinimumPaneSize(120)
+        self.pin.SetValue(0)
+        self.fittext.SetValue(1)
+        self.border.SetValue(1)
+        self.onlytext.SetValue(1)
+       
 
-
     def DoLayout(self):
 
         mainsizer = wx.BoxSizer(wx.VERTICAL)
@@ -169,8 +178,10 @@
         sizer_3.Add(self.gradient, 0, wx.LEFT|wx.BOTTOM, 3)
         sizer_3.Add(self.web, 0, wx.LEFT|wx.BOTTOM, 3)
         sizer_3.Add(self.fittext, 0, wx.LEFT|wx.BOTTOM, 3)
+        sizer_3.Add(self.boldtext, 0, wx.LEFT|wx.BOTTOM, 3)
         leftsizer.Add(sizer_3, 0, wx.ALL|wx.EXPAND, 5)
 
+        lbl = wx.StaticText(self.leftpanel, -1, "Text Font Multiple: ")
         label1 = wx.StaticText(self.leftpanel, -1, "Tab Area Background Colour: ")
         label2 = wx.StaticText(self.leftpanel, -1, "Active Tab Colour: ")
         label3 = wx.StaticText(self.leftpanel, -1, "Tabs Border Colour: ")
@@ -178,6 +189,8 @@
         label5 = wx.StaticText(self.leftpanel, -1, "Active Tab Text Colour: ")
         label6 = wx.StaticText(self.leftpanel, -1, "Tab Highlight Colour: ")
 
+        gridsizer.Add(lbl, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 3)
+        gridsizer.Add(self.textsize, 0)
         gridsizer.Add(label1, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 3)
         gridsizer.Add(self.background, 0)
         gridsizer.Add(label2, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 3)
@@ -231,6 +244,8 @@
                 self.bookdirection.SetSelection(0)
 
             self.SetUserColours()                
+            self.book.SetFontSizeMultiple(1.0)
+            self.book.SetFontBold(False)
 
         else:
             self.book = LB.FlatImageBook(self.mainpanel, -1, agwStyle=style)
@@ -252,15 +267,15 @@
             self.Thaw()
 
         self.SendSizeEvent()
-        wx.CallAfter(self.book.SetAGWWindowStyleFlag, style)
+        #wx.CallAfter(self.book.SetAGWWindowStyleFlag, style)
 
 
     def EnableChoices(self, btype):
 
         self.bookdirection.EnableItem(2, btype)
         self.bookdirection.EnableItem(3, btype)
-        self.onlyimages.Enable(btype)
-        self.onlytext.Enable(btype)
+        self.onlyimages.Enable()
+        self.onlytext.Enable()
         self.gradient.Enable(not btype)
         self.web.Enable(not btype)
         self.shadow.Enable(not btype)
@@ -271,6 +286,7 @@
         self.hilite.Enable(not btype)
         self.tabsborder.Enable(not btype)
         self.fittext.Enable(not btype)
+        self.boldtext.Enable(not btype)
 
 
     def GetBookStyles(self):
@@ -294,6 +310,9 @@
             style |= INB_BORDER
         if self.fittext.IsEnabled() and self.fittext.GetValue():
             style |= INB_FIT_LABELTEXT
+           
+        if self.book: 
+            self.book.SetFontBold(self.boldtext.GetValue())
 
         return style
 
@@ -342,6 +361,11 @@
 
         style = self.GetBookStyles()
         self.book.SetAGWWindowStyleFlag(style)
+       
+        self.book.SetFontSizeMultiple(float(self.textsize.GetValue()))
+        if self.textsize.GetValue() != self._oldTextSize:
+            self.book.ResizeTabArea()
+        self._oldTextSize = self.textsize.GetValue()
 
         event.Skip()
 
Index: wx/lib/agw/labelbook.py
===================================================================
--- wx/lib/agw/labelbook.py	(revision 65085)
+++ wx/lib/agw/labelbook.py	(working copy)
@@ -21,7 +21,14 @@
 #
 # Or, Obviously, To The wxPython Mailing List!!!
 #
+# TODO:
+# LabelBook - Support IMB_SHOW_ONLY_IMAGES
+# LabelBook - An option for the draw border to only draw the border 
+#             between the controls and the pages so the background
+#             colour can flow into the window background
 #
+#
+#
 # End Of Comments
 # --------------------------------------------------------------------------- #
 
@@ -1431,6 +1438,8 @@
 
         :param `event`: a `wx.PaintEvent` event to be processed.
         """
+        
+        style = self.GetParent().GetAGWWindowStyleFlag()
 
         dc = wx.BufferedPaintDC(self)
         backBrush = wx.Brush(self._coloursMap[INB_TAB_AREA_BACKGROUND_COLOUR])
@@ -1444,6 +1453,14 @@
         # Set the pen & brush
         dc.SetBrush(backBrush)
         dc.SetPen(borderPen)
+        
+        # Incase user set both flags, we override them to display both
+        # INB_SHOW_ONLY_TEXT and INB_SHOW_ONLY_IMAGES
+        if style & INB_SHOW_ONLY_TEXT and style & INB_SHOW_ONLY_IMAGES:
+        
+            style ^= INB_SHOW_ONLY_TEXT
+            style ^= INB_SHOW_ONLY_IMAGES
+            self.GetParent().SetAGWWindowStyleFlag(style)
 
         if self.HasAGWFlag(INB_GRADIENT_BACKGROUND) and not self._skin.Ok():
         
@@ -1494,7 +1511,17 @@
             # Default values for the surronounding rectangle 
             # around a button
             rectWidth = self._nTabAreaWidth  
-            rectHeight = self._nImgSize * 2
+            
+            if self.HasAGWFlag(INB_SHOW_ONLY_TEXT):
+                font = wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT)
+                font.SetPointSize(font.GetPointSize() * self.GetParent().GetFontSizeMultiple())
+                if self.GetParent().GetFontBold():
+                    font.SetWeight(wx.FONTWEIGHT_BOLD)
+                dc.SetFont(font)
+                w, h = dc.GetTextExtent(self._pagesInfoVec[i].GetCaption())
+                rectHeight = h * 2
+            else:
+                rectHeight = self._nImgSize * 2
 
             # Check that we have enough space to draw the button
             if posy + rectHeight > size.GetHeight():
@@ -1798,6 +1825,9 @@
 
         # Redraw the text with underlined font
         underLinedFont = wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT)
+        underLinedFont.SetPointSize(underLinedFont.GetPointSize() * self.GetParent().GetFontSizeMultiple())
+        if self.GetParent().GetFontBold():
+            underLinedFont.SetWeight(wx.FONTWEIGHT_BOLD)
         underLinedFont.SetUnderlined(True)
         dc.SetFont(underLinedFont)
         dc.DrawText(caption, xCoord, yCoord)
@@ -1890,7 +1920,11 @@
         textRect = wx.Rect(*rect)
         imgRect = wx.Rect(*rect)
         
-        dc.SetFont(wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT))
+        font = wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT)
+        font.SetPointSize(font.GetPointSize() * self.GetParent().GetFontSizeMultiple())
+        if self.GetParent().GetFontBold():
+            font.SetWeight(wx.FONTWEIGHT_BOLD)
+        dc.SetFont(font)
 
         # First we define the rectangle for the text
         w, h = dc.GetTextExtent(text)
@@ -1905,7 +1939,7 @@
         textRect.y = rect.y + (rect.height - h)/2
         textRect.width = rect.width - 2 * nPadding
 
-        if bmp.Ok():
+        if bmp.Ok() and not self.HasAGWFlag(INB_SHOW_ONLY_TEXT):
             textRect.x += (bmp.GetWidth() + nPadding)
             textRect.width -= (bmp.GetWidth() + nPadding)
         
@@ -1915,7 +1949,7 @@
         caption = ArtManager.Get().TruncateText(dc, text, textRect.width)
 
         # Image bounding rectangle
-        if bmp.Ok():
+        if bmp.Ok() and not self.HasAGWFlag(INB_SHOW_ONLY_TEXT):
         
             imgRect.x += nPadding
             imgRect.width = bmp.GetWidth()
@@ -1962,7 +1996,7 @@
         
             imgInfo.SetTextRect(wx.Rect())
         
-        if bmp.Ok():
+        if bmp.Ok() and not self.HasAGWFlag(INB_SHOW_ONLY_TEXT):
             dc.DrawBitmap(bmp, imgRect.x, imgRect.y, True)
 
         # Drop shadow
@@ -2047,6 +2081,8 @@
         self._pages = None
         self._bForceSelection = False
         self._windows = []
+        self._fontSizeMultiple = 1.0
+        self._fontBold = False
 
         style |= wx.TAB_TRAVERSAL
         self._agwStyle = agwStyle
@@ -2294,15 +2330,23 @@
         if agwStyle & INB_LEFT or agwStyle & INB_RIGHT:
             dc = wx.MemoryDC()
             dc.SelectObject(wx.EmptyBitmap(1, 1))
-            dc.SetFont(self.GetFont())
+            font = wx.SystemSettings_GetFont(wx.SYS_DEFAULT_GUI_FONT)
+            font.SetPointSize(font.GetPointSize()*self._fontSizeMultiple)
+            if self.GetFontBold():
+                font.SetWeight(wx.FONTWEIGHT_BOLD)
+            dc.SetFont(font)
             maxW = 0
             
             for page in xrange(self.GetPageCount()):
                 caption = self._pages.GetPageText(page)
                 w, h = dc.GetTextExtent(caption)
                 maxW = max(maxW, w)
+               
+            maxW += 24 #TODO this is 6*4 6 is nPadding from drawlabel
 
-            maxW += self._pages._nImgSize * 2
+            if not agwStyle & INB_SHOW_ONLY_TEXT:
+                maxW += self._pages._nImgSize * 2
+                
             maxW = max(maxW, 100)
             self._pages.SetSizeHints(maxW, -1)
             self._pages._nTabAreaWidth = maxW
@@ -2435,6 +2479,38 @@
 
         return len(self._windows)
     
+    
+    def GetFontBold(self):
+        """ Gets the font bold status """
+        
+        return self._fontBold
+    
+    
+    def SetFontBold(self, bold):
+        """ 
+        Sets whether the page captions are bold or not.
+        
+        :param `bold`: True or False
+        """
+        
+        self._fontBold = bold
+   
+    
+    def GetFontSizeMultiple(self):
+        """ Gets the font size multiple for the page captions. """
+        
+        return self._fontSizeMultiple
+   
+    
+    def SetFontSizeMultiple(self, multiple):
+        """ 
+        Sets the font size multiple for the page captions. 
+        
+        :param `multiple`: The multiple to be applied to the system font to get the our font size
+        """
+        
+        self._fontSizeMultiple = multiple
+    
 
     def SetPageImage(self, page, imageId):
         """
@@ -2632,8 +2708,8 @@
         """
 
         return self._pages.GetColour(which)
-
-
+    
+    
     def OnSize(self, event):
         """
         Handles the ``wx.EVT_SIZE`` event for L{LabelBook}.

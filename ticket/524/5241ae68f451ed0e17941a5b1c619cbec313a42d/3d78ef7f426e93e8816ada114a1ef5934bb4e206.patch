--- wxWidgets.orig/tests/streams/textstreamtest.cpp
+++ wxWidgets/tests/streams/textstreamtest.cpp
@@ -1,10 +1,10 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Name:        tests/uris/uris.cpp
 // Purpose:     wxTextXXXStream unit test
-// Author:      Ryan Norton
+// Author:      Ryan Norton, Vince Harron
 // Created:     2004-08-14
 // RCS-ID:      $Id: textstreamtest.cpp,v 1.3 2006/02/11 16:51:34 VZ Exp $
-// Copyright:   (c) 2004 Ryan Norton
+// Copyright:   (c) 2004 Ryan Norton, (c) 2006 Vince Harron
 ///////////////////////////////////////////////////////////////////////////////
 
 // ----------------------------------------------------------------------------
@@ -39,6 +39,13 @@
 
 private:
     CPPUNIT_TEST_SUITE( TextStreamTestCase );
+#if wxUSE_UNICODE
+       CPPUNIT_TEST( TestUTF8Input );
+        CPPUNIT_TEST( TestEmbeddedZerosUTF16LEInput );
+        CPPUNIT_TEST( TestEmbeddedZerosUTF16BEInput );
+        CPPUNIT_TEST( TestEmbeddedZerosUTF32LEInput );
+        CPPUNIT_TEST( TestEmbeddedZerosUTF32BEInput );
+#endif
         CPPUNIT_TEST( Endline );
 #if wxUSE_LONGLONG
         CPPUNIT_TEST( TestLongLong );
@@ -52,6 +59,13 @@
     void TestULongLong();
 #endif // wxUSE_LONGLONG
 
+    void TestUTF8Input();
+    void TestEmbeddedZerosUTF16LEInput();
+    void TestEmbeddedZerosUTF16BEInput();
+    void TestEmbeddedZerosUTF32LEInput();
+    void TestEmbeddedZerosUTF32BEInput();
+    void TestInput( wxFontEncoding encoding, const void* encodedText, size_t encodedSize );
+
 
     DECLARE_NO_COPY_CLASS(TextStreamTestCase)
 };
@@ -158,3 +172,82 @@
 
 #endif // wxUSE_LONGLONG
 
+const static wchar_t embedded_zeros_wchar_t[4] = { 
+    0x0041, // LATIN CAPITAL LETTER A
+    0x0100, // A WITH BREVE, LATIN SMALL LETTER
+    0x0041, // LATIN CAPITAL LETTER A
+    0x0100, // A WITH BREVE, LATIN SMALL LETTER
+    };
+
+const static unsigned char embedded_zeros_utf8[6] = 
+{
+    0x41, 0xc4, 0x80, 0x41, 0xc4, 0x80,
+};
+
+const static unsigned char embedded_zeros_utf16le[8] = 
+{
+    0x41, 0x00, 0x00, 0x01, 0x41, 0x00, 0x00, 0x01,
+};
+
+const static unsigned char embedded_zeros_utf16be[8] = 
+{
+    0x00, 0x41, 0x01, 0x00, 0x00, 0x41, 0x01, 0x00,
+};
+
+const static unsigned char embedded_zeros_utf32le[16] = 
+{
+    0x41, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+};
+
+const static unsigned char embedded_zeros_utf32be[16] = 
+{
+    0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x01, 0x00,
+};
+
+#if wxUSE_UNICODE
+
+#include <wx/strconv.h>
+#include <wx/mstream.h>
+
+void TextStreamTestCase::TestUTF8Input()
+{
+    TestInput( wxFONTENCODING_UTF8, embedded_zeros_utf8, sizeof(embedded_zeros_utf8) );
+}
+
+void TextStreamTestCase::TestEmbeddedZerosUTF16LEInput()
+{
+    TestInput( wxFONTENCODING_UTF16LE, embedded_zeros_utf16le, sizeof(embedded_zeros_utf16le) );
+}
+
+void TextStreamTestCase::TestEmbeddedZerosUTF16BEInput()
+{
+    TestInput( wxFONTENCODING_UTF16BE, embedded_zeros_utf16be, sizeof(embedded_zeros_utf16be) );
+}
+
+void TextStreamTestCase::TestEmbeddedZerosUTF32LEInput()
+{
+    TestInput( wxFONTENCODING_UTF32LE, embedded_zeros_utf32le, sizeof(embedded_zeros_utf32le) );
+}
+
+void TextStreamTestCase::TestEmbeddedZerosUTF32BEInput()
+{
+    TestInput( wxFONTENCODING_UTF32BE, embedded_zeros_utf32be, sizeof(embedded_zeros_utf32be) );
+}
+
+void TextStreamTestCase::TestInput( wxFontEncoding encoding, const void* encodedText, size_t encodedSize )
+{
+    wxCSConv conv( encoding );
+    wxMemoryInputStream byteIn( encodedText, encodedSize );
+    wxTextInputStream textIn(byteIn,wxT("\n"),conv);
+
+    wxString temp;
+    while ( wxChar c = textIn.GetChar() )
+    {
+        temp.Append(c);
+    }
+
+    CPPUNIT_ASSERT( sizeof(embedded_zeros_wchar_t) == temp.Len() * sizeof(wxChar) );
+    CPPUNIT_ASSERT( 0 == memcmp( embedded_zeros_wchar_t, temp.c_str(), sizeof(embedded_zeros_wchar_t) ) );
+}
+
+#endif

 	  	 

Index: src/msw/combo.cpp
===================================================================
--- src/msw/combo.cpp	(revisión: 72944)
+++ src/msw/combo.cpp	(copia de trabajo)
@@ -221,6 +221,13 @@
 {
 }
 
+wxSize wxComboCtrl::DoGetBestSize() const
+{
+    wxSize best( wxComboCtrlBase::DoGetBestSize() );
+
+    return GetSizeFromTextSize(best.x);
+}
+
 void wxComboCtrl::OnResize()
 {
     //
Index: src/generic/combog.cpp
===================================================================
--- src/generic/combog.cpp	(revisión: 72944)
+++ src/generic/combog.cpp	(copia de trabajo)
@@ -211,6 +211,13 @@
 {
 }
 
+wxSize wxGenericComboCtrl::DoGetBestSize() const
+{
+    wxSize best( wxComboCtrlBase::DoGetBestSize() );
+
+    return GetSizeFromTextSize(best.x);
+}
+
 void wxGenericComboCtrl::OnResize()
 {
 
@@ -259,7 +266,7 @@
         wxPen pen1( wxColour(133,133,133),
                     customBorder,
                     wxSOLID );
-#else        
+#else
         wxPen pen1( wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT),
                     customBorder,
                     wxPENSTYLE_SOLID);
Index: src/generic/odcombo.cpp
===================================================================
--- src/generic/odcombo.cpp	(revisión: 72944)
+++ src/generic/odcombo.cpp	(copia de trabajo)
@@ -725,6 +725,8 @@
         // wxWindow::GetTextExtent (assuming same dc is used
         // for all calls, as we do here).
         wxClientDC dc(m_combo);
+        if ( !m_useFont.IsOk() )
+            m_useFont = m_combo->GetFont();
         dc.SetFont(m_useFont);
 
         for ( i=0; i<n; i++ )
@@ -1171,6 +1173,22 @@
     return -1;
 }
 
+wxSize wxOwnerDrawnComboBox::DoGetBestSize() const
+{
+    wxSize best( wxComboCtrlBase::DoGetBestSize() );
+
+    if ( GetCount() > 0 )
+    {
+        wxOwnerDrawnComboBox* odc = const_cast<wxOwnerDrawnComboBox*>(this);
+        best.x = odc->GetWidestItemWidth();
+        // TODO: this class may also have GetHightestItemHeight() and
+        // GetHightestItem() methods, and so set the whole (edit part + arrow)
+        // control's height according with this max height, not only max width.
+    }
+
+    return GetSizeFromTextSize(best.x);
+}
+
 void wxOwnerDrawnComboBox::OnDrawBackground(wxDC& dc,
                                             const wxRect& rect,
                                             int WXUNUSED(item),
Index: src/common/combocmn.cpp
===================================================================
--- src/common/combocmn.cpp	(revisión: 72944)
+++ src/common/combocmn.cpp	(copia de trabajo)
@@ -1359,20 +1359,36 @@
 
 wxSize wxComboCtrlBase::DoGetBestSize() const
 {
-    wxSize sizeText(150,0);
+    // a reasonable width for an empty choice list
+    wxSize best(80, -1);
 
     if ( m_text )
-        sizeText = m_text->GetBestSize();
+        best = m_text->GetBestSize();
 
-    // TODO: Better method to calculate close-to-native control height.
+    return best;
+}
 
+wxSize wxComboCtrlBase::DoGetSizeFromTextSize(int xlen, int ylen) const
+{
+    // Calculate close-to-native control height
+
     int fhei;
+
+#if wxUSE_COMBOBOX && (defined(__WXMSW__) || defined(__WXGTK__)) && !defined(__WXUNIVERSAL__)
+    wxComboBox* cb = new wxComboBox(const_cast<wxComboCtrlBase*>(this), wxID_ANY);
+    wxFont font;
+    font = m_font.IsOk() ? m_font : *wxNORMAL_FONT;
+    cb->SetFont(font);
+    fhei = cb->GetBestSize().y;
+    cb->Destroy();
+#else
     if ( m_font.IsOk() )
         fhei = (m_font.GetPointSize()*2) + 5;
     else if ( wxNORMAL_FONT->IsOk() )
         fhei = (wxNORMAL_FONT->GetPointSize()*2) + 5;
     else
-        fhei = sizeText.y + 4;
+        fhei = 22;
+#endif // only for wxComboBox on MSW or GTK
 
     // Need to force height to accommodate bitmap?
     int btnSizeY = m_btnSize.y;
@@ -1392,11 +1408,6 @@
         fhei += 4;
 */
 
-    // Final adjustments
-#ifdef __WXGTK__
-    fhei += 1;
-#endif
-
 #ifdef __WXMAC__
     // these are the numbers from the HIG:
     switch ( m_windowVariant )
@@ -1415,11 +1426,19 @@
 #endif
 
     fhei += 2 * FOCUS_RING;
-    int width = sizeText.x + FOCUS_RING + COMBO_MARGIN + DEFAULT_DROPBUTTON_WIDTH;
 
-    wxSize ret(width, fhei);
-    CacheBestSize(ret);
-    return ret;
+    // Calculate width
+    int fwid = xlen + FOCUS_RING + COMBO_MARGIN + DEFAULT_DROPBUTTON_WIDTH;
+
+    // Add the margins we have previously set
+    wxPoint marg( GetMargins() );
+    fwid += wxMax(0, marg.x);
+    fhei += wxMax(0, marg.y);
+
+    if ( ylen > 0 )
+        fhei += ylen - GetCharHeight();
+
+    return wxSize(fwid, fhei);
 }
 
 void wxComboCtrlBase::OnSizeEvent( wxSizeEvent& event )
@@ -2033,7 +2052,7 @@
 
 void wxComboCtrlBase::OnFocusEvent( wxFocusEvent& event )
 {
-// On Mac, this leads to infinite recursion and eventually a crash 
+// On Mac, this leads to infinite recursion and eventually a crash
 #ifndef __WXMAC__
     if ( event.GetEventType() == wxEVT_SET_FOCUS )
     {
Index: include/wx/combo.h
===================================================================
--- include/wx/combo.h	(revisión: 72944)
+++ include/wx/combo.h	(copia de trabajo)
@@ -541,7 +541,10 @@
     void DestroyPopup();
 
     // override the base class virtuals involved in geometry calculations
+    // The common version only sets a default width, so the derived classes
+    // should override it and set the height and change the width as needed.
     virtual wxSize DoGetBestSize() const;
+    virtual wxSize DoGetSizeFromTextSize(int xlen, int ylen = -1) const;
 
     // also set the embedded wxTextCtrl colours
     virtual bool SetForegroundColour(const wxColour& colour);
Index: include/wx/odcombo.h
===================================================================
--- include/wx/odcombo.h	(revisión: 72944)
+++ include/wx/odcombo.h	(copia de trabajo)
@@ -355,6 +355,10 @@
     // Callback for item width, or -1 for default/undetermined
     virtual wxCoord OnMeasureItemWidth( size_t item ) const;
 
+    // override base implementation so we can return the size for the
+    // largest item
+    virtual wxSize DoGetBestSize() const;
+
     // Callback for background drawing. Flags are same as with
     // OnDrawItem.
     virtual void OnDrawBackground( wxDC& dc, const wxRect& rect, int item, int flags ) const;
Index: include/wx/generic/combo.h
===================================================================
--- include/wx/generic/combo.h	(revisión: 72944)
+++ include/wx/generic/combo.h	(copia de trabajo)
@@ -113,6 +113,9 @@
         #endif
     }
 
+    // override base implementation so we can return a valid height
+    virtual wxSize DoGetBestSize() const;
+
     // Mandatory virtuals
     virtual void OnResize();
 
Index: include/wx/msw/combo.h
===================================================================
--- include/wx/msw/combo.h	(revisión: 72944)
+++ include/wx/msw/combo.h	(copia de trabajo)
@@ -87,6 +87,8 @@
     virtual WXHWND GetEditHWND() const { return NULL; }
 
     // customization
+    // override base implementation so we can return a valid height
+    virtual wxSize DoGetBestSize() const;
     virtual void OnResize();
     virtual wxCoord GetNativeTextIndent() const;
 

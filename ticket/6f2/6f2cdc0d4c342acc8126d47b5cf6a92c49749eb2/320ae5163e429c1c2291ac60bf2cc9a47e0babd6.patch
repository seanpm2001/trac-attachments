Index: include/wx/bitmap.h
===================================================================
--- include/wx/bitmap.h	(revision 56123)
+++ include/wx/bitmap.h	(working copy)
@@ -170,6 +170,9 @@
 
     virtual wxBitmap GetSubBitmap(const wxRect& rect) const = 0;
 
+    // Convert to disabled (dimmed) bitmap.
+    wxBitmap ConvertToDisabled(unsigned char brightness = 255);
+
     virtual bool SaveFile(const wxString &name, wxBitmapType type,
                           const wxPalette *palette = (wxPalette *)NULL) const = 0;
     virtual bool LoadFile(const wxString &name, wxBitmapType type) = 0;
Index: include/wx/colour.h
===================================================================
--- include/wx/colour.h	(revision 56123)
+++ include/wx/colour.h	(working copy)
@@ -127,6 +127,19 @@
     bool Ok() const { return IsOk(); }
 #endif
 
+    // manipulation
+    // ------------
+    
+    // These methods are static because they're mostly used
+    // within loops, where we don't want to instantiate wxColour
+
+    static unsigned char MakeMono    (unsigned char* r, unsigned char* g, unsigned char* b, bool on);
+    static void          MakeDisabled(unsigned char* r, unsigned char* g, unsigned char* b, unsigned char brightness = 255);
+    static unsigned char MakeGrey    (unsigned char* r, unsigned char* g, unsigned char* b, 
+                                      double lr = 0.299, double lg = 0.587, double lb = 0.114);
+    static unsigned char BlendColour (unsigned char fg, unsigned char bg, double alpha);
+    static void          StepColour  (unsigned char* r, unsigned char* g, unsigned char* b, int ialpha);
+
     // old, deprecated
     // ---------------
 
Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 56123)
+++ include/wx/image.h	(working copy)
@@ -297,6 +297,9 @@
     // everything else by black)
     wxImage ConvertToMono( unsigned char r, unsigned char g, unsigned char b ) const;
 
+    // Convert to disabled (dimmed) image.
+    wxImage ConvertToDisabled(unsigned char brightness = 255) const;
+
     // these routines are slow but safe
     void SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b );
     void SetRGB( const wxRect& rect, unsigned char r, unsigned char g, unsigned char b );
Index: include/wx/msw/bitmap.h
===================================================================
--- include/wx/msw/bitmap.h	(revision 56123)
+++ include/wx/msw/bitmap.h	(working copy)
@@ -116,6 +116,8 @@
     wxImage ConvertToImage() const;
 #endif // wxUSE_IMAGE
 
+    wxBitmap ConvertToDisabled(unsigned char brightness = 255) const;
+
     // get the given part of bitmap
     wxBitmap GetSubBitmap( const wxRect& rect ) const;
 
Index: include/wx/msw/icon.h
===================================================================
--- include/wx/msw/icon.h	(revision 56123)
+++ include/wx/msw/icon.h	(working copy)
@@ -76,6 +76,9 @@
     // ctors, assignment operators...), but it's ok to have such function
     void CopyFromBitmap(const wxBitmap& bmp);
 
+    // Convert to disabled (dimmed) icon.
+    wxIcon ConvertToDisabled(unsigned char brightness = 255) const;
+
 protected:
     virtual wxGDIImageRefData *CreateData() const
     {
Index: interface/wx/bitmap.h
===================================================================
--- interface/wx/bitmap.h	(revision 56123)
+++ interface/wx/bitmap.h	(working copy)
@@ -461,6 +461,12 @@
     virtual wxBitmap GetSubBitmap(const wxRect& rect) const;
 
     /**
+        Returns disabled (dimmed) version of the bitmap.
+        @since 2.9.0
+    */
+    wxBitmap ConvertToDisabled(unsigned char brightness = 255) const;
+
+    /**
         Gets the width of the bitmap in pixels.
 
         @see GetHeight()
Index: interface/wx/colour.h
===================================================================
--- interface/wx/colour.h	(revision 56123)
+++ interface/wx/colour.h	(working copy)
@@ -179,6 +179,40 @@
         colours and alpha values.
     */
     bool operator ==(const wxColour& colour) const;
+
+    /**
+        Assign 0 or 255 to rgb out parameters.
+        @since 2.9.0
+    */
+    static unsigned char MakeMono(unsigned char* r, unsigned char* g, unsigned char* b, bool on);
+    
+    /**
+        Create a disabled (dimmed) colour from (in/out) rgb parameters.
+        @since 2.9.0
+    */
+    static void MakeDisabled(unsigned char* r, unsigned char* g, unsigned char* b, unsigned char brightness = 255);
+    
+    /**
+        Create a grey colour from (in/out) rgb parameters.
+        @since 2.9.0
+    */
+    static unsigned char MakeGrey(unsigned char* r, unsigned char* g, unsigned char* b, 
+                                  double lr = 0.299, double lg = 0.587, double lb = 0.114);
+    
+    /**
+        Blend colour, taking alpha into account.
+        @since 2.9.0
+    */
+    static unsigned char BlendColour(unsigned char fg, unsigned char bg, double alpha);
+    
+    /**
+        StepColour() is a utility function that simply darkens
+        or lightens a color, based on the specified percentage
+        ialpha of 0 would be completely black, 100 completely white
+        an ialpha of 100 returns the same colour
+        @since 2.9.0
+    */
+    static void StepColour(unsigned char* r, unsigned char* g, unsigned char* b, int ialpha);
 };
 
 
Index: interface/wx/icon.h
===================================================================
--- interface/wx/icon.h	(revision 56123)
+++ interface/wx/icon.h	(working copy)
@@ -183,6 +183,12 @@
     virtual ~wxIcon();
 
     /**
+        Returns disabled (dimmed) version of the icon. MSW only.
+        @since 2.9.0
+    */
+    wxIcon ConvertToDisabled(unsigned char brightness = 255) const;
+
+    /**
         Copies @a bmp bitmap to this icon.
         Under MS Windows the bitmap must have mask colour set.
 
Index: interface/wx/image.h
===================================================================
--- interface/wx/image.h	(revision 56123)
+++ interface/wx/image.h	(working copy)
@@ -400,6 +400,12 @@
                           unsigned char b) const;
 
     /**
+        Returns disabled (dimmed) version of the image.
+        @since 2.9.0
+    */
+    wxImage ConvertToDisabled(unsigned char brightness = 255) const;
+
+    /**
         Returns an identical copy of the image.
     */
     wxImage Copy() const;
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 56123)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -799,6 +799,7 @@
     tb2->AddTool(ID_SampleItem+13, wxT("Test"), tb2_bmp1);
     tb2->AddTool(ID_SampleItem+14, wxT("Test"), tb2_bmp1);
     tb2->AddTool(ID_SampleItem+15, wxT("Test"), tb2_bmp1);
+    tb2->EnableTool(ID_SampleItem+15, false);
     tb2->SetCustomOverflowItems(prepend_items, append_items);
     tb2->Realize();
 
@@ -814,6 +815,7 @@
     tb3->AddSeparator();
     tb3->AddTool(ID_SampleItem+20, wxT("Test"), tb3_bmp1);
     tb3->AddTool(ID_SampleItem+21, wxT("Test"), tb3_bmp1);
+    tb3->EnableTool(ID_SampleItem+21, false);
     tb3->SetCustomOverflowItems(prepend_items, append_items);
     tb3->Realize();
 
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 56123)
+++ src/aui/auibar.cpp	(working copy)
@@ -71,43 +71,18 @@
 wxBitmap wxAuiBitmapFromBits(const unsigned char bits[], int w, int h,
                              const wxColour& color);
 
-unsigned char wxAuiBlendColour(unsigned char fg, unsigned char bg, double alpha);
-wxColor wxAuiStepColour(const wxColor& c, int percent);
-
-static wxBitmap MakeDisabledBitmap(wxBitmap& bmp)
+inline unsigned char wxAuiBlendColour(unsigned char fg, unsigned char bg, double alpha)
 {
-    wxImage image = bmp.ConvertToImage();
-
-    int mr, mg, mb;
-    mr = image.GetMaskRed();
-    mg = image.GetMaskGreen();
-    mb = image.GetMaskBlue();
-
-    unsigned char* data = image.GetData();
-    int width = image.GetWidth();
-    int height = image.GetHeight();
-    bool has_mask = image.HasMask();
-
-    for (int y = height-1; y >= 0; --y)
-    {
-        for (int x = width-1; x >= 0; --x)
-        {
-            data = image.GetData() + (y*(width*3))+(x*3);
-            unsigned char* r = data;
-            unsigned char* g = data+1;
-            unsigned char* b = data+2;
-
-            if (has_mask && *r == mr && *g == mg && *b == mb)
-                continue;
-
-            *r = wxAuiBlendColour(*r, 255, 0.4);
-            *g = wxAuiBlendColour(*g, 255, 0.4);
-            *b = wxAuiBlendColour(*b, 255, 0.4);
-        }
-    }
-
-    return wxBitmap(image);
+    return wxColour::BlendColour(fg, bg, alpha);
 }
+inline wxColour wxAuiStepColour(const wxColour& c, int percent)
+{
+    unsigned char r = c.Red();
+    unsigned char g = c.Green();
+    unsigned char b = c.Blue();
+    wxColour::StepColour(&r, &g, &b, percent);
+    return wxColour(r,g,b);
+}
 
 static wxColor GetBaseColor()
 {
@@ -940,7 +915,7 @@
             //wxImage img = item.bitmap.ConvertToImage();
             //wxImage grey_version = img.ConvertToGreyscale();
             //item.disabled_bitmap = wxBitmap(grey_version);
-            item.disabled_bitmap = MakeDisabledBitmap(item.bitmap);
+            item.disabled_bitmap = item.bitmap.ConvertToDisabled();
         }
     }
     m_items.Add(item);
@@ -2632,4 +2607,3 @@
 
 
 #endif // wxUSE_AUI
-
Index: src/aui/dockart.cpp
===================================================================
--- src/aui/dockart.cpp	(revision 56123)
+++ src/aui/dockart.cpp	(working copy)
@@ -57,60 +57,15 @@
 // from the wxAuiDockArt base class). The active dock art class can be set via
 // wxAuiManager::SetDockArt()
 
-
-// wxAuiBlendColour is used by wxAuiStepColour
-unsigned char wxAuiBlendColour(unsigned char fg, unsigned char bg, double alpha)
+inline wxColour wxAuiStepColour(const wxColour& c, int percent)
 {
-    double result = bg + (alpha * (fg - bg));
-    if (result < 0.0)
-        result = 0.0;
-    if (result > 255)
-        result = 255;
-    return (unsigned char)result;
+    unsigned char r = c.Red();
+    unsigned char g = c.Green();
+    unsigned char b = c.Blue();
+    wxColour::StepColour(&r, &g, &b, percent);
+    return wxColour(r,g,b);
 }
 
-// wxAuiStepColour() it a utility function that simply darkens
-// or lightens a color, based on the specified percentage
-// ialpha of 0 would be completely black, 100 completely white
-// an ialpha of 100 returns the same colour
-wxColor wxAuiStepColour(const wxColor& c, int ialpha)
-{
-    if (ialpha == 100)
-        return c;
-
-    unsigned char r = c.Red(),
-                  g = c.Green(),
-                  b = c.Blue();
-    unsigned char bg;
-
-    // ialpha is 0..200 where 0 is completely black
-    // and 200 is completely white and 100 is the same
-    // convert that to normal alpha 0.0 - 1.0
-    ialpha = wxMin(ialpha, 200);
-    ialpha = wxMax(ialpha, 0);
-    double alpha = ((double)(ialpha - 100.0))/100.0;
-
-    if (ialpha > 100)
-    {
-        // blend with white
-        bg = 255;
-        alpha = 1.0 - alpha;  // 0 = transparent fg; 1 = opaque fg
-    }
-    else
-    {
-        // blend with black
-        bg = 0;
-        alpha = 1.0 + alpha;  // 0 = transparent fg; 1 = opaque fg
-    }
-
-    r = wxAuiBlendColour(r, bg, alpha);
-    g = wxAuiBlendColour(g, bg, alpha);
-    b = wxAuiBlendColour(b, bg, alpha);
-
-    return wxColour(r, g, b);
-}
-
-
 wxColor wxAuiLightContrastColour(const wxColour& c)
 {
     int amount = 120;
Index: src/common/bmpbase.cpp
===================================================================
--- src/common/bmpbase.cpp	(revision 56123)
+++ src/common/bmpbase.cpp	(working copy)
@@ -135,6 +135,16 @@
     void OnExit() { wxBitmap::CleanUpHandlers(); }
 };
 
+wxBitmap wxBitmapBase::ConvertToDisabled(unsigned char brightness) const
+{
+    wxBitmap bmp;
+#if wxUSE_IMAGE
+    wxImage image = ConvertToImage();
+    bmp = wxBitmap(image.ConvertToDisabled(brightness));
+#endif
+    return bmp;
+}
+
 IMPLEMENT_DYNAMIC_CLASS(wxBitmapBaseModule, wxModule)
 
 #endif // wxUSE_BITMAP_BASE
Index: src/common/colourcmn.cpp
===================================================================
--- src/common/colourcmn.cpp	(revision 56123)
+++ src/common/colourcmn.cpp	(working copy)
@@ -149,6 +149,83 @@
     return colName;
 }
 
+// static
+unsigned char wxColourBase::MakeMono(unsigned char* r, unsigned char* g, unsigned char* b, 
+                            bool on)
+{
+    unsigned char clr = on ? 255 : 0;
+    *r = *g = *b = clr;
+    return clr;
+}
+
+// static
+unsigned char wxColourBase::MakeGrey(unsigned char* r, unsigned char* g, unsigned char* b, 
+                                     double lr, double lg, double lb)
+{
+    double luma = (*r) * lr + (*g) * lg + (*b) * lb;
+    unsigned char luma8 = (unsigned char)wxRound(luma);
+    *r = *g = *b = luma8;
+    return luma8;
+}
+
+// static
+void wxColourBase::MakeDisabled(unsigned char* r, unsigned char* g, unsigned char* b, 
+                                unsigned char brightness)
+{
+    *r = BlendColour(*r, brightness, 0.4);
+    *g = BlendColour(*g, brightness, 0.4);
+    *b = BlendColour(*b, brightness, 0.4);
+}
+
+// BlendColour is used by StepColour and MakeDisabled
+
+// static
+unsigned char wxColourBase::BlendColour(unsigned char fg, unsigned char bg, 
+                                        double alpha)
+{
+    double result = bg + (alpha * (fg - bg));
+    result = wxMax(result,   0.0);
+    result = wxMin(result, 255.0);
+    return (unsigned char)result;
+}
+
+// StepColour() is a utility function that simply darkens
+// or lightens a color, based on the specified percentage
+// ialpha of 0 would be completely black, 100 completely white
+// an ialpha of 100 returns the same colour
+
+// static
+void wxColourBase::StepColour(unsigned char* r, unsigned char* g, unsigned char* b,
+                              int ialpha)
+{
+    if (ialpha == 100) return;
+
+    // ialpha is 0..200 where 0 is completely black
+    // and 200 is completely white and 100 is the same
+    // convert that to normal alpha 0.0 - 1.0
+    ialpha = wxMax(ialpha,   0);
+    ialpha = wxMin(ialpha, 200);
+    double alpha = ((double)(ialpha - 100.0))/100.0;
+
+    unsigned char bg;
+    if (ialpha > 100)
+    {
+        // blend with white
+        bg = 255;
+        alpha = 1.0 - alpha;  // 0 = transparent fg; 1 = opaque fg
+    }
+    else
+    {
+        // blend with black
+        bg = 0;
+        alpha = 1.0 + alpha;  // 0 = transparent fg; 1 = opaque fg
+    }
+
+    *r = BlendColour(*r, bg, alpha);
+    *g = BlendColour(*g, bg, alpha);
+    *b = BlendColour(*b, bg, alpha);
+}
+
 #if WXWIN_COMPATIBILITY_2_6
 
 // static
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 56123)
+++ src/common/image.cpp	(working copy)
@@ -26,6 +26,7 @@
     #include "wx/module.h"
     #include "wx/palette.h"
     #include "wx/intl.h"
+    #include "wx/colour.h"
 #endif
 
 #include "wx/filefn.h"
@@ -1381,16 +1382,14 @@
     const long size = M_IMGDATA->m_width * M_IMGDATA->m_height;
     for ( long i = 0; i < size; i++, src += 3, dest += 3 )
     {
+        memcpy(dest, src, 3);
         // don't modify the mask
         if ( hasMask && src[0] == maskRed && src[1] == maskGreen && src[2] == maskBlue )
         {
-            memcpy(dest, src, 3);
         }
         else
         {
-            // calculate the luma
-            double luma = (src[0] * lr + src[1] * lg + src[2] * lb) + 0.5;
-            dest[0] = dest[1] = dest[2] = wx_static_cast(unsigned char, luma);
+            wxColour::MakeGrey(dest + 0, dest + 1, dest + 2, lr, lg, lb);
         }
     }
 
@@ -1435,15 +1434,43 @@
 
     for ( long i = 0; i < size; i++, srcd += 3, tard += 3 )
     {
-        if (srcd[0] == r && srcd[1] == g && srcd[2] == b)
-            tard[0] = tard[1] = tard[2] = 255;
-        else
-            tard[0] = tard[1] = tard[2] = 0;
+        bool on = (srcd[0] == r) && (srcd[1] == g) && (srcd[2] == b);
+        wxColourBase::MakeMono(tard + 0, tard + 1, tard + 2, on);
     }
 
     return image;
 }
 
+wxImage wxImage::ConvertToDisabled(unsigned char brightness) const
+{
+    wxImage image = *this;
+
+    unsigned char mr = image.GetMaskRed();
+    unsigned char mg = image.GetMaskGreen();
+    unsigned char mb = image.GetMaskBlue();
+
+    int width = image.GetWidth();
+    int height = image.GetHeight();
+    bool has_mask = image.HasMask();
+
+    for (int y = height-1; y >= 0; --y)
+    {
+        for (int x = width-1; x >= 0; --x)
+        {
+            unsigned char* data = image.GetData() + (y*(width*3))+(x*3);
+            unsigned char* r = data;
+            unsigned char* g = data+1;
+            unsigned char* b = data+2;
+
+            if (has_mask && (*r == mr) && (*g == mg) && (*b == mb))
+                continue;
+
+            wxColour::MakeDisabled(r, g, b, brightness);
+        }
+    }
+    return image;
+}
+
 int wxImage::GetWidth() const
 {
     wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
Index: src/msw/bitmap.cpp
===================================================================
--- src/msw/bitmap.cpp	(revision 56123)
+++ src/msw/bitmap.cpp	(working copy)
@@ -1108,6 +1108,16 @@
         return GetSubBitmapOfHDC( rect, (WXHDC)dcSrc );
 }
 
+wxBitmap wxBitmap::ConvertToDisabled(unsigned char brightness) const
+{
+    wxBitmap bmp;
+#if wxUSE_IMAGE
+    wxImage image = ConvertToImage();
+    bmp = wxBitmap(image.ConvertToDisabled(brightness));
+#endif
+    return bmp;
+}
+
 wxBitmap wxBitmap::GetSubBitmapOfHDC( const wxRect& rect, WXHDC hdc ) const
 {
     wxCHECK_MSG( Ok() &&
Index: src/msw/icon.cpp
===================================================================
--- src/msw/icon.cpp	(revision 56123)
+++ src/msw/icon.cpp	(working copy)
@@ -156,3 +156,12 @@
 
     return handler->Load(this, filename, type, desiredWidth, desiredHeight);
 }
+
+wxIcon wxIcon::ConvertToDisabled(unsigned char brightness) const
+{
+    wxBitmapTransparency transp = wxBitmapTransparency_Auto;
+    wxBitmap bmp = wxBitmap(*this, transp).ConvertToDisabled(brightness);
+    wxIcon icon;
+    icon.CopyFromBitmap(bmp);
+    return icon;
+}

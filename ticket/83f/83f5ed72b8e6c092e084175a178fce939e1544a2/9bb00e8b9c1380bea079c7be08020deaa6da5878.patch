Index: e:/dev/wxWindows/src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/event.cpp,v
retrieving revision 1.125
diff -u -2 -r1.125 event.cpp
--- e:/dev/wxWindows/src/common/event.cpp	2003/07/07 16:21:32	1.125
+++ e:/dev/wxWindows/src/common/event.cpp	2003/07/08 21:53:50
@@ -105,4 +105,11 @@
     { (const wxEventTable *)NULL, &wxEvtHandler::sm_eventTableEntries[0] };
 
+#if wxUSE_HASH_EVENTTABLE
+wxEventHashTable &wxEvtHandler::GetEventHashTable() const
+    { return wxEvtHandler::sm_eventHashTable; }
+
+wxEventHashTable wxEvtHandler::sm_eventHashTable(wxEvtHandler::sm_eventTable);
+#endif // wxUSE_HASH_EVENTTABLE
+
 const wxEventTableEntry wxEvtHandler::sm_eventTableEntries[] =
     { DECLARE_EVENT_TABLE_ENTRY(wxEVT_NULL, 0, 0, (wxObjectEventFunction)NULL, NULL) };
@@ -362,5 +369,6 @@
     m_extraLong = 0;
     m_commandInt = 0;
-    m_commandString = wxEmptyString;
+    // m_commandString = wxEmptyString; // No need to do this, as the wxString 
+                                        // is by default empty. It only eats CPU cycles.
     m_isCommandEvent = TRUE;
 }
@@ -676,4 +684,184 @@
 
 // ----------------------------------------------------------------------------
+// wxEventHashTable
+// ----------------------------------------------------------------------------
+
+#if wxUSE_HASH_EVENTTABLE
+
+#define EVENT_TYPE_TABLE_INIT_SIZE      31 // Not to big not to small...
+
+wxEventHashTable::wxEventHashTable(const wxEventTable &table)
+    :m_table(table),
+     m_rebuildHash(TRUE)
+{
+    AllocEventTypeTable(EVENT_TYPE_TABLE_INIT_SIZE);
+}
+
+wxEventHashTable::~wxEventHashTable()
+{
+    size_t i;
+    for(i = 0; i < m_size; i++)
+    {
+        EventTypeTablePointer  eTTnode = m_eventTypeTable[i];
+        if (eTTnode)
+        {
+            delete eTTnode;
+        }
+    }
+    
+    delete[] m_eventTypeTable;
+}
+
+bool wxEventHashTable::HandleEvent(wxEvent &event, wxEvtHandler *self)
+{
+    if (m_rebuildHash)
+    {
+        InitHashTable();        
+        m_rebuildHash = FALSE;
+    }
+    
+    // Find all entries for the given event type.
+    wxEventType eventType = event.GetEventType();
+    const EventTypeTablePointer eTTnode = m_eventTypeTable[eventType % m_size];
+    if (eTTnode && eTTnode->eventType == eventType)
+    {
+        // Now start the search for an event handler
+        // that can handle an event with the given ID.
+        int eventId = event.GetId();
+        const wxEventTableEntryPointerArray &eventEntryTable = eTTnode->eventEntryTable;
+        
+        size_t n;
+        size_t count = eventEntryTable.GetCount();
+        for (n = 0; n < count; n++)
+        {
+            const wxEventTableEntry* entry = eventEntryTable[n];
+            int tableId1 = entry->m_id,
+                tableId2 = entry->m_lastId;
+            
+            if ((tableId1 == -1) ||
+                (tableId2 == -1 && tableId1 == eventId) ||
+                (tableId2 != -1 &&
+                 (eventId >= tableId1 && eventId <= tableId2)))
+            {
+                event.Skip(FALSE);
+                event.m_callbackUserData = entry->m_callbackUserData;
+                
+                (self->*((wxEventFunction) (entry->m_fn)))(event);
+                
+                if (!event.GetSkipped())
+                    return TRUE;
+            }
+        }
+        
+        return FALSE;
+    }
+    
+    return FALSE;
+}
+
+void wxEventHashTable::InitHashTable()
+{
+    // Loop over the event tables and all its base tables.
+    const wxEventTable *table = &m_table;
+    while (table)
+    {
+        // Retrieve all valid event handler entries
+        const wxEventTableEntry *entry = table->entries;
+        while (entry->m_fn != 0)
+        {
+            // Add the event entry in the Hash.
+            AddEntry(*entry);
+            
+            entry++;
+        }
+        
+        table = table->baseTable;
+    }
+    
+    // Lets free some memory.
+    size_t i;
+    for(i = 0; i < m_size; i++)
+    {
+        EventTypeTablePointer  eTTnode = m_eventTypeTable[i];
+        if (eTTnode)
+        {
+            eTTnode->eventEntryTable.Shrink();
+        }
+    }
+}
+
+void wxEventHashTable::AddEntry(const wxEventTableEntry &entry)
+{
+    EventTypeTablePointer *peTTnode = &m_eventTypeTable[entry.m_eventType % m_size];
+    EventTypeTablePointer  eTTnode = *peTTnode;
+    
+    if (eTTnode)
+    {
+        if (eTTnode->eventType != entry.m_eventType)
+        {
+            // Resize the table!
+            GrowEventTypeTable();
+            // Try again to add it.
+            AddEntry(entry);
+            return;
+        }
+    }
+    else
+    {
+        eTTnode = new EventTypeTable;
+        eTTnode->eventType = entry.m_eventType;
+        *peTTnode = eTTnode;
+    }
+    
+    // Fill all hash entries between entry.m_id and entry.m_lastId...
+    eTTnode->eventEntryTable.Add(&entry);
+}
+
+void wxEventHashTable::AllocEventTypeTable(size_t size)
+{
+    m_eventTypeTable = new EventTypeTablePointer[size];
+    memset((void *)m_eventTypeTable, 0, sizeof(EventTypeTablePointer)*size);
+    m_size = size;
+}
+
+void wxEventHashTable::GrowEventTypeTable()
+{
+    size_t oldSize = m_size;
+    EventTypeTablePointer *oldEventTypeTable = m_eventTypeTable;
+    
+    AllocEventTypeTable(/* GetNextPrime(oldSize) */oldSize*2+1); // Todo: Search the most optimal grow sequence
+    
+    size_t i;
+    for(i = 0; i < oldSize; /* */)
+    {
+        EventTypeTablePointer  eTToldNode = oldEventTypeTable[i];
+        if (eTToldNode)
+        {
+            EventTypeTablePointer *peTTnode = &m_eventTypeTable[eTToldNode->eventType % m_size];
+            EventTypeTablePointer  eTTnode = *peTTnode;
+            
+            // Check for collision, we don't want any.
+            if (eTTnode)
+            {
+                GrowEventTypeTable();
+                continue; // Don't increment the counter, 
+                          // as we still need to add this element.
+            }
+            else
+            {
+                // Get the old value and put it in the new table.
+                *peTTnode = oldEventTypeTable[i];                   
+            }
+        }
+        
+        i++;
+    }
+    
+    delete[] oldEventTypeTable;
+}
+
+#endif // wxUSE_HASH_EVENTTABLE
+
+// ----------------------------------------------------------------------------
 // wxEvtHandler
 // ----------------------------------------------------------------------------
@@ -901,4 +1089,8 @@
             return TRUE;
 
+#if wxUSE_HASH_EVENTTABLE
+        if (GetEventHashTable().HandleEvent(event, this))
+            return TRUE;
+#else
         // Then static per-class event tables (and search upwards through the
         // inheritance hierarchy)
@@ -910,4 +1102,5 @@
                 return TRUE;
         }
+#endif // wxUSE_HASH_EVENTTABLE
     }
 
@@ -923,4 +1116,5 @@
     return TryParent(event);
 }
+
 
 bool wxEvtHandler::SearchEventTable(wxEventTable& table, wxEvent& event)
Index: e:/dev/wxWindows/include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/event.h,v
retrieving revision 1.172
diff -u -2 -r1.172 event.h
--- e:/dev/wxWindows/include/wx/event.h	2003/07/07 16:21:28	1.172
+++ e:/dev/wxWindows/include/wx/event.h	2003/07/08 21:54:00
@@ -28,4 +28,8 @@
 #include "wx/thread.h"
 
+#if wxUSE_HASH_EVENTTABLE
+    #include "wx/dynarray.h"
+#endif
+
 // ----------------------------------------------------------------------------
 // forward declarations
@@ -87,4 +91,6 @@
     wxEventTableEntry(type, winid, idLast, fn, obj)
 
+#define EMPTY_PARAMETER_VALUE /* Fake macro parameter value */
+
 #define BEGIN_DECLARE_EVENT_TYPES()
 #define END_DECLARE_EVENT_TYPES()
@@ -94,5 +100,5 @@
     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_CORE, name, value)
 #define DECLARE_LOCAL_EVENT_TYPE(name, value) \
-    DECLARE_EXPORTED_EVENT_TYPE(/* */, name, value)
+    DECLARE_EXPORTED_EVENT_TYPE(EMPTY_PARAMETER_VALUE, name, value)
 #define DEFINE_EVENT_TYPE(name) const wxEventType name = wxNewEventType();
 #define DEFINE_LOCAL_EVENT_TYPE(name) DEFINE_EVENT_TYPE(name)
@@ -2028,4 +2034,57 @@
 
 // ----------------------------------------------------------------------------
+// wxEventHashTable: a helper of wxEvtHandler to speed up wxEventTable lookups.
+// ----------------------------------------------------------------------------
+#if wxUSE_HASH_EVENTTABLE
+
+WX_DEFINE_ARRAY(const wxEventTableEntry*, wxEventTableEntryPointerArray);
+class WXDLLIMPEXP_BASE wxEvtHandler;
+
+class WXDLLIMPEXP_BASE wxEventHashTable
+{
+private:
+    // Internal data structs
+    struct EventTypeTable
+    {
+        wxEventType                   eventType;
+        wxEventTableEntryPointerArray eventEntryTable;
+    };
+    typedef EventTypeTable* EventTypeTablePointer;
+
+public:
+    // Constructor, needs the event table it needs to hash later on.
+    // Note: hashing of the event table is not done in the constructor as it 
+    //       can be that the event table is not yet full initialize, the hash 
+    //       will gets initialized when handling the first event look-up request.
+    wxEventHashTable(const wxEventTable &table);
+    // Destructor.
+    ~wxEventHashTable();
+
+    // Handle the given event, in other words search the event table hash 
+    // and call self->ProcessEvent() if a match was found.
+    bool HandleEvent(wxEvent &event, wxEvtHandler *self);
+
+protected:
+    // Init the hash table with the entries of the static event table.
+    void InitHashTable();
+    // Helper funtion of InitHashTable() to insert 1 entry into the hash table.
+    void AddEntry(const wxEventTableEntry &entry);
+    // Allocate and init with null pointers the base hash table.
+    void AllocEventTypeTable(size_t size);
+    // Grow the hash table in size and transfer all items currently 
+    // in the table to the correct location in the new table.
+    void GrowEventTypeTable();
+
+protected:
+    const wxEventTable    &m_table;
+    bool                   m_rebuildHash;
+
+    size_t                 m_size;
+    EventTypeTablePointer *m_eventTypeTable;
+};
+
+#endif wxUSE_HASH_EVENTTABLE
+
+// ----------------------------------------------------------------------------
 // wxEvtHandler: the base class for all objects handling wxWindows events
 // ----------------------------------------------------------------------------
@@ -2146,8 +2205,12 @@
 
 
-    static const wxEventTable sm_eventTable;
-
+    static const wxEventTable sm_eventTable;    
     virtual const wxEventTable *GetEventTable() const;
 
+#if wxUSE_HASH_EVENTTABLE
+    static wxEventHashTable   sm_eventHashTable;
+    virtual wxEventHashTable& GetEventHashTable() const;
+#endif // wxUSE_HASH_EVENTTABLE
+
     wxEvtHandler*       m_nextHandler;
     wxEvtHandler*       m_previousHandler;
@@ -2243,20 +2306,52 @@
 // (use &) or the compiler crashes...
 
-#define DECLARE_EVENT_TABLE() \
+#define _DECLARE_EVENT_TABLE() \
     private: \
         static const wxEventTableEntry sm_eventTableEntries[]; \
     protected: \
         static const wxEventTable        sm_eventTable; \
-        virtual const wxEventTable*        GetEventTable() const;
+        virtual const wxEventTable*      GetEventTable() const;
+
+
+#if wxUSE_HASH_EVENTTABLE
+
+#define DECLARE_EVENT_TABLE() \
+        _DECLARE_EVENT_TABLE() \
+        static wxEventHashTable          sm_eventHashTable; \
+        virtual wxEventHashTable&        GetEventHashTable() const;
+
+#else
+
+#define DECLARE_EVENT_TABLE() \
+        _DECLARE_EVENT_TABLE()
+
+#endif // wxUSE_HASH_EVENTTABLE
 
 // N.B.: when building DLL with Borland C++ 5.5 compiler, you must initialize
 //       sm_eventTable before using it in GetEventTable() or the compiler gives
 //       E2233 (see http://groups.google.com/groups?selm=397dcc8a%241_2%40dnews)
-#define BEGIN_EVENT_TABLE(theClass, baseClass) \
+
+#define _BEGIN_EVENT_TABLE(theClass, baseClass) \
     const wxEventTable theClass::sm_eventTable = \
         { &baseClass::sm_eventTable, &theClass::sm_eventTableEntries[0] }; \
     const wxEventTable *theClass::GetEventTable() const \
-        { return &theClass::sm_eventTable; } \
+        { return &theClass::sm_eventTable; }
+
+#if wxUSE_HASH_EVENTTABLE
+
+#define BEGIN_EVENT_TABLE(theClass, baseClass) \
+    _BEGIN_EVENT_TABLE(theClass, baseClass) \
+    wxEventHashTable theClass::sm_eventHashTable(theClass::sm_eventTable); \
+    wxEventHashTable &theClass::GetEventHashTable() const \
+        { return theClass::sm_eventHashTable; } \
     const wxEventTableEntry theClass::sm_eventTableEntries[] = { \
+
+#else
+
+#define BEGIN_EVENT_TABLE(theClass, baseClass) \
+    _BEGIN_EVENT_TABLE(theClass, baseClass) \
+    const wxEventTableEntry theClass::sm_eventTableEntries[] = { \
+
+#endif // wxUSE_HASH_EVENTTABLE
 
 #define END_EVENT_TABLE() DECLARE_EVENT_TABLE_ENTRY( wxEVT_NULL, 0, 0, 0, 0 ) };

 	  	 

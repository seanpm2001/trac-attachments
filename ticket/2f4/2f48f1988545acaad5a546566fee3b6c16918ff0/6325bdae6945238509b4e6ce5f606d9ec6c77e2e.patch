Index: include/wx/html/htmlcell.h
===================================================================
--- include/wx/html/htmlcell.h	(révision 70525)
+++ include/wx/html/htmlcell.h	(copie de travail)
@@ -280,10 +280,12 @@
     // Returned value : true if pagebreak was modified, false otherwise
     // Usage : while (container->AdjustPagebreak(&p)) {}
     virtual bool AdjustPagebreak(int *pagebreak,
-                                 wxArrayInt& known_pagebreaks) const;
+                                 const wxArrayInt& known_pagebreaks, int page_height) const;
 
     // Sets cell's behaviour on pagebreaks (see AdjustPagebreak). Default
     // is true - the cell can be split on two pages
+	// If there is no way to fit a cell in the current page size, the cell
+	// is always split, ignoring this setting.
     void SetCanLiveOnPagebreak(bool can) { m_CanLiveOnPagebreak = can; }
 
     // Can the line be broken before this cell?
@@ -439,9 +441,9 @@
                       wxHtmlRenderingInfo& info);
     virtual void DrawInvisible(wxDC& dc, int x, int y,
                                wxHtmlRenderingInfo& info);
-/*    virtual bool AdjustPagebreak(int *pagebreak, int *known_pagebreaks = NULL, int number_of_pages = 0) const;*/
-    virtual bool AdjustPagebreak(int *pagebreak, wxArrayInt& known_pagebreaks) const;
 
+    virtual bool AdjustPagebreak(int *pagebreak, const wxArrayInt& known_pagebreaks, int page_height) const;
+
     // insert cell at the end of m_Cells list
     void InsertCell(wxHtmlCell *cell);
 
Index: interface/wx/html/htmlcell.h
===================================================================
--- interface/wx/html/htmlcell.h	(révision 70525)
+++ interface/wx/html/htmlcell.h	(copie de travail)
@@ -95,19 +95,31 @@
 
     /**
         This method is used to adjust pagebreak position.
-        The parameter is variable that contains y-coordinate of page break
+        The first parameter is a variable that contains the y-coordinate of the page break
         (= horizontal line that should not be crossed by words, images etc.).
         If this cell cannot be divided into two pieces (each one on another page)
-        then it moves the pagebreak few pixels up.
+        then it moves the pagebreak a few pixels up.
+        If the cell cannot be divided into two pieces, but it cannot fit on a page, 
+        the cell is forced to split anyway.
         Returns @true if pagebreak was modified, @false otherwise.
 
+        @param pagebreak
+            position in pixel of the pagebreak.
+            
+        @param known_pagebreaks
+            the list of the previous pagebreaks
+            
+        @param page_height
+            the height in pixel of the page drawable area
+        
         Usage:
         @code
-        while (container->AdjustPagebreak(&p)) {}
+        while (container->AdjustPagebreak(&p, kp, ph)) {}
         @endcode
+        
     */
     virtual bool AdjustPagebreak(int* pagebreak,
-                                 wxArrayInt& known_pagebreaks) const;
+                                 const wxArrayInt& known_pagebreaks, int page_height) const;
 
     /**
         Renders the cell.
Index: src/html/htmlcell.cpp
===================================================================
--- src/html/htmlcell.cpp	(révision 70525)
+++ src/html/htmlcell.cpp	(copie de travail)
@@ -221,10 +221,10 @@
 
 
 bool wxHtmlCell::AdjustPagebreak(int *pagebreak,
-                                 wxArrayInt& WXUNUSED(known_pagebreaks)) const
+                                 const wxArrayInt& WXUNUSED(known_pagebreaks), int page_height) const
 {
-    if ((!m_CanLiveOnPagebreak) &&
-                m_PosY < *pagebreak && m_PosY + m_Height > *pagebreak)
+    if ( m_Height <= page_height &&
+        (!m_CanLiveOnPagebreak && m_PosY < *pagebreak && m_PosY + m_Height > *pagebreak))
     {
         *pagebreak = m_PosY;
         return true;
@@ -775,10 +775,10 @@
 
 
 bool wxHtmlContainerCell::AdjustPagebreak(int *pagebreak,
-                                          wxArrayInt& known_pagebreaks) const
+                                          const wxArrayInt& known_pagebreaks, int page_height) const
 {
     if (!m_CanLiveOnPagebreak)
-        return wxHtmlCell::AdjustPagebreak(pagebreak, known_pagebreaks);
+        return wxHtmlCell::AdjustPagebreak(pagebreak, known_pagebreaks, page_height);
 
     wxHtmlCell *c = GetFirstChild();
     bool rt = false;
@@ -786,7 +786,7 @@
 
     while (c)
     {
-        if (c->AdjustPagebreak(&pbrk, known_pagebreaks))
+        if (c->AdjustPagebreak(&pbrk, known_pagebreaks, page_height))
             rt = true;
         c = c->GetNext();
     }
Index: src/html/htmprint.cpp
===================================================================
--- src/html/htmprint.cpp	(révision 70525)
+++ src/html/htmprint.cpp	(copie de travail)
@@ -151,7 +151,7 @@
     int pbreak, hght;
 
     pbreak = (int)(from + m_Height);
-    while (m_Cells->AdjustPagebreak(&pbreak, known_pagebreaks)) {}
+    while (m_Cells->AdjustPagebreak(&pbreak, known_pagebreaks, m_Height)) {}
     hght = pbreak - from;
     if(to < hght)
         hght = to;
Index: src/html/m_layout.cpp
===================================================================
--- src/html/m_layout.cpp	(révision 70525)
+++ src/html/m_layout.cpp	(copie de travail)
@@ -71,7 +71,7 @@
     wxHtmlPageBreakCell() {}
 
     bool AdjustPagebreak(int* pagebreak,
-                         wxArrayInt& known_pagebreaks) const;
+                         const wxArrayInt& known_pagebreaks, int page_height) const;
 
     void Draw(wxDC& WXUNUSED(dc),
               int WXUNUSED(x), int WXUNUSED(y),
@@ -82,7 +82,7 @@
     wxDECLARE_NO_COPY_CLASS(wxHtmlPageBreakCell);
 };
 
-bool wxHtmlPageBreakCell::AdjustPagebreak(int* pagebreak, wxArrayInt& known_pagebreaks) const
+bool wxHtmlPageBreakCell::AdjustPagebreak(int* pagebreak, const wxArrayInt& known_pagebreaks, int WXUNUSED(page_height)) const
 {
     // When we are counting pages, 'known_pagebreaks' is non-NULL.
     // That's the only time we change 'pagebreak'. Otherwise, pages

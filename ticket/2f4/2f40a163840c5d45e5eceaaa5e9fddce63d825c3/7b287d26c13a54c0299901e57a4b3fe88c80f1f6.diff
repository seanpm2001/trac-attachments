Binary files wxWindows/contrib/samples/wxplore.empty/icondlg.cpp and wxWindows/contrib/samples/wxplore/icondlg.cpp differ
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/icondlg.h wxWindows/contrib/samples/wxplore/icondlg.h
--- wxWindows/contrib/samples/wxplore.empty/icondlg.h    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/icondlg.h    Fri Mar 23 11:14:22 2001
@@ -0,0 +1,21 @@
+
+
+
+// A custom modal dialog
+class MyIconSelectorDialog : public wxDialog
+{
+public:
+    MyIconSelectorDialog(wxWindow *parent, int * pindex, wxString * pFile) ;
+    void OnButton(wxCommandEvent& event);
+    void SetIcon () ;
+
+private:
+    int * pIndex ;
+    wxString * pCommand ;
+    wxString sFile ;
+    wxStaticBitmap * pBox ;
+
+#define ID_BROWSE 1 
+    
+    DECLARE_EVENT_TABLE()
+};
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile wxWindows/contrib/samples/wxplore/makefile
--- wxWindows/contrib/samples/wxplore.empty/makefile    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile    Fri Mar 23 11:15:40 2001
@@ -0,0 +1,24 @@
+# Generated automatically from Makefile.in by configure.
+#
+# File:        makefile.unx
+# Author:    Julian Smart
+# Created:    1998
+# Updated:    
+# Copyright:    (c) 1998 Julian Smart
+#
+# "%W% %G%"
+#
+# Makefile for minimal example (UNIX).
+
+top_srcdir = ../../../
+top_builddir = ../../../ 
+
+program_dir = .
+
+PROGRAM=wxplore
+
+OBJECTS=$(PROGRAM).o icondlg.o
+
+
+include ../../../src/makeprog.env
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.b32 wxWindows/contrib/samples/wxplore/makefile.b32
--- wxWindows/contrib/samples/wxplore.empty/makefile.b32    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.b32    Fri Mar 23 11:14:22 2001
@@ -0,0 +1,11 @@
+# Purpose: makefile for wxplore example (BC++ 32bit)
+# Created: 2000-03-14
+
+WXDIR = $(WXWIN)
+
+TARGET=wxplore
+
+OBJECTS = $(TARGET).obj icondlg.obj
+
+!include $(WXDIR)\src\makeprog.b32
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.bcc wxWindows/contrib/samples/wxplore/makefile.bcc
--- wxWindows/contrib/samples/wxplore.empty/makefile.bcc    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.bcc    Thu Dec  7 16:50:00 2000
@@ -0,0 +1,16 @@
+# Purpose: makefile for sashtest example (BC++ 16bit)
+# Created: 2000-03-14
+
+!if "$(WXWIN)" == ""
+!error You must define the WXWIN variable in autoexec.bat, e.g. WXWIN=c:\wx
+!endif
+
+WXDIR = $(WXWIN)
+
+# I don't think this will comile in 16 bit windows as it uses the win32 registry!!
+
+TARGET=WXPLORE
+OBJECTS=$(TARGET).obj icondlg.obj
+
+!include $(WXDIR)\src\makeprog.bcc
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.g95 wxWindows/contrib/samples/wxplore/makefile.g95
--- wxWindows/contrib/samples/wxplore.empty/makefile.g95    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.g95    Fri Mar 23 11:16:34 2001
@@ -0,0 +1,10 @@
+# Purpose: makefile for wxplore example (Cygwin/Mingw32)
+# Created: #03.01.00
+
+WXDIR = ../../..
+
+TARGET=wxplore
+OBJECTS = $(TARGET).o icondlg.o
+
+include $(WXDIR)/src/makeprog.g95
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.sc wxWindows/contrib/samples/wxplore/makefile.sc
--- wxWindows/contrib/samples/wxplore.empty/makefile.sc    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.sc    Thu Dec  7 16:49:00 2000
@@ -0,0 +1,37 @@
+# Purpose: makefile for wxplore example (Symantec C++)
+# Created: 2000-03-14
+
+WXDIR = $(WXWIN)
+WXLIB = $(WXDIR)\lib\wx.lib
+INCDIR = $(WXDIR)\include
+INCLUDE=$(INCDIR)
+TARGET=wxplore
+
+include $(WXDIR)\src\makesc.env
+
+wxplore.exe: wxplore.obj icondlg.obj $(DEFFILE) wxplore.res
+    *$(CC) $(LDFLAGS) -o$@ $** $(LIBS)
+    *$(RC) -k wxplore.res
+
+sc32.def:
+     echo EXETYPE NT > sc32.def
+     echo SUBSYSTEM WINDOWS >> sc32.def
+
+sc16.def:
+     echo NAME $(TARGET) > sc16.def
+     echo EXETYPE WINDOWS >> sc16.def
+     echo STUB         'WINSTUB.EXE' >> sc16.def
+     echo CODE         PRELOAD MOVEABLE DISCARDABLE >> sc16.def
+     echo DATA         PRELOAD MOVEABLE MULTIPLE >> sc16.def
+     echo HEAPSIZE     1024 >> sc16.def
+     echo STACKSIZE    8192 >> sc16.def
+
+clean:
+    -del *.obj
+    -del *.exe
+    -del *.res
+    -del *.map
+    -del *.rws
+    -del sc32.def
+    -del sc16.def
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.sl wxWindows/contrib/samples/wxplore/makefile.sl
--- wxWindows/contrib/samples/wxplore.empty/makefile.sl    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.sl    Fri Mar 23 11:17:18 2001
@@ -0,0 +1,14 @@
+# Purpose: makefile for wxplore example (Salford C++)
+# Created: 2000-03-14
+
+PROGRAM = wxplore
+OBJECTS = $(PROGRAM).obj icondlg.obj
+
+include ..\..\..\src\makeprog.sl
+
+all:        wx $(TARGET)
+
+wx:
+    cd $(WXDIR)\src\msw ^ mk32 -f makefile.sl all
+    cd $(WXDIR)\samples\wxplore
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.twn wxWindows/contrib/samples/wxplore/makefile.twn
--- wxWindows/contrib/samples/wxplore.empty/makefile.twn    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.twn    Fri Mar 23 11:17:00 2001
@@ -0,0 +1,35 @@
+# Purpose: makefile for wxplore example (TWIN)
+# Created: 2000-03-14
+
+WXDIR = ../../..
+
+# All common UNIX compiler flags and options are now in
+# this central makefile.
+include $(WXDIR)/src/maketwin.env
+
+OBJECTS = $(OBJDIR)/wxplore.$(OBJSUFF) $(OBJDIR)/icondlg.$(OBJSUFF)
+
+all:    $(OBJDIR) wxplore$(GUISUFFIX)$(EXESUFF)
+
+wx:
+
+$(OBJDIR):
+    mkdir $(OBJDIR)
+
+wxplore$(GUISUFFIX)$(EXESUFF):    $(OBJECTS) $(WXLIB)
+    $(CC) $(LDFLAGS) -o wxplore$(GUISUFFIX)$(EXESUFF) $(OBJECTS) $(LDLIBS)
+
+$(OBJDIR)/wxplore.$(OBJSUFF):    wxplore.$(SRCSUFF)
+    $(CC) -c $(CPPFLAGS) -o $@ wxplore.$(SRCSUFF)
+
+wxplore.c:  wxplore.rc
+    $(RESCOMP) $(RCINPUTSWITCH) wxplore.rc $(RCOUTPUTSWITCH) wxplore.c $(RESFLAGS)
+
+$(OBJDIR)/wxplore.$(OBJSUFF):    wxplore.c
+    $(CC) -c $(CPPFLAGS) -o $@ wxplore.c
+
+#$(OBJDIR)/wxplore.o:  wxplore.rc
+#    $(RESCOMP) $(RCINPUTSWITCH) wxplore.rc $(RCOUTPUTSWITCH) $(OBJDIR)/wxplore.o $(RESFLAGS)
+
+clean:
+    rm -f $(OBJECTS) wxplore$(GUISUFFIX).exe core *.rsc *.res
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.unx wxWindows/contrib/samples/wxplore/makefile.unx
--- wxWindows/contrib/samples/wxplore.empty/makefile.unx    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.unx    Thu Dec  7 16:48:00 2000
@@ -0,0 +1,23 @@
+# Purpose: makefile for wxplore example (Unix)
+# Created: 2000-03-14
+
+CC = gcc
+
+PROGRAM = wxplore
+
+OBJECTS = $(PROGRAM).o icondlg.o
+
+# implementation
+
+.SUFFIXES:    .o .cpp
+
+.cpp.o :
+    $(CC) -c `wx-config --cflags` -o $@ $<
+
+all:    $(PROGRAM)
+
+$(PROGRAM):    $(OBJECTS)
+    $(CC) -o $(PROGRAM) $(OBJECTS) `wx-config --libs`
+
+clean:
+    rm -f *.o $(PROGRAM)
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.vc wxWindows/contrib/samples/wxplore/makefile.vc
--- wxWindows/contrib/samples/wxplore.empty/makefile.vc    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.vc    Thu Dec  7 16:47:00 2000
@@ -0,0 +1,11 @@
+# Purpose: makefile for wxplore example (VC++ 32bit)
+# Created: 2000-03-14
+
+# Set WXDIR for your system
+WXDIR = $(WXWIN)
+
+PROGRAM=wxplore
+OBJECTS = $(PROGRAM).obj icondlg.obj
+
+!include $(WXDIR)\src\makeprog.vc
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/makefile.wat wxWindows/contrib/samples/wxplore/makefile.wat
--- wxWindows/contrib/samples/wxplore.empty/makefile.wat    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/makefile.wat    Thu Dec  7 16:47:00 2000
@@ -0,0 +1,11 @@
+# Purpose: makefile for wxplore example (Watcom)
+# Created: 2000-03-14
+
+WXDIR = $(%WXWIN)
+
+PROGRAM = wxplore
+OBJECTS = $(PROGRAM).obj icondlg.obj
+
+!include $(WXDIR)\src\makeprog.wat
+
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/readme.txt wxWindows/contrib/samples/wxplore/readme.txt
--- wxWindows/contrib/samples/wxplore.empty/readme.txt    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/readme.txt    Fri Mar 23 11:41:33 2001
@@ -0,0 +1,29 @@
+About wxplore
+
+see http://biolpc22.york.ac.uk/wx/wxplore for updated information
+
+Licence wxWindows.
+
+This program was created to test the ability to read the registry to find out
+mime types and to associate the filename extensions with the executable
+programs.
+
+It is intended that it should compile under all wx Environments, but 
+only do any useful work in wxMSW, and UNIX (wxGTK tested, wxMotif also
+likely to work).
+
+As the function of the program is to test the MSW registry changing 
+code, (stored in user.dat and system.dat) or equivalent entries 
+in .mailcap, .mime.types, .gnome/mime-info [.kdelnk?? coming soon]
+you should only run this if you have a recent backup of these files
+
+
+Parts of the program do not work: 
+
+#Reading and setting DDE entries is not implemented.
+
+#Dealing with more than 1 icon in the exe file is not yet supported
+
+
+Comments always welcome 
+Chris Elliott, biol75@york.ac.uk, 23 mar 01
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/readme.txt~ wxWindows/contrib/samples/wxplore/readme.txt~
--- wxWindows/contrib/samples/wxplore.empty/readme.txt~    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/readme.txt~    Fri Mar 23 11:28:30 2001
@@ -0,0 +1,27 @@
+About wxplore
+
+Licence wxWindows.
+
+This program was created to test the ability to read the registry to find out
+mime types and to associate the filename extensions with the executable
+programs.
+
+It is intended that it should compile under all wx Environments, but 
+only do any useful work in wxMSW, and UNIX 
+
+As the function of the program is to test the MSW registry changing 
+code, (stored in user.dat and system.dat) or equivalent entries 
+in .mailcap, .mime.types, .gnome/mime-info [.kdelnk?? coming soon]
+you should only run this if you have a recent backup of these files
+
+
+Parts of the program do not work: 
+
+#Reading and setting DDE entries is not implemented.
+
+#Dealing with more than 1 icon in the exe file is not yet supported
+
+
+
+Comments always welcome 
+Chris Elliott, biol75@york.ac.uk, 23 mar 01
Binary files wxWindows/contrib/samples/wxplore.empty/wxplore.bmp and wxWindows/contrib/samples/wxplore/wxplore.bmp differ
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.bpr wxWindows/contrib/samples/wxplore/wxplore.bpr
--- wxWindows/contrib/samples/wxplore.empty/wxplore.bpr    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.bpr    Fri Mar 23 11:21:56 2001
@@ -0,0 +1,44 @@
+PROJECT = wxplore
+RESFILES = wxplore.res
+
+
+#-----------------------------------------------------------------------------
+#this is a source makefile for Borland CBuilder IDE v1,3
+#You may need to add \ at the end of the lines if your editor breaks them up
+#-----------------------------------------------------------------------------
+
+
+OBJFILES =wxplore.obj icondlg.obj
+RESDEPEN = $(RESFILES)
+LIBFILES =
+
+!ifndef BCB
+BCB = $(MAKEDIR)\..
+!endif
+#-----------------------------------------------------------------------------
+CFLAG1 = -Od -w- -k -r -v -vi -a1 -c   -w-hid
+#disable optimisations debug byte align (matches my make for the library)
+CFLAG2 = -I$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ -H=BC32.CSM 
+PFLAGS = -U$(BCB)\lib;..\..\..\lib \
+   -I$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ -v 
+RFLAGS = -i$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ \
+   -I$(BCB)\include;..\..\..\include
+LFLAGS = -j$(BCB)\lib;..\..\..\lib \
+   -L$(BCB)\lib;..\..\..\lib -aa -Tpe -v -V4.0 -c 
+IFLAGS = 
+LINKER = tlink32
+#-----------------------------------------------------------------------------
+ALLOBJ = c0w32.obj $(OBJFILES)
+ALLRES = $(RESFILES)
+ALLLIB = $(LIBFILES) vcl.lib xpm.lib wx32.lib ole2w32.lib import32.lib \
+   cw32mt.lib odbc32.lib winpng.lib tiff.lib jpeg.lib  zlib
+#
+---------------------------------------------------------------------------
+.autodepend
+
+
+#-----------------------------------------------------------------------------
+$(PROJECT): $(OBJFILES) $(RESDEPEN)
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.cpp wxWindows/contrib/samples/wxplore/wxplore.cpp
--- wxWindows/contrib/samples/wxplore.empty/wxplore.cpp    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.cpp    Fri Mar 23 11:14:22 2001
@@ -0,0 +1,1069 @@
+// cje2@york.ac.uk (Chris Elliott) March 2000; March 2001
+
+#ifdef __BIDE__
+#define _NO_VCL
+#include "condefs.h"
+
+USERC("wxplore.rc");
+USEUNIT("icondlg.cpp");
+//---------------------------------------------------------------------------
+#define WinMain WinMain
+#endif
+
+//////////////
+// wxplore.cpp (C) Chris Elliott 2000 wxWindows licence, based on....
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wxplore.cpp
+// Purpose:     registry test sample
+// Author:      Chris Elliott based on sashtest.cpp by Julian Smart
+// Modified by:
+// Created:     04/01/98
+// Copyright:   (c) Julian Smart and Markus Holzem and Chris Elliott
+// Licence:       wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#ifdef __BORLANDC__
+#pragma warn -rch
+#pragma warn -ccc
+#endif
+
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#include "wx/mdi.h"
+#endif
+
+#include <wx/toolbar.h>
+#include <wx/laywin.h>
+#include <wx/dirctrl.h>
+#include <wx/mimetype.h>
+#include <wx/image.h>
+#include <wx/choice.h>
+#include <wx/textctrl.h>
+#include <wx/datetime.h>
+#include <wx/dnd.h>
+#include <wx/tooltip.h>
+#include <wx/dir.h>
+#include <sys/stat.h>
+
+#include "wxplore.h"
+#include "icondlg.h"
+
+#define sMaskString  "*"
+#ifdef __WXMSW__
+#undef sMaskString
+#define  sMaskString  "*.*"
+#endif
+
+#define sBinRootDir "/usr/bin"
+#ifdef __WXMSW__
+#undef sBinRootDir
+#define  sBinRootDir  "c:\\program files"
+#endif
+
+#define sExe "*"
+#ifdef __WXMSW__
+#undef sExe
+#define  sExe  "*.exe"
+#endif
+
+MyFrame *frame = NULL;
+
+IMPLEMENT_APP(MyApp)
+
+// Initialise this in OnInit, not statically
+bool MyApp::OnInit(void)
+{
+    bool backupPrompt = false ;
+    wxString sTmp ;
+    int i = 1;
+    while (i < argc)             // collect up file names which may have spaces in ...
+    {
+
+        wxString s;
+        s = argv[i] ;
+        if (  ! s.StartsWith("-") )
+        {
+            if ( sTmp.Len () > 1) sTmp = sTmp + space ;
+            sTmp = sTmp + s ;
+        }
+        else backupPrompt = true ;
+        i ++;
+    }
+
+    // Create the main frame window
+    frame = new MyFrame(NULL, -1, wxString ("wxPloring ... ") + sTmp , wxPoint(0, 0), wxSize(600, 400),
+        wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL, sTmp);
+
+    sTmp = argv[0];
+                                 //we have to pass this to a tempoary variable,
+                                 //otherwise in wxGTK bug no commandline argv[0] is present ??
+    frame->argv_0 = sTmp ;
+#include "wxplore.xpm"
+    frame->SetIcon(wxICON(wxplore));
+
+    // Make a menubar
+    wxMenu *file_menu = new wxMenu;
+
+    file_menu->Append(XPL_NEW, "&New wxPlore\tCtrl-N");
+    file_menu->Append(XPL_UPDATE, "&Refresh\tF5");
+    file_menu->AppendSeparator() ;
+    file_menu->Append(XPL_QUIT, "&Exit\tAlt-X");
+
+    wxMenu *help_menu = new wxMenu;
+    help_menu->Append(XPL_ABOUT, "&About");
+
+    wxMenuBar *menu_bar = new wxMenuBar;
+    menu_bar->Append(file_menu, "&File");
+    menu_bar->Append(help_menu, "&Help");
+
+    // Associate the menu bar with the frame
+    frame->SetMenuBar(menu_bar);
+
+    frame->CreateStatusBar();
+    frame->Show(TRUE);
+    SetTopWindow(frame);
+
+    if (backupPrompt) return TRUE;
+    if ( wxYES != wxMessageBox ( sWarn1, sWarn2,
+        wxYES_NO | wxICON_EXCLAMATION )) return FALSE ;
+    return true ;
+}
+
+
+BEGIN_EVENT_TABLE(MyFrame, wxMDIParentFrame)
+EVT_MENU(XPL_ABOUT, MyFrame::OnAbout)
+EVT_SIZE(MyFrame::OnSize)
+EVT_MENU(XPL_NEW, MyFrame::OnSelActivate)
+EVT_MENU(XPL_QUIT, MyFrame::OnQuit)
+EVT_TEXT_ENTER (-1, MyFrame::OnSelChange)
+EVT_CHOICE (SORT_BOX, MyFrame::OnSelChange)
+EVT_CHOICE (MAN_BOX, MyFrame::OnManChange)
+EVT_MENU(XPL_UPDATE, MyFrame::OnSelChange)
+EVT_IDLE(MyFrame::OnIdle)
+EVT_TREE_SEL_CHANGED(-1, MyFrame::OnSelChange)
+EVT_TREE_ITEM_ACTIVATED (-1, MyFrame::OnSelActivate)
+EVT_CHECKBOX(-1, MyFrame::OnSelChange)
+EVT_SASH_DRAGGED_RANGE(ID_WINDOW_TOP, ID_WINDOW_BOTTOM, MyFrame::OnSashDrag)
+END_EVENT_TABLE()
+
+// Define my frame constructor
+MyFrame::MyFrame(wxWindow *parent, const wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size,
+const long style, wxString startDir):
+wxMDIParentFrame(parent, id, title, pos, size, style)
+{
+    // A window like a toolbar
+    wxSashLayoutWindow* win = new wxSashLayoutWindow(this, ID_WINDOW_TOP, wxDefaultPosition, wxSize(200, 30), wxNO_BORDER|wxSW_3D);
+    win->SetDefaultSize(wxSize(1000, 30));
+    win->SetOrientation(wxLAYOUT_HORIZONTAL);
+    win->SetAlignment(wxLAYOUT_TOP);
+    win->SetBackgroundColour("WHEAT");
+//    win->SetSashVisible(wxSASH_BOTTOM, TRUE);
+
+    m_topWindow = win;
+
+    // A window to the left
+    win = new wxSashLayoutWindow(this, ID_WINDOW_LEFT1, wxDefaultPosition, wxSize(220, 30), wxNO_BORDER|wxSW_3D);
+    win->SetDefaultSize(wxSize(220, 300));
+    win->SetOrientation(wxLAYOUT_VERTICAL);
+    win->SetAlignment(wxLAYOUT_LEFT);
+    win->SetBackgroundColour(wxColour(0, 0, 255));
+    win->SetSashVisible(wxSASH_RIGHT, TRUE);
+
+    m_leftWindow1 = win;
+
+
+
+    new wxStaticText (m_topWindow, -1, "List files ", wxPoint (4,2), wxSize (54,25) );
+
+    maskbox = new wxTextCtrl (m_topWindow, -1, sMaskString, wxPoint (58,2), wxSize (40,25), wxTE_PROCESS_ENTER    );
+    maskbox ->SetToolTip( "Use a file *.* or Mime mask */* ");
+    wxToolTip::Enable (true);
+
+    new wxStaticText (m_topWindow, -1, "Sorted by ",  wxPoint (110,2), wxSize (56,30) );
+
+    const int iChoices = 5;
+    wxString sortchoices [iChoices] =
+    {
+        "Name A-z",
+        "Name a-z",
+        "Extension",
+        "Mimetype",
+        "Time"
+    } ;
+    sortbox = new wxChoice (m_topWindow, SORT_BOX, wxPoint (200,2), wxSize (100,20), iChoices, sortchoices );
+    sortbox -> SetSelection(1);
+        
+    hiddencheck = new wxCheckBox (m_topWindow, -1, "Show hidden Files", wxPoint (320,2), wxSize (140,20) );
+
+#ifdef __UNIX__
+    const int iManagers = 5;
+    wxString sortManagers [iManagers] =
+    {
+        "None",
+        "Netscape",
+        "MetaMail (Pine)",
+        "KDE",
+        "Gnome"
+                    
+    } ;
+    manbox = new wxChoice (m_topWindow, MAN_BOX, wxPoint (450,2), wxSize (100,20), iManagers, sortManagers );
+    manbox -> SetSelection(1);
+#endif
+    
+    neverdone = true ;
+    rootdir = startDir ;
+
+}
+
+
+void MyFrame::OnIdle (wxIdleEvent & WXUNUSED(event))
+{
+
+    if (neverdone)
+    {
+        subframe = new wxMDIChildFrame(frame, -1, "", wxPoint(301, 130), wxSize(300, 300),
+        wxDEFAULT_FRAME_STYLE | wxMAXIMIZE);             /*wxDEFAULT_FRAME_STYLE | wxMAXIMIZE */
+        subframe -> SetTitle ("File List"); // not visible in MSW
+        subframe -> SetBackgroundColour(wxColour(0, 255, 0));
+        subframe -> Show(TRUE) ;
+        canvas = new MyCanvas ((wxWindow *)subframe, wxPoint (0,0), wxSize(400,500) );
+        canvas->SetScrollbars(20, 20, 50, 50);
+
+        MyDirCtrl = new wxGenericDirCtrl (m_leftWindow1, -1, rootdir, wxPoint (0,0),
+            wxSize(100,200), wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER|wxDIRCTRL_DIR_ONLY);
+        MyDirCtrl->SetPath (rootdir);
+        neverdone = false ;
+        wxSizeEvent e;
+        OnSize (e) ;
+        wxTreeEvent t ;
+        OnSelChange (t) ;
+    }
+}
+
+
+void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
+{
+    Close(TRUE);
+}
+
+
+void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+{
+    (void)wxMessageBox("wxPlore\nAuthor: Chris Elliott(c) 2000-2001", "About wxPlore");
+}
+
+
+void MyFrame::OnSashDrag(wxSashEvent& event)
+{
+    if (event.GetDragStatus() == wxSASH_STATUS_OUT_OF_RANGE)
+        return;
+
+    switch (event.GetId())
+    {
+        case ID_WINDOW_TOP:
+        {
+            m_topWindow->SetDefaultSize(wxSize(1000, event.GetDragRect().height));
+            break;
+        }
+        case ID_WINDOW_LEFT1:
+        {
+            m_leftWindow1->SetDefaultSize(wxSize(event.GetDragRect().width, event.GetDragRect().height));
+            break;
+        }
+    }
+    wxLayoutAlgorithm layout;
+    layout.LayoutMDIFrame(this);
+
+    // Leaves bits of itself behind sometimes
+//    GetClientWindow()->Refresh();
+}
+
+
+void MyFrame::OnSize(wxSizeEvent& WXUNUSED(event))
+{
+
+    int w,h, wf,hf ;
+    GetSize (&wf,&hf) ;
+    m_leftWindow1 -> GetSize (&w,&h) ;
+    w = w-4;
+    h = h-4;
+    if (!neverdone) MyDirCtrl -> SetSize ( w,h );
+
+    wxLayoutAlgorithm layout;
+    layout.LayoutMDIFrame(this);
+
+}
+
+
+int ListCompareNamesCaseSens(const TFileData ** arg1, const TFileData ** arg2)
+{
+    TFileData FD1 = **arg1 ;
+    TFileData FD2 = **arg2 ;
+
+    wxASSERT_MSG(TRUE, wxString("Comparing... ") + FD1.filename + " with " + FD2.filename);
+    return ( FD1.filename.Cmp(FD2.filename));
+}
+
+
+int ListCompareNamesCaseInSens(const TFileData ** arg1, const TFileData ** arg2)
+{
+    TFileData FD1 = **arg1 ;
+    TFileData FD2 = **arg2 ;
+    return ( FD1.filename.Upper().Cmp(FD2.filename.Upper()));
+}
+
+
+int ListCompareExt(const TFileData ** arg1, const TFileData ** arg2)
+{
+    TFileData FD1 = **arg1 ;
+    TFileData FD2 = **arg2 ;
+
+    int i = FD1.ext.Upper().Cmp(FD2.ext.Upper()) ;
+    if (i == 0) i = ListCompareNamesCaseInSens(arg1, arg2) ;
+    return i ;
+}
+
+
+int ListCompareMime(const TFileData ** arg1, const TFileData ** arg2)
+{
+    TFileData FD1 = **arg1 ;
+    TFileData FD2 = **arg2 ;
+
+    int i = FD1.mime.Cmp(FD2.mime) ;
+    if (i == 0) i = ListCompareNamesCaseInSens(arg1, arg2) ;
+    return i ;
+}
+
+
+int ListCompareDate(const TFileData ** arg1, const TFileData ** arg2)
+{
+    TFileData FD1 = **arg1 ;
+    TFileData FD2 = **arg2 ;
+
+    int i;
+    if ( FD1.t.IsLaterThan  (FD2.t) ) i =  1 ;
+    if ( FD1.t.IsEarlierThan(FD2.t) ) i = -1 ;
+    if ( FD1.t.IsEqualTo    (FD2.t) ) i = ListCompareNamesCaseInSens(arg1, arg2) ;
+    return i ;
+}
+
+// only ever called in UNIX
+void MyFrame::OnManChange (wxTreeEvent & event)
+{
+    wxTheMimeTypesManager->ClearData() ;
+    int i = manbox -> GetSelection () ;
+    switch (i)
+        {
+        case 0 :     wxTheMimeTypesManager->Initialize( 0 );
+                break ;
+        case 1 :     wxTheMimeTypesManager->Initialize( 1 );
+                break ;
+        case 2 :     wxTheMimeTypesManager->Initialize( 2 );
+                break ;
+        case 3 :     wxTheMimeTypesManager->Initialize( 4 );
+                break ;
+        case 4 :     wxTheMimeTypesManager->Initialize( 8 );
+                break ;
+        default :     wxTheMimeTypesManager->Initialize( 0 );
+                break ;
+        }
+        
+
+    canvas -> FileList -> Clear () ;
+    canvas -> IcoList -> Clear () ;
+
+    OnSelChange (event) ;
+
+}
+
+
+void MyFrame::OnSelChange (wxTreeEvent & event)
+{
+    bool useMime = false ;
+    bool mimeMatch ;
+    wxString sMime, sMimePat ;
+    if (!neverdone)
+    {
+
+        canvas -> FileList -> Clear ();
+        canvas -> FileIndex = -1 ;
+
+        wxString sDir = MyDirCtrl->GetPath ();
+
+        wxString sMask = maskbox -> GetValue ();
+        if (sMask.Contains(wxString("/")))
+        {
+            sMimePat = sMask ;
+            sMask = sMaskString ;
+            useMime = true ;
+        }
+        wxString filename ;
+//        wxASSERT_MSG(FALSE, wxString("Directory is :") + sDir );
+        wxDir searchDir( sDir );
+        int iHide = wxDIR_FILES ;
+        if (hiddencheck->GetValue() ) iHide = iHide | wxDIR_HIDDEN ; 
+        if (searchDir.IsOpened() )
+        {
+        bool bFileFound = searchDir.GetFirst(&filename, sMask, iHide);
+        while ( bFileFound )
+        {
+            TFileData  * pFD = new TFileData ( sDir + separator + filename );
+            wxDateTime td = wxDateTime( wxFileModificationTime ( sDir + separator + filename )  ) ;
+            pFD -> t = td ;
+
+            bool icoNotFound = true ;
+            int iIndex = 0 ;
+            TIcoDataList::Node *node = canvas -> IcoList->GetFirst();
+            while (node && icoNotFound)
+            {
+                TIcoData * icoData = node->GetData();
+                if ( icoData->ext.IsSameAs (pFD ->ext) )
+                {
+                    icoNotFound = false ;
+                    pFD -> icoIndex = iIndex ;
+                }
+                iIndex ++ ;
+                node = node->GetNext();
+            }
+            wxString sTmp = dot + pFD -> ext;
+            wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(pFD->ext);
+
+            if (icoNotFound)
+            {
+                wxIcon FileIcon ;
+                if (( ft ) && (ft ->GetIcon(&FileIcon) ) )
+                {
+                    pFD -> icoIndex =  canvas -> IcoList->GetCount () ;
+                    TIcoData * myData = new TIcoData(pFD->ext, true, FileIcon) ;
+                    canvas -> IcoList->Append (myData) ;
+                }
+                else
+                {
+                    TIcoData * myData = new TIcoData(pFD->ext, false) ;
+                    canvas -> IcoList->Append (myData) ;
+                }
+
+            }
+
+            sMime = "";
+            mimeMatch = false ;
+            if (( ft ) && (ft ->GetMimeType(& sMime ) ) )
+            {
+                pFD->mime = sMime ;
+                mimeMatch = sMime.Matches (sMimePat) ;
+            }
+            if (ft) delete ft ;
+
+            if (!useMime) canvas -> FileList -> Append ( pFD );
+            if (useMime && mimeMatch) canvas -> FileList -> Append ( pFD );
+
+            bFileFound = searchDir.GetNext(&filename);
+        }
+        }
+        switch (sortbox->GetSelection())
+        {
+            /*
+            "name A-z",
+            "name a-z",
+            "ext",
+            "mimetype",
+            "time"
+            */
+            case 0 :    canvas -> FileList -> Sort (ListCompareNamesCaseSens);
+            break ;
+            case 2 :    canvas -> FileList -> Sort (ListCompareExt);
+            break ;
+            case 3 :    canvas -> FileList -> Sort (ListCompareMime);
+            break ;
+            case 4 :    canvas -> FileList -> Sort (ListCompareDate);
+            break ;
+            case 1 :
+            default:    canvas -> FileList -> Sort (ListCompareNamesCaseInSens);
+        }
+
+        canvas -> SetScrollbars(20, boxheight, 50, 1 + canvas -> FileList -> GetCount ());
+        canvas -> Refresh ( );
+
+        wxString sText ;
+        sText.Printf ("In this directory, %d matching files were found", canvas -> FileList -> GetCount() );
+        SetStatusText ( sText );
+        SetTitle (wxString("wXploring ... ") + sDir ) ;
+    }
+}
+
+
+void MyFrame::OnSelActivate (wxTreeEvent & event)
+{
+    if (!neverdone)
+    {
+        wxString sDir = MyDirCtrl->GetPath ();
+        wxExecute ( argv_0 + space +  "-n" + space + sDir) ;
+    }
+
+}
+
+
+BEGIN_EVENT_TABLE(MyCanvas, wxScrolledWindow)
+
+EVT_MENU_RANGE(RC_RUN, RC_RUN + 10, MyCanvas::OnRun)
+EVT_MENU(RC_ASSOC_ALL, MyCanvas::OnAll)
+EVT_MENU_RANGE(RC_EXE, RC_EXE+10, MyCanvas::OnChange)
+EVT_MENU(RC_ICON, MyCanvas::OnIcon)
+EVT_MENU(RC_DESC, MyCanvas::OnDesc)
+EVT_MENU(RC_MIME, MyCanvas::OnMime)
+EVT_MENU(RC_NOTHING, MyCanvas::OnNothing)
+EVT_MENU(RC_ADD, MyCanvas::OnAdd)
+
+EVT_LEFT_DOWN(MyCanvas::OnLeftDown)
+EVT_LEFT_UP(MyCanvas::OnLeftUp)
+EVT_LEFT_DCLICK(MyCanvas::OnLeftDClick)
+EVT_RIGHT_UP(MyCanvas::OnRightUp)
+END_EVENT_TABLE()
+
+MyCanvas::MyCanvas(wxWindow *parent, const wxPoint& pos, const wxSize& size)
+: wxScrolledWindow(parent, -1, pos, size, wxSUNKEN_BORDER|wxVSCROLL|wxHSCROLL)
+{
+
+
+    FileList = new TFileDataList () ;
+    FileList -> DeleteContents (TRUE);
+    FileIndex = -1 ;
+
+    IcoList = new TIcoDataList ();
+    IcoList -> DeleteContents (TRUE);
+
+    my_popup_menu = new wxMenu ;
+    my_popup_menu-> Append (RC_RUN, "&Run ");
+    my_popup_menu-> AppendSeparator();
+
+    my_popup_menu-> Append (RC_EXE,  "Change E&xe file ");
+    my_popup_menu-> Append (RC_ICON, "Change &Icon");
+    my_popup_menu-> Append (RC_MIME, "Change &MimeType");
+    // actually we need to make this depend on the shell\\commands
+    my_popup_menu-> AppendSeparator();
+}
+
+
+void MyCanvas::OnDraw(wxDC& dc)
+{
+    int w, h, xs, ys, ye;
+    GetClientSize (&w,&h) ;
+    GetViewStart (&xs, &ys);
+    if (ys < 0) ys = 0 ;
+    ye = ys + h / boxheight ;
+    if (ye > int(FileList -> GetCount())) ye = FileList -> GetCount ();
+
+    wxFont myFont (10, wxSWISS, wxNORMAL,wxNORMAL );
+    dc.SetFont (myFont);
+    wxString p,f,e ;
+    int i ;
+    wxIcon FileIcon ;
+    for (i=ys; i < ye; i++)
+    {
+        TFileData * fd = FileList -> Item (i) -> GetData () ;
+        wxSplitPath (fd -> filename, &p, &f, &e);
+        if (e.Len() > 0 ) f = f + dot + e  ;
+        dc.DrawText ( fd -> t .Format ("%d/%m/%y %H:%M:%S"), 4 + boxheight, i * boxheight) ;
+                                 // bug we could find the length of the longest string...
+        dc.DrawText ( f, 140 + boxheight, i * boxheight) ;
+        if ( fd->IsExecutable () ) dc.DrawText ("*",130 + boxheight, i * boxheight) ;
+        // bug we could find the length of the string...
+        dc.DrawText ( fd->mime,  240 + boxheight, i * boxheight) ;
+
+        if ( fd -> icoIndex  >= 0)
+        {
+            TIcoData * iD = IcoList -> Item ( fd -> icoIndex ) -> GetData () ;
+            if (iD->icoPresent)
+            {
+                FileIcon = iD->ico ;
+                       int wi, hi ;
+                       wi = FileIcon.GetWidth();
+                       hi = FileIcon.GetHeight();
+                //bug here ?? FileIcon.GetHeight(), FileIcon.GetWidth() appear to return zero so use 32 as default size
+                       if (hi <1) hi = 32 ;
+                       if (wi <1) wi = 32 ;
+                       wxBitmap bI ( wi, hi ) ;
+
+
+                wxMemoryDC memdc;
+                memdc.SelectObject( bI );
+                memdc.Clear();
+                memdc.DrawIcon (FileIcon, 0,0);
+                memdc.SelectObject (wxNullBitmap);
+                wxImage myimage = wxImage(bI);
+                myimage.Rescale(boxheight-2, boxheight-2) ;
+                wxBitmap bm = myimage.ConvertToBitmap() ;
+                dc.DrawBitmap ( bm, 2, i * boxheight) ;
+            }
+        }
+    }
+    if (FileIndex >=0)
+    {
+        dc.SetLogicalFunction ( wxINVERT );
+        dc.SetBrush(wxBrush("DARK SLATE GREY", wxSOLID));
+        dc.DrawRectangle  (0,FileIndex * boxheight, w, boxheight);
+        dc.SetLogicalFunction ( wxCOPY );
+    }
+}
+
+
+void MyCanvas::OnLeftDown(wxMouseEvent & event)
+{
+    wxClientDC dc(this);
+    PrepareDC(dc);
+    wxPoint pt(event.GetLogicalPosition(dc));
+    int iOffset = pt.y / boxheight ;
+
+    if ( (FileIndex >=0)  && (iOffset == FileIndex) )
+    {
+        // have file
+        TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+        wxString sFile = fd -> filename ;
+        wxASSERT_MSG(TRUE, sFile + " was selected for Drag Drop ");
+
+        // start drag operation
+        wxFileDataObject textData;
+        textData.AddFile(sFile); // only sends the text not the file :-(
+
+        wxDropSource source(textData, this);
+        /*                                ,
+                                    wxDROP_ICON(dnd_copy),
+                                    wxDROP_ICON(dnd_move),
+                                    wxDROP_ICON(dnd_none));
+        */
+        const char *pc;
+
+        switch ( source.DoDragDrop(FALSE) ) // true will allow move
+        {
+            case wxDragError:   pc = "Error!";    break;
+            case wxDragNone:    pc = "Nothing";   break;
+            case wxDragCopy:    pc = "Copied";    break;
+            case wxDragMove:    pc = "Moved";     break;
+            case wxDragCancel:  pc = "Cancelled"; break;
+            default:            pc = "Huh?";      break;
+        }
+
+        frame -> SetStatusText(wxString("Drag result: ") + pc);
+    }
+}
+
+
+void MyCanvas::OnLeftUp (wxMouseEvent& event)
+{
+
+    wxClientDC dc(this);
+    PrepareDC(dc);
+    wxPoint pt(event.GetLogicalPosition(dc));
+    int iOffset = pt.y / boxheight ;
+
+    if (iOffset < int(FileList -> GetCount () ) ) FileIndex = iOffset ;
+    Refresh ();
+
+}
+
+
+void MyCanvas::OnLeftDClick (wxMouseEvent& event)
+{
+    Run_cmd (0);
+}
+
+
+void MyCanvas::OnRightUp (wxMouseEvent& event)
+{
+    wxClientDC dc(this);
+    PrepareDC(dc);
+    wxPoint pt(event.GetLogicalPosition(dc));
+    int iOffset = pt.y / boxheight ;
+
+    wxString sTmp, sOne ;
+
+    if ( (FileIndex >=0) && (iOffset < int(FileList -> GetCount () ) ) )
+    {
+        TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+
+        // have file
+
+        myVerbs.Clear ();
+        myCommands.Clear () ;
+        nCommands = 0 ;
+        sTmp = fd->ext ;
+
+        bool hasmenu = false ;
+        if (fd -> IsExecutable () )
+        {
+            delete    my_popup_menu ;
+            my_popup_menu = new wxMenu ("Executable File");
+            my_popup_menu-> Append (RC_RUN, "&Run ");
+            hasmenu = true ;
+        }
+        else
+        {
+                                 // fd->ext
+            wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(sTmp);
+            if ( ft )
+            {
+                delete   my_popup_menu ;
+                // has association
+                nCommands = ft->GetAllCommands (&myVerbs, &myCommands, wxFileType::MessageParameters("", ""))  ;
+                if (nCommands > 0)
+
+                {
+
+                    for (size_t i = 1; i < size_t(nCommands); i++)
+                    {
+                        // there must be an easier way to uppercase the first letter only...
+                        sTmp = myVerbs [i] ;
+                        sOne = sTmp.Left(1);
+                        sOne.MakeUpper () ;
+                        sTmp = sTmp.Mid(1) ;
+                        myVerbs [i] = sOne + sTmp ;
+                    }
+                }
+                wxString sDesc = "";
+                ft->GetDescription ( &sDesc ) ;
+                if ( sDesc.Len () < 2 ) sDesc = "Associated File" ;
+                my_popup_menu = new wxMenu (sDesc);
+                                 // command is in 0 element
+
+                if (nCommands > 0)
+                {
+                    my_popup_menu-> Append (RC_RUN, "&Run ");
+                    for (int i = 1; i < nCommands; i++)
+                    {
+                        my_popup_menu-> Append (RC_RUN + i, wxString("&") + myVerbs[i]);
+                    }
+                    my_popup_menu-> AppendSeparator();
+                    my_popup_menu-> Append (RC_EXE,  "Change E&xe file ");
+                }
+
+                my_popup_menu-> Append (RC_ICON, "Change &Icon");
+                my_popup_menu-> Append (RC_MIME, "Change &MimeType");
+                my_popup_menu-> Append (RC_DESC, "Change &Description");
+                my_popup_menu-> AppendSeparator();
+                // actually we use the shell\\commands
+                for (int i = 1; i < nCommands; i++)
+                {
+                    my_popup_menu-> Append (RC_EXE + i, wxString("Change &") + myVerbs[i] + " command");
+                }
+                if (nCommands > 1) my_popup_menu-> AppendSeparator() ;
+                my_popup_menu-> Append (RC_ADD, "&New Action");
+                my_popup_menu-> Append (RC_NOTHING, "&Remove Association");
+                hasmenu = true ;
+
+                delete ft ;
+            }
+        }                         // if not an executable file
+        if (!hasmenu)
+        {
+            my_popup_menu = new wxMenu ("Unknown File Type");
+            my_popup_menu-> Append (RC_ASSOC_ALL, "Associate");
+
+        }
+
+        PopupMenu( my_popup_menu, event.GetX(), event.GetY() );
+    }
+}
+
+
+void MyCanvas::OnRun (wxCommandEvent& event)
+{
+    Run_cmd (event.GetId() - RC_RUN) ;
+}
+
+
+void MyCanvas::OnChange (wxCommandEvent & event)
+{
+    // change the .exe file associated with ext
+    // No test for non-existent data? and .exe files...
+    // This should happen before the menu is popped up
+
+    wxString sCommand, sVerb, sTmp ;
+
+                                 // for open, etc
+    int nCommand = event.GetId() - RC_EXE ;
+    sCommand = myCommands [ nCommand ] ;
+    sVerb = myVerbs [nCommand] ;
+    wxString sPrompt = wxString("Choose New Executable to Use for ") + sVerb + " command";
+
+    // deal with DDE
+    if (sCommand.StartsWith("WX_DDE") )
+    {
+        wxASSERT_MSG(FALSE, sCommand + " \nused DDE in OnChange\n\nSorry! Current program cannot edit DDE strings :-(");
+    }
+    else
+    {
+        // in windows we sometimes get "%1" at the end of the string
+        sTmp = sCommand.BeforeLast('"');
+        if (sTmp.Len () > 0 ) sCommand = sTmp ;
+        sTmp = sCommand.BeforeLast('"');
+        if (sTmp.Len () > 0 ) sCommand = sTmp ;
+
+        // in windows we sometimes get "" around the commandline
+        sTmp = sCommand.BeforeLast('"');
+        if (sTmp.Len () > 0 ) sCommand = sTmp ;
+        sTmp = sCommand.AfterFirst('"');
+        if (sTmp.Len () > 0 ) sCommand = sTmp ;
+        wxASSERT_MSG(TRUE, sCommand + " was modified to this in OnChange");
+
+        wxString p,f,e ;
+        wxSplitPath (sCommand, &p, &f, &e);
+        if (e.Len() > 0) f = f + wxFILE_SEP_EXT + e;
+        sCommand = wxFileSelector (sPrompt, p, f, e, sExe, wxFILE_MUST_EXIST );
+
+        if (sCommand.Len() > 1)
+        {
+                    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+                    wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(fd->ext);
+                    ft ->SetCommand(sCommand, sVerb) ;
+            delete ft ;
+            IcoList -> Clear () ;
+            wxTreeEvent te;
+            frame -> OnSelChange (te) ;
+
+        }
+    }
+
+}
+
+
+void MyCanvas::OnAll (wxCommandEvent & WXUNUSED(event))
+{
+    // we have no association so we just need to choose an exe file and
+    // set it, the icon and the mimetype together
+
+    wxString p,f,e, sCommand;
+
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+    p = sBinRootDir;
+
+    wxString sPrompt = "Choose New Executable to Use" ;
+
+    sCommand = wxFileSelector (sPrompt, p, f, e, sExe, wxFILE_MUST_EXIST );
+    if (sCommand.Len () > 1)
+    {
+        wxString sTmp;
+        wxSplitPath ( sCommand, NULL, &sTmp, NULL);
+                            
+        wxFileTypeInfo fti ((wxString("application/x-")+ sTmp).c_str(), // mimetype
+                            sCommand.c_str(),   //open command
+                            NULL,               // print command
+                            (sTmp + " data file").c_str(), // descritpion
+                            fd -> ext.c_str(),  // first extension ++ more
+                            NULL );             // NULL ends list
+        wxFileType * ft = wxTheMimeTypesManager->Associate (fti);
+        if (!ft) wxASSERT_MSG(FALSE, "Errror associating " );
+          delete ft ;
+    }
+
+    IcoList -> Clear () ;
+    wxTreeEvent te;
+    frame -> OnSelChange (te) ;
+
+}
+
+
+void MyCanvas::OnIcon (wxCommandEvent & WXUNUSED(event))
+{
+    // change the icon
+
+    wxString sFile, p,f,e ;
+    int i = 0;                     // only handle cases where we have the first icon in the file
+    wxIcon FileIcon ;
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+
+    wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(fd->ext);
+    if ( ft )
+    {
+        ft ->GetIcon (&FileIcon, &sFile, &i);
+
+        MyIconSelectorDialog AnIconSelectorDialog(this, &i, &sFile) ;
+        if (wxID_OK == AnIconSelectorDialog.ShowModal ())
+        {
+            ft ->SetDefaultIcon (sFile, i);
+            IcoList -> Clear () ;
+            wxTreeEvent e;
+            frame -> OnSelChange (e) ;
+
+        }
+        delete ft ;
+
+    }
+
+}
+
+
+void MyCanvas::OnMime (wxCommandEvent & WXUNUSED(event))
+{
+    // Change the mime type
+
+    wxString p,f,e ;
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+    wxSplitPath (fd -> filename, &p, &f, &e);
+    wxString sMime = fd->mime ;
+
+    sMime = wxGetTextFromUser ("Mime type example: application/x-exefile", "Please enter new Mime type", sMime);
+    if (sMime.Len () > 0)
+
+    {
+        // set it
+                      
+        wxFileTypeInfo fti (sMime.c_str(),
+                            NULL,
+                            NULL,
+                            NULL,
+                            e.c_str(),
+                            NULL );
+        wxFileType * ft2 = wxTheMimeTypesManager->Associate (fti);
+        if (!ft2) wxASSERT_MSG(FALSE, "Errror associating " );
+          delete ft2 ;
+
+        FileList -> Clear () ;
+        wxTreeEvent e;
+        frame -> OnSelChange (e) ;
+    }
+
+}
+
+
+void MyCanvas::OnNothing (wxCommandEvent & WXUNUSED(event))
+{
+
+    // delete all the association
+    wxString p,f,e, sCommand;
+
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+    // must hav association to delete
+    wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(fd -> ext);
+    ft ->Unassociate() ;
+    delete ft ;
+
+    FileList -> Clear () ;
+    IcoList -> Clear () ;
+    wxTreeEvent te;
+    frame -> OnSelChange (te) ;
+
+}
+
+
+void MyCanvas::Run_cmd (int nCommandIndex)
+{
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+    wxString sFile = fd->filename ;
+    wxString sCommand ;
+    wxFileType * ft ;
+
+    wxString sQuestion = "wxPlore: Sorry, Can't Run this file" ;
+    int iQStyle = wxOK | wxICON_EXCLAMATION ;
+
+    // case 1 its an executable file
+    if ( fd->IsExecutable ())
+    {
+        sCommand = sFile ;
+        sQuestion = "wxPlore: Do You want to Run ?" ;
+        iQStyle = wxYES_NO | wxICON_QUESTION ;
+    }
+
+    else
+    {
+        // case 2 its an associated file
+
+        ft = wxTheMimeTypesManager->GetFileTypeFromExtension(fd->ext);
+        int nCommands = -1 ;
+        if ( ft )
+        {
+            myVerbs.Clear ();
+            myCommands.Clear () ;
+            nCommands = ft ->GetAllCommands (&myVerbs, &myCommands, wxFileType::MessageParameters(sFile, ""))  ;
+            if (nCommands > 0)
+            {
+                sQuestion = wxString("wxPlore: Do You want to ") + myVerbs[nCommandIndex] + " ?" ;
+                sCommand = myCommands [nCommandIndex];
+                if (sCommand.StartsWith("WX_DDE#")) sQuestion = "wxPlore: Do You want to use DDE to Run ?" ;
+                iQStyle = wxYES_NO | wxICON_QUESTION ;
+            }
+            delete ft ;
+        }
+    }
+
+    if (wxYES == wxMessageBox (sCommand, sQuestion, iQStyle )  )
+    {
+        // run the command
+        wxExecute ( sCommand ) ; // will handle WX_DDE strings
+    }
+
+}
+
+
+void MyCanvas::OnAdd (wxCommandEvent & WXUNUSED(event))
+{
+    wxString sVerb ;
+    sVerb = wxGetTextFromUser ("New command name: e.g. Edit with myfile", "Please enter new Command", sVerb);
+    if (sVerb.Len() >1)
+    {
+        wxString p,f,e, sCommand;
+
+        TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+        p = sBinRootDir;
+
+        wxString sPrompt = wxString("Choose New Executable to Use for ") + sVerb;
+
+        sCommand = wxFileSelector (sPrompt, p, f, e, sExe, wxFILE_MUST_EXIST );
+
+        if (sCommand.Len () > 1)
+        {
+            wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(fd -> ext);
+            if ( !ft ) wxASSERT_MSG(FALSE, "ft allocation error");
+            ft ->SetCommand(sCommand,sVerb) ;
+            delete ft ;
+        }
+    }
+}
+
+
+void MyCanvas::OnDesc (wxCommandEvent & WXUNUSED(event))
+
+{
+    // Change the Description
+
+    wxString p,f,e, sDesc ;
+    TFileData * fd = FileList -> Item (FileIndex) -> GetData () ;
+    e = fd->ext ;
+    wxFileType * ft = wxTheMimeTypesManager->GetFileTypeFromExtension(e);
+    if (ft)
+    {
+        ft -> GetDescription ( &sDesc );
+        sDesc = wxGetTextFromUser ("Description example: Plain Text Document", "Please enter a file Description for this extension", sDesc);
+        if (sDesc.Len () > 0)
+            {
+            // set it
+            wxFileTypeInfo fti (fd->mime.c_str(), // mimetype
+                                NULL,             // opencommand
+                                NULL,             // print command
+                                sDesc.c_str(),    // description
+                                e.c_str(),        // extension
+                                NULL ); // last one as "" won't do !!
+            wxFileType * ft2 = wxTheMimeTypesManager->Associate (fti);
+            if (!ft2) wxASSERT_MSG(FALSE, "Errror associating " );
+              delete ft2 ;
+
+            }
+        delete ft ;    
+        }
+}
+
+
+MyCanvas::~MyCanvas ()
+{
+    IcoList -> Clear ();
+    FileList -> Clear ();
+    myVerbs.Clear ();
+    myCommands.Clear () ;
+
+}
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.h wxWindows/contrib/samples/wxplore/wxplore.h
--- wxWindows/contrib/samples/wxplore.empty/wxplore.h    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.h    Fri Mar 23 11:43:32 2001
@@ -0,0 +1,219 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wxplore.h
+// Purpose:     registry sample
+// Author:      Chris Elliott, based on sashtest.cpp by Julian Smart
+// Modified by:
+// Created:     04/01/98
+// Copyright:   (c) Julian Smart, Chris Elliott
+// Licence:       wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#define separator wxFILE_SEP_PATH
+
+#define newline "\n"
+#define dot "."
+#define space " "
+#define boxheight 20
+#define InvComma wxString('"');
+
+#include <wx/toolbar.h>
+
+class TFileData
+{
+    public :
+                                 // filename is full path and extension...
+        wxString filename, ext, mime; int icoIndex ;
+        wxDateTime t;
+
+        TFileData ( const wxString & f, const wxString & e, const wxString & m, const time_t & tt )
+        {
+            filename = f;
+            ext = e,
+                mime = m,
+                t = wxDateTime (t) ;
+            icoIndex = -1 ;
+        }       ;
+
+        TFileData ( const wxString &  f, const wxString & e, const wxString & m )
+        {
+            filename = f;
+            ext = e,
+                mime = m ;
+            icoIndex = -1 ;
+        }       ;
+
+        TFileData ( const wxString &  f, const wxString & e  )
+        {
+            filename = f;
+            ext = e ;
+            icoIndex = -1 ;
+        } ;
+
+        TFileData ( const wxString & f  )
+        {
+            filename = f;
+            wxSplitPath (f, NULL, NULL, &ext);
+            icoIndex = -1 ;
+
+        } ;
+
+        bool IsExecutable ()
+        {
+            bool result = false ;
+        #ifdef __UNIX__
+            struct stat myFileStats ;
+            stat ( filename, &myFileStats);
+            if ( myFileStats.st_mode & S_IXUSR ) result = true ;
+        #endif
+        #ifdef __WXMSW__
+            // windows, but we should be able to do a better test
+
+            DWORD dTmp;
+                                 // requires full path
+                                 // this is supposed to only work in winNT 2000 but I can't test it
+                
+            bool bTmp = GetBinaryType ( filename, &dTmp) ;
+
+            if (bTmp != 0) result = true ;
+
+            if ( ( ext.IsSameAs ("exe", FALSE) ) || ( ext.IsSameAs ("com", FALSE) )|| ( ext.IsSameAs ("bat", FALSE) ) )
+                result = true ;
+        #endif
+            return result ;
+        };
+
+} ;                                 // end of class TFileData
+
+class TIcoData
+{
+    public:
+        wxString ext; bool icoPresent; wxIcon ico ;
+
+        TIcoData ( wxString & e, bool b, wxIcon & i ) { ext = e; icoPresent = b; ico = i ; };
+        TIcoData ( wxString & e, bool b ) { ext = e; icoPresent = b;  };
+
+} ;
+
+WX_DECLARE_LIST(TFileData, TFileDataList);
+WX_DECLARE_LIST(TIcoData, TIcoDataList);
+#include <wx/listimpl.cpp>
+WX_DEFINE_LIST(TFileDataList);
+WX_DEFINE_LIST(TIcoDataList);
+
+// Define a new application
+class MyApp: public wxApp
+{
+    public:
+        bool OnInit(void);
+};
+
+class MyCanvas: public wxScrolledWindow
+{
+    public:
+        MyCanvas(wxWindow *parent, const wxPoint& pos, const wxSize& size) ;
+        ~MyCanvas () ;
+        virtual void OnDraw(wxDC& dc);
+
+        void OnMouse (wxMouseEvent& event);
+        void OnLeftDown(wxMouseEvent &event) ;
+        void OnLeftUp (wxMouseEvent& event);
+        void OnLeftDClick( wxMouseEvent& event);
+        void OnRightUp (wxMouseEvent& event);
+
+        void OnRun  (wxCommandEvent & event) ;
+        void OnAll  (wxCommandEvent & WXUNUSED(event)) ;
+        void OnChange  (wxCommandEvent & event);
+        void OnDesc  (wxCommandEvent & event);
+        void OnIcon (wxCommandEvent & WXUNUSED(event));
+        void OnMime (wxCommandEvent & WXUNUSED(event));
+        void OnNothing (wxCommandEvent & WXUNUSED(event));
+        void OnAdd  (wxCommandEvent & WXUNUSED(event));
+        void Run_cmd (int nCommand) ;
+        TFileDataList * FileList ;
+        TIcoDataList * IcoList ;
+
+        int FileIndex ; int nCommands ;
+        wxMenu * my_popup_menu ;
+
+        wxArrayString myVerbs, myCommands ;
+
+        DECLARE_EVENT_TABLE()
+};
+
+// Define a new frame
+class MyFrame: public wxMDIParentFrame
+{
+    public:
+
+        MyFrame(wxWindow *parent, const wxWindowID id, const wxString& title, const wxPoint& pos,
+            const wxSize& size, const long style, wxString startDir);
+
+        void OnSize(wxSizeEvent& event);
+        void OnAbout(wxCommandEvent& event);
+        void OnQuit(wxCommandEvent& event);
+        void OnSashDrag(wxSashEvent& event);
+        void OnSelChange (wxTreeEvent & event);
+        void OnManChange (wxTreeEvent & event);
+        void OnSelActivate (wxTreeEvent& event);
+        void OnIdle (wxIdleEvent & WXUNUSED(event)) ;
+
+        wxString argv_0 ;
+
+    protected:
+        wxSashLayoutWindow* m_topWindow;
+        wxSashLayoutWindow* m_leftWindow1;
+        wxSashLayoutWindow* m_bottomWindow;
+        wxMDIChildFrame * subframe ;
+        wxGenericDirCtrl * MyDirCtrl ;
+        wxTextCtrl* textWindow ;
+        MyCanvas * canvas ;
+        wxChoice * sortbox ;
+        wxChoice * manbox ;
+        wxTextCtrl * maskbox ;
+        wxCheckBox * hiddencheck ;
+
+    private:
+        bool neverdone ;
+        wxString rootdir ;
+
+        DECLARE_EVENT_TABLE()
+};
+
+#define XPL_QUIT        1
+#define XPL_NEW         2
+#define XPL_REFRESH     3
+#define XPL_CHILD_QUIT  4
+#define XPL_ABOUT       5
+#define XPL_UPDATE 6
+
+#define ID_WINDOW_TOP       100
+#define ID_WINDOW_LEFT1     101
+#define ID_WINDOW_LEFT2     102
+#define ID_WINDOW_BOTTOM    103
+
+enum
+{
+    RC_ASSOC_ALL = 1,
+    RC_EDIT,
+    RC_ICON,
+    RC_NOTHING,
+    RC_DESC,
+    RC_MIME,
+    RC_ADD,
+    RC_RUN,
+    SORT_BOX,
+    MAN_BOX
+} ;
+
+const int RC_EXE = 100 ;
+const int RC_CHANGE = 200 ;
+
+
+#ifdef __WXMSW__
+const wxString sWarn1 = "Please only click Yes if you have a recent backup of the registry" ;
+const wxString sWarn2 = "Warning: this program is a test program to change registry entries" ;
+#else
+const wxString sWarn1 = "This program is a test program to change entries in \n.mailcap\n.mime.types\n.gnome\mime-info directory\nPlease only click Yes if you have a recent backup" ;
+const wxString sWarn2 = "Warning: ";
+
+#endif
Binary files wxWindows/contrib/samples/wxplore.empty/wxplore.ico and wxWindows/contrib/samples/wxplore/wxplore.ico differ
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.mak wxWindows/contrib/samples/wxplore/wxplore.mak
--- wxWindows/contrib/samples/wxplore.empty/wxplore.mak    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.mak    Fri Mar 23 11:21:30 2001
@@ -0,0 +1,44 @@
+PROJECT = wxplore
+RESFILES = wxplore.res
+
+
+#-----------------------------------------------------------------------------
+#this is a source makefile for Borland CBuilder IDE v1,3
+#You may need to add \ at the end of the lines if your editor breaks them up
+#-----------------------------------------------------------------------------
+
+
+OBJFILES =wxplore.obj icondlg.obj
+RESDEPEN = $(RESFILES)
+LIBFILES =
+
+!ifndef BCB
+BCB = $(MAKEDIR)\..
+!endif
+#-----------------------------------------------------------------------------
+CFLAG1 = -Od -w- -k -r -v -vi -a1 -c   -w-hid
+#disable optimisations debug byte align (matches my make for the library)
+CFLAG2 = -I$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ -H=BC32.CSM 
+PFLAGS = -U$(BCB)\lib;..\..\..\lib \
+   -I$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ -v 
+RFLAGS = -i$(BCB)\include;$(BCB)\include\vcl;..\..\..\include;..\..\..\src\msw;..\..\..\src\common;..\..\..\src\generic \
+   -DINC_OLE2;__WIN95__;__WXMSW__;__WINDOWS__;WIN32;__BIDE__ \
+   -I$(BCB)\include;..\..\..\include
+LFLAGS = -j$(BCB)\lib;..\..\..\lib \
+   -L$(BCB)\lib;..\..\..\lib -aa -Tpe -v -V4.0 -c 
+IFLAGS = 
+LINKER = tlink32
+#-----------------------------------------------------------------------------
+ALLOBJ = c0w32.obj $(OBJFILES)
+ALLRES = $(RESFILES)
+ALLLIB = $(LIBFILES) vcl.lib xpm.lib wx32.lib ole2w32.lib import32.lib \
+   cw32mt.lib odbc32.lib winpng.lib tiff.lib jpeg.lib  zlib
+#
+---------------------------------------------------------------------------
+.autodepend
+
+
+#-----------------------------------------------------------------------------
+$(PROJECT): $(OBJFILES) $(RESDEPEN)
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.rc wxWindows/contrib/samples/wxplore/wxplore.rc
--- wxWindows/contrib/samples/wxplore.empty/wxplore.rc    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.rc    Fri Mar 23 11:14:22 2001
@@ -0,0 +1,9 @@
+aaaa                    ICON        "wxplore.ico"
+
+wxSTD_MDIPARENTFRAME    ICON        "wxplore.ico"
+wxSTD_MDICHILDFRAME     ICON        "wxplore.ico"
+
+wxplore            ICON        "wxplore.ico"
+
+#include "wx/msw/wx.rc"
+
diff -Nrbu2 wxWindows/contrib/samples/wxplore.empty/wxplore.xpm wxWindows/contrib/samples/wxplore/wxplore.xpm
--- wxWindows/contrib/samples/wxplore.empty/wxplore.xpm    Wed Dec 31 19:00:00 1969
+++ wxWindows/contrib/samples/wxplore/wxplore.xpm    Fri Mar 23 11:14:22 2001
@@ -0,0 +1,45 @@
+/* XPM */
+static char *wxplore_xpm[] = {
+/* width height num_colors chars_per_pixel */
+"    32    32        6            1",
+/* colors */
+". c #000000",
+"# c #1130ff",
+"a c #4efafa",
+"b c #808080",
+"c c #ffff00",
+"d c #ffffff",
+/* pixels */
+"dddddddddddddddddddddddddddddddd",
+"dddddddddddddddddddddddddddddddd",
+"dddddddddddddddddddddddddddddddd",
+"dd...........................ddd",
+"dd.#########################.bdd",
+"dd.#########################.bdd",
+"dd...........................bdd",
+"dd.aaaaaaaaaaaaaaaaaaaaaaaaa.bdd",
+"dd.aaa..aaaaaaaaaaaaaaaaaaaa.bdd",
+"dd.aa.cc..baaaaaaaaaaaaaaaaa.bdd",
+"dd.aa.cccc.aaaaaaaaaaaaaaaaa.bdd",
+"dd.aa.cccc.aaaaaaaaaaaaaaaaa.bdd",
+"dd.aa......aa..aaaaaaaaaaaaa.bdd",
+"dd.aaaa.aaaa.cc..baaaaaaaaaa.bdd",
+"dd.aaaa.aaaa.cccc.aaaaaaaaaa.bdd",
+"dd.aaaa......cccc.aaaaaaaaaa.bdd",
+"dd.aaaa.aaaa......aa..aaaaaa.bdd",
+"dd.aaaa.aaaaaa.aaaa.cc..baaa.bdd",
+"dd.aaaa.aaaaaa.aaaa.cccc.aaa.bdd",
+"dd.aaaa.aaaaaa......cccc.aaa.bdd",
+"dd.aaaa.aaaaaaaaaaa......aaa.bdd",
+"dd.aaaa.aaaaa..aaaaaaaaaaaaa.bdd",
+"dd.aaaa.aaaa.cc..baaaaaaaaaa.bdd",
+"dd.aaaa.aaaa.cccc.aaaaaaaaaa.bdd",
+"dd.aaaa......cccc.aaaaaaaaaa.bdd",
+"dd.aaaa.aaaa......aa..aaaaaa.bdd",
+"dd.aaaa.aaaaaa.aaaa.cc..baaa.bdd",
+"dd...........................bdd",
+"dddbbbbbbbbbbbbbbbbbbbbbbbbbbbdd",
+"dddddddddddddddddddddddddddddddd",
+"dddddddddddddddddddddddddddddddd",
+"dddddddddddddddddddddddddddddddd"
+};

 	  	 

Index: src/osx/glcanvas_osx.cpp
===================================================================
--- src/osx/glcanvas_osx.cpp	(revision 59259)
+++ src/osx/glcanvas_osx.cpp	(working copy)
@@ -121,14 +121,14 @@
 }
 
 #endif // WXWIN_COMPATIBILITY_2_8
-
+#include <wx/wxcrtvararg.h>
 /* static */
 bool wxGLCanvas::IsAGLMultiSampleAvailable()
 {
     static int s_isMultiSampleAvailable = -1;
     if ( s_isMultiSampleAvailable == -1 )
         s_isMultiSampleAvailable = IsExtensionSupported("GL_ARB_multisample");
-
+wxPrintf("[IsAGLMultiSampleAvailable] s_isMultiSampleAvailable = %d\n", s_isMultiSampleAvailable );
     return s_isMultiSampleAvailable != 0;
 }
 
@@ -163,6 +163,7 @@
         return false;
 
     wxString extensions = wxString::FromAscii(glGetString(GL_EXTENSIONS));
+    wxPrintf("[IsExtensionSupported] %s\n", extensions);
 
     WXGLDestroyPixelFormat(fmt);
     WXGLDestroyContext(ctx);
Index: src/osx/carbon/glcanvas.cpp
===================================================================
--- src/osx/carbon/glcanvas.cpp	(revision 59259)
+++ src/osx/carbon/glcanvas.cpp	(working copy)
@@ -94,7 +94,7 @@
         aglDestroyPixelFormat(pixelFormat);
     }
 }
-
+#include <wx/wxcrtvararg.h>
 WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
 {
     GLint data[512];
@@ -111,125 +111,133 @@
         AGL_NONE
     };
 
+#define P(x) wxPrintf( "[WXGLChoosePixelFormat] %d: %s (%d) [arg=%d]\n", p -1, #x, x, arg-1 );
     const GLint *attribs;
     if ( !attribList )
     {
+    wxPrintf("[WXGLChoosePixelFormat] Using default policies\n");
         attribs = defaultAttribs;
     }
     else
     {
+    unsigned arg = -1;
         unsigned p = 0;
-        data[p++] = AGL_MINIMUM_POLICY; // make _SIZE tags behave more like GLX
+        data[p++] = AGL_MINIMUM_POLICY;P(AGL_MINIMUM_POLICY) // make _SIZE tags behave more like GLX
 
         for ( unsigned arg = 0; attribList[arg] !=0 && p < WXSIZEOF(data); )
         {
+            wxPrintf("[WXGLChoosePixelFormat] attribList[arg]: %d\n", attribList[arg] );
+
             switch ( attribList[arg++] )
             {
                 case WX_GL_RGBA:
-                    data[p++] = AGL_RGBA;
+                    data[p++] = AGL_RGBA;P(AGL_RGBA)
                     break;
 
                 case WX_GL_BUFFER_SIZE:
-                    data[p++] = AGL_BUFFER_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_BUFFER_SIZE;P(AGL_BUFFER_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_LEVEL:
-                    data[p++]=AGL_LEVEL;
-                    data[p++]=attribList[arg++];
+                    data[p++]=AGL_LEVEL;P(AGL_LEVEL)
+                    data[p++]=attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_DOUBLEBUFFER:
-                    data[p++] = AGL_DOUBLEBUFFER;
+                    data[p++] = AGL_DOUBLEBUFFER;P(AGL_DOUBLEBUFFER)
                     break;
 
                 case WX_GL_STEREO:
-                    data[p++] = AGL_STEREO;
+                    data[p++] = AGL_STEREO;P(AGL_STEREO)
                     break;
 
                 case WX_GL_AUX_BUFFERS:
-                    data[p++] = AGL_AUX_BUFFERS;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_AUX_BUFFERS;P(AGL_AUX_BUFFERS)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_RED:
-                    data[p++] = AGL_RED_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_RED_SIZE;P(AGL_RED_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_GREEN:
-                    data[p++] = AGL_GREEN_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_GREEN_SIZE;P(AGL_GREEN_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_BLUE:
-                    data[p++] = AGL_BLUE_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_BLUE_SIZE;P(AGL_BLUE_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_ALPHA:
-                    data[p++] = AGL_ALPHA_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_ALPHA_SIZE;P(AGL_ALPHA_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_DEPTH_SIZE:
-                    data[p++] = AGL_DEPTH_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_DEPTH_SIZE;P(AGL_DEPTH_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_STENCIL_SIZE:
-                    data[p++] = AGL_STENCIL_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_STENCIL_SIZE;P(AGL_STENCIL_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_ACCUM_RED:
-                    data[p++] = AGL_ACCUM_RED_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_ACCUM_RED_SIZE;P(AGL_ACCUM_RED_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_ACCUM_GREEN:
-                    data[p++] = AGL_ACCUM_GREEN_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_ACCUM_GREEN_SIZE;P(AGL_ACCUM_GREEN_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_ACCUM_BLUE:
-                    data[p++] = AGL_ACCUM_BLUE_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_ACCUM_BLUE_SIZE;P(AGL_ACCUM_BLUE_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_MIN_ACCUM_ALPHA:
-                    data[p++] = AGL_ACCUM_ALPHA_SIZE;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_ACCUM_ALPHA_SIZE;P(AGL_ACCUM_ALPHA_SIZE)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
 
                 case WX_GL_SAMPLE_BUFFERS:
                     if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
                     {
+wxPrintf("wxGLCanvas::IsAGLMultiSampleAvailable [WX_GL_SAMPLE_BUFFERS]: ok?\n");
                         if ( !attribList[arg++] )
                             break;
 
+wxPrintf("wxGLCanvas::IsAGLMultiSampleAvailable: failed\n");
                         return false;
                     }
 
-                    data[p++] = AGL_SAMPLE_BUFFERS_ARB;
+                    data[p++] = AGL_SAMPLE_BUFFERS_ARB;P(AGL_SAMPLE_BUFFERS_ARB)
                     if ( (data[p++] = attribList[arg++]) == true )
                     {
                         // don't use software fallback
-                        data[p++] = AGL_NO_RECOVERY;
+                        data[p++] = AGL_NO_RECOVERY;P(AGL_NO_RECOVERY)
                     }
                     break;
 
                 case WX_GL_SAMPLES:
                     if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
                     {
+wxPrintf("wxGLCanvas::IsAGLMultiSampleAvailable: ok?\n");
                         if ( !attribList[arg++] )
                             break;
-
+wxPrintf("wxGLCanvas::IsAGLMultiSampleAvailable [WX_GL_SAMPLES]: failed\n");
                         return false;
                     }
 
-                    data[p++] = AGL_SAMPLES_ARB;
-                    data[p++] = attribList[arg++];
+                    data[p++] = AGL_SAMPLES_ARB;P(AGL_SAMPLES_ARB)
+                    data[p++] = attribList[arg++];P(attribList[arg-1])
                     break;
             }
         }
@@ -238,7 +246,7 @@
 
         attribs = data;
     }
-
+wxPrintf("[WXGLChoosePixelFormat] @aglChoosePixelFormat\n");
     return aglChoosePixelFormat(NULL, 0, attribs);
 }
 
Index: samples/opengl/cube/cube.cpp
===================================================================
--- samples/opengl/cube/cube.cpp	(revision 59259)
+++ samples/opengl/cube/cube.cpp	(working copy)
@@ -170,6 +170,8 @@
 
 void TestGLContext::DrawRotatedCube(float xangle, float yangle)
 {
+wxPrintf( "[DrawRotatedCube] glGetString(GL_EXTENSIONS): %s\n", glGetString(GL_EXTENSIONS) );
+
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
     glMatrixMode(GL_MODELVIEW);
@@ -284,13 +286,13 @@
     EVT_PAINT(TestGLCanvas::OnPaint)
     EVT_KEY_DOWN(TestGLCanvas::OnKeyDown)
 END_EVENT_TABLE()
-
+const int attribList[]        = {WX_GL_DOUBLEBUFFER, WX_GL_RGBA, WX_GL_LEVEL, 0, WX_GL_SAMPLE_BUFFERS, GL_TRUE, WX_GL_SAMPLES, 4, 0};
 TestGLCanvas::TestGLCanvas(wxWindow *parent)
     // With perspective OpenGL graphics, the wxFULL_REPAINT_ON_RESIZE style
     // flag should always be set, because even making the canvas smaller should
     // be followed by a paint event that updates the entire canvas with new
     // viewport settings.
-    : wxGLCanvas(parent, wxID_ANY, NULL /* attribs */,
+    : wxGLCanvas(parent, wxID_ANY, attribList,
                  wxDefaultPosition, wxDefaultSize,
                  wxFULL_REPAINT_ON_RESIZE)
 {

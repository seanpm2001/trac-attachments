Index: samples/opengl/cube/cube.cpp
===================================================================
--- samples/opengl/cube/cube.cpp	(revision 61111)
+++ samples/opengl/cube/cube.cpp	(working copy)
@@ -132,6 +132,7 @@
     glEnable(GL_LIGHTING);
     glEnable(GL_LIGHT0);
     glEnable(GL_TEXTURE_2D);
+    glEnable(GL_MULTISAMPLE);
 
     // add slightly more light, the default lighting is rather dark
     GLfloat ambient[] = { 0.5, 0.5, 0.5, 0.5 };
@@ -285,12 +286,24 @@
     EVT_KEY_DOWN(TestGLCanvas::OnKeyDown)
 END_EVENT_TABLE()
 
+// Note, if you want Anti-Aliasing, this is the place to enable
+// it. The constructor instantiates the graphics context.  The
+// following just echoes the defaults used by WXGLChoosePixelFormat
+// then adds multi-sampling.
+static const int attribs[] = { WX_GL_RGBA,
+                               WX_GL_DOUBLEBUFFER,
+                               WX_GL_MIN_RED, 8,
+                               WX_GL_MIN_ALPHA, 0,
+                               WX_GL_DEPTH_SIZE, 8,
+                               WX_GL_SAMPLE_BUFFERS, 1,
+                               WX_GL_SAMPLES, 4,
+                               0 };
 TestGLCanvas::TestGLCanvas(wxWindow *parent)
     // With perspective OpenGL graphics, the wxFULL_REPAINT_ON_RESIZE style
     // flag should always be set, because even making the canvas smaller should
     // be followed by a paint event that updates the entire canvas with new
     // viewport settings.
-    : wxGLCanvas(parent, wxID_ANY, NULL /* attribs */,
+    : wxGLCanvas(parent, wxID_ANY, attribs,
                  wxDefaultPosition, wxDefaultSize,
                  wxFULL_REPAINT_ON_RESIZE)
 {
Index: src/osx/cocoa/glcanvas.mm
===================================================================
--- src/osx/cocoa/glcanvas.mm	(revision 61111)
+++ src/osx/cocoa/glcanvas.mm	(working copy)
@@ -175,16 +175,21 @@
                     break;
 
                 case WX_GL_SAMPLE_BUFFERS:
-                    if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
-                    {
-                        if ( !attribList[arg++] )
-                            break;
-
-                        return false;
-                    }
-
+                    // Allow this attribute to go through without checking for
+                    // multi-sampling availability using
+                    // IsAGLMultiSampleAvailable. Latter method re-invokes this
+                    // function with default attributes then fails because the
+                    // default pixel format does not allow for
+                    // multi-sampling. Catch 22! If the hardware does not allow
+                    // multi-sampling, the NSOpenGLPixelFormat class'
+                    // -initWithAttributes:attribs will answer with nil (see
+                    // Apple documentation).
                     data[p++] = NSOpenGLPFASampleBuffers;
-                    if ( (data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++]) == true )
+                    // The argument is the number of sample buffers (not true or
+                    // false). The interface supports more than one multi-sample
+                    // buffer, even if the implementation only provides for one
+                    // at present!
+                    if ( (data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++]) != 0 )
                     {
                         // don't use software fallback
                         data[p++] = NSOpenGLPFANoRecovery;
@@ -192,14 +197,7 @@
                     break;
 
                 case WX_GL_SAMPLES:
-                    if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
-                    {
-                        if ( !attribList[arg++] )
-                            break;
-
-                        return false;
-                    }
-
+                    // see previous comment under case WX_GL_SAMPLE_BUFFERS
                     data[p++] = NSOpenGLPFASamples;
                     data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
Index: src/osx/glcanvas_osx.cpp
===================================================================
--- src/osx/glcanvas_osx.cpp	(revision 61111)
+++ src/osx/glcanvas_osx.cpp	(working copy)
@@ -157,6 +157,15 @@
 bool wxGLCanvasBase::IsExtensionSupported(const char *extension)
 {
     // we need a valid context to query for extensions.
+    //
+    // Choosing a pixel format with NULL (default) attributes hits a
+    // snag when asking for attributes which rely on non-default pixel
+    // formats, e.g. when multi-sampling. Beware of recursion; when
+    // you specify WX_GL_SAMPLE_BUFFERS or WX_GL_SAMPLES,
+    // WXGLChoosePixelFormat asks
+    // wxGLCanvas::IsAGLMultiSampleAvailable() which recursively
+    // re-enters here.
+    //
     WXGLPixelFormat fmt = WXGLChoosePixelFormat(NULL);
     WXGLContext ctx = WXGLCreateContext(fmt, NULL);
     if ( !ctx )

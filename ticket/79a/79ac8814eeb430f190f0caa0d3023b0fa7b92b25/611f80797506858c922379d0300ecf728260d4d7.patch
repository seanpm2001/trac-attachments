--- C:/DOCUME~1/id943042/LOCALS~1/Temp/glcanvas_osx.cp-revBASE.svn001.tmp.cpp	vr jun 19 16:09:57 2009
+++ C:/TEMP/SVN/wxWidgets/src/osx/glcanvas_osx.cpp	vr jun 19 15:10:26 2009
@@ -153,10 +153,43 @@
     WXGLSwapBuffers(context);
     return true;
 }
-
+#include <wx/wxcrtvararg.h>
+#include <OpenGL/OpenGL.h>
+#include <OpenGL/gl.h>
 bool wxGLCanvasBase::IsExtensionSupported(const char *extension)
 {
-    // we need a valid context to query for extensions.
+  CGDirectDisplayID display = CGMainDisplayID ();
+  CGOpenGLDisplayMask myDisplayMask = CGDisplayIDToOpenGLDisplayMask (display);
+  CGLPixelFormatAttribute attribs[] = {(CGLPixelFormatAttribute)kCGLPFADisplayMask, (CGLPixelFormatAttribute)myDisplayMask, (CGLPixelFormatAttribute)NULL};
+  CGLPixelFormatObj pixelFormat = NULL;
+  long numPixelFormats = 0;
+  CGLContextObj myCGLContext = 0;
+  CGLContextObj curr_ctx = CGLGetCurrentContext (); // 4
+  CGLChoosePixelFormat (attribs, &pixelFormat, &numPixelFormats); 
+
+  wxString extensions;
+  wxPrintf("[IsExtensionSupported]: '%s'\n", extension);
+  wxPrintf(" - numPixelFormats: %ld\n", numPixelFormats);
+  wxPrintf(" - pixelFormat: %d\n", pixelFormat ? 1 : 0);
+
+  if (pixelFormat)
+  {
+    CGLCreateContext (pixelFormat, NULL, &myCGLContext); // 6
+    CGLDestroyPixelFormat (pixelFormat); // 7
+    CGLSetCurrentContext (myCGLContext); // 8
+    wxPrintf(" - myCGLContext: %d\n", myCGLContext ? 1 : 0);
+    if (myCGLContext)
+    {
+      // Check for capabilities and functionality here
+      extensions = wxString::FromAscii(glGetString(GL_EXTENSIONS));
+      wxPrintf(" - extensions: %s\n", extensions);
+    }
+  }
+  CGLDestroyContext (myCGLContext); // 9
+  CGLSetCurrentContext (curr_ctx); 
+
+/*
+  // we need a valid context to query for extensions.
     WXGLPixelFormat fmt = WXGLChoosePixelFormat(NULL);
     WXGLContext ctx = WXGLCreateContext(fmt, NULL);
     if ( !ctx )
@@ -166,7 +199,7 @@
 
     WXGLDestroyPixelFormat(fmt);
     WXGLDestroyContext(ctx);
-
+*/
     return IsExtensionInList(extensions.ToAscii(), extension);
 }
 

Index: src/common/containr.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/containr.cpp,v
retrieving revision 1.32
diff -u -r1.32 containr.cpp
--- src/common/containr.cpp	2004/09/27 13:01:12	1.32
+++ src/common/containr.cpp	2004/10/01 14:32:59
@@ -435,6 +435,84 @@
     return wxSetFocusToChild(m_winParent, &m_winLastFocused);
 }
 
+// --------------------------------------------------------------------
+// The following three functions are used to find other radio buttons 
+// within the same group. Used by wxSetFocusToChild on wxMSW
+// --------------------------------------------------------------------
+
+#ifdef __WXMSW__
+
+wxRadioButton* wxGetPreviousButtonInGroup(wxRadioButton *btn)
+{
+    if ( btn->HasFlag(wxRB_GROUP) || btn->HasFlag(wxRB_SINGLE) )
+        return NULL;
+
+    const wxWindowList& siblings = btn->GetParent()->GetChildren();
+    wxWindowList::compatibility_iterator nodeThis = siblings.Find(btn);
+    wxCHECK_MSG( nodeThis, NULL, _T("radio button not a child of its parent?") );
+
+    wxWindowList::compatibility_iterator nodeBefore = nodeThis->GetPrevious();
+    if (!nodeBefore)
+        return NULL;
+
+    // radio buttons in a group must be consecutive, wxDynamicCast ensured to return NULL on other controls
+    wxRadioButton *nextBtn = wxDynamicCast(nodeBefore->GetData(), wxRadioButton);
+    if (nextBtn && nextBtn->HasFlag(wxRB_SINGLE))
+        return NULL;
+    else
+        return nextBtn;
+}
+
+wxRadioButton* wxGetNextButtonInGroup(wxRadioButton *btn)
+{
+    if (btn->HasFlag(wxRB_SINGLE))
+        return NULL;
+
+    const wxWindowList& siblings = btn->GetParent()->GetChildren();
+    wxWindowList::compatibility_iterator nodeThis = siblings.Find(btn);
+    wxCHECK_MSG( nodeThis, NULL, _T("radio button not a child of its parent?") );
+
+    wxWindowList::compatibility_iterator nodeAfter = nodeThis->GetNext();
+    if (!nodeAfter)
+        return NULL;
+
+    wxRadioButton *prevBtn = wxDynamicCast(nodeAfter->GetData(), wxRadioButton);
+
+    if ( !prevBtn || prevBtn->HasFlag(wxRB_GROUP) || prevBtn->HasFlag(wxRB_SINGLE) )
+    {
+        // no more buttons or the first button of the next group
+        return NULL;
+    }
+
+    return prevBtn;
+}
+
+wxRadioButton* wxGetSelectedButtonInGroup(wxRadioButton *btn)
+{
+    // Find currently selected button
+    if (btn->GetValue())
+        return btn;
+
+    if (btn->HasFlag(wxRB_SINGLE))
+        return NULL;
+
+    wxRadioButton *selBtn;
+
+    // First check all previous buttons
+    for (selBtn = wxGetPreviousButtonInGroup(btn); selBtn; selBtn = wxGetPreviousButtonInGroup(selBtn))
+        if (selBtn->GetValue())
+            return selBtn;
+
+    // Now all following buttons
+    for (selBtn = wxGetNextButtonInGroup(btn); selBtn; selBtn = wxGetNextButtonInGroup(selBtn))
+        if (selBtn->GetValue())
+            return selBtn;
+
+    return NULL;
+}
+
+#endif __WXMSW__
+
 // ----------------------------------------------------------------------------
 // SetFocusToChild(): this function is used by wxPanel but also by wxFrame in
 // wxMSW, this is why it is outside of wxControlContainer class
@@ -475,6 +553,18 @@
 
         if ( child->AcceptsFocusFromKeyboard() && !child->IsTopLevel() )
         {
+#ifdef __WXMSW__
+            // If a radiobutton is the first focusable child, search for the 
+            // selected radiobutton in the same group
+            wxRadioButton* btn = wxDynamicCast(child, wxRadioButton);
+            if (btn)
+            {
+                wxRadioButton* selected = wxGetSelectedButtonInGroup(btn);
+                if (selected)
+                    child = selected;
+            }
+#endif
+
             wxLogTrace(_T("focus"),
                        _T("SetFocusToChild() => first child (0x%08lx)."),
                        (unsigned long)child->GetHandle());

 	  	 

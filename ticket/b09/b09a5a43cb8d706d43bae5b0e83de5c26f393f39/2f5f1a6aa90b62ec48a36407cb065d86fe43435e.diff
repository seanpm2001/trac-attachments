Index: include/wx/graphics.h
===================================================================
--- include/wx/graphics.h	(revision 55094)
+++ include/wx/graphics.h	(working copy)
@@ -19,6 +19,31 @@
 #include "wx/geometry.h"
 #include "wx/dynarray.h"
 
+
+enum wxAntialias
+{
+    wxANTIALIAS_DEFAULT,
+    wxANTIALIAS_NONE
+};
+
+enum wxCompositingOperator
+{
+    wxOPERATOR_CLEAR,
+    wxOPERATOR_SOURCE,
+    wxOPERATOR_OVER,
+    wxOPERATOR_IN,
+    wxOPERATOR_OUT,
+    wxOPERATOR_ATOP,
+    wxOPERATOR_DEST,
+    wxOPERATOR_DEST_OVER,
+    wxOPERATOR_DEST_IN,
+    wxOPERATOR_DEST_OUT,
+    wxOPERATOR_DEST_ATOP,
+    wxOPERATOR_XOR,
+    wxOPERATOR_ADD,
+    wxOPERATOR_SATURATE
+};
+
 class WXDLLIMPEXP_FWD_CORE wxWindowDC;
 class WXDLLIMPEXP_FWD_CORE wxMemoryDC;
 #if wxUSE_PRINTING_ARCHITECTURE
@@ -361,6 +386,18 @@
     // sets the current logical function, returns true if it supported
     virtual bool SetLogicalFunction(int function) ;
 
+    // returns the current shape antialiasing mode
+    virtual wxAntialias GetAntialias() const { return m_antialias; }
+    
+    // sets the antialiasing mode, returns true if it supported
+    virtual bool SetAntialias(wxAntialias antialias);
+
+    // returns the current shape antialiasing mode
+    virtual wxCompositingOperator GetOperator() const { return m_operator; }
+    
+    // sets the antialiasing mode, returns true if it supported
+    virtual bool SetOperator(wxCompositingOperator op);
+
     // returns the size of the graphics context in device coordinates
     virtual void GetSize( wxDouble* width, wxDouble* height);
 
@@ -489,6 +526,8 @@
     wxGraphicsBrush m_brush;
     wxGraphicsFont m_font;
     int m_logicalFunction;
+    wxAntialias m_antialias;
+    wxCompositingOperator m_operator;
 
 private :
     DECLARE_NO_COPY_CLASS(wxGraphicsContext)
Index: src/common/graphcmn.cpp
===================================================================
--- src/common/graphcmn.cpp	(revision 55094)
+++ src/common/graphcmn.cpp	(working copy)
@@ -498,9 +500,12 @@
 IMPLEMENT_ABSTRACT_CLASS(wxGraphicsContext, wxObject)
 
 
-wxGraphicsContext::wxGraphicsContext(wxGraphicsRenderer* renderer) : wxGraphicsObject(renderer) 
+wxGraphicsContext::wxGraphicsContext(wxGraphicsRenderer* renderer) 
+    : wxGraphicsObject(renderer),
+      m_logicalFunction(wxCOPY),
+      m_antialias(wxANTIALIAS_DEFAULT),
+      m_operator(wxOPERATOR_OVER)
 {
-    m_logicalFunction = wxCOPY;
 }
 
 wxGraphicsContext::~wxGraphicsContext() 
@@ -596,6 +601,26 @@
     return false;
 }
 
+bool wxGraphicsContext::SetAntialias(wxAntialias antialias)
+{
+    if (antialias == wxANTIALIAS_DEFAULT)
+    {
+        m_antialias = antialias;
+        return true;
+    }
+    return false;
+}
+
+bool wxGraphicsContext::SetOperator(wxCompositingOperator op)
+{
+    if (op == wxOPERATOR_OVER)
+    {
+        m_operator = op;
+        return true;
+    }
+    return false;
+}
+
 void wxGraphicsContext::SetFont( const wxFont& font, const wxColour& colour )
 {
     if ( font.Ok() )
Index: src/generic/graphicc.cpp
===================================================================
--- src/generic/graphicc.cpp	(revision 55094)
+++ src/generic/graphicc.cpp	(working copy)
@@ -357,6 +359,8 @@
     virtual void * GetNativeContext();
 
     virtual bool SetLogicalFunction( int function );
+    virtual bool SetAntialias( wxAntialias antialias );
+    virtual bool SetOperator( wxCompositingOperator op );
 
     virtual void StrokePath( const wxGraphicsPath& p );
     virtual void FillPath( const wxGraphicsPath& p , int fillStyle = wxWINDING_RULE );
@@ -1576,7 +1603,84 @@
     return true;
 }
 
+bool wxCairoContext::SetAntialias(wxAntialias antialias)
+{
+    if (m_antialias == antialias)
+        return true;
 
+    cairo_antialias_t ca;
+    switch (antialias)
+    {
+        case wxANTIALIAS_DEFAULT:
+            ca = CAIRO_ANTIALIAS_DEFAULT;
+            break;
+        case wxANTIALIAS_NONE:
+            ca = CAIRO_ANTIALIAS_NONE;
+            break;
+        default:
+            return false;
+    }
+    cairo_set_antialias(m_context, ca);
+    return true;
+}
+
+bool wxCairoContext::SetOperator(wxCompositingOperator op)
+{
+    if (m_operator == op)
+        return true;
+
+    cairo_operator_t cop;
+    switch (op)
+    {
+        case wxOPERATOR_CLEAR:
+            cop = CAIRO_OPERATOR_CLEAR;
+            break;
+        case wxOPERATOR_SOURCE:
+            cop = CAIRO_OPERATOR_SOURCE;
+            break;
+        case wxOPERATOR_OVER:
+            cop = CAIRO_OPERATOR_OVER;
+            break;
+        case wxOPERATOR_IN:
+            cop = CAIRO_OPERATOR_IN;
+            break;
+        case wxOPERATOR_OUT:
+            cop = CAIRO_OPERATOR_OUT;
+            break;
+        case wxOPERATOR_ATOP:
+            cop = CAIRO_OPERATOR_ATOP;
+            break;
+        case wxOPERATOR_DEST:
+            cop = CAIRO_OPERATOR_DEST;
+            break;
+        case wxOPERATOR_DEST_OVER:
+            cop = CAIRO_OPERATOR_DEST_OVER;
+            break;
+        case wxOPERATOR_DEST_IN:
+            cop = CAIRO_OPERATOR_DEST_IN;
+            break;
+        case wxOPERATOR_DEST_OUT:
+            cop = CAIRO_OPERATOR_DEST_OUT;
+            break;
+        case wxOPERATOR_DEST_ATOP:
+            cop = CAIRO_OPERATOR_DEST_ATOP;
+            break;
+        case wxOPERATOR_XOR:
+            cop = CAIRO_OPERATOR_XOR;
+            break;
+        case wxOPERATOR_ADD:
+            cop = CAIRO_OPERATOR_ADD;
+            break;
+        case wxOPERATOR_SATURATE:
+            cop = CAIRO_OPERATOR_SATURATE;
+            break;
+        default:
+            return false;
+    }
+    cairo_set_operator(m_context, cop);
+    return true;
+}
+
 //-----------------------------------------------------------------------------
 // wxCairoRenderer declaration
 //-----------------------------------------------------------------------------

Index: src/common/graphcmn.cpp
===================================================================
--- src/common/graphcmn.cpp	(revision 58717)
+++ src/common/graphcmn.cpp	(working copy)
@@ -501,9 +501,12 @@
 IMPLEMENT_ABSTRACT_CLASS(wxGraphicsContext, wxObject)
 
 
-wxGraphicsContext::wxGraphicsContext(wxGraphicsRenderer* renderer) : wxGraphicsObject(renderer)
+wxGraphicsContext::wxGraphicsContext(wxGraphicsRenderer* renderer) 
+    : wxGraphicsObject(renderer),
+      m_logicalFunction(wxCOPY),
+      m_antialias(wxANTIALIAS_DEFAULT),
+      m_operator(wxOPERATOR_OVER)
 {
-    m_logicalFunction = wxCOPY;
 }
 
 wxGraphicsContext::~wxGraphicsContext()
@@ -599,6 +602,26 @@
     return false;
 }
 
+bool wxGraphicsContext::SetAntialias(wxAntialias antialias)
+{
+    if (antialias == wxANTIALIAS_DEFAULT)
+    {
+        m_antialias = antialias;
+        return true;
+    }
+    return false;
+}
+
+bool wxGraphicsContext::SetOperator(wxCompositingOperator op)
+{
+    if (op == wxOPERATOR_OVER)
+    {
+        m_operator = op;
+        return true;
+    }
+    return false;
+}
+
 void wxGraphicsContext::SetFont( const wxFont& font, const wxColour& colour )
 {
     if ( font.Ok() )
Index: src/osx/carbon/graphics.cpp
===================================================================
--- src/osx/carbon/graphics.cpp	(revision 58717)
+++ src/osx/carbon/graphics.cpp	(working copy)
@@ -1315,6 +1315,9 @@
     virtual void * GetNativeContext();
 
     bool SetLogicalFunction( wxRasterOperationMode function );
+    bool SetAntialias( wxAntialias antialias );
+    bool SetOperator( wxCompositingOperator op );
+
     //
     // transformation
     //
@@ -1636,6 +1639,84 @@
     return retval ;
 }
 
+bool wxMacCoreGraphicsContext::SetAntialias(wxAntialias antialias)
+{
+    if (m_antialias == antialias)
+        return true;
+
+    bool bSet;
+    switch (antialias)
+    {
+        case wxANTIALIAS_DEFAULT:
+            bSet = true;
+            break;
+        case wxANTIALIAS_NONE:
+            bSet = false;
+            break;
+        default:
+            return false;
+    }
+    CGContextSetShouldAntialias(m_cgContext, bSet);
+    return true;
+}
+
+bool wxMacCoreGraphicsContext::SetOperator(wxCompositingOperator op)
+{
+    if (m_operator == op)
+        return true;
+
+    CGBlendMode cop;
+    switch (op)
+    {
+//        case wxOPERATOR_CLEAR:
+//            cop = kCGBlendModeClear; // OSX 10.5 and later
+//            break;
+        case wxOPERATOR_SOURCE:
+            cop = kCGBlendModeNormal; // OSX 10.4 and later
+            break;
+        case wxOPERATOR_OVER:
+            cop = kCGBlendModeOverlay; // OSX 10.4 and later
+            break;
+//        case wxOPERATOR_IN:
+//            cop = kCGBlendModeSourceIn; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_OUT:
+//            cop = kCGBlendModeSourceOut; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_ATOP:
+//            cop = kCGBlendModeSourceAtop; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_DEST:
+//            cop = ;
+//            break;
+//        case wxOPERATOR_DEST_OVER:
+//            cop = kCGBlendModeDestinationOver; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_DEST_IN:
+//            cop = kCGBlendModeDestinationIn; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_DEST_OUT:
+//            cop = kCGBlendModeDestinationOut; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_DEST_ATOP:
+//            cop = kCGBlendModeDestinationAtop; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_XOR:
+//            cop = kCGBlendModeXOR; // OSX 10.5 and later
+//            break;
+//        case wxOPERATOR_ADD:
+//            cop = ;
+//            break;
+        case wxOPERATOR_SATURATE:
+            cop = kCGBlendModeSaturation; // OSX 10.4 and later
+            break;
+        default:
+            return false;
+    }
+    CGContextSetBlendMode(m_cgContext, cop);
+    return true;
+}
+
 void wxMacCoreGraphicsContext::Clip( const wxRegion &region )
 {
 #if wxOSX_USE_CARBON
Index: src/generic/graphicc.cpp
===================================================================
--- src/generic/graphicc.cpp	(revision 58717)
+++ src/generic/graphicc.cpp	(working copy)
@@ -348,6 +348,8 @@
     virtual void * GetNativeContext();
 
     virtual bool SetLogicalFunction( wxRasterOperationMode function );
+    virtual bool SetAntialias( wxAntialias antialias );
+    virtual bool SetOperator( wxCompositingOperator op );
 
     virtual void StrokePath( const wxGraphicsPath& p );
     virtual void FillPath( const wxGraphicsPath& p , wxPolygonFillMode fillStyle = wxWINDING_RULE );
@@ -1583,7 +1585,84 @@
     return true;
 }
 
+bool wxCairoContext::SetAntialias(wxAntialias antialias)
+{
+    if (m_antialias == antialias)
+        return true;
 
+    cairo_antialias_t ca;
+    switch (antialias)
+    {
+        case wxANTIALIAS_DEFAULT:
+            ca = CAIRO_ANTIALIAS_DEFAULT;
+            break;
+        case wxANTIALIAS_NONE:
+            ca = CAIRO_ANTIALIAS_NONE;
+            break;
+        default:
+            return false;
+    }
+    cairo_set_antialias(m_context, ca);
+    return true;
+}
+
+bool wxCairoContext::SetOperator(wxCompositingOperator op)
+{
+    if (m_operator == op)
+        return true;
+
+    cairo_operator_t cop;
+    switch (op)
+    {
+        case wxOPERATOR_CLEAR:
+            cop = CAIRO_OPERATOR_CLEAR;
+            break;
+        case wxOPERATOR_SOURCE:
+            cop = CAIRO_OPERATOR_SOURCE;
+            break;
+        case wxOPERATOR_OVER:
+            cop = CAIRO_OPERATOR_OVER;
+            break;
+        case wxOPERATOR_IN:
+            cop = CAIRO_OPERATOR_IN;
+            break;
+        case wxOPERATOR_OUT:
+            cop = CAIRO_OPERATOR_OUT;
+            break;
+        case wxOPERATOR_ATOP:
+            cop = CAIRO_OPERATOR_ATOP;
+            break;
+        case wxOPERATOR_DEST:
+            cop = CAIRO_OPERATOR_DEST;
+            break;
+        case wxOPERATOR_DEST_OVER:
+            cop = CAIRO_OPERATOR_DEST_OVER;
+            break;
+        case wxOPERATOR_DEST_IN:
+            cop = CAIRO_OPERATOR_DEST_IN;
+            break;
+        case wxOPERATOR_DEST_OUT:
+            cop = CAIRO_OPERATOR_DEST_OUT;
+            break;
+        case wxOPERATOR_DEST_ATOP:
+            cop = CAIRO_OPERATOR_DEST_ATOP;
+            break;
+        case wxOPERATOR_XOR:
+            cop = CAIRO_OPERATOR_XOR;
+            break;
+        case wxOPERATOR_ADD:
+            cop = CAIRO_OPERATOR_ADD;
+            break;
+        case wxOPERATOR_SATURATE:
+            cop = CAIRO_OPERATOR_SATURATE;
+            break;
+        default:
+            return false;
+    }
+    cairo_set_operator(m_context, cop);
+    return true;
+}
+
 //-----------------------------------------------------------------------------
 // wxCairoRenderer declaration
 //-----------------------------------------------------------------------------
Index: include/wx/graphics.h
===================================================================
--- include/wx/graphics.h	(revision 58717)
+++ include/wx/graphics.h	(working copy)
@@ -20,6 +20,31 @@
 #include "wx/dynarray.h"
 #include "wx/dc.h"
 
+
+enum wxAntialias
+{
+    wxANTIALIAS_DEFAULT,
+    wxANTIALIAS_NONE
+};
+
+enum wxCompositingOperator
+{
+    wxOPERATOR_CLEAR,
+    wxOPERATOR_SOURCE,
+    wxOPERATOR_OVER,
+    wxOPERATOR_IN,
+    wxOPERATOR_OUT,
+    wxOPERATOR_ATOP,
+    wxOPERATOR_DEST,
+    wxOPERATOR_DEST_OVER,
+    wxOPERATOR_DEST_IN,
+    wxOPERATOR_DEST_OUT,
+    wxOPERATOR_DEST_ATOP,
+    wxOPERATOR_XOR,
+    wxOPERATOR_ADD,
+    wxOPERATOR_SATURATE
+};
+
 class WXDLLIMPEXP_FWD_CORE wxWindowDC;
 class WXDLLIMPEXP_FWD_CORE wxMemoryDC;
 #if wxUSE_PRINTING_ARCHITECTURE
@@ -362,6 +387,18 @@
     // sets the current logical function, returns true if it supported
     virtual bool SetLogicalFunction(wxRasterOperationMode function);
 
+    // returns the current shape antialiasing mode
+    virtual wxAntialias GetAntialias() const { return m_antialias; }
+    
+    // sets the antialiasing mode, returns true if it supported
+    virtual bool SetAntialias(wxAntialias antialias);
+
+    // returns the current shape antialiasing mode
+    virtual wxCompositingOperator GetOperator() const { return m_operator; }
+    
+    // sets the antialiasing mode, returns true if it supported
+    virtual bool SetOperator(wxCompositingOperator op);
+
     // returns the size of the graphics context in device coordinates
     virtual void GetSize( wxDouble* width, wxDouble* height);
 
@@ -497,6 +534,8 @@
     wxGraphicsBrush m_brush;
     wxGraphicsFont m_font;
     wxRasterOperationMode m_logicalFunction;
+    wxAntialias m_antialias;
+    wxCompositingOperator m_operator;
 
 protected:
     // implementations of overloaded public functions: we use different names
Index: samples/drawing/drawing.cpp
===================================================================
--- samples/drawing/drawing.cpp	(revision 58717)
+++ samples/drawing/drawing.cpp	(working copy)
@@ -100,6 +100,7 @@
     void OnClip(wxCommandEvent& event);
 #if wxUSE_GRAPHICS_CONTEXT
     void OnGraphicContext(wxCommandEvent& event);
+    void OnAntiAliasing(wxCommandEvent& event);
 #endif
     void OnShow(wxCommandEvent &event);
     void OnOption(wxCommandEvent &event);
@@ -145,6 +146,11 @@
     void Clip(bool clip) { m_clip = clip; Refresh(); }
 #if wxUSE_GRAPHICS_CONTEXT
     void UseGraphicContext(bool use) { m_useContext = use; Refresh(); }
+    void UseAntiAliasing(bool use)
+    {
+        m_AAMode = use ? wxANTIALIAS_DEFAULT : wxANTIALIAS_NONE;
+        Refresh();
+    }
 #endif
 
 protected:
@@ -184,7 +190,8 @@
     wxPoint      m_anchorpoint;
     wxPoint      m_currentpoint;
 #if wxUSE_GRAPHICS_CONTEXT
-    bool         m_useContext ;
+    bool         m_useContext;
+    wxAntialias  m_AAMode;
 #endif
 
     DECLARE_EVENT_TABLE()
@@ -223,6 +230,7 @@
     File_Clip,
 #if wxUSE_GRAPHICS_CONTEXT
     File_GraphicContext,
+    File_NoAA,
 #endif
 
     MenuOption_First,
@@ -410,6 +418,7 @@
     m_rubberBand = false;
 #if wxUSE_GRAPHICS_CONTEXT
     m_useContext = false;
+    m_AAMode = wxANTIALIAS_DEFAULT;
 #endif
 }
 
@@ -955,7 +964,7 @@
 {
     wxFont font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
     gc->SetFont(font,*wxBLACK);
-    
+
     // make a path that contains a circle and some lines, centered at 0,0
     wxGraphicsPath path = gc->CreatePath() ;
     path.AddCircle( 0, 0, BASE2 );
@@ -1354,6 +1363,11 @@
     gdc.SetGraphicsContext( gCairoRenderer->CreateContext( pdc ) );
 #else
      wxGCDC gdc( pdc ) ;
+    if (m_useContext)
+    {
+        wxGraphicsContext *gc = gdc.GetGraphicsContext();
+        gc->SetAntialias(m_AAMode);
+    }
 #endif
     wxDC &dc = m_useContext ? (wxDC&) gdc : (wxDC&) pdc ;
 #else
@@ -1552,6 +1566,7 @@
     EVT_MENU      (File_Clip,     MyFrame::OnClip)
 #if wxUSE_GRAPHICS_CONTEXT
     EVT_MENU      (File_GraphicContext, MyFrame::OnGraphicContext)
+    EVT_MENU      (File_NoAA,           MyFrame::OnAntiAliasing)
 #endif
 
     EVT_MENU_RANGE(MenuShow_First,   MenuShow_Last,   MyFrame::OnShow)
@@ -1590,6 +1605,10 @@
     menuFile->AppendCheckItem(File_Clip, _T("&Clip\tCtrl-C"), _T("Clip/unclip drawing"));
 #if wxUSE_GRAPHICS_CONTEXT
     menuFile->AppendCheckItem(File_GraphicContext, _T("&Use GraphicContext\tCtrl-Y"), _T("Use GraphicContext"));
+    wxMenuItem *item = menuFile->AppendCheckItem(File_NoAA,
+                                                 _T("AntiAliasing"),
+                                                 _T("Toggle AntiAliasing for GraphicsContext"));
+    item->Check(true);
 #endif
     menuFile->AppendSeparator();
     menuFile->Append(File_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
@@ -1696,6 +1715,11 @@
 {
     m_canvas->UseGraphicContext(event.IsChecked());
 }
+
+void MyFrame::OnAntiAliasing(wxCommandEvent& event)
+{
+    m_canvas->UseAntiAliasing(event.IsChecked());
+}
 #endif
 
 void MyFrame::OnShow(wxCommandEvent& event)

? .deps
? Makefile
? bombs
? bombs-marked.patch
Index: bombs.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/demos/bombs/bombs.cpp,v
retrieving revision 1.9
diff -u -r1.9 bombs.cpp
--- bombs.cpp	2005/01/31 18:02:36	1.9
+++ bombs.cpp	2005/05/13 02:10:47
@@ -61,6 +61,7 @@
 }
 
 BEGIN_EVENT_TABLE(BombsFrame, wxFrame)
+    EVT_MENU(bombsID_NEWGAME, BombsFrame::OnNewSameGame)
     EVT_MENU(bombsID_EASY, BombsFrame::OnNewEasyGame)
     EVT_MENU(bombsID_MEDIUM, BombsFrame::OnNewMediumGame)
     EVT_MENU(bombsID_HARD, BombsFrame::OnNewHardGame)
@@ -84,6 +85,7 @@
     wxMenuBar *menuBar = new wxMenuBar;
     wxMenu *menuFile = new wxMenu;
     wxMenu *menuLevel = new wxMenu;
+    menuLevel->AppendRadioItem(bombsID_NEWGAME, wxT("&Same level\tCtrl-N"));
     menuLevel->AppendRadioItem(bombsID_EASY, wxT("&Easy (10x10)\tCtrl-1"));
     menuLevel->AppendRadioItem(bombsID_MEDIUM, wxT("&Medium (15x15)\tCtrl-2"));
     menuLevel->AppendRadioItem(bombsID_HARD, wxT("&Hard (25x20)\tCtrl-3"));
@@ -125,8 +127,16 @@
 
 void BombsFrame::NewGame(int level, bool query)
 {
-    if(query)
+    static int last_level = bombsID_EASY;
+  
+    if (bombsID_NEWGAME == level) 
     {
+       level = last_level;
+    }
+    
+
+    if(query && level != last_level)
+    {
        int ok = wxMessageBox(
                   wxT("Start new game regardless previous board?"),
                   wxT("Confirm"),
@@ -170,6 +180,11 @@
     wxMessageBox(
         wxT("wxBombs (c) 1996 by P. Foggia\n<foggia@amalfi.dis.unina.it>"),
         wxT("About wxBombs") );
+}
+
+void BombsFrame::OnNewSameGame(wxCommandEvent& WXUNUSED(event))
+{
+    NewGame(bombsID_NEWGAME, true);
 }
 
 void BombsFrame::OnNewEasyGame(wxCommandEvent& WXUNUSED(event))
Index: bombs.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/demos/bombs/bombs.h,v
retrieving revision 1.5
diff -u -r1.5 bombs.h
--- bombs.h	2003/12/23 10:45:28	1.5
+++ bombs.h	2005/05/13 02:10:47
@@ -45,6 +45,7 @@
 
 private:
 
+    void OnNewSameGame(wxCommandEvent& event);
     void OnNewEasyGame(wxCommandEvent& event);
     void OnNewMediumGame(wxCommandEvent& event);
     void OnNewHardGame(wxCommandEvent& event);
Index: bombs1.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/demos/bombs/bombs1.cpp,v
retrieving revision 1.8
diff -u -r1.8 bombs1.cpp
--- bombs1.cpp	2005/01/31 18:02:36	1.8
+++ bombs1.cpp	2005/05/13 02:10:48
@@ -38,22 +38,29 @@
     wxString buf;
     long chw, chh;
 
-    wxColour wxBlack = wxTheColourDatabase->Find(wxT("BLACK"));
-    wxColour wxWhite = wxTheColourDatabase->Find(wxT("WHITE"));
-    wxColour wxRed = wxTheColourDatabase->Find(wxT("RED"));
-    wxColour wxBlue = wxTheColourDatabase->Find(wxT("BLUE"));
-    wxColour wxGrey = wxTheColourDatabase->Find(wxT("LIGHT GREY"));
+    wxColour wxBlack   = wxTheColourDatabase->Find(wxT("BLACK"));
+    wxColour wxWhite   = wxTheColourDatabase->Find(wxT("WHITE"));
+    wxColour wxYellow  = wxTheColourDatabase->Find(wxT("LIGHT YELLOW"));
+    wxColour wxRed     = wxTheColourDatabase->Find(wxT("RED"));
+    wxColour wxBlue    = wxTheColourDatabase->Find(wxT("BLUE"));
+    wxColour wxGrey    = wxTheColourDatabase->Find(wxT("LIGHT GREY"));
     wxColour wxFocused = wxTheColourDatabase->Find(wxT("GREY"));
     wxColour wxGreen = wxTheColourDatabase->Find(wxT("GREEN"));
 
     wxPen *blackPen = wxThePenList->FindOrCreatePen(wxBlack, 1, wxSOLID);
-    wxPen *redPen = wxThePenList->FindOrCreatePen(wxRed, 1, wxSOLID);
-    wxPen *bluePen = wxThePenList->FindOrCreatePen(wxBlue, 1, wxSOLID);
-    wxBrush *whiteBrush = wxTheBrushList->FindOrCreateBrush(wxWhite, wxSOLID);
-    wxBrush *greyBrush = wxTheBrushList->FindOrCreateBrush(wxGrey, wxSOLID);
-    wxBrush *focusedBrush = wxTheBrushList->FindOrCreateBrush(wxFocused, wxSOLID);
-    wxBrush *redBrush = wxTheBrushList->FindOrCreateBrush(wxRed, wxSOLID);
+    wxPen *redPen    = wxThePenList->FindOrCreatePen(wxRed, 1, wxSOLID);
+    wxPen *bluePen   = wxThePenList->FindOrCreatePen(wxBlue, 1, wxSOLID);
 
+    wxBrush *whiteBrush   = wxTheBrushList->FindOrCreateBrush(wxWhite, 
+							      wxSOLID);
+    wxBrush *greyBrush    = wxTheBrushList->FindOrCreateBrush(wxGrey, wxSOLID);
+    wxBrush *focusedBrush = wxTheBrushList->FindOrCreateBrush(wxFocused, 
+							      wxSOLID);
+    wxBrush *redBrush     = wxTheBrushList->FindOrCreateBrush(wxRed, 
+							      wxSOLID);
+    wxBrush *yellowBrush  = wxTheBrushList->FindOrCreateBrush(wxYellow, 
+							      wxSOLID);
+
     dc->SetPen(* blackPen);
 
     int x, y;
@@ -141,8 +148,10 @@
                 dc->SetPen(* blackPen);
                 if (m_game->IsFocussed(x, y))
                     dc->SetBrush(* focusedBrush);
-                else
+                else if (m_game->IsSelected(x,y))
                     dc->SetBrush(* whiteBrush);
+		else 
+                    dc->SetBrush(* yellowBrush);
                 dc->DrawRectangle( x*m_cellWidth*X_UNIT, y*m_cellHeight*Y_UNIT,
                     m_cellWidth*X_UNIT+1, m_cellHeight*Y_UNIT+1);
 
@@ -163,7 +172,9 @@
                     break;
             }
             dc->GetTextExtent(buf, &chw, &chh);
-            dc->SetTextBackground(wxWhite);
+
+	    dc->SetTextBackground(wxWhite);
+	    
             dc->DrawText( buf,
                 x*m_cellWidth*X_UNIT + (m_cellWidth*X_UNIT-chw)/2,
                 y*m_cellHeight*Y_UNIT + (m_cellHeight*Y_UNIT-chh)/2);
@@ -172,8 +183,9 @@
     dc->SetFont(wxNullFont);
 
     wxString msg;
-    msg.Printf(wxT("%d bombs  %d remaining cells"),
-        m_game->GetNumBombs(), m_game->GetNumRemainingCells() );
+    msg.Printf(wxT("%d bombs, %u marked, %d remaining cells"),
+	       m_game->GetNumBombs(), m_game->GetNumMarkedCells(), 
+	       m_game->GetNumRemainingCells() );
 
 #if wxUSE_LOG && wxUSE_STATUSBAR
     wxLogStatus(msg);
@@ -201,7 +213,7 @@
 // Called when uncovering a cell.
 void BombsCanvas::Uncover(int x, int y)
 {
-    m_game->Unhide(x,y);
+    m_game->Unhide(x,y,true);
     RefreshField(x, y, x, y);
 
     const int gridWidth = m_game->GetWidth();
@@ -223,10 +235,10 @@
 
         for(x=0; x<gridWidth; x++)
             for(y=0; y<gridHeight; y++)
-                m_game->Unhide(x,y);
-                    RefreshField(0, 0, gridWidth-1, gridHeight-1);
+                m_game->Unhide(x,y,false);
+	RefreshField(0, 0, gridWidth-1, gridHeight-1);
     }
-    else if (!m_game->Get(x, y))
+    else if ( 0 == (m_game->Get(x, y) & BG_MASK) )
     {
         int left = ( x > 0 ) ? x-1 : 0;
         int right = ( x < gridWidth - 1 )
Index: game.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/demos/bombs/game.cpp,v
retrieving revision 1.2
diff -u -r1.2 game.cpp
--- game.cpp	2003/12/19 01:34:40	1.2
+++ game.cpp	2005/05/13 02:10:48
@@ -75,6 +75,12 @@
         }
     }
 
+    /* Force (0,0) not to have a bomb for those that don't want to have
+       to guess on the first move. Better would be to for the MS rule that
+       whatever is picked first isn't a bomb.
+     */
+    m_field[0] = BG_HIDDEN;
+
     m_numBombCells = 0;
     for(x=0; x<m_width; x++)
         for(y=0; y<m_height; y++)
@@ -90,6 +96,7 @@
             }
 
     m_numRemainingCells = m_height*m_width-m_numBombCells;
+    m_numMarkedCells    = 0;
 
     return true;
 }
@@ -97,14 +104,21 @@
 void BombsGame::Mark(int x, int y)
 {
     m_field[x+y*m_width] ^= BG_MARKED;
+    if (IsMarked(x, y))
+      m_numMarkedCells++;
+    else
+      m_numMarkedCells--;
 }
 
-void BombsGame::Unhide(int x, int y)
+void BombsGame::Unhide(int x, int y, bool b_selected)
 {
     if (!IsHidden(x,y))
     {
         return;
     }
+
+    if (b_selected)
+      m_field[x+y*m_width] |= BG_SELECTED;
 
     m_field[x+y*m_width] &= ~BG_HIDDEN;
 
Index: game.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/demos/bombs/game.h,v
retrieving revision 1.2
diff -u -r1.2 game.h
--- game.h	2003/12/19 01:34:40	1.2
+++ game.h	2005/05/13 02:10:48
@@ -16,7 +16,8 @@
 #define BG_BOMB     0x200
 #define BG_MARKED   0x400
 #define BG_EXPLODED 0x800
-#define BG_MASK     0x0FF
+#define BG_SELECTED 0x080
+#define BG_MASK     0x03F
 
 #include <stddef.h>
 
@@ -64,6 +65,11 @@
         return Get(x,y) & BG_EXPLODED;
     };
 
+    int IsSelected(int x, int y) const
+    {
+        return Get(x,y) & BG_SELECTED;
+    };
+
     int GetNumBombs() const
     {
         return m_numBombCells;
@@ -75,6 +81,11 @@
     };
 
 
+    int GetNumMarkedCells() const
+    {
+        return m_numMarkedCells;
+    };
+
 
     bool Init(int width, int height);
 
@@ -83,7 +94,7 @@
     void Mark(int x, int y);
 
     // Unhides a cell
-    void Unhide(int x, int y);
+    void Unhide(int x, int y, bool b_selected);
 
     // Makes a cell exploded
     void Explode(int x, int y);
@@ -98,7 +109,7 @@
 
     int m_width, m_height;
     short *m_field;
-    int m_numBombCells, m_numRemainingCells;
+    int m_numBombCells, m_numRemainingCells, m_numMarkedCells;
 
 };
 

 	  	 

 include/wx/filefn.h         | 11 +++++++++++
 include/wx/filename.h       |  7 ++++---
 interface/wx/filename.h     | 16 ++++++++++++++++
 src/common/filename.cpp     | 31 +++++++++++++++++++++++++++++++
 src/msw/mslu.cpp            |  8 ++++++++
 src/msw/wince/filefnwce.cpp |  6 ++++++
 6 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/include/wx/filefn.h b/include/wx/filefn.h
index ad0333d..1f60a46 100644
--- a/include/wx/filefn.h
+++ b/include/wx/filefn.h
@@ -171,6 +171,7 @@ enum wxPosixPermissions
     #define wxFileOffsetFmtSpec wxT("I64")
     WXDLLIMPEXP_BASE int wxCRT_Open(const wxChar *filename, int oflag, int WXUNUSED(pmode));
     WXDLLIMPEXP_BASE int wxCRT_Access(const wxChar *name, int WXUNUSED(how));
+    WXDLLIMPEXP_BASE int wxCRT_Chmod(const wxChar *name, int WXUNUSED(how));
     WXDLLIMPEXP_BASE int wxClose(int fd);
     WXDLLIMPEXP_BASE int wxFsync(int WXUNUSED(fd));
     WXDLLIMPEXP_BASE int wxRead(int fd, void *buf, unsigned int count);
@@ -331,6 +332,7 @@ enum wxPosixPermissions
     // first the ANSI versions
     #define   wxCRT_OpenA       wxPOSIX_IDENT(open)
     #define   wxCRT_AccessA     wxPOSIX_IDENT(access)
+    #define   wxCRT_ChmodA      wxPOSIX_IDENT(chmod)
     #define   wxCRT_MkDirA      wxPOSIX_IDENT(mkdir)
     #define   wxCRT_RmDirA      wxPOSIX_IDENT(rmdir)
     #ifdef wxHAS_HUGE_FILES
@@ -362,6 +364,7 @@ enum wxPosixPermissions
         #endif
 
         #define   wxCRT_AccessW     _waccess
+        #define   wxCRT_ChmodW      _wchmod
         #define   wxCRT_MkDirW      _wmkdir
         #define   wxCRT_RmDirW      _wrmdir
         #ifdef wxHAS_HUGE_FILES
@@ -380,6 +383,8 @@ enum wxPosixPermissions
                                                int flags, int mode);
             WXDLLIMPEXP_BASE int wxMSLU__waccess(const wxChar *name,
                                                  int mode);
+            WXDLLIMPEXP_BASE int wxMSLU__wchmod(const wxChar *name,
+                                                 int mode);
             WXDLLIMPEXP_BASE int wxMSLU__wmkdir(const wxChar *name);
             WXDLLIMPEXP_BASE int wxMSLU__wrmdir(const wxChar *name);
 
@@ -389,12 +394,14 @@ enum wxPosixPermissions
             #define   wxCRT_Open       wxMSLU__wopen
 
             #define   wxCRT_Access     wxMSLU__waccess
+            #define   wxCRT_Chmod      wxMSLU__wchmod
             #define   wxCRT_MkDir      wxMSLU__wmkdir
             #define   wxCRT_RmDir      wxMSLU__wrmdir
             #define   wxCRT_Stat       wxMSLU__wstat
         #else // !wxUSE_UNICODE_MSLU
             #define wxCRT_Open      wxCRT_OpenW
             #define wxCRT_Access    wxCRT_AccessW
+            #define wxCRT_Chmod     wxCRT_ChmodW
             #define wxCRT_MkDir     wxCRT_MkDirW
             #define wxCRT_RmDir     wxCRT_RmDirW
             #define wxCRT_Stat      wxCRT_StatW
@@ -402,6 +409,7 @@ enum wxPosixPermissions
     #else // !wxUSE_UNICODE
         #define wxCRT_Open      wxCRT_OpenA
         #define wxCRT_Access    wxCRT_AccessA
+        #define wxCRT_Chmod     wxCRT_ChmodA
         #define wxCRT_MkDir     wxCRT_MkDirA
         #define wxCRT_RmDir     wxCRT_RmDirA
         #define wxCRT_Stat      wxCRT_StatA
@@ -481,6 +489,7 @@ enum wxPosixPermissions
     #define   wxCRT_Stat       stat
     #define   wxCRT_Lstat      lstat
     #define   wxCRT_Access     access
+    #define   wxCRT_Chmod      chmod
 
     #define wxHAS_NATIVE_LSTAT
 #endif // platforms
@@ -502,6 +511,8 @@ enum wxPosixPermissions
 
 inline int wxAccess(const wxString& path, mode_t mode)
     { return wxCRT_Access(path.fn_str(), mode); }
+inline int wxChmod(const wxString& path, mode_t mode)
+    { return wxCRT_Chmod(path.fn_str(), mode); }
 inline int wxOpen(const wxString& path, int flags, mode_t mode)
     { return wxCRT_Open(path.fn_str(), flags, mode); }
 
diff --git a/include/wx/filename.h b/include/wx/filename.h
index 7768d77..d4f79f5 100644
--- a/include/wx/filename.h
+++ b/include/wx/filename.h
@@ -17,9 +17,8 @@
 
     1. support for drives under Windows
     2. more file operations:
-        a) chmod()
-        b) [acm]time() - get and set
-        c) rename()?
+        a) [acm]time() - get and set
+        b) rename()?
     3. SameFileAs() function to compare inodes under Unix
  */
 
@@ -266,6 +265,8 @@ public:
     bool IsFileExecutable() const { return wxIsExecutable(GetFullPath()); }
     static bool IsFileExecutable(const wxString &path) { return wxFileExists(path) && wxIsExecutable(path); }
 
+    bool SetPermissions(int permissions);
+
 
     // time functions
 #if wxUSE_DATETIME
diff --git a/interface/wx/filename.h b/interface/wx/filename.h
index 29f79a9..35830de 100644
--- a/interface/wx/filename.h
+++ b/interface/wx/filename.h
@@ -1258,6 +1258,22 @@ public:
     void SetPath(const wxString& path, wxPathFormat format = wxPATH_NATIVE);
 
     /**
+        Sets permissions for this file or directory.
+
+        @param permissions
+            The new permissions.
+
+        @since 2.9.6
+
+        @note If this is a symbolic link and it should not be followed
+              this call will fail.
+
+        @return @true on success, @false if an error occurred (for example,
+                the file doesn't exist).
+    */
+    bool SetPermissions(int permissions)
+
+    /**
         Sets the file creation and last access/modification times (any of the pointers
         may be @NULL).
 
diff --git a/src/common/filename.cpp b/src/common/filename.cpp
index 44b47f0..0dcaf42 100644
--- a/src/common/filename.cpp
+++ b/src/common/filename.cpp
@@ -2574,6 +2574,37 @@ wxString wxFileName::StripExtension(const wxString& fullpath)
 }
 
 // ----------------------------------------------------------------------------
+// file permissions functions
+// ----------------------------------------------------------------------------
+
+bool wxFileName::SetPermissions(int permissions)
+{
+    // Don't do anything for a symlink but first make sure it is one.
+    if ( m_dontFollowLinks &&
+         Exists(wxFILE_EXISTS_SYMLINK|wxFILE_EXISTS_NO_FOLLOW) )
+    {
+        // Looks like changing permissions for a symlinc is only supported
+        // on BSD where lchmod is present and correctly implemented.
+        // lists.gnu.org/archive/html//bug-coreutils/2009-09/msg00268.html
+        return false;
+    }
+
+#if defined( __WINDOWS__ )
+    int accMode = 0;
+
+    if ( permissions & (wxS_IRUSR|wxS_IRGRP|wxS_IROTH) )
+        accMode = _S_IREAD;
+
+    if ( permissions & (wxS_IWUSR|wxS_IWGRP|wxS_IWOTH) )
+        accMode |= _S_IWRITE;
+
+    permissions = accMode;
+#endif
+
+    return wxChmod(GetFullPath(), permissions) == 0;
+}
+
+// ----------------------------------------------------------------------------
 // time functions
 // ----------------------------------------------------------------------------
 
diff --git a/src/msw/mslu.cpp b/src/msw/mslu.cpp
index ec882a9..8b9ee14 100644
--- a/src/msw/mslu.cpp
+++ b/src/msw/mslu.cpp
@@ -200,6 +200,14 @@ WXDLLIMPEXP_BASE int wxMSLU__waccess(const wchar_t *name, int mode)
         return wxCRT_AccessW(name, mode);
 }
 
+WXDLLIMPEXP_BASE int wxMSLU__wchmod(const wchar_t *name, int mode)
+{
+    if ( wxUsingUnicowsDll() )
+        return wxCRT_ChmodA(wxConvFile.cWX2MB(name), mode);
+    else
+        return wxCRT_ChmodW(name, mode);
+}
+
 WXDLLIMPEXP_BASE int wxMSLU__wmkdir(const wchar_t *name)
 {
     if ( wxUsingUnicowsDll() )
diff --git a/src/msw/wince/filefnwce.cpp b/src/msw/wince/filefnwce.cpp
index f990d7e..ab77646 100644
--- a/src/msw/wince/filefnwce.cpp
+++ b/src/msw/wince/filefnwce.cpp
@@ -113,6 +113,12 @@ int wxCRT_Access(const wxChar *name, int WXUNUSED(how))
     return 0;
 }
 
+int wxCRT_Chmod(const wxChar *WXUNUSED(name), int WXUNUSED(how))
+{
+    // TODO
+    return -1;
+}
+
 int wxClose(int fd)
 {
     if (CloseHandle((HANDLE)fd))

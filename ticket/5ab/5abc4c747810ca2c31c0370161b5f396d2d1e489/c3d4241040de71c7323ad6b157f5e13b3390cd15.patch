 include/wx/filefn.h         |  18 ++++++++
 interface/wx/filefn.h       |  61 +++++++++++++++++++++++++
 src/common/filefn.cpp       | 105 ++++++++++++++++++++++++++++++++++++++++++++
 src/msw/mslu.cpp            |   8 ++++
 src/msw/wince/filefnwce.cpp |   6 +++
 5 files changed, 198 insertions(+)

diff --git a/include/wx/filefn.h b/include/wx/filefn.h
index ad0333d..585e590 100644
--- a/include/wx/filefn.h
+++ b/include/wx/filefn.h
@@ -171,6 +171,7 @@ enum wxPosixPermissions
     #define wxFileOffsetFmtSpec wxT("I64")
     WXDLLIMPEXP_BASE int wxCRT_Open(const wxChar *filename, int oflag, int WXUNUSED(pmode));
     WXDLLIMPEXP_BASE int wxCRT_Access(const wxChar *name, int WXUNUSED(how));
+    WXDLLIMPEXP_BASE int wxCRT_Chmod(const wxChar *name, int WXUNUSED(how));
     WXDLLIMPEXP_BASE int wxClose(int fd);
     WXDLLIMPEXP_BASE int wxFsync(int WXUNUSED(fd));
     WXDLLIMPEXP_BASE int wxRead(int fd, void *buf, unsigned int count);
@@ -331,6 +332,7 @@ enum wxPosixPermissions
     // first the ANSI versions
     #define   wxCRT_OpenA       wxPOSIX_IDENT(open)
     #define   wxCRT_AccessA     wxPOSIX_IDENT(access)
+    #define   wxCRT_ChmodA      wxPOSIX_IDENT(chmod)
     #define   wxCRT_MkDirA      wxPOSIX_IDENT(mkdir)
     #define   wxCRT_RmDirA      wxPOSIX_IDENT(rmdir)
     #ifdef wxHAS_HUGE_FILES
@@ -362,6 +364,7 @@ enum wxPosixPermissions
         #endif
 
         #define   wxCRT_AccessW     _waccess
+        #define   wxCRT_ChmodW      _wchmod
         #define   wxCRT_MkDirW      _wmkdir
         #define   wxCRT_RmDirW      _wrmdir
         #ifdef wxHAS_HUGE_FILES
@@ -380,6 +383,8 @@ enum wxPosixPermissions
                                                int flags, int mode);
             WXDLLIMPEXP_BASE int wxMSLU__waccess(const wxChar *name,
                                                  int mode);
+            WXDLLIMPEXP_BASE int wxMSLU__wchmod(const wxChar *name,
+                                                 int mode);
             WXDLLIMPEXP_BASE int wxMSLU__wmkdir(const wxChar *name);
             WXDLLIMPEXP_BASE int wxMSLU__wrmdir(const wxChar *name);
 
@@ -389,12 +394,14 @@ enum wxPosixPermissions
             #define   wxCRT_Open       wxMSLU__wopen
 
             #define   wxCRT_Access     wxMSLU__waccess
+            #define   wxCRT_Chmod      wxMSLU__wchmod
             #define   wxCRT_MkDir      wxMSLU__wmkdir
             #define   wxCRT_RmDir      wxMSLU__wrmdir
             #define   wxCRT_Stat       wxMSLU__wstat
         #else // !wxUSE_UNICODE_MSLU
             #define wxCRT_Open      wxCRT_OpenW
             #define wxCRT_Access    wxCRT_AccessW
+            #define wxCRT_Chmod     wxCRT_ChmodW
             #define wxCRT_MkDir     wxCRT_MkDirW
             #define wxCRT_RmDir     wxCRT_RmDirW
             #define wxCRT_Stat      wxCRT_StatW
@@ -402,6 +409,7 @@ enum wxPosixPermissions
     #else // !wxUSE_UNICODE
         #define wxCRT_Open      wxCRT_OpenA
         #define wxCRT_Access    wxCRT_AccessA
+        #define wxCRT_Chmod     wxCRT_ChmodA
         #define wxCRT_MkDir     wxCRT_MkDirA
         #define wxCRT_RmDir     wxCRT_RmDirA
         #define wxCRT_Stat      wxCRT_StatA
@@ -481,6 +489,7 @@ enum wxPosixPermissions
     #define   wxCRT_Stat       stat
     #define   wxCRT_Lstat      lstat
     #define   wxCRT_Access     access
+    #define   wxCRT_Chmod      chmod
 
     #define wxHAS_NATIVE_LSTAT
 #endif // platforms
@@ -502,6 +511,8 @@ enum wxPosixPermissions
 
 inline int wxAccess(const wxString& path, mode_t mode)
     { return wxCRT_Access(path.fn_str(), mode); }
+inline int wxChmod(const wxString& path, mode_t mode)
+    { return wxCRT_Chmod(path.fn_str(), mode); }
 inline int wxOpen(const wxString& path, int flags, mode_t mode)
     { return wxCRT_Open(path.fn_str(), flags, mode); }
 
@@ -625,6 +636,13 @@ WXDLLIMPEXP_BASE bool wxConcatFiles(const wxString& file1, const wxString& file2
 WXDLLIMPEXP_BASE bool wxCopyFile(const wxString& file1, const wxString& file2,
                                  bool overwrite = true);
 
+// Change file permissions
+WXDLLIMPEXP_BASE bool wxSetFilePermissions(const wxString& file, int permissions);
+WXDLLIMPEXP_BASE bool wxMakeFileReadable(const wxString& file,
+                                         int permissions = wxS_IRUSR|wxS_IRGRP|wxS_IROTH);
+WXDLLIMPEXP_BASE bool wxMakeFileWritable(const wxString& file,
+                                         int permissions = wxS_IWUSR|wxS_IWGRP|wxS_IWOTH);
+
 // Remove file
 WXDLLIMPEXP_BASE bool wxRemoveFile(const wxString& file);
 
diff --git a/interface/wx/filefn.h b/interface/wx/filefn.h
index 4464a36..7eeaf4d 100644
--- a/interface/wx/filefn.h
+++ b/interface/wx/filefn.h
@@ -522,6 +522,67 @@ wxFileKind wxGetFileKind(int fd);
 wxFileKind wxGetFileKind(FILE* fp);
 //@}
 
+/**
+    Sets permissions for a file or directory.
+
+    @param file
+        The file or dir to be affected.
+    @param permissions
+        The new file permissions.
+
+    @since 2.9.6
+
+    @note If the path is a symbolic link the changes will be performed
+          on the file it points to.
+
+    @return @true on success, @false if an error occurred (for example, @a file doesn’t exist).
+
+    @header{wx/filefn.h}
+*/
+bool wxSetFilePermissions(const wxString& file, int permissions)
+
+/**
+    Changes read permissions for a file or directory without changing the other ones.
+
+    @param file
+        The file or dir to be affected.
+    @param permissions
+        The new read permissions.
+
+    @since 2.9.6
+
+    @note If the path is a symbolic link the changes will be performed
+          on the file it points to.
+          Also, since MSW has only generic read permissions, either of the three
+          read permissions will be enough to make the file readable.
+
+    @return @true on success, @false if an error occurred (for example, @a file doesn’t exist).
+
+    @header{wx/filefn.h}
+*/
+bool wxMakeFileReadable(const wxString& file, int permissions = wxS_IRUSR|wxS_IRGRP|wxS_IROTH)
+
+/**
+    Changes write permissions for a file or directory without changing the other ones.
+
+    @param file
+        The file or dir to be affected.
+    @param permissions
+        The new write permissions.
+
+    @since 2.9.6
+
+    @note If the path is a symbolic link the changes will be performed
+          on the file it points to.
+          Also, since MSW has only generic write permissions, either of the three
+          write permissions will be enough to make the file writable.
+
+    @return @true on success, @false if an error occurred (for example, @a file doesn’t exist).
+
+    @header{wx/filefn.h}
+*/
+bool wxMakeFileWritable(const wxString& file, int permissions = wxS_IWUSR|wxS_IWGRP|wxS_IWOTH)
+
 /** @addtogroup group_funcmacro_file */
 //@{
 /**
diff --git a/src/common/filefn.cpp b/src/common/filefn.cpp
index f723d12..804c520 100644
--- a/src/common/filefn.cpp
+++ b/src/common/filefn.cpp
@@ -1159,6 +1159,111 @@ wxCopyFile (const wxString& file1, const wxString& file2, bool overwrite)
     return true;
 }
 
+// Change file permissions
+
+bool wxSetFilePermissions(const wxString& file, int permissions)
+{
+#if defined( __WINDOWS__ )
+    int accMode = 0;
+
+    if ( permissions & (wxS_IRUSR|wxS_IRGRP|wxS_IROTH) )
+        accMode = _S_IREAD;
+
+    if ( permissions & (wxS_IWUSR|wxS_IWGRP|wxS_IWOTH) )
+        accMode |= _S_IWRITE;
+
+    permissions = accMode;
+#endif
+
+    return wxChmod(file, permissions) == 0;
+}
+
+bool wxMakeFileReadable(const wxString& file, int permissions)
+{
+    int accMode = 0;
+
+#if defined( __WINDOWS__ )
+    // keep write permission if already available
+    if ( wxIsWritable(file) )
+        accMode = _S_IWRITE;
+
+    if ( permissions & (wxS_IRUSR|wxS_IRGRP|wxS_IROTH) )
+        accMode |= _S_IREAD;
+
+#elif defined( __UNIX__ ) || defined(__OS2__)
+    wxStructStat fbuf;
+    // get permissions of file
+    if ( wxStat(file, &fbuf) != 0 )
+    {
+        // the file probably doesn't exist or we haven't the rights to read
+        // from it anyhow
+        wxLogSysError(_("Impossible to get permissions for file '%s'"),
+                      file.c_str());
+        return false;
+    }
+
+    // keep only read permissions
+    permissions &= wxS_IRUSR|wxS_IRGRP|wxS_IROTH;
+
+    accMode = fbuf.st_mode &
+              (wxS_IRUSR|wxS_IWUSR|wxS_IXUSR|
+               wxS_IRGRP|wxS_IWGRP|wxS_IXGRP|
+               wxS_IROTH|wxS_IWOTH|wxS_IXOTH) | // keep only file permissions
+              permissions; // add requested permissions to the already present ones
+
+#else
+    wxUnusedVar(file);
+    wxUnusedVar(permissions);
+    // TODO
+    return false;
+#endif
+
+    return wxChmod(file, accMode) == 0;
+}
+
+bool wxMakeFileWritable(const wxString& file, int permissions)
+{
+    int accMode = 0;
+
+#if defined( __WINDOWS__ )
+    // keep read permission if already available
+    if ( wxIsReadable(file) )
+        accMode = _S_IREAD;
+
+    if ( permissions & (wxS_IWUSR|wxS_IWGRP|wxS_IWOTH) )
+        accMode |= _S_IWRITE;
+
+#elif defined( __UNIX__ ) || defined(__OS2__)
+    wxStructStat fbuf;
+    // get permissions of file
+    if ( wxStat(file, &fbuf) != 0 )
+    {
+        // the file probably doesn't exist or we haven't the rights to read
+        // from it anyhow
+        wxLogSysError(_("Impossible to get permissions for file '%s'"),
+                      file.c_str());
+        return false;
+    }
+
+    // keep only write permissions
+    permissions &= wxS_IWUSR|wxS_IWGRP|wxS_IWOTH;
+
+    accMode = fbuf.st_mode &
+              (wxS_IRUSR|wxS_IWUSR|wxS_IXUSR|
+               wxS_IRGRP|wxS_IWGRP|wxS_IXGRP|
+               wxS_IROTH|wxS_IWOTH|wxS_IXOTH) | // keep only file permissions
+              permissions; // add requested permissions to the already present ones
+
+#else
+    wxUnusedVar(file);
+    wxUnusedVar(permissions);
+    // TODO
+    return false;
+#endif
+
+    return wxChmod(file, accMode) == 0;
+}
+
 bool
 wxRenameFile(const wxString& file1, const wxString& file2, bool overwrite)
 {
diff --git a/src/msw/mslu.cpp b/src/msw/mslu.cpp
index ec882a9..8b9ee14 100644
--- a/src/msw/mslu.cpp
+++ b/src/msw/mslu.cpp
@@ -200,6 +200,14 @@ WXDLLIMPEXP_BASE int wxMSLU__waccess(const wchar_t *name, int mode)
         return wxCRT_AccessW(name, mode);
 }
 
+WXDLLIMPEXP_BASE int wxMSLU__wchmod(const wchar_t *name, int mode)
+{
+    if ( wxUsingUnicowsDll() )
+        return wxCRT_ChmodA(wxConvFile.cWX2MB(name), mode);
+    else
+        return wxCRT_ChmodW(name, mode);
+}
+
 WXDLLIMPEXP_BASE int wxMSLU__wmkdir(const wchar_t *name)
 {
     if ( wxUsingUnicowsDll() )
diff --git a/src/msw/wince/filefnwce.cpp b/src/msw/wince/filefnwce.cpp
index f990d7e..ab77646 100644
--- a/src/msw/wince/filefnwce.cpp
+++ b/src/msw/wince/filefnwce.cpp
@@ -113,6 +113,12 @@ int wxCRT_Access(const wxChar *name, int WXUNUSED(how))
     return 0;
 }
 
+int wxCRT_Chmod(const wxChar *WXUNUSED(name), int WXUNUSED(how))
+{
+    // TODO
+    return -1;
+}
+
 int wxClose(int fd)
 {
     if (CloseHandle((HANDLE)fd))

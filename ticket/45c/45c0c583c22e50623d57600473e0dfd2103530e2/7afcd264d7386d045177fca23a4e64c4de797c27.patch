Index: include/wx/msw/registry.h
===================================================================
--- include/wx/msw/registry.h	(revision 78079)
+++ include/wx/msw/registry.h	(working copy)
@@ -205,7 +205,10 @@
   bool  SetValue(const wxString& szValue, const wxMemoryBuffer& buf);
     // return the binary value
   bool  QueryValue(const wxString& szValue, wxMemoryBuffer& buf) const;
-
+    // return multiple strings
+  bool  QueryValue(const wxString& szValue, wxArrayString& names,
+                   wxArrayString& values) const;
+  
   // query existence of a key/value
     // return true if value exists
   bool HasValue(const wxString& szKey) const;
Index: samples/regtest/regtest.cpp
===================================================================
--- samples/regtest/regtest.cpp	(revision 78079)
+++ samples/regtest/regtest.cpp	(working copy)
@@ -105,6 +105,7 @@
 
     // information
     bool IsKeySelected() const;
+    const wxChar *ValueTypeName (wxRegKey::ValueType type);
 
 private:
     // structure describing a registry key/value
@@ -1054,7 +1055,6 @@
         {
         case wxRegKey::Type_String:
         case wxRegKey::Type_Expand_String:
-        case wxRegKey::Type_Multi_String:
         {
             wxString strValue;
             icon = RegImageList::TextValue;
@@ -1063,6 +1063,19 @@
         }
         break;
 
+        case wxRegKey::Type_Multi_String:
+        {
+            wxArrayString names, values;
+            m_pKey->QueryValue(str, names, values);
+            strItem += wxT ("(multi string) ");
+            for (size_t i=0; i < names.GetCount(); i++) {
+                if (i > 0)
+                    strItem += wxT (", ");
+                strItem += names[i] + wxT ("=") + values[i];
+            }
+        }
+        break;
+
         case wxRegKey::Type_None:
             // @@ handle the error...
             icon = RegImageList::BinaryValue;
@@ -1367,6 +1380,37 @@
     m_pRoot->Refresh();
 }
 
+const wxChar *RegTreeCtrl::ValueTypeName (wxRegKey::ValueType type)
+{
+    switch (type)
+        {
+        case wxRegKey::Type_None:
+            return wxT("none");
+        case wxRegKey::Type_String:
+            return wxT("string");
+        case wxRegKey::Type_Expand_String:
+            return wxT("expand_string");
+        case wxRegKey::Type_Binary:
+            return wxT("binary");
+        case wxRegKey::Type_Dword:
+            return wxT("number");
+        case wxRegKey::Type_Dword_big_endian:
+            return wxT("big endian number");
+        case wxRegKey::Type_Link:
+            return wxT("symbolic link");
+        case wxRegKey::Type_Multi_String:
+            return wxT("multiple strings");
+        case wxRegKey::Type_Resource_list:
+            return wxT("resource list in the resource map");
+        case wxRegKey::Type_Full_resource_descriptor:
+            return wxT("resource list in the hardware description");
+        case wxRegKey::Type_Resource_requirements_list:
+            return wxT("resource requirements list");
+        default:
+            return wxT("unrecognized");
+        }
+}
+
 void RegTreeCtrl::ShowProperties()
 {
     wxTreeItemId lCurrent = GetSelection();
@@ -1405,8 +1449,7 @@
             value,
             parent->m_strName.c_str(),
             key.GetValueType(value),
-            key.IsNumericValue(value) ? wxT("numeric") : wxT("string"));
-
+            ValueTypeName (key.GetValueType (value)));
     }
 }
 
Index: src/msw/registry.cpp
===================================================================
--- src/msw/registry.cpp	(revision 78079)
+++ src/msw/registry.cpp	(working copy)
@@ -970,8 +970,32 @@
   return false;
 }
 
+bool wxRegKey::QueryValue(const wxString& szValue, wxArrayString &names,
+                          wxArrayString &values) const
+{
+    // Make sure value is a multistring.
+    wxASSERT_MSG(GetValueType (szValue) == Type_Multi_String,
+                 wxT("Type mismatch in wxRegKey::QueryValue()."));
 
+    wxMemoryBuffer buf;
+    if (!QueryValue (szValue, buf))
+        return false;
 
+    wxChar *data = static_cast<wxChar *>(buf.GetData());
+    size_t begin = 0;
+    for (size_t i=0; i<buf.GetDataLen()-1; i++) {
+        if (data[i] == 0) {
+            if (i > begin) {
+                wxString pair (&data[begin]);
+                names.Add (pair.BeforeFirst ('='));
+                values.Add (pair.AfterFirst ('='));
+            }
+            begin = i+1;
+        }
+    }
+    return true;
+}
+
 bool wxRegKey::QueryValue(const wxString& szValue,
                           wxString& strValue,
                           bool WXUNUSED_IN_WINCE(raw)) const

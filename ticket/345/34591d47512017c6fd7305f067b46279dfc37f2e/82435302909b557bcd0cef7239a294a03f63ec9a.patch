Index: src/gtk/statbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/statbox.cpp,v
retrieving revision 1.46
diff -bu2 -r1.46 src/gtk/statbox.cpp
--- src/gtk/statbox.cpp
+++ src/gtk/statbox.cpp
@@ -19,4 +19,85 @@
 #include "gtk/gtk.h"
 
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+#define LABEL_PAD 1
+#define LABEL_SIDE_PAD 2
+
+//-----------------------------------------------------------------------------
+// "gtk_frame_size_allocate" signal
+//-----------------------------------------------------------------------------
+
+/*
+    DISCLAIMER: this code has been copied-and-pasted from GTK+'s sources
+                to fix a bug which appears when the GtkFrame's label
+                exceeds the GtkFrame's width.
+*/
+
+extern "C" {
+
+static void
+gtk_frame_size_allocate (GtkWidget     *widget,
+             GtkAllocation *allocation, wxStaticBox *p)
+{
+    GtkFrame *frame = GTK_FRAME (widget);
+    GtkBin *bin = GTK_BIN (widget);
+    GtkAllocation new_allocation;
+
+    widget->allocation = *allocation;
+
+    GTK_FRAME_GET_CLASS (frame)->compute_child_allocation (frame, &new_allocation);
+
+    /* If the child allocation changed, that means that the frame is drawn
+    * in a new place, so we must redraw the entire widget.
+    */
+    if (GTK_WIDGET_MAPPED (widget) &&
+        (new_allocation.x != frame->child_allocation.x ||
+        new_allocation.y != frame->child_allocation.y ||
+        new_allocation.width != frame->child_allocation.width ||
+        new_allocation.height != frame->child_allocation.height))
+        gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+
+    if (bin->child && GTK_WIDGET_VISIBLE (bin->child))
+        gtk_widget_size_allocate (bin->child, &new_allocation);
+
+    frame->child_allocation = new_allocation;
+
+    if (frame->label_widget && GTK_WIDGET_VISIBLE (frame->label_widget))
+    {
+        GtkRequisition child_requisition;
+        GtkAllocation child_allocation;
+        gfloat xalign;
+
+        gtk_widget_get_child_requisition (frame->label_widget, &child_requisition);
+
+        if (gtk_widget_get_direction (widget) == GTK_TEXT_DIR_LTR)
+            xalign = frame->label_xalign;
+        else
+            xalign = 1 - frame->label_xalign;
+
+        child_allocation.x = frame->child_allocation.x + LABEL_SIDE_PAD +
+                (frame->child_allocation.width - child_requisition.width - 
+                    2 * LABEL_PAD - 2 * LABEL_SIDE_PAD) * xalign + LABEL_PAD;
+
+        /* WARNING: this bit is different from GTK+' gtk_frame_size_allocate:
+                    we take the wxMin() of our child width and of our label widget width.
+                    GTK+ takes the label widget width inconditionally and this results
+                    in some cases to the label being rendered outsize the GtkFrame
+        */
+        child_allocation.width = wxMin(child_requisition.width, new_allocation.width);
+
+        child_allocation.y = frame->child_allocation.y - child_requisition.height;
+        child_allocation.height = child_requisition.height;
+
+        gtk_widget_size_allocate (frame->label_widget, &child_allocation);
+    }
+}
+
+}
+
+
 //-----------------------------------------------------------------------------
 // wxStaticBox
@@ -76,4 +157,9 @@
         gtk_frame_set_label_align(GTK_FRAME( m_widget ), xalign, 0.5);
 
+    // in order to "trim" the label widget, we must connect to the size allocate
+    // signal of this GtkFrame overriding the default GTK+'s allocate size function
+    g_signal_connect (m_widget, "size_allocate",
+                      G_CALLBACK (gtk_frame_size_allocate), this);
+
     return TRUE;
 }

 	  	 

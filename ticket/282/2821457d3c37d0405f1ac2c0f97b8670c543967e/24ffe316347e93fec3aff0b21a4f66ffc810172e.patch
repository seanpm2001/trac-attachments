Index: docs/latex/wx/object.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/object.tex,v
retrieving revision 1.8
diff -bu2 -r1.8 docs/latex/wx/object.tex
--- docs/latex/wx/object.tex
+++ docs/latex/wx/object.tex
@@ -117,4 +117,11 @@
 \end{verbatim}

+\membersection{wxObject::IsRefTo}\label{wxobjectisrefto}
+
+\func{bool}{IsRefTo}{\param{const wxObject *}{ obj}}
+
+Returns \true if this object is referencing the \arg{obj}'s data.
+Note that this function only does a {\tt shallow} comparison.
+
 \membersection{wxObject::Ref}\label{wxobjectref}

@@ -166,4 +173,15 @@
 \helpref{wxObjectRefData}{wxobjectrefdata}

+\membersection{wxObject::UnShare}\label{wxobjectunshare}
+
+\func{void}{UnShare}{\void}
+
+Ensure that this object's data is not shared with any other object.
+
+if we have no
+data, it is created using CreateRefData() below, if we have shared data
+it is copied using CloneRefData(), otherwise nothing is done.
+
+
 \membersection{wxObject::operator new}\label{wxobjectnew}

Index: docs/latex/wx/trefcount.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/trefcount.tex,v
retrieving revision 1.1
diff -bu2 -r1.1 docs/latex/wx/trefcount.tex
--- docs/latex/wx/trefcount.tex
+++ docs/latex/wx/trefcount.tex
@@ -1,5 +1,5 @@
 \section{Reference counting}\label{trefcount}

-\subsection{Reference counting and why you shouldn't care about it}\label{refcount}
+\subsection{Why you shouldn't care about it}\label{refcount}

 Many wxWidgets objects use a technique known as \it{reference counting}, also known
@@ -20,4 +20,32 @@


+\subsection{Object comparison}\label{refcountequality}
+
+The $==$ and $!=$ operators of \helpref{wxWidgets COW objects}{refcountlist}
+always do a {\tt deep} comparison.
+
+This means that the equality operator will return \true if two objects are
+identic and not only if they share the same data.
+
+Note that wxWidgets follows the {\it STL philosophy}: when a comparison operator cannot
+be implemented efficiently (like for e.g. wxImage's $==$ operator which would need to
+compare pixel-by-pixel the entire image's data), it's not implemented at all.
+
+That's why not all reference-counted wxWidgets classes provide comparison operators.
+
+Also note that if you only need to do a {\tt shallow} comparison between two
+\helpref{wxObject}{wxobject}-derived classes, you should not use the $==$ and $!=$ operators
+but rather the \helpref{wxObject::IsRefTo}{wxobjectisrefto} function.
+
+
+\subsection{Object destruction}\label{refcountdestruct}
+
+When a COW object destructor is called, it may not delete the data: if it's shared,
+the destructor will just decrement the shared data's reference count without destroying it.
+
+Only when the destructor of the last object owning the data is called, the data is really
+destroyed. As for all other COW-things, this happens transparently to the class users so
+that you shouldn't care about it.
+

 \subsection{List of reference-counted wxWidgets classes}\label{refcountlist}
@@ -27,7 +55,10 @@

 \helpref{wxAcceleratorTable}{wxacceleratortable}\\
+\helpref{wxAnimation}{wxanimation}\\
+\helpref{wxBitmap}{wxbitmap}\\
 \helpref{wxBrush}{wxbrush}\\
 \helpref{wxCursor}{wxcursor}\\
 \helpref{wxFont}{wxfont}\\
+\helpref{wxIcon}{wxicon}\\
 \helpref{wxImage}{wximage}\\
 \helpref{wxMetafile}{wxmetafile}\\
@@ -35,7 +66,8 @@
 \helpref{wxPen}{wxpen}\\
 \helpref{wxRegion}{wxregion}\\
-\helpref{wxRegionIterator}{wxregioniterator}\\
 \helpref{wxString}{wxstring}

+Note that the list above reports the objects which are reference-counted in all ports of
+wxWidgets; some ports may use this tecnique also for other classes.


Index: include/wx/dcbuffer.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/dcbuffer.h,v
retrieving revision 1.31
diff -bu2 -r1.31 include/wx/dcbuffer.h
--- include/wx/dcbuffer.h
+++ include/wx/dcbuffer.h
@@ -170,5 +170,5 @@
             window->PrepareDC( m_paintdc );

-        if( buffer != wxNullBitmap )
+        if( buffer.IsOk() )
             Init(&m_paintdc, buffer, style);
         else
Index: include/wx/object.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/object.h,v
retrieving revision 1.127
diff -bu2 -r1.127 include/wx/object.h
--- include/wx/object.h
+++ include/wx/object.h
@@ -474,4 +474,7 @@
     void UnShare() { AllocExclusive(); }

+    // Do a shallow comparison of our referenced data with the given object's refdata
+    bool IsRefTo(const wxObject *p) const { return m_refData == p->m_refData; }
+
 protected:
     // ensure that our data is not shared with anybody else: if we have no
Index: include/wx/variant.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/variant.h,v
retrieving revision 1.46
diff -bu2 -r1.46 include/wx/variant.h
--- include/wx/variant.h
+++ include/wx/variant.h
@@ -333,5 +333,5 @@
     IMPLEMENT_VARIANT_OBJECT_EXPORTED(classname,EMPTY_PARAMETER_VALUE)

-#define IMPLEMENT_VARIANT_OBJECT_EXPORTED(classname,expdecl) \
+#define IMPLEMENT_VARIANT_OBJECT_EXPORTED_NO_EQ(classname,expdecl) \
 class classname##VariantData: public wxVariantData \
 { \
@@ -356,13 +356,4 @@
 IMPLEMENT_CLASS(classname##VariantData, wxVariantData)\
 \
-bool classname##VariantData::Eq(wxVariantData& data) const \
-{\
-    wxASSERT( wxIsKindOf((&data), classname##VariantData) );\
-\
-    classname##VariantData & otherData = (classname##VariantData &) data;\
-\
-    return (otherData.m_value == m_value);\
-}\
-\
 wxString classname##VariantData::GetType() const\
 {\
@@ -391,4 +382,34 @@
 }

+// implements a wxVariantData-derived class using for the Eq() method the operator==
+// which must have been provided by "classname"
+#define IMPLEMENT_VARIANT_OBJECT_EXPORTED(classname,expdecl) \
+IMPLEMENT_VARIANT_OBJECT_EXPORTED_NO_EQ(classname,expdecl) \
+\
+bool classname##VariantData::Eq(wxVariantData& data) const \
+{\
+    wxASSERT( wxIsKindOf((&data), classname##VariantData) );\
+\
+    classname##VariantData & otherData = (classname##VariantData &) data;\
+\
+    return otherData.m_value == m_value;\
+}\
+
+
+// implements a wxVariantData-derived class using for the Eq() method a shallow
+// comparison (through wxObject::IsRefTo function)
+#define IMPLEMENT_VARIANT_OBJECT_EXPORTED_SHALLOWCMP(classname,expdecl) \
+IMPLEMENT_VARIANT_OBJECT_EXPORTED_NO_EQ(classname,expdecl) \
+\
+bool classname##VariantData::Eq(wxVariantData& data) const \
+{\
+    wxASSERT( wxIsKindOf((&data), classname##VariantData) );\
+\
+    classname##VariantData & otherData = (classname##VariantData &) data;\
+\
+    return (otherData.m_value.IsRefTo(&m_value));\
+}\
+
+
 // Since we want type safety wxVariant we need to fetch and dynamic_cast
 // in a seemingly safe way so the compiler can check, so we define
Index: src/common/bmpbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/bmpbase.cpp,v
retrieving revision 1.38
diff -bu2 -r1.38 src/common/bmpbase.cpp
--- src/common/bmpbase.cpp
+++ src/common/bmpbase.cpp
@@ -29,6 +29,6 @@

 #if wxUSE_VARIANT
-IMPLEMENT_VARIANT_OBJECT_EXPORTED(wxBitmap,WXDLLEXPORT)
-IMPLEMENT_VARIANT_OBJECT_EXPORTED(wxIcon,WXDLLEXPORT)
+IMPLEMENT_VARIANT_OBJECT_EXPORTED_SHALLOWCMP(wxBitmap,WXDLLEXPORT)
+IMPLEMENT_VARIANT_OBJECT_EXPORTED_SHALLOWCMP(wxIcon,WXDLLEXPORT)
 #endif

Index: src/common/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/image.cpp,v
retrieving revision 1.237
diff -bu2 -r1.237 src/common/image.cpp
--- src/common/image.cpp
+++ src/common/image.cpp
@@ -50,5 +50,5 @@

 #if wxUSE_VARIANT
-IMPLEMENT_VARIANT_OBJECT_EXPORTED(wxImage,WXDLLEXPORT)
+IMPLEMENT_VARIANT_OBJECT_EXPORTED_SHALLOWCMP(wxImage,WXDLLEXPORT)
 #endif

Index: src/common/wincmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/wincmn.cpp,v
retrieving revision 1.281
diff -bu2 -r1.281 src/common/wincmn.cpp
--- src/common/wincmn.cpp
+++ src/common/wincmn.cpp
@@ -1041,5 +1041,5 @@
     // setting an invalid cursor is ok, it means that we don't have any special
     // cursor
-    if ( m_cursor == cursor )
+    if ( m_cursor.IsRefTo(&cursor) )
     {
         // no change
Index: src/generic/wizard.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/wizard.cpp,v
retrieving revision 1.73
diff -bu2 -r1.73 src/generic/wizard.cpp
--- src/generic/wizard.cpp
+++ src/generic/wizard.cpp
@@ -632,5 +632,5 @@
             bmpPrev = m_bitmap;

-        if ( bmp != bmpPrev )
+        if ( !bmp.IsRefTo(&bmpPrev) )
             m_statbmp->SetBitmap(bmp);
     }
Index: include/wx/gtk/region.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/region.h,v
retrieving revision 1.38
diff -bu2 -r1.38 include/wx/gtk/region.h
--- include/wx/gtk/region.h
+++ include/wx/gtk/region.h
@@ -95,4 +95,5 @@
     wxRegionIterator();
     wxRegionIterator(const wxRegion& region);
+    ~wxRegionIterator();

     void Reset() { m_current = 0u; }
@@ -114,7 +115,13 @@

 private:
+    void Init();
+    void CreateRects( const wxRegion& r );
+
     size_t   m_current;
     wxRegion m_region;

+    wxRect *m_rects;
+    size_t  m_numRects;
+
 private:
     DECLARE_DYNAMIC_CLASS(wxRegionIterator)
cvsdo: WARNING: Using src/gtk/.#region.cpp.1_49 for src/gtk/region.cpp
Index: src/gtk/region.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/region.cpp,v
retrieving revision 1.49
diff -bu2 -r1.49 src/gtk/region.cpp
--- src/gtk/region.cpp
+++ src/gtk/region.cpp
@@ -337,28 +337,31 @@
 // ----------------------------------------------------------------------------

-class wxRIRefData: public wxObjectRefData
+wxRegionIterator::wxRegionIterator()
 {
-public:
-    wxRIRefData() { Init(); }
-    virtual ~wxRIRefData();
-
-    void CreateRects( const wxRegion& r );
-
-    void Init() { m_rects = NULL; m_numRects = 0; }
+    Init();
+    Reset();
+}

-    wxRect *m_rects;
-    size_t  m_numRects;
-};
+wxRegionIterator::wxRegionIterator( const wxRegion& region )
+{
+    Init();
+    Reset(region);
+}

-wxRIRefData::~wxRIRefData()
+void wxRegionIterator::Init()
 {
-    delete [] m_rects;
+    m_rects = NULL;
+    m_numRects = 0;
 }

-void wxRIRefData::CreateRects( const wxRegion& region )
+wxRegionIterator::~wxRegionIterator()
 {
-    delete [] m_rects;
+    wxDELETEA(m_rects);
+}

-    Init();
+void wxRegionIterator::CreateRects( const wxRegion& region )
+{
+    wxDELETEA(m_rects);
+    m_numRects = 0;

     GdkRegion *gdkregion = region.GetRegion();
@@ -387,20 +390,8 @@
 }

-wxRegionIterator::wxRegionIterator()
-{
-    m_refData = new wxRIRefData();
-    Reset();
-}
-
-wxRegionIterator::wxRegionIterator( const wxRegion& region )
-{
-    m_refData = new wxRIRefData();
-    Reset(region);
-}
-
 void wxRegionIterator::Reset( const wxRegion& region )
 {
     m_region = region;
-    ((wxRIRefData*)m_refData)->CreateRects(region);
+    CreateRects(region);
     Reset();
 }
@@ -408,5 +399,5 @@
 bool wxRegionIterator::HaveRects() const
 {
-    return m_current < ((wxRIRefData*)m_refData)->m_numRects;
+    return m_current < m_numRects;
 }

@@ -422,4 +413,5 @@
 {
     wxRegionIterator tmp = *this;
+
     if (HaveRects())
         ++m_current;
@@ -432,5 +424,5 @@
     wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );

-    return ((wxRIRefData*)m_refData)->m_rects[m_current].x;
+    return m_rects[m_current].x;
 }

@@ -439,5 +431,5 @@
     wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );

-    return ((wxRIRefData*)m_refData)->m_rects[m_current].y;
+    return m_rects[m_current].y;
 }

@@ -446,5 +438,5 @@
     wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );

-    return ((wxRIRefData*)m_refData)->m_rects[m_current].width;
+    return m_rects[m_current].width;
 }

@@ -453,5 +445,5 @@
     wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );

-    return ((wxRIRefData*)m_refData)->m_rects[m_current].height;
+    return m_rects[m_current].height;
 }

@@ -460,5 +452,5 @@
     wxRect r;
     if( HaveRects() )
-        r = ((wxRIRefData*)m_refData)->m_rects[m_current];
+        r = m_rects[m_current];

     return r;

 	  	 

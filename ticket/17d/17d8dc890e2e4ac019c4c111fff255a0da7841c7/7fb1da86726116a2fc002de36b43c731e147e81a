? lexer.c
? wxgtk-config
? parser.c
? contrib/Makefile
? contrib/config.status
? contrib/config.log
? contrib/samples/Makefile
? contrib/samples/canvas/Makefile
? contrib/samples/canvas/simple/Makefile
? contrib/samples/canvas/test/Makefile
? contrib/samples/gizmos/Makefile
? contrib/samples/gizmos/multicell/Makefile
? contrib/samples/gizmos/splittree/Makefile
? contrib/samples/mmedia/Makefile
? contrib/samples/ogl/Makefile
? contrib/samples/ogl/ogledit/Makefile
? contrib/samples/ogl/studio/Makefile
? contrib/samples/plot/Makefile
? contrib/samples/stc/Makefile
? contrib/samples/xml/Makefile
? contrib/src/Makefile
? contrib/src/canvas/Makefile
? contrib/src/gizmos/Makefile
? contrib/src/mmedia/Makefile
? contrib/src/ogl/Makefile
? contrib/src/plot/Makefile
? contrib/src/stc/Makefile
? contrib/src/xml/Makefile
? contrib/utils/Makefile
? contrib/utils/convertrc/Makefile
? contrib/utils/wxrc/Makefile
? contrib/utils/wxrcedit/Makefile
? demos/Makefile
? demos/config.status
? demos/config.cache
? demos/config.log
? demos/bombs/Makefile
? demos/bombs/bombs
? demos/dbbrowse/Makefile
? demos/forty/Makefile
? demos/fractal/Makefile
? demos/fractal/fractal
? demos/life/life
? demos/life/Makefile
? demos/poem/Makefile
? demos/poem/wxpoem
? lib/wx
? lib/libwx_gtk-2.3.so.0.0.0
? samples/Makefile
? samples/config.status
? samples/config.log
? samples/calendar/Makefile
? samples/caret/Makefile
? samples/checklst/Makefile
? samples/config/Makefile
? samples/console/Makefile
? samples/controls/Makefile
? samples/db/Makefile
? samples/dialogs/Makefile
? samples/dialup/Makefile
? samples/dnd/Makefile
? samples/docview/Makefile
? samples/docvwmdi/Makefile
? samples/dragimag/Makefile
? samples/drawing/Makefile
? samples/dynamic/Makefile
? samples/event/Makefile
? samples/exec/Makefile
? samples/font/Makefile
? samples/grid/Makefile
? samples/help/Makefile
? samples/html/Makefile
? samples/html/about/Makefile
? samples/html/help/Makefile
? samples/html/helpview/Makefile
? samples/html/printing/Makefile
? samples/html/test/Makefile
? samples/html/virtual/Makefile
? samples/html/widget/Makefile
? samples/html/zip/Makefile
? samples/image/Makefile
? samples/internat/Makefile
? samples/ipc/Makefile
? samples/joytest/Makefile
? samples/layout/Makefile
? samples/listctrl/Makefile
? samples/mdi/Makefile
? samples/memcheck/Makefile
? samples/menu/Makefile
? samples/minifram/Makefile
? samples/minimal/Makefile
? samples/newgrid/Makefile
? samples/notebook/Makefile
? samples/opengl/Makefile
? samples/opengl/cube/Makefile
? samples/opengl/isosurf/Makefile
? samples/opengl/penguin/Makefile
? samples/png/Makefile
? samples/printing/Makefile
? samples/proplist/Makefile
? samples/propsize/Makefile
? samples/resource/Makefile
? samples/richedit/Makefile
? samples/rotate/Makefile
? samples/sashtest/Makefile
? samples/scroll/Makefile
? samples/scrollsub/Makefile
? samples/sockets/Makefile
? samples/splitter/Makefile
? samples/statbar/Makefile
? samples/text/Makefile
? samples/thread/Makefile
? samples/toolbar/Makefile
? samples/treectrl/Makefile
? samples/treelay/Makefile
? samples/typetest/Makefile
? samples/validate/Makefile
? samples/wizard/Makefile
? utils/Makefile
? utils/config.status
? utils/config.log
? utils/HelpGen/Makefile
? utils/HelpGen/src/Makefile
? utils/dialoged/Makefile
? utils/hhp2cached/Makefile
? utils/makegen/Makefile
? utils/tex2rtf/Makefile
? utils/tex2rtf/src/Makefile
Index: include/wx/event.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/event.h,v
retrieving revision 1.114
diff -r1.114 event.h
101a102
>     wxEVT_ANY = -1,
107a109
>     const wxEventType wxEVT_ANY = -1;
Index: src/common/event.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/event.cpp,v
retrieving revision 1.84
diff -r1.84 event.cpp
971a972,973
>     int defaultnum = -1; // Used to store the position of the function
> 						 // corresponding to wxEVT_ANY
989,1006c991,1015
<         if ( eventType == entry.m_eventType )
<         {
<             int tableId1 = entry.m_id,
<                 tableId2 = entry.m_lastId;
< 
<             if ( (tableId1 == -1) ||
<                  (tableId2 == -1 && eventId == tableId1) ||
<                  (tableId2 != -1 &&
<                     (eventId >= tableId1 && eventId <= tableId2)) )
<             {
<                 event.Skip(FALSE);
<                 event.m_callbackUserData = entry.m_callbackUserData;
< 
<                 (this->*((wxEventFunction) (entry.m_fn)))(event);
< 
<                 return !event.GetSkipped();
<             }
<         }
---
> 		if ( entry.m_eventType == wxEVT_ANY)
> 			defaultnum = i;
> 		else		
>         	if ( eventType == entry.m_eventType )
>         	{
>             	int tableId1 = entry.m_id,
>                 	tableId2 = entry.m_lastId;
> 
>             	if ( (tableId1 == -1) ||
>                 	 (tableId2 == -1 && eventId == tableId1) ||
>                  	(tableId2 != -1 &&
>                     	(eventId >= tableId1 && eventId <= tableId2)) )
>             	{
>                 	event.Skip(FALSE);
>                 	event.m_callbackUserData = entry.m_callbackUserData;
> 
>                 	(this->*((wxEventFunction) (entry.m_fn)))(event);
> 
>                 	if (!event.GetSkipped())
> 						return TRUE;
> 					else 
> 						return FALSE;
>             	}
>         	}
> 		
1008,1009c1017,1031
< 
<     return FALSE;
---
> 	// If necessary we call the default function corresponding to wxEVT_ANY :
> 	if (defaultnum != -1)
> 	{
> #ifdef __GNUG__
>        	wxEventTableEntry entry = table.entries[defaultnum];
> #else
>        	const wxEventTableEntry& entry = table.entries[defaultnum];
> #endif
>  		event.Skip(FALSE);
>        	event.m_callbackUserData = entry.m_callbackUserData;
>        	(this->*((wxEventFunction) (entry.m_fn)))(event) ;
>        	if (!event.GetSkipped())
> 			return TRUE;
> 	}
>    	return FALSE;
1071a1094,1103
> 		  
> 		  
> // defaultentry is used to store the default function corresponding to wxEVT_ANY
> // It is necessary to save this function because it has to be call at the end
> // when every other entry in the eventtable has been tried.
> #if WXWIN_COMPATIBILITY_EVENT_TYPES
>     wxEventTableEntry *defaultentry = (wxEventTableEntry*) NULL;  
> #else // !WXWIN_COMPATIBILITY_EVENT_TYPES
>     wxDynamicEventTableEntry *defaultentry = (wxDynamicEventTableEntry*) NULL;
> #endif // WXWIN_COMPATIBILITY_EVENT_TYPES/!WXWIN_COMPATIBILITY_EVENT_TYPES	
1074d1105
< 
1083,1103c1114,1135
< 
<         if (entry->m_fn)
<         {
<             // Match, if event spec says any id will do (id == -1)
<             if ( (event.GetEventType() == entry->m_eventType) &&
<                  (entry->m_id == -1 ||
<                   (entry->m_lastId == -1 && commandId == entry->m_id) ||
<                   (entry->m_lastId != -1 &&
<                   (commandId >= entry->m_id && commandId <= entry->m_lastId))) )
<             {
<                 event.Skip(FALSE);
<                 event.m_callbackUserData = entry->m_callbackUserData;
< 
<                 (this->*((wxEventFunction) (entry->m_fn)))(event);
< 
<                 if (event.GetSkipped())
<                     return FALSE;
<                 else
<                     return TRUE;
<             }
<         }
---
>         if (entry->m_eventType == wxEVT_ANY)
>             defaultentry=entry;
> 	  	else
>         	if (entry->m_fn)
>         	{
>                 // Match, if event spec says any id will do (id == -1)
>                 if ( (event.GetEventType() == entry->m_eventType) &&
>                 	  (entry->m_id == -1 ||
>                 	  (entry->m_lastId == -1 && commandId == entry->m_id) ||
>                 	  (entry->m_lastId != -1 &&
>                 	  (commandId >= entry->m_id && commandId <= entry->m_lastId))) )
>                 {
>                 	  event.Skip(FALSE);
>                 	  event.m_callbackUserData = entry->m_callbackUserData;
> 	          	  (this->*((wxEventFunction) (entry->m_fn)))(event);
> 	          	  if (event.GetSkipped())
>     	              	return FALSE;
> 			  else
> 			  	return TRUE;
> 			  
>         	    }
>         	}
1104a1137,1148
>     }
> 	// If necessary we call the default function corresponding to wxEVT_ANY :
> 
>     if (defaultentry!=NULL) 
>     {
>         event.Skip(FALSE);
>         event.m_callbackUserData = defaultentry->m_callbackUserData;
>         (this->*((wxEventFunction) (defaultentry->m_fn)))(event);
>         if (event.GetSkipped())
>             return FALSE;
>         else
>             return TRUE;

 	  	 

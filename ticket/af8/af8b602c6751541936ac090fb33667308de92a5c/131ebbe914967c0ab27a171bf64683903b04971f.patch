Index: trunk/src/common/textfile.cpp
===================================================================
--- trunk/src/common/textfile.cpp	(revision 53035)
+++ trunk/src/common/textfile.cpp	(working copy)
@@ -100,7 +100,6 @@
     // the file entirely
     size_t bufSize = 0,
            bufPos = 0;
-    char block[1024];
     wxCharBuffer buf;
 
     // first determine if the file is seekable or not and so whether we can
@@ -118,53 +117,58 @@
     {
         // we know the required length, so set the buffer size in advance
         bufSize = fileLength;
-        if ( !buf.extend(bufSize - 1 /* it adds 1 internally */) )
+        if ( !buf.extend(bufSize) )
             return false;
 
         // if the file is seekable, also check that we're at its beginning
         wxASSERT_MSG( m_file.Tell() == 0, _T("should be at start of file") );
-    }
-
-    for ( ;; )
-    {
-        ssize_t nRead = m_file.Read(block, WXSIZEOF(block));
-
-        if ( nRead == wxInvalidOffset )
+	
+	bufPos = m_file.Read(buf.data(), bufSize);
+        if ( bufPos == wxInvalidOffset )
         {
             // read error (error message already given in wxFile::Read)
             return false;
         }
 
-        if ( nRead == 0 )
+        if ( bufPos == 0 )
         {
-            // if no bytes have been read, presumably this is a valid-but-empty file
-            if ( bufPos == 0 )
-                return true;
-
-            // otherwise we've finished reading the file
-            break;
+            // this is a valid-but-empty file
+	    return true;
         }
+    }
+    else
+    {
+	char block[1024];
+	for ( ;; )
+	{
+	    ssize_t nRead = m_file.Read(block, WXSIZEOF(block));
 
-        if ( seekable )
-        {
-            // this shouldn't happen but don't overwrite the buffer if it does
-            wxCHECK_MSG( bufPos + nRead <= bufSize, false,
-                         _T("read more than file length?") );
-        }
-        else // !seekable
-        {
+	    if ( nRead == wxInvalidOffset )
+	    {
+		// read error (error message already given in wxFile::Read)
+		return false;
+	    }
+
+            if ( nRead == 0 )
+            {
+		// if no bytes have been read, presumably this is a valid-but-empty file
+		if ( bufPos == 0 )
+                    return true;
+
+		// otherwise we've finished reading the file
+		break;
+            }
+
             // for non-seekable files we have to allocate more memory on the go
-            if ( !buf.extend(bufPos + nRead - 1 /* it adds 1 internally */) )
+            if ( !buf.extend(bufPos + nRead) )
                 return false;
-        }
 
-        // append to the buffer
-        memcpy(buf.data() + bufPos, block, nRead);
-        bufPos += nRead;
-    }
+	    // append to the buffer
+            memcpy(buf.data() + bufPos, block, nRead);
+            bufPos += nRead;
+	}
 
-    if ( !seekable )
-    {
+	// End of file
         bufSize = bufPos;
     }
 
@@ -179,7 +183,10 @@
     }
 #endif // wxUSE_UNICODE
 
-    free(buf.release()); // we don't need this memory any more
+    // We don't need this memory any more, but for compatibility
+    // we should use the internal memory de-allocator of wxCharBuffer
+    // instead of our own free() function.
+    buf.reset(); 
 
 
     // now break the buffer in lines

 	  	 

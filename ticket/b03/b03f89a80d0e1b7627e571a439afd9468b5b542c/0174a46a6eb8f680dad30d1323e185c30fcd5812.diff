Index: src/common/appbase.cpp
===================================================================
--- src/common/appbase.cpp	(revision 61441)
+++ src/common/appbase.cpp	(working copy)
@@ -333,9 +333,6 @@
 
 bool wxAppConsoleBase::ProcessIdle()
 {
-    // process pending wx events before sending idle events
-    ProcessPendingEvents();
-
     // synthesize an idle event and check if more of them are needed
     wxIdleEvent event;
     event.SetEventObject(this);
Index: src/common/evtloopcmn.cpp
===================================================================
--- src/common/evtloopcmn.cpp	(revision 61441)
+++ src/common/evtloopcmn.cpp	(working copy)
@@ -94,18 +94,33 @@
     m_shouldExit = false;
 }
 
+bool wxEventLoopManual::ProcessEvents()
+{
+    // process pending wx events first as they correspond to low-level events
+    // which happened before, i.e. typically pending events were queued by a
+    // previous call to Dispatch() and if we didn't process them now the next
+    // call to it might enqueue them again (as happens with e.g. socket events
+    // which would be generated as long as there is input available on socket
+    // and this input is only removed from it when pending event handlers are
+    // executed)
+    if ( wxTheApp )
+        wxTheApp->ProcessPendingEvents();
+
+    return Dispatch();
+}
+
 int wxEventLoopManual::Run()
 {
     // event loops are not recursive, you need to create another loop!
     wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
 
-    // ProcessIdle() and Dispatch() below may throw so the code here should
+    // ProcessIdle() and ProcessEvents() below may throw so the code here should
     // be exception-safe, hence we must use local objects for all actions we
     // should undo
     wxEventLoopActivator activate(this);
 
     // we must ensure that OnExit() is called even if an exception is thrown
-    // from inside Dispatch() but we must call it from Exit() in normal
+    // from inside ProcessEvents() but we must call it from Exit() in normal
     // situations because it is supposed to be called synchronously,
     // wxModalEventLoop depends on this (so we can't just use ON_BLOCK_EXIT or
     // something similar here)
@@ -133,14 +148,15 @@
                 if ( m_shouldExit )
                 {
                     while ( Pending() )
-                        Dispatch();
+                        ProcessEvents();
 
                     break;
                 }
 
-                // a message came or no more idle processing to do, sit in
-                // Dispatch() waiting for the next message
-                if ( !Dispatch() )
+                // a message came or no more idle processing to do, dispatch
+                // all the pending events and call Dispatch() to wait for the
+                // next message
+                if ( !ProcessEvents() )
                 {
                     // we got WM_QUIT
                     break;
Index: include/wx/evtloop.h
===================================================================
--- include/wx/evtloop.h	(revision 61442)
+++ include/wx/evtloop.h	(working copy)
@@ -197,6 +197,12 @@
     bool m_shouldExit;
 
 private:
+    // process all already pending events and dispatch a new one (blocking
+    // until it appears in the event queue if necessary)
+    //
+    // returns the return value of Dispatch()
+    bool ProcessEvents();
+
     wxDECLARE_NO_COPY_CLASS(wxEventLoopManual);
 };
 

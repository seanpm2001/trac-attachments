Index: src/msw/mediactrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/mediactrl.cpp,v
retrieving revision 1.56.2.3
diff -u -r1.56.2.3 mediactrl.cpp
--- src/msw/mediactrl.cpp	2006/01/25 20:29:10	1.56.2.3
+++ src/msw/mediactrl.cpp	2006/03/05 21:21:26
@@ -51,10 +51,13 @@
 //---------------------------------------------------------------------------
 #include "wx/log.h"         //wxLogDebug
 #include "wx/math.h"        //log10 & pow
-#include "wx/msw/private.h" //user info and wndproc setting/getting
 #include "wx/dcclient.h"
 #include "wx/timer.h"
 #include "wx/dynlib.h"
+#include "wx/settings.h"
+
+#include "wx/msw/private.h" //user info and wndproc setting/getting
+#include "wx/msw/registry.h" //wxRegKey etc. in wxQTMediaBackend
 
 //---------------------------------------------------------------------------
 // Externals (somewhere in src/msw/app.cpp and src/msw/window.cpp)
@@ -1207,6 +1210,7 @@
     wxDL_VOIDMETHOD_DEFINE(UpdateMovie, (Movie m), (m));
     wxDL_VOIDMETHOD_DEFINE(EndUpdate, (CGrafPtr port), (port));
     wxDL_METHOD_DEFINE( OSErr, GetMoviesStickyError, (), (), -1);
+    wxDL_VOIDMETHOD_DEFINE(ClearMoviesStickyError, (), ());
 };
 
 bool wxQuickTimeLibrary::Initialize()
@@ -1215,11 +1219,35 @@
 
     bool bWasLoggingEnabled = wxLog::EnableLogging(false);    //Turn off the wxDynamicLibrary logging
 
+    //Quicktime 6 and earlier only distributed the dll in the 
+    //Quicktime windows SDK, however....
     if(!m_dll.Load(wxT("qtmlClient.dll")))
     {
-        wxLog::EnableLogging(bWasLoggingEnabled);
-        return false;
-    }
+        //Quicktime 7 distributes the dll with the application
+        //but the dll is probably not in the user's path, so
+        //we do a bit of trickery to find the dll
+	    
+        //(HKEY_LOCAL_MACHINE\\SOFTWARE\\Apple Computer, Inc.\\QuickTime)
+        //Key "QTExtDir"
+        wxRegKey key(wxRegKey::HKLM, wxT("SOFTWARE\\Apple Computer, Inc.\\QuickTime"));
+        if ( key.Exists() )
+        {
+            wxString sQTExtPath;
+            if( key.QueryValue(wxT("QTExtDir"), sQTExtPath) )
+            {
+                m_dll.Load(sQTExtPath + 
+                           wxT("QTMLClient.dll"));
+            }
+        }
+
+        if(!m_dll.IsLoaded()) //Did the registry method fail?
+        {
+		    //OK, now we've REALLY failed to find it :(
+            wxLog::EnableLogging(bWasLoggingEnabled);
+            return false;
+        }//!IsLoaded?
+     }
+ 
 
     wxDL_METHOD_LOAD( m_dll, StartMovie, m_ok );
     wxDL_METHOD_LOAD( m_dll, StopMovie, m_ok );
@@ -1276,7 +1304,8 @@
     wxDL_METHOD_LOAD( m_dll, UpdateMovie, m_ok );
     wxDL_METHOD_LOAD( m_dll, EndUpdate, m_ok );
     wxDL_METHOD_LOAD( m_dll, GetMoviesStickyError, m_ok );
-
+    wxDL_METHOD_LOAD( m_dll, ClearMoviesStickyError, m_ok );
+ 
     wxLog::EnableLogging(bWasLoggingEnabled);
     m_ok = true;
 
@@ -2849,10 +2878,7 @@
     if(m_lib.IsOk())
     {
         if(m_pMC)
-        {
             m_lib.DisposeMovieController(m_pMC);
-        //    m_pMC = NULL;
-        }
 
         // destroy wxQTMediaEvtHandler we pushed on it
         m_ctrl->PopEventHandler(true);
@@ -2913,10 +2939,13 @@
     // can use it as a WindowRef
     m_lib.CreatePortAssociation(m_ctrl->GetHWND(), NULL, 0L);
 
-    //Part of a suggestion from Greg Hazel to repaint
-    //movie when idle
+    // Part of a suggestion from Greg Hazel to repaint
+    // movie when idle
     m_ctrl->PushEventHandler(new wxQTMediaEvtHandler(this, m_ctrl->GetHWND()));
 
+    // Set background color etc. implicitly
+    wxQTMediaBackend::ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_NONE);
+
     // done
     return true;
 }
@@ -2938,6 +2967,13 @@
     short movieResFile = 0; //= 0 because of annoying VC6 warning
     FSSpec sfFile;
 
+    //RN: Clear the movies sticky error that we will check later
+    //as CreateControl() sometimes gives an error in some cases on QT7Win
+    //(-43 for example, which I can't find anywhere...) and to 
+    //make sure that the last error doesn't interfere with this particular
+    //Load() call
+    m_lib.ClearMoviesStickyError();
+
     if (m_lib.NativePathNameToFSSpec ((char*) (const char*) fileName.mb_str(),
                                 &sfFile, 0) != noErr)
         return false;
@@ -2963,7 +2999,7 @@
     //of wxMediaCtrl - so it just does what the QuickTime player does
     if(err == noErr  && m_lib.GetMoviesStickyError() == noErr)
     {
-    m_lib.CloseMovieFile (movieResFile);
+        m_lib.CloseMovieFile (movieResFile);
 
         FinishLoad();
         return true;
@@ -3033,7 +3069,7 @@
     if (err == noErr)
     {
         long timeNow;
-    Fixed playRate;
+        Fixed playRate;
 
         timeNow = m_lib.GetMovieTime(m_movie, NULL);
         wxASSERT(m_lib.GetMoviesError() == noErr);
@@ -3315,8 +3351,8 @@
 
     if(m_timer)
     {
-    delete m_timer;
-    m_timer = NULL;
+        delete m_timer;
+        m_timer = NULL;
     }
 
     m_lib.StopMovie(m_movie);
@@ -3401,7 +3437,19 @@
             //set the user data of our window
             wxSetWindowUserData((HWND)m_ctrl->GetHWND(), this);
         }
+
+        // don't erase the background of our control window so that 
+        // resizing is a bit smoother as the movie controller handles it
+        m_ctrl->SetBackgroundStyle(wxBG_STYLE_CUSTOM);
     }
+    else
+    {
+        //Without the controller we don't repaint our own background 
+        //if there isn't a movie so make sure it has one... 
+        m_ctrl->SetBackgroundColour(
+               wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)
+                                   );
+    }
 
     NotifyMovieSizeChanged();
 
@@ -3531,5 +3579,3 @@
 //  End wxMediaCtrl Compilation Guard and this file
 //---------------------------------------------------------------------------
 #endif //wxUSE_MEDIACTRL
-
-

 	  	 

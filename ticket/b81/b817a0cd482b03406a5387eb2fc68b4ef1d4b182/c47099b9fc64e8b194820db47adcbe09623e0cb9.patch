diff --git a/include/wx/gtk/hyperlink.h b/include/wx/gtk/hyperlink.h
index 486c5b8..a86bace 100644
--- a/include/wx/gtk/hyperlink.h
+++ b/include/wx/gtk/hyperlink.h
@@ -13,6 +13,9 @@
 
 #include "wx/generic/hyperlink.h"
 
+#ifdef __WXGTK3__
+class wxHyperlinkCtrlImpl;
+#endif
 // ----------------------------------------------------------------------------
 // wxHyperlinkCtrl
 // ----------------------------------------------------------------------------
@@ -72,6 +75,11 @@ protected:
 
     virtual GdkWindow *GTKGetWindow(wxArrayGdkWindows& windows) const wxOVERRIDE;
 
+#ifdef __WXGTK3__
+private:
+    wxHyperlinkCtrlImpl *m_impl;
+#endif
+
     wxDECLARE_DYNAMIC_CLASS(wxHyperlinkCtrl);
 };
 
diff --git a/include/wx/gtk/window.h b/include/wx/gtk/window.h
index 9f912fd..e6eaa2a 100644
--- a/include/wx/gtk/window.h
+++ b/include/wx/gtk/window.h
@@ -14,6 +14,7 @@
 #ifdef __WXGTK3__
     typedef struct _cairo cairo_t;
     typedef struct _GtkStyleProvider GtkStyleProvider;
+    typedef struct _GtkCssProvider GtkCssProvider;
     #define WXUNUSED_IN_GTK2(x) x
     #define WXUNUSED_IN_GTK3(x)
 #else
@@ -438,6 +439,8 @@ protected:
 #ifdef __WXGTK3__
     static GdkWindow* GTKFindWindow(GtkWidget* widget);
     static void GTKFindWindow(GtkWidget* widget, wxArrayGdkWindows& windows);
+
+    void ApplyCssStyle(GtkCssProvider* provider, const char* style);
 #endif
 
 private:
diff --git a/src/gtk/hyperlink.cpp b/src/gtk/hyperlink.cpp
index dd3ad8d..0cbb8ed 100644
--- a/src/gtk/hyperlink.cpp
+++ b/src/gtk/hyperlink.cpp
@@ -32,6 +32,10 @@
 #include <gtk/gtk.h>
 #include "wx/gtk/private.h"
 
+#ifdef __WXGTK3__
+#include "wx/gtk/private/object.h"
+#endif
+
 // ----------------------------------------------------------------------------
 // local functions
 // ----------------------------------------------------------------------------
@@ -84,7 +88,19 @@ static void clicked_hook(GtkLinkButton* button, const char*, void*)
 }
 }
 #endif
-
+#ifdef __WXGTK3__
+class wxHyperlinkCtrlImpl
+{
+public:
+    wxHyperlinkCtrlImpl() :
+        m_link_color_provider(gtk_css_provider_new()),
+        m_visited_link_color_provider(gtk_css_provider_new())
+    {}
+
+    wxGtkObject<GtkCssProvider> m_link_color_provider;
+    wxGtkObject<GtkCssProvider> m_visited_link_color_provider;
+};
+#endif
 // ----------------------------------------------------------------------------
 // wxHyperlinkCtrl
 // ----------------------------------------------------------------------------
@@ -93,6 +109,8 @@ wxHyperlinkCtrl::~wxHyperlinkCtrl()
 {
 #ifndef __WXGTK3__
     gs_hyperlinkctrl_list = g_slist_remove(gs_hyperlinkctrl_list, this);
+#else
+    delete m_impl;
 #endif
 }
 
@@ -145,6 +163,10 @@ bool wxHyperlinkCtrl::Create(wxWindow *parent, wxWindowID id,
         // thus overriding GTK+'s internal signal handlers which set the cursor of
         // the widget - thus we need to manually set it here:
         SetCursor(wxCursor(wxCURSOR_HAND));
+
+#ifdef __WXGTK3__
+        m_impl = new wxHyperlinkCtrlImpl;
+#endif
     }
     else
         return wxGenericHyperlinkCtrl::Create(parent, id, label, url, pos, size, style, name);
@@ -201,6 +223,12 @@ void wxHyperlinkCtrl::SetNormalColour(const wxColour &colour)
 {
     if ( UseNative() )
     {
+#ifdef __WXGTK3__
+        const GdkRGBA *col = colour;
+
+        wxGtkString css(g_strdup_printf("* { link-color: %s; }", gdk_rgba_to_string(col)));
+        ApplyCssStyle(m_impl->m_link_color_provider, css);
+#endif
         // simply do nothing: GTK+ does not allow us to change it :(
     }
     else
@@ -212,6 +240,17 @@ wxColour wxHyperlinkCtrl::GetNormalColour() const
     wxColour ret;
     if ( UseNative() )
     {
+#ifdef __WXGTK3__
+        GdkRGBA *link_color = NULL;
+
+        gtk_widget_style_get(m_widget, "link-color", &link_color, NULL);
+
+        if (link_color)
+        {
+            ret = wxColour(*link_color);
+            gdk_rgba_free (link_color);
+        }
+#else
         GdkColor* link_color;
         GdkColor color = { 0, 0, 0, 0xeeee };
 
@@ -226,6 +265,7 @@ wxColour wxHyperlinkCtrl::GetNormalColour() const
         }
         wxGCC_WARNING_RESTORE()
         ret = wxColour(color);
+#endif
     }
     else
         ret = wxGenericHyperlinkCtrl::GetNormalColour();
@@ -237,6 +277,12 @@ void wxHyperlinkCtrl::SetVisitedColour(const wxColour &colour)
 {
     if ( UseNative() )
     {
+#ifdef __WXGTK3__
+        const GdkRGBA *col = colour;
+
+        wxGtkString css(g_strdup_printf("* { visited-link-color: %s; }", gdk_rgba_to_string(col)));
+        ApplyCssStyle(m_impl->m_visited_link_color_provider, css);
+#endif
         // simply do nothing: GTK+ does not allow us to change it :(
     }
     else
@@ -248,6 +294,18 @@ wxColour wxHyperlinkCtrl::GetVisitedColour() const
     wxColour ret;
     if ( UseNative() )
     {
+
+#ifdef __WXGTK3__
+        GdkRGBA *link_color = NULL;
+
+        gtk_widget_style_get(m_widget, "visited-link-color", &link_color, NULL);
+
+        if (link_color)
+        {
+            ret = wxColour(*link_color);
+            gdk_rgba_free (link_color);
+        }
+#else
         GdkColor* link_color;
         GdkColor color = { 0, 0x5555, 0x1a1a, 0x8b8b };
 
@@ -262,6 +320,8 @@ wxColour wxHyperlinkCtrl::GetVisitedColour() const
         }
         wxGCC_WARNING_RESTORE()
         ret = wxColour(color);
+#endif
+
     }
     else
         ret = base_type::GetVisitedColour();
diff --git a/src/gtk/window.cpp b/src/gtk/window.cpp
index f86dbe2..a6ea874 100644
--- a/src/gtk/window.cpp
+++ b/src/gtk/window.cpp
@@ -5231,3 +5231,19 @@ void wxWindowGTK::DoThaw()
     if (m_wxwindow && m_wxwindow != m_widget)
         GTKThawWidget(m_wxwindow);
 }
+
+#ifdef __WXGTK3__
+void wxWindowGTK::ApplyCssStyle(GtkCssProvider* provider,const char* style)
+{
+    wxCHECK_RET(m_widget, "invalid window");
+    
+    gtk_style_context_remove_provider(gtk_widget_get_style_context(m_widget),
+                                      GTK_STYLE_PROVIDER(provider));
+
+    gtk_css_provider_load_from_data(provider, style, -1, NULL);
+
+    gtk_style_context_add_provider(gtk_widget_get_style_context(m_widget),
+                                   GTK_STYLE_PROVIDER(provider),
+                                   GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
+}
+#endif

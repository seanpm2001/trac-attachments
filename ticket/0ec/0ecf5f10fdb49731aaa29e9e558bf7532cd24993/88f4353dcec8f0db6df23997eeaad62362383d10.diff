diff --git a/src/common/sizer.cpp b/src/common/sizer.cpp
index 64ffc08..872145d 100644
--- a/src/common/sizer.cpp
+++ b/src/common/sizer.cpp
@@ -32,6 +32,7 @@
 #endif // WX_PRECOMP
 
 #include "wx/display.h"
+#include "wx/vector.h"
 #include "wx/listimpl.cpp"
 
 
@@ -1987,25 +1988,73 @@ wxSizerItem *wxBoxSizer::AddSpacer(int size)
     return IsVertical() ? Add(0, size) : Add(size, 0);
 }
 
+namespace
+{
+
+/*
+    Helper of RecalcSizes(): checks if there is enough remaining space for the
+    min size of the given item and returns its min size or the entire remaining
+    space depending on which one is greater.
+
+    This function updates the remaining space parameter to account for the size
+    effectively allocated to the item.
+ */
+int
+GetMinOrRemainingSize(int orient, const wxSizerItem *item, int *remainingSpace_)
+{
+    int& remainingSpace = *remainingSpace_;
+
+    wxCoord size;
+    if ( remainingSpace > 0 )
+    {
+        const wxSize sizeMin = item->GetMinSizeWithBorder();
+        size = orient == wxHORIZONTAL ? sizeMin.x : sizeMin.y;
+
+        if ( size >= remainingSpace )
+        {
+            // truncate the item to fit in the remaining space, this is better
+            // than showing it only partially in general, even if both choices
+            // are bad -- but there is nothing else we can do
+            size = remainingSpace;
+        }
+
+        remainingSpace -= size;
+    }
+    else // no remaining space
+    {
+        // no space at all left, no need to even query the item for its min
+        // size as we can't give it to it anyhow
+        size = 0;
+    }
+
+    return size;
+}
+
+} // anonymous namespace
+
 void wxBoxSizer::RecalcSizes()
 {
     if ( m_children.empty() )
         return;
 
     const wxCoord totalMinorSize = GetSizeInMinorDir(m_size);
+    const wxCoord totalMajorSize = GetSizeInMajorDir(m_size);
 
     // the amount of free space which we should redistribute among the
     // stretchable items (i.e. those with non zero proportion)
-    int delta = GetSizeInMajorDir(m_size) - GetSizeInMajorDir(m_minSize);
+    int delta = totalMajorSize - GetSizeInMajorDir(m_minSize);
 
+    // declare loop variables used below:
+    wxSizerItemList::const_iterator i;  // iterator in m_children list
+    unsigned n = 0;                     // item index in majorSizes array
 
-    // Inform child items about the size in minor direction, that can
-    // change how much free space we have in major dir and how to distribute it.
-    int majorMinSum = 0;
-    wxSizerItemList::const_iterator i ;
-    for ( i = m_children.begin();
-          i != m_children.end();
-          ++i )
+
+    // First, inform item about the available size in minor direction as this
+    // can change their size in the major direction. Also compute the number of
+    // visible items and sum of their min sizes in major direction.
+
+    int minMajorSize = 0;
+    for ( i = m_children.begin(); i != m_children.end(); ++i )
     {
         wxSizerItem * const item = *i;
 
@@ -2022,58 +2071,186 @@ void wxBoxSizer::RecalcSizes()
             // take too much, so delta should not become negative.
             delta -= deltaChange;
         }
-        majorMinSum += GetSizeInMajorDir(item->GetMinSizeWithBorder());
+        minMajorSize += GetSizeInMajorDir(item->GetMinSizeWithBorder());
     }
-    // And update our min size
-    SizeInMajorDir(m_minSize) = majorMinSum;
-
 
-    // might have a new delta now
-    delta = GetSizeInMajorDir(m_size) - GetSizeInMajorDir(m_minSize);
+    // update our min size and delta which may have changed
+    SizeInMajorDir(m_minSize) = minMajorSize;
+    delta = totalMajorSize - minMajorSize;
 
-    // the position at which we put the next child
-    wxPoint pt(m_position);
 
+    // space and sum of proportions for the remaining items, both may change
+    // below
+    wxCoord remaining = totalMajorSize;
     int totalProportion = m_totalProportion;
-    for ( i = m_children.begin();
-          i != m_children.end();
-          ++i )
+
+    // size of the (visible) items in major direction, -1 means "not fixed yet"
+    wxVector<int> majorSizes(GetItemCount(), wxDefaultCoord);
+
+
+    // Check for the degenerated case when we don't have enough space for even
+    // the min sizes of all the items: in this case we really can't do much
+    // more than to to allocate the min size to as many of fixed size items as
+    // possible (on the assumption that variable size items such as text zones
+    // or list boxes may use scrollbars to show their content even if their
+    // size is less than min size but that fixed size items such as buttons
+    // will suffer even more if we don't give them their min size)
+    if ( totalMajorSize < minMajorSize )
     {
-        wxSizerItem * const item = *i;
+        // Second degenerated case pass: allocate min size to all fixed size
+        // items.
+        for ( i = m_children.begin(), n = 0; i != m_children.end(); ++i, ++n )
+        {
+            wxSizerItem * const item = *i;
 
-        if ( !item->IsShown() )
-            continue;
+            if ( !item->IsShown() )
+                continue;
 
-        const wxSize sizeThis(item->GetMinSizeWithBorder());
+            // deal with fixed size items only during this pass
+            if ( item->GetProportion() )
+                continue;
 
-        // adjust the size in the major direction using the proportion
-        wxCoord majorSize = GetSizeInMajorDir(sizeThis);
+            majorSizes[n] = GetMinOrRemainingSize(m_orient, item, &remaining);
+        }
 
-        // if there is not enough space, don't try to distribute negative space
-        // among the children, this would result in overlapping windows which
-        // we don't want
-        if ( delta > 0 )
+
+        // Third degenerated case pass: allocate min size to all the remaining,
+        // i.e. non-fixed size, items.
+        for ( i = m_children.begin(), n = 0; i != m_children.end(); ++i, ++n )
         {
+            wxSizerItem * const item = *i;
+
+            if ( !item->IsShown() )
+                continue;
+
+            // we've already dealt with fixed size items above
+            if ( !item->GetProportion() )
+                continue;
+
+            majorSizes[n] = GetMinOrRemainingSize(m_orient, item, &remaining);
+        }
+    }
+    else // we do have enough space to give at least min sizes to all items
+    {
+        // Second and maybe more passes in the non-degenerated case: deal with
+        // fixed size items and items whose min size is greater than what we
+        // would allocate to them taking their proportion into account. For
+        // both of them, we will just use their min size, but for the latter we
+        // also need to reexamine all the items as the items which fitted
+        // before we adjusted their size upwards might not fit any more. This
+        // does make for a quadratic algorithm but it's not obvious how to
+        // avoid it and hopefully it's not a huge problem in practice as the
+        // sizers don't have many items usually (and, of course, the algorithm
+        // still reduces into a linear one if there is enough space for all the
+        // min sizes).
+        bool nonFixedSpaceChanged = false;
+        for ( i = m_children.begin(), n = 0; ; ++i, ++n )
+        {
+            if ( nonFixedSpaceChanged )
+            {
+                i = m_children.begin();
+                n = 0;
+                nonFixedSpaceChanged = false;
+            }
+
+            // check for the end of the loop only after the check above as
+            // otherwise we wouldn't do another pass if the last child resulted
+            // in non fixed space reduction
+            if ( i == m_children.end() )
+                break;
+
+            wxSizerItem * const item = *i;
+
+            if ( !item->IsShown() )
+                continue;
+
+            // don't check the item which we had already dealt with during a
+            // previous pass (this is more than an optimization, the code
+            // wouldn't work correctly if we kept adjusting for the same item
+            // over and over again)
+            if ( majorSizes[n] != wxDefaultCoord )
+                continue;
+
+            const wxCoord
+                minMajor = GetSizeInMajorDir(item->GetMinSizeWithBorder());
             const int propItem = item->GetProportion();
             if ( propItem )
             {
-                const int deltaItem = (delta * propItem) / totalProportion;
+                // is the desired size of this item big enough?
+                if ( (remaining*propItem)/totalProportion >= minMajor )
+                {
+                    // yes, it is, we'll determine the real size of this
+                    // item later, for now just leave it as wxDefaultCoord
+                    continue;
+                }
 
-                majorSize += deltaItem;
+                // the proportion of this item won't count, it has
+                // effectively become fixed
+                totalProportion -= propItem;
+            }
+
+            // we can already allocate space for this item
+            majorSizes[n] = minMajor;
+
+            // change the amount of the space remaining to the other items,
+            // as this can result in not being able to satisfy their
+            // proportions any more we will need to redo another loop
+            // iteration
+            remaining -= minMajor;
+
+            nonFixedSpaceChanged = true;
+        }
 
-                delta -= deltaItem;
+
+        // Last by one pass: distribute the remaining space among the non-fixed
+        // items whose size weren't fixed yet according to their proportions.
+        for ( i = m_children.begin(), n = 0; i != m_children.end(); ++i, ++n )
+        {
+            wxSizerItem * const item = *i;
+
+            if ( !item->IsShown() )
+                continue;
+
+            if ( majorSizes[n] == wxDefaultCoord )
+            {
+                const int propItem = item->GetProportion();
+                majorSizes[n] = (remaining*propItem)/totalProportion;
+
+                remaining -= majorSizes[n];
                 totalProportion -= propItem;
             }
         }
+    }
+
 
+    // the position at which we put the next child
+    wxPoint pt(m_position);
+
+
+    // Final pass: finally do position the items correctly using their sizes as
+    // determined above.
+    for ( i = m_children.begin(), n = 0; i != m_children.end(); ++i, ++n )
+    {
+        wxSizerItem * const item = *i;
+
+        if ( !item->IsShown() )
+            continue;
+
+        const int majorSize = majorSizes[n];
+
+        const wxSize sizeThis(item->GetMinSizeWithBorder());
 
         // apply the alignment in the minor direction
         wxPoint posChild(pt);
 
         wxCoord minorSize = GetSizeInMinorDir(sizeThis);
         const int flag = item->GetFlag();
-        if ( flag & (wxEXPAND | wxSHAPED) )
+        if ( (flag & (wxEXPAND | wxSHAPED)) || (minorSize > totalMinorSize) )
         {
+            // occupy all the available space if wxEXPAND was given and also if
+            // the item is too big to fit -- in this case we truncate it below
+            // its minimal size which is bad but better than not showing parts
+            // of the window at all
             minorSize = totalMinorSize;
         }
         else if ( flag & (IsVertical() ? wxALIGN_RIGHT : wxALIGN_BOTTOM) )
@@ -2082,7 +2259,8 @@ void wxBoxSizer::RecalcSizes()
         }
         // NB: wxCENTRE is used here only for backwards compatibility,
         //     wxALIGN_CENTRE should be used in new code
-        else if ( flag & (wxCENTER | (IsVertical() ? wxALIGN_CENTRE_HORIZONTAL : wxALIGN_CENTRE_VERTICAL)))
+        else if ( flag & (wxCENTER | (IsVertical() ? wxALIGN_CENTRE_HORIZONTAL
+                                                   : wxALIGN_CENTRE_VERTICAL)) )
         {
             PosInMinorDir(posChild) += (totalMinorSize - minorSize) / 2;
         }
diff --git a/tests/Makefile.in b/tests/Makefile.in
index e951631..21d0ac5 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -156,6 +156,7 @@ TEST_GUI_OBJECTS =  \
 	test_gui_garbage.o \
 	test_gui_settings.o \
 	test_gui_socket.o \
+	test_gui_boxsizer.o \
 	test_gui_clientsize.o \
 	test_gui_setsize.o
 TEST_GUI_ODEP =  $(_____pch_testprec_test_gui_testprec_h_gch___depname)
@@ -634,6 +635,9 @@ test_gui_settings.o: $(srcdir)/misc/settings.cpp $(TEST_GUI_ODEP)
 test_gui_socket.o: $(srcdir)/net/socket.cpp $(TEST_GUI_ODEP)
 	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/net/socket.cpp
 
+test_gui_boxsizer.o: $(srcdir)/sizers/boxsizer.cpp $(TEST_GUI_ODEP)
+	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/sizers/boxsizer.cpp
+
 test_gui_clientsize.o: $(srcdir)/window/clientsize.cpp $(TEST_GUI_ODEP)
 	$(CXXC) -c -o $@ $(TEST_GUI_CXXFLAGS) $(srcdir)/window/clientsize.cpp
 
diff --git a/tests/makefile.bcc b/tests/makefile.bcc
index d1d085a..373f224 100644
--- a/tests/makefile.bcc
+++ b/tests/makefile.bcc
@@ -141,6 +141,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_garbage.obj \
 	$(OBJS)\test_gui_settings.obj \
 	$(OBJS)\test_gui_socket.obj \
+	$(OBJS)\test_gui_boxsizer.obj \
 	$(OBJS)\test_gui_clientsize.obj \
 	$(OBJS)\test_gui_setsize.obj
 
@@ -688,6 +689,9 @@ $(OBJS)\test_gui_settings.obj: .\misc\settings.cpp
 $(OBJS)\test_gui_socket.obj: .\net\socket.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\net\socket.cpp
 
+$(OBJS)\test_gui_boxsizer.obj: .\sizers\boxsizer.cpp
+	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\sizers\boxsizer.cpp
+
 $(OBJS)\test_gui_clientsize.obj: .\window\clientsize.cpp
 	$(CXX) -q -c -P -o$@ $(TEST_GUI_CXXFLAGS) .\window\clientsize.cpp
 
diff --git a/tests/makefile.gcc b/tests/makefile.gcc
index 53fffc1..1595d84 100644
--- a/tests/makefile.gcc
+++ b/tests/makefile.gcc
@@ -135,6 +135,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_garbage.o \
 	$(OBJS)\test_gui_settings.o \
 	$(OBJS)\test_gui_socket.o \
+	$(OBJS)\test_gui_boxsizer.o \
 	$(OBJS)\test_gui_clientsize.o \
 	$(OBJS)\test_gui_setsize.o
 
@@ -670,6 +671,9 @@ $(OBJS)\test_gui_settings.o: ./misc/settings.cpp
 $(OBJS)\test_gui_socket.o: ./net/socket.cpp
 	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
 
+$(OBJS)\test_gui_boxsizer.o: ./sizers/boxsizer.cpp
+	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
+
 $(OBJS)\test_gui_clientsize.o: ./window/clientsize.cpp
 	$(CXX) -c -o $@ $(TEST_GUI_CXXFLAGS) $(CPPDEPS) $<
 
diff --git a/tests/makefile.vc b/tests/makefile.vc
index 87a97c3..04e39ba 100644
--- a/tests/makefile.vc
+++ b/tests/makefile.vc
@@ -136,6 +136,7 @@ TEST_GUI_OBJECTS =  \
 	$(OBJS)\test_gui_garbage.obj \
 	$(OBJS)\test_gui_settings.obj \
 	$(OBJS)\test_gui_socket.obj \
+	$(OBJS)\test_gui_boxsizer.obj \
 	$(OBJS)\test_gui_clientsize.obj \
 	$(OBJS)\test_gui_setsize.obj
 TEST_GUI_RESOURCES =  \
@@ -814,6 +815,9 @@ $(OBJS)\test_gui_settings.obj: .\misc\settings.cpp
 $(OBJS)\test_gui_socket.obj: .\net\socket.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\net\socket.cpp
 
+$(OBJS)\test_gui_boxsizer.obj: .\sizers\boxsizer.cpp
+	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\sizers\boxsizer.cpp
+
 $(OBJS)\test_gui_clientsize.obj: .\window\clientsize.cpp
 	$(CXX) /c /nologo /TP /Fo$@ $(TEST_GUI_CXXFLAGS) .\window\clientsize.cpp
 
diff --git a/tests/makefile.wat b/tests/makefile.wat
index f43ac68..f6da082 100644
--- a/tests/makefile.wat
+++ b/tests/makefile.wat
@@ -379,6 +379,7 @@ TEST_GUI_OBJECTS =  &
 	$(OBJS)\test_gui_garbage.obj &
 	$(OBJS)\test_gui_settings.obj &
 	$(OBJS)\test_gui_socket.obj &
+	$(OBJS)\test_gui_boxsizer.obj &
 	$(OBJS)\test_gui_clientsize.obj &
 	$(OBJS)\test_gui_setsize.obj
 
@@ -725,6 +726,9 @@ $(OBJS)\test_gui_settings.obj :  .AUTODEPEND .\misc\settings.cpp
 $(OBJS)\test_gui_socket.obj :  .AUTODEPEND .\net\socket.cpp
 	$(CXX) -bt=nt -zq -fo=$^@ $(TEST_GUI_CXXFLAGS) $<
 
+$(OBJS)\test_gui_boxsizer.obj :  .AUTODEPEND .\sizers\boxsizer.cpp
+	$(CXX) -bt=nt -zq -fo=$^@ $(TEST_GUI_CXXFLAGS) $<
+
 $(OBJS)\test_gui_clientsize.obj :  .AUTODEPEND .\window\clientsize.cpp
 	$(CXX) -bt=nt -zq -fo=$^@ $(TEST_GUI_CXXFLAGS) $<
 
diff --git a/tests/sizers/boxsizer.cpp b/tests/sizers/boxsizer.cpp
new file mode 100644
index 0000000..d3466f8
--- /dev/null
+++ b/tests/sizers/boxsizer.cpp
@@ -0,0 +1,250 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/sizers/boxsizer.cpp
+// Purpose:     Unit tests for wxBoxSizer
+// Author:      Vadim Zeitlin
+// Created:     2010-03-06
+// RCS-ID:      $Id$
+// Copyright:   (c) 2010 Vadim Zeitlin <vadim@wxwidgets.org>
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/sizer.h"
+#endif // WX_PRECOMP
+
+inline std::ostream& operator<<(std::ostream& o, const wxSize& s)
+{
+    return o << s.x << 'x' << s.y;
+}
+
+// ----------------------------------------------------------------------------
+// test class
+// ----------------------------------------------------------------------------
+
+class BoxSizerTestCase : public CppUnit::TestCase
+{
+public:
+    BoxSizerTestCase() { }
+
+    virtual void setUp();
+    virtual void tearDown();
+
+private:
+    CPPUNIT_TEST_SUITE( BoxSizerTestCase );
+        CPPUNIT_TEST( Size1 );
+        CPPUNIT_TEST( Size3 );
+    CPPUNIT_TEST_SUITE_END();
+
+    void Size1();
+    void Size3();
+
+    wxWindow *m_win;
+    wxSizer *m_sizer;
+
+    DECLARE_NO_COPY_CLASS(BoxSizerTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( BoxSizerTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( BoxSizerTestCase, "BoxSizerTestCase" );
+
+// ----------------------------------------------------------------------------
+// test initialization
+// ----------------------------------------------------------------------------
+
+void BoxSizerTestCase::setUp()
+{
+    m_win = new wxWindow(wxTheApp->GetTopWindow(), wxID_ANY);
+    m_win->SetClientSize(127, 35);
+
+    m_sizer = new wxBoxSizer(wxHORIZONTAL);
+    m_win->SetSizer(m_sizer);
+}
+
+void BoxSizerTestCase::tearDown()
+{
+    delete m_win;
+    m_win = NULL;
+
+    m_sizer = NULL;
+}
+
+// ----------------------------------------------------------------------------
+// tests themselves
+// ----------------------------------------------------------------------------
+
+void BoxSizerTestCase::Size1()
+{
+    const wxSize sizeTotal = m_win->GetClientSize();
+    const wxSize sizeChild = sizeTotal / 2;
+
+    wxWindow * const
+        child = new wxWindow(m_win, wxID_ANY, wxDefaultPosition, sizeChild);
+    m_sizer->Add(child);
+    m_win->Layout();
+    CPPUNIT_ASSERT_EQUAL( sizeChild, child->GetSize() );
+;
+    m_sizer->Clear();
+    m_sizer->Add(child, wxSizerFlags(1));
+    m_win->Layout();
+    CPPUNIT_ASSERT_EQUAL( wxSize(sizeTotal.x, sizeChild.y), child->GetSize() );
+
+    m_sizer->Clear();
+    m_sizer->Add(child, wxSizerFlags(1).Expand());
+    m_win->Layout();
+    CPPUNIT_ASSERT_EQUAL( sizeTotal, child->GetSize() );
+
+    m_sizer->Clear();
+    m_sizer->Add(child, wxSizerFlags());
+    m_sizer->SetItemMinSize(child, sizeTotal*2);
+    m_win->Layout();
+    CPPUNIT_ASSERT_EQUAL( sizeTotal, child->GetSize() );
+
+    m_sizer->Clear();
+    m_sizer->Add(child, wxSizerFlags().Expand());
+    m_sizer->SetItemMinSize(child, sizeTotal*2);
+    m_win->Layout();
+    CPPUNIT_ASSERT_EQUAL( sizeTotal, child->GetSize() );
+}
+
+void BoxSizerTestCase::Size3()
+{
+    // check that various combinations of minimal sizes and proportions work as
+    // expected for different window sizes
+    static const struct LayoutTestData
+    {
+        // proportions of the elements
+        int prop[3];
+
+        // minimal sizes of the elements in the sizer direction
+        int minsize[3];
+
+        // total size and the expected sizes of the elements
+        int x,
+            sizes[3];
+
+        // if true, don't try the permutations of our test data
+        bool dontPermute;
+
+
+        // Add the given window to the sizer with the corresponding parameters
+        void AddToSizer(wxSizer *sizer, wxWindow *win, int n) const
+        {
+            sizer->Add(win, wxSizerFlags(prop[n]));
+            sizer->SetItemMinSize(win, wxSize(minsize[n], -1));
+        }
+
+    } layoutTestData[] =
+    {
+        // some really simple cases (no need to permute those, they're
+        // symmetrical anyhow)
+        { { 1, 1, 1, }, {  50,  50,  50, }, 150, {  50,  50,  50, }, true },
+        { { 2, 2, 2, }, {  50,  50,  50, }, 600, { 200, 200, 200, }, true },
+
+        // items with different proportions and min sizes when there is enough
+        // space to lay them out
+        { { 1, 2, 3, }, {   0,   0,   0, }, 600, { 100, 200, 300, } },
+        { { 1, 2, 3, }, { 100, 100, 100, }, 600, { 100, 200, 300, } },
+        { { 1, 2, 3, }, { 100,  50,  50, }, 600, { 100, 200, 300, } },
+        { { 0, 1, 1, }, { 200, 100, 100, }, 600, { 200, 200, 200, } },
+        { { 0, 1, 2, }, { 300, 100, 100, }, 600, { 300, 100, 200, } },
+        { { 0, 1, 1, }, { 100,  50,  50, }, 300, { 100, 100, 100, } },
+        { { 0, 1, 2, }, { 100,  50,  50, }, 400, { 100, 100, 200, } },
+
+        // cases when there is not enough space to lay out the items correctly
+        // while still respecting their min sizes
+        { { 0, 1, 1, }, { 100, 150,  50, }, 300, { 100, 150,  50, } },
+        { { 1, 2, 3, }, { 100, 100, 100, }, 300, { 100, 100, 100, } },
+        { { 1, 2, 3, }, { 100,  50,  50, }, 300, { 100,  80, 120, } },
+        { { 1, 2, 3, }, { 100,  10,  10, }, 150, { 100,  20,  30, } },
+
+        // cases when there is not enough space even for the min sizes (don't
+        // permute in these cases as the layout does depend on the item order
+        // because the first ones have priority)
+        { { 1, 2, 3, }, { 100,  50,  50, }, 150, { 100,  50,   0, }, true },
+        { { 1, 2, 3, }, { 100, 100, 100, }, 200, { 100, 100,   0, }, true },
+        { { 1, 2, 3, }, { 100, 100, 100, }, 150, { 100,  50,   0, }, true },
+        { { 1, 2, 3, }, { 100, 100, 100, },  50, {  50,   0,   0, }, true },
+        { { 1, 2, 3, }, { 100, 100, 100, },   0, {   0,   0,   0, }, true },
+    };
+
+    wxWindow *child[3];
+    child[0] = new wxWindow(m_win, wxID_ANY);
+    child[1] = new wxWindow(m_win, wxID_ANY);
+    child[2] = new wxWindow(m_win, wxID_ANY);
+
+    int j;
+    for ( unsigned i = 0; i < WXSIZEOF(layoutTestData); i++ )
+    {
+        LayoutTestData ltd = layoutTestData[i];
+
+        // the results shouldn't depend on the order of items except in the
+        // case when there is not enough space for even the fixed width items
+        // (in which case the first ones might get enough of it but not the
+        // last ones) so test a couple of permutations of test data unless
+        // specifically disabled for this test case
+        for ( unsigned p = 0; p < 3; p++)
+        {
+            switch ( p )
+            {
+                case 0:
+                    // nothing to do, use original data
+                    break;
+
+                case 1:
+                    // exchange first and last elements
+                    wxSwap(ltd.prop[0], ltd.prop[2]);
+                    wxSwap(ltd.minsize[0], ltd.minsize[2]);
+                    wxSwap(ltd.sizes[0], ltd.sizes[2]);
+                    break;
+
+                case 2:
+                    // exchange the original third and second elements
+                    wxSwap(ltd.prop[0], ltd.prop[1]);
+                    wxSwap(ltd.minsize[0], ltd.minsize[1]);
+                    wxSwap(ltd.sizes[0], ltd.sizes[1]);
+                    break;
+            }
+
+            m_sizer->Clear();
+            for ( j = 0; j < WXSIZEOF(child); j++ )
+                ltd.AddToSizer(m_sizer, child[j], j);
+
+            m_win->SetClientSize(ltd.x, -1);
+            m_win->Layout();
+
+            for ( j = 0; j < WXSIZEOF(child); j++ )
+            {
+                WX_ASSERT_EQUAL_MESSAGE
+                (
+                    (
+                        "test %lu, permutation #%d: wrong size for child #%d "
+                        "for total size %d",
+                        static_cast<unsigned long>(i),
+                        static_cast<unsigned long>(p),
+                        j,
+                        ltd.x
+                    ),
+                    ltd.sizes[j], child[j]->GetSize().x
+                );
+            }
+
+            // don't try other permutations if explicitly disabled
+            if ( ltd.dontPermute )
+                break;
+        }
+    }
+}
+
diff --git a/tests/test.bkl b/tests/test.bkl
index 77bc562..edb0c7e 100644
--- a/tests/test.bkl
+++ b/tests/test.bkl
@@ -142,6 +142,7 @@
                 applications.
              -->
             net/socket.cpp
+            sizers/boxsizer.cpp
             window/clientsize.cpp
             window/setsize.cpp
         </sources>
diff --git a/tests/test_test_gui.dsp b/tests/test_test_gui.dsp
index 5512178..bb0d682 100644
--- a/tests/test_test_gui.dsp
+++ b/tests/test_test_gui.dsp
@@ -235,6 +235,10 @@ LINK32=link.exe
 # PROP Default_Filter ""
 # Begin Source File
 
+SOURCE=.\sizers\boxsizer.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\window\clientsize.cpp
 # End Source File
 # Begin Source File
diff --git a/tests/test_vc7_test_gui.vcproj b/tests/test_vc7_test_gui.vcproj
index 6b0092f..ae44f24 100644
--- a/tests/test_vc7_test_gui.vcproj
+++ b/tests/test_vc7_test_gui.vcproj
@@ -566,6 +566,9 @@
 			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
 			<File
+				RelativePath=".\sizers\boxsizer.cpp">
+			</File>
+			<File
 				RelativePath=".\window\clientsize.cpp">
 			</File>
 			<File
diff --git a/tests/test_vc8_test_gui.vcproj b/tests/test_vc8_test_gui.vcproj
index ecf5fdf..54314be 100644
--- a/tests/test_vc8_test_gui.vcproj
+++ b/tests/test_vc8_test_gui.vcproj
@@ -828,6 +828,10 @@
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
 			>
 			<File
+				RelativePath=".\sizers\boxsizer.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\window\clientsize.cpp"
 				>
 			</File>
diff --git a/tests/test_vc9_test_gui.vcproj b/tests/test_vc9_test_gui.vcproj
index 941eb99..761934f 100644
--- a/tests/test_vc9_test_gui.vcproj
+++ b/tests/test_vc9_test_gui.vcproj
@@ -1,16 +1,10 @@
 <?xml version="1.0" encoding="Windows-1252"?>
-<!--
-
-  This project was generated by
-  Bakefile 0.2.8 (http://www.bakefile.org)
-  Do not modify, all changes will be overwritten!
-
--->
 <VisualStudioProject
 	ProjectType="Visual C++"
 	Version="9.00"
 	Name="test_gui"
 	ProjectGUID="{9BB295D9-A6AA-510D-AA0D-9375B5D91025}"
+	TargetFrameworkVersion="0"
 	>
 	<Platforms>
 		<Platform
@@ -18,7 +12,6 @@
 		/>
 	</Platforms>
 	<ToolFiles>
-		
 	</ToolFiles>
 	<Configurations>
 		<Configuration
@@ -104,8 +97,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswud\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswud\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -185,9 +178,9 @@
 				GenerateDebugInformation="true"
 				ProgramDatabaseFile="vc_mswu\test_gui.pdb"
 				SubSystem="1"
-				TargetMachine="1"
 				OptimizeReferences="2"
 				EnableCOMDATFolding="2"
+				TargetMachine="1"
 			/>
 			<Tool
 				Name="VCALinkTool"
@@ -200,8 +193,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswu\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswu\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -296,8 +289,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswunivud\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswunivud\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -377,9 +370,9 @@
 				GenerateDebugInformation="true"
 				ProgramDatabaseFile="vc_mswunivu\test_gui.pdb"
 				SubSystem="1"
-				TargetMachine="1"
 				OptimizeReferences="2"
 				EnableCOMDATFolding="2"
+				TargetMachine="1"
 			/>
 			<Tool
 				Name="VCALinkTool"
@@ -392,8 +385,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswunivu\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswunivu\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -488,8 +481,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswuddll\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswuddll\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -569,9 +562,9 @@
 				GenerateDebugInformation="true"
 				ProgramDatabaseFile="vc_mswudll\test_gui.pdb"
 				SubSystem="1"
-				TargetMachine="1"
 				OptimizeReferences="2"
 				EnableCOMDATFolding="2"
+				TargetMachine="1"
 			/>
 			<Tool
 				Name="VCALinkTool"
@@ -584,8 +577,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswudll\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswudll\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -680,8 +673,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswunivuddll\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswunivuddll\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -761,9 +754,9 @@
 				GenerateDebugInformation="true"
 				ProgramDatabaseFile="vc_mswunivudll\test_gui.pdb"
 				SubSystem="1"
-				TargetMachine="1"
 				OptimizeReferences="2"
 				EnableCOMDATFolding="2"
+				TargetMachine="1"
 			/>
 			<Tool
 				Name="VCALinkTool"
@@ -776,8 +769,8 @@
 			/>
 			<Tool
 				Name="VCBscMakeTool"
-				OutputFile="vc_mswunivudll\test_vc9_test_gui.bsc"
 				SuppressStartupBanner="true"
+				OutputFile="vc_mswunivudll\test_vc9_test_gui.bsc"
 			/>
 			<Tool
 				Name="VCFxCopTool"
@@ -791,7 +784,6 @@
 		</Configuration>
 	</Configurations>
 	<References>
-		
 	</References>
 	<Files>
 		<Filter
@@ -800,24 +792,68 @@
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
 			>
 			<File
+				RelativePath=".\sizers\boxsizer.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\window\clientsize.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\events\clone.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\graphics\colour.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\controls\comboboxtest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\config\config.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\dummy.cpp"
@@ -894,70 +930,206 @@
 			<File
 				RelativePath=".\font\fonttest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\misc\garbage.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\misc\guifuncs.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\controls\headerctrltest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\html\htmlwindow.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\image\image.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\controls\listctrltest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\graphics\measuring.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\geometry\point.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\events\propagation.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\image\rawbmp.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\geometry\rect.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\misc\selstoretest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\window\setsize.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\misc\settings.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\geometry\size.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\net\socket.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\test.cpp"
@@ -966,14 +1138,38 @@
 			<File
 				RelativePath=".\controls\textctrltest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\controls\textentrytest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 			<File
 				RelativePath=".\controls\treectrltest.cpp"
 				>
+				<FileConfiguration
+					Name="Debug|Win32"
+					ExcludedFromBuild="true"
+					>
+					<Tool
+						Name="VCCLCompilerTool"
+					/>
+				</FileConfiguration>
 			</File>
 		</Filter>
 		<Filter
@@ -988,7 +1184,5 @@
 		</Filter>
 	</Files>
 	<Globals>
-		
 	</Globals>
 </VisualStudioProject>
-

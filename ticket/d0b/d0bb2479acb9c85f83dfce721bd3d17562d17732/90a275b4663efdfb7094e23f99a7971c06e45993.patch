--- wxBase-2.6.0.orig/Makefile.in	2005-04-20 19:45:27.000000000 +0200
+++ wxBase-2.6.0/Makefile.in	2005-05-25 12:10:36.384327710 +0200
@@ -327,6 +327,7 @@
 	wx/protocol/file.h \
 	wx/protocol/ftp.h \
 	wx/protocol/http.h \
+	wx/protocol/tftp.h \
 	wx/protocol/protocol.h \
 	wx/sckaddr.h \
 	wx/sckipc.h \
@@ -450,6 +451,7 @@
 	src/common/fs_inet.cpp \
 	src/common/ftp.cpp \
 	src/common/http.cpp \
+	src/common/tftp.cpp \
 	src/common/protocol.cpp \
 	src/common/sckaddr.cpp \
 	src/common/sckfile.cpp \
@@ -542,6 +544,7 @@
 	monodll_fs_inet.o \
 	monodll_ftp.o \
 	monodll_http.o \
+	monodll_tftp.o \
 	monodll_protocol.o \
 	monodll_sckaddr.o \
 	monodll_sckfile.o \
@@ -631,6 +634,7 @@
 	monolib_fs_inet.o \
 	monolib_ftp.o \
 	monolib_http.o \
+	monolib_tftp.o \
 	monolib_protocol.o \
 	monolib_sckaddr.o \
 	monolib_sckfile.o \
@@ -804,6 +808,7 @@
 	netdll_fs_inet.o \
 	netdll_ftp.o \
 	netdll_http.o \
+	netdll_tftp.o \
 	netdll_protocol.o \
 	netdll_sckaddr.o \
 	netdll_sckfile.o \
@@ -822,6 +827,7 @@
 	netlib_fs_inet.o \
 	netlib_ftp.o \
 	netlib_http.o \
+	netlib_tftp.o \
 	netlib_protocol.o \
 	netlib_sckaddr.o \
 	netlib_sckfile.o \
@@ -10343,6 +10349,9 @@
 monodll_http.o: $(srcdir)/src/common/http.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/http.cpp
 
+monodll_tftp.o: $(srcdir)/src/common/tftp.cpp $(MONODLL_ODEP)
+	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/tftp.cpp
+
 monodll_protocol.o: $(srcdir)/src/common/protocol.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/common/protocol.cpp
 
@@ -13784,6 +13793,9 @@
 monolib_http.o: $(srcdir)/src/common/http.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/http.cpp
 
+monolib_tftp.o: $(srcdir)/src/common/tftp.cpp $(MONOLIB_ODEP)
+	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/tftp.cpp
+
 monolib_protocol.o: $(srcdir)/src/common/protocol.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/common/protocol.cpp
 
@@ -18080,6 +18092,9 @@
 netdll_http.o: $(srcdir)/src/common/http.cpp $(NETDLL_ODEP)
 	$(CXXC) -c -o $@ $(NETDLL_CXXFLAGS) $(srcdir)/src/common/http.cpp
 
+netdll_tftp.o: $(srcdir)/src/common/tftp.cpp $(NETDLL_ODEP)
+	$(CXXC) -c -o $@ $(NETDLL_CXXFLAGS) $(srcdir)/src/common/tftp.cpp
+
 netdll_protocol.o: $(srcdir)/src/common/protocol.cpp $(NETDLL_ODEP)
 	$(CXXC) -c -o $@ $(NETDLL_CXXFLAGS) $(srcdir)/src/common/protocol.cpp
 
@@ -18131,6 +18146,9 @@
 netlib_http.o: $(srcdir)/src/common/http.cpp $(NETLIB_ODEP)
 	$(CXXC) -c -o $@ $(NETLIB_CXXFLAGS) $(srcdir)/src/common/http.cpp
 
+netlib_tftp.o: $(srcdir)/src/common/tftp.cpp $(NETLIB_ODEP)
+	$(CXXC) -c -o $@ $(NETLIB_CXXFLAGS) $(srcdir)/src/common/tftp.cpp
+
 netlib_protocol.o: $(srcdir)/src/common/protocol.cpp $(NETLIB_ODEP)
 	$(CXXC) -c -o $@ $(NETLIB_CXXFLAGS) $(srcdir)/src/common/protocol.cpp
 
--- wxBase-2.6.0.orig/configure	2005-04-20 19:45:32.000000000 +0200
+++ wxBase-2.6.0/configure	2005-05-25 11:57:44.983273999 +0200
@@ -897,6 +897,7 @@
   --enable-protocols      use wxProtocol and derived classes
   --enable-ftp            use wxFTP (requires wxProtocol
   --enable-http           use wxHTTP (requires wxProtocol
+  --enable-tftp           use wxTFTP (requires wxProtocol
   --enable-fileproto      use wxFileProto class (requires wxProtocol
   --enable-sockets        use socket/network classes
   --enable-ole            use OLE classes (Win32 only)
@@ -942,6 +943,7 @@
   --enable-url            use wxURL class
   --enable-protocol       use wxProtocol class
   --enable-protocol-http  HTTP support in wxProtocol
+  --enable-protocol-tftp  TFTP support in wxProtocol
   --enable-protocol-ftp   FTP support in wxProtocol
   --enable-protocol-file  FILE support in wxProtocol
   --enable-threads        use threads
@@ -2137,6 +2139,7 @@
   DEFAULT_wxUSE_SYSTEM_OPTIONS=no
   DEFAULT_wxUSE_PROTOCOL=no
   DEFAULT_wxUSE_PROTOCOL_HTTP=no
+  DEFAULT_wxUSE_PROTOCOL_TFTP=no
   DEFAULT_wxUSE_PROTOCOL_FTP=no
   DEFAULT_wxUSE_PROTOCOL_FILE=no
   DEFAULT_wxUSE_URL=no
@@ -2334,6 +2337,7 @@
   DEFAULT_wxUSE_SYSTEM_OPTIONS=yes
   DEFAULT_wxUSE_PROTOCOL=yes
   DEFAULT_wxUSE_PROTOCOL_HTTP=yes
+  DEFAULT_wxUSE_PROTOCOL_TFTP=yes
   DEFAULT_wxUSE_PROTOCOL_FTP=yes
   DEFAULT_wxUSE_PROTOCOL_FILE=yes
   DEFAULT_wxUSE_URL=yes
@@ -4410,6 +4414,47 @@
 
 
 	  enablestring=
+          echo "$as_me:$LINENO: checking for --${enablestring:-enable}-tftp" >&5
+echo $ECHO_N "checking for --${enablestring:-enable}-tftp... $ECHO_C" >&6
+          no_cache=0
+          # Check whether --enable-tftp or --disable-tftp was given.
+if test "${enable_tftp+set}" = set; then
+  enableval="$enable_tftp"
+
+                          if test "$enableval" = yes; then
+                            ac_cv_use_tftp='wxUSE_PROTOCOL_TFTP=yes'
+                          else
+                            ac_cv_use_tftp='wxUSE_PROTOCOL_TFTP=no'
+                          fi
+
+else
+
+                          LINE=`grep "wxUSE_PROTOCOL_TFTP" ${wx_arg_cache_file}`
+                          if test "x$LINE" != x ; then
+                            eval "DEFAULT_$LINE"
+                          else
+                            no_cache=1
+                          fi
+
+                          ac_cv_use_tftp='wxUSE_PROTOCOL_TFTP='$DEFAULT_wxUSE_PROTOCOL_TFTP
+
+fi;
+
+          eval "$ac_cv_use_tftp"
+          if test "$no_cache" != 1; then
+            echo $ac_cv_use_tftp >> ${wx_arg_cache_file}.tmp
+          fi
+
+          if test "$wxUSE_PROTOCOL_TFTP" = yes; then
+            echo "$as_me:$LINENO: result: yes" >&5
+echo "${ECHO_T}yes" >&6
+          else
+            echo "$as_me:$LINENO: result: no" >&5
+echo "${ECHO_T}no" >&6
+          fi
+
+
+	  enablestring=
           echo "$as_me:$LINENO: checking for --${enablestring:-enable}-fileproto" >&5
 echo $ECHO_N "checking for --${enablestring:-enable}-fileproto... $ECHO_C" >&6
           no_cache=0
@@ -6258,6 +6303,47 @@
 
 
 	  enablestring=
+          echo "$as_me:$LINENO: checking for --${enablestring:-enable}-protocol_tftp" >&5
+echo $ECHO_N "checking for --${enablestring:-enable}-protocol_tftp... $ECHO_C" >&6
+          no_cache=0
+          # Check whether --enable-protocol_tftp or --disable-protocol_tftp was given.
+if test "${enable_protocol_tftp+set}" = set; then
+  enableval="$enable_protocol_tftp"
+
+                          if test "$enableval" = yes; then
+                            ac_cv_use_protocol_tftp='wxUSE_PROTOCOL_TFTP=yes'
+                          else
+                            ac_cv_use_protocol_tftp='wxUSE_PROTOCOL_TFTP=no'
+                          fi
+
+else
+
+                          LINE=`grep "wxUSE_PROTOCOL_TFTP" ${wx_arg_cache_file}`
+                          if test "x$LINE" != x ; then
+                            eval "DEFAULT_$LINE"
+                          else
+                            no_cache=1
+                          fi
+
+                          ac_cv_use_protocol_tftp='wxUSE_PROTOCOL_TFTP='$DEFAULT_wxUSE_PROTOCOL_TFTP
+
+fi;
+
+          eval "$ac_cv_use_protocol_tftp"
+          if test "$no_cache" != 1; then
+            echo $ac_cv_use_protocol_tftp >> ${wx_arg_cache_file}.tmp
+          fi
+
+          if test "$wxUSE_PROTOCOL_TFTP" = yes; then
+            echo "$as_me:$LINENO: result: yes" >&5
+echo "${ECHO_T}yes" >&6
+          else
+            echo "$as_me:$LINENO: result: no" >&5
+echo "${ECHO_T}no" >&6
+          fi
+
+
+	  enablestring=
           echo "$as_me:$LINENO: checking for --${enablestring:-enable}-protocol_ftp" >&5
 echo $ECHO_N "checking for --${enablestring:-enable}-protocol_ftp... $ECHO_C" >&6
           no_cache=0
@@ -38123,6 +38209,12 @@
 _ACEOF
 
     fi
+    if test "$wxUSE_PROTOCOL_TFTP" = "yes"; then
+        cat >>confdefs.h <<\_ACEOF
+#define wxUSE_PROTOCOL_TFTP 1
+_ACEOF
+
+    fi
     if test "$wxUSE_PROTOCOL_FTP" = "yes"; then
         cat >>confdefs.h <<\_ACEOF
 #define wxUSE_PROTOCOL_FTP 1
--- wxBase-2.6.0.orig/configure.in	2005-04-20 19:45:32.000000000 +0200
+++ wxBase-2.6.0/configure.in	2005-05-25 11:55:34.163069425 +0200
@@ -482,6 +482,7 @@
   DEFAULT_wxUSE_SYSTEM_OPTIONS=no
   DEFAULT_wxUSE_PROTOCOL=no
   DEFAULT_wxUSE_PROTOCOL_HTTP=no
+  DEFAULT_wxUSE_PROTOCOL_TFTP=no
   DEFAULT_wxUSE_PROTOCOL_FTP=no
   DEFAULT_wxUSE_PROTOCOL_FILE=no
   DEFAULT_wxUSE_URL=no
@@ -679,6 +680,7 @@
   DEFAULT_wxUSE_SYSTEM_OPTIONS=yes
   DEFAULT_wxUSE_PROTOCOL=yes
   DEFAULT_wxUSE_PROTOCOL_HTTP=yes
+  DEFAULT_wxUSE_PROTOCOL_TFTP=yes
   DEFAULT_wxUSE_PROTOCOL_FTP=yes
   DEFAULT_wxUSE_PROTOCOL_FILE=yes
   DEFAULT_wxUSE_URL=yes
@@ -898,6 +900,7 @@
 WX_ARG_ENABLE(protocols,     [  --enable-protocols      use wxProtocol and derived classes], wxUSE_PROTOCOL)
 WX_ARG_ENABLE(ftp,           [  --enable-ftp            use wxFTP (requires wxProtocol], wxUSE_PROTOCOL_FTP)
 WX_ARG_ENABLE(http,          [  --enable-http           use wxHTTP (requires wxProtocol], wxUSE_PROTOCOL_HTTP)
+WX_ARG_ENABLE(tftp,          [  --enable-tftp           use wxTFTP (requires wxProtocol], wxUSE_PROTOCOL_TFTP)
 WX_ARG_ENABLE(fileproto,     [  --enable-fileproto      use wxFileProto class (requires wxProtocol], wxUSE_PROTOCOL_FILE)
 WX_ARG_ENABLE(sockets,       [  --enable-sockets        use socket/network classes], wxUSE_SOCKETS)
 WX_ARG_ENABLE(ole,           [  --enable-ole            use OLE classes (Win32 only)], wxUSE_OLE)
@@ -947,6 +950,7 @@
 WX_ARG_ENABLE(url,           [  --enable-url            use wxURL class], wxUSE_URL)
 WX_ARG_ENABLE(protocol,      [  --enable-protocol       use wxProtocol class], wxUSE_PROTOCOL)
 WX_ARG_ENABLE(protocol_http, [  --enable-protocol-http  HTTP support in wxProtocol], wxUSE_PROTOCOL_HTTP)
+WX_ARG_ENABLE(protocol_tftp, [  --enable-protocol-tftp  TFTP support in wxProtocol], wxUSE_PROTOCOL_TFTP)
 WX_ARG_ENABLE(protocol_ftp,  [  --enable-protocol-ftp   FTP support in wxProtocol], wxUSE_PROTOCOL_FTP)
 WX_ARG_ENABLE(protocol_file, [  --enable-protocol-file  FILE support in wxProtocol], wxUSE_PROTOCOL_FILE)
 
@@ -5372,6 +5376,9 @@
     if test "$wxUSE_PROTOCOL_HTTP" = "yes"; then
         AC_DEFINE(wxUSE_PROTOCOL_HTTP)
     fi
+    if test "$wxUSE_PROTOCOL_TFTP" = "yes"; then
+        AC_DEFINE(wxUSE_PROTOCOL_TFTP)
+    fi
     if test "$wxUSE_PROTOCOL_FTP" = "yes"; then
         AC_DEFINE(wxUSE_PROTOCOL_FTP)
     fi
--- wxBase-2.6.0.orig/include/wx/protocol/tftp.h	1970-01-01 01:00:00.000000000 +0100
+++ wxBase-2.6.0/include/wx/protocol/tftp.h	2005-04-15 16:56:15.906780856 +0200
@@ -0,0 +1,129 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tftp.h
+// Purpose:     TFTP protocol
+// Author:      Sjoerd Langkemper
+// Modified by:
+// Created:     March 2005
+// RCS-ID:      
+// Copyright:   (c) 2005  Sjoerd Langkemper
+// Licence:     This code comes with NO WARRANTY
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __WX_TFTP_H__
+#define __WX_TFTP_H__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "tftp.h"
+#endif
+
+#include "wx/defs.h"
+
+#if wxUSE_PROTOCOL_TFTP
+
+#include "wx/protocol/protocol.h"
+
+
+class WXDLLIMPEXP_NET wxTFTP : public wxProtocol
+{
+
+public:
+	enum wxTFTPMode
+	{
+		wxTFTP_OCTET,
+		wxTFTP_NETASCII
+	};
+
+	enum wxTFTPOpcode
+	{
+		wxTFTP_INVALID=0,
+		wxTFTP_RRQ,
+		wxTFTP_WRQ,
+		wxTFTP_DATA,
+		wxTFTP_ACK,
+		wxTFTP_ERROR,
+		wxTFTP_OACK
+	};
+
+	enum wxTFTPError
+	{
+		wxTFTP_ERR_NOERROR=-1,
+		wxTFTP_ERR_NOTDEFINED=0,
+		wxTFTP_ERR_NOTFOUND,
+		wxTFTP_ERR_ACCESSVIOLATION,
+		wxTFTP_ERR_DISKFULL,
+		wxTFTP_ERR_ILLEGAL,
+		wxTFTP_ERR_UNKNOWNID,
+		wxTFTP_ERR_FILEEXISTS,
+		wxTFTP_ERR_NOUSER,
+		wxTFTP_ERR_OPTIONS,
+		wxTFTP_ERR_NOSERVER
+	};
+
+	wxTFTP();
+	wxTFTP(wxDatagramSocket * sock);
+	virtual ~wxTFTP();
+
+	bool GetFile(wxIPV4address server, wxString & filename);
+	bool PutFile(wxIPV4address server, wxString & filename);
+	void SetMode(wxTFTPMode type);
+	wxTFTPMode GetMode();
+	void SetTimeout(int timeout);
+	int GetTimeout();
+	void SetTransferSize(int tsize);
+	int GetTransferSize();
+	void SetBlockSize(size_t newsize);
+	size_t GetBlockSize();
+	virtual wxInputStream * GetInputStream(const wxString &bla);
+	bool Abort();
+	virtual wxProtocolError GetError();
+	wxString GetErrorMsg();
+	size_t Read(void * buffer, size_t len);
+	size_t Write(const void * buffer, size_t len);
+	bool Flush(void);
+	void Reset();
+	wxOutputStream * wxTFTP::GetOutputStream(const wxString & path);
+
+protected:
+	wxString GetModeStr();
+	wxString MakeRequest(wxTFTPOpcode type, wxString & filename);
+	wxTFTPOpcode HandlePacket(bool first=false);
+	bool HandleRequest(wxIPV4address origaddr, wxString & request);
+	bool HandleData(wxIPV4address origaddr, wxString & request);
+	bool HandleAck(wxIPV4address origaddr, wxString & request);
+	bool HandleOack(wxIPV4address origaddr, wxString & request);
+	bool HandleWrite(wxIPV4address origaddr, wxString & filename);
+	virtual bool HandleRead(wxIPV4address origaddr, wxString & filename);
+	virtual bool SendError(wxIPV4address & host, wxTFTPError errorno, const char * errormsg);
+	bool wxTFTP::SendAck(wxIPV4address & host, size_t blockno);
+	size_t WriteBlock(int blockno, const void * buffer, size_t len);
+
+	size_t SendData(int blockno, const char * data);
+	size_t SendData(int blockno, wxString & data);
+	bool SendOack(wxIPV4address & host);
+	bool SetOptions(wxString & options);
+	wxArrayString SplitOptions(wxString & options);
+
+
+protected:
+	wxDatagramSocket * sock;	// our UDP socket
+	wxIPV4address theiraddr;	// other side's IP
+	wxTFTPMode mode;		// octet or netascii	(RFC 1350)
+	size_t blksize;			// blocksize		(RFC 1783)
+	int timeout;			// timeout		(RFC 1784)
+	int tsize;			// transfer size	(RFC 1784)
+	int blockno;			// sequence number
+	int lasterror;			// last error occurred
+	wxString data;			// data buffer
+	bool sending;
+	bool receiving;
+	wxString errormsg;		// error message
+
+	DECLARE_DYNAMIC_CLASS_NO_COPY(wxTFTP)
+	DECLARE_PROTOCOL(wxTFTP)
+//	DECLARE_NO_COPY_CLASS(wxTFTP)
+
+};
+
+#endif // wxUSE_PROTOCOL_TFTP
+
+#endif // __WX_TFTP_H__
--- wxBase-2.6.0.orig/setup.h.in	2005-04-20 19:45:26.000000000 +0200
+++ wxBase-2.6.0/setup.h.in	2005-05-25 12:25:11.668330575 +0200
@@ -265,6 +265,7 @@
 #define wxUSE_PROTOCOL_FILE 0
 #define wxUSE_PROTOCOL_FTP 0
 #define wxUSE_PROTOCOL_HTTP 0
+#define wxUSE_PROTOCOL_TFTP 0
 
 #define wxUSE_URL 0
 
--- wxBase-2.6.0.orig/setup.h_vms	2005-04-20 19:45:27.000000000 +0200
+++ wxBase-2.6.0/setup.h_vms	2005-05-25 12:25:24.272555692 +0200
@@ -271,6 +271,7 @@
 #define wxUSE_PROTOCOL_FILE 1
 #define wxUSE_PROTOCOL_FTP 1
 #define wxUSE_PROTOCOL_HTTP 1
+#define wxUSE_PROTOCOL_TFTP 1
 
 #define wxUSE_URL 1
 
--- wxBase-2.6.0.orig/src/common/tftp.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wxBase-2.6.0/src/common/tftp.cpp	2005-05-25 13:10:49.699708815 +0200
@@ -0,0 +1,878 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tftp.cpp
+// Purpose:     TFTP protocol
+// Author:      Sjoerd Langkemper
+// Modified by:
+// Created:     March 2005
+// RCS-ID:      
+// Copyright:   (c) 2005  Sjoerd Langkemper
+// Licence:     wxWidgets license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+  #pragma implementation "tftp.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_PROTOCOL_TFTP
+
+#ifndef WX_PRECOMP
+	#include <stdlib.h>
+	#include "wx/string.h"
+	#include "wx/utils.h"
+	#include "wx/log.h"
+	#include "wx/intl.h"
+	#include "wx/socket.h"
+	#include "wx/protocol/protocol.h"
+	#include "wx/protocol/tftp.h"
+
+/*	#include "wx/ffile.h"
+	#include <wx/debug.h>
+	#include <stream.h>
+*/
+#endif
+
+#define DEF_TIMEOUT 1
+#define MAX_TRIES 5
+#define __WXDEBUG__ 1
+
+// FIXME fill in lasterror more often
+
+IMPLEMENT_DYNAMIC_CLASS(wxTFTP, wxProtocol)
+IMPLEMENT_PROTOCOL(wxTFTP, wxT("tftp"), wxT("tftp"), true)
+
+/////////////////////////////////////////////////////////////////////////////
+// Constructors/destructors/initializers
+/////////////////////////////////////////////////////////////////////////////
+wxTFTP::wxTFTP() : wxProtocol()
+{
+	wxIPV4address myaddr;
+	myaddr.AnyAddress();
+	sock=new wxDatagramSocket(myaddr, wxSOCKET_NONE);
+	Reset();
+	srand(time(NULL));
+}
+
+/* Uses the defined wxDatagramSocket instead of creating its own */
+wxTFTP::wxTFTP(wxDatagramSocket * sock) {
+	wxCHECK_RET(sock!=NULL, wxT("sock should not be NULL"));
+	this->sock=sock;
+	Reset();
+}
+	
+/* Sets default settings. Only blksize is given by the RFC. */
+void wxTFTP::Reset() {
+	blksize	= 512;
+	mode	= wxTFTP_OCTET;
+	tsize	= -1;
+	timeout	= 1;
+	lasterror=wxTFTP_ERR_NOERROR;
+	sending	= false;
+	receiving=false;
+}
+
+/* destroy 
+ */
+wxTFTP::~wxTFTP() 
+{
+	/* abort and close */
+	Abort();
+	delete sock;
+}
+
+/////////////////////////////////////////////////////////////////////////////
+// Request functions 
+/////////////////////////////////////////////////////////////////////////////
+
+/* Constructs a read request (RRQ) or write request (WRQ).
+ */
+wxString wxTFTP::MakeRequest(wxTFTPOpcode type, wxString &filename) {
+	wxString request;
+	// normal (RFC 1350) 0[1|2]filename0[octet|netascii]0
+	request << '\0' << (char)type << filename << '\0' 
+		<< GetModeStr() << '\0';
+
+	// blksize option (RFC 1783) append blksize0[8-65464]0
+	int blksize=GetBlockSize();
+	if (blksize!=512) {
+		request << "blksize" << '\0' << blksize << '\0';
+	}
+
+	// timeout option (RFC 1784) append timeout0[1-255]0
+	int timeout=GetTimeout();
+	if (timeout!=DEF_TIMEOUT) {	
+		request << "timeout" << '\0' << timeout << '\0';
+	}
+
+	// tsize option (RFC 1784) append tsize0[0-inf]0
+	int tsize=GetTransferSize();
+	if (tsize>=0) {
+		request << "tsize" << '\0' << tsize << '\0';
+	}
+
+	return request;
+}
+
+/* Requests a file on /server/ with specified filename.
+ * This sends the first packet, optionally negotiating blocksize and
+ * timeout. After this, call Read to get the file. See also GetInputStream().
+ */
+bool wxTFTP::GetFile(wxIPV4address server, wxString &filename) {
+	wxString request;
+	request=MakeRequest(wxTFTP_RRQ, filename);
+	int tries=0;
+
+	/* Do not call this when a transfer is in progress */
+	wxCHECK(receiving==false, false);
+	wxCHECK(sending==false,   false);
+
+	/* send request until we receive something */
+	do {
+		sock->SendTo(server, request, request.Length());
+		if (tries++==MAX_TRIES) {
+			lasterror=wxTFTP_ERR_NOSERVER;
+			errormsg=_T("Could not connect to server");
+			return false;
+		}
+	} while (sock->WaitForRead(timeout)==false);
+
+	this->receiving=true;
+	this->blockno=1;
+
+	wxTFTPOpcode opcode;
+	opcode=HandlePacket(true);
+	if ((opcode==wxTFTP_OACK)||(opcode==wxTFTP_DATA)) {
+		return true;
+	} else {
+		return false;
+	}
+	return true;
+}
+
+/* Requests to save a file on /server/ with specified filename.
+ */
+bool wxTFTP::PutFile(wxIPV4address server, wxString & filename) {
+	wxString request;
+	request=MakeRequest(wxTFTP_WRQ, filename);
+	int tries=0;
+
+	/* Do not call this when a transfer is in progress */
+	wxCHECK(receiving==false, false);
+	wxCHECK(sending==false,   false);
+
+	do {
+		sock->SendTo(server, request, request.Length());
+		if (tries++==MAX_TRIES) return false;
+	} while (sock->WaitForRead(timeout)==false);
+
+	this->sending=true;
+	this->blockno=0;
+
+	wxTFTPOpcode opcode;
+	opcode=HandlePacket(true);
+	if ((opcode==wxTFTP_OACK)||(opcode==wxTFTP_ACK)) {
+		return true;
+	} else {
+		return false;
+	}
+	return true;
+}
+
+
+/////////////////////////////////////////////////////////////////////////////
+// State manipulation/retreival functions
+/////////////////////////////////////////////////////////////////////////////
+
+/* Aborts the current transfer, if any, and tries to notify the server.
+ */
+bool wxTFTP::Abort() 
+{
+	/* send an error packet */
+	if ((receiving==false)&&(sending==false)) return true;
+	SendError(theiraddr, wxTFTP_ERR_NOTDEFINED, "Aborted by user");
+	data.Empty();
+	Reset();
+	return true;
+}
+
+/* Returns the last occurred error. See wxProtocol::GetError.
+ */
+wxProtocolError wxTFTP::GetError()
+{
+	/* The value stored in lasterror is of type wxTFTPError and must be converted
+	 * to wxProtocolError
+	 */
+	switch (lasterror) {
+		// No error
+		case wxTFTP_ERR_NOERROR:
+			return wxPROTO_NOERR;
+		// This should never be the case
+		case wxTFTP_ERR_NOTDEFINED:
+			return wxPROTO_INVVAL;
+		// File not found
+		case wxTFTP_ERR_NOTFOUND:
+			return wxPROTO_NOFILE;
+		// No permission
+		case wxTFTP_ERR_ACCESSVIOLATION:
+			return wxPROTO_NOFILE;
+		// Disk full
+		case wxTFTP_ERR_DISKFULL:
+			return wxPROTO_NOFILE;
+		// Packet not expected
+		case wxTFTP_ERR_ILLEGAL:
+			return wxPROTO_NETERR;
+		// Unknown port
+		case wxTFTP_ERR_UNKNOWNID:
+			return wxPROTO_CONNERR;
+		// No permission to overwrite file
+		case wxTFTP_ERR_FILEEXISTS:
+			return wxPROTO_NOFILE;
+		// No such user, used for the deprecated mail mode
+		case wxTFTP_ERR_NOUSER:
+			return wxPROTO_NOFILE;
+		// Error negotiating options
+		case wxTFTP_ERR_OPTIONS:
+			return wxPROTO_RCNCT;
+		case wxTFTP_ERR_NOSERVER:
+			return wxPROTO_CONNERR;
+		default:
+			wxFAIL_MSG("Error not recognized");
+			return wxPROTO_INVVAL;
+	}
+
+}
+
+wxString wxTFTP::GetErrorMsg() {
+	return errormsg;
+}
+
+/* Sets the mode to octet or netascii. RFC1350 says: 
+ * "Each host which receives netascii mode data must translate the data
+ * to its own format." which probably means converting linebreaks.
+ * Call this before calling GetFile/PutFile. Default is octet.
+ */
+void wxTFTP::SetMode(wxTFTPMode type) {
+	wxCHECK_RET((type==wxTFTP_OCTET)||(type==wxTFTP_NETASCII), 
+		wxT("Mode must be wxTFTP_OCTET or wxTFTP_NETASCII"));
+	wxCHECK_RET((!receiving)&&(!sending), 
+		wxT("Can not alter mode during transfer"));
+	this->mode=type;
+}
+
+/* Returns mode (wxTFTP_OCTET or wxTFTP_NETASCII). See SetMode.
+ */
+wxTFTP::wxTFTPMode wxTFTP::GetMode() {
+	return this->mode;
+}
+
+// return mode in string (octet or netascii)
+wxString wxTFTP::GetModeStr() {
+	if (GetMode()==wxTFTP_OCTET) {
+		return wxString("octet");
+	} else {
+		return wxString("netascii");
+	}
+}
+
+/* Sets the block size. Default is 512, as specified by RFC1350. Increasing
+ * blocksize leads to better performance on reliable networks. Blocksize
+ * must be between 8 and 65464, inclusive. Blocksize can not be set by
+ * a server and a server may ignore the blocksize requested by the client.
+ */
+void wxTFTP::SetBlockSize(size_t newsize) {
+	wxCHECK_RET((newsize>=8)&&(newsize<=65464), 
+		wxT("Blocksize must be between 8 and 65464, inclusive"));
+	wxCHECK_RET((!receiving)&&(!sending), 
+		wxT("Can not alter blocksize during transfer"));
+	this->blksize=newsize;
+}
+
+size_t wxTFTP::GetBlockSize() {
+	return this->blksize;
+}
+
+/* Sets the timeout in seconds.
+ */
+void wxTFTP::SetTimeout(int timeout) {
+	wxCHECK_RET((timeout>=1)&&(timeout<=255), 
+		wxT("Timeout must be between 1 and 255, inclusive"));
+	this->timeout=timeout;
+}
+
+/* Return timeout in seconds.
+ */
+int wxTFTP::GetTimeout() {
+	return this->timeout;
+}
+
+/* Sets the filesize in octets (e.g. bytes). Only useful when sending. When 
+ * receiving, setting the filesize to any other value than 0 (zero) may 
+ * confuse the server.
+ */
+void wxTFTP::SetTransferSize(int tsize) {
+	wxCHECK_RET((!receiving)&&(!sending), 
+		wxT("Can not alter settings during transfer"));
+	this->tsize=tsize;
+}
+
+int wxTFTP::GetTransferSize() {
+	return this->tsize;
+}
+
+
+/////////////////////////////////////////////////////////////////////////////
+// Option handling functions
+/////////////////////////////////////////////////////////////////////////////
+
+/* Splits the options, which are in format key\0value\0
+ */
+wxArrayString wxTFTP::SplitOptions(wxString & options) {
+	size_t len, start=0, nul=0;
+	wxString option;
+	wxArrayString optarr;
+
+	len=options.Length();
+	
+	while (start<len) {
+		while (options[nul]!='\0') nul++;
+		option=options.Mid(start, nul-start);
+		optarr.Add(option);
+		nul=start=nul+1;
+	}
+
+	return optarr;
+}
+
+/* Parses the options and sets the state accordingly.
+ */
+bool wxTFTP::SetOptions(wxString & options) {
+	wxArrayString parameters;
+	parameters=SplitOptions(options);
+	size_t i=0;
+	long int longbuf;
+
+	while ((i+1)<parameters.Count()) {
+		if (0==parameters[i].CmpNoCase("blksize")) {
+			if (parameters[++i].ToLong(&longbuf)) {
+				this->blksize=longbuf;
+			}
+		} else if (0==parameters[i].CmpNoCase("tsize")) {
+			if (parameters[++i].ToLong(&longbuf)) {
+				this->tsize=longbuf;
+			}
+		} else if (0==parameters[i].CmpNoCase("timeout")) {
+			if (parameters[++i].ToLong(&longbuf)) {
+				this->timeout=longbuf;
+			}
+		}
+		i++;
+	}
+
+	return true;
+}
+
+/////////////////////////////////////////////////////////////////////////////
+// Packet handling functions
+/////////////////////////////////////////////////////////////////////////////
+
+/* This gets called when a client wants to save a file on this server.
+ * Override this if you are a server.
+ */
+bool wxTFTP::HandleWrite(wxIPV4address origaddr, wxString & filename) {
+	return false;
+}
+
+/* This gets called when a client wants to get a file from this server.
+ * Override this if you are a server.
+ */
+bool wxTFTP::HandleRead(wxIPV4address origaddr, wxString & filename) {
+	return false;
+}
+
+/* A request to read or write a file came in. Parse the request and pass
+ * it to the handler functions.
+ */
+bool wxTFTP::HandleRequest(wxIPV4address origaddr, wxString & request) {
+	wxTFTPOpcode opcode;
+	wxString filename;
+	wxString options;
+	int nulpos;
+	bool res=false;
+
+	Reset();
+
+	/* parse opcode */
+	opcode=(wxTFTPOpcode)request.at(1);
+
+	/* parse filename and set options */
+	filename=request.Mid(2);
+	nulpos=filename.Find('\0');
+	// FIXME check nulpos
+	options=filename.Mid(nulpos+1);
+	filename.Truncate(nulpos);
+	SetOptions(options);
+
+	/* switch port from 69 to random */
+	wxDatagramSocket * servsock=this->sock;
+	wxIPV4address myaddr;
+	myaddr.AnyAddress();
+	sock=new wxDatagramSocket(myaddr, wxSOCKET_NONE);
+	
+	if (opcode==wxTFTP_WRQ) {
+		receiving=true;	
+		SendOack(origaddr);
+		res=HandleWrite(origaddr, filename);
+	} else if (opcode==wxTFTP_RRQ) {
+		sending=true;
+		SendOack(origaddr);
+		blockno=1;
+		res=HandleRead(origaddr, filename);
+	}
+	/* switch back to port 69 */
+	delete sock;
+	sock=servsock;
+
+	return res;
+}
+
+/* A DATA packet came in. Put it in the buffer and send an ACK.
+ */
+bool wxTFTP::HandleData(wxIPV4address origaddr, wxString & request) {
+	/* extract and check blocknumber */
+	int blockno;
+	int tries=0;
+
+	// FIXME this is the ugly way:
+	blockno=((unsigned char)request.at(2)<<8)+(unsigned char)request.at(3);
+
+	if (blockno!=this->blockno) {
+		/* We do not expect this block, send ack */
+		SendAck(origaddr, this->blockno-1);
+		return false;
+	}
+	
+	/* put data in the buffer */
+	this->data=request.Mid(4);
+	
+	if (request.Length()<(4+GetBlockSize())) {
+		/* end of file */
+		this->sending=false;
+		this->receiving=false;
+	}
+	do {
+		SendAck(origaddr, blockno);
+		if (tries++==MAX_TRIES) return false;
+	} while ((sending||receiving)&&(sock->WaitForRead(timeout)==false));
+	this->blockno++;
+
+	return true;
+}
+
+/* An ACK came in. Increase the sequence number.
+ */
+bool wxTFTP::HandleAck(wxIPV4address origaddr, wxString & request) {
+	/* check sequence number and increase it */
+	int blockno;
+
+	blockno=(((unsigned char)request.at(2))<<8)+(unsigned char)request.at(3);
+	if (blockno==this->blockno) {
+		/* We expect this ack, increase sequence number */
+		this->blockno++;
+	} else {
+		/* Unexpected ACK received */
+//		cout << "Unexpected ack received\n";
+	}
+	return true;
+}
+
+/* An OACK came in. Set options accordingly.
+ */
+bool wxTFTP::HandleOack(wxIPV4address origaddr, wxString & request) {
+	wxString options;
+	options=request.Mid(2);
+	SetOptions(options);
+	if (receiving) {
+		SendAck(origaddr, 0);
+	} 
+	return true;
+}
+
+/* Reads packet */
+wxTFTP::wxTFTPOpcode wxTFTP::HandlePacket(bool first) {
+	wxString buffer;
+	wxIPV4address origaddr;
+	wxTFTPOpcode opcode;
+	wxChar * cbuf;
+	size_t cread;
+	size_t maxlen;
+
+	wxCHECK_MSG(sock->Ok(), (wxTFTPOpcode)0, "Socket not initialized");
+
+//	buffer.Alloc(GetBlockSize());
+	maxlen=4+GetBlockSize();
+	cbuf=buffer.GetWriteBuf(maxlen);
+	cread=sock->RecvFrom(origaddr, cbuf, maxlen).LastCount();
+	buffer.UngetWriteBuf(maxlen);
+	buffer.Truncate(cread);
+
+	opcode=(wxTFTPOpcode)buffer.at(1);
+
+	if (first) {
+		this->theiraddr=origaddr;
+	} else if (!(origaddr==this->theiraddr)) {
+		/* return to sender, address unknown */
+		SendError(origaddr, wxTFTP_ERR_UNKNOWNID, "Unknown transfer ID");
+		return opcode;
+	}
+
+	switch (opcode) {
+		case wxTFTP_RRQ:
+			HandleRequest(origaddr, buffer);
+			break;
+		case wxTFTP_WRQ:
+			HandleRequest(origaddr, buffer);
+			break;
+		case wxTFTP_DATA:
+			if (!this->receiving) {
+				/* We do not expect data */
+				SendError(origaddr, wxTFTP_ERR_ILLEGAL, "Data not expected");
+				return opcode;
+			}
+			HandleData(origaddr, buffer);
+			break;
+		case wxTFTP_ACK:
+			/* update sequence number */
+			if (!this->sending) {
+				/* We do not expect to get an ACK */
+				SendError(origaddr, wxTFTP_ERR_ILLEGAL, "ACK not expected");
+				return opcode;
+			}
+			HandleAck(origaddr, buffer);
+			break;
+		case wxTFTP_ERROR:
+			/* update last error and abort */
+			lasterror=buffer.at(3);
+			errormsg=buffer.Mid(4);
+			this->receiving=false;
+			this->sending=false;
+			break;
+		case wxTFTP_OACK:
+			/* update options */
+			if (!first) {
+				/* We do not expect an OACK */
+				SendError(origaddr, wxTFTP_ERR_ILLEGAL, "OACK not expected");
+			} else {
+				HandleOack(origaddr, buffer);
+			}
+			break;
+		default:
+			/* unknown opcode */
+			wxFAIL_MSG("Opcode not recognized");
+			SendError(origaddr, wxTFTP_ERR_ILLEGAL, "Opcode not recognized");
+			break;
+	}
+	return opcode;
+		
+}
+
+/////////////////////////////////////////////////////////////////////////////
+// Packet sending functions
+/////////////////////////////////////////////////////////////////////////////
+
+
+bool wxTFTP::SendAck(wxIPV4address & host, size_t blockno) {
+	wxString request;
+	// FIXME this is ugly and wrong
+	request << '\0' << (char)wxTFTP_ACK
+		<< (char)((blockno & 0xff00) >> 8)
+		<< (char)(blockno & 0x00ff);
+	sock->SendTo(host, request, request.Length());
+	return true;
+}
+
+bool wxTFTP::SendError(wxIPV4address & host,
+		wxTFTPError errorno,
+		const char * errormsg) {
+	wxString request;
+
+	request << '\0' << (char)wxTFTP_ERROR 
+		<< '\0' << (char)errorno
+		<< errormsg << '\0';
+
+	sock->SendTo(host, request, request.Length());
+	return true;
+}
+
+bool wxTFTP::SendOack(wxIPV4address & host) {
+	wxString request;
+	bool send=false;
+	int tries=0;
+	
+	request << '\0' << (char)wxTFTP_OACK;
+	if (GetBlockSize()!=512) {
+		send=true;
+		request << "blksize" << '\0'
+			<< GetBlockSize() << '\0';
+	}
+	if (GetTimeout()!=DEF_TIMEOUT) {
+		send=true;
+		request << "timeout" << '\0'
+			<< GetTimeout() << '\0';
+	}
+	// FIXME transfer size
+	if (!send) return true;
+	do {
+		sock->SendTo(host, request, request.Length());
+		if (tries++==MAX_TRIES) return false;
+	} while (sock->WaitForRead(timeout)==false);
+
+	if (sending) HandlePacket();
+	return true;
+}
+
+size_t wxTFTP::SendData(int blockno, const char * data) {
+	// FIXME doesn't work, because data starts with \0
+	wxString datastr(data, GetBlockSize());
+	return SendData(blockno, datastr);
+}
+
+size_t wxTFTP::SendData(int blockno, wxString & data) {
+	wxString datagram;
+	int tries=0;
+	datagram << '\0' << (char)wxTFTP_DATA
+		<< (char)((blockno & 0xff00) >> 8)
+		<< (char)(blockno & 0x00ff);
+	datagram.Append(data.Left(GetBlockSize()));
+
+	do {
+		sock->SendTo(this->theiraddr, datagram, datagram.Length());
+		if (tries++==MAX_TRIES) return 0;
+	} while (sock->WaitForRead(timeout)==false);
+
+	// FIXME is this supposed to be here? Make it consistent throughout
+	// all functions
+	HandlePacket();
+
+	return datagram.Length()-4;
+}
+
+/////////////////////////////////////////////////////////////////////////////
+// I/O functions
+/////////////////////////////////////////////////////////////////////////////
+
+size_t wxTFTP::Read(void * buffer, size_t len) {
+	size_t left=len;
+	size_t readamount;
+	char * p=(char *)buffer;
+
+	/* There can be data left in the buffer after an EOF */
+	if (!this->receiving) {
+		readamount=this->data.Length();
+		if (readamount>0) {
+			memcpy(buffer, this->data, readamount);
+			this->data.Empty();
+			return readamount;
+		} else {
+			return 0;
+		}
+	}
+
+	while ((this->receiving)&&(left)) {
+		readamount=this->data.Length();
+		if (readamount==0) {
+			HandlePacket();
+			readamount=this->data.Length();
+		}
+		readamount=(left < readamount ? left : readamount);
+		memcpy(p, this->data, readamount);
+		// FIXME make this one statement
+		if (readamount==left) {
+			this->data=this->data.Mid(readamount);	
+		} else {
+			this->data.Empty();
+		}
+		p+=readamount;
+		left-=readamount;
+	}
+
+	return len-left;
+}
+
+
+size_t wxTFTP::WriteBlock(int blockno, const void * buffer, size_t len) {
+	wxCHECK(sending, 0); 
+	if (this->data.Length()==0) {
+		// no data in buffer
+		if (len<GetBlockSize()) {
+			// put data in buffer
+			this->data.Append((char *)buffer, len);
+			return len;
+		} else {
+			// send block right now
+			return SendData(blockno, (char *)buffer);
+		}
+	} else {
+		// append data and maybe send block now
+		size_t write;
+		size_t spaceleft=GetBlockSize()-this->data.Length();
+		write=(len < spaceleft ? len : spaceleft);
+		this->data.Append((char *)buffer, write);
+		if (this->data.Length()==GetBlockSize()) {
+			SendData(blockno, this->data);
+			this->data.Empty();
+		}
+		return write;
+	}
+}
+
+size_t wxTFTP::Write(const void * buffer, size_t len) {
+	int left=len;
+	char * p=(char *)buffer;
+	int written=1;
+
+	wxCHECK(sending, 0); 
+	while ((left)&&(written)) {
+		written=WriteBlock(blockno, p, left);
+		// blockno++;
+		left-=written;
+		p+=written;
+	}
+	
+	return len-left;
+}
+
+// FIXME Is there another way to detect EOF?
+bool wxTFTP::Flush() {
+	wxCHECK(sending, 0); 
+	SendData(blockno, data);
+	data.Empty();
+	sending=false; 
+	return true;
+}
+
+class wxInputTFTPStream : public wxInputStream
+{
+public:
+	wxTFTP * m_tftp;
+	
+	wxInputTFTPStream(wxTFTP * tftp) {
+		this->m_tftp=tftp;
+	}
+	
+	virtual ~wxInputTFTPStream() {
+		m_tftp->Close();
+	}
+
+protected:
+	size_t OnSysRead(void * buffer, size_t bufsize) {
+		return m_tftp->Read(buffer, bufsize);
+	}
+
+	DECLARE_NO_COPY_CLASS(wxInputTFTPStream)
+};
+
+class wxOutputTFTPStream : public wxOutputStream
+{
+public:
+	wxTFTP * m_tftp;
+	
+	wxOutputTFTPStream(wxTFTP * tftp) {
+		this->m_tftp=tftp;
+	}
+
+	virtual ~wxOutputTFTPStream() {
+		m_tftp->Flush();
+	}
+
+protected:
+	size_t OnSysWrite(const void * buffer, size_t bufsize) {
+		return m_tftp->Write(buffer, bufsize);
+	}
+
+	DECLARE_NO_COPY_CLASS(wxOutputTFTPStream)
+};
+
+/* Returns an wxInputStream with the contents of the file indicated by uri, 
+ * which is of the form tftp://server/filename.
+ */
+wxInputStream * wxTFTP::GetInputStream(const wxString & path) {
+	wxString protocol, server, filename, port;
+	int slashpos;
+	int colonpos;
+	wxIPV4address serverip;
+
+	// if already receiving, just return an InputStream
+	if (receiving) return new wxInputTFTPStream(this);
+	
+	protocol=path.Left(7);
+	server=path.Mid(7);
+	slashpos=server.Find('/');
+	if (slashpos==-1) return NULL;
+	
+	filename=server.Mid(slashpos+1);
+	server.Truncate(slashpos);
+
+	colonpos=server.Find(':');
+	if (colonpos>0) {
+		port=server.Mid(colonpos+1);
+		server.Truncate(colonpos);
+	} else {
+		port="69";
+	}
+	
+	if (0!=protocol.Cmp("tftp://")) return NULL;
+
+	serverip.Hostname(server);
+	serverip.Service(port);
+
+	if (!GetFile(serverip, filename)) {
+		return NULL;
+	}
+
+	return new wxInputTFTPStream(this);
+}
+
+wxOutputStream * wxTFTP::GetOutputStream(const wxString & path) {
+	wxString protocol, server, filename, port;
+	int slashpos;
+	int colonpos;
+	wxIPV4address serverip;
+
+	// if already sending, just return an OutputStream
+	if (sending) return new wxOutputTFTPStream(this);
+	
+	protocol=path.Left(7);
+	server=path.Mid(7);
+	slashpos=server.Find('/');
+	if (slashpos==-1) return NULL;
+	
+	filename=server.Mid(slashpos+1);
+	server.Truncate(slashpos);
+
+	colonpos=server.Find(':');
+	if (colonpos>0) {
+		port=server.Mid(colonpos+1);
+		server.Truncate(colonpos);
+	} else {
+		port="69";
+	}
+	
+	if (0!=protocol.Cmp("tftp://")) return NULL;
+
+	serverip.Hostname(server);
+	serverip.Service(port);
+
+	if (!PutFile(serverip, filename)) {
+		return NULL;
+	}
+
+	return new wxOutputTFTPStream(this);
+}
+
+#endif // wxUSE_PROTOCOL_TFTP
+

 	  	 

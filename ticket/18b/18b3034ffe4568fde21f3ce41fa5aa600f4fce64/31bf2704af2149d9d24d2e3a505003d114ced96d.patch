Index: docs/latex/wx/slider.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/slider.tex,v
retrieving revision 1.6
diff -u -a -r1.6 slider.tex
--- docs/latex/wx/slider.tex	2002/07/09 23:34:31	1.6
+++ docs/latex/wx/slider.tex	2003/03/25 20:29:19
@@ -50,6 +50,17 @@
 
 Default slider.
 
+\func{}{wxSlider}{\param{wxWindow* }{parent}, \param{wxWindowID }{id},
+\param{float }{value },\rtfsp 
+\param{float}{ minValue}, \param{float}{ maxValue},\rtfsp
+\param{const wxPoint\& }{point = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
+\param{long}{ style = wxSL\_HORIZONTAL},\rtfsp
+\param{const wxValidator\& }{validator = wxDefaultValidator},\rtfsp
+\param{const wxString\& }{name = ``slider"}}
+
+Constructor, creating and showing a slider with a floating point decimal
+precision of wxSL_DEFAULT_FLOAT_PRECISION.
+
 \func{}{wxSlider}{\param{wxWindow* }{parent}, \param{wxWindowID }{id}, \param{int }{value },\rtfsp
 \param{int}{ minValue}, \param{int}{ maxValue},\rtfsp
 \param{const wxPoint\& }{point = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
@@ -57,7 +68,8 @@
 \param{const wxValidator\& }{validator = wxDefaultValidator},\rtfsp
 \param{const wxString\& }{name = ``slider"}}
 
-Constructor, creating and showing a slider.
+Constructor, creating and showing a slider with a floating point decimal
+precision of 0.
 
 \wxheading{Parameters}
 
@@ -111,6 +123,18 @@
 
 \membersection{wxSlider::Create}\label{wxslidercreate}
 
+\func{bool}{Create}{\param{wxWindow* }{parent}, \param{wxWindowID }{id},
+\param{float }{value },\rtfsp
+\param{float}{ minValue}, \param{float}{ maxValue},\rtfsp
+\param{const wxPoint\& }{point = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
+\param{long}{ style = wxSL\_HORIZONTAL},\rtfsp
+\param{const wxValidator\& }{validator = wxDefaultValidator},\rtfsp
+\param{const wxString\& }{name = ``slider"}}
+
+Used for two-step slider construction. See \helpref{wxSlider::wxSlider}{wxsliderconstr}\rtfsp
+for further details. Floating point decimal precision is set to
+wxSL_DEFAULT_FLOAT_PRECISION.
+
 \func{bool}{Create}{\param{wxWindow* }{parent}, \param{wxWindowID }{id}, \param{int }{value },\rtfsp
 \param{int}{ minValue}, \param{int}{ maxValue},\rtfsp
 \param{const wxPoint\& }{point = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
@@ -119,7 +143,7 @@
 \param{const wxString\& }{name = ``slider"}}
 
 Used for two-step slider construction. See \helpref{wxSlider::wxSlider}{wxsliderconstr}\rtfsp
-for further details.
+for further details. Floating point decimal precision is set to 0.
 
 \membersection{wxSlider::GetLineSize}\label{wxslidergetlinesize}
 
@@ -134,22 +158,26 @@
 \membersection{wxSlider::GetMax}\label{wxslidergetmax}
 
 \constfunc{int}{GetMax}{\void}
+\constfunc{float}{FGetMax}{\void}
 
 Gets the maximum slider value.
 
 \wxheading{See also}
 
 \helpref{wxSlider::GetMin}{wxslidergetmin}, \helpref{wxSlider::SetRange}{wxslidersetrange}
+\helpref{wxSlider::FGetMin}{wxslidergetmin}, \helpref{wxSlider::FSetRange}{wxslidersetrange}
 
 \membersection{wxSlider::GetMin}\label{wxslidergetmin}
 
 \constfunc{int}{GetMin}{\void}
+\constfunc{float}{FGetMin}{\void}
 
 Gets the minimum slider value.
 
 \wxheading{See also}
 
 \helpref{wxSlider::GetMin}{wxslidergetmin}, \helpref{wxSlider::SetRange}{wxslidersetrange}
+\helpref{wxSlider::FGetMin}{wxslidergetmin}, \helpref{wxSlider::FSetRange}{wxslidersetrange}
 
 \membersection{wxSlider::GetPageSize}\label{wxslidergetpagesize}
 
@@ -206,6 +234,7 @@
 \membersection{wxSlider::GetTickFreq}\label{wxslidergettickfreq}
 
 \constfunc{int}{GetTickFreq}{\void}
+\constfunc{float}{FGetTickFreq}{\void}
 
 Returns the tick frequency.
 
@@ -220,27 +249,37 @@
 \membersection{wxSlider::GetValue}\label{wxslidergetvalue}
 
 \constfunc{int}{GetValue}{\void}
+\constfunc{float}{FGetValue}{\void}
 
 Gets the current slider value.
 
 \wxheading{See also}
 
-\helpref{wxSlider::GetMin}{wxslidergetmin}, \helpref{wxSlider::GetMax}{wxslidergetmax},\rtfsp
-\helpref{wxSlider::SetValue}{wxslidersetvalue}
+\helpref{wxSlider::GetMin}{wxslidergetmin}, 
+\helpref{wxSlider::GetMax}{wxslidergetmax},\rtfsp
+\helpref{wxSlider::FGetMin}{wxslidergetmin}, 
+\helpref{wxSlider::FGetMax}{wxslidergetmax},\rtfsp
+\helpref{wxSlider::SetValue}{wxslidersetvalue},
+\helpref{wxSlider::FSetValue}{wxslidersetvalue},\rtfsp
+\helpref{wxSlider::FValueMaximum}{wxslidervaluemaximum},
+\helpref{wxSlider::ValueMaximum}{wxslidersetvalue}
 
 \membersection{wxSlider::SetRange}\label{wxslidersetrange}
 
 \func{void}{SetRange}{\param{int}{ minValue}, \param{int}{ maxValue}}
+\func{void}{FSetRange}{\param{float}{ minValue}, \param{float}{ maxValue}}
 
 Sets the minimum and maximum slider values.
 
 \wxheading{See also}
 
 \helpref{wxSlider::GetMin}{wxslidergetmin}, \helpref{wxSlider::GetMax}{wxslidergetmax}
+\helpref{wxSlider::FGetMin}{wxslidergetmin}, \helpref{wxSlider::FGetMax}{wxslidergetmax}
 
 \membersection{wxSlider::SetTickFreq}\label{wxslidersettickfreq}
 
 \func{void}{SetTickFreq}{\param{int }{n}, \param{int }{pos}}
+\func{void}{FSetTickFreq}{\param{float }{n}, \param{float }{pos}}
 
 Sets the tick mark frequency and position.
 
@@ -262,6 +301,7 @@
 \membersection{wxSlider::SetLineSize}\label{wxslidersetlinesize}
 
 \func{void}{SetLineSize}{\param{int }{lineSize}}
+\func{void}{FSetLineSize}{\param{float }{lineSize}}
 
 Sets the line size for the slider.
 
@@ -272,10 +312,12 @@
 \wxheading{See also}
 
 \helpref{wxSlider::GetLineSize}{wxslidergetlinesize}
+\helpref{wxSlider::FGetLineSize}{wxslidergetlinesize}
 
 \membersection{wxSlider::SetPageSize}\label{wxslidersetpagesize}
 
 \func{void}{SetPageSize}{\param{int }{pageSize}}
+\func{void}{FSetPageSize}{\param{float }{pageSize}}
 
 Sets the page size for the slider.
 
@@ -286,6 +328,7 @@
 \wxheading{See also}
 
 \helpref{wxSlider::GetPageSize}{wxslidergetpagesize}
+\helpref{wxSlider::FGetPageSize}{wxslidergetpagesize}
 
 \membersection{wxSlider::SetSelection}\label{wxslidersetselection}
 
@@ -345,7 +388,8 @@
 
 \membersection{wxSlider::SetValue}\label{wxslidersetvalue}
 
-\func{void}{SetValue}{\param{int}{ value}}
+\func{void}{SetValue}{\param{int}{ value}},
+\func{void}{FSetValue}{\param{float}{ value}}
 
 Sets the slider position.
 
@@ -354,6 +398,68 @@
 \docparam{value}{The slider position.}
 
 \wxheading{See also}
+
+\helpref{wxSlider::GetValue}{wxslidergetvalue},
+\helpref{wxSlider::FGetValue}{wxslidergetvalue}
+
+\membersection{wxSlider::FSetPrecision}\label{wxsliderfsetprecision}
+
+\func{void}{FSetPrecision}{\param{short}{precision}}
+
+The floating point decimal precision is used for labels, determines the 
+smallest possible increment, and may also be used for conversions on platforms
+(such as Macintosh/Carbon) that internally use an integer.
+
+\wxheading{See also}
+
+\helpref{wxSlider::FGetPrecision}{wxsliderfgetprecision},
+\helpref{wxSlider::FPrecisionMaximum}{wxsliderfprecisionmaximum}
+
+
+
+\membersection{wxSlider::FGetPrecision}\label{wxsliderfgetprecision}
+
+\constfunc{short}{FGetPrecision}{\void}
+
+The floating point decimal precision is used for labels, determines the 
+smallest possible increment, and may also be used for conversions on platforms
+(such as Macintosh/Carbon) that internally use an integer.
+
+\wxheading{See also}
+
+\helpref{wxSlider::FSetPrecision}{wxsliderfsetprecision},
+\helpref{wxSlider::FPrecisionMaximum}{wxsliderfprecisionmaximum}
+
+
+
+
+\membersection{wxSlider::ValueMaximum}\label{wxslidervaluemaximum}
+
+\constfunc{float}{FValueMaximum}{\void}
+\constfunc{int}{ValueMaximum}{\void}
+
+Returns the largest possible value that may be used for the slider's
+value, maximum or minimum. This may depend on the current decimal
+precision on some platforms.
+
+\wxheading{See also}
+
+\helpref{wxSlider::FSetValue}{wxsliderfsetvalue},
+\helpref{wxSlider::FGetValue}{wxsliderfgetvalue},
+\helpref{wxSlider::SetValue}{wxslidersetvalue},
+\helpref{wxSlider::GetValue}{wxsliderfsetvalue}
+
+
+
+\membersection{wxSlider::PrecisionMaximum}\label{wxsliderprecisionmaximum}
+
+\constfunc{short}{PrecisionMaximum}{\void}
+
+Returns the largest possible value that may be used for the slider's
+precision.
+
+\wxheading{See also}
 
-\helpref{wxSlider::GetValue}{wxslidergetvalue}
+\helpref{wxSlider::SetPrecision}{wxslidersetprecision},
+\helpref{wxSlider::GetPrecision}{wxslidergetprecision}
 
Index: include/wx/slider.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/slider.h,v
retrieving revision 1.8
diff -u -a -r1.8 slider.h
--- include/wx/slider.h	2003/01/04 09:22:53	1.8
+++ include/wx/slider.h	2003/03/25 20:29:20
@@ -20,18 +20,24 @@
 
 #if wxUSE_SLIDER
 
+#include <float.h>    // should eventually use c++ <limits>.
 #include "wx/control.h"
 
 WXDLLEXPORT_DATA(extern const wxChar*) wxSliderNameStr;
 
+#define wxSL_DEFAULT_FLOAT_PRECISION 2
+
 // ----------------------------------------------------------------------------
 // wxSliderBase: define wxSlider interface
 // ----------------------------------------------------------------------------
 
 class WXDLLEXPORT wxSliderBase : public wxControl
 {
+protected:
+    short m_precision;
+    
 public:
-    /* the ctor of the derived class should have the following form:
+    /* the ctors of the derived class should have the following forms:
 
     wxSlider(wxWindow *parent,
              wxWindowID id,
@@ -41,16 +47,66 @@
              long style = wxSL_HORIZONTAL,
              const wxValidator& validator = wxDefaultValidator,
              const wxString& name = wxSliderNameStr);
+    and m_precision should be set to 0.
+    
+    wxSlider(wxWindow *parent,
+             wxWindowID id,
+             float value, float minValue, float maxValue,
+             const wxPoint& pos = wxDefaultPosition,
+             const wxSize& size = wxDefaultSize,
+             long style = wxSL_HORIZONTAL,
+             const wxValidator& validator = wxDefaultValidator,
+             const wxString& name = wxSliderNameStr);
+    and m_precision should be set to wxSL_DEFAULT_FLOAT_PRECISION.
     */
 
-    // get/set the current slider value (should be in range)
+    // get/set the current slider value (should be in range). Integers are rounded.
     virtual int GetValue() const = 0;
     virtual void SetValue(int value) = 0;
+    virtual float FGetValue() const = 0;
+    virtual void FSetValue(float value) = 0;
+    
 
     // retrieve/change the range
     virtual void SetRange(int minValue, int maxValue) = 0;
     virtual int GetMin() const = 0;
     virtual int GetMax() const = 0;
+    virtual void FSetRange(float minValue, float maxValue) = 0;
+    virtual float FGetMin() const = 0;
+    virtual float FGetMax() const = 0;
+
+    // The decimal precision is used for labels, determines the smallest
+    // possible increment, and may also be used on platforms
+    // (such as Macintosh) that internally use an integer.
+    virtual void FSetPrecision(short precision) 
+    {
+        m_precision = precision;
+    }
+    
+    virtual short FGetPrecision() const 
+    {
+        return m_precision;
+    }
+
+    // The maximum possible value, min, or max. This may depend on the current
+    // precision. (e.g. wxMac)
+    virtual float FValueMaximum() const 
+    {
+        // return numeric_limits<float>::max(); // use this eventually
+        return FLT_MAX; // from float.h
+    }
+
+    virtual int ValueMaximum() const 
+    {
+        return (int)(FValueMaximum());
+    }
+
+    // The maximum possible precision. 
+    virtual short PrecisionMaximum() const 
+    {
+        // return numeric_limits<float>::digits10(); // use this eventually
+        return FLT_DIG; // from float.h
+    }
 
     // the line/page size is the increment by which the slider moves when
     // cursor arrow key/page up or down are pressed (clicking the mouse is like
@@ -59,22 +115,28 @@
     virtual void SetPageSize(int pageSize) = 0;
     virtual int GetLineSize() const = 0;
     virtual int GetPageSize() const = 0;
-
+    virtual void FSetLineSize(float lineSize) = 0;
+    virtual void FSetPageSize(float pageSize) = 0;
+    virtual float FGetLineSize() const = 0;
+    virtual float FGetPageSize() const = 0;
+    
     // these methods get/set the length of the slider pointer in pixels
-    virtual void SetThumbLength(int lenPixels) = 0;
-    virtual int GetThumbLength() const = 0;
+    virtual void SetThumbLength(int WXUNUSED(lenPixels)) {}
+    virtual int GetThumbLength() const { return 0; }
 
     // warning: most of subsequent methods are currently only implemented in
     //          wxMSW under Win95 and are silently ignored on other platforms
 
     virtual void SetTickFreq(int WXUNUSED(n), int WXUNUSED(pos)) { }
     virtual int GetTickFreq() const { return 0; }
+    virtual void FSetTickFreq(float WXUNUSED(n), float WXUNUSED(pos)) {}
+    virtual float FGetTickFreq() const  { return 0.0; }
     virtual void ClearTicks() { }
     virtual void SetTick(int WXUNUSED(tickPos)) { }
-
+    
     virtual void ClearSel() { }
-    virtual int GetSelEnd() const { return GetMin(); }
-    virtual int GetSelStart() const { return GetMax(); }
+    virtual int GetSelEnd() const { return GetValue(); }
+    virtual int GetSelStart() const { return GetValue(); }
     virtual void SetSelection(int WXUNUSED(min), int WXUNUSED(max)) { }
 };
 
Index: include/wx/gtk/slider.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/gtk/slider.h,v
retrieving revision 1.14
diff -u -a -r1.14 slider.h
--- include/wx/gtk/slider.h	2003/03/17 10:28:17	1.14
+++ include/wx/gtk/slider.h	2003/03/25 20:29:22
@@ -21,7 +21,11 @@
 class wxSlider : public wxSliderBase
 {
 public:
-    wxSlider() { }
+    wxSlider() 
+    { 
+        m_precision = wxSL_DEFAULT_FLOAT_PRECISION;
+    }
+
     wxSlider(wxWindow *parent,
              wxWindowID id,
              int value, int minValue, int maxValue,
@@ -31,6 +35,21 @@
              const wxValidator& validator = wxDefaultValidator,
              const wxString& name = wxSliderNameStr)
     {
+        m_precision = 0;
+        Create( parent, id, value, minValue, maxValue,
+                pos, size, style, validator, name );
+    }
+
+    wxSlider(wxWindow *parent,
+             wxWindowID id,
+             float value, float minValue, float maxValue,
+             const wxPoint& pos = wxDefaultPosition,
+             const wxSize& size = wxDefaultSize,
+             long style = wxSL_HORIZONTAL,
+             const wxValidator& validator = wxDefaultValidator,
+             const wxString& name = wxSliderNameStr)
+    {
+        m_precision = wxSL_DEFAULT_FLOAT_PRECISION;
         Create( parent, id, value, minValue, maxValue,
                 pos, size, style, validator, name );
     }
@@ -44,18 +63,41 @@
                 const wxValidator& validator = wxDefaultValidator,
                 const wxString& name = wxSliderNameStr);
 
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                float value, float minValue, float maxValue,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxSL_HORIZONTAL,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxSliderNameStr);
+
     // implement the base class pure virtuals
     virtual int GetValue() const;
     virtual void SetValue(int value);
 
+    virtual float FGetValue() const;
+    virtual void FSetValue(float value);
+
     virtual void SetRange(int minValue, int maxValue);
-    virtual int GetMin() const;
-    virtual int GetMax() const;
+    virtual int GetMin() const ;
+    virtual int GetMax() const ;
+
+    virtual void FSetRange(float minValue, float maxValue);
+    virtual float FGetMin() const;
+    virtual float FGetMax() const;
 
+    virtual void FSetPrecision(short precision);
+
     virtual void SetLineSize(int lineSize);
     virtual void SetPageSize(int pageSize);
-    virtual int GetLineSize() const;
-    virtual int GetPageSize() const;
+    virtual int GetLineSize()  const;
+    virtual int GetPageSize()  const;
+
+    virtual void FSetLineSize(float lineSize);
+    virtual void FSetPageSize(float lineSize);
+    virtual float FGetLineSize() const;
+    virtual float FGetPageSize() const;
 
     virtual void SetThumbLength(int lenPixels);
     virtual int GetThumbLength() const;
@@ -68,6 +110,9 @@
 
     GtkAdjustment  *m_adjust;
     float           m_oldPos;
+
+private:
+    int roundint(float val) const; 
 
 private:
     DECLARE_DYNAMIC_CLASS(wxSlider)
Index: include/wx/mac/slider.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/slider.h,v
retrieving revision 1.10
diff -u -a -r1.10 slider.h
--- include/wx/mac/slider.h	2003/02/28 23:44:45	1.10
+++ include/wx/mac/slider.h	2003/03/25 20:29:22
@@ -9,6 +9,7 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
+
 #ifndef _WX_SLIDER_H_
 #define _WX_SLIDER_H_
 
@@ -23,7 +24,7 @@
 WXDLLEXPORT_DATA(extern const char*) wxSliderNameStr;
 
 // Slider
-class WXDLLEXPORT wxSlider: public wxControl
+class WXDLLEXPORT wxSlider: public wxSliderBase
 {
   DECLARE_DYNAMIC_CLASS(wxSlider)
 
@@ -38,6 +39,20 @@
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxSliderNameStr)
   {
+      m_precision = 0;
+      Create(parent, id, value, minValue, maxValue, pos, size, style, validator, name);
+  }
+  
+  wxSlider(wxWindow *parent,
+           wxWindowID id,
+           float value, float minValue, float maxValue,
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize,
+           long style = wxSL_HORIZONTAL,
+           const wxValidator& validator = wxDefaultValidator,
+           const wxString& name = wxSliderNameStr)
+  {
+      m_precision = wxSL_DEFAULT_FLOAT_PRECISION;
       Create(parent, id, value, minValue, maxValue, pos, size, style, validator, name);
   }
 
@@ -51,56 +66,78 @@
            const wxValidator& validator = wxDefaultValidator,
            const wxString& name = wxSliderNameStr);
 
-  virtual int GetValue() const ;
+  bool Create(wxWindow *parent, wxWindowID id,
+           float value, float minValue, float maxValue,
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize,
+           long style = wxSL_HORIZONTAL,
+           const wxValidator& validator = wxDefaultValidator,
+           const wxString& name = wxSliderNameStr);
+  
+  virtual int GetValue() const;
   virtual void SetValue(int);
+  virtual float FGetValue() const;
+  virtual void FSetValue(float value);
 
-  void SetRange(int minValue, int maxValue);
+  virtual void SetRange(int minValue, int maxValue);
+  virtual int GetMin() const;
+  virtual int GetMax() const;
+  virtual void FSetRange(float minValue, float maxValue);
+  virtual float FGetMin() const;
+  virtual float FGetMax() const;
+
+  virtual void FSetPrecision( short precision);
+
+  virtual float FValueMaximum() const;
+  
+  virtual void SetTickFreq(int n, int pos);
+  virtual int GetTickFreq() const;
+  virtual float FGetTickFreq() const;
+  virtual void FSetTickFreq(float n, float pos);
+  virtual void SetPageSize(int pageSize);
+  virtual int GetPageSize() const;
+  virtual void ClearSel() ;
+  virtual void ClearTicks() ;
+  virtual void SetLineSize(int lineSize);
+  virtual int GetLineSize() const;
+  virtual void FSetLineSize(float lineSize);
+  virtual void FSetPageSize(float pageSize);
+  virtual float FGetLineSize() const;
+  virtual float FGetPageSize() const;
+  
+  virtual void SetTick(int tickPos) ;
 
-  inline int GetMin() const { return m_rangeMin; }
-  inline int GetMax() const { return m_rangeMax; }
 
-  // For trackbars only
-  void SetTickFreq(int n, int pos);
-  inline int GetTickFreq() const { return m_tickFreq; }
-  void SetPageSize(int pageSize);
-  int GetPageSize() const ;
-  void ClearSel() ;
-  void ClearTicks() ;
-  void SetLineSize(int lineSize);
-  int GetLineSize() const ;
-  int GetSelEnd() const ;
-  int GetSelStart() const ;
-  void SetSelection(int minPos, int maxPos);
-  void SetThumbLength(int len) ;
-  int GetThumbLength() const ;
-  void SetTick(int tickPos) ;
-
- 
-     // set min/max size of the slider
-     virtual void SetSizeHints( int minW, int minH,
+  // set min/max size of the slider
+  virtual void SetSizeHints( int minW, int minH,
                                 int maxW = -1, int maxH = -1,
                                 int incW = -1, int incH = -1 );
- 
-   protected:
-     virtual wxSize DoGetBestSize() const;
-     virtual void   DoSetSize(int x, int y, int w, int h, int sizeFlags);
-     virtual void   DoMoveWindow(int x, int y, int w, int h);
+
+private:
+  int floatconv(float f) const;
+  float floatconv_inv(int i) const;
+
+protected:
+  virtual wxSize DoGetBestSize() const;
+  virtual void   DoSetSize(int x, int y, int w, int h, int sizeFlags);
+  virtual void   DoMoveWindow(int x, int y, int w, int h);
  
   void Command(wxCommandEvent& event);
-    void                     MacHandleControlClick( WXWidget control , wxInt16 controlpart ) ;
-    virtual void            MacUpdateDimensions() ;
+  void MacHandleControlClick(WXWidget control, wxInt16 controlpart);
+  virtual void MacUpdateDimensions();
 
-     wxStaticText*    m_macMinimumStatic ;
-     wxStaticText*    m_macMaximumStatic ;
-     wxStaticText*    m_macValueStatic ;
-
-  int           m_rangeMin;
-  int           m_rangeMax;
-  int           m_pageSize;
-  int           m_lineSize;
-  int           m_tickFreq;
+  wxStaticText* m_macMinimumStatic;
+  wxStaticText* m_macMaximumStatic;
+  wxStaticText* m_macValueStatic;
+
+  float m_rangeMin;
+  float m_rangeMax;
+  float m_pageSize;
+  float m_lineSize;
+  float m_tickFreq;
+  
 private :
-DECLARE_EVENT_TABLE()
+  DECLARE_EVENT_TABLE()
 };
 
 #endif
Index: samples/widgets/slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/widgets/slider.cpp,v
retrieving revision 1.13
diff -u -a -r1.13 slider.cpp
--- samples/widgets/slider.cpp	2003/03/23 15:12:40	1.13
+++ samples/widgets/slider.cpp	2003/03/25 20:29:33
@@ -17,6 +17,7 @@
 // headers
 // ----------------------------------------------------------------------------
 
+
 // for compilers that support precompilation, includes "wx/wx.h".
 #include "wx/wxprec.h"
 
@@ -65,9 +66,11 @@
     SliderPage_MaxText,
     SliderPage_TickFreqText,
     SliderPage_ThumbLenText,
+    SliderPage_PrecisionText,
     SliderPage_RadioSides,
     SliderPage_BothSides,
-    SliderPage_Slider
+    SliderPage_Slider,
+    SliderPage_SetPrecision
 };
 
 // sides radiobox values
@@ -97,6 +100,7 @@
     void OnButtonSetMinAndMax(wxCommandEvent& event);
     void OnButtonSetTickFreq(wxCommandEvent& event);
     void OnButtonSetThumbLen(wxCommandEvent& event);
+    void OnButtonSetPrecision(wxCommandEvent& event);
 
     void OnCheckOrRadioBox(wxCommandEvent& event);
 
@@ -152,7 +156,8 @@
                *m_textMin,
                *m_textMax,
                *m_textTickFreq,
-               *m_textThumbLen;
+               *m_textThumbLen,
+               *m_textPrecision;
 
 private:
     DECLARE_EVENT_TABLE()
@@ -169,6 +174,7 @@
     EVT_BUTTON(SliderPage_SetMinAndMax, SliderWidgetsPage::OnButtonSetMinAndMax)
     EVT_BUTTON(SliderPage_SetTickFreq, SliderWidgetsPage::OnButtonSetTickFreq)
     EVT_BUTTON(SliderPage_SetThumbLen, SliderWidgetsPage::OnButtonSetThumbLen)
+    EVT_BUTTON(SliderPage_SetPrecision, SliderWidgetsPage::OnButtonSetPrecision)
 
     EVT_UPDATE_UI(SliderPage_SetValue, SliderWidgetsPage::OnUpdateUIValueButton)
     EVT_UPDATE_UI(SliderPage_SetMinAndMax, SliderWidgetsPage::OnUpdateUIMinMaxButton)
@@ -241,6 +247,7 @@
     m_chkBothSides->SetToolTip( _T("\"Both sides\" is only supported \nin Win95 and Universal") );
 #endif // wxUSE_TOOLTIPS
 
+
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
     wxButton *btn = new wxButton(this, SliderPage_Reset, _T("&Reset"));
@@ -287,12 +294,20 @@
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetThumbLen,
-                                            _T("Thumb &lenght"),
+                                            _T("Thumb &length"),
                                             SliderPage_ThumbLenText,
                                             &m_textThumbLen);
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
+    sizerRow = CreateSizerWithTextAndButton(SliderPage_SetPrecision,
+                                            _T("Float &precision"),
+                                            SliderPage_PrecisionText,
+                                            &m_textPrecision);
+    m_textPrecision->SetValue(_T("0"));
+
+    sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
+
     // right pane
     wxSizer *sizerRight = new wxBoxSizer(wxHORIZONTAL);
     sizerRight->SetMinSize(150, 40);
@@ -327,7 +342,6 @@
     m_chkTicks->SetValue(TRUE);
     m_chkLabels->SetValue(TRUE);
     m_chkBothSides->SetValue(FALSE);
-
     m_radioSides->SetSelection(StaticSides_Top);
 }
 
@@ -499,6 +513,17 @@
     m_slider->SetValue(val);
 }
 
+void SliderWidgetsPage::OnButtonSetPrecision(wxCommandEvent& WXUNUSED(event))
+{
+    long val;
+    if ( !m_textPrecision->GetValue().ToLong(&val) || val < 0 || val > m_slider->PrecisionMaximum() )
+    {
+        wxLogWarning(_T("Invalid precision: %s (must be > 0 and < %d."), m_textValue->GetValue().c_str(), m_slider->PrecisionMaximum());
+        return;
+    }
+    m_slider->FSetPrecision((short)val);
+}
+
 void SliderWidgetsPage::OnUpdateUIValueButton(wxUpdateUIEvent& event)
 {
     long val;
@@ -596,9 +621,10 @@
 
     static int s_numSliderEvents = 0;
 
-    wxLogMessage(wxT("Slider event #%d: %s (pos = %d)"),
+    wxLogMessage(wxT("Slider event #%d: %s (pos = %d). Slider value=%g"),
                  s_numSliderEvents++,
                  eventNames[index],
-                 event.GetPosition());
+                 event.GetPosition(),
+                 m_slider->FGetValue());
 }
 
Index: src/gtk/slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/gtk/slider.cpp,v
retrieving revision 1.47
diff -u -a -r1.47 slider.cpp
--- src/gtk/slider.cpp	2002/12/04 14:07:58	1.47
+++ src/gtk/slider.cpp	2003/03/25 20:29:34
@@ -34,8 +34,6 @@
 
 extern bool g_blockEventsOnDrag;
 
-static const float sensitivity = 0.02;
-
 //-----------------------------------------------------------------------------
 // "value_changed"
 //-----------------------------------------------------------------------------
@@ -50,14 +48,13 @@
     if (g_blockEventsOnDrag) return;
 
     float diff = adjust->value - win->m_oldPos;
-    if (fabs(diff) < sensitivity) return;
 
     win->m_oldPos = adjust->value;
 
     wxEventType command = GtkScrollTypeToWx(GET_SCROLL_TYPE(win->m_widget));
 
     double dvalue = adjust->value;
-    int value = (int)(dvalue < 0 ? dvalue - 0.5 : dvalue + 0.5);
+    int value = (dvalue < 0)?(dvalue - 0.5):(dvalue + 0.5);
 
     int orient = win->GetWindowStyleFlag() & wxSL_VERTICAL ? wxVERTICAL
                                                            : wxHORIZONTAL;
@@ -83,6 +80,16 @@
         const wxPoint& pos, const wxSize& size,
         long style, const wxValidator& validator, const wxString& name )
 {
+    m_precision = 0;
+    return Create(parent, id, (float)value, (float)minValue, (float)maxValue, pos, size, style, validator, name);
+}
+
+bool wxSlider::Create(wxWindow *parent, wxWindowID id,
+        float value, float minValue, float maxValue,
+        const wxPoint& pos, const wxSize& size,
+        long style, const wxValidator& validator, const wxString& name )
+{
+
     m_acceptsFocus = TRUE;
     m_needParent = TRUE;
 
@@ -103,7 +110,8 @@
     if (style & wxSL_LABELS)
     {
         gtk_scale_set_draw_value( GTK_SCALE( m_widget ), TRUE );
-        gtk_scale_set_digits( GTK_SCALE( m_widget ), 0 );
+        gtk_scale_set_digits( GTK_SCALE( m_widget ), m_precision );
+        // TODO: display max/min labels
 
         /* labels need more space and too small window will
            cause junk to appear on the dialog */
@@ -146,44 +154,59 @@
 
     return TRUE;
 }
+
 
-int wxSlider::GetValue() const
+int wxSlider::roundint(float val) const 
 {
     // we want to round to the nearest integer, i.e. 0.9 is rounded to 1 and
     // -0.9 is rounded to -1
-    double val = m_adjust->value;
-    return (int)(val < 0 ? val - 0.5 : val + 0.5);
+    if(val < 0)
+        return (int)(val - 0.5);
+    else 
+        return (int)(val + 0.5);
+}
+
+void wxSlider::FSetPrecision( short precision) 
+{
+    m_precision = precision;
+    m_adjust->step_increment = 1.0 / pow(10, m_precision);
+    gtk_scale_set_digits( GTK_SCALE( m_widget ), m_precision );
 }
 
+int wxSlider::GetValue()  const
+{
+    return roundint(FGetValue());
+}
+
+float wxSlider::FGetValue() const 
+{
+    return m_adjust->value;
+}
+
+
 void wxSlider::SetValue( int value )
 {
-    float fpos = (float)value;
-    m_oldPos = fpos;
-    if (fabs(fpos-m_adjust->value) < 0.2) return;
+    FSetValue( (float)value );
+}
 
+void wxSlider::FSetValue(float fpos) 
+{
     m_adjust->value = fpos;
-
     GtkDisableEvents();
-    
     gtk_signal_emit_by_name( GTK_OBJECT(m_adjust), "value_changed" );
-    
     GtkEnableEvents();
 }
 
 void wxSlider::SetRange( int minValue, int maxValue )
 {
-    float fmin = (float)minValue;
-    float fmax = (float)maxValue;
-
-    if ((fabs(fmin-m_adjust->lower) < 0.2) &&
-        (fabs(fmax-m_adjust->upper) < 0.2))
-    {
-        return;
-    }
+    FSetRange((float)minValue, (float)maxValue);
+}
 
+void wxSlider::FSetRange(float fmin, float fmax) 
+{
     m_adjust->lower = fmin;
     m_adjust->upper = fmax;
-    m_adjust->step_increment = 1.0;
+    m_adjust->step_increment = 1.0 / pow(10, m_precision);
     m_adjust->page_increment = ceil((fmax-fmin) / 10.0);
 
     GtkDisableEvents();
@@ -198,16 +221,31 @@
     return (int)ceil(m_adjust->lower);
 }
 
+float wxSlider::FGetMin() const 
+{
+    return m_adjust->lower;
+}
+
 int wxSlider::GetMax() const
 {
     return (int)ceil(m_adjust->upper);
 }
 
+float wxSlider::FGetMax() const 
+{
+    return m_adjust->upper;
+}
+
+
 void wxSlider::SetPageSize( int pageSize )
 {
-    float fpage = (float)pageSize;
+    SetPageSize(roundint(pageSize));
+}
+
+void wxSlider::FSetPageSize(float fpage)
+{
 
-    if (fabs(fpage-m_adjust->page_increment) < 0.2) return;
+    //if (fabs(fpage-m_adjust->page_increment) < 0.2) return;
 
     m_adjust->page_increment = fpage;
 
@@ -223,6 +261,11 @@
     return (int)ceil(m_adjust->page_increment);
 }
 
+float wxSlider::FGetPageSize() const
+{
+    return m_adjust->page_increment;
+}
+
 void wxSlider::SetThumbLength( int len )
 {
     float flen = (float)len;
@@ -247,9 +290,18 @@
 {
 }
 
+void wxSlider::FSetLineSize(float WXUNUSED(lineSize) ) 
+{
+}
+
 int wxSlider::GetLineSize() const
 {
     return 0;
+}
+
+float wxSlider::FGetLineSize() const
+{
+    return 0.0;
 }
 
 bool wxSlider::IsOwnGtkWindow( GdkWindow *window )
Index: src/mac/slider.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/slider.cpp,v
retrieving revision 1.16
diff -u -a -r1.16 slider.cpp
--- src/mac/slider.cpp	2003/02/28 23:48:12	1.16
+++ src/mac/slider.cpp	2003/03/25 20:29:36
@@ -13,6 +13,8 @@
 #pragma implementation "slider.h"
 #endif
 
+#include <math.h>	// for pow()
+
 #include "wx/slider.h"
 #include "wx/mac/uma.h"
 
@@ -30,7 +32,9 @@
  
 // Distance between slider and text
 #define wxSLIDER_BORDERTEXT 5
- 
+
+// Convert from a float to an integer that can be used by the Carbon control, etc.
+#define FLOATCONV
 /* NB!  The default orientation for a slider is horizontal however if the user specifies
  * some slider styles but dosen't specify the orientation we have to assume he wants a
  * horizontal one.  Therefore in this file when testing for the sliders orientation
@@ -39,19 +43,34 @@
  */
 
  // Slider
- wxSlider::wxSlider()
+wxSlider::wxSlider()
 {
     m_pageSize = 1;
     m_lineSize = 1;
     m_rangeMax = 0;
     m_rangeMin = 0;
     m_tickFreq = 0;
+    m_precision = wxSL_DEFAULT_FLOAT_PRECISION;
 }
 
 extern ControlActionUPP wxMacLiveScrollbarActionUPP ;
 
+// float
+bool wxSlider::Create(wxWindow *parent, wxWindowID id,
+            int value, int minValue, int maxValue,
+            const wxPoint& pos = wxDefaultPosition,
+            const wxSize& size = wxDefaultSize,
+            long style = wxSL_HORIZONTAL,
+            const wxValidator& validator = wxDefaultValidator,
+            const wxString& name = wxSliderNameStr)
+{
+    m_precision = 0;
+    return Create(parent, id, (float)(value), (float)(minValue), (float)(maxValue), pos, size, style, validator, name);
+}
+
+// int
 bool wxSlider::Create(wxWindow *parent, wxWindowID id,
-                      int value, int minValue, int maxValue,
+                      float value, float minValue, float maxValue,
                       const wxPoint& pos,
                       const wxSize& size, long style,
                       const wxValidator& validator,
@@ -65,7 +84,6 @@
     m_macMaximumStatic = NULL ;
     m_macValueStatic = NULL ;
     
-    
     m_lineSize = 1;
     m_tickFreq = 0;
     
@@ -84,7 +102,7 @@
     
     
     m_macControl = ::NewControl( MAC_WXHWND(parent->MacGetRootWindow()), &bounds, title, false,
-        value, minValue, maxValue, procID, (long) this);
+        floatconv(value), floatconv(minValue), floatconv(maxValue), procID, (long) this);
     
     wxASSERT_MSG( (ControlHandle) m_macControl != NULL , "No valid mac control" ) ;
     
@@ -125,111 +143,174 @@
 }
 
 int wxSlider::GetValue() const
+{
+    return (int)(FGetValue()) ;
+}
+
+float wxSlider::FGetValue() const 
 {
-    return GetControl32BitValue( (ControlHandle) m_macControl) ;
+    return floatconv_inv(GetControl32BitValue( (ControlHandle) m_macControl ) );
 }
 
+
 void wxSlider::SetValue(int value)
+{
+    FSetValue((float)value);
+}
+
+void wxSlider::FSetValue(float value) 
 {
-    wxString valuestring ;
-    valuestring.Printf( "%d" , value ) ;    
+    wxString valuestring;
+    valuestring.Printf( "%.*f", m_precision, value );    
     if ( m_macValueStatic )
-        m_macValueStatic->SetLabel( valuestring ) ;
-    SetControl32BitValue( (ControlHandle) m_macControl , value ) ;
+        m_macValueStatic->SetLabel( valuestring );
+    SetControl32BitValue( (ControlHandle)m_macControl, floatconv(value) );
+}
+
+void wxSlider::FSetPrecision(short precision) 
+{
+    // Change precision variable, and also reset labels and control value:
+    float val = FGetValue();
+    float max = FGetMax();
+    float min = FGetMin();
+    m_precision = precision;
+    FSetValue(val);
+    FSetRange(min, max);
+}
+
+float wxSlider::FValueMaximum() const 
+{   
+    // 429... is the max value for 32 bits (unsigned)
+    return (4294967295 / pow (10.0, m_precision));
 }
 
 void wxSlider::SetRange(int minValue, int maxValue)
 {
+    FSetRange((float)minValue, (float)maxValue);
+}
+
+void wxSlider::FSetRange(float minValue, float MaxValue)
+{
     wxString value;
-    
-    m_rangeMin = minValue;
-    m_rangeMax = maxValue;
     
-    SetControl32BitMinimum( (ControlHandle) m_macControl, m_rangeMin);
-    SetControl32BitMaximum( (ControlHandle) m_macControl, m_rangeMax);
+    SetControl32BitMinimum( (ControlHandle) m_macControl, floatconv(m_rangeMin));
+    SetControl32BitMaximum( (ControlHandle) m_macControl, floatconv(m_rangeMax));
     
     if(m_macMinimumStatic) {
-        value.Printf("%d", m_rangeMin);
+        value.Printf("%.*f", m_precision, m_rangeMin);
         m_macMinimumStatic->SetLabel(value);
     }
     if(m_macMaximumStatic) {
-        value.Printf("%d", m_rangeMax);
+        value.Printf("%.*f", m_precision, m_rangeMax);
         m_macMaximumStatic->SetLabel(value);
     }
-    SetValue(m_rangeMin);
+    if(FGetValue() < m_rangeMin)
+        FSetValue(m_rangeMin);
+    else if(FGetValue() > m_rangeMax)
+        FSetValue(m_rangeMax);
+}
+
+int wxSlider::GetMin() const 
+{
+    return (int)ceil(m_rangeMin);
+}
+
+int wxSlider::GetMax() const 
+{
+    return (int)floor(m_rangeMax);
+}
+
+
+float wxSlider::FGetMin() const 
+{
+    return (int)m_rangeMin;
 }
 
+float wxSlider::FGetMax() const 
+{
+    return m_rangeMin;
+}
+
 // For trackbars only
 void wxSlider::SetTickFreq(int n, int pos)
 {
-    // TODO
+    // TODO!!
+    m_tickFreq = floatconv(n);
+}
+
+void wxSlider::SetTick(int n) 
+{
+}
+
+void wxSlider::FSetTickFreq(float n, float pos)
+{
+    // TODO!!
     m_tickFreq = n;
 }
 
-void wxSlider::SetPageSize(int pageSize)
+int wxSlider::GetTickFreq() const 
 {
-    // TODO
-    m_pageSize = pageSize;
+    return (int)floatconv_inv(m_tickFreq);
 }
 
-int wxSlider::GetPageSize() const
+float wxSlider::FGetTickFreq() const 
 {
-    return m_pageSize;
+    return m_tickFreq;
 }
 
-void wxSlider::ClearSel()
+void wxSlider::SetPageSize(int pageSize)
 {
     // TODO
+    m_pageSize = pageSize;
 }
 
-void wxSlider::ClearTicks()
+int wxSlider::GetPageSize() const
 {
-    // TODO
+    return (int)m_pageSize;
 }
 
-void wxSlider::SetLineSize(int lineSize)
+void wxSlider::FSetLineSize(float lineSize) 
 {
-    m_lineSize = lineSize;
-    // TODO
 }
 
-int wxSlider::GetLineSize() const
+void wxSlider::FSetPageSize(float pageSize) 
 {
     // TODO
-    return 0;
 }
 
-int wxSlider::GetSelEnd() const
+float wxSlider::FGetLineSize() const 
 {
     // TODO
-    return 0;
+    return (float)m_lineSize;
 }
 
-int wxSlider::GetSelStart() const
+float wxSlider::FGetPageSize() const 
 {
     // TODO
-    return 0;
+    return (float)m_pageSize;
 }
 
-void wxSlider::SetSelection(int minPos, int maxPos)
+
+void wxSlider::ClearSel()
 {
     // TODO
 }
 
-void wxSlider::SetThumbLength(int len)
+void wxSlider::ClearTicks()
 {
     // TODO
 }
 
-int wxSlider::GetThumbLength() const
+void wxSlider::SetLineSize(int lineSize)
 {
+    m_lineSize = lineSize;
     // TODO
-    return 0;
 }
 
-void wxSlider::SetTick(int tickPos)
+int wxSlider::GetLineSize() const
 {
     // TODO
+    return 0;
 }
 
 void wxSlider::Command (wxCommandEvent & event)
@@ -238,19 +319,22 @@
     ProcessCommand (event);
 }
 
+// Control set with a click, or dragged:
 void wxSlider::MacHandleControlClick( WXWidget control , wxInt16 controlpart ) 
 {
-    SInt16 value = ::GetControl32BitValue( (ControlHandle) m_macControl ) ;
-    
-    SetValue( value ) ;        
+    float value = FGetValue();
+
     
+    // This will cause the labels to be updated.
+    FSetValue( value ) ;        
+
     wxScrollEvent event(wxEVT_SCROLL_THUMBTRACK, m_windowId);
-    event.SetPosition(value);
+    event.SetPosition((int)value);
     event.SetEventObject( this );
     GetEventHandler()->ProcessEvent(event);
     
     wxCommandEvent cevent( wxEVT_COMMAND_SLIDER_UPDATED, m_windowId );
-    cevent.SetInt( value );
+    cevent.SetInt((int)value);
     cevent.SetEventObject( this );
     
     GetEventHandler()->ProcessEvent( cevent );
@@ -283,9 +367,9 @@
         int ht, wd;
         
         // Get maximum text label width and height
-        text.Printf("%d", m_rangeMin);
+        text.Printf("%.*f", m_precision, m_rangeMin);
         GetTextExtent(text, &textwidth, &textheight);
-        text.Printf("%d", m_rangeMax);
+        text.Printf("%.*f", m_precision, m_rangeMax);
         GetTextExtent(text, &wd, &ht);
         if(ht > textheight) {
             textheight = ht;
@@ -356,9 +440,9 @@
         int ht;
         
         // Get maximum text label width and height
-        text.Printf("%d", m_rangeMin);
+        text.Printf("%.*f", m_precision, m_rangeMin);
         GetTextExtent(text, &minValWidth, &textheight);
-        text.Printf("%d", m_rangeMax);
+        text.Printf("%.*f", m_precision, m_rangeMax);
         GetTextExtent(text, &maxValWidth, &ht);
         if(ht > textheight) {
             textheight = ht;
@@ -420,4 +504,14 @@
 void wxSlider::DoMoveWindow(int x, int y, int width, int height)
 {
     wxControl::DoMoveWindow(x,y,width,height) ;
+}
+
+int wxSlider::floatconv(float x) const
+{
+    return (int)(x * pow (10.0, m_precision));
+}
+
+float wxSlider::floatconv_inv(int x) const
+{
+    return (x / pow (10.0, m_precision));
 }

 	  	 

Index: include/wx/dataobj.h
===================================================================
--- include/wx/dataobj.h	(revision 63374)
+++ include/wx/dataobj.h	(working copy)
@@ -279,6 +279,10 @@
     // out what kind of data object was recieved.
     wxDataFormat GetReceivedFormat() const;
 
+    // Returns the pointer to the object which supports this format or NULL.
+    // The returned pointer is owned by wxDataObjectComposite and must therefore not be destroyed by the caller.
+    wxDataObjectSimple *GetObject(const wxDataFormat& format, wxDataObjectBase::Direction dir=Get) const;
+
     // implement base class pure virtuals
     // ----------------------------------
     virtual wxDataFormat GetPreferredFormat(wxDataObjectBase::Direction dir = Get) const;
@@ -295,10 +299,6 @@
     virtual size_t GetBufferOffset( const wxDataFormat& format );
 #endif
 
-protected:
-    // returns the pointer to the object which supports this format or NULL
-    wxDataObjectSimple *GetObject(const wxDataFormat& format, wxDataObjectBase::Direction dir=Get) const;
-
 private:
     // the list of all (simple) data objects whose formats we support
     wxSimpleDataObjectList m_dataObjects;
Index: interface/wx/dataobj.h
===================================================================
--- interface/wx/dataobj.h	(revision 63374)
+++ interface/wx/dataobj.h	(working copy)
@@ -413,7 +413,49 @@
     See wxDataObject documentation for the reasons why you might prefer to use
     wxDataObject directly instead of wxDataObjectComposite for efficiency
     reasons.
+    
+    The following examples shows how wxDataObjectComposite can be used:
+    
+    @code
+    MyDropTarget::MyDropTarget(void)
+    {
+      wxDataObjectComposite* supportedDataObjects(new wxDataObjectComposite());
+      supportedDataObjects->Add(new wxBitmapDataObject(),true);
+      supportedDataObjects->Add(new wxFileDataObject());
+      this->SetDataObject(supportedDataObjects);
+    }
 
+    wxDragResult MyDropTarget::OnData(wxCoord x, wxCoord y, wxDragResult defaultDragResult)
+    {
+      wxDragResult dragResult(wxDragNone);
+      if (this->wxDropTarget::OnData(x,y,defaultDragResult) == defaultDragResult)
+      {
+        wxDataObjectComposite* dataObjects = wxDynamicCast(this->GetDataObject(),wxDataObjectComposite);
+        
+        if (dataObjects != NULL)
+          if (dataObjects->GetReceivedFormat().GetType() == wxDF_BITMAP)
+          {
+            wxBitmapDataObject* bitmapDataObjectPtr = wxDynamicCast(dataObjects->GetObject(dataObjects->GetReceivedFormat()),wxBitmapDataObject);
+            if ((bitmapDataObjectPtr != NULL) && bitmapDataObjectPtr->GetBitmap().IsOk())
+            {
+              ...
+              dragResult = defaultDragResult;
+            }
+          }
+          else if (dataObjects->GetReceivedFormat().GetType() == wxDF_FILENAME)
+          {
+            wxFileDataObject* fileDataObjectPtr = wxDynamicCast(dataObjects->GetObject(dataObjects->GetReceivedFormat()),wxFileDataObject);
+            if ((fileDataObjectPtr != NULL) && (fileDataObjectPtr->GetFilenames().GetCount() > 0))
+            {
+              ...
+              dragResult = defaultDragResult;
+            }
+          }
+      }
+      return dragResult;
+    }
+    @endcode
+
     @library{wxcore}
     @category{dnd}
 
@@ -441,6 +483,12 @@
         out what kind of data object was recieved.
     */
     wxDataFormat GetReceivedFormat() const;
+
+    /**
+        Returns the pointer to the object which supports the passed format for the specified direction or NULL
+        if such an object does not exist.
+    */
+    wxDataObjectSimple *GetObject(const wxDataFormat& format, wxDataObjectBase::Direction dir=Get) const;
 };
 
 

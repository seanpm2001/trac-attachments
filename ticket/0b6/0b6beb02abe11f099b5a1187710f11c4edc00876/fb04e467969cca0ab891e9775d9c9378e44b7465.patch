diff -r -u -p a/samples/splitter/splitter.cpp b/samples/splitter/splitter.cpp
--- a/samples/splitter/splitter.cpp	2020-07-20 09:53:18.000000000 +0200
+++ b/samples/splitter/splitter.cpp	2020-07-20 13:30:30.341428000 +0200
@@ -35,6 +35,10 @@
     #include "wx/textdlg.h"       // for wxGetTextFromUser
 #endif
 
+#include "wx/dcclient.h"
+#include "wx/sizer.h"
+#include "wx/notebook.h"
+#include "wx/listctrl.h"
 #include "wx/splitter.h"
 #include "wx/dcmirror.h"
 
@@ -161,6 +165,53 @@ private:
     wxDECLARE_NO_COPY_CLASS(MyCanvas);
 };
 
+class MyTestFrame : public wxFrame
+{
+public:
+    MyTestFrame();
+
+private:
+    void OnQuit(wxCommandEvent& event);
+
+    wxDECLARE_EVENT_TABLE();
+    wxDECLARE_NO_COPY_CLASS(MyTestFrame);
+};
+
+class MyCanvas1 : public wxPanel
+{
+public:
+    MyCanvas1(wxWindow *parent);
+
+private:
+    void OnWindowCreate(wxWindowCreateEvent& event);
+    void OnPaint(wxPaintEvent& event);
+    void OnEraseBackground(wxEraseEvent& event);
+
+    wxDECLARE_EVENT_TABLE();
+
+private:
+    bool m_OnWindowCreateWasCalled;
+};
+
+class MyCanvas2 : public wxPanel
+{
+public:
+    MyCanvas2(wxWindow *parent);
+
+private:
+    void CreateControls();
+};
+
+class MyNotebookPage : public wxPanel
+{
+public:
+    MyNotebookPage(wxWindow *parent);
+
+private:
+    void CreateControls();
+};
+
+
 // ============================================================================
 // implementation
 // ============================================================================
@@ -177,7 +228,7 @@ bool MyApp::OnInit()
         return false;
 
     // create and show the main frame
-    MyFrame* frame = new MyFrame;
+    MyTestFrame* frame = new MyTestFrame();
 
     frame->Show(true);
 
@@ -578,3 +629,134 @@ void MyCanvas::OnDraw(wxDC& dcOrig)
     dc.DrawRectangle(120, 120, 100, 80);
 }
 
+// ----------------------------------------------------------------------------
+// MyTestFrame
+// ----------------------------------------------------------------------------
+
+wxBEGIN_EVENT_TABLE(MyTestFrame, wxFrame)
+    EVT_MENU(SPLIT_QUIT, MyTestFrame::OnQuit)
+wxEND_EVENT_TABLE()
+
+MyTestFrame::MyTestFrame()
+{
+    wxFrame::Create( NULL, wxID_ANY, "wxSplitterWindow sample", wxDefaultPosition, wxSize(400, 250) );
+    //Maximize( true );
+
+    SetIcon(wxICON(sample));
+
+    // Make a menubar
+    wxMenu *splitMenu = new wxMenu;
+    splitMenu->Append(SPLIT_QUIT, "E&xit\tAlt-X", "Exit");
+
+    wxMenuBar *menuBar = new wxMenuBar;
+    menuBar->Append(splitMenu, "&Splitter");
+
+    SetMenuBar(menuBar);
+
+    // Make: wxNotebook / wxPanel / wxSplitterWindow / wxPanel / wxListCtrl
+    wxNotebook* notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxCLIP_CHILDREN);
+
+    MyNotebookPage* page1 = new MyNotebookPage( notebook );
+    notebook->AddPage( page1, "Page 1");
+
+    MyNotebookPage* page2 = new MyNotebookPage( notebook );
+    notebook->AddPage( page2, "Page 2");
+}
+
+void MyTestFrame::OnQuit(wxCommandEvent& WXUNUSED(event) )
+{
+    Close(true);
+}
+
+// ----------------------------------------------------------------------------
+// MyCanvas1
+// ----------------------------------------------------------------------------
+
+wxBEGIN_EVENT_TABLE( MyCanvas1, wxPanel )
+    EVT_WINDOW_CREATE(MyCanvas1::OnWindowCreate)
+    EVT_PAINT(MyCanvas1::OnPaint)
+    EVT_ERASE_BACKGROUND(MyCanvas1::OnEraseBackground)
+wxEND_EVENT_TABLE()
+
+MyCanvas1::MyCanvas1(wxWindow *parent)
+    : wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxWANTS_CHARS|wxFULL_REPAINT_ON_RESIZE)
+{
+    m_OnWindowCreateWasCalled = false;
+}
+
+void MyCanvas1::OnWindowCreate(wxWindowCreateEvent& WXUNUSED(event))
+{
+    m_OnWindowCreateWasCalled = true;
+}
+
+void MyCanvas1::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    wxPaintDC dc(this);
+
+    wxColour color = m_OnWindowCreateWasCalled ? *wxBLUE : *wxRED;
+    wxString text  = m_OnWindowCreateWasCalled ? "OnWindowCreate was called." : "OnWindowCreate was NOT called.";
+
+    dc.SetTextForeground(color);
+    dc.DrawText(text, 50, 25);
+}
+
+void MyCanvas1::OnEraseBackground(wxEraseEvent& event)
+{
+    wxDC* dc = event.GetDC();
+    if (dc)
+    {
+        dc->Clear();
+    }
+}
+
+// ----------------------------------------------------------------------------
+// MyCanvas2
+// ----------------------------------------------------------------------------
+
+MyCanvas2::MyCanvas2(wxWindow *parent)
+    : wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL)
+{
+    CreateControls();
+}
+
+void MyCanvas2::CreateControls()
+{
+    wxBoxSizer* topSizer = new wxBoxSizer(wxHORIZONTAL);
+    this->SetSizer(topSizer);
+
+    wxListView* listView = new wxListView(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT);
+    listView->AppendColumn( _("Column 1") , wxLIST_FORMAT_LEFT, 100 );
+    listView->AppendColumn( _("Column 2") , wxLIST_FORMAT_LEFT, 80 );
+    listView->AppendColumn( _("Column 3") , wxLIST_FORMAT_LEFT, 120 );
+    topSizer->Add(listView, 1, wxGROW, 0);
+}
+
+// ----------------------------------------------------------------------------
+// MyNotebookPage
+// ----------------------------------------------------------------------------
+
+MyNotebookPage::MyNotebookPage(wxWindow *parent)
+    : wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxWANTS_CHARS|wxTAB_TRAVERSAL|wxCLIP_CHILDREN)
+{
+    CreateControls();
+}
+
+void MyNotebookPage::CreateControls()
+{
+    wxBoxSizer* topSizer = new wxBoxSizer(wxHORIZONTAL);
+    this->SetSizer(topSizer);
+
+    wxSplitterWindow* splitterWnd = new wxSplitterWindow( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3DBORDER|wxSP_3DSASH|wxNO_BORDER|wxCLIP_CHILDREN );
+    splitterWnd->SetMinimumPaneSize( 20 );
+    splitterWnd->SetSashGravity(1);
+
+    MyCanvas1* canvas1 = new MyCanvas1( splitterWnd );
+
+    MyCanvas2* canvas2 = new MyCanvas2( splitterWnd );
+
+    splitterWnd->SplitHorizontally( canvas1, canvas2, -85 );
+
+    topSizer->Add(splitterWnd, 1, wxGROW, 0);
+
+    topSizer->Fit(this);
+}

diff --git a/include/wx/gtk/textentry.h b/include/wx/gtk/textentry.h
index 9f573d0..674eab2 100644
--- a/include/wx/gtk/textentry.h
+++ b/include/wx/gtk/textentry.h
@@ -14,6 +14,8 @@ typedef struct _GdkEventKey GdkEventKey;
 typedef struct _GtkEditable GtkEditable;
 typedef struct _GtkEntry GtkEntry;
 
+class wxTextAutoCompleteData; // private class used only by wxTextEntry itself
+
 // ----------------------------------------------------------------------------
 // wxTextEntry: roughly corresponds to GtkEditable
 // ----------------------------------------------------------------------------
@@ -21,7 +23,8 @@ typedef struct _GtkEntry GtkEntry;
 class WXDLLIMPEXP_CORE wxTextEntry : public wxTextEntryBase
 {
 public:
-    wxTextEntry() { m_isUpperCase = false; }
+    wxTextEntry();
+    virtual ~wxTextEntry();
 
     // implement wxTextEntryBase pure virtual methods
     virtual void WriteText(const wxString& text) wxOVERRIDE;
@@ -76,6 +79,7 @@ protected:
     virtual wxPoint DoGetMargins() const wxOVERRIDE;
 
     virtual bool DoAutoCompleteStrings(const wxArrayString& choices) wxOVERRIDE;
+    virtual bool DoAutoCompleteCustom(wxTextCompleter *completer) wxOVERRIDE;
 
     // Override the base class method to use GtkEntry IM context.
     virtual int GTKIMFilterKeypress(GdkEventKey* event) const;
@@ -90,6 +94,15 @@ private:
     // implement this to return the associated GtkEntry
     virtual GtkEntry *GetEntry() const = 0;
 
+    wxTextAutoCompleteData *GetOrCreateCompleter();
+
+    // Various auto-completion-related stuff, only used if any of AutoComplete()
+    // methods are called. Use the function above to access it.
+    wxTextAutoCompleteData *m_autoCompleteData;
+
+    // It needs to call our GetEditable() method.
+    friend class wxTextAutoCompleteData;
+
     bool m_isUpperCase;
 };
 
diff --git a/samples/widgets/widgets.cpp b/samples/widgets/widgets.cpp
index 9cc7de5..fea45ec 100644
--- a/samples/widgets/widgets.cpp
+++ b/samples/widgets/widgets.cpp
@@ -46,6 +46,7 @@
 #include "wx/sizer.h"
 #include "wx/colordlg.h"
 #include "wx/fontdlg.h"
+#include "wx/numdlg.h"
 #include "wx/textdlg.h"
 #include "wx/imaglist.h"
 #include "wx/wupdlock.h"
@@ -108,6 +109,7 @@ enum
     TextEntry_AutoCompleteFilenames,
     TextEntry_AutoCompleteDirectories,
     TextEntry_AutoCompleteCustom,
+    TextEntry_AutoCompleteKeyLength,
 
     TextEntry_SetHint,
     TextEntry_End
@@ -188,6 +190,7 @@ protected:
     void OnAutoCompleteFilenames(wxCommandEvent& event);
     void OnAutoCompleteDirectories(wxCommandEvent& event);
     void OnAutoCompleteCustom(wxCommandEvent& event);
+    void OnAutoCompleteKeyLength(wxCommandEvent& event);
 
     void OnSetHint(wxCommandEvent& event);
 
@@ -218,6 +221,9 @@ private:
     // the book containing the test pages
     WidgetsBookCtrl *m_book;
 
+    //
+    int m_prefixMinLength;
+
     // any class wishing to process wxWidgets events must use this macro
     wxDECLARE_EVENT_TABLE();
 };
@@ -317,6 +323,7 @@ wxBEGIN_EVENT_TABLE(WidgetsFrame, wxFrame)
     EVT_MENU(TextEntry_AutoCompleteFilenames, WidgetsFrame::OnAutoCompleteFilenames)
     EVT_MENU(TextEntry_AutoCompleteDirectories, WidgetsFrame::OnAutoCompleteDirectories)
     EVT_MENU(TextEntry_AutoCompleteCustom,    WidgetsFrame::OnAutoCompleteCustom)
+    EVT_MENU(TextEntry_AutoCompleteKeyLength, WidgetsFrame::OnAutoCompleteKeyLength)
 
     EVT_MENU(TextEntry_SetHint, WidgetsFrame::OnSetHint)
 
@@ -386,6 +393,8 @@ WidgetsFrame::WidgetsFrame(const wxString& title)
 #endif // USE_LOG
     m_book = NULL;
 
+    m_prefixMinLength = 1;
+
 #if wxUSE_MENUS
     // create the menubar
     wxMenuBar *mbar = new wxMenuBar;
@@ -444,6 +453,8 @@ WidgetsFrame::WidgetsFrame(const wxString& title)
     menuTextEntry->AppendRadioItem(TextEntry_AutoCompleteCustom,
                                    wxT("&Custom auto-completion"));
     menuTextEntry->AppendSeparator();
+    menuTextEntry->Append(TextEntry_AutoCompleteKeyLength,
+                          wxT("&Minimum key length for auto-completion"));
     menuTextEntry->Append(TextEntry_SetHint, "Set help &hint");
 
     mbar->Append(menuTextEntry, wxT("&Text"));
@@ -1038,6 +1049,8 @@ void WidgetsFrame::OnAutoCompleteCustom(wxCommandEvent& WXUNUSED(event))
     class CustomTextCompleter : public wxTextCompleterSimple
     {
     public:
+        CustomTextCompleter( int length ) : m_minLength( length ) {}
+
         virtual void GetCompletions(const wxString& prefix, wxArrayString& res) wxOVERRIDE
         {
             // This is used for illustrative purposes only and shows how many
@@ -1066,7 +1079,10 @@ void WidgetsFrame::OnAutoCompleteCustom(wxCommandEvent& WXUNUSED(event))
 
             // Normally it doesn't make sense to complete empty control, there
             // are too many choices and listing them all wouldn't be helpful.
-            if ( prefix.empty() )
+            // Or if we know in advance that a prefix with one or two characters 
+            // would still results in too many choices too.
+            if ( prefix.empty() ||
+                 prefix.length() < static_cast<size_t>(m_minLength) )
                 return;
 
             // The only valid strings start with 3 digits so check for their
@@ -1117,9 +1133,11 @@ void WidgetsFrame::OnAutoCompleteCustom(wxCommandEvent& WXUNUSED(event))
                     res.push_back(prefix + c);
             }
         }
+
+        int m_minLength;
     };
 
-    if ( entry->AutoComplete(new CustomTextCompleter) )
+    if ( entry->AutoComplete( new CustomTextCompleter( m_prefixMinLength ) ) )
     {
         wxLogMessage("Enabled custom auto completer for \"NNN XX\" items "
                      "(where N is a digit and X is a letter).");
@@ -1130,6 +1148,22 @@ void WidgetsFrame::OnAutoCompleteCustom(wxCommandEvent& WXUNUSED(event))
     }
 }
 
+void WidgetsFrame::OnAutoCompleteKeyLength(wxCommandEvent& WXUNUSED(event))
+{
+    const wxString message = "The auto-completion is triggered if and only if\n"
+                             "the length of the search key (prefix) is at least [LENGTH].\n"
+                             "Hint: negative values disable auto-completion.";
+    const wxString prompt = "Enter the minimum key length:";
+    const wxString caption = "Minimum key length";
+
+    m_prefixMinLength = wxGetNumberFromUser(message, prompt, caption, 1, -1, 100, this);
+
+    wxCommandEvent theEvent(wxEVT_MENU, TextEntry_AutoCompleteCustom);
+    this->AddPendingEvent(theEvent);
+
+    wxLogMessage("The minimum key length for autocomplete is : %d.", m_prefixMinLength);
+}
+
 void WidgetsFrame::OnSetHint(wxCommandEvent& WXUNUSED(event))
 {
     wxTextEntryBase *entry = CurrentPage()->GetTextEntry();
diff --git a/src/gtk/textentry.cpp b/src/gtk/textentry.cpp
index 966d9b9..9359cd5 100644
--- a/src/gtk/textentry.cpp
+++ b/src/gtk/textentry.cpp
@@ -25,9 +25,11 @@
 #if wxUSE_TEXTCTRL || wxUSE_COMBOBOX
 
 #ifndef WX_PRECOMP
+    #include "wx/event.h"
     #include "wx/textentry.h"
-    #include "wx/window.h"
     #include "wx/textctrl.h"
+    #include "wx/textcompleter.h"
+    #include "wx/window.h"
 #endif //WX_PRECOMP
 
 #include <gtk/gtk.h>
@@ -193,11 +195,242 @@ wx_gtk_paste_clipboard_callback( GtkWidget *widget, wxWindow *win )
 
 } // extern "C"
 
+// This class gathers the all auto-complete-related stuff we use. It is
+// allocated on demand by wxTextEntry when AutoComplete() is called.
+class wxTextAutoCompleteData
+{
+public:
+    // The constructor associates us with the given text entry.
+    wxEXPLICIT wxTextAutoCompleteData(wxTextEntry *entry)
+        : m_entry(entry)
+    {
+        m_completer = NULL;
+
+        m_bDynamicCompleter = true;
+        m_bGenerateCompletion = m_entry->IsEmpty();
+
+        wxCHECK_RET(GTK_IS_ENTRY(GetGtkEntry()),
+            "auto completion doesn't work with this control");
+
+        if ( m_bDynamicCompleter )
+        {
+            wxWindow * const win = m_entry->GetEditableWindow();
+            win->Bind(wxEVT_TEXT, &wxTextAutoCompleteData::OnEntryChanged, this);
+        }
+    }
+
+    ~wxTextAutoCompleteData()
+    {
+        delete m_completer;
+    }
+
+    // Must be called after creating this object to verify if initializing it
+    // succeeded.
+    bool IsOk() const
+    {
+        return GTK_IS_ENTRY( GetGtkEntry() );
+    }
+
+    void ChangeStrings(const wxArrayString& strings)
+    {
+        wxDELETE( m_completer );
+
+        DoUpdateCompleterType(false);
+
+        EnableCompletion();
+
+        GtkListStore * const store = gtk_list_store_new (1, G_TYPE_STRING);
+        GtkTreeIter iter;
+
+        for ( wxArrayString::const_iterator i = strings.begin();
+              i != strings.end();
+              ++i )
+        {
+            gtk_list_store_append (store, &iter);
+            gtk_list_store_set (store, &iter, 0, (const gchar *)i->utf8_str(), -1);
+        }
+
+        gtk_entry_completion_set_model (GetEntryCompletion(), GTK_TREE_MODEL(store));
+        g_object_unref( store );
+
+        DoRefresh();
+    }
+
+    // Takes ownership of the pointer if it is non-NULL.
+    bool ChangeCustomCompleter(wxTextCompleter *completer)
+    {
+        delete m_completer;
+        m_completer = completer;
+
+        if ( m_completer )
+        {
+            wxTextCompleterFixed* fixedCompl = 
+                dynamic_cast<wxTextCompleterFixed*>(m_completer);
+
+            if ( fixedCompl )
+            {
+                wxArrayString completions;
+                fixedCompl->GetCompletions(wxEmptyString, completions);
+
+                ChangeStrings(completions);
+
+                wxDELETE(m_completer);
+                return true;
+            }
+
+            EnableCompletion();
+
+            DoUpdateCompletionModel();
+        }
+        else
+        {
+            DisableCompletion();
+        }
+
+        DoUpdateCompleterType(m_completer != NULL);
+
+        return true;
+    }
+
+    void DisableCompletion()
+    {
+        gtk_entry_set_completion (GetGtkEntry(), NULL);
+
+        wxDELETE(m_completer);
+        DoUpdateCompleterType(false);
+    }
+
+    void EnableCompletion()
+    {
+        if ( !GetEntryCompletion() )
+        {
+            GtkEntryCompletion * const completion = gtk_entry_completion_new();
+
+            gtk_entry_completion_set_text_column (completion, 0);
+            gtk_entry_set_completion (GetGtkEntry(), completion);
+        }
+    }
+
+private:
+    // We want to re-generate completion tokens only
+    // when the entry is empty and the entered prefix
+    // is at least *LENGTH*
+    void OnEntryChanged( wxCommandEvent& event )
+    {
+        const int strLen = (int)event.GetString().length();
+
+        if ( strLen > 0 && m_bGenerateCompletion )
+        {
+            DoUpdateCompletionModel();
+        }
+        else
+        {
+            m_bGenerateCompletion = true;
+        }
+
+        event.Skip();
+    }
+
+    void DoUpdateCompleterType( bool bIsDynamic )
+    {
+        if (m_bDynamicCompleter == bIsDynamic)
+            return;
+
+        wxWindow * const win = m_entry->GetEditableWindow();
+
+        if ( m_bDynamicCompleter && !bIsDynamic )
+        {
+            win->Unbind(wxEVT_TEXT, &wxTextAutoCompleteData::OnEntryChanged, this);
+        }
+        else // !m_bDynamicCompleter
+        {
+            win->Bind(wxEVT_TEXT, &wxTextAutoCompleteData::OnEntryChanged, this);
+        }
+
+        m_bDynamicCompleter = bIsDynamic;
+    }
+
+    void DoRefresh()
+    {
+        gtk_entry_completion_complete (GetEntryCompletion());
+    }
+
+    void DoUpdateCompletionModel()
+    {
+        if ( !m_completer )
+            return;
+
+        const wxString prefix = m_entry->GetValue();
+
+        if ( m_completer->Start(prefix) )
+        {
+            GtkListStore * const store = gtk_list_store_new (1, G_TYPE_STRING);
+            GtkTreeIter iter;
+
+            for (;;)
+            {
+                const wxString s = m_completer->GetNext();
+                if ( s.empty() )
+                    break;
+
+                gtk_list_store_append (store, &iter);
+                gtk_list_store_set (store, &iter, 0, (const gchar *)s.utf8_str(), -1);
+            }
+
+            gtk_entry_completion_set_model (GetEntryCompletion(), GTK_TREE_MODEL(store));
+            g_object_unref(store);
+
+            m_bGenerateCompletion = false;
+        }
+        else
+        {
+            gtk_entry_completion_set_model (GetEntryCompletion(), NULL);
+        }
+
+        DoRefresh();
+    }
+
+    GtkEntry* GetGtkEntry() const { return (GtkEntry*)m_entry->GetEditable(); }
+
+    GtkEntryCompletion* GetEntryCompletion() const
+    {
+        return gtk_entry_get_completion (GetGtkEntry());
+    }
+
+    // The text entry we're associated with.
+    wxTextEntry * const m_entry;
+
+    // Custom completer or NULL if none.
+    wxTextCompleter *m_completer;
+
+    //
+    bool m_bDynamicCompleter;
+    bool m_bGenerateCompletion;
+
+    wxDECLARE_NO_COPY_CLASS(wxTextAutoCompleteData);
+};
+
+
 // ============================================================================
 // wxTextEntry implementation
 // ============================================================================
 
 // ----------------------------------------------------------------------------
+// initialization and destruction
+// ----------------------------------------------------------------------------
+
+wxTextEntry::wxTextEntry()
+{
+    m_autoCompleteData = NULL;
+    m_isUpperCase = false;
+}
+
+wxTextEntry::~wxTextEntry()
+{
+    delete m_autoCompleteData;
+}
+
+// ----------------------------------------------------------------------------
 // text operations
 // ----------------------------------------------------------------------------
 
@@ -409,32 +642,58 @@ void wxTextEntry::GetSelection(long *from, long *to) const
 // auto completion
 // ----------------------------------------------------------------------------
 
+wxTextAutoCompleteData *wxTextEntry::GetOrCreateCompleter()
+{
+    if ( !m_autoCompleteData )
+    {
+        wxTextAutoCompleteData * const ac = new wxTextAutoCompleteData(this);
+        if ( ac->IsOk() )
+            m_autoCompleteData = ac;
+        else
+            delete ac;
+    }
+
+    return m_autoCompleteData;
+}
+
 bool wxTextEntry::DoAutoCompleteStrings(const wxArrayString& choices)
 {
-    GtkEntry* const entry = (GtkEntry*)GetEditable();
-    wxCHECK_MSG(GTK_IS_ENTRY(entry), false, "auto completion doesn't work with this control");
+    wxTextAutoCompleteData * const ac = GetOrCreateCompleter();
+    if ( !ac )
+        return false;
 
-    GtkListStore * const store = gtk_list_store_new(1, G_TYPE_STRING);
-    GtkTreeIter iter;
+    ac->ChangeStrings(choices);
+
+    return true;
+}
 
-    for ( wxArrayString::const_iterator i = choices.begin();
-          i != choices.end();
-          ++i )
+bool wxTextEntry::DoAutoCompleteCustom(wxTextCompleter *completer)
+{
+    // First deal with the case when we just want to disable auto-completion.
+    if ( !completer )
+    {
+        if ( m_autoCompleteData )
+            m_autoCompleteData->DisableCompletion();
+        //else: Nothing to do, we hadn't used auto-completion even before.
+    }
+    else // Have a valid completer.
     {
-        gtk_list_store_append(store, &iter);
-        gtk_list_store_set(store, &iter,
-                           0, (const gchar *)i->utf8_str(),
-                           -1);
+        wxTextAutoCompleteData * const ac = GetOrCreateCompleter();
+        if ( !ac )
+        {
+            // Delete the custom completer for consistency with the case when
+            // we succeed to avoid memory leaks in user code.
+            delete completer;
+            return false;
+        }
+
+        // This gives ownership of the custom completer to m_autoCompleteData.
+        if ( !ac->ChangeCustomCompleter(completer) )
+            return false;
     }
 
-    GtkEntryCompletion * const completion = gtk_entry_completion_new();
-    gtk_entry_completion_set_model(completion, GTK_TREE_MODEL(store));
-    gtk_entry_completion_set_text_column(completion, 0);
-    gtk_entry_set_completion(entry, completion);
-    g_object_unref(completion);
     return true;
 }
-
 // ----------------------------------------------------------------------------
 // editable status
 // ----------------------------------------------------------------------------

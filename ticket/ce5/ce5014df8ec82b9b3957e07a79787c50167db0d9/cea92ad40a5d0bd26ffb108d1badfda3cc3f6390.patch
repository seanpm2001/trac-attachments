diff -ruN minimal.org/ErrorSample.cpp minimal/ErrorSample.cpp
--- minimal.org/ErrorSample.cpp	1970-01-01 02:00:00.000000000 +0200
+++ minimal/ErrorSample.cpp	2013-04-07 12:39:45.677146373 +0300
@@ -0,0 +1,12 @@
+#include "ErrorSample.h"
+
+FindDialog::FindDialog( wxWindow* _parent, wxString title ):FindDialogGui( _parent, wxID_ANY, title){
+	parent = (_parent);
+	}
+
+void FindDialog::EventHandler( wxCommandEvent& event ){
+	wxMessageBox( wxT("Hello"), wxT("Will it work?"), wxOK, this );
+	}
+
+bool FindDialog::OnFind( bool internal ){return true;}
+void FindDialog::OnChar( wxKeyEvent& event ){}
diff -ruN minimal.org/ErrorSampleGui.cpp minimal/ErrorSampleGui.cpp
--- minimal.org/ErrorSampleGui.cpp	1970-01-01 02:00:00.000000000 +0200
+++ minimal/ErrorSampleGui.cpp	2013-04-07 12:23:55.000000000 +0300
@@ -0,0 +1,203 @@
+///////////////////////////////////////////////////////////////////////////
+// C++ code generated with wxFormBuilder (version Mar  8 2013)
+// http://www.wxformbuilder.org/
+//
+// PLEASE DO "NOT" EDIT THIS FILE!
+///////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif //__BORLANDC__
+
+#ifndef WX_PRECOMP
+#include <wx/wx.h>
+#endif //WX_PRECOMP
+
+#include "ErrorSampleGui.h"
+
+///////////////////////////////////////////////////////////////////////////
+
+FindDialogGui::FindDialogGui( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )
+{
+	this->SetSizeHints( wxSize( -1,-1 ), wxDefaultSize );
+	
+	wxBoxSizer* bSizerMain;
+	bSizerMain = new wxBoxSizer( wxHORIZONTAL );
+	
+	wxFlexGridSizer* fgSizerLeft;
+	fgSizerLeft = new wxFlexGridSizer( 1, 1, 0, 0 );
+	fgSizerLeft->AddGrowableCol( 0 );
+	fgSizerLeft->SetFlexibleDirection( wxBOTH );
+	fgSizerLeft->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
+	
+	wxBoxSizer* bSizerBottom;
+	bSizerBottom = new wxBoxSizer( wxVERTICAL );
+	
+	wxFlexGridSizer* fgSizerTop;
+	fgSizerTop = new wxFlexGridSizer( 2, 2, 0, 0 );
+	fgSizerTop->AddGrowableCol( 1 );
+	fgSizerTop->SetFlexibleDirection( wxBOTH );
+	fgSizerTop->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
+	
+	m_static_search = new wxStaticText( this, wxID_ANY, wxT("Search: "), wxDefaultPosition, wxDefaultSize, 0 );
+	m_static_search->Wrap( -1 );
+	fgSizerTop->Add( m_static_search, 0, wxALIGN_CENTER, 5 );
+	
+	m_comboBoxSearch = new wxComboBox( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_DROPDOWN );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	m_comboBoxSearch->Append( wxT(" ") );
+	fgSizerTop->Add( m_comboBoxSearch, 0, wxALL|wxEXPAND, 5 );
+	
+	m_static_replace = new wxStaticText( this, wxID_ANY, wxT("Replace: "), wxDefaultPosition, wxDefaultSize, 0 );
+	m_static_replace->Wrap( -1 );
+	m_static_replace->Hide();
+	
+	fgSizerTop->Add( m_static_replace, 0, wxALIGN_CENTER, 5 );
+	
+	m_comboBoxReplace = new wxComboBox( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_DROPDOWN );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Append( wxT(" ") );
+	m_comboBoxReplace->Hide();
+	
+	fgSizerTop->Add( m_comboBoxReplace, 0, wxALL|wxEXPAND, 5 );
+	
+	
+	bSizerBottom->Add( fgSizerTop, 0, wxALL|wxEXPAND, 5 );
+	
+	
+	fgSizerLeft->Add( bSizerBottom, 0, wxEXPAND, 5 );
+	
+	wxBoxSizer* bSizerOptions;
+	bSizerOptions = new wxBoxSizer( wxHORIZONTAL );
+	
+	wxString m_searchtypeChoices[] = { wxT("Text"), wxT("Hex") };
+	int m_searchtypeNChoices = sizeof( m_searchtypeChoices ) / sizeof( wxString );
+	m_searchtype = new wxRadioBox( this, wxID_ANY, wxT("Search as"), wxDefaultPosition, wxDefaultSize, m_searchtypeNChoices, m_searchtypeChoices, 1, wxRA_SPECIFY_COLS );
+	m_searchtype->SetSelection( 1 );
+	bSizerOptions->Add( m_searchtype, 1, wxALL, 3 );
+	
+	wxStaticBoxSizer* sbSizerSearchOptions;
+	sbSizerSearchOptions = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Options") ), wxVERTICAL );
+	
+	chkMatchCase = new wxCheckBox( this, wxID_ANY, wxT("Match Case"), wxDefaultPosition, wxDefaultSize, 0 );
+	sbSizerSearchOptions->Add( chkMatchCase, 0, wxALL, 5 );
+	
+	chkSearchBackwards = new wxCheckBox( this, wxID_ANY, wxT("Search backwards"), wxDefaultPosition, wxDefaultSize, 0 );
+	sbSizerSearchOptions->Add( chkSearchBackwards, 0, wxALL, 5 );
+	
+	chkWrapAround = new wxCheckBox( this, wxID_ANY, wxT("Wrap around"), wxDefaultPosition, wxDefaultSize, 0 );
+	sbSizerSearchOptions->Add( chkWrapAround, 0, wxALL, 5 );
+	
+	chkUTF8 = new wxCheckBox( this, wxID_ANY, wxT("As UTF-8"), wxDefaultPosition, wxDefaultSize, 0 );
+	sbSizerSearchOptions->Add( chkUTF8, 0, wxALL, 5 );
+	
+	
+	bSizerOptions->Add( sbSizerSearchOptions, 1, wxEXPAND, 5 );
+	
+	
+	fgSizerLeft->Add( bSizerOptions, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 2 );
+	
+	
+	bSizerMain->Add( fgSizerLeft, 1, wxEXPAND, 5 );
+	
+	wxBoxSizer* bSizerButtons;
+	bSizerButtons = new wxBoxSizer( wxVERTICAL );
+	
+	btnFind = new wxButton( this, wxID_ANY, wxT("Find"), wxDefaultPosition, wxDefaultSize, 0 );
+	btnFind->SetDefault(); 
+	bSizerButtons->Add( btnFind, 0, wxALIGN_CENTER|wxEXPAND|wxTOP, 2 );
+	
+	btnFindAll = new wxButton( this, wxID_ANY, wxT("Find All"), wxDefaultPosition, wxDefaultSize, 0 );
+	bSizerButtons->Add( btnFindAll, 0, wxALIGN_CENTER|wxEXPAND|wxTOP, 2 );
+	
+	btnFindSomeBytes = new wxButton( this, wxID_ANY, wxT("Find Some Bytes"), wxDefaultPosition, wxDefaultSize, 0 );
+	btnFindSomeBytes->SetToolTip( wxT("This function finds some different values at file. Usefull for finding non-null sections at disks.") );
+	
+	bSizerButtons->Add( btnFindSomeBytes, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxTOP, 2 );
+	
+	m_staticline = new wxStaticLine( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
+	m_staticline->Hide();
+	
+	bSizerButtons->Add( m_staticline, 0, wxEXPAND|wxALL|wxALIGN_CENTER_HORIZONTAL, 5 );
+	
+	btnReplace = new wxButton( this, wxID_ANY, wxT("Replace"), wxDefaultPosition, wxDefaultSize, 0 );
+	btnReplace->Hide();
+	
+	bSizerButtons->Add( btnReplace, 0, wxTOP|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 2 );
+	
+	btnReplaceAll = new wxButton( this, wxID_ANY, wxT("Replace All"), wxDefaultPosition, wxDefaultSize, 0 );
+	btnReplaceAll->Hide();
+	
+	bSizerButtons->Add( btnReplaceAll, 0, wxTOP|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 2 );
+	
+	btnClose = new wxButton( this, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
+	bSizerButtons->Add( btnClose, 0, wxTOP|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 2 );
+	
+	
+	bSizerMain->Add( bSizerButtons, 0, wxEXPAND|wxRIGHT, 5 );
+	
+	
+	this->SetSizer( bSizerMain );
+	this->Layout();
+	bSizerMain->Fit( this );
+	
+	this->Centre( wxBOTH );
+	
+	// Connect Events
+	m_comboBoxSearch->Connect( wxEVT_CHAR, wxKeyEventHandler( FindDialogGui::OnChar ), NULL, this );
+	m_comboBoxSearch->Connect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxSearch->Connect( wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxReplace->Connect( wxEVT_CHAR, wxKeyEventHandler( FindDialogGui::OnChar ), NULL, this );
+	m_comboBoxReplace->Connect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxReplace->Connect( wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_searchtype->Connect( wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkMatchCase->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkSearchBackwards->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkWrapAround->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkUTF8->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFind->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFindAll->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFindSomeBytes->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnReplace->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnReplaceAll->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+}
+
+FindDialogGui::~FindDialogGui()
+{
+	// Disconnect Events
+	m_comboBoxSearch->Disconnect( wxEVT_CHAR, wxKeyEventHandler( FindDialogGui::OnChar ), NULL, this );
+	m_comboBoxSearch->Disconnect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxSearch->Disconnect( wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxReplace->Disconnect( wxEVT_CHAR, wxKeyEventHandler( FindDialogGui::OnChar ), NULL, this );
+	m_comboBoxReplace->Disconnect( wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_comboBoxReplace->Disconnect( wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	m_searchtype->Disconnect( wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkMatchCase->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkSearchBackwards->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkWrapAround->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	chkUTF8->Disconnect( wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFind->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFindAll->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnFindSomeBytes->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnReplace->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	btnReplaceAll->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( FindDialogGui::EventHandler ), NULL, this );
+	
+}
diff -ruN minimal.org/ErrorSampleGui.h minimal/ErrorSampleGui.h
--- minimal.org/ErrorSampleGui.h	1970-01-01 02:00:00.000000000 +0200
+++ minimal/ErrorSampleGui.h	2013-04-07 12:23:55.000000000 +0300
@@ -0,0 +1,68 @@
+///////////////////////////////////////////////////////////////////////////
+// C++ code generated with wxFormBuilder (version Mar  8 2013)
+// http://www.wxformbuilder.org/
+//
+// PLEASE DO "NOT" EDIT THIS FILE!
+///////////////////////////////////////////////////////////////////////////
+
+#ifndef __ERRORSAMPLEGUI_H__
+#define __ERRORSAMPLEGUI_H__
+
+#include <wx/artprov.h>
+#include <wx/xrc/xmlres.h>
+#include <wx/string.h>
+#include <wx/stattext.h>
+#include <wx/gdicmn.h>
+#include <wx/font.h>
+#include <wx/colour.h>
+#include <wx/settings.h>
+#include <wx/combobox.h>
+#include <wx/sizer.h>
+#include <wx/radiobox.h>
+#include <wx/checkbox.h>
+#include <wx/statbox.h>
+#include <wx/button.h>
+#include <wx/statline.h>
+#include <wx/dialog.h>
+
+///////////////////////////////////////////////////////////////////////////
+
+
+///////////////////////////////////////////////////////////////////////////////
+/// Class FindDialogGui
+///////////////////////////////////////////////////////////////////////////////
+class FindDialogGui : public wxDialog 
+{
+	private:
+	
+	protected:
+		wxStaticText* m_static_search;
+		wxComboBox* m_comboBoxSearch;
+		wxStaticText* m_static_replace;
+		wxComboBox* m_comboBoxReplace;
+		wxRadioBox* m_searchtype;
+		wxCheckBox* chkMatchCase;
+		wxCheckBox* chkSearchBackwards;
+		wxCheckBox* chkWrapAround;
+		wxCheckBox* chkUTF8;
+		wxButton* btnFind;
+		wxButton* btnFindAll;
+		wxButton* btnFindSomeBytes;
+		wxStaticLine* m_staticline;
+		wxButton* btnReplace;
+		wxButton* btnReplaceAll;
+		wxButton* btnClose;
+		
+		// Virtual event handlers, overide them in your derived class
+		virtual void OnChar( wxKeyEvent& event ) { event.Skip(); }
+		virtual void EventHandler( wxCommandEvent& event ) { event.Skip(); }
+		
+	
+	public:
+		
+		FindDialogGui( wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Find"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize( -1,-1 ), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSTAY_ON_TOP ); 
+		~FindDialogGui();
+	
+};
+
+#endif //__ERRORSAMPLEGUI_H__
diff -ruN minimal.org/ErrorSample.h minimal/ErrorSample.h
--- minimal.org/ErrorSample.h	1970-01-01 02:00:00.000000000 +0200
+++ minimal/ErrorSample.h	2013-04-07 12:38:11.250142883 +0300
@@ -0,0 +1,17 @@
+#include "ErrorSampleGui.h"
+#include <stdint.h> 
+#ifndef __ERRORSAMPLE_H__
+#define __ERRORSAMPLE_H__
+
+class FindDialog : public FindDialogGui{
+	public:
+		FindDialog( wxWindow* parent, wxString title=_("Find") );
+		bool OnFind( bool intenal=false );
+		void OnFindPrev( wxCommandEvent& event );
+		void OnChar( wxKeyEvent& event );
+virtual void EventHandler( wxCommandEvent& event );
+	protected:
+		class wxWindow* parent;
+	};
+
+#endif
diff -ruN minimal.org/minimal.cpp minimal/minimal.cpp
--- minimal.org/minimal.cpp	2011-03-22 14:00:07.000000000 +0200
+++ minimal/minimal.cpp	2013-04-07 12:23:55.000000000 +0300
@@ -39,7 +39,7 @@
 #if !defined(__WXMSW__) && !defined(__WXPM__)
     #include "../sample.xpm"
 #endif
-
+#include "ErrorSample.h"
 // ----------------------------------------------------------------------------
 // private classes
 // ----------------------------------------------------------------------------
@@ -183,17 +183,11 @@
     Close(true);
 }
 
+
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(wxString::Format(
-                    _T("Welcome to %s!\n")
-                    _T("\n")
-                    _T("This is the minimal wxWidgets sample\n")
-                    _T("running under %s."),
-                    wxVERSION_STRING,
-                    wxGetOsDescription().c_str()
-                 ),
-                 _T("About wxWidgets minimal sample"),
-                 wxOK | wxICON_INFORMATION,
-                 this);
+    FindDialog mydlg(this, wxT("Find Error"));
+    mydlg.ShowModal();
 }
+#include "ErrorSampleGui.cpp"
+#include "ErrorSample.cpp"

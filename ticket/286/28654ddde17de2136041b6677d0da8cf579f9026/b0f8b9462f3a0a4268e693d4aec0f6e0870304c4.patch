Index: src/xrc/xmlrsall.cpp
===================================================================
--- src/xrc/xmlrsall.cpp	(revisione 69296)
+++ src/xrc/xmlrsall.cpp	(copia locale)
@@ -203,6 +203,9 @@
 #if wxUSE_TREECTRL
     AddHandler(new wxTreeCtrlXmlHandler);
 #endif
+#if wxUSE_TREELISTCTRL
+    AddHandler(new wxTreeListCtrlXmlHandler);
+#endif
 #if wxUSE_WIZARDDLG
     AddHandler(new wxWizardXmlHandler);
 #endif
Index: src/xrc/xh_treelist.cpp
===================================================================
--- src/xrc/xh_treelist.cpp	(revisione 0)
+++ src/xrc/xh_treelist.cpp	(revisione 0)
@@ -0,0 +1,285 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        srx/xrc/xh_treelist.cpp
+// Purpose:     Implementation of wxTreeListCtrl XRC handler.
+// Author:      Andrea Zanellato
+// Created:     2011-09-30
+// RCS-ID:      $Id:$
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_TREELISTCTRL
+
+#include "wx/xrc/xh_treelist.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/log.h"
+#endif
+
+#include "wx/treelist.h"
+#include "wx/imaglist.h"
+
+wxIMPLEMENT_DYNAMIC_CLASS(wxTreeListCtrlXmlHandler, wxXmlResourceHandler)
+
+wxTreeListCtrlXmlHandler::wxTreeListCtrlXmlHandler()
+                        : wxXmlResourceHandler(),
+                            m_tlc(NULL), m_isInside(false)
+{
+    // wxAlignment
+    XRC_ADD_STYLE(wxALIGN_INVALID);
+    XRC_ADD_STYLE(wxALIGN_NOT);
+    XRC_ADD_STYLE(wxALIGN_CENTER_HORIZONTAL);
+    XRC_ADD_STYLE(wxALIGN_CENTRE_HORIZONTAL);
+    XRC_ADD_STYLE(wxALIGN_LEFT);
+    XRC_ADD_STYLE(wxALIGN_TOP);
+    XRC_ADD_STYLE(wxALIGN_RIGHT);
+    XRC_ADD_STYLE(wxALIGN_BOTTOM);
+    XRC_ADD_STYLE(wxALIGN_CENTER_VERTICAL);
+    XRC_ADD_STYLE(wxALIGN_CENTRE_VERTICAL);
+    XRC_ADD_STYLE(wxALIGN_CENTER);
+    XRC_ADD_STYLE(wxALIGN_CENTRE);
+    XRC_ADD_STYLE(wxALIGN_MASK);
+
+    // Column Widths
+    XRC_ADD_STYLE(wxCOL_WIDTH_DEFAULT);
+    XRC_ADD_STYLE(wxCOL_WIDTH_AUTOSIZE);
+
+    // Column Flags
+    XRC_ADD_STYLE(wxCOL_RESIZABLE);
+    XRC_ADD_STYLE(wxCOL_SORTABLE);
+    XRC_ADD_STYLE(wxCOL_REORDERABLE);
+    XRC_ADD_STYLE(wxCOL_HIDDEN);
+    XRC_ADD_STYLE(wxCOL_DEFAULT_FLAGS);
+
+    // wxCheckBoxState
+    XRC_ADD_STYLE(wxCHK_CHECKED);
+    XRC_ADD_STYLE(wxCHK_UNCHECKED);
+    XRC_ADD_STYLE(wxCHK_UNDETERMINED);
+
+    // wxTreeListCtrl Styles
+    XRC_ADD_STYLE(wxTL_SINGLE);
+    XRC_ADD_STYLE(wxTL_MULTIPLE);
+    XRC_ADD_STYLE(wxTL_CHECKBOX);
+    XRC_ADD_STYLE(wxTL_3STATE);
+    XRC_ADD_STYLE(wxTL_USER_3STATE);
+    XRC_ADD_STYLE(wxTL_DEFAULT_STYLE);
+
+    AddWindowStyles();
+}
+
+bool wxTreeListCtrlXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return ((!m_isInside && IsOfClass(node, wxS("wxTreeListCtrl"))) ||
+             (m_isInside && IsOfClass(node, wxS("wxTreeListItem"))) ||
+             (m_isInside && IsOfClass(node, wxS("treelistcol"))));
+}
+
+wxObject *wxTreeListCtrlXmlHandler::DoCreateResource()
+{
+    if (m_class == wxS("wxTreeListCtrl"))
+    {
+        XRC_MAKE_INSTANCE(tlc, wxTreeListCtrl)
+
+        tlc->Create(m_parentAsWindow,
+                    GetID(),
+                    GetPosition(),
+                    GetSize(),
+                    GetStyle(wxS("style")),
+                    GetName());
+
+        wxImageList *imagelist = GetImageList(wxS("imagelist"));
+        if (imagelist)
+            tlc->AssignImageList(imagelist);
+
+        wxTreeListCtrl *old_par = m_tlc;
+        bool            old_ins = m_isInside;
+
+        m_tlc = tlc;
+        m_isInside = true;
+
+        CreateChildrenPrivately(m_tlc);
+        SetupWindow(m_tlc);
+
+        for (wxTreeListItem item = m_tlc->GetFirstItem();
+                item.IsOk();
+                item = m_tlc->GetNextItem(item))
+        {
+            wxClientData *data = m_tlc->GetItemData(item);
+            if (data) // expanded
+            {
+                m_tlc->Expand(item);
+            }
+        }
+
+        m_isInside = old_ins;
+        m_tlc = old_par;
+
+        return tlc;
+    }
+    else if (m_class == wxS("treelistcol"))
+    {
+        if (m_tlc)
+        {
+            wxString title = wxEmptyString;
+            if (HasParam(wxS("title")))
+                title = GetText(wxS("title"));
+
+            int         width = (int)GetLong(wxS("width"), wxCOL_WIDTH_AUTOSIZE);
+            wxAlignment align = (wxAlignment)GetStyle(wxS("align"), wxALIGN_LEFT);
+            int         flags = (int)GetStyle(wxS("flags"), wxCOL_RESIZABLE);
+
+            m_tlc->AppendColumn(title, width, align, flags);
+        }
+        else
+        {
+            ReportError("treelistcol must be used inside a wxTreeListCtrl parent.");
+        }
+    }
+    else // (m_class == wxS("wxTreeListItem"))
+    {
+        bool old_ins = m_isInside;
+        m_isInside = false;
+
+        if (m_tlc && m_tlc->GetColumnCount() > 0)
+        {
+            wxTreeListItem  parentItem      = m_tlc->GetRootItem();
+            wxString        itemText        = wxEmptyString;
+            int             imgClose        = (int)GetLong(wxS("image_closed"),
+                                                            wxTreeListCtrl::NO_IMAGE);
+            int             imgOpen         = (int)GetLong(wxS("image_opened"),
+                                                            wxTreeListCtrl::NO_IMAGE);
+            if (HasParam(wxS("text")))
+                itemText = GetText(wxS("text"));
+
+            parentItem = m_tlc->AppendItem(parentItem, itemText, imgClose, imgOpen);
+
+            if (GetBool(wxS("selected")))
+                m_tlc->Select(parentItem);
+
+            if (HasParam(wxS("checked_state")))
+            {
+                wxCheckBoxState state = (wxCheckBoxState)GetStyle(wxS("checked_state"),
+                                                                    wxCHK_UNCHECKED);
+                m_tlc->CheckItem(parentItem, state);
+            }
+
+            // Append children recursively if any
+            wxXmlNode *child = m_node->GetChildren();
+            while (child)
+            {
+                if (child->GetAttribute(wxS("class")) == wxS("wxTreeListItem"))
+                    AddItemsRecursively(child, parentItem);
+
+                child = child->GetNext();
+            }
+
+            if (GetBool(wxS("expanded")))
+                m_tlc->Expand(parentItem);
+        }
+        else
+        {
+            ReportError
+            (
+                "A wxTreeListItem must be placed inside a wxTreeListCtrl "
+                "with at least one column, or inside another wxTreeListItem."
+            );
+        }
+
+        m_isInside = old_ins;
+    }
+
+    return m_parentAsWindow;
+}
+
+void wxTreeListCtrlXmlHandler::AddItemsRecursively(wxXmlNode *node,
+                                                    wxTreeListItem item)
+{
+    wxArrayString text;
+    wxCheckBoxState chkState = wxCHK_UNCHECKED;
+    bool          expanded  = false;
+    bool          selected  = false;
+    int           imgClose  = wxTreeListCtrl::NO_IMAGE;
+    int           imgOpen   = wxTreeListCtrl::NO_IMAGE;
+    wxString      name      = wxEmptyString;
+    wxString      content   = wxEmptyString;
+    wxXmlNode    *valueNode = node->GetChildren();
+    wxXmlNode    *childNode = NULL;
+
+    while (valueNode)
+    {
+        name = valueNode->GetName();
+
+        wxXmlNode *contentNode = valueNode->GetChildren();
+
+        if (contentNode)
+            content = contentNode->GetContent();
+
+        if (name == wxS("text"))
+        {
+            text.Add(content);
+        }
+        else if (name == wxS("image_closed"))
+        {
+            imgClose = wxAtoi(content);
+        }
+        else if (name == wxS("image_opened"))
+        {
+            imgOpen = wxAtoi(content);
+        }
+        else if (name == wxS("expanded"))
+        {
+            expanded = wxAtoi(content);
+        }
+        else if (name == wxS("selected"))
+        {
+            selected = wxAtoi(content);
+        }
+        else if (name == wxS("checked_state"))
+        {
+            if (content == wxS("wxCHK_CHECKED"))
+            {
+                chkState = wxCHK_CHECKED;
+            }
+            else if (content == wxS("wxCHK_UNDETERMINED"))
+            {
+                chkState = wxCHK_UNDETERMINED;
+            }
+        }
+        else if (name == wxS("object") &&
+                    node->GetAttribute(wxS("class")) == wxS("wxTreeListItem"))
+        {
+            childNode = valueNode;
+        }
+        valueNode = valueNode->GetNext();
+    }
+
+    item = m_tlc->AppendItem(item, wxEmptyString, imgClose, imgOpen);
+
+    for (size_t i = 0; i < text.GetCount(); i++)
+        m_tlc->SetItemText(item, i, text.Item(i));
+
+    if (chkState != wxCHK_UNCHECKED)
+        m_tlc->CheckItem(item, chkState);
+
+    if (selected)
+        m_tlc->Select(item);
+
+    if (childNode)
+        AddItemsRecursively(childNode, item);
+
+    if (expanded)
+    {
+        m_tlc->Expand(item); // FIXME
+        m_tlc->SetItemData(item, new wxClientData());
+    }
+}
+
+#endif // wxUSE_XRC && wxUSE_TREELISTCTRL
+
Index: docs/doxygen/overviews/xrc_format.h
===================================================================
--- docs/doxygen/overviews/xrc_format.h	(revisione 69296)
+++ docs/doxygen/overviews/xrc_format.h	(copia locale)
@@ -957,6 +957,7 @@
     - @ref xrc_wxnotebook
     - @ref xrc_wxtreebook
     - @ref xrc_wxtreectrl
+    - @ref xrc_wxtreelistctrl
 
 The available properties are:
 
@@ -1815,6 +1816,63 @@
  - Page 2
 
 
+@subsubsection xrc_wxtreelistctrl wxTreeListCtrl
+
+A tree list control can have one object of the @ref xrc_wximagelist class,
+one or more child objects of the class @ref xrc_wxtreelistcol and
+one or more child objects of the class @ref xrc_wxtreelistitem.
+
+@paragraph xrc_wxtreelistcol treelistcol
+
+The @c treelistcol class can only be used for wxTreeListCtrl children. It can have the
+following properties:
+@beginTable
+@hdr3col{property, type, description}
+@row3col{title, @ref overview_xrcformat_type_text,
+    The title of the column. }
+@row3col{align, @ref overview_xrcformat_type_style,
+    The alignment for the item. Can be one of the
+    <a href="defs_8h.html#543dd017a172dc316253a8a1f351dde9">wxAlignment</a>
+    flags (default: @c wxALIGN_LEFT)}
+@row3col{width, integer,
+    The column width. The column width. Default: -2 (@c wxCOL_WIDTH_AUTOSIZE) }
+@row3col{flags, @ref overview_xrcformat_type_style,
+    The column flags. Can be any combination of the
+    @c wxCOL_RESIZABLE (default), @c wxCOL_SORTABLE, @c wxCOL_REORDERABLE,
+    @c wxCOL_HIDDEN and @c wxCOL_DEFAULT_FLAGS bit flags. }
+@endTable
+
+The columns are appended to the control in order of their appearance and may be
+referenced by one or more @c text attributes of subsequent @c wxTreeListItem objects.
+
+@paragraph xrc_wxtreelistitem wxTreeListItem
+
+A @c wxTreeListItem can be added as a child to a @ref xrc_wxtreelistctrl,
+or can be added as a child of another @c wxTreeListItem.
+It can have the following properties:
+@beginTable
+@hdr3col{property, type, description}
+@row3col{text, @ref overview_xrcformat_type_text,
+    The text label for the item. }
+@row3col{image_closed, integer,
+    The zero-based index of the image associated with the item
+    into the image list to display when the item is collapsed.}
+@row3col{image_opened, integer,
+    The zero-based index of the image associated with the item
+    into the image list to display when the item is expanded.}
+@row3col{checked_state, @ref overview_xrcformat_type_style,
+    The checked state of the item. Can be one of @c wxCHK_CHECKED, @c wxCHK_UNCHECKED or
+    @c wxCHK_UNDETERMINED bit flags (default: @c wxCHK_UNCHECKED) }
+@row3col{selected, @ref overview_xrcformat_type_bool,
+     Whether the item is selected initially (default: 0)}
+@row3col{expanded, @ref overview_xrcformat_type_bool,
+     Whether the item is expanded initially (default: 0)}
+@endTable
+
+Notice that the item position can't be specified here, the items are appended
+to the tree list control in order of their appearance.
+
+
 @subsubsection xrc_wxwizard wxWizard
 
 @beginTable
Index: include/wx/xrc/xh_treelist.h
===================================================================
--- include/wx/xrc/xh_treelist.h	(revisione 0)
+++ include/wx/xrc/xh_treelist.h	(revisione 0)
@@ -0,0 +1,39 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_treelist.h
+// Purpose:     Declaration of wxTreeListCtrl XRC handler.
+// Author:      Andrea Zanellato
+// Created:     2011-09-30
+// RCS-ID:      $Id:$
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_TREELIST_H_
+#define _WX_XH_TREELIST_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_TREELISTCTRL
+
+class WXDLLIMPEXP_FWD_ADV wxTreeListCtrl;
+class WXDLLIMPEXP_FWD_ADV wxTreeListItem;
+
+class WXDLLIMPEXP_XRC wxTreeListCtrlXmlHandler : public wxXmlResourceHandler
+{
+public:
+    wxTreeListCtrlXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    void AddItemsRecursively(wxXmlNode *node, wxTreeListItem item);
+    wxTreeListCtrl *m_tlc;
+    bool m_isInside;
+
+    wxDECLARE_DYNAMIC_CLASS(wxTreeListCtrlXmlHandler);
+};
+
+#endif // wxUSE_XRC && wxUSE_TREELISTCTRL
+
+#endif // _WX_XH_TREELIST_H_
+
Index: include/wx/xrc/xh_all.h
===================================================================
--- include/wx/xrc/xh_all.h	(revisione 69296)
+++ include/wx/xrc/xh_all.h	(copia locale)
@@ -74,6 +74,7 @@
 #include "wx/xrc/xh_toolbk.h"
 #include "wx/xrc/xh_tree.h"
 #include "wx/xrc/xh_treebk.h"
+#include "wx/xrc/xh_treelist.h"
 #include "wx/xrc/xh_unkwn.h"
 #include "wx/xrc/xh_wizrd.h"
 
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revisione 69296)
+++ build/bakefiles/files.bkl	(copia locale)
@@ -3462,6 +3462,7 @@
     src/xrc/xh_toolbk.cpp
     src/xrc/xh_tree.cpp
     src/xrc/xh_treebk.cpp
+    src/xrc/xh_treelist.cpp
     src/xrc/xh_unkwn.cpp
     src/xrc/xh_wizrd.cpp
     src/xrc/xmlres.cpp
@@ -3531,6 +3532,7 @@
     wx/xrc/xh_toolbk.h
     wx/xrc/xh_tree.h
     wx/xrc/xh_treebk.h
+    wx/xrc/xh_treelist.h
     wx/xrc/xh_unkwn.h
     wx/xrc/xh_wizrd.h
     wx/xrc/xmlres.h
Index: samples/xrc/myframe.cpp
===================================================================
--- samples/xrc/myframe.cpp	(revisione 69296)
+++ samples/xrc/myframe.cpp	(copia locale)
@@ -55,6 +55,11 @@
 #include "wx/treectrl.h"
 #include "wx/listctrl.h"
 
+#if wxUSE_TREELISTCTRL
+    #include "wx/treelist.h"
+    #include "wx/choicebk.h"
+#endif
+
 //-----------------------------------------------------------------------------
 // Regular resources (the non-XRC kind).
 //-----------------------------------------------------------------------------
@@ -258,6 +263,13 @@
                 wxCommandEventHandler(MyFrame::OnAnimationCtrlPlay));
 #endif
 
+#if wxUSE_TREELISTCTRL
+    // tree list ctrl needs a size event to show all columns, otherwise
+    // the first column takes entire space on it.
+    dlg.Connect(XRCID("controls_book"), wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED,
+                wxBookCtrlEventHandler(MyFrame::OnChoiceChanged));
+#endif
+
     // All done. Show the dialog.
     dlg.ShowModal();
 }
@@ -381,3 +393,27 @@
 
     wxMessageBox(msg, _("About XML resources demo"), wxOK | wxICON_INFORMATION, this);
 }
+#if wxUSE_TREELISTCTRL
+void MyFrame::OnChoiceChanged(wxBookCtrlEvent& event)
+{
+    int sel = event.GetSelection();
+    wxChoicebook *book = wxDynamicCast(event.GetEventObject(), wxChoicebook);
+
+    if (book)
+    {
+        wxChoice *choice = book->GetChoiceCtrl();
+        wxTreeListCtrl
+            *tlc = wxDynamicCast(wxWindow::FindWindowByName(wxS("controls_treelistctrl")),
+                                    wxTreeListCtrl );
+        if (tlc && choice->GetString(sel) == wxS("wxTreeListCtrl"))
+        {
+            tlc->PostSizeEvent();
+
+            wxDialog *dlg = wxDynamicCast(wxWindow::FindWindowByName(wxS("controls_dialog")),
+                                        wxDialog );
+            dlg->Disconnect(XRCID("controls_book"), wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED,
+                    wxBookCtrlEventHandler(MyFrame::OnChoiceChanged));
+        }
+    }
+}
+#endif
Index: samples/xrc/myframe.h
===================================================================
--- samples/xrc/myframe.h	(revisione 69296)
+++ samples/xrc/myframe.h	(copia locale)
@@ -20,6 +20,10 @@
 
 #include "wx/frame.h"
 
+#if wxUSE_TREELISTCTRL
+    class wxBookCtrlEvent;
+#endif
+
 //-----------------------------------------------------------------------------
 // Class definition: MyFrame
 //-----------------------------------------------------------------------------
@@ -52,6 +56,9 @@
     void OnRecursiveLoad(wxCommandEvent& event);
     void OnAnimationCtrlPlay(wxCommandEvent& event);
 
+#if wxUSE_TREELISTCTRL
+    void OnChoiceChanged(wxBookCtrlEvent& event);
+#endif
     // Any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 
Index: samples/xrc/rc/controls.xrc
===================================================================
--- samples/xrc/rc/controls.xrc	(revisione 69296)
+++ samples/xrc/rc/controls.xrc	(copia locale)
@@ -1275,6 +1275,79 @@
                     </object>
                 </object>
 
+                <object class="choicebookpage" name="treelistctrl_page">
+                    <label>wxTreeListCtrl</label>
+                    <object class="wxPanel" name="treelistctrl">
+                        <object class="wxBoxSizer">
+                            <orient>wxVERTICAL</orient>
+                            <object class="sizeritem">
+                                <flag>wxALL|wxEXPAND</flag>
+                                <option>1</option>
+                                <border>5</border>
+                                <object class="wxTreeListCtrl" name="controls_treelistctrl">
+                                    <imagelist>
+                                        <bitmap stock_id="wxART_GO_HOME"/>
+                                        <bitmap stock_id="wxART_FOLDER"/>
+                                    </imagelist>
+                                    <size>280,180</size>
+                                    <style>wxTL_MULTIPLE|wxTL_USER_3STATE|wxSUNKEN_BORDER</style>
+                                    <object class="treelistcol">
+                                        <title>My Categories</title>
+                                        <width>90</width>
+                                        <flags>wxCOL_RESIZABLE|wxCOL_SORTABLE</flags>
+                                    </object>
+                                    <object class="treelistcol">
+                                        <title>My Description 1</title>
+                                        <width>150</width>
+                                        <flags>wxCOL_DEFAULT_FLAGS|wxCOL_SORTABLE</flags>
+                                    </object>
+                                    <object class="treelistcol">
+                                        <title>My Description 2</title>
+                                        <flags>wxCOL_DEFAULT_FLAGS|wxCOL_SORTABLE</flags>
+                                    </object>
+                                    <object class="wxTreeListItem">
+                                        <text>My Category 1</text>
+                                        <image_closed>0</image_closed>
+                                        <selected>1</selected>
+                                        <expanded>1</expanded>
+                                        <checked_state>wxCHK_UNDETERMINED</checked_state>
+                                        <object class="wxTreeListItem">
+                                            <text>Item Cat.1</text>
+                                            <text>Description 1</text>
+                                            <text>Description 2</text>
+                                            <image_closed>1</image_closed>
+                                            <image_opened>0</image_opened>
+                                            <expanded>1</expanded>
+                                            <checked_state>wxCHK_CHECKED</checked_state>
+                                            <object class="wxTreeListItem">
+                                                <text>SubItem 1</text>
+                                                <text>Description 3</text>
+                                                <text>Description 4</text>
+                                                <image_closed>1</image_closed>
+                                                <checked_state>wxCHK_UNDETERMINED</checked_state>
+                                            </object>
+                                        </object>
+                                    </object>
+                                    <object class="wxTreeListItem">
+                                        <text>My Category 2</text>
+                                        <image_closed>0</image_closed>
+                                        <selected>1</selected>
+                                        <expanded>1</expanded>
+                                        <checked_state>wxCHK_CHECKED</checked_state>
+                                        <object class="wxTreeListItem">
+                                            <text>Item Cat.2</text>
+                                            <text>Description 5</text>
+                                            <text>Description 6</text>
+                                            <image_closed>1</image_closed>
+                                            <checked_state>wxCHK_CHECKED</checked_state>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+
                 <object class="choicebookpage">
                     <label>wx*PickerCtrl</label>
                     <object class="wxPanel" name="pickers">

Index: scroll.cpp
===================================================================
--- scroll.cpp	(revision 65558)
+++ scroll.cpp	(working copy)
@@ -584,6 +584,7 @@
     // selection tracking
     wxPoint m_selStart; // beginning of blockwise selection
     wxPoint m_cursor;   // end of blockwise selection (mouse position)
+    int m_option; // Blit type option.
 
     // gui stuff
     wxFont m_font;
@@ -845,10 +846,6 @@
     EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
     EVT_MENU(wxID_EXIT,  MyFrame::OnQuit)
 
-    EVT_MENU(Scroll_Test_Simple, MyFrame::OnTestSimple)
-    EVT_MENU(Scroll_Test_Canvas, MyFrame::OnTestCanvas)
-    EVT_MENU(Scroll_Test_Sizers, MyFrame::OnTestSizer)
-    EVT_MENU(Scroll_Test_Sub, MyFrame::OnTestSub)
     EVT_MENU(Scroll_Test_Auto, MyFrame::OnTestAuto)
 
     EVT_TOGGLEBUTTON(Scroll_TglBtn_Sync, MyFrame::OnToggleSync)
@@ -866,15 +863,7 @@
     menuFile->Append(wxID_EXIT, "E&xit\tAlt-X");
 
     wxMenu *menuTest = new wxMenu;
-    menuTest->Append(Scroll_Test_Simple, "&Simple scroll window\tF1",
-                     "Simplest possible scrolled window test.");
-    menuTest->Append(Scroll_Test_Canvas, "Scrolled window with &children\tF2",
-                     "Scrolled window with controls on it.");
-    menuTest->Append(Scroll_Test_Sizers, "Scrolled window with si&zer\tF3",
-                     "Scrolled window with children managed by sizer.");
-    menuTest->Append(Scroll_Test_Sub, "Scrolled s&ub-window\tF4",
-                     "Window only part of which is scrolled.");
-    menuTest->Append(Scroll_Test_Auto, "&Auto-scrolled window\tF5",
+    menuTest->Append(Scroll_Test_Auto, "&Scrolled window\tF5",
                      "Window which scrolls when the mouse is held pressed "
                      "outside of it.");
 
@@ -1058,15 +1047,16 @@
     : wxScrolled<wxWindow>(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize,
                            wxVSCROLL | wxHSCROLL | wxSUNKEN_BORDER),
       m_selStart(-1, -1),
-      m_cursor(-1, -1),
+      m_cursor(-1, -1), m_option(0),
       m_font(9, wxFONTFAMILY_TELETYPE, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL)
 {
-    wxClientDC dc(this);
-    // query dc for text size
-    dc.SetFont(m_font);
-    dc.GetTextExtent(wxString("A"), &m_fontW, &m_fontH);
     // set up the virtual window
-    SetScrollbars(m_fontW, m_fontH, sm_lineLen, sm_lineCnt);
+    SetScrollbars(1, 1, 500, 500);
+
+    SetBackgroundColour( *wxWHITE );
+
+    SetLabel("dc.Blit(-pt.x, -pt.y, sz.x, sz.y, &bdc, -pt.x, -pt.y)");
+
 }
 
 wxRect
@@ -1232,60 +1222,56 @@
 
 void MyAutoScrollingWindow::OnDraw(wxDC& dc)
 {
-    dc.SetFont(m_font);
-    wxBrush normBrush(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)
-            , wxSOLID);
-    wxBrush selBrush(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT)
-            , wxSOLID);
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    const wxString str = sm_testData;
-    size_t strLength = str.length();
-    wxString::const_iterator str_i = str.begin();
+  static wxBitmap* pBM = NULL;
 
-    // draw the characters
-    // 1. for each update region
-    for (wxRegionIterator upd(GetUpdateRegion()); upd; ++upd) {
-        wxRect updRect = upd.GetRect();
-        wxRect updRectInGChars(DeviceCoordsToGraphicalChars(updRect));
-        // 2. for each row of chars in the update region
-        for (int chY = updRectInGChars.y
-                ; chY <= updRectInGChars.y + updRectInGChars.height; ++chY) {
-            // 3. for each character in the row
-            bool isFirstX = true;
-            for (int chX = updRectInGChars.x
-                    ; chX <= updRectInGChars.x + updRectInGChars.width
-                    ; ++chX) {
-                // 4. set up dc
-                if (IsSelected(chX, chY)) {
-                    dc.SetBrush(selBrush);
-                    dc.SetTextForeground( wxSystemSettings::GetColour
-                            (wxSYS_COLOUR_HIGHLIGHTTEXT));
-                } else {
-                    dc.SetBrush(normBrush);
-                    dc.SetTextForeground( wxSystemSettings::GetColour
-                            (wxSYS_COLOUR_WINDOWTEXT));
-                }
-                // 5. find position info
-                wxPoint charPos = GraphicalCharToLogicalCoords(wxPoint
-                        (chX, chY));
-                // 6. draw!
-                dc.DrawRectangle(charPos.x, charPos.y, m_fontW, m_fontH);
-                size_t charIndex = chY * sm_lineLen + chX;
-                if (chY < sm_lineCnt &&
-                    chX < sm_lineLen &&
-                    charIndex < strLength)
-                {
-                    if (isFirstX)
-                    {
-                        str_i = str.begin() + charIndex;
-                        isFirstX = false;
-                    }
-                    dc.DrawText(*str_i, charPos.x, charPos.y);
-                    ++str_i;
-                }
-            }
-        }
-    }
+  if (pBM == NULL)
+    pBM = new wxBitmap(500, 500);
+
+  wxBrush br1(*wxRED);
+  dc.SetBrush(br1);
+  int w, h;
+  dc.GetSize(&w, &h);
+  dc.DrawRectangle(0, 0, w, h);
+  dc.SetBrush(wxNullBrush);
+
+  wxMemoryDC bdc(&dc);
+
+  wxPoint pt = dc.GetDeviceOrigin();
+  wxSize sz(dc.GetSize());
+
+  bdc.SelectObject(*pBM);
+  wxBrush br2(*wxGREEN);
+  bdc.SetBrush(br2);
+  bdc.DrawRectangle(0, 0, 500, 500);
+  //dc.SetDeviceOrigin(pt.x, pt.y);
+  wxBrush br3(*wxWHITE);
+  bdc.SetBrush(br3);
+  bdc.DrawRectangle(10, 10, 480, 480);
+  bdc.SetBrush(wxNullBrush);
+
+/*  wxPen pen(*wxRED);
+  bdc.SetPen(pen);
+  bdc.DrawRectangle(wxRect(10, 10, 480, 480));
+  bdc.SetPen(wxNullPen);
+*/
+
+  if (m_option == 0)
+  {
+    bdc.DrawText(wxString::Format("0: dc.Blit(%d, %d, %d, %d, &bdc, %d, %d)", -pt.x, -pt.y, sz.x, sz.y, -pt.x, -pt.y), wxPoint(20 - pt.x, 100 - pt.y));
+    dc.Blit(-pt.x, -pt.y, sz.x, sz.y, &bdc, -pt.x, -pt.y);
+  }
+  else if (m_option == 1)
+  {
+    bdc.DrawText(wxString::Format("1: dc.Blit(%d, %d, %d, %d, &bdc, %d, %d)", 0, 0, sz.x, sz.y, -pt.x, -pt.y), wxPoint(20 - pt.x, 100 - pt.y));
+    dc.Blit(0, 0, sz.x, sz.y, &bdc, -pt.x, -pt.y);
+  }
+  else
+  {
+    bdc.DrawText(wxString::Format("2: dc.Blit(%d, %d, %d, %d, &bdc, %d, %d)", 0, 0, 500, 500, 0, 0), wxPoint(20 - pt.x, 100 - pt.y));
+    dc.Blit(0, 0, 500, 500, &bdc, 0, 0);
+  }
+
+  bdc.SelectObject(wxNullBitmap);
 }
 
 void MyAutoScrollingWindow::OnMouseLeftDown(wxMouseEvent& event)
@@ -1294,8 +1280,13 @@
     m_selStart = DeviceCoordsToGraphicalChars(event.GetPosition());
     // set the cursor to the same position
     m_cursor = m_selStart;
+
+    if (++m_option > 2)
+      m_option = 0;
+
     // draw/erase selection
     MyRefresh();
+    Refresh(false);
 }
 
 void MyAutoScrollingWindow::OnMouseLeftUp(wxMouseEvent& WXUNUSED(event))
@@ -1349,7 +1340,7 @@
             }
         }
     }
-    MyRefresh();
+    RefreshRect(wxRect(0, 0, 500, 500));
     event.Skip();
 }
 

Index: include/wx/scrolwin.h
===================================================================
--- include/wx/scrolwin.h	(revision 72706)
+++ include/wx/scrolwin.h	(working copy)
@@ -252,10 +252,6 @@
     // delete the event handler we installed
     void DeleteEvtHandler();
 
-    // calls wxScrollHelperEvtHandler::ResetDrawnFlag(), see explanation
-    // in wxScrollHelperEvtHandler::ProcessEvent()
-    void ResetDrawnFlag();
-
     // this function should be overridden to return the size available for
     // m_targetWindow inside m_win of the given size
     //
@@ -376,8 +372,6 @@
         this->MacSetClipChildren(true);
 #endif
 
-        this->Connect(wxEVT_PAINT, wxPaintEventHandler(wxScrolled::OnPaint));
-
         // by default, we're scrollable in both directions (but if one of the
         // styles is specified explicitly, we shouldn't add the other one
         // automatically)
@@ -408,16 +402,6 @@
     }
 
 private:
-    // this is needed for wxEVT_PAINT processing hack described in
-    // wxScrollHelperEvtHandler::ProcessEvent()
-    void OnPaint(wxPaintEvent& event)
-    {
-        // the user code didn't really draw the window if we got here, so set
-        // this flag to try to call OnDraw() later
-        ResetDrawnFlag();
-        event.Skip();
-    }
-
     // VC++ 6 gives warning for the declaration of template member function
     // without definition
 #ifndef __VISUALC6__
Index: src/generic/scrlwing.cpp
===================================================================
--- src/generic/scrlwing.cpp	(revision 72706)
+++ src/generic/scrlwing.cpp	(working copy)
@@ -79,13 +79,9 @@
 
     virtual bool ProcessEvent(wxEvent& event);
 
-    void ResetDrawnFlag() { m_hasDrawnWindow = false; }
-
 private:
     wxScrollHelperBase *m_scrollHelper;
 
-    bool m_hasDrawnWindow;
-
     wxDECLARE_NO_COPY_CLASS(wxScrollHelperEvtHandler);
 };
 
@@ -147,6 +143,7 @@
         // first scroll the window if we are allowed to do it
         wxScrollWinEvent event1(m_eventType, m_pos, m_orient);
         event1.SetEventObject(m_win);
+        event1.SetId(m_win->GetId());
         if ( m_scrollHelper->SendAutoScrollEvents(event1) &&
                 m_win->GetEventHandler()->ProcessEvent(event1) )
         {
@@ -197,11 +194,6 @@
     // OnPaint() first and call our HandleOnPaint() if it doesn't process it
     // (the latter would never be called in wxUniversal).
     //
-    // So the solution is to have a flag telling us whether the user code drew
-    // anything in the window. We set it to true here but reset it to false in
-    // wxScrolledWindow::OnPaint() handler (which wouldn't be called if the
-    // user code defined OnPaint() in the derived class)
-    m_hasDrawnWindow = true;
 
     // Pass it on to the real handler: notice that we must not call
     // ProcessEvent() on this object itself as it wouldn't pass it to the next
@@ -221,22 +213,22 @@
     if ( evType == wxEVT_SIZE )
     {
         m_scrollHelper->HandleOnSize((wxSizeEvent &)event);
-
         return true;
     }
 
-    if ( processed )
-    {
-        // normally, nothing more to do here - except if it was a paint event
-        // which wasn't really processed, then we'll try to call our
-        // OnDraw() below (from HandleOnPaint)
-        if ( m_hasDrawnWindow || event.IsCommandEvent() )
-        {
-            return true;
-        }
-    }
+    if ( processed && event.IsCommandEvent())
+        return true;
 
-    if ( evType == wxEVT_PAINT )
+    if (
+#ifndef __WXUNIVERSAL__
+          // in wxUniversal "processed" will always be true, because
+          // all windows use the paint event to draw themselves.
+          // In this case we can't use this flag to determine if a custom
+          // paint event handler already drew our window and we just
+          // call OnDraw() anyway
+          !processed &&
+#endif
+      evType == wxEVT_PAINT )
     {
         m_scrollHelper->HandleOnPaint((wxPaintEvent &)event);
         return true;
@@ -461,12 +453,6 @@
     }
 }
 
-void wxScrollHelperBase::ResetDrawnFlag()
-{
-    wxCHECK_RET( m_handler, "invalid use of ResetDrawnFlag - no handler?" );
-    m_handler->ResetDrawnFlag();
-}
-
 void wxScrollHelperBase::DoSetTargetWindow(wxWindow *target)
 {
     m_targetWindow = target;
@@ -858,6 +844,7 @@
 
     newEvent.SetPosition(0);
     newEvent.SetEventObject(m_win);
+    newEvent.SetId(m_win->GetId());
 
     // this is the default, it's changed to wxHORIZONTAL below if needed
     newEvent.SetOrientation(wxVERTICAL);

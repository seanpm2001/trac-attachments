diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/docs/latex/wx/text.tex wxWidgets/docs/latex/wx/text.tex
--- wxWidgets.orig/docs/latex/wx/text.tex	2006-10-09 15:08:44.000000000 +0300
+++ wxWidgets/docs/latex/wx/text.tex	2006-10-12 06:55:30.000000000 +0300
@@ -45,6 +45,8 @@
 it to always show it. It doesn't do anything under other platforms.}
 \twocolitem{\windowstyle{wxHSCROLL}}{A horizontal scrollbar will be created and
 used, so that text won't be wrapped. No effect under wxGTK1.}
+\twocolitem{\windowstyle{wxTE\_FORCE\_NO\_SCROLL}}{Disables scrollbars from the text control. This style is only supported
+for multi-line wxGTK2 text controls.}
 \twocolitem{\windowstyle{wxTE\_LEFT}}{The text in the control will be left-justified (default).}
 \twocolitem{\windowstyle{wxTE\_CENTRE}}{The text in the control will be centered (currently wxMSW and wxGTK2 only).}
 \twocolitem{\windowstyle{wxTE\_RIGHT}}{The text in the control will be right-justified (currently wxMSW and wxGTK2 only).}
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/include/wx/textctrl.h wxWidgets/include/wx/textctrl.h
--- wxWidgets.orig/include/wx/textctrl.h	2006-10-09 01:39:25.000000000 +0300
+++ wxWidgets/include/wx/textctrl.h	2006-10-12 06:03:48.000000000 +0300
@@ -75,7 +75,8 @@
 
 #define wxTE_NO_VSCROLL     0x0002
 #define wxTE_AUTO_SCROLL    0x0008
-
+// this is for wxGTK2 multiline controls only so far
+#define wxTE_FORCE_NO_SCROLL 0x10000
 #define wxTE_READONLY       0x0010
 #define wxTE_MULTILINE      0x0020
 #define wxTE_PROCESS_TAB    0x0040
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/src/gtk/textctrl.cpp wxWidgets/src/gtk/textctrl.cpp
--- wxWidgets.orig/src/gtk/textctrl.cpp	2006-10-11 16:45:44.000000000 +0300
+++ wxWidgets/src/gtk/textctrl.cpp	2006-10-12 06:31:22.000000000 +0300
@@ -708,15 +708,20 @@
 
         m_buffer = gtk_text_view_get_buffer( GTK_TEXT_VIEW(m_text) );
 
-        // create scrolled window
-        m_widget = gtk_scrolled_window_new( NULL, NULL );
-        gtk_scrolled_window_set_policy( GTK_SCROLLED_WINDOW( m_widget ),
-                                        GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC );
-        // for ScrollLines/Pages
-        m_scrollBar[1] = (GtkRange*)((GtkScrolledWindow*)m_widget)->vscrollbar;
-
-        // Insert view into scrolled window
-        gtk_container_add( GTK_CONTAINER(m_widget), m_text );
+        if( style & wxTE_FORCE_NO_SCROLL )
+            m_widget = m_text;
+        else
+        {
+            // create scrolled window
+            m_widget = gtk_scrolled_window_new( NULL, NULL );
+            gtk_scrolled_window_set_policy( GTK_SCROLLED_WINDOW( m_widget ),
+                                            GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC );
+            // for ScrollLines/Pages
+            m_scrollBar[1] = (GtkRange*)((GtkScrolledWindow*)m_widget)->vscrollbar;
+
+            // Insert view into scrolled window
+            gtk_container_add( GTK_CONTAINER(m_widget), m_text );
+	}
 
         // translate wx wrapping style to GTK+
         GtkWrapMode wrap;
@@ -741,11 +746,12 @@
 
         gtk_text_view_set_wrap_mode( GTK_TEXT_VIEW( m_text ), wrap );
 
-        GtkScrolledWindowSetBorder(m_widget, style);
+        if( !(style & wxTE_FORCE_NO_SCROLL) )
+            GtkScrolledWindowSetBorder(m_widget, style);
 
         gtk_widget_add_events( GTK_WIDGET(m_text), GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK );
-
-        GTK_WIDGET_UNSET_FLAGS( m_widget, GTK_CAN_FOCUS );
+        if( !(style & wxTE_FORCE_NO_SCROLL) )
+            GTK_WIDGET_UNSET_FLAGS( m_widget, GTK_CAN_FOCUS );
     }
     else
     {
@@ -1017,13 +1023,15 @@
 
         // Insert the text
         wxGtkTextInsert( m_text, m_buffer, m_defaultStyle, buffer );
-
-        GtkAdjustment *adj = gtk_scrolled_window_get_vadjustment( GTK_SCROLLED_WINDOW(m_widget) );
-        // Scroll to cursor, but only if scrollbar thumb is at the very bottom
-        if ( wxIsSameDouble(adj->value, adj->upper - adj->page_size) )
+        if( !HasFlag( wxTE_FORCE_NO_SCROLL ))
         {
-            gtk_text_view_scroll_to_mark( GTK_TEXT_VIEW(m_text),
-                    gtk_text_buffer_get_insert( m_buffer ), 0.0, FALSE, 0.0, 1.0 );
+            GtkAdjustment *adj = gtk_scrolled_window_get_vadjustment( GTK_SCROLLED_WINDOW(m_widget) );
+            // Scroll to cursor, but only if scrollbar thumb is at the very bottom
+            if ( wxIsSameDouble(adj->value, adj->upper - adj->page_size) )
+            {
+                gtk_text_view_scroll_to_mark( GTK_TEXT_VIEW(m_text),
+                        gtk_text_buffer_get_insert( m_buffer ), 0.0, FALSE, 0.0, 1.0 );
+            }
         }
     }
     else // single line
@@ -1190,11 +1198,12 @@
         GtkTextIter iter;
         gtk_text_buffer_get_iter_at_offset( m_buffer, &iter, pos );
         gtk_text_buffer_place_cursor( m_buffer, &iter );
-        gtk_text_view_scroll_mark_onscreen
-        (
-            GTK_TEXT_VIEW(m_text),
-            gtk_text_buffer_get_insert( m_buffer )
-        );
+        if ( ! HasFlag(wxTE_FORCE_NO_SCROLL))
+            gtk_text_view_scroll_mark_onscreen
+            (
+                GTK_TEXT_VIEW(m_text),
+                gtk_text_buffer_get_insert( m_buffer )
+            );
     }
     else
     {
@@ -1372,7 +1381,8 @@
         gtk_text_buffer_get_start_iter( m_buffer, &iter );
         gtk_text_iter_set_offset( &iter, pos );
         GtkTextMark *mark = gtk_text_buffer_create_mark( m_buffer, NULL, &iter, TRUE );
-        gtk_text_view_scroll_to_mark( GTK_TEXT_VIEW(m_text), mark, 0.0, FALSE, 0.0, 0.0 );
+        if( !HasFlag(wxTE_FORCE_NO_SCROLL))
+            gtk_text_view_scroll_to_mark( GTK_TEXT_VIEW(m_text), mark, 0.0, FALSE, 0.0, 0.0 );
     }
 }
 
@@ -1842,9 +1852,11 @@
             // freeze textview updates and remove buffer
             g_signal_connect (m_text, "expose_event",
                               G_CALLBACK (gtk_text_exposed_callback), this);
-            g_signal_connect (m_widget, "expose_event",
-                              G_CALLBACK (gtk_text_exposed_callback), this);
-            gtk_widget_set_sensitive(m_widget, false);
+            if( !HasFlag(wxTE_FORCE_NO_SCROLL))
+                g_signal_connect (m_widget, "expose_event",
+                                  G_CALLBACK (gtk_text_exposed_callback), this);
+            if( !HasFlag(wxTE_FORCE_NO_SCROLL))
+                gtk_widget_set_sensitive(m_widget, false);
             g_object_ref(m_buffer);
             gtk_text_view_set_buffer(GTK_TEXT_VIEW(m_text), gtk_text_buffer_new(NULL));
         }
@@ -1862,9 +1874,11 @@
             // Reattach buffer and thaw textview updates
             gtk_text_view_set_buffer(GTK_TEXT_VIEW(m_text), m_buffer);
             g_object_unref(m_buffer);
-            gtk_widget_set_sensitive(m_widget, true);
-            g_signal_handlers_disconnect_by_func (m_widget,
-                    (gpointer) gtk_text_exposed_callback, this);
+            if( !HasFlag(wxTE_FORCE_NO_SCROLL))
+                gtk_widget_set_sensitive(m_widget, true);
+            if( !HasFlag(wxTE_FORCE_NO_SCROLL))
+                g_signal_handlers_disconnect_by_func (m_widget,
+                        (gpointer) gtk_text_exposed_callback, this);
             g_signal_handlers_disconnect_by_func (m_text,
                     (gpointer) gtk_text_exposed_callback, this);
         }

 	  	 

Index: thread.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/thread.cpp,v
retrieving revision 1.75
diff -b -u -2 -r1.75 thread.cpp
--- thread.cpp	2003/08/09 12:46:30	1.75
+++ thread.cpp	2003/08/14 12:05:57
@@ -539,4 +539,5 @@
     // (politely, this is not Kill()!) to do it
     wxThreadError WaitForTerminate(bool shouldCancel,
+                                   bool& wasCancelled,
                                    wxCriticalSection& cs,
                                    wxThread::ExitCode *pRc);
@@ -717,4 +718,5 @@
 wxThreadError
 wxThreadInternal::WaitForTerminate(bool shouldCancel,
+                                   bool& wasCancelled,
                                    wxCriticalSection& cs,
                                    wxThread::ExitCode *pRc)
@@ -729,4 +731,6 @@
          isRunning = FALSE;
 
+    wasCancelled = FALSE;
+
     // check if the thread already started to run
     {
@@ -745,4 +749,5 @@
 
                 shouldCancel = FALSE;
+                wasCancelled = TRUE;
             }
 
@@ -761,5 +766,5 @@
         Resume();
 
-    // does is still run?
+    // is it still running?
     if ( isRunning || m_state == STATE_RUNNING )
     {
@@ -776,4 +781,6 @@
 
             Cancel();
+
+            wasCancelled = TRUE;
         }
 
@@ -1127,4 +1134,6 @@
 wxThread::ExitCode wxThread::Wait()
 {
+    bool dummy;
+
     // although under Windows we can wait for any thread, it's an error to
     // wait for a detached one in wxWin API
@@ -1134,5 +1143,5 @@
     ExitCode rc = (ExitCode)-1;
 
-    (void)m_internal->WaitForTerminate(false, m_critsect, &rc);
+    (void)m_internal->WaitForTerminate(false, dummy, m_critsect, &rc);
 
     m_internal->Free();
@@ -1146,7 +1155,10 @@
 wxThreadError wxThread::Delete(ExitCode *pRc)
 {
-    wxThreadError rc = m_internal->WaitForTerminate(true, m_critsect, pRc);
+    bool wasCancelled = FALSE;
+
+    wxThreadError rc = m_internal->WaitForTerminate(true, wasCancelled,
+                                                    m_critsect, pRc);
 
-    if ( IsDetached() )
+    if ( IsDetached() && wasCancelled )
     {
         delete this;

 	  	 

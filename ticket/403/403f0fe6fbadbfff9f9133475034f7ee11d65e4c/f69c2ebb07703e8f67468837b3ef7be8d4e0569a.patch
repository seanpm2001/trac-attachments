diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/configure wxBase-2.5.2.patched/configure
--- wxBase-2.5.2/configure	2004-05-30 13:43:29.000000000 -0700
+++ wxBase-2.5.2.patched/configure	2004-11-09 17:19:17.000000000 -0800
@@ -32337,6 +32337,4 @@
 fi
 
-
-
 EXTRALIBS_ESD=
 echo "$as_me:$LINENO: checking for esd_close in -lesd" >&5
@@ -35936,5 +35934,108 @@
     fi
 
+#check this only if $wxUSE_THREADS is yes
+if test "$wxUSE_THREADS" = yes; then
+   for ac_func in localtime_r gmtime_r
+   do
+   as_ac_var=`echo "ac_cv_func_$ac_func" | $as_tr_sh`
+   echo "$as_me:$LINENO: checking for $ac_func" >&5
+   echo $ECHO_N "checking for $ac_func... $ECHO_C" >&6
+   if eval "test \"\${$as_ac_var+set}\" = set"; then
+     echo $ECHO_N "(cached) $ECHO_C" >&6
+   else
+     cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+   cat confdefs.h >>conftest.$ac_ext
+   cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.
+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
+#define $ac_func innocuous_$ac_func
+
+/* System header to define __stub macros and hopefully few prototypes,
+    which can conflict with char $ac_func (); below.
+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+    <limits.h> exists even on freestanding compilers.  */
+
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+
+#undef $ac_func
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+/* The GNU C library defines this for functions which it implements
+    to always fail with ENOSYS.  Some functions are actually named
+    something starting with __ and the normal name is an alias.  */
+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)
+choke me
+#else
+char (*f) () = $ac_func;
+#endif
+#ifdef __cplusplus
+}
+#endif
+
+int
+main ()
+{
+return f != $ac_func;
+  ;
+  return 0;
+}
+_ACEOF
+   rm -f conftest.$ac_objext conftest$ac_exeext
+   if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+     (eval $ac_link) 2>conftest.er1
+     ac_status=$?
+     grep -v '^ *+' conftest.er1 >conftest.err
+     rm -f conftest.er1
+     cat conftest.err >&5
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); } &&
+	    { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+     { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+     (eval $ac_try) 2>&5
+     ac_status=$?
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); }; } &&
+	    { ac_try='test -s conftest$ac_exeext'
+     { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+     (eval $ac_try) 2>&5
+     ac_status=$?
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); }; }; then
+     eval "$as_ac_var=yes"
+   else
+     echo "$as_me: failed program was:" >&5
+   sed 's/^/| /' conftest.$ac_ext >&5
+
+   eval "$as_ac_var=no"
+   fi
+
+   rm -f conftest.err conftest.$ac_objext \
+         conftest$ac_exeext conftest.$ac_ext
+   fi
+   echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`" >&5
+   echo "${ECHO_T}`eval echo '${'$as_ac_var'}'`" >&6
+   if test `eval echo '${'$as_ac_var'}'` = yes; then
+  cat >>confdefs.h <<_ACEOF
+#define `echo "HAVE_$ac_func" | $as_tr_cpp` 1
+_ACEOF
 
+   fi
+   done
+fi
 
 for ac_func in gettimeofday ftime
@@ -36185,4 +36286,108 @@
 fi
 
+#check this only if $wxUSE_THREADS is yes
+if test "$wxUSE_THREADS" = yes; then
+   for ac_func in readdir_r
+   do
+   as_ac_var=`echo "ac_cv_func_$ac_func" | $as_tr_sh`
+   echo "$as_me:$LINENO: checking for $ac_func" >&5
+   echo $ECHO_N "checking for $ac_func... $ECHO_C" >&6
+   if eval "test \"\${$as_ac_var+set}\" = set"; then
+     echo $ECHO_N "(cached) $ECHO_C" >&6
+   else
+     cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+   cat confdefs.h >>conftest.$ac_ext
+   cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.
+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
+#define $ac_func innocuous_$ac_func
+
+/* System header to define __stub macros and hopefully few prototypes,
+    which can conflict with char $ac_func (); below.
+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+    <limits.h> exists even on freestanding compilers.  */
+
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+
+#undef $ac_func
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+/* The GNU C library defines this for functions which it implements
+    to always fail with ENOSYS.  Some functions are actually named
+    something starting with __ and the normal name is an alias.  */
+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)
+choke me
+#else
+char (*f) () = $ac_func;
+#endif
+#ifdef __cplusplus
+}
+#endif
+
+int
+main ()
+{
+return f != $ac_func;
+  ;
+  return 0;
+}
+_ACEOF
+   rm -f conftest.$ac_objext conftest$ac_exeext
+   if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+     (eval $ac_link) 2>conftest.er1
+     ac_status=$?
+     grep -v '^ *+' conftest.er1 >conftest.err
+     rm -f conftest.er1
+     cat conftest.err >&5
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); } &&
+	    { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+     { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+     (eval $ac_try) 2>&5
+     ac_status=$?
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); }; } &&
+	    { ac_try='test -s conftest$ac_exeext'
+     { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+     (eval $ac_try) 2>&5
+     ac_status=$?
+     echo "$as_me:$LINENO: \$? = $ac_status" >&5
+     (exit $ac_status); }; }; then
+     eval "$as_ac_var=yes"
+   else
+     echo "$as_me: failed program was:" >&5
+   sed 's/^/| /' conftest.$ac_ext >&5
+
+   eval "$as_ac_var=no"
+   fi
+
+   rm -f conftest.err conftest.$ac_objext \
+         conftest$ac_exeext conftest.$ac_ext
+   fi
+   echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`" >&5
+   echo "${ECHO_T}`eval echo '${'$as_ac_var'}'`" >&6
+   if test `eval echo '${'$as_ac_var'}'` = yes; then
+  cat >>confdefs.h <<_ACEOF
+#define `echo "HAVE_$ac_func" | $as_tr_cpp` 1
+_ACEOF
+
+   fi
+   done
+fi
 
 if test "$wxUSE_SOCKETS" = "yes"; then
@@ -36571,4 +36776,334 @@
 fi
 
+if test "$wxUSE_SOCKETS" = "yes" ; then
+
+if test "$wxUSE_THREADS" = "yes"
+then
+for ac_func in gethostbyname_r gethostbyaddr_r getservbyname_r
+do
+RESOLVE_LINK=""
+as_ac_var=`echo "ac_cv_func_$ac_func" | $as_tr_sh`
+echo "$as_me:$LINENO: checking for $ac_func" >&5
+echo $ECHO_N "checking for $ac_func... $ECHO_C" >&6
+if eval "test \"\${$as_ac_var+set}\" = set"; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  #set up LIBS to use INET_LINK
+  ac_check_lib_save_LIBS=$LIBS
+  LIBS="$INET_LINK $LIBS"
+  cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+/* Define $ac_func to an innocuous variant, in case <limits.h> declares $ac_func.
+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
+#define $ac_func innocuous_$ac_func
+
+/* System header to define __stub macros and hopefully few prototypes,
+    which can conflict with char $ac_func (); below.
+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+    <limits.h> exists even on freestanding compilers.  */
+
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+
+#undef $ac_func
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+/* The GNU C library defines this for functions which it implements
+    to always fail with ENOSYS.  Some functions are actually named
+    something starting with __ and the normal name is an alias.  */
+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)
+choke me
+#else
+char (*f) () = $ac_func;
+#endif
+#ifdef __cplusplus
+}
+#endif
+
+int
+main ()
+{
+return f != $ac_func;
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  eval "$as_ac_var=yes"
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+eval "$as_ac_var=no"
+fi
+rm -f conftest.err conftest.$ac_objext \
+      conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_var'}'`" >&5
+echo "${ECHO_T}`eval echo '${'$as_ac_var'}'`" >&6
+if test "`eval echo '${'$as_ac_var'}'`" = yes; then
+  cat >>confdefs.h <<_ACEOF
+#define `echo "HAVE_$ac_func" | $as_tr_cpp` 1 
+_ACEOF
+
+else
+
+     echo "$as_me:$LINENO: checking for $ac_func in -lnsl" >&5
+echo $ECHO_N "checking for $ac_func in -lnsl... $ECHO_C" >&6
+if test "`eval echo '${'ac_cv_lib_nsl_$ac_func+set'}'`" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lnsl  $LIBS"
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+int
+main ()
+{
+$ac_func ();
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  eval "ac_cv_lib_nsl_$ac_func=yes"
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+eval "ac_cv_lib_nsl_$ac_func=no"
+
+fi
+rm -f conftest.err conftest.$ac_objext \
+      conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+echo "$as_me:$LINENO: result: `eval echo '${'ac_cv_lib_nsl_$ac_func'}'`" >&5
+echo "${ECHO_T}`eval echo '${'ac_cv_lib_nsl_$ac_func'}'`" >&6
+if test "`eval echo '${'ac_cv_lib_nsl_$ac_func'}'`" = yes; then
+  RESOLVE_LINK="nsl"
+else
+
+                echo "$as_me:$LINENO: checking for $ac_func in -lresolv" >&5
+echo $ECHO_N "checking for $ac_func in -lresolv... $ECHO_C" >&6
+if test "`eval echo '${'ac_cv_lib_resolv_$ac_func+set'}'`" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lresolv  $LIBS"
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+int
+main ()
+{
+$ac_func ();
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  eval "ac_cv_lib_resolv_$ac_func=yes"
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+eval "ac_cv_lib_resolv_$ac_func=no"
+fi
+rm -f conftest.err conftest.$ac_objext \
+      conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+echo "$as_me:$LINENO: result: `eval echo '${'ac_cv_lib_resolv_$ac_func'}'`" >&5
+echo "${ECHO_T}`eval echo '${'ac_cv_lib_resolv_$ac_func'}'`" >&6
+if test "`eval echo '${'ac_cv_lib_resolv_$ac_func'}`" = yes; then
+  RESOLVE_LINK="resolv"
+else
+
+                        echo "$as_me:$LINENO: checking for $ac_func in -lsocket" >&5
+echo $ECHO_N "checking for $ac_func in -lsocket... $ECHO_C" >&6
+if test "`eval echo '${'ac_cv_lib_socket_$ac_func+set'}'`" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lsocket  $LIBS"
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char $ac_func ();
+int
+main ()
+{
+$ac_func ();
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  eval "ac_cv_lib_socket_$ac_func=yes"
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+eval "ac_cv_lib_socket_$ac_func=no"
+fi
+rm -f conftest.err conftest.$ac_objext \
+      conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+echo "$as_me:$LINENO: result: `eval echo '${'ac_cv_lib_socket_$ac_func'}'`" >&5
+echo "${ECHO_T}`eval echo '${'ac_cv_lib_socket_$ac_func'}'`" >&6
+if test "`eval echo '${'ac_cv_lib_socket_$ac_func'}'`" = yes; then
+  RESOLVE_LINK="socket"
+
+fi
+fi
+fi
+fi
+
+if test "x$RESOLVE_LINK" != "x"
+then
+    LIBS=" -l$RESOLVE_LINK $LIBS"
+    cat >>confdefs.h <<_ACEOF
+#define `echo "HAVE_$ac_func" | $as_tr_cpp` 1 
+_ACEOF
+fi
+
+done
+fi
+fi
+
 if test "$wxUSE_PROTOCOL" = "yes"; then
     if test "$wxUSE_SOCKETS" != "yes"; then
diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/include/wx/datetime.h wxBase-2.5.2.patched/include/wx/datetime.h
--- wxBase-2.5.2/include/wx/datetime.h	2004-05-30 13:43:30.000000000 -0700
+++ wxBase-2.5.2.patched/include/wx/datetime.h	2004-11-09 16:45:49.000000000 -0800
@@ -968,8 +968,17 @@
 
     // another one to get the current time broken down
+    // User re-entrant functions when threads are enabled
+    #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    static struct tm *GetTmNow(struct tm *tmstruct)
+    #else
     static struct tm *GetTmNow()
+    #endif
     {
         time_t t = GetTimeNow();
+        #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+        return localtime_r(&t,tmstruct);
+        #else
         return localtime(&t);
+        #endif
     }
 
@@ -1383,5 +1392,10 @@
 inline wxDateTime wxDateTime::Now()
 {
+    #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    return wxDateTime(*GetTmNow(&tmstruct));
+    #else
     return wxDateTime(*GetTmNow());
+    #endif
 }
 
@@ -1389,5 +1403,10 @@
 inline wxDateTime wxDateTime::Today()
 {
+    #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    struct tm *time = GetTmNow(&tmstruct);
+    #else
     struct tm *time = GetTmNow();
+    #endif
     time->tm_hour = 0;
     time->tm_min = 0;
diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/setup.h.in wxBase-2.5.2.patched/setup.h.in
--- wxBase-2.5.2/setup.h.in	2004-05-30 13:43:26.000000000 -0700
+++ wxBase-2.5.2.patched/setup.h.in	2004-11-09 16:14:42.000000000 -0800
@@ -1027,4 +1027,22 @@
 #undef HAVE_LOCALTIME
 
+/* Define if you have localtime_r() */
+#undef HAVE_LOCALTIME_R
+
+/* Define if you have gmtime_r() */
+#undef HAVE_GMTIME_R
+
+/* Define if you have readdir_r() */
+#undef HAVE_READDIR_R
+
+/* Define if you have gethostbyname_r() */
+#undef HAVE_GETHOSTBYNAME_R
+
+/* Define if you have gethostbyaddr_r() */
+#undef HAVE_GETHOSTBYADDR_R
+
+/* Define if you have getservbyname_r() */
+#undef HAVE_GETSERVBYNAME_R
+
 /* Define if you have nanosleep() */
 #undef HAVE_NANOSLEEP
diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/src/common/datetime.cpp wxBase-2.5.2.patched/src/common/datetime.cpp
--- wxBase-2.5.2/src/common/datetime.cpp	2004-05-30 13:43:32.000000000 -0700
+++ wxBase-2.5.2.patched/src/common/datetime.cpp	2004-11-09 17:12:33.000000000 -0800
@@ -280,4 +280,8 @@
     static long gmtoffset = LONG_MAX; // invalid timezone
 
+    #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    #endif
+
     // ensure that the timezone variable is set by calling localtime
     if ( !s_timezoneSet )
@@ -287,6 +291,10 @@
         time_t t = 0;
         struct tm *tm;
-
+        
+        #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+        tm = localtime_r(&t,&tmstruct);
+        #else
         tm = localtime(&t);
+        #endif
         s_timezoneSet = TRUE;
 
@@ -395,9 +403,15 @@
                                                wxDateTime::Month *month)
 {
+    #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    #define TMSTRUCT &tmstruct
+    #else
+    #define TMSTRUCT 
+    #endif
     struct tm *tmNow = NULL;
 
     if ( *year == wxDateTime::Inv_Year )
     {
-        tmNow = wxDateTime::GetTmNow();
+        tmNow = wxDateTime::GetTmNow(TMSTRUCT);
 
         *year = 1900 + tmNow->tm_year;
@@ -407,5 +421,5 @@
     {
         if ( !tmNow )
-            tmNow = wxDateTime::GetTmNow();
+            tmNow = wxDateTime::GetTmNow(TMSTRUCT);
 
         *month = (wxDateTime::Month)tmNow->tm_mon;
@@ -880,5 +894,10 @@
         // try to guess from the time zone name
         time_t t = time(NULL);
+        #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+        struct tm tmstruct;
+        struct tm *tm = localtime_r(&t,&tmstruct);
+        #else
         struct tm *tm = localtime(&t);
+        #endif
 
         wxString tz = CallStrftime(_T("%Z"), tm);
@@ -1196,4 +1215,11 @@
                             wxDateTime_t millisec)
 {
+    #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    #define TMSTRUCT &tmstruct
+    #else
+    #define TMSTRUCT 
+    #endif
+ 
     // we allow seconds to be 61 to account for the leap seconds, even if we
     // don't use them really
@@ -1205,7 +1231,11 @@
 
     // get the current date from system
-    struct tm *tm = GetTmNow();
+    struct tm *tm = GetTmNow(TMSTRUCT);
 
+    #if(defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    wxDATETIME_CHECK( tm, _T("localtime_r() failed") );
+    #else
     wxDATETIME_CHECK( tm, _T("localtime() failed") );
+    #endif
 
     // adjust the time
@@ -1361,5 +1391,10 @@
     unsigned long ddt;
     time_t ticks = GetTicks();
+    #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    struct tm *tm = localtime_r(&ticks,&tmstruct);
+    #else
     struct tm *tm = localtime(&ticks);
+    #endif
 
     long year = tm->tm_year;
@@ -1396,4 +1431,7 @@
 
     time_t time = GetTicks();
+    #if (defined wxUSE_THREADS && (defined HAVE_LOCALTIME_R || defined HAVE_GMTIME_R))
+    struct tm tmstruct;
+    #endif
     if ( time != (time_t)-1 )
     {
@@ -1403,8 +1441,13 @@
         {
             // we are working with local time
+            #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+            tm = localtime_r(&time,&tmstruct);
+            // should never happen
+            wxCHECK_MSG( tm, Tm(), _T("localtime_r() failed") );
+            #else
             tm = localtime(&time);
-
             // should never happen
             wxCHECK_MSG( tm, Tm(), _T("localtime() failed") );
+            #endif
         }
         else
@@ -1418,8 +1461,16 @@
 #endif
             {
+                #if (defined wxUSE_THREADS && defined HAVE_GMTIME_R)
+                tm = gmtime_r(&time,&tmstruct);
+
+                // should never happen
+                wxCHECK_MSG( tm, Tm(), _T("gmtime_r() failed") );
+                #else
                 tm = gmtime(&time);
 
                 // should never happen
                 wxCHECK_MSG( tm, Tm(), _T("gmtime() failed") );
+                #endif
+                
             }
             else
@@ -1932,11 +1983,20 @@
                  _T("country support not implemented") );
 
+    #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+    struct tm tmstruct;
+    #endif
+
     // use the C RTL for the dates in the standard range
     time_t timet = GetTicks();
     if ( timet != (time_t)-1 )
     {
+        
+        #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+        tm *tm = localtime_r(&timet,&tmstruct);
+        wxCHECK_MSG( tm, -1, _T("localtime_r() failed") );
+        #else
         tm *tm = localtime(&timet);
-
         wxCHECK_MSG( tm, -1, _T("localtime() failed") );
+        #endif
 
         return tm->tm_isdst;
@@ -1979,4 +2039,9 @@
     wxCHECK_MSG( format, _T(""), _T("NULL format in wxDateTime::Format") );
 
+    
+    #ifdef wxUSE_THREADS
+    struct tm tmstruct;
+    #endif
+
     // we have to use our own implementation if the date is out of range of
     // strftime() or if we use non standard specificators
@@ -1988,4 +2053,12 @@
         if ( tz.GetOffset() == -GetTimeZone() )
         {
+            
+            #if (defined wxUSE_THREADS && defined HAVE_LOCALTIME_R)
+            // we are working with local time
+            tm = localtime_r(&time,&tmstruct);
+
+            // should never happen
+            wxCHECK_MSG( tm, wxEmptyString, _T("localtime_r() failed") );
+            #else
             // we are working with local time
             tm = localtime(&time);
@@ -1993,4 +2066,5 @@
             // should never happen
             wxCHECK_MSG( tm, wxEmptyString, _T("localtime() failed") );
+            #endif
         }
         else
@@ -2005,8 +2079,16 @@
 #endif
             {
+               
+                #if (defined wxUSE_THREADS && defined HAVE_GMTIME_R)
+                tm = gmtime_r(&time,&tmstruct);
+
+                // should never happen
+                wxCHECK_MSG( tm, wxEmptyString, _T("gmtime_r() failed") );
+                #else
                 tm = gmtime(&time);
 
                 // should never happen
                 wxCHECK_MSG( tm, wxEmptyString, _T("gmtime() failed") );
+                #endif
             }
             else
diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/src/unix/dir.cpp wxBase-2.5.2.patched/src/unix/dir.cpp
--- wxBase-2.5.2/src/unix/dir.cpp	2004-05-30 13:43:34.000000000 -0700
+++ wxBase-2.5.2.patched/src/unix/dir.cpp	2004-11-09 17:13:09.000000000 -0800
@@ -123,4 +123,8 @@
     bool matches = FALSE;
 
+    #if (defined wxUSE_THREADS && defined HAVE_READDIR_R)
+    struct dirent tempdirent;
+    #endif
+
     // speed up string concatenation in the loop a bit
     wxString path = m_dirname;
@@ -132,5 +136,10 @@
     while ( !matches )
     {
+        #if (defined wxUSE_THREADS && defined HAVE_READDIR_R)
+        //Use re-entrant version of readdir
+        readdir_r(m_dir, &tempdirent, &de);
+        #else
         de = readdir(m_dir);
+        #endif
         if ( !de )
             return FALSE;
diff -r -U 2 -x'.#' -x'*.swp' -x'*~' wxBase-2.5.2/src/unix/gsocket.c wxBase-2.5.2.patched/src/unix/gsocket.c
--- wxBase-2.5.2/src/unix/gsocket.c	2004-07-26 14:02:27.000000000 -0700
+++ wxBase-2.5.2.patched/src/unix/gsocket.c	2004-11-18 11:22:35.000000000 -0800
@@ -1596,5 +1596,5 @@
 GSocketError GAddress_INET_SetHostName(GAddress *address, const char *hostname)
 {
-  struct hostent *he;
+  struct hostent *he=NULL;
   struct in_addr *addr;
 
@@ -1623,5 +1623,17 @@
 
     /* It is a real name, we solve it */
-    if ((he = gethostbyname(hostname)) == NULL)
+    #if (defined wxUSE_THREADS && defined HAVE_GETHOSTBYNAME_R)
+    struct hostent temphost;
+    char Buffer[16193];
+    int ErrorNum;
+    #ifdef __LINUX__
+    gethostbyname_r(hostname, &temphost, Buffer, 16192, &he, &ErrorNum);
+    #elif __UNIX__
+    he = gethostbyname_r(hostname, &temphost, Buffer, 16192, &ErrorNum);
+    #endif
+    #else
+    he = gethostbyname(hostname);
+    #endif
+    if(he == NULL)
     {
       /* Reset to invalid address */
@@ -1659,6 +1671,10 @@
                                        const char *protocol)
 {
-  struct servent *se;
+  struct servent *se=NULL;
   struct sockaddr_in *addr;
+  #if (defined wxUSE_THREADS && defined HAVE_GETSERVBYNAME_R)
+  struct servent serv;
+  char Buffer[8097];
+  #endif
 
   assert(address != NULL);
@@ -1670,6 +1686,14 @@
     return GSOCK_INVPORT;
   }
- 
+
+  #if (defined wxUSE_THREADS && defined HAVE_GETSERVBYNAME_R)
+  #ifdef __LINUX__
+  getservbyname_r(port, protocol, &serv, Buffer, 8096, &se);
+  #elif __UNIX__
+  se = getservbyname_r(port, protocol, &serv, Buffer, 8096);
+  #endif
+  #else
   se = getservbyname(port, protocol);
+  #endif
   if (!se)
   {
@@ -1711,7 +1735,12 @@
 GSocketError GAddress_INET_GetHostName(GAddress *address, char *hostname, size_t sbuf)
 {
-  struct hostent *he;
+  struct hostent *he=NULL;
   char *addr_buf;
   struct sockaddr_in *addr;
+  #if (defined wxUSE_THREADS && defined HAVE_GETHOSTBYADDR_R)
+  struct hostent temphost;
+  char Buffer[16193];
+  int ErrorNum;
+  #endif
 
   assert(address != NULL); 
@@ -1721,6 +1750,14 @@
   addr_buf = (char *)&(addr->sin_addr);
 
+  #if (defined wxUSE_THREADS && defined HAVE_GETHOSTBYADDR_R)
+  #ifdef __LINUX__
+  gethostbyaddr_r(addr_buf, sizeof(addr->sin_addr), AF_INET, &temphost, Buffer, 16192, &he, &ErrorNum);
+  #elif __UNIX__
+  he = gethostbyaddr_r(addr_buf, sizeof(addr->sin_addr), AF_INET, &temphost, Buffer, 16192, &ErrorNum);
+  #endif
+  #else
   he = gethostbyaddr(addr_buf, sizeof(addr->sin_addr), AF_INET);
-  if (he == NULL)
+  #endif
+  if(he == NULL)
   {
     address->m_error = GSOCK_NOHOST;

 	  	 

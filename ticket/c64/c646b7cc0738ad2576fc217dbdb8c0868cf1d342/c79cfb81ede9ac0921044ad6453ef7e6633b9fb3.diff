Index: src/common/textfile.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/textfile.cpp,v
retrieving revision 1.55
diff -r1.55 textfile.cpp
37a38,75
> #include "wx/strconv.h"
> 
> 
> // These two enums are for internal calculations
> enum wxUTF_BOM_Mask
> {
> 	wxUTF32_Mask = 0xFFFFFFFF,
> 	wxUTF16_Mask = 0xFFFF0000,
> 	wxUTF8_Mask  = 0xFFFFFF00
> };
> 
> enum wxUTF_BOM
> {
> 	wxUTF32_BE_BOM = 0x0000FEFF,
> 	wxUTF32_LE_BOM = 0xFFFE0000,
> 	wxUTF16_BE_BOM = 0xFEFF0000,
> 	wxUTF16_LE_BOM = 0xFFFE0000,
> 	wxUTF8_BOM	   = 0xEFBBBF00
> };
> 
> // This enum is a return value
> enum wxUTF_Type
> {
> 	wxUTF32_BE,
> 	wxUTF32_LE,
> 	wxUTF16_BE,
> 	wxUTF16_LE,
> 	wxUTF8,
> 	wxUTF_none
> };
> 
> // Pass this function an array with at least the first four bytes of
> // the string/file and it will read the BOM, returning what type of UTF file
> // is being read.
> wxUTF_Type	wxReadBOM( const char pData[4] );
> 
> wxMBConv*	wxCreateMVConvFromBOM( const char pData[4] );
> 
104a143,145
> 	wxMBConv * pConverter = &conv;
> 	wxUTF_Type file_type = wxUTF_none;
> 
112a154,155
> 			if ( pConverter != &conv )
> 				delete pConverter;
139c182,189
<     const wxString str(buf, conv);
---
> 	if ( ( pConverter == &conv ) && ( file_type == wxUTF_none ) && ( bufPos >= 4 ) )
> 	{
> 		pConverter = wxCreateMVConvFromBOM( buf );
> 		if ( pConverter == NULL )
> 			pConverter = &conv;
> 	}
> 
>     const wxString str(buf, *pConverter);
209a260,262
> 	if ( pConverter != &conv )
> 		delete pConverter;
> 
241a295,425
> 
> 
> 
> 
> 
> wxUTF_Type wxReadBOM( const char pData[4]  )
> {
> 	wxUint32 data = 0;
> 	for( size_t i = 0; i < 4; i++ )
> 	{
> 		data = data << 8;
> //		#ifdef WORDS_BIGENDIAN
> 		// The values for the calculation are set up as big endian.  Therefore, the results
> 		// of the following calculations may look backwards in debuggers on LE machines.
> 			if ( i < WXSIZEOF( pData ) ) // this should enable the function to continue working if less than four bytes are given.
> 				data += wxUint8( pData[i] );
> //		#else
> //			if ( 3 - i < WXSIZEOF( pData ) ) // this should enable the function to continue working if less than four bytes are given.
> //				data += wxUint8( pData[3 - i] );
> //		#endif
> 	}
> 	
> 	wxUTF_Type output = wxUTF_none;
> 	
> 	if ( WXSIZEOF( pData ) >= 3 )
> 	{
> 		switch ( data & wxUTF8_Mask )
> 		{
> 			case wxUTF8_BOM:
> 				output = wxUTF8;
> 				break;
> 				
> 			default:
> 				output = wxUTF_none;
> 				break;
> 		}
> 		
> 		if ( output != wxUTF_none )
> 			return output;
> 	}
> 	
> 	// we have to check for 32 bit before 16 bit
> 	if ( WXSIZEOF( pData ) >= 4 )
> 	{
> 		switch ( data & wxUTF32_Mask )
> 		{
> 			case wxUTF32_BE_BOM:
> 				output = wxUTF32_BE;
> 				break;
> 				
> 			case wxUTF32_LE_BOM:
> 				output = wxUTF32_LE;
> 				break;
> 				
> 			default:
> 				output = wxUTF_none;
> 				break;
> 		}
> 		
> 		if ( output != wxUTF_none )
> 			return output;
> 	}
> 
> 	if ( WXSIZEOF( pData ) >= 2 )
> 	{
> 		switch ( data & wxUTF16_Mask )
> 		{
> 			case wxUTF16_LE_BOM:
> 				output = wxUTF16_LE;
> 				break;
> 				
> 			case wxUTF16_BE_BOM:
> 				output = wxUTF16_BE;
> 				break;
> 				
> 			default:
> 				output = wxUTF_none;
> 				break;
> 		}
> 		
> 		if ( output != wxUTF_none )
> 			return output;
> 	}
> 
> 	return output;
> }
> 
> 
> 
> wxMBConv* wxCreateMVConvFromBOM( const char pData[4] )
> {
> 	wxMBConv * pConverter = NULL;
> 	
> 	wxUTF_Type file_type = wxReadBOM( pData );
> 	
> 	switch ( file_type )
> 	{
> 		case wxUTF32_BE:
> 			pConverter = new wxMBConvUTF32BE;
> 			break;
> 		
> 		case wxUTF32_LE:
> 			pConverter = new wxMBConvUTF32LE;
> 			break;
> 			
> 		case wxUTF16_BE:
> 			pConverter = new wxMBConvUTF16BE;
> 			break;
> 			
> 		case wxUTF16_LE:
> 			pConverter = new wxMBConvUTF16LE;
> 			break;
> 			
> 		case wxUTF8:
> 			pConverter = new wxMBConvUTF8;
> 			break;
> 			
> 		case wxUTF_none:
> 		default:
> 			pConverter = NULL;
> 			break;
> 	}
> 
> 	return pConverter;
> }
> 
> 
> 
> 
> 
> 

 	  	 

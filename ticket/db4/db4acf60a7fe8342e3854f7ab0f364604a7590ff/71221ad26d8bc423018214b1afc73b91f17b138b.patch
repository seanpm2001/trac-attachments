Index: include/wx/protocol/protocol.h
===================================================================
--- include/wx/protocol/protocol.h	(revision 63463)
+++ include/wx/protocol/protocol.h	(working copy)
@@ -67,7 +67,7 @@
 
     // read a '\r\n' terminated line from the given socket and put it in
     // result (without the terminators)
-    static wxProtocolError ReadLine(wxSocketBase *socket, wxString& result);
+    static wxProtocolError ReadLine(wxSocketBase *socket, wxString& result, bool allowUTF8 = false);
 
     // read a line from this socket - this one can be overridden in the
     // derived classes if different line termination convention is to be used
Index: src/common/ftp.cpp
===================================================================
--- src/common/ftp.cpp	(revision 63463)
+++ src/common/ftp.cpp	(working copy)
@@ -292,7 +292,7 @@
     while ( !endOfReply && !badReply )
     {
         wxString line;
-        m_lastError = ReadLine(this,line);
+        m_lastError = ReadLine(this, line, true);
         if ( m_lastError )
         {
             m_bEncounteredError = true;
@@ -850,7 +850,7 @@
     }
 
     files.Empty();
-    while (ReadLine(sock, line) == wxPROTO_NOERR )
+    while (ReadLine(sock, line, true) == wxPROTO_NOERR )
     {
         files.Add(line);
     }
Index: src/common/protocol.cpp
===================================================================
--- src/common/protocol.cpp	(revision 63463)
+++ src/common/protocol.cpp	(working copy)
@@ -110,12 +110,13 @@
 // ----------------------------------------------------------------------------
 
 /* static */
-wxProtocolError wxProtocol::ReadLine(wxSocketBase *sock, wxString& result)
+wxProtocolError wxProtocol::ReadLine(wxSocketBase *sock, wxString& result, bool allowUTF8)
 {
     static const int LINE_BUF = 4095;
 
     result.clear();
 
+    wxCharBuffer output;
     wxCharBuffer buf(LINE_BUF);
     char *pBuf = buf.data();
     while ( sock->WaitForRead() )
@@ -166,11 +167,19 @@
         if ( sock->LastCount() != nRead )
             return wxPROTO_NETERR;
 
-        pBuf[nRead] = '\0';
-        result += wxString::FromAscii(pBuf);
+        size_t offset = output.length();
+        output.extend(offset + nRead);
+        char* pOutBuf = output.data() + offset;
+        memcpy(pOutBuf, pBuf, nRead);
 
         if ( eol )
         {
+            output.data()[output.length()] = 0;
+            if (allowUTF8)
+                result = wxString::FromUTF8(output.data());
+            else
+                result = wxString::FromAscii(output.data());
+
             // remove trailing "\r\n"
             result.RemoveLast(2);
 

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 64310)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3275,6 +3275,7 @@
     src/xrc/xh_propdlg.cpp
     src/xrc/xh_radbt.cpp
     src/xrc/xh_radbx.cpp
+    src/xrc/xh_ribbon.cpp
     <!-- disabled until linking problems are fixed -->
     <!-- src/xrc/xh_richtext.cpp -->
     src/xrc/xh_scrol.cpp
@@ -3341,6 +3342,7 @@
     wx/xrc/xh_propdlg.h
     wx/xrc/xh_radbt.h
     wx/xrc/xh_radbx.h
+    wx/xrc/xh_ribbon.h
     <!-- wx/xrc/xh_richtext.h -->
     wx/xrc/xh_scrol.h
     wx/xrc/xh_scwin.h
Index: include/wx/xrc/xh_all.h
===================================================================
--- include/wx/xrc/xh_all.h	(revision 64310)
+++ include/wx/xrc/xh_all.h	(working copy)
@@ -53,6 +53,7 @@
 #include "wx/xrc/xh_propdlg.h"
 #include "wx/xrc/xh_radbt.h"
 #include "wx/xrc/xh_radbx.h"
+#include "wx/xrc/xh_ribbon.h"
 #include "wx/xrc/xh_scrol.h"
 #include "wx/xrc/xh_scwin.h"
 #include "wx/xrc/xh_sizer.h"
Index: include/wx/xrc/xh_ribbon.h
===================================================================
--- include/wx/xrc/xh_ribbon.h	(revision 0)
+++ include/wx/xrc/xh_ribbon.h	(revision 0)
@@ -0,0 +1,48 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_ribbon.h
+// Purpose:     XML resource handler for wxRibbon related classes
+// Author:      Armel Asselin
+// Created:     2010-04-23
+// RCS-ID:      $Id:  $
+// Copyright:   (c) 2010 Armel Asselin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_RIBBON_H_
+#define _WX_XH_RIBBON_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_RIBBON
+
+class WXDLLIMPEXP_RIBBON wxRibbonControl;
+
+class WXDLLIMPEXP_XRC wxRibbonXmlHandler : public wxXmlResourceHandler
+{
+    DECLARE_DYNAMIC_CLASS(wxRibbonXmlHandler)
+
+public:
+    wxRibbonXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    const wxClassInfo *m_isInside;
+
+    bool IsRibbonControl (wxXmlNode *node);
+
+    wxObject* Handle_buttonbar();
+    wxObject* Handle_button();
+    wxObject* Handle_control();
+    wxObject* Handle_page();
+    wxObject* Handle_gallery();
+    wxObject* Handle_galleryitem();
+    wxObject* Handle_panel();
+    wxObject* Handle_bar();
+
+    void Handle_RibbonArtProvider(wxRibbonControl *control);
+};
+
+#endif // wxUSE_XRC && wxUSE_ANIMATIONCTRL
+
+#endif // _WX_XH_ANIMATIONCTRL_H_
Index: samples/xrc/rc/controls.xrc
===================================================================
--- samples/xrc/rc/controls.xrc	(revision 64310)
+++ samples/xrc/rc/controls.xrc	(working copy)
@@ -763,6 +763,51 @@
                     </object>
                 </object>
                 <object class="notebookpage">
+                    <label>wxRibbonBar</label>
+                    <object class="wxRibbonBar" name="ribbonbar">
+                        <object class="page" name="RibbonPage1">
+                            <label>First</label>
+                            <object class="panel">
+                                <label>Applicative stuff</label>
+                                <object class="wxRibbonButtonBar">
+                                    <object class="button" name="App">
+                                        <bitmap>appicon.xpm</bitmap>
+                                        <label>Application</label>
+                                    </object>
+                                    <object class="button" name="App2">
+                                        <bitmap>appicon.xpm</bitmap>
+                                        <label>App 2</label>
+                                    </object>
+                                    <object class="button" name="App3">
+                                        <bitmap>appicon.xpm</bitmap>
+                                        <label>App 3</label>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                        <object class="page" name="RibbonPage2">
+                            <label>Second page</label>
+                            <object class="panel">
+                                <label>Gallery test</label>
+                                <object class="wxRibbonGallery">
+                                    <object class="item">
+                                        <bitmap>derivdlg.xpm</bitmap>
+                                    </object>
+                                    <object class="item">
+                                        <bitmap>basicdlg.xpm</bitmap>
+                                    </object>
+                                    <object class="item">
+                                        <bitmap>custclas.xpm</bitmap>
+                                    </object>
+                                    <object class="item">
+                                        <bitmap>artprov.xpm</bitmap>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+                <object class="notebookpage">
                     <label>wxScrollBar</label>
                     <object class="wxPanel" name="scrollbar">
                         <object class="wxFlexGridSizer">
Index: src/xrc/xh_ribbon.cpp
===================================================================
--- src/xrc/xh_ribbon.cpp	(revision 0)
+++ src/xrc/xh_ribbon.cpp	(revision 0)
@@ -0,0 +1,305 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_ribbon.cpp
+// Purpose:     XML resource handler for wxRibbon related classes
+// Author:      Armel Asselin
+// Created:     2010-04-23
+// RCS-ID:      $Id:  $
+// Copyright:   (c) 2010 Armel Asselin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_RIBBON
+
+#include "wx/xrc/xh_ribbon.h"
+#include "wx/ribbon/bar.h"
+#include "wx/ribbon/buttonbar.h"
+#include "wx/ribbon/gallery.h"
+
+template <class temp_t>
+class TemporaryInitializer
+{
+public:
+    TemporaryInitializer (temp_t& toBeInitialized, temp_t value)
+        : m_toBeInitialized(toBeInitialized), m_oldValue(toBeInitialized) {
+            m_toBeInitialized = value;
+        }
+    ~TemporaryInitializer() {
+        m_toBeInitialized = m_oldValue;
+    }
+
+private:
+    temp_t &m_toBeInitialized;
+    temp_t m_oldValue;
+};
+
+// ribbonbars can contain only pages
+// pages are optimized for panels but may contain any wxWindow
+// panels are optimized for wxRibbonControls but may as well contain any wxWindow
+// galleries are wxRibbonControl and simply contain bitmaps with IDs
+// buttonbars are wxRibbonControl and contain buttons (normal/dropdown/mixed), with id/bitmap/label/short help
+
+IMPLEMENT_DYNAMIC_CLASS(wxRibbonXmlHandler, wxXmlResourceHandler)
+
+wxRibbonXmlHandler::wxRibbonXmlHandler()
+                   :wxXmlResourceHandler(), m_isInside(NULL)
+{
+    XRC_ADD_STYLE (wxRIBBON_BAR_SHOW_PAGE_LABELS);
+    XRC_ADD_STYLE (wxRIBBON_BAR_SHOW_PAGE_ICONS);
+    XRC_ADD_STYLE (wxRIBBON_BAR_FLOW_HORIZONTAL);
+    XRC_ADD_STYLE (wxRIBBON_BAR_FLOW_VERTICAL);
+    XRC_ADD_STYLE (wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS);
+    XRC_ADD_STYLE (wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS);
+    XRC_ADD_STYLE (wxRIBBON_BAR_ALWAYS_SHOW_TABS);
+    XRC_ADD_STYLE (wxRIBBON_BAR_DEFAULT_STYLE);
+    XRC_ADD_STYLE (wxRIBBON_BAR_FOLDBAR_STYLE);
+}
+
+wxObject *wxRibbonXmlHandler::DoCreateResource()
+{
+    if (m_class == wxT("button"))
+        return Handle_button();
+    if (m_class == wxT("wxRibbonButtonBar"))
+        return Handle_buttonbar();
+    else if (m_class == wxT("item"))
+        return Handle_galleryitem();
+    else if (m_class == wxT("wxRibbonGallery"))
+        return Handle_gallery();
+    else if (m_class == wxT("wxRibbonPanel") || m_class == wxT("panel"))
+        return Handle_panel();
+    else if (m_class == wxT("wxRibbonPage") || m_class == wxT("page"))
+        return Handle_page();
+    else if (m_class == wxT("wxRibbonBar"))
+        return Handle_bar();
+    else 
+        return Handle_control ();
+}
+
+bool wxRibbonXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return IsRibbonControl(node) ||
+           ( m_isInside==&wxRibbonButtonBar::ms_classInfo && IsOfClass(node, wxT("button"))) ||
+           ( m_isInside==&wxRibbonBar::ms_classInfo && IsOfClass(node, wxT("page"))) ||
+           ( m_isInside==&wxRibbonPage::ms_classInfo && IsOfClass(node, wxT("panel"))) ||
+           ( m_isInside==&wxRibbonGallery::ms_classInfo && IsOfClass(node, wxT("item")));
+}
+
+bool wxRibbonXmlHandler::IsRibbonControl (wxXmlNode *node)
+{
+    return IsOfClass(node, wxT("wxRibbonBar")) ||
+           IsOfClass(node, wxT("wxRibbonButtonBar")) ||
+           IsOfClass(node, wxT("wxRibbonPage")) ||
+           IsOfClass(node, wxT("wxRibbonPanel")) ||
+           IsOfClass(node, wxT("wxRibbonGallery")) ||
+           IsOfClass(node, wxT("wxRibbonControl"));
+}
+
+void wxRibbonXmlHandler::Handle_RibbonArtProvider(wxRibbonControl *control)
+{
+    wxString provider = GetText("art-provider", false);
+
+    if (provider == "default" || provider.IsEmpty())
+        control->SetArtProvider(new wxRibbonDefaultArtProvider);
+    else if (provider.CmpNoCase("aui") == 0)
+        control->SetArtProvider(new wxRibbonAUIArtProvider);
+    else if (provider.CmpNoCase("msw") == 0)
+        control->SetArtProvider(new wxRibbonMSWArtProvider);
+    else
+        ReportError("invalid ribbon art provider");
+}
+
+wxObject* wxRibbonXmlHandler::Handle_buttonbar()
+{
+    XRC_MAKE_INSTANCE (buttonBar, wxRibbonButtonBar);
+
+    if (!buttonBar->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
+            GetPosition(), GetSize(), GetStyle()))
+    {
+        ReportError("could not create ribbon panel");
+    }
+    else
+    {
+        TemporaryInitializer<const wxClassInfo*> isInsideSetter(m_isInside, &wxRibbonButtonBar::ms_classInfo);
+        CreateChildren (buttonBar, true);
+
+        buttonBar->Realize();
+    }
+
+    return buttonBar;
+}
+
+wxObject* wxRibbonXmlHandler::Handle_button()
+{
+    wxRibbonButtonBar *buttonBar = wxStaticCast(m_parent, wxRibbonButtonBar);
+
+    wxRibbonButtonKind  kind = wxRIBBON_BUTTON_NORMAL;
+
+    if (GetBool(wxT("hybrid")))
+        kind = wxRIBBON_BUTTON_HYBRID;
+    
+#if wxUSE_MENUS
+    // check whether we have dropdown tag inside
+    wxMenu *menu = NULL; // menu for drop down items
+    wxXmlNode * const nodeDropdown = GetParamNode("dropdown");
+    if ( nodeDropdown )
+    {
+        if (kind == wxRIBBON_BUTTON_NORMAL)
+            kind = wxRIBBON_BUTTON_DROPDOWN;
+
+        // also check for the menu specified inside dropdown (it is
+        // optional and may be absent for e.g. dynamically-created
+        // menus)
+        wxXmlNode * const nodeMenu = nodeDropdown->GetChildren();
+        if ( nodeMenu )
+        {
+            wxObject *res = CreateResFromNode(nodeMenu, NULL);
+            menu = wxDynamicCast(res, wxMenu);
+            if ( !menu )
+            {
+                ReportError
+                (
+                    nodeMenu,
+                    "drop-down tool contents can only be a wxMenu"
+                );
+            }
+
+            if ( nodeMenu->GetNext() )
+            {
+                ReportError
+                (
+                    nodeMenu->GetNext(),
+                    "unexpected extra contents under drop-down tool"
+                );
+            }
+        }
+    }
+#endif
+
+    if (!buttonBar->AddButton (GetID(), GetText("label"), GetBitmap ("bitmap"), GetBitmap ("small-bitmap"), 
+        GetBitmap ("disabled-bitmap"), GetBitmap ("small-disabled-bitmap"), kind, GetText("help")))
+    {
+        ReportError ("could not create button");
+    }
+
+    if ( GetBool(wxT("disabled")) )
+            buttonBar->EnableButton(GetID(), false);
+
+    return NULL; // nothing to return
+}
+
+wxObject* wxRibbonXmlHandler::Handle_control()
+{
+    wxRibbonControl *control = wxDynamicCast (m_instance, wxRibbonControl);
+
+    if (!m_instance)
+        ReportError("controls must be sub-classed, wxRibbonControl is a virtual class");
+    else if (!control)
+        ReportError("controls must derive from wxRibbonControl");
+
+    control->Create (wxDynamicCast(m_parent, wxWindow), GetID(), GetPosition(), GetSize(), GetStyle());
+
+    return m_instance;
+}
+
+wxObject* wxRibbonXmlHandler::Handle_page()
+{
+    XRC_MAKE_INSTANCE (ribbonPage, wxRibbonPage);
+
+    if (!ribbonPage->Create (wxDynamicCast(m_parent, wxRibbonBar), GetID(),
+            GetText ("label"), GetBitmap ("icon"), GetStyle()))
+    {
+        ReportError("could not create ribbon page");
+    }
+    else
+    {
+        TemporaryInitializer<const wxClassInfo*> isInsideSetter(m_isInside, &wxRibbonPage::ms_classInfo);
+        CreateChildren (ribbonPage);
+        
+        ribbonPage->Realize();
+    }
+
+    return ribbonPage;
+}
+
+wxObject* wxRibbonXmlHandler::Handle_gallery()
+{
+    XRC_MAKE_INSTANCE (ribbonGallery, wxRibbonGallery);
+
+    if (!ribbonGallery->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
+            GetPosition(), GetSize(), GetStyle()))
+    {
+        ReportError("could not create ribbon gallery");
+    }
+    else
+    {
+        TemporaryInitializer<const wxClassInfo*> isInsideSetter(m_isInside, &wxRibbonGallery::ms_classInfo);
+        CreateChildren (ribbonGallery);
+
+        ribbonGallery->Realize();
+    }
+
+    return ribbonGallery;
+}
+
+wxObject* wxRibbonXmlHandler::Handle_galleryitem()
+{
+    wxRibbonGallery *gallery = wxStaticCast(m_parent, wxRibbonGallery);
+    wxCHECK (gallery, NULL);
+
+    gallery->Append (GetBitmap(), GetID());
+
+    return NULL; // nothing to return
+}
+
+wxObject* wxRibbonXmlHandler::Handle_panel()
+{
+    XRC_MAKE_INSTANCE (ribbonPanel, wxRibbonPanel);
+
+    if (!ribbonPanel->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
+            GetText ("label"), GetBitmap ("icon"), GetPosition(), GetSize(), 
+            GetStyle("style", wxRIBBON_PANEL_DEFAULT_STYLE)))
+    {
+        ReportError("could not create ribbon panel");
+    }
+    else
+    {
+        CreateChildren (ribbonPanel);
+
+        ribbonPanel->Realize();
+    }
+
+    return ribbonPanel;
+}
+
+wxObject* wxRibbonXmlHandler::Handle_bar()
+{
+    XRC_MAKE_INSTANCE (ribbonBar, wxRibbonBar);
+
+    Handle_RibbonArtProvider (ribbonBar);
+
+    if (!ribbonBar->Create (wxDynamicCast(m_parent, wxWindow), GetID(), GetPosition(), GetSize(), GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE)))
+    {
+        ReportError ("could not create ribbonbar");
+    }
+    else
+    {
+        // strange, m_flags member of the bar needs to be duplicated in art provider...
+        ribbonBar->GetArtProvider()->SetFlags(GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE));
+
+        TemporaryInitializer<const wxClassInfo*> isInsideSetter(m_isInside, &wxRibbonBar::ms_classInfo);
+        CreateChildren (ribbonBar, true);
+
+        ribbonBar->Realize();
+    }
+
+    return ribbonBar;
+}
+
+
+#endif // wxUSE_XRC && wxUSE_RIBBON
Index: src/xrc/xmlrsall.cpp
===================================================================
--- src/xrc/xmlrsall.cpp	(revision 64310)
+++ src/xrc/xmlrsall.cpp	(working copy)
@@ -140,6 +140,9 @@
 #if wxUSE_RADIOBTN
     AddHandler(new wxRadioButtonXmlHandler);
 #endif
+#if wxUSE_RIBBON
+    AddHandler(new wxRibbonXmlHandler);
+#endif
 #if 0 && wxUSE_RICHTEXT
     AddHandler(new wxRichTextCtrlXmlHandler);
 #endif

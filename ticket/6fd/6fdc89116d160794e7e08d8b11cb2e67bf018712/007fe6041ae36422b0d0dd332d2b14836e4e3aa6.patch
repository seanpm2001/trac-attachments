diff -ru wxWidgets/src/common/containr.cpp wxWidgets-patched/src/common/containr.cpp
--- wxWidgets/src/common/containr.cpp	2005-02-20 01:45:10.000000000 +0100
+++ wxWidgets-patched/src/common/containr.cpp	2005-08-31 20:27:31.000000000 +0200
@@ -40,7 +40,7 @@
     #include "wx/scrolbar.h"
 #endif
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__) || defined(__WXGTK__)
     #include "wx/radiobut.h"
 #endif
 
@@ -158,7 +158,7 @@
 // within the same group. Used by wxSetFocusToChild on wxMSW
 // --------------------------------------------------------------------
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__) || defined(__WXGTK__)
 
 wxRadioButton* wxGetPreviousButtonInGroup(wxRadioButton *btn)
 {
@@ -256,7 +256,7 @@
     return NULL;
 }
 
-#endif // __WXMSW__
+#endif // __WXMSW__ or __WXGTK__
 
 // ----------------------------------------------------------------------------
 // Keyboard handling - this is the place where the TAB traversal logic is
@@ -329,7 +329,7 @@
 
         if ( winFocus )
         {
-#ifdef __WXMSW__
+#if defined(__WXMSW__) || defined(__WXGTK__)
             // If we are in a radio button group, start from the first item in the
             // group
             if ( event.IsFromTab() && wxIsKindOf(winFocus, wxRadioButton ) )
@@ -402,7 +402,7 @@
 
         wxWindow *child = node->GetData();
 
-#ifdef __WXMSW__
+#if defined(__WXMSW__) || defined(__WXGTK__)
         bool canSelectRadioButton = true;
         if (!event.IsFromTab())
         {
@@ -433,7 +433,7 @@
         }
 #else
         static bool canSelectRadioButton = true;
-#endif
+#endif // __WXMSW__ || __WXGTK__
 
         if ( child->AcceptsFocusFromKeyboard() && canSelectRadioButton )
         {
@@ -443,17 +443,17 @@
             // direction we're coming
             event.SetEventObject(m_winParent);
 
-#if defined(__WXMSW__)
+#if defined(__WXMSW__) || defined(__WXGTK__)
             // we need to hop to the next activated
             // radio button, not just the next radio
-            // button under MSW
+            // button 
             if (wxIsKindOf(child, wxRadioButton) && event.IsFromTab())
             {
                 wxRadioButton *rb = wxGetSelectedButtonInGroup((wxRadioButton*)child);
                 if (rb)
                     child = rb;
             }
-#endif // __WXMSW__
+#endif // __WXMSW__ or __WXGTK__
 
             // disable propagation for this call as otherwise the event might
             // bounce back to us.
diff -ru wxWidgets/src/gtk/radiobut.cpp wxWidgets-patched/src/gtk/radiobut.cpp
--- wxWidgets/src/gtk/radiobut.cpp	2005-03-22 00:42:18.000000000 +0100
+++ wxWidgets-patched/src/gtk/radiobut.cpp	2005-08-31 20:27:32.000000000 +0200
@@ -20,6 +20,7 @@
 #include "wx/radiobut.h"
 
 #include "wx/gtk/private.h"
+#include <gdk/gdkkeysyms.h>
 
 //-----------------------------------------------------------------------------
 // idle system
@@ -59,6 +60,58 @@
     event.SetEventObject( rb );
     rb->GetEventHandler()->ProcessEvent( event );
 }
+static
+gint gtk_radiobut_keypress_callback( GtkWidget *widget, GdkEventKey *gdk_event, wxRadioButton *rb )
+{
+    if (!rb->m_hasVMT) return FALSE;
+    if (g_blockEventsOnDrag) return FALSE;
+
+    if ((gdk_event->keyval != GDK_Up) &&
+        (gdk_event->keyval != GDK_Down) &&
+        (gdk_event->keyval != GDK_Left) &&
+        (gdk_event->keyval != GDK_Right))
+    {
+        return FALSE;
+    }
+
+    gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "key_press_event" );
+
+    GSList* m_radioButtonGroup = gtk_radio_button_get_group ( GTK_RADIO_BUTTON( widget ));
+    GSList* prevnode = NULL;
+    GSList* node;
+
+    for (node = m_radioButtonGroup; node; node = node->next) {
+        if (node->data == widget)
+	    break;
+        prevnode = node;
+    }
+    if (!node) 
+    {
+        return FALSE;
+    }
+
+    if ((gdk_event->keyval == GDK_Up) ||
+        (gdk_event->keyval == GDK_Left))
+    {
+        if (node == g_slist_last(m_radioButtonGroup))
+            node = m_radioButtonGroup;
+        else
+            node = node->next;
+    }
+    else
+    {
+        if (node == m_radioButtonGroup)
+            node = g_slist_last(m_radioButtonGroup);
+        else
+            node = prevnode;
+    }
+
+    GtkWidget *button = (GtkWidget*) node->data;
+
+    gtk_widget_grab_focus( button );
+
+    return TRUE;
+}
 }
 
 //-----------------------------------------------------------------------------
@@ -125,6 +178,8 @@
       
     SetLabel(label);
 
+    gtk_signal_connect( GTK_OBJECT(m_widget), "key_press_event",
+      GTK_SIGNAL_FUNC(gtk_radiobut_keypress_callback), (gpointer)this );
     gtk_signal_connect( GTK_OBJECT(m_widget), "clicked", 
       GTK_SIGNAL_FUNC(gtk_radiobutton_clicked_callback), (gpointer*)this );
        

 	  	 

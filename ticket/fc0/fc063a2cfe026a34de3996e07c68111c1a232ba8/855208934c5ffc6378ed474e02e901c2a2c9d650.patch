Index: include/wx/cmdline.h
===================================================================
--- include/wx/cmdline.h	(revision 53450)
+++ include/wx/cmdline.h	(working copy)
@@ -55,6 +55,7 @@
     wxCMD_LINE_SWITCH,
     wxCMD_LINE_OPTION,
     wxCMD_LINE_PARAM,
+    wxCMD_LINE_TEXT,
     wxCMD_LINE_NONE         // to terminate the list
 };
 
@@ -178,6 +179,9 @@
                   wxCmdLineParamType type = wxCMD_LINE_VAL_STRING,
                   int flags = 0);
 
+    // a text
+    void AddText(const wxString& text);
+
     // actions
     // -------
 
@@ -253,4 +257,3 @@
 #endif // wxUSE_CMDLINE_PARSER/!wxUSE_CMDLINE_PARSER
 
 #endif // _WX_CMDLINE_H_
-
Index: interface/cmdline.h
===================================================================
--- interface/cmdline.h	(revision 53450)
+++ interface/cmdline.h	(working copy)
@@ -55,6 +55,7 @@
     wxCMD_LINE_SWITCH,
     wxCMD_LINE_OPTION,
     wxCMD_LINE_PARAM,
+    wxCMD_LINE_TEXT,
     wxCMD_LINE_NONE     ///< Use this to terminate the list.
 };
 
@@ -117,6 +118,7 @@
                  unlike a switch. For example, @c -o:filename might be an
                  option for specifing the name of the output file.
     - @b parameter: This is a required program argument.
+    - @b text: This is a text which can be shown in usage information.
 
 
     @section cmdlineparser_construction Construction
@@ -137,8 +139,8 @@
 
     The same holds for command line description: it can be specified either in
     the constructor (with or without the command line itself) or constructed
-    later using either SetDesc() or combination of AddSwitch(), AddOption() and
-    AddParam() methods.
+    later using either SetDesc() or combination of AddSwitch(), AddOption(),
+    AddParam() and AddText() methods.
 
     Using constructors or SetDesc() uses a (usually const static) table
     containing the command line description. If you want to decide which
@@ -287,6 +289,11 @@
                    int flags = 0);
 
     /**
+        Add a string @a text to the command line description.
+    */
+    void AddText(const wxString& text);
+
+    /**
         Returns @true if long options are enabled, otherwise @false.
 
         @see EnableLongOptions()
Index: src/common/cmdline.cpp
===================================================================
--- src/common/cmdline.cpp	(revision 53450)
+++ src/common/cmdline.cpp	(working copy)
@@ -73,20 +73,29 @@
                     wxCmdLineParamType typ,
                     int fl)
     {
-        wxASSERT_MSG( !shrt.empty() || !lng.empty(),
-                      _T("option should have at least one name") );
+        // wxCMD_LINE_TEXT uses only description, shortName and longName is empty
+    #ifdef __WXDEBUG__
+        if ( k != wxCMD_LINE_TEXT )
+        {
+            wxASSERT_MSG
+            (
+                !shrt.empty() || !lng.empty(),
+                 wxT("option should have at least one name")
+            );
 
-        wxASSERT_MSG
-        (
-            GetShortOptionName(shrt.begin(), shrt.end()).Len() == shrt.Len(),
-            wxT("Short option contains invalid characters")
-        );
+            wxASSERT_MSG
+            (
+                GetShortOptionName(shrt.begin(), shrt.end()).Len() == shrt.Len(),
+                wxT("Short option contains invalid characters")
+            );
 
-        wxASSERT_MSG
-        (
-            GetLongOptionName(lng.begin(), lng.end()).Len() == lng.Len(),
-            wxT("Long option contains invalid characters")
-        );
+            wxASSERT_MSG
+            (
+                GetLongOptionName(lng.begin(), lng.end()).Len() == lng.Len(),
+                wxT("Long option contains invalid characters")
+            );
+        }
+    #endif // __WXDEBUG__
 
 
         kind = k;
@@ -390,6 +399,10 @@
                          desc->type, desc->flags);
                 break;
 
+            case wxCMD_LINE_TEXT:
+                AddText(wxGetTranslation(desc->description));
+                break;
+
             default:
                 wxFAIL_MSG( _T("unknown command line entry type") );
                 // still fall through
@@ -458,6 +471,17 @@
     m_data->m_paramDesc.Add(param);
 }
 
+void wxCmdLineParser::AddText(const wxString& text)
+{
+    wxASSERT_MSG( !text.empty(), wxT("text can't be empty") );
+
+    wxCmdLineOption *option = new wxCmdLineOption(wxCMD_LINE_TEXT,
+                                                  wxEmptyString, wxEmptyString,
+                                                  text, wxCMD_LINE_VAL_NONE, 0);
+
+    m_data->m_options.Add(option);
+}
+
 // ----------------------------------------------------------------------------
 // access to parse command line
 // ----------------------------------------------------------------------------
@@ -1036,60 +1060,62 @@
     for ( n = 0; n < count; n++ )
     {
         wxCmdLineOption& opt = m_data->m_options[n];
+        wxString option;
 
-        usage << _T(' ');
-        if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
+        if ( opt.kind != wxCMD_LINE_TEXT )
         {
-            usage << _T('[');
-        }
+            usage << _T(' ');
+            if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
+            {
+                usage << _T('[');
+            }
 
-        if ( !opt.shortName.empty() )
-        {
-            usage << chSwitch << opt.shortName;
-        }
-        else if ( areLongOptionsEnabled && !opt.longName.empty() )
-        {
-            usage << _T("--") << opt.longName;
-        }
-        else
-        {
-            if (!opt.longName.empty())
+            if ( !opt.shortName.empty() )
             {
-                wxFAIL_MSG( wxT("option with only a long name while long ")
-                            wxT("options are disabled") );
+                usage << chSwitch << opt.shortName;
             }
+            else if ( areLongOptionsEnabled && !opt.longName.empty() )
+            {
+                usage << _T("--") << opt.longName;
+            }
             else
             {
-                wxFAIL_MSG( _T("option without neither short nor long name") );
+                if (!opt.longName.empty())
+                {
+                    wxFAIL_MSG( wxT("option with only a long name while long ")
+                                wxT("options are disabled") );
+                }
+                else
+                {
+                    wxFAIL_MSG( _T("option without neither short nor long name") );
+                }
             }
-        }
 
-        wxString option;
+            if ( !opt.shortName.empty() )
+            {
+                option << _T("  ") << chSwitch << opt.shortName;
+            }
 
-        if ( !opt.shortName.empty() )
-        {
-            option << _T("  ") << chSwitch << opt.shortName;
-        }
+            if ( areLongOptionsEnabled && !opt.longName.empty() )
+            {
+                option << (option.empty() ? _T("  ") : _T(", "))
+                       << _T("--") << opt.longName;
+            }
 
-        if ( areLongOptionsEnabled && !opt.longName.empty() )
-        {
-            option << (option.empty() ? _T("  ") : _T(", "))
-                   << _T("--") << opt.longName;
-        }
+            if ( opt.kind != wxCMD_LINE_SWITCH )
+            {
+                wxString val;
+                val << _T('<') << GetTypeName(opt.type) << _T('>');
+                usage << _T(' ') << val;
+                option << (!opt.longName ? _T(':') : _T('=')) << val;
+            }
 
-        if ( opt.kind != wxCMD_LINE_SWITCH )
-        {
-            wxString val;
-            val << _T('<') << GetTypeName(opt.type) << _T('>');
-            usage << _T(' ') << val;
-            option << (!opt.longName ? _T(':') : _T('=')) << val;
+            if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
+            {
+                usage << _T(']');
+            }
         }
 
-        if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
-        {
-            usage << _T(']');
-        }
-
         namesOptions.push_back(option);
         descOptions.push_back(opt.description);
     }
@@ -1144,10 +1170,18 @@
             usage << _T('\n') << stdDesc;
 
         len = namesOptions[n].length();
-        usage << namesOptions[n]
-              << wxString(_T(' '), lenMax - len) << _T('\t')
-              << descOptions[n]
-              << _T('\n');
+        // desc contains text if name is empty
+        if (len == 0)
+        {
+            usage << descOptions[n] << _T('\n');
+        }
+        else
+        {
+            usage << namesOptions[n]
+                  << wxString(_T(' '), lenMax - len) << _T('\t')
+                  << descOptions[n]
+                  << _T('\n');
+        }
     }
 
     return usage;

 	  	 

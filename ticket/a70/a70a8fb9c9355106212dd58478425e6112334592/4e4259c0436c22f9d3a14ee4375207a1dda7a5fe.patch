Index: aui_constants.py
===================================================================
--- aui_constants.py	(revision 65661)
+++ aui_constants.py	(working copy)
@@ -216,6 +216,8 @@
 floating pages. """
 AUI_NB_DRAW_DND_TAB        = 1 << 20
 """ Draws an image representation of a tab while dragging. """
+AUI_NB_ORDER_BY_ACCESS     = 1 << 21
+""" Tab navigation order by last access time. """
 
 AUI_NB_DEFAULT_STYLE = AUI_NB_TOP | AUI_NB_TAB_SPLIT | AUI_NB_TAB_MOVE | \
                        AUI_NB_SCROLL_BUTTONS | AUI_NB_CLOSE_ON_ACTIVE_TAB | \
Index: auibook.py
===================================================================
--- auibook.py	(revision 65661)
+++ auibook.py	(working copy)
@@ -17,6 +17,7 @@
 
 import wx
 import types
+import datetime
 
 from wx.lib.expando import ExpandoTextCtrl
 
@@ -326,8 +327,9 @@
         self.renamable = False          # If True, a tab can be renamed by a left double-click
         
         self.text_colour = wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNTEXT)
+        
+        self.access_time = datetime.datetime.now() # Last time this page was selected
 
-
     def IsMultiline(self):
         """ Returns whether the tab contains multiline text. """
 
@@ -664,22 +666,30 @@
 
         :param `book`: the actual L{AuiNotebook}.
         """
-
+        #Index of currently selected page
         selection = book.GetSelection()
+        #Total number of pages
         count = book.GetPageCount()
+        #List of (index, AuiNotebookPage)
+        pages = list(enumerate(book.GetTabContainer().GetPages()))
+        if book.GetAGWWindowStyleFlag() & AUI_NB_ORDER_BY_ACCESS:
+            #Sort pages using last access time. Most recently used is the 
+            #first in line
+            pages.sort(
+                key = lambda element: element[1].access_time, 
+                reverse = True
+            )
+        else:
+            #Manually add the current selection as first item
+            #Remaining ones are added in the next loop
+            del pages[selection]
+            self._listBox.Append(book.GetPageText(selection))
+            self._indexMap.append(selection)
         
-        self._listBox.Append(book.GetPageText(selection))
-        self._indexMap.append(selection)
+        for (index, page) in pages:
+            self._listBox.Append(book.GetPageText(index))
+            self._indexMap.append(index)
         
-        for c in xrange(count):
-        
-            # Skip selected page
-            if c == selection:
-                continue
-
-            self._listBox.Append(book.GetPageText(c))
-            self._indexMap.append(c)
-
         # Select the next entry after the current selection
         self._listBox.SetSelection(0)
         dummy = wx.NavigationKeyEvent()
@@ -2611,7 +2621,8 @@
 
         self.InitNotebook(agwStyle)
 
-
+    def GetTabContainer(self):
+        return self._tabs
     def InitNotebook(self, agwStyle):
         """
         Contains common initialization code called by all constructors.
@@ -3053,7 +3064,7 @@
         :see: L{SetAGWWindowStyleFlag} for a list of possible AGW-specific window styles.
         """
 
-        return self._agwFlags        
+        return self._agwFlags
         
 
     def AddPage(self, page, caption, select=False, bitmap=wx.NullBitmap, disabled_bitmap=wx.NullBitmap, control=None):
@@ -3724,8 +3735,11 @@
         :param `new_page`: the index of the new selection;
         :param `force`: whether to force the selection or not.
         """
+        wnd = self._tabs.GetWindowFromIdx(new_page)
         
-        wnd = self._tabs.GetWindowFromIdx(new_page)
+        #Update page access time
+        self._tabs.GetPages()[new_page].access_time = datetime.datetime.now()
+        
         if not wnd or not self.GetEnabled(new_page):
             return self._curpage
 
@@ -3733,7 +3747,7 @@
         # however, clicking again on a tab should give it the focus.
         if new_page == self._curpage and not force:
         
-            ctrl, ctrl_idx = self.FindTab(wnd)            
+            ctrl, ctrl_idx = self.FindTab(wnd)
             if wx.Window.FindFocus() != ctrl:
                 ctrl.SetFocus()
             

Index: include/wx/wxcrt.h
===================================================================
--- include/wx/wxcrt.h	(revision 47336)
+++ include/wx/wxcrt.h	(working copy)
@@ -760,6 +760,15 @@
 template<typename T>
 inline double wxStrtod(const wxCharTypeBuffer<T>& nptr, T **endptr)
     { return wxStrtod(nptr.data(), endptr); }
+    
+// Locale independent versions
+inline double wxStrtod_l(const char *nptr, char **endptr, locale_t locale = NULL)
+    { return wxCRT_Strtod_lA(nptr, endptr, locale); }
+inline double wxStrtod_l(const wchar_t *nptr, wchar_t **endptr, locale_t locale = NULL)
+    { return wxCRT_Strtod_lW(nptr, endptr, locale); }
+template<typename T>
+inline double wxStrtod_l(const wxCharTypeBuffer<T>& nptr, T **endptr, locale_t locale = NULL)
+    { return wxStrtod_l(nptr.data(), endptr, locale); }    
 
 // We implement wxStrto*() like this so that the code compiles when NULL is
 // passed in - - if we had just char** and wchar_t** overloads for 'endptr', it
@@ -798,6 +807,29 @@
 template<typename T>
 inline double wxStrtod(const wxCStrData& nptr, T endptr)
     { return wxStrtod(nptr.AsString(), endptr); }
+    
+// locale independent versions of above
+template<typename T>
+inline double wxStrtod_l(const wxString& nptr, T endptr, locale_t locale = NULL)
+{
+    if ( endptr == 0 )
+    {
+        // when we don't care about endptr, use the string representation that
+        // doesn't require any conversion (it doesn't matter for this function
+        // even if its UTF-8):
+        return wxStrtod_l(nptr.wx_str(), (wxStringCharType**)NULL, locale);
+    }
+    else
+    {
+        // note that it is important to use c_str() here and not mb_str() or
+        // wc_str(), because we store the pointer into (possibly converted)
+        // buffer in endptr and so it must be valid even when wxStrtod() returns
+        return wxStrtod_l((typename wxStrtoxCharType<T>::Type)nptr.c_str(), endptr, locale);
+    }
+}
+template<typename T>
+inline double wxStrtod_l(const wxCStrData& nptr, T endptr, locale_t locale = NULL)
+    { return wxStrtod_l(nptr.AsString(), endptr, locale); }    
 
 
 #define WX_STRTOX_FUNC(rettype, name, implA, implW)                           \
@@ -831,7 +863,39 @@
 
 #undef WX_STRTOX_FUNC
 
+// Locale independent versions of the above
+#define WX_STRTOX_FUNC_L(rettype, name, implA, implW)                           \
+    /* see wxStrtod() above for explanation of this code: */                  \
+    inline rettype name(const char *nptr, char **endptr, int base, locale_t locale = NULL)            \
+        { return implA(nptr, endptr, base, locale); }                                 \
+    inline rettype name(const wchar_t *nptr, wchar_t **endptr, int base, locale_t locale = NULL)      \
+        { return implW(nptr, endptr, base, locale); }                                 \
+    template<typename T>                                                      \
+    inline rettype name(const wxCharTypeBuffer<T>& nptr, T **endptr, int base, locale_t locale = NULL)\
+        { return name(nptr.data(), endptr, locale); }                                 \
+    template<typename T>                                                      \
+    inline rettype name(const wxString& nptr, T endptr, int base, locale_t locale = NULL)             \
+    {                                                                         \
+        if ( endptr == 0 )                                                    \
+            return name(nptr.wx_str(), (wxStringCharType**)NULL, base, locale);       \
+        else                                                                  \
+            return name((typename wxStrtoxCharType<T>::Type)nptr.c_str(),     \
+                        endptr, base, locale);                                        \
+    }                                                                         \
+    template<typename T>                                                      \
+    inline rettype name(const wxCStrData& nptr, T endptr, int base, locale_t locale = NULL)           \
+        { return name(nptr.AsString(), endptr, base, locale); }
 
+WX_STRTOX_FUNC_L(long, wxStrtol_l, wxCRT_Strtol_lA, wxCRT_Strtol_lW)
+WX_STRTOX_FUNC_L(unsigned long, wxStrtoul_l, wxCRT_Strtoul_lA, wxCRT_Strtoul_lW)
+#ifdef wxLongLong_t
+WX_STRTOX_FUNC_L(wxLongLong_t, wxStrtoll_l, wxCRT_Strtoll_lA, wxCRT_Strtoll_lW)
+WX_STRTOX_FUNC_L(wxULongLong_t, wxStrtoull_l, wxCRT_Strtoull_lA, wxCRT_Strtoull_lW)
+#endif // wxLongLong_t
+
+#undef WX_STRTOX_FUNC_L
+
+
 // mingw32 doesn't provide _tsystem() even though it provides other stdlib.h
 // functions in their wide versions
 #ifdef wxCRT_SystemW
@@ -893,6 +957,83 @@
 inline wxUniChar wxTolower(const wxUniChar& c) { return wxCRT_TolowerW(c); }
 inline wxUniChar wxToupper(const wxUniChar& c) { return wxCRT_ToupperW(c); }
 
+// Locale independent versions of the above
+inline bool wxIsalnum_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isalnum_lW(c, locale) != 0;
+}
+
+inline bool wxIsalpha_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isalpha_lW(c, locale) != 0;
+}
+
+inline bool wxIscntrl_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Iscntrl_lW(c, locale) != 0;
+}
+
+inline bool wxIsdigit_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isdigit_lW(c, locale) != 0;
+}
+
+inline bool wxIsgraph_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isgraph_lW(c, locale) != 0;
+}
+
+inline bool wxIslower_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Islower_lW(c, locale) != 0;
+}
+
+inline bool wxIsprint_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isprint_lW(c, locale) != 0;
+}
+
+inline bool wxIspunct_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Ispunct_lW(c, locale) != 0;
+}
+
+inline bool wxIsspace_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isspace_lW(c, locale) != 0;
+}
+
+inline bool wxIsupper_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isupper_lW(c, locale) != 0;
+}
+
+inline bool wxIsxdigit_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Isxdigit_lW(c, locale) != 0;
+}
+
+inline wxUniChar wxTolower_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Tolower_lW(c, locale);
+}
+
+inline wxUniChar wxToupper_l(const wxUniChar& c, locale_t locale = NULL)
+{
+  return wxCRT_Toupper_lW(c, locale);
+}
+
+// locale independent string comparison function (case insensitive)
+inline int wxStricmp_l(const char *s1, const char *s2, locale_t locale = NULL)
+{
+  return wxCRT_Stricmp_lA(s1, s2, locale);
+}
+
+inline int wxStricmp_l(const wchar_t *s1, const wchar_t *s2, locale_t locale = NULL)
+{
+  return wxCRT_Stricmp_lW(s1, s2, locale);
+}
+
 #if WXWIN_COMPATIBILITY_2_8
 // we had goofed and defined wxIsctrl() instead of (correct) wxIscntrl() in the
 // initial versions of this header -- now it is too late to remove it so
Index: include/wx/wxcrtbase.h
===================================================================
--- include/wx/wxcrtbase.h	(revision 47336)
+++ include/wx/wxcrtbase.h	(working copy)
@@ -211,7 +211,6 @@
     #endif /* HAVE_WCSTOULL */
 #endif
 
-
 /* define wxCRT_StricmpA/W and wxCRT_StrnicmpA/W for various compilers */
 
 /* note that we definitely are going to need our own version for widechar
@@ -627,10 +626,209 @@
     #define wxCRT_ToupperW(c)   towupper((wxUChar)(wxChar)(c))
 #endif /* __GLIBC__/!__GLIBC__ */
 
+/* -------------------------------------------------------------------------
+                  Locale independent conversion functions
+   ------------------------------------------------------------------------- */
 
+/* These functions need locale_t defined.  Is this handled correctly?
+   Probably not. Also should probably be move near top of file.
+   Later wxVsnprinf_l will also need locale_t */
 
+#if (HAVE_LOCALE_T == 1)
+  /* locale_t is available. It should be in either locale.h or xlocale.h */
+  #if (HAVE_LOCALE_H == 1)
+    #include <locale.h>
+  #endif
+  
+  #if (HAVE_XLOCALE_H == 1)
+    #include <xlocale.h>
+  #endif
+  
+  #if (HAVE_LOCALE_H == 0) && (HAVE_XLOCALE_H == 0)
+    /* locale_t is available but the headers needed are not */
+    #error "Unable to determine header file for locale_t"
+  #endif
+#else
+  /* locale_t is not available */
+  typedef void* locale_t;
+#endif    
 
+#if (HAVE_XLOCALE_H == 1)
+  /* If a system has xlocale, then it should also have these convenience
+     functions */
 
+  #define wxCRT_Strtod_lA    strtod_l
+  #define wxCRT_Strtol_lA    strtol_l 
+  #define wxCRT_Strtoul_lA   strtoul_l
+  #define wxCRT_Strtod_lW    wcstod_l
+  #define wxCRT_Strtol_lW    wcstol_l
+  #define wxCRT_Strtoul_lW   wcstoul_l
+  
+  /* These 64bit functions may need better detection */
+  #ifdef wxLongLong_t
+    #define wxCRT_Strtoll_lA   strtoll_l
+    #define wxCRT_Strtoull_lA  strtoull_l
+    #define wxCRT_Strtoll_lW   wcstoll_l
+    #define wxCRT_Strtoull_lW  wcstoull_l
+  #endif
+  
+  #define wxCRT_Isalnum_lW   iswalnum_l
+  #define wxCRT_Isalpha_lW   iswalpha_l
+  #define wxCRT_Iscntrl_lW   iswcntrl_l
+  #define wxCRT_Isdigit_lW   iswdigit_l
+  #define wxCRT_Isgraph_lW   iswgraph_l
+  #define wxCRT_Islower_lW   iswlower_l
+  #define wxCRT_Isprint_lW   iswprint_l
+  #define wxCRT_Ispunct_lW   iswpunct_l
+  #define wxCRT_Isspace_lW   iswspace_l
+  #define wxCRT_Isupper_lW   iswupper_l
+  #define wxCRT_Isxdigit_lW  iswxdigit_l
+  
+  #define wxCRT_Tolower_lW   towlower_l 
+  #define wxCRT_Toupper_lW   towupper_l
+  
+  #define wxCRT_Stricmp_lA   strcasecmp_l
+  #define wxCRT_Stricmp_lW   wcscasecmp_l    
+
+#endif
+
+#ifndef wxCRT_Strtod_lA
+WXDLLIMPEXP_BASE double wxCRT_Strtod_lA(const char *nptr, char **endptr, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtol_lA
+WXDLLIMPEXP_BASE long wxCRT_Strtol_lA(const char *nptr, char **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtoul_lA
+WXDLLIMPEXP_BASE unsigned long wxCRT_Strtoul_lA(const char *nptr, char **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtod_lW
+WXDLLIMPEXP_BASE double wxCRT_Strtod_lW(const wchar_t *nptr, wchar_t **endptr, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtol_lW
+WXDLLIMPEXP_BASE long wxCRT_Strtol_lW(const wchar_t *nptr, wchar_t **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtoul_lW
+WXDLLIMPEXP_BASE unsigned long wxCRT_Strtoul_lW(const wchar_t *nptr, wchar_t **endptr, int base, locale_t locale);
+#endif
+
+#ifdef wxLongLong_t
+#ifndef wxCRT_Strtoll_lA
+WXDLLIMPEXP_BASE wxLongLong_t wxCRT_Strtoll_lA(const char *nptr, char **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtoull_lA
+WXDLLIMPEXP_BASE wxULongLong_t wxCRT_Strtoull_lA(const char *nptr, char **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtoll_lW
+WXDLLIMPEXP_BASE wxLongLong_t wxCRT_Strtoll_lW(const wchar_t *nptr, wchar_t **endptr, int base, locale_t locale);
+#endif
+
+#ifndef wxCRT_Strtoull_lW
+WXDLLIMPEXP_BASE wxULongLong_t wxCRT_Strtoull_lW(const wchar_t *nptr, wchar_t **endptr, int base, locale_t locale);
+#endif
+
+#endif /* wxLongLong_t */
+
+#ifndef wxCRT_Isalnum_lW
+WXDLLIMPEXP_BASE int wxCRT_Isalnum_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isalpha_lW
+WXDLLIMPEXP_BASE int wxCRT_Isalpha_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Iscntrl_lW
+WXDLLIMPEXP_BASE int wxCRT_Iscntrl_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isdigit_lW
+WXDLLIMPEXP_BASE int wxCRT_Isdigit_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isgraph_lW
+WXDLLIMPEXP_BASE int wxCRT_Isgraph_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Islower_lW
+WXDLLIMPEXP_BASE int wxCRT_Islower_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isprint_lW
+WXDLLIMPEXP_BASE int wxCRT_Isprint_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Ispunct_lW
+WXDLLIMPEXP_BASE int wxCRT_Ispunct_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isspace_lW
+WXDLLIMPEXP_BASE int wxCRT_Isspace_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isupper_lW
+WXDLLIMPEXP_BASE int wxCRT_Isupper_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Isxdigit_lW
+WXDLLIMPEXP_BASE int wxCRT_Isxdigit_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Tolower_lW
+WXDLLIMPEXP_BASE wchar_t wxCRT_Tolower_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Toupper_lW
+WXDLLIMPEXP_BASE wchar_t wxCRT_Toupper_lW(wchar_t c, locale_t locale);
+#endif
+
+#ifndef wxCRT_Stricmp_lA
+WXDLLIMPEXP_BASE int wxCRT_Stricmp_lA(const char *s1, const char *s2, locale_t locale);
+#endif
+
+#ifndef wxCRT_Stricmp_lW
+WXDLLIMPEXP_BASE int wxCRT_Stricmp_lW(const wchar_t *s1, const wchar_t *s2, locale_t locale);
+#endif
+
+/* A simple locale test to make sure that a given locale_t is the current locale */
+/* Do not call any locale-independent functions as they call this function */
+inline int wxIsCurrentLocale(locale_t locale)
+{
+#if (HAVE_XLOCALE_H == 1)
+  char cur[128];
+  char test[128];
+  
+  locale_t dup = duplocale(NULL);
+  if(dup != NULL)
+  {
+    /* Make copy of returned value in case it is stored as static array */
+    /* Perhaps LC_ALL_MASK should be used */
+    wxStrncpy(cur, querylocale(LC_NUMERIC_MASK, dup), 128);
+    cur[127] = '\0';
+    
+    wxStrncpy(test, querylocale(LC_NUMERIC_MASK, locale), 128);
+    test[127] = '\0';
+    
+    freelocale(dup);
+    
+    /* Assume locales are the same if returned name is the same */
+    return (wxStrcmp(cur, test, 128) == 0);
+  }
+  else
+  {
+    return (0 == 1);
+  }
+#else
+  /* querylocale unavailable, assume not the same locale */
+  return (0 == 1);
+#endif
+}
+
 /* -------------------------------------------------------------------------
        wx wrappers for CRT functions in both char* and wchar_t* versions
    ------------------------------------------------------------------------- */
Index: src/common/wxcrt.cpp
===================================================================
--- src/common/wxcrt.cpp	(revision 47336)
+++ src/common/wxcrt.cpp	(working copy)
@@ -41,6 +41,7 @@
     #include "wx/hash.h"
     #include "wx/utils.h"     // for wxMin and wxMax
     #include "wx/log.h"
+    #include "wx/math.h"      // for wxFinite
 #endif
 
 #ifdef __WXWINCE__
@@ -1258,3 +1259,865 @@
 int wxVsscanf(const wxCStrData& str, const wchar_t *format, va_list ap)
     { return wxCRT_VsscanfW(str.AsWCharBuf(), format, ap); }
 #endif // !__VISUALC__
+
+// ----------------------------------------------------------------------------
+// locale independent functions
+// ----------------------------------------------------------------------------
+
+// Type detection
+
+#ifndef wxCRT_Isalnum_lW
+int wxCRT_Isalnum_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsalnum(c);
+    }
+      
+    // Can be 0-9/A-Z/a-z
+    return (c >= L'0' && c <= L'9') ||
+           (c >= L'a' && c <= L'z') ||
+           (c >= L'A' && c <= L'Z');
+}
+#endif
+
+#ifndef wxCRT_Isalpha_lW
+int wxCRT_Isalpha_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsalpha(c);
+    }
+      
+    // Can be A-Z/a-z
+    return (c >= L'a' && c <= L'z') ||
+           (c >= L'A' && c <= L'Z');
+}
+#endif
+
+#ifndef wxCRT_Iscntrl_lW
+int wxCRT_Iscntrl_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIscntrl(c);
+    }
+      
+    // Can be 0x00-0x1F or 0x7F
+    return (c >= 0x00 && c <= 0x1F) || c == 0x7F;
+}
+#endif
+
+#ifndef wxCRT_Isdigit_lW
+int wxCRT_Isdigit_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsdigit(c);
+    }
+      
+    // Can be '0' - '9'
+    return (c >= L'0' && c <= L'9') || c == 0x7F;
+}
+#endif
+
+#ifndef wxCRT_Isgraph_lW
+int wxCRT_Isgraph_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsgraph(c);
+    }
+      
+    // Can be a printable character that is not a space
+    return wxIsprint_l(c) && wxIsspace_l(c);
+}
+#endif
+
+#ifndef wxCRT_Islower_lW
+int wxCRT_Islower_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIslower(c);
+    }
+      
+    // Can be 'a' - 'z'
+    return (c >= L'a' && c <= L'z');
+}
+#endif
+
+#ifndef wxCRT_Isprint_lW
+int wxCRT_Isprint_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsprint(c);
+    }
+      
+    // Can be 0x20 to 0x7E
+    return (c >= 0x20 && c <= 0x7E);
+}
+#endif
+
+#ifndef wxCRT_Ispunct_lW
+int wxCRT_Ispunct_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIspunct(c);
+    }
+      
+    // Can be a printable character that is not a space, letter, or number
+    return wxIsprint_l(c) && !(wxIsspace_l(c) || wxIsalnum_l(c));
+}
+#endif
+
+#ifndef wxCRT_Isspace_lW
+int wxCRT_Isspace_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsspace(c);
+    }
+      
+    // Can be 0x09 to 0x0D or 0x20
+    return (c >= 0x09 && c <= 0x0D) || c == 0x20;
+}
+#endif
+
+#ifndef wxCRT_Isupper_lW
+int wxCRT_Isupper_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsupper(c);
+    }
+      
+    // Can be 'A' to 'Z'
+    return (c >= L'A' && c <= L'Z') || c == 0x7F;
+}
+#endif
+
+#ifndef wxCRT_Isxdigit_lW
+int wxCRT_Isxdigit_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxIsxdigit(c);
+    }
+      
+    // Can be 0-9,a-f,A-F
+    return (c >= L'0' && c <= L'9') ||
+           (c >= L'a' && c <= L'f') ||
+           (c >= L'A' && c <= L'F');
+}
+#endif
+
+// Case conversion
+#ifndef wxCRT_Tolower_lW
+wchar_t wxCRT_Tolower_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxTolower(c);
+    }
+      
+    if(wxIsupper_l(c))
+        return c - L'A' + L'a';
+    else
+        return c;
+}
+#endif
+
+#ifndef wxCRT_Toupper_lW
+wchar_t wxCRT_Toupper_lW(wchar_t c, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxToupper(c);
+    }
+      
+    if(wxIslower_l(c))
+        return c - L'a' + L'A';
+    else
+        return c;
+}
+#endif
+
+// Case insensitive string comparison
+template <typename T>
+static int wxCRT_StricmpBase_l(const T* s1, const T* s2)
+{
+    int result;
+  
+    do
+    {
+        result = wxTolower_l(*s1) - wxTolower_l(*s2);
+    } while(*s1++ && *s2++ && result != 0);
+  
+  return result;
+}
+
+#ifndef wxCRT_Stricmp_lA
+int wxCRT_Stricmp_lA(const char* s1, const char* s2, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStricmp(s1, s2);
+    }
+      
+    return wxCRT_StricmpBase_l(s1, s2);    
+}
+#endif
+
+#ifndef wxCRT_Stricmp_lW
+int wxCRT_Stricmp_lW(const wchar_t* s1, const wchar_t* s2, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStricmp(s1, s2);
+    }
+      
+    return wxCRT_StricmpBase_l(s1, s2);    
+}
+#endif
+
+// String to double conversions
+template <typename T>
+static double wxCRT_StrtodBase_l(const T* nptr, T** endptr)
+{
+    bool negative = false;
+    long double value = 0.0;
+    wxString wxstr(nptr);
+    wxString::const_iterator i = wxstr.begin();
+    wxString::const_iterator end = wxstr.end();
+  
+    // Skip space
+    while(i != end && wxIsspace_l(*i))
+        i++;
+      
+    // Check for sign
+    if(i != end)
+    {
+        T c = *i;
+        if(c == wxT('-'))
+        {
+            negative = true;
+            i++;
+        }
+        else if(c == wxT('+'))
+        {
+            i++;
+        }
+    }
+
+    
+    // The part before the decimal
+    for( ; i != end; i++)
+    {
+        int n;
+        
+        T c = *i;
+        if(c >= wxT('0') && c <= wxT('9'))
+        {
+            n = c - wxT('0');
+        }
+        else
+        {
+            break;
+        }
+        
+        value = (value * 10.0) + (long double)n;
+    }
+    
+    // Decimal, if any
+    if(i != end && *i == wxT('.'))
+    {
+        long double divisor = 1.0;
+        i++;
+        
+        // Part after the decimal, if any
+        for( ; i != end; i++)
+        {
+            int n;
+            
+            T c = *i;
+            
+            if(c >= wxT('0') && c <= wxT('9'))
+            {
+                n = c - wxT('0');
+            }
+            else
+            {
+                break;
+            }
+          
+            value = (value * 10.0) + (long double)n;
+            divisor *= 10.0;
+        }
+        
+        value /= divisor;
+    }
+    
+    // Exponent, if any
+    if(i != end && (*i == wxT('e') || *i == wxT('E')))
+    {
+        bool enegative = false;
+        int evalue = 0;
+        long double scale = 1.0;
+        
+        i++;
+        
+        if(i != end)
+        {
+            T c = *i;
+          
+            // Exponent sign
+            if(c == wxT('-'))
+            {
+                enegative = true;
+                i++;
+            }
+            else if(c == wxT('+'))
+            {
+                i++;
+            }
+        }
+        
+        // Exponent digits
+        for( ; i != end; i++)
+        {
+            int n;
+            
+            T c = *i;
+            
+            if(c >= wxT('0') && c <= wxT('9'))
+            {
+                n = c - wxT('0');
+            }
+            else
+            {
+                break;
+            }
+            
+            evalue = (evalue * 10) + n;
+        }
+        
+        // Figure how much to multiply or divide the number by
+        while(evalue >= 64)
+        {
+            scale *= 1.0e+64;
+            evalue -= 64;
+        }
+        
+        while(evalue >= 16)
+        {
+            scale *= 1.0e+16;
+            evalue -= 16;
+        }
+        
+        while(evalue >=4)
+        {
+            scale *= 1.0e+4;
+            evalue -= 4;
+        }
+        
+        while(evalue >= 1)
+        {
+            scale *= 1.0e+1;
+            evalue -= 1;
+        }
+        
+        // If negative exponent, divide, else multiply
+        if(enegative)
+        {
+            value /= scale;
+        }
+        else
+        {
+            value *= scale;
+        }
+    }
+    
+    // Update end pointer
+    if(endptr)
+        *endptr = (T*)(nptr + (i - wxstr.begin()));
+  
+    // The result
+    double result = (negative ? -value : value);
+    
+    // Try a little bit of range detection
+    // TODO: Better detection
+    if(::wxFinite(result) == 0)
+        wxSET_ERRNO(ERANGE);
+      
+    return result;  
+}
+
+#ifndef wxCRT_Strtod_lA
+double wxCRT_Strtod_lA(const char* nptr, char** endptr, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtod(nptr, endptr);
+    }
+      
+    // TODO:  
+    return wxCRT_StrtodBase_l(nptr, endptr);    
+}
+#endif
+
+#ifndef wxCRT_Strtod_lW
+double wxCRT_Strtod_lW(const wchar_t* nptr, wchar_t** endptr, locale_t locale)
+{
+    // Null locale is to use C locale, else use system locale
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtod(nptr, endptr);
+    }
+      
+    // TODO:  
+    return wxCRT_StrtodBase_l(nptr, endptr);    
+}
+#endif
+
+// String to long/unsigned long conversions
+template<typename T>
+static unsigned long
+wxCRT_StrtoulBase_l(const T* nptr, T** endptr, int base, T* sign)
+{
+    unsigned long sum = 0;
+    wxString wxstr(nptr);
+    wxString::const_iterator i = wxstr.begin();
+    wxString::const_iterator end = wxstr.end();
+
+    // Skip spaces
+    while ( i != end && wxIsspace_l(*i) ) i++;
+
+    // Starts with sign?
+    *sign = wxT(' ');
+    if ( i != end )
+    {
+        T c = *i;
+        if ( c == wxT('+') || c == wxT('-') )
+        {
+            *sign = c;
+            i++;
+        }
+    }
+
+    // Starts with 0x?
+    if ( i != end && *i == wxT('0') )
+    {
+        i++;
+        if ( i != end )
+        {
+            if ( *i == wxT('x') && (base == 16 || base == 0) )
+            {
+                base = 16;
+                i++;
+            }
+            else
+            {
+                if ( endptr )
+                    *endptr = (T*) nptr;
+                wxSET_ERRNO(EINVAL);
+                return sum;
+            }
+        }
+        else
+            i--;
+    }
+
+    if ( base == 0 )
+        base = 10;
+
+    for ( ; i != end; i++ )
+    {
+        unsigned int n;
+
+        T c = *i;
+        if ( c >= wxT('0') )
+        {
+            if ( c <= wxT('9') )
+                n = c - wxT('0');
+            else
+                n = wxTolower_l(c) - wxT('a') + 10;
+        }
+        else
+            break;
+
+        if ( n >= (unsigned int)base )
+            // Invalid character (for this base)
+            break;
+
+        unsigned long prevsum = sum;
+        sum = (sum * base) + n;
+
+        if ( sum < prevsum )
+        {
+            wxSET_ERRNO(ERANGE);
+            break;
+        }
+    }
+
+    if ( endptr )
+    {
+        *endptr = (T*)(nptr + (i - wxstr.begin()));
+    }
+
+    return sum;
+}
+
+template<typename T>
+static unsigned long wxCRT_DoStrtoul_l(const T* nptr, T** endptr, int base)
+{
+    T sign;
+    unsigned long uval = wxCRT_StrtoulBase_l(nptr, endptr, base, &sign);
+
+    if ( sign == wxT('-') )
+    {
+        wxSET_ERRNO(ERANGE);
+        uval = 0;
+    }
+
+    return uval;
+}
+
+template<typename T>
+static long wxCRT_DoStrtol_l(const T* nptr, T** endptr, int base)
+{
+    T sign;
+    unsigned long uval = wxCRT_StrtoulBase_l(nptr, endptr, base, &sign);
+    long val = 0;
+
+    if ( sign == wxT('-') )
+    {
+        if ( uval <= (unsigned long)(wxINT32_MAX + 1))
+        {
+            if ( uval == (unsigned long)(wxINT32_MAX + 1))
+                val = -((long)wxINT32_MAX) - 1;
+            else
+                val = -((long)uval);
+        }
+        else
+        {
+            wxSET_ERRNO(ERANGE);
+        }
+    }
+    else if ( uval <= (unsigned long)wxINT32_MAX )
+    {
+        val = uval;
+    }
+    else
+    {
+        wxSET_ERRNO(ERANGE);
+    }
+
+    return val;
+}
+
+#ifndef wxCRT_Strtol_lA
+long wxCRT_Strtol_lA(const char* nptr, char** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtol(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtol_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtol_lW
+long wxCRT_Strtol_lW(const wchar_t* nptr, wchar_t** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtol(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtol_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtoul_lA
+unsigned long wxCRT_Strtoul_lA(const char* nptr, char** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoul(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoul_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtoul_lW
+unsigned long wxCRT_Strtoul_lW(const wchar_t* nptr, wchar_t** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoul(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoul_l(nptr, endptr, base);
+}
+#endif
+
+// String to long long
+#ifdef wxLongLong_t
+
+// Need locale-independent template for locale independent functions
+// since wxTolower may not do correct A-F -> a-f in some locales
+template<typename T>
+static wxULongLong_t
+wxCRT_StrtoullBase_l(const T* nptr, T** endptr, int base, T* sign)
+{
+    wxULongLong_t sum = 0;
+    wxString wxstr(nptr);
+    wxString::const_iterator i = wxstr.begin();
+    wxString::const_iterator end = wxstr.end();
+
+    // Skip spaces
+    while ( i != end && wxIsspace_l(*i) ) i++;
+
+    // Starts with sign?
+    *sign = wxT(' ');
+    if ( i != end )
+    {
+        T c = *i;
+        if ( c == wxT('+') || c == wxT('-') )
+        {
+            *sign = c;
+            i++;
+        }
+    }
+
+    // Starts with 0x?
+    if ( i != end && *i == wxT('0') )
+    {
+        i++;
+        if ( i != end )
+        {
+            if ( *i == wxT('x') && (base == 16 || base == 0) )
+            {
+                base = 16;
+                i++;
+            }
+            else
+            {
+                if ( endptr )
+                    *endptr = (T*) nptr;
+                wxSET_ERRNO(EINVAL);
+                return sum;
+            }
+        }
+        else
+            i--;
+    }
+
+    if ( base == 0 )
+        base = 10;
+
+    for ( ; i != end; i++ )
+    {
+        unsigned int n;
+
+        T c = *i;
+        if ( c >= wxT('0') )
+        {
+            if ( c <= wxT('9') )
+                n = c - wxT('0');
+            else
+                n = wxTolower_l(c) - wxT('a') + 10;
+        }
+        else
+            break;
+
+        if ( n >= (unsigned int)base )
+            // Invalid character (for this base)
+            break;
+
+        wxULongLong_t prevsum = sum;
+        sum = (sum * base) + n;
+
+        if ( sum < prevsum )
+        {
+            wxSET_ERRNO(ERANGE);
+            break;
+        }
+    }
+
+    if ( endptr )
+    {
+        *endptr = (T*)(nptr + (i - wxstr.begin()));
+    }
+
+    return sum;
+}
+
+template<typename T>
+static wxULongLong_t wxCRT_DoStrtoull_l(const T* nptr, T** endptr, int base)
+{
+    T sign;
+    wxULongLong_t uval = wxCRT_StrtoullBase(nptr, endptr, base, &sign);
+
+    if ( sign == wxT('-') )
+    {
+        wxSET_ERRNO(ERANGE);
+        uval = 0;
+    }
+
+    return uval;
+}
+
+template<typename T>
+static wxLongLong_t wxCRT_DoStrtoll_l(const T* nptr, T** endptr, int base)
+{
+    T sign;
+    wxULongLong_t uval = wxCRT_StrtoullBase(nptr, endptr, base, &sign);
+    wxLongLong_t val = 0;
+
+    if ( sign == wxT('-') )
+    {
+        if ( uval <= wxULL(wxINT64_MAX+1) )
+        {
+            if ( uval == wxULL(wxINT64_MAX+1))
+                val = -((wxLongLong_t)wxINT64_MAX) - 1;
+            else
+                val = -((wxLongLong_t)uval);
+        }
+        else
+        {
+            wxSET_ERRNO(ERANGE);
+        }
+    }
+    else if ( uval <= wxINT64_MAX )
+    {
+        val = uval;
+    }
+    else
+    {
+        wxSET_ERRNO(ERANGE);
+    }
+
+    return val;
+}
+
+#ifndef wxCRT_Strtoll_lA
+wxLongLong_t wxCRT_Strtoll_lA(const char* nptr, char** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoll(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoll_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtoll_lW
+wxLongLong_t wxCRT_Strtoll_lW(const wchar_t* nptr, wchar_t** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoll(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoll_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtoull_lA
+wxULongLong_t wxCRT_Strtoull_lA(const char* nptr, char** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoull(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoull_l(nptr, endptr, base);
+}
+#endif
+
+#ifndef wxCRT_Strtoull_lW
+wxULongLong_t wxCRT_Strtoull_lW(const wchar_t* nptr, wchar_t** endptr, int base, locale_t locale)
+{
+    if(locale != NULL)
+    {
+        wxASSERT_MSG(wxIsCurrentLocale(locale),
+                     _T("locale error: should be NULL or current locale"));
+        return wxStrtoull(nptr, endptr, base);
+    }
+    else
+        return wxCRT_DoStrtoull_l(nptr, endptr, base);
+}
+#endif
+
+#endif // wxLongLong_t

 	  	 

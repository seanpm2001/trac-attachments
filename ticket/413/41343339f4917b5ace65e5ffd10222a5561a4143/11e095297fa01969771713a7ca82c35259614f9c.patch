Index: include/wx/dynlib.h
===================================================================
--- include/wx/dynlib.h	(リビジョン 73789)
+++ include/wx/dynlib.h	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        wx/dynlib.h
 // Purpose:     Dynamic library loading classes
 // Author:      Guilhem Lavaux, Vadim Zeitlin, Vaclav Slavik
-// Modified by:
+// Modified by: Suzumizaki-kimitaka 2013-04-06
 // Created:     20/07/98
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998 Guilhem Lavaux
@@ -359,7 +359,11 @@
     // the returned handle reference count is not incremented so it doesn't
     // need to be freed using FreeLibrary() but it also means that it can
     // become invalid if the DLL is unloaded
-    static WXHMODULE MSWGetModuleHandle(const char *name, void *addr);
+#ifdef UNICODE
+    static WXHMODULE MSWGetModuleHandle(const wchar_t* name, void *addr);
+#else
+    static WXHMODULE MSWGetModuleHandle(const char* name, void *addr);
+#endif
 #endif // __WINDOWS__
 
 protected:
Index: include/wx/msw/debughlp.h
===================================================================
--- include/wx/msw/debughlp.h	(リビジョン 73789)
+++ include/wx/msw/debughlp.h	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        wx/msw/debughlp.h
 // Purpose:     wraps dbghelp.h standard file
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Suzumizaki-kimitaka 2013-04-06
 // Created:     2005-01-08 (extracted from msw/crashrpt.cpp)
 // RCS-ID:      $Id$
 // Copyright:   (c) 2003-2005 Vadim Zeitlin <vadim@wxwindows.org>
@@ -40,6 +40,22 @@
 
 #if wxUSE_DBGHELP
 
+#ifdef UNICODE
+#define wxPENUMLOADED_MODULES_CALLBACK64 PENUMLOADED_MODULES_CALLBACKW64
+#define wxPSYMBOL_INFO PSYMBOL_INFOW
+#define wxSYMBOL_INFO SYMBOL_INFOW
+#define wxPIMAGEHLP_LINE PIMAGEHLP_LINEW64
+#define wxIMAGEHLP_LINE IMAGEHLP_LINEW64
+#define wxPSYM_ENUMERATESYMBOLS_CALLBACK PSYM_ENUMERATESYMBOLS_CALLBACKW
+#else
+#define wxPENUMLOADED_MODULES_CALLBACK64 PENUMLOADED_MODULES_CALLBACK64
+#define wxPSYMBOL_INFO PSYMBOL_INFO
+#define wxSYMBOL_INFO SYMBOL_INFO
+#define wxPIMAGEHLP_LINE PIMAGEHLP_LINE64
+#define wxIMAGEHLP_LINE IMAGEHLP_LINE64
+#define wxPSYM_ENUMERATESYMBOLS_CALLBACK PSYM_ENUMERATESYMBOLS_CALLBACK
+#endif
+
 // ----------------------------------------------------------------------------
 // wxDbgHelpDLL: dynamically load dbghelp.dll functions
 // ----------------------------------------------------------------------------
@@ -139,21 +155,21 @@
     // function types
     typedef DWORD (WINAPI *SymGetOptions_t)();
     typedef DWORD (WINAPI *SymSetOptions_t)(DWORD);
-    typedef BOOL (WINAPI *SymInitialize_t)(HANDLE, LPSTR, BOOL);
+    typedef BOOL (WINAPI *SymInitialize_t)(HANDLE, LPTSTR, BOOL);
     typedef BOOL (WINAPI *StackWalk_t)(DWORD, HANDLE, HANDLE, LPSTACKFRAME,
                                        LPVOID, PREAD_PROCESS_MEMORY_ROUTINE,
                                        PFUNCTION_TABLE_ACCESS_ROUTINE,
                                        PGET_MODULE_BASE_ROUTINE,
                                        PTRANSLATE_ADDRESS_ROUTINE);
-    typedef BOOL (WINAPI *SymFromAddr_t)(HANDLE, DWORD64, PDWORD64, PSYMBOL_INFO);
+    typedef BOOL (WINAPI *SymFromAddr_t)(HANDLE, DWORD64, PDWORD64, wxPSYMBOL_INFO);
     typedef LPVOID (WINAPI *SymFunctionTableAccess_t)(HANDLE, DWORD_PTR);
     typedef DWORD_PTR (WINAPI *SymGetModuleBase_t)(HANDLE, DWORD_PTR);
-    typedef BOOL (WINAPI *SymGetLineFromAddr_t)(HANDLE, DWORD_PTR,
-                                                PDWORD, PIMAGEHLP_LINE);
+    typedef BOOL (WINAPI *SymGetLineFromAddr64_t)(HANDLE, DWORD_PTR,
+                                                PDWORD, wxPIMAGEHLP_LINE);
     typedef BOOL (WINAPI *SymSetContext_t)(HANDLE, PIMAGEHLP_STACK_FRAME,
                                            PIMAGEHLP_CONTEXT);
-    typedef BOOL (WINAPI *SymEnumSymbols_t)(HANDLE, ULONG64, PCSTR,
-                                            PSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
+    typedef BOOL (WINAPI *SymEnumSymbols_t)(HANDLE, ULONG64, PCTSTR,
+                                            wxPSYM_ENUMERATESYMBOLS_CALLBACK, PVOID);
     typedef BOOL (WINAPI *SymGetTypeInfo_t)(HANDLE, DWORD64, ULONG,
                                             IMAGEHLP_SYMBOL_TYPE_INFO, PVOID);
     typedef BOOL (WINAPI *SymCleanup_t)(HANDLE);
@@ -164,6 +180,10 @@
                                                CONST PMINIDUMP_USER_STREAM_INFORMATION,
                                                CONST PMINIDUMP_CALLBACK_INFORMATION);
 
+    typedef BOOL (WINAPI *EnumerateLoadedModulesEx_t)(HANDLE, wxPENUMLOADED_MODULES_CALLBACK64, PVOID);
+    typedef BOOL (WINAPI *EnumerateLoadedModules64_t)(HANDLE, wxPENUMLOADED_MODULES_CALLBACK64, PVOID);
+    static BOOL EnumerateLoadedModulesExOr64(HANDLE, wxPENUMLOADED_MODULES_CALLBACK64, PVOID);
+
     // The macro called by wxDO_FOR_ALL_SYM_FUNCS() below takes 2 arguments:
     // the name of the function in the program code, which never has "64"
     // suffix, and the name of the function in the DLL which can have "64"
@@ -172,7 +192,6 @@
     #define wxSYM_CALL(what, name)  what(name, name)
 #if defined(_M_AMD64)
     #define wxSYM_CALL_64(what, name)  what(name, name ## 64)
-
     // Also undo all the "helpful" definitions done by imagehlp.h that map 32
     // bit functions to 64 bit ones, we don't need this as we do it ourselves.
     #undef StackWalk
@@ -184,25 +203,51 @@
     #define wxSYM_CALL_64(what, name)  what(name, name)
 #endif
 
+#ifdef UNICODE
+    #define wxSYM_CALL_T_ANYWAY64(what, name)  what(name ## 64, name ## W64)
+    #define wxSYM_CALL_T(what, name)  what(name, name ## W)
+#if defined(_M_AMD64)
+    #define wxSYM_CALL_T_64(what, name)  what(name, name ## W64)
+#else
+    #define wxSYM_CALL_T_64(what, name)  what(name, name ## W)
+#endif
+#else
+    #define wxSYM_CALL_T_ANYWAY64(what, name)  what(name ## 64, name ## 64)
+    #define wxSYM_CALL_T(what, name)  what(name, name)
+#if defined(_M_AMD64)
+    #define wxSYM_CALL_T_64(what, name)  what(name, name ## 64)
+#else
+    #define wxSYM_CALL_T_64(what, name)  what(name, name)
+#endif
+#endif
+
+
     #define wxDO_FOR_ALL_SYM_FUNCS(what)                                      \
         wxSYM_CALL_64(what, StackWalk);                                       \
         wxSYM_CALL_64(what, SymFunctionTableAccess);                          \
         wxSYM_CALL_64(what, SymGetModuleBase);                                \
-        wxSYM_CALL_64(what, SymGetLineFromAddr);                              \
+        wxSYM_CALL_T_ANYWAY64(what, SymGetLineFromAddr);                      \
         wxSYM_CALL_64(what, EnumerateLoadedModules);                          \
                                                                               \
         wxSYM_CALL(what, SymGetOptions);                                      \
         wxSYM_CALL(what, SymSetOptions);                                      \
-        wxSYM_CALL(what, SymInitialize);                                      \
-        wxSYM_CALL(what, SymFromAddr);                                        \
+        wxSYM_CALL_T(what, SymInitialize);                                    \
+        wxSYM_CALL_T(what, SymFromAddr);                                      \
         wxSYM_CALL(what, SymSetContext);                                      \
-        wxSYM_CALL(what, SymEnumSymbols);                                     \
+        wxSYM_CALL_T(what, SymEnumSymbols);                                   \
         wxSYM_CALL(what, SymGetTypeInfo);                                     \
         wxSYM_CALL(what, SymCleanup);                                         \
         wxSYM_CALL(what, MiniDumpWriteDump)
 
     #define wxDECLARE_SYM_FUNCTION(func, name) static func ## _t func
 
+    // Alternation will work when the following 2 functions are not found,
+    // therefore they are not included in wxDO_FOR_ALL_SYM_FUNCS.
+    // see BindDbgHelpFunctions() in debughlp.cpp, and don't
+    // forget to check another wxDO_FOR_ALL_SYM_FUNCS calls.
+    wxSYM_CALL_T_ANYWAY64(wxDECLARE_SYM_FUNCTION, EnumerateLoadedModules);
+    wxSYM_CALL_T(wxDECLARE_SYM_FUNCTION, EnumerateLoadedModulesEx);
+    
     wxDO_FOR_ALL_SYM_FUNCS(wxDECLARE_SYM_FUNCTION);
 
     #undef wxDECLARE_SYM_FUNCTION
@@ -217,10 +262,10 @@
     static void LogError(const wxChar *func);
 
     // return textual representation of the value of given symbol
-    static wxString DumpSymbol(PSYMBOL_INFO pSymInfo, void *pVariable);
+    static wxString DumpSymbol(wxPSYMBOL_INFO pSymInfo, void *pVariable);
 
     // return the name of the symbol with given type index
-    static wxString GetSymbolName(PSYMBOL_INFO pSymInfo);
+    static wxString GetSymbolName(wxPSYMBOL_INFO pSymInfo);
 
 private:
     // dereference the given symbol, i.e. return symbol which is not a
@@ -230,15 +275,15 @@
     // dereferenced the symbol
     //
     // return the tag of the dereferenced symbol
-    static SymbolTag DereferenceSymbol(PSYMBOL_INFO pSymInfo, void **ppData);
+    static SymbolTag DereferenceSymbol(wxPSYMBOL_INFO pSymInfo, void **ppData);
 
-    static wxString DumpField(PSYMBOL_INFO pSymInfo,
+    static wxString DumpField(wxPSYMBOL_INFO pSymInfo,
                               void *pVariable,
                               unsigned level);
 
     static wxString DumpBaseType(BasicType bt, DWORD64 length, void *pVariable);
 
-    static wxString DumpUDT(PSYMBOL_INFO pSymInfo,
+    static wxString DumpUDT(wxPSYMBOL_INFO pSymInfo,
                             void *pVariable,
                             unsigned level = 0);
 };
Index: include/wx/msw/stackwalk.h
===================================================================
--- include/wx/msw/stackwalk.h	(リビジョン 73789)
+++ include/wx/msw/stackwalk.h	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        wx/msw/stackwalk.h
 // Purpose:     wxStackWalker for MSW
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Suzumizaki-kimitaka 2013-04-06
 // Created:     2005-01-08
 // RCS-ID:      $Id$
 // Copyright:   (c) 2005 Vadim Zeitlin <vadim@wxwindows.org>
@@ -20,6 +20,7 @@
 
 // and these in dbghelp.h
 struct _SYMBOL_INFO;
+struct _SYMBOL_INFOW;
 
 // ----------------------------------------------------------------------------
 // wxStackFrame
@@ -53,7 +54,11 @@
     GetParam(size_t n, wxString *type, wxString *name, wxString *value) const;
 
     // callback used by OnGetParam(), don't call directly
-    void OnParam(_SYMBOL_INFO *pSymInfo);
+#ifdef UNICODE
+    void OnParam(_SYMBOL_INFOW * pSymInfo);
+#else
+    void OnParam(_SYMBOL_INFO * pSymInfo);
+#endif
 
 protected:
     virtual void OnGetName();
Index: src/msw/debughlp.cpp
===================================================================
--- src/msw/debughlp.cpp	(リビジョン 73772)
+++ src/msw/debughlp.cpp	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        src/msw/debughlp.cpp
 // Purpose:     various Win32 debug helpers
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Suzumizaki-kimitaka 2013-04-06
 // Created:     2005-01-08 (extracted from crashrpt.cpp)
 // RCS-ID:      $Id$
 // Copyright:   (c) 2003-2005 Vadim Zeitlin <vadim@wxwindows.org>
@@ -54,6 +54,8 @@
     wxDbgHelpDLL::func ## _t wxDbgHelpDLL::func = 0
 
 wxDO_FOR_ALL_SYM_FUNCS(DEFINE_SYM_FUNCTION);
+wxSYM_CALL_T_ANYWAY64(DEFINE_SYM_FUNCTION, EnumerateLoadedModules);
+wxSYM_CALL_T(DEFINE_SYM_FUNCTION, EnumerateLoadedModulesEx);
 
 #undef DEFINE_SYM_FUNCTION
 
@@ -78,6 +80,15 @@
 
     #undef LOAD_SYM_FUNCTION
 
+    #define LOAD_SYM_FUNCTION_CAN_FAIL(func, name)                            \
+        wxDbgHelpDLL::func = (wxDbgHelpDLL::func ## _t)                       \
+            dllDbgHelp.GetSymbol(wxT(#name));
+
+    wxSYM_CALL_T_ANYWAY64(LOAD_SYM_FUNCTION_CAN_FAIL, EnumerateLoadedModules);
+    wxSYM_CALL_T(LOAD_SYM_FUNCTION_CAN_FAIL, EnumerateLoadedModulesEx);
+
+    #undef LOAD_SYM_FUNCTION_CAN_FAIL
+
     return true;
 }
 
@@ -171,13 +182,13 @@
 
 static inline
 bool
-DoGetTypeInfo(PSYMBOL_INFO pSym, IMAGEHLP_SYMBOL_TYPE_INFO type, void *rc)
+DoGetTypeInfo(wxPSYMBOL_INFO pSym, IMAGEHLP_SYMBOL_TYPE_INFO type, void *rc)
 {
     return DoGetTypeInfo(pSym->ModBase, pSym->TypeIndex, type, rc);
 }
 
 static inline
-wxDbgHelpDLL::BasicType GetBasicType(PSYMBOL_INFO pSym)
+wxDbgHelpDLL::BasicType GetBasicType(wxPSYMBOL_INFO pSym)
 {
     wxDbgHelpDLL::BasicType bt;
     return DoGetTypeInfo(pSym, TI_GET_BASETYPE, &bt)
@@ -186,7 +197,7 @@
 }
 
 /* static */
-wxString wxDbgHelpDLL::GetSymbolName(PSYMBOL_INFO pSym)
+wxString wxDbgHelpDLL::GetSymbolName(wxPSYMBOL_INFO pSym)
 {
     wxString s;
 
@@ -290,7 +301,7 @@
 }
 
 wxString
-wxDbgHelpDLL::DumpField(PSYMBOL_INFO pSym, void *pVariable, unsigned level)
+wxDbgHelpDLL::DumpField(wxPSYMBOL_INFO pSym, void *pVariable, unsigned level)
 {
     wxString s;
 
@@ -337,7 +348,7 @@
 
 
                 // now pass to the type representing the type of this member
-                SYMBOL_INFO sym = *pSym;
+                wxSYMBOL_INFO sym = *pSym;
                 if ( !DoGetTypeInfo(pSym, TI_GET_TYPEID, &sym.TypeIndex) )
                     break;
 
@@ -388,7 +399,7 @@
 }
 
 /* static */ wxString
-wxDbgHelpDLL::DumpUDT(PSYMBOL_INFO pSym, void *pVariable, unsigned level)
+wxDbgHelpDLL::DumpUDT(wxPSYMBOL_INFO pSym, void *pVariable, unsigned level)
 {
     wxString s;
 
@@ -455,7 +466,7 @@
         s << wxT(" {\n");
 
         // Iterate through all children
-        SYMBOL_INFO sym;
+        wxSYMBOL_INFO sym;
         wxZeroMemory(sym);
         sym.ModBase = pSym->ModBase;
         for ( unsigned i = 0; i < dwChildrenCount; i++ )
@@ -487,7 +498,7 @@
 
 /* static */
 wxDbgHelpDLL::SymbolTag
-wxDbgHelpDLL::DereferenceSymbol(PSYMBOL_INFO pSym, void **ppData)
+wxDbgHelpDLL::DereferenceSymbol(wxPSYMBOL_INFO pSym, void **ppData)
 {
     SymbolTag tag = SYMBOL_TAG_NULL;
     for ( ;; )
@@ -524,10 +535,10 @@
 }
 
 /* static */ wxString
-wxDbgHelpDLL::DumpSymbol(PSYMBOL_INFO pSym, void *pVariable)
+wxDbgHelpDLL::DumpSymbol(wxPSYMBOL_INFO pSym, void *pVariable)
 {
     wxString s;
-    SYMBOL_INFO symDeref = *pSym;
+    wxSYMBOL_INFO symDeref = *pSym;
     switch ( DereferenceSymbol(&symDeref, &pVariable) )
     {
         default:
@@ -554,6 +565,73 @@
 }
 
 // ----------------------------------------------------------------------------
+// enumerating helper functions
+// ----------------------------------------------------------------------------
+
+struct wxMswEnumLoadedModulesAlternate
+{
+public:
+    wxMswEnumLoadedModulesAlternate(wxPENUMLOADED_MODULES_CALLBACK64 ptr, PVOID content)
+        : m_pointer_to_callback(ptr), m_user_content(content)
+    { }
+    wxPENUMLOADED_MODULES_CALLBACK64 m_pointer_to_callback;
+    PVOID m_user_content;
+};
+
+static BOOL CALLBACK wxMswEnumLoadedModulesByPassFunction(
+    PCSTR ModuleName, ULONG_PTR ModuleBase, ULONG ModuleSize, PVOID UserContext)
+{
+    wxMswEnumLoadedModulesAlternate& alternate =
+        *(wxMswEnumLoadedModulesAlternate*)(UserContext);
+    const int bufSize = MultiByteToWideChar(
+        CP_ACP, MB_PRECOMPOSED, ModuleName, -1, 0, 0);
+    if (bufSize <= 0)
+    {
+        static LPCWSTR errstr = L"[ConvertError1]";
+        return (*alternate.m_pointer_to_callback)
+            (errstr, ModuleBase, ModuleSize, alternate.m_user_content);
+    }
+    wxScopedPtr<WCHAR> buf(new WCHAR[bufSize]);
+    if (! buf)
+    {
+        static LPCWSTR allocerrstr = L"[AllocateError]";
+        return (*alternate.m_pointer_to_callback)
+            (allocerrstr, ModuleBase, ModuleSize, alternate.m_user_content);
+    }
+    const int convertedSize = MultiByteToWideChar(
+        CP_ACP, MB_PRECOMPOSED, ModuleName, -1, buf.get(), bufSize);
+    if (convertedSize <= 0)
+    {
+        static LPCWSTR errstr2 = L"[ConvertError2]";
+        return (*alternate.m_pointer_to_callback)
+            (errstr2, ModuleBase, ModuleSize, alternate.m_user_content);
+    }
+    return (*alternate.m_pointer_to_callback)
+        (buf.get(), ModuleBase, ModuleSize, alternate.m_user_content);
+}
+
+/* static */
+BOOL wxDbgHelpDLL::EnumerateLoadedModulesExOr64(
+    HANDLE handle, wxPENUMLOADED_MODULES_CALLBACK64 callback, PVOID pvoid)
+{
+    if (EnumerateLoadedModulesEx)
+    {
+        return (*EnumerateLoadedModulesEx)(handle, callback, pvoid);
+    }
+    if (EnumerateLoadedModules64)
+    {
+        return (*EnumerateLoadedModules64)(handle, callback, pvoid);
+    }
+    if (EnumerateLoadedModules)
+    {
+        wxMswEnumLoadedModulesAlternate p(callback, pvoid);
+        return (*EnumerateLoadedModules)
+            (handle, wxMswEnumLoadedModulesByPassFunction, (PVOID)(&p));
+    }
+    return FALSE;
+}
+
+// ----------------------------------------------------------------------------
 // debugging helpers
 // ----------------------------------------------------------------------------
 
Index: src/msw/dlmsw.cpp
===================================================================
--- src/msw/dlmsw.cpp	(リビジョン 73772)
+++ src/msw/dlmsw.cpp	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        src/msw/dlmsw.cpp
 // Purpose:     Win32-specific part of wxDynamicLibrary and related classes
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Suzumizaki-kimitaka 2013-04-06
 // Created:     2005-01-10 (partly extracted from common/dynlib.cpp)
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998-2005 Vadim Zeitlin <vadim@wxwindows.org>
@@ -80,15 +80,8 @@
         wxVersionDLL *verDLL;
     };
 
-    // TODO: fix EnumerateLoadedModules() to use EnumerateLoadedModules64()
-    #ifdef __WIN64__
-        typedef DWORD64 DWORD_32_64;
-    #else
-        typedef DWORD DWORD_32_64;
-    #endif
-
     static BOOL CALLBACK
-    EnumModulesProc(PCSTR name, DWORD_32_64 base, ULONG size, void *data);
+    EnumModulesProc(PCTSTR name, DWORD64 base, ULONG size, PVOID data);
 };
 
 // ============================================================================
@@ -116,7 +109,7 @@
         #endif // UNICODE/ANSI
 
         #define LOAD_VER_FUNCTION(name)                                       \
-            m_pfn ## name = (name ## _t)m_dll.GetSymbol(wxT(#name SUFFIX));    \
+            m_pfn ## name = (name ## _t)m_dll.GetSymbol(wxT(#name SUFFIX));   \
         if ( !m_pfn ## name )                                                 \
         {                                                                     \
             m_dll.Unload();                                                   \
@@ -175,17 +168,21 @@
 
 /* static */
 BOOL CALLBACK
-wxDynamicLibraryDetailsCreator::EnumModulesProc(PCSTR name,
-                                                DWORD_32_64 base,
+wxDynamicLibraryDetailsCreator::EnumModulesProc(PCTSTR name,
+                                                DWORD64 base,
                                                 ULONG size,
-                                                void *data)
+                                                PVOID data)
 {
     EnumModulesProcParams *params = (EnumModulesProcParams *)data;
 
     wxDynamicLibraryDetails *details = new wxDynamicLibraryDetails;
 
     // fill in simple properties
-    details->m_name = wxString::FromAscii(name);
+#ifdef UNICODE
+    details->m_name = name;
+#else
+    details->m_name = wxString(name, wxConvLocal);
+#endif
     details->m_address = wxUIntToPtr(base);
     details->m_length = size;
 
@@ -320,20 +317,14 @@
         params.dlls = &dlls;
         params.verDLL = &verDLL;
 
-        // Note that the cast of EnumModulesProc is needed because the type of
-        // PENUMLOADED_MODULES_CALLBACK changed: in old SDK versions its first
-        // argument was non-const PSTR while now it's PCSTR. By explicitly
-        // casting to whatever the currently used headers require we ensure
-        // that the code compilers in any case.
-        if ( !wxDbgHelpDLL::EnumerateLoadedModules
+        if ( !wxDbgHelpDLL::EnumerateLoadedModulesExOr64
                             (
                                 ::GetCurrentProcess(),
-                                (PENUMLOADED_MODULES_CALLBACK)
                                 wxDynamicLibraryDetailsCreator::EnumModulesProc,
                                 &params
                             ) )
         {
-            wxLogLastError(wxT("EnumerateLoadedModules"));
+            wxLogLastError(wxT("EnumerateLoadedModulesExOr64"));
         }
     }
 #endif // wxUSE_DBGHELP
@@ -342,7 +333,7 @@
 }
 
 /* static */
-WXHMODULE wxDynamicLibrary::MSWGetModuleHandle(const char *name, void *addr)
+WXHMODULE wxDynamicLibrary::MSWGetModuleHandle(LPCTSTR name, void *addr)
 {
     // we want to use GetModuleHandleEx() instead of usual GetModuleHandle()
     // because the former works correctly for comctl32.dll while the latter
@@ -350,7 +341,7 @@
     // GetModuleHandleEx() is only available under XP and later, coincidence?)
 
     // check if we can use GetModuleHandleEx
-    typedef BOOL (WINAPI *GetModuleHandleEx_t)(DWORD, LPCSTR, HMODULE *);
+    typedef BOOL (WINAPI *GetModuleHandleEx_t)(DWORD, LPCTSTR, HMODULE *);
 
     static const GetModuleHandleEx_t INVALID_FUNC_PTR = (GetModuleHandleEx_t)-1;
 
@@ -359,8 +350,11 @@
     {
         wxDynamicLibrary dll(wxT("kernel32.dll"), wxDL_VERBATIM);
         s_pfnGetModuleHandleEx =
+#ifdef UNICODE
+            (GetModuleHandleEx_t)dll.RawGetSymbol(wxT("GetModuleHandleExW"));
+#else
             (GetModuleHandleEx_t)dll.RawGetSymbol(wxT("GetModuleHandleExA"));
-
+#endif
         // dll object can be destroyed, kernel32.dll won't be unloaded anyhow
     }
 
@@ -370,16 +364,20 @@
         // flags are GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT |
         //           GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
         HMODULE hmod;
-        if ( s_pfnGetModuleHandleEx(6, (char *)addr, &hmod) && hmod )
+        if ( s_pfnGetModuleHandleEx(6, (LPCTSTR)addr, &hmod) && hmod )
             return hmod;
     }
 
     // Windows CE only has Unicode API, so even we have an ANSI string here, we
     // still need to use GetModuleHandleW() there
 #ifdef __WXWINCE__
+#ifdef UNICODE
+    return ::GetModuleHandleW(name);
+#else
     return ::GetModuleHandleW(wxConvLibc.cMB2WC(name).data());
+#endif
 #else
-    return ::GetModuleHandleA((char *)name);
+    return ::GetModuleHandle(name);
 #endif
 }
 
Index: src/msw/stackwalk.cpp
===================================================================
--- src/msw/stackwalk.cpp	(リビジョン 73772)
+++ src/msw/stackwalk.cpp	(作業コピー)
@@ -2,7 +2,7 @@
 // Name:        src/msw/stackwalk.cpp
 // Purpose:     wxStackWalker implementation for Win32
 // Author:      Vadim Zeitlin
-// Modified by: Artur Bac 2010-10-01 AMD64 Port
+// Modified by: Artur Bac 2010-10-01 AMD64 Port, Suzumizaki-kimitaka 2013-04-06
 // Created:     2005-01-08
 // RCS-ID:      $Id$
 // Copyright:   (c) 2003-2005 Vadim Zeitlin <vadim@wxwindows.org>
@@ -52,11 +52,11 @@
 
     // get the name of the function for this stack frame entry
     static const size_t MAX_NAME_LEN = 1024;
-    BYTE symbolBuffer[sizeof(SYMBOL_INFO) + MAX_NAME_LEN];
+    BYTE symbolBuffer[sizeof(wxSYMBOL_INFO) + MAX_NAME_LEN];
     wxZeroMemory(symbolBuffer);
 
-    PSYMBOL_INFO pSymbol = (PSYMBOL_INFO)symbolBuffer;
-    pSymbol->SizeOfStruct = sizeof(SYMBOL_INFO);
+    wxPSYMBOL_INFO pSymbol = (wxPSYMBOL_INFO)symbolBuffer;
+    pSymbol->SizeOfStruct = sizeof(wxSYMBOL_INFO);
     pSymbol->MaxNameLen = MAX_NAME_LEN;
 
     DWORD64 symDisplacement = 0;
@@ -71,8 +71,11 @@
         wxDbgHelpDLL::LogError(wxT("SymFromAddr"));
         return;
     }
-
-    m_name = wxString::FromAscii(pSymbol->Name);
+#ifdef UNICODE
+    m_name = pSymbol->Name;
+#else
+    m_name = wxString(pSymbol->Name, wxConvLocal);
+#endif
     m_offset = symDisplacement;
 }
 
@@ -84,9 +87,9 @@
     m_hasLocation = true;
 
     // get the source line for this stack frame entry
-    IMAGEHLP_LINE lineInfo = { sizeof(IMAGEHLP_LINE) };
+    wxIMAGEHLP_LINE lineInfo = { sizeof(wxIMAGEHLP_LINE) };
     DWORD dwLineDisplacement;
-    if ( !wxDbgHelpDLL::SymGetLineFromAddr
+    if ( !wxDbgHelpDLL::SymGetLineFromAddr64
                         (
                             ::GetCurrentProcess(),
                             GetSymAddr(),
@@ -96,11 +99,14 @@
     {
         // it is normal that we don't have source info for some symbols,
         // notably all the ones from the system DLLs...
-        //wxDbgHelpDLL::LogError(wxT("SymGetLineFromAddr"));
+        //wxDbgHelpDLL::LogError(wxT("SymGetLineFromAddr64"));
         return;
     }
-
-    m_filename = wxString::FromAscii(lineInfo.FileName);
+#ifdef UNICODE
+    m_filename = lineInfo.FileName;
+#else
+    m_filename = wxString(lineInfo.FileName, wxConvLocal);
+#endif
     m_line = lineInfo.LineNumber;
 }
 
@@ -126,11 +132,15 @@
     return true;
 }
 
-void wxStackFrame::OnParam(PSYMBOL_INFO pSymInfo)
+void wxStackFrame::OnParam(wxPSYMBOL_INFO pSymInfo)
 {
     m_paramTypes.Add(wxEmptyString);
 
-    m_paramNames.Add(wxString::FromAscii(pSymInfo->Name));
+#ifdef UNICODE
+    m_paramNames.Add(pSymInfo->Name);
+#else
+    m_paramNames.Add(wxString(pSymInfo->Name, wxConvLocal));
+#endif
 
     // if symbol information is corrupted and we crash, the exception is going
     // to be ignored when we're called from WalkFromException() because of the
@@ -159,7 +169,7 @@
 }
 
 BOOL CALLBACK
-EnumSymbolsProc(PSYMBOL_INFO pSymInfo, ULONG WXUNUSED(SymSize), PVOID data)
+EnumSymbolsProc(wxPSYMBOL_INFO pSymInfo, ULONG WXUNUSED(SymSize), PVOID data)
 {
     wxStackFrame *frame = static_cast<wxStackFrame *>(data);
 
@@ -383,7 +393,7 @@
     return false;
 }
 
-void wxStackFrame::OnParam(_SYMBOL_INFO * WXUNUSED(pSymInfo))
+void wxStackFrame::OnParam(wxPSYMBOL_INFO WXUNUSED(pSymInfo))
 {
 }
 

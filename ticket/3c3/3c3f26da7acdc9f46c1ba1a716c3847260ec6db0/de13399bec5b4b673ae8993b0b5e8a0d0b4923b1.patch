diff --git a/src/gtk/anybutton.cpp b/src/gtk/anybutton.cpp
index 16e7b4a..45cfc0c 100644
--- a/src/gtk/anybutton.cpp
+++ b/src/gtk/anybutton.cpp
@@ -64,18 +64,38 @@ wxgtk_button_released_callback(GtkWidget *WXUNUSED(widget), wxAnyButton *button)
     button->GTKReleased();
 }
 
+static void
+FindGtkButtonIn_(GtkWidget *widget, gpointer button_ptr_raw)
+{
+    if ( GTK_IS_BUTTON(widget) )
+        *wx_static_cast(GtkButton**, button_ptr_raw) = GTK_BUTTON(widget);
+    else if ( GTK_IS_CONTAINER(widget) )
+        gtk_container_foreach(GTK_CONTAINER(widget),
+                              FindGtkButtonIn_,
+                              button_ptr_raw);
+}
+
 } // extern "C"
 
 //-----------------------------------------------------------------------------
 // wxAnyButton
 //-----------------------------------------------------------------------------
 
+
+static GtkButton *FindGtkButtonIn(GtkWidget *widget)
+{
+    GtkButton *gtkButton = NULL;
+    FindGtkButtonIn_(widget, &gtkButton);
+    wxASSERT(gtkButton);
+    return gtkButton;
+}
+
 bool wxAnyButton::Enable( bool enable )
 {
     if (!base_type::Enable(enable))
         return false;
 
-    gtk_widget_set_sensitive(gtk_bin_get_child(GTK_BIN(m_widget)), enable);
+    gtk_widget_set_sensitive(gtk_bin_get_child(GTK_BIN(FindGtkButtonIn(m_widget))), enable);
 
     if (enable)
         GTKFixSensitivity();
@@ -87,7 +107,7 @@ bool wxAnyButton::Enable( bool enable )
 
 GdkWindow *wxAnyButton::GTKGetWindow(wxArrayGdkWindows& WXUNUSED(windows)) const
 {
-    return gtk_button_get_event_window(GTK_BUTTON(m_widget));
+    return gtk_button_get_event_window(GTK_BUTTON(FindGtkButtonIn(m_widget)));
 }
 
 // static
@@ -188,11 +208,11 @@ void wxAnyButton::GTKDoShowBitmap(const wxBitmap& bitmap)
     GtkWidget *image;
     if ( DontShowLabel() )
     {
-        image = gtk_bin_get_child(GTK_BIN(m_widget));
+        image = gtk_bin_get_child(GTK_BIN(FindGtkButtonIn(m_widget)));
     }
     else // have both label and bitmap
     {
-        image = gtk_button_get_image(GTK_BUTTON(m_widget));
+        image = gtk_button_get_image(GTK_BUTTON(FindGtkButtonIn(m_widget)));
     }
 
     wxCHECK_RET( image && GTK_IS_IMAGE(image), "must have image widget" );
@@ -207,6 +227,7 @@ wxBitmap wxAnyButton::DoGetBitmap(State which) const
 
 void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
 {
+    GtkButton *gtkButton = FindGtkButtonIn(m_widget);
     switch ( which )
     {
         case State_Normal:
@@ -221,15 +242,15 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
             // resetting it to nothing disables all of them
             else
             {
-                GtkWidget *image = gtk_button_get_image(GTK_BUTTON(m_widget));
+                GtkWidget *image = gtk_button_get_image(gtkButton);
                 if ( image && !bitmap.IsOk() )
                 {
-                    gtk_container_remove(GTK_CONTAINER(m_widget), image);
+                    gtk_container_remove(GTK_CONTAINER(gtkButton), image);
                 }
                 else if ( !image && bitmap.IsOk() )
                 {
                     image = gtk_image_new();
-                    gtk_button_set_image(GTK_BUTTON(m_widget), image);
+                    gtk_button_set_image(gtkButton, image);
 
                     // Setting the image recreates the label, so we need to
                     // reapply the styles to it to preserve the existing text
@@ -255,7 +276,7 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
                     // the button pressed state change
                     g_signal_connect
                     (
-                        m_widget,
+                        gtkButton,
                         "pressed",
                         G_CALLBACK(wxgtk_button_press_callback),
                         this
@@ -263,7 +284,7 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
 
                     g_signal_connect
                     (
-                        m_widget,
+                        gtkButton,
                         "released",
                         G_CALLBACK(wxgtk_button_released_callback),
                         this
@@ -278,14 +299,14 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
                     // state changes any more
                     g_signal_handlers_disconnect_by_func
                     (
-                        m_widget,
+                        gtkButton,
                         (gpointer)wxgtk_button_press_callback,
                         this
                     );
 
                     g_signal_handlers_disconnect_by_func
                     (
-                        m_widget,
+                        gtkButton,
                         (gpointer)wxgtk_button_released_callback,
                         this
                     );
@@ -311,7 +332,7 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
                 {
                     g_signal_connect
                     (
-                        m_widget,
+                        gtkButton,
                         "enter",
                         G_CALLBACK(wxgtk_button_enter_callback),
                         this
@@ -319,7 +340,7 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
 
                     g_signal_connect
                     (
-                        m_widget,
+                        gtkButton,
                         "leave",
                         G_CALLBACK(wxgtk_button_leave_callback),
                         this
@@ -332,14 +353,14 @@ void wxAnyButton::DoSetBitmap(const wxBitmap& bitmap, State which)
                 {
                     g_signal_handlers_disconnect_by_func
                     (
-                        m_widget,
+                        gtkButton,
                         (gpointer)wxgtk_button_enter_callback,
                         this
                     );
 
                     g_signal_handlers_disconnect_by_func
                     (
-                        m_widget,
+                        gtkButton,
                         (gpointer)wxgtk_button_leave_callback,
                         this
                     );
@@ -415,7 +436,7 @@ void wxAnyButton::DoSetBitmapPosition(wxDirection dir)
                 break;
         }
 
-        gtk_button_set_image_position(GTK_BUTTON(m_widget), gtkpos);
+        gtk_button_set_image_position(FindGtkButtonIn(m_widget), gtkpos);
 
         // As in DoSetBitmap() above, the above call can invalidate the label
         // style, so reapply it to preserve its font and colour.
diff --git a/src/gtk/button.cpp b/src/gtk/button.cpp
index 7329f8a..cd073d9 100644
--- a/src/gtk/button.cpp
+++ b/src/gtk/button.cpp
@@ -65,12 +65,32 @@ wxgtk_button_style_set_callback(GtkWidget* widget, GtkStyle*, wxButton* win)
     }
 }
 
+static void
+FindGtkButtonIn_(GtkWidget *widget, gpointer button_ptr_raw)
+{
+    if ( GTK_IS_BUTTON(widget) )
+        *wx_static_cast(GtkButton**, button_ptr_raw) = GTK_BUTTON(widget);
+    else if ( GTK_IS_CONTAINER(widget) )
+        gtk_container_foreach(GTK_CONTAINER(widget),
+                              FindGtkButtonIn_,
+                              button_ptr_raw);
+}
+
 } // extern "C"
 
 //-----------------------------------------------------------------------------
 // wxButton
 //-----------------------------------------------------------------------------
 
+static GtkButton *FindGtkButtonIn(GtkWidget *widget)
+{
+    GtkButton *gtkButton = NULL;
+    FindGtkButtonIn_(widget, &gtkButton);
+    wxASSERT(gtkButton);
+    return gtkButton;
+}
+
+
 bool wxButton::Create(wxWindow *parent,
                       wxWindowID id,
                       const wxString &label,
@@ -206,13 +226,15 @@ void wxButton::SetLabel( const wxString &lbl )
     if ( HasFlag(wxBU_NOTEXT) )
         return;
 
+    GtkButton *gtkButton = FindGtkButtonIn(m_widget);
+
     if (wxIsStockID(m_windowId) && wxIsStockLabel(m_windowId, label))
     {
         const char *stock = wxGetStockGtkID(m_windowId);
         if (stock)
         {
-            gtk_button_set_label(GTK_BUTTON(m_widget), stock);
-            gtk_button_set_use_stock(GTK_BUTTON(m_widget), TRUE);
+            gtk_button_set_label(gtkButton, stock);
+            gtk_button_set_use_stock(gtkButton, TRUE);
             return;
         }
     }
@@ -220,10 +242,10 @@ void wxButton::SetLabel( const wxString &lbl )
     // this call is necessary if the button had been initially created without
     // a (text) label -- then we didn't use gtk_button_new_with_mnemonic() and
     // so "use-underline" GtkButton property remained unset
-    gtk_button_set_use_underline(GTK_BUTTON(m_widget), TRUE);
+    gtk_button_set_use_underline(gtkButton, TRUE);
     const wxString labelGTK = GTKConvertMnemonics(label);
-    gtk_button_set_label(GTK_BUTTON(m_widget), wxGTK_CONV(labelGTK));
-    gtk_button_set_use_stock(GTK_BUTTON(m_widget), FALSE);
+    gtk_button_set_label(gtkButton, wxGTK_CONV(labelGTK));
+    gtk_button_set_use_stock(gtkButton, FALSE);
 
     GTKApplyWidgetStyle( false );
 }
@@ -249,7 +271,7 @@ bool wxButton::DoSetLabelMarkup(const wxString& markup)
 
 GtkLabel *wxButton::GTKGetLabel() const
 {
-    GtkWidget* child = gtk_bin_get_child(GTK_BIN(m_widget));
+    GtkWidget* child = gtk_bin_get_child(GTK_BIN(FindGtkButtonIn(m_widget)));
     if ( GTK_IS_ALIGNMENT(child) )
     {
         GtkWidget* box = gtk_bin_get_child(GTK_BIN(child));
@@ -271,7 +293,8 @@ GtkLabel *wxButton::GTKGetLabel() const
 void wxButton::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     GTKApplyStyle(m_widget, style);
-    GtkWidget* child = gtk_bin_get_child(GTK_BIN(m_widget));
+    GtkButton *gtkButton = FindGtkButtonIn(m_widget);
+    GtkWidget* child = gtk_bin_get_child(GTK_BIN(gtkButton));
     GTKApplyStyle(child, style);
 
     // for buttons with images, the path to the label is (at least in 2.12)

Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 74912)
+++ include/wx/event.h	(working copy)
@@ -2265,6 +2265,14 @@
     DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxChildFocusEvent)
 };
 
+// Type of activation. For now we can only detect if it was by mouse or by some
+// other method (wxMSW only).
+enum ActivationReason
+{
+    Activation_Mouse,
+    Activation_Unknown
+};
+
 // Activate event class
 /*
  wxEVT_ACTIVATE
@@ -2275,19 +2283,27 @@
 class WXDLLIMPEXP_CORE wxActivateEvent : public wxEvent
 {
 public:
-    wxActivateEvent(wxEventType type = wxEVT_NULL, bool active = true, int Id = 0)
-        : wxEvent(Id, type)
-        { m_active = active; }
+    wxActivateEvent(wxEventType type = wxEVT_NULL, bool active = true, int Id = 0, ActivationReason ActivationReason_ = Activation_Unknown)
+        : wxEvent(Id, type),
+        m_activationReason(ActivationReason_)
+    {
+        m_active = active;
+    }
     wxActivateEvent(const wxActivateEvent& event)
         : wxEvent(event)
-    { m_active = event.m_active; }
+    {
+        m_active = event.m_active;
+        m_activationReason = event.m_activationReason;
+    }
 
     bool GetActive() const { return m_active; }
+    ActivationReason GetActivationReason() const { return m_activationReason;}
 
     virtual wxEvent *Clone() const { return new wxActivateEvent(*this); }
 
 private:
     bool m_active;
+    ActivationReason m_activationReason;
 
 private:
     DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxActivateEvent)
Index: interface/wx/event.h
===================================================================
--- interface/wx/event.h	(revision 74912)
+++ interface/wx/event.h	(working copy)
@@ -2947,7 +2947,20 @@
 };
 
 
+/**
+    Enum for specifying the activation reason, i.e. if the window was activated
+    by mouse click or by some other method.
 
+    @since 3.0
+*/
+enum ActivationReason
+{
+    /// Window activated by mouse click.
+    Activation_Mouse,
+    /// Window was activated with some other method than mouse click.
+    Activation_Unknown
+};
+
 /**
     @class wxActivateEvent
 
@@ -2986,6 +2999,14 @@
         Returns @true if the application or window is being activated, @false otherwise.
     */
     bool GetActive() const;
+
+    /**
+        Returns @c Activation_Mouse if window was activated with mouse click.
+        Otherwise returns @c Activation_Unknown if window was activated by some
+        other method as keyboard, calling activation function directly, etc.
+        (wxMSW only)
+    */
+    ActivationReason GetActivationReason() const;
 };
 
 
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 74912)
+++ src/msw/window.cpp	(working copy)
@@ -4049,7 +4049,8 @@
 {
     wxActivateEvent event(wxEVT_ACTIVATE,
                           (state == WA_ACTIVE) || (state == WA_CLICKACTIVE),
-                          m_windowId);
+                          m_windowId,
+                          state == WA_CLICKACTIVE ? Activation_Mouse : Activation_Unknown);
     event.SetEventObject(this);
 
     return HandleWindowEvent(event);

Index: include/wx/generic/progdlgg.h
===================================================================
--- include/wx/generic/progdlgg.h	(revision 69386)
+++ include/wx/generic/progdlgg.h	(working copy)
@@ -27,6 +27,7 @@
 class WXDLLIMPEXP_CORE wxGenericProgressDialog : public wxDialog
 {
 public:
+    wxGenericProgressDialog();
     wxGenericProgressDialog(const wxString& title, const wxString& message,
                             int maximum = 100,
                             wxWindow *parent = NULL,
@@ -34,6 +35,12 @@
 
     virtual ~wxGenericProgressDialog();
 
+    virtual bool Create(const wxString& title,
+                        const wxString& message,
+                        int maximum,
+                        wxWindow *parent,
+                        int style);
+
     virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
     virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool *skip = NULL);
 
@@ -67,15 +74,6 @@
     };
 
 protected:
-    // This ctor is used by the native MSW implementation only.
-    wxGenericProgressDialog(wxWindow *parent, int style);
-
-    void Create(const wxString& title,
-                const wxString& message,
-                int maximum,
-                wxWindow *parent,
-                int style);
-
     // Update just the m_maximum field, this is used by public SetRange() but,
     // unlike it, doesn't update the controls state. This makes it useful for
     // both this class and its derived classes that don't use m_gauge to
@@ -151,7 +149,7 @@
     static void SetTimeLabel(unsigned long val, wxStaticText *label);
 
     // common part of all ctors
-    void Init(wxWindow *parent, int style);
+    void Init();
 
     // create the label with given text and another one to show the time nearby
     // as the next windows in the sizer, returns the created control
Index: include/wx/msw/progdlg.h
===================================================================
--- include/wx/msw/progdlg.h	(revision 69386)
+++ include/wx/msw/progdlg.h	(working copy)
@@ -17,6 +17,7 @@
 class WXDLLIMPEXP_CORE wxProgressDialog : public wxGenericProgressDialog
 {
 public:
+    wxProgressDialog();
     wxProgressDialog(const wxString& title, const wxString& message,
                      int maximum = 100,
                      wxWindow *parent = NULL,
@@ -24,6 +25,12 @@
 
     virtual ~wxProgressDialog();
 
+    virtual bool Create(const wxString& title,
+                        const wxString& message,
+                        int maximum,
+                        wxWindow *parent,
+                        int style);
+
     virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
     virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool *skip = NULL);
 
@@ -50,6 +57,9 @@
     virtual WXWidget GetHandle() const;
 
 private:
+    // common part of all ctors
+    void Init();
+
     // Performs common routines to Update() and Pulse(). Requires the
     // shared object to have been entered.
     bool DoNativeBeforeUpdate(bool *skip);
Index: interface/wx/progdlg.h
===================================================================
--- interface/wx/progdlg.h	(revision 69386)
+++ interface/wx/progdlg.h	(working copy)
@@ -67,6 +67,13 @@
 {
 public:
     /**
+        Constructor
+
+        @since 2.9.3
+    */
+    wxProgressDialog();
+
+    /**
         Constructor. Creates the dialog, displays it and disables user input
         for other windows, or, if @c wxPD_APP_MODAL flag is not given, for its
         parent window only.
@@ -95,6 +102,31 @@
     virtual ~wxProgressDialog();
 
     /**
+        Creates the dialog, displays it and disables user input
+        for other windows, or, if @c wxPD_APP_MODAL flag is not given, for its
+        parent window only.
+
+        @param title
+            Dialog title to show in titlebar.
+        @param message
+            Message displayed above the progress bar.
+        @param maximum
+            Maximum value for the progress bar.
+            In the generic implementation the progress bar is constructed
+            only if this value is greater than zero.
+        @param parent
+            Parent window.
+        @param style
+            The dialog style. See wxProgressDialog.
+
+        @since 2.9.3
+    */
+    virtual bool Create(const wxString& title, const wxString& message,
+                     int maximum = 100,
+                     wxWindow* parent = NULL,
+                     int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL);
+
+    /**
         Returns the last value passed to the Update() function or
         @c wxNOT_FOUND if the dialog has no progress bar.
 
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 69386)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1876,9 +1876,15 @@
 
 void MyFrame::ShowProgress( wxCommandEvent& WXUNUSED(event) )
 {
+    ShowProgress(new wxProgressDialog()); // native on wxMSW
+    //ShowProgress(new wxGenericProgressDialog()); // old non-native implementation
+}
+
+void MyFrame::ShowProgress(wxGenericProgressDialog* dialog)
+{
     static const int max = 100;
 
-    wxProgressDialog dialog("Progress dialog example",
+    dialog->Create("Progress dialog example",
                             // "Reserve" enough space for the multiline
                             // messages below, we'll change it anyhow
                             // immediately in the loop below
@@ -1931,11 +1937,11 @@
         bool skip = false;
         if ( determinate )
         {
-            cont = dialog.Update(i, msg, &skip);
+            cont = dialog->Update(i, msg, &skip);
         }
         else
         {
-            cont = dialog.Pulse(msg, &skip);
+            cont = dialog->Pulse(msg, &skip);
         }
 
         // each skip will move progress about quarter forward
@@ -1955,7 +1961,7 @@
                 break;
 
             cont = true;
-            dialog.Resume();
+            dialog->Resume();
         }
 
         wxMilliSleep(200);
@@ -1969,6 +1975,7 @@
     {
         wxLogStatus(wxT("Countdown from %d finished"), max);
     }
+    delete dialog;
 }
 
 #endif // wxUSE_PROGRESSDLG
Index: samples/dialogs/dialogs.h
===================================================================
--- samples/dialogs/dialogs.h	(revision 69386)
+++ samples/dialogs/dialogs.h	(working copy)
@@ -428,6 +428,7 @@
     void DlgOnTop(wxCommandEvent& event);
 
 #if wxUSE_PROGRESSDLG
+    void ShowProgress(wxGenericProgressDialog* dialog);
     void ShowProgress(wxCommandEvent& event);
 #endif // wxUSE_PROGRESSDLG
 
Index: src/generic/progdlgg.cpp
===================================================================
--- src/generic/progdlgg.cpp	(revision 69386)
+++ src/generic/progdlgg.cpp	(working copy)
@@ -87,7 +87,7 @@
 // wxGenericProgressDialog creation
 // ----------------------------------------------------------------------------
 
-void wxGenericProgressDialog::Init(wxWindow *parent, int style)
+void wxGenericProgressDialog::Init()
 {
     // we may disappear at any moment, let the others know about it
     SetExtraStyle(GetExtraStyle() | wxWS_EX_TRANSIENT);
@@ -95,10 +95,9 @@
     // Initialize all our members that we always use (even when we don't
     // create a valid window in this class).
 
-    m_pdStyle = style;
+    m_pdStyle = 0;
+    m_parentTop = NULL;
 
-    m_parentTop = wxGetTopLevelParent(parent);
-
     m_gauge = NULL;
     m_msg = NULL;
     m_elapsed =
@@ -129,10 +128,10 @@
     m_tempEventLoop = NULL;
 }
 
-wxGenericProgressDialog::wxGenericProgressDialog(wxWindow *parent, int style)
+wxGenericProgressDialog::wxGenericProgressDialog()
                        : wxDialog()
 {
-    Init(parent, style);
+    Init();
 }
 
 wxGenericProgressDialog::wxGenericProgressDialog(const wxString& title,
@@ -142,19 +141,23 @@
                                                  int style)
                        : wxDialog()
 {
-    Init(parent, style);
+    Init();
 
     Create( title, message, maximum, parent, style );
 }
 
-void wxGenericProgressDialog::Create( const wxString& title,
+bool wxGenericProgressDialog::Create( const wxString& title,
                                       const wxString& message,
                                       int maximum,
                                       wxWindow *parent,
                                       int style )
 {
-    wxDialog::Create(GetParentForModalDialog(parent, style), wxID_ANY, title);
+    m_parentTop = wxGetTopLevelParent(parent);
+    m_pdStyle = style;
 
+    if (!wxDialog::Create(GetParentForModalDialog(parent, style), wxID_ANY, title))
+        return false;
+
     SetParent( GetParentForModalDialog(parent, style) );
     SetTitle( title );
 
@@ -306,6 +309,7 @@
     }
 
     Update();
+    return true;
 }
 
 void wxGenericProgressDialog::UpdateTimeEstimates(int value,
Index: src/msw/progdlg.cpp
===================================================================
--- src/msw/progdlg.cpp	(revision 69386)
+++ src/msw/progdlg.cpp	(working copy)
@@ -297,17 +297,36 @@
 // wxProgressDialog implementation
 // ============================================================================
 
+void wxProgressDialog::Init()
+{
+     m_taskDialogRunner = NULL;
+     m_sharedData = NULL;
+}
+
+
+wxProgressDialog::wxProgressDialog()
+{
+    Init();
+}
+
 wxProgressDialog::wxProgressDialog( const wxString& title,
                                     const wxString& message,
                                     int maximum,
                                     wxWindow *parent,
                                     int style )
-    : wxGenericProgressDialog(parent, style),
-      m_taskDialogRunner(NULL),
-      m_sharedData(NULL),
-      m_message(message),
-      m_title(title)
 {
+    Init();
+    Create(title, message, maximum, parent, style);
+}
+
+bool wxProgressDialog::Create( const wxString& title,
+                               const wxString& message,
+                               int maximum,
+                               wxWindow *parent,
+                               int style )
+{
+      m_message = message;
+      m_title = title;
 #ifdef wxHAS_MSW_TASKDIALOG
     if ( HasNativeTaskDialog() )
     {
@@ -316,11 +335,10 @@
         Show();
         DisableOtherWindows();
 
-        return;
+        return true;
     }
 #endif // wxHAS_MSW_TASKDIALOG
-
-    Create(title, message, maximum, parent, style);
+    return wxGenericProgressDialog::Create(title, message, maximum, parent, style);
 }
 
 wxProgressDialog::~wxProgressDialog()

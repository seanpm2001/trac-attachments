Index: include/wx/generic/progdlgg.h
===================================================================
--- include/wx/generic/progdlgg.h	(revision 69862)
+++ include/wx/generic/progdlgg.h	(working copy)
@@ -27,6 +27,7 @@
 class WXDLLIMPEXP_CORE wxGenericProgressDialog : public wxDialog
 {
 public:
+    wxGenericProgressDialog();
     wxGenericProgressDialog(const wxString& title, const wxString& message,
                             int maximum = 100,
                             wxWindow *parent = NULL,
@@ -34,6 +35,12 @@
 
     virtual ~wxGenericProgressDialog();
 
+    bool Create(const wxString& title,
+                const wxString& message,
+                int maximum = 100,
+                wxWindow *parent = NULL,
+                int style = wxPD_APP_MODAL | wxPD_AUTO_HIDE);
+
     virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
     virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool *skip = NULL);
 
@@ -67,15 +74,6 @@
     };
 
 protected:
-    // This ctor is used by the native MSW implementation only.
-    wxGenericProgressDialog(wxWindow *parent, int style);
-
-    void Create(const wxString& title,
-                const wxString& message,
-                int maximum,
-                wxWindow *parent,
-                int style);
-
     // Update just the m_maximum field, this is used by public SetRange() but,
     // unlike it, doesn't update the controls state. This makes it useful for
     // both this class and its derived classes that don't use m_gauge to
@@ -151,7 +149,7 @@
     static void SetTimeLabel(unsigned long val, wxStaticText *label);
 
     // common part of all ctors
-    void Init(wxWindow *parent, int style);
+    void Init();
 
     // create the label with given text and another one to show the time nearby
     // as the next windows in the sizer, returns the created control
Index: interface/wx/progdlg.h
===================================================================
--- interface/wx/progdlg.h	(revision 69862)
+++ interface/wx/progdlg.h	(working copy)
@@ -6,64 +6,13 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
-#define wxPD_CAN_ABORT          0x0001
-#define wxPD_APP_MODAL          0x0002
-#define wxPD_AUTO_HIDE          0x0004
-#define wxPD_ELAPSED_TIME       0x0008
-#define wxPD_ESTIMATED_TIME     0x0010
-#define wxPD_SMOOTH             0x0020
-#define wxPD_REMAINING_TIME     0x0040
-#define wxPD_CAN_SKIP           0x0080
-
 /**
     @class wxProgressDialog
 
-    This class represents a dialog that shows a short message and a
-    progress bar. Optionally, it can display ABORT and SKIP buttons, and
-    the elapsed, remaining and estimated time for the end of the progress.
-
-    Note that you must be aware that wxProgressDialog internally calls
-    wxEventLoopBase::YieldFor with @c wxEVT_CATEGORY_UI and @c wxEVT_CATEGORY_USER_INPUT
-    and this may cause unwanted re-entrancies or the out-of-order processing
-    of pending events (to help preventing the last problem if you're using
-    wxProgressDialog in a multi-threaded application you should be sure to use
-    wxThreadEvent for your inter-threads communications).
-
-    @beginStyleTable
-    @style{wxPD_APP_MODAL}
-           Make the progress dialog modal. If this flag is not given, it is
-           only "locally" modal - that is the input to the parent window is
-           disabled, but not to the other ones.
-    @style{wxPD_AUTO_HIDE}
-           Causes the progress dialog to disappear from screen as soon as the
-           maximum value of the progress meter has been reached.
-           If this style is not present, the dialog will become a modal dialog
-           (see wxDialog::ShowModal) once the maximum value has been reached
-           and wait for the user to dismiss it.
-    @style{wxPD_SMOOTH}
-           Causes smooth progress of the gauge control (uses a wxGauge with the
-           @c wxGA_SMOOTH style).
-    @style{wxPD_CAN_ABORT}
-           This flag tells the dialog that it should have a "Cancel" button
-           which the user may press. If this happens, the next call to
-           Update() will return @false.
-    @style{wxPD_CAN_SKIP}
-           This flag tells the dialog that it should have a "Skip" button
-           which the user may press. If this happens, the next call to
-           Update() will return @true in its skip parameter.
-    @style{wxPD_ELAPSED_TIME}
-           This flag tells the dialog that it should show elapsed time (since
-           creating the dialog).
-    @style{wxPD_ESTIMATED_TIME}
-           This flag tells the dialog that it should show estimated time.
-    @style{wxPD_REMAINING_TIME}
-           This flag tells the dialog that it should show remaining time.
-    @endStyleTable
-
     @library{wxbase}
     @category{cmndlg}
 */
-class wxProgressDialog : public wxDialog
+class wxProgressDialog : public wxGenericProgressDialog
 {
 public:
     /**
@@ -82,127 +31,11 @@
         @param parent
             Parent window.
         @param style
-            The dialog style. See wxProgressDialog.
+            The dialog style. See wxGenericProgressDialog.
     */
     wxProgressDialog(const wxString& title, const wxString& message,
                      int maximum = 100,
                      wxWindow* parent = NULL,
                      int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL);
 
-    /**
-        Destructor. Deletes the dialog and enables all top level windows.
-    */
-    virtual ~wxProgressDialog();
-
-    /**
-        Returns the last value passed to the Update() function or
-        @c wxNOT_FOUND if the dialog has no progress bar.
-
-        @since 2.9.0
-    */
-    int GetValue() const;
-
-    /**
-        Returns the maximum value of the progress meter, as passed to
-        the constructor or @c wxNOT_FOUND if the dialog has no progress bar.
-
-        @since 2.9.0
-    */
-    int GetRange() const;
-
-    /**
-        Returns the last message passed to the Update() function;
-        if you always passed wxEmptyString to Update() then the message
-        set through the constructor is returned.
-
-        @since 2.9.0
-    */
-    wxString GetMessage() const;
-
-    /**
-        Like Update() but makes the gauge control run in indeterminate mode.
-
-        In indeterminate mode the remaining and the estimated time labels (if
-        present) are set to "Unknown" or to @a newmsg (if it's non-empty).
-        Each call to this function moves the progress bar a bit to indicate
-        that some progress was done.
-
-        @see wxGauge::Pulse(), Update()
-    */
-    virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool* skip = NULL);
-
-    /**
-        Can be used to continue with the dialog, after the user had clicked the "Abort" button.
-    */
-    void Resume();
-
-    /**
-        Changes the maximum value of the progress meter given in the constructor.
-        This function can only be called (with a positive value) if the value passed 
-        in the constructor was positive.
-
-        @since 2.9.1
-    */
-    void SetRange(int maximum);
-
-
-      /**
-         Returns true if the "Cancel" button was pressed.
-
-         Normally a Cancel button press is indicated by Update() returning
-         @false but sometimes it may be more convenient to check if the dialog
-         was cancelled from elsewhere in the code and this function allows to
-         do it.
-
-         It always returns @false if the Cancel button is not shown at all.
-
-         @since 2.9.1
-     */
-    bool WasCancelled() const;
-
-     /**
-         Returns true if the "Skip" button was pressed.
-
-         This is similar to WasCancelled() but returns @true if the "Skip"
-         button was pressed, not the "Cancel" one.
-
-         @since 2.9.1
-     */
-    bool WasSkipped() const;
-
-
-    /**
-        Updates the dialog, setting the progress bar to the new value and
-        updating the message if new one is specified.
-
-        Returns @true unless the "Cancel" button has been pressed.
-
-        If @false is returned, the application can either immediately destroy the
-        dialog or ask the user for the confirmation and if the abort is not confirmed
-        the dialog may be resumed with Resume() function.
-
-        If @a value is the maximum value for the dialog, the behaviour of the
-        function depends on whether @c wxPD_AUTO_HIDE was used when the dialog
-        was created. If it was, the dialog is hidden and the function returns
-        immediately. If it was not, the dialog becomes a modal dialog and waits
-        for the user to dismiss it, meaning that this function does not return
-        until this happens.
-
-        Notice that you may want to call Fit() to change the dialog size to
-        conform to the length of the new message if desired. The dialog does
-        not do this automatically.
-
-        @param value
-            The new value of the progress meter. It should be less than or equal to
-            the maximum value given to the constructor.
-        @param newmsg
-            The new messages for the progress dialog text, if it is
-            empty (which is the default) the message is not changed.
-        @param skip
-            If "Skip" button was pressed since last Update() call,
-            this is set to @true.
-    */
-    virtual bool Update(int value, const wxString& newmsg = wxEmptyString,
-                        bool* skip = NULL);
 };
-
Index: interface/wx/progdlgg.h
===================================================================
--- interface/wx/progdlgg.h	(revision 0)
+++ interface/wx/progdlgg.h	(working copy)
@@ -0,0 +1,240 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        progdlg.h
+// Purpose:     interface of wxGenericProgressDialog
+// Author:      wxWidgets team
+// RCS-ID:      $Id$
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#define wxPD_CAN_ABORT          0x0001
+#define wxPD_APP_MODAL          0x0002
+#define wxPD_AUTO_HIDE          0x0004
+#define wxPD_ELAPSED_TIME       0x0008
+#define wxPD_ESTIMATED_TIME     0x0010
+#define wxPD_SMOOTH             0x0020
+#define wxPD_REMAINING_TIME     0x0040
+#define wxPD_CAN_SKIP           0x0080
+
+/**
+    @class wxGenericProgressDialog
+
+    This class represents a dialog that shows a short message and a
+    progress bar. Optionally, it can display ABORT and SKIP buttons, and
+    the elapsed, remaining and estimated time for the end of the progress.
+
+    Note that you must be aware that wxGenericProgressDialog internally calls
+    wxEventLoopBase::YieldFor with @c wxEVT_CATEGORY_UI and @c wxEVT_CATEGORY_USER_INPUT
+    and this may cause unwanted re-entrancies or the out-of-order processing
+    of pending events (to help preventing the last problem if you're using
+    wxGenericProgressDialog in a multi-threaded application you should be sure to use
+    wxThreadEvent for your inter-threads communications).
+
+    @beginStyleTable
+    @style{wxPD_APP_MODAL}
+           Make the progress dialog modal. If this flag is not given, it is
+           only "locally" modal - that is the input to the parent window is
+           disabled, but not to the other ones.
+    @style{wxPD_AUTO_HIDE}
+           Causes the progress dialog to disappear from screen as soon as the
+           maximum value of the progress meter has been reached.
+           If this style is not present, the dialog will become a modal dialog
+           (see wxDialog::ShowModal) once the maximum value has been reached
+           and wait for the user to dismiss it.
+    @style{wxPD_SMOOTH}
+           Causes smooth progress of the gauge control (uses a wxGauge with the
+           @c wxGA_SMOOTH style).
+    @style{wxPD_CAN_ABORT}
+           This flag tells the dialog that it should have a "Cancel" button
+           which the user may press. If this happens, the next call to
+           Update() will return @false.
+    @style{wxPD_CAN_SKIP}
+           This flag tells the dialog that it should have a "Skip" button
+           which the user may press. If this happens, the next call to
+           Update() will return @true in its skip parameter.
+    @style{wxPD_ELAPSED_TIME}
+           This flag tells the dialog that it should show elapsed time (since
+           creating the dialog).
+    @style{wxPD_ESTIMATED_TIME}
+           This flag tells the dialog that it should show estimated time.
+    @style{wxPD_REMAINING_TIME}
+           This flag tells the dialog that it should show remaining time.
+    @endStyleTable
+
+    @library{wxbase}
+    @category{cmndlg}
+*/
+class wxGenericProgressDialog : public wxDialog
+{
+public:
+    /**
+        Constructor
+
+        @since 2.9.3
+    */
+    wxGenericProgressDialog();
+
+    /**
+        Constructor. Creates the dialog, displays it and disables user input
+        for other windows, or, if @c wxPD_APP_MODAL flag is not given, for its
+        parent window only.
+
+        @param title
+            Dialog title to show in titlebar.
+        @param message
+            Message displayed above the progress bar.
+        @param maximum
+            Maximum value for the progress bar.
+            In the generic implementation the progress bar is constructed
+            only if this value is greater than zero.
+        @param parent
+            Parent window.
+        @param style
+            The dialog style. See wxGenericProgressDialog.
+    */
+    wxGenericProgressDialog(const wxString& title, const wxString& message,
+                     int maximum = 100,
+                     wxWindow* parent = NULL,
+                     int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL);
+
+    /**
+        Destructor. Deletes the dialog and enables all top level windows.
+    */
+    virtual ~wxGenericProgressDialog();
+
+    /**
+        Creates the dialog, displays it and disables user input
+        for other windows, or, if @c wxPD_APP_MODAL flag is not given, for its
+        parent window only.
+
+        @param title
+            Dialog title to show in titlebar.
+        @param message
+            Message displayed above the progress bar.
+        @param maximum
+            Maximum value for the progress bar.
+            In the generic implementation the progress bar is constructed
+            only if this value is greater than zero.
+        @param parent
+            Parent window.
+        @param style
+            The dialog style. See wxGenericProgressDialog.
+
+        @since 2.9.3
+    */
+    bool Create(const wxString& title, const wxString& message,
+                int maximum = 100,
+                wxWindow* parent = NULL,
+                int style = wxPD_AUTO_HIDE | wxPD_APP_MODAL);
+
+    /**
+        Returns the last value passed to the Update() function or
+        @c wxNOT_FOUND if the dialog has no progress bar.
+
+        @since 2.9.0
+    */
+    int GetValue() const;
+
+    /**
+        Returns the maximum value of the progress meter, as passed to
+        the constructor or @c wxNOT_FOUND if the dialog has no progress bar.
+
+        @since 2.9.0
+    */
+    int GetRange() const;
+
+    /**
+        Returns the last message passed to the Update() function;
+        if you always passed wxEmptyString to Update() then the message
+        set through the constructor is returned.
+
+        @since 2.9.0
+    */
+    wxString GetMessage() const;
+
+    /**
+        Like Update() but makes the gauge control run in indeterminate mode.
+
+        In indeterminate mode the remaining and the estimated time labels (if
+        present) are set to "Unknown" or to @a newmsg (if it's non-empty).
+        Each call to this function moves the progress bar a bit to indicate
+        that some progress was done.
+
+        @see wxGauge::Pulse(), Update()
+    */
+    virtual bool Pulse(const wxString& newmsg = wxEmptyString, bool* skip = NULL);
+
+    /**
+        Can be used to continue with the dialog, after the user had clicked the "Abort" button.
+    */
+    void Resume();
+
+    /**
+        Changes the maximum value of the progress meter given in the constructor.
+        This function can only be called (with a positive value) if the value passed 
+        in the constructor was positive.
+
+        @since 2.9.1
+    */
+    void SetRange(int maximum);
+
+
+      /**
+         Returns true if the "Cancel" button was pressed.
+
+         Normally a Cancel button press is indicated by Update() returning
+         @false but sometimes it may be more convenient to check if the dialog
+         was cancelled from elsewhere in the code and this function allows to
+         do it.
+
+         It always returns @false if the Cancel button is not shown at all.
+
+         @since 2.9.1
+     */
+    bool WasCancelled() const;
+
+     /**
+         Returns true if the "Skip" button was pressed.
+
+         This is similar to WasCancelled() but returns @true if the "Skip"
+         button was pressed, not the "Cancel" one.
+
+         @since 2.9.1
+     */
+    bool WasSkipped() const;
+
+
+    /**
+        Updates the dialog, setting the progress bar to the new value and
+        updating the message if new one is specified.
+
+        Returns @true unless the "Cancel" button has been pressed.
+
+        If @false is returned, the application can either immediately destroy the
+        dialog or ask the user for the confirmation and if the abort is not confirmed
+        the dialog may be resumed with Resume() function.
+
+        If @a value is the maximum value for the dialog, the behaviour of the
+        function depends on whether @c wxPD_AUTO_HIDE was used when the dialog
+        was created. If it was, the dialog is hidden and the function returns
+        immediately. If it was not, the dialog becomes a modal dialog and waits
+        for the user to dismiss it, meaning that this function does not return
+        until this happens.
+
+        Notice that you may want to call Fit() to change the dialog size to
+        conform to the length of the new message if desired. The dialog does
+        not do this automatically.
+
+        @param value
+            The new value of the progress meter. It should be less than or equal to
+            the maximum value given to the constructor.
+        @param newmsg
+            The new messages for the progress dialog text, if it is
+            empty (which is the default) the message is not changed.
+        @param skip
+            If "Skip" button was pressed since last Update() call,
+            this is set to @true.
+    */
+    virtual bool Update(int value, const wxString& newmsg = wxEmptyString,
+                        bool* skip = NULL);
+};
+
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 69862)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -217,6 +217,7 @@
 
 #if wxUSE_PROGRESSDLG
     EVT_MENU(DIALOGS_PROGRESS,                      MyFrame::ShowProgress)
+    EVT_MENU(DIALOGS_PROGRESS_GENERIC,              MyFrame::ShowProgressGeneric)
 #endif // wxUSE_PROGRESSDLG
 
 #if wxUSE_ABOUTDLG
@@ -462,6 +463,7 @@
 
     #if wxUSE_PROGRESSDLG
         info_menu->Append(DIALOGS_PROGRESS, wxT("Pro&gress dialog\tCtrl-G"));
+        info_menu->Append(DIALOGS_PROGRESS_GENERIC, wxT("Generic pro&gress dialog\tCtrl-Shift+G"));
     #endif // wxUSE_PROGRESSDLG
 
     #if wxUSE_BUSYINFO
@@ -2096,16 +2098,16 @@
 
 #if wxUSE_PROGRESSDLG
 
+static const int progress_max = 100;
+
 void MyFrame::ShowProgress( wxCommandEvent& WXUNUSED(event) )
 {
-    static const int max = 100;
-
     wxProgressDialog dialog("Progress dialog example",
                             // "Reserve" enough space for the multiline
                             // messages below, we'll change it anyhow
                             // immediately in the loop below
                             wxString(' ', 100) + "\n\n\n\n",
-                            max,    // range
+                            progress_max,    // range
                             this,   // parent
                             wxPD_CAN_ABORT |
                             wxPD_CAN_SKIP |
@@ -2116,17 +2118,44 @@
                             wxPD_REMAINING_TIME |
                             wxPD_SMOOTH // - makes indeterminate mode bar on WinXP very small
                             );
+    ShowProgress(&dialog);
+}
 
+void MyFrame::ShowProgressGeneric( wxCommandEvent& WXUNUSED(event) )
+{
+    wxGenericProgressDialog dialog;
+    
+    dialog.Create("Progress dialog example",
+                            // "Reserve" enough space for the multiline
+                            // messages below, we'll change it anyhow
+                            // immediately in the loop below
+                            wxString(' ', 100) + "\n\n\n\n",
+                            progress_max,    // range
+                            this,   // parent
+                            wxPD_CAN_ABORT |
+                            wxPD_CAN_SKIP |
+                            wxPD_APP_MODAL |
+                            //wxPD_AUTO_HIDE | // -- try this as well
+                            wxPD_ELAPSED_TIME |
+                            wxPD_ESTIMATED_TIME |
+                            wxPD_REMAINING_TIME |
+                            wxPD_SMOOTH // - makes indeterminate mode bar on WinXP very small
+                            );
+    ShowProgress(&dialog);
+}
+
+void MyFrame::ShowProgress(wxGenericProgressDialog* dialog)
+{
     bool cont = true;
-    for ( int i = 0; i <= max; i++ )
+    for ( int i = 0; i <= progress_max; i++ )
     {
         wxString msg;
 
         // test both modes of wxProgressDialog behaviour: start in
         // indeterminate mode but switch to the determinate one later
-        const bool determinate = i > max/2;
+        const bool determinate = i > progress_max/2;
 
-        if ( i == max )
+        if ( i == progress_max )
         {
             msg = "That's all, folks!\n"
                   "\n"
@@ -2153,17 +2182,17 @@
         bool skip = false;
         if ( determinate )
         {
-            cont = dialog.Update(i, msg, &skip);
+            cont = dialog->Update(i, msg, &skip);
         }
         else
         {
-            cont = dialog.Pulse(msg, &skip);
+            cont = dialog->Pulse(msg, &skip);
         }
 
         // each skip will move progress about quarter forward
         if ( skip )
         {
-            i += max/4;
+            i += progress_max/4;
 
             if ( i >= 100 )
                 i = 99;
@@ -2177,7 +2206,7 @@
                 break;
 
             cont = true;
-            dialog.Resume();
+            dialog->Resume();
         }
 
         wxMilliSleep(200);
@@ -2189,10 +2218,9 @@
     }
     else
     {
-        wxLogStatus(wxT("Countdown from %d finished"), max);
+        wxLogStatus(wxT("Countdown from %d finished"), progress_max);
     }
 }
-
 #endif // wxUSE_PROGRESSDLG
 
 #if wxUSE_ABOUTDLG
Index: samples/dialogs/dialogs.h
===================================================================
--- samples/dialogs/dialogs.h	(revision 69862)
+++ samples/dialogs/dialogs.h	(working copy)
@@ -428,7 +428,9 @@
     void DlgOnTop(wxCommandEvent& event);
 
 #if wxUSE_PROGRESSDLG
+    void ShowProgress(wxGenericProgressDialog* dialog);
     void ShowProgress(wxCommandEvent& event);
+    void ShowProgressGeneric(wxCommandEvent& event);
 #endif // wxUSE_PROGRESSDLG
 
 #if wxUSE_ABOUTDLG
@@ -569,6 +571,7 @@
     DIALOGS_ONTOP,
     DIALOGS_MODELESS_BTN,
     DIALOGS_PROGRESS,
+    DIALOGS_PROGRESS_GENERIC,
     DIALOGS_ABOUTDLG_SIMPLE,
     DIALOGS_ABOUTDLG_FANCY,
     DIALOGS_ABOUTDLG_FULL,
Index: src/generic/progdlgg.cpp
===================================================================
--- src/generic/progdlgg.cpp	(revision 69862)
+++ src/generic/progdlgg.cpp	(working copy)
@@ -87,7 +87,7 @@
 // wxGenericProgressDialog creation
 // ----------------------------------------------------------------------------
 
-void wxGenericProgressDialog::Init(wxWindow *parent, int style)
+void wxGenericProgressDialog::Init()
 {
     // we may disappear at any moment, let the others know about it
     SetExtraStyle(GetExtraStyle() | wxWS_EX_TRANSIENT);
@@ -95,10 +95,9 @@
     // Initialize all our members that we always use (even when we don't
     // create a valid window in this class).
 
-    m_pdStyle = style;
+    m_pdStyle = 0;
+    m_parentTop = NULL;
 
-    m_parentTop = wxGetTopLevelParent(parent);
-
     m_gauge = NULL;
     m_msg = NULL;
     m_elapsed =
@@ -129,10 +128,10 @@
     m_tempEventLoop = NULL;
 }
 
-wxGenericProgressDialog::wxGenericProgressDialog(wxWindow *parent, int style)
+wxGenericProgressDialog::wxGenericProgressDialog()
                        : wxDialog()
 {
-    Init(parent, style);
+    Init();
 }
 
 wxGenericProgressDialog::wxGenericProgressDialog(const wxString& title,
@@ -142,19 +141,23 @@
                                                  int style)
                        : wxDialog()
 {
-    Init(parent, style);
+    Init();
 
     Create( title, message, maximum, parent, style );
 }
 
-void wxGenericProgressDialog::Create( const wxString& title,
+bool wxGenericProgressDialog::Create( const wxString& title,
                                       const wxString& message,
                                       int maximum,
                                       wxWindow *parent,
                                       int style )
 {
-    wxDialog::Create(GetParentForModalDialog(parent, style), wxID_ANY, title);
+    m_parentTop = wxGetTopLevelParent(parent);
+    m_pdStyle = style;
 
+    if (!wxDialog::Create(GetParentForModalDialog(parent, style), wxID_ANY, title))
+        return false;
+
     SetParent( GetParentForModalDialog(parent, style) );
     SetTitle( title );
 
@@ -306,6 +309,7 @@
     }
 
     Update();
+    return true;
 }
 
 void wxGenericProgressDialog::UpdateTimeEstimates(int value,
Index: src/msw/progdlg.cpp
===================================================================
--- src/msw/progdlg.cpp	(revision 69862)
+++ src/msw/progdlg.cpp	(working copy)
@@ -307,7 +307,7 @@
                                     int maximum,
                                     wxWindow *parent,
                                     int style )
-    : wxGenericProgressDialog(parent, style),
+    : wxGenericProgressDialog(),
       m_taskDialogRunner(NULL),
       m_sharedData(NULL),
       m_message(message),

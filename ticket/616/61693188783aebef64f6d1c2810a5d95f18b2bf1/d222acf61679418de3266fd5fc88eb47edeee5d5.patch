? wxWidgets/build wx.bat
? wxWidgets/clean wx.bat
Index: wxWidgets/docs/latex/wx/ipaddr.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/ipaddr.tex,v
retrieving revision 1.3
diff -u -r1.3 ipaddr.tex
--- wxWidgets/docs/latex/wx/ipaddr.tex	2004/09/29 11:25:31	1.3
+++ wxWidgets/docs/latex/wx/ipaddr.tex	2007/06/15 08:56:57
@@ -99,6 +99,23 @@
 Returns true on success, false if something went wrong.
 
 %
+% BroadcastAddress
+%
+
+\membersection{wxIPaddress::BroadcastAddress}\label{wxIPaddressbroadcastaddress}
+
+\func{virtual bool}{BroadcastAddress}{\void}
+
+Internally, this is the same as setting the IP address
+to {\bf INADDR\_BROADCAST}.
+
+On IPV4 implementations, 255.255.255.255
+
+\wxheading{Return value}
+
+Returns true on success, false if something went wrong.
+
+%
 % LocalHost
 %
 
Index: wxWidgets/docs/latex/wx/socket.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/socket.tex,v
retrieving revision 1.48
diff -u -r1.48 socket.tex
--- wxWidgets/docs/latex/wx/socket.tex	2006/10/08 21:55:06	1.48
+++ wxWidgets/docs/latex/wx/socket.tex	2007/06/15 08:48:22
@@ -524,6 +524,8 @@
 \twocolitem{{\bf wxSOCKET\_WAITALL}}{Wait for all required data to be read/written unless an error occurs.}
 \twocolitem{{\bf wxSOCKET\_BLOCK}}{Block the GUI (do not yield) while reading/writing data.}
 \twocolitem{{\bf wxSOCKET\_REUSEADDR}}{Allows the use of an in-use port (wxServerSocket only)}
+\twocolitem{{\bf wxSOCKET\_BROADCAST}}{Switches the socket to broadcast mode}
+\twocolitem{{\bf wxSOCKET\_NOBIND}}{Stops the socket from being bound to a specific adapter (normally used in conjunction with {\bf wxSOCKET\_BROADCAST})}
 \end{twocollist}
 
 A brief overview on how to use these flags follows.
@@ -567,6 +569,10 @@
 your platform's implementation of setsockopt(). Note that on BSD-based systems (e.g. Mac OS X),
 use of wxSOCKET\_REUSEADDR implies SO\_REUSEPORT in addition to SO\_REUSEADDR to be consistent
 with Windows.
+
+The {\bf wxSOCKET\_BROADCAST} flag controls the use of the SO\_BROADCAST standard
+setsockopt() flag. This flag allows the socket to use the broadcast address, and is generally
+used in conjunction with {\bf wxSOCKET\_NOBIND} and \helpref{wxIPaddress::BroadcastAddress}{wxipaddressbroadcastaddress}.
 
 So:
 
Index: wxWidgets/include/wx/gsocket.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gsocket.h,v
retrieving revision 1.49
diff -u -r1.49 gsocket.h
--- wxWidgets/include/wx/gsocket.h	2005/05/04 18:51:58	1.49
+++ wxWidgets/include/wx/gsocket.h	2007/06/15 11:06:07
@@ -150,6 +150,7 @@
  */
 
 GSocketError GAddress_INET_SetHostName(GAddress *address, const char *hostname);
+GSocketError GAddress_INET_SetBroadcastAddress(GAddress *address);
 GSocketError GAddress_INET_SetAnyAddress(GAddress *address);
 GSocketError GAddress_INET_SetHostAddress(GAddress *address,
                                           unsigned long hostaddr);
Index: wxWidgets/include/wx/sckaddr.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/sckaddr.h,v
retrieving revision 1.33
diff -u -r1.33 sckaddr.h
--- wxWidgets/include/wx/sckaddr.h	2005/09/24 21:42:08	1.33
+++ wxWidgets/include/wx/sckaddr.h	2007/06/15 10:57:24
@@ -64,6 +64,7 @@
   virtual bool IsLocalHost() const = 0;
 
   virtual bool AnyAddress() = 0;
+  virtual bool BroadcastAddress() = 0;
 
   virtual wxString IPAddress() const = 0;
 
@@ -93,6 +94,8 @@
 
   // any (0.0.0.0)
   virtual bool AnyAddress();
+  // all (255.255.255.255)
+  virtual bool BroadcastAddress();
 
   virtual wxString Hostname() const;
   wxString OrigHostname() { return m_origHostname; }
@@ -149,6 +152,8 @@
 
   // any (0000:0000:0000:0000:0000:0000:0000:0000 (::))
   virtual bool AnyAddress();
+  // all (?)
+  virtual bool BroadcastAddress();
 
   // 3ffe:ffff:0100:f101:0210:a4ff:fee3:9566
   virtual wxString IPAddress() const;
Index: wxWidgets/include/wx/socket.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/socket.h,v
retrieving revision 1.72
diff -u -r1.72 socket.h
--- wxWidgets/include/wx/socket.h	2007/04/14 09:58:07	1.72
+++ wxWidgets/include/wx/socket.h	2007/06/15 10:12:55
@@ -71,7 +71,9 @@
   wxSOCKET_NOWAIT = 1,
   wxSOCKET_WAITALL = 2,
   wxSOCKET_BLOCK = 4,
-  wxSOCKET_REUSEADDR = 8
+  wxSOCKET_REUSEADDR = 8,
+  wxSOCKET_BROADCAST = 16,
+  wxSOCKET_NOBIND = 32
 };
 
 enum wxSocketType
Index: wxWidgets/include/wx/msw/gsockmsw.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/gsockmsw.h,v
retrieving revision 1.26
diff -u -r1.26 gsockmsw.h
--- wxWidgets/include/wx/msw/gsockmsw.h	2005/05/04 18:53:02	1.26
+++ wxWidgets/include/wx/msw/gsockmsw.h	2007/06/15 09:20:48
@@ -63,6 +63,8 @@
   GSocketError SetServer();
   GSocket *WaitConnection();
   bool SetReusable();
+  bool SetBroadcast();
+  bool DontDoBind();
   GSocketError Connect(GSocketStream stream);
   GSocketError SetNonOriented();
   int Read(char *buffer, int size);
@@ -101,6 +103,8 @@
   bool m_stream;
   bool m_establishing;
   bool m_reusable;
+  bool m_broadcast;
+  bool m_dobind;
   struct timeval m_timeout;
 
   /* Callbacks */
Index: wxWidgets/include/wx/unix/gsockunx.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/unix/gsockunx.h,v
retrieving revision 1.21
diff -u -r1.21 gsockunx.h
--- wxWidgets/include/wx/unix/gsockunx.h	2005/05/04 18:53:05	1.21
+++ wxWidgets/include/wx/unix/gsockunx.h	2007/06/15 09:19:43
@@ -52,6 +52,8 @@
     GSocketError SetServer();
     GSocket *WaitConnection();
     bool SetReusable();
+    bool SetBroadcast();
+    bool DontDoBind();
     GSocketError Connect(GSocketStream stream);
     GSocketError SetNonOriented();
     int Read(char *buffer, int size);
@@ -91,6 +93,8 @@
   bool m_stream;
   bool m_establishing;
   bool m_reusable;
+  bool m_broadcast;
+  bool m_dobind;
   unsigned long m_timeout;
 
   /* Callbacks */
Index: wxWidgets/src/common/sckaddr.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/sckaddr.cpp,v
retrieving revision 1.52
diff -u -r1.52 sckaddr.cpp
--- wxWidgets/src/common/sckaddr.cpp	2007/03/17 10:25:34	1.52
+++ wxWidgets/src/common/sckaddr.cpp	2007/06/15 10:17:51
@@ -178,6 +178,11 @@
   return (Hostname() == wxT("localhost") || IPAddress() == wxT("127.0.0.1"));
 }
 
+bool wxIPV4address::BroadcastAddress()
+{
+  return (GAddress_INET_SetBroadcastAddress(m_address) == GSOCK_NOERROR);
+}
+
 bool wxIPV4address::AnyAddress()
 {
   return (GAddress_INET_SetAnyAddress(m_address) == GSOCK_NOERROR);
@@ -273,6 +278,11 @@
 bool wxIPV6address::IsLocalHost() const
 {
   return (Hostname() == wxT("localhost") || IPAddress() == wxT("127.0.0.1"));
+}
+
+bool wxIPV6address::BroadcastAddress()
+{
+  return (GAddress_INET_SetBroadcastAddress(m_address) == GSOCK_NOERROR);
 }
 
 bool wxIPV6address::AnyAddress()
Index: wxWidgets/src/common/socket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/socket.cpp,v
retrieving revision 1.155
diff -u -r1.155 socket.cpp
--- wxWidgets/src/common/socket.cpp	2007/03/07 23:18:29	1.155
+++ wxWidgets/src/common/socket.cpp	2007/06/15 09:17:32
@@ -1105,6 +1105,12 @@
     if (GetFlags() & wxSOCKET_REUSEADDR) {
         m_socket->SetReusable();
     }
+    if (GetFlags() & wxSOCKET_BROADCAST) {
+        m_socket->SetBroadcast();
+    }
+    if (GetFlags() & wxSOCKET_NOBIND) {
+        m_socket->DontDoBind();
+    }
 
     if (m_socket->SetServer() != GSOCK_NOERROR)
     {
@@ -1275,6 +1281,14 @@
   {
     m_socket->SetReusable();
   }
+  if (GetFlags() & wxSOCKET_BROADCAST)
+  {
+    m_socket->SetBroadcast();
+  }
+  if (GetFlags() & wxSOCKET_NOBIND)
+  {
+    m_socket->DontDoBind();
+  }
 
   // If no local address was passed and one has been set, use the one that was Set
   if (!local && m_localAddress.GetAddress())
@@ -1354,6 +1368,14 @@
     if (flags & wxSOCKET_REUSEADDR)
     {
         m_socket->SetReusable();
+    }
+    if (GetFlags() & wxSOCKET_BROADCAST)
+    {
+        m_socket->SetBroadcast();
+    }
+    if (GetFlags() & wxSOCKET_NOBIND)
+    {
+        m_socket->DontDoBind();
     }
     if ( m_socket->SetNonOriented() != GSOCK_NOERROR )
     {
Index: wxWidgets/src/mac/carbon/cfsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/cfsocket.cpp,v
retrieving revision 1.16
diff -u -r1.16 cfsocket.cpp
--- wxWidgets/src/mac/carbon/cfsocket.cpp	2006/08/31 19:30:43	1.16
+++ wxWidgets/src/mac/carbon/cfsocket.cpp	2007/06/15 10:18:56
@@ -1562,6 +1562,11 @@
   return GSOCK_NOERROR;
 }
 
+GSocketError GAddress_INET_SetBroadcastAddress(GAddress *address)
+{
+  return GAddress_INET_SetHostAddress(address, INADDR_BROADCAST);
+}
+
 GSocketError GAddress_INET_SetAnyAddress(GAddress *address)
 {
   return GAddress_INET_SetHostAddress(address, INADDR_ANY);
Index: wxWidgets/src/mac/carbon/gsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/gsocket.cpp,v
retrieving revision 1.12
diff -u -r1.12 gsocket.cpp
--- wxWidgets/src/mac/carbon/gsocket.cpp	2006/01/26 19:52:58	1.12
+++ wxWidgets/src/mac/carbon/gsocket.cpp	2007/06/15 10:18:55
@@ -1314,6 +1314,11 @@
   return GSOCK_NOERROR;
 }
 
+GSocketError GAddress_INET_SetBroadcastAddress(GAddress *address)
+{
+  return GAddress_INET_SetHostAddress(address, INADDR_BROADCAST);
+}
+
 GSocketError GAddress_INET_SetAnyAddress(GAddress *address)
 {
   return GAddress_INET_SetHostAddress(address, INADDR_ANY);
Index: wxWidgets/src/msw/gsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/gsocket.cpp,v
retrieving revision 1.25
diff -u -r1.25 gsocket.cpp
--- wxWidgets/src/msw/gsocket.cpp	2007/03/17 02:14:29	1.25
+++ wxWidgets/src/msw/gsocket.cpp	2007/06/15 09:07:43
@@ -177,6 +177,8 @@
   m_timeout.tv_usec = 0;
   m_establishing    = false;
   m_reusable        = false;
+  m_broadcast		= false;
+  m_dobind          = true;
 
   assert(gs_gui_functions);
   /* Per-socket GUI-specific initialization */
@@ -529,6 +531,34 @@
     return false;
 }
 
+/* GSocket_SetBroadcast:
+*  Simply sets the m_broadcast flag on the socket. GSocket_SetServer will
+*  make the appropriate setsockopt() call.
+*  Implemented as a GSocket function because clients (ie, wxSocketServer)
+*  don't have access to the GSocket struct information.
+*  Returns true if the flag was set correctly, false if an error occurred
+*  (ie, if the parameter was NULL)
+*/
+bool GSocket::SetBroadcast()
+{
+    /* socket must not be null, and must not be in use/already bound */
+    if (this && m_fd == INVALID_SOCKET) {
+        m_broadcast = true;
+        return true;
+    }
+    return false;
+}
+
+bool GSocket::DontDoBind()
+{
+    /* socket must not be null, and must not be in use/already bound */
+    if (this && m_fd == INVALID_SOCKET) {
+        m_dobind = false;
+        return true;
+    }
+    return false;
+}
+
 /* Client specific parts */
 
 /* GSocket_Connect:
@@ -706,18 +736,24 @@
   {
     setsockopt(m_fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&arg, sizeof(arg));
   }
-
-  /* Bind to the local address,
-   * and retrieve the actual address bound.
-   */
-  if ((bind(m_fd, m_local->m_addr, m_local->m_len) != 0) ||
-      (getsockname(m_fd,
-                   m_local->m_addr,
-                   (WX_SOCKLEN_T *)&m_local->m_len) != 0))
+  if (m_broadcast)
   {
-    Close();
-    m_error = GSOCK_IOERR;
-    return GSOCK_IOERR;
+    setsockopt(m_fd, SOL_SOCKET, SO_BROADCAST, (const char*)&arg, sizeof(arg));
+  }
+  if (m_dobind)
+  {
+    /* Bind to the local address,
+     * and retrieve the actual address bound.
+     */
+    if ((bind(m_fd, m_local->m_addr, m_local->m_len) != 0) ||
+        (getsockname(m_fd,
+                     m_local->m_addr,
+                     (WX_SOCKLEN_T *)&m_local->m_len) != 0))
+    {
+      Close();
+      m_error = GSOCK_IOERR;
+      return GSOCK_IOERR;
+    }
   }
 
   return GSOCK_NOERROR;
@@ -1411,6 +1447,11 @@
     addr->s_addr = array_addr[0].s_addr;
   }
   return GSOCK_NOERROR;
+}
+
+GSocketError GAddress_INET_SetBroadcastAddress(GAddress *address)
+{
+  return GAddress_INET_SetHostAddress(address, INADDR_BROADCAST);
 }
 
 GSocketError GAddress_INET_SetAnyAddress(GAddress *address)
Index: wxWidgets/src/unix/gsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/gsocket.cpp,v
retrieving revision 1.71
diff -u -r1.71 gsocket.cpp
--- wxWidgets/src/unix/gsocket.cpp	2007/06/09 11:05:35	1.71
+++ wxWidgets/src/unix/gsocket.cpp	2007/06/15 09:11:51
@@ -533,6 +533,8 @@
   m_gui_dependent       = NULL;
   m_non_blocking        = false;
   m_reusable            = false;
+  m_broadcast           = false;
+  m_dobind              = true;
   m_timeout             = 10*60*1000;
                                 /* 10 minutes * 60 sec * 1000 millisec */
   m_establishing        = false;
@@ -903,6 +905,26 @@
     return false;
 }
 
+bool GSocket::SetBroadcast()
+{
+    /* socket must not be null, and must not be in use/already bound */
+    if (this && m_fd == INVALID_SOCKET) {
+        m_broadcast = true;
+        return true;
+    }
+    return false;
+}
+
+bool GSocket::DontDoBind()
+{
+    /* socket must not be null, and must not be in use/already bound */
+    if (this && m_fd == INVALID_SOCKET) {
+        m_dobind = false;
+        return true;
+    }
+    return false;
+}
+
 /* Client specific parts */
 
 /* GSocket_Connect:
@@ -1119,19 +1141,25 @@
 #endif
   }
 
-  /* Bind to the local address,
-   * and retrieve the actual address bound.
-   */
-  if ((bind(m_fd, m_local->m_addr, m_local->m_len) != 0) ||
-      (getsockname(m_fd,
-                   m_local->m_addr,
-                   (WX_SOCKLEN_T *) &m_local->m_len) != 0))
+  if (m_broadcast)
   {
-    Close();
-    m_error = GSOCK_IOERR;
-    return GSOCK_IOERR;
+    setsockopt(m_fd, SOL_SOCKET, SO_BROADCAST, (const char*)&arg, sizeof(arg));
   }
-
+  if (m_dobind)
+  {
+      /* Bind to the local address,
+       * and retrieve the actual address bound.
+       */
+      if ((bind(m_fd, m_local->m_addr, m_local->m_len) != 0) ||
+          (getsockname(m_fd,
+                       m_local->m_addr,
+                       (WX_SOCKLEN_T *) &m_local->m_len) != 0))
+      {
+        Close();
+        m_error = GSOCK_IOERR;
+        return GSOCK_IOERR;
+      }
+  }
   return GSOCK_NOERROR;
 }
 
@@ -2066,6 +2094,12 @@
   }
 
   return GSOCK_NOERROR;
+}
+
+
+GSocketError GAddress_INET_SetBroadcastAddress(GAddress *address)
+{
+  return GAddress_INET_SetHostAddress(address, INADDR_BROADCAST);
 }
 
 GSocketError GAddress_INET_SetAnyAddress(GAddress *address)

 	  	 

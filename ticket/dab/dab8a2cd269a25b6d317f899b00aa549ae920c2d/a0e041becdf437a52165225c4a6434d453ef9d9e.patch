--- valnum_20110413\valnum.h	2011-04-13 18:53:53.296875000 +0200
+++ valnum_20110414\valnum.h	2011-04-14 19:23:27.546875000 +0200
@@ -156,4 +156,17 @@
     virtual wxString NormalizeValue(ValueType value) const;
 
+    //ToString() overloaded functions
+    //We has as many versions as wxNumformatter has
+    wxString ToString(int value, int style) const; 
+    wxString ToString(long value, int style) const; 
+    wxString ToString(unsigned int value, int style) const; 
+    wxString ToString(unsigned long value, int style) const; 
+#ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
+    wxString ToString(wxLongLong_t value, int style) const; 
+    wxString ToString(wxULongLong_t value, int style) const; 
+#endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
+    wxString ToString(float value, int style) const; 
+    wxString ToString(double value, int style)const; 
+
     //Conversions adpated to ValueType
     static bool FromString(const wxString& s, ValueType *value);
@@ -296,6 +309,6 @@
     if ( value != 0 || !HasFlag(wxNUM_VAL_ZERO_AS_BLANK) )
     {
-        //wxNumberFormatter will take care of the type of the value
-        s = wxNumberFormatter::ToString(value, m_precision, GetFormatFlags());
+        //Overloaded function
+        s = ToString(value, GetFormatFlags());
     }
     return s;
@@ -308,4 +321,56 @@
 }
 
+//Overloaded function
+template <typename T>
+wxString wxNumValidator<T>::ToString(int value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(long value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(unsigned int value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(unsigned long value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+
+#ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
+template <typename T>
+wxString wxNumValidator<T>::ToString(wxLongLong_t value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(wxULongLong_t value, int style) const
+{
+    return wxNumberFormatter::ToString(value, style);
+}
+#endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(float value, int style) const
+{
+    return wxNumberFormatter::ToString(value, m_precision, style);
+}
+
+
+template <typename T>
+wxString wxNumValidator<T>::ToString(double value, int style) const
+{
+    return wxNumberFormatter::ToString(value, m_precision, style);
+}
+
 // ================== Ckecking ===============================================
 // Checks if the string seems a valid number, even it's incomplete.

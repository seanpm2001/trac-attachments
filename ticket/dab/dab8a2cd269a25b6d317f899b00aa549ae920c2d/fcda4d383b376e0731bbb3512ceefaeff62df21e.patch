Index: include/wx/valnum.h
===================================================================
--- include/wx/valnum.h	(revision 73687)
+++ include/wx/valnum.h	(working copy)
@@ -39,9 +39,9 @@
     void SetStyle(int style) { m_style = style; }
 
 
-    // Override base class method to not do anything but always return success:
-    // we don't need this as we do our validation on the fly here.
-    virtual bool Validate(wxWindow * WXUNUSED(parent)) { return true; }
+    // Called when the value in the window must be validated.
+    // This function can pop up an error message.
+    virtual bool Validate(wxWindow * parent);
 
 protected:
     wxNumValidatorBase(int style)
@@ -94,6 +94,12 @@
     // empty string otherwise.
     virtual wxString NormalizeString(const wxString& s) const = 0;
 
+    // Checks if the string seems a valid number
+    virtual bool StringCheck(const wxString& strNum) const = 0;
+    //Do all checks to ensure this is a valid value.
+    //Returns 'true' if the control has valid value.
+    //Otherwise the cause is indicated in 'errMsg'.
+    virtual bool CheckItAll(wxString& errMsg) const = 0;
 
     // Event handlers.
     void OnChar(wxKeyEvent& event);
@@ -286,6 +292,8 @@
 
     // Implement wxNumValidatorBase pure virtual method.
     virtual bool IsCharOk(const wxString& val, int pos, wxChar ch) const;
+    virtual bool StringCheck(const wxString& strNum) const;
+    virtual bool CheckItAll(wxString& errMsg) const;
 
 private:
     // Minimal and maximal values accepted (inclusive).
@@ -381,7 +389,12 @@
 
     // Implement wxNumValidatorBase pure virtual method.
     virtual bool IsCharOk(const wxString& val, int pos, wxChar ch) const;
+    virtual bool StringCheck(const wxString& strNum) const;
+    virtual bool CheckItAll(wxString& errMsg) const;
 
+    //Checks that it doesn't have too many decimal digits.
+    bool DecimalDigitsLessThanAllowed(const wxString& s) const;
+
 private:
     // Maximum number of decimals digits after the decimal separator.
     unsigned m_precision;
Index: src/common/valnum.cpp
===================================================================
--- src/common/valnum.cpp	(revision 73687)
+++ src/common/valnum.cpp	(working copy)
@@ -69,6 +69,25 @@
     return NULL;
 }
 
+bool wxNumValidatorBase::Validate(wxWindow *parent)
+{
+    // If window is disabled, simply return
+    if ( !m_validatorWindow->IsEnabled() )
+        return true;
+
+    wxString errmsg;
+    bool res = CheckItAll(errmsg);
+
+    if ( !res )
+    {
+        m_validatorWindow->SetFocus();
+        wxMessageBox(errmsg, _("Validation conflict"),
+                     wxOK | wxICON_EXCLAMATION, parent);
+        return false;
+    }
+    return true;
+}
+
 void
 wxNumValidatorBase::GetCurrentValueAndInsertionPoint(wxString& val,
                                                              int& pos) const
@@ -140,6 +159,8 @@
     }
 #endif // wxUSE_UNICODE/!wxUSE_UNICODE
 
+    //Space is an allowed thousands separator. But we don't allow user to type
+    //it. We will add it at formatting time in OnKillFocus().
     if ( ch < WXK_SPACE || ch == WXK_DELETE )
     {
         // Allow ASCII control characters and Delete.
@@ -167,6 +188,17 @@
     if ( !control )
         return;
 
+    // We need to validate now because control would been changed pasting on it
+    wxString errmsg;
+    if ( ! CheckItAll(errmsg) )
+    {
+        if ( !wxValidator::IsSilent() )
+            wxBell();
+
+	event.Skip();
+        return; //Don't change control's value
+    }
+
     // When we change the control value below, its "modified" status is reset
     // so we need to explicitly keep it marked as modified if it was so in the
     // first place.
@@ -203,7 +235,7 @@
 wxIntegerValidatorBase::IsCharOk(const wxString& val, int pos, wxChar ch) const
 {
     // We may accept minus sign if we can represent negative numbers at all.
-    if ( ch == '-' )
+    if ( pos == 0 && ch == '-' )
     {
         // Notice that entering '-' can make our value invalid, for example if
         // we're limited to -5..15 range and the current value is 12, then the
@@ -217,19 +249,97 @@
         return m_min < 0 && IsMinusOk(val, pos);
     }
 
-    // We only accept digits here (remember that '-' is taken care of by the
-    // base class already).
+    // A separator is accepted if the locale allow it, the other chars must be digits
     if ( ch < '0' || ch > '9' )
-        return false;
+    {
+        wxChar thousands;
+        if ( wxNumberFormatter::GetThousandsSeparatorIfUsed(&thousands) )
+        {
+            if (ch != thousands)
+                return false;
+        }
+        else
+        {
+            return false;
+        }
+    }
 
-    // And the value after insertion needs to be in the defined range.
-    LongestValueType value;
-    if ( !FromString(GetValueAfterInsertingChar(val, pos, ch), &value) )
-        return false;
+    return true;
+}
 
-    return IsInRange(value);
+bool wxIntegerValidatorBase::StringCheck(const wxString& strNum) const
+{
+    bool sign = false; //main sign
+
+    // Test malformed cases
+    for (wxString::const_iterator pos = strNum.begin(); pos != strNum.end(); ++pos )
+    {
+        wxChar c = *pos;
+        if (c == '-')
+        {
+            if (m_min >= 0)
+                return false; //prevents number to be out of range
+            if (sign)
+                return false; //main sign is not first char
+            else
+                sign = true;
+        }
+        else if ( c < '0' || c > '9' )
+        {
+            return false; //not valid char
+        }
+    }
+
+    return true;
 }
 
+bool wxIntegerValidatorBase::CheckItAll(wxString& errMsg) const
+{
+    wxTextEntry * const control = GetTextEntry();
+    if ( !control )
+       return false;
+
+    wxString s(control->GetValue());
+    wxChar thousandsSep;
+    if ( wxNumberFormatter::GetThousandsSeparatorIfUsed(&thousandsSep) )
+        s.Replace(wxString(thousandsSep), wxString());
+    
+    if ( s.empty() )
+    {
+        // Is blank, but allowed. Stop here
+        if ( HasFlag(wxNUM_VAL_ZERO_AS_BLANK) )
+        {
+            return true;
+        }
+        // We can't do any check with an empty string
+        else
+        {
+            errMsg = _("Empty value");
+            return false;
+        }
+    }
+
+    bool res = this->StringCheck(s); //Is it malformed?
+    if ( !res )
+        errMsg = _("Malformed number");
+    else
+    {
+        // Can it be converted to a value?
+        LongestValueType value;
+        res = FromString(s, &value);
+        if ( !res )
+            errMsg = _("Value overflow");
+        else
+        {
+            res = IsInRange(value);
+            if ( !res )
+                errMsg = _("Not in range");
+        }
+    }
+
+    return res;
+}
+
 // ============================================================================
 // wxFloatingPointValidatorBase implementation
 // ============================================================================
@@ -251,10 +361,28 @@
                                        int pos,
                                        wxChar ch) const
 {
-    // We may accept minus sign if we can represent negative numbers at all.
     if ( ch == '-' )
-        return m_min < 0 && IsMinusOk(val, pos);
+    {
+        // We may accept minus sign if we can represent negative numbers at all.
+        if ( pos == 0 )
+            return m_min < 0 && IsMinusOk(val, pos);
+        // or for the exponent definition
+        else if ( val[pos-1] != 'e' && val[pos-1] != 'E' )
+            return false;
 
+        return true;
+    }
+    else if ( ch == '+' )
+    {
+        if ( pos == 0 )
+            return m_max >= 0;
+        else if ( val[pos-1] != 'e' && val[pos-1] != 'E' )
+            return false;
+
+        return true;
+    }
+
+
     const wxChar separator = wxNumberFormatter::GetDecimalSeparator();
     if ( ch == separator )
     {
@@ -264,8 +392,8 @@
             return false;
         }
 
-        // Prepending a separator before the minus sign isn't allowed.
-        if ( pos == 0 && !val.empty() && val[0] == '-' )
+        // Prepending a separator before the sign isn't allowed.
+        if ( pos == 0 && !val.empty() && ( val[0] == '-' || val[0] == '+' ) )
             return false;
 
         // Otherwise always accept it, adding a decimal separator doesn't
@@ -276,24 +404,171 @@
         return true;
     }
 
-    // Must be a digit then.
-    if ( ch < '0' || ch > '9' )
-        return false;
+    // Must be a digit, an exponent or a thousands separator.
+    if( ( ch < '0' || ch > '9' ) && ch != 'E' && ch != 'e' )
+    {
+        wxChar thousands;
+        if ( wxNumberFormatter::GetThousandsSeparatorIfUsed(&thousands) )
+        {
+            if (ch != thousands)
+                return false;
+        }
+        else
+        {
+            return false;
+        }
+    }
 
-    // Check whether the value we'd obtain if we accepted this key is correct.
-    const wxString newval(GetValueAfterInsertingChar(val, pos, ch));
+    // Check the number of decimal digits in the final string
+    wxString str(val);
+    str.insert(pos, ch);
+    return DecimalDigitsLessThanAllowed(str);
+}
 
-    LongestValueType value;
-    if ( !FromString(newval, &value) )
-        return false;
+bool wxFloatingPointValidatorBase::StringCheck(const wxString& strNum) const
+{
+    bool sign     = false; // Main sign
+    bool decimal  = false; // Decimal separator
+    bool exponent = false; // Exponent
+    bool expsign  = false; // Exponent sign
+    bool beforexp = false; // Digit before exponent
+    bool afterexp = false; // Digit after exponent
 
-    // Also check that it doesn't have too many decimal digits.
-    const size_t posSep = newval.find(separator);
-    if ( posSep != wxString::npos && newval.length() - posSep - 1 > m_precision )
+    wxChar decsep = wxNumberFormatter::GetDecimalSeparator();
+
+    wxString::const_iterator pos;
+
+    // Test malformed cases
+    for(pos = strNum.begin(); pos != strNum.end(); ++pos )
+    {
+        wxChar c = *pos;
+        if (c == '-' || c == '+')
+        {
+            if (exponent)
+            {
+                // Exponent sign duplicated or after exp. digits
+                if (expsign || afterexp)
+                    return false;
+                else
+                    expsign = true;
+            }
+            // Before exponent
+            else
+            {
+                // Prevents number to be out of range
+                if (c == '-' && m_min >= 0)
+                    return false;
+                // Main sign is not first char
+                if (sign || beforexp || decimal)
+                    return false;
+                else
+                    sign = true;
+            }
+        }
+        else if (c == 'E' || c == 'e')
+        {
+            // Begins with exp. or duplicated
+            if ( !beforexp || exponent)
+                return false;
+            else
+            {
+                exponent = true;
+            }
+        }
+        else if ( c == decsep )
+        {
+            // Decimal separator duplicated or after exp.
+            if (decimal || exponent)
+                return false;
+            else
+                decimal = true;
+        }
+        else if ( c >= '0' && c <= '9' )
+        {
+            // Digit after exponent
+            if (exponent)
+                afterexp = true;
+            // Digit before exponent
+            else
+                beforexp = true;
+        }
+        // Not valid char
+        else
+            return false;
+    }
+
+    // No digit after exponent
+    if ( !afterexp && exponent )
         return false;
+    // No digit before exponent
+    if ( !beforexp )
+        return false;
 
-    // Finally check whether it is in the range.
-    return IsInRange(value);
+    return true;
 }
 
+bool wxFloatingPointValidatorBase::CheckItAll(wxString& errMsg) const
+{
+    wxTextEntry * const control = GetTextEntry();
+    if ( !control )
+       return false;
+
+    wxString s(control->GetValue());
+    wxChar thousandsSep;
+    if ( wxNumberFormatter::GetThousandsSeparatorIfUsed(&thousandsSep) )
+        s.Replace(wxString(thousandsSep), wxString());
+
+    if ( s.empty() )
+    {
+        if ( HasFlag(wxNUM_VAL_ZERO_AS_BLANK) )
+            return true; //Is blank, but allowed. Stop here
+        else
+        {
+            errMsg = _("Empty value");
+            return false; //We can't do any checks with an empty string
+        }
+    }
+
+    bool res = this->StringCheck(s); //Is it malformed?
+    if ( !res )
+        errMsg = _("Malformed number");
+    else
+    {
+        LongestValueType value;
+        res = FromString(s, &value); //Can it be converted to a value?
+        if ( !res )
+            errMsg = _("Value overflow");
+        else
+        {
+            res = DecimalDigitsLessThanAllowed(s);
+            if ( !res )
+                errMsg = _("Too meany decimal digits");
+            else
+            {
+                res = IsInRange(value);
+                if ( !res )
+                    errMsg = _("Not in range");
+            }
+        }
+    }
+
+    return res;
+}
+
+bool wxFloatingPointValidatorBase::DecimalDigitsLessThanAllowed(const wxString& s) const
+{
+    size_t posSep = s.find(wxNumberFormatter::GetDecimalSeparator());
+    if ( posSep == wxString::npos )
+        posSep = s.length();
+
+    //If user typed exponent 'e' the number of decimal digits is not
+    //important at all. But we must know that 'e' position.
+    size_t posExp = s.Lower().Find(_("e"));
+    if ( posExp == wxString::npos )
+        posExp = s.length();
+
+    //Return true if number has no more decimal digits than allowed
+    return ( (int)(posExp - posSep) - 1 <= (int)m_precision );
+}
+
 #endif // wxUSE_VALIDATORS && wxUSE_TEXTCTRL

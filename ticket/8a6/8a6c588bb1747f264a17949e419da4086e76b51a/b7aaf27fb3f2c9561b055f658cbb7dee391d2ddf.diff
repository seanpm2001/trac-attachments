--- ../dlgapp-orig/dlgapp.cpp	1999-11-12 10:38:42.000000000 +0000
+++ dlgapp.cpp	2006-11-26 21:28:21.000000000 +0000
@@ -2,8 +2,9 @@
 // Name:        dlgapp.cpp
 // Purpose:     Dialog based wxWindows sample
 // Author:      Marco Ghislanzoni
-// Modified by:
 // Created:     10/31/1999
+// Modified by: Christian van den Bosch
+// Modified:    2006-11-26
 // RCS-ID:
 // Copyright:   (c) Marco Ghislanzoni
 // Licence:     wxWindows licence
@@ -66,21 +67,22 @@
 
     // Event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
+    void OnClose(wxCloseEvent& event);
     void OnAbout(wxCommandEvent& event);
-	void OnCelToFahr(wxCommandEvent& event);
-	void OnFahrToCel(wxCommandEvent& event);
+    void OnCelToFahr(wxCommandEvent& event);
+    void OnFahrToCel(wxCommandEvent& event);
 
-	// Set icon (from wxFrame source code)
+    // Set icon (from wxFrame source code)
     virtual void SetIcon(const wxIcon& icon);
 
 private:
-	// Celsius and ferhenheit text controls. Needed for data retrivial
-	// inside member functions
-	wxTextCtrl *celDegree;
-	wxTextCtrl *fahrDegree;
+    // Celsius and ferhenheit text controls. Needed for data retrivial
+    // inside member functions
+        wxTextCtrl *celDegree;
+        wxTextCtrl *fahrDegree;
 
-	// Dialog icon
-	wxIcon m_icon;
+        // Dialog icon
+        wxIcon m_icon;
 
     // Any class wishing to process wxWindows events must use this macro
     DECLARE_EVENT_TABLE()
@@ -95,16 +97,16 @@
 {
     // command buttons
     Dlgapp_CelToFahr = 1,
-	Dlgapp_FahrToCel,
+    Dlgapp_FahrToCel,
     Dlgapp_About,
-	Dlgapp_Close,
+    Dlgapp_Close,
     
     // other controls
     Dlgapp_CelDegree = 1000,
-	Dlgapp_FahrDegree,
-	Dlgapp_CelText,
-	Dlgapp_FahrText,
-	Dlgapp_StaticBox
+    Dlgapp_FahrDegree,
+    Dlgapp_CelText,
+    Dlgapp_FahrText,
+    Dlgapp_StaticBox
 };
 
 // ----------------------------------------------------------------------------
@@ -112,13 +114,13 @@
 // ----------------------------------------------------------------------------
 
 BEGIN_EVENT_TABLE(MyDialog, wxDialog)
-	EVT_BUTTON(Dlgapp_CelToFahr, MyDialog::OnCelToFahr)
-	EVT_BUTTON(Dlgapp_FahrToCel, MyDialog::OnFahrToCel)
-	EVT_BUTTON(Dlgapp_About, MyDialog::OnAbout)
-	EVT_BUTTON(Dlgapp_Close, MyDialog::OnQuit)
-	// We have to implement this to force closing
-	// the dialog when the 'x' button is pressed
-	EVT_CLOSE(              MyDialog::OnQuit)
+    EVT_BUTTON(Dlgapp_CelToFahr, MyDialog::OnCelToFahr)
+    EVT_BUTTON(Dlgapp_FahrToCel, MyDialog::OnFahrToCel)
+    EVT_BUTTON(Dlgapp_About, MyDialog::OnAbout)
+    EVT_BUTTON(Dlgapp_Close, MyDialog::OnQuit)
+    // We have to implement this to force closing
+    // the dialog when the 'x' button is pressed
+    EVT_CLOSE(              MyDialog::OnClose)
 END_EVENT_TABLE()
 
 IMPLEMENT_APP(MyApp)
@@ -134,15 +136,15 @@
 bool MyApp::OnInit()
 {
     // Create the main application window (a dialog in this case)
-	// NOTE: Vertical dimension comprises the caption bar.
-	//       Horizontal dimension has to take into account the thin
-	//       hilighting border around the dialog (2 points in
-	//       Win 95).
-    MyDialog *dialog = new MyDialog("Temp Converter",
+    // NOTE: Vertical dimension comprises the caption bar.
+    //       Horizontal dimension has to take into account the thin
+    //       hilighting border around the dialog (2 points in
+    //       Win 95).
+    MyDialog *dialog = new MyDialog(_T("Temp Converter"),
                                  wxPoint(0, 0), wxSize(147, 162));
-	
-	// Center the dialog when first shown
-	dialog->Centre();
+    
+    // Center the dialog when first shown
+    dialog->Centre();
 
     // Show it and tell the application that it's our main window
     dialog->Show(TRUE);
@@ -160,34 +162,34 @@
        : wxDialog((wxDialog *)NULL, -1, title, pos, size)
 {
     // Set the dialog icon
-	SetIcon(wxICON(mondrian));
+    SetIcon(wxICON(mondrian));
+
+    // Create and position controls in the dialog
+
+    // Create static box to enclose text and conversion buttons
+    wxStaticBox *statBox = new wxStaticBox(this, Dlgapp_StaticBox,
+                                           _T("Convert"),
+                                           wxPoint(5,0), wxSize(130, 100));
 
-	// Create and position controls in the dialog
+    // Static text celsius
+    wxStaticText *celText = new wxStaticText(this, Dlgapp_CelText, _T("Celsius:"), wxPoint(10,15));
 
-	// Create static box to enclose text and conversion buttons
-	wxStaticBox *statBox = new wxStaticBox(this, Dlgapp_StaticBox,
-		                                   wxString("Convert"),
-										   wxPoint(5,0), wxSize(130, 100));
-
-	// Static text celsius
-	wxStaticText *celText = new wxStaticText(this, Dlgapp_CelText, wxString("Celsius:"), wxPoint(10,15));
-
-	// Text control
-	celDegree = new wxTextCtrl(this, Dlgapp_CelDegree, wxString(""), wxPoint(10,30), wxSize(50,20));
-
-	// Static text fahrenheit
-	wxStaticText *fahrText = new wxStaticText(this, Dlgapp_FahrText, wxString("Fahrenheit:"), wxPoint(10,55));
-
-	// Another text control
-	fahrDegree = new wxTextCtrl(this, Dlgapp_FahrDegree, wxString(""), wxPoint(10,70), wxSize(50,20));
-	
-	// Four command buttons.
-	wxButton *btnCelToFahr = new wxButton( this, Dlgapp_CelToFahr, "C -> F", wxPoint(80,30), wxSize(50,20));
-	wxButton *btnFahrToCel = new wxButton( this, Dlgapp_FahrToCel, "F -> C", wxPoint(80,70), wxSize(50,20));
-	wxButton *btnAbout     = new wxButton( this, Dlgapp_About, "About", wxPoint(10,110), wxSize(50,20));
-	wxButton *btnClose     = new wxButton( this, Dlgapp_Close, "Close", wxPoint(80,110), wxSize(50,20));
+    // Text control
+    celDegree = new wxTextCtrl(this, Dlgapp_CelDegree, _T(""), wxPoint(10,30), wxSize(50,20));
+
+    // Static text fahrenheit
+    wxStaticText *fahrText = new wxStaticText(this, Dlgapp_FahrText, _T("Fahrenheit:"), wxPoint(10,55));
+
+    // Another text control
+    fahrDegree = new wxTextCtrl(this, Dlgapp_FahrDegree, _T(""), wxPoint(10,70), wxSize(50,20));
+    
+    // Four command buttons.
+    wxButton *btnCelToFahr = new wxButton( this, Dlgapp_CelToFahr, _T("C -> F"), wxPoint(80,30), wxSize(50,20));
+    wxButton *btnFahrToCel = new wxButton( this, Dlgapp_FahrToCel, _T("F -> C"), wxPoint(80,70), wxSize(50,20));
+    wxButton *btnAbout     = new wxButton( this, Dlgapp_About, _T("About"), wxPoint(10,110), wxSize(50,20));
+    wxButton *btnClose     = new wxButton( this, Dlgapp_Close, _T("Close"), wxPoint(80,110), wxSize(50,20));
 
-	// no default button
+    // no default button
 }
 
 // Originally a wxDialog doesn't have any method to set the
@@ -211,93 +213,103 @@
 
 void MyDialog::OnCelToFahr(wxCommandEvent& WXUNUSED(event))
 {
-	// Calc celsius to fahrenheit conversion
+    // Calc celsius to fahrenheit conversion
 
-	// Retrieve control content
-	wxString celStr = celDegree->GetValue();
-	
-	// Check the control is not empty
-	// Note: we cannot use wxString.IsNumber() to check the
-	//       validity of the entry because this function
-	//       just checks for int numbers
-	if (celStr.IsEmpty())
-	{
-		wxMessageBox("I don't see any valid\n"
-			         "Celsius entry!", "Error!",
+    // Retrieve control content
+    wxString celStr = celDegree->GetValue();
+    
+    // Check the control is not empty
+    // Note: we cannot use wxString.IsNumber() to check the
+    //       validity of the entry because this function
+    //       just checks for int numbers
+    if (celStr.IsEmpty())
+    {
+        wxMessageBox(_T("I don't see any valid\nCelsius entry!"), _T("Error!"),
                       wxOK | wxICON_EXCLAMATION | wxCENTRE);
-		return;
-	}
+        return;
+    }
 
-	// Convert string into number
-	float celValue = (float) strtod(celStr.c_str(),NULL);
-	// F = ( C * 180/100 ) + 32
-	float fahrValue = (celValue * 9.0f / 5.0f ) + 32.0f ;
-	// Convert temperature to a string
-	wxString fahrStr;
-	fahrStr.Printf("%5.2f",fahrValue);
-	// Update text control
-	fahrDegree->SetValue(fahrStr);
-	return;
+    // Convert string into number
+    //float celValue = (float) strtod((const char*) celStr.c_str(),NULL);
+    double celValue;
+           celStr.ToDouble(&celValue);
+    // F = ( C * 180/100 ) + 32
+    double fahrValue = (celValue * 9.0f / 5.0f ) + 32.0f ;
+    // Convert temperature to a string
+    wxString fahrStr;
+    fahrStr.Printf(_T("%5.2f"),fahrValue);
+    // Update text control
+    fahrDegree->SetValue(fahrStr);
+    return;
 }
 
 void MyDialog::OnFahrToCel(wxCommandEvent& WXUNUSED(event))
 {
-	// Calc fahrenheit to celsius conversion
+    // Calc fahrenheit to celsius conversion
 
-	// Retrieve control content
-	wxString fahrStr = fahrDegree->GetValue();
-	
-	// Check the control is not empty
-	if (fahrStr.IsEmpty())
-	{
-		wxMessageBox("I don't see any valid\n"
-			         "Fahrenheit entry!", "Error!",
+    // Retrieve control content
+    wxString fahrStr = fahrDegree->GetValue();
+    
+    // Check the control is not empty
+    if (fahrStr.IsEmpty())
+    {
+        wxMessageBox( _T("I don't see any valid\nFahrenheit entry!"), _T("Error!"),
                       wxOK | wxICON_EXCLAMATION | wxCENTRE);
-		return;
-	}
+        return;
+    }
 
-	// Convert string into number
-	float fahrValue = (float) strtod(fahrStr.c_str(),NULL);
-	// C = ( F - 32 ) * 100/180
-	float celValue = (fahrValue - 32.0f) * 5.0f / 9.0f ;
-	// Convert temperature to a string
-	wxString celStr;
-	celStr.Printf("%5.2f",celValue);
-	// Update text control
-	celDegree->SetValue(celStr);
-	return;
+    // Convert string into number
+    //float fahrValue = (float) strtod((const char*) fahrStr.c_str(),NULL);
+    double fahrValue;
+    fahrStr.ToDouble(&fahrValue);
+    // C = ( F - 32 ) * 100/180
+    double celValue = (fahrValue - 32.0f) * 5.0f / 9.0f ;
+    // Convert temperature to a string
+    wxString celStr;
+    celStr.Printf(_T("%5.2f"),celValue);
+    // Update text control
+    celDegree->SetValue(celStr);
+    return;
 }
 
 
 void MyDialog::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
-	// NOTE Since our main window is a dialog and not
-	// ---- a frame we have to close it using Destroy
-	//      rather than Close. In fact Close doesn't
-	//      actually close a dialog but just hides it
-	//      so that the application will hang there
-	//      with his only window hidden and thus unable
-	//      to get any user input.
+    // NOTE Since our main window is a dialog and not
+    // ---- a frame we have to close it using Destroy
+    //      rather than Close. In fact Close doesn't
+    //      actually close a dialog but just hides it
+    //      so that the application will hang there
+    //      with his only window hidden and thus unable
+    //      to get any user input.
     
-	// --> Don't use Close with a wxDialog,
-	//     use Destry instead.
+    // --> Don't use Close with a wxDialog,
+    //     use Destry instead.
+    Destroy();
+}
+
+void MyDialog::OnClose(wxCloseEvent& WXUNUSED(event))
+{
+    // This is identical to the OnQuit handler,
+    // except for the type of the event passed.
     Destroy();
 }
 
 void MyDialog::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf("Thanks for using Temp Converter!\n"
-		       "(C) 1999 by Marco Ghislanzoni\n"
+    msg.Printf(_T("Thanks for using Temp Converter!\n"
+               "(C) 1999 by Marco Ghislanzoni\n"
                "Written using %s"
 #ifdef wxBETA_NUMBER
                " (beta %d)"
 #endif // wxBETA_NUMBER
+           ) // end of _T()
                , wxVERSION_STRING
 #ifdef wxBETA_NUMBER
                , wxBETA_NUMBER
 #endif // wxBETA_NUMBER
               );
 
-    wxMessageBox(msg, "Dialog App", wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, _T("Dialog App"), wxOK | wxICON_INFORMATION, this);
 }

 	  	 

 samples/minimal/minimal.cpp | 42 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

diff --git a/samples/minimal/minimal.cpp b/samples/minimal/minimal.cpp
index a78e462..f35e1cd 100644
--- a/samples/minimal/minimal.cpp
+++ b/samples/minimal/minimal.cpp
@@ -29,6 +29,7 @@
 #ifndef WX_PRECOMP
     #include "wx/wx.h"
 #endif
+#include "wx/listctrl.h"
 
 // ----------------------------------------------------------------------------
 // resources
@@ -67,8 +68,12 @@ public:
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
+    void OnCheckBug(wxCommandEvent& event);
+    void OnItemRightClick(wxCommandEvent& event);
 
 private:
+    wxButton* m_btn;
+    wxListCtrl* m_listCtrl;
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -77,6 +82,8 @@ private:
 // constants
 // ----------------------------------------------------------------------------
 
+const int ID_CHECK_BUG = 1000;
+
 // IDs for the controls and the menu commands
 enum
 {
@@ -172,11 +179,46 @@ MyFrame::MyFrame(const wxString& title)
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+    m_btn = new wxButton(this, ID_CHECK_BUG, "Check bug");
+    m_listCtrl = new wxListCtrl(this, -1, wxDefaultPosition, wxDefaultSize, wxLC_REPORT | wxSUNKEN_BORDER | wxLC_EDIT_LABELS);
+    m_listCtrl->InsertColumn( 0, _T("Column") );
+    m_listCtrl->InsertItem(0, "item");
+
+    wxSizer* rootSizer = new wxBoxSizer( wxVERTICAL );
+    rootSizer->Add( m_btn, 0, wxEXPAND );
+    rootSizer->Add( m_listCtrl, 1, wxEXPAND );
+    SetSizer(rootSizer);
+
+    Connect(m_btn->GetId(), wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyFrame::OnCheckBug));
+    Connect(ID_CHECK_BUG, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrame::OnCheckBug));
+    m_listCtrl->Connect(wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK, wxCommandEventHandler(MyFrame::OnItemRightClick), NULL, this);
 }
 
 
 // event handlers
 
+void MyFrame::OnCheckBug(wxCommandEvent& WXUNUSED(event))
+{
+    wxLogMessage( "Outer Enable( 0 )" );
+    m_listCtrl->Enable( 0 );
+   
+    wxLogMessage( "Outer Enable( 1 )" );
+    m_listCtrl->Enable( 1 );
+    
+    wxLogMessage( "MyListCtrl::IsEnabled() = %d", m_listCtrl->IsEnabled() );
+    wxLogMessage( "::IsWindowEnabled( MyListCtrl::GetHWND ) = %d", ::IsWindowEnabled( (HWND)m_listCtrl->GetHWND() ) );
+}
+
+void MyFrame::OnItemRightClick(wxCommandEvent& WXUNUSED(event))
+{
+   wxMenu menu;
+
+    menu.Append( ID_CHECK_BUG, _T("Check Bug!") );
+
+    PopupMenu(&menu);
+}
+
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
     // true is to force the frame to close

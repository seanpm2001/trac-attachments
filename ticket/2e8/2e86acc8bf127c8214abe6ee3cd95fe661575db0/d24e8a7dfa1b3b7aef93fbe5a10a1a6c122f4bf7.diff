diff --git a/include/wx/gtk/private.h b/include/wx/gtk/private.h
index 69de246..a67cb25 100644
--- a/include/wx/gtk/private.h
+++ b/include/wx/gtk/private.h
@@ -121,6 +121,8 @@ WXDLLIMPEXP_CORE GtkWidget *GetNotebookWidget();
 WXDLLIMPEXP_CORE GtkWidget *GetRadioButtonWidget();
 WXDLLIMPEXP_CORE GtkWidget *GetSplitterWidget(wxOrientation orient = wxHORIZONTAL);
 WXDLLIMPEXP_CORE GtkWidget *GetTextEntryWidget();
+WXDLLIMPEXP_CORE GtkWidget *GetToolBarWidget();
+WXDLLIMPEXP_CORE GtkWidget *GetToolSeparatorWidget();
 WXDLLIMPEXP_CORE GtkWidget *GetTreeWidget();
 
 } // wxGTKPrivate
diff --git a/include/wx/renderer.h b/include/wx/renderer.h
index 6a0116d..a535272 100644
--- a/include/wx/renderer.h
+++ b/include/wx/renderer.h
@@ -62,6 +62,7 @@ enum
     wxCONTROL_EXPANDED   = wxCONTROL_SPECIAL, // only for the tree items
     wxCONTROL_SIZEGRIP   = wxCONTROL_SPECIAL, // only for the status bar panes
     wxCONTROL_FLAT       = wxCONTROL_SPECIAL, // checkboxes only: flat border
+    wxCONTROL_ISSPACER   = wxCONTROL_SPECIAL, // tool separators only: stretchable
     wxCONTROL_CURRENT    = 0x00000010,  // mouse is currently over the control
     wxCONTROL_SELECTED   = 0x00000020,  // selected item in e.g. listbox
     wxCONTROL_CHECKED    = 0x00000040,  // (check/radio button) is checked
@@ -321,6 +322,37 @@ public:
                                     int flags = 0) = 0;
 #endif // wxHAS_DRAW_TITLE_BAR_BITMAP
 
+// TODO: make this function to work with other platforms and
+//       implement it in generic renderer
+#if defined(__WXGTK__) || defined(__WXMSW__)
+    virtual void DrawToolBar(wxWindow* win,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0) = 0;
+
+    virtual void DrawToolSeparator( wxWindow *window,
+                                    wxDC& dc,
+                                    const wxRect& rect,
+                                    wxOrientation orient = wxHORIZONTAL,
+                                    int spacerWidth = 0,
+                                    int flags = 0) = 0;
+
+    virtual void DrawGripper(wxWindow* window,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0) = 0;
+
+    virtual void DrawTab(wxWindow *window,
+                         wxDC& dc,
+                         const wxRect& rect,
+                         const wxString& label,
+                         wxDirection direction = wxTOP,
+                         const wxBitmap& bitmap = wxNullBitmap,
+                         int flags = 0) = 0;
+
+#endif // defined(__WXGTK__) || defined(__WXMSW__)
 
     // geometry functions
     // ------------------
@@ -500,6 +532,37 @@ public:
         { m_rendererNative.DrawTitleBarBitmap(win, dc, rect, button, flags); }
 #endif // wxHAS_DRAW_TITLE_BAR_BITMAP
 
+#if defined(__WXGTK__) || defined(__WXMSW__)
+    virtual void DrawToolBar(wxWindow* window, wxDC& dc, const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL, int flags = 0)
+    {
+        m_rendererNative.DrawToolBar( window, dc, rect, orient, flags);
+    }
+
+    virtual void DrawToolSeparator(wxWindow* window, wxDC& dc, const wxRect& rect,
+                                   wxOrientation orient = wxHORIZONTAL,
+                                   int spacerWidth = 0, int flags = 0)
+    {
+        m_rendererNative.DrawToolSeparator( window, dc, rect, orient,
+                                            spacerWidth, flags);
+    }
+
+    virtual void DrawGripper(wxWindow* window, wxDC& dc, const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0)
+    {
+        m_rendererNative.DrawGripper( window, dc, rect, orient, flags);
+    }
+
+    virtual void DrawTab(wxWindow *window, wxDC& dc, const wxRect& rect,
+                         const wxString& label, wxDirection direction = wxTOP,
+                         const wxBitmap& bitmap = wxNullBitmap, int flags = 0)
+    {
+        m_rendererNative.DrawTab( window, dc, rect, label, direction, bitmap, flags);
+    }
+
+#endif // defined(__WXGTK__) || defined(__WXMSW__)
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win)
         { return m_rendererNative.GetSplitterParams(win); }
 
diff --git a/samples/render/render.cpp b/samples/render/render.cpp
index 49e35fc..c138f8f 100644
--- a/samples/render/render.cpp
+++ b/samples/render/render.cpp
@@ -126,6 +126,8 @@ private:
         { OnToggleDrawFlag(event, wxCONTROL_CURRENT); }
     void OnDrawUndetermined(wxCommandEvent &event)
         { OnToggleDrawFlag(event, wxCONTROL_UNDETERMINED); }
+    void OnDrawSelected(wxCommandEvent &event)
+        { OnToggleDrawFlag(event, wxCONTROL_SELECTED); }
 
     void OnAlignLeft(wxCommandEvent& WXUNUSED(event))
         { OnChangeAlign(wxALIGN_LEFT); }
@@ -193,6 +195,8 @@ private:
             flagsString += "wxCONTROL_FOCUSED ";
         if ( m_flags & wxCONTROL_PRESSED )
             flagsString += "wxCONTROL_PRESSED ";
+        if ( m_flags & wxCONTROL_SELECTED )
+            flagsString += "wxCONTROL_SELECTED ";
         if ( m_flags & wxCONTROL_CURRENT )
             flagsString += "wxCONTROL_CURRENT ";
         if ( m_flags & wxCONTROL_CHECKED )
@@ -248,6 +252,16 @@ private:
                                     wxRect(x2, y, 20, 20), m_flags);
         y += lineHeight + 20;
 
+        dc.DrawText("DrawPushButton()", x1, y);
+        renderer.DrawPushButton(this, dc, wxRect(x2, y, 30, 30), m_flags);
+
+        y += lineHeight + 20;
+
+        dc.DrawText("DrawComboBoxDropButton()", x1, y);
+        renderer.DrawComboBoxDropButton(this, dc, wxRect(x2, y, 20, 30), m_flags);
+
+        y += lineHeight + 20;
+
 #ifdef wxHAS_DRAW_TITLE_BAR_BITMAP
         dc.DrawText("DrawTitleBarBitmap()", x1, y);
         wxRect rBtn(x2, y, 21, 21);
@@ -268,6 +282,25 @@ private:
 
         y += lineHeight + rBtn.height;
 #endif // wxHAS_DRAW_TITLE_BAR_BITMAP
+
+#if defined(__WXGTK__) || defined(__WXMSW__)
+        dc.DrawText("DrawToolBar() + DrawGripper() +\nDrawToolSeparator()", x1, y);
+
+        renderer.DrawToolBar(this, dc, wxRect(x2, y, 120, 30), wxHORIZONTAL, m_flags);
+
+        renderer.DrawGripper(this, dc, wxRect(x2, y, 10, 30), wxVERTICAL, m_flags);
+
+        renderer.DrawToolSeparator( this, dc, wxRect(x2+60, y+6, 4, 18), wxVERTICAL, 0, m_flags );
+
+        y += lineHeight + 20;
+
+        dc.DrawText("DrawTab()", x1, y);
+
+        renderer.DrawTab(this, dc, wxRect(x2, y, 120, 30), wxS("A tab"),
+                         wxTOP, wxNullBitmap, m_flags);
+
+        y += lineHeight + 20;
+#endif // defined(__WXGTK__) || defined(__WXMSW__)
     }
 
     int m_flags;
@@ -296,6 +329,7 @@ enum
     Render_DrawChecked,
     Render_DrawHot,
     Render_DrawUndetermined,
+    Render_DrawSelected,
 
     Render_AlignLeft,
     Render_AlignCentre,
@@ -332,6 +366,7 @@ BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Render_DrawChecked, MyFrame::OnDrawChecked)
     EVT_MENU(Render_DrawHot, MyFrame::OnDrawHot)
     EVT_MENU(Render_DrawUndetermined, MyFrame::OnDrawUndetermined)
+    EVT_MENU(Render_DrawSelected, MyFrame::OnDrawSelected)
     EVT_MENU(Render_AlignLeft, MyFrame::OnAlignLeft)
     EVT_MENU(Render_AlignCentre, MyFrame::OnAlignCentre)
     EVT_MENU(Render_AlignRight, MyFrame::OnAlignRight)
@@ -392,7 +427,7 @@ MyFrame::MyFrame()
                  wxID_ANY,
                  wxT("Render wxWidgets Sample"),
                  wxPoint(50, 50),
-                 wxSize(450, 340))
+                 wxSize(450, 470))
 {
     // set the frame icon
     SetIcon(wxICON(sample));
@@ -412,6 +447,8 @@ MyFrame::MyFrame()
                               "Draw in &hot state\tCtrl-H");
     menuFile->AppendCheckItem(Render_DrawUndetermined,
                               "Draw in unde&termined state\tCtrl-T");
+    menuFile->AppendCheckItem(Render_DrawSelected,
+                              "Draw in selected state");
     menuFile->AppendSeparator();
 
     menuFile->AppendRadioItem(Render_AlignLeft, "&Left align\tCtrl-1");
diff --git a/src/generic/renderg.cpp b/src/generic/renderg.cpp
index 0601a60..ba54733 100644
--- a/src/generic/renderg.cpp
+++ b/src/generic/renderg.cpp
@@ -131,6 +131,36 @@ public:
                                     int flags = 0);
 #endif // wxHAS_DRAW_TITLE_BAR_BITMAP
 
+#if defined(__WXGTK__) || defined(__WXMSW__)
+    virtual void DrawToolBar(wxWindow *window,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawToolSeparator(wxWindow *window,
+                                   wxDC& dc,
+                                   const wxRect& rect,
+                                   wxOrientation orient = wxHORIZONTAL,
+                                   int spacerWidth = 0,
+                                   int flags = 0);
+
+    virtual void DrawGripper(wxWindow *window,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawTab(wxWindow *window,
+                         wxDC& dc,
+                         const wxRect& rect,
+                         const wxString& label,
+                         wxDirection direction = wxTOP,
+                         const wxBitmap& bitmap = wxNullBitmap,
+                         int flags = 0);
+
+#endif // defined(__WXGTK__) || defined(__WXMSW__)
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
 
     virtual wxRendererVersion GetVersion() const
@@ -454,6 +484,48 @@ int wxRendererGeneric::GetHeaderButtonMargin(wxWindow *WXUNUSED(win))
     return 5;
 }
 
+#if defined(__WXGTK__) || defined(__WXMSW__)
+
+void wxRendererGeneric::DrawToolBar(wxWindow * WXUNUSED(window),
+                                    wxDC& WXUNUSED(dc),
+                                    const wxRect& WXUNUSED(rect),
+                                    wxOrientation WXUNUSED(orient),
+                                    int WXUNUSED(flags))
+{
+    // TODO: Not implemented
+}
+
+void wxRendererGeneric::DrawToolSeparator(wxWindow * WXUNUSED(window),
+                                          wxDC& WXUNUSED(dc),
+                                          const wxRect& WXUNUSED(rect),
+                                          wxOrientation WXUNUSED(orient),
+                                          int WXUNUSED(spacerWidth),
+                                          int WXUNUSED(flags))
+{
+    // TODO: Not implemented
+}
+
+void wxRendererGeneric::DrawGripper(wxWindow * WXUNUSED(window),
+                                    wxDC& WXUNUSED(dc),
+                                    const wxRect& WXUNUSED(rect),
+                                    wxOrientation WXUNUSED(orient),
+                                    int WXUNUSED(flags))
+{
+    // TODO: Not implemented
+}
+
+void wxRendererGeneric::DrawTab(wxWindow * WXUNUSED(window),
+                                wxDC& WXUNUSED(dc),
+                                const wxRect& WXUNUSED(rect),
+                                const wxString& WXUNUSED(label),
+                                wxDirection WXUNUSED(direction),
+                                const wxBitmap& WXUNUSED(bitmap),
+                                int WXUNUSED(flags))
+{
+    // TODO: Not implemented
+}
+
+#endif // defined(__WXGTK__) || defined(__WXMSW__)
 
 // draw the plus or minus sign
 void
diff --git a/src/gtk/private.cpp b/src/gtk/private.cpp
index 2a1d727..4e4c1cc 100644
--- a/src/gtk/private.cpp
+++ b/src/gtk/private.cpp
@@ -245,6 +245,34 @@ GtkWidget * GetTextEntryWidget()
     return s_button;
 }
 
+GtkWidget *GetToolBarWidget()
+{
+    static GtkWidget *s_toolbar  = NULL;
+
+    if ( !s_toolbar )
+    {
+        s_toolbar = gtk_toolbar_new();
+        gtk_container_add(GetContainer(), s_toolbar);
+        gtk_widget_realize(s_toolbar);
+    }
+
+    return s_toolbar;
+}
+
+GtkWidget *GetToolSeparatorWidget()
+{
+    static GtkWidget *s_separator  = NULL;
+
+    if ( !s_separator )
+    {
+        s_separator = GTK_WIDGET(gtk_separator_tool_item_new());
+        gtk_container_add(GetContainer(), s_separator);
+        gtk_widget_realize(s_separator);
+    }
+
+    return s_separator;
+}
+
 GtkWidget *GetTreeWidget()
 {
     static GtkWidget *s_tree = NULL;
diff --git a/src/gtk/renderer.cpp b/src/gtk/renderer.cpp
index de1ebc1..3bbb7e6 100644
--- a/src/gtk/renderer.cpp
+++ b/src/gtk/renderer.cpp
@@ -124,6 +124,33 @@ public:
                                 const wxRect& rect,
                                 int flags=0);
 
+    virtual void DrawToolBar(wxWindow *win,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawToolSeparator( wxWindow *window,
+                                    wxDC& dc,
+                                    const wxRect& rect,
+                                    wxOrientation orient = wxHORIZONTAL,
+                                    int spacerWidth = 0,
+                                    int flags = 0 );
+
+    virtual void DrawGripper(wxWindow *window,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawTab(wxWindow *window,
+                         wxDC& dc,
+                         const wxRect& rect,
+                         const wxString& label,
+                         wxDirection direction = wxTOP,
+                         const wxBitmap& bitmap = wxNullBitmap,
+                         int flags = 0);
+
     virtual void DrawFocusRect(wxWindow* win, wxDC& dc, const wxRect& rect, int flags = 0);
 
     virtual wxSize GetCheckBoxSize(wxWindow *win);
@@ -911,3 +938,262 @@ void wxRendererGTK::DrawRadioBitmap(wxWindow* win, wxDC& dc, const wxRect& rect,
     );
 #endif
 }
+
+void wxRendererGTK::DrawToolBar(wxWindow *window, wxDC& dc,
+                                const wxRect& rect, wxOrientation WXUNUSED(orient),
+                                int WXUNUSED(flags))
+{
+    wxGTKDrawable* drawable = wxGetGTKDrawable(window, dc);
+    if (drawable == NULL)
+        return;
+
+    GtkWidget *toolbar = wxGTKPrivate::GetToolBarWidget();
+
+#ifdef __WXGTK3__
+    GtkStyleContext *style = gtk_widget_get_style_context(toolbar);
+    gtk_style_context_save(style);
+    gtk_style_context_add_class(style, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);
+    gtk_render_background(style, drawable, rect.x, rect.y, rect.width, rect.height);
+    gtk_render_frame(style, drawable, rect.x, rect.y, rect.width, rect.height);
+    gtk_style_context_restore(style);
+#else
+    gtk_paint_box
+    (
+        gtk_widget_get_style(toolbar),
+        drawable,
+        GTK_STATE_NORMAL,
+        GTK_SHADOW_NONE,
+        NULL,
+        toolbar,
+        NULL,
+        dc.LogicalToDeviceX(rect.x),
+        dc.LogicalToDeviceY(rect.y),
+        rect.width,
+        rect.height
+    );
+#endif // __WXGTK3__
+}
+
+void wxRendererGTK::DrawToolSeparator(wxWindow *window,
+                                      wxDC& dc,
+                                      const wxRect& rect,
+                                      wxOrientation orient,
+                                      int spacerWidth,
+                                      int flags)
+{
+    wxGTKDrawable* drawable = wxGetGTKDrawable(window, dc);
+    if (drawable == NULL)
+        return;
+
+    GtkWidget *separator = wxGTKPrivate::GetToolSeparatorWidget();
+
+    bool isStretchable = ( flags & wxCONTROL_ISSPACER );
+
+#ifdef __WXGTK3__
+    if (isStretchable)
+    {
+        // TODO: Test spacers
+        if (orient == wxVERTICAL)
+        {
+            if (spacerWidth > rect.width)
+                spacerWidth = rect.width;
+        }
+        else
+        {
+            if (spacerWidth > rect.height)
+                spacerWidth = rect.height;
+        }
+
+        gtk_render_frame
+        (
+            gtk_widget_get_style_context(separator),
+            drawable,
+            rect.x,
+            rect.y,
+            rect.x + spacerWidth,
+            rect.y + rect.height
+        );
+    }
+    else
+    {
+        gtk_render_line
+        (
+            gtk_widget_get_style_context(separator),
+            drawable,
+            rect.x,
+            rect.y,
+            rect.x + rect.width,
+            rect.y + rect.height
+        );
+    }
+#else
+    GtkStyle *style = separator->style;
+
+    if (isStretchable)
+    {
+        // TODO: Test spacers
+        const gchar *tb_detail = "hseparator";
+        if (orient == wxVERTICAL)
+            tb_detail = "vseparator";
+
+        gtk_paint_box
+        (
+            style,
+            drawable,
+            GTK_STATE_NORMAL,
+            GTK_SHADOW_ETCHED_OUT,
+            NULL,
+            wxGTKPrivate::GetToolBarWidget(),
+            tb_detail,
+            dc.LogicalToDeviceX(rect.x),
+            dc.LogicalToDeviceY(rect.y),
+            spacerWidth,
+            rect.height
+        );
+    }
+    else
+    {
+        gint separator_width = style->xthickness;
+        if (separator_width > rect.width)
+            separator_width = rect.width;
+
+        if (orient == wxHORIZONTAL)
+        {
+            gtk_paint_hline
+            (
+                style,
+                drawable,
+                GTK_STATE_NORMAL,
+                NULL,
+                separator,
+                NULL,
+                dc.LogicalToDeviceX(rect.x),
+                dc.LogicalToDeviceX(rect.x + rect.width),
+                dc.LogicalToDeviceY(rect.y)
+            );
+        }
+        else
+        {
+            gtk_paint_vline
+            (
+                style,
+                drawable,
+                GTK_STATE_NORMAL,
+                NULL,
+                separator,
+                NULL,
+                dc.LogicalToDeviceY(rect.y),
+                dc.LogicalToDeviceY(rect.y + rect.height),
+                dc.LogicalToDeviceX(rect.x)
+            );
+        }
+    }
+#endif // __WXGTK3__
+}
+
+void wxRendererGTK::DrawGripper(wxWindow* window, wxDC& dc,
+                                const wxRect& rect,
+                                wxOrientation orient,
+                                int WXUNUSED(flags))
+{
+    wxGTKDrawable* drawable = wxGetGTKDrawable(window, dc);
+    if (drawable == NULL)
+        return;
+
+    GtkWidget *toolbar = wxGTKPrivate::GetToolBarWidget();
+
+#ifdef __WXGTK3__
+    // TODO: Show the correct gripper
+    GtkStyleContext* context = gtk_widget_get_style_context(toolbar);
+    gtk_style_context_save(context);
+//  gtk_style_context_add_class(context, GTK_STYLE_CLASS_TOOLBAR);
+    gtk_render_handle(context, drawable, rect.x, rect.y, rect.width, rect.height);
+    gtk_style_context_restore(context);
+#else
+    gtk_paint_handle
+    (
+        gtk_widget_get_style(toolbar),
+        drawable,
+        GTK_STATE_NORMAL,
+        GTK_SHADOW_NONE,
+        NULL,
+        toolbar,
+        NULL,
+        dc.LogicalToDeviceX(rect.x),
+        dc.LogicalToDeviceY(rect.y),
+        rect.width,
+        rect.height,
+        orient == wxVERTICAL ? GTK_ORIENTATION_VERTICAL
+                             : GTK_ORIENTATION_HORIZONTAL
+    );
+#endif // __WXGTK3__
+}
+
+void wxRendererGTK::DrawTab(wxWindow *window, wxDC& dc, const wxRect& rect,
+                            const wxString& label, wxDirection direction,
+                            const wxBitmap& bitmap, int flags)
+{
+    wxGTKDrawable* drawable = wxGetGTKDrawable(window, dc);
+    if (drawable == NULL)
+        return;
+
+    GtkWidget *notebook = wxGTKPrivate::GetNotebookWidget();
+
+    GtkPositionType position;
+    if (direction == wxTOP)
+        position = GTK_POS_BOTTOM;
+    else if (direction == wxBOTTOM)
+        position = GTK_POS_TOP;
+    else if (direction == wxLEFT)
+        position = GTK_POS_RIGHT;
+    else // (direction == wxRIGHT)
+        position = GTK_POS_LEFT;
+
+#ifdef __WXGTK3__
+    GtkStateFlags state = GTK_STATE_FLAG_ACTIVE;
+    if ( flags & wxCONTROL_PRESSED )
+        state = GTK_STATE_FLAG_NORMAL;
+    else if ( flags & wxCONTROL_CURRENT )
+        state = GTK_STATE_FLAG_PRELIGHT;
+    else if ( flags & wxCONTROL_SELECTED )
+        state = GTK_STATE_FLAG_SELECTED;
+    else if ( flags & wxCONTROL_DISABLED )
+        state = GTK_STATE_FLAG_INSENSITIVE;
+    else if ( flags & wxCONTROL_UNDETERMINED )
+        state = GTK_STATE_FLAG_INCONSISTENT;
+
+    GtkStyleContext *style = gtk_widget_get_style_context(notebook);
+    gtk_style_context_save(style);
+    gtk_style_context_add_class(style, GTK_STYLE_CLASS_NOTEBOOK);
+    gtk_style_context_set_state(style, GtkStateFlags(state));
+    gtk_render_extension(gtk_widget_get_style_context(notebook), drawable,
+                         rect.x, rect.y, rect.width, rect.height, position);
+    gtk_style_context_restore(style);
+#else
+    GtkStateType  state  = GTK_STATE_ACTIVE;
+    if ( flags & wxCONTROL_PRESSED )
+        state = GTK_STATE_NORMAL;
+    else if ( flags & wxCONTROL_CURRENT )
+        state = GTK_STATE_PRELIGHT;
+    else if ( flags & wxCONTROL_SELECTED )
+        state = GTK_STATE_SELECTED;
+    else if ( flags & wxCONTROL_DISABLED )
+        state  = GTK_STATE_INSENSITIVE;
+
+    gtk_paint_extension
+    (
+        gtk_widget_get_style(notebook),
+        drawable,
+        state,
+        GTK_SHADOW_NONE,
+        NULL,
+        notebook,
+        "tab",
+        dc.LogicalToDeviceX(rect.x),
+        dc.LogicalToDeviceY(rect.y),
+        rect.width,
+        rect.height,
+        position
+    );
+#endif // __WXGTK3__
+}
diff --git a/src/msw/renderer.cpp b/src/msw/renderer.cpp
index 6b46d78..a705bdc 100644
--- a/src/msw/renderer.cpp
+++ b/src/msw/renderer.cpp
@@ -1,4 +1,4 @@
-///////////////////////////////////////////////////////////////////////////////
+﻿///////////////////////////////////////////////////////////////////////////////
 // Name:        src/msw/renderer.cpp
 // Purpose:     implementation of wxRendererNative for Windows
 // Author:      Vadim Zeitlin
@@ -99,6 +99,61 @@
     #define WP_CLOSEBUTTON 18
     #define WP_RESTOREBUTTON 21
     #define WP_HELPBUTTON 23
+
+// REBAR parts
+enum
+{
+    RP_GRIPPER      = 1,
+    RP_GRIPPERVERT  = 2,
+    RP_BAND         = 3,
+    RP_CHEVRON      = 4,
+    RP_CHEVRONVERT  = 5,
+// For Windows >= Vista
+    RP_BACKGROUND   = 6,
+    RP_SPLITTER     = 7,
+    RP_SPLITTERVERT = 8
+};
+// REBAR chevron states
+enum
+{
+    CHEVS_NORMAL  = 1,
+    CHEVS_HOT     = 2,
+    CHEVS_PRESSED = 3
+};
+// TOOLBAR parts
+enum
+{
+    TP_BUTTON              = 1,
+    TP_DROPDOWNBUTTON      = 2,
+    TP_SPLITBUTTON         = 3,
+    TP_SPLITBUTTONDROPDOWN = 4,
+    TP_SEPARATOR           = 5,
+    TP_SEPARATORVERT       = 6
+};
+// TOOLBAR states
+enum
+{
+    TS_NORMAL     = 1,
+    TS_HOT        = 2,
+    TS_PRESSED    = 3,
+    TS_DISABLED   = 4,
+    TS_CHECKED    = 5,
+    TS_HOTCHECKED = 6
+};
+// TAB parts
+enum
+{
+    TABP_TABITEM = 1
+};
+// TAB states
+enum
+{
+    TIS_NORMAL   = 1,
+    TIS_HOT      = 2,
+    TIS_SELECTED = 3,
+    TIS_DISABLED = 4,
+    TIS_FOCUSED  = 5
+};
 #endif
 
 #if defined(__WXWINCE__)
@@ -309,6 +364,33 @@ public:
                                     wxTitleBarButton button,
                                     int flags = 0);
 
+    virtual void DrawToolBar(wxWindow *win,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawToolSeparator( wxWindow *window,
+                                    wxDC& dc,
+                                    const wxRect& rect,
+                                    wxOrientation orient = wxHORIZONTAL,
+                                    int spacerWidth = 0,
+                                    int flags = 0 );
+
+    virtual void DrawGripper(wxWindow *window,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             wxOrientation orient = wxHORIZONTAL,
+                             int flags = 0);
+
+    virtual void DrawTab(wxWindow *window,
+                         wxDC& dc,
+                         const wxRect& rect,
+                         const wxString& label,
+                         wxDirection direction = wxTOP,
+                         const wxBitmap& bitmap = wxNullBitmap,
+                         int flags = 0);
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
 
 private:
@@ -889,6 +971,100 @@ void wxRendererXP::DrawTextCtrl(wxWindow* win,
     dc.DrawRectangle(rect);
 }
 
+void wxRendererXP::DrawToolBar(wxWindow *window, wxDC& dc, const wxRect& rect,
+                               wxOrientation WXUNUSED(orient), int WXUNUSED(flags))
+{
+    wxUxThemeHandle hTheme(window, L"TOOLBAR");
+    if ( !hTheme )
+        return;
+
+    RECT rc;
+    wxCopyRectToRECT(rect, rc);
+
+    wxUxThemeEngine::Get()->DrawThemeBackground(hTheme,
+                                                GetHdcOf(dc.GetTempHDC()),
+                                                0, 0,
+                                                &rc, NULL);
+}
+
+void wxRendererXP::DrawToolSeparator(wxWindow *window, wxDC& dc,
+                                     const wxRect& rect, wxOrientation orient,
+                                     int WXUNUSED(spacerWidth), int flags)
+{
+    wxUxThemeHandle hTheme(window, L"TOOLBAR");
+    if ( !hTheme )
+        return;
+
+    RECT rc;
+    wxCopyRectToRECT(rect, rc);
+
+    int part = TP_SEPARATORVERT;
+    if (orient == wxVERTICAL)
+        part = TP_SEPARATOR;
+
+    int state = TS_NORMAL;
+    if ( flags & wxCONTROL_DISABLED )
+        state = TS_DISABLED;
+    else if ( flags & wxCONTROL_PRESSED )
+        state = TS_PRESSED;
+    else if ( flags & wxCONTROL_CURRENT )
+        state = TS_HOT;
+
+    wxUxThemeEngine::Get()->DrawThemeBackground(hTheme,
+                                                GetHdcOf(dc.GetTempHDC()),
+                                                part,
+                                                state,
+                                                &rc, NULL);
+}
+
+void wxRendererXP::DrawGripper(wxWindow *window, wxDC& dc, const wxRect& rect,
+                               wxOrientation orient, int WXUNUSED(flags))
+{
+    wxUxThemeHandle hTheme(window, L"REBAR");
+    if ( !hTheme )
+        return;
+
+    RECT rc;
+    wxCopyRectToRECT(rect, rc);
+
+    int part = RP_GRIPPER;
+    if (orient == wxVERTICAL)
+        part = RP_GRIPPERVERT;
+
+    wxUxThemeEngine::Get()->DrawThemeBackground(hTheme,
+                                                GetHdcOf(dc.GetTempHDC()),
+                                                part, 0,
+                                                &rc, NULL);
+}
+
+void wxRendererXP::DrawTab(wxWindow *window, wxDC& dc, const wxRect& rect,
+                           const wxString& label, wxDirection direction,
+                           const wxBitmap& bitmap, int flags)
+{
+    wxUxThemeHandle hTheme(window, L"TAB");
+    if ( !hTheme )
+        return;
+
+    RECT rc;
+    wxCopyRectToRECT(rect, rc);
+
+    int state = TIS_NORMAL;
+    if ( flags & wxCONTROL_DISABLED )
+        state = TIS_DISABLED;
+    else if ( flags & wxCONTROL_SELECTED )
+        state = TIS_SELECTED;
+    else if ( flags & wxCONTROL_CURRENT )
+        state = TIS_HOT;
+    else if ( flags & wxCONTROL_FOCUSED )
+        state = TIS_FOCUSED;
+
+    wxUxThemeEngine::Get()->DrawThemeBackground(hTheme,
+                                                GetHdcOf(dc.GetTempHDC()),
+                                                TABP_TABITEM,
+                                                state,
+                                                &rc, NULL);
+}
+
 // ----------------------------------------------------------------------------
 // splitter drawing
 // ----------------------------------------------------------------------------

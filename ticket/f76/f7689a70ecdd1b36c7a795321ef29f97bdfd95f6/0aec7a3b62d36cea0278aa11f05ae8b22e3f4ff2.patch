diff -bu1 -r wxWindows/contrib/src/ogl/basic.cpp wxWin/contrib/src/ogl/basic.cpp
--- wxWindows/contrib/src/ogl/basic.cpp	2003-07-28 12:14:13.000000000 +0200
+++ wxWin/contrib/src/ogl/basic.cpp	2003-08-20 19:35:49.000000000 +0200
@@ -684,5 +684,5 @@
 
-bool wxShape::GetPerimeterPoint(double x1, double y1,
-                                     double x2, double y2,
-                                     double *x3, double *y3)
+bool wxShape::GetPerimeterPoint(double WXUNUSED(x1), double WXUNUSED(y1),
+                                     double WXUNUSED(x2), double WXUNUSED(y2),
+                                     double *WXUNUSED(x3), double *WXUNUSED(y3))
 {
@@ -892,3 +892,3 @@
 
-void wxShape::OnDraw(wxDC& dc)
+void wxShape::OnDraw(wxDC& WXUNUSED(dc))
 {
@@ -940,3 +940,3 @@
 
-void wxShape::OnSize(double x, double y)
+void wxShape::OnSize(double WXUNUSED(x), double WXUNUSED(y))
 {
@@ -944,3 +944,3 @@
 
-bool wxShape::OnMovePre(wxDC& dc, double x, double y, double old_x, double old_y, bool display)
+bool wxShape::OnMovePre(wxDC& WXUNUSED(dc), double WXUNUSED(x), double WXUNUSED(y), double WXUNUSED(old_x), double WXUNUSED(old_y), bool WXUNUSED(display))
 {
@@ -949,3 +949,3 @@
 
-void wxShape::OnMovePost(wxDC& dc, double x, double y, double old_x, double old_y, bool display)
+void wxShape::OnMovePost(wxDC& WXUNUSED(dc), double WXUNUSED(x), double WXUNUSED(y), double WXUNUSED(old_x), double WXUNUSED(old_y), bool WXUNUSED(display))
 {
@@ -1060,3 +1060,6 @@
           return (pt1.x <= pt2.x) ;
+          #if 0
+          // break is unreachable thanks to return above
           break;
+          #endif
         }
@@ -1066,3 +1069,6 @@
           return (pt1.y <= pt2.y) ;
+          #if 0
+          // break is unreachable thanks to return above
           break;
+          #endif
         }
@@ -1262,3 +1268,3 @@
 
-void wxShape::OnHighlight(wxDC& dc)
+void wxShape::OnHighlight(wxDC& WXUNUSED(dc))
 {
@@ -1574,3 +1580,3 @@
 
-void wxShape::SetSize(double x, double y, bool recursive)
+void wxShape::SetSize(double x, double y, bool WXUNUSED(recursive))
 {
@@ -1694,4 +1700,4 @@
 {
-  clause->AddAttributeValueString("type", GetClassInfo()->GetClassName());
-  clause->AddAttributeValue("id", m_id);
+  clause->AddAttributeValueString(_T("type"), GetClassInfo()->GetClassName());
+  clause->AddAttributeValue(_T("id"), m_id);
 
@@ -1702,15 +1708,15 @@
     if (penWidth != 1)
-      clause->AddAttributeValue("pen_width", (long)penWidth);
+      clause->AddAttributeValue(_T("pen_width"), (long)penWidth);
     if (penStyle != wxSOLID)
-      clause->AddAttributeValue("pen_style", (long)penStyle);
+      clause->AddAttributeValue(_T("pen_style"), (long)penStyle);
 
     wxString penColour = wxTheColourDatabase->FindName(m_pen->GetColour());
-    if (penColour == "")
+    if (penColour == wxEmptyString)
     {
       wxString hex(oglColourToHex(m_pen->GetColour()));
-      hex = wxString("#") + hex;
-      clause->AddAttributeValueString("pen_colour", hex);
+      hex = wxString(_T("#")) + hex;
+      clause->AddAttributeValueString(_T("pen_colour"), hex);
     }
-    else if (penColour != "BLACK")
-      clause->AddAttributeValueString("pen_colour", penColour);
+    else if (penColour != _T("BLACK"))
+      clause->AddAttributeValueString(_T("pen_colour"), penColour);
   }
@@ -1721,13 +1727,13 @@
 
-    if (brushColour == "")
+    if (brushColour == wxEmptyString)
     {
       wxString hex(oglColourToHex(m_brush->GetColour()));
-      hex = wxString("#") + hex;
-      clause->AddAttributeValueString("brush_colour", hex);
+      hex = wxString(_T("#")) + hex;
+      clause->AddAttributeValueString(_T("brush_colour"), hex);
     }
-    else if (brushColour != "WHITE")
-      clause->AddAttributeValueString("brush_colour", brushColour);
+    else if (brushColour != _T("WHITE"))
+      clause->AddAttributeValueString(_T("brush_colour"), brushColour);
 
     if (m_brush->GetStyle() != wxSOLID)
-      clause->AddAttributeValue("brush_style", (long)m_brush->GetStyle());
+      clause->AddAttributeValue(_T("brush_style"), (long)m_brush->GetStyle());
   }
@@ -1748,3 +1754,3 @@
     }
-    clause->AddAttributeValue("arcs", list);
+    clause->AddAttributeValue(_T("arcs"), list);
   }
@@ -1753,24 +1759,24 @@
   if (m_attachmentMode != 0)
-    clause->AddAttributeValue("use_attachments", (long)m_attachmentMode);
+    clause->AddAttributeValue(_T("use_attachments"), (long)m_attachmentMode);
   if (m_sensitivity != OP_ALL)
-    clause->AddAttributeValue("sensitivity", (long)m_sensitivity);
+    clause->AddAttributeValue(_T("sensitivity"), (long)m_sensitivity);
   if (!m_spaceAttachments)
-    clause->AddAttributeValue("space_attachments", (long)m_spaceAttachments);
+    clause->AddAttributeValue(_T("space_attachments"), (long)m_spaceAttachments);
   if (m_fixedWidth)
-    clause->AddAttributeValue("fixed_width", (long)m_fixedWidth);
+    clause->AddAttributeValue(_T("fixed_width"), (long)m_fixedWidth);
   if (m_fixedHeight)
-    clause->AddAttributeValue("fixed_height", (long)m_fixedHeight);
+    clause->AddAttributeValue(_T("fixed_height"), (long)m_fixedHeight);
   if (m_shadowMode != SHADOW_NONE)
-    clause->AddAttributeValue("shadow_mode", (long)m_shadowMode);
+    clause->AddAttributeValue(_T("shadow_mode"), (long)m_shadowMode);
   if (m_centreResize != TRUE)
-    clause->AddAttributeValue("centre_resize", (long)0);
-  clause->AddAttributeValue("maintain_aspect_ratio", (long) m_maintainAspectRatio);
+    clause->AddAttributeValue(_T("centre_resize"), (long)0);
+  clause->AddAttributeValue(_T("maintain_aspect_ratio"), (long) m_maintainAspectRatio);
   if (m_highlighted != FALSE)
-    clause->AddAttributeValue("hilite", (long)m_highlighted);
+    clause->AddAttributeValue(_T("hilite"), (long)m_highlighted);
 
   if (m_parent) // For composite objects
-    clause->AddAttributeValue("parent", (long)m_parent->GetId());
+    clause->AddAttributeValue(_T("parent"), (long)m_parent->GetId());
 
   if (m_rotation != 0.0)
-    clause->AddAttributeValue("rotation", m_rotation);
+    clause->AddAttributeValue(_T("rotation"), m_rotation);
 
@@ -1778,6 +1784,6 @@
   {
-    clause->AddAttributeValue("neck_length", (long) m_branchNeckLength);
-    clause->AddAttributeValue("stem_length", (long) m_branchStemLength);
-    clause->AddAttributeValue("branch_spacing", (long) m_branchSpacing);
-    clause->AddAttributeValue("branch_style", (long) m_branchStyle);
+    clause->AddAttributeValue(_T("neck_length"), (long) m_branchNeckLength);
+    clause->AddAttributeValue(_T("stem_length"), (long) m_branchStemLength);
+    clause->AddAttributeValue(_T("branch_spacing"), (long) m_branchSpacing);
+    clause->AddAttributeValue(_T("branch_style"), (long) m_branchStyle);
   }
@@ -1799,3 +1805,3 @@
     }
-    clause->AddAttributeValue("user_attachments", attachmentList);
+    clause->AddAttributeValue(_T("user_attachments"), attachmentList);
   }
@@ -1876,7 +1882,7 @@
 {
-  clause->GetAttributeValue("id", m_id);
+  clause->GetAttributeValue(_T("id"), m_id);
   wxRegisterId(m_id);
 
-  clause->GetAttributeValue("x", m_xpos);
-  clause->GetAttributeValue("y", m_ypos);
+  clause->GetAttributeValue(_T("x"), m_xpos);
+  clause->GetAttributeValue(_T("y"), m_ypos);
 
@@ -1884,3 +1890,3 @@
   ClearText();
-  wxExpr *strings = clause->AttributeValue("text");
+  wxExpr *strings = clause->AttributeValue(_T("text"));
   if (strings && strings->Type() == wxExprList)
@@ -1894,3 +1900,3 @@
       double the_y = 0.0;
-      wxString the_string("");
+      wxString the_string = wxEmptyString;
 
@@ -1933,4 +1939,4 @@
 
-  wxString pen_string = "";
-  wxString brush_string = "";
+  wxString pen_string = wxEmptyString;
+  wxString brush_string = wxEmptyString;
   int pen_width = 1;
@@ -1940,4 +1946,4 @@
 
-  clause->GetAttributeValue("pen_colour", pen_string);
-  clause->GetAttributeValue("text_colour", m_textColourName);
+  clause->GetAttributeValue(_T("pen_colour"), pen_string);
+  clause->GetAttributeValue(_T("text_colour"), m_textColourName);
 
@@ -1945,17 +1951,17 @@
 
-  clause->GetAttributeValue("region_name", m_regionName);
+  clause->GetAttributeValue(_T("region_name"), m_regionName);
 
-  clause->GetAttributeValue("brush_colour", brush_string);
-  clause->GetAttributeValue("pen_width", pen_width);
-  clause->GetAttributeValue("pen_style", pen_style);
-  clause->GetAttributeValue("brush_style", brush_style);
+  clause->GetAttributeValue(_T("brush_colour"), brush_string);
+  clause->GetAttributeValue(_T("pen_width"), pen_width);
+  clause->GetAttributeValue(_T("pen_style"), pen_style);
+  clause->GetAttributeValue(_T("brush_style"), brush_style);
 
   int iVal = (int) m_attachmentMode;
-  clause->GetAttributeValue("use_attachments", iVal);
+  clause->GetAttributeValue(_T("use_attachments"), iVal);
   m_attachmentMode = iVal;
 
-  clause->GetAttributeValue("sensitivity", m_sensitivity);
+  clause->GetAttributeValue(_T("sensitivity"), m_sensitivity);
 
   iVal = (int) m_spaceAttachments;
-  clause->GetAttributeValue("space_attachments", iVal);
+  clause->GetAttributeValue(_T("space_attachments"), iVal);
   m_spaceAttachments = (iVal != 0);
@@ -1963,3 +1969,3 @@
   iVal = (int) m_fixedWidth;
-  clause->GetAttributeValue("fixed_width", iVal);
+  clause->GetAttributeValue(_T("fixed_width"), iVal);
   m_fixedWidth = (iVal != 0);
@@ -1967,10 +1973,10 @@
   iVal = (int) m_fixedHeight;
-  clause->GetAttributeValue("fixed_height", iVal);
+  clause->GetAttributeValue(_T("fixed_height"), iVal);
   m_fixedHeight = (iVal != 0);
 
-  clause->GetAttributeValue("format_mode", m_formatMode);
-  clause->GetAttributeValue("shadow_mode", m_shadowMode);
+  clause->GetAttributeValue(_T("format_mode"), m_formatMode);
+  clause->GetAttributeValue(_T("shadow_mode"), m_shadowMode);
 
   iVal = m_branchNeckLength;
-  clause->GetAttributeValue("neck_length", iVal);
+  clause->GetAttributeValue(_T("neck_length"), iVal);
   m_branchNeckLength = iVal;
@@ -1978,3 +1984,3 @@
   iVal = m_branchStemLength;
-  clause->GetAttributeValue("stem_length", iVal);
+  clause->GetAttributeValue(_T("stem_length"), iVal);
   m_branchStemLength = iVal;
@@ -1982,9 +1988,9 @@
   iVal = m_branchSpacing;
-  clause->GetAttributeValue("branch_spacing", iVal);
+  clause->GetAttributeValue(_T("branch_spacing"), iVal);
   m_branchSpacing = iVal;
 
-  clause->GetAttributeValue("branch_style", m_branchStyle);
+  clause->GetAttributeValue(_T("branch_style"), m_branchStyle);
 
   iVal = (int) m_centreResize;
-  clause->GetAttributeValue("centre_resize", iVal);
+  clause->GetAttributeValue(_T("centre_resize"), iVal);
   m_centreResize = (iVal != 0);
@@ -1992,3 +1998,3 @@
   iVal = (int) m_maintainAspectRatio;
-  clause->GetAttributeValue("maintain_aspect_ratio", iVal);
+  clause->GetAttributeValue(_T("maintain_aspect_ratio"), iVal);
   m_maintainAspectRatio = (iVal != 0);
@@ -1996,11 +2002,11 @@
   iVal = (int) m_highlighted;
-  clause->GetAttributeValue("hilite", iVal);
+  clause->GetAttributeValue(_T("hilite"), iVal);
   m_highlighted = (iVal != 0);
 
-  clause->GetAttributeValue("rotation", m_rotation);
+  clause->GetAttributeValue(_T("rotation"), m_rotation);
 
-  if (pen_string == "")
-    pen_string = "BLACK";
-  if (brush_string == "")
-    brush_string = "WHITE";
+  if (pen_string == wxEmptyString)
+    pen_string = _T("BLACK");
+  if (brush_string == wxEmptyString)
+    brush_string = _T("WHITE");
 
@@ -2029,3 +2035,3 @@
   int point_size = 10;
-  clause->GetAttributeValue("point_size", point_size);
+  clause->GetAttributeValue(_T("point_size"), point_size);
   SetFont(oglMatchFont(point_size));
@@ -2033,3 +2039,3 @@
   // Read user-defined attachment points, if any
-  wxExpr *attachmentList = clause->AttributeValue("user_attachments");
+  wxExpr *attachmentList = clause->AttributeValue(_T("user_attachments"));
   if (attachmentList)
@@ -2075,3 +2081,3 @@
 
-  while ((regionExpr = clause->AttributeValue(regionNameBuf)))
+  while ((regionExpr = clause->AttributeValue(regionNameBuf)) != NULL)
   {
@@ -2082,4 +2088,4 @@
 
-    wxString regionName("");
-    wxString regionText("");
+    wxString regionName = wxEmptyString;
+    wxString regionText = wxEmptyString;
     double x = 0.0;
@@ -2097,4 +2103,4 @@
     int fontWeight = wxNORMAL;
-    wxString regionTextColour("");
-    wxString penColour("");
+    wxString regionTextColour = wxEmptyString;
+    wxString penColour = wxEmptyString;
     int penStyle = wxSOLID;
@@ -2148,3 +2154,3 @@
       else
-        regionTextColour = "BLACK";
+        regionTextColour = _T("BLACK");
 
@@ -2165,3 +2171,3 @@
     region->SetPenStyle(penStyle);
-    if (penColour != "")
+    if (penColour != wxEmptyString)
       region->SetPenColour(penColour);
@@ -2187,3 +2193,3 @@
         double the_y = 0.0;
-        wxString the_string("");
+        wxString the_string = wxEmptyString;
 
@@ -2241,3 +2247,3 @@
     wxShapeRegion *newRegion = new wxShapeRegion;
-    newRegion->SetName("0");
+    newRegion->SetName(_T("0"));
     m_regions.Append((wxObject *)newRegion);
@@ -2717,3 +2723,3 @@
 
-            bool isEnd = (line && line->IsEnd(this));
+            /* bool isEnd = */ (line && line->IsEnd(this));
 
@@ -2759,3 +2765,6 @@
                     return FALSE;
+                    #if 0
+                    // break unreachable thanks to return above
                     break;
+                    #endif
                 }
diff -bu1 -r wxWindows/contrib/src/ogl/basic2.cpp wxWin/contrib/src/ogl/basic2.cpp
--- wxWindows/contrib/src/ogl/basic2.cpp	2003-07-28 12:14:13.000000000 +0200
+++ wxWin/contrib/src/ogl/basic2.cpp	2003-08-20 18:16:12.000000000 +0200
@@ -322,3 +322,3 @@
 // points ever go to zero, we've lost it, and can't resize.
-void wxPolygonShape::SetSize(double new_width, double new_height, bool recursive)
+void wxPolygonShape::SetSize(double new_width, double new_height, bool WXUNUSED(recursive))
 {
@@ -908,3 +908,3 @@
 
-void wxRectangleShape::SetSize(double x, double y, bool recursive)
+void wxRectangleShape::SetSize(double x, double y, bool WXUNUSED(recursive))
 {
@@ -922,3 +922,3 @@
 // Assume (x1, y1) is centre of box (most generally, line end at box)
-bool wxRectangleShape::GetPerimeterPoint(double x1, double y1,
+bool wxRectangleShape::GetPerimeterPoint(double WXUNUSED(x1), double WXUNUSED(y1),
                                      double x2, double y2,
@@ -997,3 +997,3 @@
 
-void wxTextShape::OnDraw(wxDC& dc)
+void wxTextShape::OnDraw(wxDC& WXUNUSED(dc))
 {
@@ -1065,3 +1065,3 @@
 
-void wxEllipseShape::SetSize(double x, double y, bool recursive)
+void wxEllipseShape::SetSize(double x, double y, bool WXUNUSED(recursive))
 {
@@ -1177,3 +1177,6 @@
         return wxShape::GetAttachmentPosition(attachment, x, y, nth, no_arcs, line);
+        #if 0
+          // unreachable code thanks to return above
         break;
+        #endif
       }
@@ -1200,3 +1203,3 @@
 
-bool wxCircleShape::GetPerimeterPoint(double x1, double y1,
+bool wxCircleShape::GetPerimeterPoint(double WXUNUSED(x1), double WXUNUSED(y1),
                                       double x2, double y2,
@@ -1244,3 +1247,3 @@
 // Don't even attempt to draw any text - waste of time!
-void wxControlPoint::OnDrawContents(wxDC& dc)
+void wxControlPoint::OnDrawContents(wxDC& WXUNUSED(dc))
 {
@@ -1281,4 +1284,4 @@
 
-bool wxControlPoint::GetAttachmentPosition(int attachment, double *x, double *y,
-                                         int nth, int no_arcs, wxLineShape *line)
+bool wxControlPoint::GetAttachmentPosition(int WXUNUSED(attachment), double *x, double *y,
+                                         int WXUNUSED(nth), int WXUNUSED(no_arcs), wxLineShape *WXUNUSED(line))
 {
@@ -1290,3 +1293,3 @@
 // to override sizing behaviour.
-void wxShape::OnSizingDragLeft(wxControlPoint* pt, bool draw, double x, double y, int keys, int attachment)
+void wxShape::OnSizingDragLeft(wxControlPoint* pt, bool WXUNUSED(draw), double x, double y, int keys, int WXUNUSED(attachment))
 {
@@ -1397,3 +1400,3 @@
 
-void wxShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int keys, int WXUNUSED(attachment))
 {
@@ -1529,3 +1532,3 @@
 
-void wxShape::OnSizingEndDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxShape::OnSizingEndDragLeft(wxControlPoint* pt, double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1626,3 +1629,3 @@
 // to override sizing behaviour.
-void wxPolygonShape::OnSizingDragLeft(wxControlPoint* pt, bool draw, double x, double y, int keys, int attachment)
+void wxPolygonShape::OnSizingDragLeft(wxControlPoint* pt, bool WXUNUSED(draw), double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1639,3 +1642,3 @@
 
-  if (0) // keys & KEY_CTRL)
+  #if 0 // keys & KEY_CTRL)
   {
@@ -1654,3 +1657,3 @@
   }
-  else
+  #else
   {
@@ -1658,2 +1661,3 @@
   }
+  #endif
 
@@ -1663,3 +1667,3 @@
 
-void wxPolygonShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxPolygonShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1690,3 +1694,3 @@
 
-  if (0) // keys & KEY_CTRL)
+  #if 0 // keys & KEY_CTRL)
   {
@@ -1705,3 +1709,3 @@
   }
-  else
+  #else
   {
@@ -1709,2 +1713,3 @@
   }
+  #endif
 
@@ -1716,3 +1721,3 @@
 
-void wxPolygonShape::OnSizingEndDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxPolygonShape::OnSizingEndDragLeft(wxControlPoint* pt, double WXUNUSED(x), double WXUNUSED(y), int keys, int WXUNUSED(attachment))
 {
diff -bu1 -r wxWindows/contrib/src/ogl/bmpshape.cpp wxWin/contrib/src/ogl/bmpshape.cpp
--- wxWindows/contrib/src/ogl/bmpshape.cpp	2003-07-28 12:14:13.000000000 +0200
+++ wxWin/contrib/src/ogl/bmpshape.cpp	2003-08-20 18:13:43.000000000 +0200
@@ -62,3 +62,3 @@
 
-void wxBitmapShape::SetSize(double w, double h, bool recursive)
+void wxBitmapShape::SetSize(double w, double h, bool WXUNUSED(recursive))
 {
@@ -83,3 +83,3 @@
   wxRectangleShape::WriteAttributes(clause);
-  clause->AddAttributeValueString("filename", m_filename);
+  clause->AddAttributeValueString(_T("filename"), m_filename);
 }
@@ -89,3 +89,3 @@
   wxRectangleShape::ReadAttributes(clause);
-  clause->GetAttributeValue("filename", m_filename);
+  clause->GetAttributeValue(_T("filename"), m_filename);
 }
diff -bu1 -r wxWindows/contrib/src/ogl/canvas.cpp wxWin/contrib/src/ogl/canvas.cpp
--- wxWindows/contrib/src/ogl/canvas.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/canvas.cpp	2003-08-20 18:16:18.000000000 +0200
@@ -84,3 +84,3 @@
 
-void wxShapeCanvas::OnPaint(wxPaintEvent& event)
+void wxShapeCanvas::OnPaint(wxPaintEvent& WXUNUSED(event))
 {
@@ -471,3 +471,3 @@
 
-void wxShapeCanvas::OnLeftClick(double x, double y, int keys)
+void wxShapeCanvas::OnLeftClick(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -475,3 +475,3 @@
 
-void wxShapeCanvas::OnRightClick(double x, double y, int keys)
+void wxShapeCanvas::OnRightClick(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -479,3 +479,3 @@
 
-void wxShapeCanvas::OnDragLeft(bool draw, double x, double y, int keys)
+void wxShapeCanvas::OnDragLeft(bool WXUNUSED(draw), double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -483,3 +483,3 @@
 
-void wxShapeCanvas::OnBeginDragLeft(double x, double y, int keys)
+void wxShapeCanvas::OnBeginDragLeft(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -487,3 +487,3 @@
 
-void wxShapeCanvas::OnEndDragLeft(double x, double y, int keys)
+void wxShapeCanvas::OnEndDragLeft(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -491,3 +491,3 @@
 
-void wxShapeCanvas::OnDragRight(bool draw, double x, double y, int keys)
+void wxShapeCanvas::OnDragRight(bool WXUNUSED(draw), double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -495,3 +495,3 @@
 
-void wxShapeCanvas::OnBeginDragRight(double x, double y, int keys)
+void wxShapeCanvas::OnBeginDragRight(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
@@ -499,3 +499,3 @@
 
-void wxShapeCanvas::OnEndDragRight(double x, double y, int keys)
+void wxShapeCanvas::OnEndDragRight(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys))
 {
diff -bu1 -r wxWindows/contrib/src/ogl/composit.cpp wxWin/contrib/src/ogl/composit.cpp
--- wxWindows/contrib/src/ogl/composit.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/composit.cpp	2003-08-20 19:23:03.000000000 +0200
@@ -156,3 +156,3 @@
 
-void wxCompositeShape::OnDragLeft(bool draw, double x, double y, int keys, int attachment)
+void wxCompositeShape::OnDragLeft(bool WXUNUSED(draw), double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -176,3 +176,3 @@
 
-void wxCompositeShape::OnBeginDragLeft(double x, double y, int keys, int attachment)
+void wxCompositeShape::OnBeginDragLeft(double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -204,3 +204,3 @@
 
-void wxCompositeShape::OnEndDragLeft(double x, double y, int keys, int attachment)
+void wxCompositeShape::OnEndDragLeft(double x, double y, int keys, int WXUNUSED(attachment))
 {
@@ -231,3 +231,3 @@
 
-void wxCompositeShape::OnRightClick(double x, double y, int keys, int attachment)
+void wxCompositeShape::OnRightClick(double x, double y, int keys, int WXUNUSED(attachment))
 {
@@ -650,3 +650,3 @@
   }
-  clause->AddAttributeValue("children", childrenExpr);
+  clause->AddAttributeValue(_T("children"), childrenExpr);
 
@@ -663,3 +663,3 @@
     }
-    clause->AddAttributeValue("divisions", divisionsExpr);
+    clause->AddAttributeValue(_T("divisions"), divisionsExpr);
   }
@@ -698,3 +698,3 @@
     double cYSpacing = 0.0;
-    wxString cName("");
+    wxString cName = wxEmptyString;
     long cId = 0;
@@ -720,3 +720,3 @@
 
-    wxExpr *objExpr1 = database->HashFind("node_image", constrainingExpr->IntegerValue());
+    wxExpr *objExpr1 = database->HashFind(_T("node_image"), constrainingExpr->IntegerValue());
     if (objExpr1 && objExpr1->GetClientData())
@@ -731,3 +731,3 @@
       long currentId = currentIdExpr->IntegerValue();
-      wxExpr *objExpr2 = database->HashFind("node_image", currentId);
+      wxExpr *objExpr2 = database->HashFind(_T("node_image"), currentId);
       if (objExpr2 && objExpr2->GetClientData())
@@ -991,15 +991,15 @@
   if (m_leftSide)
-    clause->AddAttributeValue("left_side", (long)m_leftSide->GetId());
+    clause->AddAttributeValue(_T("left_side"), (long)m_leftSide->GetId());
   if (m_topSide)
-    clause->AddAttributeValue("top_side", (long)m_topSide->GetId());
+    clause->AddAttributeValue(_T("top_side"), (long)m_topSide->GetId());
   if (m_rightSide)
-    clause->AddAttributeValue("right_side", (long)m_rightSide->GetId());
+    clause->AddAttributeValue(_T("right_side"), (long)m_rightSide->GetId());
   if (m_bottomSide)
-    clause->AddAttributeValue("bottom_side", (long)m_bottomSide->GetId());
+    clause->AddAttributeValue(_T("bottom_side"), (long)m_bottomSide->GetId());
 
-  clause->AddAttributeValue("handle_side", (long)m_handleSide);
-  clause->AddAttributeValueString("left_colour", m_leftSideColour);
-  clause->AddAttributeValueString("top_colour", m_topSideColour);
-  clause->AddAttributeValueString("left_style", m_leftSideStyle);
-  clause->AddAttributeValueString("top_style", m_topSideStyle);
+  clause->AddAttributeValue(_T("handle_side"), (long)m_handleSide);
+  clause->AddAttributeValueString(_T("left_colour"), m_leftSideColour);
+  clause->AddAttributeValueString(_T("top_colour"), m_topSideColour);
+  clause->AddAttributeValueString(_T("left_style"), m_leftSideStyle);
+  clause->AddAttributeValueString(_T("top_style"), m_topSideStyle);
 }
@@ -1010,7 +1010,7 @@
 
-  clause->GetAttributeValue("handle_side", m_handleSide);
-  clause->GetAttributeValue("left_colour", m_leftSideColour);
-  clause->GetAttributeValue("top_colour", m_topSideColour);
-  clause->GetAttributeValue("left_style", m_leftSideStyle);
-  clause->GetAttributeValue("top_style", m_topSideStyle);
+  clause->GetAttributeValue(_T("handle_side"), m_handleSide);
+  clause->GetAttributeValue(_T("left_colour"), m_leftSideColour);
+  clause->GetAttributeValue(_T("top_colour"), m_topSideColour);
+  clause->GetAttributeValue(_T("left_style"), m_leftSideStyle);
+  clause->GetAttributeValue(_T("top_style"), m_topSideStyle);
 }
@@ -1624,3 +1624,3 @@
 
-void wxDivisionShape::EditEdge(int side)
+void wxDivisionShape::EditEdge(int WXUNUSED(side))
 {
diff -bu1 -r wxWindows/contrib/src/ogl/constrnt.cpp wxWin/contrib/src/ogl/constrnt.cpp
--- wxWindows/contrib/src/ogl/constrnt.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/constrnt.cpp	2003-08-20 18:15:55.000000000 +0200
@@ -388,4 +388,6 @@
       return changed;
-
+      #if 0
+      // two returned values ?
       return FALSE;
+      #endif
     }
@@ -482,4 +484,6 @@
       return changed;
-
+      #if 0
+      // two returned values ?
       return FALSE;
+      #endif
     }
@@ -570,4 +574,6 @@
       return changed;
-
+      #if 0
+      // two returned values ?
       return FALSE;
+      #endif
     }
@@ -613,5 +619,7 @@
     }
-
+    #if 0
+    // default value handled in main function body
     default:
       return FALSE;
+    #endif
   }
diff -bu1 -r wxWindows/contrib/src/ogl/divided.cpp wxWin/contrib/src/ogl/divided.cpp
--- wxWindows/contrib/src/ogl/divided.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/divided.cpp	2003-08-20 18:16:31.000000000 +0200
@@ -139,3 +139,3 @@
 
-void wxDividedShape::SetSize(double w, double h, bool recursive)
+void wxDividedShape::SetSize(double w, double h, bool WXUNUSED(recursive))
 {
@@ -591,3 +591,3 @@
 // Implement resizing of divided object division
-void wxDividedShapeControlPoint::OnDragLeft(bool draw, double x, double y, int keys, int attachment)
+void wxDividedShapeControlPoint::OnDragLeft(bool WXUNUSED(draw), double WXUNUSED(x), double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -609,3 +609,3 @@
 
-void wxDividedShapeControlPoint::OnBeginDragLeft(double x, double y, int keys, int attachment)
+void wxDividedShapeControlPoint::OnBeginDragLeft(double WXUNUSED(x), double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -628,3 +628,3 @@
 
-void wxDividedShapeControlPoint::OnEndDragLeft(double x, double y, int keys, int attachment)
+void wxDividedShapeControlPoint::OnEndDragLeft(double WXUNUSED(x), double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -654,3 +654,6 @@
     double thisRegionTop = 0.0;
+    #if 0
+    // this variable is not readed later
     double thisRegionBottom = 0.0;
+    #endif
     double nextRegionBottom = 0.0;
@@ -669,3 +672,6 @@
         thisRegionTop = currentY;
+        #if 0
+        // no need for assignment if value is not used later
         thisRegionBottom = actualY;
+        #endif
         if (node->GetNext())
diff -bu1 -r wxWindows/contrib/src/ogl/drawn.cpp wxWin/contrib/src/ogl/drawn.cpp
--- wxWindows/contrib/src/ogl/drawn.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/drawn.cpp	2003-08-20 19:43:14.000000000 +0200
@@ -78,3 +78,3 @@
 
-void wxDrawnShape::SetSize(double w, double h, bool recursive)
+void wxDrawnShape::SetSize(double w, double h, bool WXUNUSED(recursive))
 {
@@ -240,4 +240,4 @@
 
-  clause->AddAttributeValue("current_angle", (long)m_currentAngle);
-  clause->AddAttributeValue("save_metafile", (long)m_saveToFile);
+  clause->AddAttributeValue(_T("current_angle"), (long)m_currentAngle);
+  clause->AddAttributeValue(_T("save_metafile"), (long)m_saveToFile);
   if (m_saveToFile)
@@ -258,4 +258,4 @@
   int iVal = (int) m_saveToFile;
-  clause->GetAttributeValue("save_metafile", iVal);
-  clause->GetAttributeValue("current_angle", m_currentAngle);
+  clause->GetAttributeValue(_T("save_metafile"), iVal);
+  clause->GetAttributeValue(_T("current_angle"), m_currentAngle);
   m_saveToFile = (iVal != 0);
@@ -421,3 +421,3 @@
 
-void wxOpSetGDI::Do(wxDC& dc, double xoffset, double yoffset)
+void wxOpSetGDI::Do(wxDC& dc, double WXUNUSED(xoffset), double WXUNUSED(yoffset))
 {
@@ -522,3 +522,3 @@
 #if wxUSE_PROLOGIO
-wxExpr *wxOpSetGDI::WriteExpr(wxPseudoMetaFile *image)
+wxExpr *wxOpSetGDI::WriteExpr(wxPseudoMetaFile *WXUNUSED(image))
 {
@@ -554,3 +554,3 @@
 
-void wxOpSetGDI::ReadExpr(wxPseudoMetaFile *image, wxExpr *expr)
+void wxOpSetGDI::ReadExpr(wxPseudoMetaFile *WXUNUSED(image), wxExpr *expr)
 {
@@ -598,3 +598,3 @@
 
-wxDrawOp *wxOpSetClipping::Copy(wxPseudoMetaFile *newImage)
+wxDrawOp *wxOpSetClipping::Copy(wxPseudoMetaFile *WXUNUSED(newImage))
 {
@@ -638,3 +638,3 @@
 #if wxUSE_PROLOGIO
-wxExpr *wxOpSetClipping::WriteExpr(wxPseudoMetaFile *image)
+wxExpr *wxOpSetClipping::WriteExpr(wxPseudoMetaFile *WXUNUSED(image))
 {
@@ -658,3 +658,3 @@
 
-void wxOpSetClipping::ReadExpr(wxPseudoMetaFile *image, wxExpr *expr)
+void wxOpSetClipping::ReadExpr(wxPseudoMetaFile *WXUNUSED(image), wxExpr *expr)
 {
@@ -700,3 +700,3 @@
 
-wxDrawOp *wxOpDraw::Copy(wxPseudoMetaFile *newImage)
+wxDrawOp *wxOpDraw::Copy(wxPseudoMetaFile *WXUNUSED(newImage))
 {
@@ -884,3 +884,3 @@
 #if wxUSE_PROLOGIO
-wxExpr *wxOpDraw::WriteExpr(wxPseudoMetaFile *image)
+wxExpr *wxOpDraw::WriteExpr(wxPseudoMetaFile *WXUNUSED(image))
 {
@@ -941,3 +941,3 @@
 
-void wxOpDraw::ReadExpr(wxPseudoMetaFile *image, wxExpr *expr)
+void wxOpDraw::ReadExpr(wxPseudoMetaFile *WXUNUSED(image), wxExpr *expr)
 {
@@ -1013,3 +1013,3 @@
 
-wxDrawOp *wxOpPolyDraw::Copy(wxPseudoMetaFile *newImage)
+wxDrawOp *wxOpPolyDraw::Copy(wxPseudoMetaFile *WXUNUSED(newImage))
 {
@@ -1073,3 +1073,2 @@
         break;
-      break;
     }
@@ -1098,3 +1097,3 @@
 
-void wxOpPolyDraw::Rotate(double x, double y, double theta, double sinTheta, double cosTheta)
+void wxOpPolyDraw::Rotate(double x, double y, double WXUNUSED(theta), double sinTheta, double cosTheta)
 {
@@ -1110,3 +1109,3 @@
 #if wxUSE_PROLOGIO
-wxExpr *wxOpPolyDraw::WriteExpr(wxPseudoMetaFile *image)
+wxExpr *wxOpPolyDraw::WriteExpr(wxPseudoMetaFile *WXUNUSED(image))
 {
@@ -1153,3 +1152,3 @@
 
-void wxOpPolyDraw::ReadExpr(wxPseudoMetaFile *image, wxExpr *expr)
+void wxOpPolyDraw::ReadExpr(wxPseudoMetaFile *WXUNUSED(image), wxExpr *expr)
 {
@@ -1187,3 +1186,3 @@
     long signedY = unSignedY - 32767;
-#ifdef __WXMSW__
+#if defined(__WXMSW__) && 0
     int testX = (signed int)unSignedX;
@@ -1342,5 +1341,9 @@
       return 15;
+    #if 0
+    // handling this default outside switch removes warning under Borland 
     default:
       return 0;
+    #endif
   }
+
   return 0;
@@ -2417,3 +2420,3 @@
 {
-    wxOpSetClipping* theOp = new wxOpSetClipping(DRAWOP_SET_CLIPPING_RECT,
+    /* wxOpSetClipping* theOp = */ new wxOpSetClipping(DRAWOP_SET_CLIPPING_RECT,
         (double) rect.x, (double) rect.y, (double) rect.width, (double) rect.height);
diff -bu1 -r wxWindows/contrib/src/ogl/lines.cpp wxWin/contrib/src/ogl/lines.cpp
--- wxWindows/contrib/src/ogl/lines.cpp	2003-07-28 12:14:14.000000000 +0200
+++ wxWin/contrib/src/ogl/lines.cpp	2003-08-20 18:14:57.000000000 +0200
@@ -964,3 +964,3 @@
 
-void wxLineShape::OnDrawOutline(wxDC& dc, double x, double y, double w, double h)
+void wxLineShape::OnDrawOutline(wxDC& dc, double WXUNUSED(x), double WXUNUSED(y), double WXUNUSED(w), double WXUNUSED(h))
 {
@@ -981,3 +981,3 @@
 
-bool wxLineShape::OnMovePre(wxDC& dc, double x, double y, double old_x, double old_y, bool display)
+bool wxLineShape::OnMovePre(wxDC& dc, double x, double y, double old_x, double old_y, bool WXUNUSED(display))
 {
@@ -1040,5 +1040,5 @@
     wxNode *first = m_lineControlPoints->GetFirst();
-    wxRealPoint *first_point = (wxRealPoint *)first->GetData();
+    /* wxRealPoint *first_point = */ (wxRealPoint *)first->GetData();
     wxNode *last = m_lineControlPoints->GetLast();
-    wxRealPoint *last_point = (wxRealPoint *)last->GetData();
+    /* wxRealPoint *last_point = */ (wxRealPoint *)last->GetData();
 
@@ -1097,5 +1097,5 @@
   wxNode *first = m_lineControlPoints->GetFirst();
-  wxRealPoint *first_point = (wxRealPoint *)first->GetData();
+  /* wxRealPoint *first_point = */ (wxRealPoint *)first->GetData();
   wxNode *last = m_lineControlPoints->GetLast();
-  wxRealPoint *last_point = (wxRealPoint *)last->GetData();
+  /* wxRealPoint *last_point = */ (wxRealPoint *)last->GetData();
 
@@ -1242,3 +1242,3 @@
 
-void wxLineShape::OnDragLeft(bool draw, double x, double y, int keys, int attachment)
+void wxLineShape::OnDragLeft(bool WXUNUSED(draw), double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1246,3 +1246,3 @@
 
-void wxLineShape::OnBeginDragLeft(double x, double y, int keys, int attachment)
+void wxLineShape::OnBeginDragLeft(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1250,3 +1250,3 @@
 
-void wxLineShape::OnEndDragLeft(double x, double y, int keys, int attachment)
+void wxLineShape::OnEndDragLeft(double WXUNUSED(x), double WXUNUSED(y), int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1373,19 +1373,19 @@
   if (m_from)
-    clause->AddAttributeValue("from", m_from->GetId());
+    clause->AddAttributeValue(_T("from"), m_from->GetId());
   if (m_to)
-    clause->AddAttributeValue("to", m_to->GetId());
+    clause->AddAttributeValue(_T("to"), m_to->GetId());
 
   if (m_attachmentTo != 0)
-    clause->AddAttributeValue("attachment_to", (long)m_attachmentTo);
+    clause->AddAttributeValue(_T("attachment_to"), (long)m_attachmentTo);
   if (m_attachmentFrom != 0)
-    clause->AddAttributeValue("attachment_from", (long)m_attachmentFrom);
+    clause->AddAttributeValue(_T("attachment_from"), (long)m_attachmentFrom);
 
   if (m_alignmentStart != 0)
-    clause->AddAttributeValue("align_start", (long)m_alignmentStart);
+    clause->AddAttributeValue(_T("align_start"), (long)m_alignmentStart);
   if (m_alignmentEnd != 0)
-    clause->AddAttributeValue("align_end", (long)m_alignmentEnd);
+    clause->AddAttributeValue(_T("align_end"), (long)m_alignmentEnd);
 
-  clause->AddAttributeValue("is_spline", (long)m_isSpline);
+  clause->AddAttributeValue(_T("is_spline"), (long)m_isSpline);
   if (m_maintainStraightLines)
-    clause->AddAttributeValue("keep_lines_straight", (long)m_maintainStraightLines);
+    clause->AddAttributeValue(_T("keep_lines_straight"), (long)m_maintainStraightLines);
 
@@ -1406,3 +1406,3 @@
   }
-  clause->AddAttributeValue("controls", list);
+  clause->AddAttributeValue(_T("controls"), list);
 
@@ -1434,3 +1434,3 @@
     }
-    clause->AddAttributeValue("arrows", arrow_list);
+    clause->AddAttributeValue(_T("arrows"), arrow_list);
   }
@@ -1457,3 +1457,3 @@
     wxShapeRegion *newRegion = new wxShapeRegion;
-    newRegion->SetName("Middle");
+    newRegion->SetName(_T("Middle"));
     newRegion->SetSize(150, 50);
@@ -1728,3 +1728,3 @@
 // to override sizing behaviour.
-void wxLineShape::OnSizingDragLeft(wxControlPoint* pt, bool draw, double x, double y, int keys, int attachment)
+void wxLineShape::OnSizingDragLeft(wxControlPoint* pt, bool WXUNUSED(draw), double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1770,3 +1770,3 @@
 
-void wxLineShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxLineShape::OnSizingBeginDragLeft(wxControlPoint* pt, double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -1818,3 +1818,3 @@
 
-void wxLineShape::OnSizingEndDragLeft(wxControlPoint* pt, double x, double y, int keys, int attachment)
+void wxLineShape::OnSizingEndDragLeft(wxControlPoint* pt, double x, double y, int WXUNUSED(keys), int WXUNUSED(attachment))
 {
@@ -2441,3 +2441,3 @@
 
-void wxLabelShape::OnDrawContents(wxDC& dc)
+void wxLabelShape::OnDrawContents(wxDC& WXUNUSED(dc))
 {
@@ -2465,3 +2465,3 @@
 
-bool wxLineShape::OnLabelMovePre(wxDC& dc, wxLabelShape* labelShape, double x, double y, double old_x, double old_y, bool display)
+bool wxLineShape::OnLabelMovePre(wxDC& dc, wxLabelShape* labelShape, double x, double y, double WXUNUSED(old_x), double WXUNUSED(old_y), bool WXUNUSED(display))
 {
diff -bu1 -r wxWindows/contrib/src/ogl/mfutils.cpp wxWin/contrib/src/ogl/mfutils.cpp
--- wxWindows/contrib/src/ogl/mfutils.cpp	2003-07-28 12:14:15.000000000 +0200
+++ wxWin/contrib/src/ogl/mfutils.cpp	2003-08-20 18:16:26.000000000 +0200
@@ -61,3 +61,6 @@
   c = getc(fp);  c1 = getc(fp);
+#if 0
+   // this is not used value, no need to execute it
   int testRes = ((unsigned int) c) + (((unsigned int) c1) << 8);
+#endif
   unsigned long res1 = ((unsigned int) c) + (((unsigned int) c1) << 8);
@@ -177,3 +180,3 @@
   {
-    long hmf = getshort(handle);
+    /* long hmf = */ getshort(handle);
     int iLeft, iTop, iRight, iBottom;
@@ -189,5 +192,5 @@
 
-    int inch = getshort(handle);
-    long reserved = getint(handle);
-    int checksum = getshort(handle);
+    /* int inch = */ getshort(handle);
+    /* long reserved = */ getint(handle);
+    /* int checksum = */ getshort(handle);
 /*
@@ -210,3 +213,3 @@
 
-  int mtHeaderSize = getshort(handle);
+  /* int mtHeaderSize = */ getshort(handle);
   int mtVersion = getshort(handle);
@@ -219,6 +222,6 @@
 
-  long mtSize = getint(handle);
-  int mtNoObjects = getshort(handle);
-  long mtMaxRecord = getint(handle);
-  int mtNoParameters = getshort(handle);
+  /* long mtSize = */ getint(handle);
+  /* int mtNoObjects = */ getshort(handle);
+  /* long mtMaxRecord = */ getint(handle);
+  /* int mtNoParameters = */ getshort(handle);
 
@@ -535,3 +538,3 @@
         int x = getshort(handle); // X:     2 bytes
-        int y = getshort(handle); // Y:     2 bytes
+        /* int y = */ getshort(handle); // Y:     2 bytes
         long colorref = getint(handle); // COLORREF 4 bytes
@@ -567,5 +570,5 @@
         int lfHeight = getshort(handle);    // 2 bytes
-        int lfWidth = getshort(handle);     // 2 bytes
-        int lfEsc = getshort(handle);       // 2 bytes
-        int lfOrient = getshort(handle);    // 2 bytes
+        /* int lfWidth = */ getshort(handle);     // 2 bytes
+        /* int lfEsc = */ getshort(handle);       // 2 bytes
+        /* int lfOrient = */ getshort(handle);    // 2 bytes
         int lfWeight = getshort(handle);    // 2 bytes
@@ -573,7 +576,7 @@
         char lfUnderline = getc(handle);    // 1 byte
-        char lfStrikeout = getc(handle);    // 1 byte
-        char lfCharSet = getc(handle);      // 1 byte
-        char lfOutPrecision = getc(handle); // 1 byte
-        char lfClipPrecision = getc(handle); // 1 byte
-        char lfQuality = getc(handle);      // 1 byte
+        /* char lfStrikeout = */ getc(handle);    // 1 byte
+        /* char lfCharSet = */ getc(handle);      // 1 byte
+        /* char lfOutPrecision = */ getc(handle); // 1 byte
+        /* char lfClipPrecision = */ getc(handle); // 1 byte
+        /* char lfQuality = */ getc(handle);      // 1 byte
         char lfPitchAndFamily = getc(handle);   // 1 byte (18th)
@@ -742,3 +745,3 @@
 
-bool wxXMetaFile::SetClipboard(int width, int height)
+bool wxXMetaFile::SetClipboard(int WXUNUSED(width), int WXUNUSED(height))
 {
diff -bu1 -r wxWindows/contrib/src/ogl/ogldiag.cpp wxWin/contrib/src/ogl/ogldiag.cpp
--- wxWindows/contrib/src/ogl/ogldiag.cpp	2003-07-28 12:14:15.000000000 +0200
+++ wxWin/contrib/src/ogl/ogldiag.cpp	2003-08-20 18:15:28.000000000 +0200
@@ -221,3 +221,3 @@
   // First write the diagram type
-  wxExpr *header = new wxExpr("diagram");
+  wxExpr *header = new wxExpr(_T("diagram"));
   OnHeaderSave(*database, *header);
@@ -235,5 +235,5 @@
       if (shape->IsKindOf(CLASSINFO(wxLineShape)))
-        expr = new wxExpr("line");
+        expr = new wxExpr(_T("line"));
        else
-        expr = new wxExpr("shape");
+        expr = new wxExpr(_T("shape"));
 
@@ -294,3 +294,3 @@
 
-  wxExprDatabase database(wxExprInteger, "id");
+  wxExprDatabase database(wxExprInteger, _T("id"));
   if (!database.Read(filename))
@@ -304,3 +304,3 @@
   database.BeginFind();
-  wxExpr *header = database.FindClauseByFunctor("diagram");
+  wxExpr *header = database.FindClauseByFunctor(_T("diagram"));
 
@@ -315,3 +315,3 @@
     long id = -1;
-    clause->GetAttributeValue("id", id);
+    clause->GetAttributeValue(_T("id"), id);
     wxRegisterId(id);
@@ -335,3 +335,3 @@
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor("shape");
+  wxExpr *clause = database.FindClauseByFunctor(_T("shape"));
   while (clause)
@@ -357,3 +357,3 @@
       {
-        wxExpr *parentExpr = database.HashFind("shape", parentId);
+        wxExpr *parentExpr = database.HashFind(_T("shape"), parentId);
         if (parentExpr && parentExpr->GetClientData())
@@ -371,3 +371,3 @@
 
-    clause = database.FindClauseByFunctor("shape");
+    clause = database.FindClauseByFunctor(_T("shape"));
   }
@@ -379,3 +379,3 @@
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor("line");
+  wxExpr *clause = database.FindClauseByFunctor(_T("line"));
   while (clause)
@@ -385,4 +385,4 @@
 
-    clause->GetAttributeValue("type", type);
-    clause->GetAttributeValue("parent", parentId);
+    clause->GetAttributeValue(_T("type"), type);
+    clause->GetAttributeValue(_T("parent"), parentId);
     wxClassInfo *classInfo = wxClassInfo::FindClass(type);
@@ -397,6 +397,6 @@
       long image_to = -1; long image_from = -1;
-      clause->GetAttributeValue("to", image_to);
-      clause->GetAttributeValue("from", image_from);
+      clause->GetAttributeValue(_T("to"), image_to);
+      clause->GetAttributeValue(_T("from"), image_from);
 
-      wxExpr *image_to_expr = database.HashFind("shape", image_to);
+      wxExpr *image_to_expr = database.HashFind(_T("shape"), image_to);
 
@@ -406,3 +406,3 @@
       }
-      wxExpr *image_from_expr = database.HashFind("shape", image_from);
+      wxExpr *image_from_expr = database.HashFind(_T("shape"), image_from);
 
@@ -428,3 +428,3 @@
 
-    clause = database.FindClauseByFunctor("line");
+    clause = database.FindClauseByFunctor(_T("line"));
   }
@@ -438,3 +438,3 @@
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor("shape");
+  wxExpr *clause = database.FindClauseByFunctor(_T("shape"));
   while (clause)
@@ -448,3 +448,3 @@
       // Find the list of divisions in the composite
-      clause->GetAttributeValue("divisions", &divisionExpr);
+      clause->GetAttributeValue(_T("divisions"), &divisionExpr);
       if (divisionExpr)
@@ -456,3 +456,3 @@
           long divisionId = idExpr->IntegerValue();
-          wxExpr *childExpr = database.HashFind("shape", divisionId);
+          wxExpr *childExpr = database.HashFind(_T("shape"), divisionId);
           if (childExpr && childExpr->GetClientData())
@@ -467,9 +467,9 @@
             long bottomSideId = -1;
-            childExpr->GetAttributeValue("left_side", leftSideId);
-            childExpr->GetAttributeValue("top_side", topSideId);
-            childExpr->GetAttributeValue("right_side", rightSideId);
-            childExpr->GetAttributeValue("bottom_side", bottomSideId);
+            childExpr->GetAttributeValue(_T("left_side"), leftSideId);
+            childExpr->GetAttributeValue(_T("top_side"), topSideId);
+            childExpr->GetAttributeValue(_T("right_side"), rightSideId);
+            childExpr->GetAttributeValue(_T("bottom_side"), bottomSideId);
             if (leftSideId > -1)
             {
-              wxExpr *leftExpr = database.HashFind("shape", leftSideId);
+              wxExpr *leftExpr = database.HashFind(_T("shape"), leftSideId);
               if (leftExpr && leftExpr->GetClientData())
@@ -482,3 +482,3 @@
             {
-              wxExpr *topExpr = database.HashFind("shape", topSideId);
+              wxExpr *topExpr = database.HashFind(_T("shape"), topSideId);
               if (topExpr && topExpr->GetClientData())
@@ -491,3 +491,3 @@
             {
-              wxExpr *rightExpr = database.HashFind("shape", rightSideId);
+              wxExpr *rightExpr = database.HashFind(_T("shape"), rightSideId);
               if (rightExpr && rightExpr->GetClientData())
@@ -500,3 +500,3 @@
             {
-              wxExpr *bottomExpr = database.HashFind("shape", bottomSideId);
+              wxExpr *bottomExpr = database.HashFind(_T("shape"), bottomSideId);
               if (bottomExpr && bottomExpr->GetClientData())
@@ -514,3 +514,3 @@
 
-    clause = database.FindClauseByFunctor("shape");
+    clause = database.FindClauseByFunctor(_T("shape"));
   }
@@ -519,3 +519,3 @@
 // Allow for modifying file
-bool wxDiagram::OnDatabaseLoad(wxExprDatabase& db)
+bool wxDiagram::OnDatabaseLoad(wxExprDatabase& WXUNUSED(db))
 {
@@ -524,3 +524,3 @@
 
-bool wxDiagram::OnDatabaseSave(wxExprDatabase& db)
+bool wxDiagram::OnDatabaseSave(wxExprDatabase& WXUNUSED(db))
 {
@@ -540,3 +540,3 @@
       wxShape *childShape = (wxShape *)node->GetData();
-      wxExpr *childExpr = new wxExpr("shape");
+      wxExpr *childExpr = new wxExpr(_T("shape"));
       OnShapeSave(db, *childShape, *childExpr);
@@ -549,3 +549,3 @@
 
-bool wxDiagram::OnShapeLoad(wxExprDatabase& db, wxShape& shape, wxExpr& expr)
+bool wxDiagram::OnShapeLoad(wxExprDatabase& WXUNUSED(db), wxShape& shape, wxExpr& expr)
 {
@@ -555,3 +555,3 @@
 
-bool wxDiagram::OnHeaderSave(wxExprDatabase& db, wxExpr& expr)
+bool wxDiagram::OnHeaderSave(wxExprDatabase& WXUNUSED(db), wxExpr& WXUNUSED(expr))
 {
@@ -560,3 +560,3 @@
 
-bool wxDiagram::OnHeaderLoad(wxExprDatabase& db, wxExpr& expr)
+bool wxDiagram::OnHeaderLoad(wxExprDatabase& WXUNUSED(db), wxExpr& WXUNUSED(expr))
 {
@@ -669,3 +669,3 @@
 
-void wxLineCrossings::DrawCrossings(wxDiagram& diagram, wxDC& dc)
+void wxLineCrossings::DrawCrossings(wxDiagram& WXUNUSED(diagram), wxDC& dc)
 {
diff -bu1 -r wxWindows/contrib/src/ogl/oglmisc.cpp wxWin/contrib/src/ogl/oglmisc.cpp
--- wxWindows/contrib/src/ogl/oglmisc.cpp	2003-07-28 12:14:15.000000000 +0200
+++ wxWin/contrib/src/ogl/oglmisc.cpp	2003-08-20 19:37:15.000000000 +0200
@@ -85,2 +85,3 @@
     oglBuffer = NULL;
+
     if (g_oglBullseyeCursor)
@@ -342,3 +343,3 @@
 void oglGetCentredTextExtent(wxDC& dc, wxList *text_list,
-                              double m_xpos, double m_ypos, double width, double height,
+                              double WXUNUSED(m_xpos), double WXUNUSED(m_ypos), double WXUNUSED(width), double WXUNUSED(height),
                               double *actual_width, double *actual_height)
@@ -379,3 +380,3 @@
 // Interpret %n and 10 or 13 as a new line.
-wxStringList *oglFormatText(wxDC& dc, const wxString& text, double width, double height, int formatMode)
+wxStringList *oglFormatText(wxDC& dc, const wxString& text, double width, double WXUNUSED(height), int formatMode)
 {

 	  	 

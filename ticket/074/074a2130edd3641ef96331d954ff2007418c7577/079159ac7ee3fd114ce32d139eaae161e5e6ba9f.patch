Index: include/wx/hyperlink.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/hyperlink.h,v
retrieving revision 1.5
diff -u -r1.5 hyperlink.h
--- include/wx/hyperlink.h	2006/06/08 18:27:43	1.5
+++ include/wx/hyperlink.h	2006/08/28 18:31:07
@@ -23,7 +23,10 @@
 // ----------------------------------------------------------------------------
 
 #define wxHL_CONTEXTMENU        0x0001
-#define wxHL_DEFAULT_STYLE      wxHL_CONTEXTMENU|wxNO_BORDER
+#define wxHL_ALIGN_LEFT         0x0002
+#define wxHL_ALIGN_RIGHT        0x0004
+#define wxHL_ALIGN_CENTRE       0x0008
+#define wxHL_DEFAULT_STYLE      (wxHL_CONTEXTMENU|wxNO_BORDER|wxHL_ALIGN_CENTRE)
 
 extern WXDLLIMPEXP_DATA_ADV(const wxChar) wxHyperlinkCtrlNameStr[];
 
@@ -96,6 +99,12 @@
     // Renders the hyperlink.
     void OnPaint(wxPaintEvent& event);
 
+    // Returns the wxRect of the label of this hyperlink.
+    // This is different from the clientsize's rectangle when
+    // clientsize != bestsize and this rectangle is influenced
+    // by the alignment of the label (wxHL_ALIGN_*).
+    wxRect GetLabelRect() const;
+
     // If the click originates inside the bounding box of the label,
     // a flag is set so that an event will be fired when the left
     // button is released.
@@ -108,13 +117,16 @@
 
     // Changes the cursor to a hand, if the mouse is inside the label's
     // bounding box.
-    void OnEnterWindow(wxMouseEvent& event);
+    void OnMotion(wxMouseEvent& event);
 
     // Changes the cursor back to the default, if necessary.
     void OnLeaveWindow(wxMouseEvent& event);
 
     // handles "Copy URL" menuitem
     void OnPopUpCopy(wxCommandEvent& event);
+
+    // Refreshes the control to update label's position if necessary
+    void OnSize(wxSizeEvent& event);
 
 
     // overridden base class virtuals
Index: src/generic/hyperlink.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/hyperlink.cpp,v
retrieving revision 1.8
diff -u -r1.8 hyperlink.cpp
--- src/generic/hyperlink.cpp	2006/07/27 12:56:58	1.8
+++ src/generic/hyperlink.cpp	2006/08/28 18:35:04
@@ -62,8 +62,9 @@
     EVT_LEFT_DOWN(wxHyperlinkCtrl::OnLeftDown)
     EVT_LEFT_UP(wxHyperlinkCtrl::OnLeftUp)
     EVT_RIGHT_UP(wxHyperlinkCtrl::OnRightUp)
-    EVT_ENTER_WINDOW(wxHyperlinkCtrl::OnEnterWindow)
+    EVT_MOTION(wxHyperlinkCtrl::OnMotion)
     EVT_LEAVE_WINDOW(wxHyperlinkCtrl::OnLeaveWindow)
+    EVT_SIZE(wxHyperlinkCtrl::OnSize)
 
     // for the context menu
     EVT_MENU(wxHYPERLINKCTRL_POPUP_COPY_ID, wxHyperlinkCtrl::OnPopUpCopy)
@@ -76,6 +77,14 @@
     wxASSERT_MSG(!url.empty() || !label.empty(),
                  wxT("Both URL and label are empty ?"));
 
+#ifdef __WXDEBUG__
+    int alignment = (int)((style & wxHL_ALIGN_LEFT) != 0) +
+                    (int)((style & wxHL_ALIGN_CENTRE) != 0) +
+                    (int)((style & wxHL_ALIGN_RIGHT) != 0);
+    wxASSERT_MSG(alignment == 1, 
+        wxT("Specify exactly one align flag!")); 
+#endif
+
     if (!wxControl::Create(parent, id, pos, size, style, wxDefaultValidator, name))
         return false;
 
@@ -90,9 +99,6 @@
     else
         SetLabel(label);
 
-    // by default the cursor to use in this window is wxCURSOR_HAND
-    SetCursor(wxCursor(wxCURSOR_HAND));
-
     m_rollover = false;
     m_clicking = false;
     m_visited = false;
@@ -159,6 +165,24 @@
     delete menuPopUp;
 }
 
+wxRect wxHyperlinkCtrl::GetLabelRect() const
+{
+    // our best size is always the size of the label without borders
+    wxSize c(GetClientSize()), b(GetBestSize());
+    wxPoint offset;
+
+    // the label is always centered vertically
+    offset.y = (c.GetHeight()-b.GetHeight())/2;
+    
+    if (HasFlag(wxHL_ALIGN_CENTRE))
+        offset.x = (c.GetWidth()-b.GetWidth())/2;
+    else if (HasFlag(wxHL_ALIGN_RIGHT))
+        offset.x = c.GetWidth()-b.GetWidth();
+    else if (HasFlag(wxHL_ALIGN_LEFT))
+        offset.x = 0;
+    return wxRect(offset, b);
+}
+
 
 
 // ----------------------------------------------------------------------------
@@ -171,17 +195,21 @@
     dc.SetFont(GetFont());
     dc.SetTextForeground(GetForegroundColour());
     dc.SetTextBackground(GetBackgroundColour());
-    dc.DrawText(GetLabel(), 0, 0);
+
+    dc.DrawText(GetLabel(), GetLabelRect().GetTopLeft());
 }
 
-void wxHyperlinkCtrl::OnLeftDown(wxMouseEvent& WXUNUSED(event))
+void wxHyperlinkCtrl::OnLeftDown(wxMouseEvent& event)
 {
-    m_clicking = true;
+    // the left click must start from the hyperlink rect
+    m_clicking = GetLabelRect().Inside(event.GetPosition());
 }
 
-void wxHyperlinkCtrl::OnLeftUp(wxMouseEvent& WXUNUSED(event))
+void wxHyperlinkCtrl::OnLeftUp(wxMouseEvent& event)
 {
-    if (!m_clicking) return;
+    // the click must be started and ended in the hyperlink rect
+    if (!m_clicking || !GetLabelRect().Inside(event.GetPosition())) 
+        return;
 
     SetForegroundColour(m_visitedColour);
     m_visited = true;
@@ -197,20 +225,40 @@
 void wxHyperlinkCtrl::OnRightUp(wxMouseEvent& event)
 {
     if( GetWindowStyle() & wxHL_CONTEXTMENU )
-        DoContextMenu(wxPoint(event.m_x, event.m_y));
+        if ( GetLabelRect().Inside(event.GetPosition()) )
+            DoContextMenu(wxPoint(event.m_x, event.m_y));
 }
 
-void wxHyperlinkCtrl::OnEnterWindow(wxMouseEvent& WXUNUSED(event))
+void wxHyperlinkCtrl::OnMotion(wxMouseEvent& event)
 {
-    SetForegroundColour(m_hoverColour);
-    m_rollover = true;
-    Refresh();
+    wxRect textrc = GetLabelRect();
+
+    if (textrc.Inside(event.GetPosition()))
+    {
+        SetCursor(wxCursor(wxCURSOR_HAND));
+        SetForegroundColour(m_hoverColour);
+        m_rollover = true;
+        Refresh();
+    }
+    else if (m_rollover)
+    {
+        SetCursor(*wxSTANDARD_CURSOR);
+        SetForegroundColour(!m_visited ? m_normalColour : m_visitedColour);
+        m_rollover = false;
+        Refresh();
+    }
 }
 
-void wxHyperlinkCtrl::OnLeaveWindow(wxMouseEvent& WXUNUSED(event))
+void wxHyperlinkCtrl::OnLeaveWindow(wxMouseEvent& WXUNUSED(event) )
 {
+    // NB: when the label rect and the client size rect have the same
+    //     height this function is indispensable to remove the "rollover"
+    //     effect as the OnMotion() event handler could not be called
+    //     in that case moving the mouse out of the label vertically...
+
     if (m_rollover)
     {
+        SetCursor(*wxSTANDARD_CURSOR);
         SetForegroundColour(!m_visited ? m_normalColour : m_visitedColour);
         m_rollover = false;
         Refresh();
@@ -227,6 +275,13 @@
     wxTheClipboard->SetData( data );
     wxTheClipboard->Close();
 #endif // wxUSE_CLIPBOARD
+}
+
+void wxHyperlinkCtrl::OnSize(wxSizeEvent& WXUNUSED(event))
+{
+    // update the position of the label in the screen respecting
+    // the selected align flag
+    Refresh();
 }
 
 #endif // wxUSE_HYPERLINKCTRL
Index: docs/latex/wx/hyperlink.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/hyperlink.tex,v
retrieving revision 1.5
diff -u -r1.5 hyperlink.tex
--- docs/latex/wx/hyperlink.tex	2006/07/02 01:30:14	1.5
+++ docs/latex/wx/hyperlink.tex	2006/08/08 22:05:27
@@ -39,8 +39,11 @@
 
 \twocolwidtha{7cm}
 \begin{twocollist}\itemsep=0pt
+\twocolitem{\windowstyle{wxHL\_ALIGN\_LEFT}}{Align the text to the left.}
+\twocolitem{\windowstyle{wxHL\_ALIGN\_RIGHT}}{Align the text to the right.}
+\twocolitem{\windowstyle{wxHL\_ALIGN\_CENTRE}}{Center the text (horizontally).}
 \twocolitem{\windowstyle{wxHL\_CONTEXTMENU}}{Pop up a context menu when the hyperlink is right-clicked. The context menu contains a \texttt{``Copy URL"} menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control.}
-\twocolitem{\windowstyle{wxHL\_DEFAULT\_STYLE}}{The default style for wxHyperlinkCtrl: \texttt{wxNO\_BORDER|wxHL\_CONTEXTMENU}.}
+\twocolitem{\windowstyle{wxHL\_DEFAULT\_STYLE}}{The default style for wxHyperlinkCtrl: \texttt{wxNO\_BORDER|wxHL\_CONTEXTMENU|wxHL\_ALIGN\_CENTRE}.}
 \end{twocollist}
 
 See also \helpref{window styles overview}{windowstyles}.

 	  	 

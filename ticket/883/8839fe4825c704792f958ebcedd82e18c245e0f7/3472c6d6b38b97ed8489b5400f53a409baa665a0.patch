Index: wxWidgets-2.8/setup.h.in
===================================================================
--- wxWidgets-2.8/setup.h.in	(revision 53991)
+++ wxWidgets-2.8/setup.h.in	(working copy)
@@ -609,6 +609,10 @@
  */
 #undef HAVE_STD_STRING_COMPARE
 /*
+ * Define if your compiler has <tr1/unordered_map>
+ */
+#undef HAVE_TR1_HASH_MAP
+/*
  * Define if your compiler has <hash_map>
  */
 #undef HAVE_HASH_MAP
@@ -617,6 +621,10 @@
  */
 #undef HAVE_EXT_HASH_MAP
 /*
+ * Define if your compiler has std::tr1::unordered_map/unordered_set
+ */
+#undef HAVE_GNU_TR1_HASH_MAP
+/*
  * Define if your compiler has std::hash_map/hash_set
  */
 #undef HAVE_STD_HASH_MAP
Index: wxWidgets-2.8/include/wx/hashmap.h
===================================================================
--- wxWidgets-2.8/include/wx/hashmap.h	(revision 53991)
+++ wxWidgets-2.8/include/wx/hashmap.h	(working copy)
@@ -14,27 +14,36 @@
 
 #include "wx/string.h"
 
-#if (defined(HAVE_EXT_HASH_MAP) || defined(HAVE_HASH_MAP)) \
-    && (defined(HAVE_GNU_CXX_HASH_MAP) || defined(HAVE_STD_HASH_MAP))
+#if (defined(HAVE_EXT_HASH_MAP) || defined(HAVE_HASH_MAP) || defined(HAVE_TR1_HASH_MAP)) \
+    && (defined(HAVE_GNU_CXX_HASH_MAP) || defined(HAVE_STD_HASH_MAP) || HAVE_GNU_TR1_HASH_MAP)
     #define HAVE_STL_HASH_MAP
 #endif
 
 #if wxUSE_STL && defined(HAVE_STL_HASH_MAP)
 
-#if defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_TR1_HASH_MAP)
+    #include <tr1/unordered_map>
+#elif defined(HAVE_EXT_HASH_MAP)
     #include <ext/hash_map>
 #elif defined(HAVE_HASH_MAP)
     #include <hash_map>
 #endif
 
-#if defined(HAVE_GNU_CXX_HASH_MAP)
+#if defined(HAVE_GNU_TR1_HASH_MAP)
+    #define WX_HASH_MAP_NAMESPACE std::tr1
+#elif defined(HAVE_GNU_CXX_HASH_MAP)
     #define WX_HASH_MAP_NAMESPACE __gnu_cxx
 #elif defined(HAVE_STD_HASH_MAP)
     #define WX_HASH_MAP_NAMESPACE std
 #endif
 
+#if defined(HAVE_TR1_HASH_MAP)
 #define _WX_DECLARE_HASH_MAP( KEY_T, VALUE_T, HASH_T, KEY_EQ_T, CLASSNAME, CLASSEXP ) \
+    typedef WX_HASH_MAP_NAMESPACE::unordered_map< KEY_T, VALUE_T, HASH_T, KEY_EQ_T > CLASSNAME
+#else
+#define _WX_DECLARE_HASH_MAP( KEY_T, VALUE_T, HASH_T, KEY_EQ_T, CLASSNAME, CLASSEXP ) \
     typedef WX_HASH_MAP_NAMESPACE::hash_map< KEY_T, VALUE_T, HASH_T, KEY_EQ_T > CLASSNAME
+#endif
 
 #else // !wxUSE_STL || !defined(HAVE_STL_HASH_MAP)
 
Index: wxWidgets-2.8/include/wx/hashset.h
===================================================================
--- wxWidgets-2.8/include/wx/hashset.h	(revision 53991)
+++ wxWidgets-2.8/include/wx/hashset.h	(working copy)
@@ -16,15 +16,21 @@
 
 #if wxUSE_STL && defined(HAVE_STL_HASH_MAP)
 
-#if defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_TR1_HASH_MAP)
+    #include <tr1/unordered_set>
+#elif defined(HAVE_EXT_HASH_MAP)
     #include <ext/hash_set>
 #elif defined(HAVE_HASH_MAP)
     #include <hash_set>
 #endif
 
+#if defined(HAVE_TR1_HASH_MAP)
 #define _WX_DECLARE_HASH_SET( KEY_T, HASH_T, KEY_EQ_T, CLASSNAME, CLASSEXP )\
+    typedef WX_HASH_MAP_NAMESPACE::unordered_set< KEY_T, HASH_T, KEY_EQ_T > CLASSNAME
+#else
+#define _WX_DECLARE_HASH_SET( KEY_T, HASH_T, KEY_EQ_T, CLASSNAME, CLASSEXP )\
     typedef WX_HASH_MAP_NAMESPACE::hash_set< KEY_T, HASH_T, KEY_EQ_T > CLASSNAME
-
+#endif
 #else // !wxUSE_STL || !defined(HAVE_STL_HASH_MAP)
 
 // this is a complex way of defining an easily inlineable identity function...
Index: wxWidgets-2.8/configure.in
===================================================================
--- wxWidgets-2.8/configure.in	(revision 53991)
+++ wxWidgets-2.8/configure.in	(working copy)
@@ -2500,6 +2500,27 @@
         AC_DEFINE(HAVE_STD_STRING_COMPARE)
     fi
 
+    dnl check for TR1 unordered_map and unordered_set headers
+    AC_CHECK_HEADER([tr1/unordered_map],
+        [AC_CACHE_CHECK([for TR1 unordered_map and unordered_set],
+            wx_cv_class_stdtr1mapset,
+            [AC_TRY_COMPILE([#include <tr1/unordered_map>
+                #include <tr1/unordered_set>],
+                [std::tr1::unordered_map<double*, char*, std::tr1::hash<double*>, std::equal_to<double*> > test1;
+                 std::tr1::unordered_set<char*, std::tr1::hash<char*>, std::equal_to<char*> > test2;],
+                wx_cv_class_stdtr1mapset=yes,
+                wx_cv_class_stdtr1mapset=no)
+            ]
+        )],
+        [],
+        [ ]
+    )
+
+    if test "$wx_cv_class_stdtr1mapset" = yes; then
+        AC_DEFINE(HAVE_TR1_HASH_MAP)
+        AC_DEFINE(HAVE_GNU_TR1_HASH_MAP)
+    fi
+
     dnl check for hash_map and hash_set headers
     AC_CHECK_HEADER([hash_map],
         [AC_CACHE_CHECK([for standard hash_map and hash_set],

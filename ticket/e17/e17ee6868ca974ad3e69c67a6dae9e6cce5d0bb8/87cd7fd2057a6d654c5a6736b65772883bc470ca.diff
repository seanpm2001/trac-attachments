diff --git a/build/bakefiles/files.bkl b/build/bakefiles/files.bkl
index 2f82756..f43b05f 100644
--- a/build/bakefiles/files.bkl
+++ b/build/bakefiles/files.bkl
@@ -128,6 +131,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/msw/dde.cpp
     src/msw/dir.cpp
     src/msw/dlmsw.cpp
+    src/msw/evtloopconsole.cpp
     src/msw/mimetype.cpp
     src/msw/power.cpp
     src/msw/regconf.cpp
@@ -142,7 +146,6 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/msw/fswatcher.cpp
 </set>
 <set var="BASE_AND_GUI_WIN32_SRC" hints="files">
-    src/msw/evtloop.cpp
     src/msw/main.cpp
     src/msw/mslu.cpp
     src/msw/volume.cpp
@@ -157,6 +160,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     wx/msw/crashrpt.h
     wx/msw/dde.h
     wx/msw/debughlp.h
+    wx/msw/evtloopconsole.h
     wx/msw/gccpriv.h
     wx/msw/libraries.h
     wx/msw/mimetype.h
@@ -1734,6 +1770,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/msw/dialog.cpp
     src/msw/dirdlg.cpp
     src/msw/dragimag.cpp
+    src/msw/evtloop.cpp
     src/msw/filedlg.cpp
     src/msw/frame.cpp
     src/msw/gauge.cpp
diff --git a/include/wx/evtloop.h b/include/wx/evtloop.h
index 51cfd8e..1512a85 100644
--- a/include/wx/evtloop.h
+++ b/include/wx/evtloop.h
@@ -184,7 +184,7 @@ protected:
     wxDECLARE_NO_COPY_CLASS(wxEventLoopBase);
 };
 
-#if defined(__WXMSW__) || defined(__WXMAC__) || defined(__WXDFB__) || (defined(__UNIX__) && !defined(__WXOSX__))
+#if defined(__WINDOWS__) || defined(__WXMAC__) || defined(__WXDFB__) || (defined(__UNIX__) && !defined(__WXOSX__))
 
 // this class can be used to implement a standard event loop logic using
 // Pending() and Dispatch()
@@ -233,10 +233,7 @@ private:
 // integration with MFC) but currently this is not done for all ports yet (e.g.
 // wxX11) so fall back to the old wxGUIEventLoop definition below for them
 
-#if defined(__WXMSW__)
-    // this header defines both console and GUI loops for MSW
-    #include "wx/msw/evtloop.h"
-#elif defined(__WXOSX__)
+#if defined(__WXOSX__)
     // CoreFoundation-based event loop is currently in wxBase so include it in
     // any case too (although maybe it actually shouldn't be there at all)
     #include "wx/osx/evtloop.h"
@@ -244,7 +241,9 @@ private:
 
 // include the appropriate header defining wxGUIEventLoop
 
-#if defined(__WXCOCOA__)
+#if defined(__WXMSW__)
+    #include "wx/msw/evtloop.h"
+#elif defined(__WXCOCOA__)
     #include "wx/cocoa/evtloop.h"
 #elif defined(__WXDFB__)
     #include "wx/dfb/evtloop.h"
@@ -310,6 +309,8 @@ protected:
 // include the header defining wxConsoleEventLoop for Unix systems
 #if defined(__UNIX__) && !defined(__WXMSW__)
 #include "wx/unix/evtloop.h"
+#elif defined(__WINDOWS__)
+#include "wx/msw/evtloopconsole.h"
 #endif
 
 #if wxUSE_GUI
@@ -319,7 +320,7 @@ protected:
 #else // !wxUSE_GUI
     // we can't define wxEventLoop differently in GUI and base libraries so use
     // a #define to still allow writing wxEventLoop in the user code
-    #if wxUSE_CONSOLE_EVENTLOOP && (defined(__WXMSW__) || defined(__UNIX__))
+    #if wxUSE_CONSOLE_EVENTLOOP && (defined(__WINDOWS__) || defined(__UNIX__))
         #define wxEventLoop wxConsoleEventLoop
     #else // we still must define it somehow for the code below...
         #define wxEventLoop wxEventLoopBase
diff --git a/include/wx/msw/evtloop.h b/include/wx/msw/evtloop.h
index 5c89e30..e7afd91 100644
--- a/include/wx/msw/evtloop.h
+++ b/include/wx/msw/evtloop.h
@@ -1,6 +1,6 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Name:        wx/msw/evtloop.h
-// Purpose:     wxEventLoop class for MSW
+// Purpose:     wxEventLoop class for wxMSW port
 // Author:      Vadim Zeitlin
 // Modified by:
 // Created:     2004-07-31
@@ -12,36 +12,15 @@
 #ifndef _WX_MSW_EVTLOOP_H_
 #define _WX_MSW_EVTLOOP_H_
 
-#if wxUSE_GUI
 #include "wx/dynarray.h"
 #include "wx/msw/wrapwin.h"
 #include "wx/window.h"
-#endif
+#include "wx/msw/evtloopconsole.h" // for wxMSWEventLoopBase
 
 // ----------------------------------------------------------------------------
 // wxEventLoop
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_BASE wxMSWEventLoopBase : public wxEventLoopManual
-{
-public:
-    wxMSWEventLoopBase();
-
-    // implement base class pure virtuals
-    virtual bool Pending() const;
-
-protected:
-    // get the next message from queue and return true or return false if we
-    // got WM_QUIT or an error occurred
-    bool GetNextMessage(WXMSG *msg);
-
-    // same as above but with a timeout and return value can be -1 meaning that
-    // time out expired in addition to
-    int GetNextMessageTimeout(WXMSG *msg, unsigned long timeout);
-};
-
-#if wxUSE_GUI
-
 WX_DECLARE_EXPORTED_OBJARRAY(MSG, wxMSGArray);
 
 class WXDLLIMPEXP_CORE wxGUIEventLoop : public wxMSWEventLoopBase
@@ -93,27 +72,4 @@ private:
     static wxWindowMSW *ms_winCritical;
 };
 
-#else // !wxUSE_GUI
-
-#if wxUSE_CONSOLE_EVENTLOOP
-
-class WXDLLIMPEXP_BASE wxConsoleEventLoop : public wxMSWEventLoopBase
-{
-public:
-    wxConsoleEventLoop() { }
-
-    // override/implement base class virtuals
-    virtual bool Dispatch();
-    virtual int DispatchTimeout(unsigned long timeout);
-    virtual void WakeUp();
-    virtual bool YieldFor(long WXUNUSED(eventsToProcess)) { return true; }
-
-    // MSW-specific function to process a single message
-    virtual void ProcessMessage(WXMSG *msg);
-};
-
-#endif // wxUSE_CONSOLE_EVENTLOOP
-
-#endif // wxUSE_GUI/!wxUSE_GUI
-
 #endif // _WX_MSW_EVTLOOP_H_
diff --git a/include/wx/msw/evtloopconsole.h b/include/wx/msw/evtloopconsole.h
new file mode 100644
index 0000000..fa4b5b1
--- /dev/null
+++ b/include/wx/msw/evtloopconsole.h
@@ -0,0 +1,52 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/evtloopconsole.h
+// Purpose:     wxConsoleEventLoop class for Windows
+// Author:      Vadim Zeitlin
+// Modified by:
+// Created:     2004-07-31
+// RCS-ID:      $Id$
+// Copyright:   (c) 2003-2004 Vadim Zeitlin <vadim@wxwindows.org>
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_MSW_EVTLOOPCONSOLE_H_
+#define _WX_MSW_EVTLOOPCONSOLE_H_
+
+class WXDLLIMPEXP_BASE wxMSWEventLoopBase : public wxEventLoopManual
+{
+public:
+    wxMSWEventLoopBase();
+
+    // implement base class pure virtuals
+    virtual bool Pending() const;
+
+protected:
+    // get the next message from queue and return true or return false if we
+    // got WM_QUIT or an error occurred
+    bool GetNextMessage(WXMSG *msg);
+
+    // same as above but with a timeout and return value can be -1 meaning that
+    // time out expired in addition to
+    int GetNextMessageTimeout(WXMSG *msg, unsigned long timeout);
+};
+
+#if wxUSE_CONSOLE_EVENTLOOP
+
+class WXDLLIMPEXP_BASE wxConsoleEventLoop : public wxMSWEventLoopBase
+{
+public:
+    wxConsoleEventLoop() { }
+
+    // override/implement base class virtuals
+    virtual bool Dispatch();
+    virtual int DispatchTimeout(unsigned long timeout);
+    virtual void WakeUp();
+    virtual bool YieldFor(long WXUNUSED(eventsToProcess)) { return true; }
+
+    // Windows-specific function to process a single message
+    virtual void ProcessMessage(WXMSG *msg);
+};
+
+#endif // wxUSE_CONSOLE_EVENTLOOP
+
+#endif // _WX_MSW_EVTLOOPCONSOLE_H_
diff --git a/src/msw/evtloop.cpp b/src/msw/evtloop.cpp
index 9734216..eb97f85 100644
--- a/src/msw/evtloop.cpp
+++ b/src/msw/evtloop.cpp
@@ -1,6 +1,6 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Name:        src/msw/evtloop.cpp
-// Purpose:     implements wxEventLoop for MSW
+// Purpose:     implements wxEventLoop for wxMSW port
 // Author:      Vadim Zeitlin
 // Modified by:
 // Created:     01.06.01
@@ -27,9 +27,7 @@
 #include "wx/evtloop.h"
 
 #ifndef WX_PRECOMP
-    #if wxUSE_GUI
-        #include "wx/window.h"
-    #endif
+    #include "wx/window.h"
     #include "wx/app.h"
     #include "wx/log.h"
 #endif //WX_PRECOMP
@@ -39,115 +37,15 @@
 #include "wx/msw/private.h"
 #include "wx/scopeguard.h"
 
-#if wxUSE_GUI
-    #include "wx/tooltip.h"
-    #if wxUSE_THREADS
-        // define the list of MSG strutures
-        WX_DECLARE_LIST(MSG, wxMsgList);
-
-        #include "wx/listimpl.cpp"
-
-        WX_DEFINE_LIST(wxMsgList)
-    #endif // wxUSE_THREADS
-#endif //wxUSE_GUI
-
-#if wxUSE_BASE
-
-// ============================================================================
-// wxMSWEventLoopBase implementation
-// ============================================================================
-
-// ----------------------------------------------------------------------------
-// ctor/dtor
-// ----------------------------------------------------------------------------
-
-wxMSWEventLoopBase::wxMSWEventLoopBase()
-{
-    m_shouldExit = false;
-    m_exitcode = 0;
-}
-
-// ----------------------------------------------------------------------------
-// wxEventLoop message processing dispatching
-// ----------------------------------------------------------------------------
-
-bool wxMSWEventLoopBase::Pending() const
-{
-    MSG msg;
-    return ::PeekMessage(&msg, 0, 0, 0, PM_NOREMOVE) != 0;
-}
-
-bool wxMSWEventLoopBase::GetNextMessage(WXMSG* msg)
-{
-    const BOOL rc = ::GetMessage(msg, NULL, 0, 0);
-
-    if ( rc == 0 )
-    {
-        // got WM_QUIT
-        return false;
-    }
-
-    if ( rc == -1 )
-    {
-        // should never happen, but let's test for it nevertheless
-        wxLogLastError(wxT("GetMessage"));
-
-        // still break from the loop
-        return false;
-    }
-
-    return true;
-}
-
-int wxMSWEventLoopBase::GetNextMessageTimeout(WXMSG *msg, unsigned long timeout)
-{
-    // MsgWaitForMultipleObjects() won't notice any input which was already
-    // examined (e.g. using PeekMessage()) but not yet removed from the queue
-    // so we need to remove any immediately messages manually
-    //
-    // NB: using MsgWaitForMultipleObjectsEx() could simplify the code here but
-    //     it is not available in very old Windows versions
-    if ( !::PeekMessage(msg, 0, 0, 0, PM_REMOVE) )
-    {
-        // we use this function just in order to not block longer than the
-        // given timeout, so we don't pass any handles to it at all
-        DWORD rc = ::MsgWaitForMultipleObjects
-                     (
-                        0, NULL,
-                        FALSE,
-                        timeout,
-                        QS_ALLINPUT
-                     );
-
-        switch ( rc )
-        {
-            default:
-                wxLogDebug("unexpected MsgWaitForMultipleObjects() return "
-                           "value %lu", rc);
-                // fall through
-
-            case WAIT_TIMEOUT:
-                return -1;
-
-            case WAIT_OBJECT_0:
-                if ( !::PeekMessage(msg, 0, 0, 0, PM_REMOVE) )
-                {
-                    // somehow it may happen that MsgWaitForMultipleObjects()
-                    // returns true but there are no messages -- just treat it
-                    // the same as timeout then
-                    return -1;
-                }
-                break;
-        }
-    }
-
-    return msg->message != WM_QUIT;
-}
-
+#include "wx/tooltip.h"
+#if wxUSE_THREADS
+    // define the list of MSG strutures
+    WX_DECLARE_LIST(MSG, wxMsgList);
 
-#endif // wxUSE_BASE
+    #include "wx/listimpl.cpp"
 
-#if wxUSE_GUI
+    WX_DEFINE_LIST(wxMsgList)
+#endif // wxUSE_THREADS
 
 // ============================================================================
 // GUI wxEventLoop implementation
@@ -553,52 +451,3 @@ bool wxGUIEventLoop::YieldFor(long eventsToProcess)
 
     return true;
 }
-
-
-#else // !wxUSE_GUI
-
-
-// ============================================================================
-// wxConsoleEventLoop implementation
-// ============================================================================
-
-#if wxUSE_CONSOLE_EVENTLOOP
-
-void wxConsoleEventLoop::WakeUp()
-{
-#if wxUSE_THREADS
-    wxWakeUpMainThread();
-#endif
-}
-
-void wxConsoleEventLoop::ProcessMessage(WXMSG *msg)
-{
-    ::DispatchMessage(msg);
-}
-
-bool wxConsoleEventLoop::Dispatch()
-{
-    MSG msg;
-    if ( !GetNextMessage(&msg) )
-        return false;
-
-    ProcessMessage(&msg);
-
-    return !m_shouldExit;
-}
-
-int wxConsoleEventLoop::DispatchTimeout(unsigned long timeout)
-{
-    MSG msg;
-    int rc = GetNextMessageTimeout(&msg, timeout);
-    if ( rc != 1 )
-        return rc;
-
-    ProcessMessage(&msg);
-
-    return !m_shouldExit;
-}
-
-#endif // wxUSE_CONSOLE_EVENTLOOP
-
-#endif //wxUSE_GUI
diff --git a/src/msw/evtloopconsole.cpp b/src/msw/evtloopconsole.cpp
new file mode 100644
index 0000000..f1538af
--- /dev/null
+++ b/src/msw/evtloopconsole.cpp
@@ -0,0 +1,161 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/msw/evtloopconsole.cpp
+// Purpose:     wxConsoleEventLoop class for Windows
+// Author:      Vadim Zeitlin
+// Modified by:
+// Created:     01.06.01
+// RCS-ID:      $Id$
+// Copyright:   (c) 2001 Vadim Zeitlin <zeitlin@dptmaths.ens-cachan.fr>
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#include "wx/evtloop.h"
+
+// ============================================================================
+// wxMSWEventLoopBase implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// ctor/dtor
+// ----------------------------------------------------------------------------
+
+wxMSWEventLoopBase::wxMSWEventLoopBase()
+{
+    m_shouldExit = false;
+    m_exitcode = 0;
+}
+
+// ----------------------------------------------------------------------------
+// wxEventLoop message processing dispatching
+// ----------------------------------------------------------------------------
+
+bool wxMSWEventLoopBase::Pending() const
+{
+    MSG msg;
+    return ::PeekMessage(&msg, 0, 0, 0, PM_NOREMOVE) != 0;
+}
+
+bool wxMSWEventLoopBase::GetNextMessage(WXMSG* msg)
+{
+    const BOOL rc = ::GetMessage(msg, NULL, 0, 0);
+
+    if ( rc == 0 )
+    {
+        // got WM_QUIT
+        return false;
+    }
+
+    if ( rc == -1 )
+    {
+        // should never happen, but let's test for it nevertheless
+        wxLogLastError(wxT("GetMessage"));
+
+        // still break from the loop
+        return false;
+    }
+
+    return true;
+}
+
+int wxMSWEventLoopBase::GetNextMessageTimeout(WXMSG *msg, unsigned long timeout)
+{
+    // MsgWaitForMultipleObjects() won't notice any input which was already
+    // examined (e.g. using PeekMessage()) but not yet removed from the queue
+    // so we need to remove any immediately messages manually
+    //
+    // NB: using MsgWaitForMultipleObjectsEx() could simplify the code here but
+    //     it is not available in very old Windows versions
+    if ( !::PeekMessage(msg, 0, 0, 0, PM_REMOVE) )
+    {
+        // we use this function just in order to not block longer than the
+        // given timeout, so we don't pass any handles to it at all
+        DWORD rc = ::MsgWaitForMultipleObjects
+                     (
+                        0, NULL,
+                        FALSE,
+                        timeout,
+                        QS_ALLINPUT
+                     );
+
+        switch ( rc )
+        {
+            default:
+                wxLogDebug("unexpected MsgWaitForMultipleObjects() return "
+                           "value %lu", rc);
+                // fall through
+
+            case WAIT_TIMEOUT:
+                return -1;
+
+            case WAIT_OBJECT_0:
+                if ( !::PeekMessage(msg, 0, 0, 0, PM_REMOVE) )
+                {
+                    // somehow it may happen that MsgWaitForMultipleObjects()
+                    // returns true but there are no messages -- just treat it
+                    // the same as timeout then
+                    return -1;
+                }
+                break;
+        }
+    }
+
+    return msg->message != WM_QUIT;
+}
+
+// ============================================================================
+// wxConsoleEventLoop implementation
+// ============================================================================
+
+#if wxUSE_CONSOLE_EVENTLOOP
+
+void wxConsoleEventLoop::WakeUp()
+{
+#if wxUSE_THREADS
+    wxWakeUpMainThread();
+#endif
+}
+
+void wxConsoleEventLoop::ProcessMessage(WXMSG *msg)
+{
+    ::DispatchMessage(msg);
+}
+
+bool wxConsoleEventLoop::Dispatch()
+{
+    MSG msg;
+    if ( !GetNextMessage(&msg) )
+        return false;
+
+    ProcessMessage(&msg);
+
+    return !m_shouldExit;
+}
+
+int wxConsoleEventLoop::DispatchTimeout(unsigned long timeout)
+{
+    MSG msg;
+    int rc = GetNextMessageTimeout(&msg, timeout);
+    if ( rc != 1 )
+        return rc;
+
+    ProcessMessage(&msg);
+
+    return !m_shouldExit;
+}
+
+#endif // wxUSE_CONSOLE_EVENTLOOP

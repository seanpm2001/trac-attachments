Index: src/unix/threadpsx.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/threadpsx.cpp,v
retrieving revision 1.94
diff -u -r1.94 threadpsx.cpp
--- src/unix/threadpsx.cpp	2006/05/23 11:04:33	1.94
+++ src/unix/threadpsx.cpp	2006/07/07 12:22:18
@@ -113,6 +113,13 @@
 // be left in memory
 static wxArrayThread gs_allThreads;
 
+// a pthreads mutex to protect gs_allThreads:
+// an old thread could get removed from the list just when a new thread
+// gets inserted which may cause an array realloc leading to the old thread
+// not finding its slot in this moment -> ASSERT
+// don't use a full wxMutex since this is thread creation/destruction hotpath
+static pthread_mutex_t gs_mutexAllThreads;
+
 // the id of the main thread
 static pthread_t gs_tidMain = (pthread_t)-1;
 
@@ -1066,7 +1073,9 @@
 wxThread::wxThread(wxThreadKind kind)
 {
     // add this thread to the global list of all threads
+    pthread_mutex_lock(&gs_mutexAllThreads);
     gs_allThreads.Add(this);
+    pthread_mutex_unlock(&gs_mutexAllThreads);
 
     m_internal = new wxThreadInternal();
 
@@ -1548,7 +1557,9 @@
     delete m_internal;
 
     // remove this thread from the global array
+    pthread_mutex_lock(&gs_mutexAllThreads);
     gs_allThreads.Remove(this);
+    pthread_mutex_unlock(&gs_mutexAllThreads);
 }
 
 // -----------------------------------------------------------------------------
@@ -1612,6 +1623,8 @@
 
     gs_tidMain = pthread_self();
 
+    pthread_mutex_init(&gs_mutexAllThreads, NULL);
+
     gs_mutexGui = new wxMutex();
     gs_mutexGui->Lock();
 
@@ -1664,6 +1677,8 @@
 
     // and free TLD slot
     (void)pthread_key_delete(gs_keySelf);
+
+    pthread_mutex_destroy(&gs_mutexAllThreads);
 
     delete gs_condAllDeleted;
     delete gs_mutexDeleteThread;

 	  	 

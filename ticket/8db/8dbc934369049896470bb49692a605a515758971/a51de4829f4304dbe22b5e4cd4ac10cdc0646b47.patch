diff -u trunk/customtreectrl.py changed/customtreectrl.py
--- trunk/customtreectrl.py	2011-08-29 11:35:24.255028109 +0200
+++ changed/customtreectrl.py	2011-08-29 11:37:13.365028069 +0200
@@ -4116,6 +4116,27 @@
                   p = self.GetItemParent(p)
                   
              return toFind
+
+
+    def GetPrev(self, item):
+        """
+        Returns the previous item. Only for internal use right now.
+
+        :param `item`: an instance of L{GenericTreeItem}.
+        """
+
+        # Look for a previous sibling of this item
+        prevSibling = self.GetPrevSibling(item)
+        if prevSibling:
+
+            # return it's last child or itself if has not got any children
+            if len(prevSibling.GetChildren()) > 0:
+                return self.GetLastChild(prevSibling)
+
+            return prevSibling
+
+        # item has not got a previous sibling, return it's parent
+        return self.GetItemParent(item)
         
 
     def GetFirstVisibleItem(self):
diff -u trunk/hypertreelist.py changed/hypertreelist.py
--- trunk/hypertreelist.py	2011-08-29 11:35:35.545028105 +0200
+++ changed/hypertreelist.py	2011-08-29 11:39:51.005028011 +0200
@@ -2299,7 +2299,7 @@
         :param `item`: an instance of L{TreeListItem}.
         """                
 
-        return self.GetNext(item, False)
+        return self.GetNext(item)
 
 
     def GetPrevExpanded(self, item):
@@ -2309,7 +2309,7 @@
         :param `item`: an instance of L{TreeListItem}.
         """                
 
-        return self.GetPrev(item, False)
+        return self.GetPrev(item)
 
 
     def GetFirstVisibleItem(self):
@@ -2325,11 +2325,11 @@
         :param `item`: an instance of L{TreeListItem}.
         """                
 
-        i = self.GetNext(item, False)
+        i = self.GetPrev(item)
         while i:
             if self.IsItemVisible(i):
                 return i
-            i = self.GetPrev(i, False)
+            i = self.GetPrev(i)
         
         return None
 

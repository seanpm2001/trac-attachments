Index: demo/agw/UltimateReportDemo.py
===================================================================
--- demo/agw/UltimateReportDemo.py	(revision 63786)
+++ demo/agw/UltimateReportDemo.py	(working copy)
@@ -8,6 +8,7 @@
 import wx.lib.mixins.listctrl as listmix
 import wx.lib.colourdb as cdb
 import wx.lib.colourselect as csel
+import wx.lib.colourutils as cutils
 
 from wx.lib.embeddedimage import PyEmbeddedImage
 
@@ -305,7 +306,7 @@
         randomFont.SetFaceName(fontList[rdn])
 
         self.randomFont = randomFont
-        self.text = "This is my renderer"        
+        self.text = "This is my renderer"
 
         dc = wx.ClientDC(parent)
         dc.SetFont(self.randomFont)
@@ -374,7 +375,47 @@
 
         return 40
     
+    
+class UltimateHeaderRenderer(object):
 
+    def __init__(self, parent):
+        self._hover = False
+        self._pressed = False
+        
+    def DrawHeaderButton(self, dc, rect, flags):
+        
+        self._hover = False
+        self._pressed = False
+        
+        color = wx.Colour(150,150,150)
+        if flags & wx.CONTROL_DISABLED:
+            color = wx.Colour(wx.WHITE)
+        elif flags & wx.CONTROL_SELECTED:
+            color = wx.Colour(wx.BLUE)
+                
+        if flags & wx.CONTROL_PRESSED:
+            self._pressed = True
+            color = cutils.AdjustColour(color,-50)
+        elif flags & wx.CONTROL_CURRENT:
+            self._hover = True
+            color = cutils.AdjustColour(color,50)
+            
+        dc.SetBrush(wx.Brush(color, wx.SOLID))
+        dc.SetBackgroundMode(wx.SOLID)
+        dc.SetPen(wx.TRANSPARENT_PEN)
+        dc.DrawRectangleRect(rect)
+
+        dc.SetBackgroundMode(wx.TRANSPARENT)        
+
+    def GetForegroundColour(self):
+       
+        if self._hover:
+            return wx.Colour(30,30,30)
+        else:
+            return wx.Colour(230,230,230)
+        
+    
+
 class TestUltimateListCtrl(ULC.UltimateListCtrl):
     
     def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, extraStyle=0):
@@ -474,7 +515,7 @@
         info._format = 0
         info._kind = 1
         info._text = "Artist\nName"
-        
+         
         self.list.InsertColumnInfo(0, info)
 
         info = ULC.UltimateListItem()
@@ -499,7 +540,22 @@
         info._format = 0
         info._text = "Custom Renderer"
         info._colour = wx.RED
+        
+        # Add our custom renderer for the header of column 3, we can also use
+        # SetHeaderCustomRenderer to set the renderer for all the columns.
+        klass = UltimateHeaderRenderer(self)
+        info.SetCustomRenderer(klass) 
+        
         self.list.InsertColumnInfo(3, info)
+        
+        # The custom renderer can also be set for all columns on the header and/or footer
+        #self.list.SetHeaderCustomRenderer(klass)
+        
+        # We must first have a footer in order to set its custom renderer: 
+        #extra_style = self.list.GetExtraStyle() | ULC.ULC_FOOTER
+        #if self.list.GetExtraStyle() != extra_style:
+            #self.list.SetExtraStyle(extra_style)
+        #self.list.SetFooterCustomRenderer(klass)
 
         items = musicdata.items()
         renderers = {}
Index: wx/lib/agw/ultimatelistctrl.py
===================================================================
--- wx/lib/agw/ultimatelistctrl.py	(revision 63782)
+++ wx/lib/agw/ultimatelistctrl.py	(working copy)
@@ -3172,6 +3172,7 @@
         self._font = wx.NullFont
         self._state = 0
         self._isColumnShown = True
+        self._customRenderer = None
 
         self._footerImage = []
         self._footerFormat = 0
@@ -3239,6 +3240,8 @@
         if self._mask & ULC_MASK_SHOWN:
             self._isColumnShown = item._isColumnShown
             
+        if self._mask & ULC_MASK_RENDERER:
+            self._customRenderer = item._customRenderer
 
     def SetState(self, flag):
         """
@@ -3379,6 +3382,7 @@
         item._footerKind = self._footerKind
         item._footerChecked = self._footerChecked
         item._footerFont = self._footerFont
+        item._customRenderer = self._customRenderer
 
         return item
 
@@ -3534,6 +3538,25 @@
         """
 
         self._footerChecked = check
+        
+    def SetCustomRenderer(self, renderer):
+        """
+        Associate a custom renderer to this item.
+
+        :param `renderer`: a class able to correctly render the item.
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        self._mask |= ULC_MASK_RENDERER
+        self._customRenderer = renderer
+
+
+    def GetCustomRenderer(self):
+        """ Returns the custom renderer associated with this item (if any). """
+
+        return self._customRenderer
             
 
 #-----------------------------------------------------------------------------
@@ -4792,7 +4815,10 @@
         self._currentCursor = wx.NullCursor
         self._resizeCursor = wx.StockCursor(wx.CURSOR_SIZEWE)
         self._isDragging = False
-
+       
+        # Custom renderer for every column
+        self._headerCustomRenderer = None
+       
         # column being resized or -1
         self._column = -1
 
@@ -4836,7 +4862,22 @@
             if not self._hasFont:
                 self.SetOwnFont(wx.SystemSettings.GetFont(wx.SYS_DEFAULT_GUI_FONT))
 
+    def SetCustomRenderer(self, renderer=None):
+        """
+        Associate a custom renderer with the header - all columns will use it
 
+        :param `renderer`: a class able to correctly render header buttons
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        if not self._owner.HasFlag(ULC_REPORT):
+            raise Exception("Custom renderers can be used on with style = ULC_REPORT")
+        
+        self._headerCustomRenderer = renderer
+
+
     def DoGetBestSize(self):
         """
         Gets the size which best suits the window: for a control, it would be the
@@ -4944,6 +4985,9 @@
         isFooter = self._isFooter
 
         for i in xrange(numColumns):
+            
+            # Reset anything in the dc that a custom renderer might have changed
+            dc.SetTextForeground(self.GetForegroundColour())
 
             if x >= w:
                 break
@@ -4982,11 +5026,23 @@
            
             # the width of the rect to draw: make it smaller to fit entirely
             # inside the column rect
+            header_rect = wx.Rect(x-1, HEADER_OFFSET_Y-1, cw-1, ch)
 
-            renderer.DrawHeaderButton(self, dc,
-                                      wx.Rect(x-1, HEADER_OFFSET_Y-1, cw-1, ch),
-                                      flags)
+            if self._headerCustomRenderer != None:
+               self._headerCustomRenderer.DrawHeaderButton(dc, header_rect, flags)
+              
+               # The custom renderer will specify the color to draw the header text and buttons
+               dc.SetTextForeground(self._headerCustomRenderer.GetForegroundColour())
+                
+            elif item._mask & ULC_MASK_RENDERER: 
+               item.GetCustomRenderer().DrawHeaderButton(dc, header_rect, flags)
+              
+               # The custom renderer will specify the color to draw the header text and buttons
+               dc.SetTextForeground(item.GetCustomRenderer().GetForegroundColour())
+            else:
+                renderer.DrawHeaderButton(self, dc, header_rect, flags)
 
+
             # see if we have enough space for the column label
             if isFooter:
                 if item.GetFooterFont().IsOk():
@@ -5064,7 +5120,14 @@
         # Fill in what's missing to the right of the columns, otherwise we will
         # leave an unpainted area when columns are removed (and it looks better)
         if x < w:
-            renderer.DrawHeaderButton(self, dc, wx.Rect(x, HEADER_OFFSET_Y, w - x, h), wx.CONTROL_DIRTY) # mark as last column
+            header_rect = wx.Rect(x, HEADER_OFFSET_Y, w - x, h)
+            if self._headerCustomRenderer != None:
+                # Why does the custom renderer need this adjustment??
+                header_rect.x = header_rect.x - 1
+                header_rect.y = header_rect.y - 1
+                self._headerCustomRenderer.DrawHeaderButton(dc, header_rect, wx.CONTROL_DIRTY)
+            else:
+                renderer.DrawHeaderButton(self, dc, header_rect, wx.CONTROL_DIRTY) # mark as last column
 
 
     def DrawTextFormatted(self, dc, text, rect):
@@ -8887,7 +8950,30 @@
         self.SetItem(item)
         self.Refresh()
         
+    def SetColumnCustomRenderer(self, col=0, renderer=None):
+        """
+        Associate a custom renderer to this column's header
 
+        :param `col`: the column index.
+        :param `renderer`: a class able to correctly render the input item.
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        self._columns[col].SetCustomRenderer(renderer)
+
+
+    def GetColumnCustomRenderer(self, col):
+        """
+        Returns the custom renderer used to draw the column header
+
+        :param `col`: the column index.
+        """
+
+        return self._columns[col].GetCustomRenderer()
+
+
     def GetItemCustomRenderer(self, item):
         """
         Returns the custom renderer used to draw the input item (if any).
@@ -10562,6 +10648,16 @@
             self.SetWindowStyleFlag(flag)
 
 
+    def GetExtraStyle(self):
+        """
+        Gets the L{UltimateListCtrl} extra style flag.
+        
+        See SetExtraStyle for details.
+        """
+        
+        return self._extraStyle
+    
+    
     def SetExtraStyle(self, style):
         """
         Sets the L{UltimateListCtrl} extra style flag.
@@ -12743,7 +12839,54 @@
         item = CreateListItem(itemOrId, col)
         return self._mainWin.GetItemCustomRenderer(item)
 
+    def SetHeaderCustomRenderer(self, renderer=None):
+        """
+        Associate a custom renderer with the header - all columns will use it
 
+        :param `renderer`: a class able to correctly render header buttons
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        if not self.HasFlag(ULC_REPORT):
+            raise Exception("Custom renderers can be used on with style = ULC_REPORT")
+        
+        self._headerWin.SetCustomRenderer(renderer)
+        
+    def SetFooterCustomRenderer(self, renderer=None):
+        """
+        Associate a custom renderer with the footer - all columns will use it
+
+        :param `renderer`: a class able to correctly render header buttons
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        if not self.HasFlag(ULC_REPORT) or not self.HasExtraFlag(ULC_FOOTER):
+            raise Exception("Custom renderers can only be used on with style = ULC_REPORT and extra_style ULC_FOOTER")
+       
+        self._footerWin.SetCustomRenderer(renderer)
+
+
+    def SetColumnCustomRenderer(self, col=0, renderer=None):
+        """
+        Associate a custom renderer to this column's header
+
+        :param `col`: the column index.
+        :param `renderer`: a class able to correctly render the input item.
+
+        :note: the renderer class **must** implement the methods `DrawHeaderButton`,
+          and `GetForegroundColor`. 
+        """
+
+        if not self.HasFlag(ULC_REPORT):
+            raise Exception("Custom renderers can be used on with style = ULC_REPORT")
+        
+        return self._mainWin.SetCustomRenderer(col, renderer)
+
+
     def SetItemCustomRenderer(self, itemOrId, col=0, renderer=None):
         """
         Associate a custom renderer to this item.

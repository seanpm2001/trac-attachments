? cvs
? contrib/cvs
? contrib/utils/cvs
? contrib/utils/wxrc/cvs
? contrib/utils/wxrc/lx
? contrib/utils/wxrc/wxrc2.cpp
? contrib/utils/wxrc/wxrc_cvs.cpp
? contrib/utils/wxrc/wxrc_extension.cpp
? contrib/utils/wxrc/wxrc_post.cpp
? contrib/utils/wxrc/wxrco.cpp
? docs/cvs
? docs/latex/cvs
? docs/latex/wx/cvs
Index: contrib/utils/wxrc/wxrc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/contrib/utils/wxrc/wxrc.cpp,v
retrieving revision 1.24
diff -b -u -2 -r1.24 wxrc.cpp
--- contrib/utils/wxrc/wxrc.cpp	2003/03/16 20:26:19	1.24
+++ contrib/utils/wxrc/wxrc.cpp	2003/06/05 23:23:59
@@ -8,4 +8,6 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
+// C++ code generation for GUI class added by Eduardo Marques
+// <edrdo@netcabo.pt> as marked with <edrdo>
 
 #if defined(__GNUG__) && !defined(__APPLE__)
@@ -36,5 +38,100 @@
 
 
+/* <edrdo> { */
+class XRCWidgetData {
+	private:
+		wxString m_name;
+		wxString m_class;
+	public:
+		XRCWidgetData(const wxString& vname,const wxString& vclass) 
+		: m_class(vclass) , m_name(vname) 
+		{ 
+		
+		}
+		const wxString& GetName() const { return m_name; }
+		const wxString& GetClass() const { return m_class; }
+
+};
+#include "wx/arrimpl.cpp"
+WX_DECLARE_OBJARRAY(XRCWidgetData,ArrayOfXRCWidgetData);
+WX_DEFINE_OBJARRAY(ArrayOfXRCWidgetData);
+
+class XRCWndClassData {
+private: 
+		wxString m_parentClassName;
+		wxString m_className;
+		ArrayOfXRCWidgetData m_wdata;
+		void BrowseXmlNode(wxXmlNode* node){
+			wxString classValue;
+			wxString nameValue;
+			wxXmlNode* children;	
+			while(node){
+				if(node->GetName() == _T("object")
+				&& node->GetPropVal(_T("class"),&classValue)
+				&& node->GetPropVal(_T("name"),&nameValue)){
+			           	
+				   m_wdata.Add(XRCWidgetData(nameValue,classValue));
+				}
+				children = node->GetChildren();
+				if(children) BrowseXmlNode(children);	
+				node = node -> GetNext();
+			}
+		}
+	public:
+	XRCWndClassData(const wxString& className,const wxString& parentClassName, const wxXmlNode* node) :
+			m_className(className) , m_parentClassName(parentClassName) { 
+			
+			BrowseXmlNode(node->GetChildren());
+		
+		}
+		
+		const ArrayOfXRCWidgetData& GetWidgetData(){
+			return m_wdata;
+		}
+		void GenerateHeaderCode(wxFFile& file){
 
+  		file.Write(_T("class ") + m_className + _T(" : public ") + m_parentClassName
+		+ _T(" {\nprotected:\n"));
+		for(size_t i=0;i<m_wdata.Count();++i){
+			const XRCWidgetData& w = m_wdata.Item(i);
+			file.Write(
+			_T(" ") + w.GetClass() + _T("* ") + w.GetName()
+			+ _T(";\n"));
+		}
+	file.Write(_T("\nprivate:\n void InitWidgetsFromXRC(){\n")
+	   _T("  wxXmlResource::Get()->LoadObject(this,NULL,\"")
+	+  m_className 
+	+  +_T("\",\"")
+	+  m_parentClassName 
+	+  _T("\");\n"));	
+	for(size_t i=0;i<m_wdata.Count();++i){
+		const XRCWidgetData& w = m_wdata.Item(i);
+		file.Write(
+			_T("  ") 
+			+ w.GetName() 
+			+ _T(" = XRCCTRL(*this,\"")
+			+ w.GetName() 
+			+ _T("\",")
+			+ w.GetClass()
+			+ _T(");\n")
+		);
+	}
+file.Write(_T(" }\n"));
+	
+file.Write(
+	_T("public:\n")
+	+ m_className 
+	+ _T("::")
+	+ m_className
+	+ _T("(){\n")
+	+ _T("  InitWidgetsFromXRC();\n")
+	 _T(" }\n")
+	_T("};\n"));
+	};
+};
+WX_DECLARE_OBJARRAY(XRCWndClassData,ArrayOfXRCWndClassData);
+WX_DEFINE_OBJARRAY(ArrayOfXRCWndClassData);
+// <edrdo> }
+
 /*
 #if wxUSE_GUI
@@ -74,4 +171,10 @@
     wxArrayString parFiles;
     int retCode;
+
+    // <edrdo> added flagH, aXRCWndClassData, GenCPPHeader() {
+    ArrayOfXRCWndClassData aXRCWndClassData;
+	bool flagH;
+	void GenCPPHeader();
+    // <edrdo> }
 };
 
@@ -89,4 +192,7 @@
               wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
         { wxCMD_LINE_SWITCH, _T("v"), _T("verbose"), _T("be verbose") },
+// <edrdo> {
+		{ wxCMD_LINE_SWITCH, _T("e"), _T("extra-cpp-code"),  _T("output C++ header file with XRC derived classes") },
+// <edrdo> }
         { wxCMD_LINE_SWITCH, _T("c"), _T("cpp-code"),  _T("output C++ source rather than .rsc file") },
         { wxCMD_LINE_SWITCH, _T("p"), _T("python-code"),  _T("output wxPython source rather than .rsc file") },
@@ -145,5 +251,9 @@
     flagCPP = cmdline.Found(_T("c"));
     flagPython = cmdline.Found(_T("p"));
+    // <edrdo>: flagH setting {
+    flagH = flagCPP && cmdline.Found(_T("e"));
+    // <edrdo> }
 
+
     if (!cmdline.Found(_T("o"), &parOutput)) 
     {
@@ -184,6 +294,10 @@
     if (!retCode)
     {        
-        if (flagCPP)
+        if (flagCPP){
             MakePackageCPP(files);
+            // <edrdo> 
+            if(flagH){ GenCPPHeader(); }
+            // <edrdo> 
+        }
         else if (flagPython)
             MakePackagePython(files);
@@ -241,5 +355,21 @@
 
         FindFilesInXML(doc.GetRoot(), flist, path);
-
+        // <edrdo>: Browse through all top level objects
+        if(flagH){
+            wxXmlNode* node = (doc.GetRoot())->GetChildren();
+        	wxString classValue,nameValue;
+        	while(node){
+                    if(node->GetName() == _T("object")
+            	     && node->GetPropVal(_T("class"),&classValue)
+            	     && node->GetPropVal(_T("name"),&nameValue)){
+
+                      aXRCWndClassData.Add(
+                    	XRCWndClassData(nameValue,classValue,node)
+                      );
+                    }
+            	    node = node -> GetNext();
+            }
+        }
+        // <edrdo> }
         wxString internalName = GetInternalFileName(parFiles[i], flist);
         
@@ -365,5 +495,4 @@
 
 
-
 static wxString FileToCppArray(wxString filename, int num)
 {
@@ -469,4 +598,26 @@
 
 }
+// <edrdo> : method to generate header file {
+void XmlResApp::GenCPPHeader(void){
+    wxString fileSpec = (parOutput.BeforeLast('.')).AfterLast('/');
+    wxString heaFileName = fileSpec + _T(".h");
+	
+    wxFFile file(heaFileName, wxT("wt"));
+    file.Write(
+_T("//\n")
+_T("// This file was automatically generated by wxrc, do not edit by hand.\n")
+_T("//\n\n")
+_T("#ifndef __")  + fileSpec + _T("_h__\n")
+_T("#define __")  + fileSpec + _T("_h__\n")
+);	
+    for(size_t i=0;i<aXRCWndClassData.Count();++i){
+		aXRCWndClassData.Item(i).GenerateHeaderCode(file);		
+    } 
+    file.Write(
+		_T("\nvoid \n")
+		+ parFuncname
+		+ _T("();\n#endif\n"));
+}
+// <edrdo> }
 
 static wxString FileToPythonArray(wxString filename, int num)
Index: docs/latex/wx/txrc.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/txrc.tex,v
retrieving revision 1.12
diff -b -u -2 -r1.12 txrc.tex
--- docs/latex/wx/txrc.tex	2003/05/26 16:20:54	1.12
+++ docs/latex/wx/txrc.tex	2003/06/05 23:24:02
@@ -1,2 +1,5 @@
+% Note: -e/C++ header generation documentation added by 
+% Eduardo Marques <edrdo@netcabo.pt> as marked with <edrdo>
+%
 \section{XML-based resource system overview}\label{xrcoverview}
 
@@ -110,4 +113,8 @@
 \item -v (--verbose): show verbose logging information
 \item -c (--cpp-code): write C++ source rather than a XRS file
+% <edrdo> {
+\item -e (--extra-cpp-code): if used together with -c, generates C++ header file
+containing class definitions for the windows defined by the XRC file (see special subsection) 
+% <edrdo> }
 \item -u (--uncompressed): do not compress XML files (C++ only)
 \item -g (--gettext): output .po catalog (to stdout, or a file if -o is used)
@@ -445,4 +452,95 @@
 Please see Technical Note 14 (docs/tech/tn0014.txt) in your wxWindows
 distribution.
+
+% <edrdo> {
+\subsection{C++ header file generation}\label{xrccppheader}
+
+Using the {\tt -e} switch together with {\tt -c}, a C++ header file is written
+containing class definitions for the GUI windows defined in the XRC file.
+This code generation can make it easier to use XRC and automate program
+development.
+The classes can be used as basis for development, freeing the
+programmer from dealing with most of the XRC specifities (e.g. {\tt XRCCTRL}).
+
+For each top level window defined in the XRC file a C++ class definition is
+generated, containing as class members the named widgets of the window.
+A default constructor for each class is also generated. Inside the constructor 
+all XRC loading is done and all class members representing widgets are initialized. 
+
+A simple example will help understand how the scheme works. Suppose you have
+a XRC file defining a top level window {\tt TestWnd\_Base}, which subclasses {\tt wxFrame} (any 
+other class like {\tt wxDialog} will do also), and has subwidgets {\tt wxTextCtrl} A and {\tt wxButton} B.
+The XRC file and corresponding class definition in the header file will be something like:
+
+\begin{verbatim}
+<?xml version="1.0"?>
+<resource version="2.3.0.1">
+    <object class="wxFrame" name="TestWnd_Base">
+        <size>-1,-1</size>
+        <title>Test</title>
+        <object class="wxBoxSizer">
+            <orient>wxHORIZONTAL</orient>
+            <object class="sizeritem">
+                <object class="wxTextCtrl" name="A">
+                    <label>Test label</label>
+                </object>
+            </object>
+            <object class="sizeritem">
+                <object class="wxButton" name="B">
+                    <label>Test button</label>
+                </object>
+            </object>
+        </object>
+    </object>
+</resource>
+
+
+class TestWnd_Base : public wxFrame {
+protected:
+ wxTextCtrl* A;
+ wxButton* B;
+
+private:
+ void InitWidgetsFromXRC(){
+  wxXmlResource::Get()->LoadObject(this,NULL,"TestWnd","wxFrame");
+  A = XRCCTRL(*this,"A",wxTextCtrl);
+  B = XRCCTRL(*this,"B",wxButton);
+ }
+public:
+TestWnd::TestWnd(){
+  InitWidgetsFromXRC();
+ }
+};
+\end{verbatim}
+
+The generated window class can be used as basis for the full window class. The
+class members which represent widgets may be accessed by name instead of using
+{\tt XRCCTRL} every time you wish to reference them (note that they are {\tt protected} class members), 
+though you must still use {\tt XRCID} to refer to widget ids in the event
+table. 
+
+Example:
+\begin{verbatim}
+#include "resource.h"
+
+class TestWnd : public TestWnd_Base {
+	public:
+		TestWnd(){
+			// A, B already initialised at this point
+			A->SetValue("Updated in TestWnd::TestWnd");
+			B->SetValue("Nice :)");
+		}
+		void OnBPressed(wxEvent& event){
+			Close();
+		}
+		DECLARE_EVENT_TABLE();
+};
+
+BEGIN_EVENT_TABLE(TestWnd,TestWnd_Base)
+EVT_BUTTON(XRCID("B"),TestWnd::OnBPressed)
+END_EVENT_TABLE()
+
+\end{verbatim}
+% <edrdo>
 
 \subsection{Adding new resource handlers}\label{newresourcehandlers}

 	  	 

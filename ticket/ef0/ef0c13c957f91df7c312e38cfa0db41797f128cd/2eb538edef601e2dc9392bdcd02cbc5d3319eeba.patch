Index: src/tiff/libtiff/preprocessor.h
===================================================================
--- src/tiff/libtiff/preprocessor.h	(revision 0)
+++ src/tiff/libtiff/preprocessor.h	(working copy)
@@ -0,0 +1,55 @@
+#ifndef PREPROCESSOR_H_INCLUDED
+#define PREPROCESSOR_H_INCLUDED
+
+#if !defined(__WIN32__) && (defined(_WIN32) || defined(WIN32))
+#define __WIN32__
+#endif
+
+#if defined(_WINDOWS) || defined(__WIN32__) || defined(_Windows)
+    #if defined(USE_STREAM_FILEIO)
+    #undef USE_STREAM_FILEIO
+    #endif // USE_STREAM_FILEIO
+
+    #if defined(__CYGWIN)
+        #if !defined(USE_WIN32_FILEIO)
+            #define USE_WIN32_FILEIO
+        #endif //USE_WIN32_FILEIO
+        #if defined(AVOID_WIN32_FILEIO)
+            #undef  AVOID_WIN32_FILEIO
+        #endif  //AVOID_WIN32_FILEIO
+    #else   //__CYGWIN
+        #if !defined(AVOID_WIN32_FILEIO)
+            #if !defined(USE_WIN32_FILEIO)
+                #define USE_WIN32_FILEIO
+            #endif //USE_WIN32_FILEIO
+        #else //AVOID_WIN32_FILEIO
+            #if defined(USE_WIN32_FILEIO)
+                #undef USE_WIN32_FILEIO
+            #endif //USE_WIN32_FILEIO
+        #endif //AVOID_WIN32_FILEIO
+    #endif //__CYGWIN
+#else  //_WINDOWS || __WIN32__ || _Windows
+#   if !defined(USE_STREAM_FILEIO)
+#       ifdef __APPLE__
+#           if !defined(AVOID_WIN32_FILEIO)
+#               define AVOID_WIN32_FILEIO
+#           endif //AVOID_WIN32_FILEIO
+#           if defined(USE_WIN32_FILEIO)
+#               undef USE_WIN32_FILEIO
+#           endif //USE_WIN32_FILEIO
+#       else //__APPLE__
+#           define USE_STREAM_FILEIO
+#       endif // __APPLE__
+#   endif //USE_STREAM_FILEIO
+#endif //_WINDOWS || __WIN32__ || _Windows
+
+#if defined(USE_STREAM_FILEIO)
+#   if defined(USE_WIN32_FILEIO)
+#       undef USE_WIN32_FILEIO
+#   endif //USE_WIN32_FILEIO
+#   if defined(AVOID_WIN32_FILEIO)
+#       undef  AVOID_WIN32_FILEIO
+#   endif //AVOID_WIN32_FILEIO
+#endif //USE_STREAM_FILEIO
+
+#endif // PREPROCESSOR_H_INCLUDED
Index: src/tiff/libtiff/tif_io.c
===================================================================
--- src/tiff/libtiff/tif_io.c	(revision 0)
+++ src/tiff/libtiff/tif_io.c	(working copy)
@@ -0,0 +1,16 @@
+#include "preprocessor.h"
+
+#if defined(USE_WIN32_FILEIO)
+
+#include "tif_win32.c"
+
+#elif defined(AVOID_WIN32_FILEIO)
+
+#include "tif_unix.c"
+
+#else
+
+#include "tif_stream.cxx"
+
+#endif // defined
+
Index: src/tiff/libtiff/tif_open.c
===================================================================
--- src/tiff/libtiff/tif_open.c	(revision 76591)
+++ src/tiff/libtiff/tif_open.c	(working copy)
@@ -512,7 +512,10 @@
 /*
  * Return open file's I/O descriptor.
  */
-int
+//Begin of adapter libtiff for x64 target
+//int
+thandle_t
+//End of adapter libtiff for x64 target
 TIFFFileno(TIFF* tif)
 {
 	return (tif->tif_fd);
@@ -521,10 +524,17 @@
 /*
  * Set open file's I/O descriptor, and return previous value.
  */
-int
-TIFFSetFileno(TIFF* tif, int fd)
+//Begin of adapter libtiff for x64 target
+//int
+//TIFFSetFileno(TIFF* tif, int fd)
+thandle_t
+TIFFSetFileno(TIFF* tif, thandle_t fd)
+//End of adapter libtiff for x64 target
 {
-        int old_fd = tif->tif_fd;
+    //Begin of adapter libtiff for x64 target
+     //   int old_fd = tif->tif_fd;
+    thandle_t old_fd = tif->tif_fd;
+    //End of adapter libtiff for x64 target
 	tif->tif_fd = fd;
 	return old_fd;
 }
Index: src/tiff/libtiff/tif_unix.c
===================================================================
--- src/tiff/libtiff/tif_unix.c	(revision 76591)
+++ src/tiff/libtiff/tif_unix.c	(working copy)
@@ -57,6 +57,7 @@
 static tmsize_t
 _tiffReadProc(thandle_t fd, void* buf, tmsize_t size)
 {
+    /*
 	size_t size_io = (size_t) size;
 	if ((tmsize_t) size_io != size)
 	{
@@ -64,11 +65,69 @@
 		return (tmsize_t) -1;
 	}
 	return ((tmsize_t) read((int) fd, buf, size_io));
+	*/
+
+    //Begin of adapter libtiff for x64 target
+    int err;
+
+	#if defined(_WIN64)
+    //tmsize_t is 64bit now, treated as 'unsigned __int64' although it's declared as 'signed __int64'
+    //_read required a unsigned int Count
+
+	char* ma = (char*)buf;
+	unsigned __int64 mb = (unsigned __int64)size;
+	signed __int64 p=0;
+
+	while (mb>0)
+	{
+        int o;
+        unsigned int n = 0x80000000UL;
+
+        if ((unsigned __int64)n > mb) n = (unsigned int)mb;
+
+		o = _read(fd,(void*)ma,n);
+		_get_errno(&err);
+		if (err != 0) return (0);
+
+		ma+=o;
+		mb-=o;
+		p+=o;
+		if (o!=n) break;
 }
+	return(p);
 
+    #else
+	// tmsize_t is 32bit now, treated as 'unsignd int' although it's declared as 'signed int'
+
+	char* ma = (char*)buf;
+	unsigned int mb = (unsigned int)size;
+	int p = 0;
+
+	while (mb>0)
+	{
+        int o;
+        unsigned int n = 0x80000000UL;
+        if (n > mb) n = mb;
+
+        o = _read(fd, (void *)ma, n);
+        _get_errno(&err);
+        if (err != 0) return (0);
+
+		ma+=o;
+		mb-=o;
+		p+=o;
+		if (o!=n) break;
+	}
+	return(p);
+
+	#endif // defined _WIN64
+    //End of adapter libtiff for x64 target
+}
+
 static tmsize_t
 _tiffWriteProc(thandle_t fd, void* buf, tmsize_t size)
 {
+    /*
 	size_t size_io = (size_t) size;
 	if ((tmsize_t) size_io != size)
 	{
@@ -76,19 +135,90 @@
 		return (tmsize_t) -1;
 	}
 	return ((tmsize_t) write((int) fd, buf, size_io));
+	*/
+    //Begin of adapter libtiff for x64 target
+    int err;
+
+	#if defined(_WIN64)
+    //tmsize_t is 64bit now, treated as 'unsigned __int64' although it's declared as 'signed __int64'
+    //_write required a unsigned int Count
+
+	char* ma = (char*)buf;
+	unsigned __int64 mb = (unsigned __int64)size;
+	signed __int64 p=0;
+
+	while (mb>0)
+	{
+        int o;
+        unsigned int n = 0x80000000UL;
+
+        if ((unsigned __int64)n > mb) n = (unsigned int)mb;
+
+		o = _write(fd,(void *)ma,n);
+		_get_errno(&err);
+		if (err != 0) return (0);
+
+		ma+=o;
+		mb-=o;
+		p+=o;
+		//if (o!=n) break;
 }
+	return(p);
 
+    #else
+	// tmsize_t is 32bit now, treated as 'unsignd int' although it's declared as 'signed int'
+
+	char* ma = (char*)buf;
+	unsigned int mb = (unsigned int)size;
+	int p = 0;
+
+	while (mb>0)
+	{
+        int o;
+        unsigned int n = 0x80000000UL;
+        if (n > mb) n = mb;
+
+        o = _write(fd, (void *)ma, n);
+        _get_errno(&err);
+        if (err != 0) return (0);
+
+		ma+=o;
+		mb-=o;
+		p+=o;
+		//if (o!=n) break;
+	}
+	return(p);
+
+	#endif // defined _WIN64
+    //End of adapter libtiff for x64 target
+}
+
 static uint64
 _tiffSeekProc(thandle_t fd, uint64 off, int whence)
 {
+    /*
 	off_t off_io = (off_t) off;
 	if ((uint64) off_io != off)
 	{
 		errno=EINVAL;
-		return (uint64) -1; /* this is really gross */
+		return (uint64) -1; // this is really gross
 	}
 	return((uint64)lseek((int)fd,off_io,whence));
+	*/
+    //Begin of adapter libtiff for x64 target
+    const uint64 u_off = (uint64)0x8000000000000000;
+
+    if (off > u_off)
+        return (uint64)_lseeki64(fd, (__int64)off, whence);
+    else
+    {
+        uint64 r_off = off - u_off;
+        if ((_lseeki64(fd, (__int64)u_off, whence) != (__int64)-1) && (_lseeki64(fd, (__int64)r_off, SEEK_CUR) != (__int64)-1))
+            return off;
 }
+    return (__int64)-1;
+    //End of adapter libtiff for x64 target
+}
 
 static int
 _tiffCloseProc(thandle_t fd)
@@ -99,14 +229,24 @@
 static uint64
 _tiffSizeProc(thandle_t fd)
 {
+    /*
 	struct stat sb;
 	if (fstat((int)fd,&sb)<0)
 		return(0);
 	else
 		return((uint64)sb.st_size);
+    */
+    //Begin of adapter libtiff for x64 target
+    struct __stat64 sb;
+    if (_fstat64(fd, &sb) != 0)
+        return (0);
+    else
+        return (uint64)(sb.st_size);
+    //End of adapter libtiff for x64 target
 }
 
 #ifdef HAVE_MMAP
+// For APPLE now
 #include <sys/mman.h>
 
 static int
@@ -132,6 +272,7 @@
 	(void) munmap(base, (off_t) size);
 }
 #else /* !HAVE_MMAP */
+
 static int
 _tiffMapProc(thandle_t fd, void** pbase, toff_t* psize)
 {
Index: src/tiff/libtiff/tif_win32.c
===================================================================
--- src/tiff/libtiff/tif_win32.c	(revision 76591)
+++ src/tiff/libtiff/tif_win32.c	(working copy)
@@ -27,6 +27,7 @@
  * TIFF Library Win32-specific Routines.  Adapted from tif_unix.c 4/5/95 by
  * Scott Wagner (wagner@itek.com), Itek Graphix, Rochester, NY USA
  */
+
 #include "tiffiop.h"
 
 #include <windows.h>
@@ -42,6 +43,7 @@
 	/* tmsize_t is 64bit on 64bit systems, but the WinAPI ReadFile takes
 	 * 32bit sizes, so we loop through the data in suitable 32bit sized
 	 * chunks */
+	/*
 	uint8* ma;
 	uint64 mb;
 	DWORD n;
@@ -64,14 +66,64 @@
 			break;
 	}
 	return(p);
+	*/
+    //Begin of adapter libtiff for x64 target
+	#if defined(_WIN64)
+	// tmsize_t is 64bit now, treated as 'unsignd _int64' although it's declared as 'signed __int64'
+
+	char* ma = (char*)buf;
+	unsigned __int64 mb = (unsigned __int64)size;
+	unsigned __int64 p=0;
+
+	while (mb>0)
+	{
+        DWORD o;
+        //DWORD n = 0x80000000UL;
+        DWORD n = 0xffffffffUL;
+        if ((unsigned __int64)n > mb) n = (DWORD)mb;
+
+		if (!ReadFile(fd,(LPVOID)ma,n,&o,NULL)) return(0);
+		ma+=o;
+		mb-=o;
+		p+=o;
+		if (o!=n) break;
 }
+	return((tmsize_t)p);
+	#else
+	// tmsize_t is 32bit now, treated as 'unsignd int' although it's declared as 'signed int'
+	/*
+	char* ma = (char*)buf;
+	unsigned int mb = (unsigned int)size;
+	unsigned int p = 0;
 
+	while (mb>0)
+	{
+        DWORD o;
+        DWORD n = 0x80000000UL;
+        if (n > mb) n = mb;
+
+		if (!ReadFile(fd,(LPVOID)ma,n,&o,NULL)) return(0);
+		ma+=o;
+		mb-=o;
+		p+=o;
+		if (o!=n) break;
+	}
+	return((tmsize_t)p);
+	*/
+	DWORD bytesRead;
+	return ReadFile(fd, buf, (unsigned int)size, &bytesRead, NULL) ? ((tmsize_t)bytesRead) : (0);
+	#endif
+    //End of adapter libtiff for x64 target
+}
+
 static tmsize_t
 _tiffWriteProc(thandle_t fd, void* buf, tmsize_t size)
 {
+
 	/* tmsize_t is 64bit on 64bit systems, but the WinAPI WriteFile takes
 	 * 32bit sizes, so we loop through the data in suitable 32bit sized
 	 * chunks */
+	 /*
 	uint8* ma;
 	uint64 mb;
 	DWORD n;
@@ -94,8 +146,59 @@
 			break;
 	}
 	return(p);
+    */
+    //Begin of adapter libtiff for x64 target
+
+	#if defined(_WIN64)
+	// tmsize_t is 64bit now, treated as 'unsignd _int64' although it's declared as 'signed __int64'
+
+	char* ma = (char*)buf;
+	unsigned __int64 mb = (unsigned __int64)size;
+	unsigned __int64 p=0;
+
+	while (mb>0)
+	{
+        DWORD o;
+        //DWORD n = 0x80000000UL;
+        DWORD n = 0xffffffffUL;
+        if ((unsigned __int64)n > mb) n = (DWORD)mb;
+
+		if (!WriteFile(fd,(LPVOID)ma,n,&o,NULL)) return(0);
+		ma+=o;
+		mb-=o;
+		p+=o;
+		//if (o!=n) break;
 }
+	return((tmsize_t)p);
 
+	#else
+	// tmsize_t is 32bit now, treated as 'unsignd int' although it's declared as 'signed int'
+    /*
+	char* ma = (char*)buf;
+	unsigned int mb = (unsigned int)size;
+	unsigned int p = 0;
+
+	while (mb>0)
+	{
+        DWORD o;
+        DWORD n = 0x80000000UL;
+
+        if (n > mb) n = mb;
+
+		if (!WriteFile(fd,(LPVOID)ma,n,&o,NULL)) return(0);
+		ma+=o;
+		mb-=o;
+		p+=o;
+		//if (o!=n) break;
+	}
+	return((tmsize_t)p);
+	*/
+	DWORD bytesWrite;
+	return ReadFile(fd, buf, (unsigned int)size, &bytesWrite, NULL) ? (tmsize_t)bytesWrite : (0);
+	#endif
+    //End of adapter libtiff for x64 target
+}
+
 static uint64
 _tiffSeekProc(thandle_t fd, uint64 off, int whence)
 {
@@ -133,8 +236,12 @@
 _tiffSizeProc(thandle_t fd)
 {
 	ULARGE_INTEGER m;
-	m.LowPart=GetFileSize(fd,&m.HighPart);
-	return(m.QuadPart);
+	//Begin of adapter libtiff for x64 target
+	//m.LowPart=GetFileSize(fd,&m.HighPart);
+	//return(m.QuadPart);
+	return GetFileSizeEx(fd, (PLARGE_INTEGER)&m) ? (m.QuadPart) : (__int64)-1;
+    //End of adapter libtiff for x64 target
+
 }
 
 static int
@@ -204,7 +311,8 @@
  * string, which forces the file to be opened unmapped.
  */
 TIFF*
-TIFFFdOpen(int ifd, const char* name, const char* mode)
+//TIFFFdOpen(int ifd, const char* name, const char* mode)
+TIFFFdOpen(thandle_t ifd, const char* name, const char* mode)
 {
 	TIFF* tif;
 	int fSuppressMap;
@@ -252,18 +360,24 @@
 		case O_RDWR|O_CREAT|O_TRUNC:	dwMode = CREATE_ALWAYS; break;
 		default:			return ((TIFF*)0);
 	}
-
-	fd = (thandle_t)CreateFileA(name,
+    //Begin of adapter libtiff for x64 target
+	//fd = (thandle_t)CreateFileA(name,
+    //                (m == O_RDONLY)?GENERIC_READ:(GENERIC_READ | GENERIC_WRITE),
+	//	FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, dwMode,
+	//	(m == O_RDONLY)?FILE_ATTRIBUTE_READONLY:FILE_ATTRIBUTE_NORMAL,
+	//	NULL);
+    fd = CreateFileA(name,
 		(m == O_RDONLY)?GENERIC_READ:(GENERIC_READ | GENERIC_WRITE),
 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, dwMode,
 		(m == O_RDONLY)?FILE_ATTRIBUTE_READONLY:FILE_ATTRIBUTE_NORMAL,
 		NULL);
+    //End of adapter libtiff for x64 target
 	if (fd == INVALID_HANDLE_VALUE) {
 		TIFFErrorExt(0, module, "%s: Cannot open", name);
 		return ((TIFF *)0);
 	}
 
-	tif = TIFFFdOpen((int)fd, name, mode);
+	tif = TIFFFdOpen(fd, name, mode);
 	if(!tif)
 		CloseHandle(fd);
 	return tif;
@@ -318,7 +432,7 @@
 				    NULL, NULL);
 	}
 
-	tif = TIFFFdOpen((int)fd,
+	tif = TIFFFdOpen(fd,
 			 (mbname != NULL) ? mbname : "<unknown>", mode);
 	if(!tif)
 		CloseHandle(fd);
Index: src/tiff/libtiff/tiffio.h
===================================================================
--- src/tiff/libtiff/tiffio.h	(revision 76591)
+++ src/tiff/libtiff/tiffio.h	(working copy)
@@ -76,9 +76,9 @@
 typedef tmsize_t tsize_t;       /* i/o size in bytes */
 typedef void* tdata_t;          /* image data ref */
 
-#if !defined(__WIN32__) && (defined(_WIN32) || defined(WIN32))
-#define __WIN32__
-#endif
+//#if !defined(__WIN32__) && (defined(_WIN32) || defined(WIN32))
+//#define __WIN32__
+//#endif
 
 /*
  * On windows you should define USE_WIN32_FILEIO if you are using tif_win32.c
@@ -86,12 +86,15 @@
  *
  * By default tif_unix.c is assumed.
  */
+/*
+//#if defined(_WINDOWS) || defined(__WIN32__) || defined(_Windows)
+//#  if !defined(__CYGWIN) && !defined(AVOID_WIN32_FILEIO) && !defined(USE_WIN32_FILEIO)
+//#    define AVOID_WIN32_FILEIO
+//#  endif
+//#endif
+*/
 
-#if defined(_WINDOWS) || defined(__WIN32__) || defined(_Windows)
-#  if !defined(__CYGWIN) && !defined(AVOID_WIN32_FILEIO) && !defined(USE_WIN32_FILEIO)
-#    define AVOID_WIN32_FILEIO
-#  endif
-#endif
+#include "preprocessor.h"
 
 #if defined(USE_WIN32_FILEIO)
 # define VC_EXTRALEAN
@@ -101,8 +104,13 @@
 # else
 typedef HFILE thandle_t;       /* client data handle */
 # endif /* __WIN32__ */
-#else
-typedef void* thandle_t;       /* client data handle */
+//Begin of adapter libtiff for x64 target
+//#else
+//typedef void* thandle_t;       /* client data handle */
+#elif defined(AVOID_WIN32_FILEIO) /*use tif_unix.c */
+typedef int thandle_t;
+#else                             /*use tif_stream.cxx */
+typedef void* thandle_t;
 #endif /* USE_WIN32_FILEIO */
 
 /*
@@ -368,8 +376,12 @@
 extern tmsize_t TIFFVTileSize(TIFF* tif, uint32 nrows);
 extern uint32 TIFFDefaultStripSize(TIFF* tif, uint32 request);
 extern void TIFFDefaultTileSize(TIFF*, uint32*, uint32*);
-extern int TIFFFileno(TIFF*);
-extern int TIFFSetFileno(TIFF*, int);
+//Begin of adapter libtiff for x64 target
+//extern int TIFFFileno(TIFF*);
+//extern int TIFFSetFileno(TIFF*, int);
+extern thandle_t TIFFFileno(TIFF*);
+extern thandle_t TIFFSetFileno(TIFF*, thandle_t);
+//End of adapter libtiff for x64 target
 extern thandle_t TIFFClientdata(TIFF*);
 extern thandle_t TIFFSetClientdata(TIFF*, thandle_t);
 extern int TIFFGetMode(TIFF*);
@@ -437,7 +449,10 @@
 # ifdef __WIN32__
 extern TIFF* TIFFOpenW(const wchar_t*, const char*);
 # endif /* __WIN32__ */
-extern TIFF* TIFFFdOpen(int, const char*, const char*);
+//Begin of adapter libtiff for x64 target
+//extern TIFF* TIFFFdOpen(int, const char*, const char*);
+extern TIFF* TIFFFdOpen(thandle_t, const char*, const char*);
+//End of adapter libtiff for x64 target
 extern TIFF* TIFFClientOpen(const char*, const char*,
 	    thandle_t,
 	    TIFFReadWriteProc, TIFFReadWriteProc,
Index: src/tiff/libtiff/tiffiop.h
===================================================================
--- src/tiff/libtiff/tiffiop.h	(revision 76591)
+++ src/tiff/libtiff/tiffiop.h	(working copy)
@@ -95,7 +95,9 @@
 
 struct tiff {
 	char*                tif_name;         /* name of open file */
-	int                  tif_fd;           /* open file descriptor */
+	//int                  tif_fd;         /* open file descriptor */
+	//Adapter libtiff for x64 target :
+	thandle_t            tif_fd;
 	int                  tif_mode;         /* open mode (O_*) */
 	uint32               tif_flags;
 	#define TIFF_FILLORDER   0x00003 /* natural bit fill order for machine */

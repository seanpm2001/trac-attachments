Index: src/tiff/libtiff/tif_open.c
===================================================================
--- src/tiff/libtiff/tif_open.c	(revision 76591)
+++ src/tiff/libtiff/tif_open.c	(working copy)
@@ -512,7 +512,10 @@
 /*
  * Return open file's I/O descriptor.
  */
-int
+//Begin of adapter libtiff for x64 target
+//int
+thandle_t
+//End of adapter libtiff for x64 target
 TIFFFileno(TIFF* tif)
 {
 	return (tif->tif_fd);
@@ -521,10 +524,17 @@
 /*
  * Set open file's I/O descriptor, and return previous value.
  */
-int
-TIFFSetFileno(TIFF* tif, int fd)
+//Begin of adapter libtiff for x64 target
+//int
+//TIFFSetFileno(TIFF* tif, int fd)
+thandle_t
+TIFFSetFileno(TIFF* tif, thandle_t fd)
+//End of adapter libtiff for x64 target
 {
-        int old_fd = tif->tif_fd;
+    //Begin of adapter libtiff for x64 target
+     //   int old_fd = tif->tif_fd;
+    thandle_t old_fd = tif->tif_fd;
+    //End of adapter libtiff for x64 target
 	tif->tif_fd = fd;
 	return old_fd;
 }
Index: src/tiff/libtiff/tif_win32.c
===================================================================
--- src/tiff/libtiff/tif_win32.c	(revision 76591)
+++ src/tiff/libtiff/tif_win32.c	(working copy)
@@ -133,8 +133,12 @@
 _tiffSizeProc(thandle_t fd)
 {
 	ULARGE_INTEGER m;
-	m.LowPart=GetFileSize(fd,&m.HighPart);
-	return(m.QuadPart);
+	//Begin of adapter libtiff for x64 target
+	//m.LowPart=GetFileSize(fd,&m.HighPart);
+	//return(m.QuadPart);
+	return GetFileSizeEx(fd, (PLARGE_INTEGER)&m) ? (m.QuadPart) : (__int64)-1;
+    //End of adapter libtiff for x64 target
+
 }
 
 static int
@@ -204,7 +208,8 @@
  * string, which forces the file to be opened unmapped.
  */
 TIFF*
-TIFFFdOpen(int ifd, const char* name, const char* mode)
+//TIFFFdOpen(int ifd, const char* name, const char* mode)
+TIFFFdOpen(thandle_t ifd, const char* name, const char* mode)
 {
 	TIFF* tif;
 	int fSuppressMap;
@@ -252,18 +257,26 @@
 		case O_RDWR|O_CREAT|O_TRUNC:	dwMode = CREATE_ALWAYS; break;
 		default:			return ((TIFF*)0);
 	}
-
-	fd = (thandle_t)CreateFileA(name,
+    //Begin of adapter libtiff for x64 target
+	//fd = (thandle_t)CreateFileA(name,
+    //                (m == O_RDONLY)?GENERIC_READ:(GENERIC_READ | GENERIC_WRITE),
+	//	FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, dwMode,
+	//	(m == O_RDONLY)?FILE_ATTRIBUTE_READONLY:FILE_ATTRIBUTE_NORMAL,
+	//	NULL);
+    fd = CreateFileA(name,
 		(m == O_RDONLY)?GENERIC_READ:(GENERIC_READ | GENERIC_WRITE),
 		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, dwMode,
 		(m == O_RDONLY)?FILE_ATTRIBUTE_READONLY:FILE_ATTRIBUTE_NORMAL,
 		NULL);
+    //End of adapter libtiff for x64 target
 	if (fd == INVALID_HANDLE_VALUE) {
 		TIFFErrorExt(0, module, "%s: Cannot open", name);
 		return ((TIFF *)0);
 	}
-
-	tif = TIFFFdOpen((int)fd, name, mode);
+    //Begin of adapter libtiff for x64 target
+	//tif = TIFFFdOpen((int)fd, name, mode);
+        tif = TIFFFdOpen(fd, name, mode);
+    //End of adapter libtiff for x64 target	
 	if(!tif)
 		CloseHandle(fd);
 	return tif;
@@ -317,8 +330,10 @@
 		WideCharToMultiByte(CP_ACP, 0, name, -1, mbname, mbsize,
 				    NULL, NULL);
 	}
-
-	tif = TIFFFdOpen((int)fd,
+    //Begin of adapter libtiff for x64 target
+	//tif = TIFFFdOpen((int)fd,
+	tif = TIFFFdOpen(fd,
+    //End of adapter libtiff for x64 target
 			 (mbname != NULL) ? mbname : "<unknown>", mode);
 	if(!tif)
 		CloseHandle(fd);
Index: src/tiff/libtiff/tiffio.h
===================================================================
--- src/tiff/libtiff/tiffio.h	(revision 76591)
+++ src/tiff/libtiff/tiffio.h	(working copy)
@@ -368,8 +368,12 @@
 extern tmsize_t TIFFVTileSize(TIFF* tif, uint32 nrows);
 extern uint32 TIFFDefaultStripSize(TIFF* tif, uint32 request);
 extern void TIFFDefaultTileSize(TIFF*, uint32*, uint32*);
-extern int TIFFFileno(TIFF*);
-extern int TIFFSetFileno(TIFF*, int);
+//Begin of adapter libtiff for x64 target
+//extern int TIFFFileno(TIFF*);
+//extern int TIFFSetFileno(TIFF*, int);
+extern thandle_t TIFFFileno(TIFF*);
+extern thandle_t TIFFSetFileno(TIFF*, thandle_t);
+//End of adapter libtiff for x64 target
 extern thandle_t TIFFClientdata(TIFF*);
 extern thandle_t TIFFSetClientdata(TIFF*, thandle_t);
 extern int TIFFGetMode(TIFF*);
@@ -437,7 +441,10 @@
 # ifdef __WIN32__
 extern TIFF* TIFFOpenW(const wchar_t*, const char*);
 # endif /* __WIN32__ */
-extern TIFF* TIFFFdOpen(int, const char*, const char*);
+//Begin of adapter libtiff for x64 target
+//extern TIFF* TIFFFdOpen(int, const char*, const char*);
+extern TIFF* TIFFFdOpen(thandle_t, const char*, const char*);
+//End of adapter libtiff for x64 target
 extern TIFF* TIFFClientOpen(const char*, const char*,
 	    thandle_t,
 	    TIFFReadWriteProc, TIFFReadWriteProc,
Index: src/tiff/libtiff/tiffiop.h
===================================================================
--- src/tiff/libtiff/tiffiop.h	(revision 76591)
+++ src/tiff/libtiff/tiffiop.h	(working copy)
@@ -95,7 +95,9 @@
 
 struct tiff {
 	char*                tif_name;         /* name of open file */
-	int                  tif_fd;           /* open file descriptor */
+	//int                  tif_fd;         /* open file descriptor */
+	//Adapter libtiff for x64 target :
+	thandle_t            tif_fd;
 	int                  tif_mode;         /* open mode (O_*) */
 	uint32               tif_flags;
 	#define TIFF_FILLORDER   0x00003 /* natural bit fill order for machine */


Index: docs/latex/wx/image.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/image.tex,v
retrieving revision 1.44
diff -u -r1.44 image.tex
--- docs/latex/wx/image.tex	2001/11/27 18:13:05	1.44
+++ docs/latex/wx/image.tex	2001/12/17 10:06:33
@@ -119,7 +119,7 @@
 \twocolitem{\indexit{wxBITMAP\_TYPE\_PNM}}{Load a PNM bitmap file.}
 \twocolitem{\indexit{wxBITMAP\_TYPE\_TIF}}{Load a TIFF bitmap file.}
 \twocolitem{\indexit{wxBITMAP\_TYPE\_XPM}}{Load a XPM bitmap file.}
-\twocolitem{\indexit{wxBITMAP\_TYPE\_ICO}}{Load a ICO Icon file.}
+\twocolitem{\indexit{wxBITMAP\_TYPE\_ICO}}{Load a ICO Icon or CUR cursor file.}
 \twocolitem{\indexit{wxBITMAP\_TYPE\_ANY}}{Will try to autodetect the format.}
 \end{twocollist}}
 
@@ -390,6 +390,7 @@
 For example, when saving as a JPEG file, the option {\bf quality} is
 used, which is a number between 0 and 100 (0 is terrible, 100 is very good).
 
+
 \wxheading{See also}
 
 \helpref{wxImage::SetOption}{wximagesetoption},\rtfsp
@@ -402,6 +403,17 @@
 
 Gets a user-defined option as an integer. The function is case-insensitive to {\it name}.
 
+When reading a CUR format cursor you need to use GetOptionInt to retrieve the hotspot
+\begin{verbatim}
+
+    if (myImage.GetOptionInt ( wxICOTYPE_DOTFILE ) == wxDOTCUR )
+    {
+    int xHS = myImage.GetOptionInt ( wxICOTYPE_HOTX ) ;
+    int yHS = myImage.GetOptionInt ( wxICOTYPE_HOTY ) ;
+    }
+\end{verbatim}
+
+
 \wxheading{See also}
 
 \helpref{wxImage::SetOption}{wximagesetoption},\rtfsp
@@ -481,7 +493,7 @@
 \twocolitem{{\bf wxBITMAP\_TYPE\_PNM}}{Load a PNM image file.}
 \twocolitem{{\bf wxBITMAP\_TYPE\_TIF}}{Load a TIFF image file.}
 \twocolitem{{\bf wxBITMAP\_TYPE\_XPM}}{Load a XPM image file.}
-\twocolitem{{\bf wxBITMAP\_TYPE\_ICO}}{Load a ICO icon file.}
+\twocolitem{{\bf wxBITMAP\_TYPE\_ICO}}{Load a ICO icon or CUR cursor file.}
 \twocolitem{{\bf wxBITMAP\_TYPE\_ANY}}{Will try to autodetect the format.}
 \end{twocollist}}
 
@@ -491,7 +503,7 @@
 
 Depending on how wxWindows has been configured, not all formats may be available.
 
-wxBITMAP\_TYPE\_ICO will laod the largest image found, with the most colours
+wxBITMAP\_TYPE\_ICO will laod the largest image found, with the most colours. You can test if the file was an icon or cursor (i.e. includes a hotpsot) using if (myImage.GetOptionInt ( wxICOTYPE_DOTFILE ) == wxDOTCUR )
 
 \wxheading{Return value}
 
@@ -572,7 +584,7 @@
 \twocolitem{{\bf wxBITMAP\_TYPE\_PNM}}{Save a PNM image file (as raw RGB always).}
 \twocolitem{{\bf wxBITMAP\_TYPE\_TIFF}}{Save a TIFF image file.}
 \twocolitem{{\bf wxBITMAP\_TYPE\_XPM}}{Save a XPM image file.}
-\twocolitem{{\bf wxBITMAP\_TYPE\_ICO}}{Save a ICO image file. (The size may be up to 255 wide by 127 high. A single image is saved in 8 colors at the size supplied.)}
+\twocolitem{{\bf wxBITMAP\_TYPE\_ICO}}{Save a ICO or CUR image file. (The size may be up to 255 wide by 127 high. A single image is saved in 8 colors at the size supplied.)}
 \end{twocollist}}
 
 \docparam{mimetype}{MIME type.}
@@ -585,6 +597,9 @@
 
 Depending on how wxWindows has been configured, not all formats may be available.
 
+
+To save a CUR cursor format file, you need to use \helpref{SetOption}{wximagesetoption} to set the correct format and hot-spot
+
 \wxheading{See also}
 
 \helpref{wxImage::LoadFile}{wximageloadfile}
@@ -744,6 +759,14 @@
 For example, when saving as a JPEG file, the option {\bf quality} is
 used, which is a number between 0 and 100 (0 is terrible, 100 is very good).
 
+When saving a CUR format file, you need indicate that the type is a MS format cursor and the location of the hotspot:
+\begin{verbatim}
+
+    myImage.SetOption ( wxICOTYPE_DOTFILE, wxDOTCUR ) ;
+    myImage.SetOption ( wxICOTYPE_HOTX, (int) x ) ;
+    myImage.SetOption ( wxICOTYPE_HOTY, (int) y ) ;
+\end{verbatim}
+
 \wxheading{See also}
 
 \helpref{wxImage::GetOption}{wximagegetoption},\rtfsp
@@ -875,7 +898,7 @@
 
 If the image file contains more than one image and the image handler is capable 
 of retrieving these individually, this function will return the number of
-available images.
+available images (useful in wxICOHandler, wxTIFFHandler only).
 
 \docparam{stream}{Opened input stream for reading image data. Currently, the stream must support seeking.}
 
@@ -901,7 +924,14 @@
 
 Loads a image from a stream, putting the resulting data into {\it image}. If the image file contains
 more than one image and the image handler is capable of retrieving these individually, {\it index}
-indicates which image to read from the stream.
+indicates which image to read from the stream. (useful in wxTIFFhandler only)
+
+\func{bool}{LoadFile}{\param{wxImgList* }{imglist}, \param{wxInputStream\&}{ stream}, \param{bool}{ verbose=TRUE}, \param{int}{ index=0}}
+
+Loads images from a stream, putting the resulting data into {\it imglist}. This is only implemented
+for wxICOHandler. {\it index} is currently unused. The images are likely to have different sizes
+and original color depths. 
+
 
 \wxheading{Parameters}
 
Index: docs/latex/wx/imaglist.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/imaglist.tex,v
retrieving revision 1.7
diff -u -r1.7 imaglist.tex
--- docs/latex/wx/imaglist.tex	2000/07/15 19:49:54	1.7
+++ docs/latex/wx/imaglist.tex	2001/12/17 10:06:33
@@ -189,6 +189,8 @@
 
 The original bitmap or icon is not affected by the {\bf Replace} operation, and can be deleted afterwards.
 
+A parallel class, wxImgList holds wxImages of variable size
+
 \pythonnote{The second form is called {\tt ReplaceIcon} in wxPython.}
 
 
Index: include/wx/imagbmp.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/imagbmp.h,v
retrieving revision 1.5
diff -u -r1.5 imagbmp.h
--- include/wx/imagbmp.h	2001/11/27 18:13:06	1.5
+++ include/wx/imagbmp.h	2001/12/17 10:06:36
@@ -56,7 +56,9 @@
   virtual bool DoCanRead( wxInputStream& stream );
                                 
 protected:
+
   bool SaveDib(wxImage *image, wxOutputStream& stream, bool verbose, bool IsBmp, bool IsMask);
+
   bool DoLoadDib (wxImage * image, int width, int height, int bpp, int ncolors, int comp,
                 off_t bmpOffset, wxInputStream& stream,
                 bool verbose, bool IsBmp, bool hasPalette  ) ;
@@ -73,6 +75,28 @@
 // wxICOHandler
 // ----------------------------------------------------------------------------
 
+//types of files we can read with this
+enum icoTypes
+{
+    wxDOTICO = 1,
+    wxDOTCUR = 2
+};
+
+//use these when saving as cursor format
+//myImage.SetOption ( wxICOTYPE_DOTFILE, wxDOTCUR ) ;
+//myImage.SetOption ( wxICOTYPE_HOTX, (int) x ) ;
+//myImage.SetOption ( wxICOTYPE_HOTY, (int) y ) ;
+//and these to read
+//if (myImage.GetOptionInt ( wxICOTYPE_DOTFILE ) == wxDOTCUR )
+//{
+//int xHS = myImage.GetOptionInt ( wxICOTYPE_HOTX ) ;
+//int yHS = myImage.GetOptionInt ( wxICOTYPE_HOTY ) ;
+//}
+
+#define wxICOTYPE_DOTFILE wxT("OptionFileType")
+#define wxICOTYPE_HOTX wxT("HotX")
+#define wxICOTYPE_HOTY wxT("HotY")
+
 class WXDLLEXPORT wxICOHandler : public wxBMPHandler
 {
 public:
@@ -89,7 +113,12 @@
   virtual bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=TRUE );
   virtual bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=TRUE, int index=0 );
   virtual bool DoCanRead( wxInputStream& stream );
-                
+
+  virtual int GetImageCount( wxInputStream& WXUNUSED(stream) ) ;
+//code to load a list of images; compare code above to load a single image
+  bool LoadFile ( wxImgList *imgList, const wxString & filename, bool verbose=TRUE, int index=0 ) ;
+  bool LoadFile ( wxImgList *imgList, wxInputStream& stream, bool verbose=TRUE, int index=0)  ;
+
 #endif // wxUSE_STREAMS
 
 private:
Index: include/wx/image.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/image.h,v
retrieving revision 1.57
diff -u -r1.57 image.h
--- include/wx/image.h	2001/11/20 23:54:31	1.57
+++ include/wx/image.h	2001/12/17 10:06:36
@@ -19,6 +19,7 @@
 #include "wx/string.h"
 #include "wx/gdicmn.h"
 #include "wx/bitmap.h"
+#include "wx/imaglist.h"
 
 #if wxUSE_STREAMS
 #  include "wx/stream.h"
@@ -244,7 +245,45 @@
     DECLARE_DYNAMIC_CLASS(wxImage)
 };
 
+//-----------------------------------------------------------------------------
+// wxImgList
+//-----------------------------------------------------------------------------
+
+//and now a class to hold a list of images of differing sizes
+//used in extracting icons; compare wxImageList which stores
+//bitmaps of varying size
 
+class WXDLLEXPORT wxImgList: public wxObject
+{
+public:
+    wxImgList() ;
+    ~wxImgList();
+    bool Create();
+
+    int GetImageCount() const;
+    int Add( const wxImage& Image );
+    //would it be better to avoid copying the image ??
+    //int Add( wxImage * Image );
+
+    const wxImage *GetImage(int index) const;
+    bool GetSize( int index, int &width, int &height ) const;
+
+    bool Replace( int index, const wxImage &Image );
+    bool Remove( int index );
+    bool RemoveAll();
+
+    bool Draw(int index, wxDC& dc, int x, int y,
+              int flags = wxIMAGELIST_DRAW_NORMAL,
+              bool solidBackground = FALSE);
+
+private:
+    wxList  m_images;
+
+    DECLARE_DYNAMIC_CLASS(wxImgList)
+};
+
+
+
 extern void WXDLLEXPORT wxInitAllImageHandlers();
 
 WXDLLEXPORT_DATA(extern wxImage)    wxNullImage;
@@ -262,7 +301,12 @@
 #include "wx/imagpnm.h"
 #include "wx/imagxpm.h"
 
+
+
+
+
 #endif // wxUSE_IMAGE
+
 
 #endif
   // _WX_IMAGE_H_

Index: include/wx/generic/imaglist.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/generic/imaglist.h,v
retrieving revision 1.11
diff -u -r1.11 imaglist.h
--- include/wx/generic/imaglist.h	2000/07/15 19:49:59	1.11
+++ include/wx/generic/imaglist.h	2001/12/17 10:06:36
@@ -27,6 +27,8 @@
  * a variety of sources - a single bitmap plus a colour to indicate the mask,
  * two bitmaps, or an icon.
  *
+ * Compare wxImgList a list of wxImages whose size can and does vary
+ *
  * Image lists can also create and draw images used for drag and drop functionality.
  * This is not yet implemented in wxImageList. We need to discuss a generic API
  * for doing drag and drop and see whether it ties in with the Win95 view of it.
@@ -34,6 +36,8 @@
  * used.
  */
 
+
+ 
 // Flags for Draw
 #define wxIMAGELIST_DRAW_NORMAL         0x0001
 #define wxIMAGELIST_DRAW_TRANSPARENT    0x0002
@@ -79,6 +83,8 @@
 
     DECLARE_DYNAMIC_CLASS(wxImageList)
 };
+
+
 
 #endif  // __IMAGELISTH_G__
 




Index: include/wx/mac/imaglist.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/mac/imaglist.h,v
retrieving revision 1.3
diff -u -r1.3 imaglist.h
--- include/wx/mac/imaglist.h	2001/02/15 21:51:12	1.3
+++ include/wx/mac/imaglist.h	2001/12/17 10:06:37
@@ -143,5 +143,7 @@
 
 };
 
+
+
 #endif
     // _WX_IMAGLIST_H_



Index: include/wx/msw/imaglist.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/msw/imaglist.h,v
retrieving revision 1.4
diff -u -r1.4 imaglist.h
--- include/wx/msw/imaglist.h	2000/07/15 19:50:00	1.4
+++ include/wx/msw/imaglist.h	2001/12/17 10:06:37
@@ -227,5 +227,7 @@
   DECLARE_DYNAMIC_CLASS(wxImageList)
 };
 
+
+
 #endif
     // _WX_IMAGLIST_H_

Index: samples/image/image.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/image/image.cpp,v
retrieving revision 1.61
diff -u -r1.61 image.cpp
--- samples/image/image.cpp	2001/11/22 09:11:28	1.61
+++ samples/image/image.cpp	2001/12/17 10:06:38
@@ -1,3 +1,4 @@
+
 /*
  * Program: image
  *
@@ -57,6 +58,9 @@
     wxBitmap  *my_square;
     wxBitmap  *my_anti;
 
+    wxImage  m_image ;
+    wxImgList * m_imgs ;
+
 protected:
     wxBitmap m_bmpSmileXpm;
     wxIcon   m_iconSmileXpm;
@@ -102,6 +106,8 @@
 
     void OnAbout( wxCommandEvent &event );
     void OnNewFrame( wxCommandEvent &event );
+    void OnLoadFrame( wxCommandEvent &event );
+    void OnSave( wxCommandEvent &event );
     void OnQuit( wxCommandEvent &event );
 
     MyCanvas         *m_canvas;
@@ -362,6 +368,7 @@
     if ( m_bmpSmileXpm.Ok() )
         m_bmpSmileXpm.SaveFile("saved.xpm", wxBITMAP_TYPE_XPM);
 #endif
+    m_imgs = new wxImgList ;
 }
 
 MyCanvas::~MyCanvas()
@@ -377,6 +384,7 @@
     delete my_smile_xbm;
     delete my_square;
     delete my_anti;
+    delete m_imgs ;
 }
 
 void MyCanvas::OnPaint( wxPaintEvent &WXUNUSED(event) )
@@ -384,6 +392,7 @@
     wxPaintDC dc( this );
     PrepareDC( dc );
 
+
     dc.DrawText( "Loaded image", 30, 10 );
     if (my_square && my_square->Ok()) dc.DrawBitmap( *my_square, 30, 30 );
 
@@ -505,6 +514,28 @@
     {
         dc.DrawIcon(m_iconSmileXpm, 150, 2250);
     }
+
+    wxString sTmp = wxT("Not loaded");
+    if ( m_image.Ok() )
+    {
+        sTmp = wxT("ICO icon");
+        if (m_image.GetOptionInt ( wxICOTYPE_DOTFILE ) == wxDOTCUR ) sTmp = wxT("CUR cursor");
+    }
+
+    dc.DrawText(sTmp, 30, 2300);
+    if ( m_image.Ok() )
+    {
+        dc.DrawBitmap(wxBitmap(m_image), 30, 2330, TRUE);
+    }
+
+    sTmp.Printf (wxT("Images (%d frames)"),m_imgs->GetImageCount());
+    dc.DrawText(sTmp, 150, 2300);
+    int i ;
+    for (i=0; i < m_imgs->GetImageCount(); i++)
+    {
+        m_imgs->Draw( i, dc, 150 + i * 75, 2330, wxIMAGELIST_DRAW_TRANSPARENT);
+    }
+
 }
 
 void MyCanvas::CreateAntiAliasedBitmap()
@@ -561,6 +592,8 @@
 const int ID_QUIT  = 108;
 const int ID_ABOUT = 109;
 const int ID_NEW = 110;
+const int ID_LOAD = 111;
+const int ID_SAVE = 112;
 
 IMPLEMENT_DYNAMIC_CLASS( MyFrame, wxFrame )
 
@@ -568,6 +601,9 @@
   EVT_MENU    (ID_ABOUT, MyFrame::OnAbout)
   EVT_MENU    (ID_QUIT,  MyFrame::OnQuit)
   EVT_MENU    (ID_NEW,  MyFrame::OnNewFrame)
+  EVT_MENU    (ID_LOAD,  MyFrame::OnLoadFrame)
+  EVT_MENU    (ID_SAVE,  MyFrame::OnSave)
+  
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
@@ -576,6 +612,8 @@
 {
   wxMenu *file_menu = new wxMenu();
   file_menu->Append( ID_NEW, "&Show image...");
+  file_menu->Append( ID_LOAD, "&Open icon or cursor image...\tCtrl+O");    
+  file_menu->Append( ID_SAVE, "&Save icon or cursor\tCtrl+S");    
   file_menu->AppendSeparator();
   file_menu->Append( ID_ABOUT, "&About...");
   file_menu->AppendSeparator();
@@ -592,8 +630,8 @@
 
   m_canvas = new MyCanvas( this, -1, wxPoint(0,0), wxSize(10,10) );
 
-  // 500 width * 2100 height
-  m_canvas->SetScrollbars( 10, 10, 50, 220 );
+  // 500 width * 2400 height
+  m_canvas->SetScrollbars( 10, 10, 50, 240 );
 }
 
 void MyFrame::OnQuit( wxCommandEvent &WXUNUSED(event) )
@@ -625,6 +663,53 @@
     (new MyImageFrame(this, image.ConvertToBitmap()))->Show();
 }
 
+void MyFrame::OnLoadFrame( wxCommandEvent &WXUNUSED(event) )
+{
+    wxString myFilename ;
+    wxFileDialog dialog(this, "Open", "", myFilename,
+        "MSW Icons (*.ico)|*.ico|MSW Cursors (*.cur)|*.cur|XPM Icons (*.xpm)|*.xpm|All files (*.*)|*.*",
+        wxOPEN); // for opening files
+
+    if (dialog.ShowModal() == wxID_OK)
+    {
+        myFilename = dialog.GetPath() ;
+        //Get the best image
+        m_canvas -> m_image . LoadFile( myFilename );
+        //count the images
+        wxICOHandler iH ;
+        int nImages = iH.GetImageCount (wxFileInputStream (myFilename)) ;
+        wxString sTmp;
+        sTmp.Printf (wxT("There were %d images in the file %s "), nImages, myFilename.c_str());
+        wxMessageBox(sTmp, wxT("Caption"));
+        //now read all the images
+        iH.LoadFile ( m_canvas -> m_imgs, myFilename );
+        m_canvas -> Refresh ();
+    }
+    }
+
+void MyFrame::OnSave( wxCommandEvent &WXUNUSED(event) )
+{
+    wxString myFilename ;
+    wxFileDialog dialog(this, "Save as", "", myFilename,
+    "Icons (*.ico)|*.ico|Cursors (*.cur)|*.cur|All files (*.*)|*.*",
+    wxSAVE|wxOVERWRITE_PROMPT);
+
+
+    if ( (dialog.ShowModal() == wxID_OK) && m_canvas -> m_image.Ok() )
+    {
+        myFilename = dialog.GetPath() ;
+        wxString ext = myFilename.AfterLast(wxT('.'));
+        if ((ext.IsSameAs(wxT("cur"),FALSE)) && m_canvas -> m_image . Ok() )
+            {
+            m_canvas -> m_image . SetOption ( wxICOTYPE_DOTFILE, wxDOTCUR ) ;
+            m_canvas -> m_image . SetOption ( wxICOTYPE_HOTX, 0 ); 
+            m_canvas -> m_image . SetOption ( wxICOTYPE_HOTY, 0 ) ;
+            }
+
+        m_canvas -> m_image . SaveFile (myFilename, wxBITMAP_TYPE_ICO);
+    }
+
+}
 //-----------------------------------------------------------------------------
 // MyApp
 //-----------------------------------------------------------------------------
@@ -658,6 +743,9 @@
 #if wxUSE_XPM
   wxImage::AddHandler( new wxXPMHandler );
 #endif
+
+
+  wxImage::AddHandler( new wxICOHandler );
 
   wxFrame *frame = new MyFrame();
   frame->Show( TRUE );

Index: src/common/imagbmp.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/imagbmp.cpp,v
retrieving revision 1.23
diff -u -r1.23 imagbmp.cpp
--- src/common/imagbmp.cpp	2001/11/27 18:13:06	1.23
+++ src/common/imagbmp.cpp	2001/12/17 10:06:40
@@ -2,7 +2,7 @@
 // Name:        imagbmp.cpp
 // Purpose:     wxImage BMP handler
 // Author:      Robert Roebling
-// RCS-ID:      $Id: imagbmp.cpp,v 1.23 2001/11/27 18:13:06 VS Exp $
+// RCS-ID:      $Id: imagbmp.cpp,v 1.22 2001/11/20 23:55:44 VS Exp $
 // Copyright:   (c) Robert Roebling
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -56,6 +56,8 @@
 #if wxUSE_STREAMS
 
 
+
+
 #ifndef BI_RGB
 #define BI_RGB       0
 #define BI_RLE8      1
@@ -76,8 +78,10 @@
     wxUint8         bHeight;              // Height of the image (times 2)
     wxUint8         bColorCount;          // Number of colors in image (0 if >=8bpp)
     wxUint8         bReserved;            // Reserved
-    wxUint16        wPlanes;              // Color Planes
-    wxUint16        wBitCount;            // Bits per pixel
+    //next two are different in icons and cursors 
+                                          // icon           or  cursor
+    wxUint16        wPlanes;              // Color Planes   or  XHotSpot
+    wxUint16        wBitCount;            // Bits per pixel or  YHotSpot
     wxUint32        dwBytesInRes;         // how many bytes in this resource?
     wxUint32        dwImageOffset;        // where in the file is this image
 } ;
@@ -86,10 +90,12 @@
 struct ICONDIR
 {
     wxUint16     idReserved;   // Reserved
-    wxUint16     idType;       // resource type (1 for icons)
+    wxUint16     idType;       // resource type (1 for icons, 2 for cursors)
     wxUint16     idCount;      // how many images?
 } ;
 
+
+
 bool wxICOHandler::SaveFile(wxImage *image,
                             wxOutputStream& stream,
                             bool verbose)
@@ -112,6 +118,9 @@
 
     // only generate one image
     int m_images = 1 ;
+    //default is to save as an icon
+    int m_type = 1;
+    if ( (image -> GetOptionInt ( wxICOTYPE_DOTFILE )) == wxDOTCUR ) m_type = 2;
 
     // write a header, (ICONDIR)
     // Calculate the header size
@@ -119,7 +128,7 @@
 
     ICONDIR m_IconDir ;
     m_IconDir.idReserved = 0 ;
-    m_IconDir.idType = wxUINT16_SWAP_ON_BE (1);
+    m_IconDir.idType = wxUINT16_SWAP_ON_BE (m_type);
     m_IconDir.idCount = wxUINT16_SWAP_ON_BE (m_images);
     stream.Write(&m_IconDir.idReserved, sizeof(m_IconDir.idReserved));
     stream.Write(&m_IconDir.idType, sizeof(m_IconDir.idType));
@@ -210,6 +219,12 @@
         m_icondirentry. bReserved = 0 ;
         m_icondirentry. wPlanes = wxUINT16_SWAP_ON_BE(1);
         m_icondirentry. wBitCount = wxUINT16_SWAP_ON_BE(wxBMP_8BPP) ;
+        if (m_type == 2)
+        {
+            // actually write the values of the hot spot here
+            m_icondirentry. wPlanes = wxUINT16_SWAP_ON_BE(image -> GetOptionInt ( wxICOTYPE_HOTX ));
+            m_icondirentry. wBitCount = wxUINT16_SWAP_ON_BE(image -> GetOptionInt ( wxICOTYPE_HOTY )) ;
+        }
         m_icondirentry. dwBytesInRes = wxUINT32_SWAP_ON_BE(m_Size);
         m_icondirentry. dwImageOffset = wxUINT32_SWAP_ON_BE(m_offset);
 
@@ -257,7 +272,7 @@
 bool wxBMPHandler::SaveFile(wxImage *image,
                             wxOutputStream& stream,
                             bool verbose)
-{
+{      
     bool IsBmp = TRUE;
     bool IsMask = FALSE ;
     return SaveDib( image, stream, verbose, IsBmp, IsMask ) ;
@@ -357,12 +372,12 @@
     hdr.width = wxUINT32_SWAP_ON_BE(image->GetWidth());
     if (IsBmp)
     {
-    hdr.height = wxUINT32_SWAP_ON_BE(image->GetHeight());
+        hdr.height = wxUINT32_SWAP_ON_BE(image->GetHeight());
     }
     else
     {
         hdr.height = wxUINT32_SWAP_ON_BE(2 * image->GetHeight());
-    }    
+    }
     hdr.planes = wxUINT16_SWAP_ON_BE(1); // always 1 plane
     hdr.bpp = wxUINT16_SWAP_ON_BE(bpp);
     hdr.compression = 0; // RGB uncompressed
@@ -370,44 +385,44 @@
     hdr.h_res = hdr.v_res = wxUINT32_SWAP_ON_BE(72);  // 72dpi is standard
     hdr.num_clrs = wxUINT32_SWAP_ON_BE(palette_size); // # colors in colormap
     hdr.num_signif_clrs = 0;     // all colors are significant
-
+    
     if (IsBmp)
     {
-    if (// VS: looks ugly but compilers tend to do ugly things with structs,
-        //     like aligning hdr.filesize's ofset to dword :(
-        // VZ: we should add padding then...
-        !stream.Write(&hdr.magic, 2) ||
-        !stream.Write(&hdr.filesize, 4) ||
-        !stream.Write(&hdr.reserved, 4) ||
-             !stream.Write(&hdr.data_offset, 4) 
-            )
-         {
-             if (verbose)
-                 wxLogError(_("BMP: Couldn't write the file (Bitmap) header."));
-             return FALSE;
-         }
-     }
-     if (!IsMask)
-     {
-        if (
-        !stream.Write(&hdr.bih_size, 4) ||
-        !stream.Write(&hdr.width, 4) ||
-        !stream.Write(&hdr.height, 4) ||
-        !stream.Write(&hdr.planes, 2) ||
-        !stream.Write(&hdr.bpp, 2) ||
-        !stream.Write(&hdr.compression, 4) ||
-        !stream.Write(&hdr.size_of_bmp, 4) ||
-        !stream.Write(&hdr.h_res, 4) ||
-        !stream.Write(&hdr.v_res, 4) ||
-        !stream.Write(&hdr.num_clrs, 4) ||
-        !stream.Write(&hdr.num_signif_clrs, 4)
-       )
+        if (// VS: looks ugly but compilers tend to do ugly things with structs,
+            //     like aligning hdr.filesize's ofset to dword :(
+            // VZ: we should add padding then...
+            !stream.Write(&hdr.magic, 2) ||
+            !stream.Write(&hdr.filesize, 4) ||
+            !stream.Write(&hdr.reserved, 4) ||
+            !stream.Write(&hdr.data_offset, 4) 
+           )
+        {
+            if (verbose)
+                wxLogError(_("BMP: Couldn't write the file (Bitmap) header."));
+            return FALSE;
+        }
+    }
+    if (!IsMask)
     {
-        if (verbose)
-                 wxLogError(_("BMP: Couldn't write the file (BitmapInfo) header."));
-        return FALSE;
+        if (
+            !stream.Write(&hdr.bih_size, 4) ||
+            !stream.Write(&hdr.width, 4) ||
+            !stream.Write(&hdr.height, 4) ||
+            !stream.Write(&hdr.planes, 2) ||
+            !stream.Write(&hdr.bpp, 2) ||
+            !stream.Write(&hdr.compression, 4) ||
+            !stream.Write(&hdr.size_of_bmp, 4) ||
+            !stream.Write(&hdr.h_res, 4) ||
+            !stream.Write(&hdr.v_res, 4) ||
+            !stream.Write(&hdr.num_clrs, 4) ||
+            !stream.Write(&hdr.num_signif_clrs, 4)
+           )
+        {
+            if (verbose)
+                wxLogError(_("BMP: Couldn't write the file (BitmapInfo) header."));
+            return FALSE;
+        }
     }
-     }
 
     wxPalette *palette = NULL; // entries for quantized images
     wxUint8 *rgbquad = NULL;   // for the RGBQUAD bytes for the colormap
@@ -475,18 +490,18 @@
     {
         if (!IsMask)
         {
-        if (!stream.Write(rgbquad, palette_size*4))
-        {
-            if (verbose)
-                wxLogError(_("BMP: Couldn't write RGB color map."));
-            delete [] rgbquad;
+            if (!stream.Write(rgbquad, palette_size*4))
+            {
+                if (verbose)
+                    wxLogError(_("BMP: Couldn't write RGB color map."));
+                delete [] rgbquad;
 #if wxUSE_PALETTE
-            delete palette;
+                delete palette;
 #endif // wxUSE_PALETTE
-            delete q_image;
-            return FALSE;
-        }
-        }
+                delete q_image;
+                return FALSE;
+            }
+            }
         delete []rgbquad;
     }
 
@@ -629,8 +644,6 @@
 }
 
 
-
-
 bool wxBMPHandler::DoLoadDib (wxImage * image, int width, int height, int bpp, int ncolors, int comp,
                 off_t bmpOffset, wxInputStream& stream,
                 bool verbose, bool IsBmp, bool hasPalette  )
@@ -1062,8 +1075,15 @@
     //Read a single DIB fom the file
     return LoadDib ( image, stream, verbose, IsBmp ) ;
 }
-
 
+int wxICOHandler::GetImageCount( wxInputStream& stream ) 
+{
+    ICONDIR m_IconDir ;
+    stream.SeekI (0);
+    stream.Read (&m_IconDir, sizeof(m_IconDir));
+    wxUint16 nIcons = wxUINT16_SWAP_ON_BE ( m_IconDir.idCount ) ;
+    return (int) nIcons ;    
+}
 
 bool wxICOHandler::LoadFile ( wxImage *image, wxInputStream& stream, bool verbose, int WXUNUSED(index) )
 {
@@ -1071,8 +1091,11 @@
     bool IsBmp = FALSE;
 
     ICONDIR m_IconDir ;
+    stream.SeekI (0);
     stream.Read (&m_IconDir, sizeof(m_IconDir));
     wxUint16 nIcons = wxUINT16_SWAP_ON_BE ( m_IconDir.idCount ) ;
+    // nType is 1 for Icons, 2 for Cursors
+    wxUint16 nType = wxUINT16_SWAP_ON_BE ( m_IconDir.idType );
 
     //loop round the icons and choose the best one
     ICONDIRENTRY * pIconDirEntry = new ICONDIRENTRY [nIcons];
@@ -1108,11 +1131,87 @@
         pCurrentEntry = pIconDirEntry + iSel ;
         stream.SeekI (wxUINT32_SWAP_ON_BE ( pCurrentEntry -> dwImageOffset ), wxFromStart ) ;
         bResult = LoadDib ( image,  stream, TRUE, IsBmp );
+        if ((bResult) && (nType == wxDOTCUR))
+        {
+            //it is a cursor we have just read
+            image -> SetOption ( wxICOTYPE_DOTFILE, wxDOTCUR ) ;
+            image -> SetOption (wxICOTYPE_HOTX, wxUINT16_SWAP_ON_BE(pCurrentEntry -> wPlanes  ) );
+            image -> SetOption (wxICOTYPE_HOTY, wxUINT16_SWAP_ON_BE(pCurrentEntry -> wBitCount) );
+        }
     }
     delete [] pIconDirEntry  ;
-    return bResult    ;
+    return bResult ;
+}
+
+//code to load a list of images; compare code above to load a single image
+bool wxICOHandler::LoadFile ( wxImgList *imgList, const wxString & filename, bool verbose, int index ) 
+{
+    if (wxFileExists(filename))
+    {
+        wxFileInputStream stream(filename);
+        wxBufferedInputStream bstream( stream );
+        return LoadFile(imgList, bstream, verbose, index);
+    }
+    else
+    {
+        wxLogError( _("Can't load ImgList from file '%s': file does not exist."), filename.c_str() );
+        return FALSE;
+    }
 }
 
+//Code very similar to loading a single image
+bool wxICOHandler::LoadFile ( wxImgList *imgList, wxInputStream& stream, bool verbose, int index)  
+{
+    bool bResult = FALSE ;
+    bool IsBmp = FALSE;
+    imgList -> RemoveAll();
+
+    ICONDIR m_IconDir ;
+    stream.SeekI (0);
+    stream.Read (&m_IconDir, sizeof(m_IconDir));
+    wxUint16 nIcons = wxUINT16_SWAP_ON_BE ( m_IconDir.idCount ) ;
+    wxUint16 nType = wxUINT16_SWAP_ON_BE ( m_IconDir.idType );
+
+    //loop round the icons and copy them all
+    ICONDIRENTRY * pIconDirEntry = new ICONDIRENTRY [nIcons];
+    ICONDIRENTRY * pCurrentEntry = pIconDirEntry ;
+    int i ;
+    for (i=0; i < nIcons ; i++ )
+    {
+        stream.Read(pCurrentEntry, sizeof(ICONDIRENTRY));
+        pCurrentEntry ++ ;
+    }
+    if (!stream.IsOk())
+    {
+        wxLogError( _("ICO LIST Error reading header.") );
+        return FALSE;
+    }
+    
+    for (i=0; i < nIcons ; i++ )
+    {
+        //seek to selected icon
+        pCurrentEntry = pIconDirEntry + i ;
+        stream.SeekI (wxUINT32_SWAP_ON_BE ( pCurrentEntry -> dwImageOffset ), wxFromStart ) ;
+        wxImage * image = new wxImage ;
+        bResult = LoadDib ( image,  stream, TRUE, IsBmp );
+        if (!bResult)
+            {
+                wxLogError( _("ICO LIST Error reading icon %d ."), i );
+                delete [] pIconDirEntry  ;
+                return FALSE;
+            }
+        if ((bResult) && (nType == wxDOTCUR))
+        {
+            //it is a cursor we have just read
+            image -> SetOption ( wxICOTYPE_DOTFILE, wxDOTCUR ) ;
+            image -> SetOption (wxICOTYPE_HOTX, wxUINT16_SWAP_ON_BE(pCurrentEntry -> wPlanes  ) );
+            image -> SetOption (wxICOTYPE_HOTX, wxUINT16_SWAP_ON_BE(pCurrentEntry -> wBitCount) );
+        }
+        imgList -> Add (*image) ;
+    }
+    delete [] pIconDirEntry  ;
+    return bResult ;
+}
 
 bool wxBMPHandler::DoCanRead( wxInputStream& stream )
 {
@@ -1127,9 +1226,11 @@
 {
     unsigned char hdr[4];
 
+    stream.SeekI (0);
     stream.Read(hdr, 4);
     stream.SeekI(-4, wxFromCurrent);
-    return (hdr[0] == '\0' && hdr[1] == '\0' && hdr[2] == '\1' && hdr[3] == '\0');
+    //hdr[2] is one for an icon and two for a cursor
+    return (hdr[0] == '\0' && hdr[1] == '\0' && (hdr[2] == '\1' || hdr[2] == '\2') && hdr[3] == '\0');
 }
 
 #endif // wxUSE_STREAMS
Index: src/common/image.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/image.cpp,v
retrieving revision 1.132
diff -u -r1.132 image.cpp
--- src/common/image.cpp	2001/11/20 23:54:50	1.132
+++ src/common/image.cpp	2001/12/17 10:06:40
@@ -1600,4 +1600,129 @@
     return rotated;
 }
 
+//-----------------------------------------------------------------------------
+//  wxImgList - a class of variable size images; compare wxImageList 
+//  which stores fixed sized bitmaps
+//-----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxImgList, wxObject)
+
+wxImgList::wxImgList( )
+{
+    (void)Create();
+}
+
+wxImgList::~wxImgList()
+{
+}
+
+int wxImgList::GetImageCount() const
+{
+    return m_images.Number();
+}
+
+
+bool wxImgList::Create()
+{
+    m_images.DeleteContents( TRUE );
+    return TRUE;
+}
+
+int wxImgList::Add( const wxImage &Image )
+{
+    wxImage * newImage = new wxImage(Image.Copy());
+    m_images.Append( newImage );
+    return m_images.Number()-1;
+}
+
+
+//would it be better to avoid copying the image ??
+/*
+int wxImgList::Add( wxImage * Image )
+{
+    m_images.Append( Image );
+    return m_images.Number()-1;
+}
+
+*/
+const wxImage *wxImgList::GetImage( int index ) const
+{
+    wxNode *node = m_images.Nth( index );
+
+    wxCHECK_MSG( node, (wxImage *) NULL, wxT("wrong index in image list") );
+
+    return (wxImage*)node->Data();
+}
+
+bool wxImgList::Replace( int index, const wxImage &Image )
+{
+    wxNode *node = m_images.Nth( index );
+
+    wxCHECK_MSG( node, FALSE, wxT("wrong index in image list") );
+
+    wxImage* newImage = new wxImage(Image.Copy()) ;
+
+    if (index == m_images.Number()-1)
+    {
+        m_images.DeleteNode( node );
+        m_images.Append( newImage );
+    }
+    else
+    {
+        wxNode *next = node->Next();
+        m_images.DeleteNode( node );
+        m_images.Insert( next, newImage );
+    }
+
+    return TRUE;
+}
+
+bool wxImgList::Remove( int index )
+{
+    wxNode *node = m_images.Nth( index );
+
+    wxCHECK_MSG( node, FALSE, wxT("wrong index in image list") );
+
+    m_images.DeleteNode( node );
+
+    return TRUE;
+}
+
+bool wxImgList::RemoveAll()
+{
+    m_images.Clear();
+
+    return TRUE;
+}
+
+bool wxImgList::GetSize( int index, int &width, int &height ) const
+{
+    width = 0;
+    height = 0;
+
+    wxNode *node = m_images.Nth( index );
+
+    wxCHECK_MSG( node, FALSE, wxT("wrong index in image list") );
+
+    wxImage *im = (wxImage*)node->Data();
+    width = im->GetWidth();
+    height = im->GetHeight();
+
+    return TRUE;
+}
+
+bool wxImgList::Draw( int index, wxDC &dc, int x, int y,
+                        int flags, bool WXUNUSED(solidBackground) )
+{
+    wxNode *node = m_images.Nth( index );
+
+    wxCHECK_MSG( node, FALSE, wxT("wrong index in image list") );
+
+    wxImage *im = (wxImage*)node->Data();
+
+    dc.DrawBitmap( im->ConvertToBitmap(), x, y, (flags & wxIMAGELIST_DRAW_TRANSPARENT) > 0 );
+
+    return TRUE;
+}
+
 #endif // wxUSE_IMAGE




















Index: src/generic/imaglist.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/generic/imaglist.cpp,v
retrieving revision 1.24
diff -u -r1.24 imaglist.cpp
--- src/generic/imaglist.cpp	2001/11/15 03:07:39	1.24
+++ src/generic/imaglist.cpp	2001/12/17 10:06:41
@@ -173,4 +173,9 @@
     return TRUE;
 }
 
+//-----------------------------------------------------------------------------
+//  wxImgList - a class of variable size images; see common/image.cpp
+//-----------------------------------------------------------------------------
+
+
 







 	  	 

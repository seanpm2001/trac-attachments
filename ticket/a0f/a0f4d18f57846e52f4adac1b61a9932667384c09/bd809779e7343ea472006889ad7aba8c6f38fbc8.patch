Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 72557)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3340,7 +3340,10 @@
 
 <set var="WEBVIEW_SRC_PLATFORM">
     <if cond="TOOLKIT=='MSW'">src/msw/webview_ie.cpp</if>
-    <if cond="TOOLKIT=='GTK'">src/gtk/webview_webkit.cpp</if>
+    <if cond="TOOLKIT=='GTK'">
+        src/gtk/webview_cookie_jar.cpp
+        src/gtk/webview_webkit.cpp
+    </if>
     <if cond="PLATFORM_MACOSX=='1'">src/osx/webview_webkit.mm</if>
 </set>
 <set var="WEBVIEW_SRC" hints="files">
@@ -3358,6 +3361,7 @@
     </if>
     <if cond="TOOLKIT=='GTK'">
         wx/gtk/webviewhistoryitem_webkit.h
+        wx/gtk/webview_cookie_jar.cpp
         wx/gtk/webview_webkit.h
     </if>
     <if cond="PLATFORM_MACOSX=='1'">
Index: include/wx/gtk/webview_cookie_jar.h
===================================================================
--- include/wx/gtk/webview_cookie_jar.h	(revision 0)
+++ include/wx/gtk/webview_cookie_jar.h	(revision 0)
@@ -0,0 +1,31 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        include/wx/gtk/webview_cookie_jar.h
+// Purpose:     GTK WebKit cookie jar header
+// Author:      Stefano Mtangoo
+// Id:          $Id:$
+// Copyright:   (c) 2012 Hosanna Higher Technologies
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GTK_WEBVIEWCOOKIEJAR_H_
+#define _WX_GTK_WEBVIEWCOOKIEJAR_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_WEBVIEW && wxUSE_WEBVIEW_WEBKIT && defined(__WXGTK__)
+
+typedef struct _SoupCookieJar SoupCookieJar;
+
+class WXDLLIMPEXP_WEBVIEW wxWebViewCookieJar 
+{
+public:
+    wxWebViewCookieJar(const wxString& path);
+    virtual bool AddCookie(const wxString& name, const wxString& value, const wxString& domain, const wxString& path = wxEmptyString, const int age = 0);
+    virtual bool RemoveCookiesByName(const wxString& name);
+    virtual bool RemoveCookiesByDomain(const wxString& domain);
+
+private:
+    SoupCookieJar* m_cookieJar;
+};
+
+#endif // wxUSE_WEBVIEW && wxUSE_WEBVIEW_WEBKIT && defined(__WXGTK__)
Index: include/wx/gtk/webview_webkit.h
===================================================================
--- include/wx/gtk/webview_webkit.h	(revision 72557)
+++ include/wx/gtk/webview_webkit.h	(working copy)
@@ -119,6 +119,11 @@
 
     virtual void* GetNativeBackend() const { return m_web_view; }
 
+    //Cookies
+    virtual void SetCookieJar(wxWebViewCookieJar* jar); 
+    virtual wxWebViewCookieJar* GetCookieJar() const; 
+    virtual bool HasCookieJar() const;     
+
     /** TODO: check if this can be made private
      * The native control has a getter to check for busy state, but except in
      * very recent versions of webkit this getter doesn't say everything we need
@@ -161,6 +166,9 @@
     wxString m_findText;
     int m_findPosition;
     int m_findCount;
+    
+    //cookie jar
+    wxWebViewCookieJar* m_cookieJar;
 
     wxDECLARE_DYNAMIC_CLASS(wxWebViewWebKit);
 };
Index: include/wx/webview.h
===================================================================
--- include/wx/webview.h	(revision 72557)
+++ include/wx/webview.h	(working copy)
@@ -23,6 +23,7 @@
 #if defined(__WXOSX__)
     #include "wx/osx/webviewhistoryitem_webkit.h"
 #elif defined(__WXGTK__)
+    #include "wx/gtk/webview_cookie_jar.h"
     #include "wx/gtk/webviewhistoryitem_webkit.h"
 #elif defined(__WXMSW__)
     #include "wx/msw/webviewhistoryitem_ie.h"
@@ -32,6 +33,7 @@
 
 class wxFSFile;
 class wxFileSystem;
+class wxWebViewCookieJar;
 
 enum wxWebViewZoom
 {
@@ -188,6 +190,13 @@
     virtual bool CanRedo() const = 0;
     virtual void Undo() = 0;
     virtual void Redo() = 0;
+    
+    //Cookies
+#if defined (__WXGTK__)
+   virtual void SetCookieJar(wxWebViewCookieJar* jar) = 0;
+   virtual wxWebViewCookieJar* GetCookieJar() const = 0;
+   virtual bool HasCookieJar() const = 0;
+#endif
 
     //Get the pointer to the underlying native engine.
     virtual void* GetNativeBackend() const = 0;
Index: interface/wx/webview.h
===================================================================
--- interface/wx/webview.h	(revision 72557)
+++ interface/wx/webview.h	(working copy)
@@ -141,6 +141,46 @@
 };
 
 /**
+    @class wxWebViewCookieJar
+
+    A simple class that contains and manipulates the Cookies to give wxWebView persistsence
+    The class is currently available for wxGTK alone but the plan to add to other ports are in progress.
+    The Current limitation is that cookies are saved as text file. 
+
+    @since 2.9.5
+    @library{wxwebview}
+    @category{webview}
+
+    @see wxWebView
+ */
+class wxWebViewCookieJar
+{
+public:
+    /**
+        Construtor.
+    */
+    wxWebViewCookieJar(const wxString& path);
+
+    /**
+        Adds a cookie to the cookie jar.
+        @return @c true if the cookie was succesfully added.
+    */
+    virtual bool AddCookie(const wxString& name, const wxString& value, const wxString& domain, const wxString& path = wxEmptyString, const int age = 0);
+
+    /**
+        Removes all cookies with the specified name from the cookie jar.
+        @return @c true if all cookies were successfully removed.
+    */
+    virtual bool RemoveCookiesByName(const wxString& name); 
+    
+    /**
+        Removes all cookies with the specified domain from the cookie jar.
+        @return @c true if all cookies were successfully removed.
+    */   
+    virtual bool RemoveCookiesByDomain(const wxString& domain);
+};
+
+/**
     @class wxWebViewHandler
 
     The base class for handling custom schemes in wxWebView, for example to
@@ -484,6 +524,25 @@
     virtual void Paste() = 0;
 
     /**
+        @name Cookies
+    */
+
+   /**
+        Returns the wxWebViewCookieJar associated with the control, may be @c null.
+    */
+   virtual wxWebViewCookieJar* GetCookieJar() const;
+
+     /**
+        Sets the wxWebViewCookieJar used by the control.
+    */
+   virtual void SetCookieJar(wxWebViewCookieJar* jar);
+
+    /**
+        Returns @true if the the control has a valid wxWebViewCookieJar.
+    */ 
+   virtual bool HasCookieJar() const;
+
+    /**
         @name History
     */
 
Index: samples/webview/webview.cpp
===================================================================
--- samples/webview/webview.cpp	(revision 72557)
+++ samples/webview/webview.cpp	(working copy)
@@ -333,6 +333,10 @@
     //And the memory: file system
     m_browser->RegisterHandler(wxSharedPtr<wxWebViewHandler>(new wxWebViewFSHandler("memory")));
 
+#ifdef __WXGTK__
+    m_browser->SetCookieJar(new wxWebViewCookieJar("cookies.txt"));
+#endif
+
     SetSizer(topsizer);
 
     //Set a more sensible size for web browsing
Index: src/gtk/webview_cookie_jar.cpp
===================================================================
--- src/gtk/webview_cookie_jar.cpp	(revision 0)
+++ src/gtk/webview_cookie_jar.cpp	(revision 0)
@@ -0,0 +1,79 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/gtk/webview_cookie_jar.cpp
+// Purpose:     GTK WebKit cookie jar
+// Author:      Stefano Mtangoo
+// Id:          $Id:$
+// Copyright:   (c) 2012 Hosanna Higher Technologies
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#if wxUSE_WEBVIEW && wxUSE_WEBVIEW_WEBKIT
+
+#include <libsoup/soup.h>
+#include <glib.h>
+#include <webkit/webkit.h>
+#include "wx/gtk/webview_cookie_jar.h" 
+#include "wx/filename.h"
+
+wxWebViewCookieJar::wxWebViewCookieJar(const wxString& path) 
+{
+    wxFileName filepath = wxFileName::FileName(path);
+    filepath.MakeAbsolute();
+
+    m_cookieJar = soup_cookie_jar_text_new(filepath.GetFullPath().mb_str(wxConvUTF8), FALSE);
+
+    SoupSession* session = webkit_get_default_session();
+    soup_session_add_feature(session, (SoupSessionFeature*)m_cookieJar);
+}
+
+bool wxWebViewCookieJar::AddCookie(const wxString& name, const wxString& value, const wxString& domain, const wxString& path, const int age)
+{
+    SoupCookie* cookie = soup_cookie_new(name.mb_str(wxConvUTF8), value.mb_str(wxConvUTF8), domain.mb_str(wxConvUTF8), path.mb_str(wxConvUTF8), age);
+    if(!cookie) {
+        return false;
+    }
+    soup_cookie_jar_add_cookie(m_cookieJar, cookie);
+    return true;
+}
+
+bool wxWebViewCookieJar::RemoveCookiesByName(const wxString& name)
+{
+    for(GSList *l = soup_cookie_jar_all_cookies(m_cookieJar); l; l=l->next) {
+        if(l->data) {
+            SoupCookie* cookie = (SoupCookie*)l->data;
+            const char* _domain = soup_cookie_get_domain(cookie);
+            if(wxString(_domain) == name) {
+                soup_cookie_jar_delete_cookie(m_cookieJar, cookie);
+            }
+
+        }
+        else {
+            return false;
+        }
+    }
+    return true;
+}
+
+bool wxWebViewCookieJar::RemoveCookiesByDomain(const wxString& domain)
+{
+    for(GSList *l = soup_cookie_jar_all_cookies(m_cookieJar); l; l=l->next) {
+        if(l->data) {
+            SoupCookie* cookie = (SoupCookie*)l->data;
+            const char* _name = soup_cookie_get_name(cookie);
+            if(wxString(_name) == domain) {
+                soup_cookie_jar_delete_cookie(m_cookieJar, cookie);
+            }
+
+        }
+        else {
+            return false;
+        }
+    }
+    return true;
+}
+
+#endif
+
Index: src/gtk/webview_webkit.cpp
===================================================================
--- src/gtk/webview_webkit.cpp	(revision 72557)
+++ src/gtk/webview_webkit.cpp	(working copy)
@@ -400,6 +400,7 @@
 {
     m_busy = false;
     m_guard = false;
+    m_cookieJar = NULL;
     FindClear();
 
     // We currently unconditionally impose scrolling in both directions as it's
@@ -1002,6 +1003,24 @@
     m_findPosition = -1;
 }
 
+void wxWebViewWebKit::SetCookieJar(wxWebViewCookieJar* jar)
+{
+    m_cookieJar = jar;
+}
+
+wxWebViewCookieJar* wxWebViewWebKit::GetCookieJar() const
+{
+    return m_cookieJar;
+}
+
+bool wxWebViewWebKit::HasCookieJar() const
+{
+    if(m_cookieJar != NULL)
+        return true;
+    else
+        return false;
+}
+
 // static
 wxVisualAttributes
 wxWebViewWebKit::GetClassDefaultAttributes(wxWindowVariant WXUNUSED(variant))

diff --git include/wx/glcanvas.h include/wx/glcanvas.h
index 4f71643..c1c736f 100755
--- include/wx/glcanvas.h
+++ include/wx/glcanvas.h
@@ -96,6 +96,9 @@ public:
     {
         return (m_GLValues.empty() || !m_GLValues[0]) ? NULL : m_GLValues.begin();
     }
+
+    int GetSize() const { return (int)(m_GLValues.size()); }
+
     // ARB function (e.g. wglCreateContextAttribsARB) is needed
     bool NeedsARB() const { return m_needsARB; }
 
@@ -125,7 +128,7 @@ public:
     wxGLContextAttrs& NoResetNotify();
     wxGLContextAttrs& LoseOnReset();
     wxGLContextAttrs& ResetIsolation();
-    wxGLContextAttrs& ReleaseFlush(int val = 0); //'int' allows future values
+    wxGLContextAttrs& ReleaseFlush(int val = 1); //'int' allows future values
     wxGLContextAttrs& PlatformDefaults();
     void EndList(); // No more values can be chained
 
diff --git include/wx/osx/glcanvas.h include/wx/osx/glcanvas.h
old mode 100644
new mode 100755
index 1789a90..0817c8f
--- include/wx/osx/glcanvas.h
+++ include/wx/osx/glcanvas.h
@@ -29,13 +29,18 @@ WXDLLIMPEXP_GL void WXGLDestroyContext( WXGLContext context );
 WXDLLIMPEXP_GL WXGLContext WXGLGetCurrentContext();
 WXDLLIMPEXP_GL bool WXGLSetCurrentContext(WXGLContext context);
 
-WXDLLIMPEXP_GL WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList);
+WXDLLIMPEXP_GL WXGLPixelFormat WXGLChoosePixelFormat(const int *GLAttrs = NULL,
+                                                     int n1 = 0,
+                                                     const int *ctxAttrs = NULL,
+                                                     int n2 = 0);
 WXDLLIMPEXP_GL void WXGLDestroyPixelFormat( WXGLPixelFormat pixelFormat );
 
 class WXDLLIMPEXP_GL wxGLContext : public wxGLContextBase
 {
 public:
-    wxGLContext(wxGLCanvas *win, const wxGLContext *other = NULL);
+    wxGLContext(wxGLCanvas *win,
+                const wxGLContext *other = NULL,
+                const wxGLContextAttrs *ctxAttrs = NULL);
     virtual ~wxGLContext();
 
     virtual bool SetCurrent(const wxGLCanvas& win) const;
@@ -53,6 +58,15 @@ class WXDLLIMPEXP_GL wxGLCanvas : public wxGLCanvasBase
 {
 public:
     wxGLCanvas(wxWindow *parent,
+               const wxGLAttributes& dispAttrs,
+               wxWindowID id = wxID_ANY,
+               const wxPoint& pos = wxDefaultPosition,
+               const wxSize& size = wxDefaultSize,
+               long style = 0,
+               const wxString& name = wxGLCanvasName,
+               const wxPalette& palette = wxNullPalette);
+
+    wxGLCanvas(wxWindow *parent,
                wxWindowID id = wxID_ANY,
                const int *attribList = NULL,
                const wxPoint& pos = wxDefaultPosition,
@@ -62,6 +76,15 @@ public:
                const wxPalette& palette = wxNullPalette);
 
     bool Create(wxWindow *parent,
+                const wxGLAttributes& dispAttrs,
+                wxWindowID id = wxID_ANY,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = 0,
+                const wxString& name = wxGLCanvasName,
+                const wxPalette& palette = wxNullPalette);
+
+    bool Create(wxWindow *parent,
                 wxWindowID id = wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
@@ -85,6 +108,9 @@ public:
     // return the pixel format used by this window
     WXGLPixelFormat GetWXGLPixelFormat() const { return m_glFormat; }
 
+    // Return the copy of attributes passed at ctor
+    wxGLAttributes& GetGLDispAttrs() { return m_GLAttrs; }
+
     // update the view port of the current context to match this window
     void SetViewport();
 
@@ -147,6 +173,7 @@ public:
 
 protected:
     WXGLPixelFormat m_glFormat;
+    wxGLAttributes m_GLAttrs;
 
 #if wxOSX_USE_CARBON
     bool m_macCanvasIsShown,
diff --git interface/wx/glcanvas.h interface/wx/glcanvas.h
index f9cc248..3c9c9f3 100755
--- interface/wx/glcanvas.h
+++ interface/wx/glcanvas.h
@@ -96,6 +96,12 @@ public:
     */
     const int* GetGLAttrs() const;
 
+    /** Returns the size of the internal list of attributes.
+        Remember that the last value in the list must be a '0' (zero). So, a
+        minimal list is of size = 2, the first value is meaningful and the last is '0'.
+    */
+    int GetSize();
+
     /**
         Returns the current value of the ARB-flag.
 
@@ -142,6 +148,7 @@ public:
 
     /**
         Specifies the number of bits for buffer when it isn't a RGBA buffer.
+        It makes no effect for OS X.
 
         @param val
         The number of bits.
@@ -149,7 +156,7 @@ public:
     wxGLAttributes& BufferSize(int val);
 
     /**
-        Specifies the framebuffer level.
+        Specifies the framebuffer level. It makes no effect for OS X.
 
         @param val
         0 for main buffer, >0 for overlay, <0 for underlay.
@@ -235,7 +242,7 @@ public:
     wxGLAttributes& Samplers(int val);
 
     /**
-        Used to request a frame buffer sRGB capable.
+        Used to request a frame buffer sRGB capable. It makes no effect for OS X.
     */
     wxGLAttributes& FrameBuffersRGB();
 
@@ -314,6 +321,9 @@ public:
 
         @param val
         The minor version number requested, e.g. 2 if OpenGL 3.2 is requested.
+
+        It has no effect under OS X where specifying CoreProfile() will
+        result in using OpenGL version at least 3.2.
     */
     wxGLContextAttrs& MinorVersion(int val);
 
@@ -325,6 +335,9 @@ public:
 
         @param vminor
         The minor version number requested, e.g. 5 if OpenGL 4.5 is requested.
+
+        It has no effect under OS X where specifying CoreProfile() will
+        result in using OpenGL version at least 3.2.
     */
     wxGLContextAttrs& OGLVersion(int vmayor, int vminor);
 
@@ -340,6 +353,8 @@ public:
         Forward-compatible contexts are defined only for OpenGL versions 3.0 and
         later. They must not support functionality marked as deprecated or
         removed by the requested version of the OpenGL API.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& ForwardCompatible();
 
@@ -347,6 +362,8 @@ public:
         Request an ES or ES2 ("Embedded Subsystem") context. These are special
         subsets of OpenGL, lacking some features of the full specification.
         Used mainly in embedded devices such as mobile phones.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& ES2();
 
@@ -354,29 +371,39 @@ public:
         Request debugging functionality. This tells OpenGL to prepare a set where
         some logs are enabled and also allows OGL to send debug messages through
         a callback function.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& DebugCtx();
 
     /**
         Request robustness, or how OpenGL handles out-of-bounds buffer object
         accesses and graphics reset notification behaviours.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& Robust();
 
     /**
         With robustness enabled, never deliver notification of reset events.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& NoResetNotify();
 
     /**
         With robustness enabled, if graphics reset happens, all context state is
         lost.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& LoseOnReset();
 
     /**
         Request OpenGL to protect other applications or shared contexts from reset
         side-effects.
+
+        It has no effect under OS X.
     */
     wxGLContextAttrs& ResetIsolation();
 
@@ -386,9 +413,11 @@ public:
         the GPU driver default is 'flushing'.
 
         @param val
-        0 (wxWidgets default) for not flushing, 1 for flushing pending commands.
+        0 for not flushing, 1 (wxWidgets default) for flushing pending commands.
+
+        It has no effect under OS X.
     */
-    wxGLContextAttrs& ReleaseFlush(int val = 0);
+    wxGLContextAttrs& ReleaseFlush(int val = 1);
 
     /**
         Set platform specific defaults. Currently only Unix defaults are
diff --git src/osx/cocoa/glcanvas.mm src/osx/cocoa/glcanvas.mm
old mode 100644
new mode 100755
index 8783ef4..1490dba
--- src/osx/cocoa/glcanvas.mm
+++ src/osx/cocoa/glcanvas.mm
@@ -37,10 +37,6 @@
 WXGLContext WXGLCreateContext( WXGLPixelFormat pixelFormat, WXGLContext shareContext )
 {
     WXGLContext context = [[NSOpenGLContext alloc] initWithFormat:pixelFormat shareContext: shareContext];
-    if ( !context )
-    {
-        wxFAIL_MSG("NSOpenGLContext creation failed");
-    }
     return context ;
 }
 
@@ -77,178 +73,39 @@ void WXGLDestroyPixelFormat( WXGLPixelFormat pixelFormat )
     }
 }
 
-
-WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
+// Form a list of attributes by joining canvas attributes and context attributes.
+// OS X uses just one list to find a suitable pixel format.
+WXGLPixelFormat WXGLChoosePixelFormat(const int *GLAttrs,
+                                      int n1,
+                                      const int *ctxAttrs,
+                                      int n2)
 {
-    NSOpenGLPixelFormatAttribute data[512];
-
+    NSOpenGLPixelFormatAttribute data[128];
+    const NSOpenGLPixelFormatAttribute *attribs;
     unsigned p = 0;
-    data[p++] = NSOpenGLPFAMinimumPolicy; // make _SIZE tags behave more like GLX
-
-    // Test if we support hardware acceleration, we always want to use it if it
-    // is available and, apparently, in spite of the Apple docs explicitly
-    // saying the contrary:
-    //
-    //  If present, this attribute indicates that only hardware-accelerated
-    //  renderers are considered. If not present, accelerated renderers are
-    //  still preferred.
-    //
-    // hardware acceleration is not always used without it, so we do need to
-    // specify it. But we shouldn't do it if acceleration is really not
-    // available.
-    const NSOpenGLPixelFormatAttribute
-        attrsAccel[] = { NSOpenGLPFAAccelerated, 0 };
-    if ( WXGLPixelFormat testFormat = [[NSOpenGLPixelFormat alloc]
-                                       initWithAttributes: attrsAccel] )
-    {
-        // Hardware acceleration is available, use it.
-        data[p++] = NSOpenGLPFAAccelerated;
-        [testFormat release];
-    }
 
-    const NSOpenGLPixelFormatAttribute *attribs;
-    if ( !attribList )
+    // The list should have at least one value and the '0' at end. So the
+    // minimum size is 2.
+    if ( GLAttrs && n1 > 1 )
     {
-        // Default attributes
-        data[p++] = NSOpenGLPFADoubleBuffer;
-        data[p++] = NSOpenGLPFAColorSize;
-        data[p++] = (NSOpenGLPixelFormatAttribute)8;
-        data[p++] = NSOpenGLPFAAlphaSize;
-        data[p++] = (NSOpenGLPixelFormatAttribute)0;
-        data[p++] = NSOpenGLPFADepthSize;
-        data[p++] = (NSOpenGLPixelFormatAttribute)8;
-        data[p] = 0;
-        attribs = data;
+        n1--; // skip the ending '0'
+        while ( p < n1 )
+            data[p++] = (NSOpenGLPixelFormatAttribute) GLAttrs[p];
     }
-    else
+
+    if ( ctxAttrs && n2 > 1 )
     {
-        for ( unsigned arg = 0; attribList[arg] !=0 && p < WXSIZEOF(data); )
-        {
-            switch ( attribList[arg++] )
-            {
-                case WX_GL_RGBA:
-                    //data[p++] = AGL_RGBA;
-                    break;
-
-                case WX_GL_BUFFER_SIZE:
-                    //data[p++] = AGL_BUFFER_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_LEVEL:
-                    //data[p++]=AGL_LEVEL;
-                    //data[p++]=attribList[arg++];
-                    break;
-
-                case WX_GL_DOUBLEBUFFER:
-                    data[p++] = NSOpenGLPFADoubleBuffer;
-                    break;
-
-                case WX_GL_STEREO:
-                    data[p++] = NSOpenGLPFAStereo;
-                    break;
-
-                case WX_GL_AUX_BUFFERS:
-                    data[p++] = NSOpenGLPFAAuxBuffers;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_RED:
-                    data[p++] = NSOpenGLPFAColorSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_GREEN:
-                    //data[p++] = AGL_GREEN_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_BLUE:
-                    //data[p++] = AGL_BLUE_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_ALPHA:
-                    data[p++] = NSOpenGLPFAAlphaSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_DEPTH_SIZE:
-                    data[p++] = NSOpenGLPFADepthSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_STENCIL_SIZE:
-                    data[p++] = NSOpenGLPFAStencilSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_ACCUM_RED:
-                    data[p++] = NSOpenGLPFAAccumSize;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_ACCUM_GREEN:
-                    //data[p++] = AGL_ACCUM_GREEN_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_ACCUM_BLUE:
-                    //data[p++] = AGL_ACCUM_BLUE_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_MIN_ACCUM_ALPHA:
-                    //data[p++] = AGL_ACCUM_ALPHA_SIZE;
-                    //data[p++] = attribList[arg++];
-                    break;
-
-                case WX_GL_SAMPLE_BUFFERS:
-                    if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
-                    {
-                        if ( !attribList[arg++] )
-                            break;
-
-                        return nil;
-                    }
-
-                    data[p++] = NSOpenGLPFASampleBuffers;
-                    if ( (data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++]) == true )
-                    {
-                        // don't use software fallback
-                        data[p++] = NSOpenGLPFANoRecovery;
-                    }
-                    break;
-
-                case WX_GL_SAMPLES:
-                    if ( !wxGLCanvas::IsAGLMultiSampleAvailable() )
-                    {
-                        if ( !attribList[arg++] )
-                            break;
-
-                        return nil;
-                    }
-
-                    data[p++] = NSOpenGLPFASamples;
-                    data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
-                    break;
-
-                case WX_GL_CORE_PROFILE:
-                    data[p++] = NSOpenGLPFAOpenGLProfile;
-                    // request an OpenGL core profile
-                    // will use the highest available OpenGL version
-                    // which will be at least 3.2
-                    data[p++] = NSOpenGLProfileVersion3_2Core;
-
-                    break;
-            }
-        }
-
-        data[p] = 0;
-
-        attribs = data;
+        n2--; // skip the ending '0'
+        unsigned p2 = 0;
+        while ( p2 < n2 )
+            data[p++] = (NSOpenGLPixelFormatAttribute) ctxAttrs[p2++];
     }
 
+    // End the list
+    data[p] = (NSOpenGLPixelFormatAttribute) 0;
+
+    attribs = data;
+
     return [[NSOpenGLPixelFormat alloc] initWithAttributes:(NSOpenGLPixelFormatAttribute*) attribs];
 }
 
@@ -278,34 +135,6 @@ WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
 
 @end
 
-bool wxGLCanvas::Create(wxWindow *parent,
-                        wxWindowID id,
-                        const wxPoint& pos,
-                        const wxSize& size,
-                        long style,
-                        const wxString& name,
-                        const int *attribList,
-                        const wxPalette& WXUNUSED(palette))
-{
-    m_glFormat = WXGLChoosePixelFormat(attribList);
-    if ( !m_glFormat )
-        return false;
-
-    // DontCreatePeer();
-    
-    if ( !wxWindow::Create(parent, id, pos, size, style, name) )
-        return false;
-
-/*
-    NSRect r = wxOSXGetFrameForControl( this, pos , size ) ;
-    wxNSCustomOpenGLView* v = [[wxNSCustomOpenGLView alloc] initWithFrame:r];
-    m_peer = new wxWidgetCocoaImpl( this, v );
-
-    MacPostControlCreate(pos, size) ;
-*/
-    return true;
-}
-
 wxGLCanvas::~wxGLCanvas()
 {
     if ( m_glFormat )
@@ -325,13 +154,13 @@ bool wxGLCanvas::SwapBuffers()
 bool wxGLContext::SetCurrent(const wxGLCanvas& win) const
 {
     if ( !m_glContext )
-        return false;  
+        return false;
 
     [m_glContext setView: win.GetHandle() ];
     [m_glContext update];
-    
+
     [m_glContext makeCurrentContext];
-    
+
     return true;
 }
 
diff --git src/osx/glcanvas_osx.cpp src/osx/glcanvas_osx.cpp
old mode 100644
new mode 100755
index 3610ccf..aefe7e3
--- src/osx/glcanvas_osx.cpp
+++ src/osx/glcanvas_osx.cpp
@@ -34,14 +34,367 @@
 
 #include "wx/osx/private.h"
 
+// These 'WX' values are the same as 'NS' ones
+// Source: https://developer.apple.com/library/mac/documentation/
+//  Cocoa/Reference/ApplicationKit/Classes/NSOpenGLPixelFormat_Class/index.html
+#define WXOpenGLPFAAllRenderers            1
+#define WXOpenGLPFATripleBuffer            3
+#define WXOpenGLPFADoubleBuffer            5
+#define WXOpenGLPFAStereo                  6
+#define WXOpenGLPFAAuxBuffers              7
+#define WXOpenGLPFAColorSize               8
+#define WXOpenGLPFAAlphaSize              11
+#define WXOpenGLPFADepthSize              12
+#define WXOpenGLPFAStencilSize            13
+#define WXOpenGLPFAAccumSize              14
+#define WXOpenGLPFAMinimumPolicy          51
+#define WXOpenGLPFAMaximumPolicy          52
+#define WXOpenGLPFAOffScreen              53
+#define WXOpenGLPFAFullScreen             54
+#define WXOpenGLPFASampleBuffers          55
+#define WXOpenGLPFASamples                56
+#define WXOpenGLPFAAuxDepthStencil        57
+#define WXOpenGLPFAColorFloat             58
+#define WXOpenGLPFAMultisample            59
+#define WXOpenGLPFASupersample            60
+#define WXOpenGLPFASampleAlpha            61
+#define WXOpenGLPFARendererID             70
+#define WXOpenGLPFASingleRenderer         71
+#define WXOpenGLPFANoRecovery             72
+#define WXOpenGLPFAAccelerated            73
+#define WXOpenGLPFAClosestPolicy          74
+#define WXOpenGLPFARobust                 75
+#define WXOpenGLPFABackingStore           76
+#define WXOpenGLPFAMPSafe                 78
+#define WXOpenGLPFAWindow                 80
+#define WXOpenGLPFAMultiScreen            81
+#define WXOpenGLPFACompliant              83
+#define WXOpenGLPFAScreenMask             84
+#define WXOpenGLPFAPixelBuffer            90
+#define WXOpenGLPFARemotePixelBuffer      91
+#define WXOpenGLPFAAllowOfflineRenderers  96
+#define WXOpenGLPFAAcceleratedCompute     97
+#define WXOpenGLPFAOpenGLProfile          99
+#define WXOpenGLPFAVirtualScreenCount    128
+
+#define WXOpenGLProfileVersionLegacy    0x1000
+#define WXOpenGLProfileVersion3_2Core   0x3200
+
 // ----------------------------------------------------------------------------
-// wxGLCanvas
+// wxGLContextAttrs: OpenGL rendering context attributes
 // ----------------------------------------------------------------------------
+// OSX specific values
+
+wxGLContextAttrs& wxGLContextAttrs::CoreProfile()
+{
+    AddAttribute(WXOpenGLPFAOpenGLProfile);
+    AddAttribute(WXOpenGLProfileVersion3_2Core);
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::MajorVersion(int val)
+{
+    // No effect
+    wxUnusedVar(val);
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::MinorVersion(int val)
+{
+    // No effect
+    wxUnusedVar(val);
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::CompatibilityProfile()
+{
+    AddAttribute(WXOpenGLPFAOpenGLProfile);
+    AddAttribute(WXOpenGLProfileVersionLegacy);
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ForwardCompatible()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ES2()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::DebugCtx()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::Robust()
+{
+    // No effect. Somehow similar flag (NSOpenGLPFARobust) is deprecated in OS X v10.5
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::NoResetNotify()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::LoseOnReset()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ResetIsolation()
+{
+    // No effect
+    return *this;
+}
+
+wxGLContextAttrs& wxGLContextAttrs::ReleaseFlush(int val)
+{
+    // No effect
+    wxUnusedVar(val);
+    return *this;
+}
 
-wxGLContext::wxGLContext(wxGLCanvas *win, const wxGLContext *other)
+wxGLContextAttrs& wxGLContextAttrs::PlatformDefaults()
 {
-    m_glContext = WXGLCreateContext(win->GetWXGLPixelFormat(),
-                                    other ? other->m_glContext : NULL);
+    // No OSX specific defaults
+    return *this;
+}
+
+void wxGLContextAttrs::EndList()
+{
+    AddAttribute(0);
+}
+
+// ----------------------------------------------------------------------------
+// wxGLAttributes: pixel format attributes
+// ----------------------------------------------------------------------------
+// OSX specific values
+
+wxGLAttributes& wxGLAttributes::RGBA()
+{
+    AddAttribute(WXOpenGLPFAColorSize);
+    AddAttribute(24);
+    AddAttribute(WXOpenGLPFAAlphaSize);
+    AddAttribute(8);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::BufferSize(int val)
+{
+    // No effect
+    wxUnusedVar(val);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Level(int val)
+{
+    // No effect
+    wxUnusedVar(val);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::DoubleBuffer()
+{
+    AddAttribute(WXOpenGLPFADoubleBuffer);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Stereo()
+{
+    AddAttribute(WXOpenGLPFAStereo);
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::AuxBuffers(int val)
+{
+    if ( val >= 0 )
+    {
+        AddAttribute(WXOpenGLPFAAuxBuffers);
+        AddAttribute(val);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::MinRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
+{
+    int minColorBits = 0;
+    if ( mRed > minColorBits )
+        minColorBits = mRed;
+    if ( mGreen > minColorBits )
+        minColorBits = mGreen;
+    if ( mBlue > minColorBits )
+        minColorBits = mBlue;
+    if ( minColorBits > 0 )
+    {
+        AddAttribute(WXOpenGLPFAColorSize);
+        AddAttribute(minColorBits);
+    }
+
+    if ( mAlpha >= 0 )
+    {
+        AddAttribute(WXOpenGLPFAAlphaSize);
+        AddAttribute(mAlpha);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Depth(int val)
+{
+    if ( val >= 0 )
+    {
+        AddAttribute(WXOpenGLPFADepthSize);
+        AddAttribute(val);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Stencil(int val)
+{
+    if ( val >= 0 )
+    {
+        AddAttribute(WXOpenGLPFAStencilSize);
+        AddAttribute(val);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::MinAcumRGBA(int mRed, int mGreen, int mBlue, int mAlpha)
+{
+    int minAcumBits = 0;
+    if ( mRed > minAcumBits )
+        minAcumBits = mRed;
+    if ( mGreen > minAcumBits )
+        minAcumBits = mGreen;
+    if ( mBlue > minAcumBits )
+        minAcumBits = mBlue;
+    if ( minAcumBits > 0 )
+    {
+        AddAttribute(WXOpenGLPFAAccumSize);
+        AddAttribute(minAcumBits);
+    }
+
+    // No effect for Alpha in accumulation buffer
+    wxUnusedVar(mAlpha);
+
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::SampleBuffers(int val)
+{
+    if ( val >= 0 )
+    {
+        AddAttribute(WXOpenGLPFASampleBuffers);
+        AddAttribute(val);
+        // Don't use software fallback
+        AddAttribute(WXOpenGLPFANoRecovery);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Samplers(int val)
+{
+    if ( val >= 0 )
+    {
+        AddAttribute(WXOpenGLPFASamples);
+        AddAttribute(val);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::FrameBuffersRGB()
+{
+    // No effect
+    return *this;
+}
+
+void wxGLAttributes::EndList()
+{
+    AddAttribute(0);
+}
+
+wxGLAttributes& wxGLAttributes::PlatformDefaults()
+{
+    AddAttribute(WXOpenGLPFAMinimumPolicy); // use _SIZE tags as minimum sizes
+
+    // Test if we support hardware acceleration, we always want to use it if it
+    // is available and, apparently, in spite of the Apple docs explicitly
+    // saying the contrary:
+    //
+    //  If present, this attribute indicates that only hardware-accelerated
+    //  renderers are considered. If not present, accelerated renderers are
+    //  still preferred.
+    //
+    // hardware acceleration is not always used without it, so we do need to
+    // specify it. But we shouldn't do it if acceleration is really not
+    // available.
+    const int attrsAccel[] = { WXOpenGLPFAAccelerated, 0 };
+    WXGLPixelFormat testFormat = WXGLChoosePixelFormat(attrsAccel, 2);
+    if ( testFormat )
+    {
+        // Hardware acceleration is available, use it.
+        AddAttribute(WXOpenGLPFAAccelerated);
+        WXGLDestroyPixelFormat(testFormat);
+    }
+    return *this;
+}
+
+wxGLAttributes& wxGLAttributes::Defaults()
+{
+    RGBA().Depth(16).DoubleBuffer().SampleBuffers(1).Samplers(4);
+    return *this;
+}
+
+// ----------------------------------------------------------------------------
+// wxGLContext
+// ----------------------------------------------------------------------------
+
+wxGLContext::wxGLContext(wxGLCanvas *win,
+                         const wxGLContext *other,
+                         const wxGLContextAttrs *ctxAttrs)
+{
+    const int* contextAttribs = NULL;
+    int ctxSize = 0;
+
+    if ( ctxAttrs )
+    {
+        contextAttribs = ctxAttrs->GetGLAttrs();
+        ctxSize = ctxAttrs->GetSize();
+    }
+    else if ( win->GetGLCTXAttrs().GetGLAttrs() )
+    {
+        // If OpenGL context parameters were set at wxGLCanvas ctor, get them now
+        contextAttribs = win->GetGLCTXAttrs().GetGLAttrs();
+        ctxSize = win->GetGLCTXAttrs().GetSize();
+    }
+    // else use GPU driver defaults
+
+    // Join canvas attributes and context attributes to ask for a pixel format
+    WXGLPixelFormat pf = WXGLChoosePixelFormat(win->GetGLDispAttrs().GetGLAttrs(),
+                                               win->GetGLDispAttrs().GetSize(),
+                                               contextAttribs, ctxSize);
+
+    m_isOK = false;
+
+    if ( pf )
+    {
+        m_glContext = WXGLCreateContext(pf, other ? other->m_glContext : NULL);
+        if ( m_glContext )
+        {
+            m_isOK = true;
+        }
+
+        WXGLDestroyPixelFormat(pf)
+    }
+    if ( !m_isOK )
+        wxLogMessage(_("Couldn't create OpenGL context"));
 }
 
 wxGLContext::~wxGLContext()
@@ -65,6 +418,18 @@ BEGIN_EVENT_TABLE(wxGLCanvas, wxWindow)
 END_EVENT_TABLE()
 
 wxGLCanvas::wxGLCanvas(wxWindow *parent,
+                       const wxGLAttributes& dispAttrs,
+                       wxWindowID id,
+                       const wxPoint& pos,
+                       const wxSize& size,
+                       long style,
+                       const wxString& name,
+                       const wxPalette& palette)
+{
+    Create(parent, dispAttrs, id, pos, size, style, name, palette);
+}
+
+wxGLCanvas::wxGLCanvas(wxWindow *parent,
                        wxWindowID id,
                        const int *attribList,
                        const wxPoint& pos,
@@ -76,6 +441,57 @@ wxGLCanvas::wxGLCanvas(wxWindow *parent,
     Create(parent, id, pos, size, style, name, attribList, palette);
 }
 
+bool wxGLCanvas::Create(wxWindow *parent,
+                        wxWindowID id,
+                        const wxPoint& pos,
+                        const wxSize& size,
+                        long style,
+                        const wxString& name,
+                        const int *attribList,
+                        const wxPalette& palette)
+{
+    // Separate 'pixel format' attributes.
+    // Also store context attributes for wxGLContext ctor
+    // If 'attribList' is NULL, ParseAttribList() will set defaults.
+    wxGLAttributes dispAttrs;
+    if ( ! ParseAttribList(attribList, dispAttrs, &m_GLCTXAttrs) )
+        return false;
+
+    return Create(parent, dispAttrs, id, pos, size, style, name, palette);
+}
+
+bool wxGLCanvas::Create(wxWindow *parent,
+                        const wxGLAttributes& dispAttrs,
+                        wxWindowID id,
+                        const wxPoint& pos,
+                        const wxSize& size,
+                        long style,
+                        const wxString& name,
+                        const wxPalette& WXUNUSED(palette))
+{
+    // Don't allow an empty list
+    if ( !dispAttrs.GetGLAttrs() )
+    {
+        wxFAIL_MSG("wxGLAttributes object is empty.");
+        return false;
+    }
+
+    // Return false if any attribute is unsupported
+    if ( ! IsDisplaySupported(dispAttrs) )
+    {
+        wxFAIL_MSG("Can't find a pixel format for the requested attributes");
+        return false;
+    }
+
+    // Make a copy of attributes. Will use at wxGLContext ctor
+    m_GLAttrs = dispAttrs;
+
+    if ( !wxWindow::Create(parent, id, pos, size, style, name) )
+        return false;
+
+    return true;
+}
+
 #if WXWIN_COMPATIBILITY_2_8
 
 wxGLCanvas::wxGLCanvas(wxWindow *parent,
@@ -132,22 +548,35 @@ bool wxGLCanvas::IsAGLMultiSampleAvailable()
 }
 
 /* static */
-bool wxGLCanvasBase::IsDisplaySupported(const int *attribList)
+bool wxGLCanvasBase::IsDisplaySupported(const wxGLAttributes& dispAttrs)
 {
-    WXGLPixelFormat glFormat = WXGLChoosePixelFormat(attribList);
-
-    if ( !glFormat )
-       return false;
+    WXGLPixelFormat testFormat = WXGLChoosePixelFormat(dispAttrs.GetGLAttrs(), dispAttrs.GetSize()) )
+    if ( testFormat )
+    {
+        WXGLDestroyPixelFormat(testFormat);
+    }
+    else
+    {
+        return false;
+    }
+    return true;
+}
 
-    WXGLDestroyPixelFormat(glFormat);
+/* static */
+bool wxGLCanvasBase::IsDisplaySupported(const int *attribList)
+{
+    wxGLAttributes dispAttrs;
+    ParseAttribList(attribList, dispAttrs);
 
-    return true;
+    return IsDisplaySupported(dispAttrs);
 }
 
 bool wxGLCanvasBase::IsExtensionSupported(const char *extension)
 {
-    // we need a valid context to query for extensions.
-    WXGLPixelFormat fmt = WXGLChoosePixelFormat(NULL);
+    // We need a valid context to query for extensions. Use a default one.
+    wxGLAttributes dispAttrs;
+    ParseAttribList(NULL, dispAttrs); // Sets defaults
+    WXGLPixelFormat fmt = WXGLChoosePixelFormat(dispAttrs.GetGLAttrs(), dispAttrs.GetSize());
     WXGLContext ctx = WXGLCreateContext(fmt, NULL);
     if ( !ctx )
         return false;

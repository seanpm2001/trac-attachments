diff -Nur wxGTK-2.4.2-old/src/generic/caret.cpp wxGTK-2.4.2/src/generic/caret.cpp
--- wxGTK-2.4.2-old/src/generic/caret.cpp	Sun Sep 21 19:31:45 2003
+++ wxGTK-2.4.2/src/generic/caret.cpp	Tue Jul 20 12:42:45 2004
@@ -143,9 +143,10 @@
 
             // but if the caret is not blinking, we should blink it back into
             // visibility manually
-            if ( !m_timer.IsRunning() )
-                Blink();
+//            if ( !m_timer.IsRunning() )
+//                Blink();
         }
+		Blink();
     }
     //else: will be shown at the correct location when it is shown
 }
@@ -200,8 +201,9 @@
     if ( m_blinkedOut )
     {
         // restore the old image
-        dcWin.Blit(m_xOld, m_yOld, m_width, m_height,
-                   &dcMem, 0, 0);
+//        dcWin.Blit(m_xOld, m_yOld, m_width, m_height,
+//                   &dcMem, 0, 0);
+    	dcWin.Blit(m_xOld, m_yOld, m_width, m_height, &dcWin, m_xOld, m_yOld, wxSRC_INVERT);
         m_xOld =
         m_yOld = -1;
     }
@@ -234,6 +236,8 @@
 
 void wxCaret::DoDraw(wxDC *dc)
 {
+    dc->Blit(m_x, m_y, m_width, m_height, dc, m_x, m_y, wxSRC_INVERT);
+/*
     dc->SetPen( *wxBLACK_PEN );
 
     dc->SetBrush(*(m_hasFocus ? wxBLACK_BRUSH : wxTRANSPARENT_BRUSH));
@@ -244,6 +248,7 @@
     //dc->SetLogicalFunction(wxINVERT);
 
     dc->DrawRectangle(m_x, m_y, m_width, m_height);
+*/
 }
 
 #endif // wxUSE_CARET
diff -Nur wxGTK-2.4.2-old/src/gtk/dcclient.cpp wxGTK-2.4.2/src/gtk/dcclient.cpp
--- wxGTK-2.4.2-old/src/gtk/dcclient.cpp	Sun Sep 21 19:31:57 2003
+++ wxGTK-2.4.2/src/gtk/dcclient.cpp	Tue Jul 20 02:26:06 2004
@@ -1414,14 +1414,21 @@
 
 void wxWindowDC::DoDrawText( const wxString &text, wxCoord x, wxCoord y )
 {
-    wxCHECK_RET( Ok(), wxT("invalid window dc") );
+//    wxCHECK_RET( Ok(), wxT("invalid window dc") );
 
     if (!m_window) return;
     
     if (text.empty()) return;
 
+	GdkFont *font;
+    font = m_font.GetInternalFont( m_scaleY );
+//	font = gdk_fontset_load( m_font.GetNativeFontInfo()->ToString().mbc_str() );
+//	gdk_gc_set_foreground( m_textGC, m_textForegroundColour.GetColor() );
+	if(font!=NULL)	gdk_draw_string( m_window, font, m_textGC, x, y + font->ascent, text.mbc_str() ); 
+	return;
+
 #ifndef __WXGTK20__
-    GdkFont *font = m_font.GetInternalFont( m_scaleY );
+    font = m_font.GetInternalFont( m_scaleY );
 
     wxCHECK_RET( font, wxT("invalid font") );
 #endif
@@ -1640,7 +1647,7 @@
         if (height) (*height) = 0;
         return;
     }
-    
+/*    
 #ifdef __WXGTK20__
     // Create layout and set font description
     PangoLayout *layout = pango_layout_new( m_context );
@@ -1673,6 +1680,7 @@
     
     g_object_unref( G_OBJECT( layout ) );
 #else
+*/
     wxFont fontToUse = m_font;
     if (theFont) fontToUse = *theFont;
     
@@ -1681,11 +1689,12 @@
     if (height) (*height) = wxCoord((font->ascent + font->descent) / m_scaleY);
     if (descent) (*descent) = wxCoord(font->descent / m_scaleY);
     if (externalLeading) (*externalLeading) = 0;  // ??
-#endif
+//#endif
 }
 
 wxCoord wxWindowDC::GetCharWidth() const
 {
+/*
 #ifdef __WXGTK20__
     // There should be an easier way.
     PangoLayout *layout = pango_layout_new(m_context);
@@ -1696,15 +1705,17 @@
     g_object_unref( G_OBJECT( layout ) );
     return w;
 #else
+*/
     GdkFont *font = m_font.GetInternalFont( m_scaleY );
     wxCHECK_MSG( font, -1, wxT("invalid font") );
 
     return wxCoord(gdk_string_width( font, "H" ) / m_scaleX);
-#endif
+//#endif
 }
 
 wxCoord wxWindowDC::GetCharHeight() const
 {
+/*
 #ifdef __WXGTK20__
     // There should be an easier way.
     PangoLayout *layout = pango_layout_new(m_context);
@@ -1715,11 +1726,12 @@
     g_object_unref( G_OBJECT( layout ) );
     return h;
 #else
+*/
     GdkFont *font = m_font.GetInternalFont( m_scaleY );
     wxCHECK_MSG( font, -1, wxT("invalid font") );
 
     return wxCoord((font->ascent + font->descent) / m_scaleY);
-#endif
+//#endif
 }
 
 void wxWindowDC::Clear()
diff -Nur wxGTK-2.4.2-old/src/gtk/font.cpp wxGTK-2.4.2/src/gtk/font.cpp
--- wxGTK-2.4.2-old/src/gtk/font.cpp	Sun Sep 21 19:31:57 2003
+++ wxGTK-2.4.2/src/gtk/font.cpp	Tue Jul 20 02:25:59 2004
@@ -726,7 +726,7 @@
 
 wxString wxFont::GetFaceName() const
 {
-    wxCHECK_MSG( Ok(), wxT(""), wxT("invalid font") );
+//    wxCHECK_MSG( Ok(), wxT(""), wxT("invalid font") );
 
     return M_FONTDATA->m_faceName;
 }
@@ -906,6 +906,20 @@
 
 GdkFont *wxFont::GetInternalFont( float scale ) const
 {
+	char t[100];
+	static char last_name[100] = "";
+	static GdkFont *last_font = NULL;
+	if( GetFaceName().IsEmpty() )	sprintf( t , "-*-*-medium-r-normal-*-*-%d-*-*-m-*-*-*" , M_FONTDATA->m_pointSize * 10 );
+	else sprintf( t , GetFaceName().mbc_str() , M_FONTDATA->m_pointSize * 10 );
+	if( strcmp( t , last_name ) != 0 )
+	{
+		strcpy( last_name , t );
+		last_font = gdk_fontset_load(t);
+	}
+//	else strcpy( t , "-*-*-medium-r-normal-*-*-200-*-*-m-*-*-*" );
+//printf(t);
+	return last_font;
+
     GdkFont *font = (GdkFont *) NULL;
 
     wxCHECK_MSG( Ok(), font, wxT("invalid font") )
diff -Nur wxGTK-2.4.2-old/src/gtk/window.cpp wxGTK-2.4.2/src/gtk/window.cpp
--- wxGTK-2.4.2-old/src/gtk/window.cpp	Sun Sep 21 19:31:58 2003
+++ wxGTK-2.4.2/src/gtk/window.cpp	Sun Jul 18 22:29:47 2004
@@ -1081,6 +1081,8 @@
     if (g_blockEventsOnDrag)
         return FALSE;
 
+    if( gtk_im_context_filter_keypress ( (GtkIMContext*) win->m_imContext, gdk_event ) )
+        return TRUE;
 
     wxKeyEvent event( wxEVT_KEY_DOWN );
     if ( !wxTranslateGTKKeyEventToWx(event, win, gdk_event) )
@@ -1240,6 +1242,7 @@
 }
 
 #ifdef __WXGTK20__
+#include <iconv.h>
 static void gtk_wxwindow_commit_cb (GtkIMContext *context,
                                     const gchar  *str,
                                     wxWindow     *window)
@@ -1247,7 +1250,7 @@
     bool ret = FALSE;
 
     wxKeyEvent event( wxEVT_KEY_DOWN );
-
+/*
 #if wxUSE_UNICODE
     event.m_uniChar = g_utf8_get_char( str );
 
@@ -1261,6 +1264,29 @@
 
     event.m_keyCode = uniChar;
 #endif
+*/
+
+    static iconv_t cv;
+    static bool bl_cv_inited = false;
+    static char *inptr;
+    static char text[1000], *outptr;
+    size_t insize, outsize;
+    if(!bl_cv_inited)
+    {
+        cv = iconv_open("BIG5" , "UTF-8");
+        bl_cv_inited = true;
+    }
+    inptr = (char*)str;
+    insize = 10000;
+    outptr = text;
+    outsize = 10000;
+    iconv( cv, (const char**) &inptr, &insize, &outptr, &outsize );
+/*
+fprintf(stderr, "commit : ");
+for(int i=0;text[i]!='\0';i++)   fprintf(stderr , "%u " , (unsigned char)text[i] );
+fprintf(stderr, " -> %s\n", text);
+*/
+
 
 
     // TODO:  We still need to set all the extra attributes of the
@@ -1274,13 +1300,15 @@
     if (parent)
     {
         event.SetEventType( wxEVT_CHAR_HOOK );
-        ret = parent->GetEventHandler()->ProcessEvent( event );
+//        ret = parent->GetEventHandler()->ProcessEvent( event );
+        for(int i=0;text[i]!='\0';i++) {   wxKeyEvent e(wxEVT_CHAR_HOOK);  e.m_keyCode = (long)text[i];   ret = parent->GetEventHandler()->ProcessEvent( e );  }
     }
 
     if (!ret)
     {
         event.SetEventType(wxEVT_CHAR);
-        ret = window->GetEventHandler()->ProcessEvent( event );
+//        ret = window->GetEventHandler()->ProcessEvent( event );
+        for(int i=0;text[i]!='\0';i++) {   wxKeyEvent e(wxEVT_CHAR);  e.m_keyCode = (long)text[i];   ret = window->GetEventHandler()->ProcessEvent( e ); }
     }
 }
 #endif

 	  	 

Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/function.tex,v
retrieving revision 1.252
diff -bu2 -r1.252 docs/latex/wx/function.tex
--- docs/latex/wx/function.tex
+++ docs/latex/wx/function.tex
@@ -1747,4 +1747,10 @@
 argument instead of arbitrary number of parameters.

+Note that if {\tt wxUSE_PRINTF_POS_PARAMS} is set to 1, then this function supports
+positional arguments (see \helpref{wxString::Printf}{wxstringprintf} for more info).
+However other functions of the same family (wxPrintf, wxSprintf, wxFprintf, wxVfprintf,
+wxVfprintf, wxVprintf, wxVsprintf) are not granted to support positional parameters
+even when {\tt wxUSE_PRINTF_POS_PARAMS} is set to 1.
+
 \wxheading{See also}

Index: docs/latex/wx/wxstring.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/wxstring.tex,v
retrieving revision 1.60
diff -bu2 -r1.60 docs/latex/wx/wxstring.tex
--- docs/latex/wx/wxstring.tex
+++ docs/latex/wx/wxstring.tex
@@ -898,4 +898,17 @@
 characters written, or an integer less than zero on error.

+Note that if {\tt wxUSE_PRINTF_POS_PARAMS} is set to 1, then this function supports
+positional arguments:
+
+\begin{verbatim}
+    wxString str;
+
+    str.Printf(wxT("%d %d %d"), 1, 2, 3);
+    // str now contains "1 2 3"
+
+    str.Printf(wxT("%2$d %3$d %1$d"), 1, 2, 3);
+    // str now contains "2 3 1"
+\end{verbatim}
+
 {\bf NB:} This function will use a safe version of {\it vsprintf()} (usually called
 {\it vsnprintf()}) whenever available to always allocate the buffer of correct
Index: src/common/wxchar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/wxchar.cpp,v
retrieving revision 1.118
diff -u2 -r1.118 src/common/wxchar.cpp
--- src/common/wxchar.cpp
+++ src/common/wxchar.cpp
@@ -184,5 +184,5 @@

 // some limits of our implementation
-#define wxMAX_SVNPRINTF_ARGUMENTS         64
+#define wxMAX_SVNPRINTF_ARGUMENTS         16
 #define wxMAX_SVNPRINTF_FLAGBUFFER_LEN    32

@@ -249,21 +249,21 @@

     // the position of the argument relative to this conversion specifier
-    size_t pos;
+    size_t m_pos;

     // the type of this conversion specifier
-    wxPrintfArgType type;
+    wxPrintfArgType m_type;

     // the minimum and maximum width
     // when one of this var is set to -1 it means: use the following argument
     // in the stack as minimum/maximum width for this conversion specifier
-    int min_width, max_width;
+    int m_nMinWidth, m_nMaxWidth;

     // does the argument need to the be aligned to left ?
-    bool adj_left;
+    bool m_bAlignLeft;

     // pointer to the '%' of this conversion specifier in the format string
     // NOTE: this points somewhere in the string given to the Parse() function -
     //       it's task of the caller ensure that memory is still valid !
-    const wxChar *argpos;
+    const wxChar *m_pArgPos;

     // pointer to the last character of this conversion specifier in the
@@ -271,12 +271,13 @@
     // NOTE: this points somewhere in the string given to the Parse() function -
     //       it's task of the caller ensure that memory is still valid !
-    const wxChar *argend;
+    const wxChar *m_pArgEnd;

     // a little buffer where formatting flags like #+\.hlqLZ are stored by Parse()
     // for use in Process()
-    // NB: this buffer can be safely a char buffer instead of a wchar_t buffer
-    //     since it's used only for numeric conversion specifier and always
-    //     with sprintf().
-    char szFlags[wxMAX_SVNPRINTF_FLAGBUFFER_LEN];
+    // NB: even if this buffer is used only for numeric conversion specifiers and
+    //     thus could be safely declared as a char[] buffer, we want it to be wxChar
+    //     so that in Unicode builds we can avoid to convert its contents to Unicode
+    //     chars when copying it in user's buffer.
+    wxChar m_szFlags[wxMAX_SVNPRINTF_FLAGBUFFER_LEN];


@@ -308,14 +309,14 @@
 void wxPrintfConvSpec::Init()
 {
-    min_width = 0;
-    max_width = 0xFFFF;
-    pos = 0;
-    adj_left = false;
-    argpos = argend = NULL;
-    type = wxPAT_INVALID;
+    m_nMinWidth = 0;
+    m_nMaxWidth = 0xFFFF;
+    m_pos = 0;
+    m_bAlignLeft = false;
+    m_pArgPos = m_pArgEnd = NULL;
+    m_type = wxPAT_INVALID;

-    // this character will never be removed from szFlags array and
+    // this character will never be removed from m_szFlags array and
     // is important when calling sprintf() in wxPrintfConvSpec::Process() !
-    szFlags[0] = '%';
+    m_szFlags[0] = wxT('%');
 }

@@ -329,6 +330,6 @@
     int ilen = 0;

-    adj_left = in_prec = prec_dot = false;
-    argpos = argend = format;
+    m_bAlignLeft = in_prec = prec_dot = false;
+    m_pArgPos = m_pArgEnd = format;
     do
     {
@@ -336,10 +337,10 @@
         if (in_prec && !prec_dot) \
         { \
-            szFlags[flagofs++] = (char)'.'; \
+            m_szFlags[flagofs++] = '.'; \
             prec_dot = true; \
         }

         // what follows '%'?
-        const wxChar ch = *(++argend);
+        const wxChar ch = *(++m_pArgEnd);
         switch ( ch )
         {
@@ -356,11 +357,11 @@
             case wxT('\''):
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

             case wxT('-'):
                 CHECK_PREC
-                adj_left = true;
-                szFlags[flagofs++] = (char)ch;
+                m_bAlignLeft = true;
+                m_szFlags[flagofs++] = ch;
                 break;

@@ -369,6 +370,6 @@
                 in_prec = true;
                 prec_dot = false;
-                max_width = 0;
-                // dot will be auto-added to szFlags if non-negative
+                m_nMaxWidth = 0;
+                // dot will be auto-added to m_szFlags if non-negative
                 // number follows
                 break;
@@ -377,11 +378,15 @@
                 ilen = -1;
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

             case wxT('l'):
+                // NB: it's safe to use flagofs-1 as flagofs always start from 1
+                if (m_szFlags[flagofs-1] == 'l')       // 'll' modifier is the same as 'L' or 'q'
+                    ilen = 2;
+                else
                 ilen = 1;
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

@@ -390,5 +395,5 @@
                 ilen = 2;
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

@@ -396,5 +401,5 @@
                 ilen = 3;
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

@@ -406,5 +411,5 @@
                     // tell Process() to use the next argument
                     // in the stack as maxwidth...
-                    max_width = -1;
+                    m_nMaxWidth = -1;
                 }
                 else
@@ -412,10 +417,10 @@
                     // tell Process() to use the next argument
                     // in the stack as minwidth...
-                    min_width = -1;
+                    m_nMinWidth = -1;
                 }

                 // save the * in our formatting buffer...
                 // will be replaced later by Process()
-                szFlags[flagofs++] = (char)ch;
+                m_szFlags[flagofs++] = ch;
                 break;

@@ -426,18 +431,18 @@
                     int len = 0;
                     CHECK_PREC
-                    while ( (*argend >= wxT('0')) &&
-                            (*argend <= wxT('9')) )
+                    while ( (*m_pArgEnd >= wxT('0')) &&
+                            (*m_pArgEnd <= wxT('9')) )
                     {
-                        szFlags[flagofs++] = (char)(*argend);
-                        len = len*10 + (*argend - wxT('0'));
-                        argend++;
+                        m_szFlags[flagofs++] = (*m_pArgEnd);
+                        len = len*10 + (*m_pArgEnd - wxT('0'));
+                        m_pArgEnd++;
                     }

                     if (in_prec)
-                        max_width = len;
+                        m_nMaxWidth = len;
                     else
-                        min_width = len;
+                        m_nMinWidth = len;

-                    argend--; // the main loop pre-increments n again
+                    m_pArgEnd--; // the main loop pre-increments n again
                 }
                 break;
@@ -445,20 +450,20 @@
             case wxT('$'):      // a positional parameter (e.g. %2$s) ?
                 {
-                    if (min_width <= 0)
+                    if (m_nMinWidth <= 0)
                         break;      // ignore this formatting flag as no
                                     // numbers are preceding it

-                    // remove from szFlags all digits previously added
+                    // remove from m_szFlags all digits previously added
                     do {
                         flagofs--;
-                    } while (szFlags[flagofs] >= '1' &&
-                             szFlags[flagofs] <= '9');
+                    } while (m_szFlags[flagofs] >= '1' &&
+                             m_szFlags[flagofs] <= '9');

                     // re-adjust the offset making it point to the
-                    // next free char of szFlags
+                    // next free char of m_szFlags
                     flagofs++;

-                    pos = min_width;
-                    min_width = 0;
+                    m_pos = m_nMinWidth;
+                    m_nMinWidth = 0;
                 }
                 break;
@@ -471,23 +476,23 @@
             case wxT('X'):
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
-                szFlags[flagofs] = (char)'\0';
+                m_szFlags[flagofs++] = ch;
+                m_szFlags[flagofs] = '\0';
                 if (ilen == 0)
-                    type = wxPAT_INT;
+                    m_type = wxPAT_INT;
                 else if (ilen == -1)
                     // NB: 'short int' value passed through '...'
                     //      is promoted to 'int', so we have to get
                     //      an int from stack even if we need a short
-                    type = wxPAT_INT;
+                    m_type = wxPAT_INT;
                 else if (ilen == 1)
-                    type = wxPAT_LONGINT;
+                    m_type = wxPAT_LONGINT;
                 else if (ilen == 2)
 #if SIZEOF_LONG_LONG
-                    type = wxPAT_LONGLONGINT;
+                    m_type = wxPAT_LONGLONGINT;
 #else // !long long
-                    type = wxPAT_LONGINT;
+                    m_type = wxPAT_LONGINT;
 #endif // long long/!long long
                 else if (ilen == 3)
-                    type = wxPAT_SIZET;
+                    m_type = wxPAT_SIZET;
                 done = true;
                 break;
@@ -499,15 +504,15 @@
             case wxT('G'):
                 CHECK_PREC
-                szFlags[flagofs++] = (char)ch;
-                szFlags[flagofs] = (char)'\0';
+                m_szFlags[flagofs++] = ch;
+                m_szFlags[flagofs] = '\0';
                 if (ilen == 2)
-                    type = wxPAT_LONGDOUBLE;
+                    m_type = wxPAT_LONGDOUBLE;
                 else
-                    type = wxPAT_DOUBLE;
+                    m_type = wxPAT_DOUBLE;
                 done = true;
                 break;

             case wxT('p'):
-                type = wxPAT_POINTER;
+                m_type = wxPAT_POINTER;
                 done = true;
                 break;
@@ -518,5 +523,5 @@
                     // in Unicode mode %hc == ANSI character
                     // and in ANSI mode, %hc == %c == ANSI...
-                    type = wxPAT_CHAR;
+                    m_type = wxPAT_CHAR;
                 }
                 else if (ilen == 1)
@@ -524,5 +529,5 @@
                     // in ANSI mode %lc == Unicode character
                     // and in Unicode mode, %lc == %c == Unicode...
-                    type = wxPAT_WCHAR;
+                    m_type = wxPAT_WCHAR;
                 }
                 else
@@ -530,8 +535,8 @@
 #if wxUSE_UNICODE
                     // in Unicode mode, %c == Unicode character
-                    type = wxPAT_WCHAR;
+                    m_type = wxPAT_WCHAR;
 #else
                     // in ANSI mode, %c == ANSI character
-                    type = wxPAT_CHAR;
+                    m_type = wxPAT_CHAR;
 #endif
                 }
@@ -544,5 +549,5 @@
                     // Unicode mode wx extension: we'll let %hs mean non-Unicode
                     // strings (when in ANSI mode, %s == %hs == ANSI string)
-                    type = wxPAT_PCHAR;
+                    m_type = wxPAT_PCHAR;
                 }
                 else if (ilen == 1)
@@ -550,12 +555,12 @@
                     // in Unicode mode, %ls == %s == Unicode string
                     // in ANSI mode, %ls == Unicode string
-                    type = wxPAT_PWCHAR;
+                    m_type = wxPAT_PWCHAR;
                 }
                 else
                 {
 #if wxUSE_UNICODE
-                    type = wxPAT_PWCHAR;
+                    m_type = wxPAT_PWCHAR;
 #else
-                    type = wxPAT_PCHAR;
+                    m_type = wxPAT_PCHAR;
 #endif
                 }
@@ -565,9 +570,9 @@
             case wxT('n'):
                 if (ilen == 0)
-                        type = wxPAT_NINT;
+                    m_type = wxPAT_NINT;
                 else if (ilen == -1)
-                        type = wxPAT_NSHORTINT;
+                    m_type = wxPAT_NSHORTINT;
                 else if (ilen >= 1)
-                        type = wxPAT_NLONGINT;
+                    m_type = wxPAT_NLONGINT;
                 done = true;
                 break;
@@ -578,4 +583,10 @@
                 return false;
         }
+
+        if (flagofs == wxMAX_SVNPRINTF_FLAGBUFFER_LEN)
+        {
+            wxLogDebug(wxT("Too many flags specified for a single conversion specifier!"));
+            return false;
+        }
     }
     while (!done);
@@ -585,24 +596,30 @@


-void wxPrintfConvSpec::ReplaceAsteriskWith(int w)
+void wxPrintfConvSpec::ReplaceAsteriskWith(int width)
 {
-    char temp[wxMAX_SVNPRINTF_FLAGBUFFER_LEN];
+    wxChar temp[wxMAX_SVNPRINTF_FLAGBUFFER_LEN];

     // find the first * in our flag buffer
-    char *pwidth = strchr(szFlags, '*');
+    wxChar *pwidth = wxStrchr(m_szFlags, wxT('*'));
     wxASSERT(pwidth);

-    // save what follows the * (the +1 is to skip it!)
-    strcpy(temp, pwidth+1);
-    if (w < 0) {
-        pwidth[0] = '-';
+    // save what follows the * (the +1 is to skip the asterisk itself!)
+    wxStrcpy(temp, pwidth+1);
+    if (width < 0)
+    {
+        pwidth[0] = wxT('-');
         pwidth++;
     }

     // replace * with the actual integer given as width
-    int offset = ::sprintf(pwidth,"%d",abs(w));
+#if wxUSE_UNICODE
+    int maxlen = (m_szFlags + wxMAX_SVNPRINTF_FLAGBUFFER_LEN - pwidth) / sizeof(wxChar);
+    int offset = ::swprintf(pwidth, maxlen, L"%d", abs(width));
+#else
+    int offset = ::sprintf(pwidth, "%d", abs(width));
+#endif

     // restore after the expanded * what was following it
-    strcpy(pwidth+offset, temp);
+    wxStrcpy(pwidth+offset, temp);
 }

@@ -610,28 +627,28 @@
 {
     // did the '*' width/precision specifier was used ?
-    if (max_width == -1)
+    if (m_nMaxWidth == -1)
     {
         // take the maxwidth specifier from the stack
-        max_width = va_arg(argptr, int);
-        if (max_width < 0)
-            max_width = 0;
+        m_nMaxWidth = va_arg(argptr, int);
+        if (m_nMaxWidth < 0)
+            m_nMaxWidth = 0;
         else
-            ReplaceAsteriskWith(max_width);
+            ReplaceAsteriskWith(m_nMaxWidth);
     }

-    if (min_width == -1)
+    if (m_nMinWidth == -1)
     {
         // take the minwidth specifier from the stack
-        min_width = va_arg(argptr, int);
+        m_nMinWidth = va_arg(argptr, int);

-        ReplaceAsteriskWith(min_width);
-        if (min_width < 0)
+        ReplaceAsteriskWith(m_nMinWidth);
+        if (m_nMinWidth < 0)
         {
-            adj_left = !adj_left;
-            min_width = -min_width;
+            m_bAlignLeft = !m_bAlignLeft;
+            m_nMinWidth = -m_nMinWidth;
         }
     }

-    switch (type) {
+    switch (m_type) {
         case wxPAT_INT:
             p->pad_int = va_arg(argptr, int);
@@ -659,5 +676,5 @@

         case wxPAT_CHAR:
-            p->pad_char = (char)va_arg(argptr, int);  // char is promoted to int when passed through '...'
+            p->pad_char = va_arg(argptr, int);  // char is promoted to int when passed through '...'
             break;
         case wxPAT_WCHAR:
@@ -692,7 +709,17 @@
 int wxPrintfConvSpec::Process(wxChar *buf, size_t lenMax, wxPrintfArg *p)
 {
-    // buffer to avoid dynamic memory allocation each time for small strings
-    static char szScratch[1024];
-    size_t lenCur = 0;
+    // buffer to avoid dynamic memory allocation each time for small strings;
+    // note that this buffer is used only to hold results of number formatting,
+    // %s directly writes user's string in buf, without using szScratch
+#define wxSCRATCH_BUFFER_SIZE       512
+
+    wxChar szScratch[wxSCRATCH_BUFFER_SIZE];
+    size_t lenScratch = 0, lenCur = 0;
+
+#if wxUSE_UNICODE
+#define system_sprintf(buff, flags, data)      ::swprintf(buff, wxSCRATCH_BUFFER_SIZE, flags, data)
+#else
+#define system_sprintf                         ::sprintf
+#endif

 #define APPEND_CH(ch) \
@@ -712,34 +739,34 @@
                 }

-    switch ( type )
+    switch ( m_type )
     {
         case wxPAT_INT:
-            ::sprintf(szScratch, szFlags, p->pad_int);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_int);
             break;

         case wxPAT_LONGINT:
-            ::sprintf(szScratch, szFlags, p->pad_longint);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_longint);
             break;

 #if SIZEOF_LONG_LONG
         case wxPAT_LONGLONGINT:
-            ::sprintf(szScratch, szFlags, p->pad_longlongint);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_longlongint);
             break;
 #endif // SIZEOF_LONG_LONG

         case wxPAT_SIZET:
-            ::sprintf(szScratch, szFlags, p->pad_sizet);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_sizet);
             break;

         case wxPAT_LONGDOUBLE:
-            ::sprintf(szScratch, szFlags, p->pad_longdouble);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_longdouble);
             break;

         case wxPAT_DOUBLE:
-            ::sprintf(szScratch, szFlags, p->pad_double);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_double);
             break;

         case wxPAT_POINTER:
-            ::sprintf(szScratch, szFlags, p->pad_pointer);
+            lenScratch = system_sprintf(szScratch, m_szFlags, p->pad_pointer);
             break;

@@ -751,8 +778,11 @@
                     p->pad_wchar;

-                if (type == wxPAT_CHAR) {
+                if (m_type == wxPAT_CHAR)
+                {
                     // user passed a character explicitely indicated as ANSI...
                     const char buf[2] = { p->pad_char, 0 };
                     val = wxString(buf, wxConvLibc)[0u];
+
+                    //wprintf(L"converting ANSI=>Unicode");   // for debug
                 }
 #else
@@ -760,8 +790,11 @@

 #if wxUSE_WCHAR_T
-                if (type == wxPAT_WCHAR) {
+                if (m_type == wxPAT_WCHAR)
+                {
                     // user passed a character explicitely indicated as Unicode...
                     const wchar_t buf[2] = { p->pad_wchar, 0 };
                     val = wxString(buf, wxConvLibc)[0u];
+
+                    //printf("converting Unicode=>ANSI");   // for debug
                 }
 #endif
@@ -770,12 +803,12 @@
                 size_t i;

-                if (!adj_left)
-                    for (i = 1; i < (size_t)min_width; i++)
+                if (!m_bAlignLeft)
+                    for (i = 1; i < (size_t)m_nMinWidth; i++)
                         APPEND_CH(_T(' '));

                 APPEND_CH(val);

-                if (adj_left)
-                    for (i = 1; i < (size_t)min_width; i++)
+                if (m_bAlignLeft)
+                    for (i = 1; i < (size_t)m_nMinWidth; i++)
                         APPEND_CH(_T(' '));
             }
@@ -790,7 +823,10 @@
                     p->pad_pwchar;

-                if (type == wxPAT_PCHAR) {
+                if (m_type == wxPAT_PCHAR)
+                {
                     // user passed a string explicitely indicated as ANSI...
                     val = s = wxString(p->pad_pchar, wxConvLibc);
+
+                    //wprintf(L"converting ANSI=>Unicode");   // for debug
                 }
 #else
@@ -798,7 +834,10 @@

 #if wxUSE_WCHAR_T
-                if (type == wxPAT_PWCHAR) {
+                if (m_type == wxPAT_PWCHAR)
+                {
                     // user passed a string explicitely indicated as Unicode...
                     val = s = wxString(p->pad_pwchar, wxConvLibc);
+
+                    //printf("converting Unicode=>ANSI");   // for debug
                 }
 #endif
@@ -809,13 +848,13 @@
                 {
 #if wxUSE_STRUTILS
-                    // at this point we are sure that max_width is positive or null
+                    // at this point we are sure that m_nMaxWidth is positive or null
                     // (see top of wxPrintfConvSpec::LoadArg)
-                    len = wxMin((unsigned int)max_width, wxStrlen(val));
+                    len = wxMin((unsigned int)m_nMaxWidth, wxStrlen(val));
 #else
-                    for ( len = 0; val[len] && (len < max_width); len++ )
+                    for ( len = 0; val[len] && (len < m_nMaxWidth); len++ )
                         ;
 #endif
                 }
-                else if (max_width >= 6)
+                else if (m_nMaxWidth >= 6)
                 {
                     val = wxT("(null)");
@@ -830,13 +869,11 @@
                 int i;

-                if (!adj_left)
+                if (!m_bAlignLeft)
                 {
-                    for (i = len; i < min_width; i++)
+                    for (i = len; i < m_nMinWidth; i++)
                         APPEND_CH(_T(' '));
                 }

 #if wxUSE_STRUTILS
-                // at this point we are sure that max_width is positive or null
-                // (see top of wxPrintfConvSpec::LoadArg)
                 len = wxMin((unsigned int)len, lenMax-lenCur);
                 wxStrncpy(buf+lenCur, val, len);
@@ -847,7 +884,7 @@
 #endif

-                if (adj_left)
+                if (m_bAlignLeft)
                 {
-                    for (i = len; i < min_width; i++)
+                    for (i = len; i < m_nMinWidth; i++)
                         APPEND_CH(_T(' '));
                 }
@@ -874,5 +911,5 @@
     // if we used system's sprintf() then we now need to append the s_szScratch
     // buffer to the given one...
-    switch (type)
+    switch (m_type)
     {
         case wxPAT_INT:
@@ -887,14 +924,17 @@
 #if wxUSE_STRUTILS
             {
-               const wxMB2WXbuf tmp = wxConvLibc.cMB2WX(szScratch);
-               size_t len = wxMin(lenMax, wxStrlen(tmp));
-               wxStrncpy(buf, tmp, len);
-               lenCur += len;
+                wxASSERT(lenScratch >= 0 && lenScratch < wxSCRATCH_BUFFER_SIZE);
+                if (lenMax < lenScratch)
+                {
+                    // fill output buffer and then return -1
+                    wxStrncpy(buf, szScratch, lenMax);
+                    return -1;
+                }
+                wxStrncpy(buf, szScratch, lenScratch);
+                lenCur += lenScratch;
             }
 #else
             {
-                const wxMB2WXbuf tmp =
-                    wxConvLibc.cMB2WX(szScratch);
-                APPEND_STR(tmp);
+                APPEND_STR(szScratch);
             }
 #endif
@@ -941,8 +981,14 @@
                              const wxChar *format, va_list argptr)
 {
-    // cached data
-    static wxPrintfConvSpec arg[wxMAX_SVNPRINTF_ARGUMENTS];
-    static wxPrintfArg argdata[wxMAX_SVNPRINTF_ARGUMENTS];
-    static wxPrintfConvSpec *pspec[wxMAX_SVNPRINTF_ARGUMENTS] = { NULL };
+    // useful for debugging, to understand if we are really using this function
+    // rather than the system implementation
+#if 0
+    wprintf(L"Using wxVsnprintf_\n");
+#endif
+
+    // required memory:
+    wxPrintfConvSpec arg[wxMAX_SVNPRINTF_ARGUMENTS];
+    wxPrintfArg argdata[wxMAX_SVNPRINTF_ARGUMENTS];
+    wxPrintfConvSpec *pspec[wxMAX_SVNPRINTF_ARGUMENTS] = { NULL };

     size_t i;
@@ -969,22 +1015,40 @@

                 // make toparse point to the end of this specifier
-                toparse = current->argend;
+                toparse = current->m_pArgEnd;

-                if (current->pos > 0) {
+                if (current->m_pos > 0)
+                {
                     // the positionals start from number 1... adjust the index
-                    current->pos--;
+                    current->m_pos--;
                     posarg_present = true;
-                } else {
+                }
+                else
+                {
                     // not a positional argument...
-                    current->pos = nargs;
+                    current->m_pos = nargs;
                     nonposarg_present = true;
                 }

                 // this conversion specifier is tied to the pos-th argument...
-                pspec[current->pos] = current;
+                pspec[current->m_pos] = current;
                 nargs++;

                 if (nargs == wxMAX_SVNPRINTF_ARGUMENTS)
+                {
+                    wxLogDebug(wxT("A single call to wxVsnprintf() has more than %d arguments; ")
+                               wxT("ignoring all remaining arguments."), wxMAX_SVNPRINTF_ARGUMENTS);
                     break;  // cannot handle any additional conv spec
+                }
+            }
+            else
+            {
+#if 0          // for debugging
+                printf("skipping a percent at: %s", toparse);
+#endif
+
+                // it's safe to look in the next character of toparse as at worst
+                // we'll hit its \0
+                if (*(toparse+1) == wxT('%'))
+                    toparse++;      // the Parse() returned false because we've found a %%
             }
         }
@@ -1002,8 +1066,9 @@

     // now load arguments from stack
-    for (i=0; i < nargs && ok; i++) {
-        // !pspec[i] if user forgot a positional parameter (e.g. %$1s %$3s) ?
-        // or LoadArg false if wxPrintfConvSpec::Parse failed to set its 'type'
-        // to a valid value...
+    for (i=0; i < nargs && ok; i++)
+    {
+        // !pspec[i] means that the user forgot a positional parameter (e.g. %$1s %$3s);
+        // LoadArg == false means that wxPrintfConvSpec::Parse failed to set the
+        // conversion specifier 'type' to a valid value...
         ok = pspec[i] && pspec[i]->LoadArg(&argdata[i], ap);
     }
@@ -1021,19 +1086,28 @@
         // copy in the output buffer the portion of the format string between
         // last specifier and the current one
-        size_t tocopy = ( arg[i].argpos - toparse );
+        size_t tocopy = ( arg[i].m_pArgPos - toparse );
         if (lenCur+tocopy >= lenMax)
-            return -1;      // not enough space in the output buffer !
+        {
+            // not enough space in the output buffer !
+            // copy until the end of remaining space and then stop
+            wxCopyStrWithPercents(buf+lenCur, toparse, lenMax - lenCur - 1);
+            buf[lenMax-1] = wxT('\0');
+            return -1;
+        }

         lenCur += wxCopyStrWithPercents(buf+lenCur, toparse, tocopy);

         // process this specifier directly in the output buffer
-        int n = arg[i].Process(buf+lenCur, lenMax - lenCur, &argdata[arg[i].pos]);
+        int n = arg[i].Process(buf+lenCur, lenMax - lenCur, &argdata[arg[i].m_pos]);
         if (n == -1)
+        {
+            buf[lenMax-1] = wxT('\0');  // be sure to always NUL-terminate the string
             return -1;      // not enough space in the output buffer !
+        }
         lenCur += n;

-        // the +1 is because wxPrintfConvSpec::argend points to the last character
+        // the +1 is because wxPrintfConvSpec::m_pArgEnd points to the last character
         // of the format specifier, but we are not interested to it...
-        toparse = arg[i].argend + 1;
+        toparse = arg[i].m_pArgEnd + 1;
     }

@@ -1049,8 +1123,4 @@
     lenCur += wxCopyStrWithPercents(buf+lenCur, toparse, tocopy) - 1;

-    // clean the static array portion used...
-    // NOTE: other arrays do not need cleanup!
-    memset(pspec, 0, sizeof(wxPrintfConvSpec*)*nargs);
-
     wxASSERT(lenCur == wxStrlen(buf));
     return lenCur;
Index: tests/test.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.bkl,v
retrieving revision 1.41
diff -u2 -r1.41 tests/test.bkl
--- tests/test.bkl
+++ tests/test.bkl
@@ -89,3 +90,16 @@
     </wx-data>

+
+
+    <!-- BENCHMARKS -->
+
+    <exe id="printfbench" template="wx_sample_console,wx_test"
+                          template_append="wx_append_base">
+        <sources>
+            benchmarks/printfbench.cpp
+        </sources>
+        <wx-lib>base</wx-lib>
+    </exe>
+
+
 </makefile>
Index: tests/strings/vsnprintf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/strings/vsnprintf.cpp,v
retrieving revision 1.5
diff -u2 -r1.5 tests/strings/vsnprintf.cpp
--- tests/strings/vsnprintf.cpp
+++ tests/strings/vsnprintf.cpp
@@ -81,4 +81,6 @@
         CPPUNIT_TEST( S );
         CPPUNIT_TEST( Asterisk );
+        CPPUNIT_TEST( Percent );
+        CPPUNIT_TEST( LongLong );

         CPPUNIT_TEST( BigToSmallBuffer );
@@ -90,4 +92,7 @@
     void S();
     void Asterisk();
+    void Percent();
+    void LongLong();
+    void Unicode();

     void BigToSmallBuffer();
@@ -179,8 +184,48 @@
     CMP3("abcde", "%.5s", wxT("abcdefghi"));

+    // do the same tests but with Unicode characters:
+#if wxUSE_UNICODE
+    #define ALPHA     "\x3B1"
+    #define BETA      "\x3B2"
+    #define GAMMA     "\x3B3"
+    #define DELTA     "\x3B4"
+    #define EPSILON   "\x3B5"
+    #define ZETA      "\x3B6"
+    #define ETA       "\x3B7"
+    #define THETA     "\x3B8"
+    #define IOTA      "\x3B9"
+
+    #define ABC         ALPHA BETA GAMMA
+    #define ABCDE       ALPHA BETA GAMMA DELTA EPSILON
+    #define ABCDEFGHI   ALPHA BETA GAMMA DELTA EPSILON ZETA ETA THETA IOTA
+
+    CMP3("  " ABC, "%5s", wxT(ABC));
+    CMP3("    " ALPHA, "%5s", wxT(ALPHA));
+    CMP3(ABCDEFGHI, "%5s", wxT(ABCDEFGHI));
+    CMP3(ABC "  ", "%-5s", wxT(ABC));
+    CMP3(ABCDEFGHI, "%-5s", wxT(ABCDEFGHI));
+
+    CMP3(ABCDE, "%.5s", wxT(ABCDEFGHI));
+#endif
+}
+
+void VsnprintfTestCase::Asterisk()
+{
+    CMP5("       0.1", "%*.*f", 10, 1, 0.123);
+    CMP5("    0.1230", "%*.*f", 10, 4, 0.123);
+    CMP5("0.1", "%*.*f", 3, 1, 0.123);
+
+    CMP4("%0.002", "%%%.*f", 3, 0.0023456789);
+}
+
+void VsnprintfTestCase::Percent()
+{
     // some tests without any argument passed through ...
     CMP2("%", "%%");
     CMP2("%%%", "%%%%%%");

+    CMP3("%  abc", "%%%5s", wxT("abc"));
+    CMP3("%  abc%", "%%%5s%%", wxT("abc"));
+
     // do not test odd number of '%' symbols as different implementations
     // of snprintf() give different outputs as this situation is not considered
@@ -190,11 +235,10 @@
 }

-void VsnprintfTestCase::Asterisk()
+void VsnprintfTestCase::LongLong()
 {
-    CMP5("       0.1", "%*.*f", 10, 1, 0.123);
-    CMP5("    0.1230", "%*.*f", 10, 4, 0.123);
-    CMP5("0.1", "%*.*f", 3, 1, 0.123);
+    CMP3("123456789", "%lld", (long long int)123456789);
+    CMP3("-123456789", "%lld", (long long int)-123456789);

-    CMP4("%0.002", "%%%.*f", 3, 0.0023456789);
+    CMP3("123456789", "%llu", (unsigned long long int)123456789);
 }


 	  	 

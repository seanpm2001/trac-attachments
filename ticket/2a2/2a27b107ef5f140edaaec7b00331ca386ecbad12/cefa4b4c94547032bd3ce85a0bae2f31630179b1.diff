diff -wrupN wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/aui/auibar.py wxPython-src-2.9.1.1/wxPython/wx/lib/agw/aui/auibar.py
--- wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/aui/auibar.py	Tue Oct 05 23:12:11 2010
+++ wxPython-src-2.9.1.1/wxPython/wx/lib/agw/aui/auibar.py	Wed Jan 19 13:09:44 2011
@@ -3664,8 +3664,8 @@ class AuiToolBar(wx.PyControl):
         if self._overflow_sizer_item:
         
             dropdown_size = self._art.GetElementSize(AUI_TBART_OVERFLOW_SIZE)
-            if dropdown_size > 0 and event.m_x > cli_rect.width - dropdown_size and \
-               event.m_y >= 0 and event.m_y < cli_rect.height and self._art:
+            if dropdown_size > 0 and event.x > cli_rect.width - dropdown_size and \
+               event.y >= 0 and event.y < cli_rect.height and self._art:
                 return
             
         self._action_pos = wx.Point(*event.GetPosition())
@@ -3730,8 +3730,8 @@ class AuiToolBar(wx.PyControl):
         if self._overflow_sizer_item:
         
             dropdown_size = self._art.GetElementSize(AUI_TBART_OVERFLOW_SIZE)
-            if dropdown_size > 0 and event.m_x > cli_rect.width - dropdown_size and \
-               event.m_y >= 0 and event.m_y < cli_rect.height and self._art:            
+            if dropdown_size > 0 and event.x > cli_rect.width - dropdown_size and \
+               event.y >= 0 and event.y < cli_rect.height and self._art:            
                 return
             
         self._action_pos = wx.Point(*event.GetPosition())
@@ -3778,7 +3778,7 @@ class AuiToolBar(wx.PyControl):
         
         # start a drag event
         if not self._dragging and self._action_item != None and self._action_pos != wx.Point(-1, -1) and \
-           abs(event.m_x - self._action_pos.x) + abs(event.m_y - self._action_pos.y) > 5:
+           abs(event.x - self._action_pos.x) + abs(event.y - self._action_pos.y) > 5:
         
             self.SetToolTipString("")
             self._dragging = True
diff -wrupN wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/hyperlink.py wxPython-src-2.9.1.1/wxPython/wx/lib/agw/hyperlink.py
--- wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/hyperlink.py	Tue Jan 12 02:06:13 2010
+++ wxPython-src-2.9.1.1/wxPython/wx/lib/agw/hyperlink.py	Wed Jan 19 13:26:28 2011
@@ -310,7 +310,7 @@ class HyperLinkCtrl(StaticText):
                     menuPopUp = wx.Menu("", wx.MENU_TEAROFF)
                     menuPopUp.Append(wxHYPERLINKS_POPUP_COPY, "Copy HyperLink")
                     self.Bind(wx.EVT_MENU, self.OnPopUpCopy, id=wxHYPERLINKS_POPUP_COPY)
-                    self.PopupMenu(menuPopUp, wx.Point(event.X, event.Y))
+                    self.PopupMenu(menuPopUp, wx.Point(event.x, event.y))
                     menuPopUp.Destroy()
                     self.Unbind(wx.EVT_MENU, id=wxHYPERLINKS_POPUP_COPY)
                     
diff -wrupN wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/thumbnailctrl.py wxPython-src-2.9.1.1/wxPython/wx/lib/agw/thumbnailctrl.py
--- wxPython-src-2.9.1.1.orig/wxPython/wx/lib/agw/thumbnailctrl.py	Wed Sep 15 19:14:44 2010
+++ wxPython-src-2.9.1.1/wxPython/wx/lib/agw/thumbnailctrl.py	Wed Jan 19 13:20:12 2011
@@ -2384,17 +2384,17 @@ class ScrolledThumbnail(wx.ScrolledWindo
          (6) ``-`` key zooms out.
         """
 
-        if event.m_keyCode == ord("s"):
+        if event.keyCode == ord("s"):
             self.Rotate()
-        elif event.m_keyCode == ord("d"):
+        elif event.keyCode == ord("d"):
             self.Rotate(270)
-        elif event.m_keyCode == ord("a"):
+        elif event.keyCode == ord("a"):
             self.Rotate(180)
-        elif event.m_keyCode == wx.WXK_DELETE:
+        elif event.keyCode == wx.WXK_DELETE:
             self.DeleteFiles()
-        elif event.m_keyCode in [wx.WXK_ADD, wx.WXK_NUMPAD_ADD]:
+        elif event.keyCode in [wx.WXK_ADD, wx.WXK_NUMPAD_ADD]:
             self.ZoomIn()
-        elif event.m_keyCode in [wx.WXK_SUBTRACT, wx.WXK_NUMPAD_SUBTRACT]:
+        elif event.keyCode in [wx.WXK_SUBTRACT, wx.WXK_NUMPAD_SUBTRACT]:
             self.ZoomOut()
             
         event.Skip()
diff -wrupN wxPython-src-2.9.1.1.orig/wxPython/wx/lib/colourchooser/pycolourchooser.py wxPython-src-2.9.1.1/wxPython/wx/lib/colourchooser/pycolourchooser.py
--- wxPython-src-2.9.1.1.orig/wxPython/wx/lib/colourchooser/pycolourchooser.py	Fri Nov 13 04:41:44 2009
+++ wxPython-src-2.9.1.1/wxPython/wx/lib/colourchooser/pycolourchooser.py	Wed Jan 19 13:27:27 2011
@@ -342,7 +342,7 @@ class PyColourChooser(wx.Panel):
         the selected colour values."""
         self.mouse_down = True
         self.palette.ReDraw()
-        self.doPaletteClick(event.X, event.Y)
+        self.doPaletteClick(event.x, event.y)
 
     def onPaletteUp(self, event):
         """Stores state that the mouse is no longer depressed."""
@@ -352,7 +352,7 @@ class PyColourChooser(wx.Panel):
         """Updates the colour values during mouse motion while the
         mouse button is depressed."""
         if self.mouse_down:
-            self.doPaletteClick(event.X, event.Y)
+            self.doPaletteClick(event.x, event.y)
 
     def doPaletteClick(self, m_x, m_y):
         """Updates the colour values based on the mouse location
diff -wrupN wxPython-src-2.9.1.1.orig/wxPython/wx/lib/gridmovers.py wxPython-src-2.9.1.1/wxPython/wx/lib/gridmovers.py
--- wxPython-src-2.9.1.1.orig/wxPython/wx/lib/gridmovers.py	Fri Nov 13 04:41:44 2009
+++ wxPython-src-2.9.1.1/wxPython/wx/lib/gridmovers.py	Wed Jan 19 13:25:21 2011
@@ -254,18 +254,18 @@ class GridColMover(wx.EvtHandler):
             evt.Skip()
         else:
             _rlSize = self.grid.GetRowLabelSize()
-            if abs(self.startX - evt.X) >= 3 \
-                   and abs(evt.X - self.lastX) >= 3:
-                self.lastX = evt.X 
+            if abs(self.startX - evt.x) >= 3 \
+                   and abs(evt.x - self.lastX) >= 3:
+                self.lastX = evt.x 
                 self.didMove = True
                 sx,y = self.grid.GetViewStart()
                 w,h = self.lwin.GetClientSize()
                 x = sx * self.ux
 
-                if (evt.X + x) < x:
-                    x = evt.X + x
-                elif evt.X > w:
-                    x += evt.X - w
+                if (evt.x + x) < x:
+                    x = evt.x + x
+                elif evt.x > w:
+                    x += evt.x - w
 
                 if x < 1: x = 0
                 else: x /= self.ux
@@ -276,7 +276,7 @@ class GridColMover(wx.EvtHandler):
 
                     self.grid.Scroll(x,y)
 
-                x,y = self.lwin.ClientToScreenXY(evt.X,0)
+                x,y = self.lwin.ClientToScreenXY(evt.x,0)
                 x,y = self.grid.ScreenToClientXY(x,y)
 
                 if not self.colWin.IsShown():
@@ -294,11 +294,11 @@ class GridColMover(wx.EvtHandler):
 
 
     def OnPress(self,evt):
-        self.startX = self.lastX = evt.X
+        self.startX = self.lastX = evt.x
         _rlSize = self.grid.GetRowLabelSize()
         sx = self.grid.GetViewStart()[0] * self.ux
         sx -= _rlSize
-        px,py = self.lwin.ClientToScreenXY(evt.X,evt.Y)
+        px,py = self.lwin.ClientToScreenXY(evt.x,evt.y)
         px,py = self.grid.ScreenToClientXY(px,py)
 
         if self.grid.XToEdgeOfCol(px + sx) != wx.NOT_FOUND:
@@ -334,7 +334,7 @@ class GridColMover(wx.EvtHandler):
                 col = self.grid.XToCol(px+sx)
 
                 if col != wx.NOT_FOUND:
-                    self.grid.SelectCol(col,evt.m_controlDown)
+                    self.grid.SelectCol(col,evt.controlDown)
 
                 return
             else:
@@ -379,18 +379,18 @@ class GridRowMover(wx.EvtHandler):
             evt.Skip()
         else:
             _clSize = self.grid.GetColLabelSize()
-            if abs(self.startY - evt.Y) >= 3 \
-                   and abs(evt.Y - self.lastY) >= 3:
-                self.lastY = evt.Y
+            if abs(self.startY - evt.y) >= 3 \
+                   and abs(evt.y - self.lastY) >= 3:
+                self.lastY = evt.y
                 self.didMove = True
                 x,sy = self.grid.GetViewStart()
                 w,h = self.lwin.GetClientSizeTuple()
                 y = sy * self.uy
 
-                if (evt.Y + y) < y:
-                    y = evt.Y + y
-                elif evt.Y > h:
-                    y += evt.Y - h
+                if (evt.y + y) < y:
+                    y = evt.y + y
+                elif evt.y > h:
+                    y += evt.y - h
 
                 if y < 1: 
                     y = 0
@@ -403,7 +403,7 @@ class GridRowMover(wx.EvtHandler):
 
                     self.grid.Scroll(x,y)
 
-                x,y = self.lwin.ClientToScreenXY(0,evt.Y)
+                x,y = self.lwin.ClientToScreenXY(0,evt.y)
                 x,y = self.grid.ScreenToClientXY(x,y)
 
                 if not self.rowWin.IsShown():
@@ -422,11 +422,11 @@ class GridRowMover(wx.EvtHandler):
 
 
     def OnPress(self,evt):
-        self.startY = self.lastY = evt.Y
+        self.startY = self.lastY = evt.y
         _clSize = self.grid.GetColLabelSize()
         sy = self.grid.GetViewStart()[1] * self.uy
         sy -= _clSize
-        px,py = self.lwin.ClientToScreenXY(evt.X,evt.Y)
+        px,py = self.lwin.ClientToScreenXY(evt.x,evt.y)
         px,py = self.grid.ScreenToClientXY(px,py)
 
         if self.grid.YToEdgeOfRow(py + sy) != wx.NOT_FOUND:
@@ -462,7 +462,7 @@ class GridRowMover(wx.EvtHandler):
                 row = self.grid.YToRow(py + sy)
 
                 if row != wx.NOT_FOUND:
-                    self.grid.SelectRow(row,evt.m_controlDown)
+                    self.grid.SelectRow(row,evt.controlDown)
                 return
             else:
                 bRow = self.rowWin.GetInsertionRow()

diff --git a/samples/dnd/d_and_d.txt b/samples/dnd/d_and_d.txt
index b4f04c3..9fd1c21 100644
--- a/samples/dnd/d_and_d.txt
+++ b/samples/dnd/d_and_d.txt
@@ -36,7 +36,7 @@ the d&d operation. Finally, the drop target receives the notification when
 the data is dropped onto the associated window (see below) and is responsible
 for pasting the data and returning the result code (copy, move or failure).
 There is one class for each one of these roles in wxWindows d&d implementation,
-plese see their descriptions below for details.
+please see their descriptions below for details.
 
 
 
@@ -69,7 +69,7 @@ pointer manipulations and only requires you to override GetCountFormats()
 and GetFormat(n) functions to let it know what data formats you support.
 If it's not flexible enough for your application (i.e. the set of supported
 formats changes over time...), you should override IsAcceptedData(). In 99%
-of cases the default implementation is ok and you only have to return count
+of cases the default implementation is OK and you only have to return count
 of supported formats (CF_xxx constants or one of your custom formats which
 must have been registered) and their values.
 
@@ -80,7 +80,7 @@ must have been registered) and their values.
 
     If 'true' is returned from OnDrop, the operation is considered to be
     successful and the corresponding code (MOVE or COPY depending on the
-    keyboard control keys) is returned. Otherwise, the operation is cancelled.
+    keyboard control keys) is returned. Otherwise, the operation is canceled.
 
     Please remember that returning 'true' here may mean 'move' and so the
     drop source will delete the corresponding data - which would lead to
@@ -141,8 +141,8 @@ data format identified by the string passed to its ctor.
 blocking function which enters into its own message loop and may return after
 an arbitrarily long time interval. During it, the QueryContinueDrag() is called
 whenever the mouse or keyboard state changes. The default behaviour is quite
-reasonable for 99% of cases: the drag operation is cancelled if the <Esc> key
-is preessed and the drop is initiated if the mouse button is released.
+reasonable for 99% of cases: the drag operation is canceled if the <Esc> key
+is pressed and the drop is initiated if the mouse button is released.
 
  b) After the end of d&d
 
diff --git a/samples/propgrid/propgrid.cpp b/samples/propgrid/propgrid.cpp
index 672b341..ef245a3 100644
--- a/samples/propgrid/propgrid.cpp
+++ b/samples/propgrid/propgrid.cpp
@@ -1144,7 +1144,7 @@ void FormMain::PopulateWithStandardItems ()
 
     pg->Append( new wxLongStringProperty(wxT("Information"),wxPG_LABEL,
         wxT("Editing properties will have immediate effect on this window, ")
-        wxT("and vice versa (atleast in most cases, that is).")
+        wxT("and vice versa (at least in most cases, that is).")
         ) );
     pg->SetPropertyHelpString( wxT("Information"),
                                wxT("This property is read-only.") );
@@ -2100,7 +2100,7 @@ FormMain::FormMain(const wxString& title, const wxPoint& pos, const wxSize& size
         wxT("Switches between category-specific cell colours and default scheme (actually done using SetPropertyTextColour and SetPropertyBackgroundColour).") );
     menuTry->AppendSeparator();
     menuTry->AppendCheckItem(ID_STATICLAYOUT, wxT("Static Layout"),
-        wxT("Switches between user-modifiedable and static layouts.") );
+        wxT("Switches between user-modifiable and static layouts.") );
     menuTry->Append(ID_SETCOLUMNS, wxT("Set Number of Columns") );
     menuTry->AppendSeparator();
     menuTry->Append(ID_TESTXRC, wxT("Display XRC sample") );
@@ -2432,7 +2432,7 @@ void FormMain::OnExtendedKeyNav( wxCommandEvent& WXUNUSED(event) )
                                WXK_RETURN);
     propGrid->DedicateKey(WXK_RETURN);
 
-    // Up and Down keys are alredy associated with navigation,
+    // Up and Down keys are already associated with navigation,
     // but we must also prevent them from being eaten by
     // editor controls.
     propGrid->DedicateKey(WXK_UP);
diff --git a/samples/regtest/regtest.cpp b/samples/regtest/regtest.cpp
index dc5668e..a6d3d18 100644
--- a/samples/regtest/regtest.cpp
+++ b/samples/regtest/regtest.cpp
@@ -378,7 +378,7 @@ RegFrame::RegFrame(wxFrame *parent, const wxChar *title, int x, int y, int w, in
     wxMenu *pMenuFile = new wxMenu;
     pMenuFile->Append(Menu_Test, wxT("Te&st"), wxT("Test key creation"));
     pMenuFile->AppendSeparator();
-    pMenuFile->Append(Menu_About, wxT("&About"), wxT("Show an extraordinarly beautiful dialog"));
+    pMenuFile->Append(Menu_About, wxT("&About"), wxT("Show an extraordinarily beautiful dialog"));
     pMenuFile->AppendSeparator();
     pMenuFile->Append(Menu_Quit,  wxT("E&xit"), wxT("Quit this program"));
 
@@ -629,7 +629,7 @@ RegTreeCtrl::RegTreeCtrl(wxWindow *parent, wxWindowID id)
     : wxTreeCtrl(parent, id, wxDefaultPosition, wxDefaultSize,
         wxTR_HAS_BUTTONS | wxTR_EDIT_LABELS | wxSUNKEN_BORDER)
 {
-    // init members
+    // initialize members
     m_draggedItem = NULL;
     m_restoreStatus = false;
     m_viewMode = wxRegKey::WOW64ViewMode_Default;
diff --git a/samples/richtext/readme.txt b/samples/richtext/readme.txt
index 6282853..d6c8f49 100644
--- a/samples/richtext/readme.txt
+++ b/samples/richtext/readme.txt
@@ -64,7 +64,7 @@ API
 ===
 
 It's basically the wxTextCtrl with some additions. There is a new
-wxTextAttrEx class deriving from wxTextAttr, to accomodate new
+wxTextAttrEx class deriving from wxTextAttr, to accommodate new
 style attributes. This could be merged with wxTextAttr. There
 is also a wxRichTextAttr which is similar to wxTextAttrEx but
 doesn't store the font as a wxFont: this allows much more
diff --git a/samples/sockets/baseclient.cpp b/samples/sockets/baseclient.cpp
index 72482fb..91dfbc2 100644
--- a/samples/sockets/baseclient.cpp
+++ b/samples/sockets/baseclient.cpp
@@ -182,7 +182,7 @@ Client::OnInitCmdLine(wxCmdLineParser& pParser)
     wxApp::OnInitCmdLine(pParser);
     pParser.AddSwitch(wxT("e"),wxT("event"),_("Use event based worker (default)"),wxCMD_LINE_PARAM_OPTIONAL);
     pParser.AddSwitch(wxT("t"),wxT("thread"),_("Use thread based worker"),wxCMD_LINE_PARAM_OPTIONAL);
-    pParser.AddSwitch(wxT("r"),wxT("random"),_("Send radnom data (default)"),wxCMD_LINE_PARAM_OPTIONAL);
+    pParser.AddSwitch(wxT("r"),wxT("random"),_("Send random data (default)"),wxCMD_LINE_PARAM_OPTIONAL);
     pParser.AddOption(wxT("m"),wxT("message"),_("Send message from <str>"),wxCMD_LINE_VAL_STRING,wxCMD_LINE_PARAM_OPTIONAL);
     pParser.AddOption(wxT("f"),wxT("file"),_("Send contents of <file>"),wxCMD_LINE_VAL_STRING,wxCMD_LINE_PARAM_OPTIONAL);
     pParser.AddOption(wxT("H"),wxT("hostname"),_("IP or name of host to connect to"),wxCMD_LINE_VAL_STRING,wxCMD_LINE_PARAM_OPTIONAL);
@@ -220,7 +220,7 @@ Client::OnCmdLineParsed(wxCmdLineParser& pParser)
             return false;
         };
         if (!file.ReadAll(&m_message)) {
-            wxLogError(wxT("Cannot read conten of file %s"),fname.c_str());
+            wxLogError(wxT("Cannot read content of file %s"),fname.c_str());
             return false;
         };
         m_sendType = SEND_MESSAGE;
@@ -319,9 +319,9 @@ Client::CreateBuffer(int* msgsize)
     //test3 for compatibility with GUI server sample
     if ((*msgsize) > 250)
     {
-        //send at least one kb of data
+        //send at least one KB of data
         int size = (*msgsize)/1024 + 1;
-        //returned buffer will contain test indicator, message size in kb and data
+        //returned buffer will contain test indicator, message size in KB and data
         bufsize = size*1024+2;
         buf = new char[bufsize];
         buf[0] = (unsigned char)0xDE; //second byte contains size in kilobytes
@@ -330,7 +330,7 @@ Client::CreateBuffer(int* msgsize)
     }
     else
     {
-        //returned buffer will contain test indicator, message size in kb and data
+        //returned buffer will contain test indicator, message size in KB and data
         bufsize = (*msgsize)+2;
         buf = new char[bufsize];
         buf[0] = (unsigned char)0xBE; //second byte contains size in bytes
diff --git a/samples/xti/codereadercallback.cpp b/samples/xti/codereadercallback.cpp
index 586c4d7..514e1c4 100644
--- a/samples/xti/codereadercallback.cpp
+++ b/samples/xti/codereadercallback.cpp
@@ -65,7 +65,7 @@ struct wxObjectCodeReaderCallback::wxObjectCodeReaderCallbackInternal
 
         if ( m_objectNames.find(objectID) == m_objectNames.end() )
         {
-            wxLogError( _("Passing an unkown object to GetObject") );
+            wxLogError( _("Passing an unknown object to GetObject") );
             return wxEmptyString;
         }
         return wxString( m_objectNames[objectID].c_str() );

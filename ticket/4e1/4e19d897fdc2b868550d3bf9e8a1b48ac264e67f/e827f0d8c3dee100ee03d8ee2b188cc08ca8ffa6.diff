? tests/streams/pipestream.h
Index: tests/streams/bstream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/streams/bstream.cpp,v
retrieving revision 1.5
diff -u -2 -r1.5 bstream.cpp
--- tests/streams/bstream.cpp	2004/11/22 05:00:01	1.5
+++ tests/streams/bstream.cpp	2004/11/29 16:58:54
@@ -22,4 +22,5 @@
 
 #include "bstream.h"
+#include "pipestream.h"
 
 using CppUnit::TestSuite;
@@ -56,4 +57,14 @@
     ** Add more stream subtests here
     */
+#ifdef WX_HAVE_POPEN
+    wxPathList path;
+    path.AddEnvList(_T("PATH"));
+
+    if (!path.FindValidPath(_T("cat") WX_exe).empty())
+    {
+        STREAM_REGISTER_SUB_SUITE(fileStreamPipe);
+        STREAM_REGISTER_SUB_SUITE(ffileStreamPipe);
+    }
+#endif
 
     return suite;
Index: tests/streams/bstream.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/streams/bstream.h,v
retrieving revision 1.6
diff -u -2 -r1.6 bstream.h
--- tests/streams/bstream.h	2004/11/23 14:26:10	1.6
+++ tests/streams/bstream.h	2004/11/29 16:58:55
@@ -138,4 +138,7 @@
             // Read, we move one byte along.
             (void)stream_in.GetC();
+
+            if (stream_in.LastRead() != 1)
+                break;
 #if 0
             // EOF behaviour is different in streams, disabled (for now?)
@@ -185,5 +188,5 @@
         // Try to Seek in the stream...
         // Note: streams not supporting this should register this test
-        //       with CPPUNIT_TEST_FAIL instead of CPPUNIT_TEST.
+        //       can use Input_SeekI_Fails() instead.
         CPPUNIT_ASSERT(stream_in.SeekI(2, wxFromStart) == 2);
         CPPUNIT_ASSERT(stream_in.SeekI(2, wxFromCurrent) == 4);
@@ -195,4 +198,14 @@
     }
 
+    // For non-seekable streams check SeekI() always returns wxInvalidOffset
+    void Input_SeekI_Fails()
+    {
+        CleanupHelper cleanup(this);
+        TStreamIn& stream_in = CreateInStream();
+        CPPUNIT_ASSERT(stream_in.SeekI(2, wxFromStart) == wxInvalidOffset);
+        CPPUNIT_ASSERT(stream_in.SeekI(2, wxFromCurrent) == wxInvalidOffset);
+        CPPUNIT_ASSERT(stream_in.SeekI(0, wxFromEnd) == wxInvalidOffset);
+    }
+
     // Just try to perform a TellI() on the input stream.
     void Input_TellI()
@@ -218,5 +231,13 @@
         }
     }
-    
+
+    // For non-seekable streams check TellI() return wxInvalidOffset
+    void Input_TellI_Fails()
+    {
+        CleanupHelper cleanup(this);
+        TStreamIn& stream_in = CreateInStream();
+        CPPUNIT_ASSERT(stream_in.TellI() == wxInvalidOffset);
+    }
+
     // Just try to perform a Peek() on the input stream.
     void Input_Peek()
@@ -271,8 +292,12 @@
         int i;
         int len = strlen(buf);
-        for (i = 0; i < len; i++)
+        int bytesWritten = 0;
+
+        for (i = 0; i < len; i++) {
             stream_out.PutC(buf[i]);
+            bytesWritten += stream_out.LastWrite();
+        }
 
-        CPPUNIT_ASSERT(i == stream_out.TellO());
+        CPPUNIT_ASSERT(i == bytesWritten);
     }
 
@@ -285,12 +310,12 @@
         // Do the buffer version.
         char *buf = "Some text";
-        int len = strlen(buf);
+        size_t len = strlen(buf);
         (void)stream_out.Write(buf, len);
-        CPPUNIT_ASSERT(stream_out.TellO() == len);
+        CPPUNIT_ASSERT(stream_out.LastWrite() == len);
 
         // Do the Stream version.
         TStreamIn &stream_in = CreateInStream();
         (void)stream_out.Write(stream_in);
-        CPPUNIT_ASSERT(stream_out.TellO() > len);
+        CPPUNIT_ASSERT(stream_out.LastWrite() > len);
     }
 
@@ -320,5 +345,5 @@
         // Try to Seek in the stream...
         // Note: streams not supporting this should register this test
-        //       with CPPUNIT_TEST_FAIL instead of CPPUNIT_TEST.
+        //       can use Output_SeekO_Fails() below
         CPPUNIT_ASSERT(stream_out.SeekO(2, wxFromStart) == 2);
         CPPUNIT_ASSERT(stream_out.SeekO(2, wxFromCurrent) == 4);
@@ -330,4 +355,14 @@
     }
 
+    // For non-seekable streams check SeelO() always returns wxInvalidOffset
+    void Output_SeekO_Fails()
+    {
+        CleanupHelper cleanup(this);
+        TStreamOut& stream_out = CreateOutStream();
+        CPPUNIT_ASSERT(stream_out.SeekO(2, wxFromStart) == wxInvalidOffset);
+        CPPUNIT_ASSERT(stream_out.SeekO(2, wxFromCurrent) == wxInvalidOffset);
+        CPPUNIT_ASSERT(stream_out.SeekO(0, wxFromEnd) == wxInvalidOffset);
+    }
+
     // Just try to perform a TellO() on the output stream.
     void Output_TellO()
@@ -346,5 +381,5 @@
             (void)stream_out.Write(buf, 10);
             
-            off_t pos = stream_out.SeekO(5, wxFromStart);
+            wxFileOffset pos = stream_out.SeekO(5, wxFromStart);
             CPPUNIT_ASSERT(stream_out.TellO() == pos);
             (void)stream_out.PutC('1');
@@ -357,4 +392,21 @@
     }
 
+    // For non-seekable streams check TellO() return wxInvalidOffset
+    void Output_TellO_Fails()
+    {
+        CleanupHelper cleanup(this);
+        TStreamOut& stream_in = CreateOutStream();
+        CPPUNIT_ASSERT(stream_in.TellO() == wxInvalidOffset);
+    }
+
+    // try to perform a Close() on the output stream.
+    void Output_Close()
+    {
+        CleanupHelper cleanup(this);
+        TStreamOut &stream_out = CreateOutStream();
+
+        CPPUNIT_ASSERT(stream_out.Close());
+    }
+
 protected:
     // Some tests can be configured... here you can find the config settings
@@ -404,7 +456,4 @@
         if (m_pCurrentOut == NULL)
             return;
-        
-        CPPUNIT_ASSERT(m_pCurrentOut->Close());
-        
         delete m_pCurrentOut;
         m_pCurrentOut = NULL;
Index: tests/streams/ffilestream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/streams/ffilestream.cpp,v
retrieving revision 1.5
diff -u -2 -r1.5 ffilestream.cpp
--- tests/streams/ffilestream.cpp	2004/11/22 05:00:01	1.5
+++ tests/streams/ffilestream.cpp	2004/11/29 16:58:55
@@ -24,4 +24,5 @@
 
 #include "bstream.h"
+#include "pipestream.h"
 
 #define DATABUFFER_SIZE     1024
@@ -71,5 +72,5 @@
     virtual void DoDeleteOutStream();
 
-private:
+protected:
     wxString GetInFileName() const;
 };
@@ -120,5 +121,5 @@
         // Init the data buffer.
         for (size_t i = 0; i < DATABUFFER_SIZE; i++)
-            buf[i] = (i % 0xFF);
+            buf[i] = char(i % 0xFF);
 
         // Save the data
@@ -128,6 +129,68 @@
     return FILENAME_FFILEINSTREAM;
 }
-
+ 
 // Register the stream sub suite, by using some stream helper macro.
 // Note: Don't forget to connect it to the base suite (See: bstream.cpp => StreamCase::suite())
 STREAM_TEST_SUBSUITE_NAMED_REGISTRATION(ffileStream)
+
+///////////////////////////////////////////////////////////////////////////////
+// The test case
+//
+// Try to fully test wxFFileInputStream and wxFFileOutputStream when the
+// wrapped FILE* is non-seekable
+
+class ffileStreamPipe : public ffileStream
+{
+public:
+    CPPUNIT_TEST_SUITE(ffileStreamPipe);
+        // Base class stream tests the ffileStream supports.
+        CPPUNIT_TEST_FAIL(Input_GetSize);
+        CPPUNIT_TEST(Input_GetC);
+        CPPUNIT_TEST(Input_Read);
+        CPPUNIT_TEST(Input_Eof);
+        CPPUNIT_TEST(Input_LastRead);
+        CPPUNIT_TEST(Input_SeekI_Fails);
+        CPPUNIT_TEST(Input_TellI_Fails);
+        CPPUNIT_TEST(Input_Peek);
+        CPPUNIT_TEST(Input_Ungetch);
+
+        CPPUNIT_TEST(Output_PutC);
+        CPPUNIT_TEST(Output_Write);
+        CPPUNIT_TEST(Output_LastWrite);
+        CPPUNIT_TEST(Output_SeekO_Fails);
+        CPPUNIT_TEST(Output_TellO_Fails);
+        CPPUNIT_TEST(Output_Close);
+
+        // Other test specific for File stream test case.
+    CPPUNIT_TEST_SUITE_END();
+
+protected:
+    // Add own test here.
+
+private:
+    // Implement base class functions.
+    virtual wxFFileInputStream  *DoCreateInStream();
+    virtual wxFFileOutputStream *DoCreateOutStream();
+};
+
+wxFFileInputStream *ffileStreamPipe::DoCreateInStream()
+{
+    wxString cmd;
+    cmd << _T("cat") WX_exe << _T(" ") << GetInFileName();
+    wxFFileInputStream *pFileInStream = new FPipeInputStream(cmd);
+    CPPUNIT_ASSERT(pFileInStream->Ok());
+    return pFileInStream;
+}
+
+wxFFileOutputStream *ffileStreamPipe::DoCreateOutStream()
+{
+    wxString cmd;
+    cmd << _T("cat") WX_exe << _T(" > ") << FILENAME_FFILEOUTSTREAM;
+    wxFFileOutputStream *pFileOutStream = new FPipeOutputStream(cmd);
+    CPPUNIT_ASSERT(pFileOutStream->Ok());
+    return pFileOutStream;
+}
+
+// Register the stream sub suite, by using some stream helper macro.
+// Note: Don't forget to connect it to the base suite (See: bstream.cpp => StreamCase::suite())
+STREAM_TEST_SUBSUITE_NAMED_REGISTRATION(ffileStreamPipe)
Index: tests/streams/filestream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/streams/filestream.cpp,v
retrieving revision 1.4
diff -u -2 -r1.4 filestream.cpp
--- tests/streams/filestream.cpp	2004/11/22 05:00:01	1.4
+++ tests/streams/filestream.cpp	2004/11/29 16:58:55
@@ -24,4 +24,5 @@
 
 #include "bstream.h"
+#include "pipestream.h"
 
 #define DATABUFFER_SIZE     1024
@@ -71,5 +72,5 @@
     virtual void DoDeleteOutStream();
 
-private:
+protected:
     wxString GetInFileName() const;
 };
@@ -119,5 +120,5 @@
         // Init the data buffer.
         for (size_t i = 0; i < DATABUFFER_SIZE; i++)
-            buf[i] = (i % 0xFF);
+            buf[i] = char(i % 0xFF);
 
         // Save the data
@@ -131,2 +132,64 @@
 // Note: Don't forget to connect it to the base suite (See: bstream.cpp => StreamCase::suite())
 STREAM_TEST_SUBSUITE_NAMED_REGISTRATION(fileStream)
+
+///////////////////////////////////////////////////////////////////////////////
+// The test case
+//
+// Try to fully test wxFileInputStream and wxFileOutputStream when the
+// wrapped file descriptor is non-seekable
+
+class fileStreamPipe : public fileStream
+{
+public:
+    CPPUNIT_TEST_SUITE(fileStreamPipe);
+        // Base class stream tests the fileStream supports.
+        CPPUNIT_TEST_FAIL(Input_GetSize);
+        CPPUNIT_TEST(Input_GetC);
+        CPPUNIT_TEST(Input_Read);
+        CPPUNIT_TEST(Input_Eof);
+        CPPUNIT_TEST(Input_LastRead);
+        CPPUNIT_TEST(Input_SeekI_Fails);
+        CPPUNIT_TEST(Input_TellI_Fails);
+        CPPUNIT_TEST(Input_Peek);
+        CPPUNIT_TEST(Input_Ungetch);
+
+        CPPUNIT_TEST(Output_PutC);
+        CPPUNIT_TEST(Output_Write);
+        CPPUNIT_TEST(Output_LastWrite);
+        CPPUNIT_TEST(Output_SeekO_Fails);
+        CPPUNIT_TEST(Output_TellO_Fails);
+        CPPUNIT_TEST(Output_Close);
+
+        // Other test specific for File stream test case.
+    CPPUNIT_TEST_SUITE_END();
+
+protected:
+    // Add own test here.
+
+private:
+    // Implement base class functions.
+    virtual wxFileInputStream  *DoCreateInStream();
+    virtual wxFileOutputStream *DoCreateOutStream();
+};
+
+wxFileInputStream *fileStreamPipe::DoCreateInStream()
+{
+    wxString cmd;
+    cmd << _T("cat") WX_exe << _T(" ") << GetInFileName();
+    wxFileInputStream *pFileInStream = new PipeInputStream(cmd);
+    CPPUNIT_ASSERT(pFileInStream->Ok());
+    return pFileInStream;
+}
+
+wxFileOutputStream *fileStreamPipe::DoCreateOutStream()
+{
+    wxString cmd;
+    cmd << _T("cat") WX_exe << _T(" > ") << FILENAME_FILEOUTSTREAM;
+    wxFileOutputStream *pFileOutStream = new PipeOutputStream(cmd);
+    CPPUNIT_ASSERT(pFileOutStream->Ok());
+    return pFileOutStream;
+}
+
+// Register the stream sub suite, by using some stream helper macro.
+// Note: Don't forget to connect it to the base suite (See: bstream.cpp => StreamCase::suite())
+STREAM_TEST_SUBSUITE_NAMED_REGISTRATION(fileStreamPipe)
--- /dev/null	Fri Sep 10 16:59:46 2004
+++ tests/streams/pipestream.h	Mon Nov 29 14:48:42 2004
@@ -0,0 +1,111 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/streams/pipestream.h
+// Purpose:     Streams for piping to/from an external programs
+// Author:      Mike Wetherell
+// RCS-ID:      $Id$
+// Copyright:   (c) 2004 Mike Wetherell
+// Licence:     wxWidgets licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_TESTPIPESTREAM_H__
+#define _WX_TESTPIPESTREAM_H__
+
+#include "wx/wfstream.h"
+
+#if defined __UNIX__ || defined __MINGW32__
+#   define WX_popen popen
+#   define WX_pclose pclose
+#   define WX_HAVE_POPEN
+#elif defined _MSC_VER || defined __BORLANDC__
+#   define WX_popen _popen
+#   define WX_pclose _pclose
+#   define WX_HAVE_POPEN
+#else
+#   define WX_popen(cmd, type) NULL
+#   define WX_pclose fclose
+#endif
+
+#ifdef __WXMSW__
+#   define WX_bin "b"
+#   define WX_exe _T(".exe")
+#else
+#   define WX_bin
+#   define WX_exe
+#endif
+
+///////////////////////////////////////////////////////////////////////////////
+// wxFFile streams
+
+class FPipeInputStream : public wxFFileInputStream
+{
+public:
+    FPipeInputStream(const wxString& cmd)
+        : wxFFileInputStream(WX_popen(cmd.mb_str(), "r" WX_bin)) { }
+    virtual ~FPipeInputStream()
+        { WX_pclose(m_file->fp()); m_file->Detach(); }
+};
+
+class FPipeOutputStream : public wxFFileOutputStream
+{
+public:
+    FPipeOutputStream(const wxString& cmd)
+        : wxFFileOutputStream(WX_popen(cmd.mb_str(), "w" WX_bin)) { }
+    virtual ~FPipeOutputStream() { Close(); }
+
+    bool Close() {
+        bool closed = false;
+        if (m_file->fp()) {
+            closed = WX_pclose(m_file->fp()) != -1;
+            m_file->Detach();
+        }
+        return closed;
+    }
+};
+
+///////////////////////////////////////////////////////////////////////////////
+// wxFile streams
+
+class PipeInputStream : public wxFileInputStream
+{
+public:
+    PipeInputStream(const wxString& cmd) { 
+        m_fp = WX_popen(cmd.mb_str(), "r" WX_bin);
+        m_file = new wxFile(fileno(m_fp));
+        m_file_destroy = true;
+    }
+
+    virtual ~PipeInputStream() {
+        WX_pclose(m_fp);
+        m_file->Detach();
+    }
+
+private:
+    FILE *m_fp;
+};
+
+class PipeOutputStream : public wxFileOutputStream
+{
+public:
+    PipeOutputStream(const wxString& cmd) { 
+        m_fp = WX_popen(cmd.mb_str(), "w" WX_bin);
+        m_file = new wxFile(fileno(m_fp));
+        m_file_destroy = true;
+    }
+
+    virtual ~PipeOutputStream() { Close(); }
+
+    bool Close() {
+        bool closed = false;
+        if (m_fp) {
+            closed = WX_pclose(m_fp) != -1;
+            m_file->Detach();
+            m_fp = NULL;
+        }
+        return closed;
+    }
+
+private:
+    FILE *m_fp;
+};
+
+#endif // _WX_TESTPIPESTREAM_H__

 	  	 

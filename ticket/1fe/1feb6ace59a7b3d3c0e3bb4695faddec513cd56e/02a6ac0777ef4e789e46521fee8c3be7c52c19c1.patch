diff -r E:\Python\App\Lib\site-packages\wx-2.9.5-msw\wx\lib\agw\peakmeter.py E:\KITT_try2\peakmeter2.py
10,12c10
< # 1) Falloff effect for vertical bands;
< #
< # 2) Possibly some nicer drawing of bands and leds (using GraphicsContext).
---
> # 1) Possibly some nicer drawing of bands and leds (using GraphicsContext).
139,144c137,143
< ================= =========== ==================================================
< Window Styles     Hex Value   Description
< ================= =========== ==================================================
< ``PM_HORIZONTAL``         0x0 Shows horizontal bands in :class:`PeakMeterCtrl`.
< ``PM_VERTICAL``           0x1 Shows vertical bands in :class:`PeakMeterCtrl`.
< ================= =========== ==================================================
---
> ======================== =========== =========================================================
> Window Styles             Hex Value   Description
> ======================== =========== =========================================================
> ``PM_HORIZONTAL``                0x0 Shows horizontal bands in :class:`PeakMeterCtrl`.
> ``PM_VERTICAL``                  0x1 Shows vertical bands in :class:`PeakMeterCtrl`.
> ``PM_VERTICAL_INVERTED``         0x2 Shows inverted vertical bands in :class:`PeakMeterCtrl`.
> ======================== =========== =========================================================
170a170,171
> PM_VERTICAL_INVERTED = 2
> """ Shows inverted vertical bands in :class:`PeakMeterCtrl`. """
304,309c305,311
<          ================= =========== ==================================================
<          Window Styles     Hex Value   Description
<          ================= =========== ==================================================
<          ``PM_HORIZONTAL``         0x0 Shows horizontal bands in :class:`PeakMeterCtrl`.
<          ``PM_VERTICAL``           0x1 Shows vertical bands in :class:`PeakMeterCtrl`.
<          ================= =========== ==================================================
---
>          ======================== =========== ========================================================
>          Window Styles            Hex Value   Description
>          ======================== =========== ========================================================
>          ``PM_HORIZONTAL``            0x0     Shows horizontal bands in :class:`PeakMeterCtrl`.
>          ``PM_VERTICAL``              0x1     Shows vertical bands in :class:`PeakMeterCtrl`.
>          ``PM_VERTICAL_INVERTED``     0x2     Shows inverted vertical bands in :class:`PeakMeterCtrl`.
>          ======================== =========== ========================================================
359,364c361,367
<          ================= =========== ==================================================
<          Window Styles     Hex Value   Description
<          ================= =========== ==================================================
<          ``PM_HORIZONTAL``         0x0 Shows horizontal bands in :class:`PeakMeterCtrl`.
<          ``PM_VERTICAL``           0x1 Shows vertical bands in :class:`PeakMeterCtrl`.
<          ================= =========== ==================================================
---
>         ======================== =========== ========================================================
>         Window Styles            Hex Value   Description
>         ======================== =========== ========================================================
>         ``PM_HORIZONTAL``            0x0     Shows horizontal bands in :class:`PeakMeterCtrl`.
>         ``PM_VERTICAL``              0x1     Shows vertical bands in :class:`PeakMeterCtrl`.
>         ``PM_VERTICAL_INVERTED``     0x2     Shows inverted vertical bands in :class:`PeakMeterCtrl`.
>         ======================== =========== ========================================================
673a677,678
>         elif self.GetAGWWindowStyleFlag() & PM_VERTICAL_INVERTED:
>             self.DrawVertBandInverted(dc, rc)
717,719c722
<         :param `rect`: the horizontal bands client rectangle.
< 
<         .. todo:: Implement falloff effect for horizontal bands.        
---
>         :param `rect`: the horizontal bands client rectangle.        
738a742
>             rectPrev = wx.Rect(*rectBand)
772a777,790
>             # Draw falloff effect
>             if self._showFalloff:
>                 oldPen = dc.GetPen()            
>                 pen = wx.Pen(DarkenColour(self._clrBackground, FALL_INCREASEBY))
>                 maxWidth = size.x*horzBands
>                 points = [wx.Point() for i in xrange(2)]
>                 points[0].y = rectPrev.GetTopRight().y - yDecal
>                 points[0].x = rectPrev.GetBottomLeft().x + self._meterData[vert]._falloff*maxWidth/self._maxValue
>                 points[1].y = rectPrev.GetBottomLeft().y + yDecal
>                 points[1].x = points[0].x
>                 dc.SetPen(pen)
>                 dc.DrawLinePoint(points[0], points[1])
>                 dc.SetPen(oldPen)
> 
855a874,952
> 
>     def DrawVertBandInverted(self, dc, rect):
>         """
>         Draws vertical bands inverted.
> 
>         :param `dc`: an instance of :class:`DC`;
>         :param `rect`: the vertical bands client rectangle.
>         """
> 
>         vertBands = (self._ledBands > 1 and [self._ledBands] or [self._maxValue*BAND_PERCENT/100])[0]
>         minVertLimit = self._minValue*vertBands/self._maxValue
>         medVertLimit = self._medValue*vertBands/self._maxValue
>         maxVertLimit = vertBands
> 
>         size = wx.Size(rect.width/self._numBands, rect.height/vertBands)
>         rectBand = wx.RectPS(rect.GetTopLeft(), size)
>         
>         # Draw band from top
>         rectBand.OffsetXY(0, 0)
>         xDecal = (self._numBands > 1 and [1] or [0])[0]
>         yDecal = (self._ledBands > 1 and [1] or [0])[0]
> 
>         for horz in xrange(self._numBands):
>         
>             self._value = self._meterData[horz]._value
>             vertLimit = self._value*vertBands/self._maxValue
>             rectPrev = wx.Rect(*rectBand)
> 
>             for vert in xrange(vertBands):
>             
>                 rectBand.Deflate(xDecal, 0)
> 
>                 # Find colour based on range value
>                 colourRect = self._clrBackground
>                 if self._showGrid:
>                     colourRect = DarkenColour(self._clrBackground, GRID_INCREASEBY)
> 
>                 # Draw grid line (level) bar
>                 if self._showGrid and (vert == minVertLimit or vert == (vertBands-1)):
>                 
>                     points = [wx.Point() for i in xrange(2)]
>                     points[0].x = rectBand.GetTopLeft().x - xDecal
>                     points[0].y = rectBand.GetTopLeft().y + (rectBand.height >> 1)
>                     points[1].x = rectBand.GetBottomRight().x + xDecal
>                     points[1].y = points[0].y
>                     dc.DrawLinePoint(points[0], points[1])
>                 
>                 if vert < vertLimit:
>                 
>                     if InRange(vert, 0, minVertLimit-1):
>                         colourRect = self._clrNormal
>                     elif InRange(vert, minVertLimit, medVertLimit-1):
>                         colourRect = self._clrMedium
>                     elif InRange(vert, medVertLimit, maxVertLimit):
>                         colourRect = self._clrHigh
>                 
>                 dc.SetBrush(wx.Brush(colourRect))
>                 dc.DrawRectangleRect(rectBand)
> 
>                 rectBand.Inflate(xDecal, 0)
>                 rectBand.OffsetXY(0, size.y)
>             
>             # Draw falloff effect
>             if self._showFalloff:
> 
>                 oldPen = dc.GetPen()            
>                 pen = wx.Pen(DarkenColour(self._clrBackground, FALL_INCREASEBY))
>                 maxHeight = -size.y*vertBands
>                 points = [wx.Point() for i in xrange(2)]
>                 points[0].x = rectPrev.GetBottomLeft().x + xDecal
>                 points[0].y = rectPrev.GetTopRight().y - self._meterData[horz]._falloff*maxHeight/self._maxValue
>                 points[1].x = rectPrev.GetTopRight().x - xDecal
>                 points[1].y = points[0].y
>                 dc.SetPen(pen)
>                 dc.DrawLinePoint(points[0], points[1])
>                 dc.SetPen(oldPen)
>             
>             # Move to Next Horizontal band
>             rectBand.OffsetXY(size.x, -size.y*vertBands)

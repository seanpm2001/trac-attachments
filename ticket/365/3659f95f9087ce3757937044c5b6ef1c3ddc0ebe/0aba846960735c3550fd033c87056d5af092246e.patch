diff U5B C:/WINDOWS/TEMP/dataview.cpp-revBASE.svn000.tmp.cpp C:/work/wx/2.9/samples/dataview/dataview.cpp
--- C:/WINDOWS/TEMP/dataview.cpp-revBASE.svn000.tmp.cpp	Wed Oct 20 17:04:28 2010
+++ C:/work/wx/2.9/samples/dataview/dataview.cpp	Wed Oct 20 16:30:33 2010
@@ -35,10 +35,39 @@
 #include "wx/imaglist.h"
 #include "wx/notebook.h"
 
 #include "mymodels.h"
 
+#define SHOW_12583
+
+#ifdef SHOW_12583
+class myTextDropTarget : public wxTextDropTarget
+{
+public:
+	//! ctor
+	myTextDropTarget() {};	// possibly pass m_music_model or other nice info and keep it in this instance
+
+	//! override OnDragOver
+	virtual wxDragResult OnDragOver(wxCoord x, wxCoord y, wxDragResult def)
+	{
+		// some code similar MyFrame::OnDropPossible() required here
+		return wxDragMove/*wxDragCopy*/;
+		// please note
+		// either copy or move, not selectable at runtime using keyboard shift/ctrl keys
+		// depending on the application selection by user is meaningful
+	};
+
+	//! override OnDrop
+	virtual bool OnDropText(wxCoord x, wxCoord y, const wxString& strSource)
+	{
+		// some code similar MyFrame::OnDrop() required here
+		wxLogMessage( "Text dropped: artist: %s", strSource );
+		return true;
+	};
+};
+#endif // SHOW_12583
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
 
 #ifndef __WXMSW__
@@ -542,10 +571,24 @@
             m_ctrl[0]->AssociateModel( m_music_model.get() );
 
 #if wxUSE_DRAG_AND_DROP
             m_ctrl[0]->EnableDragSource( wxDF_UNICODETEXT );
             m_ctrl[0]->EnableDropTarget( wxDF_UNICODETEXT );
+#ifdef SHOW_12583
+			// 2 possibilities
+			// enable only one
+			// this is possible because wxMSW splits the control into 2 parts, header and main window, both same in wxGTK
+
+			// this way SetDropTarget() should be used
+			// but the event routing makes the passed TextDropTarget completely useless
+			// also fails to calc the right item in HitTest()
+			m_ctrl[0]->SetDropTarget(new myTextDropTarget());
+
+			// current workaround for event routing and error in HitTest
+//			m_ctrl[0]->GetMainWindow()->SetDropTarget(new myTextDropTarget());
+
+#endif // SHOW_12583
 #endif // wxUSE_DRAG_AND_DROP
 
             // column 0 of the view control:
 
             wxDataViewTextRenderer *tr =
@@ -835,13 +878,19 @@
         event.Veto();
         return;
     }
 
     MyMusicTreeModelNode *node = (MyMusicTreeModelNode*) item.GetID();
-    wxTextDataObject *obj = new wxTextDataObject;
+
+#ifdef SHOW_12583
+	event.SetDataObject(new wxTextDataObject(node->m_artist));
+#else
+	wxTextDataObject *obj = new wxTextDataObject;
     obj->SetText( node->m_title );
     event.SetDataObject( obj );
+#endif // SHOW_12583
+    event.SetDragFlags(wxDrag_AllowMove); // allows both copy and move
 }
 
 void MyFrame::OnDropPossible( wxDataViewEvent &event )
 {
     wxDataViewItem item( event.GetItem() );
@@ -854,10 +903,17 @@
         event.Veto();
 }
 
 void MyFrame::OnDrop( wxDataViewEvent &event )
 {
+	// checking HitTest() not possible
+	// wxDataViewMainWindow::OnData() does not set event position
+//	wxDataViewItem		itemDummy = wxDataViewItem(0);
+//	wxDataViewColumn*	pColumn = NULL;
+//	wxPoint				pt = event.GetPosition();
+//	m_ctrl[0]->HitTest(pt, itemDummy, pColumn);
+
     wxDataViewItem item( event.GetItem() );
 
     // only allow drops for item, not containers
     if (m_music_model->IsContainer( item ) )
     {
@@ -872,11 +928,22 @@
     }
 
     wxTextDataObject obj;
     obj.SetData( wxDF_UNICODETEXT, event.GetDataSize(), event.GetDataBuffer() );
 
-    wxLogMessage( "Text dropped: %s", obj.GetText() );
+    static wxChar const* const effect_strings[] = { wxT("error"), wxT("none"),
+                                                    wxT("copy"), wxT("move"),
+                                                    wxT("link"), wxT("cancel") };
+    wxDragResult const effect = event.GetDropEffect();
+    wxLogMessage( "Text dropped: %s, effect: %s", obj.GetText(), effect_strings[effect] );
+
+	// code to check HitTest()
+//	if ( item != itemDummy )
+//	{
+//	    wxString title = m_music_model->GetTitle( itemDummy );
+//		wxLogMessage( "HitTest() wrong, title: %s", title ); // HitTest did not mind the header size
+//	}
 }
 
 #endif // wxUSE_DRAG_AND_DROP
 
 void MyFrame::OnAddMozart( wxCommandEvent& WXUNUSED(event) )
@@ -1067,12 +1134,21 @@
 void MyFrame::OnContextMenu( wxDataViewEvent &event )
 {
     if (!m_log)
         return;
 
+    wxDataViewItem item;   /* test for HitTest(), Friedrich Haase 2010-9-22 */
+    wxDataViewColumn* pcolumn;
+	wxPoint pt = event.GetPosition();
+    m_ctrl[0]->HitTest(pt, item, pcolumn);
+	wxString artist = m_music_model->GetArtist(item);
+    wxString column_title;
+    if ( pcolumn )
+		column_title = pcolumn->GetTitle();
     wxString title = m_music_model->GetTitle( event.GetItem() );
-    wxLogMessage( "wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, Item: %s", title );
+    wxLogMessage( "wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, Click Point is: (%d,%d), Title: %s, Artist: %s, Column: %s",
+                 pt.x, pt.y, title, artist, column_title );
 
     wxMenu menu;
     menu.Append( 1, "menuitem 1" );
     menu.Append( 2, "menuitem 2" );
     menu.Append( 3, "menuitem 3" );

diff U5B C:/WINDOWS/TEMP/datavgen.c-revBASE.svn002.tmp.cpp C:/work/wx/2.9/src/generic/datavgen.cpp
--- C:/WINDOWS/TEMP/datavgen.c-revBASE.svn002.tmp.cpp	Tue Oct 19 19:53:34 2010
+++ C:/work/wx/2.9/src/generic/datavgen.cpp	Tue Oct 19 19:45:12 2010
@@ -3028,18 +3028,23 @@
     wxDataViewColumn *col = NULL;
     unsigned int cols = GetOwner()->GetColumnCount();
     unsigned int colnum = 0;
     int x, y;
     m_owner->CalcUnscrolledPosition( point.x, point.y, &x, &y );
-    for (unsigned x_start = 0; colnum < cols; colnum++)
+    // x < 0 is possible when point is on the left border.
+    // Using unsigned int results in the last (most right) column
+    // as x_start+w is much smaller than (unsigned int)x for small negative x.
+    // Using int instead of unsigned int for w and x_start results in the first column
+    // Friedrich Haase 2010-9-22
+    for (int x_start = 0; colnum < cols; colnum++)
     {
         col = GetOwner()->GetColumnAt(colnum);
         if (col->IsHidden())
             continue;      // skip it!
 
-        unsigned int w = col->GetWidth();
-        if (x_start+w >= (unsigned int)x)
+        int w = col->GetWidth();
+        if (x_start+w >= /*(unsigned int)*/x)
             break;
 
         x_start += w;
     }
 
@@ -3547,10 +3552,20 @@
             // Notify cell about drag
             wxDataViewEvent event( wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG, m_owner->GetId() );
             event.SetEventObject( m_owner );
             event.SetItem( item );
             event.SetModel( model );
+            // wxDataViewCtrl::HitTest() requires the cursor position when
+            // detecting what is to be dragged.
+            // wxDataViewCtrl::HitTest() uses wxDataViewCtrl coordinates,
+            // i.e. including the header window if any.
+            // Friedrich Haase 2010-9-22
+            int width, height = 0;
+            if ( m_owner->m_headerArea != NULL )
+                m_owner->m_headerArea->GetSize(&width, &height);
+            wxPoint pt(m_dragStart.x, m_dragStart.y + height);	// add header size if any
+            event.SetPosition(pt.x, pt.y);	// required for HitTest()
             if (!m_owner->HandleWindowEvent( event ))
                 return;
 
             if (!event.IsAllowed())
                 return;
@@ -3559,11 +3574,17 @@
             if (!obj)
                 return;
 
             wxDataViewDropSource drag( this, drag_item_row );
             drag.SetData( *obj );
-            /* wxDragResult res = */ drag.DoDragDrop();
+            // Originally drag.DoDragDrop() has been called without
+            // any parameter, defaulting to wxDrag_CopyOnly.
+            // To decide between copy and move using the result from OnDragOver()
+            // the parameter needs to be wxDrag_AllowMove or wxDrag_DefaultMove.
+            // Friedrich Haase 2010-9-17
+//          /* wxDragResult res = */ drag.DoDragDrop();                 // original
+            /* wxDragResult res = */ drag.DoDragDrop(wxDrag_AllowMove); // replacement
             delete obj;
         }
         return;
     }
     else
@@ -3689,10 +3710,13 @@
         wxDataViewEvent le(wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, parent->GetId());
         le.SetItem( item );
         le.SetEventObject(parent);
         le.SetModel(GetOwner()->GetModel());
         le.SetValue(value);
+        // wxDataViewCtrl::HitTest() requires the cursor position
+        // Friedrich Haase 2010-10-19
+        le.SetPosition(event.GetX(), event.GetY());	// required for HitTest()
         parent->GetEventHandler()->ProcessEvent(le);
     }
     else if (event.MiddleDown())
     {
     }

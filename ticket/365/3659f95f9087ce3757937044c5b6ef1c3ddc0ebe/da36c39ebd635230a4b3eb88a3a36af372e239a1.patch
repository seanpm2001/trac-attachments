Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 68557)
+++ include/wx/dataview.h	(working copy)
@@ -24,6 +24,9 @@
 #include "wx/weakref.h"
 #include "wx/vector.h"
 #include "wx/dataobj.h"
+#if wxUSE_DRAG_AND_DROP
+#include "wx/dnd.h"
+#endif
 
 class WXDLLIMPEXP_FWD_CORE wxImageList;
 
@@ -768,7 +771,9 @@
 #if wxUSE_DRAG_AND_DROP
         , m_dataObject(NULL),
         m_dataBuffer(NULL),
-        m_dataSize(0)
+        m_dataSize(0),
+        m_dragFlags(0),
+        m_dropEffect(wxDragNone)
 #endif
         { }
 
@@ -787,7 +792,9 @@
         , m_dataObject(event.m_dataObject),
         m_dataFormat(event.m_dataFormat),
         m_dataBuffer(event.m_dataBuffer),
-        m_dataSize(event.m_dataSize)
+        m_dataSize(event.m_dataSize),
+        m_dragFlags(event.m_dragFlags),
+        m_dropEffect(event.m_dropEffect)
 #endif
         { }
 
@@ -833,6 +840,10 @@
     size_t GetDataSize() const { return m_dataSize; }
     void SetDataBuffer( void* buf ) { m_dataBuffer = buf;}
     void *GetDataBuffer() const { return m_dataBuffer; }
+    void SetDragFlags( int flags ) { m_dragFlags = flags; }
+    int GetDragFlags() const { return m_dragFlags; }
+    void SetDropEffect( wxDragResult effect ) { m_dropEffect = effect; }
+    wxDragResult GetDropEffect() const { return m_dropEffect; }
 #endif // wxUSE_DRAG_AND_DROP
 
     virtual wxEvent *Clone() const { return new wxDataViewEvent(*this); }
@@ -854,6 +865,9 @@
     wxDataFormat        m_dataFormat;
     void*               m_dataBuffer;
     size_t              m_dataSize;
+
+    int                 m_dragFlags;
+    wxDragResult        m_dropEffect;
 #endif // wxUSE_DRAG_AND_DROP
 
 private:
Index: interface/wx/dataview.h
===================================================================
--- interface/wx/dataview.h	(revision 68557)
+++ interface/wx/dataview.h	(working copy)
@@ -2797,6 +2797,32 @@
     void *GetDataBuffer() const;
 
     /**
+        This can be used inside a wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG handler in order
+        to configure the drag operation. Valid values are wxDrag_CopyOnly (default),
+        wxDrag_AllowMove (allow the data to be moved) and wxDrag_DefaultMove.
+        
+        @see GetDropEffect()
+    */
+    void SetDragFlags( int flags );
+
+    /**
+        Used internally.
+    */
+    int GetDragFlags() const;
+
+    /**
+        Used internally. Sets the effect of a drop operation.
+    */
+    void SetDropEffect( wxDragResult effect );
+
+    /**
+        Returns the effect the user requested to happen to the dropped data
+        (copy, move, link). This function can be used inside wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE and
+        wxEVT_COMMAND_DATAVIEW_ITEM_DROP handlers.
+    */
+    wxDragResult GetDropEffect() const;
+
+    /**
         Return the first row that will be displayed.
     */
     int GetCacheFrom() const;
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	(revision 68557)
+++ samples/dataview/dataview.cpp	(working copy)
@@ -845,6 +845,7 @@
     wxTextDataObject *obj = new wxTextDataObject;
     obj->SetText( node->m_title );
     event.SetDataObject( obj );
+    event.SetDragFlags(wxDrag_AllowMove); // allows both copy and move
 }
 
 void MyFrame::OnDropPossible( wxDataViewEvent &event )
@@ -879,7 +880,18 @@
     wxTextDataObject obj;
     obj.SetData( wxDF_UNICODETEXT, event.GetDataSize(), event.GetDataBuffer() );
 
-    wxLogMessage( "Text dropped: %s", obj.GetText() );
+    static wxChar const* const effect_strings[] = { wxT("error"), wxT("none"),
+                                                    wxT("copy"), wxT("move"),
+                                                    wxT("link"), wxT("cancel") };
+    wxDragResult const effect = event.GetDropEffect();
+    wxLogMessage( "Text dropped: %s, effect: %s", obj.GetText(), effect_strings[effect] );
+
+	// code to check HitTest()
+//	if ( item != itemDummy )
+//	{
+//	    wxString title = m_music_model->GetTitle( itemDummy );
+//		wxLogMessage( "HitTest() wrong, title: %s", title ); // HitTest did not mind the header size
+//	}
 }
 
 #endif // wxUSE_DRAG_AND_DROP
@@ -1041,8 +1053,17 @@
 
 void MyFrame::OnContextMenu( wxDataViewEvent &event )
 {
+    wxDataViewItem item;   /* test for HitTest() */
+    wxDataViewColumn* pcolumn;
+    wxPoint pt = event.GetPosition();
+    m_ctrl[0]->HitTest(pt, item, pcolumn);
+    wxString artist = m_music_model->GetArtist(item);
+    wxString column_title;
+    if ( pcolumn )
+        column_title = pcolumn->GetTitle();
     wxString title = m_music_model->GetTitle( event.GetItem() );
-    wxLogMessage( "wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, Item: %s", title );
+    wxLogMessage( "wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, Click Point is: (%d,%d), Title: %s, Artist: %s, Column: %s",
+                 pt.x, pt.y, title, artist, column_title );
 
     wxMenu menu;
     menu.Append( 1, "menuitem 1" );
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 68557)
+++ src/generic/datavgen.cpp	(working copy)
@@ -1421,7 +1421,9 @@
     event.SetEventObject( m_owner );
     event.SetItem( item );
     event.SetModel( model );
+    event.SetPosition(x, y);    // "scrolled position" required for HitTest()
     event.SetDataFormat( format );
+    event.SetDropEffect( def );
     if (!m_owner->HandleWindowEvent( event ))
     {
         RemoveDropHint();
@@ -1464,6 +1466,7 @@
     event.SetEventObject( m_owner );
     event.SetItem( item );
     event.SetModel( model );
+    event.SetPosition(x, y);    // "scrolled position" required for HitTest()
     event.SetDataFormat( format );
     if (!m_owner->HandleWindowEvent( event ))
         return false;
@@ -1495,9 +1498,11 @@
     event.SetEventObject( m_owner );
     event.SetItem( item );
     event.SetModel( model );
+    event.SetPosition(x, y);    // "scrolled position" required for HitTest()
     event.SetDataFormat( format );
     event.SetDataSize( obj->GetSize() );
     event.SetDataBuffer( obj->GetData() );
+    event.SetDropEffect( def );
     if (!m_owner->HandleWindowEvent( event ))
         return wxDragNone;
 
@@ -3080,14 +3085,18 @@
     unsigned int colnum = 0;
     int x, y;
     m_owner->CalcUnscrolledPosition( point.x, point.y, &x, &y );
-    for (unsigned x_start = 0; colnum < cols; colnum++)
+    // x < 0 is possible when point is on the left border.
+    // Using unsigned int results in the last (most right) column
+    // as x_start+w is much smaller than (unsigned int)x for small negative x.
+    // Using int instead of unsigned int for w and x_start results in the first column
+    for (int x_start = 0; colnum < cols; colnum++)
     {
         col = GetOwner()->GetColumnAt(colnum);
         if (col->IsHidden())
             continue;      // skip it!
 
-        unsigned int w = col->GetWidth();
-        if (x_start+w >= (unsigned int)x)
+        int w = col->GetWidth();
+        if (x_start+w >= /*(unsigned int)*/x)
             break;
 
         x_start += w;
@@ -3607,6 +3616,15 @@
             event.SetEventObject( m_owner );
             event.SetItem( item );
             event.SetModel( model );
+            // wxDataViewCtrl::HitTest() requires the cursor position when
+            // detecting what is to be dragged.
+            // wxDataViewCtrl::HitTest() uses wxDataViewCtrl coordinates,
+            // i.e. including the header window if any.
+            int width, height = 0;
+            if ( m_owner->m_headerArea != NULL )
+                m_owner->m_headerArea->GetSize(&width, &height);
+            wxPoint pt(m_dragStart.x, m_dragStart.y + height);	// add header size if any
+            event.SetPosition(pt.x, pt.y);   // required for HitTest()
             if (!m_owner->HandleWindowEvent( event ))
                 return;
 
@@ -3619,7 +3637,9 @@
 
             wxDataViewDropSource drag( this, drag_item_row );
             drag.SetData( *obj );
-            /* wxDragResult res = */ drag.DoDragDrop();
+            // if the client who handled the event did not set the drag flags
+            // wxDrag_CopyOnly will be the default.
+            /* wxDragResult res = */ drag.DoDragDrop(event.GetDragFlags()/*wxDrag_AllowMove*/);
             delete obj;
         }
         return;
@@ -3747,6 +3767,7 @@
         le.SetEventObject(parent);
         le.SetModel(GetOwner()->GetModel());
         le.SetValue(value);
+        le.SetPosition(event.GetX(), event.GetY());   // required for HitTest()
         parent->GetEventHandler()->ProcessEvent(le);
     }
     else if (event.MiddleDown())
Index: src/gtk/dataview.cpp
===================================================================
--- src/gtk/dataview.cpp	(revision 68557)
+++ src/gtk/dataview.cpp	(working copy)
@@ -3649,6 +3649,15 @@
                                            GtkTreePath *path,
                                            GtkSelectionData *selection_data)
 {
+    // GTKPathToItem(path) seems to often calc the wrong item. Observed in
+    // deeper trees. Usually its the item below the darg target.
+    // Hint: It seems GTKPathToItem(path) does not return the drop target
+    // but the first child if the drop target has children.
+    // This still needs further investigation. See also HitTest().
+    // Note: this function is called by wxgtk_tree_model_drag_data_received
+    // which has been set up as a callback for GTK.
+    // Strange: when using the standard DnD method this function drag_data_received()
+    // does NOT get called even when row_drop_possible() returns true!
     wxDataViewItem item(GetOwner()->GTKPathToItem(path));
     if ( !item )
         return FALSE;
@@ -3660,6 +3669,9 @@
     event.SetDataFormat(gtk_selection_data_get_target(selection_data));
     event.SetDataSize(gtk_selection_data_get_length(selection_data));
     event.SetDataBuffer(const_cast<guchar*>(gtk_selection_data_get_data(selection_data)));
+    gint x, y;
+    gtk_widget_get_pointer( m_owner->GtkGetTreeView(), &x, &y );
+    event.SetPosition( x, y );    // "scrolled position" required for HitTest()
     if (!m_owner->HandleWindowEvent( event ))
         return FALSE;
 
@@ -3674,6 +3686,13 @@
                                           GtkTreePath *path,
                                           GtkSelectionData *selection_data)
 {
+    // GTKPathToItem(path) seems to often calc the wrong item. Observed in
+    // deeper trees. Usually its the item below the darg target.
+    // Hint: It seems GTKPathToItem(path) does not return the drop target
+    // but the first child if the drop target has children.
+    // This still needs further investigation. See also HitTest().
+    // Note: this function is called by wxgtk_tree_model_drag_data_received
+    // which has been set up as a callback for GTK.
     wxDataViewItem item(GetOwner()->GTKPathToItem(path));
     if ( !item )
         return FALSE;
@@ -3683,6 +3702,10 @@
     event.SetItem( item );
     event.SetModel( m_wx_model );
     event.SetDataFormat(gtk_selection_data_get_target(selection_data));
+    event.SetDataSize(gtk_selection_data_get_length(selection_data));
+    gint x, y;
+    gtk_widget_get_pointer( m_owner->GtkGetTreeView(), &x, &y );
+    event.SetPosition( x, y );    // "scrolled position" required for HitTest()
     if (!m_owner->HandleWindowEvent( event ))
         return FALSE;
 
@@ -5104,7 +5127,8 @@
     // gtk_tree_view_get_path_at_pos() is the wrong function. It doesn't mind the header but returns column.
     // See http://mail.gnome.org/archives/gtkmm-list/2005-January/msg00080.html
     // So we have to use both of them.
-    // Friedrich Haase 2010-9-20
+    item = wxDataViewItem(0);
+    column = NULL;
     wxGtkTreePath path, pathScratch;
     GtkTreeViewColumn* GtkColumn = NULL;
     GtkTreeViewDropPosition pos = GTK_TREE_VIEW_DROP_INTO_OR_AFTER;
@@ -5112,8 +5136,8 @@
     gint cell_y = 0;
     
     // cannot directly call GtkGetTreeView(), HitTest is const and so is this pointer
-    wxDataViewCtrl* ctrl = (wxDataViewCtrl*)this; // ugly workaround, ctrl is NOT const
-    GtkTreeView* treeView = GTK_TREE_VIEW(ctrl->GtkGetTreeView());
+    wxDataViewCtrl* self = const_cast<wxDataViewCtrl *>(this); // ugly workaround, self is NOT const
+    GtkTreeView* treeView = GTK_TREE_VIEW(self->GtkGetTreeView());
     
     // is there possibly a better suited function to get the column?
     gtk_tree_view_get_path_at_pos(                // and this is the wrong call but it delivers the column

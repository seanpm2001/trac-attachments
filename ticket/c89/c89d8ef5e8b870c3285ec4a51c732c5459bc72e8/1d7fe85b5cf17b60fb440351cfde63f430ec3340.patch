Index: samples/thread/thread.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/thread/thread.cpp,v
retrieving revision 1.27
diff -u -r1.27 thread.cpp
--- samples/thread/thread.cpp	2007/02/04 00:34:03	1.27
+++ samples/thread/thread.cpp	2007/05/16 21:08:59
@@ -72,6 +72,47 @@
 // Create a new application object
 IMPLEMENT_APP(MyApp)
 
+
+BEGIN_DECLARE_EVENT_TYPES()
+DECLARE_EVENT_TYPE(EVT_COMMAND_MYEVENT, 4567)
+END_DECLARE_EVENT_TYPES()
+
+
+class MyEvent: public wxCommandEvent
+{
+public:
+  MyEvent( const wxString& somestring )
+    : wxCommandEvent(EVT_COMMAND_MYEVENT, 0) ,
+    str(somestring)
+  { }
+
+  MyEvent(const MyEvent& t)
+    : wxCommandEvent(t),
+    str(t.str)
+  { }
+
+  virtual ~MyEvent( ) { }
+
+  wxString GetStr( ) const { return str; }
+
+  virtual wxEvent *Clone() const { return new MyEvent(*this); }
+
+private:
+  wxString str;
+};
+
+
+typedef void (wxEvtHandler::*MyEventFunction)(MyEvent&);
+
+
+#define EVT_MYEVENT(fn)\
+  DECLARE_EVENT_TABLE_ENTRY(EVT_COMMAND_MYEVENT,wxID_ANY,wxID_ANY,\
+  (wxObjectEventFunction) (wxEventFunction) (MyEventFunction)& fn, NULL),
+
+
+DEFINE_EVENT_TYPE(EVT_COMMAND_MYEVENT)
+
+
 // Define a new frame type
 class MyFrame: public wxFrame
 {
@@ -91,6 +132,8 @@
     void OnQuit(wxCommandEvent& event);
     void OnClear(wxCommandEvent& event);
 
+    void OnMyEvent(MyEvent& event);
+
     void OnStartThread(wxCommandEvent& event);
     void OnStartThreads(wxCommandEvent& event);
     void OnStopThread(wxCommandEvent& event);
@@ -228,6 +271,9 @@
     WriteText(text);
     // wxLogMessage(text); -- test wxLog thread safeness
 
+    MyEvent tge( "Calling from: void *MyThread::Entry()" );
+    wxPostEvent(m_frame, tge);
+
     for ( m_count = 0; m_count < 10; m_count++ )
     {
         // check if we were asked to exit
@@ -351,6 +397,8 @@
     EVT_MENU(THREAD_START_WORKER, MyFrame::OnStartWorker)
     EVT_MENU(WORKER_EVENT, MyFrame::OnWorkerEvent)
 
+    EVT_MYEVENT( MyFrame::OnMyEvent )
+
     EVT_IDLE(MyFrame::OnIdle)
 END_EVENT_TABLE()
 
@@ -790,4 +838,10 @@
     wxCriticalSectionLocker lock(m_critsectWork);
 
     return m_cancelled;
+}
+
+
+void MyFrame::OnMyEvent( MyEvent& evt )
+{
+  WriteText(evt.GetStr());
 }


 	  	 

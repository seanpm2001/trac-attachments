Index: build/tools/builder.py
===================================================================
--- build/tools/builder.py	(revision 67780)
+++ build/tools/builder.py	(working copy)
@@ -186,8 +186,50 @@
 class MSVCBuilder(Builder):
     def __init__(self):
         Builder.__init__(self, commandName="nmake.exe", formatName="msvc")
+        # to get the os.environ paths correctly set for MSVC (at minimum
+        # Express editions need this or user has to do workarounds)
+        import distutils.msvc9compiler
+        from distutils.util import get_platform
+        PLAT_TO_VCVARS = {'win32' : 'x86',
+                          'win-amd64' : 'amd64',
+                          'win-ia64' : 'ia64'
+                         }
+        version = distutils.msvc9compiler.get_build_version() or 9.0
+        try:
+            self.vc_env = distutils.msvc9compiler.query_vcvarsall(version,PLAT_TO_VCVARS[get_platform()])
+        except:
+            self.vc_env = None
+            sys.stderr.write("Python was built with MSVC %d, "
+                   "and extensions need to be built with the same "
+                   "version of the compiler, but it doesn't appear "
+                   "to be installed.\n"
+                   % version or 9.0)
+        vc_env = self.vc_env
+        if vc_env:
+            # take care to only use strings in the environment.
+            devpath = vc_env['path'].encode('mbcs').split(os.pathsep)
+            os.environ['lib'] = vc_env['lib'].encode('mbcs')
+            os.environ['include'] = vc_env['include'].encode('mbcs')
 
+            if len(devpath) == 0:
+                sys.stderr.write("Python was built with MSVC %d, "
+                       "and extensions need to be built with the same "
+                       "version of the compiler, but it doesn't appear "
+                       "to be installed.\n"
+                       % version)
+
+            # extend the MSVC path with the current path
+            try:
+                for p in os.environ['path'].split(';'):
+                    devpath.append(p)
+            except KeyError:
+                pass
+            devpath = distutils.msvc9compiler.normalize_and_reduce_paths(devpath)
+            os.environ['path'] = ";".join(devpath)
+        
+
     def isAvailable(self):
+        if self.vc_env == None: return False
         PATH = os.environ['PATH'].split(os.path.pathsep)
         for p in PATH:
             if os.path.exists(os.path.join(p, self.name)):

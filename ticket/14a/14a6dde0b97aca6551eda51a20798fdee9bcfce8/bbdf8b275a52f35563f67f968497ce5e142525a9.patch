Index: build/tools/builder.py
===================================================================
--- build/tools/builder.py	(revision 67784)
+++ build/tools/builder.py	(working copy)
@@ -186,12 +186,51 @@
 class MSVCBuilder(Builder):
     def __init__(self):
         Builder.__init__(self, commandName="nmake.exe", formatName="msvc")
+        # to get the os.environ paths correctly set for MSVC (at minimum
+        # Express editions need this or user has to do workarounds)
+        # however if the Path environment variable is already setup then
+        # skip this since we don't want to mess with which version (if
+        # multiple are on the users computer) is used to compile this.
+        PATH = os.environ['path'].split(os.path.pathsep)
+        for p in PATH:
+            if os.path.exists(os.path.join(p, self.name)):
+                return #and just hope of course that the *whole* path is setup properly
+        import distutils.msvc9compiler
+        from distutils.util import get_platform
+        PLAT_TO_VCVARS = {'win32' : 'x86',
+                          'win-amd64' : 'amd64',
+                          'win-ia64' : 'ia64'
+                         }
+        for version in [9.0,10.0,8.0,7.0,6.0]: # try VC 2008 first for python extension compatibility in most cases.
+            try:
+                vc_env = distutils.msvc9compiler.query_vcvarsall(version,PLAT_TO_VCVARS[get_platform()])
+            except:
+                continue
+            if not vc_env: continue #try next version.
+        
+            # take care to only use strings in the environment.
+            devpath = vc_env['path'].encode('mbcs').split(os.pathsep)
+            os.environ['lib'] = vc_env['lib'].encode('mbcs')
+            os.environ['include'] = vc_env['include'].encode('mbcs')
 
+            # extend the MSVC path with the current path
+            try:
+                for p in os.environ['path'].split(';'):
+                    devpath.append(p)
+            except KeyError:
+                pass
+            devpath = distutils.msvc9compiler.normalize_and_reduce_paths(devpath)
+            os.environ['path'] = ";".join(devpath)
+            break #found a valid version.
+        
+
     def isAvailable(self):
-        PATH = os.environ['PATH'].split(os.path.pathsep)
+        PATH = os.environ['path'].split(os.path.pathsep)
         for p in PATH:
             if os.path.exists(os.path.join(p, self.name)):
                 return True
+        sys.stderr.write("Could not find MSVC nmake.exe in PATH environment variable. Make sure it\nis installed correctly "
+                         "or manually add the required exectable directories for your version to the PATH environment var.") 
         return False
 
         

diff --recursive --exclude=CVS --exclude=GTK --new-file -rbu2 ../wxWindows/src/generic/gridctrl.cpp ./src/generic/gridctrl.cpp
--- ../wxWindows/src/generic/gridctrl.cpp	Thu Jan  1 01:00:00 1970
+++ ./src/generic/gridctrl.cpp	Thu Apr 12 15:38:10 2001
@@ -0,0 +1,257 @@
+///////////////////////////////////////////////////////////////////////////
+// Name:        generic/gridctrl.cpp
+// Purpose:     wxGrid controls
+// Author:      Paul Gammans, Roger Gammans
+// Modified by:
+// Created:     11/04/2001
+// RCS-ID:      $Id:$
+// Copyright:   (c) The Computer Surgery (paul@compsurg.co.uk)
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+
+#include "wx/wxprec.h"
+#include "wx/generic/gridctrl.h"
+#include "wx/tokenzr.h"
+
+// ----------------------------------------------------------------------------
+// wxGridCellDateTimeRenderer
+// ----------------------------------------------------------------------------
+// Enables a grid cell to display a formated date and or time
+
+
+wxGridCellDateTimeRenderer::wxGridCellDateTimeRenderer(wxString outformat, wxString informat)
+{
+    m_iformat = informat;
+    m_oformat = outformat;
+    m_tz = wxDateTime::Local;
+    m_dateDef = wxDefaultDateTime;
+}
+
+wxGridCellRenderer *wxGridCellDateTimeRenderer::Clone() const
+{
+    wxGridCellDateTimeRenderer *renderer = new wxGridCellDateTimeRenderer;
+    renderer->m_iformat = m_iformat;
+    renderer->m_oformat = m_oformat;
+    renderer->m_dateDef = m_dateDef;
+    renderer->m_tz = m_tz;
+
+    return renderer;
+}
+
+wxString wxGridCellDateTimeRenderer::GetString(wxGrid& grid, int row, int col)
+{
+    wxGridTableBase *table = grid.GetTable();
+
+    bool hasDatetime = FALSE;
+    wxDateTime val;
+    wxString text;
+    if ( table->CanGetValueAs(row, col, wxGRID_VALUE_DATETIME) )
+    {
+        void * tempval = table->GetValueAsCustom(row, col,wxGRID_VALUE_DATETIME);
+
+        if (tempval){
+            val = *((wxDateTime *)tempval);
+            hasDatetime = TRUE;
+            delete (wxDateTime *)tempval;
+        }
+
+    }
+
+    if (!hasDatetime )
+    {
+        text = table->GetValue(row, col);
+        hasDatetime = (val.ParseFormat( text, m_iformat, m_dateDef ) != (wxChar *)NULL) ;
+    }
+
+    if ( hasDatetime )
+        text = val.Format(m_oformat, m_tz );
+
+    //If we faild to parse string just show what we where given?
+    return text;
+}
+
+void wxGridCellDateTimeRenderer::Draw(wxGrid& grid,
+                                   wxGridCellAttr& attr,
+                                   wxDC& dc,
+                                   const wxRect& rectCell,
+                                   int row, int col,
+                                   bool isSelected)
+{
+    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
+
+    SetTextColoursAndFont(grid, attr, dc, isSelected);
+
+    // draw the text right aligned by default
+    int hAlign, vAlign;
+    attr.GetAlignment(&hAlign, &vAlign);
+    hAlign = wxRIGHT;
+
+    wxRect rect = rectCell;
+    rect.Inflate(-1);
+
+    grid.DrawTextRectangle(dc, GetString(grid, row, col), rect, hAlign, vAlign);
+}
+
+wxSize wxGridCellDateTimeRenderer::GetBestSize(wxGrid& grid,
+                                            wxGridCellAttr& attr,
+                                            wxDC& dc,
+                                            int row, int col)
+{
+    return DoGetBestSize(attr, dc, GetString(grid, row, col));
+}
+
+void wxGridCellDateTimeRenderer::SetParameters(const wxString& params){
+    if(params)
+        m_oformat=params;
+}
+
+// ----------------------------------------------------------------------------
+// wxGridCellChoiceNumberRenderer
+// ----------------------------------------------------------------------------
+// Renders a number as a textual equivalent.
+// eg data in cell is 0,1,2 ... n the cell could be rendered as "John","Fred"..."Bob"
+
+
+wxGridCellEnumRenderer::wxGridCellEnumRenderer(const wxString& choices)
+{
+    if(choices)
+        SetParameters(choices);
+}
+
+wxGridCellRenderer *wxGridCellEnumRenderer::Clone() const
+{
+    wxGridCellEnumRenderer *renderer = new wxGridCellEnumRenderer;
+    renderer->m_choices = m_choices;
+    return renderer;
+}
+
+wxString wxGridCellEnumRenderer::GetString(wxGrid& grid, int row, int col)
+{
+    wxGridTableBase *table = grid.GetTable();
+    wxString text;
+    if ( table->CanGetValueAs(row, col, wxGRID_VALUE_NUMBER) )
+    {
+        int choiceno = table->GetValueAsLong(row, col);
+        text.Printf(_T("%s"), m_choices[ choiceno ].c_str() );
+    }
+    else
+    {
+        text = table->GetValue(row, col);
+    }
+
+
+    //If we faild to parse string just show what we where given?
+    return text;
+}
+
+void wxGridCellEnumRenderer::Draw(wxGrid& grid,
+                                   wxGridCellAttr& attr,
+                                   wxDC& dc,
+                                   const wxRect& rectCell,
+                                   int row, int col,
+                                   bool isSelected)
+{
+    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
+
+    SetTextColoursAndFont(grid, attr, dc, isSelected);
+
+    // draw the text right aligned by default
+    int hAlign, vAlign;
+    attr.GetAlignment(&hAlign, &vAlign);
+    hAlign = wxRIGHT;
+
+    wxRect rect = rectCell;
+    rect.Inflate(-1);
+
+    grid.DrawTextRectangle(dc, GetString(grid, row, col), rect, hAlign, vAlign);
+}
+
+wxSize wxGridCellEnumRenderer::GetBestSize(wxGrid& grid,
+                                            wxGridCellAttr& attr,
+                                            wxDC& dc,
+                                            int row, int col)
+{
+    return DoGetBestSize(attr, dc, GetString(grid, row, col));
+}
+
+void wxGridCellEnumRenderer::SetParameters(const wxString& params)
+{
+    if ( !params )
+    {
+        // what can we do?
+        return;
+    }
+
+    m_choices.Empty();
+
+    wxStringTokenizer tk(params, _T(','));
+    while ( tk.HasMoreTokens() )
+    {
+        m_choices.Add(tk.GetNextToken());
+    }
+}
+
+// ----------------------------------------------------------------------------
+// wxGridCellEnumEditor
+// ----------------------------------------------------------------------------
+// A cell editor which displays an enum number as a textual equivalent.
+// eg data in cell is 0,1,2 ... n the cell could be displayed as "John","Fred"..."Bob"
+// in the combo choice box
+// 
+wxGridCellEnumEditor::wxGridCellEnumEditor(const wxString& choices)
+                    : wxGridCellChoiceEditor()
+{
+    if(choices)
+        SetParameters(choices);
+}
+
+wxGridCellEditor *wxGridCellEnumEditor::Clone() const {
+    wxGridCellEnumEditor *editor = new wxGridCellEnumEditor();
+    editor->m_startint = m_startint;
+    return editor;
+}
+
+void wxGridCellEnumEditor::BeginEdit(int row, int col, wxGrid* grid) {
+
+    wxASSERT_MSG(m_control,
+                 wxT("The wxGridCellEnumEditor must be Created first!"));
+
+    wxGridTableBase *table = grid->GetTable();
+ 
+    if ( table->CanGetValueAs(row, col, wxGRID_VALUE_NUMBER) )
+    {
+        m_startint = table->GetValueAsLong(row, col);
+    }
+    else
+    {
+        wxString startValue = table->GetValue(row, col);
+        if (startValue.IsNumber() && !startValue.IsEmpty())
+        {
+            startValue.ToLong(&m_startint);
+        }
+        else
+        {
+            m_startint=-1;
+        }
+    }
+
+    Combo()->SetSelection(m_startint); 
+    Combo()->SetInsertionPointEnd();
+    Combo()->SetFocus();
+
+}
+
+bool wxGridCellEnumEditor::EndEdit(int row, int col, wxGrid* grid) {
+
+    int pos = Combo()->GetSelection();
+    bool changed = (pos != m_startint);
+    if (changed)
+    {
+        if (grid->GetTable()->CanSetValueAs(row, col, wxGRID_VALUE_NUMBER))
+            grid->GetTable()->SetValueAsLong(row, col, pos);
+        else
+            grid->GetTable()->SetValue(row, col,wxString::Format("%i",pos));
+    }
+    return changed;
+}
diff --recursive --exclude=CVS --exclude=GTK --exclude=configure --exclude=Make* --exclude=make* --new-file -rbu2 ../wxWindows/src/gtk/files.lst ./src/gtk/files.lst
--- ../wxWindows/src/gtk/files.lst	Wed Apr 11 15:57:46 2001
+++ ./src/gtk/files.lst	Wed Apr 11 19:09:23 2001
@@ -521,4 +521,5 @@
 		generic/fontdlgg.h \
 		generic/grid.h \
+		generic/gridctrl.h \
 		generic/gridg.h \
 		generic/helpext.h \
@@ -793,4 +794,5 @@
 		grid.o \
 		gridsel.o \
+		gridctrl.o \
 		helpext.o \
 		helphtml.o \

 	  	 

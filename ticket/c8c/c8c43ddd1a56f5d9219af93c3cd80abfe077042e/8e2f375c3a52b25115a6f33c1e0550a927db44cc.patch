Index: include/wx/mac/carbon/listbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/listbox.h,v
retrieving revision 1.17
diff -b -u -2 -r1.17 listbox.h
--- include/wx/mac/carbon/listbox.h	2006/03/09 12:46:23	1.17
+++ include/wx/mac/carbon/listbox.h	2006/03/10 20:00:17
@@ -128,4 +128,5 @@
     void            MacScrollTo( int n ) ;
     bool            MacSuppressSelection( bool suppress ) ;
+    int             MacHitTest( const wxPoint& point ) const ;
 
     // free memory (common part of Clear() and dtor)
Index: src/mac/carbon/listbox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/listbox.cpp,v
retrieving revision 1.108
diff -b -u -2 -r1.108 listbox.cpp
--- src/mac/carbon/listbox.cpp	2006/03/09 13:08:07	1.108
+++ src/mac/carbon/listbox.cpp	2006/03/10 20:00:18
@@ -614,4 +614,9 @@
 }
 
+int wxListBox::DoListHitTest(const wxPoint& point) const
+{
+    return MacHitTest(point);
+}
+
 // Some custom controls depend on this
 /* static */ wxVisualAttributes
@@ -783,35 +788,99 @@
 }
 
-int wxListBox::DoListHitTest(const wxPoint& point) const
+int wxListBox::MacHitTest(const wxPoint& inpoint) const
 {
-    //Yuck - there is no easy way to get a databrowseritem from a point
-    //so we need to iterate through our items to see which one this falls under
+    OSErr err;
 
-    // TODO: binary search would be faster
-    int count = GetCount();
+    // There are few reasons why this is complicated:
+    // 1) There is no native hittest function for mac
+    // 2) GetDataBrowserItemPartBounds only works on visible items
+    // 3) We can't do it through GetDataBrowserTableView[Item]RowHeight
+    //    because what it returns is basically inaccurate in the context
+    //    of the coordinates we want here, but we use this as a guess
+    //    for where the first visible item lies
+
+    // do client --> root window translation as all points
+    // from databrowser calls are relative to the root window
+    wxPoint point = inpoint;
+    
+    // interestingly enough 10.2 (and below?) have GetDataBrowserItemPartBounds
+    // giving root window coordinates but 10.3 and above give client coordinates
+    // so we only compare using root window coordinates on 10.3 and up
+    if ( UMAGetSystemVersion() < 0x1030 )
+        MacClientToRootWindow(&point.x, &point.y);
+
+    // get column property id (req. for call to itempartbounds)
     DataBrowserTableViewColumnID colId = 0;
+    err = GetDataBrowserTableViewColumnProperty(m_peer->GetControlRef(), 0, &colId);
+    wxCHECK_MSG(err == noErr, wxNOT_FOUND, wxT("Unexpected error from GetDataBrowserTableViewColumnProperty"));
 
-    //Get column property id (req. for call to itempartbounds)
-    GetDataBrowserTableViewColumnProperty(m_peer->GetControlRef(), 0, &colId);
+    int low = 0, high = GetCount() - 1, mid;
     
-    for(int i = 1; i <= count; ++i)
+    // OK, first we need to find the first visible item we have -
+    // this will be the "low" for our binary search. There is no real
+    // easy way around this, as we will need to do a SLOW linear search
+    // until we find a visible item, but we can do a cheap calculation
+    // via the row height to speed things up a bit
+    UInt32 scrollx, scrolly;
+    err = GetDataBrowserScrollPosition(m_peer->GetControlRef(), &scrollx, &scrolly);
+    wxCHECK_MSG(err == noErr, wxNOT_FOUND, wxT("Unexpected error from GetDataBrowserScrollPosition"));
+    
+    UInt16 height; 
+    err = GetDataBrowserTableViewRowHeight(m_peer->GetControlRef(), &height);
+    wxCHECK_MSG(err == noErr, wxNOT_FOUND, wxT("Unexpected error from GetDataBrowserTableViewRowHeight"));
+
+    low = scrolly / height;
+    
+    //search for the first visible item (note that the scroll guess above
+    //is the low bounds of where the item might lie so we only use that as a 
+    //starting point - we should reach it within 1 or 2 iterations of the loop)
+    while(low <= high)
     {
         Rect bounds;
-        GetDataBrowserItemPartBounds(m_peer->GetControlRef(), i, colId, 
+        err = GetDataBrowserItemPartBounds(m_peer->GetControlRef(), low+1, colId, 
                                      kDataBrowserPropertyEnclosingPart,
-                                     &bounds);
+                                           &bounds); //note +1 to trans to mac id
+        wxCHECK_MSG(err == noErr || err == errDataBrowserItemNotFound,
+                    wxNOT_FOUND, 
+                    wxT("Unexpected error from GetDataBrowserItemPartBounds"));
+
+        if(err != errDataBrowserItemNotFound) 
+            break; 
+        
+        low++;
+    }                
         
-        //translate to client coords
-        //
-        // TODO: it would probably be more efficient to translate point to
-        //       screen coordinates once outside of the loop
-        MacRootWindowToWindow(&bounds.left, &bounds.top);
-        MacRootWindowToWindow(&bounds.right, &bounds.bottom);
+    // NOW do a binary search for where the item
+    // lies, searching low again if we hit an item that isn't visible
+    while(low <= high)
+    {
+        mid = (low + high) / 2;
         
+        Rect bounds;
+        err = GetDataBrowserItemPartBounds(m_peer->GetControlRef(), mid+1, colId, 
+                                           kDataBrowserPropertyEnclosingPart,
+                                           &bounds); //note +1 to trans to mac id
+        wxCHECK_MSG(err == noErr || err == errDataBrowserItemNotFound,
+                    wxNOT_FOUND, 
+                    wxT("Unexpected error from GetDataBrowserItemPartBounds"));
+
+        if(err == errDataBrowserItemNotFound) //item not visible, attempt to find a visible one
+        {
+            high = mid - 1; //search lower
+        }
+        else //visible item, do actual hitttest
+        {        
         //if point is within the bounds, return this item
+            //(since we assume all x coords of items are equal we 
+            // only test the x coord in equality)
         if( (point.x >= bounds.left && point.x <= bounds.right) &&
             (point.y >= bounds.top && point.y <= bounds.bottom) )
         {
-            return i - 1; //found
+                return mid; //found
+            }
+            else if (point.y < bounds.top)
+                high = mid - 1; //index(bounds) greater then key(point)
+            else
+                low = mid + 1; //index(bounds) less then key(point)
         }
     }

 	  	 

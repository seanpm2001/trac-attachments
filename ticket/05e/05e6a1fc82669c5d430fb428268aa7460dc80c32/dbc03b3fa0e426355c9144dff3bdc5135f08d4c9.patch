Index: docs/latex/wx/array.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/array.tex,v
retrieving revision 1.41
diff -bu2 -r1.41 docs/latex/wx/array.tex
--- docs/latex/wx/array.tex
+++ docs/latex/wx/array.tex
@@ -243,5 +243,4 @@
 does exactly the same as \helpref{Item()}{wxarrayitem} method.

-\helpref{Count}{wxarraycount}\\
 \helpref{GetCount}{wxarraygetcount}\\
 \helpref{IsEmpty}{wxarrayisempty}\\
@@ -516,11 +515,4 @@
 frees the memory allocated to the array.

-\membersection{wxArray::Count}\label{wxarraycount}
-
-\constfunc{size\_t}{Count}{\void}
-
-Same as \helpref{GetCount()}{wxarraygetcount}. This function is deprecated -
-it exists only for compatibility.
-
 \membersection{wxObjArray::Detach}\label{wxobjarraydetach}

Index: docs/latex/wx/arrstrng.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/arrstrng.tex,v
retrieving revision 1.17
diff -bu2 -r1.17 docs/latex/wx/arrstrng.tex
--- docs/latex/wx/arrstrng.tex
+++ docs/latex/wx/arrstrng.tex
@@ -145,12 +145,4 @@
 See also: \helpref{Empty}{wxarraystringempty}
 
-\membersection{wxArrayString::Count}\label{wxarraystringcount}
-
-\constfunc{size\_t}{Count}{\void}
-
-Returns the number of items in the array. This function is deprecated and is
-for backwards compatibility only, please use 
-\helpref{GetCount}{wxarraystringgetcount} instead.
-
 \membersection{wxArrayString::Empty}\label{wxarraystringempty}
 
Index: docs/latex/wx/ctrlsub.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/ctrlsub.tex,v
retrieving revision 1.16
diff -bu2 -r1.16 docs/latex/wx/ctrlsub.tex
--- docs/latex/wx/ctrlsub.tex
+++ docs/latex/wx/ctrlsub.tex
@@ -268,15 +268,4 @@
 
 
-\membersection{wxControlWithItems::Number}\label{wxcontrolwithitemsnumber}
-
-\constfunc{int}{Number}{\void}
-
-{\bf Obsolescence note:} This method is obsolete and was replaced with
-\helpref{GetCount}{wxcontrolwithitemsgetcount}, please use the new method in
-the new code. This method is only available if wxWidgets was compiled with
-{\tt WXWIN\_COMPATIBILITY\_2\_2} defined and will disappear completely in
-future versions.
-
-
 \membersection{wxControlWithItems::Select}\label{wxcontrolwithitemsselect}
 
Index: docs/latex/wx/dynlib.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/dynlib.tex,v
retrieving revision 1.18
diff -bu2 -r1.18 docs/latex/wx/dynlib.tex
--- docs/latex/wx/dynlib.tex
+++ docs/latex/wx/dynlib.tex
@@ -17,10 +17,4 @@
 done in the objects destructor automatically.
 
-% deprecated now...
-%
-%\wxheading{See also}
-%
-%\helpref{wxDllLoader}{wxdllloader}
-
 \wxheading{Derived from}
 
Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/function.tex,v
retrieving revision 1.279
diff -bu2 -r1.279 docs/latex/wx/function.tex
--- docs/latex/wx/function.tex
+++ docs/latex/wx/function.tex
@@ -21,5 +21,4 @@
 
 \helpref{CLASSINFO}{classinfo}\\
-\helpref{copystring}{copystring}\\
 \helpref{DECLARE\_ABSTRACT\_CLASS}{declareabstractclass}\\
 \helpref{DECLARE\_APP}{declareapp}\\
@@ -1615,15 +1614,4 @@
 \section{String functions}\label{stringfunctions}
 
-
-\membersection{::copystring}\label{copystring}
-
-\func{char *}{copystring}{\param{const char *}{s}}
-
-Makes a copy of the string {\it s} using the C++ new operator, so it can be
-deleted with the {\it delete} operator.
-
-This function is deprecated, use \helpref{wxString}{wxstring} class instead.
-
-
 \membersection{::wxGetTranslation}\label{wxgettranslation}
 
Index: docs/latex/wx/menu.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/menu.tex,v
retrieving revision 1.66
diff -bu2 -r1.66 docs/latex/wx/menu.tex
--- docs/latex/wx/menu.tex
+++ docs/latex/wx/menu.tex
@@ -74,8 +74,4 @@
 \item Provide EVT\_MENU handlers in the window which pops up the menu, or in an ancestor of
 this window.
-\item Define a callback of type wxFunction, which you pass to the wxMenu constructor.
-The callback takes a reference to the menu, and a reference to a
-\helpref{wxCommandEvent}{wxcommandevent}. This method is deprecated and should
-not be used in the new code, it is provided for backwards compatibility only.
 \end{enumerate}
 
Index: include/wx/arrstr.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/arrstr.h,v
retrieving revision 1.25
diff -bu2 -r1.25 include/wx/arrstr.h
--- include/wx/arrstr.h
+++ include/wx/arrstr.h
@@ -130,6 +130,4 @@
     // is it empty?
   bool IsEmpty() const { return m_nCount == 0; }
-    // number of elements in the array (GetCount is preferred API)
-  size_t Count() const { return m_nCount; }
 
   // items access (range checking is done in debug version)
@@ -150,5 +148,5 @@
       wxASSERT_MSG( !IsEmpty(),
                     _T("wxArrayString: index out of bounds") );
-      return Item(Count() - 1);
+      return Item(GetCount() - 1);
   }
 
Index: include/wx/docview.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/docview.h,v
retrieving revision 1.76
diff -bu2 -r1.76 include/wx/docview.h
--- include/wx/docview.h
+++ include/wx/docview.h
@@ -590,6 +590,6 @@
 
     // Accessors
-    virtual wxString GetHistoryFile(size_t i) const;
-    virtual size_t GetCount() const { return m_fileHistoryN; }
+    virtual wxString GetHistoryFile(size_t i) const { return m_fileHistory[i]; }
+    virtual size_t GetCount() const { return m_fileHistory.GetCount(); }
 
     const wxList& GetMenus() const { return m_fileMenus; }
@@ -606,9 +606,9 @@
 protected:
     // Last n files
-    wxChar**          m_fileHistory;
-    // Number of files saved
-    size_t            m_fileHistoryN;
+    wxArrayString     m_fileHistory;
+
     // Menus to maintain (may need several for an MDI app)
     wxList            m_fileMenus;
+
     // Max files to maintain
     size_t            m_fileMaxFiles;
Index: include/wx/dynarray.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/dynarray.h,v
retrieving revision 1.92
diff -bu2 -r1.92 include/wx/dynarray.h
--- include/wx/dynarray.h
+++ include/wx/dynarray.h
@@ -129,5 +129,4 @@
   void SetCount(size_t n, T v = T()) { resize(n, v); }              \
   bool IsEmpty() const { return empty(); }                          \
-  size_t Count() const { return size(); }                           \
                                                                     \
   typedef T base_type;                                              \
@@ -176,5 +175,4 @@
   void SetCount(size_t n, T defval = T());                          \
   bool IsEmpty() const { return m_nCount == 0; }                    \
-  size_t Count() const { return m_nCount; }                         \
                                                                     \
   typedef T base_type;                                              \
@@ -288,5 +286,5 @@
     { return (T&)/*const cast*/base::operator[](uiIndex); }           \
   T& Last() const                                                     \
-    { return Item(Count() - 1); }                                     \
+    { return Item(GetCount() - 1); }                                  \
                                                                       \
   int Index(T e, bool bFromEnd = false) const                         \
@@ -337,5 +335,5 @@
     { return (T&)(base::operator[](uiIndex)); }                       \
   T& Last() const                                                     \
-    { return (T&)(base::operator[](Count() - 1)); }                   \
+    { return (T&)(base::operator[](GetCount() - 1)); }                \
                                                                       \
   int Index(T lItem, bool bFromEnd = false) const                     \
@@ -563,5 +561,4 @@
   bool IsEmpty() const { return base_array::empty(); }                   \
   bool empty() const { return base_array::empty(); }                     \
-  size_t Count() const { return base_array::size(); }                    \
   void Shrink() { base::Shrink(); }                                      \
                                                                          \
Index: include/wx/menuitem.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/menuitem.h,v
retrieving revision 1.37
diff -bu2 -r1.37 include/wx/menuitem.h
--- include/wx/menuitem.h
+++ include/wx/menuitem.h
@@ -109,7 +109,9 @@
 #endif // wxUSE_ACCEL
 
+#if WXWIN_COMPATIBILITY_2_6
     // compatibility only, use new functions in the new code
-    void SetName(const wxString& str) { SetText(str); }
-    const wxString& GetName() const { return GetText(); }
+    wxDEPRECATED( void SetName(const wxString& str) );
+    wxDEPRECATED( const wxString& GetName() const );
+#endif
 
     static wxMenuItem *New(wxMenu *parentMenu,
@@ -149,4 +151,11 @@
 };
 
+#if WXWIN_COMPATIBILITY_2_6
+void wxMenuItem::SetName(const wxString &str)
+    { SetText(str); }
+const wxString& wxMenuItem::GetName() const
+    { return GetText(); }
+#endif
+
 // ----------------------------------------------------------------------------
 // include the real class declaration
Index: src/common/docview.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/docview.cpp,v
retrieving revision 1.149
diff -bu2 -r1.149 src/common/docview.cpp
--- src/common/docview.cpp
+++ src/common/docview.cpp
@@ -60,4 +60,5 @@
 #include "wx/cmdproc.h"
 #include "wx/tokenzr.h"
+#include "wx/filename.h"
 
 #include <stdio.h>
@@ -2086,48 +2087,26 @@
 // ----------------------------------------------------------------------------
 
-static inline wxChar* MYcopystring(const wxString& s)
-{
-    wxChar* copy = new wxChar[s.length() + 1];
-    return wxStrcpy(copy, s.c_str());
-}
-
-static inline wxChar* MYcopystring(const wxChar* s)
-{
-    wxChar* copy = new wxChar[wxStrlen(s) + 1];
-    return wxStrcpy(copy, s);
-}
-
 wxFileHistory::wxFileHistory(size_t maxFiles, wxWindowID idBase)
 {
     m_fileMaxFiles = maxFiles;
     m_idBase = idBase;
-    m_fileHistoryN = 0;
-    m_fileHistory = new wxChar *[m_fileMaxFiles];
 }
 
 wxFileHistory::~wxFileHistory()
 {
-    size_t i;
-    for (i = 0; i < m_fileHistoryN; i++)
-        delete[] m_fileHistory[i];
-    delete[] m_fileHistory;
 }
 
-// File history management
 void wxFileHistory::AddFileToHistory(const wxString& file)
 {
+    wxFileName fn(file);
     size_t i;
 
     // Check we don't already have this file
-    for (i = 0; i < m_fileHistoryN; i++)
+    for (i = 0; i < m_fileHistory.GetCount(); i++)
     {
-#if defined( __WXMSW__ ) // Add any other OSes with case insensitive file names
-        wxString testString;
-        if ( m_fileHistory[i] )
-            testString = m_fileHistory[i];
-        if ( m_fileHistory[i] && ( file.Lower() == testString.Lower() ) )
-#else
-        if ( m_fileHistory[i] && ( file == m_fileHistory[i] ) )
-#endif
+        // we need to do a comparison using wxFileNames because it knows
+        // how to exactly compare files on the different platforms
+        // (e.g. handle case [in]sensitive filesystems)
+        if ( fn == wxFileName(m_fileHistory[i]) )
         {
             // we do have it, move it to the top of the history
@@ -2139,7 +2118,7 @@
 
     // if we already have a full history, delete the one at the end
-    if ( m_fileMaxFiles == m_fileHistoryN )
+    if ( m_fileMaxFiles == m_fileHistory.GetCount() )
     {
-        RemoveFileFromHistory (m_fileHistoryN - 1);
+        RemoveFileFromHistory (m_fileHistory.GetCount() - 1);
         AddFileToHistory (file);
         return;
@@ -2148,5 +2127,5 @@
     // Add to the project file history:
     // Move existing files (if any) down so we can insert file at beginning.
-    if (m_fileHistoryN < m_fileMaxFiles)
+    if (m_fileHistory.GetCount() < m_fileMaxFiles)
     {
         wxList::compatibility_iterator node = m_fileMenus.GetFirst();
@@ -2154,26 +2133,19 @@
         {
             wxMenu* menu = (wxMenu*) node->GetData();
-            if ( m_fileHistoryN == 0 && menu->GetMenuItemCount() )
+            if ( m_fileHistory.GetCount() == 0 && menu->GetMenuItemCount() )
             {
                 menu->AppendSeparator();
             }
-            menu->Append(m_idBase+m_fileHistoryN, _("[EMPTY]"));
+            menu->Append(m_idBase+m_fileHistory.GetCount(), _("[EMPTY]"));
             node = node->GetNext();
         }
-        m_fileHistoryN ++;
     }
-    // Shuffle filenames down
-    for (i = (m_fileHistoryN-1); i > 0; i--)
-    {
-        m_fileHistory[i] = m_fileHistory[i-1];
-    }
-    m_fileHistory[0] = MYcopystring(file);
+
+    m_fileHistory.Insert(file, 0);
 
     // this is the directory of the last opened file
     wxString pathCurrent;
     wxSplitPath( m_fileHistory[0], &pathCurrent, NULL, NULL );
-    for (i = 0; i < m_fileHistoryN; i++)
-    {
-        if ( m_fileHistory[i] )
+    for (i = 0; i < m_fileHistory.GetCount(); i++)
         {
             // if in same directory just show the filename; otherwise the full
@@ -2195,6 +2167,8 @@
             // we need to quote '&' characters which are used for mnemonics
             pathInMenu.Replace(_T("&"), _T("&&"));
+
             wxString buf;
             buf.Printf(s_MRUEntryFormat, i + 1, pathInMenu.c_str());
+
             wxList::compatibility_iterator node = m_fileMenus.GetFirst();
             while (node)
@@ -2205,20 +2179,13 @@
             }
         }
-    }
 }
 
 void wxFileHistory::RemoveFileFromHistory(size_t i)
 {
-    wxCHECK_RET( i < m_fileHistoryN,
+    wxCHECK_RET( i < m_fileHistory.GetCount(),
                  wxT("invalid index in wxFileHistory::RemoveFileFromHistory") );
 
-    // delete the element from the array (could use memmove() too...)
-    delete [] m_fileHistory[i];
-
-    size_t j;
-    for ( j = i; j < m_fileHistoryN - 1; j++ )
-    {
-        m_fileHistory[j] = m_fileHistory[j + 1];
-    }
+    // delete the element from the array 
+    m_fileHistory.RemoveAt(i);
 
     wxList::compatibility_iterator node = m_fileMenus.GetFirst();
@@ -2229,7 +2196,7 @@
         // shuffle filenames up
         wxString buf;
-        for ( j = i; j < m_fileHistoryN - 1; j++ )
+        for ( size_t j = i; j < m_fileHistory.GetCount(); j++ )
         {
-            buf.Printf(s_MRUEntryFormat, j + 1, m_fileHistory[j]);
+            buf.Printf(s_MRUEntryFormat, j + 1, m_fileHistory[j].c_str());
             menu->SetLabel(m_idBase + j, buf);
         }
@@ -2238,5 +2205,5 @@
 
         // delete the last menu item which is unused now
-        wxWindowID lastItemId = m_idBase + wx_truncate_cast(wxWindowID, m_fileHistoryN) - 1;
+        wxWindowID lastItemId = m_idBase + wx_truncate_cast(wxWindowID, m_fileHistory.GetCount());
         if (menu->FindItem(lastItemId))
         {
@@ -2245,5 +2212,5 @@
 
         // delete the last separator too if no more files are left
-        if ( m_fileHistoryN == 1 )
+        if ( m_fileHistory.GetCount() == 0 )
         {
             wxMenuItemList::compatibility_iterator nodeLast = menu->GetMenuItems().GetLast();
@@ -2260,21 +2227,4 @@
         }
     }
-
-    m_fileHistoryN--;
-}
-
-wxString wxFileHistory::GetHistoryFile(size_t i) const
-{
-    wxString s;
-    if ( i < m_fileHistoryN )
-    {
-        s = m_fileHistory[i];
-    }
-    else
-    {
-        wxFAIL_MSG( wxT("bad index in wxFileHistory::GetHistoryFile") );
-    }
-
-    return s;
 }
 
@@ -2293,15 +2243,19 @@
 void wxFileHistory::Load(wxConfigBase& config)
 {
-    m_fileHistoryN = 0;
+    m_fileHistory.Clear();
+
     wxString buf;
-    buf.Printf(wxT("file%d"), (int)m_fileHistoryN+1);
+    buf.Printf(wxT("file%d"), 1);
+
     wxString historyFile;
-    while ((m_fileHistoryN < m_fileMaxFiles) && config.Read(buf, &historyFile) && (!historyFile.empty()))
+    while ((m_fileHistory.GetCount() < m_fileMaxFiles) && 
+           config.Read(buf, &historyFile) && !historyFile.empty())
     {
-        m_fileHistory[m_fileHistoryN] = MYcopystring((const wxChar*) historyFile);
-        m_fileHistoryN ++;
-        buf.Printf(wxT("file%d"), (int)m_fileHistoryN+1);
+        m_fileHistory.Add(historyFile);
+
+        buf.Printf(wxT("file%d"), (int)m_fileHistory.GetCount()+1);
         historyFile = wxEmptyString;
     }
+
     AddFilesToMenu();
 }
@@ -2314,5 +2268,5 @@
         wxString buf;
         buf.Printf(wxT("file%d"), (int)i+1);
-        if (i < m_fileHistoryN)
+        if (i < m_fileHistory.GetCount())
             config.Write(buf, wxString(m_fileHistory[i]));
         else
@@ -2324,5 +2278,5 @@
 void wxFileHistory::AddFilesToMenu()
 {
-    if (m_fileHistoryN > 0)
+    if (m_fileHistory.GetCount() > 0)
     {
         wxList::compatibility_iterator node = m_fileMenus.GetFirst();
@@ -2336,13 +2290,10 @@
 
             size_t i;
-            for (i = 0; i < m_fileHistoryN; i++)
-            {
-                if (m_fileHistory[i])
+            for (i = 0; i < m_fileHistory.GetCount(); i++)
                 {
                     wxString buf;
-                    buf.Printf(s_MRUEntryFormat, i+1, m_fileHistory[i]);
+                buf.Printf(s_MRUEntryFormat, i+1, m_fileHistory[i].c_str());
                     menu->Append(m_idBase+i, buf);
                 }
-            }
             node = node->GetNext();
         }
@@ -2352,5 +2303,5 @@
 void wxFileHistory::AddFilesToMenu(wxMenu* menu)
 {
-    if (m_fileHistoryN > 0)
+    if (m_fileHistory.GetCount() > 0)
     {
         if (menu->GetMenuItemCount())
@@ -2360,14 +2311,11 @@
 
         size_t i;
-        for (i = 0; i < m_fileHistoryN; i++)
-        {
-            if (m_fileHistory[i])
+        for (i = 0; i < m_fileHistory.GetCount(); i++)
             {
                 wxString buf;
-                buf.Printf(s_MRUEntryFormat, i+1, m_fileHistory[i]);
+            buf.Printf(s_MRUEntryFormat, i+1, m_fileHistory[i].c_str());
                 menu->Append(m_idBase+i, buf);
             }
         }
-    }
 }
 
Index: src/common/utilscmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/utilscmn.cpp,v
retrieving revision 1.177
diff -bu2 -r1.177 src/common/utilscmn.cpp
--- src/common/utilscmn.cpp
+++ src/common/utilscmn.cpp
@@ -895,5 +895,4 @@
     else
     {
-        // MYcopystring - for easier search...
         out = new wxChar[s.length() + 1];
         wxStrcpy(out, s.c_str());
Index: src/msw/utilsgui.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/utilsgui.cpp,v
retrieving revision 1.16
diff -bu2 -r1.16 src/msw/utilsgui.cpp
--- src/msw/utilsgui.cpp
+++ src/msw/utilsgui.cpp
@@ -127,6 +127,4 @@
     s[len]=0;
 
-    // wxChar *s = copystring(theText);
-
     // Obsolete in WIN32
 #ifndef __WIN32__
Index: src/common/cmdline.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/cmdline.cpp,v
retrieving revision 1.49
diff -bu2 -r1.49 src/common/cmdline.cpp
--- src/common/cmdline.cpp
+++ src/common/cmdline.cpp
@@ -527,5 +527,5 @@
 void wxCmdLineParser::Reset()
 {
-    for ( size_t i = 0; i < m_data->m_options.Count(); i++ )
+    for ( size_t i = 0; i < m_data->m_options.GetCount(); i++ )
     {
         wxCmdLineOption& opt = m_data->m_options[i];
Index: src/common/fileconf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/fileconf.cpp,v
retrieving revision 1.170
diff -bu2 -r1.170 src/common/fileconf.cpp
--- src/common/fileconf.cpp
+++ src/common/fileconf.cpp
@@ -6,5 +6,5 @@
 // Created:     07.04.98 (adapted from appconf.cpp)
 // RCS-ID:      $Id: fileconf.cpp,v 1.170 2007/03/18 21:08:17 VZ Exp $
-// Copyright:   (c) 1997 Karsten Ballder   &  Vadim Zeitlin
+// Copyright:   (c) 1997 Karsten Ballder   &  Vadim Zeitlin
 //                       Ballueder@usa.net     <zeitlin@dptmaths.ens-cachan.fr>
 // Licence:     wxWindows licence
@@ -729,5 +729,5 @@
     size_t n;
     m_pCurrentGroup = m_pRootGroup;
-    for ( n = 0; n < aParts.Count(); n++ ) {
+    for ( n = 0; n < aParts.GetCount(); n++ ) {
         wxFileConfigGroup *pNextGroup = m_pCurrentGroup->FindSubgroup(aParts[n]);
         if ( pNextGroup == NULL )
@@ -744,5 +744,5 @@
     // recombine path parts in one variable
     m_strPath.Empty();
-    for ( n = 0; n < aParts.Count(); n++ ) {
+    for ( n = 0; n < aParts.GetCount(); n++ ) {
         m_strPath << wxCONFIG_PATH_SEPARATOR << aParts[n];
     }
@@ -768,5 +768,5 @@
 bool wxFileConfig::GetNextGroup (wxString& str, long& lIndex) const
 {
-    if ( size_t(lIndex) < m_pCurrentGroup->Groups().Count() ) {
+    if ( size_t(lIndex) < m_pCurrentGroup->Groups().GetCount() ) {
         str = m_pCurrentGroup->Groups()[(size_t)lIndex++]->Name();
         return true;
@@ -784,5 +784,5 @@
 bool wxFileConfig::GetNextEntry (wxString& str, long& lIndex) const
 {
-    if ( size_t(lIndex) < m_pCurrentGroup->Entries().Count() ) {
+    if ( size_t(lIndex) < m_pCurrentGroup->Entries().GetCount() ) {
         str = m_pCurrentGroup->Entries()[(size_t)lIndex++]->Name();
         return true;
@@ -794,8 +794,8 @@
 size_t wxFileConfig::GetNumberOfEntries(bool bRecursive) const
 {
-    size_t n = m_pCurrentGroup->Entries().Count();
+    size_t n = m_pCurrentGroup->Entries().GetCount();
     if ( bRecursive ) {
         wxFileConfigGroup *pOldCurrentGroup = m_pCurrentGroup;
-        size_t nSubgroups = m_pCurrentGroup->Groups().Count();
+        size_t nSubgroups = m_pCurrentGroup->Groups().GetCount();
         for ( size_t nGroup = 0; nGroup < nSubgroups; nGroup++ ) {
             CONST_CAST m_pCurrentGroup = m_pCurrentGroup->Groups()[nGroup];
@@ -810,8 +810,8 @@
 size_t wxFileConfig::GetNumberOfGroups(bool bRecursive) const
 {
-    size_t n = m_pCurrentGroup->Groups().Count();
+    size_t n = m_pCurrentGroup->Groups().GetCount();
     if ( bRecursive ) {
         wxFileConfigGroup *pOldCurrentGroup = m_pCurrentGroup;
-        size_t nSubgroups = m_pCurrentGroup->Groups().Count();
+        size_t nSubgroups = m_pCurrentGroup->Groups().GetCount();
         for ( size_t nGroup = 0; nGroup < nSubgroups; nGroup++ ) {
             CONST_CAST m_pCurrentGroup = m_pCurrentGroup->Groups()[nGroup];
@@ -1340,10 +1340,10 @@
 {
   // entries
-  size_t n, nCount = m_aEntries.Count();
+  size_t n, nCount = m_aEntries.GetCount();
   for ( n = 0; n < nCount; n++ )
     delete m_aEntries[n];

   // subgroups
-  nCount = m_aSubgroups.Count();
+  nCount = m_aSubgroups.GetCount();
   for ( n = 0; n < nCount; n++ )
     delete m_aSubgroups[n];
@@ -1508,5 +1508,5 @@

     // also update all subgroups as they have this groups name in their lines
-    const size_t nCount = m_aSubgroups.Count();
+    const size_t nCount = m_aSubgroups.GetCount();
     for ( size_t n = 0; n < nCount; n++ )
     {
@@ -1553,5 +1553,5 @@
   size_t i,
        lo = 0,
-       hi = m_aEntries.Count();
+       hi = m_aEntries.GetCount();
   int res;
   wxFileConfigEntry *pEntry;
@@ -1583,5 +1583,5 @@
   size_t i,
        lo = 0,
-       hi = m_aSubgroups.Count();
+       hi = m_aSubgroups.GetCount();
   int res;
   wxFileConfigGroup *pGroup;
@@ -1674,5 +1674,5 @@

     // delete all entries...
-    size_t nCount = pGroup->m_aEntries.Count();
+    size_t nCount = pGroup->m_aEntries.GetCount();

     wxLogTrace(FILECONF_TRACE_MASK,
@@ -1693,5 +1693,5 @@

     // ...and subgroups of this subgroup
-    nCount = pGroup->m_aSubgroups.Count();
+    nCount = pGroup->m_aSubgroups.GetCount();

     wxLogTrace( FILECONF_TRACE_MASK,
@@ -1727,5 +1727,5 @@
             // stays by going back until we find a subgroup or reach the
             // group line
-            const size_t nSubgroups = m_aSubgroups.Count();
+            const size_t nSubgroups = m_aSubgroups.GetCount();

             m_pLastGroup = NULL;
@@ -1782,5 +1782,5 @@
       // go back until we find another entry or reach the group's line
       wxFileConfigEntry *pNewLast = NULL;
-      size_t n, nEntries = m_aEntries.Count();
+      size_t n, nEntries = m_aEntries.GetCount();
       wxFileConfigLineList *pl;
       for ( pl = pLine->Prev(); pl != m_pLine; pl = pl->Prev() ) {
Index: src/common/textbuf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/textbuf.cpp,v
retrieving revision 1.17
diff -bu2 -r1.17 src/common/textbuf.cpp
--- src/common/textbuf.cpp
+++ src/common/textbuf.cpp
@@ -219,5 +219,5 @@
     // we take MAX_LINES_SCAN in the beginning, middle and the end of buffer
     #define MAX_LINES_SCAN    (10)
-    size_t nCount = m_aLines.Count() / 3,
+    size_t nCount = m_aLines.GetCount() / 3,
         nScan =  nCount > 3*MAX_LINES_SCAN ? MAX_LINES_SCAN : nCount / 3;

Index: src/common/bookctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/bookctrl.cpp,v
retrieving revision 1.35
diff -bu2 -r1.35 src/common/bookctrl.cpp
--- src/common/bookctrl.cpp
+++ src/common/bookctrl.cpp
@@ -259,5 +259,5 @@
     // resize all pages to fit the new control size
     const wxRect pageRect = GetPageRect();
-    const unsigned pagesCount = m_pages.Count();
+    const unsigned pagesCount = m_pages.GetCount();
     for ( unsigned int i = 0; i < pagesCount; ++i )
     {
Index: src/common/ftp.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/ftp.cpp,v
retrieving revision 1.66
diff -bu2 -r1.66 src/common/ftp.cpp
--- src/common/ftp.cpp
+++ src/common/ftp.cpp
@@ -952,5 +952,5 @@

                     size_t i;
-                    for ( i = 0; !foundIt && i < fileList.Count(); i++ )
+                    for ( i = 0; !foundIt && i < fileList.GetCount(); i++ )
                     {
                         foundIt = fileList[i].Upper().Contains(fileName.Upper());
cvsdo: WARNING: Using src/generic/.#dirctrlg.cpp.1_165 for src/generic/dirctrlg.cpp
Index: src/generic/dirctrlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/dirctrlg.cpp,v
retrieving revision 1.165
diff -bu2 -r1.165 src/generic/dirctrlg.cpp
--- src/generic/dirctrlg.cpp
+++ src/generic/dirctrlg.cpp
@@ -884,5 +884,5 @@
     // Add the sorted dirs
     size_t i;
-    for (i = 0; i < dirs.Count(); i++)
+    for (i = 0; i < dirs.GetCount(); i++)
     {
         eachFilename = dirs[i];
@@ -913,5 +913,5 @@
     if ((GetWindowStyle() & wxDIRCTRL_DIR_ONLY) == 0)
     {
-        for (i = 0; i < filenames.Count(); i++)
+        for (i = 0; i < filenames.GetCount(); i++)
         {
             eachFilename = filenames[i];
Index: src/generic/logg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/logg.cpp,v
retrieving revision 1.102
diff -bu2 -r1.102 src/generic/logg.cpp
--- src/generic/logg.cpp
+++ src/generic/logg.cpp
@@ -291,5 +291,5 @@
     title.Printf(titleFormat, appName.c_str());

-    size_t nMsgCount = m_aMessages.Count();
+    size_t nMsgCount = m_aMessages.GetCount();

     // avoid showing other log dialogs until we're done with the dialog we're
Index: src/generic/treectlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/treectlg.cpp,v
retrieving revision 1.224
diff -bu2 -r1.224 src/generic/treectlg.cpp
--- src/generic/treectlg.cpp
+++ src/generic/treectlg.cpp
@@ -549,5 +549,5 @@
 void wxGenericTreeItem::DeleteChildren(wxGenericTreeCtrl *tree)
 {
-    size_t count = m_children.Count();
+    size_t count = m_children.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
@@ -571,5 +571,5 @@
 size_t wxGenericTreeItem::GetChildrenCount(bool recursively) const
 {
-    size_t count = m_children.Count();
+    size_t count = m_children.GetCount();
     if ( !recursively )
         return count;
@@ -594,5 +594,5 @@
     if (IsExpanded())
     {
-        size_t count = m_children.Count();
+        size_t count = m_children.GetCount();
         for ( size_t n = 0; n < count; ++n )
         {
@@ -669,5 +669,5 @@

     // evaluate children
-    size_t count = m_children.Count();
+    size_t count = m_children.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
@@ -1204,5 +1204,5 @@
     // overflow "void *"
     size_t *pIndex = (size_t *)&cookie;
-    if ( *pIndex < children.Count() )
+    if ( *pIndex < children.GetCount() )
     {
         return children.Item((*pIndex)++);
@@ -1240,5 +1240,5 @@

     size_t n = (size_t)(index + 1);
-    return n == siblings.Count() ? wxTreeItemId() : wxTreeItemId(siblings[n]);
+    return n == siblings.GetCount() ? wxTreeItemId() : wxTreeItemId(siblings[n]);
 }

@@ -1637,5 +1637,5 @@
 #if 0  // TODO why should items be collapsed recursively?
     wxArrayGenericTreeItems& children = item->GetChildren();
-    size_t count = children.Count();
+    size_t count = children.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
@@ -1691,5 +1691,5 @@
     {
         wxArrayGenericTreeItems& children = item->GetChildren();
-        size_t count = children.Count();
+        size_t count = children.GetCount();
         for ( size_t n = 0; n < count; ++n )
         {
@@ -1727,5 +1727,5 @@
     wxASSERT( index != wxNOT_FOUND ); // I'm not a child of my parent?

-    size_t count = children.Count();
+    size_t count = children.GetCount();
     for (size_t n=(size_t)(index+1); n<count; ++n)
     {
@@ -1747,5 +1747,5 @@
     {
         wxArrayGenericTreeItems& children = crt_item->GetChildren();
-        size_t count = children.Count();
+        size_t count = children.GetCount();
         for ( size_t n = 0; n < count; ++n )
         {
@@ -1909,5 +1909,5 @@
     //else: the tree is empty, so no selections

-    return array.Count();
+    return array.GetCount();
 }

@@ -2020,5 +2020,5 @@

     wxArrayGenericTreeItems& children = item->GetChildren();
-    if ( children.Count() > 1 )
+    if ( children.GetCount() > 1 )
     {
         m_dirty = true;
@@ -2301,5 +2301,5 @@
         int origY = y;
         wxArrayGenericTreeItems& children = item->GetChildren();
-        int count = children.Count();
+        int count = children.GetCount();
         if (count > 0)
         {
@@ -2449,5 +2449,5 @@
     {
         wxArrayGenericTreeItems& children = item->GetChildren();
-        int count = children.Count();
+        int count = children.GetCount();
         if (count > 0)
         {
@@ -3439,5 +3439,5 @@
   Recurse:
     wxArrayGenericTreeItems& children = item->GetChildren();
-    size_t n, count = children.Count();
+    size_t n, count = children.GetCount();
     ++level;
     for (n = 0; n < count; ++n )
cvsdo: WARNING: Using src/unix/.#mimetype.cpp.1_88 for src/unix/mimetype.cpp
Index: src/unix/mimetype.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/mimetype.cpp,v
retrieving revision 1.88
diff -bu2 -r1.88 src/unix/mimetype.cpp
--- src/unix/mimetype.cpp
+++ src/unix/mimetype.cpp
@@ -1084,5 +1084,5 @@
     wxArrayString output;
     if(wxExecute(wxT("kde-config --path ")+request, output) == 0 &&
-       output.Count() > 0)
+       output.GetCount() > 0)
         str = output.Item(0);
     return str;
@@ -1112,5 +1112,5 @@
 {
     wxString theme;
-    for(size_t i = 0; i < basedirs.Count(); i++) {
+    for(size_t i = 0; i < basedirs.GetCount(); i++) {
         wxFileName filename(basedirs.Item(i), wxEmptyString);
         filename.AppendDir( wxT("share") );
@@ -1123,5 +1123,5 @@
     // If $KDEDIRS and $KDEDIR were set, we try nothing more. Otherwise, we
     // try to get the configuration file with 'kde-config'.
-    if(basedirs.Count() > 1)
+    if(basedirs.GetCount() > 1)
         return theme;
     wxString paths = ReadPathFromKDEConfig(wxT("config"));
@@ -1146,5 +1146,5 @@
         theme = wxT("default.kde");

-    for(size_t i = 0; i < basedirs.Count(); i++) {
+    for(size_t i = 0; i < basedirs.GetCount(); i++) {
         wxFileName dirname(basedirs.Item(i), wxEmptyString);
         dirname.AppendDir( wxT("share") );
@@ -1158,5 +1158,5 @@

     // If $KDEDIRS and $KDEDIR were not set, use 'kde-config'
-    if(basedirs.Count() > 1)
+    if(basedirs.GetCount() > 1)
         return;
     wxString paths = ReadPathFromKDEConfig(wxT("icon"));
@@ -1179,5 +1179,5 @@
                            wxArrayString& mimedirs)
 {
-    for(size_t i = 0; i < basedirs.Count(); i++) {
+    for(size_t i = 0; i < basedirs.GetCount(); i++) {
         wxFileName dirname(basedirs.Item(i), wxEmptyString);
         dirname.AppendDir( wxT("share") );
@@ -1188,5 +1188,5 @@

     // If $KDEDIRS and $KDEDIR were not set, use 'kde-config'
-    if(basedirs.Count() > 1)
+    if(basedirs.GetCount() > 1)
         return;
     wxString paths = ReadPathFromKDEConfig(wxT("mime"));
@@ -1207,5 +1207,5 @@
                            wxArrayString& appsdirs)
 {
-    for(size_t i = 0; i < basedirs.Count(); i++) {
+    for(size_t i = 0; i < basedirs.GetCount(); i++) {
         wxFileName dirname(basedirs.Item(i), wxEmptyString);
         dirname.AppendDir( wxT("share") );
@@ -1216,5 +1216,5 @@

     // If $KDEDIRS and $KDEDIR were not set, use 'kde-config'
-    if(basedirs.Count() > 1)
+    if(basedirs.GetCount() > 1)
         return;
     wxString paths = ReadPathFromKDEConfig(wxT("apps"));
@@ -2102,8 +2102,8 @@

     // check data integrity
-    wxASSERT( m_aTypes.Count() == m_aEntries.Count() &&
-              m_aTypes.Count() == m_aExtensions.Count() &&
-              m_aTypes.Count() == m_aIcons.Count() &&
-              m_aTypes.Count() == m_aDescriptions.Count() );
+    wxASSERT( m_aTypes.GetCount() == m_aEntries.GetCount() &&
+              m_aTypes.GetCount() == m_aExtensions.GetCount() &&
+              m_aTypes.GetCount() == m_aIcons.GetCount() &&
+              m_aTypes.GetCount() == m_aDescriptions.GetCount() );

     return nIndex;
@@ -2163,5 +2163,5 @@
     wxString strCategory = mimetype.BeforeFirst(wxT('/'));

-    size_t nCount = m_aTypes.Count();
+    size_t nCount = m_aTypes.GetCount();
     for ( size_t n = 0; n < nCount; n++ )
     {
@@ -2872,8 +2872,8 @@
     }
     // check data integrity
-    wxASSERT( m_aTypes.Count() == m_aEntries.Count() &&
-            m_aTypes.Count() == m_aExtensions.Count() &&
-            m_aTypes.Count() == m_aIcons.Count() &&
-            m_aTypes.Count() == m_aDescriptions.Count() );
+    wxASSERT( m_aTypes.GetCount() == m_aEntries.GetCount() &&
+            m_aTypes.GetCount() == m_aExtensions.GetCount() &&
+            m_aTypes.GetCount() == m_aIcons.GetCount() &&
+            m_aTypes.GetCount() == m_aDescriptions.GetCount() );

     return true;
Index: include/wx/treebook.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/treebook.h,v
retrieving revision 1.10
diff -bu2 -r1.10 include/wx/treebook.h
--- include/wx/treebook.h
+++ include/wx/treebook.h
@@ -222,5 +222,5 @@
     // Returns internal number of pages which can be different from
     // GetPageCount() while performing a page insertion or removal.
-    size_t DoInternalGetPageCount() const { return m_treeIds.Count(); }
+    size_t DoInternalGetPageCount() const { return m_treeIds.GetCount(); }


cvsdo: WARNING: Using src/generic/.#grid.cpp.1_421 for src/generic/grid.cpp
Index: src/generic/grid.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/grid.cpp,v
retrieving revision 1.421
diff -bu2 -r1.421 src/generic/grid.cpp
--- src/generic/grid.cpp
+++ src/generic/grid.cpp
@@ -2718,5 +2718,5 @@
 wxGridRowOrColAttrData::~wxGridRowOrColAttrData()
 {
-    size_t count = m_attrs.Count();
+    size_t count = m_attrs.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
@@ -2959,5 +2959,5 @@
 wxGridTypeRegistry::~wxGridTypeRegistry()
 {
-    size_t count = m_typeinfo.Count();
+    size_t count = m_typeinfo.GetCount();
     for ( size_t i = 0; i < count; i++ )
         delete m_typeinfo[i];
cvsdo: WARNING: Using src/html/.#htmprint.cpp.1_63 for src/html/htmprint.cpp
Index: src/html/htmprint.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/htmprint.cpp,v
retrieving revision 1.63
diff -bu2 -r1.63 src/html/htmprint.cpp
--- src/html/htmprint.cpp
+++ src/html/htmprint.cpp
@@ -265,10 +265,10 @@
 {
     *minPage = 1;
-    if ( m_NumPages >= (signed)m_PageBreaks.Count()-1)
+    if ( m_NumPages >= (signed)m_PageBreaks.GetCount()-1)
         *maxPage = m_NumPages;
     else
-        *maxPage = (signed)m_PageBreaks.Count()-1;
+        *maxPage = (signed)m_PageBreaks.GetCount()-1;
     *selPageFrom = 1;
-    *selPageTo = (signed)m_PageBreaks.Count()-1;
+    *selPageTo = (signed)m_PageBreaks.GetCount()-1;
 }

@@ -277,5 +277,5 @@
 bool wxHtmlPrintout::HasPage(int pageNum)
 {
-    return pageNum > 0 && (unsigned)pageNum < m_PageBreaks.Count();
+    return pageNum > 0 && (unsigned)pageNum < m_PageBreaks.GetCount();
 }

@@ -375,5 +375,5 @@
                                  pos, true, INT_MAX);
         m_PageBreaks.Add( pos);
-        if( m_PageBreaks.Count() > wxHTML_PRINT_MAX_PAGES)
+        if( m_PageBreaks.GetCount() > wxHTML_PRINT_MAX_PAGES)
         {
             wxMessageBox( _("HTML pagination algorithm generated more than the allowed maximum number of pages and it can't continue any longer!"),
@@ -441,5 +441,5 @@
     r.Replace(wxT("@PAGENUM@"), num);

-    num.Printf(wxT("%lu"), (unsigned long)(m_PageBreaks.Count() - 1));
+    num.Printf(wxT("%lu"), (unsigned long)(m_PageBreaks.GetCount() - 1));
     r.Replace(wxT("@PAGESCNT@"), num);

Index: src/html/m_layout.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/m_layout.cpp,v
retrieving revision 1.47
diff -bu2 -r1.47 src/html/m_layout.cpp
--- src/html/m_layout.cpp
+++ src/html/m_layout.cpp
@@ -101,5 +101,5 @@
     // the current cell, which is incorrect, or duplicating a
     // pagebreak that has already been set.
-    if( known_pagebreaks.Count() == 0 || *pagebreak <= m_PosY)
+    if( known_pagebreaks.GetCount() == 0 || *pagebreak <= m_PosY)
     {
         return false;
Index: src/xrc/xh_treebk.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xrc/xh_treebk.cpp,v
retrieving revision 1.5
diff -bu2 -r1.5 src/xrc/xh_treebk.cpp
--- src/xrc/xh_treebk.cpp
+++ src/xrc/xh_treebk.cpp
@@ -101,5 +101,5 @@
     size_t depth = GetLong( wxT("depth") );

-    if( depth <= m_treeContext.Count() )
+    if( depth <= m_treeContext.GetCount() )
     {
         // first prepare the icon
@@ -118,6 +118,6 @@

         // then add the page to the corresponding parent
-        if( depth < m_treeContext.Count() )
-            m_treeContext.RemoveAt(depth, m_treeContext.Count() - depth );
+        if( depth < m_treeContext.GetCount() )
+            m_treeContext.RemoveAt(depth, m_treeContext.GetCount() - depth );
         if( depth == 0)
         {
Index: utils/wxrc/wxrc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/utils/wxrc/wxrc.cpp,v
retrieving revision 1.52
diff -bu2 -r1.52 utils/wxrc/wxrc.cpp
--- utils/wxrc/wxrc.cpp
+++ utils/wxrc/wxrc.cpp
@@ -132,5 +132,5 @@
                    + _T(" {\nprotected:\n"));
         size_t i;
-        for(i=0;i<m_wdata.Count();++i)
+        for(i=0;i<m_wdata.GetCount();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
@@ -147,5 +147,5 @@
                    +  m_parentClassName
                    +  _T("\"));\n"));
-        for(i=0;i<m_wdata.Count();++i)
+        for(i=0;i<m_wdata.GetCount();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
@@ -383,5 +383,5 @@
     wxArrayString flist;

-    for (size_t i = 0; i < parFiles.Count(); i++)
+    for (size_t i = 0; i < parFiles.GetCount(); i++)
     {
         if (flagVerbose)
@@ -511,5 +511,5 @@
 void XmlResApp::DeleteTempFiles(const wxArrayString& flist)
 {
-    for (size_t i = 0; i < flist.Count(); i++)
+    for (size_t i = 0; i < flist.GetCount(); i++)
         wxRemoveFile(parOutputPath + wxFILE_SEP_PATH + flist[i]);
 }
@@ -521,5 +521,5 @@
     wxString files;

-    for (size_t i = 0; i < flist.Count(); i++)
+    for (size_t i = 0; i < flist.GetCount(); i++)
         files += flist[i] + _T(" ");
     files.RemoveLast();
@@ -612,5 +612,5 @@
 _T("\n"));

-    for (i = 0; i < flist.Count(); i++)
+    for (i = 0; i < flist.GetCount(); i++)
         file.Write(
               FileToCppArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
@@ -631,5 +631,5 @@
 _T("\n"));

-    for (i = 0; i < flist.Count(); i++)
+    for (i = 0; i < flist.GetCount(); i++)
     {
         wxString s;
@@ -639,5 +639,5 @@
     }

-    for (i = 0; i < parFiles.Count(); i++)
+    for (i = 0; i < parFiles.GetCount(); i++)
     {
         file.Write(_T("    wxXmlResource::Get()->Load(wxT(\"memory:XRC_resource/") +
@@ -663,5 +663,5 @@
 _T("#define __")  + fileSpec + _T("_h__\n")
 );
-    for(size_t i=0;i<aXRCWndClassData.Count();++i){
+    for(size_t i=0;i<aXRCWndClassData.GetCount();++i){
                 aXRCWndClassData.Item(i).GenerateHeaderCode(file);
     }
@@ -740,5 +740,5 @@
     file.Write(_T("def ") + parFuncname + _T("():\n"));

-    for (i = 0; i < flist.Count(); i++)
+    for (i = 0; i < flist.GetCount(); i++)
         file.Write(
           FileToPythonArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
@@ -759,5 +759,5 @@


-    for (i = 0; i < flist.Count(); i++)
+    for (i = 0; i < flist.GetCount(); i++)
     {
         wxString s;
@@ -766,5 +766,5 @@
         file.Write(s);
     }
-    for (i = 0; i < parFiles.Count(); i++)
+    for (i = 0; i < parFiles.GetCount(); i++)
     {
         file.Write(_T("    wx.xrc.XmlResource.Get().Load('memory:XRC_resource/") +
@@ -799,5 +799,5 @@
     wxArrayString arr, a2;

-    for (size_t i = 0; i < parFiles.Count(); i++)
+    for (size_t i = 0; i < parFiles.GetCount(); i++)
     {
         if (flagVerbose)

 	  	 

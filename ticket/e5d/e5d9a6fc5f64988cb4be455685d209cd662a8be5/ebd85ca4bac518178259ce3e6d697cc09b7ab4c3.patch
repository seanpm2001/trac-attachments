Index: tests/strings/vsnprintf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/strings/vsnprintf.cpp,v
retrieving revision 1.14
diff -u -r1.14 vsnprintf.cpp
--- tests/strings/vsnprintf.cpp	2007/01/07 16:58:17	1.14
+++ tests/strings/vsnprintf.cpp	2007/01/24 20:16:23
@@ -25,39 +25,53 @@
 #endif // WX_PRECOMP
 
 
+// NOTE: for more info about the specification of wxVsnprintf() behaviour you can
+//       refer to the following page of the GNU libc manual:
+//             http://www.gnu.org/software/libc/manual/html_node/Formatted-Output.html
 
-#define MAX_TEST_LEN        1024
 
 
+// ----------------------------------------------------------------------------
+// global utilities for testing
+// ----------------------------------------------------------------------------
+
+#define MAX_TEST_LEN        1024
+
 // temporary buffers
 static wxChar buf[MAX_TEST_LEN];
 int r;
 
-// these macros makes it possible to write all tests without repeating a lot of times wxT() macro
+// these macros makes it possible to write all tests without repeating a lot 
+// of times the wxT() macro
+// NOTE: you should use expected strings with these macros which do not exceed 
+//       MAX_TEST_LEN as these macro do check if the return value is == (int)wxStrlen(buf)
 
 #define ASSERT_STR_EQUAL( a, b ) \
     CPPUNIT_ASSERT_EQUAL( wxString(a), wxString(b) );
 
 #define CMP5(expected, x, y, z, w)                    \
     r=wxSnprintf(buf, MAX_TEST_LEN, wxT(x), y, z, w); \
-    CPPUNIT_ASSERT( r > 0 );                          \
+    CPPUNIT_ASSERT( r == (int)wxStrlen(buf) );        \
     ASSERT_STR_EQUAL( wxT(expected), buf );
 
 #define CMP4(expected, x, y, z)                     \
     r=wxSnprintf(buf, MAX_TEST_LEN, wxT(x), y, z);  \
-    CPPUNIT_ASSERT( r > 0 );                        \
+    CPPUNIT_ASSERT( r == (int)wxStrlen(buf) );      \
     ASSERT_STR_EQUAL( wxT(expected), buf );
 
 #define CMP3(expected, x, y)                        \
     r=wxSnprintf(buf, MAX_TEST_LEN, wxT(x), y);     \
-    CPPUNIT_ASSERT( r > 0 );                        \
+    CPPUNIT_ASSERT( r == (int)wxStrlen(buf) );      \
     ASSERT_STR_EQUAL( wxT(expected), buf );
 
 #define CMP2(expected, x)                           \
     r=wxSnprintf(buf, MAX_TEST_LEN, wxT(x));        \
-    CPPUNIT_ASSERT( r > 0 );                        \
+    CPPUNIT_ASSERT( r == (int)wxStrlen(buf) );      \
     ASSERT_STR_EQUAL( wxT(expected), buf );
 
+// NOTE: this macro is used also with too-small buffers (see Miscellaneous())
+//       test function, thus the return value can be > size and thus we
+//       cannot check if r == (int)wxStrlen(buf)
 #define CMPTOSIZE(buffer, size, expected, fmt, x, y, z, w)          \
     r=wxSnprintf(buffer, size, wxT(fmt), x, y, z, w);               \
     CPPUNIT_ASSERT( r > 0 );                                        \
@@ -77,6 +91,7 @@
 
 private:
     CPPUNIT_TEST_SUITE( VsnprintfTestCase );
+        CPPUNIT_TEST( C );
         CPPUNIT_TEST( D );
         CPPUNIT_TEST( X );
         CPPUNIT_TEST( O );
@@ -97,6 +112,7 @@
         CPPUNIT_TEST( Miscellaneous );
     CPPUNIT_TEST_SUITE_END();
 
+    void C();
     void D();
     void X();
     void O();
@@ -118,6 +134,12 @@
     void Miscellaneous();
     void Misc(wxChar *buffer, int size);
 
+    // compares the expectedString and the result of wxVsnprintf() char by char
+    // for all its lenght (not only for first expectedLen chars) and also
+    // checks the return value
+    void DoMisc(int expectedLen, const wxString& expectedString,
+                size_t max, const wxChar *format, ...);
+
     DECLARE_NO_COPY_CLASS(VsnprintfTestCase)
 };
 
@@ -131,6 +153,18 @@
 {
 }
 
+void VsnprintfTestCase::C()
+{
+    CMP5("hi!", "%c%c%c", wxT('h'), wxT('i'), wxT('!'));
+
+    // NOTE:
+    // the NULL characters _can_ be passed to %c to e.g. create strings
+    // with embedded NULs (because strings are not always supposed to be
+    // NUL-terminated).
+
+    DoMisc(14, wxT("Hello \0 World!"), 16, wxT("Hello %c World!"), wxT('\0'));
+}
+
 void VsnprintfTestCase::D()
 {
     CMP3("+123456", "%+d", 123456);
@@ -279,6 +313,10 @@
 
     CMP3(ABCDE, "%.5s", wxT(ABCDEFGHI));
 #endif
+
+    // test a string which have the NULL character after "ab";
+    // obviously it should be handled exactly like just as "ab"
+    CMP3("   ab", "%5s", wxT("ab\0cdefghi"));
 }
 
 void VsnprintfTestCase::Asterisk()
@@ -323,18 +361,20 @@
 
 void VsnprintfTestCase::Misc(wxChar *buffer, int size)
 {
-    // NB: remember that wx*printf could be mapped either to system
-    //     implementation or to wx implementation.
-    //     In the first case, when the output buffer is too small, the returned
-    //     value can be the number of characters required for the output buffer
-    //     (conforming to ISO C99; implemented in e.g. GNU libc >= 2.1), or
-    //     just a negative number, usually -1; (this is how e.g. MSVC's
-    //     *printf() behaves). Luckily, in all implementations, when the
-    //     output buffer is too small, it's nonetheless filled up to its max
-    //     size.
+    // Remember that wx*printf could be mapped either to system
+    // implementation or to wx implementation.
+    // In the first case, when the output buffer is too small, the returned
+    // value can be the number of characters required for the output buffer
+    // (conforming to ISO C99; implemented in e.g. GNU libc >= 2.1), or
+    // just a negative number, usually -1; (this is how e.g. MSVC's
+    // *printf() behaves). Luckily, in all implementations, when the
+    // output buffer is too small, it's nonetheless filled up to its max size.
     //
-    //     Note that in the second case (i.e. when we're using our own implementation),
-    //     wxVsnprintf() will always return the number of characters which 
+    // Note that in the second case (i.e. when we're using our own implementation),
+    // wxVsnprintf() will return the number of characters written in the standard
+    // output or 
+    //   -1         if there was an error in the format string
+    //   maxSize+1  if the output buffer is too small
 
     // test without positionals
     CMPTOSIZE(buffer, size, "123 444444444 - test - 555 -0.666",
@@ -396,14 +436,13 @@
     Misc(&buf4, 1);
 }
 
-static void DoMisc(
+void VsnprintfTestCase::DoMisc(
         int expectedLen,
         const wxString& expectedString,
         size_t max,
         const wxChar *format, ...)
 {
-    const size_t BUFSIZE = 16;
-    wxChar buf[BUFSIZE + 1];
+    const size_t BUFSIZE = MAX_TEST_LEN - 1;
     size_t i;
     static int count = 0;
 
Index: src/common/wxchar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/wxchar.cpp,v
retrieving revision 1.137
diff -u -r1.137 wxchar.cpp
--- src/common/wxchar.cpp	2007/01/08 11:17:15	1.137
+++ src/common/wxchar.cpp	2007/01/24 19:19:05
@@ -1198,8 +1197,12 @@
         buf[lenCur] = 0;
         return lenMax+1;     // not enough space in the output buffer !
     }
+
+    // Don't do:
+    //      wxASSERT(lenCur == wxStrlen(buf));
+    // in fact if we embedded NULLs in the output buffer (using %c with a '\0')
+    // such check would fail
 
-    wxASSERT(lenCur == wxStrlen(buf));
     return lenCur;
 }
 
Index: tests/test.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.cpp,v
retrieving revision 1.12
diff -u -r1.12 test.cpp
--- tests/test.cpp	2005/05/01 20:04:47	1.12
+++ tests/test.cpp	2007/01/24 18:57:02
@@ -70,6 +70,14 @@
 {
     cout << "Test program for wxWidgets\n"
          << "build: " << WX_BUILD_OPTIONS_SIGNATURE << std::endl;
+
+#if !wxUSE_WXVSNPRINTF
+    cout << "\n";
+    cout << "WARNING: VsnprintfTestCase will test the system vsnprintf() function\n";
+    cout << "         instead of the wxWidgets wxVsnprintf_ implementation!" << std::endl;
+    cout << "\n";
+#endif
+
     return wxAppConsole::OnInit();
 };
 

 	  	 

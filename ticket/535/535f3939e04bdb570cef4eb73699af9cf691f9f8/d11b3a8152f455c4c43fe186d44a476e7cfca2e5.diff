--- C:/Users/John/AppData/Local/Temp/automtn.cpp-rev62907.svn000.tmp.cpp	Sat Jan  2 11:17:58 2010
+++ C:/wxWidgets-2.9/src/msw/ole/automtn.cpp	Sat Jan  2 10:50:50 2010
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     11/6/98
-// RCS-ID:      $Id: automtn.cpp 61843 2009-09-06 14:31:10Z VZ $
+// RCS-ID:      $Id: automtn.cpp 62908 2009-12-17 10:52:02Z VZ $
 // Copyright:   (c) 1998, Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -139,7 +139,6 @@
     HRESULT hr;
     DISPPARAMS dispparams;
     unsigned int uiArgErr;
-    EXCEPINFO excep;
 
     // Get the IDs for the member and its arguments.  GetIDsOfNames expects the
     // member name as the first name, followed by argument names (if any).
@@ -181,7 +180,8 @@
     dispparams.cArgs = noArgs;
     dispparams.cNamedArgs = namedArgCount;
 
-    excep.pfnDeferredFillIn = NULL;
+    EXCEPINFO excep;
+    wxZeroMemory(excep);
 
     hr = ((IDispatch*)m_dispatchPtr)->Invoke(dispIds[0], IID_NULL, LOCALE_SYSTEM_DEFAULT,
                         (WORD)action, &dispparams, vReturnPtr, &excep, &uiArgErr);
@@ -199,14 +199,16 @@
 
     if (FAILED(hr))
     {
-        // display the exception information if appropriate:
+        if (hr == DISP_E_EXCEPTION) // The application needs to raise an exception. In this case, the structure passed in pExcepInfo should be filled in.
+        {
+          // display the exception information if appropriate:
 //        ShowException((const char*) member, hr, &excep, uiArgErr);
+          // free exception structure information
+            SysFreeString(excep.bstrSource);
+            SysFreeString(excep.bstrDescription);
+            SysFreeString(excep.bstrHelpFile);
+        }
 
-        // free exception structure information
-        SysFreeString(excep.bstrSource);
-        SysFreeString(excep.bstrDescription);
-        SysFreeString(excep.bstrHelpFile);
-
         if (vReturnPtr)
             ReleaseVariant(vReturnPtr);
         return false;
@@ -872,10 +874,10 @@
                 SafeArrayUnaccessData(pvarg->parray);
             }
         }
-        else
-        {
-            wxLogWarning(wxT("ReleaseVariant: Array contains non-variant type"));
-        }
+        //else
+        //{
+          //  wxLogWarning(wxT("ReleaseVariant: Array contains non-variant type"));
+       // }
 
         // Free the array itself.
         SafeArrayDestroy(pvarg->parray);

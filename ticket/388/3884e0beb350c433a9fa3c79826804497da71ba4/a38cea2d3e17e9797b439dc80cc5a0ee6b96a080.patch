? lib/vc_dll
Index: include/wx/protocol/ftp.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/protocol/ftp.h,v
retrieving revision 1.19
diff -u -r1.19 ftp.h
--- include/wx/protocol/ftp.h	2004/05/23 20:51:44	1.19
+++ include/wx/protocol/ftp.h	2004/08/09 20:17:02
@@ -39,8 +39,8 @@
     virtual ~wxFTP();
 
     // Connecting and disconnecting
-    void SetUser(const wxString& user) { m_user = user; }
-    void SetPassword(const wxString& passwd) { m_passwd = passwd; }
+    void  SetUser(const wxString& user) { m_user = user; }
+    void  SetPassword(const wxString& passwd) { m_passwd = passwd; }
 
     bool Connect(wxSockAddress& addr, bool wait = TRUE);
     bool Connect(const wxString& host);
@@ -51,6 +51,8 @@
     // Parameters set up
 
     // set transfer mode now
+    void SetPassive(bool bNewValue) { m_bPassive = bNewValue; };
+    void SetDefaultTimeout(wxUint32 Value);
     bool SetBinary() { return SetTransferMode(BINARY); }
     bool SetAscii() { return SetTransferMode(ASCII); }
     bool SetTransferMode(TransferMode mode);
@@ -116,6 +118,7 @@
     }
 
     // equivalent to either GetFilesList() (default) or GetDirList()
+
     bool GetList(wxArrayString& files,
                  const wxString& wildcard = wxEmptyString,
                  bool details = FALSE);
@@ -133,7 +136,7 @@
     // check that the result is equal to expected value
     bool CheckResult(char ch) { return GetResult() == ch; }
 
-    wxSocketClient *GetPort();
+    wxSocketBase *GetPort();
 
     wxString m_user,
              m_passwd;
@@ -150,6 +153,18 @@
 
     friend class wxInputFTPStream;
     friend class wxOutputFTPStream;
+
+    wxSocketBase    *GetPort_Passive();
+    wxSocketBase    *GetPort_Active();
+    wxString        GetPortCmdArgument(wxIPV4address Local,
+                                       wxIPV4address New);
+    bool            m_bPassive;
+    wxUint32        m_uiDefaultTimeout;
+    // following is true when  a read or write times out, we then assume
+    // the connection is dead and abort. we avoid additional delays this way
+    bool            m_bEncounteredError; // true when something times out
+    wxProtocolError     ReadLine(wxSocketBase *sock, wxString& result);
+
 
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxFTP)
     DECLARE_PROTOCOL(wxFTP)
Index: src/common/ftp.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/ftp.cpp,v
retrieving revision 1.53
diff -u -r1.53 ftp.cpp
--- src/common/ftp.cpp	2004/05/23 20:52:01	1.53
+++ src/common/ftp.cpp	2004/08/09 20:33:28
@@ -90,15 +90,26 @@
 
     SetNotify(0);
     SetFlags(wxSOCKET_NONE);
+    m_bPassive = true;
+    SetDefaultTimeout(60); // Default is Sixty Seconds
+    m_bEncounteredError = false;
 }
 
 wxFTP::~wxFTP()
 {
+    // it might be better to NOT wait for the server response,
+    // because we really don't care, so perhaps just issue the
+    // QUIT and/or ABORT and then exit..  To do this, lets pretend like we 
+    // already had a timeout error:
+    m_bEncounteredError = true;
+
     if ( m_streaming )
     {
+        // if we are streaming, this will issue
+        // an FTP ABORT command, to tell the server we are aborting
         (void)Abort();
     }
-
+    // now this issues a "QUIT" command to tell the server we are
     Close();
 }
 
@@ -228,6 +239,10 @@
 
 char wxFTP::GetResult()
 {
+
+    // if we've already had a read or write timeout error, the connection is
+    // probably toast, so don't bother, it just wastes the users time
+    if (m_bEncounteredError) return 0; 
     wxString code;
 
     // m_lastResult will contain the entire server response, possibly on
@@ -247,9 +262,12 @@
     while ( !endOfReply && !badReply )
     {
         wxString line;
-        m_lastError = ReadLine(line);
+        m_lastError = ReadLine(this,line);
         if ( m_lastError )
+        {
+            m_bEncounteredError = true;
             return 0;
+        }
 
         if ( !m_lastResult.empty() )
         {
@@ -494,36 +512,46 @@
         : wxSocketInputStream(*sock)
     {
         m_ftp = ftp;
-
-        // FIXME make the timeout configurable
-
-        // set a shorter than default timeout
-        m_i_socket->SetTimeout(60); // 1 minute
+        // socket timeout automatically set in GetPort function
     }
 
-    size_t GetSize() const { return m_ftpsize; }
+    size_t GetSize() const {return m_ftpsize;} //whats this for ??
 
     virtual ~wxInputFTPStream()
     {
-        delete m_i_socket;
-
-        if ( IsOk() )
+        delete m_i_socket;   // keep at top 
+       
+        // when checking the result, the stream will
+        // almost always show an error, even if the file was 
+        // properly transfered, thus, lets just grab the result
+
+        // we are looking for "226 transfer completed"
+        char code = m_ftp->GetResult(); 
+        if ('2' == code) 
         {
-            // wait for "226 transfer completed"
-            m_ftp->CheckResult('2');
-
-            m_ftp->m_streaming = FALSE;
+            // it was a good transfer.
+            // we're done!
+             m_ftp->m_streaming = FALSE;
+            return;
         }
-        else
+        // did we timeout?
+        if (0 == code)
         {
+            // the connection is probably toast. issue an abort, and 
+            // then a close. there won't be any more waiting
+            // for this connection
             m_ftp->Abort();
+            m_ftp->Close();
+            return;
         }
-
-        // delete m_i_socket; // moved to top of destructor to accomodate wu-FTPd >= 2.6.0
+        // There was a problem with the transfer and the server
+        // has acknowledged it.  If we issue an "ABORT" now, the user
+        // would get the "226" for the abort and think the xfer was
+        // complete, thus, don't do anything here, just return
     }
 
     wxFTP *m_ftp;
-    size_t m_ftpsize;
+    size_t m_ftpsize; // used, but I have no idea what for
 
     DECLARE_NO_COPY_CLASS(wxInputFTPStream)
 };
@@ -545,7 +573,7 @@
             delete m_o_socket;
 
             // read this reply
-            m_ftp->CheckResult('2');
+            m_ftp->GetResult(); // save result so user can get to it
 
             m_ftp->m_streaming = FALSE;
         }
@@ -564,26 +592,170 @@
     DECLARE_NO_COPY_CLASS(wxOutputFTPStream)
 };
 
-wxSocketClient *wxFTP::GetPort()
+void wxFTP::SetDefaultTimeout(wxUint32 Value)
 {
-    int a[6];
+    m_uiDefaultTimeout = Value;
+    SetTimeout(Value); // sets it for this socket
+}
 
-    if ( !DoSimpleCommand(_T("PASV")) )
-    {
-        wxLogError(_("The FTP server doesn't support passive mode."));
 
+wxSocketBase *wxFTP::GetPort()
+{
+/*
+PASSIVE:    Client sends a "PASV" to the server.  The server responds with an address
+            and port number which it will be listening on. Then the client connects
+            to the server at the specified address and port.
+ACTIVE:     Client sends the server a PORT command which includes an address and port
+            number which the client will be listening on.  The server then connects
+            to the client at that address and port.
+*/
+    wxSocketBase * NewSocket;
+    if (m_bPassive)  NewSocket = GetPort_Passive();
+    else NewSocket = GetPort_Active();
+    //Now set the time for the new socket to the default or user selected timeout period
+    if (NewSocket) NewSocket->SetTimeout(m_uiDefaultTimeout);
+    return NewSocket;                    
+}
+
+wxString wxFTP::GetPortCmdArgument(wxIPV4address Local,
+                                   wxIPV4address New)
+{
+    // Just fills in the return value with the local IP
+    // address of the current socket.  Also it fill in the 
+    // PORT which the client will be listening on
+
+    wxString IpAddress = Local.IPAddress();
+    int NewPort = New.Service();
+    char Buffer[7];
+    // We need to break the PORT number in 8 bit integers
+    int High = NewPort>>8;
+    int Low = NewPort & 0xFF;
+    IpAddress.Replace(".",",");
+    IpAddress.Append(",");
+    _itoa(High,Buffer,10);
+    IpAddress.Append(Buffer);
+    IpAddress.Append(",");
+    _itoa(Low,Buffer,10);
+    IpAddress.Append(Buffer);
+    // Now we have a value like "10,0,0,1,5,23"
+    return IpAddress;
+}
+
+wxSocketBase *wxFTP::GetPort_Active()
+{
+    // we need an address to listen on 
+    wxIPV4address NewAddress, LocalAddress;
+    GetLocal(LocalAddress);
+    NewAddress.AnyAddress();// Needed ?  Not sure, but I will leave it in
+    NewAddress.Service(0);  // this is needed to clear the value and tell the socket to
+                            // pick an open port number.
+    wxSocketServer * NewSocket = new wxSocketServer(NewAddress); 
+    if (!NewSocket->Ok())
+    {
+        // We use Ok() here to see if everything is ok
+        m_lastError = wxPROTO_PROTERR;
+        delete NewSocket;
         return NULL;
     }
+    NewSocket->GetLocal(NewAddress); //gets the new address,, actually it is just the port number
+    // Now we create the argument of the PORT command, we send in both addresses because the
+    // NewAddress has an IP of  "0.0.0.0", so we need the value in LocalAddress
+    wxString Arg = GetPortCmdArgument(LocalAddress, NewAddress);   
+    if (!DoSimpleCommand(_T("PORT "),Arg))
+    {
+        m_lastError = wxPROTO_PROTERR;
+        delete NewSocket;
+        wxLogError(_("The FTP server doesn't support the PORT command."));
+        return NULL;
+    }
+    
+    NewSocket->Notify(FALSE); // Don't send any events
+    return NewSocket;
+}
+
+wxProtocolError wxFTP::ReadLine(wxSocketBase *sock, wxString& result)
+{
+    result.Empty();
+    const int BufferSize = 4095;
+    //wait to see if we can read, use preset timeout value
+    wxString strStorage; // stores the complete line -- fills as we loop
+    wxString strBuffer; // temp storage (emptied each loop)
+    while (sock->WaitForRead())
+    {
+        wxString strBuffer;
+        // Peek at the socket to see if there is a CRLF, and where it is
+        // that way we only read in one line, no more..
+        // the bigger the buffer the better, but it will slightly impact memory
+        
+        sock->Peek(wxStringBuffer(strBuffer,BufferSize+1),BufferSize);
+        int Len = sock->LastCount();
+        if ((0 == Len) && (sock->Error())) return wxPROTO_NETERR;
+        strBuffer.Truncate(Len);
+        // we are looking for \r\n
+        int Loc = strBuffer.Find('\n');
+        // if we dont find it, or is last character
+        if (-1 == Loc)
+        {   
+            // store everything in strStorage
+            int AmountToRead = Len;
+            
+            //if (Loc == Len-1) AmountToRead -=3;
+            sock->Read(wxStringBuffer(strBuffer,AmountToRead+1),AmountToRead);
+            strBuffer.Truncate(AmountToRead);
+            strStorage.Append(strBuffer); // store it until we get a CRLF
+        }
+        else //we did find it
+        {
+            // is there a \r as well?
+            //special case, \r\n possibly in the two diff strings 
+            if (0 == Loc)
+            {   // don't combine these two "if" statements
+                if (strStorage.Last() == '\r')
+                {
+                    // the last char of strStorage is '\r'
+                    // and the first char of strBuffer is '\n'
+                    sock->Read(wxStringBuffer(strBuffer,2),1);
+                    strStorage.Truncate(strStorage.Len()-1);
+                    result = strStorage;
+                    return wxPROTO_NOERR;
+                }
+            }
+            // must be an else, because we don't want to 
+            // do the following unless we are sure that Loc!=0
+            else if ('\r' == strBuffer.GetChar(Loc-1))
+            {
+                // we found a full line, extract it
+                sock->Read(wxStringBuffer(strBuffer,Loc+2),Loc+1);
+                strBuffer.Truncate(Loc-1);
+                strStorage.Append(strBuffer);
+                result = strStorage;
+                return wxPROTO_NOERR;
+            }
+        } //end else
+    } //end while loop
+    // if we timeout, remember it, so we don't wait anymore!
+    m_bEncounteredError = true;
+    return wxPROTO_NETERR;
+}
+
 
-    const wxChar *addrStart = wxStrchr(m_lastResult, _T('('));
+wxSocketBase *wxFTP::GetPort_Passive()
+{
+    int a[6];
+    if (!DoSimpleCommand(_T("PASV")))
+    {
+        wxLogError(_("The FTP server doesn't support passive mode."));
+        return NULL;
+    }
+    const wxChar *addrStart = wxStrchr(m_lastResult, _T('('));  // Searches m_lastResult for 
+                                                                // the first '(' character
     if ( !addrStart )
     {
         m_lastError = wxPROTO_PROTERR;
 
         return NULL;
     }
-
-    const wxChar *addrEnd = wxStrchr(addrStart, _T(')'));
+    const wxChar *addrEnd = wxStrchr(addrStart, _T(')'));// Searches m_lastResult
     if ( !addrEnd )
     {
         m_lastError = wxPROTO_PROTERR;
@@ -593,13 +765,13 @@
 
     wxString straddr(addrStart + 1, addrEnd);
 
-    wxSscanf(straddr, wxT("%d,%d,%d,%d,%d,%d"),
+    wxSscanf(straddr, wxT("%d,%d,%d,%d,%d,%d"), // gets the Port number and address
              &a[2],&a[3],&a[4],&a[5],&a[0],&a[1]);
 
-    wxUint32 hostaddr = (wxUint16)a[2] << 24 |
-                        (wxUint16)a[3] << 16 |
-                        (wxUint16)a[4] << 8 |
-                        a[5];
+    wxUint32 hostaddr = (wxUint16)a[5] << 24 |
+                        (wxUint16)a[4] << 16 |
+                        (wxUint16)a[3] << 8 |
+                        a[2];
     wxUint16 port = (wxUint16)a[0] << 8 | a[1];
 
     wxIPV4address addr;
@@ -638,7 +810,7 @@
     if ( ( m_currentTransfermode == NONE ) && !SetTransferMode(BINARY) )
         return NULL;
 
-    wxSocketClient *sock = GetPort();
+    wxSocketBase *sock = GetPort(); // chg'ed from wxSocketClient to wxSocketBase
 
     if ( !sock )
     {
@@ -650,6 +822,21 @@
     if ( !CheckCommand(tmp_str, '1') )
         return NULL;
 
+    if (!m_bPassive)
+    { 
+        // Now wait for a connection, aborts when the default timeout is up
+        if (!((wxSocketServer*)sock)->WaitForAccept())  
+        {
+            m_lastError = wxPROTO_CONNERR;
+            wxLogDebug("Client timeout while waiting for FTP server to connect");
+            delete sock;
+            return NULL;
+        }
+        wxSocketServer * temp = (wxSocketServer *)sock;
+        sock = temp->Accept(TRUE);
+        delete temp;
+    }    
+
     m_streaming = TRUE;
 
     in_stream = new wxInputFTPStream(this, sock);
@@ -672,12 +859,28 @@
     if ( ( m_currentTransfermode == NONE ) && !SetTransferMode(BINARY) )
         return NULL;
 
-    wxSocketClient *sock = GetPort();
+    wxSocketBase *sock = GetPort(); // chg'ed from wxSocketClient to wxSocketBase
 
     wxString tmp_str = wxT("STOR ") + path;
     if ( !CheckCommand(tmp_str, '1') )
         return NULL;
+        
+    if (!m_bPassive)
+    {   // we need to wait for the connection to accept
+        // Now wait for a connection, aborts when the default timeout is up
+        if (!((wxSocketServer*)sock)->WaitForAccept())  
+        {
+            m_lastError = wxPROTO_CONNERR;
+            wxLogDebug("Client timeout while waiting for FTP server to connect");
+            delete sock;
+            return NULL;
+        }
+        wxSocketServer * temp = (wxSocketServer *)sock;
+        sock = temp->Accept(TRUE);
+        delete temp;
+    }    
 
+
     m_streaming = TRUE;
 
     return new wxOutputFTPStream(this, sock);
@@ -708,19 +911,38 @@
 
     if (!CheckCommand(line, '1'))
     {
+        m_lastError = wxPROTO_PROTERR;
+        wxLogDebug("FTP 'LIST' command returned unexpected result from server");
+        delete sock;
         return FALSE;
     }
+    if (!m_bPassive)
+    { // we need to wait for the connection to accept
+        // Now wait for a connection, aborts when the default timeout is up
+        if (!((wxSocketServer*)sock)->WaitForAccept())  
+        {
+            m_lastError = wxPROTO_CONNERR;
+            wxLogDebug("Client timeout while waiting for FTP server to connect");
+            delete sock;
+            return NULL;
+        }
+        wxSocketServer * temp = (wxSocketServer *)sock;
+        sock = temp->Accept(TRUE);
+        delete temp;
+    }    
     files.Empty();
-    while ( ReadLine(sock, line) == wxPROTO_NOERR )
+   while (ReadLine(sock, line) == wxPROTO_NOERR )
     {
         files.Add(line);
-    }
+    }  
     delete sock;
-
+    // when we delete the socket, for some reason, it caused problems with 
+    // the CheckResult below.  wxYield was added early on, and seemed to fix
+    // the problem, I'm not sure if it is still needed with all the changes,
+    // but better to be safe than sorry.
+    wxYield();
     // the file list should be terminated by "226 Transfer complete""
-    if ( !CheckResult('2') )
-        return FALSE;
-
+    if ( !CheckResult('2') )   return FALSE;
     return TRUE;
 }
 

 	  	 

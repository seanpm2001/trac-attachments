1,57c1,8
< /////////////////////////////////////////////////////////////////////////////
< // Name:        minimal.cpp
< // Purpose:     Minimal wxWidgets sample
< // Author:      Julian Smart
< // Modified by:
< // Created:     04/01/98
< // RCS-ID:      $Id: minimal.cpp 62503 2009-10-27 16:44:12Z VZ $
< // Copyright:   (c) Julian Smart
< // Licence:     wxWindows licence
< /////////////////////////////////////////////////////////////////////////////
< 
< // ============================================================================
< // declarations
< // ============================================================================
< 
< // ----------------------------------------------------------------------------
< // headers
< // ----------------------------------------------------------------------------
<  
< // For compilers that support precompilation, includes "wx/wx.h".
< #include "wx/wxprec.h"
<  
< #ifdef __BORLANDC__
<     #pragma hdrstop
< #endif
< 
< // for all others, include the necessary headers (this file is usually all you
< // need because it includes almost all "standard" wxWidgets headers)
< #ifndef WX_PRECOMP
<     #include "wx/wx.h"
< #endif
< 
< // ----------------------------------------------------------------------------
< // resources
< // ----------------------------------------------------------------------------
< 
< // the application icon (under Windows and OS/2 it is in resources and even
< // though we could still include the XPM here it would be unused)
< #if !defined(__WXMSW__) && !defined(__WXPM__)
<     #include "../sample.xpm"
< #endif
< 
< // ----------------------------------------------------------------------------
< // private classes
< // ----------------------------------------------------------------------------
< 
< // Define a new application type, each program should derive a class from wxApp
< class MyApp : public wxApp
< {
< public:
<     // override base class virtuals
<     // ----------------------------
< 
<     // this one is called on application startup and is a good place for the app
<     // initialization (doing it here and not in the ctor allows to have an error
<     // return: if OnInit() returns false, the application terminates)
<     virtual bool OnInit();
---
> 
> #include <wx/wx.h>
> 
> 
> class MainApp: public wxApp
> {
>     public:
>         virtual bool OnInit();
60,61c11,12
< // Define a new frame type: this is going to be our main frame
< class MyFrame : public wxFrame
---
> 
> class MainFrame: public wxFrame
63,73c14,15
< public:
<     // ctor(s)
<     MyFrame(const wxString& title);
< 
<     // event handlers (these functions should _not_ be virtual)
<     void OnQuit(wxCommandEvent& event);
<     void OnAbout(wxCommandEvent& event);
< 
< private:
<     // any class wishing to process wxWidgets events must use this macro
<     DECLARE_EVENT_TABLE()
---
>     public:
>         MainFrame();
76,89c18,27
< // ----------------------------------------------------------------------------
< // constants
< // ----------------------------------------------------------------------------
< 
< // IDs for the controls and the menu commands
< enum
< {
<     // menu items
<     Minimal_Quit = wxID_EXIT,
< 
<     // it is important for the id corresponding to the "About" command to have
<     // this standard value as otherwise it won't be handled properly under Mac
<     // (where it is special and put into the "Apple" menu)
<     Minimal_About = wxID_ABOUT
---
> 
> class myScrolled: public wxScrolled<wxPanel>
> {
>     public:
>         myScrolled( wxWindow* parent );
> 
>     private:
>         void OnPaint( wxPaintEvent& );
>         void DrawWindowContent();
>         void DrawScrollBarCorner();
92,125d29
< // ----------------------------------------------------------------------------
< // event tables and other macros for wxWidgets
< // ----------------------------------------------------------------------------
< 
< // the event tables connect the wxWidgets events with the functions (event
< // handlers) which process them. It can be also done at run-time, but for the
< // simple menu events like this the static method is much simpler.
< BEGIN_EVENT_TABLE(MyFrame, wxFrame)
<     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
<     EVT_MENU(Minimal_About, MyFrame::OnAbout)
< END_EVENT_TABLE()
< 
< // Create a new application object: this macro will allow wxWidgets to create
< // the application object during program execution (it's better than using a
< // static object for many reasons) and also implements the accessor function
< // wxGetApp() which will return the reference of the right type (i.e. MyApp and
< // not wxApp)
< IMPLEMENT_APP(MyApp)
< 
< // ============================================================================
< // implementation
< // ============================================================================
< 
< // ----------------------------------------------------------------------------
< // the application class
< // ----------------------------------------------------------------------------
< 
< // 'Main program' equivalent: the program execution "starts" here
< bool MyApp::OnInit()
< {
<     // call the base class initialization method, currently it only parses a
<     // few common command-line options but it could be do more in the future
<     if ( !wxApp::OnInit() )
<         return false;
127,128c31
<     // create the main application window
<     MyFrame *frame = new MyFrame("Minimal wxWidgets App");
---
> IMPLEMENT_APP(MainApp)
130,132d32
<     // and show it (the frames, unlike simple controls, are not shown when
<     // created initially)
<     frame->Show(true);
134,136c34,38
<     // success: wxApp::OnRun() will be called which will enter the main message
<     // loop and the application will run. If we returned false here, the
<     // application would exit immediately.
---
> bool MainApp::OnInit()
> {
>     wxFrame* frame = new MainFrame();
>     frame->Show(true);
>     SetTopWindow(frame);
140,174c42,76
< // ----------------------------------------------------------------------------
< // main frame
< // ----------------------------------------------------------------------------
< 
< // frame constructor
< MyFrame::MyFrame(const wxString& title)
<        : wxFrame(NULL, wxID_ANY, title)
< {
<     // set the frame icon
<     SetIcon(wxICON(sample));
< 
< #if wxUSE_MENUS
<     // create a menu bar
<     wxMenu *fileMenu = new wxMenu;
< 
<     // the "About" item should be in the help menu
<     wxMenu *helpMenu = new wxMenu;
<     helpMenu->Append(Minimal_About, "&About...\tF1", "Show about dialog");
< 
<     fileMenu->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
< 
<     // now append the freshly created menu to the menu bar...
<     wxMenuBar *menuBar = new wxMenuBar();
<     menuBar->Append(fileMenu, "&File");
<     menuBar->Append(helpMenu, "&Help");
< 
<     // ... and attach this menu bar to the frame
<     SetMenuBar(menuBar);
< #endif // wxUSE_MENUS
< 
< #if wxUSE_STATUSBAR
<     // create a status bar just for fun (by default with 1 pane only)
<     CreateStatusBar(2);
<     SetStatusText("Welcome to wxWidgets!");
< #endif // wxUSE_STATUSBAR
---
> 
> MainFrame::MainFrame()
> :
> wxFrame(
>     (wxFrame*)NULL,
>     -1,
>     "Multiple Scrolling Panels" )
> {
>     Maximize();
> 
>     wxScrolled<wxPanel>* panel = new wxScrolled<wxPanel>(this);
>     panel->SetScrollRate(5, 5);
> 
>     wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
>     panel->SetSizer(sizer);
> 
>     myScrolled* track_A = new myScrolled( panel );
>     myScrolled* track_B = new myScrolled( panel );
>     myScrolled* track_C = new myScrolled( panel );
> 
>     sizer->Add( track_A, wxSizerFlags().Expand() );
>     sizer->Add( track_B, wxSizerFlags().Expand() );
>     sizer->Add( track_C, wxSizerFlags().Expand() );
> }
> 
> 
> myScrolled::myScrolled( wxWindow* parent )
> :
> wxScrolled<wxPanel>(parent, -1, wxDefaultPosition, wxSize(-1, 300) )
> {
>     SetScrollRate(5, 5);
> 
>     SetVirtualSize(2000, 2000);
> 
>     Bind(wxEVT_PAINT, &myScrolled::OnPaint, this);
178c80,92
< // event handlers
---
> void myScrolled::OnPaint( wxPaintEvent& )
> {
>     wxPaintDC dc(this);
> 
>     PrepareDC(dc);
> 
>     DrawWindowContent();
> 
>     // When DrawScrollBarCorner is not called, the bug occurs when scrolling the main window.
> 
>     DrawScrollBarCorner();
> }
> 
180c94
< void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
---
> void myScrolled::DrawWindowContent()
182,183c96,100
<     // true is to force the frame to close
<     Close(true);
---
>     wxClientDC dc(this);
>     PrepareDC(dc);
> 
>     dc.SetBrush( *wxBLUE_BRUSH );
>     dc.DrawRectangle( 50, 50, 1000, 1000 );
186c103,104
< void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
---
> 
> void myScrolled::DrawScrollBarCorner()
188,199c106,115
<     wxMessageBox(wxString::Format
<                  (
<                     "Welcome to %s!\n"
<                     "\n"
<                     "This is the minimal wxWidgets sample\n"
<                     "running under %s.",
<                     wxVERSION_STRING,
<                     wxGetOsDescription()
<                  ),
<                  "About wxWidgets minimal sample",
<                  wxOK | wxICON_INFORMATION,
<                  this);
---
>     wxWindowDC dc(this);
>     dc.SetPen(*wxTRANSPARENT_PEN);
> 
>     dc.SetBrush( wxBrush( wxSystemSettings::GetColour(wxSYS_COLOUR_FRAMEBK) ) );
> 
>     wxCoord w = 0, h = 0;
> 
>     GetClientSize(&w, &h);
> 
>     dc.DrawRectangle( w, h, wxSYS_VSCROLL_X, wxSYS_HSCROLL_Y );

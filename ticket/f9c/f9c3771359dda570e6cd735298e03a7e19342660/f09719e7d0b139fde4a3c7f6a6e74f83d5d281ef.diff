Index: src/univ/control.cpp
===================================================================
--- src/univ/control.cpp	(revision 56170)
+++ src/univ/control.cpp	(working copy)
@@ -78,51 +78,6 @@
 // mnemonics handling
 // ----------------------------------------------------------------------------
 
-/* static */
-int wxControl::FindAccelIndex(const wxString& label, wxString *labelOnly)
-{
-    // the character following MNEMONIC_PREFIX is the accelerator for this
-    // control unless it is MNEMONIC_PREFIX too - this allows to insert
-    // literal MNEMONIC_PREFIX chars into the label
-    static const wxChar MNEMONIC_PREFIX = _T('&');
-
-    if ( labelOnly )
-    {
-        labelOnly->Empty();
-        labelOnly->Alloc(label.length());
-    }
-
-    int indexAccel = -1;
-    for ( wxString::const_iterator pc = label.begin(); pc != label.end(); ++pc )
-    {
-        if ( *pc == MNEMONIC_PREFIX )
-        {
-            ++pc; // skip it
-            if ( pc == label.end() )
-                break;
-            else if ( *pc != MNEMONIC_PREFIX )
-            {
-                if ( indexAccel == -1 )
-                {
-                    // remember it (-1 is for MNEMONIC_PREFIX itself
-                    indexAccel = pc - label.begin() - 1;
-                }
-                else
-                {
-                    wxFAIL_MSG(_T("duplicate accel char in control label"));
-                }
-            }
-        }
-
-        if ( labelOnly )
-        {
-            *labelOnly += *pc;
-        }
-    }
-
-    return indexAccel;
-}
-
 void wxControl::SetLabel(const wxString& label)
 {
     // save original label
Index: src/univ/stattext.cpp
===================================================================
--- src/univ/stattext.cpp	(revision 56170)
+++ src/univ/stattext.cpp	(working copy)
@@ -39,7 +39,7 @@
 // implementation
 // ============================================================================
 
-IMPLEMENT_ABSTRACT_CLASS(wxStaticText, wxControl)
+IMPLEMENT_ABSTRACT_CLASS(wxStaticText, wxGenericStaticText)
 
 // ----------------------------------------------------------------------------
 // creation
@@ -63,21 +63,6 @@
 }
 
 // ----------------------------------------------------------------------------
-// size management
-// ----------------------------------------------------------------------------
-
-wxSize wxStaticText::DoGetBestClientSize() const
-{
-    wxStaticText *self = wxConstCast(this, wxStaticText);
-    wxClientDC dc(self);
-    dc.SetFont(GetFont());
-    wxCoord width, height;
-    dc.GetMultiLineTextExtent(GetLabel(), &width, &height);
-
-    return wxSize(width, height);
-}
-
-// ----------------------------------------------------------------------------
 // drawing
 // ----------------------------------------------------------------------------
 
Index: src/common/ctrlcmn.cpp
===================================================================
--- src/common/ctrlcmn.cpp	(revision 56170)
+++ src/common/ctrlcmn.cpp	(working copy)
@@ -158,6 +158,51 @@
     return wxStripMenuCodes(str, wxStrip_Mnemonics);
 }
 
+/* static */
+int wxControlBase::FindAccelIndex(const wxString& label, wxString *labelOnly)
+{
+    // the character following MNEMONIC_PREFIX is the accelerator for this
+    // control unless it is MNEMONIC_PREFIX too - this allows to insert
+    // literal MNEMONIC_PREFIX chars into the label
+    static const wxChar MNEMONIC_PREFIX = _T('&');
+
+    if ( labelOnly )
+    {
+        labelOnly->Empty();
+        labelOnly->Alloc(label.length());
+    }
+
+    int indexAccel = -1;
+    for ( wxString::const_iterator pc = label.begin(); pc != label.end(); ++pc )
+    {
+        if ( *pc == MNEMONIC_PREFIX )
+        {
+            ++pc; // skip it
+            if ( pc == label.end() )
+                break;
+            else if ( *pc != MNEMONIC_PREFIX )
+            {
+                if ( indexAccel == -1 )
+                {
+                    // remember it (-1 is for MNEMONIC_PREFIX itself
+                    indexAccel = pc - label.begin() - 1;
+                }
+                else
+                {
+                    wxFAIL_MSG(_T("duplicate accel char in control label"));
+                }
+            }
+        }
+
+        if ( labelOnly )
+        {
+            *labelOnly += *pc;
+        }
+    }
+
+    return indexAccel;
+}
+
 wxBorder wxControlBase::GetDefaultBorder() const
 {
     return wxBORDER_THEME;
Index: src/generic/stattextg.cpp
===================================================================
--- src/generic/stattextg.cpp	(revision 0)
+++ src/generic/stattextg.cpp	(revision 0)
@@ -0,0 +1,124 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/generic/stattextg.cpp
+// Purpose:     wxGenericStaticText
+// Author:      Marcin Wojdyr
+// Created:     2008-06-26
+// RCS-ID:      $Id:$
+// Copyright:   Marcin Wojdyr
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_STATTEXT
+
+#ifndef WX_PRECOMP
+    #include "wx/dc.h"
+    #include "wx/validate.h"
+#endif
+
+#include "wx/generic/stattextg.h"
+
+
+IMPLEMENT_DYNAMIC_CLASS(wxGenericStaticText, wxStaticTextBase)
+
+
+bool wxGenericStaticText::Create(wxWindow *parent,
+                                 wxWindowID id,
+                                 const wxString &label,
+                                 const wxPoint &pos,
+                                 const wxSize &size,
+                                 long style,
+                                 const wxString &name)
+{
+    if (!wxControl::Create(parent, id, pos, size, style, 
+                           wxDefaultValidator, name))
+        return false;
+
+    SetLabel(label);
+    SetInitialSize(size);
+    Connect(wxEVT_PAINT, wxPaintEventHandler(wxGenericStaticText::OnPaint));
+    return true;
+}
+
+void wxGenericStaticText::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    if (m_label.empty())
+        return;
+    wxPaintDC dc(this);
+    PrepareDC(dc);
+
+    wxRect rect = GetClientRect();
+    if (IsEnabled())
+    {
+        dc.SetTextForeground(
+                       wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
+    }
+    else
+    {
+        // draw shadow of the text
+        dc.SetTextForeground(
+                       wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
+        wxRect rectShadow = rect;
+        rectShadow.Offset(1, 1);
+        dc.DrawLabel(m_label, rectShadow, GetAlignment(), m_mnemonic);
+        dc.SetTextForeground(
+                       wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
+    }
+    dc.DrawLabel(m_label, wxNullBitmap, rect, GetAlignment(), m_mnemonic);
+}
+
+
+wxSize wxGenericStaticText::DoGetBestClientSize() const
+{
+    wxClientDC dc(wxConstCast(this, wxGenericStaticText));
+    wxCoord width, height;
+    dc.GetMultiLineTextExtent(GetLabel(), &width, &height);
+    return wxSize(width, height);
+}
+
+wxSize wxGenericStaticText::DoGetBestSize() const
+{
+    wxSize ret = DoGetBestClientSize();
+    CacheBestSize(ret);
+    return ret;
+}
+
+
+void wxGenericStaticText::SetLabel(const wxString& label)
+{
+    wxControl::SetLabel(label);
+    DoSetLabel(GetEllipsizedLabelWithoutMarkup());
+    if (!HasFlag(wxST_NO_AUTORESIZE) && !IsEllipsized())  
+        InvalidateBestSize();
+    Refresh();
+}
+
+void wxGenericStaticText::DoSetLabel(const wxString& label)
+{
+    m_mnemonic = FindAccelIndex(label, &m_label);
+}
+
+bool wxGenericStaticText::SetFont(const wxFont &font)
+{
+    if (!wxControl::SetFont(font))
+        return false;
+    if (!HasFlag(wxST_NO_AUTORESIZE))
+        InvalidateBestSize();
+    Refresh();
+    return true;
+}
+
+void wxGenericStaticText::DoSetSize(int x, int y, int width, int height, 
+                                    int sizeFlags)
+{
+    wxStaticTextBase::DoSetSize(x, y, width, height, sizeFlags);
+    UpdateLabel();
+}
+
+
+#endif // wxUSE_STATTEXT
Index: include/wx/control.h
===================================================================
--- include/wx/control.h	(revision 56170)
+++ include/wx/control.h	(working copy)
@@ -73,7 +73,12 @@
     // removes the mnemonics characters
     static wxString RemoveMnemonics(const wxString& str);
 
+    // return the accel index in the string or -1 if none and puts the modified
+    // string into second parameter if non NULL
+    static int FindAccelIndex(const wxString& label,
+                              wxString *labelOnly = NULL);
 
+
     // controls by default inherit the colours of their parents, if a
     // particular control class doesn't want to do it, it can override
     // ShouldInheritColours() to return false
Index: include/wx/univ/control.h
===================================================================
--- include/wx/univ/control.h	(revision 56170)
+++ include/wx/univ/control.h	(working copy)
@@ -71,11 +71,6 @@
 
     // wxUniversal-specific methods
 
-    // return the accel index in the string or -1 if none and puts the modified
-    // string into second parameter if non NULL
-    static int FindAccelIndex(const wxString& label,
-                              wxString *labelOnly = NULL);
-
     // return the index of the accel char in the label or -1 if none
     int GetAccelIndex() const { return m_indexAccel; }
 
Index: include/wx/univ/stattext.h
===================================================================
--- include/wx/univ/stattext.h	(revision 56170)
+++ include/wx/univ/stattext.h	(working copy)
@@ -12,7 +12,9 @@
 #ifndef _WX_UNIV_STATTEXT_H_
 #define _WX_UNIV_STATTEXT_H_
 
-class WXDLLIMPEXP_CORE wxStaticText : public wxStaticTextBase
+#include "wx/generic/stattextg.h"
+
+class WXDLLIMPEXP_CORE wxStaticText : public wxGenericStaticText
 {
 public:
     wxStaticText() { }
@@ -54,9 +56,6 @@
     virtual bool IsFocused() const { return false; }
 
 protected:
-    // calculate the optimal size for the label
-    virtual wxSize DoGetBestClientSize() const;
-
     // draw the control
     virtual void DoDraw(wxControlRenderer *renderer);
 
Index: include/wx/generic/stattextg.h
===================================================================
--- include/wx/generic/stattextg.h	(revision 0)
+++ include/wx/generic/stattextg.h	(revision 0)
@@ -0,0 +1,62 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/stattextg.h
+// Purpose:     wxGenericStaticText header
+// Author:      Marcin Wojdyr
+// Created:     2008-06-26
+// Id:          $Id:$
+// Copyright:   Marcin Wojdyr
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GENERIC_STATTEXTG_H_
+#define _WX_GENERIC_STATTEXTG_H_
+
+#include "wx/stattext.h"
+
+class WXDLLIMPEXP_CORE wxGenericStaticText : public wxStaticTextBase
+{
+public:
+    wxGenericStaticText() { }
+
+    wxGenericStaticText(wxWindow *parent,
+                 wxWindowID id,
+                 const wxString& label,
+                 const wxPoint& pos = wxDefaultPosition,
+                 const wxSize& size = wxDefaultSize,
+                 long style = 0,
+                 const wxString& name = wxStaticTextNameStr)
+    {
+        Create(parent, id, label, pos, size, style, name);
+    }
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = 0,
+                const wxString& name = wxStaticTextNameStr);
+
+
+    virtual wxSize DoGetBestClientSize() const;
+    virtual wxSize DoGetBestSize() const;
+
+    virtual void SetLabel(const wxString& label);
+    virtual bool SetFont(const wxFont &font);
+
+    virtual wxString DoGetLabel() const { return m_label; }
+    virtual void DoSetLabel(const wxString& label);
+
+protected:
+    void OnPaint(wxPaintEvent& event);
+    void DoSetSize(int x, int y, int width, int height, int sizeFlags);
+
+private:
+    wxString m_label;
+    int m_mnemonic;
+
+    DECLARE_DYNAMIC_CLASS_NO_COPY(wxGenericStaticText)
+}; 
+
+#endif // _WX_GENERIC_STATTEXTG_H_
+
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 56170)
+++ build/bakefiles/files.bkl	(working copy)
@@ -733,6 +733,7 @@
     src/generic/splitter.cpp
     src/generic/srchctlg.cpp
     src/generic/statbmpg.cpp
+    src/generic/stattextg.cpp
     src/generic/textdlgg.cpp
     src/generic/tipwin.cpp
     src/generic/toolbkg.cpp
@@ -795,6 +796,7 @@
     wx/generic/splitter.h
     wx/generic/srchctlg.h
     wx/generic/statbmpg.h
+    wx/generic/stattextg.h
     wx/generic/textdlgg.h
     wx/generic/treectlg.h
     wx/graphics.h
Index: samples/widgets/static.cpp
===================================================================
--- samples/widgets/static.cpp	(revision 56170)
+++ samples/widgets/static.cpp	(working copy)
@@ -40,6 +40,7 @@
 #include "wx/sizer.h"
 
 #include "wx/statline.h"
+#include "wx/generic/stattextg.h"
 
 #include "widgets.h"
 #include "icons/statbox.xpm"
@@ -81,65 +82,7 @@
     StaticEllipsize_End
 };
 
-// ----------------------------------------------------------------------------
-// MyStaticText and MyStaticBox
-// ----------------------------------------------------------------------------
 
-// these 2 classes simply show that the static controls can get the mouse
-// clicks too -- this used to be broken under MSW but works now
-
-class MyStaticText : public wxStaticText
-{
-public:
-    MyStaticText(wxWindow* parent,
-                      wxWindowID id,
-                      const wxString& label,
-                      const wxPoint& pos = wxDefaultPosition,
-                      const wxSize& size = wxDefaultSize,
-                      long style = 0)
-        : wxStaticText(parent, id, label, pos, size, style)
-    {
-    }
-
-protected:
-    void OnMouseEvent(wxMouseEvent& WXUNUSED(event))
-    {
-        wxLogMessage(wxT("Clicked on static text"));
-    }
-
-    DECLARE_EVENT_TABLE()
-};
-
-class MyStaticBox : public wxStaticBox
-{
-public:
-    MyStaticBox(wxWindow* parent,
-                wxWindowID id,
-                const wxString& label,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = 0)
-        : wxStaticBox(parent, id, label, pos, size, style)
-    {
-    }
-
-protected:
-    void OnMouseEvent(wxMouseEvent& WXUNUSED(event))
-    {
-        wxLogMessage(wxT("Clicked on static box"));
-    }
-
-    DECLARE_EVENT_TABLE()
-};
-
-BEGIN_EVENT_TABLE(MyStaticText, wxStaticText)
-    EVT_LEFT_UP(MyStaticText::OnMouseEvent)
-END_EVENT_TABLE()
-
-BEGIN_EVENT_TABLE(MyStaticBox, wxStaticBox)
-    EVT_LEFT_UP(MyStaticBox::OnMouseEvent)
-END_EVENT_TABLE()
-
 // ----------------------------------------------------------------------------
 // StaticWidgetsPage
 // ----------------------------------------------------------------------------
@@ -164,6 +107,7 @@
     void OnButtonBoxText(wxCommandEvent& event);
     void OnButtonLabelText(wxCommandEvent& event);
     void OnButtonLabelWithMarkupText(wxCommandEvent& event);
+    void OnMouseEvent(wxMouseEvent& event);
 
     // reset all parameters
     void Reset();
@@ -176,19 +120,20 @@
 
     // the check/radio boxes for styles
     wxCheckBox *m_chkVert,
+               *m_chkGeneric,
                *m_chkAutoResize,
                *m_chkEllipsize,
-               *m_chkMarkup;
+               *m_chkMarkup,
+               *m_chkGreen;
 
     wxRadioBox *m_radioHAlign,
                *m_radioVAlign,
                *m_radioEllipsize;
 
     // the controls and the sizer containing them
-    wxStaticBox *m_staticBox;
     wxStaticBoxSizer *m_sizerStatBox;
-    wxStaticText *m_statText,
-                 *m_statTextWithMarkup;
+    wxStaticTextBase *m_statText,
+                     *m_statMarkup;
 #if wxUSE_STATLINE
     wxStaticLine *m_statLine;
 #endif // wxUSE_STATLINE
@@ -233,6 +178,8 @@
     // init everything
     m_chkVert =
     m_chkAutoResize = (wxCheckBox *)NULL;
+    m_chkGeneric = NULL;
+    m_chkGreen = NULL;
 
     m_radioHAlign =
     m_radioVAlign = (wxRadioBox *)NULL;
@@ -240,9 +187,8 @@
 #if wxUSE_STATLINE
     m_statLine = (wxStaticLine *)NULL;
 #endif // wxUSE_STATLINE
-    m_statText = m_statTextWithMarkup = (wxStaticText *)NULL;
+    m_statText = m_statMarkup = NULL;
 
-    m_staticBox = (wxStaticBox *)NULL;
     m_sizerStatBox = (wxStaticBoxSizer *)NULL;
     m_sizerStatic = (wxSizer *)NULL;
 
@@ -254,13 +200,13 @@
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxSizer *sizerLeft = new wxStaticBoxSizer(wxVERTICAL, this, "&Set style");
 
-    wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
-
-    m_chkMarkup = CreateCheckBoxAndAddToSizer(sizerLeft, _T("Support &markup"));
-    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Vertical line"));
-    m_chkAutoResize = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Fit to text"));
+    m_chkGeneric = CreateCheckBoxAndAddToSizer(sizerLeft, 
+                                               "&Generic wxStaticText");
+    m_chkMarkup = CreateCheckBoxAndAddToSizer(sizerLeft, "Support &markup");
+    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, "&Vertical line");
+    m_chkAutoResize = CreateCheckBoxAndAddToSizer(sizerLeft, "&Fit to text");
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
     static const wxString halign[] =
@@ -279,10 +225,10 @@
 
     m_radioHAlign = new wxRadioBox(this, wxID_ANY, _T("&Horz alignment"),
                                    wxDefaultPosition, wxDefaultSize,
-                                   WXSIZEOF(halign), halign);
+                                   WXSIZEOF(halign), halign, 3);
     m_radioVAlign = new wxRadioBox(this, wxID_ANY, _T("&Vert alignment"),
                                    wxDefaultPosition, wxDefaultSize,
-                                   WXSIZEOF(valign), valign);
+                                   WXSIZEOF(valign), valign, 3);
 
     sizerLeft->Add(m_radioHAlign, 0, wxGROW | wxALL, 5);
     sizerLeft->Add(m_radioVAlign, 0, wxGROW | wxALL, 5);
@@ -301,7 +247,8 @@
 
     m_radioEllipsize = new wxRadioBox(this, wxID_ANY, _T("&Ellipsize mode"),
                                       wxDefaultPosition, wxDefaultSize,
-                                      WXSIZEOF(ellipsizeMode), ellipsizeMode);
+                                      WXSIZEOF(ellipsizeMode), ellipsizeMode, 
+                                      3);
 
     sizerLeft->Add(m_radioEllipsize, 0, wxGROW | wxALL, 5);
 
@@ -309,26 +256,41 @@
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Change labels"));
-    wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
+    wxSizer *sizerMiddle = new wxStaticBoxSizer(wxVERTICAL, this, 
+                                                "&Change labels");
 
-    wxSizer *sizerRow;
+    m_textBox = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
+    wxButton *b1 = new wxButton(this, wxID_ANY, "Change &box label");
+    b1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, 
+                wxCommandEventHandler(StaticWidgetsPage::OnButtonBoxText),
+                NULL, this);
+    sizerMiddle->Add(m_textBox, 0, wxEXPAND|wxALL, 5);
+    sizerMiddle->Add(b1, 0, wxLEFT|wxBOTTOM, 5);
 
-    sizerRow = CreateSizerWithTextAndButton(StaticPage_BoxText,
-                                            _T("Change &box label"),
-                                            wxID_ANY, &m_textBox);
-    sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
+    m_textLabel = new wxTextCtrl(this, wxID_ANY, wxEmptyString,
+                                 wxDefaultPosition, wxDefaultSize,
+                                 wxTE_MULTILINE|wxHSCROLL);
+    wxButton *b2 = new wxButton(this, wxID_ANY, "Change &text label");
+    b2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, 
+                wxCommandEventHandler(StaticWidgetsPage::OnButtonLabelText),
+                NULL, this);
+    sizerMiddle->Add(m_textLabel, 0, wxEXPAND|wxALL, 5);
+    sizerMiddle->Add(b2, 0, wxLEFT|wxBOTTOM, 5);
 
-    sizerRow = CreateSizerWithTextAndButton(StaticPage_LabelText,
-                                            _T("Change &text label"),
-                                            wxID_ANY, &m_textLabel);
-    sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
+    m_textLabelWithMarkup = new wxTextCtrl(this, wxID_ANY, wxEmptyString,
+                                           wxDefaultPosition, wxDefaultSize,
+                                           wxTE_MULTILINE|wxHSCROLL);
 
-    sizerRow = CreateSizerWithTextAndButton(StaticPage_LabelTextWithMarkup,
-                                            _T("Change decorated text label"),
-                                            wxID_ANY, &m_textLabelWithMarkup);
-    sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
+    wxButton *b3 = new wxButton(this, wxID_ANY, "Change decorated text label");
+    b3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, 
+                wxCommandEventHandler(StaticWidgetsPage::OnButtonLabelWithMarkupText),
+                NULL, this);
+    sizerMiddle->Add(m_textLabelWithMarkup, 0, wxEXPAND|wxALL, 5);
+    sizerMiddle->Add(b3, 0, wxLEFT|wxBOTTOM, 5);
 
+    m_chkGreen = CreateCheckBoxAndAddToSizer(sizerLeft, 
+                                             "Decorated label on g&reen");
+    sizerMiddle->Add(m_chkGreen, 0, wxALL, 5);
 
     // final initializations
     // NB: must be done _before_ calling CreateStatic()
@@ -363,6 +325,7 @@
 
 void StaticWidgetsPage::Reset()
 {
+    m_chkGeneric->SetValue(false);
     m_chkVert->SetValue(false);
     m_chkAutoResize->SetValue(true);
     m_chkEllipsize->SetValue(true);
@@ -378,11 +341,10 @@
 
     if ( m_sizerStatBox )
     {
-        delete m_staticBox;
         // delete m_sizerStatBox; -- deleted by Remove()
         m_sizerStatic->Remove(m_sizerStatBox);
         delete m_statText;
-        delete m_statTextWithMarkup;
+        delete m_statMarkup;
 #if wxUSE_STATLINE
         delete m_statLine;
 #endif // wxUSE_STATLINE
@@ -469,20 +431,37 @@
     flagsText |= align;
     flagsBox |= align;
 
-    m_staticBox = new MyStaticBox(this, wxID_ANY, m_textBox->GetValue(),
-                                  wxDefaultPosition, wxDefaultSize,
-                                  flagsBox);
-    m_sizerStatBox = new wxStaticBoxSizer(m_staticBox, isVert ? wxHORIZONTAL
-                                                              : wxVERTICAL);
+    wxStaticBox *staticBox = new wxStaticBox(this, wxID_ANY, 
+                                             m_textBox->GetValue(),
+                                             wxDefaultPosition, wxDefaultSize, 
+                                             flagsBox);
+    m_sizerStatBox = new wxStaticBoxSizer(staticBox, isVert ? wxHORIZONTAL
+                                                            : wxVERTICAL);
 
-    m_statText = new MyStaticText(this, wxID_ANY, m_textLabel->GetValue(),
-                                  wxDefaultPosition, wxDefaultSize,
-                                            flagsDummyText);
-    m_statTextWithMarkup = new wxStaticText(this, wxID_ANY, 
-                                            m_textLabelWithMarkup->GetValue(),
-                                            wxDefaultPosition, wxDefaultSize,
-                                            flagsText);
-
+    if (m_chkGeneric->GetValue())
+    {
+        m_statText = new wxGenericStaticText(this, wxID_ANY, 
+                                             m_textLabel->GetValue(),
+                                             wxDefaultPosition, wxDefaultSize,
+                                             flagsDummyText);
+        m_statMarkup = new wxGenericStaticText(this, wxID_ANY, 
+                                             m_textLabelWithMarkup->GetValue(),
+                                             wxDefaultPosition, wxDefaultSize,
+                                             flagsText);
+    }
+    else 
+    {
+        m_statText = new wxStaticText(this, wxID_ANY, 
+                                      m_textLabel->GetValue(),
+                                      wxDefaultPosition, wxDefaultSize,
+                                      flagsDummyText);
+        m_statMarkup = new wxStaticText(this, wxID_ANY, 
+                                        m_textLabelWithMarkup->GetValue(),
+                                        wxDefaultPosition, wxDefaultSize,
+                                        flagsText);
+    }
+    if (m_chkGreen->GetValue())
+        m_statMarkup->SetBackgroundColour(*wxGREEN);
 #if wxUSE_STATLINE
     m_statLine = new wxStaticLine(this, wxID_ANY,
                                   wxDefaultPosition, wxDefaultSize,
@@ -493,11 +472,18 @@
 #if wxUSE_STATLINE
     m_sizerStatBox->Add(m_statLine, 0, wxGROW | wxALL, 5);
 #endif // wxUSE_STATLINE
-    m_sizerStatBox->Add(m_statTextWithMarkup, 1, wxGROW | wxALL, 5);
+    m_sizerStatBox->Add(m_statMarkup, 1, wxGROW | wxALL, 5);
 
     m_sizerStatic->Add(m_sizerStatBox, 1, wxGROW);
 
     m_sizerStatic->Layout();
+
+    m_statText->Connect(wxEVT_LEFT_UP, 
+                        wxMouseEventHandler(StaticWidgetsPage::OnMouseEvent), 
+                        NULL, this);
+    staticBox->Connect(wxEVT_LEFT_UP, 
+                       wxMouseEventHandler(StaticWidgetsPage::OnMouseEvent), 
+                       NULL, this);
 }
 
 // ----------------------------------------------------------------------------
@@ -526,29 +512,37 @@
     m_sizerStatBox->GetStaticBox()->SetLabel(m_textBox->GetValue());
 }
 
-void StaticWidgetsPage::OnButtonLabelWithMarkupText(wxCommandEvent& WXUNUSED(event))
+void StaticWidgetsPage::OnButtonLabelText(wxCommandEvent& WXUNUSED(event))
 {
-    m_statTextWithMarkup->SetLabel(m_textLabelWithMarkup->GetValue());
+    m_statText->SetLabel(m_textLabel->GetValue());
 
     // test GetLabel() and GetLabelText(); the first should return the
     // label as it is written in the relative text control; the second should
     // return the label as it's shown in the wxStaticText
     wxLogMessage(wxT("The original label should be '%s'"),
-                 m_statTextWithMarkup->GetLabel().c_str());
+                 m_statText->GetLabel().c_str());
     wxLogMessage(wxT("The label text is '%s'"),
-                 m_statTextWithMarkup->GetLabelText().c_str());
+                 m_statText->GetLabelText().c_str());
 }
 
-void StaticWidgetsPage::OnButtonLabelText(wxCommandEvent& WXUNUSED(event))
+void StaticWidgetsPage::OnButtonLabelWithMarkupText(wxCommandEvent& WXUNUSED(event))
 {
-    m_statText->SetLabel(m_textLabel->GetValue());
+    m_statMarkup->SetLabel(m_textLabelWithMarkup->GetValue());
 
     // test GetLabel() and GetLabelText(); the first should return the
     // label as it is written in the relative text control; the second should
     // return the label as it's shown in the wxStaticText
     wxLogMessage(wxT("The original label should be '%s'"),
-                 m_statText->GetLabel().c_str());
+                 m_statMarkup->GetLabel().c_str());
     wxLogMessage(wxT("The label text is '%s'"),
-                 m_statText->GetLabelText().c_str());
+                 m_statMarkup->GetLabelText().c_str());
 }
 
+void StaticWidgetsPage::OnMouseEvent(wxMouseEvent& event)
+{
+    if (event.GetId() == m_statText->GetId())
+        wxLogMessage(wxT("Clicked on static text"));
+    else 
+        wxLogMessage(wxT("Clicked on static box"));
+}
+

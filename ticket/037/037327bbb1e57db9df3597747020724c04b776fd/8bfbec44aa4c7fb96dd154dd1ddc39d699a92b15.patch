diff -uNr wxWidgets-trunk\src/msw/dc.cpp wxWidgets-work\src/msw/dc.cpp
--- wxWidgets-trunk\src/msw/dc.cpp	2014-01-30 23:20:44.111732400 +0100
+++ wxWidgets-work\src/msw/dc.cpp	2014-01-31 17:55:45.784499900 +0100
@@ -1462,9 +1462,9 @@
     wxTextColoursChanger textCol(GetHdc(), *this);
 
     wxBkModeChanger bkMode(GetHdc(), m_backgroundMode);
-
+    // String length may not exceed 8192 characters
     if ( ::ExtTextOut(GetHdc(), XLOG2DEV(x), YLOG2DEV(y), 0, NULL,
-                   text.c_str(), text.length(), NULL) == 0 )
+        text.c_str(), wxMin(8192, text.length()), NULL) == 0 )
     {
         wxLogLastError(wxT("TextOut"));
     }
@@ -1483,6 +1483,7 @@
     if ( (angle == 0.0) && m_font.IsOk() )
     {
         DoDrawText(text, x, y);
+        // Bounding box is already determined by underlying functions - no need to call CalcBoundingBox
     }
 #ifndef __WXMICROWIN__
     else
@@ -1501,7 +1502,7 @@
         // GDI wants the angle in tenth of degree
         long angle10 = (long)(angle * 10);
         lf.lfEscapement = angle10;
-        lf. lfOrientation = angle10;
+        lf.lfOrientation = angle10;
 
         hfont = ::CreateFontIndirect(&lf);
         if ( !hfont )
@@ -1512,29 +1513,51 @@
         {
             HFONT hfontOld = (HFONT)::SelectObject(GetHdc(), hfont);
 
-            DrawAnyText(text, x, y);
+            // Get extent of whole text.
+            wxCoord w, h, heightLine;
+            GetOwner()->GetMultiLineTextExtent(text, &w, &h, &heightLine);
+
+            const double rad = DegToRad(angle);
+            const double dx = heightLine * sin(rad);  // x-shift for origin of single line
+            const double dy = heightLine * cos(rad);  // y-shift for origin of single line
+            int lineNum = 0;    // current line number
+            size_t posFrom = 0; // current line begins here
+            size_t posTo;       // current line ends here
+            wxCoord xl, yl;     // origin of current line
+
+            // Draw all text line by line
+            while( (posTo = text.find(wxT('\n'), posFrom)) != wxString::npos )
+            {
+                // Calculate origin for each line to avoid accumulation of rounding errors.
+                xl = x + (wxRound)(lineNum * dx);
+                yl = y + (wxRound)(lineNum * dy);
+                DrawAnyText(text.SubString(posFrom, posTo-1), xl, yl);
+                lineNum++;
+                posFrom = posTo + 1;
+            }
+            // Last line (can be empty).
+            xl = x + (wxRound)(lineNum * dx);
+            yl = y + (wxRound)(lineNum * dy);
+            DrawAnyText(text.Mid(posFrom), xl, yl);
 
             (void)::SelectObject(GetHdc(), hfontOld);
             (void)::DeleteObject(hfont);
+
+            // call the bounding box by adding all four vertices of the rectangle
+            // containing the text to it (simpler and probably not slower than
+            // determining which of them is really topmost/leftmost/...)
+
+            // "upper left" and "upper right"
+            CalcBoundingBox(x, y);
+            CalcBoundingBox(x + wxCoord(w*cos(rad)), y - wxCoord(w*sin(rad)));
+
+            // "bottom left" and "bottom right"
+            x += (wxCoord)(h*sin(rad));
+            y += (wxCoord)(h*cos(rad));
+            CalcBoundingBox(x, y);
+            CalcBoundingBox(x + wxCoord(w*cos(rad)), y - wxCoord(w*sin(rad)));
         }
 
-        // call the bounding box by adding all four vertices of the rectangle
-        // containing the text to it (simpler and probably not slower than
-        // determining which of them is really topmost/leftmost/...)
-        wxCoord w, h;
-        GetOwner()->GetTextExtent(text, &w, &h);
-
-        double rad = DegToRad(angle);
-
-        // "upper left" and "upper right"
-        CalcBoundingBox(x, y);
-        CalcBoundingBox(x + wxCoord(w*cos(rad)), y - wxCoord(w*sin(rad)));
-
-        // "bottom left" and "bottom right"
-        x += (wxCoord)(h*sin(rad));
-        y += (wxCoord)(h*cos(rad));
-        CalcBoundingBox(x, y);
-        CalcBoundingBox(x + wxCoord(w*cos(rad)), y - wxCoord(w*sin(rad)));
     }
 #endif
 }

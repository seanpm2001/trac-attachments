Index: samples/html/printing/testAlign.html
===================================================================
--- samples/html/printing/testAlign.html	(revision 0)
+++ samples/html/printing/testAlign.html	(revision 0)
@@ -0,0 +1,19 @@
+
+
+<html id="html" >
+<body id="body" bgcolor="#7F007F">
+<table border=1><tr><td>
+<font size=550>X</font>
+<img id="img100" src="100.png"/>
+<img id="img25" align="top" src="25.png"/>
+<img id="img25" align="center" src="25.png"/>
+<img id="img25" align="center" width=50 src="25.png"/>
+<img id="img25" align="bottom" src="25.png"/>
+</td></tr></table>
+</br>
+</body>
+</html>
+
+
+
+
Index: samples/html/printing/testImageSize.html
===================================================================
--- samples/html/printing/testImageSize.html	(revision 0)
+++ samples/html/printing/testImageSize.html	(revision 0)
@@ -0,0 +1,209 @@
+
+
+<html>
+<body>
+Test file for img tag with relative size. note that this test use table to define size, but wxWidget do not honour table height yet.
+<br />
+
+<table border="1" width="800" height="800">
+	<tr>
+		<td width="200">800*800, 50.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="50.png" /></td>
+		<td><img src="50.png" width="50"/></td>
+		<td><img src="50.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="50.png" height="50"/></td>
+		<td><img src="50.png" height="50" width="50"/></td>
+		<td><img src="50.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="50.png" height="50%" /></td>
+		<td><img src="50.png" height="50%" width="50"/></td>
+		<td><img src="50.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br />
+<table border="1" width="800" height="800">
+	<tr>
+		<td width="200">800*800, 25.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="25.png" /></td>
+		<td><img src="25.png" width="50"/></td>
+		<td><img src="25.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="25.png" height="50"/></td>
+		<td><img src="25.png" height="50" width="50"/></td>
+		<td><img src="25.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="25.png" height="50%" /></td>
+		<td><img src="25.png" height="50%" width="50"/></td>
+		<td><img src="25.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br />
+<table border="1" width="800" height="800">
+	<tr>
+		<td width="200">800*800, 75.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="75.png" /></td>
+		<td><img src="75.png" width="50"/></td>
+		<td><img src="75.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="75.png" height="50"/></td>
+		<td><img src="75.png" height="50" width="50"/></td>
+		<td><img src="75.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="75.png" height="50%" /></td>
+		<td><img src="75.png" height="50%" width="50"/></td>
+		<td><img src="75.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br />
+<table border="1" >
+	<tr>
+		<td width="200">75.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="75.png" /></td>
+		<td><img src="75.png" width="50"/></td>
+		<td><img src="75.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="75.png" height="50"/></td>
+		<td><img src="75.png" height="50" width="50"/></td>
+		<td><img src="75.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="75.png" height="50%" /></td>
+		<td><img src="75.png" height="50%" width="50"/></td>
+		<td><img src="75.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br />
+<table border="1" width="800" height="800">
+	<tr>
+		<td width="200">800*800, broken.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="broken.png" /></td>
+		<td><img src="broken.png" width="50"/></td>
+		<td><img src="broken.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="broken.png" height="50"/></td>
+		<td><img src="broken.png" height="50" width="50"/></td>
+		<td><img src="broken.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="broken.png" height="50%" /></td>
+		<td><img src="broken.png" height="50%" width="50"/></td>
+		<td><img src="broken.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br />
+<table border="1" >
+	<tr>
+		<td>broken.png</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img src="broken.png" /></td>
+		<td><img src="broken.png" width="50"/></td>
+		<td><img src="broken.png" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img src="broken.png" height="50"/></td>
+		<td><img src="broken.png" height="50" width="50"/></td>
+		<td><img src="broken.png" height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img src="broken.png" height="50%" /></td>
+		<td><img src="broken.png" height="50%" width="50"/></td>
+		<td><img src="broken.png" height="50%" width="50%"/></td>
+	</tr>
+</table>
+
+<br />
+Broken image tag without source file:
+<br />
+<table border="1" width="800" height="800">
+	<tr>
+		<td width="200">800*800</td>
+		<td>Default Width</td>
+		<td>50 pix Width</td>
+		<td>50% Width</td>
+	</tr>
+	<tr>
+		<td>Default Height</td>
+		<td><img  /></td>
+		<td><img  width="50"/></td>
+		<td><img  width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50 pix Height</td>
+		<td><img  height="50"/></td>
+		<td><img  height="50" width="50"/></td>
+		<td><img  height="50" width="50%"/></td>
+	</tr>
+	<tr>
+		<td>50% Height</td>
+		<td><img  height="50%" /></td>
+		<td><img  height="50%" width="50"/></td>
+		<td><img  height="50%" width="50%"/></td>
+	</tr>
+</table>
+<br/>
+Broken image with broken height : 
+<img src="broken.bmp"   width="50" height= />
+<pre>
+</pre>
+</body>
+</html>
+
+
+
+
Index: src/html/m_image.cpp
===================================================================
--- src/html/m_image.cpp	(revision 61310)
+++ src/html/m_image.cpp	(working copy)
@@ -286,7 +286,7 @@
 {
 public:
     wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
-                    wxFSFile *input, int w = wxDefaultCoord, int h = wxDefaultCoord,
+                    wxFSFile *input, const wxHtmlTag& tag,
                     double scale = 1.0, int align = wxHTML_ALIGN_BOTTOM,
                     const wxString& mapname = wxEmptyString);
     virtual ~wxHtmlImageCell();
@@ -295,6 +295,16 @@
     virtual wxHtmlLinkInfo *GetLink(int x = 0, int y = 0) const;
 
     void SetImage(const wxImage& img);
+
+	// sets floating width adjustment
+    // (examples : 32 percent of parent container,
+    // -15 pixels percent (this means 100 % - 15 pixels)
+    void SetWidthFloat(int w, int units) {m_WidthFloat = w; m_WidthFloatUnits = units; /*m_LastLayout = -1;*/}
+    void SetWidthFloat(const wxHtmlTag& tag, double pixel_scale = 1.0);
+    void SetHeightFloat(int h, int units) {m_HeightFloat = h; m_HeightFloatUnits = units; /*m_LastLayout = -1;*/}
+    void SetHeightFloat(const wxHtmlTag& tag, double pixel_scale = 1.0);
+	void UpdateImageSize(int w = 0); // compute the image size based on floating size and available space
+
 #if wxUSE_GIF && wxUSE_TIMER
     void AdvanceAnimation(wxTimer *timer);
     virtual void Layout(int w);
@@ -302,8 +312,11 @@
 
 private:
     wxBitmap           *m_bitmap;
-    int                 m_bmpW, m_bmpH;
-    bool                m_showFrame:1;
+    int m_WidthFloat, m_WidthFloatUnits; // width float is used in adjustWidth
+    int m_HeightFloat, m_HeightFloatUnits; // hight float is used in adjustWidth
+	int m_LastLayout;
+	int m_Align;	// used to position text/image
+    bool                m_showFrame;
     wxHtmlWindowInterface *m_windowIface;
 #if wxUSE_GIF && wxUSE_TIMER
     wxGIFDecoder       *m_gifDecoder;
@@ -343,15 +356,19 @@
 
 wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
                                  wxFSFile *input,
-                                 int w, int h, double scale, int align,
+                                 const wxHtmlTag& tag, double scale, int align,
                                  const wxString& mapname) : wxHtmlCell()
 {
     m_windowIface = windowIface;
     m_scale = scale;
+	m_Align = align;
     m_showFrame = false;
     m_bitmap = NULL;
-    m_bmpW = w;
-    m_bmpH = h;
+    m_WidthFloat = wxDefaultCoord; m_WidthFloatUnits = 0; //default
+    m_HeightFloat = wxDefaultCoord; m_HeightFloatUnits = 0; // default
+	SetWidthFloat(tag, scale);
+	SetHeightFloat(tag, scale);
+
     m_imageMap = NULL;
     m_mapName = mapname;
     SetCanLiveOnPagebreak(false);
@@ -362,7 +379,7 @@
     m_nCurrFrame = 0;
 #endif
 
-    if ( m_bmpW && m_bmpH )
+    if ( m_WidthFloat!= 0  && m_HeightFloat != 0 )
     {
         if ( input )
         {
@@ -408,77 +425,80 @@
 #endif // wxUSE_GIF && wxUSE_TIMER
                 {
                     wxImage image(*s, wxBITMAP_TYPE_ANY);
-                    if ( image.Ok() )
                         SetImage(image);
                 }
             }
         }
-        else // input==NULL, use "broken image" bitmap
-        {
-            if ( m_bmpW == wxDefaultCoord && m_bmpH == wxDefaultCoord )
-            {
-                m_bmpW = 29;
-                m_bmpH = 31;
-            }
-            else
-            {
-                m_showFrame = true;
-                if ( m_bmpW == wxDefaultCoord ) m_bmpW = 31;
-                if ( m_bmpH == wxDefaultCoord ) m_bmpH = 33;
-            }
-            m_bitmap =
-                new wxBitmap(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
-        }
+		else 
+		{
+			// missing input file : display broken image
+			SetImage(wxNullImage);
+		}
     }
     //else: ignore the 0-sized images used sometimes on the Web pages
+}
 
-    m_Width = (int)(scale * (double)m_bmpW);
-    m_Height = (int)(scale * (double)m_bmpH);
+// duplicated from wxHtmlContainerCell
+void wxHtmlImageCell::SetWidthFloat(const wxHtmlTag& tag, double pixel_scale)
+{
+    if (tag.HasParam(wxT("WIDTH")))
+    {
+        int wdi;
+        wxString wd = tag.GetParam(wxT("WIDTH"));
 
-    switch (align)
+        if (wd[wd.length()-1] == wxT('%'))
+        {
+            wxSscanf(wd.c_str(), wxT("%i%%"), &wdi);
+            SetWidthFloat(wdi, wxHTML_UNITS_PERCENT);
+        }
+        else
+        {
+            wxSscanf(wd.c_str(), wxT("%i"), &wdi);
+            SetWidthFloat((int)(pixel_scale * (double)wdi), wxHTML_UNITS_PIXELS);
+        }
+		m_LastLayout = -1;
+    } 
+}
+
+// could be in wxHtmlContainerCell
+void wxHtmlImageCell::SetHeightFloat(const wxHtmlTag& tag, double pixel_scale)
+{
+    if (tag.HasParam(wxT("HEIGHT")))
     {
-        case wxHTML_ALIGN_TOP :
-            m_Descent = m_Height;
-            break;
-        case wxHTML_ALIGN_CENTER :
-            m_Descent = m_Height / 2;
-            break;
-        case wxHTML_ALIGN_BOTTOM :
-        default :
-            m_Descent = 0;
-            break;
-    }
- }
+        int wdi;
+        wxString wd = tag.GetParam(wxT("HEIGHT"));
 
+        if (wd[wd.length()-1] == wxT('%'))
+        {
+            wxSscanf(wd.c_str(), wxT("%i%%"), &wdi);
+            SetHeightFloat(wdi, wxHTML_UNITS_PERCENT);
+        }
+        else
+        {
+            wxSscanf(wd.c_str(), wxT("%i"), &wdi);
+            SetHeightFloat((int)(pixel_scale * (double)wdi), wxHTML_UNITS_PIXELS);
+        }
+        m_LastLayout = -1;
+    } 
+}
+
 void wxHtmlImageCell::SetImage(const wxImage& img)
 {
 #if !defined(__WXMSW__) || wxUSE_WXDIB
     if ( img.Ok() )
     {
         delete m_bitmap;
-
-        int ww, hh;
-        ww = img.GetWidth();
-        hh = img.GetHeight();
-
-        if ( m_bmpW == wxDefaultCoord )
-            m_bmpW = ww;
-        if ( m_bmpH == wxDefaultCoord )
-            m_bmpH = hh;
-
-        // Only scale the bitmap at the rendering stage,
-        // so we don't lose quality twice
-/*
-        if ((m_bmpW != ww) || (m_bmpH != hh))
-        {
-            wxImage img2 = img.Scale(m_bmpW, m_bmpH);
-            m_bitmap = new wxBitmap(img2);
-        }
-        else
-*/
-            m_bitmap = new wxBitmap(img);
+        m_bitmap = new wxBitmap(img);
+    } 
+	else 
+    {
+		// always show a frame around broken image
+		m_showFrame = true;            
+		m_bitmap =
+            new wxBitmap(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
     }
 #endif
+	UpdateImageSize();
 }
 
 #if wxUSE_GIF && wxUSE_TIMER
@@ -531,9 +551,78 @@
     timer->Start(delay, true);
 }
 
+
+void wxHtmlImageCell::UpdateImageSize(int w /*= 0*/){
+	if(m_LastLayout == w)
+		return;
+	if(m_bitmap){
+	
+		int ww, hh;
+		ww = m_bitmap->GetWidth();
+		hh = m_bitmap->GetHeight();
+		
+		switch(m_WidthFloatUnits)
+		{
+		case wxHTML_UNITS_PERCENT:	// percent of available space
+			if(w > 0 )
+			{
+				if (m_WidthFloat < 0) m_Width = (100 + m_WidthFloat) * w / 100;
+				else m_Width = (int)(m_WidthFloat * w / 100.0);
+			}
+			else
+			{
+				m_Width = (int)(ww * m_scale); // use image size
+			}
+			break;
+		case wxHTML_UNITS_PIXELS:
+			if (m_WidthFloat < 0) m_WidthFloat =  -m_WidthFloat;
+			m_Width = m_WidthFloat;
+			break;
+		default:					// use image size
+			m_Width = (int)(ww * m_scale);
+			break;
+		}
+
+		switch(m_HeightFloatUnits)
+		{
+		case wxHTML_UNITS_PIXELS:	// pixel fixed
+			if (m_HeightFloat < 0) m_HeightFloat = -m_HeightFloat;
+			m_Height = (int)(m_HeightFloat);
+			if (m_WidthFloatUnits == 0) // adjust default width to preserve proportion
+				m_Width = (int)(m_HeightFloat * ww / (double)hh);
+			break;
+		case wxHTML_UNITS_PERCENT: // not handled, do has default
+		default:
+			m_Height = (int)((double)m_Width * (double)hh / (double)ww);
+			break;
+		}
+	}
+	// compute descent with the new height
+	switch (m_Align) 
+	{
+		case wxHTML_ALIGN_TOP :
+			m_Descent = m_Height;
+			break;
+		case wxHTML_ALIGN_CENTER :
+			m_Descent = m_Height / 2;
+			break;
+		case wxHTML_ALIGN_BOTTOM :
+		default :
+			m_Descent = 0;
+			break;
+	}
+	m_LastLayout = w;
+}
+
+
 void wxHtmlImageCell::Layout(int w)
 {
     wxHtmlCell::Layout(w);
+
+	if(w != m_LastLayout){
+		UpdateImageSize(w);
+	}
+
     m_physX = m_physY = wxDefaultCoord;
 }
 
@@ -558,7 +647,7 @@
         dc.SetBrush(*wxTRANSPARENT_BRUSH);
         dc.SetPen(*wxBLACK_PEN);
         dc.DrawRectangle(x + m_PosX, y + m_PosY, m_Width, m_Height);
-        x++, y++;
+        x+= 2.0 * m_scale, y+= 2.0 * m_scale; // add a one pixel space between frame and broken image
     }
     if ( m_bitmap )
     {
@@ -566,17 +655,26 @@
         // and height, so we only do the scaling once.
         double imageScaleX = 1.0;
         double imageScaleY = 1.0;
-        if (m_bmpW != m_bitmap->GetWidth())
-            imageScaleX = (double) m_bmpW / (double) m_bitmap->GetWidth();
-        if (m_bmpH != m_bitmap->GetHeight())
-            imageScaleY = (double) m_bmpH / (double) m_bitmap->GetHeight();
-
+		if (!m_showFrame){
+			if (m_Width != m_bitmap->GetWidth())
+				imageScaleX = (double) m_Width / (double) m_bitmap->GetWidth();
+			if (m_Height != m_bitmap->GetHeight())
+				imageScaleY = (double) m_Height / (double) m_bitmap->GetHeight();
+		} 
+		else  
+		{
+			imageScaleX = m_scale * 0.5;
+			imageScaleY = m_scale * 0.5; 
+		}
         double us_x, us_y;
         dc.GetUserScale(&us_x, &us_y);
-        dc.SetUserScale(us_x * m_scale * imageScaleX, us_y * m_scale * imageScaleY);
+        dc.SetUserScale(us_x * imageScaleX, us_y * imageScaleY);
 
-        dc.DrawBitmap(*m_bitmap, (int) ((x + m_PosX) / (m_scale*imageScaleX)),
-                                 (int) ((y + m_PosY) / (m_scale*imageScaleY)), true);
+		// positioning is not perfect for stretched image because of
+		// integer coordinate
+        dc.DrawBitmap(*m_bitmap, (int) ((x + m_PosX) / (imageScaleX)),
+                                 (int) ((y + m_PosY) / (imageScaleY)), true);
+
         dc.SetUserScale(us_x, us_y);
     }
 }
@@ -612,7 +710,6 @@
 }
 
 
-
 //--------------------------------------------------------------------------------
 // tag handler
 //--------------------------------------------------------------------------------
@@ -624,20 +721,15 @@
     {
         if (tag.GetName() == wxT("IMG"))
         {
-            if (tag.HasParam(wxT("SRC")))
-            {
-                int w = wxDefaultCoord, h = wxDefaultCoord;
                 int al;
-                wxFSFile *str;
+                wxFSFile *str = NULL; // render malformed <img> tag without src nevertheless
                 wxString tmp = tag.GetParam(wxT("SRC"));
                 wxString mn = wxEmptyString;
 
-                str = m_WParser->OpenURL(wxHTML_URL_IMAGE, tmp);
+            if (tag.HasParam(wxT("SRC"))) 
+				str = m_WParser->OpenURL(wxHTML_URL_IMAGE, tmp);
+            
 
-                if (tag.HasParam(wxT("WIDTH")))
-                    tag.GetParamAsInt(wxT("WIDTH"), &w);
-                if (tag.HasParam(wxT("HEIGHT")))
-                    tag.GetParamAsInt(wxT("HEIGHT"), &h);
                 al = wxHTML_ALIGN_BOTTOM;
                 if (tag.HasParam(wxT("ALIGN")))
                 {
@@ -658,7 +750,7 @@
                 }
                 wxHtmlImageCell *cel = new wxHtmlImageCell(
                                           m_WParser->GetWindowInterface(),
-                                          str, w, h,
+                                          str, tag,
                                           m_WParser->GetPixelScale(),
                                           al, mn);
                 m_WParser->ApplyStateToCell(cel);
@@ -666,7 +758,6 @@
                 m_WParser->GetContainer()->InsertCell(cel);
                 if (str)
                     delete str;
-            }
         }
         if (tag.GetName() == wxT("MAP"))
         {
Index: C:/lhu/libsvc6/wxWidgets-trunk/docs/doxygen/overviews/html.h
===================================================================
--- C:/lhu/libsvc6/wxWidgets-trunk/docs/doxygen/overviews/html.h	(revision 61310)
+++ C:/lhu/libsvc6/wxWidgets-trunk/docs/doxygen/overviews/html.h	(working copy)
@@ -526,8 +526,8 @@
 H6
 I
 IMG             SRC=[url]
-                WIDTH=[pixels]
-                HEIGHT=[pixels]
+                WIDTH=[percent|pixels]
+                HEIGHT=[percent|pixels]
                 ALIGN=TEXTTOP
                 ALIGN=CENTER
                 ALIGN=ABSCENTER

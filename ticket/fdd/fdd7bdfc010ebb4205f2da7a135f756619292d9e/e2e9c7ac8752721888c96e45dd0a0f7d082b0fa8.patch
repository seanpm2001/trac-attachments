Index: wxWidgets-2.8/src/msw/ole/droptgt.cpp
===================================================================
--- wxWidgets-2.8/src/msw/ole/droptgt.cpp	(revision 56135)
+++ wxWidgets-2.8/src/msw/ole/droptgt.cpp	(working copy)
@@ -198,6 +198,10 @@
     m_pIDataObject = pIDataSource;
     m_pIDataObject->AddRef();
 
+    // hookup the data source so the drop target can query the data in any of
+    // the callback functions.
+    m_pTarget->SetDataSource(m_pIDataObject);
+
     // we need client coordinates to pass to wxWin functions
     if ( !ScreenToClient(m_hwnd, (POINT *)&pt) )
     {
@@ -268,6 +272,9 @@
   // remove the UI feedback
   m_pTarget->OnLeave();
 
+  // remove the data source from the drop target
+  m_pTarget->SetDataSource(NULL);
+
   // release the held object
   RELEASE_AND_NULL(m_pIDataObject);
 
@@ -283,17 +290,13 @@
 //           [in] POINTL       pt               where the drop occurred?
 //           [ouy]DWORD       *pdwEffect        operation effect
 // Notes   :
-STDMETHODIMP wxIDropTarget::Drop(IDataObject *pIDataSource,
+STDMETHODIMP wxIDropTarget::Drop(IDataObject *WXUNUSED(pIDataSource),
                                  DWORD        grfKeyState,
                                  POINTL       pt,
                                  DWORD       *pdwEffect)
 {
     wxLogTrace(wxTRACE_OleCalls, wxT("IDropTarget::Drop"));
 
-    // TODO I don't know why there is this parameter, but so far I assume
-    //      that it's the same we've already got in DragEnter
-    wxASSERT( m_pIDataObject == pIDataSource );
-
     // we need client coordinates to pass to wxWin functions
     if ( !ScreenToClient(m_hwnd, (POINT *)&pt) )
     {
@@ -302,10 +305,6 @@
 
     // first ask the drop target if it wants data
     if ( m_pTarget->OnDrop(pt.x, pt.y) ) {
-        // it does, so give it the data source
-        m_pTarget->SetDataSource(pIDataSource);
-
-        // and now it has the data
         wxDragResult rc = ConvertDragEffectToResult(
             GetDropEffect(grfKeyState, m_pTarget->GetDefaultAction(), *pdwEffect));
         rc = m_pTarget->OnData(pt.x, pt.y, rc);
@@ -337,7 +336,7 @@
 // ----------------------------------------------------------------------------
 
 wxDropTarget::wxDropTarget(wxDataObject *dataObj)
-            : wxDropTargetBase(dataObj)
+            : wxDropTargetBase(dataObj), m_pIDataSource(NULL)
 {
     // create an IDropTarget implementation which will notify us about d&d
     // operations.

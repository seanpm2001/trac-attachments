 samples/xrc/xrcdemo.cpp | 69 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/samples/xrc/xrcdemo.cpp b/samples/xrc/xrcdemo.cpp
index 3351d29..8f24673 100644
--- a/samples/xrc/xrcdemo.cpp
+++ b/samples/xrc/xrcdemo.cpp
@@ -22,6 +22,7 @@
 #ifndef WX_PRECOMP
     #include "wx/wx.h"
 #endif
+#include "wx/filesys.h"
 
 //-----------------------------------------------------------------------------
 // Header of this .cpp file
@@ -65,12 +66,80 @@ IMPLEMENT_APP(MyApp)
 // Public methods
 //-----------------------------------------------------------------------------
 
+class MyHandler : public wxFileSystemHandler
+{
+public:
+    static wxString GetRightLocation(const wxString& location)
+    {
+        return wxFileSystemHandler::GetRightLocation(location);
+    }
+};
+
 // 'Main program' equivalent: the program execution "starts" here
 bool MyApp::OnInit()
 {
     if ( !wxApp::OnInit() )
         return false;
 
+    struct Test {
+        const wxString input, expected;
+    };
+    const static Test fileTests[] = {
+#ifdef __WXMSW__
+        {_T("\\\\host\\C$\\path to\\file.txt"), _T("file://host/C$/path%20to/file.txt")},
+        {_T("C:\\path to\\file.txt"), _T("file:///C:/path%20to/file.txt")}
+#else
+        {_T("/etc/fsconf"), _T("file:///etc/fsconf")}
+#endif
+    };
+    int i = WXSIZEOF(fileTests);
+    while (i-- > 0)
+    {
+        wxFileName fileName(fileTests[i].input);
+        wxString url = wxFileSystem::FileNameToURL(fileName);
+        const static wxString prefix = _T("file://");
+        if (url != fileTests[i].expected)
+            wxMessageBox(_T("File:\t") + fileTests[i].input
+                + _T("\nExpected:\n") + fileTests[i].expected
+                + _T("\nURL:\t") + url);
+
+        fileName = wxFileSystem::URLToFileName(url);
+        if (fileName.GetFullPath() != fileTests[i].input)
+            wxMessageBox(_T("Expecting:\t") + fileTests[i].input
+                + _T("\nExpected:\n") + fileTests[i].input
+                + _T("\nGot:\t") + fileName.GetFullPath());
+    }
+    const static Test rightTests[] = {
+        {_T("\\\\host\\C$\\path to\\myfile.txt"), _T("\\\\host\\C$\\path to\\myfile.txt")},
+        {_T("C:\\path to\\myfile.txt"), _T("C:\\path to\\myfile.txt")},
+        {_T("file:///etc/fsconf"), _T("/etc/fsconf")},
+        {_T("file://etc/fsconf"), _T("//etc/fsconf")},
+        {_T("file:/etc/fsconf"), _T("/etc/fsconf")},
+        {_T("file:///subdir/archive.tar.gz#tar:/README.txt#anchor"), _T("/README.txt")},
+        {_T("file://subdir/archive.tar.gz#tar:/README.txt"), _T("/README.txt")},
+        {_T("file:/subdir/archive.tar.gz#tar:/README.txt"), _T("/README.txt")},
+        {_T("file:subdir/archive.tar.gz#tar:/README.txt"), _T("/README.txt")},
+        {_T("file:///subdir/archive.tar.gz#tar:/README.txt#anchor"), _T("/README.txt")},
+        {_T("file://subdir/archive.tar.gz#tar:/README.txt#anchor"), _T("/README.txt")},
+        {_T("file:/subdir/archive.tar.gz#tar:/README.txt#anchor"), _T("/README.txt")},
+        {_T("file:subdir/archive.tar.gz#tar:/README.txt#anchor"), _T("/README.txt")},
+        {_T("file://host/C:/path%20to/file.txt"), _T("//host/C:/path%20to/file.txt")},
+        {_T("file:///C:/path%20to/file.txt"), _T("C:/path%20to/file.txt")},
+        {_T("file:///C"), _T("/C")},
+        {_T("file://C"), _T("//C")},
+        {_T("file:/C"), _T("/C")},
+        {_T("file:C"), _T("C")}
+    };
+    i = WXSIZEOF(rightTests);
+    while (i-- > 0)
+    {
+        wxString right = MyHandler::GetRightLocation(rightTests[i].input);
+        if (right != rightTests[i].expected)
+            wxMessageBox(_T("Location:\t") + rightTests[i].input
+                + _T("\nExpected:\t") + rightTests[i].expected
+                + _T("\nRight:\t") + right);
+    }
+
     // If there is any of a certain format of image in the xrcs, then first
     // load a handler for that image type. This example uses XPMs & a gif, but
     // if you want PNGs, then add a PNG handler, etc. See wxImage::AddHandler()

Index: src/xrc/xh_aui.cpp
===================================================================
--- src/xrc/xh_aui.cpp	(revisione 0)
+++ src/xrc/xh_aui.cpp	(revisione 0)
@@ -0,0 +1,215 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_aui.h
+// Purpose:     Implementation of wxAUI XRC handler.
+// Author:      Andrea Zanellato
+// Created:     2011-09-18
+// RCS-ID:      $Id: $
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/xrc/xh_aui.h"
+#include "wx/aui/framemanager.h"
+
+wxIMPLEMENT_DYNAMIC_CLASS(wxAuiXmlHandler, wxXmlResourceHandler)
+
+wxAuiXmlHandler::wxAuiXmlHandler()
+                : wxXmlResourceHandler(),
+                  m_manager(NULL),
+                  m_window(NULL),
+                  m_isInside(false)
+{
+}
+
+wxAuiManager *wxAuiXmlHandler::GetAuiManager( wxWindow *managed )
+{
+    for ( unsigned int i = 0; i < m_managers.GetCount(); i++ )
+    {
+        wxAuiManager *mgr = m_managers.Item( i );
+        if ( mgr && ( mgr->GetManagedWindow() == managed ) )
+            return mgr;
+    }
+    return NULL;
+}
+
+void wxAuiXmlHandler::OnManagedWindowClose( wxWindowDestroyEvent &event )
+{
+    wxWindow *window = wxDynamicCast( event.GetEventObject(), wxWindow );
+    for ( unsigned int i = 0; i < m_managers.GetCount(); i++ )
+    {
+        wxAuiManager *mgr = m_managers.Item( i );
+        if ( mgr && ( mgr->GetManagedWindow() == window ) )
+        {
+            mgr->UnInit();
+            m_managers.Remove( mgr );
+            break;
+        }
+    }
+    event.Skip();
+}
+
+wxObject *wxAuiXmlHandler::DoCreateResource()
+{
+    if ( m_class == "wxAuiManager" )
+    {
+        wxAuiManager *manager = NULL;
+
+        wxXmlNode *windowNode = m_node->GetParent();
+        while ( windowNode )
+        {
+            if ( ( windowNode->GetName() == "object" || windowNode->GetName() == "object_ref") )
+            {
+                wxString classname = "class";
+                wxString name      = "name";
+
+                if ( windowNode->HasAttribute( classname ) &&
+                     windowNode->HasAttribute( name ) )
+                {
+                    classname = windowNode->GetAttribute( classname );
+                    name      = windowNode->GetAttribute( name );
+
+                    if ( classname != "wxAuiPaneInfo" &&
+                         classname != "wxStatusBar"   &&
+                         classname != "wxToolBar"     &&
+                         classname != "wxMenuBar" )
+                    {
+                        // Using XRCID here causes undefined references when linking
+                        wxWindow *window = wxWindow::FindWindowByName( name );
+
+                        if ( window )
+                        {
+                            bool          old_ins = m_isInside;
+                            wxAuiManager *old_mgr = m_manager;
+                            wxWindow     *old_win = m_window;
+
+                            manager    = new wxAuiManager();
+                            m_window   = window;
+                            m_manager  = manager;
+                            m_isInside = true;
+
+                            m_managers.Add( manager );
+                            manager->SetManagedWindow( window );
+                            window->Bind( wxEVT_DESTROY, &wxAuiXmlHandler::OnManagedWindowClose, this );
+
+                            CreateChildren( manager );
+
+                            if ( HasParam("perspective") )
+                                manager->LoadPerspective( GetParamValue("perspective") );
+
+                            m_window   = old_win;
+                            m_manager  = old_mgr;
+                            m_isInside = old_ins;
+                        }
+                    }
+                }
+            }
+            windowNode = windowNode->GetNext();
+        }
+
+        return manager;
+    }
+    else if ( m_class == "wxAuiPaneInfo" )
+    {
+        wxXmlNode *node   = GetParamNode("object");
+        wxWindow  *window = NULL;
+
+        if ( !node )
+            node = GetParamNode("object_ref");
+
+        if ( node )
+        {
+            bool old_ins = m_isInside;
+            m_isInside = false;
+
+            wxObject *object = CreateResFromNode( node, m_window, NULL );
+
+            m_isInside = old_ins;
+            window = wxDynamicCast( object, wxWindow );
+
+            if ( window == NULL && object != NULL )
+            {
+                ReportError( node, _("wxAuiPaneInfo child must be a window.") );
+            }
+        }
+
+        if ( window )
+        {
+            wxAuiPaneInfo paneInfo = wxAuiPaneInfo();
+
+            wxString name = GetName();          paneInfo.Name( name );
+// Caption
+            if ( HasParam("caption") )          paneInfo.Caption( GetText("caption") );
+            if ( HasParam("caption_visible") )  paneInfo.CaptionVisible( GetBool("caption_visible") );
+// Buttons
+            if ( HasParam("close_button") )     paneInfo.CloseButton( GetBool("close_button") );
+            if ( HasParam("minimize_button") )  paneInfo.MinimizeButton( GetBool("minimize_button") );
+            if ( HasParam("maximize_button") )  paneInfo.MaximizeButton( GetBool("maximize_button") );
+            if ( HasParam("pin_button") )       paneInfo.PinButton( GetBool("pin_button") );
+            if ( HasParam("gripper") )          paneInfo.Gripper( GetBool("gripper") );
+// Appearance
+            if ( HasParam("pane_border") )      paneInfo.PaneBorder( GetBool("pane_border") );
+// State
+            if ( HasParam("dock") )             paneInfo.Dock();
+            else if ( HasParam("float") )       paneInfo.Float();
+
+// Dockable Directions
+            if ( HasParam("top_dockable") )     paneInfo.TopDockable( GetBool("top_dockable") );
+            if ( HasParam("bottom_dockable") )  paneInfo.BottomDockable( GetBool("bottom_dockable") );
+            if ( HasParam("left_dockable") )    paneInfo.LeftDockable( GetBool("left_dockable") );
+            if ( HasParam("right_dockable") )   paneInfo.RightDockable( GetBool("right_dockable") );
+// Behaviours
+            if ( HasParam("dock_fixed") )       paneInfo.DockFixed( GetBool("dock_fixed") );
+            if ( HasParam("resizable") )        paneInfo.Resizable( GetBool("resizable") );
+            if ( HasParam("movable") )          paneInfo.Movable( GetBool("movable") );
+            if ( HasParam("floatable") )        paneInfo.Floatable( GetBool("floatable") );
+// Sizes
+            if ( HasParam("floating_size") )    paneInfo.FloatingSize( GetSize("floating_size") );
+            if ( HasParam("min_size") )         paneInfo.MinSize( GetSize("min_size") );
+            if ( HasParam("max_size") )         paneInfo.MaxSize( GetSize("max_size") );
+            if ( HasParam("best_size") )        paneInfo.BestSize( GetSize("best_size") );
+// Positions
+            if ( HasParam("row") )              paneInfo.Row( GetLong("row") );
+            if ( HasParam("layer") )            paneInfo.Layer( GetLong("layer") );
+            if ( HasParam("default_pane") )     paneInfo.DefaultPane();
+            else if( HasParam("toolbar_pane") ) paneInfo.ToolbarPane();
+
+// Directions - CenterPane()/CentrePane != Center()/Centre()
+            if ( HasParam("center_pane") ||
+                 HasParam("centre_pane") )      paneInfo.CenterPane();
+            if ( HasParam("direction") )        paneInfo.Direction( GetLong("direction") );
+            else if ( HasParam("top") )         paneInfo.Top();
+            else if ( HasParam("bottom") )      paneInfo.Bottom();
+            else if ( HasParam("left") )        paneInfo.Left();
+            else if ( HasParam("right") )       paneInfo.Right();
+            else if ( HasParam("center") ||
+                      HasParam("centre") )      paneInfo.Center();
+
+            m_manager->AddPane( window, paneInfo );
+            m_manager->Update();
+        }
+        else
+        {
+            ReportError(_("No wxWindow derived class object specified inside wxAuiPaneInfo.") );
+        }
+        return window;
+    }
+    return NULL;
+}
+
+bool wxAuiXmlHandler::CanHandle( wxXmlNode *node )
+{
+    return (!m_isInside && IsOfClass( node, "wxAuiManager")) ||
+            (m_isInside && IsOfClass( node, "wxAuiPaneInfo"));
+}
+
+#endif // wxUSE_XRC && wxUSE_AUI
+
Index: include/wx/xrc/xh_aui.h
===================================================================
--- include/wx/xrc/xh_aui.h	(revisione 0)
+++ include/wx/xrc/xh_aui.h	(revisione 0)
@@ -0,0 +1,49 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_aui.h
+// Purpose:     XRC resource handler for wxAUI
+// Author:      Andrea Zanellato
+// Created:     2011-09-18
+// RCS-ID:      $Id: $
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_AUI_H_
+#define _WX_XH_AUI_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_AUI
+
+class  WXDLLIMPEXP_FWD_AUI wxAuiManager;
+#include "wx/dynarray.h"
+
+WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiManager *, wxAuiManagerPtrArray,
+                                                class WXDLLIMPEXP_AUI);
+
+class WXDLLIMPEXP_AUI wxAuiXmlHandler : public wxXmlResourceHandler
+{
+    wxDECLARE_DYNAMIC_CLASS(wxAuiXmlHandler);
+
+public:
+    wxAuiXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+    // Returns the wxAuiManager for the specified window
+    wxAuiManager *GetAuiManager(wxWindow *managed);
+
+private:
+    // Used to UnInit() the wxAuiManager before destroying its managed window
+    void OnManagedWindowClose(wxWindowDestroyEvent &event);
+
+    wxAuiManagerPtrArray m_managers; // wxAuiManagers created in this handler
+    wxAuiManager *m_manager; // Current wxAuiManager
+    wxWindow *m_window; // Current managed wxWindow
+    bool m_isInside; // Are we handling a wxAuiManager or panes inside it?
+};
+
+#endif //wxUSE_XRC && wxUSE_AUI
+
+#endif //_WX_XH_AUI_H_
+
Index: configure.in
===================================================================
--- configure.in	(revisione 69229)
+++ configure.in	(copia locale)
@@ -7304,6 +7304,9 @@
         AC_DEFINE(wxUSE_XRC)
         USE_XRC=1
         SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc"
+        if test "$wxUSE_AUI" = "yes"; then
+            SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc/aui"
+        fi
     fi
 fi
 
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revisione 69229)
+++ build/bakefiles/files.bkl	(copia locale)
@@ -3625,6 +3625,7 @@
     src/aui/auibook.cpp
     src/aui/auibar.cpp
     src/aui/tabmdi.cpp
+    src/xrc/xh_aui.cpp
 </set>
 <set var="AUI_HDR" hints="files">
     wx/aui/framemanager.h
@@ -3634,6 +3635,7 @@
     wx/aui/auibar.h
     wx/aui/tabmdi.h
     wx/aui/aui.h
+    wx/xrc/xh_aui.h
 </set>
 
 <!-- ====================================================================== -->
Index: samples/xrc/aui/auidemoxrc.cpp
===================================================================
--- samples/xrc/aui/auidemoxrc.cpp	(revisione 0)
+++ samples/xrc/aui/auidemoxrc.cpp	(revisione 0)
@@ -0,0 +1,97 @@
+//-----------------------------------------------------------------------------
+// Name:        auidemoxrc.cpp
+// Purpose:     wxXRC AUI Sample: Main application file
+// Author:      Andrea Zanellato (zanellato.andrea@gmail.com)
+// RCS-ID:      $Id: $
+// Copyright:   (c) wxWidgets Team
+// Licence:     wxWindows licence
+//-----------------------------------------------------------------------------
+
+// For compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+// For all others, include the necessary headers (this file is usually all you
+// need because it includes almost all "standard" wxWidgets headers)
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#include "wx/xrc/xh_aui.h"
+#include "wx/aui/framemanager.h"
+#include "wx/filefn.h"
+#include "wx/stdpaths.h"
+
+//-----------------------------------------------------------------------------
+// MyAuiFrame
+//-----------------------------------------------------------------------------
+
+class MyAuiFrame : public wxFrame
+{
+public:
+    MyAuiFrame( wxWindow* parent = NULL );
+
+private:
+    void OnExit( wxCommandEvent & );
+    void OnAbout( wxCommandEvent & );
+
+    DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE( MyAuiFrame, wxFrame )
+    EVT_MENU( wxID_EXIT, MyAuiFrame::OnExit )
+    EVT_MENU( wxID_ABOUT, MyAuiFrame::OnAbout )
+END_EVENT_TABLE()
+
+MyAuiFrame::MyAuiFrame( wxWindow* parent )
+{
+    wxFileName exeName = wxStandardPaths::Get().GetExecutablePath();
+    wxString path =  exeName.GetPath();
+    wxSetWorkingDirectory( path );
+
+    wxXmlResource::Get()->InitAllHandlers();
+    wxXmlResource::Get()->AddHandler( new wxAuiXmlHandler() );
+    wxXmlResource::Get()->Load("auidemo.xrc");
+    wxXmlResource::Get()->LoadFrame( this, parent, "aui_frame" );
+}
+
+void MyAuiFrame::OnExit( wxCommandEvent & )
+{
+    Close();
+}
+
+void MyAuiFrame::OnAbout( wxCommandEvent & )
+{
+    wxString msg = _("This is the about dialog of wxXRC wxAUI demo.") + "\n" +
+                    _("Welcome to") + " " + wxVERSION_STRING;
+
+    wxMessageBox(msg, _("About XRC AUI Demo"), wxOK | wxICON_INFORMATION, this);
+}
+
+//-----------------------------------------------------------------------------
+// XRCAUIDemo Main Application
+//-----------------------------------------------------------------------------
+
+class XRCAUIDemo : public wxApp
+{
+public:
+    virtual bool OnInit();
+};
+
+IMPLEMENT_APP( XRCAUIDemo )
+
+bool XRCAUIDemo::OnInit()
+{
+    if ( !wxApp::OnInit() )
+        return false;
+
+    MyAuiFrame *frame = new MyAuiFrame();
+
+    frame->Show( true );
+
+    return true;
+}
+
Index: samples/xrc/aui/auidemoxrc.bkl
===================================================================
--- samples/xrc/aui/auidemoxrc.bkl	(revisione 0)
+++ samples/xrc/aui/auidemoxrc.bkl	(revisione 0)
@@ -0,0 +1,22 @@
+<?xml version="1.0" ?>
+<makefile>
+    <include file="../../../build/bakefiles/common_samples.bkl"/>
+    <exe id="auidemoxrc" template="wx_sample" template_append="wx_append">
+        <sources>
+            auidemoxrc.cpp
+        </sources>
+        <wx-lib>aui</wx-lib>
+        <wx-lib>xrc</wx-lib>
+        <wx-lib>adv</wx-lib>
+        <wx-lib>core</wx-lib>
+        <wx-lib>xml</wx-lib>
+        <wx-lib>base</wx-lib>
+    </exe>
+    <wx-data id="data">
+        <dstdir>$(BUILDDIR)</dstdir>
+        <srcdir>$(SRCDIR)</srcdir>
+        <files>
+            auidemo.xrc
+        </files>
+    </wx-data>
+</makefile>
Index: samples/xrc/aui/auidemo.xrc
===================================================================
--- samples/xrc/aui/auidemo.xrc	(revisione 0)
+++ samples/xrc/aui/auidemo.xrc	(revisione 0)
@@ -0,0 +1,162 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
+<resource xmlns="http://www.wxwindows.org/wxxrc" version="2.3.0.1">
+    <object class="wxFrame" name="aui_frame">
+        <style>wxCLOSE_BOX|wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL</style>
+        <size>500,300</size>
+        <title>XRC AUI Demo</title>
+        <centered>1</centered>
+        <object class="wxMenuBar" name="menuBar">
+            <label>MainMenu</label>
+            <object class="wxMenu" name="menuFile">
+                <label>_File</label>
+                <object class="wxMenuItem" name="wxID_EXIT">
+                    <label>E_xit\tAlt+X</label>
+                    <help>Close XRC AUI Demo Frame</help>
+                    <!--bitmap stock_id="wxART_QUIT"/-->
+                </object>
+            </object>
+            <object class="wxMenu" name="menuAbout">
+                <label>_About</label>
+                <object class="wxMenuItem" name="wxID_ABOUT">
+                    <label>About...\tF1</label>
+                    <help>About XRC AUI Demo...</help>
+                </object>
+            </object>
+        </object>
+        <object class="wxToolBar" name="ToolBar">
+            <style>wxTB_HORIZONTAL</style>
+            <packing>1</packing>
+            <separation>5</separation>
+            <object class="tool" name="wxID_NEW">
+                <label>New File (Ctrl+N)</label>
+                <tooltip>New File (Ctrl+N)</tooltip>
+                <longhelp>Create a new file.</longhelp>
+                <bitmap stock_id="wxART_NEW"/>
+            </object>
+            <object class="tool" name="wxID_OPEN">
+                <label>Open File (Ctrl+O)</label>
+                <tooltip>Open File (Ctrl+O)</tooltip>
+                <longhelp>Open an existing file.</longhelp>
+                <bitmap stock_id="wxART_FILE_OPEN"/>
+            </object>
+            <object class="tool" name="wxID_SAVE">
+                <label>Save File (Ctrl+S)</label>
+                <tooltip>Save File (Ctrl+S)</tooltip>
+                <longhelp>Save the current file.</longhelp>
+                <bitmap stock_id="wxART_FILE_SAVE"/>
+            </object>
+            <object class="separator" />
+            <object class="tool" name="wxID_UNDO">
+                <label>Undo</label>
+                <tooltip>Undo (Ctrl+Z)</tooltip>
+                <longhelp>Undo the last action.</longhelp>
+                <bitmap stock_id="wxART_UNDO"/>
+            </object>
+            <object class="tool" name="wxID_REDO">
+                <label>Redo (Ctrl+Y)</label>
+                <tooltip>Redo (Ctrl+Y)</tooltip>
+                <longhelp>Redo the last action that was undone.</longhelp>
+                <bitmap stock_id="wxART_REDO"/>
+            </object>
+            <object class="separator" />
+            <object class="tool" name="wxID_CUT">
+                <label>Cut (Ctrl+X)</label>
+                <tooltip>Cut (Ctrl+X)</tooltip>
+                <longhelp>Remove the selected text and place it on the clipboard.</longhelp>
+                <bitmap stock_id="wxART_CUT"/>
+            </object>
+            <object class="tool" name="wxID_COPY">
+                <label>Copy (Ctrl+C)</label>
+                <tooltip>Copy (Ctrl+C)</tooltip>
+                <longhelp>Copy the selected text to the clipboard.</longhelp>
+                <bitmap stock_id="wxART_COPY"/>
+            </object>
+            <object class="tool" name="wxID_PASTE">
+                <label>Paste (Ctrl+V)</label>
+                <tooltip>Paste (Ctrl+V)</tooltip>
+                <longhelp>Insert a text from the clipboard.</longhelp>
+                <bitmap stock_id="wxART_PASTE"/>
+            </object>
+        </object>
+        <!-- Without this panel wxAuiPaneInfo panes can't be dragged using the wxToolBar -->
+        <object class="wxPanel" name="aui_client_area">
+            <object class="wxAuiManager" name="AUIManager">
+                <object class="wxAuiPaneInfo" name="TreeViewPane">
+                    <caption>Tree View</caption>
+                    <left/>
+                    <close_button>0</close_button>
+                    <top_dockable>0</top_dockable>
+                    <bottom_dockable>0</bottom_dockable>
+                    <floating_size>150,300</floating_size>
+                    <min_size>90,-1</min_size>
+                    <layer>1</layer>
+                    <object class="wxTreeCtrl" name="TreeView"/>
+                </object>
+                <object class="wxAuiPaneInfo" name="EditorPane">
+                    <caption>Editor</caption>
+                    <center/>
+                    <close_button>0</close_button>
+                    <maximize_button>1</maximize_button>
+                    <dock_fixed>1</dock_fixed>
+                    <object class="wxNotebook" name="Editor">
+                        <object class="notebookpage">
+                            <label>File1</label>
+                            <bitmap stock_id="wxART_NORMAL_FILE"/>
+                            <object class="wxPanel" name="EditorPanel1">
+                                <style>wxTAB_TRAVERSAL</style>
+                                <size>500,300</size>
+                                <object class="wxBoxSizer">
+                                    <orient>wxVERTICAL</orient>
+                                    <object class="sizeritem">
+                                        <option>1</option>
+                                        <flag>wxEXPAND</flag>
+                                        <object class="wxTextCtrl" name="File1">
+                                            <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                            <value>Some useless text...</value>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                        <object class="notebookpage">
+                            <label>File2</label>
+                            <bitmap stock_id="wxART_NORMAL_FILE"/>
+                            <object class="wxPanel" name="EditorPanel2">
+                                <style>wxTAB_TRAVERSAL</style>
+                                <size>500,300</size>
+                                <object class="wxBoxSizer">
+                                    <orient>wxVERTICAL</orient>
+                                    <object class="sizeritem">
+                                        <option>1</option>
+                                        <flag>wxEXPAND</flag>
+                                        <object class="wxTextCtrl" name="File2">
+                                            <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                            <value>Other useless text...</value>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+                <object class="wxAuiPaneInfo" name="LogPane">
+                    <caption>Log</caption>
+                    <bottom/>
+                    <close_button>0</close_button>
+                    <left_dockable>0</left_dockable>
+                    <right_dockable>0</right_dockable>
+                    <min_size>-1,60</min_size>
+                    <floating_size>300,150</floating_size>
+                    <object class="wxTextCtrl" name="TextLog">
+                        <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                        <value>A fake log...</value>
+                    </object>
+                </object>
+            </object>
+        </object>
+        <object class="wxStatusBar" name="StatusBar">
+            <style>wxST_SIZEGRIP</style>
+            <fields>1</fields>
+        </object>
+    </object>
+</resource>

Index: src/xrc/xh_auinotbk.cpp
===================================================================
--- src/xrc/xh_auinotbk.cpp	(revisione 72804)
+++ src/xrc/xh_auinotbk.cpp	(copia locale)
@@ -1,119 +0,0 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        src/xrc/xh_auinotbk.cpp
-// Purpose:     XML resource handler for wxAuiNotebook
-// Author:      Steve Lamerton
-// Created:     2009-06-12
-// RCS-ID:      $Id$
-// Copyright:   (c) 2009 Steve Lamerton
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-// For compilers that support precompilation, includes "wx.h".
-#include "wx/wxprec.h"
-
-#ifdef __BORLANDC__
-    #pragma hdrstop
-#endif
-
-#if wxUSE_XRC && wxUSE_AUI
-
-#include "wx/xrc/xh_auinotbk.h"
-#include "wx/aui/auibook.h"
-
-wxIMPLEMENT_DYNAMIC_CLASS(wxAuiNotebookXmlHandler, wxXmlResourceHandler);
-
-wxAuiNotebookXmlHandler::wxAuiNotebookXmlHandler()
-    : wxXmlResourceHandler()
-{
-    XRC_ADD_STYLE(wxAUI_NB_DEFAULT_STYLE);
-    XRC_ADD_STYLE(wxAUI_NB_TAB_SPLIT);
-    XRC_ADD_STYLE(wxAUI_NB_TAB_MOVE);
-    XRC_ADD_STYLE(wxAUI_NB_TAB_EXTERNAL_MOVE);
-    XRC_ADD_STYLE(wxAUI_NB_TAB_FIXED_WIDTH);
-    XRC_ADD_STYLE(wxAUI_NB_SCROLL_BUTTONS);
-    XRC_ADD_STYLE(wxAUI_NB_WINDOWLIST_BUTTON);
-    XRC_ADD_STYLE(wxAUI_NB_CLOSE_BUTTON);
-    XRC_ADD_STYLE(wxAUI_NB_CLOSE_ON_ACTIVE_TAB);
-    XRC_ADD_STYLE(wxAUI_NB_CLOSE_ON_ALL_TABS);
-    XRC_ADD_STYLE(wxAUI_NB_TOP);
-    XRC_ADD_STYLE(wxAUI_NB_BOTTOM);
-
-    AddWindowStyles();
-}
-
-wxObject *wxAuiNotebookXmlHandler::DoCreateResource()
-{
-    if (m_class == wxT("notebookpage"))
-    {
-        wxXmlNode *anb = GetParamNode(wxT("object"));
-
-        if (!anb)
-            anb = GetParamNode(wxT("object_ref"));
-
-        if (anb)
-        {
-            bool old_ins = m_isInside;
-            m_isInside = false;
-            wxObject *item = CreateResFromNode(anb, m_notebook, NULL);
-            m_isInside = old_ins;
-            wxWindow *wnd = wxDynamicCast(item, wxWindow);
-
-            if (wnd)
-            {
-                if ( HasParam(wxT("bitmap")) )
-                {
-                    m_notebook->AddPage(wnd,
-                                        GetText(wxT("label")),
-                                        GetBool(wxT("selected")),
-                                        GetBitmap(wxT("bitmap"), wxART_OTHER));
-                }
-                else
-                {
-                    m_notebook->AddPage(wnd,
-                                        GetText(wxT("label")),
-                                        GetBool(wxT("selected")));
-                }
-            }
-            else
-            {
-                ReportError(anb, "notebookpage child must be a window");
-            }
-            return wnd;
-        }
-        else
-        {
-            ReportError("notebookpage must have a window child");
-            return NULL;
-        }
-    }
-    else
-    {
-        XRC_MAKE_INSTANCE(anb, wxAuiNotebook)
-
-        anb->Create(m_parentAsWindow,
-                    GetID(),
-                    GetPosition(),
-                    GetSize(),
-                    GetStyle(wxT("style")));
-
-        SetupWindow(anb);
-
-        wxAuiNotebook *old_par = m_notebook;
-        m_notebook = anb;
-        bool old_ins = m_isInside;
-        m_isInside = true;
-        CreateChildren(m_notebook, true/*only this handler*/);
-        m_isInside = old_ins;
-        m_notebook = old_par;
-
-        return anb;
-    }
-}
-
-bool wxAuiNotebookXmlHandler::CanHandle(wxXmlNode *node)
-{
-    return ((!m_isInside && IsOfClass(node, wxT("wxAuiNotebook"))) ||
-            (m_isInside && IsOfClass(node, wxT("notebookpage"))));
-}
-
-#endif // wxUSE_XRC && wxUSE_ANIMATIONCTRL
Index: src/xrc/xh_aui.cpp
===================================================================
--- src/xrc/xh_aui.cpp	(revisione 0)
+++ src/xrc/xh_aui.cpp	(revisione 0)
@@ -0,0 +1,500 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_aui.cpp
+// Purpose:     Implementation of wxAUI XRC handler.
+// Author:      Andrea Zanellato, Steve Lamerton (wxAuiNotebook)
+// Created:     2011-09-18
+// RCS-ID:      $Id$
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/xrc/xh_aui.h"
+#include "wx/aui/framemanager.h"
+#include "wx/aui/auibook.h"
+#include "wx/aui/auibar.h"
+
+wxIMPLEMENT_DYNAMIC_CLASS(wxAuiXmlHandler, wxXmlResourceHandler)
+
+wxAuiXmlHandler::wxAuiXmlHandler()
+                : wxXmlResourceHandler(),
+                  m_manager(NULL),
+                  m_window(NULL),
+                  m_notebook(NULL),
+                  m_toolbar(NULL),
+                  m_toolSize(wxDefaultSize),
+                  m_mgrInside(false),
+                  m_anbInside(false),
+                  m_atbInside(false)
+{
+    XRC_ADD_STYLE(wxAUI_MGR_ALLOW_ACTIVE_PANE);
+    XRC_ADD_STYLE(wxAUI_MGR_ALLOW_FLOATING);
+    XRC_ADD_STYLE(wxAUI_MGR_DEFAULT);
+    XRC_ADD_STYLE(wxAUI_MGR_HINT_FADE);
+    XRC_ADD_STYLE(wxAUI_MGR_LIVE_RESIZE);
+    XRC_ADD_STYLE(wxAUI_MGR_NO_VENETIAN_BLINDS_FADE);
+    XRC_ADD_STYLE(wxAUI_MGR_RECTANGLE_HINT);
+    XRC_ADD_STYLE(wxAUI_MGR_TRANSPARENT_DRAG);
+    XRC_ADD_STYLE(wxAUI_MGR_TRANSPARENT_HINT);
+    XRC_ADD_STYLE(wxAUI_MGR_VENETIAN_BLINDS_HINT);
+
+    XRC_ADD_STYLE(wxAUI_NB_DEFAULT_STYLE);
+    XRC_ADD_STYLE(wxAUI_NB_TAB_SPLIT);
+    XRC_ADD_STYLE(wxAUI_NB_TAB_MOVE);
+    XRC_ADD_STYLE(wxAUI_NB_TAB_EXTERNAL_MOVE);
+    XRC_ADD_STYLE(wxAUI_NB_TAB_FIXED_WIDTH);
+    XRC_ADD_STYLE(wxAUI_NB_SCROLL_BUTTONS);
+    XRC_ADD_STYLE(wxAUI_NB_WINDOWLIST_BUTTON);
+    XRC_ADD_STYLE(wxAUI_NB_CLOSE_BUTTON);
+    XRC_ADD_STYLE(wxAUI_NB_CLOSE_ON_ACTIVE_TAB);
+    XRC_ADD_STYLE(wxAUI_NB_CLOSE_ON_ALL_TABS);
+    XRC_ADD_STYLE(wxAUI_NB_TOP);
+    XRC_ADD_STYLE(wxAUI_NB_BOTTOM);
+
+    XRC_ADD_STYLE(wxAUI_TB_TEXT);
+    XRC_ADD_STYLE(wxAUI_TB_NO_TOOLTIPS);
+    XRC_ADD_STYLE(wxAUI_TB_NO_AUTORESIZE);
+    XRC_ADD_STYLE(wxAUI_TB_GRIPPER);
+    XRC_ADD_STYLE(wxAUI_TB_OVERFLOW);
+    XRC_ADD_STYLE(wxAUI_TB_VERTICAL);
+    XRC_ADD_STYLE(wxAUI_TB_HORZ_LAYOUT);
+    XRC_ADD_STYLE(wxAUI_TB_HORIZONTAL);
+    XRC_ADD_STYLE(wxAUI_TB_HORZ_TEXT);
+    XRC_ADD_STYLE(wxAUI_TB_DEFAULT_STYLE);
+
+    AddWindowStyles();
+}
+
+wxAuiManager *wxAuiXmlHandler::GetAuiManager( wxWindow *managed )
+{
+    for ( Managers::const_iterator it = m_managers.begin();
+          it != m_managers.end();
+          ++it )
+    {
+        wxAuiManager* const mgr = *it;
+        if ( mgr->GetManagedWindow() == managed )
+            return mgr;
+    }
+
+    return NULL;
+}
+
+void wxAuiXmlHandler::OnManagedWindowClose( wxWindowDestroyEvent &event )
+{
+    wxWindow *window = wxDynamicCast( event.GetEventObject(), wxWindow );
+    for ( Managers::iterator it = m_managers.begin();
+          it != m_managers.end();
+          ++it )
+    {
+        wxAuiManager* const mgr = *it;
+        if ( mgr->GetManagedWindow() == window )
+        {
+            mgr->UnInit();
+            m_managers.erase(it);
+            break;
+        }
+    }
+
+    event.Skip();
+}
+
+wxObject *wxAuiXmlHandler::DoCreateResource()
+{
+    if (m_class == wxS("wxAuiManager"))
+    {
+        wxAuiManager *manager = NULL;
+
+        if (m_parentAsWindow)
+        {
+            // Cache the previous values
+            bool          old_ins = m_mgrInside;
+            wxAuiManager *old_mgr = m_manager;
+            wxWindow     *old_win = m_window;
+
+            // Create the manager with the specified or default style and
+            // assign the new values related to this manager
+            m_window    = m_parentAsWindow;
+            manager     = new wxAuiManager( m_window,
+                                            GetStyle(wxS("style"), wxAUI_MGR_DEFAULT) );
+            m_manager   = manager;
+            m_mgrInside = true;
+
+            // Add this manager to our manager vector
+            m_managers.push_back(m_manager);
+
+            // Connect the managed window destroy event to
+            // automatically UnInit() later this manager
+            m_window ->Bind(wxEVT_DESTROY, &wxAuiXmlHandler::OnManagedWindowClose, this);
+
+            // Add AUI panes to this manager
+            CreateChildren(m_manager);
+
+            // Load a custom perspective if any
+            if (HasParam(wxS("perspective")))
+                m_manager->LoadPerspective( GetParamValue(wxS("perspective")) );
+
+            m_manager->Update();
+
+            // Restore the previous values
+            m_window    = old_win;
+            m_manager   = old_mgr;
+            m_mgrInside = old_ins;
+        }
+        else
+        {
+            ReportError("No wxWindow derived class to manage for this wxAuiManager.");
+        }
+
+        return manager;
+    }
+    else if (m_class == "wxAuiPaneInfo")
+    {
+        wxXmlNode *node   = GetParamNode(wxS("object"));
+        wxWindow  *window = NULL;
+
+        if (!node)
+            node = GetParamNode(wxS("object_ref"));
+
+        if (node)
+        {
+            bool old_ins = m_mgrInside;
+            m_mgrInside = false;
+
+            wxObject *object = CreateResFromNode(node, m_window, NULL);
+
+            m_mgrInside = old_ins;
+            window = wxDynamicCast( object, wxWindow );
+
+            if (!window && object)
+            {
+                ReportError( node, "wxAuiPaneInfo child must be a window." );
+            }
+        }
+
+        if (window)
+        {
+            wxAuiPaneInfo paneInfo = wxAuiPaneInfo();
+
+            wxString name = GetName();              paneInfo.Name( name );
+// Caption
+            if ( HasParam(wxS("caption")) )         paneInfo.Caption( GetText(wxS("caption")) );
+            if ( HasParam(wxS("caption_visible")) ) paneInfo.CaptionVisible( GetBool(wxS("caption_visible")) );
+// Buttons
+            if ( HasParam(wxS("close_button")) )    paneInfo.CloseButton( GetBool(wxS("close_button")) );
+            if ( HasParam(wxS("minimize_button")) ) paneInfo.MinimizeButton( GetBool(wxS("minimize_button")) );
+            if ( HasParam(wxS("maximize_button")) ) paneInfo.MaximizeButton( GetBool(wxS("maximize_button")) );
+            if ( HasParam(wxS("pin_button")) )      paneInfo.PinButton( GetBool(wxS("pin_button")) );
+            if ( HasParam(wxS("gripper")) )         paneInfo.Gripper( GetBool(wxS("gripper")) );
+// Appearance
+            if ( HasParam(wxS("pane_border")) )     paneInfo.PaneBorder( GetBool(wxS("pane_border")) );
+// State
+            if ( HasParam(wxS("dock")) )            paneInfo.Dock();
+            else if ( HasParam(wxS("float")) )      paneInfo.Float();
+
+// Dockable Directions
+            if ( HasParam(wxS("top_dockable")) )    paneInfo.TopDockable( GetBool(wxS("top_dockable")) );
+            if ( HasParam(wxS("bottom_dockable")) ) paneInfo.BottomDockable( GetBool(wxS("bottom_dockable")) );
+            if ( HasParam(wxS("left_dockable")) )   paneInfo.LeftDockable( GetBool(wxS("left_dockable")) );
+            if ( HasParam(wxS("right_dockable")) )  paneInfo.RightDockable( GetBool(wxS("right_dockable")) );
+// Behaviours
+            if ( HasParam(wxS("dock_fixed")) )      paneInfo.DockFixed( GetBool(wxS("dock_fixed")) );
+            if ( HasParam(wxS("resizable")) )       paneInfo.Resizable( GetBool(wxS("resizable")) );
+            if ( HasParam(wxS("movable")) )         paneInfo.Movable( GetBool(wxS("movable")) );
+            if ( HasParam(wxS("floatable")) )       paneInfo.Floatable( GetBool(wxS("floatable")) );
+// Sizes
+            if ( HasParam(wxS("floating_size")) )   paneInfo.FloatingSize( GetSize(wxS("floating_size")) );
+            if ( HasParam(wxS("min_size")) )        paneInfo.MinSize( GetSize(wxS("min_size")) );
+            if ( HasParam(wxS("max_size")) )        paneInfo.MaxSize( GetSize(wxS("max_size")) );
+            if ( HasParam(wxS("best_size")) )       paneInfo.BestSize( GetSize(wxS("best_size")) );
+// Positions
+            if ( HasParam(wxS("row")) )             paneInfo.Row( GetLong(wxS("row")) );
+            if ( HasParam(wxS("layer")) )           paneInfo.Layer( GetLong(wxS("layer")) );
+            if ( HasParam(wxS("default_pane")) )    paneInfo.DefaultPane();
+            else if( HasParam(wxS("toolbar_pane")) ) paneInfo.ToolbarPane();
+
+// Directions - CenterPane()/CentrePane != Center()/Centre()
+            if ( HasParam(wxS("center_pane") ) ||
+                 HasParam(wxS("centre_pane")) )     paneInfo.CenterPane();
+            if ( HasParam(wxS("direction")) )       paneInfo.Direction( GetLong(wxS("direction")) );
+            else if ( HasParam(wxS("top")) )        paneInfo.Top();
+            else if ( HasParam(wxS("bottom")) )     paneInfo.Bottom();
+            else if ( HasParam(wxS("left")) )       paneInfo.Left();
+            else if ( HasParam(wxS("right")) )      paneInfo.Right();
+            else if ( HasParam(wxS("center")) ||
+                      HasParam(wxS("centre")) )     paneInfo.Center();
+
+            m_manager->AddPane(window, paneInfo);
+        }
+        else
+        {
+            ReportError("No wxWindow derived class object specified inside wxAuiPaneInfo.");
+        }
+
+        return window;
+    }
+    else if (m_class == wxS("auibartool"))
+    {
+        if (!m_toolbar)
+        {
+            ReportError("tool only allowed inside a wxAuiToolBar");
+            return NULL;
+        }
+
+#if wxUSE_MENUS
+        wxMenu *menu = NULL;
+#endif
+        wxXmlNode *node = GetParamNode(wxS("object"));
+        if (!node)
+            node = GetParamNode(wxS("object_ref"));
+
+        if (node)
+        {
+            wxObject *object = NULL;
+
+            bool old_ins = m_atbInside;
+            m_atbInside = false;
+
+#if wxUSE_MENUS
+            if (IsOfClass(node, wxS("wxMenu")))
+            {
+                object = CreateResFromNode(node, NULL);
+                menu = wxDynamicCast(object, wxMenu);
+            }
+            else // wxControl
+#endif
+            {
+                object = CreateResFromNode(node, m_toolbar, NULL);
+            }
+
+            m_atbInside = old_ins;
+
+            wxControl *control = wxDynamicCast(object, wxControl);
+            if (control)
+            {
+                m_toolbar->AddControl(control);
+                return m_toolbar;
+            }
+        }
+
+        wxItemKind kind = wxITEM_NORMAL;
+
+#if wxUSE_MENUS
+        if (!menu)
+#endif
+        {
+            if (GetBool(wxS("radio")))
+                kind = wxITEM_RADIO;
+
+            if (GetBool(wxS("toggle")))
+            {
+                if (kind != wxITEM_NORMAL)
+                {
+                    ReportParamError
+                    (
+                        "toggle",
+                        "tool can't have both <radio> and <toggle> properties"
+                    );
+                }
+
+                kind = wxITEM_CHECK;
+            }
+        }
+
+        m_toolbar->AddTool
+                    (
+                        GetID(),
+                        GetText(wxS("label")),
+                        GetBitmap(wxS("bitmap"), wxART_TOOLBAR, m_toolSize),
+                        GetBitmap(wxS("bitmap2"), wxART_TOOLBAR, m_toolSize),
+                        kind,
+                        GetText(wxS("tooltip")),
+                        GetText(wxS("longhelp")),
+                        (wxObject*)NULL
+                    );
+
+        if (GetBool(wxS("disabled")))
+            m_toolbar->EnableTool(GetID(), false);
+
+#if wxUSE_MENUS
+        if (menu)
+        {
+            m_toolbar->SetToolDropDown(GetID(), true);
+            return m_toolbar;
+        }
+#endif
+        if (GetBool(wxS("checked")))
+        {
+            if (kind == wxITEM_NORMAL)
+            {
+                ReportParamError
+                (
+                    "checked",
+                    "only <radio> nor <toggle> tools can be checked"
+                );
+            }
+            else
+            {
+                m_toolbar->ToggleTool(GetID(), true);
+            }
+        }
+
+        return m_toolbar;
+    }
+    else if (m_class == wxS("auibarseparator") || m_class == wxS("auibarspace"))
+    {
+        if (!m_toolbar)
+        {
+            ReportError("separators only allowed inside wxAuiToolBar");
+            return NULL;
+        }
+
+        if (m_class == wxS("auibarseparator"))
+        {
+            m_toolbar->AddSeparator();
+        }
+        else
+        {
+            if (HasParam(wxS("width")))
+                m_toolbar->AddSpacer(GetLong(wxS("width")));
+            else
+                m_toolbar->AddStretchSpacer(GetLong(wxS("proportion"), 1));
+        }
+
+        return m_toolbar;
+    }
+    else if (m_class == wxS("wxAuiToolBar"))
+    {
+        XRC_MAKE_INSTANCE(toolbar, wxAuiToolBar)
+
+        toolbar->Create(m_window,
+                        GetID(),
+                        GetPosition(),
+                        GetSize(),
+                        GetStyle(wxS("style"), 0));
+
+        SetupWindow(toolbar);
+
+        m_toolSize = GetSize(wxS("bitmapsize"));
+        if (m_toolSize != wxDefaultSize)
+            toolbar->SetToolBitmapSize(m_toolSize);
+
+        wxSize margins = GetSize(wxS("margins"));
+        if (margins != wxDefaultSize)
+            toolbar->SetMargins(margins);
+
+        int defPacking = toolbar->GetToolPacking();
+        int packing = GetLong(wxS("packing"), defPacking);
+        if (packing != defPacking)
+            toolbar->SetToolPacking(packing);
+
+        int defSeparation = toolbar->GetToolSeparation();
+        int separation = GetLong(wxS("separation"), defSeparation);
+        if (separation != defSeparation)
+            toolbar->SetToolSeparation(separation);
+
+        wxAuiToolBar *old_par = m_toolbar;
+        m_toolbar = toolbar;
+
+        bool old_ins = m_atbInside;
+        m_atbInside = true;
+
+        CreateChildren(m_toolbar);
+
+        m_toolbar->Realize();
+
+        m_atbInside = old_ins;
+        m_toolbar = old_par;
+
+        return toolbar;
+    }
+    else if (m_class == wxS("notebookpage"))
+    {
+        wxXmlNode *anb = GetParamNode(wxS("object"));
+
+        if (!anb)
+            anb = GetParamNode(wxS("object_ref"));
+
+        if (anb)
+        {
+            bool old_ins = m_anbInside;
+            m_anbInside = false;
+            wxObject *item = CreateResFromNode(anb, m_notebook, NULL);
+            m_anbInside = old_ins;
+            wxWindow *wnd = wxDynamicCast(item, wxWindow);
+
+            if (wnd)
+            {
+                if ( HasParam(wxS("bitmap")) )
+                {
+                    m_notebook->AddPage(wnd,
+                                        GetText(wxS("label")),
+                                        GetBool(wxS("selected")),
+                                        GetBitmap(wxS("bitmap"), wxART_OTHER));
+                }
+                else
+                {
+                    m_notebook->AddPage(wnd,
+                                        GetText(wxS("label")),
+                                        GetBool(wxS("selected")));
+                }
+            }
+            else
+            {
+                ReportError(anb, "notebookpage child must be a window");
+            }
+            return wnd;
+        }
+        else
+        {
+            ReportError("notebookpage must have a window child");
+            return NULL;
+        }
+    }
+    else // if (m_class == wxS("wxAuiNotebook"))
+    {
+        XRC_MAKE_INSTANCE(anb, wxAuiNotebook)
+
+        anb->Create(m_parentAsWindow,
+                    GetID(),
+                    GetPosition(),
+                    GetSize(),
+                    GetStyle(wxS("style")));
+
+        SetupWindow(anb);
+
+        wxAuiNotebook *old_par = m_notebook;
+        m_notebook = anb;
+        bool old_ins = m_anbInside;
+        m_anbInside = true;
+        CreateChildren(m_notebook, true/*only this handler*/);
+        m_anbInside = old_ins;
+        m_notebook = old_par;
+
+        return anb;
+    }
+
+    return NULL;
+}
+
+bool wxAuiXmlHandler::CanHandle( wxXmlNode *node )
+{
+    return ((!m_mgrInside && IsOfClass(node, wxS("wxAuiManager")))  ||
+            (m_mgrInside && IsOfClass(node, wxS("wxAuiPaneInfo")))  ||
+            (!m_anbInside && IsOfClass(node, wxS("wxAuiNotebook"))) ||
+            (m_anbInside && IsOfClass(node, wxS("notebookpage")))   ||
+            (!m_atbInside && IsOfClass(node, wxS("wxAuiToolBar")))  ||
+            (m_atbInside && IsOfClass(node, wxS("auibartool")))     ||
+            (m_atbInside && IsOfClass(node, wxS("auibarspace")))    ||
+            (m_atbInside && IsOfClass(node, wxS("auibarseparator"))));
+}
+
+#endif // wxUSE_XRC && wxUSE_AUI
+

Proprietà modificate su: src/xrc/xh_aui.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: docs/changes.txt
===================================================================
--- docs/changes.txt	(revisione 72804)
+++ docs/changes.txt	(copia locale)
@@ -546,14 +546,14 @@
 
 All (GUI):
 
-- Add support for wxAuiNotebook to XRC (Steven Lamerton).
+- Add support for wxAUI to XRC (Andrea Zanellato, Steven Lamerton).
 - Add support for wxRibbonBar and related controls to XRC (Armel Asselin).
 - Add wxBITMAP_PNG() macro similar to wxBITMAP() but for PNG files.
 - Add new wxSimplebook class.
 - Support hexadecimal numbers in wxSpinCtrl.
 - Respect window max size in wxBoxSizer (Nathan Ridge).
 - Add support for searching in wxWebView for MSW and GTK (Allonii).
-- Add generic wxFileSystem support to wxWebView with 
+- Add generic wxFileSystem support to wxWebView with
   wxWebViewFSHandler (Nick Matthews).
 - Add possibility to hide and show again wxRibbonBar pages (wxBen).
 - Add wxRibbonBar pages highlighting (wxBen).
Index: docs/doxygen/overviews/xrc_format.h
===================================================================
--- docs/doxygen/overviews/xrc_format.h	(revisione 72804)
+++ docs/doxygen/overviews/xrc_format.h	(copia locale)
@@ -536,6 +536,96 @@
 @endTable
 
 
+@subsubsection xrc_wxauimanager wxAuiManager
+
+Notice that wxAUI support in XRC is available in wxWidgets 2.9.5 and
+later only and you need to explicitly register its handler using
+@code
+    #include <wx/xrc/xh_aui.h>
+
+    AddHandler(new wxAuiXmlHandler);
+@endcode
+to use it.
+
+A wxAuiManager can have one or more child objects of the
+wxAuiPaneInfo class.
+wxAuiPaneInfo objects have the following properties:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{caption, @ref overview_xrcformat_type_text,
+    Sets the caption of the pane.}
+@row3col{caption_visible, @ref overview_xrcformat_type_bool,
+    Indicates that a pane caption should be visible.}
+@row3col{close_button, @ref overview_xrcformat_type_bool,
+    Indicates that a close button should be drawn for the pane.}
+@row3col{maximize_button, @ref overview_xrcformat_type_bool,
+    Indicates that a maximize button should be drawn for the pane.}
+@row3col{minimize_button, @ref overview_xrcformat_type_bool,
+    Indicates that a minimize button should be drawn for the pane.}
+@row3col{pin_button, @ref overview_xrcformat_type_bool,
+    Indicates that a pin button should be drawn for the pane.}
+@row3col{gripper, @ref overview_xrcformat_type_bool,
+    Indicates that a gripper should be drawn for the pane.}
+@row3col{pane_border, @ref overview_xrcformat_type_bool,
+    Indicates that a border should be drawn for the pane.}
+@row3col{dock, ,
+    Indicates that a pane should be docked.}
+@row3col{float, ,
+    Indicates that a pane should be floated.}
+@row3col{top_dockable, @ref overview_xrcformat_type_bool,
+    Indicates whether a pane can be docked at the top of the frame.}
+@row3col{bottom_dockable, @ref overview_xrcformat_type_bool,
+    Indicates whether a pane can be docked at the bottom of the frame.}
+@row3col{left_dockable, @ref overview_xrcformat_type_bool,
+    Indicates whether a pane can be docked on the left of the frame.}
+@row3col{right_dockable, @ref overview_xrcformat_type_bool,
+    Indicates whether a pane can be docked on the right of the frame.}
+@row3col{dock_fixed, @ref overview_xrcformat_type_bool,
+    Causes the containing dock to have no resize sash.}
+@row3col{resizable, @ref overview_xrcformat_type_bool,
+    Allows a pane to be resized if the parameter is @true, and forces it
+    to be a fixed size if the parameter is @false.}
+@row3col{movable, @ref overview_xrcformat_type_bool,
+    Indicates whether a pane can be moved.}
+@row3col{floatable, @ref overview_xrcformat_type_bool,
+    Sets whether the user will be able to undock a pane and turn it
+    into a floating window.}
+@row3col{best_size, @ref overview_xrcformat_type_size,
+    Sets the ideal size for the pane.}
+@row3col{floating_size, @ref overview_xrcformat_type_size,
+    Sets the size of the floating pane.}
+@row3col{min_size, @ref overview_xrcformat_type_size,
+    Sets the minimum size of the pane.}
+@row3col{max_size, @ref overview_xrcformat_type_size,
+    Sets the maximum size of the pane.}
+@row3col{default_pane, ,
+    Specifies that the pane should adopt the default pane settings.}
+@row3col{toolbar_pane, ,
+    Specifies that the pane should adopt the default toolbar pane settings.}
+@row3col{layer, , Determines the layer of the docked pane.}
+@row3col{row, , Determines the row of the docked pane.}
+@row3col{center_pane, ,
+    Specifies that the pane should adopt the default center pane settings.}
+@row3col{centre_pane, ,
+    Same as center_pane.}
+@row3col{direction, ,
+    Determines the direction of the docked pane.}
+@row3col{top, ,
+    Sets the pane dock position to the top of the frame.}
+@row3col{bottom, ,
+    Sets the pane dock position to the bottom side of the frame.}
+@row3col{left, ,
+    Sets the pane dock position to the left side of the frame.}
+@row3col{right, ,
+    Sets the pane dock position to the right side of the frame.}
+@row3col{center, ,
+    Sets the pane dock position to the center of the frame.}
+@row3col{centre, ,
+    Same as center.}
+@endTable
+
+
 @subsubsection xrc_wxauinotebook wxAuiNotebook
 
 A wxAuiNotebook can have one or more child objects of the @c notebookpage
@@ -568,16 +658,96 @@
 </object>
 @endcode
 
-Notice that wxAuiNotebook support in XRC is available in wxWidgets 2.9.5 and
-later only and you need to explicitly register its handler using
+@note See @ref xrc_wxauimanager about using wxAUI classes in XRC.
+
+
+@subsubsection xrc_wxauitoolbar wxAuiToolBar
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{bitmapsize, @ref overview_xrcformat_type_size,
+    Size of toolbar bitmaps (default: not set).}
+@row3col{margins, @ref overview_xrcformat_type_size,
+    Margins (default: platform default).}
+@row3col{packing, integer,
+    Packing, see wxAuiToolBar::SetToolPacking() (default: not set).}
+@row3col{separation, integer,
+    Default separator size, see wxAuiToolBar::SetToolSeparation() (default: not set).}
+@endTable
+
+A wxAuiToolBar can have one or more child objects of three pseudo-classes:
+@c auibarseparator, @c auibarspacer or @c auibartool.
+
+The @c auibarseparator pseudo-class is used to insert separators into the toolbar and
+has neither properties nor children.
+
+The @c auibarspace pseudo-class is used for fixed-width or stretchable spaces
+and have the following properties:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{width, integer, A fixed-width spacer is added to the toolbar
+(see wxAuiToolBar::AddSpacer() ).}
+@row3col{proportion, integer, A stretchable spacer is added to the toolbar
+with the specified proportion (see wxAuiToolBar::AddStretchSpacer() ).}
+@endTable
+
+Notice that @c width and @c proportion are mutually exclusive.
+
+The @c auibartool pseudo-class objects specify toolbar buttons and have the following
+properties:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{label, @ref overview_xrcformat_type_text,
+    Label to display on the tool (default: no label).}
+@row3col{bitmap, @ref overview_xrcformat_type_bitmap,
+    Tool's bitmap (required).}
+@row3col{bitmap2, @ref overview_xrcformat_type_bitmap,
+    Bitmap for disabled tool (default: derived from @c bitmap).}
+@row3col{radio, @ref overview_xrcformat_type_bool,
+     Item's kind is wxITEM_RADIO (default: 0)?}
+@row3col{toggle, @ref overview_xrcformat_type_bool,
+     Item's kind is wxITEM_CHECK (default: 0)?}
+@row3col{tooltip, @ref overview_xrcformat_type_text,
+    Tooltip to use for the tool (default: none).}
+@row3col{longhelp, @ref overview_xrcformat_type_text,
+    Help text shown in statusbar when the mouse is on the tool (default: none).}
+@row3col{disabled, @ref overview_xrcformat_type_bool,
+     Is the tool initially disabled (default: 0)?}
+@row3col{checked, @ref overview_xrcformat_type_bool,
+     Is the tool initially checked (default: 0)?}
+@endTable
+
+Notice that @c radio and @c toggle are mutually exclusive.
+
+Example:
 @code
-    #include <wx/xrc/xh_auinotbk.h>
+<object class="wxAuiToolBar">
+    <style>wxAUI_TB_HORIZONTAL|wxAUI_TB_OVERFLOW</style>
+    <object class="auibartool" name="foo">
+        <bitmap>foo.png</bitmap>
+        <label>Foo</label>
+    </object>
+    <object class="auibarspace">
+        <width>15</width>
+    </object>
+    <object class="auibartool" name="bar">
+        <bitmap>bar.png</bitmap>
+        <label>Bar</label>
+    </object>
+    <object class="auibarseparator"/>
+    <object class="auibartool" name="view_auto">
+        <bitmap>view.png</bitmap>
+        <label>View</label>
+    </object>
+</object>
 
-    AddHandler(new wxAuiNotebookXmlHandler);
 @endcode
-to use it.
 
+@note See @ref xrc_wxauimanager about using wxAUI classes in XRC.
 
+
 @subsubsection xrc_wxbannerwindow wxBannerWindow
 
 @beginTable
Index: include/wx/xrc/xh_auinotbk.h
===================================================================
--- include/wx/xrc/xh_auinotbk.h	(revisione 72804)
+++ include/wx/xrc/xh_auinotbk.h	(copia locale)
@@ -1,36 +0,0 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/xrc/xh_auinotbk.h
-// Purpose:     XML resource handler for wxAuiNotebook
-// Author:      Steve Lamerton
-// Created:     2009-06-12
-// RCS-ID:      $Id$
-// Copyright:   (c) 2009 Steve Lamerton
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_XRC_XH_AUINOTEBOOK_H_
-#define _WX_XRC_XH_AUINOTEBOOK_H_
-
-#include "wx/xrc/xmlres.h"
-
-class WXDLLIMPEXP_FWD_AUI wxAuiNotebook;
-
-#if wxUSE_XRC && wxUSE_AUI
-
-class WXDLLIMPEXP_AUI wxAuiNotebookXmlHandler : public wxXmlResourceHandler
-{
-public:
-    wxAuiNotebookXmlHandler();
-    virtual wxObject *DoCreateResource();
-    virtual bool CanHandle(wxXmlNode *node);
-
-private:
-    bool m_isInside;
-    wxAuiNotebook *m_notebook;
-
-    wxDECLARE_DYNAMIC_CLASS(wxAuiNotebookXmlHandler);
-};
-
-#endif // wxUSE_XRC && wxUSE_AUI
-
-#endif // _WX_XRC_XH_AUINOTEBOOK_H_
Index: include/wx/xrc/xh_aui.h
===================================================================
--- include/wx/xrc/xh_aui.h	(revisione 0)
+++ include/wx/xrc/xh_aui.h	(revisione 0)
@@ -0,0 +1,56 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_aui.h
+// Purpose:     XRC resource handler for wxAUI
+// Author:      Andrea Zanellato, Steve Lamerton (wxAuiNotebook)
+// Created:     2011-09-18
+// RCS-ID:      $Id$
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_AUI_H_
+#define _WX_XH_AUI_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/vector.h"
+
+class WXDLLIMPEXP_FWD_AUI wxAuiManager;
+class WXDLLIMPEXP_FWD_AUI wxAuiNotebook;
+class WXDLLIMPEXP_FWD_AUI wxAuiToolBar;
+
+class WXDLLIMPEXP_AUI wxAuiXmlHandler : public wxXmlResourceHandler
+{
+public:
+    wxAuiXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+    // Returns the wxAuiManager for the specified window
+    wxAuiManager *GetAuiManager(wxWindow *managed);
+
+private:
+    // Used to UnInit() the wxAuiManager before destroying its managed window
+    void OnManagedWindowClose(wxWindowDestroyEvent &event);
+
+    typedef wxVector<wxAuiManager*> Managers;
+    Managers m_managers; // all wxAuiManagers created in this handler
+
+    wxAuiManager    *m_manager;  // Current wxAuiManager
+    wxWindow        *m_window;   // Current managed wxWindow
+    wxAuiNotebook   *m_notebook;
+    wxAuiToolBar    *m_toolbar;
+    wxSize          m_toolSize;
+
+    bool m_mgrInside; // Are we handling a wxAuiManager or panes inside it?
+    bool m_anbInside; // Are we handling a wxAuiNotebook or pages inside it?
+    bool m_atbInside; // Are we handling a wxAuiToolBar or tools inside it?
+
+    wxDECLARE_DYNAMIC_CLASS(wxAuiXmlHandler);
+};
+
+#endif //wxUSE_XRC && wxUSE_AUI
+
+#endif //_WX_XH_AUI_H_

Proprietà modificate su: include/wx/xrc/xh_aui.h
___________________________________________________________________
Added: svn:executable
   + *

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revisione 72804)
+++ build/bakefiles/files.bkl	(copia locale)
@@ -3631,7 +3631,7 @@
     src/aui/auibar.cpp
     src/aui/tabmdi.cpp
     src/aui/tabart.cpp
-    src/xrc/xh_auinotbk.cpp
+    src/xrc/xh_aui.cpp
     $(AUI_GTK_SRC)
 </set>
 <set var="AUI_HDR" hints="files">
@@ -3643,7 +3643,7 @@
     wx/aui/tabmdi.h
     wx/aui/aui.h
     wx/aui/tabart.h
-    wx/xrc/xh_auinotbk.h
+    wx/xrc/xh_aui.h
     $(AUI_GTK_HDR)
 </set>
 
Index: samples/xrc/xrcdemo.cpp
===================================================================
--- samples/xrc/xrcdemo.cpp	(revisione 72804)
+++ samples/xrc/xrcdemo.cpp	(copia locale)
@@ -38,6 +38,10 @@
 
 #include "wx/xrc/xmlres.h"          // XRC XML resources
 
+#if wxUSE_AUI
+    #include "wx/xrc/xh_aui.h"
+#endif // wxUSE_AUI
+
 #if wxUSE_RIBBON
     #include "wx/xrc/xh_ribbon.h"
 #endif // wxUSE_RIBBON
@@ -82,6 +86,10 @@
     // wxXRC docs for details.
     wxXmlResource::Get()->InitAllHandlers();
 
+#if wxUSE_AUI
+    wxXmlResource::Get()->AddHandler(new wxAuiXmlHandler);
+#endif
+
 #if wxUSE_RIBBON
     wxXmlResource::Get()->AddHandler(new wxRibbonXmlHandler);
 #endif
Index: samples/xrc/rc/controls.xrc
===================================================================
--- samples/xrc/rc/controls.xrc	(revisione 72804)
+++ samples/xrc/rc/controls.xrc	(copia locale)
@@ -53,8 +53,172 @@
                         </object>
                     </object>
                 </object>
-
                 <object class="choicebookpage">
+                    <label>wxAUI</label>
+                    <object class="wxPanel" name="aui_client_area">
+                        <object class="wxAuiManager" name="aui_manager">
+                            <object class="wxAuiPaneInfo" name="h_toolbar_pane">
+                                <caption>Horizontal Bar</caption>
+                                <bottom/>
+                                <toolbar_pane/>
+                                <object class="wxAuiToolBar" name="horizontal_toolbar">
+                                    <style>wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_OVERFLOW</style>
+                                    <bitmapsize>16,16</bitmapsize>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_NEW"/>
+                                        <label>New</label>
+                                    </object>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_FILE_OPEN"/>
+                                        <label>View</label>
+                                    </object>
+                                    <object class="auibarseparator"/>
+                                    <object class="auibartool">
+                                        <toggle>1</toggle>
+                                        <bitmap stock_id="wxART_GO_HOME"/>
+                                        <label>Home</label>
+                                    </object>
+                                    <object class="auibarspace">
+                                        <width>15</width>
+                                    </object>
+                                    <object class="auibartool">
+                                        <radio>1</radio>
+                                        <bitmap stock_id="wxART_GO_UP"/>
+                                        <label>Up</label>
+                                    </object>
+                                    <object class="auibartool">
+                                        <radio>1</radio>
+                                        <bitmap stock_id="wxART_GO_DOWN"/>
+                                        <label>Down</label>
+                                    </object>
+                                    <!--object class="auibartool">
+                                        <object class="wxComboBox">
+                                            <content>
+                                                <item>Just</item>
+                                                <item>a combobox</item>
+                                                <item>in the toolbar</item>
+                                            </content>
+                                        </object>
+                                    </object-->
+                                </object>
+                            </object>
+                            <object class="wxAuiPaneInfo" name="v_toolbar_pane">
+                                <caption>Vertical Bar</caption>
+                                <right/>
+                                <toolbar_pane/>
+                                <object class="wxAuiToolBar" name="v_aui_toolbar">
+                                    <style>wxAUI_TB_OVERFLOW</style>
+                                    <bitmapsize>24,24</bitmapsize>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_ERROR"/>
+                                        <label>Test</label>
+                                    </object>
+                                    <object class="auibarseparator"/>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_QUESTION"/>
+                                        <label>Test</label>
+                                    </object>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_INFORMATION"/>
+                                        <label>Test</label>
+                                    </object>
+                                    <object class="auibartool" name="view_aui_file">
+                                        <bitmap stock_id="wxART_FILE_OPEN"/>
+                                        <object class="wxMenu">
+                                            <object class="wxMenuItem" name="view_aui_text">
+                                                <label>View as text</label>
+                                            </object>
+                                            <object class="wxMenuItem" name="view_aui_hex">
+                                                <label>View as binary</label>
+                                            </object>
+                                        </object>
+                                    </object>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_WARNING"/>
+                                        <label>Test</label>
+                                    </object>
+                                    <object class="auibartool">
+                                        <bitmap stock_id="wxART_MISSING_IMAGE"/>
+                                        <label>Test</label>
+                                    </object>
+                                </object>
+                            </object>
+                            <object class="wxAuiPaneInfo" name="TreeViewPane">
+                                <caption>Tree View</caption>
+                                <left/>
+                                <close_button>0</close_button>
+                                <top_dockable>0</top_dockable>
+                                <bottom_dockable>0</bottom_dockable>
+                                <floating_size>150,300</floating_size>
+                                <min_size>90,-1</min_size>
+                                <layer>1</layer>
+                                <object class="wxTreeCtrl" name="TreeView"/>
+                            </object>
+                            <object class="wxAuiPaneInfo" name="EditorPane">
+                                <caption>Editor</caption>
+                                <center/>
+                                <close_button>0</close_button>
+                                <maximize_button>1</maximize_button>
+                                <dock_fixed>1</dock_fixed>
+                                <object class="wxAuiNotebook" name="Editor">
+                                    <style>wxAUI_NB_SCROLL_BUTTONS|wxAUI_NB_WINDOWLIST_BUTTON|wxAUI_NB_TAB_MOVE</style>
+                                    <object class="notebookpage">
+                                        <label>File1</label>
+                                        <bitmap stock_id="wxART_NORMAL_FILE"/>
+                                        <object class="wxPanel" name="EditorPanel1">
+                                            <style>wxTAB_TRAVERSAL</style>
+                                            <size>500,300</size>
+                                            <object class="wxBoxSizer">
+                                                <orient>wxVERTICAL</orient>
+                                                <object class="sizeritem">
+                                                    <option>1</option>
+                                                    <flag>wxEXPAND</flag>
+                                                    <object class="wxTextCtrl" name="File1">
+                                                        <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                                        <value>Some useless text...</value>
+                                                    </object>
+                                                </object>
+                                            </object>
+                                        </object>
+                                    </object>
+                                    <object class="notebookpage">
+                                        <label>File2</label>
+                                        <bitmap stock_id="wxART_NORMAL_FILE"/>
+                                        <object class="wxPanel" name="EditorPanel2">
+                                            <style>wxTAB_TRAVERSAL</style>
+                                            <size>500,300</size>
+                                            <object class="wxBoxSizer">
+                                                <orient>wxVERTICAL</orient>
+                                                <object class="sizeritem">
+                                                    <option>1</option>
+                                                    <flag>wxEXPAND</flag>
+                                                    <object class="wxTextCtrl" name="File2">
+                                                        <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                                        <value>Other useless text...</value>
+                                                    </object>
+                                                </object>
+                                            </object>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                            <object class="wxAuiPaneInfo" name="LogPane">
+                                <caption>Log</caption>
+                                <bottom/>
+                                <close_button>0</close_button>
+                                <left_dockable>0</left_dockable>
+                                <right_dockable>0</right_dockable>
+                                <min_size>-1,60</min_size>
+                                <floating_size>300,150</floating_size>
+                                <object class="wxTextCtrl" name="TextLog">
+                                    <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                    <value>A fake log...</value>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+                <object class="choicebookpage">
                     <label>wxBannerWindow</label>
                     <object class="wxPanel" name="bannerwindow">
                         <object class="wxBoxSizer">
Index: samples/xrc/xrcdemo.bkl
===================================================================
--- samples/xrc/xrcdemo.bkl	(revisione 72804)
+++ samples/xrc/xrcdemo.bkl	(copia locale)
@@ -18,6 +18,7 @@
             custclas.h
             objrefdlg.h
         </headers>
+        <wx-lib>aui</wx-lib>
         <wx-lib>ribbon</wx-lib>
         <wx-lib>xrc</wx-lib>
         <wx-lib>html</wx-lib>

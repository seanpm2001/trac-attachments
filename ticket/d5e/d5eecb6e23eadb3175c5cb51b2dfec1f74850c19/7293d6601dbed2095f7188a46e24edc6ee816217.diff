diff --git a/Makefile.in b/Makefile.in
index 3ba2970..bacd401 100644
diff --git a/build/bakefiles/files.bkl b/build/bakefiles/files.bkl
index 81363b7..9967565 100644
--- a/build/bakefiles/files.bkl
+++ b/build/bakefiles/files.bkl
@@ -3630,6 +3630,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     src/aui/auibar.cpp
     src/aui/tabmdi.cpp
     src/aui/tabart.cpp
+    src/xrc/xh_aui.cpp
     src/xrc/xh_auinotbk.cpp
     $(AUI_GTK_SRC)
 </set>
@@ -3642,6 +3643,7 @@ IMPORTANT: please read docs/tech/tn0016.txt before modifying this file!
     wx/aui/tabmdi.h
     wx/aui/aui.h
     wx/aui/tabart.h
+    wx/xrc/xh_aui.h
     wx/xrc/xh_auinotbk.h
     $(AUI_GTK_HDR)
 </set>
diff --git a/build/msw/makefile.bcc b/build/msw/makefile.bcc
index 955db8f..981aa7d 100644
diff --git a/build/msw/makefile.gcc b/build/msw/makefile.gcc
index dc39c1f..40e2e79 100644
diff --git a/build/msw/makefile.vc b/build/msw/makefile.vc
index 6aa31ce..390cf56 100644
diff --git a/build/msw/makefile.wat b/build/msw/makefile.wat
index 1563fff..964afde 100644
diff --git a/build/msw/wx_aui.dsp b/build/msw/wx_aui.dsp
index e68faf7..cfbe0f4 100644
diff --git a/build/msw/wx_core.dsp b/build/msw/wx_core.dsp
index 726eacc..44f2c9f 100644
diff --git a/build/msw/wx_vc7_aui.vcproj b/build/msw/wx_vc7_aui.vcproj
index b52c9fd..b051599 100644
diff --git a/build/msw/wx_vc7_core.vcproj b/build/msw/wx_vc7_core.vcproj
index 72822b6..92abb31 100644
diff --git a/build/msw/wx_vc8_aui.vcproj b/build/msw/wx_vc8_aui.vcproj
index ffcc567..87418de 100644
diff --git a/build/msw/wx_vc8_core.vcproj b/build/msw/wx_vc8_core.vcproj
index 8541a49..8dd8cf7 100644
diff --git a/build/msw/wx_vc9_aui.vcproj b/build/msw/wx_vc9_aui.vcproj
index fe8040e..e67214c 100644
diff --git a/build/msw/wx_vc9_core.vcproj b/build/msw/wx_vc9_core.vcproj
index 3e070ac..f694200 100644
diff --git a/docs/changes.txt b/docs/changes.txt
index d2ba3b9..601fcc0 100644
--- a/docs/changes.txt
+++ b/docs/changes.txt
@@ -544,6 +544,7 @@ All:
 All (GUI):
 
 - Add support for wxAuiNotebook to XRC (Steven Lamerton).
+- Add support for wxAuiPaneInfo to XRC (Andrea Zanellato).
 - Add support for wxRibbonBar and related controls to XRC (Armel Asselin).
 - Add wxBITMAP_PNG() macro similar to wxBITMAP() but for PNG files.
 - Add new wxSimplebook class.
diff --git a/include/wx/xrc/xh_aui.h b/include/wx/xrc/xh_aui.h
index e69de29..9f12a0e 100644
--- a/include/wx/xrc/xh_aui.h
+++ b/include/wx/xrc/xh_aui.h
@@ -0,0 +1,48 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_aui.h
+// Purpose:     XRC resource handler for wxAUI
+// Author:      Andrea Zanellato
+// Created:     2011-09-18
+// RCS-ID:      $Id: $
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XRC_XH_AUI_H_
+#define _WX_XRC_XH_AUI_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/vector.h"
+
+class  WXDLLIMPEXP_FWD_AUI wxAuiManager;
+
+class WXDLLIMPEXP_AUI wxAuiXmlHandler : public wxXmlResourceHandler
+{
+public:
+    wxAuiXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+    // Returns the wxAuiManager for the specified window
+    wxAuiManager *GetAuiManager(wxWindow *managed);
+
+private:
+    // Used to UnInit() the wxAuiManager before destroying its managed window
+    void OnManagedWindowClose(wxWindowDestroyEvent &event);
+
+    typedef wxVector<wxAuiManager*> Managers;
+    Managers m_managers; // all wxAuiManagers created in this handler
+
+    wxAuiManager *m_manager; // Current wxAuiManager
+    wxWindow *m_window; // Current managed wxWindow
+    bool m_isInside; // Are we handling a wxAuiManager or panes inside it?
+
+    wxDECLARE_DYNAMIC_CLASS(wxAuiXmlHandler);
+};
+
+#endif // wxUSE_XRC && wxUSE_AUI
+
+#endif // _WX_XRC_XH_AUI_H_
diff --git a/samples/xrc/Makefile.in b/samples/xrc/Makefile.in
index b45c3f2..8a2b689 100644
diff --git a/samples/xrc/makefile.bcc b/samples/xrc/makefile.bcc
index cd0b558..fcea2a1 100644
diff --git a/samples/xrc/makefile.gcc b/samples/xrc/makefile.gcc
index 7d16fc2..40f438e 100644
diff --git a/samples/xrc/makefile.unx b/samples/xrc/makefile.unx
index 49aada1..1740628 100644
diff --git a/samples/xrc/makefile.vc b/samples/xrc/makefile.vc
index 87e1e0f..0c7a8b7 100644
diff --git a/samples/xrc/makefile.wat b/samples/xrc/makefile.wat
index da140e5..a87c791 100644
diff --git a/samples/xrc/rc/aui.xrc b/samples/xrc/rc/aui.xrc
index e69de29..0870b7a 100644
--- a/samples/xrc/rc/aui.xrc
+++ b/samples/xrc/rc/aui.xrc
@@ -0,0 +1,162 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
+<resource xmlns="http://www.wxwindows.org/wxxrc" version="2.3.0.1">
+    <object class="wxFrame" name="aui_frame">
+        <style>wxCLOSE_BOX|wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL</style>
+        <size>500,300</size>
+        <title>XRC AUI Demo</title>
+        <centered>1</centered>
+        <object class="wxMenuBar" name="menuBar">
+            <label>MainMenu</label>
+            <object class="wxMenu" name="menuFile">
+                <label>_File</label>
+                <object class="wxMenuItem" name="wxID_EXIT">
+                    <label>E_xit\tAlt+X</label>
+                    <help>Close XRC AUI Demo Frame</help>
+                    <!--bitmap stock_id="wxART_QUIT"/-->
+                </object>
+            </object>
+            <object class="wxMenu" name="menuAbout">
+                <label>_About</label>
+                <object class="wxMenuItem" name="wxID_ABOUT">
+                    <label>About...\tF1</label>
+                    <help>About XRC AUI Demo...</help>
+                </object>
+            </object>
+        </object>
+        <object class="wxToolBar" name="ToolBar">
+            <style>wxTB_HORIZONTAL</style>
+            <packing>1</packing>
+            <separation>5</separation>
+            <object class="tool" name="wxID_NEW">
+                <label>New File (Ctrl+N)</label>
+                <tooltip>New File (Ctrl+N)</tooltip>
+                <longhelp>Create a new file.</longhelp>
+                <bitmap stock_id="wxART_NEW"/>
+            </object>
+            <object class="tool" name="wxID_OPEN">
+                <label>Open File (Ctrl+O)</label>
+                <tooltip>Open File (Ctrl+O)</tooltip>
+                <longhelp>Open an existing file.</longhelp>
+                <bitmap stock_id="wxART_FILE_OPEN"/>
+            </object>
+            <object class="tool" name="wxID_SAVE">
+                <label>Save File (Ctrl+S)</label>
+                <tooltip>Save File (Ctrl+S)</tooltip>
+                <longhelp>Save the current file.</longhelp>
+                <bitmap stock_id="wxART_FILE_SAVE"/>
+            </object>
+            <object class="separator" />
+            <object class="tool" name="wxID_UNDO">
+                <label>Undo</label>
+                <tooltip>Undo (Ctrl+Z)</tooltip>
+                <longhelp>Undo the last action.</longhelp>
+                <bitmap stock_id="wxART_UNDO"/>
+            </object>
+            <object class="tool" name="wxID_REDO">
+                <label>Redo (Ctrl+Y)</label>
+                <tooltip>Redo (Ctrl+Y)</tooltip>
+                <longhelp>Redo the last action that was undone.</longhelp>
+                <bitmap stock_id="wxART_REDO"/>
+            </object>
+            <object class="separator" />
+            <object class="tool" name="wxID_CUT">
+                <label>Cut (Ctrl+X)</label>
+                <tooltip>Cut (Ctrl+X)</tooltip>
+                <longhelp>Remove the selected text and place it on the clipboard.</longhelp>
+                <bitmap stock_id="wxART_CUT"/>
+            </object>
+            <object class="tool" name="wxID_COPY">
+                <label>Copy (Ctrl+C)</label>
+                <tooltip>Copy (Ctrl+C)</tooltip>
+                <longhelp>Copy the selected text to the clipboard.</longhelp>
+                <bitmap stock_id="wxART_COPY"/>
+            </object>
+            <object class="tool" name="wxID_PASTE">
+                <label>Paste (Ctrl+V)</label>
+                <tooltip>Paste (Ctrl+V)</tooltip>
+                <longhelp>Insert a text from the clipboard.</longhelp>
+                <bitmap stock_id="wxART_PASTE"/>
+            </object>
+        </object>
+        <!-- Without this panel wxAuiPaneInfo panes can't be dragged using the wxToolBar -->
+        <object class="wxPanel" name="aui_client_area">
+            <object class="wxAuiManager" name="AUIManager">
+                <object class="wxAuiPaneInfo" name="TreeViewPane">
+                    <caption>Tree View</caption>
+                    <left/>
+                    <close_button>0</close_button>
+                    <top_dockable>0</top_dockable>
+                    <bottom_dockable>0</bottom_dockable>
+                    <floating_size>150,300</floating_size>
+                    <min_size>90,-1</min_size>
+                    <layer>1</layer>
+                    <object class="wxTreeCtrl" name="TreeView"/>
+                </object>
+                <object class="wxAuiPaneInfo" name="EditorPane">
+                    <caption>Editor</caption>
+                    <center/>
+                    <close_button>0</close_button>
+                    <maximize_button>1</maximize_button>
+                    <dock_fixed>1</dock_fixed>
+                    <object class="wxNotebook" name="Editor">
+                        <object class="notebookpage">
+                            <label>File1</label>
+                            <bitmap stock_id="wxART_NORMAL_FILE"/>
+                            <object class="wxPanel" name="EditorPanel1">
+                                <style>wxTAB_TRAVERSAL</style>
+                                <size>500,300</size>
+                                <object class="wxBoxSizer">
+                                    <orient>wxVERTICAL</orient>
+                                    <object class="sizeritem">
+                                        <option>1</option>
+                                        <flag>wxEXPAND</flag>
+                                        <object class="wxTextCtrl" name="File1">
+                                            <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                            <value>Some useless text...</value>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                        <object class="notebookpage">
+                            <label>File2</label>
+                            <bitmap stock_id="wxART_NORMAL_FILE"/>
+                            <object class="wxPanel" name="EditorPanel2">
+                                <style>wxTAB_TRAVERSAL</style>
+                                <size>500,300</size>
+                                <object class="wxBoxSizer">
+                                    <orient>wxVERTICAL</orient>
+                                    <object class="sizeritem">
+                                        <option>1</option>
+                                        <flag>wxEXPAND</flag>
+                                        <object class="wxTextCtrl" name="File2">
+                                            <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                                            <value>Other useless text...</value>
+                                        </object>
+                                    </object>
+                                </object>
+                            </object>
+                        </object>
+                    </object>
+                </object>
+                <object class="wxAuiPaneInfo" name="LogPane">
+                    <caption>Log</caption>
+                    <bottom/>
+                    <close_button>0</close_button>
+                    <left_dockable>0</left_dockable>
+                    <right_dockable>0</right_dockable>
+                    <min_size>-1,60</min_size>
+                    <floating_size>300,150</floating_size>
+                    <object class="wxTextCtrl" name="TextLog">
+                        <style>wxTE_AUTO_URL|wxTE_MULTILINE|wxTE_RICH</style>
+                        <value>A fake log...</value>
+                    </object>
+                </object>
+            </object>
+        </object>
+        <object class="wxStatusBar" name="StatusBar">
+            <style>wxST_SIZEGRIP</style>
+            <fields>1</fields>
+        </object>
+    </object>
+</resource>
diff --git a/samples/xrc/xrcdemo.bkl b/samples/xrc/xrcdemo.bkl
index 7523f2c..dda8cfd 100644
--- a/samples/xrc/xrcdemo.bkl
+++ b/samples/xrc/xrcdemo.bkl
@@ -18,6 +18,7 @@
             custclas.h
             objrefdlg.h
         </headers>
+        <wx-lib>aui</wx-lib>
         <wx-lib>ribbon</wx-lib>
         <wx-lib>xrc</wx-lib>
         <wx-lib>html</wx-lib>
diff --git a/samples/xrc/xrcdemo.cpp b/samples/xrc/xrcdemo.cpp
index bc3fcd1..682a18f 100644
--- a/samples/xrc/xrcdemo.cpp
+++ b/samples/xrc/xrcdemo.cpp
@@ -82,6 +82,10 @@ bool MyApp::OnInit()
     // wxXRC docs for details.
     wxXmlResource::Get()->InitAllHandlers();
 
+#if wxUSE_AUI
+    wxXmlResource::Get()->AddHandler(new wxAuiXmlHandler);
+#endif
+
 #if wxUSE_RIBBON
     wxXmlResource::Get()->AddHandler(new wxRibbonXmlHandler);
 #endif
diff --git a/samples/xrc/xrcdemo.dsp b/samples/xrc/xrcdemo.dsp
index 6b09997..bae583b 100644
diff --git a/samples/xrc/xrcdemo_vc7.vcproj b/samples/xrc/xrcdemo_vc7.vcproj
index cdf81e3..707b40e 100644
diff --git a/samples/xrc/xrcdemo_vc8.vcproj b/samples/xrc/xrcdemo_vc8.vcproj
index c45284a..8d22431 100644
diff --git a/samples/xrc/xrcdemo_vc9.vcproj b/samples/xrc/xrcdemo_vc9.vcproj
index c82abfe..65d2c7d 100644
diff --git a/src/xrc/xh_aui.cpp b/src/xrc/xh_aui.cpp
index e69de29..f573c1a 100644
--- a/src/xrc/xh_aui.cpp
+++ b/src/xrc/xh_aui.cpp
@@ -0,0 +1,221 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_aui.h
+// Purpose:     Implementation of wxAUI XRC handler.
+// Author:      Andrea Zanellato
+// Created:     2011-09-18
+// RCS-ID:      $Id: $
+// Copyright:   (c) 2011 wxWidgets Team
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/xrc/xh_aui.h"
+
+#include "wx/aui/framemanager.h"
+
+wxIMPLEMENT_DYNAMIC_CLASS(wxAuiXmlHandler, wxXmlResourceHandler)
+
+wxAuiXmlHandler::wxAuiXmlHandler()
+                : wxXmlResourceHandler(),
+                  m_manager(NULL),
+                  m_window(NULL),
+                  m_isInside(false)
+{
+}
+
+wxAuiManager *wxAuiXmlHandler::GetAuiManager( wxWindow *managed )
+{
+    for ( Managers::const_iterator it = m_managers.begin();
+          it != m_managers.end();
+          ++it )
+    {
+        wxAuiManager* const mgr = *it;
+        if ( mgr->GetManagedWindow() == managed )
+            return mgr;
+    }
+
+    return NULL;
+}
+
+void wxAuiXmlHandler::OnManagedWindowClose( wxWindowDestroyEvent &event )
+{
+    wxWindow *window = wxDynamicCast( event.GetEventObject(), wxWindow );
+    for ( Managers::iterator it = m_managers.begin();
+          it != m_managers.end();
+          ++it )
+    {
+        wxAuiManager* const mgr = *it;
+        if ( mgr->GetManagedWindow() == window )
+        {
+            mgr->UnInit();
+            m_managers.erase(it);
+            break;
+        }
+    }
+
+    event.Skip();
+}
+
+wxObject *wxAuiXmlHandler::DoCreateResource()
+{
+    if ( m_class == "wxAuiManager" )
+    {
+        wxAuiManager *manager = NULL;
+
+        wxXmlNode *windowNode = m_node->GetParent();
+        while ( windowNode )
+        {
+            if ( ( windowNode->GetName() == "object" || windowNode->GetName() == "object_ref") )
+            {
+                wxString classname = "class";
+                wxString name      = "name";
+
+                if ( windowNode->HasAttribute( classname ) &&
+                     windowNode->HasAttribute( name ) )
+                {
+                    classname = windowNode->GetAttribute( classname );
+                    name      = windowNode->GetAttribute( name );
+
+                    if ( classname != "wxAuiPaneInfo" &&
+                         classname != "wxStatusBar"   &&
+                         classname != "wxToolBar"     &&
+                         classname != "wxMenuBar" )
+                    {
+                        // Using XRCID here causes undefined references when linking
+                        wxWindow *window = wxWindow::FindWindowByName( name );
+
+                        if ( window )
+                        {
+                            bool          old_ins = m_isInside;
+                            wxAuiManager *old_mgr = m_manager;
+                            wxWindow     *old_win = m_window;
+
+                            manager    = new wxAuiManager();
+                            m_window   = window;
+                            m_manager  = manager;
+                            m_isInside = true;
+
+                            m_managers.push_back( manager );
+                            manager->SetManagedWindow( window );
+                            window->Bind( wxEVT_DESTROY, &wxAuiXmlHandler::OnManagedWindowClose, this );
+
+                            CreateChildren( manager );
+
+                            if ( HasParam("perspective") )
+                                manager->LoadPerspective( GetParamValue("perspective") );
+
+                            m_window   = old_win;
+                            m_manager  = old_mgr;
+                            m_isInside = old_ins;
+                        }
+                    }
+                }
+            }
+            windowNode = windowNode->GetNext();
+        }
+
+        return manager;
+    }
+    else if ( m_class == "wxAuiPaneInfo" )
+    {
+        wxXmlNode *node   = GetParamNode("object");
+        wxWindow  *window = NULL;
+
+        if ( !node )
+            node = GetParamNode("object_ref");
+
+        if ( node )
+        {
+            bool old_ins = m_isInside;
+            m_isInside = false;
+
+            wxObject *object = CreateResFromNode( node, m_window, NULL );
+
+            m_isInside = old_ins;
+            window = wxDynamicCast( object, wxWindow );
+
+            if ( window == NULL && object != NULL )
+            {
+                ReportError( node, _("wxAuiPaneInfo child must be a window.") );
+            }
+        }
+
+        if ( window )
+        {
+            wxAuiPaneInfo paneInfo = wxAuiPaneInfo();
+
+            wxString name = GetName();          paneInfo.Name( name );
+// Caption
+            if ( HasParam("caption") )          paneInfo.Caption( GetText("caption") );
+            if ( HasParam("caption_visible") )  paneInfo.CaptionVisible( GetBool("caption_visible") );
+// Buttons
+            if ( HasParam("close_button") )     paneInfo.CloseButton( GetBool("close_button") );
+            if ( HasParam("minimize_button") )  paneInfo.MinimizeButton( GetBool("minimize_button") );
+            if ( HasParam("maximize_button") )  paneInfo.MaximizeButton( GetBool("maximize_button") );
+            if ( HasParam("pin_button") )       paneInfo.PinButton( GetBool("pin_button") );
+            if ( HasParam("gripper") )          paneInfo.Gripper( GetBool("gripper") );
+// Appearance
+            if ( HasParam("pane_border") )      paneInfo.PaneBorder( GetBool("pane_border") );
+// State
+            if ( HasParam("dock") )             paneInfo.Dock();
+            else if ( HasParam("float") )       paneInfo.Float();
+
+// Dockable Directions
+            if ( HasParam("top_dockable") )     paneInfo.TopDockable( GetBool("top_dockable") );
+            if ( HasParam("bottom_dockable") )  paneInfo.BottomDockable( GetBool("bottom_dockable") );
+            if ( HasParam("left_dockable") )    paneInfo.LeftDockable( GetBool("left_dockable") );
+            if ( HasParam("right_dockable") )   paneInfo.RightDockable( GetBool("right_dockable") );
+// Behaviours
+            if ( HasParam("dock_fixed") )       paneInfo.DockFixed( GetBool("dock_fixed") );
+            if ( HasParam("resizable") )        paneInfo.Resizable( GetBool("resizable") );
+            if ( HasParam("movable") )          paneInfo.Movable( GetBool("movable") );
+            if ( HasParam("floatable") )        paneInfo.Floatable( GetBool("floatable") );
+// Sizes
+            if ( HasParam("floating_size") )    paneInfo.FloatingSize( GetSize("floating_size") );
+            if ( HasParam("min_size") )         paneInfo.MinSize( GetSize("min_size") );
+            if ( HasParam("max_size") )         paneInfo.MaxSize( GetSize("max_size") );
+            if ( HasParam("best_size") )        paneInfo.BestSize( GetSize("best_size") );
+// Positions
+            if ( HasParam("row") )              paneInfo.Row( GetLong("row") );
+            if ( HasParam("layer") )            paneInfo.Layer( GetLong("layer") );
+            if ( HasParam("default_pane") )     paneInfo.DefaultPane();
+            else if( HasParam("toolbar_pane") ) paneInfo.ToolbarPane();
+
+// Directions - CenterPane()/CentrePane != Center()/Centre()
+            if ( HasParam("center_pane") ||
+                 HasParam("centre_pane") )      paneInfo.CenterPane();
+            if ( HasParam("direction") )        paneInfo.Direction( GetLong("direction") );
+            else if ( HasParam("top") )         paneInfo.Top();
+            else if ( HasParam("bottom") )      paneInfo.Bottom();
+            else if ( HasParam("left") )        paneInfo.Left();
+            else if ( HasParam("right") )       paneInfo.Right();
+            else if ( HasParam("center") ||
+                      HasParam("centre") )      paneInfo.Center();
+
+            m_manager->AddPane( window, paneInfo );
+            m_manager->Update();
+        }
+        else
+        {
+            ReportError(_("No wxWindow derived class object specified inside wxAuiPaneInfo.") );
+        }
+        return window;
+    }
+    return NULL;
+}
+
+bool wxAuiXmlHandler::CanHandle( wxXmlNode *node )
+{
+    return (!m_isInside && IsOfClass( node, "wxAuiManager")) ||
+            (m_isInside && IsOfClass( node, "wxAuiPaneInfo"));
+}
+
+#endif // wxUSE_XRC && wxUSE_AUI

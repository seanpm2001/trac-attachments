--- C:/3rdParty/wxMSW-2.9.3/src/msw/rendererorig.cpp	Fri May 25 16:11:35 2012
+++ C:/3rdParty/wxMSW-2.9.3/src/msw/renderer.cpp	Fri May 25 20:31:21 2012
@@ -134,6 +134,26 @@
                                 wxDC& dc,
                                 const wxRect& rect,
                                 int flags = 0);
+
+    void DrawChoice(wxWindow* win,
+                     wxDC& dc,
+                     const wxRect& rect,
+                     int flags = 0);
+
+    void DrawComboBox(wxWindow* win,
+                       wxDC& dc,
+                       const wxRect& rect,
+                       int flags = 0);
+
+    virtual void DrawComboBoxDropButton(wxWindow *win,
+                                         wxDC& dc,
+                                         const wxRect& rect,
+                                         int flags = 0)=0;
+
+    virtual void DrawTextCtrl(wxWindow* win,
+                               wxDC& dc,
+                               const wxRect& rect,
+                               int flags = 0)=0;
 };
 
 // ----------------------------------------------------------------------------
@@ -165,16 +185,6 @@
                                 const wxRect& rect,
                                 int flags = 0);
 
-    virtual void DrawChoice(wxWindow* win,
-                            wxDC& dc,
-                            const wxRect& rect,
-                            int flags = 0);
-
-    virtual void DrawComboBox(wxWindow* win,
-                              wxDC& dc,
-                              const wxRect& rect,
-                              int flags = 0);
-
     virtual void DrawTextCtrl(wxWindow* win,
                               wxDC& dc,
                               const wxRect& rect,
@@ -279,6 +289,11 @@
             m_rendererNative.DrawPushButton(win, dc, rect, flags);
     }
 
+    virtual void DrawTextCtrl(wxWindow* win,
+                              wxDC& dc,
+                              const wxRect& rect,
+                              int flags = 0);
+
     virtual void DrawRadioBitmap(wxWindow *win,
                                  wxDC& dc,
                                  const wxRect& rect,
@@ -364,7 +379,29 @@
         DrawFocusRect( win, dc, rect, flags );
 }
 
+void wxRendererMSWBase::DrawChoice(wxWindow* win,
+                            wxDC& dc,
+                            const wxRect& rect,
+                            int flags)
+{
+    DrawComboBox(win, dc, rect, flags);
+}
+
+// Draw the equivalent of a wxComboBox
+void wxRendererMSWBase::DrawComboBox(wxWindow* win, wxDC& dc, const wxRect& rect, int flags)
+{
+    // Draw the main part of the control same as TextCtrl
+    DrawTextCtrl(win, dc, rect, flags);
+
+    // Draw the button inside the border, on the right side
+    wxRect br(rect);
+    br.height -= 2;
+    br.x += br.width - br.height - 1;
+    br.width = br.height;
+    br.y += 1;
 
+    DrawComboBoxDropButton(win, dc, br, flags);
+}
 // ============================================================================
 // wxRendererNative and wxRendererMSW implementation
 // ============================================================================
@@ -544,27 +581,6 @@
     wxColour fill;
     wxColour bdr;
     COLORREF cref;
-
-#if wxUSE_UXTHEME
-    wxUxThemeHandle hTheme(win, L"EDIT");
-    if (hTheme)
-    {
-        wxUxThemeEngine::Get()->GetThemeColor(hTheme, EP_EDITTEXT,
-                                              ETS_NORMAL, TMT_FILLCOLOR, &cref);
-        fill = wxRGBToColour(cref);
-
-        int etsState;
-        if ( flags & wxCONTROL_DISABLED )
-            etsState = ETS_DISABLED;
-        else
-            etsState = ETS_NORMAL;
-
-        wxUxThemeEngine::Get()->GetThemeColor(hTheme, EP_EDITTEXT,
-                                              etsState, TMT_BORDERCOLOR, &cref);
-        bdr = wxRGBToColour(cref);
-    }
-    else
-#endif
     {
         fill = wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW);
         bdr = *wxBLACK;
@@ -576,28 +592,6 @@
 }
 
 
-// Draw the equivalent of a wxComboBox
-void wxRendererMSW::DrawComboBox(wxWindow* win, wxDC& dc, const wxRect& rect, int flags)
-{
-    // Draw the main part of the control same as TextCtrl
-    DrawTextCtrl(win, dc, rect, flags);
-
-    // Draw the button inside the border, on the right side
-    wxRect br(rect);
-    br.height -= 2;
-    br.x += br.width - br.height - 1;
-    br.width = br.height;
-    br.y += 1;
-
-    DrawComboBoxDropButton(win, dc, br, flags);
-}
-
-
-void wxRendererMSW::DrawChoice(wxWindow* win, wxDC& dc,
-                           const wxRect& rect, int flags)
-{
-    DrawComboBox(win, dc, rect, flags);
-}
 
 // ============================================================================
 // wxRendererXP implementation
@@ -853,6 +847,39 @@
     }
 
     DoDrawButtonLike(hTheme, part, dc, rect, flags);
+}
+
+// Uses the theme to draw the border and fill for something like a wxTextCtrl
+void wxRendererXP::DrawTextCtrl(wxWindow* win, wxDC& dc, const wxRect& rect, int flags)
+{
+    wxUxThemeHandle hTheme(win, L"EDIT");
+    if ( !hTheme )
+    {
+        m_rendererNative.DrawTextCtrl(win,dc,rect,flags);
+        return;
+    }
+
+    wxColour fill;
+    wxColour bdr;
+    COLORREF cref;
+
+    wxUxThemeEngine::Get()->GetThemeColor(hTheme, EP_EDITTEXT,
+                                          ETS_NORMAL, TMT_FILLCOLOR, &cref);
+    fill = wxRGBToColour(cref);
+
+    int etsState;
+    if ( flags & wxCONTROL_DISABLED )
+        etsState = ETS_DISABLED;
+    else
+        etsState = ETS_NORMAL;
+
+    wxUxThemeEngine::Get()->GetThemeColor(hTheme, EP_EDITTEXT,
+                                              etsState, TMT_BORDERCOLOR, &cref);
+    bdr = wxRGBToColour(cref);
+
+    dc.SetPen( bdr );
+    dc.SetBrush( fill );
+    dc.DrawRectangle(rect);
 }
 
 // ----------------------------------------------------------------------------

diff -ru2 orig/automtn.cpp new/automtn.cpp
--- orig/automtn.cpp	2003-08-14 16:32:07.000000000 +0200
+++ new/automtn.cpp	2003-12-16 15:44:51.000000000 +0100
@@ -5,10 +5,10 @@
 // Modified by:
 // Created:     11/6/98
-// RCS-ID:      $Id: automtn.cpp,v 1.33 2003/08/14 14:32:07 JS Exp $
+// RCS-ID:      $Id: automtn.cpp,v 1.30 2003/03/28 09:15:01 JS Exp $
 // Copyright:   (c) 1998, Julian Smart
 // Licence:     wxWindows Licence
 /////////////////////////////////////////////////////////////////////////////
 
-#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#ifdef __GNUG__
 #pragma implementation "automtn.h"
 #endif
@@ -29,26 +29,16 @@
 #define _FORCENAMELESSUNION
 #include "wx/log.h"
-#include "wx/msw/private.h"
 #include "wx/msw/ole/oleutils.h"
 #include "wx/msw/ole/automtn.h"
+#include "wx/msw/private.h"
 
 #include <math.h>
-
-#ifdef __WXWINCE__
-#include "wx/msw/wince/time.h"
-#else
 #include <time.h>
-#endif
 
 #include <wtypes.h>
 #include <unknwn.h>
-
 #include <ole2.h>
 #define _huge
-
-#ifndef __WXWINCE__
 #include <ole2ver.h>
-#endif
-
 #include <oleauto.h>
 
@@ -546,8 +536,9 @@
 
 	CLSID clsId;
+    HRESULT hr;
 
 	wxBasicString unicodeName(classId.mb_str());
 	
-	if (FAILED(CLSIDFromProgID((BSTR) unicodeName, &clsId))) 
+	if (FAILED(hr = CLSIDFromProgID((BSTR) unicodeName, &clsId))) 
 	{
 		wxLogWarning(wxT("Cannot obtain CLSID from ProgID"));
@@ -556,5 +547,5 @@
 
 	// start a new copy of Excel, grab the IDispatch interface
-	if (FAILED(CoCreateInstance(clsId, NULL, CLSCTX_LOCAL_SERVER, IID_IDispatch, (void**)&m_dispatchPtr))) 
+	if (FAILED(hr = CoCreateInstance(clsId, NULL, CLSCTX_LOCAL_SERVER, IID_IDispatch, (void**)&m_dispatchPtr))) 
 	{
 		wxLogWarning(wxT("Cannot start an instance of this class."));
@@ -808,4 +799,12 @@
 			break;	// Ignore Empty Variant, used only during destruction of objects
 		}
+// RAC: Implementation of data type currency
+    case VT_CY:
+        {
+            double value = oleVariant.cyVal.int64;
+            double divisor = 10000;
+            variant = value / divisor;
+            break;
+        }
 	default:
 		{
@@ -836,9 +835,15 @@
     wxString str(bStr);
 #else
-	int len = SysStringLen(bStr) + 1;
-	char    *buf = new char[len];
-	(void)wcstombs( buf, bStr, len);
-	wxString str(buf); 
-	delete[] buf;
+    int len = SysStringLen(bStr) + 1;
+    char    *buf = new char[len];
+/* RAC: Special case: If bStr == NULL here it crashes */
+    if ( bStr != NULL ) {
+        (void)wcstombs( buf, bStr, len);
+    }
+    else {
+        *buf = '\0';
+    }
+    wxString str(buf); 
+    delete[] buf;
 #endif
 	return str;
@@ -950,4 +955,5 @@
 		return FALSE;
 
+	long nDays;             // Number of days since Dec. 30, 1899
 	long nDaysAbsolute;     // Number of days since 1/1/0
 	long nSecsInDay;        // Time in seconds since midnight
@@ -964,4 +970,7 @@
 	double dblDate = dtSrc; // tempory serial date
 
+	// If a valid date, then this conversion should not overflow
+	nDays = (long)dblDate;
+
 	// Round to the second
 	dblDate += ((dtSrc > 0.0) ? HALF_SECOND : -HALF_SECOND);
@@ -1178,8 +1187,12 @@
 				SysFreeString(pvarg->bstrVal);
 				break;
-				
+
+            // RAC: to avoid wxLogWarnings some more data types
+            case VT_EMPTY:      // empty
 			case VT_I2:
+            case VT_I4:            // long
 			case VT_BOOL:
 			case VT_R8:
+            case VT_CY:           // Currency
 			case VT_ERROR:		// to avoid erroring on an error return from Excel
 				// no work for these types

 	  	 

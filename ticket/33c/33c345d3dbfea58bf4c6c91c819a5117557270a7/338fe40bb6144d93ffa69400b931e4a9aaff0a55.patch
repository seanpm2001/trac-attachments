Index: include/wx/fontutil.h
===================================================================
--- include/wx/fontutil.h	(revision 72326)
+++ include/wx/fontutil.h	(working copy)
@@ -71,6 +71,12 @@
 public:
 #if wxUSE_PANGO
     PangoFontDescription *description;
+
+    // Pango font description doesn't have these attributes. We maintain them
+    // inside wxNativeFontInfo, so that ToString() and FromString() methods
+    // support them
+    bool m_underlined;
+    bool m_strikethrough;
 #elif defined(_WX_X_FONTLIKE)
     // the members can't be accessed directly as we only parse the
     // xFontName on demand
Index: src/unix/fontutil.cpp
===================================================================
--- src/unix/fontutil.cpp	(revision 72326)
+++ src/unix/fontutil.cpp	(working copy)
@@ -64,14 +64,21 @@
 void wxNativeFontInfo::Init()
 {
     description = NULL;
+    m_underlined = false;
+    m_strikethrough = false;
 }
 
 void wxNativeFontInfo::Init(const wxNativeFontInfo& info)
 {
-    if (info.description)
+    if (info.description) {
         description = pango_font_description_copy(info.description);
-    else
+        m_underlined = info.GetUnderlined();
+        m_strikethrough = info.GetStrikethrough();
+    } else {
         description = NULL;
+        m_underlined = false;
+        m_strikethrough = false;
+    }
 }
 
 void wxNativeFontInfo::Free()
@@ -130,12 +137,12 @@
 
 bool wxNativeFontInfo::GetUnderlined() const
 {
-    return false;
+    return m_underlined;
 }
 
 bool wxNativeFontInfo::GetStrikethrough() const
 {
-    return false;
+    return m_strikethrough;
 }
 
 wxString wxNativeFontInfo::GetFaceName() const
@@ -262,16 +269,18 @@
     }
 }
 
-void wxNativeFontInfo::SetUnderlined(bool WXUNUSED(underlined))
+void wxNativeFontInfo::SetUnderlined(bool underlined)
 {
-    // wxWindowDCImpl::DoDrawText will take care of rendering font with
-    // the underline attribute!
-    wxFAIL_MSG( "not implemented" );
+    // Pango doesn't have the underlined attribute! wxWindowDCImpl::DoDrawText
+    // takes care of rendering it.
+    m_underlined = underlined; 
 }
 
-void wxNativeFontInfo::SetStrikethrough(bool WXUNUSED(strikethrough))
+void wxNativeFontInfo::SetStrikethrough(bool strikethrough)
 {
-    wxFAIL_MSG( "not implemented" );
+    // Pango doesn't have the strikethru attribute! wxWindowDCImpl::DoDrawText
+    // takes care of rendering it.
+    m_strikethrough = strikethrough;
 }
 
 bool wxNativeFontInfo::SetFaceName(const wxString& facename)
@@ -365,6 +374,13 @@
 
 bool wxNativeFontInfo::FromString(const wxString& s)
 {
+    wxString str(s);
+
+    // Pango font description doesn't have 'underlined' or 'strikethrough'
+    // attribues, so we maintain them ourselves
+    m_underlined = str.StartsWith("Underlined ", &str);
+    m_strikethrough = str.StartsWith("Strikethrough ", &str);
+
     if (description)
         pango_font_description_free( description );
 
@@ -375,7 +391,6 @@
     // we do the check on the size here using same (arbitrary) limits used by
     // pango > 1.13. Note that the segfault could happen also for pointsize
     // smaller than this limit !!
-    wxString str(s);
     const size_t pos = str.find_last_of(wxS(" "));
     double size;
     if ( pos != wxString::npos && wxString(str, pos + 1).ToDouble(&size) )
@@ -407,8 +422,16 @@
 wxString wxNativeFontInfo::ToString() const
 {
     wxGtkString str(pango_font_description_to_string( description ));
+    wxString desc = wxPANGO_CONV_BACK(str);
 
-    return wxPANGO_CONV_BACK(str);
+    // Pango font description doesn't have 'underlined' or 'strikethrough'
+    // attribues, so we maintain them ourselves
+    if (m_strikethrough)
+        desc.insert(0, "Strikethrough ");
+    if (m_underlined)
+        desc.insert(0, "Underlined ");
+
+    return desc;
 }
 
 bool wxNativeFontInfo::FromUserString(const wxString& s)
Index: src/gtk/font.cpp
===================================================================
--- src/gtk/font.cpp	(revision 72326)
+++ src/gtk/font.cpp	(working copy)
@@ -92,9 +92,7 @@
     void InitFromNative();
 
 private:
-    bool            m_underlined;
-    bool            m_strikethrough;
-    // The native font info: basically a PangoFontDescription
+    // The native font info: basically a PangoFontDescription, plus 'underlined' and 'strikethrough' attributes
     wxNativeFontInfo m_nativeFontInfo;
 
     friend class wxFont;
@@ -118,9 +116,6 @@
     if (family == wxFONTFAMILY_DEFAULT)
         family = wxFONTFAMILY_SWISS;
 
-    m_underlined = underlined;
-    m_strikethrough = strikethrough;
-
     // Create native font info
     m_nativeFontInfo.description = pango_font_description_new();
 
@@ -140,6 +135,8 @@
                     ? wxDEFAULT_FONT_SIZE
                     : pointSize );
     SetWeight( weight == wxDEFAULT ? wxFONTWEIGHT_NORMAL : weight );
+    SetUnderlined( underlined );
+    SetStrikethrough( strikethrough );
 }
 
 void wxFontRefData::InitFromNative()
@@ -151,18 +148,11 @@
     int pango_size = pango_font_description_get_size( desc );
     if (pango_size == 0)
         m_nativeFontInfo.SetPointSize(wxDEFAULT_FONT_SIZE);
-
-    // Pango description are never underlined
-    m_underlined = false;
-    m_strikethrough = false;
 }
 
 wxFontRefData::wxFontRefData( const wxFontRefData& data )
              : wxGDIRefData()
 {
-    m_underlined = data.m_underlined;
-    m_strikethrough = data.m_strikethrough;
-
     // Forces a copy of the internal data.  wxNativeFontInfo should probably
     // have a copy ctor and assignment operator to fix this properly but that
     // would break binary compatibility...
@@ -243,17 +233,12 @@
 
 void wxFontRefData::SetUnderlined(bool underlined)
 {
-    m_underlined = underlined;
-
-    // the Pango font descriptor does not have an underlined attribute
-    // (and wxNativeFontInfo::SetUnderlined asserts); rather it's
-    // wxWindowDCImpl::DoDrawText that handles underlined fonts, so we
-    // here we just need to save the underlined attribute
+    m_nativeFontInfo.SetUnderlined(underlined);
 }
 
 void wxFontRefData::SetStrikethrough(bool strikethrough)
 {
-    m_strikethrough = strikethrough;
+    m_nativeFontInfo.SetStrikethrough(strikethrough);
 }
 
 bool wxFontRefData::SetFaceName(const wxString& facename)
@@ -378,14 +363,14 @@
 {
     wxCHECK_MSG( IsOk(), false, wxT("invalid font") );
 
-    return M_FONTDATA->m_underlined;
+    return M_FONTDATA->m_nativeFontInfo.GetUnderlined();
 }
 
 bool wxFont::GetStrikethrough() const
 {
     wxCHECK_MSG( IsOk(), false, wxT("invalid font") );
 
-    return M_FONTDATA->m_strikethrough;
+    return M_FONTDATA->m_nativeFontInfo.GetStrikethrough();
 }
 
 wxFontEncoding wxFont::GetEncoding() const

Index: include/wx/filesys.h
===================================================================
--- include/wx/filesys.h	(revision 3381)
+++ include/wx/filesys.h	(working copy)
@@ -293,8 +293,30 @@
     static wxString ms_root;
 };
 
+class WXDLLIMPEXP_BASE wxFSInputStream : public wxInputStream
+{
+public:
+    wxFSInputStream(const wxString& ifileName, int flags = 0);
+    virtual ~wxFSInputStream();
 
+    wxFileOffset GetLength() const;
 
+    bool IsSeekable() const;
+
+protected:
+    wxFSInputStream();
+
+    size_t OnSysRead(void *buffer, size_t size);
+    wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
+    wxFileOffset OnSysTell() const;
+
+protected:
+    wxFSFile *m_file;
+    wxInputStream *m_inputStream;
+
+    wxDECLARE_NO_COPY_CLASS(wxFSInputStream);
+};
+
 #endif
   // wxUSE_FILESYSTEM
 
Index: src/common/filesys.cpp
===================================================================
--- src/common/filesys.cpp	(revision 3381)
+++ src/common/filesys.cpp	(working copy)
@@ -756,5 +756,85 @@
 
 IMPLEMENT_DYNAMIC_CLASS(wxFileSystemModule, wxModule)
 
+//// wxFSInputStream
+
+struct wxFSInputStream_LastErrorSynchronizer
+{
+    wxFSInputStream_LastErrorSynchronizer(wxFSInputStream& stream,
+        wxInputStream &base_stream)
+        : m_stream(stream), m_base_stream(base_stream) {}
+
+    ~wxFSInputStream_LastErrorSynchronizer() {
+        m_stream.Reset(m_base_stream.GetLastError());
+    }
+
+    wxFSInputStream& m_stream;
+    const wxInputStream &m_base_stream;
+};
+
+wxFSInputStream::wxFSInputStream(const wxString& ifileName, int flags)
+: m_file(NULL), m_inputStream(NULL)
+{
+    wxFileSystem fs;
+    m_file = fs.OpenFile (ifileName, flags|wxFS_READ);
+    if (m_file)
+        m_inputStream = m_file->GetStream();
+
+    if (m_inputStream)
+        m_lasterror = m_inputStream->GetLastError();
+    else
+        m_lasterror = wxSTREAM_READ_ERROR;
+}
+
+wxFSInputStream::~wxFSInputStream()
+{
+    delete m_file;
+}
+
+wxFileOffset wxFSInputStream::GetLength() const
+{
+    wxCHECK_MSG(m_inputStream, wxInvalidOffset, "Stream not valid");
+
+    wxFSInputStream_LastErrorSynchronizer (const_cast<wxFSInputStream&>(*this), *m_inputStream);
+    return m_inputStream->GetLength();
+}
+
+bool wxFSInputStream::IsSeekable() const
+{
+    wxCHECK_MSG(m_inputStream, false, "Stream not valid");
+    return m_inputStream->IsSeekable();
+}
+
+wxFSInputStream::wxFSInputStream()
+    :m_file(NULL), m_inputStream(NULL)
+{
+}
+
+size_t wxFSInputStream::OnSysRead(void *buffer, size_t size)
+{
+    wxCHECK_MSG(m_inputStream, false, "Stream not valid");
+
+    wxFSInputStream_LastErrorSynchronizer (*this, *m_inputStream);
+
+    m_inputStream->Read (buffer, size);
+    return m_inputStream->LastRead();
+}
+
+wxFileOffset wxFSInputStream::OnSysSeek(wxFileOffset pos, wxSeekMode mode)
+{
+    wxCHECK_MSG(IsSeekable(), false, "Stream not seekable");
+
+    wxFSInputStream_LastErrorSynchronizer (*this, *m_inputStream);
+    return m_inputStream->SeekI (pos, mode);
+}
+
+wxFileOffset wxFSInputStream::OnSysTell() const
+{
+    wxCHECK_MSG(m_inputStream, false, "Stream not valid");
+
+    wxFSInputStream_LastErrorSynchronizer (const_cast<wxFSInputStream&>(*this), *m_inputStream);
+    return m_inputStream->TellI();
+}
+
 #endif
   // wxUSE_FILESYSTEM

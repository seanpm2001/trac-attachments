Index: src/msw/choice.cpp
===================================================================
--- src/msw/choice.cpp	(revisión: 72781)
+++ src/msw/choice.cpp	(copia de trabajo)
@@ -585,39 +585,6 @@
 #endif // wxUSE_DEFERRED_SIZING
 }
 
-wxSize wxChoice::DoGetBestSize() const
-{
-    // find the widest string
-    int wChoice = 0;
-    int hChoice;
-    const unsigned int nItems = GetCount();
-    for ( unsigned int i = 0; i < nItems; i++ )
-    {
-        int wLine;
-        GetTextExtent(GetString(i), &wLine, NULL);
-        if ( wLine > wChoice )
-            wChoice = wLine;
-    }
-
-    // give it some reasonable default value if there are no strings in the
-    // list
-    if ( wChoice == 0 )
-        wChoice = 100;
-
-    // the combobox should be slightly larger than the widest string
-    wChoice += 5*GetCharWidth();
-    if( HasFlag( wxCB_SIMPLE ) )
-    {
-        hChoice = SetHeightSimpleComboBox( nItems );
-    }
-    else
-        hChoice = EDIT_HEIGHT_FROM_CHAR_HEIGHT(GetCharHeight());
-
-    wxSize best(wChoice, hChoice);
-    CacheBestSize(best);
-    return best;
-}
-
 int wxChoice::SetHeightSimpleComboBox(int nItems) const
 {
     int cx, cy;
Index: src/gtk/choice.cpp
===================================================================
--- src/gtk/choice.cpp	(revisión: 72781)
+++ src/gtk/choice.cpp	(copia de trabajo)
@@ -343,37 +343,6 @@
     return gtk_widget_get_window(m_widget);
 }
 
-// Notice that this method shouldn't be necessary, because GTK calculates
-// properly size of the combobox but for unknown reasons it doesn't work
-// correctly in wx without this.
-wxSize wxChoice::DoGetBestSize() const
-{
-    // strangely, this returns a width of 188 pixels from GTK+ (?)
-    wxSize ret( wxControl::DoGetBestSize() );
-
-    // we know better our horizontal extent: it depends on the longest string
-    // in the combobox
-    if ( m_widget )
-    {
-        ret.x = GetCount() > 0 ? 0 : 60;  // start with something "sensible"
-        int width;
-        unsigned int count = GetCount();
-        for ( unsigned int n = 0; n < count; n++ )
-        {
-            GetTextExtent(GetString(n), &width, NULL, NULL, NULL );
-            if ( width + 40 > ret.x ) // 40 for drop down arrow and space around text
-                ret.x = width + 40;
-        }
-    }
-
-    // empty combobox should have some reasonable default size too
-    if ((GetCount() == 0) && (ret.x < 80))
-        ret.x = 80;
-
-    CacheBestSize(ret);
-    return ret;
-}
-
 void wxChoice::DoApplyWidgetStyle(GtkRcStyle *style)
 {
     GTKApplyStyle(m_widget, style);
Index: src/common/choiccmn.cpp
===================================================================
--- src/common/choiccmn.cpp	(revisión: 72781)
+++ src/common/choiccmn.cpp	(copia de trabajo)
@@ -28,6 +28,10 @@
 
 #include "wx/choice.h"
 
+#if defined(__WXMSW__) || defined(__WXGTK20__)
+    #include "wx/private/textmeasure.h"
+#endif
+
 #ifndef WX_PRECOMP
 #endif
 
@@ -113,4 +117,49 @@
     (void)GetEventHandler()->ProcessEvent(event);
 }
 
+#if defined(__WXMSW__) || defined(__WXGTK20__)
+wxSize wxChoiceBase::DoGetBestSize() const
+{
+    wxSize best(-1, -1);
+#if defined(__WXGTK20__)
+    best = wxControl::DoGetBestSize();
+#endif
+
+    const unsigned int nItems = GetCount();
+    if ( nItems > 0 )
+    {
+        // ensure we work with a valid font
+        const wxFont font = GetFont();
+        wxASSERT_MSG( font.IsOk(), wxS("invalid font") );
+
+        const wxWindow* win = static_cast<const wxWindow*>(this);
+        wxTextMeasure txm(win, &font);
+        wxSize tmp( txm.GetLargestStringExtent(GetStrings()) );
+
+        // add place for margins and drop arrow
+        tmp.IncBy(8 + 2 * tmp.y, 0);
+        // keep default control's height
+        best.SetWidth(tmp.x);
+    }
+    else
+    {
+        // a reasonable size for an empty choice list
+        best.SetWidth(80);
+    }
+
+    if ( best.y < 0 )
+        best.SetHeight( GetCharHeight() + 8 );
+
+#if defined(__WXMSW__)
+    if( HasFlag( wxCB_SIMPLE ) )
+    {
+        best.IncBy(0, (GetCharHeight() + 8) * wxMin( wxMax( nItems, 3 ), 6 ) - 1);
+    }
+#endif // __WXMSW__
+
+    CacheBestSize(best);
+    return best;
+}
+#endif //__WXMSW__ || __WXGTK20__
+
 #endif // wxUSE_CHOICE
Index: include/wx/choice.h
===================================================================
--- include/wx/choice.h	(revisión: 72781)
+++ include/wx/choice.h	(copia de trabajo)
@@ -58,6 +58,12 @@
     // override wxItemContainer::IsSorted
     virtual bool IsSorted() const { return HasFlag(wxCB_SORT); }
 
+#if defined(__WXMSW__) || defined(__WXGTK20__)
+protected:
+    // common to wxMSW and wxGTK
+    virtual wxSize DoGetBestSize() const;
+#endif
+
 private:
     wxDECLARE_NO_COPY_CLASS(wxChoiceBase);
 };
Index: include/wx/msw/choice.h
===================================================================
--- include/wx/msw/choice.h	(revisión: 72781)
+++ include/wx/msw/choice.h	(copia de trabajo)
@@ -120,7 +120,6 @@
     virtual void* DoGetItemClientData(unsigned int n) const;
 
     // MSW implementation
-    virtual wxSize DoGetBestSize() const;
     virtual void DoGetSize(int *w, int *h) const;
     virtual void DoSetSize(int x, int y,
                            int width, int height,
Index: include/wx/gtk/choice.h
===================================================================
--- include/wx/gtk/choice.h	(revisión: 72781)
+++ include/wx/gtk/choice.h	(copia de trabajo)
@@ -94,7 +94,6 @@
     // index to GtkListStore cell which displays the item text
     int m_stringCellIndex;
 
-    virtual wxSize DoGetBestSize() const;
     virtual int DoInsertItems(const wxArrayStringsAdapter& items,
                               unsigned int pos,
                               void **clientData, wxClientDataType type);


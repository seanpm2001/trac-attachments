Index: src/msw/choice.cpp
===================================================================
--- src/msw/choice.cpp	(revisión: 72621)
+++ src/msw/choice.cpp	(copia de trabajo)
@@ -37,6 +37,7 @@
 #endif
 
 #include "wx/msw/private.h"
+#include "wx/private/textmeasure.h"
 
 // ============================================================================
 // implementation
@@ -591,12 +592,22 @@
     int wChoice = 0;
     int hChoice;
     const unsigned int nItems = GetCount();
-    for ( unsigned int i = 0; i < nItems; i++ )
+
+    if ( nItems > 0 )
     {
-        int wLine;
-        GetTextExtent(GetString(i), &wLine, NULL);
-        if ( wLine > wChoice )
-            wChoice = wLine;
+        wxVector<wxString> veStrings;
+        veStrings.reserve((size_t)nItems);
+        for (unsigned int n = 0; n < nItems; n++)
+        {
+            veStrings.push_back(GetString(n));
+        }
+
+        // ensure we work with a valid font
+        const wxFont font = GetFont();
+        wxASSERT_MSG( font.IsOk(), wxT("invalid font") );
+
+        wxTextMeasure txm(this, &font);
+        txm.GetLargestStringExtent(veStrings, &wChoice, &hChoice);
     }
 
     // give it some reasonable default value if there are no strings in the
Index: src/gtk/choice.cpp
===================================================================
--- src/gtk/choice.cpp	(revisión: 72621)
+++ src/gtk/choice.cpp	(copia de trabajo)
@@ -20,6 +20,7 @@
 #include <gtk/gtk.h>
 #include "wx/gtk/private.h"
 #include "wx/gtk/private/gtk2-compat.h"
+#include "wx/private/textmeasure.h"
 
 // ----------------------------------------------------------------------------
 // GTK callbacks
@@ -356,21 +357,37 @@
 
     // we know better our horizontal extent: it depends on the longest string
     // in the combobox
+    unsigned int ccount = GetCount();
     if ( m_widget )
     {
-        ret.x = GetCount() > 0 ? 0 : 60;  // start with something "sensible"
-        int width;
-        unsigned int count = GetCount();
-        for ( unsigned int n = 0; n < count; n++ )
+        wxCoord width = 0, height = 0;
+        if ( ccount > 0 )
         {
-            GetTextExtent(GetString(n), &width, NULL, NULL, NULL );
-            if ( width + 40 > ret.x ) // 40 for drop down arrow and space around text
-                ret.x = width + 40;
+            wxVector<wxString> veStrings;
+            veStrings.reserve((size_t)ccount);
+            for (unsigned int n = 0; n < ccount; n++)
+            {
+                veStrings.push_back(GetString(n));
+            }
+
+            // ensure we work with a valid font
+            const wxFont font = GetFont();
+            wxASSERT_MSG( font.IsOk(), wxT("invalid font") );
+
+            wxTextMeasure txm(this, &font);
+            txm.GetLargestStringExtent(veStrings, &width, &height);
         }
+
+        // dimensions
+        ret.x = ccount > 0 ? 0 : 60;  // start with something "sensible"
+        if ( width + 40 > ret.x ) // 40 for drop down arrow and space around text
+            ret.x = width + 40;
+        if ( height > ret.y )
+            ret.y = height;
     }
 
     // empty combobox should have some reasonable default size too
-    if ((GetCount() == 0) && (ret.x < 80))
+    if ((ccount == 0) && (ret.x < 80))
         ret.x = 80;
 
     CacheBestSize(ret);

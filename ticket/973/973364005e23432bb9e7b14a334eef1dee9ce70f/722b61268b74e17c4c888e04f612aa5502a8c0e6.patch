Index: src/msw/choice.cpp
===================================================================
--- src/msw/choice.cpp	(revisi贸n: 72818)
+++ src/msw/choice.cpp	(copia de trabajo)
@@ -587,34 +587,15 @@
 
 wxSize wxChoice::DoGetBestSize() const
 {
-    // find the widest string
-    int wChoice = 0;
-    int hChoice;
-    const unsigned int nItems = GetCount();
-    for ( unsigned int i = 0; i < nItems; i++ )
-    {
-        int wLine;
-        GetTextExtent(GetString(i), &wLine, NULL);
-        if ( wLine > wChoice )
-            wChoice = wLine;
-    }
+    // The base version returns the size of the largest string
+    wxSize best( wxChoiceBase::DoGetBestSize() );
 
-    // give it some reasonable default value if there are no strings in the
-    // list
-    if ( wChoice == 0 )
-        wChoice = 100;
-
-    // the combobox should be slightly larger than the widest string
-    wChoice += 5*GetCharWidth();
+    // set height on our own
     if( HasFlag( wxCB_SIMPLE ) )
-    {
-        hChoice = SetHeightSimpleComboBox( nItems );
-    }
+        best.SetHeight( SetHeightSimpleComboBox(GetCount()) );
     else
-        hChoice = EDIT_HEIGHT_FROM_CHAR_HEIGHT(GetCharHeight());
+        best.SetHeight( EDIT_HEIGHT_FROM_CHAR_HEIGHT(GetCharHeight()) );
 
-    wxSize best(wChoice, hChoice);
-    CacheBestSize(best);
     return best;
 }
 
Index: src/gtk/choice.cpp
===================================================================
--- src/gtk/choice.cpp	(revisi贸n: 72818)
+++ src/gtk/choice.cpp	(copia de trabajo)
@@ -343,34 +343,16 @@
     return gtk_widget_get_window(m_widget);
 }
 
-// Notice that this method shouldn't be necessary, because GTK calculates
-// properly size of the combobox but for unknown reasons it doesn't work
-// correctly in wx without this.
+
 wxSize wxChoice::DoGetBestSize() const
 {
     // strangely, this returns a width of 188 pixels from GTK+ (?)
     wxSize ret( wxControl::DoGetBestSize() );
 
-    // we know better our horizontal extent: it depends on the longest string
-    // in the combobox
-    if ( m_widget )
-    {
-        ret.x = GetCount() > 0 ? 0 : 60;  // start with something "sensible"
-        int width;
-        unsigned int count = GetCount();
-        for ( unsigned int n = 0; n < count; n++ )
-        {
-            GetTextExtent(GetString(n), &width, NULL, NULL, NULL );
-            if ( width + 40 > ret.x ) // 40 for drop down arrow and space around text
-                ret.x = width + 40;
-        }
-    }
+    // The base version returns the size of the largest string
+    wxSize ssize( wxChoiceBase::DoGetBestSize() );
+    ret.SetWidth( ssize.x );
 
-    // empty combobox should have some reasonable default size too
-    if ((GetCount() == 0) && (ret.x < 80))
-        ret.x = 80;
-
-    CacheBestSize(ret);
     return ret;
 }
 
Index: src/common/choiccmn.cpp
===================================================================
--- src/common/choiccmn.cpp	(revisi贸n: 72818)
+++ src/common/choiccmn.cpp	(copia de trabajo)
@@ -28,6 +28,8 @@
 
 #include "wx/choice.h"
 
+#include "wx/private/textmeasure.h"
+
 #ifndef WX_PRECOMP
 #endif
 
@@ -103,6 +105,35 @@
     // this destructor is required for Darwin
 }
 
+wxSize wxChoiceBase::DoGetBestSize() const
+{
+    // a reasonable width for an empty choice list
+    wxSize best(80, -1);
+
+#if !wxUSE_GENERIC_TEXTMEASURE
+    const unsigned int nItems = GetCount();
+    if ( nItems > 0 )
+    {
+        // ensure we work with a valid font
+        const wxFont font = GetFont();
+        wxASSERT_MSG( font.IsOk(), wxS("invalid font") );
+
+        const wxWindow* win = static_cast<const wxWindow*>(this);
+        wxTextMeasure txm(win, &font);
+        wxSize tmp( txm.GetLargestStringExtent(GetStrings()) );
+
+        // add place for margins and drop arrow
+        tmp.IncBy(8 + 2 * tmp.y, 0);
+        // keep default control's height
+        best.SetWidth(tmp.x);
+    }
+#else
+    best.SetHeight( GetCharHeight() + 8 );
+#endif // wxUSE_GENERIC_TEXTMEASURE
+
+    return best;
+}
+
 // ----------------------------------------------------------------------------
 // misc
 // ----------------------------------------------------------------------------
Index: include/wx/choice.h
===================================================================
--- include/wx/choice.h	(revisi贸n: 72818)
+++ include/wx/choice.h	(copia de trabajo)
@@ -58,6 +58,10 @@
     // override wxItemContainer::IsSorted
     virtual bool IsSorted() const { return HasFlag(wxCB_SORT); }
 
+protected:
+    // common to wxMSW and wxGTK. Returns some default for the rest
+    virtual wxSize DoGetBestSize() const;
+
 private:
     wxDECLARE_NO_COPY_CLASS(wxChoiceBase);
 };


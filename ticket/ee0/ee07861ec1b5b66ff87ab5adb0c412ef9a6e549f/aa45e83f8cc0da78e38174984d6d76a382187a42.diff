Index: samples/calendar/calendar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/calendar/calendar.cpp,v
retrieving revision 1.25
diff -b -u -2 -r1.25 calendar.cpp
--- samples/calendar/calendar.cpp	2004/10/02 12:35:45	1.25
+++ samples/calendar/calendar.cpp	2004/11/06 21:30:52
@@ -3,5 +3,5 @@
 // Purpose:     wxCalendarCtrl sample
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Antti Merenluoto
 // Created:     02.01.00
 // RCS-ID:      $Id: calendar.cpp,v 1.25 2004/10/02 12:35:45 VS Exp $
@@ -10,4 +10,15 @@
 /////////////////////////////////////////////////////////////////////////////
 
+// Modification notes: 
+//  As I increased the number of configured colours I realized that I needed an application to
+//  test the different combinations. Instead of making separate application, I added the code in
+//  here. I hope it does not prevent anyone from seeing wood from trees. With new code
+//  this sample additionally demonstrates:
+//  - Deriving and using wxDateTimeHolidayAuthority
+//  - Declaring and sending custom events. 
+//  - Catching mouse clicks responding to them. 
+//  - Using ready wx controls and owner draw items in the same window. 
+//   (AM)
+
 // ============================================================================
 // declarations
@@ -44,4 +55,12 @@
 #include "wx/sizer.h"
 #include "wx/calctrl.h"
+#include "wx/colordlg.h"
+#include "wx/filedlg.h"
+#include "wx/ffile.h"
+
+// ----------------------------------------------------------------------------
+// private constants
+// ----------------------------------------------------------------------------
+const int MAX_COLOURTYPES = 5;
 
 // ----------------------------------------------------------------------------
@@ -62,4 +81,5 @@
 };
 
+// ............................................................................
 class MyPanel : public wxPanel
 {
@@ -80,14 +100,24 @@
     void HighlightSpecial(bool on);
 
-    void SetDate();
-    void Today();
-    
 private:
+    void OnPaint(wxPaintEvent& event);
+    void OnClick(wxMouseEvent& event);
+
+    void OnChangeFgColor(wxCommandEvent &event);
+    void OnChangeBgColor(wxCommandEvent &event);
+
     wxCalendarCtrl *m_calendar;
-    wxStaticText   *m_date;
+    wxFrame *frame;
+    wxPoint colourPosition[MAX_COLOURTYPES];
 
     DECLARE_EVENT_TABLE()
 };
 
+// ............................................................................
+BEGIN_DECLARE_EVENT_TYPES()
+    DECLARE_EVENT_TYPE(EVT_FGCOLOR_CHANGED, 0)
+    DECLARE_EVENT_TYPE(EVT_BGCOLOR_CHANGED, 0)
+END_DECLARE_EVENT_TYPES()
+
 // Define a new frame type: this is going to be our main frame
 class MyFrame : public wxFrame
@@ -98,4 +128,5 @@
 
     // event handlers (these functions should _not_ be virtual)
+    void ExportColours(wxCommandEvent& event);
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
@@ -108,12 +139,16 @@
     void OnCalAllowYear(wxCommandEvent& event);
 
-    void OnCalSeqMonth(wxCommandEvent& event);
     void OnCalShowSurroundingWeeks(wxCommandEvent& event);
-
-    void OnSetDate(wxCommandEvent& event);
-    void OnToday(wxCommandEvent& event);
-
     void OnAllowYearUpdate(wxUpdateUIEvent& event);
 
+    void OnCalWeekNumbers(wxCommandEvent &event);
+    void OnSatAsHoliday(wxCommandEvent &event);
+    void OnNarrow(wxCommandEvent &event);
+
+    void OnCalShortDayNames(wxCommandEvent &event);
+    void OnSizeSmall(wxCommandEvent &event);
+    void OnSizeDefault(wxCommandEvent &event);
+    void OnSizeLarge(wxCommandEvent &event);
+
 private:
     MyPanel *m_panel;
@@ -123,8 +158,21 @@
 };
 
+// ............................................................................
+class MyHolidays : public wxDateTimeHolidayAuthority
+{
+protected:
+    virtual bool DoIsHoliday(const wxDateTime& dt) const;
+    virtual size_t DoGetHolidaysInRange(const wxDateTime& dtStart,
+                                        const wxDateTime& dtEnd,
+                                        wxDateTimeArray& holidays) const;
+};
+
 // ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
+const int CAL_X_COORD = 160;
+const int CAL_Y_COORD = 30;
+
 // IDs for the controls and the menu commands
 enum
@@ -132,4 +180,5 @@
     // menu items
     Calendar_File_About = 100,
+    Calendar_File_ExportColours,
     Calendar_File_Quit,
     Calendar_Cal_Monday = 200,
@@ -138,11 +187,19 @@
     Calendar_Cal_Month,
     Calendar_Cal_Year,
-    Calendar_Cal_SeqMonth,
     Calendar_Cal_SurroundWeeks,
-    Calendar_Cal_SetDate,
-    Calendar_Cal_Today,
+    Calendar_Cal_WeekNumbers,
+    Calendar_Cal_SatAsHoliday,
+    Calendar_Cal_Narrow,
+    Calendar_Size_ShortDayNames,
+    Calendar_Size_Small,
+    Calendar_Size_Default,
+    Calendar_Size_Large,
     Calendar_CalCtrl = 1000
 };
 
+// Custom events for MyPanel
+DEFINE_EVENT_TYPE(EVT_FGCOLOR_CHANGED)
+DEFINE_EVENT_TYPE(EVT_BGCOLOR_CHANGED)
+
 // ----------------------------------------------------------------------------
 // event tables and other macros for wxWidgets
@@ -154,4 +211,5 @@
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Calendar_File_Quit,  MyFrame::OnQuit)
+    EVT_MENU(Calendar_File_ExportColours, MyFrame::ExportColours)
     EVT_MENU(Calendar_File_About, MyFrame::OnAbout)
 
@@ -162,16 +220,21 @@
     EVT_MENU(Calendar_Cal_Month, MyFrame::OnCalAllowMonth)
     EVT_MENU(Calendar_Cal_Year, MyFrame::OnCalAllowYear)
+    EVT_UPDATE_UI(Calendar_Cal_Year, MyFrame::OnAllowYearUpdate)
 
-    EVT_MENU(Calendar_Cal_SeqMonth, MyFrame::OnCalSeqMonth)
     EVT_MENU(Calendar_Cal_SurroundWeeks, MyFrame::OnCalShowSurroundingWeeks)
 
-    EVT_MENU(Calendar_Cal_SetDate, MyFrame::OnSetDate)
-    EVT_MENU(Calendar_Cal_Today, MyFrame::OnToday)
+    EVT_MENU(Calendar_Cal_WeekNumbers, MyFrame::OnCalWeekNumbers)
+    EVT_MENU(Calendar_Cal_SatAsHoliday, MyFrame::OnSatAsHoliday)
+    EVT_MENU(Calendar_Cal_Narrow, MyFrame::OnNarrow)
+    EVT_MENU(Calendar_Size_ShortDayNames, MyFrame::OnCalShortDayNames)
+    EVT_MENU(Calendar_Size_Small, MyFrame::OnSizeSmall)
+    EVT_MENU(Calendar_Size_Default, MyFrame::OnSizeDefault)
+    EVT_MENU(Calendar_Size_Large, MyFrame::OnSizeLarge)
 
-
-    EVT_UPDATE_UI(Calendar_Cal_Year, MyFrame::OnAllowYearUpdate)
 END_EVENT_TABLE()
 
 BEGIN_EVENT_TABLE(MyPanel, wxPanel)
+    EVT_PAINT(MyPanel::OnPaint)
+    EVT_LEFT_DOWN(MyPanel::OnClick)
     EVT_CALENDAR            (Calendar_CalCtrl,   MyPanel::OnCalendar)
     EVT_CALENDAR_MONTH      (Calendar_CalCtrl,   MyPanel::OnCalMonthChange)
@@ -179,4 +242,6 @@
     EVT_CALENDAR_SEL_CHANGED(Calendar_CalCtrl,   MyPanel::OnCalendarChange)
     EVT_CALENDAR_WEEKDAY_CLICKED(Calendar_CalCtrl, MyPanel::OnCalendarWeekDayClick)
+    EVT_COMMAND(0,EVT_FGCOLOR_CHANGED,MyPanel::OnChangeFgColor)
+    EVT_COMMAND(0,EVT_BGCOLOR_CHANGED,MyPanel::OnChangeBgColor)
 END_EVENT_TABLE()
 
@@ -223,4 +288,5 @@
 
     menuFile->Append(Calendar_File_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(Calendar_File_ExportColours, _T("&Export colours..."), _T("Exports current colours into a disk file."));
     menuFile->AppendSeparator();
     menuFile->Append(Calendar_File_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
@@ -242,17 +308,28 @@
                     true);
     menuCal->AppendSeparator();
-    menuCal->Append(Calendar_Cal_SeqMonth,
-                    _T("To&ggle month selector style\tCtrl-G"),
-                    _T("Use another style for the calendar controls"),
-                    true);
-    menuCal->Append(Calendar_Cal_Month, _T("&Month can be changed\tCtrl-M"),
-                    _T("Allow changing the month in the calendar"),
-                    true);
-    menuCal->Append(Calendar_Cal_Year, _T("&Year can be changed\tCtrl-Y"),
-                    _T("Allow changing the year in the calendar"),
-                    true);
+    menuCal->Append(Calendar_Cal_Month, _T("Hide &Month change arrow\tCtrl-M"),
+                    _T("Hides the month change arrow."),
+                    TRUE);
+    menuCal->Append(Calendar_Cal_Year, _T("Hide &Year change arrow\tCtrl-Y"),
+                    _T("Hides the year change arrow."),
+                    TRUE);
     menuCal->AppendSeparator();
-    menuCal->Append(Calendar_Cal_SetDate, _T("SetDate()"), _T("Set date to 2005-12-24."));
-    menuCal->Append(Calendar_Cal_Today, _T("Today()"), _T("Set the current date."));
+    menuCal->Append(Calendar_Cal_WeekNumbers, _T("&Week number display"),
+                    _T("Shows/hides week numbers on the left of day numbers"),
+                    TRUE);
+    menuCal->Append(Calendar_Cal_SatAsHoliday, _T("S&aturday is holiday"),
+                    _T("Shows Saturdays as a normal day or a holiday."),
+                    TRUE);
+    menuCal->Append(Calendar_Cal_Narrow, _T("&Narrow to current year"),
+                    _T("Allows user to choose only days within the current year."),
+                    TRUE);
+
+    wxMenu *menuSize = new wxMenu;
+    menuSize->Append(Calendar_Size_ShortDayNames, _T("Sh&ort day names"),
+                    _T("Toggles between two and three letter week day names."),
+                    TRUE);
+    menuSize->Append(Calendar_Size_Small , _T("&Small"), _T("Make calendar small"));
+    menuSize->Append(Calendar_Size_Default , _T("&Default"), _T("Make calendar resize to default size"));
+    menuSize->Append(Calendar_Size_Large , _T("&Large"), _T("Make calendar large"));
 
     // now append the freshly created menu to the menu bar...
@@ -260,9 +337,9 @@
     menuBar->Append(menuFile, _T("&File"));
     menuBar->Append(menuCal, _T("&Calendar"));
+    menuBar->Append(menuSize, _T("&Size"));
 
     menuBar->Check(Calendar_Cal_Monday, true);
     menuBar->Check(Calendar_Cal_Holidays, true);
-    menuBar->Check(Calendar_Cal_Month, true);
-    menuBar->Check(Calendar_Cal_Year, true);
+    menuBar->Check(Calendar_Cal_SatAsHoliday,TRUE);
 
     // ... and attach this menu bar to the frame
@@ -312,6 +389,5 @@
 {
     bool allow = GetMenuBar()->IsChecked(event.GetId());
-
-    m_panel->GetCal()->EnableMonthChange(allow);
+    m_panel->ToggleCalStyle(allow, wxCAL_NO_MONTH_CHANGE);
 }
 
@@ -319,63 +395,212 @@
 {
     bool allow = GetMenuBar()->IsChecked(event.GetId());
-
-    m_panel->GetCal()->EnableYearChange(allow);
+    m_panel->ToggleCalStyle(allow, wxCAL_NO_YEAR_CHANGE);
 }
 
-void MyFrame::OnCalSeqMonth(wxCommandEvent& event)
+void MyFrame::OnCalShowSurroundingWeeks(wxCommandEvent& event)
 {
     bool allow = GetMenuBar()->IsChecked(event.GetId());
+    m_panel->ToggleCalStyle(allow, wxCAL_SHOW_SURROUNDING_WEEKS);
+}
 
-    m_panel->ToggleCalStyle(allow, wxCAL_SEQUENTIAL_MONTH_SELECTION);
+void MyFrame::OnAllowYearUpdate(wxUpdateUIEvent& event)
+{
+    event.Enable( !GetMenuBar()->IsChecked(Calendar_Cal_Month));
 }
 
-void MyFrame::OnCalShowSurroundingWeeks(wxCommandEvent& event)
+void MyFrame::OnCalWeekNumbers(wxCommandEvent &event)
 {
-    bool allow = GetMenuBar()->IsChecked(event.GetId());
+    bool enable = GetMenuBar()->IsChecked(event.GetId());
+    m_panel->GetCal()->EnableWeekNumberDisplay(enable);
+}
 
-    m_panel->ToggleCalStyle(allow, wxCAL_SHOW_SURROUNDING_WEEKS);
+void MyFrame::OnCalShortDayNames(wxCommandEvent &event)
+{
+    bool enable = GetMenuBar()->IsChecked(event.GetId());
+    m_panel->GetCal()->EnableShortDayName(enable);
+
+    wxSize best = m_panel->GetCal()->GetBestSize();
+    m_panel->GetCal()->SetSize(CAL_X_COORD,CAL_Y_COORD,best.GetWidth(),best.GetHeight());
 }
 
-void MyFrame::OnAllowYearUpdate(wxUpdateUIEvent& event)
+void MyFrame::OnSatAsHoliday(wxCommandEvent &event)
+{
+    /* In this case it is more feasible to work with the wxDateTimeHolidayAuthority instead of
+       individually turning off and on the Saturdays. The wxDateTimeWorkDays authority is
+       supplied by wx libary. It includes Saturdays as holidays by default. Our own class has
+       only Sundays as holidays.
+     */
+    bool enable = GetMenuBar()->IsChecked(event.GetId());
+    wxDateTimeHolidayAuthority::ClearAllAuthorities();
+    if(enable)
+        wxDateTimeHolidayAuthority::AddAuthority(new wxDateTimeWorkDays);
+    else
+        wxDateTimeHolidayAuthority::AddAuthority(new MyHolidays);
+    m_panel->GetCal()->NoteHolidayChange();
+}
+  
+void MyFrame::OnNarrow(wxCommandEvent &event)
+{
+    bool enable = GetMenuBar()->IsChecked(event.GetId());
+    if(enable)
+    {
+        // Calculate the limits, in this case the first and last day of current year.
+        wxDateTime start = wxDateTime::Now();
+        wxDateTime end = start;
+        start.SetToYearDay(1);
+        end.SetMonth(wxDateTime::Dec);
+        end.SetToLastMonthDay();
+        m_panel->GetCal()->SetDateRange(start,end);
+    }
+    else
+        m_panel->GetCal()->SetDateRange();
+}
+  
+// ----------------------------------------------------------------------------
+// Various calendar sizes
+// ----------------------------------------------------------------------------
+
+void MyFrame::OnSizeSmall(wxCommandEvent& WXUNUSED(event))
 {
-    event.Enable( GetMenuBar()->IsChecked(Calendar_Cal_Month));
+    /* I wanted to try how the control looks with a font designed for small print.  This is not
+       going to look much different from the default size unless you get and install Silkscreen
+       font: http://www.kottke.org/plus/type/silkscreen/ or use any other font with same
+       characteristics. The Silkscreen is free for personal and commercial use. -AM
+    */
+    wxFont normal(7,wxDEFAULT,wxNORMAL,wxNORMAL,FALSE,"Silkscreen");
+    wxFont title(7,wxDEFAULT,wxNORMAL,wxNORMAL,FALSE,"Silkscreen");
+
+    m_panel->GetCal()->SetFont(normal);
+    m_panel->GetCal()->SetTitleFont(title);
+
+    wxSize best = m_panel->GetCal()->GetBestSize();
+    m_panel->GetCal()->SetSize(CAL_X_COORD,CAL_Y_COORD,best.GetWidth(),best.GetHeight());
+}
+
+void MyFrame::OnSizeDefault(wxCommandEvent& WXUNUSED(event))
+{
+    // Set fonts as the control sets them by default.
+    wxFont normal = *wxSWISS_FONT;
+    wxFont title = *wxSWISS_FONT;
+    title.SetWeight(wxBOLD);
+
+    m_panel->GetCal()->SetFont(normal);
+    m_panel->GetCal()->SetTitleFont(title);
+
+    wxSize best = m_panel->GetCal()->GetBestSize();
+    m_panel->GetCal()->SetSize(CAL_X_COORD,CAL_Y_COORD,best.GetWidth(),best.GetHeight());
 }
 
-void MyFrame::OnSetDate(wxCommandEvent &WXUNUSED(event))
+void MyFrame::OnSizeLarge(wxCommandEvent& WXUNUSED(event))
 {
-    m_panel->SetDate();
+    wxFont normal(12,wxSWISS,wxNORMAL,wxBOLD,FALSE);
+    wxFont title(13,wxSWISS,wxNORMAL,wxBOLD,FALSE);
+
+    m_panel->GetCal()->SetFont(normal);
+    m_panel->GetCal()->SetTitleFont(title);
+
+    wxSize best = m_panel->GetCal()->GetBestSize();
+    m_panel->GetCal()->SetSize(CAL_X_COORD,CAL_Y_COORD,best.GetWidth(),best.GetHeight());
 }
 
-void MyFrame::OnToday(wxCommandEvent &WXUNUSED(event))
+// ----------------------------------------------------------------------------
+// MyFrame extra goodies
+// ----------------------------------------------------------------------------
+/* This function exports current color selections into a disk file as ready to use wxWindows
+   code so you do not have to manually copy them from color chooser dialog :-).
+*/
+void MyFrame::ExportColours(wxCommandEvent& WXUNUSED(event))
 {
-    m_panel->Today();
+    wxString line;
+    wxColour fg,bg;
+    wxFFile file;
+
+    wxString path = ::wxFileSelector(_T("Export file name"));
+    if(path.IsEmpty())
+        return;
+
+    if(file.Open(path.GetData(),_T("w")))
+    {
+        fg = m_panel->GetCal()->GetTitleColourFg();
+        bg = m_panel->GetCal()->GetTitleColourBg();
+        line.Printf(_T("m_calendar->SetTitleColours(wxColour(%d,%d,%d),wxColour(%d,%d,%d));\n"),
+            fg.Red(),fg.Green(),fg.Blue(),bg.Red(),bg.Green(),bg.Blue());
+        file.Write(line);
+
+        fg = m_panel->GetCal()->GetHeaderColourFg();
+        bg = m_panel->GetCal()->GetHeaderColourBg();
+        line.Printf(_T("m_calendar->SetHeaderColours(wxColour(%d,%d,%d),wxColour(%d,%d,%d));\n"),
+            fg.Red(),fg.Green(),fg.Blue(),bg.Red(),bg.Green(),bg.Blue());
+        file.Write(line);
+
+        fg = m_panel->GetCal()->GetWeekNumberColourFg();
+        bg = m_panel->GetCal()->GetWeekNumberColourBg();
+        line.Printf(_T("m_calendar->SetWeekNumberColours(wxColour(%d,%d,%d),wxColour(%d,%d,%d));\n"),
+            fg.Red(),fg.Green(),fg.Blue(),bg.Red(),bg.Green(),bg.Blue());
+        file.Write(line);
+
+        fg = m_panel->GetCal()->GetHighlightColourFg();
+        bg = m_panel->GetCal()->GetHighlightColourBg();
+        line.Printf(_T("m_calendar->SetHighlightColours(wxColour(%d,%d,%d),wxColour(%d,%d,%d));\n"),
+            fg.Red(),fg.Green(),fg.Blue(),bg.Red(),bg.Green(),bg.Blue());
+        file.Write(line);
+
+        fg = m_panel->GetCal()->GetHolidayColourFg();
+        bg = m_panel->GetCal()->GetHolidayColourBg();
+        line.Printf(_T("m_calendar->SetHolidayColours(wxColour(%d,%d,%d),wxColour(%d,%d,%d));\n"),
+            fg.Red(),fg.Green(),fg.Blue(),bg.Red(),bg.Green(),bg.Blue());
+        file.Write(line);
+        file.Close();
+    }
+    else
+        wxMessageBox(_T("Unable to create export file."),"wxCalendar Sample",wxOK | wxICON_EXCLAMATION,this);
 }
 
+
 // ----------------------------------------------------------------------------
 // MyPanel
 // ----------------------------------------------------------------------------
 
-MyPanel::MyPanel(wxFrame *frame)
-       : wxPanel(frame, wxID_ANY)
-{
-    wxString date;
-    date.Printf(wxT("Selected date: %s"),
-                wxDateTime::Today().FormatISODate().c_str());
-    m_date = new wxStaticText(this, wxID_ANY, date);
+// Couple of constants needed in positioning the color sample squares. 
+const int COL_SAMPLE_SIZE = 20;
+const int COL_SAMPLE_MARGIN = 5;
+
+MyPanel::MyPanel(wxFrame *mainFrame)
+       : wxPanel(mainFrame, -1)
+{
+    SetAutoLayout(TRUE);
+    frame = mainFrame;
+
+    // Initial positioning of the color sample titles.
+    colourPosition[0].x = 5;
+    colourPosition[0].y = 30;
+    colourPosition[1].x = 5;
+    colourPosition[1].y = 55;
+    colourPosition[2].x = 5;
+    colourPosition[2].y = 80;
+    colourPosition[3].x = 5;
+    colourPosition[3].y = 105;
+    colourPosition[4].x = 5;
+    colourPosition[4].y = 130;
+
+    new wxStaticText(this, -1, _T("Title")    ,colourPosition[0]);
+    new wxStaticText(this, -1, _T("Header")   ,colourPosition[1]);
+    new wxStaticText(this, -1, _T("Week Nr.") ,colourPosition[2]);
+    new wxStaticText(this, -1, _T("Highlight"),colourPosition[3]);
+    new wxStaticText(this, -1, _T("Holiday")  ,colourPosition[4]);
+
+    for(int i=0; i<MAX_COLOURTYPES; i++)
+         colourPosition[i].x += 75;
+    
+    new wxStaticText(this, -1, _T("Bg"), wxPoint(80,10));
+    new wxStaticText(this, -1, _T("Fg"), wxPoint(80+COL_SAMPLE_SIZE+COL_SAMPLE_MARGIN,10));
+
     m_calendar = new wxCalendarCtrl(this, Calendar_CalCtrl,
                                     wxDefaultDateTime,
-                                    wxDefaultPosition,
+                                    wxPoint(CAL_X_COORD,CAL_Y_COORD),
                                     wxDefaultSize,
                                     wxCAL_MONDAY_FIRST |
                                     wxCAL_SHOW_HOLIDAYS |
                                     wxRAISED_BORDER);
-
-    wxBoxSizer *m_sizer = new wxBoxSizer( wxHORIZONTAL );
-
-    m_sizer->Add(m_date, 0, wxALIGN_CENTER | wxALL, 10 );
-    m_sizer->Add(m_calendar, 0, wxALIGN_CENTER | wxALIGN_LEFT);
-
-    SetSizer( m_sizer );
-    m_sizer->SetSizeHints( this );
 }
 
@@ -391,5 +616,5 @@
     s.Printf(wxT("Selected date: %s"), event.GetDate().FormatISODate().c_str());
 
-    m_date->SetLabel(s);
+    frame->SetStatusText(s,1);
 }
 
@@ -419,5 +644,4 @@
 
     m_calendar->SetWindowStyle(style);
-
     m_calendar->Refresh();
 }
@@ -445,13 +669,200 @@
     m_calendar->Refresh();
 }
+
+void MyPanel::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    wxSize rectSize(COL_SAMPLE_SIZE,COL_SAMPLE_SIZE);
+
+    wxPaintDC dc(this);
+    int i;
+
+    // Colours for the background
+    wxBrush rectBrush(m_calendar->GetTitleColourBg(),wxSOLID);dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[0],rectSize);
+    rectBrush.SetColour(m_calendar->GetHeaderColourBg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[1],rectSize);
+    rectBrush.SetColour(m_calendar->GetWeekNumberColourBg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[2],rectSize);
+    rectBrush.SetColour(m_calendar->GetHighlightColourBg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[3],rectSize);
+    rectBrush.SetColour(m_calendar->GetHolidayColourBg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[4],rectSize);
+
+    // Colours for the foreground
+    for(i=0; i<MAX_COLOURTYPES; i++)
+        colourPosition[i].x += COL_SAMPLE_SIZE + COL_SAMPLE_MARGIN;
+
+    rectBrush.SetColour(m_calendar->GetTitleColourFg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[0],rectSize);
+    rectBrush.SetColour(m_calendar->GetHeaderColourFg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[1],rectSize);
+    rectBrush.SetColour(m_calendar->GetWeekNumberColourFg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[2],rectSize);
+    rectBrush.SetColour(m_calendar->GetHighlightColourFg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[3],rectSize);
+    rectBrush.SetColour(m_calendar->GetHolidayColourFg());dc.SetBrush(rectBrush);
+    dc.DrawRectangle(colourPosition[4],rectSize);
+
+    for(i=0; i<MAX_COLOURTYPES; i++)
+        colourPosition[i].x -= COL_SAMPLE_SIZE + COL_SAMPLE_MARGIN;
+}
+
+void MyPanel::OnClick(wxMouseEvent& event)
+{
+    int i;
+    wxColour newColour;
+    wxRect sampleRect;
+    sampleRect.SetWidth(COL_SAMPLE_SIZE);
+    sampleRect.SetHeight(COL_SAMPLE_SIZE);
+
+    wxPoint p = event.GetPosition();
+    
+    // If background column.
+    if(p.x >= colourPosition[0].x && p.x <= colourPosition[0].x + COL_SAMPLE_SIZE)
+    {
+        sampleRect.SetX(colourPosition[0].x);
+        for(i=0; i<MAX_COLOURTYPES; i++)
+        {
+            sampleRect.SetY(colourPosition[i].y);
+            if(sampleRect.Inside(p))
+                break;
+        }
+        if( i == MAX_COLOURTYPES)
+            return;
+        wxCommandEvent cmdEvent(EVT_BGCOLOR_CHANGED,0);
+        cmdEvent.SetExtraLong(i);
+        AddPendingEvent(cmdEvent);
+        return;
+    }
+
+    // If foreground column.
+    wxCoord x = colourPosition[0].x + COL_SAMPLE_SIZE + COL_SAMPLE_MARGIN;
+    if(p.x >= x && p.x <= x + COL_SAMPLE_SIZE)
+    {
+        sampleRect.SetX(x);
+        for(i=0; i<MAX_COLOURTYPES; i++)
+        {
+            sampleRect.SetY(colourPosition[i].y);
+            if(sampleRect.Inside(p))
+                break;
+        }
+        if( i == MAX_COLOURTYPES)
+            return;
+        wxCommandEvent cmdEvent(EVT_FGCOLOR_CHANGED,0);
+        cmdEvent.SetExtraLong(i);
+        AddPendingEvent(cmdEvent);
+    }
+}
+
+void MyPanel::OnChangeFgColor(wxCommandEvent &event)
+{
+    wxColour newColour;
+
+    switch(event.GetExtraLong())
+    {
+    case 0: // Title
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetTitleColourFg());
+        if( newColour.Ok() )
+            m_calendar->SetTitleColours(newColour,wxNullColour);
+        break;
+    case 1: // Header
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHeaderColourFg());
+        if( newColour.Ok() )
+            m_calendar->SetHeaderColours(newColour,wxNullColour);
+        break;
+    case 2: // Week Nr
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetWeekNumberColourFg());
+        if( newColour.Ok() )
+            m_calendar->SetWeekNumberColours(newColour,wxNullColour);
+        break;
+    case 3: // Highlight
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHighlightColourFg());
+        if( newColour.Ok() )
+            m_calendar->SetHighlightColours(newColour,wxNullColour);
+        break;
+    case 4: // Holiday
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHolidayColourFg());
+        if( newColour.Ok() )
+            m_calendar->SetHolidayColours(newColour,wxNullColour);
+        break;
+    default:
+        return;
+    }
+    m_calendar->Refresh();
+    Refresh();
+}
+
+void MyPanel::OnChangeBgColor(wxCommandEvent &event)
+{
+    wxColour newColour;
+
+    switch(event.GetExtraLong())
+    {
+    case 0: // Title
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetTitleColourBg());
+        if( newColour.Ok() )
+            m_calendar->SetTitleColours(wxNullColour,newColour);
+        break;
+    case 1: // Header
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHeaderColourBg());
+        if( newColour.Ok() )
+            m_calendar->SetHeaderColours(wxNullColour,newColour);
+        break;
+    case 2: // Week Nr
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetWeekNumberColourBg());
+        if( newColour.Ok() )
+            m_calendar->SetWeekNumberColours(wxNullColour,newColour);
+        break;
+    case 3: // Highlight
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHighlightColourBg());
+        if( newColour.Ok() )
+            m_calendar->SetHighlightColours(wxNullColour,newColour);
+        break;
+    case 4: // Holiday
+        newColour = ::wxGetColourFromUser(this,m_calendar->GetHolidayColourBg());
+        if( newColour.Ok() )
+            m_calendar->SetHolidayColours(wxNullColour,newColour);
+        break;
+    default:
+        return;
+    }
+    m_calendar->Refresh();
+    Refresh();
+}
+
+// ----------------------------------------------------------------------------
+// MyHolidays
+// ----------------------------------------------------------------------------
 
-void MyPanel::SetDate()
+bool MyHolidays::DoIsHoliday(const wxDateTime& dt) const
 {
-    wxDateTime date(24, wxDateTime::Dec, 2005, 23, 59, 59);
-    m_calendar->SetDate(date);
+    wxDateTime::WeekDay wd = dt.GetWeekDay();
+    return (wd == wxDateTime::Sun);
 }
 
-void MyPanel::Today()
+size_t MyHolidays::DoGetHolidaysInRange(const wxDateTime& dtStart,
+                                                const wxDateTime& dtEnd,
+                                                wxDateTimeArray& holidays) const
 {
-    m_calendar->SetDate(wxDateTime::Today());
+    if ( dtStart > dtEnd )
+    {
+        wxFAIL_MSG( _T("invalid date range in GetHolidaysInRange") );
+
+        return 0u;
+    }
+
+    holidays.Empty();
+
+    // instead of checking all days, start with the first Sat after dtStart and
+    // end with the last Sun before dtEnd
+    wxDateTime dtSunFirst = dtStart.GetNextWeekDay(wxDateTime::Sun),
+               dtSunLast = dtEnd.GetPrevWeekDay(wxDateTime::Sun),
+               dt;
+
+    for ( dt = dtSunFirst; dt <= dtSunLast; dt += wxDateSpan::Week() )
+    {
+        holidays.Add(dt);
+    }
+
+    return holidays.GetCount();
 }
Index: src/generic/calctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/calctrl.cpp,v
retrieving revision 1.59
diff -b -u -2 -r1.59 calctrl.cpp
--- src/generic/calctrl.cpp	2004/07/20 10:09:29	1.59
+++ src/generic/calctrl.cpp	2004/11/06 21:26:30
@@ -3,5 +3,5 @@
 // Purpose:     implementation fo the generic wxCalendarCtrl
 // Author:      Vadim Zeitlin
-// Modified by:
+// Modified by: Antti Merenluoto
 // Created:     29.12.99
 // RCS-ID:      $Id: calctrl.cpp,v 1.59 2004/07/20 10:09:29 ABX Exp $
@@ -10,8 +10,4 @@
 ///////////////////////////////////////////////////////////////////////////////
 
-// ============================================================================
-// declarations
-// ============================================================================
-
 // ----------------------------------------------------------------------------
 // headers
@@ -41,46 +37,21 @@
 #if wxUSE_CALENDARCTRL
 
-#include "wx/spinctrl.h"
-
 #include "wx/calctrl.h"
-
-#define DEBUG_PAINT 0
-
-// ----------------------------------------------------------------------------
-// private classes
-// ----------------------------------------------------------------------------
-
-class wxMonthComboBox : public wxComboBox
-{
-public:
-    wxMonthComboBox(wxCalendarCtrl *cal);
-
-    void OnMonthChange(wxCommandEvent& event) { m_cal->OnMonthChange(event); }
-
-private:
-    wxCalendarCtrl *m_cal;
-
-    DECLARE_EVENT_TABLE()
-    DECLARE_NO_COPY_CLASS(wxMonthComboBox)
-};
-
-class wxYearSpinCtrl : public wxSpinCtrl
-{
-public:
-    wxYearSpinCtrl(wxCalendarCtrl *cal);
 
-    void OnYearTextChange(wxCommandEvent& event)
-    {
-        m_cal->SetUserChangedYear();
-        m_cal->OnYearChange(event);
-    }
-    void OnYearChange(wxSpinEvent& event) { m_cal->OnYearChange(event); }
+// ============================================================================
+// declarations
+// ============================================================================
 
-private:
-    wxCalendarCtrl *m_cal;
+#define DEBUG_PAINT 0
 
-    DECLARE_EVENT_TABLE()
-    DECLARE_NO_COPY_CLASS(wxYearSpinCtrl)
-};
+// Constants needed in sizing and drawing.
+const wxCoord BORDER_WMARGIN = 4;
+const wxCoord BORDER_HMARGIN = 6;
+const int ARROW_OFFSET = 5;
+const int ARROW_MARGIN = 3;
+
+// Month ids for popup menu
+const int MONTH_JANUARY = 100;
+const int MONTH_DECEMBER = MONTH_JANUARY+wxDateTime::Dec;
 
 // ----------------------------------------------------------------------------
@@ -95,13 +66,7 @@
     EVT_LEFT_DOWN(wxCalendarCtrl::OnClick)
     EVT_LEFT_DCLICK(wxCalendarCtrl::OnDClick)
-END_EVENT_TABLE()
-
-BEGIN_EVENT_TABLE(wxMonthComboBox, wxComboBox)
-    EVT_COMBOBOX(wxID_ANY, wxMonthComboBox::OnMonthChange)
-END_EVENT_TABLE()
+    EVT_RIGHT_DOWN(wxCalendarCtrl::OnRightClick)
 
-BEGIN_EVENT_TABLE(wxYearSpinCtrl, wxSpinCtrl)
-    EVT_TEXT(wxID_ANY, wxYearSpinCtrl::OnYearTextChange)
-    EVT_SPINCTRL(wxID_ANY, wxYearSpinCtrl::OnYearChange)
+    EVT_MENU_RANGE(MONTH_JANUARY, MONTH_DECEMBER, wxCalendarCtrl::OnMonthSelect)
 END_EVENT_TABLE()
 
@@ -181,44 +146,4 @@
 
 // ----------------------------------------------------------------------------
-// wxMonthComboBox and wxYearSpinCtrl
-// ----------------------------------------------------------------------------
-
-wxMonthComboBox::wxMonthComboBox(wxCalendarCtrl *cal)
-               : wxComboBox(cal->GetParent(), wxID_ANY,
-                            wxEmptyString,
-                            wxDefaultPosition,
-                            wxDefaultSize,
-                            0, NULL,
-                            wxCB_READONLY | wxCLIP_SIBLINGS)
-{
-    m_cal = cal;
-
-    wxDateTime::Month m;
-    for ( m = wxDateTime::Jan; m < wxDateTime::Inv_Month; wxNextMonth(m) )
-    {
-        Append(wxDateTime::GetMonthName(m));
-    }
-
-    SetSelection(m_cal->GetDate().GetMonth());
-    SetSize(wxDefaultCoord,
-            wxDefaultCoord,
-            wxDefaultCoord,
-            wxDefaultCoord,
-            wxSIZE_AUTO_WIDTH|wxSIZE_AUTO_HEIGHT);
-}
-
-wxYearSpinCtrl::wxYearSpinCtrl(wxCalendarCtrl *cal)
-              : wxSpinCtrl(cal->GetParent(), wxID_ANY,
-                           cal->GetDate().Format(_T("%Y")),
-                           wxDefaultPosition,
-                           wxDefaultSize,
-                           wxSP_ARROW_KEYS | wxCLIP_SIBLINGS,
-                           -4300, 10000, cal->GetDate().GetYear())
-
-{
-    m_cal = cal;
-}
-
-// ----------------------------------------------------------------------------
 // wxCalendarCtrl
 // ----------------------------------------------------------------------------
@@ -233,5 +158,4 @@
 {
     Init();
-
     (void)Create(parent, id, date, pos, size, style, name);
 }
@@ -239,9 +163,4 @@
 void wxCalendarCtrl::Init()
 {
-    m_comboMonth = NULL;
-    m_spinYear = NULL;
-    m_staticYear = NULL;
-    m_staticMonth = NULL;
-
     m_userChangedYear = false;
 
@@ -249,10 +168,4 @@
     m_heightRow = 0;
 
-    wxDateTime::WeekDay wd;
-    for ( wd = wxDateTime::Sun; wd < wxDateTime::Inv_WeekDay; wxNextWDay(wd) )
-    {
-        m_weekdays[wd] = wxDateTime::GetWeekDayName(wd, wxDateTime::Name_Abbr);
-    }
-
     for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
     {
@@ -264,8 +177,14 @@
 
     m_colHolidayFg = *wxRED;
-    // don't set m_colHolidayBg - by default, same as our bg colour
+    m_colHolidayBg = *wxWHITE;
+
+    m_colTitleFg = *wxWHITE;
+    m_colTitleBg = *wxBLUE;
 
     m_colHeaderFg = *wxBLUE;
     m_colHeaderBg = *wxLIGHT_GREY;
+
+    m_colWeekFg = m_colHeaderFg;
+    m_colWeekBg = m_colHeaderBg;
 }
 
@@ -290,22 +209,12 @@
     m_date = date.IsValid() ? date : wxDateTime::Today();
 
+    // Set the day names now that the style is set and they are going to be needed soon for
+    // size calculations.
+    SetDayNames();
+    SetHolidayAttrs();
+
     m_lowdate = wxDefaultDateTime;
     m_highdate = wxDefaultDateTime;
 
-    if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        m_spinYear = new wxYearSpinCtrl(this);
-        m_staticYear = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(_T("%Y")),
-                                        wxDefaultPosition, wxDefaultSize,
-                                        wxALIGN_CENTRE);
-
-        m_comboMonth = new wxMonthComboBox(this);
-        m_staticMonth = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(_T("%B")),
-                                         wxDefaultPosition, wxDefaultSize,
-                                         wxALIGN_CENTRE);
-    }
-
-    ShowCurrentControls();
-
     // we need to set the position as well because the main control position
     // is not the same as the one specified in pos if we have the controls
@@ -317,6 +226,7 @@
     // will use the right one.
     SetBackgroundColour(GetBackgroundColour());
-    
-    SetHolidayAttrs();
+    SetFont(*wxSWISS_FONT);
+    m_titleFont = *wxSWISS_FONT;
+    m_titleFont.SetWeight(wxBOLD);
 
     return true;
@@ -331,4 +241,15 @@
 }
 
+void wxCalendarCtrl::SetDayNames()
+{
+    wxDateTime::WeekDay wd;
+    for ( wd = wxDateTime::Sun; wd < wxDateTime::Inv_WeekDay; wxNextWDay(wd) )
+    {
+        m_weekdays[wd] = wxDateTime::GetWeekDayName(wd, wxDateTime::Name_Abbr);
+        if(HasFlag(wxCAL_TWO_LETTER_WEEKDAY))
+            m_weekdays[wd].Truncate(2);
+    }
+}
+
 // ----------------------------------------------------------------------------
 // forward wxWin functions to subcontrols
@@ -337,18 +258,4 @@
 bool wxCalendarCtrl::Destroy()
 {
-    if ( m_staticYear )
-        m_staticYear->Destroy();
-    if ( m_spinYear )
-        m_spinYear->Destroy();
-    if ( m_comboMonth )
-        m_comboMonth->Destroy();
-    if ( m_staticMonth )
-        m_staticMonth->Destroy();
-
-    m_staticYear = NULL;
-    m_spinYear = NULL;
-    m_comboMonth = NULL;
-    m_staticMonth = NULL;
-
     return wxControl::Destroy();
 }
@@ -360,14 +267,4 @@
         return false;
     }
-
-    if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        if ( GetMonthControl() )
-        {
-            GetMonthControl()->Show(show);
-            GetYearControl()->Show(show);
-        }
-    }
-
     return true;
 }
@@ -380,61 +277,16 @@
     }
 
-    if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        GetMonthControl()->Enable(enable);
-        GetYearControl()->Enable(enable);
-    }
-
     return true;
 }
 
 // ----------------------------------------------------------------------------
-// enable/disable month/year controls
+// Enable styles that need a bit setting up.
 // ----------------------------------------------------------------------------
-
-void wxCalendarCtrl::ShowCurrentControls()
-{
-    if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        if ( AllowMonthChange() )
-        {
-            m_comboMonth->Show();
-            m_staticMonth->Hide();
-
-            if ( AllowYearChange() )
-            {
-                m_spinYear->Show();
-                m_staticYear->Hide();
-
-                // skip the rest
-                return;
-            }
-        }
-        else
-        {
-            m_comboMonth->Hide();
-            m_staticMonth->Show();
-        }
-
-        // year change not allowed here
-        m_spinYear->Hide();
-        m_staticYear->Show();
-    }
-}
 
-wxControl *wxCalendarCtrl::GetMonthControl() const
-{
-    return AllowMonthChange() ? (wxControl *)m_comboMonth : (wxControl *)m_staticMonth;
-}
-
-wxControl *wxCalendarCtrl::GetYearControl() const
-{
-    return AllowYearChange() ? (wxControl *)m_spinYear : (wxControl *)m_staticYear;
-}
+#ifdef WXWIN_COMPATIBILITY_2_4
 
+// This is obsolete: Use SetWindowStyle-Refresh instead.
 void wxCalendarCtrl::EnableYearChange(bool enable)
 {
-    if ( enable != AllowYearChange() )
-    {
         long style = GetWindowStyle();
         if ( enable )
@@ -443,17 +295,10 @@
             style |= wxCAL_NO_YEAR_CHANGE;
         SetWindowStyle(style);
-
-        ShowCurrentControls();
-        if ( GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION )
-        {
             Refresh();
-        }
-    }
 }
 
+// This is obsolete: Use SetWindowStyle-Refresh instead.
 void wxCalendarCtrl::EnableMonthChange(bool enable)
 {
-    if ( enable != AllowMonthChange() )
-    {
         long style = GetWindowStyle();
         if ( enable )
@@ -462,13 +307,41 @@
             style |= wxCAL_NO_MONTH_CHANGE;
         SetWindowStyle(style);
+    Refresh();
+}
+#endif
 
-        ShowCurrentControls();
-        if ( GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION )
-        {
+void wxCalendarCtrl::EnableWeekNumberDisplay(bool display)
+{
+    long style = GetWindowStyle();
+    if ( display )
+        style |= wxCAL_SHOW_WEEK_NUMBERS;
+    else
+        style &= ~wxCAL_SHOW_WEEK_NUMBERS;
+    SetWindowStyle(style);
+
+    int width,height;
+    DoGetSize(&width,&height);
+    RecalcGeometry(width,height);
             Refresh();
-        }
-    }
 }
 
+void wxCalendarCtrl::EnableShortDayName(bool enable)
+{
+    long style = GetWindowStyle();
+    if ( enable )
+        style |= wxCAL_TWO_LETTER_WEEKDAY;
+    else
+        style &= ~wxCAL_TWO_LETTER_WEEKDAY;
+    SetWindowStyle(style);
+    SetDayNames();
+    Refresh();
+}
+  
+void wxCalendarCtrl::NoteHolidayChange()
+{
+    SetHolidayAttrs();
+    Refresh();
+}
+
 // ----------------------------------------------------------------------------
 // changing date
@@ -477,6 +350,4 @@
 bool wxCalendarCtrl::SetDate(const wxDateTime& date)
 {
-    bool retval = true;
-
     bool sameMonth = m_date.GetMonth() == date.GetMonth(),
          sameYear = m_date.GetYear() == date.GetYear();
@@ -491,38 +362,14 @@
         else
         {
-            if ( AllowMonthChange() && (AllowYearChange() || sameYear) )
-            {
                 // change everything
                 m_date = date;
-
-                if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-                {
-                    // update the controls
-                    m_comboMonth->SetSelection(m_date.GetMonth());
-
-                    if ( AllowYearChange() )
-                    {
-                        if ( !m_userChangedYear )
-                            m_spinYear->SetValue(m_date.Format(_T("%Y")));
-                    }
-                }
-
                 // as the month changed, holidays did too
                 SetHolidayAttrs();
-
                 // update the calendar
                 Refresh();
-            }
-            else
-            {
-                // forbidden
-                retval = false;
-            }
         }
+        return TRUE;
     }
-
-    m_userChangedYear = false;
-
-    return retval;
+    return FALSE;
 }
 
@@ -756,40 +603,39 @@
 // size management
 // ----------------------------------------------------------------------------
-
-// this is a composite control and it must arrange its parts each time its
-// size or position changes: the combobox and spinctrl are along the top of
-// the available area and the calendar takes up therest of the space
-
-// the static controls are supposed to be always smaller than combo/spin so we
-// always use the latter for size calculations and position the static to take
-// the same space
-
-// the constants used for the layout
-#define VERT_MARGIN     5           // distance between combo and calendar
-#ifdef __WXMAC__
-#define HORZ_MARGIN    5           //                            spin
-#else
-#define HORZ_MARGIN    15           //                            spin
-#endif
 wxSize wxCalendarCtrl::DoGetBestSize() const
 {
-    // calc the size of the calendar
-    ((wxCalendarCtrl *)this)->RecalcGeometry(); // const_cast
+    wxCoord width=0,height=0;
 
-    wxCoord width = 7*m_widthCol,
-            height = 7*m_heightRow + m_rowOffset + VERT_MARGIN;
+    wxClientDC dc((wxWindow*)this);
+    dc.SetFont(m_font);
 
-    if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
+    // determine the column width (we assume that the weekday names are always
+    // wider (in any language) than the numbers)
+    wxDateTime::WeekDay wd;
+    for ( wd = wxDateTime::Sun; wd < wxDateTime::Inv_WeekDay; wxNextWDay(wd) )
+    {
+        wxCoord wd_width;
+        dc.GetTextExtent(m_weekdays[wd], &wd_width, &height);
+        if ( wd_width > width )
     {
-        // the combobox doesn't report its height correctly (it returns the
-        // height including the drop down list) so don't use it
-        height += m_spinYear->GetBestSize().y;
+            width = wd_width;
     }
+    }
+
+    // leave some margins
+    width += HasFlag(wxCAL_TWO_LETTER_WEEKDAY)?3:2;
+    height += 2;
 
+    if(HasFlag(wxCAL_SHOW_WEEK_NUMBERS))
+        width *= 8;
+    else
+        width *= 7;
+    height *= 8;
+
     if ( !HasFlag(wxBORDER_NONE) )
     {
         // the border would clip the last line otherwise
-        height += 6;
-        width += 4;
+        height += BORDER_HMARGIN;
+        width += BORDER_WMARGIN;
     }
 
@@ -804,63 +650,13 @@
 {
     wxControl::DoSetSize(x, y, width, height, sizeFlags);
+    if( width>0 && height > 0 )
+        RecalcGeometry(width,height);
 }
 
 void wxCalendarCtrl::DoMoveWindow(int x, int y, int width, int height)
 {
-    int yDiff;
-
-    if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        wxSize sizeCombo = m_comboMonth->GetSize();
-        wxSize sizeStatic = m_staticMonth->GetSize();
-        wxSize sizeSpin = m_spinYear->GetSize();
-        int dy = (sizeCombo.y - sizeStatic.y) / 2;
-/*
-In the calender the size of the combobox for the year
-is just defined by a margin from the month combobox to
-the left border. While in wxUniv the year control can't
-show all 4 digits, in wxMsw it show almost twice as
-much. Instead the year should use it's best size and be
-left aligned to the calendar. Just in case the month in
-any language is longer than it has space in the
-calendar it is shortend.This way the year always can
-show the 4 digits.
-
-This patch relies on the fact that a combobox has a
-good best size implementation. This is not the case
-with wxMSW but I don't know why.
-
-Otto Wyss
-*/
-
-#ifdef __WXUNIVERSAL__
-        if (sizeCombo.x + HORZ_MARGIN - sizeSpin.x > width)
-        {
-            m_comboMonth->SetSize(x, y, width - HORZ_MARGIN - sizeSpin.x, sizeCombo.y);
-        }
-        else
-        {
-            m_comboMonth->Move(x, y);
-        }
-        m_staticMonth->Move(x, y + dy);
-        m_spinYear->Move(x + width - sizeSpin.x, y);
-        m_staticYear->Move(x + width - sizeSpin.x, y + dy);
-#else
-        m_comboMonth->Move(x, y);
-        m_staticMonth->SetSize(x, y + dy, sizeCombo.x, sizeStatic.y);
-
-        int xDiff = sizeCombo.x + HORZ_MARGIN;
-
-        m_spinYear->SetSize(x + xDiff, y, width - xDiff, sizeCombo.y);
-        m_staticYear->SetSize(x + xDiff, y + dy, width - xDiff, sizeStatic.y);
-#endif
-        yDiff = wxMax(sizeSpin.y, sizeCombo.y) + VERT_MARGIN;
-    }
-    else // no controls on the top
-    {
-        yDiff = 0;
-    }
-
-    wxControl::DoMoveWindow(x, y + yDiff, width, height - yDiff);
+    wxControl::DoMoveWindow(x, y, width, height);
+    if( width>0 && height > 0 )
+        RecalcGeometry(width,height);
 }
 
@@ -868,13 +664,4 @@
 {
     wxControl::DoGetPosition(x, y);
-
-    if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        // our real top corner is not in this position
-        if ( y )
-        {
-            *y -= GetMonthControl()->GetSize().y + VERT_MARGIN;
-        }
-    }
 }
 
@@ -882,40 +669,13 @@
 {
     wxControl::DoGetSize(width, height);
-
-    if ( !(GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        // our real height is bigger
-        if ( height && GetMonthControl())
-        {
-            *height += GetMonthControl()->GetSize().y + VERT_MARGIN;
-        }
-    }
 }
 
-void wxCalendarCtrl::RecalcGeometry()
+void wxCalendarCtrl::RecalcGeometry(int width, int height)
 {
-    wxClientDC dc(this);
-
-    dc.SetFont(GetFont());
-
-    // determine the column width (we assume that the weekday names are always
-    // wider (in any language) than the numbers)
-    m_widthCol = 0;
-    wxDateTime::WeekDay wd;
-    for ( wd = wxDateTime::Sun; wd < wxDateTime::Inv_WeekDay; wxNextWDay(wd) )
-    {
-        wxCoord width;
-        dc.GetTextExtent(m_weekdays[wd], &width, &m_heightRow);
-        if ( width > m_widthCol )
-        {
-            m_widthCol = width;
-        }
-    }
-
-    // leave some margins
-    m_widthCol += 2;
-    m_heightRow += 2;
-
-    m_rowOffset = (GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) ? m_heightRow : 0; // conditional in relation to style
+    int colCount = HasFlag(wxCAL_SHOW_WEEK_NUMBERS) ? 8 : 7;
+    int borderWidth  = HasFlag(wxBORDER_NONE) ? 0 : BORDER_WMARGIN;
+    int borderHeight = HasFlag(wxBORDER_NONE) ? 0 : BORDER_HMARGIN;
+    m_widthCol = (width-borderWidth)/colCount;
+    m_heightRow = (height-borderHeight)/8;  
 }
 
@@ -926,9 +686,21 @@
 void wxCalendarCtrl::OnPaint(wxPaintEvent& WXUNUSED(event))
 {
-    wxPaintDC dc(this);
-
-    dc.SetFont(GetFont());
+    wxColour colFg, colBg;
+    wxColour DARK_GREY(96,96,96);
+    wxCoord weekOffset,y = 0;
+    wxCoord monthw, monthh;
+    int colCount;
 
-    RecalcGeometry();
+    if( HasFlag(wxCAL_SHOW_WEEK_NUMBERS) )
+    {
+        colCount = 8;
+        weekOffset = m_widthCol;
+    }
+    else
+    {
+        colCount = 7;
+        weekOffset = 0;
+    }
+    wxPaintDC dc(this);
 
 #if DEBUG_PAINT
@@ -938,31 +710,37 @@
 #endif
 
-    wxCoord y = 0;
+    // ...............................................................
+    // Set colors and rect for month name and year
+    dc.SetFont(m_titleFont);
 
-    if ( HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
-    {
-        // draw the sequential month-selector
-
         dc.SetBackgroundMode(wxTRANSPARENT);
-        dc.SetTextForeground(*wxBLACK);
-        dc.SetBrush(wxBrush(m_colHeaderBg, wxSOLID));
-        dc.SetPen(wxPen(m_colHeaderBg, 1, wxSOLID));
+    dc.SetTextForeground(m_colTitleFg);
+    dc.SetBrush(wxBrush(m_colTitleBg, wxSOLID));
+    dc.SetPen(wxPen(m_colTitleBg, 1, wxSOLID));
         dc.DrawRectangle(0, y, GetClientSize().x, m_heightRow);
 
         // Get extent of month-name + year
-        wxCoord monthw, monthh;
-        wxString headertext = m_date.Format(wxT("%B %Y"));
+    wxString headertext = m_date.Format(wxT("%b %Y"));
         dc.GetTextExtent(headertext, &monthw, &monthh);
 
         // draw month-name centered above weekdays
-        wxCoord monthx = ((m_widthCol * 7) - monthw) / 2;
+    wxCoord monthx = ((m_widthCol * colCount) - monthw) / 2;
         wxCoord monthy = ((m_heightRow - monthh) / 2) + y;
         dc.DrawText(headertext, monthx,  monthy);
 
-        // calculate the "month-arrows"
+    // ...............................................................
+    // Calculate arrow coordinates
+    if( AllowMonthChange() )
+    {
         wxPoint leftarrow[3];
         wxPoint rightarrow[3];
+
+        wxCoord leftOffset[3] = { ARROW_MARGIN,ARROW_MARGIN+ARROW_OFFSET, m_widthCol+ARROW_MARGIN };
+        wxCoord rightOffset[3];
+        rightOffset[0] = (colCount-1)*m_widthCol+ARROW_MARGIN;
+        rightOffset[1] = rightOffset[0]+ARROW_OFFSET;
+        rightOffset[2] = rightOffset[0]-m_widthCol+ARROW_MARGIN;
 
-        int arrowheight = monthh / 2;
+        int arrowheight = m_heightRow-4;
 
         leftarrow[0] = wxPoint(0, arrowheight / 2);
@@ -974,42 +752,32 @@
         rightarrow[2] = wxPoint(0, arrowheight - 1);
 
-        // draw the "month-arrows"
+        dc.SetBrush(wxBrush(m_colTitleFg, wxSOLID));
+        dc.SetPen(wxPen(m_colTitleFg, 1, wxSOLID)); 
 
-        wxCoord arrowy = (m_heightRow - arrowheight) / 2;
-        wxCoord larrowx = (m_widthCol - (arrowheight / 2)) / 2;
-        wxCoord rarrowx = ((m_widthCol - (arrowheight / 2)) / 2) + m_widthCol*6;
-        m_leftArrowRect = wxRect(0, 0, 0, 0);
-        m_rightArrowRect = wxRect(0, 0, 0, 0);
-
-        if ( AllowMonthChange() )
-        {
-            wxDateTime ldpm = wxDateTime(1,m_date.GetMonth(), m_date.GetYear()) - wxDateSpan::Day(); // last day prev month
-            // Check if range permits change
-            if ( IsDateInRange(ldpm) && ( ( ldpm.GetYear() == m_date.GetYear() ) ? true : AllowYearChange() ) )
-            {
-                m_leftArrowRect = wxRect(larrowx - 3, arrowy - 3, (arrowheight / 2) + 8, (arrowheight + 6));
-                dc.SetBrush(wxBrush(*wxBLACK, wxSOLID));
-                dc.SetPen(wxPen(*wxBLACK, 1, wxSOLID));
-                dc.DrawPolygon(3, leftarrow, larrowx , arrowy, wxWINDING_RULE);
-                dc.SetBrush(*wxTRANSPARENT_BRUSH);
-                dc.DrawRectangle(m_leftArrowRect);
+        // draw the arrows
+        if( AllowYearChange() )
+        {
+            dc.DrawPolygon(3, leftarrow, leftOffset[0] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, leftarrow, leftOffset[1] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, rightarrow, rightOffset[0] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, rightarrow, rightOffset[1] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, leftarrow, leftOffset[2] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, rightarrow, rightOffset[2] , 2, wxWINDING_RULE);
             }
-            wxDateTime fdnm = wxDateTime(1,m_date.GetMonth(), m_date.GetYear()) + wxDateSpan::Month(); // first day next month
-            if ( IsDateInRange(fdnm) && ( ( fdnm.GetYear() == m_date.GetYear() ) ? true : AllowYearChange() ) )
+        else
             {
-                m_rightArrowRect = wxRect(rarrowx - 4, arrowy - 3, (arrowheight / 2) + 8, (arrowheight + 6));
-                dc.SetBrush(wxBrush(*wxBLACK, wxSOLID));
-                dc.SetPen(wxPen(*wxBLACK, 1, wxSOLID));
-                dc.DrawPolygon(3, rightarrow, rarrowx , arrowy, wxWINDING_RULE);
-                dc.SetBrush(*wxTRANSPARENT_BRUSH);
-                dc.DrawRectangle(m_rightArrowRect);
+            dc.DrawPolygon(3, leftarrow, leftOffset[1] , 2, wxWINDING_RULE);
+            dc.DrawPolygon(3, rightarrow, rightOffset[1] , 2, wxWINDING_RULE);
             }
         }
+    // ...............................................................
+    // Draw the week days
+  
+    dc.SetFont(m_font);
+    dc.SetTextForeground(*wxBLACK);
 
         y += m_heightRow;
-    }
 
-    // first draw the week days
-    if ( IsExposed(0, y, 7*m_widthCol, m_heightRow) )
+    if ( IsExposed(0, y, colCount*m_widthCol, m_heightRow) )
     {
 #if DEBUG_PAINT
@@ -1023,4 +791,11 @@
         dc.DrawRectangle(0, y, GetClientSize().x, m_heightRow);
 
+        wxCoord dayw, dayh;
+        if ( HasFlag(wxCAL_SHOW_WEEK_NUMBERS) )
+        {
+            dc.GetTextExtent(wxT("#"), &dayw, &dayh);
+            dc.DrawText(wxT("#"), ((m_widthCol- dayw) / 2), y);
+        }
+
         bool startOnMonday = (GetWindowStyle() & wxCAL_MONDAY_FIRST) != 0;
         for ( size_t wd = 0; wd < 7; wd++ )
@@ -1031,15 +806,22 @@
             else
                 n = wd;
-            wxCoord dayw, dayh;
             dc.GetTextExtent(m_weekdays[n], &dayw, &dayh);
-            dc.DrawText(m_weekdays[n], (wd*m_widthCol) + ((m_widthCol- dayw) / 2), y); // center the day-name
+            dc.DrawText(m_weekdays[n], (wd*m_widthCol) + ((m_widthCol- dayw) / 2) + weekOffset, y); // center the day-name
         }
     }
 
+    // ...............................................................
+    // Draw the week number background if any
+    y += m_heightRow;
+    if ( HasFlag(wxCAL_SHOW_WEEK_NUMBERS) && IsExposed(0, y, m_widthCol, m_heightRow*6) )
+    {
+        dc.SetBrush(wxBrush(m_colWeekBg, wxSOLID));
+        dc.SetPen(wxPen(m_colWeekBg, 1, wxSOLID));
+        dc.DrawRectangle(0, y, m_widthCol, GetClientSize().y);
+    }
+
+    // ...............................................................
     // then the calendar itself
-    dc.SetTextForeground(*wxBLACK);
-    //dc.SetFont(*wxNORMAL_FONT);
 
-    y += m_heightRow;
     wxDateTime date = GetStartDate();
 
@@ -1048,13 +830,21 @@
             date.Format("%a %d-%m-%Y %H:%M:%S").c_str());
 #endif
+
+    // Create highlight and default pen and brush
+    wxPen hlPen(m_backgroundColour,1,wxSOLID);
+    wxBrush hlBrush(m_backgroundColour,wxSOLID);
+    wxPen defPen(m_backgroundColour,1,wxSOLID);
+    wxBrush defBrush(m_backgroundColour,wxSOLID);
+
+    dc.SetTextForeground(m_foregroundColour);
+    dc.SetPen(defPen);
+    dc.SetBrush(defBrush);
 
-    dc.SetBackgroundMode(wxSOLID);
     for ( size_t nWeek = 1; nWeek <= 6; nWeek++, y += m_heightRow )
     {
         // if the update region doesn't intersect this row, don't paint it
-        if ( !IsExposed(0, y, 7*m_widthCol, m_heightRow - 1) )
+        if ( !IsExposed(0, y, colCount*m_widthCol, m_heightRow - 1) )
         {
             date += wxDateSpan::Week();
-
             continue;
         }
@@ -1063,4 +853,14 @@
         wxLogDebug("painting week %d at y = %d\n", nWeek, y);
 #endif
+        if( HasFlag(wxCAL_SHOW_WEEK_NUMBERS) )
+        {
+            wxCoord width;
+            wxString weekStr;
+            weekStr.Printf("%d", date.GetWeekOfYear());
+            dc.GetTextExtent(weekStr, &width, (wxCoord *)NULL);
+            dc.SetTextForeground(m_colWeekFg);
+            dc.DrawText(weekStr, (m_widthCol - width) / 2, y + 1);
+            dc.SetTextForeground(m_foregroundColour);
+        }
 
         for ( size_t wd = 0; wd < 7; wd++ )
@@ -1084,5 +884,6 @@
                     // surrounding week or out-of-range
                     // draw "disabled"
-                    dc.SetTextForeground(*wxLIGHT_GREY);
+                    colFg = *wxLIGHT_GREY;
+                    colBg = m_backgroundColour;
                     changedColours = true;
                 }
@@ -1094,13 +895,10 @@
                     if ( isSel )
                     {
-                        dc.SetTextForeground(m_colHighlightFg);
-                        dc.SetTextBackground(m_colHighlightBg);
-
+                        colFg = m_colHighlightFg;
+                        colBg = m_colHighlightBg;
                         changedColours = true;
                     }
                     else if ( attr )
                     {
-                        wxColour colFg, colBg;
-
                         if ( attr->IsHoliday() )
                         {
@@ -1122,5 +920,5 @@
                         if ( colBg.Ok() )
                         {
-                            dc.SetTextBackground(colBg);
+                            //dc.SetTextBackground(colBg);
                             changedColours = true;
                         }
@@ -1133,6 +931,18 @@
                     }
                 }
+                // Draw the background as rect.
+                if(changedColours)
+                {
+                    hlPen.SetColour(colBg);
+                    hlBrush.SetColour(colBg);
+                    dc.SetPen(hlPen);
+                    dc.SetBrush(hlBrush);
+                    dc.SetTextForeground(colFg);
+                }
+                wxCoord x = weekOffset + wd*m_widthCol;
+                dc.DrawRectangle(x+1,y+1,m_widthCol-2,m_heightRow-2);
 
-                wxCoord x = wd*m_widthCol + (m_widthCol - width) / 2;
+                // Draw the text on top (transparent background)
+                x += (m_widthCol - width) / 2;
                 dc.DrawText(dayStr, x, y + 1);
 
@@ -1152,4 +962,5 @@
                     dc.SetPen(pen);
                     dc.SetBrush(*wxTRANSPARENT_BRUSH);
+                    changedColours = TRUE;
 
                     switch ( attr->GetBorder() )
@@ -1219,7 +1030,6 @@
 void wxCalendarCtrl::RefreshDate(const wxDateTime& date)
 {
-    RecalcGeometry();
-
     wxRect rect;
+    int colCount = HasFlag(wxCAL_SHOW_WEEK_NUMBERS)?8:7;
 
     // always refresh the whole row at once because our OnPaint() will draw
@@ -1228,7 +1038,7 @@
     rect.x = 0;
 
-    rect.y = (m_heightRow * GetWeek(date)) + m_rowOffset;
+    rect.y = (m_heightRow * (GetWeek(date)+1));
 
-    rect.width = 7*m_widthCol;
+    rect.width = colCount*m_widthCol;
     rect.height = m_heightRow;
 
@@ -1297,8 +1107,8 @@
                     // simple case: same week
                     numpoints = 4;
-                    corners[0] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow) + m_rowOffset);
-                    corners[1] = wxPoint((fd - 1) * m_widthCol, ((fw + 1 ) * m_heightRow) + m_rowOffset);
-                    corners[2] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow) + m_rowOffset);
-                    corners[3] = wxPoint(td * m_widthCol, (tw * m_heightRow) + m_rowOffset);
+                    corners[0] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow));
+                    corners[1] = wxPoint((fd - 1) * m_widthCol, ((fw + 1 ) * m_heightRow));
+                    corners[2] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow));
+                    corners[3] = wxPoint(td * m_widthCol, (tw * m_heightRow));
                 }
                 else
@@ -1306,22 +1116,22 @@
                     int cidx = 0;
                     // "complex" polygon
-                    corners[cidx] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow) + m_rowOffset); cidx++;
+                    corners[cidx] = wxPoint((fd - 1) * m_widthCol, (fw * m_heightRow)); cidx++;
 
                     if ( fd > 1 )
                     {
-                        corners[cidx] = wxPoint((fd - 1) * m_widthCol, ((fw + 1) * m_heightRow) + m_rowOffset); cidx++;
-                        corners[cidx] = wxPoint(0, ((fw + 1) * m_heightRow) + m_rowOffset); cidx++;
+                        corners[cidx] = wxPoint((fd - 1) * m_widthCol, ((fw + 1) * m_heightRow)); cidx++;
+                        corners[cidx] = wxPoint(0, ((fw + 1) * m_heightRow)); cidx++;
                     }
 
-                    corners[cidx] = wxPoint(0, ((tw + 1) * m_heightRow) + m_rowOffset); cidx++;
-                    corners[cidx] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow) + m_rowOffset); cidx++;
+                    corners[cidx] = wxPoint(0, ((tw + 1) * m_heightRow)); cidx++;
+                    corners[cidx] = wxPoint(td * m_widthCol, ((tw + 1) * m_heightRow)); cidx++;
 
                     if ( td < 7 )
                     {
-                        corners[cidx] = wxPoint(td * m_widthCol, (tw * m_heightRow) + m_rowOffset); cidx++;
-                        corners[cidx] = wxPoint(7 * m_widthCol, (tw * m_heightRow) + m_rowOffset); cidx++;
+                        corners[cidx] = wxPoint(td * m_widthCol, (tw * m_heightRow)); cidx++;
+                        corners[cidx] = wxPoint(7 * m_widthCol, (tw * m_heightRow)); cidx++;
                     }
 
-                    corners[cidx] = wxPoint(7 * m_widthCol, (fw * m_heightRow) + m_rowOffset); cidx++;
+                    corners[cidx] = wxPoint(7 * m_widthCol, (fw * m_heightRow)); cidx++;
 
                     numpoints = cidx;
@@ -1362,5 +1172,5 @@
         else
         {
-            *day += ( startOnMonday ) ? 0 : 1;
+            day += ( startOnMonday ) ? 0 : 1;
         }
 
@@ -1472,4 +1282,6 @@
         case wxCAL_HITTEST_DECMONTH:
         case wxCAL_HITTEST_INCMONTH:
+        case wxCAL_HITTEST_INCYEAR:
+        case wxCAL_HITTEST_DECYEAR:
         case wxCAL_HITTEST_SURROUNDING_WEEK:
             SetDateAndNotify(date); // we probably only want to refresh the control. No notification.. (maybe as an option?)
@@ -1486,62 +1298,120 @@
 }
 
-wxCalendarHitTestResult wxCalendarCtrl::HitTest(const wxPoint& pos,
-                                                wxDateTime *date,
-                                                wxDateTime::WeekDay *wd)
+void wxCalendarCtrl::OnRightClick(wxMouseEvent& event)
 {
-    RecalcGeometry();
-
-    wxCoord y = pos.y;
-
-///////////////////////////////////////////////////////////////////////////////////////////////////////
-    if ( (GetWindowStyle() & wxCAL_SEQUENTIAL_MONTH_SELECTION) )
+    // We are only interested if the click hit the title bar.
+    if ( AllowMonthChange() && event.GetPosition().y < m_heightRow)
     {
-        // Header: month
-
-        // we need to find out if the hit is on left arrow, on month or on right arrow
-        // left arrow?
-        if ( wxRegion(m_leftArrowRect).Contains(pos) == wxInRegion )
+        // Show the month pop-up menu.
+        wxMenu popup(_T(""));
+        for(wxDateTime::Month m = wxDateTime::Jan; m<=wxDateTime::Dec; wxNextMonth(m))
         {
-            if ( date )
-            {
-                if ( IsDateInRange(m_date - wxDateSpan::Month()) )
+            popup.Append(MONTH_JANUARY+m, wxDateTime::GetMonthName(m));
+        }
+        PopupMenu(&popup,event.GetPosition().x+5,event.GetPosition().y);
+    }
+}
+
+// This function is called if user selects any of the pop up months.
+void wxCalendarCtrl::OnMonthSelect(wxCommandEvent& event)
+{
+    wxDateTime date = m_date;
+    date.SetMonth(static_cast<wxDateTime::Month>(event.GetId()-MONTH_JANUARY));
+    SetDateAndNotify(date);
+}
+
+void wxCalendarCtrl::DecrimentDate(wxDateTime *date, const wxDateSpan span)
+{
+    if ( IsDateInRange(m_date - span) )
                 {
-                    *date = m_date - wxDateSpan::Month();
+        *date = m_date - span;
                 }
                 else
                 {
                     *date = GetLowerDateLimit();
-                }
             }
+}
 
-            return wxCAL_HITTEST_DECMONTH;
+void wxCalendarCtrl::IncrementDate(wxDateTime *date, const wxDateSpan span)
+{
+    if ( IsDateInRange(m_date + span ) )
+    {
+        *date = m_date + span;
         }
-
-        if ( wxRegion(m_rightArrowRect).Contains(pos) == wxInRegion )
+    else
         {
-            if ( date )
+        *date = GetUpperDateLimit();
+    }
+}
+
+wxCalendarHitTestResult wxCalendarCtrl::HitTest(const wxPoint& pos,
+                                                wxDateTime *date,
+                                                wxDateTime::WeekDay *wd)
+{
+    int colCount = HasFlag(wxCAL_SHOW_WEEK_NUMBERS)?8:7;
+    wxCoord y = pos.y;
+
+    // ...............................................................
+    // Month - Year row
+    if ( y < m_heightRow)
+    {
+        bool allowYear = AllowYearChange();
+        bool allowMonth = AllowMonthChange();
+        if( !allowMonth )
+            return wxCAL_HITTEST_NOWHERE;
+
+        if( pos.x < m_widthCol )
             {
-                if ( IsDateInRange(m_date + wxDateSpan::Month()) )
+            if(allowYear)
                 {
-                    *date = m_date + wxDateSpan::Month();
+                if(date)
+                    DecrimentDate(date,wxDateSpan::Year());
+                return wxCAL_HITTEST_DECYEAR;
                 }
-                else
+            if(date)
+                DecrimentDate(date,wxDateSpan::Month());
+            return wxCAL_HITTEST_DECMONTH;
+        }
+        if( pos.x > m_widthCol*(colCount-1) )
                 {
-                    *date = GetUpperDateLimit();
+            if(allowYear)
+            {
+                if(date)
+                    IncrementDate(date,wxDateSpan::Year());
+                return wxCAL_HITTEST_INCYEAR;
                 }
+            if(date)
+                IncrementDate(date,wxDateSpan::Month());
+            return wxCAL_HITTEST_INCMONTH;
             }
 
+        // Header: month
+        if( allowMonth )
+        {
+            if( pos.x >= m_widthCol && pos.x < m_widthCol*2 )
+            {
+                if(date)
+                    DecrimentDate(date,wxDateSpan::Month());
+                return wxCAL_HITTEST_DECMONTH;
+            }
+            if( pos.x > m_widthCol*(colCount-2) && pos.x < m_widthCol*(colCount-1) )
+            {
+                if(date)
+                    IncrementDate(date,wxDateSpan::Month());
             return wxCAL_HITTEST_INCMONTH;
         }
-
     }
+        return wxCAL_HITTEST_NOWHERE;
+    }
 
-///////////////////////////////////////////////////////////////////////////////////////////////////////
-    // Header: Days
-    int wday = pos.x / m_widthCol;
-//    if ( y < m_heightRow )
-    if ( y < (m_heightRow + m_rowOffset) )
-    {
-        if ( y > m_rowOffset )
+    // ...............................................................
+    // Row of week day names
+
+    if ( HasFlag(wxCAL_SHOW_WEEK_NUMBERS) && pos.x < m_widthCol )
+        return wxCAL_HITTEST_NOWHERE;
+
+    int wday = HasFlag(wxCAL_SHOW_WEEK_NUMBERS) ? ((pos.x - m_widthCol) / m_widthCol) : pos.x / m_widthCol;
+
+    if ( y < m_heightRow * 2 )
         {
             if ( wd )
@@ -1554,15 +1424,10 @@
                 *wd = (wxDateTime::WeekDay)wday;
             }
-
             return wxCAL_HITTEST_HEADER;
         }
-        else
-        {
-            return wxCAL_HITTEST_NOWHERE;
-        }
-    }
 
-//    int week = (y - m_heightRow) / m_heightRow;
-    int week = (y - (m_heightRow + m_rowOffset)) / m_heightRow;
+    // ...............................................................
+    // Day numbers
+    int week = (y - (m_heightRow * 2)) / m_heightRow;
     if ( week >= 6 || wday >= 7 )
     {
@@ -1590,54 +1455,4 @@
     {
         return wxCAL_HITTEST_NOWHERE;
-    }
-}
-
-// ----------------------------------------------------------------------------
-// subcontrols events handling
-// ----------------------------------------------------------------------------
-
-void wxCalendarCtrl::OnMonthChange(wxCommandEvent& event)
-{
-    wxDateTime::Tm tm = m_date.GetTm();
-
-    wxDateTime::Month mon = (wxDateTime::Month)event.GetInt();
-    if ( tm.mday > wxDateTime::GetNumberOfDays(mon, tm.year) )
-    {
-        tm.mday = wxDateTime::GetNumberOfDays(mon, tm.year);
-    }
-
-    wxDateTime target = wxDateTime(tm.mday, mon, tm.year);
-
-    ChangeMonth(&target);
-    SetDateAndNotify(target);
-}
-
-void wxCalendarCtrl::OnYearChange(wxCommandEvent& event)
-{
-    int year = (int)event.GetInt();
-    if ( year == INT_MIN )
-    {
-        // invalid year in the spin control, ignore it
-        return;
-    }
-
-    wxDateTime::Tm tm = m_date.GetTm();
-
-    if ( tm.mday > wxDateTime::GetNumberOfDays(tm.mon, year) )
-    {
-        tm.mday = wxDateTime::GetNumberOfDays(tm.mon, year);
-    }
-
-    wxDateTime target = wxDateTime(tm.mday, tm.mon, year);
-
-    if ( ChangeYear(&target) )
-    {
-        SetDateAndNotify(target);
-    }
-    else
-    {
-        // In this case we don't want to change the date. That would put us
-        // inside the same year but a strange number of months forward/back..
-        m_spinYear->SetValue(target.GetYear());
     }
 }

 	  	 

diff --git a/src/common/dcgraph.cpp b/src/common/dcgraph.cpp
index b20e449..0d7ff5e 100644
--- a/src/common/dcgraph.cpp
+++ b/src/common/dcgraph.cpp
@@ -292,14 +292,7 @@ void wxGCDCImpl::UpdateClipBox()
 void wxGCDCImpl::DoGetClippingBox(wxCoord *x, wxCoord *y, wxCoord *w, wxCoord *h) const
 {
     wxCHECK_RET( IsOk(), wxS("wxGCDC::DoGetClippingRegion - invalid GC") );
-#ifdef __WXOSX__
-    // This is a legacy implementation which doesn't
-    // return proper values if graphics context coordinates
-    // were transformed after the call to SetClippingRegion().
-    // TODO: Check wxMacCoreGraphics::GetClipBox()
-    // and switch to the code used by other ports (below).
-    wxDCImpl::DoGetClippingBox(x, y, w, h);
-#else
+
     // Check if we should retrieve the clipping region possibly not set
     // by SetClippingRegion() but modified by application: this can
     // happen when we're associated with an existing graphics context using
@@ -319,7 +312,6 @@ void wxGCDCImpl::DoGetClippingBox(wxCoord *x, wxCoord *y, wxCoord *w, wxCoord *h
         *w = m_clipX2 - m_clipX1;
     if ( h )
         *h = m_clipY2 - m_clipY1;
-#endif // __WXOSX__ / !__WXOSX__
 }
 
 void wxGCDCImpl::DoSetClippingRegion( wxCoord x, wxCoord y, wxCoord w, wxCoord h )
@@ -342,16 +334,8 @@ void wxGCDCImpl::DoSetClippingRegion( wxCoord x, wxCoord y, wxCoord w, wxCoord h
     }
     m_graphicContext->Clip( x, y, w, h );
 
-#ifdef __WXOSX__
-    // This is a legacy implementation which has to be used
-    // because wxMacCoreGraphics::GetClipBox() is not yet tested.
-    // TODO: Check wxMacCoreGraphics::GetClipBox()
-    // and switch to the code used by other ports (below).
-    wxDCImpl::DoSetClippingRegion(x, y, w, h);
-#else
     m_clipping = true;
     UpdateClipBox();
-#endif // __WXOSX__ / !__WXOSX__
 }
 
 void wxGCDCImpl::DoSetDeviceClippingRegion( const wxRegion &region )
@@ -359,22 +343,6 @@ void wxGCDCImpl::DoSetDeviceClippingRegion( const wxRegion &region )
     // region is in device coordinates
     wxCHECK_RET( IsOk(), wxT("wxGCDC(cg)::DoSetDeviceClippingRegion - invalid DC") );
 
-#ifdef __WXOSX__
-    // This is a legacy implementation without
-    // full conversion from device to logical coordinates
-    // (only offset of the origin is taken into account,
-    // but e.g. scale is not).
-    // Solution with full conversion doesn't seem to work under WXOSX.
-    // TODO: Check wxMacCoreGraphics::Clip() and GetClipBox()
-    // and switch to the code used by other renderers (below).
-    wxRegion logRegion(region);
-
-    logRegion.Offset(DeviceToLogicalX(0), DeviceToLogicalY(0));
-    m_graphicContext->Clip(logRegion);
-    wxRect newRegion = logRegion.GetBox();
-    wxDCImpl::DoSetClippingRegion(newRegion.GetLeft(), newRegion.GetTop(),
-                                  newRegion.GetWidth(), newRegion.GetHeight());
-#else
     // Because graphics context works with logical coordinates
     // and clipping region is given in device coordinates
     // we need temporarily reset graphics context's coordinate system
@@ -395,7 +363,6 @@ void wxGCDCImpl::DoSetDeviceClippingRegion( const wxRegion &region )
 
     m_clipping = true;
     UpdateClipBox();
-#endif // __WXOSX__ / !__WXOSX__
 }
 
 void wxGCDCImpl::DestroyClippingRegion()
@@ -1254,25 +1221,9 @@ void wxGCDCImpl::Clear(void)
     m_graphicContext->SetPen( p );
     wxCompositionMode formerMode = m_graphicContext->GetCompositionMode();
     m_graphicContext->SetCompositionMode(wxCOMPOSITION_SOURCE);
-#ifdef __WXOSX__
-    // This is a legacy implementation which doesn't take advantage
-    // of clipping region bounds retrieved by wxMacCoreGraphicsContext::GetClipBox
-    // because this function is not yet verified.
-    // Note: Legacy implmentation might not work work properly
-    // if graphics context is rotated
-    // TODO: Do the tests of wxMacCoreGraphicsContext::GetClipBox
-    // and switch to the implmenentation used by other renderers (code below).
-    //
-    // maximum positive coordinate Cairo can handle is 2^23 - 1
-    // Use a value slightly less than this to be sure we avoid the limit
-    DoDrawRectangle(
-        DeviceToLogicalX(0), DeviceToLogicalY(0),
-        DeviceToLogicalXRel(0x800000 - 64), DeviceToLogicalYRel(0x800000 - 64));
-#else
     double x, y, w, h;
     m_graphicContext->GetClipBox(&x, &y, &w, &h);
     m_graphicContext->DrawRectangle(x, y, w, h);
-#endif // __WXOSX__ / !__WXOSX__
     m_graphicContext->SetCompositionMode(formerMode);
     m_graphicContext->SetPen( m_pen );
     m_graphicContext->SetBrush( m_brush );
diff --git a/src/osx/carbon/graphics.cpp b/src/osx/carbon/graphics.cpp
index 033d6ee6..440cb8d 100644
--- a/src/osx/carbon/graphics.cpp
+++ b/src/osx/carbon/graphics.cpp
@@ -1401,6 +1401,7 @@ public:
 private:
     bool EnsureIsValid();
     void CheckInvariants() const;
+    void ResetClipAndMatrix();
 
     virtual void DoDrawText( const wxString &str, wxDouble x, wxDouble y ) wxOVERRIDE;
     virtual void DoDrawRotatedText( const wxString &str, wxDouble x, wxDouble y, wxDouble angle ) wxOVERRIDE;
@@ -1410,6 +1411,7 @@ private:
     bool m_contextSynthesized;
     CGAffineTransform m_windowTransform;
     bool m_invisible;
+    int m_stateStackSize;
 
 #if wxOSX_USE_COCOA_OR_CARBON
     wxCFRef<HIShapeRef> m_clipRgn;
@@ -1473,6 +1475,7 @@ void wxMacCoreGraphicsContext::Init()
     m_invisible = false;
     m_antialias = wxANTIALIAS_DEFAULT;
     m_interpolation = wxINTERPOLATION_DEFAULT;
+    m_stateStackSize = 0;
 }
 
 wxMacCoreGraphicsContext::wxMacCoreGraphicsContext( wxGraphicsRenderer* renderer, CGContextRef cgcontext, wxDouble width, wxDouble height ) : wxGraphicsContext(renderer)
@@ -1481,6 +1484,7 @@ wxMacCoreGraphicsContext::wxMacCoreGraphicsContext( wxGraphicsRenderer* renderer
     SetNativeContext(cgcontext);
     m_width = width;
     m_height = height;
+    m_windowTransform = CGAffineTransformIdentity;
 }
 
 wxMacCoreGraphicsContext::wxMacCoreGraphicsContext( wxGraphicsRenderer* renderer, wxWindow* window ): wxGraphicsContext(renderer)
@@ -1535,7 +1539,21 @@ void wxMacCoreGraphicsContext::CheckInvariants() const
     // check invariants here for debugging ...
 }
 
-
+void wxMacCoreGraphicsContext::ResetClipAndMatrix()
+{
+    CheckInvariants();
+    if ( m_cgContext )
+    {
+        // there is no way for clearing the clip, we can only revert to the stored
+        // also reset the transformation matrix to the one used by CG initially
+        while (m_stateStackSize > 0)
+            PopState();
+        PushState();
+        CGContextSetTextMatrix( m_cgContext, CGAffineTransformIdentity );
+        PushState();
+    }
+    CheckInvariants();
+}
 
 void wxMacCoreGraphicsContext::StartPage( wxDouble width, wxDouble height )
 {
@@ -1589,7 +1607,7 @@ bool wxMacCoreGraphicsContext::EnsureIsValid()
 #endif
         if ( m_cgContext )
         {
-            CGContextSaveGState( m_cgContext );
+            PushState();
 #if wxOSX_USE_COCOA_OR_CARBON
             if ( m_clipRgn.get() )
             {
@@ -1610,7 +1628,7 @@ bool wxMacCoreGraphicsContext::EnsureIsValid()
             CGContextConcatCTM( m_cgContext, m_windowTransform );
             CGContextSetTextMatrix( m_cgContext, CGAffineTransformIdentity );
             m_contextSynthesized = true;
-            CGContextSaveGState( m_cgContext );
+            PushState();
 
 #if 0 // turn on for debugging of clientdc
             static float color = 0.5 ;
@@ -1817,7 +1835,7 @@ bool wxMacCoreGraphicsContext::SetCompositionMode(wxCompositionMode op)
 void wxMacCoreGraphicsContext::BeginLayer(wxDouble opacity)
 {
     CheckInvariants();
-    CGContextSaveGState(m_cgContext);
+    PushState();
     CGContextSetAlpha(m_cgContext, (CGFloat) opacity);
     CGContextBeginTransparencyLayer(m_cgContext, 0);
     CheckInvariants();
@@ -1827,7 +1845,7 @@ void wxMacCoreGraphicsContext::EndLayer()
 {
     CheckInvariants();
     CGContextEndTransparencyLayer(m_cgContext);
-    CGContextRestoreGState(m_cgContext);
+    PopState();
     CheckInvariants();
 }
 
@@ -1837,6 +1855,8 @@ void wxMacCoreGraphicsContext::Clip( const wxRegion &region )
 #if wxOSX_USE_COCOA_OR_CARBON
     if( m_cgContext )
     {
+        ResetClipAndMatrix();
+
         wxCFRef<HIShapeRef> shape = wxCFRefFromGet(region.GetWXHRGN());
         // if the shape is empty, HIShapeReplacePathInCGContext doesn't work
         if ( HIShapeIsEmpty(shape))
@@ -1895,13 +1915,14 @@ void wxMacCoreGraphicsContext::Clip( wxDouble x, wxDouble y, wxDouble w, wxDoubl
     // resets the clipping to original extent
 void wxMacCoreGraphicsContext::ResetClip()
 {
+    CheckInvariants();
     if ( m_cgContext )
     {
         // there is no way for clearing the clip, we can only revert to the stored
         // state, but then we have to make sure everything else is NOT restored
         CGAffineTransform transform = CGContextGetCTM( m_cgContext );
-        CGContextRestoreGState( m_cgContext );
-        CGContextSaveGState( m_cgContext );
+        PopState();
+        PushState();
         CGAffineTransform transformNew = CGContextGetCTM( m_cgContext );
         transformNew = CGAffineTransformInvert( transformNew ) ;
         CGContextConcatCTM( m_cgContext, transformNew);
@@ -1942,9 +1963,9 @@ void wxMacCoreGraphicsContext::GetClipBox(wxDouble* x, wxDouble* y, wxDouble* w,
     CheckInvariants();
 
     if ( x )
-        *x = r.origin.x;
+        *x = isinf(r.origin.x) ? 0.0 : r.origin.x;
     if ( y )
-        *y = r.origin.y;
+        *y = isinf(r.origin.y) ? 0.0 : r.origin.y;
     if ( w )
         *w = r.size.width;
     if ( h )
@@ -2039,11 +2060,11 @@ void wxMacCoreGraphicsContext::FillPath( const wxGraphicsPath &path , wxPolygonF
 
     if ( ((wxMacCoreGraphicsBrushData*)m_brush.GetRefData())->IsShading() )
     {
-        CGContextSaveGState( m_cgContext );
+        PushState();
         CGContextAddPath( m_cgContext , (CGPathRef) path.GetNativePath() );
         CGContextClip( m_cgContext );
         CGContextDrawShading( m_cgContext, ((wxMacCoreGraphicsBrushData*)m_brush.GetRefData())->GetShading() );
-        CGContextRestoreGState( m_cgContext);
+        PopState();
     }
     else
     {
@@ -2066,8 +2087,8 @@ void wxMacCoreGraphicsContext::SetNativeContext( CGContextRef cg )
     if ( m_cgContext )
     {
         CheckInvariants();
-        CGContextRestoreGState( m_cgContext );
-        CGContextRestoreGState( m_cgContext );
+        PopState();
+        PopState();
         if ( m_contextSynthesized )
         {
 #if wxOSX_USE_COCOA
@@ -2090,9 +2111,9 @@ void wxMacCoreGraphicsContext::SetNativeContext( CGContextRef cg )
     if (m_cgContext)
     {
         CGContextRetain(m_cgContext);
-        CGContextSaveGState( m_cgContext );
+        PushState();
         CGContextSetTextMatrix( m_cgContext, CGAffineTransformIdentity );
-        CGContextSaveGState( m_cgContext );
+        PushState();
         m_contextSynthesized = false;
     }
 }
@@ -2148,11 +2169,11 @@ void wxMacCoreGraphicsContext::DrawBitmap( const wxGraphicsBitmap &bmp, wxDouble
             {
                 // TODO clip to mask
             /*
-                CGContextSaveGState( m_cgContext );
+                PushState();
                 CGContextAddPath( m_cgContext , (CGPathRef) path.GetNativePath() );
                 CGContextClip( m_cgContext );
                 CGContextDrawShading( m_cgContext, ((wxMacCoreGraphicsBrushData*)m_brush.GetRefData())->GetShading() );
-                CGContextRestoreGState( m_cgContext);
+                PopState();
             */
             }
             else
@@ -2198,6 +2219,7 @@ void wxMacCoreGraphicsContext::PushState()
         return;
 
     CGContextSaveGState( m_cgContext );
+    m_stateStackSize++;
 }
 
 void wxMacCoreGraphicsContext::PopState()
@@ -2206,6 +2228,7 @@ void wxMacCoreGraphicsContext::PopState()
         return;
 
     CGContextRestoreGState( m_cgContext );
+    m_stateStackSize--;
 }
 
 void wxMacCoreGraphicsContext::DoDrawText( const wxString &str, wxDouble x, wxDouble y )
@@ -2239,7 +2262,7 @@ void wxMacCoreGraphicsContext::DoDrawText( const wxString &str, wxDouble x, wxDo
 
     y += CTFontGetAscent(font);
 
-    CGContextSaveGState(m_cgContext);
+    PushState();
     CGAffineTransform textMatrix = CGContextGetTextMatrix(m_cgContext);
 
     CGContextTranslateCTM(m_cgContext, (CGFloat) x, (CGFloat) y);
@@ -2270,7 +2293,7 @@ void wxMacCoreGraphicsContext::DoDrawText( const wxString &str, wxDouble x, wxDo
         CGContextStrokeLineSegments(m_cgContext, points, 2);
     }
 
-    CGContextRestoreGState(m_cgContext);
+    PopState();
     CGContextSetTextMatrix(m_cgContext, textMatrix);
     CGColorRelease( col );
     CheckInvariants();

Index: include/wx/aui/floatpane.h
===================================================================
--- include/wx/aui/floatpane.h	(revision 74279)
+++ include/wx/aui/floatpane.h	(working copy)
@@ -43,6 +43,9 @@
     void SetPaneWindow(const wxAuiPaneInfo& pane);
     wxAuiManager* GetOwnerManager() const;
 
+    // Allow processing accelerators to the parent frame
+    virtual bool IsTopNavigationDomain() const { return false; }
+
 protected:
     virtual void OnMoveStart();
     virtual void OnMoving(const wxRect& windowRect, wxDirection dir);
Index: src/gtk/window.cpp
===================================================================
--- src/gtk/window.cpp	(revision 74279)
+++ src/gtk/window.cpp	(working copy)
@@ -1014,6 +1014,7 @@
     wxKeyEvent event( wxEVT_KEY_DOWN );
     bool ret = false;
     bool return_after_IM = false;
+    wxWindowGTK *ancestor = NULL;
 
     if( wxTranslateGTKKeyEventToWx(event, win, gdk_event) )
     {
@@ -1026,7 +1027,7 @@
 
         // Next check for accelerators.
 #if wxUSE_ACCEL
-        wxWindowGTK *ancestor = win;
+        ancestor = win;
         while (ancestor)
         {
             int command = ancestor->GetAcceleratorTable()->GetCommand( event );
@@ -1046,7 +1047,7 @@
 
                 break;
             }
-            if (ancestor->IsTopLevel())
+            if (ancestor->IsTopNavigationDomain())
                 break;
             ancestor = ancestor->GetParent();
         }
@@ -1122,6 +1123,12 @@
             AdjustCharEventKeyCodes(eventChar);
 
             ret = win->HandleWindowEvent(eventChar);
+
+            // Last resort, try to activate accelerators on the most top level window but without
+            // caring about the return value to allow to the event to continue its propagation
+            // and without breaking what happens in wxgtk_tlw_key_press_event (toplevel.cpp)
+            if ( !ret && ancestor && (ancestor != win) && ancestor->IsTopLevel() )
+                gtk_window_activate_key(GTK_WINDOW(ancestor->m_widget), gdk_event);
         }
     }
 

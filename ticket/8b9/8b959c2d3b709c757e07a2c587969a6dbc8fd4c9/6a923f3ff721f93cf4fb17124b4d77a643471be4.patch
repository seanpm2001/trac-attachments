Index: include/wx/generic/grid.h
===================================================================
--- include/wx/generic/grid.h	(revision 72543)
+++ include/wx/generic/grid.h	(working copy)
@@ -108,6 +108,7 @@
 class wxGridColumnOperations;
 class wxGridDirectionOperations;
 
+class wxGridEvent;
 
 // ----------------------------------------------------------------------------
 // macros
@@ -918,6 +919,14 @@
         wxGridSelectRowsOrColumns = wxGridSelectRows | wxGridSelectColumns
     };
 
+    // possible ways to handle the TAB key
+    enum wxGridTabHandlingModes
+    {
+        wxGridTabLocked           = 0,  // TAB will move to to the rightmost column, then it will not do anything
+        wxGridTabLockedWrap       = 1,  // TAB will move to to the rightmost column, then it will move to the first column of the next row
+        wxGridTabUnlocked         = 2   // TAB will move to to the rightmost column, then it will move to the next control
+    };
+
     // creation and destruction
     // ------------------------
 
@@ -1171,6 +1180,7 @@
     bool MoveCursorDownBlock( bool expandSelection );
     bool MoveCursorLeftBlock( bool expandSelection );
     bool MoveCursorRightBlock( bool expandSelection );
+    void SetTabMode( wxGridTabHandlingModes tabmode ) { m_tabHandlingMode = tabmode; }
 
 
     // ------ label and gridline formatting
@@ -2074,6 +2084,9 @@
     bool       m_editable;              // applies to whole grid
     bool       m_cellEditCtrlEnabled;   // is in-place edit currently shown?
 
+    // how to handle TAB keys
+    wxGridTabHandlingModes m_tabHandlingMode;
+
     void Init();        // common part of all ctors
     void Create();
     void CreateColumnWindow();
@@ -2112,8 +2125,8 @@
     void OnKeyUp( wxKeyEvent& );
     void OnChar( wxKeyEvent& );
     void OnEraseBackground( wxEraseEvent& );
+    void OnTabbing( wxGridEvent& );
 
-
     bool SetCurrentCell( const wxGridCellCoords& coords );
     bool SetCurrentCell( int row, int col )
         { return SetCurrentCell( wxGridCellCoords(row, col) ); }
@@ -2241,6 +2254,8 @@
     void DoEndDragResizeCol(const wxMouseEvent& event);
     void DoEndMoveCol(int pos);
 
+    // process a TAB keypress
+    void DoGridProcessTab( wxKeyboardState& event );
 
     // common implementations of methods defined for both rows and columns
     void DeselectLine(int line, const wxGridOperations& oper);
@@ -2598,6 +2613,7 @@
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_GRID_CELL_BEGIN_DRAG, wxGridEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_GRID_COL_MOVE, wxGridEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_GRID_COL_SORT, wxGridEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_GRID_TABBING, wxGridEvent );
 
 typedef void (wxEvtHandler::*wxGridEventFunction)(wxGridEvent&);
 typedef void (wxEvtHandler::*wxGridSizeEventFunction)(wxGridSizeEvent&);
@@ -2648,6 +2664,7 @@
 #define EVT_GRID_CMD_EDITOR_HIDDEN(id, fn)       wx__DECLARE_GRIDEVT(EDITOR_HIDDEN, id, fn)
 #define EVT_GRID_CMD_EDITOR_CREATED(id, fn)      wx__DECLARE_GRIDEDITOREVT(EDITOR_CREATED, id, fn)
 #define EVT_GRID_CMD_CELL_BEGIN_DRAG(id, fn)     wx__DECLARE_GRIDEVT(CELL_BEGIN_DRAG, id, fn)
+#define EVT_GRID_CMD_TABBING(id, fn)             wx__DECLARE_GRIDEVT(TABBING, id, fn)
 
 // same as above but for any id (exists mainly for backwards compatibility but
 // then it's also true that you rarely have multiple grid in the same window)
@@ -2671,6 +2688,7 @@
 #define EVT_GRID_EDITOR_HIDDEN(fn)       EVT_GRID_CMD_EDITOR_HIDDEN(wxID_ANY, fn)
 #define EVT_GRID_EDITOR_CREATED(fn)      EVT_GRID_CMD_EDITOR_CREATED(wxID_ANY, fn)
 #define EVT_GRID_CELL_BEGIN_DRAG(fn)     EVT_GRID_CMD_CELL_BEGIN_DRAG(wxID_ANY, fn)
+#define EVT_GRID_TABBING(fn)             EVT_GRID_CMD_TABBING(wxID_ANY, fn)
 
 // we used to have a single wxEVT_GRID_CELL_CHANGE event but it was split into
 // wxEVT_GRID_CELL_CHANGING and CHANGED ones in wx 2.9.0, however the CHANGED
Index: samples/grid/griddemo.cpp
===================================================================
--- samples/grid/griddemo.cpp	(revision 72543)
+++ samples/grid/griddemo.cpp	(working copy)
@@ -1943,6 +1943,18 @@
         event.Skip();
     }
 
+    void OnGridTabbing(wxGridEvent& event)
+    {
+        // just to test, make the cursor move up and down
+        if( event.ShiftDown() && m_grid->GetGridCursorRow() > 0 ) {
+            m_grid->MoveCursorUp( false );
+        }
+        if( !event.ShiftDown() && (m_grid->GetGridCursorRow() < m_grid->GetNumberRows() - 1) ) {
+            m_grid->MoveCursorDown( false );
+        }
+        event.Veto();   // avoid key processing by the grid
+    }
+
     void UpdateOrderAndVisibility()
     {
         wxString s;
@@ -2007,6 +2019,8 @@
     EVT_GRID_COL_SIZE(TabularGridFrame::OnGridColSize)
 
     EVT_IDLE(TabularGridFrame::OnIdle)
+
+    EVT_GRID_TABBING(TabularGridFrame::OnGridTabbing)
 END_EVENT_TABLE()
 
 TabularGridFrame::TabularGridFrame()
@@ -2027,6 +2041,9 @@
     m_grid->UseNativeColHeader();
     m_grid->HideRowLabels();
 
+//    m_grid->SetTabMode( wxGrid::wxGridTabUnlocked );
+//    m_grid->SetTabMode( wxGrid::wxGridTabLockedWrap );
+
     // add it and the other controls to the frame
     wxSizer * const sizerTop = new wxBoxSizer(wxVERTICAL);
     sizerTop->Add(m_grid, wxSizerFlags(1).Expand().Border());
Index: src/generic/grid.cpp
===================================================================
--- src/generic/grid.cpp	(revision 72543)
+++ src/generic/grid.cpp	(working copy)
@@ -155,6 +155,7 @@
 wxDEFINE_EVENT( wxEVT_GRID_EDITOR_SHOWN, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_EDITOR_HIDDEN, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_EDITOR_CREATED, wxGridEditorCreatedEvent );
+wxDEFINE_EVENT( wxEVT_GRID_TABBING, wxGridEvent );
 
 // ----------------------------------------------------------------------------
 // private helpers
@@ -2157,6 +2158,7 @@
     EVT_KEY_UP( wxGrid::OnKeyUp )
     EVT_CHAR ( wxGrid::OnChar )
     EVT_ERASE_BACKGROUND( wxGrid::OnEraseBackground )
+    EVT_GRID_TABBING( wxGrid::OnTabbing )
 END_EVENT_TABLE()
 
 bool wxGrid::Create(wxWindow *parent, wxWindowID id,
@@ -2514,6 +2516,8 @@
     // now anyhow, so just set the parameters directly
     m_xScrollPixelsPerLine = GRID_SCROLL_LINE_X;
     m_yScrollPixelsPerLine = GRID_SCROLL_LINE_Y;
+
+    m_tabHandlingMode = wxGridTabLocked;
 }
 
 // ----------------------------------------------------------------------------
@@ -4937,30 +4941,17 @@
                 break;
 
             case WXK_TAB:
-                if (event.ShiftDown())
                 {
-                    if ( GetGridCursorCol() > 0 )
-                    {
-                        MoveCursorLeft( false );
+                    // send an event: the grid itself will handle it and, if needed, skip it to the parent window for custom handling
+                    // see wxGrid::OnTabbing()
+                    wxGridEvent gridEvt( GetId(), wxEVT_GRID_TABBING, this, GetGridCursorRow(), GetGridCursorCol(), -1, -1, false, event );
+                    GetEventHandler()->ProcessEvent(gridEvt);
+                    bool vetoed = !gridEvt.IsAllowed();
+                    if( !vetoed ) {
+                        // if some event handler handles the keypress it must veto the event to avoid double processing
+                        DoGridProcessTab( event );
                     }
-                    else
-                    {
-                        // at left of grid
-                        DisableCellEditControl();
-                    }
                 }
-                else
-                {
-                    if ( GetGridCursorCol() < GetNumberCols() - 1 )
-                    {
-                        MoveCursorRight( false );
-                    }
-                    else
-                    {
-                        // at right of grid
-                        DisableCellEditControl();
-                    }
-                }
                 break;
 
             case WXK_HOME:
@@ -5092,6 +5083,77 @@
 {
 }
 
+void wxGrid::OnTabbing( wxGridEvent& event )
+{
+    if( m_tabHandlingMode == wxGridTabLocked ) {
+        // this is the default behaviour: skip the event to let the user implement custom handling
+        // the KeyPress event handler will take care of the keypress it it has not been handled
+        event.Skip();
+        return;
+    }
+
+    // here if the user chose a non-default tab handling: do not send the event and process the keypress
+    DoGridProcessTab( event );
+    // veto the event to let the KeyPress handler know that the key has been processed
+    event.Veto();
+}
+
+void wxGrid::DoGridProcessTab( wxKeyboardState& event )
+{
+    bool atFirstCol = (GetGridCursorCol() == 0);                    // true if we are at the first column of the grid
+    bool atLastCol = (GetGridCursorCol() == GetNumberCols() - 1);   // true if we are at the last column
+
+    // TAB processing only changes when we are at the borders of the grid
+    // let's first handle the common behaviour when we are not at the border
+    if( (event.ShiftDown() && !atFirstCol) || (!event.ShiftDown() && !atLastCol) ) {
+        if( event.ShiftDown() ) {
+            MoveCursorLeft( false );
+        }
+        else {
+            MoveCursorRight( false );
+        }
+        return;
+    }
+
+    // here if the cursor is at the border of the grid: the bahaviour changes with the property setting
+    switch( m_tabHandlingMode ) {
+        case wxGridTabLocked:
+            // do nothing: the cursor does not move from the border of the grid
+            DisableCellEditControl();
+            break;
+        case wxGridTabLockedWrap:
+            // we are at the border so we move to another row
+            if( event.ShiftDown() ) {
+                if( GetGridCursorRow() > 0 ) {
+                    SetGridCursor( GetGridCursorRow() - 1, GetNumberCols() - 1 );
+                }
+                else {
+                    DisableCellEditControl();
+                }
+            }
+            else {
+                if( GetGridCursorRow() < GetNumberRows() - 1 ) {
+                    SetGridCursor( GetGridCursorRow() + 1, 0 );
+                }
+                else {
+                    DisableCellEditControl();
+                }
+            }
+            break;
+        case wxGridTabUnlocked:
+            // we are at the border so we move to another control
+            if( event.ShiftDown() ) {
+                Navigate( wxNavigationKeyEvent::IsBackward );
+            }
+            else {
+                Navigate( wxNavigationKeyEvent::IsForward );
+            }
+            break;
+        default:
+            wxFAIL;
+    }
+}
+
 bool wxGrid::SetCurrentCell( const wxGridCellCoords& coords )
 {
     if ( SendEvent(wxEVT_GRID_SELECT_CELL, coords) == -1 )

diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/configure.in wxWidgets_xembed/configure.in
--- wxWidgets_orig/configure.in	2004-07-15 09:19:17.000000000 +0200
+++ wxWidgets_xembed/configure.in	2004-07-26 08:17:06.000000000 +0200
@@ -487,4 +487,6 @@
   DEFAULT_wxUSE_ACCEL=no
   DEFAULT_wxUSE_BUTTON=no
+  DEFAULT_wxUSE_EMBEDDER=no
+  DEFAULT_wxUSE_EMBEDDED_FRAME=no
   DEFAULT_wxUSE_BMPBUTTON=no
   DEFAULT_wxUSE_CALCTRL=no
@@ -671,4 +673,6 @@
   DEFAULT_wxUSE_ACCEL=yes
   DEFAULT_wxUSE_BUTTON=yes
+  DEFAULT_wxUSE_EMBEDDER=yes
+  DEFAULT_wxUSE_EMBEDDED_FRAME=yes
   DEFAULT_wxUSE_BMPBUTTON=yes
   DEFAULT_wxUSE_CALCTRL=yes
@@ -959,4 +963,6 @@
   DEFAULT_wxUSE_BMPBUTTON=yes
   DEFAULT_wxUSE_BUTTON=yes
+  DEFAULT_wxUSE_EMBEDDER=yes
+  DEFAULT_wxUSE_EMBEDDED_FRAME=yes
   DEFAULT_wxUSE_CALCTRL=no
   DEFAULT_wxUSE_CARET=yes
@@ -997,4 +1003,6 @@
   DEFAULT_wxUSE_BMPBUTTON=no
   DEFAULT_wxUSE_BUTTON=no
+  DEFAULT_wxUSE_EMBEDDER=no
+  DEFAULT_wxUSE_EMBEDDED_FRAME=no
   DEFAULT_wxUSE_CALCTRL=no
   DEFAULT_wxUSE_CARET=no
@@ -1043,4 +1051,6 @@
 WX_ARG_ENABLE(accel,       [  --enable-accel          use accelerators], wxUSE_ACCEL)
 WX_ARG_ENABLE(button,      [  --enable-button         use wxButton class], wxUSE_BUTTON)
+WX_ARG_ENABLE(embed,       [  --enable-embed          use wxEmbedder class], wxUSE_EMBEDDER)
+WX_ARG_ENABLE(embedframe,  [  --enable-embedframe     use wxEmbeddedFrame class], wxUSE_EMBEDDED_FRAME)
 WX_ARG_ENABLE(bmpbutton,   [  --enable-bmpbutton      use wxBitmapButton class], wxUSE_BMPBUTTON)
 WX_ARG_ENABLE(calendar,    [  --enable-calendar       use wxCalendarCtrl class], wxUSE_CALCTRL)
@@ -2420,4 +2430,6 @@
                     AM_PATH_GTK_2_0(2.0.0, wx_cv_lib_gtk=2.0, , $GTK_MODULES)
                 else
+                    wxUSE_EMBEDDER=0
+                    wxUSE_EMBEDDED_FRAME=0
                     AM_PATH_GTK(1.2.7, wx_cv_lib_gtk=1.2.7, , $GTK_MODULES)
 
@@ -5335,4 +5347,14 @@
 fi
 
+if test "$wxUSE_EMBEDDER" = "yes"; then
+  AC_DEFINE(wxUSE_EMBEDDER)
+  USES_CONTROLS=1
+fi
+
+if test "$wxUSE_EMBEDDED_FRAME" = "yes"; then
+  AC_DEFINE(wxUSE_EMBEDDED_FRAME)
+  USES_CONTROLS=1
+fi
+
 if test "$wxUSE_BMPBUTTON" = "yes"; then
   AC_DEFINE(wxUSE_BMPBUTTON)
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/docs/latex/wx/classes.tex wxWidgets_xembed/docs/latex/wx/classes.tex
--- wxWidgets_orig/docs/latex/wx/classes.tex	2004-07-15 09:19:17.000000000 +0200
+++ wxWidgets_xembed/docs/latex/wx/classes.tex	2004-07-26 08:17:05.000000000 +0200
@@ -88,4 +88,6 @@
 \input droptrgt.tex
 \input dynlib.tex
+\input embeddedframe.tex
+\input embedder.tex
 \input encconv.tex
 \input eraseevt.tex
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/docs/latex/wx/embeddedframe.tex wxWidgets_xembed/docs/latex/wx/embeddedframe.tex
--- wxWidgets_orig/docs/latex/wx/embeddedframe.tex	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/docs/latex/wx/embeddedframe.tex	2004-07-26 08:17:06.000000000 +0200
@@ -0,0 +1,136 @@
+\section{\class{wxEmbeddedFrame}}\label{wxembeddedframe}
+
+This class is only available on Linux and if wxWidgets uses Gtk 2.
+
+An embedded frame is a window which can be embedded into an other window. It
+uses the XEmbed standard to do this. Look at 
+\urlref{freedesktop.org}{http://www.freedesktop.org/Standards/xembed-spec} 
+for more information about XEmbed and read the XEmbed article in the Topics section of the
+wxWidgets documentation.
+
+When using this class you would usually create your own new class derived from 
+wxEmbeddedFrame. The only thing you must do is to optain the x window id of the
+embedder window, so you can handle it to the constructor.
+
+As of the time of writing this, you can easily embed your application into 
+wxWidgets, Qt, Gtk and SWT (Eclipse) application windows. Embedding into a foreign 
+window works when the embedder and the embedded window are in the same process and 
+when they exist in different processes.
+
+\wxheading{Derived from}
+
+\helpref{wxFrame}{wxframe}\\
+\helpref{wxWindow}{wxwindow}\\
+\helpref{wxEvtHandler}{wxevthandler}\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/embeddedframe.h>
+
+\wxheading{Window styles}
+wxDEFAULT_EMBEDDED_FRAME_STYLE
+\twocolwidtha{5cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\windowstyle{wxDEFAULT_EMBEDDED_FRAME_STYLE}}{This is the default style for the embedded 
+frame. When passing this style, you should also pass a valid X-Window id when creating an instance 
+of this class, because by default, the frame will be embedded.}
+\twocolitem{\windowstyle{wxEMBEDDED_FRAME_EMBED_LATER}}{This frame will be embedded by a foreign 
+window. This style will be used if a remote application is going to embed this frame (called 
+"passive" embedding), rather than this frame embeds itself into a given x window id ("active" embedding).}
+\twocolitem{\windowstyle{wxEMBEDDED_FRAME_STANDALONE}}{Thanks to this style you can decide on 
+runtime if this embedded frame should act like a normal wxFrame (so it wont ever by embedded).}
+\end{twocollist}
+
+\wxheading{Event handling}
+
+\twocolwidtha{7cm}%
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf EVT\_FRAME\_EMBEDDED(id, func)}}{wxEVT\_COMMAND\_FRAME\_EMBEDDED is created
+when the frame has been embedded into the remote window.}
+\end{twocollist}
+
+\wxheading{See also}
+
+\helpref{wxEmbedder}{wxembedder}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxEmbeddedFrame::wxEmbeddedFrame}\label{wxembeddedframeconstr}
+
+\func{}{wxEmbeddedFrame}{\void}
+
+Default constructor.
+
+\func{}{wxEmbeddedFrame}{\param{unsigned long}{windowId}, \param{wxWindow* }{parent}, \param{wxWindowID }{id},\rtfsp
+\param{const wxString\& }{ title}, \param{const wxPoint\&}{ pos = wxDefaultPosition},\rtfsp
+\param{const wxSize\&}{ size = wxDefaultSize}, \param{long}{ style = wxDEFAULT\_FRAME\_STYLE},\rtfsp
+\param{const wxString\& }{name = ``embeddedframe"}}
+
+Constructor, creating the embedded window.
+
+\wxheading{Parameters}
+
+\docparam{windowId}{The x window id of the window where this frame should be embedded.}
+
+\docparam{parent}{The window parent. This may be NULL. If it is non-NULL, the frame will
+always be displayed on top of the parent window on Windows.}
+
+\docparam{id}{The window identifier. It may take a value of -1 to indicate a default value.}
+
+\docparam{title}{The caption of the frame.}
+
+\docparam{pos}{The window position. A value of (-1, -1) indicates a default position, chosen by
+either the windowing system or wxWidgets, depending on platform.}
+
+\docparam{size}{The window size. A value of (-1, -1) indicates a default size, chosen by
+either the windowing system or wxWidgets, depending on platform.}
+
+\docparam{style}{The window style.}
+
+\docparam{name}{The name of the window. This parameter is used to associate a name with the item,
+allowing the application user to set Motif resource values for
+individual windows.}
+
+\wxheading{See also}
+
+\helpref{wxEmbeddedFrame::Create}{wxembeddedframecreate}
+
+\membersection{wxEmbeddedFrame::\destruct{wxEmbeddedFrame}}
+
+\func{void}{\destruct{wxEmbeddedFrame}}{\void}
+
+Destructor. Destroys all child windows.
+
+\membersection{wxEmbeddedFrame::GetWindowId}\label{wxembeddedframegetwindowid}
+
+\func{unsigned long}{GetWindowId}{\void}
+
+\wxheading{Return value}
+
+Returns the x window id of the embedded frame. This id may be used to embed this frame into
+a remote window, initiated by the remote window. Remeber: either the embedded frame embeds itself
+into a remote window (active) or it gets embedded by the remote window (passive)
+
+\membersection{wxEmbeddedFrame::Create}\label{wxEmbeddedFramecreate}
+
+\func{bool}{Create}{\param{unsigned long }{windowId}, \param{wxWindow* }{parent}, \param{wxWindowID }{id},\rtfsp
+\param{const wxString\& }{title}, \param{const wxPoint\&}{ pos = wxDefaultPosition},\rtfsp
+\param{const wxSize\&}{ size = wxDefaultSize}, \param{long}{ style = wxDEFAULT\_FRAME\_STYLE},\rtfsp
+\param{const wxString\& }{name = ``frame"}}
+
+Used in two-step embedded frame construction. See \helpref{wxEmbeddedFrame::wxEmbeddedFrame}{wxEmbeddedFrameconstr}\rtfsp
+for further details.
+
+\membersection{wxEmbeddedFrame::SearchForXid\label{wxembeddedframesearchforxid}
+
+\func{static bool}{SearchForXid}{\param{int\*}{ argc}, \param{char \*\*\*}{ argv}, \param{unsigned long\&}{ xid}, \param{long\&}{ style}}
+
+Because an object of this class may either be standalone (like a normal wxFrame instance) or be embedded into an other window, it is often necessary to handle over the xid of the embedder to the application that should be embedded. A natural way to handle this xid is by command line arguments or environment variables. Because getting the xid is a common task, this function perfoms all needed steps for you. It does read the xid and sets the correct style, so it can be passed when the object will be created. Note that both, the xid and the style arguments are set to a default value by this function.
+
+\wxheading{Return value}
+
+TRUE if either no embedding command line switch and environment variable was given or 
+the xid was extracted correctly. FALSE if an embed switch was given, but the xid 
+couldn't be extracted from it.
+
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/docs/latex/wx/embedder.tex wxWidgets_xembed/docs/latex/wx/embedder.tex
--- wxWidgets_orig/docs/latex/wx/embedder.tex	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/docs/latex/wx/embedder.tex	2004-07-26 08:17:06.000000000 +0200
@@ -0,0 +1,102 @@
+\section{\class{wxEmbedder}}\label{wxembedder}
+
+This class is only available on Linux and if wxWidgets uses Gtk 2.
+
+An embedder is a control that is able to embed an other window in its area. The other 
+window must be aware of the XEmbed protocol. Look at 
+\urlref{freedesktop.org}{http://www.freedesktop.org/Standards/xembed-spec} 
+for more information about XEmbed, or read the XEmbed article in the Topics section of the
+wxWidgets documentation. In short you can embed an instance of wxEmbeddedFrame which may 
+exist in the same or even in an other process running on the same XDisplay.
+
+\wxheading{Derived from}
+
+\helpref{wxControl}{wxcontrol}\\
+\helpref{wxWindow}{wxwindow}\\
+\helpref{wxEvtHandler}{wxevthandler}\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/embedder.h>
+
+\wxheading{Event handling}
+
+\twocolwidtha{7cm}%
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf EVT\_REMOTE\_WINDOW\_REMOVED(id, func)}}{Process a wxEVT\_COMMAND\_REMOTE\_WINDOW\_REMOVED event,
+when the remote windows has gone.}
+\twocolitem{{\bf EVT\_REMOTE\_WINDOW\_ADDED(id, func)}}{Process a wxEVT\_COMMAND\_REMOTE\_WINDOW\_ADDED event,
+when the remote windows has connected.}
+\end{twocollist}
+
+\wxheading{See also}
+
+\helpref{wxEmbeddedFrame}{wxembeddedframe}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxEmbedder::wxEmbedder}\label{wxembedderconstr}
+
+\func{}{wxEmbedder}{\void}
+
+Default constructor.
+
+\func{}{wxEmbedder}{\param{wxWindow* }{parent}, \param{wxWindowID}{ id}, \rtfsp
+\param{const wxPoint\& }{pos}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator}, \param{const wxString\& }{name = ``embedder"}}
+
+Constructor, creating the embedder widget.
+
+\wxheading{Parameters}
+
+\docparam{parent}{Parent window. Must not be NULL.}
+
+\docparam{id}{Embedder identifier. A value of -1 indicates a default value.}
+
+\docparam{pos}{Embedder position.}
+
+\docparam{size}{Embedder size.}
+
+\docparam{style}{Window style. There are no styles available yet.}
+
+\docparam{validator}{Window validator.}
+
+\docparam{name}{Window name.}
+
+\wxheading{See also}
+
+\helpref{wxEmbedder::Create}{wxembeddercreate}, \helpref{wxValidator}{wxvalidator}
+
+\membersection{wxEmbedder::\destruct{wxEmbedder}}
+
+\func{}{\destruct{wxEmbedder}}{\void}
+
+Destructor, destroying the embedder.
+
+\membersection{wxEmbedder::Create}\label{wxembeddercreate}
+
+\func{bool}{Create}{\param{wxWindow* }{parent}, \param{wxWindowID}{ id}, \rtfsp
+\param{const wxPoint\& }{pos}, \param{const wxSize\& }{size = wxDefaultSize},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator}, \param{const wxString\& }{name = ``embedder"}}
+
+Embedder creation function for two-step creation. For more details, see \helpref{wxEmbedder::wxEmbedder}{wxembedderconstr}.
+
+\membersection{wxEmbedder::EmbedWindow}\label{wxembedderembedwindow}
+
+\func{void}{EmbedWindow}{\param{unsigned long}{windowId}}
+
+Embed the window with the given X window id. There are several ways how to get the x window ID of a specific window. 
+One is to use the tool xwininfo.
+
+\wxheading{Parameters}
+
+\docparam{windowId}{The x window id (32 bit) of the window that should be embedded.}
+
+\membersection{wxEmbedder::GetWindowId}\label{wxembeddergetwindowid}
+
+\func{unsigned long}{GetWindowId}{\void}
+
+Returns the x window id (32 bit) of the embedder. This id can be used to handle to a XEmbed client that wants to 
+display its window in this embedder.
+
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/docs/latex/wx/tembed.tex wxWidgets_xembed/docs/latex/wx/tembed.tex
--- wxWidgets_orig/docs/latex/wx/tembed.tex	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/docs/latex/wx/tembed.tex	2004-07-26 08:17:06.000000000 +0200
@@ -0,0 +1,338 @@
+\section{GUI Embedding overview}\label{wxguiembeddingoverview}
+
+Classes: \helpref{wxEmbedder}{wxembedder}, \helpref{wxEmbeddedFrame}{wxembeddedframe} 
+
+\subsection{Introduction}
+
+This topic is not about embedded computing. This topic describes the mechanism
+of embedding GUIs into other GUIs for the Gtk2 port of wxWidgets.
+
+Sometimes it is useful or even necessary to embed a GUI created with a given
+GUI toolkit into another application which probably uses a different GUI 
+toolkit.
+
+For example: you have a wxWidgets application or a dialog which should be used 
+within the Eclipse framework. I guess there are several ways to achieve this 
+(e.g. by JNI, extending the SWT framework), but probably the easiest way is by 
+using the XEmbed protocol. 
+
+\subsection{XEmbed}
+
+XEmbed was designed to ebmed an X-Window window into an other X-Window window 
+by reparenting. Moreover it takes care of focus, accelerator and tabulator 
+handling. The XEmbed specification may be found at 
+\urlref{freedesktop.org}{http://www.freedesktop.org/Standards/xembed-spec} .
+Some of the most important GUI tookits do support the XEmbed standard: Qt, 
+Gtk2, SWT, AWT and of course wxWidgets. So now you could guess the reason 
+why only the Gtk2 port of wxWidgets is aware of XEmbed. In short: Thanks to 
+XEmbed, it is possible to embed dialogs or frames from one of the listed 
+toolkits within one of the other (or the same) toolkits.
+
+The only thing one application has to pass to the other application is the 
+X-Window id (xid) of the given X-Window. Both ways are possible: Either the 
+main application passes its xid to the foreign application (the one that 
+should be embedded), i call this the \verb|"|active\verb|"| mode, or the
+foreign application passes its xid to the main application, where the main 
+application has to invite the foreign program. I name the latter method 
+the \verb|"|passive\verb|"| mode.
+
+\subsection{Separate processes and plugins}
+XEmbed was mainly created for embedding an applications window in an other
+window of an other application, where the two application do run as separate 
+processes, but it also works if the two windows run in the same process. 
+The latter happens for example in a plugin environment. So theoretically 
+it should be possible for a wxWidgets application to load a Qt plugin which 
+then plugs its graphical representation into a given area on the wxWidgets
+program.
+
+\subsection{Example}
+
+wxWidgets uses the XEmbed implementation of Gtk2. In Gtk2 there are two 
+classes: GtkSocket and GtkPlug. GtkSocket is a container which can embed 
+a foreign window. So in a Gtk application, which should be able to embed a 
+GUI of a foreig program, you would create a GtkSocket. GtkPlug acts like 
+GtkWindow. Instead of showing the window frame standalone, it will be 
+embedded into an XEmbed container (note: if it wont be embedded, the window 
+will not be visible).
+
+The wxWidgets counterparts are called \helpref{wxEmbedder}{wxembedder} and 
+\helpref{wxEmbeddedFrame}{wxembeddedframe}. wxEmbedder is the GtkSocket, 
+so it can be placed on your GUI to embed a foreign window. It is derived from 
+\helpref{wxControl}{wxcontrol} so it can be almost everywhere in your GUI. 
+wxEmbeddedFrame is derived from \helpref{wxFrame}{wxframe} so it can be used 
+to create a GUI which then will be embedded into an XEmbed container. It is 
+even possible to decide at runtime if a wxEmbeddedFrame should be embedded 
+or not. If it won't be embedded, it will just create an instance of wxFrame. 
+So theoretically you could use wxEmbeddedFrame exclusively from now on. This 
+would enable the users of your program to embed it easily in their 
+applications.
+
+Using the XEmbed technology in your code is as easy as creating a wxFrame 
+and a wxButton. There is absolutely no magic about. The most complicated 
+thing is to exchange the xid. Even this part is covered by wxEmbeddingFrame: 
+The \helpref{SearchForXid}{wxembeddedframesearchforxid} function helps you
+processing program arguments and searching for the xembed environemt variable, 
+called \verb|EMBED_WINDOW| for active mode and \verb|EMBED_WINDOW_PASSIVE| 
+for passive mode. Note that this environment variable is not part of the 
+XEmbed standard. The command line argument, which is also not standardised, 
+is called \verb|--embed| followed by the xid of the embedder window (e.g. 
+wxEmbedder) or \verb|--embed-passive|.
+
+Here's a sample which illustrates the usage of wxEmbedder and wxEmbeddedFrame.
+
+\begin{verbatim}
+/////////////////////////////////////////////////////////////////////////////
+// Program:     Embedded window sample application
+// Name:        embeddemo.h
+// Purpose:     Sample showing how to use XEmbed technology with wxWidgets
+// Author:      Raphael Zulliger
+// Created:     23.07.04
+// Copyright:   (c) 2004 Raphael Zulliger
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __EMBEDDEMO_H__
+#define __EMBEDDEMO_H__
+
+#include "wx/wxprec.h"
+
+#include <wx/embeddedframe.h>
+#include <wx/embedder.h>
+
+
+WX_DEFINE_ARRAY(wxEmbedder*, EmbedderArray);
+
+
+// control ids
+enum
+{
+    eCLOSE_BUTTON_ID = 100,
+    eSTART_PROCESS_BUTTON_ID,
+    eEMBEDDER_ID,
+    eEMBEDDED_FRAME_ID,
+};
+
+
+
+
+// Define a new application type, each program should derive a class from wxApp
+class MyApp : public wxApp
+{
+private:
+    unsigned long m_uEmbedWindowId;
+public:
+    // override base class virtuals
+    // ----------------------------
+
+    // this one is called on application startup and is a good place for the app
+    // initialization (doing it here and not in the ctor allows to have an error
+    // return: if OnInit() returns false, the application terminates)
+    virtual bool OnInit();
+};
+
+
+
+class wxButton;
+class wxBoxSizer;
+
+class MyFrame : public wxEmbeddedFrame
+{
+public:
+    MyFrame(unsigned long xid, const wxString& title, 
+            wxWindowID id, 
+            long style = wxDEFAULT_EMBEDDED_FRAME_STYLE);
+    virtual ~MyFrame();
+
+protected:
+    // event handlers
+    void OnButtonClose(wxCommandEvent& event);
+    void OnStartProcess(wxCommandEvent& event);
+    void OnPlugAdded(wxCommandEvent& event);
+    void OnPlugRemoved(wxCommandEvent& event);
+    void OnFrameEmbedded(wxCommandEvent& event);
+
+private:
+    wxButton *m_pButtonClose;
+    wxButton *m_pButtonStartProc;
+    
+    wxBoxSizer *m_pButtonSizer;
+    wxBoxSizer *m_pVertSizer;
+
+    EmbedderArray	m_embedders;
+        
+    DECLARE_EVENT_TABLE()
+};
+
+
+
+#endif // __EMBEDDEMO_H__
+\end{verbatim}
+
+\begin{verbatim}
+/////////////////////////////////////////////////////////////////////////////
+// Program:     Embedded window sample application
+// Name:        embeddemo.cpp
+// Purpose:     Sample showing how to use XEmbed technology with wxWidgets
+// Author:      Raphael Zulliger
+// Created:     23.07.04
+// Copyright:   (c) 2004 Raphael Zulliger
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+
+#include <wx/app.h>
+
+#include <wx/button.h>
+#include <wx/sizer.h>
+#include <wx/menu.h>
+#include <wx/embedder.h>
+#include <wx/process.h>
+
+#include "embeddemo.h"
+
+IMPLEMENT_APP(MyApp)
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(MyFrame, wxEmbeddedFrame)
+    EVT_BUTTON(eCLOSE_BUTTON_ID, MyFrame::OnButtonClose)
+    EVT_BUTTON(eSTART_PROCESS_BUTTON_ID, MyFrame::OnStartProcess)
+    EVT_REMOTE_WINDOW_ADDED(eEMBEDDER_ID, MyFrame::OnPlugAdded)
+    EVT_REMOTE_WINDOW_REMOVED(eEMBEDDER_ID, MyFrame::OnPlugRemoved)
+    EVT_FRAME_EMBEDDED(eEMBEDDED_FRAME_ID, MyFrame::OnFrameEmbedded)
+END_EVENT_TABLE()
+
+
+
+// ----------------------------------------------------------------------------
+// app class
+// ----------------------------------------------------------------------------
+bool MyApp::OnInit()
+{
+    unsigned long xid;
+    long style;
+    
+    if (!wxEmbeddedFrame::SearchForXid(&wxGetApp().argc, &wxGetApp().argv, xid, style))
+    {
+        fprintf (stderr, "Error: paring of command line args or env vars failed."); fflush (stderr);
+        return FALSE;
+    }
+    
+    if (!wxApp::OnInit())
+    {
+        return FALSE;
+    }
+    
+    wxEmbeddedFrame *frame = new MyFrame(xid, _T("Embed demo"), eEMBEDDED_FRAME_ID, style);
+    
+    if (style & wxEMBEDDED_FRAME_EMBED_LATER) 
+    {
+        fprintf (stdout, "%d", frame->GetWindowId()); fflush (stdout);
+    }
+    
+    frame->Show();
+    
+    return TRUE;
+}
+
+
+// ----------------------------------------------------------------------------
+// WidgetsFrame construction
+// ----------------------------------------------------------------------------
+
+MyFrame::MyFrame(unsigned long xid, const wxString& title, wxWindowID id, long style)
+            : wxEmbeddedFrame(xid, NULL, id, title,
+                      wxDefaultPosition, wxDefaultSize,
+                      style)
+{
+    // init everything
+    m_pVertSizer = new wxBoxSizer(wxVERTICAL);
+    
+    m_pButtonSizer = new wxBoxSizer(wxHORIZONTAL);
+    m_pVertSizer->Add( m_pButtonSizer );
+
+    m_pButtonClose = new wxButton( this, eCLOSE_BUTTON_ID, wxString::wxString("&Close") );
+    m_pButtonStartProc = new wxButton( this, eSTART_PROCESS_BUTTON_ID, wxString::wxString("&Start new process") );
+
+    m_pButtonSizer->Add(m_pButtonClose);
+    m_pButtonSizer->Add(m_pButtonStartProc);
+    
+    SetAutoLayout(true);
+    
+    // sizer related
+    this->SetSizer(m_pVertSizer);
+
+    m_pVertSizer->Fit(this);
+    m_pVertSizer->SetSizeHints(this);
+}
+
+
+MyFrame::~MyFrame()
+{
+    wxEmbedder* pEmbedder;
+    
+    m_pButtonClose->Destroy();
+    m_pButtonStartProc->Destroy();
+    
+    while (!m_embedders.IsEmpty())
+    {
+        pEmbedder = m_embedders[0];
+        m_embedders.Remove(pEmbedder);
+        pEmbedder->Destroy();
+    }
+}
+
+
+
+
+void MyFrame::OnButtonClose(wxCommandEvent& WXUNUSED(event))
+{
+    Close();
+}
+
+
+void MyFrame::OnStartProcess(wxCommandEvent& WXUNUSED(event))
+{
+    wxString execCmd;
+    
+    wxEmbedder* embedder = new wxEmbedder( this, eEMBEDDER_ID );
+    m_pVertSizer->Add( embedder, 1, wxEXPAND | wxALL, 1 );   
+
+    execCmd << wxGetApp().argv[0] << " --embed " << embedder->GetWindowId( );
+    
+    if( wxProcess::Open( execCmd ) == NULL ) {
+        printf ( "starting process failed..." );
+    }
+}
+
+
+void MyFrame::OnPlugRemoved(wxCommandEvent& event)
+{
+    printf( "Application-Event: Plug removed!", event.m_eventObject );
+
+    // remove the ebmedder-object!
+    ((wxWindow*)(event.m_eventObject))->Destroy();
+}
+
+
+void MyFrame::OnPlugAdded(wxCommandEvent& event)
+{
+    printf( "Application-Event: Plug added!", event.m_eventObject );
+}
+
+
+void MyFrame::OnFrameEmbedded(wxCommandEvent& event)
+{
+    printf( "I'm embedded now..." );
+}
+\end{verbatim}
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/docs/latex/wx/topics.tex wxWidgets_xembed/docs/latex/wx/topics.tex
--- wxWidgets_orig/docs/latex/wx/topics.tex	2004-07-15 09:19:17.000000000 +0200
+++ wxWidgets_xembed/docs/latex/wx/topics.tex	2004-07-26 08:17:06.000000000 +0200
@@ -60,3 +60,3 @@
 \input wxPython.tex
 \input re_syntax.tex
-
+\input tembed.tex
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/include/wx/embeddedframe.h wxWidgets_xembed/include/wx/embeddedframe.h
--- wxWidgets_orig/include/wx/embeddedframe.h	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/include/wx/embeddedframe.h	2004-07-26 08:17:22.000000000 +0200
@@ -0,0 +1,62 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/embedder.h
+// Purpose:     wxEmbeddedFrameBase class
+// Author:      Vadim Zetlin
+// Modified by:
+// Created:     15.08.00
+// RCS-ID:      $Id: button.h,v 1.20 2004/05/30 15:14:32 DS Exp $
+// Copyright:   (c) Vadim Zetlin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_EMBEDDEDFRAME_H_BASE_
+#define _WX_EMBEDDEDFRAME_H_BASE_
+
+#include "wx/defs.h"
+
+// ----------------------------------------------------------------------------
+// wxEmbeddedFrame flags shared with other classes
+// ----------------------------------------------------------------------------
+
+#if wxUSE_EMBEDDED_FRAME
+
+// ----------------------------------------------------------------------------
+// wxEmbeddedFrame specific flags
+// ----------------------------------------------------------------------------
+#define wxEMBEDDED_FRAME_STANDALONE      0x10000  // Create a standalone (non embedded) frame. This is exaclty like a wxFrame then.
+#define wxEMBEDDED_FRAME_EMBED_LATER     0x20000  // Embedding will be done later. The socket will "invite" us, rather than the plug (we) embedd ourself.
+
+#define wxDEFAULT_EMBEDDED_FRAME_STYLE \
+	wxDEFAULT_FRAME_STYLE
+
+#include "wx/frame.h"
+
+
+WXDLLEXPORT_DATA(extern const wxChar*) wxEmbeddedFrameNameStr;
+
+// ----------------------------------------------------------------------------
+// wxEmbeddedFrame: 
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxEmbeddedFrameBase : public wxFrame
+{
+public:
+    wxEmbeddedFrameBase() { }
+
+    // The window Id of the embedder window. Usually this id will be given to
+    // the plug window (the window that should be embedded into this window)
+    virtual unsigned long GetWindowId( ) { return 0; }
+
+    static bool SearchForXid(int* argc, char*** argv, unsigned long& xid, long& style);
+    
+    DECLARE_NO_COPY_CLASS(wxEmbeddedFrameBase)
+};
+
+#if defined(__WXMSW__)
+#elif defined(__WXGTK__)
+    #include "wx/gtk/embeddedframe.h"
+#endif
+
+#endif // wxUSE_EMBEDDED_FRAME
+
+#endif // _WX_EMBEDDEDFRAME_H_BASE_
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/include/wx/embedder.h wxWidgets_xembed/include/wx/embedder.h
--- wxWidgets_orig/include/wx/embedder.h	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/include/wx/embedder.h	2004-07-26 08:17:22.000000000 +0200
@@ -0,0 +1,62 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/embedder.h
+// Purpose:     wxEmbedderBase class
+// Author:      Vadim Zetlin
+// Modified by:
+// Created:     15.08.00
+// RCS-ID:      $Id: button.h,v 1.20 2004/05/30 15:14:32 DS Exp $
+// Copyright:   (c) Vadim Zetlin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_EMBEDDER_H_BASE_
+#define _WX_EMBEDDER_H_BASE_
+
+#include "wx/defs.h"
+
+// ----------------------------------------------------------------------------
+// wxEmbedder flags shared with other classes
+// ----------------------------------------------------------------------------
+
+#if wxUSE_EMBEDDER
+
+// ----------------------------------------------------------------------------
+// wxEmbed specific flags
+// ----------------------------------------------------------------------------
+
+
+#include "wx/control.h"
+
+
+WXDLLEXPORT_DATA(extern const wxChar*) wxEmbedderNameStr;
+
+// ----------------------------------------------------------------------------
+// wxEmbedder: 
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxEmbedderBase : public wxControl
+{
+public:
+    wxEmbedderBase() { }
+
+    // Embeds an external window with window Id auWindowId. The external window
+    // should be an XEmbed-Plug (e.g. a GtkPlug)
+    virtual void EmbedWindow( unsigned long windowId ) { }
+    
+    // The window Id of the embedder window. Usually this id will be given to
+    // the plug window (the window that should be embedded into this window)
+    virtual unsigned long GetWindowId( ) { return 0; }
+	
+    // returns the default button size for this platform
+    static wxSize GetDefaultSize();
+
+    DECLARE_NO_COPY_CLASS(wxEmbedderBase)
+};
+
+#if defined(__WXGTK__)
+    #include "wx/gtk/embedder.h"
+#endif
+
+#endif // wxUSE_EMBEDDER
+
+#endif // _WX_EMBEDDER_H_BASE_
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/include/wx/event.h wxWidgets_xembed/include/wx/event.h
--- wxWidgets_orig/include/wx/event.h	2004-07-15 09:19:20.000000000 +0200
+++ wxWidgets_xembed/include/wx/event.h	2004-07-26 08:17:19.000000000 +0200
@@ -133,4 +133,9 @@
 #endif // WXWIN_COMPATIBILITY_EVENT_TYPES/!WXWIN_COMPATIBILITY_EVENT_TYPES
 
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_REMOTE_WINDOW_ADDED, 20)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_REMOTE_WINDOW_REMOVED, 21)
+	
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_FRAME_EMBEDDED, 22)
+	
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_BUTTON_CLICKED, 1)
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHECKBOX_CLICKED, 2)
@@ -2538,4 +2543,7 @@
 
 // Convenience macros for commonly-used commands
+#define EVT_REMOTE_WINDOW_ADDED(winid, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_REMOTE_WINDOW_ADDED, winid, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxCommandEventFunction, & fn ), (wxObject *) NULL ),
+#define EVT_REMOTE_WINDOW_REMOVED(winid, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_REMOTE_WINDOW_REMOVED, winid, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxCommandEventFunction, & fn ), (wxObject *) NULL ),
+#define EVT_FRAME_EMBEDDED(winid, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_FRAME_EMBEDDED, winid, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxCommandEventFunction, & fn ), (wxObject *) NULL ),
 #define EVT_CHECKBOX(winid, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_CHECKBOX_CLICKED, winid, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxCommandEventFunction, & fn ), (wxObject *) NULL ),
 #define EVT_CHOICE(winid, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_CHOICE_SELECTED, winid, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxCommandEventFunction, & fn ), (wxObject *) NULL ),
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/include/wx/gtk/embeddedframe.h wxWidgets_xembed/include/wx/gtk/embeddedframe.h
--- wxWidgets_orig/include/wx/gtk/embeddedframe.h	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/include/wx/gtk/embeddedframe.h	2004-07-26 08:17:19.000000000 +0200
@@ -0,0 +1,78 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/gtk/embeddedframe.h
+// Purpose:
+// Author:      Raphael Zulliger
+// Id:          $Id: button.h,v 1.27 2004/05/23 20:50:52 JS Exp $
+// Copyright:   (c) 1998 Robert Roebling
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __GTKEMBEDDEDFRAMEH__
+#define __GTKEMBEDDEDFRAMEH__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma interface
+#endif
+
+#include "wx/defs.h"
+#include "wx/object.h"
+#include "wx/frame.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class wxEmbeddedFrame;
+
+//-----------------------------------------------------------------------------
+// global data
+//-----------------------------------------------------------------------------
+
+extern const wxChar *wxEmbeddedFrameNameStr;
+
+//-----------------------------------------------------------------------------
+// wxEmbeddedFrame
+//-----------------------------------------------------------------------------
+
+
+class wxEmbeddedFrame: public wxFrame
+{
+public:
+    wxEmbeddedFrame() {};
+    wxEmbeddedFrame(unsigned long windowId, 
+           wxWindow *parent, 
+           wxWindowID id, 
+           const wxString& title,
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize, 
+           long style = wxDEFAULT_EMBEDDED_FRAME_STYLE,
+           const wxString& name = wxEmbeddedFrameNameStr)
+    {
+      Create(windowId, parent, id, title, pos, size, style, name);
+    }
+    virtual ~wxEmbeddedFrame() {};
+
+    bool Create(unsigned long windowId, 
+           wxWindow *parent, 
+           wxWindowID id, 
+           const wxString& title,
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize, 
+           long style = wxDEFAULT_EMBEDDED_FRAME_STYLE,
+           const wxString& name = wxEmbeddedFrameNameStr);
+
+    // implementation
+    // --------------
+
+    // The window Id of the embedder window. Usually this id will be given to
+    // the plug window (the window that should be embedded into this window)
+    virtual unsigned long GetWindowId();
+    
+    static bool SearchForXid(int* argc, char*** argv, unsigned long& xid, long& style);
+
+private:
+    
+    DECLARE_DYNAMIC_CLASS(wxEmbeddedFrame)
+};
+
+#endif // __GTKEMBEDDEDFRAMEH__
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/include/wx/gtk/embedder.h wxWidgets_xembed/include/wx/gtk/embedder.h
--- wxWidgets_orig/include/wx/gtk/embedder.h	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/include/wx/gtk/embedder.h	2004-07-26 08:17:19.000000000 +0200
@@ -0,0 +1,81 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/gtk/button.h
+// Purpose:
+// Author:      Robert Roebling
+// Id:          $Id: button.h,v 1.27 2004/05/23 20:50:52 JS Exp $
+// Copyright:   (c) 1998 Robert Roebling
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __GTKEMBEDDERH__
+#define __GTKEMBEDDERH__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma interface
+#endif
+
+#include "wx/defs.h"
+#include "wx/object.h"
+#include "wx/list.h"
+#include "wx/control.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class wxEmbedder;
+
+//-----------------------------------------------------------------------------
+// global data
+//-----------------------------------------------------------------------------
+
+extern const wxChar *wxEmbedderNameStr;
+
+//-----------------------------------------------------------------------------
+// wxEmbed
+//-----------------------------------------------------------------------------
+
+
+class wxEmbedder: public wxControl
+{
+public:
+    wxEmbedder();
+    wxEmbedder(wxWindow *parent, wxWindowID id,
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize, 
+           long style = 0,
+           const wxValidator& validator = wxDefaultValidator,
+           const wxString& name = wxEmbedderNameStr)
+    {
+      Create(parent, id, pos, size, style, validator, name);
+    }
+    virtual ~wxEmbedder();
+
+    bool Create(wxWindow *parent, wxWindowID id, 
+           const wxPoint& pos = wxDefaultPosition,
+           const wxSize& size = wxDefaultSize, long style = 0,
+           const wxValidator& validator = wxDefaultValidator,
+           const wxString& name = wxEmbedderNameStr);
+
+    // implementation
+    // --------------
+
+    // Embeds an external window with window Id auWindowId. The external window
+    // should be an XEmbed-Plug (e.g. a GtkPlug)
+    virtual void EmbedWindow( unsigned long windowId );
+    
+    // The window Id of the embedder window. Usually this id will be given to
+    // the plug window (the window that should be embedded into this window)
+    virtual unsigned long GetWindowId( );
+
+    static wxSize GetDefaultSize();
+    virtual bool Enable( bool enable = TRUE );
+
+protected:
+    virtual wxSize DoGetBestSize() const;
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxEmbedder)
+};
+
+#endif // __GTKEMBEDDERH__
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/Makefile.in wxWidgets_xembed/Makefile.in
--- wxWidgets_orig/Makefile.in	2004-07-15 09:19:17.000000000 +0200
+++ wxWidgets_xembed/Makefile.in	2004-07-26 08:17:06.000000000 +0200
@@ -1263,4 +1263,6 @@
 	wx/gtk/brush.h \
 	wx/gtk/button.h \
+	wx/gtk/embedder.h \
+	wx/gtk/embeddedframe.h \
 	wx/gtk/checkbox.h \
 	wx/gtk/checklst.h \
@@ -1963,4 +1965,6 @@
 	wx/brush.h \
 	wx/button.h \
+	wx/embedder.h \
+	wx/embeddedframe.h \
 	wx/checkbox.h \
 	wx/checklst.h \
@@ -2586,4 +2590,6 @@
 	monodll_brush.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2666,4 +2672,6 @@
 	monodll_bmpbuttn.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2705,4 +2713,6 @@
 	monodll_brush.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2787,4 +2797,6 @@
 	monodll_bmpmotif.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2854,4 +2866,6 @@
 	monodll_bmpbuttn.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2916,4 +2930,6 @@
 	monodll_brush.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -2986,4 +3002,6 @@
 	monodll_bmpbuttn.o \
 	monodll_button.o \
+	monodll_embedder.o \
+	monodll_embeddedframe.o \
 	monodll_checkbox.o \
 	monodll_checklst.o \
@@ -3299,4 +3317,6 @@
 	monolib_bmpbuttn.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3448,4 +3468,6 @@
 	monolib_brush.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3528,4 +3550,6 @@
 	monolib_bmpbuttn.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3567,4 +3591,6 @@
 	monolib_brush.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3649,4 +3675,6 @@
 	monolib_bmpmotif.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3716,4 +3744,6 @@
 	monolib_bmpbuttn.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3778,4 +3808,6 @@
 	monolib_brush.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -3848,4 +3880,6 @@
 	monolib_bmpbuttn.o \
 	monolib_button.o \
+	monolib_embedder.o \
+	monolib_embeddedframe.o \
 	monolib_checkbox.o \
 	monolib_checklst.o \
@@ -4333,4 +4367,6 @@
 	coredll_bmpbuttn.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4482,4 +4518,6 @@
 	coredll_brush.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4562,4 +4600,6 @@
 	coredll_bmpbuttn.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4601,4 +4641,6 @@
 	coredll_brush.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4683,4 +4725,6 @@
 	coredll_bmpmotif.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4750,4 +4794,6 @@
 	coredll_bmpbuttn.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4812,4 +4858,6 @@
 	coredll_brush.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -4882,4 +4930,6 @@
 	coredll_bmpbuttn.o \
 	coredll_button.o \
+	coredll_embedder.o \
+	coredll_embeddedframe.o \
 	coredll_checkbox.o \
 	coredll_checklst.o \
@@ -5062,4 +5112,6 @@
 	corelib_bmpbuttn.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5211,4 +5263,6 @@
 	corelib_brush.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5291,4 +5345,6 @@
 	corelib_bmpbuttn.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5330,4 +5386,6 @@
 	corelib_brush.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5412,4 +5470,6 @@
 	corelib_bmpmotif.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5479,4 +5539,6 @@
 	corelib_bmpbuttn.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5541,4 +5603,6 @@
 	corelib_brush.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -5611,4 +5675,6 @@
 	corelib_bmpbuttn.o \
 	corelib_button.o \
+	corelib_embedder.o \
+	corelib_embeddedframe.o \
 	corelib_checkbox.o \
 	corelib_checklst.o \
@@ -9682,4 +9748,10 @@
 @COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $<
 
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@monodll_embedder.o: $(srcdir)/src/gtk/embedder.cpp $(MONODLL_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $<
+
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@monodll_embeddedframe.o: $(srcdir)/src/gtk/embeddedframe.cpp $(MONODLL_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $<
+
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@monodll_button.o: $(srcdir)/src/motif/button.cpp $(MONODLL_ODEP)
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $<
@@ -12631,4 +12703,10 @@
 @COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $<
 
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@monolib_embedder.o: $(srcdir)/src/gtk/embedder.cpp $(MONOLIB_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $<
+
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@monolib_embeddedframe.o: $(srcdir)/src/gtk/embeddedframe.cpp $(MONOLIB_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $<
+
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@monolib_button.o: $(srcdir)/src/motif/button.cpp $(MONOLIB_ODEP)
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $<
@@ -15847,4 +15925,10 @@
 @COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $<
 
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@coredll_embedder.o: $(srcdir)/src/gtk/embedder.cpp $(COREDLL_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $<
+
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@coredll_embeddedframe.o: $(srcdir)/src/gtk/embeddedframe.cpp $(COREDLL_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $<
+
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@coredll_button.o: $(srcdir)/src/motif/button.cpp $(COREDLL_ODEP)
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(COREDLL_CXXFLAGS) $<
@@ -18283,4 +18367,10 @@
 @COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $<
 
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@corelib_embedder.o: $(srcdir)/src/gtk/embedder.cpp $(CORELIB_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $<
+
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@corelib_embeddedframe.o: $(srcdir)/src/gtk/embeddedframe.cpp $(CORELIB_ODEP)
+@COND_TOOLKIT_GTK_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $<
+
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@corelib_button.o: $(srcdir)/src/motif/button.cpp $(CORELIB_ODEP)
 @COND_TOOLKIT_MOTIF_USE_GUI_1_WXUNIV_0@	$(CXXC) -c -o $@ $(CORELIB_CXXFLAGS) $<
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/setup.h.in wxWidgets_xembed/setup.h.in
--- wxWidgets_orig/setup.h.in	2004-07-15 09:19:17.000000000 +0200
+++ wxWidgets_xembed/setup.h.in	2004-07-26 08:17:06.000000000 +0200
@@ -419,4 +419,12 @@
  * Use this control
  */
+#define wxUSE_EMBEDDER 0
+/*
+ * Use this control
+ */
+#define wxUSE_EMBEDDED_FRAME 0
+/*
+ * Use this control
+ */
 #define wxUSE_CARET 0
 /*
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/src/common/datacmn.cpp wxWidgets_xembed/src/common/datacmn.cpp
--- wxWidgets_orig/src/common/datacmn.cpp	2004-07-15 09:19:32.000000000 +0200
+++ wxWidgets_xembed/src/common/datacmn.cpp	2004-07-26 08:17:42.000000000 +0200
@@ -111,4 +111,6 @@
 WXDLLEXPORT_DATA(const wxChar *) wxControlNameStr = wxT("control");
 WXDLLEXPORT_DATA(const wxChar *) wxButtonNameStr = wxT("button");
+WXDLLEXPORT_DATA(const wxChar *) wxEmbedderNameStr = wxT("embedder");
+WXDLLEXPORT_DATA(const wxChar *) wxEmbeddedFrameNameStr = wxT("embeddedFrame");
 WXDLLEXPORT_DATA(const wxChar *) wxCanvasNameStr = wxT("canvas");
 WXDLLEXPORT_DATA(const wxChar *) wxCheckBoxNameStr = wxT("check");
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/src/common/event.cpp wxWidgets_xembed/src/common/event.cpp
--- wxWidgets_orig/src/common/event.cpp	2004-07-15 09:19:32.000000000 +0200
+++ wxWidgets_xembed/src/common/event.cpp	2004-07-26 08:17:42.000000000 +0200
@@ -171,4 +171,7 @@
 #if !WXWIN_COMPATIBILITY_EVENT_TYPES
 
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_REMOTE_WINDOW_ADDED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_REMOTE_WINDOW_REMOVED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_FRAME_EMBEDDED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_BUTTON_CLICKED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHECKBOX_CLICKED)
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/src/gtk/embeddedframe.cpp wxWidgets_xembed/src/gtk/embeddedframe.cpp
--- wxWidgets_orig/src/gtk/embeddedframe.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/src/gtk/embeddedframe.cpp	2004-07-26 08:17:43.000000000 +0200
@@ -0,0 +1,327 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        embedder.cpp
+// Purpose:
+// Author:      Raphael Zulliger
+// Id:          $Id: embedder.cpp,v 1.00 2004/06/ 20:52:19 JS Exp $
+// Copyright:   (c) 2004 Raphael Zulliger
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma implementation "embeddedframe.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#include "wx/defs.h"
+#include "wx/log.h"
+
+#if wxUSE_EMBEDDED_FRAME
+
+#include <gtk/gtk.h>
+
+#include "wx/embeddedframe.h"
+
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class wxEmbeddedFrame;
+
+//-----------------------------------------------------------------------------
+// idle system
+//-----------------------------------------------------------------------------
+
+extern void wxapp_install_idle_handler();
+extern bool g_isIdle;
+
+//-----------------------------------------------------------------------------
+// "plug added"
+//-----------------------------------------------------------------------------
+
+static gboolean gtk_plug_embedded_callback( GtkWidget *widget, wxEmbeddedFrame *embeddedFrame )
+{
+//     fprintf( stdout, "socket: plug added!\n" ); fflush( stdout );
+
+    // shouldn't be needed    
+    // gtk_widget_show (widget);
+    
+    // Tell WM that this is a dialog window and make it center
+    // on parent by default (this is what GtkDialog ctor does):
+    gtk_window_set_type_hint(GTK_WINDOW(embeddedFrame->m_widget),
+                        GDK_WINDOW_TYPE_HINT_DIALOG);
+    gtk_window_set_position(GTK_WINDOW(embeddedFrame->m_widget),
+                        GTK_WIN_POS_CENTER_ON_PARENT);
+        
+    if (g_isIdle)
+       wxapp_install_idle_handler();
+    
+    wxCommandEvent event(wxEVT_COMMAND_FRAME_EMBEDDED, embeddedFrame->GetId());
+    event.SetEventObject(embeddedFrame);
+    embeddedFrame->GetEventHandler()->ProcessEvent(event);
+
+    return TRUE;
+}
+
+
+#if 0
+static wxWindow* findFocusWindow( wxWindow* win )
+{
+    unsigned int i;
+    wxWindow* retValue;
+    
+    if (!GTK_WIDGET_CAN_FOCUS (win->m_widget)) {
+        for( i=0; i<win->GetChildren().GetCount(); i++ ) {
+            if( (retValue = findFocusWindow( win->GetChildren().Item(i)->GetData() ) ) )  {
+                 return retValue;
+            }
+        }
+        
+        return NULL;
+    }
+    
+    return win;
+}
+
+static gint gtk_frame_focus_callback_embeddedframe( GtkWidget *widget, GtkDirectionType d, wxWindow *win )
+{
+    wxWindow* pWin;
+    
+    fprintf( stderr, "aha...\n" ); fflush( stderr );
+    
+    if (g_isIdle) {
+        wxapp_install_idle_handler();
+    }
+        
+    if (!GTK_WIDGET_CAN_FOCUS (widget)) {
+        // if "we" already have the focus, someone else is responsible for 
+        // handling this event... this routine should only handle events
+        // comming from the XEbmed-socket and are TAB-related and therefore
+        // we don't own focus in these situations...
+        if( wxWindow::FindFocus() != NULL )
+            return FALSE;
+        
+        // find a wxWindow that may become the focus.
+        pWin = findFocusWindow( win );
+        
+        if( !pWin ) {
+            return FALSE;
+        }
+                
+        // remember: wxWindows's tab order is the same as the order of 
+        // creation of the graphical elements, which is the same as they
+        // occure in the list returned by GetChildren()
+        
+        // ok. we've found a wxwindows which may have the focus. example:
+        //   wxFrame contains a wxPanel. wxPanel contains 3 wxButtons.
+        //   wxFrame and wxPanel can't get the focus. So, at this point, pWin
+        //   points to one of the buttons (should be one that has first been 
+        //   created). Because this function should either activate the first 
+        //   or the last of the three buttons, depending on the "direction"
+        //   we have to "ask" the parent of the found button for the first 
+        //   or the last button. If we would set focus to pWin here, the 
+        //   button would have focus which had the focus before
+        //   the focus went to another part of the programm (e.g. the socket
+        //   part if using xembed)
+        //   
+        
+        pWin = pWin->GetParent(); 
+        // as described: now we should point to the wxPanel (with the above
+        // example)      
+        
+        if( !pWin ) {
+            // not sure if this never happens...
+            return FALSE;
+        }
+        
+        if( d == GTK_DIR_TAB_FORWARD ) {
+            pWin->GetChildren().GetFirst()->GetData()->SetFocus();
+        } else if( d == GTK_DIR_TAB_BACKWARD ) {
+            pWin->GetChildren().GetLast()->GetData()->SetFocus();
+        } 
+
+        return TRUE;
+    }
+
+    if (!gtk_widget_is_focus (widget))
+    {
+            gtk_widget_grab_focus (widget);
+            return TRUE;
+    }
+    
+    gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "focus" );
+
+    return TRUE;
+}
+#endif
+
+
+//-----------------------------------------------------------------------------
+// wxEmbeddedFrame
+//-----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxEmbeddedFrame,wxFrame)
+
+
+bool wxEmbeddedFrame::Create( unsigned long windowId, 
+                        wxWindow *parent, 
+                        wxWindowID id, 
+                        const wxString &title,
+                        const wxPoint &pos, 
+                        const wxSize &size,
+                        long style,
+                        const wxString& name )
+{
+    unsigned long realWindowId = windowId;
+    wxString nameCopy = name;
+    
+    // This frame is NOT standalone, so lets create a plug
+    if (style & wxEMBEDDED_FRAME_EMBED_LATER)
+    {
+        // Embedding should be done later (until then, the frame will not be 
+        // shown). According to the Gtk2 reference documentation, this can
+        // be done by creating a GtkPlug with the window id 0, and a call 
+        // to the function gtk_socket_add_id() later. This means, the socket
+        // part of the XEmbed connection has to "invite" this frame. This
+        // also means, we have to handover the x-window id of m_widget 
+        // to the socket part.
+        realWindowId = 0;
+    }
+    
+    // Test if the frame should be embedded or should be standalone. If it 
+    // should be standalone, do only call the ::Create function of the base 
+    // class (then it's exactly like a wxFrame)
+    if (!(style & wxEMBEDDED_FRAME_STANDALONE))
+    {
+        
+        if (m_widget == NULL ) 
+        {
+            m_widget = gtk_plug_new(realWindowId);
+
+            // shouldn't be needed    
+            // gtk_widget_show(m_widget);
+          
+            // connect the signal
+            gtk_signal_connect (GTK_OBJECT(m_widget), "embedded",
+                    GTK_SIGNAL_FUNC (gtk_plug_embedded_callback),
+                    (gpointer*)this);
+            
+            // Note: the name should be empty, otherwise gtk asserts occure
+            nameCopy = "";
+        }
+    }
+    
+   
+    wxTopLevelWindow::Create( parent, 
+            id, 
+            title,
+            pos, 
+            size,
+            style,
+            nameCopy);
+    
+#if 0
+     // reroute the "focus" signal (first redo what toplevel has done in 
+     // the ::Create function)
+     gtk_signal_disconnect_by_data( GTK_OBJECT(m_widget), (gpointer)this );
+     
+     gtk_signal_connect( GTK_OBJECT(m_widget), "focus",
+         GTK_SIGNAL_FUNC(gtk_frame_focus_callback_embeddedframe), (gpointer)this );
+#endif         
+    
+    return TRUE;
+}
+
+
+
+unsigned long wxEmbeddedFrame::GetWindowId( ) 
+{ 
+    return gtk_plug_get_id( GTK_PLUG(m_widget) ); 
+}
+
+
+
+
+static wxString embedCmdArgString = "--embed";
+static wxString embedPassiveCmdArgString = "--embed-passive";
+static wxString embedEnvVarString = "EMBED_WINDOW";
+static wxString embedPassiveEnvVarString = "EMBED_WINDOW_PASSIVE";
+
+bool wxEmbeddedFrame::SearchForXid(int* argc, char*** argv, unsigned long& xid, long& style)
+{
+    int i;
+    wxString xWindowId;
+    
+    xid = 0;
+    style = wxDEFAULT_EMBEDDED_FRAME_STYLE;
+    
+    for (i=1;i<*argc;i++)
+    {
+        if (embedCmdArgString.Cmp((*argv)[i]) == 0)
+        {
+            xWindowId = (*argv)[i+1];
+            if (!xWindowId.ToULong(&xid,0))
+            {
+                // conversion failed.
+                return FALSE;
+            }
+
+            // successfully extracted the xwindow id. adjust argv & argc 
+            // and return the extracted number
+            (*argv)[i] = NULL;
+            (*argv)[i+1] = NULL;
+            (*argc) -= 2;
+            
+            return TRUE;
+        }
+        
+        else if (embedPassiveCmdArgString.Cmp((*argv)[i]) == 0)
+        {
+            // The frame should be embedded in passive mode (meaning: it 
+            // should print the xid of the plug to stdout on the first line)
+            
+            (*argv)[i] = NULL;
+            (*argv)[i+1] = NULL;
+            (*argc) -= 2;
+            
+            style |= wxEMBEDDED_FRAME_EMBED_LATER;
+            
+            return TRUE;
+        }
+    }
+    
+    // process environment variable
+    if (wxGetEnv(embedEnvVarString, &xWindowId))
+    {
+        if (!xWindowId.ToULong(&xid,0))
+        {
+            // conversion failed.
+            return FALSE;
+        }
+        
+        return TRUE;
+    }
+    
+    
+    // process environment variable
+    if (wxGetEnv(embedPassiveEnvVarString, &xWindowId))
+    {
+        // should be embedded in passive mode
+        xid = 0;
+        
+        style |= wxEMBEDDED_FRAME_EMBED_LATER;
+        
+        return TRUE;
+    }
+    
+    // standalone application
+    style |= wxEMBEDDED_FRAME_STANDALONE;
+    
+    return TRUE;
+}
+
+
+#endif // wxUSE_EMBEDDED_FRAME
+
diff -ru2 -N -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*!' -x'*~*' wxWidgets_orig/src/gtk/embedder.cpp wxWidgets_xembed/src/gtk/embedder.cpp
--- wxWidgets_orig/src/gtk/embedder.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wxWidgets_xembed/src/gtk/embedder.cpp	2004-07-26 08:17:43.000000000 +0200
@@ -0,0 +1,204 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        embedder.cpp
+// Purpose:
+// Author:      Raphael Zulliger
+// Id:          $Id: embedder.cpp,v 1.00 2004/06/ 20:52:19 JS Exp $
+// Copyright:   (c) 2004 Raphael Zulliger
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma implementation "embedder.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#include "wx/defs.h"
+
+#if wxUSE_EMBEDDER
+
+#include <gtk/gtk.h>
+
+#include "wx/embedder.h"
+
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class wxEmbedder;
+
+//-----------------------------------------------------------------------------
+// idle system
+//-----------------------------------------------------------------------------
+
+extern void wxapp_install_idle_handler();
+extern bool g_isIdle;
+
+
+
+static void gtk_socket_plug_added_callback( GtkWidget *widget, wxEmbedder *embedder )
+{
+    wxSize size;
+    
+    // fprintf( stdout, "socket: plug added!\n" ); fflush( stdout );
+    
+#if 0 
+    // some test code for the sizing problem. At this point 
+    // GetBestFittingSize always returns the cached value, which 
+    // is wrong (it's 2,2 i think)
+    embedder->InvalidateBestSize();
+    size = embedder->GetBestFittingSize();
+    embedder->SetSize( size );
+#endif
+    
+    if (g_isIdle)
+       wxapp_install_idle_handler();
+    
+    wxCommandEvent event(wxEVT_COMMAND_REMOTE_WINDOW_ADDED, embedder->GetId());
+    event.SetEventObject(embedder);
+    embedder->GetEventHandler()->ProcessEvent(event);
+}
+
+
+
+static gboolean gtk_socket_plug_removed_callback( GtkWidget *WXUNUSED(widget), wxEmbedder *embedder )
+{
+    // fprintf( stdout, "socket: plug removed...\n" ); fflush( stdout );
+   
+    if (g_isIdle)
+       wxapp_install_idle_handler();
+    
+    wxCommandEvent event(wxEVT_COMMAND_REMOTE_WINDOW_REMOVED, embedder->GetId());
+    event.SetEventObject(embedder);
+    embedder->GetEventHandler()->ProcessEvent(event);
+    
+    return TRUE;
+}
+
+
+static void gtk_socket_destroyed (GtkWidget *widget, void *socket)
+{
+  // fprintf( stderr, "gtk_socket_destroyed 0x%x\n", socket ); fflush( stderr );
+}
+
+
+//-----------------------------------------------------------------------------
+// wxEmbedder
+//-----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxEmbedder,wxControl)
+
+wxEmbedder::wxEmbedder()
+{
+}
+
+wxEmbedder::~wxEmbedder()
+{
+}
+
+bool wxEmbedder::Create(  wxWindow *parent, wxWindowID id, 
+                            const wxPoint &pos, const wxSize &size,
+                            long style, const wxValidator& validator, const wxString &name )
+{
+    m_needParent = TRUE;
+    m_acceptsFocus = TRUE;
+
+    if (!PreCreation( parent, pos, size ) ||
+        !CreateBase( parent, id, pos, size, style, validator, name ))
+    {
+        wxFAIL_MSG( wxT("wxEmbedder creation failed") );
+        return FALSE;
+    }
+
+    if (m_widget == NULL) 
+    {
+        m_widget = gtk_socket_new();
+        
+//         fprintf( stderr, "Embedder: m_widget: 0x%x\n", m_widget ); fflush( stderr );
+        
+        g_signal_connect (GTK_OBJECT(m_widget), "plug-removed",
+                G_CALLBACK (gtk_socket_plug_removed_callback),
+                (gpointer*)this);
+    
+        g_signal_connect (GTK_OBJECT(m_widget), "plug-added",
+                G_CALLBACK (gtk_socket_plug_added_callback),
+                (gpointer*)this);
+    
+        g_signal_connect (m_widget, "destroy",
+                G_CALLBACK (gtk_socket_destroyed), 
+                (gpointer*)this);
+    }
+
+    m_parent->DoAddChild( this );
+    
+    PostCreation(size);
+   
+    return TRUE;
+}
+
+
+void wxEmbedder::EmbedWindow( unsigned long windowId  ) 
+{ 
+    gtk_socket_add_id( GTK_SOCKET(m_widget), windowId  );
+}
+    
+
+unsigned long wxEmbedder::GetWindowId( ) 
+{ 
+    if (GTK_WIDGET_REALIZED(m_widget) )
+    {
+        return gtk_socket_get_id( GTK_SOCKET(m_widget) ); 
+    }
+    
+    return 0;
+}
+
+
+
+
+bool wxEmbedder::Enable( bool enable )
+{
+    if ( !wxControl::Enable( enable ) )
+        return FALSE;
+
+    gtk_widget_set_sensitive( m_widget, enable );
+
+    return TRUE;
+}
+
+
+wxSize wxEmbedder::DoGetBestSize() const
+{
+    // fprintf( stderr, "[TRACE] wxEmbedder: DoGetBestSize\n" ); fflush( stderr );
+    // the default button in wxGTK is bigger than the other ones because of an
+    // extra border around it, but we don't want to take it into account in
+    // our size calculations (otherwsie the result is visually ugly), so
+    // always return the size of non default button from here
+    const bool isDefault = GTK_WIDGET_HAS_DEFAULT(m_widget);
+    if ( isDefault )
+    {
+        // temporarily unset default flag
+        GTK_WIDGET_UNSET_FLAGS( m_widget, GTK_CAN_DEFAULT );
+    }
+
+    wxSize ret( wxControl::DoGetBestSize() );
+
+    if ( isDefault )
+    {
+        // set it back again
+        GTK_WIDGET_SET_FLAGS( m_widget, GTK_CAN_DEFAULT );
+    }
+
+#ifndef __WXGTK20__
+    ret.x += 10;  // add a few pixels for sloppy (but common) themes
+#endif
+    
+    // fprintf( stderr, "[DEBUG] wxEmbedder, x: %d, y: %d\n", ret.x, ret.y ); fflush( stderr );
+    
+    return ret;
+}
+
+#endif // wxUSE_EMBEDDER
+

 	  	 

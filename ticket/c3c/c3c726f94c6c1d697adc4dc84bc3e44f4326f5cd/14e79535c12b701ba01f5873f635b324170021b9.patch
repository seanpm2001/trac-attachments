diff -ru wxWidgets-2.8.12/include/wx/generic/msgdlgg.h wxWidgets-2.8.12-mod/include/wx/generic/msgdlgg.h
--- wxWidgets-2.8.12/include/wx/generic/msgdlgg.h	2011-03-22 12:59:47.000000000 +0100
+++ wxWidgets-2.8.12-mod/include/wx/generic/msgdlgg.h	2012-07-16 19:05:48.000000000 +0200
@@ -20,24 +20,43 @@
 
 extern WXDLLEXPORT_DATA(const wxChar) wxMessageBoxCaptionStr[];
 
+#ifdef __WXMSW__
+#define wxGenericMessageDialog wxMessageDialog
+#endif
+
 class WXDLLEXPORT wxGenericMessageDialog: public wxDialog, public wxMessageDialogBase
 {
 DECLARE_DYNAMIC_CLASS(wxGenericMessageDialog)
-
+#ifdef __WXMSW__
+protected:
+    wxString    m_caption;
+    wxString    m_message;
+    wxWindow *  m_parent;
+#endif
 public:
     wxGenericMessageDialog(wxWindow *parent, const wxString& message,
         const wxString& caption = wxMessageBoxCaptionStr,
         long style = wxOK|wxCENTRE, const wxPoint& pos = wxDefaultPosition);
 
+#ifdef __WXMSW__
+    int ShowModal(void);
+#endif
+
     void OnYes(wxCommandEvent& event);
     void OnNo(wxCommandEvent& event);
     void OnCancel(wxCommandEvent& event);
 
 private:
+    // Creates and returns a standard button sizer using the style of this
+    // dialog and the custom labels, if any.
+    //
+    // May return NULL on smart phone platforms not using buttons at all.
+    wxSizer *CreateMsgDlgButtonSizer();
+
     DECLARE_EVENT_TABLE()
 };
 
-#if (!defined( __WXMSW__ ) && !defined( __WXMAC__) && !defined(__WXPM__) && !defined(__WXCOCOA__)) || defined(__WXUNIVERSAL__)
+#if (!defined( __WXMSW__) && !defined( __WXMAC__) && !defined(__WXPM__) && !defined(__WXCOCOA__)) || defined(__WXUNIVERSAL__)
 #define wxMessageDialog wxGenericMessageDialog
 #endif
 
diff -ru wxWidgets-2.8.12/include/wx/msgdlg.h wxWidgets-2.8.12-mod/include/wx/msgdlg.h
--- wxWidgets-2.8.12/include/wx/msgdlg.h	2011-03-22 12:59:31.000000000 +0100
+++ wxWidgets-2.8.12-mod/include/wx/msgdlg.h	2012-07-16 17:29:56.000000000 +0200
@@ -16,8 +16,57 @@
 
 #if wxUSE_MSGDLG
 
+#include "wx/stockitem.h"
+
 class WXDLLEXPORT wxMessageDialogBase
 {
+public:
+    // helper class for SetXXXLabels() methods: it makes it possible to pass
+    // either a stock id (wxID_CLOSE) or a string ("&Close") to them
+    class ButtonLabel
+    {
+    public:
+        // ctors are not explicit, objects of this class can be implicitly
+        // constructed from either stock ids or strings
+        ButtonLabel(int stockId)
+            : m_stockId(stockId)
+        {
+            wxASSERT_MSG( wxIsStockID(stockId), "invalid stock id" );
+        }
+
+        ButtonLabel(const wxString& label)
+            : m_label(label), m_stockId(wxID_NONE)
+        {
+        }
+
+        ButtonLabel(const wxChar *label)
+            : m_label(label), m_stockId(wxID_NONE)
+        {
+        }
+
+        // default copy ctor and dtor are ok
+
+        // get the string label, whether it was originally specified directly
+        // or as a stock id -- this is only useful for platforms without native
+        // stock items id support
+        wxString GetAsString() const
+        {
+            return m_stockId == wxID_NONE
+                    ? m_label
+                    : wxGetStockLabel(m_stockId, wxSTOCK_WITH_MNEMONIC);
+        }
+
+        // return the stock id or wxID_NONE if this is not a stock label
+        int GetStockId() const { return m_stockId; }
+
+    private:
+        // the label if explicitly given or empty if this is a stock item
+        const wxString m_label;
+
+        // the stock item id or wxID_NONE if m_label should be used
+        const int m_stockId;
+    };
+
 protected:
     // common validation of wxMessageDialog style
     void SetMessageDialogStyle(long style)
@@ -35,11 +84,76 @@
         return m_dialogStyle;
     }
 
-private:
+    // customization of the message box buttons
+    bool SetYesNoLabels(const ButtonLabel& yes,const ButtonLabel& no)
+    {
+        DoSetCustomLabel(m_yes, yes);
+        DoSetCustomLabel(m_no, no);
+        return true;
+    }
+
+    bool SetYesNoCancelLabels(const ButtonLabel& yes,
+                              const ButtonLabel& no,
+                              const ButtonLabel& cancel)
+    {
+        DoSetCustomLabel(m_yes, yes);
+        DoSetCustomLabel(m_no, no);
+        DoSetCustomLabel(m_cancel, cancel);
+        return true;
+    }
+
+    bool SetOKLabel(const ButtonLabel& ok)
+    {
+        DoSetCustomLabel(m_ok, ok);
+        return true;
+    }
+
+    bool SetOKCancelLabels(const ButtonLabel& ok,
+                           const ButtonLabel& cancel)
+    {
+        DoSetCustomLabel(m_ok, ok);
+        DoSetCustomLabel(m_cancel, cancel);
+        return true;
+    }
+
+    // test if any custom labels were set
+    bool HasCustomLabels() const
+    {
+        return !(m_ok.empty() && m_cancel.empty() &&
+                 m_yes.empty() && m_no.empty());
+    }
+
+    // this function is called by our public SetXXXLabels() and should assign
+    // the value to var with possibly some transformation (e.g. Cocoa version
+    // currently uses this to remove any accelerators from the button strings
+    // while GTK+ one handles stock items specifically here)
+    void DoSetCustomLabel(wxString& var, const ButtonLabel& label)
+    {
+        var = label.GetAsString();
+    }
+
+    // these functions return the custom label or empty string and should be
+    // used only in specific circumstances such as creating the buttons with
+    // these labels (in which case it makes sense to only use a custom label if
+    // it was really given and fall back on stock label otherwise), use the
+    // Get{Yes,No,OK,Cancel}Label() methods above otherwise
+    const wxString& GetCustomYesLabel() const { return m_yes; }
+    const wxString& GetCustomNoLabel() const { return m_no; }
+    const wxString& GetCustomOKLabel() const { return m_ok; }
+    const wxString& GetCustomCancelLabel() const { return m_cancel; }
+
     long m_dialogStyle;
+
+private:
+    // labels for the buttons, initially empty meaning that the defaults should
+    // be used, use GetYes/No/OK/CancelLabel() to access them
+    wxString m_yes,
+             m_no,
+             m_ok,
+             m_cancel;
 };
 
-#if defined(__WX_COMPILING_MSGDLGG_CPP__)
+#if defined(__WXMSW__) || defined(__WX_COMPILING_MSGDLGG_CPP__)
 #include "wx/generic/msgdlgg.h"
 #elif defined(__WXUNIVERSAL__) || defined(__WXGPE__)
 #include "wx/generic/msgdlgg.h"
diff -ru wxWidgets-2.8.12/src/generic/msgdlgg.cpp wxWidgets-2.8.12-mod/src/generic/msgdlgg.cpp
--- wxWidgets-2.8.12/src/generic/msgdlgg.cpp	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12-mod/src/generic/msgdlgg.cpp	2012-07-19 16:04:11.000000000 +0200
@@ -116,7 +116,7 @@
     int center_flag = wxEXPAND;
     if (style & wxYES_NO)
         center_flag = wxALIGN_CENTRE;
-    wxSizer *sizerBtn = CreateSeparatedButtonSizer(style & ButtonSizerFlags);
+    wxSizer *sizerBtn = CreateMsgDlgButtonSizer();
     if ( sizerBtn )
         topsizer->Add(sizerBtn, 0, center_flag | wxALL, 10 );
 
@@ -135,6 +135,106 @@
     Centre( wxBOTH | wxCENTER_FRAME);
 }
 
+wxSizer *wxGenericMessageDialog::CreateMsgDlgButtonSizer()
+{
+#ifndef __SMARTPHONE__
+#if wxUSE_INTL
+    // native message box always uses the current user locale but the program
+    // may be using a different one and in this case we need to manually
+    // translate the default button labels (if they're non default we have no
+    // way to translate them and so we must assume they were already
+    // translated) to avoid mismatch between the language of the message box
+    // text and its buttons
+    wxLocale * const loc = wxGetLocale();
+    if ( loc && loc->GetLanguage() != wxLocale::GetSystemLanguage() )
+    {
+        if ( m_dialogStyle & wxYES_NO &&
+                (GetCustomYesLabel().empty() && GetCustomNoLabel().empty()) )
+
+        {
+            // use the strings with mnemonics here as the native message box
+            // does
+            SetYesNoLabels(_("&Yes"), _("&No"));
+        }
+
+        // we may or not have the Ok/Cancel buttons but either we do have them
+        // or we already made the labels custom because we called
+        // SetYesNoLabels() above so doing this does no harm -- and is
+        // necessary in wxYES_NO | wxCANCEL case
+        //
+        // note that we don't use mnemonics here for consistency with the
+        // native message box (which probably doesn't use them because
+        // Enter/Esc keys can be already used to dismiss the message box
+        // using keyboard)
+        if ( GetCustomOKLabel().empty() && GetCustomCancelLabel().empty() )
+            SetOKCancelLabels(_("OK"), _("Cancel"));
+    }
+#endif // wxUSE_INTL
+
+    if ( HasCustomLabels() )
+    {
+        wxStdDialogButtonSizer * const sizerStd = new wxStdDialogButtonSizer;
+
+        wxButton *btnDef = NULL;
+
+        if ( m_dialogStyle & wxOK )
+        {
+            btnDef = new wxButton(this, wxID_OK, GetCustomOKLabel());
+            sizerStd->AddButton(btnDef);
+        }
+
+        if ( m_dialogStyle & wxCANCEL )
+        {
+            wxButton * const
+                cancel = new wxButton(this, wxID_CANCEL, GetCustomCancelLabel());
+            sizerStd->AddButton(cancel);
+
+        }
+
+        if ( m_dialogStyle & wxYES_NO )
+        {
+            wxButton * const
+                yes = new wxButton(this, wxID_YES, GetCustomYesLabel());
+            sizerStd->AddButton(yes);
+
+            wxButton * const
+                no = new wxButton(this, wxID_NO, GetCustomNoLabel());
+            sizerStd->AddButton(no);
+            if ( m_dialogStyle & wxNO_DEFAULT )
+                btnDef = no;
+            else if ( !btnDef )
+                btnDef = yes;
+        }
+
+        if ( btnDef )
+        {
+            btnDef->SetDefault();
+            btnDef->SetFocus();
+        }
+
+        sizerStd->Realize();
+
+				wxSizer * sizer = sizerStd;
+#if wxUSE_STATLINE && !defined(__WXMAC__)
+				wxBoxSizer *topsizer = new wxBoxSizer(wxVERTICAL);
+				topsizer->Add(new wxStaticLine(this),
+											wxSizerFlags().Expand().DoubleBorder(wxBOTTOM));
+				topsizer->Add(sizerStd, wxSizerFlags().Expand());
+				sizer = topsizer;
+#endif // wxUSE_STATLINE
+
+        return sizer;
+    }
+#endif // !__SMARTPHONE__
+
+    // Use standard labels for all buttons
+    return CreateSeparatedButtonSizer
+           (
+                m_dialogStyle & (wxOK | wxCANCEL | wxYES_NO |
+                                 wxNO_DEFAULT)
+           );
+}
+
 void wxGenericMessageDialog::OnYes(wxCommandEvent& WXUNUSED(event))
 {
     EndModal( wxID_YES );
@@ -156,4 +256,11 @@
     }
 }
 
+#ifdef __WXMSW__
+int wxGenericMessageDialog::ShowModal(void)
+{
+	return wxDialog::ShowModal();
+}
+#endif
+
 #endif // wxUSE_MSGDLG && !defined(__WXGTK20__)
diff -ru wxWidgets-2.8.12/build/bakefiles/files.bkl wxWidgets-2.8.12-mod/build/bakefiles/files.bkl
--- wxWidgets-2.8.12/build/bakefiles/files.bkl	2011-03-22 12:59:36.000000000 +0100
+++ l wxWidgets-2.8.12-mod/build/bakefiles/files.bkl	2012-08-03 15:18:11.000000000 +0200
@@ -1540,6 +1540,7 @@
 </set>
 
 <set var="MSW_SRC" hints="files">
+    src/generic/msgdlgg.cpp
     src/generic/statusbr.cpp
     src/generic/prntdlgg.cpp
     src/msw/accel.cpp
@@ -1564,7 +1565,6 @@
     src/msw/menu.cpp
     src/msw/menuitem.cpp
     src/msw/metafile.cpp
-    src/msw/msgdlg.cpp
     src/msw/nativdlg.cpp
     src/msw/notebook.cpp
     src/msw/ole/access.cpp
@@ -1590,6 +1590,7 @@
     wx/generic/clrpickerg.h
     wx/generic/fontpickerg.h
     wx/generic/filepickerg.h
+    wx/generic/msgdlgg.h
     wx/msw/accel.h
     wx/msw/app.h
     wx/msw/bitmap.h
@@ -1633,7 +1634,6 @@
     wx/msw/metafile.h
     wx/msw/minifram.h
     wx/msw/missing.h
-    wx/msw/msgdlg.h
     wx/msw/msvcrt.h
     wx/msw/notebook.h
     wx/msw/ole/access.h

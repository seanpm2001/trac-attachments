Index: docs/latex/wx/cmdproc.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/cmdproc.tex,v
retrieving revision 1.9
diff -u -r1.9 cmdproc.tex
--- docs/latex/wx/cmdproc.tex	2004/10/04 15:13:50	1.9
+++ docs/latex/wx/cmdproc.tex	2004/11/08 16:52:17
@@ -102,6 +102,23 @@
 last in the list (if any), and updating the edit menu (if one has been
 specified).
 
+\membersection{wxCommandProcessor::IsChanged}\label{wxcommandprocessorischanged}
+
+\func{virtual bool}{IsChanged}{\void}
+
+Returns a boolean value that indicates if changes have been made since
+the last save operation. This required you to call
+\helpref{wxCommandProcessor::MarkAsSaved}{wxcommandprocessormarkassaved}
+everytime the project is saved.
+
+\membersection{wxCommandProcessor::MarkAsSaved}\label{wxcommandprocessormarkassaved}
+
+\func{virtual void}{MarkAsSaved}{\void}
+
+Call this command everytime the project is saved. Then, a call to
+\helpref{wxCommandProcessor::IsChanged}{wxcommandprocessorischanged}
+will tell you if the project was changed since the last save operation.
+
 \membersection{wxCommandProcessor::SetEditMenu}\label{wxcommandprocessorseteditmenu}
 
 \func{void}{SetEditMenu}{\param{wxMenu* }{menu}}
Index: include/wx/cmdproc.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/cmdproc.h,v
retrieving revision 1.18
diff -u -r1.18 cmdproc.h
--- include/wx/cmdproc.h	2004/10/12 20:48:21	1.18
+++ include/wx/cmdproc.h	2004/11/08 16:30:10
@@ -99,6 +99,19 @@
     int GetMaxCommands() const { return m_maxNoCommands; }
     virtual void ClearCommands();
 
+    // Has the current project been changed?
+    virtual bool IsChanged() const
+    {
+        return GetCurrentCommand() && (m_last_saved_node != m_currentCommand) ? true : false;
+    }
+
+    // Mark the current command as the one where the last save took place
+    void MarkAsSaved()
+    {
+        m_last_saved_node = m_currentCommand;
+    }
+
+
     // By default, the accelerators are "\tCtrl+Z" and "\tCtrl+Y"
     const wxString& GetUndoAccelerator() const { return m_undoAccelerator; }
     const wxString& GetRedoAccelerator() const { return m_redoAccelerator; }
@@ -116,6 +129,7 @@
     int           m_maxNoCommands;
     wxList        m_commands;
     wxList::compatibility_iterator m_currentCommand;
+    wxList::compatibility_iterator m_last_saved_node;
 
 #if wxUSE_MENUS
     wxMenu*       m_commandEditMenu;
Index: src/common/cmdproc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/cmdproc.cpp,v
retrieving revision 1.19
diff -u -r1.19 cmdproc.cpp
--- src/common/cmdproc.cpp	2004/10/12 19:29:10	1.19
+++ src/common/cmdproc.cpp	2004/11/08 16:41:04
@@ -68,6 +68,7 @@
 #if !wxUSE_STL
     m_currentCommand = NULL;
 #endif
+    m_last_saved_node=wxList::compatibility_iterator();
 }
 
 wxCommandProcessor::~wxCommandProcessor()
@@ -118,6 +119,8 @@
         wxCommand *firstCommand = (wxCommand *)firstNode->GetData();
         delete firstCommand;
         m_commands.Erase(firstNode);
+        // Make sure m_last_saved_node won't point to freed memory
+        if (m_last_saved_node == firstNode) m_last_saved_node=wxList::compatibility_iterator();
     }
 
     // Correct a bug: we must chop off the current 'branch'
@@ -132,6 +135,8 @@
             wxList::compatibility_iterator next = node->GetNext();
             delete (wxCommand *)node->GetData();
             m_commands.Erase(node);
+            // Make sure m_last_saved_node won't point to freed memory
+            if (m_last_saved_node == node) m_last_saved_node=wxList::compatibility_iterator();
             node = next;
         }
     }
@@ -313,6 +318,7 @@
         node = m_commands.GetFirst();
     }
     m_currentCommand = wxList::compatibility_iterator();
+    m_last_saved_node= wxList::compatibility_iterator();
 }
 
 

 	  	 

Index: include/wx/msw/menuitem.h
===================================================================
--- include/wx/msw/menuitem.h	(revision 73198)
+++ include/wx/msw/menuitem.h	(working copy)
@@ -71,8 +71,9 @@
                bool isCheckable,
                wxMenu *subMenu = NULL)
     );
-#endif
-
+#endif 
+ 
+    
 #if wxUSE_OWNER_DRAWN
 
     void SetBitmaps(const wxBitmap& bmpChecked,
@@ -83,9 +84,9 @@
         SetOwnerDrawn(true);
     }
 
-    void SetBitmap(const wxBitmap& bmp, bool bChecked = true)
+    void DoSetBitmap(const wxBitmap& bmp,int flags)
     {
-        if ( bChecked )
+        if ( flags==wxITEM_IMAGE_CHECKED )
             m_bmpChecked = bmp;
         else
             m_bmpUnchecked = bmp;
Index: include/wx/osx/menuitem.h
===================================================================
--- include/wx/osx/menuitem.h	(revision 73198)
+++ include/wx/osx/menuitem.h	(working copy)
@@ -43,7 +43,7 @@
     virtual void Enable(bool bDoEnable = true);
     virtual void Check(bool bDoCheck = true);
 
-    virtual void SetBitmap(const wxBitmap& bitmap) ;
+    void SetBitmap(const wxBitmap& bitmap, int WXUNUSED(flags)=wxITEM_IMAGE_SHOW){ DoSetBitmap(bitmap, flags); } ;//redefined to avoid ambigous/collision with MSW only version
     virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
 
     // update the os specific representation
@@ -59,6 +59,7 @@
     wxMenuItemImpl* GetPeer() { return m_peer; }
 private:
     void UncheckRadio() ;
+    virtual void DoSetBitmap(onst wxBitmap& bitmap, int flags);
 
     // the positions of the first and last items of the radio group this item
     // belongs to or -1: start is the radio group start and is valid for all
Index: include/wx/gtk/menuitem.h
===================================================================
--- include/wx/gtk/menuitem.h	(revision 73198)
+++ include/wx/gtk/menuitem.h	(working copy)
@@ -32,8 +32,8 @@
     virtual void Enable( bool enable = true );
     virtual void Check( bool check = true );
     virtual bool IsChecked() const;
-    virtual void SetBitmap(const wxBitmap& bitmap);
-    virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
+    virtual void DoSetBitmap(const wxBitmap& bitmap, int flags=wxITEM_IMAGE_SHOW_ALWAYS);
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; }
 
     // implementation
     void SetMenuItem(GtkWidget *menuItem) { m_menuItem = menuItem; }
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 73198)
+++ include/wx/defs.h	(working copy)
@@ -2178,6 +2178,14 @@
     wxITEM_MAX
 };
 
+/*  Menu item images show or show */
+enum
+{
+    wxITEM_IMAGE_SHOW = 1, 
+    wxITEM_IMAGE_SHOW_ALWAYS,
+    wxITEM_IMAGE_CHECKED,
+};
+
 /*
  * The possible states of a 3-state checkbox (Compatible
  * with the 2-state checkbox).
Index: include/wx/menuitem.h
===================================================================
--- include/wx/menuitem.h	(revision 73198)
+++ include/wx/menuitem.h	(working copy)
@@ -13,6 +13,7 @@
 #define _WX_MENUITEM_H_BASE_
 
 #include "wx/defs.h"
+#include "wx/bitmap.h"
 
 #if wxUSE_MENUS
 
@@ -100,7 +101,20 @@
 
     // help string (displayed in the status bar by default)
     void SetHelp(const wxString& str);
-    const wxString& GetHelp() const { return m_help; }
+    const wxString& GetHelp() const { return m_help; } 
+    
+    //bitmap getter/setter    
+    void SetBitmap(const wxBitmap& bitmap, int flags=wxITEM_IMAGE_SHOW_ALWAYS) 
+    {
+        DoSetBitmap(bitmap, flags);
+    }; 
+    
+    void SetBitmap(const wxBitmap bitmap, bool WXUNUSED(checked)){ DoSetBitmap(bitmap, wxITEM_IMAGE_CHECKED); }
+    
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; }
+    
+    //Should we show Images always (especially in GTK) or should we let system decide?
+    int GetShowBmpState(){return m_showBitmap;}
 
 #if wxUSE_ACCEL
     // extract the accelerator from the given menu string, return NULL if none
@@ -161,12 +175,20 @@
                    const wxString& help = wxEmptyString,
                    wxItemKind kind = wxITEM_NORMAL,
                    wxMenu *subMenu = NULL);
+    
+    virtual void DoSetBitmap(const wxBitmap& bitmap, int showImages=wxITEM_IMAGE_SHOW_ALWAYS) 
+    {
+        m_bitmap=bitmap; 
+        m_showBitmap=showImages;
+    }; 
 
-private:
+protected:
     // and, if we have one ctor, compiler won't generate a default copy one, so
     // declare them ourselves - but don't implement as they shouldn't be used
     wxMenuItemBase(const wxMenuItemBase& item);
     wxMenuItemBase& operator=(const wxMenuItemBase& item);
+    wxBitmap  m_bitmap; // Bitmap for menuitem, if any
+    int m_showBitmap; //show bitmap images? It shows bitmap for GTK When wxITEM_IMAGE_SHOW_ALWAYS is specified
 };
 
 #if WXWIN_COMPATIBILITY_2_8
Index: interface/wx/menuitem.h
===================================================================
--- interface/wx/menuitem.h	(revision 73198)
+++ interface/wx/menuitem.h	(working copy)
@@ -319,16 +319,31 @@
         SetBitmap() must be called before the item is appended to the menu,
         i.e. appending the item without a bitmap and setting one later is not
         guaranteed to work. But the bitmap can be changed or reset later if it
+        had been set up initially. 
+
+        @onlyfor{wxmsw}
+    */
+    virtual void SetBitmap(const wxBitmap& bmp, bool checked = true);
+
+    /**
+        Sets the bitmap for the menu item. 
+        
+        SetBitmap() must be called before the item is appended to the menu,
+        i.e. appending the item without a bitmap and setting one later is not
+        guaranteed to work. But the bitmap can be changed or reset later if it
         had been set up initially.
 
         Notice that GTK+ uses a global setting called @c gtk-menu-images to
         determine if the images should be shown in the menus at all. If it is
         off (which is the case in e.g. Gnome 2.28 by default), no images will
-        be shown, consistently with the native behaviour.
+        be shown, consistently with the native behaviour. This behaviour is 
+        overriden with parameter wxITEM_IMAGE_SHOW_ALWAYS (default) and forces
+        showing of icons. Pass wxITEM_IMAGE_SHOW to allow the system decide 
+        accordng to policy.
 
         @onlyfor{wxmsw,wxosx,wxgtk}
     */
-    virtual void SetBitmap(const wxBitmap& bmp, bool checked = true);
+    virtual void SetBitmap(const wxBitmap& bmp, int flags = wxITEM_IMAGE_SHOW_ALWAYS);
 
     /**
         Sets the checked/unchecked bitmaps for the menu item.

--- src/osx/menuitem_osx.cpp	(revision 73198)
+++ src/osx/menuitem_osx.cpp	(working copy)
@@ -69,7 +69,7 @@
 // change item state
 // -----------------
 
-void wxMenuItem::SetBitmap(const wxBitmap& bitmap)
+void wxMenuItem::DoSetBitmap(const wxBitmap& bitmap, int flags)
 {
       m_bitmap = bitmap;
       UpdateItemBitmap();
Index: src/gtk/menu.cpp
===================================================================
--- src/gtk/menu.cpp	(revision 73198)
+++ src/gtk/menu.cpp	(working copy)
@@ -640,13 +640,16 @@
 #endif // wxUSE_ACCEL
 }
 
-void wxMenuItem::SetBitmap(const wxBitmap& bitmap)
+void wxMenuItem::DoSetBitmap(const wxBitmap& bitmap, int flags)
 {
-    if (m_kind == wxITEM_NORMAL)
-        m_bitmap = bitmap;
+    if (m_kind != wxITEM_NORMAL)
+    {
+        wxFAIL_MSG("only normal menu items can have bitmaps");   
+    }
     else
     {
-        wxFAIL_MSG("only normal menu items can have bitmaps");
+      m_bitmap = bitmap;
+      m_showBitmap = flags;
     }
 }
 
@@ -864,6 +867,8 @@
                 menuItem = gtk_image_menu_item_new_with_label("");
                 gtk_widget_show(image);
                 gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(menuItem), image);
+                if(mitem->GetShowBmpState()==wxITEM_IMAGE_SHOW_ALWAYS)
+                    gtk_image_menu_item_set_always_show_image(GTK_IMAGE_MENU_ITEM(menuItem), TRUE); 
             }
             else if ((stockid = wxGetStockGtkID(mitem->GetId())) != NULL)
                 // use stock bitmap for this item if available on the assumption

Index: src/common/menucmn.cpp
===================================================================
--- src/common/menucmn.cpp	(revision 73198)
+++ src/common/menucmn.cpp	(working copy)
@@ -260,6 +260,7 @@
                             (itemid >= wxID_AUTO_LOWEST && itemid <= wxID_AUTO_HIGHEST),
                           wxS("invalid itemid value") );
             m_id = itemid;
+            m_showBitmap = wxITEM_IMAGE_SHOW;//initializa to system value
     }
 
     // notice that parentMenu can be NULL: the item can be attached to the menu


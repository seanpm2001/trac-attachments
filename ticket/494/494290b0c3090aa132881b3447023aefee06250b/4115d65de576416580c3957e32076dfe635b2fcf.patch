Index: src/common/menucmn.cpp
===================================================================
--- src/common/menucmn.cpp	(revision 73198)
+++ src/common/menucmn.cpp	(working copy)
@@ -260,6 +260,7 @@
                             (itemid >= wxID_AUTO_LOWEST && itemid <= wxID_AUTO_HIGHEST),
                           wxS("invalid itemid value") );
             m_id = itemid;
+            m_showBitmap = wxITEM_IMAGE_SHOW;//initializa to system value
     }
 
     // notice that parentMenu can be NULL: the item can be attached to the menu
Index: src/gtk/menu.cpp
===================================================================
--- src/gtk/menu.cpp	(revision 73198)
+++ src/gtk/menu.cpp	(working copy)
@@ -640,13 +640,16 @@
 #endif // wxUSE_ACCEL
 }
 
-void wxMenuItem::SetBitmap(const wxBitmap& bitmap)
+void wxMenuItem::SetBitmap(const wxBitmap& bitmap, int showImages)
 {
-    if (m_kind == wxITEM_NORMAL)
-        m_bitmap = bitmap;
+    if (m_kind != wxITEM_NORMAL)
+    {
+        wxFAIL_MSG("only normal menu items can have bitmaps");   
+    }
     else
     {
-        wxFAIL_MSG("only normal menu items can have bitmaps");
+      m_bitmap = bitmap;
+	  m_showBitmap = showImages;
     }
 }
 
@@ -864,6 +867,8 @@
                 menuItem = gtk_image_menu_item_new_with_label("");
                 gtk_widget_show(image);
                 gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(menuItem), image);
+                if(mitem->GetShowBmpState()==wxITEM_IMAGE_SHOW_ALWAYS)
+                    gtk_image_menu_item_set_always_show_image(GTK_IMAGE_MENU_ITEM(menuItem), TRUE); 
             }
             else if ((stockid = wxGetStockGtkID(mitem->GetId())) != NULL)
                 // use stock bitmap for this item if available on the assumption

Index: include/wx/msw/menuitem.h
===================================================================
--- include/wx/msw/menuitem.h	(revision 73198)
+++ include/wx/msw/menuitem.h	(working copy)
@@ -73,6 +73,14 @@
     );
 #endif
 
+
+    
+void SetBitmap(const wxBitmap& bitmap, int showImages)
+{
+    //just call the method with same name passing true for second argument
+    SetBitmap(bitmap, true);
+}
+    
 #if wxUSE_OWNER_DRAWN
 
     void SetBitmaps(const wxBitmap& bmpChecked,
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 73198)
+++ include/wx/defs.h	(working copy)
@@ -2178,6 +2178,13 @@
     wxITEM_MAX
 };
 
+/*  Menu item images show or show */
+enum
+{
+    wxITEM_IMAGE_SHOW = 1, 
+    wxITEM_IMAGE_SHOW_ALWAYS
+};
+
 /*
  * The possible states of a 3-state checkbox (Compatible
  * with the 2-state checkbox).
Index: include/wx/osx/menuitem.h
===================================================================
--- include/wx/osx/menuitem.h	(revision 73198)
+++ include/wx/osx/menuitem.h	(working copy)
@@ -41,11 +41,8 @@
     virtual void SetItemLabel(const wxString& strName);
 
     virtual void Enable(bool bDoEnable = true);
-    virtual void Check(bool bDoCheck = true);
+    virtual void Check(bool bDoCheck = true); 
 
-    virtual void SetBitmap(const wxBitmap& bitmap) ;
-    virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
-
     // update the os specific representation
     void UpdateItemBitmap() ;
     void UpdateItemText() ;
Index: include/wx/gtk/menuitem.h
===================================================================
--- include/wx/gtk/menuitem.h	(revision 73198)
+++ include/wx/gtk/menuitem.h	(working copy)
@@ -32,8 +32,8 @@
     virtual void Enable( bool enable = true );
     virtual void Check( bool check = true );
     virtual bool IsChecked() const;
-    virtual void SetBitmap(const wxBitmap& bitmap);
-    virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
+    virtual void SetBitmap(const wxBitmap& bitmap, int showImages=wxITEM_IMAGE_SHOW_ALWAYS);
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; }
 
     // implementation
     void SetMenuItem(GtkWidget *menuItem) { m_menuItem = menuItem; }
Index: include/wx/menuitem.h
===================================================================
--- include/wx/menuitem.h	(revision 73198)
+++ include/wx/menuitem.h	(working copy)
@@ -13,6 +13,7 @@
 #define _WX_MENUITEM_H_BASE_
 
 #include "wx/defs.h"
+#include "wx/bitmap.h"
 
 #if wxUSE_MENUS
 
@@ -100,7 +101,19 @@
 
     // help string (displayed in the status bar by default)
     void SetHelp(const wxString& str);
-    const wxString& GetHelp() const { return m_help; }
+    const wxString& GetHelp() const { return m_help; } 
+    
+    //bitmap getter/setter    
+    virtual void SetBitmap(const wxBitmap& bitmap, int showImages=wxITEM_IMAGE_SHOW_ALWAYS) 
+    {
+		m_bitmap=bitmap; 
+		m_showBitmap=showImages;
+	}; 
+	
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; }
+    
+    //Should we show Images always (especially in GTK) or should we let system decide?
+    int GetShowBmpState(){return m_showBitmap;}
 
 #if wxUSE_ACCEL
     // extract the accelerator from the given menu string, return NULL if none
@@ -162,11 +175,13 @@
                    wxItemKind kind = wxITEM_NORMAL,
                    wxMenu *subMenu = NULL);
 
-private:
+protected:
     // and, if we have one ctor, compiler won't generate a default copy one, so
     // declare them ourselves - but don't implement as they shouldn't be used
     wxMenuItemBase(const wxMenuItemBase& item);
     wxMenuItemBase& operator=(const wxMenuItemBase& item);
+    wxBitmap  m_bitmap; // Bitmap for menuitem, if any
+    int m_showBitmap; //show bitmap images? It shows bitmap for GTK When wxITEM_IMAGE_SHOW_ALWAYS is specified
 };
 
 #if WXWIN_COMPATIBILITY_2_8

Index: src/common/menucmn.cpp
===================================================================
--- src/common/menucmn.cpp	(revision 73429)
+++ src/common/menucmn.cpp	(working copy)
@@ -259,7 +259,7 @@
             wxASSERT_MSG( (itemid >= 0 && itemid < SHRT_MAX) ||
                             (itemid >= wxID_AUTO_LOWEST && itemid <= wxID_AUTO_HIGHEST),
                           wxS("invalid itemid value") );
-            m_id = itemid;
+            m_id = itemid; 
     }
 
     // notice that parentMenu can be NULL: the item can be attached to the menu
Index: src/osx/menuitem_osx.cpp
===================================================================
--- src/osx/menuitem_osx.cpp	(revision 73429)
+++ src/osx/menuitem_osx.cpp	(working copy)
@@ -69,7 +69,7 @@
 // change item state
 // -----------------
 
-void wxMenuItem::SetBitmap(const wxBitmap& bitmap)
+void wxMenuItem::DoSetBitmap(const wxBitmap& bmp,  int WXUNUSED(flags))
 {
       m_bitmap = bitmap;
       UpdateItemBitmap();
Index: src/gtk/menu.cpp
===================================================================
--- src/gtk/menu.cpp	(revision 73429)
+++ src/gtk/menu.cpp	(working copy)
@@ -664,13 +664,16 @@
 #endif // wxUSE_ACCEL
 }
 
-void wxMenuItem::SetBitmap(const wxBitmap& bitmap)
+void wxMenuItem::DoSetBitmap(const wxBitmap& bitmap, int flags)
 {
-    if (m_kind == wxITEM_NORMAL)
-        m_bitmap = bitmap;
+    if (m_kind != wxITEM_NORMAL)
+    {
+        wxFAIL_MSG("only normal menu items can have bitmaps");   
+    }
     else
     {
-        wxFAIL_MSG("only normal menu items can have bitmaps");
+      m_bitmap = bitmap;
+      m_alwaysUseBitmap = flags;
     }
 }
 
@@ -887,6 +890,8 @@
                 menuItem = gtk_image_menu_item_new_with_label("");
                 gtk_widget_show(image);
                 gtk_image_menu_item_set_image(GTK_IMAGE_MENU_ITEM(menuItem), image);
+                if(mitem->GTKShouldAlwaysUseBitmap())
+                    gtk_image_menu_item_set_always_show_image(GTK_IMAGE_MENU_ITEM(menuItem), TRUE); 
             }
             else if ((stockid = wxGetStockGtkID(mitem->GetId())) != NULL)
                 // use stock bitmap for this item if available on the assumption
Index: include/wx/cocoa/menuitem.h
===================================================================
--- include/wx/cocoa/menuitem.h	(revision 73429)
+++ include/wx/cocoa/menuitem.h	(working copy)
@@ -74,7 +74,6 @@
     // hopefully
     void SetBitmaps(const wxBitmap& bmpChecked,
                     const wxBitmap& bmpUnchecked = wxNullBitmap);
-    void SetBitmap(const wxBitmap& bmp) { SetBitmaps(bmp); }
     const wxBitmap& GetBitmap(bool checked = TRUE) const
       { return checked ? m_bmpChecked : m_bmpUnchecked; }
 
@@ -84,7 +83,10 @@
 
     // set the accel index and string from text
     void UpdateAccelInfo();
-
+    
+    //do setup bitmaps according to this platform    
+    virtual void DoSetBitmap(const wxBitmap& bmp, int WXUNUSED(flags)) { SetBitmaps(bmp); }
+    
     // the bitmaps (may be invalid, then they're not used)
     wxBitmap m_bmpChecked,
              m_bmpUnchecked;
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 73429)
+++ include/wx/defs.h	(working copy)
@@ -2199,6 +2199,21 @@
     wxITEM_MAX
 };
 
+/*  
+ * Menu item images show or show always
+ * In GTK there is a policy of sometimes hiding images.
+ * This can be overriden by specifying wxITEM_IMAGE_SHOW_ALWAYS
+ * Else and in other platform it works natively
+ * wxITEM_IMAGE_CHECKED specifies whether the item is checked or not.
+ * It is implemented on MSW only
+*/
+enum
+{
+    wxITEM_IMAGE_SHOW = 1, 
+    wxITEM_IMAGE_SHOW_ALWAYS=2,
+    wxITEM_IMAGE_CHECKED=4 
+};
+
 /*
  * The possible states of a 3-state checkbox (Compatible
  * with the 2-state checkbox).
Index: include/wx/msw/menuitem.h
===================================================================
--- include/wx/msw/menuitem.h	(revision 73429)
+++ include/wx/msw/menuitem.h	(working copy)
@@ -83,14 +83,7 @@
         SetOwnerDrawn(true);
     }
 
-    void SetBitmap(const wxBitmap& bmp, bool bChecked = true)
-    {
-        if ( bChecked )
-            m_bmpChecked = bmp;
-        else
-            m_bmpUnchecked = bmp;
-        SetOwnerDrawn(true);
-    }
+    
 
     void SetDisabledBitmap(const wxBitmap& bmpDisabled)
     {
@@ -114,7 +107,16 @@
 protected:
     virtual void GetFontToUse(wxFont& font) const;
     virtual void GetColourToUse(wxODStatus stat, wxColour& colText, wxColour& colBack) const;
-
+    
+    //do setup bitmaps according to this platform    
+    virtual void DoSetBitmap(const wxBitmap& bmp, int flags)
+    {
+        if (flags & wxITEM_IMAGE_CHECKED)
+            m_bmpChecked = bmp;
+        else
+            m_bmpUnchecked = bmp;
+        SetOwnerDrawn(true);
+    }
 private:
     // helper function for draw std menu check mark
     void DrawStdCheckMark(WXHDC hdc, const tagRECT* rc, wxODStatus stat);
Index: include/wx/osx/menuitem.h
===================================================================
--- include/wx/osx/menuitem.h	(revision 73429)
+++ include/wx/osx/menuitem.h	(working copy)
@@ -42,8 +42,7 @@
 
     virtual void Enable(bool bDoEnable = true);
     virtual void Check(bool bDoCheck = true);
-
-    virtual void SetBitmap(const wxBitmap& bitmap) ;
+    
     virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
 
     // update the os specific representation
@@ -57,6 +56,11 @@
     void SetRadioGroupEnd(int end);
 
     wxMenuItemImpl* GetPeer() { return m_peer; }
+
+protected:
+    //do setup bitmaps according to this platform    
+    virtual void DoSetBitmap(const wxBitmap& bmp, int flags=wxITEM_IMAGE_SHOW_ALWAYS) ;
+
 private:
     void UncheckRadio() ;
 
Index: include/wx/gtk/menuitem.h
===================================================================
--- include/wx/gtk/menuitem.h	(revision 73429)
+++ include/wx/gtk/menuitem.h	(working copy)
@@ -32,8 +32,10 @@
     virtual void Enable( bool enable = true );
     virtual void Check( bool check = true );
     virtual bool IsChecked() const;
-    virtual void SetBitmap(const wxBitmap& bitmap);
-    virtual const wxBitmap& GetBitmap() const { return m_bitmap; }
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; }
+    
+    //check whether user wants to force-show images or follow system policy
+    bool GTKShouldAlwaysUseBitmap(){ return m_alwaysUseBitmap==wxITEM_IMAGE_SHOW_ALWAYS?true:false;}
 
     // implementation
     void SetMenuItem(GtkWidget *menuItem);
@@ -52,10 +54,16 @@
     );
 #endif
 
+protected:
+    //GTK Specific code to show bitmap allowing overriding gtk image policy
+    virtual void DoSetBitmap(const wxBitmap& bitmap, int flags=wxITEM_IMAGE_SHOW_ALWAYS);
+    
+
 private:
     wxBitmap  m_bitmap; // Bitmap for menuitem, if any
     GtkWidget *m_menuItem;  // GtkMenuItem
-
+    int m_alwaysUseBitmap; //whether to force show images or go with default 
+    
     DECLARE_DYNAMIC_CLASS(wxMenuItem)
 };
 
Index: include/wx/menuitem.h
===================================================================
--- include/wx/menuitem.h	(revision 73429)
+++ include/wx/menuitem.h	(working copy)
@@ -13,6 +13,7 @@
 #define _WX_MENUITEM_H_BASE_
 
 #include "wx/defs.h"
+#include "wx/bitmap.h"
 
 #if wxUSE_MENUS
 
@@ -100,7 +101,23 @@
 
     // help string (displayed in the status bar by default)
     void SetHelp(const wxString& str);
-    const wxString& GetHelp() const { return m_help; }
+    const wxString& GetHelp() const { return m_help; } 
+    
+    //bitmap getter/setter    
+    void SetBitmap(const wxBitmap& bitmap, int flags=wxITEM_IMAGE_SHOW_ALWAYS) 
+    {
+        DoSetBitmap(bitmap, flags);
+    }; 
+    
+    void SetBitmap(const wxBitmap bitmap, bool checked)
+    { 
+        if(checked)
+            DoSetBitmap(bitmap, wxITEM_IMAGE_CHECKED); //make the menu item checked
+        else
+            DoSetBitmap(bitmap, wxITEM_IMAGE_SHOW); //unchecked normal item
+    }
+    
+    virtual const wxBitmap GetBitmap() const { return m_bitmap; } 
 
 #if wxUSE_ACCEL
     // extract the accelerator from the given menu string, return NULL if none
@@ -161,12 +178,16 @@
                    const wxString& help = wxEmptyString,
                    wxItemKind kind = wxITEM_NORMAL,
                    wxMenu *subMenu = NULL);
+    
 
-private:
+protected:
+    //this will be overriden in each platform 
+    virtual void DoSetBitmap(const wxBitmap& bitmap, int showImages=wxITEM_IMAGE_SHOW_ALWAYS)=0; 
     // and, if we have one ctor, compiler won't generate a default copy one, so
     // declare them ourselves - but don't implement as they shouldn't be used
     wxMenuItemBase(const wxMenuItemBase& item);
     wxMenuItemBase& operator=(const wxMenuItemBase& item);
+    wxBitmap  m_bitmap; // Bitmap for menuitem, if any 
 };
 
 #if WXWIN_COMPATIBILITY_2_8
Index: interface/wx/menuitem.h
===================================================================
--- interface/wx/menuitem.h	(revision 73429)
+++ interface/wx/menuitem.h	(working copy)
@@ -319,16 +319,31 @@
         SetBitmap() must be called before the item is appended to the menu,
         i.e. appending the item without a bitmap and setting one later is not
         guaranteed to work. But the bitmap can be changed or reset later if it
+        had been set up initially. 
+
+        @onlyfor{wxmsw}
+    */
+    virtual void SetBitmap(const wxBitmap& bmp, bool checked = true);
+
+    /**
+        Sets the bitmap for the menu item. 
+        
+        SetBitmap() must be called before the item is appended to the menu,
+        i.e. appending the item without a bitmap and setting one later is not
+        guaranteed to work. But the bitmap can be changed or reset later if it
         had been set up initially.
 
         Notice that GTK+ uses a global setting called @c gtk-menu-images to
         determine if the images should be shown in the menus at all. If it is
         off (which is the case in e.g. Gnome 2.28 by default), no images will
-        be shown, consistently with the native behaviour.
+        be shown, consistently with the native behaviour. This behaviour is 
+        overriden with parameter wxITEM_IMAGE_SHOW_ALWAYS (default) and forces
+        showing of icons. Pass wxITEM_IMAGE_SHOW to allow the system decide 
+        accordng to policy.
 
         @onlyfor{wxmsw,wxosx,wxgtk}
     */
-    virtual void SetBitmap(const wxBitmap& bmp, bool checked = true);
+    virtual void SetBitmap(const wxBitmap& bmp, int flags = wxITEM_IMAGE_SHOW_ALWAYS);
 
     /**
         Sets the checked/unchecked bitmaps for the menu item.

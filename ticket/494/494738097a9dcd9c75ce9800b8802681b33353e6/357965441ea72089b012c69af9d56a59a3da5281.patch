Index: src/msw/slider.cpp
===================================================================
--- src/msw/slider.cpp	(revision 62774)
+++ src/msw/slider.cpp	(working copy)
@@ -25,6 +25,7 @@
     #pragma hdrstop
 #endif
 
+#define wxUSE_SLIDER 1   /*   DEBUG   efm5   */
 #if wxUSE_SLIDER
 
 #include "wx/slider.h"
@@ -183,7 +184,7 @@
     };
 
     wxASSERT_MSG( !(style & wxSL_VERTICAL) || !(style & wxSL_HORIZONTAL),
-                    wxT("incompatible slider direction and orientation") );
+                    _T("incompatible slider direction and orientation") );
 
 
     // initialize everything
@@ -425,25 +426,28 @@
         *y = rect.y;
 }
 
-int wxSlider::GetLabelsSize(int *width) const
+int wxSlider::GetLabelsSize(int *widest, wxSize *bothWidths) const
 {
-    int cy;
+    int labelHeight;
 
-    if ( width )
+    if (widest)
     {
         // find the max label width
-        int wLabelMin, wLabelMax;
-        GetTextExtent(Format(m_rangeMin), &wLabelMin, &cy);
-        GetTextExtent(Format(m_rangeMax), &wLabelMax, &cy);
-
-        *width = wxMax(wLabelMin, wLabelMax);
+        int labelWidthMin, labelWidthMax;
+        GetTextExtent(Format(m_rangeMin), &labelWidthMin, &labelHeight);
+        GetTextExtent(Format(m_rangeMax), &labelWidthMax, &labelHeight);
+        *widest = wxMax(labelWidthMin, labelWidthMax);
+        if (bothWidths) {
+           bothWidths->x = labelWidthMin;
+           bothWidths->y = labelWidthMax;
+        }
     }
     else
     {
-        cy = GetCharHeight();
+        labelHeight = GetCharHeight();
     }
 
-    return EDIT_HEIGHT_FROM_CHAR_HEIGHT(cy);
+    return EDIT_HEIGHT_FROM_CHAR_HEIGHT(labelHeight);
 }
 
 void wxSlider::DoMoveWindow(int x, int y, int width, int height)
@@ -455,57 +459,57 @@
         wxSliderBase::DoMoveWindow(x, y, width, height);
         return;
     }
+    int maxLabelWidth;
+    wxSize bothWidths;
+    int labelHeight = GetLabelsSize(&maxLabelWidth, &bothWidths);
+    m_minLabelWidth = bothWidths.x;
+    m_maxLabelWidth = bothWidths.y;
+    int valueOffset = 0, labelOffset = 0;
+    if (HasFlag(wxSL_BOTH)){
+       valueOffset = labelHeight/2;
+       labelOffset = maxLabelWidth/2;
+    }
 
     // be careful to position the slider itself after moving the labels as
     // otherwise our GetBoundingBox(), which is called from WM_SIZE handler,
     // would return a wrong result and wrong size would be cached internally
     if ( HasFlag(wxSL_VERTICAL) )
     {
-        int wLabel;
-        int hLabel = GetLabelsSize(&wLabel);
-
-        int xLabel = HasFlag(wxSL_LEFT) ? x + width - wLabel : x;
-
-        // position all labels: min at the top, value in the middle and max at
-        // the bottom
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
-                     xLabel, y, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
-                     xLabel, y + (height - hLabel)/2, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
-                      xLabel, y + height - hLabel, wLabel, hLabel);
-
+        int xLabel = HasFlag(wxSL_LEFT) ? x + width - maxLabelWidth : x;
+        if (HasFlag(wxSL_RIGHT)) {
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min], xLabel + (maxLabelWidth*1.35) + labelOffset, y - 2, maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value], xLabel + valueOffset, y + (height - labelHeight)/2, maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max], xLabel + (maxLabelWidth*1.35) + labelOffset, y + height  - (labelHeight/2), maxLabelWidth, labelHeight);
+        }
+        else {// wxSL_LEFT
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min], xLabel - ((maxLabelWidth*1.35) + labelOffset), y - 2, maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value], xLabel - valueOffset, y + (height - labelHeight)/2, maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max], xLabel - ((maxLabelWidth*1.35) + labelOffset), y + height - (labelHeight/2), maxLabelWidth, labelHeight);
+        }
         // position the slider itself along the left/right edge
-        wxSliderBase::DoMoveWindow(HasFlag(wxSL_LEFT) ? x : x + wLabel + HGAP,
-                                   y + hLabel/2,
-                                   width - wLabel - HGAP,
-                                   height - hLabel);
+        wxSliderBase::DoMoveWindow(HasFlag(wxSL_LEFT) ? x : x + maxLabelWidth + HGAP,
+                                   y + labelHeight/2,
+                                   width - maxLabelWidth - HGAP,
+                                   height - labelHeight);
     }
     else // horizontal
     {
-        int wLabel;
-        int hLabel = GetLabelsSize(&wLabel);
-
-        int yLabel = HasFlag(wxSL_TOP) ? y + height - hLabel : y;
-
-        // position all labels: min on the left, value in the middle and max to
-        // the right
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
-                      x, yLabel, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
-                      x + (width - wLabel)/2, yLabel, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
-                      x + width - wLabel, yLabel, wLabel, hLabel);
-
+        int yLabel = HasFlag(wxSL_TOP) ? y + height - labelHeight : y;
+        if (HasFlag(wxSL_TOP)){//label below, value & ticks above
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min], x - 3, yLabel, m_minLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value], x + (width - m_maxLabelWidth)/2, yLabel - ((labelHeight*2.5) + valueOffset), m_maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max], x + width - (m_maxLabelWidth), yLabel, m_maxLabelWidth, labelHeight);
+        }
+        else {// wxSL_BOTTOM
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min], x - 3, yLabel + 7, m_minLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value], x + (width - m_maxLabelWidth)/2, yLabel + ((labelHeight*2.75) + valueOffset), m_maxLabelWidth, labelHeight);
+           DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max], x + width - (m_maxLabelWidth), yLabel + 7, m_maxLabelWidth, labelHeight);
+        }
         // position the slider itself along the top/bottom edge
         wxSliderBase::DoMoveWindow(x,
-                                   HasFlag(wxSL_TOP) ? y : y + hLabel,
+                                   HasFlag(wxSL_TOP) ? y : y + labelHeight,
                                    width,
-                                   height - hLabel);
+                                   height- labelHeight);
     }
 }
 
@@ -575,7 +579,7 @@
 {
     ::SendMessage(GetHwnd(), TBM_SETPOS, (WPARAM)TRUE, (LPARAM)ValueInvertOrNot(value));
 
-    if ( HasFlag(wxSL_VALUE_LABEL) )
+    if ( m_labels )
     {
         ::SetWindowText((*m_labels)[SliderLabel_Value], Format(value).wx_str());
     }
@@ -589,7 +593,7 @@
     ::SendMessage(GetHwnd(), TBM_SETRANGEMIN, TRUE, m_rangeMin);
     ::SendMessage(GetHwnd(), TBM_SETRANGEMAX, TRUE, m_rangeMax);
 
-    if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+    if ( m_labels )
     {
         ::SetWindowText((*m_labels)[SliderLabel_Min],
                         Format(ValueInvertOrNot(m_rangeMin)).wx_str());
Index: include/wx/msw/slider.h
===================================================================
--- include/wx/msw/slider.h	(revision 62774)
+++ include/wx/msw/slider.h	(working copy)
@@ -101,13 +101,13 @@
     void Init();
 
     // format an integer value as string
-    static wxString Format(int n) { return wxString::Format(wxT("%d"), n); }
+    static wxString Format(int n) { return wxString::Format(_T("%d"), n); }
 
     // get the boundig box for the slider and possible labels
     wxRect GetBoundingBox() const;
 
     // get the height and, if the pointer is not NULL, width of our labels
-    int GetLabelsSize(int *width = NULL) const;
+    int GetLabelsSize(int *widest = NULL, wxSize *bothWidths = NULL) const;
 
 
     // overridden base class virtuals
@@ -124,6 +124,8 @@
     int           m_pageSize;
     int           m_lineSize;
     int           m_tickFreq;
+    int           m_minLabelWidth;
+    int           m_maxLabelWidth;
 
     // flag needed to detect whether we're getting THUMBRELEASE event because
     // of dragging the thumb or scrolling the mouse wheel

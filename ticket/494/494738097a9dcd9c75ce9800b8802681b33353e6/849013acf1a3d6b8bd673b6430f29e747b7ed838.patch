Index: src/msw/slider.cpp
===================================================================
--- src/msw/slider.cpp	(revision 62804)
+++ src/msw/slider.cpp	(working copy)
@@ -49,9 +49,16 @@
     SliderLabel_Last
 };
 
-// the gap between the slider and the labels, in pixels
+// the gaps between the slider and the labels, in pixels
 static const int HGAP = 5;
+static const int VGAP = 4;
+// the width of the borders including white space
+static const int BORDERPAD = 8;
+// these 2 values are arbitrary:
+static const int THUMB = 24;
+static const int TICK = 8;
 
+
 // ----------------------------------------------------------------------------
 // XTI
 // ----------------------------------------------------------------------------
@@ -90,7 +97,6 @@
     wxFLAGS_MEMBER(wxSL_HORIZONTAL)
     wxFLAGS_MEMBER(wxSL_VERTICAL)
     wxFLAGS_MEMBER(wxSL_AUTOTICKS)
-    wxFLAGS_MEMBER(wxSL_LABELS)
     wxFLAGS_MEMBER(wxSL_LEFT)
     wxFLAGS_MEMBER(wxSL_TOP)
     wxFLAGS_MEMBER(wxSL_RIGHT)
@@ -98,6 +104,9 @@
     wxFLAGS_MEMBER(wxSL_BOTH)
     wxFLAGS_MEMBER(wxSL_SELRANGE)
     wxFLAGS_MEMBER(wxSL_INVERSE)
+    wxFLAGS_MEMBER(wxSL_MIN_MAX_LABELS)
+    wxFLAGS_MEMBER(wxSL_VALUE_LABEL)
+    wxFLAGS_MEMBER(wxSL_LABELS)
 
 wxEND_FLAGS( wxSliderStyle )
 
@@ -145,18 +154,23 @@
     m_isDragging = false;
 }
 
-bool
-wxSlider::Create(wxWindow *parent,
-                 wxWindowID id,
-                 int value,
-                 int minValue,
-                 int maxValue,
-                 const wxPoint& pos,
-                 const wxSize& size,
-                 long style,
-                 const wxValidator& validator,
-                 const wxString& name)
+bool wxSlider::Create(wxWindow *parent,
+                      wxWindowID id,
+                      int value,
+                      int minValue,
+                      int maxValue,
+                      const wxPoint& pos,
+                      const wxSize& size,
+                      long style,
+                      const wxValidator& validator,
+                      const wxString& name)
 {
+    if ( minValue >= maxValue )
+    {
+        wxASSERT_MSG( !(minValue >= maxValue),
+            wxT("Slider minimum cannot be greater than or equal to maximum.") );
+        return false;
+    }
     // our styles are redundant: wxSL_LEFT/RIGHT imply wxSL_VERTICAL and
     // wxSL_TOP/BOTTOM imply wxSL_HORIZONTAL, but for backwards compatibility
     // reasons we can't really change it, instead try to infer the orientation
@@ -173,7 +187,7 @@
             style |= wxSL_HORIZONTAL;
             break;
 
-        case 0:
+        default: //case 0:
             // no specific direction, do we have at least the orientation?
             if ( !(style & (wxSL_HORIZONTAL | wxSL_VERTICAL)) )
             {
@@ -208,23 +222,18 @@
         HWND hwndParent = GetHwndOf(parent);
         for ( size_t n = 0; n < SliderLabel_Last; n++ )
         {
-            wxWindowIDRef lblid = NewControlId();
-
-            HWND wnd = ::CreateWindow
-                         (
-                            wxT("STATIC"),
-                            NULL,
-                            WS_CHILD | WS_VISIBLE | SS_CENTER,
-                            0, 0, 0, 0,
-                            hwndParent,
-                            (HMENU)wxUIntToPtr(lblid.GetValue()),
-                            wxGetInstance(),
-                            NULL
-                         );
-
-            m_labels->Set(n, wnd, lblid);
+            (*m_labels)[n] = ::CreateWindow
+                               (
+                                    wxT("STATIC"),
+                                    NULL,
+                                    WS_CHILD | WS_VISIBLE | SS_CENTER,
+                                    0, 0, 0, 0,
+                                    hwndParent,
+                                    (HMENU)NewControlId(),
+                                    wxGetInstance(),
+                                    NULL
+                               );
         }
-
         m_labels->SetFont(GetFont());
     }
 
@@ -425,25 +434,53 @@
         *y = rect.y;
 }
 
-int wxSlider::GetLabelsSize(int *width) const
+int wxSlider::GetLabelsSize(int *widest, wxSize *bothWidths) const
 {
-    int cy;
-
-    if ( width )
+    int labelHeight = 0;
+    if ( !HasFlag(wxSL_MIN_MAX_LABELS) && !HasFlag(wxSL_VALUE_LABEL) )
     {
-        // find the max label width
-        int wLabelMin, wLabelMax;
-        GetTextExtent(Format(m_rangeMin), &wLabelMin, &cy);
-        GetTextExtent(Format(m_rangeMax), &wLabelMax, &cy);
-
-        *width = wxMax(wLabelMin, wLabelMax);
+        if ( widest ) *widest = 0;
+        if ( bothWidths )
+        {
+           bothWidths->x = 0;
+           bothWidths->y = 0;
+        }
+        return 0;
     }
-    else
+    labelHeight = GetCharHeight();
+    if ( widest )
     {
-        cy = GetCharHeight();
+        if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+        {
+            // find the max label width
+            int labelWidthMin, labelWidthMax;
+            GetTextExtent(Format(m_rangeMin), &labelWidthMin, &labelHeight);
+            GetTextExtent(Format(m_rangeMax), &labelWidthMax, &labelHeight);
+            // these GetTextExtent calls are going to return values which
+            // include the potential character "descenders" which digits
+            // in English and most if not all other languages will not have
+            // in large font sizes this will cause horizontal centering
+            // to be off by one half the value of descender
+            *widest = wxMax(labelWidthMin, labelWidthMax);
+            if ( bothWidths )
+            {
+               bothWidths->x = labelWidthMin;
+               bothWidths->y = labelWidthMax;
+            }
+        }
+        else
+            *widest = 0;
     }
+    //return EDIT_HEIGHT_FROM_CHAR_HEIGHT(labelHeight);
+    // the above call returns some very large value
+    return labelHeight;
+}
 
-    return EDIT_HEIGHT_FROM_CHAR_HEIGHT(cy);
+void swap(int& first, int& second)
+{
+    int temp = first;
+    first = second;
+    second = temp;
 }
 
 void wxSlider::DoMoveWindow(int x, int y, int width, int height)
@@ -455,72 +492,184 @@
         wxSliderBase::DoMoveWindow(x, y, width, height);
         return;
     }
+    int maxLabelWidth;
+    wxSize bothWidths;
+    int labelHeight = GetLabelsSize(&maxLabelWidth, &bothWidths);
+    m_minLabelWidth = bothWidths.x;
+    m_maxLabelWidth = bothWidths.y;
+    int labelOffset =  0;
+    int tickOffset = 0;
+    if ( HasFlag(wxSL_TICKS))
+       tickOffset = TICK;
+    if ( HasFlag(wxSL_BOTH))
+       tickOffset *= 2;
 
     // be careful to position the slider itself after moving the labels as
     // otherwise our GetBoundingBox(), which is called from WM_SIZE handler,
     // would return a wrong result and wrong size would be cached internally
     if ( HasFlag(wxSL_VERTICAL) )
     {
-        int wLabel;
-        int hLabel = GetLabelsSize(&wLabel);
-
-        int xLabel = HasFlag(wxSL_LEFT) ? x + width - wLabel : x;
-
-        // position all labels: min at the top, value in the middle and max at
-        // the bottom
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
-                     xLabel, y, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
-                     xLabel, y + (height - hLabel)/2, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
-                      xLabel, y + height - hLabel, wLabel, hLabel);
-
+        int holdTopWidth;
+        int holdTopX;
+        int holdBottomWidth;
+        int holdBottomX;
+        int xLabel = (wxMax((THUMB + (BORDERPAD * 2)), maxLabelWidth) / 2) -
+            (maxLabelWidth / 2) + x;
+        if ( HasFlag(wxSL_RIGHT) )
+        {
+            if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+            {
+                holdTopX = xLabel;
+                holdTopWidth = m_minLabelWidth;
+                holdBottomX = xLabel - ((m_maxLabelWidth - m_minLabelWidth) / 2);
+                holdBottomWidth = m_maxLabelWidth;
+                if ( HasFlag(wxSL_INVERSE) )
+                {
+                    swap(holdTopWidth, holdBottomWidth);
+                    swap (holdTopX, holdBottomX);
+                }
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
+                    holdTopX,
+                    y,
+                    holdTopWidth, labelHeight);
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
+                    holdBottomX,
+                    y + height - labelHeight,
+                    holdBottomWidth, labelHeight);
+            }
+            if ( HasFlag(wxSL_VALUE_LABEL) )
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
+                    x + THUMB + tickOffset + HGAP,
+                    y + (height - labelHeight)/2,
+                    maxLabelWidth, labelHeight);
+        }
+        else
+        {// wxSL_LEFT
+            if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+            {
+                holdTopX = xLabel + maxLabelWidth + ((m_maxLabelWidth - m_minLabelWidth) / 2);
+                holdTopWidth = m_minLabelWidth;
+                holdBottomX = xLabel + maxLabelWidth;
+                holdBottomWidth = m_maxLabelWidth;
+                if ( HasFlag(wxSL_INVERSE) )
+                {
+                    swap(holdTopWidth, holdBottomWidth);
+                    swap (holdTopX, holdBottomX);
+                }
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
+                    holdTopX,
+                    y,
+                    holdTopWidth, labelHeight);
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
+                    holdBottomX,
+                    y + height - labelHeight,
+                    holdBottomWidth, labelHeight);
+            }
+            if ( HasFlag(wxSL_VALUE_LABEL) )
+                labelOffset = maxLabelWidth + HGAP;
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
+                x,
+                y + (height - labelHeight)/2,
+                maxLabelWidth, labelHeight);
+        }
         // position the slider itself along the left/right edge
-        wxSliderBase::DoMoveWindow(HasFlag(wxSL_LEFT) ? x : x + wLabel + HGAP,
-                                   y + hLabel/2,
-                                   width - wLabel - HGAP,
-                                   height - hLabel);
+        wxSliderBase::DoMoveWindow(
+            x + labelOffset,
+            y + labelHeight,
+            THUMB + tickOffset + HGAP,
+            height - (labelHeight * 2));
     }
     else // horizontal
     {
-        int wLabel;
-        int hLabel = GetLabelsSize(&wLabel);
-
-        int yLabel = HasFlag(wxSL_TOP) ? y + height - hLabel : y;
-
-        // position all labels: min on the left, value in the middle and max to
-        // the right
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
-                      x, yLabel, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
-                      x + (width - wLabel)/2, yLabel, wLabel, hLabel);
-
-        DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
-                      x + width - wLabel, yLabel, wLabel, hLabel);
-
+        int holdLeftWidth;
+        int holdLeftX;
+        int holdRightWidth;
+        int holdRightX;
+        int yLabelMinMax =
+            (y + ((THUMB + tickOffset) / 2)) - (labelHeight / 2);
+        int xLabelValue =
+            x + m_minLabelWidth +
+            ((width  - (m_minLabelWidth + m_maxLabelWidth)) / 2) -
+            (m_maxLabelWidth / 2);
+        if (HasFlag(wxSL_TOP))
+        {//label below, value & ticks above
+            if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+            {
+                holdLeftX = x;
+                holdLeftWidth = m_minLabelWidth;
+                holdRightX = x + width - m_maxLabelWidth;
+                holdRightWidth = m_maxLabelWidth;
+                if ( HasFlag(wxSL_INVERSE) )
+                {
+                    swap(holdLeftWidth, holdRightWidth);
+                    swap (holdLeftX, holdRightX);
+                }
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
+                    holdLeftX,
+                    yLabelMinMax,
+                    holdLeftWidth, labelHeight);
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
+                    holdRightX,
+                    yLabelMinMax,
+                    holdRightWidth, labelHeight);
+            }
+            if ( HasFlag(wxSL_VALUE_LABEL) )
+            {
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
+                    xLabelValue,
+                    y - labelHeight,
+                    maxLabelWidth, labelHeight);
+            }
+        }
+        else
+        {// wxSL_BOTTOM
+            if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+            {
+                holdLeftX = x;
+                holdLeftWidth = m_minLabelWidth;
+                holdRightX = x + width - m_maxLabelWidth;
+                holdRightWidth = m_maxLabelWidth;
+                if ( HasFlag(wxSL_INVERSE) )
+                {
+                    swap(holdLeftWidth, holdRightWidth);
+                    swap (holdLeftX, holdRightX);
+                }
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Min],
+                    holdLeftX,
+                    yLabelMinMax,
+                    holdLeftWidth, labelHeight);
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Max],
+                    holdRightX,
+                    yLabelMinMax,
+                    holdRightWidth, labelHeight);
+            }
+            if ( HasFlag(wxSL_VALUE_LABEL) )
+                DoMoveSibling((HWND)(*m_labels)[SliderLabel_Value],
+                    xLabelValue,
+                    y + THUMB + tickOffset,
+                    maxLabelWidth, labelHeight);
+        }
         // position the slider itself along the top/bottom edge
-        wxSliderBase::DoMoveWindow(x,
-                                   HasFlag(wxSL_TOP) ? y : y + hLabel,
-                                   width,
-                                   height - hLabel);
+        if ( HasFlag(wxSL_MIN_MAX_LABELS) || HasFlag(wxSL_VALUE_LABEL) )
+            labelOffset = labelHeight;
+        wxSliderBase::DoMoveWindow(
+            x + m_minLabelWidth + VGAP,
+            y,
+            width  - (m_minLabelWidth + m_maxLabelWidth  + (VGAP*2)),
+            THUMB + tickOffset);
     }
 }
 
 wxSize wxSlider::DoGetBestSize() const
 {
-    // these values are arbitrary
+    // this value is arbitrary:
     static const int length = 100;
-    static const int thumb = 24;
-    static const int ticks = 8;
 
     int *width;
     wxSize size;
     if ( HasFlag(wxSL_VERTICAL) )
     {
-        size.x = thumb;
+        size.x = THUMB;
         size.y = length;
         width = &size.x;
 
@@ -539,26 +688,26 @@
     else // horizontal
     {
         size.x = length;
-        size.y = thumb;
+        size.y = THUMB;
         width = &size.y;
 
         if ( m_labels )
         {
             // labels add extra height
-            size.y += GetLabelsSize();
+            int labelSize = GetLabelsSize();
+            if (HasFlag(wxSL_MIN_MAX_LABELS))size.y += labelSize;
+            if (HasFlag(wxSL_VALUE_LABEL))size.y += (labelSize*2.75);
         }
     }
 
     // need extra space to show ticks
     if ( HasFlag(wxSL_TICKS) )
     {
-        *width += ticks;
-
+        *width += TICK;
         // and maybe twice as much if we show them on both sides
         if ( HasFlag(wxSL_BOTH) )
-            *width += ticks;
+            *width += TICK;
     }
-
     return size;
 }
 
@@ -575,7 +724,7 @@
 {
     ::SendMessage(GetHwnd(), TBM_SETPOS, (WPARAM)TRUE, (LPARAM)ValueInvertOrNot(value));
 
-    if ( HasFlag(wxSL_VALUE_LABEL) )
+    if ( m_labels )
     {
         ::SetWindowText((*m_labels)[SliderLabel_Value], Format(value).wx_str());
     }
@@ -589,7 +738,7 @@
     ::SendMessage(GetHwnd(), TBM_SETRANGEMIN, TRUE, m_rangeMin);
     ::SendMessage(GetHwnd(), TBM_SETRANGEMAX, TRUE, m_rangeMax);
 
-    if ( HasFlag(wxSL_MIN_MAX_LABELS) )
+    if ( m_labels )
     {
         ::SetWindowText((*m_labels)[SliderLabel_Min],
                         Format(ValueInvertOrNot(m_rangeMin)).wx_str());
Index: include/wx/msw/slider.h
===================================================================
--- include/wx/msw/slider.h	(revision 62804)
+++ include/wx/msw/slider.h	(working copy)
@@ -124,6 +124,8 @@
     int           m_pageSize;
     int           m_lineSize;
     int           m_tickFreq;
+    int           m_minLabelWidth;
+    int           m_maxLabelWidth;
 
     // flag needed to detect whether we're getting THUMBRELEASE event because
     // of dragging the thumb or scrolling the mouse wheel

From f33628ad073d3b2e77d54c5e36e7c86e20df1aaa Mon Sep 17 00:00:00 2001
From: Carsten Fuchs <carsten.fuchs@cafu.de>
Date: Fri, 15 Aug 2014 00:08:21 +0200
Subject: [PATCH 4/8] Re-implement the wxDataViewTreeNode::HasChildren() method
 to find the answer dynamically.

This allows us to get rid of wxDataViewTreeNode::SetHasChildren(), which
allocated or deleted the m_branchData member as a side effect, whose allocation
status in turn was used by HasChildren() to derive its result. This unfortunate
collation of things means that this commit must be used together with the next,
which addresses the m_branchData member.
---
 src/generic/datavgen.cpp | 40 +++++++---------------------------------
 1 file changed, 7 insertions(+), 33 deletions(-)

diff --git a/src/generic/datavgen.cpp b/src/generic/datavgen.cpp
index a390e64..ea5937b 100644
--- a/src/generic/datavgen.cpp
+++ b/src/generic/datavgen.cpp
@@ -428,8 +428,6 @@ public:
 
         model->GetChildren(m_item, itemChildren);
 
-        SetHasChildren(itemChildren.size() > 0);
-
         if (itemChildren.size() == 0)
         {
             if (m_branchData)
@@ -538,28 +536,15 @@ public:
         m_branchData->open = !m_branchData->open;
     }
 
-    // "HasChildren" property corresponds to model's IsContainer(). Note that it may be true
-    // even if GetChildNodes() is empty; see below.
+    // "HasChildren" property corresponds to model's IsContainer().
     bool HasChildren() const
     {
-        return m_branchData != NULL;
-    }
-
-    void SetHasChildren(bool has)
-    {
-        // The invisible root item always has children, so ignore any attempts
-        // to change this.
-        if ( !m_parent )
-            return;
+        // The invisible root item always has children, so ignore return true in this case.
+        // (TODO: Is this special-case really still necessary?)
+        if (!m_parent)
+            return true;
 
-        if ( !has )
-        {
-            wxDELETE(m_branchData);
-        }
-        else if ( m_branchData == NULL )
-        {
-            m_branchData = new BranchNodeData;
-        }
+        return m_branchData && m_branchData->children.size() > 0;
     }
 
     // Total count of expanded (i.e. visible with the help of some
@@ -2334,9 +2319,6 @@ bool wxDataViewMainWindow::ItemAdded(const wxDataViewItem & parent, const wxData
         wxCHECK_MSG( posInModel != wxNOT_FOUND, false, "adding non-existent item?" );
 
         wxDataViewTreeNode *itemNode = new wxDataViewTreeNode(parentNode, item);
-        itemNode->SetHasChildren(GetModel()->IsContainer(item));
-
-        parentNode->SetHasChildren(true);
 
         const wxDataViewTreeNodes& nodeSiblings = parentNode->GetChildNodes();
         const int nodeSiblingsSize = nodeSiblings.size();
@@ -2452,11 +2434,6 @@ bool wxDataViewMainWindow::ItemDeleted(const wxDataViewItem& parent,
         // node corresponding to 'item' and so there's nothing left to do.
         if ( !itemNode )
         {
-            // If this was the last child to be removed, it's possible the parent
-            // node became a leaf. Let's ask the model about it.
-            if ( parentNode->GetChildNodes().empty() )
-                parentNode->SetHasChildren(GetModel()->IsContainer(parent));
-
             return true;
         }
 
@@ -2474,7 +2451,7 @@ bool wxDataViewMainWindow::ItemDeleted(const wxDataViewItem& parent,
         if ( parentNode->GetChildNodes().empty() )
         {
             bool isContainer = GetModel()->IsContainer(parent);
-            parentNode->SetHasChildren(isContainer);
+
             if ( isContainer )
             {
                 // If it's still a container, make sure we show "+" icon for it
@@ -3568,9 +3545,6 @@ static void BuildTreeHelper( const wxDataViewModel * model,  const wxDataViewIte
     {
         wxDataViewTreeNode *n = new wxDataViewTreeNode(node, children[index]);
 
-        if( model->IsContainer(children[index]) )
-            n->SetHasChildren( true );
-
         node->InsertChild(n, index);
     }
 
-- 
1.8.4.msysgit.0


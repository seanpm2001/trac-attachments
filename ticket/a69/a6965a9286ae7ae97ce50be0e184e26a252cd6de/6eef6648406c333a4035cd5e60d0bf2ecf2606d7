? build
? confdefs.h
? patch.txt
Index: include/wx/mac/bitmap.h
===================================================================
RCS file: /cvsroot/wxwindows/wxWindows/include/wx/mac/bitmap.h,v
retrieving revision 1.3
diff -r1.3 bitmap.h
31,35c31,36
< GWorldPtr 	wxMacCreateGWorld( int height , int widtdh , int depth ) ;
< void 				wxMacDestroyGWorld( GWorldPtr gw ) ;
< PicHandle 	wxMacCreatePict( GWorldPtr gw , GWorldPtr mask = NULL ) ;
< void 				wxMacSetColorTableEntry( CTabHandle newColors , int index , int red , int green ,  int blue ) ;
< CTabHandle 	wxMacCreateColorTable( int numColors ) ;
---
> GWorldPtr  wxMacCreateGWorld( int height , int widtdh , int depth ) ;
> void       wxMacDestroyGWorld( GWorldPtr gw ) ;
> PicHandle  wxMacCreatePict( GWorldPtr gw , GWorldPtr mask = NULL ) ;
> void       wxMacSetColorTableEntry(CTabHandle newColors, int index,
>                                    int red , int green ,  int blue ) ;
> CTabHandle wxMacCreateColorTable( int numColors ) ;
65a67
>   bool PointMasked(int x, int y);
70c72
< enum { kMacBitmapTypeUnknownType , kMacBitmapTypeGrafWorld, kMacBitmapTypePict } ;
---
> enum { kMacBitmapTypeUnknownType , kMacBitmapTypeGrafWorld, kMacBitmapTypePict};
90,93c92,95
< 	int						m_bitmapType ;
< 	PicHandle			m_hPict ;
< 	WXHBITMAP     m_hBitmap;
<   wxMask *      m_bitmapMask; // Optional mask
---
> 	int			m_bitmapType ;
> 	PicHandle	m_hPict ;
> 	WXHBITMAP   m_hBitmap;
>     wxMask *    m_bitmapMask; // Optional mask
102a105,107
> #ifdef __WXMAC_X__
>   virtual ~wxBitmapHandler() {}  // Added min for Mac X
> #endif
140a146
>   wxBitmap(char **data);
151a158,160
>    // get the given part of bitmap
>    wxBitmap GetSubBitmap( const wxRect& rect ) const;
> 
157,161c166,171
<   inline bool Ok() const { return (M_BITMAPDATA && M_BITMAPDATA->m_ok); }
<   inline int GetWidth() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_width : 0); }
<   inline int GetHeight() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_height : 0); }
<   inline int GetDepth() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_depth : 0); }
<   inline int GetQuality() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_quality : 0); }
---
>   bool Ok() const;
>   int GetWidth() const;
>   int GetHeight() const;
>   int GetDepth() const;
>   int GetQuality() const;
> 
168c178
<   inline wxPalette* GetPalette() const { return (M_BITMAPDATA ? (& M_BITMAPDATA->m_bitmapPalette) : (wxPalette*) NULL); }
---
>   wxPalette *GetPalette() const;
171c181
<   inline wxMask *GetMask() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_bitmapMask : (wxMask*) NULL); }
---
>   wxMask *GetMask() const;
174,176c184,189
<   inline wxBitmap& operator = (const wxBitmap& bitmap) { if (*this == bitmap) return (*this); Ref(bitmap); return *this; }
<   inline bool operator == (const wxBitmap& bitmap) { return m_refData == bitmap.m_refData; }
<   inline bool operator != (const wxBitmap& bitmap) { return m_refData != bitmap.m_refData; }
---
>   inline wxBitmap& operator = (const wxBitmap& bitmap)
>     { if (*this == bitmap) return (*this); Ref(bitmap); return *this; }
>   inline bool operator == (const wxBitmap& bitmap)
>     { return m_refData == bitmap.m_refData; }
>   inline bool operator != (const wxBitmap& bitmap)
>     { return m_refData != bitmap.m_refData; }
193a207
>   int GetBitmapType() const;
195c209,212
<   inline WXHBITMAP GetHBITMAP() const { return (M_BITMAPDATA ? M_BITMAPDATA->m_hBitmap : 0); }
---
>   WXHBITMAP GetHBITMAP() const;
> 
>   PicHandle GetPict() const;
> 
197a215
> 
Index: src/common/image.cpp
===================================================================
RCS file: /cvsroot/wxwindows/wxWindows/src/common/image.cpp,v
retrieving revision 1.114
diff -r1.114 image.cpp
1400a1401
> #ifndef __WXMAC_X__
1401a1403,1405
> #else
> #include <QD/PictUtils.h>
> #endif
1403,1407d1406
< extern CTabHandle wxMacCreateColorTable( int numColors ) ;
< extern void wxMacDestroyColorTable( CTabHandle colors ) ;
< extern void wxMacSetColorTableEntry( CTabHandle newColors , int index , int red , int green ,  int blue ) ;
< extern GWorldPtr wxMacCreateGWorld( int height , int width , int depth ) ;
< extern void wxMacDestroyGWorld( GWorldPtr gw ) ;
1410a1410,1413
>     wxBitmap bitmap;
> 
>     wxCHECK_MSG( Ok(), bitmap, wxT("invalid image") );
> 
1416,1439c1419,1420
< 
<     wxBitmap bitmap( width , height , wxDisplayDepth() ) ;
< 
<     // Create mask
< 
<     if (HasMask())
<     {
<             /*
<         unsigned char *mask_data = (unsigned char*)malloc( ((width >> 3)+8) * height );
< 
<         mask_image =  gdk_image_new_bitmap( gdk_visual_get_system(), mask_data, width, height );
< 
<         wxMask *mask = new wxMask();
<         mask->m_bitmap = gdk_pixmap_new( (GdkWindow*)&gdk_root_parent, width, height, 1 );
< 
<         bitmap.SetMask( mask );
<        */
<     }
< 
<     // Render
< 
<     int r_mask = GetMaskRed();
<     int g_mask = GetMaskGreen();
<     int b_mask = GetMaskBlue();
---
>     bitmap.Create( width , height , wxDisplayDepth() ) ;
>     wxBitmap maskBitmap( width, height, 1);
1446a1428,1430
>     LockPixels( GetGWorldPixMap(bitmap.GetHBITMAP()) );
>     LockPixels( GetGWorldPixMap(maskBitmap.GetHBITMAP()) );
> 
1448a1433,1438
>     // Render image
>     wxColour rgb, maskcolor(GetMaskRed(), GetMaskGreen(), GetMaskBlue());
>     RGBColor color;
>     RGBColor white = { 0xffff, 0xffff, 0xffff };
>     RGBColor black = { 0     , 0     , 0      };
> 
1454,1460c1444,1445
<             unsigned char r = data[index++];
<             unsigned char g = data[index++];
<             unsigned char b = data[index++];
<             RGBColor color ;
<             color.red = ( r  << 8 ) + r ;
<             color.green = ( g << 8 ) + g ;
<             color.blue = ( b << 8 ) + b ;
---
>             rgb.Set(data[index++], data[index++], data[index++]);
>             color = rgb.GetPixel();
1461a1447,1457
>             if(HasMask())
>             {
>                 SetGWorld(maskBitmap.GetHBITMAP(), NULL);
>                 if(rgb == maskcolor) {
>                     SetCPixel(x,y, &white);
>                 }
>                 else {
>                     SetCPixel(x,y, &black);
>                 }
>                 SetGWorld(bitmap.GetHBITMAP(), NULL);
>             }
1465,1470c1461,1463
<            SetGWorld( origPort , origDevice ) ;
< 
<     if ( HasMask() )
<     {
<         wxColour colour( GetMaskRed(), GetMaskGreen(), GetMaskBlue());
<         wxMask *mask = new wxMask( bitmap, colour );
---
>     // Create mask
>     if ( HasMask() ) {
>         wxMask *mask = new wxMask( maskBitmap );
1473d1465
<     return bitmap;
1474a1467,1471
>     UnlockPixels( GetGWorldPixMap(bitmap.GetHBITMAP()) );
>     UnlockPixels( GetGWorldPixMap(maskBitmap.GetHBITMAP()) );
>     SetGWorld( origPort, origDevice );
> 
>     return bitmap;
1480,1484c1477
<     if( !bitmap.Ok() )
<     {
<         wxFAIL_MSG( "invalid bitmap" );
<         return;
<     }
---
>     wxCHECK_RET( bitmap.Ok(), wxT("Invalid bitmap") );
1490,1507d1482
<     /*
<     unsigned char *data = GetData();
<     if( !data )
<     {
<         wxFAIL_MSG( "could not allocate data for image" );
<         return;
<     }
< 
<     // calc the number of bytes per scanline and padding in the DIB
<     int bytePerLine = width*3;
<     int sizeDWORD = sizeof( DWORD );
<     div_t lineBoundary = div( bytePerLine, sizeDWORD );
<     int padding = 0;
<     if( lineBoundary.rem > 0 )
<     {
<         padding = sizeDWORD - lineBoundary.rem;
<         bytePerLine += padding;
<     }
1509,1540c1484
<     // create a DIB header
<     int headersize = sizeof(BITMAPINFOHEADER);
<     LPBITMAPINFO lpDIBh = (BITMAPINFO *) malloc( headersize );
<     if( !lpDIBh )
<     {
<         wxFAIL_MSG( "could not allocate data for DIB header" );
<         free( data );
<         return;
<     }
<     // Fill in the DIB header
<     lpDIBh->bmiHeader.biSize = headersize;
<     lpDIBh->bmiHeader.biWidth = width;
<     lpDIBh->bmiHeader.biHeight = -height;
<     lpDIBh->bmiHeader.biSizeImage = bytePerLine * height;
<     lpDIBh->bmiHeader.biPlanes = 1;
<     lpDIBh->bmiHeader.biBitCount = 24;
<     lpDIBh->bmiHeader.biCompression = BI_RGB;
<     lpDIBh->bmiHeader.biClrUsed = 0;
<     // These seem not really needed for our purpose here.
<     lpDIBh->bmiHeader.biClrImportant = 0;
<     lpDIBh->bmiHeader.biXPelsPerMeter = 0;
<     lpDIBh->bmiHeader.biYPelsPerMeter = 0;
<     // memory for DIB data
<     unsigned char *lpBits;
<     lpBits = (unsigned char *) malloc( lpDIBh->bmiHeader.biSizeImage );
<     if( !lpBits )
<     {
<         wxFAIL_MSG( "could not allocate data for DIB" );
<         free( data );
<         free( lpDIBh );
<         return;
<     }
---
>     unsigned char *data = GetData();
1542,1562c1486
<     // copy data from the device-dependent bitmap to the DIB
<     HDC hdc = ::GetDC(NULL);
<     HBITMAP hbitmap;
<     hbitmap = (HBITMAP) bitmap.GetHBITMAP();
<     ::GetDIBits( hdc, hbitmap, 0, height, lpBits, lpDIBh, DIB_RGB_COLORS );
< 
<     // copy DIB data into the wxImage object
<     int i, j;
<     unsigned char *ptdata = data;
<     unsigned char *ptbits = lpBits;
<     for( i=0; i<height; i++ )
<     {
<         for( j=0; j<width; j++ )
<         {
<             *(ptdata++) = *(ptbits+2);
<             *(ptdata++) = *(ptbits+1);
<             *(ptdata++) = *(ptbits  );
<             ptbits += 3;
<         }
<         ptbits += padding;
<     }
---
>     wxCHECK_RET( data, wxT("Could not allocate data for image") );
1564,1565c1488,1503
<     // similarly, set data according to the possible mask bitmap
<     if( bitmap.GetMask() && bitmap.GetMask()->GetMaskBitmap() )
---
>     WXHBITMAP origPort;
>     GDHandle  origDevice;
>     int      index;
>     RGBColor color;
>     // background color set to RGB(16,16,16) in consistent with wxGTK
>     unsigned char mask_r=16, mask_g=16, mask_b=16;
>     SInt16   r,g,b;
>     wxMask  *mask = bitmap.GetMask();
> 
>     GetGWorld( &origPort, &origDevice );
>     LockPixels(GetGWorldPixMap(bitmap.GetHBITMAP()));
>     SetGWorld( bitmap.GetHBITMAP(), NULL);
> 
>     // Copy data into image
>     index = 0;
>     for(int yy = 0; yy < height; yy++)
1567,1578c1505
<         hbitmap = (HBITMAP) bitmap.GetMask()->GetMaskBitmap();
<         // memory DC created, color set, data copied, and memory DC deleted
<         HDC memdc = ::CreateCompatibleDC( hdc );
<         ::SetTextColor( memdc, RGB( 0, 0, 0 ) );
<         ::SetBkColor( memdc, RGB( 255, 255, 255 ) );
<         ::GetDIBits( memdc, hbitmap, 0, height, lpBits, lpDIBh, DIB_RGB_COLORS );
<         ::DeleteDC( memdc );
<         // background color set to RGB(16,16,16) in consistent with wxGTK
<         unsigned char r=16, g=16, b=16;
<         ptdata = data;
<         ptbits = lpBits;
<         for( i=0; i<height; i++ )
---
>         for(int xx = 0; xx < width; xx++)
1580c1507,1514
<             for( j=0; j<width; j++ )
---
>             GetCPixel(xx,yy, &color);
>             r = ((color.red ) >> 8);
>             g = ((color.green ) >> 8);
>             b = ((color.blue ) >> 8);
>             data[index    ] = r;
>             data[index + 1] = g;
>             data[index + 2] = b;
>             if(mask)
1582,1588c1516,1519
<                 if( *ptbits != 0 )
<                     ptdata += 3;
<                 else
<                 {
<                     *(ptdata++)  = r;
<                     *(ptdata++)  = g;
<                     *(ptdata++)  = b;
---
>                 if(mask->PointMasked(xx,yy)) {
>                     data[index    ] = mask_r;
>                     data[index + 1] = mask_g;
>                     data[index + 2] = mask_b;
1590d1520
<                 ptbits += 3;
1592c1522
<             ptbits += padding;
---
>             index += 3;
1594,1595d1523
<         SetMaskColour( r, g, b );
<         SetMask( TRUE );
1597,1599c1525,1527
<     else
<     {
<         SetMask( FALSE );
---
>     if(mask) {
>         SetMaskColour( mask_r, mask_g, mask_b );
>         SetMask( true );
1601,1605c1529,1532
<     // free allocated resources
<     ::ReleaseDC(NULL, hdc);
<     free(lpDIBh);
<     free(lpBits);
<     */
---
> 
>     // Free resources
>     UnlockPixels(GetGWorldPixMap(bitmap.GetHBITMAP()));
>     SetGWorld(origPort, origDevice);
Index: src/mac/bitmap.cpp
===================================================================
RCS file: /cvsroot/wxwindows/wxWindows/src/mac/bitmap.cpp,v
retrieving revision 1.6
diff -r1.6 bitmap.cpp
15a16
> #include "wx/wx.h"
24a26
> #ifndef __WXMAC_X__
25a28,30
> #else
>    #include "xpm/xpm.h"
> #endif
32a38
> #ifndef __WXMAC_X__
33a40,43
> #else
> #include <QD/PictUtils.h>
> #endif
> 
38c48
< 	short index; /* Index into the table of colors */
---
> 
66c76
< GWorldPtr wxMacCreateGWorld( int height , int width , int depth )
---
> GWorldPtr wxMacCreateGWorld( int width , int height , int depth )
70c80
< 	Rect rect = { 0 , 0 , width , height } ;
---
> 	Rect rect = { 0 , 0 , height, width } ;
90a101,191
> PicHandle wxMacCreatePict(GWorldPtr wp, GWorldPtr mask)
> {
>    CGrafPtr    origPort ;
>    GDHandle    origDev ;
> 
>    PicHandle      pict;          // this is the Picture we give back
> 
>    RGBColor    gray = { 0xCCCC ,0xCCCC , 0xCCCC } ;
>    RGBColor    white = { 0xffff ,0xffff , 0xffff } ;
>    RGBColor    black = { 0x0000 ,0x0000 , 0x0000 } ;
> 
>    unsigned char *maskimage = NULL ;
>    Rect portRect ;
>    GetPortBounds( wp , &portRect ) ;
>    int width = portRect.right - portRect.left ;
>    int height = portRect.bottom - portRect.top ;
> 
>    LockPixels( GetGWorldPixMap( wp ) ) ;
>    GetGWorld( &origPort , &origDev ) ;
> 
>    if ( mask )
>    {
>       maskimage = (unsigned char*) malloc( width * height ) ;
>       SetGWorld( mask , NULL ) ;
>       LockPixels( GetGWorldPixMap( mask ) ) ;
>       for ( int y = 0 ; y < height ; y++ )
>       {
>          for( int x = 0 ; x < width ; x++ )
>          {
>             RGBColor col ;
> 
>             GetCPixel( x + portRect.left , y + portRect.top , &col ) ;
>             maskimage[y*width + x] = ( col.red == 0 ) ; // for monochrome masks
>          }
>       }
>       UnlockPixels( GetGWorldPixMap( mask ) ) ;
>    }
> 
>    SetGWorld( wp , NULL ) ;
> 
>    pict = OpenPicture(&portRect);   // open a picture, this disables drawing
>    if(!pict)
>       return NULL;
> 
>    if ( maskimage )
>    {
>       RGBForeColor( &black ) ;
>       RGBBackColor( &white ) ;
>       PenMode(transparent);
> 
>       for ( int y = 0 ; y < height ; ++y )
>       {
>          for( int x = 0 ; x < width ; ++x )
>          {
>             if ( maskimage[y*width + x] )
>             {
>                RGBColor col ;
> 
>                GetCPixel( x + portRect.left , y + portRect.top , &col ) ;
>                SetCPixel( x + portRect.left , y + portRect.top , &col ) ;
>             }
>             else {
>                 // With transparency set this sets a blank pixel not a white one
>                 SetCPixel( x + portRect.left , y + portRect.top , &white);
>             }
>          }
>       }
>       free( maskimage ) ;
>       maskimage = NULL ;
>    }
>    else
>    {
>       RGBBackColor( &gray ) ;
>       EraseRect(&portRect);
>       RGBForeColor( &black ) ;
>       RGBBackColor( &white ) ;
> 
>       CopyBits(GetPortBitMapForCopyBits(wp), /* src PixMap - we copy image over
>                                               * itself - */
>                GetPortBitMapForCopyBits(wp), //  dst PixMap - no drawing occurs
>                &portRect,    // srcRect - it will be recorded and compressed -
>                &portRect,    // dstRect - into the picture that is open -
>                srcCopy,NULL); // copyMode and no clip region
>    }
>    ClosePicture();                  // We are done recording the picture
>    UnlockPixels( GetGWorldPixMap( wp ) ) ;
>    SetGWorld( origPort , origDev ) ;
> 
>    return pict;                  // return our groovy pict handle
> }
> 
130c231
< 	} ;
---
> 	}
163,164c264,266
< 		if ( no_bits == 1 )
< 		{
---
> 
>     if ( no_bits == 1 )
>     {
167,208c269,270
< 			M_BITMAPDATA->m_ok = (M_BITMAPDATA->m_hBitmap != NULL ) ;
< 	
< 			CGrafPtr 	origPort ;
< 			GDHandle	origDevice ;
< 			
< 			GetGWorld( &origPort , &origDevice ) ;
< 			SetGWorld( M_BITMAPDATA->m_hBitmap , NULL ) ;
< 			LockPixels( GetGWorldPixMap( (CGrafPtr) M_BITMAPDATA->m_hBitmap ) ) ;
< 			
< 			// bits is a word aligned array
< 			
< 			unsigned char* linestart = (unsigned char*) bits ;
< 			int linesize = ( the_width / 16 ) * 2  ;
< 			if ( the_width % 16 )
< 			{
< 				linesize += 2 ;
< 			} ;
< 			
< 			RGBColor colors[2] = { 
< 				{ 0xFFFF , 0xFFFF , 0xFFFF } ,
< 				{ 0, 0 , 0 } 
< 				} ;
< 			
< 			for( int y = 0 ; y < the_height ; ++y , linestart += linesize )
< 			{
< 				for( int x = 0 ; x < the_width ; ++x )
< 				{
< 					int index = x / 8 ;
< 					int bit = x % 8 ;
< 					int mask = 1 << bit ;
< 					if ( linestart[index] & mask )
< 					{
< 						SetCPixel( x , y , &colors[1] ) ;
< 					}
< 					else
< 					{
< 						SetCPixel( x , y , &colors[0] ) ;
< 					}
< 				}
< 				
< 			}
< 		UnlockPixels( GetGWorldPixMap( (CGrafPtr) M_BITMAPDATA->m_hBitmap ) ) ;
---
> 
>         M_BITMAPDATA->m_ok = (M_BITMAPDATA->m_hBitmap != NULL ) ;
209a272,308
>         CGrafPtr 	origPort ;
>         GDHandle	origDevice ;
> 
>         GetGWorld( &origPort , &origDevice ) ;
>         SetGWorld( M_BITMAPDATA->m_hBitmap , NULL ) ;
>         LockPixels( GetGWorldPixMap( M_BITMAPDATA->m_hBitmap ) );
> 
>         // bits is a word aligned array?? Don't think so
>         // bits is a char array on MAC X however using the benefit of the
>         // doubt I replaced references to 16 with sizeof(unsigned char)*8
>         unsigned char* linestart = (unsigned char*) bits ;
>         int linesize = ( the_width / (sizeof(unsigned char) * 8)) ;
>         if ( the_width % (sizeof(unsigned char) * 8) ) {
>             linesize += sizeof(unsigned char);
>         }
> 
>         RGBColor colors[2] = { 
>             { 0xFFFF , 0xFFFF , 0xFFFF } ,
>             { 0, 0 , 0 } };
> 
>         for( int y = 0 ; y < the_height ; ++y , linestart += linesize )
>         {
>             for( int x = 0 ; x < the_width ; ++x )
>             {
>                 int index = x / 8 ;
>                 int bit = x % 8 ;
>                 int mask = 1 << bit ;
>                 if ( linestart[index] & mask ) {
>                     SetCPixel( x , y , &colors[1] ) ;
>                 }
>                 else {
>                     SetCPixel( x , y , &colors[0] ) ;
>                 }
>             }
>         }
> 		UnlockPixels( GetGWorldPixMap( M_BITMAPDATA->m_hBitmap ) ) ;
> 
211,215c310,314
< 	   }
< 	   else
< 	   {
< 				//multicolor BITMAPs not yet implemented
< 	   }
---
>     }
>     else
>     {
>         wxFAIL_MSG(wxT("multicolor BITMAPs not yet implemented"));
>     }
249a349,442
> wxBitmap::wxBitmap(char **data)
> {
>    Create((void *)data, wxBITMAP_TYPE_XPM_DATA, 0, 0, 0);
> }
> 
> wxBitmap wxBitmap::GetSubBitmap(const wxRect &rect) const
> {
>    wxCHECK_MSG( Ok() &&
>                 (rect.x >= 0) && (rect.y >= 0) &&
>                 (rect.x+rect.width <= GetWidth()) &&
>                 (rect.y+rect.height <= GetHeight()),
>                 wxNullBitmap, wxT("invalid bitmap or bitmap region") );
> 
>    
>    wxBitmap ret( rect.width, rect.height, GetDepth() );
>    wxASSERT_MSG( ret.Ok(), wxT("GetSubBitmap error") );
> 
>    WXHBITMAP origPort;
>    GDHandle  origDevice;
> 
>    GetGWorld( &origPort, &origDevice );
> 
>    // Update the subbitmaps reference data
>    wxBitmapRefData *ref = (wxBitmapRefData *)ret.GetRefData();
> 
>    ref->m_numColors     = M_BITMAPDATA->m_numColors;
>    ref->m_bitmapPalette = M_BITMAPDATA->m_bitmapPalette;
>    ref->m_bitmapType    = M_BITMAPDATA->m_bitmapType;
> 
>    // Copy sub region of this bitmap
>    if(M_BITMAPDATA->m_bitmapType == kMacBitmapTypePict)
>    {
>        printf("GetSubBitmap:  Copy a region of a Pict structure - TODO\n");
>    }
>    else if(M_BITMAPDATA->m_bitmapType == kMacBitmapTypeGrafWorld)
>    {
>        // Copy mask
>        if(GetMask())
>        {
>            WXHBITMAP submask, mask;
>            RGBColor  color;
> 
>            mask = GetMask()->GetMaskBitmap();
>            submask = wxMacCreateGWorld(rect.width, rect.height, 1);
>            LockPixels(GetGWorldPixMap(mask));
>            LockPixels(GetGWorldPixMap(submask));
> 
>            for(int yy = 0; yy < rect.height; yy++)
>            {
>                for(int xx = 0; xx < rect.width; xx++)
>                {
>                    SetGWorld(mask, NULL);
>                    GetCPixel(rect.x + xx, rect.y + yy, &color);
>                    SetGWorld(submask, NULL);
>                    SetCPixel(xx,yy, &color);
>                }
>            }
>            UnlockPixels(GetGWorldPixMap(mask));
>            UnlockPixels(GetGWorldPixMap(submask));
>            ref->m_bitmapMask = new wxMask;
>            ref->m_bitmapMask->SetMaskBitmap(submask);
>        }
> 
>        // Copy bitmap
>        if(GetHBITMAP())
>        {
>            WXHBITMAP subbitmap, bitmap;
>            RGBColor  color;
> 
>            bitmap = GetHBITMAP();
>            subbitmap = wxMacCreateGWorld(rect.width, rect.height, GetDepth());
>            LockPixels(GetGWorldPixMap(bitmap));
>            LockPixels(GetGWorldPixMap(subbitmap));
> 
>            for(int yy = 0; yy < rect.height; yy++)
>            {
>                for(int xx = 0; xx < rect.width; xx++)
>                {
>                    SetGWorld(bitmap, NULL);
>                    GetCPixel(rect.x + xx, rect.y + yy, &color);
>                    SetGWorld(subbitmap, NULL);
>                    SetCPixel(xx, yy, &color);
>                }
>            }
>            UnlockPixels(GetGWorldPixMap(bitmap));
>            UnlockPixels(GetGWorldPixMap(subbitmap));
>            ret.SetHBITMAP(subbitmap);
>        }
>    }
>    SetGWorld( origPort, origDevice );
> 
>    return ret;
> }
> 
265a459,465
> int wxBitmap::GetBitmapType() const
> {
>    wxCHECK_MSG( Ok(), kMacBitmapTypeUnknownType, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_bitmapType;
> }
> 
270c470
< 		M_BITMAPDATA->m_ok = (M_BITMAPDATA->m_hBitmap != NULL ) ;
---
>     M_BITMAPDATA->m_ok = (M_BITMAPDATA->m_hBitmap != NULL ) ;
319a520,559
> bool wxBitmap::Ok() const
> {
>    return (M_BITMAPDATA && M_BITMAPDATA->m_ok);
> }
> 
> int wxBitmap::GetHeight() const
> {
>    wxCHECK_MSG( Ok(), -1, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_height;
> }
> 
> int wxBitmap::GetWidth() const
> {
>    wxCHECK_MSG( Ok(), -1, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_width;
> }
> 
> int wxBitmap::GetDepth() const
> {
>    wxCHECK_MSG( Ok(), -1, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_depth;
> }
> 
> int wxBitmap::GetQuality() const
> {
>    wxCHECK_MSG( Ok(), -1, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_quality;
> }
> 
> wxMask *wxBitmap::GetMask() const
> {
>    wxCHECK_MSG( Ok(), (wxMask *) NULL, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_bitmapMask;
> }
> 
359a600,606
> wxPalette *wxBitmap::GetPalette() const
> {
>    wxCHECK_MSG( Ok(), NULL, wxT("Invalid bitmap  GetPalette()") );
> 
>    return &M_BITMAPDATA->m_bitmapPalette;
> }
> 
375a623,721
> WXHBITMAP wxBitmap::GetHBITMAP() const
> {
>    wxCHECK_MSG( Ok(), NULL, wxT("invalid bitmap") );
> 
>    return M_BITMAPDATA->m_hBitmap;
> }
> 
> PicHandle wxBitmap::GetPict() const
> {
>    wxCHECK_MSG( Ok(), NULL, wxT("invalid bitmap") );
>    
>    PicHandle picture;       // This is the returned picture
> 
>    // If bitmap already in Pict format return pointer
>    if(M_BITMAPDATA->m_bitmapType == kMacBitmapTypePict) {
>        return M_BITMAPDATA->m_hPict;
>    }
>    else if(M_BITMAPDATA->m_bitmapType != kMacBitmapTypeGrafWorld) {
>        // Invalid bitmap
>        return NULL;
>    }
> 
>    RGBColor  gray = { 0xCCCC ,0xCCCC , 0xCCCC } ;
>    RGBColor  white = { 0xffff ,0xffff , 0xffff } ;
>    RGBColor  black = { 0x0000 ,0x0000 , 0x0000 } ;
>    CGrafPtr  origPort;
>    GDHandle  origDev ;
>    wxMask   *mask;
>    Rect      portRect ;
> 
>    GetPortBounds( GetHBITMAP() , &portRect ) ;
>    int width = portRect.right - portRect.left ;
>    int height = portRect.bottom - portRect.top ;
> 
>    LockPixels( GetGWorldPixMap( GetHBITMAP() ) ) ;
>    GetGWorld( &origPort , &origDev ) ;
> 
>    mask = GetMask();
> 
>    SetGWorld( GetHBITMAP() , NULL ) ;
> 
>    picture = OpenPicture(&portRect);   // open a picture, this disables drawing
>    if(!picture) {
>        return NULL;
>    }
> 
>    if( mask )
>    {
> #ifndef __WXMAC_X__
>        RGBBackcolor( &gray );
>        EraseRect( &portrect );
>        RGBColor trans = gray;
> #else
>        RGBColor trans = white;
> #endif
>        RGBForeColor( &black ) ;
>        RGBBackColor( &white ) ;
>        PenMode(transparent);
> 
>        for ( int y = 0 ; y < height ; ++y )
>        {
>            for( int x = 0 ; x < width ; ++x )
>            {
>                if ( !mask->PointMasked(x,y) )
>                {
>                    RGBColor col ;
> 
>                    GetCPixel( x + portRect.left , y + portRect.top , &col ) ;
>                    SetCPixel( x + portRect.left , y + portRect.top , &col ) ;
>                }
>                else {
>                    // With transparency this sets a blank pixel
>                    SetCPixel( x + portRect.left , y + portRect.top , &trans);
>                }
>            }
>        }
>    }
>    else
>    {
>        RGBBackColor( &gray ) ;
>        EraseRect(&portRect);
>        RGBForeColor( &black ) ;
>        RGBBackColor( &white ) ;
> 
>        CopyBits(GetPortBitMapForCopyBits(GetHBITMAP()), 
>                 // src PixMap - we copy image over itself -
>                 GetPortBitMapForCopyBits(GetHBITMAP()),
>                 //  dst PixMap - no drawing occurs
>                 &portRect,    // srcRect - it will be recorded and compressed -
>                 &portRect,    // dstRect - into the picture that is open -
>                 srcCopy,NULL); // copyMode and no clip region
>    }
>    ClosePicture();                  // We are done recording the picture
>    UnlockPixels( GetGWorldPixMap( GetHBITMAP() ) ) ;
>    SetGWorld( origPort , origDev ) ;
> 
>    return picture;                  // return our groovy pict handle
> }
> 
482,483c828,853
< // TODO
<     return FALSE;
---
>    if ( m_maskBitmap )
>    {
>        wxMacDestroyGWorld( m_maskBitmap ) ;
>        m_maskBitmap = NULL ;
>    }
>    wxCHECK_MSG( bitmap.GetBitmapType() == kMacBitmapTypeGrafWorld, false,
>                 wxT("Cannot create mask from this bitmap type (TODO)"));
>    // other types would require a temporary bitmap. not yet implemented
> 
>    wxCHECK_MSG( bitmap.Ok(), false, wxT("Invalid bitmap"));
> 
>    wxCHECK_MSG(bitmap.GetDepth() == 1, false,
>                wxT("Cannot create mask from colour bitmap"));
> 
>    m_maskBitmap = wxMacCreateGWorld(bitmap.GetWidth(), bitmap.GetHeight(), 1);
>    Rect rect = { 0,0, bitmap.GetHeight(), bitmap.GetWidth() };
> 
>    LockPixels( GetGWorldPixMap(m_maskBitmap) );
>    LockPixels( GetGWorldPixMap(bitmap.GetHBITMAP()) );
>    CopyBits(GetPortBitMapForCopyBits(bitmap.GetHBITMAP()),
>             GetPortBitMapForCopyBits(m_maskBitmap),
>             &rect, &rect, srcCopy, 0);
>    UnlockPixels( GetGWorldPixMap(m_maskBitmap) );
>    UnlockPixels( GetGWorldPixMap(bitmap.GetHBITMAP()) );
> 
>    return FALSE;
490a861
>    wxCHECK_MSG( 0, false, wxT("Not implemented"));
503c874,875
< 	wxASSERT( ((wxBitmapRefData*) bitmap.GetRefData())->m_bitmapType == kMacBitmapTypeGrafWorld ) ;
---
> 	wxCHECK_MSG( bitmap.GetBitmapType() == kMacBitmapTypeGrafWorld, false,
>                  wxT("Cannot create mask from this bitmap type (TODO)"));
505,509d876
< 	
<     if (!bitmap.Ok())
<     {
<         return FALSE;
<     }
511,513c878,882
< 	m_maskBitmap = wxMacCreateGWorld( bitmap.GetWidth() , bitmap.GetHeight() , 1 ) ;	
< 	LockPixels( GetGWorldPixMap( (CGrafPtr) m_maskBitmap ) ) ;
< 	LockPixels( GetGWorldPixMap( (CGrafPtr) ((wxBitmapRefData*) bitmap.GetRefData())->m_hBitmap ) ) ;
---
>     wxCHECK_MSG( bitmap.Ok(), false, wxT("Illigal bitmap"));
> 
> 	m_maskBitmap = wxMacCreateGWorld(bitmap.GetWidth(), bitmap.GetHeight(), 1);
> 	LockPixels( GetGWorldPixMap( m_maskBitmap ) ) ;
> 	LockPixels( GetGWorldPixMap( bitmap.GetHBITMAP() ) );
518,520c887,893
< 	CGrafPtr 	origPort ;
< 	GDHandle	origDevice ;
< 			
---
> 	CGrafPtr  origPort ;
> 	GDHandle  origDevice ;
>     RGBColor  col;
>     RGBColor  colors[2] = {
>         { 0xFFFF, 0xFFFF, 0xFFFF },
>         { 0,      0,      0 }};
> 
522c895
< 	for (int w = 0; w < bitmap.GetWidth(); w++)
---
> 	for (int yy = 0; yy < bitmap.GetHeight(); yy++)
524,535c897,903
<         for (int h = 0; h < bitmap.GetHeight(); h++)
<         {		
< 			RGBColor colors[2] = { 
< 				{ 0xFFFF , 0xFFFF , 0xFFFF } ,
< 				{ 0, 0 , 0 } 
< 				} ;
< 				
< 			SetGWorld( ((wxBitmapRefData*) bitmap.GetRefData())->m_hBitmap , NULL ) ;
< 			RGBColor col ;
< 			GetCPixel( w , h , &col ) ;
< 			SetGWorld( m_maskBitmap , NULL ) ;
<             if (col.red == maskColor.red && col.blue == maskColor.blue && col.green == maskColor.green)
---
>         for (int xx = 0; xx < bitmap.GetWidth(); xx++)
>         {
> 			SetGWorld( bitmap.GetHBITMAP(), NULL );
> 			GetCPixel( xx , yy , &col ) ;
>             SetGWorld( m_maskBitmap , NULL ) ;
>             if (col.red == maskColor.red && col.green == maskColor.green &&
>                 col.blue == maskColor.blue)
537c905
< 				SetCPixel( w , h , &colors[0] ) ;
---
> 				SetCPixel( xx , yy , &colors[0] ) ;
539,541c907,908
<             else
<             {
< 				SetCPixel( w , h , &colors[1] ) ;
---
>             else {
> 				SetCPixel( xx , yy , &colors[1] ) ;
546c913
< 	UnlockPixels( GetGWorldPixMap( ((wxBitmapRefData*) bitmap.GetRefData())->m_hBitmap ) ) ;
---
> 	UnlockPixels( GetGWorldPixMap( bitmap.GetHBITMAP() ) );
551a919,939
> bool wxMask::PointMasked(int x, int y)
> {
>    WXHBITMAP origPort;
>    GDHandle  origDevice;
>    RGBColor  color;
>    bool masked = true;
> 
>    GetGWorld( &origPort, &origDevice);
> 
>    //Set port to mask and see if it masked (1) or not ( 0 )
>    SetGWorld(m_maskBitmap, NULL);
>    LockPixels(GetGWorldPixMap(m_maskBitmap));
>    GetCPixel(x,y, &color);
>    masked = !(color.red == 0 && color.green == 0 && color.blue == 0);
>    UnlockPixels(GetGWorldPixMap(m_maskBitmap));
> 
>    SetGWorld( origPort, origDevice);
> 
>    return masked;
> }
> 
563,564c951,953
< bool wxBitmapHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long type,
<         int desiredWidth, int desiredHeight)
---
> bool wxBitmapHandler::LoadFile(wxBitmap *bitmap, const wxString& name,
>                                long type,
>                                int desiredWidth, int desiredHeight)
566c955
<     return FALSE;
---
>    return FALSE;
569c958,959
< bool wxBitmapHandler::SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *palette)
---
> bool wxBitmapHandler::SaveFile(wxBitmap *bitmap, const wxString& name, int type,
>                                const wxPalette *palette)
571c961
<     return FALSE;
---
>    return FALSE;
590c980
<           int desiredWidth, int desiredHeight);
---
>                           int desiredWidth, int desiredHeight);
594,595c984,986
< bool  wxPICTResourceHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<           int desiredWidth, int desiredHeight)
---
> bool wxPICTResourceHandler::LoadFile(wxBitmap *bitmap, const wxString& name,
>                                      long flags,
>                                      int desiredWidth, int desiredHeight)
598c989,990
< 	
---
> 
> #ifndef __WXMAC_X__
600a993,995
> #else
>    c2pstrcpy(theName, name);
> #endif
613c1008
< 		
---
> 
654,655c1049,1051
<     int desiredWidth = -1, int desiredHeight = -1);
<   virtual bool SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *palette = NULL);
---
>                         int desiredWidth = -1, int desiredHeight = -1);
>   virtual bool SaveFile(wxBitmap *bitmap, const wxString& name, int type, 
>                         const wxPalette *palette = NULL);
659,660c1055,1057
< bool wxXPMFileHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth, int desiredHeight)
---
> bool wxXPMFileHandler::LoadFile(wxBitmap *bitmap, const wxString& name,
>                                 long flags,
>                                 int desiredWidth, int desiredHeight)
753c1150,1151
< bool wxXPMDataHandler::Create(wxBitmap *bitmap, void *data, long flags, int width, int height, int depth)
---
> bool wxXPMDataHandler::Create(wxBitmap *bitmap, void *data, long flags,
>                               int width, int height, int depth)
813,814c1211,1213
< bool wxBMPResourceHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth, int desiredHeight)
---
> bool wxBMPResourceHandler::LoadFile(wxBitmap *bitmap, const wxString& name,
>                                     long flags, 
>                                     int desiredWidth, int desiredHeight)

 	  	 

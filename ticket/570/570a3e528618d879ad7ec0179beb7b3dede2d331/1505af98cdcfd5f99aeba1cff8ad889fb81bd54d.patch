Only in h:/wxcvshd/wxWin/include/wx: datetime.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/datetime.h h:/wxcvshd/wxWin/include/wx/datetime.h
--- c:/wxcvshead/wxWindows/include/wx/datetime.h	2003-07-11 14:01:44.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/datetime.h	2003-07-18 19:39:20.000000000 +0200
@@ -1294,3 +1294,3 @@
 class WXDLLIMPEXP_BASE wxDateTimeHolidayAuthority;
-WX_DEFINE_USER_EXPORTED_ARRAY(wxDateTimeHolidayAuthority *,
+WX_DEFINE_USER_EXPORTED_ARRAY_NO_PTR(wxDateTimeHolidayAuthority *,
                               wxHolidayAuthoritiesArray,
Only in h:/wxcvshd/wxWin/include/wx: dynarray.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/dynarray.h h:/wxcvshd/wxWin/include/wx/dynarray.h
--- c:/wxcvshead/wxWindows/include/wx/dynarray.h	2003-07-18 08:16:17.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/dynarray.h	2003-07-18 20:13:44.000000000 +0200
@@ -308,2 +308,5 @@
 
+#define  _WX_DEFINE_TYPEARRAY_NO_PTR(T, name, base, classexp)         \
+		_WX_DEFINE_TYPEARRAY(T, name, base, classexp)
+
 #else // if !wxUSE_STL
@@ -472,2 +475,162 @@
 
+#define  _WX_DEFINE_TYPEARRAY_NO_PTR(T, name, base, classexp)         \
+wxCOMPILE_TIME_ASSERT2(sizeof(T) <= sizeof(base::base_type),          \
+                       TypeTooBigToBeStoredIn##base,                  \
+                       name);                                         \
+typedef int (CMPFUNC_CONV *CMPFUNC##T)(T *pItem1, T *pItem2);         \
+classexp name : public base                                           \
+{                                                                     \
+public:                                                               \
+  name() { }                                                          \
+  ~name() { }                                                         \
+                                                                      \
+  name& operator=(const name& src)                                    \
+    { base* temp = (base*) this;                                      \
+      (*temp) = ((const base&)src);                                   \
+      return *this; }                                                 \
+                                                                      \
+  T& operator[](size_t uiIndex) const                                 \
+    { return (T&)(base::operator[](uiIndex)); }                       \
+  T& Item(size_t uiIndex) const                                       \
+    { return (T&)(base::operator[](uiIndex)); }                       \
+  T& Last() const                                                     \
+    { return (T&)(base::operator[](Count() - 1)); }                   \
+                                                                      \
+  int Index(T Item, bool bFromEnd = FALSE) const                      \
+    { return base::Index((base_type)Item, bFromEnd); }                \
+                                                                      \
+  void Add(T Item, size_t nInsert = 1)                                \
+    { base::Add((base_type)Item, nInsert); }                          \
+  void Insert(T Item, size_t uiIndex, size_t nInsert = 1)             \
+    { base::Insert((base_type)Item, uiIndex, nInsert) ; }             \
+                                                                      \
+  void RemoveAt(size_t uiIndex, size_t nRemove = 1)                   \
+    { base::RemoveAt(uiIndex, nRemove); }                             \
+  void Remove(T Item)                                                 \
+    { int iIndex = Index(Item);                                       \
+      wxCHECK2_MSG( iIndex != wxNOT_FOUND, return,                    \
+         _WX_ERROR_REMOVE);                                           \
+      base::RemoveAt((size_t)iIndex); }                               \
+                                                                      \
+  void Sort(CMPFUNC##T fCmp) { base::Sort((CMPFUNC)fCmp); }           \
+                                                                      \
+  /* STL-like interface */                                            \
+private:                                                              \
+  typedef base::iterator biterator;                                   \
+  typedef base::const_iterator bconst_iterator;                       \
+  typedef base::value_type bvalue_type;                               \
+  typedef base::const_reference bconst_reference;                     \
+public:                                                               \
+  typedef T value_type;                                               \
+  typedef value_type* pointer;                                        \
+  typedef const value_type* const_pointer;                            \
+  typedef value_type* iterator;                                       \
+  typedef const value_type* const_iterator;                           \
+  typedef value_type& reference;                                      \
+  typedef const value_type& const_reference;                          \
+  typedef base::difference_type difference_type;                      \
+  typedef base::size_type size_type;                                  \
+                                                                      \
+  class reverse_iterator                                              \
+  {                                                                   \
+    typedef T value_type;                                             \
+    typedef value_type& reference;                                    \
+    typedef value_type* pointer;                                      \
+    typedef reverse_iterator itor;                                    \
+    friend inline itor operator+(int o, const itor& it)               \
+        { return it.m_ptr - o; }                                      \
+    friend inline itor operator+(const itor& it, int o)               \
+        { return it.m_ptr - o; }                                      \
+    friend inline itor operator-(const itor& it, int o)               \
+        { return it.m_ptr + o; }                                      \
+    friend inline difference_type operator-(const itor& i1,           \
+                                            const itor& i2)           \
+        { return i1.m_ptr - i2.m_ptr; }                               \
+                                                                      \
+  public:                                                             \
+    pointer m_ptr;                                                    \
+    reverse_iterator() : m_ptr(NULL) { }                              \
+    reverse_iterator(pointer ptr) : m_ptr(ptr) { }                    \
+    reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }            \
+    reference operator*() const { return *m_ptr; }                    \
+    itor operator++() { --m_ptr; return *this; }                      \
+    itor operator++(int)                                              \
+      { reverse_iterator tmp = *this; --m_ptr; return tmp; }          \
+    itor operator--() { ++m_ptr; return *this; }                      \
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }   \
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }    \
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }    \
+  };                                                                  \
+                                                                      \
+  class const_reverse_iterator                                        \
+  {                                                                   \
+    typedef T value_type;                                             \
+    typedef const value_type& reference;                              \
+    typedef const value_type* pointer;                                \
+    typedef const_reverse_iterator itor;                              \
+    friend inline itor operator+(int o, const itor& it)               \
+        { return it.m_ptr - o; }                                      \
+    friend inline itor operator+(const itor& it, int o)               \
+        { return it.m_ptr - o; }                                      \
+    friend inline itor operator-(const itor& it, int o)               \
+        { return it.m_ptr + o; }                                      \
+    friend inline difference_type operator-(const itor& i1,           \
+                                            const itor& i2)           \
+        { return i1.m_ptr - i2.m_ptr; }                               \
+                                                                      \
+  public:                                                             \
+    pointer m_ptr;                                                    \
+    const_reverse_iterator() : m_ptr(NULL) { }                        \
+    const_reverse_iterator(pointer ptr) : m_ptr(ptr) { }              \
+    const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }      \
+    const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }\
+    reference operator*() const { return *m_ptr; }                    \
+    itor operator++() { --m_ptr; return *this; }                      \
+    itor operator++(int)                                              \
+      { itor tmp = *this; --m_ptr; return tmp; }                      \
+    itor operator--() { ++m_ptr; return *this; }                      \
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }   \
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }    \
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }    \
+  };                                                                  \
+                                                                      \
+  void assign(const_iterator first, const_iterator last)              \
+    { base::assign((bconst_iterator)first, (bconst_iterator)last); }  \
+  void assign(size_type n, const_reference v)                         \
+    { base::assign(n, (bconst_reference)v); }                         \
+  reference back() { return *(end() - 1); }                           \
+  const_reference back() const { return *(end() - 1); }               \
+  iterator begin() { return (iterator)base::begin(); }                \
+  const_iterator begin() const { return (const_iterator)base::begin(); }\
+  size_type capacity() const { return base::capacity(); }             \
+  void clear() { base::clear(); }                                     \
+  bool empty() const { return base::empty(); }                        \
+  iterator end() { return (iterator)base::end(); }                    \
+  const_iterator end() const { return (const_iterator)base::end(); }  \
+  iterator erase(iterator first, iterator last)                       \
+    { return (iterator)base::erase((biterator)first, (biterator)last); }\
+  iterator erase(iterator it)                                         \
+    { return (iterator)base::erase((biterator)it); }                  \
+  reference front() { return *begin(); }                              \
+  const_reference front() const { return *begin(); }                  \
+  void insert(iterator it, size_type n, const_reference v)            \
+    { base::insert((biterator)it, n, (bconst_reference)v); }          \
+  iterator insert(iterator it, const_reference v = value_type())      \
+    { return (iterator)base::insert((biterator)it, (bconst_reference)v); }\
+  void insert(iterator it, const_iterator first, const_iterator last) \
+    { base::insert((biterator)it, (bconst_iterator)first,             \
+                   (bconst_iterator)last); }                          \
+  size_type max_size() const { return base::max_size(); }             \
+  void pop_back() { base::pop_back(); }                               \
+  void push_back(const_reference v)                                   \
+    { base::push_back((bconst_reference)v); }                         \
+  reverse_iterator rbegin() { return reverse_iterator(end() - 1); }   \
+  const_reverse_iterator rbegin() const;                              \
+  reverse_iterator rend() { return reverse_iterator(begin() - 1); }   \
+  const_reverse_iterator rend() const;                                \
+  void reserve(size_type n) { base::reserve(n); };                    \
+  void resize(size_type n, value_type v = value_type());              \
+  size_type size() const { return base::size(); }                     \
+}
+
 
@@ -632,2 +795,5 @@
 
+#define WX_DEFINE_TYPEARRAY_NO_PTR(T, name, base)                 \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, base, class wxARRAY_DEFAULT_EXPORT)
+
 #define WX_DEFINE_EXPORTED_TYPEARRAY(T, name, base)               \
@@ -635,2 +801,5 @@
 
+#define WX_DEFINE_EXPORTED_TYPEARRAY_NO_PTR(T, name, base)               \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, base, class WXDLLEXPORT)
+
 #define WX_DEFINE_USER_EXPORTED_TYPEARRAY(T, name, base, expdecl) \
@@ -642,2 +811,6 @@
 
+#define WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, base, classdecl) \
+    typedef T _wxArray##name;                                   \
+    _WX_DEFINE_TYPEARRAY_NO_PTR(_wxArray##name, name, base, classdecl)
+
 // ----------------------------------------------------------------------------
@@ -791,6 +964,12 @@
     WX_DEFINE_TYPEARRAY(T, name, wxBaseArrayPtrVoid)
+#define WX_DEFINE_ARRAY_NO_PTR(T, name)                                \
+    WX_DEFINE_TYPEARRAY_NO_PTR(T, name, wxBaseArrayPtrVoid)
 #define WX_DEFINE_EXPORTED_ARRAY(T, name)                              \
     WX_DEFINE_EXPORTED_TYPEARRAY(T, name, wxBaseArrayPtrVoid)
+#define WX_DEFINE_EXPORTED_ARRAY_NO_PTR(T, name)                       \
+    WX_DEFINE_EXPORTED_TYPEARRAY_NO_PTR(T, name, wxBaseArrayPtrVoid)
 #define WX_DEFINE_USER_EXPORTED_ARRAY(T, name, expmode)                \
     WX_DEFINE_TYPEARRAY_WITH_DECL(T, name, wxBaseArrayPtrVoid, expmode)
+#define WX_DEFINE_USER_EXPORTED_ARRAY_NO_PTR(T, name, expmode)         \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, wxBaseArrayPtrVoid, expmode)
 
@@ -802,2 +981,4 @@
     WX_DEFINE_TYPEARRAY_WITH_DECL(T, name, wxBaseArrayShort, expmode)
+#define WX_DEFINE_USER_EXPORTED_ARRAY_SHORT_NO_PTR(T, name, expmode)   \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, wxBaseArrayShort, expmode)
 
@@ -805,6 +986,12 @@
     WX_DEFINE_TYPEARRAY(T, name, wxBaseArrayInt)
+#define WX_DEFINE_ARRAY_INT_NO_PTR(T, name)                            \
+    WX_DEFINE_TYPEARRAY_NO_PTR(T, name, wxBaseArrayInt)
 #define WX_DEFINE_EXPORTED_ARRAY_INT(T, name)                          \
     WX_DEFINE_EXPORTED_TYPEARRAY(T, name, wxBaseArrayInt)
+#define WX_DEFINE_EXPORTED_ARRAY_INT_NO_PTR(T, name)                   \
+    WX_DEFINE_EXPORTED_TYPEARRAY_NO_PTR(T, name, wxBaseArrayInt)
 #define WX_DEFINE_USER_EXPORTED_ARRAY_INT(T, name, expmode)            \
     WX_DEFINE_TYPEARRAY_WITH_DECL(T, name, wxBaseArrayInt, expmode)
+#define WX_DEFINE_USER_EXPORTED_ARRAY_INT_NO_PTR(T, name, expmode)     \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, wxBaseArrayInt, expmode)
 
@@ -816,2 +1003,4 @@
     WX_DEFINE_TYPEARRAY_WITH_DECL(T, name, wxBaseArrayLong, expmode)
+#define WX_DEFINE_USER_EXPORTED_ARRAY_LONG_NO_PTR(T, name, expmode)    \
+    WX_DEFINE_TYPEARRAY_WITH_DECL_NO_PTR(T, name, wxBaseArrayLong, expmode)
 
@@ -900,6 +1089,6 @@
 
-WX_DEFINE_USER_EXPORTED_ARRAY_SHORT (short,  wxArrayShort,   class WXDLLIMPEXP_BASE);
-WX_DEFINE_USER_EXPORTED_ARRAY_INT   (int,    wxArrayInt,     class WXDLLIMPEXP_BASE);
-WX_DEFINE_USER_EXPORTED_ARRAY_LONG  (long,   wxArrayLong,    class WXDLLIMPEXP_BASE);
-WX_DEFINE_USER_EXPORTED_ARRAY       (void *, wxArrayPtrVoid, class WXDLLIMPEXP_BASE);
+WX_DEFINE_USER_EXPORTED_ARRAY_SHORT_NO_PTR (short,  wxArrayShort,   class WXDLLIMPEXP_BASE);
+WX_DEFINE_USER_EXPORTED_ARRAY_INT_NO_PTR   (int,    wxArrayInt,     class WXDLLIMPEXP_BASE);
+WX_DEFINE_USER_EXPORTED_ARRAY_LONG_NO_PTR  (long,   wxArrayLong,    class WXDLLIMPEXP_BASE);
+WX_DEFINE_USER_EXPORTED_ARRAY_NO_PTR       (void *, wxArrayPtrVoid, class WXDLLIMPEXP_BASE);
 
Only in h:/wxcvshd/wxWin/include/wx: encconv.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/encconv.h h:/wxcvshd/wxWin/include/wx/encconv.h
--- c:/wxcvshead/wxWindows/include/wx/encconv.h	2003-07-04 15:47:12.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/encconv.h	2003-07-18 20:12:08.000000000 +0200
@@ -49,3 +49,3 @@
 
-WX_DEFINE_ARRAY_INT(wxFontEncoding, wxFontEncodingArray);
+WX_DEFINE_ARRAY_INT_NO_PTR(wxFontEncoding, wxFontEncodingArray);
 
Only in h:/wxcvshd/wxWin/include/wx: event.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/event.h h:/wxcvshd/wxWin/include/wx/event.h
--- c:/wxcvshead/wxWindows/include/wx/event.h	2003-07-18 08:16:20.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/event.h	2003-07-18 19:22:10.000000000 +0200
@@ -2181,3 +2181,3 @@
 
-WX_DEFINE_ARRAY(const wxEventTableEntry*, wxEventTableEntryPointerArray);
+WX_DEFINE_ARRAY_NO_PTR(const wxEventTableEntry*, wxEventTableEntryPointerArray);
 class WXDLLIMPEXP_BASE wxEvtHandler;
Only in h:/wxcvshd/wxWin/include/wx/msw: listbox.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/msw/listbox.h h:/wxcvshd/wxWin/include/wx/msw/listbox.h
--- c:/wxcvshead/wxWindows/include/wx/msw/listbox.h	2002-12-04 13:59:06.000000000 +0100
+++ h:/wxcvshd/wxWin/include/wx/msw/listbox.h	2003-07-18 19:37:55.000000000 +0200
@@ -30,3 +30,3 @@
 
-  WX_DEFINE_EXPORTED_ARRAY(wxOwnerDrawn *, wxListBoxItemsArray);
+  WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxOwnerDrawn *, wxListBoxItemsArray);
 #endif // wxUSE_OWNER_DRAWN
Only in h:/wxcvshd/wxWin/include/wx/msw: menu.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/msw/menu.h h:/wxcvshd/wxWin/include/wx/msw/menu.h
--- c:/wxcvshead/wxWindows/include/wx/msw/menu.h	2003-07-18 17:30:26.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/msw/menu.h	2003-07-18 19:23:15.000000000 +0200
@@ -22,3 +22,3 @@
 
-    WX_DEFINE_EXPORTED_ARRAY(wxAcceleratorEntry *, wxAcceleratorArray);
+    WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxAcceleratorEntry *, wxAcceleratorArray);
 #endif // wxUSE_ACCEL
Only in h:/wxcvshd/wxWin/include/wx/msw: setup.h
Only in h:/wxcvshd/wxWin/include/wx/msw: spinctrl.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/msw/spinctrl.h h:/wxcvshd/wxWin/include/wx/msw/spinctrl.h
--- c:/wxcvshead/wxWindows/include/wx/msw/spinctrl.h	2003-03-24 18:54:53.000000000 +0100
+++ h:/wxcvshd/wxWin/include/wx/msw/spinctrl.h	2003-07-18 20:16:35.000000000 +0200
@@ -23,3 +23,3 @@
 class WXDLLEXPORT wxSpinCtrl;
-WX_DEFINE_EXPORTED_ARRAY(wxSpinCtrl *, wxArraySpins);
+WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxSpinCtrl *, wxArraySpins);
 
Only in h:/wxcvshd/wxWin/include/wx: notebook.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/notebook.h h:/wxcvshd/wxWin/include/wx/notebook.h
--- c:/wxcvshead/wxWindows/include/wx/notebook.h	2003-07-07 15:08:09.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/notebook.h	2003-07-18 20:15:38.000000000 +0200
@@ -50,3 +50,3 @@
 
-WX_DEFINE_EXPORTED_ARRAY(wxNotebookPage *, wxArrayPages);
+WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxNotebookPage *, wxArrayPages);
 
Only in h:/wxcvshd/wxWin/include/wx: textbuf.bak
diff -bu1 -r c:/wxcvshead/wxWindows/include/wx/textbuf.h h:/wxcvshd/wxWin/include/wx/textbuf.h
--- c:/wxcvshead/wxWindows/include/wx/textbuf.h	2003-07-09 09:53:36.000000000 +0200
+++ h:/wxcvshd/wxWin/include/wx/textbuf.h	2003-07-18 20:14:01.000000000 +0200
@@ -45,3 +45,3 @@
 
-WX_DEFINE_EXPORTED_ARRAY_INT(wxTextFileType, ArrayFileType);
+WX_DEFINE_EXPORTED_ARRAY_INT_NO_PTR(wxTextFileType, ArrayFileType);
 
Only in h:/wxcvshd/wxWin/src/generic: grid.bak
diff -bu1 -r c:/wxcvshead/wxWindows/src/generic/grid.cpp h:/wxcvshd/wxWin/src/generic/grid.cpp
--- c:/wxcvshead/wxWindows/src/generic/grid.cpp	2003-07-14 12:30:57.000000000 +0200
+++ h:/wxcvshd/wxWin/src/generic/grid.cpp	2003-07-18 20:18:28.000000000 +0200
@@ -71,3 +71,3 @@
 
-WX_DEFINE_EXPORTED_ARRAY(wxGridCellAttr *, wxArrayAttrs);
+WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxGridCellAttr *, wxArrayAttrs);
 
@@ -334,3 +334,3 @@
 
-WX_DEFINE_EXPORTED_ARRAY(wxGridDataTypeInfo*, wxGridDataTypeInfoArray);
+WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxGridDataTypeInfo*, wxGridDataTypeInfoArray);
 
Only in h:/wxcvshd/wxWin/src/generic: treectlg.bak
diff -bu1 -r c:/wxcvshead/wxWindows/src/generic/treectlg.cpp h:/wxcvshd/wxWin/src/generic/treectlg.cpp
--- c:/wxcvshead/wxWindows/src/generic/treectlg.cpp	2003-07-10 15:34:24.000000000 +0200
+++ h:/wxcvshd/wxWin/src/generic/treectlg.cpp	2003-07-18 20:19:25.000000000 +0200
@@ -50,3 +50,3 @@
 
-WX_DEFINE_EXPORTED_ARRAY(wxGenericTreeItem *, wxArrayGenericTreeItems);
+WX_DEFINE_EXPORTED_ARRAY_NO_PTR(wxGenericTreeItem *, wxArrayGenericTreeItems);
 

 	  	 

--- libtiff\tif_jpeg.c	2006-03-21 18:42:50.000000000 +-0200
+++ libtiff\tif_jpeg.c	2007-05-26 18:42:37.000000000 +-0200
@@ -81,14 +81,25 @@
 # ifndef __RPCNDR_H__            /* don't conflict if rpcndr.h already read */
    typedef unsigned char boolean;
 # endif
 # define HAVE_BOOLEAN            /* prevent jmorecfg.h from redefining it */
 #endif
 
+#ifdef wxHACK_BOOLEAN
+  #include "wx/defs.h"
+  #define XMD_H 1
+  #define HAVE_BOOLEAN
+  #define boolean wxHACK_BOOLEAN
+#endif
+
 #include "jpeglib.h"
 #include "jerror.h"
+
+#ifndef HAVE_WXJPEG_BOOLEAN
+   typedef boolean wxjpeg_boolean;
+#endif
 
 /*
  * We are using width_in_blocks which is supposed to be private to
  * libjpeg. Unfortunately, the libjpeg delivered with Cygwin has
  * renamed this member to width_in_data_units.  Since the header has
  * also renamed a define, use that unique define name in order to
@@ -285,26 +296,26 @@
 TIFFjpeg_set_colorspace(JPEGState* sp, J_COLOR_SPACE colorspace)
 {
 	return CALLVJPEG(sp, jpeg_set_colorspace(&sp->cinfo.c, colorspace));
 }
 
 static int
-TIFFjpeg_set_quality(JPEGState* sp, int quality, boolean force_baseline)
+TIFFjpeg_set_quality(JPEGState* sp, int quality, wxjpeg_boolean force_baseline)
 {
 	return CALLVJPEG(sp,
 	    jpeg_set_quality(&sp->cinfo.c, quality, force_baseline));
 }
 
 static int
-TIFFjpeg_suppress_tables(JPEGState* sp, boolean suppress)
+TIFFjpeg_suppress_tables(JPEGState* sp, wxjpeg_boolean suppress)
 {
 	return CALLVJPEG(sp, jpeg_suppress_tables(&sp->cinfo.c, suppress));
 }
 
 static int
-TIFFjpeg_start_compress(JPEGState* sp, boolean write_all_tables)
+TIFFjpeg_start_compress(JPEGState* sp, wxjpeg_boolean write_all_tables)
 {
 	return CALLVJPEG(sp,
 	    jpeg_start_compress(&sp->cinfo.c, write_all_tables));
 }
 
 static int
@@ -331,13 +342,13 @@
 TIFFjpeg_write_tables(JPEGState* sp)
 {
 	return CALLVJPEG(sp, jpeg_write_tables(&sp->cinfo.c));
 }
 
 static int
-TIFFjpeg_read_header(JPEGState* sp, boolean require_image)
+TIFFjpeg_read_header(JPEGState* sp, wxjpeg_boolean require_image)
 {
 	return CALLJPEG(sp, -1, jpeg_read_header(&sp->cinfo.d, require_image));
 }
 
 static int
 TIFFjpeg_start_decompress(JPEGState* sp)
@@ -399,13 +410,13 @@
 	TIFF* tif = sp->tif;
 
 	sp->dest.next_output_byte = (JOCTET*) tif->tif_rawdata;
 	sp->dest.free_in_buffer = (size_t) tif->tif_rawdatasize;
 }
 
-static boolean
+static wxjpeg_boolean
 std_empty_output_buffer(j_compress_ptr cinfo)
 {
 	JPEGState* sp = (JPEGState*) cinfo;
 	TIFF* tif = sp->tif;
 
 	/* the entire buffer has been filled */
@@ -450,13 +461,13 @@
 
 	/* while building, jpegtables_length is allocated buffer size */
 	sp->dest.next_output_byte = (JOCTET*) sp->jpegtables;
 	sp->dest.free_in_buffer = (size_t) sp->jpegtables_length;
 }
 
-static boolean
+static wxjpeg_boolean
 tables_empty_output_buffer(j_compress_ptr cinfo)
 {
 	JPEGState* sp = (JPEGState*) cinfo;
 	void* newbuf;
 
 	/* the entire buffer has been filled; enlarge it by 1000 bytes */
@@ -516,13 +527,13 @@
 	TIFF* tif = sp->tif;
 
 	sp->src.next_input_byte = (const JOCTET*) tif->tif_rawdata;
 	sp->src.bytes_in_buffer = (size_t) tif->tif_rawcc;
 }
 
-static boolean
+static wxjpeg_boolean
 std_fill_input_buffer(j_decompress_ptr cinfo)
 {
 	JPEGState* sp = (JPEGState* ) cinfo;
 	static const JOCTET dummy_EOI[2] = { 0xFF, JPEG_EOI };
 
 	/*

 	  	 

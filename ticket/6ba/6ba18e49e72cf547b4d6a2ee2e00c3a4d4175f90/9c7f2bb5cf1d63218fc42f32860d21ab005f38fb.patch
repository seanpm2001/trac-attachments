Index: include/wx/generic/treectlg.h
===================================================================
--- include/wx/generic/treectlg.h	(revision 63202)
+++ include/wx/generic/treectlg.h	(working copy)
@@ -155,6 +155,7 @@
     virtual void Unselect();
     virtual void UnselectAll();
     virtual void SelectItem(const wxTreeItemId& item, bool select = true);
+    virtual void SelectAll(const wxTreeItemId& parent);
 
     virtual void EnsureVisible(const wxTreeItemId& item);
     virtual void ScrollTo(const wxTreeItemId& item);
Index: include/wx/msw/treectrl.h
===================================================================
--- include/wx/msw/treectrl.h	(revision 63202)
+++ include/wx/msw/treectrl.h	(working copy)
@@ -128,7 +128,7 @@
     virtual wxTreeItemId GetSelection() const;
     virtual size_t GetSelections(wxArrayTreeItemIds& selections) const;
     virtual wxTreeItemId GetFocusedItem() const;
-
+    
     virtual wxTreeItemId GetItemParent(const wxTreeItemId& item) const;
     virtual wxTreeItemId GetFirstChild(const wxTreeItemId& item,
                                        wxTreeItemIdValue& cookie) const;
@@ -162,6 +162,7 @@
     virtual void Unselect();
     virtual void UnselectAll();
     virtual void SelectItem(const wxTreeItemId& item, bool select = true);
+    virtual void SelectAll(const wxTreeItemId& parent);
 
     virtual void EnsureVisible(const wxTreeItemId& item);
     virtual void ScrollTo(const wxTreeItemId& item);
@@ -276,6 +277,7 @@
     void DoToggleItemSelection(const wxTreeItemId& item);
 
     void DoUnselectAll();
+    void DoSelectAll(const wxTreeItemId& parent);
 
     void DeleteTextCtrl();
 
Index: include/wx/treectrl.h
===================================================================
--- include/wx/treectrl.h	(revision 63202)
+++ include/wx/treectrl.h	(working copy)
@@ -324,6 +324,9 @@
     virtual void UnselectAll() = 0;
         // select this item
     virtual void SelectItem(const wxTreeItemId& item, bool select = true) = 0;
+        // Selects all first-level children for given parent. This works in
+        //multiselection controls only. 
+    virtual void SelectAll(const wxTreeItemId& parent) = 0;
         // unselect this item
     void UnselectItem(const wxTreeItemId& item) { SelectItem(item, false); }
         // toggle item selection
@@ -400,7 +403,7 @@
 protected:
     virtual wxSize DoGetBestSize() const;
 
-    // comon part of Get/SetItemState()
+    // common part of Get/SetItemState()
     virtual int DoGetItemState(const wxTreeItemId& item) const = 0;
     virtual void DoSetItemState(const wxTreeItemId& item, int state) = 0;
 
Index: interface/wx/treectrl.h
===================================================================
--- interface/wx/treectrl.h	(revision 63202)
+++ interface/wx/treectrl.h	(working copy)
@@ -954,6 +954,12 @@
         Unselects the given item. This works in multiselection controls only.
     */
     void UnselectItem(const wxTreeItemId& item);
+
+    /**
+    Selects all first-level children for given parent. This works in multiselection
+    controls only. 
+    */
+    virtual void SelectAll(const wxTreeItemId& parent);
 };
 
 
Index: samples/treectrl/treetest.cpp
===================================================================
--- samples/treectrl/treetest.cpp	(revision 63202)
+++ samples/treectrl/treetest.cpp	(working copy)
@@ -98,6 +98,7 @@
     MENU_LINK(Select)
     MENU_LINK(Unselect)
     MENU_LINK(ToggleSel)
+    MENU_LINK(SelectAllItems)
 #endif // NO_MULTIPLE_SELECTION
     MENU_LINK(Rename)
     MENU_LINK(Count)
@@ -262,6 +263,7 @@
     tree_menu->Append(TreeTest_DeleteChildren, wxT("Delete &children"));
     tree_menu->Append(TreeTest_DeleteAll, wxT("Delete &all items"));
     tree_menu->Append(TreeTest_SelectRoot, wxT("Select root item"));
+    
     tree_menu->AppendSeparator();
     tree_menu->Append(TreeTest_Count, wxT("Count children of current item"));
     tree_menu->Append(TreeTest_CountRec, wxT("Recursively count children of current item"));
@@ -307,6 +309,7 @@
     item_menu->Append(TreeTest_DumpSelected, wxT("Dump selected items\tAlt-D"));
     item_menu->Append(TreeTest_Select, wxT("Select current item\tAlt-S"));
     item_menu->Append(TreeTest_Unselect, wxT("Unselect everything\tAlt-U"));
+    item_menu->Append(TreeTest_SelectAllItems, wxT("Select all items\tCtrl-A"));
 #endif // NO_MULTIPLE_SELECTION
 
     wxMenuBar *menu_bar = new wxMenuBar;
@@ -594,6 +597,18 @@
     m_treeCtrl->UnselectAll();
 }
 
+
+void MyFrame::OnSelectAllItems(wxCommandEvent& WXUNUSED(event))
+{
+    wxTreeItemId item = m_treeCtrl->GetFocusedItem();
+    if ( !item.IsOk() ) 
+        item = m_treeCtrl->GetRootItem();
+    
+    if ( item != m_treeCtrl->GetRootItem() ) 
+        item = m_treeCtrl->GetItemParent(item);
+    m_treeCtrl->SelectAll(item);
+}
+
 #endif // NO_MULTIPLE_SELECTION
 
 void MyFrame::DoSetBold(bool bold)
Index: samples/treectrl/treetest.h
===================================================================
--- samples/treectrl/treetest.h	(revision 63202)
+++ samples/treectrl/treetest.h	(working copy)
@@ -209,6 +209,7 @@
     void OnSelect(wxCommandEvent& event);
     void OnUnselect(wxCommandEvent& event);
     void OnToggleSel(wxCommandEvent& event);
+    void OnSelectAllItems(wxCommandEvent& event);
 #endif // NO_MULTIPLE_SELECTION
     void OnSelectRoot(wxCommandEvent& event);
     void OnDelete(wxCommandEvent& event);
@@ -354,6 +355,7 @@
     TreeTest_Select,
     TreeTest_Unselect,
     TreeTest_SelectRoot,
+    TreeTest_SelectAllItems,
     TreeTest_ShowFirstVisible,
     TreeTest_ShowLastVisible,
     TreeTest_ShowNextVisible,
Index: src/generic/treectlg.cpp
===================================================================
--- src/generic/treectlg.cpp	(revision 63202)
+++ src/generic/treectlg.cpp	(working copy)
@@ -1983,6 +1983,40 @@
     }
 }
 
+
+void wxGenericTreeCtrl::SelectAll(const wxTreeItemId& parent)
+{
+    wxCHECK_RET( HasFlag(wxTR_MULTIPLE), wxT("this only works with multiple selection controls") );
+
+    UnselectAll();
+
+    if ( !HasChildren(parent) ) 
+        return;
+ 
+
+    wxArrayGenericTreeItems& children = ((wxGenericTreeItem*) parent.m_pItem)->GetChildren();
+    size_t count = children.GetCount();
+
+    wxGenericTreeItem *_item = (wxGenericTreeItem*) ((wxTreeItemId)children[0]).m_pItem;
+    wxTreeEvent event(wxEVT_COMMAND_TREE_SEL_CHANGING, this, (wxGenericTreeItem*) _item);
+    event.m_itemOld = m_current;
+
+    if ( GetEventHandler()->ProcessEvent( event ) && !event.IsAllowed() )
+        return;
+
+    for ( size_t n = 0; n < count; ++n )
+    {
+        m_current = m_key_current = children[n];
+        m_current->SetHilight(true);
+        RefreshSelected();
+    }
+
+    
+    event.SetEventType(wxEVT_COMMAND_TREE_SEL_CHANGED);
+    GetEventHandler()->ProcessEvent( event );
+}
+
+
 // Recursive function !
 // To stop we must have crt_item<last_item
 // Algorithm :
Index: src/msw/treectrl.cpp
===================================================================
--- src/msw/treectrl.cpp	(revision 63202)
+++ src/msw/treectrl.cpp	(working copy)
@@ -1883,6 +1883,39 @@
     }
 }
 
+void wxTreeCtrl::DoSelectAll(const wxTreeItemId& parent)
+{
+    DoUnselectAll();
+   
+    wxTreeItemIdValue cookie;
+    wxTreeItemId child = GetFirstChild(parent, cookie);
+    while ( child.IsOk() )
+    {
+        DoSelectItem(child, true);
+        child = GetNextChild(child, cookie);
+    }
+}
+
+void wxTreeCtrl::SelectAll(const wxTreeItemId& parent)
+{
+    wxCHECK_RET( HasFlag(wxTR_MULTIPLE), wxT("this only works with multiple selection controls") );
+
+    HTREEITEM htFocus = (HTREEITEM)TreeView_GetSelection(GetHwnd());
+
+    wxTreeEvent changingEvent(wxEVT_COMMAND_TREE_SEL_CHANGING, this);
+    changingEvent.m_itemOld = htFocus;
+
+    if ( IsTreeEventAllowed(changingEvent) )
+    {
+        DoSelectAll(parent);
+
+        wxTreeEvent changedEvent(wxEVT_COMMAND_TREE_SEL_CHANGED, this);
+        changedEvent.m_itemOld = htFocus;
+        (void)HandleTreeEvent(changedEvent);
+    }
+}
+
+
 void wxTreeCtrl::DoSelectItem(const wxTreeItemId& item, bool select)
 {
     TempSetter set(m_changingSelection);
@@ -3184,7 +3217,7 @@
                     // unprocessed
                     MSWHandleSelectionKey(wParam);
                 }
-
+                
                 // pretend that we did process it in any case as we already
                 // generated an event for it
                 processed = true;

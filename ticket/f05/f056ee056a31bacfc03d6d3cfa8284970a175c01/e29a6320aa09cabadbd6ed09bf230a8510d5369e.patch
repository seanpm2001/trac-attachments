Index: include/wx/dialog.h
===================================================================
--- include/wx/dialog.h	(revision 49162)
+++ include/wx/dialog.h	(working copy)
@@ -78,7 +78,15 @@
     // notice that the returned sizer can be NULL if no buttons are put in the
     // sizer (this mostly happens under smart phones and other atypical
     // platforms which have hardware buttons replacing OK/Cancel and such)
-    wxSizer *CreateButtonSizer(long flags);
+    wxSizer *CreateButtonSizer(long flags, int orient = 0);
+    
+    // creates the complete dialog layout containing the given contents and
+    // desired buttons.  Returns a sizer that should be used as the top
+    // sizer for the dialog.
+    // orient specifies the orientation of the buttons (wxHORIZONTAL, wxVERTICAL,
+    // or 0 for autodetect).  pos specifies the position of the buttons (wxBOTTOM,
+    // wxRIGHT, or 0 for autodetect).
+    wxSizer *CreateButtonLayout(long flags, wxSizer* content, int orient = 0, int pos = 0);
 
     // returns the sizer containing CreateButtonSizer() below a separating
     // static line for the platforms which use static lines for items
@@ -86,7 +94,7 @@
     wxSizer *CreateSeparatedButtonSizer(long flags);
 
 #if wxUSE_BUTTON
-    wxStdDialogButtonSizer *CreateStdDialogButtonSizer( long flags );
+    wxStdDialogButtonSizer *CreateStdDialogButtonSizer( long flags, int orient = 0);
 #endif // wxUSE_BUTTON
 
 protected:
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 49162)
+++ include/wx/sizer.h	(working copy)
@@ -903,10 +903,16 @@
 class WXDLLEXPORT wxStdDialogButtonSizer: public wxBoxSizer
 {
 public:
+    // Determine the default position/orientation for button
+    // sizer.  This is put here to reduce code duplication
+    static int GetDefaultOrientation();
+    static int GetDefaultPosition();
+    
+
     // Constructor just creates a new wxBoxSizer, not much else.
     // Box sizer orientation is automatically determined here:
     // vertical for PDAs, horizontal for everything else?
-    wxStdDialogButtonSizer();
+    wxStdDialogButtonSizer(int orient = 0);
 
     // Checks button ID against system IDs and sets one of the pointers below
     // to this button. Does not do any sizer-related things here.
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 49162)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1530,10 +1530,19 @@
     sizerTop->Add(m_btnDelete, 0, wxALIGN_CENTER | wxALL, 5);
     sizerTop->Add(btnOk, 0, wxALIGN_CENTER | wxALL, 5);
 
-    SetSizer(sizerTop);
+    
+    wxSizer *top = 
+    // CreateButtonLayout(wxOK | wxCANCEL, sizerTop);
+    // CreateButtonLayout(wxOK | wxCANCEL, sizerTop, wxHORIZONTAL, wxBOTTOM);
+    // CreateButtonLayout(wxOK | wxCANCEL, sizerTop, wxHORIZONTAL, wxRIGHT);
+    // CreateButtonLayout(wxOK | wxCANCEL, sizerTop, wxVERTICAL, wxBOTTOM);
+    CreateButtonLayout(wxOK | wxCANCEL, sizerTop, wxVERTICAL, wxRIGHT);
+    
+    
+    SetSizer(top);
 
-    sizerTop->SetSizeHints(this);
-    sizerTop->Fit(this);
+    top->SetSizeHints(this);
+    top->Fit(this);
 
     m_btnModal->SetFocus();
     m_btnModal->SetDefault();
Index: src/common/dlgcmn.cpp
===================================================================
--- src/common/dlgcmn.cpp	(revision 49162)
+++ src/common/dlgcmn.cpp	(working copy)
@@ -160,7 +160,7 @@
 
 #endif // wxUSE_STATTEXT
 
-wxSizer *wxDialogBase::CreateButtonSizer(long flags)
+wxSizer *wxDialogBase::CreateButtonSizer(long flags, int orient)
 {
     wxSizer *sizer = NULL;
 
@@ -190,7 +190,7 @@
             wxSystemOptions::GetOptionInt(wxT("wince.dialog.real-ok-cancel")) )
 #endif // __POCKETPC__
     {
-        sizer = CreateStdDialogButtonSizer(flags);
+        sizer = CreateStdDialogButtonSizer(flags, orient);
     }
 #endif // wxUSE_BUTTON
 
@@ -218,11 +218,52 @@
     return sizer;
 }
 
+wxSizer *wxDialogBase::CreateButtonLayout(long flags, wxSizer* content, int orient, int pos)
+{
+    wxASSERT(content != NULL);
+
+    // Create the buttons
+    wxSizer* buttonSizer = CreateButtonSizer(flags, orient);
+    if(!buttonSizer)
+        return buttonSizer;
+        
+    // Get the position
+    if(pos == 0)
+    {
 #if wxUSE_BUTTON
+        pos = wxStdDialogButtonSizer::GetDefaultPosition();
+#else
+        // This should never happen because if there is not buttons then the return
+        // from CreateButtonSizer would be NULL
+        pos = wxBOTTOM;
+#endif    
+    }        
+    
+    // The top sizer
+    wxBoxSizer *topSizer = new wxBoxSizer((pos == wxRIGHT) ? wxHORIZONTAL : wxVERTICAL);
+    
+    // Add the content
+    topSizer->Add(content, wxSizerFlags(1).Expand().DoubleBorder());
+    
+    // Add the separator
+#if wxUSE_STATLINE && !defined(__WXMAC__)
+    long style = (pos == wxRIGHT) ? wxLI_VERTICAL : wxLI_HORIZONTAL;
+    topSizer->Add(
+        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, style),
+        wxSizerFlags().Expand().DoubleBorder(pos));
+#endif // wxUSE_STATLINE    
+    
+    // Add the buttons
+    topSizer->Add(buttonSizer, wxSizerFlags(0).Expand().DoubleBorder(pos));
+    
+    return topSizer;
+}
 
-wxStdDialogButtonSizer *wxDialogBase::CreateStdDialogButtonSizer( long flags )
+#if wxUSE_BUTTON
+
+wxStdDialogButtonSizer *wxDialogBase::CreateStdDialogButtonSizer( long flags, int orient )
 {
-    wxStdDialogButtonSizer *sizer = new wxStdDialogButtonSizer();
+    wxStdDialogButtonSizer *sizer = new wxStdDialogButtonSizer(orient);
 
     wxButton *ok = NULL;
     wxButton *yes = NULL;
Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 49162)
+++ src/common/sizer.cpp	(working copy)
@@ -1890,8 +1890,7 @@
 
 #if wxUSE_BUTTON
 
-wxStdDialogButtonSizer::wxStdDialogButtonSizer()
-    : wxBoxSizer(wxHORIZONTAL)
+int wxStdDialogButtonSizer::GetDefaultOrientation()
 {
     // Vertical buttons with lots of space on either side
     // looks rubbish on WinCE, so let's not do this for now.
@@ -1903,9 +1902,33 @@
     // If we have a PDA screen, put yes/no button over
     // all other buttons, otherwise on the left side.
     if (is_pda)
-        m_orient = wxVERTICAL;
+        return wxVERTICAL;
 #endif
 
+    return wxHORIZONTAL;
+}
+
+int wxStdDialogButtonSizer::GetDefaultPosition()
+{
+  if(GetDefaultOrientation() == wxVERTICAL)
+    return wxRIGHT;
+  
+  return wxBOTTOM;
+}
+
+wxStdDialogButtonSizer::wxStdDialogButtonSizer(int orient)
+    : wxBoxSizer(wxHORIZONTAL)
+{
+    // Autodetect orientation if needed
+    if(orient == 0)
+    {
+        m_orient = GetDefaultOrientation();
+    }
+    else if(orient == wxVERTICAL)
+    {
+        m_orient = wxVERTICAL;
+    }
+
     m_buttonAffirmative = NULL;
     m_buttonApply = NULL;
     m_buttonNegative = NULL;
@@ -1958,22 +1981,34 @@
 
 void wxStdDialogButtonSizer::Realize()
 {
+    long firstBorder, secondBorder;
+    if(m_orient == wxHORIZONTAL)
+    {
+      firstBorder = wxLEFT;
+      secondBorder = wxRIGHT;
+    }
+    else
+    {
+      firstBorder = wxTOP;
+      secondBorder = wxBOTTOM;
+    }
+
 #ifdef __WXMAC__
-        Add(0, 0, 0, wxLEFT, 6);
+        Add(0, 0, 0, firstBorder, 6);
         if (m_buttonHelp)
-            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 6);
 
         if (m_buttonNegative){
             // HIG POLICE BULLETIN - destructive buttons need extra padding
             // 24 pixels on either side
-            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 12);
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 12);
         }
 
         // extra whitespace between help/negative and cancel/ok buttons
         Add(0, 0, 1, wxEXPAND, 0);
 
         if (m_buttonCancel){
-            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 6);
             // Cancel or help should be default
             // m_buttonCancel->SetDefaultButton();
         }
@@ -1981,10 +2016,10 @@
         // Ugh, Mac doesn't really have apply dialogs, so I'll just
         // figure the best place is between Cancel and OK
         if (m_buttonApply)
-            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 6);
 
         if (m_buttonAffirmative){
-            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT, 6);
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | firstBorder, 6);
 
             if (m_buttonAffirmative->GetId() == wxID_SAVE){
                 // these buttons have set labels under Mac so we should use them
@@ -1997,30 +2032,30 @@
         // Extra space around and at the right
         Add(12, 24);
 #elif defined(__WXGTK20__)
-        Add(0, 0, 0, wxLEFT, 9);
+        Add(0, 0, 0, firstBorder, 9);
         if (m_buttonHelp)
-            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 3);
 
         // extra whitespace between help and cancel/ok buttons
         Add(0, 0, 1, wxEXPAND, 0);
 
         if (m_buttonNegative){
-            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 3);
         }
 
         // according to HIG, in explicit apply windows the order is:
         // [ Help                     Apply   Cancel   OK ]
         if (m_buttonApply)
-            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 3);
 
         if (m_buttonCancel){
-            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | firstBorder | secondBorder, 3);
             // Cancel or help should be default
             // m_buttonCancel->SetDefaultButton();
         }
 
         if (m_buttonAffirmative)
-            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT, 6);
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | firstBorder, 6);
 #elif defined(__WXMSW__)
         // Windows
 
@@ -2028,44 +2063,44 @@
         Add(0, 0, 1, wxEXPAND, 0);
 
         if (m_buttonAffirmative){
-            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonAffirmative->ConvertDialogToPixels(wxSize(2, 0)).x);
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonAffirmative->ConvertDialogToPixels(wxSize(2, 0)).x);
         }
 
         if (m_buttonNegative){
-            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonNegative->ConvertDialogToPixels(wxSize(2, 0)).x);
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonNegative->ConvertDialogToPixels(wxSize(2, 0)).x);
         }
 
         if (m_buttonCancel){
-            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonCancel->ConvertDialogToPixels(wxSize(2, 0)).x);
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonCancel->ConvertDialogToPixels(wxSize(2, 0)).x);
         }
         if (m_buttonApply)
-            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonApply->ConvertDialogToPixels(wxSize(2, 0)).x);
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonApply->ConvertDialogToPixels(wxSize(2, 0)).x);
 
         if (m_buttonHelp)
-            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonHelp->ConvertDialogToPixels(wxSize(2, 0)).x);
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonHelp->ConvertDialogToPixels(wxSize(2, 0)).x);
 #else
         // GTK+1 and any other platform
 
-        // Add(0, 0, 0, wxLEFT, 5); // Not sure what this was for but it unbalances the dialog
+        // Add(0, 0, 0, firstBorder, 5); // Not sure what this was for but it unbalances the dialog
         if (m_buttonHelp)
-            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonHelp->ConvertDialogToPixels(wxSize(4, 0)).x);
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonHelp->ConvertDialogToPixels(wxSize(4, 0)).x);
 
         // extra whitespace between help and cancel/ok buttons
         Add(0, 0, 1, wxEXPAND, 0);
 
         if (m_buttonApply)
-            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonApply->ConvertDialogToPixels(wxSize(4, 0)).x);
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonApply->ConvertDialogToPixels(wxSize(4, 0)).x);
 
         if (m_buttonAffirmative){
-            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonAffirmative->ConvertDialogToPixels(wxSize(4, 0)).x);
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonAffirmative->ConvertDialogToPixels(wxSize(4, 0)).x);
         }
 
         if (m_buttonNegative){
-            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonNegative->ConvertDialogToPixels(wxSize(4, 0)).x);
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonNegative->ConvertDialogToPixels(wxSize(4, 0)).x);
         }
 
         if (m_buttonCancel){
-            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonCancel->ConvertDialogToPixels(wxSize(4, 0)).x);
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | firstBorder | secondBorder, m_buttonCancel->ConvertDialogToPixels(wxSize(4, 0)).x);
             // Cancel or help should be default
             // m_buttonCancel->SetDefaultButton();
         }

 	  	 

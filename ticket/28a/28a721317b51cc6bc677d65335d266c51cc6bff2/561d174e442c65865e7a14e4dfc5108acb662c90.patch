Index: configure.in
===================================================================
RCS file: /home/wxcvs/wxWindows/configure.in,v
retrieving revision 1.314.2.43
diff -r1.314.2.43 configure.in
3728a3729,3762
> dnl get the library function to use for wxGetDiskSpace()
> dnl ---------------------------------------------------------------------------
> 
> if test "$TOOLKIT" != "MSW"; then
> 
> AC_MSG_CHECKING(for disk space function)
> AC_LANG_SAVE
> AC_LANG_C
> AC_TRY_COMPILE(
> [
>      #include <sys/vfs.h>
> ],
> [
>      struct statfs fs;
>      statfs("/", &fs);
>      (void) fs.f_bsize;
>      (void) fs.f_blocks;
>      (void) fs.f_bavail;
> ],
> [
>      AC_DEFINE(HAVE_STATFS)
>      wx_cv_has_getdiskspace=yes
> ],
> [
>      wx_cv_has_getdiskspace=no
> ]
> )
> AC_LANG_RESTORE
> AC_MSG_RESULT($wx_cv_has_getdiskspace)
> 
> fi
> dnl if !MSW
> 
> dnl ---------------------------------------------------------------------------
Index: setup.h.in
===================================================================
RCS file: /home/wxcvs/wxWindows/setup.h.in,v
retrieving revision 1.33.2.7
diff -r1.33.2.7 setup.h.in
703a704,706
> /* define if you have statfs function */
> #undef HAVE_STATFS
> 
Index: include/wx/utils.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/utils.h,v
retrieving revision 1.50.2.5
diff -r1.50.2.5 utils.h
26a27
> #include "wx/longlong.h"
233a235,237
> 
> // Get Number of Bytes total on drive 'path' and number of free bytes
> WXDLLEXPORT bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree);
Index: src/common/utilscmn.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/utilscmn.cpp,v
retrieving revision 1.61.2.6
diff -r1.61.2.6 utilscmn.cpp
85a86,89
> #ifdef HAVE_STATFS
> #include <sys/vfs.h>
> #endif // HAVE_STATFS
> 
1182a1187,1300
> }
> 
> //Markus Fieber, 02-18-2001
> //  returns the remaining, available Number of Bytes on the Drive, 
> //  containing the 'path'
> //  TODO: please check GetDiskFreeSpace(..) on MSW without Win32-API
> //  and parse 'df -k' for all others, I can't do (test) that here..
> //  Remember, to have HD-drives formated as "C:", without trailing '\'
> //  but, UNC names, for sure, WITH trailing '\' like "\\MyServer\MyShare\"
> bool 
> wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
> {
>     if (path.Len() == 0)
>         return FALSE;
> 
> #ifdef __WXMSW__
>     LPCTSTR lPath = path.c_str();
> 
> #ifdef __WIN32__
>     PULARGE_INTEGER lBytesFreeOnDisk = 0;
>         
>     return (GetDiskFreeSpaceEx(lPath, (PULARGE_INTEGER)pFree, (PULARGE_INTEGER)pTotal, lBytesFreeOnDisk) != 0);
> 
> #else //__WIN16__
>     LPDWORD lSectorsPerCluster,
>         lBytesPerSector,
>         lNumberOfFreeClusters,
>         lTotalNumberOfClusters;
>                 
>     if (GetDiskFreeSpace(lPath, lSectorsPerCluster, lBytesPerSector, lNumberOfFreeClusters, lTotalNumberOfClusters))
>     {
>         // there's a problem with drives larger than 2GB on non Win32!!
>         //let's calculate it, nevertheless....
>         wxLongLong lBytesPerCluster = (wxLongLong)((*lSectorsPerCluster) * (*lBytesPerSector));
> 
>         *pTotal = (wxLongLong)(lBytesPerCluster * (*lTotalNumberOfClusters));
>         *pFree = (wxLongLong)(lBytesPerCluster * (*lNumberOfFreeClusters));
> 
>         return TRUE;
>     }
>     else
>         return FALSE;
>         
> #endif // !__WIN32__
> #endif //__WXMSW__
> 
> #ifdef __WXMAC__
>         
>     // Macintosh version, by Dominic Mazzoni
>     // include this quick hack if there isn't a c2pstr fn already
>     void my_c2pstr(char *str)
>     {
>         int len = strlen((const char *)str);
>         for(int i = len; i > 0; i--)
>             str[i] = str[i-1];
>         str[0] = ( len > 255 ? 255 : (char)len );
>     }
>         
>     //long wxGetDiskSpace( const char *path )
>     //{
>     wxString lMacPath = wxUnix2MacFilename(path);
> 
>     // We expect something like ":Macintosh HD:wxWindows:"
>     // and we want to find everything up to the second
>     // colon: "Macintosh HD"
>     char* str = new char[path.Len() + 1];
>     strcpy(str, path.c_str());
> 
>     char *colon2 = &str[1];
>     while(*colon2 && *colon2 != ':')
>         colon2++;
>     *colon2 = 0;
>     
>     if (*p == ':')
>         *p++;
>     
>     /* Mac routines want Pascal strings */
>     my_c2pstr(p);
>     
>     HVolumeParam pb;
>         
>     pb.ioCompletion = NULL;
>     pb.ioVolIndex = -1;
>     pb.ioNamePtr = (unsigned char *)p;
>     pb.ioVRefNum = 0;
>     
>     OSErr err = PBHGetVInfo((HParamBlockRec *)&pb, 0);
>     
>     if (err)
>         return FALSE;
>     
>     *pFree = (wxLongLong)((long)pb.ioVFrBlk)*((long)pb.ioVAlBlkSiz);
>     *pTotal = (wxLongLong)((long)pb.ioVNmAlBlks)*((long)pb.ioVAlBlkSiz);
>     
>     delete[] str;
>     
>     return TRUE;
> 
> #endif //__WXMAC__
> 
> #ifdef HAVE_STATFS
> 
>     struct statfs fs;
>     if (0 != statfs(path, &fs))
>     {
>         return FALSE;
>     }
>     *pTotal = (wxLongLong)fs.f_blocks * fs.f_bsize;
>     *pFree = (wxLongLong)fs.f_bavail * fs.f_bsize;
>     return TRUE;
> 
> #endif // HAVE_STATFS
> 
>     return FALSE;

 	  	 

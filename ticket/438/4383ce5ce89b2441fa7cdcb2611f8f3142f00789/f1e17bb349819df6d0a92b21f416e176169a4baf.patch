diff -u -3 -P -r wxWidgets/tests/strings/stdstrings.cpp wxW/tests/strings/stdstrings.cpp
--- wxWidgets/tests/strings/stdstrings.cpp	Thu Jan 01 01:00:00 1970
+++ wxW/tests/strings/stdstrings.cpp	Fri May 07 14:02:46 2004
@@ -0,0 +1,374 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/strings/stdstrings.cpp
+// Purpose:     wxString unit test
+// Author:      Vadim Zeitlin, Wlodzimierz ABX Skiba
+// Created:     2004-05-07
+// RCS-ID:      $Id: stdstrings.cpp,v 1.0 2004/05/07 12:00:00 ABX Exp $
+// Copyright:   (c) 2004 Vadim Zeitlin, Wlodzimierz Skiba
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif // WX_PRECOMP
+
+#include "wx/cppunit.h"
+
+// ----------------------------------------------------------------------------
+// test class
+// ----------------------------------------------------------------------------
+
+class StdStringTestCase : public CppUnit::TestCase
+{
+public:
+    StdStringTestCase();
+
+private:
+    CPPUNIT_TEST_SUITE( StdStringTestCase );
+        CPPUNIT_TEST( StdConstructors );
+        CPPUNIT_TEST( StdAppend );
+        CPPUNIT_TEST( StdAssign );
+        CPPUNIT_TEST( StdCompare );
+        CPPUNIT_TEST( StdErase );
+        CPPUNIT_TEST( StdFind );
+        CPPUNIT_TEST( StdFindFirst );
+        CPPUNIT_TEST( StdFindLast );
+        CPPUNIT_TEST( StdInsert );
+        CPPUNIT_TEST( StdReplace );
+        CPPUNIT_TEST( StdRFind );
+        CPPUNIT_TEST( StdResize );
+        CPPUNIT_TEST( StdSubstr );
+    CPPUNIT_TEST_SUITE_END();
+
+    void StdConstructors();
+    void StdAppend();
+    void StdAssign();
+    void StdCompare();
+    void StdErase();
+    void StdFind();
+    void StdFindFirst();
+    void StdFindLast();
+    void StdInsert();
+    void StdReplace();
+    void StdRFind();
+    void StdResize();
+    void StdSubstr();
+
+    DECLARE_NO_COPY_CLASS(StdStringTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( StdStringTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( StdStringTestCase, "StdStringTestCase" );
+
+StdStringTestCase::StdStringTestCase()
+{
+}
+
+void StdStringTestCase::StdConstructors()
+{
+    wxString s1(_T("abcdefgh")),
+             s2(_T("abcdefghijklm"), 8),
+             s3(_T("abcdefghijklm")),
+             s4(8, _T('a'));
+    wxString s5(s1),
+             s6(s3, 0, 8),
+             s7(s3.begin(), s3.begin() + 8);
+    wxString s8(s1, 4, 8);
+
+    CPPUNIT_ASSERT( s1 == _T("abcdefgh") );
+    CPPUNIT_ASSERT( s2 == s1 );
+    CPPUNIT_ASSERT( s4 == _T("aaaaaaaa") );
+    CPPUNIT_ASSERT( s5 == _T("abcdefgh") );
+    CPPUNIT_ASSERT( s6 == s1 );
+    CPPUNIT_ASSERT( s7 == s1 );
+    CPPUNIT_ASSERT( s8 == _T("efgh") );
+}
+
+void StdStringTestCase::StdAppend()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7, s8;
+
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("abc");
+    s1.append(_T("def"));
+    s2.append(_T("defgh"), 3);
+    s3.append(wxString(_T("abcdef")), 3, 6);
+    s4.append(s1);
+    s5.append(3, _T('a'));
+    s6.append(s1.begin() + 3, s1.end());
+
+    CPPUNIT_ASSERT( s1 == _T("abcdef") );
+    CPPUNIT_ASSERT( s2 == _T("abcdef") );
+    CPPUNIT_ASSERT( s3 == _T("abcdef") );
+    CPPUNIT_ASSERT( s4 == _T("abcabcdef") );
+    CPPUNIT_ASSERT( s5 == _T("abcaaa") );
+    CPPUNIT_ASSERT( s6 == _T("abcdef") );
+}
+
+void StdStringTestCase::StdAssign()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7, s8;
+
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("abc");
+    s1.assign(_T("def"));
+    s2.assign(_T("defgh"), 3);
+    s3.assign(wxString(_T("abcdef")), 3, 6);
+    s4.assign(s1);
+    s5.assign(3, _T('a'));
+    s6.assign(s1.begin() + 1, s1.end());
+
+    CPPUNIT_ASSERT( s1 == _T("def") );
+    CPPUNIT_ASSERT( s2 == _T("def") );
+    CPPUNIT_ASSERT( s3 == _T("def") );
+    CPPUNIT_ASSERT( s4 == _T("def") );
+    CPPUNIT_ASSERT( s5 == _T("aaa") );
+    CPPUNIT_ASSERT( s6 == _T("ef") );
+}
+
+void StdStringTestCase::StdCompare()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7, s8;
+
+    s1 = _T("abcdefgh");
+    s2 = _T("abcdefgh");
+    s3 = _T("abc");
+    s4 = _T("abcdefghi");
+    s5 = _T("aaa");
+    s6 = _T("zzz");
+
+    CPPUNIT_ASSERT( s1.compare(s2) == 0 );
+    CPPUNIT_ASSERT( s1.compare(s3) > 0 );
+    CPPUNIT_ASSERT( s1.compare(s4) < 0 );
+    CPPUNIT_ASSERT( s1.compare(s5) > 0 );
+    CPPUNIT_ASSERT( s1.compare(s6) < 0 );
+    CPPUNIT_ASSERT( s1.compare(1, 12, s1) > 0);
+    CPPUNIT_ASSERT( s1.compare(_T("abcdefgh")) == 0);
+    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh")) == 0);
+    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh"), 7) == 0);
+}
+
+void StdStringTestCase::StdErase()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7;
+
+    s1 = _T("abcdefgh");
+    s2 = _T("abcdefgh");
+    s3 = _T("abc");
+    s4 = _T("abcdefghi");
+    s5 = _T("aaa");
+    s6 = _T("zzz");
+    s7 = _T("zabcdefg");
+
+    s1.erase(1, 1);
+    s2.erase(4, 12);
+    wxString::iterator it = s3.erase(s3.begin() + 1);
+    wxString::iterator it2 = s4.erase(s4.begin() + 4, s4.begin() + 6);
+    wxString::iterator it3 = s7.erase(s7.begin() + 4, s7.begin() + 8);
+
+    CPPUNIT_ASSERT( s1 == _T("acdefgh") );
+    CPPUNIT_ASSERT( s2 == _T("abcd") );
+    CPPUNIT_ASSERT( s3 == _T("ac") );
+    CPPUNIT_ASSERT( s4 == _T("abcdghi") );
+    CPPUNIT_ASSERT( s7 == _T("zabc") );
+    CPPUNIT_ASSERT( *it == _T('c') );
+    CPPUNIT_ASSERT( *it2 == _T('g') );
+    CPPUNIT_ASSERT( it3 == s7.end() );
+}
+
+void StdStringTestCase::StdFind()
+{
+    //                0         1         2
+    //                01234567890123456789012345
+    wxString s1 = _T("abcdefgABCDEFGabcABCabcABC");
+    wxString s2 = _T("gAB");
+
+    CPPUNIT_ASSERT( s1.find(_T('A')) == 7u );
+    CPPUNIT_ASSERT( s1.find(_T('A'), 7) == 7u );
+    CPPUNIT_ASSERT( s1.find(_T('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(_T('C'), 22) == 25u );
+
+    CPPUNIT_ASSERT( s1.find(_T("gAB")) == 6u );
+    CPPUNIT_ASSERT( s1.find(_T("gAB"), 7) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(_T("gAB"), 6) == 6u );
+
+    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 2, 3) == 6u );
+    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 7, 3) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.find(s2) == 6u );
+    CPPUNIT_ASSERT( s1.find(s2, 7) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(s2, 6) == 6u );
+}
+
+void StdStringTestCase::StdFindFirst()
+{
+    //                0         1         2         3
+    //                01234567890123456789012345678901234
+    wxString s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
+    wxString s2 = _T("aaaaaa");
+
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a')) == 6u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a'), 7) == 7u );
+    CPPUNIT_ASSERT( s2.find_first_not_of(_T('a')) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 4) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 7) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghijkl")) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghi"), 0, 4) == 9u );
+
+    CPPUNIT_ASSERT( s1.find_first_of(_T('c')) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_of(_T('v')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_first_of(_T('c'), 10) == 24u );
+
+    CPPUNIT_ASSERT( s1.find_first_of(_T("ijkl")) == 13u );
+    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfg"), 17) == 24u );
+    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfga"), 17, 5) == 24u );
+}
+
+void StdStringTestCase::StdFindLast()
+{
+    //                0         1         2         3
+    //                01234567890123456789012345678901234
+    wxString s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
+    wxString s2 = _T("aaaaaa");
+
+    CPPUNIT_ASSERT( s2.find_last_not_of(_T('a')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d')) == 33u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d'), 25) == 24u );
+
+    CPPUNIT_ASSERT( s1.find_last_not_of(_T("bcd")) == 22u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abc"), 24) == 16u );
+
+    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abcdefghijklmnopqrstuv"), 24, 3) == 16u );
+
+    CPPUNIT_ASSERT( s2.find_last_of(_T('c')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_last_of(_T('a')) == 22u );
+    CPPUNIT_ASSERT( s1.find_last_of(_T('b'), 24) == 23u );
+
+    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklm")) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklma"), 33, 4) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_of(_T("a"), 17) == 17u );
+}
+
+void StdStringTestCase::StdInsert()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
+
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("aaaa");
+    s9 = s10 = _T("cdefg");
+
+    s1.insert(1, _T("cc") );
+    s2.insert(2, _T("cdef"), 3);
+    s3.insert(2, s10);
+    s4.insert(2, s10, 3, 7);
+    s5.insert(1, 2, _T('c'));
+    s6.insert(s6.begin() + 3, _T('X'));
+    s7.insert(s7.begin(), s9.begin(), s9.end() - 1);
+    s8.insert(s8.begin(), 2, _T('c'));
+
+    CPPUNIT_ASSERT( s1 == _T("accaaa") );
+    CPPUNIT_ASSERT( s2 == _T("aacdeaa") );
+    CPPUNIT_ASSERT( s3 == _T("aacdefgaa") );
+    CPPUNIT_ASSERT( s4 == _T("aafgaa") );
+    CPPUNIT_ASSERT( s5 == _T("accaaa") );
+    CPPUNIT_ASSERT( s6 == _T("aaaXa") );
+    CPPUNIT_ASSERT( s7 == _T("cdefaaaa") );
+    CPPUNIT_ASSERT( s8 == _T("ccaaaa") );
+
+    s1 = s2 = s3 = _T("aaaa");
+    s1.insert(0, _T("ccc"), 2);
+    s2.insert(4, _T("ccc"), 2);
+
+    CPPUNIT_ASSERT( s1 == _T("ccaaaa") );
+    CPPUNIT_ASSERT( s2 == _T("aaaacc") );
+}
+
+void StdStringTestCase::StdReplace()
+{
+    wxString s1, s2, s3, s4, s5, s6, s7, s8, s9;
+
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("QWERTYUIOP");
+    s9 = _T("werty");
+
+    s1.replace(3, 4, _T("rtyu"));
+    s1.replace(8, 7, _T("opopop"));
+    s2.replace(10, 12, _T("WWWW"));
+    s3.replace(1, 5, s9);
+    s4.replace(1, 4, s9, 0, 4);
+    s5.replace(1, 2, s9, 1, 12);
+    s6.replace(0, 123, s9, 0, 123);
+    s7.replace(2, 7, s9);
+
+    CPPUNIT_ASSERT( s1 == _T("QWErtyuIopopop") );
+    CPPUNIT_ASSERT( s2 == _T("QWERTYUIOPWWWW") );
+    CPPUNIT_ASSERT( s3 == _T("QwertyUIOP") );
+    CPPUNIT_ASSERT( s4 == _T("QwertYUIOP") );
+    CPPUNIT_ASSERT( s5 == _T("QertyRTYUIOP") );
+    CPPUNIT_ASSERT( s6 == s9);
+    CPPUNIT_ASSERT( s7 == _T("QWwertyP") );
+}
+
+void StdStringTestCase::StdRFind()
+{
+    //                0         1         2
+    //                01234567890123456789012345
+    wxString s1 = _T("abcdefgABCDEFGabcABCabcABC");
+    wxString s2 = _T("gAB");
+    wxString s3 = _T("ab");
+
+    CPPUNIT_ASSERT( s1.rfind(_T('A')) == 23u );
+    CPPUNIT_ASSERT( s1.rfind(_T('A'), 7) == 7u );
+    CPPUNIT_ASSERT( s1.rfind(_T('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(_T('C'), 22) == 19u );
+
+    CPPUNIT_ASSERT( s1.rfind(_T("cAB")) == 22u );
+    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 15) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 21) == 16u );
+
+    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 7, 3) == 6u );
+    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 5, 3) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.rfind(s2) == 6u );
+    CPPUNIT_ASSERT( s1.rfind(s2, 5) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(s2, 6) == 6u );
+    CPPUNIT_ASSERT( s1.rfind(s3, 1) == 0u );
+}
+
+void StdStringTestCase::StdResize()
+{
+    wxString s1, s2, s3, s4;
+
+    s1 = s2 = s3 = s4 = _T("abcABCdefDEF");
+
+    s1.resize( 12 );
+    s2.resize( 10 );
+    s3.resize( 14, _T(' ') );
+    s4.resize( 14, _T('W') );
+
+    CPPUNIT_ASSERT( s1 == _T("abcABCdefDEF") );
+    CPPUNIT_ASSERT( s2 == _T("abcABCdefD") );
+    CPPUNIT_ASSERT( s3 == _T("abcABCdefDEF  ") );
+    CPPUNIT_ASSERT( s4 == _T("abcABCdefDEFWW") );
+}
+
+void StdStringTestCase::StdSubstr()
+{
+    wxString s1 = _T("abcdefgABCDEFG");
+
+    CPPUNIT_ASSERT( s1.substr( 0, 14 ) == s1 );
+    CPPUNIT_ASSERT( s1.substr( 1, 13 ) == _T("bcdefgABCDEFG") );
+    CPPUNIT_ASSERT( s1.substr( 1, 20 ) == _T("bcdefgABCDEFG") );
+    CPPUNIT_ASSERT( s1.substr( 14, 30 ) == _T("") );
+}
+
diff -u -3 -P -r wxWidgets/tests/strings/strings.cpp wxW/tests/strings/strings.cpp
--- wxWidgets/tests/strings/strings.cpp	Tue Apr 20 20:54:28 2004
+++ wxW/tests/strings/strings.cpp	Fri May 07 14:02:43 2004
@@ -45,7 +45,6 @@
         CPPUNIT_TEST( Tokenizer );
         CPPUNIT_TEST( Replace );
         CPPUNIT_TEST( Match );
-        CPPUNIT_TEST( Std );
     CPPUNIT_TEST_SUITE_END();
 
     void String();
@@ -54,10 +53,10 @@
     void Constructors();
     void Extraction();
     void Find();
+    void SingleTokenizerTest( wxChar *str, wxChar *delims, size_t count , wxStringTokenizerMode mode );
     void Tokenizer();
     void Replace();
     void Match();
-    void Std();
 
     DECLARE_NO_COPY_CLASS(StringTestCase)
 };
@@ -180,60 +179,58 @@
     #undef TEST_FIND
 }
 
-void StringTestCase::Tokenizer()
+void StringTestCase::SingleTokenizerTest( wxChar *str, wxChar *delims, size_t count , wxStringTokenizerMode mode )
 {
-    #define TEST_TOKENIZER( str , delims, count , mode )  \
-        {                                                 \
-            wxStringTokenizer tkz( str, delims, mode);    \
-            CPPUNIT_ASSERT( tkz.CountTokens() == count ); \
-                                                          \
-            wxChar *buf, *s = NULL, *last;                \
-                                                          \
-            if ( tkz.GetMode() == wxTOKEN_STRTOK )        \
-            {                                             \
-                buf = new wxChar[wxStrlen(str) + 1];      \
-                wxStrcpy(buf, str);                       \
-                s = wxStrtok(buf, delims, &last);         \
-            }                                             \
-            else                                          \
-            {                                             \
-                buf = NULL;                               \
-            }                                             \
-                                                          \
-            size_t count2 = 0;                            \
-            while ( tkz.HasMoreTokens() )                 \
-            {                                             \
-                wxString token = tkz.GetNextToken();      \
-                if ( buf )                                \
-                {                                         \
-                    CPPUNIT_ASSERT( token == s );         \
-                    s = wxStrtok(NULL, delims, &last);    \
-                }                                         \
-                count2++;                                 \
-            }                                             \
-                                                          \
-            CPPUNIT_ASSERT( count2 == count );            \
-            if ( buf )                                    \
-            {                                             \
-                delete [] buf;                            \
-            }                                             \
-        }
+    wxStringTokenizer tkz( str, delims, mode);
+    CPPUNIT_ASSERT( tkz.CountTokens() == count );
 
-    TEST_TOKENIZER( _T(""),                                           _T(" "),              0, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello, world"),                               _T(" "),              2, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello,   world  "),                           _T(" "),              2, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello, world"),                               _T(","),              2, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello, world!"),                              _T(",!"),             2, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello,, world!"),                             _T(",!"),             3, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("Hello, world!"),                              _T(",!"),             3, wxTOKEN_RET_EMPTY_ALL );
-    TEST_TOKENIZER( _T("username:password:uid:gid:gecos:home:shell"), _T(":"),              7, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 4, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 6, wxTOKEN_RET_EMPTY     );
-    TEST_TOKENIZER( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 9, wxTOKEN_RET_EMPTY_ALL );
-    TEST_TOKENIZER( _T("01/02/99"),                                   _T("/-"),             3, wxTOKEN_DEFAULT       );
-    TEST_TOKENIZER( _T("01-02/99"),                                   _T("/-"),             3, wxTOKEN_RET_DELIMS    );
+    wxChar *buf, *s = NULL, *last;
 
-    #undef TEST_TOKENIZER
+    if ( tkz.GetMode() == wxTOKEN_STRTOK )
+    {                                             
+        buf = new wxChar[wxStrlen(str) + 1];      
+        wxStrcpy(buf, str);                       
+        s = wxStrtok(buf, delims, &last);         
+    }                                             
+    else                                          
+    {                                             
+        buf = NULL;                               
+    }                                             
+                                                  
+    size_t count2 = 0;                            
+    while ( tkz.HasMoreTokens() )                 
+    {                                             
+        wxString token = tkz.GetNextToken();      
+        if ( buf )                                
+        {                                         
+            CPPUNIT_ASSERT( token == s );         
+            s = wxStrtok(NULL, delims, &last);    
+        }                                         
+        count2++;                                 
+    }                                             
+                                                  
+    CPPUNIT_ASSERT( count2 == count );            
+    if ( buf )                                    
+    {                                             
+        delete [] buf;                            
+    }                                             
+}
+
+void StringTestCase::Tokenizer()
+{
+    SingleTokenizerTest( _T(""),                                           _T(" "),              0, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello, world"),                               _T(" "),              2, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello,   world  "),                           _T(" "),              2, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello, world"),                               _T(","),              2, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello, world!"),                              _T(",!"),             2, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello,, world!"),                             _T(",!"),             3, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("Hello, world!"),                              _T(",!"),             3, wxTOKEN_RET_EMPTY_ALL );
+    SingleTokenizerTest( _T("username:password:uid:gid:gecos:home:shell"), _T(":"),              7, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 4, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 6, wxTOKEN_RET_EMPTY     );
+    SingleTokenizerTest( _T("1 \t3\t4  6   "),                             wxDEFAULT_DELIMITERS, 9, wxTOKEN_RET_EMPTY_ALL );
+    SingleTokenizerTest( _T("01/02/99"),                                   _T("/-"),             3, wxTOKEN_DEFAULT       );
+    SingleTokenizerTest( _T("01-02/99"),                                   _T("/-"),             3, wxTOKEN_RET_DELIMS    );
 }
 
 void StringTestCase::Replace()
@@ -272,258 +269,5 @@
     TEST_MATCH( _T(""),          _T("?"),      false );
 
     #undef TEST_MATCH
-}
-
-void StringTestCase::Std()
-{
-    wxString s1(_T("abcdefgh")),
-             s2(_T("abcdefghijklm"), 8),
-             s3(_T("abcdefghijklm")),
-             s4(8, _T('a'));
-    wxString s5(s1),
-             s6(s3, 0, 8),
-             s7(s3.begin(), s3.begin() + 8);
-    wxString s8(s1, 4, 8), s9, s10, s11;
-
-    CPPUNIT_ASSERT( s1 == _T("abcdefgh") );
-    CPPUNIT_ASSERT( s2 == s1 );
-    CPPUNIT_ASSERT( s4 == _T("aaaaaaaa") );
-    CPPUNIT_ASSERT( s5 == _T("abcdefgh") );
-    CPPUNIT_ASSERT( s6 == s1 );
-    CPPUNIT_ASSERT( s7 == s1 );
-    CPPUNIT_ASSERT( s8 == _T("efgh") );
-
-    // test append
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("abc");
-    s1.append(_T("def"));
-    s2.append(_T("defgh"), 3);
-    s3.append(wxString(_T("abcdef")), 3, 6);
-    s4.append(s1);
-    s5.append(3, _T('a'));
-    s6.append(s1.begin() + 3, s1.end());
-
-    CPPUNIT_ASSERT( s1 == _T("abcdef") );
-    CPPUNIT_ASSERT( s2 == _T("abcdef") );
-    CPPUNIT_ASSERT( s3 == _T("abcdef") );
-    CPPUNIT_ASSERT( s4 == _T("abcabcdef") );
-    CPPUNIT_ASSERT( s5 == _T("abcaaa") );
-    CPPUNIT_ASSERT( s6 == _T("abcdef") );
-
-    // test assign
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("abc");
-    s1.assign(_T("def"));
-    s2.assign(_T("defgh"), 3);
-    s3.assign(wxString(_T("abcdef")), 3, 6);
-    s4.assign(s1);
-    s5.assign(3, _T('a'));
-    s6.assign(s1.begin() + 1, s1.end());
-
-    CPPUNIT_ASSERT( s1 == _T("def") );
-    CPPUNIT_ASSERT( s2 == _T("def") );
-    CPPUNIT_ASSERT( s3 == _T("def") );
-    CPPUNIT_ASSERT( s4 == _T("def") );
-    CPPUNIT_ASSERT( s5 == _T("aaa") );
-    CPPUNIT_ASSERT( s6 == _T("ef") );
-
-    // test compare
-    s1 = _T("abcdefgh");
-    s2 = _T("abcdefgh");
-    s3 = _T("abc");
-    s4 = _T("abcdefghi");
-    s5 = _T("aaa");
-    s6 = _T("zzz");
-    s7 = _T("zabcdefg");
-
-    CPPUNIT_ASSERT( s1.compare(s2) == 0 );
-    CPPUNIT_ASSERT( s1.compare(s3) > 0 );
-    CPPUNIT_ASSERT( s1.compare(s4) < 0 );
-    CPPUNIT_ASSERT( s1.compare(s5) > 0 );
-    CPPUNIT_ASSERT( s1.compare(s6) < 0 );
-    CPPUNIT_ASSERT( s1.compare(1, 12, s1) > 0);
-    CPPUNIT_ASSERT( s1.compare(_T("abcdefgh")) == 0);
-    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh")) == 0);
-    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh"), 7) == 0);
-
-    // test erase
-    s1.erase(1, 1);
-    s2.erase(4, 12);
-    wxString::iterator it = s3.erase(s3.begin() + 1);
-    wxString::iterator it2 = s4.erase(s4.begin() + 4, s4.begin() + 6);
-    wxString::iterator it3 = s7.erase(s7.begin() + 4, s7.begin() + 8);
-
-    CPPUNIT_ASSERT( s1 == _T("acdefgh") );
-    CPPUNIT_ASSERT( s2 == _T("abcd") );
-    CPPUNIT_ASSERT( s3 == _T("ac") );
-    CPPUNIT_ASSERT( s4 == _T("abcdghi") );
-    CPPUNIT_ASSERT( s7 == _T("zabc") );
-    CPPUNIT_ASSERT( *it == _T('c') );
-    CPPUNIT_ASSERT( *it2 == _T('g') );
-    CPPUNIT_ASSERT( it3 == s7.end() );
-
-    // find
-    //       0         1         2
-    //       01234567890123456789012345
-    s1 = _T("abcdefgABCDEFGabcABCabcABC");
-    s2 = _T("gAB");
-
-    CPPUNIT_ASSERT( s1.find(_T('A')) == 7u );
-    CPPUNIT_ASSERT( s1.find(_T('A'), 7) == 7u );
-    CPPUNIT_ASSERT( s1.find(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find(_T('C'), 22) == 25u );
-
-    CPPUNIT_ASSERT( s1.find(_T("gAB")) == 6u );
-    CPPUNIT_ASSERT( s1.find(_T("gAB"), 7) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find(_T("gAB"), 6) == 6u );
-
-    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 2, 3) == 6u );
-    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 7, 3) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.find(s2) == 6u );
-    CPPUNIT_ASSERT( s1.find(s2, 7) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find(s2, 6) == 6u );
-
-    // find_first_not_of
-    //       0         1         2         3
-    //       01234567890123456789012345678901234
-    s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
-    s2 = _T("aaaaaa");
-
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a')) == 6u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a'), 7) == 7u );
-    CPPUNIT_ASSERT( s2.find_first_not_of(_T('a')) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 4) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 7) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghijkl")) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghi"), 0, 4) == 9u );
-
-    // find_first_of
-    CPPUNIT_ASSERT( s1.find_first_of(_T('c')) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T('v')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_first_of(_T('c'), 10) == 24u );
-
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ijkl")) == 13u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfg"), 17) == 24u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfga"), 17, 5) == 24u );
-
-    // find_last_not_of
-    //       0         1         2         3
-    //       01234567890123456789012345678901234
-    s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
-    s2 = _T("aaaaaa");
-
-    CPPUNIT_ASSERT( s2.find_last_not_of(_T('a')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d')) == 33u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d'), 25) == 24u );
-
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("bcd")) == 22u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abc"), 24) == 16u );
-
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abcdefghijklmnopqrstuv"), 24, 3) == 16u );
-
-    // find_last_of
-    CPPUNIT_ASSERT( s2.find_last_of(_T('c')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('a')) == 22u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('b'), 24) == 23u );
-
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklm")) == 16u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklma"), 33, 4) == 16u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("a"), 17) == 17u );
-
-    // test insert
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("aaaa");
-    s9 = s10 = _T("cdefg");
-
-    s1.insert(1, _T("cc") );
-    s2.insert(2, _T("cdef"), 3);
-    s3.insert(2, s10);
-    s4.insert(2, s10, 3, 7);
-    s5.insert(1, 2, _T('c'));
-    it = s6.insert(s6.begin() + 3, _T('X'));
-    s7.insert(s7.begin(), s9.begin(), s9.end() - 1);
-    s8.insert(s8.begin(), 2, _T('c'));
-
-    CPPUNIT_ASSERT( s1 == _T("accaaa") );
-    CPPUNIT_ASSERT( s2 == _T("aacdeaa") );
-    CPPUNIT_ASSERT( s3 == _T("aacdefgaa") );
-    CPPUNIT_ASSERT( s4 == _T("aafgaa") );
-    CPPUNIT_ASSERT( s5 == _T("accaaa") );
-    CPPUNIT_ASSERT( s6 == _T("aaaXa") );
-    CPPUNIT_ASSERT( s7 == _T("cdefaaaa") );
-    CPPUNIT_ASSERT( s8 == _T("ccaaaa") );
-
-    s1 = s2 = s3 = _T("aaaa");
-    s1.insert(0, _T("ccc"), 2);
-    s2.insert(4, _T("ccc"), 2);
-
-    CPPUNIT_ASSERT( s1 == _T("ccaaaa") );
-    CPPUNIT_ASSERT( s2 == _T("aaaacc") );
-
-    // test replace
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("QWERTYUIOP");
-    s9 = s10 = _T("werty");
-
-    s1.replace(3, 4, _T("rtyu"));
-    s1.replace(8, 7, _T("opopop"));
-    s2.replace(10, 12, _T("WWWW"));
-    s3.replace(1, 5, s9);
-    s4.replace(1, 4, s9, 0, 4);
-    s5.replace(1, 2, s9, 1, 12);
-    s6.replace(0, 123, s9, 0, 123);
-    s7.replace(2, 7, s9);
-
-    CPPUNIT_ASSERT( s1 == _T("QWErtyuIopopop") );
-    CPPUNIT_ASSERT( s2 == _T("QWERTYUIOPWWWW") );
-    CPPUNIT_ASSERT( s3 == _T("QwertyUIOP") );
-    CPPUNIT_ASSERT( s4 == _T("QwertYUIOP") );
-    CPPUNIT_ASSERT( s5 == _T("QertyRTYUIOP") );
-    CPPUNIT_ASSERT( s6 == s9);
-    CPPUNIT_ASSERT( s7 == _T("QWwertyP") );
-
-    // rfind
-    //       0         1         2
-    //       01234567890123456789012345
-    s1 = _T("abcdefgABCDEFGabcABCabcABC");
-    s2 = _T("gAB");
-    s3 = _T("ab");
-
-    CPPUNIT_ASSERT( s1.rfind(_T('A')) == 23u );
-    CPPUNIT_ASSERT( s1.rfind(_T('A'), 7) == 7u );
-    CPPUNIT_ASSERT( s1.rfind(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T('C'), 22) == 19u );
-
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB")) == 22u );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 15) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 21) == 16u );
-
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 7, 3) == 6u );
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 5, 3) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.rfind(s2) == 6u );
-    CPPUNIT_ASSERT( s1.rfind(s2, 5) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(s2, 6) == 6u );
-    CPPUNIT_ASSERT( s1.rfind(s3, 1) == 0u );
-
-    // resize
-    s1 = s2 = s3 = s4 = _T("abcABCdefDEF");
-
-    s1.resize( 12 );
-    s2.resize( 10 );
-    s3.resize( 14, _T(' ') );
-    s4.resize( 14, _T('W') );
-
-    CPPUNIT_ASSERT( s1 == _T("abcABCdefDEF") );
-    CPPUNIT_ASSERT( s2 == _T("abcABCdefD") );
-    CPPUNIT_ASSERT( s3 == _T("abcABCdefDEF  ") );
-    CPPUNIT_ASSERT( s4 == _T("abcABCdefDEFWW") );
-
-    // substr
-    s1 = _T("abcdefgABCDEFG");
-
-    CPPUNIT_ASSERT( s1.substr( 0, 14 ) == s1 );
-    CPPUNIT_ASSERT( s1.substr( 1, 13 ) == _T("bcdefgABCDEFG") );
-    CPPUNIT_ASSERT( s1.substr( 1, 20 ) == _T("bcdefgABCDEFG") );
-    CPPUNIT_ASSERT( s1.substr( 14, 30 ) == _T("") );
 }
 
diff -u -3 -P -r wxWidgets/tests/test.bkl wxW/tests/test.bkl
--- wxWidgets/tests/test.bkl	Tue May 04 10:27:38 2004
+++ wxW/tests/test.bkl	Fri May 07 11:32:26 2004
@@ -17,6 +17,7 @@
             arrays/arrays.cpp
             longlong/longlong.cpp
             strings/strings.cpp
+            strings/stdstrings.cpp
             strings/unicode.cpp
             streams/bstream.cpp
             streams/ffilestream.cpp

 	  	 

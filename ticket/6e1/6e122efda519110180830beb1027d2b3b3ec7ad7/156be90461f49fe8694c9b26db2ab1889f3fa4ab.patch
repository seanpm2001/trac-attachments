Index: include/wx/html/helpwnd.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/helpwnd.h,v
retrieving revision 1.6
diff -u -r1.6 helpwnd.h
--- include/wx/html/helpwnd.h	2006/09/05 20:45:45	1.6
+++ include/wx/html/helpwnd.h	2006/10/06 18:24:18
@@ -295,37 +295,6 @@
     wxID_HTML_COUNTINFO
 };
 
-/*!
- * Help window event
- */
-
-class WXDLLIMPEXP_HTML wxHtmlWindowEvent: public wxNotifyEvent
-{
-public:
-    wxHtmlWindowEvent(wxEventType commandType = wxEVT_NULL, int id = 0):
-                 wxNotifyEvent(commandType, id)
-    {
-
-    }
-
-    void SetURL(const wxString& url) { m_url = url; }
-    const wxString& GetURL() const { return m_url; }
-
-private:
-    wxString    m_url;
-
-    DECLARE_DYNAMIC_CLASS(wxHtmlWindowEvent)
-};
-
-typedef void (wxEvtHandler::*wxHtmlWindowEventFunction)(wxHtmlWindowEvent&);
-
-BEGIN_DECLARE_EVENT_TYPES()
-    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_HTML,
-                                wxEVT_COMMAND_HTMLWINDOW_URL_CLICKED, 1000)
-END_DECLARE_EVENT_TYPES()
-
-#define EVT_HTMLWINDOW_URL_CLICKED(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_HTMLWINDOW_URL_CLICKED, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxHtmlWindowEventFunction) & fn, (wxObject *) NULL ),
-
 #endif // wxUSE_WXHTML_HELP
 
 #endif
Index: include/wx/html/htmlwin.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/html/htmlwin.h,v
retrieving revision 1.80
diff -u -r1.80 htmlwin.h
--- include/wx/html/htmlwin.h	2006/09/05 20:45:46	1.80
+++ include/wx/html/htmlwin.h	2006/10/06 21:40:49
@@ -29,6 +29,8 @@
 class wxHtmlHistoryArray;
 class wxHtmlProcessorList;
 class WXDLLIMPEXP_HTML wxHtmlWinAutoScrollTimer;
+class wxHtmlCellEvent;
+class wxHtmlLinkEvent;
 
 
 // wxHtmlWindow flags:
@@ -125,6 +127,11 @@
         Returns mouse cursor of given @a type.
      */
     virtual wxCursor GetHTMLCursor(HTMLCursor type) const = 0;
+
+    /// Posts the given event to the event handler of the HTML rendering window.
+    /// Returns true if the event was processed; false otherwise.
+    virtual bool PostHTMLEvent(wxHtmlCellEvent &ev);
+    virtual bool PostHTMLEvent(wxHtmlLinkEvent &ev);
 };
 
 /**
@@ -545,6 +554,110 @@
     DECLARE_EVENT_TABLE()
     DECLARE_NO_COPY_CLASS(wxHtmlWindow)
 };
+
+
+
+
+BEGIN_DECLARE_EVENT_TYPES()
+    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_HTML,
+                                wxEVT_COMMAND_HTMLWINDOW_CELL_CLICKED, 1000)
+    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_HTML,
+                                wxEVT_COMMAND_HTMLWINDOW_CELL_HOVER, 1001)
+    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_HTML,
+                                wxEVT_COMMAND_HTMLWINDOW_LINK_CLICKED, 1002)
+END_DECLARE_EVENT_TYPES()
+
+
+/*!
+ * Html cell window event
+ */
+
+class WXDLLIMPEXP_HTML wxHtmlCellEvent : public wxCommandEvent
+{
+public:
+    wxHtmlCellEvent() {}
+    wxHtmlCellEvent(wxEventType commandType, int id,
+                    wxHtmlCell *cell, const wxPoint &pt,
+                    const wxMouseEvent &ev)
+        : wxCommandEvent(commandType, id)
+    {
+        m_cell = cell;
+        m_pt = pt;
+        m_mouseEvent = ev;
+        m_bLinkWasClicked = false;
+    }
+
+    wxHtmlCell* GetCell() const { return m_cell; }
+    wxPoint GetPoint() const { return m_pt; }
+    wxMouseEvent GetMouseEvent() const { return m_mouseEvent; }
+
+    void SetLinkClicked(bool linkclicked) { m_bLinkWasClicked=linkclicked; }
+    bool GetLinkClicked() const { return m_bLinkWasClicked; }
+
+    // default copy ctor, assignment operator and dtor are ok
+    virtual wxEvent *Clone() const { return new wxHtmlCellEvent(*this); }
+
+private:
+    wxHtmlCell *m_cell;
+    wxMouseEvent m_mouseEvent;
+    wxPoint m_pt;
+
+    bool m_bLinkWasClicked;
+
+    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxHtmlCellEvent)
+};
+
+
+
+/*!
+ * Html link event
+ */
+
+class WXDLLIMPEXP_HTML wxHtmlLinkEvent : public wxCommandEvent
+{
+public:
+    wxHtmlLinkEvent() {}
+    wxHtmlLinkEvent(int id, const wxHtmlLinkInfo &linkinfo)
+        : wxCommandEvent(wxEVT_COMMAND_HTMLWINDOW_LINK_CLICKED, id)
+    {
+        m_linkInfo = linkinfo;
+    }
+
+    const wxHtmlLinkInfo &GetLinkInfo() const { return m_linkInfo; }
+
+    // default copy ctor, assignment operator and dtor are ok
+    virtual wxEvent *Clone() const { return new wxHtmlLinkEvent(*this); }
+
+private:
+    wxHtmlLinkInfo m_linkInfo;
+
+    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxHtmlLinkEvent)
+};
+
+
+typedef void (wxEvtHandler::*wxHtmlCellEventFunction)(wxHtmlCellEvent&);
+typedef void (wxEvtHandler::*wxHtmlLinkEventFunction)(wxHtmlLinkEvent&);
+
+#define wxHtmlCellEventHandler(func) \
+    (wxObjectEventFunction)(wxEventFunction)wxStaticCastEvent(wxHtmlCellEventFunction, &func)
+#define wxHtmlLinkEventHandler(func) \
+    (wxObjectEventFunction)(wxEventFunction)wxStaticCastEvent(wxHtmlLinkEventFunction, &func)
+
+#define EVT_HTMLWINDOW_CELL_CLICKED(id, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_HTMLWINDOW_CELL_CLICKED, id, wxHtmlCellEventHandler(fn))
+#define EVT_HTMLWINDOW_CELL_HOVER(id, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_HTMLWINDOW_CELL_HOVER, id, wxHtmlCellEventHandler(fn))
+#define EVT_HTMLWINDOW_LINK_CLICKED(id, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_HTMLWINDOW_LINK_CLICKED, id, wxHtmlLinkEventHandler(fn))
+
+#ifdef _WX_DEFINE_DATE_EVENTS_
+    DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_CELL_CLICKED)
+    DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_CELL_HOVER)
+    DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_LINK_CLICKED)
+
+    IMPLEMENT_DYNAMIC_CLASS(wxHtmlCellEvent, wxCommandEvent)
+    IMPLEMENT_DYNAMIC_CLASS(wxHtmlLinkEvent, wxCommandEvent)
+#endif
 
 
 #endif // wxUSE_HTML
Index: src/html/helpwnd.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/helpwnd.cpp,v
retrieving revision 1.17
diff -u -r1.17 helpwnd.cpp
--- src/html/helpwnd.cpp	2006/09/05 20:47:14	1.17
+++ src/html/helpwnd.cpp	2006/10/06 18:24:18
@@ -105,7 +105,6 @@
 //--------------------------------------------------------------------------
 
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_URL_CLICKED)
-IMPLEMENT_DYNAMIC_CLASS(wxHtmlWindowEvent, wxNotifyEvent)
 
 class wxHtmlHelpHtmlWindow : public wxHtmlWindow
 {
@@ -116,15 +115,10 @@
             SetStandardFonts();
         }
 
-        virtual void OnLinkClicked(const wxHtmlLinkInfo& link)
+        void OnLinkClicked(wxHtmlLinkEvent& ev)
         {
-            wxHtmlWindowEvent event(wxEVT_COMMAND_HTMLWINDOW_URL_CLICKED, GetId());
-            event.SetURL(link.GetHref());
-            if (!ProcessEvent(event))
-            {
-                wxHtmlWindow::OnLinkClicked(link);
-            }
-            const wxMouseEvent *e = link.GetEvent();
+
+            const wxMouseEvent *e = ev.GetLinkInfo().GetEvent();
             if (e == NULL || e->LeftUp())
                 m_Window->NotifyPageChanged();
         }
@@ -149,7 +143,12 @@
         wxHtmlHelpWindow *m_Window;
 
     DECLARE_NO_COPY_CLASS(wxHtmlHelpHtmlWindow)
+    DECLARE_EVENT_TABLE()
 };
+
+BEGIN_EVENT_TABLE(wxHtmlHelpHtmlWindow, wxHtmlWindow)
+    EVT_HTMLWINDOW_LINK_CLICKED(wxID_ANY, wxHtmlHelpHtmlWindow::OnLinkClicked)
+END_EVENT_TABLE()
 
 
 //---------------------------------------------------------------------------
Index: src/html/htmlwin.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/html/htmlwin.cpp,v
retrieving revision 1.127
diff -u -r1.127 htmlwin.cpp
--- src/html/htmlwin.cpp	2006/08/10 15:46:49	1.127
+++ src/html/htmlwin.cpp	2006/10/06 21:40:11
@@ -34,7 +34,29 @@
 #include "wx/arrimpl.cpp"
 #include "wx/listimpl.cpp"
 
+IMPLEMENT_DYNAMIC_CLASS(wxHtmlLinkEvent, wxCommandEvent)
+IMPLEMENT_DYNAMIC_CLASS(wxHtmlCellEvent, wxCommandEvent)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_CELL_CLICKED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_CELL_HOVER)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_HTMLWINDOW_LINK_CLICKED)
 
+
+
+//-----------------------------------------------------------------------------
+// wxHtmlWindowInterface
+//-----------------------------------------------------------------------------
+
+bool wxHtmlWindowInterface::PostHTMLEvent(wxHtmlCellEvent &ev)
+{
+    return GetHTMLWindow()->GetEventHandler()->ProcessEvent(ev);
+}
+
+bool wxHtmlWindowInterface::PostHTMLEvent(wxHtmlLinkEvent &ev)
+{
+    return GetHTMLWindow()->GetEventHandler()->ProcessEvent(ev);
+}
+
+
 #if wxUSE_CLIPBOARD
 // ----------------------------------------------------------------------------
 // wxHtmlWinAutoScrollTimer: the timer used to generate a stream of scroll
@@ -227,18 +249,33 @@
                                             wxCoord x, wxCoord y,
                                             const wxMouseEvent& event)
 {
-    wxCHECK_MSG( cell, false, _T("can't be called with NULL cell") );
+    wxHtmlCellEvent ev(wxEVT_COMMAND_HTMLWINDOW_CELL_CLICKED,
+                       m_interface->GetHTMLWindow()->GetId(),
+                       cell, wxPoint(x,y), event);
+    if (!m_interface->PostHTMLEvent(ev))
+    {
+        wxASSERT_MSG( ev.GetCell(), _T("can't be called with NULL cell") );
+    
+        ev.GetCell()->ProcessMouseClick(m_interface, ev.GetPoint(), ev.GetMouseEvent());
+    }
 
-    return cell->ProcessMouseClick(m_interface, wxPoint(x, y), event);
+    // true if a link was clicked, false otherwise
+    return ev.GetLinkClicked();
 }
 
-void wxHtmlWindowMouseHelper::OnCellMouseHover(wxHtmlCell * WXUNUSED(cell),
-                                               wxCoord WXUNUSED(x),
-                                               wxCoord WXUNUSED(y))
+void wxHtmlWindowMouseHelper::OnCellMouseHover(wxHtmlCell * cell,
+                                               wxCoord x,
+                                               wxCoord y)
 {
-    // do nothing here
+    wxHtmlCellEvent ev(wxEVT_COMMAND_HTMLWINDOW_CELL_HOVER,
+                       m_interface->GetHTMLWindow()->GetId(),
+                       cell, wxPoint(x,y), wxMouseEvent());
+    m_interface->PostHTMLEvent(ev);
 }
 
+
+
+
 //-----------------------------------------------------------------------------
 // wxHtmlWindow
 //-----------------------------------------------------------------------------
@@ -926,9 +963,14 @@
 
 void wxHtmlWindow::OnLinkClicked(const wxHtmlLinkInfo& link)
 {
-    const wxMouseEvent *e = link.GetEvent();
-    if (e == NULL || e->LeftUp())
-        LoadPage(link.GetHref());
+    wxHtmlLinkEvent event(GetHTMLWindow()->GetId(), link);
+    if (!PostHTMLEvent(event))
+    {
+        // as default behaviour load the URL in this window
+        const wxMouseEvent *e = link.GetEvent();
+        if (e == NULL || e->LeftUp())
+            LoadPage(link.GetHref());
+    }
 }
 
 void wxHtmlWindow::OnEraseBackground(wxEraseEvent& event)
@@ -1256,7 +1298,8 @@
                     if ( m_tmpSelFromCell->IsBefore(selcell) )
                     {
                         m_selection->Set(m_tmpSelFromPos, m_tmpSelFromCell,
-                                         wxPoint(x,y), selcell);                                    }
+                                         wxPoint(x,y), selcell);
+                    }
                     else
                     {
                         m_selection->Set(wxPoint(x,y), selcell,
Index: include/wx/htmllbox.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/htmllbox.h,v
retrieving revision 1.15
diff -u -r1.15 htmllbox.h
--- include/wx/htmllbox.h	2006/04/14 20:43:03	1.15
+++ include/wx/htmllbox.h	2006/10/06 19:58:09
@@ -111,7 +111,11 @@
     // This method may be overriden to handle clicking on a link in
     // the listbox. By default, clicking links is ignored.
     virtual void OnLinkClicked(size_t WXUNUSED(n),
-                               const wxHtmlLinkInfo& WXUNUSED(link)) {}
+                               const wxHtmlLinkInfo& link) 
+    {
+        wxHtmlLinkEvent event(GetHTMLWindow()->GetId(), link);
+        PostHTMLEvent(event);
+    }
 
     // event handlers
     void OnSize(wxSizeEvent& event);

 	  	 

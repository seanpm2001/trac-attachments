Index: configure.in
===================================================================
RCS file: /home/wxcvs/wxWindows/configure.in,v
retrieving revision 1.314.2.43
diff -u -r1.314.2.43 configure.in
--- configure.in	2001/04/24 13:34:49	1.314.2.43
+++ configure.in	2001/06/24 04:21:15
@@ -271,6 +271,306 @@
 ])
 
 dnl ---------------------------------------------------------------------------
+dnl From fileutils/configure.in
+dnl
+dnl Try to determine how a program can obtain filesystem usage information.
+dnl If successful, define the appropriate symbol (see fsusage.c) and
+dnl execute ACTION-IF-FOUND.  Otherwise, execute ACTION-IF-NOT-FOUND.
+dnl
+dnl jm_FILE_SYSTEM_USAGE([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+dnl ---------------------------------------------------------------------------
+
+AC_DEFUN(jm_FILE_SYSTEM_USAGE,
+[
+
+echo "checking how to get filesystem space usage..."
+ac_fsusage_space=no
+
+# Perform only the link test since it seems there are no variants of the
+# statvfs function.  This check is more than just AC_CHECK_FUNCS(statvfs)
+# because that got a false positive on SCO OSR5.  Adding the declaration
+# of a `struct statvfs' causes this test to fail (as it should) on such
+# systems.  That system is reported to work fine with STAT_STATFS4 which
+# is what it gets when this test fails.
+if test $ac_fsusage_space = no; then
+  # SVR4
+  AC_CACHE_CHECK([for statvfs function (SVR4)], fu_cv_sys_stat_statvfs,
+     [AC_TRY_LINK([#include <sys/types.h>
+#include <sys/statvfs.h>],
+              [struct statvfs fsd; statvfs (0, &fsd);],
+              fu_cv_sys_stat_statvfs=yes,
+              fu_cv_sys_stat_statvfs=no)])
+  if test $fu_cv_sys_stat_statvfs = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATVFS, 1,
+          [  Define if there is a function named statvfs.  (SVR4)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+  # DEC Alpha running OSF/1
+  AC_MSG_CHECKING([for 3-argument statfs function (DEC OSF/1)])
+  AC_CACHE_VAL(fu_cv_sys_stat_statfs3_osf1,
+  [AC_TRY_RUN([
+#include <sys/param.h>
+#include <sys/types.h>
+#include <sys/mount.h>
+  main ()
+  {
+    struct statfs fsd;
+    fsd.f_fsize = 0;
+    exit (statfs (".", &fsd, sizeof (struct statfs)));
+  }],
+  fu_cv_sys_stat_statfs3_osf1=yes,
+  fu_cv_sys_stat_statfs3_osf1=no,
+  fu_cv_sys_stat_statfs3_osf1=no)])
+  AC_MSG_RESULT($fu_cv_sys_stat_statfs3_osf1)
+  if test $fu_cv_sys_stat_statfs3_osf1 = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATFS3_OSF1, 1,
+          [   Define if  statfs takes 3 args.  (DEC Alpha running OSF/1)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+# AIX
+  AC_MSG_CHECKING([for two-argument statfs with statfs.bsize dnl
+member (AIX, 4.3BSD)])
+  AC_CACHE_VAL(fu_cv_sys_stat_statfs2_bsize,
+  [AC_TRY_RUN([
+#ifdef HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_MOUNT_H
+#include <sys/mount.h>
+#endif
+#ifdef HAVE_SYS_VFS_H
+#include <sys/vfs.h>
+#endif
+  main ()
+  {
+  struct statfs fsd;
+  fsd.f_bsize = 0;
+  exit (statfs (".", &fsd));
+  }],
+  fu_cv_sys_stat_statfs2_bsize=yes,
+  fu_cv_sys_stat_statfs2_bsize=no,
+  fu_cv_sys_stat_statfs2_bsize=no)])
+  AC_MSG_RESULT($fu_cv_sys_stat_statfs2_bsize)
+  if test $fu_cv_sys_stat_statfs2_bsize = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATFS2_BSIZE, 1,
+[  Define if statfs takes 2 args and struct statfs has a field named f_bsize.
+   (4.3BSD, SunOS 4, HP-UX, AIX PS/2)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+# SVR3
+  AC_MSG_CHECKING([for four-argument statfs (AIX-3.2.5, SVR3)])
+  AC_CACHE_VAL(fu_cv_sys_stat_statfs4,
+  [AC_TRY_RUN([#include <sys/types.h>
+#include <sys/statfs.h>
+  main ()
+  {
+  struct statfs fsd;
+  exit (statfs (".", &fsd, sizeof fsd, 0));
+  }],
+    fu_cv_sys_stat_statfs4=yes,
+    fu_cv_sys_stat_statfs4=no,
+    fu_cv_sys_stat_statfs4=no)])
+  AC_MSG_RESULT($fu_cv_sys_stat_statfs4)
+  if test $fu_cv_sys_stat_statfs4 = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATFS4, 1,
+          [  Define if statfs takes 4 args.  (SVR3, Dynix, Irix, Dolphin)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+# 4.4BSD and NetBSD
+  AC_MSG_CHECKING([for two-argument statfs with statfs.fsize dnl
+member (4.4BSD and NetBSD)])
+  AC_CACHE_VAL(fu_cv_sys_stat_statfs2_fsize,
+  [AC_TRY_RUN([#include <sys/types.h>
+#ifdef HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_MOUNT_H
+#include <sys/mount.h>
+#endif
+  main ()
+  {
+  struct statfs fsd;
+  fsd.f_fsize = 0;
+  exit (statfs (".", &fsd));
+  }],
+  fu_cv_sys_stat_statfs2_fsize=yes,
+  fu_cv_sys_stat_statfs2_fsize=no,
+  fu_cv_sys_stat_statfs2_fsize=no)])
+  AC_MSG_RESULT($fu_cv_sys_stat_statfs2_fsize)
+  if test $fu_cv_sys_stat_statfs2_fsize = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATFS2_FSIZE, 1,
+[  Define if statfs takes 2 args and struct statfs has a field named f_fsize.
+   (4.4BSD, NetBSD)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+  # Ultrix
+  AC_MSG_CHECKING([for two-argument statfs with struct fs_data (Ultrix)])
+  AC_CACHE_VAL(fu_cv_sys_stat_fs_data,
+  [AC_TRY_RUN([#include <sys/types.h>
+#ifdef HAVE_SYS_PARAM_H
+#include <sys/param.h>
+#endif
+#ifdef HAVE_SYS_MOUNT_H
+#include <sys/mount.h>
+#endif
+#ifdef HAVE_SYS_FS_TYPES_H
+#include <sys/fs_types.h>
+#endif
+  main ()
+  {
+  struct fs_data fsd;
+  /* Ultrix's statfs returns 1 for success,
+     0 for not mounted, -1 for failure.  */
+  exit (statfs (".", &fsd) != 1);
+  }],
+  fu_cv_sys_stat_fs_data=yes,
+  fu_cv_sys_stat_fs_data=no,
+  fu_cv_sys_stat_fs_data=no)])
+  AC_MSG_RESULT($fu_cv_sys_stat_fs_data)
+  if test $fu_cv_sys_stat_fs_data = yes; then
+    ac_fsusage_space=yes
+    AC_DEFINE(STAT_STATFS2_FS_DATA, 1,
+[  Define if statfs takes 2 args and the second argument has
+   type struct fs_data.  (Ultrix)])
+  fi
+fi
+
+if test $ac_fsusage_space = no; then
+  # SVR2
+  AC_TRY_CPP([#include <sys/filsys.h>
+    ],
+    AC_DEFINE(STAT_READ_FILSYS, 1,
+      [Define if there is no specific function for reading filesystems usage
+       information and you have the <sys/filsys.h> header file.  (SVR2)])
+    ac_fsusage_space=yes)
+fi
+
+# Check for SunOS statfs brokenness wrt partitions 2GB and larger.
+# If <sys/vfs.h> exists and struct statfs has a member named f_spare,
+# enable the work-around code in fsusage.c.
+AC_MSG_CHECKING([for statfs that truncates block counts])
+AC_CACHE_VAL(fu_cv_sys_truncating_statfs,
+[AC_TRY_COMPILE([
+#if !defined(sun) && !defined(__sun)
+choke -- this is a workaround for a Sun-specific problem
+#endif
+#include <sys/types.h>
+#include <sys/vfs.h>],
+[struct statfs t; long c = *(t.f_spare);],
+fu_cv_sys_truncating_statfs=yes,
+fu_cv_sys_truncating_statfs=no,
+)])
+if test $fu_cv_sys_truncating_statfs = yes; then
+  AC_DEFINE(STATFS_TRUNCATES_BLOCK_COUNTS, 1,
+[  Define if the block counts reported by statfs may be truncated to 2GB
+   and the correct values may be stored in the f_spare array.
+   (SunOS 4.1.2, 4.1.3, and 4.1.3_U1 are reported to have this problem.
+   SunOS 4.1.1 seems not to be affected.)])
+fi
+AC_MSG_RESULT($fu_cv_sys_truncating_statfs)
+
+])
+
+dnl From Paul Eggert.
+
+# Define HAVE_INTTYPES_H if <inttypes.h> exists,
+# doesn't clash with <sys/types.h>, and declares uintmax_t.
+
+AC_DEFUN(jm_AC_HEADER_INTTYPES_H,
+[
+  AC_CACHE_CHECK([for inttypes.h], jm_ac_cv_header_inttypes_h,
+  [AC_TRY_COMPILE(
+    [#include <sys/types.h>
+#include <inttypes.h>],
+    [uintmax_t i = (uintmax_t) -1;],
+    jm_ac_cv_header_inttypes_h=yes,
+    jm_ac_cv_header_inttypes_h=no)])
+  if test $jm_ac_cv_header_inttypes_h = yes; then
+    AC_DEFINE_UNQUOTED(HAVE_INTTYPES_H, 1,
+[Define if <inttypes.h> exists, doesn't clash with <sys/types.h>,
+   and declares uintmax_t. ])
+  fi
+])
+
+dnl From Paul Eggert.
+
+AC_DEFUN(jm_AC_TYPE_UNSIGNED_LONG_LONG,
+[
+  AC_CACHE_CHECK([for unsigned long long], ac_cv_type_unsigned_long_long,
+  [AC_TRY_LINK([unsigned long long ull = 1; int i = 63;],
+    [unsigned long long ullmax = (unsigned long long) -1;
+     return ull << i | ull >> i | ullmax / ull | ullmax % ull;],
+    ac_cv_type_unsigned_long_long=yes,
+    ac_cv_type_unsigned_long_long=no)])
+  if test $ac_cv_type_unsigned_long_long = yes; then
+    AC_DEFINE(HAVE_UNSIGNED_LONG_LONG, 1,
+      [Define if you have the unsigned long long type.])
+  fi
+])
+
+dnl From Paul Eggert.
+
+AC_PREREQ(2.13)
+
+# Define uintmax_t to `unsigned long' or `unsigned long long'
+# if <inttypes.h> does not exist.
+
+AC_DEFUN(jm_AC_TYPE_UINTMAX_T,
+[
+  AC_REQUIRE([jm_AC_HEADER_INTTYPES_H])
+  if test $jm_ac_cv_header_inttypes_h = no; then
+    AC_REQUIRE([jm_AC_TYPE_UNSIGNED_LONG_LONG])
+    test $ac_cv_type_unsigned_long_long = yes \
+      && ac_type='unsigned long long' \
+      || ac_type='unsigned long'
+    AC_DEFINE_UNQUOTED(uintmax_t, $ac_type,
+[  Define to unsigned long or unsigned long long
+   if <inttypes.h> doesn't define.])
+  fi
+])
+
+dnl ---------------------------------------------------------------------------
+dnl configure wxGetDiskSpace
+dnl ---------------------------------------------------------------------------
+
+AC_DEFUN(WX_AC_GETDISKSPACE,
+[
+  wx_cv_use_getdiskspace=0
+  if test "$USE_WIN32" = 1; then
+    wx_cv_use_getdiskspace=1
+  fi
+  if test "$USE_UNIX" = 1; then
+    AC_CHECK_HEADERS( \
+      sys/statfs.h \
+      sys/statvfs.h \
+      sys/vfs.h \
+    )
+    jm_AC_TYPE_UINTMAX_T
+    jm_FILE_SYSTEM_USAGE
+    if test "$ac_fsusage_space" = "yes"; then
+      wx_cv_use_getdiskspace=1
+    fi
+  fi
+  AC_DEFINE_UNQUOTED(wxUSE_GETDISKSPACE, $wx_cv_use_getdiskspace, 
+[Define if wxGetDiskSpace is available.])
+])
+
+dnl ---------------------------------------------------------------------------
 dnl override AC_ARG_ENABLE/WITH to cache the results in .cache file
 dnl ---------------------------------------------------------------------------
 
@@ -781,6 +1081,7 @@
   DEFAULT_wxUSE_FS_ZIP=no
   DEFAULT_wxUSE_BUSYINFO=no
   DEFAULT_wxUSE_ZIPSTREAM=no
+  DEFAULT_wxUSE_GETDISKSPACE=no
   DEFAULT_wxUSE_VALIDATORS=yes
 
   DEFAULT_wxUSE_ACCEL=no
@@ -902,6 +1203,7 @@
   DEFAULT_wxUSE_FS_ZIP=yes
   DEFAULT_wxUSE_BUSYINFO=yes
   DEFAULT_wxUSE_ZIPSTREAM=yes
+  DEFAULT_wxUSE_GETDISKSPACE=yes
   DEFAULT_wxUSE_VALIDATORS=yes
 
   DEFAULT_wxUSE_ACCEL=yes
@@ -1062,6 +1364,7 @@
 WX_ARG_ENABLE(fs_inet,       [  --enable-fs_inet        use virtual HTTP/FTP filesystems], wxUSE_FS_INET)
 WX_ARG_ENABLE(fs_zip,        [  --enable-fs_zip         use virtual ZIP filesystems], wxUSE_FS_ZIP)
 WX_ARG_ENABLE(zipstream,     [  --enable-zipstream      use wxZipInputStream], wxUSE_ZIPSTREAM)
+WX_ARG_ENABLE(getdiskspace,  [  --enable-getdiskspace   use wxGetDiskSpace], wxUSE_GETDISKSPACE)
 
 WX_ARG_ENABLE(catch_segvs,   [  --enable-catch_segvs    catch signals and pass them to wxApp::OnFatalException], wxUSE_ON_FATAL_EXCEPTION)
 
@@ -2978,6 +3281,10 @@
 
 if test "$wxUSE_STREAMS" = "yes" ; then
   AC_DEFINE(wxUSE_STREAMS)
+fi
+
+if test "$wxUSE_GETDISKSPACE" = "yes" ; then
+  WX_AC_GETDISKSPACE
 fi
 
 dnl ------------------------------------------------------------------------
Index: setup.h.in
===================================================================
RCS file: /home/wxcvs/wxWindows/setup.h.in,v
retrieving revision 1.33.2.7
diff -u -r1.33.2.7 setup.h.in
--- setup.h.in	2001/02/08 11:16:06	1.33.2.7
+++ setup.h.in	2001/06/24 04:21:16
@@ -48,6 +48,10 @@
 /* Define to `int' if <sys/types.h> doesn't define.  */
 #undef uid_t
 
+/* Define to unsigned long or unsigned long long if <inttypes.h> doesn't
+ * define. */
+#undef uintmax_t
+
 /* Define if your processor stores words with the most significant
    byte first (like Motorola and SPARC, unlike Intel and VAX).  */
 #undef WORDS_BIGENDIAN
@@ -587,6 +591,11 @@
 #define wxUSE_FS_ZIP 0
 
 /*
+ * wxGetDiskSpace
+ */
+#define wxUSE_GETDISKSPACE 0
+
+/*
  * A class that shows info window when app is busy
  * (works exactly like wxBusyCursor)
  */
@@ -761,6 +770,10 @@
 /* Define if you have the <fnmatch.h> header file.  */
 #undef HAVE_FNMATCH_H
 
+/* Define if <inttypes.h> exists, doesn't clash with <sys/types.h>, and
+ * declares uintmax_t. */
+#undef HAVE_INTTYPES_H
+
 /* Define if you have the <iostream> header file.  */
 #undef HAVE_IOSTREAM
 
@@ -773,6 +786,15 @@
 /* Define if you have the <strings.h> header file.  */
 #undef HAVE_STRINGS_H
 
+/* Define if you have the <sys/statfs.h> header file. */
+#undef HAVE_SYS_STATFS_H
+
+/* Define if you have the <sys/statvfs.h> header file. */
+#undef HAVE_SYS_STATVFS_H
+
+/* Define if you have the <sys/vfs.h> header file. */
+#undef HAVE_SYS_VFS_H
+
 /* Define if you have the <unistd.h> header file.  */
 #undef HAVE_UNISTD_H
 
@@ -784,5 +806,36 @@
 
 /* Define this if you are using gtk and gdk contains support for X11R6 XIM */
 #undef HAVE_XIM
+
+/* Define if there is no specific function for reading filesystems usage
+ * information and you have the <sys/filsys.h> header file. (SVR2) */
+#undef STAT_READ_FILSYS
+
+/* Define if statfs takes 2 args and struct statfs has a field named f_bsize.
+ * (4.3BSD, SunOS 4, HP-UX, AIX PS/2) */
+#undef STAT_STATFS2_BSIZE
+
+/* Define if statfs takes 2 args and struct statfs has a field named f_fsize.
+ * (4.4BSD, NetBSD) */
+#undef STAT_STATFS2_FSIZE
+
+/* Define if statfs takes 2 args and the second argument has type struct
+ * fs_data. (Ultrix) */
+#undef STAT_STATFS2_FS_DATA
+
+/* Define if statfs takes 3 args. (DEC Alpha running OSF/1) */
+#undef STAT_STATFS3_OSF1
+
+/* Define if statfs takes 4 args. (SVR3, Dynix, Irix, Dolphin) */
+#undef STAT_STATFS4
+
+/* Define if there is a function named statvfs. (SVR4) */
+#undef STAT_STATVFS
+
+/* Define if the block counts reported by statfs may be truncated to 2GB and
+   the correct values may be stored in the f_spare array. (SunOS 4.1.2, 4.1.3,
+   and 4.1.3_U1 are reported to have this problem. SunOS 4.1.1 seems not to be
+   affected.) */
+#undef STATFS_TRUNCATES_BLOCK_COUNTS
 
 #endif /* __WX_SETUP_H__ */
Index: include/wx/utils.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/utils.h,v
retrieving revision 1.50.2.5
diff -u -r1.50.2.5 utils.h
--- include/wx/utils.h	2001/03/08 07:57:52	1.50.2.5
+++ include/wx/utils.h	2001/06/24 04:21:16
@@ -24,6 +24,7 @@
 #include "wx/object.h"
 #include "wx/list.h"
 #include "wx/filefn.h"
+#include "wx/longlong.h"
 
 #ifdef __X__
     #include <dirent.h>
@@ -231,6 +232,12 @@
 // Get current Home dir and copy to dest (returns pstr->c_str())
 WXDLLEXPORT wxString wxGetHomeDir();
 WXDLLEXPORT const wxChar* wxGetHomeDir(wxString *pstr);
+
+#if wxUSE_GETDISKSPACE
+// Get Number of Bytes total on drive 'path' and number of free bytes
+WXDLLEXPORT bool wxGetDiskSpace(const wxString& path, 
+				wxLongLong *pTotal, wxLongLong *pFree);
+#endif
 
 // Get the user's home dir (caller must copy --- volatile)
 // returns NULL is no HOME dir is known
Index: src/common/utilscmn.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/utilscmn.cpp,v
retrieving revision 1.61.2.6
diff -u -r1.61.2.6 utilscmn.cpp
--- src/common/utilscmn.cpp	2000/08/06 10:12:08	1.61.2.6
+++ src/common/utilscmn.cpp	2001/06/24 04:21:17
@@ -83,6 +83,44 @@
     #include "wx/msw/private.h"
 #endif
 
+#if HAVE_INTTYPES_H
+# include <inttypes.h>
+#endif
+
+#if HAVE_SYS_VFS_H
+# include <sys/vfs.h>
+#endif
+
+#if HAVE_SYS_STATFS_H
+# include <sys/statfs.h>
+#endif
+
+#if HAVE_SYS_STATVFS_H		/* SVR4 */
+# include <sys/statvfs.h>
+int statvfs ();
+#endif
+
+#ifdef __WXGTK__
+/* Many space usage primitives use all 1 bits to denote a value that is
+ *    not applicable or unknown.  Propagate this information by returning
+ *    a uintmax_t value that is all 1 bits if the argument is all 1 bits,
+ *    even if the argument is unsigned and smaller than uintmax_t.  */
+#define PROPAGATE_ALL_ONES(x) ((x) == -1 ? (uintmax_t) -1 : (uintmax_t) (x))
+
+/* Extract the top bit of X as an uintmax_t value.  */
+#define EXTRACT_TOP_BIT(x) ((x) \
+                         & ((uintmax_t) 1 << (sizeof (x) * CHAR_BIT - 1)))
+
+/* If a value is negative, many space usage primitives store it into an
+ *    integer variable by assignment, even if the variable's type is unsigned.
+ *    So, if a space usage variable X's top bit is set, convert X to the
+ *    uintmax_t value V such that (- (uintmax_t) V) is the negative of
+ *    the original value.  If X's top bit is clear, just yield X.
+ *    Use PROPAGATE_TOP_BIT if the original value might be negative;
+ *    otherwise, use PROPAGATE_ALL_ONES.  */
+#define PROPAGATE_TOP_BIT(x) ((x) | ~ (EXTRACT_TOP_BIT (x) - 1))
+#endif
+
 // ----------------------------------------------------------------------------
 // function protoypes
 // ----------------------------------------------------------------------------
@@ -1181,6 +1219,270 @@
 
     return home;
 }
+
+#if wxUSE_GETDISKSPACE
+
+//Markus Fieber, 02-18-2001
+//      returns the remaining, available Number of Bytes on the Drive, 
+//      containing the 'path'
+//  TODO: please check GetDiskFreeSpace(..) on MSW without Win32-API
+//  Remember, to have HD-drives formated as "C:", without trailing '\'
+//      but, UNC names, for sure, WITH trailing '\' like "\\MyServer\MyShare\"
+bool 
+wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+{
+    if (path.Len() == 0)
+        return FALSE;
+
+#ifdef __WXMSW__
+    LPCTSTR lPath = path.c_str();
+
+#ifdef __WIN32__
+    PULARGE_INTEGER lBytesFreeOnDisk = 0;
+    
+    return (GetDiskFreeSpaceEx(lPath, (PULARGE_INTEGER)pFree, (PULARGE_INTEGER)pTotal, lBytesFreeOnDisk) != 0);
+
+#else //__WIN16__
+    LPDWORD lSectorsPerCluster,
+        lBytesPerSector,
+        lNumberOfFreeClusters,
+        lTotalNumberOfClusters;
+    
+    if (GetDiskFreeSpace(lPath, lSectorsPerCluster, lBytesPerSector, lNumberOfFreeClusters, lTotalNumberOfClusters))
+    {
+        // there's a problem with drives larger than 2GB on non Win32!!
+        //let's calculate it, nevertheless....
+        wxLongLong lBytesPerCluster = (wxLongLong)((*lSectorsPerCluster) * (*lBytesPerSector));
+
+        *pTotal = (wxLongLong)(lBytesPerCluster * (*lTotalNumberOfClusters));
+        *pFree = (wxLongLong)(lBytesPerCluster * (*lNumberOfFreeClusters));
+
+        return TRUE;
+    }
+    else
+        return FALSE;
+    
+#endif //__WXMSW__
+#else
+#ifdef __WXMAC__
+    
+    // Macintosh version, by Dominic Mazzoni
+    // include this quick hack if there isn't a c2pstr fn already
+    void my_c2pstr(char *str)
+    {
+        int len = strlen((const char *)str);
+        for(int i = len; i > 0; i--)
+            str[i] = str[i-1];
+        str[0] = ( len > 255 ? 255 : (char)len );
+    }
+    
+    //long wxGetDiskSpace( const char *path )
+    //{
+    wxString lMacPath = wxUnix2MacFilename(path);
+
+    // We expect something like ":Macintosh HD:wxWindows:"
+    // and we want to find everything up to the second
+    // colon: "Macintosh HD"
+    char* str = new char[path.Len() + 1];
+    strcpy(str, path.c_str());
+
+    char *colon2 = &str[1];
+    while(*colon2 && *colon2 != ':')
+        colon2++;
+    *colon2 = 0;
+    
+    if (*p == ':')
+        *p++;
+    
+    /* Mac routines want Pascal strings */
+    my_c2pstr(p);
+    
+    HVolumeParam pb;
+    
+    pb.ioCompletion = NULL;
+    pb.ioVolIndex = -1;
+    pb.ioNamePtr = (unsigned char *)p;
+    pb.ioVRefNum = 0;
+    
+    OSErr err = PBHGetVInfo((HParamBlockRec *)&pb, 0);
+    
+    if (err)
+        return FALSE;
+    
+    *pFree = (wxLongLong)((long)pb.ioVFrBlk)*((long)pb.ioVAlBlkSiz);
+    *pTotal = (wxLongLong)((long)pb.ioVNmAlBlks)*((long)pb.ioVAlBlkSiz);
+    
+    delete[] str;
+    
+    return TRUE;
+
+#endif //__WXMAC__
+#ifdef __WXGTK__
+
+    /*  UNIX version by Jfarr
+     *  Adapted from GNU fileutils (df)
+     */
+    int blocksize;          /* Size of a block.  */
+    uintmax_t blocks;       /* Total blocks. */
+    uintmax_t bavail;       /* Free blocks available to non-superuser. */
+    int bavail_top_bit_set; /* 1 if fsu_bavail represents a value < 0.  */
+
+    /*  Assumes that path is a mountpoint. */
+
+#ifdef STAT_STATFS3_OSF1
+
+    struct statfs fsd;
+
+    if (statfs(path, &fsd, sizeof(struct statfs)) != 0)
+        return FALSE;
+    
+    blocksize = PROPAGATE_ALL_ONES(fsd.f_fsize);
+
+#endif /* STAT_STATFS3_OSF1 */
+
+#ifdef STAT_STATFS2_FS_DATA	/* Ultrix */
+    
+    struct fs_data fsd;
+    
+    if (statfs(path, &fsd) != 1)
+        return FALSE;
+    
+    blocksize = 1024;
+    blocks = PROPAGATE_ALL_ONES(fsd.fd_req.btot);
+    bavail = PROPAGATE_TOP_BIT(fsd.fd_req.bfreen);
+    bavail_top_bit_set = EXTRACT_TOP_BIT(fsd.fd_req.bfreen) != 0;
+
+#endif /* STAT_STATFS2_FS_DATA */
+
+#ifdef STAT_READ_FILSYS		/* SVR2 */
+    /* need to figure out the disk */
+    return FALSE;
+#if 0
+# ifndef SUPERBOFF
+#  define SUPERBOFF (SUPERB * 512)
+# endif
+    
+    struct filsys fsd;
+    int fd;
+    
+    if (!disk)
+    {
+        errno = 0;
+        return FALSE;
+    }
+    
+    fd = open(disk, O_RDONLY);
+    if (fd < 0)
+        return FALSE;
+    lseek(fd, (off_t) SUPERBOFF, 0);
+    if (safe_read(fd, (char *) &fsd, sizeof fsd) != sizeof fsd)
+    {
+        close(fd);
+        return FALSE;
+    }
+    close(fd);
+    
+    blocksize = (fsd.s_type == Fs2b ? 1024 : 512);
+    blocks = PROPAGATE_ALL_ONES(fsd.s_fsize);
+    bavail = PROPAGATE_TOP_BIT(fsd.s_tfree);
+    bavail_top_bit_set = EXTRACT_TOP_BITfsd.s_tfree) != 0;
+#endif
+
+#endif /* STAT_READ_FILSYS */
+
+#ifdef STAT_STATFS2_BSIZE	/* 4.3BSD, SunOS 4, HP-UX, AIX */
+
+    struct statfs fsd;
+
+    if (statfs(path, &fsd) < 0)
+        return FALSE;
+
+    blocksize = PROPAGATE_ALL_ONES(fsd.f_bsize);
+
+# ifdef STATFS_TRUNCATES_BLOCK_COUNTS
+
+    /* In SunOS 4.1.2, 4.1.3, and 4.1.3_U1, the block counts in the
+     * struct statfs are truncated to 2GB.  These conditions detect that
+     * truncation, presumably without botching the 4.1.1 case, in which
+     * the values are not truncated.  The correct counts are stored in
+     * undocumented spare fields.  */
+    if (fsd.f_blocks == 0x7fffffff / fsd.f_bsize && fsd.f_spare[0] > 0)
+    {
+        fsd.f_blocks = fsd.f_spare[0];
+        fsd.f_bfree = fsd.f_spare[1];
+        fsd.f_bavail = fsd.f_spare[2];
+    }
+# endif /* STATFS_TRUNCATES_BLOCK_COUNTS */
+
+#endif /* STAT_STATFS2_BSIZE */
+
+#ifdef STAT_STATFS2_FSIZE	/* 4.4BSD */
+
+    struct statfs fsd;
+
+    if (statfs(path, &fsd) < 0)
+        return FALSE;
+
+    blocksize = PROPAGATE_ALL_ONES(fsd.f_fsize);
+
+#endif /* STAT_STATFS2_FSIZE */
+
+#ifdef STAT_STATFS4		/* SVR3, Dynix, Irix, AIX */
+	
+# if !_AIX && !defined _SEQUENT_ && !defined DOLPHIN
+#  define f_bavail f_bfree
+# endif
+	
+    struct statfs fsd;
+	  
+    if (statfs(path, &fsd, sizeof fsd, 0) < 0)
+        return FALSE;
+		
+    /* Empirically, the block counts on most SVR3 and SVR3-derived
+    *  systems seem to always be in terms of 512-byte blocks,
+    *  no matter what value f_bsize has.  */
+# if _AIX || defined(_CRAY)
+    blocksize = PROPAGATE_ALL_ONES(fsd.f_bsize);
+# else
+    blocksize = 512;
+# endif
+			  
+#endif /* STAT_STATFS4 */
+			  
+#ifdef STAT_STATVFS		/* SVR4 */
+			  
+    struct statvfs fsd;
+				
+    if (statvfs(path, &fsd) < 0)
+        return FALSE;
+				  
+    /* f_frsize isn't guaranteed to be supported.  */
+    blocksize =
+        PROPAGATE_ALL_ONES(fsd.f_frsize ? fsd.f_frsize : fsd.f_bsize);
+					
+#endif /* STAT_STATVFS */
+					
+#if !defined(STAT_STATFS2_FS_DATA) && !defined(STAT_READ_FILSYS)
+    /* !Ultrix && !SVR2 */
+					
+    blocks = PROPAGATE_ALL_ONES(fsd.f_blocks);
+    bavail = PROPAGATE_TOP_BIT(fsd.f_bavail);
+    bavail_top_bit_set = EXTRACT_TOP_BIT(fsd.f_bavail) != 0;
+								
+#endif /* not STAT_STATFS2_FS_DATA && not STAT_READ_FILSYS */
+
+	*pTotal = (wxLongLong)blocks * blocksize;
+	*pFree = (wxLongLong)bavail * 
+	    (bavail_top_bit_set ? -blocksize : blocksize);
+
+    return TRUE;
+	
+#endif
+    return FALSE;
+#endif
+}
+
+#endif // wxUSE_GETDISKSPACE
 
 #if 0
 

 	  	 

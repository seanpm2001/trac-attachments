Index: src/generic/scrlwing.cpp
===================================================================
--- src/generic/scrlwing.cpp	(revision 50033)
+++ src/generic/scrlwing.cpp	(working copy)
@@ -69,6 +69,16 @@
         style wxHSCROLL | wxVSCROLL
 */
 
+// divide a by divisor and round up any remainder
+// return 0 when divisor is 0 because a 0 divisor means scrolling is disabled
+// when scrolling is disabled positions should be 0
+static inline int DivideAndRoundUp(int a, int divisor)
+{
+    if (divisor == 0)
+        return 0;
+    return (a + divisor - 1) / divisor;
+}
+
 // ----------------------------------------------------------------------------
 // wxScrollHelperEvtHandler: intercept the events from the window and forward
 // them to wxScrollHelper
@@ -312,12 +322,12 @@
 
     m_xScrollPixelsPerLine =
     m_yScrollPixelsPerLine =
-    m_xScrollPosition =
-    m_yScrollPosition =
-    m_xScrollLines =
-    m_yScrollLines =
+    m_xScrollPixelPosition =
+    m_yScrollPixelPosition =
     m_xScrollLinesPerPage =
-    m_yScrollLinesPerPage = 0;
+    m_yScrollLinesPerPage =
+    m_xMaxScrollPixelPosition =
+    m_yMaxScrollPixelPosition = 0;
 
     m_xScrollingEnabled =
     m_yScrollingEnabled = true;
@@ -336,7 +346,7 @@
     m_handler = NULL;
 
     m_win = win;
-    
+
     m_win->SetScrollHelper( this );
 
     // by default, the associated window is also the target window
@@ -350,6 +360,34 @@
     DeleteEvtHandler();
 }
 
+int wxScrollHelper::GetScrollUnitPositionX() const
+{
+    return DivideAndRoundUp(m_xScrollPixelPosition, m_xScrollPixelsPerLine);
+}
+
+int wxScrollHelper::GetScrollUnitPositionY() const
+{
+    return DivideAndRoundUp(m_yScrollPixelPosition, m_yScrollPixelsPerLine);
+}
+
+int wxScrollHelper::GetScrollLinesX() const
+{
+    // if scrolling is disabled in this direction just return 0
+    if (!m_xMaxScrollPixelPosition)
+        return 0;
+    return DivideAndRoundUp(m_targetWindow->GetVirtualSize().GetWidth(),
+         m_xScrollPixelsPerLine);
+}
+
+int wxScrollHelper::GetScrollLinesY() const
+{
+    // if scrolling is disabled in this direction just return 0
+    if (!m_yMaxScrollPixelPosition)
+        return 0;
+    return DivideAndRoundUp(m_targetWindow->GetVirtualSize().GetHeight(),
+         m_yScrollPixelsPerLine);
+}
+
 // ----------------------------------------------------------------------------
 // setting scrolling parameters
 // ----------------------------------------------------------------------------
@@ -367,19 +405,19 @@
     CalcUnscrolledPosition(xPos, yPos, &xpos, &ypos);
     bool do_refresh =
     (
-      (noUnitsX != 0 && m_xScrollLines == 0) ||
-      (noUnitsX < m_xScrollLines && xpos > pixelsPerUnitX * noUnitsX) ||
+      (noUnitsX != 0 && GetScrollLinesX() == 0) ||
+      (noUnitsX < GetScrollLinesX() && xpos > pixelsPerUnitX * noUnitsX) ||
 
-      (noUnitsY != 0 && m_yScrollLines == 0) ||
-      (noUnitsY < m_yScrollLines && ypos > pixelsPerUnitY * noUnitsY) ||
-      (xPos != m_xScrollPosition) ||
-      (yPos != m_yScrollPosition)
+      (noUnitsY != 0 && GetScrollLinesY() == 0) ||
+      (noUnitsY < GetScrollLinesY() && ypos > pixelsPerUnitY * noUnitsY) ||
+      (xPos != GetScrollUnitPositionX()) ||
+      (yPos != GetScrollUnitPositionY())
     );
 
     m_xScrollPixelsPerLine = pixelsPerUnitX;
     m_yScrollPixelsPerLine = pixelsPerUnitY;
-    m_xScrollPosition = xPos;
-    m_yScrollPosition = yPos;
+    m_xScrollPixelPosition = xPos * pixelsPerUnitX;
+    m_yScrollPixelPosition = yPos * pixelsPerUnitY;
 
     int w = noUnitsX * pixelsPerUnitX;
     int h = noUnitsY * pixelsPerUnitY;
@@ -529,13 +567,13 @@
 
     if (orient == wxHORIZONTAL)
     {
-        m_xScrollPosition += nScrollInc;
-        m_win->SetScrollPos(wxHORIZONTAL, m_xScrollPosition);
+        m_xScrollPixelPosition += nScrollInc * m_xScrollPixelsPerLine;
+        m_win->SetScrollPos(wxHORIZONTAL, GetScrollUnitPositionX());
     }
     else
     {
-        m_yScrollPosition += nScrollInc;
-        m_win->SetScrollPos(wxVERTICAL, m_yScrollPosition);
+        m_yScrollPixelPosition += nScrollInc * m_yScrollPixelsPerLine;
+        m_win->SetScrollPos(wxVERTICAL, GetScrollUnitPositionY());
     }
 
     if ( needsRefresh )
@@ -557,16 +595,16 @@
     if (event.GetEventType() == wxEVT_SCROLLWIN_TOP)
     {
             if (orient == wxHORIZONTAL)
-                nScrollInc = - m_xScrollPosition;
+                nScrollInc = - GetScrollUnitPositionX();
             else
-                nScrollInc = - m_yScrollPosition;
+                nScrollInc = - GetScrollUnitPositionY();
     } else
     if (event.GetEventType() == wxEVT_SCROLLWIN_BOTTOM)
     {
             if (orient == wxHORIZONTAL)
-                nScrollInc = m_xScrollLines - m_xScrollPosition;
+                nScrollInc = GetScrollLinesX() - GetScrollUnitPositionX();
             else
-                nScrollInc = m_yScrollLines - m_yScrollPosition;
+                nScrollInc = GetScrollLinesY() - GetScrollUnitPositionY();
     } else
     if (event.GetEventType() == wxEVT_SCROLLWIN_LINEUP)
     {
@@ -594,42 +632,44 @@
         (event.GetEventType() == wxEVT_SCROLLWIN_THUMBRELEASE))
     {
             if (orient == wxHORIZONTAL)
-                nScrollInc = pos - m_xScrollPosition;
+                nScrollInc = pos - GetScrollUnitPositionX();
             else
-                nScrollInc = pos - m_yScrollPosition;
+                nScrollInc = pos - GetScrollUnitPositionY();
     }
 
     if (orient == wxHORIZONTAL)
     {
-        if ( m_xScrollPosition + nScrollInc < 0 )
+        if ( GetScrollUnitPositionX() + nScrollInc < 0 )
         {
             // As -ve as we can go
-            nScrollInc = -m_xScrollPosition;
+            nScrollInc = -GetScrollUnitPositionX();
         }
         else // check for the other bound
         {
-            const int posMax = m_xScrollLines - m_xScrollLinesPerPage;
-            if ( m_xScrollPosition + nScrollInc > posMax )
+            const int posMax =
+                   m_xMaxScrollPixelPosition / m_xScrollPixelsPerLine;
+            if ( GetScrollUnitPositionX() + nScrollInc > posMax )
             {
                 // As +ve as we can go
-                nScrollInc = posMax - m_xScrollPosition;
+                nScrollInc = posMax - GetScrollUnitPositionX();
             }
         }
     }
     else // wxVERTICAL
     {
-        if ( m_yScrollPosition + nScrollInc < 0 )
+        if ( GetScrollUnitPositionY() + nScrollInc < 0 )
         {
             // As -ve as we can go
-            nScrollInc = -m_yScrollPosition;
+            nScrollInc = -GetScrollUnitPositionY();
         }
         else // check for the other bound
         {
-            const int posMax = m_yScrollLines - m_yScrollLinesPerPage;
-            if ( m_yScrollPosition + nScrollInc > posMax )
+            const int posMax =
+                   m_yMaxScrollPixelPosition / m_yScrollPixelsPerLine;
+            if ( GetScrollUnitPositionY() + nScrollInc > posMax )
             {
                 // As +ve as we can go
-                nScrollInc = posMax - m_yScrollPosition;
+                nScrollInc = posMax - GetScrollUnitPositionY();
             }
         }
     }
@@ -656,8 +696,8 @@
     int w = 0, h = 0;
     int oldw, oldh;
 
-    int oldXScroll = m_xScrollPosition;
-    int oldYScroll = m_yScrollPosition;
+    int oldXScroll = GetScrollUnitPositionX();
+    int oldYScroll = GetScrollUnitPositionY();
 
     // VZ: at least under Windows this loop is useless because when scrollbars
     //     [dis]appear we get a WM_SIZE resulting in another call to
@@ -676,34 +716,40 @@
 
         // scroll lines per page: if 0, no scrolling is needed
         int linesPerPage;
+        int scrollUnitDistance;
 
         if ( m_xScrollPixelsPerLine == 0 )
         {
             // scrolling is disabled
-            m_xScrollLines = 0;
-            m_xScrollPosition = 0;
+            m_xMaxScrollPixelPosition = 0;
+            m_xScrollPixelPosition = 0;
             linesPerPage = 0;
         }
         else // might need scrolling
         {
-            // Round up integer division to catch any "leftover" client space.
-            const int wVirt = m_targetWindow->GetVirtualSize().GetWidth();
-            m_xScrollLines = (wVirt + m_xScrollPixelsPerLine - 1) / m_xScrollPixelsPerLine;
-
             // Calculate page size i.e. number of scroll units you get on the
             // current client window.
             linesPerPage = w / m_xScrollPixelsPerLine;
 
+            // Round up integer division to catch any "leftover" client space.
+            const int wVirt = m_targetWindow->GetVirtualSize().GetWidth();
+
+            // calculate the largest origin position
+            // this is the invisible portion = virtual size - display size
+            // then this value is increased to the next scroll unit size.
+            m_xMaxScrollPixelPosition = DivideAndRoundUp(
+                  wVirt - w, m_xScrollPixelsPerLine) * m_xScrollPixelsPerLine;
+
             // Special case. When client and virtual size are very close but
             // the client is big enough, kill scrollbar.
-            if ((linesPerPage < m_xScrollLines) && (w >= wVirt)) ++linesPerPage;
+            if ((linesPerPage < GetScrollLinesX()) && (w >= wVirt)) ++linesPerPage;
 
-            if (linesPerPage >= m_xScrollLines)
+            if (linesPerPage >= GetScrollLinesX())
             {
                 // we're big enough to not need scrolling
                 linesPerPage =
-                m_xScrollLines =
-                m_xScrollPosition = 0;
+                m_xMaxScrollPixelPosition =
+                m_xScrollPixelPosition = 0;
             }
             else // we do need a scrollbar
             {
@@ -712,16 +758,20 @@
 
                 // Correct position if greater than extent of canvas minus
                 // the visible portion of it or if below zero
-                const int posMax = m_xScrollLines - linesPerPage;
-                if ( m_xScrollPosition > posMax )
-                    m_xScrollPosition = posMax;
-                else if ( m_xScrollPosition < 0 )
-                    m_xScrollPosition = 0;
+                const int posMax =
+                      m_xMaxScrollPixelPosition / m_xScrollPixelsPerLine;
+                if ( GetScrollUnitPositionX() > posMax )
+                    m_xScrollPixelPosition = posMax * m_xScrollPixelsPerLine;
+                else if ( GetScrollUnitPositionX() < 0 )
+                    m_xScrollPixelPosition = 0;
             }
         }
 
-        m_win->SetScrollbar(wxHORIZONTAL, m_xScrollPosition,
-                            linesPerPage, m_xScrollLines);
+        // this is the number of scroll units of movement for the scroll bar
+        scrollUnitDistance = DivideAndRoundUp(m_xMaxScrollPixelPosition,
+               m_xScrollPixelsPerLine);
+        m_win->SetScrollbar(wxHORIZONTAL, GetScrollUnitPositionX(),
+               linesPerPage, scrollUnitDistance + linesPerPage);
 
         // The amount by which we scroll when paging
         SetScrollPageSize(wxHORIZONTAL, linesPerPage);
@@ -731,30 +781,35 @@
         if ( m_yScrollPixelsPerLine == 0 )
         {
             // scrolling is disabled
-            m_yScrollLines = 0;
-            m_yScrollPosition = 0;
+            m_yMaxScrollPixelPosition = 0;
+            m_yScrollPixelPosition = 0;
             linesPerPage = 0;
         }
         else // might need scrolling
         {
-            // Round up integer division to catch any "leftover" client space.
-            const int hVirt = m_targetWindow->GetVirtualSize().GetHeight();
-            m_yScrollLines = ( hVirt + m_yScrollPixelsPerLine - 1 ) / m_yScrollPixelsPerLine;
-
             // Calculate page size i.e. number of scroll units you get on the
             // current client window.
             linesPerPage = h / m_yScrollPixelsPerLine;
 
+            // Round up integer division to catch any "leftover" client space.
+            const int hVirt = m_targetWindow->GetVirtualSize().GetHeight();
+
+            // calculate the largest origin position
+            // this is the invisible portion = virtual size - display size
+            // then this value is increased to the next scroll unit size.
+            m_yMaxScrollPixelPosition = DivideAndRoundUp(
+                  hVirt - h, m_yScrollPixelsPerLine) * m_yScrollPixelsPerLine;
+
             // Special case. When client and virtual size are very close but
             // the client is big enough, kill scrollbar.
-            if ((linesPerPage < m_yScrollLines) && (h >= hVirt)) ++linesPerPage;
+            if ((linesPerPage < GetScrollLinesY()) && (h >= hVirt)) ++linesPerPage;
 
-            if (linesPerPage >= m_yScrollLines)
+            if (linesPerPage >= GetScrollLinesY())
             {
                 // we're big enough to not need scrolling
                 linesPerPage =
-                m_yScrollLines =
-                m_yScrollPosition = 0;
+                m_yMaxScrollPixelPosition =
+                m_yScrollPixelPosition = 0;
             }
             else // we do need a scrollbar
             {
@@ -763,16 +818,20 @@
 
                 // Correct position if greater than extent of canvas minus
                 // the visible portion of it or if below zero
-                const int posMax = m_yScrollLines - linesPerPage;
-                if ( m_yScrollPosition > posMax )
-                    m_yScrollPosition = posMax;
-                else if ( m_yScrollPosition < 0 )
-                    m_yScrollPosition = 0;
+                const int posMax =
+                      m_yMaxScrollPixelPosition / m_yScrollPixelsPerLine;
+                if ( GetScrollUnitPositionY() > posMax )
+                    m_yScrollPixelPosition = posMax * m_yScrollPixelsPerLine;
+                else if ( GetScrollUnitPositionY() < 0 )
+                    m_yScrollPixelPosition = 0;
             }
         }
 
-        m_win->SetScrollbar(wxVERTICAL, m_yScrollPosition,
-                            linesPerPage, m_yScrollLines);
+        // this is the number of scroll units of movement for the scroll bar
+        scrollUnitDistance = DivideAndRoundUp(m_yMaxScrollPixelPosition,
+               m_yScrollPixelsPerLine);
+        m_win->SetScrollbar(wxVERTICAL, GetScrollUnitPositionY(),
+               linesPerPage, scrollUnitDistance + linesPerPage);
 
         // The amount by which we scroll when paging
         SetScrollPageSize(wxVERTICAL, linesPerPage);
@@ -795,8 +854,8 @@
     {
         Display* dpy = XtDisplay((Widget)m_targetWindow->GetMainWidget());
 
-        int totalPixelWidth = m_xScrollLines * m_xScrollPixelsPerLine;
-        int totalPixelHeight = m_yScrollLines * m_yScrollPixelsPerLine;
+        int totalPixelWidth = GetScrollLinesX() * m_xScrollPixelsPerLine;
+        int totalPixelHeight = GetScrollLinesY() * m_yScrollPixelsPerLine;
         if (m_targetWindow->GetBackingPixmap() &&
            !((m_targetWindow->GetPixmapWidth() == totalPixelWidth) &&
              (m_targetWindow->GetPixmapHeight() == totalPixelHeight)))
@@ -806,7 +865,7 @@
         }
 
         if (!m_targetWindow->GetBackingPixmap() &&
-           (m_xScrollLines != 0) && (m_yScrollLines != 0))
+           (GetScrollLinesX() != 0) && (GetScrollLinesY() != 0))
         {
             int depth = wxDisplayDepth();
             m_targetWindow->SetPixmapWidth(totalPixelWidth);
@@ -818,19 +877,19 @@
     }
 #endif // Motif
 
-    if (oldXScroll != m_xScrollPosition)
+    if (oldXScroll != GetScrollUnitPositionX())
     {
        if (m_xScrollingEnabled)
-            m_targetWindow->ScrollWindow( m_xScrollPixelsPerLine * (oldXScroll - m_xScrollPosition), 0,
+            m_targetWindow->ScrollWindow( m_xScrollPixelsPerLine * (oldXScroll - GetScrollUnitPositionX()), 0,
                                           GetScrollRect() );
        else
             m_targetWindow->Refresh(true, GetScrollRect());
     }
 
-    if (oldYScroll != m_yScrollPosition)
+    if (oldYScroll != GetScrollUnitPositionY())
     {
         if (m_yScrollingEnabled)
-            m_targetWindow->ScrollWindow( 0, m_yScrollPixelsPerLine * (oldYScroll-m_yScrollPosition),
+            m_targetWindow->ScrollWindow( 0, m_yScrollPixelsPerLine * (oldYScroll-GetScrollUnitPositionY()),
                                           GetScrollRect() );
         else
             m_targetWindow->Refresh(true, GetScrollRect());
@@ -845,28 +904,32 @@
     // the m_sign from the DC here, but I leve the
     // #ifdef GTK for now.
     if (m_win->GetLayoutDirection() == wxLayout_RightToLeft)
-        dc.SetDeviceOrigin( pt.x + m_xScrollPosition * m_xScrollPixelsPerLine,
-                            pt.y - m_yScrollPosition * m_yScrollPixelsPerLine );
+        dc.SetDeviceOrigin( pt.x + m_xScrollPixelPosition,
+                            pt.y - m_yScrollPixelPosition );
     else
 #endif
-        dc.SetDeviceOrigin( pt.x - m_xScrollPosition * m_xScrollPixelsPerLine,
-                            pt.y - m_yScrollPosition * m_yScrollPixelsPerLine );
+        dc.SetDeviceOrigin( pt.x - m_xScrollPixelPosition,
+                            pt.y - m_yScrollPixelPosition );
     dc.SetUserScale( m_scaleX, m_scaleY );
 }
 
 void wxScrollHelper::SetScrollRate( int xstep, int ystep )
 {
-    int old_x = m_xScrollPixelsPerLine * m_xScrollPosition;
-    int old_y = m_yScrollPixelsPerLine * m_yScrollPosition;
+    int old_x = m_xScrollPixelPosition;
+    int old_y = m_yScrollPixelPosition;
 
+    // This is not very good, but it is the way it worked before.
+    // It would be better IMHO, to leave the current position unchanged
+    // during SetScrollRate, or to change it as little as possible as needed.
+    // I will submit this in a future patch.
+    int new_x = m_xScrollPixelPosition = GetScrollUnitPositionX() * xstep;
+    int new_y = m_yScrollPixelPosition = GetScrollUnitPositionY() * ystep;
+
     m_xScrollPixelsPerLine = xstep;
     m_yScrollPixelsPerLine = ystep;
 
-    int new_x = m_xScrollPixelsPerLine * m_xScrollPosition;
-    int new_y = m_yScrollPixelsPerLine * m_yScrollPosition;
-
-    m_win->SetScrollPos( wxHORIZONTAL, m_xScrollPosition );
-    m_win->SetScrollPos( wxVERTICAL, m_yScrollPosition );
+    m_win->SetScrollPos( wxHORIZONTAL, GetScrollUnitPositionX() );
+    m_win->SetScrollPos( wxVERTICAL, GetScrollUnitPositionY() );
     m_targetWindow->ScrollWindow( old_x - new_x, old_y - new_y );
 
     AdjustScrollbars();
@@ -884,9 +947,9 @@
 int wxScrollHelper::GetScrollLines( int orient ) const
 {
     if ( orient == wxHORIZONTAL )
-        return m_xScrollLines;
+        return GetScrollLinesX();
     else
-        return m_yScrollLines;
+        return GetScrollLinesY();
 }
 
 int wxScrollHelper::GetScrollPageSize(int orient) const
@@ -913,15 +976,15 @@
     if (!m_targetWindow)
         return;
 
-    if (((x_pos == -1) || (x_pos == m_xScrollPosition)) &&
-        ((y_pos == -1) || (y_pos == m_yScrollPosition))) return;
+    if (((x_pos == -1) || (x_pos == GetScrollUnitPositionX())) &&
+        ((y_pos == -1) || (y_pos == GetScrollUnitPositionY()))) return;
 
     int w = 0, h = 0;
     GetTargetSize(&w, &h);
 
     // compute new position:
-    int new_x = m_xScrollPosition;
-    int new_y = m_yScrollPosition;
+    int new_x = GetScrollUnitPositionX();
+    int new_y = GetScrollUnitPositionY();
 
     if ((x_pos != -1) && (m_xScrollPixelsPerLine))
     {
@@ -934,7 +997,7 @@
 
         // Correct position if greater than extent of canvas minus
         // the visible portion of it or if below zero
-        new_x = wxMin( m_xScrollLines-noPagePositions, new_x );
+        new_x = wxMin( GetScrollLinesX() - noPagePositions, new_x );
         new_x = wxMax( 0, new_x );
     }
     if ((y_pos != -1) && (m_yScrollPixelsPerLine))
@@ -948,11 +1011,11 @@
 
         // Correct position if greater than extent of canvas minus
         // the visible portion of it or if below zero
-        new_y = wxMin( m_yScrollLines-noPagePositions, new_y );
+        new_y = wxMin( GetScrollLinesY()-noPagePositions, new_y );
         new_y = wxMax( 0, new_y );
     }
 
-    if ( new_x == m_xScrollPosition && new_y == m_yScrollPosition )
+    if ( new_x == GetScrollUnitPositionX() && new_y == GetScrollUnitPositionY() )
         return; // nothing to do, the position didn't change
 
     // flush all pending repaints before we change m_{x,y}ScrollPosition, as
@@ -961,19 +1024,19 @@
     m_targetWindow->Update();
 
     // update the position and scroll the window now:
-    if (m_xScrollPosition != new_x)
+    if (GetScrollUnitPositionX() != new_x)
     {
-        int old_x = m_xScrollPosition;
-        m_xScrollPosition = new_x;
+        int old_x = GetScrollUnitPositionX();
+        m_xScrollPixelPosition = new_x * m_xScrollPixelsPerLine;
         m_win->SetScrollPos( wxHORIZONTAL, new_x );
         m_targetWindow->ScrollWindow( (old_x-new_x)*m_xScrollPixelsPerLine, 0,
                                       GetScrollRect() );
     }
 
-    if (m_yScrollPosition != new_y)
+    if (GetScrollUnitPositionY() != new_y)
     {
-        int old_y = m_yScrollPosition;
-        m_yScrollPosition = new_y;
+        int old_y = GetScrollUnitPositionY();
+        m_yScrollPixelPosition = new_y * m_yScrollPixelsPerLine;
         m_win->SetScrollPos( wxVERTICAL, new_y );
         m_targetWindow->ScrollWindow( 0, (old_y-new_y)*m_yScrollPixelsPerLine,
                                       GetScrollRect() );
@@ -990,25 +1053,25 @@
 void wxScrollHelper::GetViewStart (int *x, int *y) const
 {
     if ( x )
-        *x = m_xScrollPosition;
+        *x = GetScrollUnitPositionX();
     if ( y )
-        *y = m_yScrollPosition;
+        *y = GetScrollUnitPositionY();
 }
 
 void wxScrollHelper::DoCalcScrolledPosition(int x, int y, int *xx, int *yy) const
 {
     if ( xx )
-        *xx = x - m_xScrollPosition * m_xScrollPixelsPerLine;
+        *xx = x - m_xScrollPixelPosition;
     if ( yy )
-        *yy = y - m_yScrollPosition * m_yScrollPixelsPerLine;
+        *yy = y - m_yScrollPixelPosition;
 }
 
 void wxScrollHelper::DoCalcUnscrolledPosition(int x, int y, int *xx, int *yy) const
 {
     if ( xx )
-        *xx = x + m_xScrollPosition * m_xScrollPixelsPerLine;
+        *xx = x + m_xScrollPixelPosition;
     if ( yy )
-        *yy = y + m_yScrollPosition * m_yScrollPixelsPerLine;
+        *yy = y + m_yScrollPixelPosition;
 }
 
 // ----------------------------------------------------------------------------
@@ -1142,8 +1205,8 @@
         szy = -1;
     }
 
-    int xScrollOld = m_xScrollPosition,
-        yScrollOld = m_yScrollPosition;
+    int xScrollOld = GetScrollUnitPositionX(),
+        yScrollOld = GetScrollUnitPositionY();
 
     int dsty;
     switch ( event.GetKeyCode() )
@@ -1186,18 +1249,18 @@
             event.Skip();
     }
 
-    if ( m_xScrollPosition != xScrollOld )
+    if ( GetScrollUnitPositionX() != xScrollOld )
     {
-        wxScrollWinEvent evt(wxEVT_SCROLLWIN_THUMBTRACK, m_xScrollPosition,
-                               wxHORIZONTAL);
+        wxScrollWinEvent evt(wxEVT_SCROLLWIN_THUMBTRACK, GetScrollUnitPositionX(),
+                             wxHORIZONTAL);
         evt.SetEventObject(m_win);
         m_win->GetEventHandler()->ProcessEvent(evt);
     }
 
-    if ( m_yScrollPosition != yScrollOld )
+    if ( GetScrollUnitPositionY() != yScrollOld )
     {
-        wxScrollWinEvent evt(wxEVT_SCROLLWIN_THUMBTRACK, m_yScrollPosition,
-                               wxVERTICAL);
+        wxScrollWinEvent evt(wxEVT_SCROLLWIN_THUMBTRACK, GetScrollUnitPositionY(),
+                             wxVERTICAL);
         evt.SetEventObject(m_win);
         m_win->GetEventHandler()->ProcessEvent(evt);
     }
@@ -1262,12 +1325,12 @@
             if ( pt.x > size.x )
             {
                 orient = wxHORIZONTAL;
-                pos = m_xScrollLines;
+                pos = GetScrollLinesX();
             }
             else if ( pt.y > size.y )
             {
                 orient = wxVERTICAL;
-                pos = m_yScrollLines;
+                pos = GetScrollLinesY();
             }
             else // this should be impossible
             {
Index: include/wx/scrolwin.h
===================================================================
--- include/wx/scrolwin.h	(revision 50033)
+++ include/wx/scrolwin.h	(working copy)
@@ -204,7 +204,25 @@
     // delete the event handler we installed
     void DeleteEvtHandler();
 
+    // These functions represent previous variables that kept track of things
+    // in terms of scroll units.  They are being replaced by variables that
+    // keep track of things in pixels.
+    int GetScrollUnitPositionX() const;
+    int GetScrollUnitPositionY() const;
+    void SetScrollUnitPositionX(int scrollUnitsX)
+    {
+        m_xScrollPixelPosition = scrollUnitsX * m_xScrollPixelsPerLine;
+    }
 
+    void SetScrollUnitPositionY(int scrollUnitsY)
+    {
+        m_yScrollPixelPosition = scrollUnitsY * m_yScrollPixelsPerLine;
+    }
+
+    int GetScrollLinesX() const;
+    int GetScrollLinesY() const;
+
+
     double                m_scaleX;
     double                m_scaleY;
 
@@ -217,13 +235,22 @@
 
     int                   m_xScrollPixelsPerLine;
     int                   m_yScrollPixelsPerLine;
-    int                   m_xScrollPosition;
-    int                   m_yScrollPosition;
-    int                   m_xScrollLines;
-    int                   m_yScrollLines;
+
     int                   m_xScrollLinesPerPage;
     int                   m_yScrollLinesPerPage;
 
+    // x/y ScrollPixelPosition define the upper left corner of the
+    // visible area
+    int                   m_xScrollPixelPosition;
+    int                   m_yScrollPixelPosition;
+
+    // x/y MaxScrollPixelPosition define the maximum values for the
+    // x/y ScrollPixelPosition - in other words, if you scroll
+    // all the way to the right and all the way down the upper
+    // left corner will be at MaxScrollPixelPosition
+    int                   m_xMaxScrollPixelPosition;
+    int                   m_yMaxScrollPixelPosition;
+
     bool                  m_xScrollingEnabled;
     bool                  m_yScrollingEnabled;
 

 	  	 

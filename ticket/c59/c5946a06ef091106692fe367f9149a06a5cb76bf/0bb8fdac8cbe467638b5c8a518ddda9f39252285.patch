Index: include//wx/defs.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/defs.h,v
retrieving revision 1.445
diff -u -r1.445 defs.h
--- include//wx/defs.h	2004/09/25 17:22:25	1.445
+++ include//wx/defs.h	2004/09/28 18:20:31
@@ -1055,6 +1055,8 @@
     wxSHAPED                  = 0x4000,
     wxFIXED_MINSIZE           = 0x8000,
     wxTILE                    = 0xc000,
+    wxGROW_SECONDARY          = 0x10000,
+    wxEXPAND_SECONDARY        = wxGROW_SECONDARY,
 
     // for compatibility only, default now, don't use explicitly any more
 #if WXWIN_COMPATIBILITY_2_4
Index: docs//latex/wx/sizer.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/sizer.tex,v
retrieving revision 1.41
diff -u -r1.41 sizer.tex
--- docs//latex/wx/sizer.tex	2004/09/23 23:17:12	1.41
+++ docs//latex/wx/sizer.tex	2004/09/28 18:20:36
@@ -114,6 +114,10 @@
 
 \twocolitem{\windowstyle{wxEXPAND}}{The item will be expanded to fill
 the space assigned to the item.}
+\twocolitem{\windowstyle{wxGROW}{Same as wxExpand.}
+\twocolitem{\windowstyle{wxEXPAND\_SECONDARY}{The item will use the remaining space in sizer in 
+the secondary direction: Vertical in vertical box sizers. Parentsizer should have wxEXPAND set.}
+\twocolitem{\windowstyle{wxGROW\_SECONDARY}{Same as wxEXPAND\_SECONDARY.}
 \twocolitem{\windowstyle{wxSHAPED}}{The item will be expanded as much
 as possible while also maintaining its aspect ratio}
 \twocolitem{\windowstyle{wxFIXED\_MINSIZE}}{Normally wxSizers will use 
Index: docs//latex/wx/tsizer.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/tsizer.tex,v
retrieving revision 1.12
diff -u -r1.12 tsizer.tex
--- docs//latex/wx/tsizer.tex	2004/06/24 11:59:38	1.12
+++ docs//latex/wx/tsizer.tex	2004/09/28 18:20:38
@@ -215,6 +215,8 @@
 wxALIGN\_CENTRE (same as wxALIGN\_CENTER) is defined as (wxALIGN\_CENTER\_HORIZONTAL |
 wxALIGN\_CENTER\_VERTICAL).  Default alignment is wxALIGN\_LEFT | wxALIGN\_TOP.
 
+wxEXPAND does grow items only in one direction: Horizontal for vertical box sizers and vertical for horizontal box sizers. To also grow in the secondary direction, elements in a box sizer can have the wxEXPAND\_SECONDARY (same as wxGROW\_SECONDARY) flag set. If this flag is set and the box sizer does have the wxEXPAND flag, the item item does use as much space as possible in the secondary direction. If there are multiple items with the wxEXPAND\_SECONDARY flag, only the first item with the flag will grow.
+
 As mentioned above, any window belonging to a sizer may have border, and it can be specified
 which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM
 constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead). These
Index: src//common/sizer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/sizer.cpp,v
retrieving revision 1.100
diff -u -r1.100 sizer.cpp
--- src//common/sizer.cpp	2004/09/22 14:38:50	1.100
+++ src//common/sizer.cpp	2004/09/28 18:20:42
@@ -1350,6 +1350,26 @@
                     height = (delta * item->GetProportion()) / m_stretchable;
                 }
 
+                if (item->GetFlag() & wxGROW_SECONDARY)
+                {
+                    // Grow in secondary direction
+                    // Remove the height of all remaining items 
+                    // from the yet unused height and assign
+                    // the result to the item
+                    int height_remaining = m_size.y - pt.y;
+                    wxSizerItemList::compatibility_iterator remainingNode = node->GetNext();
+                    while (remainingNode)
+                    {
+                        wxSizerItem *item = remainingNode->GetData();
+                        if (!item->IsShown())
+                             continue;
+                        wxSize size = item->GetMinSizeWithBorder();
+                        height_remaining -= size.y;
+                        remainingNode = remainingNode->GetNext();
+                    }
+                    height = height_remaining;
+                }
+
                 wxPoint child_pos( pt );
                 wxSize  child_size( wxSize( size.x, height) );
 
@@ -1374,6 +1394,26 @@
                     // Because of at least one visible item has non-zero
                     // proportion then m_stretchable is not zero
                     width = (delta * item->GetProportion()) / m_stretchable;
+                }
+
+                if (item->GetFlag() & wxGROW_SECONDARY)
+                {
+                    // Grow in secondary direction
+                    // Remove the width of all remaining items 
+                    // from the yet unused width and assign
+                    // the result to the item
+                    int width_remaining = m_size.x - pt.x;
+                    wxSizerItemList::compatibility_iterator remainingNode = node->GetNext();
+                    while (remainingNode)
+                    {
+                        wxSizerItem *item = remainingNode->GetData();
+                        if (!item->IsShown())
+                             continue;
+                        wxSize size = item->GetMinSizeWithBorder();
+                        width_remaining -= size.x;
+                        remainingNode = remainingNode->GetNext();
+                    }
+                    width = width_remaining;
                 }
 
                 wxPoint child_pos( pt );
Index: src//xrc/xh_sizer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xrc/xh_sizer.cpp,v
retrieving revision 1.22
diff -u -r1.22 xh_sizer.cpp
--- src//xrc/xh_sizer.cpp	2004/09/23 09:18:12	1.22
+++ src//xrc/xh_sizer.cpp	2004/09/28 18:20:47
@@ -57,7 +57,9 @@
     XRC_ADD_STYLE(wxALL);
 
     XRC_ADD_STYLE(wxGROW);
+    XRC_ADD_STYLE(wxGROW_SECONDARY);
     XRC_ADD_STYLE(wxEXPAND);
+    XRC_ADD_STYLE(wxEXPAND_SECONDARY);
     XRC_ADD_STYLE(wxSHAPED);
     XRC_ADD_STYLE(wxSTRETCH_NOT);
 

 	  	 

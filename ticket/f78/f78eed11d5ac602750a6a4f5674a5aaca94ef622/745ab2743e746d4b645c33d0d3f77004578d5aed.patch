Index: tests/datetime/datetimetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/datetime/datetimetest.cpp,v
retrieving revision 1.4
diff -u -r1.4 datetimetest.cpp
--- tests/datetime/datetimetest.cpp	2005/01/19 15:41:09	1.4
+++ tests/datetime/datetimetest.cpp	2005/01/23 11:54:59
@@ -129,6 +129,7 @@
         CPPUNIT_TEST( TestTimeTicks );
         CPPUNIT_TEST( TestTimeParse );
         CPPUNIT_TEST( TestTimeArithmetics );
+        CPPUNIT_TEST( TestDSTBug );
     CPPUNIT_TEST_SUITE_END();
 
     void TestLeapYears();
@@ -141,8 +142,17 @@
     void TestTimeTicks();
     void TestTimeParse();
     void TestTimeArithmetics();
+    void TestDSTBug();
 
     DECLARE_NO_COPY_CLASS(DateTimeTestCase)
+
+		void SaveTime();
+		void RestoreTime();
+
+#ifdef WIN32
+		SYSTEMTIME _savedTime;
+		TIME_ZONE_INFORMATION _tzi;
+#endif
 };
 
 // register in the unnamed registry so that these tests are run by default
@@ -681,3 +691,101 @@
     }
 }
 
+void DateTimeTestCase::TestDSTBug()
+{
+	/////////////////////////
+	// Test GetEndDST()
+	wxDateTime dt = wxDateTime::GetEndDST(2004);
+	CPPUNIT_ASSERT_EQUAL(31, (int)dt.GetDay());
+	CPPUNIT_ASSERT_EQUAL(wxDateTime::Oct, dt.GetMonth());
+	CPPUNIT_ASSERT_EQUAL(2004, (int)dt.GetYear());
+	CPPUNIT_ASSERT_EQUAL(2, (int)dt.GetHour());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMinute());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetSecond());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMillisecond());
+
+	/////////////////////////
+	// Test ResetTime()
+	dt.SetHour(5);
+	CPPUNIT_ASSERT_EQUAL(5, (int)dt.GetHour());
+	dt.ResetTime();
+	CPPUNIT_ASSERT_EQUAL(31, (int)dt.GetDay());
+	CPPUNIT_ASSERT_EQUAL(wxDateTime::Oct, dt.GetMonth());
+	CPPUNIT_ASSERT_EQUAL(2004, (int)dt.GetYear());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetHour());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMinute());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetSecond());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMillisecond());
+
+	/////////////////////////
+	// Test Today()
+#ifdef WIN32
+	SYSTEMTIME dstTime;
+
+	dstTime.wDay = 31;
+	dstTime.wMonth = 10;
+	dstTime.wYear = 2004;
+	dstTime.wHour = 5;
+	dstTime.wMinute = 0;
+	dstTime.wSecond = 0;
+	dstTime.wMilliseconds = 0;
+
+	SaveTime();
+	SetSystemTime(&dstTime);
+	dt = wxDateTime::Today();
+	RestoreTime();
+
+	CPPUNIT_ASSERT_EQUAL(31, (int)dt.GetDay());
+	CPPUNIT_ASSERT_EQUAL(wxDateTime::Oct, dt.GetMonth());
+	CPPUNIT_ASSERT_EQUAL(2004, (int)dt.GetYear());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetHour());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMinute());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetSecond());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMillisecond());
+
+	/////////////////////////
+	// Test Set(hour, minute, second, milli)
+	wxDateTime dt2;
+	SaveTime();
+	SetSystemTime(&dstTime);
+	dt.Set(1, 30, 0, 0);
+	dt2.Set(5, 30, 0, 0);
+	RestoreTime();
+
+	CPPUNIT_ASSERT_EQUAL(31, (int)dt.GetDay());
+	CPPUNIT_ASSERT_EQUAL(wxDateTime::Oct, dt.GetMonth());
+	CPPUNIT_ASSERT_EQUAL(2004, (int)dt.GetYear());
+	CPPUNIT_ASSERT_EQUAL(1, (int)dt.GetHour());
+	CPPUNIT_ASSERT_EQUAL(30, (int)dt.GetMinute());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetSecond());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt.GetMillisecond());
+
+	CPPUNIT_ASSERT_EQUAL(31, (int)dt2.GetDay());
+	CPPUNIT_ASSERT_EQUAL(wxDateTime::Oct, dt2.GetMonth());
+	CPPUNIT_ASSERT_EQUAL(2004, (int)dt2.GetYear());
+	CPPUNIT_ASSERT_EQUAL(5, (int)dt2.GetHour());
+	CPPUNIT_ASSERT_EQUAL(30, (int)dt2.GetMinute());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt2.GetSecond());
+	CPPUNIT_ASSERT_EQUAL(0, (int)dt2.GetMillisecond());
+#endif
+}
+
+//////////////////////////////////////////////////////////////////////////
+
+void DateTimeTestCase::SaveTime()
+{
+#ifdef WIN32
+	GetSystemTime(&_savedTime);
+	GetTimeZoneInformation(&_tzi);
+#endif
+}
+
+//////////////////////////////////////////////////////////////////////////
+
+void DateTimeTestCase::RestoreTime()
+{
+#ifdef WIN32
+	SetSystemTime(&_savedTime);
+	SetTimeZoneInformation(&_tzi);
+#endif
+}

 	  	 

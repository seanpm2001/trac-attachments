Index: include/wx/aui/aui.h
===================================================================
--- include/wx/aui/aui.h	(revision 62011)
+++ include/wx/aui/aui.h	(working copy)
@@ -18,6 +18,8 @@
 #include "wx/aui/auibar.h"
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabmdi.h"
+#include "wx/aui/tabdocmdi.h"
 
 #endif // _WX_AUI_H_
 
+
Index: include/wx/aui/tabdocmdi.h
===================================================================
--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(revision 0)
@@ -0,0 +1,136 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     Frame classes for Aui MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AUITABDOCMDI_H_
+#define _WX_AUITABDOCMDI_H_
+
+#if wxUSE_AUI
+
+#include "wx/docmdi.h"
+#include "wx/aui/tabmdi.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+
+/*
+ * Use this instead of wxAuiMDIParentFrame
+ */
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame
+    : public wxAuiMDIParentFrame
+    , public wxDocMDIParentFrameAnyBase
+{
+public:
+    wxAuiDocMDIParentFrame()
+        : wxAuiMDIParentFrame()
+        , wxDocMDIParentFrameAnyBase(NULL, this)
+    {}
+
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxWindow *parent,
+                           wxWindowID winid,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE,
+                           const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocManager *manager,
+                wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the document manager's event table
+    virtual bool TryBefore(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const { return m_docManager; }
+
+    void OnNotebookPageChanged(wxAuiNotebookEvent &event);
+    void OnCloseWindow(wxCloseEvent& event);
+
+#if wxUSE_MENUS
+    void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIParentFrame)
+};
+
+// ----------------------------------------------------------------------------
+// An MDI document child frame: we need to define it as a class just for wxRTTI,
+// otherwise we could simply typedef it
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame
+    : public wxAuiMDIChildFrame
+    , public wxDocChildFrameAnyBase
+{
+public:
+    wxAuiDocMDIChildFrame()
+        : wxAuiMDIChildFrame()
+        , wxDocChildFrameAnyBase(NULL, NULL, this)
+    {}
+
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiDocMDIParentFrame *parent,
+                          wxWindowID id,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr)
+        : wxAuiMDIChildFrame(parent, id, title, pos, size, style, name)
+        , wxDocChildFrameAnyBase(doc, view, this)
+    {}
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiDocMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the child view's event table
+    virtual bool TryBefore(wxEvent& event)
+    {
+        if (wxDocChildFrameAnyBase::TryBefore(event))
+            return true;
+
+        return wxAuiMDIChildFrame::TryBefore(event);
+    }
+
+    virtual bool Destroy()
+    {
+        return (wxDocChildFrameAnyBase::Destroy() &&
+                wxAuiMDIChildFrame::Destroy());
+    }
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIChildFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIChildFrame);
+};
+
+
+#endif
+    // wxUSE_AUI
+
+#endif
+    // _WX_AUITABDOCMDI_H_
Index: include/wx/aui/tabmdi.h
===================================================================
--- include/wx/aui/tabmdi.h	(revision 62011)
+++ include/wx/aui/tabmdi.h	(working copy)
@@ -18,7 +18,7 @@
 // headers
 // ----------------------------------------------------------------------------
 
-#include "wx/frame.h"
+#include "wx/mdi.h"
 #include "wx/panel.h"
 #include "wx/notebook.h"
 #include "wx/icon.h"
@@ -36,7 +36,7 @@
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxFrame
+class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxMDIParentFrameBase
 {
 public:
     wxAuiMDIParentFrame();
@@ -63,7 +63,6 @@
     wxAuiNotebook* GetNotebook() const;
 
 #if wxUSE_MENUS
-    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
     void SetWindowMenu(wxMenu* pMenu);
 
     virtual void SetMenuBar(wxMenuBar *pMenuBar);
@@ -71,12 +70,8 @@
 
     void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
 
-    wxAuiMDIChildFrame *GetActiveChild() const;
-    void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
+    virtual wxMDIClientWindowBase *OnCreateClient();
 
-    wxAuiMDIClientWindow *GetClientWindow() const;
-    virtual wxAuiMDIClientWindow *OnCreateClient();
-
     virtual void Cascade() { /* Has no effect */ }
     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
     virtual void ArrangeIcons() { /* Has no effect */ }
@@ -84,12 +79,9 @@
     virtual void ActivatePrevious();
 
 protected:
-    wxAuiMDIClientWindow*   m_pClientWindow;
-    wxAuiMDIChildFrame*     m_pActiveChild;
     wxEvent*                m_pLastEvt;
 
 #if wxUSE_MENUS
-    wxMenu              *m_pWindowMenu;
     wxMenuBar           *m_pMyMenuBar;
 #endif // wxUSE_MENUS
 
@@ -116,7 +108,7 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxPanel
+class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxMDIChildFrameBase
 {
 public:
     wxAuiMDIChildFrame();
@@ -194,9 +186,6 @@
     void OnActivate(wxActivateEvent& evt);
     void OnCloseWindow(wxCloseEvent& evt);
 
-    void SetMDIParentFrame(wxAuiMDIParentFrame* parent);
-    wxAuiMDIParentFrame* GetMDIParentFrame() const;
-
 protected:
     void Init();
     virtual void DoSetSize(int x, int y, int width, int height, int size_flags);
@@ -214,7 +203,6 @@
     void DoShow(bool show);
 
 protected:
-    wxAuiMDIParentFrame* m_pMDIParentFrame;
     wxRect m_mdi_newrect;
     wxRect m_mdi_currect;
     wxString m_title;
@@ -239,14 +227,16 @@
 // wxAuiMDIClientWindow
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIClientWindow : public wxAuiNotebook
+class WXDLLIMPEXP_AUI wxAuiMDIClientWindow
+    : public wxMDIClientWindowBase
+    , public wxAuiNotebook
 {
 public:
     wxAuiMDIClientWindow();
     wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
     ~wxAuiMDIClientWindow();
 
-    virtual bool CreateClient(wxAuiMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
     virtual int SetSelection(size_t page);
Index: include/wx/docmdi.h
===================================================================
--- include/wx/docmdi.h	(revision 62011)
+++ include/wx/docmdi.h	(working copy)
@@ -2,7 +2,7 @@
 // Name:        docmdi.h
 // Purpose:     Frame classes for MDI document/view applications
 // Author:      Julian Smart
-// Modified by:
+// Modified by: Kinaou Hervé
 // Created:     01/02/97
 // RCS-ID:      $Id$
 // Copyright:   (c) Julian Smart
@@ -19,59 +19,106 @@
 #include "wx/docview.h"
 #include "wx/mdi.h"
 
-/*
- * Use this instead of wxMDIParentFrame
- */
-
-class WXDLLIMPEXP_CORE wxDocMDIParentFrame: public wxMDIParentFrame
+class WXDLLIMPEXP_CORE wxDocMDIParentFrameAnyBase
 {
 public:
-    wxDocMDIParentFrame();
-    wxDocMDIParentFrame(wxDocManager *manager, wxFrame *parent, wxWindowID id,
-        const wxString& title, const wxPoint& pos = wxDefaultPosition,
-        const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = wxFrameNameStr);
+    wxDocMDIParentFrameAnyBase(wxDocManager *manager, wxWindow *window)
+        : m_win(window)
+    {
+        m_docManager = manager;
 
-    bool Create(wxDocManager *manager, wxFrame *parent, wxWindowID id,
-        const wxString& title, const wxPoint& pos = wxDefaultPosition,
-        const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE, const wxString& name = wxFrameNameStr);
+        GetWindow()->Bind(wxEVT_COMMAND_MENU_SELECTED,
+            &wxDocMDIParentFrameAnyBase::OnExit, this, wxID_EXIT);
+        GetWindow()->Bind(wxEVT_COMMAND_MENU_SELECTED,
+            &wxDocMDIParentFrameAnyBase::OnMRUFile, this, wxID_FILE1, wxID_FILE9);
+        GetWindow()->Bind(wxEVT_CLOSE_WINDOW,
+            &wxDocMDIParentFrameAnyBase::OnCloseWindow, this);
+    }
 
+    void SetDocumentManager(wxDocManager *docManager) { m_docManager = docManager; }
     wxDocManager *GetDocumentManager(void) const { return m_docManager; }
 
-    void OnExit(wxCommandEvent& event);
-    void OnMRUFile(wxCommandEvent& event);
-    void OnCloseWindow(wxCloseEvent& event);
+    wxWindow *const GetWindow() const { return m_win; }
 
+    virtual void OnExit(wxCommandEvent& WXUNUSED(event))
+    {
+        GetWindow()->Close();
+    }
+
+    virtual void OnMRUFile(wxCommandEvent& event)
+    {
+        wxString f(m_docManager->GetHistoryFile(event.GetId() - wxID_FILE1));
+        if (!f.empty())
+            (void)m_docManager->CreateDocument(f, wxDOC_SILENT);
+    }
+
+    virtual void OnCloseWindow(wxCloseEvent& event)
+    {
+      if (m_docManager->Clear(!event.CanVeto()))
+      {
+        GetWindow()->Destroy();
+      }
+      else
+        event.Veto();
+    }
+
 protected:
-    void Init();
+    virtual bool TryBefore(wxEvent& event)
+    {
+        if ( m_docManager && m_docManager->ProcessEventHere(event) )
+            return true;
+        return false;
+    }
 
-    virtual bool TryBefore(wxEvent& event);
-
     wxDocManager *m_docManager;
 
 private:
+    wxDocMDIParentFrameAnyBase() : m_win(NULL) {}
+    wxWindow *const m_win;
+    wxDECLARE_NO_COPY_CLASS(wxDocMDIParentFrameAnyBase);
+};
+
+class WXDLLIMPEXP_CORE wxDocMDIParentFrame
+    : public wxMDIParentFrame
+    , public wxDocMDIParentFrameAnyBase
+{
+public:
+    wxDocMDIParentFrame(wxDocManager *manager,
+                        wxFrame *parent,
+                        wxWindowID id,
+                        const wxString& title,
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxDefaultSize,
+                        long style = wxDEFAULT_FRAME_STYLE,
+                        const wxString& name = wxFrameNameStr)
+        : wxMDIParentFrame(parent, id, title, pos, size, style, name)
+        , wxDocMDIParentFrameAnyBase(manager, this)
+    {}
+
+    // Extend event processing to search the document manager's event table
+    virtual bool TryBefore(wxEvent& event)
+    {
+        if (wxDocMDIParentFrameAnyBase::TryBefore(event))
+            return true;
+
+        return wxMDIParentFrame::TryBefore(event);
+    }
+
+private:
     DECLARE_CLASS(wxDocMDIParentFrame)
-    DECLARE_EVENT_TABLE()
     wxDECLARE_NO_COPY_CLASS(wxDocMDIParentFrame);
 };
 
+
+
 // ----------------------------------------------------------------------------
 // An MDI document child frame: we need to define it as a class just for wxRTTI,
 // otherwise we could simply typedef it
 // ----------------------------------------------------------------------------
 
-#ifdef __VISUALC6__
-    // "non dll-interface class 'wxDocChildFrameAny<>' used as base interface
-    // for dll-interface class 'wxDocMDIChildFrame'" -- this is bogus as the
-    // template will be DLL-exported but only once it is used as base class
-    // here!
-    #pragma warning (push)
-    #pragma warning (disable:4275)
-#endif
-
-typedef
-  wxDocChildFrameAny<wxMDIChildFrame, wxMDIParentFrame> wxDocMDIChildFrameBase;
-
-class WXDLLIMPEXP_CORE wxDocMDIChildFrame : public wxDocMDIChildFrameBase
+class WXDLLIMPEXP_CORE wxDocMDIChildFrame
+    : public wxMDIChildFrame
+    , public wxDocChildFrameAnyBase
 {
 public:
     wxDocMDIChildFrame(wxDocument *doc,
@@ -83,20 +130,30 @@
                        const wxSize& size = wxDefaultSize,
                        long style = wxDEFAULT_FRAME_STYLE,
                        const wxString& name = wxFrameNameStr)
-        : wxDocMDIChildFrameBase(doc, view,
-                                 parent, id, title, pos, size, style, name)
+        : wxMDIChildFrame(parent, id, title, pos, size, style, name)
+        , wxDocChildFrameAnyBase(doc, view, this)
+    {}
+
+    // Extend event processing to search the child view's event table
+    virtual bool TryBefore(wxEvent& event)
     {
+        if (wxDocChildFrameAnyBase::TryBefore(event))
+            return true;
+
+        return wxMDIChildFrame::TryBefore(event);
     }
 
+    virtual bool Destroy()
+    {
+        return (wxDocChildFrameAnyBase::Destroy() &&
+                wxMDIChildFrame::Destroy());
+    }
+
 private:
     DECLARE_CLASS(wxDocMDIChildFrame)
     wxDECLARE_NO_COPY_CLASS(wxDocMDIChildFrame);
 };
 
-#ifdef __VISUALC6__
-    #pragma warning (pop)
-#endif
-
 #endif // wxUSE_MDI_ARCHITECTURE
 
 #endif // _WX_DOCMDI_H_
Index: include/wx/docview.h
===================================================================
--- include/wx/docview.h	(revision 62011)
+++ include/wx/docview.h	(working copy)
@@ -2,7 +2,7 @@
 // Name:        wx/docview.h
 // Purpose:     Doc/View classes
 // Author:      Julian Smart
-// Modified by:
+// Modified by: Kinaou Hervé
 // Created:     01/02/97
 // RCS-ID:      $Id$
 // Copyright:   (c) Julian Smart
@@ -513,45 +513,27 @@
 // ----------------------------------------------------------------------------
 // Base class for child frames -- this is what wxView renders itself into
 //
-// Notice that this is a mix-in class so it doesn't derive from wxWindow, only
-// wxDocChildFrameAny does
+// Notice that this is a mix-in class so it doesn't derive from wxWindow
 // ----------------------------------------------------------------------------
 
 class WXDLLIMPEXP_CORE wxDocChildFrameAnyBase
 {
 public:
-    // default ctor, use Create() after it
-    wxDocChildFrameAnyBase()
+    wxDocChildFrameAnyBase(wxDocument *doc, wxView *view, wxWindow *window)
+        : m_win(window)
     {
-        m_childDocument = NULL;
-        m_childView = NULL;
-        m_win = NULL;
-    }
-
-    // full ctor equivalent to using the default one and Create(0
-    wxDocChildFrameAnyBase(wxDocument *doc, wxView *view, wxWindow *win)
-    {
-        Create(doc, view, win);
-    }
-
-    // method which must be called for an object created using the default ctor
-    //
-    // note that it returns bool just for consistency with Create() methods in
-    // other classes, we never return false from here
-    bool Create(wxDocument *doc, wxView *view, wxWindow *win)
-    {
         m_childDocument = doc;
         m_childView = view;
-        m_win = win;
 
         if ( view )
             view->SetDocChildFrame(this);
 
-        return true;
+        GetWindow()->Bind(wxEVT_ACTIVATE,
+            &wxDocChildFrameAnyBase::OnActivate, this);
+        GetWindow()->Bind(wxEVT_CLOSE_WINDOW,
+            &wxDocChildFrameAnyBase::OnCloseWindow, this);
     }
 
-    // dtor doesn't need to be virtual, an object should never be destroyed via
-    // a pointer to this class
     ~wxDocChildFrameAnyBase()
     {
         // prevent the view from deleting us if we're being deleted directly
@@ -565,13 +547,23 @@
     void SetDocument(wxDocument *doc) { m_childDocument = doc; }
     void SetView(wxView *view) { m_childView = view; }
 
-    wxWindow *GetWindow() const { return m_win; }
+    wxWindow *const GetWindow() const { return m_win; }
 
+    virtual bool Destroy()
+    {
+        // FIXME: why exactly do we do this? to avoid activation events during
+        //        destructions maybe?
+        m_childView = NULL;
+        return true;
+    }
+
 protected:
+
+    // hook the child view into event handlers chain here
     // we're not a wxEvtHandler but we provide this wxEvtHandler-like function
     // which is called from TryBefore() of the derived classes to give our view
     // a chance to process the message before the frame event handlers are used
-    bool TryProcessEvent(wxEvent& event)
+    virtual bool TryBefore(wxEvent& event)
     {
         return m_childView && m_childView->ProcessEventHere(event);
     }
@@ -586,128 +578,34 @@
 
     // the associated window: having it here is not terribly elegant but it
     // allows us to avoid having any virtual functions in this class
-    wxWindow* m_win;
-
-
-    wxDECLARE_NO_COPY_CLASS(wxDocChildFrameAnyBase);
-};
-
-// ----------------------------------------------------------------------------
-// Template implementing child frame concept using the given wxFrame-like class
-//
-// This is used to define wxDocChildFrame and wxDocMDIChildFrame: ChildFrame is
-// a wxFrame or wxMDIChildFrame (although in theory it could be any wxWindow-
-// derived class as long as it provided a ctor with the same signature as
-// wxFrame and OnActivate() method) and ParentFrame is either wxFrame or
-// wxMDIParentFrame.
-// ----------------------------------------------------------------------------
-
-template <class ChildFrame, class ParentFrame>
-class WXDLLIMPEXP_CORE wxDocChildFrameAny : public ChildFrame,
-                                            public wxDocChildFrameAnyBase
-{
-public:
-    typedef ChildFrame BaseClass;
-
-    // default ctor, use Create after it
-    wxDocChildFrameAny() { }
-
-    // ctor for a frame showing the given view of the specified document
-    wxDocChildFrameAny(wxDocument *doc,
-                       wxView *view,
-                       ParentFrame *parent,
-                       wxWindowID id,
-                       const wxString& title,
-                       const wxPoint& pos = wxDefaultPosition,
-                       const wxSize& size = wxDefaultSize,
-                       long style = wxDEFAULT_FRAME_STYLE,
-                       const wxString& name = wxFrameNameStr)
+    virtual void OnActivate(wxActivateEvent& event)
     {
-        Create(doc, view, parent, id, title, pos, size, style, name);
-    }
-
-    bool Create(wxDocument *doc,
-                wxView *view,
-                ParentFrame *parent,
-                wxWindowID id,
-                const wxString& title,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = wxDEFAULT_FRAME_STYLE,
-                const wxString& name = wxFrameNameStr)
-    {
-        if ( !wxDocChildFrameAnyBase::Create(doc, view, this) )
-            return false;
-
-        if ( !BaseClass::Create(parent, id, title, pos, size, style, name) )
-            return false;
-
-        this->Connect(wxEVT_ACTIVATE,
-                      wxActivateEventHandler(wxDocChildFrameAny::OnActivate));
-        this->Connect(wxEVT_CLOSE_WINDOW,
-                      wxCloseEventHandler(wxDocChildFrameAny::OnCloseWindow));
-
-        return true;
-    }
-
-    virtual bool Destroy()
-    {
-        // FIXME: why exactly do we do this? to avoid activation events during
-        //        destructions maybe?
-        m_childView = NULL;
-        return BaseClass::Destroy();
-    }
-
-protected:
-    // hook the child view into event handlers chain here
-    virtual bool TryBefore(wxEvent& event)
-    {
-        return TryProcessEvent(event) || BaseClass::TryBefore(event);
-    }
-
-private:
-    void OnActivate(wxActivateEvent& event)
-    {
-        BaseClass::OnActivate(event);
-
         if ( m_childView )
             m_childView->Activate(event.GetActive());
     }
 
-    void OnCloseWindow(wxCloseEvent& event)
+    virtual void OnCloseWindow(wxCloseEvent& event)
     {
         if ( CloseView(event) )
             Destroy();
         //else: vetoed
     }
 
-    wxDECLARE_NO_COPY_TEMPLATE_CLASS_2(wxDocChildFrameAny,
-                                        ChildFrame, ParentFrame);
+private:
+    wxDocChildFrameAnyBase() : m_win(NULL) {}
+    wxWindow *const m_win;
+    wxDECLARE_NO_COPY_CLASS(wxDocChildFrameAnyBase);
 };
 
 // ----------------------------------------------------------------------------
-// A default child frame: we need to define it as a class just for wxRTTI,
-// otherwise we could simply typedef it
+// A default parent frame
 // ----------------------------------------------------------------------------
 
-#ifdef __VISUALC6__
-    // "non dll-interface class 'wxDocChildFrameAny<>' used as base interface
-    // for dll-interface class 'wxDocChildFrame'" -- this is bogus as the
-    // template will be DLL-exported but only once it is used as base class
-    // here!
-    #pragma warning (push)
-    #pragma warning (disable:4275)
-#endif
-
-typedef wxDocChildFrameAny<wxFrame, wxFrame> wxDocChildFrameBase;
-
-class WXDLLIMPEXP_CORE wxDocChildFrame : public wxDocChildFrameBase
+class WXDLLIMPEXP_CORE wxDocChildFrame
+    : public wxDocChildFrameAnyBase
+    , public wxFrame
 {
 public:
-    wxDocChildFrame()
-    {
-    }
-
     wxDocChildFrame(wxDocument *doc,
                     wxView *view,
                     wxFrame *parent,
@@ -717,26 +615,23 @@
                     const wxSize& size = wxDefaultSize,
                     long style = wxDEFAULT_FRAME_STYLE,
                     const wxString& name = wxFrameNameStr)
-        : wxDocChildFrameBase(doc, view,
-                              parent, id, title, pos, size, style, name)
+        : wxFrame(parent, id, title, pos, size, style, name)
+        , wxDocChildFrameAnyBase(doc, view, this)
+    {}
+
+    // Extend event processing to search the child view's event table
+    virtual bool TryBefore(wxEvent& event)
     {
+        if (wxDocChildFrameAnyBase::TryBefore(event))
+            return true;
+
+        return wxFrame::TryBefore(event);
     }
 
-    bool Create(wxDocument *doc,
-                wxView *view,
-                wxFrame *parent,
-                wxWindowID id,
-                const wxString& title,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = wxDEFAULT_FRAME_STYLE,
-                const wxString& name = wxFrameNameStr)
+    virtual bool Destroy()
     {
-        return wxDocChildFrameBase::Create
-               (
-                    doc, view,
-                    parent, id, title, pos, size, style, name
-               );
+        return (wxDocChildFrameAnyBase::Destroy() &&
+                wxFrame::Destroy());
     }
 
 private:
@@ -744,10 +639,6 @@
     wxDECLARE_NO_COPY_CLASS(wxDocChildFrame);
 };
 
-#ifdef __VISUALC6__
-    #pragma warning (pop)
-#endif
-
 // ----------------------------------------------------------------------------
 // A default parent frame
 // ----------------------------------------------------------------------------
Index: include/wx/generic/mdig.h
===================================================================
--- include/wx/generic/mdig.h	(revision 62011)
+++ include/wx/generic/mdig.h	(working copy)
@@ -213,7 +213,9 @@
 // wxGenericMDIClientWindow
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxGenericMDIClientWindow : public wxMDIClientWindowBase
+class WXDLLIMPEXP_CORE wxGenericMDIClientWindow
+    : public wxMDIClientWindowBase
+    , public wxWindow
 {
 public:
     wxGenericMDIClientWindow() { }
@@ -224,7 +226,7 @@
     // (CreateGenericClient() is virtual itself to allow customizing the client
     // window creation by overriding it in the derived classes)
     virtual bool CreateGenericClient(wxWindow *parent);
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long WXUNUSED(style) = wxVSCROLL | wxHSCROLL)
     {
         return CreateGenericClient(parent);
Index: include/wx/mdi.h
===================================================================
--- include/wx/mdi.h	(revision 62011)
+++ include/wx/mdi.h	(working copy)
@@ -19,8 +19,17 @@
 #include "wx/frame.h"
 #include "wx/menu.h"
 
+enum MDI_MENU_ID
+{
+    wxWINDOWCLOSE = 4001,
+    wxWINDOWCLOSEALL,
+    wxWINDOWNEXT,
+    wxWINDOWPREV
+};
+
 // forward declarations
 class WXDLLIMPEXP_FWD_CORE wxMDIParentFrame;
+class WXDLLIMPEXP_FWD_CORE wxMDIChildFrameBase;
 class WXDLLIMPEXP_FWD_CORE wxMDIChildFrame;
 class WXDLLIMPEXP_FWD_CORE wxMDIClientWindowBase;
 class WXDLLIMPEXP_FWD_CORE wxMDIClientWindow;
@@ -65,9 +74,9 @@
     // ---------
 
     // Get or change the active MDI child window
-    virtual wxMDIChildFrame *GetActiveChild() const
+    virtual wxMDIChildFrameBase *GetActiveChild() const
         { return m_currentChild; }
-    virtual void SetActiveChild(wxMDIChildFrame *child)
+    virtual void SetActiveChild(wxMDIChildFrameBase *child)
         { m_currentChild = child; }
 
 
@@ -120,7 +129,7 @@
     // when creating the frame or your overridden version is not going to be
     // called (as the call to a virtual function from ctor will be dispatched
     // to this class version)
-    virtual wxMDIClientWindow *OnCreateClient();
+    virtual wxMDIClientWindowBase *OnCreateClient();
 
 protected:
     // This is wxMDIClientWindow for all the native implementations but not for
@@ -128,7 +137,7 @@
     // so we store it as just a base class pointer because we don't need its
     // exact type anyhow
     wxMDIClientWindowBase *m_clientWindow;
-    wxMDIChildFrame *m_currentChild;
+    wxMDIChildFrameBase *m_currentChild;
 
 #if wxUSE_MENUS
     // the current window menu or NULL if we are not using it
@@ -165,10 +174,10 @@
     // Return the MDI parent frame: notice that it may not be the same as
     // GetParent() (our parent may be the client window or even its subwindow
     // in some implementations)
-    wxMDIParentFrame *GetMDIParent() const { return m_mdiParent; }
+    wxMDIParentFrameBase *GetMDIParent() const { return m_mdiParent; }
 
     // Synonym for GetMDIParent(), was used in some other ports
-    wxMDIParentFrame *GetMDIParentFrame() const { return GetMDIParent(); }
+    wxMDIParentFrameBase *GetMDIParentFrame() const { return GetMDIParent(); }
 
 
     // in most ports MDI children frames are not really top-level, the only
@@ -177,7 +186,7 @@
     virtual bool IsTopLevel() const { return false; }
 
 protected:
-    wxMDIParentFrame *m_mdiParent;
+    wxMDIParentFrameBase *m_mdiParent;
 };
 
 // ----------------------------------------------------------------------------
@@ -301,7 +310,7 @@
 // wxMDIClientWindowBase: child of parent frame, parent of children frames
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIClientWindowBase : public wxWindow
+class WXDLLIMPEXP_CORE wxMDIClientWindowBase
 {
 public:
     /*
@@ -311,8 +320,10 @@
 
     // Can be overridden in the derived classes but the base class version must
     // be usually called first to really create the client window.
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long style = wxVSCROLL | wxHSCROLL) = 0;
+
+    wxWindow *GetWindow() { return dynamic_cast<wxWindow *>(this); }
 };
 
 // ----------------------------------------------------------------------------
@@ -354,7 +365,7 @@
     #include "wx/cocoa/mdi.h"
 #endif
 
-inline wxMDIClientWindow *wxMDIParentFrameBase::OnCreateClient()
+inline wxMDIClientWindowBase *wxMDIParentFrameBase::OnCreateClient()
 {
     return new wxMDIClientWindow;
 }
Index: include/wx/msw/mdi.h
===================================================================
--- include/wx/msw/mdi.h	(revision 62011)
+++ include/wx/msw/mdi.h	(working copy)
@@ -55,7 +55,7 @@
 
     // we don't store the active child in m_currentChild so override this
     // function to find it dynamically
-    virtual wxMDIChildFrame *GetActiveChild() const;
+    virtual wxMDIChildFrameBase *GetActiveChild() const;
 
     virtual void Cascade();
     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
@@ -240,13 +240,15 @@
 // wxMDIClientWindow
 // ---------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIClientWindow : public wxMDIClientWindowBase
+class WXDLLIMPEXP_CORE wxMDIClientWindow
+    : public wxMDIClientWindowBase
+    , public wxWindow
 {
 public:
     wxMDIClientWindow() { Init(); }
 
     // Note: this is virtual, to allow overridden behaviour.
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
     // Explicitly call default scroll behaviour
Index: interface/wx/aui/tabdocmdi.h
===================================================================
--- interface/wx/aui/tabdocmdi.h	(revision 0)
+++ interface/wx/aui/tabdocmdi.h	(revision 0)
@@ -0,0 +1,229 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     interface of wxAuiDocMDIParentFrame and wxAuiDocMDIChildFrame
+// Author:      wxWidgets team
+// RCS-ID:      $Id:$
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxAuiDocMDIParentFrame
+
+    The wxAuiDocMDIParentFrame class is part of the wxAUI class framework.
+    It provides a default top-level frame for applications using the document/view
+    framework. This class can only be used for wxAUI MDI parent frames.
+
+    It cooperates with the the wxView, wxDocument, wxDocManager and wxDocTemplate
+    classes.
+
+    @library{wxaui}
+    @category{docview}
+
+    @see @ref wxauioverview @ref overview_docview, @ref page_samples_auidocview, wxAuiMDIParentFrame
+*/
+class wxAuiDocMDIParentFrame : public wxAuiMDIParentFrame
+{
+public:
+    //@{
+    /**
+        Constructor.
+    */
+    wxAuiDocMDIParentFrame();
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxWindow *parent,
+                           wxWindowID winid,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                           const wxString& name = wxFrameNameStr);
+    //@}
+
+    /**
+        Destructor.
+    */
+    virtual ~wxAuiDocMDIParentFrame();
+
+    /**
+        Creates the window.
+    */
+    bool Create(wxDocManager *manager,
+                wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                const wxString& name = wxFrameNameStr );
+
+    /**
+        Extend event processing to search the document manager's event table.
+    */
+    virtual bool ProcessEvent(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const;
+
+    void OnNotebookPageChanged(wxAuiNotebookEvent &event);
+    void OnExit(wxCommandEvent& event);
+    void OnMRUFile(wxCommandEvent& event);
+    void OnCloseWindow(wxCloseEvent& event);
+
+protected:
+    void Init();
+    wxDocManager *m_docManager;
+
+public:
+    void SetArtProvider(wxAuiTabArt* provider);
+    wxAuiTabArt* GetArtProvider();
+    wxAuiNotebook* GetNotebook() const;
+    
+#if wxUSE_MENUS
+    wxMenu* GetWindowMenu() const;
+    void SetWindowMenu(wxMenu* pMenu);
+#endif // wxUSE_MENUS
+
+    void SetChildMenuBar(wxAuiDocMDIChildFrame *pChild);
+
+    wxAuiDocMDIChildFrame *GetActiveChild() const;
+    void SetActiveChild(wxAuiDocMDIChildFrame* pChildFrame);
+
+    wxAuiMDIClientWindow *GetClientWindow() const;
+
+#if wxUSE_MENUS
+    void RemoveWindowMenu(wxMenuBar *pMenuBar);
+    void AddWindowMenu(wxMenuBar *pMenuBar);
+    void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxAuiDocMDIParentFrame)
+};
+
+
+/**
+    @class wxAuiDocMDIChildFrame
+
+    The wxAuiDocMDIChildFrame class is part of the wxAUI class framework.
+    It provides a default frame for displaying documents on separate windows.
+    This class can only be used for wxAUI MDI child frames.
+
+    The class is part of the document/view framework supported by wxWidgets,
+    and cooperates with the the wxView, wxDocument, wxDocManager and wxDocTemplate
+    classes.
+
+    @library{wxaui}
+    @category{docview}
+
+    @see @ref wxauioverview @ref overview_docview, @ref page_samples_auidocview, wxAuiMDIChildFrame
+*/
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame: public wxAuiMDIChildFrame
+{
+public:
+    //@{
+    /**
+        Constructor.
+    */
+    wxAuiDocMDIChildFrame();
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiDocMDIParentFrame *parent,
+                          wxWindowID winid,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+    //@}
+
+    /**
+        Destructor.
+    */
+    virtual ~wxAuiDocMDIChildFrame();
+
+    /**
+        Creates the window.
+    */
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiDocMDIParentFrame *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    /**
+        Extend event processing to search the view's event table.
+    */
+    virtual bool ProcessEvent(wxEvent& event);
+
+    /**
+        Returns the document associated with this frame.
+    */
+    inline wxDocument *GetDocument() const;
+    /**
+        Returns the view associated with this frame.
+    */
+    inline wxView *GetView(void) const;
+    /**
+        Sets the document for this frame.
+    */
+    inline void SetDocument(wxDocument *doc);
+    /**
+        Sets the view for this frame.
+    */
+    inline void SetView(wxView *view);
+    /**
+        Nullify the view and destroy the frame.
+    */
+    bool Destroy(),
+
+protected:
+    void Init();
+    wxDocument*       m_childDocument;
+    wxView*           m_childView;
+
+public:
+    /**
+        Creates the window.
+    */
+    void OnMenuHighlight(wxMenuEvent& event);
+    /**
+        Sets the currently active view to be the frame's view. You may need
+        to override (but still call) this function in order to set the keyboard
+        focus for your subwindow.
+    */
+    void OnActivate(wxActivateEvent& event);
+    /**
+        Closes and deletes the current view and document.
+    */
+    void OnCloseWindow(wxCloseEvent& event);
+
+    /**
+        Creates the window.
+    */
+    void SetMDIParentFrame(wxAuiDocMDIParentFrame* parent);
+    /**
+        Creates the window.
+    */
+    wxAuiDocMDIParentFrame* GetMDIParentFrame() const;
+    
+public:
+    /**
+            This function needs to be called when a size change is confirmed,
+            we needed this function to prevent anybody from the outside
+            changing the panel... it messes the UI layout when we would allow it.
+    */
+    void ApplyMDIChildFrameRect();
+    void DoShow(bool show);
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxAuiDocMDIChildFrame)
+    DECLARE_EVENT_TABLE()
+
+    friend class wxAuiMDIClientWindow;
+};
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 62011)
+++ samples/docview/docview.cpp	(working copy)
@@ -49,6 +49,9 @@
 
 #include "wx/docview.h"
 #include "wx/docmdi.h"
+#if wxUSE_AUI
+#include "wx/aui/tabdocmdi.h"
+#endif
 
 #include "docview.h"
 #include "doc.h"
@@ -79,7 +82,11 @@
 MyApp::MyApp()
 {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    m_mode = Mode_AUI_MDI;
+#else
     m_mode = Mode_MDI;
+#endif
 #else
     m_mode = Mode_SDI;
 #endif
@@ -92,6 +99,7 @@
 namespace CmdLineOption
 {
 
+const char * const AUI_MDI = "aui_mdi";
 const char * const MDI = "mdi";
 const char * const SDI = "sdi";
 const char * const SINGLE = "single";
@@ -102,6 +110,8 @@
 {
     wxApp::OnInitCmdLine(parser);
 
+    parser.AddSwitch("", CmdLineOption::AUI_MDI,
+                     "run in AUI MDI mode: multiple documents, single window, with AUI framework");
     parser.AddSwitch("", CmdLineOption::MDI,
                      "run in MDI mode: multiple documents, single window");
     parser.AddSwitch("", CmdLineOption::SDI,
@@ -115,11 +125,19 @@
     int numModeOptions = 0;
 
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( parser.Found(CmdLineOption::AUI_MDI) )
+    {
+        m_mode = Mode_AUI_MDI;
+        numModeOptions++;
+    }
+#else
     if ( parser.Found(CmdLineOption::MDI) )
     {
         m_mode = Mode_MDI;
         numModeOptions++;
     }
+#endif
 #endif // wxUSE_MDI_ARCHITECTURE
 
     if ( parser.Found(CmdLineOption::SDI) )
@@ -181,6 +199,16 @@
     // create the main frame window
     wxFrame *frame;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( m_mode == Mode_AUI_MDI )
+    {
+        frame = new wxAuiDocMDIParentFrame(docManager, NULL, wxID_ANY,
+                                           GetAppDisplayName(),
+                                           wxDefaultPosition,
+                                           wxSize(500, 400));
+    }
+    else
+#else
     if ( m_mode == Mode_MDI )
     {
         frame = new wxDocMDIParentFrame(docManager, NULL, wxID_ANY,
@@ -189,6 +217,7 @@
                                         wxSize(500, 400));
     }
     else
+#endif
 #endif // wxUSE_MDI_ARCHITECTURE
     {
         frame = new wxDocParentFrame(docManager, NULL, wxID_ANY,
@@ -282,6 +311,22 @@
     // create a child frame of appropriate class for the current mode
     wxFrame *subframe;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( GetMode() == Mode_AUI_MDI )
+    {
+        subframe = new wxAuiDocMDIChildFrame
+                       (
+                            doc,
+                            view,
+                            wxStaticCast(GetTopWindow(), wxAuiDocMDIParentFrame),
+                            wxID_ANY,
+                            "Child Frame",
+                            wxDefaultPosition,
+                            wxSize(300, 300)
+                       );
+    }
+    else
+#else
     if ( GetMode() == Mode_MDI )
     {
         subframe = new wxDocMDIChildFrame
@@ -296,6 +341,7 @@
                        );
     }
     else
+#endif
 #endif // wxUSE_MDI_ARCHITECTURE
     {
         subframe = new wxDocChildFrame
@@ -349,9 +395,15 @@
     switch ( m_mode )
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        case Mode_AUI_MDI:
+            modeName = "AUI_MDI";
+            break;
+#else
         case Mode_MDI:
             modeName = "MDI";
             break;
+#endif
 #endif // wxUSE_MDI_ARCHITECTURE
 
         case Mode_SDI:
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 62011)
+++ samples/docview/docview.h	(working copy)
@@ -27,7 +27,11 @@
     enum Mode
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        Mode_AUI_MDI,   // AUI MDI mode: multiple documents, single top level window with AUI framework
+#else
         Mode_MDI,   // MDI mode: multiple documents, single top level window
+#endif
 #endif // wxUSE_MDI_ARCHITECTURE
         Mode_SDI,   // SDI mode: multiple documents, multiple top level windows
         Mode_Single // single document mode (and hence single top level window)
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 62011)
+++ src/aui/framemanager.cpp	(working copy)
@@ -1013,7 +1013,7 @@
     if (m_frame->IsKindOf(CLASSINFO(wxMDIParentFrame)))
     {
         wxMDIParentFrame* mdi_frame = (wxMDIParentFrame*)m_frame;
-        wxWindow* client_window = mdi_frame->GetClientWindow();
+        wxWindow* client_window = mdi_frame->GetClientWindow()->GetWindow();
 
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
 
@@ -1024,7 +1024,7 @@
     else if (m_frame->IsKindOf(CLASSINFO(wxAuiMDIParentFrame)))
     {
         wxAuiMDIParentFrame* mdi_frame = (wxAuiMDIParentFrame*)m_frame;
-        wxAuiMDIClientWindow* client_window = mdi_frame->GetClientWindow();
+        wxAuiMDIClientWindow* client_window = dynamic_cast<wxAuiMDIClientWindow *>(mdi_frame->GetClientWindow()->GetWindow());
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
 
         AddPane(client_window,
Index: src/aui/tabdocmdi.cpp
===================================================================
--- src/aui/tabdocmdi.cpp	(revision 0)
+++ src/aui/tabdocmdi.cpp	(revision 0)
@@ -0,0 +1,178 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.cpp
+// Purpose:     Frame classes for MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_AUI
+#if wxUSE_MDI
+
+#include "wx/aui/tabdocmdi.h"
+
+/*
+ * Docview Aui MDI parent frame
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame(wxDocManager *manager,
+                                               wxWindow *parent,
+                                               wxWindowID winid,
+                                               const wxString& title,
+                                               const wxPoint& pos,
+                                               const wxSize& size,
+                                               long style,
+                                               const wxString& name)
+    : wxAuiMDIParentFrame(parent, winid, title, pos, size, style, name)
+    , wxDocMDIParentFrameAnyBase(manager, this)
+{
+    GetNotebook()->Connect(GetNotebook()->GetId(), wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+        wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged), NULL, this);
+
+    GetWindow()->Unbind(wxEVT_CLOSE_WINDOW,
+        &wxDocMDIParentFrameAnyBase::OnCloseWindow, this, wxID_CLOSE);
+    Connect(wxID_CLOSE,
+        wxCloseEventHandler(wxAuiDocMDIParentFrame::OnCloseWindow), NULL, this);
+#if wxUSE_MENUS
+    Connect(wxID_ANY,
+        wxCommandEventHandler(wxAuiDocMDIParentFrame::DoHandleMenu), NULL, this);
+#endif
+}
+
+bool wxAuiDocMDIParentFrame::Create(wxDocManager *manager,
+                                    wxWindow *parent,
+                                    wxWindowID winid,
+                                    const wxString& title,
+                                    const wxPoint& pos,
+                                    const wxSize& size,
+                                    long style,
+                                    const wxString& name)
+{
+    if (wxAuiMDIParentFrame::Create(parent, winid, title, pos, size, style, name))
+    {
+        SetDocumentManager(manager);
+        return true;
+    }
+    return false;
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIParentFrame::TryBefore(wxEvent& event)
+{
+#if wxUSE_MENUS
+    // Catch the events of kind wxID_CLOSE[_ALL] to send the appropriate tabmdi event
+    if (event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+    {
+        if (event.GetId() == wxID_CLOSE)
+            event.SetId(wxWINDOWCLOSE);
+        else if (event.GetId() == wxID_CLOSE_ALL)
+            event.SetId(wxWINDOWCLOSEALL);
+    }
+#endif //wxUSE_MENUS
+
+    if (wxDocMDIParentFrameAnyBase::TryBefore(event))
+        return true;
+
+    return wxAuiMDIParentFrame::TryBefore(event);
+}
+
+void wxAuiDocMDIParentFrame::OnNotebookPageChanged(wxAuiNotebookEvent &event)
+{
+    wxWindow *selWnd = GetNotebook()->GetPage(GetNotebook()->GetSelection());
+    if (selWnd->IsKindOf(CLASSINFO(wxAuiDocMDIChildFrame)))
+    {
+        wxAuiDocMDIChildFrame *selFrm = dynamic_cast<wxAuiDocMDIChildFrame *>(selWnd);
+        if (selFrm->GetView())
+            selFrm->GetView()->Activate(true);
+    }
+    event.Skip(true);
+}
+
+void wxAuiDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    wxCommandEvent eventCloseAll(wxEVT_COMMAND_MENU_SELECTED, wxWINDOWCLOSEALL);
+    eventCloseAll.Skip();
+    DoHandleMenu(eventCloseAll);
+
+    if (eventCloseAll.GetSkipped())
+    {
+        GetNotebook()->Disconnect(GetNotebook()->GetId(),
+                                  wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+                                  wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged),
+                                  NULL,
+                                  this);
+        Disconnect(wxID_CLOSE, wxCloseEventHandler(wxAuiDocMDIParentFrame::OnCloseWindow));
+        GetWindow()->Bind(wxEVT_CLOSE_WINDOW,
+            &wxDocMDIParentFrameAnyBase::OnCloseWindow, this, wxID_CLOSE);
+#if wxUSE_MENUS
+        Disconnect(wxID_ANY, wxCommandEventHandler(wxAuiDocMDIParentFrame::DoHandleMenu));
+#endif
+        wxAuiMDIParentFrame::OnCloseWindow(event);
+    }
+}
+
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+{
+    switch (event.GetId())
+    {
+    case wxWINDOWCLOSEALL:
+        while (m_currentChild)
+        {
+            if (!m_currentChild->Close())
+            {
+                event.Skip(false);
+                return; // failure
+            }
+        }
+        break;
+    default:
+        wxAuiMDIParentFrame::DoHandleMenu(event);
+    }
+}
+#endif // wxUSE_MENUS
+
+
+/*
+ * Default document child frame for Aui MDI children
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+
+bool wxAuiDocMDIChildFrame::Create(wxDocument *doc,
+                                   wxView *view,
+                                   wxAuiDocMDIParentFrame *parent,
+                                   wxWindowID id,
+                                   const wxString& title,
+                                   const wxPoint& pos,
+                                   const wxSize& size,
+                                   long style,
+                                   const wxString& name)
+{
+    if (wxAuiMDIChildFrame::Create(parent, id, title, pos, size, style, name))
+    {
+        SetDocument(doc);
+        SetView(view);
+        return true;
+    }
+    return false;
+}
+
+#endif
+    //wxUSE_AUI
+#endif
+    // wxUSE_MDI
+
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 62011)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -39,21 +39,14 @@
 
 #include "wx/stockitem.h"
 
-enum MDI_MENU_ID
-{
-    wxWINDOWCLOSE = 4001,
-    wxWINDOWCLOSEALL,
-    wxWINDOWNEXT,
-    wxWINDOWPREV
-};
 
 //-----------------------------------------------------------------------------
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxFrame)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxMDIParentFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxFrame)
+BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxMDIParentFrameBase)
 #if wxUSE_MENUS
     EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::DoHandleMenu)
 #endif
@@ -79,12 +72,11 @@
 wxAuiMDIParentFrame::~wxAuiMDIParentFrame()
 {
     // Make sure the client window is destructed before the menu bars are!
-    wxDELETE(m_pClientWindow);
+    //wxDELETE(m_clientWindow);
 
 #if wxUSE_MENUS
     wxDELETE(m_pMyMenuBar);
     RemoveWindowMenu(GetMenuBar());
-    wxDELETE(m_pWindowMenu);
 #endif // wxUSE_MENUS
 }
 
@@ -101,42 +93,40 @@
     // "Window" menu
     if (!(style & wxFRAME_NO_WINDOW_MENU))
     {
-        m_pWindowMenu = new wxMenu;
-        m_pWindowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
-        m_pWindowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
-        m_pWindowMenu->AppendSeparator();
-        m_pWindowMenu->Append(wxWINDOWNEXT,     _("&Next"));
-        m_pWindowMenu->Append(wxWINDOWPREV,     _("&Previous"));
+        m_windowMenu = new wxMenu;
+        m_windowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
+        m_windowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
+        m_windowMenu->AppendSeparator();
+        m_windowMenu->Append(wxWINDOWNEXT,     _("&Next"));
+        m_windowMenu->Append(wxWINDOWPREV,     _("&Previous"));
     }
 #endif // wxUSE_MENUS
 
-    if ( !wxFrame::Create(parent, id, title, pos, size, style, name) )
+    if ( !wxMDIParentFrameBase::Create(parent, id, title, pos, size, style, name) )
         return false;
 
-    m_pClientWindow = OnCreateClient();
-    return m_pClientWindow != NULL;
+    m_clientWindow = OnCreateClient();
+    return m_clientWindow != NULL;
 }
 
 
 void wxAuiMDIParentFrame::SetArtProvider(wxAuiTabArt* provider)
 {
-    if (m_pClientWindow)
-    {
-        m_pClientWindow->SetArtProvider(provider);
-    }
+    if (m_clientWindow)
+        dynamic_cast<wxAuiNotebook *>(m_clientWindow)->SetArtProvider(provider);
 }
 
 wxAuiTabArt* wxAuiMDIParentFrame::GetArtProvider()
 {
-    if (!m_pClientWindow)
+    if (!m_clientWindow)
         return NULL;
 
-    return m_pClientWindow->GetArtProvider();
+    return dynamic_cast<wxAuiNotebook *>(m_clientWindow)->GetArtProvider();
 }
 
 wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
 {
-    return static_cast<wxAuiNotebook*>(m_pClientWindow);
+    return dynamic_cast<wxAuiNotebook *>(m_clientWindow);
 }
 
 
@@ -147,15 +137,15 @@
     // Replace the window menu from the currently loaded menu bar.
     wxMenuBar *pMenuBar = GetMenuBar();
 
-    if (m_pWindowMenu)
+    if (m_windowMenu)
     {
         RemoveWindowMenu(pMenuBar);
-        wxDELETE(m_pWindowMenu);
+        wxDELETE(m_windowMenu);
     }
 
     if (pMenu)
     {
-        m_pWindowMenu = pMenu;
+        m_windowMenu = pMenu;
         AddWindowMenu(pMenuBar);
     }
 }
@@ -168,7 +158,7 @@
     // Add the Window menu to the new menu bar.
     AddWindowMenu(pMenuBar);
 
-    wxFrame::SetMenuBar(pMenuBar);
+    wxMDIParentFrameBase::SetMenuBar(pMenuBar);
     //m_pMyMenuBar = GetMenuBar();
 }
 #endif // wxUSE_MENUS
@@ -210,9 +200,9 @@
 
     // let the active child (if any) process the event first.
     bool res = false;
-    if (m_pActiveChild &&
+    if (m_currentChild &&
         event.IsCommandEvent() &&
-        event.GetEventObject() != m_pClientWindow &&
+        event.GetEventObject() != dynamic_cast<wxObject *>(m_clientWindow) &&
            !(event.GetEventType() == wxEVT_ACTIVATE ||
              event.GetEventType() == wxEVT_SET_FOCUS ||
              event.GetEventType() == wxEVT_KILL_FOCUS ||
@@ -221,7 +211,7 @@
              event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
        )
     {
-        res = m_pActiveChild->GetEventHandler()->ProcessEvent(event);
+        res = m_currentChild->GetEventHandler()->ProcessEvent(event);
     }
 
     if (!res)
@@ -237,57 +227,44 @@
     return res;
 }
 
-wxAuiMDIChildFrame *wxAuiMDIParentFrame::GetActiveChild() const
+wxMDIClientWindowBase *wxAuiMDIParentFrame::OnCreateClient()
 {
-    return m_pActiveChild;
-}
-
-void wxAuiMDIParentFrame::SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
-{
-    m_pActiveChild = pChildFrame;
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::GetClientWindow() const
-{
-    return m_pClientWindow;
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::OnCreateClient()
-{
     return new wxAuiMDIClientWindow( this );
 }
 
 void wxAuiMDIParentFrame::ActivateNext()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    wxAuiNotebook *theClientWindow = dynamic_cast<wxAuiNotebook *>(m_clientWindow);
+    if (theClientWindow && theClientWindow->GetSelection() != wxNOT_FOUND)
     {
-        size_t active = m_pClientWindow->GetSelection() + 1;
-        if (active >= m_pClientWindow->GetPageCount())
+        size_t active = theClientWindow->GetSelection() + 1;
+        if (active >= theClientWindow->GetPageCount())
             active = 0;
 
-        m_pClientWindow->SetSelection(active);
+        theClientWindow->SetSelection(active);
     }
 }
 
 void wxAuiMDIParentFrame::ActivatePrevious()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    wxAuiNotebook *theClientWindow = dynamic_cast<wxAuiNotebook *>(m_clientWindow);
+    if (theClientWindow && theClientWindow->GetSelection() != wxNOT_FOUND)
     {
-        int active = m_pClientWindow->GetSelection() - 1;
+        int active = theClientWindow->GetSelection() - 1;
         if (active < 0)
-            active = m_pClientWindow->GetPageCount() - 1;
+            active = theClientWindow->GetPageCount() - 1;
 
-        m_pClientWindow->SetSelection(active);
+        theClientWindow->SetSelection(active);
     }
 }
 
 void wxAuiMDIParentFrame::Init()
 {
     m_pLastEvt = NULL;
-    m_pClientWindow = NULL;
-    m_pActiveChild = NULL;
+    m_clientWindow = NULL;
+    m_currentChild = NULL;
 #if wxUSE_MENUS
-    m_pWindowMenu = NULL;
+    m_windowMenu = NULL;
     m_pMyMenuBar = NULL;
 #endif // wxUSE_MENUS
 }
@@ -295,14 +272,14 @@
 #if wxUSE_MENUS
 void wxAuiMDIParentFrame::RemoveWindowMenu(wxMenuBar* pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         // Remove old window menu
         int pos = pMenuBar->FindMenu(_("&Window"));
         if (pos != wxNOT_FOUND)
         {
             // DBG:: We're going to delete the wrong menu!!!
-            wxASSERT(m_pWindowMenu == pMenuBar->GetMenu(pos));
+            wxASSERT(m_windowMenu == pMenuBar->GetMenu(pos));
             pMenuBar->Remove(pos);
         }
     }
@@ -310,13 +287,13 @@
 
 void wxAuiMDIParentFrame::AddWindowMenu(wxMenuBar *pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,wxSTOCK_NOFLAGS));
         if (pos == wxNOT_FOUND)
-            pMenuBar->Append(m_pWindowMenu, _("&Window"));
+            pMenuBar->Append(m_windowMenu, _("&Window"));
         else
-            pMenuBar->Insert(pos, m_pWindowMenu, _("&Window"));
+            pMenuBar->Insert(pos, m_windowMenu, _("&Window"));
     }
 }
 
@@ -325,17 +302,12 @@
     switch (event.GetId())
     {
         case wxWINDOWCLOSE:
-            if (m_pActiveChild)
-                m_pActiveChild->Close();
+            if (m_currentChild)
+                m_currentChild->Close();
             break;
         case wxWINDOWCLOSEALL:
-            while (m_pActiveChild)
-            {
-                if (!m_pActiveChild->Close())
-                {
-                    return; // failure
-                }
-            }
+            while (m_currentChild)
+                if (!m_currentChild->Close()) { return; }// failure
             break;
         case wxWINDOWNEXT:
             ActivateNext();
@@ -356,7 +328,8 @@
 
 void wxAuiMDIParentFrame::Tile(wxOrientation orient)
 {
-    wxAuiMDIClientWindow* client_window = GetClientWindow();
+    wxAuiMDIClientWindow* client_window =
+        dynamic_cast<wxAuiMDIClientWindow *>(GetClientWindow()->GetWindow());
     wxASSERT_MSG(client_window, wxT("Missing MDI Client Window"));
 
     int cur_idx = client_window->GetSelection();
@@ -378,9 +351,9 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxPanel)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxMDIChildFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxPanel)
+BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxMDIChildFrameBase)
     EVT_MENU_HIGHLIGHT_ALL(wxAuiMDIChildFrame::OnMenuHighlight)
     EVT_ACTIVATE(wxAuiMDIChildFrame::OnActivate)
     EVT_CLOSE(wxAuiMDIChildFrame::OnCloseWindow)
@@ -416,7 +389,8 @@
 
 wxAuiMDIChildFrame::~wxAuiMDIChildFrame()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+    wxAuiMDIParentFrame* pParentFrame = 
+        dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
     if (pParentFrame)
     {
         if (pParentFrame->GetActiveChild() == this)
@@ -424,7 +398,8 @@
             pParentFrame->SetActiveChild(NULL);
             pParentFrame->SetChildMenuBar(NULL);
         }
-        wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+        wxAuiMDIClientWindow* pClientWindow = 
+            dynamic_cast<wxAuiMDIClientWindow *>(pParentFrame->GetClientWindow());
         wxASSERT(pClientWindow);
         int idx = pClientWindow->GetPageIndex(this);
         if (idx != wxNOT_FOUND)
@@ -446,25 +421,30 @@
                                 long style,
                                 const wxString& name)
 {
-    wxAuiMDIClientWindow* pClientWindow = parent->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow = 
+        dynamic_cast<wxAuiMDIClientWindow *>(parent->GetClientWindow()->GetWindow());
     wxASSERT_MSG((pClientWindow != NULL), wxT("Missing MDI client window."));
 
     // see comment in constructor
     if (style & wxMINIMIZE)
         m_activate_on_create = false;
 
-    wxSize cli_size = pClientWindow->GetClientSize();
+    wxSize cli_size;
+    if (pClientWindow)
+        cli_size = pClientWindow->GetClientSize();
 
     // create the window off-screen to prevent flicker
-    wxPanel::Create(pClientWindow,
-                    id,
-                    wxPoint(cli_size.x+1, cli_size.y+1),
-                    size,
-                    wxNO_BORDER, name);
+    wxMDIChildFrameBase::Create(parent,
+                                id,
+                                title,
+                                wxPoint(cli_size.x+1, cli_size.y+1),
+                                size,
+                                wxNO_BORDER,
+                                name);
 
     DoShow(false);
 
-    SetMDIParentFrame(parent);
+    m_mdiParent = parent;
 
     // this is the currently active child
     parent->SetActiveChild(this);
@@ -479,10 +459,11 @@
 
 bool wxAuiMDIChildFrame::Destroy()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+    wxAuiMDIParentFrame* pParentFrame = dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
     wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow =
+        dynamic_cast<wxAuiMDIClientWindow *>(pParentFrame->GetClientWindow()->GetWindow());
     wxASSERT_MSG(pClientWindow, wxT("Missing MDI Client Window"));
 
     if (pParentFrame->GetActiveChild() == this)
@@ -514,7 +495,7 @@
 
     if (m_pMenuBar)
     {
-        wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+        wxAuiMDIParentFrame* pParentFrame = dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
         wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
 
         m_pMenuBar->SetParent(pParentFrame);
@@ -538,10 +519,11 @@
 {
     m_title = title;
 
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+    wxAuiMDIParentFrame* pParentFrame = dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
     wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow =
+        dynamic_cast<wxAuiMDIClientWindow *>(pParentFrame->GetClientWindow()->GetWindow());
     if (pClientWindow != NULL)
     {
         size_t pos;
@@ -575,7 +557,7 @@
 
 void wxAuiMDIChildFrame::SetIcon(const wxIcon& icon)
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+    wxAuiMDIParentFrame* pParentFrame = dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
     wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
 
     m_icon = icon;
@@ -583,7 +565,8 @@
     wxBitmap bmp;
     bmp.CopyFromIcon(m_icon);
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow =
+        dynamic_cast<wxAuiMDIClientWindow *>(pParentFrame->GetClientWindow()->GetWindow());
     if (pClientWindow != NULL)
     {
         int idx = pClientWindow->GetPageIndex(this);
@@ -603,10 +586,11 @@
 
 void wxAuiMDIChildFrame::Activate()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
+    wxAuiMDIParentFrame* pParentFrame = dynamic_cast<wxAuiMDIParentFrame *>(GetMDIParentFrame());
     wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow =
+        dynamic_cast<wxAuiMDIClientWindow *>(pParentFrame->GetClientWindow()->GetWindow());
 
     if (pClientWindow != NULL)
     {
@@ -625,11 +609,11 @@
 void wxAuiMDIChildFrame::OnMenuHighlight(wxMenuEvent& event)
 {
 #if wxUSE_STATUSBAR
-    if (m_pMDIParentFrame)
+    if (m_mdiParent)
     {
         // we don't have any help text for this item,
         // but may be the MDI frame does?
-        m_pMDIParentFrame->OnMenuHighlight(event);
+        m_mdiParent->OnMenuHighlight(event);
     }
 #else
     wxUnusedVar(event);
@@ -646,20 +630,9 @@
     Destroy();
 }
 
-void wxAuiMDIChildFrame::SetMDIParentFrame(wxAuiMDIParentFrame* parentFrame)
-{
-    m_pMDIParentFrame = parentFrame;
-}
-
-wxAuiMDIParentFrame* wxAuiMDIChildFrame::GetMDIParentFrame() const
-{
-    return m_pMDIParentFrame;
-}
-
 void wxAuiMDIChildFrame::Init()
 {
     m_activate_on_create = true;
-    m_pMDIParentFrame = NULL;
 #if wxUSE_MENUS
     m_pMenuBar = NULL;
 #endif // wxUSE_MENUS
@@ -682,7 +655,7 @@
 {
     m_mdi_newrect = wxRect(x, y, width, height);
 #ifdef __WXGTK__
-    wxPanel::DoSetSize(x,y,width, height, sizeFlags);
+    wxMDIChildFrameBase::DoSetSize(x,y,width, height, sizeFlags);
 #else
     wxUnusedVar(sizeFlags);
 #endif
@@ -697,7 +670,7 @@
 {
     if (m_mdi_currect != m_mdi_newrect)
     {
-        wxPanel::DoMoveWindow(m_mdi_newrect.x, m_mdi_newrect.y,
+        wxMDIChildFrameBase::DoMoveWindow(m_mdi_newrect.x, m_mdi_newrect.y,
                               m_mdi_newrect.width, m_mdi_newrect.height);
         m_mdi_currect = m_mdi_newrect;
     }
@@ -730,7 +703,7 @@
     DestroyChildren();
 }
 
-bool wxAuiMDIClientWindow::CreateClient(wxAuiMDIParentFrame* parent, long style)
+bool wxAuiMDIClientWindow::CreateClient(wxMDIParentFrameBase* parent, long style)
 {
     SetWindowStyleFlag(style);
 
@@ -798,10 +771,12 @@
         event.SetEventObject(active_child);
         active_child->GetEventHandler()->ProcessEvent(event);
 
-        if (active_child->GetMDIParentFrame())
+        wxAuiMDIParentFrame *theActiveParentFrame =
+            dynamic_cast<wxAuiMDIParentFrame *>(active_child->GetMDIParentFrame());
+        if (theActiveParentFrame)
         {
-            active_child->GetMDIParentFrame()->SetActiveChild(active_child);
-            active_child->GetMDIParentFrame()->SetChildMenuBar(active_child);
+            theActiveParentFrame->SetActiveChild(active_child);
+            theActiveParentFrame->SetChildMenuBar(active_child);
         }
     }
 
Index: src/common/docmdi.cpp
===================================================================
--- src/common/docmdi.cpp	(revision 62011)
+++ src/common/docmdi.cpp	(working copy)
@@ -25,68 +25,6 @@
  */
 
 IMPLEMENT_CLASS(wxDocMDIParentFrame, wxMDIParentFrame)
-
-BEGIN_EVENT_TABLE(wxDocMDIParentFrame, wxMDIParentFrame)
-    EVT_MENU(wxID_EXIT, wxDocMDIParentFrame::OnExit)
-    EVT_MENU_RANGE(wxID_FILE1, wxID_FILE9, wxDocMDIParentFrame::OnMRUFile)
-    EVT_CLOSE(wxDocMDIParentFrame::OnCloseWindow)
-END_EVENT_TABLE()
-
-wxDocMDIParentFrame::wxDocMDIParentFrame()
-{
-    Init();
-}
-
-wxDocMDIParentFrame::wxDocMDIParentFrame(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title,
-  const wxPoint& pos, const wxSize& size, long style, const wxString& name)
-{
-    Init();
-    Create(manager, frame, id, title, pos, size, style, name);
-}
-
-bool wxDocMDIParentFrame::Create(wxDocManager *manager, wxFrame *frame, wxWindowID id, const wxString& title,
-  const wxPoint& pos, const wxSize& size, long style, const wxString& name)
-{
-    m_docManager = manager;
-    return wxMDIParentFrame::Create(frame, id, title, pos, size, style, name);
-}
-
-void wxDocMDIParentFrame::OnExit(wxCommandEvent& WXUNUSED(event))
-{
-    Close();
-}
-
-void wxDocMDIParentFrame::Init()
-{
-    m_docManager = NULL;
-}
-
-void wxDocMDIParentFrame::OnMRUFile(wxCommandEvent& event)
-{
-    wxString f(m_docManager->GetHistoryFile(event.GetId() - wxID_FILE1));
-    if (!f.empty())
-        (void)m_docManager->CreateDocument(f, wxDOC_SILENT);
-}
-
-bool wxDocMDIParentFrame::TryBefore(wxEvent& event)
-{
-    if ( m_docManager && m_docManager->ProcessEventHere(event) )
-        return true;
-
-    return wxMDIParentFrame::TryBefore(event);
-}
-
-void wxDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
-{
-  if (m_docManager->Clear(!event.CanVeto()))
-  {
-    this->Destroy();
-  }
-  else
-    event.Veto();
-}
-
-
 IMPLEMENT_CLASS(wxDocMDIChildFrame, wxMDIChildFrame)
 
 #endif // wxUSE_DOC_VIEW_ARCHITECTURE
Index: src/generic/laywin.cpp
===================================================================
--- src/generic/laywin.cpp	(revision 62011)
+++ src/generic/laywin.cpp	(working copy)
@@ -214,7 +214,7 @@
         node = node->GetNext();
     }
 
-    wxWindow* clientWindow = frame->GetClientWindow();
+    wxWindow* clientWindow = frame->GetClientWindow()->GetWindow();
 
     rect = event.GetRect();
 
Index: src/generic/mdig.cpp
===================================================================
--- src/generic/mdig.cpp	(revision 62011)
+++ src/generic/mdig.cpp	(working copy)
@@ -40,13 +40,6 @@
 
 #include "wx/stockitem.h"
 
-enum MDI_MENU_ID
-{
-    wxWINDOWCLOSE = 4001,
-    wxWINDOWCLOSEALL,
-    wxWINDOWNEXT,
-    wxWINDOWPREV
-};
 
 //-----------------------------------------------------------------------------
 // wxGenericMDIParentFrame
Index: src/msw/mdi.cpp
===================================================================
--- src/msw/mdi.cpp	(revision 62011)
+++ src/msw/mdi.cpp	(working copy)
@@ -227,13 +227,14 @@
     if ( m_hMenu )
         ::DestroyMenu((HMENU)m_hMenu);
 
-    if ( m_clientWindow )
+    wxWindow *theClientWindow = m_clientWindow->GetWindow();
+    if ( theClientWindow )
     {
-        if ( m_clientWindow->MSWGetOldWndProc() )
-            m_clientWindow->UnsubclassWin();
+        if ( theClientWindow->MSWGetOldWndProc() )
+            theClientWindow->UnsubclassWin();
 
-        m_clientWindow->SetHWND(0);
-        delete m_clientWindow;
+        theClientWindow->SetHWND(0);
+        wxDELETE(m_clientWindow);
     }
 }
 
@@ -241,9 +242,9 @@
 // wxMDIParentFrame child management
 // ----------------------------------------------------------------------------
 
-wxMDIChildFrame *wxMDIParentFrame::GetActiveChild() const
+wxMDIChildFrameBase *wxMDIParentFrame::GetActiveChild() const
 {
-    HWND hWnd = (HWND)::SendMessage(GetWinHwnd(GetClientWindow()),
+    HWND hWnd = (HWND)::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()),
                                     WM_MDIGETACTIVE, 0, 0L);
     if ( !hWnd )
         return NULL;
@@ -317,13 +318,13 @@
 void wxMDIParentFrame::AddWindowMenu()
 {
     if ( m_windowMenu )
-        MDIInsertWindowMenu(GetClientWindow(), m_hMenu, GetMDIWindowMenu(this));
+        MDIInsertWindowMenu(GetClientWindow()->GetWindow(), m_hMenu, GetMDIWindowMenu(this));
 }
 
 void wxMDIParentFrame::RemoveWindowMenu()
 {
     if ( m_windowMenu )
-        MDIRemoveWindowMenu(GetClientWindow(), m_hMenu);
+        MDIRemoveWindowMenu(GetClientWindow()->GetWindow(), m_hMenu);
 }
 
 void wxMDIParentFrame::UpdateWindowMenu(bool enable)
@@ -347,7 +348,7 @@
     {
         // wait until we do to add the window menu but do set the main menu for
         // now (this is done by AddWindowMenu() as a side effect)
-        MDISetMenu(GetClientWindow(), (HMENU)m_hMenu, NULL);
+        MDISetMenu(GetClientWindow()->GetWindow(), (HMENU)m_hMenu, NULL);
     }
 }
 
@@ -383,7 +384,7 @@
 
 void wxMDIParentFrame::DoMenuUpdates(wxMenu* menu)
 {
-    wxMDIChildFrame *child = GetActiveChild();
+    wxMDIChildFrame *child = dynamic_cast<wxMDIChildFrame *>(GetActiveChild());
     if ( child )
     {
         wxEvtHandler* source = child->GetEventHandler();
@@ -425,7 +426,7 @@
 
 WXHMENU wxMDIParentFrame::MSWGetActiveMenu() const
 {
-    wxMDIChildFrame * const child  = GetActiveChild();
+    wxMDIChildFrame * const child  = dynamic_cast<wxMDIChildFrame *>(GetActiveChild());
     if ( child )
     {
         const WXHMENU hmenu = child->MSWGetActiveMenu();
@@ -449,7 +450,7 @@
         int width, height;
         GetClientSize(&width, &height);
 
-        GetClientWindow()->SetSize(0, 0, width, height);
+        GetClientWindow()->GetWindow()->SetSize(0, 0, width, height);
     }
 }
 
@@ -471,10 +472,11 @@
 // Responds to colour changes, and passes event on to children.
 void wxMDIParentFrame::OnSysColourChanged(wxSysColourChangedEvent& event)
 {
-    if ( m_clientWindow )
+    wxWindow *theClientWindow = m_clientWindow->GetWindow();
+    if ( theClientWindow )
     {
-        m_clientWindow->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
-        m_clientWindow->Refresh();
+        theClientWindow->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
+        theClientWindow->Refresh();
     }
 
     event.Skip();
@@ -492,7 +494,7 @@
 
 void wxMDIParentFrame::Cascade()
 {
-    ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDICASCADE, 0, 0);
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), WM_MDICASCADE, 0, 0);
 }
 
 void wxMDIParentFrame::Tile(wxOrientation orient)
@@ -500,24 +502,24 @@
     wxASSERT_MSG( orient == wxHORIZONTAL || orient == wxVERTICAL,
                   wxT("invalid orientation value") );
 
-    ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDITILE,
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), WM_MDITILE,
                   orient == wxHORIZONTAL ? MDITILE_HORIZONTAL
                                          : MDITILE_VERTICAL, 0);
 }
 
 void wxMDIParentFrame::ArrangeIcons()
 {
-    ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDIICONARRANGE, 0, 0);
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), WM_MDIICONARRANGE, 0, 0);
 }
 
 void wxMDIParentFrame::ActivateNext()
 {
-    ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDINEXT, 0, 0);
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), WM_MDINEXT, 0, 0);
 }
 
 void wxMDIParentFrame::ActivatePrevious()
 {
-    ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDINEXT, 0, 1);
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), WM_MDINEXT, 0, 1);
 }
 
 // ---------------------------------------------------------------------------
@@ -632,7 +634,7 @@
             int childId = wxGetWindowId(child->GetHWND());
             if ( childId == event.GetId() )
             {
-                ::SendMessage( GetWinHwnd(GetClientWindow()),
+                ::SendMessage( GetWinHwnd(GetClientWindow()->GetWindow()),
                         WM_MDIACTIVATE,
                         (WPARAM)child->GetHWND(), 0);
                 return;
@@ -687,7 +689,7 @@
             return;
     }
 
-    ::SendMessage(GetWinHwnd(GetClientWindow()), msg, wParam, lParam);
+    ::SendMessage(GetWinHwnd(GetClientWindow()->GetWindow()), msg, wParam, lParam);
 }
 
 #endif // wxUSE_MENUS
@@ -698,7 +700,7 @@
     // first, if any
     if ( event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED )
     {
-        wxMDIChildFrame * const child = GetActiveChild();
+        wxMDIChildFrame * const child = dynamic_cast<wxMDIChildFrame *>(GetActiveChild());
         if ( child && child->ProcessEventHere(event) )
             return true;
     }
@@ -712,7 +714,7 @@
 {
     WXHWND clientWnd;
     if ( GetClientWindow() )
-        clientWnd = GetClientWindow()->GetHWND();
+        clientWnd = GetClientWindow()->GetWindow()->GetHWND();
     else
         clientWnd = 0;
 
@@ -724,7 +726,7 @@
     MSG *pMsg = (MSG *)msg;
 
     // first let the current child get it
-    wxMDIChildFrame * const child = GetActiveChild();
+    wxMDIChildFrame * const child = dynamic_cast<wxMDIChildFrame *>(GetActiveChild());
     if ( child && child->MSWTranslateMessage(msg) )
     {
         return true;
@@ -748,7 +750,7 @@
     // finally, check for MDI specific built-in accelerators
     if ( pMsg->message == WM_KEYDOWN || pMsg->message == WM_SYSKEYDOWN )
     {
-        if ( ::TranslateMDISysAccel(GetWinHwnd(GetClientWindow()), pMsg))
+        if ( ::TranslateMDISysAccel(GetWinHwnd(GetClientWindow()->GetWindow()), pMsg))
             return true;
     }
 
@@ -844,7 +846,7 @@
 
   wxWindowCreationHook hook(this);
 
-  m_hWnd = (WXHWND)::SendMessage(GetWinHwnd(parent->GetClientWindow()),
+  m_hWnd = (WXHWND)::SendMessage(GetWinHwnd(parent->GetClientWindow()->GetWindow()),
                                  WM_MDICREATE, 0, (LPARAM)&mcs);
 
   if ( !m_hWnd )
@@ -866,7 +868,7 @@
     if ( !m_hWnd )
         return;
 
-    GetMDIParent()->RemoveMDIChild(this);
+    dynamic_cast<wxMDIParentFrame *>(GetMDIParent())->RemoveMDIChild(this);
 
     // will be destroyed by DestroyChildren() but reset them before calling it
     // to avoid using dangling pointers if a callback comes in the meanwhile
@@ -899,8 +901,8 @@
 
     // we need to refresh the MDI frame window menu to include (or exclude if
     // we've been hidden) this frame
-    wxMDIParentFrame * const parent = GetMDIParent();
-    MDISetMenu(parent->GetClientWindow(), NULL, NULL);
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
+    MDISetMenu(parent->GetClientWindow()->GetWindow(), NULL, NULL);
 
     return true;
 }
@@ -946,8 +948,8 @@
 
   // If there's an MDI parent, must subtract the parent's top left corner
   // since MoveWindow moves relative to the parent
-  wxMDIParentFrame * const mdiParent = GetMDIParent();
-  ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()), &point);
+  wxMDIParentFrame * const mdiParent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
+  ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()->GetWindow()), &point);
 
   MoveWindow(hWnd, point.x, point.y, actual_width, actual_height, (BOOL)true);
 
@@ -982,8 +984,8 @@
 
   // Since we now have the absolute screen coords,
   // if there's a parent we must subtract its top left corner
-  wxMDIParentFrame * const mdiParent = GetMDIParent();
-  ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()), &point);
+  wxMDIParentFrame * const mdiParent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
+  ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()->GetWindow()), &point);
 
   if (x)
       *x = point.x;
@@ -993,9 +995,9 @@
 
 void wxMDIChildFrame::InternalSetMenuBar()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
 
-    MDIInsertWindowMenu(parent->GetClientWindow(),
+    MDIInsertWindowMenu(parent->GetClientWindow()->GetWindow(),
                      m_hMenu, GetMDIWindowMenu(parent));
 }
 
@@ -1017,10 +1019,10 @@
 
 void wxMDIChildFrame::Maximize(bool maximize)
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
     if ( parent && parent->GetClientWindow() )
     {
-        ::SendMessage(GetWinHwnd(parent->GetClientWindow()),
+        ::SendMessage(GetWinHwnd(parent->GetClientWindow()->GetWindow()),
                       maximize ? WM_MDIMAXIMIZE : WM_MDIRESTORE,
                       (WPARAM)GetHwnd(), 0);
     }
@@ -1028,20 +1030,20 @@
 
 void wxMDIChildFrame::Restore()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
     if ( parent && parent->GetClientWindow() )
     {
-        ::SendMessage(GetWinHwnd(parent->GetClientWindow()), WM_MDIRESTORE,
+        ::SendMessage(GetWinHwnd(parent->GetClientWindow()->GetWindow()), WM_MDIRESTORE,
                       (WPARAM) GetHwnd(), 0);
     }
 }
 
 void wxMDIChildFrame::Activate()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
     if ( parent && parent->GetClientWindow() )
     {
-        ::SendMessage(GetWinHwnd(parent->GetClientWindow()), WM_MDIACTIVATE,
+        ::SendMessage(GetWinHwnd(parent->GetClientWindow()->GetWindow()), WM_MDIACTIVATE,
                       (WPARAM) GetHwnd(), 0);
     }
 }
@@ -1100,7 +1102,7 @@
                                         WXHWND hwndAct,
                                         WXHWND hwndDeact)
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
 
     WXHMENU hMenuToSet = 0;
 
@@ -1138,7 +1140,7 @@
 
     if ( hMenuToSet )
     {
-        MDISetMenu(parent->GetClientWindow(),
+        MDISetMenu(parent->GetClientWindow()->GetWindow(),
                    (HMENU)hMenuToSet, GetMDIWindowMenu(parent));
     }
 
@@ -1225,14 +1227,14 @@
 
 void wxMDIChildFrame::MSWDestroyWindow()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrame * const parent = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
 
     // Must make sure this handle is invalidated (set to NULL) since all sorts
     // of things could happen after the child client is destroyed, but before
     // the wxFrame is destroyed.
 
     HWND oldHandle = (HWND)GetHWND();
-    SendMessage(GetWinHwnd(parent->GetClientWindow()), WM_MDIDESTROY,
+    SendMessage(GetWinHwnd(parent->GetClientWindow()->GetWindow()), WM_MDIDESTROY,
                 (WPARAM)oldHandle, 0);
 
     if (parent->GetActiveChild() == NULL)
@@ -1252,12 +1254,12 @@
 bool wxMDIChildFrame::ResetWindowStyle(void *vrect)
 {
     RECT *rect = (RECT *)vrect;
-    wxMDIParentFrame * const pFrameWnd = GetMDIParent();
-    wxMDIChildFrame* pChild = pFrameWnd->GetActiveChild();
+    wxMDIParentFrame * const pFrameWnd = dynamic_cast<wxMDIParentFrame *>(GetMDIParent());
+    wxMDIChildFrame* pChild = dynamic_cast<wxMDIChildFrame *>(pFrameWnd->GetActiveChild());
 
     if (!pChild || (pChild == this))
     {
-        HWND hwndClient = GetWinHwnd(pFrameWnd->GetClientWindow());
+        HWND hwndClient = GetWinHwnd(pFrameWnd->GetClientWindow()->GetWindow());
         DWORD dwStyle = ::GetWindowLong(hwndClient, GWL_EXSTYLE);
 
         // we want to test whether there is a maximized child, so just set
@@ -1295,7 +1297,7 @@
 // contains the child frames
 // ===========================================================================
 
-bool wxMDIClientWindow::CreateClient(wxMDIParentFrame *parent, long style)
+bool wxMDIClientWindow::CreateClient(wxMDIParentFrameBase *parent, long style)
 {
     m_backgroundColour = wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE);
 
@@ -1303,7 +1305,7 @@
     m_windowStyle = style;
     m_parent = parent;
 
-    ccs.hWindowMenu = GetMDIWindowMenu(parent);
+    ccs.hWindowMenu = GetMDIWindowMenu(dynamic_cast<wxMDIParentFrame *>(parent));
     ccs.idFirstChild = wxFIRST_MDI_CHILD;
 
     DWORD msStyle = MDIS_ALLCHILDSTYLES | WS_VISIBLE | WS_CHILD |

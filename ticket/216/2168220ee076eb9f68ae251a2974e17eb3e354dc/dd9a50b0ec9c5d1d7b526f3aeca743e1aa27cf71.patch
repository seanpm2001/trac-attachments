Index: include/wx/aui/aui.h
===================================================================
--- include/wx/aui/aui.h	(revision 63814)
+++ include/wx/aui/aui.h	(working copy)
@@ -18,6 +18,8 @@
 #include "wx/aui/auibar.h"
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabmdi.h"
+#include "wx/aui/tabdocmdi.h"
 
 #endif // _WX_AUI_H_
 
+
Index: include/wx/aui/tabdocmdi.h
===================================================================
--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(revision 0)
@@ -0,0 +1,137 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     Frame classes for Aui MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AUITABDOCMDI_H_
+#define _WX_AUITABDOCMDI_H_
+
+#if wxUSE_AUI
+
+#include "wx/docmdi.h"
+#include "wx/aui/tabmdi.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+
+/*
+ * Use this instead of wxAuiMDIParentFrame
+ */
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame
+    : public wxAuiMDIParentFrame
+    , public wxDocMDIParentFrameAnyBase
+{
+public:
+    wxAuiDocMDIParentFrame()
+        : wxAuiMDIParentFrame()
+        , wxDocMDIParentFrameAnyBase(NULL, this)
+    {}
+
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxWindow *parent,
+                           wxWindowID winid,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE,
+                           const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocManager *manager,
+                wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the document manager's event table
+    virtual bool TryBefore(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const { return m_docManager; }
+
+    void OnNotebookPageChanged(wxAuiNotebookEvent &event);
+    void OnCloseWindow(wxCloseEvent& event);
+
+#if wxUSE_MENUS
+    void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIParentFrame)
+};
+
+// ----------------------------------------------------------------------------
+// An MDI document child frame: we need to define it as a class just for wxRTTI,
+// otherwise we could simply typedef it
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame
+    : public wxAuiMDIChildFrame
+    , public wxDocChildFrameAnyBase
+{
+public:
+    wxAuiDocMDIChildFrame()
+        : wxAuiMDIChildFrame()
+        , wxDocChildFrameAnyBase(NULL, NULL, this)
+    {}
+
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiDocMDIParentFrame *parent,
+                          wxWindowID id,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiDocMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the child view's event table
+    virtual bool TryBefore(wxEvent& event)
+    {
+        if (wxDocChildFrameAnyBase::TryBefore(event))
+            return true;
+
+        return wxAuiMDIChildFrame::TryBefore(event);
+    }
+
+    virtual bool Destroy()
+    {
+        return (wxDocChildFrameAnyBase::Destroy() &&
+                wxAuiMDIChildFrame::Destroy());
+    }
+
+protected:
+    virtual void OnActivate(wxActivateEvent& event) { event.Skip(false); }
+
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIChildFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIChildFrame);
+};
+
+
+#endif
+    // wxUSE_AUI
+
+#endif
+    // _WX_AUITABDOCMDI_H_
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 63814)
+++ samples/docview/docview.cpp	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998 Julian Smart
@@ -14,8 +15,10 @@
     This sample show document/view support in wxWidgets.
 
     It can be run in several ways:
+        * With "--aui_mdi" command line option to use multiple AUI MDI child
+          frames (wxAuiNotebook tabs) for the multiple documents (this is the default).
         * With "--mdi" command line option to use multiple MDI child frames
-          for the multiple documents (this is the default).
+          for the multiple documents.
         * With "--sdi" command line option to use multiple top level windows
           for the multiple documents
         * With "--single" command line option to support opening a single
@@ -49,6 +52,9 @@
 
 #include "wx/docview.h"
 #include "wx/docmdi.h"
+#if wxUSE_AUI
+#include "wx/aui/tabdocmdi.h"
+#endif
 
 #include "docview.h"
 #include "doc.h"
@@ -79,7 +85,11 @@
 MyApp::MyApp()
 {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    m_mode = Mode_AUI_MDI;
+#else
     m_mode = Mode_MDI;
+#endif
 #else
     m_mode = Mode_SDI;
 #endif
@@ -92,6 +102,7 @@
 namespace CmdLineOption
 {
 
+const char * const AUI_MDI = "aui_mdi";
 const char * const MDI = "mdi";
 const char * const SDI = "sdi";
 const char * const SINGLE = "single";
@@ -102,6 +113,8 @@
 {
     wxApp::OnInitCmdLine(parser);
 
+    parser.AddSwitch("", CmdLineOption::AUI_MDI,
+                     "run in AUI MDI mode: multiple documents, single window, with AUI framework");
     parser.AddSwitch("", CmdLineOption::MDI,
                      "run in MDI mode: multiple documents, single window");
     parser.AddSwitch("", CmdLineOption::SDI,
@@ -115,6 +128,13 @@
     int numModeOptions = 0;
 
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( parser.Found(CmdLineOption::AUI_MDI) )
+    {
+        m_mode = Mode_AUI_MDI;
+        numModeOptions++;
+    }
+#endif
     if ( parser.Found(CmdLineOption::MDI) )
     {
         m_mode = Mode_MDI;
@@ -187,6 +207,16 @@
     // create the main frame window
     wxFrame *frame;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( m_mode == Mode_AUI_MDI )
+    {
+        frame = new wxAuiDocMDIParentFrame(docManager, NULL, wxID_ANY,
+                                           GetAppDisplayName(),
+                                           wxDefaultPosition,
+                                           wxSize(500, 400));
+    }
+    else
+#endif //wxUSE_AUI
     if ( m_mode == Mode_MDI )
     {
         frame = new wxDocMDIParentFrame(docManager, NULL, wxID_ANY,
@@ -290,6 +320,22 @@
     // create a child frame of appropriate class for the current mode
     wxFrame *subframe;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( GetMode() == Mode_AUI_MDI )
+    {
+        subframe = new wxAuiDocMDIChildFrame
+                       (
+                            doc,
+                            view,
+                            wxStaticCast(GetTopWindow(), wxAuiDocMDIParentFrame),
+                            wxID_ANY,
+                            "Child Frame",
+                            wxDefaultPosition,
+                            wxSize(300, 300)
+                       );
+    }
+    else
+#endif //wxUSE_AUI
     if ( GetMode() == Mode_MDI )
     {
         subframe = new wxDocMDIChildFrame
@@ -357,6 +403,11 @@
     switch ( m_mode )
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        case Mode_AUI_MDI:
+            modeName = "AUI_MDI";
+            break;
+#endif
         case Mode_MDI:
             modeName = "MDI";
             break;
@@ -379,9 +430,9 @@
         "This is the wxWidgets Document/View Sample\n"
         "running in %s mode.\n"
         "\n"
-        "Authors: Julian Smart, Vadim Zeitlin\n"
+        "Authors: Julian Smart, Vadim Zeitlin, Kinaou Hervé\n"
         "\n"
-        "Usage: docview [--{mdi,sdi,single}]",
+        "Usage: docview [--{aui_mdi,mdi,sdi,single}]",
         modeName
     );
 }
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 63814)
+++ samples/docview/docview.h	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998 Julian Smart
@@ -27,6 +28,9 @@
     enum Mode
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        Mode_AUI_MDI,// AUI MDI mode: multiple documents, single top level window with AUI framework
+#endif
         Mode_MDI,   // MDI mode: multiple documents, single top level window
 #endif // wxUSE_MDI_ARCHITECTURE
         Mode_SDI,   // SDI mode: multiple documents, multiple top level windows
Index: src/aui/tabdocmdi.cpp
===================================================================
--- src/aui/tabdocmdi.cpp	(revision 0)
+++ src/aui/tabdocmdi.cpp	(revision 0)
@@ -0,0 +1,192 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.cpp
+// Purpose:     Frame classes for MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_AUI
+#if wxUSE_MDI
+
+#include "wx/aui/tabdocmdi.h"
+
+/*
+ * Docview Aui MDI parent frame
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame(wxDocManager *manager,
+                                               wxWindow *parent,
+                                               wxWindowID winid,
+                                               const wxString& title,
+                                               const wxPoint& pos,
+                                               const wxSize& size,
+                                               long style,
+                                               const wxString& name)
+    : wxAuiMDIParentFrame(parent, winid, title, pos, size, style, name)
+    , wxDocMDIParentFrameAnyBase(manager, this)
+{
+    GetNotebook()->Connect(GetNotebook()->GetId(), wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+        wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged), NULL, this);
+
+    GetWindow()->Unbind(wxEVT_CLOSE_WINDOW,
+        &wxDocMDIParentFrameAnyBase::OnCloseWindow, this, wxID_CLOSE);
+    Connect(wxID_CLOSE,
+        wxCloseEventHandler(wxAuiDocMDIParentFrame::OnCloseWindow), NULL, this);
+#if wxUSE_MENUS
+    Connect(wxID_ANY,
+        wxCommandEventHandler(wxAuiDocMDIParentFrame::DoHandleMenu), NULL, this);
+#endif
+}
+
+bool wxAuiDocMDIParentFrame::Create(wxDocManager *manager,
+                                    wxWindow *parent,
+                                    wxWindowID winid,
+                                    const wxString& title,
+                                    const wxPoint& pos,
+                                    const wxSize& size,
+                                    long style,
+                                    const wxString& name)
+{
+    if (m_clientWindow || //Do not create wxAuiMDIParentFrame twice
+        wxAuiMDIParentFrame::Create(parent, winid, title, pos, size, style, name))
+    {
+        SetDocumentManager(manager);
+        return true;
+    }
+    return false;
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIParentFrame::TryBefore(wxEvent& event)
+{
+#if wxUSE_MENUS
+    // Catch the events of kind wxID_CLOSE[_ALL] to send the appropriate tabmdi event
+    if (event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+    {
+        if (event.GetId() == wxID_CLOSE)
+            event.SetId(wxWINDOWCLOSE);
+        else if (event.GetId() == wxID_CLOSE_ALL)
+            event.SetId(wxWINDOWCLOSEALL);
+    }
+#endif //wxUSE_MENUS
+
+    if (wxDocMDIParentFrameAnyBase::TryBefore(event))
+        return true;
+
+    return wxAuiMDIParentFrame::TryBefore(event);
+}
+
+void wxAuiDocMDIParentFrame::OnNotebookPageChanged(wxAuiNotebookEvent &event)
+{
+    wxWindow *selWnd = GetNotebook()->GetPage(event.GetSelection());
+    if (selWnd && selWnd->IsKindOf(CLASSINFO(wxAuiDocMDIChildFrame)))
+    {
+        wxAuiDocMDIChildFrame *selFrm = dynamic_cast<wxAuiDocMDIChildFrame *>(selWnd);
+        if (selFrm && selFrm->GetView())
+            selFrm->GetView()->Activate(true);
+    }
+    event.Skip(true);
+}
+
+void wxAuiDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    wxCommandEvent eventCloseAll(wxEVT_COMMAND_MENU_SELECTED, wxWINDOWCLOSEALL);
+    eventCloseAll.Skip();
+    DoHandleMenu(eventCloseAll);
+
+    if (eventCloseAll.GetSkipped())
+    {
+        GetNotebook()->Disconnect(GetNotebook()->GetId(),
+                                  wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+                                  wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged),
+                                  NULL,
+                                  this);
+        Disconnect(wxID_CLOSE, wxCloseEventHandler(wxAuiDocMDIParentFrame::OnCloseWindow));
+        GetWindow()->Bind(wxEVT_CLOSE_WINDOW,
+            &wxDocMDIParentFrameAnyBase::OnCloseWindow, this, wxID_CLOSE);
+#if wxUSE_MENUS
+        Disconnect(wxID_ANY, wxCommandEventHandler(wxAuiDocMDIParentFrame::DoHandleMenu));
+#endif
+        wxAuiMDIParentFrame::OnCloseWindow(event);
+    }
+}
+
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+{
+    switch (event.GetId())
+    {
+    case wxWINDOWCLOSEALL:
+        while (m_currentChild)
+        {
+            if (!m_currentChild->Close())
+            {
+                event.Skip(false);
+                return; // failure
+            }
+        }
+        break;
+    default:
+        wxAuiMDIParentFrame::DoHandleMenu(event);
+    }
+}
+#endif // wxUSE_MENUS
+
+
+/*
+ * Default document child frame for Aui MDI children
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+
+wxAuiDocMDIChildFrame::wxAuiDocMDIChildFrame(wxDocument *doc,
+                                             wxView *view,
+                                             wxAuiDocMDIParentFrame *parent,
+                                             wxWindowID id,
+                                             const wxString& title,
+                                             const wxPoint& pos,
+                                             const wxSize& size,
+                                             long style,
+                                             const wxString& name)
+    : wxAuiMDIChildFrame(parent, id, title, pos, size, style, name)
+    , wxDocChildFrameAnyBase(doc, view, this)
+{}
+
+bool wxAuiDocMDIChildFrame::Create(wxDocument *doc,
+                                   wxView *view,
+                                   wxAuiDocMDIParentFrame *parent,
+                                   wxWindowID id,
+                                   const wxString& title,
+                                   const wxPoint& pos,
+                                   const wxSize& size,
+                                   long style,
+                                   const wxString& name)
+{
+    if (wxAuiMDIChildFrame::Create(parent, id, title, pos, size, style, name))
+    {
+        SetDocument(doc);
+        SetView(view);
+        return true;
+    }
+    return false;
+}
+
+#endif
+    //wxUSE_AUI
+#endif
+    // wxUSE_MDI
+

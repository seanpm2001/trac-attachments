Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 74767)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3689,6 +3689,7 @@
     src/aui/auibook.cpp
     src/aui/auibar.cpp
     src/aui/tabmdi.cpp
+    src/aui/tabdocmdi.cpp
     src/aui/tabart.cpp
     src/xrc/xh_auinotbk.cpp
     $(AUI_GTK_SRC)
@@ -3700,6 +3701,7 @@
     wx/aui/auibook.h
     wx/aui/auibar.h
     wx/aui/tabmdi.h
+    wx/aui/tabdocmdi.h
     wx/aui/aui.h
     wx/aui/tabart.h
     wx/xrc/xh_auinotbk.h
Index: include/wx/aui/aui.h
===================================================================
--- include/wx/aui/aui.h	(revision 74767)
+++ include/wx/aui/aui.h	(working copy)
@@ -17,6 +17,7 @@
 #include "wx/aui/auibar.h"
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabmdi.h"
+#include "wx/aui/tabdocmdi.h"
 
 #endif // _WX_AUI_H_
 
Index: include/wx/aui/tabdocmdi.h
===================================================================
--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(working copy)
@@ -0,0 +1,119 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     Frame classes for Aui MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AUITABDOCMDI_H_
+#define _WX_AUITABDOCMDI_H_
+
+#if wxUSE_AUI
+
+#include "wx/docmdi.h"
+#include "wx/aui/tabmdi.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+
+// ----------------------------------------------------------------------------
+// An MDI document parent frame for AUI framework
+// ----------------------------------------------------------------------------
+
+typedef wxDocParentFrameAny<wxAuiMDIParentFrame> wxAuiDocMDIParentFrameBase;
+template class WXDLLIMPEXP_AUI wxDocParentFrameAny<wxAuiMDIParentFrame>;
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame : public wxAuiDocMDIParentFrameBase
+{
+public:
+    wxAuiDocMDIParentFrame() : wxAuiDocMDIParentFrameBase() { }
+
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxFrame *parent,
+                           wxWindowID id,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE,
+                           const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocManager *manager,
+                wxFrame *frame,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the document manager's event table
+    virtual bool TryBefore(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const { return m_docManager; }
+
+protected:
+    void OnCloseWindow(wxCloseEvent& event);
+
+#if wxUSE_MENUS
+    virtual void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIParentFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIParentFrame);
+    DECLARE_EVENT_TABLE()
+};
+
+
+// ----------------------------------------------------------------------------
+// An MDI document child frame for AUI framework
+// ----------------------------------------------------------------------------
+
+typedef wxDocChildFrameAny<wxAuiMDIChildFrame, wxAuiMDIParentFrame> wxAuiDocMDIChildFrameBase;
+template class WXDLLIMPEXP_AUI wxDocChildFrameAny<wxAuiMDIChildFrame, wxAuiMDIParentFrame>;
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame : public wxAuiDocMDIChildFrameBase
+{
+public:
+    wxAuiDocMDIChildFrame() { }
+
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiMDIParentFrame *parent,
+                          wxWindowID id,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+protected:
+    virtual void DoActivate(wxActivateEvent& evt) { evt.Skip(false); }
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIChildFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIChildFrame);
+};
+
+
+#endif
+    // wxUSE_AUI
+
+#endif
+    // _WX_AUITABDOCMDI_H_
Index: include/wx/aui/tabmdi.h
===================================================================
--- include/wx/aui/tabmdi.h	(revision 74767)
+++ include/wx/aui/tabmdi.h	(working copy)
@@ -17,7 +17,7 @@
 // headers
 // ----------------------------------------------------------------------------
 
-#include "wx/frame.h"
+#include "wx/mdi.h"
 #include "wx/panel.h"
 #include "wx/notebook.h"
 #include "wx/icon.h"
@@ -27,15 +27,41 @@
 // classes
 //-----------------------------------------------------------------------------
 
+enum MDI_MENU_ID
+{
+    wxWINDOWCLOSE = 4001,
+    wxWINDOWCLOSEALL,
+    wxWINDOWNEXT,
+    wxWINDOWPREV
+};
+
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIParentFrame;
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIClientWindow;
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIChildFrame;
 
+// ----------------------------------------------------------------------------
+// wxMDIAuiTraits: define the kind of windows the MDI base classes use
+// ----------------------------------------------------------------------------
+
+struct wxMDIAuiTraits
+{
+    typedef wxFrame                 ParentWindow;
+    typedef wxFrame                 ChildWindow;
+    typedef wxAuiNotebook           ClientWindow;
+
+    typedef wxAuiMDIParentFrame     MDIParent;
+    typedef wxAuiMDIChildFrame      MDIChild;
+    typedef wxAuiMDIClientWindow    MDIClient;
+};
+
 //-----------------------------------------------------------------------------
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxFrame
+typedef wxMDIAnyParentWindow<wxMDIAuiTraits> wxAuiMDIParentFrameBase;
+template class WXDLLIMPEXP_AUI wxMDIAnyParentWindow<wxMDIAuiTraits>;
+
+class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxAuiMDIParentFrameBase
 {
 public:
     wxAuiMDIParentFrame();
@@ -62,7 +88,6 @@
     wxAuiNotebook* GetNotebook() const;
 
 #if wxUSE_MENUS
-    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
     void SetWindowMenu(wxMenu* pMenu);
 
     virtual void SetMenuBar(wxMenuBar *pMenuBar);
@@ -70,10 +95,6 @@
 
     void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
 
-    wxAuiMDIChildFrame *GetActiveChild() const;
-    void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
-
-    wxAuiMDIClientWindow *GetClientWindow() const;
     virtual wxAuiMDIClientWindow *OnCreateClient();
 
     virtual void Cascade() { /* Has no effect */ }
@@ -83,22 +104,20 @@
     virtual void ActivatePrevious();
 
 protected:
-    wxAuiMDIClientWindow*   m_pClientWindow;
-    wxEvent*                m_pLastEvt;
+    wxEvent    *m_pLastEvt;
 
 #if wxUSE_MENUS
-    wxMenu              *m_pWindowMenu;
-    wxMenuBar           *m_pMyMenuBar;
+    wxMenuBar  *m_pMyMenuBar;
 #endif // wxUSE_MENUS
 
 protected:
-    void Init();
 
 #if wxUSE_MENUS
     void RemoveWindowMenu(wxMenuBar *pMenuBar);
     void AddWindowMenu(wxMenuBar *pMenuBar);
 
-    void DoHandleMenu(wxCommandEvent &event);
+    void OnHandleMenu(wxCommandEvent &event) { DoHandleMenu(event); }
+    virtual void DoHandleMenu(wxCommandEvent &event);
     void DoHandleUpdateUI(wxUpdateUIEvent &event);
 #endif // wxUSE_MENUS
 
@@ -115,7 +134,10 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxPanel
+typedef wxMDIAnyChildWindow<wxMDIAuiTraits>  wxAuiMDIChildFrameBase;
+template class WXDLLIMPEXP_AUI wxMDIAnyChildWindow<wxMDIAuiTraits>;
+
+class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxAuiMDIChildFrameBase
 {
 public:
     wxAuiMDIChildFrame();
@@ -189,15 +211,11 @@
 
     virtual bool IsTopLevel() const { return false; }
 
+protected:
     void OnMenuHighlight(wxMenuEvent& evt);
     void OnActivate(wxActivateEvent& evt);
-    void OnCloseWindow(wxCloseEvent& evt);
 
-    void SetMDIParentFrame(wxAuiMDIParentFrame* parent);
-    wxAuiMDIParentFrame* GetMDIParentFrame() const;
-
-protected:
-    void Init();
+    virtual void DoActivate(wxActivateEvent& WXUNUSED(evt)) {}
     virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
     virtual void DoMoveWindow(int x, int y, int width, int height);
 
@@ -205,6 +223,11 @@
     virtual void DoSetSizeHints(int WXUNUSED(minW), int WXUNUSED(minH),
                                 int WXUNUSED(maxW), int WXUNUSED(maxH),
                                 int WXUNUSED(incW), int WXUNUSED(incH)) {}
+private:
+    // set to false by the Destroy method to avoid DoActivate to be called when
+    // children class is destroyed (and the pointer to the virtual method is NULL)
+    bool m_doActivate;
+
 public:
     // This function needs to be called when a size change is confirmed,
     // we needed this function to prevent anybody from the outside
@@ -213,7 +236,6 @@
     void DoShow(bool show);
 
 protected:
-    wxAuiMDIParentFrame* m_pMDIParentFrame;
     wxRect m_mdiNewRect;
     wxRect m_mdiCurRect;
     wxString m_title;
@@ -238,10 +260,13 @@
 // wxAuiMDIClientWindow
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIClientWindow : public wxAuiNotebook
+typedef wxMDIAnyClientWindow<wxMDIAuiTraits> wxAuiMDIClientWindowBase;
+template class WXDLLIMPEXP_AUI wxMDIAnyClientWindow<wxMDIAuiTraits>;
+
+class WXDLLIMPEXP_AUI wxAuiMDIClientWindow : public wxAuiMDIClientWindowBase
 {
 public:
-    wxAuiMDIClientWindow();
+    wxAuiMDIClientWindow() {}
     wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
 
     virtual bool CreateClient(wxAuiMDIParentFrame *parent,
Index: interface/wx/aui/tabdocmdi.h
===================================================================
--- interface/wx/aui/tabdocmdi.h	(revision 0)
+++ interface/wx/aui/tabdocmdi.h	(working copy)
@@ -0,0 +1,125 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        aui/tabdocmdi.h
+// Purpose:     interface of wxAuiDocMDIParentFrame, wxAuiDocMDIChildFrame
+// Author:      wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxAuiDocMDIParentFrame
+
+    wxAuiDocMDIParentFrame inherits from wxAuiDocMDIParentFrameBase which is a typedef of
+    wxDocParentFrameAny<wxAuiMDIParentFrame>.
+
+    The wxAuiDocMDIParentFrame class is part of the wxAUI class framework.
+    It provides a default top-level frame for applications using the document/view
+    framework. This class can only be used for wxAUI MDI parent frames.
+
+    It cooperates with the the wxView, wxDocument, wxDocManager and wxDocTemplate
+    classes.
+
+    @library{wxaui}
+    @category{docview}
+
+    @see @ref wxauioverview @ref overview_docview, @ref page_samples_auidocview, wxAuiMDIParentFrame
+*/
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame : public wxAuiDocMDIParentFrameBase
+{
+public:
+    //@{
+    /**
+        Constructor.
+    */
+    wxAuiDocMDIParentFrame();
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxFrame *parent,
+                           wxWindowID id,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE,
+                           const wxString& name = wxFrameNameStr);
+    //@}
+
+    /**
+        Creates the window.
+    */
+    bool Create(wxDocManager *manager,
+                wxFrame *frame,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    /**
+        Extend event processing to search the document manager's event table.
+    */
+    virtual bool TryBefore(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const;
+
+protected:
+    void OnCloseWindow(wxCloseEvent& event);
+    /// Defined if wxUSE_MENUS is set to 1.
+    virtual void DoHandleMenu(wxCommandEvent &event);
+};
+
+
+/**
+    @class wxAuiDocMDIChildFrame
+
+    wxAuiDocMDIChildFrame inherits from wxAuiDocMDIChildFrameBase which is a typedef of
+    wxDocChildFrameAny<wxAuiMDIChildFrame, wxAuiMDIParentFrame>.
+
+    The wxAuiDocMDIChildFrame class is part of the wxAUI class framework.
+    It provides a default frame for displaying documents on separate windows.
+    This class can only be used for wxAUI MDI child frames.
+
+    The class is part of the document/view framework supported by wxWidgets,
+    and cooperates with the the wxView, wxDocument, wxDocManager and wxDocTemplate
+    classes.
+
+    @library{wxaui}
+    @category{docview}
+
+    @see @ref wxauioverview @ref overview_docview, @ref page_samples_auidocview, wxAuiMDIChildFrame
+*/
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame : public wxAuiDocMDIChildFrameBase
+{
+public:
+    //@{
+    /**
+        Constructor.
+    */
+    wxAuiDocMDIChildFrame();
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiMDIParentFrame *parent,
+                          wxWindowID id,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+    //@}
+
+    /**
+        Creates the window.
+    */
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+protected:
+    virtual void DoActivate(wxActivateEvent& evt) { evt.Skip(false); }
+};
Index: interface/wx/aui/tabmdi.h
===================================================================
--- interface/wx/aui/tabmdi.h	(revision 0)
+++ interface/wx/aui/tabmdi.h	(working copy)
@@ -0,0 +1,486 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/aui/tabmdi.h
+// Purpose:     interface of wxAuiMDIParentFrame, wxAuiMDIChildFrame, wxAuiMDIClientWindow
+// Author:      wxWidgets team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @struct wxMDIAuiTraits
+
+    Define the kind of windows the wxAui MDI base classes use.
+    
+    @library{wxaui}
+    @category{managedwnd}
+
+    @see wxMDIAnyChildWindow
+*/
+struct wxMDIAuiTraits
+{
+    typedef wxFrame                 ParentWindow;
+    typedef wxFrame                 ChildWindow;
+    typedef wxAuiNotebook           ClientWindow;
+
+    typedef wxAuiMDIParentFrame     MDIParent;
+    typedef wxAuiMDIChildFrame      MDIChild;
+    typedef wxAuiMDIClientWindow    MDIClient;
+};
+
+/**
+    @class wxAuiMDIParentFrame
+
+    wxAuiMDIParentFrame inherits from wxAuiMDIParentFrameBase which is a typedef of
+    wxMDIAnyParentWindow<wxMDIAuiTraits>.
+
+    A wxAUI MDI (Multiple Document Interface) parent frame is a window which can
+    contain wxAUI MDI child frames in its client area which is a wxAuiNotebook.
+    
+    It is the wxAUI equivalent to wxMDIParentFrame and uses the wxMDIAnyParentWindow
+    Traits class.
+    
+    @library{wxaui}
+    @category{managedwnd}
+
+    @see wxAuiMDIChildFrame, wxAuiMDIClientWindow, wxMDIAnyParentWindow
+*/
+
+class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxAuiMDIParentFrameBase
+{
+public:
+    /**
+        Default constructor.
+
+        Use Create() for the objects created using this constructor.
+    */
+    wxAuiMDIParentFrame();
+    /**
+        Constructor, creating the window.
+
+        @param parent
+            The window parent. Usually is @NULL.
+        @param winid
+            The window identifier. It may take a value of @c wxID_ANY to
+            indicate a default value.
+        @param title
+            The caption to be displayed on the frame's title bar.
+        @param pos
+            The window position. The value ::wxDefaultPosition indicates a
+            default position, chosen by either the windowing system or
+            wxWidgets, depending on platform.
+        @param size
+            The window size. The value ::wxDefaultSize indicates a default
+            size, chosen by either the windowing system or wxWidgets, depending
+            on platform.
+        @param style
+            The window style. Default value includes wxDEFAULT_FRAME_STYLE,
+            wxHSCROLL and wxVSCROLL styles.
+        @param name
+            The name of the window. This parameter is used to associate a name
+            with the item, allowing the application user to set Motif resource
+            values for individual windows.
+
+        @see Create()
+    */
+    wxAuiMDIParentFrame(wxWindow *parent,
+                        wxWindowID winid,
+                        const wxString& title,
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxDefaultSize,
+                        long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                        const wxString& name = wxFrameNameStr);
+
+    /**
+        Destructor.
+
+        Destroys all child windows and menu bar if present.
+    */
+    ~wxAuiMDIParentFrame();
+
+    /**
+        Used in two-step frame construction.
+
+        See wxAuiMDIParentFrame() for further details.
+    */
+    bool Create(wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                const wxString& name = wxFrameNameStr );
+
+    /**
+        Sets the tab art provider which defines all the drawing functions
+        used by the wxAuiMDIClientWindow instance (overload of wxAuiNotebook).
+    */
+    void SetArtProvider(wxAuiTabArt* provider);
+    wxAuiTabArt* GetArtProvider();
+    /**
+        Gets the wxAuiMDIClientWindow casted in wxAuiNotebook.
+    */
+    wxAuiNotebook* GetNotebook() const;
+
+    /**
+        Replace the current MDI Window menu (the previously defined Window
+        menu is destroyed).
+        
+        See wxMDIParentFrame::SetWindowMenu() for more details
+
+        @param menu
+            The menu to be used instead of the standard MDI Window menu or @NULL.
+    */
+    void SetWindowMenu(wxMenu* pMenu);
+
+    /**
+        Relatively equivalent to SetWindowMenu() but do not destroy the previously
+        defined MDI Window menu.
+    */
+    virtual void SetMenuBar(wxMenuBar *pMenuBar);
+
+    /**
+        Replace the current MDI Window menu by the menu of the given wxAuiMDIChildFrame
+        but do not destroy the previouly defined MDI Window menu (uses SetMenuBar()).
+        If a NULL parameter is given, the previous MDI Window menu is restored.
+    */
+    void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
+
+    /**
+        Called by the method Create() to construct the wxAuiMDIClientWindow
+        (overloads wxAuiNotebook by default).
+        It can be overloaded to modify the default behavior.
+        @see GetNotebook()
+    */
+    virtual wxAuiMDIClientWindow *OnCreateClient();
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Cascade();
+    /**
+        Tiles the MDI child windows either horizontally or vertically depending
+        on whether @a orient is @c wxHORIZONTAL or @c wxVERTICAL.
+    */
+    virtual void Tile(wxOrientation orient = wxHORIZONTAL);
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void ArrangeIcons();
+    /**
+        Activates the wxAuiNotebook tab wich contains the MDI child following
+        the currently active tab.
+
+        @see ActivatePrevious()
+    */
+    virtual void ActivateNext();
+    /**
+        Activates the wxAuiNotebook tab wich contains the MDI child preceding
+        the currently active tab.
+
+        @see ActivateNext()
+    */
+    virtual void ActivatePrevious();
+
+protected:
+    wxEvent    *m_pLastEvt;
+    /// Defined if wxUSE_MENUS is set to 1.
+    wxMenuBar  *m_pMyMenuBar;
+
+    /// Defined if wxUSE_MENUS is set to 1.
+    void RemoveWindowMenu(wxMenuBar *pMenuBar);
+    /// Defined if wxUSE_MENUS is set to 1.
+    void AddWindowMenu(wxMenuBar *pMenuBar);
+    /// Defined if wxUSE_MENUS is set to 1.
+    void OnHandleMenu(wxCommandEvent &event);
+    /// Defined if wxUSE_MENUS is set to 1.
+    virtual void DoHandleMenu(wxCommandEvent &event);
+    /// Defined if wxUSE_MENUS is set to 1.
+    void DoHandleUpdateUI(wxUpdateUIEvent &event);
+
+    virtual bool ProcessEvent(wxEvent& event);
+    virtual void DoGetClientSize(int *width, int *height) const;
+};
+
+/**
+    @class wxAuiMDIChildFrame
+
+    wxAuiMDIChildFrame inherits from wxAuiMDIChildFrameBase which is a typedef of
+    wxMDIAnyChildWindow<wxMDIAuiTraits>.
+
+    A wxAUI MDI child frame is a frame that can only exist inside a
+    wxAuiMDIClientWindow, which is itself a child of wxAuiMDIParentFrame.
+    
+    It is the wxAUI equivalent to wxMDIChildFrame and uses the wxMDIAnyChildWindow
+    Traits class.
+
+    @library{wxaui}
+    @category{managedwnd}
+
+    @see wxAuiMDIParentFrame, wxAuiMDIClientWindow, wxMDIAnyChildWindow
+*/
+
+class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxAuiMDIChildFrameBase
+{
+public:
+    /**
+        Default constructor.
+    */
+    wxAuiMDIChildFrame();
+    /**
+        Constructor, creating the window.
+
+        @param parent
+            The wxAuiMDIParentFrame parent. This should not be @NULL.
+        @param winid
+            The window identifier. It may take a value of -1 to indicate a default
+            value.
+        @param title
+            The caption to be displayed on the tab's title bar.
+        @param pos
+            The window position. The value ::wxDefaultPosition indicates a default position,
+            chosen by either the windowing system or wxWidgets, depending on platform.
+        @param size
+            The window size. The value ::wxDefaultSize indicates a default size, chosen by
+            either the windowing system or wxWidgets, depending on platform.
+        @param style
+            The window style. See wxMDIChildFrame.
+        @param name
+            The name of the window. This parameter is used to associate a name with the
+            item, allowing the application user to set Motif resource values for individual
+            windows.
+
+        @see Create()
+    */
+    wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent,
+                       wxWindowID winid,
+                       const wxString& title,
+                       const wxPoint& pos = wxDefaultPosition,
+                       const wxSize& size = wxDefaultSize,
+                       long style = wxDEFAULT_FRAME_STYLE,
+                       const wxString& name = wxFrameNameStr);
+
+    /**
+        Destructor. Destroys all child windows and menu bar if present.
+    */
+    virtual ~wxAuiMDIChildFrame();
+    /**
+        Used in two-step frame construction.
+        See wxAuiMDIChildFrame() for further details.
+    */
+    bool Create(wxAuiMDIParentFrame *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    virtual void SetMenuBar(wxMenuBar *menuBar);
+    virtual wxMenuBar *GetMenuBar() const;
+
+    virtual void SetTitle(const wxString& title);
+    virtual wxString GetTitle() const;
+
+    virtual void SetIcons(const wxIconBundle& icons);
+    virtual const wxIconBundle& GetIcons() const;
+
+    virtual void SetIcon(const wxIcon& icon);
+    virtual const wxIcon& GetIcon() const;
+
+    virtual void Activate();
+    virtual bool Destroy();
+
+    virtual bool Show(bool show = true);
+
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxStatusBar* CreateStatusBar(int WXUNUSED(number) = 1,
+                                         long WXUNUSED(style) = 1,
+                                         wxWindowID WXUNUSED(winid) = 1,
+                                         const wxString& WXUNUSED(name) = wxEmptyString);
+
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxStatusBar *GetStatusBar() const;
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void SetStatusText( const wxString &WXUNUSED(text), int WXUNUSED(number)=0 );
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void SetStatusWidths( int WXUNUSED(n), const int WXUNUSED(widths_field)[] );
+
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxToolBar* CreateToolBar(long WXUNUSED(style),
+                                     wxWindowID WXUNUSED(winid),
+                                     const wxString& WXUNUSED(name))
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxToolBar *GetToolBar() const;
+
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Maximize(bool WXUNUSED(maximize) = true);
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Restore();
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Iconize(bool WXUNUSED(iconize)  = true);
+    /**
+        Has no effect if not overloaded.
+        @return always @c true.
+    */
+    virtual bool IsMaximized() const;
+    /**
+        Has no effect if not overloaded.
+        @return always @c false.
+    */
+    virtual bool IsIconized() const;
+    /**
+        Has no effect if not overloaded.
+        @return always @c false.
+    */
+    virtual bool ShowFullScreen(bool WXUNUSED(show), long WXUNUSED(style));
+    /**
+        Has no effect if not overloaded.
+        @return always @c false.
+    */
+    virtual bool IsFullScreen() const;
+    /**
+        Has no effect if not overloaded.
+        @return always @c false.
+    */
+    virtual bool IsTopLevel() const;
+
+protected:
+    void OnMenuHighlight(wxMenuEvent& evt);
+    void OnActivate(wxActivateEvent& evt);
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void DoActivate(wxActivateEvent& WXUNUSED(evt));
+    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
+    virtual void DoMoveWindow(int x, int y, int width, int height);
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void DoSetSizeHints(int WXUNUSED(minW), int WXUNUSED(minH),
+                                int WXUNUSED(maxW), int WXUNUSED(maxH),
+                                int WXUNUSED(incW), int WXUNUSED(incH));
+private:
+    /**
+        Set to false by the Destroy method to avoid DoActivate to be called when
+        children class is destroyed (and the pointer to the virtual method is NULL)
+    */
+    bool m_doActivate;
+
+public:
+    /**
+        This function needs to be called when a size change is confirmed.
+        It prevents anybody from outside to change the panel.
+    */
+    void ApplyMDIChildFrameRect();
+    void DoShow(bool show);
+
+protected:
+    wxRect m_mdiNewRect;
+    wxRect m_mdiCurRect;
+    wxString m_title;
+    wxIcon m_icon;
+    wxIconBundle m_iconBundle;
+    bool m_activateOnCreate;
+
+    /// Defined if wxUSE_MENUS is set to 1.
+    wxMenuBar* m_pMenuBar;
+
+private:
+    friend class wxAuiMDIClientWindow;
+};
+
+/**
+    @class wxAuiMDIClientWindow
+
+    wxAuiMDIClientWindow inherits from wxAuiMDIClientWindowBase which is a typedef of
+    wxMDIAnyClientWindow<wxMDIAuiTraits>.
+
+    A wxAUI MDI client window is a child of wxAuiMDIParentFrame, and manages zero or
+    more wxAuiMDIChildFrame objects. It is the MDI overload of a wxAuiNotebook.
+    
+    It is the wxAUI equivalent to wxMDIClientWindow and uses the wxMDIAnyChildWindow
+    Traits class.
+    
+    @library{wxaui}
+    @category{managedwnd}
+
+    @see wxAuiMDIParentFrame, wxAuiMDIChildFrame, wxMDIAnyClientWindow
+*/
+
+class WXDLLIMPEXP_AUI wxAuiMDIClientWindow : public wxAuiMDIClientWindowBase
+{
+public:
+    /**
+        Default constructor.
+
+        Objects of this class are only created by wxAuiMDIParentFrame which uses
+        the default constructor and calls CreateClient() immediately
+        afterwards.
+     */
+    wxAuiMDIClientWindow();
+    /**
+        Constructor, creating the window.
+
+        @param parent
+            The wxAuiMDIParentFrame parent.
+        @param style
+            The window style. Only wxHSCROLL and wxVSCROLL bits are meaningful
+            here.
+
+    */
+    wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
+
+    /**
+        Called by wxAuiMDIParentFrame immediately after creating the client
+        window.
+
+        This function may be overridden in the derived class but the base class
+        version must usually be called first to really create the window.
+
+        See wxAuiMDIClientWindow() for further details.
+    */
+    virtual bool CreateClient(wxAuiMDIParentFrame *parent,
+                              long style = wxVSCROLL | wxHSCROLL);
+
+    /**
+        Select the expected wxAuiNotebook tab and activates the 
+        corresponding wxAuiMDIChildFrame.
+    */
+    virtual int SetSelection(size_t page);
+    /**
+        Get the current active child.
+    */
+    virtual wxAuiMDIChildFrame* GetActiveChild();
+    /**
+        Change the active child by the given one and select the
+        corresponding wxAuiNotebook tab.
+    */
+    virtual void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
+
+protected:
+
+    void PageChanged(int oldSelection, int newSelection);
+    void OnPageClose(wxAuiNotebookEvent& evt);
+    void OnPageChanged(wxAuiNotebookEvent& evt);
+    void OnSize(wxSizeEvent& evt);
+};
Index: samples/docview/docview.bkl
===================================================================
--- samples/docview/docview.bkl	(revision 74767)
+++ samples/docview/docview.bkl	(working copy)
@@ -12,6 +12,7 @@
         <headers>docview.h doc.h view.h</headers>
         <wx-lib>core</wx-lib>
         <wx-lib>base</wx-lib>
+        <wx-lib>aui</wx-lib>
         <win32-res>docview.rc</win32-res>
     </exe>
 
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 74767)
+++ samples/docview/docview.cpp	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // Copyright:   (c) 1998 Julian Smart
 //              (c) 2008 Vadim Zeitlin
@@ -13,8 +14,10 @@
     This sample show document/view support in wxWidgets.
 
     It can be run in several ways:
+        * With "--aui_mdi" command line option to use multiple AUI MDI child
+          frames (wxAuiNotebook tabs) for the multiple documents (this is the default).
         * With "--mdi" command line option to use multiple MDI child frames
-          for the multiple documents (this is the default).
+          for the multiple documents.
         * With "--sdi" command line option to use multiple top level windows
           for the multiple documents
         * With "--single" command line option to support opening a single
@@ -48,6 +51,9 @@
 
 #include "wx/docview.h"
 #include "wx/docmdi.h"
+#if wxUSE_AUI
+#include "wx/aui/tabdocmdi.h"
+#endif
 
 #include "docview.h"
 #include "doc.h"
@@ -79,7 +85,11 @@
 MyApp::MyApp()
 {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    m_mode = Mode_AUI_MDI;
+#else
     m_mode = Mode_MDI;
+#endif
 #else
     m_mode = Mode_SDI;
 #endif
@@ -92,6 +102,7 @@
 namespace CmdLineOption
 {
 
+const char * const AUI_MDI = "aui_mdi";
 const char * const MDI = "mdi";
 const char * const SDI = "sdi";
 const char * const SINGLE = "single";
@@ -102,6 +113,8 @@
 {
     wxApp::OnInitCmdLine(parser);
 
+    parser.AddSwitch("", CmdLineOption::AUI_MDI,
+                     "run in AUI MDI mode: multiple documents, single window, with AUI framework");
     parser.AddSwitch("", CmdLineOption::MDI,
                      "run in MDI mode: multiple documents, single window");
     parser.AddSwitch("", CmdLineOption::SDI,
@@ -115,6 +128,13 @@
     int numModeOptions = 0;
 
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( parser.Found(CmdLineOption::AUI_MDI) )
+    {
+        m_mode = Mode_AUI_MDI;
+        numModeOptions++;
+    }
+#endif
     if ( parser.Found(CmdLineOption::MDI) )
     {
         m_mode = Mode_MDI;
@@ -190,6 +210,16 @@
     // create the main frame window
     wxFrame *frame;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( m_mode == Mode_AUI_MDI )
+    {
+        frame = new wxAuiDocMDIParentFrame(docManager, NULL, wxID_ANY,
+                                           GetAppDisplayName(),
+                                           wxDefaultPosition,
+                                           wxSize(500, 400));
+    }
+    else
+#endif //wxUSE_AUI
     if ( m_mode == Mode_MDI )
     {
         frame = new wxDocMDIParentFrame(docManager, NULL, wxID_ANY,
@@ -301,6 +331,22 @@
     wxFrame *subframe;
     wxDocument *doc = view->GetDocument();
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( GetMode() == Mode_AUI_MDI )
+    {
+        subframe = new wxAuiDocMDIChildFrame
+                       (
+                            doc,
+                            view,
+                            wxStaticCast(GetTopWindow(), wxAuiDocMDIParentFrame),
+                            wxID_ANY,
+                            "Child Frame",
+                            wxDefaultPosition,
+                            wxSize(300, 300)
+                       );
+    }
+    else
+#endif //wxUSE_AUI
     if ( GetMode() == Mode_MDI )
     {
         subframe = new wxDocMDIChildFrame
@@ -368,6 +414,11 @@
     switch ( m_mode )
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        case Mode_AUI_MDI:
+            modeName = "AUI_MDI";
+            break;
+#endif
         case Mode_MDI:
             modeName = "MDI";
             break;
@@ -399,9 +450,9 @@
         "running in %s mode.\n"
         "%d open documents.\n"
         "\n"
-        "Authors: Julian Smart, Vadim Zeitlin\n"
+        "Authors: Julian Smart, Vadim Zeitlin, Kinaou Hervé\n"
         "\n"
-        "Usage: docview [--{mdi,sdi,single}]",
+        "Usage: docview [--{aui_mdi,mdi,sdi,single}]",
         modeName,
         docsCount
     );
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 74767)
+++ samples/docview/docview.h	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // Copyright:   (c) 1998 Julian Smart
 //              (c) 2008 Vadim Zeitlin
@@ -26,6 +27,9 @@
     enum Mode
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        Mode_AUI_MDI,// AUI MDI mode: multiple documents, single top level window with AUI framework
+#endif
         Mode_MDI,   // MDI mode: multiple documents, single top level window
 #endif // wxUSE_MDI_ARCHITECTURE
         Mode_SDI,   // SDI mode: multiple documents, multiple top level windows
Index: samples/docview/view.cpp
===================================================================
--- samples/docview/view.cpp	(revision 74767)
+++ samples/docview/view.cpp	(working copy)
@@ -52,7 +52,7 @@
         wxFrame* frame = app.CreateChildFrame(this, true);
         wxASSERT(frame == GetFrame());
         m_canvas = new MyCanvas(this);
-        frame->Show();
+        m_canvas->SetSize(frame->GetClientSize());
     }
     else // single document mode
     {
@@ -162,7 +162,7 @@
     m_text = new wxTextCtrl(frame, wxID_ANY, "",
                             wxDefaultPosition, wxDefaultSize,
                             wxTE_MULTILINE);
-    frame->Show();
+    m_text->SetSize(frame->GetClientSize());
 
     return true;
 }
@@ -315,7 +315,7 @@
     wxFrame* frame = wxGetApp().CreateChildFrame(this, false);
     wxASSERT(frame == GetFrame());
     m_canvas = new ImageCanvas(this);
-    frame->Show();
+    m_canvas->SetSize(frame->GetClientSize());
 
     return true;
 }
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 74767)
+++ src/aui/framemanager.cpp	(working copy)
@@ -914,7 +914,7 @@
 
     if (wxDynamicCast(m_frame, wxMDIParentFrame))
     {
-        wxMDIParentFrame* mdi_frame = (wxMDIParentFrame*)m_frame;
+        wxMDIParentFrame* mdi_frame = wxDynamicCast(m_frame, wxMDIParentFrame);
         wxWindow* client_window = mdi_frame->GetClientWindow();
 
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
@@ -925,8 +925,9 @@
     }
     else if (wxDynamicCast(m_frame, wxAuiMDIParentFrame))
     {
-        wxAuiMDIParentFrame* mdi_frame = (wxAuiMDIParentFrame*)m_frame;
-        wxAuiMDIClientWindow* client_window = mdi_frame->GetClientWindow();
+        wxAuiMDIParentFrame* mdi_frame = wxDynamicCast(m_frame, wxAuiMDIParentFrame);
+        wxWindow* client_window = mdi_frame->GetClientWindow();
+
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
 
         AddPane(client_window,
Index: src/aui/tabdocmdi.cpp
===================================================================
--- src/aui/tabdocmdi.cpp	(revision 0)
+++ src/aui/tabdocmdi.cpp	(working copy)
@@ -0,0 +1,146 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.cpp
+// Purpose:     Frame classes for MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_AUI
+#if wxUSE_MDI
+
+#include "wx/aui/tabdocmdi.h"
+
+/*
+ * Docview Aui MDI parent frame
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+
+BEGIN_EVENT_TABLE(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+    EVT_CLOSE(wxAuiDocMDIParentFrame::OnCloseWindow)
+END_EVENT_TABLE()
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame(wxDocManager *manager,
+                                               wxFrame *parent,
+                                               wxWindowID id,
+                                               const wxString& title,
+                                               const wxPoint& pos,
+                                               const wxSize& size,
+                                               long style,
+                                               const wxString& name)
+{
+    Create(manager, parent, id, title, pos, size, style, name);
+}
+
+bool wxAuiDocMDIParentFrame::Create(wxDocManager *manager,
+                                    wxFrame *frame,
+                                    wxWindowID id,
+                                    const wxString& title,
+                                    const wxPoint& pos,
+                                    const wxSize& size,
+                                    long style,
+                                    const wxString& name)
+{
+    return wxAuiDocMDIParentFrameBase::Create(manager, frame, id, title, pos, size, style, name);
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIParentFrame::TryBefore(wxEvent& event)
+{
+#if wxUSE_MENUS
+    // Catch the events of kind wxID_CLOSE[_ALL] to send the appropriate tabmdi event
+    if (event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+    {
+        if (event.GetId() == wxID_CLOSE)
+            event.SetId(wxWINDOWCLOSE);
+        else if (event.GetId() == wxID_CLOSE_ALL)
+            event.SetId(wxWINDOWCLOSEALL);
+    }
+#endif //wxUSE_MENUS
+
+    return wxAuiDocMDIParentFrameBase::TryBefore(event);
+}
+
+void wxAuiDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    wxCommandEvent eventCloseAll(wxEVT_COMMAND_MENU_SELECTED, wxWINDOWCLOSEALL);
+    eventCloseAll.Skip();
+    DoHandleMenu(eventCloseAll);
+
+    if (eventCloseAll.GetSkipped())
+    {
+        wxAuiMDIParentFrame::OnCloseWindow(event);
+    }
+}
+
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+{
+    switch (event.GetId())
+    {
+    case wxWINDOWCLOSEALL:
+        while (GetActiveChild())
+        {
+            if (!GetActiveChild()->Close())
+            {
+                event.Skip(false);
+                return; // failure
+            }
+        }
+        break;
+    default:
+        wxAuiMDIParentFrame::DoHandleMenu(event);
+    }
+}
+#endif // wxUSE_MENUS
+
+
+/*
+ * Default document child frame for Aui MDI children
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+
+wxAuiDocMDIChildFrame::wxAuiDocMDIChildFrame(wxDocument *doc,
+                                             wxView *view,
+                                             wxAuiMDIParentFrame *parent,
+                                             wxWindowID id,
+                                             const wxString& title,
+                                             const wxPoint& pos,
+                                             const wxSize& size,
+                                             long style,
+                                             const wxString& name)
+{
+    Create(doc, view, parent, id, title, pos, size, style, name);
+}
+
+bool wxAuiDocMDIChildFrame::Create(wxDocument *doc,
+                                   wxView *view,
+                                   wxAuiMDIParentFrame *parent,
+                                   wxWindowID id,
+                                   const wxString& title,
+                                   const wxPoint& pos,
+                                   const wxSize& size,
+                                   long style,
+                                   const wxString& name)
+{
+    return wxAuiDocMDIChildFrameBase::Create(doc, view, parent, id, title, pos, size, style, name);
+}
+
+#endif
+    //wxUSE_AUI
+#endif
+    // wxUSE_MDI
+
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 74767)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -39,31 +39,25 @@
 #include "wx/stockitem.h"
 #include "wx/aui/dockart.h"
 
-enum MDI_MENU_ID
-{
-    wxWINDOWCLOSE = 4001,
-    wxWINDOWCLOSEALL,
-    wxWINDOWNEXT,
-    wxWINDOWPREV
-};
-
 //-----------------------------------------------------------------------------
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxFrame)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxAuiMDIParentFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxFrame)
+BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxAuiMDIParentFrameBase)
 #if wxUSE_MENUS
-    EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::DoHandleMenu)
+    EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::OnHandleMenu)
     EVT_UPDATE_UI (wxID_ANY, wxAuiMDIParentFrame::DoHandleUpdateUI)
 #endif
 END_EVENT_TABLE()
 
 wxAuiMDIParentFrame::wxAuiMDIParentFrame()
-{
-    Init();
-}
+    : m_pLastEvt(NULL)
+#if wxUSE_MENUS
+    , m_pMyMenuBar(NULL)
+#endif // wxUSE_MENUS
+{}
 
 wxAuiMDIParentFrame::wxAuiMDIParentFrame(wxWindow *parent,
                                          wxWindowID id,
@@ -72,8 +66,11 @@
                                          const wxSize& size,
                                          long style,
                                          const wxString& name)
+    : m_pLastEvt(NULL)
+#if wxUSE_MENUS
+    , m_pMyMenuBar(NULL)
+#endif // wxUSE_MENUS
 {
-    Init();
     (void)Create(parent, id, title, pos, size, style, name);
 }
 
@@ -81,13 +78,10 @@
 {
     // Avoid having GetActiveChild() called after m_pClientWindow is destroyed
     SendDestroyEvent();
-    // Make sure the client window is destructed before the menu bars are!
-    wxDELETE(m_pClientWindow);
 
 #if wxUSE_MENUS
     wxDELETE(m_pMyMenuBar);
     RemoveWindowMenu(GetMenuBar());
-    wxDELETE(m_pWindowMenu);
 #endif // wxUSE_MENUS
 }
 
@@ -104,46 +98,37 @@
     // "Window" menu
     if (!(style & wxFRAME_NO_WINDOW_MENU))
     {
-        m_pWindowMenu = new wxMenu;
-        m_pWindowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
-        m_pWindowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
-        m_pWindowMenu->AppendSeparator();
-        m_pWindowMenu->Append(wxWINDOWNEXT,     _("&Next"));
-        m_pWindowMenu->Append(wxWINDOWPREV,     _("&Previous"));
+        m_windowMenu = new wxMenu;
+        m_windowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
+        m_windowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
+        m_windowMenu->AppendSeparator();
+        m_windowMenu->Append(wxWINDOWNEXT,     _("&Next"));
+        m_windowMenu->Append(wxWINDOWPREV,     _("&Previous"));
     }
 #endif // wxUSE_MENUS
 
-    if ( !wxFrame::Create(parent, id, title, pos, size, style, name) )
+    if ( !wxAuiMDIParentFrameBase::Create(parent, id, title, pos, size, style, name) )
         return false;
 
-    m_pClientWindow = OnCreateClient();
-    return m_pClientWindow != NULL;
+    m_clientWindow = OnCreateClient();
+    return m_clientWindow != NULL;
 }
 
 
 void wxAuiMDIParentFrame::SetArtProvider(wxAuiTabArt* provider)
 {
-    if (m_pClientWindow)
-    {
-        m_pClientWindow->SetArtProvider(provider);
-    }
+    if (m_clientWindow)
+        m_clientWindow->SetArtProvider(provider);
 }
 
 wxAuiTabArt* wxAuiMDIParentFrame::GetArtProvider()
 {
-    if (!m_pClientWindow)
+    if (!m_clientWindow)
         return NULL;
 
-    return m_pClientWindow->GetArtProvider();
+    return m_clientWindow->GetArtProvider();
 }
 
-wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
-{
-    return static_cast<wxAuiNotebook*>(m_pClientWindow);
-}
-
-
-
 #if wxUSE_MENUS
 void wxAuiMDIParentFrame::SetWindowMenu(wxMenu* pMenu)
 {
@@ -150,15 +135,15 @@
     // Replace the window menu from the currently loaded menu bar.
     wxMenuBar *pMenuBar = GetMenuBar();
 
-    if (m_pWindowMenu)
+    if (m_windowMenu)
     {
         RemoveWindowMenu(pMenuBar);
-        wxDELETE(m_pWindowMenu);
+        wxDELETE(m_windowMenu);
     }
 
     if (pMenu)
     {
-        m_pWindowMenu = pMenu;
+        m_windowMenu = pMenu;
         AddWindowMenu(pMenuBar);
     }
 }
@@ -171,7 +156,7 @@
     // Add the Window menu to the new menu bar.
     AddWindowMenu(pMenuBar);
 
-    wxFrame::SetMenuBar(pMenuBar);
+    wxAuiMDIParentFrameBase::SetMenuBar(pMenuBar);
     //m_pMyMenuBar = GetMenuBar();
 }
 #endif // wxUSE_MENUS
@@ -204,6 +189,19 @@
 #endif // wxUSE_MENUS
 }
 
+wxAuiMDIClientWindow *wxAuiMDIParentFrame::OnCreateClient()
+{
+    if (!m_clientWindow)
+        m_clientWindow = new wxAuiMDIClientWindow( this );
+    return m_clientWindow;
+}
+
+wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
+{
+    return m_clientWindow;
+}
+
+
 bool wxAuiMDIParentFrame::ProcessEvent(wxEvent& event)
 {
     // stops the same event being processed repeatedly
@@ -211,29 +209,32 @@
         return false;
     m_pLastEvt = &event;
 
-    // let the active child (if any) process the event first.
     bool res = false;
-    wxAuiMDIChildFrame* pActiveChild = GetActiveChild();
-    if (pActiveChild &&
-        event.IsCommandEvent() &&
-        event.GetEventObject() != m_pClientWindow &&
-           !(event.GetEventType() == wxEVT_ACTIVATE ||
-             event.GetEventType() == wxEVT_SET_FOCUS ||
-             event.GetEventType() == wxEVT_KILL_FOCUS ||
-             event.GetEventType() == wxEVT_CHILD_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
-       )
+    //Do not treat the events which cause the arbitrary selection of the first
+    //notebook tab when the parent frame is restored from minimized state
+    if (!(event.GetEventType() == wxEVT_ACTIVATE ||
+          event.GetEventType() == wxEVT_SET_FOCUS ||
+          event.GetEventType() == wxEVT_KILL_FOCUS ||
+          event.GetEventType() == wxEVT_CHILD_FOCUS ||
+          event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
+          event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS) )
     {
-        res = pActiveChild->GetEventHandler()->ProcessEvent(event);
-    }
+        // let the active child (if any) process the event first.
+        wxAuiMDIChildFrame* pActiveChild = GetActiveChild();
+        if (pActiveChild &&
+            event.IsCommandEvent() &&
+            (event.GetEventObject() != m_clientWindow) )
+        {
+            res = pActiveChild->GetEventHandler()->ProcessEvent(event);
+        }
 
-    if (!res)
-    {
-        // if the event was not handled this frame will handle it,
-        // which is why we need the protection code at the beginning
-        // of this method
-        res = wxEvtHandler::ProcessEvent(event);
+        if (!res)
+        {
+            // if the event was not handled this frame will handle it,
+            // which is why we need the protection code at the beginning
+            // of this method
+            res = wxEvtHandler::ProcessEvent(event);
+        }
     }
 
     m_pLastEvt = NULL;
@@ -241,71 +242,34 @@
     return res;
 }
 
-wxAuiMDIChildFrame *wxAuiMDIParentFrame::GetActiveChild() const
-{
-    // We can be called before the client window is created, so check for its
-    // existence.
-    wxAuiMDIClientWindow* const client = GetClientWindow();
-    return client ? client->GetActiveChild() : NULL;
-}
-
-void wxAuiMDIParentFrame::SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
-{
-    wxAuiMDIClientWindow* const client = GetClientWindow();
-    if (client && client->GetActiveChild() != pChildFrame)
-    {
-        client->SetActiveChild(pChildFrame);
-    }
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::GetClientWindow() const
-{
-    return m_pClientWindow;
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::OnCreateClient()
-{
-    return new wxAuiMDIClientWindow( this );
-}
-
 void wxAuiMDIParentFrame::ActivateNext()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if (GetClientWindow() && GetClientWindow()->GetSelection() != wxNOT_FOUND)
     {
-        size_t active = m_pClientWindow->GetSelection() + 1;
-        if (active >= m_pClientWindow->GetPageCount())
+        size_t active = GetClientWindow()->GetSelection() + 1;
+        if (active >= GetClientWindow()->GetPageCount())
             active = 0;
 
-        m_pClientWindow->SetSelection(active);
+        GetClientWindow()->SetSelection(active);
     }
 }
 
 void wxAuiMDIParentFrame::ActivatePrevious()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if (GetClientWindow() && GetClientWindow()->GetSelection() != wxNOT_FOUND)
     {
-        int active = m_pClientWindow->GetSelection() - 1;
+        int active = GetClientWindow()->GetSelection() - 1;
         if (active < 0)
-            active = m_pClientWindow->GetPageCount() - 1;
+            active = GetClientWindow()->GetPageCount() - 1;
 
-        m_pClientWindow->SetSelection(active);
+        GetClientWindow()->SetSelection(active);
     }
 }
 
-void wxAuiMDIParentFrame::Init()
-{
-    m_pLastEvt = NULL;
-    m_pClientWindow = NULL;
 #if wxUSE_MENUS
-    m_pWindowMenu = NULL;
-    m_pMyMenuBar = NULL;
-#endif // wxUSE_MENUS
-}
-
-#if wxUSE_MENUS
 void wxAuiMDIParentFrame::RemoveWindowMenu(wxMenuBar* pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         // Remove old window menu
         int pos = pMenuBar->FindMenu(_("&Window"));
@@ -312,7 +276,7 @@
         if (pos != wxNOT_FOUND)
         {
             // DBG:: We're going to delete the wrong menu!!!
-            wxASSERT(m_pWindowMenu == pMenuBar->GetMenu(pos));
+            wxASSERT(m_windowMenu == pMenuBar->GetMenu(pos));
             pMenuBar->Remove(pos);
         }
     }
@@ -320,13 +284,13 @@
 
 void wxAuiMDIParentFrame::AddWindowMenu(wxMenuBar *pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,wxSTOCK_NOFLAGS));
         if (pos == wxNOT_FOUND)
-            pMenuBar->Append(m_pWindowMenu, _("&Window"));
+            pMenuBar->Append(m_windowMenu, _("&Window"));
         else
-            pMenuBar->Insert(pos, m_pWindowMenu, _("&Window"));
+            pMenuBar->Insert(pos, m_windowMenu, _("&Window"));
     }
 }
 
@@ -336,17 +300,15 @@
     {
         case wxWINDOWCLOSE:
         {
-            wxAuiMDIChildFrame* pActiveChild = GetActiveChild();
-            if (pActiveChild)
-                pActiveChild->Close();
+            if (GetActiveChild())
+                GetActiveChild()->Close();
             break;
         }
         case wxWINDOWCLOSEALL:
         {
-            wxAuiMDIChildFrame* pActiveChild;
-            while ((pActiveChild = GetActiveChild()) != NULL)
+            while (GetActiveChild() != NULL)
             {
-                if (!pActiveChild->Close())
+                if (!GetActiveChild()->Close())
                 {
                     return; // failure
                 }
@@ -401,20 +363,19 @@
 
 void wxAuiMDIParentFrame::Tile(wxOrientation orient)
 {
-    wxAuiMDIClientWindow* client_window = GetClientWindow();
-    wxASSERT_MSG(client_window, wxT("Missing MDI Client Window"));
+    wxASSERT_MSG(GetClientWindow(), wxT("Missing MDI Client Window"));
 
-    int cur_idx = client_window->GetSelection();
+    int cur_idx = GetClientWindow()->GetSelection();
     if (cur_idx == -1)
         return;
 
     if (orient == wxVERTICAL)
     {
-        client_window->Split(cur_idx, wxLEFT);
+        GetClientWindow()->Split(cur_idx, wxLEFT);
     }
     else if (orient == wxHORIZONTAL)
     {
-        client_window->Split(cur_idx, wxTOP);
+        GetClientWindow()->Split(cur_idx, wxTOP);
     }
 }
 
@@ -423,18 +384,19 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxPanel)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxAuiMDIChildFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxPanel)
+BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxAuiMDIChildFrameBase)
     EVT_MENU_HIGHLIGHT_ALL(wxAuiMDIChildFrame::OnMenuHighlight)
-    EVT_ACTIVATE(wxAuiMDIChildFrame::OnActivate)
-    EVT_CLOSE(wxAuiMDIChildFrame::OnCloseWindow)
 END_EVENT_TABLE()
 
 wxAuiMDIChildFrame::wxAuiMDIChildFrame()
-{
-    Init();
-}
+    : m_doActivate(true)
+    , m_activateOnCreate(true)
+#if wxUSE_MENUS
+    , m_pMenuBar(NULL)
+#endif // wxUSE_MENUS
+{}
 
 wxAuiMDIChildFrame::wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent,
                                        wxWindowID id,
@@ -443,15 +405,19 @@
                                        const wxSize& size,
                                        long style,
                                        const wxString& name)
+    : m_doActivate(true)
+    , m_activateOnCreate(true)
+#if wxUSE_MENUS
+    , m_pMenuBar(NULL)
+#endif // wxUSE_MENUS
 {
-    Init();
 
-    // There are two ways to create an tabbed mdi child fram without
+    // There are two ways to create an tabbed MDI child frame without
     // making it the active document.  Either Show(false) can be called
     // before Create() (as is customary on some ports with wxFrame-type
     // windows), or wxMINIMIZE can be passed in the style flags.  Note that
     // wxAuiMDIChildFrame is not really derived from wxFrame, as wxMDIChildFrame
-    // is, but those are the expected symantics.  No style flag is passed
+    // is, but those are the expected semantics.  No style flag is passed
     // onto the panel underneath.
     if (style & wxMINIMIZE)
         m_activateOnCreate = false;
@@ -461,15 +427,14 @@
 
 wxAuiMDIChildFrame::~wxAuiMDIChildFrame()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    if (pParentFrame)
+    if (m_mdiParent)
     {
-        if (pParentFrame->GetActiveChild() == this)
+        if (m_mdiParent->GetActiveChild() == this)
         {
-            pParentFrame->SetActiveChild(NULL);
-            pParentFrame->SetChildMenuBar(NULL);
+            m_doActivate = false;
+            m_mdiParent->SetChildMenuBar(NULL);
         }
-        wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+        wxAuiMDIClientWindow* pClientWindow = m_mdiParent->GetClientWindow();
         wxASSERT(pClientWindow);
         int idx = pClientWindow->GetPageIndex(this);
         if (idx != wxNOT_FOUND)
@@ -498,18 +463,27 @@
     if (style & wxMINIMIZE)
         m_activateOnCreate = false;
 
-    wxSize cli_size = pClientWindow->GetClientSize();
+    wxSize cli_size;
+    if (pClientWindow)
+        cli_size = pClientWindow->GetClientSize();
 
     // create the window off-screen to prevent flicker
-    wxPanel::Create(pClientWindow,
-                    id,
-                    wxPoint(cli_size.x+1, cli_size.y+1),
-                    size,
-                    wxNO_BORDER, name);
+#ifdef __WXGTK__
+    wxWindow::Create(parent,
+                     id,
+#else
+    wxAuiMDIChildFrameBase::Create(parent,
+                                   id,
+                                   title,
+#endif
+                                   wxPoint(cli_size.x+1, cli_size.y+1),
+                                   size,
+                                   wxNO_BORDER,
+                                   name);
 
     DoShow(false);
 
-    SetMDIParentFrame(parent);
+    m_mdiParent = parent;
 
     m_title = title;
 
@@ -533,20 +507,20 @@
 
 bool wxAuiMDIChildFrame::Destroy()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(m_mdiParent, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow = m_mdiParent->GetClientWindow();
     wxASSERT_MSG(pClientWindow, wxT("Missing MDI Client Window"));
 
-    if (pParentFrame->GetActiveChild() == this)
+    if (m_mdiParent->GetActiveChild() == this)
     {
         // deactivate ourself
         wxActivateEvent event(wxEVT_ACTIVATE, false, GetId());
         event.SetEventObject(this);
         GetEventHandler()->ProcessEvent(event);
+        m_doActivate = false;
 
-        pParentFrame->SetChildMenuBar(NULL);
+        m_mdiParent->SetChildMenuBar(NULL);
     }
 
     size_t page_count = pClientWindow->GetPageCount();
@@ -567,16 +541,15 @@
 
     if (m_pMenuBar)
     {
-        wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-        wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+        wxASSERT_MSG(m_mdiParent, wxT("Missing MDI Parent Frame"));
 
-        m_pMenuBar->SetParent(pParentFrame);
-        if (pParentFrame->GetActiveChild() == this)
+        m_pMenuBar->SetParent(m_mdiParent);
+        if (m_mdiParent->GetActiveChild() == this)
         {
             // replace current menu bars
             if (pOldMenuBar)
-                pParentFrame->SetChildMenuBar(NULL);
-            pParentFrame->SetChildMenuBar(this);
+                m_mdiParent->SetChildMenuBar(NULL);
+            m_mdiParent->SetChildMenuBar(this);
         }
     }
 }
@@ -591,10 +564,9 @@
 {
     m_title = title;
 
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(m_mdiParent, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow = m_mdiParent->GetClientWindow();
     if (pClientWindow != NULL)
     {
         size_t pos;
@@ -656,10 +628,9 @@
 
 void wxAuiMDIChildFrame::Activate()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(m_mdiParent, wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow* pClientWindow = m_mdiParent->GetClientWindow();
 
     if (pClientWindow != NULL)
     {
@@ -678,11 +649,11 @@
 void wxAuiMDIChildFrame::OnMenuHighlight(wxMenuEvent& event)
 {
 #if wxUSE_STATUSBAR
-    if (m_pMDIParentFrame)
+    if (m_mdiParent)
     {
         // we don't have any help text for this item,
         // but may be the MDI frame does?
-        m_pMDIParentFrame->OnMenuHighlight(event);
+        m_mdiParent->OnMenuHighlight(event);
     }
 #else
     wxUnusedVar(event);
@@ -689,35 +660,12 @@
 #endif // wxUSE_STATUSBAR
 }
 
-void wxAuiMDIChildFrame::OnActivate(wxActivateEvent& WXUNUSED(event))
+void wxAuiMDIChildFrame::OnActivate(wxActivateEvent& evt)
 {
-    // do nothing
+    if (m_doActivate)
+        DoActivate(evt);
 }
 
-void wxAuiMDIChildFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
-{
-    Destroy();
-}
-
-void wxAuiMDIChildFrame::SetMDIParentFrame(wxAuiMDIParentFrame* parentFrame)
-{
-    m_pMDIParentFrame = parentFrame;
-}
-
-wxAuiMDIParentFrame* wxAuiMDIChildFrame::GetMDIParentFrame() const
-{
-    return m_pMDIParentFrame;
-}
-
-void wxAuiMDIChildFrame::Init()
-{
-    m_activateOnCreate = true;
-    m_pMDIParentFrame = NULL;
-#if wxUSE_MENUS
-    m_pMenuBar = NULL;
-#endif // wxUSE_MENUS
-}
-
 bool wxAuiMDIChildFrame::Show(bool show)
 {
     // wxAuiMDIChildFrame uses m_activateOnCreate only to decide whether to
@@ -743,7 +691,7 @@
 {
     m_mdiNewRect = wxRect(x, y, width, height);
 #ifdef __WXGTK__
-    wxPanel::DoSetSize(x,y,width, height, sizeFlags);
+    wxAuiMDIChildFrameBase::DoSetSize(x,y,width, height, sizeFlags);
 #else
     wxUnusedVar(sizeFlags);
 #endif
@@ -758,8 +706,12 @@
 {
     if (m_mdiCurRect != m_mdiNewRect)
     {
-        wxPanel::DoMoveWindow(m_mdiNewRect.x, m_mdiNewRect.y,
-                              m_mdiNewRect.width, m_mdiNewRect.height);
+#ifdef __WXGTK__
+        wxWindow::DoMoveWindow(m_mdiNewRect.x, m_mdiNewRect.y,
+#else
+        wxAuiMDIChildFrameBase::DoMoveWindow(m_mdiNewRect.x, m_mdiNewRect.y,
+#endif
+                                             m_mdiNewRect.width, m_mdiNewRect.height);
         m_mdiCurRect = m_mdiNewRect;
     }
 }
@@ -777,10 +729,6 @@
     EVT_SIZE(wxAuiMDIClientWindow::OnSize)
 END_EVENT_TABLE()
 
-wxAuiMDIClientWindow::wxAuiMDIClientWindow()
-{
-}
-
 wxAuiMDIClientWindow::wxAuiMDIClientWindow(wxAuiMDIParentFrame* parent, long style)
 {
     CreateClient(parent, style);
@@ -863,10 +811,10 @@
         event.SetEventObject(active_child);
         active_child->GetEventHandler()->ProcessEvent(event);
 
-        if (active_child->GetMDIParentFrame())
+        if (active_child->m_mdiParent)
         {
-            active_child->GetMDIParentFrame()->SetActiveChild(active_child);
-            active_child->GetMDIParentFrame()->SetChildMenuBar(active_child);
+            active_child->m_mdiParent->SetActiveChild(active_child);
+            active_child->m_mdiParent->SetChildMenuBar(active_child);
         }
     }
 

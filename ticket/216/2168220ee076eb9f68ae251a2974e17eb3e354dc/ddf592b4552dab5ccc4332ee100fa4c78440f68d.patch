Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 74767)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3689,6 +3689,7 @@
     src/aui/auibook.cpp
     src/aui/auibar.cpp
     src/aui/tabmdi.cpp
+    src/aui/tabdocmdi.cpp
     src/aui/tabart.cpp
     src/xrc/xh_auinotbk.cpp
     $(AUI_GTK_SRC)
@@ -3700,6 +3701,7 @@
     wx/aui/auibook.h
     wx/aui/auibar.h
     wx/aui/tabmdi.h
+    wx/aui/tabdocmdi.h
     wx/aui/aui.h
     wx/aui/tabart.h
     wx/xrc/xh_auinotbk.h
Index: include/wx/docview.h
===================================================================
--- include/wx/docview.h	(revision 74767)
+++ include/wx/docview.h	(working copy)
@@ -738,7 +738,7 @@
     {
         BaseClass::OnActivate(event);
 
-        if ( m_childView )
+        if ( m_childView && event.GetSkipped() )
             m_childView->Activate(event.GetActive());
     }
 
Index: include/wx/gtk1/mdi.h
===================================================================
--- include/wx/gtk1/mdi.h	(revision 74767)
+++ include/wx/gtk1/mdi.h	(working copy)
@@ -47,10 +47,6 @@
                 long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
                 const wxString& name = wxFrameNameStr);
 
-    // we don't store the active child in m_currentChild unlike the base class
-    // version so override this method to find it dynamically
-    virtual wxMDIChildFrame *GetActiveChild() const;
-
     // implement base class pure virtuals
     // ----------------------------------
 
@@ -140,6 +136,9 @@
     virtual bool CreateClient(wxMDIParentFrame *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
+    virtual wxMDIChildFrame *GetActiveChild();
+    virtual void SetActiveChild(wxMDIChildFrame* pChildFrame);
+
 private:
     DECLARE_DYNAMIC_CLASS(wxMDIClientWindow)
 };
Index: include/wx/gtk/mdi.h
===================================================================
--- include/wx/gtk/mdi.h	(revision 74767)
+++ include/wx/gtk/mdi.h	(working copy)
@@ -47,10 +47,6 @@
                 long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
                 const wxString& name = wxFrameNameStr);
 
-    // we don't store the active child in m_currentChild unlike the base class
-    // version so override this method to find it dynamically
-    virtual wxMDIChildFrame *GetActiveChild() const;
-
     // implement base class pure virtuals
     // ----------------------------------
 
@@ -144,6 +140,9 @@
     virtual bool CreateClient(wxMDIParentFrame *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
+    virtual wxMDIChildFrame *GetActiveChild();
+    virtual void SetActiveChild(wxMDIChildFrame* pChildFrame);
+
 private:
     virtual void AddChildGTK(wxWindowGTK* child);
 
Index: include/wx/mdi.h
===================================================================
--- include/wx/mdi.h	(revision 74767)
+++ include/wx/mdi.h	(working copy)
@@ -21,20 +21,40 @@
 // forward declarations
 class WXDLLIMPEXP_FWD_CORE wxMDIParentFrame;
 class WXDLLIMPEXP_FWD_CORE wxMDIChildFrame;
-class WXDLLIMPEXP_FWD_CORE wxMDIClientWindowBase;
 class WXDLLIMPEXP_FWD_CORE wxMDIClientWindow;
 
 // ----------------------------------------------------------------------------
-// wxMDIParentFrameBase: base class for parent frame for MDI children
+// wxMDIDefaultTraits: define the kind of windows the MDI base classes use
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIParentFrameBase : public wxFrame
+struct wxMDIDefaultTraits
 {
+    typedef wxFrame             ParentWindow;
+    typedef wxFrame             ChildWindow;
+    typedef wxWindow            ClientWindow;
+
+    typedef wxMDIParentFrame    MDIParent;
+    typedef wxMDIChildFrame     MDIChild;
+    typedef wxMDIClientWindow   MDIClient;
+};
+
+// ----------------------------------------------------------------------------
+// wxMDIAnyParentWindow: base class for parent frame for MDI children
+// ----------------------------------------------------------------------------
+
+template <class Traits> class WXDLLIMPEXP_CORE wxMDIAnyParentWindow;
+typedef wxMDIAnyParentWindow<wxMDIDefaultTraits> wxMDIParentFrameBase;
+
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyParentWindow : public Traits::ParentWindow
+{
+    typedef typename Traits::MDIChild  MDI_Child;
+    typedef typename Traits::MDIClient MDI_Client;
+
 public:
-    wxMDIParentFrameBase()
+    wxMDIAnyParentWindow()
     {
         m_clientWindow = NULL;
-        m_currentChild = NULL;
 #if wxUSE_MENUS
         m_windowMenu = NULL;
 #endif // wxUSE_MENUS
@@ -54,7 +74,7 @@
      */
 
 #if wxUSE_MENUS
-    virtual ~wxMDIParentFrameBase()
+    virtual ~wxMDIAnyParentWindow()
     {
         delete m_windowMenu;
     }
@@ -64,14 +84,20 @@
     // ---------
 
     // Get or change the active MDI child window
-    virtual wxMDIChildFrame *GetActiveChild() const
-        { return m_currentChild; }
-    virtual void SetActiveChild(wxMDIChildFrame *child)
-        { m_currentChild = child; }
+    virtual MDI_Child *GetActiveChild() const
+    {
+        if (GetClientWindow())
+            return GetClientWindow()->GetActiveChild();
+        return NULL;
+    }
+    virtual void SetActiveChild(MDI_Child *child)
+    {
+        if (GetClientWindow()->GetActiveChild() != child)
+            GetClientWindow()->SetActiveChild(child);
+    }
 
-
     // Get the client window
-    wxMDIClientWindowBase *GetClientWindow() const { return m_clientWindow; }
+    MDI_Client *GetClientWindow() const { return m_clientWindow; }
 
 
     // MDI windows menu functions
@@ -112,7 +138,7 @@
     */
 
     // Create the client window class (don't Create() the window here, just
-    // return a new object of a wxMDIClientWindow-derived class)
+    // return a new object of a Traits::MDIClient-derived class)
     //
     // Notice that if you override this method you should use the default
     // constructor and Create() and not the constructor creating the window
@@ -119,19 +145,42 @@
     // when creating the frame or your overridden version is not going to be
     // called (as the call to a virtual function from ctor will be dispatched
     // to this class version)
-    virtual wxMDIClientWindow *OnCreateClient();
+    virtual MDI_Client *OnCreateClient()
+        { return new MDI_Client; }
 
 protected:
     // Override to pass menu/toolbar events to the active child first.
-    virtual bool TryBefore(wxEvent& event);
+    virtual bool TryBefore(wxEvent& event)
+    {
+        // Menu (and toolbar) events should be sent to the active child frame
+        // first, if any.
+        if ( event.GetEventType() == wxEVT_MENU ||
+             event.GetEventType() == wxEVT_UPDATE_UI )
+        {
+            MDI_Child * const child = GetActiveChild();
+            if ( child )
+            {
+                // However avoid sending the event back to the child if it's
+                // currently being propagated to us from it.
+                wxWindow* const
+                    from = static_cast<wxWindow*>(event.GetPropagatedFrom());
+                if ( !from || !from->IsDescendant(child) )
+                {
+                    if ( child->ProcessWindowEventLocally(event) )
+                        return true;
+                }
+            }
+        }
 
+        return wxFrame::TryBefore(event);
+    }
 
-    // This is wxMDIClientWindow for all the native implementations but not for
+
+    // This is Traits::MDIClient for all the native implementations but not for
     // the generic MDI version which has its own wxGenericMDIClientWindow and
     // so we store it as just a base class pointer because we don't need its
     // exact type anyhow
-    wxMDIClientWindowBase *m_clientWindow;
-    wxMDIChildFrame *m_currentChild;
+    MDI_Client *m_clientWindow;
 
 #if wxUSE_MENUS
     // the current window menu or NULL if we are not using it
@@ -140,18 +189,24 @@
 };
 
 // ----------------------------------------------------------------------------
-// wxMDIChildFrameBase: child frame managed by wxMDIParentFrame
+// wxMDIAnyChildWindow: child frame managed by MDIParent
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIChildFrameBase : public wxFrame
+template <class Traits> class WXDLLIMPEXP_CORE wxMDIAnyChildWindow;
+typedef wxMDIAnyChildWindow<wxMDIDefaultTraits>  wxMDIChildFrameBase;
+
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyChildWindow : public Traits::ChildWindow
 {
+    typedef typename Traits::MDIParent MDI_Parent;
+
 public:
-    wxMDIChildFrameBase() { m_mdiParent = NULL; }
+    wxMDIAnyChildWindow() { m_mdiParent = NULL; }
 
     /*
         Derived classes should provide Create() with the following signature:
 
-    bool Create(wxMDIParentFrame *parent,
+    bool Create(Traits::MDIParent *parent,
                 wxWindowID id,
                 const wxString& title,
                 const wxPoint& pos = wxDefaultPosition,
@@ -168,10 +223,10 @@
     // Return the MDI parent frame: notice that it may not be the same as
     // GetParent() (our parent may be the client window or even its subwindow
     // in some implementations)
-    wxMDIParentFrame *GetMDIParent() const { return m_mdiParent; }
+    MDI_Parent *GetMDIParent() const { return m_mdiParent; }
 
     // Synonym for GetMDIParent(), was used in some other ports
-    wxMDIParentFrame *GetMDIParentFrame() const { return GetMDIParent(); }
+    MDI_Parent *GetMDIParentFrame() const { return GetMDIParent(); }
 
 
     // in most ports MDI children frames are not really top-level, the only
@@ -190,7 +245,7 @@
     virtual void Raise() { Activate(); }
 
 protected:
-    wxMDIParentFrame *m_mdiParent;
+    MDI_Parent *m_mdiParent;
 };
 
 // ----------------------------------------------------------------------------
@@ -311,11 +366,18 @@
 };
 
 // ----------------------------------------------------------------------------
-// wxMDIClientWindowBase: child of parent frame, parent of children frames
+// wxMDIAnyClientWindow: child of parent frame, parent of children frames
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIClientWindowBase : public wxWindow
+template <class Traits> class WXDLLIMPEXP_CORE wxMDIAnyClientWindow;
+typedef wxMDIAnyClientWindow<wxMDIDefaultTraits> wxMDIClientWindowBase;
+
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyClientWindow : public Traits::ClientWindow
 {
+    typedef typename Traits::MDIParent MDI_Parent;
+    typedef typename Traits::MDIChild  MDI_Child;
+
 public:
     /*
         The derived class must provide the default ctor only (CreateClient()
@@ -324,8 +386,11 @@
 
     // Can be overridden in the derived classes but the base class version must
     // be usually called first to really create the client window.
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(MDI_Parent *parent,
                               long style = wxVSCROLL | wxHSCROLL) = 0;
+
+    virtual MDI_Child* GetActiveChild() = 0;
+    virtual void SetActiveChild(MDI_Child* pChildFrame) = 0;
 };
 
 // ----------------------------------------------------------------------------
@@ -367,36 +432,8 @@
     #include "wx/cocoa/mdi.h"
 #endif
 
-inline wxMDIClientWindow *wxMDIParentFrameBase::OnCreateClient()
-{
-    return new wxMDIClientWindow;
-}
 
-inline bool wxMDIParentFrameBase::TryBefore(wxEvent& event)
-{
-    // Menu (and toolbar) events should be sent to the active child frame
-    // first, if any.
-    if ( event.GetEventType() == wxEVT_MENU ||
-            event.GetEventType() == wxEVT_UPDATE_UI )
-    {
-        wxMDIChildFrame * const child = GetActiveChild();
-        if ( child )
-        {
-            // However avoid sending the event back to the child if it's
-            // currently being propagated to us from it.
-            wxWindow* const
-                from = static_cast<wxWindow*>(event.GetPropagatedFrom());
-            if ( !from || !from->IsDescendant(child) )
-            {
-                if ( child->ProcessWindowEventLocally(event) )
-                    return true;
-            }
-        }
-    }
 
-    return wxFrame::TryBefore(event);
-}
-
 #endif // wxUSE_MDI
 
 #endif // _WX_MDI_H_BASE_
Index: include/wx/msw/mdi.h
===================================================================
--- include/wx/msw/mdi.h	(revision 74767)
+++ include/wx/msw/mdi.h	(working copy)
@@ -52,10 +52,6 @@
 
     static bool IsTDI() { return false; }
 
-    // we don't store the active child in m_currentChild so override this
-    // function to find it dynamically
-    virtual wxMDIChildFrame *GetActiveChild() const;
-
     virtual void Cascade();
     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
     virtual void ArrangeIcons();
@@ -245,6 +241,9 @@
     virtual bool CreateClient(wxMDIParentFrame *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
+    virtual wxMDIChildFrame *GetActiveChild();
+    virtual void SetActiveChild(wxMDIChildFrame* pChildFrame);
+
     // Explicitly call default scroll behaviour
     void OnScroll(wxScrollEvent& event);
 
Index: interface/wx/docview.h
===================================================================
--- interface/wx/docview.h	(revision 74767)
+++ interface/wx/docview.h	(working copy)
@@ -1063,11 +1063,174 @@
     wxString m_viewTypeName;
 };
 
+/**
+    @class wxDocChildFrameAnyBase
 
+    Base class for child frames -- this is what wxView renders itself into.
 
+    @remarks
+    This is a mix-in class so it doesn't derive from wxWindow,
+    only wxDocChildFrameAny does.
+
+    
+    @library{wxcore}
+    @category{docview}
+
+    @see @ref overview_docview_wxview, wxDocChildFrameAny,
+    wxDocParentFrameAny, wxDocParentFrameAnyBase
+*/
+class WXDLLIMPEXP_CORE wxDocChildFrameAnyBase
+{
+public:
+    /**
+        Default ctor, use Create() after it.
+    */
+    wxDocChildFrameAnyBase();
+    /**
+        Full ctor equivalent to using the default one and Create()
+    */
+    wxDocChildFrameAnyBase(wxDocument *doc, wxView *view, wxWindow *win);
+
+    /**
+        Must be called for an object created using the default ctor.
+        
+        @remarks
+        It returns bool just for consistency with Create() methods in
+        other classes, we never return false from here.
+    */
+    bool Create(wxDocument *doc, wxView *view, wxWindow *win);
+
+    /**
+        Destructor doesn't need to be virtual, an object should never be destroyed via
+        a pointer to this class.
+    */
+    ~wxDocChildFrameAnyBase();
+
+    /**
+        Returns the document associated with this frame.
+    */
+    wxDocument *GetDocument() const;
+
+    /**
+        Returns the view associated with this frame.
+    */
+    wxView *GetView() const;
+
+    /**
+        Sets the document for this frame.
+    */
+    void SetDocument(wxDocument *doc);
+
+    /**
+        Sets the view for this frame.
+    */
+    void SetView(wxView *view);
+
+    /**
+        Returns the window associated with this frame.
+    */
+    wxWindow *GetWindow() const;
+
+protected:
+    /**
+        wxEvtHandler-like function which is called from TryBefore() of the derived
+        classes to give our view a chance to process the message before the frame
+        event handlers are used.
+    */
+    bool TryProcessEvent(wxEvent& event);
+    
+    /**
+        Called from EVT_CLOSE handler in the frame: check if we can close and do
+        cleanup if so; veto the event otherwise
+    */
+    bool CloseView(wxCloseEvent& event);
+
+
+    /**
+        The document associated with the frame.
+    */
+    wxDocument*       m_childDocument;
+
+    /**
+        The view associated with the frame.
+    */
+    wxView*           m_childView;
+
+    /**
+        The associated window (allows to avoid having any virtual functions
+        in this class)
+    */
+    wxWindow* m_win;
+};
+
 /**
+    @class wxDocChildFrameAny
+
+    Template implementing child frame concept using the given wxFrame-like class
+
+    This is used to define wxDocChildFrame and wxDocMDIChildFrame: ChildFrame is
+    a wxFrame or wxMDIChildFrame (although in theory it could be any wxWindow-
+    derived class as long as it provided a ctor with the same signature as
+    wxFrame and OnActivate() method) and ParentFrame is either wxFrame or
+    wxMDIParentFrame.
+*/
+template <class ChildFrame, class ParentFrame>
+class WXDLLIMPEXP_CORE wxDocChildFrameAny : public ChildFrame,
+                                            public wxDocChildFrameAnyBase
+{
+public:
+    typedef ChildFrame BaseClass;
+
+    /**
+        Default constructor, use Create after it.
+    */
+    wxDocChildFrameAny();
+
+    /**
+        Constructor for a frame showing the given view of the specified document.
+    */
+    wxDocChildFrameAny(wxDocument *doc,
+                       wxView *view,
+                       ParentFrame *parent,
+                       wxWindowID id,
+                       const wxString& title,
+                       const wxPoint& pos = wxDefaultPosition,
+                       const wxSize& size = wxDefaultSize,
+                       long style = wxDEFAULT_FRAME_STYLE,
+                       const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                ParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    virtual bool Destroy();
+
+protected:
+    /**
+        Hook the child view into event handlers chain.
+    */
+    virtual bool TryBefore(wxEvent& event);
+
+private:
+    void OnActivate(wxActivateEvent& event);
+    void OnCloseWindow(wxCloseEvent& event);
+};
+
+/**
     @class wxDocChildFrame
+    
+    A default child frame: we need to define it as a class just for wxRTTI,
+    otherwise we could simply typedef it.
 
+    wxDocChildFrame inherits from wxDocChildFrameBase which is a typedef of
+    wxDocChildFrameAny<wxFrame, wxFrame>.
+
     The wxDocChildFrame class provides a default frame for displaying documents
     on separate windows. This class can only be used for SDI (not MDI) child
     frames.
@@ -1086,9 +1249,9 @@
     @library{wxcore}
     @category{docview}
 
-    @see @ref overview_docview, @ref page_samples_docview, wxFrame
+    @see @ref overview_docview, @ref page_samples_docview, wxDocChildFrameBase
 */
-class wxDocChildFrame : public wxFrame
+class wxDocChildFrame : public wxDocChildFrameBase
 {
 public:
     /**
@@ -1105,43 +1268,94 @@
         Destructor.
     */
     virtual ~wxDocChildFrame();
+};
 
-    /**
-        Returns the document associated with this frame.
-    */
-    wxDocument* GetDocument() const;
 
-    /**
-        Returns the view associated with this frame.
-    */
-    wxView* GetView() const;
 
+
+/**
+    @class wxDocParentFrameAnyBase
+    
+    Base class containing type-independent code of wxDocParentFrameAny
+
+    As with wxDocChildFrame we define a template base class used by both normal
+    and MDI versions
+
+    Similarly to wxDocChildFrameAnyBase, this class is a mix-in and doesn't
+    derive from wxWindow.
+*/
+class WXDLLIMPEXP_CORE wxDocParentFrameAnyBase
+{
+public:
+    wxDocParentFrameAnyBase(wxWindow* frame);
     /**
-        Sets the document for this frame.
+        Returns the associated document manager object.
     */
-    void SetDocument(wxDocument* doc);
+    wxDocManager *GetDocumentManager() const;
 
+protected:
     /**
-        Sets the view for this frame.
+        This is similar to wxDocChildFrameAnyBase method with the same name:
+        while we're not an event handler ourselves and so can't override
+        TryBefore(), we provide a helper that the derived template class can use
+        from its TryBefore() implementation.
     */
-    void SetView(wxView* view);
+    bool TryProcessEvent(wxEvent& event);
 
+    wxWindow* const m_frame;
+    wxDocManager *m_docManager;
+};
+
+/**
+    @class wxDocParentFrameAny
+    
+    This is similar to wxDocChildFrameAny and is used to provide common
+    implementation for both wxDocParentFrame and wxDocMDIParentFrame
+*/
+template <class BaseFrame>
+class WXDLLIMPEXP_CORE wxDocParentFrameAny : public BaseFrame,
+                                             public wxDocParentFrameAnyBase
+{
+public:
+    wxDocParentFrameAny();
+    wxDocParentFrameAny(wxDocManager *manager,
+                        wxFrame *frame,
+                        wxWindowID id,
+                        const wxString& title,
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxDefaultSize,
+                        long style = wxDEFAULT_FRAME_STYLE,
+                        const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocManager *manager,
+                wxFrame *frame,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+protected:
     /**
-        The document associated with the frame.
+        Hook the document manager into event handling chain.
     */
-    wxDocument* m_childDocument;
+    virtual bool TryBefore(wxEvent& event);
 
-    /**
-        The view associated with the frame.
-    */
-    wxView* m_childView;
+private:
+    void OnExit(wxCommandEvent& WXUNUSED(event));
+    void OnCloseWindow(wxCloseEvent& event);
 };
 
-
-
 /**
     @class wxDocParentFrame
+    
+    A default parent frame: we need to define it as a class just for wxRTTI,
+    otherwise we could simply typedef it.
 
+    wxDocParentFrame inherits from wxDocParentFrameBase which is a typedef of
+    wxDocParentFrameAny<wxFrame>.
+
     The wxDocParentFrame class provides a default top-level frame for
     applications using the document/view framework. This class can only be used
     for SDI (not MDI) parent frames.
@@ -1178,11 +1392,6 @@
                      const wxString& name = wxFrameNameStr);
 
     /**
-        Destructor.
-    */
-    virtual ~wxDocParentFrame();
-
-    /**
         Used in two-step construction.
     */
     bool Create(wxDocManager* manager, wxFrame* parent, wxWindowID id,
@@ -1189,11 +1398,6 @@
                 const wxString& title, const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = 541072960,
                 const wxString& name = wxFrameNameStr);
-
-    /**
-        Returns the associated document manager object.
-    */
-    wxDocManager* GetDocumentManager() const;
 };
 
 
@@ -1697,7 +1901,28 @@
     wxList m_documentViews;
 };
 
+/**
+    @class wxDocPrintout
 
+    Provide simple default printing facilities if wxUSE_PRINTING_ARCHITECTURE is set to 1.
+*/
+class WXDLLIMPEXP_CORE wxDocPrintout : public wxPrintout
+{
+public:
+    wxDocPrintout(wxView *view = NULL, const wxString& title = wxString());
+
+    virtual bool OnPrintPage(int page);
+    virtual bool HasPage(int page);
+    virtual bool OnBeginDocument(int startPage, int endPage);
+    virtual void GetPageInfo(int *minPage, int *maxPage,
+                             int *selPageFrom, int *selPageTo);
+
+    virtual wxView *GetView()
+
+protected:
+    wxView*       m_printoutView;
+};
+
 // ============================================================================
 // Global functions/macros
 // ============================================================================
Index: interface/wx/mdi.h
===================================================================
--- interface/wx/mdi.h	(revision 74767)
+++ interface/wx/mdi.h	(working copy)
@@ -1,13 +1,397 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        mdi.h
-// Purpose:     interface of wxMDIClientWindow
+// Purpose:     interface of wxMDIParentFrame, wxMDIChildFrame, wxMDIClientWindow,
+//              wxMDIAnyParentWindow, wxMDIAnyChildWindow, wxMDIAnyClientWindow
 // Author:      wxWidgets team
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
 /**
+    @struct wxMDIDefaultTraits
+
+    Define the kind of windows the MDI base classes use.
+    
+    @library{wxaui}
+    @category{managedwnd}
+
+    @see wxMDIAnyParentWindow, wxMDIAnyChildWindow, wxMDIAnyClientWindow
+*/
+struct wxMDIDefaultTraits
+{
+    typedef wxFrame             ParentWindow;
+    typedef wxFrame             ChildWindow;
+    typedef wxWindow            ClientWindow;
+
+    typedef wxMDIParentFrame    MDIParent;
+    typedef wxMDIChildFrame     MDIChild;
+    typedef wxMDIClientWindow   MDIClient;
+};
+
+/**
+    @class wxMDIAnyParentWindow
+
+    Base class for parent frame for MDI children.
+    All MDI classes are templates, parametrized on the kind of windows they use.
+    e.g. wxMDIParentFrame inherits from wxMDIParentFrameBase which is a typedef of
+    wxMDIAnyParentWindow<wxMDIDefaultTraits>.
+
+    Derived classes should provide constructor and Create() method with the
+    following declaration:
+    <pre>
+    bool Create(wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                const wxString& name = wxFrameNameStr);
+    </pre>
+    and the following function:
+    <pre>
+    static bool IsTDI();
+    </pre>
+    
+    @library{wxcore}
+    @category{managedwnd}
+
+    @see wxMDIAnyChildWindow, wxMDIAnyClientWindow
+*/
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyParentWindow : public Traits::ParentWindow
+{
+public:
+    wxMDIAnyParentWindow();
+    virtual ~wxMDIAnyParentWindow();
+
+    /**
+        Get the active MDI child window.
+    */
+    virtual Traits::MDIChild *GetActiveChild() const;
+    /**
+        Change the active MDI child window.
+    */
+    virtual void SetActiveChild(Traits::MDIChild *child);
+    /**
+        Get the client window.
+    */
+    Traits::MDIClient *GetClientWindow() const;
+
+    /**
+        Get the current Window menu or NULL if we don't have
+        because of wxFRAME_NO_WINDOW_MENU style.
+    */
+    wxMenu* GetWindowMenu() const;
+
+    /**
+        Use the given menu instead of the default window menu.
+        The menu can be NULL to disable the window menu completely.
+    */
+    virtual void SetWindowMenu(wxMenu *menu);
+
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Cascade();
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Tile(wxOrientation WXUNUSED(orient) = wxHORIZONTAL);
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void ArrangeIcons();
+    
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual void ActivateNext();
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual void ActivatePrevious();
+
+    /**
+        Create the client window class (don't Create() the window here, just
+        return a new object of a Traits::MDIClient-derived class).
+
+        Notice that if you override this method you should use the default
+        constructor and Create() and not the constructor creating the window
+        when creating the frame or your overridden version is not going to be
+        called (as the call to a virtual function from ctor will be dispatched
+        to this class version)
+    */
+    virtual Traits::MDIClient *OnCreateClient();
+
+protected:
+    /**
+        Override to pass menu/toolbar events to the active child first.
+    */
+    virtual bool TryBefore(wxEvent& event);
+
+    /**
+        This is Traits::MDIClient for all the native implementations but not for
+        the generic MDI version which has its own wxGenericMDIClientWindow and
+        so we store it as just a base class pointer because we don't need its
+        exact type anyhow.
+    */
+    Traits::MDIClient *m_clientWindow;
+
+    /**
+        The current window menu or NULL if we are not using it.
+        Defined if wxUSE_MENUS is set to 1.
+    */
+    wxMenu *m_windowMenu;
+};
+
+/**
+    @class wxMDIAnyChildWindow
+
+    Base class for child frame managed by MDI Parent.
+    All MDI classes are templates, parametrized on the kind of windows they use.
+    e.g. wxMDIChildFrame inherits from wxMDIChildFrameBase which is a typedef of
+    wxMDIAnyChildWindow<wxMDIDefaultTraits>.
+
+    Derived classes should provide the Create() method with the following signature:
+    <pre>
+    bool Create(Traits::MDIParent *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+    </pre>
+    And set m_mdiParent to parent parameter.
+
+    @library{wxcore}
+    @category{managedwnd}
+
+    @see wxMDIAnyParentWindow, wxMDIAnyClientWindow
+*/
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyChildWindow : public Traits::ChildWindow
+{
+public:
+    wxMDIAnyChildWindow();
+
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual void Activate();
+
+    /**
+        Get the MDI parent frame: notice that it may not be the same as
+        GetParent() (our parent may be the client window or even its subwindow
+        in some implementations)
+    */
+    Traits::MDIParent *GetMDIParent() const;
+    /**
+        Synonym for GetMDIParent(), was used in some other ports.
+        Should not be used in a new implementation.
+    */
+    Traits::MDIParent *GetMDIParentFrame() const;
+
+    /**
+        In most ports MDI children frames are not really top-level, the only
+        exception are the Mac ports in which MDI children are just normal top
+        level windows too.
+    */
+    virtual bool IsTopLevel() const;
+    /**
+        In all ports keyboard navigation must stop at MDI child frame level and
+        can't cross its boundary. Indicate this by overriding this function to
+        return @c true.
+    */
+    virtual bool IsTopNavigationDomain() const;
+
+    /**
+        Raising any frame is supposed to show it but wxFrame Raise()
+        implementation doesn't work for MDI child frames in most forms so
+        forward this to Activate() which serves the same purpose by default.
+    */
+    virtual void Raise();
+
+    protected:
+    Traits::MDIParent *m_mdiParent;
+};
+
+/**
+    @class wxTDIChildFrame
+
+    wxTDIChildFrame inherits from wxMDIChildFrameBase which is a typedef of
+    wxMDIAnyChildWindow<wxMDIDefaultTraits>.
+    
+    It is the child frame used by TDI (Tabbed Document Interface)
+    framework implementations.
+
+    @library{wxcore}
+    @category{managedwnd}
+
+    @see wxMDIChildFrame
+*/
+class WXDLLIMPEXP_CORE wxTDIChildFrame : public wxMDIChildFrameBase
+{
+public:
+
+    /**
+        Overload this method to implement a status bar for MDI children.
+        Returns NULL if not overloaded.
+    */
+    virtual wxStatusBar* CreateStatusBar(int WXUNUSED(number) = 1,
+                                         long WXUNUSED(style) = 1,
+                                         wxWindowID WXUNUSED(id) = 1,
+                                         const wxString& WXUNUSED(name) = wxEmptyString);
+
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxStatusBar *GetStatusBar() const;
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void SetStatusText(const wxString &WXUNUSED(text), int WXUNUSED(number)=0);
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void SetStatusWidths(int WXUNUSED(n), const int WXUNUSED(widths)[]);
+
+    // no toolbar
+    //
+    // TODO: again, it should be possible to have tool bars
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxToolBar *CreateToolBar(long WXUNUSED(style),
+                                     wxWindowID WXUNUSED(id),
+                                     const wxString& WXUNUSED(name));
+    /**
+        Returns NULL if not overloaded.
+    */
+    virtual wxToolBar *GetToolBar() const;
+
+    // no icon
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void SetIcons(const wxIconBundle& WXUNUSED(icons));
+
+    /**
+        Get the title used as tab label.
+    */
+    virtual wxString GetTitle() const;
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual void SetTitle(const wxString& title);
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Maximize(bool WXUNUSED(maximize) = true);
+    /**
+        @return @c true if not overloaded
+    */
+    virtual bool IsMaximized() const;
+    /**
+        @return @c true if not overloaded
+    */
+    virtual bool IsAlwaysMaximized() const;
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Iconize(bool WXUNUSED(iconize) = true);
+    /**
+        @return @c false if not overloaded
+    */
+    virtual bool IsIconized() const;
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void Restore();
+    /**
+        @return @c false if not overloaded
+    */
+    virtual bool ShowFullScreen(bool WXUNUSED(show), long WXUNUSED(style));
+    /**
+        @return @c false if not overloaded
+    */
+    virtual bool IsFullScreen() const;
+
+    /**
+        Override these functions is needed to ensure that a child window is
+        created even though we derive from wxFrame -- basically we make it
+        behave as just a wxWindow by short-circuiting wxTLW changes to the base
+        class behaviour.
+    */
+    virtual void AddChild(wxWindowBase *child);
+    virtual bool Destroy();
+
+protected:
+    virtual void DoGetSize(int *width, int *height);
+    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
+    virtual void DoGetClientSize(int *width, int *height) const;
+
+    virtual void DoSetClientSize(int width, int height);
+
+    /**
+        Has no effect if not overloaded.
+    */
+    virtual void DoSetSizeHints(int WXUNUSED(minW), int WXUNUSED(minH),
+                                int WXUNUSED(maxW), int WXUNUSED(maxH),
+                                int WXUNUSED(incW), int WXUNUSED(incH));
+
+    wxString m_title;
+};
+
+/**
+    @class wxMDIAnyClientWindow
+
+    Base class, child of parent frame and parent of children frames.
+
+    All MDI classes are templates, parametrized on the kind of windows they use.
+    e.g. wxMDIClientWindow inherits from wxMDIClientWindowBase which is a typedef of
+    wxMDIAnyClientWindow<wxMDIDefaultTraits>.
+
+    The derived class must provide the default ctor only (CreateClient()
+    will be called later).
+    
+    @library{wxcore}
+    @category{managedwnd}
+
+    @see wxMDIAnyParentWindow, wxMDIAnyChildWindow
+*/
+template <class Traits>
+class WXDLLIMPEXP_CORE wxMDIAnyClientWindow : public Traits::ClientWindow
+{
+public:
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual bool CreateClient(Traits::MDIParent *parent,
+                              long style = wxVSCROLL | wxHSCROLL);
+
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual Traits::MDIChild* GetActiveChild();
+    /**
+        Pure virtual method reimplemented in the overloads.
+    */
+    virtual void SetActiveChild(Traits::MDIChild* pChildFrame);
+};
+
+
+
+
+/**
     @class wxMDIClientWindow
+    
+    Port-specific implementation.
 
+    wxMDIClientWindow inherits from wxMDIClientWindowBase which is a typedef of
+    wxMDIAnyClientWindow<wxMDIDefaultTraits>.
+
     An MDI client window is a child of wxMDIParentFrame, and manages zero or
     more wxMDIChildFrame objects.
 
@@ -32,7 +416,7 @@
 
     @see wxMDIChildFrame, wxMDIParentFrame, wxFrame
 */
-class wxMDIClientWindow : public wxWindow
+class wxMDIClientWindow : public wxMDIClientWindowBase
 {
 public:
     /**
@@ -65,7 +449,12 @@
 
 /**
     @class wxMDIParentFrame
+    
+    Port-specific implementation.
 
+    wxMDIParentFrame inherits from wxMDIParentFrameBase which is a typedef of
+    wxMDIAnyParentWindow<wxMDIDefaultTraits>.
+
     An MDI (Multiple Document Interface) parent frame is a window which can
     contain MDI child frames in its client area which emulates the full
     desktop.
@@ -96,7 +485,17 @@
     application has a single MDI parent frame window inside which multiple MDI
     child frames, i.e. objects of class wxMDIChildFrame, can be created.
 
+    wxUSE_GENERIC_MDI_AS_NATIVE may be predefined to force the generic MDI
+    implementation use even on the platforms which usually don't use it.
 
+    Notice that generic MDI can still be used without this, but you would need
+    to explicitly use wxGenericMDIXXX classes in your code (and currently also
+    add src/generic/mdig.cpp to your build as it's not compiled in if generic
+    MDI is not used by default -- but this may change later...).
+    wxUniv always uses the generic MDI implementation and so do the ports
+    without native version (although wxCocoa seems to have one -- but it's
+    probably not functional)
+
     @beginStyleTable
 
     There are no special styles for this class, all wxFrame styles apply to it
@@ -112,7 +511,7 @@
 
     @see wxMDIChildFrame, wxMDIClientWindow, wxFrame, wxDialog
 */
-class wxMDIParentFrame : public wxFrame
+class wxMDIParentFrame : public wxMDIParentFrameBase
 {
 public:
 
@@ -343,6 +742,11 @@
 /**
     @class wxMDIChildFrame
 
+    Port-specific implementation.
+    
+    wxMDIChildFrame inherits from wxMDIChildFrameBase which is a typedef of
+    wxMDIAnyChildWindow<wxMDIDefaultTraits>.
+
     An MDI child frame is a frame that can only exist inside a
     wxMDIClientWindow, which is itself a child of wxMDIParentFrame.
 
@@ -367,7 +771,7 @@
 
     @see wxMDIClientWindow, wxMDIParentFrame, wxFrame
 */
-class wxMDIChildFrame : public wxFrame
+class wxMDIChildFrame : public wxMDIChildFrameBase
 {
 public:
     /**
@@ -467,4 +871,3 @@
     */
     virtual void Restore();
 };
-
Index: src/gtk1/mdi.cpp
===================================================================
--- src/gtk1/mdi.cpp	(revision 74767)
+++ src/gtk1/mdi.cpp	(working copy)
@@ -255,34 +255,6 @@
     }
 }
 
-wxMDIChildFrame *wxMDIParentFrame::GetActiveChild() const
-{
-    if (!m_clientWindow) return NULL;
-
-    GtkNotebook *notebook = GTK_NOTEBOOK(m_clientWindow->m_widget);
-    if (!notebook) return NULL;
-
-    gint i = gtk_notebook_get_current_page( notebook );
-    if (i < 0) return NULL;
-
-    GtkNotebookPage* page = (GtkNotebookPage*) (g_list_nth(notebook->children,i)->data);
-    if (!page) return NULL;
-
-    wxWindowList::compatibility_iterator node = m_clientWindow->GetChildren().GetFirst();
-    while (node)
-    {
-        wxMDIChildFrame *child_frame = wxDynamicCast( node->GetData(), wxMDIChildFrame );
-
-        wxASSERT_MSG( child_frame, wxT("child is not a wxMDIChildFrame") );
-
-        if (child_frame->m_page == page)
-            return child_frame;
-        node = node->GetNext();
-    }
-
-    return NULL;
-}
-
 void wxMDIParentFrame::ActivateNext()
 {
     if (m_clientWindow)
@@ -481,4 +453,44 @@
     return true;
 }
 
+wxMDIChildFrame *wxMDIClientWindow::GetActiveChild()
+{
+    GtkNotebook *notebook = GTK_NOTEBOOK(m_widget);
+    if (!notebook) return NULL;
+
+    gint i = gtk_notebook_get_current_page( notebook );
+    if (i < 0) return NULL;
+
+    GtkNotebookPage* page = (GtkNotebookPage*) (g_list_nth(notebook->children,i)->data);
+    if (!page) return NULL;
+
+    wxWindowList::compatibility_iterator node = GetChildren().GetFirst();
+    while (node)
+    {
+        wxMDIChildFrame *child_frame = wxDynamicCast( node->GetData(), wxMDIChildFrame );
+
+        wxASSERT_MSG( child_frame, wxT("child is not a wxMDIChildFrame") );
+
+        if (child_frame->m_page == page)
+            return child_frame;
+        node = node->GetNext();
+    }
+
+    return NULL;
+}
+
+void wxMDIClientWindow::SetActiveChild(wxMDIChildFrame* pChildFrame)
+{
+    if ( !pChildFrame || wxPendingDelete.Member(pChildFrame) )
+        return;
+
+    GtkNotebook *notebook = GTK_NOTEBOOK(m_widget);
+    if (!notebook)
+        return;
+
+    gint page = gtk_notebook_page_num(notebook, pChildFrame->m_widget);
+    if (page != -1)
+        gtk_notebook_set_current_page(notebook, page);
+}
+
 #endif
Index: src/gtk/mdi.cpp
===================================================================
--- src/gtk/mdi.cpp	(revision 74767)
+++ src/gtk/mdi.cpp	(working copy)
@@ -207,39 +207,6 @@
     }
 }
 
-wxMDIChildFrame *wxMDIParentFrame::GetActiveChild() const
-{
-    if (!m_clientWindow) return NULL;
-
-    GtkNotebook *notebook = GTK_NOTEBOOK(m_clientWindow->m_widget);
-    if (!notebook) return NULL;
-
-    gint i = gtk_notebook_get_current_page( notebook );
-    if (i < 0) return NULL;
-
-    GtkWidget* page = gtk_notebook_get_nth_page(notebook, i);
-    if (!page) return NULL;
-
-    wxWindowList::compatibility_iterator node = m_clientWindow->GetChildren().GetFirst();
-    while (node)
-    {
-        if ( wxPendingDelete.Member(node->GetData()) )
-            return NULL;
-
-        wxMDIChildFrame *child_frame = wxDynamicCast( node->GetData(), wxMDIChildFrame );
-
-        if (!child_frame)
-            return NULL;
-
-        if (child_frame->m_widget == page)
-            return child_frame;
-
-        node = node->GetNext();
-    }
-
-    return NULL;
-}
-
 void wxMDIParentFrame::ActivateNext()
 {
     if (m_clientWindow)
@@ -414,6 +381,51 @@
     return true;
 }
 
+wxMDIChildFrame *wxMDIClientWindow::GetActiveChild()
+{
+    GtkNotebook *notebook = GTK_NOTEBOOK(m_widget);
+    if (!notebook) return NULL;
+
+    gint i = gtk_notebook_get_current_page( notebook );
+    if (i < 0) return NULL;
+
+    GtkWidget* page = gtk_notebook_get_nth_page(notebook, i);
+    if (!page) return NULL;
+
+    wxWindowList::compatibility_iterator node = GetChildren().GetFirst();
+    while (node)
+    {
+        if ( wxPendingDelete.Member(node->GetData()) )
+            return NULL;
+
+        wxMDIChildFrame *child_frame = wxDynamicCast( node->GetData(), wxMDIChildFrame );
+
+        if (!child_frame)
+            return NULL;
+
+        if (child_frame->m_widget == page)
+            return child_frame;
+
+        node = node->GetNext();
+    }
+
+    return NULL;
+}
+
+void wxMDIClientWindow::SetActiveChild(wxMDIChildFrame* pChildFrame)
+{
+    if ( !pChildFrame || wxPendingDelete.Member(pChildFrame) )
+        return;
+
+    GtkNotebook *notebook = GTK_NOTEBOOK(m_widget);
+    if (!notebook)
+        return;
+
+    gint page = gtk_notebook_page_num(notebook, pChildFrame->m_widget);
+    if (page != -1)
+        gtk_notebook_set_current_page(notebook, page);
+}
+
 void wxMDIClientWindow::AddChildGTK(wxWindowGTK* child)
 {
     wxMDIChildFrame* child_frame = static_cast<wxMDIChildFrame*>(child);
Index: src/msw/mdi.cpp
===================================================================
--- src/msw/mdi.cpp	(revision 74767)
+++ src/msw/mdi.cpp	(working copy)
@@ -248,16 +248,6 @@
 // wxMDIParentFrame child management
 // ----------------------------------------------------------------------------
 
-wxMDIChildFrame *wxMDIParentFrame::GetActiveChild() const
-{
-    HWND hWnd = (HWND)::SendMessage(GetWinHwnd(GetClientWindow()),
-                                    WM_MDIGETACTIVE, 0, 0L);
-    if ( !hWnd )
-        return NULL;
-
-    return static_cast<wxMDIChildFrame *>(wxFindWinFromHandle(hWnd));
-}
-
 int wxMDIParentFrame::GetChildFramesCount() const
 {
     int count = 0;
@@ -1119,7 +1109,7 @@
         activated = false;
         parent->SetActiveChild(NULL);
 
-        WXHMENU hMenuParent = parent->m_hMenu;
+        WXHMENU hMenuParent = parent->MSWGetActiveMenu();
 
         // activate the parent menu only when there is no other child
         // that has been activated
@@ -1336,6 +1326,23 @@
     return true;
 }
 
+wxMDIChildFrame *wxMDIClientWindow::GetActiveChild()
+{
+    HWND hWnd = (HWND)::SendMessage(m_hWnd, WM_MDIGETACTIVE, 0, 0L);
+    if ( !hWnd )
+        return NULL;
+
+    return static_cast<wxMDIChildFrame *>(wxFindWinFromHandle(hWnd));
+}
+
+void wxMDIClientWindow::SetActiveChild(wxMDIChildFrame* pChildFrame)
+{
+    if ( pChildFrame )
+    {
+        pChildFrame->Activate();
+    }
+}
+
 // Explicitly call default scroll behaviour
 void wxMDIClientWindow::OnScroll(wxScrollEvent& event)
 {

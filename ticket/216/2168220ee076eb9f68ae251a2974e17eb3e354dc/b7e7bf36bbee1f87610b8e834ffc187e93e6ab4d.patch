Index: include/wx/aui/aui.h
===================================================================
--- include/wx/aui/aui.h	(revision 65859)
+++ include/wx/aui/aui.h	(working copy)
@@ -18,6 +18,8 @@
 #include "wx/aui/auibar.h"
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabmdi.h"
+#include "wx/aui/tabdocmdi.h"
 
 #endif // _WX_AUI_H_
 
+
Index: include/wx/aui/tabdocmdi.h
===================================================================
--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(revision 0)
@@ -0,0 +1,120 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     Frame classes for Aui MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AUITABDOCMDI_H_
+#define _WX_AUITABDOCMDI_H_
+
+#if wxUSE_AUI
+
+#include "wx/docmdi.h"
+#include "wx/aui/tabmdi.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+
+// ----------------------------------------------------------------------------
+// An MDI document parent frame for AUI framework
+// ----------------------------------------------------------------------------
+
+typedef
+  wxDocParentFrameAny<wxAuiMDIParentFrame> wxAuiDocMDIParentFrameBase;
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame : public wxAuiDocMDIParentFrameBase
+{
+public:
+    wxAuiDocMDIParentFrame() : wxAuiDocMDIParentFrameBase() { }
+
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                        wxFrame *parent,
+                        wxWindowID id,
+                        const wxString& title,
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxDefaultSize,
+                        long style = wxDEFAULT_FRAME_STYLE,
+                        const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocManager *manager,
+                wxFrame *frame,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the document manager's event table
+    virtual bool TryBefore(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const { return m_docManager; }
+
+protected:
+    void OnNotebookPageChanged(wxAuiNotebookEvent &event);
+    void OnCloseWindow(wxCloseEvent& event);
+
+#if wxUSE_MENUS
+    virtual void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIParentFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIParentFrame);
+    DECLARE_EVENT_TABLE()
+};
+
+
+// ----------------------------------------------------------------------------
+// An MDI document child frame for AUI framework
+// ----------------------------------------------------------------------------
+
+typedef
+  wxDocChildFrameAny<wxAuiMDIChildFrame, wxAuiMDIParentFrame> wxAuiDocMDIChildFrameBase;
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame : public wxAuiDocMDIChildFrameBase
+{
+public:
+    wxAuiDocMDIChildFrame() { }
+
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiMDIParentFrame *parent,
+                          wxWindowID id,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+protected:
+    virtual void DoActivate(wxActivateEvent& evt) { evt.Skip(false); }
+
+private:
+    DECLARE_CLASS(wxAuiDocMDIChildFrame)
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIChildFrame);
+};
+
+
+#endif
+    // wxUSE_AUI
+
+#endif
+    // _WX_AUITABDOCMDI_H_
Index: include/wx/aui/tabmdi.h
===================================================================
--- include/wx/aui/tabmdi.h	(revision 65859)
+++ include/wx/aui/tabmdi.h	(working copy)
@@ -18,7 +18,7 @@
 // headers
 // ----------------------------------------------------------------------------
 
-#include "wx/frame.h"
+#include "wx/mdi.h"
 #include "wx/panel.h"
 #include "wx/notebook.h"
 #include "wx/icon.h"
@@ -28,6 +28,15 @@
 // classes
 //-----------------------------------------------------------------------------
 
+enum MDI_MENU_ID
+{
+    wxWINDOWCLOSE = 4001,
+    wxWINDOWCLOSEALL,
+    wxWINDOWNEXT,
+    wxWINDOWPREV
+};
+
+
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIParentFrame;
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIClientWindow;
 class WXDLLIMPEXP_FWD_AUI wxAuiMDIChildFrame;
@@ -36,7 +45,7 @@
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxFrame
+class WXDLLIMPEXP_AUI wxAuiMDIParentFrame : public wxMDIParentFrameBase
 {
 public:
     wxAuiMDIParentFrame();
@@ -60,23 +69,18 @@
 
     void SetArtProvider(wxAuiTabArt* provider);
     wxAuiTabArt* GetArtProvider();
-    wxAuiNotebook* GetNotebook() const;
 
 #if wxUSE_MENUS
-    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
     void SetWindowMenu(wxMenu* pMenu);
 
     virtual void SetMenuBar(wxMenuBar *pMenuBar);
 #endif // wxUSE_MENUS
-
     void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
 
-    wxAuiMDIChildFrame *GetActiveChild() const;
-    void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
+    virtual wxMDIClientWindowBase *OnCreateClient();
+    wxAuiMDIClientWindow *GetAuiMDIClientWindow() const { return m_pAuiClientWindow; }
+    wxAuiNotebook* GetNotebook() const;
 
-    wxAuiMDIClientWindow *GetClientWindow() const;
-    virtual wxAuiMDIClientWindow *OnCreateClient();
-
     virtual void Cascade() { /* Has no effect */ }
     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
     virtual void ArrangeIcons() { /* Has no effect */ }
@@ -84,23 +88,21 @@
     virtual void ActivatePrevious();
 
 protected:
-    wxAuiMDIClientWindow*   m_pClientWindow;
-    wxAuiMDIChildFrame*     m_pActiveChild;
+    wxAuiMDIClientWindow*   m_pAuiClientWindow; 
     wxEvent*                m_pLastEvt;
 
 #if wxUSE_MENUS
-    wxMenu              *m_pWindowMenu;
     wxMenuBar           *m_pMyMenuBar;
 #endif // wxUSE_MENUS
 
 protected:
-    void Init();
 
 #if wxUSE_MENUS
     void RemoveWindowMenu(wxMenuBar *pMenuBar);
     void AddWindowMenu(wxMenuBar *pMenuBar);
 
-    void DoHandleMenu(wxCommandEvent &event);
+    void OnHandleMenu(wxCommandEvent &event) { DoHandleMenu(event); }
+    virtual void DoHandleMenu(wxCommandEvent &event);
 #endif // wxUSE_MENUS
 
     virtual bool ProcessEvent(wxEvent& event);
@@ -116,7 +118,7 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxPanel
+class WXDLLIMPEXP_AUI wxAuiMDIChildFrame : public wxMDIChildFrameBase
 {
 public:
     wxAuiMDIChildFrame();
@@ -142,6 +144,8 @@
     virtual wxMenuBar *GetMenuBar() const;
 #endif // wxUSE_MENUS
 
+    virtual wxAuiMDIParentFrame *GetAuiMDIParentFrame() { return m_pMDIParentFrame; }
+
     virtual void SetTitle(const wxString& title);
     virtual wxString GetTitle() const;
 
@@ -190,15 +194,11 @@
 
     virtual bool IsTopLevel() const { return false; }
 
+protected:
     void OnMenuHighlight(wxMenuEvent& evt);
     void OnActivate(wxActivateEvent& evt);
-    void OnCloseWindow(wxCloseEvent& evt);
 
-    void SetMDIParentFrame(wxAuiMDIParentFrame* parent);
-    wxAuiMDIParentFrame* GetMDIParentFrame() const;
-
-protected:
-    void Init();
+    virtual void DoActivate(wxActivateEvent& WXUNUSED(evt)) {}
     virtual void DoSetSize(int x, int y, int width, int height, int size_flags);
     virtual void DoMoveWindow(int x, int y, int width, int height);
 
@@ -206,6 +206,11 @@
     virtual void DoSetSizeHints(int WXUNUSED(minW), int WXUNUSED(minH),
                                 int WXUNUSED(maxW), int WXUNUSED(maxH),
                                 int WXUNUSED(incW), int WXUNUSED(incH)) {}
+private:
+    // set to false by the Destroy method to avoid DoActivate to be called when
+    // children class is destroyed (and the pointer to the virtual method is NULL)
+    bool m_doActivate;
+
 public:
     // This function needs to be called when a size change is confirmed,
     // we needed this function to prevent anybody from the outside
@@ -227,7 +232,6 @@
 #endif // wxUSE_MENUS
 
 
-
 private:
     DECLARE_DYNAMIC_CLASS(wxAuiMDIChildFrame)
     DECLARE_EVENT_TABLE()
@@ -239,18 +243,25 @@
 // wxAuiMDIClientWindow
 //-----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_AUI wxAuiMDIClientWindow : public wxAuiNotebook
+class WXDLLIMPEXP_AUI wxAuiMDIClientWindow
+    : public wxMDIClientWindowBase
+    , public wxAuiNotebook
 {
 public:
-    wxAuiMDIClientWindow();
+    wxAuiMDIClientWindow() {};
     wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
     ~wxAuiMDIClientWindow();
 
-    virtual bool CreateClient(wxAuiMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
     virtual int SetSelection(size_t page);
 
+    // Return this as wxWindow
+    virtual wxWindow *GetMDIClientWindow() { return this; }
+    // Return this as wxAuiNotebook
+    virtual wxAuiNotebook *GetNotebook() { return this; }
+
 protected:
 
     void PageChanged(int old_selection, int new_selection);
@@ -262,6 +273,19 @@
     DECLARE_DYNAMIC_CLASS(wxAuiMDIClientWindow)
     DECLARE_EVENT_TABLE()
 };
+
+
+
+inline wxMDIClientWindowBase *wxAuiMDIParentFrame::OnCreateClient()
+{
+    if (!m_pAuiClientWindow)
+        m_pAuiClientWindow = new wxAuiMDIClientWindow( this );
+    return m_pAuiClientWindow;
+}
+
+
+
 #endif // wxUSE_AUI
 
 #endif // _WX_AUITABMDI_H_
+
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 65859)
+++ samples/docview/docview.cpp	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998 Julian Smart
@@ -14,8 +15,10 @@
     This sample show document/view support in wxWidgets.
 
     It can be run in several ways:
+        * With "--aui_mdi" command line option to use multiple AUI MDI child
+          frames (wxAuiNotebook tabs) for the multiple documents (this is the default).
         * With "--mdi" command line option to use multiple MDI child frames
-          for the multiple documents (this is the default).
+          for the multiple documents.
         * With "--sdi" command line option to use multiple top level windows
           for the multiple documents
         * With "--single" command line option to support opening a single
@@ -49,6 +52,9 @@
 
 #include "wx/docview.h"
 #include "wx/docmdi.h"
+#if wxUSE_AUI
+#include "wx/aui/tabdocmdi.h"
+#endif
 
 #include "docview.h"
 #include "doc.h"
@@ -79,7 +85,11 @@
 MyApp::MyApp()
 {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    m_mode = Mode_AUI_MDI;
+#else
     m_mode = Mode_MDI;
+#endif
 #else
     m_mode = Mode_SDI;
 #endif
@@ -92,6 +102,7 @@
 namespace CmdLineOption
 {
 
+const char * const AUI_MDI = "aui_mdi";
 const char * const MDI = "mdi";
 const char * const SDI = "sdi";
 const char * const SINGLE = "single";
@@ -102,6 +113,8 @@
 {
     wxApp::OnInitCmdLine(parser);
 
+    parser.AddSwitch("", CmdLineOption::AUI_MDI,
+                     "run in AUI MDI mode: multiple documents, single window, with AUI framework");
     parser.AddSwitch("", CmdLineOption::MDI,
                      "run in MDI mode: multiple documents, single window");
     parser.AddSwitch("", CmdLineOption::SDI,
@@ -115,6 +128,13 @@
     int numModeOptions = 0;
 
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( parser.Found(CmdLineOption::AUI_MDI) )
+    {
+        m_mode = Mode_AUI_MDI;
+        numModeOptions++;
+    }
+#endif
     if ( parser.Found(CmdLineOption::MDI) )
     {
         m_mode = Mode_MDI;
@@ -187,6 +207,16 @@
     // create the main frame window
     wxFrame *frame;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( m_mode == Mode_AUI_MDI )
+    {
+        frame = new wxAuiDocMDIParentFrame(docManager, NULL, wxID_ANY,
+                                           GetAppDisplayName(),
+                                           wxDefaultPosition,
+                                           wxSize(500, 400));
+    }
+    else
+#endif //wxUSE_AUI
     if ( m_mode == Mode_MDI )
     {
         frame = new wxDocMDIParentFrame(docManager, NULL, wxID_ANY,
@@ -290,6 +320,22 @@
     // create a child frame of appropriate class for the current mode
     wxFrame *subframe;
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+    if ( GetMode() == Mode_AUI_MDI )
+    {
+        subframe = new wxAuiDocMDIChildFrame
+                       (
+                            doc,
+                            view,
+                            wxStaticCast(GetTopWindow(), wxAuiDocMDIParentFrame),
+                            wxID_ANY,
+                            "Child Frame",
+                            wxDefaultPosition,
+                            wxSize(300, 300)
+                       );
+    }
+    else
+#endif //wxUSE_AUI
     if ( GetMode() == Mode_MDI )
     {
         subframe = new wxDocMDIChildFrame
@@ -357,6 +403,11 @@
     switch ( m_mode )
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        case Mode_AUI_MDI:
+            modeName = "AUI_MDI";
+            break;
+#endif
         case Mode_MDI:
             modeName = "MDI";
             break;
@@ -379,9 +430,9 @@
         "This is the wxWidgets Document/View Sample\n"
         "running in %s mode.\n"
         "\n"
-        "Authors: Julian Smart, Vadim Zeitlin\n"
+        "Authors: Julian Smart, Vadim Zeitlin, Kinaou Hervé\n"
         "\n"
-        "Usage: docview [--{mdi,sdi,single}]",
+        "Usage: docview [--{aui_mdi,mdi,sdi,single}]",
         modeName
     );
 }
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 65859)
+++ samples/docview/docview.h	(working copy)
@@ -3,6 +3,7 @@
 // Purpose:     Document/view demo
 // Author:      Julian Smart
 // Modified by: Vadim Zeitlin: merge with the MDI version and general cleanup
+//              Kinaou Hervé: added the AUI MDI framework management
 // Created:     04/01/98
 // RCS-ID:      $Id$
 // Copyright:   (c) 1998 Julian Smart
@@ -27,6 +28,9 @@
     enum Mode
     {
 #if wxUSE_MDI_ARCHITECTURE
+#if wxUSE_AUI
+        Mode_AUI_MDI,// AUI MDI mode: multiple documents, single top level window with AUI framework
+#endif
         Mode_MDI,   // MDI mode: multiple documents, single top level window
 #endif // wxUSE_MDI_ARCHITECTURE
         Mode_SDI,   // SDI mode: multiple documents, multiple top level windows
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 65859)
+++ src/aui/framemanager.cpp	(working copy)
@@ -900,7 +900,7 @@
 
     if (m_frame->IsKindOf(CLASSINFO(wxMDIParentFrame)))
     {
-        wxMDIParentFrame* mdi_frame = (wxMDIParentFrame*)m_frame;
+        wxMDIParentFrame* mdi_frame = wxDynamicCast(m_frame, wxMDIParentFrame);
         wxWindow* client_window = mdi_frame->GetClientWindow();
 
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
@@ -911,8 +911,9 @@
     }
     else if (m_frame->IsKindOf(CLASSINFO(wxAuiMDIParentFrame)))
     {
-        wxAuiMDIParentFrame* mdi_frame = (wxAuiMDIParentFrame*)m_frame;
-        wxAuiMDIClientWindow* client_window = mdi_frame->GetClientWindow();
+        wxAuiMDIParentFrame* mdi_frame = wxDynamicCast(m_frame, wxAuiMDIParentFrame);
+        wxWindow* client_window = mdi_frame->GetClientWindow();
+
         wxASSERT_MSG(client_window, wxT("Client window is NULL!"));
 
         AddPane(client_window,
@@ -1362,7 +1363,7 @@
     for (i = 0, pane_count = m_panes.GetCount(); i < pane_count; ++i)
     {
         wxAuiPaneInfo& p = m_panes.Item(i);
-        if (!p.IsToolbar())
+        if (!p.IsToolbar() && !p.IsFloating())
         {
             p.SetFlag(wxAuiPaneInfo::optionHidden,
                       p.HasFlag(wxAuiPaneInfo::savedHiddenState));
Index: src/aui/tabdocmdi.cpp
===================================================================
--- src/aui/tabdocmdi.cpp	(revision 0)
+++ src/aui/tabdocmdi.cpp	(revision 0)
@@ -0,0 +1,175 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.cpp
+// Purpose:     Frame classes for MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_AUI
+#if wxUSE_MDI
+
+#include "wx/aui/tabdocmdi.h"
+
+/*
+ * Docview Aui MDI parent frame
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+
+BEGIN_EVENT_TABLE(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+    EVT_CLOSE(wxAuiDocMDIParentFrame::OnCloseWindow)
+END_EVENT_TABLE()
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame(wxDocManager *manager,
+                                               wxFrame *parent,
+                                               wxWindowID id,
+                                               const wxString& title,
+                                               const wxPoint& pos,
+                                               const wxSize& size,
+                                               long style,
+                                               const wxString& name)
+{
+    Create(manager, parent, id, title, pos, size, style, name);
+}
+
+bool wxAuiDocMDIParentFrame::Create(wxDocManager *manager,
+                                    wxFrame *frame,
+                                    wxWindowID id,
+                                    const wxString& title,
+                                    const wxPoint& pos,
+                                    const wxSize& size,
+                                    long style,
+                                    const wxString& name)
+{
+    if (wxAuiDocMDIParentFrameBase::Create(manager, frame, id, title, pos, size, style, name))
+    {
+        GetAuiMDIClientWindow()->Connect(GetAuiMDIClientWindow()->GetId(),
+            wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+            wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged),
+            NULL,
+            this);
+
+        return true;
+    }
+
+    return false;
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIParentFrame::TryBefore(wxEvent& event)
+{
+#if wxUSE_MENUS
+    // Catch the events of kind wxID_CLOSE[_ALL] to send the appropriate tabmdi event
+    if (event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+    {
+        if (event.GetId() == wxID_CLOSE)
+            event.SetId(wxWINDOWCLOSE);
+        else if (event.GetId() == wxID_CLOSE_ALL)
+            event.SetId(wxWINDOWCLOSEALL);
+    }
+#endif //wxUSE_MENUS
+
+    return wxAuiDocMDIParentFrameBase::TryBefore(event);
+}
+
+void wxAuiDocMDIParentFrame::OnNotebookPageChanged(wxAuiNotebookEvent &event)
+{
+    wxWindow *selWnd = GetAuiMDIClientWindow()->GetPage(event.GetSelection());
+    if (selWnd && selWnd->IsKindOf(CLASSINFO(wxAuiDocMDIChildFrame)))
+    {
+        wxAuiDocMDIChildFrame *selFrm = wxDynamicCast(selWnd, wxAuiDocMDIChildFrame);
+        if (selFrm && selFrm->GetView())
+            selFrm->GetView()->Activate(true);
+    }
+    event.Skip(true);
+}
+
+void wxAuiDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    wxCommandEvent eventCloseAll(wxEVT_COMMAND_MENU_SELECTED, wxWINDOWCLOSEALL);
+    eventCloseAll.Skip();
+    DoHandleMenu(eventCloseAll);
+
+    if (eventCloseAll.GetSkipped())
+    {
+        GetAuiMDIClientWindow()->Disconnect(GetAuiMDIClientWindow()->GetId(),
+            wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED,
+            wxAuiNotebookEventHandler(wxAuiDocMDIParentFrame::OnNotebookPageChanged),
+            NULL,
+            this);
+
+        wxAuiMDIParentFrame::OnCloseWindow(event);
+    }
+}
+
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+{
+    switch (event.GetId())
+    {
+    case wxWINDOWCLOSEALL:
+        while (m_currentChild)
+        {
+            if (!m_currentChild->Close())
+            {
+                event.Skip(false);
+                return; // failure
+            }
+        }
+        break;
+    default:
+        wxAuiMDIParentFrame::DoHandleMenu(event);
+    }
+}
+#endif // wxUSE_MENUS
+
+
+/*
+ * Default document child frame for Aui MDI children
+ */
+
+IMPLEMENT_CLASS(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+
+wxAuiDocMDIChildFrame::wxAuiDocMDIChildFrame(wxDocument *doc,
+                                             wxView *view,
+                                             wxAuiMDIParentFrame *parent,
+                                             wxWindowID id,
+                                             const wxString& title,
+                                             const wxPoint& pos,
+                                             const wxSize& size,
+                                             long style,
+                                             const wxString& name)
+{
+    Create(doc, view, parent, id, title, pos, size, style, name);
+}
+
+bool wxAuiDocMDIChildFrame::Create(wxDocument *doc,
+                                   wxView *view,
+                                   wxAuiMDIParentFrame *parent,
+                                   wxWindowID id,
+                                   const wxString& title,
+                                   const wxPoint& pos,
+                                   const wxSize& size,
+                                   long style,
+                                   const wxString& name)
+{
+    return wxAuiDocMDIChildFrameBase::Create(doc, view, parent, id, title, pos, size, style, name);
+}
+
+#endif
+    //wxUSE_AUI
+#endif
+    // wxUSE_MDI
+
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 65859)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -39,30 +39,25 @@
 
 #include "wx/stockitem.h"
 
-enum MDI_MENU_ID
-{
-    wxWINDOWCLOSE = 4001,
-    wxWINDOWCLOSEALL,
-    wxWINDOWNEXT,
-    wxWINDOWPREV
-};
-
 //-----------------------------------------------------------------------------
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxFrame)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxMDIParentFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxFrame)
+BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxMDIParentFrameBase)
 #if wxUSE_MENUS
-    EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::DoHandleMenu)
+    EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::OnHandleMenu)
 #endif
 END_EVENT_TABLE()
 
 wxAuiMDIParentFrame::wxAuiMDIParentFrame()
-{
-    Init();
-}
+    : m_pLastEvt(NULL)
+#if wxUSE_MENUS
+    , m_pMyMenuBar(NULL)
+#endif // wxUSE_MENUS
+    , m_pAuiClientWindow(NULL)
+{}
 
 wxAuiMDIParentFrame::wxAuiMDIParentFrame(wxWindow *parent,
                                          wxWindowID id,
@@ -71,20 +66,23 @@
                                          const wxSize& size,
                                          long style,
                                          const wxString& name)
+    : m_pLastEvt(NULL)
+#if wxUSE_MENUS
+    , m_pMyMenuBar(NULL)
+#endif // wxUSE_MENUS
+    , m_pAuiClientWindow(NULL)
 {
-    Init();
     (void)Create(parent, id, title, pos, size, style, name);
 }
 
 wxAuiMDIParentFrame::~wxAuiMDIParentFrame()
 {
     // Make sure the client window is destructed before the menu bars are!
-    wxDELETE(m_pClientWindow);
+    //wxDELETE(m_clientWindow);
 
 #if wxUSE_MENUS
     wxDELETE(m_pMyMenuBar);
     RemoveWindowMenu(GetMenuBar());
-    wxDELETE(m_pWindowMenu);
 #endif // wxUSE_MENUS
 }
 
@@ -101,61 +99,52 @@
     // "Window" menu
     if (!(style & wxFRAME_NO_WINDOW_MENU))
     {
-        m_pWindowMenu = new wxMenu;
-        m_pWindowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
-        m_pWindowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
-        m_pWindowMenu->AppendSeparator();
-        m_pWindowMenu->Append(wxWINDOWNEXT,     _("&Next"));
-        m_pWindowMenu->Append(wxWINDOWPREV,     _("&Previous"));
+        m_windowMenu = new wxMenu;
+        m_windowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
+        m_windowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
+        m_windowMenu->AppendSeparator();
+        m_windowMenu->Append(wxWINDOWNEXT,     _("&Next"));
+        m_windowMenu->Append(wxWINDOWPREV,     _("&Previous"));
     }
 #endif // wxUSE_MENUS
 
-    if ( !wxFrame::Create(parent, id, title, pos, size, style, name) )
+    if ( !wxMDIParentFrameBase::Create(parent, id, title, pos, size, style, name) )
         return false;
 
-    m_pClientWindow = OnCreateClient();
-    return m_pClientWindow != NULL;
+    m_clientWindow = OnCreateClient();
+    return m_clientWindow != NULL;
 }
 
 
 void wxAuiMDIParentFrame::SetArtProvider(wxAuiTabArt* provider)
 {
-    if (m_pClientWindow)
-    {
-        m_pClientWindow->SetArtProvider(provider);
-    }
+    if (GetAuiMDIClientWindow())
+        GetAuiMDIClientWindow()->SetArtProvider(provider);
 }
 
 wxAuiTabArt* wxAuiMDIParentFrame::GetArtProvider()
 {
-    if (!m_pClientWindow)
+    if (!GetAuiMDIClientWindow())
         return NULL;
 
-    return m_pClientWindow->GetArtProvider();
+    return GetAuiMDIClientWindow()->GetArtProvider();
 }
 
-wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
-{
-    return static_cast<wxAuiNotebook*>(m_pClientWindow);
-}
-
-
-
 #if wxUSE_MENUS
 void wxAuiMDIParentFrame::SetWindowMenu(wxMenu* pMenu)
 {
     // Replace the window menu from the currently loaded menu bar.
     wxMenuBar *pMenuBar = GetMenuBar();
 
-    if (m_pWindowMenu)
+    if (m_windowMenu)
     {
         RemoveWindowMenu(pMenuBar);
-        wxDELETE(m_pWindowMenu);
+        wxDELETE(m_windowMenu);
     }
 
     if (pMenu)
     {
-        m_pWindowMenu = pMenu;
+        m_windowMenu = pMenu;
         AddWindowMenu(pMenuBar);
     }
 }
@@ -168,7 +157,7 @@
     // Add the Window menu to the new menu bar.
     AddWindowMenu(pMenuBar);
 
-    wxFrame::SetMenuBar(pMenuBar);
+    wxMDIParentFrameBase::SetMenuBar(pMenuBar);
     //m_pMyMenuBar = GetMenuBar();
 }
 #endif // wxUSE_MENUS
@@ -201,6 +190,11 @@
 #endif // wxUSE_MENUS
 }
 
+wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
+{
+    return GetAuiMDIClientWindow()->GetNotebook();
+}
+
 bool wxAuiMDIParentFrame::ProcessEvent(wxEvent& event)
 {
     // stops the same event being processed repeatedly
@@ -208,28 +202,32 @@
         return false;
     m_pLastEvt = &event;
 
-    // let the active child (if any) process the event first.
     bool res = false;
-    if (m_pActiveChild &&
-        event.IsCommandEvent() &&
-        event.GetEventObject() != m_pClientWindow &&
-           !(event.GetEventType() == wxEVT_ACTIVATE ||
-             event.GetEventType() == wxEVT_SET_FOCUS ||
-             event.GetEventType() == wxEVT_KILL_FOCUS ||
-             event.GetEventType() == wxEVT_CHILD_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
-       )
-    {
-        res = m_pActiveChild->GetEventHandler()->ProcessEvent(event);
-    }
 
-    if (!res)
+    //Do not treat the events which cause the arbitrary selection of the first
+    //notebook tab when the parent frame is restored from minimized state
+    if (!(event.GetEventType() == wxEVT_ACTIVATE ||
+          event.GetEventType() == wxEVT_SET_FOCUS ||
+          event.GetEventType() == wxEVT_KILL_FOCUS ||
+          event.GetEventType() == wxEVT_CHILD_FOCUS ||
+          event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
+          event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS) )
     {
-        // if the event was not handled this frame will handle it,
-        // which is why we need the protection code at the beginning
-        // of this method
-        res = wxEvtHandler::ProcessEvent(event);
+        // let the active child (if any) process the event first.
+        if (m_currentChild &&
+            event.IsCommandEvent() &&
+            (event.GetEventObject() != m_clientWindow->GetMDIClientWindow()) )
+        {
+            res = m_currentChild->GetEventHandler()->ProcessEvent(event);
+        }
+
+        if (!res)
+        {
+            // if the event was not handled this frame will handle it,
+            // which is why we need the protection code at the beginning
+            // of this method
+            res = wxEvtHandler::ProcessEvent(event);
+        }
     }
 
     m_pLastEvt = NULL;
@@ -237,72 +235,41 @@
     return res;
 }
 
-wxAuiMDIChildFrame *wxAuiMDIParentFrame::GetActiveChild() const
-{
-    return m_pActiveChild;
-}
-
-void wxAuiMDIParentFrame::SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
-{
-    m_pActiveChild = pChildFrame;
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::GetClientWindow() const
-{
-    return m_pClientWindow;
-}
-
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::OnCreateClient()
-{
-    return new wxAuiMDIClientWindow( this );
-}
-
 void wxAuiMDIParentFrame::ActivateNext()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if (GetAuiMDIClientWindow() && GetAuiMDIClientWindow()->GetSelection() != wxNOT_FOUND)
     {
-        size_t active = m_pClientWindow->GetSelection() + 1;
-        if (active >= m_pClientWindow->GetPageCount())
+        size_t active = GetAuiMDIClientWindow()->GetSelection() + 1;
+        if (active >= GetAuiMDIClientWindow()->GetPageCount())
             active = 0;
 
-        m_pClientWindow->SetSelection(active);
+        GetAuiMDIClientWindow()->SetSelection(active);
     }
 }
 
 void wxAuiMDIParentFrame::ActivatePrevious()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if (GetAuiMDIClientWindow() && GetAuiMDIClientWindow()->GetSelection() != wxNOT_FOUND)
     {
-        int active = m_pClientWindow->GetSelection() - 1;
+        int active = GetAuiMDIClientWindow()->GetSelection() - 1;
         if (active < 0)
-            active = m_pClientWindow->GetPageCount() - 1;
+            active = GetAuiMDIClientWindow()->GetPageCount() - 1;
 
-        m_pClientWindow->SetSelection(active);
+        GetAuiMDIClientWindow()->SetSelection(active);
     }
 }
 
-void wxAuiMDIParentFrame::Init()
-{
-    m_pLastEvt = NULL;
-    m_pClientWindow = NULL;
-    m_pActiveChild = NULL;
 #if wxUSE_MENUS
-    m_pWindowMenu = NULL;
-    m_pMyMenuBar = NULL;
-#endif // wxUSE_MENUS
-}
-
-#if wxUSE_MENUS
 void wxAuiMDIParentFrame::RemoveWindowMenu(wxMenuBar* pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         // Remove old window menu
         int pos = pMenuBar->FindMenu(_("&Window"));
         if (pos != wxNOT_FOUND)
         {
             // DBG:: We're going to delete the wrong menu!!!
-            wxASSERT(m_pWindowMenu == pMenuBar->GetMenu(pos));
+            wxASSERT(m_windowMenu == pMenuBar->GetMenu(pos));
             pMenuBar->Remove(pos);
         }
     }
@@ -310,13 +277,13 @@
 
 void wxAuiMDIParentFrame::AddWindowMenu(wxMenuBar *pMenuBar)
 {
-    if (pMenuBar && m_pWindowMenu)
+    if (pMenuBar && m_windowMenu)
     {
         int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,wxSTOCK_NOFLAGS));
         if (pos == wxNOT_FOUND)
-            pMenuBar->Append(m_pWindowMenu, _("&Window"));
+            pMenuBar->Append(m_windowMenu, _("&Window"));
         else
-            pMenuBar->Insert(pos, m_pWindowMenu, _("&Window"));
+            pMenuBar->Insert(pos, m_windowMenu, _("&Window"));
     }
 }
 
@@ -325,17 +292,12 @@
     switch (event.GetId())
     {
         case wxWINDOWCLOSE:
-            if (m_pActiveChild)
-                m_pActiveChild->Close();
+            if (m_currentChild)
+                m_currentChild->Close();
             break;
         case wxWINDOWCLOSEALL:
-            while (m_pActiveChild)
-            {
-                if (!m_pActiveChild->Close())
-                {
-                    return; // failure
-                }
-            }
+            while (m_currentChild)
+                if (!m_currentChild->Close()) { return; }// failure
             break;
         case wxWINDOWNEXT:
             ActivateNext();
@@ -356,20 +318,19 @@
 
 void wxAuiMDIParentFrame::Tile(wxOrientation orient)
 {
-    wxAuiMDIClientWindow* client_window = GetClientWindow();
-    wxASSERT_MSG(client_window, wxT("Missing MDI Client Window"));
+    wxASSERT_MSG(GetAuiMDIClientWindow(), wxT("Missing MDI Client Window"));
 
-    int cur_idx = client_window->GetSelection();
+    int cur_idx = GetAuiMDIClientWindow()->GetSelection();
     if (cur_idx == -1)
         return;
 
     if (orient == wxVERTICAL)
     {
-        client_window->Split(cur_idx, wxLEFT);
+        GetAuiMDIClientWindow()->Split(cur_idx, wxLEFT);
     }
     else if (orient == wxHORIZONTAL)
     {
-        client_window->Split(cur_idx, wxTOP);
+        GetAuiMDIClientWindow()->Split(cur_idx, wxTOP);
     }
 }
 
@@ -378,58 +339,61 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxPanel)
+IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxMDIChildFrameBase)
 
-BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxPanel)
+BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxMDIChildFrameBase)
     EVT_MENU_HIGHLIGHT_ALL(wxAuiMDIChildFrame::OnMenuHighlight)
-    EVT_ACTIVATE(wxAuiMDIChildFrame::OnActivate)
-    EVT_CLOSE(wxAuiMDIChildFrame::OnCloseWindow)
 END_EVENT_TABLE()
 
 wxAuiMDIChildFrame::wxAuiMDIChildFrame()
-{
-    Init();
-}
+    : m_doActivate(true)
+    , m_activate_on_create(true)
+#if wxUSE_MENUS
+    , m_pMenuBar(NULL)
+#endif // wxUSE_MENUS
+    , m_pMDIParentFrame(NULL)
+{}
 
 wxAuiMDIChildFrame::wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent,
-                                       wxWindowID id,
+                                       wxWindowID winid,
                                        const wxString& title,
                                        const wxPoint& WXUNUSED(pos),
                                        const wxSize& size,
-                                       long style,
+                                       long WXUNUSED(style),
                                        const wxString& name)
+    : m_doActivate(true)
+    , m_activate_on_create(true)
+#if wxUSE_MENUS
+    , m_pMenuBar(NULL)
+#endif // wxUSE_MENUS
+    , m_pMDIParentFrame(NULL)
 {
-    Init();
-
-    // There are two ways to create an tabbed mdi child fram without
+    // There are two ways to create an tabbed MDI child frame without
     // making it the active document.  Either Show(false) can be called
     // before Create() (as is customary on some ports with wxFrame-type
     // windows), or wxMINIMIZE can be passed in the style flags.  Note that
     // wxAuiMDIChildFrame is not really derived from wxFrame, as wxMDIChildFrame
-    // is, but those are the expected symantics.  No style flag is passed
+    // is, but those are the expected semantics.  No style flag is passed
     // onto the panel underneath.
-    if (style & wxMINIMIZE)
-        m_activate_on_create = false;
-
-    Create(parent, id, title, wxDefaultPosition, size, 0, name);
+    Create(parent, winid, title, wxDefaultPosition, size, 0, name);
 }
 
 wxAuiMDIChildFrame::~wxAuiMDIChildFrame()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    if (pParentFrame)
+    if (GetAuiMDIParentFrame())
     {
-        if (pParentFrame->GetActiveChild() == this)
+        if (GetAuiMDIParentFrame()->GetActiveChild() == this)
         {
-            pParentFrame->SetActiveChild(NULL);
-            pParentFrame->SetChildMenuBar(NULL);
+            m_doActivate = false;
+
+            GetAuiMDIParentFrame()->SetActiveChild(NULL);
+            GetAuiMDIParentFrame()->SetChildMenuBar(NULL);
         }
-        wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-        wxASSERT(pClientWindow);
-        int idx = pClientWindow->GetPageIndex(this);
+        wxASSERT(GetAuiMDIParentFrame()->GetAuiMDIClientWindow());
+        int idx = GetAuiMDIParentFrame()->GetAuiMDIClientWindow()->GetPageIndex(this);
         if (idx != wxNOT_FOUND)
         {
-            pClientWindow->RemovePage(idx);
+            GetAuiMDIParentFrame()->GetAuiMDIClientWindow()->RemovePage(idx);
         }
     }
 
@@ -438,64 +402,69 @@
 #endif // wxUSE_MENUS
 }
 
-bool wxAuiMDIChildFrame::Create(wxAuiMDIParentFrame* parent,
-                                wxWindowID id,
+bool wxAuiMDIChildFrame::Create(wxAuiMDIParentFrame *parent,
+                                wxWindowID winid,
                                 const wxString& title,
                                 const wxPoint& WXUNUSED(pos),
                                 const wxSize& size,
                                 long style,
                                 const wxString& name)
 {
-    wxAuiMDIClientWindow* pClientWindow = parent->GetClientWindow();
-    wxASSERT_MSG((pClientWindow != NULL), wxT("Missing MDI client window."));
+    wxASSERT_MSG(parent->GetClientWindow(), wxT("Missing MDI client window."));
 
     // see comment in constructor
     if (style & wxMINIMIZE)
         m_activate_on_create = false;
 
-    wxSize cli_size = pClientWindow->GetClientSize();
+    wxSize cli_size;
+    if (parent->GetClientWindow())
+        cli_size = parent->GetClientWindow()->GetClientSize();
 
     // create the window off-screen to prevent flicker
-    wxPanel::Create(pClientWindow,
-                    id,
-                    wxPoint(cli_size.x+1, cli_size.y+1),
-                    size,
-                    wxNO_BORDER, name);
+    wxMDIChildFrameBase::Create(parent,
+                                winid,
+                                title,
+                                wxPoint(cli_size.x+1, cli_size.y+1),
+                                size,
+                                wxNO_BORDER,
+                                name);
 
     DoShow(false);
 
-    SetMDIParentFrame(parent);
+    m_mdiParent = m_pMDIParentFrame = parent;
 
     // this is the currently active child
     parent->SetActiveChild(this);
 
     m_title = title;
 
-    pClientWindow->AddPage(this, title, m_activate_on_create);
-    pClientWindow->Refresh();
+    parent->GetAuiMDIClientWindow()->AddPage(this, title, m_activate_on_create);
+    parent->GetAuiMDIClientWindow()->Refresh();
 
     return true;
 }
 
 bool wxAuiMDIChildFrame::Destroy()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(GetAuiMDIParentFrame(),
+        wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(GetAuiMDIParentFrame()->GetAuiMDIClientWindow(),
+        wxT("Missing MDI Client Window"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    wxASSERT_MSG(pClientWindow, wxT("Missing MDI Client Window"));
-
-    if (pParentFrame->GetActiveChild() == this)
+    if (GetAuiMDIParentFrame()->GetActiveChild() == this)
     {
         // deactivate ourself
         wxActivateEvent event(wxEVT_ACTIVATE, false, GetId());
         event.SetEventObject(this);
         GetEventHandler()->ProcessEvent(event);
+        m_doActivate = false;
 
-        pParentFrame->SetActiveChild(NULL);
-        pParentFrame->SetChildMenuBar(NULL);
+        GetAuiMDIParentFrame()->SetActiveChild(NULL);
+        GetAuiMDIParentFrame()->SetChildMenuBar(NULL);
     }
 
+    wxAuiMDIClientWindow *pClientWindow =
+        GetAuiMDIParentFrame()->GetAuiMDIClientWindow();
     size_t page_count = pClientWindow->GetPageCount();
     for (size_t pos = 0; pos < page_count; pos++)
     {
@@ -514,16 +483,15 @@
 
     if (m_pMenuBar)
     {
-        wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-        wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+        wxASSERT_MSG(GetAuiMDIParentFrame(), wxT("Missing MDI Parent Frame"));
 
-        m_pMenuBar->SetParent(pParentFrame);
-        if (pParentFrame->GetActiveChild() == this)
+        m_pMenuBar->SetParent(GetAuiMDIParentFrame());
+        if (GetAuiMDIParentFrame()->GetActiveChild() == this)
         {
             // replace current menu bars
             if (pOldMenuBar)
-                pParentFrame->SetChildMenuBar(NULL);
-            pParentFrame->SetChildMenuBar(this);
+                GetAuiMDIParentFrame()->SetChildMenuBar(NULL);
+            GetAuiMDIParentFrame()->SetChildMenuBar(this);
         }
     }
 }
@@ -538,11 +506,10 @@
 {
     m_title = title;
 
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(GetAuiMDIParentFrame(), wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    if (pClientWindow != NULL)
+    wxAuiMDIClientWindow *pClientWindow = GetAuiMDIParentFrame()->GetAuiMDIClientWindow();
+    if (pClientWindow)
     {
         size_t pos;
         for (pos = 0; pos < pClientWindow->GetPageCount(); pos++)
@@ -575,16 +542,15 @@
 
 void wxAuiMDIChildFrame::SetIcon(const wxIcon& icon)
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(GetAuiMDIParentFrame(), wxT("Missing MDI Parent Frame"));
 
     m_icon = icon;
 
     wxBitmap bmp;
     bmp.CopyFromIcon(m_icon);
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    if (pClientWindow != NULL)
+    wxAuiMDIClientWindow *pClientWindow = GetAuiMDIParentFrame()->GetAuiMDIClientWindow();
+    if (pClientWindow)
     {
         int idx = pClientWindow->GetPageIndex(this);
 
@@ -603,12 +569,10 @@
 
 void wxAuiMDIChildFrame::Activate()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxASSERT_MSG(GetAuiMDIParentFrame(), wxT("Missing MDI Parent Frame"));
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-
-    if (pClientWindow != NULL)
+    wxAuiMDIClientWindow *pClientWindow = GetAuiMDIParentFrame()->GetAuiMDIClientWindow();
+    if (pClientWindow)
     {
         size_t pos;
         for (pos = 0; pos < pClientWindow->GetPageCount(); pos++)
@@ -625,46 +589,23 @@
 void wxAuiMDIChildFrame::OnMenuHighlight(wxMenuEvent& event)
 {
 #if wxUSE_STATUSBAR
-    if (m_pMDIParentFrame)
+    if (m_mdiParent)
     {
         // we don't have any help text for this item,
         // but may be the MDI frame does?
-        m_pMDIParentFrame->OnMenuHighlight(event);
+        m_mdiParent->OnMenuHighlight(event);
     }
 #else
     wxUnusedVar(event);
 #endif // wxUSE_STATUSBAR
 }
 
-void wxAuiMDIChildFrame::OnActivate(wxActivateEvent& WXUNUSED(event))
+void wxAuiMDIChildFrame::OnActivate(wxActivateEvent& evt)
 {
-    // do nothing
+    if (m_doActivate)
+        DoActivate(evt);
 }
 
-void wxAuiMDIChildFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
-{
-    Destroy();
-}
-
-void wxAuiMDIChildFrame::SetMDIParentFrame(wxAuiMDIParentFrame* parentFrame)
-{
-    m_pMDIParentFrame = parentFrame;
-}
-
-wxAuiMDIParentFrame* wxAuiMDIChildFrame::GetMDIParentFrame() const
-{
-    return m_pMDIParentFrame;
-}
-
-void wxAuiMDIChildFrame::Init()
-{
-    m_activate_on_create = true;
-    m_pMDIParentFrame = NULL;
-#if wxUSE_MENUS
-    m_pMenuBar = NULL;
-#endif // wxUSE_MENUS
-}
-
 bool wxAuiMDIChildFrame::Show(bool show)
 {
     m_activate_on_create = show;
@@ -682,7 +623,7 @@
 {
     m_mdi_newrect = wxRect(x, y, width, height);
 #ifdef __WXGTK__
-    wxPanel::DoSetSize(x,y,width, height, sizeFlags);
+    wxMDIChildFrameBase::DoSetSize(x,y,width, height, sizeFlags);
 #else
     wxUnusedVar(sizeFlags);
 #endif
@@ -697,7 +638,7 @@
 {
     if (m_mdi_currect != m_mdi_newrect)
     {
-        wxPanel::DoMoveWindow(m_mdi_newrect.x, m_mdi_newrect.y,
+        wxMDIChildFrameBase::DoMoveWindow(m_mdi_newrect.x, m_mdi_newrect.y,
                               m_mdi_newrect.width, m_mdi_newrect.height);
         m_mdi_currect = m_mdi_newrect;
     }
@@ -716,10 +657,6 @@
     EVT_SIZE(wxAuiMDIClientWindow::OnSize)
 END_EVENT_TABLE()
 
-wxAuiMDIClientWindow::wxAuiMDIClientWindow()
-{
-}
-
 wxAuiMDIClientWindow::wxAuiMDIClientWindow(wxAuiMDIParentFrame* parent, long style)
 {
     CreateClient(parent, style);
@@ -730,7 +667,7 @@
     DestroyChildren();
 }
 
-bool wxAuiMDIClientWindow::CreateClient(wxAuiMDIParentFrame* parent, long style)
+bool wxAuiMDIClientWindow::CreateClient(wxMDIParentFrameBase* parent, long style)
 {
     SetWindowStyleFlag(style);
 
@@ -798,10 +735,10 @@
         event.SetEventObject(active_child);
         active_child->GetEventHandler()->ProcessEvent(event);
 
-        if (active_child->GetMDIParentFrame())
+        if (active_child->GetAuiMDIParentFrame())
         {
-            active_child->GetMDIParentFrame()->SetActiveChild(active_child);
-            active_child->GetMDIParentFrame()->SetChildMenuBar(active_child);
+            active_child->GetAuiMDIParentFrame()->SetActiveChild(active_child);
+            active_child->GetAuiMDIParentFrame()->SetChildMenuBar(active_child);
         }
     }
 

--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(working copy)
@@ -26,8 +26,85 @@
 // An MDI document parent frame for AUI framework
 // ----------------------------------------------------------------------------
 
-typedef
-  wxDocParentFrameAny<wxAuiMDIParentFrame> wxAuiDocMDIParentFrameBase;
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrameBase : public wxAuiMDIParentFrame,
+                                             public wxDocParentFrameAnyBase
+{
+public:
+    wxAuiDocMDIParentFrameBase() { }
+    wxAuiDocMDIParentFrameBase(wxDocManager *manager,
+                        wxFrame *frame,
+                        wxWindowID id,
+                        const wxString& title,
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxDefaultSize,
+                        long style = wxDEFAULT_FRAME_STYLE,
+                        const wxString& name = wxFrameNameStr)
+    {
+        Create(manager, frame, id, title, pos, size, style, name);
+    }
+
+    bool Create(wxDocManager *manager,
+                wxFrame *frame,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr)
+    {
+        m_docManager = manager;
+
+        if ( !wxAuiMDIParentFrame::Create(frame, id, title, pos, size, style, name) )
+            return false;
+
+        this->Connect(wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED,
+                      wxCommandEventHandler(wxAuiDocMDIParentFrameBase::OnExit));
+        this->Connect(wxEVT_CLOSE_WINDOW,
+                      wxCloseEventHandler(wxAuiDocMDIParentFrameBase::OnCloseWindow));
+
+        return true;
+    }
+
+protected:
+    // hook the document manager into event handling chain here
+    virtual bool TryBefore(wxEvent& event)
+    {
+        if ( m_docManager && m_docManager->ProcessEventLocally(event) )
+            return true;
+
+        return wxAuiMDIParentFrame::TryBefore(event);
+    }
+
+    virtual void OnExit(wxCommandEvent& WXUNUSED(event))
+    {
+        this->Close();
+    }
+
+    virtual void OnCloseWindow(wxCloseEvent& event)
+    {
+        if ( m_docManager && !m_docManager->Clear(!event.CanVeto()) )
+        {
+            // The user decided not to close finally, abort.
+            event.Veto();
+        }
+        else
+        {
+            // Just skip the event, base class handler will destroy the window.
+            event.Skip();
+        }
+    }
+
+
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIParentFrameBase);
+};
+
+
+
+
+
+
+
+
 
 class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame : public wxAuiDocMDIParentFrameBase
 {
@@ -76,8 +153,93 @@
 // An MDI document child frame for AUI framework
 // ----------------------------------------------------------------------------
 
-typedef
-  wxDocChildFrameAny<wxAuiMDIChildFrame, wxAuiMDIParentFrame> wxAuiDocMDIChildFrameBase;
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrameBase : public wxAuiMDIChildFrame,
+                                            public wxDocChildFrameAnyBase
+{
+public:
+    typedef wxAuiMDIChildFrame BaseClass;
+
+    // default ctor, use Create after it
+    wxAuiDocMDIChildFrameBase() { }
+
+    // ctor for a frame showing the given view of the specified document
+    wxAuiDocMDIChildFrameBase(wxDocument *doc,
+                       wxView *view,
+                       wxAuiMDIParentFrame *parent,
+                       wxWindowID id,
+                       const wxString& title,
+                       const wxPoint& pos = wxDefaultPosition,
+                       const wxSize& size = wxDefaultSize,
+                       long style = wxDEFAULT_FRAME_STYLE,
+                       const wxString& name = wxFrameNameStr)
+    {
+        Create(doc, view, parent, id, title, pos, size, style, name);
+    }
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiMDIParentFrame *parent,
+                wxWindowID id,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr)
+    {
+        if ( !wxDocChildFrameAnyBase::Create(doc, view, this) )
+            return false;
+
+        if ( !BaseClass::Create(parent, id, title, pos, size, style, name) )
+            return false;
+
+        this->Connect(wxEVT_ACTIVATE,
+                      wxActivateEventHandler(wxAuiDocMDIChildFrameBase::OnActivate));
+        this->Connect(wxEVT_CLOSE_WINDOW,
+                      wxCloseEventHandler(wxAuiDocMDIChildFrameBase::OnCloseWindow));
+
+        return true;
+    }
+
+    virtual bool Destroy()
+    {
+        // FIXME: why exactly do we do this? to avoid activation events during
+        //        destructions maybe?
+        m_childView = NULL;
+        return BaseClass::Destroy();
+    }
+
+protected:
+    // hook the child view into event handlers chain here
+    virtual bool TryBefore(wxEvent& event)
+    {
+        return TryProcessEvent(event) || BaseClass::TryBefore(event);
+    }
+
+private:
+    void OnActivate(wxActivateEvent& event)
+    {
+        BaseClass::OnActivate(event);
+
+        if ( m_childView && event.GetSkipped())
+            m_childView->Activate(event.GetActive());
+    }
+
+    void OnCloseWindow(wxCloseEvent& event)
+    {
+        if ( CloseView(event) )
+            Destroy();
+        //else: vetoed
+    }
+
+    wxDECLARE_NO_COPY_CLASS(wxAuiDocMDIChildFrameBase);
+};
+
+
+
+
+
+
+
 
 class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame : public wxAuiDocMDIChildFrameBase
 {

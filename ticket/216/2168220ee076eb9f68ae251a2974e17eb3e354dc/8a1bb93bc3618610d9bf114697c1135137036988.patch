Index: include/wx/aui/aui.h
===================================================================
--- include/wx/aui/aui.h	(revision 59492)
+++ include/wx/aui/aui.h	(working copy)
@@ -18,6 +18,7 @@
 #include "wx/aui/auibar.h"
 #include "wx/aui/auibook.h"
 #include "wx/aui/tabmdi.h"
+#include "wx/aui/tabdocmdi.h"
 
 #endif // _WX_AUI_H_
 
Index: include/wx/aui/tabdocmdi.h
===================================================================
--- include/wx/aui/tabdocmdi.h	(revision 0)
+++ include/wx/aui/tabdocmdi.h	(revision 0)
@@ -0,0 +1,166 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.h
+// Purpose:     Frame classes for Aui MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_AUITABDOCMDI_H_
+#define _WX_AUITABDOCMDI_H_
+
+#if wxUSE_AUI
+
+#include "wx/docview.h"
+#include "wx/aui/tabmdi.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+
+/*
+ * Use this instead of wxAuiMDIParentFrame
+ */
+
+class wxAuiDocMDIChildFrame;
+class WXDLLIMPEXP_AUI wxAuiDocMDIParentFrame: public wxAuiMDIParentFrame
+{
+public:
+    wxAuiDocMDIParentFrame();
+    wxAuiDocMDIParentFrame(wxDocManager *manager,
+                           wxWindow *parent,
+                           wxWindowID winid,
+                           const wxString& title,
+                           const wxPoint& pos = wxDefaultPosition,
+                           const wxSize& size = wxDefaultSize,
+                           long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                           const wxString& name = wxFrameNameStr);
+
+    virtual ~wxAuiDocMDIParentFrame();
+
+    bool Create(wxDocManager *manager,
+                wxWindow *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                const wxString& name = wxFrameNameStr );
+
+    // Extend event processing to search the document manager's event table
+    virtual bool ProcessEvent(wxEvent& event);
+
+    wxDocManager *GetDocumentManager(void) const { return m_docManager; }
+
+    void OnExit(wxCommandEvent& event);
+    void OnMRUFile(wxCommandEvent& event);
+    void OnCloseWindow(wxCloseEvent& event);
+
+protected:
+    void Init();
+    wxDocManager *m_docManager;
+
+public:
+    void SetArtProvider(wxAuiTabArt* provider);
+    wxAuiTabArt* GetArtProvider();
+    wxAuiNotebook* GetNotebook() const;
+    
+#if wxUSE_MENUS
+    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
+    void SetWindowMenu(wxMenu* pMenu);
+#endif // wxUSE_MENUS
+
+    void SetChildMenuBar(wxAuiDocMDIChildFrame *pChild);
+
+    wxAuiDocMDIChildFrame *GetActiveChild() const;
+    void SetActiveChild(wxAuiDocMDIChildFrame* pChildFrame);
+
+    wxAuiMDIClientWindow *GetClientWindow() const;
+
+#if wxUSE_MENUS
+    void RemoveWindowMenu(wxMenuBar *pMenuBar);
+    void AddWindowMenu(wxMenuBar *pMenuBar);
+    void DoHandleMenu(wxCommandEvent &event);
+#endif // wxUSE_MENUS
+
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxAuiDocMDIParentFrame)
+};
+
+/*
+ * Use this instead of wxAuiDocMDIChildFrame
+ */
+
+class WXDLLIMPEXP_AUI wxAuiDocMDIChildFrame: public wxAuiMDIChildFrame
+{
+public:
+    wxAuiDocMDIChildFrame();
+    wxAuiDocMDIChildFrame(wxDocument *doc,
+                          wxView *view,
+                          wxAuiDocMDIParentFrame *parent,
+                          wxWindowID winid,
+                          const wxString& title,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE,
+                          const wxString& name = wxFrameNameStr);
+
+    virtual ~wxAuiDocMDIChildFrame();
+
+    bool Create(wxDocument *doc,
+                wxView *view,
+                wxAuiDocMDIParentFrame *parent,
+                wxWindowID winid,
+                const wxString& title,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxDEFAULT_FRAME_STYLE,
+                const wxString& name = wxFrameNameStr);
+
+    // Extend event processing to search the view's event table
+    virtual bool ProcessEvent(wxEvent& event);
+
+    inline wxDocument *GetDocument() const { return m_childDocument; }
+    inline wxView *GetView(void) const { return m_childView; }
+    inline void SetDocument(wxDocument *doc) { m_childDocument = doc; }
+    inline void SetView(wxView *view) { m_childView = view; }
+    bool Destroy() { m_childView = (wxView *)NULL; return wxAuiMDIChildFrame::Destroy(); }
+
+protected:
+    void Init();
+    wxDocument*       m_childDocument;
+    wxView*           m_childView;
+
+public:
+    void OnMenuHighlight(wxMenuEvent& evt);
+    void OnActivate(wxActivateEvent& evt);
+    void OnCloseWindow(wxCloseEvent& evt);
+
+    void SetMDIParentFrame(wxAuiDocMDIParentFrame* parent);
+    wxAuiDocMDIParentFrame* GetMDIParentFrame() const;
+    
+public:
+    // This function needs to be called when a size change is confirmed,
+    // we needed this function to prevent anybody from the outside
+    // changing the panel... it messes the UI layout when we would allow it.
+    void ApplyMDIChildFrameRect();
+    void DoShow(bool show);
+
+private:
+    DECLARE_DYNAMIC_CLASS(wxAuiDocMDIChildFrame)
+    DECLARE_EVENT_TABLE()
+
+    friend class wxAuiMDIClientWindow;
+};
+
+#endif
+    // wxUSE_AUI
+
+#endif
+    // _WX_AUITABDOCMDI_H_
Index: samples/docview/doc.cpp
===================================================================
--- samples/docview/doc.cpp	(revision 59492)
+++ samples/docview/doc.cpp	(working copy)
@@ -35,6 +35,12 @@
     #include "wx/txtstrm.h"
 #endif
 
+#if __USE_WXAUI__
+#if !wxUSE_AUI
+#error You must set wxUSE_AUI to 1 in setup.h!
+#endif // !wxUSE_AUI
+#endif // __USE_WXAUI__
+
 #include "doc.h"
 #include "view.h"
 
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 59492)
+++ samples/docview/docview.cpp	(working copy)
@@ -16,6 +16,9 @@
     It can be run in several ways:
         * With "--mdi" command line option to use multiple MDI child frames
           for the multiple documents (this is the default).
+*
+*         This version can be compiled to use the wxAui doc/view framework
+*
         * With "--sdi" command line option to use multiple top level windows
           for the multiple documents
         * With "--single" command line option to support opening a single
@@ -50,6 +53,17 @@
 #include "wx/docview.h"
 #include "wx/docmdi.h"
 
+#if __USE_WXAUI__
+#if !wxUSE_MDI_ARCHITECTURE
+#error You must set wxUSE_MDI_ARCHITECTURE to 1 in setup.h!
+#endif
+
+#if !wxUSE_AUI
+#error You must set wxUSE_AUI to 1 in setup.h!
+#endif // !wxUSE_AUI
+#endif // __USE_WXAUI__
+
+
 #include "docview.h"
 #include "doc.h"
 #include "view.h"
@@ -112,6 +126,9 @@
 
 bool MyApp::OnCmdLineParsed(wxCmdLineParser& parser)
 {
+#if __USE_WXAUI__
+        m_mode = Mode_MDI;
+#else
     int numModeOptions = 0;
 
 #if wxUSE_MDI_ARCHITECTURE
@@ -139,7 +156,7 @@
         wxLogError("Only a single option choosing the mode can be given.");
         return false;
     }
-
+#endif
     return wxApp::OnCmdLineParsed(parser);
 }
 
@@ -179,6 +196,17 @@
     }
 
     // create the main frame window
+#if __USE_WXAUI__
+    wxAuiDocMDIParentFrame *frame;
+  frame = new wxAuiDocMDIParentFrame(docManager, (wxFrame *) NULL, wxID_ANY,
+                      _T("Aui DocView Demo"), wxPoint(0, 0), wxSize(500, 400),
+                      wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE);
+
+  //// Set internal notebook style
+  frame->GetNotebook()->SetWindowStyleFlag(wxAUI_NB_TAB_SPLIT|wxAUI_NB_TAB_MOVE
+      |wxAUI_NB_CLOSE_ON_ALL_TABS|wxAUI_NB_TAB_EXTERNAL_MOVE|wxAUI_NB_SCROLL_BUTTONS
+      |wxAUI_NB_WINDOWLIST_BUTTON|wxNO_BORDER);
+#else
     wxFrame *frame;
 #if wxUSE_MDI_ARCHITECTURE
     if ( m_mode == Mode_MDI )
@@ -196,6 +224,7 @@
                                      wxDefaultPosition,
                                      wxSize(500, 400));
     }
+#endif
 
     // and its menu bar
     wxMenu *menuFile = new wxMenu;
@@ -203,20 +232,25 @@
     menuFile->Append(wxID_NEW);
     menuFile->Append(wxID_OPEN);
 
+#if __USE_WXAUI__
+#else
     if ( m_mode == Mode_Single )
         AppendDocumentFileCommands(menuFile, true);
-
+#endif
     menuFile->AppendSeparator();
     menuFile->Append(wxID_EXIT);
 
     // A nice touch: a history of files visited. Use this menu.
     docManager->FileHistoryUseMenu(menuFile);
 
+#if __USE_WXAUI__
+#else
     if ( m_mode == Mode_Single )
     {
         m_canvas = new MyCanvas(NULL, frame);
         m_menuEdit = CreateDrawingEditMenu();
     }
+#endif
 
     CreateMenuBarForFrame(frame, menuFile, m_menuEdit);
 
@@ -261,7 +295,11 @@
     return menu;
 }
 
+#if __USE_WXAUI__
+void MyApp::CreateMenuBarForFrame(wxAuiDocMDIParentFrame *frame, wxMenu *file, wxMenu *edit)
+#else
 void MyApp::CreateMenuBarForFrame(wxFrame *frame, wxMenu *file, wxMenu *edit)
+#endif
 {
     wxMenuBar *menubar = new wxMenuBar;
 
@@ -277,9 +315,18 @@
     frame->SetMenuBar(menubar);
 }
 
+#if __USE_WXAUI__
+wxAuiDocMDIChildFrame *MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
+#else
 wxFrame *MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
+#endif
 {
     // create a child frame of appropriate class for the current mode
+#if __USE_WXAUI__
+  wxAuiDocMDIChildFrame *subframe;
+  subframe = new wxAuiDocMDIChildFrame(doc, view, wxStaticCast(GetTopWindow(), wxAuiDocMDIParentFrame), wxID_ANY, _T("Aui Child Frame"),
+                             wxPoint(10, 10), wxSize(300, 300));
+#else
     wxFrame *subframe;
 #if wxUSE_MDI_ARCHITECTURE
     if ( GetMode() == Mode_MDI )
@@ -311,6 +358,7 @@
 
         subframe->Centre(wxBOTH);
     }
+#endif // __USE_WXAUI__
 
     wxMenu *menuFile = new wxMenu;
 
@@ -336,8 +384,11 @@
         menuEdit->Append(wxID_SELECTALL);
     }
 
+#if __USE_WXAUI__
+    CreateMenuBarForFrame((wxAuiDocMDIParentFrame *) wxApp::GetTopWindow(), menuFile, menuEdit);
+#else
     CreateMenuBarForFrame(subframe, menuFile, menuEdit);
-
+#endif
     subframe->SetIcon(isCanvas ? wxICON(chrt) : wxICON(notepad));
 
     return subframe;
@@ -346,6 +397,9 @@
 void MyApp::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString modeName;
+#if __USE_WXAUI__
+    modeName = "Aui MDI";
+#else
     switch ( m_mode )
     {
 #if wxUSE_MDI_ARCHITECTURE
@@ -365,6 +419,7 @@
         default:
             wxFAIL_MSG( "unknown mode ");
     }
+#endif
 
     wxLogMessage
     (
Index: samples/docview/docview.h
===================================================================
--- samples/docview/docview.h	(revision 59492)
+++ samples/docview/docview.h	(working copy)
@@ -13,6 +13,15 @@
 #ifndef _WX_SAMPLES_DOCVIEW_DOCVIEW_H_
 #define _WX_SAMPLES_DOCVIEW_DOCVIEW_H_
 
+#define __USE_WXAUI__ 1
+
+#if __USE_WXAUI__
+#include "wx/aui/tabdocmdi.h"
+#else
+#include "wx/mdi.h"
+#include "wx/docmdi.h"
+#endif
+
 #include "wx/docview.h"
 
 class MyFrame;
@@ -44,7 +53,11 @@
 
     // our specific methods
     Mode GetMode() const { return m_mode; }
+#if __USE_WXAUI__
+    wxAuiDocMDIChildFrame *CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas);
+#else
     wxFrame *CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas);
+#endif
 
     // these accessors should only be called in single document mode, otherwise
     // the pointers are NULL and an assert is triggered
@@ -63,9 +76,12 @@
     // create and associate with the given frame the menu bar containing the
     // given file and edit (possibly NULL) menus as well as the standard help
     // one
+#if __USE_WXAUI__
+    void CreateMenuBarForFrame(wxAuiDocMDIParentFrame *frame, wxMenu *file, wxMenu *edit);
+#else
     void CreateMenuBarForFrame(wxFrame *frame, wxMenu *file, wxMenu *edit);
+#endif
 
-
     // show the about box: as we can have different frames it's more
     // convenient, even if somewhat less usual, to handle this in the
     // application object itself
Index: samples/docview/view.cpp
===================================================================
--- samples/docview/view.cpp	(revision 59492)
+++ samples/docview/view.cpp	(working copy)
@@ -29,6 +29,13 @@
 #include "doc.h"
 #include "view.h"
 
+#if __USE_WXAUI__
+#if !wxUSE_AUI
+#error You must set wxUSE_AUI to 1 in setup.h!
+#endif // !wxUSE_AUI
+#include "wx/filename.h"
+#endif // __USE_WXAUI__
+
 // ----------------------------------------------------------------------------
 // DrawingView implementation
 // ----------------------------------------------------------------------------
@@ -48,11 +55,28 @@
     {
         // create a new window and canvas inside it
         m_frame = app.CreateChildFrame(doc, this, true);
+
+#if __USE_WXAUI__
+
+    wxBoxSizer *sizer = new wxBoxSizer(wxHORIZONTAL);
+
+    wxFileName file(doc->GetFilename());
+    wxString filename = ((file.GetName().IsEmpty())?(wxEmptyString):(wxT(" - ") + file.GetFullName()));
+    m_frame->SetTitle(wxT("DrawingView") + filename);
+    m_canvas = new MyCanvas(this, m_frame);
+    sizer->Add(m_canvas, 1, wxEXPAND);
+    m_frame->SetSizer(sizer);
+#else        
         m_frame->SetTitle("Drawing View");
 
         m_canvas = new MyCanvas(this, m_frame);
+//#endif
         m_frame->Show(true);
+#endif // __USE_WXAUI__
     }
+#if __USE_WXAUI__
+
+#else
     else // single document mode
     {
         // reuse the existing window and canvas
@@ -71,7 +95,7 @@
         doc->GetCommandProcessor()->SetEditMenu(app.GetMainWindowEditMenu());
         doc->GetCommandProcessor()->Initialize();
     }
-
+#endif
     return true;
 }
 
@@ -161,11 +185,27 @@
 bool TextEditView::OnCreate(wxDocument *doc, long WXUNUSED(flags))
 {
     m_frame = wxGetApp().CreateChildFrame(doc, this, false);
+
+#if __USE_WXAUI__
+
+  wxBoxSizer *sizer = new wxBoxSizer(wxHORIZONTAL);
+
     m_text = new wxTextCtrl(m_frame, wxID_ANY, "",
                             wxPoint(0, 0), m_frame->GetClientSize(),
                             wxTE_MULTILINE);
+  sizer->Add(m_text, 1, wxEXPAND);
+  m_frame->SetSizer(sizer);
 
+  wxFileName file(doc->GetFilename());
+  wxString filename = ((file.GetName().IsEmpty())?(wxEmptyString):(wxT(" - ") + file.GetFullName()));
+  m_frame->SetTitle(wxT("Text View") + filename);
+#else
+    m_text = new wxTextCtrl(m_frame, wxID_ANY, "",
+                            wxPoint(0, 0), m_frame->GetClientSize(),
+                            wxTE_MULTILINE);
+
     m_frame->SetTitle("Text View");
+#endif
     m_frame->Show(true);
 
     Activate(true);
@@ -207,7 +247,11 @@
 END_EVENT_TABLE()
 
 // Define a constructor for my canvas
+#if __USE_WXAUI__
+MyCanvas::MyCanvas(wxView *view, wxAuiDocMDIChildFrame *parent/*, const wxPoint& pos, const wxSize& size, long style*/)
+#else
 MyCanvas::MyCanvas(wxView *view, wxWindow *parent)
+#endif
     : wxScrolledWindow(parent, wxID_ANY, wxPoint(0, 0), parent->GetClientSize())
 {
     m_view = view;
Index: samples/docview/view.h
===================================================================
--- samples/docview/view.h	(revision 59492)
+++ samples/docview/view.h	(working copy)
@@ -14,6 +14,9 @@
 #define _WX_SAMPLES_DOCVIEW_VIEW_H_
 
 #include "wx/docview.h"
+#if __USE_WXAUI__
+#include "wx/aui/tabdocmdi.h"
+#endif
 
 // ----------------------------------------------------------------------------
 // Drawing view classes
@@ -25,7 +28,11 @@
 public:
     // view may be NULL if we're not associated with one yet, but parent must
     // be a valid pointer
+#if __USE_WXAUI__
+    MyCanvas(wxView *view, wxAuiDocMDIChildFrame *parent/*, const wxPoint& pos, const wxSize& size, long style*/);
+#else
     MyCanvas(wxView *view, wxWindow *parent);
+#endif
     virtual ~MyCanvas();
 
     virtual void OnDraw(wxDC& dc);
@@ -67,7 +74,11 @@
 class DrawingView : public wxView
 {
 public:
+#if __USE_WXAUI__
+    DrawingView() { m_canvas = NULL; m_frame = (wxAuiDocMDIChildFrame *) NULL; }
+#else
     DrawingView() { m_canvas = NULL; m_frame = NULL; }
+#endif
 
     virtual bool OnCreate(wxDocument *doc, long flags);
     virtual void OnDraw(wxDC *dc);
@@ -79,7 +90,11 @@
 private:
     void OnCut(wxCommandEvent& event);
 
+#if __USE_WXAUI__
+    wxAuiDocMDIChildFrame *m_frame;
+#else
     wxFrame *m_frame;
+#endif
     MyCanvas *m_canvas;
 
     DECLARE_EVENT_TABLE()
@@ -94,7 +109,11 @@
 class TextEditView : public wxView
 {
 public:
+/*#if __USE_WXAUI__
+    TextEditView(): wxView() { m_frame = NULL; m_text = NULL; }
+#else*/
     TextEditView() : wxView() { m_frame = NULL; m_text = NULL; }
+/*#endif*/
 
     virtual bool OnCreate(wxDocument *doc, long flags);
     virtual void OnDraw(wxDC *dc);
@@ -107,7 +126,11 @@
     void OnPaste(wxCommandEvent& WXUNUSED(event)) { m_text->Paste(); }
     void OnSelectAll(wxCommandEvent& WXUNUSED(event)) { m_text->SelectAll(); }
 
+#if __USE_WXAUI__
+    wxAuiDocMDIChildFrame *m_frame;
+#else
     wxFrame *m_frame;
+#endif
     wxTextCtrl *m_text;
 
     DECLARE_EVENT_TABLE()
Index: src/aui/tabdocmdi.cpp
===================================================================
--- src/aui/tabdocmdi.cpp	(revision 0)
+++ src/aui/tabdocmdi.cpp	(revision 0)
@@ -0,0 +1,360 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        tabdocmdi.cpp
+// Purpose:     Frame classes for MDI document/view applications
+// Author:      Julian Smart
+// Modified by: Kinaou Hervé
+// Created:     01/02/97
+// RCS-ID:      $Id:$
+// Copyright:   (c) Julian Smart
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_AUI
+#if wxUSE_MDI
+
+#include "wx/aui/tabdocmdi.h"
+
+enum MDI_MENU_ID
+{
+    wxWINDOWCLOSE = 4001,
+    wxWINDOWCLOSEALL,
+    wxWINDOWNEXT,
+    wxWINDOWPREV
+};
+
+/*
+ * Docview Aui MDI parent frame
+ */
+
+IMPLEMENT_DYNAMIC_CLASS(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+
+BEGIN_EVENT_TABLE(wxAuiDocMDIParentFrame, wxAuiMDIParentFrame)
+#if wxUSE_MENUS
+    EVT_MENU(wxID_ANY, wxAuiDocMDIParentFrame::DoHandleMenu)
+#endif
+    EVT_MENU(wxID_EXIT, wxAuiDocMDIParentFrame::OnExit)
+    EVT_MENU_RANGE(wxID_FILE1, wxID_FILE9, wxAuiDocMDIParentFrame::OnMRUFile)
+    EVT_CLOSE(wxAuiDocMDIParentFrame::OnCloseWindow)
+END_EVENT_TABLE()
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame()
+{
+    Init();
+}
+
+wxAuiDocMDIParentFrame::wxAuiDocMDIParentFrame(wxDocManager *manager,
+    wxWindow *parent, wxWindowID winid, const wxString& title,
+    const wxPoint& pos, const wxSize& size, long style, const wxString& name)
+{
+    Init();
+    Create(manager, parent, winid, title, pos, size, style, name);
+}
+
+wxAuiDocMDIParentFrame::~wxAuiDocMDIParentFrame()
+{}
+
+bool wxAuiDocMDIParentFrame::Create(wxDocManager *manager,
+    wxWindow *parent, wxWindowID winid, const wxString& title,
+    const wxPoint& pos, const wxSize& size, long style, const wxString& name)
+{
+    m_docManager = manager;
+    return wxAuiMDIParentFrame::Create(parent, winid, title, pos, size, style, name);
+}
+
+void wxAuiDocMDIParentFrame::OnExit(wxCommandEvent& WXUNUSED(event))
+{
+    Close();
+}
+
+void wxAuiDocMDIParentFrame::Init()
+{
+    wxAuiMDIParentFrame::Init();
+    m_docManager = NULL;
+}
+
+void wxAuiDocMDIParentFrame::OnMRUFile(wxCommandEvent& event)
+{
+    wxString f(m_docManager->GetHistoryFile(event.GetId() - wxID_FILE1));
+    if (!f.empty())
+        (void)m_docManager->CreateDocument(f, wxDOC_SILENT);
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIParentFrame::ProcessEvent(wxEvent& event)
+{
+    // Try the document manager, then do default processing
+    if (!m_docManager || !m_docManager->ProcessEvent(event))
+    {
+#if wxUSE_MENUS
+        // Catch the events of kind wxID_CLOSE[_ALL] to send the appropriate tabmdi event
+        if (event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+        {
+            if (event.GetId() == wxID_CLOSE)
+                event.SetId(wxWINDOWCLOSE);
+            else if (event.GetId() == wxID_CLOSE_ALL)
+                event.SetId(wxWINDOWCLOSEALL);
+        }
+#endif //wxUSE_MENUS
+        return wxAuiMDIParentFrame::ProcessEvent(event);
+    }
+    else
+        return true;
+}
+
+void wxAuiDocMDIParentFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    if (m_docManager->Clear(!event.CanVeto()))
+    {
+        this->Destroy();
+    }
+    else
+        event.Veto();
+}
+
+void wxAuiDocMDIParentFrame::SetArtProvider(wxAuiTabArt* provider)
+{
+    wxAuiMDIParentFrame::SetArtProvider(provider);
+}
+
+wxAuiTabArt* wxAuiDocMDIParentFrame::GetArtProvider()
+{
+    return wxAuiMDIParentFrame::GetArtProvider();
+}
+
+wxAuiNotebook* wxAuiDocMDIParentFrame::GetNotebook() const
+{
+    return wxAuiMDIParentFrame::GetNotebook();
+}
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::SetWindowMenu(wxMenu* pMenu)
+{
+    wxAuiMDIParentFrame::SetWindowMenu(pMenu);
+}
+#endif // wxUSE_MENUS
+
+void wxAuiDocMDIParentFrame::SetChildMenuBar(wxAuiDocMDIChildFrame* pChild)
+{
+    wxAuiMDIParentFrame::SetChildMenuBar(wxDynamicCast(pChild, wxAuiMDIChildFrame));
+}
+
+wxAuiDocMDIChildFrame *wxAuiDocMDIParentFrame::GetActiveChild() const
+{
+    return wxDynamicCast(wxAuiMDIParentFrame::GetActiveChild(), wxAuiDocMDIChildFrame);
+}
+
+void wxAuiDocMDIParentFrame::SetActiveChild(wxAuiDocMDIChildFrame* pChildFrame)
+{
+    wxAuiMDIParentFrame::SetActiveChild(wxDynamicCast(pChildFrame, wxAuiMDIChildFrame));
+}
+
+wxAuiMDIClientWindow *wxAuiDocMDIParentFrame::GetClientWindow() const
+{
+    return wxAuiMDIParentFrame::GetClientWindow();
+}
+
+#if wxUSE_MENUS
+void wxAuiDocMDIParentFrame::RemoveWindowMenu(wxMenuBar* pMenuBar)
+{
+    wxAuiMDIParentFrame::RemoveWindowMenu(pMenuBar);
+}
+
+void wxAuiDocMDIParentFrame::AddWindowMenu(wxMenuBar *pMenuBar)
+{
+    wxAuiMDIParentFrame::AddWindowMenu(pMenuBar);
+}
+
+void wxAuiDocMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+{
+    wxCloseEvent closeEvent;
+    closeEvent.SetCanVeto(true);
+    switch (event.GetId())
+    {
+        case wxWINDOWCLOSE:
+            if (m_pActiveChild)
+                wxDynamicCast(m_pActiveChild, wxAuiDocMDIChildFrame)->OnCloseWindow(closeEvent);
+            //if (m_docManager)
+            //    m_docManager->OnFileClose(event);
+            break;
+        case wxWINDOWCLOSEALL:
+            while (m_pActiveChild)
+                wxDynamicCast(m_pActiveChild, wxAuiDocMDIChildFrame)->OnCloseWindow(closeEvent);
+            //if (m_docManager)
+            //    m_docManager->OnFileCloseAll(event);
+            break;
+        case wxWINDOWNEXT:
+            ActivateNext();
+            break;
+        case wxWINDOWPREV:
+            ActivatePrevious();
+            break;
+        default:
+            event.Skip();
+    }
+}
+#endif // wxUSE_MENUS
+
+
+/*
+ * Default document child frame for Aui MDI children
+ */
+
+IMPLEMENT_DYNAMIC_CLASS(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+
+BEGIN_EVENT_TABLE(wxAuiDocMDIChildFrame, wxAuiMDIChildFrame)
+    EVT_MENU_HIGHLIGHT_ALL(wxAuiDocMDIChildFrame::OnMenuHighlight)
+    EVT_ACTIVATE(wxAuiDocMDIChildFrame::OnActivate)
+    EVT_CLOSE(wxAuiDocMDIChildFrame::OnCloseWindow)
+END_EVENT_TABLE()
+
+void wxAuiDocMDIChildFrame::Init()
+{
+    wxAuiMDIChildFrame::Init();
+    m_childDocument = (wxDocument*)  NULL;
+    m_childView = (wxView*) NULL;
+}
+
+wxAuiDocMDIChildFrame::wxAuiDocMDIChildFrame()
+{
+    Init();
+}
+
+wxAuiDocMDIChildFrame::wxAuiDocMDIChildFrame(wxDocument *doc, wxView *view,
+    wxAuiDocMDIParentFrame *parent, wxWindowID winid, const wxString& title,
+    const wxPoint& WXUNUSED(pos), const wxSize& size, long style, const wxString& name)
+{
+    Init();
+    
+    // There are two ways to create an tabbed mdi child frame without
+    // making it the active document.  Either Show(false) can be called
+    // before Create() (as is customary on some ports with wxFrame-type
+    // windows), or wxMINIMIZE can be passed in the style flags.  Note that
+    // wxAuiMDIChildFrame is not really derived from wxFrame, as wxMDIChildFrame
+    // is, but those are the expected symantics.  No style flag is passed
+    // onto the panel underneath.
+    if (style & wxMINIMIZE)
+        m_activate_on_create = false;
+        
+    Create(doc, view, parent, winid, title, wxDefaultPosition, size, 0, name);
+}
+
+bool wxAuiDocMDIChildFrame::Create(wxDocument *doc, wxView *view,
+    wxAuiDocMDIParentFrame *parent, wxWindowID winid, const wxString& title,
+    const wxPoint& pos, const wxSize& size, long style, const wxString& name)
+{
+    m_childDocument = doc;
+    m_childView = view;
+    if (wxAuiMDIChildFrame::Create(wxDynamicCast(parent, wxAuiMDIParentFrame),
+        winid, title, pos, size, style, name))
+    {
+        if (view)
+            view->SetFrame(this);
+        return true;
+    }
+
+    return false;
+}
+
+wxAuiDocMDIChildFrame::~wxAuiDocMDIChildFrame()
+{
+    m_childView = (wxView *) NULL;
+}
+
+// Extend event processing to search the view's event table
+bool wxAuiDocMDIChildFrame::ProcessEvent(wxEvent& event)
+{
+    static wxEvent *ActiveEvent = NULL;
+
+    // Break recursion loops
+    if (ActiveEvent == &event)
+        return false;
+
+    ActiveEvent = &event;
+
+    bool ret;
+    if ( !m_childView || ! m_childView->ProcessEvent(event) )
+    {
+        // Only hand up to the parent if it's a menu command
+        if (!event.IsKindOf(CLASSINFO(wxCommandEvent)) || !GetParent() || !GetParent()->GetEventHandler()->ProcessEvent(event))
+            ret = wxEvtHandler::ProcessEvent(event);
+        else
+            ret = true;
+    }
+    else
+        ret = true;
+
+    ActiveEvent = NULL;
+    return ret;
+}
+
+void wxAuiDocMDIChildFrame::OnMenuHighlight(wxMenuEvent& event)
+{
+    wxAuiMDIChildFrame::OnMenuHighlight(event);
+}
+
+void wxAuiDocMDIChildFrame::OnActivate(wxActivateEvent& event)
+{
+    wxAuiMDIChildFrame::OnActivate(event);
+
+    if (event.GetActive() && m_childView)
+        m_childView->Activate(event.GetActive());
+}
+
+void wxAuiDocMDIChildFrame::OnCloseWindow(wxCloseEvent& event)
+{
+    // Close view but don't delete the frame while doing so!
+    // ...since it will be deleted by wxWidgets if we return true.
+    if (m_childView)
+    {
+        bool ans = event.CanVeto()
+            ? m_childView->Close(false) // false means don't delete associated window
+            : true; // Must delete.
+
+        if (ans)
+        {
+            m_childView->Activate(false);
+            delete m_childView;
+            m_childView = (wxView *) NULL;
+            m_childDocument = (wxDocument *) NULL;
+
+            wxAuiMDIChildFrame::OnCloseWindow(event);
+        }
+        else
+            event.Veto();
+    }
+    else
+        event.Veto();
+}
+
+void wxAuiDocMDIChildFrame::SetMDIParentFrame(wxAuiDocMDIParentFrame* parentFrame)
+{
+    wxAuiMDIChildFrame::SetMDIParentFrame(wxDynamicCast(parentFrame, wxAuiMDIParentFrame));
+}
+
+wxAuiDocMDIParentFrame* wxAuiDocMDIChildFrame::GetMDIParentFrame() const
+{
+    return wxDynamicCast(wxAuiMDIChildFrame::GetMDIParentFrame(), wxAuiDocMDIParentFrame);
+}
+
+void wxAuiDocMDIChildFrame::ApplyMDIChildFrameRect()
+{
+    wxAuiMDIChildFrame::ApplyMDIChildFrameRect();
+}
+
+void wxAuiDocMDIChildFrame::DoShow(bool show)
+{
+    wxAuiMDIChildFrame::DoShow(show);
+}
+
+#endif
+    // wxUSE_MDI
+#endif
+    //wxUSE_AUI
+
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 59492)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -834,5 +834,5 @@
         ((wxAuiMDIChildFrame *)GetPage(pos))->ApplyMDIChildFrameRect();
 }
 
-#endif //wxUSE_AUI
 #endif // wxUSE_MDI
+#endif // wxUSE_AUI

diff --git a/include/wx/docview.h b/include/wx/docview.h
index 1ed240f..3830c85 100644
--- a/include/wx/docview.h
+++ b/include/wx/docview.h
@@ -703,7 +703,7 @@ class WXDLLIMPEXP_CORE wxDocChildFrameAny : public ChildFrame,
     {
         BaseClass::OnActivate(event);
 
-        if ( m_childView )
+        if ( m_childView && event.GetSkipped() )
             m_childView->Activate(event.GetActive());
     }
 
diff --git a/include/wx/generic/mdig.h b/include/wx/generic/mdig.h
index a710c3f..3fe97b4 100644
--- a/include/wx/generic/mdig.h
+++ b/include/wx/generic/mdig.h
@@ -213,7 +213,8 @@ class WXDLLIMPEXP_CORE wxGenericMDIChildFrame : public wxTDIChildFrame
 // wxGenericMDIClientWindow
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxGenericMDIClientWindow : public wxMDIClientWindowBase
+class WXDLLIMPEXP_CORE wxGenericMDIClientWindow : public wxMDIClientWindowBase.
+                                                  public wxWindow
 {
 public:
     wxGenericMDIClientWindow() { }
@@ -224,7 +225,7 @@ class WXDLLIMPEXP_CORE wxGenericMDIClientWindow : public wxMDIClientWindowBase
     // (CreateGenericClient() is virtual itself to allow customizing the client
     // window creation by overriding it in the derived classes)
     virtual bool CreateGenericClient(wxWindow *parent);
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long WXUNUSED(style) = wxVSCROLL | wxHSCROLL)
     {
         return CreateGenericClient(parent);
@@ -235,6 +236,9 @@ class WXDLLIMPEXP_CORE wxGenericMDIClientWindow : public wxMDIClientWindowBase
     wxGenericMDIChildFrame *GetChild(size_t pos) const;
     int FindChild(wxGenericMDIChildFrame *child) const;
 
+    // Return this as wxWindow
+    virtual wxWindow *GetMDIClientWindow() { return this; }
+
 private:
     void PageChanged(int OldSelection, int newSelection);
 
diff --git a/include/wx/mdi.h b/include/wx/mdi.h
index 37f0fa5..5f07a7c 100644
--- a/include/wx/mdi.h
+++ b/include/wx/mdi.h
@@ -20,10 +20,30 @@
 #include "wx/menu.h"
 
 // forward declarations
-class WXDLLIMPEXP_FWD_CORE wxMDIParentFrame;
-class WXDLLIMPEXP_FWD_CORE wxMDIChildFrame;
-class WXDLLIMPEXP_FWD_CORE wxMDIClientWindowBase;
-class WXDLLIMPEXP_FWD_CORE wxMDIClientWindow;
+class WXDLLIMPEXP_FWD_CORE wxMDIParentFrameBase;
+class WXDLLIMPEXP_FWD_CORE wxMDIChildFrameBase;
+
+
+// ----------------------------------------------------------------------------
+// wxMDIClientWindowBase: child of parent frame, parent of children frames
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxMDIClientWindowBase
+{
+public:
+    /*
+        The derived class must provide the default ctor only (CreateClient()
+        will be called later).
+    */
+
+    // Can be overridden in the derived classes but the base class version must
+    // be usually called first to really create the client window.
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
+                              long style = wxVSCROLL | wxHSCROLL) = 0;
+
+    // Override this method to return the derived class casted in wxWindow
+    virtual wxWindow *GetMDIClientWindow() = 0;
+};
 
 // ----------------------------------------------------------------------------
 // wxMDIParentFrameBase: base class for parent frame for MDI children
@@ -65,14 +85,16 @@ class WXDLLIMPEXP_CORE wxMDIParentFrameBase : public wxFrame
     // ---------
 
     // Get or change the active MDI child window
-    virtual wxMDIChildFrame *GetActiveChild() const
+    virtual wxMDIChildFrameBase *GetActiveChild() const
         { return m_currentChild; }
-    virtual void SetActiveChild(wxMDIChildFrame *child)
+    virtual void SetActiveChild(wxMDIChildFrameBase *child)
         { m_currentChild = child; }
 
 
     // Get the client window
-    wxMDIClientWindowBase *GetClientWindow() const { return m_clientWindow; }
+    wxWindow *GetClientWindow() const { return m_clientWindow->GetMDIClientWindow(); }
+    // Get the MDI client base
+    wxMDIClientWindowBase *GetMDIClient() const { return m_clientWindow; }
 
 
     // MDI windows menu functions
@@ -113,22 +135,22 @@ class WXDLLIMPEXP_CORE wxMDIParentFrameBase : public wxFrame
     */
 
     // Create the client window class (don't Create() the window here, just
-    // return a new object of a wxMDIClientWindow-derived class)
+    // return a new object of a wxMDIClientWindowBase-derived class)
     //
     // Notice that if you override this method you should use the default
     // constructor and Create() and not the constructor creating the window
     // when creating the frame or your overridden version is not going to be
     // called (as the call to a virtual function from ctor will be dispatched
     // to this class version)
-    virtual wxMDIClientWindow *OnCreateClient();
+    virtual wxMDIClientWindowBase *OnCreateClient();
 
 protected:
-    // This is wxMDIClientWindow for all the native implementations but not for
+    // This is wxMDIClientWindowBase for all the native implementations but not for
     // the generic MDI version which has its own wxGenericMDIClientWindow and
     // so we store it as just a base class pointer because we don't need its
     // exact type anyhow
     wxMDIClientWindowBase *m_clientWindow;
-    wxMDIChildFrame *m_currentChild;
+    wxMDIChildFrameBase *m_currentChild;
 
 #if wxUSE_MENUS
     // the current window menu or NULL if we are not using it
@@ -137,7 +159,7 @@ class WXDLLIMPEXP_CORE wxMDIParentFrameBase : public wxFrame
 };
 
 // ----------------------------------------------------------------------------
-// wxMDIChildFrameBase: child frame managed by wxMDIParentFrame
+// wxMDIChildFrameBase: child frame managed by wxMDIParentFrameBase
 // ----------------------------------------------------------------------------
 
 class WXDLLIMPEXP_CORE wxMDIChildFrameBase : public wxFrame
@@ -148,7 +170,7 @@ class WXDLLIMPEXP_CORE wxMDIChildFrameBase : public wxFrame
     /*
         Derived classes should provide Create() with the following signature:
 
-    bool Create(wxMDIParentFrame *parent,
+    bool Create(wxMDIParentFrameBase *parent,
                 wxWindowID id,
                 const wxString& title,
                 const wxPoint& pos = wxDefaultPosition,
@@ -165,10 +187,10 @@ class WXDLLIMPEXP_CORE wxMDIChildFrameBase : public wxFrame
     // Return the MDI parent frame: notice that it may not be the same as
     // GetParent() (our parent may be the client window or even its subwindow
     // in some implementations)
-    wxMDIParentFrame *GetMDIParent() const { return m_mdiParent; }
+    wxMDIParentFrameBase *GetMDIParent() const { return m_mdiParent; }
 
     // Synonym for GetMDIParent(), was used in some other ports
-    wxMDIParentFrame *GetMDIParentFrame() const { return GetMDIParent(); }
+    wxMDIParentFrameBase *GetMDIParentFrame() const { return GetMDIParent(); }
 
 
     // in most ports MDI children frames are not really top-level, the only
@@ -177,7 +199,7 @@ class WXDLLIMPEXP_CORE wxMDIChildFrameBase : public wxFrame
     virtual bool IsTopLevel() const { return false; }
 
 protected:
-    wxMDIParentFrame *m_mdiParent;
+    wxMDIParentFrameBase *m_mdiParent;
 };
 
 // ----------------------------------------------------------------------------
@@ -298,24 +320,6 @@ class WXDLLIMPEXP_CORE wxTDIChildFrame : public wxMDIChildFrameBase
 };
 
 // ----------------------------------------------------------------------------
-// wxMDIClientWindowBase: child of parent frame, parent of children frames
-// ----------------------------------------------------------------------------
-
-class WXDLLIMPEXP_CORE wxMDIClientWindowBase : public wxWindow
-{
-public:
-    /*
-        The derived class must provide the default ctor only (CreateClient()
-        will be called later).
-    */
-
-    // Can be overridden in the derived classes but the base class version must
-    // be usually called first to really create the client window.
-    virtual bool CreateClient(wxMDIParentFrame *parent,
-                              long style = wxVSCROLL | wxHSCROLL) = 0;
-};
-
-// ----------------------------------------------------------------------------
 // Include the port-specific implementation of the base classes defined above
 // ----------------------------------------------------------------------------
 
@@ -354,7 +358,7 @@ class WXDLLIMPEXP_CORE wxMDIClientWindowBase : public wxWindow
     #include "wx/cocoa/mdi.h"
 #endif
 
-inline wxMDIClientWindow *wxMDIParentFrameBase::OnCreateClient()
+inline wxMDIClientWindowBase *wxMDIParentFrameBase::OnCreateClient()
 {
     return new wxMDIClientWindow;
 }
diff --git a/include/wx/msw/mdi.h b/include/wx/msw/mdi.h
index caf235f..496659d 100644
--- a/include/wx/msw/mdi.h
+++ b/include/wx/msw/mdi.h
@@ -16,6 +16,7 @@
 #include "wx/frame.h"
 
 class WXDLLIMPEXP_FWD_CORE wxAcceleratorTable;
+class WXDLLIMPEXP_FWD_CORE wxMDIChildFrame;
 
 // ---------------------------------------------------------------------------
 // wxMDIParentFrame
@@ -55,7 +56,7 @@ class WXDLLIMPEXP_CORE wxMDIParentFrame : public wxMDIParentFrameBase
 
     // we don't store the active child in m_currentChild so override this
     // function to find it dynamically
-    virtual wxMDIChildFrame *GetActiveChild() const;
+    virtual wxMDIChildFrameBase *GetActiveChild() const;
 
     virtual void Cascade();
     virtual void Tile(wxOrientation orient = wxHORIZONTAL);
@@ -228,6 +229,8 @@ class WXDLLIMPEXP_CORE wxMDIChildFrame : public wxMDIChildFrameBase
     // common part of all ctors
     void Init();
 
+    wxMDIParentFrame *m_pMdiParent;
+
 private:
     bool m_needsInitialShow; // Show must be called in idle time after Creation
     bool m_needsResize; // flag which tells us to artificially resize the frame
@@ -240,18 +243,22 @@ class WXDLLIMPEXP_CORE wxMDIChildFrame : public wxMDIChildFrameBase
 // wxMDIClientWindow
 // ---------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxMDIClientWindow : public wxMDIClientWindowBase
+class WXDLLIMPEXP_CORE wxMDIClientWindow : public wxMDIClientWindowBase,
+                                           public wxWindow
 {
 public:
     wxMDIClientWindow() { Init(); }
 
     // Note: this is virtual, to allow overridden behaviour.
-    virtual bool CreateClient(wxMDIParentFrame *parent,
+    virtual bool CreateClient(wxMDIParentFrameBase *parent,
                               long style = wxVSCROLL | wxHSCROLL);
 
     // Explicitly call default scroll behaviour
     void OnScroll(wxScrollEvent& event);
 
+    // Return this as wxWindow
+    virtual wxWindow *GetMDIClientWindow() { return this; }
+
 protected:
     virtual void DoSetSize(int x, int y,
                            int width, int height,
diff --git a/src/msw/mdi.cpp b/src/msw/mdi.cpp
index 6dbb49e..a2fdf00 100644
--- a/src/msw/mdi.cpp
+++ b/src/msw/mdi.cpp
@@ -92,7 +92,7 @@ void UnpackMDIActivate(WXWPARAM wParam, WXLPARAM lParam,
 //
 // this function works correctly even when we don't have a window menu and just
 // returns 0 then
-inline HMENU GetMDIWindowMenu(wxMDIParentFrame *frame)
+inline HMENU GetMDIWindowMenu(wxMDIParentFrameBase *frame)
 {
     wxMenu *menu = frame->GetWindowMenu();
     return menu ? GetHmenuOf(menu) : 0;
@@ -227,12 +227,12 @@ bool wxMDIParentFrame::Create(wxWindow *parent,
     if ( m_hMenu )
         ::DestroyMenu((HMENU)m_hMenu);
 
-    if ( m_clientWindow )
+    if ( m_clientWindow->GetMDIClientWindow() )
     {
-        if ( m_clientWindow->MSWGetOldWndProc() )
-            m_clientWindow->UnsubclassWin();
+        if ( m_clientWindow->GetMDIClientWindow()->MSWGetOldWndProc() )
+            m_clientWindow->GetMDIClientWindow()->UnsubclassWin();
 
-        m_clientWindow->SetHWND(0);
+        m_clientWindow->GetMDIClientWindow()->SetHWND(0);
         delete m_clientWindow;
     }
 }
@@ -241,7 +241,7 @@ bool wxMDIParentFrame::Create(wxWindow *parent,
 // wxMDIParentFrame child management
 // ----------------------------------------------------------------------------
 
-wxMDIChildFrame *wxMDIParentFrame::GetActiveChild() const
+wxMDIChildFrameBase *wxMDIParentFrame::GetActiveChild() const
 {
     HWND hWnd = (HWND)::SendMessage(GetWinHwnd(GetClientWindow()),
                                     WM_MDIGETACTIVE, 0, 0L);
@@ -382,7 +382,7 @@ void wxMDIParentFrame::SetWindowMenu(wxMenu* menu)
 
 void wxMDIParentFrame::DoMenuUpdates(wxMenu* menu)
 {
-    wxMDIChildFrame *child = GetActiveChild();
+    wxMDIChildFrameBase *child = GetActiveChild();
     if ( child )
     {
         wxEvtHandler* source = child->GetEventHandler();
@@ -424,7 +424,7 @@ void wxMDIParentFrame::DoMenuUpdates(wxMenu* menu)
 
 WXHMENU wxMDIParentFrame::MSWGetActiveMenu() const
 {
-    wxMDIChildFrame * const child  = GetActiveChild();
+    wxMDIChildFrameBase * const child  = GetActiveChild();
     if ( child )
     {
         const WXHMENU hmenu = child->MSWGetActiveMenu();
@@ -470,10 +470,10 @@ void wxMDIParentFrame::OnIconized(wxIconizeEvent& event)
 // Responds to colour changes, and passes event on to children.
 void wxMDIParentFrame::OnSysColourChanged(wxSysColourChangedEvent& event)
 {
-    if ( m_clientWindow )
+    if ( wxWindow * clientWin = GetClientWindow() )
     {
-        m_clientWindow->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
-        m_clientWindow->Refresh();
+        clientWin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
+        clientWin->Refresh();
     }
 
     event.Skip();
@@ -684,7 +684,7 @@ bool wxMDIParentFrame::TryBefore(wxEvent& event)
     // first, if any
     if ( event.GetEventType() == wxEVT_COMMAND_MENU_SELECTED )
     {
-        wxMDIChildFrame * const child = GetActiveChild();
+        wxMDIChildFrameBase * const child = GetActiveChild();
         if ( child && child->ProcessWindowEventLocally(event) )
             return true;
     }
@@ -710,7 +710,7 @@ bool wxMDIParentFrame::MSWTranslateMessage(WXMSG* msg)
     MSG *pMsg = (MSG *)msg;
 
     // first let the current child get it
-    wxMDIChildFrame * const child = GetActiveChild();
+    wxMDIChildFrameBase * const child = GetActiveChild();
     if ( child && child->MSWTranslateMessage(msg) )
     {
         return true;
@@ -749,6 +749,7 @@ void wxMDIChildFrame::Init()
 {
     m_needsResize = true;
     m_needsInitialShow = true;
+    m_pMdiParent = NULL;
 }
 
 bool wxMDIChildFrame::Create(wxMDIParentFrame *parent,
@@ -759,7 +760,8 @@ bool wxMDIChildFrame::Create(wxMDIParentFrame *parent,
                              long style,
                              const wxString& name)
 {
-    m_mdiParent = parent;
+    m_mdiParent =
+    m_pMdiParent = parent;
 
   SetName(name);
 
@@ -852,7 +854,7 @@ bool wxMDIChildFrame::Create(wxMDIParentFrame *parent,
     if ( !m_hWnd )
         return;
 
-    GetMDIParent()->RemoveMDIChild(this);
+    m_pMdiParent->RemoveMDIChild(this);
 
     // will be destroyed by DestroyChildren() but reset them before calling it
     // to avoid using dangling pointers if a callback comes in the meanwhile
@@ -885,7 +887,7 @@ bool wxMDIChildFrame::Show(bool show)
 
     // we need to refresh the MDI frame window menu to include (or exclude if
     // we've been hidden) this frame
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
     MDISetMenu(parent->GetClientWindow(), NULL, NULL);
 
     return true;
@@ -932,7 +934,7 @@ void wxMDIChildFrame::DoSetClientSize(int width, int height)
 
   // If there's an MDI parent, must subtract the parent's top left corner
   // since MoveWindow moves relative to the parent
-  wxMDIParentFrame * const mdiParent = GetMDIParent();
+  wxMDIParentFrameBase * const mdiParent = GetMDIParent();
   ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()), &point);
 
   MoveWindow(hWnd, point.x, point.y, actual_width, actual_height, (BOOL)true);
@@ -968,7 +970,7 @@ void wxMDIChildFrame::DoGetPosition(int *x, int *y) const
 
   // Since we now have the absolute screen coords,
   // if there's a parent we must subtract its top left corner
-  wxMDIParentFrame * const mdiParent = GetMDIParent();
+  wxMDIParentFrameBase * const mdiParent = GetMDIParent();
   ::ScreenToClient(GetHwndOf(mdiParent->GetClientWindow()), &point);
 
   if (x)
@@ -979,7 +981,7 @@ void wxMDIChildFrame::DoGetPosition(int *x, int *y) const
 
 void wxMDIChildFrame::InternalSetMenuBar()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
 
     MDIInsertWindowMenu(parent->GetClientWindow(),
                      m_hMenu, GetMDIWindowMenu(parent));
@@ -1003,7 +1005,7 @@ WXHICON wxMDIChildFrame::GetDefaultIcon() const
 
 void wxMDIChildFrame::Maximize(bool maximize)
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
     if ( parent && parent->GetClientWindow() )
     {
         ::SendMessage(GetWinHwnd(parent->GetClientWindow()),
@@ -1014,7 +1016,7 @@ void wxMDIChildFrame::Maximize(bool maximize)
 
 void wxMDIChildFrame::Restore()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
     if ( parent && parent->GetClientWindow() )
     {
         ::SendMessage(GetWinHwnd(parent->GetClientWindow()), WM_MDIRESTORE,
@@ -1024,7 +1026,7 @@ void wxMDIChildFrame::Restore()
 
 void wxMDIChildFrame::Activate()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
     if ( parent && parent->GetClientWindow() )
     {
         ::SendMessage(GetWinHwnd(parent->GetClientWindow()), WM_MDIACTIVATE,
@@ -1086,7 +1088,7 @@ bool wxMDIChildFrame::HandleMDIActivate(long WXUNUSED(activate),
                                         WXHWND hwndAct,
                                         WXHWND hwndDeact)
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
 
     WXHMENU hMenuToSet = 0;
 
@@ -1109,7 +1111,7 @@ bool wxMDIChildFrame::HandleMDIActivate(long WXUNUSED(activate),
         activated = false;
         parent->SetActiveChild(NULL);
 
-        WXHMENU hMenuParent = parent->m_hMenu;
+        WXHMENU hMenuParent = parent->MSWGetActiveMenu();
 
         // activate the parent menu only when there is no other child
         // that has been activated
@@ -1211,7 +1213,7 @@ bool wxMDIChildFrame::MSWTranslateMessage(WXMSG* msg)
 
 void wxMDIChildFrame::MSWDestroyWindow()
 {
-    wxMDIParentFrame * const parent = GetMDIParent();
+    wxMDIParentFrameBase * const parent = GetMDIParent();
 
     // Must make sure this handle is invalidated (set to NULL) since all sorts
     // of things could happen after the child client is destroyed, but before
@@ -1238,8 +1240,8 @@ void wxMDIChildFrame::MSWDestroyWindow()
 bool wxMDIChildFrame::ResetWindowStyle(void *vrect)
 {
     RECT *rect = (RECT *)vrect;
-    wxMDIParentFrame * const pFrameWnd = GetMDIParent();
-    wxMDIChildFrame* pChild = pFrameWnd->GetActiveChild();
+    wxMDIParentFrameBase * const pFrameWnd = GetMDIParent();
+    wxMDIChildFrameBase* pChild = pFrameWnd->GetActiveChild();
 
     if (!pChild || (pChild == this))
     {
@@ -1281,7 +1283,7 @@ bool wxMDIChildFrame::ResetWindowStyle(void *vrect)
 // contains the child frames
 // ===========================================================================
 
-bool wxMDIClientWindow::CreateClient(wxMDIParentFrame *parent, long style)
+bool wxMDIClientWindow::CreateClient(wxMDIParentFrameBase *parent, long style)
 {
     m_backgroundColour = wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE);
 

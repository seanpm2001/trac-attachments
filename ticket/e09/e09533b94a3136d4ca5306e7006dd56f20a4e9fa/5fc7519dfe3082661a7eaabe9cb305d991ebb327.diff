diff -ru wxGTK-2.5.4/include/wx/generic/splitter.h wxGTK-2.5.4.new/include/wx/generic/splitter.h
--- wxGTK-2.5.4/include/wx/generic/splitter.h	2005-02-21 13:29:19.000000000 +0100
+++ wxGTK-2.5.4/include/wx/generic/splitter.h	2005-03-24 23:28:25.000000000 +0100
@@ -257,7 +257,8 @@
     bool DoSetSashPosition(int sashPos);
 
     // set the sash position and send an event about it having been changed
-    void SetSashPositionAndNotify(int sashPos);
+    // when adequate (read comment in the function's code)
+    void SetSashPositionAndNotify(int sashPos, bool released = false);
 
     // callbacks executed when we detect that the mouse has entered or left
     // the sash
diff -ru wxGTK-2.5.4/src/generic/splitter.cpp wxGTK-2.5.4.new/src/generic/splitter.cpp
--- wxGTK-2.5.4/src/generic/splitter.cpp	2005-02-21 13:29:25.000000000 +0100
+++ wxGTK-2.5.4/src/generic/splitter.cpp	2005-03-25 01:37:25.000000000 +0100
@@ -293,7 +293,7 @@
                 wxSplitterEvent event(wxEVT_COMMAND_SPLITTER_UNSPLIT, this);
                 event.m_data.win = removedWindow;
                 (void)DoSendEvent(event);
-                SetSashPositionAndNotify(0);
+                SetSashPositionAndNotify(0, true);
             }
             else if ( posSashNew == GetWindowSize() )
             {
@@ -304,16 +304,16 @@
                 wxSplitterEvent event(wxEVT_COMMAND_SPLITTER_UNSPLIT, this);
                 event.m_data.win = removedWindow;
                 (void)DoSendEvent(event);
-                SetSashPositionAndNotify(0);
+                SetSashPositionAndNotify(0, true);
             }
             else
             {
-                SetSashPositionAndNotify(posSashNew);
+                SetSashPositionAndNotify(posSashNew, true);
             }
         }
         else
         {
-            SetSashPositionAndNotify(posSashNew);
+            SetSashPositionAndNotify(posSashNew, true);
         }
 
         SizeWindows();
@@ -622,7 +622,7 @@
     return true;
 }
 
-void wxSplitterWindow::SetSashPositionAndNotify(int sashPos)
+void wxSplitterWindow::SetSashPositionAndNotify(int sashPos, bool released)
 {
     // we must reset the request here, otherwise the sash would be stuck at
     // old position if the user attempted to move the sash after invalid
@@ -630,7 +630,23 @@
     // SetSashPosition():
     m_requestedSashPosition = INT_MAX;
 
-    if ( DoSetSashPosition(sashPos) )
+    bool sash_moved = DoSetSashPosition(sashPos);
+
+   /* wxWidgets 2.5.4 and previous versions generated a
+    * wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED event on every
+    * pixel the splitter moved (while dragging).
+    * Now it only generates such event when the splitter is
+    * dropped. In other words, when the splitter movement
+    * has finished.
+    * Also, the event will not be called when the splitter
+    * moves because of a window resizement!
+    */
+
+#if WXWIN_COMPATIBILITY_2_4 // will generate a "non-used-var" warning
+    if ( sash_moved )
+#else
+    if ( released )
+#endif
     {
         wxSplitterEvent event(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, this);
         event.m_data.pos = m_sashPosition;

 	  	 

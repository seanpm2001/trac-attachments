diff -r -u -p a/samples/propgrid/propgrid.cpp b/samples/propgrid/propgrid.cpp
--- a/samples/propgrid/propgrid.cpp	2020-04-28 08:19:02.684428100 +0200
+++ b/samples/propgrid/propgrid.cpp	2020-04-28 11:39:02.385651900 +0200
@@ -75,6 +75,65 @@
 #include "wx/popupwin.h"
 
 // -----------------------------------------------------------------------
+
+class MyEnumProperty : public wxEnumProperty
+{
+public:
+    MyEnumProperty( const wxString& label = wxPG_LABEL,
+                    const wxString& name = wxPG_LABEL );
+    virtual ~MyEnumProperty();
+
+    virtual bool OnEvent( wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event );
+
+    void SetMyChoices(int nChoices);
+};
+
+MyEnumProperty::MyEnumProperty( const wxString& label, const wxString& name )
+    : wxEnumProperty( label, name )
+{
+    SetEditor( wxPGEditor_ChoiceAndButton );
+    SetMyChoices( 7 );
+}
+
+MyEnumProperty::~MyEnumProperty()
+{
+}
+
+bool MyEnumProperty::OnEvent( wxPropertyGrid* propgrid, wxWindow* primary, wxEvent& event )
+{
+    if ( event.GetEventType() == wxEVT_BUTTON )
+    {
+        wxArrayString setOfChoices;
+        setOfChoices.Add("List of 5 choices");
+        setOfChoices.Add("List of 7 choices");
+        setOfChoices.Add("List of 9 choices");
+        wxSingleChoiceDialog dlg( propgrid->GetParent(), "Please choose a set of choices", "Change choices", setOfChoices );
+        dlg.SetSelection( (GetChoices().GetCount() - 5) / 2 );
+        if ( wxID_OK == dlg.ShowModal() )
+        {
+            int nChoices = dlg.GetSelection() * 2 + 5;
+            SetMyChoices( nChoices );
+        }
+    }
+    return false;
+}
+
+void MyEnumProperty::SetMyChoices(int nChoices)
+{
+    wxArrayString choices;
+    for (int i = 0; i < nChoices; i++)
+        choices.Add( wxString::Format("item %d", i+1) );
+
+    // change set of choices
+    SetChoices( choices ); // <- CRASH: if number of new choices is less than index of last selection
+    if ( GetGrid() && GetGrid()->GetSelectedProperty() == this && GetGrid()->GetEditorControl() )
+        RecreateEditor();
+
+    // select last item of new choices
+    SetChoiceSelection( nChoices - 1 );
+}
+
+// -----------------------------------------------------------------------
 // wxSampleMultiButtonEditor
 //   A sample editor class that has multiple buttons.
 // -----------------------------------------------------------------------
@@ -1021,6 +1080,8 @@ void FormMain::PopulateWithStandardItems
     wxPropertyGridManager* pgman = m_pPropGridManager;
     wxPropertyGridPage* pg = pgman->GetPage("Standard Items");
 
+    pg->Append( new MyEnumProperty( " MyEnumProperty" ) );
+
     // Append is ideal way to add items to wxPropertyGrid.
     pg->Append( new wxPropertyCategory("Appearance",wxPG_LABEL) );
 

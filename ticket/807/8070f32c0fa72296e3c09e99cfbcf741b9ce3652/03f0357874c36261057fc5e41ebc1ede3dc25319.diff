Index: src/generic/statbmpg.cpp
===================================================================
--- src/generic/statbmpg.cpp	(revision 0)
+++ src/generic/statbmpg.cpp	(revision 0)
@@ -0,0 +1,42 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/generic/statbmp.cpp
+// Purpose:     wxGenericStaticBitmap 
+// Author:      Marcin Wojdyr, Stefan Csomor
+// Created:     2008-06-16
+// RCS-ID:      $Id: $
+// Copyright:   wxWidgets developers
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#if wxUSE_STATBMP
+
+#include "wx/generic/statbmpg.h"
+
+
+IMPLEMENT_DYNAMIC_CLASS(wxGenericStaticBitmap, wxStaticBitmapBase)
+
+bool wxGenericStaticBitmap::Create(wxWindow *parent, wxWindowID id, 
+                                   const wxBitmap& bitmap,
+                                   const wxPoint& pos, const wxSize& size,
+                                   long style, const wxString& name)
+{
+    if (! wxControl::Create(parent, id, pos, size, style, 
+                            wxDefaultValidator, name))
+        return false;
+    SetBitmap(bitmap);
+    Connect(wxEVT_PAINT, wxPaintEventHandler(wxGenericStaticBitmap::OnPaint));
+    return true;
+}
+
+void wxGenericStaticBitmap::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+    wxPaintDC dc(this);
+    PrepareDC(dc);
+    if (m_bitmap.Ok())
+        dc.DrawBitmap(m_bitmap, 0, 0, true);
+}
+
+#endif // wxUSE_STATBMP
+
Index: include/wx/generic/statbmpg.h
===================================================================
--- include/wx/generic/statbmpg.h	(revision 0)
+++ include/wx/generic/statbmpg.h	(revision 0)
@@ -0,0 +1,76 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/statbmpg.h
+// Purpose:     wxGenericStaticBitmap header
+// Author:      Marcin Wojdyr, Stefan Csomor
+// Created:     2008-06-16
+// RCS-ID:      $Id: $
+// Copyright:   wxWidgets developers
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GENERIC_STATBMP_H_
+#define _WX_GENERIC_STATBMP_H_
+
+#include "wx/statbmp.h"
+
+class WXDLLIMPEXP_CORE wxGenericStaticBitmap : public wxStaticBitmapBase
+{
+public:
+    wxGenericStaticBitmap() {}
+    wxGenericStaticBitmap(wxWindow *parent,
+                          wxWindowID id,
+                          const wxBitmap& bitmap,
+                          const wxPoint& pos = wxDefaultPosition,
+                          const wxSize& size = wxDefaultSize,
+                          long style = 0,
+                          const wxString& name = wxStaticBitmapNameStr)
+    {
+            Create(parent, id, bitmap, pos, size, style, name);
+    }
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxBitmap& bitmap,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = 0,
+                const wxString& name = wxStaticBitmapNameStr);
+
+    virtual void SetBitmap(const wxBitmap& bitmap)
+    {
+        m_bitmap = bitmap;
+        SetInitialSize(GetBitmapSize());
+        Refresh();
+    }
+
+    virtual wxBitmap GetBitmap() const { return m_bitmap; }
+
+    virtual void SetIcon(const wxIcon& icon) 
+    { 
+        m_bitmap.CopyFromIcon(icon); 
+        SetInitialSize(GetBitmapSize());
+        Refresh();
+    }
+
+#if defined(__WXGTK20__) || defined(__WXMAC__)
+    // icons and bitmaps are really the same thing in wxGTK and wxMac
+    wxIcon GetIcon() const  { return (const wxIcon &)m_bitmap; }
+#endif
+
+
+private:
+    wxSize GetBitmapSize() 
+    {
+        return m_bitmap.Ok() ? wxSize(m_bitmap.GetWidth(), m_bitmap.GetHeight())
+                             : wxSize(16, 16); // this is completely arbitrary
+    }
+
+    void OnPaint(wxPaintEvent& event);
+
+    wxBitmap m_bitmap;
+
+    DECLARE_DYNAMIC_CLASS(wxGenericStaticBitmap)
+};
+
+
+#endif //_WX_GENERIC_STATBMP_H_
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 54304)
+++ build/bakefiles/files.bkl	(working copy)
@@ -761,6 +761,7 @@
     src/generic/spinctlg.cpp
     src/generic/splitter.cpp
     src/generic/srchctlg.cpp
+    src/generic/statbmpg.cpp
     src/generic/textdlgg.cpp
     src/generic/tipwin.cpp
     src/generic/toolbkg.cpp
@@ -822,6 +823,7 @@
     wx/generic/spinctlg.h
     wx/generic/splitter.h
     wx/generic/srchctlg.h
+    wx/generic/statbmpg.h
     wx/generic/textdlgg.h
     wx/generic/treectlg.h
     wx/graphics.h
Index: samples/widgets/statbmp.cpp
===================================================================
--- samples/widgets/statbmp.cpp	(revision 0)
+++ samples/widgets/statbmp.cpp	(revision 0)
@@ -0,0 +1,131 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        statbmp.cpp
+// Purpose:     Part of the widgets sample showing wxStaticBitmap
+// Author:      Marcin Wojdyr
+// Created:     2008-06-19
+// Id:          $Id: $
+// Copyright:   (c) 2008 Marcin Wojdyr
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/log.h"
+
+    #include "wx/button.h"
+    #include "wx/radiobox.h"
+    #include "wx/statbmp.h"
+    #include "wx/statbox.h"
+    #include "wx/textctrl.h"
+#endif
+
+#include "wx/generic/statbmpg.h"
+#include "wx/sizer.h"
+#include "wx/filepicker.h"
+
+#include "widgets.h"
+#include "icons/statbmp.xpm"
+
+
+class StatBmpWidgetsPage : public WidgetsPage
+{
+public:
+    StatBmpWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist)
+        : WidgetsPage(book, imaglist, statbmp_xpm) {}
+
+    virtual void CreateContent();
+    virtual wxControl *GetWidget() const { return m_statbmp; }
+    virtual void RecreateWidget();
+
+private:
+    void OnFileChange(wxFileDirPickerEvent &WXUNUSED(ev)) { RecreateWidget(); }
+    void OnRadioChange(wxCommandEvent &WXUNUSED(ev)) { RecreateWidget(); }
+
+    void OnMouseEvent(wxMouseEvent& WXUNUSED(event))
+    {
+        wxLogMessage(wxT("wxStaticBitmap clicked."));
+    }
+
+    wxStaticBitmapBase *m_statbmp;
+    wxFilePickerCtrl *m_filepicker;
+    wxRadioBox *m_radio;
+    wxStaticBoxSizer *m_sbsizer;
+
+    DECLARE_WIDGETS_PAGE(StatBmpWidgetsPage)
+};
+
+IMPLEMENT_WIDGETS_PAGE(StatBmpWidgetsPage, wxT("StaticBitmap"),
+                       ALL_CTRLS);
+
+void StatBmpWidgetsPage::CreateContent()
+{
+
+    static const wxString choices[] = { "native", "generic" };
+    m_radio = new wxRadioBox(this, wxID_ANY, "implementation",
+                             wxDefaultPosition, wxDefaultSize,
+                             WXSIZEOF(choices), choices);
+
+    m_filepicker = new wxFilePickerCtrl(this, wxID_ANY, "../image/toucan.png");
+
+    m_sbsizer = new wxStaticBoxSizer(wxVERTICAL, this, "wxStaticBitmap inside");
+
+    wxSizer *leftsizer = new wxBoxSizer(wxVERTICAL);
+    leftsizer->Add(m_radio, wxSizerFlags().Expand().Border());
+    leftsizer->Add(m_filepicker, wxSizerFlags().Expand().Border());
+    wxSizer *sizer = new wxBoxSizer(wxHORIZONTAL);
+    sizer->Add(leftsizer, wxSizerFlags().Border());
+    sizer->Add(m_sbsizer, wxSizerFlags().Center());
+    SetSizer(sizer);
+
+    wxInitAllImageHandlers();
+
+    Connect(wxEVT_COMMAND_FILEPICKER_CHANGED, 
+            wxFileDirPickerEventHandler(StatBmpWidgetsPage::OnFileChange));
+    Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, 
+            wxCommandEventHandler(StatBmpWidgetsPage::OnRadioChange));
+
+    m_statbmp = NULL;
+    RecreateWidget();
+}
+
+void StatBmpWidgetsPage::RecreateWidget()
+{
+    delete m_statbmp;
+    wxString filepath = m_filepicker->GetPath();
+    wxImage image(filepath);
+    if (! image.Ok() )
+    {
+        wxLogMessage("Reading image from file '%s' failed.", filepath.c_str());
+        m_statbmp = NULL;
+        return;
+    }
+    if (m_radio->GetSelection() == 0)
+        m_statbmp = new wxStaticBitmap(this, wxID_ANY, wxBitmap(image));
+    else
+        m_statbmp = new wxGenericStaticBitmap(this, wxID_ANY, wxBitmap(image));
+    m_sbsizer->Add(m_statbmp, wxSizerFlags(1).Expand());
+    GetSizer()->Layout();
+    m_statbmp->Connect(wxEVT_LEFT_DOWN, 
+                       wxMouseEventHandler(StatBmpWidgetsPage::OnMouseEvent),
+                       NULL, this);
+    // When switching from generic to native control on wxMSW under Wine, 
+    // the explicit Refresh() is necessary
+    m_statbmp->Refresh(); 
+}
+
Index: samples/widgets/icons/statbmp.xpm
===================================================================
--- samples/widgets/icons/statbmp.xpm	(revision 0)
+++ samples/widgets/icons/statbmp.xpm	(revision 0)
@@ -0,0 +1,40 @@
+/* XPM */
+static const char *statbmp_xpm[] = {
+/* columns rows colors chars-per-pixel */
+"32 32 2 1",
+"  c Gray0",
+"# c none",
+/* pixels */
+"################################",
+"################################",
+"################################",
+"################################",
+"################################",
+"################################",
+"##                            ##",
+"## ########################## ##",
+"## ########################## ##",
+"## #########      ########### ##",
+"## ######## ###### ########## ##",
+"## ####### ######## ######### ##",
+"## ######## ######## ######## ##",
+"## ######### ######## ####### ##",
+"## ########## ###### ######## ##",
+"## ########### #### ######### ##",
+"## ############    ########## ##",
+"## ########################## ##",
+"## ###            ########### ##",
+"## ### ########## ########### ##",
+"## ### ########## ########### ##",
+"## ### ########## ########### ##",
+"## ### ########## ########### ##",
+"## ### ########## ########### ##",
+"## ###            ########### ##",
+"## ########################## ##",
+"## ########################## ##",
+"## ########################## ##",
+"##                            ##",
+"################################",
+"################################",
+"################################"
+};
Index: samples/widgets/widgets.bkl
===================================================================
--- samples/widgets/widgets.bkl	(revision 54304)
+++ samples/widgets/widgets.bkl	(working copy)
@@ -29,6 +29,7 @@
             slider.cpp
             spinbtn.cpp
             static.cpp
+            statbmp.cpp
             textctrl.cpp
             toggle.cpp
             widgets.cpp
Index: interface/statbmp.h
===================================================================
--- interface/statbmp.h	(revision 54304)
+++ interface/statbmp.h	(working copy)
@@ -10,11 +10,12 @@
     @class wxStaticBitmap
     @wxheader{statbmp.h}
 
-    A static bitmap control displays a bitmap. It is meant for display of the
-    small icons in the dialog boxes and is not meant to be a general purpose image
-    display control. In particular, under Windows 9x the size of bitmap is limited
-    to 64*64 pixels and thus you should use your own control if you want to
-    display larger images portably.
+    A static bitmap control displays a bitmap. Native implementations on some 
+    platforms are only meant for display of the small icons in the dialog 
+    boxes. In particular, under Windows 9x the size of bitmap is limited
+    to 64*64 pixels.
+    If you want to display larger images portably, you may use generic 
+    implementation wxGenericStaticBitmap declared in <wx/generic/statbmpg.h>.
 
     @library{wxcore}
     @category{ctrl}

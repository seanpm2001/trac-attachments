Index: wxWidgets-2.9/build/bakefiles/files.bkl
===================================================================
--- wxWidgets-2.9/build/bakefiles/files.bkl	(revision 60454)
+++ wxWidgets-2.9/build/bakefiles/files.bkl	(working copy)
@@ -354,6 +354,7 @@
     src/common/regex.cpp
     src/common/stdpbase.cpp
     src/common/sstream.cpp
+    src/common/stdstream.cpp
     src/common/stopwatch.cpp
     src/common/strconv.cpp
     src/common/stream.cpp
@@ -485,6 +486,7 @@
     wx/stack.h
     wx/stackwalk.h
     wx/stdpaths.h
+    wx/stdstream.h
     wx/stockitem.h
     wx/stopwatch.h
     wx/strconv.h
Index: wxWidgets-2.9/include/wx/stdstream.h
===================================================================
--- wxWidgets-2.9/include/wx/stdstream.h	(revision 0)
+++ wxWidgets-2.9/include/wx/stdstream.h	(revision 0)
@@ -0,0 +1,115 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/stdstream.h
+// Purpose:     Header of std::istream and std::ostream derived wrappers for
+//              wxInputStream and wxOutputStream
+// Author:      Jonathan Liu <net147@gmail.com>
+// Created:     2009-05-02
+// RCS-ID:      $Id$
+// Copyright:   (c) 2009 Jonathan Liu
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_STDSTREAM_H__
+#define _WX_STDSTREAM_H__
+
+#include "wx/defs.h"    // wxUSE_STD_IOSTREAM
+
+#if wxUSE_STD_IOSTREAM
+
+// ==========================================================================
+// Headers
+// ==========================================================================
+
+#include <iosfwd>
+#include <wx/defs.h>
+#include <wx/stream.h>
+
+// ==========================================================================
+// wxStdInputStreamBuffer
+// ==========================================================================
+
+class wxStdInputStreamBuffer : public std::streambuf
+{
+public:
+    wxStdInputStreamBuffer(wxInputStream& stream);
+    virtual ~wxStdInputStreamBuffer() { }
+
+protected:
+    virtual std::streambuf *setbuf(char *s, std::streamsize n);
+    virtual std::streampos seekoff(std::streamoff off,
+                                   std::ios_base::seekdir way,
+                                   std::ios_base::openmode which =
+                                       std::ios_base::in |
+                                       std::ios_base::out);
+    virtual std::streampos seekpos(std::streampos sp,
+                                   std::ios_base::openmode which =
+                                       std::ios_base::in |
+                                       std::ios_base::out);
+    virtual std::streamsize showmanyc();
+    virtual std::streamsize xsgetn(char *s, std::streamsize n);
+    virtual int underflow();
+    virtual int uflow();
+    virtual int pbackfail(int c = EOF);
+
+    wxInputStream& m_stream;
+    int m_lastChar;
+};
+
+// ==========================================================================
+// wxStdInputStream
+// ==========================================================================
+
+class wxStdInputStream : public std::istream
+{
+public:
+    wxStdInputStream(wxInputStream& stream);
+    virtual ~wxStdInputStream() { }
+
+protected:
+    wxStdInputStreamBuffer m_streamBuffer;
+};
+
+// ==========================================================================
+// wxStdOutputStreamBuffer
+// ==========================================================================
+
+class wxStdOutputStreamBuffer : public std::streambuf
+{
+public:
+    wxStdOutputStreamBuffer(wxOutputStream& stream);
+    virtual ~wxStdOutputStreamBuffer() { }
+
+protected:
+    virtual std::streambuf *setbuf(char *s, std::streamsize n);
+    virtual std::streampos seekoff(std::streamoff off,
+                                   std::ios_base::seekdir way,
+                                   std::ios_base::openmode which =
+                                       std::ios_base::in |
+                                       std::ios_base::out);
+    virtual std::streampos seekpos(std::streampos sp,
+                                   std::ios_base::openmode which =
+                                       std::ios_base::in |
+                                       std::ios_base::out);
+    virtual std::streamsize xsputn(const char *s, std::streamsize n);
+    virtual int overflow(int c);
+
+    wxOutputStream& m_stream;
+};
+
+// ==========================================================================
+// wxStdOutputStream
+// ==========================================================================
+
+class wxStdOutputStream : public std::ostream
+{
+public:
+    wxStdOutputStream(wxOutputStream& stream);
+    virtual ~wxStdOutputStream() { }
+
+protected:
+    wxStdOutputStreamBuffer m_streamBuffer;
+};
+
+#endif // wxUSE_STD_IOSTREAM
+
+#endif // _WX_STDSTREAM_H__
Index: wxWidgets-2.9/interface/wx/stdstream.h
===================================================================
--- wxWidgets-2.9/interface/wx/stdstream.h	(revision 0)
+++ wxWidgets-2.9/interface/wx/stdstream.h	(revision 0)
@@ -0,0 +1,190 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        stdstream.h
+// Purpose:     interface of wxStdInputStream, wxStdInputStreamBuffer,
+//              wxStdOutputStream, wxStdOutputStreamBuffer
+// Author:      Jonathan Liu <net147@gmail.com>
+// RCS-ID:      $Id$
+// Copyright:   (c) 2009 Jonathan Liu
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxStdInputStreamBuffer
+
+    wxStdInputStreamBuffer is a std::streambuf derived stream buffer which
+    reads from a wxInputStream.
+
+    Example:
+    @code
+    wxFFileInputStream file("input.txt.gz");
+    wxZlibInputStream gzipInput(file, wxZLIB_GZIP);
+    wxStdInputStreamBuffer gzipStreamBuffer(gzipInput);
+
+    // redirect std::cin to read from compressed file
+    std::streambuf* streamBufferOld = std::cin.rdbuf(&gzipStreamBuffer);
+
+    // prompt for integer
+    int number;
+    std::cout << "Enter an integer: " << std::flush;
+    std::cin >> number;
+    std::cout << std::endl;
+    std::cout << "You entered the integer " << number << "." << std::endl;
+
+    // restore std::cin
+    std::cin.rdbuf(streamBufferOld);
+    @endcode
+
+    @library{wxbase}
+    @category{streams}
+
+    @see wxInputStream, wxStdInputStream
+*/
+class wxStdInputStreamBuffer : public std::streambuf
+{
+public:
+    /**
+        Creates a std::steambuf derived stream buffer which reads from a
+        wxInputStream.
+
+        @param stream
+            Stream to read from.
+    */
+    wxStdInputStreamBuffer(wxInputStream& stream);
+
+    /**
+        Destructor.
+    */
+    virtual ~wxStdInputStreamBuffer() { }
+};
+
+/**
+    @class wxStdInputStream
+
+    wxStdInputStream is a std::istream derived stream buffer which reads from
+    a wxInputStream.
+
+    Example:
+    @code
+    wxFFileInputStream file("words.txt");
+    wxStdInputStream in(file);
+    std::vector<std::string> words;
+
+    // read words from stdin
+    std::copy(std::istream_iterator<std::string>(in),
+              std::istream_iterator<std::string>(),
+              std::back_inserter(words));
+
+    // sort and remove duplicates
+    std::sort(words.begin(), words.end());
+    words.resize(std::unique(words.begin(), words.end()) - words.begin());
+
+    // print words
+    std::copy(words.begin(), words.end(),
+              std::ostream_iterator<std::string>(std::cout, "\n"));
+    @endcode
+
+    @library{wxbase}
+    @category{streams}
+
+    @see wxInputStream, wxStdInputStreamBuffer
+*/
+class wxStdInputStream : public std::istream
+{
+public:
+    /**
+        Creates a std::istream derived stream which reads from a
+        wxInputStream.
+
+        @param stream
+            Stream to read from.
+    */
+    wxStdInputStream(wxInputStream& stream);
+
+    /**
+        Destructor.
+    */
+    virtual ~wxStdInputStream() { }
+};
+
+/**
+    @class wxStdOutputStreamBuffer
+
+    wxStdOutputStreamBuffer is a std::streambuf derived stream buffer which
+    writes to a wxOutputStream.
+
+    Example:
+    @code
+    wxFFileOutputStream file("cout.txt.gz");
+    wxZlibOutputStream gzipOutput(file, -1, wxZLIB_GZIP);
+    wxStdOutputStreamBuffer gzipStreamBuffer(gzipOutput);
+
+    // redirect std::cout to cout.txt.gz using GZIP compression
+    std::streambuf* streamBufferOld = std::cout.rdbuf(&gzipStreamBuffer);
+
+    // write to std::cout
+    std::cout << "Hello world!" << std::endl;
+
+    // restore std::cout
+    std::cout.rdbuf(streamBufferOld);
+    @endcode
+
+    @library{wxbase}
+    @category{streams}
+
+    @see wxOutputStream, wxStdOutputStream
+*/
+class wxStdOutputStreamBuffer : public std::streambuf
+{
+public:
+    /**
+        Creates a std::steambuf derived stream buffer which writes to a
+        wxOutputStream.
+
+        @param stream
+            Stream to write to.
+    */
+    wxStdOutputStreamBuffer(wxOutputStream& stream);
+
+    /**
+        Destructor.
+    */
+    virtual ~wxStdOutputStreamBuffer() { }
+};
+
+/**
+    @class wxStdOutputStream
+
+    wxStdOutputStream is a std::ostream derived stream which writes to a
+    wxOutputStream.
+
+    Example:
+    @code
+    wxFFileOutputStream file("out.txt.gz");
+    wxZlibOutputStream gzipOutput(file, -1, wxZLIB_GZIP);
+    wxStdOutputStream out(gzipOutput);
+
+    out << "Hello world!" << std::endl;
+    @endcode
+
+    @library{wxbase}
+    @category{streams}
+
+    @see wxOutputStream, wxStdOutputStreamBuffer
+*/
+class wxStdOutputStream : public std::ostream
+{
+public:
+    /**
+        Creates a std::ostream derived stream which writes to a
+        wxOutputStream.
+
+        @param stream
+            Stream to write to.
+    */
+    wxStdOutputStream(wxOutputStream& stream);
+
+    /**
+        Destructor.
+    */
+    virtual ~wxStdOutputStream() { }
+};
Index: wxWidgets-2.9/src/common/stdstream.cpp
===================================================================
--- wxWidgets-2.9/src/common/stdstream.cpp	(revision 0)
+++ wxWidgets-2.9/src/common/stdstream.cpp	(revision 0)
@@ -0,0 +1,267 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/stdstream.h
+// Purpose:     Implementation of std::istream and std::ostream derived
+//              wrappers for wxInputStream and wxOutputStream
+// Author:      Jonathan Liu <net147@gmail.com>
+// Created:     2009-05-02
+// RCS-ID:      $Id$
+// Copyright:   (c) 2009 Jonathan Liu
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ==========================================================================
+// Declarations
+// ==========================================================================
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_STD_IOSTREAM
+
+#ifndef WX_PRECOMP
+#endif
+
+#include "wx/stdstream.h"
+
+#include <ios>
+#include <istream>
+#include <ostream>
+#include <streambuf>
+
+// ==========================================================================
+// Helpers
+// ==========================================================================
+
+static inline bool
+IosSeekDirToWxSeekMode(std::ios_base::seekdir way,
+                       wxSeekMode& seekMode)
+{
+    switch ( way )
+    {
+        case std::ios_base::beg:
+            seekMode = wxFromStart;
+            break;
+        case std::ios_base::cur:
+            seekMode = wxFromCurrent;
+            break;
+        case std::ios_base::end:
+            seekMode = wxFromEnd;
+            break;
+        default:
+            return false;
+    }
+
+    return true;
+}
+
+// ==========================================================================
+// wxStdInputStreamBuffer
+// ==========================================================================
+
+wxStdInputStreamBuffer::wxStdInputStreamBuffer(wxInputStream& stream) :
+    m_stream(stream), m_lastChar(EOF)
+{
+}
+
+std::streambuf *
+wxStdInputStreamBuffer::setbuf(char *WXUNUSED(s),
+                               std::streamsize WXUNUSED(n))
+{
+    return NULL;
+}
+
+std::streampos
+wxStdInputStreamBuffer::seekoff(std::streamoff off,
+                                std::ios_base::seekdir way,
+                                std::ios_base::openmode which)
+{
+    wxSeekMode seekMode;
+
+    if ( !IosSeekDirToWxSeekMode(way, seekMode) )
+        return -1;
+    if ( !(which & std::ios_base::in) )
+        return -1;
+
+    off_t newPos = m_stream.SeekI((off_t) off, seekMode);
+
+    if ( newPos != wxInvalidOffset )
+        return (std::streampos) newPos;
+    else
+        return -1;
+}
+
+std::streampos
+wxStdInputStreamBuffer::seekpos(std::streampos sp,
+                                std::ios_base::openmode which)
+{
+    if ( !(which & std::ios_base::in) )
+        return -1;
+
+    off_t newPos = m_stream.SeekI((off_t) sp);
+
+    if ( newPos != wxInvalidOffset )
+        return (std::streampos) newPos;
+    else
+        return -1;
+}
+
+std::streamsize
+wxStdInputStreamBuffer::showmanyc()
+{
+    if ( m_stream.CanRead() && (off_t) m_stream.GetSize() > m_stream.TellI() )
+        return m_stream.GetSize() - m_stream.TellI();
+    else
+        return 0;
+}
+
+std::streamsize
+wxStdInputStreamBuffer::xsgetn(char *s, std::streamsize n)
+{
+    m_stream.Read((void *) s, (size_t) n);
+
+    std::streamsize read = m_stream.LastRead();
+
+    if ( read > 0 )
+        m_lastChar = (unsigned char) s[read - 1];
+
+    return read;
+}
+
+int
+wxStdInputStreamBuffer::underflow()
+{
+    int ch = m_stream.GetC();
+
+    if ( m_stream.LastRead() == 1 )
+    {
+        m_stream.Ungetch((char) ch);
+        return ch;
+    }
+    else
+    {
+        return EOF;
+    }
+}
+
+int
+wxStdInputStreamBuffer::uflow()
+{
+    int ch = m_stream.GetC();
+
+    if ( m_stream.LastRead() == 1 )
+    {
+        m_lastChar = ch;
+        return ch;
+    }
+    else
+    {
+        return EOF;
+    }
+}
+
+int
+wxStdInputStreamBuffer::pbackfail(int c)
+{
+    if ( c == EOF )
+    {
+        if ( m_lastChar == EOF )
+            return EOF;
+
+        c = m_lastChar;
+        m_lastChar = EOF;
+    }
+
+    return m_stream.Ungetch((char) c) ? c : EOF;
+}
+
+// ==========================================================================
+// wxStdInputStream
+// ==========================================================================
+
+wxStdInputStream::wxStdInputStream(wxInputStream& stream) :
+    std::istream(NULL), m_streamBuffer(stream)
+{
+    std::ios::init(&m_streamBuffer);
+}
+
+// ==========================================================================
+// wxStdOutputStreamBuffer
+// ==========================================================================
+
+wxStdOutputStreamBuffer::wxStdOutputStreamBuffer(wxOutputStream& stream) :
+    m_stream(stream)
+{
+}
+
+std::streambuf *
+wxStdOutputStreamBuffer::setbuf(char *WXUNUSED(s),
+                                std::streamsize WXUNUSED(n))
+{
+    return NULL;
+}
+
+std::streampos
+wxStdOutputStreamBuffer::seekoff(std::streamoff off,
+                                 std::ios_base::seekdir way,
+                                 std::ios_base::openmode which)
+{
+    wxSeekMode seekMode;
+
+    if ( !IosSeekDirToWxSeekMode(way, seekMode) )
+        return -1;
+    if ( !(which & std::ios_base::out) )
+        return -1;
+
+    off_t newPos = m_stream.SeekO((off_t) off, seekMode);
+
+    if ( newPos != wxInvalidOffset )
+        return (std::streampos) newPos;
+    else
+        return -1;
+}
+
+std::streampos
+wxStdOutputStreamBuffer::seekpos(std::streampos sp,
+                                 std::ios_base::openmode which)
+{
+    if ( !(which & std::ios_base::out) )
+        return -1;
+
+    off_t newPos = m_stream.SeekO((off_t) sp);
+
+    if ( newPos != wxInvalidOffset )
+        return (std::streampos) newPos;
+    else
+        return -1;
+}
+
+std::streamsize
+wxStdOutputStreamBuffer::xsputn(const char *s,
+                                std::streamsize n)
+{
+    m_stream.Write((const void *) s, (size_t) n);
+    return (std::streamsize) m_stream.LastWrite();
+}
+
+int
+wxStdOutputStreamBuffer::overflow(int c)
+{
+    m_stream.PutC(c);
+    return m_stream.IsOk() ? c : EOF;
+}
+
+// ==========================================================================
+// wxStdOutputStream
+// ==========================================================================
+
+wxStdOutputStream::wxStdOutputStream(wxOutputStream& stream) :
+    std::ostream(NULL), m_streamBuffer(stream)
+{
+    std::ios::init(&m_streamBuffer);
+}
+
+#endif // wxUSE_STD_IOSTREAM
Index: wxWidgets-2.9/tests/test.bkl
===================================================================
--- wxWidgets-2.9/tests/test.bkl	(revision 60454)
+++ wxWidgets-2.9/tests/test.bkl	(working copy)
@@ -76,6 +76,7 @@
             streams/memstream.cpp
             streams/socketstream.cpp
             streams/sstream.cpp
+            streams/stdstream.cpp
             streams/tempfile.cpp
             streams/textstreamtest.cpp
             streams/zlibstream.cpp
Index: wxWidgets-2.9/tests/streams/stdstream.cpp
===================================================================
--- wxWidgets-2.9/tests/streams/stdstream.cpp	(revision 0)
+++ wxWidgets-2.9/tests/streams/stdstream.cpp	(revision 0)
@@ -0,0 +1,439 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/streams/stdstream.cpp
+// Purpose:     Test wxStdInputStreamBuffer/wxStdOutputStreamBuffer
+// Author:      Jonathan Liu <net147@gmail.com>
+// RCS-ID:      $Id$
+// Copyright:   (c) 2009 Jonathan Liu
+// Licence:     wxWidgets licence
+///////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx/wx.h".
+// and "wx/cppunit.h"
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#if wxUSE_STD_IOSTREAM
+
+#include "wx/stdstream.h"
+
+#include <string.h>
+#include "wx/mstream.h"
+
+// ==========================================================================
+// Definitions
+// ==========================================================================
+
+const size_t TEST_SIZE = 384;
+
+// ==========================================================================
+// Test class
+// ==========================================================================
+
+class StdStreamTestCase : public CppUnit::TestCase
+{
+public:
+    StdStreamTestCase();
+
+private:
+    CPPUNIT_TEST_SUITE( StdStreamTestCase );
+        // Input buffer management and positioning
+        CPPUNIT_TEST( InputBuffer_pubsetbuf );
+        CPPUNIT_TEST( InputBuffer_pubseekoff );
+        CPPUNIT_TEST( InputBuffer_pubseekpos );
+        CPPUNIT_TEST( InputBuffer_pubsync );
+
+        // Input functions
+        CPPUNIT_TEST( InputBuffer_in_avail );
+        CPPUNIT_TEST( InputBuffer_snextc );
+        CPPUNIT_TEST( InputBuffer_sbumpc );
+        CPPUNIT_TEST( InputBuffer_sgetc );
+        CPPUNIT_TEST( InputBuffer_sgetn );
+        CPPUNIT_TEST( InputBuffer_sputbackc );
+        CPPUNIT_TEST( InputBuffer_sungetc );
+
+        // Output buffer management and positioning
+        CPPUNIT_TEST( OutputBuffer_pubsetbuf );
+        CPPUNIT_TEST( OutputBuffer_pubseekoff );
+        CPPUNIT_TEST( OutputBuffer_pubseekpos );
+        CPPUNIT_TEST( OutputBuffer_pubsync );
+        
+        // Output functions
+        CPPUNIT_TEST( OutputBuffer_sputc );
+        CPPUNIT_TEST( OutputBuffer_sputn );
+    CPPUNIT_TEST_SUITE_END();
+
+    // Input buffer management and positioning
+    void InputBuffer_pubsetbuf();
+    void InputBuffer_pubseekoff();
+    void InputBuffer_pubseekpos();
+    void InputBuffer_pubsync();
+
+    // Input functions
+    void InputBuffer_in_avail();
+    void InputBuffer_snextc();
+    void InputBuffer_sbumpc();
+    void InputBuffer_sgetc();
+    void InputBuffer_sgetn();
+    void InputBuffer_sputbackc();
+    void InputBuffer_sungetc();
+
+    // Output buffer management and positioning
+    void OutputBuffer_pubsetbuf();
+    void OutputBuffer_pubseekoff();
+    void OutputBuffer_pubseekpos();
+    void OutputBuffer_pubsync();
+
+    // Output functions
+    void OutputBuffer_sputc();
+    void OutputBuffer_sputn();
+
+    char m_testData[TEST_SIZE];
+
+    DECLARE_NO_COPY_CLASS(StdStreamTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( StdStreamTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( StdStreamTestCase,
+                                       "StdStreamTestCase" );
+
+// ==========================================================================
+// Implementation
+// ==========================================================================
+
+StdStreamTestCase::StdStreamTestCase()
+{
+    for (size_t i = 0; i < TEST_SIZE; ++i)
+        m_testData[i] = (i & 0xFF);
+}
+
+// --------------------------------------------------------------------------
+// Input buffer management and positioning
+// --------------------------------------------------------------------------
+
+void StdStreamTestCase::InputBuffer_pubsetbuf()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+    char testBuffer[TEST_SIZE];
+
+    CPPUNIT_ASSERT(buffer.pubsetbuf(testBuffer, TEST_SIZE) == NULL);
+}
+
+void StdStreamTestCase::InputBuffer_pubseekoff()
+{
+    const char *testData = "0123456789";
+    wxMemoryInputStream stream(testData, 10);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 2,
+                         buffer.pubseekoff(2, std::ios_base::beg,
+                                           std::ios_base::in));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(2, std::ios_base::beg,
+                                           std::ios_base::out));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 4,
+                         buffer.pubseekoff(2, std::ios_base::cur));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(2, std::ios_base::cur,
+                                           std::ios_base::out));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 8,
+                         buffer.pubseekoff(-2, std::ios_base::end));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(-2, std::ios_base::end,
+                                           std::ios_base::out));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(3, std::ios_base::cur));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(3, std::ios_base::cur,
+                                           std::ios_base::out));
+}
+
+void StdStreamTestCase::InputBuffer_pubseekpos()
+{
+    const char *testData = "0123456789";
+    wxMemoryInputStream stream(testData, 10);
+    wxStdInputStreamBuffer buffer(stream);
+
+    for (size_t i = 9; i < 10; --i)
+    {
+        if (i % 2 == 0)
+            CPPUNIT_ASSERT_EQUAL(i, buffer.pubseekpos(i));
+        else
+            CPPUNIT_ASSERT_EQUAL(i, buffer.pubseekpos(i, std::ios_base::in));
+
+        CPPUNIT_ASSERT_EQUAL('0' + i, buffer.sgetc());
+    }
+}
+
+void StdStreamTestCase::InputBuffer_pubsync()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.pubsync() == 0);
+}
+
+// --------------------------------------------------------------------------
+// Input functions
+// --------------------------------------------------------------------------
+
+void StdStreamTestCase::InputBuffer_in_avail()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE / 2];
+
+    buffer.sgetn(data, TEST_SIZE / 2);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE - TEST_SIZE / 2, buffer.in_avail());
+}
+
+void StdStreamTestCase::InputBuffer_snextc()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE];
+
+    data[0] = buffer.sgetc();
+
+    for (size_t i = 1; i < TEST_SIZE; ++i)
+        data[i] = buffer.snextc();
+
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT_EQUAL((int)(unsigned char) (m_testData[TEST_SIZE - 1]),
+                         buffer.sbumpc());
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+void StdStreamTestCase::InputBuffer_sbumpc()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE];
+
+    for (size_t i = 0; i < TEST_SIZE; ++i)
+        data[i] = buffer.sbumpc();
+
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+void StdStreamTestCase::InputBuffer_sgetc()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE];
+
+    for (size_t i = 0; i < TEST_SIZE; ++i) {
+        data[i] = buffer.sgetc();
+        buffer.sbumpc();
+    }
+
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+void StdStreamTestCase::InputBuffer_sgetn()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE * 2];
+    std::streamsize read = buffer.sgetn(data, TEST_SIZE * 2);
+
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, read);
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+void StdStreamTestCase::InputBuffer_sputbackc()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE];
+    std::streamsize read = buffer.sgetn(data, TEST_SIZE);
+
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, read);
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+
+    char putBackChar = m_testData[TEST_SIZE - 1] + 147;
+
+    CPPUNIT_ASSERT_EQUAL((int) putBackChar, buffer.sputbackc(putBackChar));
+    CPPUNIT_ASSERT_EQUAL((int) putBackChar, buffer.sgetc());
+    CPPUNIT_ASSERT_EQUAL((int) putBackChar, buffer.sbumpc());
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+void StdStreamTestCase::InputBuffer_sungetc()
+{
+    wxMemoryInputStream stream(m_testData, TEST_SIZE);
+    wxStdInputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.sgetc() != EOF);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, buffer.in_avail());
+
+    char data[TEST_SIZE];
+    std::streamsize read = buffer.sgetn(data, TEST_SIZE);
+
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, read);
+    CPPUNIT_ASSERT(memcmp(data, m_testData, TEST_SIZE) == 0);
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+
+    CPPUNIT_ASSERT_EQUAL((int) m_testData[TEST_SIZE - 1], buffer.sungetc());
+    CPPUNIT_ASSERT_EQUAL((int) m_testData[TEST_SIZE - 1], buffer.sgetc());
+    CPPUNIT_ASSERT_EQUAL((int) m_testData[TEST_SIZE - 1], buffer.sbumpc());
+    CPPUNIT_ASSERT(buffer.sgetc() == EOF);
+}
+
+// --------------------------------------------------------------------------
+// Output buffer management and positioning
+// --------------------------------------------------------------------------
+
+void StdStreamTestCase::OutputBuffer_pubsetbuf()
+{
+    wxMemoryOutputStream stream;
+    wxStdOutputStreamBuffer buffer(stream);
+    char testBuffer[TEST_SIZE];
+
+    CPPUNIT_ASSERT(buffer.pubsetbuf(testBuffer, TEST_SIZE) == NULL);
+}
+
+void StdStreamTestCase::OutputBuffer_pubseekoff()
+{
+    char testData[] = "0123456789";
+    wxMemoryOutputStream stream(testData, 10);
+    wxStdOutputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 2,
+                         buffer.pubseekoff(2, std::ios_base::beg,
+                                           std::ios_base::out));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(2, std::ios_base::beg,
+                                           std::ios_base::in));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 4,
+                         buffer.pubseekoff(2, std::ios_base::cur));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(2, std::ios_base::cur,
+                                           std::ios_base::in));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) 8,
+                         buffer.pubseekoff(-2, std::ios_base::end));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(-2, std::ios_base::end,
+                                           std::ios_base::in));
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(3, std::ios_base::cur));
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekoff(3, std::ios_base::cur,
+                                           std::ios_base::in));
+}
+
+void StdStreamTestCase::OutputBuffer_pubseekpos()
+{
+    char testData[] = "0123456789";
+    wxMemoryOutputStream stream(testData, 10);
+    wxStdOutputStreamBuffer buffer(stream);
+
+    for (size_t i = 9; i < 10; --i)
+    {
+        if (i % 2 == 0)
+        {
+            CPPUNIT_ASSERT_EQUAL(i, buffer.pubseekpos(i));
+        }
+        else
+        {
+            CPPUNIT_ASSERT_EQUAL(i,
+                                 buffer.pubseekpos(i, std::ios_base::out));
+        }
+
+        CPPUNIT_ASSERT_EQUAL('0' + (9 - i), buffer.sputc('0' + (9 - i)));
+    }
+
+    CPPUNIT_ASSERT(memcmp(testData, "9876543210", 10) == 0);
+
+    CPPUNIT_ASSERT_EQUAL((std::streampos) -1,
+                         buffer.pubseekpos(5, std::ios_base::in));
+}
+
+void StdStreamTestCase::OutputBuffer_pubsync()
+{
+    wxMemoryOutputStream stream;
+    wxStdOutputStreamBuffer buffer(stream);
+
+    CPPUNIT_ASSERT(buffer.pubsync() == 0);
+}
+
+// --------------------------------------------------------------------------
+// Output functions
+// --------------------------------------------------------------------------
+
+void StdStreamTestCase::OutputBuffer_sputc()
+{
+    wxMemoryOutputStream stream;
+    wxStdOutputStreamBuffer buffer(stream);
+
+    for (size_t i = 0; i < TEST_SIZE; ++i)
+        buffer.sputc(m_testData[i]);
+
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, stream.GetSize());
+
+    char result[TEST_SIZE];
+
+    stream.CopyTo(result, TEST_SIZE);
+    CPPUNIT_ASSERT(memcmp(result, m_testData, TEST_SIZE) == 0);
+}
+
+void StdStreamTestCase::OutputBuffer_sputn()
+{
+    wxMemoryOutputStream stream;
+    wxStdOutputStreamBuffer buffer(stream);
+
+    buffer.sputn(m_testData, TEST_SIZE);
+    CPPUNIT_ASSERT_EQUAL(TEST_SIZE, stream.GetSize());
+
+    char result[TEST_SIZE];
+
+    stream.CopyTo(result, TEST_SIZE);
+    CPPUNIT_ASSERT(memcmp(result, m_testData, TEST_SIZE) == 0);
+}
+
+#endif // wxUSE_STD_IOSTREAM

Index: include/wx/math.h
===================================================================
--- include/wx/math.h	(revision 48019)
+++ include/wx/math.h	(working copy)
@@ -132,8 +132,16 @@
     extern "C" {
 #endif
     /* functions from common/extended.c */
-    extern wxFloat64 ConvertFromIeeeExtended(const wxInt8 *bytes);
-    extern void ConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes);
+    WXDLLEXPORT wxFloat64 wxConvertFromIeeeExtended(const wxInt8 *bytes);
+    WXDLLEXPORT void wxConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes);
+
+#if WXWIN_COMPATIBILITY_2_8
+    /* this functions DEPRECATED !
+       use wxConvertFromIeeeExtended() and wxConvertToIeeeExtended() */
+    wxDEPRECATED( WXDLLEXPORT wxFloat64 ConvertFromIeeeExtended(const wxInt8 *bytes) );
+    wxDEPRECATED( WXDLLEXPORT void ConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes) );
+#endif // WXWIN_COMPATIBILITY_2_8
+
 #ifdef __cplusplus
     }
 #endif
Index: src/common/datstrm.cpp
===================================================================
--- src/common/datstrm.cpp	(revision 48019)
+++ src/common/datstrm.cpp	(working copy)
@@ -92,7 +92,7 @@
   char buf[10];
 
   m_input->Read(buf, 10);
-  return ConvertFromIeeeExtended((const wxInt8 *)buf);
+  return wxConvertFromIeeeExtended((const wxInt8 *)buf);
 #else
   return 0.0;
 #endif
@@ -529,7 +529,7 @@
   char buf[10];
 
 #if wxUSE_APPLE_IEEE
-  ConvertToIeeeExtended(d, (wxInt8 *)buf);
+  wxConvertToIeeeExtended(d, (wxInt8 *)buf);
 #else
 #if !defined(__VMS__) && !defined(__GNUG__)
 # pragma warning "wxDataOutputStream::WriteDouble() not using IeeeExtended - will not work!"
Index: src/common/extended.c
===================================================================
--- src/common/extended.c	(revision 48019)
+++ src/common/extended.c	(working copy)
@@ -105,7 +105,7 @@
  * and a 64-bit mantissa, with no hidden bit.
  ****************************************************************/
 
-wxFloat64 ConvertFromIeeeExtended(const wxInt8 *bytes)
+WXDLLEXPORT wxFloat64 wxConvertFromIeeeExtended(const wxInt8 *bytes)
 {
     wxFloat64 f;
     wxInt32 expon;
@@ -145,7 +145,7 @@
 /****************************************************************/
 
 
-void ConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes)
+WXDLLEXPORT void wxConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes)
 {
     wxInt32 sign;
     wxInt32 expon;
@@ -191,6 +191,16 @@
     bytes[9] = loMant;
 }
 
+#if WXWIN_COMPATIBILITY_2_8
+WXDLLEXPORT wxFloat64 ConvertFromIeeeExtended(const wxInt8 *bytes)
+{
+    return wxConvertFromIeeeExtended(bytes);
+}
 
+WXDLLEXPORT void ConvertToIeeeExtended(wxFloat64 num, wxInt8 *bytes)
+{
+    wxConvertToIeeeExtended(num, bytes);
+}
+#endif // WXWIN_COMPATIBILITY_2_8
 
 #endif /* wxUSE_APPLE_IEEE */

 	  	 

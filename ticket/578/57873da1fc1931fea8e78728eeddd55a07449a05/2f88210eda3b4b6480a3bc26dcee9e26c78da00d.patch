Index: samples/scroll/scroll.cpp
===================================================================
--- samples/scroll/scroll.cpp	(revision 51165)
+++ samples/scroll/scroll.cpp	(working copy)
@@ -24,6 +24,7 @@
 #include "wx/listctrl.h"
 #include "wx/sizer.h"
 #include "wx/log.h"
+#include "wx/tokenzr.h"
 
 const long ID_QUIT       = wxID_EXIT;
 const long ID_ABOUT      = wxID_ABOUT;
@@ -234,6 +235,27 @@
     virtual void OnDraw(wxDC& dc);
 };
 
+/////////////////////////////////////////////////////////////////////////////
+// wxTextProvider
+// Also useful together with wxPrintout (for which the m_font member is used)
+
+class wxTextProvider
+{
+// Attributes
+public:
+   wxFont m_font;
+
+// Construction
+public:
+   wxTextProvider() : m_font() {}
+
+// Implementation
+public:
+   virtual ~wxTextProvider() {}
+   virtual size_t GetNumberOfLines() const = 0;
+   virtual wxString GetLineText(size_t lineNo) = 0;
+};
+
 // ----------------------------------------------------------------------------
 // MyAutoTimedScrollingWindow: implements a text viewer with simple blocksize
 //                             selection to test auto-scrolling functionality
@@ -242,21 +264,29 @@
 class MyAutoTimedScrollingWindow : public wxScrolledWindow
 {
 protected:  // member data
-    // test data variables
-    static const wxChar* sm_testData;
-    static const int sm_lineCnt; // line count
-    static const int sm_lineLen; // line length in characters
     // sizes for graphical data
     wxCoord m_fontH, m_fontW;
     // selection tracking
     wxPoint m_selStart; // beginning of blockwise selection
     wxPoint m_cursor;   // end of blockwise selection (mouse position)
+    int m_desired_line_len;
 
-protected:  // gui stuff
+    wxTextProvider* m_text;
+
+protected:
     wxFont m_font;
+    void Construct(void);
 
 public: // interface
-    MyAutoTimedScrollingWindow( wxWindow* parent );
+    MyAutoTimedScrollingWindow(wxTextProvider*);
+    MyAutoTimedScrollingWindow(wxWindow* parent, wxTextProvider*);
+    bool Create(wxWindow *parent, 
+                wxWindowID winid = wxID_ANY,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxScrolledWindowStyle,
+                const wxString& name = wxPanelNameStr);
+
     wxRect DeviceCoordsToGraphicalChars(wxRect updRect) const;
     wxPoint DeviceCoordsToGraphicalChars(wxPoint pos) const;
     wxPoint GraphicalCharToDeviceCoords(wxPoint pos) const;
@@ -269,7 +299,7 @@
     static wxRect DCNormalize(wxCoord x, wxCoord y, wxCoord w, wxCoord h);
 
 protected: // event stuff
-    void OnDraw(wxDC& dc);
+    virtual void OnDraw(wxDC& dc);
     void OnMouseLeftDown(wxMouseEvent& event);
     void OnMouseLeftUp(wxMouseEvent& event);
     void OnMouseMove(wxMouseEvent& event);
@@ -279,6 +309,31 @@
     DECLARE_EVENT_TABLE()
 };
 
+class AutoTimedScrollingWindowTest : public MyAutoTimedScrollingWindow
+{
+public:
+    static const int sm_lineLen; // desired line length in characters
+    static const wxString sm_testData;
+    class MyTextProvider : public wxTextProvider
+    {
+    public:
+        MyTextProvider();
+        wxArrayString m_lines;
+        virtual size_t GetNumberOfLines() const;
+        virtual wxString GetLineText(size_t lineNo);
+    };
+public:
+    AutoTimedScrollingWindowTest( wxWindow* parent) : MyAutoTimedScrollingWindow(new MyTextProvider)
+    {
+       m_desired_line_len = sm_lineLen;
+       Create(parent);
+    }
+    virtual ~AutoTimedScrollingWindowTest()
+    {
+        wxDELETE(m_text)
+    }
+};
+
 // ----------------------------------------------------------------------------
 // MyFrame
 // ----------------------------------------------------------------------------
@@ -630,7 +685,7 @@
     subsizer->Add( sizerBtm, 1, wxEXPAND );
 
     topsizer->Add( subsizer, 1, wxEXPAND );
-    topsizer->Add( new MyAutoTimedScrollingWindow( this ), 1, wxEXPAND );
+    topsizer->Add( new AutoTimedScrollingWindowTest( this ), 1, wxEXPAND );
 
     SetSizer( topsizer );
 }
@@ -674,8 +729,8 @@
     wxFrame *frame = new MyFrame();
     frame->Show( true );
 
-    frame = new MySimpleFrame();
-    frame->Show();
+    //frame = new MySimpleFrame();
+    //frame->Show();
 
     return true;
 }
@@ -743,22 +798,46 @@
     EVT_SCROLLWIN(MyAutoTimedScrollingWindow::OnScroll)
 END_EVENT_TABLE()
 
-MyAutoTimedScrollingWindow::MyAutoTimedScrollingWindow(wxWindow* parent)
-    : wxScrolledWindow(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize
-            //, wxSUNKEN_BORDER) // can't seem to do it this way
-            , wxVSCROLL | wxHSCROLL | wxSUNKEN_BORDER)
-    , m_selStart(-1, -1), m_cursor(-1, -1)
-    , m_font(9, wxFONTFAMILY_TELETYPE, wxFONTSTYLE_NORMAL
-            , wxFONTWEIGHT_NORMAL)
+void MyAutoTimedScrollingWindow::Construct(void)
 {
-    wxClientDC dc(this);
-    // query dc for text size
-    dc.SetFont(m_font);
-    dc.GetTextExtent(wxString(_T("A")), &m_fontW, &m_fontH);
-    // set up the virtual window
-    SetScrollbars(m_fontW, m_fontH, sm_lineLen, sm_lineCnt);
+    m_selStart = wxPoint(-1, -1);
+    m_cursor   = wxPoint(-1, -1);
+    m_font = wxFont(9, wxFONTFAMILY_TELETYPE, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);
+    m_desired_line_len = 79;
+    m_fontW = m_fontH = 0;
 }
 
+MyAutoTimedScrollingWindow::MyAutoTimedScrollingWindow(wxTextProvider* text) : wxScrolledWindow(), m_text(text)
+{
+    Construct();
+}
+
+MyAutoTimedScrollingWindow::MyAutoTimedScrollingWindow(wxWindow* parent, wxTextProvider* text)
+    : wxScrolledWindow(), m_text(text)
+{
+    Construct();
+    Create(parent);
+}
+
+bool MyAutoTimedScrollingWindow::Create(wxWindow *parent, wxWindowID winid,
+                const wxPoint& pos, const wxSize& size,
+                long style, const wxString& name)
+{
+    bool ok = wxScrolledWindow::Create(parent, winid, pos, size, style, name);
+            //, wxSUNKEN_BORDER) // can't seem to do it this way
+            //, wxVSCROLL | wxHSCROLL | wxSUNKEN_BORDER);
+    if (ok)
+    {
+        wxClientDC dc(this);
+        // query dc for text size
+        dc.SetFont(m_font);
+        dc.GetTextExtent(wxString(_T("A")), &m_fontW, &m_fontH);
+        // set up the virtual window
+        SetScrollbars(m_fontW, m_fontH, m_desired_line_len, m_text->GetNumberOfLines());
+    }
+    return ok;
+}
+
 wxRect MyAutoTimedScrollingWindow::DeviceCoordsToGraphicalChars
         (wxRect updRect) const
 {
@@ -929,25 +1008,23 @@
 void MyAutoTimedScrollingWindow::OnDraw(wxDC& dc)
 {
     dc.SetFont(m_font);
-    wxBrush normBrush(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)
-            , wxSOLID);
-    wxBrush selBrush(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT)
-            , wxSOLID);
+    wxBrush normBrush(GetBackgroundColour(), wxSOLID);
+    wxBrush selBrush(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT), wxSOLID);
     dc.SetPen(*wxTRANSPARENT_PEN);
-    const wxString str = sm_testData;
-    size_t strLength = str.length();
-    wxString::const_iterator str_i;
-
+    
     // draw the characters
     // 1. for each update region
     for (wxRegionIterator upd(GetUpdateRegion()); upd; ++upd) {
         wxRect updRect = upd.GetRect();
         wxRect updRectInGChars(DeviceCoordsToGraphicalChars(updRect));
         // 2. for each row of chars in the update region
-        for (int chY = updRectInGChars.y
-                ; chY <= updRectInGChars.y + updRectInGChars.height; ++chY) {
+        for (int chY = updRectInGChars.y; 
+                (chY <= updRectInGChars.y + updRectInGChars.height) 
+             && (chY < (int)m_text->GetNumberOfLines()); 
+             chY++)
+        {
+            const wxString str = m_text->GetLineText(chY);
             // 3. for each character in the row
-            bool isFirstX = true;
             for (int chX = updRectInGChars.x
                     ; chX <= updRectInGChars.x + updRectInGChars.width
                     ; ++chX) {
@@ -958,26 +1035,19 @@
                             (wxSYS_COLOUR_HIGHLIGHTTEXT));
                 } else {
                     dc.SetBrush(normBrush);
-                    dc.SetTextForeground( wxSystemSettings::GetColour
-                            (wxSYS_COLOUR_WINDOWTEXT));
+                    dc.SetTextForeground(GetForegroundColour());
                 }
                 // 5. find position info
                 wxPoint charPos = GraphicalCharToLogicalCoords(wxPoint
                         (chX, chY));
                 // 6. draw!
                 dc.DrawRectangle(charPos.x, charPos.y, m_fontW, m_fontH);
-                size_t charIndex = chY * sm_lineLen + chX;
-                if (chY < sm_lineCnt &&
-                    chX < sm_lineLen &&
-                    charIndex < strLength)
+                if (chY < (int)m_text->GetNumberOfLines() &&
+                    chX < m_desired_line_len &&
+                    chX < (int)str.Length()
+                    )
                 {
-                    if (isFirstX)
-                    {
-                        str_i = str.begin() + charIndex;
-                        isFirstX = false;
-                    }
-                    dc.DrawText(*str_i, charPos.x, charPos.y);
-                    ++str_i;
+                    dc.DrawText(str[chX], charPos.x, charPos.y);
                 }
             }
         }
@@ -1047,9 +1117,8 @@
     event.Skip();
 }
 
-const int MyAutoTimedScrollingWindow::sm_lineCnt = 125;
-const int MyAutoTimedScrollingWindow::sm_lineLen = 79;
-const wxChar* MyAutoTimedScrollingWindow::sm_testData =
+const int      AutoTimedScrollingWindowTest::sm_lineLen = 79;
+const wxString AutoTimedScrollingWindowTest::sm_testData =
 _T("162 Cult of the genius out of vanity. Because we think well of ourselves, but ")
 _T("nonetheless never suppose ourselves capable of producing a painting like one of ")
 _T("Raphael's or a dramatic scene like one of Shakespeare's, we convince ourselves ")
@@ -1173,3 +1242,38 @@
 _T("for men that flowed from it; until in the end, however, this same belief went ")
 _T("over into an almost insane fatalism, robbed him of his acuteness and swiftness ")
 _T("of perception, and became the cause of his destruction.");
+
+AutoTimedScrollingWindowTest::MyTextProvider::MyTextProvider()
+{
+   wxString str;
+   for (wxString::const_iterator p = sm_testData.begin(); *p; ++p)
+   {
+      switch ((*p).GetValue())
+      {
+         case '\n':
+            m_lines.Add(str);
+            str.Empty();
+            break;
+         default:
+            str+=*p;
+            if (str.Length() == AutoTimedScrollingWindowTest::sm_lineLen)
+            {
+               m_lines.Add(str);
+               str.Empty();
+            }
+            break;
+      }
+   }
+   if (!str.IsEmpty()) m_lines.Add(str);
+}
+
+size_t AutoTimedScrollingWindowTest::MyTextProvider::GetNumberOfLines() const
+{
+   return m_lines.GetCount();
+}
+
+wxString AutoTimedScrollingWindowTest::MyTextProvider::GetLineText(size_t lineNo)
+{
+   return m_lines.Item(lineNo);
+}
+

 	  	 

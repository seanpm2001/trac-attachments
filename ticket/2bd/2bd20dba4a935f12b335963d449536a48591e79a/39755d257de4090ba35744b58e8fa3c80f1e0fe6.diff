Index: tests/test.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 test.cpp
--- tests/test.cpp	2004/03/03 22:53:46	1.1
+++ tests/test.cpp	2004/04/01 11:21:54
@@ -50,5 +50,6 @@
     // command lines options/parameters
     bool m_list;
-    string m_registry;
+    bool m_longlist;
+    vector<string> m_registries;
 };
 
@@ -77,8 +78,11 @@
     static const wxCmdLineEntryDesc cmdLineDesc[] = {
         { wxCMD_LINE_SWITCH, _T("l"), _T("list"),
-            _T("list the tests, do not run them"),
+            _T("list the test suites, do not run them"),
             wxCMD_LINE_VAL_NONE, 0 },
+        { wxCMD_LINE_SWITCH, _T("L"), _T("longlist"),
+            _T("list the test cases, do not run them"),
+            wxCMD_LINE_VAL_NONE, 0 },
         { wxCMD_LINE_PARAM, 0, 0, _T("REGISTRY"), wxCMD_LINE_VAL_STRING,
-            wxCMD_LINE_PARAM_OPTIONAL },
+            wxCMD_LINE_PARAM_OPTIONAL | wxCMD_LINE_PARAM_MULTIPLE },
         { wxCMD_LINE_NONE , 0, 0, 0, wxCMD_LINE_VAL_NONE, 0 }
     };
@@ -91,8 +95,12 @@
 bool TestApp::OnCmdLineParsed(wxCmdLineParser& parser)
 {
-    if (parser.GetParamCount() > 0)
-        m_registry = parser.GetParam(0).mb_str();
+    if (parser.GetParamCount())
+        for (size_t i = 0; i < parser.GetParamCount(); i++)
+            m_registries.push_back(string(parser.GetParam(i).mb_str()));
+    else
+        m_registries.push_back("");
  
-    m_list = parser.Found(_T("list"));
+    m_longlist = parser.Found(_T("longlist"));
+    m_list = m_longlist || parser.Found(_T("list"));
 
     return wxAppConsole::OnCmdLineParsed(parser);
@@ -103,16 +111,27 @@
 int TestApp::OnRun()
 {
-    Test *test = m_registry.empty()?
-        TestFactoryRegistry::getRegistry().makeTest() :
-        TestFactoryRegistry::getRegistry(m_registry).makeTest();
-
-    if (m_list) {
-        List(test);
-        return EXIT_SUCCESS;
-    } else {
-        TextUi::TestRunner runner;
-        runner.addTest(test);
-        return runner.run("", false, true, false) ? EXIT_SUCCESS : EXIT_FAILURE;
+    TextUi::TestRunner runner;
+
+    for (size_t i = 0; i < m_registries.size(); i++) {
+        auto_ptr<Test> test(m_registries[i].empty() ?
+            TestFactoryRegistry::getRegistry().makeTest() :
+            TestFactoryRegistry::getRegistry(m_registries[i]).makeTest());
+
+        TestSuite *suite = dynamic_cast<TestSuite*>(test.get());
+
+        if (suite && suite->countTestCases() == 0)
+            wxLogError(_T("No such test suite: %s"),
+                wxString(m_registries[i].c_str(), wxConvUTF8).c_str());
+        else if (m_list)
+            List(test.get());
+        else
+            runner.addTest(test.release());
     }
+
+    // Switch off logging unless --verbose
+    wxLog::EnableLogging(wxLog::GetVerbose());
+
+    return m_list || runner.run("", false, true, !wxLog::GetVerbose()) ?
+        EXIT_SUCCESS : EXIT_FAILURE;
 }
 
@@ -121,10 +140,11 @@
 void TestApp::List(Test *test, int depth /*=0*/) const
 {
-    cout << string(depth * 2, ' ') << test->getName() << "\n";
-
     TestSuite *suite = dynamic_cast<TestSuite*>(test);
 
+    if (suite || m_longlist)
+        cout << string(depth * 2, ' ') << test->getName() << "\n";
+
     if (suite) {
-        typedef const std::vector<Test*> Tests;
+        typedef const vector<Test*> Tests;
         typedef Tests::const_iterator Iter;
 

 	  	 

Binary files wxorig/.DS_Store and wxnew/.DS_Store differ
Binary files wxorig/src/.DS_Store and wxnew/src/.DS_Store differ
Binary files wxorig/src/common/.DS_Store and wxnew/src/common/.DS_Store differ
diff -uNr wxorig/src/common/dcsvg.cpp wxnew/src/common/dcsvg.cpp
--- wxorig/src/common/dcsvg.cpp	2010-07-13 20:30:18.000000000 -0400
+++ wxnew/src/common/dcsvg.cpp	2011-02-27 16:12:11.000000000 -0500
@@ -127,9 +127,9 @@
         write(s);
         s = wxT("\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"> ") + newline;
         write(s);
-        s =  wxT("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ") + newline;
+        s = wxT("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ") + newline;
         write(s);
-        s.Printf( wxT("    width=\"%.2gcm\" height=\"%.2gcm\" viewBox=\"0 0 %d %d \"> \n"), float(Width)/dpi*2.54, float(Height)/dpi*2.54, Width, Height );
+        s.Printf( wxT("    width=\"%scm\" height=\"%scm\" viewBox=\"0 0 %d %d \"> \n"), wxString::FromCDouble(float(Width)/dpi*2.54, 2), wxString::FromCDouble(float(Height)/dpi*2.54, 2), Width, Height );
         write(s);
         s = wxT("<title>SVG Picture created as ") + wxFileName(filename).GetFullName() + wxT(" </title>") + newline;
         write(s);
@@ -238,7 +238,7 @@
         sTmp.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\"  "), x,y+desc-h, w, h );
         s = sTmp + wxT("style=\"fill:#") + wxColStr (m_textBackgroundColour) + wxT("; ");
         s = s + wxT("stroke-width:1; stroke:#") + wxColStr (m_textBackgroundColour) + wxT("; ");
-        sTmp.Printf ( wxT("\" transform=\"rotate( %.2g %d %d )  \">"), -angle, x,y );
+        sTmp.Printf ( wxT("\" transform=\"rotate( %s %d %d )  \">"), wxString::FromCDouble(-angle, 2), x,y );
         s = s + sTmp + newline;
         write(s);
     }
@@ -258,7 +258,7 @@
     sTmp.Printf (wxT("font-size:%dpt; fill:#"), m_font.GetPointSize () );
     s = s + sTmp;
     s = s + wxColStr (m_textForegroundColour) + wxT("; stroke:#") + wxColStr (m_textForegroundColour) + wxT("; ");
-    sTmp.Printf ( wxT("stroke-width:0;\"  transform=\"rotate( %.2g %d %d )  \" >"),  -angle, x,y );
+    sTmp.Printf ( wxT("stroke-width:0;\"  transform=\"rotate( %s %d %d )  \" >"),  wxString::FromCDouble(-angle, 2), x,y );
     s = s + sTmp + sText + wxT("</text> ") + newline;
     if (m_OK)
     {
@@ -278,8 +278,8 @@
     if (m_graphics_changed) NewGraphics ();
     wxString s;
 
-    s.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" rx=\"%.2g\" "),
-            x, y, width, height, radius );
+    s.Printf ( wxT(" <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" rx=\"%s\" "),
+            x, y, width, height, wxString::FromCDouble(radius, 2) );
 
     s = s + wxT(" /> ") + newline;
     write(s);
@@ -371,8 +371,8 @@
 
     int fSweep = 0;             // flag for sweep always 0
 
-    s.Printf ( wxT("<path d=\"M%d %d A%.2g %.2g 0.0 %d %d %d %d L%d %d z "),
-        x1,y1, r1, r2, fArc, fSweep, x2, y2, xc, yc );
+    s.Printf ( wxT("<path d=\"M%d %d A%s %s 0.0 %d %d %d %d L%d %d z "),
+        x1,y1, wxString::FromCDouble(r1, 2), wxString::FromCDouble(r2, 2), fArc, fSweep, x2, y2, xc, yc );
 
     // the z means close the path and fill
     s = s + wxT(" \" /> ") + newline;
@@ -570,8 +570,8 @@
             sWarn = sWarn + wxT("<!--- wxSVGFileDC::SetPen Call called to set a Style which is not available --> \n");
     }
 
-    sLast.Printf( wxT("stroke-width:%d\" \n   transform=\"translate(%.2g %.2g) scale(%.2g %.2g)\">"),
-                w, double(m_logicalOriginX), double(m_logicalOriginY), m_scaleX, m_scaleY  );
+    sLast.Printf( wxT("stroke-width:%d\" \n   transform=\"translate(%s %s) scale(%s %s)\">"),
+                w, wxString::FromCDouble(m_logicalOriginX, 2), wxString::FromCDouble(m_logicalOriginY, 2), wxString::FromCDouble(m_scaleX, 2), wxString::FromCDouble(m_scaleY, 2)  );
 
     s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast + newline + sWarn;
     write(s);
@@ -678,7 +678,6 @@
     m_OK = m_outfile->Ok();
 }
 
-
 #ifdef __BORLANDC__
 #pragma warn .rch
 #pragma warn .ccc

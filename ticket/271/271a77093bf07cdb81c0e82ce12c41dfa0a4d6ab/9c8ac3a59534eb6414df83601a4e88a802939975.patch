--- filefn.cpp	2005-08-01 12:25:40.000000000 +0100
+++ new/filefn.cpp	2005-08-02 12:25:09.000000000 +0100
@@ -131,4 +131,9 @@
 }
 
+WXDLLEXPORT int wxLstat( const wxChar *file_name, wxStructStat *buf )
+{
+    return lstat( wxConvFile.cWX2MB( file_name ), buf );
+}
+
 WXDLLEXPORT int wxAccess( const wxChar *pathname, int mode )
 {
@@ -306,9 +311,17 @@
 #else // !__WIN32__
     wxStructStat st;
-#ifndef wxNEED_WX_UNISTD_H
+#if defined(__UNIX__)    // If unix, use lstat rather than stat, in case filename's a symlink
+  #ifndef wxNEED_WX_UNISTD_H
+    return wxLstat( filename.fn_str() , &st) == 0 && (st.st_mode & S_IFREG);
+  #else
+    return wxLstat( filename , &st) == 0 && (st.st_mode & S_IFREG);
+  #endif
+#else  // !__UNIX__
+  #ifndef wxNEED_WX_UNISTD_H
     return wxStat( filename.fn_str() , &st) == 0 && (st.st_mode & S_IFREG);
-#else
+  #else
     return wxStat( filename , &st) == 0 && (st.st_mode & S_IFREG);
-#endif
+  #endif
+#endif // __UNIX__/!__UNIX__
 #endif // __WIN32__/!__WIN32__
 }
@@ -1016,4 +1029,38 @@
     wxStructStat fbuf;
     // get permissions of file1
+  #if defined(__UNIX__)
+    if ( wxLstat( file1.c_str(), &fbuf) != 0 )  // In unix, use lstat in case file1 is a symlink
+    {
+        // the file probably doesn't exist or we haven't the rights to read
+        // from it anyhow
+        wxLogSysError(_("Impossible to get permissions for file '%s'"),
+                      file1.c_str());
+        return false;
+    }
+	
+    if ( S_ISLNK( fbuf.st_mode ) )    // If file1 _is_ a symlink, deal with it here
+    {
+    if ( wxFileExists(file2)  && (!overwrite || !wxRemoveFile(file2)))   // remove file2, if it exists
+    {
+        wxLogSysError(_("Impossible to overwrite the file '%s'"),
+                      file2.c_str());
+        return false;
+    }
+        // We need to know the symlink target, so that we can copy it 
+    char buf[500];    // Make a char buffer. 500 bytes should suffice: it gets truncated anyway
+    int pathlen = readlink(file1, buf, 500 );  // buf gets filled with the target's filepath
+    if ( pathlen == -1 )
+    {  // readlink failed.  We could look at errno to discover why, should we care
+        wxLogSysError(_("Sorry, can't copy the symlink '%s'"),
+                      file1.c_str());
+        return false;
+    }
+
+    wxString target( buf, pathlen );
+    int result = symlink( target.c_str(), file2.c_str() );  // If successful returns false, otherwise -1
+    return (result==0);	
+    }
+   
+  #else    // !(__UNIX__)
     if ( wxStat( file1.c_str(), &fbuf) != 0 )
     {
@@ -1024,4 +1071,5 @@
         return false;
     }
+   #endif
 
     // open file1 for reading
@@ -1208,5 +1256,5 @@
     // Windows fails to find directory named "c:\dir\" even if "c:\dir" exists,
     // so remove all trailing backslashes from the path - but don't do this for
-    // the pathes "d:\" (which are different from "d:") nor for just "\"
+    // the paths "d:\" (which are different from "d:") nor for just "\"
     while ( wxEndsWithPathSeparator(strPath) )
     {
@@ -1238,5 +1286,9 @@
     wxStructStat st;
 #ifndef __VISAGECPP__
+  #if defined(__UNIX__)
+    return wxLstat(strPath.c_str(), &st) == 0 && ((st.st_mode & S_IFMT) == S_IFDIR);
+  #else
     return wxStat(strPath.c_str(), &st) == 0 && ((st.st_mode & S_IFMT) == S_IFDIR);
+  #endif
 #else
     // S_IFMT not supported in VA compilers.. st_mode is a 2byte value only
@@ -1632,7 +1684,11 @@
 #else
     wxStructStat buf;
+  #if defined(__UNIX__)
+    if ( wxLstat( filename, &buf) != 0 )  // Use lstat lest filename is a symlink, which should not be dereferenced
+        return 0;
+  #else
     if ( wxStat( filename, &buf) != 0 )
         return 0;
-
+  #endif
     return buf.st_mtime;
 #endif

 	  	 

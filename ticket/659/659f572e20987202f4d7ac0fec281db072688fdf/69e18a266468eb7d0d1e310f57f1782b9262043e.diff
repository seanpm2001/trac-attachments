Index: src/osx/cocoa/nonownedwnd.mm
===================================================================
--- src/osx/cocoa/nonownedwnd.mm	(revision 64990)
+++ src/osx/cocoa/nonownedwnd.mm	(working copy)
@@ -14,6 +14,7 @@
     #include "wx/nonownedwnd.h"
     #include "wx/frame.h"
     #include "wx/app.h"
+    #include "wx/dialog.h"
 #endif
 
 #include "wx/osx/private.h"
@@ -408,7 +409,7 @@
     }
 }
 
-void wxNonOwnedWindowCocoaImpl::Create( wxWindow* WXUNUSED(parent), const wxPoint& pos, const wxSize& size,
+void wxNonOwnedWindowCocoaImpl::Create( wxWindow* parent, const wxPoint& pos, const wxSize& size,
 long style, long extraStyle, const wxString& WXUNUSED(name) )
 {
     static wxNonOwnedWindowController* controller = NULL;
@@ -516,6 +517,29 @@
         defer:NO
         ];
 
+    // If the parent is modal, wxFRAME_FLOAT_ON_PARENT
+    // needs to be in kCGUtilityWindowLevel not kCGFloatingWindowLevel
+    // to stay above the parent.
+    wxDialog* parentDialog = wxDynamicCast(parent, wxDialog);
+    if (parentDialog != NULL && parentDialog->IsModal())
+    {
+        if (level == kCGFloatingWindowLevel)
+        {
+            level = kCGUtilityWindowLevel;
+        }
+
+        // Cocoa's modal loop does not process other windows by default,
+        // but don't call this on normal window levels so
+        // nested modal dialogs will still behave modally.
+        if (level != kCGNormalWindowLevel)
+        {
+            if ([m_macWindow isKindOfClass:[NSPanel class]])
+            {
+                [(NSPanel*)m_macWindow setWorksWhenModal:YES];
+            }
+        }
+    }
+
     [m_macWindow setLevel:level];
 
     [m_macWindow setDelegate:controller];

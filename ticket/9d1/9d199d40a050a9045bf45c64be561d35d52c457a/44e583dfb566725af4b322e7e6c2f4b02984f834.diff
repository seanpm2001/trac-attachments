diff -uNr wxorig/interface/wx/aboutdlg.h wxnew/interface/wx/aboutdlg.h
--- wxorig/interface/wx/aboutdlg.h	2010-11-24 20:30:28.000000000 -0500
+++ wxnew/interface/wx/aboutdlg.h	2011-03-21 13:48:48.000000000 -0400
@@ -83,7 +83,7 @@
 
     /**
         Adds a translator name to be shown in the program credits. Notice that if no
-        translator names are specified explicitely, wxAboutBox() will try to use the
+        translator names are specified explicitly, wxAboutBox() will try to use the
         translation of the string @c translator-credits from the currently used message
         catalog -- this can be used to show just the name of the translator of the
         program in the current language.
@@ -129,7 +129,7 @@
     const wxString& GetCopyright() const;
 
     /**
-        Sets the the list of artists to be shown in the program credits.
+        Sets the list of artists to be shown in the program credits.
 
         @see AddArtist()
     */
diff -uNr wxorig/interface/wx/aui/framemanager.h wxnew/interface/wx/aui/framemanager.h
--- wxorig/interface/wx/aui/framemanager.h	2011-01-12 20:30:30.000000000 -0500
+++ wxnew/interface/wx/aui/framemanager.h	2011-03-21 17:04:42.000000000 -0400
@@ -244,7 +244,7 @@
                     int insert_level = wxAUI_INSERT_PANE);
 
     /**
-        LoadPaneInfo() is similar to to LoadPerspective, with the exception that it
+        LoadPaneInfo() is similar to LoadPerspective, with the exception that it
         only loads information about a single pane.  It is used in combination with
         SavePaneInfo().
     */
@@ -442,7 +442,7 @@
     wxAuiPaneInfo& DefaultPane();
 
     /**
-        DestroyOnClose() indicates whether a pane should be detroyed when it is closed.
+        DestroyOnClose() indicates whether a pane should be destroyed when it is closed.
         Normally a pane is simply hidden when the close button is clicked.
         Setting DestroyOnClose to @true will cause the window to be destroyed when
         the user clicks the pane's close button.
diff -uNr wxorig/interface/wx/control.h wxnew/interface/wx/control.h
--- wxorig/interface/wx/control.h	2011-02-27 20:30:56.000000000 -0500
+++ wxnew/interface/wx/control.h	2011-03-21 13:44:12.000000000 -0400
@@ -121,7 +121,7 @@
         following character is a @e mnemonic for this control and can be used to
         activate it from the keyboard (typically by using @e Alt key in
         combination with it). To insert a literal ampersand character, you need
-        to double it, i.e. use use "&&". If this behaviour is undesirable, use
+        to double it, i.e. use "&&". If this behaviour is undesirable, use
         SetLabelText() instead.
     */
     void SetLabel(const wxString& label);
diff -uNr wxorig/interface/wx/dataview.h wxnew/interface/wx/dataview.h
--- wxorig/interface/wx/dataview.h	2011-03-01 20:30:50.000000000 -0500
+++ wxnew/interface/wx/dataview.h	2011-03-21 13:56:02.000000000 -0400
@@ -216,7 +216,7 @@
 
     /**
         Override this to indicate which wxDataViewItem representing the parent
-        of @a item or an invalid wxDataViewItem if the the root item is
+        of @a item or an invalid wxDataViewItem if the root item is
         the parent item.
     */
     virtual wxDataViewItem GetParent(const wxDataViewItem& item) const = 0;
@@ -231,7 +231,7 @@
     /**
         Override this method to indicate if a container item merely acts as a
         headline (or for categorisation) or if it also acts a normal item with
-        entries for futher columns. By default returns @false.
+        entries for further columns. By default returns @false.
     */
     virtual bool HasContainerColumns(const wxDataViewItem& item) const;
 
@@ -1086,7 +1086,7 @@
     void SetCurrentItem(const wxDataViewItem& item);
 
     /**
-        Sets the indendation.
+        Sets the indentation.
     */
     void SetIndent(int indent);
 
@@ -2054,7 +2054,7 @@
     /**
          Sets the value in the store and update the control.
 
-         This method assumes that the a string is stored in respective
+         This method assumes that the string is stored in respective
          column.
     */
     void SetTextValue( const wxString &value, unsigned int row, unsigned int col );
@@ -2062,7 +2062,7 @@
     /**
          Returns the value from the store.
 
-         This method assumes that the a string is stored in respective
+         This method assumes that the string is stored in respective
          column.
     */
     wxString GetTextValue( unsigned int row, unsigned int col ) const;
@@ -2070,7 +2070,7 @@
     /**
          Sets the value in the store and update the control.
 
-         This method assumes that the a boolean value is stored in
+         This method assumes that the boolean value is stored in
          respective column.
     */
     void SetToggleValue( bool value, unsigned int row, unsigned int col );
@@ -2078,7 +2078,7 @@
     /**
          Returns the value from the store.
 
-         This method assumes that the a boolean value is stored in
+         This method assumes that the boolean value is stored in
          respective column.
     */
     bool GetToggleValue( unsigned int row, unsigned int col ) const;
@@ -2393,23 +2393,23 @@
     void DeleteAllItems();
 
     /**
-        Overriden from wxDataViewModel
+        Overridden from wxDataViewModel
     */
     virtual unsigned int GetColumnCount() const;
 
     /**
-        Overriden from wxDataViewModel
+        Overridden from wxDataViewModel
     */
     virtual wxString GetColumnType( unsigned int col ) const;
 
     /**
-        Overriden from wxDataViewIndexListModel
+        Overridden from wxDataViewIndexListModel
     */
     virtual void GetValueByRow( wxVariant &value,
                            unsigned int row, unsigned int col ) const;
 
     /**
-        Overriden from wxDataViewIndexListModel
+        Overridden from wxDataViewIndexListModel
     */
     virtual bool SetValueByRow( const wxVariant &value,
                            unsigned int row, unsigned int col );
@@ -2419,7 +2419,7 @@
 /**
     @class wxDataViewTreeStore
 
-    wxDataViewTreeStore is a specialised wxDataViewModel for stroing simple
+    wxDataViewTreeStore is a specialised wxDataViewModel for storing simple
     trees very much like wxTreeCtrl does and it offers a similar API.
 
     This class actually stores the entire tree and the values (therefore its name)
@@ -2481,7 +2481,7 @@
     int GetChildCount(const wxDataViewItem& parent) const;
 
     /**
-        Returns the client data asoociated with the item.
+        Returns the client data associated with the item.
     */
     wxClientData* GetItemData(const wxDataViewItem& item) const;
 
@@ -2678,7 +2678,7 @@
     wxDataViewModel* GetModel() const;
 
     /**
-        Returns a the position of a context menu event in screen coordinates.
+        Returns the position of a context menu event in screen coordinates.
     */
     wxPoint GetPosition() const;
 
diff -uNr wxorig/interface/wx/datetime.h wxnew/interface/wx/datetime.h
--- wxorig/interface/wx/datetime.h	2010-11-05 08:59:40.000000000 -0400
+++ wxnew/interface/wx/datetime.h	2011-03-21 14:22:14.000000000 -0400
@@ -50,7 +50,7 @@
     ParseFormat() which can parse any date in the given (rigid) format.
     ParseRfc822Date() is another function for parsing dates in predefined
     format -- the one of RFC 822 which (still...) defines the format of email
-    messages on the Internet. This format can not be described with
+    messages on the Internet. This format cannot be described with
     @c strptime(3)-like format strings used by Format(), hence the need for a
     separate function.
 
@@ -102,7 +102,7 @@
         Local,
 
         //@{
-        /// zones from GMT (= Greenwhich Mean Time): they're guaranteed to be
+        /// zones from GMT (= Greenwich Mean Time): they're guaranteed to be
         /// consequent numbers, so writing something like `GMT0 + offset' is
         /// safe if abs(offset) <= 12
 
@@ -233,7 +233,7 @@
         in the functions whose result depends on it (GetWeekOfYear() and
         GetWeekOfMonth()).
 
-        The desired behvaiour may be specified by giving one of the following
+        The desired behaviour may be specified by giving one of the following
         constants as argument to these functions.
     */
     enum WeekFlags
@@ -286,7 +286,7 @@
         Constructors and various Set() methods are collected here. If you
         construct a date object from separate values for day, month and year,
         you should use IsValid() method to check that the values were correct
-        as constructors can not return an error code.
+        as constructors cannot return an error code.
     */
     //@{
 
@@ -811,7 +811,7 @@
         Returns the combined date-time representation in the ISO 8601 format
         @c "YYYY-MM-DDTHH:MM:SS". The @a sep parameter default value produces
         the result exactly corresponding to the ISO standard, but it can also
-        be useful to use a space as seprator if a more human-readable combined
+        be useful to use a space as separator if a more human-readable combined
         date-time representation is needed.
 
         @see FormatISODate(), FormatISOTime(), ParseISOCombined()
@@ -856,7 +856,7 @@
 
         This function tries as hard as it can to interpret the given string as
         date and time. Unlike ParseRfc822Date(), it will accept anything that
-        may be accepted and will only reject strings which can not be parsed in
+        may be accepted and will only reject strings which cannot be parsed in
         any way at all. Notice that the function will fail if either date or
         time part is present but not both, use ParseDate() or ParseTime() to
         parse strings containing just the date or time component.
@@ -1385,7 +1385,7 @@
     static time_t GetTimeNow();
 
     /**
-        Returns the current time broken down using the buffer whose adress is
+        Returns the current time broken down using the buffer whose address is
         passed to the function with @a tm to store the result.
     */
     static tm* GetTmNow(struct tm *tm);
diff -uNr wxorig/interface/wx/event.h wxnew/interface/wx/event.h
--- wxorig/interface/wx/event.h	2011-03-19 21:30:48.000000000 -0400
+++ wxnew/interface/wx/event.h	2011-03-21 14:04:28.000000000 -0400
@@ -473,7 +473,7 @@
            that it didn't handle the event in which case the search continues.
         -# Static events table of the handlers bound using event table
            macros is searched for this event handler. If this fails, the base
-           class event table table is tried, and so on until no more tables
+           class event table is tried, and so on until no more tables
            exist or an appropriate function was found. If a handler is found,
            the same logic as in the previous step applies.
         -# The search is applied down the entire chain of event handlers (usually the
@@ -779,7 +779,7 @@
         more flexible as it also allows you to use ordinary functions and
         arbitrary functors as event handlers. It is also less restrictive then
         Connect() because you can use an arbitrary method as an event handler,
-        where as Connect() requires a wxEvtHandler derived handler.
+        whereas Connect() requires a wxEvtHandler derived handler.
 
         See @ref overview_events_bind for more detailed explanation
         of this function and the @ref page_samples_event sample for usage
@@ -1701,7 +1701,7 @@
     */
     wxWindowCreateEvent(wxWindow* win = NULL);
 
-    /// Retutn the window being created.
+    /// Return the window being created.
     wxWindow *GetWindow() const;
 };
 
@@ -2629,7 +2629,7 @@
         For the menu events, this method indicates if the menu item just has become
         checked or unchecked (and thus only makes sense for checkable menu items).
 
-        Notice that this method can not be used with wxCheckListBox currently.
+        Notice that this method cannot be used with wxCheckListBox currently.
     */
     bool IsChecked() const;
 
@@ -2868,7 +2868,7 @@
     child if it loses it now and regains later.
 
     Notice that child window is the direct child of the window receiving event.
-    Use wxWindow::FindFocus() to retreive the window which is actually getting focus.
+    Use wxWindow::FindFocus() to retrieve the window which is actually getting focus.
 
     @beginEventTable{wxChildFocusEvent}
     @event{EVT_CHILD_FOCUS(func)}
@@ -3021,7 +3021,7 @@
 /**
     @class wxThreadEvent
 
-    This class adds some simple functionalities to wxCommandEvent coinceived
+    This class adds some simple functionalities to wxCommandEvent conceived
     for inter-threads communications.
 
     This event is not natively emitted by any control/class: this is just
@@ -3449,7 +3449,7 @@
     */
     wxWindowDestroyEvent(wxWindow* win = NULL);
 
-    /// Retutn the window being destroyed.
+    /// Return the window being destroyed.
     wxWindow *GetWindow() const;
 };
 
diff -uNr wxorig/interface/wx/gdicmn.h wxnew/interface/wx/gdicmn.h
--- wxorig/interface/wx/gdicmn.h	2010-11-10 20:30:30.000000000 -0500
+++ wxnew/interface/wx/gdicmn.h	2011-03-21 13:51:26.000000000 -0400
@@ -351,7 +351,7 @@
 
         The left border is moved farther left and the right border is moved
         farther right by @a dx. The upper border is moved farther up and the
-        bottom border is moved farther down by @a dy. (Note the the width and
+        bottom border is moved farther down by @a dy. (Note that the width and
         height of the rectangle thus change by 2*dx and 2*dy, respectively.) If
         one or both of @a dx and @a dy are negative, the opposite happens: the
         rectangle size decreases in the respective direction.
@@ -768,7 +768,7 @@
 
 
 /**
-    Global istance of a wxColourDatabase.
+    Global instance of a wxColourDatabase.
 */
 wxColourDatabase* wxTheColourDatabase;
 
diff -uNr wxorig/interface/wx/mediactrl.h wxnew/interface/wx/mediactrl.h
--- wxorig/interface/wx/mediactrl.h	2010-07-13 20:30:30.000000000 -0400
+++ wxnew/interface/wx/mediactrl.h	2011-03-21 15:05:28.000000000 -0400
@@ -12,7 +12,7 @@
     /** No controls. return wxMediaCtrl to its default state. */
     wxMEDIACTRLPLAYERCONTROLS_NONE           =   0,
 
-    /** Step controls like fastfoward, step one frame etc. */
+    /** Step controls like fastforward, step one frame etc. */
     wxMEDIACTRLPLAYERCONTROLS_STEP           =   1 << 0,
 
     /** Volume controls like the speaker icon, volume slider, etc. */
@@ -119,9 +119,9 @@
     When wxMediaCtrl stops, either by the @c EVT_MEDIA_STOP not being vetoed, or
     by manually calling Stop(), where it actually stops is not at the beginning,
     rather, but at the beginning of the stream. That is, when it stops and play
-    is called, playback is gauranteed to start at the beginning of the media.
+    is called, playback is guaranteed to start at the beginning of the media.
     This is because some streams are not seekable, and when stop is called on
-    them they return to the beginning, thus wxMediaCtrl tries to keep consistant
+    them they return to the beginning, thus wxMediaCtrl tries to keep consistent
     for all types of media.
 
     Note that when changing the state of the media through Play() and other methods,
@@ -134,11 +134,11 @@
 
     By default, wxMediaCtrl will scale the size of the video to the requested
     amount passed to either its constructor or Create().
-    After calling wxMediaCtrl::Load or performing an equivilant operation,
+    After calling wxMediaCtrl::Load or performing an equivalent operation,
     you can subsequently obtain the "real" size of the video (if there is any)
     by calling wxMediaCtrl::GetBestSize(). Note that the actual result on the
     display will be slightly different when wxMediaCtrl::ShowPlayerControls is
-    activated and the actual video size will be less then specified due to the
+    activated and the actual video size will be less than specified due to the
     extra controls provided by the native toolkit.
     In addition, the backend may modify wxMediaCtrl::GetBestSize() to include
     the size of the extra controls - so if you want the real size of the video
@@ -184,7 +184,7 @@
     - @b wxMEDIABACKEND_GSTREAMER, Use GStreamer. Unix Only.
       Requires GStreamer 0.8 along with at the very least the xvimagesink, xoverlay,
       and gst-play modules of gstreamer to function.
-      You need the correct modules to play the relavant files, for example the
+      You need the correct modules to play the relevant files, for example the
       mad module to play mp3s, etc.
     - @b wxMEDIABACKEND_WMP10, Uses Windows Media Player 10 (Windows only) -
       works on mobile machines with Windows Media Player 10 and desktop machines
diff -uNr wxorig/interface/wx/msw/ole/activex.h wxnew/interface/wx/msw/ole/activex.h
--- wxorig/interface/wx/msw/ole/activex.h	2011-01-06 20:30:28.000000000 -0500
+++ wxnew/interface/wx/msw/ole/activex.h	2011-03-21 17:22:18.000000000 -0400
@@ -18,7 +18,7 @@
 
     @beginEventTable{wxActiveXEvent}
     @event{EVT_ACTIVEX(func)}
-        Sent when the ActiveX control hosted by wxActiveXContainer recieves an
+        Sent when the ActiveX control hosted by wxActiveXContainer receives an
         ActiveX event.
     @endEventTable
 
@@ -268,7 +268,7 @@
 
     wxIMPLEMENT_DYNAMIC_CLASS(wxPDFMediaBackend, wxMediaBackend);
     
-    // Put this in one of your existant source files and then create a wxMediaCtrl with
+    // Put this in one of your existing source files and then create a wxMediaCtrl with
     wxMediaCtrl* mymediactrl = new wxMediaCtrl(this, "myfile.pdf", wxID_ANY,
                                             wxDefaultPosition, wxSize(300,300),
                                             0, "wxPDFMediaBackend");
diff -uNr wxorig/interface/wx/propgrid/manager.h wxnew/interface/wx/propgrid/manager.h
--- wxorig/interface/wx/propgrid/manager.h	2010-07-13 20:30:28.000000000 -0400
+++ wxnew/interface/wx/propgrid/manager.h	2011-03-21 17:12:52.000000000 -0400
@@ -510,8 +510,8 @@
 
     /**
         Creates property grid for the manager. Reimplement in derived class to
-        use subclassed wxPropertyGrid. However, if you you do this then you
-        must also use the two-step construction (ie. default constructor and
+        use subclassed wxPropertyGrid. However, if you  do this then you
+        must also use the two-step construction (i.e. default constructor and
         Create() instead of constructor with arguments) when creating the
         manager.
     */
diff -uNr wxorig/interface/wx/propgrid/property.h wxnew/interface/wx/propgrid/property.h
--- wxorig/interface/wx/propgrid/property.h	2011-01-06 20:30:28.000000000 -0500
+++ wxnew/interface/wx/propgrid/property.h	2011-03-21 15:15:36.000000000 -0400
@@ -131,7 +131,7 @@
 #define wxPG_DIR_DIALOG_MESSAGE             wxS("DialogMessage")
 
 /**
-    wxArrayStringProperty's string delimiter character. If this is aquotation
+    wxArrayStringProperty's string delimiter character. If this is a quotation
     mark or hyphen, then strings will be quoted instead (with given
     character).
 
@@ -150,7 +150,7 @@
 #define wxPG_DATE_PICKER_STYLE              wxS("PickerStyle")
 
 /** SpinCtrl editor, int or double. How much number changes when button is
-    pressed (or up/down on keybard).
+    pressed (or up/down on keyboard).
 */
 #define wxPG_ATTR_SPINCTRL_STEP             wxS("Step")
 
@@ -221,7 +221,7 @@
     If property is selected, then indicates that validation failed for pending
     value.
 
-    If property is not selected, then indicates that the the actual property
+    If property is not selected, then indicates that the actual property
     value has failed validation (NB: this behavior is not currently supported,
     but may be used in future).
 */
@@ -424,7 +424,7 @@
     @subsection wxBoolProperty
 
     Represents a boolean value. wxChoice is used as editor control, by the
-    default. wxPG_BOOL_USE_CHECKBOX attribute can be set to true inorder to use
+    default. wxPG_BOOL_USE_CHECKBOX attribute can be set to true in order to use
     check box instead.
 
     @subsection wxLongStringProperty
@@ -486,7 +486,7 @@
 
     Represents a bit set that fits in a long integer. wxBoolProperty sub-
     properties are created for editing individual bits. Textctrl is created to
-    manually edit the flags as a text; a continous sequence of spaces, commas
+    manually edit the flags as a text; a continuous sequence of spaces, commas
     and semicolons are considered as a flag id separator.
 
     <b>Note:</b> When changing "choices" (ie. flag labels) of wxFlagsProperty,
@@ -502,9 +502,9 @@
 
     @subsection wxDateProperty
 
-    wxDateTime property. Default editor is DatePickerCtrl, altough TextCtrl
+    wxDateTime property. Default editor is DatePickerCtrl, although TextCtrl
     should work as well. wxPG_DATE_FORMAT attribute can be used to change
-    string wxDateTime::Format uses (altough default is recommended as it is
+    string wxDateTime::Format uses (although default is recommended as it is
     locale-dependant), and wxPG_DATE_PICKER_STYLE allows changing window
     style given to DatePickerCtrl (default is wxDP_DEFAULT|wxDP_SHOWCENTURY).
     Using wxDP_ALLOWNONE will enable better unspecified value support.
@@ -566,7 +566,7 @@
     @endcode
 
     in wxSystemColourProperty, and its derived class wxColourProperty, there
-    are various sub-classing features. To set basic list list of colour
+    are various sub-classing features. To set a basic list of colour
     names, call wxPGProperty::SetChoices().
 
     @code
@@ -830,7 +830,7 @@
     bool SetValueFromString( const wxString& text, int flags = 0 );
 
     /**
-        Converts integer to a value, and if succesful, calls SetValue() on it.
+        Converts integer to a value, and if successful, calls SetValue() on it.
         Default behavior is to do nothing.
 
         @param value
@@ -881,7 +881,7 @@
 
     /**
         Called after value of a child property has been altered. Must return
-        new value of the whole property (after any alterations warrented by
+        new value of the whole property (after any alterations warranted by
         child's new value).
 
         Note that this function is usually called at the time that value of
@@ -1492,7 +1492,7 @@
     /**
         Returns true if property has editable wxTextCtrl when selected.
 
-        @remarks Altough disabled properties do not displayed editor, they still
+        @remarks Although disabled properties do not displayed editor, they still
                 return @true here as being disabled is considered a temporary
                 condition (unlike being read-only or having limited editing enabled).
     */
@@ -1903,7 +1903,7 @@
     wxPGChoices Copy() const;
 
     /**
-        Returns labe of item.
+        Returns label of item.
     */
     const wxString& GetLabel( unsigned int ind ) const;
 
diff -uNr wxorig/interface/wx/renderer.h wxnew/interface/wx/renderer.h
--- wxorig/interface/wx/renderer.h	2010-11-05 08:59:40.000000000 -0400
+++ wxnew/interface/wx/renderer.h	2011-03-21 13:58:36.000000000 -0400
@@ -350,7 +350,7 @@
         @c wxCONTROL_DISABLED and @c wxCONTROL_CURRENT bits, see @ref wxCONTROL_FLAGS.
 
         @return
-        The optimal width to contain the the unabreviated label text or
+        The optimal width to contain the unabbreviated label text or
         bitmap, the sort arrow if present, and internal margins.
     */
     virtual int DrawHeaderButton(wxWindow* win, wxDC& dc, const wxRect& rect,
@@ -365,7 +365,7 @@
         @c wxCONTROL_DISABLED and @c wxCONTROL_CURRENT bits, see @ref wxCONTROL_FLAGS.
 
         @return
-        The optimal width to contain the the unabreviated label text or
+        The optimal width to contain the unabbreviated label text or
         bitmap, the sort arrow if present, and internal margins.
     */
     virtual int DrawHeaderButtonContents(wxWindow* win, wxDC& dc,
@@ -380,7 +380,7 @@
         which are selected (e.g. often a blue rectangle) and @c wxCONTROL_CURRENT
         for the item that has the focus (often a dotted line around the item's text).
         @c wxCONTROL_FOCUSED may be used to indicate if the control has the focus
-        (othewise the the selection rectangle is e.g. often grey and not blue).
+        (otherwise the selection rectangle is e.g. often grey and not blue).
         This may be ignored by the renderer or deduced by the code directly from
         the @a win.
     */
diff -uNr wxorig/interface/wx/ribbon/art.h wxnew/interface/wx/ribbon/art.h
--- wxorig/interface/wx/ribbon/art.h	2010-11-07 20:30:24.000000000 -0500
+++ wxnew/interface/wx/ribbon/art.h	2011-03-21 15:07:02.000000000 -0400
@@ -269,7 +269,7 @@
     /**
         Set the value of a certain colour setting to the value @e colour.
         @a id can be one of the colour values of @ref wxRibbonArtSetting, though
-        not all colour settings will have an affect on every art provider.
+        not all colour settings will have an effect on every art provider.
         
         @see SetColourScheme()
     */
@@ -455,7 +455,7 @@
     
     /**
         Draw the background and chrome for a wxRibbonGallery control. This
-        should draw the border, brackground, scroll buttons, extension button,
+        should draw the border, background, scroll buttons, extension button,
         and any other UI elements which are not attached to a specific gallery
         item.
         
@@ -833,7 +833,7 @@
     /**
         Calculate the portion of a page background which needs to be redrawn
         when a page is resized. To optimise the drawing of page backgrounds, as
-        small an area as possible should be returned. Of couse, if the way in
+        small an area as possible should be returned. Of course, if the way in
         which a background is drawn means that the entire background needs to
         be repainted on resize, then the entire new size should be returned.
         
diff -uNr wxorig/interface/wx/ribbon/bar.h wxnew/interface/wx/ribbon/bar.h
--- wxorig/interface/wx/ribbon/bar.h	2011-01-06 20:30:28.000000000 -0500
+++ wxnew/interface/wx/ribbon/bar.h	2011-03-21 17:17:02.000000000 -0400
@@ -164,7 +164,7 @@
         Note that unlike most other ribbon controls, the ribbon bar creates a
         default art provider when initialised, so an explicit call to
         SetArtProvider() is not required if the default art provider is
-        sufficient. Alos unlike other ribbon controls, the ribbon bar takes
+        sufficient. Also, unlike other ribbon controls, the ribbon bar takes
         ownership of the given pointer, and will delete it when the art
         provider is changed or the bar is destroyed. If this behaviour is not
         desired, then clone the art provider before setting it.
diff -uNr wxorig/interface/wx/ribbon/control.h wxnew/interface/wx/ribbon/control.h
--- wxorig/interface/wx/ribbon/control.h	2010-06-28 05:22:32.000000000 -0400
+++ wxnew/interface/wx/ribbon/control.h	2011-03-21 17:17:52.000000000 -0400
@@ -10,8 +10,8 @@
     @class wxRibbonControl
 
     wxRibbonControl serves as a base class for all controls which share the
-    ribbon charactertics of having a ribbon art provider, and (optionally)
-    non-continous resizing. Despite what the name may imply, it is not the
+    ribbon characteristics of having a ribbon art provider, and (optionally)
+    non-continuous resizing. Despite what the name may imply, it is not the
     top-level control for creating a ribbon interface - that is wxRibbonBar.
   
     Ribbon controls often have a region which is "transparent", and shows the
diff -uNr wxorig/interface/wx/ribbon/page.h wxnew/interface/wx/ribbon/page.h
--- wxorig/interface/wx/ribbon/page.h	2010-06-28 05:22:32.000000000 -0400
+++ wxnew/interface/wx/ribbon/page.h	2011-03-21 17:19:40.000000000 -0400
@@ -77,7 +77,7 @@
 
     /**
         Get the icon used for the page in the ribbon bar tab area (only
-        displayed if the ribbon bar is actuallt showing icons).
+        displayed if the ribbon bar is actually showing icons).
     */
     wxBitmap& GetIcon();
   
@@ -86,7 +86,7 @@
     
         When a page is too small to display all of its children, scroll buttons
         will appear (and if the page is sized up enough, they will disappear again).
-        Slightly counter-intuively, these buttons are created as siblings of the
+        Slightly counter-intuitively, these buttons are created as siblings of the
         page rather than children of the page (to achieve correct cropping and
         paint ordering of the children and the buttons). When there are no scroll
         buttons, this function behaves the same as SetSize(), however when there
@@ -94,7 +94,7 @@
         then calls SetSize() with the remaining area.
     
         This is provided as a separate function to SetSize() rather than within
-        the implementation of SetSize(), as iteracting algorithms may not expect
+        the implementation of SetSize(), as interacting algorithms may not expect
         SetSize() to also set the size of siblings.
     */
     void SetSizeWithScrollButtonAdjustment(int x, int y, int width, int height);
@@ -138,7 +138,7 @@
         Scroll the page by some amount up / down / left / right.
     
         When the page's children are too big to fit in the onscreen area given to
-        the page, scroll buttons will appear, and the page can be programatically
+        the page, scroll buttons will appear, and the page can be programmatically
         scrolled. Positive values of @a lines will scroll right or down, while
         negative values will scroll up or left (depending on the direction in which
         panels are stacked). A line is equivalent to a constant number of pixels.
@@ -155,7 +155,7 @@
         Scroll the page by a set number of pixels up / down / left / right.
     
         When the page's children are too big to fit in the onscreen area given to
-        the page, scroll buttons will appear, and the page can be programatically
+        the page, scroll buttons will appear, and the page can be programmatically
         scrolled. Positive values of @a lines will scroll right or down, while
         negative values will scroll up or left (depending on the direction in which
         panels are stacked).
diff -uNr wxorig/interface/wx/ribbon/toolbar.h wxnew/interface/wx/ribbon/toolbar.h
--- wxorig/interface/wx/ribbon/toolbar.h	2010-06-28 05:22:32.000000000 -0400
+++ wxnew/interface/wx/ribbon/toolbar.h	2011-03-21 17:21:46.000000000 -0400
@@ -138,7 +138,7 @@
         Add a separator to the tool bar.
         
         Separators are used to separate tools into groups. As such, a separator
-        is not explicity drawn, but is visually seen as the gap between tool
+        is not explicitly drawn, but is visually seen as the gap between tool
         groups.
     */
     virtual wxRibbonToolBarToolBase* AddSeparator();
@@ -147,7 +147,7 @@
         Set the number of rows to distribute tool groups over.
         
         Tool groups can be distributed over a variable number of rows. The way
-        in which groups are assigned to rows is not specificed, and the order
+        in which groups are assigned to rows is not specified, and the order
         of groups may change, but they will be distributed in such a way as to
         minimise the overall size of the tool bar.
         
diff -uNr wxorig/interface/wx/stc/stc.h wxnew/interface/wx/stc/stc.h
--- wxorig/interface/wx/stc/stc.h	2010-11-24 20:30:28.000000000 -0500
+++ wxnew/interface/wx/stc/stc.h	2011-03-21 17:25:56.000000000 -0400
@@ -360,7 +360,7 @@
     void AddText(const wxString& text);
 
     /**
-        The following methods are nearly equivallent to their similarly named
+        The following methods are nearly equivalent to their similarly named
         cousins above.  The difference is that these methods bypass wxString
         and always use a char* even if used in a unicode build of wxWidgets.
         In that case the character data will be utf-8 encoded since that is
@@ -1383,17 +1383,17 @@
     int GetWrapMode() const;
 
     /**
-        Retrive the start indent for wrapped lines.
+        Retrieve the start indent for wrapped lines.
     */
     int GetWrapStartIndent() const;
 
     /**
-        Retrive the display mode of visual flags for wrapped lines.
+        Retrieve the display mode of visual flags for wrapped lines.
     */
     int GetWrapVisualFlags() const;
 
     /**
-        Retrive the location of visual flags for wrapped lines.
+        Retrieve the location of visual flags for wrapped lines.
     */
     int GetWrapVisualFlagsLocation() const;
 
@@ -2449,7 +2449,7 @@
     void SetXCaretPolicy(int caretPolicy, int caretSlop);
 
     /**
-        Get and Set the xOffset (ie, horizonal scroll position).
+        Get and Set the xOffset (ie, horizontal scroll position).
     */
     void SetXOffset(int newOffset);
 
diff -uNr wxorig/interface/wx/string.h wxnew/interface/wx/string.h
--- wxorig/interface/wx/string.h	2011-03-13 21:31:42.000000000 -0400
+++ wxnew/interface/wx/string.h	2011-03-21 14:29:26.000000000 -0400
@@ -324,7 +324,7 @@
     void SetChar(size_t n, wxUniChar ch);
 
     /**
-        Returns a the last character.
+        Returns the last character.
 
         This is a wxWidgets 1.xx compatibility function;
         you should not use it in new code.
@@ -447,7 +447,7 @@
     const wxScopedCharBuffer utf8_str() const;
 
     /**
-        Converts the strings contents to the wide character represention
+        Converts the strings contents to the wide character representation
         and returns it as a temporary wxWCharBuffer object (Unix and OS X)
         or returns a pointer to the internal string contents in wide character
         mode (Windows).
@@ -1326,7 +1326,7 @@
     /**
         @member_group_name{iter, Iterator interface}
 
-        These methods return iterators to the beginnnig or end of the string.
+        These methods return iterators to the beginning or end of the string.
 
         Please see any STL reference (e.g. http://www.cppreference.com/wiki/string/start)
         for their documentation.
@@ -1473,7 +1473,7 @@
 
 
     // STATIC FUNCTIONS
-    // Keep these functions separed from the other groups or Doxygen gets confused
+    // Keep these functions separated from the other groups or Doxygen gets confused
     // -----------------------------------------------------------------------------
 
     /**
diff -uNr wxorig/interface/wx/thread.h wxnew/interface/wx/thread.h
--- wxorig/interface/wx/thread.h	2011-03-14 21:31:08.000000000 -0400
+++ wxnew/interface/wx/thread.h	2011-03-21 14:17:22.000000000 -0400
@@ -355,7 +355,7 @@
                 download_chunk(buffer, 1024);     // this takes time...
 
                 {
-                    // ensure noone reads m_data while we write it
+                    // ensure no one reads m_data while we write it
                     wxCriticalSectionLocker lock(m_dataCS);
                     memcpy(m_data+offset, buffer, 1024);
                     offset += 1024;
@@ -544,7 +544,7 @@
 
     Finally, you should try to use wxCriticalSectionLocker class whenever
     possible instead of directly using wxCriticalSection for the same reasons
-    wxMutexLocker is preferrable to wxMutex - please see wxMutex for an example.
+    wxMutexLocker is preferable to wxMutex - please see wxMutex for an example.
 
     @library{wxbase}
     @category{threading}
@@ -697,7 +697,7 @@
     @section thread_types Types of wxThreads
 
     There are two types of threads in wxWidgets: @e detached and @e joinable,
-    modeled after the the POSIX thread API. This is different from the Win32 API
+    modeled after the POSIX thread API. This is different from the Win32 API
     where all threads are joinable.
 
     By default wxThreads in wxWidgets use the @b detached behavior.
@@ -1027,7 +1027,7 @@
             performance issues on those systems with small default stack since those
             typically use fully committed memory for the stack.
             On the contrary, if you use a lot of threads (say several hundred),
-            virtual adress space can get tight unless you explicitly specify a
+            virtual address space can get tight unless you explicitly specify a
             smaller amount of thread stack space for each thread.
 
         @return One of:
diff -uNr wxorig/interface/wx/xml/xml.h wxnew/interface/wx/xml/xml.h
--- wxorig/interface/wx/xml/xml.h	2010-11-24 20:30:28.000000000 -0500
+++ wxnew/interface/wx/xml/xml.h	2011-03-21 17:28:26.000000000 -0400
@@ -100,7 +100,7 @@
     /**
         Copy constructor.
 
-        Note that this does NOT copy syblings and parent pointer, i.e. GetParent()
+        Note that this does NOT copy siblings and parent pointer, i.e. GetParent()
         and GetNext() will return @NULL after using copy ctor and are never unmodified by operator=().
         On the other hand, it DOES copy children and attributes.
     */
@@ -175,7 +175,7 @@
     const wxString& GetContent() const;
 
     /**
-        Returns the number of nodes which separe this node from @c grandparent.
+        Returns the number of nodes which separate this node from @c grandparent.
 
         This function searches only the parents of this node until it finds
         @a grandparent or the @NULL node (which is the parent of non-linked
@@ -300,7 +300,7 @@
 
         Returns @true if the node was found and removed or @false if the node
         could not be found.
-        Note that the caller is reponsible for deleting the removed node in order
+        Note that the caller is responsible for deleting the removed node in order
         to avoid memory leaks.
     */
     virtual bool RemoveChild(wxXmlNode* child);
@@ -484,7 +484,7 @@
     wxXmlDocument doc;
     doc.Load("myfile.xml", "UTF-8", wxXMLDOC_KEEP_WHITESPACE_NODES);
 
-    // myfile2.xml will be indentic to myfile.xml saving it this way:
+    // myfile2.xml will be identical to myfile.xml saving it this way:
     doc.Save("myfile2.xml", wxXML_NO_INDENTATION);
     @endcode
 
@@ -538,7 +538,7 @@
         The document root node will be set to @NULL and thus IsOk() will
         return @false after calling this function.
 
-        Note that the caller is reponsible for deleting the returned node in order
+        Note that the caller is responsible for deleting the returned node in order
         to avoid memory leaks.
     */
     wxXmlNode* DetachRoot();
@@ -568,7 +568,7 @@
         Returns the version of document.
 
         This is the value in the @c \<?xml version="1.0"?\> header of the XML document.
-        If the version attribute was not explicitely given in the header, this function
+        If the version attribute was not explicitly given in the header, this function
         returns an empty string.
     */
     const wxString& GetVersion() const;

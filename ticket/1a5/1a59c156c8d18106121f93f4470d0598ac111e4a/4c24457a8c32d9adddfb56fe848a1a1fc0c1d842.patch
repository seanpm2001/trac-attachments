Index: docs/doxygen/overviews/log.h
===================================================================
--- docs/doxygen/overviews/log.h	(révision 70085)
+++ docs/doxygen/overviews/log.h	(copie de travail)
@@ -11,7 +11,7 @@
 @page overview_log wxLog Classes Overview
 
 Classes: wxLog, wxLogStderr, wxLogStream, wxLogTextCtrl, wxLogWindow, wxLogGui, wxLogNull, wxLogBuffer, 
-         wxLogChain, wxLogInterposer, wxLogInterposerTemp, wxStreamToTextRedirector
+         wxLogChain, wxLogInterposer, wxLogInterposerTemp, wxStreamToTextRedirector, wxLogFormatter
 
 Table of contents:
 @li @ref overview_log_introduction
@@ -20,7 +20,6 @@
 @li @ref overview_log_mt 
 @li @ref overview_log_customize
 @li @ref overview_log_tracemasks
-@li @ref overview_log_timestamps
 <hr>
 
 
@@ -275,8 +274,12 @@
 level of the message. If you do want to handle messages of different levels
 differently, then you should override wxLog::DoLogTextAtLevel().
 
-Finally, if more control over the output format is needed, then the first
-function must be overridden as it allows to construct custom messages
+You can easily customize the output string using a formatter, which help you
+building strings with informations like component name, time, location in source files,
+thread ID and extra data.
+  
+Finally, if more control over the output format is needed, then DoLogRecord()
+must be overridden as it allows to construct custom messages
 depending on the log level or even do completely different things depending
 on the message severity (for example, throw away all messages except
 warnings and errors, show warnings on the screen and forward the error
@@ -321,25 +324,5 @@
 
 The standard trace masks are given in wxLogTrace() documentation.
 
-
-@section overview_log_timestamps Timestamps
-
-The wxLog::LogRecord() function automatically prepends a time stamp
-to all the messages. The format of the time stamp may be changed: it can be
-any string with % specifications fully described in the documentation of the
-standard @e strftime() function. For example, the default format is
-@c "[%d/%b/%y %H:%M:%S] " which gives something like @c "[17/Sep/98 22:10:16] "
-(without quotes) for the current date. 
-
-Setting an empty string as the time format or calling the shortcut wxLog::DisableTimestamp(), 
-disables timestamping of the messages completely.
-
-@note
-Timestamping is disabled for Visual C++ users in debug builds by
-default because otherwise it would be impossible to directly go to the line
-from which the log message was generated by simply clicking in the debugger
-window on the corresponding error message. If you wish to enable it, please
-use SetTimestamp() explicitly.
-
 */
 
Index: include/wx/log.h
===================================================================
--- include/wx/log.h	(révision 70085)
+++ include/wx/log.h	(copie de travail)
@@ -310,6 +310,34 @@
 };
 
 // ----------------------------------------------------------------------------
+// derive from this class to customize format of log messages
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_BASE wxLogFormatter
+{
+public:
+    // ctor
+    wxLogFormatter() { }
+
+    // make dtor virtual for all derived classes
+    virtual ~wxLogFormatter() { }
+
+
+    // log messages format
+    // -------------------
+
+    // override this function to customize format of log messages
+    virtual wxString Format(wxLogLevel level,
+        const wxString& msg,
+        const wxLogRecordInfo& info) const;
+
+protected:
+    // format time
+    virtual wxString FormatTime(time_t t) const;
+};
+
+
+// ----------------------------------------------------------------------------
 // derive from this class to redirect (or suppress, or ...) log messages
 // normally, only a single instance of this class exists but it's not enforced
 // ----------------------------------------------------------------------------
@@ -318,7 +346,7 @@
 {
 public:
     // ctor
-    wxLog() { }
+    wxLog() : m_Formatter(new wxLogFormatter) { } // Start with default formatter
 
     // make dtor virtual for all derived classes
     virtual ~wxLog();
@@ -394,6 +422,14 @@
     static bool GetVerbose() { return ms_bVerbose; }
 
 
+    // log formatting
+    // -----------------
+
+    // Accessors to the wxFormatter object
+    // Use this to customize format of a log message
+    wxLogFormatter *GetFormatter() { return m_Formatter; }
+    wxLogFormatter *SetFormatter(wxLogFormatter* pFormatter);
+
     // message buffering
     // -----------------
 
@@ -458,17 +494,25 @@
     // sets the time stamp string format: this is used as strftime() format
     // string for the log targets which add time stamps to the messages; set
     // it to empty string to disable time stamping completely.
-    static void SetTimestamp(const wxString& ts) { ms_timestamp = ts; }
+    // Deprecated, use wxLogFormatter to customize log format
+    static wxDEPRECATED_BUT_USED_INTERNALLY_INLINE( void SetTimestamp(const wxString& ts),
+        ms_timestamp = ts; )
 
     // disable time stamping of log messages
-    static void DisableTimestamp() { SetTimestamp(wxEmptyString); }
+    // Deprecated, use wxLogFormatter to customize log format.
+    // Directly set ms_timestamp instead of calling SetTimestamp(wxEmptyString) to
+    // avoid deprecated function warning when building apps.
+    static wxDEPRECATED_INLINE( void DisableTimestamp(),
+        ms_timestamp = wxEmptyString; )
 
 
     // is this trace mask in the list?
     static bool IsAllowedTraceMask(const wxString& mask);
 
     // get the current timestamp format string (maybe empty)
-    static const wxString& GetTimestamp() { return ms_timestamp; }
+    // Deprecated, use wxLogFormatter to customize log format
+    static wxDEPRECATED_BUT_USED_INTERNALLY_INLINE( const wxString& GetTimestamp(),
+        return ms_timestamp; )
 
 
 
@@ -477,7 +521,8 @@
 
     // put the time stamp into the string if ms_timestamp != NULL (don't
     // change it otherwise)
-    static void TimeStamp(wxString *str);
+    // Deprecated, use wxLogFormatter to customize log format
+    static wxDEPRECATED_BUT_USED_INTERNALLY( void TimeStamp(wxString *str); )
 
     // these methods should only be called from derived classes DoLogRecord(),
     // DoLogTextAtLevel() and DoLogText() implementations respectively and
@@ -621,6 +666,12 @@
                       const wxLogRecordInfo& info);
 
 
+    // variables
+    // ----------------
+
+    wxLogFormatter    *m_Formatter; // Formatter object
+
+
     // static variables
     // ----------------
 
@@ -639,7 +690,8 @@
 
     // format string for strftime(), if empty, time stamping log messages is
     // disabled
-    static wxString    ms_timestamp;
+    // Deprecated, see wxLogFormatter
+    static wxString ms_timestamp;
 
 #if WXWIN_COMPATIBILITY_2_8
     static wxTraceMask ms_ulTraceMask;   // controls wxLogTrace behaviour
Index: interface/wx/log.h
===================================================================
--- interface/wx/log.h	(révision 70085)
+++ interface/wx/log.h	(copie de travail)
@@ -583,7 +583,101 @@
 
 
 
+
 /**
+    @class wxLogFormatter
+
+    wxLogFormatter class is used to format the log messages. It can be used as is,
+    or can be derived to create custom formatters.
+    
+    Used as is provide a basical format composed by the time, the level and the message
+    of the log record.
+
+    Overrided, it provided a custom formatter, simply overriding Format() function :
+      
+    @code
+        class MyFormatter : public wxLogFormatter
+        {
+            virtual wxString Format(wxLogLevel level,
+                const wxString& msg,
+                const wxLogRecordInfo& info) const
+            {
+                return wxString::Format("[%d] %s(%d) : %s",
+                    info.threadId, info.filename, info.line, msg);
+            }
+        };
+    @endcode
+      
+    With this class, if you call :
+      
+    @code
+        wxLogMessage(_("*** Application started ***"));
+    @endcode
+      
+    you will get on your log target, something like :
+      
+    @code
+        [7872] d:\testApp\src\testApp.cpp(85) : *** Application started ***
+    @endcode
+
+    @library{wxbase}
+    @category{logging}
+
+    @see @ref overview_log
+*/
+class wxLogFormatter
+{
+public:
+    /**
+        The default ctor does nothing.
+    */
+    wxLogFormatter();
+
+
+    /**
+        This function format the log message from log record informations.
+        
+        Override this function to customize the output string format.
+        
+        @param level
+            level of the log record
+        @param msg
+            message of the log record
+        @param info
+            informations (such time, component, location in sources...)
+            of the log record
+
+        @return
+            The formated message
+            
+        @note
+            Timestamping is disabled for Visual C++ users in debug builds by
+            default because otherwise it would be impossible to directly go to the line
+            from which the log message was generated by simply clicking in the debugger
+            window on the corresponding error message. If you wish to enable it, override
+            FormatTime.
+    */
+    virtual wxString Format(wxLogLevel level,
+        const wxString& msg,
+        const wxLogRecordInfo& info) const;
+
+protected:
+    /**
+        This function format time part of the log message.
+        
+        Override this function to customize time format.
+        
+        @param time
+            time to format
+
+        @return
+            The formated time
+    */
+    virtual wxString FormatTime(time_t time) const;
+};
+
+
+/**
     @class wxLog
 
     wxLog class defines the interface for the <em>log targets</em> used by wxWidgets
@@ -599,7 +693,7 @@
     @note For console-mode applications, the default target is wxLogStderr, so
           that all @e wxLogXXX() functions print on @c stderr when @c wxUSE_GUI = 0.
 
-    @library{wxcore}
+    @library{wxbase}
     @category{logging}
 
     @see @ref overview_log, @ref group_funcmacro_log "wxLogXXX() functions" 
@@ -863,6 +957,9 @@
     
     /**
         Returns the current timestamp format string.
+
+        @deprecated
+        Use wxLogFormatter to customize log format.
     */
     static const wxString& GetTimestamp();
 
@@ -871,12 +968,18 @@
         messages. The string may contain any normal characters as well as %
         prefixed format specifiers, see @e strftime() manual for details.
         Passing an empty string to this function disables message time stamping.
+
+        @deprecated
+        Use wxLogFormatter to customize log format.
     */
     static void SetTimestamp(const wxString& format);
 
     /**
         Disables time stamping of the log messages.
 
+        @deprecated
+        Use wxLogFormatter to customize log format.
+
         @since 2.9.0
     */
     static void DisableTimestamp();
@@ -899,6 +1002,22 @@
     
     //@}
     
+
+    /**
+        Returns the log formatter
+    */
+    wxLogFormatter *GetFormatter();
+
+    /**
+        Sets the specified formatter as the active one.
+        
+        @param pFormatter
+            The new formatter. If @NULL, create a new default formatter.
+            
+        Returns the pointer to the previous formatter. To avoid memory leak, delete
+        it if you don't plan to attach it again to a wxLog object.
+    */
+    wxLogFormatter *SetFormatter(wxLogFormatter* pFormatter);
     
 
     /**
Index: src/common/log.cpp
===================================================================
--- src/common/log.cpp	(révision 70085)
+++ src/common/log.cpp	(copie de travail)
@@ -205,6 +205,71 @@
 }
 
 // ----------------------------------------------------------------------------
+// wxLogFormatter class implementation
+// ----------------------------------------------------------------------------
+
+wxString
+wxLogFormatter::Format(wxLogLevel level,
+                       const wxString& msg,
+                       const wxLogRecordInfo& info) const
+{
+    wxString prefix;
+
+    // don't time stamp debug messages under MSW as debug viewers usually
+    // already have an option to do it
+#ifdef __WXMSW__
+    if ( level != wxLOG_Debug && level != wxLOG_Trace )
+#endif // __WXMSW__
+        prefix += FormatTime (info.timestamp);
+
+    switch ( level )
+    {
+    case wxLOG_Error:
+        prefix += _("Error: ");
+        break;
+
+    case wxLOG_Warning:
+        prefix += _("Warning: ");
+        break;
+
+        // don't prepend "debug/trace" prefix under MSW as it goes to the debug
+        // window anyhow and so can't be confused with something else
+#ifndef __WXMSW__
+    case wxLOG_Debug:
+        // this prefix (as well as the one below) is intentionally not
+        // translated as nobody translates debug messages anyhow
+        prefix += "Debug: ";
+        break;
+
+    case wxLOG_Trace:
+        prefix += "Trace: ";
+        break;
+#endif // !__WXMSW__
+    }
+
+    return prefix + msg;
+}
+
+wxString
+wxLogFormatter::FormatTime(time_t WXUNUSED(time)) const
+{
+   wxString str;
+
+    // wxLog::TimeStamp is flagged as deprecated. So when this function
+    // will be erased, replace the line below by the commented lines.
+    // Also unflag parameter time as "WXUNUSED".
+    wxLog::TimeStamp (&str);
+
+//#if wxUSE_DATETIME
+//    str = wxDateTime(time).Format(wxS("%X"));
+//    str += wxS(": ");
+//#endif // wxUSE_DATETIME
+
+    return str;
+}
+
+
+// ----------------------------------------------------------------------------
 // wxLog class implementation
 // ----------------------------------------------------------------------------
 
@@ -266,6 +331,8 @@
             gs_prevLog.numRepeated
         );
     }
+
+    delete m_Formatter;
 }
 
 // ----------------------------------------------------------------------------
@@ -404,47 +471,8 @@
     wxUnusedVar(info);
 #endif // WXWIN_COMPATIBILITY_2_8/!WXWIN_COMPATIBILITY_2_8
 
-
-    // TODO: it would be better to extract message formatting in a separate
-    //       wxLogFormatter class but for now we hard code formatting here
-
-    wxString prefix;
-
-    // don't time stamp debug messages under MSW as debug viewers usually
-    // already have an option to do it
-#ifdef __WXMSW__
-    if ( level != wxLOG_Debug && level != wxLOG_Trace )
-#endif // __WXMSW__
-        TimeStamp(&prefix);
-
-    // TODO: use the other wxLogRecordInfo fields
-
-    switch ( level )
-    {
-        case wxLOG_Error:
-            prefix += _("Error: ");
-            break;
-
-        case wxLOG_Warning:
-            prefix += _("Warning: ");
-            break;
-
-        // don't prepend "debug/trace" prefix under MSW as it goes to the debug
-        // window anyhow and so can't be confused with something else
-#ifndef __WXMSW__
-        case wxLOG_Debug:
-            // this prefix (as well as the one below) is intentionally not
-            // translated as nobody translates debug messages anyhow
-            prefix += "Debug: ";
-            break;
-
-        case wxLOG_Trace:
-            prefix += "Trace: ";
-            break;
-#endif // !__WXMSW__
-    }
-
-    DoLogTextAtLevel(level, prefix + msg);
+    // Use wxLogFormatter to format the message
+    DoLogTextAtLevel(level, m_Formatter->Format (level, msg, info));
 }
 
 void wxLog::DoLogTextAtLevel(wxLogLevel level, const wxString& msg)
@@ -745,6 +773,14 @@
 
 #endif // wxUSE_THREADS
 
+wxLogFormatter *wxLog::SetFormatter(wxLogFormatter* pFormatter)
+{
+    wxLogFormatter *pOldFormatter = m_Formatter;
+    m_Formatter = pFormatter ? pFormatter : new wxLogFormatter;
+
+    return pOldFormatter;
+}
+
 void wxLog::Flush()
 {
     LogLastRepeatIfNeeded();

Index: wx/lib/agw/flatmenu.py
===================================================================
--- wx/lib/agw/flatmenu.py	(revision 65156)
+++ wx/lib/agw/flatmenu.py	(working copy)
@@ -4842,8 +4842,28 @@
 
         newItem = FlatMenuItem(self, id, item, helpString, kind)
         return self.AppendItem(newItem)
+    
+    
+    def Prepend(self, id, item, helpString="", kind=wx.ITEM_NORMAL):
+        """
+        Prepends an item to this menu.
 
+        :param `id`: the menu item identifier;
+        :param `item`: the string to appear on the menu item;
+        :param `helpString`: an optional help string associated with the item. By default,
+         the handler for the ``EVT_FLAT_MENU_ITEM_MOUSE_OVER`` event displays this string
+         in the status line;
+        :param `kind`: may be ``wx.ITEM_NORMAL`` for a normal button (default),
+         ``wx.ITEM_CHECK`` for a checkable tool (such tool stays pressed after it had been
+         toggled) or ``wx.ITEM_RADIO`` for a checkable tool which makes part of a radio
+         group of tools each of which is automatically unchecked whenever another button
+         in the group is checked;
+        """
 
+        newItem = FlatMenuItem(self, id, item, helpString, kind)
+        return self.PrependItem(newItem)
+
+
     def AppendSubMenu(self, subMenu, item, helpString=""):
         """
         Adds a pull-right submenu to the end of the menu. See AppendMenu()
@@ -4870,21 +4890,40 @@
         return self.AppendItem(newItem)
 
 
-    # The main Append function
     def AppendItem(self, menuItem):
         """
         Appends an item to this menu.
 
         :param `menuItem`: an instance of L{FlatMenuItem}.
         """
+        self._itemsArr.append(menuItem)
+        return self.AddItem(menuItem)
+   
+        
+    def PrependItem(self, menuItem):
+        """
+        Prepends an item to this menu.
 
+        :param `menuItem`: an instance of L{FlatMenuItem}.
+        """
+        self._itemsArr.insert(0,menuItem)
+        return self.AddItem(menuItem)
+        
+
+    def AddItem(self, menuItem):
+        """
+        Internal function to add the item to this menu. The item must
+        already be in self._itemsArr.
+
+        :param `menuItem`: an instance of L{FlatMenuItem}.
+        """
+
         if not menuItem:
             raise Exception("Adding None item?")
             return
         
         # Reparent to us
         menuItem.SetMenu(self) 
-        self._itemsArr.append(menuItem)
         menuItem._isAttachedToMenu = True
 
         # Update the menu width if necessary

diff --git a/build/bakefiles/common.bkl b/build/bakefiles/common.bkl
index ceea7fb..d4f3430 100644
--- a/build/bakefiles/common.bkl
+++ b/build/bakefiles/common.bkl
@@ -61,16 +61,20 @@
         <if cond="PLATFORM_WIN32=='1' and OFFICIAL_BUILD=='0'">_$(VENDOR)</if>
     </set>
 
+    <!-- debug suffix used for Windows libraries which use debug CRT -->
     <set var="WXDEBUGFLAG">
-        <if cond="BUILD=='debug' and DEBUG_FLAG=='default'">d</if>
-        <if cond="DEBUG_FLAG=='1'">d</if>
+        <if cond="BUILD=='debug' and DEBUG_RUNTIME_LIBS=='default'">d</if>
+        <if cond="DEBUG_RUNTIME_LIBS=='1'">d</if>
     </set>
     <set var="WXUNICODEFLAG">
         <!-- WinCE is Unicode-only platform: -->
         <if cond="UNICODE=='1' and FORMAT!='msevc4prj'">u</if>
     </set>
+    <set var="WX_U_D_SUFFIX">
+        $(WXUNICODEFLAG)$(WXDEBUGFLAG)
+    </set>
     <set var="WXNAMESUFFIX">
-        $(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)
+        $(WX_U_D_SUFFIX)$(WX_LIB_FLAVOUR)
     </set>
 
     <set var="WXUNIVNAME">
@@ -177,7 +181,7 @@
             <if cond="SHARED=='1'">dll</if>
         </set>
         <set var="CFG_NAME_PART">
-            $(PORTNAME)$(WXUNIVNAME)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WXDLLFLAG)$(CFG)
+            $(PORTNAME)$(WXUNIVNAME)$(WX_U_D_SUFFIX)$(WXDLLFLAG)$(CFG)
         </set>
 
         <!-- NB: this is make_var so that it can be overriden on command line
@@ -207,7 +211,7 @@
 
     <if cond="FORMAT!='autoconf'">
         <set var="SETUPHDIR" make_var="1">
-            $(LIBDIRNAME)\$(PORTNAME)$(WXUNIVNAME)$(WXUNICODEFLAG)$(WXDEBUGFLAG)
+            $(LIBDIRNAME)\$(PORTNAME)$(WXUNIVNAME)$(WX_U_D_SUFFIX)
         </set>
     </if>
 
@@ -257,8 +261,7 @@
     </set>
 
     <set var="DEBUG_DEFINE">
-        <if cond="FORMAT!='autoconf' and BUILD=='debug' and DEBUG_FLAG=='default'">__WXDEBUG__</if>
-        <if cond="FORMAT!='autoconf' and DEBUG_FLAG=='1'">__WXDEBUG__</if>
+        <if cond="DEBUG_FLAG=='0'">wxDEBUG_LEVEL=0</if>
     </set>
     <!-- does not cover all cases, but better than nothing -->
     <set var="NO_VC_CRTDBG">
@@ -324,7 +327,7 @@
 
     <template id="3rdparty_lib" template="common_settings,anylib">
         <if cond="FORMAT=='autoconf'">
-            <libname>$(id)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)-$(WX_RELEASE)$(HOST_SUFFIX)</libname>
+            <libname>$(id)$(WX_LIB_FLAVOUR)-$(WX_RELEASE)$(HOST_SUFFIX)</libname>
         </if>
         <if cond="FORMAT!='autoconf'">
             <libname>$(id)$(WXDEBUGFLAG)$(HOST_SUFFIX)</libname>
@@ -712,13 +715,6 @@ $(TAB)$(VC_COMPILER) /EP /nologo "$(DOLLAR)(InputPath)" > "$(SETUPHDIR)\wx\msw\r
     </set>
     <set var="PLUGIN_VERSION">$(PLUGVERDELIM)$(PLUGIN_VERSION0)</set>
 
-    <set var="PLUGINSUFFIX">
-        <if cond="UNICODE=='0' and BUILD=='release'"></if>
-        <if cond="UNICODE=='0' and BUILD=='debug'">d</if>
-        <if cond="UNICODE=='1' and BUILD=='release'">u</if>
-        <if cond="UNICODE=='1' and BUILD=='debug'">ud</if>
-    </set>
-
     <set var="PLUGINS_INST_DIR" make_var="1">
         $(LIBDIR)/wx/$(PLUGIN_VERSION0)
     </set>
@@ -726,7 +722,7 @@ $(TAB)$(VC_COMPILER) /EP /nologo "$(DOLLAR)(InputPath)" > "$(SETUPHDIR)\wx\msw\r
     <define-rule name="wx-base-plugin" extends="module">
         <template>
             <dllname>
-                $(id)$(PLUGINSUFFIX)$(PLUGIN_VERSION)$(WXCOMPILER)
+                $(id)$(WX_U_D_SUFFIX)$(PLUGIN_VERSION)$(WXCOMPILER)
             </dllname>
             <define>WXUSINGDLL</define>
             <define>wxUSE_GUI=0</define>
@@ -737,7 +733,7 @@ $(TAB)$(VC_COMPILER) /EP /nologo "$(DOLLAR)(InputPath)" > "$(SETUPHDIR)\wx\msw\r
     <define-rule name="wx-gui-plugin" extends="module">
         <template template="wx">
             <dllname>
-                $(id)_$(PORTNAME)$(WXUNIVNAME)$(PLUGINSUFFIX)$(PLUGIN_VERSION)$(WXCOMPILER)
+                $(id)_$(PORTNAME)$(WXUNIVNAME)$(WX_U_D_SUFFIX)$(PLUGIN_VERSION)$(WXCOMPILER)
             </dllname>
             <define>WXUSINGDLL</define>
             <install-to>$(PLUGINS_INST_DIR)</install-to>
diff --git a/build/bakefiles/config.bkl b/build/bakefiles/config.bkl
index a54e5b2..8ec1dba 100644
--- a/build/bakefiles/config.bkl
+++ b/build/bakefiles/config.bkl
@@ -134,10 +134,11 @@ and not included if BUILD=release.
 
     <option name="DEBUG_FLAG">
         <values>0,1,default</values>
-        <default-value>default</default-value>
+        <default-value>1</default-value>
         <description>
-Should __WXDEBUG__ be defined? The default value "default" means that it will
-be defined if BUILD=debug and not defined if BUILD=release.
+Value of wxDEBUG_LEVEL. The default value is the same as 1 and means that all
+but expensive assert checks are enabled, use 0 to completely remove debugging
+code.
         </description>
     </option>
 
@@ -146,8 +147,8 @@ be defined if BUILD=debug and not defined if BUILD=release.
             <values>0,1,default</values>
             <default-value>default</default-value>
             <description>
-Should link against debug RTL (msvcrtd.dll) or release (msvcrt.dll)?
-Acts according to BUILD by default.
+Link against debug (e.g. msvcrtd.dll) or release (msvcrt.dll) RTL?
+Default is to use debug CRT if and only if BUILD==debug.
             </description>
         </option>
     </if>
@@ -299,7 +300,7 @@ Acts according to BUILD by default.
             <description>
                 Link with gdiplus.lib? (Needed for wxGraphicsContext, will also set wxUSE_GRAPHICS_CONTEXT)
             </description>
-	</option>
+        </option>
     </if>
 
     <option name="OFFICIAL_BUILD">
diff --git a/configure.in b/configure.in
index 4a368c9..f00cd43 100644
--- a/configure.in
+++ b/configure.in
@@ -606,11 +606,71 @@ AC_ARG_WITH(macosx-version-min,    [  --with-macosx-version-min=VER   build bina
 AC_MSG_RESULT([$wxUSE_MACOSX_VERSION_MIN])
 
 dnl ---------------------------------------------------------------------------
+dnl debugging options
+dnl ---------------------------------------------------------------------------
+
+dnl don't use WX_ARG_ENABLE as it just gets in the way instead of helping with
+dnl this rather unusual option
+AC_MSG_CHECKING([for --enable-debug])
+AC_ARG_ENABLE(debug,       [  --enable-debug          build library for debugging],
+    [
+        if test "$enableval" = yes; then
+            wxUSE_DEBUG=yes
+        elif test "$enableval" = no; then
+            wxUSE_DEBUG=no
+        elif test "$enableval" = max; then
+            wxUSE_DEBUG=yes
+            WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -DwxDEBUG_LEVEL=2"
+        else
+            AC_MSG_ERROR([Invalid --enable-debug value, must be yes, no or max])
+        fi
+    ],
+    wxUSE_DEBUG=default
+)
+
+case "$wxUSE_DEBUG" in
+    yes)
+        dnl build the library for debugging: enable debugging code and generate
+        dnl the debug information for the library itself
+        DEFAULT_wxUSE_DEBUG_FLAG=yes
+        DEFAULT_wxUSE_DEBUG_INFO=yes
+
+        dnl also disable optimizations by default if --enable-debug was used
+        dnl (this can still be overridden by an explicit --enable-optimise)
+        DEFAULT_wxUSE_OPTIMISE=no
+        ;;
+
+    no)
+        dnl --disable-debug is equivalent to both --disable-debug_flag and
+        dnl --disable-debug_info
+        DEFAULT_wxUSE_DEBUG_FLAG=no
+        DEFAULT_wxUSE_DEBUG_INFO=no
+        ;;
+
+    default)
+        dnl the library is built with debugging support by default but without
+        dnl debug information as this requires much, much more disk space
+        DEFAULT_wxUSE_DEBUG_FLAG=yes
+        DEFAULT_wxUSE_DEBUG_INFO=no
+        ;;
+esac
+
+WX_ARG_DISABLE(debug_flag,   [  --disable-debug_flag    disable all debugging support], wxUSE_DEBUG_FLAG)
+WX_ARG_ENABLE(debug_info,    [  --enable-debug_info     generate debug information], wxUSE_DEBUG_INFO)
+
+dnl enabled if just --enable-debug_{flag,info} was
+dnl
+dnl in any case, only set the default value and allow overriding it with an
+
+WX_ARG_ENABLE(debug_gdb,     [  --enable-debug_gdb      create code with extra GDB debugging information], wxUSE_DEBUG_GDB)
+WX_ARG_ENABLE(debug_cntxt,   [  --enable-debug_cntxt    obsolete, don't use: use wxDebugContext], wxUSE_DEBUG_CONTEXT)
+WX_ARG_ENABLE(mem_tracing,   [  --enable-mem_tracing    obsolete, don't use: create code with memory tracing], wxUSE_MEM_TRACING)
+
+dnl ---------------------------------------------------------------------------
 dnl global compile options
 dnl ---------------------------------------------------------------------------
 
 WX_ARG_DISABLE(shared,     [  --disable-shared        create static library instead of shared], wxUSE_SHARED)
-WX_ARG_ENABLE(debug,       [  --enable-debug          same as debug_flag and debug_info], wxUSE_DEBUG)
 WX_ARG_ENABLE(stl,         [  --enable-stl            use STL for containers], wxUSE_STL)
 WX_ARG_ENABLE(std_iostreams, [  --enable-std_iostreams  use standard C++ stream classes], wxUSE_STD_IOSTREAM)
 WX_ARG_ENABLE(std_string,    [  --enable-std_string     use standard C++ string classes], wxUSE_STD_STRING)
@@ -624,42 +684,8 @@ if test "$USE_OS2" = 1; then
     WX_ARG_ENABLE(omf,     [  --enable-omf            use OMF object format], wxUSE_OMF)
 fi
 
-dnl --enable-debug is equivalent to both --enable-debug_flag and
-dnl --enable-debug_info
-if test "$wxUSE_DEBUG" = "yes"; then
-    DEFAULT_wxUSE_DEBUG_FLAG=yes
-    DEFAULT_wxUSE_DEBUG_INFO=yes
-    BUILD=debug
-elif test "$wxUSE_DEBUG" = "no"; then
-    DEFAULT_wxUSE_DEBUG_FLAG=no
-    DEFAULT_wxUSE_DEBUG_INFO=no
-    BUILD=release
-fi
-
-WX_ARG_ENABLE(debug_flag,    [  --enable-debug_flag     set __WXDEBUG__ flag (recommended for developers!)], wxUSE_DEBUG_FLAG)
-WX_ARG_ENABLE(debug_info,    [  --enable-debug_info     create code with debugging information], wxUSE_DEBUG_INFO)
-
-dnl it's important to also do it in the other direction to get the correct
-dnl output in the configure summary (which uses wxUSE_DEBUG)
-if test "$wxUSE_DEBUG_FLAG" = "yes" -a "$wxUSE_DEBUG_INFO" = "yes"; then
-    wxUSE_DEBUG=yes
-    BUILD=debug
-fi
-
-dnl disable optimizations by default if --enable-debug was used but leave them
-dnl enabled if just --enable-debug_{flag,info} was
-dnl
-dnl in any case, only set the default value and allow overriding it with an
-dnl explicit --enable-optimise
-if test "$wxUSE_DEBUG" = "yes"; then
-    DEFAULT_wxUSE_OPTIMISE=no
-fi
-
 WX_ARG_DISABLE(optimise,   [  --disable-optimise      compile without optimisations], wxUSE_OPTIMISE)
 
-WX_ARG_ENABLE(debug_gdb,     [  --enable-debug_gdb      create code with extra GDB debugging information], wxUSE_DEBUG_GDB)
-WX_ARG_ENABLE(debug_cntxt,   [  --enable-debug_cntxt    use wxDebugContext], wxUSE_DEBUG_CONTEXT)
-WX_ARG_ENABLE(mem_tracing,   [  --enable-mem_tracing    create code with memory tracing], wxUSE_MEM_TRACING)
 WX_ARG_ENABLE(profile,       [  --enable-profile        create code with profiling information], wxUSE_PROFILE)
 WX_ARG_ENABLE(no_rtti,       [  --enable-no_rtti        create code without RTTI information], wxUSE_NO_RTTI)
 WX_ARG_ENABLE(no_exceptions, [  --enable-no_exceptions  create code without C++ exceptions handling], wxUSE_NO_EXCEPTIONS)
@@ -3876,15 +3902,6 @@ if test "$wxUSE_UNICODE" = "yes"; then
     UNICODE=1
 fi
 
-lib_debug_suffix=
-WX_DEBUGTYPE="release"
-DEBUG_FLAG=0
-if test "$wxUSE_DEBUG_FLAG" = "yes"; then
-    lib_debug_suffix=d
-    WX_DEBUGTYPE="debug"
-    DEBUG_FLAG=1
-fi
-
 WX_FLAVOUR=${WX_FLAVOUR:+-$WX_FLAVOUR}
 WX_LIB_FLAVOUR=`echo $WX_FLAVOUR | tr '-' '_'`
 
@@ -3893,25 +3910,25 @@ if test "$wxUSE_DEBUG_INFO" = "yes"; then
     DEBUG_INFO=1
 fi
 
-WX_VERSION_TAG=`echo WX${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}_${WX_RELEASE} | tr '[[a-z]]' '[[A-Z]]'`
+WX_VERSION_TAG=`echo WX${lib_unicode_suffix}${WX_LIB_FLAVOUR}_${WX_RELEASE} | tr '[[a-z]]' '[[A-Z]]'`
 
-TOOLCHAIN_NAME="${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"
+TOOLCHAIN_NAME="${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"
 
-TOOLCHAIN_FULLNAME="${HOST_PREFIX}${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}-${WX_CHARTYPE}-${WX_DEBUGTYPE}${config_linkage_component}-${WX_RELEASE}${WX_FLAVOUR}"
+TOOLCHAIN_FULLNAME="${HOST_PREFIX}${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}-${WX_CHARTYPE}${config_linkage_component}-${WX_RELEASE}${WX_FLAVOUR}"
 
 dnl library link name
-dnl These just save us from exporting lib_{unicode,debug,flavour}_suffix.
+dnl These just save us from exporting lib_{unicode,flavour}_suffix.
 dnl If we ever need to do that, we won't need to keep these.
 
 if test "$wxUSE_OSX_CARBON" = 1 -o "$wxUSE_OSX_COCOA" = 1 -o "$wxUSE_COCOA" = 1; then
-    WX_LIBRARY_BASENAME_NOGUI="wx_base${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}"
+    WX_LIBRARY_BASENAME_NOGUI="wx_base${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
 else
-    WX_LIBRARY_BASENAME_NOGUI="wx_base${WXBASEPORT}${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}"
+    WX_LIBRARY_BASENAME_NOGUI="wx_base${WXBASEPORT}${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
 fi
 if test "${TOOLKIT_DIR}" = "os2"; then
-    WX_LIBRARY_BASENAME_GUI="wx_pm${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}"
+    WX_LIBRARY_BASENAME_GUI="wx_pm${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
 else
-    WX_LIBRARY_BASENAME_GUI="wx_${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}${WX_LIB_FLAVOUR}"
+    WX_LIBRARY_BASENAME_GUI="wx_${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
 fi
 
 
@@ -5203,10 +5220,7 @@ if test "$wxUSE_DEBUG_GDB" = "yes" ; then
     fi
 fi
 
-if test "$wxUSE_DEBUG_FLAG" = "yes" ; then
-    AC_DEFINE(WXDEBUG)
-    WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -D__WXDEBUG__"
-else
+if test "$wxUSE_DEBUG_FLAG" = "no" ; then
     if test "$wxUSE_GTK" = 1 ; then
         if test "x$wxGTK_VERSION" = "x1" ; then
             CPPFLAGS="-DGTK_NO_CHECK_CASTS $CPPFLAGS"
@@ -7522,7 +7536,7 @@ EXTRALIBS="$LDFLAGS $LDFLAGS_VERSIONING $LIBS $DMALLOC_LIBS"
 EXTRALIBS_XML="$EXPAT_LINK"
 EXTRALIBS_HTML="$MSPACK_LINK"
 EXTRALIBS_MEDIA="$GST_LIBS"
-EXTRALIBS_STC="-lwxscintilla${lib_debug_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"
+EXTRALIBS_STC="-lwxscintilla${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"
 if test "$wxUSE_GUI" = "yes"; then
     EXTRALIBS_GUI=`echo $GUI_TK_LIBRARY $PNG_LINK $JPEG_LINK $TIFF_LINK $WEBKIT_LINK $EXTRALIBS_HILDON $EXTRALIBS_GNOMEVFS $EXTRALIBS_GNOMEPRINT`
 fi
@@ -7555,7 +7569,7 @@ if test "$wxUSE_ZLIB" = "builtin" ; then
 fi
 
 for i in $wxconfig_3rdparty ; do
-    WXCONFIG_LIBS="-lwx${i}${lib_debug_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX} $WXCONFIG_LIBS"
+    WXCONFIG_LIBS="-lwx${i}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX} $WXCONFIG_LIBS"
 done
 
 
@@ -7631,7 +7645,6 @@ AC_SUBST(EXTRALIBS_GNOMEPRINT)
 AC_SUBST(EXTRALIBS_GNOMEVFS)
 AC_SUBST(EXTRALIBS_HILDON)
 AC_SUBST(UNICODE)
-AC_SUBST(BUILD)
 AC_SUBST(DEBUG_INFO)
 AC_SUBST(DEBUG_FLAG)
 TOOLKIT_LOWERCASE=xxx
@@ -7942,7 +7955,6 @@ AC_SUBST(WX_RELEASE)
 AC_SUBST(WX_VERSION)
 AC_SUBST(WX_SUBVERSION)
 AC_SUBST(WX_CHARTYPE)
-AC_SUBST(WX_DEBUGTYPE)
 
 dnl note that in addition to the usual CPP/C/CXXFLAGS which are used for
 dnl building the library itself, we also have WXCONFIG_-prefixed variants which
@@ -8126,8 +8138,6 @@ echo "Configured wxWidgets ${WX_VERSION} for \`${host}'"
 echo ""
 echo "  Which GUI toolkit should wxWidgets use?                 ${TOOLKIT_DESC}"
 echo "  Should wxWidgets be compiled into single library?       ${wxUSE_MONOLITHIC:-yes}"
-
-echo "  Should wxWidgets be compiled in debug mode?             ${wxUSE_DEBUG:-no}"
 echo "  Should wxWidgets be linked as a shared library?         ${wxUSE_SHARED:-no}"
 echo $ECHO_N "  Should wxWidgets support Unicode?                       ${wxUSE_UNICODE:-no}$ECHO_C"
 if test "$wxUSE_UNICODE" = "yes"; then
diff --git a/docs/doxygen/groups/funcmacro_debug.h b/docs/doxygen/groups/funcmacro_debug.h
index bf313f6..788af21 100644
--- a/docs/doxygen/groups/funcmacro_debug.h
+++ b/docs/doxygen/groups/funcmacro_debug.h
@@ -8,7 +8,7 @@
 
 /**
 
-@defgroup group_funcmacro_debug Debugging
+@defgroup group_funcmacro_debug Debugging macros
 @ingroup group_funcmacro
 
 Useful macros and functions for error checking and defensive programming.
diff --git a/docs/doxygen/overviews/debugging.h b/docs/doxygen/overviews/debugging.h
index 1bb7d01..701f592 100644
--- a/docs/doxygen/overviews/debugging.h
+++ b/docs/doxygen/overviews/debugging.h
@@ -1,7 +1,8 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        debugging.h
 // Purpose:     topic overview
-// Author:      wxWidgets team
+// Author:      Vadim Zeitlin
+// Copyright:   (c) 2009 Vadim Zeitlin <vadim@wxwidgets.org>
 // RCS-ID:      $Id$
 // Licence:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
@@ -10,89 +11,93 @@
 
 @page overview_debugging Debugging
 
-Classes, functions and macros: wxDebugContext, wxObject, wxLog,
-                                @ref group_funcmacro_log, @ref group_funcmacro_debug
+Classes, functions and macros: wxLog, @ref group_funcmacro_log, @ref group_funcmacro_debug
 
 Various classes, functions and macros are provided in wxWidgets to help you debug
-your application. Most of these are only available if you compile both wxWidgets,
-your application and @e all libraries that use wxWidgets with the __WXDEBUG__ symbol
-defined. You can also test the __WXDEBUG__ symbol in your own applications to execute
-code that should be active only in debug mode.
-
-@li @ref overview_debugging_dbgctx
-@li @ref overview_debugging_dbgmacros
-@li @ref overview_debugging_logging
-@li @ref overview_debugging_dbgctx2
-
-
-<hr>
-
-
-@section overview_debugging_dbgctx wxDebugContext
-
-wxDebugContext is a class that never gets instantiated, but ties together
-various static functions and variables. It allows you to dump all objects to that stream,
-write statistics about object allocation, and check memory for errors.
-
-It is good practice to define a wxObject::Dump member function for each class you derive
-from a wxWidgets class, so that wxDebugContext::Dump can call it and
-give valuable information about the state of the application.
-
-If you have difficulty tracking down a memory leak, recompile
-in debugging mode and call wxDebugContext::Dump and wxDebugContext::PrintStatistics at
-appropriate places. They will tell you what objects have not yet been
-deleted, and what kinds of object they are. In fact, in debug mode wxWidgets will automatically
-detect memory leaks when your application is about to exit, and if there are any leaks,
-will give you information about the problem. (How much information depends on the operating system
-and compiler -- some systems don't allow all memory logging to be enabled). See the
-memcheck sample for example of usage.
-
-For wxDebugContext to do its work, the @e new and @e delete operators for wxObject
-have been redefined to store extra information about dynamically allocated objects
-(but not statically declared objects).
-
-This slows down a debugging version of an application, but can
-find difficult-to-detect memory leaks (objects are not
-deallocated), overwrites (writing past the end of your object) and
-underwrites (writing to memory in front of the object).
-
-If debugging mode is on and the symbols wxUSE_GLOBAL_MEMORY_OPERATORS and
-wxUSE_DEBUG_NEW_ALWAYS are set to 1 in setup.h, 'new' is defined to be:
-
-@code
-#define new new(__FILE__,__LINE__)
-@endcode
-
-All occurrences of 'new' in wxWidgets and your own application will use
-the overridden form of the operator with two extra arguments. This means that
-the debugging output (and error messages reporting memory problems) will tell you what
-file and on what line you allocated the object. Unfortunately not all
-compilers allow this definition to work properly, but most do.
-
-
-
-@section overview_debugging_dbgmacros Debug macros
-
-You should also use @ref group_funcmacro_debug as part of a 'defensive programming'
-strategy, scattering wxASSERTs liberally to test for problems in your code as early as
-possible.
-Forward thinking will save a surprising amount of time in the long run.
-
-#wxASSERT is used to pop up an error message box when a condition
-is not @true. You can also use #wxASSERT_MSG to supply your
-own helpful error message. For example:
-
+your application: @ref overview_debugging_dbgmacros allow you to insert various
+checks in your application which can be compiled out or disabled in release
+builds but are extremely useful while developing and @ref
+overview_debugging_logging which are not limited to debugging but are also
+useful for inserting traces into your application code. Both assertions and
+debug logging are also used by wxWidgets itself so you may encounter them even
+if you don't use either of these features yourself.
+
+
+@section overview_debugging_config Configuing debugging support
+
+Starting with wxWidgets 2.9.1 debugging features are always available by
+default (and not only in a special "debug" build of the library) and you need
+to predefine wxDEBUG_LEVEL symbol as 0 when building both the library and your
+application to remove them completely from the generated object code. However
+the debugging features are disabled by default when the application itself is
+built with @c NDEBUG defined (i.e. in "release" or "production" mode) so there
+is no need to do this, unless the resources of the system your application will
+be running on are unusually constrained (notice that when asserts are disabled
+their condition is not even evaluated so the only run-time cost is a single
+condition check and the extra space taken by the asserts in the code).
+
+This automatic deactivation of debugging code is done by IMPLEMENT_APP() macro
+so if you don't use you may need to explicitly call wxDISABLE_DEBUG_SUPPORT()
+yourself.
+
+Also notice that it is possible to build your own application with a different
+value of wxDEBUG_LEVEL than the one which was used for wxWidgets itself. E.g.
+you may be using an official binary version of the library which will have
+been compiled with default @code wxDEBUG_LEVEL == 1 @endcode but still predefine
+wxDEBUG_LEVEL as 0 for your own code.
+
+On the other hand, if you do want to keep the asserts even in production
+builds, you will probably want to override the handling of assertion failures
+as the default behaviour which pops up a message box notifying the user about
+the problem is usually inappropriate. Use wxSetAssertHandler() to set up your
+own custom function which should be called instead of the standard assertion
+failure handler. Such function could log an appropriate message in the
+application log file or maybe notify the user about the problem in some more
+user-friendly way.
+
+
+@section overview_debugging_dbgmacros Assertion macros
+
+wxASSERT(), wxFAIL(), wxCHECK() as well as their other variants (see @ref
+group_funcmacro_debug) are similar to the standard assert() macro but are more
+flexible and powerful. The first of them is equivalent to assert() itself, i.e.
+it simply checks a condition and does nothing if it is true. The second one is
+equivalent to checking an always false condition and is supposed to be used for
+code paths which are supposed to be inaccessible (e.g. @c default branch of a
+@c switch statement which should never be executed). Finally, the wxCHECK()
+family of macros verifies the condition just as wxASSERT() does and performs
+some action such returning from the function if it fails -- thus, it is useful
+for checking the functions preconditions.
+
+All of the above functions exist in @c _MSG variants which allow you to provide
+a custom message which will be shown (or, more generally, passed to the assert
+handler) if the assertion fails, in addition to the usual file and line number
+information and the condition itself.
+
+Example of using an assertion macro:
 @code
-void MyClass::MyFunction(wxObject* object)
+void GetTheAnswer(int *p)
 {
-    wxASSERT_MSG( (object != NULL), "object should not be NULL in MyFunction!" );
+    wxCHECK_RET( p, "pointer can't be NULL in GetTheAnswer()" );
 
-    ...
+    *p = 42;
 };
 @endcode
 
-The message box allows you to continue execution or abort the program. If you are running
-the application inside a debugger, you will be able to see exactly where the problem was.
+If the condition is false, i.e. @c p is @NULL, the assertion handler is called
+and, in any case (even when wxDEBUG_LEVEL is 0), the function returns without
+dereferencing the NULL pointer on the next line thus avoiding a crash.
+
+The default assertion handler behaviour depends on whether the application
+using wxWidgets was compiled in release build (with @c NDEBUG defined) or debug
+one (without) but may be changed in either case as explained above. If it
+wasn't changed, then nothing will happen in the release build and a message box
+showing the information about the assert as well as allowing to stop the
+program, ignore future asserts or break into the debugger is shown. On the
+platforms where wxStackWalker is supported the message box will also show the
+stack trace at the moment when the assert failed often allowing you to diagnose
+the problem without using the debugger at all. You can see an example of such
+message box in the @ref page_samples_except.
 
 
 
@@ -103,42 +108,5 @@ debug mode; it will do nothing for non-debugging code.
 
 
 
-@section overview_debugging_dbgctx2 wxDebugContext overview
-
-Class: wxDebugContext
-
-wxDebugContext is a class for performing various debugging and memory tracing operations.
-
-This class has only static data and function members, and there should be
-no instances. Probably the most useful members are SetFile (for directing output
-to a file, instead of the default standard error or debugger output);
-Dump (for dumping the dynamically allocated objects) and PrintStatistics
-(for dumping information about allocation of objects). You can also call
-Check to check memory blocks for integrity.
-
-Here's an example of use. The SetCheckpoint ensures that only the
-allocations done after the checkpoint will be dumped.
-
-@code
-wxDebugContext::SetCheckpoint();
-
-wxDebugContext::SetFile("c:\\temp\\debug.log");
-
-wxString *thing = new wxString;
-
-char *ordinaryNonObject = new char[1000];
-
-wxDebugContext::Dump();
-wxDebugContext::PrintStatistics();
-@endcode
-
-You can use wxDebugContext if __WXDEBUG__ is defined, or you can use it
-at any other time (if wxUSE_DEBUG_CONTEXT is set to 1 in setup.h). It is not disabled
-in non-debug mode because you may not wish to recompile wxWidgets and your entire application
-just to make use of the error logging facility.
-
-@note wxDebugContext::SetFile has a problem at present, so use the default stream instead.
-      Eventually the logging will be done through the wxLog facilities instead.
-
 */
 
diff --git a/include/wx/app.h b/include/wx/app.h
index b5d2ea9..965ffaf 100644
--- a/include/wx/app.h
+++ b/include/wx/app.h
@@ -22,12 +22,12 @@
 #include "wx/cmdargs.h"     // for wxCmdLineArgsArray used by wxApp::argv
 #include "wx/init.h"        // we must declare wxEntry()
 #include "wx/intl.h"        // for wxLayoutDirection
+#include "wx/log.h"         // for wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
 
 class WXDLLIMPEXP_FWD_BASE wxAppConsole;
 class WXDLLIMPEXP_FWD_BASE wxAppTraits;
 class WXDLLIMPEXP_FWD_BASE wxCmdLineParser;
 class WXDLLIMPEXP_FWD_BASE wxEventLoopBase;
-class WXDLLIMPEXP_FWD_BASE wxLog;
 class WXDLLIMPEXP_FWD_BASE wxMessageOutput;
 
 #if wxUSE_GUI
@@ -35,6 +35,11 @@ class WXDLLIMPEXP_FWD_BASE wxMessageOutput;
     class WXDLLIMPEXP_FWD_CORE wxWindow;
 #endif
 
+// this macro should be used in any main() or equivalent functions defined in wx
+#define wxDISABLE_DEBUG_SUPPORT() \
+    wxDISABLE_ASSERTS_IN_RELEASE_BUILD(); \
+    wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
+
 // ----------------------------------------------------------------------------
 // typedefs
 // ----------------------------------------------------------------------------
@@ -772,8 +777,13 @@ public:
 // your compiler really, really wants main() to be in your main program (e.g.
 // hello.cpp). Now IMPLEMENT_APP should add this code if required.
 
-#define IMPLEMENT_WXWIN_MAIN_CONSOLE \
-        int main(int argc, char **argv) { return wxEntry(argc, argv); }
+#define IMPLEMENT_WXWIN_MAIN_CONSOLE                                          \
+    int main(int argc, char **argv)                                           \
+    {                                                                         \
+        wxDISABLE_DEBUG_SUPPORT();                                            \
+                                                                              \
+        return wxEntry(argc, argv);                                           \
+    }
 
 // port-specific header could have defined it already in some special way
 #ifndef IMPLEMENT_WXWIN_MAIN
diff --git a/include/wx/build.h b/include/wx/build.h
index 5a0fb9d..d3e60f1 100644
--- a/include/wx/build.h
+++ b/include/wx/build.h
@@ -15,7 +15,7 @@
 #include "wx/version.h"
 
 // NB: This file contains macros for checking binary compatibility of libraries
-//     in multilib buildm, plugins and user components.
+//     in multilib builds, plugins and user components.
 //     The WX_BUILD_OPTIONS_SIGNATURE macro expands into string that should
 //     uniquely identify binary compatible builds: i.e. if two builds of the
 //     library are binary compatible, their signature string should be the
@@ -42,12 +42,6 @@
         __WX_BO_STRINGIZE(x) "." __WX_BO_STRINGIZE(y) "." __WX_BO_STRINGIZE(z)
 #endif
 
-#ifdef __WXDEBUG__
-    #define __WX_BO_DEBUG "debug"
-#else
-    #define __WX_BO_DEBUG "no debug"
-#endif
-
 #if wxUSE_UNICODE_UTF8
     #define __WX_BO_UNICODE "UTF-8"
 #elif wxUSE_UNICODE_WCHAR
@@ -100,7 +94,7 @@
 // This macro is passed as argument to wxConsoleApp::CheckBuildOptions()
 #define WX_BUILD_OPTIONS_SIGNATURE \
     __WX_BO_VERSION(wxMAJOR_VERSION, wxMINOR_VERSION, wxRELEASE_NUMBER) \
-    " (" __WX_BO_DEBUG "," __WX_BO_UNICODE \
+    " (" __WX_BO_UNICODE \
      __WX_BO_COMPILER \
      __WX_BO_STL \
      __WX_BO_WXWIN_COMPAT_2_6 __WX_BO_WXWIN_COMPAT_2_8 \
diff --git a/include/wx/debug.h b/include/wx/debug.h
index 593af34..80099fa 100644
--- a/include/wx/debug.h
+++ b/include/wx/debug.h
@@ -37,28 +37,29 @@ class WXDLLIMPEXP_FWD_BASE wxCStrData;
     2:  Maximal (at least for now): asserts which are "expensive"
         (performance-wise) or only make sense for finding errors in wxWidgets
         itself, as opposed to bugs in applications using it, are also enabled.
-
-    For compatibility reasons, currently wxDEBUG_LEVEL is defined if
-    __WXDEBUG__ is defined but in the near future (2.9.1) the role of the flags
-    will change and wxDEBUG_LEVEL will be the primary value with __WXDEBUG__
-    only used for compatibility.
  */
 
-// if _DEBUG is defined (MS VC++ and others use it in debug builds), define
-// __WXDEBUG__ too
-#ifdef _DEBUG
+// unless wxDEBUG_LEVEL is predefined (by configure or via wx/setup.h under
+// Windows), use the default
+#if !defined(wxDEBUG_LEVEL)
+    #define wxDEBUG_LEVEL 1
+#endif // !defined(wxDEBUG_LEVEL)
+
+/*
+    __WXDEBUG__ is defined when wxDEBUG_LEVEL != 0. This is done mostly for
+    compatibility but it also provides a simpler way to check if asserts and
+    debug logging is enabled at all.
+ */
+#if wxDEBUG_LEVEL > 0
     #ifndef __WXDEBUG__
         #define __WXDEBUG__
-    #endif // !__WXDEBUG__
-#endif // _DEBUG
-
-// if NDEBUG is defined (<assert.h> uses it), undef __WXDEBUG__ and WXDEBUG
-#ifdef NDEBUG
+    #endif
+#else
     #undef __WXDEBUG__
-    #undef WXDEBUG
-#endif // NDEBUG
+#endif
 
-// if __WXDEBUG__ is defined, make sure that WXDEBUG is defined and >= 1
+// Finally there is also a very old WXDEBUG macro not used anywhere at all, it
+// is only defined for compatibility.
 #ifdef __WXDEBUG__
     #if !defined(WXDEBUG) || !WXDEBUG
         #undef WXDEBUG
@@ -66,15 +67,6 @@ class WXDLLIMPEXP_FWD_BASE wxCStrData;
     #endif // !WXDEBUG
 #endif // __WXDEBUG__
 
-// temporarily define wxDEBUG_LEVEL as function of __WXDEBUG__
-#if !defined(wxDEBUG_LEVEL)
-    #ifdef __WXDEBUG__
-        #define wxDEBUG_LEVEL 1
-    #else
-        #define wxDEBUG_LEVEL 0
-    #endif
-#endif // !defined(wxDEBUG_LEVEL)
-
 // ----------------------------------------------------------------------------
 // Handling assertion failures
 // ----------------------------------------------------------------------------
@@ -126,6 +118,14 @@ inline wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t handler)
     return old;
 }
 
+/*
+    Reset the default assert handler.
+
+    This may be used to enable asserts, which are disabled by default in this
+    case, for programs built in release build (NDEBUG defined).
+ */
+extern void WXDLLIMPEXP_BASE wxSetDefaultAssertHandler();
+
 #else // !wxDEBUG_LEVEL
 
 // provide empty stubs in case assertions are completely disabled
@@ -137,11 +137,26 @@ inline wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t /* handler */)
     return NULL;
 }
 
+inline void wxSetDefaultAssertHandler() { }
+
 #endif // wxDEBUG_LEVEL/!wxDEBUG_LEVEL
 
 // simply a synonym for wxSetAssertHandler(NULL)
 inline void wxDisableAsserts() { wxSetAssertHandler(NULL); }
 
+/*
+    A macro which disables asserts for applications compiled in release build.
+
+    By default, IMPLEMENT_APP (or rather IMPLEMENT_WXWIN_MAIN) disable the
+    asserts in the applications compiled in the release build by calling this.
+    It does nothing if NDEBUG is not defined.
+ */
+#ifdef NDEBUG
+    #define wxDISABLE_ASSERTS_IN_RELEASE_BUILD() wxDisableAsserts()
+#else
+    #define wxDISABLE_ASSERTS_IN_RELEASE_BUILD()
+#endif
+
 #if wxDEBUG_LEVEL
 
 /*
diff --git a/include/wx/log.h b/include/wx/log.h
index c957499..3048b3d 100644
--- a/include/wx/log.h
+++ b/include/wx/log.h
@@ -1573,5 +1573,14 @@ wxSafeShowMessage(const wxString& title, const wxString& text);
     #undef WX_WATCOM_ONLY_CODE
 #endif
 
+// macro which disables debug logging in release builds: this is done by
+// default by IMPLEMENT_APP() so usually it doesn't need to be used explicitly
+#ifdef NDEBUG
+    #define wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD() \
+        wxLog::SetLogLevel(wxLOG_Info)
+#else // !NDEBUG
+    #define wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
+#endif // NDEBUG/!NDEBUG
+
 #endif  // _WX_LOG_H_
 
diff --git a/include/wx/msw/app.h b/include/wx/msw/app.h
index fe6cd61..73e01be 100644
--- a/include/wx/msw/app.h
+++ b/include/wx/msw/app.h
@@ -174,6 +174,8 @@ extern WXDLLIMPEXP_CORE int
                                       wchar_t * WXUNUSED(lpCmdLine),        \
                                       int nCmdShow)                         \
         {                                                                   \
+            wxDISABLE_DEBUG_SUPPORT();                                      \
+                                                                            \
             /* NB: wxEntry expects lpCmdLine argument to be char*, not */   \
             /*     wchar_t*, but fortunately it's not used anywhere    */   \
             /*     and we can simply pass NULL in:                     */   \
@@ -189,6 +191,8 @@ extern WXDLLIMPEXP_CORE int
                                   wxCmdLineArgType WXUNUSED(lpCmdLine),     \
                                   int nCmdShow)                             \
     {                                                                       \
+        wxDISABLE_DEBUG_SUPPORT();                                          \
+                                                                            \
         /* NB: We pass NULL in place of lpCmdLine to behave the same as  */ \
         /*     Borland-specific wWinMain() above. If it becomes needed   */ \
         /*     to pass lpCmdLine to wxEntry() here, you'll have to fix   */ \
diff --git a/interface/wx/app.h b/interface/wx/app.h
index 8888f7a..701fda8 100644
--- a/interface/wx/app.h
+++ b/interface/wx/app.h
@@ -1053,3 +1053,37 @@ void wxExit();
 
 //@}
 
+/** @addtogroup group_funcmacro_debug */
+//@{
+
+/**
+    @def wxDISABLE_DEBUG_SUPPORT()
+
+    Use this macro to disable all debugging code in release build when not
+    using IMPLEMENT_APP().
+
+    Currently this macro disables assert checking and debug and trace level
+    logging messages in release build (i.e. when @c NDEBUG is defined). It is
+    used by IMPLEMENT_APP() macro so you only need to use it explicitly if you
+    don't use this macro but initialize wxWidgets directly (e.g. calls
+    wxEntry() or wxEntryStart() itself).
+
+    If you do not want to disable debugging code even in release build of your
+    application, you can use wxSetDefaultAssertHandler() and
+    wxLog::SetLogLevel() with @c wxLOG_Max parameter to enable assertions and
+    debug logging respectively.
+
+    @see wxDISABLE_ASSERTS_IN_RELEASE_BUILD(),
+         wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD(),
+         @ref overview_debugging
+
+    @since 2.9.1
+
+    @header{wx/app.h}
+ */
+#define wxDISABLE_DEBUG_SUPPORT() \
+    wxDISABLE_ASSERTS_IN_RELEASE_BUILD(); \
+    wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
+
+//@}
+
diff --git a/interface/wx/debug.h b/interface/wx/debug.h
index 5c446af..ac3164e 100644
--- a/interface/wx/debug.h
+++ b/interface/wx/debug.h
@@ -1,5 +1,5 @@
 /////////////////////////////////////////////////////////////////////////////
-// Name:        debug.h
+// Name:        wx/debug.h
 // Purpose:     interface of global functions
 // Author:      wxWidgets team
 // RCS-ID:      $Id$
@@ -14,16 +14,36 @@
 
     Preprocessor symbol defining the level of debug support available.
 
-    Currently wxDEBUG_LEVEL is 0 in release builds (__WXDEBUG__ not defined)
-    and 1 in debug builds (it is). In the immediate future this will change
-    however and this symbol will be defined directly as 0, 1 or 2 while
-    __WXDEBUG__ won't be used by wxWidgets any longer.
+    This symbol is defined to 1 by default meaning that asserts are compiled in
+    (although they may be disabled by a call to wxDisableAsserts()). You may
+    predefine it as 0 prior to including any wxWidgets headers to omit the
+    calls to wxASSERT() and related macros entirely in your own code and you
+    may also predefine it as 0 when building wxWidgets to also avoid including
+    any asserts in wxWidgets itself.
+
+    Alternatively, you may predefine it as 2 to include wxASSERT_LEVEL_2() and
+    similar macros which are used for asserts which have non-trivial run-time
+    costs and so are disabled by default.
+
+    @since 2.9.1
 
     @header{wx/debug.h}
  */
 #define wxDEBUG_LEVEL
 
 /**
+    @def __WXDEBUG__
+
+    Compatibility macro indicating presence of debug support.
+
+    This symbol is defined if wxDEBUG_LEVEL is greater than 0 and undefined
+    otherwise.
+
+    @header{wx/debug.h}
+ */
+#define __WXDEBUG__
+
+/**
     Type for the function called in case of assert failure.
 
     @see wxSetAssertHandler()
@@ -218,10 +238,34 @@ typedef void (*wxAssertHandler_t)(const wxString& file,
     Disable the condition checks in the assertions.
 
     This is the same as calling wxSetAssertHandler() with @NULL handler.
+
+    @since 2.9.0
+
+    @header{wx/debug.h}
  */
 void wxDisableAsserts();
 
 /**
+    @def wxDISABLE_ASSERTS_IN_RELEASE_BUILD
+
+    Use this macro to disable asserts in release build when not using
+    IMPLEMENT_APP().
+
+    By default, assert message boxes are suppressed in release build by
+    IMPLEMENT_APP() which uses this macro. If you don't use IMPLEMENT_APP()
+    because your application initializes wxWidgets directly (e.g. calls
+    wxEntry() or wxEntryStart() itself) but still want to suppress assert
+    notifications in release build you need to use this macro directly.
+
+    @see wxDISABLE_DEBUG_SUPPORT()
+
+    @since 2.9.1
+
+    @header{wx/debug.h}
+ */
+#define wxDISABLE_ASSERTS_IN_RELEASE_BUILD() wxDisableAsserts()
+
+/**
     Will always generate an assert error if this code is reached (in debug mode).
     Note that you don't have to (and cannot) use brackets when invoking this
     macro:
@@ -298,11 +342,27 @@ bool wxIsDebuggerRunning();
         The previous assert handler which is not @NULL by default but could be
         @NULL if it had been previously set to this value using this function.
 
+    @since 2.9.0
+
     @header{wx/debug.h}
  */
 wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t handler);
 
 /**
+    Reset the assert handler to default function which shows a message box when
+    an assert happens.
+
+    This can be useful for the applications compiled in release build (with @c
+    NDEBUG defined) for which the asserts are by default disabled: if you wish
+    to enable them even in this case you need to call this function.
+
+    @since 2.9.1
+
+    @header{wx/debug.h}
+ */
+void wxSetDefaultAssertHandler();
+
+/**
     In debug mode (when @c __WXDEBUG__ is defined) this function generates a
     debugger exception meaning that the control is passed to the debugger if
     one is attached to the process. Otherwise the program just terminates
diff --git a/interface/wx/log.h b/interface/wx/log.h
index 64a5c08..9a7973e 100644
--- a/interface/wx/log.h
+++ b/interface/wx/log.h
@@ -1396,3 +1396,24 @@ void wxLogSysError(const char* formatString, ... );
 void wxVLogSysError(const char* formatString, va_list argPtr);
 //@}
 
+/** @addtogroup group_funcmacro_debug */
+//@{
+
+/**
+    @def wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
+
+    Use this macro to disable logging at debug and trace levels in release
+    build when not using IMPLEMENT_APP().
+
+    @see wxDISABLE_DEBUG_SUPPORT(),
+         wxDISABLE_ASSERTS_IN_RELEASE_BUILD(),
+         @ref overview_debugging
+
+    @since 2.9.1
+
+    @header{wx/log.h}
+ */
+#define wxDISABLE_DEBUG_LOGGING_IN_RELEASE_BUILD()
+
+//@}
+
diff --git a/src/common/appbase.cpp b/src/common/appbase.cpp
index 77820cd..cf9ad8b 100644
--- a/src/common/appbase.cpp
+++ b/src/common/appbase.cpp
@@ -1046,6 +1046,11 @@ wxDefaultAssertHandler(const wxString& file,
 
 wxAssertHandler_t wxTheAssertHandler = wxDefaultAssertHandler;
 
+void wxSetDefaultAssertHandler()
+{
+    wxTheAssertHandler = wxDefaultAssertHandler;
+}
+
 void wxOnAssert(const wxString& file,
                 int line,
                 const wxString& func,
diff --git a/src/common/utilscmn.cpp b/src/common/utilscmn.cpp
index 6dd39b1..c33db89 100644
--- a/src/common/utilscmn.cpp
+++ b/src/common/utilscmn.cpp
@@ -1314,37 +1314,37 @@ void wxInfoMessageBox(wxWindow* parent)
 {
     // don't translate these strings, they're for diagnostics purposes only
     wxString msg;
-    msg.Printf(wxT("wxWidgets Library (%s port)\n")
-               wxT("Version %d.%d.%d%s%s, compiled at %s %s\n")
-               wxT("Runtime version of toolkit used is %d.%d.%s\n")
-               wxT("Copyright (c) 1995-2009 wxWidgets team"),
-               wxPlatformInfo::Get().GetPortIdName().c_str(),
+    msg.Printf(wxS("wxWidgets Library (%s port)\n")
+               wxS("Version %d.%d.%d (Unicode: %s, debug level: %d),\n")
+               wxS("compiled at %s %s\n\n")
+               wxS("Runtime version of toolkit used is %d.%d.\n"),
+               wxPlatformInfo::Get().GetPortIdName(),
                wxMAJOR_VERSION,
                wxMINOR_VERSION,
                wxRELEASE_NUMBER,
-#if wxUSE_UNICODE
-               L" (Unicode)",
+#if wxUSE_UNICODE_UTF8
+               "UTF-8",
+#elif wxUSE_UNICODE
+               "wchar_t",
 #else
-               wxEmptyString,
-#endif
-#ifdef __WXDEBUG__
-               wxT(" Debug build"),
-#else
-               wxEmptyString,
+               "none",
 #endif
+               wxDEBUG_LEVEL,
                __TDATE__,
                __TTIME__,
                wxPlatformInfo::Get().GetToolkitMajorVersion(),
-               wxPlatformInfo::Get().GetToolkitMinorVersion(),
+               wxPlatformInfo::Get().GetToolkitMinorVersion()
+              );
+
 #ifdef __WXGTK__
-               wxString::Format("\nThe compile-time GTK+ version is %d.%d.%d.",
-                                GTK_MAJOR_VERSION,
-                                GTK_MINOR_VERSION,
-                                GTK_MICRO_VERSION).c_str()
-#else
-               wxEmptyString
-#endif
-               );
+    msg += wxString::Format("Compile-time GTK+ version is %d.%d.%d.\n",
+                            GTK_MAJOR_VERSION,
+                            GTK_MINOR_VERSION,
+                            GTK_MICRO_VERSION);
+#endif // __WXGTK__
+
+    msg += wxS("\nCopyright (c) 1995-2009 wxWidgets team");
+
     wxMessageBox(msg, wxT("wxWidgets information"),
                  wxICON_INFORMATION | wxOK,
                  parent);
diff --git a/src/common/wincmn.cpp b/src/common/wincmn.cpp
index d36b727..1ffda0d 100644
--- a/src/common/wincmn.cpp
+++ b/src/common/wincmn.cpp
@@ -2558,8 +2558,11 @@ wxWindowBase::DoGetPopupMenuSelectionFromUser(wxMenu& menu, int x, int y)
 
 #endif // wxUSE_MENUS
 
-// methods for drawing the sizers in a visible way
-#ifdef __WXDEBUG__
+// methods for drawing the sizers in a visible way: this is currently only
+// enabled for "full debug" builds with wxDEBUG_LEVEL==2 as it doesn't work
+// that well and also because we don't want to leave it enabled in default
+// builds used for production
+#if wxDEBUG_LEVEL > 1
 
 static void DrawSizers(wxWindowBase *win);
 
@@ -2641,22 +2644,25 @@ static void DrawSizers(wxWindowBase *win)
     }
 }
 
-#endif // __WXDEBUG__
+#endif // wxDEBUG_LEVEL
 
 // process special middle clicks
 void wxWindowBase::OnMiddleClick( wxMouseEvent& event )
 {
     if ( event.ControlDown() && event.AltDown() )
     {
-#ifdef __WXDEBUG__
+#if wxDEBUG_LEVEL > 1
         // Ctrl-Alt-Shift-mclick makes the sizers visible in debug builds
         if ( event.ShiftDown() )
         {
             DrawSizers(this);
-            return;
         }
+        else
 #endif // __WXDEBUG__
-        ::wxInfoMessageBox((wxWindow*)this);
+        {
+            // just Ctrl-Alt-middle click shows information about wx version
+            ::wxInfoMessageBox((wxWindow*)this);
+        }
     }
     else
     {
diff --git a/wx-config.in b/wx-config.in
index 170e528..748c885 100755
--- a/wx-config.in
+++ b/wx-config.in
@@ -45,9 +45,9 @@ usage()
 
  wx-config [--prefix[=DIR]] [--exec-prefix[=DIR]] [--release] [--version-full]
            [--list] [--selected-config] [--host=HOST] [--toolkit=TOOLKIT]
-           [--universal[=yes|no]] [--unicode[=yes|no]] [--debug[=yes|no]]
-           [--static[=yes|no]] [--version[=VERSION]] [--basename]
-           [--cc] [--cxx] [--cppflags [base]] [--cxxflags [base]] [--cflags]
+           [--universal[=yes|no]] [--unicode[=yes|no]] [--static[=yes|no]]
+           [--version[=VERSION]] [--basename] [--cc] [--cxx]
+           [--cppflags [base]] [--cxxflags [base]] [--cflags]
            [--rescomp] [--linkdeps] [--ld] [--utility=UTIL]
            [--libs [LIBS...]] [--optional-libs [LIBS...]]
 
@@ -55,14 +55,14 @@ usage()
   your system.  It may be used to retrieve the information required to build
   applications using these libraries using --cppflags, --cxxflags, --cflags,
   and --libs options. And you may query the properties of this configuration
-  using --query-{host,toolkit,widgetset,chartype,debugtype,version,linkage}.
+  using --query-{host,toolkit,widgetset,chartype,version,linkage}.
 
     If multiple builds of wxWidgets  are available,  you can use the options
-  --prefix, --host, --toolkit, --unicode, --debug, --static, --universal and
-  --version to select from them. The --selected-config option shows the name
-  of the current configuration and --list shows available alternatives which
-  match specified criteria. The --utility option returns the correct version
-  of UTIL to use with the selected build. The --linkdeps option returns only
+  --prefix, --host, --toolkit, --unicode, --static, --universal or --version
+  to select from them.  The  --selected-config  option shows the name of the
+  current configuration and --list  shows available alternatives which match
+  specified criteria.  The  --utility  option returns the correct version of
+  UTIL to use with the selected build.  The  --linkdeps  option returns only
   static libraries for your makefile link rule dependencies.
 
     The LIBS arguments (comma or space separated) may be used to specify the
@@ -114,7 +114,7 @@ EGREP="@EGREP@"
 # configs to this one.  Options earlier in the list should be more crucial
 # to match well than those that follow.  Options specified by the user will
 # always take precedence and are not subject to any partial ordering here.
-wxconfig_schema="host toolkit widgetset chartype debugtype flavour version linkage"
+wxconfig_schema="host toolkit widgetset chartype flavour version linkage"
 
 # Options that are expected to generate some output.
 wxconfig_output_options="prefix exec_prefix
@@ -135,6 +135,10 @@ wxconfig_output_options="prefix exec_prefix
 wxconfig_input_options="prefix exec_prefix utility $wxconfig_schema"
 
 # Input options that accept only a yes or no argument.
+#
+# Notice that this includes "debug" but it is done only for compatibility, this
+# options (i.e. --debug[=yes] or --debug=no) is completely ignored as there is
+# no distinction between debug and release builds in wx any more
 wxconfig_yesno_options="universal unicode debug static"
 
 # Boolean options that do something or not.
@@ -317,7 +321,6 @@ done
 
 check_yesno_option universal widgetset univ
 check_yesno_option unicode chartype unicode ansi
-check_yesno_option debug debugtype debug release
 check_yesno_option static linkage static
 
 # Dump everything we just read in debug mode.
@@ -361,7 +364,7 @@ fi
 get_mask()
 {
     [ $# -gt 0 ] || set m
-    eval echo "\${$1_host:+\$$1_host-}\${$1_toolkit}\${$1_widgetset}-\${$1_chartype}-\${$1_debugtype}\${$1_linkage:+-\$$1_linkage}-\${$1_version}\${$1_flavour}"
+    eval echo "\${$1_host:+\$$1_host-}\${$1_toolkit}\${$1_widgetset}-\${$1_chartype}\${$1_linkage:+-\$$1_linkage}-\${$1_version}\${$1_flavour}"
 }
 
 # Returns true if this script is for a cross compiled config.
@@ -383,7 +386,6 @@ this_host="${target:+${target}}"
 this_toolkit="@TOOLKIT_DIR@@TOOLKIT_VERSION@"
 this_widgetset="@WIDGET_SET@"
 this_chartype="@WX_CHARTYPE@"
-this_debugtype="@WX_DEBUGTYPE@"
 this_flavour="@WX_FLAVOUR@"
 this_version="@WX_RELEASE@"
 this_linkage=`[ "x@SHARED@" = "x1" ] || echo 'static'`
@@ -397,7 +399,6 @@ m_host=${m_host:-$this_host}
 m_toolkit=${input_option_toolkit:-'[^-]+'}
 m_widgetset=${input_option_widgetset-'(univ)?'}
 m_chartype=${input_option_chartype:-'(unicode|ansi)'}
-m_debugtype=${input_option_debugtype:-'(debug|release)'}
 m_flavour=${input_option_flavour:+-$input_option_flavour}
 m_flavour=${m_flavour:-${input_option_flavour-'(-[^-]+)?'}}
 m_version=${input_option_version:-'[0-9]+\.[0-9]+'}
@@ -418,7 +419,6 @@ if [ -n "$WXDEBUG" ]; then
     decho "  m_toolkit    = '$m_toolkit'"
     decho "  m_widgetset  = '$m_widgetset'"
     decho "  m_chartype   = '$m_chartype'"
-    decho "  m_debugtype  = '$m_debugtype'"
     decho "  m_flavour    = '$m_flavour'"
     decho "  m_version    = '$m_version'"
     decho "  m_linkage    = '$m_linkage'"
@@ -604,8 +604,7 @@ get_legacy_mask()
 {
     [ $# -gt 0 ] || set m
     eval [ "x\${$1_chartype}" != "xunicode" ] || _unicode_flag=u
-    eval [ "x\${$1_debugtype}" != "xdebug" ] || _debug_flag=d
-    eval echo "wx\${$1_toolkit}${_unicode_flag}${_debug_flag}-\${$1_version}\${$1_host}-config"
+    eval echo "wx\${$1_toolkit}${_unicode_flag}-\${$1_version}\${$1_host}-config"
 }
 
 # find_legacy_configs

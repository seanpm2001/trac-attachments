Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/configure.in,v
retrieving revision 1.899
diff -u -2 -r1.899 configure.in
--- configure.in	2004/11/19 00:25:40	1.899
+++ configure.in	2004/11/27 18:15:18
@@ -500,4 +500,5 @@
   DEFAULT_wxUSE_FS_ZIP=no
   DEFAULT_wxUSE_BUSYINFO=no
+  DEFAULT_wxUSE_ARCSTREAM=no
   DEFAULT_wxUSE_ZIPSTREAM=no
   DEFAULT_wxUSE_VALIDATORS=no
@@ -690,4 +691,5 @@
   DEFAULT_wxUSE_FS_ZIP=yes
   DEFAULT_wxUSE_BUSYINFO=yes
+  DEFAULT_wxUSE_ARCSTREAM=yes
   DEFAULT_wxUSE_ZIPSTREAM=yes
   DEFAULT_wxUSE_VALIDATORS=yes
@@ -881,4 +883,5 @@
 dnl please keep the settings below in alphabetical order
 WX_ARG_ENABLE(apple_ieee,    [  --enable-apple_ieee     use the Apple IEEE codec], wxUSE_APPLE_IEEE)
+WX_ARG_ENABLE(arcstream,     [  --enable-arcstream      use wxArchive streams], wxUSE_ARCSTREAM)
 WX_ARG_ENABLE(catch_segvs,   [  --enable-catch_segvs    catch signals in wxApp::OnFatalException (Unix only)], wxUSE_ON_FATAL_EXCEPTION)
 WX_ARG_ENABLE(cmdline,       [  --enable-cmdline        use wxCmdLineParser class], wxUSE_CMDLINE_PARSER)
@@ -911,5 +914,5 @@
 WX_ARG_ENABLE(mediactrl,     [  --enable-mediactrl      use wxMediaCtrl class], wxUSE_MEDIACTRL)
 WX_ARG_ENABLE(wxprintfv,     [  --enable-wxprintfv      use wxWidgets implementation of vprintf()], wxUSE_EXPERIMENTAL_PRINTF)
-WX_ARG_ENABLE(zipstream,     [  --enable-zipstream      use wxZipInputStream], wxUSE_ZIPSTREAM)
+WX_ARG_ENABLE(zipstream,     [  --enable-zipstream      use wxZip streams], wxUSE_ZIPSTREAM)
 
 WX_ARG_ENABLE(url,           [  --enable-url            use wxURL class], wxUSE_URL)
@@ -4705,6 +4708,16 @@
 fi
 
+if test "$wxUSE_ARCSTREAM" = "yes"; then
+  AC_DEFINE(wxUSE_ARCSTREAM)
+fi
+
 if test "$wxUSE_ZIPSTREAM" = "yes"; then
-  AC_DEFINE(wxUSE_ZIPSTREAM)
+  if test "$wxUSE_ARCSTREAM" != "yes"; then
+    AC_MSG_WARN(wxZip requires wxArchive... disabled)
+  elif test "$wxUSE_ZLIB" = "no"; then
+    AC_MSG_WARN(wxZip requires wxZlib... disabled)
+  else
+    AC_DEFINE(wxUSE_ZIPSTREAM)
+  fi
 fi
 
Index: setup.h.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h.in,v
retrieving revision 1.157
diff -u -2 -r1.157 setup.h.in
--- setup.h.in	2004/11/19 00:25:48	1.157
+++ setup.h.in	2004/11/27 18:15:21
@@ -965,5 +965,9 @@
 
 /*
- * Zip stream for accessing files stored inside .zip archives
+ * Base classes for accessing archives such as zip and tar
+ */
+#define wxUSE_ARCSTREAM 0
+/*
+ * Classes for accessing zip archives
  */
 #define wxUSE_ZIPSTREAM 0
Index: setup.h_vms
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h_vms,v
retrieving revision 1.85
diff -u -2 -r1.85 setup.h_vms
--- setup.h_vms	2004/11/24 10:25:36	1.85
+++ setup.h_vms	2004/11/27 18:15:22
@@ -990,4 +990,8 @@
 
 /*
+ * Base classes for accessing files stored inside archives such as zip and tar
+ */
+#define wxUSE_ARCSTREAM 1
+/*
  * Zip stream for accessing files stored inside .zip archives
  */
Index: include/wx/archive.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/archive.h,v
retrieving revision 1.4
diff -u -2 -r1.4 archive.h
--- include/wx/archive.h	2004/11/25 20:36:45	1.4
+++ include/wx/archive.h	2004/11/27 18:15:31
@@ -17,5 +17,5 @@
 #include "wx/defs.h"
 
-#if wxUSE_ZLIB && wxUSE_STREAMS && wxUSE_ZIPSTREAM
+#if wxUSE_STREAMS && wxUSE_ARCSTREAM
 
 #include "wx/stream.h"
@@ -163,45 +163,4 @@
 
 /////////////////////////////////////////////////////////////////////////////
-// wxArchiveClassFactory
-//
-// A wxArchiveClassFactory instance for a particular archive type allows
-// the creation of the other classes that may be needed.
-
-class WXDLLIMPEXP_BASE wxArchiveClassFactory : public wxObject
-{
-public:
-    virtual ~wxArchiveClassFactory() { }
-
-    wxArchiveEntry *NewEntry() const
-        { return DoNewEntry(); }
-    wxArchiveInputStream *NewStream(wxInputStream& stream) const
-        { return DoNewStream(stream); }
-    wxArchiveOutputStream *NewStream(wxOutputStream& stream) const
-        { return DoNewStream(stream); }
-
-    virtual wxString GetInternalName(
-        const wxString& name,
-        wxPathFormat format = wxPATH_NATIVE) const = 0;
-
-    void SetConv(wxMBConv& conv) { m_pConv = &conv; }
-    wxMBConv& GetConv() const { return *m_pConv; }
-
-protected:
-    virtual wxArchiveEntry        *DoNewEntry() const = 0;
-    virtual wxArchiveInputStream  *DoNewStream(wxInputStream& stream) const = 0;
-    virtual wxArchiveOutputStream *DoNewStream(wxOutputStream& stream) const = 0;
-
-    wxArchiveClassFactory() : m_pConv(&wxConvLocal) { }
-    wxArchiveClassFactory& operator=(const wxArchiveClassFactory& WXUNUSED(f))
-        { return *this; }
-
-private:
-    wxMBConv *m_pConv;
-
-    DECLARE_ABSTRACT_CLASS(wxArchiveClassFactory)
-};
-
-
-/////////////////////////////////////////////////////////////////////////////
 // wxArchiveIterator
 //
@@ -346,6 +305,56 @@
 
 #endif // wxUSE_STL || defined WX_TEST_ARCHIVE_ITERATOR
+
+
+/////////////////////////////////////////////////////////////////////////////
+// wxArchiveClassFactory
+//
+// A wxArchiveClassFactory instance for a particular archive type allows
+// the creation of the other classes that may be needed.
+
+class WXDLLIMPEXP_BASE wxArchiveClassFactory : public wxObject
+{
+public:
+    typedef wxArchiveEntry        entry_type;
+    typedef wxArchiveInputStream  instream_type;
+    typedef wxArchiveOutputStream outstream_type;
+    typedef wxArchiveNotifier     notifier_type;
+#if wxUSE_STL || defined WX_TEST_ARCHIVE_ITERATOR
+    typedef wxArchiveIter         iter_type;
+    typedef wxArchivePairIter     pairiter_type;
+#endif
+
+    virtual ~wxArchiveClassFactory() { }
+
+    wxArchiveEntry *NewEntry() const
+        { return DoNewEntry(); }
+    wxArchiveInputStream *NewStream(wxInputStream& stream) const
+        { return DoNewStream(stream); }
+    wxArchiveOutputStream *NewStream(wxOutputStream& stream) const
+        { return DoNewStream(stream); }
+
+    virtual wxString GetInternalName(
+        const wxString& name,
+        wxPathFormat format = wxPATH_NATIVE) const = 0;
+
+    void SetConv(wxMBConv& conv) { m_pConv = &conv; }
+    wxMBConv& GetConv() const { return *m_pConv; }
+
+protected:
+    virtual wxArchiveEntry        *DoNewEntry() const = 0;
+    virtual wxArchiveInputStream  *DoNewStream(wxInputStream& stream) const = 0;
+    virtual wxArchiveOutputStream *DoNewStream(wxOutputStream& stream) const = 0;
+
+    wxArchiveClassFactory() : m_pConv(&wxConvLocal) { }
+    wxArchiveClassFactory& operator=(const wxArchiveClassFactory& WXUNUSED(f))
+        { return *this; }
+
+private:
+    wxMBConv *m_pConv;
+
+    DECLARE_ABSTRACT_CLASS(wxArchiveClassFactory)
+};
 
-#endif // wxUSE_STREAMS
+#endif // wxUSE_STREAMS && wxUSE_ARCSTREAM
 
 #endif // _WX_ARCHIVE_H__
Index: include/wx/chkconf.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/chkconf.h,v
retrieving revision 1.80
diff -u -2 -r1.80 chkconf.h
--- include/wx/chkconf.h	2004/11/25 17:00:31	1.80
+++ include/wx/chkconf.h	2004/11/27 18:15:33
@@ -925,4 +925,23 @@
 #endif  /* wxUSE_DYNLIB_CLASS */
 
+#if wxUSE_ZIPSTREAM
+#   if !wxUSE_ZLIB
+#       ifdef wxABORT_ON_CONFIG_ERROR
+#           error "wxZip requires wxZlib"
+#       else
+#           undef wxUSE_ZLIB
+#           define wxUSE_ZLIB 1
+#       endif
+#   endif
+#   if !wxUSE_ARCSTREAM
+#       ifdef wxABORT_ON_CONFIG_ERROR
+#           error "wxZip requires wxArchive"
+#       else
+#           undef wxUSE_ARCSTREAM
+#           define wxUSE_ARCSTREAM 1
+#       endif
+#   endif
+#endif /* wxUSE_ZIPSTREAM */
+
 /* the rest of the tests is for the GUI settings only */
 #if wxUSE_GUI
Index: include/wx/zipstrm.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/zipstrm.h,v
retrieving revision 1.16
diff -u -2 -r1.16 zipstrm.h
--- include/wx/zipstrm.h	2004/11/25 20:36:45	1.16
+++ include/wx/zipstrm.h	2004/11/27 18:15:36
@@ -421,4 +421,14 @@
 
 /////////////////////////////////////////////////////////////////////////////
+// Iterators
+
+#if wxUSE_STL || defined WX_TEST_ARCHIVE_ITERATOR
+typedef wxArchiveIterator<wxZipInputStream> wxZipIter;
+typedef wxArchiveIterator<wxZipInputStream,
+         std::pair<wxString, wxZipEntry*> > wxZipPairIter;
+#endif
+
+
+/////////////////////////////////////////////////////////////////////////////
 // wxZipClassFactory
 
@@ -426,4 +436,13 @@
 {
 public:
+    typedef wxZipEntry        entry_type;
+    typedef wxZipInputStream  instream_type;
+    typedef wxZipOutputStream outstream_type;
+    typedef wxZipNotifier     notifier_type;
+#if wxUSE_STL || defined WX_TEST_ARCHIVE_ITERATOR
+    typedef wxZipIter         iter_type;
+    typedef wxZipPairIter     pairiter_type;
+#endif
+
     wxZipEntry *NewEntry() const
         { return new wxZipEntry; }
@@ -448,14 +467,4 @@
     DECLARE_DYNAMIC_CLASS(wxZipClassFactory)
 };
-
-
-/////////////////////////////////////////////////////////////////////////////
-// Iterators
-
-#if wxUSE_STL || defined WX_TEST_ARCHIVE_ITERATOR
-typedef wxArchiveIterator<wxZipInputStream> wxZipIter;
-typedef wxArchiveIterator<wxZipInputStream,
-         std::pair<wxString, wxZipEntry*> > wxZipPairIter;
-#endif
 
 
Index: include/wx/mac/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/setup0.h,v
retrieving revision 1.44
diff -u -2 -r1.44 setup0.h
--- include/wx/mac/setup0.h	2004/11/11 18:59:24	1.44
+++ include/wx/mac/setup0.h	2004/11/27 18:15:40
@@ -351,5 +351,7 @@
 #define wxUSE_FS_INET       1
 
-// Set to 1 to compile wxZipInput/OutputStream classes.
+// Base classes for archive formats such as zip and tar
+#define wxUSE_ARCSTREAM     1
+// zip classes
 #define wxUSE_ZIPSTREAM     1
 
Index: include/wx/msw/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/setup0.h,v
retrieving revision 1.182
diff -u -2 -r1.182 setup0.h
--- include/wx/msw/setup0.h	2004/11/11 18:59:28	1.182
+++ include/wx/msw/setup0.h	2004/11/27 18:15:45
@@ -385,5 +385,7 @@
 #define wxUSE_FS_INET       1
 
-// Set to 1 to compile wxZipInput/OutputStream classes.
+// Base classes for archive formats such as zip and tar
+#define wxUSE_ARCSTREAM     1
+// zip classes
 #define wxUSE_ZIPSTREAM     1
 
Index: include/wx/os2/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/os2/setup0.h,v
retrieving revision 1.60
diff -u -2 -r1.60 setup0.h
--- include/wx/os2/setup0.h	2004/11/11 18:59:36	1.60
+++ include/wx/os2/setup0.h	2004/11/27 18:15:47
@@ -275,6 +275,8 @@
                                   // when app is busy. Works in same way as
                                   // wxBusyCursor
+#define wxUSE_ARCSTREAM     1
+                                  // base classes for archives such as zip
 #define wxUSE_ZIPSTREAM     1
-                                  // input stream for reading from zip archives
+                                  // streams for reading/writing zip archives
 
 #define wxUSE_TIMER         1     // use the timer class
Index: include/wx/palmos/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/palmos/setup0.h,v
retrieving revision 1.3
diff -u -2 -r1.3 setup0.h
--- include/wx/palmos/setup0.h	2004/11/11 18:59:40	1.3
+++ include/wx/palmos/setup0.h	2004/11/27 18:15:50
@@ -385,4 +385,6 @@
 #define wxUSE_FS_INET       0
 
+// Base classes for archive formats such as zip and tar
+#define wxUSE_ARCSTREAM     0
 // Set to 1 to compile wxZipInput/OutputStream classes.
 #define wxUSE_ZIPSTREAM     0
Index: include/wx/univ/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/univ/setup0.h,v
retrieving revision 1.36
diff -u -2 -r1.36 setup0.h
--- include/wx/univ/setup0.h	2004/11/11 18:59:41	1.36
+++ include/wx/univ/setup0.h	2004/11/27 18:15:54
@@ -413,4 +413,6 @@
 #define wxUSE_FS_ZIP 1
 
+// Base classes for archive formats such as zip and tar
+#define wxUSE_ARCSTREAM 1
 // Set to 1 to compile wxZipInput/OutputStream classes.
 #define wxUSE_ZIPSTREAM 1
Index: src/common/archive.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/archive.cpp,v
retrieving revision 1.2
diff -u -2 -r1.2 archive.cpp
--- src/common/archive.cpp	2004/11/25 20:37:10	1.2
+++ src/common/archive.cpp	2004/11/27 18:16:01
@@ -23,5 +23,5 @@
 #endif
 
-#if wxUSE_ZLIB && wxUSE_STREAMS && wxUSE_ZIPSTREAM
+#if wxUSE_STREAMS && wxUSE_ARCSTREAM
 
 #include "wx/archive.h"
@@ -31,5 +31,7 @@
 IMPLEMENT_ABSTRACT_CLASS(wxArchiveClassFactory, wxObject)
 
+#if wxUSE_ZIPSTREAM
 FORCE_LINK(zipstrm)
+#endif
 
 
@@ -72,3 +74,3 @@
 }
 
-#endif
+#endif // wxUSE_STREAMS && wxUSE_ARCSTREAM
Index: tests/test.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.bkl,v
retrieving revision 1.26
diff -u -2 -r1.26 test.bkl
--- tests/test.bkl	2004/11/24 22:31:21	1.26
+++ tests/test.bkl	2004/11/27 18:16:17
@@ -22,4 +22,5 @@
             test.cpp
             archive/archivetest.cpp
+            archive/ziptest.cpp
             arrays/arrays.cpp
             datetime/datetimetest.cpp
Index: tests/archive/archivetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/archive/archivetest.cpp,v
retrieving revision 1.6
diff -u -2 -r1.6 archivetest.cpp
--- tests/archive/archivetest.cpp	2004/11/25 20:37:44	1.6
+++ tests/archive/archivetest.cpp	2004/11/27 18:16:21
@@ -18,8 +18,6 @@
 #endif
 
-#if wxUSE_STREAMS
+#if wxUSE_STREAMS && wxUSE_ARCSTREAM
 
-#define WX_TEST_ARCHIVE_ITERATOR
-
 // VC++ 6 warns that the list iterator's '->' operator will not work whenever
 // std::list is used with a non-pointer, so switch it off.
@@ -28,7 +26,5 @@
 #endif
 
-#include "wx/zipstrm.h"
-#include "wx/mstream.h"
-#include "wx/wfstream.h"
+#include "archivetest.h"
 #include "wx/dir.h"
 #include <string>
@@ -68,71 +64,6 @@
 
 ///////////////////////////////////////////////////////////////////////////////
-// Bit flags for options for the tests
-
-enum Options
-{
-    PipeIn      = 0x01,     // input streams are non-seekable
-    PipeOut     = 0x02,     // output streams are non-seekable
-    Stub        = 0x04,     // the archive should be appended to a stub
-    AllOptions  = 0x07
-};
-
-
-///////////////////////////////////////////////////////////////////////////////
-// These structs are passed as the template parameter of the test case to
-// specify a set of classes to use in the test. This allows either the generic
-// wxArchiveXXX interface to be exercised or the specific interface for a
-// particular archive format e.g. wxZipXXX.
-
-struct ArchiveClasses
-{
-    typedef wxArchiveEntry EntryT;
-    typedef wxArchiveInputStream InputStreamT;
-    typedef wxArchiveOutputStream OutputStreamT;
-    typedef wxArchiveClassFactory ClassFactoryT;
-    typedef wxArchiveNotifier NotifierT;
-    typedef wxArchiveIter IterT;
-    typedef wxArchivePairIter PairIterT;
-};
-
-struct ZipClasses
-{
-    typedef wxZipEntry EntryT;
-    typedef wxZipInputStream InputStreamT;
-    typedef wxZipOutputStream OutputStreamT;
-    typedef wxZipClassFactory ClassFactoryT;
-    typedef wxZipNotifier NotifierT;
-    typedef wxZipIter IterT;
-    typedef wxZipPairIter PairIterT;
-};
-
-
-///////////////////////////////////////////////////////////////////////////////
 // A class to hold a test entry
 
-class TestEntry
-{
-public:
-    TestEntry(const wxDateTime& dt, int len, const char *data);
-    ~TestEntry() { delete [] m_data; }
-
-    wxDateTime GetDateTime() const  { return m_dt; }
-    wxFileOffset GetLength() const  { return m_len; }
-    size_t GetSize() const          { return m_len; }
-    const char *GetData() const     { return m_data; }
-    wxString GetComment() const     { return m_comment; }
-    bool IsText() const             { return m_isText; }
-
-    void SetComment(const wxString& comment) { m_comment = comment; }
-    void SetDateTime(const wxDateTime& dt)   { m_dt = dt; }
-
-private:
-    wxDateTime m_dt;
-    size_t m_len;
-    char *m_data;
-    wxString m_comment;
-    bool m_isText;
-};
-
 TestEntry::TestEntry(const wxDateTime& dt, int len, const char *data)
   : m_dt(dt),
@@ -152,33 +83,4 @@
 // seekable or non-seekable.
 
-class TestOutputStream : public wxOutputStream
-{
-public:
-    TestOutputStream(int options);
-
-    ~TestOutputStream() { delete [] m_data; }
-
-    int GetOptions() const { return m_options; }
-    wxFileOffset GetLength() const { return m_size; }
-
-    // gives away the data, this stream is then empty, and can be reused
-    void GetData(char*& data, size_t& size);
-
-    enum { STUB_SIZE = 2048, INITIAL_SIZE = 0x18000, SEEK_LIMIT = 0x100000 };
-
-private:
-    void Init();
-
-    wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
-    wxFileOffset OnSysTell() const;
-    size_t OnSysWrite(const void *buffer, size_t size);
-
-    int m_options;
-    size_t m_pos;
-    size_t m_capacity;
-    size_t m_size;
-    char *m_data;
-};
-
 TestOutputStream::TestOutputStream(int options)
   : m_options(options)
@@ -282,27 +184,8 @@
 }
 
-class TestInputStream : public wxInputStream
-{
-public:
-    // ctor takes the data from the output stream, which is then empty
-    TestInputStream(TestOutputStream& out) : m_data(NULL) { SetData(out); }
-    // this ctor 'dups'
-    TestInputStream(const TestInputStream& in);
-    ~TestInputStream() { delete [] m_data; }
-
-    void Rewind();
-    wxFileOffset GetLength() const { return m_size; }
-    void SetData(TestOutputStream& out);
 
-private:
-    wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
-    wxFileOffset OnSysTell() const;
-    size_t OnSysRead(void *buffer, size_t size);
-
-    int m_options;
-    size_t m_pos;
-    size_t m_size;
-    char *m_data;
-};
+///////////////////////////////////////////////////////////////////////////////
+// TestOutputStream and TestInputStream are memory streams which can be
+// seekable or non-seekable.
 
 TestInputStream::TestInputStream(const TestInputStream& in)
@@ -510,112 +393,33 @@
 #endif
 
-class PFileInputStream : public wxFFileInputStream
+PFileInputStream::PFileInputStream(const wxString& cmd)
+  : wxFFileInputStream(WXARC_popen(cmd.mb_str(), "r" WXARC_b))
 {
-public:
-    PFileInputStream(const wxString& cmd) :
-        wxFFileInputStream(WXARC_popen(cmd.mb_str(), "r" WXARC_b)) { }
-    ~PFileInputStream()
-        { WXARC_pclose(m_file->fp()); m_file->Detach(); }
-};
+}
 
-class PFileOutputStream : public wxFFileOutputStream
+PFileInputStream::~PFileInputStream()
 {
-public:
-    PFileOutputStream(const wxString& cmd) :
-        wxFFileOutputStream(WXARC_popen(cmd.mb_str(), "w" WXARC_b)) { }
-    ~PFileOutputStream()
-        { WXARC_pclose(m_file->fp()); m_file->Detach(); }
-};
+    WXARC_pclose(m_file->fp()); m_file->Detach();
+}
 
+PFileOutputStream::PFileOutputStream(const wxString& cmd)
+: wxFFileOutputStream(WXARC_popen(cmd.mb_str(), "w" WXARC_b))
+{
+}
+
+PFileOutputStream::~PFileOutputStream()
+{
+    WXARC_pclose(m_file->fp()); m_file->Detach();
+}
+
 
 ///////////////////////////////////////////////////////////////////////////////
 // The test case
-
-template <class Classes>
-class ArchiveTestCase : public CppUnit::TestCase
-{
-public:
-    ArchiveTestCase(string name,
-                    int id,
-                    wxArchiveClassFactory *factory,
-                    int options,
-                    const wxString& archiver = wxEmptyString,
-                    const wxString& unarchiver = wxEmptyString);
-
-    ~ArchiveTestCase();
-
-protected:
-    // the classes to test
-    typedef typename Classes::EntryT EntryT;
-    typedef typename Classes::InputStreamT InputStreamT;
-    typedef typename Classes::OutputStreamT OutputStreamT;
-    typedef typename Classes::ClassFactoryT ClassFactoryT;
-    typedef typename Classes::NotifierT NotifierT;
-    typedef typename Classes::IterT IterT;
-    typedef typename Classes::PairIterT PairIterT;
-
-    // the entry point for the test
-    void runTest();
-
-    // create the test data
-    void CreateTestData();
-    TestEntry& Add(const char *name, const char *data, int len = -1);
-    TestEntry& Add(const char *name, int len = 0, int value = EOF);
-
-    // 'archive up' the test data
-    void CreateArchive(wxOutputStream& out);
-    void CreateArchive(wxOutputStream& out, const wxString& archiver);
-
-    // perform various modifications on the archive
-    void ModifyArchive(wxInputStream& in, wxOutputStream& out);
-
-    // extract the archive and verify its contents
-    void ExtractArchive(wxInputStream& in);
-    void ExtractArchive(wxInputStream& in, const wxString& unarchiver);
-    void VerifyDir(wxString& path, size_t rootlen = 0);
-
-    // tests for the iterators
-    void TestIterator(wxInputStream& in);
-    void TestPairIterator(wxInputStream& in);
-    void TestSmartIterator(wxInputStream& in);
-    void TestSmartPairIterator(wxInputStream& in);
-
-    // try reading two entries at the same time
-    void ReadSimultaneous(TestInputStream& in);
-
-    // overridables
-    virtual void OnCreateArchive(OutputStreamT& WXUNUSED(arc)) { }
-    virtual void OnSetNotifier(EntryT& entry);
-
-    virtual void OnArchiveExtracted(InputStreamT& WXUNUSED(arc),
-                                    int WXUNUSED(expectedTotal)) { }
-
-    virtual void OnCreateEntry(     OutputStreamT& WXUNUSED(arc),
-                                    TestEntry& WXUNUSED(testEntry),
-                                    EntryT *entry = NULL) { (void)entry; }
-
-    virtual void OnEntryExtracted(  EntryT& WXUNUSED(entry),
-                                    const TestEntry& WXUNUSED(testEntry),
-                                    InputStreamT *arc = NULL) { (void)arc; }
-
-    typedef std::map<wxString, TestEntry*> TestEntries;
-    TestEntries m_testEntries;              // test data
-    auto_ptr<ClassFactoryT> m_factory;      // factory to make classes
-    int m_options;                          // test options
-    wxDateTime m_timeStamp;                 // timestamp to give test entries
-    int m_id;                               // select between the possibilites
-    wxString m_archiver;                    // external archiver
-    wxString m_unarchiver;                  // external unarchiver
-};
 
-// Constructor
-// The only way I could get this to compile on VC++ 5.0 was to pass 'factory'
-// as a wxArchiveFactory* then cast it, even then only with some ifdefing.
-//
-template <class Classes>
-ArchiveTestCase<Classes>::ArchiveTestCase(
+template <class ClassFactoryT>
+ArchiveTestCase<ClassFactoryT>::ArchiveTestCase(
     string name,
     int id,
-    wxArchiveClassFactory *factory,
+    ClassFactoryT *factory,
     int options,
     const wxString& archiver,
@@ -623,11 +427,7 @@
   :
     CppUnit::TestCase(name),
-#if defined _MSC_VER && _MSC_VER < 1300
-    m_factory(dynamic_cast<Classes::ClassFactoryT*>(factory)),
-#else
-    m_factory(dynamic_cast<typename Classes::ClassFactoryT*>(factory)),
-#endif
+    m_factory(factory),
     m_options(options),
-    m_timeStamp(1, wxDateTime::Mar, 2005, 12, 0),
+    m_timeStamp(1, wxDateTime::Mar, 2004, 12, 0),
     m_id(id),
     m_archiver(archiver),
@@ -637,6 +437,6 @@
 }
     
-template <class Classes>
-ArchiveTestCase<Classes>::~ArchiveTestCase()
+template <class ClassFactoryT>
+ArchiveTestCase<ClassFactoryT>::~ArchiveTestCase()
 {
     TestEntries::iterator it;
@@ -645,6 +445,6 @@
 }
 
-template <class Classes>
-void ArchiveTestCase<Classes>::runTest()
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::runTest()
 {
     TestOutputStream out(m_options);
@@ -688,6 +488,6 @@
 }
 
-template <class Classes>
-void ArchiveTestCase<Classes>::CreateTestData()
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::CreateTestData()
 {
     Add("text/");
@@ -712,8 +512,8 @@
 }
 
-template <class Classes>
-TestEntry& ArchiveTestCase<Classes>::Add(const char *name,
-                                         const char *data,
-                                         int len /*=-1*/)
+template <class ClassFactoryT>
+TestEntry& ArchiveTestCase<ClassFactoryT>::Add(const char *name,
+                                               const char *data,
+                                               int len /*=-1*/)
 {
     if (len == -1)
@@ -726,8 +526,8 @@
 }
 
-template <class Classes>
-TestEntry& ArchiveTestCase<Classes>::Add(const char *name,
-                                         int len /*=0*/,
-                                         int value /*=EOF*/)
+template <class ClassFactoryT>
+TestEntry& ArchiveTestCase<ClassFactoryT>::Add(const char *name,
+                                               int len /*=0*/,
+                                               int value /*=EOF*/)
 {
     wxCharBuffer buf(len);
@@ -739,6 +539,6 @@
 // Create an archive using the wx archive classes, write it to 'out'
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::CreateArchive(wxOutputStream& out)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::CreateArchive(wxOutputStream& out)
 {
     auto_ptr<OutputStreamT> arc(m_factory->NewStream(out));
@@ -792,5 +592,5 @@
         }
 
-        if (name.Last() != _T('/')) {
+        if (it->first.Last() != _T('/')) {
             // for non-dirs write the data
             arc->Write(testEntry.GetData(), testEntry.GetSize());
@@ -813,7 +613,7 @@
 // Create an archive using an external archive program
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::CreateArchive(wxOutputStream& out,
-                                             const wxString& archiver)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::CreateArchive(wxOutputStream& out,
+                                                   const wxString& archiver)
 {
     // for an external archiver the test data need to be written to
@@ -851,5 +651,5 @@
         wxFileName fn(tmpdir.GetName());
         fn.SetExt(_T("arc"));
-        wxString tmparc = fn.GetFullPath();
+        wxString tmparc = fn.GetPath(wxPATH_GET_SEPARATOR) + fn.GetFullName();
 
         // call the archiver to create an archive file
@@ -877,7 +677,7 @@
 // rename an entry and add an entry
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::ModifyArchive(wxInputStream& in,
-                                             wxOutputStream& out)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::ModifyArchive(wxInputStream& in,
+                                                   wxOutputStream& out)
 {
     auto_ptr<InputStreamT> arcIn(m_factory->NewStream(in));
@@ -955,6 +755,6 @@
 // Extract an archive using the wx archive classes
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::ExtractArchive(wxInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::ExtractArchive(wxInputStream& in)
 {
     typedef Ptr<EntryT> EntryPtr;
@@ -1050,7 +850,7 @@
 // Extract an archive using an external unarchive program
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::ExtractArchive(wxInputStream& in,
-                                              const wxString& unarchiver)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::ExtractArchive(wxInputStream& in,
+                                                    const wxString& unarchiver)
 {
     // for an external unarchiver, unarchive to a tempdir
@@ -1060,5 +860,5 @@
         wxFileName fn(tmpdir.GetName());
         fn.SetExt(_T("arc"));
-        wxString tmparc = fn.GetFullPath();
+        wxString tmparc = fn.GetPath(wxPATH_GET_SEPARATOR) + fn.GetFullName();
         
         if (m_options & Stub)
@@ -1090,6 +890,7 @@
 // Verifies the files produced by an external unarchiver are as expected
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::VerifyDir(wxString& path, size_t rootlen /*=0*/)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::VerifyDir(wxString& path,
+                                               size_t rootlen /*=0*/)
 {
     wxDir dir;
@@ -1156,6 +957,6 @@
 // test the simple iterators that give away ownership of an entry
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::TestIterator(wxInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::TestIterator(wxInputStream& in)
 {
     typedef std::list<EntryT*> ArchiveCatalog;
@@ -1185,6 +986,6 @@
 // these also give away ownership of entries
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::TestPairIterator(wxInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::TestPairIterator(wxInputStream& in)
 {
     typedef std::map<wxString, EntryT*> ArchiveCatalog;
@@ -1213,6 +1014,6 @@
 // simple iterators using smart pointers, no need to worry about ownership
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::TestSmartIterator(wxInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::TestSmartIterator(wxInputStream& in)
 {
     typedef std::list<Ptr<EntryT> > ArchiveCatalog;
@@ -1238,6 +1039,6 @@
 // pair iterator using smart pointers
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::TestSmartPairIterator(wxInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::TestSmartPairIterator(wxInputStream& in)
 {
 #if defined _MSC_VER && defined _MSC_VER < 1200
@@ -1270,6 +1071,6 @@
 // try reading two entries at the same time
 //
-template <class Classes>
-void ArchiveTestCase<Classes>::ReadSimultaneous(TestInputStream& in)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::ReadSimultaneous(TestInputStream& in)
 {
     typedef std::map<wxString, Ptr<EntryT> > ArchiveCatalog;
@@ -1343,6 +1144,6 @@
 };
 
-template <class Classes>
-void ArchiveTestCase<Classes>::OnSetNotifier(EntryT& entry)
+template <class ClassFactoryT>
+void ArchiveTestCase<ClassFactoryT>::OnSetNotifier(EntryT& entry)
 {
     static ArchiveNotifier<NotifierT, EntryT> notifier;
@@ -1351,210 +1152,16 @@
 
 
-///////////////////////////////////////////////////////////////////////////////
-// ArchiveTestCase<ZipClasses> could be used directly, but instead this
-// derived class is used so that zip specific features can be tested.
-
-class ZipTestCase : public ArchiveTestCase<ZipClasses>
-{
-public:
-    ZipTestCase(string name,
-                int id,
-                int options,
-                const wxString& archiver = wxEmptyString,
-                const wxString& unarchiver = wxEmptyString)
-    :
-        ArchiveTestCase<ZipClasses>(name, id, new wxZipClassFactory,
-                                    options, archiver, unarchiver),
-        m_count(0)
-    { }
-
-protected:
-    void OnCreateArchive(wxZipOutputStream& zip);
-    
-    void OnArchiveExtracted(wxZipInputStream& zip, int expectedTotal);
-    
-    void OnCreateEntry(wxZipOutputStream& zip,
-                       TestEntry& testEntry,
-                       wxZipEntry *entry);
-    
-    void OnEntryExtracted(wxZipEntry& entry,
-                          const TestEntry& testEntry,
-                          wxZipInputStream *arc);
-
-    void OnSetNotifier(EntryT& entry);
-
-    int m_count;
-    wxString m_comment;
-};
-
-void ZipTestCase::OnCreateArchive(wxZipOutputStream& zip)
-{
-    m_comment << _T("Comment for test ") << m_id;
-    zip.SetComment(m_comment);
-}
-
-void ZipTestCase::OnArchiveExtracted(wxZipInputStream& zip, int expectedTotal)
-{
-    CPPUNIT_ASSERT(zip.GetComment() == m_comment);
-    CPPUNIT_ASSERT(zip.GetTotalEntries() == expectedTotal);
-}
-
-void ZipTestCase::OnCreateEntry(wxZipOutputStream& zip,
-                                TestEntry& testEntry,
-                                wxZipEntry *entry)
-{
-    zip.SetLevel((m_id + m_count) % 10);
-
-    if (entry) {
-        switch ((m_id + m_count) % 5) {
-            case 0:
-            {
-                wxString comment = _T("Comment for ") + entry->GetName();
-                entry->SetComment(comment);
-                // lowercase the expected result, and the notifier should do
-                // the same for the zip entries when ModifyArchive() runs
-                testEntry.SetComment(comment.Lower());
-                break;
-            }
-            case 2:
-                entry->SetMethod(wxZIP_METHOD_STORE);
-                break;
-            case 4:
-                entry->SetMethod(wxZIP_METHOD_DEFLATE);
-                break;
-        }
-        entry->SetIsText(testEntry.IsText());
-    }
-
-    m_count++;
-}
-
-void ZipTestCase::OnEntryExtracted(wxZipEntry& entry,
-                                   const TestEntry& testEntry,
-                                   wxZipInputStream *arc)
-{
-    // provide some context for the error message so that we know which
-    // iteration of the loop we were on
-    wxString name = _T(" '") + entry.GetName() + _T("'");
-    string error_entry(name.mb_str());
-    string error_context(" failed for entry" + error_entry);
-
-    CPPUNIT_ASSERT_MESSAGE("GetComment" + error_context,
-        entry.GetComment() == testEntry.GetComment());
-
-    // for seekable streams, GetNextEntry() doesn't read the local header so
-    // call OpenEntry() to do it
-    if (arc && (m_options & PipeIn) == 0 && entry.IsDir())
-        arc->OpenEntry(entry);
-
-    CPPUNIT_ASSERT_MESSAGE("IsText" + error_context,
-                           entry.IsText() == testEntry.IsText());
-
-    CPPUNIT_ASSERT_MESSAGE("Extra/LocalExtra mismatch for entry" + error_entry,
-        (entry.GetExtraLen() != 0 && entry.GetLocalExtraLen() != 0) ||
-        (entry.GetExtraLen() == 0 && entry.GetLocalExtraLen() == 0));
-}
-
-// check the notifier mechanism by using it to fold the entry comments to
-// lowercase
-//
-class ZipNotifier : public wxZipNotifier
-{
-public:
-    void OnEntryUpdated(wxZipEntry& entry);
-};
-
-void ZipNotifier::OnEntryUpdated(wxZipEntry& entry)
-{
-    entry.SetComment(entry.GetComment().Lower());
-}
-
-void ZipTestCase::OnSetNotifier(EntryT& entry)
-{
-    static ZipNotifier notifier;
-    entry.SetNotifier(notifier);
-}
-
-
-///////////////////////////////////////////////////////////////////////////////
-// 'zip - -' produces local headers without the size field set. This is a
-// case not covered by all the other tests, so this class tests it as a
-// special case
-
-class ZipPipeTestCase : public CppUnit::TestCase
-{
-public:
-    ZipPipeTestCase(string name, int options) :
-        CppUnit::TestCase(name), m_options(options) { }
-
-protected:
-    void runTest();
-    int m_options;
-};
-
-void ZipPipeTestCase::runTest()
-{
-    TestOutputStream out(m_options);
-
-    wxString testdata = _T("test data to pipe through zip");
-    wxString cmd = _T("echo ") + testdata + _T(" | zip -q - -");
-
-    {
-        PFileInputStream in(cmd);
-        if (in.Ok())
-            out.Write(in);
-    }
-
-    TestInputStream in(out);
-    wxZipInputStream zip(in);
-
-    auto_ptr<wxZipEntry> entry(zip.GetNextEntry());
-    CPPUNIT_ASSERT(entry.get() != NULL);
-
-    if ((m_options & PipeIn) == 0)
-        CPPUNIT_ASSERT(entry->GetSize() != wxInvalidOffset);
-
-    char buf[64];
-    size_t len = zip.Read(buf, sizeof(buf) - 1).LastRead();
-
-    while (len > 0 && buf[len - 1] <= 32)
-        --len;
-    buf[len] = 0;
-
-    CPPUNIT_ASSERT(zip.Eof());
-    CPPUNIT_ASSERT(wxString(buf, *wxConvCurrent) == testdata);
-}
-
-
 ///////////////////////////////////////////////////////////////////////////////
-// The suite
-
-class ArchiveTestSuite : public CppUnit::TestSuite
-{
-public:
-    ArchiveTestSuite();
-    static CppUnit::Test *suite()
-        { return (new ArchiveTestSuite)->makeSuite(); }
-
-private:
-    int m_id;
-    wxPathList m_path;
-
-    ArchiveTestSuite *makeSuite();
-    void AddCmd(wxArrayString& cmdlist, const wxString& cmd);
-    bool IsInPath(const wxString& cmd);
-
-    string Description(const wxString& type,
-                       int options,
-                       bool genericInterface = false,
-                       const wxString& archiver = wxEmptyString,
-                       const wxString& unarchiver = wxEmptyString);
-};
+// Suite base
 
-ArchiveTestSuite::ArchiveTestSuite()
-  : CppUnit::TestSuite("ArchiveTestSuite"),
-    m_id(0)
+ArchiveTestSuite::ArchiveTestSuite(string name)
+  : CppUnit::TestSuite("archive/" + name),
+    m_id(0),
+    m_name(name.c_str(), *wxConvCurrent)
 {
+    m_name = _T("wx") + m_name.Left(1).Upper() + m_name.Mid(1).Lower();
     m_path.AddEnvList(_T("PATH"));
+    m_archivers.push_back(_T(""));
+    m_unarchivers.push_back(_T(""));
 }
 
@@ -1564,6 +1171,4 @@
 void ArchiveTestSuite::AddCmd(wxArrayString& cmdlist, const wxString& cmd)
 {
-    if (cmdlist.empty())
-        cmdlist.push_back(_T(""));
     if (IsInPath(cmd))
         cmdlist.push_back(cmd);
@@ -1584,50 +1189,43 @@
 {
     typedef wxArrayString::iterator Iter;
-    wxArrayString zippers;
-    wxArrayString unzippers;
-
-    AddCmd(zippers, _T("zip -qr %s *"));
-    AddCmd(unzippers, _T("unzip -q %s"));
 
-    for (int genInterface = 0; genInterface < 2; genInterface++)
-        for (Iter i = unzippers.begin(); i != unzippers.end(); ++i)
-            for (Iter j = zippers.begin(); j != zippers.end(); ++j)
+    for (int generic = 0; generic < 2; generic++)
+        for (Iter i = m_unarchivers.begin(); i != m_unarchivers.end(); ++i)
+            for (Iter j = m_archivers.begin(); j != m_archivers.end(); ++j)
                 for (int options = 0; options <= AllOptions; options++)
                 {
-                    // unzip doesn't support piping in the zip
+#ifdef WXARC_NO_POPEN 
+                    // if no popen then can't pipe in/out of archiver
                     if ((options & PipeIn) && !i->empty())
                         continue;
-#ifdef WXARC_NO_POPEN
-                    // if no popen then can use piped output of zip
                     if ((options & PipeOut) && !j->empty())
                         continue;
 #endif
-                    string name = Description(_T("wxZip"), options, 
-                                              genInterface != 0, *j, *i);
+                    string descr = Description(m_name, options, 
+                                               generic != 0, *j, *i);
 
-                    if (genInterface)
-                        addTest(new ArchiveTestCase<ArchiveClasses>(
-                                    name, m_id,
-                                    new wxZipClassFactory,
-                                    options, *j, *i));
-                    else
-                        addTest(new ZipTestCase(name, m_id, options, *j, *i));
+                    CppUnit::Test *test = makeTest(descr, m_id, options,
+                                                   generic != 0, *j, *i);
 
-                    m_id++;
+                    if (test) {
+                        addTest(test);
+                        m_id++;
+                    }
                 }
 
-#ifndef WXARC_NO_POPEN
-    // if have popen then can check the piped output of 'zip - -'
-    if (IsInPath(_T("zip")))
-        for (int options = 0; options <= PipeIn; options += PipeIn) {
-            string name = Description(_T("ZipPipeTestCase"), options);
-            addTest(new ZipPipeTestCase(name, options));
-            m_id++;
-        }
-#endif
-
     return this;
 }
 
+CppUnit::Test *ArchiveTestSuite::makeTest(
+    string WXUNUSED(descr),
+    int WXUNUSED(id),
+    int WXUNUSED(options),
+    bool WXUNUSED(genericInterface),
+    const wxString& WXUNUSED(archiver),
+    const wxString& WXUNUSED(unarchiver))
+{
+    return NULL;
+}
+
 // make a display string for the option bits
 //
@@ -1646,8 +1244,12 @@
         descr << type;
 
-    if (!archiver.empty())
-        descr << _T(" ") << archiver.BeforeFirst(_T(' '));
-    if (!unarchiver.empty())
-        descr << _T(" ") << unarchiver.BeforeFirst(_T(' '));
+    if (!archiver.empty()) {
+        const wxChar *fn = (options & PipeOut) != 0 ? _T("-") : _T("file");
+        descr << _T(" (") << wxString::Format(archiver, fn) << _T(")");
+    }
+    if (!unarchiver.empty()) {
+        const wxChar *fn = (options & PipeIn) != 0 ? _T("-") : _T("file");
+        descr << _T(" (") << wxString::Format(unarchiver, fn) << _T(")");
+    }
     
     wxString optstr;
@@ -1667,9 +1269,14 @@
 }
 
-// register in the unnamed registry so that these tests are run by default
-CPPUNIT_TEST_SUITE_REGISTRATION(ArchiveTestSuite);
 
-// also include in it's own registry so that these tests can be run alone
-CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(ArchiveTestSuite, "ArchiveTestSuite");
+///////////////////////////////////////////////////////////////////////////////
+// Instantiations
+
+template class ArchiveTestCase<wxArchiveClassFactory>;
+
+#if wxUSE_ZIPSTREAM
+#include "wx/zipstrm.h"
+template class ArchiveTestCase<wxZipClassFactory>;
+#endif
 
-#endif // wxUSE_STREAMS
+#endif // wxUSE_STREAMS && wxUSE_ARCSTREAM
--- /dev/null	Fri Sep 10 16:59:46 2004
+++ tests/archive/archivetest.h	Sat Nov 27 02:10:48 2004
@@ -0,0 +1,249 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/archive/archivetest.h
+// Purpose:     Test the archive classes
+// Author:      Mike Wetherell
+// RCS-ID:      $Id$
+// Copyright:   (c) 2004 Mike Wetherell
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#define WX_TEST_ARCHIVE_ITERATOR
+
+#include "wx/archive.h"
+#include "wx/wfstream.h"
+
+
+///////////////////////////////////////////////////////////////////////////////
+// Bit flags for options for the tests
+
+enum Options
+{
+    PipeIn      = 0x01,     // input streams are non-seekable
+    PipeOut     = 0x02,     // output streams are non-seekable
+    Stub        = 0x04,     // the archive should be appended to a stub
+    AllOptions  = 0x07
+};
+
+
+///////////////////////////////////////////////////////////////////////////////
+// TestOutputStream and TestInputStream are memory streams which can be
+// seekable or non-seekable.
+
+class TestOutputStream : public wxOutputStream
+{
+public:
+    TestOutputStream(int options);
+
+    ~TestOutputStream() { delete [] m_data; }
+
+    int GetOptions() const { return m_options; }
+    wxFileOffset GetLength() const { return m_size; }
+
+    // gives away the data, this stream is then empty, and can be reused
+    void GetData(char*& data, size_t& size);
+
+    enum { STUB_SIZE = 2048, INITIAL_SIZE = 0x18000, SEEK_LIMIT = 0x100000 };
+
+private:
+    void Init();
+
+    wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
+    wxFileOffset OnSysTell() const;
+    size_t OnSysWrite(const void *buffer, size_t size);
+
+    int m_options;
+    size_t m_pos;
+    size_t m_capacity;
+    size_t m_size;
+    char *m_data;
+};
+
+class TestInputStream : public wxInputStream
+{
+public:
+    // ctor takes the data from the output stream, which is then empty
+    TestInputStream(TestOutputStream& out) : m_data(NULL) { SetData(out); }
+    // this ctor 'dups'
+    TestInputStream(const TestInputStream& in);
+    ~TestInputStream() { delete [] m_data; }
+
+    void Rewind();
+    wxFileOffset GetLength() const { return m_size; }
+    void SetData(TestOutputStream& out);
+
+private:
+    wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
+    wxFileOffset OnSysTell() const;
+    size_t OnSysRead(void *buffer, size_t size);
+
+    int m_options;
+    size_t m_pos;
+    size_t m_size;
+    char *m_data;
+};
+
+
+///////////////////////////////////////////////////////////////////////////////
+// wxFFile streams for piping to/from an external program
+
+class PFileInputStream : public wxFFileInputStream
+{
+public:
+    PFileInputStream(const wxString& cmd);
+    ~PFileInputStream();
+};
+
+class PFileOutputStream : public wxFFileOutputStream
+{
+public:
+    PFileOutputStream(const wxString& cmd);
+    ~PFileOutputStream();
+};
+
+
+///////////////////////////////////////////////////////////////////////////////
+// A class to hold a test entry
+
+class TestEntry
+{
+public:
+    TestEntry(const wxDateTime& dt, int len, const char *data);
+    ~TestEntry() { delete [] m_data; }
+
+    wxDateTime GetDateTime() const  { return m_dt; }
+    wxFileOffset GetLength() const  { return m_len; }
+    size_t GetSize() const          { return m_len; }
+    const char *GetData() const     { return m_data; }
+    wxString GetComment() const     { return m_comment; }
+    bool IsText() const             { return m_isText; }
+
+    void SetComment(const wxString& comment) { m_comment = comment; }
+    void SetDateTime(const wxDateTime& dt)   { m_dt = dt; }
+
+private:
+    wxDateTime m_dt;
+    size_t m_len;
+    char *m_data;
+    wxString m_comment;
+    bool m_isText;
+};
+
+
+///////////////////////////////////////////////////////////////////////////////
+// The test case
+
+template <class ClassFactoryT>
+class ArchiveTestCase : public CppUnit::TestCase
+{
+public:
+    ArchiveTestCase(std::string name,
+                    int id,
+                    ClassFactoryT *factory,
+                    int options,
+                    const wxString& archiver = wxEmptyString,
+                    const wxString& unarchiver = wxEmptyString);
+
+    ~ArchiveTestCase();
+
+protected:
+    // the classes to test
+    typedef typename ClassFactoryT::entry_type     EntryT;
+    typedef typename ClassFactoryT::instream_type  InputStreamT;
+    typedef typename ClassFactoryT::outstream_type OutputStreamT;
+    typedef typename ClassFactoryT::notifier_type  NotifierT;
+    typedef typename ClassFactoryT::iter_type      IterT;
+    typedef typename ClassFactoryT::pairiter_type  PairIterT;
+
+    // the entry point for the test
+    void runTest();
+
+    // create the test data
+    void CreateTestData();
+    TestEntry& Add(const char *name, const char *data, int len = -1);
+    TestEntry& Add(const char *name, int len = 0, int value = EOF);
+
+    // 'archive up' the test data
+    void CreateArchive(wxOutputStream& out);
+    void CreateArchive(wxOutputStream& out, const wxString& archiver);
+
+    // perform various modifications on the archive
+    void ModifyArchive(wxInputStream& in, wxOutputStream& out);
+
+    // extract the archive and verify its contents
+    void ExtractArchive(wxInputStream& in);
+    void ExtractArchive(wxInputStream& in, const wxString& unarchiver);
+    void VerifyDir(wxString& path, size_t rootlen = 0);
+
+    // tests for the iterators
+    void TestIterator(wxInputStream& in);
+    void TestPairIterator(wxInputStream& in);
+    void TestSmartIterator(wxInputStream& in);
+    void TestSmartPairIterator(wxInputStream& in);
+
+    // try reading two entries at the same time
+    void ReadSimultaneous(TestInputStream& in);
+
+    // overridables
+    virtual void OnCreateArchive(OutputStreamT& WXUNUSED(arc)) { }
+    virtual void OnSetNotifier(EntryT& entry);
+
+    virtual void OnArchiveExtracted(InputStreamT& WXUNUSED(arc),
+                                    int WXUNUSED(expectedTotal)) { }
+
+    virtual void OnCreateEntry(     OutputStreamT& WXUNUSED(arc),
+                                    TestEntry& WXUNUSED(testEntry),
+                                    EntryT *entry = NULL) { (void)entry; }
+
+    virtual void OnEntryExtracted(  EntryT& WXUNUSED(entry),
+                                    const TestEntry& WXUNUSED(testEntry),
+                                    InputStreamT *arc = NULL) { (void)arc; }
+
+    typedef std::map<wxString, TestEntry*> TestEntries;
+    TestEntries m_testEntries;              // test data
+    std::auto_ptr<ClassFactoryT> m_factory; // factory to make classes
+    int m_options;                          // test options
+    wxDateTime m_timeStamp;                 // timestamp to give test entries
+    int m_id;                               // select between the possibilites
+    wxString m_archiver;                    // external archiver
+    wxString m_unarchiver;                  // external unarchiver
+};
+
+
+///////////////////////////////////////////////////////////////////////////////
+// Base class for the archive test suites
+
+class ArchiveTestSuite : public CppUnit::TestSuite
+{
+public:
+    ArchiveTestSuite(std::string name);
+
+protected:
+    int m_id;
+
+    virtual ArchiveTestSuite *makeSuite();
+
+    virtual CppUnit::Test *makeTest(std::string descr,
+                                    int id,
+                                    int options,
+                                    bool genericInterface,
+                                    const wxString& archiver,
+                                    const wxString& unarchiver);
+
+    void AddArchiver(const wxString& cmd) { AddCmd(m_archivers, cmd); }
+    void AddUnArchiver(const wxString &cmd) { AddCmd(m_unarchivers, cmd); }
+    bool IsInPath(const wxString& cmd);
+
+    std::string Description(const wxString& type,
+                            int options,
+                            bool genericInterface = false,
+                            const wxString& archiver = wxEmptyString,
+                            const wxString& unarchiver = wxEmptyString);
+
+private:
+    wxString m_name;
+    wxPathList m_path;
+    wxArrayString m_archivers;
+    wxArrayString m_unarchivers;
+
+    void AddCmd(wxArrayString& cmdlist, const wxString& cmd);
+};
--- /dev/null	Fri Sep 10 16:59:46 2004
+++ tests/archive/ziptest.cpp	Sat Nov 27 16:12:28 2004
@@ -0,0 +1,271 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/archive/ziptest.cpp
+// Purpose:     Test the zip classes
+// Author:      Mike Wetherell
+// RCS-ID:      $Id$
+// Copyright:   (c) 2004 Mike Wetherell
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+#   pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+#   include "wx/wx.h"
+#endif
+
+#if wxUSE_STREAMS && wxUSE_ZIPSTREAM
+
+#include "archivetest.h"
+#include "wx/zipstrm.h"
+
+using std::string;
+using std::auto_ptr;
+
+
+///////////////////////////////////////////////////////////////////////////////
+// ArchiveTestCase<wxZipClassFactory> could be used directly, but instead this
+// derived class is used so that zip specific features can be tested.
+
+class ZipTestCase : public ArchiveTestCase<wxZipClassFactory>
+{
+public:
+    ZipTestCase(string name,
+                int id,
+                int options,
+                const wxString& archiver = wxEmptyString,
+                const wxString& unarchiver = wxEmptyString)
+    :
+        ArchiveTestCase<wxZipClassFactory>(name, id, new wxZipClassFactory,
+                                           options, archiver, unarchiver),
+        m_count(0)
+    { }
+
+protected:
+    void OnCreateArchive(wxZipOutputStream& zip);
+    
+    void OnArchiveExtracted(wxZipInputStream& zip, int expectedTotal);
+    
+    void OnCreateEntry(wxZipOutputStream& zip,
+                       TestEntry& testEntry,
+                       wxZipEntry *entry);
+    
+    void OnEntryExtracted(wxZipEntry& entry,
+                          const TestEntry& testEntry,
+                          wxZipInputStream *arc);
+
+    void OnSetNotifier(EntryT& entry);
+
+    int m_count;
+    wxString m_comment;
+};
+
+void ZipTestCase::OnCreateArchive(wxZipOutputStream& zip)
+{
+    m_comment << _T("Comment for test ") << m_id;
+    zip.SetComment(m_comment);
+}
+
+void ZipTestCase::OnArchiveExtracted(wxZipInputStream& zip, int expectedTotal)
+{
+    CPPUNIT_ASSERT(zip.GetComment() == m_comment);
+    CPPUNIT_ASSERT(zip.GetTotalEntries() == expectedTotal);
+}
+
+void ZipTestCase::OnCreateEntry(wxZipOutputStream& zip,
+                                TestEntry& testEntry,
+                                wxZipEntry *entry)
+{
+    zip.SetLevel((m_id + m_count) % 10);
+
+    if (entry) {
+        switch ((m_id + m_count) % 5) {
+            case 0:
+            {
+                wxString comment = _T("Comment for ") + entry->GetName();
+                entry->SetComment(comment);
+                // lowercase the expected result, and the notifier should do
+                // the same for the zip entries when ModifyArchive() runs
+                testEntry.SetComment(comment.Lower());
+                break;
+            }
+            case 2:
+                entry->SetMethod(wxZIP_METHOD_STORE);
+                break;
+            case 4:
+                entry->SetMethod(wxZIP_METHOD_DEFLATE);
+                break;
+        }
+        entry->SetIsText(testEntry.IsText());
+    }
+
+    m_count++;
+}
+
+void ZipTestCase::OnEntryExtracted(wxZipEntry& entry,
+                                   const TestEntry& testEntry,
+                                   wxZipInputStream *arc)
+{
+    // provide some context for the error message so that we know which
+    // iteration of the loop we were on
+    wxString name = _T(" '") + entry.GetName() + _T("'");
+    string error_entry(name.mb_str());
+    string error_context(" failed for entry" + error_entry);
+
+    CPPUNIT_ASSERT_MESSAGE("GetComment" + error_context,
+        entry.GetComment() == testEntry.GetComment());
+
+    // for seekable streams, GetNextEntry() doesn't read the local header so
+    // call OpenEntry() to do it
+    if (arc && (m_options & PipeIn) == 0 && entry.IsDir())
+        arc->OpenEntry(entry);
+
+    CPPUNIT_ASSERT_MESSAGE("IsText" + error_context,
+                           entry.IsText() == testEntry.IsText());
+
+    CPPUNIT_ASSERT_MESSAGE("Extra/LocalExtra mismatch for entry" + error_entry,
+        (entry.GetExtraLen() != 0 && entry.GetLocalExtraLen() != 0) ||
+        (entry.GetExtraLen() == 0 && entry.GetLocalExtraLen() == 0));
+}
+
+// check the notifier mechanism by using it to fold the entry comments to
+// lowercase
+//
+class ZipNotifier : public wxZipNotifier
+{
+public:
+    void OnEntryUpdated(wxZipEntry& entry);
+};
+
+void ZipNotifier::OnEntryUpdated(wxZipEntry& entry)
+{
+    entry.SetComment(entry.GetComment().Lower());
+}
+
+void ZipTestCase::OnSetNotifier(EntryT& entry)
+{
+    static ZipNotifier notifier;
+    entry.SetNotifier(notifier);
+}
+
+
+///////////////////////////////////////////////////////////////////////////////
+// 'zip - -' produces local headers without the size field set. This is a
+// case not covered by all the other tests, so this class tests it as a
+// special case
+
+class ZipPipeTestCase : public CppUnit::TestCase
+{
+public:
+    ZipPipeTestCase(string name, int options) :
+        CppUnit::TestCase(name), m_options(options) { }
+
+protected:
+    void runTest();
+    int m_options;
+};
+
+void ZipPipeTestCase::runTest()
+{
+    TestOutputStream out(m_options);
+
+    wxString testdata = _T("test data to pipe through zip");
+    wxString cmd = _T("echo ") + testdata + _T(" | zip -q - -");
+
+    {
+        PFileInputStream in(cmd);
+        if (in.Ok())
+            out.Write(in);
+    }
+
+    TestInputStream in(out);
+    wxZipInputStream zip(in);
+
+    auto_ptr<wxZipEntry> entry(zip.GetNextEntry());
+    CPPUNIT_ASSERT(entry.get() != NULL);
+
+    if ((m_options & PipeIn) == 0)
+        CPPUNIT_ASSERT(entry->GetSize() != wxInvalidOffset);
+
+    char buf[64];
+    size_t len = zip.Read(buf, sizeof(buf) - 1).LastRead();
+
+    while (len > 0 && buf[len - 1] <= 32)
+        --len;
+    buf[len] = 0;
+
+    CPPUNIT_ASSERT(zip.Eof());
+    CPPUNIT_ASSERT(wxString(buf, *wxConvCurrent) == testdata);
+}
+
+
+///////////////////////////////////////////////////////////////////////////////
+// Zip suite 
+
+class ziptest : public ArchiveTestSuite
+{
+public:
+    ziptest();
+    static CppUnit::Test *suite() { return (new ziptest)->makeSuite(); }
+
+protected:
+    ArchiveTestSuite *makeSuite();
+
+    CppUnit::Test *makeTest(string descr, int id, int options,
+                            bool genericInterface, const wxString& archiver,
+                            const wxString& unarchiver);
+};
+
+ziptest::ziptest()
+  : ArchiveTestSuite("zip")
+{
+    AddArchiver(_T("zip -qr %s *"));
+    AddUnArchiver(_T("unzip -q %s"));
+}
+
+ArchiveTestSuite *ziptest::makeSuite()
+{
+    ArchiveTestSuite::makeSuite();
+
+#ifndef WXARC_NO_POPEN 
+    // if have popen then can check the piped output of 'zip - -'
+    if (IsInPath(_T("zip")))
+        for (int options = 0; options <= PipeIn; options += PipeIn) {
+            string name = Description(_T("ZipPipeTestCase"), options,
+                                      false, _T(""), _T("zip -q - -"));
+            addTest(new ZipPipeTestCase(name, options));
+            m_id++;
+        }
+#endif
+
+    return this;
+}
+
+CppUnit::Test *ziptest::makeTest(
+    string descr,
+    int   id,
+    int   options,
+    bool  genericInterface,
+    const wxString& archiver,
+    const wxString& unarchiver)
+{
+    // unzip doesn't support piping in the zip
+    if ((options & PipeIn) && !unarchiver.empty())
+        return NULL;
+
+    if (genericInterface)
+        return new ArchiveTestCase<wxArchiveClassFactory>(
+                            descr, id, new wxZipClassFactory,
+                            options, archiver, unarchiver);
+    else
+        return new ZipTestCase(descr, id, options, archiver, unarchiver);
+}
+
+CPPUNIT_TEST_SUITE_REGISTRATION(ziptest);
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(ziptest, "archive");
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(ziptest, "archive/zip");
+
+#endif // wxUSE_STREAMS && wxUSE_ZIPSTREAM

 	  	 

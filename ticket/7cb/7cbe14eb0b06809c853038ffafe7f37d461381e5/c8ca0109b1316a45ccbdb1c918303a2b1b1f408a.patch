Index: demo/agw/HyperTreeList.py
===================================================================
--- demo/agw/HyperTreeList.py	(revision 63814)
+++ demo/agw/HyperTreeList.py	(working copy)
@@ -4,6 +4,7 @@
 
 import wx
 import wx.lib.colourselect as csel
+import wx.lib.colourutils as cutils
 
 import sys
 
@@ -869,7 +870,151 @@
         dc.SetBackground(wx.Brush("white"))
         dc.Clear()
 
+
+#---------------------------------------------------------------------------
+# Custom Renderer for the column headers
+#---------------------------------------------------------------------------
+class HyperTreeHeaderRenderer(object):
+    """
+    Draws the column headers as a solid color (self.color) 
+    """
+
+    def __init__(self, parent):
+        self.color = wx.Colour(150,150,150)
+        
+    def DrawTextFormatted(self, dc, text, rect):
+        """
+        Draws the item text, correctly formatted.
+
+        :param `dc`: an instance of `wx.DC`;
+        :param `text`: the item text;
+        :param `rect`: the item client rectangle.
+        """
+
+        # determine if the string can fit inside the current width
+        w, h, dummy = dc.GetMultiLineTextExtent(text)
+        width = rect.width
+        
+        if w <= width:
+            
+            dc.DrawLabel(text, rect, wx.ALIGN_CENTER_VERTICAL)
+
+        else:
+            
+            # determine the base width
+            ellipsis = "..."
+            base_w, h = dc.GetTextExtent(ellipsis)
+
+            # continue until we have enough space or only one character left
+
+            newText = text.split("\n")
+            theText = ""
+
+            for text in newText:
+            
+                lenText = len(text)
+                drawntext = text
+                w, dummy = dc.GetTextExtent(text)
+
+                while lenText > 1:
+
+                    if w + base_w <= width:
+                        break
+
+                    w_c, h_c = dc.GetTextExtent(drawntext[-1])
+                    drawntext = drawntext[0:-1]
+                    lenText -= 1
+                    w -= w_c
                 
+                # if still not enough space, remove ellipsis characters
+                while len(ellipsis) > 0 and w + base_w > width:
+                    ellipsis = ellipsis[0:-1]
+                    base_w, h = dc.GetTextExtent(ellipsis)
+
+                theText += drawntext + ellipsis + "\n"
+
+            theText = theText.rstrip()
+            dc.DrawLabel(theText, rect, wx.ALIGN_CENTER_VERTICAL)
+    
+
+        
+    def DrawHeaderButton(self, dc, rect, flags=0, params=None):
+      
+        if params != None:
+            text_align = params.m_labelAlignment
+            bitmap     = params.m_labelBitmap
+            text_color = params.m_labelColour
+            text_font  = params.m_labelFont
+            text       = params.m_labelText
+            
+        color = self.color
+       
+        if flags & wx.CONTROL_DISABLED:
+            color = wx.Colour(wx.WHITE)
+        elif flags & wx.CONTROL_SELECTED:
+            color = wx.Colour(wx.BLUE)
+        if flags & wx.CONTROL_PRESSED:
+            self._pressed = True
+            color = cutils.AdjustColour(color,-30)
+        elif flags & wx.CONTROL_CURRENT:
+            self._hover = True
+            color = cutils.AdjustColour(color,50)
+       
+        # Draw a solid background in self.color
+        dc.SetBrush(wx.Brush(color, wx.SOLID))
+        dc.SetBackgroundMode(wx.SOLID)
+        dc.SetPen(wx.TRANSPARENT_PEN)
+        dc.DrawRectangleRect(rect)
+      
+        # Draw the column divider on the right
+        x = rect.width + rect.x - 2
+        dc.SetPen(wx.Pen(cutils.AdjustColour(color,-30)))
+        dc.DrawLine(x,2,x,rect.height-2)
+        x += 1
+        dc.SetPen(wx.Pen(cutils.AdjustColour(color,30)))
+        dc.DrawLine(x,2,x,rect.height-2)
+
+        dc.SetBackgroundMode(wx.TRANSPARENT)        
+      
+        if params == None:
+            return
+       
+        # We need to draw the text and/or icon bitmap
+        dc.SetFont(text_font)
+        dc.SetTextForeground(text_color)
+        
+        # Determine the width of the text
+        wLabel, hLabel, dummy = dc.GetMultiLineTextExtent(text)
+        wLabel += 4  # 2 pixel margin either side
+
+        # and the width of the icon, if any
+        if bitmap:
+            wLabel += bitmap.GetWidth() + 2  # 2 is a margin between the image and text
+           
+        # ALIGN_LEFT if the label is larger than the available space 
+        text_align = (wLabel < rect.width and [text_align] or [wx.ALIGN_LEFT])[0]
+        
+        x = rect.x + 2
+
+        if text_align == wx.ALIGN_LEFT:
+            xAligned = x 
+
+        elif text_align == wx.ALIGN_RIGHT:
+            xAligned = x + rect.width - wLabel - 1
+
+        elif text_align == wx.ALIGN_CENTER:
+            xAligned = x + (rect.width - wLabel)/2
+           
+        if bitmap: 
+            dc.DrawBitmap(bitmap, xAligned + wLabel - bitmap.GetWidth() , 2, True)
+
+        dc.SetClippingRegion(x, 1, rect.width-2, rect.height - 2)
+        self.DrawTextFormatted(dc, text, wx.Rect(xAligned+2, 1, rect.width-2, rect.height-2))
+        dc.DestroyClippingRegion()
+        
+
+
+                
 #---------------------------------------------------------------------------
 # HyperTreeList Demo Implementation
 #---------------------------------------------------------------------------
@@ -1044,6 +1189,12 @@
         columnimages.Bind(wx.EVT_CHECKBOX, self.OnColumnImages)
         flexgridcolumn.Add(columnimages, 0, wx.ALIGN_CENTER_VERTICAL)
         flexgridcolumn.Add((20,20), 0)
+
+        columnimages = wx.CheckBox(self.leftpanel, -1, "Custom Renderer", style=wx.ALIGN_RIGHT)
+        columnimages.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
+        columnimages.Bind(wx.EVT_CHECKBOX, self.OnCustomRenderer)
+        flexgridcolumn.Add(columnimages, 0, wx.ALIGN_CENTER_VERTICAL)
+        flexgridcolumn.Add((20,20), 0)
         
         columnssizer.Add(flexgridcolumn, 1, wx.EXPAND)        
         
@@ -1296,7 +1447,23 @@
             
         event.Skip()        
 
+    def OnCustomRenderer(self, event):
 
+        if event.IsChecked():
+            renderer = HyperTreeHeaderRenderer(self) 
+            renderer.color = wx.Colour(211,227,247)
+            renderer.text_color = wx.Colour(30,30,30)
+            self.tree.SetHeaderCustomRenderer(renderer)
+        else:
+            renderer = None
+            self.tree.SetHeaderCustomRenderer(renderer)
+            
+        self.Refresh()
+            
+        event.Skip()        
+
+
+
     def OnColumnWidth(self, event):
 
         selection = event.GetSelection()
Index: wx/lib/agw/hypertreelist.py
===================================================================
--- wx/lib/agw/hypertreelist.py	(revision 63814)
+++ wx/lib/agw/hypertreelist.py	(working copy)
@@ -578,6 +578,7 @@
         self._total_col_width = 0
         self._hotTrackCol = -1
         self._columns = []
+        self._headerCustomRenderer = None
         
         self.Bind(wx.EVT_PAINT, self.OnPaint)
         self.Bind(wx.EVT_MOUSE_EVENTS, self.OnMouse)
@@ -835,12 +836,19 @@
             if image != -1 and imageList:
                 params.m_labelBitmap = imageList.GetBitmap(image)
 
-            wx.RendererNative.Get().DrawHeaderButton(self, dc, rect, flags,
-                                                     wx.HDR_SORT_ICON_NONE, params)
-        
+            if self._headerCustomRenderer != None:
+               self._headerCustomRenderer.DrawHeaderButton(dc, rect, flags, params)
+            else:
+                wx.RendererNative.Get().DrawHeaderButton(self, dc, rect, flags,
+                                                         wx.HDR_SORT_ICON_NONE, params)
+       
+        # Fill up any unused space to the right of the columns
         if x < w:
             rect = wx.Rect(x, 0, w-x, h)
-            wx.RendererNative.Get().DrawHeaderButton(self, dc, rect)
+            if self._headerCustomRenderer != None:
+               self._headerCustomRenderer.DrawHeaderButton(dc, rect)
+            else:
+                wx.RendererNative.Get().DrawHeaderButton(self, dc, rect)
         
 
     def DrawCurrent(self):
@@ -864,8 +872,20 @@
         self.AdjustDC(dc)
         dc.DrawLine (x1, y1, x2, y2)
         dc.SetLogicalFunction(wx.COPY)
+        
+        
+    def SetCustomRenderer(self, renderer=None):
+        """
+        Associate a custom renderer with the header - all columns will use it
 
+        :param `renderer`: a class able to correctly render header buttons
 
+        :note: the renderer class **must** implement the method `DrawHeaderButton`
+        """
+
+        self._headerCustomRenderer = renderer
+
+
     def XToCol(self, x):
         """
         Returns the column that corresponds to the logical input `x` coordinate.
@@ -4127,7 +4147,18 @@
         else:
             return False
     
+    def SetHeaderCustomRenderer(self, renderer=None):
+        """
+        Associate a custom renderer with the header - all columns will use it
 
+        :param `renderer`: a class able to correctly render header buttons
+
+        :note: the renderer class **must** implement the method `DrawHeaderButton`
+        """
+
+        self._header_win.SetCustomRenderer(renderer)
+        
+
     def SetWindowStyle(self, style):
         """
         Sets the window style for L{HyperTreeList}.

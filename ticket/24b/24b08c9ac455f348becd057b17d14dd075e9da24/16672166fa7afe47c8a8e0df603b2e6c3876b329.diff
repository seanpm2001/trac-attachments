--- C:/Documents and Settings/lazywind/Local Settings/Temp/grid.cpp-revBASE.svn000.tmp.cpp	Wed Nov 12 00:42:41 2008
+++ C:/wxWidgets-2.9.0/src/generic/grid.cpp	Tue Nov 11 23:56:29 2008
@@ -144,6 +144,7 @@
 DEFINE_EVENT_TYPE(wxEVT_GRID_LABEL_RIGHT_DCLICK)
 DEFINE_EVENT_TYPE(wxEVT_GRID_ROW_SIZE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_COL_SIZE)
+DEFINE_EVENT_TYPE(wxEVT_GRID_ROW_MOVE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_COL_MOVE)
 DEFINE_EVENT_TYPE(wxEVT_GRID_RANGE_SELECT)
 DEFINE_EVENT_TYPE(wxEVT_GRID_CELL_CHANGE)
@@ -328,6 +329,7 @@
     wxGridCellAttr *GetAttr(int row, int col) const;
     void UpdateAttrRows( size_t pos, int numRows );
     void UpdateAttrCols( size_t pos, int numCols );
+    void MoveAttrRowsOrCols( size_t oldPos, size_t newPos, int numRowsOrCols , bool isRows);
 
 private:
     // searches for the attr for given cell, returns wxNOT_FOUND if not found
@@ -347,6 +349,7 @@
     void SetAttr(wxGridCellAttr *attr, int rowOrCol);
     wxGridCellAttr *GetAttr(int rowOrCol) const;
     void UpdateAttrRowsOrCols( size_t pos, int numRowsOrCols );
+    void MoveAttrRowsOrCols( size_t oldPos, size_t newPos, int numRowsOrCols );
 
 private:
     wxArrayInt m_rowsOrCols;
@@ -518,13 +521,6 @@
     virtual bool CanResizeLines(const wxGrid *grid) const = 0;
 
 
-    // Return the index of the line at the given position
-    //
-    // NB: currently this is always identity for the rows as reordering is only
-    //     implemented for the lines
-    virtual int GetLineAt(const wxGrid *grid, int line) const = 0;
-
-
     // Get the row or column label window
     virtual wxWindow *GetHeaderWindow(wxGrid *grid) const = 0;
 
@@ -589,9 +585,6 @@
     virtual bool CanResizeLines(const wxGrid *grid) const
         { return grid->CanDragRowSize(); }
 
-    virtual int GetLineAt(const wxGrid * WXUNUSED(grid), int line) const
-        { return line; } // TODO: implement row reordering
-
     virtual wxWindow *GetHeaderWindow(wxGrid *grid) const
         { return grid->GetGridRowLabelWindow(); }
     virtual int GetHeaderWindowSize(wxGrid *grid) const
@@ -650,9 +643,6 @@
     virtual bool CanResizeLines(const wxGrid *grid) const
         { return grid->CanDragColSize(); }
 
-    virtual int GetLineAt(const wxGrid *grid, int line) const
-        { return grid->GetColAt(line); }
-
     virtual wxWindow *GetHeaderWindow(wxGrid *grid) const
         { return grid->GetGridColLabelWindow(); }
     virtual int GetHeaderWindowSize(wxGrid *grid) const
@@ -3090,6 +3080,42 @@
     }
 }
 
+void wxGridCellAttrData::MoveAttrRowsOrCols( size_t oldPos, size_t newPos, int numRowsOrCols , bool isRows)
+{
+    int lastOld, first, last, diff1, diff2;
+
+    lastOld = oldPos + numRowsOrCols - 1;
+    
+    if (oldPos < newPos)
+    {
+        first = oldPos;
+        last = newPos;
+        diff1 = newPos - lastOld;
+        diff2 = -numRowsOrCols;
+    }
+    else
+    {
+        first = newPos;
+        last = lastOld;
+        diff1 = (int)newPos - oldPos;
+        diff2 = numRowsOrCols;
+    }
+
+    size_t count = m_attrs.GetCount();
+    for ( size_t n = 0; n < count; n++ )
+    {
+        wxGridCellCoords& coords = m_attrs[n].coords;
+        int rowOrCol = isRows ? coords.GetRow() : coords.GetCol();
+        
+        if (rowOrCol < first || rowOrCol > last) continue;
+        if (rowOrCol >= (int)oldPos && rowOrCol <= lastOld) rowOrCol += diff1;
+        else rowOrCol += diff2;
+        
+        if (isRows) coords.SetRow(rowOrCol);
+        else coords.SetCol(rowOrCol); 
+    }
+}
+
 int wxGridCellAttrData::FindIndex(int row, int col) const
 {
     size_t count = m_attrs.GetCount();
@@ -3200,6 +3226,38 @@
     }
 }
 
+void wxGridRowOrColAttrData::MoveAttrRowsOrCols( size_t oldPos, size_t newPos, int numRowsOrCols )
+{
+    int lastOld, first, last, diff1, diff2;
+
+    lastOld = oldPos + numRowsOrCols - 1;
+    
+    if (oldPos < newPos)
+    {
+        first = oldPos;
+        last = newPos;
+        diff1 = newPos - lastOld;
+        diff2 = -numRowsOrCols;
+    }
+    else
+    {
+        first = newPos;
+        last = lastOld;
+        diff1 = (int)newPos - oldPos;
+        diff2 = numRowsOrCols;
+    }
+
+    size_t count = m_attrs.GetCount();
+    for ( size_t n = 0; n < count; n++ )
+    {
+        int& rowOrCol = m_rowsOrCols[n];
+
+        if (rowOrCol < first || rowOrCol > last) continue;
+        if (rowOrCol >= (int)oldPos && rowOrCol <= lastOld) rowOrCol += diff1;
+        else rowOrCol += diff2;
+    }
+}
+
 // ----------------------------------------------------------------------------
 // wxGridCellAttrProvider
 // ----------------------------------------------------------------------------
@@ -3355,6 +3413,26 @@
     }
 }
 
+void wxGridCellAttrProvider::MoveAttrRows( size_t oldPos, size_t newPos, int numRows )
+{
+    if ( m_data )
+    {
+        m_data->m_cellAttrs.MoveAttrRowsOrCols( oldPos, newPos, numRows, true );
+
+        m_data->m_rowAttrs.MoveAttrRowsOrCols( oldPos, newPos, numRows );
+    }
+}
+
+void wxGridCellAttrProvider::MoveAttrCols( size_t oldPos, size_t newPos, int numCols )
+{
+    if ( m_data )
+    {
+        m_data->m_cellAttrs.MoveAttrRowsOrCols( oldPos, newPos, numCols, false );
+
+        m_data->m_colAttrs.MoveAttrRowsOrCols( oldPos, newPos, numCols );
+    }
+}
+
 // ----------------------------------------------------------------------------
 // wxGridTypeRegistry
 // ----------------------------------------------------------------------------
@@ -3627,6 +3705,15 @@
     return false;
 }
 
+bool wxGridTableBase::MoveRows( size_t WXUNUSED(oldPos),
+                                size_t WXUNUSED(newPos),
+                                size_t WXUNUSED(numRows) )
+{
+    wxFAIL_MSG( wxT("Called grid table class function MoveRows\nbut your derived table class does not override this function"));
+
+    return false;
+}
+
 bool wxGridTableBase::InsertCols( size_t WXUNUSED(pos),
                                   size_t WXUNUSED(numCols) )
 {
@@ -3650,6 +3737,15 @@
     return false;
 }
 
+bool wxGridTableBase::MoveCols( size_t WXUNUSED(oldPos),
+                                size_t WXUNUSED(newPos),
+                                size_t WXUNUSED(numCols) )
+{
+    wxFAIL_MSG( wxT("Called grid table class function MoveCols\nbut your derived table class does not override this function"));
+
+    return false;
+}
+
 wxString wxGridTableBase::GetRowLabelValue( int row )
 {
     wxString s;
@@ -3960,6 +4056,57 @@
     return true;
 }
 
+bool wxGridStringTable::MoveRows( size_t oldPos, size_t newPos, size_t numRows )
+{
+    size_t curNumRows = m_data.GetCount();
+
+    if ( oldPos >= curNumRows || newPos >= curNumRows || (oldPos < newPos && oldPos + numRows > newPos) )
+    {
+        wxFAIL_MSG( wxString::Format
+                    (
+                        wxT("Called wxGridStringTable::MoveRows(oldPos=%lu, newPos=%lu, N=%lu)\nPos value is invalid for present table with %lu rows"),
+                        (unsigned long)oldPos,
+                        (unsigned long)newPos,
+                        (unsigned long)numRows,
+                        (unsigned long)curNumRows
+                    ) );
+
+        return false;
+    }
+
+    if ( numRows > curNumRows - oldPos )
+    {
+        numRows = curNumRows - oldPos;
+    }
+    
+    int lastLabelPos = oldPos < newPos ? newPos : oldPos + numRows - 1;
+    SetRowLabelValue( lastLabelPos, GetRowLabelValue( lastLabelPos ) );
+        
+    for (int i = 0; i < (int)numRows; i++)
+    {
+        wxArrayString* rowData = m_data.Detach( oldPos );
+        m_data.Insert( rowData, newPos );
+
+        wxString label = m_rowLabels[oldPos];
+        m_rowLabels.RemoveAt( oldPos );
+        m_rowLabels.Insert( label, newPos );
+    }
+
+/* 
+    if ( GetView() )
+    {
+        wxGridTableMessage msg( this,
+                                wxGRIDTABLE_NOTIFY_ROWS_MOVED,
+                                oldPos,
+                                newPos,
+                                numRows );
+
+        GetView()->ProcessTableMessage( msg );
+    }
+*/
+    return true;
+}
+
 bool wxGridStringTable::InsertCols( size_t pos, size_t numCols )
 {
     size_t row, col;
@@ -4047,15 +4194,9 @@
         return false;
     }
 
-    int colID;
-    if ( GetView() )
-        colID = GetView()->GetColAt( pos );
-    else
-        colID = pos;
-
-    if ( numCols > curNumCols - colID )
+    if ( numCols > curNumCols - pos )
     {
-        numCols = curNumCols - colID;
+        numCols = curNumCols - pos;
     }
 
     if ( !m_colLabels.IsEmpty() )
@@ -4063,9 +4204,9 @@
         // m_colLabels stores just as many elements as it needs, e.g. if only
         // the label of the first column had been set it would have only one
         // element and not numCols, so account for it
-        int nToRm = m_colLabels.size() - colID;
+        int nToRm = m_colLabels.size() - pos;
         if ( nToRm > 0 )
-            m_colLabels.RemoveAt( colID, nToRm );
+            m_colLabels.RemoveAt( pos, nToRm );
     }
 
     for ( row = 0; row < curNumRows; row++ )
@@ -4076,7 +4217,7 @@
         }
         else
         {
-            m_data[row].RemoveAt( colID, numCols );
+            m_data[row].RemoveAt( pos, numCols );
         }
     }
 
@@ -4093,6 +4234,66 @@
     return true;
 }
 
+bool wxGridStringTable::MoveCols( size_t oldPos, size_t newPos, size_t numCols )
+{
+    size_t row;
+
+    size_t curNumRows = m_data.GetCount();
+    size_t curNumCols = ( curNumRows > 0 ? m_data[0].GetCount() :
+                          ( GetView() ? GetView()->GetNumberCols() : 0 ) );
+
+    if ( oldPos >= curNumCols || newPos >= curNumCols || (oldPos < newPos && oldPos + numCols > newPos) )
+    {
+        wxFAIL_MSG( wxString::Format
+                    (
+                        wxT("Called wxGridStringTable::MoveCols(oldPos=%lu, newPos=%lu, N=%lu)\nPos value is invalid for present table with %lu cols"),
+                        (unsigned long)oldPos,
+                        (unsigned long)newPos,
+                        (unsigned long)numCols,
+                        (unsigned long)curNumCols
+                    ) );
+        return false;
+    }
+
+    if ( numCols > curNumCols - oldPos )
+    {
+        numCols = curNumCols - oldPos;
+    }
+
+    int lastLabelPos = oldPos < newPos ? newPos : oldPos + numCols - 1;
+    SetColLabelValue( lastLabelPos, GetColLabelValue( lastLabelPos ) );
+        
+    for (int i = 0; i < (int)numCols; i++)
+    {
+        wxString label = m_colLabels[oldPos];
+        m_colLabels.RemoveAt( oldPos );
+        m_colLabels.Insert( label, newPos );
+    }
+    
+    for ( row = 0; row < curNumRows; row++ )
+    {
+        for (int i = 0; i < (int)numCols; i++)
+        {
+            wxString colData = m_data[row][oldPos];
+            m_data[row].RemoveAt( oldPos );
+            m_data[row].Insert( colData, newPos );
+        }
+    }
+/*
+    if ( GetView() )
+    {
+        wxGridTableMessage msg( this,
+                                wxGRIDTABLE_NOTIFY_COLS_MOVED,
+                                oldPos,
+                                newPos,
+                                numCols );
+
+        GetView()->ProcessTableMessage( msg );
+    }
+*/
+    return true;
+}
+
 wxString wxGridStringTable::GetRowLabelValue( int row )
 {
     if ( row > (int)(m_rowLabels.GetCount()) - 1 )
@@ -4816,6 +5017,7 @@
     m_cellHighlightPenWidth = 2;
     m_cellHighlightROPenWidth = 1;
 
+    m_canDragRowMove = false;
     m_canDragColMove = false;
 
     m_cursorMode  = WXGRID_CURSOR_SELECT_CELL;
@@ -4893,9 +5095,10 @@
 
     m_colWidths.Add( m_defaultColWidth, m_numCols );
 
+    int colRight = 0;
     for ( int i = 0; i < m_numCols; i++ )
     {
-        int colRight = ( GetColPos( i ) + 1 ) * m_defaultColWidth;
+        colRight += m_defaultColWidth;
         m_colRights.Add( colRight );
     }
 }
@@ -4907,13 +5110,13 @@
 
 int wxGrid::GetColLeft(int col) const
 {
-    return m_colRights.IsEmpty() ? GetColPos( col ) * m_defaultColWidth
+    return m_colRights.IsEmpty() ? col * m_defaultColWidth
                                  : m_colRights[col] - m_colWidths[col];
 }
 
 int wxGrid::GetColRight(int col) const
 {
-    return m_colRights.IsEmpty() ? (GetColPos( col ) + 1) * m_defaultColWidth
+    return m_colRights.IsEmpty() ? (col + 1) * m_defaultColWidth
                                  : m_colRights[col];
 }
 
@@ -4937,7 +5140,7 @@
 void wxGrid::CalcDimensions()
 {
     // compute the size of the scrollable area
-    int w = m_numCols > 0 ? GetColRight(GetColAt(m_numCols - 1)) : 0;
+    int w = m_numCols > 0 ? GetColRight(m_numCols - 1) : 0;
     int h = m_numRows > 0 ? GetRowBottom(m_numRows - 1) : 0;
 
     w += m_extraWidth;
@@ -5210,25 +5413,6 @@
             int numCols = msg.GetCommandInt2();
             m_numCols += numCols;
 
-            if ( !m_colAt.IsEmpty() )
-            {
-                //Shift the column IDs
-                int i;
-                for ( i = 0; i < m_numCols - numCols; i++ )
-                {
-                    if ( m_colAt[i] >= (int)pos )
-                        m_colAt[i] += numCols;
-                }
-
-                m_colAt.Insert( pos, pos, numCols );
-
-                //Set the new columns' positions
-                for ( i = pos + 1; i < (int)pos + numCols; i++ )
-                {
-                    m_colAt[i] = i;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.Insert( m_defaultColWidth, pos, numCols );
@@ -5236,13 +5420,10 @@
 
                 int right = 0;
                 if ( pos > 0 )
-                    right = m_colRights[GetColAt( pos - 1 )];
+                    right = m_colRights[pos - 1];
 
-                int colPos;
-                for ( colPos = pos; colPos < m_numCols; colPos++ )
+                for ( i = pos; i < m_numCols; i++ )
                 {
-                    i = GetColAt( colPos );
-
                     right += m_colWidths[i];
                     m_colRights[i] = right;
                 }
@@ -5276,18 +5457,6 @@
             int oldNumCols = m_numCols;
             m_numCols += numCols;
 
-            if ( !m_colAt.IsEmpty() )
-            {
-                m_colAt.Add( 0, numCols );
-
-                //Set the new columns' positions
-                int i;
-                for ( i = oldNumCols; i < m_numCols; i++ )
-                {
-                    m_colAt[i] = i;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.Add( m_defaultColWidth, numCols );
@@ -5295,13 +5464,10 @@
 
                 int right = 0;
                 if ( oldNumCols > 0 )
-                    right = m_colRights[GetColAt( oldNumCols - 1 )];
+                    right = m_colRights[oldNumCols - 1];
 
-                int colPos;
-                for ( colPos = oldNumCols; colPos < m_numCols; colPos++ )
+                for ( i = oldNumCols; i < m_numCols; i++ )
                 {
-                    i = GetColAt( colPos );
-
                     right += m_colWidths[i];
                     m_colRights[i] = right;
                 }
@@ -5329,32 +5495,14 @@
             int numCols = msg.GetCommandInt2();
             m_numCols -= numCols;
 
-            if ( !m_colAt.IsEmpty() )
-            {
-                int colID = GetColAt( pos );
-
-                m_colAt.RemoveAt( pos, numCols );
-
-                //Shift the column IDs
-                int colPos;
-                for ( colPos = 0; colPos < m_numCols; colPos++ )
-                {
-                    if ( m_colAt[colPos] > colID )
-                        m_colAt[colPos] -= numCols;
-                }
-            }
-
             if ( !m_colWidths.IsEmpty() )
             {
                 m_colWidths.RemoveAt( pos, numCols );
                 m_colRights.RemoveAt( pos, numCols );
 
                 int w = 0;
-                int colPos;
-                for ( colPos = 0; colPos < m_numCols; colPos++ )
+                for ( i = 0; i < m_numCols; i++ )
                 {
-                    i = GetColAt( colPos );
-
                     w += m_colWidths[i];
                     m_colRights[i] = w;
                 }
@@ -5490,11 +5638,8 @@
         // find the cells within these bounds
         //
         int col;
-        int colPos;
-        for ( colPos = GetColPos( internalXToCol(left) ); colPos < m_numCols; colPos++ )
+        for ( col = internalXToCol(left); col < m_numCols; col++ )
         {
-            col = GetColAt( colPos );
-
             if ( GetColRight(col) < left )
                 continue;
 
@@ -5552,11 +5697,8 @@
             if ( GetRowTop(row) > bottom )
                 break;
 
-            int colPos;
-            for ( colPos = GetColPos( internalXToCol(left) ); colPos < m_numCols; colPos++ )
+            for ( col = internalXToCol(left); col < m_numCols; col++ )
             {
-                col = GetColAt( colPos );
-
                 if ( GetColRight(col) <= left )
                     continue;
 
@@ -5586,6 +5728,9 @@
         {
             m_isDragging = true;
             m_rowLabelWin->CaptureMouse();
+
+            if ( m_cursorMode == WXGRID_CURSOR_MOVE_ROW )
+                m_dragRowOrCol = YToRow( y );
         }
 
         if ( event.LeftIsDown() )
@@ -5623,6 +5768,73 @@
                 }
                 break;
 
+                case WXGRID_CURSOR_MOVE_ROW:
+                {
+                    if ( y < 0 )
+                        m_moveToRow = 0;
+                    else
+                        m_moveToRow = YToRow( y );
+
+                    int markerY;
+
+                    if ( m_moveToRow < 0 )
+                        markerY = GetRowBottom( m_numRows - 1 );
+                    else if ( y >= (GetRowTop( m_moveToRow ) + (GetRowHeight(m_moveToRow) / 2)) )
+                    {
+                        m_moveToRow = m_moveToRow + 1;
+                        if ( m_moveToRow < 0 || m_moveToRow >= m_numRows )
+                            markerY = GetRowBottom( m_numRows - 1 );
+                        else
+                            markerY = GetRowTop( m_moveToRow );
+                    }
+                    else
+                        markerY = GetRowTop( m_moveToRow );
+
+                    if ( markerY != m_dragLastPos )
+                    {
+                        wxClientDC dc( m_rowLabelWin );
+                        DoPrepareDC(dc);
+
+                        int cw, ch;
+                        m_rowLabelWin->GetClientSize( &cw, &ch );
+
+                        markerY++;
+
+                        //Clean up the last indicator
+                        if ( m_dragLastPos >= 0 )
+                        {
+                            wxPen pen( m_rowLabelWin->GetBackgroundColour(), 2 );
+                            dc.SetPen(pen);
+                            dc.DrawLine( 0, m_dragLastPos + 1, cw, m_dragLastPos + 1 );
+                            dc.SetPen(wxNullPen);
+
+                            if ( YToRow( m_dragLastPos ) != -1 )
+                                DrawRowLabel( dc, YToRow( m_dragLastPos ) );
+                        }
+
+                        const wxColour *color;
+                        //Moving to the same place or to a row contains row spanning cells? Don't draw a marker
+                        if ( ( m_moveToRow == m_dragRowOrCol )
+                          || ( m_moveToRow == m_dragRowOrCol + 1 )
+                          || ( m_moveToRow < 0 && m_dragRowOrCol == m_numRows - 1 )
+                          || HasRowSpanningCells( m_moveToRow < m_dragRowOrCol ? m_moveToRow : m_moveToRow - 1 ) )
+                            color = wxLIGHT_GREY;
+                        else
+                            color = wxBLUE;
+
+                        //Draw the marker
+                        wxPen pen( *color, 2 );
+                        dc.SetPen(pen);
+
+                        dc.DrawLine( 0, markerY, cw, markerY );
+
+                        dc.SetPen(wxNullPen);
+
+                        m_dragLastPos = markerY - 1;
+                    }
+                }
+                break;
+
                 // default label to suppress warnings about "enumeration value
                 // 'xxx' not handled in switch
                 default:
@@ -5663,26 +5875,41 @@
             if ( row >= 0 &&
                  !SendEvent( wxEVT_GRID_LABEL_LEFT_CLICK, row, -1, event ) )
             {
-                if ( !event.ShiftDown() && !event.CmdDown() )
-                    ClearSelection();
-                if ( m_selection )
+                if ( m_canDragRowMove && !HasRowSpanningCells( row ) )
                 {
-                    if ( event.ShiftDown() )
-                    {
-                        m_selection->SelectBlock
-                                     (
-                                        m_currentCellCoords.GetRow(), 0,
-                                        row, GetNumberCols() - 1,
-                                        event
-                                     );
-                    }
-                    else
+                    //Show button as pressed
+                    wxClientDC dc( m_rowLabelWin );
+                    int rowTop = GetRowTop( row );
+                    int rowBottom = GetRowBottom( row ) - 1;
+                    dc.SetPen( wxPen( m_rowLabelWin->GetBackgroundColour(), 1 ) );
+                    dc.DrawLine( 1, rowTop, m_rowLabelWidth-1, rowTop );
+                    dc.DrawLine( 1, rowTop, 1, rowBottom );
+
+                    ChangeCursorMode(WXGRID_CURSOR_MOVE_ROW, m_rowLabelWin);
+                }
+                else
+                {
+                    if ( !event.ShiftDown() && !event.CmdDown() )
+                        ClearSelection();
+                    if ( m_selection )
                     {
-                        m_selection->SelectRow(row, event);
+                        if ( event.ShiftDown() )
+                        {
+                            m_selection->SelectBlock
+                                         (
+                                            m_currentCellCoords.GetRow(), 0,
+                                            row, GetNumberCols() - 1,
+                                            event
+                                         );
+                        }
+                        else
+                        {
+                            m_selection->SelectRow(row, event);
+                        }
                     }
+    
+                    ChangeCursorMode(WXGRID_CURSOR_SELECT_ROW, m_rowLabelWin);
                 }
-
-                ChangeCursorMode(WXGRID_CURSOR_SELECT_ROW, m_rowLabelWin);
             }
         }
         else
@@ -5721,14 +5948,29 @@
     //
     else if ( event.LeftUp() )
     {
-        if ( m_cursorMode == WXGRID_CURSOR_RESIZE_ROW )
+        switch ( m_cursorMode )
         {
-            DoEndDragResizeRow();
+            case WXGRID_CURSOR_RESIZE_ROW:
+                DoEndDragResizeRow();
+    
+                // Note: we are ending the event *after* doing
+                // default processing in this case
+                //
+                SendEvent( wxEVT_GRID_ROW_SIZE, m_dragRowOrCol, -1, event );
+                break;
 
-            // Note: we are ending the event *after* doing
-            // default processing in this case
-            //
-            SendEvent( wxEVT_GRID_ROW_SIZE, m_dragRowOrCol, -1, event );
+            case WXGRID_CURSOR_MOVE_ROW:
+                DoEndDragMoveRow();
+
+                SendEvent( wxEVT_GRID_ROW_MOVE, -1, m_dragRowOrCol, event );
+                break;
+
+            case WXGRID_CURSOR_SELECT_COL:
+            case WXGRID_CURSOR_SELECT_CELL:
+            case WXGRID_CURSOR_RESIZE_COL:
+            case WXGRID_CURSOR_SELECT_ROW:
+                // nothing to do (?)
+                break;
         }
 
         ChangeCursorMode(WXGRID_CURSOR_SELECT_CELL, m_rowLabelWin);
@@ -5835,19 +6077,19 @@
                 case WXGRID_CURSOR_MOVE_COL:
                 {
                     if ( x < 0 )
-                        m_moveToCol = GetColAt( 0 );
+                        m_moveToCol = 0;
                     else
                         m_moveToCol = XToCol( x );
 
                     int markerX;
 
                     if ( m_moveToCol < 0 )
-                        markerX = GetColRight( GetColAt( m_numCols - 1 ) );
+                        markerX = GetColRight( m_numCols - 1 );
                     else if ( x >= (GetColLeft( m_moveToCol ) + (GetColWidth(m_moveToCol) / 2)) )
                     {
-                        m_moveToCol = GetColAt( GetColPos( m_moveToCol ) + 1 );
-                        if ( m_moveToCol < 0 )
-                            markerX = GetColRight( GetColAt( m_numCols - 1 ) );
+                        m_moveToCol = m_moveToCol + 1;
+                        if ( m_moveToCol < 0 || m_moveToCol >= m_numCols )
+                            markerX = GetColRight( m_numCols - 1 );
                         else
                             markerX = GetColLeft( m_moveToCol );
                     }
@@ -5877,10 +6119,11 @@
                         }
 
                         const wxColour *color;
-                        //Moving to the same place? Don't draw a marker
-                        if ( (m_moveToCol == m_dragRowOrCol)
-                          || (GetColPos( m_moveToCol ) == GetColPos( m_dragRowOrCol ) + 1)
-                          || (m_moveToCol < 0 && m_dragRowOrCol == GetColAt( m_numCols - 1 )))
+                        //Moving to the same place or to a column contains column spanning cells? Don't draw a marker
+                        if ( ( m_moveToCol == m_dragRowOrCol )
+                          || ( m_moveToCol == m_dragRowOrCol + 1 )
+                          || ( m_moveToCol < 0 && m_dragRowOrCol == m_numCols - 1 )
+                          || HasColSpanningCells( m_moveToCol < m_dragRowOrCol ? m_moveToCol : m_moveToCol - 1 ) )
                             color = wxLIGHT_GREY;
                         else
                             color = wxBLUE;
@@ -5938,7 +6181,7 @@
             if ( col >= 0 &&
                  !SendEvent( wxEVT_GRID_LABEL_LEFT_CLICK, -1, col, event ) )
             {
-                if ( m_canDragColMove )
+                if ( m_canDragColMove && ! HasColSpanningCells( col ) )
                 {
                     //Show button as pressed
                     wxClientDC dc( m_colLabelWin );
@@ -6147,6 +6390,7 @@
         _T("RESIZE_COL"),
         _T("SELECT_ROW"),
         _T("SELECT_COL"),
+        _T("MOVE_ROW"),
         _T("MOVE_COL"),
     };
 
@@ -6187,6 +6431,7 @@
             win->SetCursor( m_colResizeCursor );
             break;
 
+        case WXGRID_CURSOR_MOVE_ROW:
         case WXGRID_CURSOR_MOVE_COL:
             win->SetCursor( wxCursor(wxCURSOR_HAND) );
             break;
@@ -6683,6 +6928,31 @@
     DoEndDragResizeLine(wxGridColumnOperations());
 }
 
+void wxGrid::DoEndDragMoveRow()
+{
+    //The user clicked on the row but didn't actually drag
+    if ( m_dragLastPos < 0 )
+    {
+        m_rowLabelWin->Refresh();   //Do this to "unpress" the row
+        return;
+    }
+
+    int newPos;
+    if ( m_moveToRow == -1 )
+        newPos = m_numRows - 1;
+    else
+    {
+        newPos = m_moveToRow;
+        if ( newPos > m_dragRowOrCol )
+            newPos--;
+    }
+
+    if ( m_dragRowOrCol == newPos || HasRowSpanningCells( newPos ) )
+        m_rowLabelWin->Refresh();
+    else
+        DoMoveRow( m_dragRowOrCol, newPos );
+}
+
 void wxGrid::DoEndDragMoveCol()
 {
     //The user clicked on the column but didn't actually drag
@@ -6697,60 +6967,108 @@
         newPos = m_numCols - 1;
     else
     {
-        newPos = GetColPos( m_moveToCol );
-        if ( newPos > GetColPos( m_dragRowOrCol ) )
+        newPos = m_moveToCol;
+        if ( newPos > m_dragRowOrCol )
             newPos--;
     }
 
-    SetColPos( m_dragRowOrCol, newPos );
+    if ( m_dragRowOrCol == newPos || HasColSpanningCells( newPos ) )
+        m_colLabelWin->Refresh();
+    else
+        DoMoveCol( m_dragRowOrCol, newPos );
 }
 
-void wxGrid::SetColPos( int colID, int newPos )
+bool wxGrid::HasRowSpanningCells(int row)
 {
-    if ( m_colAt.IsEmpty() )
+    for (int col = 0; col < m_numCols; col++)
     {
-        m_colAt.Alloc( m_numCols );
+        int cell_rows, cell_cols;
+        GetCellSize(row, col, &cell_rows, &cell_cols);
+        if ( !( cell_rows == 0 || cell_rows == 1 ) ) return true;
+    }
+    
+    return false;
+}
 
-        int i;
-        for ( i = 0; i < m_numCols; i++ )
-        {
-            m_colAt.Add( i );
-        }
+bool wxGrid::HasColSpanningCells(int col)
+{
+    for (int row = 0; row < m_numRows; row++)
+    {
+        int cell_rows, cell_cols;
+        GetCellSize(row, col, &cell_rows, &cell_cols);
+        if ( !( cell_cols == 0 || cell_cols == 1 ) ) return true;
     }
+    
+    return false;
+}
 
-    int oldPos = GetColPos( colID );
+void wxGrid::DoMoveRow( int oldPos, int newPos )
+{
+    if (IsCellEditControlShown())
+    {
+        HideCellEditControl();
+        SaveEditControlValue();
+    }
+        
+    m_table->MoveRows(oldPos, newPos, 1);
 
-    //Reshuffle the m_colAt array
-    if ( newPos > oldPos )
+    wxGridCellAttrProvider * attrProvider = m_table->GetAttrProvider();
+    if (attrProvider)
     {
-        int i;
-        for ( i = oldPos; i < newPos; i++ )
-        {
-            m_colAt[i] = m_colAt[i+1];
-        }
+        ClearAttrCache();
+        attrProvider->MoveAttrRows( oldPos, newPos, 1 );
     }
-    else
+
+    //Recalculate the row bottoms
+    if ( !m_rowHeights.IsEmpty() )
     {
-        int i;
-        for ( i = oldPos; i > newPos; i-- )
+        int rowHeight = m_rowHeights[oldPos];
+        m_rowHeights.RemoveAt( oldPos );
+        m_rowHeights.Insert( rowHeight, newPos );
+        
+        int rowBottom = 0;
+        int rowPos;
+        for ( rowPos = 0; rowPos < m_numRows; rowPos++ )
         {
-            m_colAt[i] = m_colAt[i-1];
+            rowBottom += m_rowHeights[rowPos];
+            m_rowBottoms[rowPos] = rowBottom;
         }
     }
 
-    m_colAt[newPos] = colID;
+    m_rowLabelWin->Refresh();
+    m_gridWin->Refresh();
+}
+
+void wxGrid::DoMoveCol( int oldPos, int newPos )
+{
+    if (IsCellEditControlShown())
+    {
+        HideCellEditControl();
+        SaveEditControlValue();
+    }
+        
+    m_table->MoveCols(oldPos, newPos, 1);
 
+    wxGridCellAttrProvider * attrProvider = m_table->GetAttrProvider();
+    if (attrProvider)
+    {
+        ClearAttrCache();
+        attrProvider->MoveAttrCols( oldPos, newPos, 1 );
+    }
+    
     //Recalculate the column rights
     if ( !m_colWidths.IsEmpty() )
     {
+        int colWidth = m_colWidths[oldPos];
+        m_colWidths.RemoveAt( oldPos );
+        m_colWidths.Insert( colWidth, newPos );
+        
         int colRight = 0;
         int colPos;
         for ( colPos = 0; colPos < m_numCols; colPos++ )
         {
-            int colID = GetColAt( colPos );
-
-            colRight += m_colWidths[colID];
-            m_colRights[colID] = colRight;
+            colRight += m_colWidths[colPos];
+            m_colRights[colPos] = colRight;
         }
     }
 
@@ -6758,7 +7076,31 @@
     m_gridWin->Refresh();
 }
 
+void wxGrid::EnableDragRowMove( bool enable )
+{
+    if ( m_canDragRowMove == enable )
+        return;
 
+    m_canDragRowMove = enable;
+
+    if ( !m_canDragRowMove )
+    {
+        //Recalculate the row bottoms
+        if ( !m_rowHeights.IsEmpty() )
+        {
+            int rowBottom = 0;
+            int rowPos;
+            for ( rowPos = 0; rowPos < m_numRows; rowPos++ )
+            {
+                rowBottom += m_rowHeights[rowPos];
+                m_rowBottoms[rowPos] = rowBottom;
+            }
+        }
+
+        m_rowLabelWin->Refresh();
+        m_gridWin->Refresh();
+    }
+}
 
 void wxGrid::EnableDragColMove( bool enable )
 {
@@ -6769,8 +7111,6 @@
 
     if ( !m_canDragColMove )
     {
-        m_colAt.Clear();
-
         //Recalculate the column rights
         if ( !m_colWidths.IsEmpty() )
         {
@@ -7700,7 +8040,7 @@
   int right, bottom;
   CalcUnscrolledPosition( cw, ch, &right, &bottom );
 
-  int rightCol = m_numCols > 0 ? GetColRight(GetColAt( m_numCols - 1 )) : 0;
+  int rightCol = m_numCols > 0 ? GetColRight(m_numCols - 1) : 0;
   int bottomRow = m_numRows > 0 ? GetRowBottom(m_numRows - 1) : 0;
 
   if ( right > rightCol || bottom > bottomRow )
@@ -7916,7 +8256,7 @@
         if ( !m_numCols )
             return;
 
-        const int lastColRight = GetColRight(GetColAt(m_numCols - 1));
+        const int lastColRight = GetColRight(m_numCols - 1);
         if ( right > lastColRight )
             right = lastColRight;
     }
@@ -7932,9 +8272,9 @@
     }
 
     // no gridlines inside multicells, clip them out
-    int leftCol = GetColPos( internalXToCol(left) );
+    int leftCol = internalXToCol(left);
     int topRow = internalYToRow(top);
-    int rightCol = GetColPos( internalXToCol(right) );
+    int rightCol = internalXToCol(right);
     int bottomRow = internalYToRow(bottom);
 
     wxRegion clippedcells(0, 0, cw, ch);
@@ -7944,10 +8284,8 @@
 
     for ( int j = topRow; j <= bottomRow; j++ )
     {
-        for ( int colPos = leftCol; colPos <= rightCol; colPos++ )
+        for ( int i = leftCol; i <= rightCol; i++ )
         {
-            int i = GetColAt( colPos );
-
             GetCellSize( j, i, &cell_rows, &cell_cols );
             if ((cell_rows > 1) || (cell_cols > 1))
             {
@@ -7983,10 +8321,8 @@
     }
 
     // vertical grid lines
-    for ( int colPos = leftCol; colPos < m_numCols; colPos++ )
+    for ( int i = leftCol; i < m_numCols; i++ )
     {
-        int i = GetColAt( colPos );
-
         int colRight = GetColRight(i);
 #ifdef __WXGTK__
         if (GetLayoutDirection() != wxLayout_RightToLeft)
@@ -8669,7 +9005,7 @@
     const int numLines = oper.GetNumberOfLines(this);
 
     if ( coord < 0 )
-        return clipToMinMax && numLines > 0 ? oper.GetLineAt(this, 0) : -1;
+        return clipToMinMax && numLines > 0 ? 0 : -1;
 
     const int defaultLineSize = oper.GetDefaultLineSize(this);
     wxCHECK_MSG( defaultLineSize, -1, "can't have 0 default line size" );
@@ -8696,7 +9032,7 @@
     }
     else
     {
-        if ( coord >= lineEnds[oper.GetLineAt(this, maxPos)])
+        if ( coord >= lineEnds[maxPos])
         {
             minPos = maxPos;
             const int minDist = oper.GetMinimalAcceptableLineSize(this);
@@ -8711,37 +9047,35 @@
     }
 
     // check if the position is beyond the last column
-    const int lineAtMaxPos = oper.GetLineAt(this, maxPos);
-    if ( coord >= lineEnds[lineAtMaxPos] )
-        return clipToMinMax ? lineAtMaxPos : -1;
+    if ( coord >= lineEnds[maxPos] )
+        return clipToMinMax ? maxPos : -1;
 
     // or before the first one
-    const int lineAt0 = oper.GetLineAt(this, 0);
-    if ( coord < lineEnds[lineAt0] )
-        return lineAt0;
+    if ( coord < lineEnds[0] )
+        return 0;
 
 
     // finally do perform the binary search
     while ( minPos < maxPos )
     {
-        wxCHECK_MSG( lineEnds[oper.GetLineAt(this, minPos)] <= coord &&
-                        coord < lineEnds[oper.GetLineAt(this, maxPos)],
+        wxCHECK_MSG( lineEnds[minPos] <= coord &&
+                        coord < lineEnds[maxPos],
                      -1,
                      "wxGrid: internal error in PosToLine()" );
 
-        if ( coord >= lineEnds[oper.GetLineAt(this, maxPos - 1)] )
-            return oper.GetLineAt(this, maxPos);
+        if ( coord >= lineEnds[maxPos - 1] )
+            return maxPos;
         else
             maxPos--;
 
         const int median = minPos + (maxPos - minPos + 1) / 2;
-        if ( coord < lineEnds[oper.GetLineAt(this, median)] )
+        if ( coord < lineEnds[median] )
             maxPos = median;
         else
             minPos = median;
     }
 
-    return oper.GetLineAt(this, maxPos);
+    return maxPos;
 }
 
 int wxGrid::YToRow(int y, bool clipToMinMax) const
@@ -10241,9 +10575,9 @@
     int diff = w - m_colWidths[col];
     m_colWidths[col] = w;
 
-    for ( int colPos = GetColPos(col); colPos < m_numCols; colPos++ )
+    for ( int colPos = col; colPos < m_numCols; colPos++ )
     {
-        m_colRights[GetColAt(colPos)] += diff;
+        m_colRights[colPos] += diff;
     }
 
     if ( !GetBatchCount() )

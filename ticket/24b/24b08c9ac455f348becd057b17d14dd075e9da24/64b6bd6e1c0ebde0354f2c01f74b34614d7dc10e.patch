From 9f54fe6605db809101bd06d515b11f3ec1921d82 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Gunter=20K=C3=B6nigsmann?= <gunter@peterpall.de>
Date: Sun, 9 Jun 2019 11:27:51 +0200
Subject: [PATCH] The newest version of the grid move row patch.

---
 include/wx/generic/grid.h         |  29 ++-
 include/wx/generic/private/grid.h |   2 +
 interface/wx/grid.h               |  52 ++++-
 samples/grid/griddemo.cpp         |   9 +
 samples/grid/griddemo.h           |   2 +
 src/generic/grid.cpp              | 377 ++++++++++++++++++++++++++++--
 6 files changed, 449 insertions(+), 22 deletions(-)

diff --git a/include/wx/generic/grid.h b/include/wx/generic/grid.h
index 2e1fcb89a6..999b7f4026 100644
--- a/include/wx/generic/grid.h
+++ b/include/wx/generic/grid.h
@@ -593,6 +593,7 @@ public:
     void UpdateAttrRows( size_t pos, int numRows );
     void UpdateAttrCols( size_t pos, int numCols );
 
+    void MoveAttrRows(size_t oldPos, size_t newPos, int numRows);
 
     // get renderers for the given row/column header label and the corner
     // window: unlike cell renderers, these objects are not reference counted
@@ -741,6 +742,8 @@ public:
     virtual bool AppendCols( size_t numCols = 1 );
     virtual bool DeleteCols( size_t pos = 0, size_t numCols = 1 );
 
+    virtual bool MoveRows(size_t oldPos, size_t newPos, size_t numRows);
+
     virtual wxString GetRowLabelValue( int row );
     virtual wxString GetColLabelValue( int col );
     virtual wxString GetCornerLabelValue() const;
@@ -868,6 +871,8 @@ public:
     bool AppendCols( size_t numCols = 1 ) wxOVERRIDE;
     bool DeleteCols( size_t pos = 0, size_t numCols = 1 ) wxOVERRIDE;
 
+    bool MoveRows(size_t oldPos, size_t newPos, size_t numRows);
+
     void SetRowLabelValue( int row, const wxString& ) wxOVERRIDE;
     void SetColLabelValue( int col, const wxString& ) wxOVERRIDE;
     void SetCornerLabelValue( const wxString& ) wxOVERRIDE;
@@ -1294,6 +1299,11 @@ public:
     void     DisableDragColMove() { EnableDragColMove( false ); }
     bool     CanDragColMove() const { return m_canDragColMove; }
 
+    // interactive row reordering (disabled by default)
+    void     EnableDragRowMove(bool enable = true);
+    void     DisableDragRowMove() { EnableDragRowMove(false); }
+    bool     CanDragRowMove() const { return m_canDragRowMove; }
+
     // interactive resizing of grid cells (enabled by default)
     void     EnableDragGridSize(bool enable = true);
     void     DisableDragGridSize() { EnableDragGridSize(false); }
@@ -1427,7 +1437,7 @@ public:
     void SetRowSizes(const wxGridSizesInfo& sizeInfo);
 
 
-    // ------- columns (only, for now) reordering
+    // ------- columns reordering
 
     // columns index <-> positions mapping: by default, the position of the
     // column is the same as its index, but the columns can also be reordered
@@ -1471,6 +1481,8 @@ public:
     // reset the columns positions to the default order
     void ResetColPos();
 
+    // ------- row reordering
+    void SetRowPos(int idx, int pos);
 
     // automatically size the column or row to fit to its contents, if
     // setAsMin is true, this optimal width will also be set as minimal width
@@ -2059,6 +2071,7 @@ protected:
         WXGRID_CURSOR_RESIZE_COL,
         WXGRID_CURSOR_SELECT_ROW,
         WXGRID_CURSOR_SELECT_COL,
+        WXGRID_CURSOR_MOVE_ROW,
         WXGRID_CURSOR_MOVE_COL
     };
 
@@ -2090,6 +2103,7 @@ protected:
 
     bool    m_canDragRowSize;
     bool    m_canDragColSize;
+    bool    m_canDragRowMove;
     bool    m_canDragColMove;
     bool    m_canDragGridSize;
     bool    m_canDragCell;
@@ -2248,6 +2262,13 @@ private:
     // bounds (in which case first/last column is returned)
     int XToPos(int x) const;
 
+    // return the position (not index) of the row at the given logical pixel
+    // position
+    //
+    // this always returns a valid position, even if the coordinate is out of
+    // bounds (in which case first/last row is returned)
+    int YToPos(int y) const;
+
 
     // event handlers and their helpers
     // --------------------------------
@@ -2294,10 +2315,12 @@ private:
     void DoStartResizeCol(int col);
     void DoUpdateResizeCol(int x);
     void DoUpdateResizeColWidth(int w);
+    void DoStartMoveRow(int row);
     void DoStartMoveCol(int col);
 
     void DoEndDragResizeRow(const wxMouseEvent& event);
     void DoEndDragResizeCol(const wxMouseEvent& event);
+    void DoEndMoveRow(int pos);
     void DoEndMoveCol(int pos);
 
     // process a TAB keypress
@@ -2702,6 +2725,8 @@ typedef void (wxEvtHandler::*wxGridEditorCreatedEventFunction)(wxGridEditorCreat
 #define EVT_GRID_CMD_ROW_SIZE(id, fn)            wx__DECLARE_GRIDSIZEEVT(ROW_SIZE, id, fn)
 #define EVT_GRID_CMD_COL_SIZE(id, fn)            wx__DECLARE_GRIDSIZEEVT(COL_SIZE, id, fn)
 #define EVT_GRID_CMD_COL_AUTO_SIZE(id, fn)       wx__DECLARE_GRIDSIZEEVT(COL_AUTO_SIZE, id, fn)
+#define EVT_GRID_CMD_ROW_MOVING(id, fn)          wx__DECLARE_GRIDEVT(ROW_MOVING, id, fn)
+#define EVT_GRID_CMD_ROW_MOVED(id, fn)           wx__DECLARE_GRIDEVT(ROW_MOVED, id, fn)
 #define EVT_GRID_CMD_COL_MOVE(id, fn)            wx__DECLARE_GRIDEVT(COL_MOVE, id, fn)
 #define EVT_GRID_CMD_COL_SORT(id, fn)            wx__DECLARE_GRIDEVT(COL_SORT, id, fn)
 #define EVT_GRID_CMD_RANGE_SELECT(id, fn)        wx__DECLARE_GRIDRANGESELEVT(RANGE_SELECT, id, fn)
@@ -2727,6 +2752,8 @@ typedef void (wxEvtHandler::*wxGridEditorCreatedEventFunction)(wxGridEditorCreat
 #define EVT_GRID_ROW_SIZE(fn)            EVT_GRID_CMD_ROW_SIZE(wxID_ANY, fn)
 #define EVT_GRID_COL_SIZE(fn)            EVT_GRID_CMD_COL_SIZE(wxID_ANY, fn)
 #define EVT_GRID_COL_AUTO_SIZE(fn)       EVT_GRID_CMD_COL_AUTO_SIZE(wxID_ANY, fn)
+#define EVT_GRID_ROW_MOVING(fn)          EVT_GRID_CMD_ROW_MOVING(wxID_ANY, fn)
+#define EVT_GRID_ROW_MOVED(fn)           EVT_GRID_CMD_ROW_MOVED(wxID_ANY, fn)
 #define EVT_GRID_COL_MOVE(fn)            EVT_GRID_CMD_COL_MOVE(wxID_ANY, fn)
 #define EVT_GRID_COL_SORT(fn)            EVT_GRID_CMD_COL_SORT(wxID_ANY, fn)
 #define EVT_GRID_RANGE_SELECT(fn)        EVT_GRID_CMD_RANGE_SELECT(wxID_ANY, fn)
diff --git a/include/wx/generic/private/grid.h b/include/wx/generic/private/grid.h
index 0fb81f91ac..f0ebf577d0 100644
--- a/include/wx/generic/private/grid.h
+++ b/include/wx/generic/private/grid.h
@@ -415,6 +415,7 @@ public:
     wxGridCellAttr *GetAttr(int row, int col) const;
     void UpdateAttrRows( size_t pos, int numRows );
     void UpdateAttrCols( size_t pos, int numCols );
+    void MoveAttrRows(size_t oldPos, size_t newPos, int numRows);
 
 private:
     // searches for the attr for given cell, returns wxNOT_FOUND if not found
@@ -434,6 +435,7 @@ public:
     void SetAttr(wxGridCellAttr *attr, int rowOrCol);
     wxGridCellAttr *GetAttr(int rowOrCol) const;
     void UpdateAttrRowsOrCols( size_t pos, int numRowsOrCols );
+    void MoveAttrRows(size_t oldPos, size_t newPos, int numRows);
 
 private:
     wxArrayInt m_rowsOrCols;
diff --git a/interface/wx/grid.h b/interface/wx/grid.h
index 27690c953a..a3e6a06f4a 100644
--- a/interface/wx/grid.h
+++ b/interface/wx/grid.h
@@ -1844,6 +1844,18 @@ public:
      */
     virtual bool DeleteCols(size_t pos = 0, size_t numCols = 1);
 
+    /**
+        Move rows in the table.
+
+        @param oldPos
+            The first row to move.
+        @param newPos
+            New position of the first moved row.
+        @param numRows
+            The number of rows to move.
+     */
+    virtual bool MoveRows(size_t oldPos, size_t newPos, size_t numRows);
+
     //@}
 
     /*!
@@ -3622,8 +3634,9 @@ public:
         EnableDragGridSize() they can also be resized by dragging the right or
         bottom edge of the grid cells.
 
-        Columns can also be moved to interactively change their order but this
-        needs to be explicitly enabled with EnableDragColMove().
+        Columns and rows can also be moved to interactively change their order
+        but this needs to be explicitly enabled with EnableDragColMove() or
+        EnableDragRowMove().
      */
     //@{
 
@@ -3639,6 +3652,13 @@ public:
     */
     bool CanDragColMove() const;
 
+    /**
+        Returns @true if rows can be moved by dragging with the mouse.
+
+        Rows can be moved by dragging on their labels.
+    */
+    bool CanDragRowMove() const;
+
     /**
         Returns @true if the given column can be resized by dragging with the
         mouse.
@@ -3701,6 +3721,13 @@ public:
     */
     void DisableDragColMove();
 
+    /**
+        Disables row moving by dragging with the mouse.
+
+        Equivalent to passing @false to EnableDragRowMove().
+    */
+    void DisableDragRowMove();
+
     /**
         Disables column sizing by dragging with the mouse.
 
@@ -3732,6 +3759,11 @@ public:
     */
     void EnableDragColMove(bool enable = true);
 
+    /**
+        Enables or disables row moving by dragging with the mouse.
+    */
+    void EnableDragRowMove(bool enable = true);
+
     /**
         Enables or disables column sizing by dragging with the mouse.
 
@@ -4987,6 +5019,22 @@ public:
         columns display order without affecting the use of the column indices
         otherwise.
         This event macro corresponds to @c wxEVT_GRID_COL_MOVE event type.
+    @event{EVT_GRID_ROW_MOVING(func)}
+        The user tries to change the order of the rows in the grid by
+        dragging the row specified by GetRow(). This event can be vetoed to
+        either prevent the user from reordering the row change completely
+        (but notice that if you don't want to allow it at all, you simply
+        shouldn't call wxGrid::EnableDragRowMove() in the first place), vetoed
+        but handled in some way in the handler, e.g. by really moving the
+        row to the new position at the associated table level, or allowed to
+        proceed in which case wxGrid::SetRowPos() is used to reorder the
+        rows display order without affecting the use of the row indices
+        otherwise.
+        This event macro corresponds to @c wxEVT_GRID_ROW_MOVING event type.
+    @event{EVT_GRID_ROW_MOVED(func)}
+        The order of the rows in the grid has been modified by dragging the
+        row to a new position specified by GetRow().
+        This event macro corresponds to @c wxEVT_GRID_ROW_MOVED event type.
     @event{EVT_GRID_COL_SORT(func)}
         This event is generated when a column is clicked by the user and its
         name is explained by the fact that the custom reaction to a click on a
diff --git a/samples/grid/griddemo.cpp b/samples/grid/griddemo.cpp
index aaef518711..35c979f61d 100644
--- a/samples/grid/griddemo.cpp
+++ b/samples/grid/griddemo.cpp
@@ -153,6 +153,7 @@ wxBEGIN_EVENT_TABLE( GridFrame, wxFrame )
     EVT_MENU( ID_TOGGLEEDIT, GridFrame::ToggleEditing )
     EVT_MENU( ID_TOGGLEROWSIZING, GridFrame::ToggleRowSizing )
     EVT_MENU( ID_TOGGLECOLSIZING, GridFrame::ToggleColSizing )
+    EVT_MENU( ID_TOGGLEROWMOVING, GridFrame::ToggleRowMoving )
     EVT_MENU( ID_TOGGLECOLMOVING, GridFrame::ToggleColMoving )
     EVT_MENU( ID_TOGGLEGRIDSIZING, GridFrame::ToggleGridSizing )
     EVT_MENU( ID_TOGGLEGRIDDRAGCELL, GridFrame::ToggleGridDragCell )
@@ -294,6 +295,7 @@ GridFrame::GridFrame()
     viewMenu->AppendCheckItem(ID_TOGGLEEDIT,"&Editable");
     viewMenu->AppendCheckItem(ID_TOGGLEROWSIZING, "Ro&w drag-resize");
     viewMenu->AppendCheckItem(ID_TOGGLECOLSIZING, "C&ol drag-resize");
+    viewMenu->AppendCheckItem(ID_TOGGLEROWMOVING, "Row &drag-move");
     viewMenu->AppendCheckItem(ID_TOGGLECOLMOVING, "Col drag-&move");
     viewMenu->AppendCheckItem(ID_TOGGLEGRIDSIZING, "&Grid drag-resize");
     viewMenu->AppendCheckItem(ID_TOGGLEGRIDDRAGCELL, "&Grid drag-cell");
@@ -627,6 +629,7 @@ void GridFrame::SetDefaults()
     GetMenuBar()->Check( ID_TOGGLEEDIT, true );
     GetMenuBar()->Check( ID_TOGGLEROWSIZING, true );
     GetMenuBar()->Check( ID_TOGGLECOLSIZING, true );
+    GetMenuBar()->Check( ID_TOGGLEROWMOVING, false );
     GetMenuBar()->Check( ID_TOGGLECOLMOVING, false );
     GetMenuBar()->Check( ID_TOGGLEGRIDSIZING, true );
     GetMenuBar()->Check( ID_TOGGLEGRIDDRAGCELL, false );
@@ -681,6 +684,12 @@ void GridFrame::ToggleColSizing( wxCommandEvent& WXUNUSED(ev) )
         GetMenuBar()->IsChecked( ID_TOGGLECOLSIZING ) );
 }
 
+void GridFrame::ToggleRowMoving( wxCommandEvent& WXUNUSED(ev) )
+{
+    grid->EnableDragRowMove(
+        GetMenuBar()->IsChecked( ID_TOGGLEROWMOVING ) );
+}
+
 void GridFrame::ToggleColMoving( wxCommandEvent& WXUNUSED(ev) )
 {
     grid->EnableDragColMove(
diff --git a/samples/grid/griddemo.h b/samples/grid/griddemo.h
index 4e89135a42..afccb132d1 100644
--- a/samples/grid/griddemo.h
+++ b/samples/grid/griddemo.h
@@ -35,6 +35,7 @@ class GridFrame : public wxFrame
     void ToggleEditing( wxCommandEvent& );
     void ToggleRowSizing( wxCommandEvent& );
     void ToggleColSizing( wxCommandEvent& );
+    void ToggleRowMoving( wxCommandEvent& );
     void ToggleColMoving( wxCommandEvent& );
     void ToggleGridSizing( wxCommandEvent& );
     void ToggleGridDragCell ( wxCommandEvent& );
@@ -136,6 +137,7 @@ public:
         ID_TOGGLEEDIT,
         ID_TOGGLEROWSIZING,
         ID_TOGGLECOLSIZING,
+        ID_TOGGLEROWMOVING,
         ID_TOGGLECOLMOVING,
         ID_TOGGLEGRIDSIZING,
         ID_TOGGLEGRIDDRAGCELL,
diff --git a/src/generic/grid.cpp b/src/generic/grid.cpp
index f79ad3035a..d92bf83722 100644
--- a/src/generic/grid.cpp
+++ b/src/generic/grid.cpp
@@ -134,6 +134,8 @@ wxDEFINE_EVENT( wxEVT_GRID_LABEL_RIGHT_DCLICK, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_ROW_SIZE, wxGridSizeEvent );
 wxDEFINE_EVENT( wxEVT_GRID_COL_SIZE, wxGridSizeEvent );
 wxDEFINE_EVENT( wxEVT_GRID_COL_AUTO_SIZE, wxGridSizeEvent );
+wxDEFINE_EVENT( wxEVT_GRID_ROW_MOVING, wxGridEvent );
+wxDEFINE_EVENT( wxEVT_GRID_ROW_MOVED, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_COL_MOVE, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_COL_SORT, wxGridEvent );
 wxDEFINE_EVENT( wxEVT_GRID_RANGE_SELECT, wxGridRangeSelectEvent );
@@ -711,6 +713,44 @@ void wxGridCellAttrData::UpdateAttrCols( size_t pos, int numCols )
     }
 }
 
+void wxGridCellAttrData::MoveAttrRows(size_t oldPos, size_t newPos, int numRows)
+{
+    int first, last, diff1, diff2;
+
+    int lastOld = oldPos + numRows - 1;
+
+    if (oldPos < newPos)
+    {
+        first = oldPos;
+        last = newPos;
+        diff1 = newPos - lastOld;
+        diff2 = -numRows;
+    }
+    else
+    {
+        first = newPos;
+        last = lastOld;
+        diff1 = (int)newPos - oldPos;
+        diff2 = numRows;
+    }
+
+    size_t count = m_attrs.GetCount();
+    for (size_t n = 0; n < count; n++)
+    {
+        wxGridCellCoords& coords = m_attrs[n].coords;
+        int rowOrCol = coords.GetRow();
+
+        if (rowOrCol < first || rowOrCol > last)
+            continue;
+        if (rowOrCol >= (int)oldPos && rowOrCol <= lastOld)
+            rowOrCol += diff1;
+        else
+            rowOrCol += diff2;
+
+        coords.SetRow(rowOrCol);
+    }
+}
+
 int wxGridCellAttrData::FindIndex(int row, int col) const
 {
     size_t count = m_attrs.GetCount();
@@ -821,6 +861,41 @@ void wxGridRowOrColAttrData::UpdateAttrRowsOrCols( size_t pos, int numRowsOrCols
     }
 }
 
+void wxGridRowOrColAttrData::MoveAttrRows(size_t oldPos, size_t newPos, int numRows)
+{
+    int first, last, diff1, diff2;
+
+    int lastOld = oldPos + numRows - 1;
+
+    if (oldPos < newPos)
+    {
+        first = oldPos;
+        last = newPos;
+        diff1 = newPos - lastOld;
+        diff2 = -numRows;
+    }
+    else
+    {
+        first = newPos;
+        last = lastOld;
+        diff1 = (int)newPos - oldPos;
+        diff2 = numRows;
+    }
+
+    size_t count = m_attrs.GetCount();
+    for (size_t n = 0; n < count; n++)
+    {
+        int& rowOrCol = m_rowsOrCols[n];
+
+        if (rowOrCol < first || rowOrCol > last)
+            continue;
+        if (rowOrCol >= (int)oldPos && rowOrCol <= lastOld)
+            rowOrCol += diff1;
+        else
+            rowOrCol += diff2;
+    }
+}
+
 // ----------------------------------------------------------------------------
 // wxGridCellAttrProvider
 // ----------------------------------------------------------------------------
@@ -976,6 +1051,16 @@ void wxGridCellAttrProvider::UpdateAttrCols( size_t pos, int numCols )
     }
 }
 
+void wxGridCellAttrProvider::MoveAttrRows(size_t oldPos, size_t newPos, int numRows)
+{
+    if (m_data)
+    {
+        m_data->m_cellAttrs.MoveAttrRows(oldPos, newPos, numRows);
+
+        m_data->m_rowAttrs.MoveAttrRows(oldPos, newPos, numRows);
+    }
+}
+
 const wxGridColumnHeaderRenderer&
 wxGridCellAttrProvider::GetColumnHeaderRenderer(int WXUNUSED(col))
 {
@@ -1129,6 +1214,15 @@ bool wxGridTableBase::DeleteCols( size_t WXUNUSED(pos),
     return false;
 }
 
+bool wxGridTableBase::MoveRows( size_t WXUNUSED(oldPos),
+                                size_t WXUNUSED(newPos),
+                                size_t WXUNUSED(numRows) )
+{
+    wxFAIL_MSG(wxT("Called grid table class function MoveRows\nbut your derived table class does not override this function"));
+
+    return false;
+}
+
 wxString wxGridTableBase::GetRowLabelValue( int row )
 {
     wxString s;
@@ -1546,6 +1640,59 @@ bool wxGridStringTable::DeleteCols( size_t pos, size_t numCols )
     return true;
 }
 
+bool wxGridStringTable::MoveRows(size_t oldPos, size_t newPos, size_t numRows)
+{
+    size_t curNumRows = m_data.GetCount();
+
+    if (oldPos >= curNumRows || newPos >= curNumRows || (oldPos < newPos && oldPos + numRows > newPos))
+    {
+        wxFAIL_MSG( wxString::Format
+                    (
+                        wxT("Called wxGridStringTable::MoveRows(oldPos=%lu, newPos=%lu, N=%lu)\nPos value is invalid for present table with %lu rows"),
+                        (unsigned long)oldPos,
+                        (unsigned long)newPos,
+                        (unsigned long)numRows,
+                        (unsigned long)curNumRows
+                    ) );
+
+        return false;
+    }
+
+    if (numRows > curNumRows - oldPos)
+    {
+        numRows = curNumRows - oldPos;
+    }
+   
+    int lastLabelPos = oldPos < newPos ? newPos : oldPos + numRows - 1;
+    SetRowLabelValue(lastLabelPos, GetRowLabelValue(lastLabelPos));
+
+    for (size_t i = 0; i < numRows; i++)
+    {
+        wxArrayString* rowData = m_data.Detach(oldPos);
+        m_data.Insert(rowData, newPos);
+
+        /*
+        wxString label = m_rowLabels[oldPos];
+        m_rowLabels.RemoveAt(oldPos);
+        m_rowLabels.Insert(label, newPos);
+        */
+    }
+
+/*
+    if (GetView())
+    {
+        wxGridTableMessage msg(this,
+                               wxGRIDTABLE_NOTIFY_ROWS_MOVED,
+                               oldPos,
+                               newPos,
+                               numRows);
+
+        GetView()->ProcessTableMessage(msg);
+    }
+*/
+    return true;
+}
+
 wxString wxGridStringTable::GetRowLabelValue( int row )
 {
     if ( row > (int)(m_rowLabels.GetCount()) - 1 )
@@ -2473,6 +2620,7 @@ void wxGrid::Init()
     m_cellHighlightPenWidth = 2;
     m_cellHighlightROPenWidth = 1;
 
+    m_canDragRowMove = false;
     m_canDragColMove = false;
 
     m_cursorMode  = WXGRID_CURSOR_SELECT_CELL;
@@ -3267,8 +3415,14 @@ void wxGrid::ProcessRowLabelMouseEvent( wxMouseEvent& event )
     if ( event.Dragging() )
     {
         if (!m_isDragging)
+        {
             m_isDragging = true;
 
+            row = YToRow(y);
+            if (m_cursorMode == WXGRID_CURSOR_MOVE_ROW && row != -1)
+                DoStartMoveRow(row);
+        }
+
         if ( event.LeftIsDown() )
         {
             switch ( m_cursorMode )
@@ -3304,6 +3458,59 @@ void wxGrid::ProcessRowLabelMouseEvent( wxMouseEvent& event )
                 }
                 break;
 
+                case WXGRID_CURSOR_MOVE_ROW:
+                {
+                    int rowNew = YToRow(y);
+
+                    // determine the position of the drop marker
+                    int markerY;
+                    if (y >= GetRowTop(rowNew) + (GetRowHeight(rowNew) / 2))
+                        markerY = GetRowBottom(rowNew);
+                    else
+                        markerY = GetRowTop(rowNew);
+
+                    if (markerY != m_dragLastPos)
+                    {
+                        wxClientDC dc(m_rowLabelWin);
+                        DoPrepareDC(dc);
+
+                        int cw, ch;
+                        m_rowLabelWin->GetClientSize(&cw, &ch);
+
+                        markerY++;
+
+                        //Clean up the last indicator
+                        if (m_dragLastPos >= 0)
+                        {
+                            wxPen pen(m_rowLabelWin->GetBackgroundColour(), 2);
+                            dc.SetPen(pen);
+                            dc.DrawLine(0, m_dragLastPos + 1, cw, m_dragLastPos + 1);
+                            dc.SetPen(wxNullPen);
+
+                            if (YToRow(m_dragLastPos) != -1)
+                                DrawRowLabel(dc, YToRow(m_dragLastPos));
+                        }
+
+                        const wxColour *color;
+                        //Moving to the same place? Don't draw a marker
+                        if (rowNew == m_dragRowOrCol)
+                            color = wxLIGHT_GREY;
+                        else
+                            color = wxBLUE;
+
+                        //Draw the marker
+                        wxPen pen(*color, 2);
+                        dc.SetPen(pen);
+
+                        dc.DrawLine(0, markerY, cw, markerY);
+
+                        dc.SetPen(wxNullPen);
+
+                        m_dragLastPos = markerY - 1;
+                    }
+                }
+                break;
+
                 // default label to suppress warnings about "enumeration value
                 // 'xxx' not handled in switch
                 default:
@@ -3341,26 +3548,40 @@ void wxGrid::ProcessRowLabelMouseEvent( wxMouseEvent& event )
             if ( row >= 0 &&
                  !SendEvent( wxEVT_GRID_LABEL_LEFT_CLICK, row, -1, event ) )
             {
-                if ( !event.ShiftDown() && !event.CmdDown() )
-                    ClearSelection();
-                if ( m_selection )
+                if (m_canDragRowMove)
                 {
-                    if ( event.ShiftDown() )
-                    {
-                        m_selection->SelectBlock
-                                     (
-                                        m_currentCellCoords.GetRow(), 0,
-                                        row, GetNumberCols() - 1,
-                                        event
-                                     );
-                    }
-                    else
-                    {
-                        m_selection->SelectRow(row, event);
-                    }
+                    //Show button as pressed
+                    wxClientDC dc(m_rowLabelWin);
+                    int rowTop = GetRowTop(row);
+                    int rowBottom = GetRowBottom(row);
+                    dc.SetPen(wxPen(m_rowLabelWin->GetBackgroundColour(), 1));
+                    dc.DrawLine(1, rowTop, m_rowLabelWidth-1, rowTop);
+                    dc.DrawLine(1, rowTop, 1, rowBottom);
+                    ChangeCursorMode(WXGRID_CURSOR_MOVE_ROW, m_rowLabelWin);
                 }
+                else
+                {
+                    if ( !event.ShiftDown() && !event.CmdDown() )
+                        ClearSelection();
+                    if ( m_selection )
+                    {
+                        if ( event.ShiftDown() )
+                        {
+                            m_selection->SelectBlock
+                                         (
+                                            m_currentCellCoords.GetRow(), 0,
+                                            row, GetNumberCols() - 1,
+                                            event
+                                         );
+                        }
+                        else
+                        {
+                            m_selection->SelectRow(row, event);
+                        }
+                    }
 
-                ChangeCursorMode(WXGRID_CURSOR_SELECT_ROW, m_rowLabelWin);
+                    ChangeCursorMode(WXGRID_CURSOR_SELECT_ROW, m_rowLabelWin);
+                }
             }
         }
     }
@@ -3397,8 +3618,52 @@ void wxGrid::ProcessRowLabelMouseEvent( wxMouseEvent& event )
     //
     else if ( event.LeftUp() )
     {
-        if ( m_cursorMode == WXGRID_CURSOR_RESIZE_ROW )
-            DoEndDragResizeRow(event);
+        switch (m_cursorMode)
+        {
+            case WXGRID_CURSOR_RESIZE_ROW:
+                DoEndDragResizeRow(event);
+                break;
+
+            case WXGRID_CURSOR_MOVE_ROW:
+                row = YToRow(y);
+                if (m_dragLastPos == -1 || row == m_dragRowOrCol)
+                {
+                    // the row didn't actually move anywhere
+                    m_rowLabelWin->Refresh();   // "unpress" the row
+                }
+                else
+                {
+                    // get the position of the row we're over
+                    int pos = YToPos(y);
+
+                    // insert the row being dragged either before or after
+                    // it, depending on where exactly it was dropped, so
+                    // find the index of the row we're over: notice
+                    // that the existing "row" variable may be invalid but
+                    // we need a valid one here
+                    const int rowValid = YToRow(y);
+
+                    // and check if we're on the top part of the column
+                    const int middle = GetRowTop(rowValid) +
+                                       GetRowHeight(rowValid)/2;
+                    bool onTopPart = (y <= middle);
+
+                    // adjust for the row being dragged itself
+                    if (pos < m_dragRowOrCol)
+                        pos++;
+
+                    // and if it's on the near part of the target column,
+                    // insert it before it, not after
+                    if (onTopPart)
+                        pos--;
+
+                    DoEndMoveRow(pos);
+                }
+                break;
+	default:
+	  {
+	  }
+        }
 
         ChangeCursorMode(WXGRID_CURSOR_SELECT_CELL, m_rowLabelWin);
         m_dragLastPos = -1;
@@ -3780,6 +4045,9 @@ void wxGrid::ProcessColLabelMouseEvent( wxMouseEvent& event )
                 if ( col != -1 )
                     DoColHeaderClick(col);
                 break;
+	    case WXGRID_CURSOR_MOVE_ROW:
+	      {
+	      }
         }
 
         ChangeCursorMode(WXGRID_CURSOR_SELECT_CELL, GetColLabelWindow());
@@ -3940,6 +4208,7 @@ void wxGrid::ChangeCursorMode(CursorMode mode,
             win->SetCursor( m_colResizeCursor );
             break;
 
+        case WXGRID_CURSOR_MOVE_ROW:
         case WXGRID_CURSOR_MOVE_COL:
             win->SetCursor( wxCursor(wxCURSOR_HAND) );
             break;
@@ -4474,11 +4743,33 @@ void wxGrid::DoEndDragResizeCol(const wxMouseEvent& event)
         SendGridSizeEvent(wxEVT_GRID_COL_SIZE, -1, m_dragRowOrCol, event);
 }
 
+void wxGrid::DoStartMoveRow(int row)
+{
+    m_dragRowOrCol = row;
+}
+
 void wxGrid::DoStartMoveCol(int col)
 {
     m_dragRowOrCol = col;
 }
 
+void wxGrid::DoEndMoveRow(int pos)
+{
+    wxASSERT_MSG(m_dragRowOrCol != -1, "no matching DoStartMoveRow?");
+
+    if (SendEvent(wxEVT_GRID_ROW_MOVING, m_dragRowOrCol, -1) != -1)
+    {
+        SetRowPos(m_dragRowOrCol, pos);
+        SendEvent(wxEVT_GRID_ROW_MOVED, pos, -1);
+    }
+    else // vetoed by user
+    {
+        m_rowLabelWin->Refresh(); // "unpress" the row
+    }
+
+    m_dragRowOrCol = -1;
+}
+
 void wxGrid::DoEndMoveCol(int pos)
 {
     wxASSERT_MSG( m_dragRowOrCol != -1, "no matching DoStartMoveCol?" );
@@ -4533,6 +4824,44 @@ void wxGrid::SetColumnsOrder(const wxArrayInt& order)
     RefreshAfterColPosChange();
 }
 
+void wxGrid::SetRowPos(int idx, int pos)
+{
+    if (idx == pos)
+        return;
+
+    if (IsCellEditControlShown())
+    {
+        HideCellEditControl();
+        SaveEditControlValue();
+    }
+
+    m_table->MoveRows(idx, pos, 1);
+
+    wxGridCellAttrProvider* attrProvider = m_table->GetAttrProvider();
+    if (attrProvider)
+    {
+        ClearAttrCache();
+        attrProvider->MoveAttrRows(idx, pos, 1);
+    }
+
+    if (!m_rowHeights.IsEmpty())
+    {
+        int rowHeight = m_rowHeights[idx];
+        m_rowHeights.RemoveAt(pos);
+        m_rowHeights.Insert(rowHeight, idx);
+
+        int rowBottom = 0;
+        for (int rowPos = 0; rowPos < m_numRows; rowPos++)
+        {
+            rowBottom += m_rowHeights[rowPos];
+            m_rowBottoms[rowPos] = rowBottom;
+        }
+    }
+
+    m_rowLabelWin->Refresh();
+    m_gridWin->Refresh();
+}
+
 void wxGrid::SetColPos(int idx, int pos)
 {
     // we're going to need m_colAt now, initialize it if needed
@@ -4555,6 +4884,11 @@ void wxGrid::ResetColPos()
     RefreshAfterColPosChange();
 }
 
+void wxGrid::EnableDragRowMove(bool enable)
+{
+    m_canDragRowMove = enable;
+}
+
 void wxGrid::EnableDragColMove( bool enable )
 {
     if ( m_canDragColMove == enable )
@@ -6644,6 +6978,11 @@ int wxGrid::YToRow(int y, bool clipToMinMax) const
     return PosToLine(y, clipToMinMax, wxGridRowOperations());
 }
 
+int wxGrid::YToPos(int y) const
+{
+    return PosToLinePos(y, true /* clip */, wxGridRowOperations());
+}
+
 int wxGrid::XToCol(int x, bool clipToMinMax) const
 {
     return PosToLine(x, clipToMinMax, wxGridColumnOperations());
-- 
2.20.1


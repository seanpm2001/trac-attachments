Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 66706)
+++ include/wx/image.h	(working copy)
@@ -62,12 +62,15 @@
     wxIMAGE_QUALITY_NEAREST = 0,
     wxIMAGE_QUALITY_BILINEAR = 1,
     wxIMAGE_QUALITY_BICUBIC = 2,
+    wxIMAGE_QUALITY_BOX_AVERAGE = 3,
 
     // default quality is low (but fast)
     wxIMAGE_QUALITY_NORMAL = wxIMAGE_QUALITY_NEAREST,
 
     // highest (but best) quality
-    wxIMAGE_QUALITY_HIGH = wxIMAGE_QUALITY_BICUBIC
+    wxIMAGE_QUALITY_HIGH = wxIMAGE_QUALITY_BICUBIC,
+
+    wxIMAGE_QUALITY_DECIDE = 0x7f
 };
 
 // alpha channel values: fully transparent, default threshold separating
Index: interface/wx/image.h
===================================================================
--- interface/wx/image.h	(revision 66706)
+++ interface/wx/image.h	(working copy)
@@ -39,11 +39,20 @@
     /// Highest quality but slowest execution time.
     wxIMAGE_QUALITY_BICUBIC,
 
+    /// Useful for shrinking images by a certain amount.
+    wxIMAGE_QUALITY_BOX_AVERAGE,
+
     /// Default image resizing algorithm used by wxImage::Scale().
     wxIMAGE_QUALITY_NORMAL,
 
     /// Best image resizing algorithm, currently same as wxIMAGE_QUALITY_BICUBIC.
-    wxIMAGE_QUALITY_HIGH
+    wxIMAGE_QUALITY_HIGH,
+
+    /**
+    Let wxImage::Scale() decide the resize algorithm to use. This is currently
+    either wxIMAGE_QUALITY_BICUBIC or wxIMAGE_QUALITY_BOX_AVERAGE.
+    */
+    wxIMAGE_QUALITY_DECIDE
 };
 
 /**
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 66706)
+++ src/common/image.cpp	(working copy)
@@ -442,23 +442,16 @@
     if ( old_width == width && old_height == height )
         return *this;
 
-    // resample the image using either the nearest neighbourhood, bilinear or
-    // bicubic method as specified
+    if (quality == wxIMAGE_QUALITY_DECIDE)
+    {
+        quality = (width < old_width/2 && height < old_height/2)
+            ? wxIMAGE_QUALITY_BOX_AVERAGE
+            : wxIMAGE_QUALITY_HIGH;
+    }
+
+    // Resample the image using the method as specified.
     switch ( quality )
     {
-        case wxIMAGE_QUALITY_BICUBIC:
-        case wxIMAGE_QUALITY_BILINEAR:
-            // both of these algorithms should be used for up-sampling the
-            // image only, when down-sampling always use box averaging for best
-            // results
-            if ( width < old_width && height < old_height )
-                image = ResampleBox(width, height);
-            else if ( quality == wxIMAGE_QUALITY_BILINEAR )
-                image = ResampleBilinear(width, height);
-            else if ( quality == wxIMAGE_QUALITY_BICUBIC )
-                image = ResampleBicubic(width, height);
-            break;
-
         case wxIMAGE_QUALITY_NEAREST:
             if ( old_width % width == 0 && old_width >= width &&
                 old_height % height == 0 && old_height >= height )
@@ -468,6 +461,18 @@
 
             image = ResampleNearest(width, height);
             break;
+
+        case wxIMAGE_QUALITY_BILINEAR:
+            image = ResampleBilinear(width, height);
+            break;
+
+        case wxIMAGE_QUALITY_BICUBIC:
+            image = ResampleBicubic(width, height);
+            break;
+
+        case wxIMAGE_QUALITY_BOX_AVERAGE:
+            image = ResampleBox(width, height);
+            break;
     }
 
     // If the original image has a mask, apply the mask to the new image

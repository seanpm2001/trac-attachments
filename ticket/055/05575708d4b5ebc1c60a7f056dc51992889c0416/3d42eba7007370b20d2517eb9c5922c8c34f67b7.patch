diff -bu1 -r wxWindows/samples/calendar/calendar.cpp wxWin/samples/calendar/calendar.cpp
--- wxWindows/samples/calendar/calendar.cpp	2003-09-09 23:24:00.000000000 +0200
+++ wxWin/samples/calendar/calendar.cpp	2004-02-03 15:40:30.000000000 +0100
@@ -33,12 +33,6 @@
 #ifndef WX_PRECOMP
-    #include "wx/app.h"
-    #include "wx/log.h"
-    #include "wx/frame.h"
-    #include "wx/panel.h"
-    #include "wx/stattext.h"
-    #include "wx/menu.h"
-    #include "wx/layout.h"
-    #include "wx/msgdlg.h"
+    #include "wx/wx.h"
 #endif
 
+#include "wx/sizer.h"
 #include "wx/calctrl.h"
@@ -203,3 +197,3 @@
 
-    frame->Show(TRUE);
+    frame->Show(true);
 
@@ -208,3 +202,3 @@
     // application would exit immediately.
-    return TRUE;
+    return true;
 }
@@ -217,3 +211,3 @@
 MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)
-       : wxFrame((wxFrame *)NULL, -1, title, pos, size)
+       : wxFrame((wxFrame *)NULL, wxID_ANY, title, pos, size)
 {
@@ -230,9 +224,9 @@
                     _T("Toggle between Mon and Sun as the first week day"),
-                    TRUE);
+                    true);
     menuCal->Append(Calendar_Cal_Holidays, _T("Show &holidays\tCtrl-H"),
                     _T("Toggle highlighting the holidays"),
-                    TRUE);
+                    true);
     menuCal->Append(Calendar_Cal_Special, _T("Highlight &special dates\tCtrl-S"),
                     _T("Test custom highlighting"),
-                    TRUE);
+                    true);
     menuCal->Append(Calendar_Cal_SurroundWeeks,
@@ -240,3 +234,3 @@
                     _T("Show the neighbouring weeks in the prev/next month"),
-                    TRUE);
+                    true);
     menuCal->AppendSeparator();
@@ -245,9 +239,9 @@
                     _T("Use another style for the calendar controls"),
-                    TRUE);
+                    true);
     menuCal->Append(Calendar_Cal_Month, _T("&Month can be changed\tCtrl-M"),
                     _T("Allow changing the month in the calendar"),
-                    TRUE);
+                    true);
     menuCal->Append(Calendar_Cal_Year, _T("&Year can be changed\tCtrl-Y"),
                     _T("Allow changing the year in the calendar"),
-                    TRUE);
+                    true);
     menuCal->AppendSeparator();
@@ -261,6 +255,6 @@
 
-    menuBar->Check(Calendar_Cal_Monday, TRUE);
-    menuBar->Check(Calendar_Cal_Holidays, TRUE);
-    menuBar->Check(Calendar_Cal_Month, TRUE);
-    menuBar->Check(Calendar_Cal_Year, TRUE);
+    menuBar->Check(Calendar_Cal_Monday, true);
+    menuBar->Check(Calendar_Cal_Holidays, true);
+    menuBar->Check(Calendar_Cal_Month, true);
+    menuBar->Check(Calendar_Cal_Year, true);
 
@@ -281,3 +275,3 @@
     // TRUE is to force the frame to close
-    Close(TRUE);
+    Close(true);
 }
@@ -357,6 +351,4 @@
 MyPanel::MyPanel(wxFrame *frame)
-       : wxPanel(frame, -1)
+       : wxPanel(frame, wxID_ANY)
 {
-    SetAutoLayout(TRUE);
-
     wxString date;
@@ -364,3 +356,3 @@
                 wxDateTime::Today().FormatISODate().c_str());
-    m_date = new wxStaticText(this, -1, date);
+    m_date = new wxStaticText(this, wxID_ANY, date);
     m_calendar = new wxCalendarCtrl(this, Calendar_CalCtrl,
@@ -373,17 +365,9 @@
 
-    wxLayoutConstraints *c = new wxLayoutConstraints;
-    c->left.SameAs(this, wxLeft, 10);
-    c->centreY.SameAs(this, wxCentreY);
-    c->height.AsIs();
-    c->width.AsIs();
-
-    m_date->SetConstraints(c);
-
-    c = new wxLayoutConstraints;
-    c->left.SameAs(m_date, wxRight, 20);
-    c->centreY.SameAs(this, wxCentreY);
-    c->height.AsIs();
-    c->width.AsIs();
+    wxBoxSizer *m_sizer = new wxBoxSizer( wxHORIZONTAL );
+
+    m_sizer->Add(m_date, 0, wxALIGN_CENTER | wxALL, 10 );
+    m_sizer->Add(m_calendar, 0, wxALIGN_CENTER | wxALIGN_LEFT);
 
-    m_calendar->SetConstraints(c);
+    SetSizer( m_sizer );
+    m_sizer->SetSizeHints( this );
 }
diff -bu1 -r wxWindows/samples/controls/controls.cpp wxWin/samples/controls/controls.cpp
--- wxWindows/samples/controls/controls.cpp	2003-12-13 10:55:50.000000000 +0100
+++ wxWin/samples/controls/controls.cpp	2004-02-03 14:40:00.000000000 +0100
@@ -339,3 +339,3 @@
     if ( !wxApp::OnInit() )
-        return FALSE;
+        return false;
 
@@ -352,5 +352,5 @@
     MyFrame *frame = new MyFrame(_T("Controls wxWindows App"), x, y);
-    frame->Show(TRUE);
+    frame->Show(true);
 
-    return TRUE;
+    return true;
 }
@@ -522,3 +522,3 @@
 MyPanel::MyPanel( wxFrame *frame, int x, int y, int w, int h )
-       : wxPanel( frame, -1, wxPoint(x, y), wxSize(w, h) )
+       : wxPanel( frame, wxID_ANY, wxPoint(x, y), wxSize(w, h) )
 {
@@ -551,3 +551,3 @@
 
-    m_text = new wxTextCtrl(this, -1, _T("This is the log window.\n"),
+    m_text = new wxTextCtrl(this, wxID_ANY, _T("This is the log window.\n"),
                             wxPoint(0, 250), wxSize(100, 50), wxTE_MULTILINE);
@@ -593,3 +593,3 @@
     };
-    wxImageList *imagelist = new wxImageList(16, 16, FALSE, Image_Max);
+    wxImageList *imagelist = new wxImageList(16, 16, false, Image_Max);
 
@@ -657,3 +657,3 @@
     m_checkbox = new wxCheckBox( panel, ID_LISTBOX_ENABLE, _T("&Disable"), wxPoint(20,170) );
-    m_checkbox->SetValue(FALSE);
+    m_checkbox->SetValue(false);
 #if wxUSE_TOOLTIPS
@@ -664,3 +664,3 @@
     panel->SetCursor(wxCursor(wxCURSOR_HAND));
-    m_notebook->AddPage(panel, _T("wxListBox"), TRUE, Image_List);
+    m_notebook->AddPage(panel, _T("wxListBox"), true, Image_List);
 
@@ -685,3 +685,3 @@
 
-    m_notebook->AddPage(panel, _T("wxChoice"), FALSE, Image_Choice);
+    m_notebook->AddPage(panel, _T("wxChoice"), false, Image_Choice);
 #endif // wxUSE_CHOICE
@@ -689,3 +689,3 @@
     panel = new wxPanel(m_notebook);
-    (void)new wxStaticBox( panel, -1, _T("&Box around combobox"),
+    (void)new wxStaticBox( panel, wxID_ANY, _T("&Box around combobox"),
                            wxPoint(5, 5), wxSize(150, 100));
@@ -703,3 +703,3 @@
     (void)new wxCheckBox( panel, ID_COMBO_ENABLE, _T("&Disable"), wxPoint(20,130), wxSize(140,30) );
-    m_notebook->AddPage(panel, _T("wxComboBox"), FALSE, Image_Combo);
+    m_notebook->AddPage(panel, _T("wxComboBox"), false, Image_Combo);
 
@@ -714,4 +714,4 @@
     panel = new wxPanel(m_notebook);
-    (void)new MyRadioBox( panel, ID_RADIOBOX, _T("&That"), wxPoint(10,160), wxSize(-1,-1), WXSIZEOF(choices2), choices2, 1, wxRA_SPECIFY_ROWS );
-    m_radio = new wxRadioBox( panel, ID_RADIOBOX, _T("T&his"), wxPoint(10,10), wxSize(-1,-1), WXSIZEOF(choices), choices, 1, wxRA_SPECIFY_COLS );
+    (void)new MyRadioBox( panel, ID_RADIOBOX, _T("&That"), wxPoint(10,160), wxDefaultSize, WXSIZEOF(choices2), choices2, 1, wxRA_SPECIFY_ROWS );
+    m_radio = new wxRadioBox( panel, ID_RADIOBOX, _T("T&his"), wxPoint(10,10), wxDefaultSize, WXSIZEOF(choices), choices, 1, wxRA_SPECIFY_COLS );
     m_radio->SetForegroundColour(*wxRED);
@@ -729,12 +729,12 @@
     wxRadioButton *rb = new wxRadioButton( panel, ID_RADIOBUTTON_1, _T("Radiobutton1"), wxPoint(210,170), wxDefaultSize, wxRB_GROUP );
-    rb->SetValue( FALSE );
+    rb->SetValue( false );
     (void)new wxRadioButton( panel, ID_RADIOBUTTON_2, _T("&Radiobutton2"), wxPoint(340,170), wxDefaultSize );
-    m_notebook->AddPage(panel, _T("wxRadioBox"), FALSE, Image_Radio);
+    m_notebook->AddPage(panel, _T("wxRadioBox"), false, Image_Radio);
 
     panel = new wxPanel(m_notebook);
-    (void)new wxStaticBox( panel, -1, _T("&wxGauge and wxSlider"), wxPoint(10,10), wxSize(222,130) );
-    m_gauge = new wxGauge( panel, -1, 200, wxPoint(18,50), wxSize(155, 30), wxGA_HORIZONTAL|wxNO_BORDER );
+    (void)new wxStaticBox( panel, wxID_ANY, _T("&wxGauge and wxSlider"), wxPoint(10,10), wxSize(222,130) );
+    m_gauge = new wxGauge( panel, wxID_ANY, 200, wxPoint(18,50), wxSize(155, 30), wxGA_HORIZONTAL|wxNO_BORDER );
     m_gauge->SetBackgroundColour(*wxGREEN);
     m_gauge->SetForegroundColour(*wxRED);
-    m_gaugeVert = new wxGauge( panel, -1, 100,
+    m_gaugeVert = new wxGauge( panel, wxID_ANY, 100,
                                wxPoint(195,35), wxSize(30, 90),
@@ -748,3 +748,3 @@
 
-    (void)new wxStaticBox( panel, -1, _T("&Explanation"),
+    (void)new wxStaticBox( panel, wxID_ANY, _T("&Explanation"),
                            wxPoint(230,10), wxSize(270,130),
@@ -754,3 +754,3 @@
     // No wrapping text in wxStaticText yet :-(
-    (void)new wxStaticText( panel, -1,
+    (void)new wxStaticText( panel, wxID_ANY,
                             _T("Drag the slider!"),
@@ -760,3 +760,3 @@
 #else
-    (void)new wxStaticText( panel, -1,
+    (void)new wxStaticText( panel, wxID_ANY,
                             _T("In order see the gauge (aka progress bar)\n")
@@ -774,3 +774,3 @@
     s << initialSpinValue;
-    m_spintext = new wxTextCtrl( panel, -1, s, wxPoint(20,160), wxSize(80,-1) );
+    m_spintext = new wxTextCtrl( panel, wxID_ANY, s, wxPoint(20,160), wxSize(80,-1) );
 #if wxUSE_SPINBTN
@@ -790,3 +790,3 @@
 
-    m_notebook->AddPage(panel, _T("wxGauge"), FALSE, Image_Gauge);
+    m_notebook->AddPage(panel, _T("wxGauge"), false, Image_Gauge);
 
@@ -796,6 +796,6 @@
     wxIcon icon = wxArtProvider::GetIcon(wxART_INFORMATION);
-    (void) new wxStaticBitmap( panel, -1, icon, wxPoint(10, 10) );
+    (void) new wxStaticBitmap( panel, wxID_ANY, icon, wxPoint(10, 10) );
 
     // VZ: don't leak memory
-    // bmpStatic = new wxStaticBitmap(panel, -1, wxNullIcon, wxPoint(50, 10));
+    // bmpStatic = new wxStaticBitmap(panel, wxID_ANY, wxNullIcon, wxPoint(50, 10));
     // bmpStatic->SetIcon(wxArtProvider::GetIcon(wxART_QUESTION));
@@ -821,3 +821,3 @@
 
-       (void)new wxStaticBitmap /* wxBitmapButton */ (panel, -1, bitmap, wxPoint(300, 120));
+       (void)new wxStaticBitmap /* wxBitmapButton */ (panel, wxID_ANY, bitmap, wxPoint(300, 120));
     }
@@ -830,3 +830,3 @@
                                  (
-                                  panel, -1,
+                                  panel, wxID_ANY,
                                   bmp1,
@@ -846,3 +846,3 @@
 
-    m_label = new wxStaticText(panel, -1, _T("Label with some long text"),
+    m_label = new wxStaticText(panel, wxID_ANY, _T("Label with some long text"),
                                wxPoint(250, 60), wxDefaultSize,
@@ -853,30 +853,2 @@
 
-    // layout constraints
-#if wxUSE_CONSTRAINTS
-    wxLayoutConstraints *c;
-
-    panel = new wxPanel(m_notebook);
-    panel->SetAutoLayout( TRUE );
-
-    c = new wxLayoutConstraints;
-    c->top.SameAs( panel, wxTop, 10 );
-    c->height.AsIs( );
-    c->left.SameAs( panel, wxLeft, 10 );
-    c->width.PercentOf( panel, wxWidth, 40 );
-
-    wxButton *pMyButton = new wxButton(panel, ID_BUTTON_TEST1, _T("Test Button &1") );
-    pMyButton->SetConstraints( c );
-
-    c = new wxLayoutConstraints;
-    c->top.SameAs( panel, wxTop, 10 );
-    c->bottom.SameAs( panel, wxBottom, 10 );
-    c->right.SameAs( panel, wxRight, 10 );
-    c->width.PercentOf( panel, wxWidth, 40 );
-
-    wxButton *pMyButton2 = new wxButton(panel, ID_BUTTON_TEST2, _T("Test Button &2") );
-    pMyButton2->SetConstraints( c );
-
-    m_notebook->AddPage(panel, _T("wxLayoutConstraint"));
-#endif
-    
     // sizer
@@ -884,3 +856,3 @@
     panel = new wxPanel(m_notebook);
-    panel->SetAutoLayout( TRUE );
+    panel->SetAutoLayout( true );
 
@@ -889,3 +861,3 @@
     wxStaticBoxSizer *csizer =
-      new wxStaticBoxSizer (new wxStaticBox (panel, -1, _T("Show Buttons")),
+      new wxStaticBoxSizer (new wxStaticBox (panel, wxID_ANY, _T("Show Buttons")),
 			    wxHORIZONTAL );
@@ -894,18 +866,18 @@
     check1 = new wxCheckBox (panel, ID_SIZER_CHECK1, _T("1"));
-    check1->SetValue (TRUE);
+    check1->SetValue (true);
     csizer->Add (check1);
     check2 = new wxCheckBox (panel, ID_SIZER_CHECK2, _T("2"));
-    check2->SetValue (TRUE);
+    check2->SetValue (true);
     csizer->Add (check2);
     check3 = new wxCheckBox (panel, ID_SIZER_CHECK3, _T("3"));
-    check3->SetValue (TRUE);
+    check3->SetValue (true);
     csizer->Add (check3);
     check4 = new wxCheckBox (panel, ID_SIZER_CHECK4, _T("4"));
-    check4->SetValue (TRUE);
+    check4->SetValue (true);
     csizer->Add (check4);
     check14 = new wxCheckBox (panel, ID_SIZER_CHECK14, _T("1-4"));
-    check14->SetValue (TRUE);
+    check14->SetValue (true);
     csizer->Add (check14);
     checkBig = new wxCheckBox (panel, ID_SIZER_CHECKBIG, _T("Big"));
-    checkBig->SetValue (TRUE);
+    checkBig->SetValue (true);
     csizer->Add (checkBig);
@@ -918,9 +890,9 @@
     
-    m_sizerBtn1 = new wxButton(panel, -1, _T("Test Button &1") );
+    m_sizerBtn1 = new wxButton(panel, wxID_ANY, _T("Test Button &1") );
     m_buttonSizer->Add( m_sizerBtn1, 0, wxALL, 10 );
-    m_sizerBtn2 = new wxButton(panel, -1, _T("Test Button &2") );
+    m_sizerBtn2 = new wxButton(panel, wxID_ANY, _T("Test Button &2") );
     m_buttonSizer->Add( m_sizerBtn2, 0, wxALL, 10 );
-    m_sizerBtn3 = new wxButton(panel, -1, _T("Test Button &3") );
+    m_sizerBtn3 = new wxButton(panel, wxID_ANY, _T("Test Button &3") );
     m_buttonSizer->Add( m_sizerBtn3, 0, wxALL, 10 );
-    m_sizerBtn4 = new wxButton(panel, -1, _T("Test Button &4") );
+    m_sizerBtn4 = new wxButton(panel, wxID_ANY, _T("Test Button &4") );
     m_buttonSizer->Add( m_sizerBtn4, 0, wxALL, 10 );
@@ -929,3 +901,3 @@
     m_hsizer->Add( 20,20, 1 );
-    m_bigBtn = new wxButton(panel, -1, _T("Multiline\nbutton") );
+    m_bigBtn = new wxButton(panel, wxID_ANY, _T("Multiline\nbutton") );
     m_hsizer->Add( m_bigBtn , 3, wxGROW|wxALL, 10 );
@@ -1468,3 +1440,3 @@
 
-    bool cont = TRUE;
+    bool cont = true;
     for ( int i = 0; i <= max && cont; i++ )
@@ -1559,3 +1531,3 @@
 MyFrame::MyFrame(const wxChar *title, int x, int y)
-       : wxFrame(NULL, -1, title, wxPoint(x, y), wxSize(500, 430))
+       : wxFrame(NULL, wxID_ANY, title, wxPoint(x, y), wxSize(500, 430))
 {
@@ -1585,4 +1557,4 @@
     tooltip_menu->Append(CONTROLS_ENABLE_TOOLTIPS, _T("&Toggle tooltips\tCtrl-T"),
-            _T("enable/disable tooltips"), TRUE);
-    tooltip_menu->Check(CONTROLS_ENABLE_TOOLTIPS, TRUE);
+            _T("enable/disable tooltips"), true);
+    tooltip_menu->Check(CONTROLS_ENABLE_TOOLTIPS, true);
     menu_bar->Append(tooltip_menu, _T("&Tooltips"));
@@ -1592,3 +1564,3 @@
     panel_menu->Append(CONTROLS_ENABLE_ALL, _T("&Disable all\tCtrl-E"),
-                       _T("Enable/disable all panel controls"), TRUE);
+                       _T("Enable/disable all panel controls"), true);
     menu_bar->Append(panel_menu, _T("&Panel"));
@@ -1606,3 +1578,3 @@
 {
-    Close(TRUE);
+    Close(true);
 }
@@ -1646,3 +1618,3 @@
 {
-    static bool s_enabled = TRUE;
+    static bool s_enabled = true;
 
@@ -1658,3 +1630,3 @@
 {
-    static bool s_enable = TRUE;
+    static bool s_enable = true;
 
diff -bu1 -r wxWindows/samples/dnd/dnd.cpp wxWin/samples/dnd/dnd.cpp
--- wxWindows/samples/dnd/dnd.cpp	2003-09-12 19:12:53.000000000 +0200
+++ wxWin/samples/dnd/dnd.cpp	2004-02-03 14:40:16.000000000 +0100
@@ -486,5 +486,5 @@
         // we're asked to do so)
-        m_hasBitmap = FALSE;
+        m_hasBitmap = false;
 #if wxUSE_METAFILES
-        m_hasMetaFile = FALSE;
+        m_hasMetaFile = false;
 #endif // wxUSE_METAFILES
@@ -505,5 +505,5 @@
         m_shape = (DnDShape *)NULL;
-        m_hasBitmap = FALSE;
+        m_hasBitmap = false;
 #if wxUSE_METAFILES
-        m_hasMetaFile = FALSE;
+        m_hasMetaFile = false;
 #endif // wxUSE_METAFILES
@@ -588,3 +588,3 @@
 
-            return TRUE;
+            return true;
         }
@@ -614,3 +614,3 @@
     {
-        wxCHECK_MSG( format == m_formatShape, FALSE,
+        wxCHECK_MSG( format == m_formatShape, false,
                      wxT( "unsupported format") );
@@ -621,9 +621,9 @@
         // the shape has changed
-        m_hasBitmap = FALSE;
+        m_hasBitmap = false;
 
 #if wxUSE_METAFILES
-        m_hasMetaFile = FALSE;
+        m_hasMetaFile = false;
 #endif // wxUSE_METAFILES
 
-        return TRUE;
+        return true;
     }
@@ -890,3 +890,3 @@
     // activate it
-    frame->Show(TRUE);
+    frame->Show(true);
 
@@ -894,6 +894,6 @@
 
-    return TRUE;
+    return true;
 #else
     wxMessageBox( _T("This sample has to be compiled with wxUSE_DRAG_AND_DROP"), _T("Building error"), wxOK);
-    return FALSE;
+    return false;
 #endif // wxUSE_DRAG_AND_DROP
@@ -904,3 +904,3 @@
 DnDFrame::DnDFrame(wxFrame *frame, wxChar *title, int x, int y, int w, int h)
-        : wxFrame(frame, -1, title, wxPoint(x, y), wxSize(w, h)),
+        : wxFrame(frame, wxID_ANY, title, wxPoint(x, y), wxSize(w, h)),
           m_strText(_T("wxWindows drag & drop works :-)"))
@@ -953,13 +953,10 @@
     // make a panel with 3 subwindows
-    wxPoint pos(0, 0);
-    wxSize  size(400, 200);
-
     wxString strFile(_T("Drop files here!")), strText(_T("Drop text on me"));
 
-    m_ctrlFile  = new wxListBox(this, -1, pos, size, 1, &strFile,
+    m_ctrlFile  = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, &strFile,
                                 wxLB_HSCROLL | wxLB_ALWAYS_SB );
-    m_ctrlText  = new wxListBox(this, -1, pos, size, 1, &strText,
+    m_ctrlText  = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, &strText,
                                 wxLB_HSCROLL | wxLB_ALWAYS_SB );
 
-    m_ctrlLog   = new wxTextCtrl(this, -1, _T(""), pos, size,
+    m_ctrlLog   = new wxTextCtrl(this, wxID_ANY, _T(""), wxDefaultPosition, wxDefaultSize,
                                  wxTE_MULTILINE | wxTE_READONLY |
@@ -976,34 +973,17 @@
 
-    wxLayoutConstraints *c;
-
-    // Top-left listbox
-    c = new wxLayoutConstraints;
-    c->left.SameAs(this, wxLeft);
-    c->top.SameAs(this, wxTop);
-    c->right.PercentOf(this, wxRight, 50);
-    c->height.PercentOf(this, wxHeight, 30);
-    m_ctrlFile->SetConstraints(c);
-
-    // Top-right listbox
-    c = new wxLayoutConstraints;
-    c->left.SameAs    (m_ctrlFile, wxRight);
-    c->top.SameAs     (this, wxTop);
-    c->right.SameAs   (this, wxRight);
-    c->height.PercentOf(this, wxHeight, 30);
-    m_ctrlText->SetConstraints(c);
-
-    // Lower text control
-    c = new wxLayoutConstraints;
-    c->left.SameAs    (this, wxLeft);
-    c->right.SameAs   (this, wxRight);
-    c->height.PercentOf(this, wxHeight, 50);
-    c->top.SameAs(m_ctrlText, wxBottom);
-    m_ctrlLog->SetConstraints(c);
+    wxBoxSizer *m_sizer_top = new wxBoxSizer( wxHORIZONTAL );
+    m_sizer_top->Add(m_ctrlFile, 1, wxEXPAND );
+    m_sizer_top->Add(m_ctrlText, 1, wxEXPAND );
+
+    wxBoxSizer *m_sizer = new wxBoxSizer( wxVERTICAL );
+    m_sizer->Add(m_sizer_top, 1, wxEXPAND );
+    m_sizer->Add(m_ctrlLog, 1, wxEXPAND | wxBOTTOM, 50);
 
-    SetAutoLayout(TRUE);
+    SetSizer( m_sizer );
+    m_sizer->SetSizeHints( this );
 
     // copy data by default but allow moving it as well
-    m_moveByDefault = FALSE;
-    m_moveAllow = TRUE;
-    menu_bar->Check(Menu_DragMoveAllow, TRUE);
+    m_moveByDefault = false;
+    m_moveAllow = true;
+    menu_bar->Check(Menu_DragMoveAllow, true);
 }
@@ -1012,3 +992,3 @@
 {
-    Close(TRUE);
+    Close(true);
 }
@@ -1030,3 +1010,3 @@
     // dc.Clear(); -- this kills wxGTK
-    dc.SetFont( wxFont( 24, wxDECORATIVE, wxNORMAL, wxNORMAL, FALSE, _T("charter") ) );
+    dc.SetFont( wxFont( 24, wxDECORATIVE, wxNORMAL, wxNORMAL, false, _T("charter") ) );
     dc.DrawText( _T("Drag text from here!"), 100, h-50 );
@@ -1064,3 +1044,3 @@
 {
-    (new DnDShapeFrame(this))->Show(TRUE);
+    (new DnDShapeFrame(this))->Show(true);
 
@@ -1455,3 +1435,3 @@
 
-    return TRUE;
+    return true;
 }
@@ -1468,3 +1448,3 @@
 
-    return TRUE;
+    return true;
 }
@@ -1488,3 +1468,3 @@
 
-    m_radio = new wxRadioBox( this, -1, wxT("&Shape"),
+    m_radio = new wxRadioBox( this, wxID_ANY, wxT("&Shape"),
                               wxDefaultPosition, wxDefaultSize, 4, choices, 4,
@@ -1495,3 +1475,3 @@
     // attributes
-    wxStaticBox* box = new wxStaticBox( this, -1, wxT("&Attributes") );
+    wxStaticBox* box = new wxStaticBox( this, wxID_ANY, wxT("&Attributes") );
     wxStaticBoxSizer* attrSizer = new wxStaticBoxSizer( box, wxHORIZONTAL );
@@ -1501,4 +1481,4 @@
 
-    st = new wxStaticText( this, -1, wxT("Position &X:") );
-    m_textX = new wxTextCtrl( this, -1, wxEmptyString, wxDefaultPosition,
+    st = new wxStaticText( this, wxID_ANY, wxT("Position &X:") );
+    m_textX = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,
                               wxSize( 30, 20 ) );
@@ -1507,4 +1487,4 @@
 
-    st = new wxStaticText( this, -1, wxT("Size &width:") );
-    m_textW = new wxTextCtrl( this, -1, wxEmptyString, wxDefaultPosition,
+    st = new wxStaticText( this, wxID_ANY, wxT("Size &width:") );
+    m_textW = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,
                               wxSize( 30, 20 ) );
@@ -1513,4 +1493,4 @@
 
-    st = new wxStaticText( this, -1, wxT("&Y:") );
-    m_textY = new wxTextCtrl( this, -1, wxEmptyString, wxDefaultPosition,
+    st = new wxStaticText( this, wxID_ANY, wxT("&Y:") );
+    m_textY = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,
                               wxSize( 30, 20 ) );
@@ -1519,4 +1499,4 @@
 
-    st = new wxStaticText( this, -1, wxT("&height:") );
-    m_textH = new wxTextCtrl( this, -1, wxEmptyString, wxDefaultPosition,
+    st = new wxStaticText( this, wxID_ANY, wxT("&height:") );
+    m_textH = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,
                               wxSize( 30, 20 ) );
@@ -1539,3 +1519,2 @@
 
-    SetAutoLayout( TRUE );
     SetSizer( topSizer );
@@ -1578,3 +1557,3 @@
 
-    return TRUE;
+    return true;
 }
@@ -1595,6 +1574,6 @@
 
-        return FALSE;
+        return false;
     }
 
-    return TRUE;
+    return true;
 }
@@ -1604,3 +1583,3 @@
     wxColourData data;
-    data.SetChooseFull(TRUE);
+    data.SetChooseFull(true);
     for (int i = 0; i < 16; i++)
@@ -1625,3 +1604,3 @@
 DnDShapeFrame::DnDShapeFrame(wxFrame *parent)
-             : wxFrame(parent, -1, _T("Shape Frame"),
+             : wxFrame(parent, wxID_ANY, _T("Shape Frame"),
                        wxDefaultPosition, wxSize(250, 150))
@@ -1684,3 +1663,3 @@
     const wxChar *pc = NULL;
-    switch ( source.DoDragDrop(TRUE) )
+    switch ( source.DoDragDrop(true) )
     {
@@ -1870,3 +1849,3 @@
     self->m_dobjMetaFile.SetMetafile(*mf);
-    self->m_hasMetaFile = TRUE;
+    self->m_hasMetaFile = true;
 
@@ -1893,3 +1872,3 @@
     self->m_dobjBitmap.SetBitmap(bitmap);
-    self->m_hasBitmap = TRUE;
+    self->m_hasBitmap = true;
 }
@@ -1902,3 +1881,3 @@
 {
-    wxFrame *frame = new wxFrame(NULL, -1, _T("Bitmap view"));
+    wxFrame *frame = new wxFrame(NULL, wxID_ANY, _T("Bitmap view"));
     frame->CreateStatusBar();
@@ -1912,3 +1891,3 @@
     frame->SetClientSize(w > 100 ? 100 : w, h > 100 ? 100 : h);
-    frame->Show(TRUE);
+    frame->Show(true);
 }
@@ -1919,3 +1898,3 @@
 {
-    wxFrame *frame = new wxFrame(NULL, -1, _T("Metafile view"));
+    wxFrame *frame = new wxFrame(NULL, wxID_ANY, _T("Metafile view"));
     frame->CreateStatusBar();
diff -bu1 -r wxWindows/samples/layout/layout.cpp wxWin/samples/layout/layout.cpp
--- wxWindows/samples/layout/layout.cpp	2003-11-07 20:33:25.000000000 +0100
+++ wxWin/samples/layout/layout.cpp	2004-02-03 14:40:45.000000000 +0100
@@ -26,6 +26,2 @@
 
-#if !wxUSE_CONSTRAINTS
-#error You must set wxUSE_CONSTRAINTS to 1 in setup.h!
-#endif
-
 #include "wx/sizer.h"
@@ -52,5 +48,5 @@
 
-  frame->Show(TRUE);
+  frame->Show(true);
 
-  return TRUE;
+  return true;
 }
@@ -65,3 +61,2 @@
 
-  EVT_MENU(LAYOUT_TEST_CONSTRAINTS, MyFrame::TestConstraints)
   EVT_MENU(LAYOUT_TEST_SIZER, MyFrame::TestFlexSizers)
@@ -73,3 +68,3 @@
 MyFrame::MyFrame()
-       : wxFrame(NULL, -1, _T("wxWindows Layout Demo"),
+       : wxFrame(NULL, wxID_ANY, _T("wxWindows Layout Demo"),
                  wxDefaultPosition, wxDefaultSize,
@@ -80,3 +75,2 @@
 
-  file_menu->Append(LAYOUT_TEST_CONSTRAINTS, _T("Test &constraints"));
   file_menu->Append(LAYOUT_TEST_SIZER, _T("Test wx&FlexSizer"));
@@ -111,3 +105,3 @@
   topsizer->Add(
-    new wxStaticText( this, -1, _T("An explanation (wxALIGN_RIGHT).") ),
+    new wxStaticText( this, wxID_ANY, _T("An explanation (wxALIGN_RIGHT).") ),
     0,                         // make vertically unstretchable
@@ -119,3 +113,3 @@
   topsizer->Add(
-    new wxTextCtrl( this, -1, _T("My text (wxEXPAND)."), wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),
+    new wxTextCtrl( this, wxID_ANY, _T("My text (wxEXPAND)."), wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),
     1,            // make vertically stretchable
@@ -127,6 +121,6 @@
   wxBoxSizer *statsizer = new wxStaticBoxSizer(
-    new wxStaticBox(this, -1, _T("A wxStaticBoxSizer")),
+    new wxStaticBox(this, wxID_ANY, _T("A wxStaticBoxSizer")),
     wxVERTICAL );
   statsizer->Add(
-    new wxStaticText(this, -1, _T("And some TEXT inside it")),
+    new wxStaticText(this, wxID_ANY, _T("And some TEXT inside it")),
     0,
@@ -139,13 +133,13 @@
     wxGridSizer *gridsizer = new wxGridSizer(2, 5, 5);
-    gridsizer->Add(new wxStaticText(this, -1, _T("Label")), 0,
+    gridsizer->Add(new wxStaticText(this, wxID_ANY, _T("Label")), 0,
                   wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
-    gridsizer->Add(new wxTextCtrl(this, -1, _T("Grid sizer demo")), 1,
+    gridsizer->Add(new wxTextCtrl(this, wxID_ANY, _T("Grid sizer demo")), 1,
                    wxGROW | wxALIGN_CENTER_VERTICAL);
-    gridsizer->Add(new wxStaticText(this, -1, _T("Another label")), 0,
+    gridsizer->Add(new wxStaticText(this, wxID_ANY, _T("Another label")), 0,
                    wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
-    gridsizer->Add(new wxTextCtrl(this, -1, _T("More text")), 1,
+    gridsizer->Add(new wxTextCtrl(this, wxID_ANY, _T("More text")), 1,
                    wxGROW | wxALIGN_CENTER_VERTICAL);
-    gridsizer->Add(new wxStaticText(this, -1, _T("Final label")), 0,
+    gridsizer->Add(new wxStaticText(this, wxID_ANY, _T("Final label")), 0,
                    wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
-    gridsizer->Add(new wxTextCtrl(this, -1, _T("And yet more text")), 1,
+    gridsizer->Add(new wxTextCtrl(this, wxID_ANY, _T("And yet more text")), 1,
                    wxGROW | wxALIGN_CENTER_VERTICAL);
@@ -156,3 +150,3 @@
   topsizer->Add(
-     new wxStaticLine( this, -1, wxDefaultPosition, wxSize(3,3), wxHORIZONTAL),
+     new wxStaticLine( this, wxID_ANY, wxDefaultPosition, wxSize(3,3), wxHORIZONTAL),
      0,           // make vertically unstretchable
@@ -166,3 +160,3 @@
   button_box->Add(
-     new wxButton( this, -1, _T("Two buttons in a box") ),
+     new wxButton( this, wxID_ANY, _T("Two buttons in a box") ),
      0,           // make horizontally unstretchable
@@ -171,3 +165,3 @@
   button_box->Add(
-     new wxButton( this, -1, _T("(wxCENTER)") ),
+     new wxButton( this, wxID_ANY, _T("(wxCENTER)") ),
      0,           // make horizontally unstretchable
@@ -190,10 +184,3 @@
 {
-    Close(TRUE);
-}
-
-void MyFrame::TestConstraints(wxCommandEvent& WXUNUSED(event) )
-{
-    MyConstraintsFrame *
-        newFrame = new MyConstraintsFrame(_T("Constraints Test Frame"), 100, 100);
-    newFrame->Show(TRUE);
+    Close(true);
 }
@@ -203,3 +190,3 @@
     MyFlexSizerFrame *newFrame = new MyFlexSizerFrame(_T("Flex Sizer Test Frame"), 50, 50);
-    newFrame->Show(TRUE);
+    newFrame->Show(true);
 }
@@ -224,3 +211,3 @@
         MyGridBagSizerFrame(_T("wxGridBagSizer Test Frame"), 50, 50);
-    newFrame->Show(TRUE);
+    newFrame->Show(true);
 }
@@ -229,90 +216,2 @@
 // ----------------------------------------------------------------------------
-// MyConstraintsFrame
-// ----------------------------------------------------------------------------
-
-MyConstraintsFrame::MyConstraintsFrame(const wxChar *title, int x, int y)
-                  : wxFrame(NULL, -1, title, wxPoint(x, y) )
-{
-  // Make a panel
-  wxPanel *panel = new wxPanel(this);
-
-  // Create some panel items
-  wxButton *btn1 = new wxButton(panel, -1, _T("A button (1)")) ;
-
-  wxLayoutConstraints *b1 = new wxLayoutConstraints;
-  b1->centreX.SameAs    (panel, wxCentreX);
-  b1->top.SameAs        (panel, wxTop, 5);
-  b1->width.PercentOf   (panel, wxWidth, 80);
-  b1->height.AsIs       ();
-  btn1->SetConstraints(b1);
-
-  wxListBox *list = new wxListBox(panel, -1,
-                                  wxPoint(-1, -1), wxSize(200, 100));
-  list->Append(_T("Apple"));
-  list->Append(_T("Pear"));
-  list->Append(_T("Orange"));
-  list->Append(_T("Banana"));
-  list->Append(_T("Fruit"));
-
-  wxLayoutConstraints *b2 = new wxLayoutConstraints;
-  b2->top.Below         (btn1, 5);
-  b2->left.SameAs       (panel, wxLeft, 5);
-  b2->width.PercentOf   (panel, wxWidth, 40);
-  b2->bottom.SameAs     (panel, wxBottom, 5);
-  list->SetConstraints(b2);
-
-  wxTextCtrl *mtext = new wxTextCtrl(panel, -1,
-      _T("This frame is laid out using\nconstraints, but the preferred\nlayout mechanism now are sizers."),
-                                     wxDefaultPosition,
-                                     wxDefaultSize,
-                                     wxTE_MULTILINE);
-
-  wxLayoutConstraints *b3 = new wxLayoutConstraints;
-  b3->top.Below         (btn1, 5);
-  b3->left.RightOf      (list, 5);
-  b3->right.SameAs      (panel, wxRight, 5);
-  b3->bottom.SameAs     (panel, wxBottom, 5);
-  mtext->SetConstraints(b3);
-
-  wxTextCtrl *canvas = new wxTextCtrl(this, -1, _T("yet another window"));
-
-  // Make a text window
-  wxTextCtrl *text_window = new wxTextCtrl(this, -1, _T(""),
-                                           wxDefaultPosition,
-                                           wxDefaultSize,
-                                           wxTE_MULTILINE);
-
-  // Set constraints for panel subwindow
-  wxLayoutConstraints *c1 = new wxLayoutConstraints;
-
-  c1->left.SameAs       (this, wxLeft);
-  c1->top.SameAs        (this, wxTop);
-  c1->right.PercentOf   (this, wxWidth, 50);
-  c1->height.PercentOf  (this, wxHeight, 50);
-
-  panel->SetConstraints(c1);
-
-  // Set constraints for canvas subwindow
-  wxLayoutConstraints *c2 = new wxLayoutConstraints;
-
-  c2->left.SameAs       (panel, wxRight);
-  c2->top.SameAs        (this, wxTop);
-  c2->right.SameAs      (this, wxRight);
-  c2->height.PercentOf  (this, wxHeight, 50);
-
-  canvas->SetConstraints(c2);
-
-  // Set constraints for text subwindow
-  wxLayoutConstraints *c3 = new wxLayoutConstraints;
-  c3->left.SameAs       (this, wxLeft);
-  c3->top.Below         (panel);
-  c3->right.SameAs      (this, wxRight);
-  c3->bottom.SameAs     (this, wxBottom);
-
-  text_window->SetConstraints(c3);
-
-  SetAutoLayout(TRUE);
-}
-
-// ----------------------------------------------------------------------------
 //  MyFlexSizerFrame
@@ -329,3 +228,3 @@
                             this,
-                            -1,
+                            wxID_ANY,
                             wxString::Format(_T("(%d, %d)"), i + 1, j + 1),
@@ -341,3 +240,3 @@
 MyFlexSizerFrame::MyFlexSizerFrame(const wxChar *title, int x, int y )
-            : wxFrame(NULL, -1, title, wxPoint(x, y) )
+            : wxFrame(NULL, wxID_ANY, title, wxPoint(x, y) )
 {
@@ -347,3 +246,3 @@
     wxSizer *sizerCol1 = new wxBoxSizer(wxVERTICAL);
-    sizerCol1->Add(new wxStaticText(this, -1, _T("Ungrowable:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(this, wxID_ANY, _T("Ungrowable:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -352,3 +251,3 @@
 
-    sizerCol1->Add(new wxStaticText(this, -1, _T("Growable middle column:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(this, wxID_ANY, _T("Growable middle column:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -358,3 +257,3 @@
 
-    sizerCol1->Add(new wxStaticText(this, -1, _T("Growable middle row:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(this, wxID_ANY, _T("Growable middle row:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -364,3 +263,3 @@
 
-    sizerCol1->Add(new wxStaticText(this, -1, _T("All growable columns:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(this, wxID_ANY, _T("All growable columns:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -374,3 +273,3 @@
     wxSizer *sizerCol2 = new wxBoxSizer(wxVERTICAL);
-    sizerCol2->Add(new wxStaticText(this, -1, _T("Growable middle row and column:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(this, wxID_ANY, _T("Growable middle row and column:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -381,3 +280,3 @@
 
-    sizerCol2->Add(new wxStaticText(this, -1, _T("Same with horz flex direction")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(this, wxID_ANY, _T("Same with horz flex direction")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -389,3 +288,3 @@
 
-    sizerCol2->Add(new wxStaticText(this, -1, _T("Same with grow mode == \"none\"")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(this, wxID_ANY, _T("Same with grow mode == \"none\"")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -398,3 +297,3 @@
 
-    sizerCol2->Add(new wxStaticText(this, -1, _T("Same with grow mode == \"all\"")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(this, wxID_ANY, _T("Same with grow mode == \"all\"")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
@@ -421,3 +320,3 @@
 MySizerDialog::MySizerDialog(wxWindow *parent, const wxChar *title)
-             : wxDialog(parent, -1, wxString(title))
+             : wxDialog(parent, wxID_ANY, wxString(title))
 {
@@ -428,3 +327,3 @@
 
-    wxNotebook *notebook = new wxNotebook( this, -1 );
+    wxNotebook *notebook = new wxNotebook( this, wxID_ANY );
     wxNotebookSizer *nbs = new wxNotebookSizer( notebook );
@@ -436,3 +335,3 @@
     // First page: one big text ctrl
-    wxTextCtrl *multi = new wxTextCtrl( notebook, -1, _T("TextCtrl."), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
+    wxTextCtrl *multi = new wxTextCtrl( notebook, wxID_ANY, _T("TextCtrl."), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
     notebook->AddPage( multi, _T("Page One") );
@@ -440,3 +339,3 @@
     // Second page: a text ctrl and a button
-    wxPanel *panel = new wxPanel( notebook, -1 );
+    wxPanel *panel = new wxPanel( notebook, wxID_ANY );
     notebook->AddPage( panel, _T("Page Two") );
@@ -445,10 +344,10 @@
 
-    wxTextCtrl *text = new wxTextCtrl( panel, -1, _T("TextLine 1."), wxDefaultPosition, wxSize(250,-1) );
+    wxTextCtrl *text = new wxTextCtrl( panel, wxID_ANY, _T("TextLine 1."), wxDefaultPosition, wxSize(250,-1) );
     panelsizer->Add( text, 0, wxGROW|wxALL, 30 );
-    text = new wxTextCtrl( panel, -1, _T("TextLine 2."), wxDefaultPosition, wxSize(250,-1) );
+    text = new wxTextCtrl( panel, wxID_ANY, _T("TextLine 2."), wxDefaultPosition, wxSize(250,-1) );
     panelsizer->Add( text, 0, wxGROW|wxALL, 30 );
-    wxButton *button2 = new wxButton( panel, -1, _T("Hallo") );
+    wxButton *button2 = new wxButton( panel, wxID_ANY, _T("Hallo") );
     panelsizer->Add( button2, 0, wxALIGN_RIGHT | wxLEFT|wxRIGHT|wxBOTTOM, 30 );
 
-    panel->SetAutoLayout( TRUE );
+    panel->SetAutoLayout( true );
     panel->SetSizer( panelsizer );
@@ -465,4 +364,4 @@
 // some simple macros to help make the sample code below more clear
-#define TEXTCTRL(text)   new wxTextCtrl(p, -1, _T(text))
-#define MLTEXTCTRL(text) new wxTextCtrl(p, -1, _T(text), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE)
+#define TEXTCTRL(text)   new wxTextCtrl(p, wxID_ANY, _T(text))
+#define MLTEXTCTRL(text) new wxTextCtrl(p, wxID_ANY, _T(text), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE)
 #define POS(r, c)        wxGBPosition(r,c)
@@ -496,5 +395,5 @@
 MyGridBagSizerFrame::MyGridBagSizerFrame(const wxChar *title, int x, int y )
-    : wxFrame( NULL, -1, title, wxPoint(x, y) )
+    : wxFrame( NULL, wxID_ANY, title, wxPoint(x, y) )
 {
-    wxPanel* p = new wxPanel(this, -1);
+    wxPanel* p = new wxPanel(this, wxID_ANY);
     m_panel = p;
@@ -503,3 +402,3 @@
     
-    m_gbs->Add( new wxStaticText(p, -1, gbsDescription),
+    m_gbs->Add( new wxStaticText(p, wxID_ANY, gbsDescription),
                 POS(0,0), SPAN(1, 7),
@@ -531,3 +430,3 @@
 
-    m_hideTxt = new wxTextCtrl(p, -1, _T("pos(12,4), size(150, -1)"),
+    m_hideTxt = new wxTextCtrl(p, wxID_ANY, _T("pos(12,4), size(150, -1)"),
                                 wxDefaultPosition, wxSize(150,-1));
diff -bu1 -r wxWindows/samples/layout/layout.h wxWin/samples/layout/layout.h
--- wxWindows/samples/layout/layout.h	2003-11-06 02:31:34.000000000 +0100
+++ wxWin/samples/layout/layout.h	2004-02-03 13:29:49.000000000 +0100
@@ -25,3 +25,2 @@
 
-    void TestConstraints(wxCommandEvent& event);
     void TestFlexSizers(wxCommandEvent& event);
@@ -37,9 +36,2 @@
 
-// a frame using constraints for layout
-class MyConstraintsFrame : public wxFrame
-{
-public:
-    MyConstraintsFrame(const wxChar *title, int x, int y );
-};
-
 // a frame using flex sizers for layout
@@ -96,3 +88,2 @@
     LAYOUT_ABOUT,
-    LAYOUT_TEST_CONSTRAINTS,
     LAYOUT_TEST_SIZER,

 	  	 

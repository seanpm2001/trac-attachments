diff -ru wxMac-2.8.0/src/common/dlgcmn.cpp wxMac-2.8.0-CL/src/common/dlgcmn.cpp
--- wxMac-2.8.0/src/common/dlgcmn.cpp	2006-12-11 23:01:25.000000000 +0100
+++ wxMac-2.8.0-CL/src/common/dlgcmn.cpp	2007-01-21 21:53:24.000000000 +0100
@@ -469,7 +469,7 @@
 
 void wxDialogBase::OnCharHook(wxKeyEvent& event)
 {
-    if ( event.GetKeyCode() == WXK_ESCAPE )
+    if ( IsEscapeKey(event) )
     {
         int idCancel = GetEscapeId();
         switch ( idCancel )
diff -ru wxMac-2.8.0/src/generic/grid.cpp wxMac-2.8.0-CL/src/generic/grid.cpp
--- wxMac-2.8.0/src/generic/grid.cpp	2006-12-11 23:01:27.000000000 +0100
+++ wxMac-2.8.0-CL/src/generic/grid.cpp	2007-01-21 22:03:26.000000000 +0100
@@ -239,7 +239,6 @@
     }
 
     void OnKillFocus(wxFocusEvent& event);
-    void OnKeyDown(wxKeyEvent& event);
     void OnChar(wxKeyEvent& event);
 
     void SetInSetFocus(bool inSetFocus) { m_inSetFocus = inSetFocus; }
@@ -262,7 +261,6 @@
 
 BEGIN_EVENT_TABLE( wxGridCellEditorEvtHandler, wxEvtHandler )
     EVT_KILL_FOCUS( wxGridCellEditorEvtHandler::OnKillFocus )
-    EVT_KEY_DOWN( wxGridCellEditorEvtHandler::OnKeyDown )
     EVT_CHAR( wxGridCellEditorEvtHandler::OnChar )
 END_EVENT_TABLE()
 
@@ -1612,31 +1610,6 @@
     event.Skip();
 }
 
-void wxGridCellEditorEvtHandler::OnKeyDown(wxKeyEvent& event)
-{
-    switch ( event.GetKeyCode() )
-    {
-        case WXK_ESCAPE:
-            m_editor->Reset();
-            m_grid->DisableCellEditControl();
-            break;
-
-        case WXK_TAB:
-            m_grid->GetEventHandler()->ProcessEvent( event );
-            break;
-
-        case WXK_RETURN:
-        case WXK_NUMPAD_ENTER:
-            if (!m_grid->GetEventHandler()->ProcessEvent(event))
-                m_editor->HandleReturn(event);
-            break;
-
-        default:
-            event.Skip();
-            break;
-    }
-}
-
 void wxGridCellEditorEvtHandler::OnChar(wxKeyEvent& event)
 {
     int row = m_grid->GetGridCursorRow();
@@ -1651,9 +1624,18 @@
     switch ( event.GetKeyCode() )
     {
         case WXK_ESCAPE:
+            m_editor->Reset();
+            m_grid->DisableCellEditControl();
+            break;
+
         case WXK_TAB:
+            m_grid->GetEventHandler()->ProcessEvent( event );
+            break;
+
         case WXK_RETURN:
         case WXK_NUMPAD_ENTER:
+            if (!m_grid->GetEventHandler()->ProcessEvent(event))
+                m_editor->HandleReturn(event);
             break;
 
         case WXK_HOME:
@@ -6902,57 +6884,6 @@
                     MoveCursorRight( event.ShiftDown() );
                 break;
 
-            case WXK_RETURN:
-            case WXK_NUMPAD_ENTER:
-                if ( event.ControlDown() )
-                {
-                    event.Skip();  // to let the edit control have the return
-                }
-                else
-                {
-                    if ( GetGridCursorRow() < GetNumberRows()-1 )
-                    {
-                        MoveCursorDown( event.ShiftDown() );
-                    }
-                    else
-                    {
-                        // at the bottom of a column
-                        DisableCellEditControl();
-                    }
-                }
-                break;
-
-            case WXK_ESCAPE:
-                ClearSelection();
-                break;
-
-            case WXK_TAB:
-                if (event.ShiftDown())
-                {
-                    if ( GetGridCursorCol() > 0 )
-                    {
-                        MoveCursorLeft( false );
-                    }
-                    else
-                    {
-                        // at left of grid
-                        DisableCellEditControl();
-                    }
-                }
-                else
-                {
-                    if ( GetGridCursorCol() < GetNumberCols() - 1 )
-                    {
-                        MoveCursorRight( false );
-                    }
-                    else
-                    {
-                        // at right of grid
-                        DisableCellEditControl();
-                    }
-                }
-                break;
-
             case WXK_HOME:
                 if ( event.ControlDown() )
                 {
@@ -7047,43 +6978,98 @@
 
 void wxGrid::OnChar( wxKeyEvent& event )
 {
-    // is it possible to edit the current cell at all?
-    if ( !IsCellEditControlEnabled() && CanEnableCellControl() )
-    {
-        // yes, now check whether the cells editor accepts the key
-        int row = m_currentCellCoords.GetRow();
-        int col = m_currentCellCoords.GetCol();
-        wxGridCellAttr *attr = GetCellAttr(row, col);
-        wxGridCellEditor *editor = attr->GetEditor(this, row, col);
-
-        // <F2> is special and will always start editing, for
-        // other keys - ask the editor itself
-        if ( (event.GetKeyCode() == WXK_F2 && !event.HasModifiers())
-             || editor->IsAcceptedKey(event) )
-        {
-            // ensure cell is visble
-            MakeCellVisible(row, col);
-            EnableCellEditControl();
-
-            // a problem can arise if the cell is not completely
-            // visible (even after calling MakeCellVisible the
-            // control is not created and calling StartingKey will
-            // crash the app
-            if ( event.GetKeyCode() != WXK_F2 && editor->IsCreated() && m_cellEditCtrlEnabled )
-                editor->StartingKey(event);
-        }
-        else
-        {
-            event.Skip();
-        }
-
-        editor->DecRef();
-        attr->DecRef();
-    }
-    else
-    {
-        event.Skip();
-    }
+	switch ( event.GetKeyCode() )
+	{
+		case WXK_RETURN:
+		case WXK_NUMPAD_ENTER:
+			if ( event.ControlDown() )
+			{
+				event.Skip();  // to let the edit control have the return
+			}
+			else
+			{
+				if ( GetGridCursorRow() < GetNumberRows()-1 )
+				{
+					MoveCursorDown( event.ShiftDown() );
+				}
+				else
+				{
+					// at the bottom of a column
+					DisableCellEditControl();
+				}
+			}
+			break;
+
+		case WXK_ESCAPE:
+			ClearSelection();
+			break;
+
+		case WXK_TAB:
+			if (event.ShiftDown())
+			{
+				if ( GetGridCursorCol() > 0 )
+				{
+					MoveCursorLeft( false );
+				}
+				else
+				{
+					// at left of grid
+					DisableCellEditControl();
+				}
+			}
+			else
+			{
+				if ( GetGridCursorCol() < GetNumberCols() - 1 )
+				{
+					MoveCursorRight( false );
+				}
+				else
+				{
+					// at right of grid
+					DisableCellEditControl();
+				}
+			}
+			break;
+		
+		default:
+			// is it possible to edit the current cell at all?
+			if ( !IsCellEditControlEnabled() && CanEnableCellControl() )
+			{
+				// yes, now check whether the cells editor accepts the key
+				int row = m_currentCellCoords.GetRow();
+				int col = m_currentCellCoords.GetCol();
+				wxGridCellAttr *attr = GetCellAttr(row, col);
+				wxGridCellEditor *editor = attr->GetEditor(this, row, col);
+
+				// <F2> is special and will always start editing, for
+				// other keys - ask the editor itself
+				if ( (event.GetKeyCode() == WXK_F2 && !event.HasModifiers())
+					 || editor->IsAcceptedKey(event) )
+				{
+					// ensure cell is visble
+					MakeCellVisible(row, col);
+					EnableCellEditControl();
+
+					// a problem can arise if the cell is not completely
+					// visible (even after calling MakeCellVisible the
+					// control is not created and calling StartingKey will
+					// crash the app
+					if ( event.GetKeyCode() != WXK_F2 && editor->IsCreated() && m_cellEditCtrlEnabled )
+						editor->StartingKey(event);
+				}
+				else
+				{
+					event.Skip();
+				}
+
+				editor->DecRef();
+				attr->DecRef();
+			}
+			else
+			{
+				event.Skip();
+			}
+	}
 }
 
 void wxGrid::OnEraseBackground(wxEraseEvent&)
diff -ru wxMac-2.8.0/src/mac/carbon/app.cpp wxMac-2.8.0-CL/src/mac/carbon/app.cpp
--- wxMac-2.8.0/src/mac/carbon/app.cpp	2006-12-11 23:02:12.000000000 +0100
+++ wxMac-2.8.0-CL/src/mac/carbon/app.cpp	2007-01-22 00:18:30.000000000 +0100
@@ -1539,22 +1539,11 @@
 
     bool handled = false ;
 
-    wxTopLevelWindowMac *tlw = focus->MacGetTopLevelWindow() ;
+/*  The only thing that uses EVT_CHAR_HOOK is wxDialogBase, and that's harmful, since it prevents
+    anything else from getting char events for the escape key. So we'll call it after normal
+    event handling. */
 
-    if (tlw)
-    {
-        event.SetEventType( wxEVT_CHAR_HOOK );
-        handled = tlw->GetEventHandler()->ProcessEvent( event );
-        if ( handled && event.GetSkipped() )
-            handled = false ;
-    }
-
-    if ( !handled )
-    {
-        event.SetEventType( wxEVT_CHAR );
-        event.Skip( false ) ;
-        handled = focus->GetEventHandler()->ProcessEvent( event ) ;
-    }
+    handled = focus->GetEventHandler()->ProcessEvent( event ) ;
 
     if ( !handled && (keyval == WXK_TAB) )
     {
@@ -1604,10 +1593,27 @@
             }
             else if (keyval == WXK_ESCAPE || (keyval == '.' && modifiers & cmdKey ) )
             {
-                // generate wxID_CANCEL if command-. or <esc> has been pressed (typically in dialogs)
-                wxCommandEvent new_event(wxEVT_COMMAND_BUTTON_CLICKED,wxID_CANCEL);
-                new_event.SetEventObject( focus );
-                handled = focus->GetEventHandler()->ProcessEvent( new_event );
+                wxDialogBase *tlw = wxDynamicCast(wxGetTopLevelParent(focus), wxDialogBase);
+                if (tlw)
+                {
+                    // handle cancel behaviour for dialogs
+                    event.SetEventType( wxEVT_CHAR_HOOK );
+                    handled = tlw->GetEventHandler()->ProcessEvent( event );
+                    if ( handled && event.GetSkipped() )
+                        handled = false ;
+                    if ( !handled )
+                    {
+                        event.SetEventType( wxEVT_CHAR );
+                        event.Skip( false ) ;
+                    }
+                }
+                else
+                {
+                    // generate wxID_CANCEL if command-. or <esc> has been pressed in a non-dialog window
+                    wxCommandEvent new_event(wxEVT_COMMAND_BUTTON_CLICKED,wxID_CANCEL);
+                    new_event.SetEventObject( focus );
+                    handled = focus->GetEventHandler()->ProcessEvent( new_event );
+                }
             }
         }
     }

 	  	 

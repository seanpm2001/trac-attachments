diff -uNr -X gitpattern wxWidgets-2.9.3-ORIGINAL/include/wx/dcsvg.h wxWidgets-2.9.3/include/wx/dcsvg.h
--- wxWidgets-2.9.3-ORIGINAL/include/wx/dcsvg.h	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/include/wx/dcsvg.h	2012-07-11 22:36:19.087642695 +0100
@@ -2,7 +2,7 @@
 // Name:        wx/dcsvg.h
 // Purpose:     wxSVGFileDC
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // Created:
 // Copyright:   (c) Chris Elliott
 // RCS-ID:      $Id$
@@ -15,6 +15,8 @@
 #include "wx/string.h"
 #include "wx/dc.h"
 
+#include <vector>
+
 #if wxUSE_SVG
 
 #define wxSVGVersion wxT("v0100")
@@ -54,10 +56,7 @@
         wxFAIL_MSG(wxT("wxSVGFILEDC::Clear() Call not implemented \nNot sensible for an output file?"));
     }
 
-    virtual void DestroyClippingRegion()
-    {
-        wxFAIL_MSG(wxT("wxSVGFILEDC::void Call not yet implemented"));
-    }
+    virtual void DestroyClippingRegion();
 
     virtual wxCoord GetCharHeight() const;
     virtual wxCoord GetCharWidth() const;
@@ -173,10 +172,7 @@
        wxFAIL_MSG(wxT("wxSVGFILEDC::DoSetDeviceClippingRegion not yet implemented"));
    }
 
-   virtual void DoSetClippingRegion( int WXUNUSED(x),  int WXUNUSED(y), int WXUNUSED(width), int WXUNUSED(height) )
-   {
-       wxFAIL_MSG(wxT("wxSVGFILEDC::DoSetClippingRegion not yet implemented"));
-   }
+   virtual void DoSetClippingRegion( int x,  int y, int width, int height );
 
    virtual void DoGetSizeMM( int *width, int *height ) const;
 
@@ -189,6 +185,58 @@
    void write( const wxString &s );
 
 private:
+   // In wx/dc, some actions are of start...end type (e.g. SetClippingRegion...DestroyClippingRegion)
+   // whereas others are more like state changes (e.g. SetPen).
+   // SVG <g> elements are used to delimit both of these.  However <g> is not best-suited
+   // for delimiting state changes, because in wx/dc a SetPen call inside a
+   // SetClippingRegion...SetPen...DestroyClippingRegion will still be active after the clipping
+   // region is destroyed, but if straightforward <g> nesting is implemented in the svg dc then the
+   // style associated with the middle SetPen will be lost when the region is destroyed.
+   //
+   // The workaround for this problem implemented here is to re-apply state changes as each
+   // start...end group begins and also after it ends.  I.e. state changes are copied across
+   // start...end boundaries.
+   // To enable this, StartNewGroup(GroupType,GroupElement) and EndGroup(GroupType) methods have been
+   // implemented which should be called by all drawing methods that need to start a group and leave it
+   // open after the method call is finished.  Note that methods such as DoDrawPoint, which implement
+   // closed <g>(instructions)</g> do not need to call StartNewGroup/EndGroup.
+
+   enum GroupCategory  // Describes usage of svg <g> elements
+   {
+       GrpCat_Unknown     =0, // Error category
+       GrpCat_StateChange =1, // E.g. for for change of pen (in NewGraphics)
+       GrpCat_OnOff       =2  // E.g. for DoSetClippingRegion ...DestroyClippingRegion
+   };
+   enum GroupType         // List of actions that require groups
+   {
+       // GroupType < 100: StateChangeOnOff groups
+       GrpType_NewGraphics    =0, // Used for change of pen,brush etc.
+       GrpType_ClippingRegion =1  //
+   };
+
+   // Map GroupTypes to GroupCategories.
+   // If implementing new GroupTypes it should only be necessary to update this method and write
+   // new methods analogous to NewGraphics (if then new type is of category GrpCat_StateChange) or
+   // DoSetClippingRegion and DestroyClippingRegion (if then new type is of category GrpCat_OnOff)
+   GroupCategory GroupTypeToCategory(GroupType groupType) const;
+
+   // Write start and end group (<g>) elements to the svg stream.  Should be called for all drawing
+   // instructions that need to leave a group open.  For drawing instructions that open and immediately
+   // close a group (e.g. DoDrawPoint) it is more efficient to write directly to the svg stream.
+   bool StartGroup(GroupType type, wxString & groupElement);
+   bool EndGroup(GroupType type, bool endAllGroupsOfType=false);
+
+   // Stacks of currently open <g> elements.  StartNewGroup/EndGroup manage these stacks to ensure
+   // that OnOff category group instructions are outer-most in the SVG nesting.  State category
+   // group instructions are closed before every OnOff group start/end and are immediately restarted.
+   struct GroupInstruction
+   {
+       GroupType type;
+       wxString  instruction;  // "<g style="....."> etc
+   };
+   std::vector<GroupInstruction> m_group_states;
+   std::vector<GroupInstruction> m_group_onoffs;
+
    wxFileOutputStream *m_outfile;
    wxString            m_filename;
    int                 m_sub_images; // number of png format images we have
@@ -197,6 +245,7 @@
    int                 m_width, m_height;
    double              m_dpi;
 
+   size_t              m_clip_ctr;
 private:
    DECLARE_ABSTRACT_CLASS(wxSVGFileDCImpl)
 };
diff -uNr -X gitpattern wxWidgets-2.9.3-ORIGINAL/interface/wx/dcsvg.h wxWidgets-2.9.3/interface/wx/dcsvg.h
--- wxWidgets-2.9.3-ORIGINAL/interface/wx/dcsvg.h	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/interface/wx/dcsvg.h	2012-07-11 22:13:19.006979316 +0100
@@ -13,13 +13,14 @@
     drawn, and the output produced as a vector file, in SVG format (see the W3C
     SVG Specifications <http://www.w3.org/TR/2001/REC-SVG-20010904/>). This
     format can be read by a range of programs, including a Netscape plugin
-    (Adobe), full details are given in the SVG Implementation and Resource
-    Directory <http://www.svgi.org/>. Vector formats may often be smaller than
-    raster formats.
+    (Adobe) and the open source Inkscape program (http://inkscape.org/).  Full 
+    details are given in the SVG Implementation and Resource Directory 
+    <http://www.svgi.org/>. Vector formats may often be smaller than raster 
+    formats.
 
     The intention behind wxSVGFileDC is that it can be used to produce a file
     corresponding to the screen display context, wxSVGFileDC, by passing the
-    wxSVGFileDC as a parameter instead of a wxSVGFileDC. Thus the wxSVGFileDC
+    wxSVGFileDC as a parameter instead of a wxDC. Thus the wxSVGFileDC
     is a write-only class.
 
     As the wxSVGFileDC is a vector format, raster operations like GetPixel()
@@ -68,21 +69,60 @@
     */
     void SetLogicalFunction(wxRasterOperationMode function);
 
+    /**
+        Sets the clipping region for this device context to the intersection of 
+        the given region described by the parameters of this method and the previously
+        set clipping region.
+        Clipping is implemented in the SVG output using SVG group elements (<g>), with
+        nested group elements being used to represent clipping region intersections when
+        two or more calls are made to SetClippingRegion()
+        'State change instructions' such as changes of pen, brush etc. are also represented
+        with SVG group elements.  These are closed and re-opened at clipping group element
+        boundaries to ensure that graphics states that are set during clipping do not go out 
+        of scope after the clipping region is destroyed (consistent with wxDC). 
+    */
+    void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width,
+                           wxCoord height);
+
+    /**
+        This is an overloaded member function, provided for convenience. It differs from the
+        above function only in what argument(s) it accepts.
+    */
+    void SetClippingRegion(const wxPoint& pt, const wxSize& sz);
+
+    /**
+        This is an overloaded member function, provided for convenience. It differs from the
+        above function only in what argument(s) it accepts.
+    */
+    void SetClippingRegion(const wxRect& rect);
+
+    /**
+        This function is not implemented in this DC class. 
+        It could be implemented in future if a GetPoints() function were made available on wxRegion.
+    */
+    void SetClippingRegion(const wxRegion& region);
+
+    /**
+        Destroys the current clipping region so that none of the DC is clipped. 
+        Since intersections arising from sequential calls to SetClippingRegion are represented
+        with nested SVG group elements (<g>), all such groups are closed when 
+        DestroyClippingRegion is called.
+        'State change instructions' such as changes of pen, brush etc. are also represented
+        with SVG group elements.  These are closed and re-opened at clipping group element
+        boundaries to ensure that graphics states that are set during clipping do not go out 
+        of scope after the clipping region is destroyed (consistent with wxDC).
+    */
+    void DestroyClippingRegion();
+
     //@{
     /**
         Functions not implemented in this DC class.
     */
     void CrossHair(wxCoord x, wxCoord y);
-    void DestroyClippingRegion();
     bool FloodFill(wxCoord x, wxCoord y, const wxColour& colour,
                    wxFloodFillStyle style = wxFLOOD_SURFACE);
     void GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *width, wxCoord *height) const;
     bool GetPixel(wxCoord x, wxCoord y, wxColour* colour) const;
-    void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width,
-                           wxCoord height);
-    void SetClippingRegion(const wxPoint& pt, const wxSize& sz);
-    void SetClippingRegion(const wxRect& rect);
-    void SetClippingRegion(const wxRegion& region);
     void SetPalette(const wxPalette& palette);
     bool StartDoc(const wxString& message);
     //@}
diff -uNr -X gitpattern wxWidgets-2.9.3-ORIGINAL/samples/svg/svgtest.cpp wxWidgets-2.9.3/samples/svg/svgtest.cpp
--- wxWidgets-2.9.3-ORIGINAL/samples/svg/svgtest.cpp	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/samples/svg/svgtest.cpp	2012-07-11 22:36:07.000862559 +0100
@@ -2,7 +2,7 @@
 // Name:        svgtest.cpp
 // Purpose:     SVG sample
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // RCS-ID:      $Id$
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -321,7 +321,7 @@
     SetBackgroundColour(wxColour(wxT("WHITE")));
 
     m_child = parent;
-    m_index = m_child->GetFrame()->GetCountOfChildren() % 7;
+    m_index = m_child->GetFrame()->GetCountOfChildren() % 8;
 }
 
 // Define the repainting behaviour
@@ -493,6 +493,67 @@
 #endif // wxUSE_STATUSBAR
             break;
 
+        case 7:
+            dc.SetTextForeground(wxT("RED"));
+            dc.DrawText(wxT("Red = Clipping Off"), 30, 5);
+            dc.SetTextForeground(wxT("GREEN"));
+            dc.DrawText(wxT("Green = Clipping On"), 30, 25);
+
+            dc.SetTextForeground(wxT("BLACK"));
+
+            dc.SetPen(*wxRED_PEN);
+            dc.SetBrush (wxBrush (wxT("SALMON"),wxBRUSHSTYLE_TRANSPARENT));
+            dc.DrawCheckMark ( 80,50,75,75);
+            dc.DrawRectangle ( 80,50,75,75);
+
+            dc.SetPen(*wxGREEN_PEN);
+
+            // Clipped checkmarks
+            dc.DrawRectangle(180,50,75,75);
+            dc.SetClippingRegion(180,50,75,75);                   // x,y,width,height version
+            dc.DrawCheckMark ( 180,50,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect(80,150,75,75));
+            dc.SetClippingRegion(wxPoint(80,150),wxSize(75,75));  // pt,size version
+            dc.DrawCheckMark ( 80,150,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect(180,150,75,75));
+            dc.SetClippingRegion(wxRect(180,150,75,75));          // rect version
+            dc.DrawCheckMark ( 180,150,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect( 80,250,50,65));
+            dc.DrawRectangle(wxRect(105,260,50,65));
+            dc.SetClippingRegion(wxRect( 80,250,50,65));  // second call to SetClippingRegion
+            dc.SetClippingRegion(wxRect(105,260,50,65));  // forms intersection with previous
+            dc.DrawCheckMark(80,250,75,75);
+            dc.DestroyClippingRegion();                   // only one call to destroy (there's no stack)
+
+            /*
+            ** Clipping by wxRegion not implemented for SVG.   Should be
+            ** possible, but need to access points that define the wxRegion
+            ** from inside DoSetDeviceClippingRegion() and wxRegion does not
+            ** implement anything like getPoints().
+            points[0].x = 180; points[0].y = 250;
+            points[1].x = 255; points[1].y = 250;
+            points[2].x = 180; points[2].y = 325;
+            points[3].x = 255; points[3].y = 325;
+            points[4].x = 180; points[4].y = 250;
+
+            dc.DrawLines (5, points);
+            wxRegion reg = wxRegion(5,points);
+
+            dc.SetClippingRegion(reg);
+            dc.DrawCheckMark ( 180,250,75,75);
+            dc.DestroyClippingRegion();
+            */
+
+#if wxUSE_STATUSBAR
+            s = wxT("Clipping region");
+#endif // wxUSE_STATUSBAR
+            break;
     }
 #if wxUSE_STATUSBAR
     m_child->SetStatusText(s);
diff -uNr -X gitpattern wxWidgets-2.9.3-ORIGINAL/src/common/dcsvg.cpp wxWidgets-2.9.3/src/common/dcsvg.cpp
--- wxWidgets-2.9.3-ORIGINAL/src/common/dcsvg.cpp	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/src/common/dcsvg.cpp	2012-07-11 22:36:35.962984688 +0100
@@ -2,7 +2,7 @@
 // Name:        src/common/svg.cpp
 // Purpose:     SVG sample
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // RCS-ID:      $Id$
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -130,6 +130,8 @@
 
     m_OK = true;
 
+    m_clip_ctr = 0;
+
     m_mm_to_pix_x = dpi/25.4;
     m_mm_to_pix_y = dpi/25.4;
 
@@ -167,18 +169,345 @@
         write(s);
         s = wxString (wxT("<desc>Picture generated by wxSVG ")) + wxSVGVersion + wxT(" </desc>")+ wxT("\n");
         write(s);
-        s =  wxT("<g style=\"fill:black; stroke:black; stroke-width:1\">") + wxString(wxT("\n"));
-        write(s);
+
+        // Initialise graphics
+        s =  wxT("<g style=\"fill:black; stroke:black; stroke-width:1\">");
+        StartGroup(GrpType_NewGraphics,s);
     }
 }
 
 wxSVGFileDCImpl::~wxSVGFileDCImpl()
 {
-    wxString s = wxT("</g> \n</svg> \n");
+    wxString s;
+
+    // Close groups for each active state and onoff, and close svg
+    wxString closures;
+    while(m_group_states.size()>0)
+    {
+        s << "</g>";
+        m_group_states.pop_back();
+    }
+    while(m_group_onoffs.size()>0)
+    {
+        s << "</g>";
+        m_group_onoffs.pop_back();
+    }
+
+    s << "\n</svg>\n";
+
     write(s);
     delete m_outfile;
 }
 
+wxSVGFileDCImpl::GroupCategory wxSVGFileDCImpl::GroupTypeToCategory(GroupType groupType) const
+{
+    switch(groupType)
+    {
+    case GrpType_NewGraphics:
+        return(GrpCat_StateChange);
+        break;
+    case GrpType_ClippingRegion:
+        return(GrpCat_OnOff);
+        break;
+    default:
+        return(GrpCat_Unknown);
+    }
+}
+
+bool wxSVGFileDCImpl::StartGroup(GroupType groupType, wxString & groupElement)
+{
+    // Manage m_group_instructions so that instructions are OnOff(s) and StateChange(s).
+    // Keep separate lists for OnOff and StateChange to keep this simple.
+    // Approach is:
+    //   For StateChange category:  Only one instance of each StateChange in stack
+    //     1. Rewind back to matching StateChange (if any) closing groups as we go
+    //     2. Start new group for this StateChange
+    //     3. Re-apply (start new groups for) StateChange(s) that were rewound
+    //   For OnOff category:  Can be several nested instance of OnOffs in list
+    //     1. Rewind back over all StateChange(s) closing groups as we go.
+    //     2. Start new group for this OnOff
+    //     3. Re-apply (start new groups for) StateChange(s) that were rewound
+
+    // Determine category for group
+    GroupCategory grpCat = GroupTypeToCategory(groupType);
+    if(grpCat == GrpCat_Unknown)
+    {
+        wxFAIL_MSG(wxT("wxSVGFILEDC::StartGroup - GroupType not hanlded"));
+        return false;
+    }
+
+    // Handle category
+    switch(grpCat)
+    {
+    case GrpCat_StateChange:
+    {
+        wxString svg;
+
+        // 1. Rewind back to matching StateChange (if any) closing groups as we go
+        bool hasExistingState = false;
+        wxString state_closures;
+
+        std::vector<GroupInstruction>::iterator p_state;
+        p_state = m_group_states.end();
+        while(!hasExistingState && p_state != m_group_states.begin())
+        {
+            --p_state;
+            state_closures << "</g>";
+
+            if(p_state->type==groupType)
+            {
+                hasExistingState = true;
+
+                // If new group is the same as existing, don't write
+                if(groupElement==p_state->instruction)
+                {
+                    return true;
+                }
+            }
+        }
+
+        // 2. Start new group for this StateChange
+        if(hasExistingState)
+        {
+            // Close all groups to here and start new group for this instruction
+            svg << state_closures << "\n";
+            svg << groupElement << "\n";
+            // Store instruction for this state (overwrite existing)
+            p_state->instruction = groupElement;
+        }
+        else
+        {
+            // Start new group for this instruction
+            svg << groupElement << "\n";
+            // Store instruction for this state (add to back)
+            GroupInstruction grpInstr;
+            grpInstr.type = groupType;
+            grpInstr.instruction = groupElement;
+            m_group_states.push_back(grpInstr);
+        }
+
+        // 3. Re-apply (start new groups for) StateChange(s) that were rewound
+        if(hasExistingState)
+        {
+            p_state++;  // have overwritten the existing instruction
+            while(p_state != m_group_states.end())
+            {
+                svg << p_state->instruction << "\n";
+                p_state++;
+            }
+        }
+
+        // Write to file
+        write(svg);
+    }
+        break;
+    case GrpCat_OnOff:
+    {
+        wxString svg;
+
+        // 1. Rewind back over all StateChange(s) closing groups as we go.
+        wxString state_closures;
+
+        std::vector<GroupInstruction>::iterator p_state;
+        p_state = m_group_states.end();
+        while(p_state != m_group_states.begin())
+        {
+            --p_state;
+            state_closures << "</g>";
+        }
+        svg << state_closures << "\n";
+
+        // 2. Start new group for this OnOff (and store instruction)
+        svg << groupElement;
+
+        GroupInstruction grpInstr;
+        grpInstr.type = groupType;
+        grpInstr.instruction = groupElement;
+        m_group_onoffs.push_back(grpInstr);
+
+        // 3. Re-apply (start new groups for) StateChange(s) that were rewound
+        while(p_state != m_group_states.end())
+        {
+            svg << p_state->instruction << "\n";
+            p_state++;
+        }
+
+        write(svg);
+    }
+        break;
+    default:
+        wxFAIL_MSG(wxT("wxSVGFILEDC::StartGroup - GroupCategory not handled"));
+        return false;
+    }
+
+    return true;
+}
+
+bool wxSVGFileDCImpl::EndGroup(GroupType groupType, bool endAllGroupsOfType)
+{
+    // Manage m_group_instructions so that instructions are OnOff(s) and StateChange(s).
+    // Keep separate lists for OnOff and StateChange to keep this simple.
+    // Approach is:
+    //   For StateChange category:  Only one instance of each StateChange in list
+    //     ** Note that there is no need to call EndGroup for StateChange category   **
+    //     ** since StartGroup automatically closes previous groups. Nevertheless,   **
+    //     ** method is implemented in case an explicit closure is wanted in future. **
+    //     1. Rewind back to matching StateChange (if any) closing groups as we go
+    //     2. Start new group for this StateChange
+    //     3. Re-apply (start new groups for) StateChange(s) that were rewound
+    //   For OnOff category:  Can be several nested instance of OnOffs in list
+    //     1. Rewind back over all StateChange(s) closing groups as we go.
+    //     2. Start new group for this OnOff
+    //     3. Re-apply (start new groups for) StateChange(s) that were rewound
+
+    // Determine category for group
+    GroupCategory grpCat = GroupTypeToCategory(groupType);
+    if(grpCat == GrpCat_Unknown)
+    {
+        wxFAIL_MSG(wxT("wxSVGFILEDC::StartGroup - GroupType not hanlded"));
+        return false;
+    }
+
+    // Handle category
+    switch(grpCat)
+    {
+    case GrpCat_StateChange:
+    {
+        wxString svg;
+
+        // 1. Rewind back to matching StateChange (if any) closing groups as we go
+        bool foundExistingState = false;
+        wxString state_closures;
+
+        std::vector<GroupInstruction>::iterator p_state;
+        p_state = m_group_states.end();
+        while(!foundExistingState && p_state != m_group_states.begin())
+        {
+            --p_state;
+            state_closures << "</g>";
+
+            if(p_state->type==groupType)
+            {
+                foundExistingState = true;
+            }
+        }
+
+        if(!foundExistingState)
+        {
+            wxFAIL_MSG(wxT("wxSVGFILEDC::EndGroup - GroupType not found"));
+            return false;
+        }
+
+        svg << state_closures << "\n";
+
+        // 2. Re-apply (start new groups for) StateChange(s) that were rewound and delete the closed state
+        std::vector<GroupInstruction>::iterator p_state_to_delete = p_state;
+        p_state++;  // skip forward past group to be closed
+        while(p_state != m_group_states.end())
+        {
+            svg << p_state->instruction << "\n";
+            p_state++;
+        }
+
+        // No need to handle endAllGroupsOfType - StateChange is guaranteed to have only one instance of
+        // each type
+
+        // Erase group and write SVG
+        m_group_states.erase(p_state_to_delete);
+        write(svg);
+    }
+        break;
+    case GrpCat_OnOff:
+    {
+        wxString svg;
+
+        // 1. Rewind back over all StateChange(s) closing groups as we go.
+        wxString state_closures;
+
+        std::vector<GroupInstruction>::iterator p_state;
+        p_state = m_group_states.end();
+        while(p_state != m_group_states.begin())
+        {
+            --p_state;
+            state_closures << "</g>";
+        }
+        svg << state_closures << "\n";
+
+        // 2. Rewind until we find this OnOff, closing groups as we go
+        bool foundExistingOnOff = false;
+        wxString onoff_closures;
+
+        std::vector<GroupInstruction>::iterator p_onoff;
+        p_onoff = m_group_onoffs.end();
+        while(!foundExistingOnOff && p_onoff != m_group_onoffs.begin())
+        {
+            --p_onoff;
+            onoff_closures << "</g>";
+
+            if(p_onoff->type==groupType)
+            {
+                foundExistingOnOff = true;
+            }
+        }
+
+        if(!foundExistingOnOff)
+        {
+            wxFAIL_MSG(wxT("wxSVGFILEDC::EndGroup - GroupType not found"));
+            return false;
+        }
+
+        svg << onoff_closures << "\n";
+
+        // 3. Re-apply (start new groups for) OnOff(s) and StateChange(s) that were rewound
+        std::vector<GroupInstruction>::iterator p_onoff_to_delete = p_onoff;
+        p_onoff++;
+        while(p_onoff != m_group_onoffs.end())
+        {
+            svg << p_onoff->instruction;
+            p_onoff++;
+        }
+        while(p_state != m_group_states.end())
+        {
+            svg << p_state->instruction;
+            p_state++;
+        }
+
+        // Seek more OnOffs of the same type if closing all groups
+        bool foundMoreOnOff = false;
+        if(endAllGroupsOfType)
+        {
+            // Look further up stack to see if there are any more instances of this groupType
+            std::vector<GroupInstruction>::iterator p_onoff_more = p_onoff_to_delete;
+            while(!foundMoreOnOff && p_onoff_more != m_group_onoffs.begin())
+            {
+                --p_onoff_more;
+
+                if(p_onoff_more->type==groupType)
+                {
+                    foundMoreOnOff = true;
+                }
+            }
+        }
+
+        // Erase group and write SVG
+        m_group_onoffs.erase(p_onoff_to_delete);
+        write(svg);
+
+        // Call again if closing all groups
+        if(foundMoreOnOff)
+        {
+            return EndGroup(groupType,endAllGroupsOfType);
+        }
+    }
+        break;
+    default:
+        wxFAIL_MSG(wxT("wxSVGFILEDC::StartGroup - GroupCategory not hanlded"));
+        return false;
+    }
+
+    return true;
+}
+
 void wxSVGFileDCImpl::DoGetSizeMM( int *width, int *height ) const
 {
     if (width)
@@ -467,6 +796,29 @@
     }
 }
 
+void wxSVGFileDCImpl::DoSetClippingRegion( int x,  int y, int width, int height )
+{
+     m_clip_ctr++;
+
+     wxString str;
+     str << "<defs>\n"
+         << "<clipPath id=\"clip" << m_clip_ctr << "\">\n"
+         << "<rect id=\"cliprect" << m_clip_ctr << "\" x=\"" << x << "\" y=\"" << y << "\" width=\"" << width << "\" height=\"" << height << "\" style=\"stroke: gray; fill: none;\"/>\n"
+         << "</clipPath>\n"
+         << "</defs>\n"
+         << "<g style=\"clip-path: url(#clip" << m_clip_ctr << ");\">\n";
+
+     StartGroup(GrpType_ClippingRegion, str);
+}
+
+void wxSVGFileDCImpl::DestroyClippingRegion()
+{
+    // Subsequent calls to SetClippingRegion form intersection of current clipping regoin with the
+    // new region.  SVG does this by nesting, but wxDC only stores one region (not a stack).  So have
+    // to close all nested clipping regions here.  Hence endAllGroupsOfType=true below.
+    EndGroup(GrpType_ClippingRegion,true);
+}
+
 void wxSVGFileDCImpl::DoGetTextExtent(const wxString& string, wxCoord *w, wxCoord *h, wxCoord *descent , wxCoord *externalLeading , const wxFont *font) const
 
 {
@@ -533,7 +885,7 @@
 {
     wxString s, sBrush, sPenCap, sPenJoin, sPenStyle, sLast, sWarn;
 
-    sBrush = wxT("</g>\n<g style=\"") + wxBrushString ( m_brush.GetColour(), m_brush.GetStyle() )
+    sBrush = wxT("<g style=\"") + wxBrushString ( m_brush.GetColour(), m_brush.GetStyle() )
             + wxPenString(m_pen.GetColour(), m_pen.GetStyle());
 
     switch ( m_pen.GetCap() )
@@ -565,8 +917,13 @@
     sLast.Printf( wxT("stroke-width:%d\" \n   transform=\"translate(%s %s) scale(%s %s)\">"),
                 m_pen.GetWidth(), NumStr(m_logicalOriginX), NumStr(m_logicalOriginY), NumStr(m_scaleX), NumStr(m_scaleY)  );
 
-    s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast + wxT("\n") + sWarn;
-    write(s);
+    s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast;
+    if(sWarn.Length()>0)
+    {
+        s << wxT("\n") + sWarn;
+    }
+
+    StartGroup(GrpType_NewGraphics, s);
     m_graphics_changed = false;
 }
 

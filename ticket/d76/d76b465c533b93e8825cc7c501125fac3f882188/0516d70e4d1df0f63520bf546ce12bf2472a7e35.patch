diff -ur -X MakePatch_gitpattern wxWidgets-2.9.3-ORIGINAL/include/wx/dcsvg.h wxWidgets-2.9.3/include/wx/dcsvg.h
--- wxWidgets-2.9.3-ORIGINAL/include/wx/dcsvg.h	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/include/wx/dcsvg.h	2012-09-17 09:58:42.878244530 +0100
@@ -2,7 +2,7 @@
 // Name:        wx/dcsvg.h
 // Purpose:     wxSVGFileDC
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // Created:
 // Copyright:   (c) Chris Elliott
 // RCS-ID:      $Id$
@@ -54,10 +54,7 @@
         wxFAIL_MSG(wxT("wxSVGFILEDC::Clear() Call not implemented \nNot sensible for an output file?"));
     }
 
-    virtual void DestroyClippingRegion()
-    {
-        wxFAIL_MSG(wxT("wxSVGFILEDC::void Call not yet implemented"));
-    }
+    virtual void DestroyClippingRegion();
 
     virtual wxCoord GetCharHeight() const;
     virtual wxCoord GetCharWidth() const;
@@ -173,10 +170,7 @@
        wxFAIL_MSG(wxT("wxSVGFILEDC::DoSetDeviceClippingRegion not yet implemented"));
    }
 
-   virtual void DoSetClippingRegion( int WXUNUSED(x),  int WXUNUSED(y), int WXUNUSED(width), int WXUNUSED(height) )
-   {
-       wxFAIL_MSG(wxT("wxSVGFILEDC::DoSetClippingRegion not yet implemented"));
-   }
+   virtual void DoSetClippingRegion( int x,  int y, int width, int height );
 
    virtual void DoGetSizeMM( int *width, int *height ) const;
 
@@ -184,7 +178,13 @@
 
    void Init (const wxString &filename, int width, int height, double dpi);
 
-   void NewGraphics();
+   /**
+    * Closes current graphics group element and starts a new one with the
+    * current pen/brush/etc.
+    * Some methods e.g. SetClippingRegion) need to manage closure of current
+    * graphics, and so pass endPrevious=false
+   */
+   void NewGraphics(bool endPrevious=true);
 
    void write( const wxString &s );
 
@@ -197,6 +197,8 @@
    int                 m_width, m_height;
    double              m_dpi;
 
+   size_t              m_clip_ctr;     // records size of current clipping 'stack' in svg
+   size_t              m_clip_id_ctr;  // used in clip group name for uniqueness
 private:
    DECLARE_ABSTRACT_CLASS(wxSVGFileDCImpl)
 };
diff -ur -X MakePatch_gitpattern wxWidgets-2.9.3-ORIGINAL/interface/wx/dcsvg.h wxWidgets-2.9.3/interface/wx/dcsvg.h
--- wxWidgets-2.9.3-ORIGINAL/interface/wx/dcsvg.h	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/interface/wx/dcsvg.h	2012-09-17 09:39:15.209432850 +0100
@@ -13,13 +13,14 @@
     drawn, and the output produced as a vector file, in SVG format (see the W3C
     SVG Specifications <http://www.w3.org/TR/2001/REC-SVG-20010904/>). This
     format can be read by a range of programs, including a Netscape plugin
-    (Adobe), full details are given in the SVG Implementation and Resource
-    Directory <http://www.svgi.org/>. Vector formats may often be smaller than
-    raster formats.
+    (Adobe) and the open source Inkscape program (http://inkscape.org/).  Full 
+    details are given in the SVG Implementation and Resource Directory 
+    <http://www.svgi.org/>. Vector formats may often be smaller than raster 
+    formats.
 
     The intention behind wxSVGFileDC is that it can be used to produce a file
     corresponding to the screen display context, wxSVGFileDC, by passing the
-    wxSVGFileDC as a parameter instead of a wxSVGFileDC. Thus the wxSVGFileDC
+    wxSVGFileDC as a parameter instead of a wxDC. Thus the wxSVGFileDC
     is a write-only class.
 
     As the wxSVGFileDC is a vector format, raster operations like GetPixel()
@@ -68,21 +69,52 @@
     */
     void SetLogicalFunction(wxRasterOperationMode function);
 
+    /**
+        Sets the clipping region for this device context to the intersection of 
+        the given region described by the parameters of this method and the previously
+        set clipping region.
+        Clipping is implemented in the SVG output using SVG group elements (<g>), with
+        nested group elements being used to represent clipping region intersections when
+        two or more calls are made to SetClippingRegion().
+    */
+    void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width,
+                           wxCoord height);
+
+    /**
+        This is an overloaded member function, provided for convenience. It differs from the
+        above function only in what argument(s) it accepts.
+    */
+    void SetClippingRegion(const wxPoint& pt, const wxSize& sz);
+
+    /**
+        This is an overloaded member function, provided for convenience. It differs from the
+        above function only in what argument(s) it accepts.
+    */
+    void SetClippingRegion(const wxRect& rect);
+
+    /**
+        This function is not implemented in this DC class. 
+        It could be implemented in future if a GetPoints() function were made available on wxRegion.
+    */
+    void SetClippingRegion(const wxRegion& region);
+
+    /**
+        Destroys the current clipping region so that none of the DC is clipped. 
+        Since intersections arising from sequential calls to SetClippingRegion are represented
+        with nested SVG group elements (<g>), all such groups are closed when 
+        DestroyClippingRegion is called.
+    */
+    void DestroyClippingRegion();
+
     //@{
     /**
         Functions not implemented in this DC class.
     */
     void CrossHair(wxCoord x, wxCoord y);
-    void DestroyClippingRegion();
     bool FloodFill(wxCoord x, wxCoord y, const wxColour& colour,
                    wxFloodFillStyle style = wxFLOOD_SURFACE);
     void GetClippingBox(wxCoord *x, wxCoord *y, wxCoord *width, wxCoord *height) const;
     bool GetPixel(wxCoord x, wxCoord y, wxColour* colour) const;
-    void SetClippingRegion(wxCoord x, wxCoord y, wxCoord width,
-                           wxCoord height);
-    void SetClippingRegion(const wxPoint& pt, const wxSize& sz);
-    void SetClippingRegion(const wxRect& rect);
-    void SetClippingRegion(const wxRegion& region);
     void SetPalette(const wxPalette& palette);
     bool StartDoc(const wxString& message);
     //@}
diff -ur -X MakePatch_gitpattern wxWidgets-2.9.3-ORIGINAL/samples/svg/svgtest.cpp wxWidgets-2.9.3/samples/svg/svgtest.cpp
--- wxWidgets-2.9.3-ORIGINAL/samples/svg/svgtest.cpp	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/samples/svg/svgtest.cpp	2012-07-11 22:36:07.000862559 +0100
@@ -2,7 +2,7 @@
 // Name:        svgtest.cpp
 // Purpose:     SVG sample
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // RCS-ID:      $Id$
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -321,7 +321,7 @@
     SetBackgroundColour(wxColour(wxT("WHITE")));
 
     m_child = parent;
-    m_index = m_child->GetFrame()->GetCountOfChildren() % 7;
+    m_index = m_child->GetFrame()->GetCountOfChildren() % 8;
 }
 
 // Define the repainting behaviour
@@ -493,6 +493,67 @@
 #endif // wxUSE_STATUSBAR
             break;
 
+        case 7:
+            dc.SetTextForeground(wxT("RED"));
+            dc.DrawText(wxT("Red = Clipping Off"), 30, 5);
+            dc.SetTextForeground(wxT("GREEN"));
+            dc.DrawText(wxT("Green = Clipping On"), 30, 25);
+
+            dc.SetTextForeground(wxT("BLACK"));
+
+            dc.SetPen(*wxRED_PEN);
+            dc.SetBrush (wxBrush (wxT("SALMON"),wxBRUSHSTYLE_TRANSPARENT));
+            dc.DrawCheckMark ( 80,50,75,75);
+            dc.DrawRectangle ( 80,50,75,75);
+
+            dc.SetPen(*wxGREEN_PEN);
+
+            // Clipped checkmarks
+            dc.DrawRectangle(180,50,75,75);
+            dc.SetClippingRegion(180,50,75,75);                   // x,y,width,height version
+            dc.DrawCheckMark ( 180,50,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect(80,150,75,75));
+            dc.SetClippingRegion(wxPoint(80,150),wxSize(75,75));  // pt,size version
+            dc.DrawCheckMark ( 80,150,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect(180,150,75,75));
+            dc.SetClippingRegion(wxRect(180,150,75,75));          // rect version
+            dc.DrawCheckMark ( 180,150,75,75);
+            dc.DestroyClippingRegion();
+
+            dc.DrawRectangle(wxRect( 80,250,50,65));
+            dc.DrawRectangle(wxRect(105,260,50,65));
+            dc.SetClippingRegion(wxRect( 80,250,50,65));  // second call to SetClippingRegion
+            dc.SetClippingRegion(wxRect(105,260,50,65));  // forms intersection with previous
+            dc.DrawCheckMark(80,250,75,75);
+            dc.DestroyClippingRegion();                   // only one call to destroy (there's no stack)
+
+            /*
+            ** Clipping by wxRegion not implemented for SVG.   Should be
+            ** possible, but need to access points that define the wxRegion
+            ** from inside DoSetDeviceClippingRegion() and wxRegion does not
+            ** implement anything like getPoints().
+            points[0].x = 180; points[0].y = 250;
+            points[1].x = 255; points[1].y = 250;
+            points[2].x = 180; points[2].y = 325;
+            points[3].x = 255; points[3].y = 325;
+            points[4].x = 180; points[4].y = 250;
+
+            dc.DrawLines (5, points);
+            wxRegion reg = wxRegion(5,points);
+
+            dc.SetClippingRegion(reg);
+            dc.DrawCheckMark ( 180,250,75,75);
+            dc.DestroyClippingRegion();
+            */
+
+#if wxUSE_STATUSBAR
+            s = wxT("Clipping region");
+#endif // wxUSE_STATUSBAR
+            break;
     }
 #if wxUSE_STATUSBAR
     m_child->SetStatusText(s);
diff -ur -X MakePatch_gitpattern wxWidgets-2.9.3-ORIGINAL/src/common/dcsvg.cpp wxWidgets-2.9.3/src/common/dcsvg.cpp
--- wxWidgets-2.9.3-ORIGINAL/src/common/dcsvg.cpp	2011-12-14 18:42:11.000000000 +0000
+++ wxWidgets-2.9.3/src/common/dcsvg.cpp	2012-09-17 10:00:03.973758723 +0100
@@ -2,7 +2,7 @@
 // Name:        src/common/svg.cpp
 // Purpose:     SVG sample
 // Author:      Chris Elliott
-// Modified by:
+// Modified by: Steve Benbow
 // RCS-ID:      $Id$
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -130,6 +130,9 @@
 
     m_OK = true;
 
+    m_clip_ctr = 0;
+    m_clip_id_ctr = 0;
+
     m_mm_to_pix_x = dpi/25.4;
     m_mm_to_pix_y = dpi/25.4;
 
@@ -167,14 +170,17 @@
         write(s);
         s = wxString (wxT("<desc>Picture generated by wxSVG ")) + wxSVGVersion + wxT(" </desc>")+ wxT("\n");
         write(s);
-        s =  wxT("<g style=\"fill:black; stroke:black; stroke-width:1\">") + wxString(wxT("\n"));
+
+        // Initialise graphics
+        s =  wxT("<g style=\"fill:black; stroke:black; stroke-width:1\">\n");
         write(s);
     }
 }
 
 wxSVGFileDCImpl::~wxSVGFileDCImpl()
 {
-    wxString s = wxT("</g> \n</svg> \n");
+    wxString s = wxT("\n</g>\n</svg>\n");
+
     write(s);
     delete m_outfile;
 }
@@ -467,6 +473,54 @@
     }
 }
 
+void wxSVGFileDCImpl::DoSetClippingRegion( int x,  int y, int width, int height )
+{
+    wxString svg;
+
+    // End current graphics group to ensure proper xml nesting (e.g. so that graphics can be subsequently
+    // changed inside the clipping region)
+    svg << "</g>\n";
+
+        svg << "<defs>\n"
+         << "<clipPath id=\"clip" << m_clip_id_ctr << "\">\n"
+         << "<rect id=\"cliprect" << m_clip_id_ctr << "\" x=\"" << x << "\" y=\"" << y << "\" width=\"" << width << "\" height=\"" << height << "\" style=\"stroke: gray; fill: none;\"/>\n"
+         << "</clipPath>\n"
+         << "</defs>\n"
+         << "<g style=\"clip-path: url(#clip" << m_clip_id_ctr << ");\">\n";
+
+    write(svg);
+
+    // Re-apply current graphics to ensure proper xml nesting
+    NewGraphics(false);
+
+    m_clip_ctr++;
+    m_clip_id_ctr++;
+}
+
+void wxSVGFileDCImpl::DestroyClippingRegion()
+{
+    wxString svg;
+
+    // End current graphics element to ensure proper xml nesting (e.g. graphics might have been
+    // changed inside the clipping region)
+    svg << "</g>\n";
+
+    // Close clipping group elements
+    for( size_t i=0; i<m_clip_ctr; i++ )
+    {
+        svg << "</g>";
+    }
+    svg << "\n";
+
+    write(svg);
+
+    // Re-apply current graphics (e.g. brush may have been changed inside one of the clipped regions - that
+    // change will have been lost after xml elements for the clipped region have been closed).
+    NewGraphics(false);
+
+    m_clip_ctr = 0;
+}
+
 void wxSVGFileDCImpl::DoGetTextExtent(const wxString& string, wxCoord *w, wxCoord *h, wxCoord *descent , wxCoord *externalLeading , const wxFont *font) const
 
 {
@@ -529,11 +583,16 @@
     m_graphics_changed = true;
 }
 
-void wxSVGFileDCImpl::NewGraphics()
+void wxSVGFileDCImpl::NewGraphics(bool endPrevious)
 {
-    wxString s, sBrush, sPenCap, sPenJoin, sPenStyle, sLast, sWarn;
+    wxString s, sBrush, sPenCap, sPenJoin, sPenStyle, sLast;
+
+    if(endPrevious)
+    {
+        sBrush += wxT("</g>\n");
+    }
 
-    sBrush = wxT("</g>\n<g style=\"") + wxBrushString ( m_brush.GetColour(), m_brush.GetStyle() )
+    sBrush += wxT("<g style=\"") + wxBrushString ( m_brush.GetColour(), m_brush.GetStyle() )
             + wxPenString(m_pen.GetColour(), m_pen.GetStyle());
 
     switch ( m_pen.GetCap() )
@@ -565,8 +624,9 @@
     sLast.Printf( wxT("stroke-width:%d\" \n   transform=\"translate(%s %s) scale(%s %s)\">"),
                 m_pen.GetWidth(), NumStr(m_logicalOriginX), NumStr(m_logicalOriginY), NumStr(m_scaleX), NumStr(m_scaleY)  );
 
-    s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast + wxT("\n") + sWarn;
+    s = sBrush + sPenCap + sPenJoin + sPenStyle + sLast + wxT("\n");
     write(s);
+
     m_graphics_changed = false;
 }


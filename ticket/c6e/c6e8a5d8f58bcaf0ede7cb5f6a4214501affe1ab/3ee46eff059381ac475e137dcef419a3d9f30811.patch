Index: docs/doxygen/overviews/xrc.h
===================================================================
--- docs/doxygen/overviews/xrc.h	(revision 60515)
+++ docs/doxygen/overviews/xrc.h	(working copy)
@@ -384,6 +384,7 @@
               </object>
             </object>
             <label>Page</label>
+            <image>0</image>
           </object>
           <object class="notebookpage">
             <object class="wxPanel">
@@ -397,8 +398,14 @@
               </object>
             </object>
             <label>Page 2</label>
+            <image>1</image>
           </object>
           <usenotebooksizer>1</usenotebooksizer>
+        <imagelist>
+            <size>16,16</size>
+            <bitmap stock_id="wxART_QUESTION"/>
+            <bitmap stock_id="wxART_WARNING"/>
+        </imagelist>
         </object>
         <flag>wxEXPAND</flag>
       </object>
Index: docs/doxygen/overviews/xrc_format.h
===================================================================
--- docs/doxygen/overviews/xrc_format.h	(revision 60515)
+++ docs/doxygen/overviews/xrc_format.h	(working copy)
@@ -660,11 +660,10 @@
 
 @subsubsection xrc_wxchoicebook wxChoicebook
 
-No additional properties.
-
 A choicebook can have one or more child objects of the @c choicebookpage
 pseudo-class (similarly to @ref xrc_wxnotebook "wxNotebook" and its
-@c notebookpage). @c choicebookpage objects have the following properties:
+@c notebookpage) and one child object of the @ref xrc_wximagelist class.
+@c choicebookpage objects have the following properties:
 
 @beginTable
 @hdr3col{property, type, description}
@@ -672,6 +671,9 @@
      Sheet page's title (required).}
 @row3col{bitmap, @ref overview_xrcformat_type_bitmap,
      Bitmap shown alongside the label (default: none).}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the image list.}
 @row3col{selected, @ref overview_xrcformat_type_bool,
      Is the page selected initially (only one page can be selected; default: 0)?}
 @endTable
@@ -868,6 +870,42 @@
 @endTable
 
 
+@subsubsection xrc_wximagelist wxImageList
+
+The imagelist can be used as a child object for the following classes:
+    - @ref xrc_wxchoicebook
+    - @ref xrc_wxlistbook
+    - @ref xrc_wxlistctrl
+    - @ref xrc_wxnotebook
+    - @ref xrc_wxtreebook
+    - @ref xrc_wxtreectrl
+
+The available properties are:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{bitmap, @ref overview_xrcformat_type_bitmap,
+     Adds a new image by keeping its optional mask bitmap (see below).}
+@row3col{mask, @ref overview_xrcformat_type_bool,
+     If masks should be created for all images (default: true).}
+@row3col{size, @ref overview_xrcformat_type_size,
+     The size of the images in the list (default: 32*32 px)).}
+@endTable
+
+Example:
+@code
+<imagelist>
+    <size>32,32</size>
+    <bitmap stock_id="wxART_QUESTION"/>
+    <bitmap stock_id="wxART_INFORMATION"/>
+</imagelist>
+@endcode
+
+In the specific case of the @ref xrc_wxlistctrl, the tag can take the name
+@c \<imagelist-small\> to define the 'small' image list, related to the flag
+@c wxIMAGE_LIST_SMALL (see wxListCtrl documentation).
+
+
 @subsubsection xrc_wxlistbox wxListBox
 
 @beginTable
@@ -898,11 +936,10 @@
 
 @subsubsection xrc_wxlistbook wxListbook
 
-No additional properties.
-
 A listbook can have one or more child objects of the @c listbookpage
 pseudo-class (similarly to @ref xrc_wxnotebook "wxNotebook" and its
-@c notebookpage). @c listbookpage objects have the following properties:
+@c notebookpage) and one child object of the @ref xrc_wximagelist class.
+@c listbookpage objects have the following properties:
 
 @beginTable
 @hdr3col{property, type, description}
@@ -910,6 +947,9 @@
      Sheet page's title (required).}
 @row3col{bitmap, @ref overview_xrcformat_type_bitmap,
      Bitmap shown alongside the label (default: none).}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the image list.}
 @row3col{selected, @ref overview_xrcformat_type_bool,
      Is the page selected initially (only one page can be selected; default: 0)?}
 @endTable
@@ -919,9 +959,85 @@
 
 @subsubsection xrc_wxlistctrl wxListCtrl
 
-No additional properties.
+A listctrl can have one or more child objects of the class @ref xrc_wxlistitem
+and one or more objects of the @ref xrc_wximagelist class.
+The wxListCtrl style have to be consistent with to the expected type of imagelist:
+@beginTable
+@hdr4col{ imagelist type,      listctrl style,     imagelist tag          }
+@row4col{ wxIMAGE_LIST_NORMAL, @c wxLC_ICON,       @c \<imagelist\>       }
+@row4col{ wxIMAGE_LIST_SMALL,  @c wxLC_SMALL_ICON, @c \<imagelist-small\> }
+@endTable
+The different types of imagelist can be defined together.
 
 
+@subsubsection xrc_wxlistitem wxListItem
+
+The @c listitem is a child object for the class @ref xrc_wxlistctrl.
+It can have the following properties:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{align, wxListColumnFormat,
+    The alignment for the item.
+    Can be one of @c wxLIST_FORMAT_LEFT, @c wxLIST_FORMAT_RIGHT or
+    @c wxLIST_FORMAT_CENTRE.}
+@row3col{bg, @ref overview_xrcformat_type_colour,
+    The background color for the item.}
+@row3col{bitmap, @ref overview_xrcformat_type_bitmap,
+    Add a bitmap in the (normal) @ref xrc_wximagelist associated with the
+    @ref xrc_wxlistctrl parent.
+    If the imagelist is not defined it will be created implicitly.}
+@row3col{bitmap-small, @ref overview_xrcformat_type_bitmap,
+    Add a bitmap in the 'small' @ref xrc_wximagelist associated with the
+    @ref xrc_wxlistctrl parent.
+    If the 'small' imagelist is not defined it will be created implicitly.}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the (normal) image list.}
+@row3col{image-small, integer,
+    The zero-based index of the image associated with the item
+    into the 'small' image list.}
+@row3col{col, integer,
+    The zero-based column index.}
+@row3col{data, integer,
+    The client data for the item.}
+@row3col{font, @ref overview_xrcformat_type_font,
+    The font for the item.}
+@row3col{id, integer,
+    The zero-based item position.}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the image list.}
+@row3col{mask, @ref overview_xrcformat_type_style,
+    The mask indicating which fields of this class are valid.
+    Can be any combination of the following values:
+        - wxLIST_MASK_STATE: @b GetState is valid.
+        - wxLIST_MASK_TEXT: @b GetText is valid.
+        - wxLIST_MASK_IMAGE: @b GetImage is valid.
+        - wxLIST_MASK_DATA: @b GetData is valid.
+        - wxLIST_MASK_WIDTH: @b GetWidth is valid.
+        - wxLIST_MASK_FORMAT: @b GetFormat is valid. }
+@row3col{state, @ref overview_xrcformat_type_style,
+    The item state flags (note that the valid state flags are influenced
+    by the value of the @c statemask, see below).
+    Can be any combination of the following values:
+        - @c wxLIST_STATE_FOCUSED: The item has the focus.
+        - @c wxLIST_STATE_SELECTED: The item is selected.
+        - @c wxLIST_STATE_DONTCARE: Don't care what the state is. Win32 only.
+        - @c wxLIST_STATE_DROPHILITED: The item is highlighted to receive a drop event. Win32 only.
+        - @c wxLIST_STATE_CUT: The item is in the cut state. Win32 only. }
+@row3col{statemask, bitlist,
+    A mask indicating which state flags are valid. This is a bitlist of the
+    flags reported above for the item state. }
+@row3col{text, @ref overview_xrcformat_type_string,
+    The text label (or header for columns) for the item. }
+@row3col{textcolour, @ref overview_xrcformat_type_colour,
+    The text colour for the item. }
+@row3col{width, integer,
+    The column width. }
+@endTable
+
+
 @subsubsection xrc_wxmdiparentframe wxMDIParentFrame
 
 wxMDIParentFrame supports the same properties that @ref xrc_wxfrane does.
@@ -1030,10 +1146,9 @@
 
 @subsubsection xrc_wxnotebook wxNotebook
 
-No additional properties.
-
 A notebook can have one or more child objects of the @c notebookpage
-pseudo-class. @c notebookpage objects have the following properties:
+pseudo-class and one child object of the @ref xrc_wximagelist class.
+@c notebookpage objects have the following properties:
 
 @beginTable
 @hdr3col{property, type, description}
@@ -1041,6 +1156,9 @@
      Page's title (required).}
 @row3col{bitmap, @ref overview_xrcformat_type_bitmap,
      Bitmap shown alongside the label (default: none).}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the image list.}
 @row3col{selected, @ref overview_xrcformat_type_bool,
      Is the page selected initially (only one page can be selected; default: 0)?}
 @endTable
@@ -1502,16 +1620,17 @@
 
 @subsubsection xrc_wxtreectrl wxTreeCtrl
 
+A treectrl can have one child object of the @ref xrc_wximagelist class.
+
 No additional properties.
 
 
 @subsubsection xrc_wxtreebook wxTreebook
 
-No additional properties.
-
 A treebook can have one or more child objects of the @c treebookpage
 pseudo-class (similarly to @ref xrc_wxnotebook "wxNotebook" and its
-@c notebookpage). @c treebookpage objects have the following properties:
+@c notebookpage) and one child object of the @ref xrc_wximagelist class.
+@c treebookpage objects have the following properties:
 
 @beginTable
 @hdr3col{property, type, description}
@@ -1521,6 +1640,9 @@
      Sheet page's title (required).}
 @row3col{bitmap, @ref overview_xrcformat_type_bitmap,
      Bitmap shown alongside the label (default: none).}
+@row3col{image, integer,
+    The zero-based index of the image associated with the item
+    into the image list.}
 @row3col{selected, @ref overview_xrcformat_type_bool,
      Is the page selected initially (only one page can be selected; default: 0)?}
 @endTable
Index: include/wx/xrc/xh_listc.h
===================================================================
--- include/wx/xrc/xh_listc.h	(revision 60515)
+++ include/wx/xrc/xh_listc.h	(working copy)
@@ -15,6 +15,8 @@
 
 #if wxUSE_XRC && wxUSE_LISTCTRL
 
+class wxListCtrl;
+
 class WXDLLIMPEXP_XRC wxListCtrlXmlHandler : public wxXmlResourceHandler
 {
     DECLARE_DYNAMIC_CLASS(wxListCtrlXmlHandler)
@@ -23,6 +25,13 @@
     wxListCtrlXmlHandler();
     virtual wxObject *DoCreateResource();
     virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    long Handle_wxListItem();
+    wxObject* Handle_wxListCtrl();
+    //Gets the image index or add the bitmap to the expected image list and
+    //gest its index. If the image list does not exist it will be created.
+    long GetImageIndex(wxListCtrl *listctrl, int which = wxIMAGE_LIST_NORMAL);
 };
 
 #endif // wxUSE_XRC && wxUSE_LISTCTRL
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 60515)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -442,7 +442,7 @@
     // wxXML_ENTITY_NODE name="tag", content=""
     //    |-- wxXML_TEXT_NODE or
     //        wxXML_CDATA_SECTION_NODE name="" content="content"
-    wxString GetNodeContent(wxXmlNode *node);
+    wxString GetNodeContent(const wxXmlNode *node);
 
     // Check to see if a parameter exists.
     bool HasParam(const wxString& param);
@@ -453,6 +453,9 @@
     // Finds the parameter value or returns the empty string.
     wxString GetParamValue(const wxString& param);
 
+    // Returns the parameter value from given node.
+    wxString GetParamValue(const wxXmlNode* node);
+
     // Add a style flag (e.g. wxMB_DOCKABLE) to the list of flags
     // understood by this handler.
     void AddStyle(const wxString& name, int value);
@@ -504,15 +507,28 @@
                        const wxArtClient& defaultArtClient = wxART_OTHER,
                        wxSize size = wxDefaultSize);
 
+    // Gets a bitmap from an XmlNode.
+    wxBitmap GetBitmap(const wxXmlNode* node,
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize);
+
     // Gets an icon.
     wxIcon GetIcon(const wxString& param = wxT("icon"),
                    const wxArtClient& defaultArtClient = wxART_OTHER,
                    wxSize size = wxDefaultSize);
 
+    // Gets an icon from an XmlNode.
+    wxIcon GetIcon(const wxXmlNode* node,
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize);
+
     // Gets an icon bundle.
     wxIconBundle GetIconBundle(const wxString& param,
                                const wxArtClient& defaultArtClient = wxART_OTHER);
 
+    // Gets an image list.
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"));
+
 #if wxUSE_ANIMATIONCTRL
     // Gets an animation.
     wxAnimation GetAnimation(const wxString& param = wxT("animation"));
Index: interface/wx/xrc/xmlres.h
===================================================================
--- interface/wx/xrc/xmlres.h	(revision 60515)
+++ interface/wx/xrc/xmlres.h	(working copy)
@@ -492,6 +492,12 @@
     wxBitmap GetBitmap(const wxString& param = "bitmap",
                        const wxArtClient& defaultArtClient = wxART_OTHER,
                        wxSize size = wxDefaultSize);
+    /**
+        Gets a bitmap from an XmlNode.
+    */
+    wxBitmap GetBitmap(const wxXmlNode* node,
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize);
 
     /**
         Gets a bool flag (1, t, yes, on, true are @true, everything else is @false).
@@ -533,6 +539,13 @@
                    wxSize size = wxDefaultSize);
 
     /**
+        Gets an icon from an XmlNode.
+    */
+    wxIcon GetIcon(const wxXmlNode* node,
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize);
+
+    /**
         Returns an icon bundle.
 
         @note
@@ -546,6 +559,12 @@
                                const wxArtClient& defaultArtClient = wxART_OTHER);
 
     /**
+        Creates an image list (see wxImageList) from the @a param markup data.
+        \return The new instance of wxImageList or @NULL if no data is found.
+    */
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"));
+
+    /**
         Gets the integer value from the parameter.
     */
     long GetLong(const wxString& param, long defaultv = 0);
@@ -571,6 +590,11 @@
     wxString GetParamValue(const wxString& param);
 
     /**
+        Returns the node parameter value.
+    */
+    wxString GetParamValue(const wxXmlNode* node);
+
+    /**
         Gets the position (may be in dialog units).
     */
     wxPoint GetPosition(const wxString& param = "pos");
Index: src/xrc/xh_choicbk.cpp
===================================================================
--- src/xrc/xh_choicbk.cpp	(revision 60515)
+++ src/xrc/xh_choicbk.cpp	(working copy)
@@ -84,6 +84,10 @@
                     int imgIndex = imgList->Add(bmp);
                     m_choicebook->SetPageImage(m_choicebook->GetPageCount()-1, imgIndex );
                 }
+                else if ( HasParam(wxT("image")) && m_choicebook->GetImageList())
+                {
+                    m_choicebook->SetPageImage(m_choicebook->GetPageCount()-1, (int)GetLong(wxT("image")) );
+                }
             }
             else
             {
@@ -108,6 +112,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         wxChoicebook *old_par = m_choicebook;
         m_choicebook = nb;
         bool old_ins = m_isInside;
Index: src/xrc/xh_listbk.cpp
===================================================================
--- src/xrc/xh_listbk.cpp	(revision 60515)
+++ src/xrc/xh_listbk.cpp	(working copy)
@@ -84,6 +84,10 @@
                     int imgIndex = imgList->Add(bmp);
                     m_listbook->SetPageImage(m_listbook->GetPageCount()-1, imgIndex );
                 }
+                else if ( HasParam(wxT("image")) && m_listbook->GetImageList())
+                {
+                    m_listbook->SetPageImage(m_listbook->GetPageCount()-1, (int)GetLong(wxT("image")) );
+                }
             }
             else
             {
@@ -108,6 +112,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         wxListbook *old_par = m_listbook;
         m_listbook = nb;
         bool old_ins = m_isInside;
Index: src/xrc/xh_listc.cpp
===================================================================
--- src/xrc/xh_listc.cpp	(revision 60515)
+++ src/xrc/xh_listc.cpp	(working copy)
@@ -31,6 +31,22 @@
 wxListCtrlXmlHandler::wxListCtrlXmlHandler()
 : wxXmlResourceHandler()
 {
+    //wxListItem styles
+    XRC_ADD_STYLE(wxLIST_FORMAT_LEFT);
+    XRC_ADD_STYLE(wxLIST_FORMAT_RIGHT);
+    XRC_ADD_STYLE(wxLIST_FORMAT_CENTRE);
+    XRC_ADD_STYLE(wxLIST_MASK_STATE);
+    XRC_ADD_STYLE(wxLIST_MASK_TEXT);
+    XRC_ADD_STYLE(wxLIST_MASK_IMAGE);
+    XRC_ADD_STYLE(wxLIST_MASK_DATA);
+    XRC_ADD_STYLE(wxLIST_MASK_WIDTH);
+    XRC_ADD_STYLE(wxLIST_MASK_FORMAT);
+    XRC_ADD_STYLE(wxLIST_STATE_DONTCARE);
+    XRC_ADD_STYLE(wxLIST_STATE_DROPHILITED);
+    XRC_ADD_STYLE(wxLIST_STATE_FOCUSED);
+    XRC_ADD_STYLE(wxLIST_STATE_SELECTED);
+    XRC_ADD_STYLE(wxLIST_STATE_CUT);
+    //wxListCtrl styles
     XRC_ADD_STYLE(wxLC_LIST);
     XRC_ADD_STYLE(wxLC_REPORT);
     XRC_ADD_STYLE(wxLC_ICON);
@@ -53,6 +69,89 @@
 
 wxObject *wxListCtrlXmlHandler::DoCreateResource()
 {
+    if (m_class == wxT("listitem"))
+    {
+        Handle_wxListItem();
+        return m_parentAsWindow;
+    }
+    else
+        return Handle_wxListCtrl();
+}
+
+bool wxListCtrlXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return
+    (
+        (IsOfClass(node, wxT("wxListCtrl"))) ||
+        (IsOfClass(node, wxT("listitem")))
+    );
+}
+
+long wxListCtrlXmlHandler::Handle_wxListItem()
+{
+    wxListCtrl *list = wxDynamicCast(m_parentAsWindow, wxListCtrl);
+    if (list)
+    {
+        wxListItem item;
+
+        if (HasParam(wxT("align")))
+            item.SetAlign((wxListColumnFormat)GetStyle(wxT("align")));
+        if (HasParam(wxT("bg")))
+            item.SetBackgroundColour(GetColour(wxT("bg")));
+        if (HasParam(wxT("col")))
+            item.SetColumn((int)GetLong(wxT("col")));
+        if (HasParam(wxT("data")))
+            item.SetData(GetLong(wxT("data")));
+        if (HasParam(wxT("font")))
+            item.SetFont(GetFont());
+        if (HasParam(wxT("mask")))
+            item.SetMask(GetStyle(wxT("mask")));
+        if (HasParam(wxT("state")))
+            item.SetState(GetStyle(wxT("state")));
+        if (HasParam(wxT("statemask")))
+            item.SetStateMask(GetStyle(wxT("statemask")));
+        if (HasParam(wxT("text")))
+            item.SetText(GetText(wxT("text")));
+        if (HasParam(wxT("textcolour")))
+            item.SetTextColour(GetColour(wxT("textcolour")));
+        if (HasParam(wxT("textcolor")))
+            item.SetTextColour(GetColour(wxT("textcolor")));
+        if (HasParam(wxT("width")))
+            item.SetWidth((int)GetLong(wxT("width")));
+
+        //Gets the list control icon style
+        long style = (wxLC_ICON | wxLC_SMALL_ICON ) & list->GetWindowStyleFlag();
+
+        //Gets the index of the image in the 'normal' image list
+        int imgIndex = GetImageIndex(list, wxIMAGE_LIST_NORMAL);
+        //Sets the image index if the list control flag matches
+        if ((style == wxLC_ICON) && (imgIndex >= 0))
+            item.SetImage(imgIndex);
+
+        //Idem for 'small' image list
+        imgIndex = GetImageIndex(list, wxIMAGE_LIST_SMALL);
+        if ((style == wxLC_SMALL_ICON) && (imgIndex >= 0))
+            item.SetImage(imgIndex);
+
+        //Inserts the list item in the list control
+        if (HasParam(wxT("id")))
+        {
+            long itemId = GetLong(wxT("id"));
+            item.SetId(itemId);
+            if (itemId < list->GetItemCount())
+            {
+                list->SetItem(item);
+                return itemId;
+            }
+        }
+        return list->InsertItem(item);
+    }
+
+    return -1;
+}
+
+wxObject* wxListCtrlXmlHandler::Handle_wxListCtrl()
+{
     XRC_MAKE_INSTANCE(list, wxListCtrl)
 
     list->Create(m_parentAsWindow,
@@ -62,16 +161,60 @@
                  wxDefaultValidator,
                  GetName());
 
-    // FIXME: add columns definition
+    //Sets the 'normal' image list
+    wxImageList *imagelist = GetImageList(wxT("imagelist"));
+    if (imagelist)
+        list->AssignImageList(imagelist, wxIMAGE_LIST_NORMAL);
+    //Sets the 'small' image list
+    imagelist = GetImageList(wxT("imagelist-small"));
+    if (imagelist)
+        list->AssignImageList(imagelist, wxIMAGE_LIST_SMALL);
 
+    CreateChildrenPrivately(list);
     SetupWindow(list);
 
     return list;
 }
 
-bool wxListCtrlXmlHandler::CanHandle(wxXmlNode *node)
+long wxListCtrlXmlHandler::GetImageIndex(wxListCtrl *listctrl, int which)
 {
-    return IsOfClass(node, wxT("wxListCtrl"));
+    //Defines the default values
+    wxString bmpParam;
+    wxString imgParam;
+    switch(which)
+    {
+    case wxIMAGE_LIST_SMALL:
+            bmpParam = wxT("bitmap-small");
+            imgParam = wxT("image-small");
+    	break;
+    case wxIMAGE_LIST_NORMAL:
+    default:
+            bmpParam = wxT("bitmap");
+            imgParam = wxT("image");
+        break;
+    }
+
+    //Gets the index of the image in the image list
+    int imgIndex = -1;
+    if (HasParam(bmpParam))
+    {
+        //Gets the the bitmap
+        wxBitmap bmp = GetBitmap(bmpParam, wxART_OTHER);
+        //Adds it to the image list
+        wxImageList *imgList = listctrl->GetImageList(which);
+        if ( imgList == NULL )
+        {
+            imgList = new wxImageList( bmp.GetWidth(), bmp.GetHeight() );
+            listctrl->AssignImageList( imgList, which );
+        }
+        imgIndex = imgList->Add(bmp);
+    }
+    else if ( HasParam(imgParam) )
+    {
+        //Gets the index of the image
+        imgIndex = (int)GetLong(imgParam);
+    }
+    return imgIndex;
 }
 
 #endif // wxUSE_XRC && wxUSE_LISTCTRL
Index: src/xrc/xh_notbk.cpp
===================================================================
--- src/xrc/xh_notbk.cpp	(revision 60515)
+++ src/xrc/xh_notbk.cpp	(working copy)
@@ -87,6 +87,10 @@
                     int imgIndex = imgList->Add(bmp);
                     m_notebook->SetPageImage(m_notebook->GetPageCount()-1, imgIndex );
                 }
+                else if ( HasParam(wxT("image")) && m_notebook->GetImageList())
+                {
+                    m_notebook->SetPageImage(m_notebook->GetPageCount()-1, (int)GetLong(wxT("image")) );
+                }
             }
             else
             {
@@ -111,6 +115,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         SetupWindow(nb);
 
         wxNotebook *old_par = m_notebook;
Index: src/xrc/xh_tree.cpp
===================================================================
--- src/xrc/xh_tree.cpp	(revision 60515)
+++ src/xrc/xh_tree.cpp	(working copy)
@@ -55,6 +55,10 @@
                 wxDefaultValidator,
                 GetName());
 
+    wxImageList *imagelist = GetImageList();
+    if (imagelist)
+        tree->AssignImageList(imagelist);
+
     SetupWindow(tree);
 
     return tree;
Index: src/xrc/xh_treebk.cpp
===================================================================
--- src/xrc/xh_treebk.cpp	(revision 60515)
+++ src/xrc/xh_treebk.cpp	(working copy)
@@ -61,6 +61,10 @@
                     GetStyle(wxT("style")),
                     GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            tbk->AssignImageList(imagelist);
+
         wxTreebook * old_par = m_tbk;
         m_tbk = tbk;
 
@@ -117,6 +121,10 @@
             }
             imgIndex = imgList->Add(bmp);
         }
+        else if ( HasParam(wxT("image")) && m_tbk->GetImageList())
+        {
+            imgIndex = (int)GetLong(wxT("image"));
+        }
 
         // then add the page to the corresponding parent
         if( depth < m_treeContext.GetCount() )
Index: src/xrc/xmlres.cpp
===================================================================
--- src/xrc/xmlres.cpp	(revision 60515)
+++ src/xrc/xmlres.cpp	(working copy)
@@ -1265,9 +1265,16 @@
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
+    return GetBitmap(GetParamNode(param), defaultArtClient, size);
+}
+
+wxBitmap wxXmlResourceHandler::GetBitmap(const wxXmlNode* node,
+                                         const wxArtClient& defaultArtClient,
+                                         wxSize size)
+{
     /* If the bitmap is specified as stock item, query wxArtProvider for it: */
     wxString art_id, art_client;
-    if ( GetStockArtAttrs(GetParamNode(param), defaultArtClient,
+    if ( GetStockArtAttrs(node, defaultArtClient,
                           art_id, art_client) )
     {
         wxBitmap stockArt(wxArtProvider::GetBitmap(art_id, art_client, size));
@@ -1276,7 +1283,7 @@
     }
 
     /* ...or load the bitmap from file: */
-    wxString name = GetParamValue(param);
+    wxString name = GetParamValue(node);
     if (name.empty()) return wxNullBitmap;
 #if wxUSE_FILESYSTEM
     wxFSFile *fsfile = GetCurFileSystem().OpenFile(name, wxFS_READ | wxFS_SEEKABLE);
@@ -1284,7 +1291,7 @@
     {
         ReportParamError
         (
-            param,
+            node->GetName(),
             wxString::Format("cannot open bitmap resource \"%s\"", name)
         );
         return wxNullBitmap;
@@ -1299,7 +1306,7 @@
     {
         ReportParamError
         (
-            param,
+            node->GetName(),
             wxString::Format("cannot create bitmap from \"%s\"", name)
         );
         return wxNullBitmap;
@@ -1313,11 +1320,19 @@
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
+    return GetIcon(GetParamNode(param), defaultArtClient, size);
+}
+
+wxIcon wxXmlResourceHandler::GetIcon(const wxXmlNode* node,
+                                     const wxArtClient& defaultArtClient,
+                                     wxSize size)
+{
     wxIcon icon;
-    icon.CopyFromBitmap(GetBitmap(param, defaultArtClient, size));
+    icon.CopyFromBitmap(GetBitmap(node, defaultArtClient, size));
     return icon;
 }
 
+
 wxIconBundle wxXmlResourceHandler::GetIconBundle(const wxString& param,
                                                  const wxArtClient& defaultArtClient)
 {
@@ -1366,6 +1381,46 @@
 }
 
 
+wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+{
+    wxXmlNode *imagelist_node = GetParamNode(param);
+    if (imagelist_node == NULL)
+        return NULL;
+
+    wxXmlNode *oldnode = m_node;
+    m_node = imagelist_node;
+
+    // size
+    wxSize size = GetSize();
+    int width = (size.GetWidth() == -1) ? 32 : size.GetWidth();
+    int height = (size.GetHeight() == -1) ? 32 : size.GetHeight();
+
+    // mask
+    bool mask = HasParam(wxT("mask")) ? GetBool(wxT("mask"), true) : true;
+
+    //init image list
+    wxImageList *imagelist = new wxImageList(width, height, mask);
+
+    //add images
+    wxString parambitmap = wxT("bitmap");
+    if (HasParam(parambitmap))
+    {
+        wxXmlNode *n = m_node->GetChildren();
+        while (n)
+        {
+            if (n->GetType() == wxXML_ELEMENT_NODE && n->GetName() == parambitmap)
+            {
+                //add icon instead of bitmap to keep the bitmap mask
+                imagelist->Add(GetIcon(n));
+            }
+            n = n->GetNext();
+        }
+    }
+
+    m_node = oldnode;
+    return imagelist;
+}
+
 wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
 {
     wxCHECK_MSG(m_node, NULL, wxT("You can't access handler data before it was initialized!"));
@@ -1396,9 +1451,9 @@
 
 
 
-wxString wxXmlResourceHandler::GetNodeContent(wxXmlNode *node)
+wxString wxXmlResourceHandler::GetNodeContent(const wxXmlNode *node)
 {
-    wxXmlNode *n = node;
+    const wxXmlNode *n = node;
     if (n == NULL) return wxEmptyString;
     n = n->GetChildren();
 
@@ -1416,12 +1471,18 @@
 
 wxString wxXmlResourceHandler::GetParamValue(const wxString& param)
 {
-    if (param.empty())
-        return GetNodeContent(m_node);
-    else
-        return GetNodeContent(GetParamNode(param));
+    return
+    (
+        param.empty() ?
+        GetParamValue(m_node) :
+        GetParamValue(GetParamNode(param))
+    );
 }
 
+wxString wxXmlResourceHandler::GetParamValue(const wxXmlNode* node)
+{
+    return GetNodeContent(node);
+}
 
 
 wxSize wxXmlResourceHandler::GetSize(const wxString& param,

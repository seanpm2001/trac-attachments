Index: include/wx/xrc/xh_listc.h
===================================================================
--- include/wx/xrc/xh_listc.h	(revision 59993)
+++ include/wx/xrc/xh_listc.h	(working copy)
@@ -23,6 +23,10 @@
     wxListCtrlXmlHandler();
     virtual wxObject *DoCreateResource();
     virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    long Handle_wxListItem();
+    wxObject* Handle_wxListCtrl();
 };
 
 #endif // wxUSE_XRC && wxUSE_LISTCTRL
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 59993)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -451,6 +451,10 @@
                    const wxArtClient& defaultArtClient = wxART_OTHER,
                    wxSize size = wxDefaultSize);
 
+    // Gets an image list.
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"));
+    wxImageList *GetImageList(int &outWhich, const wxString& param = wxT("imagelist"));
+
 #if wxUSE_ANIMATIONCTRL
     // Gets an animation.
     wxAnimation GetAnimation(const wxString& param = wxT("animation"));
Index: src/xrc/xh_choicbk.cpp
===================================================================
--- src/xrc/xh_choicbk.cpp	(revision 59993)
+++ src/xrc/xh_choicbk.cpp	(working copy)
@@ -106,6 +106,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         wxChoicebook *old_par = m_choicebook;
         m_choicebook = nb;
         bool old_ins = m_isInside;
Index: src/xrc/xh_listbk.cpp
===================================================================
--- src/xrc/xh_listbk.cpp	(revision 59993)
+++ src/xrc/xh_listbk.cpp	(working copy)
@@ -84,6 +84,10 @@
                     int imgIndex = imgList->Add(bmp);
                     m_listbook->SetPageImage(m_listbook->GetPageCount()-1, imgIndex );
                 }
+                else if ( HasParam(wxT("imgid")) && m_listbook->GetImageList())
+                {
+                    m_listbook->SetPageImage(m_listbook->GetPageCount()-1, (int)GetLong(wxT("imgid")) );
+                }
             }
             else
                 wxLogError(wxT("Error in resource."));
@@ -106,6 +110,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         wxListbook *old_par = m_listbook;
         m_listbook = nb;
         bool old_ins = m_isInside;
Index: src/xrc/xh_listc.cpp
===================================================================
--- src/xrc/xh_listc.cpp	(revision 59993)
+++ src/xrc/xh_listc.cpp	(working copy)
@@ -31,6 +31,22 @@
 wxListCtrlXmlHandler::wxListCtrlXmlHandler()
 : wxXmlResourceHandler()
 {
+    //wxListItem styles
+    XRC_ADD_STYLE(wxLIST_FORMAT_LEFT);
+    XRC_ADD_STYLE(wxLIST_FORMAT_RIGHT);
+    XRC_ADD_STYLE(wxLIST_FORMAT_CENTRE);
+    XRC_ADD_STYLE(wxLIST_MASK_STATE);
+    XRC_ADD_STYLE(wxLIST_MASK_TEXT);
+    XRC_ADD_STYLE(wxLIST_MASK_IMAGE);
+    XRC_ADD_STYLE(wxLIST_MASK_DATA);
+    XRC_ADD_STYLE(wxLIST_MASK_WIDTH);
+    XRC_ADD_STYLE(wxLIST_MASK_FORMAT);
+    XRC_ADD_STYLE(wxLIST_STATE_DONTCARE);
+    XRC_ADD_STYLE(wxLIST_STATE_DROPHILITED);
+    XRC_ADD_STYLE(wxLIST_STATE_FOCUSED);
+    XRC_ADD_STYLE(wxLIST_STATE_SELECTED);
+    XRC_ADD_STYLE(wxLIST_STATE_CUT);
+    //wxListCtrl styles
     XRC_ADD_STYLE(wxLC_LIST);
     XRC_ADD_STYLE(wxLC_REPORT);
     XRC_ADD_STYLE(wxLC_ICON);
@@ -53,6 +69,101 @@
 
 wxObject *wxListCtrlXmlHandler::DoCreateResource()
 {
+    if (m_class == wxT("listitem"))
+    {
+        Handle_wxListItem();
+        return m_parentAsWindow;
+    }
+    else
+        return Handle_wxListCtrl();
+}
+
+bool wxListCtrlXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return (IsOfClass(node, wxT("wxListCtrl"))) ||
+           (IsOfClass(node, wxT("listitem")));
+}
+
+long wxListCtrlXmlHandler::Handle_wxListItem()
+{
+    wxListCtrl *list = wxDynamicCast(m_parentAsWindow, wxListCtrl);
+    if (list)
+    {
+        wxListItem item;
+
+        if (HasParam(wxT("align")))
+            item.SetAlign((wxListColumnFormat)GetStyle(wxT("align")));
+        if (HasParam(wxT("bg")))
+            item.SetBackgroundColour(GetColour(wxT("bg")));
+        if (HasParam(wxT("col")))
+            item.SetColumn((int)GetLong(wxT("col")));
+        if (HasParam(wxT("data")))
+            item.SetData(GetLong(wxT("data")));
+        if (HasParam(wxT("font")))
+            item.SetFont(GetFont());
+        if (HasParam(wxT("id")))
+            item.SetId(GetLong(wxT("id")));
+        if (HasParam(wxT("mask")))
+            item.SetMask(GetStyle(wxT("mask")));
+        if (HasParam(wxT("state")))
+            item.SetState(GetStyle(wxT("state")));
+        if (HasParam(wxT("statemask")))
+            item.SetStateMask(GetStyle(wxT("statemask")));
+        if (HasParam(wxT("label")))
+            item.SetText(GetText(wxT("label")));
+        if (HasParam(wxT("textcolour")))
+            item.SetTextColour(GetColour(wxT("textcolour")));
+        if (HasParam(wxT("textcolor")))
+            item.SetTextColour(GetColour(wxT("textcolor")));
+        if (HasParam(wxT("width")))
+            item.SetWidth((int)GetLong(wxT("width")));
+
+        int imgIndex = -1;
+        if ( HasParam(wxT("bitmap")) )
+        {
+            //Get back the bitmap
+            wxBitmap bmp = GetBitmap(wxT("bitmap"), wxART_OTHER);
+    
+            //Get back the "which" param
+            wxXmlNode *listNode = GetParamNode(wxT("bitmap"));
+            wxString strwhich;
+            if(listNode)
+                strwhich = listNode->GetPropVal(wxT("which"), wxEmptyString);
+
+            int which = wxIMAGE_LIST_NORMAL;
+            if (!strwhich.empty() && (strwhich != wxT("normal")))
+            {
+                if (strwhich == wxT("small"))
+                    which = wxIMAGE_LIST_SMALL;
+                else if (strwhich == wxT("state"))
+                    which = wxIMAGE_LIST_STATE;
+            }
+
+            //Assign the bitmap to the image list
+            wxImageList *imgList = list->GetImageList(which);
+            if ( imgList == NULL )
+            {
+                imgList = new wxImageList( bmp.GetWidth(), bmp.GetHeight() );
+                list->AssignImageList( imgList, which );
+            }
+            imgIndex = imgList->Add(bmp);
+        }
+        else if ( HasParam(wxT("imgid")) )
+        {
+            imgIndex = (int)GetLong(wxT("imgid"));
+        }
+
+        if (imgIndex >= 0)
+            item.SetImage(imgIndex);
+
+        return list->InsertItem(item);
+    }
+
+    return -1;
+}
+
+wxObject*  wxListCtrlXmlHandler::Handle_wxListCtrl()
+{
     XRC_MAKE_INSTANCE(list, wxListCtrl)
 
     list->Create(m_parentAsWindow,
@@ -62,16 +173,15 @@
                  wxDefaultValidator,
                  GetName());
 
-    // FIXME: add columns definition
+    int which;
+    wxImageList *imagelist = GetImageList(which);
+    if (imagelist)
+        list->AssignImageList(imagelist, which);
 
+    CreateChildrenPrivately(list);
     SetupWindow(list);
 
     return list;
 }
 
-bool wxListCtrlXmlHandler::CanHandle(wxXmlNode *node)
-{
-    return IsOfClass(node, wxT("wxListCtrl"));
-}
-
 #endif // wxUSE_XRC && wxUSE_LISTCTRL
Index: src/xrc/xh_notbk.cpp
===================================================================
--- src/xrc/xh_notbk.cpp	(revision 59993)
+++ src/xrc/xh_notbk.cpp	(working copy)
@@ -110,6 +110,10 @@
                    GetStyle(wxT("style")),
                    GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            nb->AssignImageList(imagelist);
+
         SetupWindow(nb);
 
         wxNotebook *old_par = m_notebook;
Index: src/xrc/xh_tree.cpp
===================================================================
--- src/xrc/xh_tree.cpp	(revision 59993)
+++ src/xrc/xh_tree.cpp	(working copy)
@@ -53,6 +53,10 @@
                 wxDefaultValidator,
                 GetName());
 
+    wxImageList *imagelist = GetImageList();
+    if (imagelist)
+        tree->AssignImageList(imagelist);
+
     SetupWindow(tree);
 
     return tree;
Index: src/xrc/xh_treebk.cpp
===================================================================
--- src/xrc/xh_treebk.cpp	(revision 59993)
+++ src/xrc/xh_treebk.cpp	(working copy)
@@ -61,6 +61,10 @@
                     GetStyle(wxT("style")),
                     GetName());
 
+        wxImageList *imagelist = GetImageList();
+        if (imagelist)
+            tbk->AssignImageList(imagelist);
+
         wxTreebook * old_par = m_tbk;
         m_tbk = tbk;
 
Index: src/xrc/xmlres.cpp
===================================================================
--- src/xrc/xmlres.cpp	(revision 59993)
+++ src/xrc/xmlres.cpp	(working copy)
@@ -1183,8 +1183,66 @@
     return icon;
 }
 
+wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+{
+    int unused;
+    return GetImageList(unused, param);
+}
 
+wxImageList *wxXmlResourceHandler::GetImageList(int &outWhich, const wxString& param)
+{
+    wxXmlNode *imagelist_node = GetParamNode(param);
+    if (imagelist_node == NULL)
+        return NULL;
 
+    wxXmlNode *oldnode = m_node;
+    m_node = imagelist_node;
+
+    // image list type for wxListCtrl
+    wxString strwhich = m_node->GetPropVal(wxT("which"), wxEmptyString);
+    outWhich = wxIMAGE_LIST_NORMAL;
+    if (!strwhich.empty() && (strwhich != wxT("normal")))
+    {
+        if (strwhich == wxT("small"))
+            outWhich = wxIMAGE_LIST_SMALL;
+        else if (strwhich == wxT("state"))
+            outWhich = wxIMAGE_LIST_STATE;
+    }
+
+    // size
+    wxSize size = GetSize();
+    int width = (size.GetWidth() == -1) ? 32 : size.GetWidth();
+    int height = (size.GetHeight() == -1) ? 32 : size.GetHeight();
+
+    // mask
+    bool mask = HasParam(wxT("mask")) ? GetBool(wxT("mask"), true) : true;
+
+    // initial count
+    int count = HasParam(wxT("count")) ? (int)GetLong(wxT("count")) : 0;
+
+    //init image list
+    wxImageList *imagelist = new wxImageList(width, height, mask, count);
+
+    //add images
+    for (int i = 0; i < count; ++i)
+    {
+        wxString index = wxString::Format(wxT("bitmap%u"), i);
+        if (HasParam(index))
+        {
+            //add icon instead of bitmap to keep the bitmap mask
+            imagelist->Add(GetIcon(index));
+        }
+        else
+        {
+            wxLogError(wxT("Cannot find the bitmap image at index '%u' to add to the image list."), i);
+            break;
+        }
+    }
+
+    m_node = oldnode;
+    return imagelist;
+}
+
 wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
 {
     wxCHECK_MSG(m_node, NULL, wxT("You can't access handler data before it was initialized!"));

---
 samples/sockets/client.cpp |  176 ++++++++++++++++++++++-----------------------
 1 files changed, 88 insertions(+), 88 deletions(-)

Index: b/samples/sockets/client.cpp
===================================================================
--- a/samples/sockets/client.cpp
+++ b/samples/sockets/client.cpp
@@ -174,7 +174,7 @@ bool MyApp::OnInit()
 
 // frame constructor
 MyFrame::MyFrame() : wxFrame((wxFrame *)NULL, wxID_ANY,
-                             _("wxSocket demo: Client"),
+                             wxT("wxSocket demo: Client"),
                              wxDefaultPosition, wxSize(300, 200))
 {
   // Give the frame an icon
@@ -182,34 +182,34 @@ MyFrame::MyFrame() : wxFrame((wxFrame *)
 
   // Make menus
   m_menuFile = new wxMenu();
-  m_menuFile->Append(CLIENT_ABOUT, _("&About...\tCtrl-A"), _("Show about dialog"));
+  m_menuFile->Append(CLIENT_ABOUT, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
   m_menuFile->AppendSeparator();
-  m_menuFile->Append(CLIENT_QUIT, _("E&xit\tAlt-X"), _("Quit client"));
+  m_menuFile->Append(CLIENT_QUIT, wxT("E&xit\tAlt-X"), wxT("Quit client"));
 
   m_menuSocket = new wxMenu();
-  m_menuSocket->Append(CLIENT_OPEN, _("&Open session"), _("Connect to server"));
+  m_menuSocket->Append(CLIENT_OPEN, wxT("&Open session"), wxT("Connect to server"));
   m_menuSocket->AppendSeparator();
-  m_menuSocket->Append(CLIENT_TEST1, _("Test &1"), _("Test basic functionality"));
-  m_menuSocket->Append(CLIENT_TEST2, _("Test &2"), _("Test ReadMsg and WriteMsg"));
-  m_menuSocket->Append(CLIENT_TEST3, _("Test &3"), _("Test large data transfer"));
+  m_menuSocket->Append(CLIENT_TEST1, wxT("Test &1"), wxT("Test basic functionality"));
+  m_menuSocket->Append(CLIENT_TEST2, wxT("Test &2"), wxT("Test ReadMsg and WriteMsg"));
+  m_menuSocket->Append(CLIENT_TEST3, wxT("Test &3"), wxT("Test large data transfer"));
   m_menuSocket->AppendSeparator();
-  m_menuSocket->Append(CLIENT_CLOSE, _("&Close session"), _("Close connection"));
+  m_menuSocket->Append(CLIENT_CLOSE, wxT("&Close session"), wxT("Close connection"));
 
   m_menuDatagramSocket = new wxMenu();
-  m_menuDatagramSocket->Append(CLIENT_DGRAM, _("Send Datagram"), _("Test UDP sockets"));
+  m_menuDatagramSocket->Append(CLIENT_DGRAM, wxT("Send Datagram"), wxT("Test UDP sockets"));
 
 #if wxUSE_URL
   m_menuProtocols = new wxMenu();
-  m_menuProtocols->Append(CLIENT_TESTURL, _("Test URL"), _("Get data from the specified URL"));
+  m_menuProtocols->Append(CLIENT_TESTURL, wxT("Test URL"), wxT("Get data from the specified URL"));
 #endif
 
   // Append menus to the menubar
   m_menuBar = new wxMenuBar();
-  m_menuBar->Append(m_menuFile, _("&File"));
-  m_menuBar->Append(m_menuSocket, _("&SocketClient"));
-  m_menuBar->Append(m_menuDatagramSocket, _("&DatagramSocket"));
+  m_menuBar->Append(m_menuFile, wxT("&File"));
+  m_menuBar->Append(m_menuSocket, wxT("&SocketClient"));
+  m_menuBar->Append(m_menuDatagramSocket, wxT("&DatagramSocket"));
 #if wxUSE_URL
-  m_menuBar->Append(m_menuProtocols, _("&Protocols"));
+  m_menuBar->Append(m_menuProtocols, wxT("&Protocols"));
 #endif
   SetMenuBar(m_menuBar);
 
@@ -220,7 +220,7 @@ MyFrame::MyFrame() : wxFrame((wxFrame *)
 
   // Make a textctrl for logging
   m_text  = new wxTextCtrl(this, wxID_ANY,
-                           _("Welcome to wxSocket demo: Client\nClient ready\n"),
+                           wxT("Welcome to wxSocket demo: Client\nClient ready\n"),
                            wxDefaultPosition, wxDefaultSize,
                            wxTE_MULTILINE | wxTE_READONLY);
 
@@ -254,8 +254,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-  wxMessageBox(_("wxSocket demo: Client\n(c) 1999 Guillermo Rodriguez Garcia\n"),
-               _("About Client"),
+  wxMessageBox(wxT("wxSocket demo: Client\n(c) 1999 Guillermo Rodriguez Garcia\n"),
+               wxT("About Client"),
                wxOK | wxICON_INFORMATION, this);
 }
 
@@ -268,9 +268,9 @@ void MyFrame::OnOpenConnection(wxCommand
 
   // Ask user for server address
   wxString hostname = wxGetTextFromUser(
-    _("Enter the address of the wxSocket demo server:"),
-    _("Connect ..."),
-    _("localhost"));
+    wxT("Enter the address of the wxSocket demo server:"),
+    wxT("Connect ..."),
+    wxT("localhost"));
 
   addr.Hostname(hostname);
   addr.Service(3000);
@@ -324,17 +324,17 @@ void MyFrame::OnOpenConnection(wxCommand
   //
   // And that's all :-)
 
-  m_text->AppendText(_("\nTrying to connect (timeout = 10 sec) ...\n"));
+  m_text->AppendText(wxT("\nTrying to connect (timeout = 10 sec) ...\n"));
   m_sock->Connect(addr, false);
   m_sock->WaitOnConnect(10);
 
   if (m_sock->IsConnected())
-    m_text->AppendText(_("Succeeded ! Connection established\n"));
+    m_text->AppendText(wxT("Succeeded ! Connection established\n"));
   else
   {
     m_sock->Close();
-    m_text->AppendText(_("Failed ! Unable to connect\n"));
-    wxMessageBox(_("Can't connect to the specified host"), _("Alert !"));
+    m_text->AppendText(wxT("Failed ! Unable to connect\n"));
+    wxMessageBox(wxT("Can't connect to the specified host"), wxT("Alert !"));
   }
 
   UpdateStatusBar();
@@ -350,7 +350,7 @@ void MyFrame::OnTest1(wxCommandEvent& WX
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 1 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 1 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xBE;
@@ -370,31 +370,31 @@ void MyFrame::OnTest1(wxCommandEvent& WX
 
   m_sock->SetFlags(wxSOCKET_WAITALL);
 
-  buf1 = _("Test string (less than 256 chars!)");
+  buf1 = wxT("Test string (less than 256 chars!)");
   len  = (unsigned char)((wxStrlen(buf1) + 1) * sizeof(wxChar));
   buf2 = new wxChar[wxStrlen(buf1) + 1];
 
-  m_text->AppendText(_("Sending a test buffer to the server ..."));
+  m_text->AppendText(wxT("Sending a test buffer to the server ..."));
   m_sock->Write(&len, 1);
   m_sock->Write(buf1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
 
-  m_text->AppendText(_("Receiving the buffer back from server ..."));
+  m_text->AppendText(wxT("Receiving the buffer back from server ..."));
   m_sock->Read(buf2, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
 
-  m_text->AppendText(_("Comparing the two buffers ..."));
+  m_text->AppendText(wxT("Comparing the two buffers ..."));
   if (memcmp(buf1, buf2, len) != 0)
   {
-    m_text->AppendText(_("failed!\n"));
-    m_text->AppendText(_("Test 1 failed !\n"));
+    m_text->AppendText(wxT("failed!\n"));
+    m_text->AppendText(wxT("Test 1 failed !\n"));
   }
   else
   {
-    m_text->AppendText(_("done\n"));
-    m_text->AppendText(_("Test 1 passed !\n"));
+    m_text->AppendText(wxT("done\n"));
+    m_text->AppendText(wxT("Test 1 passed !\n"));
   }
-  m_text->AppendText(_("=== Test 1 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 1 ends ===\n"));
 
   delete[] buf2;
   m_busy = false;
@@ -411,7 +411,7 @@ void MyFrame::OnTest2(wxCommandEvent& WX
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 2 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 2 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xCE;
@@ -427,43 +427,43 @@ void MyFrame::OnTest2(wxCommandEvent& WX
   m_sock->SetFlags(wxSOCKET_WAITALL);
 
   wxString s = wxGetTextFromUser(
-    _("Enter an arbitrary string to send to the server:"),
-    _("Test 2 ..."),
-    _("Yes I like wxWidgets!"));
+    wxT("Enter an arbitrary string to send to the server:"),
+    wxT("Test 2 ..."),
+    wxT("Yes I like wxWidgets!"));
 
   msg1 = s.c_str();
   len  = (wxStrlen(msg1) + 1) * sizeof(wxChar);
   msg2 = new wxChar[wxStrlen(msg1) + 1];
 
-  m_text->AppendText(_("Sending the string with WriteMsg ..."));
+  m_text->AppendText(wxT("Sending the string with WriteMsg ..."));
   m_sock->WriteMsg(msg1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-  m_text->AppendText(_("Waiting for an event (timeout = 2 sec)\n"));
+  m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
+  m_text->AppendText(wxT("Waiting for an event (timeout = 2 sec)\n"));
 
   // Wait until data available (will also return if the connection is lost)
   m_sock->WaitForRead(2);
 
   if (m_sock->IsData())
   {
-    m_text->AppendText(_("Reading the string back with ReadMsg ..."));
+    m_text->AppendText(wxT("Reading the string back with ReadMsg ..."));
     m_sock->ReadMsg(msg2, len);
-    m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-    m_text->AppendText(_("Comparing the two buffers ..."));
+    m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
+    m_text->AppendText(wxT("Comparing the two buffers ..."));
     if (memcmp(msg1, msg2, len) != 0)
     {
-      m_text->AppendText(_("failed!\n"));
-      m_text->AppendText(_("Test 2 failed !\n"));
+      m_text->AppendText(wxT("failed!\n"));
+      m_text->AppendText(wxT("Test 2 failed !\n"));
     }
     else
     {
-      m_text->AppendText(_("done\n"));
-      m_text->AppendText(_("Test 2 passed !\n"));
+      m_text->AppendText(wxT("done\n"));
+      m_text->AppendText(wxT("Test 2 passed !\n"));
     }
   }
   else
-    m_text->AppendText(_("Timeout ! Test 2 failed.\n"));
+    m_text->AppendText(wxT("Timeout ! Test 2 failed.\n"));
 
-  m_text->AppendText(_("=== Test 2 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 2 ends ===\n"));
 
   delete[] msg2;
   m_busy = false;
@@ -480,7 +480,7 @@ void MyFrame::OnTest3(wxCommandEvent& WX
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 3 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 3 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xDE;
@@ -501,27 +501,27 @@ void MyFrame::OnTest3(wxCommandEvent& WX
   for (int i = 0; i < len * 1024; i ++)
     buf1[i] = (char)(i % 256);
 
-  m_text->AppendText(_("Sending a large buffer (32K) to the server ..."));
+  m_text->AppendText(wxT("Sending a large buffer (32K) to the server ..."));
   m_sock->Write(&len, 1);
   m_sock->Write(buf1, len * 1024);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
 
-  m_text->AppendText(_("Receiving the buffer back from server ..."));
+  m_text->AppendText(wxT("Receiving the buffer back from server ..."));
   m_sock->Read(buf2, len * 1024);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText(m_sock->Error() ? wxT("failed !\n") : wxT("done\n"));
 
-  m_text->AppendText(_("Comparing the two buffers ..."));
+  m_text->AppendText(wxT("Comparing the two buffers ..."));
   if (memcmp(buf1, buf2, len) != 0)
   {
-    m_text->AppendText(_("failed!\n"));
-    m_text->AppendText(_("Test 3 failed !\n"));
+    m_text->AppendText(wxT("failed!\n"));
+    m_text->AppendText(wxT("Test 3 failed !\n"));
   }
   else
   {
-    m_text->AppendText(_("done\n"));
-    m_text->AppendText(_("Test 3 passed !\n"));
+    m_text->AppendText(wxT("done\n"));
+    m_text->AppendText(wxT("Test 3 passed !\n"));
   }
-  m_text->AppendText(_("=== Test 3 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 3 ends ===\n"));
 
   delete[] buf2;
   m_busy = false;
@@ -536,9 +536,9 @@ void MyFrame::OnCloseConnection(wxComman
 
 void MyFrame::OnDatagram(wxCommandEvent& WXUNUSED(event))
 {
-  m_text->AppendText(_("\n=== Datagram test begins ===\n"));
-  m_text->AppendText(_("Sorry, not implemented\n"));
-  m_text->AppendText(_("=== Datagram test ends ===\n"));
+  m_text->AppendText(wxT("\n=== Datagram test begins ===\n"));
+  m_text->AppendText(wxT("Sorry, not implemented\n"));
+  m_text->AppendText(wxT("=== Datagram test ends ===\n"));
 }
 
 #if wxUSE_URL
@@ -549,34 +549,34 @@ void MyFrame::OnTestURL(wxCommandEvent& 
   // won't mess with the client/server demo.
 
   // Ask for the URL
-  m_text->AppendText(_("\n=== URL test begins ===\n"));
-  wxString urlname = wxGetTextFromUser(_("Enter an URL to get"),
-                                       _("URL:"),
-                                       _T("http://localhost"));
+  m_text->AppendText(wxT("\n=== URL test begins ===\n"));
+  wxString urlname = wxGetTextFromUser(wxT("Enter an URL to get"),
+                                       wxT("URL:"),
+                                       wxT("http://localhost"));
 
   // Parse the URL
   wxURL url(urlname);
   if (url.GetError() != wxURL_NOERR)
   {
-    m_text->AppendText(_("Error: couldn't parse URL\n"));
-    m_text->AppendText(_("=== URL test ends ===\n"));
+    m_text->AppendText(wxT("Error: couldn't parse URL\n"));
+    m_text->AppendText(wxT("=== URL test ends ===\n"));
     return;
   }
 
   // Try to get the input stream (connects to the given URL)
-  m_text->AppendText(_("Trying to establish connection...\n"));
+  m_text->AppendText(wxT("Trying to establish connection...\n"));
   wxYield();
   wxInputStream *data = url.GetInputStream();
   if (!data)
   {
-    m_text->AppendText(_("Error: couldn't read from URL\n"));
-    m_text->AppendText(_("=== URL test ends ===\n"));
+    m_text->AppendText(wxT("Error: couldn't read from URL\n"));
+    m_text->AppendText(wxT("=== URL test ends ===\n"));
     return;
   }
 
   // Print the contents type and file size
   wxString s;
-  s.Printf(_("Contents type: %s\nFile size: %i\nStarting to download...\n"),
+  s.Printf(wxT("Contents type: %s\nFile size: %i\nStarting to download...\n"),
              url.GetProtocol().GetContentType().c_str(),
              data->GetSize());
   m_text->AppendText(s);
@@ -587,15 +587,15 @@ void MyFrame::OnTestURL(wxCommandEvent& 
   wxFileOutputStream sout(fileTest);
   if (!sout.Ok())
   {
-    m_text->AppendText(_("Error: couldn't open file for output\n"));
-    m_text->AppendText(_("=== URL test ends ===\n"));
+    m_text->AppendText(wxT("Error: couldn't open file for output\n"));
+    m_text->AppendText(wxT("=== URL test ends ===\n"));
     return;
   }
 
   data->Read(sout);
-  m_text->AppendText(_("Results written to file: test.url\n"));
-  m_text->AppendText(_("Done.\n"));
-  m_text->AppendText(_("=== URL test ends ===\n"));
+  m_text->AppendText(wxT("Results written to file: test.url\n"));
+  m_text->AppendText(wxT("Done.\n"));
+  m_text->AppendText(wxT("=== URL test ends ===\n"));
 
   delete data;
 }
@@ -604,14 +604,14 @@ void MyFrame::OnTestURL(wxCommandEvent& 
 
 void MyFrame::OnSocketEvent(wxSocketEvent& event)
 {
-  wxString s = _("OnSocketEvent: ");
+  wxString s = wxT("OnSocketEvent: ");
 
   switch(event.GetSocketEvent())
   {
-    case wxSOCKET_INPUT      : s.Append(_("wxSOCKET_INPUT\n")); break;
-    case wxSOCKET_LOST       : s.Append(_("wxSOCKET_LOST\n")); break;
-    case wxSOCKET_CONNECTION : s.Append(_("wxSOCKET_CONNECTION\n")); break;
-    default                  : s.Append(_("Unexpected event !\n")); break;
+    case wxSOCKET_INPUT      : s.Append(wxT("wxSOCKET_INPUT\n")); break;
+    case wxSOCKET_LOST       : s.Append(wxT("wxSOCKET_LOST\n")); break;
+    case wxSOCKET_CONNECTION : s.Append(wxT("wxSOCKET_CONNECTION\n")); break;
+    default                  : s.Append(wxT("Unexpected event !\n")); break;
   }
 
   m_text->AppendText(s);
@@ -626,14 +626,14 @@ void MyFrame::UpdateStatusBar()
 
   if (!m_sock->IsConnected())
   {
-    s.Printf(_("Not connected"));
+    s.Printf(wxT("Not connected"));
   }
   else
   {
     wxIPV4address addr;
 
     m_sock->GetPeer(addr);
-    s.Printf(_("%s : %d"), (addr.Hostname()).c_str(), addr.Service());
+    s.Printf(wxT("%s : %d"), (addr.Hostname()).c_str(), addr.Service());
   }
 
 #if wxUSE_STATUSBAR

 	  	 

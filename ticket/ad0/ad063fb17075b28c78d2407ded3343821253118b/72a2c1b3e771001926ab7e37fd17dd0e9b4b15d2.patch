Index: src/msw/checklst.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/checklst.cpp,v
retrieving revision 1.70
diff -u -r1.70 checklst.cpp
--- src/msw/checklst.cpp	2006/09/07 19:01:24	1.70
+++ src/msw/checklst.cpp	2007/03/28 16:14:36
@@ -45,9 +45,39 @@
 
 #include <windowsx.h>
 
+#include "wx/msw/uxtheme.h"
 #include "wx/msw/private.h"
 
+
+// ----------------------------------------------------------------------------
+// constants
 // ----------------------------------------------------------------------------
+
+// these values are defined in tmschema.h
+enum {
+	BP_PUSHBUTTON = 1,
+	BP_RADIOBUTTON = 2,
+	BP_CHECKBOX = 3,
+	BP_GROUPBOX = 4,
+	BP_USERBUTTON = 5
+};
+enum {
+	CBS_UNCHECKEDNORMAL = 1,
+	CBS_UNCHECKEDHOT = 2,
+	CBS_UNCHECKEDPRESSED = 3,
+	CBS_UNCHECKEDDISABLED = 4,
+	CBS_CHECKEDNORMAL = 5,
+	CBS_CHECKEDHOT = 6,
+	CBS_CHECKEDPRESSED = 7,
+	CBS_CHECKEDDISABLED = 8,
+	CBS_MIXEDNORMAL = 9,
+	CBS_MIXEDHOT = 10,
+	CBS_MIXEDPRESSED = 11,
+	CBS_MIXEDDISABLED = 12
+};
+
+
+// ----------------------------------------------------------------------------
 // private functions
 // ----------------------------------------------------------------------------
 
@@ -142,7 +172,7 @@
 private:
     bool            m_bChecked;
     wxCheckListBox *m_pParent;
-    size_t    m_nIndex;
+    size_t          m_nIndex;
 
     DECLARE_NO_COPY_CLASS(wxCheckListBoxItem)
 };
@@ -157,11 +187,9 @@
     // we don't initialize m_nCheckHeight/Width vars because it's
     // done in OnMeasure while they are used only in OnDraw and we
     // know that there will always be OnMeasure before OnDraw
+
+    SetMarginWidth(::GetSystemMetrics(SM_CXMENUCHECK) - 2);
 
-    // fix appearance for check list boxes: they don't look quite the same as
-    // menu icons
-    SetMarginWidth(::GetSystemMetrics(SM_CXMENUCHECK) -
-                      2*wxSystemSettings::GetMetric(wxSYS_EDGE_X) + 1);
     SetBackgroundColour(pParent->GetBackgroundColour());
 }
 
@@ -175,62 +203,73 @@
     if ( !wxOwnerDrawn::OnDrawItem(dc, rc, act, stat) )
         return false;
 
+	// now draw the check mark part
+    HDC hdc = (HDC)dc.GetHDC();
 
-    // now draw the check mark part
-    size_t nCheckWidth  = GetDefaultMarginWidth(),
-           nCheckHeight = m_pParent->GetItemHeight();
+    int nBmpWidth  = ::GetSystemMetrics(SM_CXMENUCHECK),
+        nBmpHeight = ::GetSystemMetrics(SM_CYMENUCHECK);
 
-    int x = rc.GetX(),
-        y = rc.GetY();
 
-    HDC hdc = (HDC)dc.GetHDC();
+    // first create bitmap in a memory DC
+    MemoryHDC hdcMem(hdc);
+    CompatibleBitmap hBmpCheck(hdc, nBmpWidth, nBmpHeight);
+    SelectInHDC selBmp(hdcMem, hBmpCheck);
 
-    // create pens, brushes &c
-    COLORREF colBg = ::GetSysColor(COLOR_WINDOW);
-    AutoHPEN hpenBack(colBg),
-             hpenGray(RGB(0xc0, 0xc0, 0xc0));
-
-    SelectInHDC selPen(hdc, (HGDIOBJ)hpenBack);
-    AutoHBRUSH hbrBack(colBg);
-    SelectInHDC selBrush(hdc, hbrBack);
+    // then draw a check mark into it
+    RECT rect = { 0, 0, nBmpWidth, nBmpHeight };
 
-    // erase the background: it could have been filled with the selected colour
-    Rectangle(hdc, x, y, x + nCheckWidth + 1, rc.GetBottom() + 1);
+#if wxUSE_UXTHEME && !(__WXWINCE__) // XP version
+    wxUxThemeEngine *pTheme = wxUxThemeEngine::GetIfActive();
 
-    // shift check mark 1 pixel to the right, looks better like this
-    x++;
+    if ( pTheme && !pTheme->IsAppThemed() )
+        pTheme = NULL;
 
-    if ( IsChecked() )
+    if ( pTheme )
     {
-        // first create a monochrome bitmap in a memory DC
-        MemoryHDC hdcMem(hdc);
-        MonoBitmap hbmpCheck(nCheckWidth, nCheckHeight);
-        SelectInHDC selBmp(hdcMem, hbmpCheck);
-
-        // then draw a check mark into it
-        RECT rect = { 0, 0, nCheckWidth, nCheckHeight };
-        ::DrawFrameControl(hdcMem, &rect,
-#ifdef __WXWINCE__
-                           DFC_BUTTON, DFCS_BUTTONCHECK
-#else
-                           DFC_MENU, DFCS_MENUCHECK
-#endif
-                           );
+        wxUxThemeHandle hTheme(m_pParent, L"BUTTON");
 
-        // finally copy it to screen DC
-        ::BitBlt(hdc, x, y, nCheckWidth, nCheckHeight, hdcMem, 0, 0, SRCCOPY);
+        if (hTheme)
+        {
+            int state = IsChecked() ? CBS_CHECKEDNORMAL : CBS_UNCHECKEDNORMAL;
+
+            HRESULT hr = pTheme->DrawThemeBackground(hTheme, hdcMem,
+                                    BP_CHECKBOX, state, &rect, NULL);
+
+            if ( FAILED(hr) )
+            {
+                wxLogApiError(_T("DrawThemeBackground(BP_CHECKBOX)"), hr);
+            }
+        }
+    }
+    else
+    {
+#endif // classic Win32 version
+        int state = DFCS_BUTTONCHECK | DFCS_MONO;
+        if ( IsChecked() )
+            state |= DFCS_CHECKED;
+
+        if ( !::DrawFrameControl(hdcMem, &rect, DFC_BUTTON, state) )
+        {
+            wxLogLastError(_T("DrawFrameControl(DFC_BUTTON)"));
+        }
+#if wxUSE_UXTHEME && !(__WXWINCE__)
     }
+#endif
 
-    // now we draw the smaller rectangle
-    y++;
-    nCheckWidth  -= 2;
-    nCheckHeight -= 2;
+    // if selBmp isn't free, the hBmpCheck bitmap is empty (black)
+    selBmp.~SelectInHDC();
 
-    // draw hollow gray rectangle
-    (void)::SelectObject(hdc, (HGDIOBJ)hpenGray);
+    // shift check mark 2 pixel to the right and bottom, looks better like this
+    int x = rc.GetX() + 2,
+        y = rc.GetY() + 2;
+
+    // finally draw bitmap to screen
+	// it uses image_list to do simple blend effect for 'check' bitmap if item is selected
+	HIMAGELIST himl = ImageList_Create(nBmpWidth, nBmpHeight, ILC_COLOR32 | ILC_MASK, 1, 1);
+    ImageList_Add(himl, hBmpCheck, NULL);
 
-    SelectInHDC selBrush2(hdc, ::GetStockObject(NULL_BRUSH));
-    Rectangle(hdc, x, y, x + nCheckWidth, y + nCheckHeight);
+    UINT fStyle = (stat & wxOwnerDrawn::wxODSelected) ? ILD_SELECTED : ILD_NORMAL;
+    ImageList_Draw(himl, 0, hdc, x, y, fStyle);
 
     return true;
 }
@@ -375,11 +414,12 @@
   if ( wxListBox::MSWOnMeasure(item) ) {
     MEASUREITEMSTRUCT *pStruct = (MEASUREITEMSTRUCT *)item;
 
+    // add place for the check mark
+    pStruct->itemWidth  += wxOwnerDrawn::GetDefaultMarginWidth();
+    pStruct->itemHeight += 1;
+
     // save item height
     m_nItemHeight = pStruct->itemHeight;
-
-    // add place for the check mark
-    pStruct->itemWidth += wxOwnerDrawn::GetDefaultMarginWidth();
 
     return true;
   }

 	  	 

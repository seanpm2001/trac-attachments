diff --git src/common/fswatchercmn.cpp src/common/fswatchercmn.cpp
index 99fa359..dba3702 100644
--- src/common/fswatchercmn.cpp
+++ src/common/fswatchercmn.cpp
@@ -107,8 +107,13 @@ wxFileSystemWatcherBase::DoAdd(const wxFileName& path,
     if (canonical.IsEmpty())
         return false;
 
-    wxCHECK_MSG(m_watches.find(canonical) == m_watches.end(), false,
-                wxString::Format("Path '%s' is already watched", canonical));
+    if (m_watches.find(canonical) != m_watches.end())
+    {
+        // Don't assert here. This may happen for genuine reasons e.g.
+        // if a file was Add()ed, then later AddTree() called on a parent dir
+        wxLogTrace(wxTRACE_FSWATCHER, "Path '%s' is already watched", canonical);
+        return false;
+    }
 
     // adding a path in a platform specific way
     wxFSWatchInfo watch(canonical, events, type);
@@ -128,8 +133,14 @@ bool wxFileSystemWatcherBase::Remove(const wxFileName& path)
         return false;
 
     wxFSWatchInfoMap::iterator it = m_watches.find(canonical);
-    wxCHECK_MSG(it != m_watches.end(), false,
-                wxString::Format("Path '%s' is not watched", canonical));
+    if (it == m_watches.end())
+    {
+        // Don't assert here. This may happen for genuine reasons e.g.
+        // if a file was Add()ed, then later AddTree() called on a parent dir
+        // Then trying to remove both will Remove() this path twice
+        wxLogTrace(wxTRACE_FSWATCHER, "Path '%s' is not watched", canonical);
+        return false;
+    }
 
     // remove from watch-list
     wxFSWatchInfo watch = it->second;
@@ -155,12 +166,8 @@ bool wxFileSystemWatcherBase::AddTree(const wxFileName& path, int events,
         {
         }
 
-        // CHECK we choose which files to delegate to Add(), maybe we should pass
-        // all of them to Add() and let it choose? this is useful when adding a
-        // file to a dir that is already watched, then not only should we know
-        // about that, but Add() should also behave well then
         virtual wxDirTraverseResult OnFile(const wxString& filename)
-         {
+        {
             wxLogTrace(wxTRACE_FSWATCHER, "--- AddTree adding file '%s' ---",
                                                                     filename);
             m_watcher->Add(wxFileName::FileName(filename), m_events);

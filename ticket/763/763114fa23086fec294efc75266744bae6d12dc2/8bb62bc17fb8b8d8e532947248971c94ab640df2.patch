===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filefn.cpp,v
retrieving revision 1.271
diff -u -r1.271 filefn.cpp
--- src/common/filefn.cpp	2006/09/17 11:58:12	1.271
+++ src/common/filefn.cpp	2006/09/24 18:26:34
@@ -919,10 +919,86 @@
 
 void wxMacFilename2FSSpec( const wxString& path , FSSpec *spec )
 {
-    OSStatus err = noErr ;
-    FSRef fsRef ;
-    wxMacPathToFSRef( path , &fsRef ) ;
-    err = FSRefMakeFSSpec( &fsRef , spec ) ;
+    OSStatus err = noErr;
+    FSRef ref;
+    Boolean isDirectory;
+    FSCatalogInfo info;
+    CFStringRef pathString = NULL;
+    CFURLRef pathURL = NULL;
+    CFURLRef parentURL = NULL;
+    CFStringRef nameString = NULL;
+
+    const char *inPath = path.c_str();
+
+    // First, try to create an FSRef for the full path 
+    if (err == noErr) {
+       err = FSPathMakeRef ((UInt8 *) inPath, &ref, &isDirectory);
+    }
+
+    if (err == noErr) {
+       // It's a directory or a file that exists; convert directly into an FSSpec:
+       err = FSGetCatalogInfo (&ref, kFSCatInfoNone, NULL, NULL, outSpec, NULL);
+    } else {
+       // The harder case.  The file doesn't exist.
+       err = noErr;
+
+       // Get a CFString for the path
+       if (err == noErr) {
+           pathString = CFStringCreateWithCString (CFAllocatorGetDefault (), inPath, CFStringGetSystemEncoding ());
+           if (pathString == NULL) { err = memFullErr; }
+       }
+
+       // Get a CFURL for the path
+       if (err == noErr) {
+           pathURL = CFURLCreateWithFileSystemPath (CFAllocatorGetDefault (), 
+                                                   pathString,   kCFURLPOSIXPathStyle, 
+                                                   false /* Not a directory */);
+           if (pathURL == NULL) { err = memFullErr; }
+       }
+
+       // Get a CFURL for the parent
+       if (err == noErr) {
+           parentURL = CFURLCreateCopyDeletingLastPathComponent (CFAllocatorGetDefault (), pathURL);
+           if (parentURL == NULL) { err = memFullErr; }
+       }
+
+       // Build an FSRef for the parent directory, which must be valid to make an FSSpec
+       if (err == noErr) {
+           Boolean converted = CFURLGetFSRef (parentURL, &ref);
+           if (!converted) { err = fnfErr; } 
+       }
+
+       // Get the node ID of the parent directory
+       if (err == noErr) {
+           err = FSGetCatalogInfo(&ref, kFSCatInfoNodeFlags|kFSCatInfoNodeID, &info, NULL, outSpec, NULL);
+       }
+
+       // Get a CFString for the file name
+       if (err == noErr) {
+           nameString = CFURLCopyLastPathComponent (pathURL);
+           if (nameString == NULL) { err = memFullErr; }
+       }
+
+       // Copy the string into the FSSpec
+       if (err == noErr) {	
+           Boolean converted = CFStringGetPascalString (nameString, outSpec->name, sizeof (outSpec->name), 
+                                                       CFStringGetSystemEncoding ());
+           if (!converted) { err = fnfErr; }
+
+       }
+
+       // Set the node ID in the FSSpec
+       if (err == noErr) {
+           outSpec->parID = info.nodeID;
+       }
+    }
+
+    // Free allocated memory
+    if (pathURL != NULL)    { CFRelease (pathURL);    }
+    if (pathString != NULL) { CFRelease (pathString); }
+    if (parentURL != NULL)  { CFRelease (parentURL);  }
+    if (nameString != NULL) { CFRelease (nameString); }
+    
 }
 
 #endif // __WXMAC__

 	  	 

--- wxWidgets-trunk/src/msw/bitmap.cpp	2014-03-07
+++ wxWidgets-work/src/msw/bitmap.cpp	2014-03-24
@@ -68,10 +68,10 @@
 
     virtual void Free();
 
+#if wxUSE_WXDIB
     // Creates a new bitmap (DDB or DIB) from the contents of the given DIB.
     void CopyFromDIB(const wxDIB& dib);
 
-#if wxUSE_WXDIB
     // Takes ownership of the given DIB.
     bool AssignDIB(wxDIB& dib);
 
@@ -130,13 +130,14 @@
 private:
     void Init();
 
+#if wxUSE_WXDIB
     // Initialize using the given DIB but use (and take ownership of) the
     // bitmap handle if it is valid, assuming it's a DDB. If it's not valid,
     // use the DIB handle itself taking ownership of it (i.e. wxDIB will become
     // invalid when this function returns even though we take it as const
     // reference because this is how it's passed to us).
     void InitFromDIB(const wxDIB& dib, HBITMAP hbitmap = NULL);
-
+#endif
 
     // optional mask for transparent drawing
     wxMask       *m_bitmapMask;
@@ -232,8 +233,10 @@
     if (data.m_bitmapMask)
         m_bitmapMask = new wxMask(*data.m_bitmapMask);
 
+#if wxUSE_WXDIB
     wxASSERT_MSG( !data.m_dib,
                     wxT("can't copy bitmap locked for raw access!") );
+#endif
 
     m_hasAlpha = data.m_hasAlpha;
 
@@ -269,6 +272,8 @@
     wxDELETE(m_bitmapMask);
 }
 
+#if wxUSE_WXDIB
+
 void wxBitmapRefData::InitFromDIB(const wxDIB& dib, HBITMAP hbitmap)
 {
     m_width = dib.GetWidth();
@@ -317,8 +322,6 @@
     InitFromDIB(dib, hbitmap);
 }
 
-#if wxUSE_WXDIB
-
 bool wxBitmapRefData::AssignDIB(wxDIB& dib)
 {
     if ( !dib.IsOk() )
@@ -355,6 +358,7 @@
     return new wxBitmapRefData(*static_cast<const wxBitmapRefData *>(data));
 }
 
+#if wxUSE_WXDIB
 // Premultiply the values of all RGBA pixels in the given range.
 static void PremultiplyPixels(unsigned char* begin, unsigned char* end)
 {
@@ -450,6 +454,7 @@
 
     return NULL;
 }
+#endif
 
 bool wxBitmap::CopyFromIconOrCursor(const wxGDIImage& icon,
                                     wxBitmapTransparency transp)
@@ -1173,12 +1178,14 @@
         if ( !handler->LoadFile(this, filename, type, -1, -1) )
             return false;
 
+#if wxUSE_WXDIB
         // wxBitmap must contain premultiplied data, but external files are not
         // always in this format, so try to detect whether this is the case and
         // create a premultiplied DIB if it really is.
         HBITMAP hdib = CreatePremultipliedDIBIfNeeded(GetHbitmap());
         if ( hdib )
             static_cast<wxBitmapRefData*>(m_refData)->Set32bppHDIB(hdib);
+#endif
 
         return true;
     }
@@ -1347,8 +1354,12 @@
 
 void wxBitmap::MSWUpdateAlpha()
 {
+#if wxUSE_WXDIB
     if ( CheckAlpha(GetHbitmap()) )
         GetBitmapData()->m_hasAlpha = true;
+#else
+        GetBitmapData()->m_hasAlpha = false;
+#endif
 }
 
 // ----------------------------------------------------------------------------
--- wxWidgets-trunk/src/msw/imaglist.cpp	2014-02-20
+++ wxWidgets-work/src/msw/imaglist.cpp	2014-03-24
@@ -378,10 +378,11 @@
     GetSize(index, bmp_width, bmp_height);
 
     wxBitmap bitmap(bmp_width, bmp_height);
+
+#if wxUSE_WXDIB && wxUSE_IMAGE
     wxMemoryDC dc;
     dc.SelectObject(bitmap);
 
-#if wxUSE_WXDIB && wxUSE_IMAGE
     IMAGEINFO ii;
     ImageList_GetImageInfo(GetHImageList(), index, &ii);
     if ( ii.hbmMask )
@@ -425,8 +426,6 @@
         // even if it requires more work (and takes more time).
         bitmap.MSWUpdateAlpha();
     }
-#else
-    wxBitmap bitmap;
 #endif
     return bitmap;
 }
--- wxWidgets-trunk/src/msw/statbmp.cpp	2014-03-14
+++ wxWidgets-work/src/msw/statbmp.cpp	2014-03-24
@@ -306,6 +306,7 @@
     const HANDLE handleOrig = (HANDLE)m_image->GetHandle();
     HANDLE handle = handleOrig;
 
+#if wxUSE_WXDIB
     if ( !m_isIcon )
     {
         // wxBitmap normally stores alpha in pre-multiplied format but
@@ -321,6 +322,7 @@
                            wxDIB::PixelFormat_NotPreMultiplied).Detach();
         }
     }
+#endif
     LONG style = ::GetWindowLong( (HWND)GetHWND(), GWL_STYLE ) ;
     ::SetWindowLong( (HWND)GetHWND(), GWL_STYLE, ( style & ~( SS_BITMAP|SS_ICON ) ) |
                      ( m_isIcon ? SS_ICON : SS_BITMAP ) );

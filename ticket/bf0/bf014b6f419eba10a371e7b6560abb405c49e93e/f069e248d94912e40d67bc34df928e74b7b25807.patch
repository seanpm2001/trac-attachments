Index: include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/event.h,v
retrieving revision 1.259
diff -r1.259 event.h
2477a2478,2481
>     void SetNonReEntrantEvent(bool bEnable = true) { m_bNonReEntrantEvent = bEnable; } /* Set eventhandler is reentrance or not   */
>     bool IsNonReEntrantEvent() { return m_bNonReEntrantEvent; }                        /* Reentrance is allowed for this handler? */
>     bool IsEventHandlingInProgress() { return m_bEventHandlingInProgress; }            /* Eventhandling is in progress?           */
> 
2532a2537,2538
>     bool                m_bNonReEntrantEvent;            /* Reentrance is allowed for this handler? */
>     bool                m_bEventHandlingInProgress;      /* Eventhandling is in progress?           */
Index: include/wx/socket.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/socket.h,v
retrieving revision 1.71
diff -r1.71 socket.h
162a163,164
>   static void SetDefaultTimeout(long lDefTimeoutSecs)		{ __DefaultTimeout = lDefTimeoutSecs; }
>   static long GetDefaultTimeout()								{ return __DefaultTimeout; }
188a191,193
> 	// Static global member
>   static long __DefaultTimeout;
> 
Index: src/common/appbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/appbase.cpp,v
retrieving revision 1.74
diff -r1.74 appbase.cpp
299,304c299,314
<     // iterate until the list becomes empty
<     wxList::compatibility_iterator node = wxPendingEvents->GetFirst();
<     while (node)
<     {
<         wxEvtHandler *handler = (wxEvtHandler *)node->GetData();
<         wxPendingEvents->Erase(node);
---
>     // iterate the list for events we can process
>     int nMaxNumber = wxPendingEvents->GetCount();
>     if (nMaxNumber > 0) {
>         wxList::compatibility_iterator node;
>         wxEvtHandler *handler;
>         int nIter;
>         int nCorr = 0;              /* Correction to counter for processed events which are dropped from the list */
>         for (nIter = 0; nIter <= nMaxNumber - 1; nIter++) {
>             node = wxPendingEvents->Item(nIter - nCorr);
>             handler = (wxEvtHandler *)node->GetData();
>             // If eventhandler is non-reentrant and we're already processing one of its events, then skip it
>             // Otherwise process the event
>             if (!(handler->IsNonReEntrantEvent() && handler->IsEventHandlingInProgress())) {
>                 // Process this one
>                 wxPendingEvents->Erase(node);
> 					 nCorr++;                            /* One is now removed in eventlist so correct counter */
306,308c316,318
<         // In ProcessPendingEvents(), new handlers might be add
<         // and we can safely leave the critical section here.
<         wxLEAVE_CRIT_SECT( *wxPendingEventsLocker );
---
>                 // In ProcessPendingEvents(), new handlers might be add
>                 // and we can safely leave the critical section here.
>                 wxLEAVE_CRIT_SECT( *wxPendingEventsLocker );
310c320
<         handler->ProcessPendingEvents();
---
>                 handler->ProcessPendingEvents();
312,314c322,324
<         wxENTER_CRIT_SECT( *wxPendingEventsLocker );
< 
<         node = wxPendingEvents->GetFirst();
---
>                 wxENTER_CRIT_SECT( *wxPendingEventsLocker );
>             }
>         }
Index: src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/event.cpp,v
retrieving revision 1.185
diff -r1.185 event.cpp
1016a1017,1018
>     m_bNonReEntrantEvent = false;						/* Assume reentrance is NOT allowed by default */
>     m_bEventHandlingInProgress = false;
1140a1143,1145
>     /* Eventhandling is now in process */
>     m_bEventHandlingInProgress = true;
> 
1166a1172,1174
> 
>     /* Eventhandling no longer in process */
>     m_bEventHandlingInProgress = false;
Index: src/common/sckipc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/sckipc.cpp,v
retrieving revision 1.52
diff -r1.52 sckipc.cpp
119c119
<   wxTCPEventHandler() : wxEvtHandler() {}
---
>   wxTCPEventHandler() : wxEvtHandler() { SetNonReEntrantEvent(); }		/* NonReentrant eventhandler */
359,361d358
<   wxDELETE(m_codeci);
<   wxDELETE(m_codeco);
<   wxDELETE(m_sockstrm);
367a365,369
> 
>   /* Delete after destroy */
>   wxDELETE(m_codeci);
>   wxDELETE(m_codeco);
>   wxDELETE(m_sockstrm);
426a429,443
> #ifdef __WXDEBUG__
>     /* This test will show you why it sometimes crashes */
>     /* This code should be tested and redone more nicely */
>     wxInt32 test32 = s;
>     if (test32 <= 0) {      /* This one did trigger some problems */
>       wxTrap();
>     }
>     wxASSERT_MSG(s < 3276800,    /* Test just against a large size (3,2 GByte should be a nice bogus) */
>                  _T("Buffer size request too big? wxTCPConnection::Request") );
> #endif
>     /* If the signed (32 bit) value is less or equal to 0 then definitly return NULL */
>     if ((wxInt32)s <= 0) {
>       return NULL;
>     }
> 
523a541,543
>   if (!sock) {		/* No socket, no glory */
>     return ;
>   }
561a582,591
> #ifdef __WXDEBUG__
>     /* This test will show you why it sometimes crashes */
>     /* This code should be tested and redone more nicely */
>     wxInt32 test32 = size;
>     if (test32 <= 0) {      /* This one did trigger some problems */
>       wxTrap();
>     }
>     wxASSERT_MSG(size < 3276800,    /* Test just against a large size (3,2 GByte should be a nice bogus) */
>                  _T("Buffer size request too big? wxTCPEventHandler::Client_OnRequest") );
> #endif
579a610,619
> #ifdef __WXDEBUG__
>     /* This test will show you why it sometimes crashes */
>     /* This code should be tested and redone more nicely */
>     wxInt32 test32 = size;
>     if (test32 <= 0) {      /* This one did trigger some problems */
>       wxTrap();
>     }
>     wxASSERT_MSG(size < 3276800,    /* Test just against a large size (3,2 GByte should be a nice bogus) */
>                  _T("Buffer size request too big? wxTCPEventHandler::Client_OnRequest") );
> #endif
621a662,671
> #ifdef __WXDEBUG__
>     /* This test will show you why it sometimes crashes */
>     /* This code should be tested and redone more nicely */
>     wxInt32 test32 = size;
>     if (test32 <= 0) {      /* This one did trigger some problems */
>       wxTrap();
>     }
>     wxASSERT_MSG(size < 3276800,    /* Test just against a large size (3,2 GByte should be a nice bogus) */
>                  _T("Buffer size request too big? wxTCPEventHandler::Client_OnRequest") );
> #endif
672a723,725
>   if (!server) {		/* No server, Then exit */
> 	  return ;
>   }
683a737,739
>   if (!sock) {		/* No socket, no glory */
> 	  return ;
>   }
Index: src/common/socket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/socket.cpp,v
retrieving revision 1.154
diff -r1.154 socket.cpp
174a175,176
> long wxSocketBase::__DefaultTimeout = 600;
> 
188c190
<   m_timeout      = 600;
---
>   m_timeout      = __DefaultTimeout;
Index: src/common/stream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/stream.cpp,v
retrieving revision 1.103
diff -r1.103 stream.cpp
373a374,378
>     wxASSERT_MSG( buffer, _T("Warning: Null pointer is about to be used") );
> 
>     /* Clear buffer first */
>     memset(buffer, 0x00, size);
> 
449a455,456
>     wxASSERT_MSG( buffer, _T("Warning: Null pointer is about to be send") );
> 
743a751,755
>     wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be used") );
> 
>     /* Clear buffer first */
>     memset(buf, 0x00, size);
> 
774a787,788
>     wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be used in Ungetch()") );
> 
806a821,822
>     wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be read") );
> 

 	  	 

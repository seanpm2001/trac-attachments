Index: include/wx/dynlib.h
===================================================================
--- include/wx/dynlib.h	(revision 56079)
+++ include/wx/dynlib.h	(working copy)
@@ -257,13 +257,13 @@
     // detach the library object from its handle, i.e. prevent the object from
     // unloading the library in its dtor -- the caller is now responsible for
     // doing this
-    wxDllType Detach() { wxDllType h = m_handle; m_handle = 0; return h; }
+    wxDllType Detach() { wxDllType h = m_handle; m_handle = 0; m_path.Empty(); return h; }
 
     // unload the given library handle (presumably returned by Detach() before)
     static void Unload(wxDllType handle);
 
     // unload the library, also done automatically in dtor
-    void Unload() { if ( IsLoaded() ) { Unload(m_handle); m_handle = 0; } }
+    void Unload() { if ( IsLoaded() ) { Unload(m_handle); m_handle = 0; m_path.Empty(); } }
 
     // Return the raw handle from dlopen and friends.
     wxDllType GetLibHandle() const { return m_handle; }
@@ -346,6 +346,8 @@
     // string on others:
     static wxString GetPluginsDirectory();
 
+    // get the full path of this object
+    wxString GetPath() const { return m_path; }
 
 protected:
     // common part of GetSymbol() and HasSymbol()
@@ -363,6 +365,8 @@
     // the handle to DLL or NULL
     wxDllType m_handle;
 
+    wxString m_path;
+
     // no copy ctor/assignment operators (or we'd try to unload the library
     // twice)
     DECLARE_NO_COPY_CLASS(wxDynamicLibrary)
Index: interface/wx/dynlib.h
===================================================================
--- interface/wx/dynlib.h	(revision 56079)
+++ interface/wx/dynlib.h	(working copy)
@@ -219,6 +219,11 @@
         the handle somewhere and call this static method later to unload it.
     */
     static void Unload(wxDllType handle);
+
+    /**
+        Get the full path of this object
+    */
+    wxString GetPath() const;
 };
 
 
Index: samples/console/console.cpp
===================================================================
--- samples/console/console.cpp	(revision 56079)
+++ samples/console/console.cpp	(working copy)
@@ -88,7 +88,7 @@
     #define TEST_WCHAR
     #define TEST_ZIP
 #else // #if TEST_ALL
-    #define TEST_EXECUTE
+    #define TEST_DYNLIB
 #endif
 
 // some tests are interactive, define this to run them
@@ -417,12 +417,12 @@
         if ( !pfnStrlen )
         {
             wxPrintf(_T("ERROR: function '%s' wasn't found in '%s'.\n"),
-                     FUNC_NAME, LIB_NAME);
+                     FUNC_NAME, lib.GetPath().c_str());
         }
         else
         {
             wxPrintf(_T("Calling %s dynamically loaded from %s "),
-                     FUNC_NAME, LIB_NAME);
+                     FUNC_NAME, lib.GetPath().c_str());
 
             if ( pfnStrlen("foo") != 3 )
             {
@@ -443,7 +443,7 @@
         if ( !pfnStrlenAorW )
         {
             wxPrintf(_T("ERROR: function '%s' wasn't found in '%s'.\n"),
-                     FUNC_NAME_AW, LIB_NAME);
+                     FUNC_NAME_AW, lib.GetPath().c_str());
         }
         else
         {
Index: src/common/dynlib.cpp
===================================================================
--- src/common/dynlib.cpp	(revision 56079)
+++ src/common/dynlib.cpp	(working copy)
@@ -106,7 +106,9 @@
 #endif
     }
 
-    return IsLoaded();
+    bool ok = IsLoaded();
+    if (ok) m_path = libname;
+    return ok;
 }
 
 // for MSW and Unix this is implemented in the platform-specific file

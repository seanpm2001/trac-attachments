Index: include/wx/ribbon/gallery.h
===================================================================
--- include/wx/ribbon/gallery.h	(revision 64194)
+++ include/wx/ribbon/gallery.h	(working copy)
@@ -159,6 +159,7 @@
 
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_RIBBON, wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED, wxRibbonGalleryEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_RIBBON, wxEVT_COMMAND_RIBBONGALLERY_SELECTED, wxRibbonGalleryEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_RIBBON, wxEVT_COMMAND_RIBBONGALLERY_CLICKED, wxRibbonGalleryEvent);
 
 typedef void (wxEvtHandler::*wxRibbonGalleryEventFunction)(wxRibbonGalleryEvent&);
 
@@ -169,6 +170,8 @@
     wx__DECLARE_EVT1(wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED, winid, wxRibbonGalleryEventHandler(fn))
 #define EVT_RIBBONGALLERY_SELECTED(winid, fn) \
     wx__DECLARE_EVT1(wxEVT_COMMAND_RIBBONGALLERY_SELECTED, winid, wxRibbonGalleryEventHandler(fn))
+#define EVT_RIBBONGALLERY_CLICKED(winid, fn) \
+    wx__DECLARE_EVT1(wxEVT_COMMAND_RIBBONGALLERY_CLICKED, winid, wxRibbonGalleryEventHandler(fn))
 #else
 
 // wxpython/swig event work
@@ -179,7 +182,7 @@
     EVT_RIBBONGALLERY_HOVER_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED, 1 )
     EVT_RIBBONGALLERY_SELECTED = wx.PyEventBinder( wxEVT_COMMAND_RIBBONGALLERY_SELECTED, 1 )
 }
-#endif
+#endif // SWIG
 
 #endif // wxUSE_RIBBON
 
Index: interface/wx/ribbon/gallery.h
===================================================================
--- interface/wx/ribbon/gallery.h	(revision 64194)
+++ interface/wx/ribbon/gallery.h	(working copy)
@@ -16,7 +16,7 @@
 
 /**
     @class wxRibbonGallery
-    
+
     A ribbon gallery is like a wxListBox, but for bitmaps rather than strings.
     It displays a collection of bitmaps arranged in a grid and allows the user
     to choose one. As there are typically more bitmaps in a gallery than can
@@ -25,11 +25,14 @@
     has an "extension" button, the behaviour of which is outside the scope of
     the gallery control itself, though it typically displays some kind of
     dialog related to the gallery.
-    
+
     @beginEventEmissionTable{wxRibbonGalleryEvent}
     @event{EVT_RIBBONGALLERY_SELECTED(id, func)}
         Triggered when the user selects an item from the gallery. Note that the
         ID is that of the gallery, not of the item.
+    @event{EVT_RIBBONGALLERY_CLICKED(id, func)}
+        Triggered when the user clicks an item from the gallery. Note that the
+        ID is that of the gallery, not of the item.
     @event{EVT_RIBBONGALLERY_HOVER_CHANGED(id, func)}
         Triggered when the item being hovered over by the user changes. The
         item in the event will be the new item being hovered, or NULL if there
@@ -98,17 +101,17 @@
         Query if the gallery has no items in it.
     */
     bool IsEmpty() const;
-    
+
     /**
         Get the number of items in the gallery.
     */
     unsigned int GetCount() const;
-    
+
     /**
         Get an item by index.
     */
     wxRibbonGalleryItem* GetItem(unsigned int n);
-    
+
     /**
         Add an item to the gallery (with no client data).
         @param bitmap
@@ -119,7 +122,7 @@
             anything important.
     */
     wxRibbonGalleryItem* Append(const wxBitmap& bitmap, int id);
-    
+
     /**
         Add an item to the gallery (with simple client data).
         @param bitmap
@@ -132,7 +135,7 @@
             An opaque pointer to associate with the item.
     */
     wxRibbonGalleryItem* Append(const wxBitmap& bitmap, int id, void* clientData);
-    
+
     /**
         Add an item to the gallery (with complex client data)
         @param bitmap
@@ -153,17 +156,17 @@
         Set the client object associated with a gallery item.
     */
     void SetItemClientObject(wxRibbonGalleryItem* item, wxClientData* data);
-    
+
     /**
         Get the client object associated with a gallery item.
     */
     wxClientData* GetItemClientObject(const wxRibbonGalleryItem* item) const;
-    
+
     /**
         Set the client data associated with a gallery item.
     */
     void SetItemClientData(wxRibbonGalleryItem* item, void* data);
-    
+
     /**
         Get the client data associated with a gallery item.
     */
@@ -172,44 +175,44 @@
     /**
         Set the selection to the given item, or removes the selection if
         @a item == NULL.
-        
+
         Note that this not cause any events to be emitted.
     */
     void SetSelection(wxRibbonGalleryItem* item);
 
     /**
         Get the currently selected item, or NULL if there is none.
-        
+
         The selected item is set by SetSelection(), or by the user clicking on
         an item.
     */
     wxRibbonGalleryItem* GetSelection() const;
-    
+
     /**
         Get the currently hovered item, or NULL if there is none.
-        
+
         The hovered item is the item underneath the mouse cursor.
     */
     wxRibbonGalleryItem* GetHoveredItem() const;
-    
+
     /**
         Get the currently active item, or NULL if there is none.
-        
+
         The active item is the item being pressed by the user, and will thus
         become the selected item if the user releases the mouse button.
     */
     wxRibbonGalleryItem* GetActiveItem() const;
-    
+
     /**
         Get the state of the scroll up button.
     */
     wxRibbonGalleryButtonState GetUpButtonState() const;
-    
+
     /**
         Get the state of the scroll down button.
     */
     wxRibbonGalleryButtonState GetDownButtonState() const;
-    
+
     /**
         Get the state of the "extension" button.
     */
@@ -217,24 +220,24 @@
 
     /**
         Query is the mouse is currently hovered over the gallery.
-        
+
         @return @true if the cursor is within the bounds of the gallery (not
             just hovering over an item), @false otherwise.
     */
     bool IsHovered() const;
-    
+
     /**
         Scroll the gallery contents by some amount.
-        
+
         @param lines
           Positive values scroll toward the end of the gallery, while negative
           values scroll toward the start.
-    
+
         @return @true if the gallery scrolled at least one pixel in the given
             direction, @false if it did not scroll.
     */
     virtual bool ScrollLines(int lines);
-    
+
     /**
         Scroll the gallery to ensure that the given item is visible.
     */
@@ -264,18 +267,18 @@
         Returns the gallery which the event relates to.
     */
     wxRibbonGallery* GetGallery();
-    
+
     /**
         Returns the gallery item which the event relates to, or NULL if it does
         not relate to an item.
     */
     wxRibbonGalleryItem* GetGalleryItem();
-        
+
     /**
         Sets the gallery relating to this event.
     */
     void SetGallery(wxRibbonGallery* gallery);
-    
+
     /**
         Sets the gallery item relating to this event.
     */
Index: src/ribbon/gallery.cpp
===================================================================
--- src/ribbon/gallery.cpp	(revision 64194)
+++ src/ribbon/gallery.cpp	(working copy)
@@ -32,6 +32,7 @@
 
 wxDEFINE_EVENT(wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED, wxRibbonGalleryEvent);
 wxDEFINE_EVENT(wxEVT_COMMAND_RIBBONGALLERY_SELECTED, wxRibbonGalleryEvent);
+wxDEFINE_EVENT(wxEVT_COMMAND_RIBBONGALLERY_CLICKED, wxRibbonGalleryEvent);
 
 IMPLEMENT_DYNAMIC_CLASS(wxRibbonGalleryEvent, wxCommandEvent)
 IMPLEMENT_CLASS(wxRibbonGallery, wxRibbonControl)
@@ -356,6 +357,13 @@
                     notification.SetGalleryItem(m_selected_item);
                     ProcessWindowEvent(notification);
                 }
+
+                wxRibbonGalleryEvent notification(
+                    wxEVT_COMMAND_RIBBONGALLERY_CLICKED, GetId());
+                notification.SetEventObject(this);
+                notification.SetGallery(this);
+                notification.SetGalleryItem(m_selected_item);
+                ProcessWindowEvent(notification);
             }
         }
         m_mouse_active_rect = NULL;

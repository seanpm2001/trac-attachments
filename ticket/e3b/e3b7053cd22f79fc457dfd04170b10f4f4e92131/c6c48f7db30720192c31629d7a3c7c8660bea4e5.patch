diff -uNr wxWidgets.orig/include/wx/osx/cocoa/private.h wxWidgets/include/wx/osx/cocoa/private.h
--- wxWidgets.orig/include/wx/osx/cocoa/private.h	2016-05-03 10:20:26.000000000 +0300
+++ wxWidgets/include/wx/osx/cocoa/private.h	2016-05-03 10:53:18.000000000 +0300
@@ -128,6 +128,8 @@
 
     void                InstallEventHandler( WXWidget control = NULL );
 
+    static bool         HandleNavigationByTab(wxWindow * focus, const wxKeyEvent &event);
+
     virtual bool        DoHandleMouseEvent(NSEvent *event);
     virtual bool        DoHandleKeyEvent(NSEvent *event);
     virtual bool        DoHandleCharEvent(NSEvent *event, NSString *text);
diff -uNr wxWidgets.orig/src/osx/cocoa/window.mm wxWidgets/src/osx/cocoa/window.mm
--- wxWidgets.orig/src/osx/cocoa/window.mm	2016-05-03 10:21:06.000000000 +0300
+++ wxWidgets/src/osx/cocoa/window.mm	2016-05-03 11:05:19.000000000 +0300
@@ -2739,6 +2739,50 @@
     [area release];
  }
 
+bool wxWidgetCocoaImpl::HandleNavigationByTab(wxWindow * focus, const wxKeyEvent &event)
+{
+    bool handled = false;
+    if (focus && event.GetKeyCode() == WXK_TAB)
+    {
+        // When the focus is in one of the buttons of a radio box, we must treat the radio box
+        // as the focused control for the navigation logic to work
+#if wxUSE_RADIOBOX
+        wxRadioBox *rb = wxDynamicCast(focus->GetParent(), wxRadioBox);
+        if (rb)
+            focus = rb;
+#endif
+        // Text controls must be allowed to handle the key even if wxWANTS_CHARS is not set, provided wxTE_PROCESS_TAB
+        // is set. To make Shift+TAB work with text controls we must process it here regardless of wxTE_PROCESS_TAB.
+        // For Ctrl(+Shift)+TAB to work as navigation key consistently in all types of text fields we must process it here as well.
+        if (
+#if wxUSE_TEXTCTRL
+            wxDynamicCast(focus, wxTextCtrl) ? (!focus->HasFlag(wxTE_PROCESS_TAB) || event.HasAnyModifiers()) :
+#endif
+            !focus->HasFlag(wxWANTS_CHARS) )
+        {
+            wxWindow* iter = focus->GetParent() ;
+            while ( iter && !handled )
+            {
+                if ( iter->HasFlag( wxTAB_TRAVERSAL ) )
+                {
+                    wxNavigationKeyEvent new_event;
+                    new_event.SetEventObject( focus );
+                    new_event.SetDirection( !event.ShiftDown() );
+                    /* CTRL-TAB changes the (parent) window, i.e. switch notebook page */
+                    new_event.SetWindowChange( event.ControlDown() );
+                    new_event.SetCurrentFocus( focus );
+                    handled = focus->GetParent()->HandleWindowEvent( new_event );
+                    if ( handled && new_event.GetSkipped() )
+                        handled = false ;
+                }
+
+                iter = iter->GetParent() ;
+            }
+        }
+    }
+    return handled;
+}
+ 
 bool wxWidgetCocoaImpl::DoHandleCharEvent(NSEvent *event, NSString *text)
 {
     bool result = false;
@@ -2801,6 +2845,10 @@
         if ( GetWXPeer()->OSXHandleKeyEvent(eventHook)
                 && !eventHook.IsNextEventAllowed() )
             return true;
+
+        // Make TAB navigation follow wxWidgets logic for controls other than wxTextCtrl
+        if (HandleNavigationByTab(GetWXPeer(), wxevent))
+            return true;
     }
 
     if ( IsUserPane() && [event type] == NSKeyDown)

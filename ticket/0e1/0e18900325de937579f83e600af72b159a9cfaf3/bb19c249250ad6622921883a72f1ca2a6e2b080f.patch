Index: docs/latex/wx/category.tex
===================================================================
--- docs/latex/wx/category.tex	(revision 47624)
+++ docs/latex/wx/category.tex	(working copy)
@@ -184,6 +184,7 @@
 \twocolitem{\helpref{wxGridBagSizer}{wxgridbagsizer}}{Another grid sizer that lets you specify the cell an item is in, and items can span rows and/or columns.}
 \twocolitem{\helpref{wxBoxSizer}{wxboxsizer}}{A sizer for laying out windows in a row or column}
 \twocolitem{\helpref{wxStaticBoxSizer}{wxstaticboxsizer}}{Same as wxBoxSizer, but with a surrounding static box}
+\twocolitem{\helpref{wxStackSizer}{wxstacksizer}}{A sizer for stacking windows on top of each other and showing one at a time.}
 \end{twocollist}
 
 \overview{Constraints overview}{constraintsoverview} describes constraints-based layout.
Index: docs/latex/wx/classes.tex
===================================================================
--- docs/latex/wx/classes.tex	(revision 47624)
+++ docs/latex/wx/classes.tex	(working copy)
@@ -380,6 +380,7 @@
 \input statbmp.tex
 \input statbox.tex
 \input sbsizer.tex
+\input ssizer.tex
 \input statline.tex
 \input stattext.tex
 \input statusbr.tex
Index: docs/latex/wx/sizer.tex
===================================================================
--- docs/latex/wx/sizer.tex	(revision 47624)
+++ docs/latex/wx/sizer.tex	(working copy)
@@ -3,9 +3,9 @@
 wxSizer is the abstract base class used for laying out subwindows in a window. You
 cannot use wxSizer directly; instead, you will have to use one of the sizer
 classes derived from it. Currently there are \helpref{wxBoxSizer}{wxboxsizer}, 
-\helpref{wxStaticBoxSizer}{wxstaticboxsizer},
-\helpref{wxGridSizer}{wxgridsizer} 
-\helpref{wxFlexGridSizer}{wxflexgridsizer} and \helpref{wxGridBagSizer}{wxgridbagsizer}.
+\helpref{wxStaticBoxSizer}{wxstaticboxsizer}, \helpref{wxStackSizer}{wxstacksizer},
+\helpref{wxGridSizer}{wxgridsizer}, 
+\helpref{wxFlexGridSizer}{wxflexgridsizer}, and \helpref{wxGridBagSizer}{wxgridbagsizer}.
 
 The layout algorithm used by sizers in wxWidgets is closely related to layout
 in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit. It is
Index: docs/latex/wx/ssizer.tex
===================================================================
--- docs/latex/wx/ssizer.tex	(revision 0)
+++ docs/latex/wx/ssizer.tex	(revision 0)
@@ -0,0 +1,41 @@
+\section{\class{wxStackSizer}}\label{wxstacksizer}
+
+wxStackSizer is a sizer that stacks all children on top of each other
+and is capable of showing only a single child at a time. The children
+may have borders or be shaped, but the proportion is not used.
+
+\wxheading{Derived from}
+
+\helpref{wxSizer}{wxsizer}\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Include files}
+
+<wx/sizer.h>
+
+\wxheading{See also}
+
+\helpref{wxSizer}{wxsizer}, \helpref{Sizer overview}{sizeroverview}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+
+\membersection{wxStackSizer::wxStackSizer}\label{wxstacksizerwxstacksizer}
+
+\func{}{wxStackSizer}{\void}
+
+The constructor for the stack sizer.
+
+
+\membersection{wxStackSizer::ShowSingle}\label{wxstacksizershowsingle}
+
+\func{bool}{ShowSingle}{\param{wxWindow* }{window}}
+
+\func{bool}{ShowSingle}{\param{wxSizer* }{sizer}}
+
+\func{bool}{ShowSingle}{\param{wxSizerItem* }{item}}
+
+\func{bool}{ShowSingle}{\param{size_t }{index}}
+
+Shows the selected sizer item and hides all other items.
+
Index: docs/latex/wx/tsizer.tex
===================================================================
--- docs/latex/wx/tsizer.tex	(revision 47624)
+++ docs/latex/wx/tsizer.tex	(working copy)
@@ -2,7 +2,8 @@
 
 Classes: \helpref{wxSizer}{wxsizer}, \helpref{wxGridSizer}{wxgridsizer}, 
 \helpref{wxFlexGridSizer}{wxflexgridsizer}, \helpref{wxBoxSizer}{wxboxsizer}, 
-\helpref{wxStaticBoxSizer}{wxstaticboxsizer}, 
+\helpref{wxStaticBoxSizer}{wxstaticboxsizer},
+\helpref{wxStackSizer}{wxstacksizer},  
 \helpref{CreateButtonSizer}{createbuttonsizer}
 
 Sizers, as represented by the wxSizer class and its descendants in
@@ -330,6 +331,12 @@
 box around the sizer. Note that this static box has to be created 
 separately.
 
+\subsection{Programming with wxStackSizer}\label{stacksizerprogramming}
+
+\helpref{wxStackSizer}{wxstacksizer} is a sizer derived from wxSizer but
+shows all items stacked on top of each other and can show one item and hide
+all others.
+
 \subsection{CreateButtonSizer}\label{createbuttonsizer}
 
 As a convenience, CreateButtonSizer ( long flags ) can be used to create a standard button sizer
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 47624)
+++ include/wx/sizer.h	(working copy)
@@ -848,6 +848,38 @@
 };
 
 //---------------------------------------------------------------------------
+// wxStackSizer
+//---------------------------------------------------------------------------
+
+class WXDLLEXPORT wxStackSizer: public wxSizer
+{
+public:
+    wxStackSizer()
+    {
+    }
+
+    // implementation of our resizing logic
+    virtual wxSize CalcMin();
+    virtual void RecalcSizes();
+    
+    // show only a single item in the stack, hide all other items
+    bool ShowSingle(wxWindow *window);
+    bool ShowSingle(wxSizer *sizer);
+    bool ShowSingle(size_t index);
+    bool ShowSingle(wxSizerItem *item);
+
+
+protected:
+
+    // the minimal size needed for this sizer as calculated by the last call to
+    // our CalcMin()
+    wxSize m_minSize;
+
+private:
+    DECLARE_CLASS(wxStackSizer)
+};
+
+//---------------------------------------------------------------------------
 // wxStaticBoxSizer
 //---------------------------------------------------------------------------
 
Index: samples/layout/layout.cpp
===================================================================
--- samples/layout/layout.cpp	(revision 47624)
+++ samples/layout/layout.cpp	(working copy)
@@ -30,6 +30,9 @@
 #include "wx/statline.h"
 #include "wx/notebook.h"
 #include "wx/spinctrl.h"
+#include "wx/button.h"
+#include "wx/panel.h"
+#include "wx/colour.h"
 
 #include "layout.h"
 
@@ -64,6 +67,7 @@
   EVT_MENU(LAYOUT_TEST_SIZER, MyFrame::TestFlexSizers)
   EVT_MENU(LAYOUT_TEST_NB_SIZER, MyFrame::TestNotebookSizers)
   EVT_MENU(LAYOUT_TEST_GB_SIZER, MyFrame::TestGridBagSizer)
+  EVT_MENU(LAYOUT_TEST_STACK_SIZER, MyFrame::TestStackSizer)
   EVT_MENU(LAYOUT_TEST_SET_MINIMAL, MyFrame::TestSetMinimal)
   EVT_MENU(LAYOUT_TEST_NESTED, MyFrame::TestNested)
 END_EVENT_TABLE()
@@ -81,8 +85,9 @@
   file_menu->Append(LAYOUT_TEST_SIZER, _T("Test wx&FlexSizer...\tF2"));
   file_menu->Append(LAYOUT_TEST_NB_SIZER, _T("Test &notebook sizers...\tF3"));
   file_menu->Append(LAYOUT_TEST_GB_SIZER, _T("Test &gridbag sizer...\tF4"));
-  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, _T("Test Set&ItemMinSize...\tF5"));
-  file_menu->Append(LAYOUT_TEST_NESTED, _T("Test nested sizer in a wxPanel...\tF6"));
+  file_menu->Append(LAYOUT_TEST_STACK_SIZER, _T("Test &stack sizer...\tF5"));
+  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, _T("Test Set&ItemMinSize...\tF6"));
+  file_menu->Append(LAYOUT_TEST_NESTED, _T("Test nested sizer in a wxPanel...\tF7"));
 
   file_menu->AppendSeparator();
   file_menu->Append(LAYOUT_QUIT, _T("E&xit"), _T("Quit program"));
@@ -225,6 +230,13 @@
     newFrame->Show(true);
 }
 
+void MyFrame::TestStackSizer(wxCommandEvent& WXUNUSED(event) )
+{
+    MyStackSizerFrame *newFrame = new
+        MyStackSizerFrame(_T("wxStackSizer Test Frame"), 50, 50);
+    newFrame->Show(true);
+}
+
 // ----------------------------------------------------------------------------
 // MyProportionsFrame
 // ----------------------------------------------------------------------------
@@ -661,3 +673,85 @@
     GetSizer()->SetSizeHints( this );
 }
 
+// ----------------------------------------------------------------------------
+// MyStackSizerFrame
+// ----------------------------------------------------------------------------
+
+// Some IDs
+enum {
+    SS_NEXT_BTN = 1219,
+};
+
+
+BEGIN_EVENT_TABLE(MyStackSizerFrame, wxFrame)
+    EVT_BUTTON(SS_NEXT_BTN, MyStackSizerFrame::OnNext)
+END_EVENT_TABLE()
+
+
+MyStackSizerFrame::MyStackSizerFrame(const wxChar *title, int x, int y )
+    : wxFrame( NULL, wxID_ANY, title, wxPoint(x, y) )
+{
+    wxMenu *menu = new wxMenu;
+
+    menu->Append(wxID_ABOUT, _T("Do nothing"));
+
+    wxMenuBar *menu_bar = new wxMenuBar;
+    menu_bar->Append(menu, _T("&File"));
+
+    SetMenuBar( menu_bar );
+
+    wxBoxSizer *main_sizer = new wxBoxSizer( wxVERTICAL );
+
+    main_sizer->Add( new wxButton( this, SS_NEXT_BTN, wxT("Next") ), 0, wxALIGN_CENTER );
+
+    wxStackSizer *stack_sizer = new wxStackSizer();
+    
+    wxPanel *panel = new wxPanel( this, -1, wxDefaultPosition, wxDefaultSize );
+    panel->SetBackgroundColour(*wxRED);
+    
+    stack_sizer->Add(panel);
+    
+    panel = new wxPanel( this, -1, wxDefaultPosition, wxDefaultSize );
+    panel->SetBackgroundColour(*wxGREEN);
+    
+    stack_sizer->Add(panel);
+    
+    panel = new wxPanel( this, -1, wxDefaultPosition, wxDefaultSize );
+    panel->SetBackgroundColour(*wxBLUE);
+    
+    stack_sizer->Add(panel);
+
+    panel = new wxPanel( this, -1, wxDefaultPosition, wxSize(320, 240) );
+    panel->SetBackgroundColour(*wxWHITE);
+    
+    stack_sizer->Add(panel, 0, wxSHAPED);
+    
+    panel = new wxPanel( this, -1, wxDefaultPosition, wxDefaultSize );
+    panel->SetBackgroundColour(*wxBLACK);
+    
+    stack_sizer->Add(panel, 0, wxALL, 15);
+    
+    main_sizer->Add(stack_sizer, 1, wxEXPAND | wxALL, 10);
+    
+    // set stack sizer state
+    stack_sizer->ShowSingle((size_t)0);    
+    m_sizer = stack_sizer;
+    m_cursel = 0;    
+    
+    SetSizer( main_sizer);
+
+    Layout();
+    GetSizer()->Fit( this );
+    GetSizer()->SetSizeHints( this );
+}
+
+void MyStackSizerFrame::OnNext(wxCommandEvent& WXUNUSED(evt))
+{
+  m_cursel++;
+  if(m_cursel > 4)
+    m_cursel = 0;
+    
+  m_sizer->ShowSingle(m_cursel);
+  Layout();
+}
+
Index: samples/layout/layout.h
===================================================================
--- samples/layout/layout.h	(revision 47624)
+++ samples/layout/layout.h	(working copy)
@@ -27,6 +27,7 @@
     void TestFlexSizers(wxCommandEvent& event);
     void TestNotebookSizers(wxCommandEvent& event);
     void TestGridBagSizer(wxCommandEvent& event);
+    void TestStackSizer(wxCommandEvent& event);
     void TestNested(wxCommandEvent& event);
     void TestSetMinimal(wxCommandEvent& event);
 
@@ -126,12 +127,29 @@
     wxTextCtrl  *m_target;
 };
 
+// a frame for testing stack sizers, where each item is
+// layed out on top of each other
+class MyStackSizerFrame : public wxFrame
+{
+public:
+    MyStackSizerFrame(const wxChar *title, int x, int y );
+    
+    void OnNext(wxCommandEvent& evt);
+    
+private:
+    wxStackSizer* m_sizer;
+    size_t m_cursel;
+    
+    DECLARE_EVENT_TABLE();
+};
+
 // controls and menu constants
 enum
 {
     LAYOUT_TEST_SIZER = 101,
     LAYOUT_TEST_NB_SIZER,
     LAYOUT_TEST_GB_SIZER,
+    LAYOUT_TEST_STACK_SIZER,
     LAYOUT_TEST_PROPORTIONS,
     LAYOUT_TEST_SET_MINIMAL,
     LAYOUT_TEST_NESTED,
Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 47624)
+++ src/common/sizer.cpp	(working copy)
@@ -41,6 +41,7 @@
 IMPLEMENT_CLASS(wxGridSizer, wxSizer)
 IMPLEMENT_CLASS(wxFlexGridSizer, wxGridSizer)
 IMPLEMENT_CLASS(wxBoxSizer, wxSizer)
+IMPLEMENT_CLASS(wxStackSizer, wxSizer)
 #if wxUSE_STATBOX
 IMPLEMENT_CLASS(wxStaticBoxSizer, wxBoxSizer)
 #endif
@@ -1762,6 +1763,89 @@
 }
 
 //---------------------------------------------------------------------------
+// wxStackSizer
+//---------------------------------------------------------------------------
+
+void wxStackSizer::RecalcSizes()
+{
+    if ( m_children.empty() )
+        return;
+
+    // all children are set to be stacked on top of each other
+    // at the same position and with the same size
+    for ( wxSizerItemList::const_iterator i = m_children.begin();
+          i != m_children.end();
+          ++i )
+    {
+        wxSizerItem * const item = *i;
+
+        item->SetDimension(m_position, m_size);
+    }
+}
+
+wxSize wxStackSizer::CalcMin()
+{
+    m_minSize = wxSize(0, 0);
+
+    // calculate the minimal sizes for all items
+    for ( wxSizerItemList::const_iterator i = m_children.begin();
+          i != m_children.end();
+          ++i )
+    {
+        wxSizerItem * const item = *i;
+
+        // items that are not shown are still used to calculate size
+        const wxSize sizeMinThis = item->CalcMin();
+
+        if(sizeMinThis.GetWidth() > m_minSize.GetWidth())
+            m_minSize.SetWidth(sizeMinThis.GetWidth());
+            
+        if(sizeMinThis.GetHeight() > m_minSize.GetHeight())
+            m_minSize.SetHeight(sizeMinThis.GetHeight());
+    }
+
+    return m_minSize;
+}
+
+bool wxStackSizer::ShowSingle(wxWindow *window)
+{
+    return ShowSingle(GetItem(window, false));
+}
+
+bool wxStackSizer::ShowSingle(wxSizer *sizer)
+{
+    return ShowSingle(GetItem(sizer, false));
+}
+
+bool wxStackSizer::ShowSingle(size_t index)
+{
+    return ShowSingle(GetItem(index));
+}
+
+bool wxStackSizer::ShowSingle(wxSizerItem *item)
+{
+    if(item)
+    {
+        // ensure that all other items are hidden
+        for ( wxSizerItemList::const_iterator i = m_children.begin();
+              i != m_children.end();
+              ++i )
+        {
+            wxSizerItem * const currentItem = *i;
+
+            if(currentItem != item)
+                currentItem->Show(false);
+        }
+        
+        // show the item
+        item->Show(true);
+        return true;
+    }
+
+    return false;
+}
+
+//---------------------------------------------------------------------------
 // wxStaticBoxSizer
 //---------------------------------------------------------------------------
 

 	  	 

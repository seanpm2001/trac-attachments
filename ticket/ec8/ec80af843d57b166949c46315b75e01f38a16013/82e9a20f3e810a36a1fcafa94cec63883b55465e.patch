--- wxWidgets-trunk/include/wx/msw/textctrl.h	2013-12-29
+++ wxWidgets-work/include/wx/msw/textctrl.h	2014-03-23
@@ -284,7 +284,14 @@
 #if wxUSE_INKEDIT && wxUSE_RICHEDIT
     int  m_isInkEdit;
 #endif
-
+    // The length of the text being currently inserted into the control.
+    //
+    // This is used to pass information from DoWriteText() to AdjustSpaceLimit()
+    // and is global as text can only be inserted into one text control at a time
+    // by a single thread and this operation can only be done from the main thread
+    // (and we don't want to waste space in every wxTextCtrl object for this field
+    // unnecessarily).
+    long m_lenOfInsertedText;
 };
 
 #endif // _WX_TEXTCTRL_H_
--- wxWidgets-trunk/src/msw/textctrl.cpp	2014-02-20
+++ wxWidgets-work/src/msw/textctrl.cpp	2014-03-23
@@ -173,20 +173,6 @@
     wxDECLARE_NO_COPY_CLASS(UpdatesCountFilter);
 };
 
-namespace
-{
-
-// The length of the text being currently inserted into the control.
-//
-// This is used to pass information from DoWriteText() to AdjustSpaceLimit()
-// and is global as text can only be inserted into one text control at a time
-// by a single thread and this operation can only be done from the main thread
-// (and we don't want to waste space in every wxTextCtrl object for this field
-// unnecessarily).
-int gs_lenOfInsertedText = 0;
-
-} // anonymous namespace
-
 // ----------------------------------------------------------------------------
 // event tables and other macros
 // ----------------------------------------------------------------------------
@@ -1154,13 +1140,13 @@
         // Remember the length of the text we're inserting so that
         // AdjustSpaceLimit() could adjust the limit to be big enough for it:
         // and also signal us whether it did it by resetting it to 0.
-        gs_lenOfInsertedText = valueDos.length();
+        m_lenOfInsertedText = valueDos.length();
 
         ::SendMessage(GetHwnd(), selectionOnly ? EM_REPLACESEL : WM_SETTEXT,
                       // EM_REPLACESEL takes 1 to indicate the operation should be redoable
                       selectionOnly ? 1 : 0, wxMSW_CONV_LPARAM(valueDos));
 
-        if ( !gs_lenOfInsertedText )
+        if( (size_t)::GetWindowTextLength(GetHwnd()) < m_lenOfInsertedText )
         {
             // Text size limit has been hit and added text has been truncated.
             // But the max length has been increased by the EN_MAXTEXT message
@@ -1172,11 +1158,6 @@
             ::SendMessage(GetHwnd(), selectionOnly ? EM_REPLACESEL : WM_SETTEXT,
                           selectionOnly ? 1 : 0, wxMSW_CONV_LPARAM(valueDos));
         }
-        else
-        {
-            // EN_MAXTEXT handler wasn't called, so reset the flag ourselves.
-            gs_lenOfInsertedText = 0;
-        }
 
         if ( !ucf.GotUpdate() && (flags & SetValue_SendEvent) )
         {
@@ -2159,10 +2140,7 @@
         // We need to increase the size of the buffer and to avoid increasing
         // it too many times make sure that we make it at least big enough to
         // fit all the text we are currently inserting into the control.
-        unsigned long increaseBy = gs_lenOfInsertedText;
-
-        // Don't let it affect any future unrelated calls to this function.
-        gs_lenOfInsertedText = 0;
+        unsigned long increaseBy = m_lenOfInsertedText;
 
         // But also increase it by at least 32KB chunks -- again, to avoid
         // doing it too often -- and round it up to 32KB in any case.

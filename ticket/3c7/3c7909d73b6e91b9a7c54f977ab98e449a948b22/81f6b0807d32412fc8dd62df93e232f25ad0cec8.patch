Index: src/gtk/busyinfo.cpp
===================================================================
--- src/gtk/busyinfo.cpp	(revisione 0)
+++ src/gtk/busyinfo.cpp	(revisione 0)
@@ -0,0 +1,163 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/gtk/busyinfo.cpp
+// Purpose:     Information window when app is busy
+// Author:      Francesco Montorsi
+// Copyright:   (c) 2009 Francesco Montorsi
+// RCS-ID:      $Id$
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#if wxUSE_BUSYINFO
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/frame.h"
+    #include "wx/stattext.h"
+    #include "wx/panel.h"
+    #include "wx/utils.h"
+#endif
+
+#include "wx/busyinfo.h"
+#include "wx/fontutil.h"
+#include "wx/gtk/private.h"
+
+#include <gtk/gtk.h>
+
+
+// ----------------------------------------------------------------------------
+// "expose_event"
+// ----------------------------------------------------------------------------
+
+extern "C" {
+static gboolean
+gtk_busyinfo_expose_callback( GtkWidget* widget,
+                              GdkEventExpose *gdk_event,
+                              wxBusyInfo* bi )
+{
+    const wxString& str = bi->GetMessage();
+    const wxSize& szMsg = bi->GetMessageSize();
+    const wxSize& szWin = bi->GetWindowSize();
+
+    // setup the font
+    const wxNativeFontInfo* fnt = wxNORMAL_FONT->GetNativeFontInfo();
+    PangoLayout* layout =
+        gtk_widget_create_pango_layout(widget, wxGTK_CONV_FONT(str, wxNORMAL_FONT));
+    pango_layout_set_font_description(layout, fnt->description);
+
+    // draw the user message on the GDK window
+    GdkGC* gc = gdk_gc_new(gdk_event->window);
+    gdk_draw_layout(gdk_event->window, gc, (szWin.x-szMsg.x)/2, (szWin.y-szMsg.y)/2, layout);
+
+    // cleanup
+    g_object_unref(layout);
+    g_object_unref(gc);
+
+    return TRUE;
+}
+
+static gboolean
+gtk_busyinfo_button_press_callback( GtkWidget *widget,
+                                    GdkEventButton *gdk_event,
+                                    wxBusyInfo *win )
+{
+    printf("gtk_busyinfo_button_press_callback\n");
+    fflush(stdout);
+    return TRUE;
+}
+
+static gboolean
+gtk_busyinfo_focus_callback( GtkWindow *window, GtkWidget *widget,
+                              wxBusyInfo *win )
+{
+    printf("gtk_busyinfo_focus_callback\n");
+    fflush(stdout);
+    return TRUE;
+}
+
+static gboolean
+gtk_busyinfo_delete_callback( GtkWidget *WXUNUSED(widget),
+                              GdkEvent *WXUNUSED(event),
+                              wxBusyInfo *win )
+{
+    printf("gtk_busyinfo_delete_callback\n");
+    fflush(stdout);
+    return TRUE;
+}
+
+static gboolean
+gtk_busyinfo_hide_callback( GtkWidget *WXUNUSED(widget),
+                            wxBusyInfo *win )
+{
+    printf("gtk_busyinfo_hide_callback\n");
+    fflush(stdout);
+    return TRUE;
+}
+
+}
+
+
+// ----------------------------------------------------------------------------
+// wxBusyInfo
+// ----------------------------------------------------------------------------
+
+wxBusyInfo::wxBusyInfo(const wxString& message, wxWindow *parent)
+{
+    m_message = message;
+    m_widget = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+    g_object_ref(m_widget);
+
+    // get the size of the user's message
+    const wxNativeFontInfo* fnt = wxNORMAL_FONT->GetNativeFontInfo();
+    PangoLayout* layout =
+        gtk_widget_create_pango_layout(m_widget, wxGTK_CONV_FONT(m_message, wxNORMAL_FONT));
+    pango_layout_set_font_description(layout, fnt->description);
+    pango_layout_get_pixel_size(layout, &m_szMsg.x, &m_szMsg.y);
+    g_object_unref(layout);
+
+    // size the busyinfo window just as the generic version does
+    m_szWin.x = wxMax(m_szMsg.x, 340) + 60;
+    m_szWin.y = wxMax(m_szMsg.y, 40) + 40;
+    gtk_widget_set_size_request(m_widget, m_szWin.x, m_szWin.y);
+
+#if 1
+    gtk_window_set_type_hint(GTK_WINDOW(m_widget),
+                             GDK_WINDOW_TYPE_HINT_SPLASHSCREEN);
+#else
+    gtk_window_set_type_hint(GTK_WINDOW(m_widget),
+                             GDK_WINDOW_TYPE_HINT_UTILITY);
+    gtk_window_set_type_hint(GTK_WINDOW(m_widget),
+                             GDK_WINDOW_TYPE_HINT_NOTIFICATION);
+    gtk_window_set_type_hint(GTK_WINDOW(m_widget),
+                             GDK_WINDOW_TYPE_HINT_TOOLTIP);
+#endif
+
+    g_signal_connect (m_widget, "expose_event",
+                      G_CALLBACK (gtk_busyinfo_expose_callback), this);
+    g_signal_connect (m_widget, "hide",
+                      G_CALLBACK (gtk_busyinfo_hide_callback), this);
+#if 0
+    g_signal_connect (m_widget, "button-press-event",
+                      G_CALLBACK (gtk_busyinfo_button_press_callback), this);
+    g_signal_connect (m_widget, "set-focus",
+                      G_CALLBACK (gtk_busyinfo_focus_callback), this);
+    g_signal_connect (m_widget, "delete-event",
+                      G_CALLBACK (gtk_busyinfo_delete_callback), this);
+#endif
+
+    gtk_widget_show_all(m_widget);
+}
+
+wxBusyInfo::~wxBusyInfo()
+{
+    gtk_widget_hide_all(GTK_WIDGET(m_widget));
+    g_object_unref(m_widget);
+    m_widget = NULL;
+}
+
+#endif // wxUSE_BUSYINFO

Proprietà modificate su: src/gtk/busyinfo.cpp
___________________________________________________________________
Added: svn:keywords
   + Id Date Author Revision

Index: src/generic/busyinfo.cpp
===================================================================
--- src/generic/busyinfo.cpp	(revisione 58500)
+++ src/generic/busyinfo.cpp	(copia locale)
@@ -124,14 +124,6 @@
     m_InfoFrame->Show(true);
     m_InfoFrame->Refresh();
     m_InfoFrame->Update();
-
-#ifdef __WXGTK20__
-    // FIXME: this is pretty bad, as any call to Yield(), but without it, the
-    //         static text is never shown and neither gdk_display_flush() nor
-    //         gdk_display_sync() nor gdk_window_process_updates() helps
-    wxMilliSleep(100);
-    wxYield();
-#endif
 }
 
 wxBusyInfo::~wxBusyInfo()
Index: include/wx/busyinfo.h
===================================================================
--- include/wx/busyinfo.h	(revisione 58500)
+++ include/wx/busyinfo.h	(copia locale)
@@ -14,7 +14,11 @@
 
 #if wxUSE_BUSYINFO
 
+#if defined(__WXGTK20__)
+#include "wx/gtk/busyinfo.h"
+#else
 #include "wx/generic/busyinfo.h"
+#endif
 
 #endif // wxUSE_BUSYINFO
 
Index: include/wx/gtk/busyinfo.h
===================================================================
--- include/wx/gtk/busyinfo.h	(revisione 0)
+++ include/wx/gtk/busyinfo.h	(revisione 0)
@@ -0,0 +1,49 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/gtk/busyinfo.h
+// Purpose:     Information window (when app is busy)
+// Author:      Francesco Montorsi
+// Copyright:   (c) 2009 Francesco Montorsi
+// RCS-ID:      $Id$
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __BUSYINFO_H_GTK__
+#define __BUSYINFO_H_GTK__
+
+#include "wx/defs.h"
+
+#if wxUSE_BUSYINFO
+
+class WXDLLIMPEXP_FWD_CORE wxFrame;
+class WXDLLIMPEXP_FWD_CORE wxWindow;
+
+//--------------------------------------------------------------------------------
+// wxBusyInfo
+//--------------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxBusyInfo : public wxObject
+{
+public:
+    wxBusyInfo(const wxString& message, wxWindow *parent = NULL);
+
+    virtual ~wxBusyInfo();
+
+    wxString GetMessage() const
+        { return m_message; }
+    wxSize GetMessageSize() const
+        { return m_szMsg; }
+    wxSize GetWindowSize() const
+        { return m_szWin; }
+
+private:
+    GtkWidget* m_widget;
+    wxString m_message;
+    wxSize m_szMsg, m_szWin;
+
+    DECLARE_NO_COPY_CLASS(wxBusyInfo)
+};
+
+
+#endif // wxUSE_BUSYINFO
+
+#endif // __BUSYINFO_H_GTK__

Proprietà modificate su: include/wx/gtk/busyinfo.h
___________________________________________________________________
Added: svn:keywords
   + Id Date Author Revision


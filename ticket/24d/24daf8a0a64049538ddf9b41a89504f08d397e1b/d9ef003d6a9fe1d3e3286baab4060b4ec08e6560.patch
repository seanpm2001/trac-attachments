Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 65929)
+++ include/wx/dataview.h	(working copy)
@@ -179,6 +179,47 @@
 };
 
 
+
+// ----------------------------------------------------------------------------
+// wxDataViewRowAttr: a structure containing the visual attributes of a row
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_ADV wxDataViewRowAttr
+{
+public:
+    // ctors
+    wxDataViewRowAttr()
+    {
+        m_bold = false;
+        m_italic = false;
+    }
+
+    // setters
+    void SetForegroundColour(const wxColour& colour) { m_fgColour = colour; }
+    void SetBackgroundColour(const wxColour& colour) { m_bgColour = colour; }
+    void SetBold( bool set ) { m_bold = set; }
+    void SetItalic( bool set ) { m_italic = set; }
+
+    // accessors
+    bool HasForegroundColour() const { return m_fgColour.Ok(); }
+    bool HasBackgroundColour() const { return m_bgColour.Ok(); }
+    const wxColour& GetForegroundColour() const { return m_fgColour; }
+    const wxColour& GetBackgroundColour() const { return m_bgColour; }
+
+    bool HasFont() const { return m_bold || m_italic; }
+    bool GetBold() const { return m_bold; }
+    bool GetItalic() const { return m_italic; }
+
+    bool IsDefault() const { return !(HasForegroundColour() || HasBackgroundColour() || HasFont()); }
+
+private:
+    wxColour m_fgColour;
+    wxColour m_bgColour;
+    bool     m_bold;
+    bool     m_italic;
+};
+
+
 // ---------------------------------------------------------
 // wxDataViewModel
 // ---------------------------------------------------------
@@ -231,6 +272,13 @@
         return false;
     }
 
+    // Get row attribute, return false of default attributes should be used.
+    // When item attribute is available too, use item attribute first
+    virtual bool GetRowAttr(unsigned int WXUNUSED(row), wxDataViewRowAttr &WXUNUSED(attr)) const
+    {
+        return false;
+    }
+
     // define hierachy
     virtual wxDataViewItem GetParent( const wxDataViewItem &item ) const = 0;
     virtual bool IsContainer( const wxDataViewItem &item ) const = 0;
Index: interface/wx/dataview.h
===================================================================
--- interface/wx/dataview.h	(revision 65929)
+++ interface/wx/dataview.h	(working copy)
@@ -168,6 +168,26 @@
                          wxDataViewItemAttr& attr) const;
 
     /**
+        Override this to indicate that the row has special background colour,
+        foreground colour and font attributes.
+        The foreground colour and font only affects the wxDataViewTextRendererText
+		renderer.
+
+        The base class version always simply returns @false.
+
+        @see wxDataViewRowAttr.
+
+        @param row
+            The row for which the attribute is requested.
+        @param attr
+            The attribute to be filled in if the function returns @true.
+        @return
+            @true if this item has an attribute or @false otherwise.
+    */
+    virtual bool GetRowAttr(unsigned int row,
+                         wxDataViewRowAttr& attr) const;
+
+    /**
         Override this so the control can query the child items of an item.
         Returns the number of items.
     */
@@ -540,6 +560,50 @@
 
 
 /**
+    @class wxDataViewRowAttr
+
+    This class is used to indicate to a wxDataViewCtrl that a certain row
+    has extra foreground colour, background colour and font attributes.
+    For this, it is required to override wxDataViewModel::GetRowAttr.
+
+    If the items in the row have wxDataViewItemAttr, the attributes also existed in 
+    wxDataViewItemAttr will be used first.
+
+    @library{wxadv}
+    @category{dvc}
+*/
+class wxDataViewRowAttr
+{
+public:
+    /**
+        Constructor.
+    */
+    wxDataViewRowAttr();
+
+    /**
+        Call this to indicate that the item shall be displayed in bold text.
+    */
+    void SetBold(bool set);
+
+    /**
+        Call this to indicate that the row shall be displayed with that foreground colour.
+    */
+    void SetForegroundColour(const wxColour& colour);
+	
+	/**
+        Call this to indicate that the row shall be displayed with that background colour.
+    */
+    void SetBackgroundColour(const wxColour& colour);
+
+    /**
+        Call this to indicate that the item shall be displayed in italic text.
+    */
+    void SetItalic(bool set);
+};
+
+
+
+/**
     @class wxDataViewItem
 
     wxDataViewItem is a small opaque class that represents an item in a wxDataViewCtrl
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 65929)
+++ src/generic/datavgen.cpp	(working copy)
@@ -1637,6 +1637,21 @@
         x_last += col->GetWidth();
     }
 
+    // draw the background colour for the rows which have row attribute
+    for (unsigned int item = item_start; item < item_last; item++)
+    {
+        wxDataViewRowAttr attr;
+        if (model->GetRowAttr(item, attr))
+        {
+            wxRect rect( x_start, GetLineStart( item ),
+                x_last - x_start, GetLineHeight( item ) );
+
+            dc.SetPen(attr.GetBackgroundColour());
+            dc.SetBrush(attr.GetBackgroundColour());
+            dc.DrawRectangle(rect);
+        }
+    }
+
     // Draw horizontal rules if required
     if ( m_owner->HasFlag(wxDV_HORIZ_RULES) )
     {
@@ -1757,7 +1772,17 @@
             cell->SetValue( value );
 
             wxDataViewItemAttr attr;
-            model->GetAttr(dataitem, col->GetModelColumn(), attr);
+            // if no item attribute, use the row attribute instead
+            if (!model->GetAttr(dataitem, col->GetModelColumn(), attr))
+            {
+                wxDataViewRowAttr rowAttr;
+                if (model->GetRowAttr(item, rowAttr))
+                {
+                    attr.SetColour(rowAttr.GetForegroundColour());
+                    attr.SetBold(rowAttr.GetBold());
+                    attr.SetItalic(rowAttr.GetItalic());
+                }
+            }
             cell->SetAttr(attr);
 
             // update cell_rect

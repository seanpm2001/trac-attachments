Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 69019)
+++ include/wx/dataview.h	(working copy)
@@ -143,6 +143,7 @@
     void SetColour(const wxColour& colour) { m_colour = colour; }
     void SetBold( bool set ) { m_bold = set; }
     void SetItalic( bool set ) { m_italic = set; }
+    void SetBackgroundColour(const wxColour& colour)  { m_bgColour = colour; } 
 
     // accessors
     bool HasColour() const { return m_colour.IsOk(); }
@@ -152,8 +153,11 @@
     bool GetBold() const { return m_bold; }
     bool GetItalic() const { return m_italic; }
 
-    bool IsDefault() const { return !(HasColour() || HasFont()); }
+    bool HasBackgroundColour() const { return m_bgColour.IsOk(); }
+    const wxColour& GetBackgroundColour() const { return m_bgColour; }
 
+    bool IsDefault() const { return !(HasColour() || HasFont() || HasBackgroundColour()); } 
+
     // Return the font based on the given one with this attribute applied to it.
     wxFont GetEffectiveFont(const wxFont& font) const;
 
@@ -161,8 +165,47 @@
     wxColour m_colour;
     bool     m_bold;
     bool     m_italic;
+    wxColour m_bgColour; 
 };
 
+// ---------------------------------------------------------------------------- 
+// wxDataViewRowAttr: a structure containing the visual attributes of a row 
+// ---------------------------------------------------------------------------- 
+ 
+class WXDLLIMPEXP_ADV wxDataViewRowAttr 
+{ 
+public: 
+    // ctors 
+    wxDataViewRowAttr() 
+    { 
+        m_bold = false; 
+        m_italic = false; 
+    } 
+ 
+    // setters 
+    void SetForegroundColour(const wxColour& colour) { m_fgColour = colour; } 
+    void SetBackgroundColour(const wxColour& colour) { m_bgColour = colour; } 
+    void SetBold( bool set ) { m_bold = set; } 
+    void SetItalic( bool set ) { m_italic = set; } 
+ 
+    // accessors 
+    bool HasForegroundColour() const { return m_fgColour.Ok(); } 
+    bool HasBackgroundColour() const { return m_bgColour.Ok(); } 
+    const wxColour& GetForegroundColour() const { return m_fgColour; } 
+    const wxColour& GetBackgroundColour() const { return m_bgColour; } 
+ 
+    bool HasFont() const { return m_bold || m_italic; } 
+    bool GetBold() const { return m_bold; } 
+    bool GetItalic() const { return m_italic; } 
+ 
+    bool IsDefault() const { return !(HasForegroundColour() || HasBackgroundColour() || HasFont()); } 
+ 
+private: 
+    wxColour m_fgColour; 
+    wxColour m_bgColour; 
+    bool     m_bold; 
+    bool     m_italic; 
+}; 
 
 // ---------------------------------------------------------
 // wxDataViewModel
@@ -223,6 +266,13 @@
         return true;
     }
 
+    // Get row attribute, return false of default attributes should be used. 
+    // When item attribute is available too, use item attribute first 
+    virtual bool GetRowAttr(unsigned int WXUNUSED(row), wxDataViewRowAttr &WXUNUSED(attr)) const 
+    { 
+        return false; 
+    } 
+
     // define hierachy
     virtual wxDataViewItem GetParent( const wxDataViewItem &item ) const = 0;
     virtual bool IsContainer( const wxDataViewItem &item ) const = 0;
Index: include/wx/dvrenderers.h
===================================================================
--- include/wx/dvrenderers.h	(revision 69019)
+++ include/wx/dvrenderers.h	(working copy)
@@ -281,6 +281,9 @@
     // platform-specific classes.
     virtual wxDC *GetDC() = 0;
 
+    // To draw background use the background colour in wxDataViewItemAttr 
+    virtual void RenderBackground(wxDC* dc, const wxRect& rect); 
+
     // Prepare DC to use attributes and call Render().
     void WXCallRender(wxRect rect, wxDC *dc, int state);
 
Index: interface/wx/dataview.h
===================================================================
--- interface/wx/dataview.h	(revision 69019)
+++ interface/wx/dataview.h	(working copy)
@@ -6,7 +6,48 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
+/** 
+    @class wxDataViewRowAttr 
+ 
+    This class is used to indicate to a wxDataViewCtrl that a certain row 
+    has extra foreground colour, background colour and font attributes. 
+    For this, it is required to override wxDataViewModel::GetRowAttr. 
+ 
+    If the items in the row have wxDataViewItemAttr, the attributes also existed in  
+    wxDataViewItemAttr will be used first. 
+ 
+    @library{wxadv} 
+    @category{dvc} 
+*/ 
+class wxDataViewRowAttr 
+{ 
+public: 
+    /** 
+        Constructor. 
+    */ 
+    wxDataViewRowAttr(); 
+ 
+    /** 
+        Call this to indicate that the item shall be displayed in bold text. 
+    */ 
+    void SetBold(bool set); 
+ 
+    /** 
+        Call this to indicate that the row shall be displayed with that foreground colour. 
+    */ 
+    void SetForegroundColour(const wxColour& colour); 
+         
+    /** 
+        Call this to indicate that the row shall be displayed with that background colour. 
+    */ 
+    void SetBackgroundColour(const wxColour& colour); 
 
+    /** 
+        Call this to indicate that the item shall be displayed in italic text. 
+    */ 
+    void SetItalic(bool set); 
+};
+
 /**
     @class wxDataViewModel
 
@@ -94,6 +135,7 @@
     @library{wxadv}
     @category{dvc}
 */
+
 class wxDataViewModel : public wxRefCounter
 {
 public:
@@ -235,6 +277,25 @@
     */
     virtual bool HasContainerColumns(const wxDataViewItem& item) const;
 
+    /** 
+        Override this to indicate that the row has special background colour, 
+        foreground colour and font attributes. 
+        The foreground colour and font only affects the wxDataViewTextRendererText 
+                renderer. 
+ 
+        The base class version always simply returns @false. 
+ 
+        @see wxDataViewRowAttr. 
+ 
+        @param row 
+            The row for which the attribute is requested. 
+        @param attr 
+            The attribute to be filled in if the function returns @true. 
+        @return 
+            @true if this item has an attribute or @false otherwise. 
+    */
+    virtual bool GetRowAttr(unsigned int row, wxDataViewRowAttr& attr) const;
+
     /**
         Override this to indicate that the model provides a default compare
         function that the control should use if no wxDataViewColumn has been
Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	(revision 69019)
+++ src/common/datavcmn.cpp	(working copy)
@@ -795,7 +795,16 @@
     SetValue(value);
 
     wxDataViewItemAttr attr;
-    model->GetAttr(item, column, attr);
+    if (!model->GetAttr(item, column, attr)) {
+        wxDataViewRowAttr rowAttr; 
+		if (model->GetRowAttr(wxPtrToUInt(item.m_pItem), rowAttr)) 
+        { 
+            attr.SetColour(rowAttr.GetForegroundColour()); 
+            attr.SetBold(rowAttr.GetBold()); 
+            attr.SetItalic(rowAttr.GetItalic()); 
+        } 
+	}
+
     SetAttr(attr);
 
     SetEnabled(model->IsEnabled(item, column));
@@ -806,6 +815,18 @@
 // wxDataViewCustomRendererBase
 // ----------------------------------------------------------------------------
 
+void wxDataViewCustomRendererBase::RenderBackground(wxDC* dc, const wxRect& rect) 
+{ 
+    if (!m_attr.HasBackgroundColour()) 
+        return; 
+ 
+    const wxColour& colour = m_attr.GetBackgroundColour(); 
+    wxDCPenChanger changePen(*dc, colour); 
+    wxDCBrushChanger changeBrush(*dc, colour); 
+ 
+    dc->DrawRectangle(rect); 
+}
+
 void
 wxDataViewCustomRendererBase::WXCallRender(wxRect rectCell, wxDC *dc, int state)
 {
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 69019)
+++ src/generic/datavgen.cpp	(working copy)
@@ -646,6 +646,8 @@
 
     wxDataViewTreeNode * FindNode( const wxDataViewItem & item );
 
+    void DrawCellBackground( wxDataViewRenderer* cell, wxDC& dc, const wxRect& rect ); 
+
 private:
     wxDataViewCtrl             *m_owner;
     int                         m_lineHeight;
@@ -1408,7 +1410,7 @@
     m_currentCol = NULL;
     m_currentRow = 0;
 
-    m_lineHeight = wxMax( 17, GetCharHeight() + 2 ); // 17 = mini icon height + 1
+    m_lineHeight = wxMax( 19, GetCharHeight() + 2 ); // 17 = mini icon height + 1
 
 #if wxUSE_DRAG_AND_DROP
     m_dragCount = 0;
@@ -1745,6 +1747,21 @@
         x_last += col->GetWidth();
     }
 
+    // draw the background colour for the rows which have row attribute 
+    for (unsigned int item = item_start; item < item_last; item++) 
+    { 
+        wxDataViewRowAttr attr; 
+        if (model->GetRowAttr(item, attr)) 
+        { 
+            wxRect rect( x_start, GetLineStart( item ), 
+                x_last - x_start, GetLineHeight( item ) ); 
+ 
+            dc.SetPen(attr.GetBackgroundColour()); 
+            dc.SetBrush(attr.GetBackgroundColour()); 
+            dc.DrawRectangle(rect); 
+        } 
+    }
+
     // Draw horizontal rules if required
     if ( m_owner->HasFlag(wxDV_HORIZ_RULES) )
     {
@@ -1870,6 +1887,11 @@
             cell_rect.y = GetLineStart( item );
             cell_rect.height = GetLineHeight( item );
 
+            // draw the background 
+            bool selected = m_selection.Index( item ) != wxNOT_FOUND; 
+            if ( !selected ) 
+                DrawCellBackground( cell, dc, cell_rect );
+
             // deal with the expander
             int indent = 0;
             if ((!IsList()) && (col == expander))
@@ -1923,7 +1945,8 @@
                 continue;
 
             int state = 0;
-            if (m_hasFocus && (m_selection.Index(item) != wxNOT_FOUND))
+            //if (m_hasFocus && (m_selection.Index(item) != wxNOT_FOUND))
+            if (m_hasFocus && selected) 
                 state |= wxDATAVIEW_CELL_SELECTED;
 
             // TODO: it would be much more efficient to create a clipping
@@ -1942,6 +1965,28 @@
     }
 }
 
+void wxDataViewMainWindow::DrawCellBackground( wxDataViewRenderer* cell, wxDC& dc, const wxRect& rect ) 
+{ 
+ 
+    wxRect bg_rect( rect ); 
+ 
+    // don't overlap the horizontal rules 
+    if ( m_owner->HasFlag(wxDV_HORIZ_RULES) ) 
+    { 
+        bg_rect.x++; 
+        bg_rect.width--; 
+    } 
+ 
+    // don't overlap the vertical rules 
+    if ( m_owner->HasFlag(wxDV_VERT_RULES) ) 
+    { 
+        bg_rect.y++; 
+        bg_rect.height--; 
+    } 
+ 
+    cell->RenderBackground(&dc, bg_rect); 
+} 
+
 void wxDataViewMainWindow::OnRenameTimer()
 {
     // We have to call this here because changes may just have

Index: configure
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/configure,v
retrieving revision 1.578
diff -u -2 -r1.578 configure
--- configure	2003/07/04 14:00:36	1.578
+++ configure	2003/07/04 19:08:17
@@ -874,4 +874,6 @@
   --enable-optimise       create optimised code
   --enable-debug          same as debug_flag and debug_info
+  --enable-stl            use STL for containers
+  --enable-stl_only       use only STL for containers
   --enable-precomp        enable use of precompiled headers (Mac OS X/Darwin)
   --enable-debug_flag     set __WXDEBUG__ flag (recommended for developers!)
@@ -1938,4 +1940,6 @@
 if test $DEBUG_CONFIGURE = 1; then
   DEFAULT_wxUSE_UNIVERSAL=no
+  DEFAULT_wxUSE_STL=no
+  DEFAULT_wxUSE_STL_ONLY=no
 
   DEFAULT_wxUSE_NANOX=no
@@ -2112,4 +2116,6 @@
 else
   DEFAULT_wxUSE_UNIVERSAL=no
+  DEFAULT_wxUSE_STL=no
+  DEFAULT_wxUSE_STL_ONLY=no
 
   DEFAULT_wxUSE_NANOX=no
@@ -3132,5 +3138,87 @@
 
 
+	  enablestring=
+          echo "$as_me:$LINENO: checking for --${enablestring:-enable}-stl" >&5
+echo $ECHO_N "checking for --${enablestring:-enable}-stl... $ECHO_C" >&6
+          no_cache=0
+          # Check whether --enable-stl or --disable-stl was given.
+if test "${enable_stl+set}" = set; then
+  enableval="$enable_stl"
+
+                          if test "$enableval" = yes; then
+                            ac_cv_use_stl='wxUSE_STL=yes'
+                          else
+                            ac_cv_use_stl='wxUSE_STL=no'
+                          fi
+
+else
+
+                          LINE=`grep "wxUSE_STL" ${wx_arg_cache_file}`
+                          if test "x$LINE" != x ; then
+                            eval "DEFAULT_$LINE"
+                          else
+                            no_cache=1
+                          fi
+
+                          ac_cv_use_stl='wxUSE_STL='$DEFAULT_wxUSE_STL
+
+fi;
+
+          eval "$ac_cv_use_stl"
+          if test "$no_cache" != 1; then
+            echo $ac_cv_use_stl >> ${wx_arg_cache_file}.tmp
+          fi
+
+          if test "$wxUSE_STL" = yes; then
+            echo "$as_me:$LINENO: result: yes" >&5
+echo "${ECHO_T}yes" >&6
+          else
+            echo "$as_me:$LINENO: result: no" >&5
+echo "${ECHO_T}no" >&6
+          fi
+
+
+	  enablestring=
+          echo "$as_me:$LINENO: checking for --${enablestring:-enable}-stl_only" >&5
+echo $ECHO_N "checking for --${enablestring:-enable}-stl_only... $ECHO_C" >&6
+          no_cache=0
+          # Check whether --enable-stl_only or --disable-stl_only was given.
+if test "${enable_stl_only+set}" = set; then
+  enableval="$enable_stl_only"
+
+                          if test "$enableval" = yes; then
+                            ac_cv_use_stl_only='wxUSE_STL_ONLY=yes'
+                          else
+                            ac_cv_use_stl_only='wxUSE_STL_ONLY=no'
+                          fi
+
+else
+
+                          LINE=`grep "wxUSE_STL_ONLY" ${wx_arg_cache_file}`
+                          if test "x$LINE" != x ; then
+                            eval "DEFAULT_$LINE"
+                          else
+                            no_cache=1
+                          fi
+
+                          ac_cv_use_stl_only='wxUSE_STL_ONLY='$DEFAULT_wxUSE_STL_ONLY
+
+fi;
+
+          eval "$ac_cv_use_stl_only"
+          if test "$no_cache" != 1; then
+            echo $ac_cv_use_stl_only >> ${wx_arg_cache_file}.tmp
+          fi
+
+          if test "$wxUSE_STL_ONLY" = yes; then
+            echo "$as_me:$LINENO: result: yes" >&5
+echo "${ECHO_T}yes" >&6
+          else
+            echo "$as_me:$LINENO: result: no" >&5
+echo "${ECHO_T}no" >&6
+          fi
 
+
+
 	  enablestring=
           echo "$as_me:$LINENO: checking for --${enablestring:-enable}-precomp" >&5
@@ -29956,4 +30044,18 @@
 fi
 
+
+if test "$wxUSE_STL" = "yes"; then
+  cat >>confdefs.h <<\_ACEOF
+#define wxUSE_STL 1
+_ACEOF
+
+fi
+
+if test "$wxUSE_STL_ONLY" = "yes"; then
+  cat >>confdefs.h <<\_ACEOF
+#define wxUSE_STL_ONLY 1
+_ACEOF
+
+fi
 
 if test "$wxUSE_APPLE_IEEE" = "yes"; then
Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/configure.in,v
retrieving revision 1.696
diff -u -2 -r1.696 configure.in
--- configure.in	2003/07/01 20:02:35	1.696
+++ configure.in	2003/07/04 19:08:33
@@ -331,4 +331,6 @@
 if test $DEBUG_CONFIGURE = 1; then
   DEFAULT_wxUSE_UNIVERSAL=no
+  DEFAULT_wxUSE_STL=no
+  DEFAULT_wxUSE_STL_ONLY=no
 
   DEFAULT_wxUSE_NANOX=no
@@ -505,4 +507,6 @@
 else
   DEFAULT_wxUSE_UNIVERSAL=no
+  DEFAULT_wxUSE_STL=no
+  DEFAULT_wxUSE_STL_ONLY=no
 
   DEFAULT_wxUSE_NANOX=no
@@ -745,4 +749,6 @@
 WX_ARG_ENABLE(optimise,    [  --enable-optimise       create optimised code], wxUSE_OPTIMISE)
 WX_ARG_ENABLE(debug,       [  --enable-debug          same as debug_flag and debug_info], wxUSE_DEBUG)
+WX_ARG_ENABLE(stl,         [  --enable-stl            use STL for containers], wxUSE_STL)
+WX_ARG_ENABLE(stl_only,    [  --enable-stl_only       use only STL for containers], wxUSE_STL_ONLY)
 
 dnl allow the precompiled header option to be disabled under Mac OS X/Darwin
@@ -4265,4 +4271,12 @@
 dnl Register non-GUI class options for makefiles and setup.h
 dnl ---------------------------------------------------------------------------
+
+if test "$wxUSE_STL" = "yes"; then
+  AC_DEFINE(wxUSE_STL)
+fi
+
+if test "$wxUSE_STL_ONLY" = "yes"; then
+  AC_DEFINE(wxUSE_STL_ONLY)
+fi
 
 if test "$wxUSE_APPLE_IEEE" = "yes"; then
Index: setup.h.in
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/setup.h.in,v
retrieving revision 1.114
diff -u -2 -r1.114 setup.h.in
--- setup.h.in	2003/06/25 14:21:47	1.114
+++ setup.h.in	2003/07/04 19:08:35
@@ -159,4 +159,12 @@
 
 /*
+ * use STL for containers and wxString
+ */
+#define wxUSE_STL 0
+/*
+ * use STL for containers and wxString, without backward compatibility methods
+ */
+#define wxUSE_STL_ONLY 0
+/*
  * Use regex support
  */
Index: include/wx/apptrait.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/apptrait.h,v
retrieving revision 1.9
diff -u -2 -r1.9 apptrait.h
--- include/wx/apptrait.h	2003/07/04 13:00:04	1.9
+++ include/wx/apptrait.h	2003/07/04 19:08:43
@@ -20,4 +20,5 @@
 class WXDLLEXPORT wxLog;
 class WXDLLEXPORT wxMessageOutput;
+class WXDLLEXPORT wxString;
 
 // ----------------------------------------------------------------------------
Index: include/wx/arrimpl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/arrimpl.cpp,v
retrieving revision 1.15
diff -u -2 -r1.15 arrimpl.cpp
--- include/wx/arrimpl.cpp	2003/06/01 13:21:40	1.15
+++ include/wx/arrimpl.cpp	2003/07/04 19:08:43
@@ -36,5 +36,5 @@
 void name::DoCopy(const name& src)                                            \
 {                                                                             \
-  for ( size_t ui = 0; ui < src.Count(); ui++ )                               \
+  for ( size_t ui = 0; ui < src.size(); ui++ )                                \
     Add(src[ui]);                                                             \
 }                                                                             \
@@ -55,16 +55,16 @@
 void name::DoEmpty()                                                          \
 {                                                                             \
-  for ( size_t ui = 0; ui < Count(); ui++ )                                   \
-    delete (T*)wxBaseArrayPtrVoid::Item(ui);                                  \
+  for ( size_t ui = 0; ui < size(); ui++ )                                    \
+    delete (T*)base_array::operator[](ui);                                    \
 }                                                                             \
                                                                               \
 void name::RemoveAt(size_t uiIndex, size_t nRemove)                           \
 {                                                                             \
-  wxCHECK_RET( uiIndex < Count(), _WX_ERROR_REMOVE2(name) );                  \
+  wxCHECK_RET( uiIndex < size(), _WX_ERROR_REMOVE2(name) );                   \
                                                                               \
   for (size_t i = 0; i < nRemove; i++ )                                       \
-    delete (T*)wxBaseArrayPtrVoid::Item(uiIndex + i);                         \
+    delete (T*)base_array::operator[](uiIndex + i);                           \
                                                                               \
-  wxBaseArrayPtrVoid::RemoveAt(uiIndex, nRemove);                             \
+  base_array::erase(begin() + uiIndex, begin() + uiIndex + nRemove);          \
 }                                                                             \
                                                                               \
@@ -74,9 +74,9 @@
     return;                                                                   \
   T* pItem = new T(item);                                                     \
-  size_t nOldSize = GetCount();                                               \
+  size_t nOldSize = size();                                                   \
   if ( pItem != NULL )                                                        \
-    wxBaseArrayPtrVoid::Add(pItem, nInsert);                                  \
+    base_array::insert(end(), nInsert, pItem);                                \
   for (size_t i = 1; i < nInsert; i++)                                        \
-    wxBaseArrayPtrVoid::Item(nOldSize + i) = new T(item);                     \
+    base_array::operator[](nOldSize + i) = new T(item);                       \
 }                                                                             \
                                                                               \
@@ -87,7 +87,7 @@
   T* pItem = new T(item);                                                     \
   if ( pItem != NULL )                                                        \
-    wxBaseArrayPtrVoid::Insert(pItem, uiIndex, nInsert);                      \
+    base_array::insert(begin() + uiIndex, nInsert, pItem);                    \
   for (size_t i = 1; i < nInsert; i++)                                        \
-    wxBaseArrayPtrVoid::Item(uiIndex + i) = new T(item);                      \
+    base_array::operator[](uiIndex + i) = new T(item);                        \
 }                                                                             \
                                                                               \
@@ -95,8 +95,8 @@
 {                                                                             \
   if ( bFromEnd ) {                                                           \
-    if ( Count() > 0 ) {                                                      \
-      size_t ui = Count() - 1;                                                \
+    if ( size() > 0 ) {                                                       \
+      size_t ui = size() - 1;                                                 \
       do {                                                                    \
-        if ( (T*)wxBaseArrayPtrVoid::Item(ui) == &Item )                      \
+        if ( (T*)base_array::operator[](ui) == &Item )                        \
           return ui;                                                          \
         ui--;                                                                 \
@@ -106,6 +106,6 @@
   }                                                                           \
   else {                                                                      \
-    for( size_t ui = 0; ui < Count(); ui++ ) {                                \
-      if( (T*)wxBaseArrayPtrVoid::Item(ui) == &Item )                         \
+    for( size_t ui = 0; ui < size(); ui++ ) {                                 \
+      if( (T*)base_array::operator[](ui) == &Item )                           \
         return ui;                                                            \
     }                                                                         \
Index: include/wx/cmdline.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/cmdline.h,v
retrieving revision 1.18
diff -u -2 -r1.18 cmdline.h
--- include/wx/cmdline.h	2003/07/02 01:59:15	1.18
+++ include/wx/cmdline.h	2003/07/04 19:08:44
@@ -19,7 +19,11 @@
 
 #include "wx/defs.h"
-#include "wx/string.h"
 
 #if wxUSE_CMDLINE_PARSER
+
+#include "wx/string.h"
+#if wxUSE_STL
+    #include "wx/dynarray.h"
+#endif
 
 class WXDLLIMPEXP_BASE wxDateTime;
Index: include/wx/confbase.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/confbase.h,v
retrieving revision 1.43
diff -u -2 -r1.43 confbase.h
--- include/wx/confbase.h	2003/07/02 01:59:15	1.43
+++ include/wx/confbase.h	2003/07/04 19:08:45
@@ -21,4 +21,7 @@
 #include "wx/defs.h"
 #include "wx/string.h"
+#if wxUSE_STL
+    #include "wx/dynarray.h"
+#endif
 
 // ----------------------------------------------------------------------------
Index: include/wx/datetime.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/datetime.h,v
retrieving revision 1.45
diff -u -2 -r1.45 datetime.h
--- include/wx/datetime.h	2003/07/04 13:00:04	1.45
+++ include/wx/datetime.h	2003/07/04 19:08:50
@@ -31,4 +31,7 @@
 class WXDLLIMPEXP_BASE wxDateSpan;
 
+// MBN: #include dynarray.h before inline redefinition
+#include "wx/dynarray.h"
+
 // a hack: don't use inline functions in debug builds - we don't care about
 // performances and this only leads to increased rebuild time (because every
@@ -37,5 +40,6 @@
 
 // For Mingw32, causes a link error. (VZ: why?)
-#if defined( __WXDEBUG__) && !defined(__MINGW32__) && !(defined(_MSC_VER) && wxUSE_ACCESSIBILITY)
+// MBN: workaround below, look for WX_DEFINE_EXPORTED_ARRAY
+#if defined(__WXDEBUG__) && !defined(__MINGW32__) && !(defined(_MSC_VER) && wxUSE_ACCESSIBILITY)
     #define wxDATETIME_DONT_INLINE
 
@@ -1286,6 +1290,4 @@
 // ----------------------------------------------------------------------------
 
-#include "wx/dynarray.h"
-
 WX_DECLARE_USER_EXPORTED_OBJARRAY(wxDateTime, wxDateTimeArray, WXDLLIMPEXP_BASE);
 
@@ -1299,8 +1301,18 @@
 // ----------------------------------------------------------------------------
 
+#ifdef wxDATETIME_DONT_INLINE
+    #undef inline
+    #define inline inline
+#endif
+
 class WXDLLIMPEXP_BASE wxDateTimeHolidayAuthority;
 WX_DEFINE_USER_EXPORTED_ARRAY(wxDateTimeHolidayAuthority *,
                               wxHolidayAuthoritiesArray,
                               WXDLLIMPEXP_BASE);
+
+#ifdef wxDATETIME_DONT_INLINE
+    #undef inline
+    #define inline
+#endif
 
 class wxDateTimeHolidaysModule;
Index: include/wx/dir.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dir.h,v
retrieving revision 1.11
diff -u -2 -r1.11 dir.h
--- include/wx/dir.h	2003/07/02 01:59:15	1.11
+++ include/wx/dir.h	2003/07/04 19:08:51
@@ -19,4 +19,7 @@
 #ifndef WX_PRECOMP
     #include  "wx/string.h"
+    #if wxUSE_STL
+        #include "wx/dynarray.h"
+    #endif
 #endif
 
Index: include/wx/dynarray.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dynarray.h,v
retrieving revision 1.52
diff -u -2 -r1.52 dynarray.h
--- include/wx/dynarray.h	2003/07/03 13:25:58	1.52
+++ include/wx/dynarray.h	2003/07/04 19:08:54
@@ -13,5 +13,6 @@
 #define   _DYNARRAY_H
 
-#if defined(__GNUG__) && !defined(__APPLE__)
+#if defined(__GNUG__) && !defined(__APPLE__) && \
+    !(defined(__MINGW32__) && __GNUC__ == 3 && __GNUC_MINOR__ == 2)
 #pragma interface "dynarray.h"
 #endif
@@ -19,4 +20,12 @@
 #include "wx/defs.h"
 
+#if wxUSE_STL
+#include <vector>
+#include <algorithm>
+#ifdef __WXMSW__
+#include "wx/msw/winundef.h"
+#endif
+#endif
+
 /*
   This header defines the dynamic arrays and object arrays (i.e. arrays which
@@ -77,7 +86,84 @@
 // ----------------------------------------------------------------------------
 
-#define  _WX_DECLARE_BASEARRAY(T, name, classexp)                   \
-classexp name                                                       \
+#if wxUSE_STL_ONLY
+
+#define  _WX_DECLARE_BASEARRAY(T, name, exp)                                  \
+typedef int (CMPFUNC_CONV *CMPFUNC##T)(T *pItem1, T *pItem2);                 \
+typedef std::vector<T> name;                                                  \
+                                                                              \
+int exp name##_Index(const name& array, T lItem, CMPFUNC fnCompare);          \
+size_t exp name##_IndexForInsert(const name&, T lItem, CMPFUNC fnCompare);    \
+void exp name##_Add(name& array, T lItem, CMPFUNC fnCompare)                  \
+void exp name##_Shrink(name& array)
+
+#elif wxUSE_STL
+
+#define  _WX_DECLARE_BASEARRAY(T, name, exp)                                  \
+class exp name : public std::vector<T>                                        \
+{                                                                             \
+friend exp int name##_Index(const name& array, T lItem, CMPFUNC fnCompare);   \
+friend exp size_t name##_IndexForInsert(const name&, T lItem, CMPFUNC fnCompare); \
+friend exp void name##_Add(name& array, T lItem, CMPFUNC fnCompare);          \
+friend exp void name##_Shrink(name& array);                                   \
+public:                                                             \
+  void Empty() { clear(); }                                         \
+  void Clear() { clear(); }                                         \
+  void Alloc(size_t uiSize) { reserve(uiSize); }                    \
+  void Shrink();                                                    \
+                                                                    \
+  size_t GetCount() const { return size(); }                        \
+  void SetCount(size_t n, T v = T()) { resize(n, v); }              \
+  bool IsEmpty() const { return empty(); }                          \
+  size_t Count() const { return size(); }                           \
+                                                                    \
+  typedef T base_type;                                              \
+                                                                    \
+protected:                                                          \
+  T& Item(size_t uiIndex) const                                     \
+    { wxASSERT( uiIndex < size() ); return (T&)operator[](uiIndex); }   \
+                                                                    \
+  int Index(T e, bool bFromEnd = FALSE) const;                      \
+  int Index(T lItem, CMPFUNC fnCompare) const;                      \
+  size_t IndexForInsert(T lItem, CMPFUNC fnCompare) const;          \
+  void Add(T lItem, size_t nInsert = 1)                             \
+    { insert(end(), nInsert, lItem); }                              \
+  void Add(T lItem, CMPFUNC fnCompare);                             \
+  void Insert(T lItem, size_t uiIndex, size_t nInsert = 1)          \
+    { insert(begin() + uiIndex, nInsert, lItem); }                  \
+  void Remove(T lItem);                                             \
+  void RemoveAt(size_t uiIndex, size_t nRemove = 1)                 \
+    { erase(begin() + uiIndex, begin() + uiIndex + nRemove); }      \
+                                                                    \
+  void Sort(CMPFUNC fCmp)                                           \
+  {                                                                 \
+    Predicate p(fCmp);                                              \
+    std::sort(begin(), end(), p);                                   \
+  }                                                                 \
+private:                                                            \
+  class Predicate                                                   \
+  {                                                                 \
+    typedef CMPFUNC fnc;                                            \
+    fnc m_f;                                                        \
+  public:                                                           \
+    Predicate(fnc f) : m_f(f) { }                                   \
+    bool operator()(const T& i1, const T& i2)                       \
+      { return m_f((T*)&i1, (T*)&i2) < 0; /* const cast */ }        \
+  };                                                                \
+};                                                                   \
+                                                                      \
+int exp name##_Index(const name& array, T lItem, CMPFUNC fnCompare);      \
+size_t exp name##_IndexForInsert(const name&, T lItem, CMPFUNC fnCompare);\
+void exp name##_Add(name& array, T lItem, CMPFUNC fnCompare);             \
+void exp name##_Shrink(name& array)
+
+#else // if !wxUSE_STL
+
+#define  _WX_DECLARE_BASEARRAY(T, name, exp)                        \
+class exp name                                                      \
 {                                                                   \
+friend exp int name##_Index(const name& array, T lItem, CMPFUNC fnCompare);  \
+friend exp size_t name##_IndexForInsert(const name&, T lItem, CMPFUNC fnCompare);\
+friend exp void name##_Add(name& array, T lItem, CMPFUNC fnCompare);         \
+friend exp void name##_Shrink(name& array);                                  \
 public:                                                             \
   name();                                                           \
@@ -114,4 +200,45 @@
   void Sort(CMPFUNC fnCompare);                                     \
                                                                     \
+  /* *minimal* STL-ish interface, for derived classes */            \
+  typedef T value_type;                                             \
+  typedef value_type* iterator;                                     \
+  typedef const value_type* const_iterator;                         \
+  typedef value_type& reference;                                    \
+  typedef const value_type& const_reference;                        \
+  typedef int difference_type;                                      \
+  typedef size_t size_type;                                         \
+                                                                    \
+  void assign(const_iterator first, const_iterator last);           \
+  void assign(size_type n, const_reference v);                      \
+  size_type capacity() const { return m_nSize; }                    \
+  void clear() { Clear(); }                                         \
+  bool empty() const { return IsEmpty(); }                          \
+  iterator erase(iterator first, iterator last)                     \
+  {                                                                 \
+    size_type idx = first - begin();                                \
+    RemoveAt(idx, last - first);                                    \
+    return begin() + idx;                                           \
+  }                                                                 \
+  iterator erase(iterator it) { return erase(it, it + 1); }         \
+  void insert(iterator it, size_type n, const value_type& v)        \
+    { Insert(v, it - begin(), n); }                                 \
+  iterator insert(iterator it, const value_type& v = value_type())  \
+  {                                                                 \
+    size_type idx = it - begin();                                   \
+    Insert(v, idx);                                                 \
+    return begin() + idx;                                           \
+  }                                                                 \
+  void insert(iterator it, const_iterator first, const_iterator last);\
+  size_type max_size() const { return INT_MAX; }                    \
+  void pop_back() { RemoveAt(size() - 1); }                         \
+  void push_back(const value_type& v) { Add(v); }                   \
+  void reserve(size_type n) { if(n > m_nSize) Realloc(n); }         \
+  void resize(size_type n, value_type v = value_type());            \
+  size_type size() const { return GetCount(); }                     \
+                                                                    \
+  iterator begin() { return m_pItems; }                             \
+  iterator end() { return m_pItems + m_nCount; }                    \
+  const_iterator begin() const { return m_pItems; }                 \
+  const_iterator end() const { return m_pItems + m_nCount; }        \
 private:                                                            \
   void Grow(size_t nIncrement = 0);                                 \
@@ -122,5 +249,12 @@
                                                                     \
   T      *m_pItems;                                                 \
-}
+};                                                                   \
+                                                                      \
+int exp name##_Index(const name& array, T lItem, CMPFUNC fnCompare);      \
+size_t exp name##_IndexForInsert(const name&, T lItem, CMPFUNC fnCompare);\
+void exp name##_Add(name& array, T lItem, CMPFUNC fnCompare);             \
+void exp name##_Shrink(name& array)
+
+#endif // !wxUSE_STL
 
 // ============================================================================
@@ -144,11 +278,73 @@
 // _WX_DEFINE_TYPEARRAY: array for simple types
 // ----------------------------------------------------------------------------
+
+#if wxUSE_STL_ONLY
 
-#define  _WX_DEFINE_TYPEARRAY(T, name, base, classexp)                \
+#define  _WX_DEFINE_TYPEARRAY(T, name, base, exp)                     \
+typedef int (CMPFUNC_CONV *CMPFUNC##T)(T *pItem1, T *pItem2);         \
+typedef std::vector<T> name;                                          \
+class exp name##_Predicate                                            \
+{                                                                     \
+  typedef CMPFUNC##T fnc;                                             \
+  fnc m_f;                                                            \
+public:                                                               \
+  name##_Predicate(fnc f) : m_f(f) { }                                \
+  bool operator()(const T& i1, const T& i2)                           \
+    { return m_f((T*)&i1, (T*)&i2) < 0; /* const cast */ }            \
+};                                                                    \
+inline void name##_Shrink(name& array)                                \
+  { base##_Shrink(array); }                                           \
+inline void name##_Sort(name& array, CMPFUNC##T f)                    \
+{                                                                     \
+  name##_Predicate p(f);                                              \
+  std::sort(array.begin(), array.end(), p);                           \
+}
+
+#elif wxUSE_STL
+
+#define  _WX_DEFINE_TYPEARRAY(T, name, base, exp)                     \
+typedef int (CMPFUNC_CONV *CMPFUNC##T)(T *pItem1, T *pItem2);         \
+class exp name : public base                                           \
+{                                                                     \
+public:                                                               \
+  T& operator[](size_t uiIndex) const                                 \
+    { return (T&)(base::operator[](uiIndex)); }                       \
+  T& Item(size_t uiIndex) const                                       \
+    { return (T&)/*const cast*/base::operator[](uiIndex); }           \
+  T& Last() const                                                     \
+    { return Item(Count() - 1); }                                     \
+                                                                      \
+  int Index(T e, bool bFromEnd = FALSE) const                         \
+    { return base::Index((base_type)e, bFromEnd); }                   \
+                                                                      \
+  void Add(T Item, size_t nInsert = 1)                                \
+    { insert(end(), nInsert, Item); }                                 \
+  void Insert(T Item, size_t uiIndex, size_t nInsert = 1)             \
+    { insert(begin() + uiIndex, nInsert, Item); }                     \
+                                                                      \
+  void RemoveAt(size_t uiIndex, size_t nRemove = 1)                   \
+    { base::RemoveAt(uiIndex, nRemove); }                             \
+  void Remove(T Item)                                                 \
+    { int iIndex = Index(Item);                                       \
+      wxCHECK2_MSG( iIndex != wxNOT_FOUND, return,                    \
+         _WX_ERROR_REMOVE);                                           \
+      RemoveAt((size_t)iIndex); }                                     \
+                                                                      \
+  void Sort(CMPFUNC##T fCmp) { base::Sort((CMPFUNC)fCmp); }           \
+};                                                                    \
+inline void name##_Shrink(name& array) { array.Shrink(); }            \
+inline void name##_Sort(name& array, CMPFUNC##T f)                    \
+{                                                                     \
+  array.Sort(f);                                                      \
+}
+
+#else // if !wxUSE_STL
+
+#define  _WX_DEFINE_TYPEARRAY(T, name, base, exp)                     \
 wxCOMPILE_TIME_ASSERT2(sizeof(T) <= sizeof(base::base_type),          \
                        TypeTooBigToBeStoredIn##base,                  \
                        name);                                         \
 typedef int (CMPFUNC_CONV *CMPFUNC##T)(T *pItem1, T *pItem2);         \
-classexp name : public base                                           \
+class exp name : public base                                          \
 {                                                                     \
 public:                                                               \
@@ -162,9 +358,9 @@
                                                                       \
   T& operator[](size_t uiIndex) const                                 \
-    { return (T&)(base::Item(uiIndex)); }                             \
+    { return (T&)(base::operator[](uiIndex)); }                       \
   T& Item(size_t uiIndex) const                                       \
-    { return (T&)(base::Item(uiIndex)); }                             \
+    { return (T&)(base::operator[](uiIndex)); }                       \
   T& Last() const                                                     \
-    { return (T&)(base::Item(Count() - 1)); }                         \
+    { return (T&)(base::operator[](Count() - 1)); }                   \
                                                                       \
   int Index(T Item, bool bFromEnd = FALSE) const                      \
@@ -185,6 +381,133 @@
                                                                       \
   void Sort(CMPFUNC##T fCmp) { base::Sort((CMPFUNC)fCmp); }           \
+                                                                      \
+  /* STL-like interface */                                            \
+private:                                                              \
+  typedef base::iterator biterator;                                   \
+  typedef base::const_iterator bconst_iterator;                       \
+  typedef base::value_type bvalue_type;                               \
+  typedef base::const_reference bconst_reference;                     \
+public:                                                               \
+  typedef T value_type;                                               \
+  typedef value_type* pointer;                                        \
+  typedef const value_type* const_pointer;                            \
+  typedef value_type* iterator;                                       \
+  typedef const value_type* const_iterator;                           \
+  typedef value_type& reference;                                      \
+  typedef const value_type& const_reference;                          \
+  typedef base::difference_type difference_type;                      \
+  typedef base::size_type size_type;                                  \
+                                                                      \
+  class reverse_iterator                                              \
+  {                                                                   \
+    typedef name::reference reference;                                \
+    typedef name::pointer pointer;                                    \
+    typedef reverse_iterator itor;                                    \
+    friend itor operator+(int o, const itor& it);                     \
+    friend itor operator+(const itor& it, int o);                     \
+    friend itor operator-(const itor& it, int o);                     \
+    friend difference_type operator -(const itor& i1, const itor& i2);\
+  public:                                                             \
+    pointer m_ptr;                                                    \
+    reverse_iterator() : m_ptr(NULL) { }                              \
+    reverse_iterator(pointer ptr) : m_ptr(ptr) { }                    \
+    reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }            \
+    reference operator*() const { return *m_ptr; }                    \
+    pointer operator->() const { return m_ptr; }                      \
+    itor operator++() { --m_ptr; return *this; }                      \
+    itor operator++(int)                                              \
+      { reverse_iterator tmp = *this; --m_ptr; return tmp; }          \
+    itor operator--() { ++m_ptr; return *this; }                      \
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }   \
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }    \
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }    \
+  };                                                                  \
+                                                                      \
+  class const_reverse_iterator                                        \
+  {                                                                   \
+    typedef name::const_reference reference;                          \
+    typedef name::const_pointer pointer;                              \
+    typedef const_reverse_iterator itor;                              \
+    friend itor operator+(int o, const itor& it);                     \
+    friend itor operator+(const itor& it, int o);                     \
+    friend itor operator-(const itor& it, int o);                     \
+    friend difference_type operator -(const itor& i1, const itor& i2);\
+  public:                                                             \
+    pointer m_ptr;                                                    \
+    const_reverse_iterator() : m_ptr(NULL) { }                        \
+    const_reverse_iterator(pointer ptr) : m_ptr(ptr) { }              \
+    const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }      \
+    const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }\
+    reference operator*() const { return *m_ptr; }                    \
+    pointer operator->() const { return m_ptr; }                      \
+    itor operator++() { --m_ptr; return *this; }                      \
+    itor operator++(int)                                              \
+      { itor tmp = *this; --m_ptr; return tmp; }                      \
+    itor operator--() { ++m_ptr; return *this; }                      \
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }   \
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }    \
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }    \
+  };                                                                  \
+                                                                      \
+  void assign(const_iterator first, const_iterator last)              \
+    { base::assign((bconst_iterator)first, (bconst_iterator)last); }  \
+  void assign(size_type n, const_reference v)                         \
+    { base::assign(n, (bconst_reference)v); }                         \
+  reference back() { return *(end() - 1); }                           \
+  const_reference back() const { return *(end() - 1); }               \
+  iterator begin() { return (iterator)base::begin(); }                \
+  const_iterator begin() const { return (const_iterator)base::begin(); }\
+  size_type capacity() const { return base::capacity(); }             \
+  void clear() { base::clear(); }                                     \
+  bool empty() const { return base::empty(); }                        \
+  iterator end() { return (iterator)base::end(); }                    \
+  const_iterator end() const { return (const_iterator)base::end(); }  \
+  iterator erase(iterator first, iterator last)                       \
+    { return (iterator)base::erase((biterator)first, (biterator)last); }\
+  iterator erase(iterator it)                                         \
+    { return (iterator)base::erase((biterator)it); }                  \
+  reference front() { return *begin(); }                              \
+  const_reference front() const { return *begin(); }                  \
+  void insert(iterator it, size_type n, const_reference v)            \
+    { base::insert((biterator)it, n, (bconst_reference)v); }          \
+  iterator insert(iterator it, const_reference v = value_type())      \
+    { return (iterator)base::insert((biterator)it, (bconst_reference)v); }\
+  void insert(iterator it, const_iterator first, const_iterator last) \
+    { base::insert((biterator)it, (bconst_iterator)first,             \
+                   (bconst_iterator)last); }                          \
+  size_type max_size() const { return base::max_size(); }             \
+  void pop_back() { base::pop_back(); }                               \
+  void push_back(const_reference v)                                   \
+    { base::push_back((bconst_reference)v); }                         \
+  reverse_iterator rbegin() { return reverse_iterator(end() - 1); }   \
+  const_reverse_iterator rbegin() const;                              \
+  reverse_iterator rend() { return reverse_iterator(begin() - 1); }   \
+  const_reverse_iterator rend() const;                                \
+  void reserve(size_type n) { base::reserve(n); };                    \
+  void resize(size_type n, value_type v = value_type());              \
+  size_type size() const { return base::size(); }                     \
+};                                                                    \
+                                                                      \
+inline name::reverse_iterator operator+(int o, const name::reverse_iterator& it) { return it.m_ptr - o; } \
+inline name::reverse_iterator operator+(const name::reverse_iterator& it, int o) { return it.m_ptr - o; } \
+inline name::reverse_iterator operator-(const name::reverse_iterator& it, int o) { return it.m_ptr + o; } \
+inline name::difference_type operator -(const name::reverse_iterator& i1, \
+                             const name::reverse_iterator& i2)            \
+    { return i1.m_ptr - i2.m_ptr; }                                       \
+                                                                      \
+inline name::const_reverse_iterator operator+(int o, const name::const_reverse_iterator& it) { return it.m_ptr - o; } \
+inline name::const_reverse_iterator operator+(const name::const_reverse_iterator& it, int o) { return it.m_ptr - o; } \
+inline name::const_reverse_iterator operator-(const name::const_reverse_iterator& it, int o) { return it.m_ptr + o; } \
+inline name::difference_type operator -(const name::const_reverse_iterator& i1,\
+                             const name::const_reverse_iterator& i2)      \
+    { return i1.m_ptr - i2.m_ptr; }                                       \
+inline void name##_Shrink(name& array) { array.Shrink(); }            \
+inline void name##_Sort(name& array, CMPFUNC##T f)                    \
+{                                                                     \
+  array.Sort(f);                                                      \
 }
 
+#endif // !wxUSE_STL
+
 // ----------------------------------------------------------------------------
 // _WX_DEFINE_SORTED_TYPEARRAY: sorted array for simple data types
@@ -192,13 +515,16 @@
 // ----------------------------------------------------------------------------
 
-#define _WX_DEFINE_SORTED_TYPEARRAY(T, name, base, defcomp, classexp) \
+#define _WX_DEFINE_SORTED_TYPEARRAY(T, name, base, defcomp, exp) \
+typedef int (CMPFUNC_CONV *SCMPFUNC##T)(T pItem1, T pItem2);          \
+_WX_DEFINE_SORTED_TYPEARRAY_2(T, name, base, defcomp, exp, SCMPFUNC##T)
+
+#define _WX_DEFINE_SORTED_TYPEARRAY_2(T, name, base, defcomp, exp, comptype)\
 wxCOMPILE_TIME_ASSERT2(sizeof(T) <= sizeof(void *),                   \
                        TypeTooBigToBeStoredInSorted##base,            \
                        name);                                         \
-typedef int (CMPFUNC_CONV *SCMPFUNC##T)(T pItem1, T pItem2);          \
-classexp name : public base                                           \
+class exp name : public base                                           \
 {                                                                     \
 public:                                                               \
-  name(SCMPFUNC##T fn defcomp) { m_fnCompare = fn; }                  \
+  name(comptype fn defcomp) { m_fnCompare = fn; }                     \
                                                                       \
   name& operator=(const name& src)                                    \
@@ -209,34 +535,35 @@
                                                                       \
   T& operator[](size_t uiIndex) const                                 \
-    { return (T&)(base::Item(uiIndex)); }                             \
+    { return (T&)(base::operator[](uiIndex)); }                       \
   T& Item(size_t uiIndex) const                                       \
-    { return (T&)(base::Item(uiIndex)); }                             \
+    { return (T&)(base::operator[](uiIndex)); }                       \
   T& Last() const                                                     \
-    { return (T&)(base::Item(Count() - 1)); }                         \
+    { return (T&)(base::operator[](size() - 1)); }                    \
                                                                       \
   int Index(T Item) const                                             \
-    { return base::Index(Item, (CMPFUNC)m_fnCompare); }               \
+    { return base##_Index(*this, Item, (CMPFUNC)m_fnCompare); }       \
                                                                       \
   size_t IndexForInsert(T Item) const                                 \
-    { return base::IndexForInsert(Item, (CMPFUNC)m_fnCompare); }      \
+    { return base##_IndexForInsert(*this, Item, (CMPFUNC)m_fnCompare); }\
                                                                       \
   void AddAt(T item, size_t index)                                    \
-    { base::Insert(item, index); }                                    \
+    { base::insert(begin() + index, item); }                          \
                                                                       \
   void Add(T Item)                                                    \
-    { base::Add(Item, (CMPFUNC)m_fnCompare); }                        \
+    { base##_Add(*this, Item, (CMPFUNC)m_fnCompare); }                \
                                                                       \
   void RemoveAt(size_t uiIndex, size_t nRemove = 1)                   \
-    { base::RemoveAt(uiIndex, nRemove); }                             \
+    { base::erase(begin() + uiIndex, begin() + uiIndex + nRemove); }  \
   void Remove(T Item)                                                 \
     { int iIndex = Index(Item);                                       \
       wxCHECK2_MSG( iIndex != wxNOT_FOUND, return,                    \
         _WX_ERROR_REMOVE );                                           \
-      base::RemoveAt((size_t)iIndex); }                               \
+      base::erase(begin() + iIndex); }                                \
                                                                       \
 private:                                                              \
-  SCMPFUNC##T m_fnCompare;                                            \
+  comptype m_fnCompare;                                               \
 }
 
+
 // ----------------------------------------------------------------------------
 // _WX_DECLARE_OBJARRAY: an array for pointers to type T with owning semantics
@@ -245,7 +572,8 @@
 #define _WX_DECLARE_OBJARRAY(T, name, base, classexp)                    \
 typedef int (CMPFUNC_CONV *CMPFUNC##T)(T **pItem1, T **pItem2);          \
-classexp name : public base                                              \
+classexp name : protected base                                           \
 {                                                                        \
 typedef int (CMPFUNC_CONV *CMPFUNC##base)(void **pItem1, void **pItem2); \
+typedef base base_array;                                                 \
 public:                                                                  \
   name() { }                                                             \
@@ -255,10 +583,17 @@
   ~name();                                                               \
                                                                          \
+  void Alloc(size_t count) { reserve(count); }                           \
+  size_t GetCount() const { return base_array::size(); }                 \
+  size_t size() const { return base_array::size(); }                     \
+  bool IsEmpty() const { return base_array::empty(); }                   \
+  size_t Count() const { return base_array::size(); }                    \
+  void Shrink() { base##_Shrink(*this); }                                \
+                                                                         \
   T& operator[](size_t uiIndex) const                                    \
-    { return *(T*)base::Item(uiIndex); }                                 \
+    { return *(T*)base::operator[](uiIndex); }                           \
   T& Item(size_t uiIndex) const                                          \
-    { return *(T*)base::Item(uiIndex); }                                 \
+    { return *(T*)base::operator[](uiIndex); }                           \
   T& Last() const                                                        \
-    { return *(T*)(base::Item(Count() - 1)); }                           \
+    { return *(T*)(base::operator[](size() - 1)); }                      \
                                                                          \
   int Index(const T& Item, bool bFromEnd = FALSE) const;                 \
@@ -266,19 +601,23 @@
   void Add(const T& Item, size_t nInsert = 1);                           \
   void Add(const T* pItem)                                               \
-    { base::Add((T*)pItem); }                                            \
+    { base::push_back((T*)pItem); }                                      \
+  void push_back(const T* pItem)                                         \
+    { base::push_back((T*)pItem); }                                      \
+  void push_back(const T& Item)                                          \
+    { Add(Item); }                                                       \
                                                                          \
   void Insert(const T& Item,  size_t uiIndex, size_t nInsert = 1);       \
   void Insert(const T* pItem, size_t uiIndex)                            \
-    { base::Insert((T*)pItem, uiIndex); }                                \
+    { base::insert(begin() + uiIndex, (T*)pItem); }                      \
                                                                          \
-  void Empty() { DoEmpty(); base::Empty(); }                             \
-  void Clear() { DoEmpty(); base::Clear(); }                             \
+  void Empty() { DoEmpty(); base::clear(); }                             \
+  void Clear() { DoEmpty(); base::clear(); }                             \
                                                                          \
   T* Detach(size_t uiIndex)                                              \
-    { T* p = (T*)base::Item(uiIndex);                                    \
-      base::RemoveAt(uiIndex); return p; }                               \
+    { T* p = (T*)base::operator[](uiIndex);                              \
+      base::erase(begin() + uiIndex); return p; }                        \
   void RemoveAt(size_t uiIndex, size_t nRemove = 1);                     \
                                                                          \
-  void Sort(CMPFUNC##T fCmp) { base::Sort((CMPFUNC##base)fCmp); }        \
+  void Sort(CMPFUNC##T fCmp) { base##_Sort(*this, (CMPFUNC##base)fCmp); }\
                                                                          \
 private:                                                                 \
@@ -318,5 +657,5 @@
 #define WX_DECLARE_USER_EXPORTED_BASEARRAY(T, name, expmode)      \
     typedef T _wxArray##name;                                     \
-    _WX_DECLARE_BASEARRAY(_wxArray##name, name, class expmode)
+    _WX_DECLARE_BASEARRAY(_wxArray##name, name, expmode)
 
 // ----------------------------------------------------------------------------
@@ -336,5 +675,5 @@
 #define WX_DEFINE_USER_EXPORTED_TYPEARRAY(T, name, base, expmode) \
     typedef T _wxArray##name;                                     \
-    _WX_DEFINE_TYPEARRAY(_wxArray##name, name, base, class expmode)
+    _WX_DEFINE_TYPEARRAY(_wxArray##name, name, base, expmode)
 
 // ----------------------------------------------------------------------------
@@ -377,5 +716,5 @@
     typedef T _wxArray##name;                                             \
     _WX_DEFINE_SORTED_TYPEARRAY(_wxArray##name, name, base,               \
-                                wxARRAY_EMPTY_CMP, class expmode)
+                                wxARRAY_EMPTY_CMP, expmode)
 
 // ----------------------------------------------------------------------------
@@ -403,5 +742,5 @@
     typedef T _wxArray##name;                                                \
     _WX_DEFINE_SORTED_TYPEARRAY(_wxArray##name, name, base, = cmpfunc,       \
-                                class expmode)
+                                expmode)
 
 // ----------------------------------------------------------------------------
@@ -606,8 +945,8 @@
 #define WX_APPEND_ARRAY(array, other)                                         \
     {                                                                         \
-        size_t count = (other).Count();                                       \
+        size_t count = (other).size();                                        \
         for ( size_t n = 0; n < count; n++ )                                  \
         {                                                                     \
-            (array).Add((other)[n]);                                          \
+            (array).push_back((other)[n]);                                    \
         }                                                                     \
     }
@@ -621,5 +960,5 @@
 #define WX_CLEAR_ARRAY(array)                                                 \
     {                                                                         \
-        size_t count = (array).Count();                                       \
+        size_t count = (array).size();                                        \
         for ( size_t n = 0; n < count; n++ )                                  \
         {                                                                     \
@@ -627,6 +966,26 @@
         }                                                                     \
                                                                               \
-        (array).Empty();                                                      \
+        (array).clear();                                                      \
     }
+
+#if wxUSE_STL
+
+#include "wx/string.h"
+
+int WXDLLIMPEXP_BASE wxStringSortAscending(wxString*, wxString*);
+int WXDLLIMPEXP_BASE wxStringSortDescending(wxString*, wxString*);
+
+typedef int (*CMPFUNCwxString)(const wxString&, const wxString&);
+int WXDLLEXPORT wxArrayString_Compare(const wxString&, const wxString&);
+WX_DECLARE_EXPORTED_BASEARRAY(wxString, wxBaseArrayString);
+WX_DEFINE_EXPORTED_TYPEARRAY(wxString, wxArrayString, wxBaseArrayString);
+_WX_DEFINE_SORTED_TYPEARRAY_2(wxString, wxSortedArrayString, 
+                              wxBaseArrayString, = wxArrayString_Compare,
+                              WXDLLEXPORT, CMPFUNCwxString);
+inline void wxArrayString_Sort(wxArrayString& array, CMPFUNCwxString f)
+{
+  std::sort(array.begin(), array.end(), f);
+}
+#endif
 
 #endif // _DYNARRAY_H
Index: include/wx/filefn.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filefn.h,v
retrieving revision 1.73
diff -u -2 -r1.73 filefn.h
--- include/wx/filefn.h	2003/07/02 01:59:16	1.73
+++ include/wx/filefn.h	2003/07/04 19:08:55
@@ -361,10 +361,11 @@
 {
 public:
+    // avoid GCC warning about virtual functions w/o virtual dtor
+    virtual ~wxPathList() {}
+
     // Adds all paths in environment variable
     void AddEnvList(const wxString& envVariable);
 
     void Add(const wxString& path);
-    // Avoid compiler warning
-    wxNode *Add(const wxChar *s) { return wxStringList::Add(s); }
     // Find the first full path for which the file exists
     wxString FindValidPath(const wxString& filename);
@@ -378,5 +379,5 @@
 
 private:
-    DECLARE_DYNAMIC_CLASS(wxPathList)
+    // DECLARE_DYNAMIC_CLASS(wxPathList)
 };
 
Index: include/wx/filename.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filename.h,v
retrieving revision 1.40
diff -u -2 -r1.40 filename.h
--- include/wx/filename.h	2003/07/02 01:59:16	1.40
+++ include/wx/filename.h	2003/07/04 19:08:57
@@ -173,5 +173,5 @@
 
         // is the filename valid at all?
-    bool IsOk() const { return !m_dirs.IsEmpty() || !m_name.IsEmpty(); }
+    bool IsOk() const { return m_dirs.size() != 0 || !m_name.IsEmpty(); }
 
         // does the file with this name exists?
@@ -331,5 +331,5 @@
     void InsertDir( int before, const wxString &dir );
     void RemoveDir( int pos );
-    size_t GetDirCount() const { return m_dirs.GetCount(); }
+    size_t GetDirCount() const { return m_dirs.size(); }
 
     // Other accessors
Index: include/wx/filesys.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filesys.h,v
retrieving revision 1.20
diff -u -2 -r1.20 filesys.h
--- include/wx/filesys.h	2003/07/02 01:59:16	1.20
+++ include/wx/filesys.h	2003/07/04 19:08:58
@@ -161,5 +161,6 @@
 {
 public:
-    wxFileSystem() : wxObject() {m_Path = m_LastName = wxEmptyString; m_Handlers.DeleteContents(TRUE); m_FindFileHandler = NULL;}
+    wxFileSystem() : wxObject() {m_Path = m_LastName = wxEmptyString; m_FindFileHandler = NULL;}
+    ~wxFileSystem() { WX_CLEAR_LIST(wxList, m_Handlers); }
 
     // sets the current location. Every call to OpenFile is
Index: include/wx/hash.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/hash.h,v
retrieving revision 1.23
diff -u -2 -r1.23 hash.h
--- include/wx/hash.h	2003/07/03 21:59:45	1.23
+++ include/wx/hash.h	2003/07/04 19:08:59
@@ -17,6 +17,10 @@
 #endif
 
-#include "wx/list.h"
-#include "wx/dynarray.h"
+#if !wxUSE_STL
+    #include "wx/list.h"
+#endif
+#if WXWIN_COMPATIBILITY_2_4
+    #include "wx/dynarray.h"
+#endif
 
 // the default size of the hash
@@ -35,4 +39,6 @@
 // ----------------------------------------------------------------------------
 
+#if !wxUSE_STL
+
 class WXDLLIMPEXP_BASE wxHashTableBase : public wxObject
 {
@@ -73,4 +79,150 @@
 };
 
+#else
+
+#include "wx/hashmap.h"
+
+union wxHashKeyValue
+{
+    long integer;
+    wxChar *string;
+};
+
+struct WXDLLEXPORT wxHashTableHash
+{
+    wxHashTableHash() { }
+    wxHashTableHash( wxKeyType keyType ) : m_keyType( keyType ) { }
+
+    wxKeyType m_keyType;
+
+    unsigned long operator ()( const wxHashKeyValue& k ) const
+    {
+        if( m_keyType == wxKEY_STRING )
+            return wxStringHash::wxCharStringHash( k.string );
+        else
+            return (unsigned long)k.integer;
+    }
+};
+
+struct WXDLLEXPORT wxHashTableEqual
+{
+    wxHashTableEqual() { }
+    wxHashTableEqual( wxKeyType keyType ) : m_keyType( keyType ) { }
+
+    wxKeyType m_keyType;
+
+    bool operator ()( const wxHashKeyValue& k1, const wxHashKeyValue& k2 ) const
+    {
+        if( m_keyType == wxKEY_STRING )
+            return wxStrcmp( k1.string, k2.string ) == 0;
+        else
+            return k1.integer == k2.integer;
+    }
+};
+
+WX_DECLARE_EXPORTED_HASH_MAP( wxHashKeyValue, 
+                              void*,
+                              wxHashTableHash,
+                              wxHashTableEqual,
+                              wxHashTableBaseBase );
+
+class WXDLLEXPORT wxHashTableBase
+{
+public:
+    wxHashTableBase( wxKeyType keyType = wxKEY_INTEGER,
+                     size_t size = wxHASH_SIZE_DEFAULT )
+        : m_map( size, wxHashTableHash( keyType ),
+                 wxHashTableEqual( keyType ) ),
+          m_keyType( keyType ) { }
+
+    ~wxHashTableBase()
+    {
+        if( m_keyType == wxKEY_STRING )
+        {
+            for( wxHashTableBaseBase::iterator it = m_map.begin(),
+                                               en = m_map.end();
+                 it != en; )
+            {
+                wxChar* tmp = it->first.string;
+                ++it;
+                delete[] tmp; // used in operator++
+            }
+        }
+    }
+
+    size_t GetCount() const { return m_map.size(); }
+protected:
+    void DoPut( long key, void* data )
+    {
+        wxHashKeyValue k; k.integer = key;
+        m_map[k] = data;
+    }
+
+    void DoPut( const wxChar* key, void* data )
+    {
+        wxHashKeyValue k;
+        k.string = new wxChar[wxStrlen(key) + 1];
+        wxStrcpy(k.string, key);
+        m_map[k] = data;
+    }
+
+    void* DoGet( long key ) const
+    {
+        wxHashKeyValue k; k.integer = key;
+        wxHashTableBaseBase::const_iterator it = m_map.find( k );
+
+        return it != m_map.end() ? it->second : NULL;
+    }
+
+    void* DoGet( const wxChar* key ) const
+    {
+        wxHashKeyValue k; k.string = (wxChar*)key;
+        wxHashTableBaseBase::const_iterator it = m_map.find( k );
+
+        return it != m_map.end() ? it->second : NULL;
+    }
+
+    void* DoDelete( long key )
+    {
+        wxHashKeyValue k; k.integer = key;
+        wxHashTableBaseBase::iterator it = m_map.find( k );
+        
+        if( it != m_map.end() )
+        {
+            void* data = it->second;
+
+            m_map.erase( it );
+            return data;
+        }
+
+        return NULL;
+    }
+
+    void* DoDelete( const wxChar* key )
+    {
+        wxHashKeyValue k; k.string = (wxChar*)key;
+        wxHashTableBaseBase::iterator it = m_map.find( k );
+        
+        if( it != m_map.end() )
+        {
+            void* data = it->second;
+            wxChar* k = it->first.string;
+
+            m_map.erase( it );
+            delete[] k;
+            return data;
+        }
+
+        return NULL;
+    }
+
+    wxHashTableBaseBase m_map;
+    wxKeyType m_keyType;
+};
+
+#endif // !wxUSE_STL
+
+#if !wxUSE_STL
+
 #if WXWIN_COMPATIBILITY_2_4
 
@@ -146,5 +298,7 @@
 };
 
-#endif
+#endif // WXWIN_COMPATIBILITY_2_4
+
+#endif  // !wxUSE_STL
 
 // ----------------------------------------------------------------------------
@@ -152,7 +306,103 @@
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_BASE wxHashTable : public wxObject
+#if wxUSE_STL
+
+class WXDLLIMPEXP_BASE wxHashTable : protected wxHashTableBase
 {
+    typedef wxHashTableBaseBase hash;
+public:
+    class dummy;
+
+    struct compatibility_iterator
+    {
+        hash::iterator m_iter;
+        hash* m_hash;
+
+        operator bool() const { return m_iter != m_hash->end(); }
+        bool operator !() const { return m_iter == m_hash->end(); }
+        compatibility_iterator( hash* li, hash::iterator it )
+            : m_iter( it ), m_hash( li ) {}
+        compatibility_iterator() { }
+
+        dummy* operator->() { return (dummy*)this; }
+    };
+    typedef class compatibility_iterator citer;
+
+    class dummy
+    {
+        typedef hash::iterator it;
+        typedef compatibility_iterator citer;
+    public:
+        wxObject* GetData() const
+        {
+            citer* i = (citer*)this;
+            return (wxObject*)i->m_iter->second;
+        }
+        citer GetNext() const
+        {
+            citer* i = (citer*)this;
+            it lit = i->m_iter;
+            return citer( i->m_hash, ++lit );
+        }
+        citer GetPrevious() const
+        {
+            citer* i = (citer*)this;
+            it lit = i->m_iter;
+            return citer( i->m_hash, ++lit );
+        }
+        void SetData( wxObject* e )
+        {
+            citer* i = (citer*)this;
+            i->m_iter->second = e;
+        }
+    private:
+        dummy();
+    };
 public:
+    wxHashTable( wxKeyType keyType = wxKEY_INTEGER,
+                 size_t size = wxHASH_SIZE_DEFAULT )
+        : wxHashTableBase( keyType, size ) { }
+
+    void Destroy() { Clear(); }
+
+    // key and value are the same
+    void Put(long value, wxObject *object) { DoPut( value, object ); }
+    void Put(const wxChar *value, wxObject *object) { DoPut( value, object ); }
+
+    // key and value are the same
+    wxObject *Get(long value) const { return (wxObject*)DoGet( value ); }
+    wxObject *Get(const wxChar *value) const { return (wxObject*)DoGet( value ); }
+
+    // Deletes entry and returns data if found
+    wxObject *Delete(long key) { return (wxObject*)DoGet( key ); }
+    wxObject *Delete(const wxChar *key) { return (wxObject*)DoGet( key ); }
+
+#if 0
+    // Construct your own integer key from a string, e.g. in case
+    // you need to combine it with something
+    long MakeKey(const wxChar *string) const;
+#endif
+    // Way of iterating through whole hash table (e.g. to delete everything)
+    // Not necessary, of course, if you're only storing pointers to
+    // objects maintained separately
+    void BeginFind() { m_iter = citer( &this->m_map, this->m_map.begin() ); }
+    compatibility_iterator Next()
+    {
+        compatibility_iterator it = m_iter;
+        if( m_iter )
+            m_iter = m_iter->GetNext();
+        return it;
+    }
+
+    void Clear() { m_map.clear(); }
+private:
+    compatibility_iterator m_iter;
+};
+
+#else // if !wxUSE_STL
+
+class WXDLLEXPORT wxHashTable : public wxObject
+{
+public:
     int n;
     int current_position;
@@ -231,4 +481,5 @@
     size_t GetCount() const { return m_count; }
 
+    typedef wxNode* compatibility_iterator;
 private:
     size_t m_count;             // number of elements in the hashtable
@@ -238,6 +489,28 @@
 };
 
+#endif
+
+#if wxUSE_STL
+
 // defines a new type safe hash table which stores the elements of type eltype
 // in lists of class listclass
+#define _WX_DECLARE_HASH(eltype, dummy, hashclass, classexp)                  \
+    classexp hashclass : public wxHashTableBase                               \
+    {                                                                         \
+    public:                                                                   \
+        hashclass(wxKeyType keyType = wxKEY_INTEGER,                          \
+                  size_t size = wxHASH_SIZE_DEFAULT)                          \
+            : wxHashTableBase(keyType, size) { }                              \
+                                                                              \
+        ~hashclass() { Destroy(); }                                           \
+                                                                              \
+        void Destroy() { m_map.clear(); }                                     \
+        void Put(long key, eltype *data) { DoPut(key, (void*)data); }         \
+        eltype *Get(long key) const { return (eltype*)DoGet(key); }           \
+        eltype *Delete(long key) { return (eltype*)DoDelete(key); }           \
+    }
+
+#else // if !wxUSE_STL
+
 #define _WX_DECLARE_HASH(eltype, listclass, hashclass, classexp)               \
     classexp hashclass : public wxHashTableBase                                \
@@ -298,4 +571,6 @@
     }
 
+#endif
+
 // this macro is to be used in the user code
 #define WX_DECLARE_HASH(el, list, hash) \
@@ -319,5 +594,5 @@
     {                                                                        \
         (array).BeginFind();                                                 \
-        wxNode* it = (array).Next();                                         \
+        wxHashTable::compatibility_iterator it = (array).Next();             \
         while( it )                                                          \
         {                                                                    \
Index: include/wx/hashmap.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/hashmap.h,v
retrieving revision 1.21
diff -u -2 -r1.21 hashmap.h
--- include/wx/hashmap.h	2003/07/02 01:59:16	1.21
+++ include/wx/hashmap.h	2003/07/04 19:09:00
@@ -557,4 +557,18 @@
                           CLASSNAME, class WXDLLEXPORT )
 
+// delete all hash elements
+//
+// NB: the class declaration of the hash elements must be visible from the
+//     place where you use this macro, otherwise the proper destructor may not
+//     be called (a decent compiler should give a warning about it, but don't
+//     count on it)!
+#define WX_CLEAR_HASH_MAP(type, array)                                       \
+    {                                                                        \
+        type##::iterator it, en;                                             \
+        for( it = (array).begin(), en = (array).end(); it != en; ++it )      \
+            delete it->second;                                               \
+        (array).clear();                                                     \
+    }
+
 #endif // _WX_HASHMAP_H_
 
Index: include/wx/list.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/list.h,v
retrieving revision 1.59
diff -u -2 -r1.59 list.h
--- include/wx/list.h	2003/07/02 17:11:15	1.59
+++ include/wx/list.h	2003/07/04 19:09:04
@@ -26,5 +26,6 @@
 #define _WX_LISTH__
 
-#if defined(__GNUG__) && !defined(__APPLE__)
+#if defined(__GNUG__) && !defined(__APPLE__) && \
+    !(defined(__MINGW32__) && __GNUC__ == 3 && __GNUC_MINOR__ == 2)
 #pragma interface "list.h"
 #endif
@@ -38,13 +39,32 @@
 #include "wx/string.h"
 
+#if wxUSE_STL
+#include <list>
+#ifdef __WXMSW__
+#include "wx/msw/winundef.h"
+#endif
+#endif
+
+// ----------------------------------------------------------------------------
+// types
+// ----------------------------------------------------------------------------
+
+// type of compare function for list sort operation (as in 'qsort'): it should
+// return a negative value, 0 or positive value if the first element is less
+// than, equal or greater than the second
+extern "C"
+{
+typedef int (* LINKAGEMODE wxSortCompareFunction)(const void *elem1, const void *elem2);
+}
+
 class WXDLLIMPEXP_BASE wxObjectListNode;
 typedef wxObjectListNode wxNode;
 
-// undef it to get rid of old, deprecated functions
-#define wxLIST_COMPATIBILITY
+//
+typedef int (* LINKAGEMODE wxListIterateFunction)(void *current);
 
-// -----------------------------------------------------------------------------
+// ----------------------------------------------------------------------------
 // constants
-// -----------------------------------------------------------------------------
+// ----------------------------------------------------------------------------
 enum wxKeyType
 {
@@ -54,19 +74,191 @@
 };
 
-// -----------------------------------------------------------------------------
-// types
-// -----------------------------------------------------------------------------
+#if wxUSE_STL_ONLY
 
-// type of compare function for list sort operation (as in 'qsort'): it should
-// return a negative value, 0 or positive value if the first element is less
-// than, equal or greater than the second
-extern "C"
-{
-typedef int (* LINKAGEMODE wxSortCompareFunction)(const void *elem1, const void *elem2);
-}
+#define wxLIST_COMPATIBILITY
 
-//
-typedef int (* LINKAGEMODE wxListIterateFunction)(void *current);
+#define WX_DECLARE_LIST_3(elT, dummy1, liT, dummy2, decl) \
+    WX_DECLARE_LIST_X(elT, liT, decl)
+
+#define WX_DECLARE_LIST_2(elT, liT, dummy, decl) \
+    WX_DECLARE_LIST_X(elT, liT, decl)
+
+#define WX_DECLARE_LIST_X(elT, liT, decl) \
+    WX_DECLARE_LIST_XO(elT*, liT, decl)
+
+#define WX_DECLARE_LIST_XO(elT, liT, decl) \
+    typedef std::list<elT> liT;
+
+#define WX_DECLARE_LIST(elementtype, listname)                              \
+    WX_DECLARE_LIST_X(elementtype, listname, class)
+
+#define WX_DECLARE_EXPORTED_LIST(elementtype, listname)                     \
+    WX_DECLARE_LIST_X(elementtype, listname, class WXDLLEXPORT)
+
+#define WX_DECLARE_USER_EXPORTED_LIST(elementtype, listname, usergoo)       \
+    WX_DECLARE_LIST_X(elementtype, listname, class usergoo)
+
+// this macro must be inserted in your program after
+//      #include <wx/listimpl.cpp>
+#define WX_DEFINE_LIST(name)    "don't forget to include listimpl.cpp!"
+
+#define WX_DEFINE_EXPORTED_LIST(name)      WX_DEFINE_LIST(name)
+#define WX_DEFINE_USER_EXPORTED_LIST(name) WX_DEFINE_LIST(name)
+
+#elif wxUSE_STL
+
+#define wxLIST_COMPATIBILITY
+
+#define WX_DECLARE_LIST_3(elT, dummy1, liT, dummy2, decl) \
+    WX_DECLARE_LIST_X(elT, liT, decl)
+
+#define WX_DECLARE_LIST_2(elT, liT, dummy, decl) \
+    WX_DECLARE_LIST_X(elT, liT, decl)
+
+#define WX_DECLARE_LIST_X(elT, liT, decl) \
+    WX_DECLARE_LIST_XO(elT*, liT, decl)
+
+#define WX_DECLARE_LIST_XO(elT, liT, decl) \
+    decl liT : public std::list<elT>                                          \
+    {                                                                         \
+    public:                                                                   \
+        class dummy;                                                          \
+                                                                              \
+        struct compatibility_iterator                                         \
+        {                                                                     \
+            typedef std::list<elT>::iterator iterator;                        \
+            iterator m_iter;                                                  \
+            liT * m_list;                                                     \
+        public:                                                               \
+            operator bool() const                                             \
+                { return m_list && m_iter != m_list->end(); }                 \
+            bool operator !() const                                           \
+                { return !m_list || m_iter == m_list->end(); }                \
+            compatibility_iterator( const liT* li, iterator it )              \
+                : m_iter( it ), m_list( (liT*)li ) {}                         \
+            compatibility_iterator( liT* li, iterator it )                    \
+                : m_iter( it ), m_list( li ) {}                               \
+            compatibility_iterator() : m_list( NULL ) { }                     \
+            dummy* operator->() { return (dummy*)this; }                      \
+            const dummy* operator->() const { return (const dummy*)this; }    \
+        };                                                                    \
+        typedef struct compatibility_iterator citer;                          \
+                                                                              \
+        class dummy                                                           \
+        {                                                                     \
+            typedef std::list<elT>::iterator it;                              \
+            typedef compatibility_iterator citer;                             \
+        public:                                                               \
+            elT GetData() const                                               \
+            {                                                                 \
+                citer* i = (citer*)this;                                      \
+                return *(i->m_iter);                                          \
+            }                                                                 \
+            citer GetNext() const                                             \
+            {                                                                 \
+                citer* i = (citer*)this;                                      \
+                it lit = i->m_iter;                                           \
+                return citer( i->m_list, ++lit );                             \
+            }                                                                 \
+            citer GetPrevious() const                                         \
+            {                                                                 \
+                citer* i = (citer*)this;                                      \
+                it lit = i->m_iter;                                           \
+                return citer( i->m_list, ++lit );                             \
+            }                                                                 \
+            void SetData( elT e )                                             \
+            {                                                                 \
+                citer* i = (citer*)this;                                      \
+                *(i->m_iter) = e;                                             \
+            }                                                                 \
+        private:                                                              \
+            dummy();                                                          \
+        };                                                                    \
+    protected:                                                                \
+        iterator find( elT e )                                                \
+        {                                                                     \
+            iterator it, en;                                                  \
+            for( it = begin(), en = end(); it != en; ++it )                   \
+                if( *it == e )                                                \
+                    return it;                                                \
+            return it;                                                        \
+        }                                                                     \
+    public:                                                                   \
+        liT() {};                                                             \
+                                                                              \
+        citer Append( elT e ) { push_back( e ); return GetLast(); }           \
+        void Clear() { clear(); }                                             \
+        size_t GetCount() const { return size(); }                            \
+        citer GetFirst() const { return citer( this, ((liT*)this)->begin() ); } \
+        citer GetLast() const { return citer( this, --(((liT*)this)->end()) ); } \
+        bool IsEmpty() const { return empty(); }                              \
+        bool DeleteObject( elT e )                                            \
+        {                                                                     \
+            iterator it = find( e );                                          \
+            if( it != end() )                                                 \
+            {                                                                 \
+                erase( it );                                                  \
+                return true;                                                  \
+            }                                                                 \
+            return false;                                                     \
+        }                                                                     \
+        void Erase( const compatibility_iterator& it )                        \
+        {                                                                     \
+            erase( it.m_iter );                                               \
+        }                                                                     \
+        citer Find( elT e ) const { return citer( this, ((liT*)this)->find( e ) ); } \
+        citer Member( elT e ) const { return Find( e ); }                     \
+        citer Insert( elT e )                                                 \
+            { push_front( e ); return citer( this, begin() ); }               \
+        citer Insert( size_t idx, elT e )                                     \
+            { return Insert( Item( idx ), e ); }                              \
+        citer Insert( citer idx, elT e )                                      \
+            { return citer( this, insert( idx.m_iter, e ) ); }                \
+        citer Item( size_t idx ) const                                        \
+        {                                                                     \
+            iterator it;                                                      \
+            for( it = ((liT*)this)->begin(); idx; --idx )                     \
+                ++it;                                                         \
+            return citer( this, it );                                         \
+        }                                                                     \
+        int IndexOf( elT e ) const                                            \
+        {                                                                     \
+            const_iterator it, en;                                            \
+            int idx;                                                          \
+            for( idx = 0, it = begin(), en = end(); it != en; ++it, ++idx )   \
+                if( *it == e )                                                \
+                    return idx;                                               \
+            return wxNOT_FOUND;                                               \
+        }                                                                     \
+    }
+
+#define WX_DECLARE_LIST(elementtype, listname)                              \
+    WX_DECLARE_LIST_X(elementtype, listname, class)
+
+#define WX_DECLARE_EXPORTED_LIST(elementtype, listname)                     \
+    WX_DECLARE_LIST_X(elementtype, listname, class WXDLLEXPORT)
+
+#define WX_DECLARE_USER_EXPORTED_LIST(elementtype, listname, usergoo)       \
+    WX_DECLARE_LIST_X(elementtype, listname, class usergoo)
+
+// this macro must be inserted in your program after
+//      #include <wx/listimpl.cpp>
+#define WX_DEFINE_LIST(name)    "don't forget to include listimpl.cpp!"
+
+#define WX_DEFINE_EXPORTED_LIST(name)      WX_DEFINE_LIST(name)
+#define WX_DEFINE_USER_EXPORTED_LIST(name) WX_DEFINE_LIST(name)
+
+#else // if !wxUSE_STL
 
+// due to circular header dependencies this function has to be declared here
+// (normally it's found in utils.h which includes itself list.h...)
+extern WXDLLEXPORT wxChar* copystring(const wxChar *s);
+
+class WXDLLEXPORT wxObjectListNode;
+typedef wxObjectListNode wxNode;
+
+// undef it to get rid of old, deprecated functions
+#define wxLIST_COMPATIBILITY
+
 // -----------------------------------------------------------------------------
 // key stuff: a list may be optionally keyed on integer or string key
@@ -170,5 +362,7 @@
 
     virtual void DeleteData() { }
-
+public:
+    // for wxList::iterator
+    void** GetDataPtr() const { return &(((wxNodeBase*)this)->m_data); }
 private:
     // optional key stuff
@@ -331,4 +525,8 @@
     void *LastThat(wxListIterateFunction func);
 
+    // for STL interface, "last" points to one after the last node
+    // of the controlled sequence (NULL for the end of the list)
+    void Reverse();
+    void DeleteNodes(wxNodeBase* first, wxNodeBase* last);
 private:
     // helpers
@@ -405,4 +603,5 @@
     public:                                                                 \
         typedef nodetype Node;                                              \
+        typedef Node* compatibility_iterator;                               \
                                                                             \
         name(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType)          \
@@ -448,4 +647,6 @@
         bool DeleteObject(Tbase *object)                                    \
             { return wxListBase::DeleteObject(object); }                    \
+        void Erase(compatibility_iterator it)                               \
+            { DeleteNode(it); }                                             \
                                                                             \
         nodetype *Find(Tbase *object) const                                 \
@@ -470,4 +671,273 @@
                                     (T *)data, key);                        \
             }                                                               \
+        /* STL interface */                                                 \
+    public:                                                                 \
+        typedef size_t size_type;                                           \
+        typedef int difference_type;                                        \
+        typedef T* value_type;                                              \
+        typedef Tbase* base_value_type;                                     \
+        typedef value_type& reference;                                      \
+        typedef const value_type& const_reference;                          \
+        typedef base_value_type& base_reference;                            \
+        typedef const base_value_type& const_base_reference;                \
+                                                                            \
+        class iterator                                                      \
+        {                                                                   \
+            typedef name list;                                              \
+        public:                                                             \
+            typedef list::Node Node;                                        \
+            typedef iterator itor;                                          \
+            typedef list::value_type* ptr_type;                             \
+                                                                            \
+            Node* m_node;                                                   \
+            Node* m_init;                                                   \
+        public:                                                             \
+            typedef list::reference reference_type;                         \
+            typedef ptr_type pointer_type;                                  \
+                                                                            \
+            iterator(Node* node, Node* init) : m_node(node), m_init(init) {}\
+            iterator() : m_node(NULL), m_init(NULL) { }                     \
+            reference_type operator*() const                                \
+                { return *(pointer_type)m_node->GetDataPtr(); }             \
+            pointer_type operator->() const                                 \
+                { return (pointer_type)m_node->GetDataPtr(); }              \
+            itor& operator++() { m_node = m_node->GetNext(); return *this; }\
+            itor operator++(int)                                            \
+                { itor tmp = *this; m_node = m_node->GetNext(); return tmp; }\
+            itor& operator--()                                              \
+            {                                                               \
+                m_node = m_node ? m_node->GetPrevious() : m_init;           \
+                return *this;                                               \
+            }                                                               \
+            itor operator--(int)                                            \
+            {                                                               \
+                itor tmp = *this;                                           \
+                m_node = m_node ? m_node->GetPrevious() : m_init;           \
+                return tmp;                                                 \
+            }                                                               \
+            bool operator!=(const itor& it) const                           \
+                { return it.m_node != m_node; }                             \
+            bool operator==(const itor& it) const                           \
+                { return it.m_node == m_node; }                             \
+        };                                                                  \
+        class const_iterator                                                \
+        {                                                                   \
+            typedef name list;                                              \
+        public:                                                             \
+            typedef list::Node Node;                                        \
+            typedef const_iterator itor;                                    \
+            typedef list::value_type* ptr_type;                             \
+                                                                            \
+            Node* m_node;                                                   \
+            Node* m_init;                                                   \
+        public:                                                             \
+            typedef list::const_reference reference_type;                   \
+            typedef const ptr_type pointer_type;                            \
+                                                                            \
+            const_iterator(Node* node, Node* init)                          \
+                : m_node(node), m_init(init) { }                            \
+            const_iterator() : m_node(NULL), m_init(NULL) { }               \
+            const_iterator(const iterator& it)                              \
+                : m_node(it.m_node), m_init(it.m_init) { }                  \
+            reference_type operator*() const                                \
+                { return *(pointer_type)m_node->GetDataPtr(); }             \
+            pointer_type operator->() const                                 \
+                { return (pointer_type)m_node->GetDataPtr(); }              \
+            itor& operator++() { m_node = m_node->GetNext(); return *this; }\
+            itor operator++(int)                                            \
+                { itor tmp = *this; m_node = m_node->GetNext(); return tmp; }\
+            itor& operator--()                                              \
+            {                                                               \
+                m_node = m_node ? m_node->GetPrevious() : m_init;           \
+                return *this;                                               \
+            }                                                               \
+            itor operator--(int)                                            \
+            {                                                               \
+                itor tmp = *this;                                           \
+                m_node = m_node ? m_node->GetPrevious() : m_init;           \
+                return tmp;                                                 \
+            }                                                               \
+            bool operator!=(const itor& it) const                           \
+                { return it.m_node != m_node; }                             \
+            bool operator==(const itor& it) const                           \
+                { return it.m_node == m_node; }                             \
+        };                                                                  \
+        class reverse_iterator                                              \
+        {                                                                   \
+            typedef name list;                                              \
+        public:                                                             \
+            typedef list::Node Node;                                        \
+            typedef reverse_iterator itor;                                  \
+            typedef list::value_type* ptr_type;                             \
+                                                                            \
+            Node* m_node;                                                   \
+            Node* m_init;                                                   \
+        public:                                                             \
+            typedef list::reference reference_type;                         \
+            typedef ptr_type pointer_type;                                  \
+                                                                            \
+            reverse_iterator(Node* node, Node* init)                        \
+                : m_node(node), m_init(init) { }                            \
+            reverse_iterator() : m_node(NULL), m_init(NULL) { }             \
+            reference_type operator*() const                                \
+                { return *(pointer_type)m_node->GetDataPtr(); }             \
+            pointer_type operator->() const                                 \
+                { return (pointer_type)m_node->GetDataPtr(); }              \
+            itor& operator++()                                              \
+                { m_node = m_node->GetPrevious(); return *this; }           \
+            itor operator++(int)                                            \
+            { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; }\
+            itor& operator--()                                              \
+            { m_node = m_node ? m_node->GetNext() : m_init; return *this; } \
+            itor operator--(int)                                            \
+            {                                                               \
+                itor tmp = *this;                                           \
+                m_node = m_node ? m_node->GetNext() : m_init;               \
+                return tmp;                                                 \
+            }                                                               \
+            bool operator!=(const itor& it) const                           \
+                { return it.m_node != m_node; }                             \
+            bool operator==(const itor& it) const                           \
+                { return it.m_node == m_node; }                             \
+        };                                                                  \
+        class const_reverse_iterator                                        \
+        {                                                                   \
+            typedef name list;                                              \
+        public:                                                             \
+            typedef list::Node Node;                                        \
+            typedef const_reverse_iterator itor;                            \
+            typedef list::value_type* ptr_type;                             \
+                                                                            \
+            Node* m_node;                                                   \
+            Node* m_init;                                                   \
+        public:                                                             \
+            typedef list::const_reference reference_type;                   \
+            typedef const ptr_type pointer_type;                            \
+                                                                            \
+            const_reverse_iterator(Node* node, Node* init)                  \
+                : m_node(node), m_init(init) { }                            \
+            const_reverse_iterator() : m_node(NULL), m_init(NULL) { }       \
+            const_reverse_iterator(const reverse_iterator& it)              \
+                : m_node(it.m_node), m_init(it.m_init) { }                  \
+            reference_type operator*() const                                \
+                { return *(pointer_type)m_node->GetDataPtr(); }             \
+            pointer_type operator->() const                                 \
+                { return (pointer_type)m_node->GetDataPtr(); }              \
+            itor& operator++()                                              \
+                { m_node = m_node->GetPrevious(); return *this; }           \
+            itor operator++(int)                                            \
+            { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; }\
+            itor& operator--()                                              \
+                { m_node = m_node ? m_node->GetNext() : m_init; return *this;}\
+            itor operator--(int)                                            \
+            {                                                               \
+                itor tmp = *this;                                           \
+                m_node = m_node ? m_node->GetNext() : m_init;               \
+                return tmp;                                                 \
+            }                                                               \
+            bool operator!=(const itor& it) const                           \
+                { return it.m_node != m_node; }                             \
+            bool operator==(const itor& it) const                           \
+                { return it.m_node == m_node; }                             \
+        };                                                                  \
+                                                                            \
+        wxEXPLICIT name(size_type n, const_reference v = value_type())      \
+            { assign(n, v); }                                               \
+        name(const_iterator first, const_iterator last)                     \
+            { assign(first, last); }                                        \
+        iterator begin() { return iterator(GetFirst(), GetLast()); }        \
+        const_iterator begin() const                                        \
+            { return const_iterator(GetFirst(), GetLast()); }               \
+        iterator end() { return iterator(NULL, GetLast()); }                \
+        const_iterator end() const { return const_iterator(NULL, GetLast()); }\
+        reverse_iterator rbegin()                                           \
+            { return reverse_iterator(GetLast(), GetFirst()); }             \
+        const_reverse_iterator rbegin() const                               \
+            { return const_reverse_iterator(GetLast(), GetFirst()); }       \
+        reverse_iterator rend() { return reverse_iterator(NULL, GetFirst()); }\
+        const_reverse_iterator rend() const                                 \
+            { return const_reverse_iterator(NULL, GetFirst()); }            \
+        void resize(size_type n, value_type v = value_type())               \
+        {                                                                   \
+            if(n < size())                                                  \
+                for(; n < size(); pop_back());                              \
+            else if(n > size())                                             \
+                for(; n > size(); push_back(v));                            \
+        }                                                                   \
+        size_type size() const { return GetCount(); }                       \
+        size_type max_size() const { return INT_MAX; }                      \
+        bool empty() const { return IsEmpty(); }                            \
+        reference front() { return *begin(); }                              \
+        const_reference front() const { return *begin(); }                  \
+        reference back() { return *--end(); }                               \
+        const_reference back() const { return *--end(); }                   \
+        void push_front(const_reference v = value_type())                   \
+            { Insert(GetFirst(), (const_base_reference)v); }                \
+        void pop_front() { DeleteNode(GetFirst()); }                        \
+        void push_back(const_reference v = value_type())                    \
+            { Append((const_base_reference)v); }                            \
+        void pop_back() { DeleteNode(GetLast()); }                          \
+        void assign(const_iterator first, const_iterator last)              \
+        {                                                                   \
+            clear();                                                        \
+            for(; first != last; ++first)                                   \
+                Append((const_base_reference)*first);                       \
+        }                                                                   \
+        void assign(size_type n, const_reference v = value_type())          \
+        {                                                                   \
+            clear();                                                        \
+            for(size_type i = 0; i < n; ++i)                                \
+                Append((const_base_reference)v);                            \
+        }                                                                   \
+        iterator insert(iterator it, const_reference v = value_type())      \
+        {                                                                   \
+            Insert(it.m_node, (const_base_reference)v);                     \
+            return iterator(it.m_node->GetPrevious(), GetLast());           \
+        }                                                                   \
+        void insert(iterator it, size_type n, const_reference v = value_type())\
+        {                                                                   \
+            for(size_type i = 0; i < n; ++i)                                \
+                Insert(it.m_node, (const_base_reference)v);                 \
+        }                                                                   \
+        void insert(iterator it, const_iterator first, const_iterator last) \
+        {                                                                   \
+            for(; first != last; ++first)                                   \
+                Insert(it.m_node, (const_base_reference)*first);            \
+        }                                                                   \
+        iterator erase(iterator it)                                         \
+        {                                                                   \
+            iterator next = iterator(it.m_node->GetNext(), GetLast());      \
+            DeleteNode(it.m_node); return next;                             \
+        }                                                                   \
+        iterator erase(iterator first, iterator last)                       \
+        {                                                                   \
+            iterator next = last; ++next;                                   \
+            DeleteNodes(first.m_node, last.m_node);                         \
+            return next;                                                    \
+        }                                                                   \
+        void clear() { Clear(); }                                           \
+        void splice(iterator it, name& l, iterator first, iterator last)    \
+            { insert(it, first, last); l.erase(first, last); }              \
+        void splice(iterator it, name& l)                                   \
+            { splice(it, l, l.begin(), l.end() ); }                         \
+        void splice(iterator it, name& l, iterator first)                   \
+        {                                                                   \
+            iterator tmp = first; ++tmp;                                    \
+            if(it == first || it == tmp) return;                            \
+            insert(it, *first);                                             \
+            l.erase(first);                                                 \
+        }                                                                   \
+        void remove(const_reference v)                                      \
+            { DeleteObject((const_base_reference)v); }                      \
+        void reverse()                                                      \
+            { Reverse(); }                                                  \
+     /* void swap(name& l)                                                  \
+        {                                                                   \
+            { size_t t = m_count; m_count = l.m_count; l.m_count = t; }     \
+            { bool t = m_destroy; m_destroy = l.m_destroy; l.m_destroy = t; }\
+            { wxNodeBase* t = m_nodeFirst; m_nodeFirst = l.m_nodeFirst; l.m_nodeFirst = t; }\
+            { wxNodeBase* t = m_nodeLast; m_nodeLast = l.m_nodeLast; l.m_nodeLast = t; }\
+            { wxKeyType t = m_keyType; m_keyType = l.m_keyType; l.m_keyType = t; }\
+        } */                                                                \
     }
 
@@ -494,4 +964,5 @@
 #define WX_DEFINE_USER_EXPORTED_LIST(name) WX_DEFINE_LIST(name)
 
+#endif // !wxUSE_STL
 
 // =============================================================================
@@ -511,5 +982,4 @@
 // wxList compatibility class: in fact, it's a list of wxObjects
 // -----------------------------------------------------------------------------
-
 WX_DECLARE_LIST_2(wxObject, wxObjectList, wxObjectListNode, class WXDLLIMPEXP_BASE);
 
@@ -517,7 +987,7 @@
 {
 public:
-#ifdef wxWARN_COMPAT_LIST_USE
+#if defined(wxWARN_COMPAT_LIST_USE) && !wxUSE_STL
     wxDEPRECATED( wxList(int key_type = wxKEY_NONE) );
-#else
+#elif !wxUSE_STL
     wxList(int key_type = wxKEY_NONE);
 #endif
@@ -526,4 +996,5 @@
    ~wxList() { }
 
+#if !wxUSE_STL
     wxList& operator=(const wxList& list)
         { (void) wxListBase::operator=(list); return *this; }
@@ -531,15 +1002,22 @@
     // compatibility methods
     void Sort(wxSortCompareFunction compfunc) { wxListBase::Sort(compfunc); }
+#endif
 
+#if wxUSE_STL
+#else
     wxNode *Member(wxObject *object) const { return (wxNode *)Find(object); }
+#endif
 
 private:
+#if !wxUSE_STL
     DECLARE_DYNAMIC_CLASS(wxList)
+#endif
 };
 
+#if !wxUSE_STL
+
 // -----------------------------------------------------------------------------
 // wxStringList class for compatibility with the old code
 // -----------------------------------------------------------------------------
-
 WX_DECLARE_LIST_2(wxChar, wxStringListBase, wxStringListNode, class WXDLLIMPEXP_BASE);
 
@@ -584,5 +1062,30 @@
 };
 
+#else // if wxUSE_STL
+
+WX_DECLARE_LIST_XO(wxString, wxStringListBase, class WXDLLEXPORT);
+
+class WXDLLEXPORT wxStringList : public wxStringListBase
+{
+public:
+};
+
+#endif // wxUSE_STL
+
 #endif // wxLIST_COMPATIBILITY
+
+// delete all list elements
+//
+// NB: the class declaration of the list elements must be visible from the
+//     place where you use this macro, otherwise the proper destructor may not
+//     be called (a decent compiler should give a warning about it, but don't
+//     count on it)!
+#define WX_CLEAR_LIST(type, array)                                           \
+    {                                                                        \
+        type::iterator it, en;                                               \
+        for( it = (array).begin(), en = (array).end(); it != en; ++it )      \
+            delete *it;                                                      \
+        (array).clear();                                                     \
+    }
 
 #endif
Index: include/wx/listimpl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/listimpl.cpp,v
retrieving revision 1.4
diff -u -2 -r1.4 listimpl.cpp
--- include/wx/listimpl.cpp	2000/07/15 19:49:56	1.4
+++ include/wx/listimpl.cpp	2003/07/04 19:09:04
@@ -10,4 +10,11 @@
 /////////////////////////////////////////////////////////////////////////////
 
+#if wxUSE_STL
+
+#undef WX_DEFINE_LIST
+#define WX_DEFINE_LIST(name)
+
+#else // if !wxUSE_STL
+
 #define _DEFINE_LIST(T, name)                   \
     void wx##name##Node::DeleteData()    \
@@ -23,2 +30,4 @@
 // don't pollute preprocessor's name space
 //#undef  _DEFINE_LIST
+
+#endif
Index: include/wx/log.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/log.h,v
retrieving revision 1.84
diff -u -2 -r1.84 log.h
--- include/wx/log.h	2003/07/02 01:59:16	1.84
+++ include/wx/log.h	2003/07/04 19:09:05
@@ -186,5 +186,6 @@
     static void SetTraceMask(wxTraceMask ulMask) { ms_ulTraceMask = ulMask; }
         // add string trace mask
-    static void AddTraceMask(const wxString& str) { ms_aTraceMasks.Add(str); }
+    static void AddTraceMask(const wxString& str)
+        { ms_aTraceMasks.push_back(str); }
         // add string trace mask
     static void RemoveTraceMask(const wxString& str);
@@ -206,6 +207,5 @@
     static wxTraceMask GetTraceMask() { return ms_ulTraceMask; }
         // is this trace mask in the list?
-    static bool IsAllowedTraceMask(const wxChar *mask)
-        { return ms_aTraceMasks.Index(mask) != wxNOT_FOUND; }
+    static bool IsAllowedTraceMask(const wxChar *mask);
         // return the current loglevel limit
     static wxLogLevel GetLogLevel() { return ms_logLevel; }
Index: include/wx/string.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/string.h,v
retrieving revision 1.157
diff -u -2 -r1.157 string.h
--- include/wx/string.h	2003/07/03 21:59:45	1.157
+++ include/wx/string.h	2003/07/04 19:09:13
@@ -236,5 +236,7 @@
 class WXDLLIMPEXP_BASE wxString
 {
+#if !wxUSE_STL
 friend class WXDLLIMPEXP_BASE wxArrayString;
+#endif
 
   // NB: special care was taken in arranging the member functions in such order
@@ -1013,4 +1015,6 @@
 };
 
+#if !wxUSE_STL
+
 // ----------------------------------------------------------------------------
 // The string array uses it's knowledge of internal structure of the wxString
@@ -1146,4 +1150,106 @@
   bool operator!=(const wxArrayString& a) const { return !(*this == a); }
 
+  // STL-like interface
+  typedef wxString value_type;
+  typedef value_type* pointer;
+  typedef const value_type* const_pointer;
+  typedef value_type* iterator;
+  typedef const value_type* const_iterator;
+  typedef value_type& reference;
+  typedef const value_type& const_reference;
+  typedef int difference_type;
+  typedef size_t size_type;
+
+  // FIXME: same in dynarray.h
+  class reverse_iterator
+  {
+    typedef wxArrayString name;
+    typedef name::reference reference;
+    typedef name::pointer pointer;
+    typedef reverse_iterator itor;
+    friend itor operator+(int o, const itor& it);
+    friend itor operator+(const itor& it, int o);
+    friend itor operator-(const itor& it, int o);
+    friend difference_type operator -(const itor& i1, const itor& i2);
+  public:
+    pointer m_ptr;
+    reverse_iterator() : m_ptr(NULL) { }
+    reverse_iterator(pointer ptr) : m_ptr(ptr) { }
+    reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
+    reference operator*() const { return *m_ptr; }
+    pointer operator->() const { return m_ptr; }
+    itor operator++() { --m_ptr; return *this; }
+    itor operator++(int)
+      { reverse_iterator tmp = *this; --m_ptr; return tmp; }
+    itor operator--() { ++m_ptr; return *this; }
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }
+  };
+
+  class const_reverse_iterator
+  {
+    typedef wxArrayString name;
+    typedef name::const_reference reference;
+    typedef name::const_pointer pointer;
+    typedef const_reverse_iterator itor;
+    friend itor operator+(int o, const itor& it);
+    friend itor operator+(const itor& it, int o);
+    friend itor operator-(const itor& it, int o);
+    friend difference_type operator -(const itor& i1, const itor& i2);
+  public:
+    pointer m_ptr;
+    const_reverse_iterator() : m_ptr(NULL) { }
+    const_reverse_iterator(pointer ptr) : m_ptr(ptr) { }
+    const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
+    const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }
+    reference operator*() const { return *m_ptr; }
+    pointer operator->() const { return m_ptr; }
+    itor operator++() { --m_ptr; return *this; }
+    itor operator++(int)
+      { itor tmp = *this; --m_ptr; return tmp; }
+    itor operator--() { ++m_ptr; return *this; }
+    itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }
+    bool operator ==(const itor& it) { return m_ptr == it.m_ptr; }
+    bool operator !=(const itor& it) { return m_ptr != it.m_ptr; }
+  };
+
+  void assign(const_iterator first, const_iterator last);
+  void assign(size_type n, const_reference v)
+    { clear(); Add(v, n); }
+  reference back() { return *(end() - 1); }
+  const_reference back() const { return *(end() - 1); }
+  iterator begin() { return (wxString *)&(m_pItems[0]); }
+  const_iterator begin() const { return (wxString *)&(m_pItems[0]); }
+  size_type capacity() const { return m_nSize; }
+  void clear() { Clear(); }
+  bool empty() const { return IsEmpty(); }
+  iterator end() { return begin() + GetCount(); }
+  const_iterator end() const { return begin() + GetCount(); }
+  iterator erase(iterator first, iterator last)
+  {
+      size_t idx = first - begin();
+      RemoveAt(idx, last - first);
+      return begin() + idx;
+  }
+  iterator erase(iterator it) { return erase(it, it + 1); }
+  reference front() { return *begin(); }
+  const_reference front() const { return *begin(); }
+  void insert(iterator it, size_type n, const_reference v)
+    { Insert(v, it - begin(), n); }
+  iterator insert(iterator it, const_reference v = value_type())
+    { size_t idx = it - begin(); Insert(v, idx); return begin() + idx; }
+  void insert(iterator it, const_iterator first, const_iterator last);
+  size_type max_size() const { return INT_MAX; }
+  void pop_back() { RemoveAt(GetCount() - 1); }
+  void push_back(const_reference v) { Add(v); }
+  reverse_iterator rbegin() { return reverse_iterator(end() - 1); }
+  const_reverse_iterator rbegin() const;
+  reverse_iterator rend() { return reverse_iterator(begin() - 1); }
+  const_reverse_iterator rend() const;
+  void reserve(size_type n) /* base::reserve*/;
+  void resize(size_type n, value_type v = value_type());
+  size_type size() const { return GetCount(); }
+
 protected:
   void Init(bool autoSort);             // common part of all ctors
@@ -1172,4 +1278,12 @@
     { Copy(array); }
 };
+
+inline void wxArrayString_Sort(wxArrayString& array,
+                               wxArrayString::CompareFunction f)
+{
+    array.Sort(f);
+}
+
+#endif
 
 // ----------------------------------------------------------------------------
Index: include/wx/textbuf.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/textbuf.h,v
retrieving revision 1.10
diff -u -2 -r1.10 textbuf.h
--- include/wx/textbuf.h	2003/07/02 01:59:17	1.10
+++ include/wx/textbuf.h	2003/07/04 19:09:13
@@ -97,9 +97,9 @@
 
     // get the number of lines in the buffer
-    size_t GetLineCount() const { return m_aLines.Count(); }
+    size_t GetLineCount() const { return m_aLines.size(); }
 
     // the returned line may be modified (but don't add CR/LF at the end!)
-    wxString& GetLine(size_t n)    const { return m_aLines[n]; }
-    wxString& operator[](size_t n) const { return m_aLines[n]; }
+    wxString& GetLine(size_t n)    const { return (wxString&)m_aLines[n]; }
+    wxString& operator[](size_t n) const { return (wxString&)m_aLines[n]; }
 
     // the current line has meaning only when you're using
@@ -108,5 +108,5 @@
     size_t GetCurrentLine() const { return m_nCurLine; }
     void GoToLine(size_t n) { m_nCurLine = n; }
-    bool Eof() const { return (m_aLines.Count() == 0 || m_nCurLine == m_aLines.Count() - 1); }
+    bool Eof() const { return (m_aLines.size() == 0 || m_nCurLine == m_aLines.size() - 1); }
 
     // these methods allow more "iterator-like" traversal of the list of
@@ -121,5 +121,5 @@
         { wxASSERT(m_nCurLine > 0); return m_aLines[--m_nCurLine];   }
     wxString& GetLastLine() /* const */
-        { return m_aLines[m_nCurLine = m_aLines.Count() - 1]; }
+        { return m_aLines[m_nCurLine = m_aLines.size() - 1]; }
 
     // get the type of the line (see also GetEOL)
@@ -137,15 +137,23 @@
     // add a line to the end
     void AddLine(const wxString& str, wxTextFileType type = typeDefault)
-        { m_aLines.Add(str); m_aTypes.Add(type); }
+        { m_aLines.push_back(str); m_aTypes.push_back(type); }
     // insert a line before the line number n
     void InsertLine(const wxString& str,
                   size_t n,
                   wxTextFileType type = typeDefault)
-        { m_aLines.Insert(str, n); m_aTypes.Insert(type, n); }
+    {
+        m_aLines.insert(m_aLines.begin() + n, str); 
+        m_aTypes.insert(m_aTypes.begin()+n, type); 
+    }
+
     // delete one line
-    void RemoveLine(size_t n) { m_aLines.RemoveAt(n); m_aTypes.RemoveAt(n); }
+    void RemoveLine(size_t n)
+    {
+        m_aLines.erase(m_aLines.begin() + n);
+        m_aTypes.erase(m_aTypes.begin() + n); 
+    }
 
     // remove all lines
-    void Clear() { m_aLines.Clear(); m_nCurLine = 0; }
+    void Clear() { m_aLines.clear(); m_nCurLine = 0; }
 
     // change the buffer (default argument means "don't change type")
Index: include/wx/tokenzr.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/tokenzr.h,v
retrieving revision 1.15
diff -u -2 -r1.15 tokenzr.h
--- include/wx/tokenzr.h	2003/07/02 01:59:17	1.15
+++ include/wx/tokenzr.h	2003/07/04 19:09:14
@@ -19,4 +19,7 @@
 #include "wx/object.h"
 #include "wx/string.h"
+#if wxUSE_STL
+    #include "wx/dynarray.h"
+#endif
 
 // ----------------------------------------------------------------------------
Index: include/wx/utils.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/utils.h,v
retrieving revision 1.89
diff -u -2 -r1.89 utils.h
--- include/wx/utils.h	2003/07/02 17:11:15	1.89
+++ include/wx/utils.h	2003/07/04 19:09:15
@@ -24,4 +24,7 @@
 #include "wx/list.h"
 #include "wx/filefn.h"
+#if wxUSE_STL
+    #include "wx/dynarray.h"
+#endif
 
 // need this for wxGetDiskSpace() as we can't, unfortunately, forward declare
Index: include/wx/msw/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/setup0.h,v
retrieving revision 1.147
diff -u -2 -r1.147 setup0.h
--- include/wx/msw/setup0.h	2003/06/16 12:31:39	1.147
+++ include/wx/msw/setup0.h	2003/07/04 19:09:20
@@ -200,4 +200,18 @@
 // ----------------------------------------------------------------------------
 
+// Set wxUSE_STL to 1 to derive wxList(Foo) and wxArray(Foo) from
+// std::list<Foo*> and std::vector<Foo*>, with a compatibility interface,
+// and for wxHashMap to be implemented with templates.
+//
+// Set wxUSE_STL_ONLY to 1 for wxList(Foo) and wxArrya(Foo) to be a
+// typedef for std::list<Foo*> and std::vector<Foo*>, _without_
+// any compatibility interface.
+//
+// Default is 0
+//
+// Recommended setting: YMMV
+#define wxUSE_STL 0
+#define wxUSE_STL_ONLY 0
+
 // Support for message/error logging. This includes wxLogXXX() functions and
 // wxLog and derived classes. Don't set this to 0 unless you really know what
Index: include/wx/protocol/http.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/protocol/http.h,v
retrieving revision 1.10
diff -u -2 -r1.10 http.h
--- include/wx/protocol/http.h	2003/07/02 01:59:23	1.10
+++ include/wx/protocol/http.h	2003/07/04 19:09:21
@@ -16,7 +16,9 @@
 #if wxUSE_PROTOCOL_HTTP
 
-#include "wx/list.h"
+#include "wx/hashmap.h"
 #include "wx/protocol/protocol.h"
 
+WX_DECLARE_EXPORTED_STRING_HASH_MAP( wxString, wxStringToStringHashMap );
+
 class WXDLLIMPEXP_BASE wxHTTP : public wxProtocol {
   DECLARE_DYNAMIC_CLASS(wxHTTP)
@@ -24,5 +26,5 @@
 protected:
   wxProtocolError m_perr;
-  wxList m_headers;
+  wxStringToStringHashMap m_headers;
   bool m_read, m_proxy_mode;
   wxSockAddress *m_addr;
Index: samples/console/console.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/console/console.cpp,v
retrieving revision 1.147
diff -u -2 -r1.147 console.cpp
--- samples/console/console.cpp	2003/03/28 15:28:57	1.147
+++ samples/console/console.cpp	2003/07/04 19:09:37
@@ -96,5 +96,7 @@
     static const bool TEST_ALL = true;
 #else
-    #define TEST_FILECONF
+    #define TEST_ARRAYS
+    #define TEST_HASH
+    #define TEST_LIST
 
     static const bool TEST_ALL = false;
@@ -1150,4 +1152,39 @@
 
     {
+        wxHashTable hash(wxKEY_INTEGER), hash2(wxKEY_STRING);
+        int i;
+
+        for ( i = 0; i < 100; ++i )
+            hash.Put(i, (wxObject*)&i + i);
+
+        hash.BeginFind();
+        wxHashTable::compatibility_iterator it = hash.Next();
+        i = 0;
+
+        while (it)
+        {
+            ++i;
+            it = hash.Next();
+        }
+
+        if (i != 100)
+            wxPuts(_T("Error in wxHashTable::compatibility_iterator\n"));
+
+        for ( i = 99; i >= 0; --i )
+            if( hash.Get(i) != (wxObject*)&i + i )
+                wxPuts(_T("Error in wxHashTable::Get/Put\n"));
+
+        hash2.Put("foo", (wxObject*)&i + 1);
+        hash2.Put("bar", (wxObject*)&i + 2);
+        hash2.Put("baz", (wxObject*)&i + 3);
+
+        if (hash2.Get("moo") != NULL)
+            wxPuts(_T("Error in wxHashTable::Get\n"));
+
+        if (hash2.Get("bar") != (wxObject*)&i + 2)
+            wxPuts(_T("Error in wxHashTable::Get/Put\n"));
+    }
+#if !wxUSE_STL
+    {
         wxHashFoos hash;
         hash.DeleteContents(true);
@@ -1198,6 +1235,8 @@
         }
     }
+#endif
 
     wxPrintf(_T("Hash destroyed: %u foos left\n"), Foo::count);
+    wxPuts(_T("*** Testing wxHashTable finished ***\n"));
 }
 
@@ -1362,4 +1401,104 @@
 WX_DEFINE_LIST(wxListBars);
 
+WX_DECLARE_LIST(int, wxListInt);
+WX_DEFINE_LIST(wxListInt);
+
+static void TestList()
+{
+#if !wxUSE_STL_ONLY
+    wxPuts(_T("*** Testing wxList operations ***\n"));
+    {
+        wxListInt list1;
+        int dummy[5];
+        int i;
+
+        for ( i = 0; i < 5; ++i )
+            list1.Append(dummy + i);
+
+        if ( list1.GetCount() != 5 )
+            wxPuts(_T("Wrong number of items in list\n"));
+
+        if ( list1.Item(3)->GetData() != dummy + 3 )
+            wxPuts(_T("Error in Item()\n"));
+
+        if ( !list1.Find(dummy + 4) )
+            wxPuts(_T("Error in Find()\n"));
+
+        wxListInt::compatibility_iterator node = list1.GetFirst();
+        i = 0;
+
+        while (node)
+        {
+            if ( node->GetData() != dummy + i )
+                wxPuts(_T("Error in compatibility_iterator\n"));
+            node = node->GetNext();
+            ++i;
+        }
+
+        if ( size_t(i) != list1.GetCount() )
+            wxPuts(_T("Error in compatibility_iterator\n"));
+
+        list1.Insert(dummy + 0);
+        list1.Insert(1, dummy + 1);
+        list1.Insert(list1.GetFirst()->GetNext()->GetNext(), dummy + 2);
+
+        node = list1.GetFirst();
+        i = 0;
+
+        while (i < 3)
+        {
+            int* t = node->GetData();
+            if ( t != dummy + i )
+                wxPuts(_T("Error in Insert\n"));
+            node = node->GetNext();
+            ++i;
+        }
+    }
+
+    wxPuts(_T("*** Testing wxList operations finished ***\n"));
+#endif
+
+    wxPuts(_T("*** Testing std::list operations ***\n"));
+
+    {
+        wxListInt list1;
+        wxListInt::iterator it, en;
+        wxListInt::reverse_iterator rit, ren;
+        int i;
+        for ( i = 0; i < 5; ++i )
+            list1.push_back(i + &i);
+
+        for ( it = list1.begin(), en = list1.end(), i = 0;
+              it != en; ++it, ++i )
+            if ( *it != i + &i )
+                wxPuts(_T("Error in iterator\n"));
+
+        for ( rit = list1.rbegin(), ren = list1.rend(), i = 4;
+              rit != ren; ++rit, --i )
+            if ( *rit != i + &i )
+                wxPuts(_T("Error in reverse_iterator\n"));
+
+        if ( *list1.rbegin() != *--list1.end() ||
+             *list1.begin() != *--list1.rend() )
+            wxPuts(_T("Error in iterator/reverse_iterator\n"));
+        if ( *list1.begin() != *--++list1.begin() ||
+             *list1.rbegin() != *--++list1.rbegin() )
+            wxPuts(_T("Error in iterator/reverse_iterator\n"));
+
+        if ( list1.front() != &i || list1.back() != &i + 4 )
+            wxPuts(_T("Error in front()/back()\n"));
+
+        list1.erase(list1.begin());
+        list1.erase(--list1.end());
+
+        for ( it = list1.begin(), en = list1.end(), i = 1;
+              it != en; ++it, ++i )
+            if ( *it != i + &i )
+                wxPuts(_T("Error in erase()\n"));
+    }
+    
+    wxPuts(_T("*** Testing std::list operations finished ***\n"));
+}
+
 static void TestListCtor()
 {
@@ -1380,5 +1519,9 @@
                list1.GetCount(), list2.GetCount(), Bar::GetNumber());
 
+#if !wxUSE_STL
         list1.DeleteContents(true);
+#else
+        WX_CLEAR_LIST(wxListBars, list1);
+#endif
     }
 
@@ -5684,4 +5827,15 @@
 }
 
+static void PrintArray(const wxChar* name, const wxSortedArrayString& array)
+{
+    wxPrintf(_T("Dump of the array '%s'\n"), name);
+
+    size_t nCount = array.GetCount();
+    for ( size_t n = 0; n < nCount; n++ )
+    {
+        wxPrintf(_T("\t%s[%u] = '%s'\n"), name, n, array[n].c_str());
+    }
+}
+
 int wxCMPFUNC_CONV StringLenCompare(const wxString& first,
                                     const wxString& second)
@@ -5748,4 +5902,51 @@
 TestArrayOf(Int);
 
+static void TestStlArray()
+{
+    wxPuts(_T("*** Testing std::vector operations ***\n"));
+
+    {
+        wxArrayInt list1;
+        wxArrayInt::iterator it, en;
+        wxArrayInt::reverse_iterator rit, ren;
+        int i;
+        for ( i = 0; i < 5; ++i )
+            list1.push_back(i);
+
+        for ( it = list1.begin(), en = list1.end(), i = 0;
+              it != en; ++it, ++i )
+            if ( *it != i )
+                wxPuts(_T("Error in iterator\n"));
+
+        for ( rit = list1.rbegin(), ren = list1.rend(), i = 4;
+              rit != ren; ++rit, --i )
+            if ( *rit != i )
+                wxPuts(_T("Error in reverse_iterator\n"));
+
+        if ( *list1.rbegin() != *(list1.end()-1) ||
+             *list1.begin() != *(list1.rend()-1) )
+            wxPuts(_T("Error in iterator/reverse_iterator\n"));
+
+        it = list1.begin()+1;
+        rit = list1.rbegin()+1;
+        if ( *list1.begin() != *(it-1) ||
+             *list1.rbegin() != *(rit-1) )
+            wxPuts(_T("Error in iterator/reverse_iterator\n"));
+
+        if ( list1.front() != 0 || list1.back() != 4 )
+            wxPuts(_T("Error in front()/back()\n"));
+
+        list1.erase(list1.begin());
+        list1.erase(list1.end()-1);
+
+        for ( it = list1.begin(), en = list1.end(), i = 1;
+              it != en; ++it, ++i )
+            if ( *it != i )
+                wxPuts(_T("Error in erase()\n"));
+    }
+    
+    wxPuts(_T("*** Testing std::vector operations finished ***\n"));
+}
+
 static void TestArrayOfObjects()
 {
@@ -6180,4 +6381,14 @@
 #endif // TEST_SNGLINST
 
+static int MyStringCompare(wxString* s1, wxString* s2)
+{
+    return wxStrcmp(s1->c_str(), s2->c_str());
+}
+
+static int MyStringReverseCompare(wxString* s1, wxString* s2)
+{
+    return -wxStrcmp(s1->c_str(), s2->c_str());
+}
+
 int main(int argc, char **argv)
 {
@@ -6309,5 +6520,5 @@
 
 #ifdef TEST_ARRAYS
-    if ( TEST_ALL )
+    if ( 1 || TEST_ALL )
     {
         wxArrayString a1;
@@ -6326,9 +6537,16 @@
         PrintArray(_T("a2"), a2);
 
+#if !wxUSE_STL
         wxSortedArrayString a3(a1);
+#else
+        wxSortedArrayString a3;
+        for (wxArrayString::iterator it = a1.begin(), en = a1.end();
+             it != en; ++it)
+            a3.Add(*it);
+#endif
         PrintArray(_T("a3"), a3);
 
         wxPuts(_T("*** After deleting three strings from a1"));
-        a1.Remove(2,3);
+        a1.RemoveAt(2,3);
 
         PrintArray(_T("a1"), a1);
@@ -6336,20 +6554,24 @@
         PrintArray(_T("a3"), a3);
 
+#if !wxUSE_STL
         wxPuts(_T("*** After reassigning a1 to a2 and a3"));
         a3 = a2 = a1;
         PrintArray(_T("a2"), a2);
         PrintArray(_T("a3"), a3);
+#endif
 
         wxPuts(_T("*** After sorting a1"));
-        a1.Sort();
+        a1.Sort(&MyStringCompare);
         PrintArray(_T("a1"), a1);
 
         wxPuts(_T("*** After sorting a1 in reverse order"));
-        a1.Sort(true);
+        a1.Sort(&MyStringReverseCompare);
         PrintArray(_T("a1"), a1);
 
+#if !wxUSE_STL
         wxPuts(_T("*** After sorting a1 by the string length"));
-        a1.Sort(StringLenCompare);
+        a1.Sort(&StringLenCompare);
         PrintArray(_T("a1"), a1);
+#endif
 
         TestArrayOfObjects();
@@ -6358,4 +6580,5 @@
 
     TestArrayOfInts();
+    TestStlArray();
 #endif // TEST_ARRAYS
 
@@ -6387,4 +6610,5 @@
 #ifdef TEST_LIST
     TestListCtor();
+    TestList();
 #endif // TEST_LIST
 
Index: src/common/appbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/appbase.cpp,v
retrieving revision 1.8
diff -u -2 -r1.8 appbase.cpp
--- src/common/appbase.cpp	2003/07/03 12:42:14	1.8
+++ src/common/appbase.cpp	2003/07/04 19:09:43
@@ -262,9 +262,9 @@
 
     // iterate until the list becomes empty
-    wxNode *node = wxPendingEvents->GetFirst();
+    wxList::compatibility_iterator node = wxPendingEvents->GetFirst();
     while (node)
     {
         wxEvtHandler *handler = (wxEvtHandler *)node->GetData();
-        delete node;
+        wxPendingEvents->Erase(node);
 
         // In ProcessPendingEvents(), new handlers might be add
@@ -754,5 +754,5 @@
     {
         // send it to the normal log destination
-        wxLogDebug(_T("%s"), msg);
+        wxLogDebug(_T("%s"), msg.c_str());
 
         if ( traits )
Index: src/common/artprov.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/artprov.cpp,v
retrieving revision 1.8
diff -u -2 -r1.8 artprov.cpp
--- src/common/artprov.cpp	2002/12/04 14:06:16	1.8
+++ src/common/artprov.cpp	2003/07/04 19:09:44
@@ -139,4 +139,5 @@
     if ( sm_providers->DeleteObject(provider) )
     {
+        delete provider;
         sm_cache->Clear();
         return TRUE;
Index: src/common/cmdline.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/cmdline.cpp,v
retrieving revision 1.32
diff -u -2 -r1.32 cmdline.cpp
--- src/common/cmdline.cpp	2003/03/17 11:28:28	1.32
+++ src/common/cmdline.cpp	2003/07/04 19:09:47
@@ -217,9 +217,9 @@
 void wxCmdLineParserData::SetArguments(int argc, wxChar **argv)
 {
-    m_arguments.Empty();
+    m_arguments.clear();
 
     for ( int n = 0; n < argc; n++ )
     {
-        m_arguments.Add(argv[n]);
+        m_arguments.push_back(argv[n]);
     }
 }
@@ -227,7 +227,7 @@
 void wxCmdLineParserData::SetArguments(const wxString& cmdLine)
 {
-    m_arguments.Empty();
+    m_arguments.clear();
 
-    m_arguments.Add(wxTheApp->GetAppName());
+    m_arguments.push_back(wxTheApp->GetAppName());
 
     wxArrayString args = wxCmdLineParser::ConvertStringToArgs(cmdLine);
@@ -489,5 +489,5 @@
 size_t wxCmdLineParser::GetParamCount() const
 {
-    return m_data->m_parameters.GetCount();
+    return m_data->m_parameters.size();
 }
 
@@ -530,5 +530,5 @@
     // parse everything
     wxString arg;
-    size_t count = m_data->m_arguments.GetCount();
+    size_t count = m_data->m_arguments.size();
     for ( size_t n = 1; ok && (n < count); n++ )    // 0 is program name
     {
@@ -633,5 +633,6 @@
                         arg2 += arg.Mid(len + 1); // +1 for leading '-'
 
-                        m_data->m_arguments.Insert(arg2, n + 1);
+                        m_data->m_arguments.insert
+                            (m_data->m_arguments.begin() + n + 1, arg2);
                         count++;
                     }
@@ -780,5 +781,5 @@
                 // TODO check the param type
 
-                m_data->m_parameters.Add(arg);
+                m_data->m_parameters.push_back(arg);
 
                 if ( !(param.flags & wxCMD_LINE_PARAM_MULTIPLE) )
@@ -906,5 +907,5 @@
     if ( !appname )
     {
-        wxCHECK_MSG( !m_data->m_arguments.IsEmpty(), wxEmptyString,
+        wxCHECK_MSG( m_data->m_arguments.size() != 0, wxEmptyString,
                      _T("no program name") );
 
@@ -990,6 +991,6 @@
         }
 
-        namesOptions.Add(option);
-        descOptions.Add(opt.description);
+        namesOptions.push_back(option);
+        descOptions.push_back(opt.description);
     }
 
@@ -1022,5 +1023,5 @@
     // now construct the detailed help message
     size_t len, lenMax = 0;
-    count = namesOptions.GetCount();
+    count = namesOptions.size();
     for ( n = 0; n < count; n++ )
     {
@@ -1237,5 +1238,5 @@
         }
 
-        args.Add(arg);
+        args.push_back(arg);
     }
 
Index: src/common/config.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/config.cpp,v
retrieving revision 1.57
diff -u -2 -r1.57 config.cpp
--- src/common/config.cpp	2003/07/03 21:59:48	1.57
+++ src/common/config.cpp	2003/07/04 19:09:47
@@ -396,5 +396,5 @@
 void wxSplitPath(wxArrayString& aParts, const wxChar *sz)
 {
-  aParts.Empty();
+  aParts.clear();
 
   wxString strCurrent;
@@ -407,13 +407,13 @@
       else if ( strCurrent == wxT("..") ) {
         // go up one level
-        if ( aParts.IsEmpty() )
+        if ( aParts.size() == 0 )
           wxLogWarning(_("'%s' has extra '..', ignored."), sz);
         else
-          aParts.RemoveAt(aParts.Count() - 1);
+          aParts.erase(aParts.end() - 1);
 
         strCurrent.Empty();
       }
       else if ( !strCurrent.IsEmpty() ) {
-        aParts.Add(strCurrent);
+        aParts.push_back(strCurrent);
         strCurrent.Empty();
       }
Index: src/common/datetime.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/datetime.cpp,v
retrieving revision 1.80
diff -u -2 -r1.80 datetime.cpp
--- src/common/datetime.cpp	2003/06/14 13:23:56	1.80
+++ src/common/datetime.cpp	2003/07/04 19:09:56
@@ -163,5 +163,5 @@
     {
         wxDateTimeHolidayAuthority::ClearAllAuthorities();
-        wxDateTimeHolidayAuthority::ms_authorities.Clear();
+        wxDateTimeHolidayAuthority::ms_authorities.clear();
     }
 
@@ -3817,5 +3817,5 @@
 bool wxDateTimeHolidayAuthority::IsHoliday(const wxDateTime& dt)
 {
-    size_t count = ms_authorities.GetCount();
+    size_t count = ms_authorities.size();
     for ( size_t n = 0; n < count; n++ )
     {
@@ -3837,7 +3837,7 @@
     wxDateTimeArray hol;
 
-    holidays.Empty();
+    holidays.Clear();
 
-    size_t count = ms_authorities.GetCount();
+    size_t count = ms_authorities.size();
     for ( size_t nAuth = 0; nAuth < count; nAuth++ )
     {
@@ -3849,5 +3849,5 @@
     holidays.Sort(wxDateTimeCompareFunc);
 
-    return holidays.GetCount();
+    return holidays.size();
 }
 
@@ -3861,5 +3861,5 @@
 void wxDateTimeHolidayAuthority::AddAuthority(wxDateTimeHolidayAuthority *auth)
 {
-    ms_authorities.Add(auth);
+    ms_authorities.push_back(auth);
 }
 
Index: src/common/dircmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/dircmn.cpp,v
retrieving revision 1.8
diff -u -2 -r1.8 dircmn.cpp
--- src/common/dircmn.cpp	2003/03/17 11:28:29	1.8
+++ src/common/dircmn.cpp	2003/07/04 19:09:57
@@ -207,5 +207,5 @@
     virtual wxDirTraverseResult OnFile(const wxString& filename)
     {
-        m_files.Add(filename);
+        m_files.push_back(filename);
         return wxDIR_CONTINUE;
     }
Index: src/common/dynarray.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/dynarray.cpp,v
retrieving revision 1.36
diff -u -2 -r1.36 dynarray.cpp
--- src/common/dynarray.cpp	2003/04/27 15:17:46	1.36
+++ src/common/dynarray.cpp	2003/07/04 19:09:58
@@ -54,5 +54,119 @@
 // ----------------------------------------------------------------------------
 
-#define _WX_DEFINE_BASEARRAY(T, name)                                       \
+#define _WX_DEFINE_BASEARRAY_COMMON_CMPFUNC_NONMEMBER(T, name)              \
+void name##_Add(name& array, T lItem, CMPFUNC fnCompare)                    \
+{                                                                           \
+  array.insert(array.begin() + name##_IndexForInsert(array, lItem, fnCompare),\
+               lItem);                                                      \
+}                                                                           \
+                                                                            \
+size_t name##_IndexForInsert(const name& array, T lItem, CMPFUNC fnCompare) \
+{                                                                           \
+  size_t i,                                                                 \
+       lo = 0,                                                              \
+       hi = array.size();                                                   \
+  int res;                                                                  \
+                                                                            \
+  while ( lo < hi ) {                                                       \
+    i = (lo + hi)/2;                                                        \
+                                                                            \
+    res = (*fnCompare)((const void *)(long)lItem,                           \
+                       (const void *)(long)(array[i]));                     \
+    if ( res < 0 )                                                          \
+      hi = i;                                                               \
+    else if ( res > 0 )                                                     \
+      lo = i + 1;                                                           \
+    else {                                                                  \
+      lo = i;                                                               \
+      break;                                                                \
+    }                                                                       \
+  }                                                                         \
+                                                                            \
+  return lo;                                                                \
+}                                                                           \
+                                                                            \
+int name##_Index(const name& array, T lItem, CMPFUNC fnCompare)             \
+{                                                                           \
+    size_t n = name##_IndexForInsert(array, lItem, fnCompare);              \
+                                                                            \
+    return (n >= array.size() ||                                            \
+           (*fnCompare)((const void *)(long)lItem,                          \
+                        ((const void *)(long)array[n]))) ? wxNOT_FOUND      \
+                                                         : (int)n;          \
+}
+
+#define _WX_DEFINE_BASEARRAY_COMMON_CMPFUNC(T, name)                        \
+/* add item assuming the array is sorted with fnCompare function */         \
+void name::Add(T lItem, CMPFUNC fnCompare)                                  \
+{                                                                           \
+  Insert(lItem, name##_IndexForInsert(*this, lItem, fnCompare));            \
+}                                                                           \
+                                                                            \
+/* search for a place to insert item into sorted array (binary search) */   \
+size_t name::IndexForInsert(T lItem, CMPFUNC fnCompare) const               \
+  { return name##_IndexForInsert(*this, lItem, fnCompare); }                \
+                                                                            \
+/* search for an item in a sorted array (binary search) */                  \
+int name::Index(T lItem, CMPFUNC fnCompare) const                           \
+    { return name##_Index(*this, lItem, fnCompare); }
+
+#define _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC_NOMEMBER(T, name)
+
+#if !wxUSE_STL_ONLY
+
+#define _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC(T, name)                      \
+/* removes item from array (by value) */                                    \
+void name::Remove(T lItem)                                                  \
+{                                                                           \
+  int iIndex = Index(lItem);                                                \
+                                                                            \
+  wxCHECK_RET( iIndex != wxNOT_FOUND,                                       \
+               wxT("removing inexistent item in wxArray::Remove") );        \
+                                                                            \
+  RemoveAt((size_t)iIndex);                                                 \
+}
+
+#endif
+
+#if wxUSE_STL_ONLY
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)                    \
+void name##_Shrink(name& array)                                             \
+{                                                                           \
+    name tmp(array);                                                        \
+    array.swap(tmp);                                                        \
+}
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_CMPFUNC(T, name)
+#define _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC(T, name)
+
+#elif wxUSE_STL
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)              \
+  int name::Index(T e, bool bFromEnd) const                           \
+  {                                                                   \
+    int inc = bFromEnd ? -1 : 1;                                      \
+    const_iterator it = (bFromEnd ? end() - 1   : begin()),           \
+                   en = (bFromEnd ? begin() - 1 : end());             \
+    for (; it != en; it = it + inc)                                   \
+      if (*it == e)                                                   \
+        return it - begin();                                          \
+    return wxNOT_FOUND;                                               \
+  }                                                                   \
+void name::Shrink()                                                   \
+{                                                                           \
+  name##_Shrink(*this);                                                     \
+}                                                                           \
+void name##_Shrink(name& array)                                             \
+{                                                                           \
+    name tmp(array);                                                        \
+    array.swap(tmp);                                                        \
+}
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_CMPFUNC(T, name)
+
+#else // if !wxUSE_STL
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)                    \
 /* ctor */                                                                  \
 name::name()                                                                \
@@ -230,4 +344,9 @@
 }                                                                           \
                                                                             \
+void name##_Shrink(name& array)                                             \
+{                                                                           \
+  array.Shrink();                                                           \
+}                                                                           \
+                                                                            \
 /* searches the array for an item (forward or backwards) */                 \
 int name::Index(T lItem, bool bFromEnd) const                               \
@@ -253,41 +372,4 @@
 }                                                                           \
                                                                             \
-/* search for a place to insert item into sorted array (binary search) */   \
-size_t name::IndexForInsert(T lItem, CMPFUNC fnCompare) const               \
-{                                                                           \
-  size_t i,                                                                 \
-       lo = 0,                                                              \
-       hi = m_nCount;                                                       \
-  int res;                                                                  \
-                                                                            \
-  while ( lo < hi ) {                                                       \
-    i = (lo + hi)/2;                                                        \
-                                                                            \
-    res = (*fnCompare)((const void *)(long)lItem,                           \
-                       (const void *)(long)(m_pItems[i]));                  \
-    if ( res < 0 )                                                          \
-      hi = i;                                                               \
-    else if ( res > 0 )                                                     \
-      lo = i + 1;                                                           \
-    else {                                                                  \
-      lo = i;                                                               \
-      break;                                                                \
-    }                                                                       \
-  }                                                                         \
-                                                                            \
-  return lo;                                                                \
-}                                                                           \
-                                                                            \
-/* search for an item in a sorted array (binary search) */                  \
-int name::Index(T lItem, CMPFUNC fnCompare) const                           \
-{                                                                           \
-    size_t n = IndexForInsert(lItem, fnCompare);                            \
-                                                                            \
-    return (n >= m_nCount ||                                                \
-           (*fnCompare)((const void *)(long)lItem,                          \
-                        ((const void *)(long)m_pItems[n]))) ? wxNOT_FOUND   \
-                                                            : (int)n;       \
-}                                                                           \
-                                                                            \
 /* add item at the end */                                                   \
 void name::Add(T lItem, size_t nInsert)                                     \
@@ -300,10 +382,4 @@
 }                                                                           \
                                                                             \
-/* add item assuming the array is sorted with fnCompare function */         \
-void name::Add(T lItem, CMPFUNC fnCompare)                                  \
-{                                                                           \
-  Insert(lItem, IndexForInsert(lItem, fnCompare));                          \
-}                                                                           \
-                                                                            \
 /* add item at the given position */                                        \
 void name::Insert(T lItem, size_t nIndex, size_t nInsert)                   \
@@ -334,17 +410,29 @@
           (m_nCount - nIndex - nRemove)*sizeof(T));                         \
   m_nCount -= nRemove;                                                      \
-}                                                                           \
-                                                                            \
-/* removes item from array (by value) */                                    \
-void name::Remove(T lItem)                                                  \
-{                                                                           \
-  int iIndex = Index(lItem);                                                \
-                                                                            \
-  wxCHECK_RET( iIndex != wxNOT_FOUND,                                       \
-               wxT("removing inexistent item in wxArray::Remove") );        \
-                                                                            \
-  RemoveAt((size_t)iIndex);                                                 \
 }                                                                           \
-                                                                            \
+/* STL-like operations */                                                   \
+void name::assign(const_iterator first, const_iterator last)      \
+{                                                                 \
+  clear();                                                        \
+  reserve(last - first);                                          \
+  for(; first != last; ++first) push_back(*first);                \
+}                                                                 \
+                                                                  \
+void name::assign(size_type n, const_reference v)                 \
+{                                                                 \
+  clear();                                                        \
+  reserve(n);                                                     \
+  for(size_type i = 0; i < n; ++i) push_back(v);                  \
+}                                                                 \
+                                                                  \
+void name::insert(iterator it, const_iterator first, const_iterator last)\
+{                                                                 \
+  Insert(value_type(), it - begin(), last - first);               \
+  while(first != last) *it++ = *first++;                          \
+}                                                                 \
+
+
+
+#define _WX_DEFINE_BASEARRAY_NOCOMMON_CMPFUNC(T, name)                      \
 /* sort array elements using passed comparaison function */                 \
 void name::Sort(CMPFUNC fCmp)                                               \
@@ -353,8 +441,93 @@
 }
 
+#endif // !wxUSE_STL
+
+#if wxUSE_STL_ONLY
+
+#define _WX_DEFINE_BASEARRAY(T, name)                                       \
+  _WX_DEFINE_BASEARRAY_COMMON_CMPFUNC_NONMEMBER(T, name)                    \
+  _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC_NOMEMBER(T, name)                   \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_CMPFUNC(T, name)                            \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)
+
+#define _WX_DEFINE_BASEARRAY_NOCMPFUNC(T, name)                             \
+  _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC(T, name)                            \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)
+
+#else // if !wxUSE_STL_ONLY
+
+#define _WX_DEFINE_BASEARRAY(T, name)                                       \
+  _WX_DEFINE_BASEARRAY_COMMON_CMPFUNC(T, name)                              \
+  _WX_DEFINE_BASEARRAY_COMMON_CMPFUNC_NONMEMBER(T, name)                    \
+  _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC(T, name)                            \
+  _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC_NOMEMBER(T, name)                   \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_CMPFUNC(T, name)                            \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)
+
+#define _WX_DEFINE_BASEARRAY_NOCMPFUNC(T, name)                             \
+  _WX_DEFINE_BASEARRAY_COMMON_NOCMPFUNC(T, name)                            \
+  _WX_DEFINE_BASEARRAY_NOCOMMON_NOCMPFUNC(T, name)
+
+#endif // !wxUSE_STL_ONLY
+
 _WX_DEFINE_BASEARRAY(const void *, wxBaseArrayPtrVoid)
 _WX_DEFINE_BASEARRAY(short,        wxBaseArrayShort)
 _WX_DEFINE_BASEARRAY(int,          wxBaseArrayInt)
 _WX_DEFINE_BASEARRAY(long,         wxBaseArrayLong)
-//_WX_DEFINE_BASEARRAY(double,       wxBaseArrayDouble)
+_WX_DEFINE_BASEARRAY_NOCMPFUNC(double, wxBaseArrayDouble)
+
+#if wxUSE_STL
+_WX_DEFINE_BASEARRAY_NOCMPFUNC(wxString, wxBaseArrayString)
+
+class wxBaseArrayString_Predicate
+{
+    typedef CMPFUNC fnc;
+    fnc m_f;
+  public:
+    wxBaseArrayString_Predicate(fnc f) : m_f(f) { }
+    bool operator()(const wxString& i1, const wxString& i2)
+      { return m_f((wxString*)&i1, (wxString*)&i2) < 0; /* const cast */ }
+};
+
+class wxBaseArrayString_Predicate2
+{
+    typedef CMPFUNC fnc;
+    fnc m_f;
+    wxString m_s;
+  public:
+    wxBaseArrayString_Predicate2(wxString s, fnc f) : m_f(f), m_s(s) { }
+    bool operator()(const wxString& s)
+      { return m_f(&m_s, (wxString*)&s) < 0; /* const cast */ }
+};
+
+int wxBaseArrayString_Index(const wxBaseArrayString& a, wxString s, CMPFUNC f)
+{
+    size_t n = wxBaseArrayString_IndexForInsert(a, s, f);
+
+    return (n >= a.size() ||
+           (*f)(&s, &a[n])) ? wxNOT_FOUND : (int)n;
+}
+
+void wxBaseArrayString_Add(wxBaseArrayString& array,
+                           wxString lItem, CMPFUNC fnCompare)
+{
+  array.insert(array.begin() +
+                   wxBaseArrayString_IndexForInsert(array, lItem, fnCompare),
+               lItem);
+}
+
+size_t wxBaseArrayString_IndexForInsert(const wxBaseArrayString& a,
+                                        wxString s, CMPFUNC f)
+{                                                                           
+    wxBaseArrayString_Predicate p(f);
+    wxBaseArrayString::const_iterator it =
+        std::lower_bound(a.begin(), a.end(), s, p);
+    return it - a.begin();    
+}
+
+int wxArrayString_Compare(const wxString& s1, const wxString& s2)
+{
+    return wxStrcmp(s1.c_str(), s2.c_str());
+}
 
+#endif
Index: src/common/dynload.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/dynload.cpp,v
retrieving revision 1.25
diff -u -2 -r1.25 dynload.cpp
--- src/common/dynload.cpp	2003/06/01 12:57:45	1.25
+++ src/common/dynload.cpp	2003/07/04 19:10:00
@@ -476,5 +476,5 @@
             wxASSERT_MSG( m, _T("wxDynamicCast of wxModule failed") );
 
-            m_wxmodules.Append(m);
+            m_wxmodules.push_back(m);
             wxModule::RegisterModule(m);
         }
@@ -483,9 +483,9 @@
     // FIXME: Likewise this is (well was) very similar to InitializeModules()
 
-    for ( wxModuleList::Node *node = m_wxmodules.GetFirst();
-          node;
-          node = node->GetNext())
+    for ( wxModuleList::iterator it = m_wxmodules.begin();
+          it != m_wxmodules.end();
+          ++it)
     {
-        if( !node->GetData()->Init() )
+        if( !(*it)->Init() )
         {
             wxLogDebug(_T("wxModule::Init() failed for wxPluginLibrary"));
@@ -498,11 +498,12 @@
             // shortly).
 
-            wxModuleList::Node *oldNode = 0;
+            wxModuleList::iterator oldNode = m_wxmodules.end();
             do {
-                node = node->GetNext();
-                delete oldNode;
-                wxModule::UnregisterModule( node->GetData() );
-                oldNode = node;
-            } while( node );
+                ++it;
+                if( oldNode != m_wxmodules.end() )
+                    m_wxmodules.erase(oldNode);
+                wxModule::UnregisterModule( *it );
+                oldNode = it;
+            } while( it != m_wxmodules.end() );
 
             --m_linkcount;     // Flag us for deletion
@@ -514,13 +515,13 @@
 void wxPluginLibrary::UnregisterModules()
 {
-    wxModuleList::Node  *node;
+    wxModuleList::iterator it;
 
-    for ( node = m_wxmodules.GetFirst(); node; node = node->GetNext() )
-        node->GetData()->Exit();
+    for ( it = m_wxmodules.begin(); it != m_wxmodules.end(); ++it )
+        (*it)->Exit();
 
-    for ( node = m_wxmodules.GetFirst(); node; node = node->GetNext() )
-        wxModule::UnregisterModule( node->GetData() );
+    for ( it = m_wxmodules.begin(); it != m_wxmodules.end(); ++it )
+        wxModule::UnregisterModule( *it );
 
-    m_wxmodules.DeleteContents(TRUE);
+    WX_CLEAR_LIST(wxModuleList, m_wxmodules);
 }
 
Index: src/common/encconv.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/encconv.cpp,v
retrieving revision 1.16
diff -u -2 -r1.16 encconv.cpp
--- src/common/encconv.cpp	2003/01/07 16:49:22	1.16
+++ src/common/encconv.cpp	2003/07/04 19:10:01
@@ -384,5 +384,12 @@
 
 
-
+static bool FindEncoding(const wxFontEncodingArray& arr, wxFontEncoding f)
+{
+    for (wxFontEncodingArray::const_iterator it = arr.begin(), en = arr.end();
+         it != en; ++it)
+        if (*it == f)
+            return true;
+    return false;
+}
 
 wxFontEncodingArray wxEncodingConverter::GetPlatformEquivalents(wxFontEncoding enc, int platform)
@@ -413,7 +420,7 @@
                 {
                     for (f = EquivalentEncodings[clas][platform]; *f != STOP; f++)
-                        if (*f == enc) arr.Add(enc);
+                        if (*f == enc) arr.push_back(enc);
                     for (f = EquivalentEncodings[clas][platform]; *f != STOP; f++)
-                        if (arr.Index(*f) == wxNOT_FOUND) arr.Add(*f);
+                        if (!FindEncoding(arr, *f)) arr.push_back(*f);
                     i = NUM_OF_PLATFORMS/*hack*/; break;
                 }
@@ -443,5 +450,5 @@
                     for (j = 0; j < NUM_OF_PLATFORMS; j++)
                         for (f = EquivalentEncodings[clas][j]; *f != STOP; f++)
-                            if (arr.Index(*f) == wxNOT_FOUND) arr.Add(*f);
+                            if (!FindEncoding(arr, *f)) arr.push_back(*f);
                     i = NUM_OF_PLATFORMS/*hack*/; break;
                 }
Index: src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/event.cpp,v
retrieving revision 1.124
diff -u -2 -r1.124 event.cpp
--- src/common/event.cpp	2003/07/02 01:41:22	1.124
+++ src/common/event.cpp	2003/07/04 19:10:03
@@ -659,11 +659,12 @@
     if (m_dynamicEvents)
     {
-        wxNode *node = m_dynamicEvents->GetFirst();
-        while (node)
+        wxList::iterator it = m_dynamicEvents->begin(),
+                         en = m_dynamicEvents->end();
+        for (;it != en; ++it)
         {
 #if WXWIN_COMPATIBILITY_EVENT_TYPES
-            wxEventTableEntry *entry = (wxEventTableEntry*)node->GetData();
+            wxEventTableEntry *entry = (wxEventTableEntry*)*it;
 #else // !WXWIN_COMPATIBILITY_EVENT_TYPES
-            wxDynamicEventTableEntry *entry = (wxDynamicEventTableEntry*)node->GetData();
+            wxDynamicEventTableEntry *entry = (wxDynamicEventTableEntry*)*it;
 #endif // WXWIN_COMPATIBILITY_EVENT_TYPES/!WXWIN_COMPATIBILITY_EVENT_TYPES
 
@@ -671,5 +672,4 @@
                 delete entry->m_callbackUserData;
             delete entry;
-            node = node->GetNext();
         }
         delete m_dynamicEvents;
@@ -765,9 +765,9 @@
 #endif
 
-    wxNode *node = m_pendingEvents->GetFirst();
+    wxList::compatibility_iterator node = m_pendingEvents->GetFirst();
     while ( node )
     {
         wxEvent *event = (wxEvent *)node->GetData();
-        delete node;
+        m_pendingEvents->Erase(node);
 
         // In ProcessEvent, new events might get added and
@@ -947,5 +947,5 @@
         return FALSE;
 
-    wxNode *node = m_dynamicEvents->GetFirst();
+    wxList::compatibility_iterator node = m_dynamicEvents->GetFirst();
     while (node)
     {
@@ -965,5 +965,5 @@
             if (entry->m_callbackUserData)
                 delete entry->m_callbackUserData;
-            m_dynamicEvents->DeleteNode( node );
+            m_dynamicEvents->Erase( node );
             delete entry;
             return TRUE;
@@ -981,5 +981,5 @@
     int commandId = event.GetId();
 
-    wxNode *node = m_dynamicEvents->GetFirst();
+    wxList::compatibility_iterator node = m_dynamicEvents->GetFirst();
     while (node)
     {
Index: src/common/filefn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/filefn.cpp,v
retrieving revision 1.177
diff -u -2 -r1.177 filefn.cpp
--- src/common/filefn.cpp	2003/07/02 17:11:18	1.177
+++ src/common/filefn.cpp	2003/07/04 19:10:08
@@ -214,5 +214,5 @@
 // ----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxPathList, wxStringList)
+// IMPLEMENT_DYNAMIC_CLASS(wxPathList, wxStringList)
 
 static inline wxChar* MYcopystring(const wxString& s)
@@ -230,5 +230,5 @@
 void wxPathList::Add (const wxString& path)
 {
-    wxStringList::Add (WXSTRINGCAST path);
+    wxStringList::Append (WXSTRINGCAST path);
 }
 
@@ -291,5 +291,5 @@
 bool wxPathList::Member (const wxString& path)
 {
-  for (wxStringList::Node *node = GetFirst(); node; node = node->GetNext())
+  for (wxStringList::compatibility_iterator node = GetFirst(); node; node = node->GetNext())
   {
       wxString path2( node->GetData() );
@@ -319,7 +319,7 @@
   filename = wxIsAbsolutePath (buf) ? wxFileNameFromPath (buf) : (wxChar *)buf;
 
-  for (wxStringList::Node *node = GetFirst(); node; node = node->GetNext())
+  for (wxStringList::compatibility_iterator node = GetFirst(); node; node = node->GetNext())
     {
-      wxChar *path = node->GetData();
+      const wxChar *path = node->GetData();
       wxStrcpy (wxFileFunctionsBuffer, path);
       wxChar ch = wxFileFunctionsBuffer[wxStrlen(wxFileFunctionsBuffer)-1];
Index: src/common/filesys.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/filesys.cpp,v
retrieving revision 1.46
diff -u -2 -r1.46 filesys.cpp
--- src/common/filesys.cpp	2003/02/06 00:53:35	1.46
+++ src/common/filesys.cpp	2003/07/04 19:10:09
@@ -29,5 +29,4 @@
 
 
-
 //--------------------------------------------------------------------------------
 // wxFileSystemHandler
@@ -324,5 +323,5 @@
     char meta;
     wxFSFile *s = NULL;
-    wxNode *node;
+    wxList::compatibility_iterator node;
 
     ln = loc.Length();
@@ -378,5 +377,5 @@
 wxString wxFileSystem::FindFirst(const wxString& spec, int flags)
 {
-    wxNode *node;
+    wxList::compatibility_iterator node;
     wxString spec2(spec);
 
@@ -425,6 +424,5 @@
 void wxFileSystem::CleanUpHandlers()
 {
-    m_Handlers.DeleteContents(TRUE);
-    m_Handlers.Clear();
+    WX_CLEAR_LIST(wxList, m_Handlers);
 }
 
Index: src/common/fs_inet.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/fs_inet.cpp,v
retrieving revision 1.26
diff -u -2 -r1.26 fs_inet.cpp
--- src/common/fs_inet.cpp	2003/02/06 00:53:35	1.26
+++ src/common/fs_inet.cpp	2003/07/04 19:10:10
@@ -157,9 +157,9 @@
 wxInternetFSHandler::~wxInternetFSHandler()
 {
-    wxNode *n;
+    wxHashTable::compatibility_iterator n;
     wxInetCacheNode *n2;
 
     m_Cache.BeginFind();
-    while ((n = m_Cache.Next()) != NULL)
+    while ((n = m_Cache.Next()))
     {
         n2 = (wxInetCacheNode*) n->GetData();
Index: src/common/fs_mem.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/fs_mem.cpp,v
retrieving revision 1.21
diff -u -2 -r1.21 fs_mem.cpp
--- src/common/fs_mem.cpp	2003/06/30 18:42:53	1.21
+++ src/common/fs_mem.cpp	2003/07/04 19:10:10
@@ -102,4 +102,5 @@
     if (m_Hash)
     {
+        WX_CLEAR_HASH_TABLE(*m_Hash);
         delete m_Hash;
         m_Hash = NULL;
@@ -161,5 +162,4 @@
     {
         m_Hash = new wxHashTable(wxKEY_STRING);
-        m_Hash -> DeleteContents(TRUE);
     }
 
Index: src/common/hash.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/hash.cpp,v
retrieving revision 1.27
diff -u -2 -r1.27 hash.cpp
--- src/common/hash.cpp	2003/07/03 21:59:48	1.27
+++ src/common/hash.cpp	2003/07/04 19:10:11
@@ -35,4 +35,6 @@
 #include "wx/hash.h"
 
+#if !wxUSE_STL
+
 #include <string.h>
 #include <stdarg.h>
@@ -723,2 +725,3 @@
 }
 
+#endif // !wxUSE_STL
Index: src/common/http.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/http.cpp,v
retrieving revision 1.55
diff -u -2 -r1.55 http.cpp
--- src/common/http.cpp	2003/06/29 00:39:13	1.55
+++ src/common/http.cpp	2003/07/04 19:10:12
@@ -39,6 +39,5 @@
 
 wxHTTP::wxHTTP()
-  : wxProtocol(),
-    m_headers(wxKEY_STRING)
+  : wxProtocol()
 {
   m_addr = NULL;
@@ -58,15 +57,5 @@
 void wxHTTP::ClearHeaders()
 {
-  // wxString isn't a wxObject
-  wxNode *node = m_headers.GetFirst();
-  wxString *string;
-
-  while (node) {
-    string = (wxString *)node->GetData();
-    delete string;
-    node = node->GetNext();
-  }
-
-  m_headers.Clear();
+  m_headers.clear();
 }
 
@@ -88,43 +77,32 @@
   }
 
-  wxNode *node = m_headers.Find(header);
-
-  if (!node)
-    m_headers.Append(header.Upper(), (wxObject *)(new wxString(h_data)));
-  else {
-    wxString *str = (wxString *)node->GetData();
-    (*str) = h_data;
-  }
+  wxStringToStringHashMap::iterator it = m_headers.find(header);
+  if (it != m_headers.end())
+    it->second = h_data;  
+  else
+    m_headers[header.Upper()] = h_data;
 }
 
 wxString wxHTTP::GetHeader(const wxString& header)
 {
-  wxNode *node;
-  wxString upper_header;
+  wxStringToStringHashMap::iterator it = m_headers.find(header.Upper());
 
-  upper_header = header.Upper();
-
-  node = m_headers.Find(upper_header);
-  if (!node)
+  if (it == m_headers.end())
     return wxEmptyString;
 
-  return *((wxString *)node->GetData());
+  return it->second;
 }
 
 void wxHTTP::SendHeaders()
 {
-  wxNode *head = m_headers.GetFirst();
+  typedef wxStringToStringHashMap::iterator iterator;
+  wxString buf;
 
-  while (head)
+  for (iterator it = m_headers.begin(), en = m_headers.end(); it != en; ++it )
   {
-    wxString *str = (wxString *)head->GetData();
-
-    wxString buf;
-    buf.Printf(wxT("%s: %s\r\n"), head->GetKeyString(), str->GetData());
+    buf.Printf(wxT("%s: %s\r\n"), it->first.c_str(), it->second.c_str());
 
     const wxWX2MBbuf cbuf = buf.mb_str();
     Write(cbuf, strlen(cbuf));
-
-    head = head->GetNext();
   }
 }
@@ -153,8 +131,7 @@
 
     wxString left_str = line.BeforeFirst(':');
-    wxString *str = new wxString(line.AfterFirst(':').Strip(wxString::both));
     left_str.MakeUpper();
 
-    m_headers.Append(left_str, (wxObject *) str);
+    m_headers[left_str] = line.AfterFirst(':').Strip(wxString::both);
   }
   return TRUE;
Index: src/common/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/image.cpp,v
retrieving revision 1.165
diff -u -2 -r1.165 image.cpp
--- src/common/image.cpp	2003/06/25 14:32:08	1.165
+++ src/common/image.cpp	2003/07/04 19:10:15
@@ -1314,4 +1314,5 @@
     {
         sm_handlers.DeleteObject(handler);
+        delete handler;
         return true;
     }
Index: src/common/list.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/list.cpp,v
retrieving revision 1.43
diff -u -2 -r1.43 list.cpp
--- src/common/list.cpp	2003/07/02 17:11:19	1.43
+++ src/common/list.cpp	2003/07/04 19:10:17
@@ -38,4 +38,6 @@
 #endif
 
+#if !wxUSE_STL
+
 // =============================================================================
 // implementation
@@ -45,5 +47,4 @@
 // wxListKey
 // -----------------------------------------------------------------------------
-
 wxListKey wxDefaultListKey;
 
@@ -532,4 +533,36 @@
 }
 
+void wxListBase::Reverse()
+{
+    wxNodeBase* node = m_nodeFirst;
+    wxNodeBase* tmp;
+
+    while (node)
+    {
+        // swap prev and next pointers
+        tmp = node->m_next;
+        node->m_next = node->m_previous;
+        node->m_previous = tmp;
+
+        // this is the node that was next before swapping
+        node = tmp;
+    }
+
+    // swap first and last node
+    tmp = m_nodeFirst; m_nodeFirst = m_nodeLast; m_nodeLast = tmp;
+}
+
+void wxListBase::DeleteNodes(wxNodeBase* first, wxNodeBase* last)
+{
+    wxNodeBase* node = first;
+
+    while (node != last)
+    {
+        wxNodeBase* next = node->GetNext();
+        DeleteNode(node);
+        node = next;
+    }
+}
+
 // ============================================================================
 // compatibility section from now on
@@ -733,2 +766,3 @@
 #endif // wxLIST_COMPATIBILITY
 
+#endif // !wxUSE_STL
Index: src/common/log.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/log.cpp,v
retrieving revision 1.139
diff -u -2 -r1.139 log.cpp
--- src/common/log.cpp	2003/07/02 17:18:13	1.139
+++ src/common/log.cpp	2003/07/04 19:10:18
@@ -34,4 +34,8 @@
 #ifndef WX_PRECOMP
     #include "wx/app.h"
+    #if wxUSE_STL
+        #include "wx/dynarray.h"
+    #endif
+
     #include "wx/intl.h"
     #include "wx/string.h"
@@ -496,4 +500,14 @@
 {
     // nothing to do here
+}
+
+/*static*/ bool wxLog::IsAllowedTraceMask(const wxChar *mask)
+{
+    for ( wxArrayString::iterator it = ms_aTraceMasks.begin(),
+                                  en = ms_aTraceMasks.end();
+         it != en; ++it )
+        if ( *it == mask)
+            return true;
+    return false;
 }
 
Index: src/common/module.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/module.cpp,v
retrieving revision 1.9
diff -u -2 -r1.9 module.cpp
--- src/common/module.cpp	2003/03/29 13:53:39	1.9
+++ src/common/module.cpp	2003/07/04 19:10:18
@@ -39,4 +39,5 @@
 {
     m_modules.DeleteObject(module);
+    delete module;
 }
 
@@ -45,5 +46,5 @@
 void wxModule::RegisterModules()
 {
-    wxNode *node;
+    wxHashTable::compatibility_iterator node;
     wxClassInfo* classInfo;
 
@@ -66,5 +67,5 @@
 {
     // Initialize user-defined modules
-    wxModuleList::Node *node;
+    wxModuleList::compatibility_iterator node;
     for ( node = m_modules.GetFirst(); node; node = node->GetNext() )
     {
@@ -72,5 +73,5 @@
         {
             // clean up already initialized modules - process in reverse order
-            wxModuleList::Node *n;
+            wxModuleList::compatibility_iterator n;
             for ( n = node->GetPrevious(); n; n = n->GetPrevious() )
             {
@@ -88,5 +89,5 @@
 {
     // Cleanup user-defined modules
-    wxModuleList::Node *node;
+    wxModuleList::compatibility_iterator node;
     for ( node = m_modules.GetFirst(); node; node = node->GetNext() )
     {
@@ -94,6 +95,5 @@
     }
 
-    m_modules.DeleteContents(TRUE);
-    m_modules.Clear();
+    WX_CLEAR_LIST(wxModuleList, m_modules);
 }
 
Index: src/common/socket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/socket.cpp,v
retrieving revision 1.109
diff -u -2 -r1.109 socket.cpp
--- src/common/socket.cpp	2003/06/24 00:55:54	1.109
+++ src/common/socket.cpp	2003/07/04 19:10:21
@@ -829,5 +829,5 @@
 void wxSocketBase::RestoreState()
 {
-  wxNode *node;
+  wxList::compatibility_iterator node;
   wxSocketState *state;
 
@@ -847,5 +847,5 @@
 #endif // WXWIN_COMPATIBILITY
 
-  delete node;
+  m_states.Erase(node);
   delete state;
 }
Index: src/common/string.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/string.cpp,v
retrieving revision 1.177
diff -u -2 -r1.177 string.cpp
--- src/common/string.cpp	2003/07/04 09:01:46	1.177
+++ src/common/string.cpp	2003/07/04 19:10:26
@@ -1750,4 +1750,6 @@
 #endif  //std::string compatibility
 
+#if !wxUSE_STL
+
 // ============================================================================
 // ArrayString
@@ -2181,4 +2183,6 @@
     return TRUE;
 }
+
+#endif // !wxUSE_STL
 
 int wxStringSortAscending(wxString* s1, wxString* s2)
Index: src/common/sysopt.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/sysopt.cpp,v
retrieving revision 1.3
diff -u -2 -r1.3 sysopt.cpp
--- src/common/sysopt.cpp	2003/07/04 12:56:58	1.3
+++ src/common/sysopt.cpp	2003/07/04 19:10:26
@@ -38,4 +38,7 @@
 #include "wx/sysopt.h"
 #include "wx/module.h"
+#if wxUSE_STL
+#include "wx/dynarray.h" // wxArrayString
+#endif
 
 // ----------------------------------------------------------------------------
Index: src/common/tokenzr.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/tokenzr.cpp,v
retrieving revision 1.14
diff -u -2 -r1.14 tokenzr.cpp
--- src/common/tokenzr.cpp	2001/06/26 20:59:10	1.14
+++ src/common/tokenzr.cpp	2003/07/04 19:10:27
@@ -30,4 +30,7 @@
 
 #include "wx/tokenzr.h"
+#if wxUSE_STL
+#include "wx/dynarray.h" // wxArrayString
+#endif
 
 // Required for wxIs... functions
Index: src/common/utilscmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/utilscmn.cpp,v
retrieving revision 1.109
diff -u -2 -r1.109 utilscmn.cpp
--- src/common/utilscmn.cpp	2003/07/02 17:11:19	1.109
+++ src/common/utilscmn.cpp	2003/07/04 19:10:28
@@ -674,5 +674,5 @@
 #endif
 
-    wxWindowList::Node  *node = win->GetChildren().GetLast();
+    wxWindowList::compatibility_iterator node = win->GetChildren().GetLast();
     while (node)
     {
@@ -703,5 +703,5 @@
     // on top are likely to have been appended most
     // recently.
-    wxWindowList::Node  *node = wxTopLevelWindows.GetLast();
+    wxWindowList::compatibility_iterator node = wxTopLevelWindows.GetLast();
     while (node)
     {
@@ -852,5 +852,5 @@
 void wxEnableTopLevelWindows(bool enable)
 {
-    wxWindowList::Node *node;
+    wxWindowList::compatibility_iterator node;
     for ( node = wxTopLevelWindows.GetFirst(); node; node = node->GetNext() )
         node->GetData()->Enable(enable);
@@ -863,5 +863,5 @@
     m_winDisabled = NULL;
 
-    wxWindowList::Node *node;
+    wxWindowList::compatibility_iterator node;
     for ( node = wxTopLevelWindows.GetFirst(); node; node = node->GetNext() )
     {
@@ -889,5 +889,5 @@
 wxWindowDisabler::~wxWindowDisabler()
 {
-    wxWindowList::Node *node;
+    wxWindowList::compatibility_iterator node;
     for ( node = wxTopLevelWindows.GetFirst(); node; node = node->GetNext() )
     {
Index: src/common/variant.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/variant.cpp,v
retrieving revision 1.50
diff -u -2 -r1.50 variant.cpp
--- src/common/variant.cpp	2003/07/02 12:50:48	1.50
+++ src/common/variant.cpp	2003/07/04 19:10:31
@@ -95,5 +95,5 @@
 {
     Clear();
-    wxNode* node = value.GetFirst();
+    wxList::compatibility_iterator node = value.GetFirst();
     while (node)
     {
@@ -106,5 +106,5 @@
 void wxVariantDataList::Clear()
 {
-    wxNode* node = m_value.GetFirst();
+    wxList::compatibility_iterator node = m_value.GetFirst();
     while (node)
     {
@@ -123,5 +123,5 @@
 
     listData.Clear();
-    wxNode* node = m_value.GetFirst();
+    wxList::compatibility_iterator node = m_value.GetFirst();
     while (node)
     {
@@ -137,6 +137,6 @@
 
     wxVariantDataList& listData = (wxVariantDataList&) data;
-    wxNode* node1 = m_value.GetFirst();
-    wxNode* node2 = listData.GetValue().GetFirst();
+    wxList::compatibility_iterator node1 = m_value.GetFirst();
+    wxList::compatibility_iterator node2 = listData.GetValue().GetFirst();
     while (node1 && node2)
     {
@@ -165,5 +165,5 @@
 {
     str = wxT("");
-    wxNode* node = m_value.GetFirst();
+    wxList::compatibility_iterator node = m_value.GetFirst();
     while (node)
     {
@@ -246,6 +246,6 @@
 
     wxVariantDataStringList& listData = (wxVariantDataStringList&) data;
-    wxStringList::Node  *node1 = m_value.GetFirst();
-    wxStringList::Node  *node2 = listData.GetValue().GetFirst();
+    wxStringList::compatibility_iterator node1 = m_value.GetFirst();
+    wxStringList::compatibility_iterator node2 = listData.GetValue().GetFirst();
     while (node1 && node2)
     {
@@ -274,8 +274,8 @@
 {
     str.Empty();
-    wxStringList::Node  *node = m_value.GetFirst();
+    wxStringList::compatibility_iterator node = m_value.GetFirst();
     while (node)
     {
-        wxChar* s = node->GetData();
+        const wxChar* s = node->GetData();
         if (node != m_value.GetFirst())
           str += wxT(" ");
@@ -1736,5 +1736,5 @@
         wxASSERT_MSG( (idx < (size_t) data->GetValue().GetCount()), wxT("Invalid index for array") );
 
-        wxVariant variant( wxString( (wxChar*) (data->GetValue().Item(idx)->GetData()) ));
+        wxVariant variant( wxString( (const wxChar*) (data->GetValue().Item(idx)->GetData()) ));
         return variant;
     }
@@ -1943,5 +1943,5 @@
     wxList& list = GetList();
 
-    wxNode* node = list.GetFirst();
+    wxList::compatibility_iterator node = list.GetFirst();
     while (node)
     {
@@ -1960,8 +1960,8 @@
 
     wxASSERT_MSG( (item < (int) list.GetCount()), wxT("Invalid index to Delete") );
-    wxNode* node = list.Item(item);
+    wxList::compatibility_iterator node = list.Item(item);
     wxVariant* variant = (wxVariant*) node->GetData();
     delete variant;
-    delete node;
+    list.Erase(node);
     return TRUE;
 }
Index: src/html/helpfrm.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/html/helpfrm.cpp,v
retrieving revision 1.81
diff -u -2 -r1.81 helpfrm.cpp
--- src/html/helpfrm.cpp	2003/07/03 21:59:52	1.81
+++ src/html/helpfrm.cpp	2003/07/04 19:10:35
@@ -1070,4 +1070,8 @@
 END_EVENT_TABLE()
 
+static int MyStringCompare(const wxString& s1, const wxString& s2)
+{
+    return wxStrcmp(s1.c_str(), s2.c_str());
+}
 
 void wxHtmlHelpFrame::OptionsDialog()
@@ -1082,5 +1086,5 @@
         m_NormalFonts = new wxArrayString;
         *m_NormalFonts = *enu.GetFacenames();
-        m_NormalFonts->Sort();
+        m_NormalFonts->Sort(&MyStringCompare);
     }
     if (m_FixedFonts == NULL)
@@ -1090,5 +1094,5 @@
         m_FixedFonts = new wxArrayString;
         *m_FixedFonts = *enu.GetFacenames();
-        m_FixedFonts->Sort();
+        m_FixedFonts->Sort(&MyStringCompare);
     }
     
Index: src/msw/app.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/app.cpp,v
retrieving revision 1.191
diff -u -2 -r1.191 app.cpp
--- src/msw/app.cpp	2003/07/02 02:09:44	1.191
+++ src/msw/app.cpp	2003/07/04 19:10:39
@@ -113,5 +113,5 @@
     (!defined(__MINGW32__) || wxCHECK_W32API_VERSION( 2, 0 )) && \
     !defined(__CYGWIN__)
-    #include <shlwapi.h>
+//    #include <shlwapi.h>
 #endif
 
Index: src/msw/dde.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/dde.cpp,v
retrieving revision 1.32
diff -u -2 -r1.32 dde.cpp
--- src/msw/dde.cpp	2003/05/23 19:16:44	1.32
+++ src/msw/dde.cpp	2003/07/04 19:10:41
@@ -39,6 +39,6 @@
 #include "wx/dde.h"
 #include "wx/intl.h"
+#include "wx/hashmap.h"
 
-
 #include "wx/msw/private.h"
 
@@ -123,7 +123,9 @@
 // ----------------------------------------------------------------------------
 
+WX_DECLARE_STRING_HASH_MAP( HSZ, wxAtomMap );
+
 static DWORD DDEIdInst = 0L;
 static wxDDEConnection *DDECurrentlyConnecting = NULL;
-static wxList wxAtomTable(wxKEY_STRING);
+static wxAtomMap wxAtomTable;
 
 #include "wx/listimpl.cpp"
@@ -194,13 +196,8 @@
 void wxDDECleanUp()
 {
-    wxDDEClientObjects.DeleteContents(true);
-    wxDDEClientObjects.Clear();
-    wxDDEClientObjects.DeleteContents(false);
-
-    wxDDEServerObjects.DeleteContents(true);
-    wxDDEServerObjects.Clear();
-    wxDDEServerObjects.DeleteContents(false);
+    WX_CLEAR_LIST(wxDDEClientList, wxDDEClientObjects);
+    WX_CLEAR_LIST(wxDDEServerList, wxDDEServerObjects);
 
-    wxAtomTable.Clear();
+    wxAtomTable.clear();
 
     if ( DDEIdInst != 0 )
@@ -218,5 +215,5 @@
 static wxDDEConnection *DDEFindConnection(HCONV hConv)
 {
-    wxDDEServerList::Node *serverNode = wxDDEServerObjects.GetFirst();
+    wxDDEServerList::compatibility_iterator serverNode = wxDDEServerObjects.GetFirst();
     wxDDEConnection *found = NULL;
     while (serverNode && !found)
@@ -232,5 +229,5 @@
     }
 
-    wxDDEClientList::Node *clientNode = wxDDEClientObjects.GetFirst();
+    wxDDEClientList::compatibility_iterator clientNode = wxDDEClientObjects.GetFirst();
     while (clientNode && !found)
     {
@@ -245,5 +242,5 @@
 static void DDEDeleteConnection(HCONV hConv)
 {
-    wxDDEServerList::Node *serverNode = wxDDEServerObjects.GetFirst();
+    wxDDEServerList::compatibility_iterator serverNode = wxDDEServerObjects.GetFirst();
     bool found = false;
     while (serverNode && !found)
@@ -258,5 +255,5 @@
     }
 
-    wxDDEClientList::Node *clientNode = wxDDEClientObjects.GetFirst();
+    wxDDEClientList::compatibility_iterator clientNode = wxDDEClientObjects.GetFirst();
     while (clientNode && !found)
     {
@@ -270,5 +267,5 @@
 static wxDDEServer *DDEFindServer(const wxString& s)
 {
-    wxDDEServerList::Node *node = wxDDEServerObjects.GetFirst();
+    wxDDEServerList::compatibility_iterator node = wxDDEServerObjects.GetFirst();
     wxDDEServer *found = NULL;
     while (node && !found)
@@ -329,9 +326,9 @@
     wxDDEServerObjects.DeleteObject(this);
 
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
     while (node)
     {
         wxDDEConnection *connection = node->GetData();
-        wxDDEConnectionList::Node *next = node->GetNext();
+        wxDDEConnectionList::compatibility_iterator next = node->GetNext();
         connection->SetConnected(false);
         connection->OnDisconnect(); // May delete the node implicitly
@@ -344,5 +341,5 @@
     {
         wxDDEConnection *connection = node->GetData();
-        wxDDEConnectionList::Node *next = node->GetNext();
+        wxDDEConnectionList::compatibility_iterator next = node->GetNext();
         delete connection;
         node = next;
@@ -357,5 +354,5 @@
 wxDDEConnection *wxDDEServer::FindConnection(WXHCONV conv)
 {
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
@@ -372,13 +369,12 @@
 bool wxDDEServer::DeleteConnection(WXHCONV conv)
 {
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
-    bool found = false;
-    while (node && !found)
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
+    while (node)
     {
         wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
         {
-            found = true;
-            delete node;
+            m_connections.Erase(node);
+            return true;
         }
         else
@@ -387,5 +383,5 @@
         }
     }
-    return found;
+    return false;
 }
 
@@ -404,5 +400,5 @@
 {
     wxDDEClientObjects.DeleteObject(this);
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
     while (node)
     {
@@ -452,5 +448,5 @@
 wxDDEConnection *wxDDEClient::FindConnection(WXHCONV conv)
 {
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
@@ -467,17 +463,16 @@
 bool wxDDEClient::DeleteConnection(WXHCONV conv)
 {
-    wxDDEConnectionList::Node *node = m_connections.GetFirst();
-    bool found = false;
-    while (node && !found)
+    wxDDEConnectionList::compatibility_iterator node = m_connections.GetFirst();
+    while (node)
     {
         wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
         {
-            found = true;
-            delete node;
+            m_connections.Erase(node);
+            return true;
         }
         else node = node->GetNext();
     }
-    return found;
+    return false;
 }
 
@@ -935,21 +930,19 @@
 
 // Atom table stuff
-static HSZ DDEAddAtom(const wxString& string)
+static HSZ DDEAddAtom(const wxString& str)
 {
-    HSZ atom = DDEAtomFromString(string);
-    wxAtomTable.Append(string, (wxObject *)atom);
+    HSZ atom = DDEAtomFromString(str);
+    wxAtomTable[str] = atom;
     return atom;
 }
 
-static HSZ DDEGetAtom(const wxString& string)
+static HSZ DDEGetAtom(const wxString& str)
 {
-    wxNode *node = wxAtomTable.Find(string);
-    if (node)
-        return (HSZ)node->GetData();
-    else
-    {
-        DDEAddAtom(string);
-        return (HSZ)(wxAtomTable.Find(string)->GetData());
-    }
+    wxAtomMap::iterator it = wxAtomTable.find(str);
+
+    if (it != wxAtomTable.end())
+        return it->second;
+
+    return DDEAddAtom(str);
 }
 
Index: src/msw/volume.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/volume.cpp,v
retrieving revision 1.18
diff -u -2 -r1.18 volume.cpp
--- src/msw/volume.cpp	2003/07/03 21:59:55	1.18
+++ src/msw/volume.cpp	2003/07/04 19:10:43
@@ -31,5 +31,7 @@
 
 #ifndef WX_PRECOMP
-    #include "wx/icon.h"
+    #if wxUSE_GUI
+        #include "wx/icon.h"
+    #endif
     #include "wx/intl.h"
 #endif // WX_PRECOMP
@@ -319,5 +321,5 @@
     //----------------------------------------------
     BuildListFromNN(list, pResSrc, flagsSet, flagsUnset);
-    list.Sort(CompareFcn);
+    wxArrayString_Sort(list, CompareFcn);
 
     //-------------------------------------------------------------------------
@@ -331,5 +333,5 @@
         wxArrayString mounted;
         BuildListFromNN(mounted, pResSrc, flagsSet | wxFS_VOL_MOUNTED, flagsUnset & ~wxFS_VOL_MOUNTED);
-        mounted.Sort(CompareFcn);
+        wxArrayString_Sort(mounted, CompareFcn);
 
         // apply list from bottom to top to preserve indexes if removing items.
Index: src/unix/mimetype.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/unix/mimetype.cpp,v
retrieving revision 1.36
diff -u -2 -r1.36 mimetype.cpp
--- src/unix/mimetype.cpp	2003/06/25 00:10:07	1.36
+++ src/unix/mimetype.cpp	2003/07/04 19:10:51
@@ -1822,5 +1822,6 @@
 
         // change nIndex so we can use it below to add the extensions
-        nIndex = m_aExtensions.Add(wxEmptyString);
+        nIndex = m_aExtensions.GetCount();
+        m_aExtensions.Add(wxEmptyString);
 
         m_aDescriptions.Add(strDesc);

 	  	 

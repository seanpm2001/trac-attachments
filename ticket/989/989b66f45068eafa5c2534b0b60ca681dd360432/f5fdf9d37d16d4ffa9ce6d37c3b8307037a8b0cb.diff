--- C:/Users/T29D0~1.TIS/AppData/Local/Temp/introspect.py-revBASE.svn001.tmp.py	ven lug  5 22:54:22 2013
+++ C:/Users/t.tissino/git/Phoenix/wx/py/introspect.py	lun set  9 11:04:30 2013
@@ -8,9 +8,10 @@ __revision__ = "$Revision: 74364 $"[11:-2]
 import sys
 import inspect
 import tokenize
-import types
+#import types
+from operator import methodcaller
 import wx
-from wx.lib.six import StringIO, PY3
+from wx.lib.six import BytesIO, PY3
 
 def getAutoCompleteList(command='', locals=None, includeMagic=1, 
                         includeSingle=1, includeDouble=1):
@@ -35,7 +36,7 @@ def getAutoCompleteList(command='', locals=None, i
 def getAttributeNames(object, includeMagic=1, includeSingle=1,
                       includeDouble=1):
     """Return list of unique attributes, including inherited, for object."""
-    attributes = []
+    attributes = set()
     dict = {}
     if not hasattrAlwaysReturnsTrue(object):
         # Add some attributes that don't always get picked up.
@@ -42,10 +43,10 @@ def getAttributeNames(object, includeMagic=1, incl
         special_attrs = ['__bases__', '__class__', '__dict__', '__name__',
                          'func_closure', 'func_code', 'func_defaults',
                          'func_dict', 'func_doc', 'func_globals', 'func_name']
-        attributes += [attr for attr in special_attrs \
-                       if hasattr(object, attr)]
+        attributes.update(attr for attr in special_attrs \
+                       if hasattr(object, attr))
     if includeMagic:
-        try: attributes += object._getAttributeNames()
+        try: attributes.update(object._getAttributeNames())
         except: pass
         # Special code to allow traits to be caught by autocomplete
         if hasattr(object,'trait_get'):
@@ -53,13 +54,13 @@ def getAttributeNames(object, includeMagic=1, incl
                 for i in object.trait_get().keys():
                     if i not in attributes:
                         if hasattr(object, i):
-                            attributes += i
+                            attributes.add(i)
             except:
                 pass
     # Get all attribute names.
     str_type = str(type(object))
     if str_type == "<type 'array'>":
-        attributes += dir(object)
+        attributes.update(dir(object))
     else:
         attrdict = getAllAttributeNames(object)
         # Store the object's dir.
@@ -69,25 +70,18 @@ def getAttributeNames(object, includeMagic=1, incl
             # attributes of the object.  This is very handy for objects
             # whose attributes are lazily evaluated.
             if type(object).__name__ == obj_type_name and technique == 'dir':
-                attributes += attrlist
+                attributes.update(attrlist)
             else:
-                attributes += [attr for attr in attrlist \
-                               if attr not in object_dir and hasattr(object, attr)]
+                attributes.update(attr for attr in attrlist \
+                               if attr not in object_dir and hasattr(object, attr))
             
-    # Remove duplicates from the attribute list.
-    for item in attributes:
-        dict[item] = None
-    attributes = dict.keys()
     # new-style swig wrappings can result in non-string attributes
     # e.g. ITK http://www.itk.org/
     attributes = [attribute for attribute in attributes \
-                  if type(attribute) == str]
-    attributes.sort(lambda x, y: cmp(x.upper(), y.upper()))
-    if not includeSingle:
-        attributes = filter(lambda item: item[0]!='_' \
-                            or item[1:2]=='_', attributes)
-    if not includeDouble:
-        attributes = filter(lambda item: item[:2]!='__', attributes)
+                  if type(attribute) == str and \
+                  (includeSingle or item[0]!='_'  or item[1:2]=='_') and \
+                  (includeDouble or item[:2]!='__')]
+    attributes.sort(key=methodcaller('upper'))
     return attributes
 
 def hasattrAlwaysReturnsTrue(object):
@@ -141,9 +135,9 @@ def getAllAttributeNames(object):
     except:  # Must catch all because object might have __getattr__.
         pass
     else:
-        if isinstance(bases, types.TupleType):
+        if isinstance(bases, tuple):
             for base in bases:
-                if type(base) is types.TypeType:
+                if type(base) is type:
                     # Break a circular reference. Happens in Python 2.2.
                     pass
                 else:
@@ -177,7 +171,7 @@ def getCallTip(command='', locals=None):
         pass
     elif inspect.isfunction(object):
         # tip1 is a string like: "getCallTip(command='', locals=None)"
-        argspec = apply(inspect.formatargspec, inspect.getargspec(object))
+        argspec = inspect.formatargspec(*inspect.getargspec(object))
         if dropSelf:
             # The first parameter to a method is a reference to an
             # instance, usually coded as "self", and is usually passed
@@ -298,15 +292,15 @@ def getRoot(command, terminator=None):
 
 def getTokens(command):
     """Return list of token tuples for command."""
-
+    
     # In case the command is unicode try encoding it
     if isinstance(command, str):
         try:
-            command = command.encode('utf-8')
+            command = bytes(command, 'utf-8') if PY3 else command.encode('utf-8')
         except UnicodeEncodeError:
             pass # otherwise leave it alone
                 
-    f = StringIO(command)
+    f = BytesIO(command)
     # tokens is a list of token tuples, each looking like: 
     # (type, string, (srow, scol), (erow, ecol), line)
     tokens = []
@@ -325,7 +319,9 @@ def getTokens(command):
                 tokens.append(args)
             tokenize.tokenize_loop(f.readline, eater)
         else:
-            tokenize.tokenize(f.readline)
+            for token in tokenize.tokenize(f.readline):
+                if token.type != tokenize.ENCODING:
+                    tokens.append(token)
     except tokenize.TokenError:
         # This is due to a premature EOF, which we expect since we are
         # feeding in fragments of Python code.

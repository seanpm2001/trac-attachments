Index: include/wx/aui/tabmdi.h
===================================================================
--- include/wx/aui/tabmdi.h	(revision 72363)
+++ include/wx/aui/tabmdi.h	(working copy)
@@ -85,7 +85,6 @@
 
 protected:
     wxAuiMDIClientWindow*   m_pClientWindow;
-    wxAuiMDIChildFrame*     m_pActiveChild;
     wxEvent*                m_pLastEvt;
 
 #if wxUSE_MENUS
@@ -250,6 +249,11 @@
                               long style = wxVSCROLL | wxHSCROLL);
 
     virtual int SetSelection(size_t page);
+    virtual wxAuiMDIChildFrame* GetActiveChild();
+    virtual void SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
+    {
+        SetSelection(GetPageIndex(pChildFrame));
+    }
 
 protected:
 
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 72363)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -80,6 +80,8 @@
 
 wxAuiMDIParentFrame::~wxAuiMDIParentFrame()
 {
+    // Avoid having GetActiveChild() called after m_pClientWindow is destroyed
+    SendDestroyEvent();
     // Make sure the client window is destructed before the menu bars are!
     wxDELETE(m_pClientWindow);
 
@@ -212,7 +214,8 @@
 
     // let the active child (if any) process the event first.
     bool res = false;
-    if (m_pActiveChild &&
+    wxAuiMDIChildFrame* pActiveChild = GetActiveChild();
+    if (pActiveChild &&
         event.IsCommandEvent() &&
         event.GetEventObject() != m_pClientWindow &&
            !(event.GetEventType() == wxEVT_ACTIVATE ||
@@ -223,7 +226,7 @@
              event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
        )
     {
-        res = m_pActiveChild->GetEventHandler()->ProcessEvent(event);
+        res = pActiveChild->GetEventHandler()->ProcessEvent(event);
     }
 
     if (!res)
@@ -241,12 +244,15 @@
 
 wxAuiMDIChildFrame *wxAuiMDIParentFrame::GetActiveChild() const
 {
-    return m_pActiveChild;
+    return GetClientWindow()->GetActiveChild();
 }
 
 void wxAuiMDIParentFrame::SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
 {
-    m_pActiveChild = pChildFrame;
+    if (GetClientWindow()->GetActiveChild() != pChildFrame)
+    {
+        GetClientWindow()->SetActiveChild(pChildFrame);
+    }
 }
 
 wxAuiMDIClientWindow *wxAuiMDIParentFrame::GetClientWindow() const
@@ -287,7 +293,6 @@
 {
     m_pLastEvt = NULL;
     m_pClientWindow = NULL;
-    m_pActiveChild = NULL;
 #if wxUSE_MENUS
     m_pWindowMenu = NULL;
     m_pMyMenuBar = NULL;
@@ -327,18 +332,24 @@
     switch (event.GetId())
     {
         case wxWINDOWCLOSE:
-            if (m_pActiveChild)
-                m_pActiveChild->Close();
+        {
+            wxAuiMDIChildFrame* pActiveChild = GetActiveChild();
+            if (pActiveChild)
+                pActiveChild->Close();
             break;
+        }
         case wxWINDOWCLOSEALL:
-            while (m_pActiveChild)
+        {
+            wxAuiMDIChildFrame* pActiveChild;
+            while ((pActiveChild = GetActiveChild()) != NULL)
             {
-                if (!m_pActiveChild->Close())
+                if (!pActiveChild->Close())
                 {
                     return; // failure
                 }
             }
             break;
+        }
         case wxWINDOWNEXT:
             ActivateNext();
             break;
@@ -497,12 +508,22 @@
 
     SetMDIParentFrame(parent);
 
-    // this is the currently active child
-    parent->SetActiveChild(this);
-
     m_title = title;
 
     pClientWindow->AddPage(this, title, m_activateOnCreate);
+    // The original code sometimes created a strange state where
+    // pClientWindow and parent had different ideas about whether
+    // this was active/selected.  When working on this problem,
+    // I wanted to add a check for whether pClientWindow was
+    // obeying m_activateOnCreate, and put a wxASSERT here.  I
+    // discovered that pClientWindow does NOT always obey
+    // m_activateOnCreate:  pClientWindow ignores
+    // m_activateOnCreate for the first window and activates it
+    // unconditionally.  This wxASSERT captures the "known"
+    // behavior in case it is unintentionally changed.
+    bool shouldActivate = m_activateOnCreate || pClientWindow->GetPageCount() == 1;
+    bool didActivate = parent->GetActiveChild() == this;
+    wxASSERT(didActivate == shouldActivate);
     pClientWindow->Refresh();
 
     return true;
@@ -523,7 +544,6 @@
         event.SetEventObject(this);
         GetEventHandler()->ProcessEvent(event);
 
-        pParentFrame->SetActiveChild(NULL);
         pParentFrame->SetChildMenuBar(NULL);
     }
 
@@ -698,6 +718,15 @@
 
 bool wxAuiMDIChildFrame::Show(bool show)
 {
+    // wxAuiMDIChildFrame uses m_activateOnCreate only to decide whether
+    // to activate the frame when it is created.  After Create() is
+    // called, m_activateOnCreate will never be read again.  Therefore,
+    // calling this function after Create() is pointless.  Also, the way
+    // this Show(true) behaves is very different from typical windows,
+    // so it seems likely to me that someone calling Show(true) after
+    // creating the window is unaware of this difference, and should
+    // instead call Activate() to make this the current window.
+    wxCHECK_MSG(!GetHandle(), false, "This function is only useful before Create().  Do you mean Activate()?");
     m_activateOnCreate = show;
 
     // do nothing
@@ -787,6 +816,13 @@
     return wxAuiNotebook::SetSelection(nPage);
 }
 
+wxAuiMDIChildFrame* wxAuiMDIClientWindow::GetActiveChild()
+{
+    int sel = GetSelection();
+    wxWindow* pWnd = sel != wxNOT_FOUND ? GetPage(sel) : NULL;
+    return pWnd ? wxStaticCast(pWnd, wxAuiMDIChildFrame) : NULL;
+}
+
 void wxAuiMDIClientWindow::PageChanged(int old_selection, int new_selection)
 {
     // don't do anything if the page doesn't actually change

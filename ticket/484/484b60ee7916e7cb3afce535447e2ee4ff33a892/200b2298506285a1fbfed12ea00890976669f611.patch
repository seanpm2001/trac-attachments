Index: wxWindows/docs/latex/wx/db.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/db.tex,v
retrieving revision 1.27
diff -b -u -2 -r1.27 db.tex
--- wxWindows/docs/latex/wx/db.tex	2002/07/12 23:25:14	1.27
+++ wxWindows/docs/latex/wx/db.tex	2002/11/14 08:33:28
@@ -3931,2 +3931,371 @@
 the constructor automatically.
 
+\section{\class{wxDbGridColInfo}}\label{wxdbgridcolinfo}
+
+You need this class to use a grid for displaying recs in a database table.
+Use this class to define columns to be shown, names of the columns,
+order and type of data. 
+
+See the database grid example in \helpref{wxDbGridTableBase}{wxdbgridtablebase} for
+an introduction to using the wxDbGrid classes.
+
+\wxheading{Include files}
+
+<wx/dbgrid.h>
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+\membersection{wxDbGridColInfo::wxDbGridColInfo}\label{wxdbgridcolinfo}
+
+\func{}{wxDbGridColInfo}{\param{int }{colNo}, \param{wxString }{type},
+  \param{wxString }{title}, \param{wxDbGridColInfo *}{next}}
+
+Default constructor. See the database grid example in \helpref{wxDbGridTableBase}{wxdbgridtablebase} to
+see the two ways for adding columns.
+
+
+\wxheading{Parameters}
+
+\docparam{colNo}{Column number (first column is 0).}
+\docparam{type}{Column type (search in wxGrid for wxGRID_VALUE_STRING and related)}
+\docparam{title}{The name of the column as it will be displayed on the grid,
+ not the real name in the database table.}
+\docparam{next}{A pointer to the next wxDbGridColInfo structure if using one-step
+construction. NULL if no other value will be, or if using two steps construction.}
+See the database grid example in \helpref{wxDbGridTableBase}{wxdbgridtablebase} to
+see the two ways for adding columns.
+
+\membersection{wxDbGridColInfo::\destruct{wxDbGridColInfo}}
+
+\func{}{\destruct{wxDbGridColInfo}}{}
+
+Destructor.
+
+\membersection{wxDbGridColInfo::AddColInfo}\label{wxdbgridcolinfoaddcolinfo}
+
+\func{void}{AddColInfo}{\param{int }{colNo},
+\param{wxString }{type}, \param{wxString }{title}}
+
+Use this member function for adding columns to the grid. See the database
+grid example in \helpref{wxDbGridTableBase}{wxdbgridtablebase} to
+see the two ways for adding columns.
+
+\wxheading{Parameters}
+
+\docparam{colNo}{Column number in the grid (0 is the first).}
+\docparam{type}{The type of value in this column. Search in wxGrid for wxGRID_VALUE_STRING and related}
+\docparam{name}{The name showed for this column, not the real name in the database table.}
+
+\wxheading{Remarks}
+
+As wxDbTable must be defined with the same columns, in the same order, you just
+have to match the column name and type with column number.
+
+See the example at \helpref{wxDbGridColInfo::wxDbGridColInfo}{wxdbgridcolinfo}.
+
+\section{\class{wxDbGridTableBase}}\label{wxdbgridtablebase}
+
+You can see a database table in a grid using this class.
+
+Yuo should take care of using virtual columns, because aren't fully supported at this time, and
+many members returns FALSE if you try to use them.
+
+\wxheading{Example}
+
+\begin{verbatim}
+	// First step, let's define wxDbTable
+	int numColumns = 2;
+	wxDbTable *table = new wxDbTable (db, tblName, numColumns);
+	int int_var;
+	wxChar string_name[255];
+	table->SetColDef (0, "column 0", DB_DATA_TYPE_INTEGER, &int_var,
+			SQL_C_LONG, sizeof(int_var), TRUE);
+	table->SetColDef (1, "column 1", DB_DATA_TYPE_VARCHAR, &string_name,
+			SQL_C_LONG, sizeof(string_name), FALSE);
+
+    // now let's define columns in the grid
+
+    // first way to do it
+    wxDbGridColInfo *columns;
+    columns = new wxDbGridColInfo(0, wxGRID_VALUE_LONG, "first column",
+              new wxDbGridColInfo(1, wxGRID_VALUE_STRING, "second column",
+              NULL);
+
+    // second way to do it
+    wxDbGridColInfo *columns;
+    // first column is special
+    columns = new wxDbGridColInfo(0, wxGRID_VALUE_LONG, "first column", NULL);
+    // all the rest
+    columns->AddColInfo (1, wxGRID_VALUE_STRING, "second column");
+
+    // secon way is better when columns are not known at compile time
+
+    // now, let's open the table and make a Query()
+    table->Open();
+    // this step is very important
+    table->SetRowMode (wxDbTable::WX_ROW_MODE_QUERY);
+    // in the grid we will see only the rows of the result query
+    m_dbTable->Query();
+
+    wxDbGridTableBase *dbgrid = new wxDbGridTableBase(table, columns, wxUSE_QUERY, TRUE);
+    delete cols;  // not needed anymore
+    wxGrid *grid = new wxGrid ( ... );
+    grid->SetTable(dbgrid, TRUE);
+    grid->Fit();
+\end{verbatim}
+
+\wxheading{Include files}
+
+<wx/dbgrid.h>
+
+\wxheading{Helper classes and data structures}
+
+\membersection{wxDbGridTableBase::wxDbGridTableBase}\label{wxdbgridtablebaseconstr}
+
+\func{}{wxDbGridTableBase}{\param{wxDbTable *}{tab}, \param{wxDbGridColInfo *}{ColInfo},
+  \param{int }{count = wxUSE_QUERY}, \param{bool }{takeOwnership = TRUE}}
+
+Constructor.
+
+\wxheading{Parameters}
+
+\docparam{tab}{ The database table you want to display. Must be opened and queried before display the grid.
+See the example \helpref{above}{wxdbgridtablebase}.}
+\docparam{ColInfo}{ Columns titles, and other values. See \helpref{wxDbGridColInfo}{wxdbgridcolinfo}.}
+\docparam{count}{You can use a query result set (wxUSE_QUERY or you can fix the total number
+of rows (count >= 0) to display.}
+\docparam{takeOwnership}{ If TRUE, this class deletes wxDbTable, if FALSE application must
+take care of deleting it.}
+
+\membersection{wxDbGridTableBase::GetNumberRows}\label{wxdbgridtablebasegetnumberrows}
+
+\func{int}{GetNumberRows}{}
+
+Returns number of rows.
+
+\membersection{wxDbGridTableBase::GetNumberCols}\label{wxdbgridtablebasegetnumbercols}
+
+\func{int}{GetNumberCols}{}
+
+Returns number of columns.
+
+\membersection{wxDbGridTableBase::GetValue}\label{wxdbgridtablebasegetvalue}
+
+\func{wxString}{GetValue}{\param{int }{row}, \param{int }{col}}
+
+Returns the string stored in the requested cell.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to know about.}
+\docparam{col}{ Column you want to know about.}
+
+\membersection{wxDbGridTableBase::GetTypeName}\label{wxdbgridtablebasegettypename}
+
+\func{wxString}{GetTypeName}{\param{int }{row}, \param{int }{col}}
+
+Returns a string containing the type of data in requested cell:
+i.e. wxGRID_VALUE_STRING if cell contains a SQL_C_CHAR type row.
+ Search in wxGrid for wxGRID_VALUE_STRING and related.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to know about.}
+\docparam{col}{ Column you want to know about.}
+
+\membersection{wxDbGridTableBase::GetValueAsLong}\label{wxdbgridtablebasegevalueaslong}
+
+\func{long}{GetValueAsLong}{\param{int }{row}, \param{int }{col}}
+
+Returns the number, as a long value, stored in the cell requested, or 0 if error.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to know about.}
+\docparam{col}{ Column you want to know about.}
+
+\membersection{wxDbGridTableBase::GetValueAsDouble}\label{wxdbgridtablebasegevalueasdouble}
+
+\func{double}{GetValueAsDouble}{\param{int }{row}, \param{int }{col}}
+
+Returns the number, as a double value, stored in the cell requested, or 0.0 if error.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to know about.}
+\docparam{col}{ Column you want to know about.}
+
+\membersection{wxDbGridTableBase::GetValueAsBool}\label{wxdbgridtablebasegevalueasbool}
+
+\func{bool}{GetValueAsBool}{\param{int }{row}, \param{int }{col}}
+
+Returns the boolean value (TRUE or FALSE) in the cell requested.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to know about.}
+\docparam{col}{ Column you want to know about.}
+
+\membersection{wxDbGridTableBase::ValidateRow}\label{wxdbgridtablebasevalidate}
+
+\func{void}{ValidateRow}{\param{int }{row}}
+
+Move the database table pointer to the row. It is not much for use it, but is usually
+used by the members of the class.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row where validation must be done. }
+
+\membersection{wxDbGridTableBase::GetColLabelValue}\label{wxdbgridtablebasegetcollabelvalue}
+
+\func{wxString}{GetColLabelValue}{\param{int }{col}}
+
+Returns the name of the column or an empty string if an error ocurred.
+
+\wxheading{Parameters}
+
+\docparam{col}{ Column you want to know about. }
+
+\membersection{wxDbGridTableBase::UpdateRow}\label{wxdbgridtablebaseupdaterow}
+
+\func{bool}{UpdateRow}{\param{int }{row}}
+
+Returns TRUE if update sucessful, FALSE otherwise.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to update. }
+
+\membersection{wxDbGridTableBase::CanHaveAttributes}\label{wxdbgridtablebasecanhaveattributes}
+
+\func{bool}{CanHaveAttributes}{}
+
+Returns TRUE if it is posible to use attributes.
+
+\membersection{wxDbGridTableBase::SetValue}\label{wxdbgridtablebasesetvalue}
+
+\func{void}{SetValue}{\param{int }{row},\param{int }{col}, \param{const wxString &}{value}}
+
+Writes a string in a cell.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row where write at. }
+\docparam{col}{ Column where write at. }
+\docparam{value}{ String to write. }
+
+\membersection{wxDbGridTableBase::SetValueAsLong}\label{wxdbgridtablebasesetvalueaslong}
+
+\func{void}{SetValueAsLong}{\param{int }{row},\param{int }{col}, \param{long }{value}}
+
+Writes a number of type long in a cell.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row where write at. }
+\docparam{col}{ Column where write at. }
+\docparam{value}{ Number to write. }
+
+\membersection{wxDbGridTableBase::SetValueAsDouble}\label{wxdbgridtablebasesetvalueasdouble}
+
+\func{void}{SetValueAsDouble}{\param{int }{row},\param{int }{col}, \param{double }{value}}
+
+Writes a number of type long in a cell.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row where write at. }
+\docparam{col}{ Column where write at. }
+\docparam{value}{ Number to write. }
+
+\membersection{wxDbGridTableBase::SetValueAsBool}\label{wxdbgridtablebasesetvalueasbool}
+
+\func{void}{SetValueAsBool}{\param{int }{row},\param{int }{col}, \param{bool }{value}}
+
+Writes a boolean value (TRUE or FALSE) in a cell.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row where write at. }
+\docparam{col}{ Column where write at. }
+\docparam{value}{ Boolean value to write. }
+
+\membersection{wxDbGridTableBase::CanGetValueAs}\label{wxdbgridtablebasecangetvalueas}
+
+\func{bool}{CanGetValueAs}{\param{int }{row},\param{int }{col}, \param{const wxString &}{typeName}}
+
+Checks for the type of value stored at cell (row,col). Returns TRUE if cell type is the same type (or compatible)
+ to typeName, FALSE if not. More exactly, returns TRUE if you can succesfully get cell value as a
+ typeName cell value.
+
+ It returns FALSE too if is a virtual column, as virtual columns are not totally supported yet.
+
+ Search in wxGrid for wxGRID_VALUE_STRING and related.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to check. }
+\docparam{col}{ Column you want to check. }
+\docparam{typeName}{ Type of data. }
+
+
+\membersection{wxDbGridTableBase::CanSetValueAs}\label{wxdbgridtablebasecansetvalueas}
+
+\func{bool}{CanSetValueAs}{\param{int }{row},\param{int }{col}, \param{const wxString &}{typeName}}
+
+Checks for the type of value stored at cell (row,col). Returns TRUE if cell type is the same type (or compatible)
+ to typeName, FALSE if not. More exactly, returns TRUE if you can succesfully set cell value as a
+ typeName cell value.
+
+ It returns FALSE too if is a virtual column, as virtual columns are not totally supported yet.
+
+ Search in wxGrid for wxGRID_VALUE_STRING and related.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you want to check. }
+\docparam{col}{ Column you want to check. }
+\docparam{typeName}{ Type of data. }
+
+\membersection{wxDbGridTableBase::GetValueAsCustom}\label{wxdbgridtablebasegetvalueascustom}
+
+\func{void *}{GetValueAsCustom}{\param{int }{row},\param{int }{col}, \param{const wxString &}{typeName}}
+
+Returns a pointer to the value stored in the cell requested, or NULL if error.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you are interested in. }
+\docparam{col}{ Column you are interested in. }
+\docparam{typeName}{ Type of data. }
+
+\membersection{wxDbGridTableBase::SetValueAsCustom}\label{wxdbgridtablebasesetvalueascustom}
+
+\func{void}{SetValueAsCustom}{\param{int }{row},\param{int }{col}, \param{const wxString &}{typeName},
+ \param{void *}{value}}
+
+Set the value of the cell (row,col) taking into account typeName for the type of value.
+
+\wxheading{Parameters}
+
+\docparam{row}{ Row you are interested in. }
+\docparam{col}{ Column you are interested in. }
+\docparam{typeName}{ Type of data. }
+\docparam{value}{ Value you want to store. }
+
+\membersection{wxDbGridTableBase::AssignDbTable}\label{wxdbgridtablebaseassigndbtable}
+
+\func{bool}{AssignDbTable}{\param{wxDbTable *}{tab},\param{int }{count = wxUSE_QUERY},
+\param{bool }{takeOwnership = TRUE}}
+
+Resets the grid for using with a new database table, but using the same columns definition.
+This can be usefull when re-quering the database and want to see the changes. 
+
+\wxheading{Parameters}
+
+\docparam{tab}{ Database table you want to assign to the grid. }
+\docparam{count}{ Number of rows you want to show or wxUSE_QUERY for using a query. }
+\docparam{takeOwnership}{ If FALSE, user must take care of deleting tab after deleting
+the wxDbGridTableBase. If TRUE, deletion is made by destructor class. }
+

 	  	 

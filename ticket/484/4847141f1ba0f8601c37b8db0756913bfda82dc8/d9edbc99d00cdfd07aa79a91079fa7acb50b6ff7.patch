diff -ru2 -x*.dsp -x*.dsw -x*Debug* -x*Release* -x*.ncb -x*.plg -x*.dsp -x*.dsw -xsamples -xCVS -x*.dll -x*.ilk -x*.exp -x*.lib -x*.pdb -xlib -x*.opt -xsetup.h wxWindows-20030516.orig/contrib/include/wx/fl/toolwnd.h wxWindows-20030516.mod/contrib/include/wx/fl/toolwnd.h
--- wxWindows-20030516.orig/contrib/include/wx/fl/toolwnd.h	Wed Dec 04 12:52:54 2002
+++ wxWindows-20030516.mod/contrib/include/wx/fl/toolwnd.h	Thu May 22 22:45:43 2003
@@ -88,5 +88,5 @@
 
         // Helper function.
-    void AdjustRectPos( const wxRect& original, const wxSize& newDim, wxRect& newRect );
+    wxRect AdjustRectPos( const wxRect& original, const wxSize& newDim );
 
         // Helper function.
@@ -147,7 +147,4 @@
     virtual void OnMiniButtonClicked( int btnIdx ) {}
 
-        // Handles clicking on the title. By default, does nothing.
-    virtual bool HandleTitleClick( wxMouseEvent& event ) { return FALSE; }
-
     DECLARE_EVENT_TABLE()
 };
@@ -255,4 +252,25 @@
 
 /*
+INTERNAL_HIT_CODES is a platform agnostic enum for non-client areas.
+*/
+
+enum INTERNAL_HIT_CODES
+{
+    HITS_WND_NOTHING,
+    HITS_WND_CLIENT,
+    HITS_WND_TITLE,
+
+    HITS_WND_LEFT_EDGE,
+    HITS_WND_RIGHT_EDGE,
+    HITS_WND_TOP_EDGE,
+    HITS_WND_BOTTOM_EDGE,
+
+    HITS_WND_TOP_LEFT_CORNER,
+    HITS_WND_BOTTOM_RIGHT_CORNER,
+    HITS_WND_TOP_RIGHT_CORNER,
+    HITS_WND_BOTTOM_LEFT_CORNER
+};
+
+/*
 cbFloatedBarWindow is a kind of wxToolWindow,
 implementing floating toolbars.
@@ -293,9 +311,17 @@
     virtual void OnMiniButtonClicked( int btnIdx );
 
-        // Overridden function responding to mouse button clicks on the titlebar.
-    virtual bool HandleTitleClick( wxMouseEvent& event );
-
         // Responds to double-click mouse events.
     void OnDblClick( wxMouseEvent& event );
+
+        // Responds to maximize events by redocking the floating toolbar.
+    void OnMaximize( wxMaximizeEvent& event );
+
+        // Alters the rect to the closest acceptable rect during resizing.
+    void SuggestRect(INTERNAL_HIT_CODES& hitTest, wxRect& rect);
+
+        // Handles MS Windows specific WM_SIZING message.
+#ifdef __WXMSW__
+    long MSWWindowProc(WXUINT message, WXWPARAM wParam, WXLPARAM lParam);
+#endif
 
     DECLARE_EVENT_TABLE()
diff -ru2 -x*.dsp -x*.dsw -x*Debug* -x*Release* -x*.ncb -x*.plg -x*.dsp -x*.dsw -xsamples -xCVS -x*.dll -x*.ilk -x*.exp -x*.lib -x*.pdb -xlib -x*.opt -xsetup.h wxWindows-20030516.orig/contrib/src/fl/controlbar.cpp wxWindows-20030516.mod/contrib/src/fl/controlbar.cpp
--- wxWindows-20030516.orig/contrib/src/fl/controlbar.cpp	Wed Apr 02 13:11:28 2003
+++ wxWindows-20030516.mod/contrib/src/fl/controlbar.cpp	Tue May 20 23:07:26 2003
@@ -898,4 +898,5 @@
                           wxPoint( 50,50 ),
                           wxSize ( 0, 0  ),
+                          wxDEFAULT_FRAME_STYLE | 
                           wxFRAME_FLOAT_ON_PARENT |
                           wxFRAME_TOOL_WINDOW |
diff -ru2 -x*.dsp -x*.dsw -x*Debug* -x*Release* -x*.ncb -x*.plg -x*.dsp -x*.dsw -xsamples -xCVS -x*.dll -x*.ilk -x*.exp -x*.lib -x*.pdb -xlib -x*.opt -xsetup.h wxWindows-20030516.orig/contrib/src/fl/dyntbar.cpp wxWindows-20030516.mod/contrib/src/fl/dyntbar.cpp
--- wxWindows-20030516.orig/contrib/src/fl/dyntbar.cpp	Wed Apr 02 10:10:26 2003
+++ wxWindows-20030516.mod/contrib/src/fl/dyntbar.cpp	Thu May 22 21:35:46 2003
@@ -518,4 +518,5 @@
     int curY  = 0;
     int nRows = 0;
+    int maxItemsInRow = 0;
 
     size_t i = 0;
@@ -558,4 +559,84 @@
 
         } while( i < items.Count() );
+
+        if (maxItemsInRow < itemsInRow)
+        {
+            maxItemsInRow = itemsInRow;
+        }
+
+        curY += height;
+
+        maxWidth = wxMax( maxWidth, curX );
+    }
+
+    resultingDim.x = maxWidth;
+    resultingDim.y = curY;
+
+    // recalculate to ensure that separators are oriented the right way
+
+    maxWidth = 0;
+    curY  = 0;
+    nRows = 0;
+    i = 0;
+
+    while( i < items.Count() )
+    {
+        int curX   = 0;
+        int height = 0;
+        // int nItems = 0;
+
+        // int firstItem  = i;
+        int itemsInRow = 0;
+
+        if ( nRows > 0 )
+            curY += vertGap;
+
+        // step #1 - arrange horizontal positions of items in the row
+
+        do
+        {
+            if ( itemsInRow > 0 )
+                curX += horizGap;
+
+            wxRect& r = items[i]->mRect;
+            int savedWidth = r.width;
+            int savedHeight = r.height;
+            if (items[i]->mIsSeparator)
+            {
+                if (maxItemsInRow == 1)
+                {
+                    r.height = 8;
+                }
+                else
+                {
+                    r.width = 8;
+                }
+            }
+
+            if ( curX + r.width > parentDim.x )
+            {
+                r.width = savedWidth;
+                r.height = savedHeight;
+                if ( itemsInRow > 0 ) 
+                    break;
+            }
+            r.x = curX;
+            r.y = curY;
+
+            curX += r.width;
+
+            height = wxMax( height, r.height );
+
+            ++itemsInRow;
+            ++i;
+
+            r.width = savedWidth;
+            r.height = savedHeight;
+        } while( i < items.Count() );
+
+        if (maxItemsInRow < itemsInRow)
+        {
+            maxItemsInRow = itemsInRow;
+        }
 
         curY += height;
diff -ru2 -x*.dsp -x*.dsw -x*Debug* -x*Release* -x*.ncb -x*.plg -x*.dsp -x*.dsw -xsamples -xCVS -x*.dll -x*.ilk -x*.exp -x*.lib -x*.pdb -xlib -x*.opt -xsetup.h wxWindows-20030516.orig/contrib/src/fl/toolwnd.cpp wxWindows-20030516.mod/contrib/src/fl/toolwnd.cpp
--- wxWindows-20030516.orig/contrib/src/fl/toolwnd.cpp	Wed Apr 02 13:11:28 2003
+++ wxWindows-20030516.mod/contrib/src/fl/toolwnd.cpp	Thu May 22 22:46:12 2003
@@ -47,7 +47,4 @@
 
 	EVT_PAINT    ( wxToolWindow::OnPaint )
-	EVT_MOTION   ( wxToolWindow::OnMotion )
-	EVT_LEFT_DOWN( wxToolWindow::OnLeftDown )
-	EVT_LEFT_UP  ( wxToolWindow::OnLeftUp )
 	EVT_SIZE     ( wxToolWindow::OnSize )
 
@@ -57,21 +54,4 @@
 END_EVENT_TABLE()
 
-enum INTERNAL_HIT_CODES
-{
-	HITS_WND_NOTHING,
-	HITS_WND_CLIENT,
-	HITS_WND_TITLE,
-
-	HITS_WND_LEFT_EDGE,
-	HITS_WND_RIGHT_EDGE,
-	HITS_WND_TOP_EDGE,
-	HITS_WND_BOTTOM_EDGE,
-
-	HITS_WND_TOP_LEFT_CORNER,
-	HITS_WND_BOTTOM_RIGHT_CORNER,
-	HITS_WND_TOP_RIGHT_CORNER,
-	HITS_WND_BOTTOM_LEFT_CORNER
-};
-
 wxToolWindow::wxToolWindow()
 
@@ -85,9 +65,9 @@
 #endif
 
-      mTitleHeight  ( 16 ),
+      mTitleHeight  ( 0 ),
 	  mClntHorizGap ( 2 ),
 	  mClntVertGap  ( 2 ),
-	  mWndVertGap   ( 4 ),
-	  mWndHorizGap  ( 4 ),
+	  mWndVertGap   ( 0 ),
+	  mWndHorizGap  ( 0 ),
 
 	  mButtonGap    ( 2 ),
@@ -160,63 +140,10 @@
 void wxToolWindow::OnPaint( wxPaintEvent& event )
 {
-    wxPaintDC pdc( this );
-	wxWindowDC dc( this );
-
-	int w,h;
-	GetSize( &w, &h );
-
-    wxBrush backGround( wxSystemSettings::GetSystemColour(wxSYS_COLOUR_BTNFACE), wxSOLID );
-    //dc.SetBrush( *wxLIGHT_GREY_BRUSH );
-    dc.SetBrush( backGround ); 
-    dc.SetPen( *wxTRANSPARENT_PEN );
-
-    int y = mWndVertGap + mTitleHeight + mClntVertGap;
-    dc.DrawRectangle( 0,0, w, y );                                      // Top grey part.
-    dc.DrawRectangle( 0,y-1, mWndHorizGap + mClntHorizGap, h - y );     // Left grey part.
-    dc.DrawRectangle( w - ( mWndHorizGap + mClntHorizGap ), y-1,
-                      mWndHorizGap + mClntHorizGap, h - y );            // Right grey part.
-    dc.DrawRectangle( 0, h - mWndVertGap - mClntVertGap, w, mWndVertGap + mClntVertGap ); // Bottom grey part.
-
-	// draw shades
-	dc.SetPen( *wxLIGHT_GREY_PEN );
-
-	dc.DrawLine( 0,0, w, 0 );
-	dc.DrawLine( 0,0, 0, h );
-
-	dc.SetPen( *wxWHITE_PEN );
-
-	dc.DrawLine( 1,1, w, 1 );
-	dc.DrawLine( 1,2, 1, h );
-
-	dc.SetPen( *wxGREY_PEN );
-
-	dc.DrawLine( w - 2, 1, w - 2, h - 1 );
-	dc.DrawLine( 1, h - 2, w - 2, h - 2 );
-
-	dc.SetPen( *wxBLACK_PEN );
+    wxPaintDC dc(this);
 
-	dc.DrawLine( 0, h - 1, w, h - 1 );
-	dc.DrawLine( w-1, 0, w-1, h );
-
-	// fill inner area
-
-	dc.SetBrush( *wxTheBrushList->FindOrCreateBrush( wxColour( 0,0,128 ), wxSOLID ) );
-
-	dc.DrawRectangle( mWndHorizGap, mWndVertGap, w - mWndHorizGap*2, mTitleHeight );
-
-	dc.SetFont( mTitleFont );
-
-	for( size_t i = 0; i != mButtons.Count(); ++i )
-
-		mButtons[i]->Draw( dc );
-
-	int x1 = mWndHorizGap + mClntHorizGap;
-	int x2 = mButtons[ mButtons.GetCount() - 1 ]->mPos.x - mClntHorizGap*2;
-
-	dc.SetClippingRegion( x1, mWndVertGap + mClntVertGap, x2 - x1, mTitleHeight );
-
-	dc.SetTextForeground( *wxWHITE );
-	dc.SetBackgroundMode(  wxTRANSPARENT );
-	dc.DrawText( GetTitle(), mWndHorizGap + 2, mWndVertGap + 1 );
+    wxBrush backGround(wxSystemSettings::GetSystemColour(wxSYS_COLOUR_BTNFACE), wxSOLID);
+    dc.SetBrush(backGround); 
+    dc.SetPen(*wxTRANSPARENT_PEN);
+    dc.DrawRectangle(GetClientRect());
 }
 
@@ -241,154 +168,4 @@
 }
 
-int wxToolWindow::HitTestWindow( wxMouseEvent& event )
-{
-	wxPoint pos;
-	wxRect r;
-
-	GetScrMousePos( event, pos );
-	GetScrWindowRect( r );
-
-	int k = mMTolerance;
-
-	if ( !( pos.x >= r.x && pos.y >= r.y &&
-		    pos.x < r.x + r.width &&
-		    pos.y < r.y + r.height ) 
-	   )
-	   return HITS_WND_NOTHING; 
-
-	if ( pos.y <= r.y + k )
-	{
-		if ( pos.x < r.x + k*2 )
-
-			return HITS_WND_TOP_LEFT_CORNER;
-		else
-		if ( pos.x >= r.x + r.width - k*2 )
-
-			return HITS_WND_TOP_RIGHT_CORNER;
-		else
-			return HITS_WND_TOP_EDGE;
-	}
-	else
-	if ( pos.y >= r.y + r.height - k )
-	{
-		if ( pos.x < r.x + k*2 )
-
-			return HITS_WND_BOTTOM_LEFT_CORNER;
-		else
-		if ( pos.x > r.x + r.width - k*2 )
-
-			return HITS_WND_BOTTOM_RIGHT_CORNER;
-		else
-			return HITS_WND_BOTTOM_EDGE;
-	}
-	else
-	if ( pos.x <= r.x + k )
-	
-		return HITS_WND_LEFT_EDGE;
-	else
-	if ( pos.x >= r.x + r.width - k )
-
-		return HITS_WND_RIGHT_EDGE;
-	else
-	{
-		if ( pos.y <= r.y + mWndVertGap + mTitleHeight + mClntVertGap )
-
-			return HITS_WND_TITLE;
-		else
-			return HITS_WND_CLIENT;
-	}
-}
-
-void wxToolWindow::DrawHintRect( const wxRect& r )
-{
-	// BUG BUG BUG (wx):: somehow stippled brush works only  
-	//					  when the bitmap created on stack, not
-	//					  as a member of the class
-
-	int prevLF = mpScrDc->GetLogicalFunction();
-
-	mpScrDc->SetLogicalFunction( wxXOR );
-
-	wxBitmap checker( (const char*)_gCheckerImg, 8,8 );
-
-	wxBrush checkerBrush( checker );
-
-	mpScrDc->SetPen( *wxTRANSPARENT_PEN );
-	mpScrDc->SetBrush( checkerBrush );
-
-	int half = mHintBorder / 2;
-
-	mpScrDc->DrawRectangle( r.x - half, r.y - half,
-			                r.width + 2*half, mHintBorder );
-
-	mpScrDc->DrawRectangle( r.x - half, r.y + r.height - half,
-			                r.width + 2*half, mHintBorder );
-
-	mpScrDc->DrawRectangle( r.x - half, r.y + half - 1,
-			                mHintBorder, r.height - 2*half + 2);
-
-	mpScrDc->DrawRectangle( r.x + r.width - half,
-							r.y + half - 1,
-			                mHintBorder, r.height - 2*half + 2);
-
-	mpScrDc->SetBrush( wxNullBrush );
-
-	mpScrDc->SetLogicalFunction( prevLF );
-}
-
-void wxToolWindow::SetHintCursor( int type )
-{
-	if ( mResizeStarted )
-        return;
-
-	if ( type == HITS_WND_NOTHING || type == HITS_WND_CLIENT )
-	{
-		// the cursor is out of window - reset to arrow
-
-		if ( mMouseCaptured )
-		{
-			ReleaseMouse();
-			mMouseCaptured = FALSE;
-		}
-
-		SetCursor( wxCURSOR_ARROW );
-
-		mCursorType = type;
-
-		return;
-	}
-
-	if ( !mMouseCaptured )
-	{
-		mMouseCaptured = TRUE;
-		CaptureMouse();
-	}
-
-	// did the cursor actually changed?
-	
-	if ( type != mCursorType )
-	{
-		mCursorType = type;
-
-		switch ( type )
-		{
-			case HITS_WND_LEFT_EDGE   : SetCursor( wxCURSOR_SIZEWE ); break;
-			case HITS_WND_RIGHT_EDGE  : SetCursor( wxCURSOR_SIZEWE ); break;
-			case HITS_WND_TOP_EDGE    : SetCursor( wxCURSOR_SIZENS ); break;
-			case HITS_WND_BOTTOM_EDGE : SetCursor( wxCURSOR_SIZENS ); break;
-
-			case HITS_WND_TOP_LEFT_CORNER     : SetCursor( wxCURSOR_SIZENWSE ); break;
-			case HITS_WND_BOTTOM_RIGHT_CORNER : SetCursor( wxCURSOR_SIZENWSE ); break;
-			case HITS_WND_TOP_RIGHT_CORNER    : SetCursor( wxCURSOR_SIZENESW ); break;
-			case HITS_WND_BOTTOM_LEFT_CORNER  : SetCursor( wxCURSOR_SIZENESW ); break;
-
-			case HITS_WND_TITLE  : SetCursor( wxCURSOR_ARROW ); break;
-			case HITS_WND_CLIENT : SetCursor( wxCURSOR_ARROW ); break;
-
-			default: break; 
-		}
-	}
-}
-
 #define INFINITY 32768
 
@@ -402,6 +179,8 @@
 }
 
-void wxToolWindow::AdjustRectPos( const wxRect& original, const wxSize& newDim, wxRect& newRect )
+wxRect wxToolWindow::AdjustRectPos( const wxRect& original, const wxSize& newDim )
 {
+	wxRect newRect;
+
 	if ( mCursorType == HITS_WND_TOP_EDGE || 
 		 mCursorType == HITS_WND_TOP_LEFT_CORNER )
@@ -434,4 +213,6 @@
 	newRect.width  = newDim.x;
 	newRect.height = newDim.y;
+
+	return newRect;
 }
 
@@ -509,166 +290,8 @@
 wxSize wxToolWindow::GetMinimalWndDim()
 {
+	wxRect clientRect = GetClientRect();
+	wxSize winSize = GetSize();
 	return wxSize( (mWndHorizGap + mClntHorizGap)*2 + BTN_BOX_WIDTH*4,
-		           (mWndVertGap  + mClntVertGap )*2 + mTitleHeight );
-}
-
-void wxToolWindow::OnMotion( wxMouseEvent& event )
-{
-	if ( !mResizeStarted )
-	{
-		for( size_t i = 0; i != mButtons.Count(); ++i )
-		
-			mButtons[i]->OnMotion( wxPoint( event.m_x, event.m_y ) );
-
-		SetHintCursor( HitTestWindow( event ) );
-		return;
-	}
-
-	wxPoint pos;
-	GetScrMousePos( event, pos );
-
-	if ( mCursorType == HITS_WND_TITLE )
-	{
-		int w,h;
-		GetSize( &w, &h );
-
-		SetSize( mInitialRect.x + pos.x - mDragOrigin.x,
-				 mInitialRect.y + pos.y - mDragOrigin.y,
-				 w,h, 0 );
-	}
-
-	else
-	{
-		wxPoint delta( pos.x - mDragOrigin.x, pos.y - mDragOrigin.y );
-
-		wxRect newRect;
-
-		wxSize minDim = GetMinimalWndDim();
-
-		CalcResizedRect( newRect, delta, minDim );
-
-		wxSize borderDim( ( mWndHorizGap + mClntHorizGap )*2,
-			              ( mWndVertGap  + mClntVertGap  )*2 + mTitleHeight );
-
-		wxSize preferred = GetPreferredSize( wxSize( newRect.width  - borderDim.x, 
-			                                         newRect.height - borderDim.y ) );
-
-		preferred.x += borderDim.x;
-		preferred.y += borderDim.y;
-
-		//CalcResizedRect( newRect, delta, preferred );
-
-		wxRect finalRect = newRect;
-
-		AdjustRectPos( newRect, preferred, finalRect );
-
-		if ( mRealTimeUpdatesOn )
-		{
-				SetSize( finalRect.x, finalRect.y,
-						 finalRect.width, finalRect.height, 0 );
-		}
-		else
-		{
-			DrawHintRect( mPrevHintRect );
-			DrawHintRect( finalRect );
-
-            ::wxLogTrace(wxT("%d,%d / %d,%d\n"), finalRect.x, finalRect.y, finalRect.width, finalRect.height);
-		}
-
-		mPrevHintRect = finalRect;
-	}
-}
-
-void wxToolWindow::OnLeftDown( wxMouseEvent& event )
-{
-	int result = HitTestWindow( event );
-
-	for( size_t i = 0; i != mButtons.Count(); ++i )
-	{
-		mButtons[i]->OnLeftDown( wxPoint( event.m_x, event.m_y ) );
-
-		if ( mButtons[i]->IsPressed() ) 
-
-			return; // button hitted, 
-	}
-
-	if ( result >= HITS_WND_LEFT_EDGE || result == HITS_WND_TITLE )
-	{
-		GetScrMousePos( event, mDragOrigin );
-
-		/*
-		if ( mMouseCaptured `)
-		{
-			ReleaseMouse();
-			mMouseCaptured = FALSE;
-		}*/
-
-		if ( result == HITS_WND_TITLE && 
-			 HandleTitleClick( event )
-		   )
-		{
-
-		   return;
-		}
-
-		mResizeStarted = TRUE;
-
-		int x,y;
-		GetPosition( &x, &y );
-
-		mInitialRect.x = x;
-		mInitialRect.y = y;
-
-		GetSize( &x, &y );
-		mInitialRect.width  = x;
-		mInitialRect.height = y;
-
-		mPrevHintRect = mInitialRect;
-
-		if ( mCursorType != HITS_WND_TITLE && !mRealTimeUpdatesOn )
-		{
-			mpScrDc = new wxScreenDC();
-
-			wxScreenDC::StartDrawingOnTop( (wxRect*)NULL );
-
-			DrawHintRect( mInitialRect );
-		}
-	}
-}
-
-void wxToolWindow::OnLeftUp( wxMouseEvent& event )
-{
-	for( size_t i = 0; i != mButtons.Count(); ++i )
-	{
-		mButtons[i]->OnLeftUp( wxPoint( event.m_x, event.m_y ) );
-
-		if ( mButtons[i]->WasClicked() )
-		{
-			OnMiniButtonClicked( i ); // notify derived classes
-			mButtons[i]->Reset();
-		}
-	}
-
-	if ( mResizeStarted ) 
-	{
-		mResizeStarted = FALSE;
-
-		if ( mCursorType != HITS_WND_TITLE )
-		{
-			if ( !mRealTimeUpdatesOn )
-			{
-				DrawHintRect( mPrevHintRect );
-
-				wxScreenDC::EndDrawingOnTop();
-
-				delete mpScrDc;
-
-				mpScrDc = NULL;
-
-				SetSize( mPrevHintRect.x, mPrevHintRect.y,
-						 mPrevHintRect.width, mPrevHintRect.height, 0 );
-			}
-		}
-	}
+                   (mClntVertGap*2) + 16 );
 }
 
@@ -683,7 +306,10 @@
 		int y = mWndVertGap  + mTitleHeight + mClntVertGap;
 
-        mpClientWnd->SetSize( x-1, y-1, 
-                              w - 2*(mWndHorizGap + mClntHorizGap),
-                              h - y - mClntVertGap - mWndVertGap, 
+        wxRect clientRect = GetClientRect();
+        x = mClntHorizGap;
+        y = mClntVertGap;
+        mpClientWnd->SetSize( x, y+1, 
+                              clientRect.GetWidth() - (2*mClntHorizGap),
+                              clientRect.GetHeight() - (2*mClntVertGap),
                               0  
                             );
@@ -1020,4 +646,5 @@
 
 	EVT_LEFT_DCLICK( cbFloatedBarWindow::OnDblClick )
+	EVT_MAXIMIZE( cbFloatedBarWindow::OnMaximize )
 
 END_EVENT_TABLE()
@@ -1027,6 +654,4 @@
 	: mpBar( NULL )
 {
-	AddMiniButton( new cbCloseBox() );
-	AddMiniButton( new cbDockBox()  );
 }
 
@@ -1051,7 +676,9 @@
 	wxSize minDim = GetMinimalWndDim();
 
-	SetSize( scrX - mWndHorizGap - mClntHorizGap, 
-		     scrY - mClntVertGap - mTitleHeight - mWndVertGap, 
-			 width + minDim.x, height + minDim.y, 0 );
+	wxRect rect(scrX, scrY, width + minDim.x, height + minDim.y);
+
+	rect.SetSize(GetPreferredSize(rect.GetSize()));
+
+	SetSize( rect, 0 );
 }
 
@@ -1067,5 +694,30 @@
 		// int vtad = *((int*)pHandler);
 
-		pHandler->OnResizeBar( mpBar, given, prefDim );
+		//HACK: calculate border area by comparing window and client sizes
+		wxSize szClient = GetClientRect().GetSize();
+		wxSize szWindow = GetSize();
+		if ((szClient.GetWidth() == 0) || (szClient.GetHeight() == 0))
+		{
+			bool bShow = Show(FALSE);
+			wxSize orgSize = GetSize();
+			SetSize(200, 200);
+			szClient = GetClientRect().GetSize();
+			szWindow = GetSize();
+			SetSize(orgSize);
+			Show(bShow);
+		}
+
+		// remove the borders
+		wxSize borderDim( ( mClntHorizGap )*2 + (szWindow.GetWidth() - szClient.GetWidth()),
+		                  ( mClntVertGap  )*2 + (szWindow.GetHeight() - szClient.GetHeight()) );
+        
+		wxSize borderlessGiven(given);
+		borderlessGiven = borderlessGiven - borderDim;
+
+		// pass the proposed client area to the bar
+		pHandler->OnResizeBar( mpBar, borderlessGiven, prefDim );
+
+		// add the borders to the suggested rect
+		prefDim = prefDim + borderDim;
 
 		return prefDim;
@@ -1073,7 +725,29 @@
 	else
 	{
-		if ( mpBar->IsFixed() ) 
+		if ( mpBar->IsFixed() )
+		{
+			//HACK: calculate border area by comparing window and client sizes
+			wxSize szClient = GetClientRect().GetSize();
+			wxSize szWindow = GetSize();
+			if ((szClient.GetWidth() == 0) || (szClient.GetHeight() == 0))
+			{
+				bool bShow = Show(FALSE);
+				wxSize orgSize = GetSize();
+				SetSize(200, 200);
+				szClient = GetClientRect().GetSize();
+				szWindow = GetSize();
+				SetSize(orgSize);
+				Show(bShow);
+			}
+
+            // remove the borders
+			wxSize borderDim( ( mClntHorizGap )*2 + (szWindow.GetWidth() - szClient.GetWidth()),
+			                  ( mClntVertGap  )*2 + (szWindow.GetHeight() - szClient.GetHeight()) );
+        
+			wxSize borderlessGiven(given);
+			borderlessGiven = borderlessGiven - borderDim;
 
-			return mpBar->mDimInfo.mSizes[ wxCBAR_FLOATING ];
+			return mpBar->mDimInfo.mSizes[ wxCBAR_FLOATING ] + borderDim;
+		}
 		else
 			return given; // not-fixed bars are resized exactly the way user wants
@@ -1095,52 +769,85 @@
 }
 
-bool cbFloatedBarWindow::HandleTitleClick( wxMouseEvent& event )
+void cbFloatedBarWindow::OnDblClick( wxMouseEvent& event )
 {
-	ReleaseMouse();
-	mMouseCaptured = FALSE;
-
-	wxPoint scrPos;
-	GetScrMousePos( event, scrPos );
-
-	int msX = scrPos.x,
-		msY = scrPos.y;
-
-	mpLayout->GetParentFrame().ScreenToClient( &msX, &msY );
-
- 	int x,y;
-	GetPosition(&x,&y);
-	int w,h;
-	GetSize( &w, &h );
+	mpLayout->SetBarState( mpBar, wxCBAR_DOCKED_HORIZONTALLY, TRUE );
 
-	wxSize minDim = GetMinimalWndDim();
+	//wxMessageBox("toolWnd - dblClick!");
+}
 
-	w -= minDim.x;
-	h -= minDim.y;
+void cbFloatedBarWindow::SuggestRect(INTERNAL_HIT_CODES& hitCode, wxRect& rect)
+{
+    mCursorType = hitCode;
 
-	x += mWndHorizGap + mClntHorizGap;
-	y += mWndVertGap  + mTitleHeight + mClntVertGap;
+    // get the preferred size based on the proposed size
+    //  the resizing is "rough" for button bars so it always looks good
+    wxSize preferred = GetPreferredSize(rect.GetSize());
 
-	mpLayout->GetParentFrame().ScreenToClient( &x, &y );
+    //HACK: Makes the button appear for horizontal tool bars
+    preferred.x += 1;
 
-	wxRect& bounds = mpBar->mDimInfo.mBounds[ wxCBAR_FLOATING ];
+    // adjust window position based on which border we are dragging
+    rect = AdjustRectPos(rect, preferred);
+}
 
-	bounds.x = x;
-	bounds.y = y;
-	bounds.width  = w;
-	bounds.height = h;
+#ifdef __WXMSW__
+long cbFloatedBarWindow::MSWWindowProc(WXUINT message, WXWPARAM wParam, WXLPARAM lParam)
+{
+    if (message == WM_SIZING)
+    {
+        // unpack the data into wxWindows-friendly types
+        LPRECT lpRect = (LPRECT)lParam;
+        wxRect rect(wxPoint(lpRect->left, lpRect->top), wxPoint(lpRect->right, lpRect->bottom));
+        INTERNAL_HIT_CODES hitCode;
+        switch (wParam)
+        {
+            case WMSZ_TOP:
+                hitCode = HITS_WND_TOP_EDGE;
+                break;
+            case WMSZ_TOPLEFT:
+                hitCode = HITS_WND_TOP_LEFT_CORNER;
+                break;
+            case WMSZ_TOPRIGHT:
+                hitCode = HITS_WND_TOP_RIGHT_CORNER;
+                break;
+            case WMSZ_BOTTOM:
+                hitCode = HITS_WND_BOTTOM_EDGE;
+                break;
+            case WMSZ_BOTTOMLEFT:
+                hitCode = HITS_WND_BOTTOM_LEFT_CORNER;
+                break;
+            case WMSZ_BOTTOMRIGHT:
+                hitCode = HITS_WND_BOTTOM_RIGHT_CORNER;
+                break;
+            case WMSZ_LEFT:
+                hitCode = HITS_WND_LEFT_EDGE;
+                break;
+            case WMSZ_RIGHT:
+                hitCode = HITS_WND_RIGHT_EDGE;
+                break;
+            default:
+                // default always asserts
+                wxASSERT(FALSE);
+                break;
+        };
+
+        // get the new rectangle
+        SuggestRect(hitCode, rect);
+
+        // pack the result data into MS Windows types
+        lpRect->left = rect.GetLeft();
+        lpRect->top = rect.GetTop();
+        lpRect->right = rect.GetRight();
+        lpRect->bottom = rect.GetBottom();
+    }
 
-	cbStartBarDraggingEvent dragEvt( mpBar, wxPoint(msX,msY), 
-		                             mpLayout->GetPanesArray()[FL_ALIGN_TOP] );
-			
-	mpLayout->FirePluginEvent( dragEvt );
+    long retVal = wxToolWindow::MSWWindowProc(message, wParam, lParam);
 
-	return TRUE;
+    return retVal;
 }
+#endif
 
-void cbFloatedBarWindow::OnDblClick( wxMouseEvent& event )
+void cbFloatedBarWindow::OnMaximize( wxMaximizeEvent& event )
 {
-	mpLayout->SetBarState( mpBar, wxCBAR_DOCKED_HORIZONTALLY, TRUE );
-
-	//wxMessageBox("toolWnd - dblClick!");
+    mpLayout->SetBarState( mpBar, wxCBAR_DOCKED_HORIZONTALLY, TRUE );
 }
-

 	  	 

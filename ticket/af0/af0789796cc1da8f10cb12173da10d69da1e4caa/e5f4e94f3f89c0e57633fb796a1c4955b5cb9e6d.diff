Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/function.tex,v
retrieving revision 1.268
diff -u -r1.268 function.tex
--- docs/latex/wx/function.tex	2006/12/29 20:18:57	1.268
+++ docs/latex/wx/function.tex	2007/01/01 01:10:41
@@ -1067,8 +1067,8 @@
 
 \wxheading{Portability}
 
-This function is implemented for Win32,
-Mac OS and generic Unix provided the system has {\tt statfs()} function.
+This function is implemented for Win32, Mac OS, OS/2, and generic Unix
+provided the system has {\tt statfs()} function.
 
 This function first appeared in wxWidgets 2.3.2.
 
 
Index: src/os2/utils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/utils.cpp,v
retrieving revision 1.80
diff -u -r1.80 utils.cpp
--- src/os2/utils.cpp	2006/08/30 17:11:37	1.80
+++ src/os2/utils.cpp	2007/01/01 01:11:06
@@ -21,6 +21,7 @@
 
 #include "wx/os2/private.h"
 #include "wx/apptrait.h"
+#include "wx/filename.h"
 
 #include <ctype.h>
 #ifdef __EMX__
@@ -436,6 +437,48 @@
     }
     delete[] wxBuffer;
     return (wxChar*)wxEmptyString; // No home known!
+}
+
+bool wxGetDiskSpace(const wxString& path,
+                    wxDiskspaceSize_t *pTotal,
+                    wxDiskspaceSize_t *pFree)
+{
+    if (path.empty())
+        return false;
+
+    wxFileName fn(path);
+    FSALLOCATE fsaBuf = {0};
+    APIRET rc = NO_ERROR;
+    ULONG disknum = 0;
+
+    fn.MakeAbsolute();
+
+    if (wxDirExists(fn.GetFullPath()) == false)
+        return false;
+
+    disknum = 1 + wxToupper(fn.GetVolume().GetChar(0)) - _T('A');
+
+    rc = ::DosQueryFSInfo(disknum,             // 1 = A, 2 = B, 3 = C, ...
+                          FSIL_ALLOC,          // allocation info
+                          (PVOID)&fsaBuf,
+                          sizeof(FSALLOCATE));
+
+    if (rc != NO_ERROR) {
+        return false;
+    } else {
+        if(pTotal) {
+            // to try to avoid 32-bit overflow, let's not multiply right away
+            // (num of alloc units)
+            *pTotal = fsaBuf.cUnit;  
+            // * (num of sectors per alloc unit) * (num of bytes per sector)
+            (*pTotal) *= fsaBuf.cSectorUnit * fsaBuf.cbSector;
+        }
+        if(pFree) {
+            *pFree = fsaBuf.cUnitAvail;
+            (*pFree) *= fsaBuf.cSectorUnit * fsaBuf.cbSector;
+        }
+        return true;
+    }
 }
 
 wxString wxPMErrorToStr(ERRORID vError)

 	  	 

Index: samples/widgets/clrpicker.cpp
--- /dev/null
+++ samples/widgets/clrpicker.cpp
@@ -0,0 +1,235 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        picker.cpp
+// Purpose:     Shows wxColourPickerCtrl
+// Author:      Francesco Montorsi
+// Created:     22/4/2006
+// Id:          $Id: picker.cpp,v 1.4 2006/06/06 14:10:04 ABX Exp $
+// Copyright:   (c) 2006 Francesco Montorsi
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_COLOURPICKERCTRL
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/log.h"
+    #include "wx/radiobox.h"
+#endif
+
+#include "wx/artprov.h"
+#include "wx/sizer.h"
+#include "wx/stattext.h"
+#include "wx/checkbox.h"
+#include "wx/imaglist.h"
+
+#include "wx/clrpicker.h"
+#include "widgets.h"
+
+#include "icons/picker.xpm"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// control ids
+enum
+{
+    PickerPage_Reset = wxID_HIGHEST,
+    PickerPage_Colour
+};
+
+
+// ----------------------------------------------------------------------------
+// ColourPickerWidgetsPage
+// ----------------------------------------------------------------------------
+
+class ColourPickerWidgetsPage : public WidgetsPage
+{
+public:
+    ColourPickerWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
+    virtual ~ColourPickerWidgetsPage(){};
+
+    virtual wxControl *GetWidget() const { return m_clrPicker; }
+    virtual void RecreateWidget() { RecreatePicker(); }
+
+    // lazy creation of the content
+    virtual void CreateContent();
+
+protected:
+
+    // called only once at first construction
+    void CreatePicker();
+
+    // called to recreate an existing control
+    void RecreatePicker();
+
+    // restore the checkboxes state to the initial values
+    void Reset();
+
+    // get the initial style for the picker of the given kind
+    long GetPickerStyle();
+
+
+    void OnColourChange(wxColourPickerEvent &ev);
+    void OnCheckBox(wxCommandEvent &ev);
+    void OnButtonReset(wxCommandEvent &ev);
+
+    // the picker
+    wxColourPickerCtrl *m_clrPicker;
+
+
+    // other controls
+    // --------------
+
+    wxCheckBox *m_chkColourTextCtrl,
+               *m_chkColourShowLabel;
+    wxBoxSizer *m_sizer;
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_WIDGETS_PAGE(ColourPickerWidgetsPage)
+};
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(ColourPickerWidgetsPage, WidgetsPage)
+    EVT_BUTTON(PickerPage_Reset, ColourPickerWidgetsPage::OnButtonReset)
+
+    EVT_COLOURPICKER_CHANGED(PickerPage_Colour, ColourPickerWidgetsPage::OnColourChange)
+
+    EVT_CHECKBOX(wxID_ANY, ColourPickerWidgetsPage::OnCheckBox)
+END_EVENT_TABLE()
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+#if defined(__WXGTK24__)
+    #define FAMILY_CTRLS NATIVE_CTRLS
+#else
+    #define FAMILY_CTRLS GENERIC_CTRLS
+#endif
+
+IMPLEMENT_WIDGETS_PAGE(ColourPickerWidgetsPage, _T("ColourPicker"),
+                       PICKER_CTRLS | FAMILY_CTRLS);
+
+ColourPickerWidgetsPage::ColourPickerWidgetsPage(WidgetsBookCtrl *book,
+                                     wxImageList *imaglist)
+                  : WidgetsPage(book, imaglist, picker_xpm)
+{
+}
+
+void ColourPickerWidgetsPage::CreateContent()
+{
+    // left pane
+    wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
+
+    wxStaticBoxSizer *clrbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&ColourPicker style"));
+    m_chkColourTextCtrl = CreateCheckBoxAndAddToSizer(clrbox, _T("With textctrl"), false);
+    m_chkColourShowLabel = CreateCheckBoxAndAddToSizer(clrbox, _T("With label"), false);
+    boxleft->Add(clrbox, 0, wxALL|wxGROW, 5);
+
+    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+                 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
+
+    Reset();    // set checkboxes state
+
+    // create pickers
+    m_clrPicker = NULL;
+    CreatePicker();
+
+    // right pane
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+    m_sizer->Add(m_clrPicker, 0, wxALIGN_CENTER|wxALL, 5);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+
+    // global pane
+    wxSizer *sz = new wxBoxSizer(wxHORIZONTAL);
+    sz->Add(boxleft, 0, wxGROW|wxALL, 5);
+    sz->Add(m_sizer, 1, wxGROW|wxALL, 5);
+
+    SetSizerAndFit(sz);
+}
+
+void ColourPickerWidgetsPage::CreatePicker()
+{
+    delete m_clrPicker;
+
+    m_clrPicker = new wxColourPickerCtrl(this, PickerPage_Colour, *wxRED,
+                                            wxDefaultPosition, wxDefaultSize,
+                                            GetPickerStyle());
+}
+
+long ColourPickerWidgetsPage::GetPickerStyle()
+{
+    long style = 0;
+
+    if ( m_chkColourTextCtrl->GetValue() )
+        style |= wxCLRP_USE_TEXTCTRL;
+
+    if ( m_chkColourShowLabel->GetValue() )
+        style |= wxCLRP_SHOW_LABEL;
+
+    return style;
+}
+
+void ColourPickerWidgetsPage::RecreatePicker()
+{
+    m_sizer->Remove(1);
+    CreatePicker();
+    m_sizer->Insert(1, m_clrPicker, 0, wxALIGN_CENTER|wxALL, 5);
+
+    m_sizer->Layout();
+}
+
+void ColourPickerWidgetsPage::Reset()
+{
+    m_chkColourTextCtrl->SetValue((wxCLRP_DEFAULT_STYLE & wxCLRP_USE_TEXTCTRL) != 0);
+    m_chkColourShowLabel->SetValue((wxCLRP_DEFAULT_STYLE & wxCLRP_SHOW_LABEL) != 0);
+}
+
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void ColourPickerWidgetsPage::OnButtonReset(wxCommandEvent& WXUNUSED(event))
+{
+    Reset();
+    RecreatePicker();
+}
+
+void ColourPickerWidgetsPage::OnColourChange(wxColourPickerEvent& event)
+{
+    wxLogMessage(wxT("The colour changed to '%s' !"),
+                 event.GetColour().GetAsString(wxC2S_CSS_SYNTAX).c_str());
+}
+
+void ColourPickerWidgetsPage::OnCheckBox(wxCommandEvent &event)
+{
+    if (event.GetEventObject() == m_chkColourTextCtrl ||
+        event.GetEventObject() == m_chkColourShowLabel)
+        RecreatePicker();
+}
+
+#endif  //  wxUSE_COLOURPICKERCTRL
Index: samples/widgets/dirpicker.cpp
--- /dev/null
+++ samples/widgets/dirpicker.cpp
@@ -0,0 +1,243 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        picker.cpp
+// Purpose:     Shows wxDirPickerCtrl
+// Author:      Francesco Montorsi
+// Created:     22/4/2006
+// Id:          $Id: picker.cpp,v 1.4 2006/06/06 14:10:04 ABX Exp $
+// Copyright:   (c) 2006 Francesco Montorsi
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_DIRPICKERCTRL
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/log.h"
+    #include "wx/radiobox.h"
+#endif
+
+#include "wx/artprov.h"
+#include "wx/sizer.h"
+#include "wx/stattext.h"
+#include "wx/checkbox.h"
+#include "wx/imaglist.h"
+
+#include "wx/filepicker.h"
+#include "widgets.h"
+
+#include "icons/picker.xpm"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// control ids
+enum
+{
+    PickerPage_Reset = wxID_HIGHEST,
+    PickerPage_Dir
+};
+
+
+// ----------------------------------------------------------------------------
+// DirPickerWidgetsPage
+// ----------------------------------------------------------------------------
+
+class DirPickerWidgetsPage : public WidgetsPage
+{
+public:
+    DirPickerWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
+    virtual ~DirPickerWidgetsPage(){};
+
+    virtual wxControl *GetWidget() const { return m_dirPicker; }
+    virtual void RecreateWidget() { RecreatePicker(); }
+
+    // lazy creation of the content
+    virtual void CreateContent();
+
+protected:
+
+    // called only once at first construction
+    void CreatePicker();
+
+    // called to recreate an existing control
+    void RecreatePicker();
+
+    // restore the checkboxes state to the initial values
+    void Reset();
+
+    // get the initial style for the picker of the given kind
+    long GetPickerStyle();
+
+
+    void OnDirChange(wxFileDirPickerEvent &ev);
+    void OnCheckBox(wxCommandEvent &ev);
+    void OnButtonReset(wxCommandEvent &ev);
+
+    // the picker
+    wxDirPickerCtrl *m_dirPicker;
+
+
+    // other controls
+    // --------------
+
+    wxCheckBox *m_chkDirTextCtrl,
+               *m_chkDirChangeDir,
+               *m_chkDirMustExist;
+    wxBoxSizer *m_sizer;
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_WIDGETS_PAGE(DirPickerWidgetsPage)
+};
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(DirPickerWidgetsPage, WidgetsPage)
+    EVT_BUTTON(PickerPage_Reset, DirPickerWidgetsPage::OnButtonReset)
+
+    EVT_DIRPICKER_CHANGED(PickerPage_Dir, DirPickerWidgetsPage::OnDirChange)
+
+    EVT_CHECKBOX(wxID_ANY, DirPickerWidgetsPage::OnCheckBox)
+END_EVENT_TABLE()
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+#if defined(__WXGTK24__)
+    #define FAMILY_CTRLS NATIVE_CTRLS
+#else
+    #define FAMILY_CTRLS GENERIC_CTRLS
+#endif
+
+IMPLEMENT_WIDGETS_PAGE(DirPickerWidgetsPage, _T("DirPicker"),
+                       PICKER_CTRLS | FAMILY_CTRLS);
+
+DirPickerWidgetsPage::DirPickerWidgetsPage(WidgetsBookCtrl *book,
+                                     wxImageList *imaglist)
+                  : WidgetsPage(book, imaglist, picker_xpm)
+{
+}
+
+void DirPickerWidgetsPage::CreateContent()
+{
+    // left pane
+    wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
+
+    wxStaticBoxSizer *dirbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&DirPicker style"));
+    m_chkDirTextCtrl = CreateCheckBoxAndAddToSizer(dirbox, _T("With textctrl"), false);
+    m_chkDirMustExist = CreateCheckBoxAndAddToSizer(dirbox, _T("Dir must exist"), false);
+    m_chkDirChangeDir = CreateCheckBoxAndAddToSizer(dirbox, _T("Change working dir"), false);
+    boxleft->Add(dirbox, 0, wxALL|wxGROW, 5);
+
+    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+                 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
+
+    Reset();    // set checkboxes state
+
+    // create pickers
+    m_dirPicker = NULL;
+    CreatePicker();
+
+    // right pane
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+    m_sizer->Add(m_dirPicker, 0, wxALIGN_CENTER|wxALL, 5);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+
+    // global pane
+    wxSizer *sz = new wxBoxSizer(wxHORIZONTAL);
+    sz->Add(boxleft, 0, wxGROW|wxALL, 5);
+    sz->Add(m_sizer, 1, wxGROW|wxALL, 5);
+
+    SetSizerAndFit(sz);
+}
+
+void DirPickerWidgetsPage::CreatePicker()
+{
+    delete m_dirPicker;
+
+    m_dirPicker = new wxDirPickerCtrl(this, PickerPage_Dir,
+                                        wxGetHomeDir(), wxT("Hello!"),
+                                        wxDefaultPosition, wxDefaultSize,
+                                        GetPickerStyle());
+}
+
+long DirPickerWidgetsPage::GetPickerStyle()
+{
+    long style = 0;
+
+    if ( m_chkDirTextCtrl->GetValue() )
+        style |= wxDIRP_USE_TEXTCTRL;
+
+    if ( m_chkDirMustExist->GetValue() )
+        style |= wxDIRP_DIR_MUST_EXIST;
+
+    if ( m_chkDirChangeDir->GetValue() )
+        style |= wxDIRP_CHANGE_DIR;
+
+    return style;
+}
+
+void DirPickerWidgetsPage::RecreatePicker()
+{
+    m_sizer->Remove(1);
+    CreatePicker();
+    m_sizer->Insert(1, m_dirPicker, 0, wxALIGN_CENTER|wxALL, 5);
+
+    m_sizer->Layout();
+}
+
+void DirPickerWidgetsPage::Reset()
+{
+    m_chkDirTextCtrl->SetValue((wxDIRP_DEFAULT_STYLE & wxDIRP_USE_TEXTCTRL) != 0);
+    m_chkDirMustExist->SetValue((wxDIRP_DEFAULT_STYLE & wxDIRP_DIR_MUST_EXIST) != 0);
+    m_chkDirChangeDir->SetValue((wxDIRP_DEFAULT_STYLE & wxDIRP_CHANGE_DIR) != 0);
+}
+
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void DirPickerWidgetsPage::OnButtonReset(wxCommandEvent& WXUNUSED(event))
+{
+    Reset();
+    RecreatePicker();
+}
+
+void DirPickerWidgetsPage::OnDirChange(wxFileDirPickerEvent& event)
+{
+    wxLogMessage(wxT("The directory changed to '%s' ! The current working directory is '%s'"),
+                 event.GetPath().c_str(), wxGetCwd().c_str());
+}
+
+void DirPickerWidgetsPage::OnCheckBox(wxCommandEvent &event)
+{
+    if (event.GetEventObject() == m_chkDirTextCtrl ||
+        event.GetEventObject() == m_chkDirChangeDir ||
+        event.GetEventObject() == m_chkDirMustExist)
+        RecreatePicker();
+}
+
+#endif  //  wxUSE_DIRPICKERCTRL
Index: samples/widgets/filepicker.cpp
--- /dev/null
+++ samples/widgets/filepicker.cpp
@@ -0,0 +1,304 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        picker.cpp
+// Purpose:     Part of the widgets sample showing wx*PickerCtrl
+// Author:      Francesco Montorsi
+// Created:     22/4/2006
+// Id:          $Id: picker.cpp,v 1.4 2006/06/06 14:10:04 ABX Exp $
+// Copyright:   (c) 2006 Francesco Montorsi
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_FILEPICKERCTRL
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/log.h"
+    #include "wx/radiobox.h"
+#endif
+
+#include "wx/artprov.h"
+#include "wx/sizer.h"
+#include "wx/stattext.h"
+#include "wx/checkbox.h"
+#include "wx/imaglist.h"
+
+#include "wx/filepicker.h"
+#include "widgets.h"
+
+#include "icons/picker.xpm"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+enum
+{
+    FilePickerMode_Open = 0,
+    FilePickerMode_Save
+};
+
+// control ids
+enum
+{
+    PickerPage_Reset = wxID_HIGHEST,
+    PickerPage_File
+};
+
+
+// ----------------------------------------------------------------------------
+// FilePickerWidgetsPage
+// ----------------------------------------------------------------------------
+
+class FilePickerWidgetsPage : public WidgetsPage
+{
+public:
+    FilePickerWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
+    virtual ~FilePickerWidgetsPage(){};
+
+    virtual wxControl *GetWidget() const { return m_filePicker; }
+    virtual void RecreateWidget() { RecreatePicker(); }
+
+    // lazy creation of the content
+    virtual void CreateContent();
+
+protected:
+
+    // called only once at first construction
+    void CreatePicker();
+
+    // called to recreate an existing control
+    void RecreatePicker();
+
+    // restore the checkboxes state to the initial values
+    void Reset();
+
+    // get the initial style for the picker of the given kind
+    long GetPickerStyle();
+
+    // update filepicker radiobox
+    void UpdateFilePickerMode();
+
+    // the pickers and the relative event handlers
+    void OnFileChange(wxFileDirPickerEvent &ev);
+    void OnCheckBox(wxCommandEvent &ev);
+    void OnButtonReset(wxCommandEvent &ev);
+
+
+    // the picker
+    wxFilePickerCtrl *m_filePicker;
+
+
+    // other controls
+    // --------------
+
+    wxCheckBox *m_chkFileTextCtrl,
+               *m_chkFileOverwritePrompt,
+               *m_chkFileMustExist,
+               *m_chkFileChangeDir;
+    wxRadioBox *m_radioFilePickerMode;
+
+    wxBoxSizer *m_sizer;
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_WIDGETS_PAGE(FilePickerWidgetsPage)
+};
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(FilePickerWidgetsPage, WidgetsPage)
+    EVT_BUTTON(PickerPage_Reset, FilePickerWidgetsPage::OnButtonReset)
+
+    EVT_FILEPICKER_CHANGED(PickerPage_File, FilePickerWidgetsPage::OnFileChange)
+
+    EVT_CHECKBOX(wxID_ANY, FilePickerWidgetsPage::OnCheckBox)
+    EVT_RADIOBOX(wxID_ANY, FilePickerWidgetsPage::OnCheckBox)
+END_EVENT_TABLE()
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+#if defined(__WXGTK24__)
+    #define FAMILY_CTRLS NATIVE_CTRLS
+#else
+    #define FAMILY_CTRLS GENERIC_CTRLS
+#endif
+
+IMPLEMENT_WIDGETS_PAGE(FilePickerWidgetsPage, _T("FilePicker"),
+                       PICKER_CTRLS | FAMILY_CTRLS);
+
+FilePickerWidgetsPage::FilePickerWidgetsPage(WidgetsBookCtrl *book,
+                                     wxImageList *imaglist)
+                  : WidgetsPage(book, imaglist, picker_xpm)
+{
+}
+
+void FilePickerWidgetsPage::CreateContent()
+{
+    // left pane
+    wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
+
+    static const wxString mode[] = { _T("open"), _T("save") };
+    m_radioFilePickerMode = new wxRadioBox(this, wxID_ANY, _T("wxFilePicker mode"),
+                                           wxDefaultPosition, wxDefaultSize,
+                                           WXSIZEOF(mode), mode);
+    boxleft->Add(m_radioFilePickerMode, 0, wxALL|wxGROW, 5);
+
+    wxStaticBoxSizer *filebox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&FilePicker style"));
+    m_chkFileTextCtrl = CreateCheckBoxAndAddToSizer(filebox, _T("With textctrl"), false);
+    m_chkFileOverwritePrompt = CreateCheckBoxAndAddToSizer(filebox, _T("Overwrite prompt"), false);
+    m_chkFileMustExist = CreateCheckBoxAndAddToSizer(filebox, _T("File must exist"), false);
+    m_chkFileChangeDir = CreateCheckBoxAndAddToSizer(filebox, _T("Change working dir"), false);
+    boxleft->Add(filebox, 0, wxALL|wxGROW, 5);
+
+    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+                 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
+
+    Reset();    // set checkboxes state
+
+    // create pickers
+    m_filePicker = NULL;
+    CreatePicker();
+
+    // right pane
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+    m_sizer->Add(m_filePicker, 0, wxALIGN_CENTER|wxALL, 5);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+
+    // global pane
+    wxSizer *sz = new wxBoxSizer(wxHORIZONTAL);
+    sz->Add(boxleft, 0, wxGROW|wxALL, 5);
+    sz->Add(m_sizer, 1, wxGROW|wxALL, 5);
+
+    SetSizerAndFit(sz);
+}
+
+void FilePickerWidgetsPage::CreatePicker()
+{
+    delete m_filePicker;
+
+    // pass an empty string as initial file
+    m_filePicker = new wxFilePickerCtrl(this, PickerPage_File,
+                                        wxEmptyString,
+                                        wxT("Hello!"), wxT("*"),
+                                        wxDefaultPosition, wxDefaultSize,
+                                        GetPickerStyle());
+}
+
+long FilePickerWidgetsPage::GetPickerStyle()
+{
+    long style = 0;
+
+    if ( m_chkFileTextCtrl->GetValue() )
+        style |= wxFLP_USE_TEXTCTRL;
+
+    if ( m_chkFileOverwritePrompt->GetValue() )
+        style |= wxFLP_OVERWRITE_PROMPT;
+
+    if ( m_chkFileMustExist->GetValue() )
+        style |= wxFLP_FILE_MUST_EXIST;
+
+    if ( m_chkFileChangeDir->GetValue() )
+        style |= wxFLP_CHANGE_DIR;
+
+    if (m_radioFilePickerMode->GetSelection() == FilePickerMode_Open)
+        style |= wxFLP_OPEN;
+    else
+        style |= wxFLP_SAVE;
+
+    return style;
+}
+
+void FilePickerWidgetsPage::RecreatePicker()
+{
+    m_sizer->Remove(1);
+    CreatePicker();
+    m_sizer->Insert(1, m_filePicker, 0, wxALIGN_CENTER||wxALL, 5);
+
+    m_sizer->Layout();
+}
+
+void FilePickerWidgetsPage::Reset()
+{
+    m_radioFilePickerMode->SetSelection((wxFLP_DEFAULT_STYLE & wxFLP_OPEN) ?
+                                            FilePickerMode_Open : FilePickerMode_Save);
+    m_chkFileTextCtrl->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_USE_TEXTCTRL) != 0);
+    m_chkFileOverwritePrompt->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_OVERWRITE_PROMPT) != 0);
+    m_chkFileMustExist->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_FILE_MUST_EXIST) != 0);
+    m_chkFileChangeDir->SetValue((wxFLP_DEFAULT_STYLE & wxFLP_CHANGE_DIR) != 0);
+
+    UpdateFilePickerMode();
+}
+
+void FilePickerWidgetsPage::UpdateFilePickerMode()
+{
+    switch (m_radioFilePickerMode->GetSelection())
+    {
+    case FilePickerMode_Open:
+        m_chkFileOverwritePrompt->SetValue(false);
+        m_chkFileOverwritePrompt->Disable();
+        m_chkFileMustExist->Enable();
+        break;
+    case FilePickerMode_Save:
+        m_chkFileMustExist->SetValue(false);
+        m_chkFileMustExist->Disable();
+        m_chkFileOverwritePrompt->Enable();
+        break;
+    }
+}
+
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void FilePickerWidgetsPage::OnButtonReset(wxCommandEvent& WXUNUSED(event))
+{
+    Reset();
+
+    RecreatePicker();
+}
+
+void FilePickerWidgetsPage::OnFileChange(wxFileDirPickerEvent& event)
+{
+    wxLogMessage(wxT("The file changed to '%s' ! The current working directory is '%s'"),
+                 event.GetPath().c_str(), wxGetCwd().c_str());
+}
+
+void FilePickerWidgetsPage::OnCheckBox(wxCommandEvent &event)
+{
+    if (event.GetEventObject() == m_chkFileTextCtrl ||
+        event.GetEventObject() == m_chkFileOverwritePrompt ||
+        event.GetEventObject() == m_chkFileMustExist ||
+        event.GetEventObject() == m_chkFileChangeDir)
+        RecreatePicker();
+
+    if (event.GetEventObject() == m_radioFilePickerMode)
+    {
+        UpdateFilePickerMode();
+        RecreatePicker();
+    }
+}
+
+#endif  // wxUSE_FILEPICKERCTRL
Index: samples/widgets/fontpicker.cpp
--- /dev/null
+++ samples/widgets/fontpicker.cpp
@@ -0,0 +1,243 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        picker.cpp
+// Purpose:     Shows wxFontPickerCtrl
+// Author:      Francesco Montorsi
+// Created:     22/4/2006
+// Id:          $Id: picker.cpp,v 1.4 2006/06/06 14:10:04 ABX Exp $
+// Copyright:   (c) 2006 Francesco Montorsi
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_FONTPICKERCTRL
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/log.h"
+    #include "wx/radiobox.h"
+#endif
+
+#include "wx/artprov.h"
+#include "wx/sizer.h"
+#include "wx/stattext.h"
+#include "wx/checkbox.h"
+#include "wx/imaglist.h"
+
+#include "wx/fontpicker.h"
+#include "widgets.h"
+
+#include "icons/picker.xpm"
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// control ids
+enum
+{
+    PickerPage_Reset = wxID_HIGHEST,
+    PickerPage_Font
+};
+
+
+// ----------------------------------------------------------------------------
+// FontPickerWidgetsPage
+// ----------------------------------------------------------------------------
+
+class FontPickerWidgetsPage : public WidgetsPage
+{
+public:
+    FontPickerWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
+    virtual ~FontPickerWidgetsPage(){};
+
+    virtual wxControl *GetWidget() const { return m_fontPicker; }
+    virtual void RecreateWidget() { RecreatePicker(); }
+
+    // lazy creation of the content
+    virtual void CreateContent();
+
+protected:
+
+    // called only once at first construction
+    void CreatePicker();
+
+    // called to recreate an existing control
+    void RecreatePicker();
+
+    // restore the checkboxes state to the initial values
+    void Reset();
+
+    // get the initial style for the picker of the given kind
+    long GetPickerStyle();
+
+
+    void OnFontChange(wxFontPickerEvent &ev);
+    void OnCheckBox(wxCommandEvent &ev);
+    void OnButtonReset(wxCommandEvent &ev);
+
+    // the picker
+    wxFontPickerCtrl *m_fontPicker;
+
+
+    // other controls
+    // --------------
+
+    wxCheckBox *m_chkFontTextCtrl,
+               *m_chkFontDescAsLabel,
+               *m_chkFontUseFontForLabel;
+    wxBoxSizer *m_sizer;
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_WIDGETS_PAGE(FontPickerWidgetsPage)
+};
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(FontPickerWidgetsPage, WidgetsPage)
+    EVT_BUTTON(PickerPage_Reset, FontPickerWidgetsPage::OnButtonReset)
+
+    EVT_FONTPICKER_CHANGED(PickerPage_Font, FontPickerWidgetsPage::OnFontChange)
+
+    EVT_CHECKBOX(wxID_ANY, FontPickerWidgetsPage::OnCheckBox)
+END_EVENT_TABLE()
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+#if defined(__WXGTK24__)
+    #define FAMILY_CTRLS NATIVE_CTRLS
+#else
+    #define FAMILY_CTRLS GENERIC_CTRLS
+#endif
+
+IMPLEMENT_WIDGETS_PAGE(FontPickerWidgetsPage, _T("FontPicker"),
+                       PICKER_CTRLS | FAMILY_CTRLS);
+
+FontPickerWidgetsPage::FontPickerWidgetsPage(WidgetsBookCtrl *book,
+                                     wxImageList *imaglist)
+                  : WidgetsPage(book, imaglist, picker_xpm)
+{
+}
+
+void FontPickerWidgetsPage::CreateContent()
+{
+    // left pane
+    wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
+
+    wxStaticBoxSizer *fontbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&FontPicker style"));
+    m_chkFontTextCtrl = CreateCheckBoxAndAddToSizer(fontbox, _T("With textctrl"));
+    m_chkFontDescAsLabel = CreateCheckBoxAndAddToSizer(fontbox, _T("Font desc as btn label"));
+    m_chkFontUseFontForLabel = CreateCheckBoxAndAddToSizer(fontbox, _T("Use font for label"), false);
+    boxleft->Add(fontbox, 0, wxALL|wxGROW, 5);
+
+    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+                 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
+
+    Reset();    // set checkboxes state
+
+    // create pickers
+    m_fontPicker = NULL;
+    CreatePicker();
+
+    // right pane
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+    m_sizer->Add(m_fontPicker, 0, wxALIGN_CENTER|wxALL, 5);
+    m_sizer->Add(1, 1, 1, wxGROW | wxALL, 5); // spacer
+
+    // global pane
+    wxSizer *sz = new wxBoxSizer(wxHORIZONTAL);
+    sz->Add(boxleft, 0, wxGROW|wxALL, 5);
+    sz->Add(m_sizer, 1, wxGROW|wxALL, 5);
+
+    SetSizerAndFit(sz);
+}
+
+void FontPickerWidgetsPage::CreatePicker()
+{
+    delete m_fontPicker;
+
+    m_fontPicker = new wxFontPickerCtrl(this, PickerPage_Font,
+                                        *wxSWISS_FONT,
+                                        wxDefaultPosition, wxDefaultSize,
+                                        GetPickerStyle());
+}
+
+long FontPickerWidgetsPage::GetPickerStyle()
+{
+    long style = 0;
+
+    if ( m_chkFontTextCtrl->GetValue() )
+        style |= wxFNTP_USE_TEXTCTRL;
+
+    if ( m_chkFontUseFontForLabel->GetValue() )
+        style |= wxFNTP_USEFONT_FOR_LABEL;
+
+    if ( m_chkFontDescAsLabel->GetValue() )
+            style |= wxFNTP_FONTDESC_AS_LABEL;
+
+    return style;
+}
+
+void FontPickerWidgetsPage::RecreatePicker()
+{
+    m_sizer->Remove(1);
+    CreatePicker();
+    m_sizer->Insert(1, m_fontPicker, 0, wxALIGN_CENTER|wxALL, 5);
+
+    m_sizer->Layout();
+}
+
+void FontPickerWidgetsPage::Reset()
+{
+    m_chkFontTextCtrl->SetValue((wxFNTP_DEFAULT_STYLE & wxFNTP_USE_TEXTCTRL) != 0);
+    m_chkFontUseFontForLabel->SetValue((wxFNTP_DEFAULT_STYLE & wxFNTP_USEFONT_FOR_LABEL) != 0);
+    m_chkFontDescAsLabel->SetValue((wxFNTP_DEFAULT_STYLE & wxFNTP_FONTDESC_AS_LABEL) != 0);
+}
+
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void FontPickerWidgetsPage::OnButtonReset(wxCommandEvent& WXUNUSED(event))
+{
+    Reset();
+    RecreatePicker();
+}
+
+void FontPickerWidgetsPage::OnFontChange(wxFontPickerEvent& event)
+{
+    wxLogMessage(wxT("The font changed to '%s' with size %d !"),
+                 event.GetFont().GetFaceName().c_str(), event.GetFont().GetPointSize());
+}
+
+void FontPickerWidgetsPage::OnCheckBox(wxCommandEvent &event)
+{
+    if (event.GetEventObject() == m_chkFontTextCtrl ||
+        event.GetEventObject() == m_chkFontDescAsLabel ||
+        event.GetEventObject() == m_chkFontUseFontForLabel)
+        RecreatePicker();
+}
+
+#endif  //  wxUSE_FONTPICKERCTRL
Index: samples/widgets/widgets.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/widgets/widgets.bkl,v
retrieving revision 1.9
diff -u2 -r1.9 samples/widgets/widgets.bkl
--- samples/widgets/widgets.bkl
+++ samples/widgets/widgets.bkl
@@ -14,5 +14,8 @@
             listbox.cpp
             notebook.cpp
-            picker.cpp
+            clrpicker.cpp
+            fontpicker.cpp
+            filepicker.cpp
+            dirpicker.cpp
             radiobox.cpp
             slider.cpp

 	  	 

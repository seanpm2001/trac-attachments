--- wxWidgets-trunk/include/wx/msw/menuitem.h	2014-03-15
+++ wxWidgets-work/include/wx/msw/menuitem.h	2014-03-15
@@ -78,18 +78,13 @@
     void SetBitmaps(const wxBitmap& bmpChecked,
                     const wxBitmap& bmpUnchecked = wxNullBitmap)
     {
-        m_bmpChecked = bmpChecked;
-        m_bmpUnchecked = bmpUnchecked;
-        SetOwnerDrawn(true);
+        DoSetBitmap(bmpChecked, true);
+        DoSetBitmap(bmpUnchecked, false);
     }
 
     void SetBitmap(const wxBitmap& bmp, bool bChecked = true)
     {
-        if ( bChecked )
-            m_bmpChecked = bmp;
-        else
-            m_bmpUnchecked = bmp;
-        SetOwnerDrawn(true);
+        DoSetBitmap(bmp, bChecked);
     }
 
     void SetDisabledBitmap(const wxBitmap& bmpDisabled)
@@ -125,6 +120,9 @@
     // helper function to get a handle of bitmap associated with item
     HBITMAP GetHBitmapForMenu(bool checked = true);
 
+    // helper function to set/change the bitmap
+    void DoSetBitmap(const wxBitmap& bmp, bool bChecked);
+
 #else // !wxUSE_OWNER_DRAWN
     // Provide stubs for the public functions above to ensure that the code
     // still compiles without wxUSE_OWNER_DRAWN -- it makes sense to just drop
--- wxWidgets-trunk/src/msw/menuitem.cpp	2014-03-15
+++ wxWidgets-work/src/msw/menuitem.cpp	2014-03-15
@@ -741,6 +741,80 @@
 
 #if wxUSE_OWNER_DRAWN
 
+void wxMenuItem::DoSetBitmap(const wxBitmap& bmp, bool bChecked)
+{
+    if ( bChecked )
+    {
+        if( m_bmpChecked.IsSameAs(bmp) )
+            return;
+
+        m_bmpChecked = bmp;
+    }
+    else
+    {
+        if( m_bmpUnchecked.IsSameAs(bmp) )
+            return;
+
+        m_bmpUnchecked = bmp;
+    }
+
+    // already marked as owner-drawn, cannot be reverted
+    if( IsOwnerDrawn() )
+        return;
+
+    if ( MustUseOwnerDrawn() )
+    {
+        // should be done already, but just in case...
+        SetOwnerDrawn(true);
+        return;
+    }
+
+    // assume owner-drawn state, will be reset on exit
+    SetOwnerDrawn(true);
+
+    // the item can be not attached to any menu yet and SetBitmap() is still
+    // valid to call in this case and should do nothing else
+    if ( !m_parentMenu )
+        return;
+
+    HMENU hMenu = GetHMenuOf(m_parentMenu);
+    if ( !hMenu )
+    {
+        SetOwnerDrawn(true); // real owner-drawn status will be decided further
+        return;
+    }
+
+    const UINT id = GetMSWId();
+
+    const UINT state = ::GetMenuState(hMenu, id, MF_BYCOMMAND);
+    if ( state == (UINT)-1 )
+        return;
+
+    // update the bitmap of the native menu item
+    // don't set hbmpItem for the checkable items as it would
+    // be used for both checked and unchecked state
+    WinStruct<MENUITEMINFO> mii;
+    if ( IsCheckable() )
+    {
+        mii.fMask = MIIM_CHECKMARKS;
+        mii.hbmpChecked = GetHBitmapForMenu(true);
+        mii.hbmpUnchecked = GetHBitmapForMenu(false);
+    }
+    else
+    {
+        mii.fMask = MIIM_BITMAP;
+        mii.hbmpItem = GetHBitmapForMenu();
+    }
+    if ( !::SetMenuItemInfo(hMenu, id, FALSE, &mii) )
+    {
+        wxLogLastError(wxT("SetMenuItemInfo"));
+    }
+
+    // tell the item that it's not really owner-drawn but only
+    // needs to draw its bitmap, the rest is done by Windows
+    SetOwnerDrawn(false);
+}
+
 int wxMenuItem::MeasureAccelWidth() const
 {
     wxString accel = GetItemLabel().AfterFirst(wxT('/t'));

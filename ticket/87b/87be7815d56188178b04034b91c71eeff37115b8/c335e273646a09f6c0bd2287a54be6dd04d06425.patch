? mybuild
Index: docs/latex/wx/file.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/file.tex,v
retrieving revision 1.31
diff -u -r1.31 file.tex
--- docs/latex/wx/file.tex	2005/11/23 10:29:37	1.31
+++ docs/latex/wx/file.tex	2006/11/11 23:40:01
@@ -274,6 +274,38 @@
 The number of bytes read, or the symbol {\bf wxInvalidOffset} (-1) if there was an error.
 
 
+\membersection{wxFile::Read}\label{wxfilereads}
+
+\func{wxString}{Read}{\param{size\_t}{ count}, \param{const wxMBConv\&}{ conv = wxConvUTF8}}
+
+Reads the specified number of bytes, returning the contents read into a wxString object.
+
+\wxheading{Parameters}
+
+\docparam{count}{The number of bytes to read.}
+
+\docparam{conv}{The desired conversion format.}
+
+\wxheading{Return value}
+
+Returns a wxString object which contains the text read.
+
+
+\membersection{wxFile::ReadLine}\label{wxfilereadline}
+
+\func{wxString}{ReadLine}{\param{const wxMBConv\&}{ conv = wxConvUTF8}}
+
+Reads the current line from the file, returning the contents read into a wxString object.
+
+\wxheading{Parameters}
+
+\docparam{conv}{The desired conversion format.}
+
+\wxheading{Return value}
+
+Returns a wxString object which contains the line read.
+
+
 \membersection{wxFile::Seek}\label{wxfileseek}
 
 \func{wxFileOffset}{Seek}{\param{wxFileOffset }{ofs}, \param{wxSeekMode }{mode = wxFromStart}}
@@ -346,3 +378,17 @@
 to write data with embedded {\tt NUL}s to the file you should use the other 
 \helpref{Write() overload}{wxfilewrite}.
 
+
+\membersection{wxFile::WriteLine}\label{wxfilewriteline}
+
+\func{bool}{Write}{\param{const wxString\& }{s}, \param{wxMBConv\&}{ conv = wxConvUTF8}}
+
+Writes the contents of the string to the file with an additional new-line character
+at the end of string, returns true on success.
+
+The second argument is only meaningful in Unicode build of wxWidgets when
+{\it conv} is used to convert {\it s} to multibyte representation.
+
+Note that this method only works with {\tt NUL}-terminated strings, if you want
+to write data with embedded {\tt NUL}s to the file you should use the other 
+\helpref{Write() overload}{wxfilewrite}.
Index: include/wx/file.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/file.h,v
retrieving revision 1.49
diff -u -r1.49 file.h
--- include/wx/file.h	2006/04/05 14:37:37	1.49
+++ include/wx/file.h	2006/11/11 23:40:06
@@ -94,6 +94,10 @@
   // read/write (unbuffered)
     // returns number of bytes read or wxInvalidOffset on error
   ssize_t Read(void *pBuf, size_t nCount);
+    // returns wxString (reads nCount characters)
+  wxString Read(size_t nCount, const wxMBConv& conv = wxConvUTF8);
+    // returns wxString (reads the current line)
+  wxString ReadLine(const wxMBConv& conv = wxConvUTF8);
     // returns the number of bytes written
   size_t Write(const void *pBuf, size_t nCount);
     // returns true on success
@@ -102,6 +106,11 @@
       const wxWX2MBbuf buf = s.mb_str(conv);
       size_t size = strlen(buf);
       return Write((const char *) buf, size) == size;
+  }
+    // returns true on success
+  bool WriteLine(const wxString& s, const wxMBConv& conv = wxConvUTF8)
+  {
+      return Write(s + wxT("\n"), conv);
   }
     // flush data not yet written
   bool Flush();
Index: src/common/file.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/file.cpp,v
retrieving revision 1.101
diff -u -r1.101 file.cpp
--- src/common/file.cpp	2006/10/31 23:29:02	1.101
+++ src/common/file.cpp	2006/11/11 23:40:26
@@ -140,6 +140,10 @@
     #define MAX_PATH 512
 #endif
 
+#ifndef MAX_LINEBUFFER
+    #define MAX_LINEBUFFER 512
+#endif
+
 // ============================================================================
 // implementation of wxFile
 // ============================================================================
@@ -304,6 +308,59 @@
     }
 
     return iRc;
+}
+
+// read
+wxString wxFile::Read(size_t nCount, const wxMBConv& conv)
+{
+    char *pBuf = (char *)malloc(sizeof(char) * (nCount + 1));
+
+    wxCHECK( (pBuf != NULL) && IsOpened(), wxEmptyString );
+
+    memset(pBuf, 0, nCount + 1);
+    ssize_t iRc = wxRead(m_fd, pBuf, nCount);
+
+    if ( iRc == -1 )
+    {
+        wxLogSysError(_("can't read from file descriptor %d"), m_fd);
+        free(pBuf);
+        return wxEmptyString;
+    }
+
+    wxString ret(pBuf, conv);
+    free(pBuf);
+    return wxString(ret, conv);
+}
+
+// read current line
+wxString wxFile::ReadLine(const wxMBConv& conv)
+{
+    wxCHECK(IsOpened(), wxEmptyString);
+
+    char lineBuf[MAX_LINEBUFFER];
+    memset(lineBuf, 0, MAX_LINEBUFFER);
+    
+    unsigned int character;
+    
+    for (character = 0; character < MAX_LINEBUFFER - 1; character++)
+    {
+        char cBuf;
+        ssize_t iRc = wxRead(m_fd, &cBuf, 1);
+        
+        if (iRc == -1)
+        {
+            wxLogSysError(_("can't read from file descriptor %d"), m_fd);
+            return wxEmptyString;
+        }
+        else if (iRc == 0)
+            break;
+        
+        lineBuf[character] = cBuf;
+        if (cBuf == '\n')
+            break;
+    }
+    
+    return wxString(lineBuf, conv);
 }
 
 // write

 	  	 

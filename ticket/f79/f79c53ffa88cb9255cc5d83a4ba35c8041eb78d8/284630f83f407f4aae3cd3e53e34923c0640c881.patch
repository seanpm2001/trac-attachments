diff --git samples/opengl/pyramid/pyramid.cpp samples/opengl/pyramid/pyramid.cpp
index bd0aa57..59e72b2 100755
--- samples/opengl/pyramid/pyramid.cpp
+++ samples/opengl/pyramid/pyramid.cpp
@@ -36,7 +36,7 @@
 #include "wx/glcanvas.h"
 #include "pyramid.h"
 
-// The application icon (under Windows and OS/2 it is in resources and even
+// the application icon (under Windows and OS/2 it is in resources and even
 // though we could still include the XPM here it would be unused)
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
@@ -120,10 +120,32 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_LOGWINDOW
     //Open a log window, don't show it though
     m_LogWin = new wxLogWindow(NULL, "Pyramid log window", false, false);
+    wxLog::SetActiveTarget(m_LogWin);
 #endif // wxUSE_LOGWINDOW
 
     // The canvas
-    m_mycanvas = new MyGLCanvas(this);
+    m_mycanvas = NULL;
+    wxGLAttributes vAttrs;
+    // Defaults should be accepted
+    vAttrs.PlatformDefaults().Defaults().EndList();
+    bool accepted = wxGLCanvas::IsDisplaySupported(vAttrs) ;
+    if ( !accepted )
+    {
+#if wxUSE_LOGWINDOW
+        wxLogMessage("First try with OpenGL visual attributes failed.");
+#endif // wxUSE_LOGWINDOW
+        // Try again without sample buffers
+        vAttrs.Reset();
+        vAttrs.PlatformDefaults().RGBA().DoubleBuffer().Depth(16).EndList();
+        accepted = wxGLCanvas::IsDisplaySupported(vAttrs) ;
+    }
+    if ( !accepted )
+    {
+        wxMessageBox("Visual attributes for OpenGL are not accepted.",
+                     "Error with OpenGL", wxOK | wxICON_ERROR);
+    }
+    else
+        m_mycanvas = new MyGLCanvas(this, vAttrs);
 
     SetMinSize(wxSize(250, 200));
 }
@@ -168,7 +190,7 @@ void MyFrame::OnLogWindow(wxCommandEvent& WXUNUSED(event))
 
 bool MyFrame::CanvasInit()
 {
-    return m_mycanvas->oglInit();
+    return m_mycanvas ? m_mycanvas->oglInit() : false;
 }
 
 // ----------------------------------------------------------------------------
@@ -340,22 +362,34 @@ BEGIN_EVENT_TABLE(MyGLCanvas, wxGLCanvas)
     EVT_MOUSE_EVENTS(MyGLCanvas::OnMouse)
 END_EVENT_TABLE()
 
-// GL desired attributes. We ask for OGL >= 3.2 Core Profile
-int OGL_attribs[] =
-  { WX_GL_RGBA,
-    WX_GL_MIN_RED, 8, WX_GL_MIN_GREEN, 8, WX_GL_MIN_BLUE, 8, WX_GL_MIN_ALPHA, 8,
-    WX_GL_DEPTH_SIZE, 24, WX_GL_DOUBLEBUFFER,
-    WX_GL_CORE_PROFILE, WX_GL_MAJOR_VERSION, 3, WX_GL_MINOR_VERSION, 2,
-    0
-  };
-
-MyGLCanvas::MyGLCanvas(MyFrame* parent)
-    : wxGLCanvas(parent, wxID_ANY, OGL_attribs)
+MyGLCanvas::MyGLCanvas(MyFrame* parent, const wxGLAttributes& canvasAttrs)
+                       : wxGLCanvas(parent, canvasAttrs)
 {
     m_parent = parent;
 
     m_oglManager = NULL;
     m_winHeight = 0; // We have not been sized yet
+
+    // Explicitly create a new rendering context instance for this canvas.
+    wxGLContextAttrs ctxAttrs;
+    // An impossible context, just to test IsOk()
+    ctxAttrs.PlatformDefaults().OGLVersion(99, 2).EndList();
+    m_oglContext = new wxGLContext(this, NULL, &ctxAttrs);
+    if ( !m_oglContext->IsOK() )
+    {
+        ctxAttrs.Reset();
+        ctxAttrs.PlatformDefaults().CoreProfile().OGLVersion(3, 2).EndList();
+        delete m_oglContext;
+        m_oglContext = new wxGLContext(this, NULL, &ctxAttrs);
+    }
+
+    if ( !m_oglContext->IsOK() )
+    {
+        wxMessageBox("This sample needs an OpenGL 3.2 capable driver",
+                     "OpenGL version error", wxOK | wxICON_INFORMATION, this);
+        delete m_oglContext;
+        m_oglManager = NULL;
+    }
 }
 
 MyGLCanvas::~MyGLCanvas()
@@ -378,26 +412,19 @@ MyGLCanvas::~MyGLCanvas()
 
 bool MyGLCanvas::oglInit()
 {
-    // Explicitly create a new rendering context instance for this canvas.
-    m_oglContext = new wxGLContext(this);
-
-    if ( !m_oglContext || !SetCurrent(*m_oglContext) )
-    {
-        wxMessageBox("GL-context failed.\n",
-                     "Initialization error", wxOK | wxICON_INFORMATION, this);
+    if ( !m_oglContext )
         return false;
-    }
 
     // Create our OGL manager, pass our OGL error handler
     m_oglManager = new myOGLManager(&fOGLErrHandler);
 
-    // glew needs this window DC
-    SetFocus();
+    // glew needs the current context
+    SetCurrent(*m_oglContext);
 
     // Initialize glew, the helper for gl calls
     if ( !m_oglManager->Init() )
     {
-        wxMessageBox("Error: OpenGL could not be initialized.\n",
+        wxMessageBox("Error: OpenGL could not be initialized.",
             "OpenGL initialization error", wxOK | wxICON_INFORMATION, this);
         return false;
     }
diff --git samples/opengl/pyramid/pyramid.h samples/opengl/pyramid/pyramid.h
index 4e10348..ab82fe5 100755
--- samples/opengl/pyramid/pyramid.h
+++ samples/opengl/pyramid/pyramid.h
@@ -53,7 +53,7 @@ private:
 class MyGLCanvas : public wxGLCanvas
 {
 public:
-    MyGLCanvas(MyFrame* parent);
+    MyGLCanvas(MyFrame* parent, const wxGLAttributes& canvasAttrs);
     ~MyGLCanvas();
 
     //Init the OpenGL stuff

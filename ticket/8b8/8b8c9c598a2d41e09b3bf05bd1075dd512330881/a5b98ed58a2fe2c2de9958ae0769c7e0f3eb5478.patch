Index: include/wx/unichar.h
===================================================================
--- include/wx/unichar.h	(revision 72267)
+++ include/wx/unichar.h	(working copy)
@@ -329,18 +329,14 @@
 // Comparison operators for the case when wxUniChar(Ref) is the second operand
 // implemented in terms of member comparison functions
 
-#define wxCMP_REVERSE(c1, c2, op) c2 op c1
+wxDEFINE_COMPARISONS_BY_REVERSE(char, const wxUniChar&)
+wxDEFINE_COMPARISONS_BY_REVERSE(char, const wxUniCharRef&)
 
-wxDEFINE_COMPARISONS(char, const wxUniChar&, wxCMP_REVERSE)
-wxDEFINE_COMPARISONS(char, const wxUniCharRef&, wxCMP_REVERSE)
+wxDEFINE_COMPARISONS_BY_REVERSE(wchar_t, const wxUniChar&)
+wxDEFINE_COMPARISONS_BY_REVERSE(wchar_t, const wxUniCharRef&)
 
-wxDEFINE_COMPARISONS(wchar_t, const wxUniChar&, wxCMP_REVERSE)
-wxDEFINE_COMPARISONS(wchar_t, const wxUniCharRef&, wxCMP_REVERSE)
+wxDEFINE_COMPARISONS_BY_REVERSE(const wxUniChar&, const wxUniCharRef&)
 
-wxDEFINE_COMPARISONS(const wxUniChar&, const wxUniCharRef&, wxCMP_REVERSE)
-
-#undef wxCMP_REVERSE
-
 // for expressions like c-'A':
 inline int operator-(char c1, const wxUniCharRef& c2) { return -(c2 - c1); }
 inline int operator-(const wxUniChar& c1, const wxUniCharRef& c2) { return -(c2 - c1); }
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 72267)
+++ include/wx/defs.h	(working copy)
@@ -673,9 +673,13 @@
     m(==,x,y,z) m(!=,x,y,z) m(>=,x,y,z) m(<=,x,y,z) m(>,x,y,z) m(<,x,y,z)
 
 /*
-    This is only used with wxDEFINE_COMPARISON_REV: it passes both the normal
-    and the reversed comparison operators to the macro.
+    These are only used with wxDEFINE_COMPARISON_[BY_]REV: they pass both the
+    normal and the reversed comparison operators to the macro.
  */
+#define wxFOR_ALL_COMPARISONS_2_REV(m, x, y) \
+    m(==,x,y,==) m(!=,x,y,!=) m(>=,x,y,<=) \
+    m(<=,x,y,>=) m(>,x,y,<) m(<,x,y,>)
+
 #define wxFOR_ALL_COMPARISONS_3_REV(m, x, y, z) \
     m(==,x,y,z,==) m(!=,x,y,z,!=) m(>=,x,y,z,<=) \
     m(<=,x,y,z,>=) m(>,x,y,z,<) m(<,x,y,z,>)
@@ -687,6 +691,9 @@
 #define wxDEFINE_COMPARISON_REV(op, T1, T2, cmp, oprev) \
     inline bool operator op(T2 y, T1 x) { return cmp(x, y, oprev); }
 
+#define wxDEFINE_COMPARISON_BY_REV(op, T1, T2, oprev) \
+    inline bool operator op(T1 x, T2 y) { return y oprev x; }
+
 /*
     Define all 6 comparison operators (==, !=, <, <=, >, >=) for the given
     types in the specified order. The implementation is provided by the cmp
@@ -697,6 +704,14 @@
     wxFOR_ALL_COMPARISONS_3(wxDEFINE_COMPARISON, T1, T2, cmp)
 
 /*
+    Define all 6 comparison operators (==, !=, <, <=, >, >=) for the given
+    types in the specified order, implemented in terms of existing operators
+    for the reverse order.
+ */
+#define wxDEFINE_COMPARISONS_BY_REVERSE(T1, T2) \
+    wxFOR_ALL_COMPARISONS_2_REV(wxDEFINE_COMPARISON_BY_REV, T1, T2)
+
+/*
     This macro allows to define all 12 comparison operators (6 operators for
     both orders of arguments) for the given types using the provided "cmp"
     macro to implement the actual comparison: the macro is called with the 2

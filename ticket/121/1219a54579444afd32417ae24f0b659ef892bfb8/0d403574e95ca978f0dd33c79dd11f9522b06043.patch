Index: samples/minimal/minimal.cpp
===================================================================
--- samples/minimal/minimal.cpp	(revision 72498)
+++ samples/minimal/minimal.cpp	(working copy)
@@ -29,6 +29,7 @@
 #ifndef WX_PRECOMP
     #include "wx/wx.h"
 #endif
+#include "wx/grid.h"
 
 // ----------------------------------------------------------------------------
 // resources
@@ -58,11 +59,11 @@
 };
 
 // Define a new frame type: this is going to be our main frame
-class MyFrame : public wxFrame
+class MyFrame : public wxDialog
 {
 public:
     // ctor(s)
-    MyFrame(const wxString& title);
+    MyFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
 
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
@@ -96,7 +97,7 @@
 // the event tables connect the wxWidgets events with the functions (event
 // handlers) which process them. It can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
-BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+BEGIN_EVENT_TABLE(MyFrame, wxDialog)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
 END_EVENT_TABLE()
@@ -119,22 +120,9 @@
 // 'Main program' equivalent: the program execution "starts" here
 bool MyApp::OnInit()
 {
-    // call the base class initialization method, currently it only parses a
-    // few common command-line options but it could be do more in the future
-    if ( !wxApp::OnInit() )
-        return false;
-
-    // create the main application window
-    MyFrame *frame = new MyFrame("Minimal wxWidgets App");
-
-    // and show it (the frames, unlike simple controls, are not shown when
-    // created initially)
-    frame->Show(true);
-
-    // success: wxApp::OnRun() will be called which will enter the main message
-    // loop and the application will run. If we returned false here, the
-    // application would exit immediately.
-    return true;
+    MyFrame* test_dialog = new MyFrame(NULL, wxID_ANY,_T("TEST"));
+    test_dialog->ShowModal();
+    return FALSE;
 }
 
 // ----------------------------------------------------------------------------
@@ -142,39 +130,53 @@
 // ----------------------------------------------------------------------------
 
 // frame constructor
-MyFrame::MyFrame(const wxString& title)
-       : wxFrame(NULL, wxID_ANY, title)
+MyFrame::MyFrame(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style) : wxDialog(parent,id,title,pos,size,style)
 {
-    // set the frame icon
-    SetIcon(wxICON(sample));
+    wxBoxSizer* sizer = new wxBoxSizer(wxHORIZONTAL);
+    SetSizer(sizer);
+    wxPanel* panel = new wxPanel(this);
+    sizer->Add(panel,1,wxEXPAND);
+    wxBoxSizer* sizer2 = new wxBoxSizer(wxVERTICAL);
 
-#if wxUSE_MENUS
-    // create a menu bar
-    wxMenu *fileMenu = new wxMenu;
 
-    // the "About" item should be in the help menu
-    wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, "&About\tF1", "Show about dialog");
+    wxGrid* grid = new wxGrid( panel,
+                        -1,
+                        wxDefaultPosition,
+                        wxDefaultSize );
 
-    fileMenu->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
+    // Then we call CreateGrid to set the dimensions of the grid
+    // (100 rows and 10 columns in this example)
+    grid->CreateGrid( 100, 10 );
 
-    // now append the freshly created menu to the menu bar...
-    wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(fileMenu, "&File");
-    menuBar->Append(helpMenu, "&Help");
+    // We can set the sizes of individual rows and columns
+    // in pixels
+    grid->SetRowSize( 0, 60 );
+    grid->SetColSize( 0, 120 );
 
-    // ... and attach this menu bar to the frame
-    SetMenuBar(menuBar);
-#endif // wxUSE_MENUS
+    // And set grid cell contents as strings
+    grid->SetCellValue( 0, 0, "wxGrid is good" );
 
-#if wxUSE_STATUSBAR
-    // create a status bar just for fun (by default with 1 pane only)
-    CreateStatusBar(2);
-    SetStatusText("Welcome to wxWidgets!");
-#endif // wxUSE_STATUSBAR
-}
+    // We can specify that some cells are read->only
+    grid->SetCellValue( 0, 3, "This is read->only" );
+    grid->SetReadOnly( 0, 3 );
 
+    // Colours can be specified for grid cell contents
+    grid->SetCellValue(3, 3, "green on grey");
+    grid->SetCellTextColour(3, 3, *wxGREEN);
+    grid->SetCellBackgroundColour(3, 3, *wxLIGHT_GREY);
 
+    // We can specify the some cells will store numeric
+    // values rather than strings. Here we set grid column 5
+    // to hold floating point values displayed with width of 6
+    // and precision of 2
+    grid->SetColFormatFloat(5, 6, 2);
+    grid->SetCellValue(0, 6, "3.1415");
+
+    sizer2->Add(grid,1,wxEXPAND);
+    panel->SetSizerAndFit(sizer2);
+ }
+
+
 // event handlers
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))

? combobox.patch
? grid_empty_line_in_multi_line_cell.patch
? odbc_to_msvc_setup.h.patch
? socket.patch
? treectrl_clientobhect_ud.patch
? treectrl_clientobject.patch
? treectrl_clientobject2.patch
? window_SetWindowStyleFlag.patch
? build/vs8
? include/wx/socket.h-
? src/common/socket.cpp-
? src/msw/gsocket.cpp-
? src/msw/window.cpp-
Index: include/wx/treebase.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/treebase.h,v
retrieving revision 1.57
diff -u -r1.57 treebase.h
--- include/wx/treebase.h	2006/04/14 16:52:56	1.57
+++ include/wx/treebase.h	2006/06/26 14:39:48
@@ -265,10 +265,13 @@
 //     descriptions below
 // ----------------------------------------------------------------------------
 
+class WXDLLEXPORT  wxTreeCtrlBase;
+
 class WXDLLEXPORT wxTreeEvent : public wxNotifyEvent
 {
 public:
     wxTreeEvent(wxEventType commandType = wxEVT_NULL, int id = 0);
+    wxTreeEvent( const wxEventType & commandType, int id, wxTreeCtrlBase * eventObject, const wxTreeItemId & itemId = wxTreeItemId () );
     wxTreeEvent(const wxTreeEvent & event);
 
     virtual wxEvent *Clone() const { return new wxTreeEvent(*this); }
Index: src/common/treebase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/treebase.cpp,v
retrieving revision 1.24
diff -u -r1.24 treebase.cpp
--- src/common/treebase.cpp	2006/05/18 09:33:17	1.24
+++ src/common/treebase.cpp	2006/06/26 14:44:28
@@ -69,6 +69,23 @@
     m_editCancelled = false;
 }
 
+// Same as above, but set m_item and the client object from the provided itemid.
+
+wxTreeEvent::wxTreeEvent(const wxEventType & commandType, int id, wxTreeCtrlBase * eventObject, const wxTreeItemId & itemid )
+    : wxNotifyEvent ( commandType, id )
+{
+    wxASSERT_MSG ( eventObject != 0, wxT ( "Have to provide a wxTreeCtrlBase as event object!" ) );
+
+    m_item            = itemid;
+    m_itemOld         = 0L;
+    m_editCancelled   = false;
+
+    SetEventObject   ( eventObject );
+
+    if ( ( eventObject != NULL ) && ( itemid.IsOk () ) )
+        SetClientObject ( eventObject -> GetItemData ( itemid ) );
+}
+
 wxTreeEvent::wxTreeEvent(const wxTreeEvent & event)
            : wxNotifyEvent(event)
 {
Index: src/msw/treectrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/treectrl.cpp,v
retrieving revision 1.232
diff -u -r1.232 treectrl.cpp
--- src/msw/treectrl.cpp	2006/06/14 12:00:51	1.232
+++ src/msw/treectrl.cpp	2006/06/26 14:23:56
@@ -1684,6 +1684,18 @@
 
     if ( TreeView_Expand(GetHwnd(), HITEM(item), flag) != 0 )
     {
+        // note that the {EXPAND|COLLAPS}ING event is sent by TreeView_Expand()
+        // itself
+
+        wxTreeEvent event ( gs_expandEvents[IsExpanded(item) ? 
+                                               IDX_EXPAND 
+                                            : 
+                                               IDX_COLLAPSE]
+                                           [IDX_DONE], 
+                            m_windowId, 
+                            this,
+                            item );
+#if 0
         wxTreeEvent event(wxEVT_NULL, m_windowId);
         event.m_item = item;
         event.SetEventObject(this);
@@ -1693,7 +1705,8 @@
         event.SetEventType(gs_expandEvents[IsExpanded(item) ? IDX_EXPAND
                                                             : IDX_COLLAPSE]
                                           [IDX_DONE]);
-
+        event.SetClientObject ( GetItemData ( event.m_item ) );
+#endif         
         (void)GetEventHandler()->ProcessEvent(event);
     }
     //else: change didn't took place, so do nothing at all
@@ -1781,11 +1794,15 @@
         // the notification from the control (i.e. TVN_SELCHANG{ED|ING}), so
         // send them ourselves
 
+        wxTreeEvent event ( wxEVT_COMMAND_TREE_SEL_CHANGING, m_windowId, this, item );
+#if 0
         wxTreeEvent event(wxEVT_NULL, m_windowId);
         event.m_item = item;
         event.SetEventObject(this);
 
         event.SetEventType(wxEVT_COMMAND_TREE_SEL_CHANGING);
+        event.SetClientObject ( GetItemData ( event.m_item ) );
+#endif         
         if ( !GetEventHandler()->ProcessEvent(event) || event.IsAllowed() )
         {
             if ( !TreeView_SelectItem(GetHwnd(), HITEM(item)) )
@@ -2033,12 +2050,18 @@
         // Convert the screen point to a client point
         wxPoint MenuPoint = ScreenToClient(wxPoint(x, y));
 
+        // can't use GetSelection() here as it would assert in multiselect mode
+
+        wxTreeEvent event ( wxEVT_COMMAND_TREE_ITEM_MENU, GetId (), this, wxTreeItemId ( TreeView_GetSelection ( GetHwnd () ) ) );
+#if 0
         wxTreeEvent event( wxEVT_COMMAND_TREE_ITEM_MENU, GetId() );
 
         // can't use GetSelection() here as it would assert in multiselect mode
         event.m_item = wxTreeItemId(TreeView_GetSelection(GetHwnd()));
         event.SetEventObject( this );
-
+        event.SetClientObject ( GetItemData ( event.m_item ) );
+#endif
+         
         // Get the bounding rectangle for the item, including the non-text areas
         wxRect ItemRect;
         GetBoundingRect(event.m_item, ItemRect, false);
@@ -2056,7 +2079,7 @@
             GetBoundingRect(event.m_item, ItemRect, true);
             event.m_pointDrag = wxPoint(ItemRect.GetX(), ItemRect.GetY() + ItemRect.GetHeight() / 2);
         }
-
+         
         if ( GetEventHandler()->ProcessEvent(event) )
             processed = true;
         //else: continue with generating wxEVT_CONTEXT_MENU in base class code
@@ -2259,12 +2282,15 @@
                     m_dragImage = NULL;
 
                     // generate the drag end event
+                    wxTreeEvent event ( wxEVT_COMMAND_TREE_END_DRAG, m_windowId, this, htItem );
+#if 0
                     wxTreeEvent event(wxEVT_COMMAND_TREE_END_DRAG, m_windowId);
 
                     event.m_item = htItem;
                     event.m_pointDrag = wxPoint(x, y);
                     event.SetEventObject(this);
-
+                    event.SetClientObject ( GetItemData ( event.m_item ) );
+#endif         
                     (void)GetEventHandler()->ProcessEvent(event);
 
                     // if we don't do it, the tree seems to think that 2 items
@@ -2443,7 +2469,7 @@
 // process WM_NOTIFY Windows message
 bool wxTreeCtrl::MSWOnNotify(int idCtrl, WXLPARAM lParam, WXLPARAM *result)
 {
-    wxTreeEvent event(wxEVT_NULL, m_windowId);
+    wxTreeEvent event(wxEVT_NULL, m_windowId, this );
     wxEventType eventType = wxEVT_NULL;
     NMHDR *hdr = (NMHDR *)lParam;
 
@@ -2618,15 +2644,19 @@
                 if ( !wxIsCtrlDown() && !wxIsShiftDown() && !isAltDown &&
                      ((info->wVKey == VK_SPACE) || (info->wVKey == VK_RETURN)) )
                 {
+                   wxTreeItemId  item  = ( ( GetWindowStyle () & wxTR_MULTIPLE ) == 0 ) ? GetSelection () : wxTreeItemId ();
+                   wxTreeEvent   event2 ( wxEVT_COMMAND_TREE_ITEM_ACTIVATED, m_windowId, this, item );
+#if 0
                     wxTreeEvent event2(wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                                        m_windowId);
                     event2.SetEventObject(this);
                     if ( !(GetWindowStyle() & wxTR_MULTIPLE) )
                     {
                         event2.m_item = GetSelection();
+                        event.SetClientObject ( GetItemData ( event2.m_item ) );
                     }
                     //else: don't know how to get it
-
+#endif         
                     (void)GetEventHandler()->ProcessEvent(event2);
                 }
             }
@@ -2796,9 +2826,14 @@
             return wxControl::MSWOnNotify(idCtrl, lParam, result);
     }
 
+#if 0
     event.SetEventObject(this);
+#endif
     event.SetEventType(eventType);
 
+    if ( event.m_item.IsOk () )
+        event.SetClientObject ( GetItemData ( event.m_item ) );
+         
     bool processed = GetEventHandler()->ProcessEvent(event);
 
     // post processing

 	  	 

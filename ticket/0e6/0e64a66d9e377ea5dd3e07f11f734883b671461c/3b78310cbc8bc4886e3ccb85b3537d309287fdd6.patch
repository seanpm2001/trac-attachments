Index: include/wx/graphics.h
===================================================================
--- include/wx/graphics.h	(revision 76253)
+++ include/wx/graphics.h	(working copy)
@@ -870,6 +870,9 @@
     // create a subimage from a native image representation
     virtual wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h  ) = 0;
 
+    virtual wxString GetName() const = 0;
+    virtual void GetVersion(int *major=NULL, int *minor=NULL, int *micro=NULL) const = 0;
+
 private:
     wxDECLARE_NO_COPY_CLASS(wxGraphicsRenderer);
     DECLARE_ABSTRACT_CLASS(wxGraphicsRenderer)
Index: interface/wx/graphics.h
===================================================================
--- interface/wx/graphics.h	(revision 76253)
+++ interface/wx/graphics.h	(working copy)
@@ -1212,6 +1212,33 @@
                                              wxDouble w, wxDouble h) = 0;
 
     /**
+        Returns the name of the technology used by the renderer.
+
+        Currently this function returns "gdiplus" for Windows GDI+ implementation,
+        "cairo" for Cairo implementation and "cg" for OS X CoreGraphics
+        implementation.
+
+        Note: the string returned by this method is considered proper to be
+        included in a filename (it is not a label and is not expected to be
+        translated).
+
+        @since 3.1.0
+     */
+    virtual wxString GetName() const = 0;
+
+    /**
+        Returns the version major, minor and micro/build of the technology used
+        by the renderer.
+
+        Currently this function returns the OS major,minor,micro=0 version for
+        GDI+ and CoreGraphics engines which are considered part of their
+        respective OS.
+        For Cairo, this is the major,minor,micro version of the Cairo library
+        which is returned.
+     */
+    virtual void GetVersion(int *major=NULL, int *minor=NULL, int *micro=NULL) const = 0;
+
+    /**
         Returns the default renderer on this platform. On OS X this is the Core
         Graphics (a.k.a. Quartz 2D) renderer, on MSW the GDIPlus renderer, and
         on GTK we currently default to the cairo renderer.
Index: src/generic/graphicc.cpp
===================================================================
--- src/generic/graphicc.cpp	(revision 76253)
+++ src/generic/graphicc.cpp	(working copy)
@@ -2398,6 +2398,8 @@
     // create a subimage from a native image representation
     virtual wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h  );
 
+    virtual wxString GetName() const wxOVERRIDE;
+    virtual void GetVersion(int *major, int *minor, int *micro) const wxOVERRIDE;
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxCairoRenderer)
 } ;
 
@@ -2651,6 +2653,20 @@
     return p;
 }
 
+wxString wxCairoRenderer::GetName() const
+{
+    return "cairo";
+}
+
+void wxCairoRenderer::GetVersion(int *major, int *minor, int *micro) const
+{
+    int dummymajor, dummyminor, dummymicro;
+    sscanf (cairo_version_string(), "%d.%d.%d",
+        major?major:&dummymajor,
+        minor?minor:&dummyminor,
+        micro?micro:&dummymicro);
+}
+
 wxGraphicsRenderer* wxGraphicsRenderer::GetCairoRenderer()
 {
     return &gs_cairoGraphicsRenderer;
Index: src/msw/graphics.cpp
===================================================================
--- src/msw/graphics.cpp	(revision 76253)
+++ src/msw/graphics.cpp	(working copy)
@@ -587,6 +587,9 @@
     // create a subimage from a native image representation
     virtual wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h  );
 
+    virtual wxString GetName() const wxOVERRIDE;
+    virtual void GetVersion(int *major, int *minor, int *micro) const wxOVERRIDE;
+
 protected :
     bool EnsureIsLoaded();
     void Load();
@@ -2280,6 +2283,21 @@
         return wxNullGraphicsBitmap;
 }
 
+wxString wxGDIPlusRenderer::GetName() const
+{
+    return "gdiplus";
+}
+
+void wxGDIPlusRenderer::GetVersion(int *major, int *minor, int *micro) const
+{
+    if (major)
+        *major = wxPlatformInfo::Get().GetOSMajorVersion();
+    if (minor)
+        *minor = wxPlatformInfo::Get().GetOSMinorVersion();
+    if (micro)
+        *micro = 0;
+}
+
 // Shutdown GDI+ at app exit, before possible dll unload
 class wxGDIPlusRendererModule : public wxModule
 {
Index: src/osx/carbon/graphics.cpp
===================================================================
--- src/osx/carbon/graphics.cpp	(revision 76253)
+++ src/osx/carbon/graphics.cpp	(working copy)
@@ -2654,6 +2654,9 @@
 
     // create a native bitmap representation
     virtual wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h  ) wxOVERRIDE ;
+
+    virtual wxString GetName() const wxOVERRIDE;
+    virtual void GetVersion(int *major, int *minor, int *micro) const wxOVERRIDE;
 private :
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxMacCoreGraphicsRenderer)
 } ;
@@ -2875,6 +2878,21 @@
         return wxNullGraphicsBitmap;
 }
 
+wxString wxMacCoreGraphicsRenderer::GetName() const
+{
+    return "cg";
+}
+
+void wxMacCoreGraphicsRenderer::GetVersion(int *major, int *minor, int *micro) const
+{
+    if (major)
+        *major = wxPlatformInfo::Get().GetOSMajorVersion();
+    if (minor)
+        *minor = wxPlatformInfo::Get().GetOSMinorVersion();
+    if (micro)
+        *micro = 0;
+}
+
 wxGraphicsBrush
 wxMacCoreGraphicsRenderer::CreateLinearGradientBrush(wxDouble x1, wxDouble y1,
                                                      wxDouble x2, wxDouble y2,

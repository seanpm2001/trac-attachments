--- wxSVN\include\wx\numformatter.h	2011-03-01 16:54:31.140625000 +0100
+++ mispatches\valnum_20110413\numformatter.h	2011-04-13 17:41:27.656250000 +0200
@@ -28,14 +28,33 @@
     // Format a number as a string. By default, the thousands separator is
     // used, specify Style_None to prevent this. For floating point numbers,
-    // precision can also be specified.
+    // precision can also be specified. For doubles, width is specified.
+    static wxString ToString(int val,
+                             int precision,
+                             int style = Style_WithThousandsSep);
     static wxString ToString(long val,
+                             int precision,
+                             int style = Style_WithThousandsSep);
+    static wxString ToString(unsigned int val,
+                             int precision,
+                             int style = Style_WithThousandsSep);
+    static wxString ToString(unsigned long val,
+                             int precision,
                              int style = Style_WithThousandsSep);
+
 #ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
     static wxString ToString(wxLongLong_t val,
+                             int precision,
+                             int style = Style_WithThousandsSep);
+    static wxString ToString(wxULongLong_t val,
+                             int precision,
                              int style = Style_WithThousandsSep);
 #endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
-    static wxString ToString(double val,
+
+    static wxString ToString(float val,
                              int precision,
                              int style = Style_WithThousandsSep);
+    static wxString ToString(double val,
+                             int nuDigits,
+                             int style = Style_WithThousandsSep);
 
     // Parse a string representing a number, possibly with thousands separator.
@@ -43,11 +62,15 @@
     // Return true on success and stores the result in the provided location
     // which must be a valid non-NULL pointer.
+    static bool FromString(wxString s, int *val);
     static bool FromString(wxString s, long *val);
+    static bool FromString(wxString s, unsigned int *val);
+    static bool FromString(wxString s, unsigned long *val);
 #ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
     static bool FromString(wxString s, wxLongLong_t *val);
+    static bool FromString(wxString s, wxULongLong_t *val);
 #endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
+    static bool FromString(wxString s, float *val);
     static bool FromString(wxString s, double *val);
 
-
     // Get the decimal separator for the current locale. It is always defined
     // and we fall back to returning '.' in case of an error.
@@ -59,7 +82,6 @@
     static bool GetThousandsSeparatorIfUsed(wxChar *sep);
 
-private:
-    // Post-process the string representing an integer.
-    static wxString PostProcessIntString(wxString s, int style);
+    //Find exponential
+    static size_t FindExponential(const wxString& s);
 
     // Add the thousands separators to a string representing a number without
@@ -67,4 +89,11 @@
     static void AddThousandsSeparators(wxString& s);
 
+    // Remove all thousands separators from a string representing a number.
+    static void RemoveThousandsSeparators(wxString& s);
+
+private:
+    // Post-process the string representing an integer.
+    static wxString PostProcessIntString(wxString s, int style);
+
     // Remove trailing zeroes and, if there is nothing left after it, the
     // decimal separator itself from a string representing a floating point
@@ -72,7 +101,7 @@
     static void RemoveTrailingZeroes(wxString& s);
 
-    // Remove all thousands separators from a string representing a number.
-    static void RemoveThousandsSeparators(wxString& s);
 };
 
 #endif // _WX_NUMFORMATTER_H_
+
+

--- wxSVN\src\common\numformatter.cpp	2011-04-05 18:04:39.890625000 +0200
+++ mispatches\valnum_20110413\numformatter.cpp	2011-04-13 17:43:02.125000000 +0200
@@ -19,6 +19,7 @@
 #endif
 
-#include "wx/numformatter.h"
 #include "wx/intl.h"
+#include "wx/numformatter.h"
+#include <limits>
 
 // ----------------------------------------------------------------------------
@@ -186,18 +187,30 @@
         AddThousandsSeparators(s);
 
-    wxASSERT_MSG( !(style & Style_NoTrailingZeroes),
-                  "Style_NoTrailingZeroes can't be used with integer values" );
-
     return s;
 }
 
-wxString wxNumberFormatter::ToString(long val, int style)
+wxString wxNumberFormatter::ToString(int val, int precision, int style)
+{
+    return PostProcessIntString(wxString::Format("%ld", val), style);
+}
+
+wxString wxNumberFormatter::ToString(long val, int precision, int style)
 {
     return PostProcessIntString(wxString::Format("%ld", val), style);
 }
 
+wxString wxNumberFormatter::ToString(unsigned int val, int precision, int style)
+{
+    return PostProcessIntString(wxString::Format("%lu", val), style);
+}
+
+wxString wxNumberFormatter::ToString(unsigned long val, int precision, int style)
+{
+    return PostProcessIntString(wxString::Format("%lu", val), style);
+}
+
 #ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
 
-wxString wxNumberFormatter::ToString(wxLongLong_t val, int style)
+wxString wxNumberFormatter::ToString(wxLongLong_t val, int precision, int style)
 {
     return PostProcessIntString(wxString::Format("%" wxLongLongFmtSpec "d", val),
@@ -205,7 +218,13 @@
 }
 
+wxString wxNumberFormatter::ToString(wxULongLong_t val, int precision, int style)
+{
+    return PostProcessIntString(wxString::Format("%" wxLongLongFmtSpec "u", val),
+                                style);
+}
+
 #endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
 
-wxString wxNumberFormatter::ToString(double val, int precision, int style)
+wxString wxNumberFormatter::ToString(float val, int precision, int style)
 {
     const wxString fmt = wxString::Format("%%.%df", precision);
@@ -221,4 +240,17 @@
 }
 
+wxString wxNumberFormatter::ToString(double val, int nuDigits, int style)
+{
+    const wxString fmt = wxString::Format("%%.%dG", nuDigits);
+    wxString s = wxString::Format(fmt, val);
+    if ( style & Style_WithThousandsSep )
+        AddThousandsSeparators(s);
+
+    if ( style & Style_NoTrailingZeroes )
+        RemoveTrailingZeroes(s);
+
+    return s;
+}
+
 void wxNumberFormatter::AddThousandsSeparators(wxString& s)
 {
@@ -230,5 +262,10 @@
     if ( pos == wxString::npos )
     {
+        //If we get here with exponential (why?) we must take it into account,
+        //even if exponential style usually has only one integer digit.
+        pos = FindExponential(s);
+
         // Start grouping at the end of an integer number.
+        if ( pos == wxString::npos )
         pos = s.length();
     }
@@ -251,18 +288,36 @@
 {
     const size_t posDecSep = s.find(GetDecimalSeparator());
-    wxCHECK_RET( posDecSep != wxString::npos,
-                 wxString::Format("No decimal separator in \"%s\"", s) );
+    if( posDecSep == wxString::npos)
+        return; //No decimal separator in 's' (i.e. 1E+3) so, nothing to do.
     wxCHECK_RET( posDecSep, "Can't start with decimal separator" );
 
-    // Find the last character to keep.
-    size_t posLastNonZero = s.find_last_not_of("0");
+    // Search for exponential
+    size_t len = s.length();
+    size_t posExp = FindExponential(s);
+
+    // Find the last character to keep before exponential.
+    size_t posLastNonZero = s.find_last_not_of("0", posExp);
+    if ( posLastNonZero >= posExp )
+        return;
 
     // If it's the decimal separator itself, don't keep it neither.
     if ( posLastNonZero == posDecSep )
         posLastNonZero--;
+    if (posExp == wxString::npos )
+        posExp = len;
 
-    s.erase(posLastNonZero + 1);
+    s.erase(posLastNonZero + 1 , posExp - posLastNonZero - 1);
 }
 
+//Find exponential
+size_t wxNumberFormatter::FindExponential(const wxString& s)
+{
+    size_t posExp = s.find("E");
+    if (posExp == wxString::npos )
+        posExp = s.find("e");
+    return posExp;
+}
+
+
 // ----------------------------------------------------------------------------
 // Conversion from strings
@@ -278,4 +333,14 @@
 }
 
+bool wxNumberFormatter::FromString(wxString s, int *val)
+{
+    RemoveThousandsSeparators(s);
+    long lval;
+    bool res = s.ToLong(&lval);
+    if ( res )
+        *val = (int)lval;
+    return res;
+}
+
 bool wxNumberFormatter::FromString(wxString s, long *val)
 {
@@ -284,4 +349,20 @@
 }
 
+bool wxNumberFormatter::FromString(wxString s, unsigned int *val)
+{
+    RemoveThousandsSeparators(s);
+    unsigned long uval;
+    bool res = s.ToULong(&uval);
+    if ( res )
+        *val = (unsigned int)uval;
+    return res;
+}
+
+bool wxNumberFormatter::FromString(wxString s, unsigned long *val)
+{
+    RemoveThousandsSeparators(s);
+    return s.ToULong(val);
+}
+
 #ifdef wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
 
@@ -292,6 +373,27 @@
 }
 
+bool wxNumberFormatter::FromString(wxString s, wxULongLong_t *val)
+{
+    RemoveThousandsSeparators(s);
+    return s.ToULongLong(val);
+}
+
 #endif // wxHAS_LONG_LONG_T_DIFFERENT_FROM_LONG
 
+bool wxNumberFormatter::FromString(wxString s, float *val)
+{
+    RemoveThousandsSeparators(s);
+    //By now we lack wxString::ToFloat()
+    double d;
+    bool res = s.ToDouble(&d);
+    if ( res
+        && d >= std::numeric_limits<float>::min()
+        && d <= std::numeric_limits<float>::max())
+        *val = (float)d;
+    else
+        res = false;
+    return res;
+}
+
 bool wxNumberFormatter::FromString(wxString s, double *val)
 {
@@ -299,2 +401,4 @@
     return s.ToDouble(val);
 }
+
+

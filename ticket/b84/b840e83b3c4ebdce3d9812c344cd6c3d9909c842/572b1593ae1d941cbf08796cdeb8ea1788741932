Index: docs/latex/wx/event.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/event.tex,v
retrieving revision 1.3
diff -u -r1.3 event.tex
--- docs/latex/wx/event.tex	2001/02/08 15:13:06	1.3
+++ docs/latex/wx/event.tex	2001/06/28 21:09:08
@@ -63,6 +63,26 @@
 
 Timestamp for this event.
 
+\membersection{wxEvent::Clone}\label{wxeventclone}
+
+\func{virtual wxEvent*}{Clone}{\void} const
+
+Returns a copy of the event.
+
+Any event that is posted to the wxWindows event system for later action (via
+\helpref{wxEvtHandler::AddPendingEvent}{wxevthandleraddpendingevent} or
+\helpref{wxPostEvent}{wxpostevent}) must implement this method. All wxWindows
+events fully implement this method, but any derived events implemented by the
+user should also implement this method just in case they (or some event
+derived from them) are ever posted.
+
+All wxWindows events implement a copy constructor, so the easiest way of
+implementing the Clone function is to implement a copy constructor for
+a new event (call it MyEvent) and then define the Clone function like this:
+\begin{verbatim}
+    wxEvent *Clone(void) const { return new MyEvent(*this); }
+\end{verbatim}
+
 \membersection{wxEvent::GetEventObject}
 
 \func{wxObject*}{GetEventObject}{\void}
Index: docs/latex/wx/evthand.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/evthand.tex,v
retrieving revision 1.10
diff -u -r1.10 evthand.tex
--- docs/latex/wx/evthand.tex	2001/02/16 18:49:47	1.10
+++ docs/latex/wx/evthand.tex	2001/06/28 21:09:08
@@ -36,9 +36,7 @@
 
 \func{virtual void}{AddPendingEvent}{\param{wxEvent\& }{event}}
 
-Adds an event to be processed later. The function will return immediately and the
-event will get processed in idle time using the \helpref{wxEvtHandler::ProcessEvent}{wxevthandlerprocessevent} 
-method.
+This function posts an event to be processed later.
 
 \wxheading{Parameters}
 
@@ -46,26 +44,32 @@
 
 \wxheading{Remarks}
 
-Note that this requires that the event implements 
-\helpref{CopyObject}{wxobjectcopyobject} 
-method so that the event can be duplicated and stored until it gets processed later.
-Not all events in wxWindows currently fully implement this method,
-so you may have to look at the source to verify this.
-
-This methods automatically wakes up idle handling even if the underlying window 
-system is currently idle anyway and thus would not send any idle events. (Waking
-up the idle handling is done calling \helpref{::wxWakeUpIdle}{wxwakeupidle}.)
-
-This is also the method to call for inter-thread communication. In
-a multi-threaded program, you will often have to inform the main GUI thread
-about the status of other working threads and this has to be done using this
-method - which also means that this method is thread safe by means of using
-crtical sections where needed.
+The difference between sending an event (using the
+\helpref{ProcessEvent}{wxevthandlerprocessevent} method) and posting it is
+that in the first case the event is processed before the function returns,
+while in the second case, the function returns immediately and the event will
+be processed sometime later (usually during the next event loop iteration).
+
+A copy of {\it event} is made by the function, so the original can be deleted
+as soon as function returns (it is common that the original is created on the
+stack).  This requires that the \helpref{wxEvent::Clone}{wxeventclone} method
+be implemented by {\it event} so that it can be duplicated and stored until
+it gets processed.
+
+This is also the method to call for inter-thread communication---it will
+post events safely between different threads which means that this method is
+thread-safe by using critical sections where needed.  In a multi-threaded
+program, you often need to inform the main GUI thread about the status of
+other working threads and such notification should be done using this method.
+
+This method automatically wakes up idle handling if the underlying window 
+system is currently idle and thus would not send any idle events. (Waking
+up idle handling is done calling \helpref{::wxWakeUpIdle}{wxwakeupidle}.)
 
 % VZ: bad idea IMHO - we're going to have a lot of problems with this
-Furthermore, it may be noted that some ports of wxWindows will probably move
-to using this method more and more in preference over calling ProcessEvent()
-directly so as to avoid problems with reentrant code.
+Furthermore, note that some ports of wxWindows will probably move
+to using this method more and more in preference to calling ProcessEvent()
+directly so as to avoid problems with recursive code.
 
 \membersection{wxEvtHandler::Connect}\label{wxevthandlerconnect}
 
Index: docs/latex/wx/function.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/function.tex,v
retrieving revision 1.102
diff -u -r1.102 function.tex
--- docs/latex/wx/function.tex	2001/06/17 13:32:53	1.102
+++ docs/latex/wx/function.tex	2001/06/28 21:09:16
@@ -1888,21 +1888,12 @@
 
 \func{void}{wxPostEvent}{\param{wxEvtHandler *}{dest}, \param{wxEvent\& }{event}}
 
-This function posts the event to the specified {\it dest} object. The
-difference between sending an event and posting it is that in the first case
-the event is processed before the function returns (in wxWindows, event sending
-is done with \helpref{ProcessEvent}{wxevthandlerprocessevent} function), but in
-the second, the function returns immediately and the event will be processed
-sometime later - usually during the next even loop iteration.
-
-Note that a copy of the {\it event} is made by the function, so the original
-copy can be deleted as soon as function returns. This function can also be used
-to send events between different threads safely. As this function makes a
-copy of the event, the event needs to have a fully implemented Clone() method,
-which may not be the case for all event in wxWindows.
-
-See also \helpref{AddPendingEvent}{wxevthandleraddpendingevent} (which this function
-uses internally).
+In a GUI application, this function posts {\it event} to the specified
+{\it dest} object using
+\helpref{wxEvtHandler::AddPendingEvent}{wxevthandleraddpendingevent}.
+Otherwise, it dispatches {\it event} immediately using
+\helpref{wxEvtHandler::ProcessEvent}{wxevthandlerprocessevent}.
+See the respective documentation for details (and caveats).
 
 \wxheading{Include files}
 
Index: include/wx/event.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/event.h,v
retrieving revision 1.120
diff -u -r1.120 event.h
--- include/wx/event.h	2001/06/26 20:59:06	1.120
+++ include/wx/event.h	2001/06/28 21:09:46
@@ -315,10 +315,13 @@
 
 class WXDLLEXPORT wxEvent : public wxObject
 {
-    DECLARE_ABSTRACT_CLASS(wxEvent)
+private:
+    wxEvent&operator=(const wxEvent&)const;    // not instantiated
+protected:
+    wxEvent(const wxEvent&);                   // for implementing Clone()
 
 public:
-    wxEvent(int id = 0);
+    wxEvent(int id = 0, wxEventType commandType = wxEVT_NULL);
     ~wxEvent() {}
 
     void SetEventType(wxEventType typ) { m_eventType = typ; }
@@ -337,11 +340,13 @@
     void Skip(bool skip = TRUE) { m_skipped = skip; }
     bool GetSkipped() const { return m_skipped; };
 
-    // implementation only: this test is explicitlty anti OO and this functions
-    // exists only for optimization purposes
-    bool IsCommandEvent() const { return m_isCommandEvent; }
+    // Optimization: instead of using the costly IsKindOf() we have a
+    // special function that tells whether we're a command event.  This
+    // is explicitly anti-OO, but it's by far the most common case.
+    virtual bool IsCommandEvent() const { return FALSE; }
 
-    void CopyObject(wxObject& object_dest) const;
+    // specialized clone function since it is done a lot
+    virtual wxEvent *Clone(void) const { return new wxEvent(*this); }
 
 public:
     wxObject*         m_eventObject;
@@ -350,10 +355,6 @@
     int               m_id;
     wxObject*         m_callbackUserData;
     bool              m_skipped;
-
-    // optimization: instead of using costly IsKindOf() we keep a flag telling
-    // whether we're a command event (by far the most common case)
-    bool              m_isCommandEvent;
 };
 
 #if wxUSE_GUI
@@ -379,6 +380,7 @@
 
 class WXDLLEXPORT wxCommandEvent : public wxEvent
 {
+    // Need to distinguish this class dynamically
     DECLARE_DYNAMIC_CLASS(wxCommandEvent)
 
 public:
@@ -416,8 +418,10 @@
 
     void SetInt(int i) { m_commandInt = i; }
     long GetInt() const { return m_commandInt ; }
+
+    virtual bool IsCommandEvent() const { return TRUE; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxCommandEvent(*this); }
 
 #ifdef WXWIN_COMPATIBILITY_2
     bool Checked() const { return IsChecked(); }
@@ -448,14 +452,12 @@
     // for implementation code only: is the operation allowed?
     bool IsAllowed() const { return m_bAllow; }
 
-    // probably useless: CopyObject() is used for deferred event
+    // probably useless: Clone() is used for deferred event
     // handling but wxNotifyEvent must be processed immediately
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxNotifyEvent(*this); }
 
 private:
     bool m_bAllow;
-
-    DECLARE_DYNAMIC_CLASS(wxNotifyEvent)
 };
 
 // Scroll event class, derived form wxCommandEvent. wxScrollEvents are
@@ -473,8 +475,6 @@
 
 class WXDLLEXPORT wxScrollEvent : public wxCommandEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxScrollEvent)
-
 public:
     wxScrollEvent(wxEventType commandType = wxEVT_NULL,
                   int id = 0, int pos = 0, int orient = 0);
@@ -489,6 +489,8 @@
     int GetPosition() const { return m_commandInt ; }
     void SetOrientation(int orient) { m_extraLong = (long) orient; }
     void SetPosition(int pos) { m_commandInt = pos; }
+
+    // underlying Clone() works since we do not add any data members
 };
 
 // ScrollWin event class, derived fom wxEvent. wxScrollWinEvents
@@ -520,13 +522,11 @@
     void SetOrientation(int orient) { m_extraLong = (long) orient; }
     void SetPosition(int pos) { m_commandInt = pos; }
 
-    void CopyObject(wxObject& object_dest) const;
+    wxEvent *Clone(void) const { return new wxScrollWinEvent(*this); }
 
 public:
     int               m_commandInt;    // Additional information
     long              m_extraLong;
-
-    DECLARE_DYNAMIC_CLASS(wxScrollWinEvent)
 };
 
 // Mouse event class
@@ -689,9 +689,8 @@
     // Returns the configured number of lines (or whatever) to be scrolled per
     // wheel action.  Defaults to one.
     int GetLinesPerAction() const { return m_linesPerAction; }
-
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxMouseEvent(*this); }
 
 public:
     wxCoord m_x, m_y;
@@ -708,9 +707,6 @@
     int           m_wheelRotation;
     int           m_wheelDelta;
     int           m_linesPerAction;
-
-private:
-    DECLARE_DYNAMIC_CLASS(wxMouseEvent)
 };
 
 // Cursor set event
@@ -736,6 +732,7 @@
     void SetCursor(const wxCursor& cursor) { m_cursor = cursor; }
     const wxCursor& GetCursor() const { return m_cursor; }
     bool HasCursor() const { return m_cursor.Ok(); }
+    wxEvent *Clone(void) const { return new wxSetCursorEvent(*this); }
 
 private:
     wxCoord  m_x, m_y;
@@ -753,8 +750,6 @@
 
 class WXDLLEXPORT wxKeyEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxKeyEvent)
-
 public:
     wxKeyEvent(wxEventType keyType = wxEVT_NULL);
 
@@ -793,7 +788,7 @@
     // Get Y position
     wxCoord GetY() const { return m_y; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxKeyEvent(*this); }
 
     // deprecated
     long KeyCode() const { return m_keyCode; }
@@ -817,8 +812,6 @@
 
 class WXDLLEXPORT wxSizeEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxSizeEvent)
-
 public:
     wxSize m_size;
 
@@ -829,7 +822,7 @@
 
     wxSize GetSize() const { return m_size; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxSizeEvent(*this); }
 };
 
 // Move event class
@@ -840,8 +833,6 @@
 
 class WXDLLEXPORT wxMoveEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxMoveEvent)
-
 public:
     wxPoint m_pos;
 
@@ -852,7 +843,7 @@
 
     wxPoint GetPosition() const { return m_pos; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxMoveEvent(*this); }
 };
 
 // Paint event class
@@ -869,8 +860,6 @@
 
 class WXDLLEXPORT wxPaintEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxPaintEvent)
-
 public:
     wxPaintEvent(int Id = 0)
     {
@@ -889,6 +878,8 @@
         g_isPainting--;
     }
 #endif // debug
+
+    // underlying Clone() works since we do not add any data members
 };
 
 class WXDLLEXPORT wxNcPaintEvent : public wxEvent
@@ -896,8 +887,7 @@
 public:
     wxNcPaintEvent(int id = 0) : wxEvent(id) { SetEventType(wxEVT_NC_PAINT); }
 
-private:
-    DECLARE_DYNAMIC_CLASS(wxNcPaintEvent)
+    // underlying Clone() works since we do not add any data members
 };
 
 // Erase background event class
@@ -907,8 +897,6 @@
 
 class WXDLLEXPORT wxEraseEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxEraseEvent)
-
 public:
     wxDC *m_dc;
 
@@ -916,7 +904,7 @@
         { m_eventType = wxEVT_ERASE_BACKGROUND; m_id = Id; m_dc = dc; }
     wxDC *GetDC() const { return m_dc; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxEraseEvent(*this); }
 };
 
 // Focus event class
@@ -939,10 +927,10 @@
     wxWindow *GetWindow() const { return m_win; }
     void SetWindow(wxWindow *win) { m_win = win; }
 
+    wxEvent *Clone(void) const { return new wxFocusEvent(*this); }
+
 private:
     wxWindow *m_win;
-
-    DECLARE_DYNAMIC_CLASS(wxFocusEvent)
 };
 
 // Activate event class
@@ -953,14 +941,12 @@
 
 class WXDLLEXPORT wxActivateEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxActivateEvent)
-
 public:
     wxActivateEvent(wxEventType type = wxEVT_NULL, bool active = TRUE, int Id = 0)
         { m_eventType = type; m_active = active; m_id = Id; }
     bool GetActive() const { return m_active; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxActivateEvent(*this); }
 
 private:
     bool m_active;
@@ -973,11 +959,11 @@
 
 class WXDLLEXPORT wxInitDialogEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxInitDialogEvent)
-
 public:
     wxInitDialogEvent(int Id = 0)
         { m_eventType = wxEVT_INIT_DIALOG; m_id = Id; }
+
+    // underlying Clone() works since we do not add any data members
 };
 
 // Miscellaneous menu event class
@@ -990,15 +976,14 @@
 
 class WXDLLEXPORT wxMenuEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxMenuEvent)
-
 public:
     wxMenuEvent(wxEventType type = wxEVT_NULL, int id = 0)
       { m_eventType = type; m_menuId = id; }
 
     int GetMenuId() const { return m_menuId; }
+
+    wxEvent *Clone(void) const { return new wxMenuEvent(*this); }
 
-    void CopyObject(wxObject& obj) const;
 private:
     int m_menuId;
 };
@@ -1012,8 +997,6 @@
 
 class WXDLLEXPORT wxCloseEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxCloseEvent)
-
 public:
     wxCloseEvent(wxEventType type = wxEVT_NULL, int id = 0)
     {
@@ -1051,7 +1034,7 @@
     bool GetForce() const { return m_force; }
 #endif
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxCloseEvent(*this); }
 
 protected:
     bool m_loggingOff;
@@ -1075,12 +1058,10 @@
     void SetShow(bool show) { m_show = show; }
     bool GetShow() const { return m_show; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxShowEvent(*this); }
 
 protected:
     bool m_show;
-
-    DECLARE_DYNAMIC_CLASS(wxShowEvent)
 };
 
 /*
@@ -1096,10 +1077,10 @@
     // return true if the frame was iconized, false if restored
     bool Iconized() const { return m_iconized; }
 
+    wxEvent *Clone(void) const { return new wxIconizeEvent(*this); }
+
 protected:
     bool m_iconized;
-
-    DECLARE_DYNAMIC_CLASS(wxIconizeEvent)
 };
 
 /*
@@ -1112,7 +1093,7 @@
     wxMaximizeEvent(int id = 0)
         { m_eventType = wxEVT_MAXIMIZE; m_id = id; }
 
-    DECLARE_DYNAMIC_CLASS(wxMaximizeEvent)
+    // underlying Clone() works since we do not add any data members
 };
 
 // Joystick event class
@@ -1136,8 +1117,6 @@
 
 class WXDLLEXPORT wxJoystickEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxJoystickEvent)
-
 public:
     wxPoint   m_pos;
     int       m_zPosition;
@@ -1195,7 +1174,7 @@
     { return (((but == wxJOY_BUTTON_ANY) && (m_buttonState != 0)) ||
             ((m_buttonState & but) == but)); }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxJoystickEvent(*this); }
 };
 
 // Drop files event class
@@ -1205,23 +1184,24 @@
 
 class WXDLLEXPORT wxDropFilesEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxDropFilesEvent)
-
 public:
     int       m_noFiles;
     wxPoint   m_pos;
-    wxString* m_files;        // Memory (de)allocated by code calling ProcessEvent
+    // TODO: Problem with m_files. It should be deallocated by the
+    // destructor rather than requiring external code to do it.
+    wxString* m_files;     // Memory (de)allocated by code calling ProcessEvent
 
     wxDropFilesEvent(wxEventType type = wxEVT_NULL,
                      int noFiles = 0,
                      wxString *files = (wxString *) NULL)
         { m_eventType = type; m_noFiles = noFiles; m_files = files; }
+    wxDropFilesEvent(const wxDropFilesEvent &);
 
     wxPoint GetPosition() const { return m_pos; }
     int GetNumberOfFiles() const { return m_noFiles; }
     wxString *GetFiles() const { return m_files; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxDropFilesEvent(*this); }
 };
 
 // Update UI event
@@ -1231,6 +1211,7 @@
 
 class WXDLLEXPORT wxUpdateUIEvent : public wxCommandEvent
 {
+    // Need to distinguish this class dynamically
     DECLARE_DYNAMIC_CLASS(wxUpdateUIEvent)
 
 public:
@@ -1257,7 +1238,7 @@
     void Enable(bool enable) { m_enabled = enable; m_setEnabled = TRUE; }
     void SetText(const wxString& text) { m_text = text; m_setText = TRUE; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxUpdateUIEvent(*this); }
 
 protected:
     bool          m_checked;
@@ -1275,11 +1256,11 @@
 // TODO: shouldn't all events record the window ID?
 class WXDLLEXPORT wxSysColourChangedEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxSysColourChangedEvent)
-
 public:
     wxSysColourChangedEvent()
         { m_eventType = wxEVT_SYS_COLOUR_CHANGED; }
+
+    // underlying Clone() works since we do not add any data members
 };
 
 /*
@@ -1288,8 +1269,6 @@
 
 class WXDLLEXPORT wxPaletteChangedEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxPaletteChangedEvent)
-
 public:
     wxPaletteChangedEvent(wxWindowID id = 0) : wxEvent(id)
     {
@@ -1300,7 +1279,7 @@
     void SetChangedWindow(wxWindow* win) { m_changedWindow = win; }
     wxWindow* GetChangedWindow() const { return m_changedWindow; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxPaletteChangedEvent(*this); }
 
 protected:
     wxWindow*     m_changedWindow;
@@ -1313,8 +1292,6 @@
 
 class WXDLLEXPORT wxQueryNewPaletteEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxQueryNewPaletteEvent)
-
 public:
     wxQueryNewPaletteEvent(wxWindowID id = 0): wxEvent(id)
         { m_eventType = wxEVT_QUERY_NEW_PALETTE; m_paletteRealized = FALSE; }
@@ -1323,7 +1300,7 @@
     void SetPaletteRealized(bool realized) { m_paletteRealized = realized; }
     bool GetPaletteRealized() const { return m_paletteRealized; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxQueryNewPaletteEvent(*this); }
 
 protected:
     bool m_paletteRealized;
@@ -1371,6 +1348,8 @@
     wxWindow* GetCurrentFocus() const { return m_focus; }
     void SetCurrentFocus(wxWindow *win) { m_focus = win; }
 
+    wxEvent *Clone(void) const { return new wxNavigationKeyEvent(*this); }
+
 private:
     enum
     {
@@ -1381,8 +1360,6 @@
 
     long m_flags;
     wxWindow *m_focus;
-
-    DECLARE_DYNAMIC_CLASS(wxNavigationKeyEvent)
 };
 
 // Window creation/destruction events: the first is sent as soon as window is
@@ -1397,22 +1374,22 @@
 
 class WXDLLEXPORT wxWindowCreateEvent : public wxCommandEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxWindowCreateEvent)
-
 public:
     wxWindowCreateEvent(wxWindow *win = NULL);
 
     wxWindow *GetWindow() const { return (wxWindow *)GetEventObject(); }
+
+    // underlying Clone() works since we do not add any data members
 };
 
 class WXDLLEXPORT wxWindowDestroyEvent : public wxCommandEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxWindowDestroyEvent)
-
 public:
     wxWindowDestroyEvent(wxWindow *win = NULL);
 
     wxWindow *GetWindow() const { return (wxWindow *)GetEventObject(); }
+
+    // underlying Clone() works since we do not add any data members
 };
 
 // A help event is sent when the user clicks on a window in context-help mode.
@@ -1445,13 +1422,12 @@
     const wxString& GetTarget() const { return m_target; }
     void SetTarget(const wxString& target) { m_target = target; }
 
+    wxEvent *Clone(void) const { return new wxHelpEvent(*this); }
+
 protected:
     wxPoint   m_pos;
     wxString  m_target;
     wxString  m_link;
-
-private:
-    DECLARE_DYNAMIC_CLASS(wxHelpEvent)
 };
 
 // A Context event is sent when the user right clicks on a window or
@@ -1478,11 +1454,10 @@
     const wxPoint& GetPosition() const { return m_pos; }
     void SetPosition(const wxPoint& pos) { m_pos = pos; }
 
+    wxEvent *Clone(void) const { return new wxContextMenuEvent(*this); }
+
 protected:
     wxPoint   m_pos;
-
-private:
-    DECLARE_DYNAMIC_CLASS(wxContextMenuEvent)
 };
 
 #endif // wxUSE_GUI
@@ -1494,8 +1469,6 @@
 
 class WXDLLEXPORT wxIdleEvent : public wxEvent
 {
-    DECLARE_DYNAMIC_CLASS(wxIdleEvent)
-
 public:
     wxIdleEvent()
         { m_eventType = wxEVT_IDLE; m_requestMore = FALSE; }
@@ -1503,7 +1476,7 @@
     void RequestMore(bool needMore = TRUE) { m_requestMore = needMore; }
     bool MoreRequested() const { return m_requestMore; }
 
-    void CopyObject(wxObject& obj) const;
+    wxEvent *Clone(void) const { return new wxIdleEvent(*this); }
 
 protected:
     bool m_requestMore;
@@ -1728,6 +1701,8 @@
 
     // Is event handler enabled?
     bool                m_enabled;
+
+    //TODO: void CopyObject(wxObject& obj) const;
 
 private:
     DECLARE_DYNAMIC_CLASS(wxEvtHandler)
Index: src/common/docmdi.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/docmdi.cpp,v
retrieving revision 1.14
diff -u -r1.14 docmdi.cpp
--- src/common/docmdi.cpp	2000/09/08 18:09:34	1.14
+++ src/common/docmdi.cpp	2001/06/28 21:09:47
@@ -91,30 +91,27 @@
   const wxString& title, const wxPoint& pos, const wxSize& size, long style, const wxString& name):
     wxMDIChildFrame(frame, id, title, pos, size, style, name)
 {
-  m_childDocument = doc;
-  m_childView = view;
-  if (view)
-    view->SetFrame(this);
+    m_childDocument = doc;
+    m_childView = view;
+    if (view)
+        view->SetFrame(this);
 }
 
 wxDocMDIChildFrame::~wxDocMDIChildFrame(void)
 {
-	m_childView = (wxView *) NULL;
+    m_childView = (wxView *) NULL;
 }
 
 // Extend event processing to search the view's event table
 bool wxDocMDIChildFrame::ProcessEvent(wxEvent& event)
 {
-	if ( !m_childView || ! m_childView->ProcessEvent(event) )
+    if ( !m_childView || ! m_childView->ProcessEvent(event) )
     {
         // Only hand up to the parent if it's a menu command
-        if (!event.IsKindOf(CLASSINFO(wxCommandEvent)) || !GetParent() || !GetParent()->ProcessEvent(event))
-		    return wxEvtHandler::ProcessEvent(event);
-        else
-            return TRUE;
+        if (!event.IsCommandEvent() || !GetParent() || !GetParent()->ProcessEvent(event))
+            return wxEvtHandler::ProcessEvent(event);
     }
-	else
-		return TRUE;
+    return TRUE;
 }
 
 void wxDocMDIChildFrame::OnActivate(wxActivateEvent& event)
Index: src/common/docview.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/docview.cpp,v
retrieving revision 1.81
diff -u -r1.81 docview.cpp
--- src/common/docview.cpp	2001/06/27 20:36:29	1.81
+++ src/common/docview.cpp	2001/06/28 21:09:59
@@ -1652,13 +1652,10 @@
     if ( !m_childView || ! m_childView->ProcessEvent(event) )
     {
         // Only hand up to the parent if it's a menu command
-        if (!event.IsKindOf(CLASSINFO(wxCommandEvent)) || !GetParent() || !GetParent()->ProcessEvent(event))
+        if (!event.IsCommandEvent() || !GetParent() || !GetParent()->ProcessEvent(event))
             return wxEvtHandler::ProcessEvent(event);
-        else
-            return TRUE;
     }
-    else
-        return TRUE;
+    return TRUE;
 }
 
 void wxDocChildFrame::OnActivate(wxActivateEvent& event)
Index: src/common/event.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/event.cpp,v
retrieving revision 1.89
diff -u -r1.89 event.cpp
--- src/common/event.cpp	2001/06/26 20:59:09	1.89
+++ src/common/event.cpp	2001/06/28 21:09:59
@@ -51,40 +51,13 @@
 // ----------------------------------------------------------------------------
 
 IMPLEMENT_DYNAMIC_CLASS(wxEvtHandler, wxObject)
-IMPLEMENT_ABSTRACT_CLASS(wxEvent, wxObject)
-IMPLEMENT_DYNAMIC_CLASS(wxIdleEvent, wxEvent)
 
 #if wxUSE_GUI
-    IMPLEMENT_DYNAMIC_CLASS(wxCommandEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxNotifyEvent, wxCommandEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxScrollEvent, wxCommandEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxScrollWinEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxMouseEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxKeyEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxSizeEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxPaintEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxNcPaintEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxEraseEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxMoveEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxFocusEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxCloseEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxShowEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxMaximizeEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxIconizeEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxMenuEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxJoystickEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxDropFilesEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxActivateEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxInitDialogEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxSysColourChangedEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxUpdateUIEvent, wxCommandEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxNavigationKeyEvent, wxCommandEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxPaletteChangedEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxQueryNewPaletteEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxWindowCreateEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxWindowDestroyEvent, wxEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxHelpEvent, wxCommandEvent)
-    IMPLEMENT_DYNAMIC_CLASS(wxContextMenuEvent, wxCommandEvent)
+    // We only need to distinguish dynamically between these classes,
+    // so we lie a little bit about how they are derived to make the
+    // IsKindOf() lookup faster.
+    IMPLEMENT_ABSTRACT_CLASS(wxCommandEvent, wxObject)
+    IMPLEMENT_ABSTRACT_CLASS(wxUpdateUIEvent, wxCommandEvent)
 #endif // wxUSE_GUI
 
 const wxEventTable *wxEvtHandler::GetEventTable() const
@@ -293,29 +266,26 @@
  *
  */
 
-wxEvent::wxEvent(int theId)
+wxEvent::wxEvent(int theId, wxEventType commandType)
 {
-    m_eventType = wxEVT_NULL;
     m_eventObject = (wxObject *) NULL;
+    m_eventType = commandType;
     m_timeStamp = 0;
     m_id = theId;
-    m_skipped = FALSE;
     m_callbackUserData = (wxObject *) NULL;
-    m_isCommandEvent = FALSE;
+    m_skipped = FALSE;
 }
 
-void wxEvent::CopyObject(wxObject& object_dest) const
+wxEvent::wxEvent(const wxEvent& src)
 {
-    wxEvent *obj = (wxEvent *)&object_dest;
-    wxObject::CopyObject(object_dest);
+    src.wxObject::CopyObject(*this);
 
-    obj->m_eventType = m_eventType;
-    obj->m_eventObject = m_eventObject;
-    obj->m_timeStamp = m_timeStamp;
-    obj->m_id = m_id;
-    obj->m_skipped = m_skipped;
-    obj->m_callbackUserData = m_callbackUserData;
-    obj->m_isCommandEvent = m_isCommandEvent;
+    m_eventObject = src.m_eventObject;
+    m_eventType = src.m_eventType;
+    m_timeStamp = src.m_timeStamp;
+    m_id = src.m_id;
+    m_callbackUserData = src.m_callbackUserData;
+    m_skipped = src.m_skipped;
 }
 
 #if wxUSE_GUI
@@ -326,41 +296,12 @@
  */
 
 wxCommandEvent::wxCommandEvent(wxEventType commandType, int theId)
+:   wxEvent(theId, commandType), m_commandString(wxEmptyString)
 {
-    m_eventType = commandType;
-    m_clientData = (char *) NULL;
-    m_clientObject = (wxClientData *) NULL;
-    m_extraLong = 0;
     m_commandInt = 0;
-    m_id = theId;
-    m_commandString = wxEmptyString;
-    m_isCommandEvent = TRUE;
-}
-
-void wxCommandEvent::CopyObject(wxObject& obj_d) const
-{
-    wxCommandEvent *obj = (wxCommandEvent *)&obj_d;
-
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_clientData    = m_clientData;
-    obj->m_clientObject  = m_clientObject;
-    obj->m_extraLong     = m_extraLong;
-    obj->m_commandInt    = m_commandInt;
-    obj->m_commandString = m_commandString;
-}
-
-/*
- * Notify events
- */
-
-void wxNotifyEvent::CopyObject(wxObject& obj_d) const
-{
-    wxNotifyEvent *obj = (wxNotifyEvent *)&obj_d;
-
-    wxEvent::CopyObject(obj_d);
-
-    if (!m_bAllow) obj->Veto();
+    m_extraLong = 0;
+    m_clientData = (void *) NULL;
+    m_clientObject = (wxClientData *) NULL;
 }
 
 /*
@@ -390,16 +331,6 @@
     m_commandInt = pos;
 }
 
-void wxScrollWinEvent::CopyObject(wxObject& obj_d) const
-{
-    wxScrollWinEvent *obj = (wxScrollWinEvent*)&obj_d;
-
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_extraLong    = m_extraLong;
-    obj->m_commandInt   = m_commandInt;
-}
-
 /*
  * Mouse events
  *
@@ -422,23 +353,6 @@
     m_linesPerAction = 0;
 }
 
-void wxMouseEvent::CopyObject(wxObject& obj_d) const
-{
-    wxMouseEvent *obj = (wxMouseEvent *)&obj_d;
-
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_metaDown = m_metaDown;
-    obj->m_altDown = m_altDown;
-    obj->m_controlDown = m_controlDown;
-    obj->m_shiftDown = m_shiftDown;
-    obj->m_leftDown = m_leftDown;
-    obj->m_rightDown = m_rightDown;
-    obj->m_middleDown = m_middleDown;
-    obj->m_x = m_x;
-    obj->m_y = m_y;
-}
-
 // True if was a button dclick event (1 = left, 2 = middle, 3 = right)
 // or any button dclick event (but = -1)
 bool wxMouseEvent::ButtonDClick(int but) const
@@ -578,140 +492,21 @@
     m_scanCode = 0;
 }
 
-void wxKeyEvent::CopyObject(wxObject& obj_d) const
-{
-    wxKeyEvent *obj = (wxKeyEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_x = m_x;
-    obj->m_y = m_y;
-    obj->m_keyCode = m_keyCode;
-
-    obj->m_shiftDown   = m_shiftDown;
-    obj->m_controlDown = m_controlDown;
-    obj->m_metaDown    = m_metaDown;
-    obj->m_altDown     = m_altDown;
-    obj->m_keyCode     = m_keyCode;
-}
-
-
 /*
  * Misc events
  */
 
-void wxSizeEvent::CopyObject(wxObject& obj_d) const
+wxDropFilesEvent::wxDropFilesEvent(const wxDropFilesEvent &src)
 {
-    wxSizeEvent *obj = (wxSizeEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_size = m_size;
+    m_noFiles = src.m_noFiles;
+    m_pos = src.m_pos;
+    // TODO: Problem with m_files. It should be deallocated by the
+    // destructor of the event rather than external code.
+    m_files = new wxString[m_noFiles];
+    for (int i = 0; i < m_noFiles; ++i)
+        m_files[i] = src.m_files[i];
 }
 
-void wxMoveEvent::CopyObject(wxObject& obj_d) const
-{
-    wxMoveEvent *obj = (wxMoveEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_pos = m_pos;
-}
-
-void wxEraseEvent::CopyObject(wxObject& obj_d) const
-{
-    wxEraseEvent *obj = (wxEraseEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_dc = m_dc;
-}
-
-void wxActivateEvent::CopyObject(wxObject& obj_d) const
-{
-    wxActivateEvent *obj = (wxActivateEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_active = m_active;
-}
-
-void wxMenuEvent::CopyObject(wxObject& obj_d) const
-{
-    wxMenuEvent *obj = (wxMenuEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_menuId = m_menuId;
-}
-
-void wxCloseEvent::CopyObject(wxObject& obj_d) const
-{
-    wxCloseEvent *obj = (wxCloseEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_loggingOff = m_loggingOff;
-    obj->m_veto = m_veto;
-#if WXWIN_COMPATIBILITY
-    obj->m_force = m_force;
-#endif
-    obj->m_canVeto = m_canVeto;
-}
-
-void wxShowEvent::CopyObject(wxObject& obj_d) const
-{
-    wxShowEvent *obj = (wxShowEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_show = m_show;
-}
-
-void wxJoystickEvent::CopyObject(wxObject& obj_d) const
-{
-    wxJoystickEvent *obj = (wxJoystickEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_pos = m_pos;
-    obj->m_zPosition = m_zPosition;
-    obj->m_buttonChange = m_buttonChange;
-    obj->m_buttonState = m_buttonState;
-    obj->m_joyStick = m_joyStick;
-}
-
-void wxDropFilesEvent::CopyObject(wxObject& obj_d) const
-{
-    wxDropFilesEvent *obj = (wxDropFilesEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_noFiles = m_noFiles;
-    obj->m_pos = m_pos;
-    // TODO: Problem with obj->m_files. It should be deallocated by the
-    // destructor of the event.
-}
-
-void wxUpdateUIEvent::CopyObject(wxObject &obj_d) const
-{
-    wxUpdateUIEvent *obj = (wxUpdateUIEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_checked = m_checked;
-    obj->m_enabled = m_enabled;
-    obj->m_text = m_text;
-    obj->m_setText = m_setText;
-    obj->m_setChecked = m_setChecked;
-    obj->m_setEnabled = m_setEnabled;
-}
-
-void wxPaletteChangedEvent::CopyObject(wxObject &obj_d) const
-{
-    wxPaletteChangedEvent *obj = (wxPaletteChangedEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_changedWindow = m_changedWindow;
-}
-
-void wxQueryNewPaletteEvent::CopyObject(wxObject& obj_d) const
-{
-    wxQueryNewPaletteEvent *obj = (wxQueryNewPaletteEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_paletteRealized = m_paletteRealized;
-}
-
 wxWindowCreateEvent::wxWindowCreateEvent(wxWindow *win)
 {
     SetEventType(wxEVT_CREATE);
@@ -726,14 +521,6 @@
 
 #endif // wxUSE_GUI
 
-void wxIdleEvent::CopyObject(wxObject& obj_d) const
-{
-    wxIdleEvent *obj = (wxIdleEvent *)&obj_d;
-    wxEvent::CopyObject(obj_d);
-
-    obj->m_requestMore = m_requestMore;
-}
-
 /*
  * Event handler
  */
@@ -818,7 +605,7 @@
     if ( !m_pendingEvents )
       m_pendingEvents = new wxList;
 
-    wxEvent *event2 = (wxEvent *)event.Clone();
+    wxEvent *event2 = event.Clone();
 
     m_pendingEvents->Append(event2);
 
Index: src/motif/mdi.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/motif/mdi.cpp,v
retrieving revision 1.22
diff -u -r1.22 mdi.cpp
--- src/motif/mdi.cpp	2000/08/25 10:39:12	1.22
+++ src/motif/mdi.cpp	2001/06/28 21:10:00
@@ -233,7 +233,7 @@
     inEvent = event.GetEventType();
 
     bool res = FALSE;
-    if (m_activeChild && event.IsKindOf(CLASSINFO(wxCommandEvent)))
+    if (m_activeChild && event.IsCommandEvent())
     {
         res = m_activeChild->GetEventHandler()->ProcessEvent(event);
     }

 	  	 

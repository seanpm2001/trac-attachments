--- include/wx/event.h	Mon May 14 09:06:42 2007
+++ include/wx/event.h	Fri Jul 20 10:18:05 2007
@@ -174,6 +174,14 @@
     DECLARE_EVENT_TYPE(wxEVT_KILL_FOCUS, 113)
     DECLARE_EVENT_TYPE(wxEVT_CHILD_FOCUS, 114)
     DECLARE_EVENT_TYPE(wxEVT_MOUSEWHEEL, 115)
+    //aux begin
+    DECLARE_EVENT_TYPE(wxEVT_AUX1_DOWN, 116)
+    DECLARE_EVENT_TYPE(wxEVT_AUX1_UP, 117)
+    DECLARE_EVENT_TYPE(wxEVT_AUX1_DCLICK, 118)
+    DECLARE_EVENT_TYPE(wxEVT_AUX2_DOWN, 119)
+    DECLARE_EVENT_TYPE(wxEVT_AUX2_UP, 120)
+    DECLARE_EVENT_TYPE(wxEVT_AUX2_DCLICK, 121)
+    //aux end
 
         // Non-client mouse events
     DECLARE_EVENT_TYPE(wxEVT_NC_LEFT_DOWN, 200)
@@ -727,7 +735,11 @@
     wxMOUSE_BTN_NONE    = 0,
     wxMOUSE_BTN_LEFT    = 1,
     wxMOUSE_BTN_MIDDLE  = 2,
-    wxMOUSE_BTN_RIGHT   = 3
+    wxMOUSE_BTN_RIGHT   = 3,
+    //aux begin
+    wxMOUSE_BTN_AUX1    = 4,
+    wxMOUSE_BTN_AUX2    = 5
+    //aux end
 };
 
 class WXDLLIMPEXP_CORE wxMouseEvent : public wxEvent
@@ -776,20 +788,36 @@
     bool LeftDown() const { return (m_eventType == wxEVT_LEFT_DOWN); }
     bool MiddleDown() const { return (m_eventType == wxEVT_MIDDLE_DOWN); }
     bool RightDown() const { return (m_eventType == wxEVT_RIGHT_DOWN); }
+    //aux begin
+    bool Aux1Down() const { return (m_eventType == wxEVT_AUX1_DOWN); }
+    bool Aux2Down() const { return (m_eventType == wxEVT_AUX2_DOWN); }
+    //aux end
 
     bool LeftUp() const { return (m_eventType == wxEVT_LEFT_UP); }
     bool MiddleUp() const { return (m_eventType == wxEVT_MIDDLE_UP); }
     bool RightUp() const { return (m_eventType == wxEVT_RIGHT_UP); }
+    //aux begin
+    bool Aux1Up() const { return (m_eventType == wxEVT_AUX1_UP); }
+    bool Aux2Up() const { return (m_eventType == wxEVT_AUX2_UP); }
+    //aux end
 
     bool LeftDClick() const { return (m_eventType == wxEVT_LEFT_DCLICK); }
     bool MiddleDClick() const { return (m_eventType == wxEVT_MIDDLE_DCLICK); }
     bool RightDClick() const { return (m_eventType == wxEVT_RIGHT_DCLICK); }
+    //aux begin
+    bool Aux1DClick() const { return (m_eventType == wxEVT_AUX1_UP); }
+    bool Aux2DClick() const { return (m_eventType == wxEVT_AUX2_UP); }
+    //aux end
 
     // Find the current state of the mouse buttons (regardless
     // of current event type)
     bool LeftIsDown() const { return m_leftDown; }
     bool MiddleIsDown() const { return m_middleDown; }
     bool RightIsDown() const { return m_rightDown; }
+    //aux begin
+    bool Aux1IsDown() const { return m_aux1Down; }
+    bool Aux2IsDown() const { return m_aux2Down; }
+    //aux end
 
     // True if a button is down and the mouse is moving
     bool Dragging() const
@@ -869,6 +897,10 @@
     bool          m_leftDown;
     bool          m_middleDown;
     bool          m_rightDown;
+    //aux begin
+    bool          m_aux1Down;
+    bool          m_aux2Down;
+    //aux end
 
     bool          m_controlDown;
     bool          m_shiftDown;
@@ -2923,6 +2955,14 @@
 #define EVT_LEAVE_WINDOW(func) wx__DECLARE_EVT0(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(func))
 #define EVT_ENTER_WINDOW(func) wx__DECLARE_EVT0(wxEVT_ENTER_WINDOW, wxMouseEventHandler(func))
 #define EVT_MOUSEWHEEL(func) wx__DECLARE_EVT0(wxEVT_MOUSEWHEEL, wxMouseEventHandler(func))
+//aux begin
+#define EVT_AUX1_DOWN(func) wx__DECLARE_EVT0(wxEVT_AUX1_DOWN, wxMouseEventHandler(func))
+#define EVT_AUX1_UP(func) wx__DECLARE_EVT0(wxEVT_AUX1_UP, wxMouseEventHandler(func))
+#define EVT_AUX1_DCLICK(func) wx__DECLARE_EVT0(wxEVT_AUX1_DCLICK, wxMouseEventHandler(func))
+#define EVT_AUX2_DOWN(func) wx__DECLARE_EVT0(wxEVT_AUX2_DOWN, wxMouseEventHandler(func))
+#define EVT_AUX2_UP(func) wx__DECLARE_EVT0(wxEVT_AUX2_UP, wxMouseEventHandler(func))
+#define EVT_AUX2_DCLICK(func) wx__DECLARE_EVT0(wxEVT_AUX2_DCLICK, wxMouseEventHandler(func))
+//aux end
 
 // All mouse events
 #define EVT_MOUSE_EVENTS(func) \
@@ -2936,9 +2976,17 @@
     EVT_LEFT_DCLICK(func) \
     EVT_MIDDLE_DCLICK(func) \
     EVT_RIGHT_DCLICK(func) \
+    EVT_AUX1_DOWN(func) \
+    EVT_AUX1_UP(func) \
+    EVT_AUX1_DCLICK(func) \
+    EVT_AUX2_DOWN(func) \
+    EVT_AUX2_UP(func) \
+    EVT_AUX2_DCLICK(func) \
     EVT_LEAVE_WINDOW(func) \
     EVT_ENTER_WINDOW(func) \
     EVT_MOUSEWHEEL(func)
+
+//aux stuff above!
 
 // Scrolling from wxWindow (sent to wxScrolledWindow)
 #define EVT_SCROLLWIN_TOP(func) wx__DECLARE_EVT0(wxEVT_SCROLLWIN_TOP, wxScrollWinEventHandler(func))
--- include/wx/utils.h	Mon May 14 09:06:42 2007
+++ include/wx/utils.h	Fri Jul 20 10:18:35 2007
@@ -218,6 +218,9 @@
     wxMouseState()
         : m_x(0), m_y(0),
           m_leftDown(false), m_middleDown(false), m_rightDown(false),
+          //aux begin
+          m_aux1Down(false), m_aux2Down(false),
+          //aux end
           m_controlDown(false), m_shiftDown(false), m_altDown(false),
           m_metaDown(false)
     {}
@@ -228,6 +231,10 @@
     bool        LeftDown()    { return m_leftDown; }
     bool        MiddleDown()  { return m_middleDown; }
     bool        RightDown()   { return m_rightDown; }
+    //aux begin
+    bool        Aux1Down()    { return m_aux1Down; }
+    bool        Aux2Down()    { return m_aux2Down; }
+    //aux end
 
     bool        ControlDown() { return m_controlDown; }
     bool        ShiftDown()   { return m_shiftDown; }
@@ -248,6 +255,10 @@
     void        SetLeftDown(bool down)   { m_leftDown = down; }
     void        SetMiddleDown(bool down) { m_middleDown = down; }
     void        SetRightDown(bool down)  { m_rightDown = down; }
+    //aux begin
+    void        SetAux1Down(bool down)   { m_aux1Down = down; }
+    void        SetAux2Down(bool down)   { m_aux2Down = down; }
+    //aux end
 
     void        SetControlDown(bool down) { m_controlDown = down; }
     void        SetShiftDown(bool down)   { m_shiftDown = down; }
@@ -261,6 +272,10 @@
     bool        m_leftDown : 1;
     bool        m_middleDown : 1;
     bool        m_rightDown : 1;
+    //aux begin
+    bool        m_aux1Down : 1;
+    bool        m_aux2Down : 1;
+    //aux end
 
     bool        m_controlDown : 1;
     bool        m_shiftDown : 1;
--- src/common/event.cpp	Mon May 14 09:06:18 2007
+++ src/common/event.cpp	Fri Jul 20 10:19:33 2007
@@ -193,6 +193,14 @@
 DEFINE_EVENT_TYPE(wxEVT_KILL_FOCUS)
 DEFINE_EVENT_TYPE(wxEVT_CHILD_FOCUS)
 DEFINE_EVENT_TYPE(wxEVT_MOUSEWHEEL)
+//aux begin
+DEFINE_EVENT_TYPE(wxEVT_AUX1_DOWN)
+DEFINE_EVENT_TYPE(wxEVT_AUX1_UP)
+DEFINE_EVENT_TYPE(wxEVT_AUX1_DCLICK)
+DEFINE_EVENT_TYPE(wxEVT_AUX2_DOWN)
+DEFINE_EVENT_TYPE(wxEVT_AUX2_UP)
+DEFINE_EVENT_TYPE(wxEVT_AUX2_DCLICK)
+//aux end
 
 // Non-client mouse events
 DEFINE_EVENT_TYPE(wxEVT_NC_LEFT_DOWN)
@@ -534,6 +542,10 @@
     m_leftDown = false;
     m_rightDown = false;
     m_middleDown = false;
+    //aux begin
+    m_aux1Down = false;
+    m_aux2Down = false;
+    //aux end
     m_x = 0;
     m_y = 0;
     m_wheelRotation = 0;
@@ -551,6 +563,10 @@
     m_leftDown = event.m_leftDown;
     m_middleDown = event.m_middleDown;
     m_rightDown = event.m_rightDown;
+    //aux begin
+    m_aux1Down = event.m_aux1Down;
+    m_aux2Down = event.m_aux2Down;
+    //aux end
 
     m_controlDown = event.m_controlDown;
     m_shiftDown = event.m_shiftDown;
@@ -572,7 +588,7 @@
             // fall through
 
         case wxMOUSE_BTN_ANY:
-            return (LeftDClick() || MiddleDClick() || RightDClick());
+            return (LeftDClick() || MiddleDClick() || RightDClick() || Aux1DClick() || Aux2DClick());
 
         case wxMOUSE_BTN_LEFT:
             return LeftDClick();
@@ -582,6 +598,14 @@
 
         case wxMOUSE_BTN_RIGHT:
             return RightDClick();
+
+//aux begin
+        case wxMOUSE_BTN_AUX1:
+            return Aux1DClick();
+
+        case wxMOUSE_BTN_AUX2:
+            return Aux2DClick();
+//aux end
     }
 }
 
@@ -595,8 +619,8 @@
             // fall through
 
         case wxMOUSE_BTN_ANY:
-            return (LeftDown() || MiddleDown() || RightDown());
-
+            return (LeftDown() || MiddleDown() || RightDown() || Aux1Down() || Aux2Down());
+        //aux above
         case wxMOUSE_BTN_LEFT:
             return LeftDown();
 
@@ -605,6 +629,14 @@
 
         case wxMOUSE_BTN_RIGHT:
             return RightDown();
+
+//aux begin
+        case wxMOUSE_BTN_AUX1:
+            return Aux1Down();
+
+        case wxMOUSE_BTN_AUX2:
+            return Aux2Down();
+//aux end
     }
 }
 
@@ -618,8 +650,8 @@
             // fall through
 
         case wxMOUSE_BTN_ANY:
-            return (LeftUp() || MiddleUp() || RightUp());
-
+            return (LeftUp() || MiddleUp() || RightUp() || Aux1Up() || Aux2Up());
+        //aux above
         case wxMOUSE_BTN_LEFT:
             return LeftUp();
 
@@ -628,6 +660,14 @@
 
         case wxMOUSE_BTN_RIGHT:
             return RightUp();
+
+//aux begin
+        case wxMOUSE_BTN_AUX1:
+            return Aux1Up();
+
+        case wxMOUSE_BTN_AUX2:
+            return Aux2Up();
+//aux end
     }
 }
 
@@ -653,6 +693,14 @@
 
         case wxMOUSE_BTN_RIGHT:
             return RightDown() || RightUp() || RightDClick();
+
+//aux begin
+        case wxMOUSE_BTN_AUX1:
+           return Aux1Down() || Aux1Up() || Aux1DClick();
+
+        case wxMOUSE_BTN_AUX2:
+           return Aux2Down() || Aux2Up() || Aux2DClick();
+//aux end
     }
 }
 
@@ -665,8 +713,8 @@
             // fall through
 
         case wxMOUSE_BTN_ANY:
-            return LeftIsDown() || MiddleIsDown() || RightIsDown();
-
+            return LeftIsDown() || MiddleIsDown() || RightIsDown() || Aux1Down() || Aux2Down();
+        //aux above
         case wxMOUSE_BTN_LEFT:
             return LeftIsDown();
 
@@ -675,12 +723,21 @@
 
         case wxMOUSE_BTN_RIGHT:
             return RightIsDown();
+
+//aux begin
+        case wxMOUSE_BTN_AUX1:
+            return Aux1IsDown();
+
+        case wxMOUSE_BTN_AUX2:
+            return Aux2IsDown();
+//aux end
     }
 }
 
 int wxMouseEvent::GetButton() const
 {
-    for ( int i = 1; i <= 3; i++ )
+	//aux: i <= 3 is now i <= 5
+    for ( int i = 1; i <= 5; i++ )
     {
         if ( Button(i) )
         {
--- src/msw/window.cpp	Mon May 14 09:06:14 2007
+++ src/msw/window.cpp	Fri Jul 20 10:20:34 2007
@@ -2712,6 +2712,11 @@
         case WM_MBUTTONDOWN:
         case WM_MBUTTONUP:
         case WM_MBUTTONDBLCLK:
+        //aux begin
+        case WM_XBUTTONDOWN:
+        case WM_XBUTTONUP:
+        case WM_XBUTTONDBLCLK:
+        //aux end
             {
 #ifdef __WXMICROWIN__
                 // MicroWindows seems to ignore the fact that a window is
@@ -4851,6 +4856,10 @@
     event.m_leftDown = (flags & MK_LBUTTON) != 0;
     event.m_middleDown = (flags & MK_MBUTTON) != 0;
     event.m_rightDown = (flags & MK_RBUTTON) != 0;
+    //aux begin
+    event.m_aux1Down = (flags & MK_XBUTTON1) != 0;
+    event.m_aux2Down = (flags & MK_XBUTTON2) != 0;
+    //aux end
     event.m_altDown = ::GetKeyState(VK_MENU) < 0;
 
 #ifndef __WXWINCE__
@@ -4949,9 +4958,30 @@
         wxEVT_RIGHT_DCLICK,
         wxEVT_MIDDLE_DOWN,
         wxEVT_MIDDLE_UP,
-        wxEVT_MIDDLE_DCLICK
+        wxEVT_MIDDLE_DCLICK,
+        //aux begin
+        0,
+        wxEVT_AUX1_DOWN,
+        wxEVT_AUX1_UP,
+        wxEVT_AUX1_DCLICK,
+        wxEVT_AUX2_DOWN,
+        wxEVT_AUX2_UP,
+        wxEVT_AUX2_DCLICK
+        //aux end
     };
 
+    //aux begin
+    switch (msg)
+    {
+    case WM_XBUTTONDOWN:
+    case WM_XBUTTONUP:
+    case WM_XBUTTONDBLCLK:
+       if (flags & MK_XBUTTON2)
+          msg += 3;
+       break;
+    }
+    //aux end
+
     wxMouseEvent event(eventsMouse[msg - WM_MOUSEMOVE]);
     InitMouseEvent(event, x, y, flags);
 
@@ -5841,6 +5871,10 @@
     ms.SetLeftDown(wxIsKeyDown(VK_LBUTTON));
     ms.SetMiddleDown(wxIsKeyDown(VK_MBUTTON));
     ms.SetRightDown(wxIsKeyDown(VK_RBUTTON));
+    //aux begin
+    ms.SetAux1Down(wxIsKeyDown(VK_XBUTTON1));
+    ms.SetAux2Down(wxIsKeyDown(VK_XBUTTON2));\
+    //aux end
 
     ms.SetControlDown(wxIsKeyDown(VK_CONTROL));
     ms.SetShiftDown(wxIsKeyDown(VK_SHIFT));
@@ -6121,6 +6155,11 @@
         case 0x0208: return wxT("WM_MBUTTONUP");
         case 0x0209: return wxT("WM_MBUTTONDBLCLK");
         case 0x020A: return wxT("WM_MOUSEWHEEL");
+        //aux begin
+        case 0x020B: return wxT("WM_XBUTTONDOWN");
+        case 0x020C: return wxT("WM_XBUTTONUP");
+        case 0x020D: return wxT("WM_XBUTTONDBLCLK");
+        //aux end
         case 0x0210: return wxT("WM_PARENTNOTIFY");
         case 0x0211: return wxT("WM_ENTERMENULOOP");
         case 0x0212: return wxT("WM_EXITMENULOOP");

 	  	 

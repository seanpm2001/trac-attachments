Index: include/wx/mac/slider.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/mac/slider.h,v
retrieving revision 1.4
diff -r1.4 slider.h
56d55
<   bool Show(bool show);
81c80,90
<  protected:
---
> 
>     // set min/max size of the slider
>     virtual void SetSizeHints( int minW, int minH,
>                                int maxW = -1, int maxH = -1,
>                                int incW = -1, int incH = -1 );
> 
>   protected:
>     virtual wxSize DoGetBestSize() const;
>     virtual void   DoSetSize(int x, int y, int w, int h, int sizeFlags);
>     virtual void   DoMoveWindow(int x, int y, int w, int h);
> 
86,91c95,102
<   int           m_rangeMin;
<   int           m_rangeMax;
<   int           m_pageSize;
<   int           m_lineSize;
<   int           m_tickFreq;
< DECLARE_EVENT_TABLE()
---
>     int           m_rangeMin;
>     int           m_rangeMax;
>     int           m_pageSize;
>     int           m_lineSize;
>     int           m_tickFreq;
> 
>   private:
>     DECLARE_EVENT_TABLE();
Index: src/mac/slider.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/slider.cpp,v
retrieving revision 1.7
diff -r1.7 slider.cpp
23c23
< END_EVENT_TABLE()
---
> END_EVENT_TABLE();
26c26,39
< 
---
> // The dimensions of the different styles of sliders (From Aqua document)
> #define wxSLIDER_DIMENSIONACROSS 15
> #define wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS 24
> #define wxSLIDER_DIMENSIONACROSS_ARROW 18
> 
> // Distance between slider and text
> #define wxSLIDER_BORDERTEXT 5
> 
> /* NB!  The default orientation for a slider is horizontal however if the user specifies
>  * some slider styles but dosen't specify the orientation we have to assume he wants a
>  * horizontal one.  Therefore in this file when testing for the sliders orientation
>  * vertical is tested for if this is not set then we use the horizontal one
>  * eg.  if(GetWindowStyle() & wxSL_VERTICAL) {}  else { horizontal case }
>  */
47,112c60,62
<   Rect bounds ;
<   Str255 title ;
<   wxSize slsize;
<   int maxtextwidth, textheight;
<   
<   // Is control horizontal or vertical (Can be ambigous if user selects
<   // another style without also specifying horz or vert
<   if (!(style & wxSL_HORIZONTAL) && !(style & wxSL_VERTICAL)) {
<     // Default is horizontal so make it so
<     style |= wxSL_HORIZONTAL;
<   }
<   slsize = size;
<   // Check that size corresponds with users selection of vertical or
<   // horizontal slider and insert suitable default values
<   if (style & wxSL_HORIZONTAL) 
<     {
<       slsize.y = 15;      // Slider width
<       if (slsize.x == -1) {
<         slsize.x = 150;  // Slider default length
<       }
<     }
<   else
<     {
<       slsize.x = 15;      // Slider width
<       if (slsize.y == -1) {
<         slsize.y = 150;  // Slider default length
<       }
<     }
<   /* Set the height and width for the slider control region.  The actual 
<    * slider is set at 10 pixels across.  If the slider has labels then the
<    * control region must be large enough to contain these labels
<    */
<   if (style & wxSL_LABELS) 
<     {
<       wxString text;
<       int ht, wd;
<       
<       // Get maximum text label width and height
<       text.Printf("%d", minValue);
<       parent->GetTextExtent(text, &maxtextwidth, &textheight);
<       text.Printf("%d", maxValue);
<       parent->GetTextExtent(text, &wd, &ht);
<       if(ht > textheight) {
<         textheight = ht;
<       }
<       if (wd > maxtextwidth) {
<         maxtextwidth = wd;
<       }
<       
<       if (style & wxSL_VERTICAL) {
<         slsize.x = (15 + maxtextwidth + 2); // Slider wd plus mac text width
<       }
<       if (style & wxSL_HORIZONTAL) {
<         slsize.y = (15 + textheight);  // Slider ht plus text ht.
<       }
<     }
<   
<   MacPreControlCreate( parent , id ,  "" , pos , slsize , style,
< 		       validator , name , &bounds , title ) ;
<   
<   m_macMinimumStatic = NULL ;
<   m_macMaximumStatic = NULL ;
<   m_macValueStatic = NULL ;
<   
<   m_lineSize = 1;
<   m_tickFreq = 0;
---
>     Rect bounds ;
>     Str255 title ;
>     SInt16 procID;
114,115c64,66
<   m_rangeMax = maxValue;
<   m_rangeMin = minValue;
---
>     m_macMinimumStatic = NULL ;
>     m_macMaximumStatic = NULL ;
>     m_macValueStatic = NULL ;
117,132c68,81
<   m_pageSize = (int)((maxValue-minValue)/10);
<   
<   // Must modify bounds to that of the slider dimensions from slider
<   // dimensions plus text labels.
<   if (style & wxSL_LABELS)
<     {
<       if ( style & wxSL_HORIZONTAL )
< 	{
< 	  bounds.bottom = bounds.top + 15;
<           bounds.right -= (5 + maxtextwidth);
< 	}
<       else  // Vertical slider
< 	{
<           bounds.right = bounds.left + 15;
<           bounds.bottom -= (5 + textheight);
< 	}
---
>     m_lineSize = 1;
>     m_tickFreq = 0;
> 
>     m_rangeMax = maxValue;
>     m_rangeMin = minValue;
> 
>     m_pageSize = (int)((maxValue-minValue)/10);
> 
>     MacPreControlCreate( parent, id, "", pos, size, style,
>                          validator, name, &bounds, title );
> 
>     procID = kControlSliderProc + kControlSliderLiveFeedback;
>     if(style & wxSL_AUTOTICKS) {
>         procID += kControlSliderHasTickMarks;
134,145c83,90
<   
<   m_macControl = UMANewControl( parent->GetMacRootWindow() , &bounds ,
< 				title , false ,  value , minValue , maxValue, 
< 				kControlSliderProc +  kControlSliderLiveFeedback + ( ( style & wxSL_AUTOTICKS ) ? kControlSliderHasTickMarks : 0 ) , (long) this ) ;
<   
<   wxASSERT_MSG( m_macControl != NULL , "No valid mac control" ) ;
<   
<   ::SetControlAction( m_macControl , wxMacLiveScrollbarActionUPP ) ;
<   
<   MacPostControlCreate() ;
<   
<   if ( style & wxSL_LABELS )
---
>     m_macControl = UMANewControl( parent->GetMacRootWindow(), &bounds, title, false,
>                                   value, minValue, maxValue, procID, (long) this);
> 
>     wxASSERT_MSG( m_macControl != NULL , "No valid mac control" ) ;
> 
>     ::SetControlAction( m_macControl , wxMacLiveScrollbarActionUPP ) ;
> 
>     if(style & wxSL_LABELS)
147,178c92,96
<       if ( style & wxSL_HORIZONTAL )
< 	{
< 	  wxPoint leftpos( 0 , 15 ) ;
< 	  wxPoint rightpos( m_width - (maxtextwidth + 20) , 15 ) ;
< 	  wxPoint valuepos( m_width - maxtextwidth , 0 ) ;
< 	  wxString valuestring ;
< 	  
< 	  valuestring.Printf( "%d" , minValue ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , leftpos ) ;
< 
< 	  valuestring.Printf( "%d" , maxValue ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , rightpos ) ;
< 
< 	  valuestring.Printf( "%d" , value ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , valuepos ) ;
< 	}
<       else // Vertical slider
< 	{
< 	  wxPoint toppos( 17 , 0 ) ;
< 	  wxPoint bottompos( 17 , m_height - (textheight + 15) ) ;
< 	  wxPoint valuepos( 0 , m_height - textheight ) ;
< 	  wxString valuestring ;
< 	  
< 	  valuestring.Printf( "%d" , minValue ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , bottompos ) ;
< 
< 	  valuestring.Printf( "%d" , maxValue ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , toppos ) ;
< 
< 	  valuestring.Printf( "%d" , value ) ;
< 	  m_macMinimumStatic = new wxStaticText( this , -1 , valuestring , valuepos ) ;
< 	}
---
>         m_macMinimumStatic = new wxStaticText( this, -1, "" );
>         m_macMaximumStatic = new wxStaticText( this, -1, "" );
>         m_macValueStatic = new wxStaticText( this, -1, "" );
>         SetRange(minValue, maxValue);
>         SetValue(value);
180,181c98,116
<   
<   return true;
---
>     else {
>         m_macMinimumStatic = NULL ;
>         m_macMaximumStatic = NULL ;
>         m_macValueStatic = NULL ;
>     }
> 
>     if(style & wxSL_VERTICAL) {
>         SetSizeHints(10, -1, 10, -1);  // Forces SetSize to use the proper width
>     }
>     else {
>         SetSizeHints(-1, 10, -1, 10);  // Forces SetSize to use the proper height
>     }
>     // NB!  SetSizeHints is overloaded by wxSlider and will substitute 10 with the
>     // proper dimensions, it also means other people cannot bugger the slider with
>     // other values
> 
>     MacPostControlCreate() ;
> 
>     return true;
197,198c132,133
< 	if ( m_macMinimumStatic )
< 		m_macMinimumStatic->SetLabel( valuestring ) ;
---
> 	if ( m_macValueStatic )
> 		m_macValueStatic->SetLabel( valuestring ) ;
209d143
<   // TODO
303,307d236
< bool wxSlider::Show( bool show ) 
< {
< 	return wxWindow::Show( show ) ;
< }
< 
323a253,484
> }
> 
> /* This is overloaded in wxSlider so that the proper width/height will always be used
>  * for the slider different values would cause redrawing and mouse detection problems */
> void wxSlider::SetSizeHints( int minW, int minH,
>                              int maxW = -1, int maxH = -1,
>                              int incW = -1, int incH = -1 )
> {
>     wxSize size = GetBestSize();
> 
>     if(GetWindowStyle() & wxSL_VERTICAL) {
>         wxWindow::SetSizeHints(size.x, minH, size.x, maxH, incW, incH);
>     }
>     else {
>         wxWindow::SetSizeHints(minW, size.y, maxW, size.y, incW, incH);
>     }
> }
> 
> wxSize wxSlider::DoGetBestSize() const
> {
>     wxSize size;
>     int textwidth, textheight;
> 
>     if(GetWindowStyle() & wxSL_LABELS)
>     {
>         wxString text;
>         int ht, wd;
> 
>         // Get maximum text label width and height
>         text.Printf("%d", m_rangeMin);
>         GetTextExtent(text, &textwidth, &textheight);
>         text.Printf("%d", m_rangeMax);
>         GetTextExtent(text, &wd, &ht);
>         if(ht > textheight) {
>             textheight = ht;
>         }
>         if (wd > textwidth) {
>             textwidth = wd;
>         }
>     }
> 
>     if(GetWindowStyle() & wxSL_VERTICAL)
>     {
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             size.x = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             size.x = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
>         if(GetWindowStyle() & wxSL_LABELS) {
>             size.x += textwidth + wxSLIDER_BORDERTEXT;
>         }
>         size.y = 150;
>     }
>     else
>     {
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             size.y = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             size.y = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
>         if(GetWindowStyle() & wxSL_LABELS) {
>             size.y += textheight + wxSLIDER_BORDERTEXT;
>         }
>         size.x = 150;
>     }
>     return size;
> }
> 
> void wxSlider::DoSetSize(int x, int y, int width, int height, int sizeFlags)
> {
>     Rect oldbounds, newbounds;
>     int new_x, new_y, new_width, new_height;
>     int mac_x, mac_y;
> 
>     new_x = m_x;
>     new_y = m_y;
>     new_width  = m_width;
>     new_height = m_height;
> 
>     if (sizeFlags & wxSIZE_ALLOW_MINUS_ONE)
>     {
>         new_x      = x;
>         new_y      = y;
>         new_width  = width;
>         new_height = height;
>     }
>     else
>     {
>         if (x != -1)      new_x      = x;
>         if (y != -1)      new_y      = y;
>         if (width != -1)  new_width  = width;
>         if (height != -1) new_height = height;
>     }
> 
>     if(sizeFlags & wxSIZE_AUTO)
>     {
>         wxSize size = GetBestSize();
>         if (sizeFlags & wxSIZE_AUTO_WIDTH)
>         {
>             if (width == -1)   new_width = size.x;
>         }
>         if (sizeFlags & wxSIZE_AUTO_HEIGHT)
>         {
>             if (height == -1)   new_height = size.y;
>         }
>     }
> 
>     AdjustForParentClientOrigin(new_x, new_y, sizeFlags);
> 
>     mac_x = new_x;
>     mac_y = new_y;
>     if(GetParent()) {
>         GetParent()->MacClientToRootWindow(&mac_x, &mac_y);
>     }
> 
>     GetControlBounds(m_macControl, &oldbounds);
>     oldbounds.right = oldbounds.left + m_width;
>     oldbounds.bottom = oldbounds.top + m_height;
> 
>     bool doMove = false;
>     bool doResize = false;
> 
>     if ( mac_x != oldbounds.left || mac_y != oldbounds.top )
>     {
>         doMove = true ;
>     }
>     if ( new_width != m_width || new_height != m_height )
>     {
>         doResize = true ;
>     }
> 
>     if ( doMove || doResize )
>     {
>         // Ensure resize is within constraints
>         if ((m_minWidth != -1) && (new_width < m_minWidth)) {
>             new_width = m_minWidth;
>         }
>         if ((m_minHeight != -1) && (new_height < m_minHeight)) {
>             new_height = m_minHeight;
>         }
>         if ((m_maxWidth != -1) && (new_width > m_maxWidth)) {
>             new_width = m_maxWidth;
>         }
>         if ((m_maxHeight != -1) && (new_height > m_maxHeight)) {
>             new_height = m_maxHeight;
>         }
> 
>         DoMoveWindow(new_x, new_y, new_width, new_height);
> 
>         // Update window at old and new positions
>         SetRect(&newbounds, m_x, m_y, m_x + m_width, m_y + m_height);
>         WindowRef rootwindow = GetMacRootWindow();
>         InvalWindowRect( rootwindow , &oldbounds );
>         InvalWindowRect( rootwindow , &newbounds );
> 
>         if ( doMove )
>         {
>             wxMoveEvent event(wxPoint(m_x, m_y), m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event) ;
>         }
>         if ( doResize )
>         {
>             wxSizeEvent event(wxSize(m_width, m_height), m_windowId);
>             event.SetEventObject(this);
>             GetEventHandler()->ProcessEvent(event);
>         }
>     }
> }
> 
> void wxSlider::DoMoveWindow(int x, int y, int width, int height)
> {
>     m_x = x;
>     m_y = y;
>     m_width  = width;
>     m_height = height;
> 
>     int  xborder, yborder;
>     int  minValWidth, maxValWidth, textwidth, textheight;
>     int  sliderBreadth;
> 
>     xborder = yborder = 0;
> 
>     if (GetWindowStyle() & wxSL_LABELS)
>     {
>         wxString text;
>         int ht;
> 
>         // Get maximum text label width and height
>         text.Printf("%d", m_rangeMin);
>         GetTextExtent(text, &minValWidth, &textheight);
>         text.Printf("%d", m_rangeMax);
>         GetTextExtent(text, &maxValWidth, &ht);
>         if(ht > textheight) {
>             textheight = ht;
>         }
>         textwidth = (minValWidth > maxValWidth ? minValWidth : maxValWidth);
> 
>         xborder = textwidth + wxSLIDER_BORDERTEXT;
>         yborder = textheight + wxSLIDER_BORDERTEXT;
> 
>         // Get slider breadth
>         if(GetWindowStyle() & wxSL_AUTOTICKS) {
>             sliderBreadth = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
>         }
>         else {
>             sliderBreadth = wxSLIDER_DIMENSIONACROSS_ARROW;
>         }
> 
>         if(GetWindowStyle() & wxSL_VERTICAL)
>         {
>             m_macMinimumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT,
>                                      height - yborder - textheight);
>             m_macMaximumStatic->Move(sliderBreadth + wxSLIDER_BORDERTEXT, 0);
>             m_macValueStatic->Move(0, height - textheight);
>         }
>         else
>         {
>             m_macMinimumStatic->Move(0, sliderBreadth + wxSLIDER_BORDERTEXT);
>             m_macMaximumStatic->Move(width - xborder - maxValWidth / 2,
>                                      sliderBreadth + wxSLIDER_BORDERTEXT);
>             m_macValueStatic->Move(width - textwidth, 0);
>         }
>     }
> 
>     if(GetParent()) {
>         GetParent()->MacClientToRootWindow(&x, &y);
>     }
>     UMAMoveControl(m_macControl, x, y);
>     UMASizeControl(m_macControl, width - xborder, height - yborder);

 	  	 

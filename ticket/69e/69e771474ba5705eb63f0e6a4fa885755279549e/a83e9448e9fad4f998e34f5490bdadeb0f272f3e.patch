diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/src/msw/window.cpp wxWindows/src/msw/window.cpp
--- wxWindows.orig/src/msw/window.cpp	Tue Sep 23 11:40:13 2003
+++ wxWindows/src/msw/window.cpp	Tue Sep 23 11:34:36 2003
@@ -1243,17 +1243,27 @@
 bool wxWindowMSW::IsMouseInWindow() const
 {
+    bool inWindow = false;
     // get the mouse position
     POINT pt;
     ::GetCursorPos(&pt);
 
-    // find the window which currently has the cursor and go up the window
-    // chain until we find this window - or exhaust it
+    //determine if the mouse is in the window, for the default case
+    // we just check what window the mouse is over.  For composite windows
+    // we need to check if the mouse is over a child window.
+    // TODO: determine if we have a composite type window.
     HWND hwnd = ::WindowFromPoint(pt);
 
 #if 0
-    while ( hwnd && (hwnd != GetHwnd()) )
-        hwnd = ::GetParent(hwnd);
+    // TODO: Implement IsComposite() ..
+    if ( IsComposite() )
+    {
+      // find the window which currently has the cursor and go up the window
+      // chain until we find this window - or exhaust it
+      while ( hwnd && (hwnd != GetHwnd()) )
+          hwnd = ::GetParent(hwnd);
 
-    return hwnd != NULL;
+      inWindow =  hwnd != NULL;
+    }
+    else
 #endif
     inWindow = hwnd == GetHwnd();
@@ -1264,6 +1274,12 @@
 void wxWindowMSW::OnInternalIdle()
 {
-    // Check if we need to send a LEAVE event
-    if ( m_mouseInWindow )
+    // Check if we need to send a LEAVE event this is only the case in certain
+    // circumstances when dealing with composite windows, which may have caused
+    // the WM_MOUSELEAVE to be eaten, and may never get one again.
+    // In the default case, and most often this code would never be needed.
+    // TODO: Implement IsComposite() so we can avoid this code unless we really
+    //       need it, IsMouseInWindow is rather expensive to call all the time.
+#if 0
+    if ( m_mouseInWindow  && IsComposite() )
     {
         // note that we should generate the leave event whether the window has
@@ -1307,4 +1323,5 @@
         }
     }
+#endif
 
     if (wxUpdateUIEvent::CanUpdate(this))
@@ -2408,4 +2425,58 @@
             break;
 
+        case WM_MOUSELEAVE:
+           {
+            wxASSERT_MSG( !m_mouseInWindow, wxT("the mouse should be in a window to generate this event!") );
+           
+            // only process this message if the mouse is not in the window,
+            // This can also check for children in composite windows. 
+            // however, this may mean the the wxEVT_LEAVE_WINDOW is never sent
+            // if the mouse does not enter the window from it's child before 
+            // leaving the scope of the window. ( perhaps this can be picked
+            // up in the OnIdle code as before, for this special case )
+            if ( /*IsComposite() && */!IsMouseInWindow() )
+            {
+                m_mouseInWindow = FALSE;
+
+                // Unfortunately no mouse state is passed with a WM_MOUSE_LEAVE 
+                int state = 0;
+                if ( wxIsShiftDown() )
+                    state |= MK_SHIFT;
+                if ( wxIsCtrlDown() )
+                    state |= MK_CONTROL;
+                if ( GetKeyState( VK_LBUTTON ) )
+                    state |= MK_LBUTTON;
+                if ( GetKeyState( VK_MBUTTON ) )
+                    state |= MK_MBUTTON;
+                if ( GetKeyState( VK_RBUTTON ) )
+                    state |= MK_RBUTTON;
+
+                POINT pt;
+                if ( !::GetCursorPos(&pt) )
+                {
+                    wxLogLastError(_T("GetCursorPos"));
+                }
+
+                // we need to have client coordinates here for symmetry with
+                // wxEVT_ENTER_WINDOW
+                RECT rect = wxGetWindowRect(GetHwnd());
+                pt.x -= rect.left;
+                pt.y -= rect.top;
+
+                wxMouseEvent event2(wxEVT_LEAVE_WINDOW);
+                InitMouseEvent(event2, pt.x, pt.y, state);
+
+                (void)GetEventHandler()->ProcessEvent(event2);
+            }
+            // always pass processed back as false, this allows the window
+            // manager to process the message too.  This is needed to ensure
+            // windows XP themes work properly as the mouse moves over widgets
+            // like buttons.
+            processed = false;
+           }
+           break;
+
+
+
 #if wxUSE_MOUSEWHEEL
         case WM_MOUSEWHEEL:
@@ -4342,8 +4413,17 @@
         // true, it is not if we had captured the mouse, so we need to check
         // the mouse coordinates here
-        if ( !HasCapture() || IsMouseInWindow() )
+        if ( !HasCapture() || (HasCapture() && IsMouseInWindow()) )
         {
             // Generate an ENTER event
             m_mouseInWindow = TRUE;
+            TRACKMOUSEEVENT trackinfo;
+
+            trackinfo.cbSize = sizeof(trackinfo);
+            trackinfo.dwFlags = TME_LEAVE;
+            trackinfo.hwndTrack = GetHwnd();
+            //Use the commctrl.h _TrackMouseEvent, which will call the
+            // appropriate TrackMouseEvent or emulate it ( win95 )
+            // else we need _WIN32_WINNT >= 0x0400 
+            _TrackMouseEvent(&trackinfo);
 
             wxMouseEvent event(wxEVT_ENTER_WINDOW);

 	  	 

diff --git a/configure b/configure
index fb8476a..c5d9feb 100755
--- a/configure
+++ b/configure
@@ -956,6 +956,8 @@ GTKPRINT_CFLAGS
 SDL_LIBS
 SDL_CFLAGS
 SDL_CONFIG
+GTKSPELL_LIBS
+GTKSPELL_CFLAGS
 LIBSECRET_LIBS
 LIBSECRET_CFLAGS
 GXX_VERSION
@@ -1185,6 +1187,7 @@ enable_printfposparam
 enable_secretstore
 enable_snglinst
 enable_sound
+enable_spellcheck
 enable_stdpaths
 enable_stopwatch
 enable_streams
@@ -1399,6 +1402,8 @@ MesaGL_CFLAGS
 MesaGL_LIBS
 LIBSECRET_CFLAGS
 LIBSECRET_LIBS
+GTKSPELL_CFLAGS
+GTKSPELL_LIBS
 GTKPRINT_CFLAGS
 GTKPRINT_LIBS
 GNOMEVFS_CFLAGS
@@ -2123,6 +2128,7 @@ Optional Features:
   --enable-secretstore    use wxSecretStore class
   --enable-snglinst       use wxSingleInstanceChecker class
   --enable-sound          use wxSound class
+  --enable-spellcheck     spellchecking in wxTextCtrl class
   --enable-stdpaths       use wxStandardPaths class
   --enable-stopwatch      use wxStopWatch class
   --enable-streams        use wxStream etc classes
@@ -2395,6 +2401,10 @@ Some influential environment variables:
               C compiler flags for LIBSECRET, overriding pkg-config
   LIBSECRET_LIBS
               linker flags for LIBSECRET, overriding pkg-config
+  GTKSPELL_CFLAGS
+              C compiler flags for GTKSPELL, overriding pkg-config
+  GTKSPELL_LIBS
+              linker flags for GTKSPELL, overriding pkg-config
   GTKPRINT_CFLAGS
               C compiler flags for GTKPRINT, overriding pkg-config
   GTKPRINT_LIBS
@@ -7367,6 +7377,35 @@ fi
               fi
           fi
 
+          # Check whether --enable-spellcheck was given.
+if test "${enable_spellcheck+set}" = set; then :
+  enableval=$enable_spellcheck;
+                          if test "$enableval" = yes; then
+                            wx_cv_use_spellcheck='wxUSE_SPELLCHECK=yes'
+                          else
+                            wx_cv_use_spellcheck='wxUSE_SPELLCHECK=no'
+                          fi
+
+else
+
+                          wx_cv_use_spellcheck='wxUSE_SPELLCHECK=${'DEFAULT_wxUSE_SPELLCHECK":-$defaultval}"
+
+fi
+
+
+          eval "$wx_cv_use_spellcheck"
+
+
+          enablestring=
+          defaultval=$wxUSE_ALL_FEATURES
+          if test -z "$defaultval"; then
+              if test x"$enablestring" = xdisable; then
+                  defaultval=yes
+              else
+                  defaultval=no
+              fi
+          fi
+
           # Check whether --enable-stdpaths was given.
 if test "${enable_stdpaths+set}" = set; then :
   enableval=$enable_stdpaths;
@@ -31493,6 +31532,185 @@ fi
 fi
 
 
+
+if test "$wxUSE_SPELLCHECK" = "yes"; then
+            if test "$wxUSE_MSW" != "1" -a "$wxUSE_OSX_COCOA" != 1; then
+        if test "$wxGTK_VERSION" != "3"; then
+
+pkg_failed=no
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for GTKSPELL" >&5
+$as_echo_n "checking for GTKSPELL... " >&6; }
+
+if test -n "$PKG_CONFIG"; then
+    if test -n "$GTKSPELL_CFLAGS"; then
+        pkg_cv_GTKSPELL_CFLAGS="$GTKSPELL_CFLAGS"
+    else
+        if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gtkspell-2.0\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gtkspell-2.0") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_GTKSPELL_CFLAGS=`$PKG_CONFIG --cflags "gtkspell-2.0" 2>/dev/null`
+else
+  pkg_failed=yes
+fi
+    fi
+else
+	pkg_failed=untried
+fi
+if test -n "$PKG_CONFIG"; then
+    if test -n "$GTKSPELL_LIBS"; then
+        pkg_cv_GTKSPELL_LIBS="$GTKSPELL_LIBS"
+    else
+        if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gtkspell-2.0\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gtkspell-2.0") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_GTKSPELL_LIBS=`$PKG_CONFIG --libs "gtkspell-2.0" 2>/dev/null`
+else
+  pkg_failed=yes
+fi
+    fi
+else
+	pkg_failed=untried
+fi
+
+
+
+if test $pkg_failed = yes; then
+
+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
+        _pkg_short_errors_supported=yes
+else
+        _pkg_short_errors_supported=no
+fi
+        if test $_pkg_short_errors_supported = yes; then
+	        GTKSPELL_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gtkspell-2.0"`
+        else
+	        GTKSPELL_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gtkspell-2.0"`
+        fi
+	# Put the nasty error message in config.log where it belongs
+	echo "$GTKSPELL_PKG_ERRORS" >&5
+
+
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: gtkspell-2.0 not found, spellchecking won't be available" >&5
+$as_echo "$as_me: WARNING: gtkspell-2.0 not found, spellchecking won't be available" >&2;}
+                    wxUSE_SPELLCHECK=no
+
+
+elif test $pkg_failed = untried; then
+
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: gtkspell-2.0 not found, spellchecking won't be available" >&5
+$as_echo "$as_me: WARNING: gtkspell-2.0 not found, spellchecking won't be available" >&2;}
+                    wxUSE_SPELLCHECK=no
+
+
+else
+	GTKSPELL_CFLAGS=$pkg_cv_GTKSPELL_CFLAGS
+	GTKSPELL_LIBS=$pkg_cv_GTKSPELL_LIBS
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+                    CXXFLAGS="$GTKSPELL_CFLAGS $CXXFLAGS"
+                    LIBS="$GTKSPELL_LIBS $LIBS"
+
+fi
+        else
+
+pkg_failed=no
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for GTKSPELL" >&5
+$as_echo_n "checking for GTKSPELL... " >&6; }
+
+if test -n "$PKG_CONFIG"; then
+    if test -n "$GTKSPELL_CFLAGS"; then
+        pkg_cv_GTKSPELL_CFLAGS="$GTKSPELL_CFLAGS"
+    else
+        if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gtkspell3-3.0\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gtkspell3-3.0") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_GTKSPELL_CFLAGS=`$PKG_CONFIG --cflags "gtkspell3-3.0" 2>/dev/null`
+else
+  pkg_failed=yes
+fi
+    fi
+else
+	pkg_failed=untried
+fi
+if test -n "$PKG_CONFIG"; then
+    if test -n "$GTKSPELL_LIBS"; then
+        pkg_cv_GTKSPELL_LIBS="$GTKSPELL_LIBS"
+    else
+        if test -n "$PKG_CONFIG" && \
+    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gtkspell3-3.0\""; } >&5
+  ($PKG_CONFIG --exists --print-errors "gtkspell3-3.0") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then
+  pkg_cv_GTKSPELL_LIBS=`$PKG_CONFIG --libs "gtkspell3-3.0" 2>/dev/null`
+else
+  pkg_failed=yes
+fi
+    fi
+else
+	pkg_failed=untried
+fi
+
+
+
+if test $pkg_failed = yes; then
+
+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
+        _pkg_short_errors_supported=yes
+else
+        _pkg_short_errors_supported=no
+fi
+        if test $_pkg_short_errors_supported = yes; then
+	        GTKSPELL_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gtkspell3-3.0"`
+        else
+	        GTKSPELL_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gtkspell3-3.0"`
+        fi
+	# Put the nasty error message in config.log where it belongs
+	echo "$GTKSPELL_PKG_ERRORS" >&5
+
+
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: gtkspell3-3.0 not found, spellchecking won't be available" >&5
+$as_echo "$as_me: WARNING: gtkspell3-3.0 not found, spellchecking won't be available" >&2;}
+                    wxUSE_SPELLCHECK=no
+
+
+elif test $pkg_failed = untried; then
+
+                    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: gtkspell3-3.0 not found, spellchecking won't be available" >&5
+$as_echo "$as_me: WARNING: gtkspell3-3.0 not found, spellchecking won't be available" >&2;}
+                    wxUSE_SPELLCHECK=no
+
+
+else
+	GTKSPELL_CFLAGS=$pkg_cv_GTKSPELL_CFLAGS
+	GTKSPELL_LIBS=$pkg_cv_GTKSPELL_LIBS
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+                    CXXFLAGS="$GTKSPELL_CFLAGS $CXXFLAGS"
+                    LIBS="$GTKSPELL_LIBS $LIBS"
+
+fi
+        fi
+    fi
+
+    if test "$wxUSE_SPELLCHECK" = "yes"; then
+        $as_echo "#define wxUSE_SPELLCHECK 1" >>confdefs.h
+
+    fi
+fi
+
+
 if test "$wxUSE_STL" = "yes"; then
   $as_echo "#define wxUSE_STL 1" >>confdefs.h
 
diff --git a/configure.in b/configure.in
index 15b9539..07b7922 100644
--- a/configure.in
+++ b/configure.in
@@ -725,6 +725,7 @@ WX_ARG_FEATURE(printfposparam,[  --enable-printfposparam use wxVsnprintf() which
 WX_ARG_FEATURE(secretstore,   [  --enable-secretstore    use wxSecretStore class], wxUSE_SECRETSTORE)
 WX_ARG_FEATURE(snglinst,      [  --enable-snglinst       use wxSingleInstanceChecker class], wxUSE_SNGLINST_CHECKER)
 WX_ARG_FEATURE(sound,         [  --enable-sound          use wxSound class], wxUSE_SOUND)
+WX_ARG_FEATURE(spellcheck,    [  --enable-spellcheck     spellchecking in wxTextCtrl class], wxUSE_SPELLCHECK)
 WX_ARG_FEATURE(stdpaths,      [  --enable-stdpaths       use wxStandardPaths class], wxUSE_STDPATHS)
 WX_ARG_FEATURE(stopwatch,     [  --enable-stopwatch      use wxStopWatch class], wxUSE_STOPWATCH)
 WX_ARG_FEATURE(streams,       [  --enable-streams        use wxStream etc classes], wxUSE_STREAMS)
@@ -5353,6 +5354,45 @@ if test "$wxUSE_SECRETSTORE" = "yes"; then
     fi
 fi
 
+
+dnl ---------------------------------------------------------------------------
+dnl Spellchecking for wxTextCtrl
+dnl ---------------------------------------------------------------------------
+
+if test "$wxUSE_SPELLCHECK" = "yes"; then
+    dnl The required APIs are always available under MSW and OS X but we must
+    dnl have GNOME gtkspell under Unix to be able to compile this feature.
+    if test "$wxUSE_MSW" != "1" -a "$wxUSE_OSX_COCOA" != 1; then
+        if test "$wxGTK_VERSION" != "3"; then
+            PKG_CHECK_MODULES(GTKSPELL, [gtkspell-2.0],
+                [
+                    CXXFLAGS="$GTKSPELL_CFLAGS $CXXFLAGS"
+                    LIBS="$GTKSPELL_LIBS $LIBS"
+                ],
+                [
+                    AC_MSG_WARN([gtkspell-2.0 not found, spellchecking won't be available])
+                    wxUSE_SPELLCHECK=no
+                ]
+            )
+        else
+            PKG_CHECK_MODULES(GTKSPELL, [gtkspell3-3.0],
+                [
+                    CXXFLAGS="$GTKSPELL_CFLAGS $CXXFLAGS"
+                    LIBS="$GTKSPELL_LIBS $LIBS"
+                ],
+                [
+                    AC_MSG_WARN([gtkspell3-3.0 not found, spellchecking won't be available])
+                    wxUSE_SPELLCHECK=no
+                ]
+            )
+        fi
+    fi
+
+    if test "$wxUSE_SPELLCHECK" = "yes"; then
+        AC_DEFINE(wxUSE_SPELLCHECK)
+    fi
+fi
+
 dnl ---------------------------------------------------------------------------
 dnl Register non-GUI class options for makefiles and setup.h
 dnl ---------------------------------------------------------------------------
diff --git a/docs/doxygen/mainpages/const_wxusedef.h b/docs/doxygen/mainpages/const_wxusedef.h
index 1e47431..852be02 100644
--- a/docs/doxygen/mainpages/const_wxusedef.h
+++ b/docs/doxygen/mainpages/const_wxusedef.h
@@ -207,6 +207,7 @@ library:
 @itemdef{wxUSE_SOUND, Use wxSound class.}
 @itemdef{wxUSE_SPINBTN, Use wxSpinButton class.}
 @itemdef{wxUSE_SPINCTRL, Use wxSpinCtrl class.}
+@itemdef{wxUSE_SPELLCHECK, Allow use of native spellcheckers in wxTextCtrl.}
 @itemdef{wxUSE_SPLASH, Use wxSplashScreen class.}
 @itemdef{wxUSE_SPLINES, Provide methods for spline drawing in wxDC.}
 @itemdef{wxUSE_SPLITTER, Use wxSplitterWindow class.}
diff --git a/include/wx/android/setup.h b/include/wx/android/setup.h
index ca05367..1c45476 100644
--- a/include/wx/android/setup.h
+++ b/include/wx/android/setup.h
@@ -440,6 +440,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/chkconf.h b/include/wx/chkconf.h
index 2722a6b..dbbe625 100644
--- a/include/wx/chkconf.h
+++ b/include/wx/chkconf.h
@@ -285,6 +285,14 @@
 #   endif
 #endif /* !defined(wxUSE_SECRETSTORE) */
 
+#ifndef wxUSE_SPELLCHECK
+#   ifdef wxABORT_ON_CONFIG_ERROR
+#       error "wxUSE_SPELLCHECK must be defined, please read comment near the top of this file."
+#   else
+#       define wxUSE_SPELLCHECK 1
+#   endif
+#endif /* !defined(wxUSE_SPELLCHECK) */
+
 #ifndef wxUSE_STDPATHS
 #   ifdef wxABORT_ON_CONFIG_ERROR
 #       error "wxUSE_STDPATHS must be defined, please read comment near the top of this file."
diff --git a/include/wx/gtk/setup0.h b/include/wx/gtk/setup0.h
index 89c9de0..63509dd 100644
--- a/include/wx/gtk/setup0.h
+++ b/include/wx/gtk/setup0.h
@@ -441,6 +441,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/gtk/textctrl.h b/include/wx/gtk/textctrl.h
index 921538b..821990a 100644
--- a/include/wx/gtk/textctrl.h
+++ b/include/wx/gtk/textctrl.h
@@ -96,6 +96,12 @@ public:
     // Overridden wxWindow methods
     virtual void SetWindowStyleFlag( long style ) wxOVERRIDE;
     virtual bool Enable( bool enable = true ) wxOVERRIDE;
+    
+#if wxUSE_SPELLCHECK    
+    // Use native spelling and grammer checking functions.
+    virtual wxTextSpellcheckStatus EnableSpellcheck(const bool enable = true) wxOVERRIDE;
+    virtual bool IsSpellcheckEnabled() wxOVERRIDE;
+#endif // wxUSE_SPELLCHECK
 
     // Implementation from now on
     void OnDropFiles( wxDropFilesEvent &event );
diff --git a/include/wx/gtk1/textctrl.h b/include/wx/gtk1/textctrl.h
index cfc6eaf..2eefd77 100644
--- a/include/wx/gtk1/textctrl.h
+++ b/include/wx/gtk1/textctrl.h
@@ -105,6 +105,18 @@ public:
 
     virtual void DoEnable( bool enable );
 
+#if wxUSE_SPELLCHECK    
+    // Spell checking is not available in wxGTK1.
+    virtual wxTextSpellcheckStatus EnableSpellcheck(const bool enable = true) wxOVERRIDE
+    {
+        return wxTEXT_SPELLCHECK_NOT_AVAILABLE;
+    }
+    virtual bool IsSpellcheckEnabled() wxOVERRIDE
+    {
+        return false;
+    }
+#endif // wxUSE_SPELLCHECK
+
     // Implementation from now on
     void OnDropFiles( wxDropFilesEvent &event );
     void OnChar( wxKeyEvent &event );
diff --git a/include/wx/motif/setup0.h b/include/wx/motif/setup0.h
index b9d39e7..aaf2d23 100644
--- a/include/wx/motif/setup0.h
+++ b/include/wx/motif/setup0.h
@@ -441,6 +441,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/msw/setup0.h b/include/wx/msw/setup0.h
index 2da0234..0a21414 100644
--- a/include/wx/msw/setup0.h
+++ b/include/wx/msw/setup0.h
@@ -441,6 +441,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/osx/setup0.h b/include/wx/osx/setup0.h
index 37ac4ba..3574af4 100644
--- a/include/wx/osx/setup0.h
+++ b/include/wx/osx/setup0.h
@@ -442,6 +442,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/setup_inc.h b/include/wx/setup_inc.h
index a383b00..0b93bb2 100644
--- a/include/wx/setup_inc.h
+++ b/include/wx/setup_inc.h
@@ -437,6 +437,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/include/wx/textctrl.h b/include/wx/textctrl.h
index 3414095..315dcf7 100644
--- a/include/wx/textctrl.h
+++ b/include/wx/textctrl.h
@@ -270,6 +270,18 @@ enum wxTextAttrLineSpacing
     wxTEXT_ATTR_LINE_SPACING_TWICE          = 20
 };
 
+#if wxUSE_SPELLCHECK
+/*!
+ * Spellcheck status values
+ */
+enum wxTextSpellcheckStatus
+{
+    wxTEXT_SPELLCHECK_NOT_AVAILABLE,
+    wxTEXT_SPELLCHECK_ERROR,
+    wxTEXT_SPELLCHECK_OK
+};
+#endif // wxUSE_SPELLCHECK
+
 // ----------------------------------------------------------------------------
 // wxTextAttr: a structure containing the visual attributes of a text
 // ----------------------------------------------------------------------------
@@ -742,6 +754,12 @@ public:
         return GetCompositeControlsDefaultAttributes(variant);
     }
 
+#if wxUSE_SPELLCHECK    
+    // Use native spelling and grammer checking functions.
+    virtual wxTextSpellcheckStatus EnableSpellcheck(const bool enable) = 0;
+    virtual bool IsSpellcheckEnabled() = 0;
+#endif // wxUSE_SPELLCHECK
+
 protected:
     // Override wxEvtHandler method to check for a common problem of binding
     // wxEVT_TEXT_ENTER to a control without wxTE_PROCESS_ENTER style, which is
diff --git a/include/wx/univ/setup0.h b/include/wx/univ/setup0.h
index 1222353..18fc170 100644
--- a/include/wx/univ/setup0.h
+++ b/include/wx/univ/setup0.h
@@ -440,6 +440,15 @@
 // Recommended setting: 1 (but may be safely disabled if you don't use it)
 #define wxUSE_SECRETSTORE   1
 
+// Allow the use of the OS built-in spellchecker on wxTextCtrl (multiline
+// only). Currently wxGTK, wxMSW and wxOSX implemented.
+//
+// Default is 1
+//
+// Recommended setting: 1 (but may be safely disabled if you don't use it)
+
+#define wxUSE_SPELLCHECK   1
+
 // Use wxStandardPaths class which allows to retrieve some standard locations
 // in the file system
 //
diff --git a/samples/text/text.cpp b/samples/text/text.cpp
index fa48fd7..9d1307d 100644
--- a/samples/text/text.cpp
+++ b/samples/text/text.cpp
@@ -142,6 +142,9 @@ public:
     MyTextCtrl    *m_password;
     MyTextCtrl    *m_enter;
     MyTextCtrl    *m_tab;
+#if wxUSE_SPELLCHECK
+    MyTextCtrl    *m_spell;
+#endif // wxUSE_SPELLCHECK
     MyTextCtrl    *m_readonly;
     MyTextCtrl    *m_limited;
 
@@ -1184,6 +1187,14 @@ MyPanel::MyPanel( wxFrame *frame, int x, int y, int w, int h )
       wxPoint(180,170), wxSize(200,70), wxTE_MULTILINE | wxTE_PROCESS_ENTER );
     m_enter->SetClientData((void *)wxT("enter"));
 
+#if wxUSE_SPELLCHECK    
+    m_spell = new MyTextCtrl(this, 100, wxT("Multiline, spellcheck enabled."),
+    wxPoint(180,270), wxSize(200,70), wxTE_MULTILINE);
+    wxASSERT(m_spell->EnableSpellcheck(true) != wxTEXT_SPELLCHECK_ERROR);
+    wxASSERT(m_spell->IsSpellcheckEnabled());
+    m_spell->SetClientData((void *)wxT("spell"));
+#endif
+
     m_textrich = new MyTextCtrl(this, wxID_ANY, wxT("Allows more than 30Kb of text\n")
                                 wxT("(on all Windows versions)\n")
                                 wxT("and a very very very very very ")
@@ -1221,8 +1232,10 @@ MyPanel::MyPanel( wxFrame *frame, int x, int y, int w, int h )
     wxBoxSizer *column2 = new wxBoxSizer(wxVERTICAL);
     column2->Add( m_multitext, 1, wxALL | wxEXPAND, 10 );
     column2->Add( m_tab, 0, wxALL | wxEXPAND, 10 );
-    column2->Add( m_enter, 1, wxALL | wxEXPAND, 10 );
-
+    column2->Add( m_enter, 0, wxALL | wxEXPAND, 10 );
+#if wxUSE_SPELLCHECK
+    column2->Add( m_spell, 1, wxALL | wxEXPAND, 10 );
+#endif
     wxBoxSizer *row1 = new wxBoxSizer(wxHORIZONTAL);
     row1->Add( column1, 0, wxALL | wxEXPAND, 10 );
     row1->Add( column2, 1, wxALL | wxEXPAND, 10 );
diff --git a/setup.h.in b/setup.h.in
index 06c9fc9..70dc55b 100644
--- a/setup.h.in
+++ b/setup.h.in
@@ -232,6 +232,9 @@
 
 #define wxUSE_SECRETSTORE   0
 
+
+#define wxUSE_SPELLCHECK   0
+
 #define wxUSE_STDPATHS      0
 
 #define wxUSE_TEXTBUFFER    0
diff --git a/src/gtk/textctrl.cpp b/src/gtk/textctrl.cpp
index 772bb94..fe86c20 100644
--- a/src/gtk/textctrl.cpp
+++ b/src/gtk/textctrl.cpp
@@ -33,6 +33,16 @@
 #include "wx/gtk/private.h"
 #include "wx/gtk/private/gtk2-compat.h"
 
+#if wxUSE_SPELLCHECK
+extern "C" {
+#if GTK_CHECK_VERSION(3,0,0)
+#include <gtkspell-3.0/gtkspell/gtkspell.h>
+#else // GTK_CHECK_VERSION(3,0,0)
+#include <gtkspell-2.0/gtkspell/gtkspell.h>
+#endif // GTK_CHECK_VERSION(3,0,0)
+}
+#endif // wxUSE_SPELLCHECK
+
 // ----------------------------------------------------------------------------
 // helpers
 // ----------------------------------------------------------------------------
@@ -770,7 +780,7 @@ bool wxTextCtrl::Create( wxWindow *parent,
     // left justification (alignment) is the default anyhow
     if ( style & (wxTE_RIGHT | wxTE_CENTRE) )
         GTKSetJustification();
-
+        
     if (multi_line)
     {
         // Handle URLs on multi-line controls with wxTE_AUTO_URL style
@@ -946,6 +956,83 @@ void wxTextCtrl::GTKSetJustification()
     }
 }
 
+#if wxUSE_SPELLCHECK
+
+wxTextSpellcheckStatus wxTextCtrl::EnableSpellcheck(const bool enable)
+{
+    if (!IsMultiLine())
+        return wxTEXT_SPELLCHECK_NOT_AVAILABLE;
+    
+    GtkTextView *textview = GTK_TEXT_VIEW(m_text);
+    wxASSERT_MSG( textview, wxS("wxTextCtrl is not a GtkTextView" ));
+    
+    wxString lang = wxLocale::GetLanguageCanonicalName(wxLANGUAGE_DEFAULT);
+    
+#if GTK_CHECK_VERSION(3,0,0)
+    GtkSpellChecker *spell = gtk_spell_checker_get_from_text_view(textview);
+
+    if (enable)
+    {
+        if (!spell)
+        {
+            spell = gtk_spell_checker_new();
+            gtk_spell_checker_attach(spell, textview);
+        }
+
+        if (!gtk_spell_checker_set_language(spell, NULL, NULL))
+            return wxTEXT_SPELLCHECK_ERROR;
+    }
+    else
+    {
+        if (spell)
+            gtk_spell_checker_detach(spell);
+    }
+
+#else // GTK_CHECK_VERSION(3,0,0) 
+    // GTK+ 2.x code.
+    GtkSpell *spell = gtkspell_get_from_text_view(textview);
+    GError *err = NULL;
+
+    if (enable)
+    {
+        if (spell)
+            gtkspell_set_language(spell, NULL, &err);
+        else
+            gtkspell_new_attach(textview, NULL, &err);
+
+        if (err)
+        {
+            puts (err->message);
+            g_error_free(err);
+            return wxTEXT_SPELLCHECK_ERROR;
+        }
+    }
+    else
+    {
+        if (spell)
+            gtkspell_detach(spell);
+    }
+
+#endif // GTK_CHECK_VERSION(3,0,0)
+
+   return wxTEXT_SPELLCHECK_OK;
+}
+
+bool wxTextCtrl::IsSpellcheckEnabled()
+{
+    GtkTextView *textview = GTK_TEXT_VIEW(m_text);
+
+#if GTK_CHECK_VERSION(3,0,0)
+    GtkSpellChecker *spell = gtk_spell_checker_get_from_text_view(textview);   
+#else
+    GtkSpell *spell = gtkspell_get_from_text_view(textview);
+#endif // GTK_CHECK_VERSION(3,0,0)    
+
+    return (spell != NULL);
+}
+
+#endif // wxUSE_SPELLCHECK
+
 void wxTextCtrl::SetWindowStyleFlag(long style)
 {
     long styleOld = GetWindowStyleFlag();

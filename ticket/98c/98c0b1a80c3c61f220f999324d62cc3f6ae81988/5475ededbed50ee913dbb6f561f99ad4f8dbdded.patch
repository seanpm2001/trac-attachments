Index: include/wx/accel.h
===================================================================
--- include/wx/accel.h	(revision 3411)
+++ include/wx/accel.h	(working copy)
@@ -118,14 +118,18 @@
     // returns a wxString for the this accelerator.
     // this function formats it using the <flags>-<keycode> format
     // where <flags> maybe a hyphen-separated list of "shift|alt|ctrl"
-    wxString ToString() const;
+    wxString ToString() const { return ToString(true); }
 
+    wxString ToRawString() const { return ToString(false); }
+
     // returns true if the given string correctly initialized this object
     // (i.e. if IsOk() returns true after this call)
     bool FromString(const wxString& str);
 
 
 private:
+    wxString ToString(bool localized) const;
+
     // common part of Create() and FromString()
     static bool ParseAccel(const wxString& str, int *flags, int *keycode);
 
Index: src/common/accelcmn.cpp
===================================================================
--- src/common/accelcmn.cpp	(revision 3371)
+++ src/common/accelcmn.cpp	(working copy)
@@ -304,30 +304,35 @@
     return ParseAccel(str, &m_flags, &m_keyCode);
 }
 
-wxString wxAcceleratorEntry::ToString() const
+static wxString optionally_localize(const wxString& str, bool localize)
 {
+    return localize ? wxGetTranslation (str) : str;
+}
+
+wxString wxAcceleratorEntry::ToString(bool localized) const
+{
     wxString text;
 
     int flags = GetFlags();
     if ( flags & wxACCEL_ALT )
-        text += _("Alt+");
+        text += optionally_localize(wxTRANSLATE("Alt+"), localized);
     if ( flags & wxACCEL_CTRL )
-        text += _("Ctrl+");
+        text += optionally_localize(wxTRANSLATE("Ctrl+"), localized);
     if ( flags & wxACCEL_SHIFT )
-        text += _("Shift+");
+        text += optionally_localize(wxTRANSLATE("Shift+"), localized);
 #if defined(__WXMAC__) || defined(__WXCOCOA__)
     if ( flags & wxACCEL_RAW_CTRL )
-        text += _("RawCtrl+");
+        text += optionally_localize(wxTRANSLATE("RawCtrl+"), localized);
 #endif
     
     const int code = GetKeyCode();
 
     if ( code >= WXK_F1 && code <= WXK_F12 )
-        text << _("F") << code - WXK_F1 + 1;
+        text << optionally_localize(wxTRANSLATE("F"), localized) << code - WXK_F1 + 1;
     else if ( code >= WXK_NUMPAD0 && code <= WXK_NUMPAD9 )
-        text << _("KP_") << code - WXK_NUMPAD0;
+        text << optionally_localize(wxTRANSLATE("KP_"), localized) << code - WXK_NUMPAD0;
     else if ( code >= WXK_SPECIAL1 && code <= WXK_SPECIAL20 )
-        text << _("SPECIAL") << code - WXK_SPECIAL1 + 1;
+        text << optionally_localize(wxTRANSLATE("SPECIAL"), localized) << code - WXK_SPECIAL1 + 1;
     else // check the named keys
     {
         size_t n;
@@ -336,7 +341,7 @@
             const wxKeyName& kn = wxKeyNames[n];
             if ( code == kn.code )
             {
-                text << wxGetTranslation(kn.name);
+                text << optionally_localize(kn.name, localized);
                 break;
             }
         }

/////////////////////////////////////////////////////////////////////////////// Name:        minimal.cpp// Purpose:     Minimal wxWindows sample// Author:      Julian Smart// Modified by:// Created:     04/01/98// RCS-ID:      $Id: minimal.cpp,v 1.39 2000/11/03 20:52:17 vadz Exp $// Copyright:   (c) Julian Smart// Licence:     wxWindows licence/////////////////////////////////////////////////////////////////////////////// ============================================================================// declarations// ============================================================================// ----------------------------------------------------------------------------// headers// ----------------------------------------------------------------------------//#define __WXMAC__ 1#ifdef __GNUG__    #pragma implementation "minimal.cpp"    #pragma interface "minimal.cpp"#endif// For compilers that support precompilation, includes "wx/wx.h".#include "wx/wxprec.h"#ifdef __BORLANDC__    #pragma hdrstop#endif// for all others, include the necessary headers (this file is usually all you// need because it includes almost all "standard" wxWindows headers)#ifndef WX_PRECOMP    #include "wx/wx.h"#endif#include "wx/colordlg.h"// ----------------------------------------------------------------------------// resources// ----------------------------------------------------------------------------// the application icon#if defined(__WXGTK__) || defined(__WXMOTIF__)    #include "mondrian.xpm"#endif// ----------------------------------------------------------------------------// private classes// ----------------------------------------------------------------------------// A custom modal dialogclass MyModalDialog : public wxDialog{public:    MyModalDialog(wxWindow *parent);    void OnButton(wxCommandEvent& event);private:    DECLARE_EVENT_TABLE()};// Define a new application type, each program should derive a class from wxAppclass MyApp : public wxApp{public:    // override base class virtuals    // ----------------------------    // this one is called on application startup and is a good place for the app    // initialization (doing it here and not in the ctor allows to have an error    // return: if OnInit() returns false, the application terminates)    virtual bool OnInit();};// Define a new frame type: this is going to be our main frameclass MyFrame : public wxFrame{public:    // ctor(s)    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);    // event handlers (these functions should _not_ be virtual)    void OnPaint(wxPaintEvent& event)    {        wxPaintDC dc(this);        dc.DrawRectangle(20, 20, 100, 100);        dc.SetPen(*wxRED_PEN);        dc.SetDeviceOrigin(20, 20);        dc.SetClippingRegion(0, 0, 100, 100);        dc.DrawLine(0, 0, 1000, 1000);    }    void OnQuit(wxCommandEvent& event);    void OnAbout(wxCommandEvent& event);    void OnDialog(wxCommandEvent& event);private:    // any class wishing to process wxWindows events must use this macro    DECLARE_EVENT_TABLE()};// ----------------------------------------------------------------------------// constants// ----------------------------------------------------------------------------// IDs for the controls and the menu commandsenum{    // menu items    Minimal_Quit = 1,    Minimal_Dialog,    Minimal_About,    BUT_DIALOG};// ----------------------------------------------------------------------------// event tables and other macros for wxWindows// ----------------------------------------------------------------------------// the event tables connect the wxWindows events with the functions (event// handlers) which process them. It can be also done at run-time, but for the// simple menu events like this the static method is much simpler.BEGIN_EVENT_TABLE(MyFrame, wxFrame)    EVT_PAINT(MyFrame::OnPaint)    EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)    EVT_MENU(Minimal_About, MyFrame::OnAbout)    EVT_MENU(Minimal_Dialog, MyFrame::OnDialog)END_EVENT_TABLE()// Create a new application object: this macro will allow wxWindows to create// the application object during program execution (it's better than using a// static object for many reasons) and also declares the accessor function// wxGetApp() which will return the reference of the right type (i.e. MyApp and// not wxApp)IMPLEMENT_APP(MyApp)// ============================================================================// implementation// ============================================================================// ----------------------------------------------------------------------------// the application class// ----------------------------------------------------------------------------// 'Main program' equivalent: the program execution "starts" herebool MyApp::OnInit(){    // create the main application window    MyFrame *frame = new MyFrame("Minimal wxWindows App",                                 wxPoint(50, 50), wxSize(450, 340));    // and show it (the frames, unlike simple controls, are not shown when    // created initially)    frame->Show(TRUE);    // success: wxApp::OnRun() will be called which will enter the main message    // loop and the application will run. If we returned FALSE here, the    // application would exit immediately.    return TRUE;}// ----------------------------------------------------------------------------// main frame// ----------------------------------------------------------------------------// frame constructorMyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)       : wxFrame((wxFrame *)NULL, -1, title, pos, size){#ifdef __WXMAC__    // we need this in order to allow the about menu relocation, since ABOUT is    // not the default id of the about menu    wxApp::s_macAboutMenuItemId = Minimal_About;#endif    // set the frame icon    SetIcon(wxICON(mondrian));    // create a menu bar    wxMenu *menuFile = new wxMenu("", wxMENU_TEAROFF);    // the "About" item should be in the help menu    wxMenu *helpMenu = new wxMenu;    helpMenu->Append(Minimal_About, "&About...\tCtrl-A", "Show about dialog");        helpMenu->Append(Minimal_Dialog, "&Dialog...\tCtrl-D", "A dialog");    menuFile->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");    // now append the freshly created menu to the menu bar...    wxMenuBar *menuBar = new wxMenuBar();    menuBar->Append(menuFile, "&File");    menuBar->Append(helpMenu, "&Help");    // ... and attach this menu bar to the frame    SetMenuBar(menuBar);#if wxUSE_STATUSBAR    // create a status bar just for fun (by default with 1 pane only)    CreateStatusBar(2);    SetStatusText("Welcome to wxWindows!");#endif // wxUSE_STATUSBAR}// event handlersvoid MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event)){    // TRUE is to force the frame to close    Close(TRUE);}void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event)){    wxString msg;    msg.Printf( _T("This is the about dialog of minimal sample.\n")                _T("Welcome to %s"), wxVERSION_STRING);    wxMessageBox(msg, "About Minimal", wxOK | wxICON_INFORMATION, this);}void MyFrame::OnDialog(wxCommandEvent& WXUNUSED(event)){    MyModalDialog dlg(this);    dlg.ShowModal();   		}// ----------------------------------------------------------------------------// MyModalDialog// ----------------------------------------------------------------------------BEGIN_EVENT_TABLE(MyModalDialog, wxDialog)    EVT_BUTTON(BUT_DIALOG, MyModalDialog::OnButton)END_EVENT_TABLE()MyModalDialog::MyModalDialog(wxWindow *parent)             : wxDialog(parent, -1, wxString("Primary dialog"),              	wxDefaultPosition, wxSize( 300, 200 ),              	wxCAPTION | wxTHICK_FRAME | wxDIALOG_MODAL ){			(void) new wxStaticBox( this, -1, "StaticBox", 			wxPoint(10,10), wxSize(280,180) ),			  (void) new wxButton( this, BUT_DIALOG, "Another Dialog",   	wxPoint(80,40), wxSize(100,20) );  (void) new wxButton( this, wxID_CANCEL, "Cancel",   	wxPoint(200,40), wxSize(60,20) );  (void) new wxStaticText( this, -1, "StaticText inside StaticBox disappears",   	wxPoint(60, 80), wxDefaultSize );	  (void) new wxStaticText( this, -1, "after another dialog (Another Dialog button)",   	wxPoint(60, 110), wxDefaultSize );	  (void) new wxStaticText( this, -1, "is shown over this one",   	wxPoint(60, 140), wxDefaultSize );	}void MyModalDialog::OnButton(wxCommandEvent& event){		    wxColourData data;    data.SetChooseFull(TRUE);    for (int i = 0; i < 16; i++)    {        wxColour colour(i*16, i*16, i*16);        data.SetCustomColour(i, colour);    }    wxColourDialog *dialog = new wxColourDialog(this, &data);    dialog->SetTitle("Dummy Color Dialog");    if (dialog->ShowModal() == wxID_OK)    {    }    dialog->Destroy();}
 	  	 

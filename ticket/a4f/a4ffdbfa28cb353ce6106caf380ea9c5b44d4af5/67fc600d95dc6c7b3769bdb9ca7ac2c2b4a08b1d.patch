Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/function.tex,v
retrieving revision 1.268
diff -u -r1.268 function.tex
--- docs/latex/wx/function.tex	2006/12/29 20:18:57	1.268
+++ docs/latex/wx/function.tex	2007/01/18 20:37:59
@@ -180,6 +180,7 @@
 \helpref{wxIsPlatformLittleEndian}{wxisplatformlittleendian}\\
 \helpref{wxIsPlatform64Bit}{wxisplatform64bit}\\
 \helpref{wxIsWild}{wxiswild}\\
+\helpref{wxJoin}{wxjoin}\\
 \helpref{wxKill}{wxkill}\\
 \helpref{wxLaunchDefaultBrowser}{wxlaunchdefaultbrowser}\\
 \helpref{wxLEAVE\_CRIT\_SECT}{wxleavecritsect}\\
@@ -239,6 +240,7 @@
 \helpref{wxShutdown}{wxshutdown}\\
 \helpref{wxSleep}{wxsleep}\\
 \helpref{wxSnprintf}{wxsnprintf}\\
+\helpref{wxSplit}{wxsplit}\\
 \helpref{wxSplitPath}{wxsplitfunction}\\
 \helpref{wxStartTimer}{wxstarttimer}\\
 \helpref{wxStaticCast}{wxstaticcast}\\
@@ -695,6 +697,25 @@
 <wx/app.h>
 
 
+\membersection{::wxJoin}\label{wxjoin}
+
+\func{wxString}{wxJoin}{\param{const wxArrayString\&}{ arr}, \param{const wxChar}{ sep}, \param{const wxChar}{ escape = '\\'}}
+
+Join the given \helpref{wxArrayString}{wxarraystring} object using the separator \arg{sep} and returns
+the result as a \helpref{wxString}{string}.
+
+If the \arg{escape} character is non-\NULL, then it's used as prefix for each occurrence of \arg{sep}
+in the strings contained in \arg{arr} before joining them.
+
+\wxheading{See also}
+
+\helpref{wxSplit}{wxsplit}
+
+\wxheading{Include files}
+
+<wx/arrstr.h>
+
+
 \membersection{::wxKill}\label{wxkill}
 
 \func{int}{wxKill}{\param{long}{ pid}, \param{int}{ sig = wxSIGTERM}, \param{wxKillError }{*rc = NULL}, \param{int }{flags = 0}}
@@ -1286,6 +1307,27 @@
 
 Sets the current working directory, returning true if the operation succeeded.
 Under MS Windows, the current drive is also changed if {\it dir} contains a drive specification.
+
+
+\membersection{::wxSplit}\label{wxsplit}
+
+\func{wxArrayString}{wxSplit}{\param{const wxString\&}{ str}, \param{const wxChar}{ sep}, \param{const wxChar}{ escape = '\\'}}
+
+Splits the given \helpref{wxString}{wxstring} object using the separator \arg{sep} and returns the
+result as a \helpref{wxArrayString}{wxarraystring}.
+
+If the \arg{escape} character is non-\NULL, then the occurrences of \arg{sep} immediately prefixed
+with \arg{escape} will not be considered separators.
+
+Note that empty tokens will be generated if there are two or more adjacent separators.
+
+\wxheading{See also}
+
+\helpref{wxJoin}{wxjoin}
+
+\wxheading{Include files}
+
+<wx/arrstr.h>
 
 
 \membersection{::wxSplitPath}\label{wxsplitfunction}

Index: include/wx/arrstr.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/arrstr.h,v
retrieving revision 1.20
diff -bu2 -r1.20 include/wx/arrstr.h
--- include/wx/arrstr.h
+++ include/wx/arrstr.h
@@ -57,5 +57,5 @@
         return size() - copies;
     }
-};
+}
 
 class WXDLLIMPEXP_BASE wxSortedArrayString : public wxSortedArrayStringBase
@@ -370,3 +370,9 @@
 };
 
+
+// global join & split utilities:
+
+wxString wxJoin(const wxArrayString& arr, const wxChar sep, const wxChar escape = wxT('\\'));
+wxArrayString wxSplit(const wxString& str, const wxChar sep, const wxChar escape = wxT('\\'));
+
 #endif
Index: src/common/string.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/string.cpp,v
retrieving revision 1.289
diff -u -r1.289 string.cpp
--- src/common/string.cpp	2007/01/07 16:17:25	1.289
+++ src/common/string.cpp	2007/01/18 20:30:38
@@ -1589,7 +1589,7 @@
 // ---------------------------------------------------------------------------
 
 // some compilers (VC++ 6.0 not to name them) return true for a call to
-// isspace('ê') in the C locale which seems to be broken to me, but we have to
+// isspace('ï¿½) in the C locale which seems to be broken to me, but we have to
 // live with this by checking that the character is a 7 bit one - even if this
 // may fail to detect some spaces (I don't know if Unicode doesn't have
 // space-like symbols somewhere except in the first 128 chars), it is arguably
@@ -2542,4 +2542,92 @@
 int wxCMPFUNC_CONV wxStringSortDescending(wxString* s1, wxString* s2)
 {
     return -s1->Cmp(*s2);
+}
+
+
+
+// ===========================================================================
+// wxJoin and wxSplit
+// ===========================================================================
+
+#include "wx/tokenzr.h"
+
+wxString wxJoin(const wxArrayString& arr, const wxChar sep, const wxChar escape)
+{
+    size_t max=arr.GetCount();
+    if (max == 0)
+        return wxEmptyString;
+
+    wxString str;
+
+    // the "medium" lenght of the strings in the given array: how we compute it
+    // is very arbitrary but this is better than nothing
+    size_t mlen = (arr.Item(0).Len() + arr.Item(max-1).Len()) / 2;
+    str.Alloc(max * mlen);
+
+    if (escape == wxT('\0'))
+    {
+        // escaping is disabled:
+
+        for (size_t i=0; i<max; i++)
+            str << arr.Item(i) << sep;
+    }
+    else
+    {
+        for (size_t i=0; i<max; i++)
+        {
+            for (const wxChar *p = arr.Item(i); *p != wxT('\0'); p++)
+            {
+                if ( *p == sep )
+                    str << escape;      // escape this separator
+                str << *p;
+            }
+
+            str << sep;
+        }
+    }
+
+    // remove the last separator
+    str.RemoveLast();
+    return str;
+}
+
+wxArrayString wxSplit(const wxString& str, const wxChar sep, const wxChar escape)
+{
+    if (escape == wxT('\0'))
+        // we don't need to honour the escape character
+        return wxStringTokenize(str, sep, 
+                wxTOKEN_RET_EMPTY_ALL /* return all tokens, event empty ones */);
+
+    wxArrayString ret;
+    wxString curr;
+    wxChar prev = wxT('\0');
+
+    for (const wxChar *p = str.c_str(); *p != wxT('\0'); p++)
+    {
+        if ( *p == sep )
+        {
+            if ( prev == escape )
+            {
+                // remove the escape character and don't consider this
+                // occurrence of 'sep' as a real separator
+                curr.Last() = sep;
+            }
+            else
+            {
+                // add only non-empty tokens
+                ret.Add(curr);
+                curr.Empty();
+            }
+        }
+        else
+            curr << *p;
+
+        prev = *p;
+    }
+
+    // add the last token
+    ret.Add(curr);
+
+    return ret;
 }
Index: tests/arrays/arrays.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/arrays/arrays.cpp,v
retrieving revision 1.10
diff -u -r1.10 arrays.cpp
--- tests/arrays/arrays.cpp	2006/11/04 12:51:01	1.10
+++ tests/arrays/arrays.cpp	2007/01/18 20:18:01
@@ -151,6 +151,10 @@
 private:
     CPPUNIT_TEST_SUITE( ArraysTestCase );
         CPPUNIT_TEST( wxStringArrayTest );
+        CPPUNIT_TEST( wxStringArraySplitTest );
+        CPPUNIT_TEST( wxStringArrayJoinTest );
+        CPPUNIT_TEST( wxStringArraySplitJoinTest );
+
         CPPUNIT_TEST( wxObjArrayTest );
         CPPUNIT_TEST( wxArrayUShortTest );
         CPPUNIT_TEST( wxArrayIntTest );
@@ -160,6 +164,9 @@
     CPPUNIT_TEST_SUITE_END();
 
     void wxStringArrayTest();
+    void wxStringArraySplitTest();
+    void wxStringArrayJoinTest();
+    void wxStringArraySplitJoinTest();
     void wxObjArrayTest();
     void wxArrayUShortTest();
     void wxArrayIntTest();
@@ -294,6 +301,151 @@
                                           _T("a") ,
                                           _T("a") ,
                                           _T("a") ) );
+}
+
+void ArraysTestCase::wxStringArraySplitTest()
+{
+    // test wxSplit:
+
+    {
+        wxString str = wxT(",,,,first,second,third,,");
+        const wxChar *expected[] = 
+            { wxT(""), wxT(""), wxT(""), wxT(""), wxT("first"), 
+              wxT("second"), wxT("third"), wxT(""), wxT("") };
+
+        wxArrayString exparr(WXSIZEOF(expected), expected);
+        wxArrayString realarr(wxSplit(str, wxT(',')));
+        CPPUNIT_ASSERT( exparr == realarr );
+    }
+
+    {
+        wxString str = wxT(",\\,first,second,third,");
+        const wxChar *expected[] = 
+            { wxT(""), wxT(",first"), wxT("second"), wxT("third"), wxT("") };
+        const wxChar *expected2[] = 
+            { wxT(""), wxT("\\"), wxT("first"), wxT("second"), wxT("third"), wxT("") };
+
+        // escaping on:
+        wxArrayString exparr(WXSIZEOF(expected), expected);
+        wxArrayString realarr(wxSplit(str, wxT(','), wxT('\\')));
+        CPPUNIT_ASSERT( exparr == realarr );
+
+        // escaping turned off:
+        wxArrayString exparr2(WXSIZEOF(expected2), expected2);
+        wxArrayString realarr2(wxSplit(str, wxT(','), wxT('\0')));
+        CPPUNIT_ASSERT( exparr2 == realarr2 );
+    }
+
+    {
+        // test is escape characters placed before non-separator character are
+        // just ignored as they should:
+        wxString str = wxT(",\\,,fir\\st,se\\cond\\,,\\third");
+        const wxChar *expected[] = 
+            { wxT(""), wxT(","), wxT("fir\\st"), wxT("se\\cond,"), wxT("\\third") };
+        const wxChar *expected2[] = 
+            { wxT(""), wxT("\\"), wxT(""), wxT("fir\\st"), wxT("se\\cond\\"), 
+              wxT(""), wxT("\\third") };
+
+        // escaping on:
+        wxArrayString exparr(WXSIZEOF(expected), expected);
+        wxArrayString realarr(wxSplit(str, wxT(','), wxT('\\')));
+        CPPUNIT_ASSERT( exparr == realarr );
+
+        // escaping turned off:
+        wxArrayString exparr2(WXSIZEOF(expected2), expected2);
+        wxArrayString realarr2(wxSplit(str, wxT(','), wxT('\0')));
+        CPPUNIT_ASSERT( exparr2 == realarr2 );
+    }
+}
+
+void ArraysTestCase::wxStringArrayJoinTest()
+{
+    // test wxJoin:
+
+    {
+        const wxChar *arr[] = { wxT("first"), wxT(""), wxT("second"), wxT("third") };
+        wxString expected = wxT("first,,second,third");
+    
+        wxArrayString arrstr(WXSIZEOF(arr), arr);
+        wxString result = wxJoin(arrstr, wxT(','));
+        CPPUNIT_ASSERT( expected == result );
+    }
+
+    {
+        const wxChar *arr[] = { wxT("first, word"), wxT(",,second"), wxT("third,,") };
+        wxString expected = wxT("first\\, word,\\,\\,second,third\\,\\,");
+        wxString expected2 = wxT("first, word,,,second,third,,");
+
+        // escaping on:
+        wxArrayString arrstr(WXSIZEOF(arr), arr);
+        wxString result = wxJoin(arrstr, wxT(','), wxT('\\'));
+        CPPUNIT_ASSERT( expected == result );
+
+        // escaping turned off:
+        wxString result2 = wxJoin(arrstr, wxT(','), wxT('\0'));
+        CPPUNIT_ASSERT( expected2 == result2 );
+    }
+
+    {
+        // test is escape characters placed in the original array are just ignored as they should:
+        const wxChar *arr[] = { wxT("first\\, wo\\rd"), wxT("seco\\nd"), wxT("\\third\\") };
+        wxString expected = wxT("first\\\\, wo\\rd,seco\\nd,\\third\\");
+        wxString expected2 = wxT("first\\, wo\\rd,seco\\nd,\\third\\");
+
+        // escaping on:
+        wxArrayString arrstr(WXSIZEOF(arr), arr);
+        wxString result = wxJoin(arrstr, wxT(','), wxT('\\'));
+        CPPUNIT_ASSERT( expected == result );
+
+        // escaping turned off:
+        wxString result2 = wxJoin(arrstr, wxT(','), wxT('\0'));
+        CPPUNIT_ASSERT( expected2 == result2 );
+    }
+}
+
+void ArraysTestCase::wxStringArraySplitJoinTest()
+{
+    wxChar separators[] = { wxT('a'), wxT(','), wxT('_'), wxT(' '), wxT('\\'),
+                            wxT('&'), wxT('{'), wxT('A'), wxT('<'), wxT('>'),
+                            wxT('\''), wxT('\n'), wxT('!'), wxT('-') };
+
+    // test with a string: split it and then rejoin it:
+
+    wxString str = wxT("This is a long, long test; if wxSplit and wxJoin do work ")
+                   wxT("correctly, then splitting and joining this 'text' _multiple_ ")
+                   wxT("times shouldn't cause any loss of content.\n")
+                   wxT("This is some latex code: ")
+                   wxT("\\func{wxString}{wxJoin}{")
+                   wxT("\\param{const wxArray String\\&}{ arr}, ")
+                   wxT("\\param{const wxChar}{ sep}, ")
+                   wxT("\\param{const wxChar}{ escape = '\\'}}.\n")
+                   wxT("This is some HTML code: ")
+                   wxT("<html><head><meta http-equiv=\"content-type\">")
+                   wxT("<title>Initial page of Mozilla Firefox</title>")
+                   wxT("</meta></head></html>");
+
+    for (size_t i=0; i < WXSIZEOF(separators); i++)
+    {
+        wxArrayString arr = wxSplit(str, separators[i]);
+        CPPUNIT_ASSERT( str == wxJoin(arr, separators[i]) );
+    }
+
+
+    // test with an array: join it and then resplit it:
+    
+    const wxChar *arr[] = 
+        { 
+            wxT("first, second!"), wxT("this is the third!!"), 
+            wxT("\nThat's the fourth token\n\n"), wxT(" - fifth\ndummy\ntoken - "),
+            wxT("_sixth__token__with_underscores"), wxT("The! Last! One!")
+        };
+    wxArrayString theArr(WXSIZEOF(arr), arr);
+
+    for (size_t i=0; i < WXSIZEOF(separators); i++)
+    {
+        wxString string = wxJoin(theArr, separators[i]);
+        CPPUNIT_ASSERT( theArr == wxSplit(string, separators[i]) );
+    }
 }
 
 void ArraysTestCase::wxObjArrayTest()

 	  	 

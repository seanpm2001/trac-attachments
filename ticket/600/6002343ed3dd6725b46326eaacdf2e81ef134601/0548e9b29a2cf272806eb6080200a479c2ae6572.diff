Index: include/wx/zstream.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/zstream.h,v
retrieving revision 1.25
diff -u -2 -r1.25 zstream.h
--- include/wx/zstream.h	2003/12/21 04:30:32	1.25
+++ include/wx/zstream.h	2004/04/06 17:34:13
@@ -32,12 +32,18 @@
 // Flags
 enum {
+#if WXWIN_COMPATIBILITY_2_4
+    wxZLIB_24COMPATIBLE = 4,// read v2.4.x data without error
+#endif
     wxZLIB_NO_HEADER = 0,   // raw deflate stream, no header or checksum
     wxZLIB_ZLIB = 1,        // zlib header and checksum
-    wxZLIB_GZIP = 2         // gzip header and checksum, requires zlib 1.2+
+#ifdef wxHAVE_GZIP
+    wxZLIB_GZIP = 2,        // gzip header and checksum, requires zlib 1.2.1+
+#endif
+    wxZLIB_AUTO = 3         // autodetect header zlib or gzip
 };
 
 class WXDLLIMPEXP_BASE wxZlibInputStream: public wxFilterInputStream {
  public:
-  wxZlibInputStream(wxInputStream& stream, int flags = wxZLIB_ZLIB | wxZLIB_GZIP);
+  wxZlibInputStream(wxInputStream& stream, int flags = wxZLIB_AUTO);
   virtual ~wxZlibInputStream();
 
@@ -45,4 +51,6 @@
   size_t GetSize() const { return wxInputStream::GetSize(); }
 
+  static bool CanHandleGZip();
+
  protected:
   size_t OnSysRead(void *buffer, size_t size);
@@ -54,6 +62,9 @@
   struct z_stream_s *m_inflate;
   off_t m_pos;
+#if WXWIN_COMPATIBILITY_2_4
+  bool m_24compatibilty;
+#endif
 
-    DECLARE_NO_COPY_CLASS(wxZlibInputStream)
+  DECLARE_NO_COPY_CLASS(wxZlibInputStream)
 };
 
@@ -66,4 +77,6 @@
   size_t GetSize() const { return (size_t)m_pos; }
 
+  static bool CanHandleGZip();
+
  protected:
   size_t OnSysWrite(const void *buffer, size_t size);
@@ -78,5 +91,5 @@
   off_t m_pos;
 
-    DECLARE_NO_COPY_CLASS(wxZlibOutputStream)
+  DECLARE_NO_COPY_CLASS(wxZlibOutputStream)
 };
 
Index: src/common/zstream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/zstream.cpp,v
retrieving revision 1.44
diff -u -2 -r1.44 zstream.cpp
--- src/common/zstream.cpp	2004/03/29 18:46:00	1.44
+++ src/common/zstream.cpp	2004/04/06 17:34:14
@@ -23,4 +23,9 @@
 #if wxUSE_ZLIB && wxUSE_STREAMS
 
+// define before including zstream.h so that wxZLIB_GZIP is defined internally
+#ifndef wxHAVE_GZIP
+#   define wxHAVE_GZIP
+#endif
+
 #include "wx/zstream.h"
 #include "wx/utils.h"
@@ -39,5 +44,7 @@
 
 enum {
-    ZSTREAM_BUFFER_SIZE = 16384
+    ZSTREAM_BUFFER_SIZE = 16384,
+    ZSTREAM_GZIP        = 0x10,     // gzip header
+    ZSTREAM_AUTO        = 0x20      // auto detect between gzip and zlib
 };
 
@@ -54,4 +61,24 @@
   m_pos = 0;
 
+#if WXWIN_COMPATIBILITY_2_4
+  // treat compatibilty mode as auto
+  m_24compatibilty = flags == wxZLIB_24COMPATIBLE;
+  if (m_24compatibilty)
+    flags = wxZLIB_AUTO;
+#endif
+
+  // if gzip is asked for but not supported...
+  if ((flags == wxZLIB_GZIP || flags == wxZLIB_AUTO) && !CanHandleGZip()) {
+    if (flags == wxZLIB_AUTO) {
+      // an error will come later if the input turns out not to be a zlib
+      flags = wxZLIB_ZLIB;
+    }
+    else {
+      wxLogError(_("Gzip not supported by this version of zlib"));
+      m_lasterror = wxSTREAM_READ_ERROR;
+      return;
+    }
+  }
+
   if (m_z_buffer) {
     m_inflate = new z_stream_s;
@@ -60,17 +87,15 @@
       memset(m_inflate, 0, sizeof(z_stream_s));
 
-      wxASSERT((flags & ~(wxZLIB_ZLIB | wxZLIB_GZIP)) == 0);
- 
-      // when autodetecting between gzip & zlib, silently drop gzip flag
-      // if the version of zlib doesn't support it
-      if (flags == (wxZLIB_ZLIB | wxZLIB_GZIP)
-              && strcmp(zlib_version, "1.2.") < 0)
-        flags &= ~wxZLIB_GZIP;
-
-      int bits = flags ? MAX_WBITS : -MAX_WBITS;
-      if (flags & wxZLIB_GZIP)
-        bits |= (flags & wxZLIB_ZLIB) ? 0x20 : 0x10;
+      // see zlib.h for documentation on windowBits
+      int windowBits = MAX_WBITS;
+      switch (flags) {
+        case wxZLIB_NO_HEADER:  windowBits = -MAX_WBITS; break;
+        case wxZLIB_ZLIB:       windowBits = MAX_WBITS; break;
+        case wxZLIB_GZIP:       windowBits = MAX_WBITS | ZSTREAM_GZIP; break;
+        case wxZLIB_AUTO:       windowBits = MAX_WBITS | ZSTREAM_AUTO; break;
+        default:                wxFAIL_MSG(wxT("Invalid zlib flag"));
+      }
 
-      if (inflateInit2(m_inflate, bits) == Z_OK)
+      if (inflateInit2(m_inflate, windowBits) == Z_OK)
         return;
     }
@@ -103,34 +128,47 @@
 
   while (err == Z_OK && m_inflate->avail_out > 0) {
-    if (m_inflate->avail_in == 0) {
+    if (m_inflate->avail_in == 0 && m_parent_i_stream->IsOk()) {
       m_parent_i_stream->Read(m_z_buffer, m_z_size);
       m_inflate->next_in = m_z_buffer;
       m_inflate->avail_in = m_parent_i_stream->LastRead();
+    }
+    err = inflate(m_inflate, Z_SYNC_FLUSH);
+  }
 
-      if (m_inflate->avail_in == 0) {
-        if (m_parent_i_stream->Eof())
-          wxLogError(_("Can't read inflate stream: unexpected EOF in underlying stream."));
-        m_lasterror = wxSTREAM_READ_ERROR;
+  switch (err) {
+    case Z_OK:
         break;
+
+    case Z_STREAM_END:
+      // Unread any data taken from past the end of the deflate stream, so that
+      // any additional data can be read from the underlying stream (the crc
+      // in a gzip for example)
+      if (m_inflate->avail_in) {
+        m_parent_i_stream->Ungetch(m_inflate->next_in, m_inflate->avail_in);
+        m_inflate->avail_in = 0;
       }
-    }
-    err = inflate(m_inflate, Z_NO_FLUSH);
-  }
+      m_lasterror = wxSTREAM_EOF;
+      break;
 
-  if (err == Z_STREAM_END) {
-    // Unread any data taken from past the end of the deflate stream, so that
-    // any additional data can be read from the underlying stream (the crc
-    // in a gzip for example)
-    if (m_inflate->avail_in) {
-      m_parent_i_stream->Ungetch(m_inflate->next_in, m_inflate->avail_in);
-      m_inflate->avail_in = 0;
-    }
-    m_lasterror = wxSTREAM_EOF;
-  } else if (err != Z_OK) {
-    wxString msg(m_inflate->msg, *wxConvCurrent);
-    if (!msg)
-      msg.Format(_("zlib error %d"), err);
-    wxLogError(_("Can't read from inflate stream: %s\n"), msg.c_str());
-    m_lasterror = wxSTREAM_READ_ERROR;
+    case Z_BUF_ERROR:
+      // Indicates that zlib was expecting more data, but the parent stream
+      // has none. Other than Eof the error will have been already reported
+      // by the parent strean,
+      m_lasterror = wxSTREAM_READ_ERROR;
+      if (m_parent_i_stream->Eof())
+#if WXWIN_COMPATIBILITY_2_4
+        if (m_24compatibilty)
+          m_lasterror = wxSTREAM_EOF;
+        else
+#endif
+          wxLogError(_("Can't read inflate stream: unexpected EOF in underlying stream."));
+      break;
+
+    default:
+      wxString msg(m_inflate->msg, *wxConvCurrent);
+      if (!msg)
+        msg.Format(_("zlib error %d"), err);
+      wxLogError(_("Can't read from inflate stream: %s"), msg.c_str());
+      m_lasterror = wxSTREAM_READ_ERROR;
   }
 
@@ -140,4 +178,13 @@
 }
 
+/* static */ bool wxZlibInputStream::CanHandleGZip()
+{
+  const char *dot = strchr(zlibVersion(), '.');
+  int major = atoi(zlibVersion());
+  int minor = dot ? atoi(dot + 1) : 0;
+  return major > 1 || (major == 1 && minor >= 2);
+}
+
+
 //////////////////////
 // wxZlibOutputStream
@@ -163,22 +210,32 @@
   }
 
-  if (m_z_buffer) {
-     m_deflate = new z_stream_s;
+  // if gzip is asked for but not supported...
+  if (flags == wxZLIB_GZIP && !CanHandleGZip()) {
+    wxLogError(_("Gzip not supported by this version of zlib"));
+    m_lasterror = wxSTREAM_WRITE_ERROR;
+    return;
+  }
 
-     if (m_deflate) {
-        memset(m_deflate, 0, sizeof(z_stream_s));
-        m_deflate->next_out = m_z_buffer;
-        m_deflate->avail_out = m_z_size;
+  if (m_z_buffer) {
+    m_deflate = new z_stream_s;
 
-        wxASSERT(flags == 0 || flags == wxZLIB_ZLIB || flags == wxZLIB_GZIP);
+    if (m_deflate) {
+      memset(m_deflate, 0, sizeof(z_stream_s));
+      m_deflate->next_out = m_z_buffer;
+      m_deflate->avail_out = m_z_size;
  
-        int bits = flags ? MAX_WBITS : -MAX_WBITS;
-        if (flags & wxZLIB_GZIP)
-            bits |= 0x10;
-
-        if (deflateInit2(m_deflate, level, Z_DEFLATED, bits, 
-                         8, Z_DEFAULT_STRATEGY) == Z_OK)
-          return;
-     }
+      // see zlib.h for documentation on windowBits
+      int windowBits = MAX_WBITS;
+      switch (flags) {
+        case wxZLIB_NO_HEADER:  windowBits = -MAX_WBITS; break;
+        case wxZLIB_ZLIB:       windowBits = MAX_WBITS; break;
+        case wxZLIB_GZIP:       windowBits = MAX_WBITS | ZSTREAM_GZIP; break;
+        default:                wxFAIL_MSG(wxT("Invalid zlib flag"));
+      }
+
+      if (deflateInit2(m_deflate, level, Z_DEFLATED, windowBits, 
+                       8, Z_DEFAULT_STRATEGY) == Z_OK)
+        return;
+    }
   }
 
@@ -262,5 +319,5 @@
     if (!msg)
       msg.Format(_("zlib error %d"), err);
-    wxLogError(_("Can't write to deflate stream: %s\n"), msg.c_str());
+    wxLogError(_("Can't write to deflate stream: %s"), msg.c_str());
   }
 
@@ -268,4 +325,9 @@
   m_pos += size;
   return size;
+}
+
+/* static */ bool wxZlibOutputStream::CanHandleGZip()
+{ 
+  return wxZlibInputStream::CanHandleGZip();
 }
 
Index: configure.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/configure.in,v
retrieving revision 1.813
diff -u -2 -r1.813 configure.in
--- configure.in	2004/03/30 14:38:10	1.813
+++ configure.in	2004/04/06 17:34:32
@@ -2067,4 +2067,10 @@
             dnl we are using the system library
             wxUSE_ZLIB=sys
+            dnl zlib 1.2.1+ is required for gzip support, and this version
+            dnl introduces a new #define ZLIB_VERNUM
+            AC_CHECK_DECL(ZLIB_VERNUM,
+                [AC_DEFINE(wxHAVE_GZIP)], [],
+                [#include <zlib.h>]
+            )
         fi
     fi
Index: setup.h.in
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h.in,v
retrieving revision 1.138
diff -u -2 -r1.138 setup.h.in
--- setup.h.in	2004/03/05 10:54:04	1.138
+++ setup.h.in	2004/04/06 17:34:34
@@ -197,7 +197,8 @@
 #define wxUSE_XML 0
 /*
- * Use zlib
+ * Use zlib, and does it have gzip support
  */
 #define wxUSE_ZLIB 0
+#undef wxHAVE_GZIP
 /*
  * Use libpng
Index: setup.h_vms
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/setup.h_vms,v
retrieving revision 1.67
diff -u -2 -r1.67 setup.h_vms
--- setup.h_vms	2004/03/19 08:53:03	1.67
+++ setup.h_vms	2004/04/06 17:34:35
@@ -206,7 +206,8 @@
 #define wxUSE_XML 1
 /*
- * Use zlib
+ * Use zlib, and does it have gzip support
  */
 #define wxUSE_ZLIB 1
+#undef wxHAVE_GZIP
 /*
  * Use libpng
Index: docs/latex/wx/strmzlib.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/strmzlib.tex,v
retrieving revision 1.10
diff -u -2 -r1.10 strmzlib.tex
--- docs/latex/wx/strmzlib.tex	2003/12/21 04:28:40	1.10
+++ docs/latex/wx/strmzlib.tex	2004/04/06 17:34:36
@@ -5,5 +5,6 @@
 
 This filter stream decompresses a stream that is in zlib or gzip format.
-Note that reading the gzip format requires zlib version 1.2.0 greater.
+Note that reading the gzip format requires zlib version 1.2.1 or greater,
+(the builtin version does support gzips).
 
 The stream is not seekable, \helpref{SeekI()}{wxinputstreamseeki} returns
@@ -28,12 +29,23 @@
 \membersection{wxZlibInputStream::wxZlibInputStream}
 
-\func{}{wxZlibInputStream}{\param{wxInputStream\&}{ stream}, \param{int}{ flags = wxZLIB\_ZLIB | wxZLIB\_GZIP}}
+\func{}{wxZlibInputStream}{\param{wxInputStream\&}{ stream}, \param{int}{ flags = wxZLIB\_AUTO}}
 
 The {\it flags} wxZLIB\_ZLIB and wxZLIB\_GZIP specify whether the input data
-is in zlib or gzip format. If both are used, bitwise ored, then zlib will
+is in zlib or gzip format. If wxZLIB\_AUTO is used, then zlib will
 autodetect the stream type, this is the default.
-If {\it flags} is zero, then the data is assumed to be a raw deflate stream
-without either zlib or gzip headers.
 
+If {\it flags} is wxZLIB\_NO\_HEADER, then the data is assumed to be a raw
+deflate stream without either zlib or gzip headers. This is a lower level
+mode, which is not usually used directly. It can be used to read a raw
+deflate stream embedded in a higher level protocol.
+
+%if WXWIN_COMPATIBILITY_2_4
+This version is not by default compatible with the output produced by
+the version of {\it wxZlibOutputStream} in wxWidgets 2.4.x. However,
+there is a compatibilty mode, which is switched on by passing
+wxZLIB\_24COMPATIBLE for flags. Note that in when operating in compatibilty
+mode error checking is very much reduced.
+%endif
+
 The following symbols can be use for the flags:
 
@@ -41,10 +53,21 @@
 // Flags
 enum {
-    wxZLIB_NO_HEADER = 0,   // raw deflate stream, no header or checksum
-    wxZLIB_ZLIB = 1,        // zlib header and checksum
-    wxZLIB_GZIP = 2         // gzip header and checksum, requires zlib 1.2+
+#if WXWIN_COMPATIBILITY_2_4
+    wxZLIB_24COMPATIBLE = 4, // read v2.4.x data without error
+#endif
+    wxZLIB_NO_HEADER = 0,    // raw deflate stream, no header or checksum
+    wxZLIB_ZLIB = 1,         // zlib header and checksum
+#ifdef wxHAVE_GZIP
+    wxZLIB_GZIP = 2,         // gzip header and checksum, requires zlib 1.2.1+
+#endif
+    wxZLIB_AUTO = 3          // autodetect header zlib or gzip
 };
 \end{verbatim}
 
+\membersection{wxZlibInputStream::CanHandleGZip}\label{wxzlibinputstreamcanhandlegzip}
+
+\func{static bool}{CanHandleGZip}{\void}
+
+Returns true if zlib library in use can handle gzip compressed data.
 
 % -----------------------------------------------------------------------------
@@ -55,5 +78,6 @@
 This stream compresses all data written to it. The compressed output can be
 in zlib or gzip format.
-Note that writing the gzip format requires zlib version 1.2.0 greater.
+Note that writing the gzip format requires zlib version 1.2.1 or greater
+(the builtin version does support gzips).
 
 The stream is not seekable, \helpref{SeekO()}{wxoutputstreamseeko} returns
@@ -87,7 +111,10 @@
 The {\it flags} wxZLIB\_ZLIB and wxZLIB\_GZIP specify whether the output data
 will be in zlib or gzip format. wxZLIB\_ZLIB is the default.
-If {\it flags} is zero, then a raw deflate stream is output without either
-zlib or gzip headers.
 
+If {\it flags} is wxZLIB\_NO\_HEADER, then a raw deflate stream is output
+without either zlib or gzip headers. This is a lower level
+mode, which is not usually used directly. It can be used to embed a raw
+deflate stream in a higher level protocol.
+
 The following symbols can be use for the compression level and flags:
 
@@ -105,6 +132,14 @@
     wxZLIB_NO_HEADER = 0,   // raw deflate stream, no header or checksum
     wxZLIB_ZLIB = 1,        // zlib header and checksum
-    wxZLIB_GZIP = 2         // gzip header and checksum, requires zlib 1.2+
+#ifdef wxHAVE_GZIP
+    wxZLIB_GZIP = 2,        // gzip header and checksum, requires zlib 1.2.1+
+#endif
 };
 \end{verbatim}
+
+\membersection{wxZlibOutputStream::CanHandleGZip}\label{wxoutputstreamcanhandlegzip}
+
+\func{static bool}{CanHandleGZip}{\void}
+
+Returns true if zlib library in use can handle gzip compressed data.
 
Index: docs/tech/tn0017.txt
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/tech/tn0017.txt,v
retrieving revision 1.2
diff -u -2 -r1.2 tn0017.txt
--- docs/tech/tn0017.txt	2004/03/03 22:55:57	1.2
+++ docs/tech/tn0017.txt	2004/04/06 17:34:36
@@ -51,6 +51,6 @@
 
 1. Regenerate the make/project files from test.bkl using bakefile_gen, e.g.:
-        cd build/bakefile
-        bakefile_gen ../../tests/test.bkl
+        cd build/bakefiles
+        bakefile_gen -b ../../tests/test.bkl
    and if you're on a unix system re-run configure.
 
Index: docs/changes.txt
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/changes.txt,v
retrieving revision 1.430
diff -u -2 -r1.430 changes.txt
--- docs/changes.txt	2004/03/30 17:10:30	1.430
+++ docs/changes.txt	2004/04/06 17:34:45
@@ -43,4 +43,7 @@
   Previously, the application terminated if there were no top level windows;
   now it terminates if there are no top level windows or taskbar icons left.
+- wxZlibInputStream is not by default compatible with the output of the
+  2.4.x version of wxZlibOutputStream. However, there is a compatibilty mode,
+  switched on by passing wxZLIB_24COMPATIBLE to the constructor.
 
 wxTaskBarIcon must be explicitly destroyed now, otherwise the application

 	  	 

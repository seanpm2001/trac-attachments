Index: samples/minimal/minimal.cpp
===================================================================
--- samples/minimal/minimal.cpp	(revision 73350)
+++ samples/minimal/minimal.cpp	(working copy)
@@ -30,6 +30,10 @@
     #include "wx/wx.h"
 #endif
 
+#include "wx/dataview.h"
+
+#pragma comment (lib, "wxmsw29ud_adv.lib")
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -69,6 +73,11 @@
     void OnAbout(wxCommandEvent& event);
 
 private:
+	void InitDataViewListCtrl(const int fieldCount);
+
+	wxDataViewListCtrl *lc_;	
+	wxObjectDataPtr<wxDataViewListStore> model_;
+
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -172,9 +181,41 @@
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+
+	lc_ = new wxDataViewListCtrl(this, wxID_ANY);
+	InitDataViewListCtrl(12);
+	InitDataViewListCtrl(5);
 }
 
 
+void MyFrame::InitDataViewListCtrl(const int fieldCount)
+{
+	lc_->DeleteAllItems();
+	lc_->ClearColumns();
+
+	//model_.reset(new wxDataViewListStore());	
+	//lc_->AssociateModel(model_.get());
+
+	for (int i = 0; i < fieldCount; i++)
+	{		
+		wxString str("Field ");
+		str << i;
+		lc_->AppendTextColumn(str);
+	}
+
+	wxVector<wxVariant> data;
+	for (int iRecord = 0; iRecord < 10; iRecord++)
+	{        
+		data.clear();	
+		for (int i = 0; i < fieldCount; i++)
+		{
+			data.push_back(wxString("NULL"));
+		}
+		lc_->AppendItem(data);
+	}
+}
+
+
 // event handlers
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))

--- a/samples/minimal/minimal.cpp
+++ b/samples/minimal/minimal.cpp
@@ -30,6 +30,13 @@
     #include "wx/wx.h"
 #endif
 
+#include <wx/propgrid/propgrid.h>
+#pragma comment(lib, "wxmsw31ud_adv.lib")
+#pragma comment(lib, "wxmsw31ud_propgrid.lib")
+
+const int TIMER_DELAY = 10;
+const int NUM_PROPS = 1000;
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -44,6 +51,72 @@
 // private classes
 // ----------------------------------------------------------------------------
 
+typedef struct
+{
+    int x, y, z;
+} Point3D;
+
+WX_PG_DECLARE_VARIANT_DATA(Point3D)
+
+class CoordProperty : public wxPGProperty
+{
+    WX_PG_DECLARE_PROPERTY_CLASS(wxCoordProperty)
+public:
+    CoordProperty( const wxString& label = wxPG_LABEL,
+                   const wxString& name = wxPG_LABEL,
+                   const Point3D& value = Point3D() );
+    virtual ~CoordProperty();
+
+    virtual wxVariant ChildChanged( wxVariant& thisValue,
+                                    int childIndex,
+                                    wxVariant& childValue ) const wxOVERRIDE;
+    virtual void RefreshChildren() wxOVERRIDE;
+};
+
+WX_PG_IMPLEMENT_VARIANT_DATA_DUMMY_EQ(Point3D)
+
+WX_PG_IMPLEMENT_PROPERTY_CLASS(CoordProperty,wxPGProperty,
+                               Point3D,const Point3D&,TextCtrl)
+
+CoordProperty::CoordProperty( const wxString& label, const wxString& name,
+                              const Point3D& value) : wxPGProperty(label,name)
+{
+    m_value = WXVARIANT(value);
+    AddPrivateChild( new wxIntProperty(wxT("X"), wxPG_LABEL,value.x) );
+    AddPrivateChild( new wxIntProperty(wxT("Y"), wxPG_LABEL,value.y) );
+    AddPrivateChild( new wxIntProperty(wxT("Z"), wxPG_LABEL,value.z) );
+}
+
+CoordProperty::~CoordProperty()
+{
+}
+
+void CoordProperty::RefreshChildren()
+{
+    if ( !GetChildCount() ) return;
+    const Point3D& point = Point3DRefFromVariant(m_value);
+    Item(0)->SetValue( (long)point.x );
+    Item(1)->SetValue( (long)point.y );
+    Item(2)->SetValue( (long)point.z );
+}
+
+wxVariant CoordProperty::ChildChanged( wxVariant& thisValue,
+                                       int childIndex,
+                                       wxVariant& childValue ) const
+{
+    Point3D& point = Point3DRefFromVariant(thisValue);
+    int val = childValue.GetLong();
+    switch ( childIndex )
+    {
+        case 0: point.x = val; break;
+        case 1: point.y = val; break;
+        case 2: point.z = val; break;
+    }
+    wxVariant newVariant;
+    newVariant << point;
+    return newVariant;
+}
+
 // Define a new application type, each program should derive a class from wxApp
 class MyApp : public wxApp
 {
@@ -68,7 +141,12 @@ public:
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
 
+	void OnTimer(wxTimerEvent &event);
+    wxTimer m_timer;
 private:
+    int m_cnt;
+    long m_tm_last;
+    wxPropertyGrid* m_grid;
     // any class wishing to process wxWidgets events must use this macro
     wxDECLARE_EVENT_TABLE();
 };
@@ -87,6 +165,8 @@ enum
     // this standard value as otherwise it won't be handled properly under Mac
     // (where it is special and put into the "Apple" menu)
     Minimal_About = wxID_ABOUT
+    ,ID_PROPGRID = wxID_HIGHEST+1
+    ,ID_TIMER
 };
 
 // ----------------------------------------------------------------------------
@@ -99,6 +179,7 @@ enum
 wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_TIMER(ID_TIMER, MyFrame::OnTimer)
 wxEND_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
@@ -131,6 +212,8 @@ bool MyApp::OnInit()
     // created initially)
     frame->Show(true);
 
+    frame->m_timer.Start(TIMER_DELAY);
+
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned false here, the
     // application would exit immediately.
@@ -144,6 +227,7 @@ bool MyApp::OnInit()
 // frame constructor
 MyFrame::MyFrame(const wxString& title)
        : wxFrame(NULL, wxID_ANY, title)
+       , m_timer(this, ID_TIMER)
 {
     // set the frame icon
     SetIcon(wxICON(sample));
@@ -172,6 +256,24 @@ MyFrame::MyFrame(const wxString& title)
     CreateStatusBar(2);
     SetStatusText("Welcome to wxWidgets!");
 #endif // wxUSE_STATUSBAR
+    m_grid = new wxPropertyGrid(this, ID_PROPGRID);
+    m_grid->Append(new wxIntProperty("Counter"));
+    m_grid->Append(new wxIntProperty("Delay"));
+    for(int i = 0; i < NUM_PROPS; i++)
+    {
+        wxString name = wxString::Format("Property %i", i);
+//        m_grid->Append(new wxIntProperty(name));
+        m_grid->Append(new CoordProperty(name));
+    }
+    wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
+    sizer->Add(m_grid, 1, wxEXPAND, 0);
+	SetSizer(sizer);
+	sizer->Fit(this);
+	Layout();
+
+    m_cnt = 0;
+    m_tm_last = ::GetTickCount();
+    srand(::GetTickCount());
 }
 
 
@@ -179,6 +281,7 @@ MyFrame::MyFrame(const wxString& title)
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
 {
+    m_timer.Stop();
     // true is to force the frame to close
     Close(true);
 }
@@ -198,3 +301,17 @@ void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
                  wxOK | wxICON_INFORMATION,
                  this);
 }
+
+void MyFrame::OnTimer(wxTimerEvent &WXUNUSED(event))
+{
+    m_grid->SetPropertyValue("Counter", ++m_cnt);
+    m_grid->SetPropertyValue("Delay", (int)(::GetTickCount()-m_tm_last));
+    for(int i = 0; i < NUM_PROPS; i++)
+    {
+        wxString name = wxString::Format("Property %i", i);
+//        m_grid->SetPropertyValue(name, rand());
+        Point3D pt = {rand(), rand(), rand()};
+        m_grid->SetPropertyValue(name, wxVariant(pt));
+    }
+    m_tm_last = ::GetTickCount();
+}

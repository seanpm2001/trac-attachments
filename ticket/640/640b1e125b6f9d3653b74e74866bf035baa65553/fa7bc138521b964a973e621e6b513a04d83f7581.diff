Index: wxWidgets/src/common/popupcmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/popupcmn.cpp,v
retrieving revision 1.48
diff -u -2 -r1.48 popupcmn.cpp
--- wxWidgets/src/common/popupcmn.cpp	2005/03/17 21:38:19	1.48
+++ wxWidgets/src/common/popupcmn.cpp	2005/04/12 01:51:02
@@ -67,5 +67,6 @@
 {
 public:
-    wxPopupWindowHandler(wxPopupTransientWindow *popup) { m_popup = popup; }
+    wxPopupWindowHandler(wxPopupTransientWindow *popup) : m_popup(popup) {}
+    ~wxPopupWindowHandler();
 
 protected:
@@ -83,8 +84,6 @@
 {
 public:
-    wxPopupFocusHandler(wxPopupTransientWindow *popup)
-    {
-        m_popup = popup;
-    }
+    wxPopupFocusHandler(wxPopupTransientWindow *popup) : m_popup(popup) {}
+    ~wxPopupFocusHandler();
 
 protected:
@@ -245,4 +244,8 @@
     Show();
 
+    // There is is a problem if these are still valid
+    wxASSERT_MSG(!m_handlerPopup, wxT("Popup handler not deleted"));
+    wxASSERT_MSG(!m_handlerFocus, wxT("Focus handler not deleted"));
+
     delete m_handlerPopup;
     m_handlerPopup = new wxPopupWindowHandler(this);
@@ -273,4 +276,12 @@
 #endif // __WXMSW__
 
+    // catch destroy events, if you close a program with a popup shown in MSW
+    // you get a segfault if m_child or m_focus are deleted before this is
+    m_child->Connect(wxEVT_DESTROY,
+                     wxWindowDestroyEventHandler(wxPopupTransientWindow::OnDestroy),
+                     NULL, this);
+    m_focus->Connect(wxEVT_DESTROY,
+                     wxWindowDestroyEventHandler(wxPopupTransientWindow::OnDestroy),
+                     NULL, this);
 }
 
@@ -355,4 +366,12 @@
 }
 
+void wxPopupTransientWindow::OnDestroy(wxWindowDestroyEvent& event)
+{
+    if (event.GetEventObject() == m_child)
+        m_child = NULL;
+    if (event.GetEventObject() == m_focus)
+        m_focus = NULL;
+}
+
 #if wxUSE_COMBOBOX && defined(__WXUNIVERSAL__)
 
@@ -412,4 +431,9 @@
 // wxPopupWindowHandler
 // ----------------------------------------------------------------------------
+wxPopupWindowHandler::~wxPopupWindowHandler()
+{
+    if (m_popup && (m_popup->m_handlerPopup == this))
+        m_popup->m_handlerPopup = NULL;
+}
 
 void wxPopupWindowHandler::OnLeftDown(wxMouseEvent& event)
@@ -500,4 +524,9 @@
 // wxPopupFocusHandler
 // ----------------------------------------------------------------------------
+wxPopupFocusHandler::~wxPopupFocusHandler()
+{
+    if (m_popup && (m_popup->m_handlerFocus == this))
+        m_popup->m_handlerFocus = NULL;
+}
 
 void wxPopupFocusHandler::OnKillFocus(wxFocusEvent& event)
Index: wxWidgets/include/wx/popupwin.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/popupwin.h,v
retrieving revision 1.31
diff -u -2 -r1.31 popupwin.h
--- wxWidgets/include/wx/popupwin.h	2005/03/16 16:18:20	1.31
+++ wxWidgets/include/wx/popupwin.h	2005/04/12 01:51:02
@@ -125,4 +125,7 @@
     void PopHandlers();
 
+    // get alerted when child gets deleted from under us
+    void OnDestroy(wxWindowDestroyEvent& event);
+
     // the child of this popup if any
     wxWindow *m_child;
Index: wxWidgets/samples/popup/popup.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/popup/popup.cpp,v
retrieving revision 1.6
diff -u -2 -r1.6 popup.cpp
--- wxWidgets/samples/popup/popup.cpp	2005/03/03 21:07:12	1.6
+++ wxWidgets/samples/popup/popup.cpp	2005/04/12 01:51:04
@@ -110,9 +110,17 @@
 END_EVENT_TABLE()
 
-SimpleTransientPopup::SimpleTransientPopup( wxWindow *parent ) :
-    wxPopupTransientWindow( parent )
+SimpleTransientPopup::SimpleTransientPopup( wxWindow *parent )
+                     :wxPopupTransientWindow( parent )
 {
     m_panel = new wxScrolledWindow( this, wxID_ANY );
     m_panel->SetBackgroundColour( *wxLIGHT_GREY );
+
+    // Keep this code to verify if mouse events work, they're required if 
+    // you're making a control like a combobox where the items are highlighted
+    // under the cursor, the m_panel is set focus in the Popup() function
+    //m_panel->Connect(wxEVT_MOTION,
+    //                 wxMouseEventHandler(SimpleTransientPopup::OnMouse),
+    //                 NULL, this);
+
     wxStaticText *text = new wxStaticText( m_panel, wxID_ANY,
                           wxT("wx.PopupTransientWindow is a\n")
@@ -140,5 +148,5 @@
 {
     wxLogMessage( wxT("0x%lx SimpleTransientPopup::Popup"), long(this) );
-    wxPopupTransientWindow::Popup(focus);
+    wxPopupTransientWindow::Popup(focus ? focus : m_panel);
 }
 
@@ -180,5 +188,5 @@
 void SimpleTransientPopup::OnMouse(wxMouseEvent &event)
 {
-    wxLogMessage( wxT("0x%lx SimpleTransientPopup::OnMouse pos(%d, %d)"), long(this), event.GetX(), event.GetY());
+    wxLogMessage( wxT("0x%lx SimpleTransientPopup::OnMouse pos(%d, %d)"), long(event.GetEventObject()), event.GetX(), event.GetY());
     event.Skip();
 }
@@ -216,4 +224,6 @@
 
 private:
+    SimpleTransientPopup *m_simplePopup;
+    SimpleTransientPopup *m_scrolledPopup;
     DECLARE_EVENT_TABLE()
 };
@@ -232,4 +242,6 @@
 
 private:
+    SimpleTransientPopup *m_simplePopup;
+    SimpleTransientPopup *m_scrolledPopup;
     wxTextCtrl *m_logWin;
     wxLog *m_logOld;
@@ -283,4 +295,6 @@
        : wxFrame(NULL, wxID_ANY, title)
 {
+    m_simplePopup = m_scrolledPopup = NULL;
+
     SetIcon(wxICON(sample));
 
@@ -304,9 +318,10 @@
 #endif // wxUSE_MENUS
 
-    wxButton *button1 = new wxButton( this, Minimal_StartSimplePopup, wxT("Show simple popup"), wxPoint(20,20) );
-    wxButton *button2 = new wxButton( this, Minimal_StartScrolledPopup, wxT("Show scrolled popup"), wxPoint(20,70) );
+    wxPanel *panel = new wxPanel(this, -1);
+    wxButton *button1 = new wxButton( panel, Minimal_StartSimplePopup, wxT("Show simple popup"), wxPoint(20,20) );
+    wxButton *button2 = new wxButton( panel, Minimal_StartScrolledPopup, wxT("Show scrolled popup"), wxPoint(20,70) );
 
-    m_logWin = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition,
-                             wxDefaultSize, wxTE_MULTILINE );
+    m_logWin = new wxTextCtrl( panel, wxID_ANY, wxEmptyString, wxDefaultPosition,
+                               wxDefaultSize, wxTE_MULTILINE );
     m_logWin->SetEditable(false);
     wxLogTextCtrl* logger = new wxLogTextCtrl( m_logWin );
@@ -315,10 +330,10 @@
 
     wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
-    topSizer->Add( button1, 0 );
-    topSizer->Add( button2, 0 );
-    topSizer->Add( m_logWin, 1, wxEXPAND );
+    topSizer->Add( button1, 0, wxALL, 5 );
+    topSizer->Add( button2, 0, wxALL, 5 );
+    topSizer->Add( m_logWin, 1, wxEXPAND|wxALL, 5 );
 
-    SetAutoLayout( true );
-    SetSizer( topSizer );
+    panel->SetAutoLayout( true );
+    panel->SetSizer( topSizer );
 
 #if wxUSE_STATUSBAR
@@ -340,11 +355,12 @@
 {
     wxLogMessage( wxT("================================================") );
-    SimpleTransientPopup* popup = new SimpleTransientPopup( this );
+    delete m_simplePopup;
+    m_simplePopup = new SimpleTransientPopup( this );
     wxWindow *btn = (wxWindow*) event.GetEventObject();
     wxPoint pos = btn->ClientToScreen( wxPoint(0,0) );
     wxSize sz = btn->GetSize();
-    popup->Position( pos, sz );
-    wxLogMessage( wxT("0x%lx Simple Popup Shown pos(%d, %d) size(%d, %d)"), long(popup), pos.x, pos.y, sz.x, sz.y );
-    popup->Popup();
+    m_simplePopup->Position( pos, sz );
+    wxLogMessage( wxT("0x%lx Simple Popup Shown pos(%d, %d) size(%d, %d)"), long(m_simplePopup), pos.x, pos.y, sz.x, sz.y );
+    m_simplePopup->Popup();
 }
 
@@ -352,12 +368,13 @@
 {
     wxLogMessage( wxT("================================================") );
-    SimpleTransientPopup* popup = new SimpleTransientPopup( this );
-    popup->GetChild()->SetScrollbars(1, 1, 1000, 1000);
+    delete m_scrolledPopup;
+    m_scrolledPopup = new SimpleTransientPopup( this );
+    m_scrolledPopup->GetChild()->SetScrollbars(1, 1, 1000, 1000);
     wxWindow *btn = (wxWindow*) event.GetEventObject();
     wxPoint pos = btn->ClientToScreen( wxPoint(0,0) );
     wxSize sz = btn->GetSize();
-    popup->Position( pos, sz );
-    wxLogMessage( wxT("0x%lx Scrolled Popup Shown pos(%d, %d) size(%d, %d)"), long(popup), pos.x, pos.y, sz.x, sz.y );
-    popup->Popup();
+    m_scrolledPopup->Position( pos, sz );
+    wxLogMessage( wxT("0x%lx Scrolled Popup Shown pos(%d, %d) size(%d, %d)"), long(m_scrolledPopup), pos.x, pos.y, sz.x, sz.y );
+    m_scrolledPopup->Popup();
 }
 
@@ -393,11 +410,23 @@
 
 MyDialog::MyDialog(const wxString& title)
-       : wxDialog(NULL, wxID_ANY, title, wxPoint(50,50), wxSize(400,300))
+         :wxDialog(NULL, wxID_ANY, title, wxPoint(50,50), wxSize(400,300))
 {
+    m_simplePopup = m_scrolledPopup = NULL;
+    wxPanel *panel = new wxPanel(this, -1);
 
-    new wxButton( this, Minimal_StartSimplePopup, wxT("Show simple popup"), wxPoint(20,20) );
-    new wxButton( this, Minimal_StartScrolledPopup, wxT("Show scrolled popup"), wxPoint(20,60) );
+    wxButton *button1 = new wxButton( panel, Minimal_StartSimplePopup, wxT("Show simple popup"), wxPoint(20,20) );
+    wxButton *button2 = new wxButton( panel, Minimal_StartScrolledPopup, wxT("Show scrolled popup"), wxPoint(20,60) );
 
-    new wxButton( this, wxID_OK, wxT("OK"), wxPoint(20,200) );
+    wxButton *okButton = new wxButton( panel, wxID_OK, wxT("OK"), wxPoint(20,200) );
+
+    wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
+    topSizer->Add( button1, 0, wxALL, 5 );
+    topSizer->Add( button2, 0, wxALL, 5 );
+    topSizer->AddSpacer(40);
+    topSizer->Add( okButton, 0, wxALL, 5 );
+
+    panel->SetAutoLayout( true );
+    panel->SetSizer( topSizer );
+    topSizer->Fit(this);
 }
 
@@ -405,11 +434,12 @@
 {
     wxLogMessage( wxT("================================================") );
-    SimpleTransientPopup* popup = new SimpleTransientPopup( this );
+    delete m_simplePopup;
+    m_simplePopup = new SimpleTransientPopup( this );
     wxWindow *btn = (wxWindow*) event.GetEventObject();
     wxPoint pos = btn->ClientToScreen( wxPoint(0,0) );
     wxSize sz = btn->GetSize();
-    popup->Position( pos, sz );
-    wxLogMessage( wxT("0x%lx Dialog Simple Popup Shown pos(%d, %d) size(%d, %d)"), long(popup), pos.x, pos.y, sz.x, sz.y );
-    popup->Popup();
+    m_simplePopup->Position( pos, sz );
+    wxLogMessage( wxT("0x%lx Dialog Simple Popup Shown pos(%d, %d) size(%d, %d)"), long(m_simplePopup), pos.x, pos.y, sz.x, sz.y );
+    m_simplePopup->Popup();
 }
 
@@ -417,11 +447,12 @@
 {
     wxLogMessage( wxT("================================================") );
-    SimpleTransientPopup* popup = new SimpleTransientPopup( this );
-    popup->GetChild()->SetScrollbars(1, 1, 1000, 1000);
+    delete m_scrolledPopup;
+    m_scrolledPopup = new SimpleTransientPopup( this );
+    m_scrolledPopup->GetChild()->SetScrollbars(1, 1, 1000, 1000);
     wxWindow *btn = (wxWindow*) event.GetEventObject();
     wxPoint pos = btn->ClientToScreen( wxPoint(0,0) );
     wxSize sz = btn->GetSize();
-    popup->Position( pos, sz );
-    wxLogMessage( wxT("0x%lx Dialog Scrolled Popup Shown pos(%d, %d) size(%d, %d)"), long(popup), pos.x, pos.y, sz.x, sz.y );
-    popup->Popup();
+    m_scrolledPopup->Position( pos, sz );
+    wxLogMessage( wxT("0x%lx Dialog Scrolled Popup Shown pos(%d, %d) size(%d, %d)"), long(m_scrolledPopup), pos.x, pos.y, sz.x, sz.y );
+    m_scrolledPopup->Popup();
 }

 	  	 

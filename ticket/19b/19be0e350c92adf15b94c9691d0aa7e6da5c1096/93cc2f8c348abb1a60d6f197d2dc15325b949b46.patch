diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ -x*.o -x*.exe -x*.a wxWidgets\include\wx\ownerdrw.h wxWidgets-Modified\include\wx\ownerdrw.h
--- wxWidgets\include\wx\ownerdrw.h	Mon Sep 20 12:31:40 2004
+++ wxWidgets-Modified\include\wx\ownerdrw.h	Fri Feb 18 13:52:37 2005
@@ -132,5 +132,6 @@
     wxODChecked   = 0x0008,         // item is to be checked
     wxODHasFocus  = 0x0010,         // item has the keyboard focus
-    wxODDefault   = 0x0020          // item is the default item
+    wxODDefault   = 0x0020,         // item is the default item
+    wxODHidePrefix= 0x0100          // hide keyboard cues (w2k and xp only)
   };
 
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ -x*.o -x*.exe -x*.a wxWidgets\src\msw\menuitem.cpp wxWidgets-Modified\src\msw\menuitem.cpp
--- wxWidgets\src\msw\menuitem.cpp	Wed Feb 16 19:22:56 2005
+++ wxWidgets-Modified\src\msw\menuitem.cpp	Fri Feb 18 13:30:33 2005
@@ -163,11 +163,11 @@
 
 #if  wxUSE_OWNER_DRAWN
-    // set default menu colors
-    #define SYS_COLOR(c) (wxSystemSettings::GetColour(wxSYS_COLOUR_##c))
 
-    SetTextColour(SYS_COLOR(MENUTEXT));
-    SetBackgroundColour(SYS_COLOR(MENU));
-
-    #undef  SYS_COLOR
+    // when the color is not valid, wxOwnerDraw takes the default ones.
+    // If we set the colors here and they are changed by the user during
+    // the execution, then the colors are not updated until the application
+    // is restarted and our menus look bad
+    SetTextColour(wxNullColour);
+    SetBackgroundColour(wxNullColour);
 
     // setting default colors switched ownerdraw on: switch it off again
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ -x*.o -x*.exe -x*.a wxWidgets\src\msw\ownerdrw.cpp wxWidgets-Modified\src\msw\ownerdrw.cpp
--- wxWidgets\src\msw\ownerdrw.cpp	Wed Feb 16 19:22:57 2005
+++ wxWidgets-Modified\src\msw\ownerdrw.cpp	Fri Feb 18 13:41:26 2005
@@ -60,4 +60,7 @@
         memcpy(&info.lf, &nm.lfMenuFont, sizeof(LOGFONT));
         ms_systemMenuFont->Create(info);
+
+        if (SystemParametersInfo(SPI_GETKEYBOARDCUES, 0, &ms_showCues, 0) == 0)
+            ms_showCues = true;
 #endif
 
@@ -74,4 +77,5 @@
     static int ms_systemMenuButtonWidth;   // windows clean install default
     static int ms_systemMenuHeight;        // windows clean install default
+    static bool ms_showCues;
 private:
     DECLARE_DYNAMIC_CLASS(wxMSWSystemMenuFontModule)
@@ -85,4 +89,5 @@
 int wxMSWSystemMenuFontModule::ms_systemMenuButtonWidth = 18;   // windows clean install default
 int wxMSWSystemMenuFontModule::ms_systemMenuHeight = 18;        // windows clean install default
+bool wxMSWSystemMenuFontModule::ms_showCues = true;
 
 IMPLEMENT_DYNAMIC_CLASS(wxMSWSystemMenuFontModule, wxModule)
@@ -164,8 +169,4 @@
   dc.GetTextExtent(str, (long *)pwidth, (long *)pheight);
 
-  // add space at the end of the menu for the submenu expansion arrow
-  // this will also allow offsetting the accel string from the right edge
-  *pwidth += GetDefaultMarginWidth() + 16;
-
   // increase size to accommodate bigger bitmaps if necessary
   if (m_bmpChecked.Ok())
@@ -184,4 +185,11 @@
           SetMarginWidth(adjustedWidth);
   }
+  
+  // add space at the end of the menu for the submenu expansion arrow
+  // this will also allow offsetting the accel string from the right edge
+  *pwidth += GetMarginWidth() + 16;
+  
+  // add a 4-pixel separator, otherwise menus look cluttered
+  *pwidth += 4;
 
   // make sure that this item is at least as
@@ -235,7 +243,7 @@
     // fall back to default colors if none explicitly specified
     colBack = m_colBack.Ok() ? wxColourToPalRGB(m_colBack)
-                             : GetSysColor(COLOR_WINDOW);
+                             : GetSysColor(COLOR_MENU);
     colText = m_colText.Ok() ? wxColourToPalRGB(m_colText)
-                             : GetSysColor(COLOR_WINDOWTEXT);
+                             : GetSysColor(COLOR_MENUTEXT);
   }
 
@@ -246,6 +254,4 @@
             GetGValue( menu_bg_color ) >= 0xf0 &&
             GetBValue( menu_bg_color ) >= 0xf0 )
-       // ... or if the menu item is disabled
-       || ( st & wxODDisabled )
     )
   {
@@ -258,5 +264,6 @@
            colOldBack = ::SetBkColor(hdc, colBack);
 
-  int margin = GetMarginWidth() + wxSystemSettings::GetMetric(wxSYS_EDGE_X);
+  // *2, as in wxSYS_EDGE_Y
+  int margin = GetMarginWidth() + 2 * wxSystemSettings::GetMetric(wxSYS_EDGE_X);
 
   // select the font and draw the text
@@ -265,5 +272,6 @@
 
   // determine where to draw and leave space for a check-mark.
-  int xText = rc.x + margin;
+  // + 1 pixel to separate the edge from the highlight rectangle
+  int xText = rc.x + margin + 1;
 
 
@@ -276,5 +284,5 @@
                       rc.GetRight() + 1, rc.GetBottom() + 1 };
 
-  if ( (st & wxODSelected) && m_bmpChecked.Ok() ) {
+  if ( (st & wxODSelected) && m_bmpChecked.Ok() && draw_bitmap_edge ) {
       // only draw the highlight under the text, not under
       // the bitmap or checkmark
@@ -297,4 +305,6 @@
 
   wxString strMenuText = m_strName.BeforeFirst('\t');
+  
+  xText += 3; // separate text from the highlight rectangle
 
   SIZE sizeRect;
@@ -302,8 +312,9 @@
   ::DrawState(hdc, NULL, NULL,
               (LPARAM)strMenuText.c_str(), strMenuText.length(),
-              xText, rc.y+( (int) ((rc.GetHeight()-sizeRect.cy)/2.0) )-1, // centre text vertically
+              xText, rc.y + (int) ((rc.GetHeight()-sizeRect.cy)/2.0), // centre text vertically
               rc.GetWidth()-margin, sizeRect.cy,
               DST_PREFIXTEXT |
-              (((st & wxODDisabled) && !(st & wxODSelected)) ? DSS_DISABLED : 0));
+              (((st & wxODDisabled) && !(st & wxODSelected)) ? DSS_DISABLED : 0) |
+              (((st & wxODHidePrefix) && !wxMSWSystemMenuFontModule::ms_showCues) ? 512 : 0)); // 512 == DSS_HIDEPREFIX
 
   // ::SetTextAlign(hdc, TA_RIGHT) doesn't work with DSS_DISABLED or DSS_MONO
@@ -318,6 +329,6 @@
       ::DrawState(hdc, NULL, NULL,
               (LPARAM)m_strAccel.c_str(), m_strAccel.length(),
-              rc.GetWidth()-margin-accel_width, rc.y+(int) ((rc.GetHeight()-sizeRect.cy)/2.0),
-              rc.GetWidth()-margin-accel_width, sizeRect.cy,
+              rc.GetWidth()-16-accel_width, rc.y+(int) ((rc.GetHeight()-sizeRect.cy)/2.0),
+              0, 0,
               DST_TEXT |
               (((st & wxODDisabled) && !(st & wxODSelected)) ? DSS_DISABLED : 0));
@@ -389,5 +400,5 @@
               &dcMem, 0, 0, wxCOPY, true /* use mask */);
 
-      if ( st & wxODSelected && draw_bitmap_edge ) {
+      if ( ( st & wxODSelected ) && !( st & wxODDisabled ) && draw_bitmap_edge ) {
           RECT rectBmp = { rc.GetLeft(), rc.GetTop(),
                            rc.GetLeft() + margin,
@@ -395,5 +406,5 @@
           SetBkColor(hdc, colBack);
 
-          DrawEdge(hdc, &rectBmp, BDR_RAISEDOUTER, BF_SOFT | BF_RECT);
+          DrawEdge(hdc, &rectBmp, BDR_RAISEDINNER, BF_RECT);
       }
     }

 	  	 

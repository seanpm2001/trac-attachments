Index: include/wx/dialog.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/dialog.h,v
retrieving revision 1.35
diff -u -2 -r1.35 dialog.h
--- include/wx/dialog.h	2004/10/19 13:39:03	1.35
+++ include/wx/dialog.h	2004/11/01 03:50:14
@@ -20,4 +20,5 @@
 #include "wx/containr.h"
 #include "wx/toplevel.h"
+#include "wx/sizer.h"
 
 #define wxDIALOG_NO_PARENT      0x0001  // Don't make owned by apps top window
@@ -57,4 +58,5 @@
     // places buttons into a horizontal wxBoxSizer
     wxSizer *CreateButtonSizer( long flags );
+    wxStdDialogButtonSizer *CreateStdDialogButtonSizer( long flags );
 #endif // wxUSE_BUTTON
 
Index: include/wx/sizer.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/sizer.h,v
retrieving revision 1.58
diff -u -2 -r1.58 sizer.h
--- include/wx/sizer.h	2004/10/15 18:58:46	1.58
+++ include/wx/sizer.h	2004/11/01 03:52:06
@@ -19,4 +19,5 @@
 #include "wx/defs.h"
 
+#include "wx/button.h"
 #include "wx/window.h"
 #include "wx/frame.h"
@@ -639,4 +640,48 @@
 #endif // wxUSE_STATBOX
 
+class WXDLLEXPORT wxStdDialogButtonSizer: public wxBoxSizer
+{
+public:
+
+    wxStdDialogButtonSizer();
+    // Constructor just creates a new wxBoxSizer, not much else.
+    // Box sizer orientation is automatically determined here:
+    // vertical for PDAs, horizontal for everything else?
+
+    void AddButton(wxButton *button);
+    // Checks button ID against system IDs and sets one of the pointers below
+    // to this button.
+    // Does not do any sizer-related things here.
+
+    // Question: what to do for non-supported button IDs? assert?
+
+    void Layout();
+    // All platform-specific code here, checks which buttons exist and add
+    // them to the sizer accordingly.
+    // Note - one potential hack on Mac we could use here,
+    // if m_buttonAffirmative is wxID_SAVE then ensure wxID_SAVE
+    // is set to _("Save") and m_buttonNegative is set to _("Don't Save")
+    // I wouldn't add any other hacks like that into here,
+    // but this one I can see being useful.
+    
+    wxButton *GetAffirmativeButton() const { return m_buttonAffirmative; }
+    wxButton *GetApplyButton() const { return m_buttonApply; }
+    wxButton *GetNegativeButton() const { return m_buttonNegative; }
+    wxButton *GetCancelButton() const { return m_buttonCancel; }
+    wxButton *GetHelpButton() const { return m_buttonHelp; }
+
+protected:
+    bool m_firstLayout; 
+    wxButton *m_buttonAffirmative;
+    // wxID_OK, wxID_YES, wxID_SAVE go here
+    wxButton *m_buttonApply;
+    wxButton *m_buttonNegative; // wxID_NO
+    wxButton *m_buttonCancel;
+    wxButton *m_buttonHelp;
+    
+private:
+    DECLARE_CLASS(wxStdDialogButtonSizer)
+    //DECLARE_NO_COPY_CLASS(wxStdDialogButtonSizer)
+};
 
 #if WXWIN_COMPATIBILITY_2_4
Index: src/common/dlgcmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/dlgcmn.cpp,v
retrieving revision 1.34
diff -u -2 -r1.34 dlgcmn.cpp
--- src/common/dlgcmn.cpp	2004/09/10 12:56:07	1.34
+++ src/common/dlgcmn.cpp	2004/11/01 03:54:37
@@ -282,3 +282,63 @@
 }
 
+wxStdDialogButtonSizer *wxDialogBase::CreateStdDialogButtonSizer( long flags )
+{
+    wxStdDialogButtonSizer *sizer = new wxStdDialogButtonSizer();
+    wxButton *ok = NULL;
+    wxButton *cancel = NULL;
+    wxButton *yes = NULL;
+    wxButton *no = NULL;
+    wxButton *help = NULL;
+    
+    if (flags & wxOK){
+    	ok = new wxButton(this, wxID_OK, _("OK"));
+    	sizer->AddButton(ok);
+    }
+    
+    if (flags & wxCANCEL){
+    	cancel = new wxButton(this, wxID_CANCEL, _("Cancel"));
+    	sizer->AddButton(cancel);	
+    }
+    
+    if (flags & wxYES){
+    	yes = new wxButton(this, wxID_YES, _("Yes"));
+    	sizer->AddButton(yes);
+    }
+    
+    if (flags & wxNO){
+    	no = new wxButton(this, wxID_NO, _("No"));
+    	sizer->AddButton(no);
+    }
+    
+    if (flags & wxHELP){
+    	help = new wxButton(this, wxID_HELP, _("Help"));
+    	sizer->AddButton(help);
+    }
+           
+    if (flags & wxNO_DEFAULT)
+    {
+        if (no)
+        {
+            no->SetDefault();
+            no->SetFocus();
+        }
+    }
+    else
+    {
+        if (ok)
+        {
+            ok->SetDefault();
+            ok->SetFocus();
+        }
+        else if (yes)
+        {
+            yes->SetDefault();
+            yes->SetFocus();
+        }
+    }
+
+    return sizer;
+}
+
+
 #endif // wxUSE_BUTTON
Index: src/common/sizer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/sizer.cpp,v
retrieving revision 1.102
diff -u -2 -r1.102 sizer.cpp
--- src/common/sizer.cpp	2004/10/15 18:58:52	1.102
+++ src/common/sizer.cpp	2004/11/01 04:02:57
@@ -44,4 +44,5 @@
 IMPLEMENT_CLASS(wxStaticBoxSizer, wxBoxSizer)
 #endif
+IMPLEMENT_CLASS(wxStdDialogButtonSizer, wxBoxSizer)
 
 WX_DEFINE_EXPORTED_LIST( wxSizerItemList );
@@ -1633,4 +1634,141 @@
 #endif // wxUSE_STATBOX
 
+wxStdDialogButtonSizer::wxStdDialogButtonSizer(): wxBoxSizer(wxHORIZONTAL){
+    bool is_pda = (wxSystemSettings::GetScreenType() <= wxSYS_SCREEN_PDA);
+
+    // If we have a PDA screen, put yes/no button over 
+    // all other buttons, otherwise on the left side.
+    if (is_pda)
+        m_orient = wxVERTICAL;
+    
+    // the first call to layout adds the controls to the sizer
+    m_firstLayout = true;
+}
+
+void wxStdDialogButtonSizer::AddButton(wxButton *mybutton){
+    printf("Adding button to sizer...\n");
+    switch (mybutton->GetId()){
+        case wxID_OK:
+        case wxID_YES:
+        case wxID_SAVE:
+            m_buttonAffirmative = mybutton;
+            break;
+        case wxID_APPLY:
+            m_buttonApply = mybutton;
+            break;
+        case wxID_NO:
+            m_buttonNegative = mybutton;
+            break;
+        case wxID_CANCEL:
+            m_buttonCancel = mybutton;
+            break;
+        case wxID_HELP:
+            m_buttonHelp = mybutton;
+            break;
+        default:
+            break;
+    }
+}
+
+void wxStdDialogButtonSizer::Layout(){
+    if (m_firstLayout){
+#ifdef __WXMAC__
+        Add(0, 0, 0, wxLEFT, 6);
+        if (m_buttonHelp)
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6); 
+            
+        if (m_buttonNegative){
+            // HIG POLICE BULLETIN - destructive buttons need extra padding
+            // 24 pixels on either side
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 12);
+        }
+        
+        // extra whitespace between help/negative and cancel/ok buttons
+        Add(0, 0, 1, wxEXPAND, 0); 
+        
+        if (m_buttonCancel){
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            // Cancel or help should be default
+            // m_buttonCancel->SetDefaultButton();
+        }
+        
+        // Ugh, Mac doesn't really have apply dialogs, so I'll just 
+        // figure the best place is between Cancel and OK
+        if (m_buttonApply)
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            
+        if (m_buttonAffirmative){
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            
+            if (m_buttonAffirmative->GetId() == wxID_SAVE){
+                // these buttons have set labels under Mac so we should use them
+                m_buttonAffirmative->SetLabel(_("Save"));
+                m_buttonNegative->SetLabel(_("Don't Save"));
+            }
+            Add(0, 0, 0, wxLEFT, 6);
+        }
+#elif defined(__WXGTK20__)
+        Add(0, 0, 0, wxLEFT, 9);
+        if (m_buttonHelp)
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3); 
+        
+        // extra whitespace between help and cancel/ok buttons
+        Add(0, 0, 1, wxEXPAND, 0); 
+        
+        if (m_buttonNegative){
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+        }
+        
+        if (m_buttonCancel){
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            // Cancel or help should be default
+            // m_buttonCancel->SetDefaultButton();
+        }
+        
+        if (m_buttonApply)
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 3);
+            
+        if (m_buttonAffirmative){
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, 6);
+            Add(0, 0, 0, wxLEFT, 9);
+        }
+#else
+    // do the same thing for GTK1 and Windows platforms
+    // and assume any platform not accounted for here will use
+    // Windows style
+        Add(0, 0, 0, wxLEFT, 9);
+        if (m_buttonHelp)
+            Add((wxWindow*)m_buttonHelp, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonHelp->ConvertDialogToPixels(wxSize(4, 0)).x); 
+        
+        // extra whitespace between help and cancel/ok buttons
+        Add(0, 0, 1, wxEXPAND, 0); 
+
+        if (m_buttonAffirmative){
+            Add((wxWindow*)m_buttonAffirmative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonAffirmative->ConvertDialogToPixels(wxSize(4, 0)).x);
+        }
+                
+        if (m_buttonNegative){
+            // HIG POLICE BULLETIN - destructive buttons need extra padding
+            // 24 pixels on either side
+            Add((wxWindow*)m_buttonNegative, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonNegative->->ConvertDialogToPixels(wxSize(4, 0)).x);
+        }
+        
+        if (m_buttonCancel){
+            Add((wxWindow*)m_buttonCancel, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonCancel->->ConvertDialogToPixels(wxSize(4, 0)).x);
+            // Cancel or help should be default
+            // m_buttonCancel->SetDefaultButton();
+        }
+        
+        // Ugh, Mac doesn't really have apply dialogs, so I'll just 
+        // figure the best place is between Cancel and OK
+        if (m_buttonApply)
+            Add((wxWindow*)m_buttonApply, 0, wxALIGN_CENTRE | wxLEFT | wxRIGHT, m_buttonApply->ConvertDialogToPixels(wxSize(4, 0)).x);
+            
+#endif
+        m_firstLayout = false;
+    }
+    // just call inherited layout
+    wxBoxSizer::Layout();
+}
 
 #if WXWIN_COMPATIBILITY_2_4
Index: src/generic/choicdgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/choicdgg.cpp,v
retrieving revision 1.59
diff -u -2 -r1.59 choicdgg.cpp
--- src/generic/choicdgg.cpp	2004/09/28 17:29:36	1.59
+++ src/generic/choicdgg.cpp	2004/11/01 04:03:40
@@ -292,5 +292,5 @@
 
     // 4) buttons
-    topsizer->Add( CreateButtonSizer( styleDlg & (wxOK|wxCANCEL) ), 0, wxCENTRE | wxALL, 10 );
+    topsizer->Add( CreateStdDialogButtonSizer( styleDlg & (wxOK|wxCANCEL) ), 0, wxALIGN_RIGHT | wxALL, 10 );
 
 #endif // !__SMARTPHONE__
Index: src/generic/colrdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/colrdlgg.cpp,v
retrieving revision 1.43
diff -u -2 -r1.43 colrdlgg.cpp
--- src/generic/colrdlgg.cpp	2004/10/05 15:38:27	1.43
+++ src/generic/colrdlgg.cpp	2004/11/01 04:04:03
@@ -284,5 +284,5 @@
 
     // 3) buttons
-    wxSizer *buttonsizer = CreateButtonSizer( wxOK|wxCANCEL );
+    wxStdDialogButtonSizer *buttonsizer = CreateStdDialogButtonSizer( wxOK|wxCANCEL );
     buttonsizer->Add( new wxButton(this, wxID_ADD_CUSTOM, _("Add to custom colours") ), 0, wxLEFT|wxRIGHT, 10 );
     topSizer->Add( buttonsizer, 0, wxCENTRE | wxALL, 10 );
Index: src/generic/msgdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/msgdlgg.cpp,v
retrieving revision 1.48
diff -u -2 -r1.48 msgdlgg.cpp
--- src/generic/msgdlgg.cpp	2004/08/18 22:27:42	1.48
+++ src/generic/msgdlgg.cpp	2004/11/01 04:04:27
@@ -118,7 +118,6 @@
 
     // 4) buttons
-    topsizer->Add( CreateButtonSizer( style & (wxOK|wxCANCEL|wxYES_NO|wxYES_DEFAULT|wxNO_DEFAULT) ),
+    topsizer->Add( CreateStdDialogButtonSizer( style & (wxOK|wxCANCEL|wxYES_NO|wxYES_DEFAULT|wxNO_DEFAULT) ),
                    0, wxCENTRE | wxALL, 10 );
-
     SetAutoLayout( true );
     SetSizer( topsizer );
Index: src/generic/numdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/numdlgg.cpp,v
retrieving revision 1.34
diff -u -2 -r1.34 numdlgg.cpp
--- src/generic/numdlgg.cpp	2004/09/28 17:29:37	1.34
+++ src/generic/numdlgg.cpp	2004/11/01 04:07:53
@@ -139,5 +139,5 @@
 
     // 4) buttons
-    topsizer->Add( CreateButtonSizer( wxOK|wxCANCEL ), 0, wxCENTRE | wxALL, 10 );
+    topsizer->Add( CreateStdDialogButtonSizer( wxOK|wxCANCEL ), 0, wxCENTRE | wxALL, 10 );
 
 #endif // !__SMARTPHONE__
Index: src/generic/prntdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/prntdlgg.cpp,v
retrieving revision 1.65
diff -u -2 -r1.65 prntdlgg.cpp
--- src/generic/prntdlgg.cpp	2004/10/17 23:00:41	1.65
+++ src/generic/prntdlgg.cpp	2004/11/01 04:09:43
@@ -724,5 +724,5 @@
     // 6) buttons
 
-    wxSizer* buttonsizer = CreateButtonSizer( wxOK|wxCANCEL);
+    wxStdDialogButtonSizer* buttonsizer = CreateStdDialogButtonSizer( wxOK|wxCANCEL);
     m_printerButton = new wxButton(this, wxPRINTID_SETUP, _("Printer...") );
     buttonsizer->Add( m_printerButton, 0, wxLEFT|wxRIGHT, 10 );
Index: src/generic/textdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/textdlgg.cpp,v
retrieving revision 1.30
diff -u -2 -r1.30 textdlgg.cpp
--- src/generic/textdlgg.cpp	2004/09/28 17:29:37	1.30
+++ src/generic/textdlgg.cpp	2004/11/01 04:09:53
@@ -126,5 +126,5 @@
 
     // 4) buttons
-    topsizer->Add( CreateButtonSizer( style ), 0, wxCENTRE | wxALL, 10 );
+    topsizer->Add( CreateStdDialogButtonSizer( style ), 0, wxCENTRE | wxALL, 10 );
 
 #endif // !__SMARTPHONE__

 	  	 

Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 73662)
+++ include/wx/aui/auibar.h	(working copy)
@@ -19,6 +19,7 @@
 #include "wx/control.h"
 #include "wx/sizer.h"
 #include "wx/pen.h"
+#include "wx/image.h"
 
 class WXDLLIMPEXP_FWD_CORE wxClientDC;
 class WXDLLIMPEXP_FWD_AUI wxAuiPaneInfo;
@@ -41,7 +42,10 @@
     wxAUI_TB_HORIZONTAL    = 1 << 7,
     wxAUI_TB_PLAIN_BACKGROUND = 1 << 8,
     wxAUI_TB_HORZ_TEXT     = (wxAUI_TB_HORZ_LAYOUT | wxAUI_TB_TEXT),
+    wxAUI_TB_CLOCKWISE     = 1 << 8,
+    wxAUI_TB_COUNTERCLOCKWISE = 1 << 9,
     wxAUI_ORIENTATION_MASK = (wxAUI_TB_VERTICAL | wxAUI_TB_HORIZONTAL),
+    wxAUI_TB_VERT_TEXT     = (wxAUI_TB_VERTICAL | wxAUI_TB_CLOCKWISE | wxAUI_TB_TEXT),
     wxAUI_TB_DEFAULT_STYLE = 0
 };
 
@@ -60,7 +64,14 @@
     wxAUI_TBTOOL_TEXT_BOTTOM = 3
 };
 
+enum wxAuiToolBarToolOrientation
+{
+    wxAUI_TBTOOL_HORIZONTAL = 0,            // standard
+    wxAUI_TBTOOL_VERT_CLOCKWISE = 1,        // rotation of 90° on the right
+    wxAUI_TBTOOL_VERT_COUNTERCLOCKWISE = 2, // rotation of 90° on the left
+};
 
+
 // aui toolbar event class
 
 class WXDLLIMPEXP_AUI wxAuiToolBarEvent : public wxNotifyEvent
@@ -119,6 +130,8 @@
     wxAuiToolBarItem()
     {
         m_window = NULL;
+        m_clockWiseBmp = m_counterClockWiseBmp = wxNullBitmap;
+        m_clockWiseDisBmp = m_counterClockWiseDisBmp = wxNullBitmap;
         m_sizerItem = NULL;
         m_spacerPixels = 0;
         m_toolId = 0;
@@ -130,6 +143,7 @@
         m_sticky = true;
         m_userData = 0;
         m_alignment = wxALIGN_CENTER;
+        m_orientation = wxAUI_TBTOOL_HORIZONTAL;
     }
 
     wxAuiToolBarItem(const wxAuiToolBarItem& c)
@@ -164,6 +178,7 @@
         m_sticky = c.m_sticky;
         m_userData = c.m_userData;
         m_alignment = c.m_alignment;
+        m_orientation = c.m_orientation;
     }
 
 
@@ -186,10 +201,10 @@
     const wxString& GetLabel() const { return m_label; }
 
     void SetBitmap(const wxBitmap& bmp) { m_bitmap = bmp; }
-    const wxBitmap& GetBitmap() const { return m_bitmap; }
+    const wxBitmap& GetBitmap() const { return GetRotatedBitmap(false); }
 
     void SetDisabledBitmap(const wxBitmap& bmp) { m_disabledBitmap = bmp; }
-    const wxBitmap& GetDisabledBitmap() const { return m_disabledBitmap; }
+    const wxBitmap& GetDisabledBitmap() const { return GetRotatedBitmap(true); }
 
     void SetHoverBitmap(const wxBitmap& bmp) { m_hoverBitmap = bmp; }
     const wxBitmap& GetHoverBitmap() const { return m_hoverBitmap; }
@@ -231,8 +246,37 @@
     void SetAlignment(int l) { m_alignment = l; }
     int GetAlignment() const { return m_alignment; }
 
+    void SetOrientation(int a) { m_orientation = a; }
+    const int GetOrientation() const { return m_orientation; }
+
 private:
 
+    const wxBitmap& GetRotatedBitmap(bool disabled) const
+    {
+        const wxBitmap &bitmapToRotate = disabled ? m_disabledBitmap : m_bitmap;
+        if (!bitmapToRotate.IsOk() || (m_orientation == wxAUI_TBTOOL_HORIZONTAL))
+            return bitmapToRotate;
+
+        wxBitmap *rotatedBitmap = NULL;
+        bool clockwise = true;
+        switch(m_orientation)
+        {
+        case wxAUI_TBTOOL_VERT_CLOCKWISE:
+            rotatedBitmap = disabled ? &m_clockWiseDisBmp : &m_clockWiseBmp;
+	        break;
+        case wxAUI_TBTOOL_VERT_COUNTERCLOCKWISE:
+            rotatedBitmap = disabled ? &m_counterClockWiseDisBmp : &m_counterClockWiseBmp;
+            clockwise = false;
+	        break;
+        }
+
+        if (!rotatedBitmap->IsOk())
+            *rotatedBitmap = wxBitmap(bitmapToRotate.ConvertToImage().Rotate90(clockwise));
+
+        return *rotatedBitmap;
+    }
+
+
     wxWindow* m_window;          // item's associated window
     wxString m_label;            // label displayed on the item
     wxBitmap m_bitmap;           // item's bitmap
@@ -252,6 +296,12 @@
     bool m_sticky;               // overrides button states if true (always active)
     long m_userData;            // user-specified data
     int m_alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
+
+    mutable wxBitmap m_clockWiseBmp;              // rotated item's bitmap
+    mutable wxBitmap m_counterClockWiseBmp;       // rotated item's bitmap
+    mutable wxBitmap m_clockWiseDisBmp;           // rotated item's disabled bitmap
+    mutable wxBitmap m_counterClockWiseDisBmp;    // rotated item's disabled bitmap
+    int m_orientation;                            // tool orientation, default wxAUI_TBTOOL_HORIZONTAL
 };
 
 #ifndef SWIG
@@ -277,6 +327,8 @@
     virtual wxFont GetFont() = 0;
     virtual void SetTextOrientation(int orientation) = 0;
     virtual int GetTextOrientation() = 0;
+    virtual void SetOrientation(int orientation) = 0;
+    virtual int GetOrientation() = 0;
 
     virtual void DrawBackground(
                          wxDC& dc,
@@ -363,6 +415,8 @@
     virtual wxFont GetFont();
     virtual void SetTextOrientation(int orientation);
     virtual int GetTextOrientation();
+    virtual void SetOrientation(int orientation);
+    virtual int GetOrientation();
 
     virtual void DrawBackground(
                 wxDC& dc,
@@ -429,6 +483,14 @@
     virtual int ShowDropDown(wxWindow* wnd,
                              const wxAuiToolBarItemArray& items);
 
+private:
+    //Calculates the position of the bitmap and of the text for the given rect
+    void GetToolsPosition(wxDC& dc,
+                          const wxAuiToolBarItem& item,
+                          const wxRect& rect,
+                          wxRect &bmp_rect,
+                          wxRect &text_rect);
+
 protected:
 
     wxBitmap m_buttonDropDownBmp;
@@ -440,6 +502,7 @@
     wxFont m_font;
     unsigned int m_flags;
     int m_textOrientation;
+    int m_orientation;
 
     wxPen m_gripperPen1;
     wxPen m_gripperPen2;
@@ -520,6 +583,9 @@
     wxAuiToolBarItem* AddLabel(int toolId,
                   const wxString& label = wxEmptyString,
                   const int width = -1);
+    static wxSize GetLabelSize(wxDC& dc,
+                               const wxString& label,
+                               bool vertical = false);
     wxAuiToolBarItem* AddControl(wxControl* control,
                     const wxString& label = wxEmptyString);
     wxAuiToolBarItem* AddSeparator();
@@ -574,6 +640,9 @@
     void SetToolTextOrientation(int orientation);
     int  GetToolTextOrientation() const;
 
+    void SetToolOrientation(int orientation);
+    int  GetToolOrientation() const;
+
     void SetToolPacking(int packing);
     int  GetToolPacking() const;
 
@@ -677,6 +746,7 @@
     int m_toolBorderPadding;
     int m_toolTextOrientation;
     int m_overflowState;
+    int m_toolOrientation;
     bool m_dragging;
     bool m_gripperVisible;
     bool m_overflowVisible;
Index: include/wx/aui/dockart.h
===================================================================
--- include/wx/aui/dockart.h	(revision 73662)
+++ include/wx/aui/dockart.h	(working copy)
@@ -150,10 +150,12 @@
     wxBitmap m_inactiveCloseBitmap;
     wxBitmap m_inactivePinBitmap;
     wxBitmap m_inactiveMaximizeBitmap;
+    wxBitmap m_inactiveMinimizeBitmap;
     wxBitmap m_inactiveRestoreBitmap;
     wxBitmap m_activeCloseBitmap;
     wxBitmap m_activePinBitmap;
     wxBitmap m_activeMaximizeBitmap;
+    wxBitmap m_activeMinimizeBitmap;
     wxBitmap m_activeRestoreBitmap;
     wxPen m_gripperPen1;
     wxPen m_gripperPen2;
Index: include/wx/aui/framemanager.h
===================================================================
--- include/wx/aui/framemanager.h	(revision 73662)
+++ include/wx/aui/framemanager.h	(working copy)
@@ -119,6 +119,19 @@
     wxAUI_INSERT_DOCK = 2
 };
 
+enum wxAuiPaneMinimizeMode
+{
+    wxAUI_MINIMIZE_POS_AUTO     = 0,    // Minimizes the pane on the closest tool bar
+    wxAUI_MINIMIZE_POS_TOP      = 0x01, // Minimizes the pane on the top tool bar
+    wxAUI_MINIMIZE_POS_LEFT     = 0x02, // Minimizes the pane on its left tool bar
+    wxAUI_MINIMIZE_POS_RIGHT    = 0x03, // Minimizes the pane on its right tool bar
+    wxAUI_MINIMIZE_POS_BOTTOM   = 0x04, // Minimizes the pane on its bottom tool bar
+    wxAUI_MINIMIZE_POS_MASK     = 0x05, // Mask to filter the position flags
+    wxAUI_MINIMIZE_CAPT_HIDE    = 0x07, // Hides the caption of the minimized pane
+    wxAUI_MINIMIZE_CAPT_AUTO    = 0x08, // Displays the caption in the best rotation (horz or clockwise)
+    wxAUI_MINIMIZE_CAPT_HORZ    = 0x10, // Displays the caption horizontally
+    wxAUI_MINIMIZE_CAPT_MASK    = 0x18  // Mask to filter the caption flags
+};
 
 
 
@@ -157,6 +170,7 @@
         dock_layer = 0;
         dock_row = 0;
         dock_pos = 0;
+        minimize_mode = wxAUI_MINIMIZE_POS_AUTO|wxAUI_MINIMIZE_CAPT_AUTO;
         floating_pos = wxDefaultPosition;
         floating_size = wxDefaultSize;
         best_size = wxDefaultSize;
@@ -182,6 +196,7 @@
         dock_layer = c.dock_layer;
         dock_row = c.dock_row;
         dock_pos = c.dock_pos;
+        minimize_mode = c.minimize_mode;
         best_size = c.best_size;
         min_size = c.min_size;
         max_size = c.max_size;
@@ -203,6 +218,7 @@
         dock_layer = c.dock_layer;
         dock_row = c.dock_row;
         dock_pos = c.dock_pos;
+        minimize_mode = c.minimize_mode;
         best_size = c.best_size;
         min_size = c.min_size;
         max_size = c.max_size;
@@ -250,12 +266,14 @@
     bool IsMovable() const { return HasFlag(optionMovable); }
     bool IsDestroyOnClose() const { return HasFlag(optionDestroyOnClose); }
     bool IsMaximized() const { return HasFlag(optionMaximized); }
+    bool IsMinimized() const { return HasFlag(optionMinimized); }
     bool HasCaption() const { return HasFlag(optionCaption); }
     bool HasGripper() const { return HasFlag(optionGripper); }
     bool HasBorder() const { return HasFlag(optionPaneBorder); }
     bool HasCloseButton() const { return HasFlag(buttonClose); }
     bool HasMaximizeButton() const { return HasFlag(buttonMaximize); }
     bool HasMinimizeButton() const { return HasFlag(buttonMinimize); }
+    int GetMinimizeMode() const { return minimize_mode; }
     bool HasPinButton() const { return HasFlag(buttonPin); }
     bool HasGripperTop() const { return HasFlag(optionGripperTop); }
 
@@ -302,6 +320,8 @@
     wxAuiPaneInfo& Show(bool show = true) { return SetFlag(optionHidden, !show); }
     wxAuiPaneInfo& CaptionVisible(bool visible = true) { return SetFlag(optionCaption, visible); }
     wxAuiPaneInfo& Maximize() { return SetFlag(optionMaximized, true); }
+    wxAuiPaneInfo& Minimize() { return SetFlag(optionMinimized, true); }
+    wxAuiPaneInfo& MinimizeMode(int mode) { minimize_mode = mode; return *this; }
     wxAuiPaneInfo& Restore() { return SetFlag(optionMaximized, false); }
     wxAuiPaneInfo& PaneBorder(bool visible = true) { return SetFlag(optionPaneBorder, visible); }
     wxAuiPaneInfo& Gripper(bool visible = true) { return SetFlag(optionGripper, visible); }
@@ -404,6 +424,7 @@
         optionGripperTop      = 1 << 15,
         optionMaximized       = 1 << 16,
         optionDockFixed       = 1 << 17,
+        optionMinimized       = 1 << 18,
 
         buttonClose           = 1 << 21,
         buttonMaximize        = 1 << 22,
@@ -431,6 +452,7 @@
     int dock_layer;       // layer number (0 = innermost layer)
     int dock_row;         // row number on the docking bar (0 = first row)
     int dock_pos;         // position inside the row (0 = first position)
+    int minimize_mode;    // position of the minimized pane
 
     wxSize best_size;     // size that the layout engine will prefer
     wxSize min_size;      // minimum size the pane window can tolerate
@@ -477,6 +499,7 @@
     wxAuiPaneInfo& GetPane(wxWindow* window);
     wxAuiPaneInfo& GetPane(const wxString& name);
     wxAuiPaneInfoArray& GetAllPanes();
+    void ShowPane(wxWindow *window, bool show = true);
 
     bool AddPane(wxWindow* window,
                  const wxAuiPaneInfo& paneInfo);
@@ -509,6 +532,8 @@
     void MaximizePane(wxAuiPaneInfo& paneInfo);
     void RestorePane(wxAuiPaneInfo& paneInfo);
     void RestoreMaximizedPane();
+    void MinimizePane(wxAuiPaneInfo& paneInfo);
+    void RestoreMinimizedPane(wxAuiPaneInfo& paneInfo);
 
 public:
 
@@ -617,6 +642,7 @@
     void OnChildFocus(wxChildFocusEvent& evt);
     void OnHintFadeTimer(wxTimerEvent& evt);
     void OnFindManager(wxAuiManagerEvent& evt);
+    void OnRestoreMinimizedPane(wxAuiManagerEvent& event);
 
 protected:
 
@@ -653,6 +679,7 @@
     int  m_currentDragItem;
     bool m_skipping;
     bool m_hasMaximized;
+    bool m_has_minimized;
 
     double m_dockConstraintX;  // 0.0 .. 1.0; max pct of window width a dock can consume
     double m_dockConstraintY;  // 0.0 .. 1.0; max pct of window height a dock can consume
@@ -844,6 +871,8 @@
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_RENDER, wxAuiManagerEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_FIND_MANAGER, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_MINIMIZE, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_MIN_RESTORE, wxAuiManagerEvent );
 
 typedef void (wxEvtHandler::*wxAuiManagerEventFunction)(wxAuiManagerEvent&);
 
@@ -864,6 +893,10 @@
    wx__DECLARE_EVT0(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(func))
 #define EVT_AUI_FIND_MANAGER(func) \
    wx__DECLARE_EVT0(wxEVT_AUI_FIND_MANAGER, wxAuiManagerEventHandler(func))
+#define EVT_AUI_PANE_MINIMIZE(func) \
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_MINIMIZE, wxAuiManagerEventHandler(func))
+#define EVT_AUI_PANE_MIN_RESTORE(func) \
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_MIN_RESTORE, wxAuiManagerEventHandler(func))
 
 #else
 
@@ -874,6 +907,8 @@
 %constant wxEventType wxEVT_AUI_PANE_ACTIVATED;
 %constant wxEventType wxEVT_AUI_RENDER;
 %constant wxEventType wxEVT_AUI_FIND_MANAGER;
+%constant wxEventType wxEVT_AUI_PANE_MINIMIZE;
+%constant wxEventType wxEVT_AUI_PANE_MIN_RESTORE;
 
 %pythoncode {
     EVT_AUI_PANE_BUTTON = wx.PyEventBinder( wxEVT_AUI_PANE_BUTTON )
@@ -883,6 +918,8 @@
     EVT_AUI_PANE_ACTIVATED = wx.PyEventBinder( wxEVT_AUI_PANE_ACTIVATED )
     EVT_AUI_RENDER = wx.PyEventBinder( wxEVT_AUI_RENDER )
     EVT_AUI_FIND_MANAGER = wx.PyEventBinder( wxEVT_AUI_FIND_MANAGER )
+    EVT_AUI_PANE_MINIMIZE = wx.PyEventBinder( wxEVT_AUI_PANE_MINIMIZE )
+    EVT_AUI_PANE_MIN_RESTORE = wx.PyEventBinder( wxEVT_AUI_PANE_MIN_RESTORE )
 }
 #endif // SWIG
 
Index: include/wx/aui/restore.xpm
===================================================================
--- include/wx/aui/restore.xpm	(revision 0)
+++ include/wx/aui/restore.xpm	(working copy)
@@ -0,0 +1,21 @@
+/* XPM */
+static char * restore_xpm[] = {
+"16 15 3 1",
+" 	c None",
+".	c #000000",
+"+	c #FFFFFF",
+"                ",
+"     .......... ",
+"     .++++++++. ",
+"     .......... ",
+"     .++++++++. ",
+" ..........+++. ",
+" .++++++++.+++. ",
+" ..........+++. ",
+" .++++++++..... ",
+" .++++++++.     ",
+" .++++++++.     ",
+" .++++++++.     ",
+" .++++++++.     ",
+" ..........     ",
+"                "};
Index: interface/wx/aui/framemanager.h
===================================================================
--- interface/wx/aui/framemanager.h	(revision 73662)
+++ interface/wx/aui/framemanager.h	(working copy)
@@ -55,6 +55,25 @@
 };
 
 /**
+    Available flags for the function MinimizeMode().
+*/
+enum wxAuiPaneMinimizeMode
+{
+    wxAUI_MINIMIZE_POS_AUTO     = 0,    ///< Minimizes the pane on the closest tool bar
+    wxAUI_MINIMIZE_POS_TOP      = 0x01, ///< Minimizes the pane on the top tool bar
+    wxAUI_MINIMIZE_POS_LEFT     = 0x02, ///< Minimizes the pane on its left tool bar
+    wxAUI_MINIMIZE_POS_RIGHT    = 0x03, ///< Minimizes the pane on its right tool bar
+    wxAUI_MINIMIZE_POS_BOTTOM   = 0x04, ///< Minimizes the pane on its bottom tool bar
+    wxAUI_MINIMIZE_POS_MASK     = 0x05, ///< Mask to filter the position flags
+    wxAUI_MINIMIZE_CAPT_HIDE    = 0x07, ///< Hides the caption of the minimized pane
+    wxAUI_MINIMIZE_CAPT_AUTO    = 0x08, ///< Displays the caption in the best rotation (horizontal or clockwise)
+    wxAUI_MINIMIZE_CAPT_HORZ    = 0x10, ///< Displays the caption horizontally
+    wxAUI_MINIMIZE_CAPT_MASK    = 0x18  ///< Mask to filter the caption flags
+};
+
+
+
+/**
     @class wxAuiManager
 
     wxAuiManager is the central class of the wxAUI class framework.
@@ -553,6 +572,14 @@
     //@}
 
     /**
+        GetMinimizeMode() returns the flags defined with the function MinimizeMode().
+        The flags can be filtered with the following masks:
+        @li wxAUI_MINIMIZE_POS_MASK: Filters the position flags.
+        @li wxAUI_MINIMIZE_CAPT_MASK: Filters the caption flags.
+    */
+    int GetMinimizeMode() const;
+
+    /**
         Gripper() indicates that a gripper should be drawn for the pane.
     */
     wxAuiPaneInfo& Gripper(bool visible = true);
@@ -762,6 +789,27 @@
     wxAuiPaneInfo& MinimizeButton(bool visible = true);
 
     /**
+        Sets the expected minimized mode if the MinimizeButton() is visible.
+
+        The minimized pane can have a specific position in the work space:
+        
+        @li wxAUI_MINIMIZE_POS_AUTO: Minimizes the pane on the closest tool bar
+        @li wxAUI_MINIMIZE_POS_TOP: Minimizes the pane on the top tool bar
+        @li wxAUI_MINIMIZE_POS_LEFT: Minimizes the pane on its left tool bar
+        @li wxAUI_MINIMIZE_POS_RIGHT: Minimizes the pane on its right tool bar
+        @li wxAUI_MINIMIZE_POS_BOTTOM: Minimizes the pane on its bottom tool bar
+        
+        The caption of the minimized pane can be displayed in different modes:
+        
+        @li wxAUI_MINIMIZE_CAPT_HIDE: Hides the caption of the minimized pane
+        @li wxAUI_MINIMIZE_CAPT_AUTO: Displays the caption in the best rotation
+        (horizontal in the top and in the bottom tool bar or clockwise in the right
+        and in the left tool bar)
+        @li wxAUI_MINIMIZE_CAPT_HORZ: Displays the caption horizontally
+    */
+    wxAuiPaneInfo& MinimizeMode(int mode);
+
+    /**
         Movable indicates whether a frame can be moved.
     */
     wxAuiPaneInfo& Movable(bool b = true);
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 73662)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -89,6 +89,14 @@
         ID_Settings,
         ID_CustomizeToolbar,
         ID_DropDownToolbarItem,
+        ID_MinimizePosAuto,
+        ID_MinimizePosTop,
+        ID_MinimizePosLeft,
+        ID_MinimizePosRight,
+        ID_MinimizePosBottom,
+        ID_MinimizeCaptAuto,
+        ID_MinimizeCaptHorz,
+        ID_MinimizeCaptHide,
         ID_NotebookNoCloseButton,
         ID_NotebookCloseButton,
         ID_NotebookCloseButtonAll,
@@ -161,6 +169,8 @@
     void OnGradient(wxCommandEvent& evt);
     void OnToolbarResizing(wxCommandEvent& evt);
     void OnManagerFlag(wxCommandEvent& evt);
+    void OnMinimizePosition(wxCommandEvent& evt);
+    void OnMinimizeCaption(wxCommandEvent& evt);
     void OnNotebookFlag(wxCommandEvent& evt);
     void OnUpdateUI(wxUpdateUIEvent& evt);
 
@@ -596,6 +606,14 @@
     EVT_MENU(ID_TransparentDrag, MyFrame::OnManagerFlag)
     EVT_MENU(ID_LiveUpdate, MyFrame::OnManagerFlag)
     EVT_MENU(ID_AllowActivePane, MyFrame::OnManagerFlag)
+    EVT_MENU(ID_MinimizePosAuto, MyFrame::OnMinimizePosition)
+    EVT_MENU(ID_MinimizePosTop, MyFrame::OnMinimizePosition)
+    EVT_MENU(ID_MinimizePosLeft, MyFrame::OnMinimizePosition)
+    EVT_MENU(ID_MinimizePosRight, MyFrame::OnMinimizePosition)
+    EVT_MENU(ID_MinimizePosBottom, MyFrame::OnMinimizePosition)
+    EVT_MENU(ID_MinimizeCaptAuto, MyFrame::OnMinimizeCaption)
+    EVT_MENU(ID_MinimizeCaptHorz, MyFrame::OnMinimizeCaption)
+    EVT_MENU(ID_MinimizeCaptHide, MyFrame::OnMinimizeCaption)
     EVT_MENU(ID_NotebookTabFixedWidth, MyFrame::OnNotebookFlag)
     EVT_MENU(ID_NotebookNoCloseButton, MyFrame::OnNotebookFlag)
     EVT_MENU(ID_NotebookCloseButton, MyFrame::OnNotebookFlag)
@@ -651,6 +669,7 @@
                    MyFrame::OnRestorePerspective)
     EVT_AUITOOLBAR_TOOL_DROPDOWN(ID_DropDownToolbarItem, MyFrame::OnDropDownToolbarItem)
     EVT_AUI_PANE_CLOSE(MyFrame::OnPaneClose)
+    EVT_AUI_PANE_MINIMIZE(MyFrame::OnPaneClose)
     EVT_AUINOTEBOOK_ALLOW_DND(wxID_ANY, MyFrame::OnAllowNotebookDnD)
     EVT_AUINOTEBOOK_PAGE_CLOSE(wxID_ANY, MyFrame::OnNotebookPageClose)
     EVT_AUINOTEBOOK_PAGE_CLOSED(wxID_ANY, MyFrame::OnNotebookPageClosed)
@@ -709,6 +728,16 @@
     options_menu->AppendCheckItem(ID_AllowActivePane, _("Allow Active Pane"));
     options_menu->AppendCheckItem(ID_LiveUpdate, _("Live Resize Update"));
     options_menu->AppendSeparator();
+    options_menu->AppendRadioItem(ID_MinimizePosAuto, _("Minimize in mode Auto"))->Check();
+    options_menu->AppendRadioItem(ID_MinimizePosTop, _("Minimize on Top"));
+    options_menu->AppendRadioItem(ID_MinimizePosLeft, _("Minimize on the Left"));
+    options_menu->AppendRadioItem(ID_MinimizePosRight, _("Minimize on the Right"));
+    options_menu->AppendRadioItem(ID_MinimizePosBottom, _("Minimize at the Bottom"));
+    options_menu->AppendSeparator();
+    options_menu->AppendRadioItem(ID_MinimizeCaptAuto, _("Auto Minimized Caption rotation"))->Check();
+    options_menu->AppendRadioItem(ID_MinimizeCaptHorz, _("Horizontal Minimized Caption"));
+    options_menu->AppendRadioItem(ID_MinimizeCaptHide, _("Hiden Minimized Caption"));
+    options_menu->AppendSeparator();
     options_menu->AppendRadioItem(ID_NoGradient, _("No Caption Gradient"));
     options_menu->AppendRadioItem(ID_VerticalGradient, _("Vertical Caption Gradient"));
     options_menu->AppendRadioItem(ID_HorizontalGradient, _("Horizontal Caption Gradient"));
@@ -872,20 +901,31 @@
     tb5->SetCustomOverflowItems(prepend_items, append_items);
     tb5->Realize();
 
+    wxAuiToolBar* tb6 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_VERT_TEXT);
+    tb6->SetToolBitmapSize(wxSize(48,48));
+    tb6->AddTool(ID_SampleItem+35, wxT("Clockwise 1"), wxArtProvider::GetBitmap(wxART_ERROR, wxART_OTHER, wxSize(16,16)));
+    tb6->AddSeparator();
+    tb6->AddTool(ID_SampleItem+36, wxT("Clockwise 2"), wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16)));
+    tb6->AddTool(ID_DropDownToolbarItem, wxT("Clockwise 3"), wxArtProvider::GetBitmap(wxART_WARNING, wxART_OTHER, wxSize(16,16)));
+    tb6->SetCustomOverflowItems(prepend_items, append_items);
+    tb6->SetToolDropDown(ID_DropDownToolbarItem, true);
+    tb6->Realize();
+
     // add a bunch of panes
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test1")).Caption(wxT("Pane Caption")).
-                  Top());
+                  Top().MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test2")).Caption(wxT("Client Size Reporter")).
                   Bottom().Position(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test3")).Caption(wxT("Client Size Reporter")).
                   Bottom().
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test4")).Caption(wxT("Pane Caption")).
@@ -898,23 +938,23 @@
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test6")).Caption(wxT("Client Size Reporter")).
                   Right().Row(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test7")).Caption(wxT("Client Size Reporter")).
                   Left().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
                   Name(wxT("test8")).Caption(wxT("Tree Pane")).
                   Left().Layer(1).Position(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test9")).Caption(wxT("Min Size 200x100")).
                   BestSize(wxSize(200,100)).MinSize(wxSize(200,100)).
                   Bottom().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     wxWindow* wnd10 = CreateTextCtrl(wxT("This pane will prompt the user before hiding."));
 
@@ -926,36 +966,36 @@
 
     m_mgr.AddPane(wnd10, wxAuiPaneInfo().
                   Name(wxT("test10")).Caption(wxT("Text Pane with Hide Prompt")).
-                  Bottom().Layer(1).Position(1).
+                  Bottom().Layer(1).Position(1).MinimizeButton(true).
                   Icon(wxArtProvider::GetBitmap(wxART_WARNING,
                                                 wxART_OTHER,
                                                 wxSize(iconSize, iconSize))));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test11")).Caption(wxT("Fixed Pane")).
-                  Bottom().Layer(1).Position(2).Fixed());
+                  Bottom().Layer(1).Position(2).Fixed().MinimizeButton(true));
 
 
     m_mgr.AddPane(new SettingsPanel(this,this), wxAuiPaneInfo().
                   Name(wxT("settings")).Caption(wxT("Dock Manager Settings")).
-                  Dockable(false).Float().Hide());
+                  Dockable(false).Float().Hide().MinimizeButton(true));
 
     // create some center panes
 
     m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().Name(wxT("grid_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().Name(wxT("tree_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().Name(wxT("sizereport_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().Name(wxT("text_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().Name(wxT("html_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateNotebook(), wxAuiPaneInfo().Name(wxT("notebook_content")).
                   CenterPane().PaneBorder(false));
@@ -982,8 +1022,14 @@
                   ToolbarPane().Left().
                   GripperTop());
 
+    m_mgr.AddPane(tb6, wxAuiPaneInfo().
+                  Name(wxT("tb6")).Caption(wxT("Sample Vertical Clockwise Rotated Toolbar")).
+                  ToolbarPane().Right().
+                  GripperTop().
+                  TopDockable(false).BottomDockable(false));
+
     m_mgr.AddPane(new wxButton(this, wxID_ANY, _("Test Button")),
-                  wxAuiPaneInfo().Name(wxT("tb6")).
+                  wxAuiPaneInfo().Name(wxT("tb7")).
                   ToolbarPane().Top().Row(2).Position(1).
                   LeftDockable(false).RightDockable(false));
 
@@ -997,7 +1043,7 @@
         if (!all_panes.Item(i).IsToolbar())
             all_panes.Item(i).Hide();
     m_mgr.GetPane(wxT("tb1")).Hide();
-    m_mgr.GetPane(wxT("tb6")).Hide();
+    m_mgr.GetPane(wxT("tb7")).Hide();
     m_mgr.GetPane(wxT("test8")).Show().Left().Layer(0).Row(0).Position(0);
     m_mgr.GetPane(wxT("test10")).Show().Bottom().Layer(0).Row(0).Position(0);
     m_mgr.GetPane(wxT("notebook_content")).Show();
@@ -1131,7 +1177,64 @@
     m_mgr.Update();
 }
 
+void MyFrame::OnMinimizePosition(wxCommandEvent& event)
+{
+    long minize_mode = 0;
+    switch(event.GetId())
+    {
+    case ID_MinimizePosAuto:
+        minize_mode |= wxAUI_MINIMIZE_POS_AUTO;
+        break;
+    case ID_MinimizePosTop:
+        minize_mode |= wxAUI_MINIMIZE_POS_TOP;
+	    break;
+    case ID_MinimizePosLeft:
+        minize_mode |= wxAUI_MINIMIZE_POS_LEFT;
+	    break;
+    case ID_MinimizePosRight:
+        minize_mode |= wxAUI_MINIMIZE_POS_RIGHT;
+        break;
+    case ID_MinimizePosBottom:
+        minize_mode |= wxAUI_MINIMIZE_POS_BOTTOM;
+        break;
+    }
 
+
+    size_t i = 0, count;
+    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
+    for (i = 0, count = all_panes.GetCount(); i < count; ++i)
+    {
+        wxAuiPaneInfo& pane = all_panes.Item(i);
+        pane.MinimizeMode(minize_mode | (pane.GetMinimizeMode() & wxAUI_MINIMIZE_CAPT_MASK));
+    }
+}
+
+void MyFrame::OnMinimizeCaption(wxCommandEvent& event)
+{
+    long minize_mode = 0;
+    switch(event.GetId())
+    {
+    case ID_MinimizeCaptAuto:
+        minize_mode |= wxAUI_MINIMIZE_CAPT_AUTO;
+	    break;
+    case ID_MinimizeCaptHorz:
+        minize_mode |= wxAUI_MINIMIZE_CAPT_HORZ;
+	    break;
+    case ID_MinimizeCaptHide:
+        minize_mode |= wxAUI_MINIMIZE_CAPT_HIDE;
+        break;
+    }
+
+
+    size_t i = 0, count;
+    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
+    for (i = 0, count = all_panes.GetCount(); i < count; ++i)
+    {
+        wxAuiPaneInfo& pane = all_panes.Item(i);
+        pane.MinimizeMode(minize_mode | (pane.GetMinimizeMode() & wxAUI_MINIMIZE_POS_MASK));
+    }
+}
+
 void MyFrame::OnNotebookFlag(wxCommandEvent& event)
 {
     int id = event.GetId();
@@ -1314,7 +1417,13 @@
 {
     if (evt.pane->name == wxT("test10"))
     {
-        int res = wxMessageBox(wxT("Are you sure you want to close/hide this pane?"),
+        wxString msg = wxT("Are you sure you want to ");
+        if (evt.GetEventType() == wxEVT_AUI_PANE_MINIMIZE)
+            msg += wxT("minimize ");
+        else
+            msg += wxT("close/hide ");
+
+        int res = wxMessageBox(msg + wxT("this pane?"),
                                wxT("wxAUI"),
                                wxYES_NO,
                                this);
@@ -1406,7 +1515,7 @@
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Tree Control")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(150,300)));
+                  FloatingSize(wxSize(150,300)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1415,7 +1524,7 @@
     m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().
                   Caption(wxT("Grid")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+                  FloatingSize(wxSize(300,200)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1424,7 +1533,7 @@
     m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().
                   Caption(wxT("HTML Control")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+                  FloatingSize(wxSize(300,200)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1434,7 +1543,7 @@
                   Caption(wxT("Notebook")).
                   Float().FloatingPosition(GetStartPosition()).
                   //FloatingSize(300,200).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1442,7 +1551,7 @@
 {
     m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Text Control")).
-                  Float().FloatingPosition(GetStartPosition()));
+                  Float().FloatingPosition(GetStartPosition()).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1451,7 +1560,7 @@
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Client Size Reporter")).
                   Float().FloatingPosition(GetStartPosition()).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
     m_mgr.Update();
 }
 
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 73662)
+++ src/aui/auibar.cpp	(working copy)
@@ -132,6 +132,7 @@
     m_flags = 0;
     m_textOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
     m_highlightColour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
+    m_orientation = wxAUI_TBTOOL_HORIZONTAL;
 
     m_separatorSize = 7;
     m_gripperSize = 7;
@@ -187,6 +188,11 @@
     m_textOrientation = orientation;
 }
 
+void wxAuiDefaultToolBarArt::SetOrientation(int orientation)
+{
+    m_orientation = orientation;
+}
+
 unsigned int wxAuiDefaultToolBarArt::GetFlags()
 {
     return m_flags;
@@ -202,6 +208,11 @@
     return m_textOrientation;
 }
 
+int wxAuiDefaultToolBarArt::GetOrientation()
+{
+    return m_orientation;
+}
+
 void wxAuiDefaultToolBarArt::DrawBackground(
                                     wxDC& dc,
                                     wxWindow* WXUNUSED(wnd),
@@ -235,75 +246,44 @@
 {
     dc.SetFont(m_font);
     dc.SetTextForeground(*wxBLACK);
+    bool horizontal = (item.GetOrientation() == wxAUI_TBTOOL_HORIZONTAL);
 
-    // we only care about the text height here since the text
-    // will get cropped based on the width of the item
-    int textWidth = 0, textHeight = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &textWidth, &textHeight);
+    wxSize labelSize = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(), !horizontal);
+    int textWidth = labelSize.GetWidth(), textHeight = labelSize.GetHeight();
 
-    // set the clipping region
-    wxRect clipRect = rect;
-    clipRect.width -= 1;
-    dc.SetClippingRegion(clipRect);
-
     int textX, textY;
-    textX = rect.x + 1;
-    textY = rect.y + (rect.height-textHeight)/2;
-    dc.DrawText(item.GetLabel(), textX, textY);
-    dc.DestroyClippingRegion();
+    switch(item.GetOrientation())
+    {
+    default:
+    case wxAUI_TBTOOL_HORIZONTAL:
+        textX = rect.x;
+        textY = rect.y + (rect.height-textHeight)/2;
+        dc.DrawText(item.GetLabel(), textX, textY);
+        break;
+    case wxAUI_TBTOOL_VERT_CLOCKWISE:
+        textX = rect.x + (rect.width+textWidth)/2;
+        textY = rect.y;
+        dc.DrawRotatedText(item.GetLabel(), textX, textY, 270);
+    	break;
+    case wxAUI_TBTOOL_VERT_COUNTERCLOCKWISE:
+        textX = rect.x + (rect.width-textWidth)/2;
+        textY = rect.y + textHeight;
+        dc.DrawRotatedText(item.GetLabel(), textX, textY, 90);
+    	break;
+    }
 }
 
 
 void wxAuiDefaultToolBarArt::DrawButton(
                                     wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
+                                    wxWindow* wnd,
                                     const wxAuiToolBarItem& item,
                                     const wxRect& rect)
 {
-    int textWidth = 0, textHeight = 0;
+    wxRect bmpRect;
+    wxRect textRect;
+    GetToolsPosition(dc, item, rect, bmpRect, textRect);
 
-    if (m_flags & wxAUI_TB_TEXT)
-    {
-        dc.SetFont(m_font);
-
-        int tx, ty;
-
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &textHeight);
-        textWidth = 0;
-        dc.GetTextExtent(item.GetLabel(), &textWidth, &ty);
-    }
-
-    int bmpX = 0, bmpY = 0;
-    int textX = 0, textY = 0;
-
-    if (m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM)
-    {
-        bmpX = rect.x +
-                (rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
-
-        bmpY = rect.y +
-                ((rect.height-textHeight)/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        textX = rect.x + (rect.width/2) - (textWidth/2) + 1;
-        textY = rect.y + rect.height - textHeight - 1;
-    }
-    else if (m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT)
-    {
-        bmpX = rect.x + 3;
-
-        bmpY = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        textX = bmpX + 3 + item.GetBitmap().GetWidth();
-        textY = rect.y +
-                 (rect.height/2) -
-                 (textHeight/2);
-    }
-
-
     if (!(item.GetState() & wxAUI_BUTTON_STATE_DISABLED))
     {
         if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
@@ -341,7 +321,7 @@
         bmp = item.GetBitmap();
 
     if ( bmp.IsOk() )
-        dc.DrawBitmap(bmp, bmpX, bmpY, true);
+        dc.DrawBitmap(bmp, bmpRect.x, bmpRect.y, true);
 
     // set the item's text color based on if it is disabled
     dc.SetTextForeground(*wxBLACK);
@@ -349,81 +329,65 @@
         dc.SetTextForeground(DISABLED_TEXT_COLOR);
 
     if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
-    {
-        dc.DrawText(item.GetLabel(), textX, textY);
-    }
+        DrawLabel(dc, wnd, item, textRect);
 }
 
 
 void wxAuiDefaultToolBarArt::DrawDropDownButton(
                                     wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
+                                    wxWindow* wnd,
                                     const wxAuiToolBarItem& item,
                                     const wxRect& rect)
 {
-    int textWidth = 0, textHeight = 0, textX = 0, textY = 0;
-    int bmpX = 0, bmpY = 0, dropBmpX = 0, dropBmpY = 0;
+    int dropBmpX = 0, dropBmpY = 0;
 
-    wxRect buttonRect = wxRect(rect.x,
-                                rect.y,
-                                rect.width-BUTTON_DROPDOWN_WIDTH,
-                                rect.height);
-    wxRect dropDownRect = wxRect(rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1,
-                                  rect.y,
-                                  BUTTON_DROPDOWN_WIDTH+1,
-                                  rect.height);
-
-    if (m_flags & wxAUI_TB_TEXT)
+    wxRect buttonRect;
+    wxRect dropDownRect;
+    bool horizontal = (item.GetOrientation() == wxAUI_TBTOOL_HORIZONTAL);
+    if (horizontal)
     {
-        dc.SetFont(m_font);
+        buttonRect = wxRect(rect.x,
+                            rect.y,
+                            rect.width-BUTTON_DROPDOWN_WIDTH,
+                            rect.height);
+        dropDownRect = wxRect(rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1,
+                              rect.y,
+                              BUTTON_DROPDOWN_WIDTH+1,
+                              rect.height);
+    }
+    else
+    {
+        buttonRect = wxRect(rect.x,
+                            rect.y,
+                            rect.width,
+                            rect.height-BUTTON_DROPDOWN_WIDTH);
+        dropDownRect = wxRect(rect.x,
+                              rect.y+rect.height-BUTTON_DROPDOWN_WIDTH-1,
+                              rect.width,
+                              BUTTON_DROPDOWN_WIDTH+1);
+    }
 
-        int tx, ty;
-        if (m_flags & wxAUI_TB_TEXT)
-        {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &textHeight);
-            textWidth = 0;
-        }
 
-        dc.GetTextExtent(item.GetLabel(), &textWidth, &ty);
+    int dropBmpWidth = m_buttonDropDownBmp.GetWidth();
+    int dropBmpHeight = m_buttonDropDownBmp.GetHeight();
+    if (!horizontal)
+    {
+        int tmp = dropBmpWidth;
+        dropBmpWidth = dropBmpHeight;
+        dropBmpHeight = tmp;
     }
-
-
-
     dropBmpX = dropDownRect.x +
-                (dropDownRect.width/2) -
-                (m_buttonDropDownBmp.GetWidth()/2);
+               (dropDownRect.width/2) -
+               (dropBmpWidth/2);
     dropBmpY = dropDownRect.y +
-                (dropDownRect.height/2) -
-                (m_buttonDropDownBmp.GetHeight()/2);
+               (dropDownRect.height/2) -
+               (dropBmpHeight/2);
 
 
-    if (m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM)
-    {
-        bmpX = buttonRect.x +
-                (buttonRect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
-        bmpY = buttonRect.y +
-                ((buttonRect.height-textHeight)/2) -
-                (item.GetBitmap().GetHeight()/2);
+    wxRect bmpRect;
+    wxRect textRect;
+    GetToolsPosition(dc, item, buttonRect, bmpRect, textRect);
 
-        textX = rect.x + (rect.width/2) - (textWidth/2) + 1;
-        textY = rect.y + rect.height - textHeight - 1;
-    }
-    else if (m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT)
-    {
-        bmpX = rect.x + 3;
-
-        bmpY = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
-
-        textX = bmpX + 3 + item.GetBitmap().GetWidth();
-        textY = rect.y +
-                 (rect.height/2) -
-                 (textHeight/2);
-    }
-
-
     if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
     {
         dc.SetPen(wxPen(m_highlightColour));
@@ -467,8 +431,17 @@
     if (!bmp.IsOk())
         return;
 
-    dc.DrawBitmap(bmp, bmpX, bmpY, true);
-    dc.DrawBitmap(dropbmp, dropBmpX, dropBmpY, true);
+    dc.DrawBitmap(bmp, bmpRect.x, bmpRect.y, true);
+    if (horizontal)
+    {
+        dc.DrawBitmap(dropbmp, dropBmpX, dropBmpY, true);
+    }
+    else
+    {
+        dc.DrawBitmap(dropbmp.ConvertToImage().
+            Rotate90(item.GetOrientation() == wxAUI_TBTOOL_VERT_CLOCKWISE),
+            dropBmpX, dropBmpY, true);
+    }
 
     // set the item's text color based on if it is disabled
     dc.SetTextForeground(*wxBLACK);
@@ -476,9 +449,7 @@
         dc.SetTextForeground(DISABLED_TEXT_COLOR);
 
     if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
-    {
-        dc.DrawText(item.GetLabel(), textX, textY);
-    }
+        DrawLabel(dc, wnd, item, textRect);
 }
 
 void wxAuiDefaultToolBarArt::DrawControlLabel(
@@ -498,15 +469,13 @@
 
     dc.SetFont(m_font);
 
-    int tx, ty;
-    if (m_flags & wxAUI_TB_TEXT)
-    {
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &textHeight);
-        textWidth = 0;
-    }
+    wxSize labelSize = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(), 
+        item.GetOrientation() != wxAUI_TBTOOL_HORIZONTAL);
 
-    dc.GetTextExtent(item.GetLabel(), &textWidth, &ty);
+    textHeight = labelSize.GetHeight();
+    textWidth = labelSize.GetWidth();
 
+
     // don't draw the label if it is wider than the item width
     if (textWidth > rect.width)
         return;
@@ -529,21 +498,10 @@
                                         const wxAuiToolBarItem& item)
 {
     dc.SetFont(m_font);
+    wxSize label_size = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(),
+        m_orientation != wxAUI_TBTOOL_HORIZONTAL);
 
-    // get label's height
-    int width = 0, height = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &width, &height);
-
-    // get item's width
-    width = item.GetMinSize().GetWidth();
-
-    if (width == -1)
-    {
-        // no width specified, measure the text ourselves
-        width = dc.GetTextExtent(item.GetLabel()).GetX();
-    }
-
-    return wxSize(width, height);
+    return wxSize(item.GetMinSize().GetWidth(), label_size.GetHeight());
 }
 
 wxSize wxAuiDefaultToolBarArt::GetToolSize(
@@ -560,37 +518,50 @@
     if (m_flags & wxAUI_TB_TEXT)
     {
         dc.SetFont(m_font);
-        int tx, ty;
+        wxSize label_size = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(),
+            GetOrientation() != wxAUI_TBTOOL_HORIZONTAL);
 
+        int padding = 6;
         if (m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM)
         {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &ty);
-            height += ty;
+            if (GetOrientation() != wxAUI_TBTOOL_HORIZONTAL)
+            {
+                height += 3; // space between top border and bitmap
+                height += 3; // space between bitmap and text
+                padding = 0;
+            }
 
+            height += label_size.GetHeight();
+
             if ( !item.GetLabel().empty() )
-            {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
-                width = wxMax(width, tx+6);
-            }
+                width = wxMax(width, label_size.GetWidth()+padding);
         }
         else if ( m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT &&
                   !item.GetLabel().empty() )
         {
-            width += 3; // space between left border and bitmap
-            width += 3; // space between bitmap and text
+            if (GetOrientation() == wxAUI_TBTOOL_HORIZONTAL)
+            {
+                width += 3; // space between left border and bitmap
+                width += 3; // space between bitmap and text
+                padding = 0;
+            }
 
             if ( !item.GetLabel().empty() )
             {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
-                width += tx;
-                height = wxMax(height, ty);
+                width += label_size.GetWidth();
+                height = wxMax(height, label_size.GetHeight()+padding);
             }
         }
     }
 
     // if the tool has a dropdown button, add it to the width
     if (item.HasDropDown())
-        width += (BUTTON_DROPDOWN_WIDTH+4);
+    {
+        if (item.GetOrientation() == wxAUI_TBTOOL_HORIZONTAL)
+            width += (BUTTON_DROPDOWN_WIDTH+4);
+        else
+            height += (BUTTON_DROPDOWN_WIDTH+4);
+    }
 
     return wxSize(width, height);
 }
@@ -744,7 +715,10 @@
 
             wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text, item.GetShortHelp());
 
+            int orientation = item.GetOrientation();
+            item.SetOrientation(wxAUI_TBTOOL_HORIZONTAL);
             m->SetBitmap(item.GetBitmap());
+            item.SetOrientation(orientation);
             menuPopup.Append(m);
             items_added++;
         }
@@ -773,8 +747,81 @@
 }
 
 
+void wxAuiDefaultToolBarArt::GetToolsPosition(wxDC& dc,
+                                              const wxAuiToolBarItem& item,
+                                              const wxRect& rect,
+                                              wxRect &bmp_rect,
+                                              wxRect &text_rect)
+{
+    int text_width = 0, text_height = 0;
+    bool horizontal = (m_orientation == wxAUI_TBTOOL_HORIZONTAL);
+    bool text_bottom = (m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM);
+    bool text_right = (m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT);
+    int bmp_with = item.GetBitmap().GetWidth();
+    int bmp_height = item.GetBitmap().GetHeight();
 
+    if (m_flags & wxAUI_TB_TEXT)
+    {
+        dc.SetFont(m_font);
 
+        wxSize label_size = wxAuiToolBar::GetLabelSize(dc, item.GetLabel(), !horizontal);
+
+        text_height = label_size.GetHeight();
+        text_width = label_size.GetWidth();
+    }
+
+    int bmp_x = 0, bmp_y = 0;
+    int text_x = 0, text_y = 0;
+
+    if (horizontal && text_bottom)
+    {
+        bmp_x = rect.x +
+                (rect.width/2) -
+                (bmp_with/2);
+        bmp_y = rect.y + 3;
+
+        text_x = rect.x +
+                 (rect.width/2) -
+                 (text_width/2);
+        text_y = rect.y +
+                 ((bmp_y - rect.y) * 2) +
+                 bmp_height;
+    }
+    else if (horizontal && text_right)
+    {
+        bmp_x = rect.x + 3;
+        bmp_y = rect.y +
+                (rect.height/2) -
+                (bmp_height / 2);
+
+        text_x = rect.x +
+                 ((bmp_x - rect.x) * 2) +
+                 bmp_with;
+        text_y = rect.y +
+                 (rect.height/2) -
+                 (text_height/2);
+    }
+    else if (!horizontal && text_bottom)
+    {
+        bmp_x = rect.x +
+                (rect.width / 2) -
+                (bmp_with / 2);
+        bmp_y = rect.y + 3;
+
+        text_x = rect.x +
+                 (rect.width / 2) -
+                 (text_width / 2);
+        text_y = rect.y +
+                 ((bmp_y - rect.y) * 2) +
+                 bmp_height;
+    }
+    bmp_rect.SetPosition(wxPoint(bmp_x, bmp_y));
+    bmp_rect.SetSize(wxSize(bmp_with, bmp_height));
+    text_rect.SetPosition(wxPoint(text_x, text_y));
+    text_rect.SetSize(wxSize(text_width, text_height));
+}
+
+
 static wxOrientation GetOrientation(long& style)
 {
     switch (style & wxAUI_ORIENTATION_MASK)
@@ -824,6 +871,7 @@
     m_toolPacking = 2;
     m_toolBorderPadding = 3;
     m_toolTextOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+    m_toolOrientation = wxAUI_TBTOOL_HORIZONTAL;
     m_gripperSizerItem = NULL;
     m_overflowSizerItem = NULL;
     m_dragging = false;
@@ -861,6 +909,13 @@
     SetExtraStyle(wxWS_EX_PROCESS_IDLE);
     if (style & wxAUI_TB_HORZ_LAYOUT)
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
+    else if (style & wxAUI_TB_VERTICAL)
+    {
+        if (style & wxAUI_TB_CLOCKWISE)
+            SetToolOrientation(wxAUI_TBTOOL_VERT_CLOCKWISE);
+        else if (style & wxAUI_TB_COUNTERCLOCKWISE)
+            SetToolOrientation(wxAUI_TBTOOL_VERT_COUNTERCLOCKWISE);
+    }
     SetBackgroundStyle(wxBG_STYLE_CUSTOM);
 
     return true;
@@ -902,6 +957,13 @@
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
     else
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_BOTTOM);
+    if (style & wxAUI_TB_VERTICAL)
+    {
+        if (style & wxAUI_TB_CLOCKWISE)
+            SetToolOrientation(wxAUI_TBTOOL_VERT_CLOCKWISE);
+        else if (style & wxAUI_TB_COUNTERCLOCKWISE)
+            SetToolOrientation(wxAUI_TBTOOL_VERT_COUNTERCLOCKWISE);
+    }
 }
 
 void wxAuiToolBar::SetArtProvider(wxAuiToolBarArt* art)
@@ -914,6 +976,7 @@
     {
         SetArtFlags();
         m_art->SetTextOrientation(m_toolTextOrientation);
+        m_art->SetOrientation(m_toolOrientation);
     }
 }
 
@@ -969,7 +1032,8 @@
     item.m_minSize = wxDefaultSize;
     item.m_userData = 0;
     item.m_sticky = false;
-
+    item.m_orientation = m_toolOrientation;
+    
     if (item.m_toolId == wxID_ANY)
         item.m_toolId = wxNewId();
 
@@ -1004,6 +1068,7 @@
     item.m_minSize = control->GetEffectiveMinSize();
     item.m_userData = 0;
     item.m_sticky = false;
+    item.m_orientation = m_toolOrientation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1033,14 +1098,37 @@
     item.m_minSize = min_size;
     item.m_userData = 0;
     item.m_sticky = false;
+    item.m_orientation = m_toolOrientation;
 
     if (item.m_toolId == wxID_ANY)
         item.m_toolId = wxNewId();
-
+ 	
     m_items.Add(item);
     return &m_items.Last();
 }
 
+wxSize wxAuiToolBar::GetLabelSize(wxDC& dc, const wxString& label, bool vertical)
+{
+    int tx, ty;
+    int text_width = 0, text_height = 0;
+
+    // get the text height
+    dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
+
+    // get the text width
+    if ( !label.empty() )
+        dc.GetTextExtent(label, &text_width, &ty);
+
+    if (vertical)
+    {
+        int tmp = text_height;
+        text_height = text_width;
+        text_width = tmp;
+    }
+
+    return wxSize(text_width, text_height);
+}
+
 wxAuiToolBarItem* wxAuiToolBar::AddSeparator()
 {
     wxAuiToolBarItem item;
@@ -1058,6 +1146,7 @@
     item.m_minSize = wxDefaultSize;
     item.m_userData = 0;
     item.m_sticky = false;
+    item.m_orientation = m_toolOrientation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1081,6 +1170,7 @@
     item.m_minSize = wxDefaultSize;
     item.m_userData = 0;
     item.m_sticky = false;
+    item.m_orientation = m_toolOrientation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1104,6 +1194,7 @@
     item.m_minSize = wxDefaultSize;
     item.m_userData = 0;
     item.m_sticky = false;
+    item.m_orientation = m_toolOrientation;
 
     m_items.Add(item);
     return &m_items.Last();
@@ -1342,6 +1433,22 @@
     return m_toolTextOrientation;
 }
 
+
+void wxAuiToolBar::SetToolOrientation(int orientation)
+{
+    m_toolOrientation = orientation;
+
+    if (m_art)
+    {
+        m_art->SetOrientation(orientation);
+    }
+}
+
+int wxAuiToolBar::GetToolOrientation() const
+{
+    return m_toolOrientation;
+}
+
 void wxAuiToolBar::SetToolPacking(int packing)
 {
     m_toolPacking = packing;
@@ -2132,19 +2239,9 @@
 wxSize wxAuiToolBar::GetLabelSize(const wxString& label)
 {
     wxClientDC dc(this);
-
-    int tx, ty;
-    int textWidth = 0, textHeight = 0;
-
     dc.SetFont(m_font);
-
-    // get the text height
-    dc.GetTextExtent(wxT("ABCDHgj"), &tx, &textHeight);
-
-    // get the text width
-    dc.GetTextExtent(label, &textWidth, &ty);
-
-    return wxSize(textWidth, textHeight);
+    return wxAuiToolBar::GetLabelSize(dc, label,
+        m_toolOrientation != wxAUI_TBTOOL_HORIZONTAL);
 }
 
 
@@ -2576,10 +2673,15 @@
         e.SetToolId(m_actionItem->m_toolId);
 
         int mouse_x = evt.GetX();
+        int mouse_y = evt.GetY();
         wxRect rect = m_actionItem->m_sizerItem->GetRect();
         const bool dropDownHit = m_actionItem->m_dropDown &&
+                                 (m_actionItem->m_orientation == wxAUI_TBTOOL_HORIZONTAL &&
                                  mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
-                                 mouse_x < (rect.x+rect.width);
+                                 mouse_x < (rect.x+rect.width)) ||
+                                 (m_actionItem->m_orientation != wxAUI_TBTOOL_HORIZONTAL &&
+                                 mouse_y >= (rect.y+rect.height-BUTTON_DROPDOWN_WIDTH-1) &&
+                                 mouse_y < (rect.y+rect.height));
         e.SetDropDownClicked(dropDownHit);
 
         e.SetClickPoint(evt.GetPosition());
@@ -2649,7 +2751,33 @@
 
                 e.SetInt(toggle);
             }
+            else if ( m_actionItem->m_toolId == wxID_RESTORE_FRAME )
+            {
+                // find aui manager
+                wxAuiManager* manager = wxAuiManager::GetManager(this);
 
+                if (!manager)
+                    return;
+
+                wxAuiPaneInfo pane = manager->GetPane(this);
+                if (pane.IsOk())
+                {
+
+                    wxAuiManagerEvent e(wxEVT_AUI_PANE_MIN_RESTORE);
+
+                    e.SetManager(manager);
+                    e.SetPane(&pane);
+
+                    ReleaseMouse();
+
+                    //manager->ProcessMgrEvent(e);
+                    manager->ProcessEvent(e);
+                    if (!e.GetVeto())
+                        DoIdleUpdate();
+                    return;
+                }
+            }
+
             // we have to release the mouse *before* sending the event, because
             // we don't know what a handler might do. It could open up a popup
             // menu for example and that would make us lose our capture anyway.
Index: src/aui/dockart.cpp
===================================================================
--- src/aui/dockart.cpp	(revision 73662)
+++ src/aui/dockart.cpp	(working copy)
@@ -252,6 +252,11 @@
         0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0x07, 0xf0,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 
+    static const unsigned char minimize_bits[] = {
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xf7, 0xf7, 0x07, 0xf0,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+
     static const unsigned char restore_bits[]={
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x1f, 0xf0, 0xdf, 0xf7,
         0x07, 0xf4, 0x07, 0xf4, 0xf7, 0xf5, 0xf7, 0xf1, 0xf7, 0xfd, 0xf7, 0xfd,
@@ -279,6 +284,14 @@
 #endif
 
 #ifdef __WXMAC__
+    m_inactiveMinimizeBitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, *wxWHITE);
+    m_activeMinimizeBitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, *wxWHITE );
+#else
+    m_inactiveMinimizeBitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, m_inactiveCaptionTextColour);
+    m_activeMinimizeBitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, m_activeCaptionTextColour);
+#endif
+
+#ifdef __WXMAC__
     m_inactiveRestoreBitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE);
     m_activeRestoreBitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE );
 #else
@@ -708,6 +721,12 @@
                     bmp = m_inactiveMaximizeBitmap;
             }
             break;
+     case wxAUI_BUTTON_MINIMIZE:
+        if (pane.state & wxAuiPaneInfo::optionActive)
+            bmp = m_activeMinimizeBitmap;
+        else
+            bmp = m_inactiveMinimizeBitmap;
+        break;
     }
 
 
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 73662)
+++ src/aui/framemanager.cpp	(working copy)
@@ -32,6 +32,8 @@
 #include "wx/aui/auibar.h"
 #include "wx/mdi.h"
 
+#include "wx/aui/restore.xpm"
+
 #ifndef WX_PRECOMP
     #include "wx/panel.h"
     #include "wx/settings.h"
@@ -62,6 +64,8 @@
 wxDEFINE_EVENT( wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEvent );
 wxDEFINE_EVENT( wxEVT_AUI_RENDER, wxAuiManagerEvent );
 wxDEFINE_EVENT( wxEVT_AUI_FIND_MANAGER, wxAuiManagerEvent );
+wxDEFINE_EVENT( wxEVT_AUI_PANE_MINIMIZE, wxAuiManagerEvent );
+wxDEFINE_EVENT( wxEVT_AUI_PANE_MIN_RESTORE, wxAuiManagerEvent );
 
 #ifdef __WXMAC__
     // a few defines to avoid nameclashes
@@ -610,6 +614,7 @@
     EVT_MOUSE_CAPTURE_LOST(wxAuiManager::OnCaptureLost)
     EVT_CHILD_FOCUS(wxAuiManager::OnChildFocus)
     EVT_AUI_FIND_MANAGER(wxAuiManager::OnFindManager)
+    EVT_AUI_PANE_MIN_RESTORE(wxAuiManager::OnRestoreMinimizedPane)
 END_EVENT_TABLE()
 
 
@@ -624,6 +629,7 @@
     m_flags = flags;
     m_skipping = false;
     m_hasMaximized = false;
+    m_has_minimized = false;
     m_frame = NULL;
     m_dockConstraintX = 0.3;
     m_dockConstraintY = 0.3;
@@ -990,6 +996,30 @@
 }
 
 
+void wxAuiManager::ShowPane(wxWindow *window,bool show)
+{
+    wxAuiPaneInfo &p = GetPane(window);
+    if (p.IsOk())
+    {
+/*        if (p.IsNotebookPage())
+        {
+            if (show)
+            {
+                wxAuiNotebook* notebook = m_notebooks[p.notebook_id];
+                int id = notebook->GetPageIndex(p.window);
+                if (id >= 0)
+                    notebook->SetSelection(id);
+                ShowPane(notebook,true);
+            }
+        }
+        else*/
+            p.Show(show);
+        if (p.frame)
+            p.frame->Raise();
+        Update();
+    }
+}
+
 bool wxAuiManager::AddPane(wxWindow* window, const wxAuiPaneInfo& paneInfo)
 {
     wxASSERT_MSG(window, wxT("NULL window ptrs are not allowed"));
@@ -1074,6 +1104,13 @@
     if (pinfo.dock_proportion == 0)
         pinfo.dock_proportion = 100000;
 
+    if (pinfo.HasMinimizeButton())
+    {
+        wxAuiPaneButton button;
+        button.button_id = wxAUI_BUTTON_MINIMIZE;
+        pinfo.buttons.Add(button);
+    }
+
     if (pinfo.HasMaximizeButton())
     {
         wxAuiPaneButton button;
@@ -1387,6 +1424,7 @@
     // mark ourselves non-maximized
     paneInfo.Restore();
     m_hasMaximized = false;
+    m_has_minimized = false;
 
     // last, show the window
     if (paneInfo.window && !paneInfo.window->IsShown())
@@ -4844,6 +4882,179 @@
         pane.Float();
         Update();
     }
+    //mn this performs the minimizing of a pane
+    else if (evt.button == wxAUI_BUTTON_MINIMIZE)
+    {
+        // fire pane close event
+        wxAuiManagerEvent e(wxEVT_AUI_PANE_MINIMIZE);
+        e.SetManager(this);
+        e.SetPane(evt.pane);
+        ProcessMgrEvent(e);
+
+        if (!e.GetVeto())
+        {
+            MinimizePane(pane);
+            Update();
+        }
+    }
 }
 
+void wxAuiManager::MinimizePane(wxAuiPaneInfo& paneInfo)
+{
+    if(!paneInfo.IsToolbar())
+    {
+
+        /*
+        Basically the idea is this.
+
+        1) create a toolbar, with a restore button 
+
+        2) place the new toolbar in the toolbar area representative of the location of the pane 
+        (NORTH/SOUTH/EAST/WEST, central area always to the right) or user defined
+
+        3) Hide the minimizing pane 
+        */
+
+
+        // personalize the toolbar style
+        long tbStyle = wxAUI_TB_DEFAULT_STYLE;
+        long posMask = paneInfo.minimize_mode & wxAUI_MINIMIZE_POS_MASK;
+        long captMask = paneInfo.minimize_mode & wxAUI_MINIMIZE_CAPT_MASK;
+        int dockDirection = paneInfo.dock_direction;
+        if (captMask != 0)
+            tbStyle |= wxAUI_TB_TEXT;
+        if ((posMask == wxAUI_MINIMIZE_POS_TOP) ||
+            (posMask == wxAUI_MINIMIZE_POS_BOTTOM))
+        {
+            tbStyle |= wxAUI_TB_HORZ_LAYOUT;
+            if (posMask == wxAUI_MINIMIZE_POS_TOP)
+                dockDirection = wxAUI_DOCK_TOP;
+            else
+                dockDirection = wxAUI_DOCK_BOTTOM;
+        }
+        else if ((posMask == wxAUI_MINIMIZE_POS_RIGHT) ||
+                 (posMask == wxAUI_MINIMIZE_POS_LEFT))
+        {
+            tbStyle |= wxAUI_TB_VERTICAL;
+            if (captMask == wxAUI_MINIMIZE_CAPT_AUTO)
+                tbStyle |= wxAUI_TB_CLOCKWISE;
+            if ((posMask == wxAUI_MINIMIZE_POS_LEFT))
+                dockDirection = wxAUI_DOCK_LEFT;
+            else if ((posMask == wxAUI_MINIMIZE_POS_RIGHT))
+                dockDirection = wxAUI_DOCK_RIGHT;
+            else if ((posMask == wxAUI_MINIMIZE_POS_BOTTOM))
+                dockDirection = wxAUI_DOCK_BOTTOM;
+        }
+        else //wxAUI_MINIMIZE_POS_AUTO or undefined
+        {
+            if ((paneInfo.dock_direction == wxAUI_DOCK_TOP) ||
+                (paneInfo.dock_direction == wxAUI_DOCK_BOTTOM))
+            {
+                tbStyle |= wxAUI_TB_HORZ_LAYOUT;
+            }
+            else if ((paneInfo.dock_direction == wxAUI_DOCK_LEFT) ||
+                     (paneInfo.dock_direction == wxAUI_DOCK_RIGHT) ||
+                     (paneInfo.dock_direction == wxAUI_DOCK_CENTER))
+            {
+                tbStyle |= wxAUI_TB_VERTICAL;
+                if (captMask == wxAUI_MINIMIZE_CAPT_AUTO)
+                    tbStyle |= wxAUI_TB_CLOCKWISE;
+            }
+        }
+
+
+
+        // Create a new toolbar
+        // give it the same name as the minimized pane with _min appended
+        wxAuiToolBar* minimize_toolbar = new wxAuiToolBar(GetManagedWindow(),
+            wxID_ANY, wxDefaultPosition, wxDefaultSize, tbStyle);
+        minimize_toolbar->SetToolBitmapSize(wxSize(16,16));
+
+        minimize_toolbar->AddTool(wxID_RESTORE_FRAME,
+            paneInfo.caption,
+            wxBitmap(restore_xpm),
+            wxT("Restore " + paneInfo.caption));
+        minimize_toolbar->Realize();
+        wxString toolpanelname;
+        toolpanelname.Append(paneInfo.name);
+        toolpanelname.Append(wxT("_min"));
+
+        // add the toolbars to the manager
+
+        switch(dockDirection)
+        {
+        case wxAUI_DOCK_TOP:
+            {	
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Top().BottomDockable(false).
+                    LeftDockable(false).RightDockable(false).DestroyOnClose());
+                break;
+            }
+        case wxAUI_DOCK_BOTTOM:
+            {
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Bottom().TopDockable(false).
+                    LeftDockable(false).RightDockable(false).DestroyOnClose());
+                break;
+            }
+        case wxAUI_DOCK_LEFT:
+            {
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Left().TopDockable(false).
+                    BottomDockable(false).RightDockable(false).DestroyOnClose());
+
+                break;
+            }
+        case wxAUI_DOCK_RIGHT:
+        case wxAUI_DOCK_CENTER:
+            {
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Right().TopDockable(false).
+                    LeftDockable(false).BottomDockable(false).DestroyOnClose());
+                break;
+            }
+        }
+
+        // mark ourselves minimized
+        paneInfo.Minimize();
+        paneInfo.Show(false);
+        m_has_minimized = true;
+        // last, hide the window
+        if (paneInfo.window && paneInfo.window->IsShown())
+            paneInfo.window->Show(false);
+    }
+    Update();
+}
+
+void wxAuiManager::OnRestoreMinimizedPane(wxAuiManagerEvent& evt)
+{
+    wxAuiPaneInfo& pane = *(evt.pane);
+    if (pane.IsOk())
+    {
+        RestoreMinimizedPane(pane);
+        evt.Veto();
+    }
+}
+
+void wxAuiManager::RestoreMinimizedPane(wxAuiPaneInfo& paneInfo)
+{
+    wxString panename = paneInfo.name;
+    panename = panename.Left(panename.Length()-4);
+    wxAuiPaneInfo pane = GetPane(panename);
+    if (pane.IsOk())
+    {
+        ShowPane(pane.window);
+        pane.window->Show();
+        pane.Show(true);
+        m_has_minimized = false;
+        paneInfo.window->Show(false);
+        ClosePane(paneInfo);
+        Update();
+    }
+}
+
 #endif // wxUSE_AUI

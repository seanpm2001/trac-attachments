Index: include/wx/aui/dockart.h
===================================================================
--- include/wx/aui/dockart.h	(revision 56760)
+++ include/wx/aui/dockart.h	(working copy)
@@ -144,10 +144,12 @@
     wxBitmap m_inactive_close_bitmap;
     wxBitmap m_inactive_pin_bitmap;
     wxBitmap m_inactive_maximize_bitmap;
+    wxBitmap m_inactive_minimize_bitmap;
     wxBitmap m_inactive_restore_bitmap;
     wxBitmap m_active_close_bitmap;
     wxBitmap m_active_pin_bitmap;
     wxBitmap m_active_maximize_bitmap;
+    wxBitmap m_active_minimize_bitmap;
     wxBitmap m_active_restore_bitmap;
     wxPen m_gripper_pen1;
     wxPen m_gripper_pen2;
Index: include/wx/aui/framemanager.h
===================================================================
--- include/wx/aui/framemanager.h	(revision 56760)
+++ include/wx/aui/framemanager.h	(working copy)
@@ -240,6 +240,7 @@
     bool IsMovable() const { return HasFlag(optionMovable); }
     bool IsDestroyOnClose() const { return HasFlag(optionDestroyOnClose); }
     bool IsMaximized() const { return HasFlag(optionMaximized); }
+    bool IsMinimized() const { return HasFlag(optionMinimized); }
     bool HasCaption() const { return HasFlag(optionCaption); }
     bool HasGripper() const { return HasFlag(optionGripper); }
     bool HasBorder() const { return HasFlag(optionPaneBorder); }
@@ -283,6 +284,7 @@
     wxAuiPaneInfo& Show(bool show = true) { return SetFlag(optionHidden, !show); }
     wxAuiPaneInfo& CaptionVisible(bool visible = true) { return SetFlag(optionCaption, visible); }
     wxAuiPaneInfo& Maximize() { return SetFlag(optionMaximized, true); }
+    wxAuiPaneInfo& Minimize() { return SetFlag(optionMinimized, true); }
     wxAuiPaneInfo& Restore() { return SetFlag(optionMaximized, false); }
     wxAuiPaneInfo& PaneBorder(bool visible = true) { return SetFlag(optionPaneBorder, visible); }
     wxAuiPaneInfo& Gripper(bool visible = true) { return SetFlag(optionGripper, visible); }
@@ -377,6 +379,7 @@
         optionGripperTop      = 1 << 15,
         optionMaximized       = 1 << 16,
         optionDockFixed       = 1 << 17,
+        optionMinimized       = 1 << 18,
 
         buttonClose           = 1 << 21,
         buttonMaximize        = 1 << 22,
@@ -446,6 +449,7 @@
     wxAuiPaneInfo& GetPane(wxWindow* window);
     wxAuiPaneInfo& GetPane(const wxString& name);
     wxAuiPaneInfoArray& GetAllPanes();
+    void ShowPane(wxWindow *window, bool show = true);
 
     bool AddPane(wxWindow* window,
                  const wxAuiPaneInfo& pane_info);
@@ -478,6 +482,8 @@
     void MaximizePane(wxAuiPaneInfo& pane_info);
     void RestorePane(wxAuiPaneInfo& pane_info);
     void RestoreMaximizedPane();
+    void MinimizePane(wxAuiPaneInfo& paneInfo);
+    void RestoreMinimizedPane(wxAuiPaneInfo& paneInfo);
 
 public:
 
@@ -582,6 +588,7 @@
     void OnChildFocus(wxChildFocusEvent& evt);
     void OnHintFadeTimer(wxTimerEvent& evt);
     void OnFindManager(wxAuiManagerEvent& evt);
+    void OnRestoreMinimizedPane(wxAuiManagerEvent& event);
 
 protected:
 
@@ -617,6 +624,7 @@
     wxPoint m_last_mouse_move;   // last mouse move position (see OnMotion)
     bool m_skipping;
     bool m_has_maximized;
+    bool m_has_minimized;
 
     double m_dock_constraint_x;  // 0.0 .. 1.0; max pct of window width a dock can consume
     double m_dock_constraint_y;  // 0.0 .. 1.0; max pct of window height a dock can consume
@@ -807,6 +815,8 @@
 extern WXDLLIMPEXP_AUI const wxEventType wxEVT_AUI_PANE_RESTORE;
 extern WXDLLIMPEXP_AUI const wxEventType wxEVT_AUI_RENDER;
 extern WXDLLIMPEXP_AUI const wxEventType wxEVT_AUI_FIND_MANAGER;
+extern WXDLLIMPEXP_AUI const wxEventType wxEVT_AUI_PANE_MINIMIZE;
+extern WXDLLIMPEXP_AUI const wxEventType wxEVT_AUI_PANE_MIN_RESTORE;
 
 typedef void (wxEvtHandler::*wxAuiManagerEventFunction)(wxAuiManagerEvent&);
 
@@ -825,6 +835,10 @@
    wx__DECLARE_EVT0(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(func))
 #define EVT_AUI_FIND_MANAGER(func) \
    wx__DECLARE_EVT0(wxEVT_AUI_FIND_MANAGER, wxAuiManagerEventHandler(func))
+#define EVT_AUI_PANE_MINIMIZE(func) \
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_MINIMIZE, wxAuiManagerEventHandler(func))
+#define EVT_AUI_PANE_MIN_RESTORE(func) \
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_MIN_RESTORE, wxAuiManagerEventHandler(func))
 
 #else
 
@@ -834,6 +848,8 @@
 %constant wxEventType wxEVT_AUI_PANE_RESTORE;
 %constant wxEventType wxEVT_AUI_RENDER;
 %constant wxEventType wxEVT_AUI_FIND_MANAGER;
+%constant wxEventType wxEVT_AUI_PANE_MINIMIZE;
+%constant wxEventType wxEVT_AUI_PANE_MIN_RESTORE;
 
 %pythoncode {
     EVT_AUI_PANE_BUTTON = wx.PyEventBinder( wxEVT_AUI_PANE_BUTTON )
@@ -842,6 +858,8 @@
     EVT_AUI_PANE_RESTORE = wx.PyEventBinder( wxEVT_AUI_PANE_RESTORE )
     EVT_AUI_RENDER = wx.PyEventBinder( wxEVT_AUI_RENDER )
     EVT_AUI_FIND_MANAGER = wx.PyEventBinder( wxEVT_AUI_FIND_MANAGER )
+    EVT_AUI_PANE_MINIMIZE = wx.PyEventBinder( wxEVT_AUI_PANE_MINIMIZE )
+    EVT_AUI_PANE_MIN_RESTORE = wx.PyEventBinder( wxEVT_AUI_PANE_MIN_RESTORE )
 }
 #endif // SWIG
 
Index: include/wx/aui/restore.xpm
===================================================================
--- include/wx/aui/restore.xpm	(revision 0)
+++ include/wx/aui/restore.xpm	(revision 0)
@@ -0,0 +1,21 @@
+/* XPM */
+static char * restore_xpm[] = {
+"16 15 3 1",
+" 	c None",
+".	c #000000",
+"+	c #FFFFFF",
+"                ",
+"     .......... ",
+"     .++++++++. ",
+"     .......... ",
+"     .++++++++. ",
+" ..........+++. ",
+" .++++++++.+++. ",
+" ..........+++. ",
+" .++++++++..... ",
+" .++++++++.     ",
+" .++++++++.     ",
+" .++++++++.     ",
+" .++++++++.     ",
+" ..........     ",
+"                "};
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 56760)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -854,17 +854,17 @@
     // add a bunch of panes
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test1")).Caption(wxT("Pane Caption")).
-                  Top());
+                  Top().MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test2")).Caption(wxT("Client Size Reporter")).
                   Bottom().Position(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test3")).Caption(wxT("Client Size Reporter")).
                   Bottom().
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test4")).Caption(wxT("Pane Caption")).
@@ -877,54 +877,54 @@
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test6")).Caption(wxT("Client Size Reporter")).
                   Right().Row(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test7")).Caption(wxT("Client Size Reporter")).
                   Left().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
                   Name(wxT("test8")).Caption(wxT("Tree Pane")).
                   Left().Layer(1).Position(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test9")).Caption(wxT("Min Size 200x100")).
                   BestSize(wxSize(200,100)).MinSize(wxSize(200,100)).
                   Bottom().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
 
     wxWindow* wnd10 = CreateTextCtrl(wxT("This pane will prompt the user before hiding."));
     m_mgr.AddPane(wnd10, wxAuiPaneInfo().
                   Name(wxT("test10")).Caption(wxT("Text Pane with Hide Prompt")).
-                  Bottom().Layer(1).Position(1));
+                  Bottom().Layer(1).Position(1).MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Name(wxT("test11")).Caption(wxT("Fixed Pane")).
-                  Bottom().Layer(1).Position(2).Fixed());
+                  Bottom().Layer(1).Position(2).Fixed().MinimizeButton(true));
 
 
     m_mgr.AddPane(new SettingsPanel(this,this), wxAuiPaneInfo().
                   Name(wxT("settings")).Caption(wxT("Dock Manager Settings")).
-                  Dockable(false).Float().Hide());
+                  Dockable(false).Float().Hide().MinimizeButton(true));
 
     // create some center panes
 
     m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().Name(wxT("grid_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().Name(wxT("tree_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().Name(wxT("sizereport_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().Name(wxT("text_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().Name(wxT("html_content")).
-                  CenterPane().Hide());
+                  CenterPane().Hide().MinimizeButton(true));
 
     m_mgr.AddPane(CreateNotebook(), wxAuiPaneInfo().Name(wxT("notebook_content")).
                   CenterPane().PaneBorder(false));
@@ -1332,7 +1332,7 @@
     m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Tree Control")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(150,300)));
+                  FloatingSize(wxSize(150,300)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1341,7 +1341,7 @@
     m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().
                   Caption(wxT("Grid")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+                  FloatingSize(wxSize(300,200)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1350,7 +1350,7 @@
     m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().
                   Caption(wxT("HTML Control")).
                   Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+                  FloatingSize(wxSize(300,200)).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1360,7 +1360,7 @@
                   Caption(wxT("Notebook")).
                   Float().FloatingPosition(GetStartPosition()).
                   //FloatingSize(300,200).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1368,7 +1368,7 @@
 {
     m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Text Control")).
-                  Float().FloatingPosition(GetStartPosition()));
+                  Float().FloatingPosition(GetStartPosition()).MinimizeButton(true));
     m_mgr.Update();
 }
 
@@ -1377,7 +1377,7 @@
     m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
                   Caption(wxT("Client Size Reporter")).
                   Float().FloatingPosition(GetStartPosition()).
-                  CloseButton(true).MaximizeButton(true));
+                  CloseButton(true).MaximizeButton(true).MinimizeButton(true));
     m_mgr.Update();
 }
 
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 56760)
+++ src/aui/auibar.cpp	(working copy)
@@ -2389,10 +2389,35 @@
             }
             else
             {
-                wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->id);
-                e.SetEventObject(this);
-                ProcessEvent(e);
-                DoIdleUpdate();
+                if ( m_action_item->id == wxID_RESTORE_FRAME )
+                {
+                    // find aui manager
+                    wxAuiManager* manager = wxAuiManager::GetManager(this);
+
+                    if (!manager)
+                        return;
+
+                    wxAuiPaneInfo pane = manager->GetPane(this);
+                    if (pane.IsOk())
+                    {
+
+                        wxAuiManagerEvent e(wxEVT_AUI_PANE_MIN_RESTORE);
+
+                        e.SetManager(manager);
+                        e.SetPane(&pane);
+
+                        //manager->ProcessMgrEvent(e);
+                        manager->ProcessEvent(e);
+                        DoIdleUpdate();
+                    }
+                }
+                else
+                {
+                    wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->id);
+                    e.SetEventObject(this);
+                    ProcessEvent(e);
+                    DoIdleUpdate();
+                }
             }
         }
     }
Index: src/aui/dockart.cpp
===================================================================
--- src/aui/dockart.cpp	(revision 56760)
+++ src/aui/dockart.cpp	(working copy)
@@ -277,6 +277,11 @@
         0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0x07, 0xf0,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
 
+    static unsigned char minimize_bits[] = {
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xf7, 0xf7, 0x07, 0xf0,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+
     static unsigned char restore_bits[]={
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x1f, 0xf0, 0xdf, 0xf7,
         0x07, 0xf4, 0x07, 0xf4, 0xf7, 0xf5, 0xf7, 0xf1, 0xf7, 0xfd, 0xf7, 0xfd,
@@ -304,6 +309,14 @@
 #endif
 
 #ifdef __WXMAC__
+    m_inactive_minimize_bitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, *wxWHITE);
+    m_active_minimize_bitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, *wxWHITE );
+#else
+    m_inactive_minimize_bitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, m_inactive_caption_text_colour);
+    m_active_minimize_bitmap = wxAuiBitmapFromBits(minimize_bits, 16, 16, m_active_caption_text_colour);
+#endif
+
+#ifdef __WXMAC__
     m_inactive_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE);
     m_active_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE );
 #else
@@ -713,6 +726,12 @@
                     bmp = m_inactive_maximize_bitmap;
             }
             break;
+     case wxAUI_BUTTON_MINIMIZE:
+        if (pane.state & wxAuiPaneInfo::optionActive)
+            bmp = m_active_minimize_bitmap;
+        else
+            bmp = m_inactive_minimize_bitmap;
+        break;
     }
 
 
Index: src/aui/framemanager.cpp
===================================================================
--- src/aui/framemanager.cpp	(revision 56760)
+++ src/aui/framemanager.cpp	(working copy)
@@ -31,6 +31,8 @@
 #include "wx/aui/tabmdi.h"
 #include "wx/aui/auibar.h"
 
+#include "wx/aui/restore.xpm"
+
 #ifndef WX_PRECOMP
     #include "wx/panel.h"
     #include "wx/settings.h"
@@ -60,6 +62,8 @@
 DEFINE_EVENT_TYPE(wxEVT_AUI_PANE_RESTORE)
 DEFINE_EVENT_TYPE(wxEVT_AUI_RENDER)
 DEFINE_EVENT_TYPE(wxEVT_AUI_FIND_MANAGER)
+DEFINE_EVENT_TYPE(wxEVT_AUI_PANE_MINIMIZE)
+DEFINE_EVENT_TYPE(wxEVT_AUI_PANE_MIN_RESTORE)
 
 #ifdef __WXMAC__
     // a few defines to avoid nameclashes
@@ -576,6 +580,7 @@
     EVT_CHILD_FOCUS(wxAuiManager::OnChildFocus)
     EVT_AUI_FIND_MANAGER(wxAuiManager::OnFindManager)
     EVT_TIMER(101, wxAuiManager::OnHintFadeTimer)
+    EVT_AUI_PANE_MIN_RESTORE(wxAuiManager::OnRestoreMinimizedPane)
 END_EVENT_TABLE()
 
 
@@ -589,6 +594,7 @@
     m_flags = flags;
     m_skipping = false;
     m_has_maximized = false;
+    m_has_minimized = false;
     m_frame = NULL;
     m_dock_constraint_x = 0.3;
     m_dock_constraint_y = 0.3;
@@ -942,6 +948,30 @@
 }
 
 
+void wxAuiManager::ShowPane(wxWindow *window,bool show)
+{
+    wxAuiPaneInfo &p = GetPane(window);
+    if (p.IsOk())
+    {
+/*        if (p.IsNotebookPage())
+        {
+            if (show)
+            {
+                wxAuiNotebook* notebook = m_notebooks[p.notebook_id];
+                int id = notebook->GetPageIndex(p.window);
+                if (id >= 0)
+                    notebook->SetSelection(id);
+                ShowPane(notebook,true);
+            }
+        }
+        else*/
+            p.Show(show);
+        if (p.frame)
+            p.frame->Raise();
+        Update();
+    }
+}
+
 bool wxAuiManager::AddPane(wxWindow* window, const wxAuiPaneInfo& pane_info)
 {
     wxASSERT_MSG(window, wxT("NULL window ptrs are not allowed"));
@@ -993,6 +1023,13 @@
     if (pinfo.dock_proportion == 0)
         pinfo.dock_proportion = 100000;
 
+    if (pinfo.HasMinimizeButton())
+    {
+        wxAuiPaneButton button;
+        button.button_id = wxAUI_BUTTON_MINIMIZE;
+        pinfo.buttons.Add(button);
+    }
+
     if (pinfo.HasMaximizeButton())
     {
         wxAuiPaneButton button;
@@ -1312,6 +1349,7 @@
     // mark ourselves non-maximized
     pane_info.Restore();
     m_has_maximized = false;
+    m_has_minimized = false;
 
     // last, show the window
     if (pane_info.window && !pane_info.window->IsShown())
@@ -4550,6 +4588,126 @@
                 pane.Float();
         Update();
     }
+    //mn this performs the minimizing of a pane
+    else if (evt.button == wxAUI_BUTTON_MINIMIZE)
+    {
+        // fire pane close event
+        wxAuiManagerEvent e(wxEVT_AUI_PANE_MINIMIZE);
+        e.SetManager(this);
+        e.SetPane(evt.pane);
+        ProcessMgrEvent(e);
+
+        if (!e.GetVeto())
+        {
+            MinimizePane(pane);
+            Update();
+        }
+    }
 }
 
+void wxAuiManager::MinimizePane(wxAuiPaneInfo& paneInfo)
+{
+    if(!paneInfo.IsToolbar())
+    {
+
+        /*
+        Basically the idea is this.
+
+        1) create a toolbar, with a restore button 
+
+        2) place the new toolbar in the toolbar area representative of the location of the pane 
+        (NORTH/SOUTH/EAST/WEST, central area always to the right)
+
+        3) Hide the minimizing pane 
+        */
+
+        // Create a new toolbar
+        // give it the same name as the minimized pane with _min appended
+
+        wxAuiToolBar* minimize_toolbar = new wxAuiToolBar(GetManagedWindow(), wxID_ANY, wxDefaultPosition, wxDefaultSize,
+            wxAUI_TB_DEFAULT_STYLE);
+        minimize_toolbar->SetToolBitmapSize(wxSize(16,16));
+
+        minimize_toolbar->AddTool(wxID_RESTORE_FRAME, paneInfo.name, wxBitmap(restore_xpm), wxT("restore" + paneInfo.caption));
+        minimize_toolbar->Realize();
+        wxString* toolpanelname = new wxString();
+        toolpanelname->Append(paneInfo.name);
+        toolpanelname->Append(wxT("_min"));
+
+        // add the toolbars to the manager
+
+        switch(paneInfo.dock_direction)
+        {
+        case wxAUI_DOCK_TOP:
+            {	
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(*toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Top().BottomDockable(false).
+                    LeftDockable(false).RightDockable(false).DestroyOnClose());
+                break;
+            }
+		case wxAUI_DOCK_BOTTOM:
+            {
+                AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(*toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Bottom().TopDockable(false).
+                    LeftDockable(false).RightDockable(false).DestroyOnClose());
+                break;
+            }
+		case wxAUI_DOCK_LEFT:
+			{
+				AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(*toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Left().TopDockable(false).
+                    BottomDockable(false).RightDockable(false).DestroyOnClose());
+
+				break;
+			}
+		case wxAUI_DOCK_RIGHT:
+		case wxAUI_DOCK_CENTER:
+			{
+				AddPane(minimize_toolbar, wxAuiPaneInfo().
+                    Name(*toolpanelname).Caption(paneInfo.caption).
+                    ToolbarPane().Right().TopDockable(false).
+                    LeftDockable(false).BottomDockable(false).DestroyOnClose());
+				break;
+			}
+		}
+
+		// mark ourselves minimized
+		paneInfo.Minimize();
+		paneInfo.Show(false);
+		m_has_minimized = true;
+		// last, hide the window
+		if (paneInfo.window && paneInfo.window->IsShown())
+			paneInfo.window->Show(false);
+	}
+	Update();
+}
+
+void wxAuiManager::OnRestoreMinimizedPane(wxAuiManagerEvent& evt)
+{
+	wxAuiPaneInfo& pane = *(evt.pane);
+	RestoreMinimizedPane(pane);
+}
+
+void wxAuiManager::RestoreMinimizedPane(wxAuiPaneInfo& paneInfo)
+{
+	wxString panename = paneInfo.name;
+	panename = panename.Left(panename.Length()-4);
+	wxAuiPaneInfo pane = GetPane(panename);
+	if (pane.IsOk())
+	{
+		ShowPane(pane.window);
+		pane.window->Show();
+		pane.Show(true);
+		m_has_minimized = false;
+		paneInfo.window->Show(false);
+		DetachPane(paneInfo.window);
+		paneInfo.Show(false);
+		paneInfo.Hide();
+		Update();
+	}
+}
+
 #endif // wxUSE_AUI

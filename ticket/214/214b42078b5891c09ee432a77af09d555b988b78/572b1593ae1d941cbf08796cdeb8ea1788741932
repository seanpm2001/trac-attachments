Index: src/gtk/app.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/gtk/app.cpp,v
retrieving revision 1.145
diff -r1.145 app.cpp
39a40
> #include <gdk/gdkx.h>
337a339,341
>     
>     // this is NULL for a "regular" wxApp, but is set (and freed) by a wxGLApp
>     m_glVisualInfo = (void *) NULL;
357a362,379
>     // if this is a wxGLApp (derived from wxApp), and we've already
>     // chosen a specific visual, then derive the GdkVisual from that
>     if (m_glVisualInfo != NULL) {
> #ifdef __WXGTK20__
>         /* seems gtk_widget_set_default_visual no longer exists? */
>         GdkVisual* vis = gtk_widget_get_default_visual();
> #else
>         GdkVisual* vis = gdkx_visual_get( 
>             ((XVisualInfo *) m_glVisualInfo) ->visualid );
>         gtk_widget_set_default_visual( vis );
> #endif
> 
>         GdkColormap *colormap = gdk_colormap_new( vis, FALSE );
>         gtk_widget_set_default_colormap( colormap );
> 
>         visual = vis;
>     }
>     
362c384
<     if ((gdk_visual_get_best() != gdk_visual_get_system()) &&
---
>     else if ((gdk_visual_get_best() != gdk_visual_get_system()) &&
Index: src/gtk/glcanvas.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/gtk/glcanvas.cpp,v
retrieving revision 1.6
diff -r1.6 glcanvas.cpp
286d285
<     int data[512];
294a294,355
>     XVisualInfo *vi = NULL;
>     if (wxTheApp->m_glVisualInfo != NULL) {
>         vi = (XVisualInfo *) wxTheApp->m_glVisualInfo; 
>         m_canFreeVi = FALSE; // owned by wxTheApp - don't free upon destruction
>     } else {
>         vi = (XVisualInfo *) ChooseGLVisual(attribList);
>         m_canFreeVi = TRUE;
>     }
>     m_vi = vi;  // save for later use
>     
>     wxCHECK_MSG( m_vi, FALSE, "required visual couldn't be found" );
> 
>     GdkVisual *visual = gdkx_visual_get( vi->visualid );
>     GdkColormap *colormap = gdk_colormap_new( gdkx_visual_get(vi->visualid), TRUE );
>     
>     gtk_widget_push_colormap( colormap );
>     gtk_widget_push_visual( visual );
> 
>     wxScrolledWindow::Create( parent, id, pos, size, style, name );
> 
>     m_glWidget = m_wxwindow;
>     
>     gtk_pizza_set_clear( GTK_PIZZA(m_wxwindow), FALSE );
>     
>     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "realize",
>                             GTK_SIGNAL_FUNC(gtk_glwindow_realized_callback), (gpointer) this );
> 
>     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "map",
>                             GTK_SIGNAL_FUNC(gtk_glwindow_map_callback), (gpointer) this );
> 
>     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "expose_event",
>         GTK_SIGNAL_FUNC(gtk_glwindow_expose_callback), (gpointer)this );
> 
>     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "draw",
>         GTK_SIGNAL_FUNC(gtk_glwindow_draw_callback), (gpointer)this );
> 	
>     gtk_signal_connect( GTK_OBJECT(m_widget), "size_allocate",
>         GTK_SIGNAL_FUNC(gtk_glcanvas_size_callback), (gpointer)this );
> 
>     gtk_widget_pop_visual();
>     gtk_widget_pop_colormap();
>     
>     if (GTK_WIDGET_REALIZED(m_wxwindow))
>         gtk_glwindow_realized_callback( m_wxwindow, this );
>     
>     if (GTK_WIDGET_MAPPED(m_wxwindow))
>         gtk_glwindow_map_callback( m_wxwindow, this );
>     
>     return TRUE;
> }
> 
> wxGLCanvas::~wxGLCanvas()
> {
>     XVisualInfo *vi = (XVisualInfo *) m_vi;
>     
>     if (vi && m_canFreeVi) XFree( vi );
>     if (m_glContext) delete m_glContext;
> }
> 
> void* wxGLCanvas::ChooseGLVisual(int *attribList)
> {
>     int data[512];
358,408c419
<     XVisualInfo *vi = glXChooseVisual( dpy, DefaultScreen(dpy), attribList );
<     
<     m_vi = vi;  // safe for later use
<     
<     wxCHECK_MSG( m_vi, FALSE, "required visual couldn't be found" );
< 
<     GdkVisual *visual = gdkx_visual_get( vi->visualid );
<     GdkColormap *colormap = gdk_colormap_new( gdkx_visual_get(vi->visualid), TRUE );
<     
<     gtk_widget_push_colormap( colormap );
<     gtk_widget_push_visual( visual );
< 
<     wxScrolledWindow::Create( parent, id, pos, size, style, name );
< 
<     m_glWidget = m_wxwindow;
<     
<     gtk_pizza_set_clear( GTK_PIZZA(m_wxwindow), FALSE );
<     
<     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "realize",
<                             GTK_SIGNAL_FUNC(gtk_glwindow_realized_callback), (gpointer) this );
< 
<     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "map",
<                             GTK_SIGNAL_FUNC(gtk_glwindow_map_callback), (gpointer) this );
< 
<     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "expose_event",
<         GTK_SIGNAL_FUNC(gtk_glwindow_expose_callback), (gpointer)this );
< 
<     gtk_signal_connect( GTK_OBJECT(m_wxwindow), "draw",
<         GTK_SIGNAL_FUNC(gtk_glwindow_draw_callback), (gpointer)this );
< 	
<     gtk_signal_connect( GTK_OBJECT(m_widget), "size_allocate",
<         GTK_SIGNAL_FUNC(gtk_glcanvas_size_callback), (gpointer)this );
< 
<     gtk_widget_pop_visual();
<     gtk_widget_pop_colormap();
<     
<     if (GTK_WIDGET_REALIZED(m_wxwindow))
<         gtk_glwindow_realized_callback( m_wxwindow, this );
<     
<     if (GTK_WIDGET_MAPPED(m_wxwindow))
<         gtk_glwindow_map_callback( m_wxwindow, this );
<     
<     return TRUE;
< }
< 
< wxGLCanvas::~wxGLCanvas()
< {
<     XVisualInfo *vi = (XVisualInfo *) m_vi;
<     
<     if (vi) XFree( vi );
<     if (m_glContext) delete m_glContext;
---
>     return glXChooseVisual( dpy, DefaultScreen(dpy), attribList );
455a467,486
> }
> 
> 
> 
> //---------------------------------------------------------------------------
> // wxGLApp
> //---------------------------------------------------------------------------
> 
> IMPLEMENT_CLASS(wxGLApp, wxApp)
>         
> wxGLApp::~wxGLApp()
> {
>     if (m_glVisualInfo) XFree(m_glVisualInfo);
> }
> 
> bool wxGLApp::InitGLVisual(int *attribList)
> {
>     if (m_glVisualInfo) XFree(m_glVisualInfo);
>     m_glVisualInfo = wxGLCanvas::ChooseGLVisual(attribList);
>     return (m_glVisualInfo != NULL);
Index: include/wx/gtk/app.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/gtk/app.h,v
retrieving revision 1.30
diff -r1.30 app.h
35c35
<     ~wxApp();
---
>     virtual ~wxApp();
77a78,81
>     // used by the the wxGLApp and wxGLCanvas class for GL-based X visual 
>     // selection; this is actually an XVisualInfo*
>     void           *m_glVisualInfo;
>     
Index: include/wx/gtk/glcanvas.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/gtk/glcanvas.h,v
retrieving revision 1.2
diff -r1.2 glcanvas.h
19c19
< #include <wx/defs.h>
---
> #include "wx/defs.h"
23c23,24
< #include <wx/scrolwin.h>
---
> #include "wx/scrolwin.h"
> #include "wx/app.h"
26,28c27,29
< #include "GL/gl.h"
< #include "GL/glx.h"
< #include "GL/glu.h"
---
> #include <GL/gl.h>
> #include <GL/glx.h>
> #include <GL/glu.h>
103c104
< // wxGLContext
---
> // wxGLCanvas
164c165,166
<     void             *m_vi;
---
>     void             *m_vi; // actually an XVisualInfo*
>     bool              m_canFreeVi;
166a169,174
>     
>     // returns an XVisualInfo* based on desired GL attributes;
>     // returns NULL if an appropriate visual is not found. The
>     // caller is reponsible for using XFree() to deallocate 
>     // the returned structure.
>     static void* ChooseGLVisual(int *attribList);
171a180,200
> 
> 
> //---------------------------------------------------------------------------
> // wxGLApp
> //---------------------------------------------------------------------------
> 
> class WXDLLEXPORT wxGLApp: public wxApp
> {
> public:
>     wxGLApp() : wxApp() { }
>     ~wxGLApp();
>     
>     // use this in the constructor of the user-derived wxGLApp class to select
>     // an appropriate X visual for GL. Returns TRUE if an appropriate visual
>     // is found - and sets m_glVisualInfo; FALSE otherwise.
>     bool InitGLVisual(int *attribList);
>     
> private:
>     DECLARE_DYNAMIC_CLASS(wxGLApp)
> };
> 

 	  	 

Index: include/wx/generic/progdlgg.h
===================================================================
--- include/wx/generic/progdlgg.h	(revision 69933)
+++ include/wx/generic/progdlgg.h	(working copy)
@@ -19,6 +19,7 @@
 class WXDLLIMPEXP_FWD_CORE wxGauge;
 class WXDLLIMPEXP_FWD_CORE wxStaticText;
 class WXDLLIMPEXP_FWD_CORE wxWindowDisabler;
+class WXDLLIMPEXP_FWD_CORE wxGenericProgressSizer;
 
 /*
     Progress dialog which shows a moving progress bar.
@@ -49,6 +50,7 @@
     int GetValue() const;
     int GetRange() const;
     wxString GetMessage() const;
+    wxGenericProgressSizer* GetProgressSizer() const { return m_sizer; }
 
     void SetRange(int maximum);
 
@@ -73,6 +75,12 @@
         Dismissed            // was closed by user after finishing
     };
 
+    // Return the labels to use for showing the elapsed/estimated/remaining
+    // times respectively.
+    static wxString GetElapsedLabel() { return _("Elapsed time:"); }
+    static wxString GetEstimatedLabel() { return _("Estimated time:"); }
+    static wxString GetRemainingLabel() { return _("Remaining time:"); }
+
 protected:
     // Update just the m_maximum field, this is used by public SetRange() but,
     // unlike it, doesn't update the controls state. This makes it useful for
@@ -80,13 +88,6 @@
     // display progress.
     void SetMaximum(int maximum);
 
-    // Return the labels to use for showing the elapsed/estimated/remaining
-    // times respectively.
-    static wxString GetElapsedLabel() { return wxGetTranslation("Elapsed time:"); }
-    static wxString GetEstimatedLabel() { return wxGetTranslation("Estimated time:"); }
-    static wxString GetRemainingLabel() { return wxGetTranslation("Remaining time:"); }
-
-
     // Similar to wxWindow::HasFlag() but tests for a presence of a wxPD_XXX
     // flag in our (separate) flags instead of using m_windowStyle.
     bool HasPDFlag(int flag) const { return (m_pdStyle & flag) != 0; }
@@ -124,6 +125,8 @@
     // return the top level parent window of this dialog (may be NULL)
     wxWindow *GetTopParent() const { return m_parentTop; }
 
+    wxGenericProgressSizer* m_sizer;
+    wxGenericProgressSizer* m_native_sizer; // used by native wxProgressDialog
 
     // continue processing or not (return value for Update())
     State m_state;
@@ -137,27 +140,13 @@
     size_t m_factor;
 #endif // __WXMSW__
 
-    // time when the dialog was created
-    unsigned long m_timeStart;
     // time when the dialog was closed or cancelled
     unsigned long m_timeStop;
-    // time between the moment the dialog was closed/cancelled and resume
-    unsigned long m_break;
 
 private:
-    // update the label to show the given time (in seconds)
-    static void SetTimeLabel(unsigned long val, wxStaticText *label);
-
     // common part of all ctors
     void Init();
 
-    // create the label with given text and another one to show the time nearby
-    // as the next windows in the sizer, returns the created control
-    wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);
-
-    // updates the label message
-    void UpdateMessage(const wxString &newmsg);
-
     // common part of Update() and Pulse(), returns true if not cancelled
     bool DoBeforeUpdate(bool *skip);
 
@@ -171,15 +160,6 @@
     void DisableSkip() { EnableSkip(false); }
     void DisableAbort() { EnableAbort(false); }
 
-    // the widget displaying current status (may be NULL)
-    wxGauge *m_gauge;
-    // the message displayed
-    wxStaticText *m_msg;
-    // displayed elapsed, estimated, remaining time
-    wxStaticText *m_elapsed,
-                 *m_estimated,
-                 *m_remaining;
-
     // parent top level window (may be NULL)
     wxWindow *m_parentTop;
 
@@ -198,29 +178,90 @@
     wxButton *m_btnSkip;
 #endif
 
+    // for wxPD_APP_MODAL case
+    wxWindowDisabler *m_winDisabler;
+
+    // Temporary event loop created by the dialog itself if there is no
+    // currently active loop when it is created.
+    wxEventLoop *m_tempEventLoop;
+
+
+    DECLARE_EVENT_TABLE()
+    wxDECLARE_NO_COPY_CLASS(wxGenericProgressDialog);
+};
+
+class WXDLLIMPEXP_CORE wxGenericProgressSizer : public wxBoxSizer
+{
+public:
+    wxGenericProgressSizer();
+
+    virtual ~wxGenericProgressSizer();
+
+    bool Create(wxWindow* parent,
+                const wxString& message = wxEmptyString,
+                int maximum = 100,
+                int style = wxPD_APP_MODAL | wxPD_AUTO_HIDE);
+
+    bool Update(int value, const wxString& newmsg, int maximum);
+    void Pulse(const wxString& newmsg);
+
+    void Resume(unsigned long timeStop);
+
+    int GetValue() const;
+    wxString GetMessage() const;
+
+protected:
+    // time when the dialog was created
+    unsigned long m_timeStart;
+
+    // time between the moment the dialog was closed/cancelled and resume
+    unsigned long m_break;
+
     // saves the time when elapsed time was updated so there is only one
     // update per second
     unsigned long m_last_timeupdate;
 
+    // counts the confirmations
+    int m_ctdelay;
+    unsigned long m_display_estimated;
+
     // tells how often a change of the estimated time has to be confirmed
     // before it is actually displayed - this reduces the frequency of updates
     // of estimated and remaining time
     int m_delay;
 
-    // counts the confirmations
-    int m_ctdelay;
-    unsigned long m_display_estimated;
+    // the widget displaying current status (may be NULL)
+    wxGauge *m_gauge;
+    // the message displayed
+    wxStaticText *m_msg;
+    // displayed elapsed, estimated, remaining time
+    wxStaticText *m_elapsed,
+                 *m_estimated,
+                 *m_remaining;
 
-    // for wxPD_APP_MODAL case
-    wxWindowDisabler *m_winDisabler;
+    // create the label with given text and another one to show the time nearby
+    // as the next windows in the sizer, returns the created control
+    wxStaticText *CreateLabel(wxWindow* parent, const wxString& text, wxSizer *sizer);
 
-    // Temporary event loop created by the dialog itself if there is no
-    // currently active loop when it is created.
-    wxEventLoop *m_tempEventLoop;
+    // Updates estimated times from a given progress bar value and stores the
+    // results in provided arguments.
+    void UpdateTimeEstimates(int value,
+                             unsigned long &elapsedTime,
+                             unsigned long &estimatedTime,
+                             unsigned long &remainingTime,
+                             int maximum);
 
+private:
+    // updates the label message
+    void UpdateMessage(const wxString &newmsg);
 
-    DECLARE_EVENT_TABLE()
-    wxDECLARE_NO_COPY_CLASS(wxGenericProgressDialog);
+    // update the label to show the given time (in seconds)
+    static void SetTimeLabel(unsigned long val, wxStaticText *label);
+
+    // Converts seconds to HH:mm:ss format.
+    static wxString GetFormattedTime(unsigned long timeInSec);
+
+    friend class wxGenericProgressDialog;
 };
 
 #endif // __PROGDLGH_G__
Index: src/generic/progdlgg.cpp
===================================================================
--- src/generic/progdlgg.cpp	(revision 69933)
+++ src/generic/progdlgg.cpp	(working copy)
@@ -95,21 +95,15 @@
     // Initialize all our members that we always use (even when we don't
     // create a valid window in this class).
 
+    m_sizer = NULL;
+    m_native_sizer = NULL;
     m_pdStyle = 0;
     m_parentTop = NULL;
 
-    m_gauge = NULL;
-    m_msg = NULL;
-    m_elapsed =
-    m_estimated =
-    m_remaining = NULL;
-
     m_state = Uncancelable;
     m_maximum = 0;
 
-    m_timeStart = wxGetCurrentTime();
     m_timeStop = (unsigned long)-1;
-    m_break = 0;
 
     m_skip = false;
 
@@ -118,14 +112,10 @@
     m_btnSkip = NULL;
 #endif
 
-    m_display_estimated =
-    m_last_timeupdate =
-    m_ctdelay = 0;
-
-    m_delay = 3;
-
     m_winDisabler = NULL;
     m_tempEventLoop = NULL;
+
+    SetWindowStyle(wxDEFAULT_DIALOG_STYLE);
 }
 
 wxGenericProgressDialog::wxGenericProgressDialog()
@@ -158,7 +148,7 @@
     wxWindow* const
         realParent = GetParentForModalDialog(parent, GetWindowStyle());
 
-    if (!wxDialog::Create(realParent, wxID_ANY, title))
+    if (!wxDialog::Create(realParent, wxID_ANY, title, wxDefaultPosition, wxDefaultSize, GetWindowStyle()))
         return false;
 
     SetMaximum(maximum);
@@ -194,63 +184,13 @@
     // top-level sizerTop
     wxSizer * const sizerTop = new wxBoxSizer(wxVERTICAL);
 
-    m_msg = new wxStaticText(this, wxID_ANY, message);
-    sizerTop->Add(m_msg, 0, wxLEFT | wxTOP, 2*LAYOUT_MARGIN);
-
-    int gauge_style = wxGA_HORIZONTAL;
-    if ( style & wxPD_SMOOTH )
-        gauge_style |= wxGA_SMOOTH;
-
 #ifdef __WXMSW__
     maximum /= m_factor;
 #endif
+    m_sizer = new wxGenericProgressSizer();
+    if (!m_sizer->Create(this, message, maximum, style))
+        return false;
 
-    m_gauge = new wxGauge
-                  (
-                    this,
-                    wxID_ANY,
-                    maximum,
-                    wxDefaultPosition,
-                    // make the progress bar sufficiently long
-                    wxSize(wxMin(wxGetClientDisplayRect().width/3, 300), -1),
-                    gauge_style
-                  );
-
-    sizerTop->Add(m_gauge, 0, wxLEFT | wxRIGHT | wxTOP | wxEXPAND, 2*LAYOUT_MARGIN);
-    m_gauge->SetValue(0);
-
-    // create the estimated/remaining/total time zones if requested
-    m_elapsed =
-    m_estimated =
-    m_remaining = NULL;
-
-    // also count how many labels we really have
-    size_t nTimeLabels = 0;
-
-    wxSizer * const sizerLabels = new wxFlexGridSizer(2);
-
-    if ( style & wxPD_ELAPSED_TIME )
-    {
-        nTimeLabels++;
-
-        m_elapsed = CreateLabel(GetElapsedLabel(), sizerLabels);
-    }
-
-    if ( style & wxPD_ESTIMATED_TIME )
-    {
-        nTimeLabels++;
-
-        m_estimated = CreateLabel(GetEstimatedLabel(), sizerLabels);
-    }
-
-    if ( style & wxPD_REMAINING_TIME )
-    {
-        nTimeLabels++;
-
-        m_remaining = CreateLabel(GetRemainingLabel(), sizerLabels);
-    }
-    sizerTop->Add(sizerLabels, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
-
 #if defined(__SMARTPHONE__)
     if ( HasPDFlag(wxPD_CAN_SKIP) )
         SetRightMenu(wxID_SKIP, _("Skip"));
@@ -288,6 +228,7 @@
     if ( !HasPDFlag(wxPD_CAN_SKIP | wxPD_CAN_ABORT) )
         buttonSizer->AddSpacer(LAYOUT_MARGIN);
 
+    sizerTop->Add(m_sizer, 0, wxEXPAND, LAYOUT_MARGIN);
     sizerTop->Add(buttonSizer, 0, sizerFlags, LAYOUT_MARGIN );
 #endif // __SMARTPHONE__/!__SMARTPHONE__
 
@@ -303,9 +244,9 @@
     // this one can be initialized even if the others are unknown for now
     //
     // NB: do it after calling Layout() to keep the labels correctly aligned
-    if ( m_elapsed )
+    if ( m_sizer->m_elapsed )
     {
-        SetTimeLabel(0, m_elapsed);
+        wxGenericProgressSizer::SetTimeLabel(0, m_sizer->m_elapsed);
     }
 
     Update();
@@ -317,99 +258,27 @@
                                                   unsigned long &estimatedTime,
                                                   unsigned long &remainingTime)
 {
-    unsigned long elapsed = wxGetCurrentTime() - m_timeStart;
-    if ( value != 0 && (m_last_timeupdate < elapsed || value == m_maximum) )
+    if (m_sizer)
     {
-        m_last_timeupdate = elapsed;
-        unsigned long estimated = m_break +
-                (unsigned long)(( (double) (elapsed-m_break) * m_maximum ) / ((double)value)) ;
-        if (    estimated > m_display_estimated
-                && m_ctdelay >= 0
-            )
-        {
-            ++m_ctdelay;
-        }
-        else if (    estimated < m_display_estimated
-                    && m_ctdelay <= 0
-                )
-        {
-            --m_ctdelay;
-        }
-        else
-        {
-            m_ctdelay = 0;
-        }
-        if (    m_ctdelay >= m_delay          // enough confirmations for a higher value
-                || m_ctdelay <= (m_delay*-1)     // enough confirmations for a lower value
-                || value == m_maximum            // to stay consistent
-                || elapsed > m_display_estimated // to stay consistent
-                || ( elapsed > 0 && elapsed < 4 ) // additional updates in the beginning
-            )
-        {
-            m_display_estimated = estimated;
-            m_ctdelay = 0;
-        }
+        m_sizer->UpdateTimeEstimates(value, elapsedTime, estimatedTime, remainingTime, m_maximum);
     }
-
-    if ( value != 0 )
+    else
     {
-        long display_remaining = m_display_estimated - elapsed;
-        if ( display_remaining < 0 )
+        // called from native wxProgressDialog
+        if (m_native_sizer == NULL)
         {
-            display_remaining = 0;
+            m_native_sizer = new wxGenericProgressSizer();
         }
-
-        estimatedTime = m_display_estimated;
-        remainingTime = display_remaining;
+        m_native_sizer->UpdateTimeEstimates(value, elapsedTime, estimatedTime, remainingTime, m_maximum);
     }
-
-    elapsedTime = elapsed;
 }
 
 // static
 wxString wxGenericProgressDialog::GetFormattedTime(unsigned long timeInSec)
 {
-    wxString timeAsHMS;
-
-    if ( timeInSec == (unsigned long)-1 )
-    {
-        timeAsHMS = _("Unknown");
-    }
-    else
-    {
-        unsigned hours = timeInSec / 3600;
-        unsigned minutes = (timeInSec % 3600) / 60;
-        unsigned seconds = timeInSec % 60;
-        timeAsHMS.Printf("%u:%02u:%02u", hours, minutes, seconds);
-    }
-
-    return timeAsHMS;
+    return wxGenericProgressSizer::GetFormattedTime(timeInSec);
 }
 
-wxStaticText *
-wxGenericProgressDialog::CreateLabel(const wxString& text, wxSizer *sizer)
-{
-    wxStaticText *label = new wxStaticText(this, wxID_ANY, text);
-    wxStaticText *value = new wxStaticText(this, wxID_ANY, _("unknown"));
-
-    // select placement most native or nice on target GUI
-#if defined(__SMARTPHONE__)
-    // value and time to the left in two rows
-    sizer->Add(label, 1, wxALIGN_LEFT);
-    sizer->Add(value, 1, wxALIGN_LEFT);
-#elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
-    // value and time centered in one row
-    sizer->Add(label, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT) | wxTOP | wxRIGHT, LAYOUT_MARGIN);
-    sizer->Add(value, 1, wxALIGN_LEFT | wxTOP, LAYOUT_MARGIN);
-#else
-    // value and time to the right in one row
-    sizer->Add(label);
-    sizer->Add(value, 0, wxLEFT, LAYOUT_MARGIN);
-#endif
-
-    return value;
-}
-
 // ----------------------------------------------------------------------------
 // wxGenericProgressDialog operations
 // ----------------------------------------------------------------------------
@@ -420,35 +289,12 @@
     if ( !DoBeforeUpdate(skip) )
         return false;
 
-    wxCHECK_MSG( m_gauge, false, "dialog should be fully created" );
-
 #ifdef __WXMSW__
     value /= m_factor;
 #endif // __WXMSW__
 
-    wxASSERT_MSG( value <= m_maximum, wxT("invalid progress value") );
-
-    m_gauge->SetValue(value);
-
-    UpdateMessage(newmsg);
-
-    if ( (m_elapsed || m_remaining || m_estimated) && (value != 0) )
+    if ( m_sizer->Update(value, newmsg, m_maximum) )
     {
-        unsigned long elapsed;
-        unsigned long display_remaining;
-
-        UpdateTimeEstimates( value,
-                             elapsed,
-                             m_display_estimated,
-                             display_remaining );
-
-        SetTimeLabel(elapsed, m_elapsed);
-        SetTimeLabel(m_display_estimated, m_estimated);
-        SetTimeLabel(display_remaining, m_remaining);
-    }
-
-    if ( value == m_maximum )
-    {
         if ( m_state == Finished )
         {
             // ignore multiple calls to Update(m_maximum): it may sometimes be
@@ -472,7 +318,7 @@
             if ( newmsg.empty() )
             {
                 // also provide the finishing message if the application didn't
-                m_msg->SetLabel(_("Done."));
+                m_sizer->m_msg->SetLabel(_("Done."));
             }
 
             // allow the window to repaint:
@@ -511,22 +357,8 @@
     if ( !DoBeforeUpdate(skip) )
         return false;
 
-    wxCHECK_MSG( m_gauge, false, "dialog should be fully created" );
+    m_sizer->Pulse(newmsg);
 
-    // show a bit of progress
-    m_gauge->Pulse();
-
-    UpdateMessage(newmsg);
-
-    if (m_elapsed || m_remaining || m_estimated)
-    {
-        unsigned long elapsed = wxGetCurrentTime() - m_timeStart;
-
-        SetTimeLabel(elapsed, m_elapsed);
-        SetTimeLabel((unsigned long)-1, m_estimated);
-        SetTimeLabel((unsigned long)-1, m_remaining);
-    }
-
     DoAfterUpdate();
 
     return m_state != Canceled;
@@ -563,8 +395,10 @@
 void wxGenericProgressDialog::Resume()
 {
     m_state = Continue;
-    m_ctdelay = m_delay; // force an update of the elapsed/estimated/remaining time
-    m_break += wxGetCurrentTime()-m_timeStop;
+    if (m_sizer) // may be called from native wxProgressDialog
+    {
+        m_sizer->Resume(m_timeStop);
+    }
 
     EnableAbort();
     EnableSkip();
@@ -584,9 +418,7 @@
 
 int wxGenericProgressDialog::GetValue() const
 {
-    wxCHECK_MSG( m_gauge, -1, "dialog should be fully created" );
-
-    return m_gauge->GetValue();
+    return m_sizer->GetValue();
 }
 
 int wxGenericProgressDialog::GetRange() const
@@ -596,16 +428,16 @@
 
 wxString wxGenericProgressDialog::GetMessage() const
 {
-    return m_msg->GetLabel();
+    return m_sizer->GetMessage();
 }
 
 void wxGenericProgressDialog::SetRange(int maximum)
 {
-    wxCHECK_RET( m_gauge, "dialog should be fully created" );
+    wxCHECK_RET( m_sizer->m_gauge, wxT("dialog should be fully created") );
 
-    wxCHECK_RET( maximum > 0, "Invalid range" );
+    wxCHECK_RET( maximum > 0, wxT("Invalid range") );
 
-    m_gauge->SetRange(maximum);
+    m_sizer->m_gauge->SetRange(maximum);
 
     SetMaximum(maximum);
 }
@@ -632,28 +464,6 @@
     return HasPDFlag(wxPD_CAN_SKIP) && m_skip;
 }
 
-// static
-void wxGenericProgressDialog::SetTimeLabel(unsigned long val,
-                                           wxStaticText *label)
-{
-    if ( label )
-    {
-        wxString s;
-
-        if (val != (unsigned long)-1)
-        {
-            s = GetFormattedTime(val);
-        }
-        else
-        {
-            s = _("Unknown");
-        }
-
-        if ( s != label->GetLabel() )
-            label->SetLabel(s);
-    }
-}
-
 // ----------------------------------------------------------------------------
 // event handlers
 // ----------------------------------------------------------------------------
@@ -725,6 +535,7 @@
         wxEventLoopBase::SetActive(NULL);
         delete m_tempEventLoop;
     }
+    delete m_native_sizer;
 }
 
 void wxGenericProgressDialog::DisableOtherWindows()
@@ -806,8 +617,192 @@
     }
 }
 
-void wxGenericProgressDialog::UpdateMessage(const wxString &newmsg)
+// ----------------------------------------------------------------------------
+// wxGenericProgressSizer creation
+// ----------------------------------------------------------------------------
+
+wxGenericProgressSizer::wxGenericProgressSizer() : wxBoxSizer(wxVERTICAL)
 {
+    m_gauge = NULL;
+    m_msg = NULL;
+
+    m_display_estimated =
+    m_last_timeupdate =
+    m_ctdelay = 0;
+
+    m_elapsed =
+    m_estimated =
+    m_remaining = NULL;
+
+    m_timeStart = wxGetCurrentTime();
+    m_break = 0;
+
+    m_delay = 3;
+}
+
+bool wxGenericProgressSizer::Create(wxWindow* parent,
+                                    const wxString& message,
+                                    int maximum,
+                                    int style)
+{
+    m_msg = new wxStaticText(parent, wxID_ANY, message);
+    Add(m_msg, 0, wxLEFT | wxTOP, 2*LAYOUT_MARGIN);
+
+    int gauge_style = wxGA_HORIZONTAL;
+    if ( style & wxPD_SMOOTH )
+        gauge_style |= wxGA_SMOOTH;
+
+    m_gauge = new wxGauge
+                  (
+                    parent,
+                    wxID_ANY,
+                    maximum,
+                    wxDefaultPosition,
+                    // make the progress bar sufficiently long
+                    wxSize(wxMin(wxGetClientDisplayRect().width/3, 300), -1),
+                    gauge_style
+                  );
+
+    Add(m_gauge, 0, wxLEFT | wxRIGHT | wxTOP | wxEXPAND, 2*LAYOUT_MARGIN);
+    m_gauge->SetValue(0);
+
+    // create the estimated/remaining/total time zones if requested
+    m_elapsed =
+    m_estimated =
+    m_remaining = NULL;
+
+    // also count how many labels we really have
+    size_t nTimeLabels = 0;
+
+    wxSizer * const sizerLabels = new wxFlexGridSizer(2);
+
+    if ( style & wxPD_ELAPSED_TIME )
+    {
+        nTimeLabels++;
+
+        m_elapsed = CreateLabel(parent, wxGenericProgressDialog::GetElapsedLabel(), sizerLabels);
+    }
+
+    if ( style & wxPD_ESTIMATED_TIME )
+    {
+        nTimeLabels++;
+
+        m_estimated = CreateLabel(parent, wxGenericProgressDialog::GetEstimatedLabel(), sizerLabels);
+    }
+
+    if ( style & wxPD_REMAINING_TIME )
+    {
+        nTimeLabels++;
+
+        m_remaining = CreateLabel(parent, wxGenericProgressDialog::GetRemainingLabel(), sizerLabels);
+    }
+    Add(sizerLabels, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
+
+    return true;
+}
+
+wxStaticText *
+wxGenericProgressSizer::CreateLabel(wxWindow* parent, const wxString& text, wxSizer *sizer)
+{
+    wxStaticText *label = new wxStaticText(parent, wxID_ANY, text);
+    wxStaticText *value = new wxStaticText(parent, wxID_ANY, _("unknown"));
+
+    // select placement most native or nice on target GUI
+#if defined(__SMARTPHONE__)
+    // value and time to the left in two rows
+    sizer->Add(label, 1, wxALIGN_LEFT);
+    sizer->Add(value, 1, wxALIGN_LEFT);
+#elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
+    // value and time centered in one row
+    sizer->Add(label, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT) | wxTOP | wxRIGHT, LAYOUT_MARGIN);
+    sizer->Add(value, 1, wxALIGN_LEFT | wxTOP, LAYOUT_MARGIN);
+#else
+    // value and time to the right in one row
+    sizer->Add(label);
+    sizer->Add(value, 0, wxLEFT, LAYOUT_MARGIN);
+#endif
+
+    return value;
+}
+
+// ----------------------------------------------------------------------------
+// destruction
+// ----------------------------------------------------------------------------
+
+wxGenericProgressSizer::~wxGenericProgressSizer()
+{
+}
+
+// ----------------------------------------------------------------------------
+// wxGenericProgressSizer operations
+// ----------------------------------------------------------------------------
+
+bool wxGenericProgressSizer::Update(int value, const wxString& newmsg, int maximum)
+{
+    wxCHECK_MSG( m_gauge, false, wxT("dialog should be fully created") );
+    wxCHECK_MSG( value <= maximum, false, wxT("invalid progress value") );
+
+    m_gauge->SetValue(value);
+
+    UpdateMessage(newmsg);
+
+    if ( (m_elapsed || m_remaining || m_estimated) && (value != 0) )
+    {
+        unsigned long elapsed;
+        unsigned long display_remaining;
+
+        UpdateTimeEstimates( value,
+                             elapsed,
+                             m_display_estimated,
+                             display_remaining,
+                             maximum);
+
+        SetTimeLabel(elapsed, m_elapsed);
+        SetTimeLabel(m_display_estimated, m_estimated);
+        SetTimeLabel(display_remaining, m_remaining);
+    }
+    return (value == maximum);
+}
+
+void wxGenericProgressSizer::Pulse(const wxString& newmsg)
+{
+    wxCHECK_RET( m_gauge, wxT("dialog should be fully created") );
+
+    // show a bit of progress
+    m_gauge->Pulse();
+
+    UpdateMessage(newmsg);
+
+    if (m_elapsed || m_remaining || m_estimated)
+    {
+        unsigned long elapsed = wxGetCurrentTime() - m_timeStart;
+
+        SetTimeLabel(elapsed, m_elapsed);
+        SetTimeLabel((unsigned long)-1, m_estimated);
+        SetTimeLabel((unsigned long)-1, m_remaining);
+    }
+}
+
+int wxGenericProgressSizer::GetValue() const
+{
+    wxCHECK_MSG( m_gauge, -1, wxT("dialog should be fully created") );
+
+    return m_gauge->GetValue();
+}
+
+wxString wxGenericProgressSizer::GetMessage() const
+{
+    return m_msg->GetLabel();
+}
+
+void wxGenericProgressSizer::Resume(unsigned long timeStop)
+{
+    m_ctdelay = m_delay; // force an update of the elapsed/estimated/remaining time
+    m_break += wxGetCurrentTime()-timeStop;
+}
+
+void wxGenericProgressSizer::UpdateMessage(const wxString &newmsg)
+{
     if ( !newmsg.empty() && newmsg != m_msg->GetLabel() )
     {
         m_msg->SetLabel(newmsg);
@@ -819,4 +814,101 @@
     }
 }
 
+// static
+void wxGenericProgressSizer::SetTimeLabel(unsigned long val,
+                                          wxStaticText *label)
+{
+    if ( label )
+    {
+        wxString s;
+
+        if (val != (unsigned long)-1)
+        {
+            s = GetFormattedTime(val);
+        }
+        else
+        {
+            s = _("Unknown");
+        }
+
+        if ( s != label->GetLabel() )
+            label->SetLabel(s);
+    }
+}
+
+// static
+wxString wxGenericProgressSizer::GetFormattedTime(unsigned long timeInSec)
+{
+    wxString timeAsHMS;
+
+    if ( timeInSec == (unsigned long)-1 )
+    {
+        timeAsHMS = _("Unknown");
+    }
+    else
+    {
+        unsigned hours = timeInSec / 3600;
+        unsigned minutes = (timeInSec % 3600) / 60;
+        unsigned seconds = timeInSec % 60;
+        timeAsHMS.Printf(wxT("%u:%02u:%02u"), hours, minutes, seconds);
+    }
+
+    return timeAsHMS;
+}
+
+void wxGenericProgressSizer::UpdateTimeEstimates(int value,
+                                                  unsigned long &elapsedTime,
+                                                  unsigned long &estimatedTime,
+                                                  unsigned long &remainingTime,
+                                                  int maximum)
+{
+    unsigned long elapsed = wxGetCurrentTime() - m_timeStart;
+    if ( value != 0 && (m_last_timeupdate < elapsed || value == maximum) )
+    {
+        m_last_timeupdate = elapsed;
+        unsigned long estimated = m_break +
+                (unsigned long)(( (double) (elapsed-m_break) * maximum ) / ((double)value)) ;
+        if (    estimated > m_display_estimated
+                && m_ctdelay >= 0
+            )
+        {
+            ++m_ctdelay;
+        }
+        else if (    estimated < m_display_estimated
+                    && m_ctdelay <= 0
+                )
+        {
+            --m_ctdelay;
+        }
+        else
+        {
+            m_ctdelay = 0;
+        }
+        if (    m_ctdelay >= m_delay          // enough confirmations for a higher value
+                || m_ctdelay <= (m_delay*-1)     // enough confirmations for a lower value
+                || value == maximum            // to stay consistent
+                || elapsed > m_display_estimated // to stay consistent
+                || ( elapsed > 0 && elapsed < 4 ) // additional updates in the beginning
+            )
+        {
+            m_display_estimated = estimated;
+            m_ctdelay = 0;
+        }
+    }
+
+    if ( value != 0 )
+    {
+        long display_remaining = m_display_estimated - elapsed;
+        if ( display_remaining < 0 )
+        {
+            display_remaining = 0;
+        }
+
+        estimatedTime = m_display_estimated;
+        remainingTime = display_remaining;
+    }
+
+    elapsedTime = elapsed;
+}
+
 #endif // wxUSE_PROGRESSDLG

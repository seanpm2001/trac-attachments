Index: docs/latex/wx/wxstring.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/wxstring.tex,v
retrieving revision 1.33
diff -b -u -2 -r1.33 wxstring.tex
--- docs/latex/wx/wxstring.tex	2003/02/02 22:21:28	1.33
+++ docs/latex/wx/wxstring.tex	2003/03/16 00:54:26
@@ -161,4 +161,8 @@
 converted to a number.
 
+Overloaded versions are also provided which return 0 if the string could not
+be converted to a number.  These are useful for embedding conversions into
+expressions.
+
 \helpref{ToLong}{wxstringtolong}\\
 \helpref{ToULong}{wxstringtoulong}\\
@@ -910,8 +914,12 @@
 
 \constfunc{bool}{ToDouble}{\param{double}{ *val}}
+\constfunc{double}{ToDouble}{}
 
 Attempts to convert the string to a floating point number. Returns true on
 success (the number is stored in the location pointed to by {\it val}) or false
-if the string does not represent such number.
+if the string does not represent a valid number.
+
+The overloaded version returns the converted value, or 0 if the string does not
+represent a valid number.
 
 \wxheading{See also}
@@ -923,4 +931,5 @@
 
 \constfunc{bool}{ToLong}{\param{long}{ *val}, \param{int }{base = $10$}}
+\constfunc{long}{ToLong}{\param{int }{base = $10$}}
 
 Attempts to convert the string to a signed integer in base {\it base}. Returns
@@ -929,4 +938,7 @@
 valid number in the given base.
 
+The overloaded version returns the converted value, or 0 if the string does not
+represent a valid number in the given base.
+
 The value of {\it base} must be comprised between $2$ and $36$, inclusive, or
 be a special value $0$ which means that the usual rules of {\tt C} numbers are
@@ -945,8 +957,12 @@
 
 \constfunc{bool}{ToULong}{\param{unsigned long}{ *val}, \param{int }{base = $10$}}
+\constfunc{unsigned long}{ToULong}{\param{int }{base = $10$}}
 
-Attempts to convert the string to a ansigned integer in base {\it base}.
+Attempts to convert the string to a a signed integer in base {\it base}.
 Returns {\tt true} on success in which case the number is stored in the
 location pointed to by {\it val} or {\tt false} if the string does not
+represent a valid number in the given base.
+
+The overloaded version returns the converted value, or 0 if the string does not
 represent a valid number in the given base.
 
Index: include/wx/string.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/string.h,v
retrieving revision 1.148
diff -b -u -2 -r1.148 string.h
--- include/wx/string.h	2003/01/26 00:12:07	1.148
+++ include/wx/string.h	2003/03/16 00:54:28
@@ -725,4 +725,10 @@
     bool ToDouble(double *val) const;
 
+    // convenience versions for embedding in expressions.
+    // all return 0 if the string is not a valid value.
+    long ToLong(int base = 10) const;
+    unsigned long ToULong(int base = 10) const;
+    double ToDouble() const;
+
   // formated input/output
     // as sprintf(), returns the number of characters written or < 0 on error
@@ -736,4 +742,9 @@
     // the same as above, but takes a va_list
   static wxString FormatV(const wxChar *pszFormat, va_list argptr);
+
+    // perl style 'shift' - useful for parsing lists of elements
+    // returns the left side of the string up to but not including Delim.
+    // removes the left side of the string up to and including Delim plus trailing whitespace.
+  wxString Shift( char Delim = wxT(',') );
 
   // raw access to string memory
Index: src/common/string.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/string.cpp,v
retrieving revision 1.168
diff -b -u -2 -r1.168 string.cpp
--- src/common/string.cpp	2003/01/07 16:49:22	1.168
+++ src/common/string.cpp	2003/03/16 00:54:32
@@ -1215,4 +1215,31 @@
 }
 
+long wxString::ToLong(int base) const
+{
+  long r;
+  if ( ToLong(&r, base) )
+    return r;
+  else
+    return 0;
+}
+
+unsigned long wxString::ToULong(int base) const
+{
+  unsigned long r;
+  if ( ToULong(&r, base) )
+    return r;
+  else
+    return 0;
+}
+
+double wxString::ToDouble() const
+{
+  double r;
+  if ( ToDouble(&r) )
+    return r;
+  else
+    return 0;
+}
+
 // ---------------------------------------------------------------------------
 // formatted output
@@ -1287,4 +1314,15 @@
 
     return Len();
+}
+
+  // perl style 'shift' - useful for parsing lists of elements
+  // returns the left side of the string up to but not including Delim.
+  // removes the left side of the string up to and including Delim plus trailing whitespace.
+wxString wxString::Shift( char Delim )
+{
+  wxString s = BeforeFirst(Delim);
+  *this = AfterFirst(Delim);
+  Trim(false);
+  return s;
 }
 

 	  	 

--- plot.py	Sat Jan 04 14:22:46 2014
+++ plot.py	Sun Aug 17 14:43:43 2014
@@ -115,7 +115,7 @@
 
 # Needs NumPy
 try:
-    import numpy.oldnumeric as _Numeric
+    import numpy as _Numeric
 except:
     msg= """
     This module requires the NumPy module, which could not be
@@ -125,6 +125,10 @@
     binaries."""
     raise ImportError, "NumPy not found.\n" + msg
 
+_Numeric.Float = _Numeric.float
+_Numeric.Float64 = _Numeric.float64
+_Numeric.Int32 = _Numeric.int32
+
 
 
 #
@@ -402,14 +406,14 @@
 
     def _triangle(self, dc, coords, size=1):
         shape= [(-2.5*size,1.44*size), (2.5*size,1.44*size), (0.0,-2.88*size)]
-        poly= _Numeric.repeat(coords,3)
+        poly= _Numeric.repeat(coords,3,0)
         poly.shape= (len(coords),3,2)
         poly += shape
         dc.DrawPolygonList(poly.astype(_Numeric.Int32))
 
     def _triangle_down(self, dc, coords, size=1):
         shape= [(-2.5*size,-1.44*size), (2.5*size,-1.44*size), (0.0,2.88*size)]
-        poly= _Numeric.repeat(coords,3)
+        poly= _Numeric.repeat(coords,3,0)
         poly.shape= (len(coords),3,2)
         poly += shape
         dc.DrawPolygonList(poly.astype(_Numeric.Int32))
@@ -1153,13 +1157,15 @@
         elif self._pointSize != (1.0, 1.0):
             self._pointSize = (1.0, 1.0)
             self._setSize()
-        if sys.platform in ("darwin", "win32") or not isinstance(dc, wx.GCDC):
+        if (sys.platform in ("darwin", "win32") or
+            not isinstance(dc, wx.GCDC) or wx.VERSION >= (2, 9)):
             self._fontScale = sum(self._pointSize) / 2.0
         else:
             # on Linux, we need to correct the font size by a certain factor if wx.GCDC is used,
             # to make text the same size as if wx.GCDC weren't used
+            screenppi = map(float, wx.ScreenDC().GetPPI())
             ppi = dc.GetPPI()
-            self._fontScale = (96.0 / ppi[0] * self._pointSize[0] + 96.0 / ppi[1] * self._pointSize[1]) / 2.0
+            self._fontScale = (screenppi[0] / ppi[0] * self._pointSize[0] + screenppi[1] / ppi[1] * self._pointSize[1]) / 2.0
         graphics._pointSize = self._pointSize
             
         dc.SetTextForeground(self.GetForegroundColour())
@@ -1192,12 +1198,17 @@
         # Get ticks and textExtents for axis if required
         if self._xSpec is not 'none':        
             xticks = self._xticks(xAxis[0], xAxis[1])
-            xTextExtent = dc.GetTextExtent(xticks[-1][1])# w h of x axis text last number on axis
         else:
             xticks = None
+        if xticks:
+            xTextExtent = dc.GetTextExtent(xticks[-1][1])# w h of x axis text last number on axis
+        else:
             xTextExtent= (0,0) # No text for ticks
         if self._ySpec is not 'none':
             yticks = self._yticks(yAxis[0], yAxis[1])
+        else:
+            yticks = None
+        if yticks:
             if self.getLogScale()[1]:
                 yTextExtent = dc.GetTextExtent('-2e-2')
             else:
@@ -1206,7 +1217,6 @@
                 yTextExtent= (max(yTextExtentBottom[0],yTextExtentTop[0]),
                               max(yTextExtentBottom[1],yTextExtentTop[1]))
         else:
-            yticks = None
             yTextExtent= (0,0) # No text for ticks
 
         # TextExtents for Title and Axis Labels
@@ -1484,11 +1494,11 @@
             if evt.GetOrientation() == wx.VERTICAL:
                 fullrange,pagesize = self.sb_vert.GetRange(),self.sb_vert.GetPageSize()
                 sbpos = fullrange-pagesize-sbpos
-                dist = sbpos*self._sb_yunit-(self._getYCurrentRange()[0]-self._sb_yfullrange[0])
+                dist = sbpos*self._sb_yunit-(self._getYCurrentRange()[0]-self._sb_yfullrange)
                 self.ScrollUp(dist)
             
             if evt.GetOrientation() == wx.HORIZONTAL:
-                dist = sbpos*self._sb_xunit-(self._getXCurrentRange()[0]-self._sb_xfullrange[0])
+                dist = sbpos*self._sb_xunit-(self._getXCurrentRange()[0]-self._sb_xfullrange)
                 self.ScrollRight(dist)
                
     # Private Methods **************************************************
@@ -1533,6 +1543,7 @@
         dcs.EndDrawing()
 
         dc = wx.ClientDC( self.canvas )
+        dc = wx.BufferedDC(dc, self._Buffer)
         #this will erase if called twice
         dc.Blit(0, 0, width, height, dcs, 0, 0, self._logicalFunction)
         if sys.platform == "darwin":
@@ -2410,7 +2421,6 @@
 
     class MyApp(wx.App):
         def OnInit(self):
-            wx.InitAllImageHandlers()
             frame = TestFrame(None, -1, "PlotCanvas")
             #frame.Show(True)
             self.SetTopWindow(frame)

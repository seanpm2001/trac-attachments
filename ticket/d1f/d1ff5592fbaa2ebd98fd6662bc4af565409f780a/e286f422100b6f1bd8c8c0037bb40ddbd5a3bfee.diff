diff --git a/src/msw/graphicsd2d.cpp b/src/msw/graphicsd2d.cpp
index 13534bc..7544e26 100644
--- a/src/msw/graphicsd2d.cpp
+++ b/src/msw/graphicsd2d.cpp
@@ -44,18 +44,21 @@
 #pragma hdrstop
 #endif
 
+#ifndef WX_PRECOMP
 #include "wx/graphics.h"
 #include "wx/dc.h"
 #include "wx/dcclient.h"
 #include "wx/dcmemory.h"
 #include "wx/dynlib.h"
 #include "wx/image.h"
+#include "wx/log.h"
 #include "wx/module.h"
 #include "wx/msw/private/comptr.h"
 #include "wx/private/graphics.h"
 #include "wx/stack.h"
 #include "wx/sharedptr.h"
 #include "wx/window.h"
+#endif
 
 // This must be the last header included to only affect the DEFINE_GUID()
 // occurrences below but not any GUIDs declared in the standard files included
@@ -78,6 +81,14 @@
 // Variation of wxCHECK_HRESULT_RET for functions which must return a pointer
 #define wxCHECK_HRESULT_RET_PTR(result) wxCHECK2_HRESULT_RET(result, NULL)
 
+// Checks a HRESULT for success, otherwise writes a message to the debug log
+// and continues.
+#define wxCHECK_HRESULT_DEBUG(result, msg)                                    \
+    {                                                                         \
+    if (result)                                                               \
+        wxLogDebug (wxFAILED_HRESULT_MSG(result) + "\n" + msg);               \
+    }
+
 // Checks the precondition of wxManagedResourceHolder::AcquireResource, namely
 // that it is bound to a manager.
 #define wxCHECK_RESOURCE_HOLDER_PRE()                                         \
@@ -2078,6 +2089,7 @@ wxD2DFontData::wxD2DFontData(wxGraphicsRenderer* renderer, ID2D1Factory* d2dFact
 
     wxCOMPtr<IDWriteGdiInterop> gdiInterop;
     hr = wxDWriteFactory()->GetGdiInterop(&gdiInterop);
+    wxCHECK_HRESULT_DEBUG (hr, "wxD2DFontData: Failed to create GDI interoperability object.");
 
     LOGFONTW logfont;
     GetObjectW(font.GetHFONT(), sizeof(logfont), &logfont);
@@ -2092,6 +2104,7 @@ wxD2DFontData::wxD2DFontData(wxGraphicsRenderer* renderer, ID2D1Factory* d2dFact
     }
 
     hr = gdiInterop->CreateFontFromLOGFONT(&logfont, &m_font);
+    wxCHECK_HRESULT_DEBUG (hr, "wxD2DFontData: Failed to create font.");
 
     wxCOMPtr<IDWriteFontFamily> fontFamily;
     m_font->GetFontFamily(&fontFamily);
@@ -2117,6 +2130,7 @@ wxD2DFontData::wxD2DFontData(wxGraphicsRenderer* renderer, ID2D1Factory* d2dFact
         (FLOAT)(font.GetPixelSize().GetHeight()) / (dpiY / 96.0),
         L"en-us",
         &m_textFormat);
+    wxCHECK_HRESULT_DEBUG (hr, "wxD2DFontData: Failed to create text format.");
 
     delete[] name;
 }
@@ -2137,6 +2151,7 @@ wxCOMPtr<IDWriteTextLayout> wxD2DFontData::CreateTextLayout(const wxString& text
         MAX_WIDTH,
         MAX_HEIGHT,
         &textLayout);
+    wxCHECK_HRESULT_DEBUG (hr, "wxD2DFontData: Failed to create text layout.");
 
     DWRITE_TEXT_RANGE textRange = { 0, (UINT32) text.length() };
@@ -3340,7 +3365,7 @@ void wxD2DContext::Flush()
 {
     HRESULT result = m_renderTargetHolder->Flush();
 
-    if (result == D2DERR_RECREATE_TARGET)
+    if (result == static_cast<long>(D2DERR_RECREATE_TARGET))
     {
         ReleaseDeviceDependentResources();
     }

diff --git a/src/msw/graphicsd2d.cpp b/src/msw/graphicsd2d.cpp
index 98c3700..0f03025 100644
--- a/src/msw/graphicsd2d.cpp
+++ b/src/msw/graphicsd2d.cpp
@@ -46,6 +46,8 @@
 
 #include "wx/graphics.h"
 #include "wx/dc.h"
+#include "wx/dcclient.h"
+#include "wx/dcmemory.h"
 #include "wx/dynlib.h"
 #include "wx/image.h"
 #include "wx/module.h"
@@ -53,6 +55,7 @@
 #include "wx/private/graphics.h"
 #include "wx/stack.h"
 #include "wx/sharedptr.h"
+#include "wx/window.h"
 
 // This must be the last header included to only affect the DEFINE_GUID()
 // occurrences below but not any GUIDs declared in the standard files included
@@ -311,10 +314,10 @@ class wxD2DResourceManager;
 class wxD2DManagedObject
 {
 public:
-    virtual void Bind(wxD2DResourceManager* manager) = NULL;
-    virtual void UnBind() = NULL;
-    virtual bool IsBound() = NULL;
-    virtual wxD2DResourceManager* GetManager() = NULL;
+    virtual void Bind(wxD2DResourceManager* manager) = 0;
+    virtual void UnBind() = 0;
+    virtual bool IsBound() = 0;
+    virtual wxD2DResourceManager* GetManager() = 0;
 
     virtual ~wxD2DManagedObject() {};
 };
@@ -1351,6 +1354,8 @@ public:
         m_brushStyle(brushStyle), m_color(color), m_refCount(0l)
     {
     }
+    
+    virtual ~wxHatchBitmapSource() {}
 
     HRESULT STDMETHODCALLTYPE GetSize(__RPC__out UINT *width, __RPC__out UINT *height) wxOVERRIDE
     {
@@ -1372,9 +1377,12 @@ public:
         return S_OK;
     }
 
-    HRESULT STDMETHODCALLTYPE CopyPalette(__RPC__in_opt IWICPalette *palette) wxOVERRIDE
+    HRESULT STDMETHODCALLTYPE CopyPalette(__RPC__in_opt IWICPalette* palette) wxOVERRIDE
     {
-        palette = NULL;
+        // The following looks like it is supposed to null the passed pointer, but doesn't.
+        // Changed to neutral cast for now to avoid 'unused' compiler warning.
+        // palette = NULL;
+        (void)palette;
         return S_OK;
     }
 
@@ -1449,7 +1457,7 @@ public:
 
     ULONG STDMETHODCALLTYPE Release(void) wxOVERRIDE
     {
-        wxCHECK2_MSG(m_refCount > 0, 0, "Unbalanced number of calls to Release");
+        wxASSERT_MSG(m_refCount > 0, "Unbalanced number of calls to Release");
 
         ULONG refCount = InterlockedDecrement(&m_refCount);
         if (m_refCount == 0)
@@ -2113,6 +2121,7 @@ wxD2DFontData::wxD2DFontData(wxGraphicsRenderer* renderer, ID2D1Factory* d2dFact
         (FLOAT)(font.GetPixelSize().GetHeight()) / (dpiY / 96.0),
         L"en-us",
         &m_textFormat);
+    wxCHECK_HRESULT_RET(hr);
 
     delete[] name;
 }
@@ -2133,6 +2142,12 @@ wxCOMPtr<IDWriteTextLayout> wxD2DFontData::CreateTextLayout(const wxString& text
         MAX_WIDTH,
         MAX_HEIGHT,
         &textLayout);
+    
+    if (FAILED(hr))
+    {
+        wxFAIL_MSG("Could not create text layout");
+        return static_cast<wxCOMPtr<IDWriteTextLayout> >(NULL);
+    }
 
     DWRITE_TEXT_RANGE textRange = { 0, (UINT32) text.length() };
 
@@ -2794,7 +2809,7 @@ private:
     // A ID2D1DrawingStateBlock represents the drawing state of a render target:
     // the anti aliasing mode, transform, tags, and text-rendering options.
     // The context owns these pointers and is responsible for releasing them.
-    wxStack<wxCOMPtr<ID2D1DrawingStateBlock>> m_stateStack;
+    wxStack<wxCOMPtr<ID2D1DrawingStateBlock> > m_stateStack;
 
     ClipMode m_clipMode;
 
@@ -2803,7 +2818,7 @@ private:
     // A direct2d layer is a device-dependent resource.
     wxCOMPtr<ID2D1Layer> m_clipLayer;
 
-    wxStack<wxCOMPtr<ID2D1Layer>> m_layers;
+    wxStack<wxCOMPtr<ID2D1Layer> > m_layers;
 
     ID2D1RenderTarget* m_cachedRenderTarget;
 
@@ -3336,7 +3351,7 @@ void wxD2DContext::Flush()
 {
     HRESULT result = m_renderTargetHolder->Flush();
 
-    if (result == D2DERR_RECREATE_TARGET)
+    if (result == static_cast<long>(D2DERR_RECREATE_TARGET))
     {
         ReleaseDeviceDependentResources();
     }
@@ -3692,6 +3707,8 @@ void wxD2DRenderer::GetVersion(int* major, int* minor, int* micro) const
         {
             switch(wxDirect2D::GetDirect2DVersion())
             {
+            case wxDirect2D::wxD2D_VERSION_NONE: // Do nothing (previously wasn't handled anyway)
+                break;
             case wxDirect2D::wxD2D_VERSION_1_0:
                 *minor = 0;
                 break;

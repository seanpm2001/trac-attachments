Index: src/osx/carbon/graphics.cpp
===================================================================
--- src/osx/carbon/graphics.cpp	(revision 63865)
+++ src/osx/carbon/graphics.cpp	(working copy)
@@ -686,7 +686,23 @@
     bool m_isShading;
     CGFunctionRef m_gradientFunction;
     CGShadingRef m_shading;
-    CGFloat *m_gradientComponents;
+
+    struct GradientComponent
+    {
+        CGFloat     pos;
+        CGFloat     red;
+        CGFloat     green;
+        CGFloat     blue;
+        CGFloat     alpha;
+    }
+
+    struct GradientComponents
+    {
+        int                 count;
+        GradientComponent   *comps;
+    }
+
+    GradientComponents  m_gradientComponents;
 };

 wxMacCoreGraphicsBrushData::wxMacCoreGraphicsBrushData( wxGraphicsRenderer* renderer) : wxGraphicsObjectRefData( renderer )
@@ -732,14 +748,14 @@
     if( m_gradientFunction )
         CGFunctionRelease(m_gradientFunction);

-    delete[] m_gradientComponents;
+    delete[] m_gradientComponents.comps;
 }

 void wxMacCoreGraphicsBrushData::Init()
 {
     m_gradientFunction = NULL;
     m_shading = NULL;
-    m_gradientComponents = NULL;
+    m_gradientComponents.comps = NULL;
     m_isShading = false;
 }

@@ -759,35 +775,78 @@

 void wxMacCoreGraphicsBrushData::CalculateShadingValues (void *info, const CGFloat *in, CGFloat *out)
 {
-    CGFloat* colors = (CGFloat*) info ;
-    CGFloat f = *in;
-    for( int i = 0 ; i < 4 ; ++i )
+    GradientComponent   *stops = (GradientComponents*) info ;
+    CGFloat             f = *in;
+    int                 i;
+    CGFloat             range;
+    CGFloat             diff;
+    CGFloat             fact;
+
+    if (f <= 0.0)
     {
-        out[i] = colors[i] + ( colors[4+i] - colors[i] ) * f;
+        // Start
+        out[0] = stops.comps[0].red;
+        out[1] = stops.comps[1].green;
+        out[2] = stops.comps[2].blue;
+        out[3] = stops.comps[3].alpha;
     }
+    else
+    if (f >= 1.0)
+    {
+        // end
+        out[0] = stops.comps[stops.count - 1].red;
+        out[1] = stops.comps[stops.count - 1].green;
+        out[2] = stops.comps[stops.count - 1].blue;
+        out[3] = stops.comps[stops.count - 1].alpha;
+    }
+    else
+    {
+        // Find first component with position greater than f
+
+        for (i = 0; i < stops.count; i++)
+        {
+            if (stops.comps[i].pos > f)
+                break;
+        }
+
+        // Interpolated between stops
+
+        diff = (f - stops.comps[i-1].pos);
+        range = (stops.comps[i].pos - stops.comps[i-1].pos)
+        fact = diff / range;
+
+        out[0] = stops.comps[i - 1].red + (stops.comps[i].red - stops.comps[i - 1].red) * fact;
+        out[0] = stops.comps[i - 1].green + (stops.comps[i].green - stops.comps[i - 1].green) * fact;
+        out[0] = stops.comps[i - 1].blue + (stops.comps[i].blue - stops.comps[i - 1].blue) * fact;
+        out[0] = stops.comps[i - 1].alpha + (stops.comps[i].alpha - stops.comps[i - 1].alpha) * fact;
+    }
 }

 CGFunctionRef
 wxMacCoreGraphicsBrushData::CreateGradientFunction(const wxGraphicsGradientStops& stops)
 {
-    // TODO: implement support for intermediate gradient stops
-    const wxColour c1 = stops.GetStartColour();
-    const wxColour c2 = stops.GetEndColour();

     static const CGFunctionCallbacks callbacks = { 0, &CalculateShadingValues, NULL };
     static const CGFloat input_value_range [2] = { 0, 1 };
     static const CGFloat output_value_ranges [8] = { 0, 1, 0, 1, 0, 1, 0, 1 };
-    m_gradientComponents = new CGFloat[8] ;
-    m_gradientComponents[0] = (CGFloat) (c1.Red() / 255.0);
-    m_gradientComponents[1] = (CGFloat) (c1.Green() / 255.0);
-    m_gradientComponents[2] = (CGFloat) (c1.Blue() / 255.0);
-    m_gradientComponents[3] = (CGFloat) (c1.Alpha() / 255.0);
-    m_gradientComponents[4] = (CGFloat) (c2.Red() / 255.0);
-    m_gradientComponents[5] = (CGFloat) (c2.Green() / 255.0);
-    m_gradientComponents[6] = (CGFloat) (c2.Blue() / 255.0);
-    m_gradientComponents[7] = (CGFloat) (c2.Alpha() / 255.0);

-    return CGFunctionCreate ( m_gradientComponents,  1,
+    m_gradientComponents.count = stops.GetCount();
+    m_gradientComponents.comps = new GradientComponent[m_gradientComponents.count] ;
+
+    for (int i = 0; i < m_gradientComponents.count; i++)
+    {
+        wxGradientStop  stop = stops.Item(i);
+        wxColour        col;
+
+        m_gradientComponents.comps[i].pos = stop.GetPosition();
+        col = stop.GetColour();
+        m_gradientComponents.comps[i].red = (CGFloat) (col.Red() / 255.0);
+        m_gradientComponents.comps[i].green = (CGFloat) (col.Green() / 255.0);
+        m_gradientComponents.comps[i].blue = (CGFloat) (col.Blue() / 255.0);
+        m_gradientComponents.comps[i].alpha = (CGFloat) (col.Alpha() / 255.0);
+    }
+
+    return CGFunctionCreate ( &m_gradientComponents,  1,
                             input_value_range,
                             4,
                             output_value_ranges,

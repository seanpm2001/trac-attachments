///////////////////////////////////////////////////////////////////////////////
// Name:        msw/ownerdrw.cpp
// Purpose:     implementation of wxOwnerDrawn class
// Author:      Vadim Zeitlin
// Modified by: 
// Created:     13.11.97
// RCS-ID:      $Id: ownerdrw.cpp,v 1.21 2000/09/12 14:53:39 JS Exp $
// Copyright:   (c) 1998 Vadim Zeitlin <zeitlin@dptmaths.ens-cachan.fr>
// Licence:     wxWindows license
///////////////////////////////////////////////////////////////////////////////

#ifdef __GNUG__
#pragma implementation
#endif

// For compilers that support precompilation, includes "wx.h".
#include "wx/wxprec.h"
#include "wx/msw/private.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
  #include "wx/window.h"
//  #include "wx/msw/private.h"
  #include "wx/font.h"
  #include "wx/bitmap.h"
  #include "wx/dcmemory.h"
  #include "wx/menu.h"
  #include "wx/utils.h"
#endif

#include "wx/settings.h"
#include "wx/ownerdrw.h"
#include "wx/menuitem.h"

#if wxUSE_OWNER_DRAWN

// ============================================================================
// implementation of wxOwnerDrawn class
// ============================================================================

// ctor
// ----
wxOwnerDrawn::wxOwnerDrawn(const wxString& str, 
                           bool bCheckable, bool bMenuItem)
            : m_strName(str)
{
  m_bCheckable   = bCheckable;
  m_bOwnerDrawn  = FALSE;
  m_nHeight      = 0;
  m_nMarginWidth = ms_nLastMarginWidth;
  if (wxNORMAL_FONT)
    m_font = * wxNORMAL_FONT;
}

#if defined(__WXMSW__) && defined(__WIN32__) && defined(SM_CXMENUCHECK)
  size_t wxOwnerDrawn::ms_nDefaultMarginWidth = GetSystemMetrics(SM_CXMENUCHECK);
#else   // # what is the reasonable default?
  size_t wxOwnerDrawn::ms_nDefaultMarginWidth = 15;
#endif

size_t wxOwnerDrawn::ms_nLastMarginWidth = ms_nDefaultMarginWidth;

// drawing
// -------

// get size of the item
bool wxOwnerDrawn::OnMeasureItem(size_t *pwidth, size_t *pheight)
{
  wxMemoryDC dc;

  wxString str = wxStripMenuCodes(m_strName);

  // # without this menu items look too tightly packed (at least under Windows)
  str += wxT('W'); // 'W' is typically the widest letter

  if (m_font.Ok())
    dc.SetFont(GetFont());

  dc.GetTextExtent(str, (long *)pwidth, (long *)pheight);

  // JACS: items still look too tightly packed, so adding 2 pixels.
  (*pheight) = (*pheight) + 2;

  if (m_bmpChecked.Ok())
  {
    // Is Bmp Height larger then Text Height?
    if (*pheight < m_bmpChecked.GetHeight() + wxSystemSettings::GetSystemMetric(wxSYS_EDGE_Y))
      *pheight = m_bmpChecked.GetHeight()  + wxSystemSettings::GetSystemMetric(wxSYS_EDGE_Y);

    // Does Bmp encroach on Default check menu position?
    if (ms_nDefaultMarginWidth < m_bmpChecked.GetWidth() + wxSystemSettings::GetSystemMetric(wxSYS_EDGE_X) * 2)
      *pwidth += m_bmpChecked.GetWidth() +  wxSystemSettings::GetSystemMetric(wxSYS_EDGE_X) * 2 - ms_nDefaultMarginWidth;

    // Do we need to widen Margin to fit Bmp?
    if (GetMarginWidth() < m_bmpChecked.GetWidth() + wxSystemSettings::GetSystemMetric(wxSYS_EDGE_X) * 2)
      SetMarginWidth(m_bmpChecked.GetWidth() + wxSystemSettings::GetSystemMetric(wxSYS_EDGE_X) * 2);
  }

  m_nHeight = *pheight;                // remember height for use in OnDrawItem

  return TRUE;
}

// Generic Draw Item
bool wxOwnerDrawn::OnDrawItem(wxDC& dc, const wxRect& rc, wxODAction act, wxODStatus st)
{
  // we do nothing on focus change
  if ( act == wxODFocusChanged )
    return TRUE;

  wxColour cBackground;
  wxColour cText;
  wxColour cMenu;
  wxColour c3Ddark;
  wxColour c3Dlight;
  long textwidth;
  long textheight;

  if ( st & wxODSelected ) {
    cBackground = wxSystemSettings::GetSystemColour(wxSYS_COLOUR_HIGHLIGHT);
    cText = wxSystemSettings::GetSystemColour(wxSYS_COLOUR_HIGHLIGHTTEXT);
  }
  else {
    cBackground = m_colBack.Ok() ? m_colBack : wxSystemSettings::GetSystemColour(wxSYS_COLOUR_MENU);
    cText = m_colText.Ok() ? m_colText : wxSystemSettings::GetSystemColour(wxSYS_COLOUR_WINDOWTEXT);
  }
  cMenu = m_colBack.Ok() ? m_colBack : wxSystemSettings::GetSystemColour(wxSYS_COLOUR_MENU);
  c3Ddark = wxSystemSettings::GetSystemColour(wxSYS_COLOUR_3DDKSHADOW);
  c3Dlight = wxSystemSettings::GetSystemColour(wxSYS_COLOUR_3DHIGHLIGHT);

  wxPen menuPen(cMenu,1,wxSOLID); 
  wxBrush textBrush(cBackground,wxSOLID);
  wxBrush bmpBrush(cMenu,wxSOLID);

  // Text Background
  dc.SetPen(menuPen);
  dc.SetBrush(textBrush);

  if (m_bmpChecked.Ok()) // Hilight from Bmp
    dc.DrawRectangle(rc.GetLeft() + GetMarginWidth(), rc.GetTop(), rc.GetRight() - GetMarginWidth(), rc.GetHeight() + 1);
  else // Hilight from Menu Edge
    dc.DrawRectangle(rc.GetLeft(), rc.GetTop(), rc.GetRight(), rc.GetHeight() + 1);

  dc.SetBrush(wxNullBrush);

  // Bmp Background
  if (m_bmpChecked.Ok())
  {
    dc.SetBrush(bmpBrush);
    dc.DrawRectangle(rc.GetLeft(), rc.GetTop(), GetMarginWidth(), rc.GetHeight() + 1);
    dc.SetBrush(wxNullBrush);
  }

  dc.SetPen(wxNullPen);
  
  // Text Font
  if (m_font.Ok())
    dc.SetFont(GetFont());

  // Text
  dc.SetTextBackground(cBackground);
  dc.SetTextForeground(cText);
  dc.GetTextExtent(m_strName, &textwidth, &textheight);
  dc.DrawText(m_strName, rc.GetLeft() + GetMarginWidth(), rc.GetTop() + (rc.GetHeight() - textheight)/2);

  // Bitmap
  if (m_bmpChecked.Ok() || IsCheckable()) {
      if (!m_bmpChecked.Ok()) {
        if ( st & wxODChecked ) {
              // Draw Check
#if 0 // native check? 
      // (MSW looks ugly - perhaps use DFCS_TRANSPARENT flag with DrawFrameControl() on WINVER >= 0x0500)    
              dc.DrawCheckMark(rc.GetLeft(), rc.GetTop(), GetMarginWidth(), m_nHeight);
#else // Generic Check
              wxCoord x1, y1, x2, y2, x3, y3;

              // Get Pen Width - imperical
              int penwidth = GetMarginWidth() / 8;
              if (penwidth < 1) penwidth = 1;
              if (penwidth > 3) penwidth = 3;

              wxPen checkPen(cText, penwidth, wxSOLID); 
              
              // CheckMark Coord
              x1 = rc.GetLeft() + GetMarginWidth()/3;
              y1 = rc.GetTop() + m_nHeight/3 + 2 * m_nHeight/9;
              x2 = x1 + GetMarginWidth()/9;
              y2 = rc.GetTop() + 2 * m_nHeight/3;
              x3 = rc.GetLeft() + 2 * GetMarginWidth()/3;
              y3 = rc.GetTop() + m_nHeight/3;
              
              dc.SetPen(checkPen);
              dc.DrawLine(x1,y1,x2,y2);
              dc.DrawLine(x2,y2,x3,y3);
              dc.SetPen(wxNullPen);
#endif
      }
    }
    else {
      wxBitmap bmp(GetBitmap(IsCheckable() ? ((st & wxODChecked) != 0) : TRUE));

      dc.DrawBitmap(bmp,
            rc.GetLeft() + (GetMarginWidth() - bmp.GetWidth()) / 2, 
            rc.GetTop() + (m_nHeight - bmp.GetHeight()) /2,
            TRUE);

      // Draw Selected 3D rect around Bitmap
      if ( st & wxODSelected ) {
        wxPen lightPen(c3Dlight,1,wxSOLID); 
        wxPen darkPen(c3Ddark,1,wxSOLID);

        dc.SetPen(lightPen);
        dc.DrawLine(    rc.GetLeft(), 
                        rc.GetTop() + m_nHeight,
                        rc.GetLeft(),
                        rc.GetTop());

        dc.DrawLine(    rc.GetLeft(), 
                        rc.GetTop(),
                        rc.GetLeft() + GetMarginWidth(),
                        rc.GetTop());
        dc.SetPen(wxNullPen);

        dc.SetPen(darkPen);
        dc.DrawLine(    rc.GetLeft() + GetMarginWidth(), 
                        rc.GetTop(),
                        rc.GetLeft() + GetMarginWidth(),
                        rc.GetTop() + m_nHeight);

        dc.DrawLine(    rc.GetLeft(), 
                        rc.GetTop() + m_nHeight,
                        rc.GetLeft() + GetMarginWidth(),
                        rc.GetTop() + m_nHeight);
        dc.SetPen(wxNullPen);
      }
    }
  }

  return TRUE;
}


#endif // wxUSE_OWNER_DRAWN


 	  	 

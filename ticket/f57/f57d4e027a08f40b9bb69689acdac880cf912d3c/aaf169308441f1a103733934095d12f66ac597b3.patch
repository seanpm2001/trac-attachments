Index: include/wx/image.h
===================================================================
--- include/wx/image.h    (revision 66360)
+++ include/wx/image.h    (working copy)
@@ -70,6 +70,16 @@ enum wxImageResizeQuality
     wxIMAGE_QUALITY_HIGH = wxIMAGE_QUALITY_BICUBIC
 };
 
+// Constants for wxImage::Paste() for specifying alpha blending option
+enum wxImageAlphaBlending
+{
+    /// Pasted image pixel data should clobber this instance's
+    wxIMAGE_ALPHA_BLEND_NONE = 0,
+
+    /// Pasted image's pixel data should be blended into this instance using its alpha data
+    wxIMAGE_ALPHA_BLEND_COMPOSITE = 1,
+};
+
 // alpha channel values: fully transparent, default threshold separating
 // transparent pixels from opaque for a few functions dealing with alpha and
 // fully opaque
@@ -311,9 +321,13 @@ public:
     wxImage Size( const wxSize& size, const wxPoint& pos,
                   int r = -1, int g = -1, int b = -1 ) const;
 
-    // pastes image into this instance and takes care of
-    // the mask colour and out of bounds problems
-    void Paste( const wxImage &image, int x, int y );
+    // Copy the data of the given image to the specified position in this instance.
+    //   Takes care of the mask colour and out of bounds problems.
+    //   The alphaBlend param (new in wx 2.9.2) will determine if the image data should
+    //    clobber this instance's data or if the pixels should be blended
+    //    using the image alpha channel
+    void Paste( const wxImage &image, int x, int y,
+                wxImageAlphaBlending alphaBlend = wxIMAGE_ALPHA_BLEND_NONE );
 
     // return the new image with size width*height
     wxImage Scale( int width, int height,
Index: interface/wx/image.h
===================================================================
--- interface/wx/image.h    (revision 66360)
+++ interface/wx/image.h    (working copy)
@@ -47,6 +47,18 @@ enum wxImageResizeQuality
 };
 
 /**
+    Constants for wxImage::Paste() for specifying alpha blending option
+*/
+enum wxImageAlphaBlending
+{
+    /// Pasted image pixel data should clobber this instance's
+    wxIMAGE_ALPHA_BLEND_NONE = 0,
+
+    /// Pasted image's pixel data should be blended into this instance using its alpha data
+    wxIMAGE_ALPHA_BLEND_COMPOSITE = 1,
+};
+
+/**
     Possible values for PNG image type option.
 
     @see wxImage::GetOptionInt().
@@ -681,9 +693,16 @@ public:
     wxImage Mirror(bool horizontally = true) const;
 
     /**
-        Copy the data of the given @a image to the specified position in this image.
+        Copy the data of the given @a image to the specified position in this instance. 
+        Takes care of the mask colour and out of bounds problems.
+
+        @param alphaBlend
+            The @a alphaBlend param (new in wx 2.9.2) will determine if the @a image
+            data should clobber this instance's data or if the pixels should be blended
+            using the @a image alpha channel
     */
-    void Paste(const wxImage& image, int x, int y);
+    void Paste(const wxImage& image, int x, int y,
+               wxImageAlphaBlending alphaBlend = wxIMAGE_ALPHA_BLEND_NONE);
 
     /**
         Replaces the colour specified by @e r1,g1,b1 by the colour @e r2,g2,b2.
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp    (revision 66360)
+++ src/common/image.cpp    (working copy)
@@ -1370,7 +1370,7 @@ wxImage wxImage::Size( const wxSize& size, const wxPoint& pos,
     return image;
 }
 
-void wxImage::Paste( const wxImage &image, int x, int y )
+void wxImage::Paste( const wxImage &image, int x, int y, wxImageAlphaBlending alphaBlend )
 {
     wxCHECK_RET( Ok(), wxT("invalid image") );
     wxCHECK_RET( image.Ok(), wxT("invalid image") );
@@ -1405,77 +1405,116 @@ void wxImage::Paste( const wxImage &image, int x, int y )
     if (target_width < 1) return;
     if (target_height < 1) return;
 
-    if ((!HasMask() && !image.HasMask()) ||
-        (HasMask() && !image.HasMask()) ||
-       ((HasMask() && image.HasMask() &&
-         (GetMaskRed()==image.GetMaskRed()) &&
-         (GetMaskGreen()==image.GetMaskGreen()) &&
-         (GetMaskBlue()==image.GetMaskBlue()))))
-    {
-        unsigned char* source_data = image.GetData() + offset_x*3 + offset_y*3*image.GetWidth();
-        int source_data_step = image.GetWidth()*3;
+    // Masking
+    // if the source image has a mask and either the target image does NOT 
+    // or the target image's mask is different than the source
+    // then use the source mask when pasting onto the target 
+    bool maskSource = false;
+    unsigned char source_mask_r = 0;
+    unsigned char source_mask_g = 0;
+    unsigned char source_mask_b = 0;
+    if (image.HasMask() &&
+        (!HasMask() ||
+         GetMaskRed() != image.GetMaskRed() ||
+         GetMaskGreen() != image.GetMaskGreen() ||
+         GetMaskBlue() != image.GetMaskBlue()))
+    {
+        maskSource = true;
+        source_mask_r = image.GetMaskRed();
+        source_mask_g = image.GetMaskGreen();
+        source_mask_b = image.GetMaskBlue();
+    }
+
+    // Alpha blending
+    bool doAlphaCompositing = (alphaBlend == wxIMAGE_ALPHA_BLEND_COMPOSITE);
+    bool hasAlpha = false;
+
+    unsigned char* source_alpha_data = NULL;
+    int source_alpha_data_step = 0;
+    
+    unsigned char* target_alpha_data = NULL;
+    int target_alpha_data_step = 0;
 
-        unsigned char* target_data = GetData() + target_x*3 + target_y*3*M_IMGDATA->m_width;
-        int target_data_step = M_IMGDATA->m_width*3;
-        for (int height_index = 0; height_index < target_height; height_index++)
-        {
-            memcpy( target_data, source_data, target_width*3 );
-            source_data += source_data_step;
-            target_data += target_data_step;
-        }
-    }
-
-    // Copy over the alpha channel from the original image
     if ( image.HasAlpha() )
     {
         if ( !HasAlpha() )
             InitAlpha();
 
-        unsigned char* source_alpha_data = image.GetAlpha() + offset_x + offset_y*image.GetWidth();
-        int source_alpha_data_step = image.GetWidth();
+        source_alpha_data = image.GetAlpha() + offset_x + offset_y*image.GetWidth();
+        source_alpha_data_step = image.GetWidth();
 
-        unsigned char* target_alpha_data = GetAlpha() + target_x + target_y*M_IMGDATA->m_width;
-        int target_alpha_data_step = M_IMGDATA->m_width;
+        target_alpha_data = GetAlpha() + target_x + target_y*M_IMGDATA->m_width;
+        target_alpha_data_step = M_IMGDATA->m_width;
 
-        for (int height_index = 0; height_index < target_height; height_index++)
-        {
-            memcpy( target_alpha_data, source_alpha_data, target_width );
-            
-            source_alpha_data += source_alpha_data_step;
-            target_alpha_data += target_alpha_data_step;
-        }
+        hasAlpha = true;
     }
+    doAlphaCompositing &= hasAlpha; // can't blend alpha if there is none
 
-    if (!HasMask() && image.HasMask())
-    {
-        unsigned char source_mask_r = image.GetMaskRed();
-        unsigned char source_mask_g = image.GetMaskGreen();
-        unsigned char source_mask_b = image.GetMaskBlue();
-
-        unsigned char* source_data = image.GetData() + offset_x*3 + offset_y*3*image.GetWidth();
-        int source_data_step = image.GetWidth()*3;
+    unsigned char* source_data = image.GetData() + offset_x*3 + offset_y*3*image.GetWidth();
+    int source_data_step = image.GetWidth()*3;
 
-        unsigned char* target_data = GetData() + target_x*3 + target_y*3*M_IMGDATA->m_width;
-        int target_data_step = M_IMGDATA->m_width*3;
+    unsigned char* target_data = GetData() + target_x*3 + target_y*3*M_IMGDATA->m_width;
+    int target_data_step = M_IMGDATA->m_width*3;
 
-        for (int height_index = 0; height_index < target_height; height_index++)
+    for (int height_index = 0; height_index < target_height; ++height_index)
+    {
+        if ( !maskSource && !hasAlpha )
+        {
+            memcpy( target_data, source_data, target_width*3 ); 
+        }
+        else
         {
-            for (int width_index = 0; width_index < target_width; width_index++)
+            for (int width_index = 0; width_index < target_width; ++width_index)
             {
-                int r_index = width_index*3; 
-                int g_index = width_index*3 + 1; 
-                int b_index = width_index*3 + 2; 
-
-                if ((source_data[r_index] != source_mask_r) ||
-                    (source_data[g_index] != source_mask_g) ||
-                    (source_data[b_index] != source_mask_b))
+                int r_index = width_index*3;
+                int g_index = width_index*3 + 1;
+                int b_index = width_index*3 + 2;
+
+                // paste the pixel if either:
+                // - not masking the source
+                // - are masking, and the source pixel is NOT masked
+                if (!maskSource ||
+                    !((source_data[r_index] == source_mask_r) &&
+                    (source_data[g_index] == source_mask_g) &&
+                    (source_data[b_index] == source_mask_b)))
                 {
-                    memcpy( target_data+r_index, source_data+r_index, 3 );
+                    if ( doAlphaCompositing )
+                    {
+                        // value of 255 means that the pixel is 100% opaque
+                        float source_alpha = ( source_alpha_data[width_index] / 255.f );
+                        float inverse_source_alpha = 1 - source_alpha;
+
+                        target_data[r_index] = ( inverse_source_alpha * target_data[r_index] ) + ( source_data[r_index] * source_alpha );
+                        target_data[g_index] = ( inverse_source_alpha * target_data[g_index] ) + ( source_data[g_index] * source_alpha );
+                        target_data[b_index] = ( inverse_source_alpha * target_data[b_index] ) + ( source_data[b_index] * source_alpha );
+
+                        // merge alpha channels
+                        target_alpha_data[width_index] = ( target_alpha_data[width_index] + source_alpha_data[width_index] ) > 255
+                            ? 255
+                            : target_alpha_data[width_index] + source_alpha_data[width_index];
+                    }
+                    else
+                    {
+                        // Copy over the alpha channel from the original image
+                        if ( hasAlpha )
+                        {
+                            target_alpha_data[width_index] = source_alpha_data[width_index];
+                        }
+
+                        memcpy( target_data+r_index, source_data+r_index, 3 );
+                    }
                 }
             }
-            source_data += source_data_step;
-            target_data += target_data_step;
+
+            if ( hasAlpha )
+            {
+                source_alpha_data += source_alpha_data_step;
+                target_alpha_data += target_alpha_data_step;
+            }
         }
+
+        source_data += source_data_step;
+        target_data += target_data_step;
     }
 }
 

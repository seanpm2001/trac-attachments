diff -ru wxWidgets.orig/src/msw/treectrl.cpp wxWidgets/src/msw/treectrl.cpp
--- wxWidgets.orig/src/msw/treectrl.cpp	2008-06-20 10:00:38.000000000 +0200
+++ wxWidgets/src/msw/treectrl.cpp	2008-08-18 14:27:59.000000000 +0200
@@ -690,6 +690,8 @@
     gs_expandEvents[IDX_COLLAPSE][IDX_DOING] = wxEVT_COMMAND_TREE_ITEM_COLLAPSING;
     gs_expandEvents[IDX_EXPAND][IDX_DONE] = wxEVT_COMMAND_TREE_ITEM_EXPANDED;
     gs_expandEvents[IDX_EXPAND][IDX_DOING] = wxEVT_COMMAND_TREE_ITEM_EXPANDING;
+
+    SetBackgroundStyle(wxBG_STYLE_CUSTOM); // don't redraw background, producing flicker
 }
 
 bool wxTreeCtrl::Create(wxWindow *parent,
diff -ru wxWidgets.orig/src/msw/window.cpp wxWidgets/src/msw/window.cpp
--- wxWidgets.orig/src/msw/window.cpp	2008-06-20 10:00:38.000000000 +0200
+++ wxWidgets/src/msw/window.cpp	2008-08-18 14:28:23.000000000 +0200
@@ -4638,6 +4638,15 @@
 
 void wxWindowMSW::OnEraseBackground(wxEraseEvent& event)
 {
+/*
+    if ( GetBackgroundStyle() == wxBG_STYLE_CUSTOM )
+    {
+        // don't skip the event here, custom background means that the app
+        // is drawing it itself in its OnPaint(), so don't draw it at all
+        // now to avoid flicker
+        return;
+    }
+*/
     // standard non top level controls (i.e. except the dialogs) always erase
     // their background themselves in HandleCtlColor() or have some control-
     // specific ways to set the colours (common controls)

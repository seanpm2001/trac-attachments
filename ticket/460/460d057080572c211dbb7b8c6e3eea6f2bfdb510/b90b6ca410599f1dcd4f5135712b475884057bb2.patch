Index: interface/wx/richtext/richtextctrl.h
===================================================================
--- interface/wx/richtext/richtextctrl.h	(revision 54285)
+++ interface/wx/richtext/richtextctrl.h	(working copy)
@@ -20,11 +20,16 @@
 public:
     //@{
     /**
-        Constructors.
+        Constructor.
     */
     wxRichTextEvent(const wxRichTextEvent& event);
-    wxRichTextEvent(wxEventType commandType = wxEVT_NULL,
-                    int winid = 0);
+
+    /**
+        Constructor.
+        @param id
+            Window identifier. The value @c wxID_ANY indicates a default value.
+    */    wxRichTextEvent(wxEventType commandType = wxEVT_NULL,
+                    int id = 0);
     //@}
 
     /**
@@ -115,8 +120,8 @@
     wxEVT_COMMAND_TEXT_UPDATED,
     and wxTextUrlEvent when URL content is clicked.
 
-    For more information, see the @ref overview_wxrichtextctrloverview
-    "wxRichTextCtrl overview".
+    For more information, see the @ref overview_richtextctrl
+    "wxRichTextCtrl Overview".
 
     @library{wxrichtext}
     @category{richtext}
@@ -126,9 +131,31 @@
 public:
     //@{
     /**
-        Constructors.
+        Default Constructor.
     */
     wxRichTextCtrl();
+    
+    /**
+        Constructor, creating and showing a rich text control.
+        @param parent
+            Parent window. Must not be @NULL.
+        @param id
+            Window identifier. The value @c wxID_ANY indicates a default value.
+        @param value
+            Default string.
+        @param pos
+            Window position.
+        @param size
+            Window size.
+        @param style
+            Window style.
+        @param validator
+            Window validator.
+        @param name
+            Window name.
+
+        @see Create(), wxValidator
+    */
     wxRichTextCtrl(wxWindow* parent, wxWindowID id = wxID_ANY,
                    const wxString& value = wxEmptyString,
                    const wxPoint& pos = wxDefaultPosition,
@@ -237,20 +264,20 @@
 
     /**
         Begins applying a left indent and subindent in tenths of a millimetre.
-        The sub-indent is an offset from the left of the paragraph, and is used for all
-        but the
-        first line in a paragraph. A positive value will cause the first line to appear
-        to the left
-        of the subsequent lines, and a negative value will cause the first line to be
-        indented
-        relative to the subsequent lines.
-        wxRichTextBuffer uses indentation to render a bulleted item. The left indent is
-        the distance between
-        the margin and the bullet. The content of the paragraph, including the first
-        line, starts
-        at leftMargin + leftSubIndent. So the distance between the left edge of the
-        bullet and the
-        left of the actual paragraph is leftSubIndent.
+        The subindent is an offset from the left edge of the paragraph, and is 
+        used for all but the first line in a paragraph. A positive value will 
+        cause the first line to appear to the left of the subsequent lines, and
+        a negative value will cause the first line to be indented to the right
+        of the subsequent lines.
+        
+        wxRichTextBuffer uses indentation to render a bulleted item. The
+        content of the paragraph, including the first line, starts at the
+        leftMargin plus the leftSubIndent.
+        @param leftIndent
+            The distance between the margin and the bullet.
+        @param leftSubIndent
+             The distance between the left edge of the bullet and the left edge
+             of the actual paragraph.
     */
     bool BeginLeftIndent(int leftIndent, int leftSubIndent = 0);
 

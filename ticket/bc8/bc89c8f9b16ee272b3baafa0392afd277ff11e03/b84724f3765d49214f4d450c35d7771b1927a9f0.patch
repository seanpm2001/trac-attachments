? src/mac/corefoundation/.DS_Store
Index: src/mac/corefoundation/hid.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/corefoundation/hid.cpp,v
retrieving revision 1.16
diff -b -u -2 -r1.16 hid.cpp
--- src/mac/corefoundation/hid.cpp	2005/11/02 15:21:30	1.16
+++ src/mac/corefoundation/hid.cpp	2006/02/01 05:21:47
@@ -33,37 +33,7 @@
 #include "wx/mac/corefoundation/cfstring.h"
 
-
-// ---------------------------------------------------------------------------
-// assertion macros
-// ---------------------------------------------------------------------------
-
-#define wxFORCECHECK_MSG(arg, msg)  \
-{\
-    if (arg) \
-    {\
-        wxLogSysError(wxString::Format(wxT("Message:%s\nHID: %s failed!"), wxT(msg), wxT(#arg)));\
-        return false;\
-    }\
-}
-#define wxIOCHECK(arg, msg)  wxFORCECHECK_MSG(arg != kIOReturnSuccess, msg)
-#define wxKERNCHECK(arg, msg) wxFORCECHECK_MSG(arg != KERN_SUCCESS, msg)
-#define wxSCHECK(arg, msg) wxFORCECHECK_MSG(arg != S_OK, msg)
-
-/*
-void CFShowTypeIDDescription(CFTypeRef pData)
-{
-    if(!pData)
-    {
-        wxASSERT(false);
-        return;
-    }
-
-    wxMessageBox(
-        CFStringGetCStringPtr(
-            CFCopyTypeIDDescription(CFGetTypeID(pData)),CFStringGetSystemEncoding()
-                             )
-                );
-}
-*/
+#include "wx/utils.h"
+#include "wx/module.h"
+#include "wx/dynarray.h"
 
 // ============================================================================
@@ -71,12 +41,28 @@
 // ============================================================================
 
-// ---------------------------------------------------------------------------
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
 // wxHIDDevice
-// ---------------------------------------------------------------------------
+//
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::Create
+//
+//  nClass is the HID Page such as 
+//      kHIDPage_GenericDesktop
+//  nType is the HID Usage such as
+//      kHIDUsage_GD_Joystick,kHIDUsage_GD_Mouse,kHIDUsage_GD_Keyboard
+//  nDev is the device number to use
+// 
+// ----------------------------------------------------------------------------
 bool wxHIDDevice::Create (int nClass, int nType, int nDev)
 {
     //Create the mach port
-    wxIOCHECK(IOMasterPort(bootstrap_port, &m_pPort), "Could not create mach port");
+    if(IOMasterPort(bootstrap_port, &m_pPort) != kIOReturnSuccess)
+    {
+        wxLogSysError(wxT("Could not create mach port"));
+        return false;
+    }
 
     //Dictionary that will hold first
@@ -88,8 +74,9 @@
     //dictionary up for us (consumes one reference))
     CFMutableDictionaryRef pDictionary = IOServiceMatching(kIOHIDDeviceKey);
-    wxCHECK_MSG( pDictionary, false,
-                    _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
-
-    wxASSERT( pDictionary );
+    if(pDictionary == NULL)
+    {
+        wxLogSysError( _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
+        return false;
+    }
 
     //Here we'll filter down the services to what we want
@@ -111,5 +98,12 @@
     //Now get the maching services
     io_iterator_t pIterator;
-    wxIOCHECK(IOServiceGetMatchingServices(m_pPort, pDictionary, &pIterator), "No Matching HID Services");
+    if( IOServiceGetMatchingServices(m_pPort, 
+                        pDictionary, &pIterator) != kIOReturnSuccess )
+    {
+        wxLogSysError(_T("No Matching HID Services"));
+        return false;
+    }
+    
+    //Were there any devices matched?
     if(pIterator == 0)
         return false; // No devices found
@@ -120,5 +114,8 @@
     {
         if(--nDev != 0)
+        {
+            IOObjectRelease(pObject);
             continue;
+        }
 
         if ( IORegistryEntryCreateCFProperties
@@ -133,47 +130,47 @@
         }
 
-        //Just for sanity :)
-        wxASSERT(CFGetTypeID(CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDProductKey))) == CFStringGetTypeID());
+        //
+        // Now we get the attributes of each "product" in the iterator
+        //
 
-/*
-        kIOHIDTransportKey;
-        kIOHIDVendorIDKey;
-        kIOHIDProductIDKey;
-        kIOHIDVersionNumberKey;
-        kIOHIDManufacturerKey;
-        kIOHIDSerialNumberKey;
-        if !kIOHIDLocationIDKey
-            kUSBDevicePropertyLocationID
-        kIOHIDPrimaryUsageKey
-kIOHIDPrimaryUsagePageKey
-idProduct
-idVendor
-USB Product Name
-*/
         //Get [product] name
-        m_szProductName = wxMacCFStringHolder( (CFStringRef) CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDProductKey)), false ).AsString();
-
-        CFNumberRef nref = (CFNumberRef) CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDProductIDKey));
-
-        if (nref)
-        CFNumberGetValue(
-                nref,
-                kCFNumberIntType,
-                &m_nProductId
-                );
+        CFStringRef cfsProduct = (CFStringRef) 
+            CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDProductKey));
+        m_szProductName = 
+            wxMacCFStringHolder( cfsProduct, 
+                                    false 
+                               ).AsString();
+
+        //Get the Product ID Key
+        CFNumberRef cfnProductId = (CFNumberRef) 
+            CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDProductIDKey));
+        if (cfnProductId)
+        {
+            CFNumberGetValue(cfnProductId, kCFNumberIntType, &m_nProductId);
+        }
+
+        //Get the Vendor ID Key
+        CFNumberRef cfnVendorId = (CFNumberRef) 
+            CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDVendorIDKey));
+        if (cfnVendorId)
+        {
+            CFNumberGetValue(cfnVendorId, kCFNumberIntType, &m_nManufacturerId);
+        }
 
-        nref = (CFNumberRef) CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDVendorIDKey));
-        if (nref)
-    CFNumberGetValue(
-                nref,
-                kCFNumberIntType,
-                &m_nManufacturerId
-                );
+        //
+        // End attribute getting
+        //
 
         //Create the interface (good grief - long function names!)
         SInt32 nScore;
         IOCFPlugInInterface** ppPlugin;
-        wxIOCHECK(IOCreatePlugInInterfaceForService(pObject, kIOHIDDeviceUserClientTypeID,
-                                            kIOCFPlugInInterfaceID, &ppPlugin, &nScore), "");
+        if(IOCreatePlugInInterfaceForService(pObject, 
+                                             kIOHIDDeviceUserClientTypeID,
+                                             kIOCFPlugInInterfaceID, &ppPlugin, 
+                                             &nScore) !=  kIOReturnSuccess)
+        {
+            wxLogSysError(wxT("Could not create HID Interface for product"));
+            return false;
+        }
 
         //Now, the final thing we can check before we fall back to asserts
@@ -182,6 +179,11 @@
 
         //Get the HID interface from the plugin to the mach port
-        wxSCHECK((*ppPlugin)->QueryInterface(ppPlugin,
-                            CFUUIDGetUUIDBytes(kIOHIDDeviceInterfaceID), (void**) &m_ppDevice), "");
+        if((*ppPlugin)->QueryInterface(ppPlugin,
+                               CFUUIDGetUUIDBytes(kIOHIDDeviceInterfaceID), 
+                               (void**) &m_ppDevice) != S_OK)
+        {
+            wxLogSysError(wxT("Could not get device interface from HID interface"));
+            return false;
+        }
 
         //release the plugin
@@ -193,26 +195,42 @@
 
         //
-        //Now the hard part - in order to scan things we need "cookies" -
+        //Now the hard part - in order to scan things we need "cookies"
         //
-        wxCFArray CookieArray = CFDictionaryGetValue(pDictionary, CFSTR(kIOHIDElementKey));
-        BuildCookies(CookieArray);
+        CFArrayRef cfaCookies = (CFArrayRef)
+                                    CFDictionaryGetValue(pDictionary, 
+                                                  CFSTR(kIOHIDElementKey));
+        BuildCookies(cfaCookies);
 
         //cleanup
         CFRelease(pDictionary);
         IOObjectRelease(pObject);
-        break;
-    }
+        
     //iterator cleanup
     IOObjectRelease(pIterator);
 
     return true;
+    }
+
+    //iterator cleanup
+    IOObjectRelease(pIterator);
+
+    return false; //no device
 }//end Create()
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::GetCount [static]
+//
+//  Obtains the number of devices on a system for a given HID Page (nClass)
+// and HID Usage (nType).
+// ----------------------------------------------------------------------------
 int wxHIDDevice::GetCount (int nClass, int nType)
 {
-    mach_port_t             m_pPort;
-
     //Create the mach port
-    wxIOCHECK(IOMasterPort(bootstrap_port, &m_pPort), "Could not create mach port");
+    mach_port_t             pPort;
+    if(IOMasterPort(bootstrap_port, &pPort) != kIOReturnSuccess)
+    {
+        wxLogSysError(wxT("Could not create mach port"));
+        return false;
+    }
 
     //Dictionary that will hold first
@@ -220,6 +238,9 @@
     //then later some registry properties from an iterator (see below)
     CFMutableDictionaryRef pDictionary = IOServiceMatching(kIOHIDDeviceKey);
-    wxCHECK_MSG( pDictionary, 0,
-                    _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
+    if(pDictionary == NULL)
+    {
+        wxLogSysError( _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
+        return false;
+    }
 
     //Here we'll filter down the services to what we want
@@ -241,23 +262,36 @@
     //Now get the maching services
     io_iterator_t pIterator;
-    wxIOCHECK(IOServiceGetMatchingServices(m_pPort, pDictionary, &pIterator), "No Matching HID Services");
+    if( IOServiceGetMatchingServices(pPort, 
+                        pDictionary, &pIterator) != kIOReturnSuccess )
+    {
+        wxLogSysError(_T("No Matching HID Services"));
+        return false;
+    }
 
+    //If the iterator doesn't exist there are no devices :)
     if ( !pIterator )
         return 0;
 
     //Now we iterate through them
-    io_object_t pObject;
-
     int nCount = 0;
-
+    io_object_t pObject;
     while ( (pObject = IOIteratorNext(pIterator)) != 0)
+    {
         ++nCount;
+        IOObjectRelease(pObject);
+    }
 
-    //iterator cleanup
+    //cleanup
     IOObjectRelease(pIterator);
+    mach_port_deallocate(mach_task_self(), pPort);
 
     return nCount;
 }//end Create()
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::AddCookie
+//
+// Adds a cookie to the internal cookie array from a CFType
+// ----------------------------------------------------------------------------
 void wxHIDDevice::AddCookie(CFTypeRef Data, int i)
 {
@@ -271,4 +305,10 @@
 }
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::AddCookieInQueue
+//
+// Adds a cookie to the internal cookie array from a CFType and additionally
+// adds it to the internal HID Queue
+// ----------------------------------------------------------------------------
 void wxHIDDevice::AddCookieInQueue(CFTypeRef Data, int i)
 {
@@ -279,4 +319,9 @@
 }
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::InitCookies
+//
+// Create the internal cookie array, optionally creating a HID Queue
+// ----------------------------------------------------------------------------
 void wxHIDDevice::InitCookies(size_t dwSize, bool bQueue)
 {
@@ -298,20 +343,35 @@
         }
     }
+    
+    //make sure that cookie array is clear
+    memset(m_pCookies, 0, sizeof(*m_pCookies) * dwSize);
 }
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::IsActive
+//
+// Returns true if a cookie of the device is active - for example if a key is
+// held down, joystick button pressed, caps lock active, etc..
+// ----------------------------------------------------------------------------
 bool wxHIDDevice::IsActive(int nIndex)
 {
-    wxASSERT(m_pCookies[nIndex] != NULL);
+    if(!HasElement(nIndex))
+    {
+        //cookie at index does not exist - getElementValue
+        //could return true which would be incorrect so we
+        //check here
+        return false;
+    }
+    
     IOHIDEventStruct Event;
     (*m_ppDevice)->getElementValue(m_ppDevice, m_pCookies[nIndex], &Event);
-/*
-    wxString ss;
-    ss << _T("[") << (int) m_pCookies[nIndex] << _T("] = ") << Event.value << _T("  SIZE:") << Event.longValueSize;
-
-    wxLogDebug(ss);
-*/
     return !!Event.value;
 }
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice::HasElement
+//
+// Returns true if the element in the internal cookie array exists
+// ----------------------------------------------------------------------------
 bool wxHIDDevice::HasElement(int nIndex)
 {
@@ -319,4 +379,9 @@
 }
 
+// ----------------------------------------------------------------------------
+// wxHIDDevice Destructor
+//
+// Frees all memory and objects from the structure
+// ----------------------------------------------------------------------------
 wxHIDDevice::~wxHIDDevice()
 {
@@ -340,8 +405,12 @@
 }
 
-// ---------------------------------------------------------------------------
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
 // wxHIDKeyboard
-// ---------------------------------------------------------------------------
+//
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
+//There are no right shift, alt etc. in the wx headers yet so just sort
+//of "define our own" for now
 enum
 {
@@ -350,24 +419,91 @@
     WXK_RCONTROL,
     WXK_RMENU
-
 };
 
-bool wxHIDKeyboard::Create()
+// ----------------------------------------------------------------------------
+// wxHIDKeyboard::GetCount [static]
+//
+// Get number of HID keyboards available
+// ----------------------------------------------------------------------------
+int wxHIDKeyboard::GetCount()
+{
+    return wxHIDDevice::GetCount(kHIDPage_GenericDesktop, 
+                               kHIDUsage_GD_Keyboard);
+}
+
+// ----------------------------------------------------------------------------
+// wxHIDKeyboard::Create
+//
+// Create the HID Keyboard
+// ----------------------------------------------------------------------------
+bool wxHIDKeyboard::Create(int nDev /* = 1*/)
+{
+    return wxHIDDevice::Create(kHIDPage_GenericDesktop, 
+                               kHIDUsage_GD_Keyboard,
+                               nDev);
+}
+
+// ----------------------------------------------------------------------------
+// wxHIDKeyboard::AddCookie
+//
+// Overloaded version of wxHIDDevice::AddCookie that simply does not 
+// add a cookie if a duplicate is found
+// ----------------------------------------------------------------------------
+void wxHIDKeyboard::AddCookie(CFTypeRef Data, int i)
 {
-    return wxHIDDevice::Create(kHIDPage_GenericDesktop, kHIDUsage_GD_Keyboard);
+    if(!HasElement(i))
+        wxHIDDevice::AddCookie(Data, i);
 }
 
-void wxHIDKeyboard::BuildCookies(wxCFArray& Array)
+// ----------------------------------------------------------------------------
+// wxHIDKeyboard::BuildCookies
+//
+// Callback from Create() to build the HID cookies for the internal cookie
+// array
+// ----------------------------------------------------------------------------
+void wxHIDKeyboard::BuildCookies(CFArrayRef Array)
 {
-    Array = CFDictionaryGetValue((CFDictionaryRef)Array[0], CFSTR(kIOHIDElementKey));
+    //Create internal cookie array 
     InitCookies(500);
+    
+    //Begin recursing in array
+    DoBuildCookies(Array);
+}
+
+void wxHIDKeyboard::DoBuildCookies(CFArrayRef Array)
+{
+    //Now go through each possible cookie
     int i,
         nUsage;
-    bool bEOTriggered = false;
-    for (i = 0; i < Array.Count(); ++i)
+//    bool bEOTriggered = false;
+    for (i = 0; i < CFArrayGetCount(Array); ++i)
+    {
+        const void* ref = CFDictionaryGetValue(
+                (CFDictionaryRef)CFArrayGetValueAtIndex(Array, i), 
+                CFSTR(kIOHIDElementKey)
+                                              );
+
+        if (ref != NULL)
+        {
+            DoBuildCookies((CFArrayRef) ref);
+        }
+        else
     {
+
+            //
+            // Get the usage #
+            //
         CFNumberGetValue(
-            (CFNumberRef) CFDictionaryGetValue((CFDictionaryRef) Array[i], CFSTR(kIOHIDElementUsageKey)),
-                kCFNumberLongType, &nUsage);
+                (CFNumberRef) 
+                    CFDictionaryGetValue((CFDictionaryRef) 
+                        CFArrayGetValueAtIndex(Array, i), 
+                        CFSTR(kIOHIDElementUsageKey)
+                                        ),
+                              kCFNumberLongType, 
+                              &nUsage);
+
+            //
+            // Now translate the usage # into a wx keycode
+            // 
 
         //
@@ -383,118 +519,105 @@
         // Something to spend a support request on, if I had one, LOL.
         //
-        if(nUsage == 0xE0)
-        {
-            if(bEOTriggered)
-               break;
-            bEOTriggered = true;
-        }
-/*
-        wxString msg;
-        int cookie;
-            CFNumberGetValue(
-                (CFNumberRef) CFDictionaryGetValue    ( (CFDictionaryRef) Array[i]
-                                        , CFSTR(kIOHIDElementCookieKey)
-                                        ),
-                kCFNumberIntType,
-                &cookie
-                );
+    //        if(nUsage == 0xE0)
+    //        {
+    //            if(bEOTriggered)
+    //               break;
+    //            bEOTriggered = true;
+    //        }
+            //Instead of that though we now just don't add duplicate keys
 
-        msg << wxT("KEY:") << nUsage << wxT("COOKIE:") << cookie;
-        wxLogDebug(msg);
-*/
-
         if (nUsage >= kHIDUsage_KeyboardA && nUsage <= kHIDUsage_KeyboardZ)
-            AddCookie(Array[i], 'A' + (nUsage - kHIDUsage_KeyboardA) );
+                AddCookie(CFArrayGetValueAtIndex(Array, i), 'A' + (nUsage - kHIDUsage_KeyboardA) );
         else if (nUsage >= kHIDUsage_Keyboard1 && nUsage <= kHIDUsage_Keyboard9)
-            AddCookie(Array[i], '1' + (nUsage - kHIDUsage_Keyboard1) );
+                AddCookie(CFArrayGetValueAtIndex(Array, i), '1' + (nUsage - kHIDUsage_Keyboard1) );
         else if (nUsage >= kHIDUsage_KeyboardF1 && nUsage <= kHIDUsage_KeyboardF12)
-            AddCookie(Array[i], WXK_F1 + (nUsage - kHIDUsage_KeyboardF1) );
+                AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_F1 + (nUsage - kHIDUsage_KeyboardF1) );
         else if (nUsage >= kHIDUsage_KeyboardF13 && nUsage <= kHIDUsage_KeyboardF24)
-            AddCookie(Array[i], WXK_F13 + (nUsage - kHIDUsage_KeyboardF13) );
+                AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_F13 + (nUsage - kHIDUsage_KeyboardF13) );
         else if (nUsage >= kHIDUsage_Keypad1 && nUsage <= kHIDUsage_Keypad9)
-            AddCookie(Array[i], WXK_NUMPAD1 + (nUsage - kHIDUsage_Keypad1) );
+                AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_NUMPAD1 + (nUsage - kHIDUsage_Keypad1) );
         else switch (nUsage)
         {
             //0's (wx & ascii go 0-9, but HID goes 1-0)
             case kHIDUsage_Keyboard0:
-                AddCookie(Array[i],'0');
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), '0');
                 break;
             case kHIDUsage_Keypad0:
-                AddCookie(Array[i],WXK_NUMPAD0);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_NUMPAD0);
                 break;
 
             //Basic
             case kHIDUsage_KeyboardReturnOrEnter:
-                AddCookie(Array[i], WXK_RETURN);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RETURN);
                 break;
             case kHIDUsage_KeyboardEscape:
-                AddCookie(Array[i], WXK_ESCAPE);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_ESCAPE);
                 break;
             case kHIDUsage_KeyboardDeleteOrBackspace:
-                AddCookie(Array[i], WXK_BACK);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_BACK);
                 break;
             case kHIDUsage_KeyboardTab:
-                AddCookie(Array[i], WXK_TAB);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_TAB);
                 break;
             case kHIDUsage_KeyboardSpacebar:
-                AddCookie(Array[i], WXK_SPACE);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_SPACE);
                 break;
             case kHIDUsage_KeyboardPageUp:
-                AddCookie(Array[i], WXK_PRIOR);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_PRIOR);
                 break;
             case kHIDUsage_KeyboardEnd:
-                AddCookie(Array[i], WXK_END);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_END);
                 break;
             case kHIDUsage_KeyboardPageDown:
-                AddCookie(Array[i], WXK_NEXT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_NEXT);
                 break;
             case kHIDUsage_KeyboardRightArrow:
-                AddCookie(Array[i], WXK_RIGHT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RIGHT);
                 break;
             case kHIDUsage_KeyboardLeftArrow:
-                AddCookie(Array[i], WXK_LEFT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_LEFT);
                 break;
             case kHIDUsage_KeyboardDownArrow:
-                AddCookie(Array[i], WXK_DOWN);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_DOWN);
                 break;
             case kHIDUsage_KeyboardUpArrow:
-                AddCookie(Array[i], WXK_UP);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_UP);
                 break;
 
             //LEDS
             case kHIDUsage_KeyboardCapsLock:
-                AddCookie(Array[i],WXK_CAPITAL);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_CAPITAL);
                 break;
             case kHIDUsage_KeypadNumLock:
-                AddCookie(Array[i],WXK_NUMLOCK);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_NUMLOCK);
                 break;
             case kHIDUsage_KeyboardScrollLock:
-                AddCookie(Array[i],WXK_SCROLL);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_SCROLL);
                 break;
 
             //Menu keys, Shift, other specials
             case kHIDUsage_KeyboardLeftControl:
-                AddCookie(Array[i],WXK_CONTROL);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_CONTROL);
                 break;
             case kHIDUsage_KeyboardLeftShift:
-                AddCookie(Array[i],WXK_SHIFT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_SHIFT);
                 break;
             case kHIDUsage_KeyboardLeftAlt:
-                AddCookie(Array[i],WXK_ALT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_ALT);
                 break;
             case kHIDUsage_KeyboardLeftGUI:
-                AddCookie(Array[i],WXK_MENU);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_MENU);
                 break;
             case kHIDUsage_KeyboardRightControl:
-                AddCookie(Array[i],WXK_RCONTROL);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RCONTROL);
                 break;
             case kHIDUsage_KeyboardRightShift:
-                AddCookie(Array[i],WXK_RSHIFT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RSHIFT);
                 break;
             case kHIDUsage_KeyboardRightAlt:
-                AddCookie(Array[i],WXK_RALT);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RALT);
                 break;
             case kHIDUsage_KeyboardRightGUI:
-                AddCookie(Array[i],WXK_RMENU);
+                    AddCookie(CFArrayGetValueAtIndex(Array, i), WXK_RMENU);
                 break;
 
@@ -503,15 +626,15 @@
             //not in wx keycodes - do nothing....
             break;
-        }
-    }
+            } //end mightly long switch
+        } //end if the current element is not an array...
+    } //end for loop for Array
 }//end buildcookies
 
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 //
-// wxGetKeyState
+// wxHIDModule
 //
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
-#include "wx/utils.h"
-#include "wx/module.h"
-
 class wxHIDModule : public wxModule
 {
@@ -519,15 +642,13 @@
 
     public:
-        static wxHIDKeyboard* sm_keyboard;
-
+        static wxArrayPtrVoid sm_keyboards;
         virtual bool OnInit()
         {
-            sm_keyboard = NULL;
             return true;
         }
         virtual void OnExit()
         {
-            if (sm_keyboard)
-                delete sm_keyboard;
+            for(size_t i = 0; i < sm_keyboards.GetCount(); ++i)
+                delete (wxHIDKeyboard*) sm_keyboards[i];
         }
 };
@@ -535,6 +656,12 @@
 IMPLEMENT_DYNAMIC_CLASS(wxHIDModule, wxModule)
 
-wxHIDKeyboard* wxHIDModule::sm_keyboard;
+wxArrayPtrVoid wxHIDModule::sm_keyboards;
 
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
+// wxGetKeyState()
+//
+// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
 bool wxGetKeyState (wxKeyCode key)
 {
@@ -542,39 +669,71 @@
         WXK_MBUTTON, wxT("can't use wxGetKeyState() for mouse buttons"));
 
-    if (!wxHIDModule::sm_keyboard)
+    if (wxHIDModule::sm_keyboards.GetCount() == 0)
     {
-        wxHIDModule::sm_keyboard = new wxHIDKeyboard();
-        bool bOK = wxHIDModule::sm_keyboard->Create();
-        wxASSERT(bOK);
-        if(!bOK)
+        int nKeyboards = wxHIDKeyboard::GetCount();
+        
+        for(int i = 1; i <= nKeyboards; ++i)
         {
-            delete wxHIDModule::sm_keyboard;
-            wxHIDModule::sm_keyboard = NULL;
-            return false;
+            wxHIDKeyboard* keyboard = new wxHIDKeyboard();
+            if(keyboard->Create(i))
+            {
+                wxHIDModule::sm_keyboards.Add(keyboard);
+            }
+            else
+            {
+                delete keyboard;
+                break;
+            }
         }
+
+        wxASSERT_MSG(wxHIDModule::sm_keyboards.GetCount() != 0,
+                     wxT("No keyboards found!"));
     }
 
+    for(size_t i = 0; i < wxHIDModule::sm_keyboards.GetCount(); ++i)
+    {
+        wxHIDKeyboard* keyboard = (wxHIDKeyboard*)
+                                wxHIDModule::sm_keyboards[i];
+        
     switch(key)
     {
     case WXK_SHIFT:
-        return wxHIDModule::sm_keyboard->IsActive(WXK_SHIFT) ||
-               wxHIDModule::sm_keyboard->IsActive(WXK_RSHIFT);
+            if( keyboard->IsActive(WXK_SHIFT) ||
+                   keyboard->IsActive(WXK_RSHIFT) )
+            {
+                return true;
+            }
         break;
     case WXK_ALT:
-        return wxHIDModule::sm_keyboard->IsActive(WXK_ALT) ||
-               wxHIDModule::sm_keyboard->IsActive(WXK_RALT);
+            if( keyboard->IsActive(WXK_ALT) ||
+                   keyboard->IsActive(WXK_RALT) )
+            {
+                return true;
+            }
         break;
     case WXK_CONTROL:
-        return wxHIDModule::sm_keyboard->IsActive(WXK_CONTROL) ||
-               wxHIDModule::sm_keyboard->IsActive(WXK_RCONTROL);
+            if( keyboard->IsActive(WXK_CONTROL) ||
+                   keyboard->IsActive(WXK_RCONTROL) )
+            {
+                return true;
+            }
         break;
     case WXK_MENU:
-        return wxHIDModule::sm_keyboard->IsActive(WXK_MENU) ||
-               wxHIDModule::sm_keyboard->IsActive(WXK_RMENU);
+            if( keyboard->IsActive(WXK_MENU) ||
+                   keyboard->IsActive(WXK_RMENU) )
+            {
+                return true;
+            }
         break;
     default:
-        return wxHIDModule::sm_keyboard->IsActive(key);
+            if( keyboard->IsActive(key) )
+            {
+                return true;
+            }
         break;
     }
+    }
+    
+    return false; //not down/error
 }
 
Index: src/mac/corefoundation/hidjoystick.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/corefoundation/hidjoystick.cpp,v
retrieving revision 1.8
diff -b -u -2 -r1.8 hidjoystick.cpp
--- src/mac/corefoundation/hidjoystick.cpp	2006/01/19 10:16:53	1.8
+++ src/mac/corefoundation/hidjoystick.cpp	2006/02/01 05:21:47
@@ -75,6 +75,6 @@
     
 	bool Create(int nWhich);
-	virtual void BuildCookies(wxCFArray& Array);
-	void MakeCookies(wxCFArray& Array);
+	virtual void BuildCookies(CFArrayRef Array);
+	void MakeCookies(CFArrayRef Array);
     IOHIDElementCookie* GetCookies();
     IOHIDQueueInterface** GetQueue();
@@ -146,5 +146,5 @@
     m_hid = new wxHIDJoystick();
 
-    if (m_hid->Create(m_joystick))
+    if (m_hid->Create(m_joystick+1)) //wxHIDDevice is 1-based while this is 0
     {
         m_thread = new wxJoystickThread(m_hid, m_joystick);
@@ -450,5 +450,7 @@
     
     if (nWhich <= nJoysticks)
-        return wxHIDDevice::Create(kHIDPage_GenericDesktop, kHIDUsage_GD_Joystick);
+        return wxHIDDevice::Create(kHIDPage_GenericDesktop, 
+                                   kHIDUsage_GD_Joystick, 
+                                   nWhich);
     else
         nWhich -= nJoysticks;
@@ -457,5 +459,7 @@
     
     if (nWhich <= nGamePads)
-        return wxHIDDevice::Create(kHIDPage_GenericDesktop, kHIDUsage_GD_GamePad);
+        return wxHIDDevice::Create(kHIDPage_GenericDesktop, 
+                                   kHIDUsage_GD_GamePad, 
+                                   nWhich);
     else
     return false;
@@ -472,11 +476,8 @@
 // BuildCookies.
 //---------------------------------------------------------------------------
-void wxHIDJoystick::BuildCookies(wxCFArray& Array)
+void wxHIDJoystick::BuildCookies(CFArrayRef Array)
 {
-	Array = CFDictionaryGetValue((CFDictionaryRef)Array[0], CFSTR(kIOHIDElementKey));
 	InitCookies(50, true);
 
-    memset(m_pCookies, 0, sizeof(*m_pCookies) * 50);
-
     //
     // I wasted two hours of my life on this line :(
@@ -492,26 +493,38 @@
 }//end buildcookies
 
-void wxHIDJoystick::MakeCookies(wxCFArray& Array)
+void wxHIDJoystick::MakeCookies(CFArrayRef Array)
 {
 	int i, nUsage, nPage;
 
-	for (i = 0; i < Array.Count(); ++i)
+	for (i = 0; i < CFArrayGetCount(Array); ++i)
     {
-        const void* ref = CFDictionaryGetValue((CFDictionaryRef)Array[i], CFSTR(kIOHIDElementKey));
+        const void* ref = CFDictionaryGetValue(
+                (CFDictionaryRef)CFArrayGetValueAtIndex(Array, i), 
+                CFSTR(kIOHIDElementKey)
+                                              );
 
         if (ref != NULL)
         {
-            wxCFArray newarray(ref);
-            MakeCookies(newarray);
+            MakeCookies((CFArrayRef) ref);
     }
         else
         {
             CFNumberGetValue(
-			(CFNumberRef) CFDictionaryGetValue((CFDictionaryRef) Array[i], CFSTR(kIOHIDElementUsageKey)), 
-				kCFNumberIntType, &nUsage);
+			    (CFNumberRef) 
+			        CFDictionaryGetValue( 
+			            (CFDictionaryRef) CFArrayGetValueAtIndex(Array, i),
+			            CFSTR(kIOHIDElementUsageKey)
+			                            ), 
+		        kCFNumberIntType, 
+				&nUsage    );
 			
             CFNumberGetValue(
-			(CFNumberRef) CFDictionaryGetValue((CFDictionaryRef) Array[i], CFSTR(kIOHIDElementUsagePageKey)), 
-				kCFNumberIntType, &nPage);
+			    (CFNumberRef) 
+			        CFDictionaryGetValue(
+			            (CFDictionaryRef) CFArrayGetValueAtIndex(Array, i), 
+			            CFSTR(kIOHIDElementUsagePageKey)
+			                            ), 
+				kCFNumberIntType, 
+				&nPage     );
 
 #if 0
@@ -519,5 +532,5 @@
 #endif
             if (nPage == kHIDPage_Button && nUsage <= 40)
-                AddCookieInQueue(Array[i], nUsage-1 );
+                AddCookieInQueue(CFArrayGetValueAtIndex(Array, i), nUsage-1 );
             else if (nPage == kHIDPage_GenericDesktop)
             {
@@ -526,22 +539,28 @@
                 {
                     case kHIDUsage_GD_X:
-                        AddCookieInQueue(Array[i], wxJS_AXIS_X);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMaxKey),
+                        AddCookieInQueue(CFArrayGetValueAtIndex(Array, i), wxJS_AXIS_X);
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMaxKey),
                                                  &m_nXMax);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMinKey),
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMinKey),
                                                  &m_nXMin);
                         break;                    
                     case kHIDUsage_GD_Y:
-                        AddCookieInQueue(Array[i], wxJS_AXIS_Y);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMaxKey),
+                        AddCookieInQueue(CFArrayGetValueAtIndex(Array, i), wxJS_AXIS_Y);
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMaxKey),
                                                  &m_nYMax);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMinKey),
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMinKey),
                                                  &m_nYMin);
                         break;
                     case kHIDUsage_GD_Z:
-                        AddCookieInQueue(Array[i], wxJS_AXIS_Z);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMaxKey),
+                        AddCookieInQueue(CFArrayGetValueAtIndex(Array, i), wxJS_AXIS_Z);
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMaxKey),
                                                  &m_nZMax);
-                        wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMinKey),
+                        wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                                 CFSTR(kIOHIDElementMinKey),
                                                  &m_nZMin);
                         break;
@@ -553,8 +572,10 @@
             {
                 //rudder...
-                AddCookieInQueue(Array[i], wxJS_AXIS_RUDDER );
-                wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMaxKey),
+                AddCookieInQueue(CFArrayGetValueAtIndex(Array, i), wxJS_AXIS_RUDDER );
+                wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                         CFSTR(kIOHIDElementMaxKey),
                                          &m_nRudderMax);
-                wxGetIntFromCFDictionary(Array[i], CFSTR(kIOHIDElementMinKey),
+                wxGetIntFromCFDictionary(CFArrayGetValueAtIndex(Array, i), 
+                                         CFSTR(kIOHIDElementMinKey),
                                          &m_nRudderMin);
             }
Index: include/wx/mac/corefoundation/hid.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/corefoundation/hid.h,v
retrieving revision 1.6
diff -b -u -2 -r1.6 hid.h
--- include/wx/mac/corefoundation/hid.h	2005/11/02 15:22:39	1.6
+++ include/wx/mac/corefoundation/hid.h	2006/02/01 05:21:48
@@ -9,4 +9,5 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
+
 // ===========================================================================
 // declarations
@@ -23,8 +24,4 @@
 #include "wx/string.h"
 
-// ---------------------------------------------------------------------------
-// definitions
-// ---------------------------------------------------------------------------
-
 //Mac OSX only
 #ifdef __DARWIN__
@@ -45,15 +42,11 @@
 #include <mach/mach.h> //this actually includes mach_port.h (see above)
 
-//Utility wrapper around CFArray
-class wxCFArray
-{
-public:
-	wxCFArray(CFTypeRef pData) : pArray((CFArrayRef) pData) {}
-	CFTypeRef operator [] (const int& nIndex) {return CFArrayGetValueAtIndex(pArray, nIndex); }
-	int Count() {return CFArrayGetCount(pArray);}
-private:
-	CFArrayRef pArray;
-};
+// ===========================================================================
+// definitions
+// ===========================================================================
+
 
+// ---------------------------------------------------------------------------
+// wxHIDDevice
 //
 //	A wrapper around OS X HID Manager procedures.
@@ -61,10 +54,10 @@
 //	Quite good, as is the sample program associated with it 
 //  (Depite the author's protests!).
+// ---------------------------------------------------------------------------
 class wxHIDDevice
 {
 public:
 	wxHIDDevice() : m_ppDevice(NULL), m_ppQueue(NULL), m_pCookies(NULL) {}
-	//kHIDPage_GenericDesktop
-	//kHIDUsage_GD_Joystick,kHIDUsage_GD_Mouse,kHIDUsage_GD_Keyboard
+
 	bool Create (int nClass = -1, int nType = -1, int nDev = 1);
     
@@ -79,10 +72,11 @@
 	//first call InitCookies to initialize the cookie
 	//array, then AddCookie to add a cookie at a certain point in an array
-	virtual void BuildCookies(wxCFArray& Array) = 0;
+	virtual void BuildCookies(CFArrayRef Array) = 0;
 		
 	//checks to see whether the cookie at nIndex is active (element value != 0)
 	bool IsActive(int nIndex);
     
-    //checks to see whether the cookie at nIndex exists
+	//checks to see whether an element in the internal cookie array
+	//exists
     bool HasElement(int nIndex);
 	
@@ -98,16 +92,23 @@
 	int		 				m_nProductId; //product id
 	int		 				m_nManufacturerId; //manufacturer id
-	mach_port_t 			m_pPort;
+	mach_port_t 			m_pPort;            //mach port to use
 };
 
+// ---------------------------------------------------------------------------
+// wxHIDKeyboard
+//
+// Semi-simple implementation that opens a connection to the first
+// keyboard of the machine. Used in wxGetKeyState.
+// ---------------------------------------------------------------------------
 class wxHIDKeyboard : public wxHIDDevice
 {
 public:
-	bool Create();
-	virtual void BuildCookies(wxCFArray& Array);
+    static int GetCount();
+	bool Create(int nDev = 1);
+	void AddCookie(CFTypeRef Data, int i);
+	virtual void BuildCookies(CFArrayRef Array);
+	void DoBuildCookies(CFArrayRef Array);
 };
 
 #endif //__DARWIN__
-
-#endif 
-        //WX_MACCARBONHID_H
\ No newline at end of file
+#endif //WX_MACCARBONHID_H
\ No newline at end of file

 	  	 

--- contrib/src/gizmos/ledctrl.cpp.decimal	2004-08-11 00:53:47.884994056 -0600
+++ contrib/src/gizmos/ledctrl.cpp	2004-08-11 00:54:17.799446368 -0600
@@ -259,9 +259,9 @@
 
     if (Digit == DIGITALL)
     {
-        const int R = LineColor.Red() / 3;
-        const int G = LineColor.Green() / 3;
-        const int B = LineColor.Blue() / 3;
+        const int R = LineColor.Red() / 16;
+        const int G = LineColor.Green() / 16;
+        const int B = LineColor.Blue() / 16;
 
         LineColor.Set(R, G, B);
     }
@@ -275,31 +275,31 @@
     if ((Digit & LINE1))
     {
         Dc.DrawLine(XPos + m_LineMargin*2, m_LineMargin,
-            XPos + m_LineLength, m_LineMargin);
+            XPos + m_LineLength + m_LineMargin*2, m_LineMargin);
     }
 
     if (Digit & LINE2)
     {
-        Dc.DrawLine(XPos + m_LineLength + m_LineMargin, m_LineMargin*2,
-            XPos + m_LineLength + m_LineMargin, m_LineLength + (m_LineMargin*2));
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineMargin*2,
+            XPos + m_LineLength + m_LineMargin*3, m_LineLength + (m_LineMargin*2));
     }
 
     if (Digit & LINE3)
     {
-        Dc.DrawLine(XPos + m_LineLength + m_LineMargin, m_LineLength + (m_LineMargin*4),
-            XPos + m_LineLength + m_LineMargin, m_LineLength*2 + (m_LineMargin*3));
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineLength + (m_LineMargin*4),
+            XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4));
     }
 
     if (Digit & LINE4)
     {
-        Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*4),
-            XPos + m_LineLength, m_LineLength*2 + (m_LineMargin*4));
+        Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*5),
+            XPos + m_LineLength + m_LineMargin*2, m_LineLength*2 + (m_LineMargin*5));
     }
 
     if (Digit & LINE5)
     {
         Dc.DrawLine(XPos + m_LineMargin, m_LineLength + (m_LineMargin*4),
-            XPos + m_LineMargin, m_LineLength*2 + (m_LineMargin*3));
+            XPos + m_LineMargin, m_LineLength*2 + (m_LineMargin*4));
     }
 
     if (Digit & LINE6)
@@ -311,13 +311,13 @@
     if (Digit & LINE7)
     {
         Dc.DrawLine(XPos + m_LineMargin*2, m_LineLength + (m_LineMargin*3),
-            XPos + m_LineMargin + m_LineLength - m_LineMargin, m_LineLength + (m_LineMargin*3));
+            XPos + m_LineMargin*2 + m_LineLength, m_LineLength + (m_LineMargin*3));
     }
 
     if (Digit & DECIMAL)
     {
-        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4),
-            XPos + m_LineLength + m_LineMargin*3, m_LineLength*2 + (m_LineMargin*4));
+        Dc.DrawLine(XPos + m_LineLength + m_LineMargin*4, m_LineLength*2 + (m_LineMargin*5),
+            XPos + m_LineLength + m_LineMargin*4, m_LineLength*2 + (m_LineMargin*5));
     }
 
     Dc.SetPen(wxNullPen);
@@ -326,17 +326,39 @@
 
 void wxLEDNumberCtrl::RecalcInternals(const wxSize &CurrentSize)
 {
+    // Dimensions of LED segments
+    //
+    // Size of character is based on the HEIGH of the widget, NOT the width.
+    // Segment height is calculated as follows:
+    // Each segment is m_LineLength pixels long.
+    // There is m_LineMargin pixels at the top and bottom of each line segment
+    // There is m_LineMargin pixels at the top and bottom of each digit
+    //
+    //  Therefore, the heigth of each character is:
+    //  m_LineMargin                            : Top digit boarder
+    //  m_LineMargin+m_LineLength+m_LineMargin  : Top half of segment
+    //  m_LineMargin+m_LineLength+m_LineMargin  : Bottom half of segment
+    //  m_LineMargin                            : Bottom digit boarder
+    //  ----------------------
+    //  m_LineMargin*6 + m_LineLength*2 == Total height of digit.
+    //  Therefore, (m_LineMargin*6 + m_LineLength*2) must equal Height
+    //
+    //  Spacing between characters can then be calculated as follows:
+    //  m_LineMargin                            : before the digit,
+    //  m_LineMargin+m_LineLength+m_LineMargin  : for the digit width
+    //  m_LineMargin                            : after the digit
+    //  = m_LineMargin*4 + m_LineLength
     const int Height = CurrentSize.GetHeight();
 
-    if ((Height * 0.07) < 1)
+    if ((Height * 0.075) < 1)
         m_LineMargin = 1;
     else
-        m_LineMargin = (int)(Height * 0.07);
+        m_LineMargin = (int)(Height * 0.075);
 
-    if ((Height * 0.35) < 1)
+    if ((Height * 0.275) < 1)
         m_LineLength = 1;
     else
-        m_LineLength = (int)(Height * 0.35);
+        m_LineLength = (int)(Height * 0.275);
 
     m_LineWidth = m_LineMargin;
 

 	  	 

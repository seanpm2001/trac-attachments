Index: include/wx/defs.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/defs.h,v
retrieving revision 1.553
diff -bu2 -r1.553 include/wx/defs.h
--- include/wx/defs.h
+++ include/wx/defs.h
@@ -1657,16 +1657,4 @@
 #define wxLI_VERTICAL           wxVERTICAL

-/*
- * wxProgressDialog flags
- */
-#define wxPD_CAN_ABORT          0x0001
-#define wxPD_APP_MODAL          0x0002
-#define wxPD_AUTO_HIDE          0x0004
-#define wxPD_ELAPSED_TIME       0x0008
-#define wxPD_ESTIMATED_TIME     0x0010
-#define wxPD_SMOOTH             0x0020
-#define wxPD_REMAINING_TIME     0x0040
-#define wxPD_CAN_SKIP           0x0080
-

 /*
Index: include/wx/gauge.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gauge.h,v
retrieving revision 1.28
diff -bu2 -r1.28 include/wx/gauge.h
--- include/wx/gauge.h
+++ include/wx/gauge.h
@@ -34,4 +34,11 @@
 #endif // WXWIN_COMPATIBILITY_2_6

+// GTK and Mac always have native implementation of the indeterminate mode
+// wxMSW has native implementation only if comctl32.dll >= 6.00
+#if !defined(__WXGTK20__) && !defined(__WXMAC__) && !defined(__WXCOCOA__)
+    #define wxGAUGE_EMULATE_INDETERMINATE_MODE 1
+#else
+    #define wxGAUGE_EMULATE_INDETERMINATE_MODE 0
+#endif

 extern WXDLLEXPORT_DATA(const wxChar) wxGaugeNameStr[];
@@ -56,16 +63,19 @@
                 const wxString& name = wxGaugeNameStr);

+    // determinate mode API
+
     // set/get the control range
     virtual void SetRange(int range);
     virtual int GetRange() const;

-    // position
     virtual void SetValue(int pos);
     virtual int GetValue() const;

+    // indeterminate mode API
+    virtual void UpdateIndeterminate();
+
     // simple accessors
     bool IsVertical() const { return HasFlag(wxGA_VERTICAL); }

-
     // appearance params (not implemented for most ports)
     virtual void SetShadowWidth(int w);
@@ -85,4 +95,8 @@
     int m_gaugePos;

+#if wxGAUGE_EMULATE_INDETERMINATE_MODE
+    int m_nDirection;       // can be wxRIGHT or wxLEFT
+#endif
+
     DECLARE_NO_COPY_CLASS(wxGaugeBase)
 };
Index: include/wx/progdlg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/progdlg.h,v
retrieving revision 1.3
diff -bu2 -r1.3 include/wx/progdlg.h
--- include/wx/progdlg.h
+++ include/wx/progdlg.h
@@ -15,4 +15,17 @@
 #include "wx/defs.h"

+/*
+ * wxProgressDialog flags
+ */
+#define wxPD_CAN_ABORT          0x0001
+#define wxPD_APP_MODAL          0x0002
+#define wxPD_AUTO_HIDE          0x0004
+#define wxPD_ELAPSED_TIME       0x0008
+#define wxPD_ESTIMATED_TIME     0x0010
+#define wxPD_SMOOTH             0x0020
+#define wxPD_REMAINING_TIME     0x0040
+#define wxPD_CAN_SKIP           0x0080
+
+
 #ifdef __WXPALMOS__
     #include "wx/palmos/progdlg.h"
Index: include/wx/generic/progdlgg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/progdlgg.h,v
retrieving revision 1.38
diff -bu2 -r1.38 include/wx/generic/progdlgg.h
--- include/wx/generic/progdlgg.h
+++ include/wx/generic/progdlgg.h
@@ -14,4 +14,5 @@

 #include "wx/defs.h"
+#include "wx/progdlg.h"

 #if wxUSE_PROGRESSDLG
@@ -53,4 +54,9 @@
    */
    virtual bool Update(int value, const wxString& newmsg = wxEmptyString, bool *skip = NULL);
+
+    /* Switches the dialog to use a gauge in indeterminate mode and calls
+       wxGauge::Update() to show to the user a bit of progress */
+    virtual bool UpdateIndeterminate(const wxString& newmsg = wxEmptyString, bool *skip = NULL);
+
     // Must provide overload to avoid hiding it (and warnings about it)
     virtual void Update() { wxDialog::Update(); }
@@ -83,4 +89,7 @@
    wxStaticText *CreateLabel(const wxString& text, wxSizer *sizer);

+    // updates the label message
+   void UpdateMessage(const wxString &newmsg);
+
    // shortcuts for enabling buttons
    void EnableClose();

Index: include/wx/gtk/gauge.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/gauge.h,v
retrieving revision 1.25
diff -bu2 -r1.25 include/wx/gtk/gauge.h
--- include/wx/gtk/gauge.h
+++ include/wx/gtk/gauge.h
@@ -44,11 +44,17 @@
     void SetShadowWidth( int WXUNUSED(w) ) { }
     void SetBezelFace( int WXUNUSED(w) ) { }
-    void SetRange( int r );
-    void SetValue( int pos );
     int GetShadowWidth() const { return 0; };
     int GetBezelFace() const { return 0; };
+
+    // determinate mode API
+    void SetRange( int r );
+    void SetValue( int pos );
+
     int GetRange() const;
     int GetValue() const;

+    // indeterminate mode API
+    virtual void UpdateIndeterminate();
+
     bool IsVertical() const { return HasFlag(wxGA_VERTICAL); }

Index: include/wx/mac/carbon/gauge.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/gauge.h,v
retrieving revision 1.7
diff -bu2 -r1.7 include/wx/mac/carbon/gauge.h
--- include/wx/mac/carbon/gauge.h
+++ include/wx/mac/carbon/gauge.h
@@ -46,4 +46,7 @@
     virtual void SetValue(int pos);
     virtual int  GetValue() const ;
+
+    void UpdateIndeterminate();
+
  protected:
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxGauge)
Index: include/wx/mac/classic/gauge.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/classic/gauge.h,v
retrieving revision 1.5
diff -bu2 -r1.5 include/wx/mac/classic/gauge.h
--- include/wx/mac/classic/gauge.h
+++ include/wx/mac/classic/gauge.h
@@ -53,4 +53,6 @@
   int GetValue() const ;

+  void UpdateIndeterminate();
+
   virtual void Command(wxCommandEvent& WXUNUSED(event)) {} ;

Index: src/common/gaugecmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/gaugecmn.cpp,v
retrieving revision 1.11
diff -bu2 -r1.11 src/common/gaugecmn.cpp
--- src/common/gaugecmn.cpp
+++ src/common/gaugecmn.cpp
@@ -67,4 +67,7 @@
     SetRange(range);
     SetValue(0);
+#if wxGAUGE_EMULATE_INDETERMINATE_MODE
+    m_nDirection = wxRIGHT;
+#endif

     return true;
@@ -72,5 +75,5 @@

 // ----------------------------------------------------------------------------
-// wxGauge range/position
+// wxGauge determinate mode range/position
 // ----------------------------------------------------------------------------

@@ -96,4 +99,37 @@

 // ----------------------------------------------------------------------------
+// wxGauge indeterminate mode
+// ----------------------------------------------------------------------------
+
+void wxGaugeBase::UpdateIndeterminate()
+{
+#if wxGAUGE_EMULATE_INDETERMINATE_MODE
+    // simulate indeterminate mode
+    int curr = GetValue(), max = GetRange();
+
+    if (m_nDirection == wxRIGHT)
+    {
+        if (curr < max)
+            SetValue(curr + 1);
+        else
+        {
+            SetValue(max - 1);
+            m_nDirection = wxLEFT;
+        }
+    }
+    else
+    {
+        if (curr > 0)
+            SetValue(curr - 1);
+        else
+        {
+            SetValue(1);
+            m_nDirection = wxRIGHT;
+        }
+    }
+#endif
+}
+
+// ----------------------------------------------------------------------------
 // wxGauge appearance params
 // ----------------------------------------------------------------------------
Index: src/generic/progdlgg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/progdlgg.cpp,v
retrieving revision 1.96
diff -bu2 -r1.96 src/generic/progdlgg.cpp
--- src/generic/progdlgg.cpp
+++ src/generic/progdlgg.cpp
@@ -41,5 +41,5 @@
 #endif

-#include "wx/generic/progdlgg.h"
+#include "wx/progdlg.h"

 // ---------------------------------------------------------------------------
@@ -309,5 +309,5 @@
     locsizer->Add(label, 1, wxALIGN_LEFT);
     sizer->Add(locsizer, 0, wxALIGN_LEFT | wxTOP | wxLEFT, LAYOUT_MARGIN);
-#elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__)
+#elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
     // label and time centered in one row
     locsizer->Add(dummy, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT));
@@ -346,10 +346,5 @@
     }

-    if ( !newmsg.empty() && newmsg != m_msg->GetLabel() )
-    {
-        m_msg->SetLabel(newmsg);
-
-        wxYieldIfNeeded() ;
-    }
+    UpdateMessage(newmsg);

     if ( (m_elapsed || m_remaining || m_estimated) && (value != 0) )
@@ -464,4 +459,37 @@
 }

+bool
+wxProgressDialog::UpdateIndeterminate(const wxString& newmsg, bool *skip)
+{
+    wxASSERT_MSG( m_gauge, wxT("cannot update non existent dialog") );
+
+    // show a bit of progress
+    m_gauge->UpdateIndeterminate();
+
+    UpdateMessage(newmsg);
+
+    if (m_elapsed || m_remaining || m_estimated)
+    {
+        unsigned long elapsed = wxGetCurrentTime() - m_timeStart;
+
+        SetTimeLabel(elapsed, m_elapsed);
+        SetTimeLabel((unsigned long)-1, m_estimated);
+        SetTimeLabel((unsigned long)-1, m_remaining);
+    }
+
+    // we have to yield because not only we want to update the display but
+    // also to process the clicks on the cancel and skip buttons
+    wxYieldIfNeeded() ;
+
+    if ( (m_skip) && (skip != NULL) && (*skip == false) )
+    {
+        *skip = true;
+        m_skip = false;
+        EnableSkip();
+    }
+
+    return m_state != Canceled;
+}
+
 void wxProgressDialog::Resume()
 {
@@ -576,8 +604,16 @@
     {
         wxString s;
+
+        if (val != (unsigned long)-1)
+        {
         unsigned long hours = val / 3600;
         unsigned long minutes = (val % 3600) / 60;
         unsigned long seconds = val % 60;
         s.Printf(wxT("%lu:%02lu:%02lu"), hours, minutes, seconds);
+        }
+        else
+        {
+            s = _("Unknown");
+        }

         if ( s != label->GetLabel() )
@@ -634,3 +670,13 @@
 }

+void wxProgressDialog::UpdateMessage(const wxString &newmsg)
+{
+    if ( !newmsg.empty() && newmsg != m_msg->GetLabel() )
+    {
+        m_msg->SetLabel(newmsg);
+
+        wxYieldIfNeeded() ;
+    }
+}
+
 #endif // wxUSE_PROGRESSDLG
Index: src/gtk/gauge.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/gauge.cpp,v
retrieving revision 1.35
diff -bu2 -r1.35 src/gtk/gauge.cpp
--- src/gtk/gauge.cpp
+++ src/gtk/gauge.cpp
@@ -50,4 +50,7 @@
     }

+    // when using the gauge in indeterminate mode, we need this:
+    gtk_progress_bar_set_pulse_step(GTK_PROGRESS_BAR (m_widget), 0.05);
+
     m_parent->DoAddChild( this );

@@ -106,4 +109,9 @@
 }

+void wxGauge::UpdateIndeterminate()
+{
+    gtk_progress_bar_pulse(GTK_PROGRESS_BAR (m_widget));
+}
+
 wxVisualAttributes wxGauge::GetDefaultAttributes() const
 {
Index: src/mac/carbon/gauge.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/gauge.cpp,v
retrieving revision 1.31
diff -bu2 -r1.31 src/mac/carbon/gauge.cpp
--- src/mac/carbon/gauge.cpp
+++ src/mac/carbon/gauge.cpp
@@ -96,4 +96,12 @@
 }

+void wxGauge::Update()
+{
+    if ( m_peer && m_peer->Ok() )
+    {
+        // need to use the animate() method of NSProgressIndicator Class here
+    }
+}
+
 #endif // wxUSE_GAUGE

Index: src/mac/classic/gauge.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/classic/gauge.cpp,v
retrieving revision 1.8
diff -bu2 -r1.8 src/mac/classic/gauge.cpp
--- src/mac/classic/gauge.cpp
+++ src/mac/classic/gauge.cpp
@@ -73,4 +73,9 @@
 }

+void wxGauge::Update()
+{
+    // need to use the animate() method of NSProgressIndicator Class here
+}
+
 int wxGauge::GetShadowWidth() const
 {
Index: src/msw/gauge95.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/gauge95.cpp,v
retrieving revision 1.52
diff -bu2 -r1.52 src/msw/gauge95.cpp
--- src/msw/gauge95.cpp
+++ src/msw/gauge95.cpp
@@ -58,4 +58,12 @@
 #endif

+#ifndef PBS_MARQUEE
+    #define PBS_MARQUEE             0x08
+#endif
+
+#ifndef PBM_SETMARQUEE
+    #define PBM_SETMARQUEE          (WM_USER+10)
+#endif
+
 // ----------------------------------------------------------------------------
 // wxWin macros
@@ -145,4 +153,7 @@
     SetRange(range);

+    // in case we need to emulate indeterminate mode...
+    m_nDirection = wxRIGHT;
+
     return true;
 }
@@ -181,4 +192,7 @@
 void wxGauge95::SetRange(int r)
 {
+    // switch to determinate mode if required
+    SetDeterminateMode();
+
     m_rangeMax = r;

@@ -193,4 +207,7 @@
 void wxGauge95::SetValue(int pos)
 {
+    // switch to determinate mode if required
+    SetDeterminateMode();
+
     m_gaugePos = pos;

@@ -218,3 +235,42 @@
 }

+void wxGauge95::SetIndeterminateMode()
+{
+    // add the PBS_MARQUEE style to the progress bar
+    LONG style = ::GetWindowLong(GetHwnd(), GWL_STYLE);
+    if ((style & PBS_MARQUEE) == 0)
+        ::SetWindowLong(GetHwnd(), GWL_STYLE, style|PBS_MARQUEE);
+
+    // now the control can only run in indeterminate mode
+}
+
+void wxGauge95::SetDeterminateMode()
+{
+    // remove the PBS_MARQUEE style to the progress bar
+    LONG style = ::GetWindowLong(GetHwnd(), GWL_STYLE);
+    if ((style & PBS_MARQUEE) != 0)
+        ::SetWindowLong(GetHwnd(), GWL_STYLE, style & ~PBS_MARQUEE);
+
+    // now the control can only run in determinate mode
+}
+
+void wxGauge95::UpdateIndeterminate()
+{
+    if (wxApp::GetComCtl32Version() >= 600)
+    {
+        // switch to indeterminate mode if required
+        SetIndeterminateMode();
+
+        // NOTE: when in indeterminate mode, the PBM_SETPOS message will just make
+        //       the bar's blocks move a bit and the WPARAM value is just ignored
+        //       so that we can safely use zero
+        SendMessage(GetHwnd(), (UINT) PBM_SETPOS, (WPARAM)0, (LPARAM)0);
+    }
+    else
+    {
+        // emulate indeterminate mode
+        wxGaugeBase::UpdateIndeterminate();
+    }
+}
+
 #endif // wxUSE_GAUGE

 	  	 

Index: samples/dialogs/dialogs.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/dialogs/dialogs.cpp,v
retrieving revision 1.154
diff -bu2 -r1.154 samples/dialogs/dialogs.cpp
--- samples/dialogs/dialogs.cpp
+++ samples/dialogs/dialogs.cpp
@@ -1082,6 +1082,7 @@
                             wxPD_ELAPSED_TIME |
                             wxPD_ESTIMATED_TIME |
-                            wxPD_REMAINING_TIME |
-                            wxPD_SMOOTH);
+                            wxPD_REMAINING_TIME
+                            //wxPD_SMOOTH - makes indeterminate mode bar on WinXP very small
+                            );
 
     bool cont = true;
@@ -1112,13 +1113,27 @@
         wxString msg;
 
+        // test both behaviours of wxProgressDialog:
+        // determinate mode for first 33% and last 33% of the time
+        // indeterminate mode from 33% to 66% of the progress
+        const int firstpart = max /3,
+                  secondpart = 2 * max /3;
+        bool determinate = i < firstpart || i > secondpart;
+        bool indeterminate = !determinate;
+
         if ( i == max )
         {
             msg = _T("That's all, folks!");
         }
-        else if ( i > max / 2 )
+        else if ( indeterminate )
+        {
+            msg = _T("Now test indeterminate mode");
+        }
+        else if ( i > secondpart )
         {
-            msg = _T("Only a half left (very long message)!");
+            msg = _T("Back to determinate mode");
         }
 
+        if (determinate)
+        {
 #if wxUSE_STOPWATCH && wxUSE_LONGLONG
         if ( (i % (max/100)) == 0 ) // // only 100 updates, this makes it much faster
@@ -1129,4 +1144,16 @@
         cont = dialog.Update(i, msg, &skip);
 #endif
+        }
+        else
+        {
+#if wxUSE_STOPWATCH && wxUSE_LONGLONG
+            if ( (i % (max/100)) == 0 ) // // only 100 updates, this makes it much faster
+            {
+                cont = dialog.UpdateIndeterminate(msg, &skip);
+            }
+#else
+            cont = dialog.UpdateIndeterminate(msg, &skip);
+#endif
+        }
 
         if ( !cont )
Index: samples/widgets/gauge.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/widgets/gauge.cpp,v
retrieving revision 1.20
diff -bu2 -r1.20 samples/widgets/gauge.cpp
--- samples/widgets/gauge.cpp
+++ samples/widgets/gauge.cpp
@@ -55,4 +55,5 @@
     GaugePage_Reset = wxID_HIGHEST,
     GaugePage_Progress,
+    GaugePage_IndeterminateProgress,
     GaugePage_Clear,
     GaugePage_SetValue,
@@ -62,4 +63,5 @@
     GaugePage_RangeText,
     GaugePage_Timer,
+    GaugePage_IndeterminateTimer,
     GaugePage_Gauge
 };
@@ -85,4 +87,5 @@
     void OnButtonReset(wxCommandEvent& event);
     void OnButtonProgress(wxCommandEvent& event);
+    void OnButtonIndeterminateProgress(wxCommandEvent& event);
     void OnButtonClear(wxCommandEvent& event);
     void OnButtonSetValue(wxCommandEvent& event);
@@ -98,4 +101,5 @@
 
     void OnProgressTimer(wxTimerEvent& event);
+    void OnIndeterminateProgressTimer(wxTimerEvent& event);
 
     // reset the gauge parameters
@@ -105,6 +109,9 @@
     void CreateGauge();
 
+    // start progress timer
+    void StartTimer(wxButton*);
+
     // stop the progress timer
-    void StopTimer();
+    void StopTimer(wxButton*);
 
     // the gauge range
@@ -141,4 +148,5 @@
     EVT_BUTTON(GaugePage_Reset, GaugeWidgetsPage::OnButtonReset)
     EVT_BUTTON(GaugePage_Progress, GaugeWidgetsPage::OnButtonProgress)
+    EVT_BUTTON(GaugePage_IndeterminateProgress, GaugeWidgetsPage::OnButtonIndeterminateProgress)
     EVT_BUTTON(GaugePage_Clear, GaugeWidgetsPage::OnButtonClear)
     EVT_BUTTON(GaugePage_SetValue, GaugeWidgetsPage::OnButtonSetValue)
@@ -155,4 +163,5 @@
 
     EVT_TIMER(GaugePage_Timer, GaugeWidgetsPage::OnProgressTimer)
+    EVT_TIMER(GaugePage_IndeterminateTimer, GaugeWidgetsPage::OnIndeterminateProgressTimer)
 END_EVENT_TABLE()
 
@@ -231,4 +240,7 @@
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
+    btn = new wxButton(this, GaugePage_IndeterminateProgress, _T("Simulate undeterminate job"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
     btn = new wxButton(this, GaugePage_Clear, _T("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
@@ -303,4 +315,44 @@
 }
 
+void GaugeWidgetsPage::StartTimer(wxButton *clicked)
+{
+    static const int INTERVAL = 300;
+
+    wxLogMessage(_T("Launched progress timer (interval = %d ms)"), INTERVAL);
+
+    m_timer = new wxTimer(this,
+        clicked->GetId() == GaugePage_Progress ? GaugePage_Timer : GaugePage_IndeterminateTimer);
+    m_timer->Start(INTERVAL);
+
+    clicked->SetLabel(_T("&Stop timer"));
+
+    if (clicked->GetId() == GaugePage_Progress)
+        FindWindow(GaugePage_IndeterminateProgress)->Disable();
+    else
+        FindWindow(GaugePage_Progress)->Disable();
+}
+
+void GaugeWidgetsPage::StopTimer(wxButton *clicked)
+{
+    wxCHECK_RET( m_timer, _T("shouldn't be called") );
+
+    m_timer->Stop();
+    delete m_timer;
+    m_timer = NULL;
+
+    if (clicked->GetId() == GaugePage_Progress)
+    {
+        clicked->SetLabel(_T("Simulate &progress"));
+        FindWindow(GaugePage_IndeterminateProgress)->Enable();
+    }
+    else
+    {
+        clicked->SetLabel(_T("Simulate undeterminate job"));
+        FindWindow(GaugePage_Progress)->Enable();
+    }
+
+    wxLogMessage(_T("Progress finished."));
+}
+
 // ----------------------------------------------------------------------------
 // event handlers
@@ -316,19 +368,27 @@
 void GaugeWidgetsPage::OnButtonProgress(wxCommandEvent& event)
 {
+    wxButton *b = (wxButton *)event.GetEventObject();
     if ( !m_timer )
     {
-        static const int INTERVAL = 300;
-
-        wxLogMessage(_T("Launched progress timer (interval = %d ms)"), INTERVAL);
+        StartTimer(b);
+    }
+    else // stop the running timer
+    {
+        StopTimer(b);
 
-        m_timer = new wxTimer(this, GaugePage_Timer);
-        m_timer->Start(INTERVAL);
+        wxLogMessage(_T("Stopped the timer."));
+    }
+}
 
-        wxButton *btn = (wxButton *)event.GetEventObject();
-        btn->SetLabel(_T("&Stop timer"));
+void GaugeWidgetsPage::OnButtonIndeterminateProgress(wxCommandEvent& event)
+{
+    wxButton *b = (wxButton *)event.GetEventObject();
+    if ( !m_timer )
+    {
+        StartTimer(b);
     }
     else // stop the running timer
     {
-        StopTimer();
+        StopTimer(b);
 
         wxLogMessage(_T("Stopped the timer."));
@@ -391,27 +451,19 @@
     else // reached the end
     {
-        StopTimer();
+        wxButton *btn = (wxButton *)FindWindow(GaugePage_Progress);
+        wxCHECK_RET( btn, _T("no progress button?") );
+
+        StopTimer(btn);
     }
 }
 
-void GaugeWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
+void GaugeWidgetsPage::OnIndeterminateProgressTimer(wxTimerEvent& WXUNUSED(event))
 {
-    event.SetText( wxString::Format(_T("%d"), m_gauge->GetValue()));
+    m_gauge->UpdateIndeterminate();
 }
 
-void GaugeWidgetsPage::StopTimer()
+void GaugeWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    wxCHECK_RET( m_timer, _T("shouldn't be called") );
-
-    m_timer->Stop();
-    delete m_timer;
-    m_timer = NULL;
-
-    wxButton *btn = (wxButton *)FindWindow(GaugePage_Progress);
-    wxCHECK_RET( btn, _T("no progress button?") );
-
-    btn->SetLabel(_T("Simulate &progress"));
-
-    wxLogMessage(_T("Progress finished."));
+    event.SetText( wxString::Format(_T("%d"), m_gauge->GetValue()));
 }
 

 	  	 

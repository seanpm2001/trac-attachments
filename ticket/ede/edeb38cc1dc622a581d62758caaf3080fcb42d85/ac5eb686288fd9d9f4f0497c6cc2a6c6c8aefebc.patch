Index: src/gtk/renderer.cpp
===================================================================
--- src/gtk/renderer.cpp	(revision 47304)
+++ src/gtk/renderer.cpp	(working copy)
@@ -107,7 +107,7 @@
     static GtkWidget *GetCheckButtonWidget();
 
     // Used by DrawHeaderButton
-    static GtkWidget *GetHeaderButtonWidget();
+    static GtkWidget *GetHeaderButtonWidget(int type);
 };
 
 // ============================================================================
@@ -185,9 +185,11 @@
 // still a gtk_button the themes will typically differentiate and draw them
 // differently if the button is in a treeview.
 GtkWidget *
-wxRendererGTK::GetHeaderButtonWidget()
+wxRendererGTK::GetHeaderButtonWidget(int type)
 {
     static GtkWidget *s_button = NULL;
+    static GtkWidget *s_button_first = NULL;
+    static GtkWidget *s_button_last = NULL;
     
     if ( !s_button )
     {
@@ -196,10 +198,21 @@
         GtkWidget* treewidget = GetTreeWidget();
         GtkTreeViewColumn*  column = gtk_tree_view_column_new();
         gtk_tree_view_append_column(GTK_TREE_VIEW(treewidget), column);
+        s_button_first = column->button;
+        column = gtk_tree_view_column_new();
+        gtk_tree_view_append_column(GTK_TREE_VIEW(treewidget), column);
         s_button = column->button;
+        column = gtk_tree_view_column_new();
+        gtk_tree_view_append_column(GTK_TREE_VIEW(treewidget), column);
+        s_button_last = column->button;
     }
 
-    return s_button;
+    if (type & wxCONTROL_HEADER_FIRST)
+        return s_button_first;
+    else if (type & wxCONTROL_HEADER_LAST)
+        return s_button_last;
+    else
+        return s_button;
 }
 
 // ----------------------------------------------------------------------------
@@ -215,7 +228,7 @@
                                 wxHeaderButtonParams* params)
 {
 
-    GtkWidget *button = GetHeaderButtonWidget();
+    GtkWidget *button = GetHeaderButtonWidget(flags & (wxCONTROL_HEADER_FIRST | wxCONTROL_HEADER_LAST));
     
     GdkWindow* gdk_window = dc.GetGDKWindow();
     wxASSERT_MSG( gdk_window,
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 47304)
+++ src/generic/listctrl.cpp	(working copy)
@@ -1810,7 +1810,7 @@
 
         // the width of the rect to draw: make it smaller to fit entirely
         // inside the column rect
-#ifdef __WXMAC__
+#if defined(__WXMAC__) || defined(__WXGTK__)
         int cw = wCol;
         int ch = h;
 #else
@@ -1819,6 +1819,8 @@
 #endif
 
         int flags = 0;
+        if (!i)
+            flags |= wxCONTROL_HEADER_FIRST;
         if (!m_parent->IsEnabled())
             flags |= wxCONTROL_DISABLED;
 
@@ -1909,6 +1911,22 @@
 
         x += wCol;
     }
+#ifdef __WXGTK__
+    if (numColumns && x < w)
+    {
+        int flags = wxCONTROL_HEADER_LAST;
+        if (!m_parent->IsEnabled())
+            flags |= wxCONTROL_DISABLED;
+
+        wxRendererNative::Get().DrawHeaderButton
+                                (
+                                    this,
+                                    dc,
+                                    wxRect(x, HEADER_OFFSET_Y, w - x, h),
+                                    flags
+                                );
+    }
+#endif
 }
 
 void wxListHeaderWindow::DrawCurrent()
Index: include/wx/renderer.h
===================================================================
--- include/wx/renderer.h	(revision 47304)
+++ include/wx/renderer.h	(working copy)
@@ -62,8 +62,13 @@
     wxCONTROL_CHECKABLE  = 0x00000080,  // (menu) item can be checked
     wxCONTROL_UNDETERMINED = wxCONTROL_CHECKABLE, // (check) undetermined state
 
-    wxCONTROL_FLAGS_MASK = 0x000000ff,
+    // Only set these for DrawHeaderControl, indicates if the control
+    // is either the first or the last in the header
+    wxCONTROL_HEADER_FIRST = 0x00000100,
+    wxCONTROL_HEADER_LAST = 0x00000200,
 
+    wxCONTROL_FLAGS_MASK = 0x0000003ff,
+
     // this is a pseudo flag not used directly by wxRenderer but rather by some
     // controls internally
     wxCONTROL_DIRTY      = 0x80000000
Index: samples/listctrl/listtest.cpp
===================================================================
--- samples/listctrl/listtest.cpp	(revision 47304)
+++ samples/listctrl/listtest.cpp	(working copy)
@@ -744,6 +744,11 @@
 void MyListCtrl::OnColClick(wxListEvent& event)
 {
     int col = event.GetColumn();
+    if (col == -1)
+    {
+        wxLogMessage( wxT("Clicked header outside of a column") );
+        return;
+    }
 
     // set or unset image
     static bool x = false;

 	  	 

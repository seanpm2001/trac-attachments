Index: src/msw/mediactrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/mediactrl.cpp,v
retrieving revision 1.59
diff -b -u -2 -r1.59 mediactrl.cpp
--- src/msw/mediactrl.cpp	2005/10/28 01:08:03	1.59
+++ src/msw/mediactrl.cpp	2005/11/11 00:17:38
@@ -53,4 +53,6 @@
 #include "wx/dynlib.h"
 
+#include "wx/msw/registry.h" //QuickTime dll finding
+
 //---------------------------------------------------------------------------
 // Externals (somewhere in src/msw/app.cpp and src/msw/window.cpp)
@@ -1209,10 +1211,34 @@
     bool bWasLoggingEnabled = wxLog::EnableLogging(false);    //Turn off the wxDynamicLibrary logging
 
+	//Quicktime 6 and earlier only distributed the dll in the 
+	//Quicktime windows SDK, however....
     if(!m_dll.Load(wxT("qtmlClient.dll")))
     {
+		//Quicktime 7 distributes the dll with the application
+		//but the dll is probably not in the user's path, so
+		//we do a bit of trickery to find the dll
+		
+        //(HKEY_LOCAL_MACHINE\\SOFTWARE\\Apple Computer, Inc.\\QuickTime)
+        //Key "QTExtDir"
+        wxRegKey key(wxRegKey::HKLM, wxT("SOFTWARE\\Apple Computer, Inc.\\QuickTime"));
+        if ( key.Exists() )
+        {
+            wxString sQTExtPath;
+            if( key.QueryValue(wxT("QTExtDir"), sQTExtPath) )
+            {
+                m_dll.Load(sQTExtPath + 
+                           wxT("QTMLClient.dll"));
+            }
+        }
+
+        if(!m_dll.IsLoaded()) //Did the registry method fail?
+        {
+			//OK, now we've REALLY failed to find it :(
         wxLog::EnableLogging(bWasLoggingEnabled);
         return false;
+        }//!IsLoaded?
     }
 
+
     wxDL_METHOD_LOAD( m_dll, StartMovie, m_ok );
     wxDL_METHOD_LOAD( m_dll, StopMovie, m_ok );
@@ -1366,4 +1392,545 @@
 };
 
+//---------------------------------------------------------------------------
+//
+// wxRealPlayerMediaBackend
+//
+//---------------------------------------------------------------------------
+
+//---------------------------------------------------------------------------
+// Stuff dumped from "Real Player ActiveX Control Library" (rmoc3260.dll)
+//---------------------------------------------------------------------------
+
+// IID/CLSIDS
+const IID IID_IRealAudio = {0xCFCDAA01,0x8BE4,0x11CF,{0xB8,0x4B,0x00,0x20,0xAF,0xBB,0xCC,0xFA}};
+const CLSID CLSID_RealAudio = {0xCFCDAA03,0x8BE4,0x11CF,{0xB8,0x4B,0x00,0x20,0xAF,0xBB,0xCC,0xFA}};
+
+// IRealAudio
+struct IRealAudio : public IDispatch
+{
+public:
+    virtual HRESULT STDMETHODCALLTYPE get_Source(BSTR __RPC_FAR *path) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Source( 
+        /* [in] */ BSTR path) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_Console( 
+        /* [retval][out] */ BSTR __RPC_FAR *Console) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Console( 
+        /* [in] */ BSTR Console) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_Controls( 
+        /* [retval][out] */ BSTR __RPC_FAR *Controls) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_Controls( 
+        /* [in] */ BSTR Controls) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_NoLabels( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *NoLabels) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_NoLabels( 
+        /* [in] */ VARIANT_BOOL NoLabels) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_AutoStart( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *AutoStart) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoStart( 
+        /* [in] */ VARIANT_BOOL AutoStart) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_AutoGotoURL( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *AutoStart) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoGotoURL( 
+        /* [in] */ VARIANT_BOOL AutoStart) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE get_WindowName( 
+        /* [retval][out] */ BSTR __RPC_FAR *WindowName) = 0;
+    
+    virtual /* [helpstring][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowName( 
+        /* [in] */ BSTR WindowName) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetSource( 
+        /* [retval][out] */ BSTR __RPC_FAR *path) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetSource( 
+        /* [in] */ BSTR lpszNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetConsole( 
+        /* [retval][out] */ BSTR __RPC_FAR *Console) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetConsole( 
+        /* [in] */ BSTR lpszNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetControls( 
+        /* [retval][out] */ BSTR __RPC_FAR *Controls) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetControls( 
+        /* [in] */ BSTR lpszNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetNoLabels( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *NoLabels) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetNoLabels( 
+        /* [in] */ VARIANT_BOOL bNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetAutoStart( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *AutoStart) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetAutoStart( 
+        /* [in] */ VARIANT_BOOL bNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetAutoGotoURL( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *AutoStart) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetAutoGotoURL( 
+        /* [in] */ VARIANT_BOOL bNewValue) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetVolume( 
+        /* [retval][out] */ short __RPC_FAR *pnVol) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetVolume( 
+        /* [in] */ short nVol) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetMute( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbMute) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetMute( 
+        /* [in] */ VARIANT_BOOL bMute) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLoop( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetLoop( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetImageStatus( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbEnable) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetImageStatus( 
+        /* [in] */ VARIANT_BOOL bEnable) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsTotal( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsReceived( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsOutOfOrder( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsMissing( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsEarly( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPacketsLate( 
+        /* [retval][out] */ long __RPC_FAR *plPackets) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetBandwidthAverage( 
+        /* [retval][out] */ long __RPC_FAR *plBandwidth) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetBandwidthCurrent( 
+        /* [retval][out] */ long __RPC_FAR *plBandwidth) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoPlayPause( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoStop( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoNextItem( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoPrevItem( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE CanPlayPause( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE CanStop( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE HasNextItem( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE HasPrevItem( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE HasNextEntry( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE HasPrevEntry( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoNextEntry( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoPrevEntry( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE AboutBox( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE EditPreferences( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE HideShowStatistics( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE IsStatisticsVisible( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *value) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoGotoURL( 
+        /* [in] */ BSTR url,
+        /* [in] */ BSTR target) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoPlay( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE DoPause( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPosition( 
+        /* [retval][out] */ long __RPC_FAR *plPosition) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPlayState( 
+        /* [retval][out] */ long __RPC_FAR *plState) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLength( 
+        /* [retval][out] */ long __RPC_FAR *plLength) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetTitle( 
+        /* [retval][out] */ BSTR __RPC_FAR *bstrTitle) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetAuthor( 
+        /* [retval][out] */ BSTR __RPC_FAR *bstrAuthor) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetCopyright( 
+        /* [retval][out] */ BSTR __RPC_FAR *bstrCopyright) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetClipWidth( 
+        /* [retval][out] */ long __RPC_FAR *plWidth) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetClipHeight( 
+        /* [retval][out] */ long __RPC_FAR *plHeight) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE CanPlay( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbCanPlay) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE CanPause( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbCanPause) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetPosition( 
+        /* [in] */ long lPosition) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetNumLoop( 
+        /* [retval][out] */ long __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetNumLoop( 
+        /* [in] */ long lVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetCenter( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetCenter( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetNoLogo( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetNoLogo( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetMaintainAspect( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetMaintainAspect( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetBackgroundColor( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetBackgroundColor( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetStereoState( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLiveState( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetShowStatistics( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetShowStatistics( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetShowPreferences( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetShowPreferences( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetShowAbout( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetShowAbout( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetOriginalSize( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetOriginalSize( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetDoubleSize( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetDoubleSize( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetFullScreen( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetFullScreen( void) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEnableContextMenu( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetEnableContextMenu( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEnableOriginalSize( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetEnableOriginalSize( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEnableDoubleSize( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetEnableDoubleSize( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEnableFullScreen( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetEnableFullScreen( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEnableMessageBox( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetEnableMessageBox( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetTitle( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetAuthor( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetCopyright( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetWantKeyboardEvents( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbWantsEvents) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetWantKeyboardEvents( 
+        /* [in] */ VARIANT_BOOL bWantsEvents) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetWantMouseEvents( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbWantsEvents) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetWantMouseEvents( 
+        /* [in] */ VARIANT_BOOL bWantsEvents) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetNumEntries( 
+        /* [retval][out] */ short __RPC_FAR *uNumEntries) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetCurrentEntry( 
+        /* [retval][out] */ short __RPC_FAR *uCurrentEntry) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEntryTitle( 
+        /* [in] */ short uEntryIndex,
+        /* [retval][out] */ BSTR __RPC_FAR *pszTitle) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEntryAuthor( 
+        /* [in] */ short uEntryIndex,
+        /* [retval][out] */ BSTR __RPC_FAR *pszAuthor) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEntryCopyright( 
+        /* [in] */ short uEntryIndex,
+        /* [retval][out] */ BSTR __RPC_FAR *pszCopy) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetEntryAbstract( 
+        /* [in] */ short uEntryIndex,
+        /* [retval][out] */ BSTR __RPC_FAR *pszAbstract) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetCanSeek( 
+        /* [in] */ VARIANT_BOOL bCanSeek) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetCanSeek( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbCanSeek) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetBufferingTimeElapsed( 
+        /* [retval][out] */ long __RPC_FAR *uElapsed) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetBufferingTimeRemaining( 
+        /* [retval][out] */ long __RPC_FAR *uRemaining) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetConnectionBandwidth( 
+        /* [retval][out] */ long __RPC_FAR *uBandwidthSetting) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPreferedLanguageString( 
+        /* [retval][out] */ BSTR __RPC_FAR *pLangauge) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPreferedLanguageID( 
+        /* [retval][out] */ long __RPC_FAR *nLangID) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetUserCountryID( 
+        /* [retval][out] */ long __RPC_FAR *nCountryID) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetNumSources( 
+        /* [retval][out] */ short __RPC_FAR *nNumSources) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetSourceTransport( 
+        /* [in] */ short nSourceNum,
+        /* [retval][out] */ BSTR __RPC_FAR *pszTransport) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetWantErrors( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetWantErrors( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetShuffle( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetShuffle( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetVersionInfo( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastMessage( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastErrorSeverity( 
+        /* [retval][out] */ long __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastErrorRMACode( 
+        /* [retval][out] */ long __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastErrorUserCode( 
+        /* [retval][out] */ long __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastErrorUserString( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetLastErrorMoreInfoURL( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetPreFetch( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetPreFetch( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetRegion( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetRegion( 
+        /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetIsPlus( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetConsoleEvents( 
+        /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetConsoleEvents( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE GetDRMInfo( 
+        /* [in] */ BSTR pVal,
+        /* [retval][out] */ BSTR __RPC_FAR *pRet) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetShowVideo( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE AddLicense( 
+        /* [in] */ BSTR pVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE SetVideoOverlay( 
+        /* [in] */ VARIANT_BOOL bVal) = 0;
+    
+    virtual HRESULT STDMETHODCALLTYPE EnsureTranscryptionLicense( 
+        /* [in] */ BSTR pVal) = 0;
+    
+};
+
+//###########################################################################
+//
+//
+//  wxRealPlayerMediaBackend
+//
+//
+//###########################################################################
+
+class WXDLLIMPEXP_MEDIA wxRealPlayerMediaBackend : public wxMediaBackendCommonBase
+{
+public:
+    wxRealPlayerMediaBackend();
+    virtual ~wxRealPlayerMediaBackend();
+    void Clear();
+
+    virtual bool CreateControl(wxControl* ctrl, wxWindow* parent,
+                                     wxWindowID id,
+                                     const wxPoint& pos,
+                                     const wxSize& size,
+                                     long style,
+                                     const wxValidator& validator,
+                                     const wxString& name);
+
+    virtual bool Play();
+    virtual bool Pause();
+    virtual bool Stop();
+
+    virtual bool Load(const wxString& fileName);
+    virtual bool Load(const wxURI& location);
+    virtual bool Load(const wxURI& location, const wxURI& proxy);
+
+    bool DoLoad(const wxString& location);
+    void FinishLoad();
+
+    virtual wxMediaState GetState();
+
+    virtual bool SetPosition(wxLongLong where);
+    virtual wxLongLong GetPosition();
+    virtual wxLongLong GetDuration();
+
+    virtual void Move(int x, int y, int w, int h);
+    wxSize GetVideoSize() const;
+
+    virtual double GetPlaybackRate();
+    virtual bool SetPlaybackRate(double);
+
+    virtual double GetVolume();
+    virtual bool SetVolume(double);
+
+    virtual bool ShowPlayerControls(wxMediaCtrlPlayerControls flags);
+    void Cleanup();
+
+    void DoGetDownloadProgress(wxLongLong*, wxLongLong*);
+    virtual wxLongLong GetDownloadProgress()
+    {
+        wxLongLong progress, total;
+        DoGetDownloadProgress(&progress, &total);
+        return progress;
+    }
+    virtual wxLongLong GetDownloadTotal()
+    {
+        wxLongLong progress, total;
+        DoGetDownloadProgress(&progress, &total);
+        return total;
+    }
+
+    wxActiveXContainer* m_pAX;
+    IRealAudio* m_pRA;
+    wxTimer* m_pTimer;
+    wxSize m_bestSize;
+
+    DECLARE_DYNAMIC_CLASS(wxRealPlayerMediaBackend)
+};
 
 //===========================================================================
@@ -3534,4 +4101,641 @@
 //---------------------------------------------------------------------------
 //  End QT Backend
+//---------------------------------------------------------------------------
+
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
+// wxRAMediaBackend
+//
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+IMPLEMENT_DYNAMIC_CLASS(wxRealPlayerMediaBackend, wxMediaBackend);
+
+//---------------------------------------------------------------------------
+// wxRALoadTimer
+//
+// Queries the control periodically to see if it has reached the point
+// in its loading cycle where we can begin playing the media - if so
+// then we finish up some things like getting the original size of the video
+// and then sending the loaded event to our handler
+//---------------------------------------------------------------------------
+class wxRALoadTimer : public wxTimer
+{
+public:
+    wxRALoadTimer(wxRealPlayerMediaBackend* parent) :
+      m_parent(parent) {}
+
+    void Notify()
+    {
+        long lPlayState;
+        m_parent->m_pRA->GetPlayState(&lPlayState);
+        if(lPlayState == 4 ||
+           lPlayState == 3)
+        {
+            Stop();
+            m_parent->FinishLoad();
+            delete this;
+        }
+    }
+
+protected:
+    wxRealPlayerMediaBackend* m_parent;     //Backend pointer
+};
+
+//---------------------------------------------------------------------------
+// wxRAPlayTimer
+//
+// Sets m_hNotifyWnd to NULL to signify that we haven't loaded anything yet
+// Queries the control periodically to see if it has stopped -
+// if it has it sends the stop event
+//---------------------------------------------------------------------------
+class wxRAPlayTimer : public wxTimer
+{
+public:
+    wxRAPlayTimer(wxRealPlayerMediaBackend* parent) :
+      m_parent(parent) {}
+
+    void Notify()
+    {
+        if(m_parent->GetState() == wxMEDIASTATE_STOPPED &&
+           //NB:  Stop events could get triggered by the interface
+           //if ShowPlayerControls is enabled,
+           //so we need this hack here to make an attempt
+           //at it not getting sent - but its far from ideal -
+           //they can still get sent in some cases
+           m_parent->GetPosition() == m_parent->GetDuration())
+        {
+            if ( m_parent->SendStopEvent() )
+            {
+                //Seek to beginning of movie
+                m_parent->wxRealPlayerMediaBackend::SetPosition(0);
+                Stop();
+
+                //send the event to our child
+                m_parent->QueueFinishEvent();
+            }
+        }
+    }
+
+protected:
+    wxRealPlayerMediaBackend* m_parent;     //Backend pointer
+};
+
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend Constructor
+//---------------------------------------------------------------------------
+wxRealPlayerMediaBackend::wxRealPlayerMediaBackend()
+                 :m_pRA(NULL),
+                  m_pTimer(NULL)
+{
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend Destructor
+//---------------------------------------------------------------------------
+wxRealPlayerMediaBackend::~wxRealPlayerMediaBackend()
+{
+    Clear(); //Free memory from Load()
+
+    if(m_pAX)
+    {
+        m_pAX->DissociateHandle();
+        delete m_pAX;
+        m_pRA->Release();
+    }
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Clear
+//
+// Free up interfaces and memory allocated by LoadXXX
+//---------------------------------------------------------------------------
+void wxRealPlayerMediaBackend::Clear()
+{
+    if(m_pTimer)
+    {
+        delete m_pTimer;
+        m_pTimer = NULL;
+    }
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::CreateControl
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::CreateControl(wxControl* ctrl, wxWindow* parent,
+                                     wxWindowID id,
+                                     const wxPoint& pos,
+                                     const wxSize& size,
+                                     long style,
+                                     const wxValidator& validator,
+                                     const wxString& name)
+{
+    // Determine if the IRealAudio interface is available
+    // (I.E. RealPlayer is installed)
+    if( ::CoCreateInstance(CLSID_RealAudio, NULL,
+                                  CLSCTX_INPROC_SERVER,
+                                  IID_IRealAudio, (void**)&m_pRA) != 0 )
+         return false;
+
+
+    //
+    // Create window
+    // By default wxWindow(s) is created with a border -
+    // so we need to get rid of those
+    //
+    // Since we don't have a child window like most other
+    // backends, we don't need wxCLIP_CHILDREN
+    //
+    if ( !ctrl->wxControl::Create(parent, id, pos, size,
+                            (style & ~wxBORDER_MASK) | wxBORDER_NONE,
+                            validator, name) )
+        return false;
+
+    //
+    // Now create the ActiveX container along with the media player
+    // interface and query them
+    //
+    m_ctrl = wxStaticCast(ctrl, wxMediaCtrl);
+    m_pAX = new wxActiveXContainer(ctrl,
+                IID_IRealAudio,
+                m_pRA);
+
+    //by default true
+    m_pRA->SetAutoStart(VARIANT_FALSE);
+    m_pRA->SetAutoGotoURL(VARIANT_FALSE);
+    //by default enabled
+    wxRealPlayerMediaBackend::ShowPlayerControls(wxMEDIACTRLPLAYERCONTROLS_NONE);
+    //by default with AM only 0.5
+    wxRealPlayerMediaBackend::SetVolume(1.0);
+
+    
+    //Should make sure we can get media information
+    //before playing anything and put the media in pause 
+    //position the first play
+    m_pRA->SetPreFetch(VARIANT_TRUE);
+
+    // don't erase the background of our control window so that resizing is a
+    // bit smoother
+    m_ctrl->SetBackgroundStyle(wxBG_STYLE_CUSTOM);
+
+    // success
+    return true;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Load (file version)
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Load(const wxString& fileName)
+{
+    return DoLoad(wxString("file://") + fileName);
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Load (URL Version)
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Load(const wxURI& location)
+{
+    return DoLoad(location.BuildURI());
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Load (URL Version with Proxy)
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Load(const wxURI& WXUNUSED(location), 
+                                    const wxURI& WXUNUSED(proxy))
+{
+    return false;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::DoLoad
+//
+// Called by all functions - this actually renders
+// the file
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::DoLoad(const wxString& location)
+{
+    Clear(); //Clear up previously allocated memory
+
+    HRESULT hr;
+
+    //Stop the media first, otherwise
+    //CanPlay will return false
+    wxRealPlayerMediaBackend::Stop();
+
+    hr = m_pRA->SetSource(wxBasicString(location).Get());
+
+    if(FAILED(hr))
+    {
+        wxMessageBox(wxT("Couldn't set source"));
+        return false;
+    }
+
+    //Can we play the media? Note that 
+    //you could play here and it would bring up the
+    //codec dialog from realplayer. 
+    VARIANT_BOOL vbCanPlay;
+    hr = m_pRA->CanPlay(&vbCanPlay);
+
+    if(FAILED(hr) || vbCanPlay == VARIANT_FALSE)
+    {
+        wxMessageBox(wxT("Cannot play media"));
+        return false;
+    }
+
+    // "Play" the media
+    // (SetAutoStart should keep it in pause)
+    // FIXME: Preloading without putting a play here?
+    hr = m_pRA->DoPlay();
+
+    if(FAILED(hr))
+    {
+        wxMessageBox(wxT("Couldn't initial stopload"));
+        return false;
+    }
+
+    // Start the buffering timer
+    m_pTimer = new wxRALoadTimer(this);
+    m_pTimer->Start(20);
+    return true;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::FinishLoad
+//
+// Called by our wxRALoadTimer when the
+// embedded RealPlayer tells its the media is ready to play.
+//
+// Here we get the original size of the video and
+// send the loaded event to our watcher :).
+//---------------------------------------------------------------------------
+void wxRealPlayerMediaBackend::FinishLoad()
+{
+    //Stop it to keep functionally equivilant 
+    //to other backends
+    //FIXME: Try to find a way to not play originally instead
+    wxRealPlayerMediaBackend::Stop();
+
+    //Get the original video size
+    m_pRA->GetClipWidth((long*)&m_bestSize.x);
+    m_pRA->GetClipHeight((long*)&m_bestSize.y);
+
+    //
+    //Start the play timer to catch stop events
+    //Previous load timer cleans up itself
+    //
+    m_pTimer = new wxRAPlayTimer(this);
+
+    NotifyMovieLoaded();
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::ShowPlayerControls
+//
+// FIXME: This is really funky. For one thing sometimes
+// the controls take up the whole screen (realplayer either
+// chooses or the user presses something) and either way
+// the video doesn't show up in the transition
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::ShowPlayerControls(wxMediaCtrlPlayerControls flags)
+{
+    if(!flags)
+    {
+        return SUCCEEDED(m_pRA->SetControls(
+                            wxBasicString(wxT("ImageWindow")).Get()
+                                            )
+                        );
+    }
+    else
+    {
+#if 0
+        return SUCCEEDED(m_pRA->SetControls(
+                            wxBasicString(wxT("All")).Get()
+                                            )
+                        );
+#else
+        return false;
+#endif
+    }
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Play
+//
+// Plays the stream.  
+//
+// NB: When transitioning from stop RealPlayer sometimes chooses
+//     to pause when told to play, so we need an extra "waiting loop"
+//     here
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Play()
+{
+    if(!m_pTimer)
+        return false; 
+
+    // if the movie isn't done loading yet
+    // go into an sync getmessage loop until it is :)
+    long lState;
+    m_pRA->GetPlayState(&lState);
+    if(lState == 3)
+        return true; //already playing... RP may pause if so
+    while((lState == 1 || lState == 2) && 
+          wxYieldIfNeeded())
+    {
+      m_pRA->GetPlayState(&lState);
+    }
+
+    //Actually try to play the movie
+    HRESULT hr = m_pRA->DoPlay();
+    if(SUCCEEDED(hr))
+    {
+        //Start the play timer
+        m_pTimer->Start(20);
+        
+        //First loop wait to wait for transition to play
+        long lState;
+        m_pRA->GetPlayState(&lState);
+        while(lState != 3 && lState != 4 && wxYieldIfNeeded())
+        {
+          m_pRA->GetPlayState(&lState);
+        }
+        //
+
+        //NB: Play again as it is in pause for some reason
+        if(lState == 4)
+            m_pRA->DoPlay();
+
+        //Final loop to make sure it reaches the play state
+        //before we go
+        m_pRA->GetPlayState(&lState);
+        while(lState != 3 && wxYieldIfNeeded())
+        {
+          m_pRA->GetPlayState(&lState);
+        }
+        //
+
+        return true;
+    }
+    wxMessageBox(wxT("No play :("));
+    return false;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Pause
+//
+// Pauses the stream.
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Pause()
+{
+    long lState;
+    m_pRA->GetPlayState(&lState);
+    if(lState == 4)
+        return true;
+
+    HRESULT hr = m_pRA->DoPause();
+    if(SUCCEEDED(hr))
+    {
+        //Wait for the interface to reach the desired state
+        long lState;
+        m_pRA->GetPlayState(&lState);
+        while(lState != 4 && wxYieldIfNeeded())
+        {
+          m_pRA->GetPlayState(&lState);
+        }
+        //
+
+        return true;
+    }
+    wxMessageBox(wxT("No pause :("));
+    return false;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Stop
+//
+// Stops the stream.
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::Stop()
+{
+    HRESULT hr = m_pRA->DoStop();
+    if(SUCCEEDED(hr))
+    {
+        //Seek to beginning
+        wxRealPlayerMediaBackend::SetPosition(0);
+
+        //Stop stop event timer
+        if(m_pTimer)
+            m_pTimer->Stop();
+
+        //wait for the interface to reach the desired state
+        long lState;
+        m_pRA->GetPlayState(&lState);
+        while(lState != 0 && wxYieldIfNeeded())
+        {
+          m_pRA->GetPlayState(&lState);
+        }
+        //
+
+        return true;
+    }
+    wxMessageBox(wxT("No stop :("));
+    return false;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::SetPosition
+//
+// Sets the media position in the IRealAudio interface
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::SetPosition(wxLongLong where)
+{
+    HRESULT hr = m_pRA->SetPosition(where.GetValue());
+    if(FAILED(hr))
+    {
+        wxLogSysError(wxT("Could not set position from realplayer"));
+        return false;
+    }
+
+    //Wait for the control to reach the state we want
+    long lState;
+    m_pRA->GetPlayState(&lState);
+    while(lState == 5 && wxYieldIfNeeded())
+    {
+      m_pRA->GetPlayState(&lState);
+    }
+    //
+
+    return true;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetPosition
+//
+// Obtain position in media from realplayer
+//---------------------------------------------------------------------------
+wxLongLong wxRealPlayerMediaBackend::GetPosition()
+{
+    long lPos;
+    HRESULT hr = m_pRA->GetPosition(&lPos);
+    if(FAILED(hr))
+    {
+        wxLogSysError(
+             wxT("Could not obtain media position from realplayer")
+                     );
+        return 0;
+    }
+
+    wxLongLong ll;
+    ll.Assign(lPos);
+
+    return ll;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetVolume
+//
+// Gets the volume through the IBasicAudio interface -
+// value ranges from 0 (MAX volume) to -10000 (minimum volume).
+// -100 per decibel.
+//---------------------------------------------------------------------------
+double wxRealPlayerMediaBackend::GetVolume()
+{
+    short sVolume;
+    HRESULT hr = m_pRA->GetVolume(&sVolume);
+    if(FAILED(hr))
+    {
+        wxLogSysError(wxT("Could not obtain volume from RealPlayer"));
+        return 0.0;
+    }
+    return ((double)sVolume) / 100.0;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::SetVolume
+//
+// Sets the volume through the IRealAudio interface - 
+// realplayer volume is on a scale of 0-100
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::SetVolume(double dVolume)
+{
+    short sVolume = (short)(dVolume*100.0);
+    HRESULT hr = m_pRA->SetVolume( sVolume );
+    if(FAILED(hr))
+    {
+        wxLogSysError(wxT("Could not set volume from RealPlayer!"));
+        return false;
+    }
+    return true;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetDuration
+//
+// Obtains the length of the media from realplayer
+// (time signature is in milliseconds like ours)
+//---------------------------------------------------------------------------
+wxLongLong wxRealPlayerMediaBackend::GetDuration()
+{
+    long lDuration;
+    HRESULT hr = m_pRA->GetLength(&lDuration);
+    if(FAILED(hr))
+    {
+        wxLogSysError(wxT("Could not obtain length from RealPlayer!"));
+        return 0;
+    }
+
+    //h,m,s,milli - outdur is in 1 second (double)
+    wxLongLong ll;
+    ll.Assign(lDuration);
+
+    return ll;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetState
+//
+// Obtains the state of the movie from realplayer
+//---------------------------------------------------------------------------
+wxMediaState wxRealPlayerMediaBackend::GetState()
+{
+    long lState;
+    HRESULT hr = m_pRA->GetPlayState(&lState);
+    if(FAILED(hr))
+    {
+        wxLogSysError(wxT("Could not obtain state from RealPlayer!"));
+        return wxMEDIASTATE_STOPPED;
+    }
+
+    switch(lState)
+    {
+    case 0: //stopped
+    case 1: //contacting
+    case 2: //loading
+        return wxMEDIASTATE_STOPPED;
+    case 3: //playing
+    case 5: //seeking
+        return wxMEDIASTATE_PLAYING;
+    case 4: //paused
+        return wxMEDIASTATE_PAUSED;
+
+    default:
+        return wxMEDIASTATE_STOPPED;
+    }
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetPlaybackRate
+//
+// Not implemented
+//---------------------------------------------------------------------------
+double wxRealPlayerMediaBackend::GetPlaybackRate()
+{
+    return 0.0;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::SetPlaybackRate
+//
+// Not implemented
+//---------------------------------------------------------------------------
+bool wxRealPlayerMediaBackend::SetPlaybackRate(double WXUNUSED(dRate))
+{
+    return false;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetDownloadXXX
+//
+// Not implemented
+//---------------------------------------------------------------------------
+void wxRealPlayerMediaBackend::DoGetDownloadProgress(wxLongLong* pLoadProgress,
+                                             wxLongLong* pLoadTotal)
+{
+    *pLoadProgress = 0;
+    *pLoadTotal = 0;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::GetVideoSize
+//
+// Obtains the cached original video size
+//---------------------------------------------------------------------------
+wxSize wxRealPlayerMediaBackend::GetVideoSize() const
+{
+    return m_bestSize;
+}
+
+//---------------------------------------------------------------------------
+// wxRealPlayerMediaBackend::Move
+//
+// We take care of this in our redrawing
+//---------------------------------------------------------------------------
+void wxRealPlayerMediaBackend::Move(int WXUNUSED(x), int WXUNUSED(y),
+                            int WXUNUSED(w), int WXUNUSED(h))
+{
+}
+
+//---------------------------------------------------------------------------
+// End of wxRealPlayerMediaBackend
 //---------------------------------------------------------------------------
 
Index: include/wx/mediactrl.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mediactrl.h,v
retrieving revision 1.27
diff -b -u -2 -r1.27 mediactrl.h
--- include/wx/mediactrl.h	2005/09/25 20:23:21	1.27
+++ include/wx/mediactrl.h	2005/11/11 00:13:17
@@ -72,5 +72,5 @@
 #define wxMEDIABACKEND_QUICKTIME    wxT("wxQTMediaBackend")
 #define wxMEDIABACKEND_GSTREAMER    wxT("wxGStreamerMediaBackend")
-
+#define wxMEDIABACKEND_REALPLAYER   wxT("wxRealPlayerMediaBackend")
 
 // ----------------------------------------------------------------------------

 	  	 

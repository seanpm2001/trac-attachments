--- ../wxWidgets/src/gtk/radiobox.cpp	2005-03-26 20:28:01.000000000 -0800
+++ ./src/gtk/radiobox.cpp	2005-09-01 20:30:35.000000000 -0700
@@ -64,6 +64,40 @@
 }
 
 //-----------------------------------------------------------------------------
+// sort callbacks for ordering buttons by screen position
+//-----------------------------------------------------------------------------
+
+extern "C" {
+// order for up/down priority
+static gint sort_compare_down(gconstpointer a, gconstpointer b)
+{
+    const GtkWidget* w1 = (GtkWidget*)a;
+    const GtkWidget* w2 = (GtkWidget*)b;
+    gint cmp = w1->allocation.x - w2->allocation.x;
+    if (cmp == 0)
+    {
+        cmp = w1->allocation.y - w2->allocation.y;
+    }
+    return cmp;
+}
+}
+
+extern "C" {
+// order for left/right priority
+static gint sort_compare_right(gconstpointer a, gconstpointer b)
+{
+    const GtkWidget* w1 = (GtkWidget*)a;
+    const GtkWidget* w2 = (GtkWidget*)b;
+    gint cmp = w1->allocation.y - w2->allocation.y;
+    if (cmp == 0)
+    {
+        cmp = w1->allocation.x - w2->allocation.x;
+    }
+    return cmp;
+}
+}
+
+//-----------------------------------------------------------------------------
 // "key_press_event"
 //-----------------------------------------------------------------------------
 
@@ -76,43 +110,49 @@
     if (!rb->m_hasVMT) return FALSE;
     if (g_blockEventsOnDrag) return FALSE;
 
-    if ((gdk_event->keyval != GDK_Up) &&
-        (gdk_event->keyval != GDK_Down) &&
-        (gdk_event->keyval != GDK_Left) &&
-        (gdk_event->keyval != GDK_Right))
+    GSList* list = NULL;
+    switch (gdk_event->keyval)
     {
+    case GDK_Up:
+    case GDK_Down:
+        list = gtk_radio_button_group((GtkRadioButton*)widget);
+        list = g_slist_copy(list);
+        list = g_slist_sort(list, sort_compare_down);
+        break;
+    case GDK_Left:
+    case GDK_Right:
+        list = gtk_radio_button_group((GtkRadioButton*)widget);
+        list = g_slist_copy(list);
+        list = g_slist_sort(list, sort_compare_right);
+        break;
+    default:
         return FALSE;
     }
 
-    wxList::compatibility_iterator node = rb->m_boxes.Find( (wxObject*) widget );
-    if (!node)
+    if (gdk_event->keyval == GDK_Up || gdk_event->keyval == GDK_Left)
     {
-        return FALSE;
+        list = g_slist_reverse(list);
     }
 
-    gtk_signal_emit_stop_by_name( GTK_OBJECT(widget), "key_press_event" );
-
-    if ((gdk_event->keyval == GDK_Up) ||
-        (gdk_event->keyval == GDK_Left))
+    GtkWidget* button = NULL;
+    GSList* node = g_slist_find(list, widget);
+    wxASSERT(node != NULL);
+    node = node->next;
+    if (node == NULL)
     {
-        if (node == rb->m_boxes.GetFirst())
-            node = rb->m_boxes.GetLast();
-        else
-            node = node->GetPrevious();
-    }
-    else
-    {
-        if (node == rb->m_boxes.GetLast())
-            node = rb->m_boxes.GetFirst();
-        else
-            node = node->GetNext();
+        node = list;
     }
+    button = (GtkWidget*)node->data;
 
-    GtkWidget *button = (GtkWidget*) node->GetData();
+    g_slist_free(list);
 
-    gtk_widget_grab_focus( button );
-
-    return TRUE;
+    if (button != NULL)
+    {
+        gtk_signal_emit_stop_by_name((GtkObject*)widget, "key_press_event");
+        gtk_widget_grab_focus(button);
+        gtk_toggle_button_set_state((GtkToggleButton*)button, TRUE);
+    }
+    return button != NULL;
 }
 }
 

 	  	 

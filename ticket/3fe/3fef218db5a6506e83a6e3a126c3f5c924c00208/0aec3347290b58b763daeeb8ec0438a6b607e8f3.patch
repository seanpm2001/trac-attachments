Index: include/wx/string.h
===================================================================
--- include/wx/string.h	(revision 71500)
+++ include/wx/string.h	(working copy)
@@ -2439,6 +2439,10 @@
   size_t Length() const { return length(); }
     // Count the number of characters
   int Freq(wxUniChar ch) const;
+
+    // Calculate the Levenshtein distance
+    int LevenshteinDistance(const wxString &str) const;
+
     // use MakeLower
   void LowerCase() { MakeLower(); }
     // use MakeUpper
Index: interface/wx/string.h
===================================================================
--- interface/wx/string.h	(revision 71500)
+++ interface/wx/string.h	(working copy)
@@ -1246,7 +1246,17 @@
         This is a wxWidgets 1.xx compatibility function; you should not use it in new code.
     */
     int Freq(wxUniChar ch) const;
+	
+	  /**
+        Returns the Levenshtein distance to the target string.
 
+        The Levenshtein distance between two strings is defined as the minimum 
+		number of edits needed to transform one string into the other, with the 
+		allowable edit operations being insertion, deletion, or substitution 
+		of a single character.
+    */
+    int LevenshteinDistance(const wxString &str) const;
+
     /**
         Returns @true if the string contains only ASCII characters.
         See wxUniChar::IsAscii for more details.
Index: src/common/string.cpp
===================================================================
--- src/common/string.cpp	(revision 71500)
+++ src/common/string.cpp	(working copy)
@@ -2324,3 +2324,41 @@
     return count;
 }
 
+// Calculate the Levenshtein distance between two strings
+int wxString::LevenshteinDistance(const wxString &str) const
+{
+    const int m = this->Len();
+    const int n = str.Len();
+
+    if( m==0 ) return n;
+    if( n==0 ) return m;
+
+    int *costs = new int[n + 1];
+
+    for( int k=0; k<=n; k++ ) costs[k] = k;
+
+    int i = 0;
+    for ( const_iterator it1 = begin(); it1 != end(); ++it1, i++ )
+    {
+        costs[0] = i+1;
+        int corner = i;
+
+        int j = 0;
+        for ( const_iterator it2 = str.begin(); it2 != str.end(); ++it2, j++ )
+        {
+            int upper = costs[j+1];
+
+            if( *it1 == *it2 )
+                costs[j+1] = corner;
+            else
+                costs[j+1] = wxMin(costs[j], wxMin(upper, corner)) + 1;
+			
+             corner = upper;
+        }
+    }
+
+    int result = costs[n];
+    delete [] costs;
+
+    return result;
+}
Index: tests/strings/strings.cpp
===================================================================
--- tests/strings/strings.cpp	(revision 71500)
+++ tests/strings/strings.cpp	(working copy)
@@ -63,6 +63,7 @@
         CPPUNIT_TEST( IndexedAccess );
         CPPUNIT_TEST( BeforeAndAfter );
         CPPUNIT_TEST( ScopedBuffers );
+        CPPUNIT_TEST( LevenshteinDistance );
     CPPUNIT_TEST_SUITE_END();
 
     void String();
@@ -97,6 +98,7 @@
     void IndexedAccess();
     void BeforeAndAfter();
     void ScopedBuffers();
+    void LevenshteinDistance();
 
     DECLARE_NO_COPY_CLASS(StringTestCase)
 };
@@ -1078,3 +1080,22 @@
     buf5.extend(len);
     CPPUNIT_ASSERT_EQUAL('\0', buf5.data()[len]);
 }
+
+void StringTestCase::LevenshteinDistance()
+{
+    wxString str = "wxWidgets";
+
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "" ) == 9 );
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "windows" ) == 6 );
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "unix" ) == 8 );
+
+    wxString str2 = "wxWindows";
+    CPPUNIT_ASSERT( str.LevenshteinDistance( str2 ) == 4 );
+
+    str = "hallo";
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "hello" ) == 1 );
+
+    str = "";
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "" ) == 0 );
+    CPPUNIT_ASSERT( str.LevenshteinDistance( "test" ) == 4 );
+}
\ No newline at end of file

Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/build/bakefiles/files.bkl,v
retrieving revision 1.447
diff -u -2 -r1.447 files.bkl
--- build/bakefiles/files.bkl	2007/06/10 17:13:14	1.447
+++ build/bakefiles/files.bkl	2007/06/20 00:00:39
@@ -312,4 +312,5 @@
     src/common/archive.cpp
     src/common/arrstr.cpp
+    src/common/base64.cpp
     src/common/clntdata.cpp
     src/common/cmdline.cpp
@@ -395,4 +396,5 @@
     wx/arrimpl.cpp
     wx/arrstr.h
+    wx/base64.h
     wx/beforestd.h
     wx/buffer.h
Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/docs/latex/wx/function.tex,v
retrieving revision 1.288
diff -u -2 -r1.288 function.tex
--- docs/latex/wx/function.tex	2007/06/19 20:02:35	1.288
+++ docs/latex/wx/function.tex	2007/06/20 00:00:40
@@ -36,4 +36,6 @@
 \helpref{wxASSERT\_MIN\_BITSIZE}{wxassertminbitsize}\\
 \helpref{wxASSERT\_MSG}{wxassertmsg}\\
+\helpref{wxBase64Decode}{wxbase64decode}\\
+\helpref{wxBase64Encode}{wxbase64encode}\\
 \helpref{wxBeginBusyCursor}{wxbeginbusycursor}\\
 \helpref{wxBell}{wxbell}\\
@@ -2826,4 +2828,30 @@
 
 \section{Miscellaneous functions}\label{miscellany}
+
+
+\membersection{wxBase64Decode}\label{wxbase64decode}
+
+\func{wxMemoryBuffer}{wxBase64Decode}{\param{const char * }{str}}
+
+Returns a buffer with the Base64 decoded binary equivalent of the input string.
+Only available if \texttt{\wxUSE\_BASE64} $= 1$.
+
+\wxheading{Include files}
+
+<wx/base64.h>
+
+
+\membersection{wxBase64Encode}\label{wxbase64encode}
+
+\func{wxString}{wxBase64Encode}{\param{const void *}{buf}, \param{size\_t }{len}}
+
+\func{wxString}{wxBase64Encode}{\param{const wxMemoryBuffer\& }{buf}}
+
+Returns the Base64 encoded representation of the data in the buffer.
+Only available if \texttt{\wxUSE\_BASE64} $= 1$.
+
+\wxheading{Include files}
+
+<wx/base64.h>
 
 
Index: include/wx/base64.h
===================================================================
RCS file: base64.h
diff -N base64.h
--- /dev/null	Wed Jun 20 02:00:27 2007
+++ base64.h	Wed Jun 20 02:00:40 2007
@@ -0,0 +1,32 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/base64.h
+// Purpose:     declaration of BASE64 encoding/decoding functionality
+// Author:      Charles Reimers (algorithm based on description and code from
+//              http://base64.sourceforge.net/)
+// Created:     2007/06/18
+// RCS-ID:      $Id: $
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_BASE64_H_
+#define _WX_BASE64_H_
+
+#if wxUSE_BASE64
+
+#include "wx/string.h"
+#include "wx/buffer.h"
+
+// encode the contents of the given buffer using base64 and return as string
+// (there is no error return)
+WXDLLIMPEXP_BASE wxString wxBase64Encode(const void *data, size_t len);
+inline wxString wxBase64Encode(const wxMemoryBuffer& buf)
+{
+    return wxBase64Encode(buf.GetData(), buf.GetDataLen());
+}
+
+// decode the contents of the given string
+WXDLLIMPEXP_BASE wxMemoryBuffer wxBase64Decode(const char *str);
+
+#endif // wxUSE_BASE64
+
+#endif // _WX_BASE64_H_
Index: include/wx/setup_inc.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/setup_inc.h,v
retrieving revision 1.63
diff -u -2 -r1.63 setup_inc.h
--- include/wx/setup_inc.h	2007/04/17 05:47:11	1.63
+++ include/wx/setup_inc.h	2007/06/20 00:00:40
@@ -319,4 +319,12 @@
 #define wxUSE_LONGLONG      1
 
+// Set wxUSE_BASE64 to 1, to compile in Base64 support. This is required for
+// storing binary data in wxConfig on most platforms.
+//
+// Default is 1.
+//
+// Recommended setting: 1 (but can be safely disabled if you don't use it)
+#define wxUSE_BASE64        1
+
 // Set wxUSE_(F)FILE to 1 to compile wx(F)File classes. wxFile uses low level
 // POSIX functions for file access, wxFFile uses ANSI C stdio.h functions.
Index: src/common/base64.cpp
===================================================================
RCS file: base64.cpp
diff -N base64.cpp
--- /dev/null	Wed Jun 20 02:00:27 2007
+++ base64.cpp	Wed Jun 20 02:00:40 2007
@@ -0,0 +1,113 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/common/base64.cpp
+// Purpose:     implementation of BASE64 encoding/decoding functions
+// Author:      Charles Reimers (algorithm based on description and code from
+//              http://base64.sourceforge.net/)
+// Created:     2007/06/18
+// RCS-ID:      $Id: $
+// Licence:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#if wxUSE_BASE64
+
+#include "wx/base64.h"
+
+static const char cb64[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+
+static void encodeblock( unsigned char in[3], unsigned char out[4], int len )
+{
+    out[0] = cb64[ in[0] >> 2 ];
+    out[1] = cb64[ ((in[0] & 0x03) << 4) | ((in[1] & 0xf0) >> 4) ];
+    out[2] = (unsigned char) (len > 1 ? cb64[ ((in[1] & 0x0f) << 2) | ((in[2] & 0xc0) >> 6) ] : '=');
+    out[3] = (unsigned char) (len > 2 ? cb64[ in[2] & 0x3f ] : '=');
+}
+
+wxString wxBase64Encode(const void *buf, size_t datalen)
+{
+    wxString str;
+    unsigned char in[3], out[4];
+    int i, len;
+    const unsigned char *data = (const unsigned char*)buf;
+
+    while( 0 != datalen )
+    {
+        len = 0;
+        for( i = 0; i < 3; i++ )
+        {
+            if( 0 != datalen )
+            {
+                in[i] = (unsigned char) *(data++);
+                datalen--;
+                len++;
+            }
+            else
+            {
+                in[i] = 0;
+            }
+        }
+        if( len )
+        {
+            encodeblock( in, out, len );
+            for( i = 0; i < 4; i++ )
+            {
+                str.Append( out[i] );
+            }
+        }
+    }
+    return str;
+}
+
+static const char cd64[]="|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\\]^_`abcdefghijklmnopq";
+
+static void decodeblock( unsigned char in[4], unsigned char out[3] )
+{
+    out[ 0 ] = (unsigned char ) (in[0] << 2 | in[1] >> 4);
+    out[ 1 ] = (unsigned char ) (in[1] << 4 | in[2] >> 2);
+    out[ 2 ] = (unsigned char ) (((in[2] << 6) & 0xc0) | in[3]);
+}
+
+wxMemoryBuffer wxBase64Decode(const char *str)
+{
+    wxMemoryBuffer buf;
+    unsigned char in[4], out[3], v;
+    int i, len;
+    const unsigned char *instr = (const unsigned char *)str;
+    while( '\0' != *instr )
+    {
+        for( len = 0, i = 0; i < 4 && '\0' != *instr; i++ )
+        {
+            v = 0;
+            while( '\0' != *instr && v == 0 )
+            {
+                v = (unsigned char) *(instr++);
+                v = (unsigned char) ((v < 43 || v > 122) ? 0 : cd64[ v - 43 ]);
+                if( v )
+                {
+                    v = (unsigned char) ((v == '$') ? 0 : v - 61);
+                }
+            }
+            if( '\0' != *(instr-1) )
+            {
+                len++;
+                if( v )
+                {
+                    in[ i ] = (unsigned char) (v - 1);
+                }
+            }
+            else
+            {
+                in[i] = 0;
+            }
+        }
+        if( len )
+        {
+            decodeblock( in, out );
+            buf.AppendData(out, 3);
+        }
+    }
+    return buf;
+}
+
+#endif // wxUSE_BASE64

 	  	 

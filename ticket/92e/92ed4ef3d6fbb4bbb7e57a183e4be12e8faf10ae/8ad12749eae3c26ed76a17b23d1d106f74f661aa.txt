Index: src/mac/bitmap.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/bitmap.cpp,v
retrieving revision 1.14
diff -r1.14 bitmap.cpp
498,499d497
<     m_refData = new wxBitmapRefData;
< 
502,503c500,502
<     if ( handler == NULL ) {
<         wxLogWarning("no bitmap handler for type %d defined.", type);
---
>     if ( handler )
>     {
>         m_refData = new wxBitmapRefData;
505c504
<         return FALSE;
---
>         return handler->LoadFile(this, filename, type, -1, -1);
506a506,508
>     else
>     {
>         wxImage loadimage(filename, type);
508c510,516
<     return handler->LoadFile(this, filename, type, -1, -1);
---
>         if(loadimage.Ok()) {
>             *this = loadimage;
>             return true;
>         }
>     }
>     wxLogWarning("no bitmap handler for type %d defined.", type);
>     return false;
545c553,554
<     
---
> 
>     GDHandle origDevice;
547d555
<     GDHandle origDevice ;
552,554c560,562
<     GetGWorld( &origPort , &origDevice ) ;
<     SetGWorld( GetHBITMAP() , NULL ) ;
<     
---
>     GetGWorld(&origPort, &origDevice);
>     SetGWorld(GetHBITMAP(), NULL);
> 
556c564,565
<     wxColour rgb, maskcolor(image.GetMaskRed(), image.GetMaskGreen(), image.GetMaskBlue());
---
>     wxColour rgb, maskcolor(image.GetMaskRed(), image.GetMaskGreen(),
>                             image.GetMaskBlue());
587c596
< //        SetMask(new wxMask( maskBitmap ));
---
>         SetMask(new wxMask( maskBitmap ));
589c598
<     
---
> 
592c601
<     SetGWorld( origPort, origDevice );
---
>     SetGWorld(origPort, origDevice);
611d619
<     GDHandle  origDevice;
619c627
<     GetGWorld( &origPort, &origDevice );
---
>     GetPort(&origPort);
621c629
<     SetGWorld( GetHBITMAP(), NULL);
---
>     SetPort(GetHBITMAP());
656c664
<     SetGWorld(origPort, origDevice);
---
>     SetPort(origPort);
662c670,671
< bool wxBitmap::SaveFile(const wxString& filename, int type, const wxPalette *palette)
---
> bool wxBitmap::SaveFile(const wxString& filename, int type,
>                         const wxPalette *palette)
666,667c675,681
<     if ( handler == NULL ) {
<         wxLogWarning("no bitmap handler for type %d defined.", type);
---
>     if(handler)
>     {
>         return handler->SaveFile(this, filename, type, palette);
>     }
>     else
>     {
>         wxImage image = ConvertToImage();
669,670c683,684
<         return FALSE;
<   }
---
>         return image.SaveFile(filename, type);
>     }
672c686,687
<   return handler->SaveFile(this, filename, type, palette);
---
>     wxLogWarning("no bitmap handler for type %d defined.", type);
>     return false;
772,773c787,790
<     if (!M_BITMAPDATA)
<         m_refData = new wxBitmapRefData;
---
>     if (!M_BITMAPDATA)   m_refData = new wxBitmapRefData;
> 
>     // Remove existing mask if there is one.
>     if(M_BITMAPDATA->m_bitmapMask)   delete M_BITMAPDATA->m_bitmapMask;
1171c1188,1190
< /* TODO: bitmap handlers, a bit like this:
---
> #if 0   // The following is an example for creating a bitmap handler
> 
> // TODO: bitmap handlers, a bit like this:
1187,1243d1205
< */
< 
< class WXDLLEXPORT wxXPMFileHandler: public wxBitmapHandler
< {
<   DECLARE_DYNAMIC_CLASS(wxXPMFileHandler)
< public:
<   inline wxXPMFileHandler(void)
<   {
<   m_name = "XPM bitmap file";
<   m_extension = "xpm";
<   m_type = wxBITMAP_TYPE_XPM;
<   };
< 
<   virtual bool LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth = -1, int desiredHeight = -1);
<   virtual bool SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *palette = NULL);
< };
< IMPLEMENT_DYNAMIC_CLASS(wxXPMFileHandler, wxBitmapHandler)
< 
< bool wxXPMFileHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth, int desiredHeight)
< {
< #if USE_XPM_IN_MSW
<     XImage *ximage;
<     XpmAttributes xpmAttr;
<     HDC     dc;
< 
<     M_BITMAPHANDLERDATA->m_ok = FALSE;
<     dc = CreateCompatibleDC(NULL);
<     if (dc)
<     {
<       xpmAttr.valuemask = XpmReturnPixels;
<       int errorStatus = XpmReadFileToImage(&dc, WXSTRINGCAST name, &ximage, (XImage **) NULL, &xpmAttr);
<       DeleteDC(dc);
<       if (errorStatus == XpmSuccess)
<       {
<         M_BITMAPHANDLERDATA->m_hBitmap = (WXHBITMAP) ximage->bitmap;
< 
<         BITMAP  bm;
<         GetObject((HBITMAP)M_BITMAPHANDLERDATA->m_hBitmap, sizeof(bm), (LPSTR) & bm);
< 
<         M_BITMAPHANDLERDATA->m_width = (bm.bmWidth);
<         M_BITMAPHANDLERDATA->m_height = (bm.bmHeight);
<         M_BITMAPHANDLERDATA->m_depth = (bm.bmPlanes * bm.bmBitsPixel);
<         M_BITMAPHANDLERDATA->m_numColors = xpmAttr.npixels;
<         XpmFreeAttributes(&xpmAttr);
<         XImageFree(ximage);
< 
<         M_BITMAPHANDLERDATA->m_ok = TRUE;
<         return TRUE;
<       }
<       else
<       {
<         M_BITMAPHANDLERDATA->m_ok = FALSE;
<         return FALSE;
<       }
<     }
1246,1283d1207
<     return FALSE;
< }
< 
< bool wxXPMFileHandler::SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *palette)
< {
< #if USE_XPM_IN_MSW
<       HDC     dc = NULL;
< 
<       Visual *visual = NULL;
<       XImage  ximage;
< 
<       dc = CreateCompatibleDC(NULL);
<       if (dc)
<       {
<         if (SelectObject(dc, (HBITMAP) M_BITMAPHANDLERDATA->m_hBitmap))
<         { 
<           
<     ximage.width = M_BITMAPHANDLERDATA->m_width; 
<      ximage.height = M_BITMAPHANDLERDATA->m_height;
<     ximage.depth = M_BITMAPHANDLERDATA->m_depth; 
<      ximage.bitmap = (void *)M_BITMAPHANDLERDATA->m_hBitmap;
<     int errorStatus = XpmWriteFileFromImage(&dc, WXSTRINGCAST name,
<               &ximage, (XImage *) NULL, (XpmAttributes *) NULL);
< 
<           if (dc)
<       DeleteDC(dc);
< 
<     if (errorStatus == XpmSuccess)
<       return TRUE;    
<     else
<       return FALSE;
<         } else return FALSE;
<       } else return FALSE;
< #else
<   return FALSE;
< #endif
< }
< 
1284a1209
> 
1344,1420d1268
< class WXDLLEXPORT wxBMPResourceHandler: public wxBitmapHandler
< {
<     DECLARE_DYNAMIC_CLASS(wxBMPResourceHandler)
< public:
<     inline wxBMPResourceHandler()
<     {
<         m_name = "Windows bitmap resource";
<         m_extension = "";
<         m_type = wxBITMAP_TYPE_BMP_RESOURCE;
<     };
< 
<     virtual bool LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<           int desiredWidth, int desiredHeight);
< };
< 
< IMPLEMENT_DYNAMIC_CLASS(wxBMPResourceHandler, wxBitmapHandler)
< 
< bool wxBMPResourceHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth, int desiredHeight)
< {
<     // TODO: load colourmap.
<   // it's probably not found
<   wxLogError("Can't load bitmap '%s' from resources! Check .rc file.", name.c_str());
< 
<   return FALSE;
< }
< 
< class WXDLLEXPORT wxBMPFileHandler: public wxBitmapHandler
< {
<   DECLARE_DYNAMIC_CLASS(wxBMPFileHandler)
< public:
<   inline wxBMPFileHandler(void)
<   {
<   m_name = "Windows bitmap file";
<   m_extension = "bmp";
<   m_type = wxBITMAP_TYPE_BMP;
<   };
< 
<   virtual bool LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<       int desiredWidth, int desiredHeight);
<   virtual bool SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *palette = NULL);
< };
< 
< IMPLEMENT_DYNAMIC_CLASS(wxBMPFileHandler, wxBitmapHandler)
< 
< bool wxBMPFileHandler::LoadFile(wxBitmap *bitmap, const wxString& name, long flags,
<     int desiredWidth, int desiredHeight)
< {
< #if USE_IMAGE_LOADING_IN_MSW
<     wxPalette *palette = NULL;
<     bool success = FALSE;
<     success = (wxLoadIntoBitmap(WXSTRINGCAST name, bitmap, &palette) != 0);
<     if (!success && palette)
<     {
<       delete palette;
<       palette = NULL;
<     }
<     if (palette)
<       M_BITMAPHANDLERDATA->m_bitmapPalette = *palette;
<     return success;
< #else
<   return FALSE;
< #endif
< }
< 
< bool wxBMPFileHandler::SaveFile(wxBitmap *bitmap, const wxString& name, int type, const wxPalette *pal)
< {
< #if USE_IMAGE_LOADING_IN_MSW
<     wxPalette *actualPalette = (wxPalette *)pal;
<     if (!actualPalette && (!M_BITMAPHANDLERDATA->m_bitmapPalette.IsNull()))
<       actualPalette = & (M_BITMAPHANDLERDATA->m_bitmapPalette);
<     return (wxSaveBitmap(WXSTRINGCAST name, bitmap, actualPalette) != 0);
< #else
<   return FALSE;
< #endif
< }
< 
1439d1286
<     AddHandler(new wxXPMFileHandler);
1443,1444d1289
<     AddHandler(new wxBMPResourceHandler);
<     AddHandler(new wxBMPFileHandler);

 	  	 

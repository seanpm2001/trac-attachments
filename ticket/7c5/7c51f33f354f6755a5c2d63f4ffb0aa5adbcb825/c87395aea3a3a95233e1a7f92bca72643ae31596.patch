diff -bB -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxMac-2.5.3/src/mac/carbon/bitmap.cpp wxMac-2.5.3-mod/src/mac/carbon/bitmap.cpp
--- wxMac-2.5.3/src/mac/carbon/bitmap.cpp	Tue Nov  9 10:40:53 2004
+++ wxMac-2.5.3-mod/src/mac/carbon/bitmap.cpp	Wed Nov 10 17:56:40 2004
@@ -746,6 +746,9 @@
     // Render image
     register unsigned char* data = image.GetData();
+	register unsigned char* alpha = image.GetAlpha();
     char* destinationBase = GetPixBaseAddr( pixMap );
     register unsigned char* destination = (unsigned char*) destinationBase ;
+	if (! image.HasAlpha() )
+	{
     for (int y = 0; y < height; y++)
     {
@@ -760,8 +763,27 @@
         destination = (unsigned char*) destinationBase ;
     }
-    if ( image.HasAlpha() )
+	}
+	else
     {
       unsigned char *alpha = image.GetAlpha();
 
+		for (int y = 0; y < height; y++)
+		{
+			for (int x = 0; x < width; x++)
+			{
+				*destination++ = *alpha++ ;
+				*destination++ = *data++ ;
+				*destination++ = *data++ ;
+				*destination++ = *data++ ;
+			}
+			destinationBase += ((**pixMap).rowBytes & 0x7fff);
+			destination = (unsigned char*) destinationBase ;
+		}
+		M_BITMAPDATA->m_hasAlpha = true;
+	}
+
+	if ( image.HasAlpha() )
+	{
+	  unsigned char *alpha = image.GetAlpha();
       wxColour maskcolor(image.GetMaskRed(), image.GetMaskGreen(), image.GetMaskBlue());
       RGBColor color ;
@@ -774,10 +796,8 @@
       for (int y = 0; y < height; y++)
       {
-          for (int x = 0; x < width; x++)
+		  for (int x = 0; x < width; x++, alpha++)
           {
               memset( &color , 255 - *alpha , sizeof( color ) );
               SetCPixel(x,y, &color);
-
-              alpha += 1 ;
           }
       }  // for height
@@ -841,9 +861,10 @@
     RgnHandle maskRgn = NULL ;
     GWorldPtr tempPort = NULL ;
-    int      index;
-    RGBColor color;
+	int	  index, aindex;
     // background color set to RGB(16,16,16) in consistent with wxGTK
-    unsigned char mask_r=16, mask_g=16, mask_b=16;
-    SInt16   r,g,b;
+	unsigned char mask_r = 16, mask_g = 16, mask_b = 16;
+	unsigned char *alpha = NULL;
+	long *basePixels, *pixel;
+	long rowBytes;
     wxMask  *mask = GetMask();
 
@@ -857,6 +878,9 @@
         tempPort =  (GWorldPtr) GetHBITMAP() ;
     }
-    LockPixels(GetGWorldPixMap(tempPort));
-    SetGWorld( tempPort, NULL);
+	PixMapHandle pixmap = GetGWorldPixMap(tempPort);
+	LockPixels(pixmap);
+	SetGWorld(tempPort, NULL);
+	basePixels = (long *) GetPixBaseAddr(pixmap);
+	rowBytes = GetPixRowBytes(pixmap);
     if ( GetBitmapType() == kMacBitmapTypePict || GetBitmapType() == kMacBitmapTypeIcon )
     {
@@ -872,17 +896,21 @@
     }
     // Copy data into image
-    index = 0;
-    for (int yy = 0; yy < height; yy++)
+	if (M_BITMAPDATA->m_hasAlpha)
     {
-        for (int xx = 0; xx < width; xx++)
+		aindex = 0;
+		alpha = new unsigned char[width * height];
+	}
+	for (int yy = 0, index = 0; yy < height; yy++)
         {
-            GetCPixel(xx,yy, &color);
-            r = ((color.red ) >> 8);
-            g = ((color.green ) >> 8);
-            b = ((color.blue ) >> 8);
-            data[index    ] = r;
-            data[index + 1] = g;
-            data[index + 2] = b;
-            if ( maskRgn )
+		pixel = (long *) ((Byte *) basePixels + (yy * rowBytes));
+		for (int xx = 0; xx < width; xx++, pixel++, index += 3)
+		{
+			if (M_BITMAPDATA->m_hasAlpha)
+				alpha[aindex++] = (*pixel & 0xff000000) >> 24;
+			data[index    ] = (*pixel & 0x00ff0000) >> 16;
+			data[index + 1] = (*pixel & 0x0000ff00) >> 8;
+			data[index + 2] = (*pixel & 0x000000ff);
+
+			if ( ! M_BITMAPDATA->m_hasAlpha && maskRgn )
             {
                 Point pt ;
@@ -898,5 +926,5 @@
             else
             {
-                if (mask)
+				if (! M_BITMAPDATA->m_hasAlpha && mask)
                 {
                     if (mask->PointMasked(xx,yy))
@@ -908,5 +936,4 @@
                 }
             }
-            index += 3;
         }
     }
@@ -916,4 +943,6 @@
         image.SetMask( true );
     }
+	if (M_BITMAPDATA->m_hasAlpha)
+		image.SetAlpha(alpha);
 
     // Free resources

 	  	 

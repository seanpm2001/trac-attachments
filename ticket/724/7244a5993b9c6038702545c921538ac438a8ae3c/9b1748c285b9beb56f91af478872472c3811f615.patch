? wxWindows/wxgtk-2.3-config
? wxWindows/wxgtkd-2.3-config
? wxWindows/contrib/config.log
? wxWindows/contrib/config.status
? wxWindows/contrib/samples/Makefile
? wxWindows/contrib/samples/applet/Makefile
? wxWindows/contrib/samples/canvas/Makefile
? wxWindows/contrib/samples/canvas/simple/Makefile
? wxWindows/contrib/samples/canvas/test/Makefile
? wxWindows/contrib/samples/fl/Makefile
? wxWindows/contrib/samples/fl/fl_demo1/Makefile
? wxWindows/contrib/samples/fl/fl_demo2/Makefile
? wxWindows/contrib/samples/fl/fl_sample1/Makefile
? wxWindows/contrib/samples/fl/fl_sample2/Makefile
? wxWindows/contrib/samples/fl/fl_sample3/Makefile
? wxWindows/contrib/samples/gizmos/Makefile
? wxWindows/contrib/samples/gizmos/dynsash/Makefile
? wxWindows/contrib/samples/gizmos/dynsash_switch/Makefile
? wxWindows/contrib/samples/gizmos/editlbox/Makefile
? wxWindows/contrib/samples/gizmos/multicell/Makefile
? wxWindows/contrib/samples/gizmos/splittree/Makefile
? wxWindows/contrib/samples/mmedia/Makefile
? wxWindows/contrib/samples/ogl/Makefile
? wxWindows/contrib/samples/ogl/ogledit/Makefile
? wxWindows/contrib/samples/ogl/studio/Makefile
? wxWindows/contrib/samples/plot/Makefile
? wxWindows/contrib/samples/stc/Makefile
? wxWindows/contrib/samples/svg/Makefile
? wxWindows/contrib/samples/xrc/Makefile
? wxWindows/contrib/src/Makefile
? wxWindows/contrib/src/applet/Makefile
? wxWindows/contrib/src/canvas/Makefile
? wxWindows/contrib/src/fl/Makefile
? wxWindows/contrib/src/fl/antiflickpl.d
? wxWindows/contrib/src/fl/bardragpl.d
? wxWindows/contrib/src/fl/barhintspl.d
? wxWindows/contrib/src/fl/cbcustom.d
? wxWindows/contrib/src/fl/controlbar.d
? wxWindows/contrib/src/fl/dyntbar.d
? wxWindows/contrib/src/fl/dyntbarhnd.d
? wxWindows/contrib/src/fl/frmview.d
? wxWindows/contrib/src/fl/garbagec.d
? wxWindows/contrib/src/fl/gcupdatesmgr.d
? wxWindows/contrib/src/fl/hintanimpl.d
? wxWindows/contrib/src/fl/newbmpbtn.d
? wxWindows/contrib/src/fl/panedrawpl.d
? wxWindows/contrib/src/fl/rowdragpl.d
? wxWindows/contrib/src/fl/rowlayoutpl.d
? wxWindows/contrib/src/fl/toolwnd.d
? wxWindows/contrib/src/fl/updatesmgr.d
? wxWindows/contrib/src/gizmos/Makefile
? wxWindows/contrib/src/mmedia/Makefile
? wxWindows/contrib/src/net/Makefile
? wxWindows/contrib/src/ogl/Makefile
? wxWindows/contrib/src/plot/Makefile
? wxWindows/contrib/src/stc/Makefile
? wxWindows/contrib/src/svg/Makefile
? wxWindows/contrib/src/xrc/Makefile
? wxWindows/contrib/utils/Makefile
? wxWindows/contrib/utils/convertrc/Makefile
? wxWindows/contrib/utils/wxrc/Makefile
? wxWindows/contrib/utils/wxrcedit/Makefile
? wxWindows/demos/Makefile
? wxWindows/demos/config.log
? wxWindows/demos/config.status
? wxWindows/demos/bombs/Makefile
? wxWindows/demos/dbbrowse/Makefile
? wxWindows/demos/forty/Makefile
? wxWindows/demos/fractal/Makefile
? wxWindows/demos/life/Makefile
? wxWindows/demos/poem/Makefile
? wxWindows/docs/latex/book/Makefile
? wxWindows/docs/latex/wx/sizer00.eps
? wxWindows/docs/latex/wx/sizer01.eps
? wxWindows/docs/latex/wx/sizer02.eps
? wxWindows/docs/latex/wx/sizer03.eps
? wxWindows/docs/latex/wx/sizer04.eps
? wxWindows/docs/latex/wx/sizer05.eps
? wxWindows/docs/latex/wx/sizer06.eps
? wxWindows/docs/latex/wx/sizer07.eps
? wxWindows/docs/latex/wx/sizer08.eps
? wxWindows/docs/latex/wx/sizer09.eps
? wxWindows/docs/latex/wx/sizer10.eps
? wxWindows/docs/latex/wx/sizer11.eps
? wxWindows/docs/latex/wx/splitsizr.tex
? wxWindows/lib/libawtlayd.so.1.0.0
? wxWindows/lib/libdiamondd.so.1.0.0
? wxWindows/lib/libeqsolverd.so.1.0.0
? wxWindows/lib/libpmfd.so.1.0.0
? wxWindows/lib/libsourceparserd.so.1.0.0
? wxWindows/lib/libwsppd.so.1.0.0
? wxWindows/lib/libwsutilsd.so.1.0.0
? wxWindows/lib/libxobjectsd.so.1.0.0
? wxWindows/lib/libxrcd.so.1.0.0
? wxWindows/lib/wx
? wxWindows/samples/Makefile
? wxWindows/samples/config.log
? wxWindows/samples/config.status
? wxWindows/samples/artprov/Makefile
? wxWindows/samples/calendar/Makefile
? wxWindows/samples/caret/Makefile
? wxWindows/samples/checklst/Makefile
? wxWindows/samples/config/Makefile
? wxWindows/samples/console/Makefile
? wxWindows/samples/controls/Makefile
? wxWindows/samples/db/Makefile
? wxWindows/samples/dialogs/Makefile
? wxWindows/samples/dialup/Makefile
? wxWindows/samples/dnd/Makefile
? wxWindows/samples/docview/Makefile
? wxWindows/samples/docvwmdi/Makefile
? wxWindows/samples/dragimag/Makefile
? wxWindows/samples/drawing/Makefile
? wxWindows/samples/dynamic/Makefile
? wxWindows/samples/erase/Makefile
? wxWindows/samples/event/Makefile
? wxWindows/samples/exec/Makefile
? wxWindows/samples/font/Makefile
? wxWindows/samples/grid/Makefile
? wxWindows/samples/help/Makefile
? wxWindows/samples/html/Makefile
? wxWindows/samples/html/about/Makefile
? wxWindows/samples/html/help/Makefile
? wxWindows/samples/html/helpview/Makefile
? wxWindows/samples/html/printing/Makefile
? wxWindows/samples/html/test/Makefile
? wxWindows/samples/html/virtual/Makefile
? wxWindows/samples/html/widget/Makefile
? wxWindows/samples/html/zip/Makefile
? wxWindows/samples/image/Makefile
? wxWindows/samples/internat/Makefile
? wxWindows/samples/ipc/Makefile
? wxWindows/samples/joytest/Makefile
? wxWindows/samples/keyboard/Makefile
? wxWindows/samples/layout/Makefile
? wxWindows/samples/listctrl/Makefile
? wxWindows/samples/mdi/Makefile
? wxWindows/samples/memcheck/Makefile
? wxWindows/samples/menu/Makefile
? wxWindows/samples/minifram/Makefile
? wxWindows/samples/minimal/Makefile
? wxWindows/samples/mobile/Makefile
? wxWindows/samples/mobile/styles/Makefile
? wxWindows/samples/mobile/wxedit/Makefile
? wxWindows/samples/newgrid/Makefile
? wxWindows/samples/notebook/Makefile
? wxWindows/samples/opengl/Makefile
? wxWindows/samples/opengl/cube/Makefile
? wxWindows/samples/opengl/isosurf/Makefile
? wxWindows/samples/opengl/penguin/Makefile
? wxWindows/samples/png/Makefile
? wxWindows/samples/printing/Makefile
? wxWindows/samples/proplist/Makefile
? wxWindows/samples/propsize/Makefile
? wxWindows/samples/resource/Makefile
? wxWindows/samples/richedit/Makefile
? wxWindows/samples/rotate/Makefile
? wxWindows/samples/sashtest/Makefile
? wxWindows/samples/scroll/Makefile
? wxWindows/samples/scrollsub/Makefile
? wxWindows/samples/sockets/Makefile
? wxWindows/samples/splitter/Makefile
? wxWindows/samples/statbar/Makefile
? wxWindows/samples/text/Makefile
? wxWindows/samples/thread/Makefile
? wxWindows/samples/toolbar/Makefile
? wxWindows/samples/treectrl/Makefile
? wxWindows/samples/treelay/Makefile
? wxWindows/samples/typetest/Makefile
? wxWindows/samples/validate/Makefile
? wxWindows/samples/widgets/Makefile
? wxWindows/samples/wizard/Makefile
? wxWindows/utils/Makefile
? wxWindows/utils/config.log
? wxWindows/utils/config.status
? wxWindows/utils/HelpGen/Makefile
? wxWindows/utils/HelpGen/src/Makefile
? wxWindows/utils/dialoged/Makefile
? wxWindows/utils/emulator/Makefile
? wxWindows/utils/emulator/src/Makefile
? wxWindows/utils/helpview/Makefile
? wxWindows/utils/helpview/src/Makefile
? wxWindows/utils/hhp2cached/Makefile
? wxWindows/utils/makegen/Makefile
? wxWindows/utils/tex2rtf/Makefile
? wxWindows/utils/tex2rtf/src/Makefile
Index: wxWindows/docs/latex/wx/tsizer.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/tsizer.tex,v
retrieving revision 1.6
diff -b -u -2 -r1.6 tsizer.tex
--- wxWindows/docs/latex/wx/tsizer.tex	13 Jun 2002 20:21:20 -0000	1.6
+++ wxWindows/docs/latex/wx/tsizer.tex	24 Aug 2002 20:28:37 -0000
@@ -5,4 +5,5 @@
 \helpref{wxStaticBoxSizer}{wxstaticboxsizer}, 
 \helpref{wxNotebookSizer}{wxnotebooksizer}
+\helpref{wxSplitterSizer}{wxsplittersizer}
 
 Sizers, as represented by the wxSizer class and its descendants in
@@ -307,4 +308,51 @@
 \end{verbatim}
 
+\subsection{Programming with wxSplitterSizer}\label{splittersizerprogramming}
+
+\helpref{wxSplitterSizer}{wxsplittersizer} is a specialized sizer to make sizers work in connection
+with splitted windows. This sizer is different from any other sizer as 
+you must not add any children to it - instead, it queries the splitter window class itself.
+The only thing this sizer does is to summerize the size of the panes, set the sash position and
+report an adjusted minimal size top a more toplevel sizer.
+
+In order to query the size of a pane, this window needs to have its
+own sizer, or (e.g. if its just a control) the DoGetBestSize() function must be overwritten correctly.
+
+Here is one example:
+
+\begin{verbatim}
+	class wxMySplitterWindow : public wxSplitterWindow
+	{
+	public:
+		wxMySplitterWindow(	wxWindow* parent, wxWindowID id,
+					const wxPoint& pos = wxDefaultPosition,
+					const wxSize& size = wxDefaultSize,
+					long style = 0,
+					const wxString& name = wxT("splitter window"));
+	protected:
+		wxMyTreeCtrl *m_pMyTree;
+		wxMyFrame *m_pMyFrame;
+	};
+
+	wxMySplitterWindow::wxMySplitterWindow(	wxWindow* parent, wxWindowID id,
+						const wxPoint& pos, const wxSize& size,
+						long style, const wxString& name))
+		: wxSplitterWindow(parent, id, pos, size, style, name)
+	{
+		m_pMyTree = new wxMyTreeCtrl(this, -1);
+		m_pMyFrame = new wxMyFrame(this, -1);
+
+		// Sash position is unimportant, as it is set be sizer again,
+		// so set it to zero.
+		SplitVertically(m_pMyTree, m_pMyFrame, 0);
+
+		wxSplitterSize *pSizer =  new
+		wxSplitterSizer(this);
+		SetAutoLayout(true);
+		SetSizer(pSizer);pSizer->Fit(this);
+	}
+\end{verbatim}
+
+
 \subsection{Programming with wxStaticBoxSizer}\label{staticboxsizerprogramming}
 
@@ -312,3 +360,4 @@
 box around the sizer. Note that this static box has to be created 
 separately.
+
 
Index: wxWindows/include/wx/sizer.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/sizer.h,v
retrieving revision 1.22
diff -b -u -2 -r1.22 sizer.h
--- wxWindows/include/wx/sizer.h	13 Jun 2002 20:21:20 -0000	1.22
+++ wxWindows/include/wx/sizer.h	24 Aug 2002 20:28:39 -0000
@@ -3,7 +3,7 @@
 // Purpose:     provide wxSizer class for layouting
 // Author:      Robert Roebling and Robin Dunn
-// Modified by: Ron Lee
+// Modified by: Matthias Nagel
 // Created:
-// RCS-ID:      $Id: sizer.h,v 1.22 2002/06/13 20:21:20 VZ Exp $
+// RCS-ID:      $Id: sizer.h,v 1.20 2001/11/13 16:21:04 RR Exp $
 // Copyright:   (c) Robin Dunn, Dirk Holtwick and Robert Roebling
 // Licence:     wxWindows licence
@@ -185,8 +185,6 @@
     virtual void Layout();
 
-    wxSize Fit( wxWindow *window );
-    void FitInside( wxWindow *window );
+    void Fit( wxWindow *window );
     void SetSizeHints( wxWindow *window );
-    void SetVirtualSizeHints( wxWindow *window );
 
     wxList& GetChildren()
@@ -203,8 +201,5 @@
     wxSize GetMaxWindowSize( wxWindow *window );
     wxSize GetMinWindowSize( wxWindow *window );
-    wxSize GetMaxClientSize( wxWindow *window );
-    wxSize GetMinClientSize( wxWindow *window );
     wxSize FitSize( wxWindow *window );
-    wxSize VirtualFitSize( wxWindow *window );
 
     virtual void DoSetMinSize( int width, int height );
@@ -365,4 +360,25 @@
 #endif // wxUSE_NOTEBOOK
 
+//---------------------------------------------------------------------------
+// wxSplitterSizer added by Matthias Nagel
+//---------------------------------------------------------------------------
+
+class WXDLLEXPORT wxSplitterWindow;
+
+class WXDLLEXPORT wxSplitterSizer : public wxSizer  
+{
+public:
+        wxSplitterSizer(wxSplitterWindow *pWnd);
+        virtual ~wxSplitterSizer();
+
+protected:
+        wxSplitterWindow *m_pSplitWnd;
+        int m_nSashPosition;
+
+public:
+        virtual void RecalcSizes();
+        virtual wxSize CalcMin();
+        wxSplitterWindow* GetSplitterWindow(){ return m_pSplitWnd; }
+};
 
 #endif
Index: wxWindows/src/common/sizer.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/common/sizer.cpp,v
retrieving revision 1.45
diff -b -u -2 -r1.45 sizer.cpp
--- wxWindows/src/common/sizer.cpp	9 Jul 2002 05:51:38 -0000	1.45
+++ wxWindows/src/common/sizer.cpp	24 Aug 2002 20:28:49 -0000
@@ -3,7 +3,7 @@
 // Purpose:     provide new wxSizer class for layout
 // Author:      Robert Roebling and Robin Dunn
-// Modified by: Ron Lee
+// Modified by:
 // Created:
-// RCS-ID:      $Id: sizer.cpp,v 1.45 2002/07/09 05:51:38 RR Exp $
+// RCS-ID:      $Id: sizer.cpp,v 1.35 2001/11/13 16:21:04 RR Exp $
 // Copyright:   (c) Robin Dunn, Dirk Holtwick and Robert Roebling
 // Licence:     wxWindows licence
@@ -25,17 +25,18 @@
 #include "wx/statbox.h"
 #include "wx/notebook.h"
+#include "wx/splitter.h"
 
 //---------------------------------------------------------------------------
 
-IMPLEMENT_ABSTRACT_CLASS(wxSizerItem, wxObject)
-IMPLEMENT_ABSTRACT_CLASS(wxSizer, wxObject)
-IMPLEMENT_ABSTRACT_CLASS(wxGridSizer, wxSizer)
-IMPLEMENT_ABSTRACT_CLASS(wxFlexGridSizer, wxGridSizer)
-IMPLEMENT_ABSTRACT_CLASS(wxBoxSizer, wxSizer)
+IMPLEMENT_ABSTRACT_CLASS(wxSizerItem, wxObject);
+IMPLEMENT_ABSTRACT_CLASS(wxSizer, wxObject);
+IMPLEMENT_ABSTRACT_CLASS(wxGridSizer, wxSizer);
+IMPLEMENT_ABSTRACT_CLASS(wxFlexGridSizer, wxGridSizer);
+IMPLEMENT_ABSTRACT_CLASS(wxBoxSizer, wxSizer);
 #if wxUSE_STATBOX
-IMPLEMENT_ABSTRACT_CLASS(wxStaticBoxSizer, wxBoxSizer)
+IMPLEMENT_ABSTRACT_CLASS(wxStaticBoxSizer, wxBoxSizer);
 #endif
 #if wxUSE_NOTEBOOK
-IMPLEMENT_ABSTRACT_CLASS(wxNotebookSizer, wxSizer)
+IMPLEMENT_ABSTRACT_CLASS(wxNotebookSizer, wxSizer);
 #endif
 
@@ -270,5 +271,4 @@
 wxSizer::~wxSizer()
 {
-    Clear();
 }
 
@@ -276,5 +276,4 @@
 {
     m_children.Append( new wxSizerItem( window, option, flag, border, userData ) );
-    window->SetContainingSizer(this);
 }
 
@@ -292,5 +291,4 @@
 {
     m_children.Insert( new wxSizerItem( window, option, flag, border, userData ) );
-    window->SetContainingSizer(this);
 }
 
@@ -308,5 +306,4 @@
 {
     m_children.Insert( before, new wxSizerItem( window, option, flag, border, userData ) );
-    window->SetContainingSizer(this);
 }
 
@@ -331,5 +328,4 @@
         if (item->GetWindow() == window)
         {
-            item->GetWindow()->SetContainingSizer(NULL);
             m_children.DeleteNode( node );
             return TRUE;
@@ -372,19 +368,7 @@
 void wxSizer::Clear( bool delete_windows )
 {
-    // First clear the ContainingSizer pointers
-    wxNode *node = m_children.First();
-    while (node)
-    {
-        wxSizerItem *item = (wxSizerItem*)node->Data();
-        if (item->IsWindow())
-            item->GetWindow()->SetContainingSizer(NULL);
-        node = node->Next();
-    }
-
-    // Destroy the windows if needed
     if (delete_windows)
         DeleteWindows();
 
-    // Now empty the list
     m_children.Clear();
 }
@@ -401,5 +385,5 @@
 }
 
-wxSize wxSizer::Fit( wxWindow *window )
+void wxSizer::Fit( wxWindow *window )
 {
     wxSize size;
@@ -410,17 +394,4 @@
 
     window->SetSize( size );
-
-    return size;
-}
-
-void wxSizer::FitInside( wxWindow *window )
-{
-    wxSize size;
-    if (window->IsTopLevel())
-        size = VirtualFitSize( window );
-    else
-        size = GetMinClientSize( window );
-
-    window->SetVirtualSize( size );
 }
 
@@ -433,31 +404,27 @@
 void wxSizer::SetSizeHints( wxWindow *window )
 {
-    // Preserve the window's max size hints, but set the
-    // lower bound according to the sizer calculations.
-
-    wxSize size = Fit( window );
-
-    window->SetSizeHints( size.x,
-                          size.y,
-                          window->GetMaxWidth(),
-                          window->GetMaxHeight() );
+    wxSize size = FitSize( window );
+    window->SetSizeHints( size.x, size.y );
 }
 
-void wxSizer::SetVirtualSizeHints( wxWindow *window )
+wxSize wxSizer::GetMaxWindowSize( wxWindow *WXUNUSED(window) )
 {
-    // Preserve the window's max size hints, but set the
-    // lower bound according to the sizer calculations.
+    wxRect rect = wxGetClientDisplayRect();
+    wxSize sizeMax (rect.width,rect.height);
 
-    FitInside( window );
-    wxSize size( window->GetVirtualSize() );
-    window->SetVirtualSizeHints( size.x,
-                                 size.y,
-                                 window->GetMaxWidth(),
-                                 window->GetMaxHeight() );
-}
+    // Sorry, but this bit is wrong -- it makes a window that should just be
+    // able to fit onto the screen, not fit on the screen. -- JACS
+#if 0
+    // Make the max size a bit smaller than the visible portion of
+    // the screen.  A window which takes the entire screen doesn't
+    // look very nice either
+    sizeMax.x *= 9;
+    sizeMax.x /= 10;
 
-wxSize wxSizer::GetMaxWindowSize( wxWindow *window )
-{
-    return window->GetMaxSize();
+    sizeMax.y *= 9;
+    sizeMax.y /= 10;
+#endif
+
+    return sizeMax;
 }
 
@@ -477,45 +444,7 @@
     wxSize sizeMax  = GetMaxWindowSize( window );
 
-    // Limit the size if sizeMax != wxDefaultSize
-
-    if ( size.x > sizeMax.x && sizeMax.x != -1 )
+    if ( size.x > sizeMax.x )
         size.x = sizeMax.x;
-    if ( size.y > sizeMax.y && sizeMax.y != -1 )
-        size.y = sizeMax.y;
-
-    return size;
-}
-
-wxSize wxSizer::GetMaxClientSize( wxWindow *window )
-{
-    wxSize maxSize( window->GetMaxSize() );
-
-    if( maxSize != wxDefaultSize )
-    {
-        wxSize size( window->GetSize() );
-        wxSize client_size( window->GetClientSize() );
-
-        return wxSize( maxSize.x + client_size.x - size.x,
-                       maxSize.y + client_size.y - size.y );
-    }
-    else
-        return wxDefaultSize;
-}
-
-wxSize wxSizer::GetMinClientSize( wxWindow *WXUNUSED(window) )
-{
-    return GetMinSize();  // Already returns client size.
-}
-
-wxSize wxSizer::VirtualFitSize( wxWindow *window )
-{
-    wxSize size     = GetMinClientSize( window );
-    wxSize sizeMax  = GetMaxClientSize( window );
-
-    // Limit the size if sizeMax != wxDefaultSize
-
-    if ( size.x > sizeMax.x && sizeMax.x != -1 )
-        size.x = sizeMax.x;
-    if ( size.y > sizeMax.y && sizeMax.y != -1 )
+    if ( size.y > sizeMax.y )
         size.y = sizeMax.y;
 
@@ -712,5 +641,5 @@
         ncols = (nitems + nrows-1) / nrows;
 
-    // Find the max width and height for any component
+    /* Find the max width and height for any component */
     int w = 0;
     int h = 0;
@@ -837,34 +766,18 @@
     wxPoint pt( GetPosition() );
     int    delta;
-    size_t idx,num;
-    wxArrayInt temp;
-    
-    // Transfer only those rows into temp which exist in the sizer
-    // ignoring the superflouus ones. This prevents a segfault when
-    // calling AddGrowableRow( 3 ) if the sizer only has 2 rows.
-    for (idx = 0; idx < m_growableRows.GetCount(); idx++)
-        if (m_growableRows[idx] < nrows)
-            temp.Add( m_growableRows[idx] );
-    num = temp.GetCount();
+    size_t idx;
 
-    if ((num > 0) && (sz.y > minsz.y))
+    if ((m_growableRows.GetCount() > 0) && (sz.y > minsz.y))
     {
-        delta = (sz.y - minsz.y) / num;
-        for (idx = 0; idx < num; idx++)
-            m_rowHeights[ temp[idx] ] += delta;
+        delta = (sz.y - minsz.y) / m_growableRows.GetCount();
+        for (idx = 0; idx < m_growableRows.GetCount(); idx++)
+            m_rowHeights[ m_growableRows[idx] ] += delta;
     }
 
-    temp.Empty();
-    // See above 
+    if ((m_growableCols.GetCount() > 0) && (sz.x > minsz.x))
+    {
+        delta = (sz.x - minsz.x) / m_growableCols.GetCount();
     for (idx = 0; idx < m_growableCols.GetCount(); idx++)
-        if (m_growableCols[idx] < ncols)
-            temp.Add( m_growableCols[idx] );
-    num = temp.GetCount();
-    
-    if ((num > 0) && (sz.x > minsz.x))
-    {
-        delta = (sz.x - minsz.x) / num;
-        for (idx = 0; idx < num; idx++)
-            m_colWidths[ temp[idx] ] += delta;
+            m_colWidths[ m_growableCols[idx] ] += delta;
     }
 
@@ -1256,3 +1169,99 @@
 #endif // wxUSE_NOTEBOOK
 
-// vi:sts=4:sw=4:et
+
+//---------------------------------------------------------------------------
+// wxSplitterSizer added by Matthias Nagel
+//---------------------------------------------------------------------------
+
+wxSplitterSizer::wxSplitterSizer(wxSplitterWindow *pWnd) : wxSizer()
+{
+	wxASSERT_MSG( pWnd, wxT("wxSplitterSizer needs a splitter window") );
+    m_pSplitWnd = pWnd;
+}
+
+wxSplitterSizer::~wxSplitterSizer(){}
+
+void wxSplitterSizer::RecalcSizes()
+{
+    m_pSplitWnd->SetSize(m_position.x, m_position.y, m_size.x, m_size.y);
+}
+
+wxSize wxSplitterSizer::CalcMin()
+{
+    wxSize szReturn(0,0);
+        // This is not correct, because the sash has a different width on differrent OSes.
+        // Hope that 5 pixels is a good average and does not look too ugly.
+        int nSashWidth = 5;
+
+        // Tests if the window is splitted. If so, we must add the width of the sash
+        // to one of the directions.
+        if(m_pSplitWnd->IsSplit())
+        {
+                switch(m_pSplitWnd->GetSplitMode())
+                {
+                        case wxSPLIT_VERTICAL: szReturn.x += nSashWidth; break;
+                        case wxSPLIT_HORIZONTAL: szReturn.y += nSashWidth; break;
+                }
+        }
+
+        // Examines the first pane
+        wxWindow *pPane1 = m_pSplitWnd->GetWindow1();
+        if(pPane1)
+        {
+                wxSize szPane1Size(0,0);
+                if(pPane1->GetSizer())
+                        // If the pane has a sizer (normally the pane is a panel), we let the sizer
+                        // find out what the best size is.
+                        szPane1Size = pPane1->GetSizer()->CalcMin();
+                else
+                        // If there is no sizer (perhaps the pane is just a control), let's hope that
+                        // OnGetBestSize() is correctly implemented.
+                        szPane1Size = pPane1->GetBestSize();
+
+                        // Now add the size of pane 1 to the total size, depending on the split mode.
+                switch(m_pSplitWnd->GetSplitMode())
+                {
+                        case wxSPLIT_VERTICAL:
+                                m_nSashPosition = szPane1Size.x;
+                                szReturn.x += szPane1Size.x;
+                                if(szReturn.y < szPane1Size.y) szReturn.y = szPane1Size.y;
+                                break;
+                        case wxSPLIT_HORIZONTAL:
+                                m_nSashPosition = szPane1Size.y;
+                                if(szReturn.x < szPane1Size.x) szReturn.x = szPane1Size.x;
+                                szReturn.y += szPane1Size.y;
+                                break;
+                }
+        }
+
+        // Examines the second pane
+        wxWindow *pPane2 = m_pSplitWnd->GetWindow2();
+        if(pPane2)
+        {
+                wxSize szPane2Size(0,0);
+                if(pPane2->GetSizer())
+                        // If the pane has a sizer (normally the pane is a panel), we let the sizer
+                        // find out what the best size is.
+                        szPane2Size = pPane2->GetSizer()->CalcMin();
+                else
+                        // If there is no sizer (perhaps the pane is just a control), let's hope that
+                        // OnGetBestSize() is correctly implemented.
+                        szPane2Size = pPane2->GetBestSize();
+
+                // Now add the size of pane 2 to the total size, depending on the split mode.
+                switch(m_pSplitWnd->GetSplitMode())
+                {
+                        case wxSPLIT_VERTICAL:
+                                szReturn.x += szPane2Size.x;
+                                if(szReturn.y < szPane2Size.y) szReturn.y = szPane2Size.y;
+                                break;
+                        case wxSPLIT_HORIZONTAL:
+                                if(szReturn.x < szPane2Size.x) szReturn.x = szPane2Size.x;
+                                szReturn.y += szPane2Size.y;
+                                break;
+                }
+        }
+
+        m_pSplitWnd->SetSashPosition(m_nSashPosition);
+        return szReturn;
+}

 	  	 

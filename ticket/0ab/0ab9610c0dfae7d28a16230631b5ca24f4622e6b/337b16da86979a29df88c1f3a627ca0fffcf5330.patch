Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 61551)
+++ src/common/sizer.cpp	(working copy)
@@ -1325,6 +1325,14 @@
 {
 }
 
+wxGridSizer::wxGridSizer( int rows, int cols, const wxSize& gap )
+    : m_rows( ( cols == 0 && rows == 0 ) ? 1 : rows )
+    , m_cols( cols )
+    , m_vgap( gap.GetHeight() )
+    , m_hgap( gap.GetWidth() )
+{
+}
+
 wxGridSizer::wxGridSizer( int cols, int vgap, int hgap )
     : m_rows( cols == 0 ? 1 : 0 )
     , m_cols( cols )
@@ -1333,6 +1341,14 @@
 {
 }
 
+wxGridSizer::wxGridSizer( int cols, const wxSize& gap )
+    : m_rows( cols == 0 ? 1 : 0 )
+    , m_cols( cols )
+    , m_vgap( gap.GetHeight() )
+    , m_hgap( gap.GetWidth() )
+{
+}
+
 wxSizerItem *wxGridSizer::Insert(size_t index, wxSizerItem *item)
 {
     // if only the number of columns or the number of rows is specified for a
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 61551)
+++ include/wx/sizer.h	(working copy)
@@ -725,15 +725,27 @@
 {
 public:
     wxGridSizer( int rows, int cols, int vgap, int hgap );
-    wxGridSizer( int cols, int vgap = 0, int hgap = 0 );
+    wxGridSizer( int rows, int cols, const wxSize& gap );
+    wxGridSizer( int cols, int vgap, int hgap );
+    wxGridSizer( int cols, const wxSize& gap = wxSize(0, 0) );
 
     virtual wxSizerItem *Insert(size_t index, wxSizerItem *item);
 
     virtual void RecalcSizes();
     virtual wxSize CalcMin();
 
-    void SetCols( int cols )    { m_cols = cols; }
-    void SetRows( int rows )    { m_rows = rows; }
+    void SetCols( int cols )
+    {
+        wxASSERT_MSG( cols >= 0, "Negative number of columns passed to wxGridSizer::SetCols()");
+        m_cols = cols;
+    }
+
+    void SetRows( int rows )
+    {
+        wxASSERT_MSG( rows >= 0, "Negative number of rows passed to wxGridSizer::SetRows()");
+        m_rows = rows;
+    }
+
     void SetVGap( int gap )     { m_vgap = gap; }
     void SetHGap( int gap )     { m_hgap = gap; }
     int GetCols() const         { return m_cols; }
Index: interface/wx/sizer.h
===================================================================
--- interface/wx/sizer.h	(revision 61551)
+++ interface/wx/sizer.h	(working copy)
@@ -1576,21 +1576,65 @@
 class wxGridSizer : public wxSizer
 {
 public:
-    //@{
     /**
         Constructor for a wxGridSizer.
 
-        @a rows and @a cols determine the number of columns and rows in the sizer -
-        if either of the parameters is zero, it will be calculated to form the
-        total number of children in the sizer, thus making the sizer grow dynamically.
+        @a rows and @a cols determine the number of columns and rows in the sizer.
+        If either the number of rows or columns is zero, the sizer will accommodate
+        all of its children by dynamically adjusting the number of divisions used
+        along one dimension.
 
+        If zeroes are passed in for both @a rows and @a cols, a dynamically-adjusting,
+        single-row sizer is created.
+
         @a vgap and @a hgap define extra space between all children.
     */
-    wxGridSizer(int rows, int cols, int vgap, int hgap);
-    wxGridSizer(int cols, int vgap = 0, int hgap = 0);
-    //@}
+    wxGridSizer( int rows, int cols, int vgap, int hgap );
 
     /**
+        Constructor for a wxGridSizer.
+
+        @a rows and @a cols determine the number of columns and rows in the sizer.
+        If either the number of rows or columns is zero, the sizer will accommodate
+        all of its children by dynamically adjusting the number of divisions used
+        along one dimension.
+
+        If zeroes are passed in for both @a rows and @a cols, a dynamically-adjusting,
+        single-row sizer is created.
+
+        @a gap defines extra space between all children.
+    */
+    wxGridSizer( int rows, int cols, const wxSize& gap );
+
+    /**
+        Constructor for a wxGridSizer.
+
+        @a cols determines the number of columns in the sizer. The created
+        sizer will dynamically adjust the number of rows used so that all
+        of its children are accommodated. (The number of rows is "zero".)
+
+        If zero is passed in for @a cols, a dynamically-adjusting, single-row
+        sizer is created.
+
+        @a vgap and @a hgap define extra space between all children.
+    */
+    wxGridSizer( int cols, int vgap, int hgap );
+
+    /**
+        Constructor for a wxGridSizer.
+
+        @a cols determines the number of columns in the sizer. The created
+        sizer will dynamically adjust the number of rows used so that all
+        of its children are accommodated. (The number of rows is "zero".)
+
+        If zero is passed in for @a cols, a dynamically-adjusting, single-row
+        sizer is created.
+
+        @a gap defines extra space between all children.
+    */
+    wxGridSizer( int cols, const wxSize& gap = wxSize(0, 0) );
+
+    /**
         Returns the number of columns in the sizer.
     */
     int GetCols() const;

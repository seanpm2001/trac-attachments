--- minimal.cpp	2011-02-05 06:14:12 +0800
+++ minimal.cpp	2011-02-05 08:14:26 +0800
@@ -65,10 +65,12 @@
     MyFrame(const wxString& title);
 
     // event handlers (these functions should _not_ be virtual)
+    void OnOpen(wxCommandEvent& event);
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
 
 private:
+    wxArrayString m_filenames;
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -81,6 +83,7 @@
 enum
 {
     // menu items
+    Minimal_Open = wxID_OPEN,
     Minimal_Quit = wxID_EXIT,
 
     // it is important for the id corresponding to the "About" command to have
@@ -97,6 +100,7 @@
 // handlers) which process them. It can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    EVT_MENU(Minimal_Open,  MyFrame::OnOpen)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
 END_EVENT_TABLE()
@@ -156,6 +160,9 @@
     wxMenu *helpMenu = new wxMenu;
     helpMenu->Append(Minimal_About, "&About...\tF1", "Show about dialog");
 
+    fileMenu->Append(Minimal_Open, "&Open\tCtrl-O", "Open a file");
+    fileMenu->AppendSeparator();
+    fileMenu->AppendSeparator();
     fileMenu->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
 
     // now append the freshly created menu to the menu bar...
@@ -198,3 +205,22 @@
                  wxOK | wxICON_INFORMATION,
                  this);
 }
+
+void MyFrame::OnOpen(wxCommandEvent& WXUNUSED(event))
+{
+    wxString filename;
+    wxFileDialog dlg(this);
+    if (dlg.ShowModal() == wxID_OK)
+        filename = dlg.GetFilename();
+    if (filename.empty() || m_filenames.Index(filename) != wxNOT_FOUND)
+        return;
+    m_filenames.Add(filename);
+    wxMenu *fileMenu = GetMenuBar()->GetMenu(0);
+    fileMenu->Insert(2, wxID_ANY, filename, "Open this file");
+    if (m_filenames.GetCount() > 5)

+    {
+        int id = fileMenu->FindItem(m_filenames.Item(0));
+        fileMenu->Delete(id);
+        m_filenames.RemoveAt(0);
+    }
+}
\ No newline at end of file

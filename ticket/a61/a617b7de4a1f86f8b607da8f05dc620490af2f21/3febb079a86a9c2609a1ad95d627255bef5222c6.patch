Index: src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/event.cpp,v
retrieving revision 1.188
diff -u -r1.188 event.cpp
--- src/common/event.cpp	2006/11/05 21:22:08	1.188
+++ src/common/event.cpp	2006/12/26 15:09:51
@@ -1460,4 +1460,40 @@
     return focusWin;
 }
 
+
+// ----------------------------------------------------------------------------
+// wxEventBlocker
+// ----------------------------------------------------------------------------
+
+wxEventBlocker::wxEventBlocker(wxWindow *win, wxEventType type)
+{
+    wxCHECK_RET(win, wxT("Null window given to wxEventBlocker"));
+
+    m_window = win;
+
+    Block(type);
+    m_window->PushEventHandler(this);
+}
+
+wxEventBlocker::~wxEventBlocker()
+{
+    wxEvtHandler *popped = m_window->PopEventHandler(false);
+    wxCHECK_RET(popped == this, 
+        wxT("Don't push other event handlers into a window managed by wxEventBlocker!"));
+}
+
+bool wxEventBlocker::ProcessEvent(wxEvent& event)
+{
+    // should this event be blocked?
+    for (size_t i=0; i < m_eventsToBlock.GetCount(); i++)
+    {
+        wxEventType t = (wxEventType)m_eventsToBlock[i];
+        if (t == wxEVT_ANY ||
+            t == event.GetEventType())
+            return true;        // yes, it should: mark this event as processed
+    }
+
+    return false;
+}
+
 #endif // wxUSE_GUI
Index: include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/event.h,v
retrieving revision 1.262
diff -u -r1.262 event.h
--- include/wx/event.h	2006/11/05 21:22:10	1.262
+++ include/wx/event.h	2006/12/26 15:09:35
@@ -47,6 +47,8 @@
 
 typedef int wxEventType;
 
+#define wxEVT_ANY           ((wxEventType)-1)
+
 // this is used to make the event table entry type safe, so that for an event
 // handler only a function with proper parameter list can be given.
 #define wxStaticCastEvent(type, val) wx_static_cast(type, val)
@@ -467,6 +469,7 @@
     DECLARE_NO_COPY_CLASS(wxPropagateOnce)
 };
 
+
 #if wxUSE_GUI
 
 
@@ -2569,6 +2572,30 @@
     (wxObjectEventFunction)wxStaticCastEvent(wxEventFunction, &func)
 
 #if wxUSE_GUI
+
+// ----------------------------------------------------------------------------
+// wxEventBlocker: helper class to temporarily disable event handling for a window
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_BASE wxEventBlocker : public wxEvtHandler
+{
+public:
+    wxEventBlocker(wxWindow *win, wxEventType type = wxEVT_ANY);
+    ~wxEventBlocker();
+
+    void Block(wxEventType type)
+    {
+        m_eventsToBlock.Add(type);
+    }
+
+    virtual bool ProcessEvent(wxEvent& event);
+
+protected:
+    wxArrayInt m_eventsToBlock;
+    wxWindow *m_window;
+
+    DECLARE_NO_COPY_CLASS(wxEventBlocker)
+};
 
 typedef void (wxEvtHandler::*wxCommandEventFunction)(wxCommandEvent&);
 typedef void (wxEvtHandler::*wxScrollEventFunction)(wxScrollEvent&);
Index: docs/latex/wx/classes.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/classes.tex,v
retrieving revision 1.221
diff -u -r1.221 classes.tex
--- docs/latex/wx/classes.tex	2006/12/11 06:19:06	1.221
+++ docs/latex/wx/classes.tex	2006/12/26 15:36:20
@@ -130,6 +130,7 @@
 \input encconv.tex
 \input eraseevt.tex
 \input event.tex
+\input evtblocker.tex
 \input evthand.tex
 \input ffile.tex
 \input ffilestr.tex

 	  	 

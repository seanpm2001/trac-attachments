diff -u -3 -P -r wxWidgets/.\build\bakefiles\files.bkl wxW/.\build\bakefiles\files.bkl
--- wxWidgets/.\build\bakefiles\files.bkl	Fri Jun 11 22:47:27 2004
+++ wxW/.\build\bakefiles\files.bkl	Mon Jun 14 08:36:42 2004
@@ -1321,6 +1321,7 @@
     src/msw/wince/filedlgwce.cpp
     src/msw/wince/helpwce.cpp
     src/msw/wince/tbarwce.cpp
+    src/msw/wince/menuce.cpp
 </set>
 <set var="WINCE_HDR" hints="files">
     wx/generic/fdrepdlg.h
@@ -1329,6 +1330,7 @@
     wx/msw/wince/libraries.h
     wx/msw/wince/missing.h
     wx/msw/wince/tbarwce.h
+    wx/msw/wince/resources.h
 </set>
 
 
diff -u -3 -P -r wxWidgets/.\include\wx\msw\toplevel.h wxW/.\include\wx\msw\toplevel.h
--- wxWidgets/.\include\wx\msw\toplevel.h	Tue May 25 10:58:44 2004
+++ wxW/.\include\wx\msw\toplevel.h	Mon Jun 14 08:49:44 2004
@@ -81,6 +81,12 @@
     void SetLastFocus(wxWindow *win) { m_winLastFocused = win; }
     wxWindow *GetLastFocus() const { return m_winLastFocused; }
 
+#ifdef __SMARTPHONE__
+    void SetLeftMenu(int id = wxID_ANY, const wxString& label = wxEmptyString, wxMenu *subMenu = NULL);
+    void SetRightMenu(int id = wxID_ANY, const wxString& label = wxEmptyString, wxMenu *subMenu = NULL);
+    bool HandleCommand(WXWORD id, WXWORD cmd, WXHWND control);
+#endif // __SMARTPHONE__
+
 protected:
     // common part of all ctors
     void Init();
@@ -122,6 +128,39 @@
 
     // the last focused child: we restore focus to it on activation
     wxWindow             *m_winLastFocused;
+
+#ifdef __SMARTPHONE__
+    class ButtonMenu
+    {
+    public:
+        ButtonMenu();
+        ~ButtonMenu();
+
+        void SetButton(int id = wxID_ANY, 
+                       const wxString& label  = wxEmptyString, 
+                       wxMenu *subMenu = NULL);
+
+        bool IsAssigned() const {return m_assigned;}
+        bool IsMenu() const {return m_menu!=NULL;}
+
+        int GetId() const {return m_id;}
+        wxMenu* GetMenu() const {return m_menu;}
+        wxString GetLabel() {return m_label;}
+
+    protected:
+        int      m_id;
+        wxString m_label;
+        wxMenu  *m_menu;
+        bool     m_assigned;
+    };
+
+    ButtonMenu               m_LeftButton;
+    ButtonMenu               m_RightButton;
+    HWND                     m_MenuBarHWND;
+
+    void ReloadButton(ButtonMenu& button, UINT menuID);
+    void ReloadAllButtons();
+#endif // __SMARTPHONE__
 
     DECLARE_EVENT_TABLE()
     DECLARE_NO_COPY_CLASS(wxTopLevelWindowMSW)
diff -u -3 -P -r wxWidgets/.\include\wx\msw\wince\resources.h wxW/.\include\wx\msw\wince\resources.h
--- wxWidgets/.\include\wx\msw\wince\resources.h	Thu Jan 01 01:00:00 1970
+++ wxW/.\include\wx\msw\wince\resources.h	Mon Jun 14 08:35:32 2004
@@ -0,0 +1,25 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/wince/resources.h
+// Purpose:     identifiers shared between resource compiler and eVC
+// Author:      Wlodzimierz ABX Skiba
+// Modified by:
+// Created:     01.05.2004
+// RCS-ID:      $Id: resources.h,v 1.0 2004/05/01 12:00:00 ABX Exp $
+// Copyright:   (c) Wlodzimierz Skiba
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#define IDM_LEFT                 40001
+#define IDM_RIGHT                40002
+#define IDM_ITEM                 40003
+
+#define IDS_EMPTY                40010
+
+#define IDR_POPUP_1              40020
+#define IDR_POPUP_2              40021
+
+#define IDR_MENUBAR_ONE_BUTTON   40030
+#define IDR_MENUBAR_LEFT_MENU    40031
+#define IDR_MENUBAR_RIGHT_MENU   40032
+#define IDR_MENUBAR_BOTH_MENUS   40033
+
diff -u -3 -P -r wxWidgets/.\include\wx\msw\wince\setup.h wxW/.\include\wx\msw\wince\setup.h
--- wxWidgets/.\include\wx\msw\wince\setup.h	Thu May 27 20:57:30 2004
+++ wxW/.\include\wx\msw\wince\setup.h	Mon Jun 14 08:36:43 2004
@@ -522,7 +522,11 @@
 // Default is 1
 //
 // Recommended setting: 1
+#ifdef __SMARTPHONE__
+#define wxUSE_STATUSBAR    0
+#else
 #define wxUSE_STATUSBAR    1
+#endif
 
 // Two status bar implementations are available under Win32: the generic one
 // or the wrapper around native control. For native look and feel the native
diff -u -3 -P -r wxWidgets/.\include\wx\msw\wince\smartphone.rc wxW/.\include\wx\msw\wince\smartphone.rc
--- wxWidgets/.\include\wx\msw\wince\smartphone.rc	Thu Jan 01 01:00:00 1970
+++ wxW/.\include\wx\msw\wince\smartphone.rc	Mon Jun 14 08:51:39 2004
@@ -0,0 +1,67 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        wx/msw/wince/smartphone.h
+// Purpose:     resources for Smartphone build
+// Author:      Wlodzimierz ABX Skiba
+// Modified by:
+// Created:     01.05.2004
+// RCS-ID:      $Id: resources.h,v 1.0 2004/05/01 12:00:00 ABX Exp $
+// Copyright:   (c) Wlodzimierz Skiba
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include <aygshell.h>
+
+#include "wx\msw\wince\resources.h"
+
+STRINGTABLE
+BEGIN
+    IDS_EMPTY   ""
+END
+
+IDR_POPUP_1 MENU
+BEGIN
+    POPUP ""
+    BEGIN
+        MENUITEM "M", IDM_ITEM
+    END
+END
+
+IDR_POPUP_2 MENU
+BEGIN
+    POPUP ""
+    BEGIN
+        MENUITEM "M", IDM_ITEM
+    END
+    POPUP ""
+    BEGIN
+        MENUITEM "M", IDM_ITEM
+    END
+END
+
+IDR_MENUBAR_ONE_BUTTON RCDATA
+BEGIN
+    0,2,
+    I_IMAGENONE, IDM_LEFT,  TBSTATE_ENABLED, TBSTYLE_BUTTON   | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, NOMENU,
+    I_IMAGENONE, IDM_RIGHT, TBSTATE_ENABLED, TBSTYLE_BUTTON   | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, NOMENU,
+END
+
+IDR_MENUBAR_LEFT_MENU RCDATA
+BEGIN
+    IDR_POPUP_1,1,
+    I_IMAGENONE, IDM_LEFT,  TBSTATE_ENABLED, TBSTYLE_DROPDOWN | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, 0,
+END
+
+IDR_MENUBAR_RIGHT_MENU RCDATA
+BEGIN
+    IDR_POPUP_1,2,
+    I_IMAGENONE, IDM_LEFT,  TBSTATE_ENABLED, TBSTYLE_BUTTON   | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, NOMENU,
+    I_IMAGENONE, IDM_RIGHT, TBSTATE_ENABLED, TBSTYLE_DROPDOWN | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, 0,
+END
+
+IDR_MENUBAR_BOTH_MENUS RCDATA
+BEGIN
+    IDR_POPUP_2,2,
+    I_IMAGENONE, IDM_LEFT,  TBSTATE_ENABLED, TBSTYLE_DROPDOWN | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, 0,
+    I_IMAGENONE, IDM_RIGHT, TBSTATE_ENABLED, TBSTYLE_DROPDOWN | TBSTYLE_AUTOSIZE, IDS_EMPTY, 0, 1,
+END
+
diff -u -3 -P -r wxWidgets/.\include\wx\msw\wince\wince.rc wxW/.\include\wx\msw\wince\wince.rc
--- wxWidgets/.\include\wx\msw\wince\wince.rc	Thu Jan 01 01:00:00 1970
+++ wxW/.\include\wx\msw\wince\wince.rc	Mon Jun 14 08:35:33 2004
@@ -0,0 +1,26 @@
+#include <commctrl.h>
+
+#ifdef WIN32_PLATFORM_WFSP
+    #include "wx\msw\wince\smartphone.rc"
+#else
+
+// Dummy menubar/toolbar for WinCE
+
+5000 RCDATA DISCARDABLE
+BEGIN
+  // Popup menu name
+  5000,
+  // Count of items to put on the menu
+  0
+END
+
+5000 MENU DISCARDABLE
+BEGIN
+    POPUP "Dummy"
+    BEGIN
+    MENUITEM "Dummy" 99
+    END
+END
+
+#endif
+
diff -u -3 -P -r wxWidgets/.\include\wx\msw\wx.rc wxW/.\include\wx\msw\wx.rc
--- wxWidgets/.\include\wx\msw\wx.rc	Wed Feb 25 11:44:29 2004
+++ wxW/.\include\wx\msw\wx.rc	Mon Jun 14 08:36:43 2004
@@ -30,13 +30,13 @@
 /////////////////////////////////////////////////////////////////////////////
 
 #if (defined( __GNUWIN32__ ) && !defined(__TWIN32__)) || defined(__MWERKS__)
-	#include <wx/msw/gnuwin32/winresrc.h>
+    #include <wx/msw/gnuwin32/winresrc.h>
 #else
-	#include <windows.h>
+    #include <windows.h>
 #endif
 
 #if defined(_WIN32_WCE)
-        #include <commctrl.h>
+    #include "wx\msw\wince\wince.rc"
 #endif
 
 //////////////////////////////////////////////////////////////////////////////
@@ -56,95 +56,6 @@
         MENUITEM "&Next",                       4004
     END
 END
-
-#ifdef _WIN32_WCE
-
-// Dummy menubar/toolbar for WinCE
-
-5000 RCDATA DISCARDABLE
-BEGIN
-  // Popup menu name
-  5000,
-  // Count of items to put on the menu
-  0
-END
-
-5000 MENU DISCARDABLE
-BEGIN
-    POPUP "Dummy"
-    BEGIN
-    MENUITEM "Dummy" 99
-    END
-END
-
-// A menubar for Smartphone, which can only have 1 or 2 menu buttons.
-
-#define IDR_SMARTPHONE_MENUBAR          5002
-#define ID_FIRST_BUTTON                 40001
-#define ID_SECOND_BUTTON                40002
-#define IDS_CAP_MENU                    40003
-#define ID_MENU_TEST                    40004
-#define IDS_DONE                        40006
-
-STRINGTABLE DISCARDABLE
-BEGIN
-    5001      "Dummy menu"
-    IDS_DONE            "Done"
-    IDS_CAP_MENU        "Menu"
-END
-
-#ifndef I_IMAGENONE
-        #define I_IMAGENONE		(-2)
-#endif
-#ifndef NOMENU
-        #define NOMENU			0xFFFF
-#endif
-
-#ifndef wxID_EXIT
-#define wxID_EXIT 5006
-#endif
-
-// A resource for a one-button menubar
-/*
-IDR_SMARTPHONE_MENUBAR MENU DISCARDABLE
-BEGIN
-    MENUITEM "Done",                          wxID_EXIT
-END
-
-STRINGTABLE DISCARDABLE
-BEGIN
-    IDS_DONE            "Done"
-    IDS_CAP_MENU        "Menu"
-END
-
-IDR_SMARTPHONE_MENUBAR RCDATA DISCARDABLE
-BEGIN
-    IDR_SMARTPHONE_MENUBAR, 1,
-    I_IMAGENONE, wxID_EXIT, TBSTATE_ENABLED, TBSTYLE_AUTOSIZE, IDS_DONE, 0, NOMENU,
-END
-*/
-
-// A resource for a two-button menubar
-
-IDR_SMARTPHONE_MENUBAR MENU DISCARDABLE
-BEGIN
-    MENUITEM "Done",                          wxID_EXIT
-    POPUP "Menu"
-    BEGIN
-        MENUITEM "OK",                          wxID_EXIT
-    END
-END
-
-IDR_SMARTPHONE_MENUBAR RCDATA DISCARDABLE
-BEGIN
-    IDR_SMARTPHONE_MENUBAR, 2,
-    I_IMAGENONE, wxID_EXIT, TBSTATE_ENABLED, TBSTYLE_AUTOSIZE, IDS_DONE, 0, NOMENU,
-    I_IMAGENONE, ID_SECOND_BUTTON, TBSTATE_ENABLED, TBSTYLE_DROPDOWN | TBSTYLE_AUTOSIZE, IDS_CAP_MENU, 0, 1,
-END
-
-
-#endif
-
 
 //////////////////////////////////////////////////////////////////////////////
 //
diff -u -3 -P -r wxWidgets/.\samples\minimal\minimal.cpp wxW/.\samples\minimal\minimal.cpp
--- wxWidgets/.\samples\minimal\minimal.cpp	Tue May 25 13:53:01 2004
+++ wxW/.\samples\minimal\minimal.cpp	Mon Jun 14 08:52:56 2004
@@ -144,6 +144,7 @@
     SetIcon(wxICON(sample));
 
 #if wxUSE_MENUS
+
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
@@ -153,6 +154,15 @@
 
     menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
 
+#ifdef __SMARTPHONE__
+
+    wxMenu *leftMenu = new wxMenu;
+    leftMenu->Append(wxID_ANY, _T("&File"), menuFile);
+    leftMenu->Append(wxID_ANY, _T("&Help"), helpMenu);
+    SetRightMenu(wxID_ANY, _T("Menu"), leftMenu);
+
+#else
+
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
     menuBar->Append(menuFile, _T("&File"));
@@ -160,6 +170,9 @@
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
+
+#endif // __SMARTPHONE__
+
 #endif // wxUSE_MENUS
 
 #if wxUSE_STATUSBAR
diff -u -3 -P -r wxWidgets/.\src\msw\frame.cpp wxW/.\src\msw\frame.cpp
--- wxWidgets/.\src\msw\frame.cpp	Mon Jun 14 08:02:18 2004
+++ wxW/.\src\msw\frame.cpp	Mon Jun 14 08:54:03 2004
@@ -856,6 +856,14 @@
         {
             return TRUE;
         }
+
+#ifdef __SMARTPHONE__
+        // handle here commands from Smartphone menu bar
+        if ( wxTopLevelWindow::HandleCommand(id, cmd, control ) )
+        {
+            return true;
+        }
+#endif
     }
 
     return FALSE;
diff -u -3 -P -r wxWidgets/.\src\msw\toplevel.cpp wxW/.\src\msw\toplevel.cpp
--- wxWidgets/.\src\msw\toplevel.cpp	Mon Jun 14 08:02:25 2004
+++ wxW/.\src\msw\toplevel.cpp	Mon Jun 14 08:54:57 2004
@@ -143,6 +143,10 @@
     m_fsIsShowing = FALSE;
 
     m_winLastFocused = (wxWindow *)NULL;
+
+#ifdef __SMARTPHONE__
+    m_MenuBarHWND = 0;
+#endif
 }
 
 WXDWORD wxTopLevelWindowMSW::MSWGetStyle(long style, WXDWORD *exflags) const
@@ -521,6 +525,11 @@
 	{
 	    this->Maximize();
 	}
+#endif
+
+#ifdef __SMARTPHONE__
+    SetLeftMenu(wxID_EXIT, _("Done"));
+    SetRightMenu(); // to nothing for initialization
 #endif
 
     return ret;
diff -u -3 -P -r wxWidgets/.\src\msw\wince\menuce.cpp wxW/.\src\msw\wince\menuce.cpp
--- wxWidgets/.\src\msw\wince\menuce.cpp	Thu Jan 01 01:00:00 1970
+++ wxW/.\src\msw\wince\menuce.cpp	Mon Jun 14 08:59:05 2004
@@ -0,0 +1,222 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        src/msw/wince/menuce.cpp
+// Purpose:     Smartphone menus implementation
+// Author:      Wlodzimierz ABX Skiba
+// Modified by:
+// Created:     28.05.2004
+// RCS-ID:      $Id: menuce.cpp,v 1.0 2004/05/28 12:00:00 ABX Exp $
+// Copyright:   (c) Wlodzimierz Skiba
+// License:     wxWindows licence
+///////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma implementation "menuce"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/app.h"
+    #include "wx/toplevel.h"
+    #include "wx/menu.h"
+#endif //WX_PRECOMP
+
+#ifdef __SMARTPHONE__
+
+#include <windows.h>
+#include <ole2.h>
+#include <shellapi.h>
+#include <aygshell.h>
+#include "wx/msw/wince/missing.h"
+
+#include "wx/msw/wince/resources.h"
+
+wxTopLevelWindowMSW::ButtonMenu::ButtonMenu()
+{
+    m_id = wxID_ANY;
+    m_label = wxEmptyString;
+    m_menu = NULL;
+    m_assigned = false;
+}
+
+wxTopLevelWindowMSW::ButtonMenu::~ButtonMenu()
+{
+    if(m_menu)
+    {
+        delete m_menu;
+        m_menu = NULL;
+    };
+}
+
+void wxTopLevelWindowMSW::SetLeftMenu(int id, const wxString& label, wxMenu *subMenu)
+{
+    m_LeftButton.SetButton(id, label, subMenu);
+    ReloadAllButtons();
+}
+
+void wxTopLevelWindowMSW::SetRightMenu(int id, const wxString& label, wxMenu *subMenu)
+{
+    m_RightButton.SetButton(id, label, subMenu);
+    ReloadAllButtons();
+}
+
+void wxTopLevelWindowMSW::ButtonMenu::SetButton(int id, const wxString& label, wxMenu *subMenu)
+{
+    m_assigned = true;
+    m_id = id;
+    m_label = label;
+    m_menu = subMenu;
+}
+
+void wxMenuToHMenu(wxMenu* in, HMENU hMenu)
+{
+    if(!in) return;
+
+    wxChar buf[256];
+
+    wxMenuItemList::compatibility_iterator node = in->GetMenuItems().GetFirst();
+    while ( node )
+    {
+        wxMenuItem *item = node->GetData();
+
+        UINT uFlags = 0;
+        UINT uIDNewItem;
+        LPCTSTR lpNewItem;
+
+        if( item->IsSeparator() )
+        {
+            uFlags |= MF_SEPARATOR;
+            uIDNewItem = wxID_ANY;
+            lpNewItem = NULL;
+        }
+        else
+        {
+            // label
+            uFlags |= MF_STRING;
+            wxStrcpy(buf, item->GetLabel().c_str());
+            lpNewItem = buf;
+
+            // state
+            uFlags |= ( item->IsEnabled() ? MF_ENABLED : MF_GRAYED );
+
+            // checked
+            uFlags |= ( item->IsChecked() ? MF_CHECKED : MF_UNCHECKED );
+
+            if( item->IsSubMenu() )
+            {
+                uFlags |= MF_POPUP;
+                HMENU hSubMenu = CreatePopupMenu();
+                wxMenuToHMenu(item->GetSubMenu(), hSubMenu);
+                uIDNewItem = (UINT) hSubMenu;
+            }
+            else
+            {
+                uIDNewItem = item->GetId();
+            }
+        }
+
+        AppendMenu(hMenu, uFlags, uIDNewItem, lpNewItem);
+
+        node = node->GetNext();
+    }
+}
+
+void wxTopLevelWindowMSW::ReloadButton(ButtonMenu& button, UINT menuID)
+{
+    TBBUTTONINFO  button_info;
+    wxChar        buf[256];
+
+    // set button name
+    memset (&button_info, 0, sizeof (TBBUTTONINFO));
+    button_info.cbSize = sizeof(TBBUTTONINFO);
+    button_info.dwMask = TBIF_TEXT | TBIF_STATE;
+    button_info.fsState = TBSTATE_ENABLED;
+    wxStrcpy(buf, button.GetLabel().c_str());
+    button_info.pszText = buf;
+    SendMessage(m_MenuBarHWND, TB_SETBUTTONINFO, menuID, (LPARAM) &button_info);
+
+    if(button.IsMenu())
+    {
+        HMENU hPopupMenu = (HMENU) SendMessage(m_MenuBarHWND, SHCMBM_GETSUBMENU, 0, menuID);
+        RemoveMenu(hPopupMenu, 0, MF_BYPOSITION);
+        wxMenuToHMenu(button.GetMenu(), hPopupMenu);
+    }
+}
+
+void wxTopLevelWindowMSW::ReloadAllButtons()
+{
+    // first reaload only after initialization of both buttons
+    // it should is done at the end of Create() of wxTLW
+    if(!m_LeftButton.IsAssigned() || !m_RightButton.IsAssigned())
+        return;
+
+    SHMENUBARINFO menu_bar;
+    wxString      label;
+
+    memset (&menu_bar,    0, sizeof (SHMENUBARINFO));
+    menu_bar.cbSize     = sizeof (SHMENUBARINFO);
+    menu_bar.hwndParent = (HWND) GetHWND();
+
+    if(m_LeftButton.IsMenu() && m_RightButton.IsMenu())
+        menu_bar.nToolBarId = IDR_MENUBAR_BOTH_MENUS;
+    else if(m_LeftButton.IsMenu())
+        menu_bar.nToolBarId = IDR_MENUBAR_LEFT_MENU;
+    else if(m_RightButton.IsMenu())
+        menu_bar.nToolBarId = IDR_MENUBAR_RIGHT_MENU;
+    else
+        menu_bar.nToolBarId = IDR_MENUBAR_ONE_BUTTON;
+
+    menu_bar.hInstRes = wxGetInstance();
+
+    if (!SHCreateMenuBar(&menu_bar))
+    {
+        wxFAIL_MSG( _T("SHCreateMenuBar failed") );
+        return;
+    }
+
+    HWND prev_MenuBar = m_MenuBarHWND;
+    m_MenuBarHWND = menu_bar.hwndMB;
+
+    ReloadButton(m_LeftButton, IDM_LEFT);
+    ReloadButton(m_RightButton, IDM_RIGHT);
+
+    // hide previous and show new menubar
+    if ( prev_MenuBar )
+        ::ShowWindow( prev_MenuBar, SW_HIDE );
+    ::ShowWindow( m_MenuBarHWND, SW_SHOW );
+
+}
+
+bool wxTopLevelWindowMSW::HandleCommand(WXWORD id, WXWORD cmd, WXHWND control)
+{
+    // handle here commands from Smartphone menu bar
+    if ( id == IDM_LEFT || id == IDM_RIGHT )
+    {
+        int menuId = id == IDM_LEFT ? m_LeftButton.GetId() : m_RightButton.GetId() ;
+        wxCommandEvent commandEvent(wxEVT_COMMAND_MENU_SELECTED, menuId);
+        commandEvent.SetEventObject(this);
+        GetEventHandler()->ProcessEvent(commandEvent);
+        return true;
+    }
+    return false;
+}
+
+#endif // __SMARTPHONE__
+

 	  	 

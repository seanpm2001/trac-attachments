Index: eventhandling.h
===================================================================
--- eventhandling.h	(revision 61795)
+++ eventhandling.h	(working copy)
@@ -456,9 +456,9 @@
     <li value="3">
     The list of dynamically bind event handlers, i.e., those for which
     Bind<>() was called, is consulted. Notice that this is done before
-    checking the static event table entries, so if both a dynamic and a static
-    event handler match the same event, the static one is never going to be
-    used.
+    checking the static event table entries. If both a dynamic and a static
+    event handler match the same event, the static one is going to be
+    used only if wxEvent::Skip() is called for the concerned event.
     </li>
 
     <li value="4">
@@ -571,7 +571,181 @@
 
 By default the chain is empty, i.e. there is no next handler.
 
+Example:
 
+@code
+#include <wx/wx.h>
+
+
+/// --- Test Button --- ///
+
+class TestButton : public wxButton
+{
+    public:
+        static long BUTTON_ID;
+        TestButton( wxWindow *parent, wxString &label );
+
+    private:
+        void OnClickStaticHandler(wxCommandEvent& event);
+        void OnClickDynamicHandler(wxCommandEvent& event);
+        DECLARE_EVENT_TABLE()
+};
+
+
+long TestButton::BUTTON_ID = wxNewId();
+
+BEGIN_EVENT_TABLE(TestButton, wxButton)
+    // Add a static handler for Click event in the derived class
+    EVT_BUTTON(BUTTON_ID,TestButton::OnClickStaticHandler)
+END_EVENT_TABLE()
+
+TestButton::TestButton( wxWindow *parent, wxString &label )
+            :wxButton(parent, BUTTON_ID, label)
+{
+    // Add a dynamic handler for Click event in the derived class
+    Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TestButton::OnClickDynamicHandler));
+}
+
+void TestButton::OnClickDynamicHandler(wxCommandEvent& event)
+{
+    wxMessageBox("Step 3 in \"How Events are Processed\":\nButton :: DynamicHandler");
+
+    event.Skip();
+}
+
+void TestButton::OnClickStaticHandler(wxCommandEvent& event)
+{
+    wxMessageBox("Step 4 in \"How Events are Processed\":\nButton :: StaticHandler");
+
+    event.Skip();
+}
+
+
+/// --- Main Frame --- ///
+
+class EventsSampleFrame: public wxFrame
+{
+    public:
+        EventsSampleFrame(wxFrame *frame, const wxString& title);
+
+    private:
+        void OnClickDynamicHandlerFrame(wxCommandEvent& event);
+        void OnClickDynamicHandlerButton(wxCommandEvent& event);
+        void OnClickStaticHandlerFrame(wxCommandEvent& event);
+        void OnClose(wxCloseEvent &event) { Destroy(); };
+        DECLARE_EVENT_TABLE()
+};
+
+BEGIN_EVENT_TABLE(EventsSampleFrame, wxFrame)
+    // Add a static handler for Click event in the parent frame
+    // Connect button Event Handler to the _frame_
+    EVT_BUTTON(TestButton::BUTTON_ID,EventsSampleFrame::OnClickStaticHandlerFrame)
+END_EVENT_TABLE()
+
+
+EventsSampleFrame::EventsSampleFrame(wxFrame *frame, const wxString& title)
+    : wxFrame(frame, wxID_ANY, title, wxDefaultPosition, wxSize(300,200), wxCLOSE_BOX|wxCAPTION)
+{
+    wxString label(wxT("TestButton"));
+    TestButton *button = new TestButton(this, label);
+    // After being created, an instance of TestButton already has its own event handlers (see class definition);
+
+    // Add a dynamic handler for Click event in the parent frame
+    // Connect button Event Handler to the _frame_
+    Connect(button->GetId(), wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EventsSampleFrame::OnClickDynamicHandlerFrame));
+
+    // Add a dynamic handler for Click event in the parent frame
+    // Connecting button Event Handler to the _button_
+    button->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EventsSampleFrame::OnClickDynamicHandlerButton), NULL, this);
+}
+
+
+void EventsSampleFrame::OnClickDynamicHandlerFrame(wxCommandEvent& event)
+{
+    wxMessageBox("Step 6, 3 in \"How Events are Processed\":\nparentWin :: DynamicHandler_Frame");
+
+    event.Skip();
+}
+
+
+void EventsSampleFrame::OnClickDynamicHandlerButton(wxCommandEvent& event)
+{
+    wxMessageBox("Step 3 in \"How Events are Processed\":\nparentWin :: DynamicHandler_Button");
+
+    event.Skip();
+}
+
+void EventsSampleFrame::OnClickStaticHandlerFrame(wxCommandEvent& event)
+{
+    wxMessageBox("Step 6, 4 in \"How Events are Processed\":\nparentWin :: StaticHandler_Frame");
+
+    event.Skip();
+}
+
+
+/// --- The App --- ///
+
+class EventsSampleApp : public wxApp
+{
+    public:
+        virtual bool OnInit();
+
+    private:
+        void OnClickDynamicHandlerApp(wxCommandEvent& event);
+        void OnClickStaticHandlerApp(wxCommandEvent& event);
+        int FilterEvent(wxEvent& event);
+        DECLARE_EVENT_TABLE()
+};
+
+
+BEGIN_EVENT_TABLE(EventsSampleApp, wxApp)
+    // Add a static handler for Click event in the parent frame
+    // Connect button Event Handler to the _App_
+    EVT_BUTTON(TestButton::BUTTON_ID,EventsSampleApp::OnClickStaticHandlerApp)
+END_EVENT_TABLE()
+
+IMPLEMENT_APP(EventsSampleApp);
+
+bool EventsSampleApp::OnInit()
+{
+    EventsSampleFrame* frame = new EventsSampleFrame(0L, _("wxWidgets Application Template"));
+    frame->Show();
+
+    // Add a dynamic handler for Click event in the App
+    // Connect button Event Handler to the _App_
+    Connect(TestButton::BUTTON_ID, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EventsSampleApp::OnClickDynamicHandlerApp));
+
+    return true;
+}
+
+int EventsSampleApp::FilterEvent(wxEvent& event)
+{
+    // This is always the first to handle an event !
+
+    if(event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED && event.GetId() == TestButton::BUTTON_ID)
+    {
+        wxMessageBox("Step 0 in \"How Events are Processed\":\nApp :: FilterEvent");
+    }
+
+    return -1;
+}
+
+void EventsSampleApp::OnClickDynamicHandlerApp(wxCommandEvent& event)
+{
+    wxMessageBox("Step 7, 3 in \"How Events are Processed\":\nApp :: DynamicHandler_App");
+
+    event.Skip();
+}
+
+void EventsSampleApp::OnClickStaticHandlerApp(wxCommandEvent& event)
+{
+    wxMessageBox("Step 7, 4 in \"How Events are Processed\":\nApp :: StaticHandler_App");
+
+    event.Skip();
+}
+@endcode
+
+
 @section overview_events_custom Custom Event Summary
 
 @subsection overview_events_custom_general General approach

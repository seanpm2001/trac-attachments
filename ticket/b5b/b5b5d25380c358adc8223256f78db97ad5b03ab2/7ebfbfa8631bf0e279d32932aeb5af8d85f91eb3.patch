Index: event.cpp
===================================================================
--- event.cpp	(revision 61840)
+++ event.cpp	(working copy)
@@ -34,6 +34,8 @@
     #include "../sample.xpm"
 #endif
 
+#include <wx/statline.h>
+
 // ----------------------------------------------------------------------------
 // event constants
 // ----------------------------------------------------------------------------
@@ -65,8 +67,39 @@
     // initialization (doing it here and not in the ctor allows to have an error
     // return: if OnInit() returns false, the application terminates)
     virtual bool OnInit();
+
+    // ----
+    // these are regular event handlers
+    // used to highlight the events handling order
+    void OnClickDynamicHandlerApp(wxCommandEvent& event);
+    void OnClickStaticHandlerApp(wxCommandEvent& event);
+    // ----
+
+private:
+    // ----
+    // this one will override wxConsoleApp::FilterEvent
+    // used to highlight the events handling order
+    int FilterEvent(wxEvent& event);
+    // ----
+
+    DECLARE_EVENT_TABLE()
 };
 
+// Define a custom button
+// used to highlight the events handling order
+class MyEvtTestButton : public wxButton
+{
+public:
+    static long BUTTON_ID;
+    MyEvtTestButton( wxWindow *parent, wxString &label );
+
+private:
+    void OnClickStaticHandler(wxCommandEvent& event);
+    void OnClickDynamicHandler(wxCommandEvent& event);
+    DECLARE_EVENT_TABLE()
+};
+long MyEvtTestButton::BUTTON_ID = wxNewId();
+
 // Define a new frame type: this is going to be our main frame
 class MyFrame : public wxFrame
 {
@@ -91,6 +124,14 @@
 
     void OnUpdateUIPop(wxUpdateUIEvent& event);
 
+    // ----
+    // regular event handlers
+    // used to highlight the events handling order
+    void OnClickDynamicHandlerFrame(wxCommandEvent& event);
+    void OnClickDynamicHandlerButton(wxCommandEvent& event);
+    void OnClickStaticHandlerFrame(wxCommandEvent& event);
+    // ----
+
 private:
     // symbolic names for the status bar fields
     enum
@@ -122,6 +163,11 @@
     // the button to whose event we connect dynamically
     wxButton *m_btnDynamic;
 
+    // ----
+    // the button used to highlight the event handlers execution order
+    MyEvtTestButton *m_testBtn;
+    // ----
+
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -170,8 +216,20 @@
 // event tables and other macros for wxWidgets
 // ----------------------------------------------------------------------------
 
-// the event tables connect the wxWidgets events with the functions (event
-// handlers) which process them. It can be also done at run-time, but for the
+// The event tables connect the wxWidgets events with the functions (event
+// handlers) which process them.
+BEGIN_EVENT_TABLE(MyApp, wxApp)
+    // Add a static handler for button Click event in the app
+    // Connect button Event Handler to the _App_
+    EVT_BUTTON(MyEvtTestButton::BUTTON_ID, MyApp::OnClickStaticHandlerApp)
+END_EVENT_TABLE()
+
+BEGIN_EVENT_TABLE(MyEvtTestButton, wxButton)
+    // Add a static handler to this button for Click event
+    EVT_BUTTON(BUTTON_ID, MyEvtTestButton::OnClickStaticHandler)
+END_EVENT_TABLE()
+
+// This can be also done at run-time, but for the
 // simple menu events like this the static method is much simpler.
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Event_Quit,  MyFrame::OnQuit)
@@ -194,6 +252,12 @@
     // the line below would also work if OnProcessCustom() were defined as
     // taking a wxEvent (as required by EVT_CUSTOM) and not wxCommandEvent
     //EVT_CUSTOM(wxEVT_MY_CUSTOM_COMMAND, wxID_ANY, MyFrame::OnProcessCustom)
+
+    // ----
+    // Add a static handler in the parent frame for button Click
+    // Connect button Event Handler to the _frame_
+    EVT_BUTTON(MyEvtTestButton::BUTTON_ID, MyFrame::OnClickStaticHandlerFrame)
+    // ----
 END_EVENT_TABLE()
 
 BEGIN_EVENT_TABLE(MyEvtHandler, wxEvtHandler)
@@ -229,12 +293,43 @@
     // created initially)
     frame->Show(true);
 
+    // ----
+    // Add a dynamic handler in the App for button Click
+    // Connect button Event Handler to the _App_
+    Connect(MyEvtTestButton::BUTTON_ID, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyApp::OnClickDynamicHandlerApp));
+    // ----
+
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned false here, the
     // application would exit immediately.
     return true;
 }
 
+// This is always the first to handle an event !
+int MyApp::FilterEvent(wxEvent& event)
+{
+    if(event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED && event.GetId() == MyEvtTestButton::BUTTON_ID)
+    {
+        wxMessageBox("Step 0 in \"How Events are Processed\":\nApp :: FilterEvent");
+    }
+
+    return -1;
+}
+
+void MyApp::OnClickDynamicHandlerApp(wxCommandEvent& event)
+{
+    wxMessageBox("Step 7, 3 in \"How Events are Processed\":\nApp :: DynamicHandler_App");
+
+    event.Skip();
+}
+
+void MyApp::OnClickStaticHandlerApp(wxCommandEvent& event)
+{
+    wxMessageBox("Step 7, 4 in \"How Events are Processed\":\nApp :: StaticHandler_App");
+
+    event.Skip();
+}
+
 // ----------------------------------------------------------------------------
 // main frame
 // ----------------------------------------------------------------------------
@@ -292,6 +387,7 @@
 #endif // wxUSE_STATUSBAR
 
     wxPanel * const panel = new wxPanel(this);
+    wxSizer * const mainSizer = new wxBoxSizer(wxVERTICAL);
     wxSizer * const sizer = new wxBoxSizer(wxHORIZONTAL);
     const wxSizerFlags centreY(wxSizerFlags().Centre().Border());
     sizer->Add(new wxStaticText(panel, wxID_ANY,
@@ -299,7 +395,27 @@
         centreY);
     m_btnDynamic = new wxButton(panel, Event_Dynamic, "&Dynamic button");
     sizer->Add(m_btnDynamic, centreY);
-    panel->SetSizer(sizer);
+
+    mainSizer->Add(sizer, 1, wxEXPAND);
+    mainSizer->Add(new wxStaticLine(panel), 0, wxEXPAND);
+    mainSizer->Add(new wxStaticLine(panel), 0, wxEXPAND);
+
+    // ----
+    wxString label("Test Event Handlers Execution Order");
+    m_testBtn = new MyEvtTestButton(panel, label);
+    // After being created, an instance of MyEvtTestButton already has its own event handlers (see class definition);
+
+    // Add a dynamic handler for Click event in the parent frame
+    // Connect button Event Handler to the _frame_
+    Connect(m_testBtn->GetId(), wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyFrame::OnClickDynamicHandlerFrame));
+
+    // Add a dynamic handler for Click event in the parent frame
+    // Connecting button Event Handler to the _button_
+    m_testBtn->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyFrame::OnClickDynamicHandlerButton), NULL, this);
+    // ----
+
+    mainSizer->Add(m_testBtn);
+    panel->SetSizer(mainSizer);
 }
 
 MyFrame::~MyFrame()
@@ -330,10 +446,35 @@
                  wxOK | wxICON_INFORMATION, this);
 }
 
+// ----
+void MyFrame::OnClickStaticHandlerFrame(wxCommandEvent& event)
+{
+    wxMessageBox("Step 6, 4 in \"How Events are Processed\":\nparentWin :: StaticHandler_Frame");
+
+    event.Skip();
+}
+// ----
+
 // ----------------------------------------------------------------------------
 // dynamic event handling stuff
 // ----------------------------------------------------------------------------
 
+// ----
+void MyFrame::OnClickDynamicHandlerFrame(wxCommandEvent& event)
+{
+    wxMessageBox("Step 6, 3 in \"How Events are Processed\":\nparentWin :: DynamicHandler_Frame");
+
+    event.Skip();
+}
+
+void MyFrame::OnClickDynamicHandlerButton(wxCommandEvent& event)
+{
+    wxMessageBox("Step 3 in \"How Events are Processed\":\nparentWin :: DynamicHandler_Button");
+
+    event.Skip();
+}
+// ----
+
 void MyFrame::OnDynamic(wxCommandEvent& event)
 {
     wxString origin;
@@ -454,3 +595,38 @@
     wxLogMessage(wxT("Got a custom event!"));
 }
 
+
+// ----------------------------------------------------------------------------
+// button class used to test event handlers execution order
+// ----------------------------------------------------------------------------
+
+// button constructor
+MyEvtTestButton::MyEvtTestButton(wxWindow *parent, wxString &label)
+            :wxButton(parent, BUTTON_ID, label)
+{
+    // Add a dynamic handler for Click event in the derived class
+    Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyEvtTestButton::OnClickDynamicHandler));
+}
+
+// ----------------------------------------------------------------------------
+// standard event handlers
+// ----------------------------------------------------------------------------
+
+void MyEvtTestButton::OnClickStaticHandler(wxCommandEvent& event)
+{
+    wxMessageBox("Step 4 in \"How Events are Processed\":\nButton :: StaticHandler");
+
+    event.Skip();
+}
+
+// ----------------------------------------------------------------------------
+// dynamic event handling stuff
+// ----------------------------------------------------------------------------
+
+void MyEvtTestButton::OnClickDynamicHandler(wxCommandEvent& event)
+{
+    wxMessageBox("Step 3 in \"How Events are Processed\":\nButton :: DynamicHandler");
+
+    event.Skip();
+}
+

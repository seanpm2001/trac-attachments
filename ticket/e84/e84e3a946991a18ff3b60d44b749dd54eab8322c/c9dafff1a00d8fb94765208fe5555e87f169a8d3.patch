Index: src/msw/ownerdrw.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/ownerdrw.cpp,v
retrieving revision 1.62.2.3
diff --unified -r1.62.2.3 ownerdrw.cpp
--- src/msw/ownerdrw.cpp	2006/05/29 17:35:00	1.62.2.3
+++ src/msw/ownerdrw.cpp	2007/01/17 13:26:06
@@ -1,5 +1,5 @@
 ///////////////////////////////////////////////////////////////////////////////
-// Name:        msw/ownerdrw.cpp
+// Name:        src/msw/ownerdrw.cpp
 // Purpose:     implementation of wxOwnerDrawn class
 // Author:      Vadim Zeitlin
 // Modified by:
@@ -15,30 +15,34 @@

 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
-#include "wx/msw/private.h"

 #ifdef __BORLANDC__
-#pragma hdrstop
+    #pragma hdrstop
 #endif

 #ifndef WX_PRECOMP
-  #include "wx/window.h"
-  #include "wx/msw/private.h"
-  #include "wx/font.h"
-  #include "wx/bitmap.h"
-  #include "wx/dcmemory.h"
-  #include "wx/menu.h"
-  #include "wx/utils.h"
+    #include "wx/window.h"
+    #include "wx/msw/private.h"
+    #include "wx/font.h"
+    #include "wx/bitmap.h"
+    #include "wx/image.h"
+    #include "wx/dcmemory.h"
+    #include "wx/menu.h"
+    #include "wx/utils.h"
+    #include "wx/settings.h"
+    #include "wx/menuitem.h"
+    #include "wx/module.h"
 #endif

-#include "wx/settings.h"
 #include "wx/ownerdrw.h"
-#include "wx/menuitem.h"
 #include "wx/fontutil.h"
-#include "wx/module.h"

 #if wxUSE_OWNER_DRAWN

+#if wxUSE_IMAGE
+bool wxOwnerDrawnCreateGreyedImage(const wxImage& src, wxImage& dst);
+#endif // wxUSE_IMAGE
+
 #ifndef SPI_GETKEYBOARDCUES
 #define SPI_GETKEYBOARDCUES 0x100A
 #endif
@@ -96,7 +98,6 @@

 IMPLEMENT_DYNAMIC_CLASS(wxMSWSystemMenuFontModule, wxModule)

-
 // temporary hack to implement wxOwnerDrawn::IsMenuItem() without breaking
 // backwards compatibility
 #if wxCHECK_VERSION(2, 7, 0)
@@ -138,7 +139,7 @@
                            bool bMenuItem)
             : m_strName(str)
 {
-    if (ms_nDefaultMarginWidth == 0)
+    if ( ms_nDefaultMarginWidth == 0 )
     {
        ms_nDefaultMarginWidth = ::GetSystemMetrics(SM_CXMENUCHECK) +
                                 wxSystemSettings::GetMetric(wxSYS_EDGE_X);
@@ -159,6 +160,7 @@
     {
         gs_menuItems.insert(this);
     }
+
 }

 wxOwnerDrawn::~wxOwnerDrawn()
@@ -217,7 +219,7 @@
         // placed on top of each other.
         if ( !m_strAccel.empty() )
         {
-            str.Pad(str.Length()%8);
+            str.Pad(str.length()%8);
             str += m_strAccel;
         }

@@ -378,7 +380,7 @@
         xText += 3; // separate text from the highlight rectangle

         SIZE sizeRect;
-        ::GetTextExtentPoint32(hdc, strMenuText.c_str(), strMenuText.Length(), &sizeRect);
+        ::GetTextExtentPoint32(hdc, strMenuText.c_str(), strMenuText.length(), &sizeRect);
         ::DrawState(hdc, NULL, NULL,
                     (LPARAM)strMenuText.c_str(), strMenuText.length(),
                     xText, rc.y + (int) ((rc.GetHeight()-sizeRect.cy)/2.0), // centre text vertically
@@ -447,9 +449,21 @@

         if ( !bmp.Ok() )
         {
-            // for not checkable bitmaps we should always use unchecked one because
-            // their checked bitmap is not set
+            // for not checkable bitmaps we should always use unchecked one
+            // because their checked bitmap is not set
             bmp = GetBitmap(!IsCheckable() || (st & wxODChecked));
+
+#if wxUSE_IMAGE
+            if ( bmp.Ok() && st & wxODDisabled )
+            {
+                // we need to grey out the bitmap as we don't have any specific
+                // disabled bitmap
+                wxImage imgGrey;
+                wxOwnerDrawnCreateGreyedImage(bmp.ConvertToImage(), imgGrey);
+                if ( imgGrey.Ok() )
+                    bmp = wxBitmap(imgGrey);
+            }
+#endif // wxUSE_IMAGE
         }

         if ( bmp.Ok() )
@@ -488,6 +502,79 @@
     return true;
 }

+#if defined(__WXMSW__) && wxUSE_IMAGE

-#endif // wxUSE_OWNER_DRAWN
+/*
+ * Make a greyed-out image suitable for disabled buttons.
+ * Code copied from common/tbarbase.cpp method wxCreateGreyedImage.
+ * Modified code a lot to get better looking results.
+ */
+
+bool wxOwnerDrawnCreateGreyedImage(const wxImage& src, wxImage& dst)
+{
+    dst = src.Copy();
+
+    unsigned char rBg, gBg, bBg;
+    if ( src.HasMask() )
+    {
+        src.GetOrFindMaskColour(&rBg, &gBg, &bBg);
+        dst.SetMaskColour(rBg, gBg, bBg);
+    }
+    else
+    {
+        // assuming the pixels along the edges are of the background color
+        rBg = src.GetRed(0, 0);
+        gBg = src.GetGreen(0, 0);
+        bBg = src.GetBlue(0, 0);
+    }
+
+    const wxColour colBg(rBg, gBg, bBg);
+
+    const wxColour colGray = wxTheColourDatabase->Find(_T("MEDIUM GREY"));
+
+    unsigned char rGrey, gGrey, bGrey;
+    rGrey = colGray.Red();
+    gGrey = colGray.Green();
+    bGrey = colGray.Blue();
+
+    // Second attempt, just making things monochrome
+    const int width = src.GetWidth();
+    const int height = src.GetHeight();

+    for ( int x = 0; x < width; x++ )
+    {
+        for ( int y = 0; y < height; y++ )
+        {
+            const int r = src.GetRed(x, y);
+            const int g = src.GetGreen(x, y);
+            const int b = src.GetBlue(x, y);
+
+            if ( src.IsTransparent(x, y) )
+            {
+                // Leave the Transparent colour as-is
+                continue;
+            }
+            if ( r == rBg && g == gBg && b == bBg )
+            {
+                // Leave the background colour as-is
+                continue;
+            }
+
+            if ( r == 0 && g == 0 && b == 0 )
+            {
+                // Colour is black change to Grey
+                dst.SetRGB(x, y, rGrey, gGrey, bGrey);
+            }
+            else
+            {
+                // Greyscale conversion by Geometric Mean.
+                dst.SetRGB(x, y, (r+g+b)/3, (r+g+b)/3, (r+g+b)/3);
+            }
+        }
+    }
+    return true;
+}
+
+#endif // defined(__WXMSW__) && wxUSE_IMAGE
+
+#endif // wxUSE_OWNER_DRAWN

 	  	 

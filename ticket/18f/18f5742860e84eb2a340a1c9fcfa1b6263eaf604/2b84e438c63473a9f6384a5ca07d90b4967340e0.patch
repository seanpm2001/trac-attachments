diff -rU 2 wxWidgets.orig/include/wx/msw/statbmp.h wxWidgets/include/wx/msw/statbmp.h
--- wxWidgets.orig/include/wx/msw/statbmp.h	2004-09-04 11:53:38.000000000 +1000
+++ wxWidgets/include/wx/msw/statbmp.h	2005-01-19 10:42:09.000000000 +1100
@@ -74,7 +74,4 @@
     // -------------------------------
 
-    // implement base class virtuals
-    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
-
 protected:
     virtual wxBorder GetDefaultBorder() const;
diff -rU 2 wxWidgets.orig/src/msw/statbmp.cpp wxWidgets/src/msw/statbmp.cpp
--- wxWidgets.orig/src/msw/statbmp.cpp	2004-09-04 11:53:42.000000000 +1000
+++ wxWidgets/src/msw/statbmp.cpp	2005-01-19 10:40:57.000000000 +1100
@@ -263,18 +263,3 @@
 }
 
-// We need this or the control can never be moved e.g. in Dialog Editor.
-WXLRESULT wxStaticBitmap::MSWWindowProc(WXUINT nMsg,
-                                   WXWPARAM wParam,
-                                   WXLPARAM lParam)
-{
-#ifndef __WXWINCE__
-    // Ensure that static items get messages. Some controls don't like this
-    // message to be intercepted (e.g. RichEdit), hence the tests.
-    if ( nMsg == WM_NCHITTEST )
-        return (long)HTCLIENT;
-#endif
-
-    return wxWindow::MSWWindowProc(nMsg, wParam, lParam);
-}
-
 #endif // wxUSE_STATBMP
diff -rU 2 wxWidgets.orig/src/msw/window.cpp wxWidgets/src/msw/window.cpp
--- wxWidgets.orig/src/msw/window.cpp	2005-01-19 03:11:51.000000000 +1100
+++ wxWidgets/src/msw/window.cpp	2005-01-19 12:06:12.031538072 +1100
@@ -1244,4 +1244,5 @@
 void wxWindowMSW::OnInternalIdle()
 {
+#ifdef __WXWINCE__
     // Check if we need to send a LEAVE event
     if ( m_mouseInWindow )
@@ -1289,4 +1290,5 @@
         }
     }
+#endif
 
     if (wxUpdateUIEvent::CanUpdate(this))
@@ -2435,17 +2437,9 @@
             break;
 
-            // Seems to be broken currently
-#if 0 // ndef __WXWINCE__
+#ifndef __WXWINCE__
         case WM_MOUSELEAVE:
            {
-            wxASSERT_MSG( !m_mouseInWindow, wxT("the mouse should be in a window to generate this event!") );
-
-            // only process this message if the mouse is not in the window,
-            // This can also check for children in composite windows.
-            // however, this may mean the the wxEVT_LEAVE_WINDOW is never sent
-            // if the mouse does not enter the window from it's child before
-            // leaving the scope of the window. ( perhaps this can be picked
-            // up in the OnIdle code as before, for this special case )
-            if ( /*IsComposite() && */ !IsMouseInWindow() )
+            // filter out excess WM_MOUSELEAVE events sent after PopupMenu() (on XP at least)
+            if ( m_mouseInWindow )
             {
                 m_mouseInWindow = false;
@@ -2457,9 +2451,11 @@
                 if ( wxIsCtrlDown() )
                     state |= MK_CONTROL;
-                if ( GetKeyState( VK_LBUTTON ) )
+
+                // Only the high-order bit should be tested
+                if ( GetKeyState( VK_LBUTTON ) & (1<<15) )
                     state |= MK_LBUTTON;
-                if ( GetKeyState( VK_MBUTTON ) )
+                if ( GetKeyState( VK_MBUTTON ) & (1<<15) )
                     state |= MK_MBUTTON;
-                if ( GetKeyState( VK_RBUTTON ) )
+                if ( GetKeyState( VK_RBUTTON ) & (1<<15) )
                     state |= MK_RBUTTON;
 
@@ -4517,5 +4513,5 @@
             // Generate an ENTER event
             m_mouseInWindow = true;
-#if _WIN32_WINNT >= 0x0400
+//#if _WIN32_WINNT >= 0x0400
 #ifndef __WXWINCE__
             TRACKMOUSEEVENT trackinfo;
@@ -4529,5 +4525,5 @@
             _TrackMouseEvent(&trackinfo);
 #endif
-#endif
+//#endif
             wxMouseEvent event(wxEVT_ENTER_WINDOW);
             InitMouseEvent(event, x, y, flags);

 	  	 

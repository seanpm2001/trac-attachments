Index: src/unix/threadpsx.cpp
===================================================================
--- src/unix/threadpsx.cpp	(revision 64269)
+++ src/unix/threadpsx.cpp	(working copy)
@@ -29,6 +29,10 @@
 #include "wx/thread.h"
 #include "wx/except.h"
 
+#ifdef __QNX__
+    #include <sys/time.h>
+#endif
+
 #ifndef WX_PRECOMP
     #include "wx/app.h"
     #include "wx/dynarray.h"
Index: src/unix/appunix.cpp
===================================================================
--- src/unix/appunix.cpp	(revision 64269)
+++ src/unix/appunix.cpp	(working copy)
@@ -10,6 +10,10 @@
 
 #include "wx/wxprec.h"
 
+#ifdef __QNX__
+   #define SA_RESTART 0
+#endif
+
 #ifdef __BORLANDC__
     #pragma hdrstop
 #endif
Index: src/stc/scintilla/include/Platform.h
===================================================================
--- src/stc/scintilla/include/Platform.h	(revision 64269)
+++ src/stc/scintilla/include/Platform.h	(working copy)
@@ -56,7 +56,7 @@
 // Underlying the implementation of the platform classes are platform specific types.
 // Sometimes these need to be passed around by client code so they are defined here
 
-typedef void *FontID;
+typedef void *scFontID;  // The old name "FontID" collides with a definition in QNX/Photon so I added "sc" for "scintilla"
 typedef void *SurfaceID;
 typedef void *WindowID;
 typedef void *MenuID;
@@ -283,7 +283,7 @@
  */
 class Font {
 protected:
-	FontID fid;
+	scFontID fid;
 #if PLAT_WX
 	int ascent;
 #endif
@@ -298,9 +298,9 @@
 		bool bold, bool italic, int extraFontFlag=0);
 	virtual void Release();
 
-	FontID GetID() { return fid; }
+	scFontID GetID() { return fid; }
 	// Alias another font - caller guarantees not to Release
-	void SetID(FontID fid_) { fid = fid_; }
+	void SetID(scFontID fid_) { fid = fid_; }
 	friend class Surface;
         friend class SurfaceImpl;
 };
Index: src/common/intl.cpp
===================================================================
--- src/common/intl.cpp	(revision 64269)
+++ src/common/intl.cpp	(working copy)
@@ -1624,6 +1624,7 @@
     // could try to reverse engineer the format from strftime() output but this
     // looks like too much trouble considering the relatively small number of
     // systems without nl_langinfo() still in use)
+    index=index;
     return wxString();
 #endif // HAVE_LANGINFO_H/!HAVE_LANGINFO_H
 }
Index: src/common/wxcrt.cpp
===================================================================
--- src/common/wxcrt.cpp	(revision 64269)
+++ src/common/wxcrt.cpp	(working copy)
@@ -16,6 +16,13 @@
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
 
+#ifdef __QNX__
+// for vfwscanf()
+    #include <wchar.h>
+    #include <stdarg.h>
+    extern "C" int vswscanf(const wchar_t *, const wchar_t *, va_list);
+#endif
+
 #ifdef __BORLANDC__
     #pragma hdrstop
 #endif
Index: src/common/sckaddr.cpp
===================================================================
--- src/common/sckaddr.cpp	(revision 64269)
+++ src/common/sckaddr.cpp	(working copy)
@@ -317,7 +317,7 @@
     return he;
 }
 
-#if defined(HAVE_GETSERVBYNAME)
+#if defined(HAVE_GETSERVBYNAME) || defined __QNX__
 servent *deepCopyServent(servent *s,
                          servent *se,
                          char *buffer,
@@ -395,7 +395,7 @@
 #elif defined(HAVE_FUNC_GETSERVBYNAME_R_4)
     if ( getservbyname_r(port, protocol, serv, &buffer) != 0 )
         return NULL;
-#elif defined(HAVE_GETSERVBYNAME)
+#elif defined(HAVE_GETSERVBYNAME) || __QNX__
     wxLOCK_GETBY_MUTEX(serv);
 
     se = getservbyname(port, protocol);
Index: src/x11/evtloop.cpp
===================================================================
--- src/x11/evtloop.cpp	(revision 64269)
+++ src/x11/evtloop.cpp	(working copy)
@@ -171,7 +171,10 @@
 void wxGUIEventLoop::Exit(int rc)
 {
     wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
-
+#ifdef __QNX__
+    // Necessary for QNX port (X11 variant, not GTK) for some reason: an exit event is sent before something is running
+    if (IsRunning()) return;
+#endif
     m_impl->SetExitCode(rc);
     m_impl->m_keepGoing = false;
 }
Index: src/x11/pango_x.cpp
===================================================================
--- src/x11/pango_x.cpp	(revision 64269)
+++ src/x11/pango_x.cpp	(working copy)
@@ -89,6 +89,7 @@
     {
         wxUnusedVar(colour);
         pango_x_render( wxGlobalDisplay(), drawable, gc, font, glyphs, x, y );
+	colour=colour; // Avoids "unused parameter" warning
     }
 }
 
Index: include/wx/arrstr.h
===================================================================
--- include/wx/arrstr.h	(revision 64269)
+++ include/wx/arrstr.h	(working copy)
@@ -109,7 +109,9 @@
 //            doesn't export template methods from DLL correctly so even though
 //            it compiles them fine, we get link errors when using wxArrayString
 #if !defined(__VISUALC6__) || !(defined(WXMAKINGDLL) || defined(WXUSINGDLL))
-    #define wxHAS_VECTOR_TEMPLATE_ASSIGN
+    #ifndef __QNX__
+        #define wxHAS_VECTOR_TEMPLATE_ASSIGN
+    #endif
 #endif
 
 #ifdef wxHAS_VECTOR_TEMPLATE_ASSIGN
Index: include/wx/math.h
===================================================================
--- include/wx/math.h	(revision 64269)
+++ include/wx/math.h	(working copy)
@@ -18,6 +18,11 @@
 
 #include <math.h>
 
+#ifdef __QNX__
+    // Replacement for finite() which doesn't seem to exist in QNX 6.3.x
+    #define finite(value) (!isinf(value) && !isnan(value))
+#endif
+
 #ifndef M_PI
     #define M_PI 3.1415926535897932384626433832795
 #endif
Index: include/wx/string.h
===================================================================
--- include/wx/string.h	(revision 64269)
+++ include/wx/string.h	(working copy)
@@ -24,6 +24,10 @@
 
 #include "wx/defs.h"        // everybody should include this
 
+#ifdef __QNX__
+#include <strings.h>
+#endif
+
 #ifndef __WXPALMOS5__
 #if defined(__WXMAC__) || defined(__VISAGECPP__)
     #include <ctype.h>

Index: wxWidgets-2.8/src/msw/window.cpp
===================================================================
--- wxWidgets-2.8/src/msw/window.cpp	(revision 55310)
+++ wxWidgets-2.8/src/msw/window.cpp	(working copy)
@@ -2381,12 +2381,15 @@
 
             if ( bProcess )
             {
+                int id = wxCharCodeMSWToWX(msg->wParam, msg->lParam);
                 wxNavigationKeyEvent event;
                 event.SetDirection(bForward);
                 event.SetWindowChange(bWindowChange);
                 event.SetFromTab(bFromTab);
                 event.SetEventObject(this);
 
+                event.SetKeyEvent(CreateKeyEvent(wxEVT_NAVIGATION_KEY, id, msg->wParam, msg->lParam));
+
                 if ( GetEventHandler()->ProcessEvent(event) )
                 {
                     // as we don't call IsDialogMessage(), which would take of
Index: wxWidgets-2.8/include/wx/event.h
===================================================================
--- wxWidgets-2.8/include/wx/event.h	(revision 55310)
+++ wxWidgets-2.8/include/wx/event.h	(working copy)
@@ -1899,11 +1899,11 @@
  wxEVT_NAVIGATION_KEY
  */
 // NB: don't derive from command event to avoid being propagated to the parent
-class WXDLLIMPEXP_CORE wxNavigationKeyEvent : public wxEvent
+class WXDLLIMPEXP_CORE wxNavigationKeyEvent : public wxKeyEvent
 {
 public:
     wxNavigationKeyEvent()
-        : wxEvent(0, wxEVT_NAVIGATION_KEY),
+        : wxKeyEvent(wxEVT_NAVIGATION_KEY),
           m_flags(IsForward | FromTab),    // defaults are for TAB
           m_focus((wxWindow *)NULL)
         {
@@ -1911,7 +1911,7 @@
         }
 
     wxNavigationKeyEvent(const wxNavigationKeyEvent& event)
-        : wxEvent(event),
+        : wxKeyEvent(event),
           m_flags(event.m_flags),
           m_focus(event.m_focus)
         { }
@@ -1944,6 +1944,9 @@
     // Set flags
     void SetFlags(long flags) { m_flags = flags; }
 
+    // Set key event values from wxKeyEvent
+    void SetKeyEvent(const wxKeyEvent& event) { wxKeyEvent::operator=(event); }
+
     virtual wxEvent *Clone() const { return new wxNavigationKeyEvent(*this); }
 
     enum

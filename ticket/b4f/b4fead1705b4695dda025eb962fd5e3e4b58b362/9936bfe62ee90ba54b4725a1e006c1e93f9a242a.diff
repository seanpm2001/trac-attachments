Index: src/html/search.cpp
===================================================================
--- src/html/search.cpp	(revision 66858)
+++ src/html/search.cpp	(working copy)
@@ -1,72 +0,0 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        search.cpp
-// Purpose:     search engine
-// Author:      Vaclav Slavik
-// RCS-ID:      $Id$
-// Copyright:   (c) 1999 Vaclav Slavik
-// Licence:     wxWindows Licence
-/////////////////////////////////////////////////////////////////////////////
-
-
-
-#ifdef __GNUG__
-#pragma implementation
-#endif
-
-#include "wx/wxprec.h"
-
-#ifdef __BORLANDC__
-    #pragma hdrstop
-#endif
-
-#include "wx/defs.h"
-#if wxUSE_HTML
-
-#ifndef WXPRECOMP
-#endif
-
-#include "wx/html/helpdata.h"
-
-
-//--------------------------------------------------------------------------------
-// wxSearchEngine
-//--------------------------------------------------------------------------------
-
-void wxSearchEngine::LookFor(const wxString& keyword)
-{
-    if (m_Keyword) delete[] m_Keyword;
-    m_Keyword = new wxChar[keyword.Length() + 1];
-    wxStrcpy(m_Keyword, keyword.c_str());
-    for (int i = wxStrlen(m_Keyword) - 1; i >= 0; i--)
-        if ((m_Keyword[i] >= wxT('A')) && (m_Keyword[i] <= wxT('Z')))
-            m_Keyword[i] += wxT('a') - wxT('A');
-}
-
-
-
-bool wxSearchEngine::Scan(wxInputStream *stream)
-{
-    wxASSERT_MSG(m_Keyword != NULL, _("wxSearchEngine::LookFor must be called before scanning!"));
-
-    int i, j;
-    int lng = stream ->GetSize();
-    int wrd = wxStrlen(m_Keyword);
-    bool found = FALSE;
-    char *buf = new char[lng + 1];
-    stream -> Read(buf, lng);
-    buf[lng] = 0;
-
-    for (i = 0; i < lng; i++)
-        if ((buf[i] >= 'A') && (buf[i] <= 'Z')) buf[i] += 'a' - 'A';
-
-    for (i = 0; i < lng - wrd; i++) {
-        j = 0;
-        while ((j < wrd) && (buf[i + j] == m_Keyword[j])) j++;
-        if (j == wrd) {found = TRUE; break;}
-    }
-
-    delete[] buf;
-    return found;
-}
-
-#endif
Index: src/html/htmlctrl/webkit/webkit.mm
===================================================================
--- src/html/htmlctrl/webkit/webkit.mm	(revision 66858)
+++ src/html/htmlctrl/webkit/webkit.mm	(working copy)
@@ -9,10 +9,6 @@
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
-#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
-    #pragma implementation "webkit.h"
-#endif
-
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
 #include "wx/splitter.h"
Index: src/html/htmlfilter.cpp
===================================================================
--- src/html/htmlfilter.cpp	(revision 66858)
+++ src/html/htmlfilter.cpp	(working copy)
@@ -1,172 +0,0 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        filter.cpp
-// Purpose:     wxHtmlFilter - input filter for translating into HTML format
-// Author:      Vaclav Slavik
-// Copyright:   (c) 1999 Vaclav Slavik
-// Licence:     wxWindows Licence
-/////////////////////////////////////////////////////////////////////////////
-
-
-#ifdef __GNUG__
-#pragma implementation "htmlfilter.h"
-#endif
-
-#include "wx/wxprec.h"
-
-#ifdef __BORLANDC__
-    #pragma hdrstop
-#endif
-
-#if wxUSE_HTML
-
-#ifndef WXPRECOMP
-#endif
-
-#include "wx/html/htmlfilter.h"
-#include "wx/html/htmlwin.h"
-
-
-/*
-
-There is code for several default filters:
-
-*/
-
-IMPLEMENT_ABSTRACT_CLASS(wxHtmlFilter, wxObject)
-
-//--------------------------------------------------------------------------------
-// wxHtmlFilterPlainText
-//          filter for text/plain or uknown
-//--------------------------------------------------------------------------------
-
-IMPLEMENT_DYNAMIC_CLASS(wxHtmlFilterPlainText, wxHtmlFilter)
-
-bool wxHtmlFilterPlainText::CanRead(const wxFSFile& WXUNUSED(file)) const
-{
-    return TRUE;
-}
-
-
-
-wxString wxHtmlFilterPlainText::ReadFile(const wxFSFile& file) const
-{
-    wxInputStream *s = file.GetStream();
-    char *src;
-    wxString doc, doc2;
-
-    if (s == NULL) return wxEmptyString;
-    src = new char[s -> GetSize()+1];
-    src[s -> GetSize()] = 0;
-    s -> Read(src, s -> GetSize());
-    doc = src;
-    delete [] src;
-
-    doc.Replace(wxT("<"), wxT("&lt;"), TRUE);
-    doc.Replace(wxT(">"), wxT("&gt;"), TRUE);
-    doc2 = wxT("<HTML><BODY><PRE>\n") + doc + wxT("\n</PRE></BODY></HTML>");
-    return doc2;
-}
-
-
-
-
-
-//--------------------------------------------------------------------------------
-// wxHtmlFilterImage
-//          filter for image/*
-//--------------------------------------------------------------------------------
-
-class wxHtmlFilterImage : public wxHtmlFilter
-{
-    DECLARE_DYNAMIC_CLASS(wxHtmlFilterImage)
-
-    public:
-        virtual bool CanRead(const wxFSFile& file) const;
-        virtual wxString ReadFile(const wxFSFile& file) const;
-};
-
-IMPLEMENT_DYNAMIC_CLASS(wxHtmlFilterImage, wxHtmlFilter)
-
-
-
-bool wxHtmlFilterImage::CanRead(const wxFSFile& file) const
-{
-    return (file.GetMimeType().Left(6) == "image/");
-}
-
-
-
-wxString wxHtmlFilterImage::ReadFile(const wxFSFile& file) const
-{
-    return ("<HTML><BODY><IMG SRC=\"" + file.GetLocation() + "\"></BODY></HTML>");
-}
-
-
-
-
-//--------------------------------------------------------------------------------
-// wxHtmlFilterPlainText
-//          filter for text/plain or uknown
-//--------------------------------------------------------------------------------
-
-class wxHtmlFilterHTML : public wxHtmlFilter
-{
-    DECLARE_DYNAMIC_CLASS(wxHtmlFilterHTML)
-
-    public:
-        virtual bool CanRead(const wxFSFile& file) const;
-        virtual wxString ReadFile(const wxFSFile& file) const;
-};
-
-
-IMPLEMENT_DYNAMIC_CLASS(wxHtmlFilterHTML, wxHtmlFilter)
-
-bool wxHtmlFilterHTML::CanRead(const wxFSFile& file) const
-{
-//    return (file.GetMimeType() == "text/html");
-// This is true in most case but some page can return:
-// "text/html; char-encoding=...."
-// So we use Find instead
-  return (file.GetMimeType().Find(wxT("text/html")) == 0);
-}
-
-
-
-wxString wxHtmlFilterHTML::ReadFile(const wxFSFile& file) const
-{
-    wxInputStream *s = file.GetStream();
-    char *src;
-    wxString doc;
-
-    if (s == NULL) return wxEmptyString;
-    src = new char[s -> GetSize() + 1];
-    src[s -> GetSize()] = 0;
-    s -> Read(src, s -> GetSize());
-    doc = src;
-    delete[] src;
-
-    return doc;
-}
-
-
-
-
-///// Module:
-
-class wxHtmlFilterModule : public wxModule
-{
-    DECLARE_DYNAMIC_CLASS(wxHtmlFilterModule)
-
-    public:
-        virtual bool OnInit()
-        {
-            wxHtmlWindow::AddFilter(new wxHtmlFilterHTML);
-            wxHtmlWindow::AddFilter(new wxHtmlFilterImage);
-            return TRUE;
-        }
-        virtual void OnExit() {}
-};
-
-IMPLEMENT_DYNAMIC_CLASS(wxHtmlFilterModule, wxModule)
-
-#endif
Index: src/regex/regc_locale.c
===================================================================
--- src/regex/regc_locale.c	(revision 66858)
+++ src/regex/regc_locale.c	(working copy)
@@ -23,8 +23,8 @@
 /* ASCII character-name table */
 
 static struct cname {
-    chr *name;
-    char code;
+    CONST chr *name;
+    CONST char code;
 } cnames[] = {
     {wxT("NUL"),                 '\0'},
     {wxT("SOH"),                 '\001'},
@@ -844,14 +844,14 @@
     size_t len;
     struct cvec *cv = NULL;
     CONST chr *np;
-    chr **namePtr;
+    CONST chr **namePtr;
     int i, index;
 
     /*
      * The following arrays define the valid character class names.
      */
 
-    static chr *classNames[] = {
+    static CONST chr *classNames[] = {
 	wxT("alnum"), wxT("alpha"), wxT("ascii"), wxT("blank"), wxT("cntrl"), wxT("digit"), wxT("graph"),
 	wxT("lower"), wxT("print"), wxT("punct"), wxT("space"), wxT("upper"), wxT("xdigit"), NULL
     };
@@ -1054,7 +1054,7 @@
     int i;
     int count;
     char buf[256];
-    const char *loc;
+    CONST char *loc;
 
     /* find the name */
     len = endp - startp;
Index: src/regex/regerror.c
===================================================================
--- src/regex/regerror.c	(revision 66858)
+++ src/regex/regerror.c	(working copy)
@@ -37,8 +37,8 @@
 /* struct to map among codes, code names, and explanations */
 static struct rerr {
 	int code;
-	char *name;
-	char *explain;
+	CONST char *name;
+	CONST char *explain;
 } rerrs[] = {
 	/* the actual table is built from regex.h */
 #	include "regerrs.h"
@@ -57,7 +57,7 @@
 size_t errbuf_size;		/* available space in errbuf, can be 0 */
 {
 	struct rerr *r;
-	char *msg;
+	CONST char *msg;
 	char convbuf[sizeof(unk)+50];	/* 50 = plenty for int */
 	size_t len;
 	int icode;
Index: src/regex/regcomp.c
===================================================================
--- src/regex/regcomp.c	(revision 66858)
+++ src/regex/regcomp.c	(working copy)
@@ -73,7 +73,7 @@
 static VOID dump _ANSI_ARGS_((regex_t *, FILE *));
 static VOID dumpst _ANSI_ARGS_((struct subre *, FILE *, int));
 static VOID stdump _ANSI_ARGS_((struct subre *, FILE *, int));
-static char *stid _ANSI_ARGS_((struct subre *, char *, size_t));
+static CONST char *stid _ANSI_ARGS_((struct subre *, char *, size_t));
 /* === regc_lex.c === */
 static VOID lexstart _ANSI_ARGS_((struct vars *));
 static VOID prefixes _ANSI_ARGS_((struct vars *));
@@ -2156,7 +2156,7 @@
  - stid - identify a subtree node for dumping
  ^ static char *stid(struct subre *, char *, size_t);
  */
-static char *			/* points to buf or constant string */
+static CONST char *			/* points to buf or constant string */
 stid(t, buf, bufsize)
 struct subre *t;
 char *buf;
Index: src/common/strconv.cpp
===================================================================
--- src/common/strconv.cpp	(revision 66858)
+++ src/common/strconv.cpp	(working copy)
@@ -3412,7 +3412,7 @@
 
 #ifdef __WINDOWS__
     WX_DEFINE_GLOBAL_CONV2(wxMBConv, wxMBConv_win32, wxConvLibc, wxEMPTY_PARAMETER_VALUE);
-#elif 0 // defined(__WXOSX__)
+#elif defined(__WXOSX__)
     WX_DEFINE_GLOBAL_CONV2(wxMBConv, wxMBConv_cf, wxConvLibc,  (wxFONTENCODING_UTF8));
 #else
     WX_DEFINE_GLOBAL_CONV2(wxMBConv, wxMBConvLibc, wxConvLibc, wxEMPTY_PARAMETER_VALUE);
Index: src/osx/cocoa/notebook.mm
===================================================================
--- src/osx/cocoa/notebook.mm	(revision 66858)
+++ src/osx/cocoa/notebook.mm	(working copy)
@@ -66,7 +66,7 @@
     return YES;
 }
 
-- (void)tabView:(NSTabView *)tabView didSelectTabViewItem:(NSTabViewItem *)tabViewItem;
+- (void)tabView:(NSTabView *)tabView didSelectTabViewItem:(NSTabViewItem *)tabViewItem
 
 {
     wxUnusedVar(tabViewItem);
Index: src/osx/cocoa/nonownedwnd.mm
===================================================================
--- src/osx/cocoa/nonownedwnd.mm	(revision 66858)
+++ src/osx/cocoa/nonownedwnd.mm	(working copy)
@@ -714,8 +714,6 @@
 
 void wxNonOwnedWindowCocoaImpl::GetContentArea( int& left, int &top, int &width, int &height ) const
 {
-    NSRect outer = NSMakeRect(100,100,100,100);
-    NSRect content = [NSWindow contentRectForFrameRect:outer styleMask:[m_macWindow styleMask] ];
     NSRect rect = [[m_macWindow contentView] frame];
     left = (int)rect.origin.x;
     top = (int)rect.origin.y;
Index: src/osx/cocoa/utils.mm
===================================================================
--- src/osx/cocoa/utils.mm	(revision 66858)
+++ src/osx/cocoa/utils.mm	(working copy)
@@ -72,7 +72,7 @@
     wxUnusedVar(application);
 }
 
-- (BOOL)application:(NSApplication *)sender openFile:(NSString *)filename;
+- (BOOL)application:(NSApplication *)sender openFile:(NSString *)filename
 {
     wxUnusedVar(sender);
     wxCFStringRef cf(wxCFRetain(filename));
@@ -80,7 +80,7 @@
     return YES;
 }
 
-- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)sender;
+- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)sender
 {
     wxUnusedVar(sender);
     wxTheApp->MacNewFile() ;
@@ -328,12 +328,9 @@
 
     wxSize sz = m_window->GetSize();
 
-    int left = subrect != NULL ? subrect->x : 0 ;
-    int top = subrect != NULL ? subrect->y : 0 ;
     int width = subrect != NULL ? subrect->width : sz.x;
     int height = subrect !=  NULL ? subrect->height : sz.y ;
 
-    NSRect rect = NSMakeRect(left, top, width, height );
     NSView* view = (NSView*) m_window->GetHandle();
     [view lockFocus];
     // we use this method as other methods force a repaint, and this method can be

diff -aburN ../original/build/bakefiles/files.bkl ./build/bakefiles/files.bkl
--- ../original/build/bakefiles/files.bkl	2007-09-06 10:59:52.000000000 +0200
+++ ./build/bakefiles/files.bkl	2007-09-06 11:13:26.000000000 +0200
@@ -618,6 +618,7 @@
     src/common/bmpbase.cpp
     src/common/bookctrl.cpp
     src/common/btncmn.cpp
+    src/common/cairo.cpp
     src/common/choiccmn.cpp
     src/common/clipcmn.cpp
     src/common/clrpickercmn.cpp
@@ -738,6 +739,7 @@
     wx/bmpbuttn.h
     wx/brush.h
     wx/button.h
+    wx/cairo.h
     wx/checkbox.h
     wx/checklst.h
     wx/choicdlg.h
diff -aburN ../original/docs/latex/wx/tprint.tex ./docs/latex/wx/tprint.tex
--- ../original/docs/latex/wx/tprint.tex	2007-09-06 10:58:06.000000000 +0200
+++ ./docs/latex/wx/tprint.tex	2007-09-06 11:16:02.000000000 +0200
@@ -219,6 +219,15 @@
 these libraries).
 
 In version GTK+ 2.10, support for printing has finally been
-added to GTK+ itself. Support for this has yet to be written
-for wxGTK (which requires drawing through Cairo).
+added to GTK+ itself. Beginning with version 2.9.X,
+the GTK+ port of wxWidgets can make use of this feature
+if wxWidgets is configured accordingly and if the GTK+ version is >= 2.10.
+You need to configure wxWidgets with the {\it configure --with-gtkprint}
+switch and your application will then search for the GTK+ print support
+at runtime. If it is found, printing will be done through GTK+, otherwise the
+application will fall back to GNOME printing support if it is available or,
+if it isn't, to the old PostScript printing code.
+Note that the application will not require a GTK+ version >= 2.10
+to be installed in order to run (there will be no dependency on
+this version).
 
diff -aburN ../original/docs/latex/wx/wxusedef.tex ./docs/latex/wx/wxusedef.tex
--- ../original/docs/latex/wx/wxusedef.tex	2007-09-06 10:58:06.000000000 +0200
+++ ./docs/latex/wx/wxusedef.tex	2007-09-06 11:16:20.000000000 +0200
@@ -242,6 +242,7 @@
 \subsection{wxUSE preprocessor symbols used only in wxGTK port}\label{wxusedefgtk}
 \begin{twocollist}\itemsep=0pt
 \twocolitem{wxUSE\_DETECT\_SM}{Use code to detect X11 session manager.}
+\twocolitem{wxUSE\_GTKPRINT}{Use GTK+ printing support.}
 \twocolitem{wxUSE\_LIBGNOMEPRINT}{Use GNOME printing support.}
 \twocolitem{wxUSE\_LIBGNOMEVFS}{Use GNOME VFS support.}
 \twocolitem{wxUSE\_LIBGNOMEVS}{Use GNOME VFS support.}
diff -aburN ../original/include/wx/cairo.h ./include/wx/cairo.h
--- ../original/include/wx/cairo.h	1970-01-01 01:00:00.000000000 +0100
+++ ./include/wx/cairo.h	2007-09-05 20:44:56.000000000 +0200
@@ -0,0 +1,128 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/cairo.h
+// Purpose:     Cairo library
+// Author:      Anthony Bretaudeau
+// Created:     2007-08-25
+// RCS-ID:      $Id: cairo.h 47254 2007-08-25 10:09:52Z VS $
+// Copyright:   (c) Anthony Bretaudeau
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_CAIRO_H_BASE_
+#define _WX_CAIRO_H_BASE_
+
+#include "wx/dynlib.h"
+#include <cairo.h>
+
+#define wxDL_METHOD_DEFINE( rettype, name, args, shortargs, defret ) \
+    typedef rettype (* name ## Type) args ; \
+    name ## Type pfn_ ## name; \
+    rettype name args \
+    { if (m_ok) return pfn_ ## name shortargs ; return defret; }
+
+#define wxDL_METHOD_LOAD( lib, name, success ) \
+    pfn_ ## name = (name ## Type) lib->GetSymbol( wxT(#name), &success ); \
+    if (!success) return;
+
+class wxCairoLibrary
+{
+public:
+    wxCairoLibrary();
+    ~wxCairoLibrary();
+
+    bool IsOk();
+    void InitializeMethods();
+
+private:
+    bool              m_ok;
+    wxDynamicLibrary *m_cairo_lib;
+
+public:
+    wxDL_METHOD_DEFINE( void, cairo_arc,
+        (cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2), (cr, xc, yc, radius, angle1, angle2), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_arc_negative,
+        (cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2), (cr, xc, yc, radius, angle1, angle2), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_clip,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_close_path,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( cairo_t*, cairo_create,
+        (cairo_surface_t *target), (target), NULL)
+    wxDL_METHOD_DEFINE( void, cairo_curve_to,
+        (cairo_t *cr, double x1, double y1, double x2, double y2, double x3, double y3), (cr, x1, y1, x2, y2, x3, y3), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_destroy,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_fill,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_fill_preserve,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( cairo_surface_t*, cairo_get_target,
+        (cairo_t *cr), (cr), NULL)
+    wxDL_METHOD_DEFINE( cairo_surface_t*, cairo_image_surface_create_for_data,
+        (unsigned char *data, cairo_format_t format, int width, int height, int stride), (data, format, width, height, stride), NULL)
+    wxDL_METHOD_DEFINE( void, cairo_line_to,
+        (cairo_t *cr, double x, double y), (cr, x, y), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_move_to,
+        (cairo_t *cr, double x, double y), (cr, x, y), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_new_path,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_paint,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_pattern_add_color_stop_rgba,
+        (cairo_pattern_t *pattern, double offset, double red, double green, double blue, double alpha), (pattern, offset, red, green, blue, alpha), /**/)
+    wxDL_METHOD_DEFINE( cairo_pattern_t*, cairo_pattern_create_for_surface,
+        (cairo_surface_t *surface), (surface), NULL)
+    wxDL_METHOD_DEFINE( cairo_pattern_t*, cairo_pattern_create_linear,
+        (double x0, double y0, double x1, double y1), (x0, y0, x1, y1), NULL)
+    wxDL_METHOD_DEFINE( cairo_pattern_t*, cairo_pattern_create_radial,
+        (double cx0, double cy0, double radius0, double cx1, double cy1, double radius1), (cx0, cy0, radius0, cx1, cy1, radius1), NULL)
+    wxDL_METHOD_DEFINE( void, cairo_pattern_destroy,
+        (cairo_pattern_t *pattern), (pattern), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_pattern_set_extend,
+        (cairo_pattern_t *pattern, cairo_extend_t extend), (pattern, extend), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_pattern_set_filter,
+        (cairo_pattern_t *pattern, cairo_filter_t filter), (pattern, filter), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_rectangle,
+        (cairo_t *cr, double x, double y, double width, double height), (cr, x, y, width, height), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_reset_clip,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_restore,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_rotate,
+        (cairo_t *cr, double angle), (cr, angle), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_save,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_scale,
+        (cairo_t *cr, double sx, double sy), (cr, sx, sy), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_dash,
+        (cairo_t *cr, const double *dashes, int num_dashes, double offset), (cr, dashes, num_dashes, offset), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_fill_rule,
+        (cairo_t *cr, cairo_fill_rule_t fill_rule), (cr, fill_rule), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_line_cap,
+        (cairo_t *cr, cairo_line_cap_t line_cap), (cr, line_cap), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_line_join,
+        (cairo_t *cr, cairo_line_join_t line_join), (cr, line_join), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_line_width,
+        (cairo_t *cr, double width), (cr, width), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_operator,
+        (cairo_t *cr, cairo_operator_t op), (cr, op), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_source,
+        (cairo_t *cr, cairo_pattern_t *source), (cr, source), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_set_source_rgba,
+        (cairo_t *cr, double red, double green, double blue, double alpha), (cr, red, green, blue, alpha), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_stroke,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_stroke_preserve,
+        (cairo_t *cr), (cr), /**/)
+    wxDL_METHOD_DEFINE( cairo_surface_t*, cairo_surface_create_similar,
+        (cairo_surface_t *other, cairo_content_t content, int width, int height), (other, content, width, height), NULL)
+    wxDL_METHOD_DEFINE( void, cairo_surface_destroy,
+        (cairo_surface_t *surface), (surface), /**/)
+    wxDL_METHOD_DEFINE( void, cairo_translate,
+        (cairo_t *cr, double tx, double ty), (cr, tx, ty), /**/)
+
+    DECLARE_NO_COPY_CLASS(wxCairoLibrary)
+};
+
+#endif
+// _WX_CAIRO_H_BASE_
diff -aburN ../original/include/wx/gtk/print.h ./include/wx/gtk/print.h
--- ../original/include/wx/gtk/print.h	2007-09-06 10:59:32.000000000 +0200
+++ ./include/wx/gtk/print.h	2007-09-06 12:01:02.000000000 +0200
@@ -4,7 +4,7 @@
 // Purpose:     GTK printing support
 // Created:     2007-08-25
 // RCS-ID:      $Id: print.h,v 1 2007-08-25 05:44:44 PC Exp $
-// Copyright:   (c) 2007 wxWidgets development team
+// Copyright:   (c) Anthony Bretaudeau
 // Licence:     wxWindows Licence
 /////////////////////////////////////////////////////////////////////////////
 
@@ -19,6 +19,8 @@
 #include "wx/printdlg.h"
 #include "wx/prntbase.h"
 #include "wx/dc.h"
+#include "wx/cairo.h"
+
 
 typedef struct _GtkPrintOperation GtkPrintOperation;
 typedef struct _GtkPrintContext GtkPrintContext;
diff -aburN ../original/src/common/cairo.cpp ./src/common/cairo.cpp
--- ../original/src/common/cairo.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./src/common/cairo.cpp	2007-09-05 19:37:08.000000000 +0200
@@ -0,0 +1,100 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/common/cairo.cpp
+// Purpose:     Cairo library
+// Author:      Anthony Betaudeau
+// Created:     2007-08-25
+// RCS-ID:      $Id: cairo.cpp 44625 2007-08-25 11:35:04Z VZ $
+// Copyright:   (c) Anthony Bretaudeau
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+
+// For compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#include "wx/cairo.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/module.h"
+#endif
+
+//----------------------------------------------------------------------------
+// wxCairoLibrary
+//----------------------------------------------------------------------------
+
+wxCairoLibrary::wxCairoLibrary()
+{
+    m_cairo_lib = NULL;
+
+    wxLogNull log;
+    m_cairo_lib = new wxDynamicLibrary( wxT("libcairo.so") );
+    m_ok = m_cairo_lib->IsLoaded();
+    if (!m_ok) return;
+
+    InitializeMethods();
+}
+
+wxCairoLibrary::~wxCairoLibrary()
+{
+    if (m_cairo_lib)
+        delete m_cairo_lib;
+}
+
+bool wxCairoLibrary::IsOk()
+{
+    return m_ok;
+}
+
+void wxCairoLibrary::InitializeMethods()
+{
+    m_ok = false;
+    bool success;
+
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_arc, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_arc_negative, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_clip, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_close_path, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_create, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_curve_to, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_destroy, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_fill, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_fill_preserve, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_get_target, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_image_surface_create_for_data, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_line_to, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_move_to, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_new_path, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_paint, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_add_color_stop_rgba, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_create_for_surface, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_create_linear, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_create_radial, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_destroy, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_set_extend, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_pattern_set_filter, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_rectangle, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_reset_clip, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_restore, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_rotate, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_save, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_scale, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_dash, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_fill_rule, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_line_cap, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_line_join, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_line_width, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_operator, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_source, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_set_source_rgba, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_stroke, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_stroke_preserve, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_surface_create_similar, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_surface_destroy, success )
+    wxDL_METHOD_LOAD( m_cairo_lib, cairo_translate, success )
+
+    m_ok = true;
+}
diff -aburN ../original/src/gtk/print.cpp ./src/gtk/print.cpp
--- ../original/src/gtk/print.cpp	2007-09-06 10:55:10.000000000 +0200
+++ ./src/gtk/print.cpp	2007-09-06 12:01:33.000000000 +0200
@@ -48,6 +48,8 @@
 static const double RAD2DEG  = 180.0 / M_PI;
 static const double DEG2RAD  = M_PI / 180.0;
 
+static wxCairoLibrary* gs_cairo = NULL;
+
 //----------------------------------------------------------------------------
 // wxGtkPrintModule
 // Initialized when starting the app : if it successfully load the gtk-print framework,
@@ -74,7 +76,8 @@
 
 bool wxGtkPrintModule::OnInit()
 {
-    if (gtk_check_version(2,10,0) == NULL)
+    gs_cairo = new wxCairoLibrary;
+    if (gs_cairo->IsOk() && gtk_check_version(2,10,0) == NULL)
         wxPrintFactory::SetPrintFactory( new wxGtkPrintFactory );
         
     return true;
@@ -82,11 +85,11 @@
 
 void wxGtkPrintModule::OnExit()
 {
+    delete gs_cairo;
 }
 
 IMPLEMENT_DYNAMIC_CLASS(wxGtkPrintModule, wxModule)
 
-
 //----------------------------------------------------------------------------
 // wxGtkPrintFactory
 //----------------------------------------------------------------------------
@@ -1087,8 +1090,8 @@
     m_scaleX = m_logicalScaleX * m_userScaleX;
     m_scaleY = m_logicalScaleY * m_userScaleY;
 
-    cairo_translate(m_cairo, m_deviceOriginX, m_deviceOriginY);
-    cairo_scale(m_cairo, m_scaleX, m_scaleY );
+    gs_cairo->cairo_translate(m_cairo, m_deviceOriginX, m_deviceOriginY);
+    gs_cairo->cairo_scale(m_cairo, m_scaleX, m_scaleY );
 }
 
 bool wxGtkPrintDC::DoFloodFill(wxCoord x1, wxCoord y1, const wxColour &col, int style )
@@ -1129,16 +1132,16 @@
 
     // Create a pattern with the gradient.
     cairo_pattern_t* gradient;
-    gradient = cairo_pattern_create_radial (LogicalToDeviceX(xC+xR), LogicalToDeviceY(yC+yR), 0, LogicalToDeviceX(xC+xR), LogicalToDeviceY(yC+yR), radius);
-    cairo_pattern_add_color_stop_rgba (gradient, 0.0, redIPS, greenIPS, blueIPS, alphaIPS);
-    cairo_pattern_add_color_stop_rgba (gradient, 1.0, redDPS, greenDPS, blueDPS, alphaDPS);
+    gradient = gs_cairo->cairo_pattern_create_radial (LogicalToDeviceX(xC+xR), LogicalToDeviceY(yC+yR), 0, LogicalToDeviceX(xC+xR), LogicalToDeviceY(yC+yR), radius);
+    gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 0.0, redIPS, greenIPS, blueIPS, alphaIPS);
+    gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 1.0, redDPS, greenDPS, blueDPS, alphaDPS);
 
     // Fill the rectangle with this pattern.
-    cairo_set_source(m_cairo, gradient);
-    cairo_rectangle (m_cairo, LogicalToDeviceX(xR), LogicalToDeviceY(yR), LogicalToDeviceXRel(w), LogicalToDeviceYRel(h) );
-    cairo_fill(m_cairo);
+    gs_cairo->cairo_set_source(m_cairo, gradient);
+    gs_cairo->cairo_rectangle (m_cairo, LogicalToDeviceX(xR), LogicalToDeviceY(yR), LogicalToDeviceXRel(w), LogicalToDeviceYRel(h) );
+    gs_cairo->cairo_fill(m_cairo);
 
-    cairo_pattern_destroy(gradient);
+    gs_cairo->cairo_pattern_destroy(gradient);
 
     CalcBoundingBox(xR, yR);
     CalcBoundingBox(xR+w, yR+h);
@@ -1171,24 +1174,24 @@
 
     // Create a pattern with the gradient.
     cairo_pattern_t* gradient;
-    gradient = cairo_pattern_create_linear (LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceX(x+w), LogicalToDeviceY(y));
+    gradient = gs_cairo->cairo_pattern_create_linear (LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceX(x+w), LogicalToDeviceY(y));
 
     if (nDirection == wxWEST)
     {
-        cairo_pattern_add_color_stop_rgba (gradient, 0.0, redDPS, greenDPS, blueDPS, alphaDPS);
-        cairo_pattern_add_color_stop_rgba (gradient, 1.0, redIPS, greenIPS, blueIPS, alphaIPS);
+        gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 0.0, redDPS, greenDPS, blueDPS, alphaDPS);
+        gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 1.0, redIPS, greenIPS, blueIPS, alphaIPS);
     }
     else {
-        cairo_pattern_add_color_stop_rgba (gradient, 0.0, redIPS, greenIPS, blueIPS, alphaIPS);
-        cairo_pattern_add_color_stop_rgba (gradient, 1.0, redDPS, greenDPS, blueDPS, alphaDPS);
+        gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 0.0, redIPS, greenIPS, blueIPS, alphaIPS);
+        gs_cairo->cairo_pattern_add_color_stop_rgba (gradient, 1.0, redDPS, greenDPS, blueDPS, alphaDPS);
     }
 
     // Fill the rectangle with this pattern.
-    cairo_set_source(m_cairo, gradient);
-    cairo_rectangle (m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(w), LogicalToDeviceYRel(h) );
-    cairo_fill(m_cairo);
+    gs_cairo->cairo_set_source(m_cairo, gradient);
+    gs_cairo->cairo_rectangle (m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(w), LogicalToDeviceYRel(h) );
+    gs_cairo->cairo_fill(m_cairo);
 
-    cairo_pattern_destroy(gradient);
+    gs_cairo->cairo_pattern_destroy(gradient);
 
     CalcBoundingBox(x, y);
     CalcBoundingBox(x+w, y+h);
@@ -1206,9 +1209,9 @@
     if  (m_pen.GetStyle() == wxTRANSPARENT) return;
 
     SetPen( m_pen );
-    cairo_move_to ( m_cairo, LogicalToDeviceX(x1), LogicalToDeviceY(y1) );
-    cairo_line_to ( m_cairo, LogicalToDeviceX(x2), LogicalToDeviceY(y2) );
-    cairo_stroke ( m_cairo );
+    gs_cairo->cairo_move_to ( m_cairo, LogicalToDeviceX(x1), LogicalToDeviceY(y1) );
+    gs_cairo->cairo_line_to ( m_cairo, LogicalToDeviceX(x2), LogicalToDeviceY(y2) );
+    gs_cairo->cairo_stroke ( m_cairo );
 
     CalcBoundingBox( x1, y1 );
     CalcBoundingBox( x2, y2 );
@@ -1223,12 +1226,12 @@
 
     SetPen(m_pen);
 
-    cairo_move_to (m_cairo, LogicalToDeviceX(x), 0);
-    cairo_line_to (m_cairo, LogicalToDeviceX(x), *h);
-    cairo_move_to (m_cairo, 0, LogicalToDeviceY(y));
-    cairo_line_to (m_cairo, *w, LogicalToDeviceY(y));
+    gs_cairo->cairo_move_to (m_cairo, LogicalToDeviceX(x), 0);
+    gs_cairo->cairo_line_to (m_cairo, LogicalToDeviceX(x), *h);
+    gs_cairo->cairo_move_to (m_cairo, 0, LogicalToDeviceY(y));
+    gs_cairo->cairo_line_to (m_cairo, *w, LogicalToDeviceY(y));
 
-    cairo_stroke (m_cairo);
+    gs_cairo->cairo_stroke (m_cairo);
     CalcBoundingBox( 0, 0 );
     CalcBoundingBox( *w, *h );
 
@@ -1271,15 +1274,15 @@
     alpha1 *= DEG2RAD;
     alpha2 *= DEG2RAD;
 
-    cairo_arc_negative ( m_cairo, LogicalToDeviceX(xc), LogicalToDeviceY(yc), LogicalToDeviceXRel((int)radius), alpha1, alpha2);
-    cairo_line_to(m_cairo, LogicalToDeviceX(xc), LogicalToDeviceY(yc));
-    cairo_close_path (m_cairo);
+    gs_cairo->cairo_arc_negative ( m_cairo, LogicalToDeviceX(xc), LogicalToDeviceY(yc), LogicalToDeviceXRel((int)radius), alpha1, alpha2);
+    gs_cairo->cairo_line_to(m_cairo, LogicalToDeviceX(xc), LogicalToDeviceY(yc));
+    gs_cairo->cairo_close_path (m_cairo);
 
     SetBrush( m_brush );
-    cairo_fill_preserve( m_cairo );
+    gs_cairo->cairo_fill_preserve( m_cairo );
 
     SetPen (m_pen);
-    cairo_stroke( m_cairo );
+    gs_cairo->cairo_stroke( m_cairo );
 
     CalcBoundingBox (x1, y1);
     CalcBoundingBox (xc, yc);
@@ -1288,23 +1291,23 @@
 
 void wxGtkPrintDC::DoDrawEllipticArc(wxCoord x,wxCoord y,wxCoord w,wxCoord h,double sa,double ea)
 {
-    cairo_save( m_cairo );
+    gs_cairo->cairo_save( m_cairo );
 
-    cairo_translate( m_cairo, LogicalToDeviceX((wxCoord) (x + w / 2.)), LogicalToDeviceX((wxCoord) (y + h / 2.)) );
+    gs_cairo->cairo_translate( m_cairo, LogicalToDeviceX((wxCoord) (x + w / 2.)), LogicalToDeviceX((wxCoord) (y + h / 2.)) );
     double scale = (double)LogicalToDeviceYRel(h) / (double) LogicalToDeviceXRel(w);
-    cairo_scale( m_cairo, 1.0, scale );
+    gs_cairo->cairo_scale( m_cairo, 1.0, scale );
 
-    cairo_arc_negative ( m_cairo, 0, 0, LogicalToDeviceXRel(w/2), -sa*DEG2RAD, -ea*DEG2RAD);
+    gs_cairo->cairo_arc_negative ( m_cairo, 0, 0, LogicalToDeviceXRel(w/2), -sa*DEG2RAD, -ea*DEG2RAD);
 
     SetPen (m_pen);
-    cairo_stroke_preserve( m_cairo );
+    gs_cairo->cairo_stroke_preserve( m_cairo );
 
-    cairo_line_to(m_cairo, 0,0);
+    gs_cairo->cairo_line_to(m_cairo, 0,0);
 
     SetBrush( m_brush );
-    cairo_fill( m_cairo );
+    gs_cairo->cairo_fill( m_cairo );
 
-    cairo_restore( m_cairo );
+    gs_cairo->cairo_restore( m_cairo );
 
     CalcBoundingBox( x, y);
     CalcBoundingBox( x+w, y+h );
@@ -1316,9 +1319,9 @@
 
     SetPen( m_pen );
 
-    cairo_move_to ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
-    cairo_line_to ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
-    cairo_stroke ( m_cairo );
+    gs_cairo->cairo_move_to ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
+    gs_cairo->cairo_line_to ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
+    gs_cairo->cairo_stroke ( m_cairo );
 
     CalcBoundingBox( x, y );
 }
@@ -1335,46 +1338,46 @@
     for ( i =0; i<n ; i++ )
         CalcBoundingBox( points[i].x+xoffset, points[i].y+yoffset);
 
-    cairo_move_to ( m_cairo, LogicalToDeviceX(points[0].x+xoffset), LogicalToDeviceY(points[0].y+yoffset) );
+    gs_cairo->cairo_move_to ( m_cairo, LogicalToDeviceX(points[0].x+xoffset), LogicalToDeviceY(points[0].y+yoffset) );
 
     for (i = 1; i < n; i++)
-        cairo_line_to ( m_cairo, LogicalToDeviceX(points[i].x+xoffset), LogicalToDeviceY(points[i].y+yoffset) );
+        gs_cairo->cairo_line_to ( m_cairo, LogicalToDeviceX(points[i].x+xoffset), LogicalToDeviceY(points[i].y+yoffset) );
 
-    cairo_stroke ( m_cairo);
+    gs_cairo->cairo_stroke ( m_cairo);
 }
 
 void wxGtkPrintDC::DoDrawPolygon(int n, wxPoint points[], wxCoord xoffset, wxCoord yoffset, int fillStyle)
 {
     if (n==0) return;
 
-    cairo_save(m_cairo);
+    gs_cairo->cairo_save(m_cairo);
     if (fillStyle == wxWINDING_RULE)
-        cairo_set_fill_rule( m_cairo, CAIRO_FILL_RULE_WINDING);
+        gs_cairo->cairo_set_fill_rule( m_cairo, CAIRO_FILL_RULE_WINDING);
     else
-        cairo_set_fill_rule( m_cairo, CAIRO_FILL_RULE_EVEN_ODD);
+        gs_cairo->cairo_set_fill_rule( m_cairo, CAIRO_FILL_RULE_EVEN_ODD);
 
     int x = points[0].x + xoffset;
     int y = points[0].y + yoffset;
-    cairo_new_path(m_cairo);
-    cairo_move_to( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
+    gs_cairo->cairo_new_path(m_cairo);
+    gs_cairo->cairo_move_to( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
     int i;
     for (i = 1; i < n; i++)
     {
         int x = points[i].x + xoffset;
         int y = points[i].y + yoffset;
-        cairo_line_to( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
+        gs_cairo->cairo_line_to( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y) );
     }
-    cairo_close_path(m_cairo);
+    gs_cairo->cairo_close_path(m_cairo);
 
     SetBrush( m_brush );
-    cairo_fill_preserve( m_cairo );
+    gs_cairo->cairo_fill_preserve( m_cairo );
 
     SetPen (m_pen);
-    cairo_stroke( m_cairo );
+    gs_cairo->cairo_stroke( m_cairo );
 
     CalcBoundingBox( x, y );
 
-    cairo_restore(m_cairo);
+    gs_cairo->cairo_restore(m_cairo);
 }
 
 void wxGtkPrintDC::DoDrawPolyPolygon(int n, int count[], wxPoint points[], wxCoord xoffset, wxCoord yoffset, int fillStyle)
@@ -1384,13 +1387,13 @@
 
 void wxGtkPrintDC::DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 {
-    cairo_rectangle ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(width), LogicalToDeviceYRel(height));
+    gs_cairo->cairo_rectangle ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(width), LogicalToDeviceYRel(height));
 
     SetBrush( m_brush );
-    cairo_fill_preserve( m_cairo );
+    gs_cairo->cairo_fill_preserve( m_cairo );
 
     SetPen (m_pen);
-    cairo_stroke( m_cairo );
+    gs_cairo->cairo_stroke( m_cairo );
 
     CalcBoundingBox( x, y );
     CalcBoundingBox( x + width, y + height );
@@ -1407,35 +1410,35 @@
 
     wxCoord rad = (wxCoord) radius;
 
-    cairo_new_path(m_cairo);
-    cairo_move_to(m_cairo,LogicalToDeviceX(x + rad),LogicalToDeviceY(y));
-    cairo_curve_to(m_cairo,
+    gs_cairo->cairo_new_path(m_cairo);
+    gs_cairo->cairo_move_to(m_cairo,LogicalToDeviceX(x + rad),LogicalToDeviceY(y));
+    gs_cairo->cairo_curve_to(m_cairo,
                                 LogicalToDeviceX(x + rad),LogicalToDeviceY(y),
                                 LogicalToDeviceX(x),LogicalToDeviceY(y),
                                 LogicalToDeviceX(x),LogicalToDeviceY(y + rad));
-    cairo_line_to(m_cairo,LogicalToDeviceX(x),LogicalToDeviceY(y + height - rad));
-    cairo_curve_to(m_cairo,
+    gs_cairo->cairo_line_to(m_cairo,LogicalToDeviceX(x),LogicalToDeviceY(y + height - rad));
+    gs_cairo->cairo_curve_to(m_cairo,
                                 LogicalToDeviceX(x),LogicalToDeviceY(y + height - rad),
                                 LogicalToDeviceX(x),LogicalToDeviceY(y + height),
                                 LogicalToDeviceX(x + rad),LogicalToDeviceY(y + height));
-    cairo_line_to(m_cairo,LogicalToDeviceX(x + width - rad),LogicalToDeviceY(y + height));
-    cairo_curve_to(m_cairo,
+    gs_cairo->cairo_line_to(m_cairo,LogicalToDeviceX(x + width - rad),LogicalToDeviceY(y + height));
+    gs_cairo->cairo_curve_to(m_cairo,
                                 LogicalToDeviceX(x + width - rad),LogicalToDeviceY(y + height),
                                 LogicalToDeviceX(x + width),LogicalToDeviceY(y + height),
                                 LogicalToDeviceX(x + width),LogicalToDeviceY(y + height - rad));
-    cairo_line_to(m_cairo,LogicalToDeviceX(x + width),LogicalToDeviceY(y + rad));
-    cairo_curve_to(m_cairo,
+    gs_cairo->cairo_line_to(m_cairo,LogicalToDeviceX(x + width),LogicalToDeviceY(y + rad));
+    gs_cairo->cairo_curve_to(m_cairo,
                                 LogicalToDeviceX(x + width),LogicalToDeviceY(y + rad),
                                 LogicalToDeviceX(x + width),LogicalToDeviceY(y),
                                 LogicalToDeviceX(x + width - rad),LogicalToDeviceY(y));
-    cairo_line_to(m_cairo,LogicalToDeviceX(x + rad),LogicalToDeviceY(y));
-    cairo_close_path(m_cairo);
+    gs_cairo->cairo_line_to(m_cairo,LogicalToDeviceX(x + rad),LogicalToDeviceY(y));
+    gs_cairo->cairo_close_path(m_cairo);
 
     SetBrush(m_brush);
-    cairo_fill_preserve(m_cairo);
+    gs_cairo->cairo_fill_preserve(m_cairo);
 
     SetPen(m_pen);
-    cairo_stroke(m_cairo);
+    gs_cairo->cairo_stroke(m_cairo);
 
     CalcBoundingBox(x,y);
     CalcBoundingBox(x+width,y+height);
@@ -1443,22 +1446,22 @@
 
 void wxGtkPrintDC::DoDrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 {
-    cairo_save (m_cairo);
+    gs_cairo->cairo_save (m_cairo);
 
-    cairo_translate (m_cairo, LogicalToDeviceX((wxCoord) (x + width / 2.)), LogicalToDeviceY((wxCoord) (y + height / 2.)));
-    cairo_scale(m_cairo, 1, (double)LogicalToDeviceYRel(height)/(double)LogicalToDeviceXRel(width));
-    cairo_arc ( m_cairo, 0, 0, LogicalToDeviceXRel(width/2), 0, 2 * M_PI);
+    gs_cairo->cairo_translate (m_cairo, LogicalToDeviceX((wxCoord) (x + width / 2.)), LogicalToDeviceY((wxCoord) (y + height / 2.)));
+    gs_cairo->cairo_scale(m_cairo, 1, (double)LogicalToDeviceYRel(height)/(double)LogicalToDeviceXRel(width));
+    gs_cairo->cairo_arc ( m_cairo, 0, 0, LogicalToDeviceXRel(width/2), 0, 2 * M_PI);
 
     SetBrush( m_brush );
-    cairo_fill_preserve( m_cairo );
+    gs_cairo->cairo_fill_preserve( m_cairo );
 
     SetPen (m_pen);
-    cairo_stroke( m_cairo );
+    gs_cairo->cairo_stroke( m_cairo );
 
     CalcBoundingBox( x, y );
     CalcBoundingBox( x + width, y + height );
 
-    cairo_restore (m_cairo);
+    gs_cairo->cairo_restore (m_cairo);
 }
 
 #if wxUSE_SPLINES
@@ -1483,9 +1486,9 @@
     y3 =
          (double)(y1 + d) / 2;
 
-    cairo_new_path( m_cairo );
-    cairo_move_to( m_cairo, LogicalToDeviceX((wxCoord)x1), LogicalToDeviceY((wxCoord)y1) );
-    cairo_line_to( m_cairo, LogicalToDeviceX((wxCoord)x3), LogicalToDeviceY((wxCoord)y3) );
+    gs_cairo->cairo_new_path( m_cairo );
+    gs_cairo->cairo_move_to( m_cairo, LogicalToDeviceX((wxCoord)x1), LogicalToDeviceY((wxCoord)y1) );
+    gs_cairo->cairo_line_to( m_cairo, LogicalToDeviceX((wxCoord)x3), LogicalToDeviceY((wxCoord)y3) );
 
     CalcBoundingBox( (wxCoord)x1, (wxCoord)y1 );
     CalcBoundingBox( (wxCoord)x3, (wxCoord)y3 );
@@ -1504,7 +1507,7 @@
         x3 = (double)(x2 + c) / 2;
         y3 = (double)(y2 + d) / 2;
 
-        cairo_curve_to(m_cairo,
+        gs_cairo->cairo_curve_to(m_cairo,
             LogicalToDeviceX((wxCoord)x1), LogicalToDeviceY((wxCoord)y1),
             LogicalToDeviceX((wxCoord)x2), LogicalToDeviceY((wxCoord)y2),
             LogicalToDeviceX((wxCoord)x3), LogicalToDeviceY((wxCoord)y3) );
@@ -1515,9 +1518,9 @@
         node = node->GetNext();
     }
 
-    cairo_line_to ( m_cairo, LogicalToDeviceX((wxCoord)c), LogicalToDeviceY((wxCoord)d) );
+    gs_cairo->cairo_line_to ( m_cairo, LogicalToDeviceX((wxCoord)c), LogicalToDeviceY((wxCoord)d) );
 
-    cairo_stroke( m_cairo );
+    gs_cairo->cairo_stroke( m_cairo );
 }
 #endif // wxUSE_SPLINES
 
@@ -1565,7 +1568,7 @@
     // then we'll use a different format and iterator than if it doesn't.
     if (bmpSource.HasAlpha() || mask)
     {
-        surface = cairo_image_surface_create_for_data(
+        surface = gs_cairo->cairo_image_surface_create_for_data(
             buffer, CAIRO_FORMAT_ARGB32, bw, bh, bw*4);
         wxAlphaPixelData pixData(bmpSource, wxPoint(0,0), wxSize(bw, bh));
         wxCHECK_RET( pixData, wxT("Failed to gain raw access to bitmap data."));
@@ -1598,7 +1601,7 @@
     }
     else  // no alpha
     {
-        surface = cairo_image_surface_create_for_data(
+        surface = gs_cairo->cairo_image_surface_create_for_data(
             buffer, CAIRO_FORMAT_RGB24, bw, bh, bw*4);
         wxNativePixelData pixData(bmpSource, wxPoint(0,0), wxSize(bw, bh));
         wxCHECK_RET( pixData, wxT("Failed to gain raw access to bitmap data."));
@@ -1624,29 +1627,29 @@
     }
 
 
-    cairo_save(m_cairo);
+    gs_cairo->cairo_save(m_cairo);
     // In case we're scaling the image by using a width and height different
     // than the bitmap's size create a pattern transformation on the surface and
     // draw the transformed pattern.
-    cairo_pattern_t* pattern = cairo_pattern_create_for_surface(surface);
+    cairo_pattern_t* pattern = gs_cairo->cairo_pattern_create_for_surface(surface);
 
     // Prepare to draw the image.
-    cairo_translate(m_cairo, x, y);
-    cairo_set_source(m_cairo, pattern);
+    gs_cairo->cairo_translate(m_cairo, x, y);
+    gs_cairo->cairo_set_source(m_cairo, pattern);
     // Use the original size here since the context is scaled already.
-    cairo_rectangle(m_cairo, 0, 0, bw, bh);
+    gs_cairo->cairo_rectangle(m_cairo, 0, 0, bw, bh);
     // Fill the rectangle using the pattern.
-    cairo_fill(m_cairo);
+    gs_cairo->cairo_fill(m_cairo);
 
     // Clean up.
-    cairo_pattern_destroy(pattern);
-    cairo_surface_destroy(surface);
+    gs_cairo->cairo_pattern_destroy(pattern);
+    gs_cairo->cairo_surface_destroy(surface);
     delete [] buffer;
 
     CalcBoundingBox(0,0);
     CalcBoundingBox(bw,bh);
 
-    cairo_restore(m_cairo);
+    gs_cairo->cairo_restore(m_cairo);
 }
 
 // wxGtkPrintDC has a constant resolution of 72dpi. If we want an higher resolution for printing
@@ -1670,7 +1673,7 @@
     // then we'll use a different format and iterator than if it doesn't.
     if (bmpSource.HasAlpha() || bmpSource.GetMask())
     {
-        surface = cairo_image_surface_create_for_data(
+        surface = gs_cairo->cairo_image_surface_create_for_data(
             buffer, CAIRO_FORMAT_ARGB32, bw, bh, bw*4);
         wxAlphaPixelData pixData(bmpSource, wxPoint(0,0), wxSize(bw, bh));
         wxCHECK_RET( pixData, wxT("Failed to gain raw access to bitmap data."));
@@ -1703,7 +1706,7 @@
     }
     else  // no alpha
     {
-        surface = cairo_image_surface_create_for_data(
+        surface = gs_cairo->cairo_image_surface_create_for_data(
             buffer, CAIRO_FORMAT_RGB24, bw, bh, bw*4);
         wxNativePixelData pixData(bmpSource, wxPoint(0,0), wxSize(bw, bh));
         wxCHECK_RET( pixData, wxT("Failed to gain raw access to bitmap data."));
@@ -1729,10 +1732,10 @@
     }
 
 
-    cairo_save(m_cairo);
+    gs_cairo->cairo_save(m_cairo);
 
     // Prepare to draw the image.
-    cairo_translate(m_cairo, x, y);
+    gs_cairo->cairo_translate(m_cairo, x, y);
 
     // In case we're scaling the image by using a width and height different
     // than the bitmap's size create a pattern transformation on the surface and
@@ -1740,27 +1743,27 @@
     cairo_filter_t filter;
     if (quality == wxIMAGE_QUALITY_HIGH) filter = CAIRO_FILTER_BILINEAR;
     else filter = CAIRO_FILTER_GOOD;
-    cairo_pattern_t* pattern = cairo_pattern_create_for_surface(surface);
-    cairo_pattern_set_filter(pattern,filter);
+    cairo_pattern_t* pattern = gs_cairo->cairo_pattern_create_for_surface(surface);
+    gs_cairo->cairo_pattern_set_filter(pattern,filter);
     wxDouble scaleX = (wxDouble) w / (wxDouble) bw;
     wxDouble scaleY = (wxDouble) h / (wxDouble) bh;
-    cairo_scale(m_cairo, scaleX, scaleY);
+    gs_cairo->cairo_scale(m_cairo, scaleX, scaleY);
 
-    cairo_set_source(m_cairo, pattern);
+    gs_cairo->cairo_set_source(m_cairo, pattern);
     // Use the original size here since the context is scaled already.
-    cairo_rectangle(m_cairo, 0, 0, bw, bh);
+    gs_cairo->cairo_rectangle(m_cairo, 0, 0, bw, bh);
     // Fill the rectangle using the pattern.
-    cairo_fill(m_cairo);
+    gs_cairo->cairo_fill(m_cairo);
 
     // Clean up.
-    cairo_pattern_destroy(pattern);
-    cairo_surface_destroy(surface);
+    gs_cairo->cairo_pattern_destroy(pattern);
+    gs_cairo->cairo_surface_destroy(surface);
     delete [] buffer;
 
     CalcBoundingBox(0,0);
     CalcBoundingBox(bw,bh);
 
-    cairo_restore(m_cairo);
+    gs_cairo->cairo_restore(m_cairo);
 }
 
 void wxGtkPrintDC::DoDrawText(const wxString& text, wxCoord x, wxCoord y )
@@ -1812,7 +1815,7 @@
             double greenPS = (double)(green) / 255.0;
             double alphaPS = (double)(alpha) / 255.0;
 
-            cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
+            gs_cairo->cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
 
             m_currentRed = red;
             m_currentBlue = blue;
@@ -1852,24 +1855,24 @@
             double greenPS = (double)(green) / 255.0;
             double alphaPS = (double)(alpha) / 255.0;
 
-            cairo_save(m_cairo);
-            cairo_translate(m_cairo, x, y);
-            cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
-            cairo_rotate(m_cairo,angle*DEG2RAD);
-            cairo_rectangle(m_cairo, 0, 0, w, h);
-            cairo_fill(m_cairo);
-            cairo_restore(m_cairo);
+            gs_cairo->cairo_save(m_cairo);
+            gs_cairo->cairo_translate(m_cairo, x, y);
+            gs_cairo->cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
+            gs_cairo->cairo_rotate(m_cairo,angle*DEG2RAD);
+            gs_cairo->cairo_rectangle(m_cairo, 0, 0, w, h);
+            gs_cairo->cairo_fill(m_cairo);
+            gs_cairo->cairo_restore(m_cairo);
         }
 
         // Draw layout.
-        cairo_move_to (m_cairo, x, y);
+        gs_cairo->cairo_move_to (m_cairo, x, y);
         if (fabs(angle) > 0.00001)
         {
-            cairo_save( m_cairo );
-            cairo_rotate( m_cairo, angle*DEG2RAD );
+            gs_cairo->cairo_save( m_cairo );
+            gs_cairo->cairo_rotate( m_cairo, angle*DEG2RAD );
             pango_cairo_update_layout (m_cairo, m_layout);
             pango_cairo_show_layout (m_cairo, m_layout);
-            cairo_restore( m_cairo );
+            gs_cairo->cairo_restore( m_cairo );
         }
         else
         {
@@ -1899,24 +1902,24 @@
             double greenPS = (double)(green) / 255.0;
             double alphaPS = (double)(alpha) / 255.0;
 
-            cairo_save(m_cairo);
-            cairo_translate(m_cairo, x, y);
-            cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
-            cairo_rotate(m_cairo,angle*DEG2RAD);
-            cairo_rectangle(m_cairo, 0, 0, w, h);
-            cairo_fill(m_cairo);
-            cairo_restore(m_cairo);
+            gs_cairo->cairo_save(m_cairo);
+            gs_cairo->cairo_translate(m_cairo, x, y);
+            gs_cairo->cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
+            gs_cairo->cairo_rotate(m_cairo,angle*DEG2RAD);
+            gs_cairo->cairo_rectangle(m_cairo, 0, 0, w, h);
+            gs_cairo->cairo_fill(m_cairo);
+            gs_cairo->cairo_restore(m_cairo);
         }
 
         // Draw layout.
-        cairo_move_to (m_cairo, x, y);
+        gs_cairo->cairo_move_to (m_cairo, x, y);
         if (fabs(angle) > 0.00001)
         {
-            cairo_save( m_cairo );
-            cairo_rotate( m_cairo, angle*DEG2RAD );
+            gs_cairo->cairo_save( m_cairo );
+            gs_cairo->cairo_rotate( m_cairo, angle*DEG2RAD );
             pango_cairo_update_layout (m_cairo, m_layout);
             pango_cairo_show_layout (m_cairo, m_layout);
-            cairo_restore( m_cairo );
+            gs_cairo->cairo_restore( m_cairo );
         }
         else
         {
@@ -1937,11 +1940,11 @@
 
 void wxGtkPrintDC::Clear()
 {
-    cairo_save(m_cairo);
-    cairo_set_operator (m_cairo, CAIRO_OPERATOR_SOURCE);
+    gs_cairo->cairo_save(m_cairo);
+    gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_SOURCE);
     SetBrush(m_backgroundBrush);
-    cairo_paint(m_cairo);
-    cairo_restore(m_cairo);
+    gs_cairo->cairo_paint(m_cairo);
+    gs_cairo->cairo_restore(m_cairo);
 }
 
 void wxGtkPrintDC::SetFont( const wxFont& font )
@@ -1968,7 +1971,7 @@
     double width = (double) m_pen.GetWidth();
     if (width == 0) width = 0.1;
 
-    cairo_set_line_width( m_cairo, LogicalToDeviceXRel( (wxCoord) (1000 * width )) / 1000.0f );
+    gs_cairo->cairo_set_line_width( m_cairo, LogicalToDeviceXRel( (wxCoord) (1000 * width )) / 1000.0f );
     static const double dotted[] = {2.0, 5.0};
     static const double short_dashed[] = {4.0, 4.0};
     static const double long_dashed[] = {4.0, 8.0};
@@ -1976,10 +1979,10 @@
 
     switch (m_pen.GetStyle())
     {
-        case wxDOT:           cairo_set_dash( m_cairo, dotted, 1, 0 ); break;
-        case wxSHORT_DASH:    cairo_set_dash( m_cairo, short_dashed, 1, 0 ); break;
-        case wxLONG_DASH:     cairo_set_dash( m_cairo, long_dashed, 1, 0 ); break;
-        case wxDOT_DASH:      cairo_set_dash( m_cairo, dotted_dashed, 3, 0 );  break;
+        case wxDOT:           gs_cairo->cairo_set_dash( m_cairo, dotted, 1, 0 ); break;
+        case wxSHORT_DASH:    gs_cairo->cairo_set_dash( m_cairo, short_dashed, 1, 0 ); break;
+        case wxLONG_DASH:     gs_cairo->cairo_set_dash( m_cairo, long_dashed, 1, 0 ); break;
+        case wxDOT_DASH:      gs_cairo->cairo_set_dash( m_cairo, dotted_dashed, 3, 0 );  break;
         case wxUSER_DASH:
         {
             wxDash *wx_dashes;
@@ -1988,29 +1991,29 @@
             int i;
             for (i = 0; i < num; ++i)
                 g_dashes[i] = (gdouble) wx_dashes[i];
-            cairo_set_dash( m_cairo, g_dashes, num, 0);
+            gs_cairo->cairo_set_dash( m_cairo, g_dashes, num, 0);
             g_free( g_dashes );
         }
         break;
         case wxSOLID:
         case wxTRANSPARENT:
-        default:              cairo_set_dash( m_cairo, NULL, 0, 0 );   break;
+        default:              gs_cairo->cairo_set_dash( m_cairo, NULL, 0, 0 );   break;
     }
 
     switch (m_pen.GetCap())
     {
-        case wxCAP_PROJECTING:  cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_SQUARE); break;
-        case wxCAP_BUTT:        cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_BUTT); break;
+        case wxCAP_PROJECTING:  gs_cairo->cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_SQUARE); break;
+        case wxCAP_BUTT:        gs_cairo->cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_BUTT); break;
         case wxCAP_ROUND:
-        default:                cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_ROUND); break;
+        default:                gs_cairo->cairo_set_line_cap (m_cairo, CAIRO_LINE_CAP_ROUND); break;
     }
 
     switch (m_pen.GetJoin())
     {
-        case wxJOIN_BEVEL:  cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_BEVEL); break;
-        case wxJOIN_MITER:  cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_MITER); break;
+        case wxJOIN_BEVEL:  gs_cairo->cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_BEVEL); break;
+        case wxJOIN_MITER:  gs_cairo->cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_MITER); break;
         case wxJOIN_ROUND:
-        default:            cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_ROUND); break;
+        default:            gs_cairo->cairo_set_line_join (m_cairo, CAIRO_LINE_JOIN_ROUND); break;
     }
 
     unsigned char red = m_pen.GetColour().Red();
@@ -2025,7 +2028,7 @@
         double greenPS = (double)(green) / 255.0;
         double alphaPS = (double)(alpha) / 255.0;
 
-        cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
+        gs_cairo->cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
 
         m_currentRed = red;
         m_currentBlue = blue;
@@ -2053,7 +2056,7 @@
 
     if (!(red == m_currentRed && green == m_currentGreen && blue == m_currentBlue && alpha == m_currentAlpha))
     {
-        cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
+        gs_cairo->cairo_set_source_rgba( m_cairo, redPS, greenPS, bluePS, alphaPS );
 
         m_currentRed = red;
         m_currentBlue = blue;
@@ -2065,85 +2068,85 @@
     {
         cairo_t * cr;
         cairo_surface_t *surface;
-        surface = cairo_surface_create_similar(cairo_get_target(m_cairo),CAIRO_CONTENT_COLOR_ALPHA,10,10);
-        cr = cairo_create(surface);
-        cairo_set_line_cap(cr, CAIRO_LINE_CAP_SQUARE);
-        cairo_set_line_width(cr, 1);
-        cairo_set_line_join(cr,CAIRO_LINE_JOIN_MITER);
+        surface = gs_cairo->cairo_surface_create_similar(gs_cairo->cairo_get_target(m_cairo),CAIRO_CONTENT_COLOR_ALPHA,10,10);
+        cr = gs_cairo->cairo_create(surface);
+        gs_cairo->cairo_set_line_cap(cr, CAIRO_LINE_CAP_SQUARE);
+        gs_cairo->cairo_set_line_width(cr, 1);
+        gs_cairo->cairo_set_line_join(cr,CAIRO_LINE_JOIN_MITER);
 
         switch (m_brush.GetStyle())
         {
             case wxCROSS_HATCH:
-                cairo_move_to(cr, 5, 0);
-                cairo_line_to(cr, 5, 10);
-                cairo_move_to(cr, 0, 5);
-                cairo_line_to(cr, 10, 5);
+                gs_cairo->cairo_move_to(cr, 5, 0);
+                gs_cairo->cairo_line_to(cr, 5, 10);
+                gs_cairo->cairo_move_to(cr, 0, 5);
+                gs_cairo->cairo_line_to(cr, 10, 5);
                 break;
             case wxBDIAGONAL_HATCH:
-                cairo_move_to(cr, 0, 10);
-                cairo_line_to(cr, 10, 0);
+                gs_cairo->cairo_move_to(cr, 0, 10);
+                gs_cairo->cairo_line_to(cr, 10, 0);
                 break;
             case wxFDIAGONAL_HATCH:
-                cairo_move_to(cr, 0, 0);
-                cairo_line_to(cr, 10, 10);
+                gs_cairo->cairo_move_to(cr, 0, 0);
+                gs_cairo->cairo_line_to(cr, 10, 10);
                 break;
             case wxCROSSDIAG_HATCH:
-                cairo_move_to(cr, 0, 0);
-                cairo_line_to(cr, 10, 10);
-                cairo_move_to(cr, 10, 0);
-                cairo_line_to(cr, 0, 10);
+                gs_cairo->cairo_move_to(cr, 0, 0);
+                gs_cairo->cairo_line_to(cr, 10, 10);
+                gs_cairo->cairo_move_to(cr, 10, 0);
+                gs_cairo->cairo_line_to(cr, 0, 10);
                 break;
             case wxHORIZONTAL_HATCH:
-                cairo_move_to(cr, 0, 5);
-                cairo_line_to(cr, 10, 5);
+                gs_cairo->cairo_move_to(cr, 0, 5);
+                gs_cairo->cairo_line_to(cr, 10, 5);
                 break;
             case wxVERTICAL_HATCH:
-                cairo_move_to(cr, 5, 0);
-                cairo_line_to(cr, 5, 10);
+                gs_cairo->cairo_move_to(cr, 5, 0);
+                gs_cairo->cairo_line_to(cr, 5, 10);
                 break;
             default:
                 wxFAIL_MSG(_("Couldn't get hatch style from wxBrush."));
         }
 
-        cairo_set_source_rgba(cr, redPS, greenPS, bluePS, alphaPS);
-        cairo_stroke (cr);
+        gs_cairo->cairo_set_source_rgba(cr, redPS, greenPS, bluePS, alphaPS);
+        gs_cairo->cairo_stroke (cr);
 
-        cairo_destroy(cr);
-        cairo_pattern_t * pattern = cairo_pattern_create_for_surface (surface);
-        cairo_surface_destroy(surface);
-        cairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);
-        cairo_set_source(m_cairo, pattern);
-        cairo_pattern_destroy(pattern);
+        gs_cairo->cairo_destroy(cr);
+        cairo_pattern_t * pattern = gs_cairo->cairo_pattern_create_for_surface (surface);
+        gs_cairo->cairo_surface_destroy(surface);
+        gs_cairo->cairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);
+        gs_cairo->cairo_set_source(m_cairo, pattern);
+        gs_cairo->cairo_pattern_destroy(pattern);
     }
 }
 
 void wxGtkPrintDC::SetLogicalFunction( int function )
 {
     if (function == wxCLEAR)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_CLEAR);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_CLEAR);
     else if (function == wxOR)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_OUT);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_OUT);
     else if (function == wxNO_OP)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_DEST);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_DEST);
     else if (function == wxAND)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_ADD);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_ADD);
     else if (function == wxSET)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_SATURATE);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_SATURATE);
     else if (function == wxXOR)
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_XOR);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_XOR);
     else // wxCOPY or anything else.
-        cairo_set_operator (m_cairo, CAIRO_OPERATOR_SOURCE);
+        gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_SOURCE);
 }
 
 void wxGtkPrintDC::SetBackground( const wxBrush& brush )
 {
     m_backgroundBrush = brush;
-    cairo_save(m_cairo);
-    cairo_set_operator (m_cairo, CAIRO_OPERATOR_DEST_OVER);
+    gs_cairo->cairo_save(m_cairo);
+    gs_cairo->cairo_set_operator (m_cairo, CAIRO_OPERATOR_DEST_OVER);
 
     SetBrush(m_backgroundBrush);
-    cairo_paint(m_cairo);
-    cairo_restore(m_cairo);
+    gs_cairo->cairo_paint(m_cairo);
+    gs_cairo->cairo_restore(m_cairo);
 }
 
 void wxGtkPrintDC::SetBackgroundMode(int mode)
@@ -2154,13 +2157,13 @@
 
 void wxGtkPrintDC::DoSetClippingRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 {
-    cairo_rectangle ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(width), LogicalToDeviceYRel(height));
-    cairo_clip(m_cairo);
+    gs_cairo->cairo_rectangle ( m_cairo, LogicalToDeviceX(x), LogicalToDeviceY(y), LogicalToDeviceXRel(width), LogicalToDeviceYRel(height));
+    gs_cairo->cairo_clip(m_cairo);
 }
 
 void wxGtkPrintDC::DestroyClippingRegion()
 {
-    cairo_reset_clip(m_cairo);
+    gs_cairo->cairo_reset_clip(m_cairo);
 }
 
 bool wxGtkPrintDC::StartDoc(const wxString& message)

 	  	 

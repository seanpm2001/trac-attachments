Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	£¨ÐÞ¶©°æ 47919£©
+++ src/generic/datavgen.cpp	£¨¹¤×÷¿½±´£©
@@ -66,7 +66,7 @@
 // wxDataViewHeaderWindow
 //-----------------------------------------------------------------------------
 
-#define USE_NATIVE_HEADER_WINDOW    1
+#define USE_NATIVE_HEADER_WINDOW    0
 
 // NB: for some reason, this class must be dllexport'ed or we get warnings from
 //     MSVC in DLL build
@@ -263,7 +263,7 @@
 class wxDataViewTreeNode
 {
 public:
-    wxDataViewTreeNode( wxDataViewTreeNode * parent )
+    wxDataViewTreeNode( wxDataViewTreeNode * parent = NULL )
         :leaves( wxGenericTreeModelItemCmp ),
          nodes(wxGenericTreeModelNodeCmp)
     	{ this->parent = parent;
@@ -1191,6 +1191,14 @@
         hdi.cchTextMax = sizeof(hdi.pszText)/sizeof(hdi.pszText[0]);
         hdi.fmt = HDF_LEFT | HDF_STRING;
 
+        //sorting support
+        if(model && model->GetSortingColumn() == i)
+        {
+            //The Microsoft Comctrl32.dll 6.0 support SORTUP/SORTDOWN, but they are not default
+            //see http://msdn2.microsoft.com/en-us/library/ms649534.aspx for more detail
+            //hdi.fmt |= model->GetSortOrderAscending()? HDF_SORTUP:HDF_SORTDOWN;
+        }
+
         // lParam is reserved for application's use:
         // we store there the column index to use it later in MSWOnNotify
         // (since columns may have been hidden)
@@ -1327,7 +1335,7 @@
                         else if(model)
                         {
                             model->SetSortingColumn(idx);
-                            model->SetSortOrderAscending(true);
+                            model->SetSortOrderAscending(col->IsSortOrderAscending());
                         }
                     }
                     UpdateDisplay();
@@ -1491,7 +1499,7 @@
         int ch = h;
 
         wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE;
-        if (col->IsSortable())
+        if (col->IsSortable() && GetOwner()->GetModel()->GetSortingColumn() == i)
         {
             if (col->IsSortOrderAscending())
                 sortArrow = wxHDR_SORT_ICON_UP;
@@ -1644,6 +1652,30 @@
             }
             else    // click on a column
             {
+                wxDataViewModel * model = GetOwner()->GetModel();
+                //Left click the header
+                if(event.LeftDown())
+                {
+                    wxDataViewColumn *col = GetColumn(m_column);
+                    if(col->IsSortable())
+                    {
+                        if(model && model->GetSortingColumn() == m_column)
+                        {
+                            bool order = col->IsSortOrderAscending();
+                            col->SetSortOrder(!order);
+                            model->SetSortOrderAscending(!order);
+                        }
+                        else if(model)
+                        {
+                            model->SetSortingColumn(m_column);
+                            model->SetSortOrderAscending(col->IsSortOrderAscending());
+                        }
+                    }
+                    UpdateDisplay();
+                    if(model)
+                        model->Resort();
+                }
+
                 wxEventType evt = event.LeftDown() ?
                         wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK :
                         wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK;
@@ -2800,7 +2832,6 @@
 
     //Find the item along the parent-chain.
     //This algorithm is designed to speed up the node-finding method
-    bool found = true;
     wxDataViewTreeNode * node = m_root;
     for( ItemList::Node * n = list.GetFirst(); n; n = n->GetNext() )
     {
@@ -2811,6 +2842,14 @@
 
             int len = node->GetNodeNumber();
             wxDataViewTreeNodes nodes = node->GetNodes();
+            //The wxSortedArray search a node in binary search, so using Item() is more efficient
+            wxDataViewTreeNode temp;
+            temp.SetItem(*(n->GetData()));
+            int index = nodes.Index( &temp );
+            if( index == wxNOT_FOUND )
+                return NULL;
+            node = nodes[index];
+#if 0
             int j = 0;
             for( ; j < len; j ++)
             {
@@ -2826,6 +2865,7 @@
                 found = false;
                 return NULL;
             }
+#endif
         }
         else
             return NULL;
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	£¨ÐÞ¶©°æ 47919£©
+++ samples/dataview/dataview.cpp	£¨¹¤×÷¿½±´£©
@@ -164,6 +164,11 @@
         
         // notify control
         ItemDeleted( parent, item );
+        //We must delete the node after we call ItemDeleted
+        //The reason is that:
+        //When we use wxSortedArray, the array find a node through binary search for speed.
+        //And when the array is searching for some node, it call the model's compare function.
+        //The compare function need the node to be compared. So we should delete the node later, here.
         node->GetParent()->GetChildren().Remove( node );
         delete node;
     }

 	  	 

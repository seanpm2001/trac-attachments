--- textfile.cpp	2007-01-10 15:49:35.000000000 +0000
+++ textfile.cpp	2007-01-11 12:26:24.000000000 +0000
@@ -99,10 +99,65 @@
     // in memory by wxTextFile anyhow, it shouldn't be a big problem to read
     // the file entirely
-    const size_t bufSize = (size_t)(m_file.Length() + 4 /* for trailing NULs */ );
-    size_t bufPos = 0;
-    wxCharBuffer buf(bufSize - 1 /* it adds 1 internally */);
-
+    size_t bufSize, bufPos = 0;
     char block[1024];
-    for ( bool eof = false; !eof; )
+    wxCharBuffer buf;
+    size_t fileLength;
+
+    {
+    wxLogNull AvoidErrorMessageIfFileIsNonSeekable;
+    fileLength = (size_t)m_file.Length();
+    }
+    // If the file is non-seekable, this will return either wxInvalidOffset or 0
+    if ( fileLength == (size_t)wxInvalidOffset
+         || fileLength == 0 )
+    {
+        // So read the file chunk by chunk
+
+        for ( ; ; )
+        {
+            ssize_t nRead = m_file.Read(block, WXSIZEOF(block));
+            if ( nRead == wxInvalidOffset )
+            {
+                // read error (error message already given in wxFile::Read)
+                return false;
+            }
+
+            if ( nRead == 0 )
+            {
+                // If no bytes have been read, presumably this is a valid-but-empty file
+                if ( bufPos == 0 )
+                    return true;
+                // Otherwise we've finished reading the file
+                break;
+            }
+
+            if ( !buf.extend( bufPos + nRead - 1 /* it adds 1 internally */ ) )
+            {
+                free(buf.release());
+                wxCHECK_MSG( false, false, _T("Memory alloc failure in wxTextFile?") );
+            }
+
+            // append to the buffer
+            memcpy(buf.data() + bufPos, block, nRead);
+            bufPos += nRead;
+        }
+
+    // Make room for trailing NULs
+    if ( !buf.extend( bufPos + 3 /* it adds 1 internally */) )
+    {
+            free(buf.release());
+            wxCHECK_MSG( false, false, _T("Memory alloc failure in wxTextFile?") );
+    }
+    bufPos += 4;
+
+    bufSize = bufPos;
+    }
+    else
+    {
+        bufSize = fileLength + 4 /* for trailing NULs */;
+        if ( !buf.extend(bufSize - 1 /* it adds 1 internally */) )
+            return false;
+
+        for ( ; ; )
     {
         // try to read up to the size of the entire block
@@ -126,8 +181,9 @@
         bufPos += nRead;
     }
+    }
 
     const wxString str(buf, conv, bufPos);
 
-    // this doesn't risk to happen in ANSI build
+    // there's no risk of this happening in ANSI build
 #if wxUSE_UNICODE
     if ( bufSize > 4 && str.empty() )

 	  	 

diff -uNr ./wxWidgets/docs/doxygen/overviews/xrc_format.h ./wxWidgets2/docs/doxygen/overviews/xrc_format.h
--- ./wxWidgets/docs/doxygen/overviews/xrc_format.h	2013-11-09 19:27:02.422612800 -0600
+++ ./wxWidgets2/docs/doxygen/overviews/xrc_format.h	2013-11-09 19:00:23.590662500 -0600
@@ -1488,13 +1488,26 @@
 </object>
 @endcode
 
-
 @subsubsection xrc_wxribbonbar wxRibbonBar
 
 @beginTable
 @hdr3col{property, type, description}
 @row3col{art-provider, @ref overview_xrcformat_type_string,
     One of @c default, @c aui or @c msw (default: @c default).}
+@row3col{art-colour-primary, @ref overview_xrcformat_type_colour,
+    Primary colour for the art-provider colour scheme (default: @c default).}
+@row3col{art-colour-secondary, @ref overview_xrcformat_type_colour,
+    Secondary colour for the art-provider colour scheme (default: @c default).}
+@row3col{art-colour-tertiary, @ref overview_xrcformat_type_colour,
+    Tertiary colour for the art-provider colour scheme (default: @c default).}
+@row3col{art-provider, @ref overview_xrcformat_type_string,
+    One of @c default, @c aui or @c msw (default: @c default).}
+@row3col{active-page, integer,
+    Sets the initial active ribbon page (default: @c default).}
+@row3col{show-panels, @ref overview_xrcformat_type_bool,
+    Whether the ribbon bar should show panels to begin with (default: true).}
+@row3col{tab-ctrl-margins, @ref overview_xrcformat_type_size,
+    Size of the tab margins, x and y as left and right (default: @c default).}
 @endTable
 
 A wxRibbonBar may have @ref xrc_wxribbonpage child objects. The @c page
@@ -1516,6 +1529,39 @@
             </object>
         </object>
     </object>
+
+    <object class="page" name="EditPage">
+        <label>Edit</label>
+        <object class="panel">
+            <label>Basic</label>
+            <object class="wxRibbonToolBar">
+                <object class="tool" name="Undo">
+                    <bitmap>undo.xpm</bitmap>
+                    <label>Undo</label>
+                </object>
+                <object class="tool" name="Redo">
+                    <bitmap>redo.xpm</bitmap>
+                    <label>Redo</label>
+                </object>
+
+                <object class="separator"/>
+
+                <object class="tool" name="Cut">
+                    <bitmap>cut.xpm</bitmap>
+                    <label>Cut</label>
+                </object>
+                <object class="tool" name="Copy">
+                    <bitmap>copy.xpm</bitmap>
+                    <label>Copy</label>
+                </object>
+                <object class="tool" name="Paste">
+                    <bitmap>paste.xpm</bitmap>
+                    <label>Paste</label>
+                </object>
+            </object>
+        </object>
+    </object>
+
     <object class="page" name="ViewPage">
         <label>View</label>
         <object class="panel">
@@ -1554,8 +1600,12 @@
 @hdr3col{property, type, description}
 @row3col{hybrid, @ref overview_xrcformat_type_bool,
     If true, the @c wxRIBBON_BUTTON_HYBRID kind is used (default: false).}
+@row3col{toggle, @ref overview_xrcformat_type_bool,
+    If true, the @c wxRIBBON_BUTTON_TOGGLE kind is used (default: false).}
 @row3col{disabled, @ref overview_xrcformat_type_bool,
     Whether the button should be disabled (default: false).}
+@row3col{checked, @ref overview_xrcformat_type_bool,
+    If a toggle button, whether it should be toggled on by default (default: false).}
 @row3col{label, @ref overview_xrcformat_type_text,
     Item's label (default: empty).}
 @row3col{bitmap, @ref overview_xrcformat_type_bitmap,
@@ -1566,6 +1616,41 @@
     Disabled bitmap (default: none).}
 @row3col{small-disabled-bitmap, @ref overview_xrcformat_type_bitmap,
     Small disabled bitmap (default: none).}
+@row3col{small-size, @ref overview_xrcformat_type_size,
+    Size of the small version of the button (default: @c default).}
+@row3col{help, @ref overview_xrcformat_type_text,
+    Item's help text (default: none).}
+@endTable
+
+@subsubsection xrc_wxribbontoolbar wxRibbonToolBar
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{rows, @ref overview_xrcformat_type_size,
+    Sets the minumum and maximum rows the toolbar should have (default: @c default).}
+@endTable
+
+wxRibbonToolBar can have child objects of the @c tool pseudo-class. It can also
+have the @c separator pseudo-class to insert a toolbar separator.
+
+@c tool objects have the following properties:
+
+@beginTable
+@hdr3col{property, type, description}
+@row3col{hybrid, @ref overview_xrcformat_type_bool,
+    If true, the @c wxRIBBON_BUTTON_HYBRID kind is used (default: false).}
+@row3col{toggle, @ref overview_xrcformat_type_bool,
+    If true, the @c wxRIBBON_BUTTON_TOGGLE kind is used (default: false).}
+@row3col{disabled, @ref overview_xrcformat_type_bool,
+    Whether the tool should be disabled (default: false).}
+@row3col{checked, @ref overview_xrcformat_type_bool,
+    If a toggle tool, whether it should be toggled on by default (default: false).}
+@row3col{label, @ref overview_xrcformat_type_text,
+    Item's label (default: empty).}
+@row3col{bitmap, @ref overview_xrcformat_type_bitmap,
+    Item's bitmap (default: none).}
+@row3col{disabled-bitmap, @ref overview_xrcformat_type_bitmap,
+    Disabled bitmap (default: none).}
 @row3col{help, @ref overview_xrcformat_type_text,
     Item's help text (default: none).}
 @endTable
@@ -1621,7 +1706,6 @@
 A wxRibbonPanel may have children of any type derived from wxRibbonControl or
 a single wxSizer child with non-ribbon windows in it.
 
-
 @subsubsection xrc_wxrichtextctrl wxRichTextCtrl
 
 @beginTable
diff -uNr ./wxWidgets/include/wx/xrc/xh_ribbon.h ./wxWidgets2/include/wx/xrc/xh_ribbon.h
--- ./wxWidgets/include/wx/xrc/xh_ribbon.h	2013-11-09 19:27:33.618490300 -0600
+++ ./wxWidgets2/include/wx/xrc/xh_ribbon.h	2013-11-09 10:26:04.487299900 -0600
@@ -1,47 +1,51 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        wx/xrc/xh_ribbon.h
-// Purpose:     XML resource handler for wxRibbon related classes
-// Author:      Armel Asselin
-// Created:     2010-04-23
-// Copyright:   (c) 2010 Armel Asselin
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-#ifndef _WX_XRC_XH_RIBBON_H_
-#define _WX_XRC_XH_RIBBON_H_
-
-#include "wx/xrc/xmlres.h"
-
-#if wxUSE_XRC && wxUSE_RIBBON
-
-class WXDLLIMPEXP_FWD_RIBBON wxRibbonControl;
-
-class WXDLLIMPEXP_RIBBON wxRibbonXmlHandler : public wxXmlResourceHandler
-{
-public:
-    wxRibbonXmlHandler();
-    virtual wxObject *DoCreateResource();
-    virtual bool CanHandle(wxXmlNode *node);
-
-private:
-    const wxClassInfo *m_isInside;
-
-    bool IsRibbonControl (wxXmlNode *node);
-
-    wxObject* Handle_buttonbar();
-    wxObject* Handle_button();
-    wxObject* Handle_control();
-    wxObject* Handle_page();
-    wxObject* Handle_gallery();
-    wxObject* Handle_galleryitem();
-    wxObject* Handle_panel();
-    wxObject* Handle_bar();
-
-    void Handle_RibbonArtProvider(wxRibbonControl *control);
-
-    wxDECLARE_DYNAMIC_CLASS(wxRibbonXmlHandler);
-};
-
-#endif // wxUSE_XRC && wxUSE_RIBBON
-
-#endif // _WX_XRC_XH_RIBBON_H_
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_ribbon.h
+// Purpose:     XML resource handler for wxRibbon related classes
+// Author:      Armel Asselin
+// Created:     2010-04-23
+// Copyright:   (c) 2010 Armel Asselin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XRC_XH_RIBBON_H_
+#define _WX_XRC_XH_RIBBON_H_
+
+#include <wx/xrc/xmlres.h>
+
+#if wxUSE_XRC && wxUSE_RIBBON
+
+class WXDLLIMPEXP_FWD_RIBBON wxRibbonControl;
+
+class WXDLLIMPEXP_RIBBON wxRibbonXmlHandler : public wxXmlResourceHandler
+{
+public:
+    wxRibbonXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    const wxClassInfo *m_isInside;
+
+    bool IsRibbonControl(wxXmlNode *node);
+
+    wxObject *Handle_buttonbar();
+    wxObject *Handle_control();
+    wxObject *Handle_page();
+    wxObject *Handle_gallery();
+    wxObject *Handle_panel();
+    wxObject *Handle_bar();
+    wxObject *Handle_toolbar();
+
+    wxObject *Handle_galleryitem();
+    wxObject *Handle_button();
+    wxObject *Handle_tool();
+    wxObject *Handle_separator();
+
+    void Handle_RibbonArtProvider(wxRibbonControl *control);
+
+    wxDECLARE_DYNAMIC_CLASS(wxRibbonXmlHandler);
+};
+
+#endif // wxUSE_XRC && wxUSE_RIBBON
+
+#endif // _WX_XRC_XH_RIBBON_H_
diff -uNr ./wxWidgets/src/xrc/xh_ribbon.cpp ./wxWidgets2/src/xrc/xh_ribbon.cpp
--- ./wxWidgets/src/xrc/xh_ribbon.cpp	2013-11-09 19:26:40.542521700 -0600
+++ ./wxWidgets2/src/xrc/xh_ribbon.cpp	2013-11-09 19:00:22.549218200 -0600
@@ -1,335 +1,503 @@
-/////////////////////////////////////////////////////////////////////////////
-// Name:        src/xrc/xh_ribbon.cpp
-// Purpose:     XML resource handler for wxRibbon related classes
-// Author:      Armel Asselin
-// Created:     2010-04-23
-// Copyright:   (c) 2010 Armel Asselin
-// Licence:     wxWindows licence
-/////////////////////////////////////////////////////////////////////////////
-
-// For compilers that support precompilation, includes "wx.h".
-#include "wx/wxprec.h"
-
-#ifdef __BORLANDC__
-    #pragma hdrstop
-#endif
-
-#if wxUSE_XRC && wxUSE_RIBBON
-
-#include "wx/xrc/xh_ribbon.h"
-
-#include "wx/ribbon/bar.h"
-#include "wx/ribbon/buttonbar.h"
-#include "wx/ribbon/gallery.h"
-
-#include "wx/scopeguard.h"
-
-#ifndef WX_PRECOMP
-    #include "wx/menu.h"
-#endif
-
-// Ribbon bars can contain only pages which are usually panels but may contain
-// any wxWindow.
-//
-// Panels are usually for wxRibbonControls but may as well contain any
-// wxWindow.
-//
-// Galleries are wxRibbonControl and simply contain bitmaps with IDs.
-//
-// Button bars are wxRibbonControl and contain buttons (normal/dropdown/mixed),
-// with id/bitmap/label/short help.
-
-wxIMPLEMENT_DYNAMIC_CLASS(wxRibbonXmlHandler, wxXmlResourceHandler);
-
-wxRibbonXmlHandler::wxRibbonXmlHandler()
-    : wxXmlResourceHandler(),
-      m_isInside(NULL)
-{
-    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PAGE_LABELS);
-    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PAGE_ICONS);
-    XRC_ADD_STYLE(wxRIBBON_BAR_FLOW_HORIZONTAL);
-    XRC_ADD_STYLE(wxRIBBON_BAR_FLOW_VERTICAL);
-    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS);
-    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS);
-    XRC_ADD_STYLE(wxRIBBON_BAR_ALWAYS_SHOW_TABS);
-    XRC_ADD_STYLE(wxRIBBON_BAR_DEFAULT_STYLE);
-    XRC_ADD_STYLE(wxRIBBON_BAR_FOLDBAR_STYLE);
-}
-
-wxObject *wxRibbonXmlHandler::DoCreateResource()
-{
-    if (m_class == wxT("button"))
-        return Handle_button();
-    if (m_class == wxT("wxRibbonButtonBar"))
-        return Handle_buttonbar();
-    else if (m_class == wxT("item"))
-        return Handle_galleryitem();
-    else if (m_class == wxT("wxRibbonGallery"))
-        return Handle_gallery();
-    else if (m_class == wxT("wxRibbonPanel") || m_class == wxT("panel"))
-        return Handle_panel();
-    else if (m_class == wxT("wxRibbonPage") || m_class == wxT("page"))
-        return Handle_page();
-    else if (m_class == wxT("wxRibbonBar"))
-        return Handle_bar();
-    else
-        return Handle_control ();
-}
-
-bool wxRibbonXmlHandler::CanHandle(wxXmlNode *node)
-{
-    return IsRibbonControl(node) ||
-           (m_isInside == &wxRibbonButtonBar::ms_classInfo &&
-                IsOfClass(node, wxT("button"))) ||
-           (m_isInside == &wxRibbonBar::ms_classInfo &&
-                IsOfClass(node, wxT("page"))) ||
-           (m_isInside == &wxRibbonPage::ms_classInfo &&
-                IsOfClass(node, wxT("panel"))) ||
-           (m_isInside == &wxRibbonGallery::ms_classInfo &&
-                IsOfClass(node, wxT("item")));
-}
-
-bool wxRibbonXmlHandler::IsRibbonControl (wxXmlNode *node)
-{
-    return IsOfClass(node, wxT("wxRibbonBar")) ||
-           IsOfClass(node, wxT("wxRibbonButtonBar")) ||
-           IsOfClass(node, wxT("wxRibbonPage")) ||
-           IsOfClass(node, wxT("wxRibbonPanel")) ||
-           IsOfClass(node, wxT("wxRibbonGallery")) ||
-           IsOfClass(node, wxT("wxRibbonControl"));
-}
-
-void wxRibbonXmlHandler::Handle_RibbonArtProvider(wxRibbonControl *control)
-{
-    wxString provider = GetText("art-provider", false);
-
-    if (provider == "default" || provider.IsEmpty())
-        control->SetArtProvider(new wxRibbonDefaultArtProvider);
-    else if (provider.CmpNoCase("aui") == 0)
-        control->SetArtProvider(new wxRibbonAUIArtProvider);
-    else if (provider.CmpNoCase("msw") == 0)
-        control->SetArtProvider(new wxRibbonMSWArtProvider);
-    else
-        ReportError("invalid ribbon art provider");
-}
-
-wxObject* wxRibbonXmlHandler::Handle_buttonbar()
-{
-    XRC_MAKE_INSTANCE (buttonBar, wxRibbonButtonBar);
-
-    if (!buttonBar->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
-            GetPosition(), GetSize(), GetStyle()))
-    {
-        ReportError("could not create ribbon panel");
-    }
-    else
-    {
-        const wxClassInfo* const wasInside = m_isInside;
-        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
-        m_isInside = &wxRibbonButtonBar::ms_classInfo;
-
-        CreateChildren (buttonBar, true);
-
-        buttonBar->Realize();
-    }
-
-    return buttonBar;
-}
-
-wxObject* wxRibbonXmlHandler::Handle_button()
-{
-    wxRibbonButtonBar *buttonBar = wxStaticCast(m_parent, wxRibbonButtonBar);
-
-    wxRibbonButtonKind  kind = wxRIBBON_BUTTON_NORMAL;
-
-    if (GetBool(wxT("hybrid")))
-        kind = wxRIBBON_BUTTON_HYBRID;
-
-    // FIXME: The code below uses wxXmlNode directly but this can't be done
-    //        in the ribbon library code as it would force it to always link
-    //        with the xml library. Disable it for now but the real solution
-    //        would be to virtualize GetChildren() and GetNext() methods via
-    //        wxXmlResourceHandler, just as we already do for many others.
-    //
-    // FIXME: If re-enabling, don't forget to update the docs and RELAG NG schema!
-#if 0 // wxUSE_MENUS
-    // check whether we have dropdown tag inside
-    wxMenu *menu = NULL; // menu for drop down items
-    wxXmlNode * const nodeDropdown = GetParamNode("dropdown");
-    if ( nodeDropdown )
-    {
-        if (kind == wxRIBBON_BUTTON_NORMAL)
-            kind = wxRIBBON_BUTTON_DROPDOWN;
-
-        // also check for the menu specified inside dropdown (it is
-        // optional and may be absent for e.g. dynamically-created
-        // menus)
-        wxXmlNode * const nodeMenu = nodeDropdown->GetChildren();
-        if ( nodeMenu )
-        {
-            wxObject *res = CreateResFromNode(nodeMenu, NULL);
-            menu = wxDynamicCast(res, wxMenu);
-            if ( !menu )
-            {
-                ReportError
-                (
-                    nodeMenu,
-                    "drop-down tool contents can only be a wxMenu"
-                );
-            }
-
-            if ( nodeMenu->GetNext() )
-            {
-                ReportError
-                (
-                    nodeMenu->GetNext(),
-                    "unexpected extra contents under drop-down tool"
-                );
-            }
-        }
-    }
-#endif // wxUSE_MENUS
-
-    if (!buttonBar->AddButton(GetID(),
-                              GetText("label"),
-                              GetBitmap ("bitmap"),
-                              GetBitmap ("small-bitmap"),
-                              GetBitmap ("disabled-bitmap"),
-                              GetBitmap ("small-disabled-bitmap"),
-                              kind,
-                              GetText("help")))
-    {
-        ReportError ("could not create button");
-    }
-
-    if ( GetBool(wxT("disabled")) )
-            buttonBar->EnableButton(GetID(), false);
-
-    return NULL; // nothing to return
-}
-
-wxObject* wxRibbonXmlHandler::Handle_control()
-{
-    wxRibbonControl *control = wxDynamicCast (m_instance, wxRibbonControl);
-
-    if (!m_instance)
-        ReportError("wxRibbonControl must be subclassed");
-    else if (!control)
-        ReportError("controls must derive from wxRibbonControl");
-
-    control->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
-                    GetPosition(), GetSize(), GetStyle());
-
-    return m_instance;
-}
-
-wxObject* wxRibbonXmlHandler::Handle_page()
-{
-    XRC_MAKE_INSTANCE (ribbonPage, wxRibbonPage);
-
-    if (!ribbonPage->Create (wxDynamicCast(m_parent, wxRibbonBar), GetID(),
-            GetText ("label"), GetBitmap ("icon"), GetStyle()))
-    {
-        ReportError("could not create ribbon page");
-    }
-    else
-    {
-        const wxClassInfo* const wasInside = m_isInside;
-        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
-        m_isInside = &wxRibbonPage::ms_classInfo;
-
-        CreateChildren (ribbonPage);
-
-        ribbonPage->Realize();
-    }
-
-    return ribbonPage;
-}
-
-wxObject* wxRibbonXmlHandler::Handle_gallery()
-{
-    XRC_MAKE_INSTANCE (ribbonGallery, wxRibbonGallery);
-
-    if (!ribbonGallery->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
-            GetPosition(), GetSize(), GetStyle()))
-    {
-        ReportError("could not create ribbon gallery");
-    }
-    else
-    {
-        const wxClassInfo* const wasInside = m_isInside;
-        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
-        m_isInside = &wxRibbonGallery::ms_classInfo;
-
-        CreateChildren (ribbonGallery);
-
-        ribbonGallery->Realize();
-    }
-
-    return ribbonGallery;
-}
-
-wxObject* wxRibbonXmlHandler::Handle_galleryitem()
-{
-    wxRibbonGallery *gallery = wxStaticCast(m_parent, wxRibbonGallery);
-    wxCHECK (gallery, NULL);
-
-    gallery->Append (GetBitmap(), GetID());
-
-    return NULL; // nothing to return
-}
-
-wxObject* wxRibbonXmlHandler::Handle_panel()
-{
-    XRC_MAKE_INSTANCE (ribbonPanel, wxRibbonPanel);
-
-    if (!ribbonPanel->Create (wxDynamicCast(m_parent, wxWindow), GetID(),
-            GetText ("label"), GetBitmap ("icon"), GetPosition(), GetSize(),
-            GetStyle("style", wxRIBBON_PANEL_DEFAULT_STYLE)))
-    {
-        ReportError("could not create ribbon panel");
-    }
-    else
-    {
-        CreateChildren (ribbonPanel);
-
-        ribbonPanel->Realize();
-    }
-
-    return ribbonPanel;
-}
-
-wxObject* wxRibbonXmlHandler::Handle_bar()
-{
-    XRC_MAKE_INSTANCE (ribbonBar, wxRibbonBar);
-
-    Handle_RibbonArtProvider (ribbonBar);
-
-    if ( !ribbonBar->Create(wxDynamicCast(m_parent, wxWindow),
-                            GetID(),
-                            GetPosition(),
-                            GetSize(),
-                            GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE)) )
-    {
-        ReportError ("could not create ribbonbar");
-    }
-    else
-    {
-        // Currently the art provider style must be explicitly set to the
-        // ribbon style too.
-        ribbonBar->GetArtProvider()
-            ->SetFlags(GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE));
-
-        const wxClassInfo* const wasInside = m_isInside;
-        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
-        m_isInside = &wxRibbonBar::ms_classInfo;
-
-        CreateChildren (ribbonBar, true);
-
-        ribbonBar->Realize();
-    }
-
-    return ribbonBar;
-}
-
-#endif // wxUSE_XRC && wxUSE_RIBBON
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_ribbon.cpp
+// Purpose:     XML resource handler for wxRibbon related classes
+// Author:      Armel Asselin
+// Created:     2010-04-23
+// Copyright:   (c) 2010 Armel Asselin
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include <wx/wxprec.h>
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_RIBBON
+
+#include <wx/xrc/xh_ribbon.h>
+
+#include <iostream>
+
+#include <wx/ribbon/bar.h>
+#include <wx/ribbon/buttonbar.h>
+#include <wx/ribbon/toolbar.h>
+#include <wx/ribbon/gallery.h>
+
+#include <wx/scopeguard.h>
+
+#ifndef WX_PRECOMP
+#include <wx/menu.h>
+#endif
+
+// Ribbon bars can contain only pages which are usually panels but may contain
+// any wxWindow.
+//
+// Panels are usually for wxRibbonControls but may as well contain any
+// wxWindow.
+//
+// Galleries are wxRibbonControl and simply contain bitmaps with IDs.
+//
+// Button bars are wxRibbonControl and contain buttons (normal/dropdown/mixed),
+// with id/bitmap/label/short help.
+
+wxIMPLEMENT_DYNAMIC_CLASS(wxRibbonXmlHandler, wxXmlResourceHandler);
+
+wxRibbonXmlHandler::wxRibbonXmlHandler()
+    : wxXmlResourceHandler(),
+      m_isInside(NULL)
+{
+    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PAGE_LABELS);
+    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PAGE_ICONS);
+    XRC_ADD_STYLE(wxRIBBON_BAR_FLOW_HORIZONTAL);
+    XRC_ADD_STYLE(wxRIBBON_BAR_FLOW_VERTICAL);
+    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS);
+    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS);
+    XRC_ADD_STYLE(wxRIBBON_BAR_ALWAYS_SHOW_TABS);
+    XRC_ADD_STYLE(wxRIBBON_BAR_DEFAULT_STYLE);
+    XRC_ADD_STYLE(wxRIBBON_BAR_FOLDBAR_STYLE);
+    XRC_ADD_STYLE(wxRIBBON_BAR_SHOW_HELP_BUTTON);
+}
+
+wxObject *wxRibbonXmlHandler::DoCreateResource()
+{
+    if (m_class == wxT("button"))
+    {
+        return Handle_button();
+    }
+    else if (m_class == wxT("tool"))
+    {
+        return Handle_tool();
+    }
+    else if (m_class == wxT("separator"))
+    {
+        return Handle_separator();
+    }
+    else if (m_class == wxT("item"))
+    {
+        return Handle_galleryitem();
+    }
+    else if (m_class == wxT("wxRibbonButtonBar"))
+    {
+        return Handle_buttonbar();
+    }
+    else if (m_class == wxT("wxRibbonToolBar"))
+    {
+        return Handle_toolbar();
+    }
+    else if (m_class == wxT("wxRibbonGallery"))
+    {
+        return Handle_gallery();
+    }
+    else if (m_class == wxT("wxRibbonPanel") || m_class == wxT("panel"))
+    {
+        return Handle_panel();
+    }
+    else if (m_class == wxT("wxRibbonPage") || m_class == wxT("page"))
+    {
+        return Handle_page();
+    }
+    else if (m_class == wxT("wxRibbonBar"))
+    {
+        return Handle_bar();
+    }
+    else
+    {
+        return Handle_control();
+    }
+}
+
+bool wxRibbonXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return IsRibbonControl(node) ||
+           (m_isInside == CLASSINFO(wxRibbonBar)        && IsOfClass(node, wxT("page")))        ||
+           (m_isInside == CLASSINFO(wxRibbonPage)       && IsOfClass(node, wxT("panel")))       ||
+           (m_isInside == CLASSINFO(wxRibbonButtonBar)  && IsOfClass(node, wxT("button")))      ||
+           (m_isInside == CLASSINFO(wxRibbonToolBar)    && IsOfClass(node, wxT("tool")))        ||
+           (m_isInside == CLASSINFO(wxRibbonToolBar)    && IsOfClass(node, wxT("separator")))   ||
+           (m_isInside == CLASSINFO(wxRibbonGallery)    && IsOfClass(node, wxT("item")));
+}
+
+bool wxRibbonXmlHandler::IsRibbonControl(wxXmlNode *node)
+{
+    return  IsOfClass(node, wxT("wxRibbonBar"))       ||
+            IsOfClass(node, wxT("wxRibbonButtonBar")) ||
+            IsOfClass(node, wxT("wxRibbonPage"))      ||
+            IsOfClass(node, wxT("wxRibbonPanel"))     ||
+            IsOfClass(node, wxT("wxRibbonGallery"))   ||
+            IsOfClass(node, wxT("wxRibbonToolBar"))   ||
+            IsOfClass(node, wxT("wxRibbonControl"));
+}
+
+void wxRibbonXmlHandler::Handle_RibbonArtProvider(wxRibbonControl *control)
+{
+    wxString provider = GetText("art-provider", false);
+
+    if (provider == "default" || provider.IsEmpty())
+    {
+        control->SetArtProvider(new wxRibbonDefaultArtProvider);
+    }
+    else if (provider.CmpNoCase("aui") == 0)
+    {
+        control->SetArtProvider(new wxRibbonAUIArtProvider);
+    }
+    else if (provider.CmpNoCase("msw") == 0)
+    {
+        control->SetArtProvider(new wxRibbonMSWArtProvider);
+    }
+    else
+    {
+        ReportError("invalid ribbon art provider");
+    }
+}
+
+wxObject *wxRibbonXmlHandler::Handle_buttonbar()
+{
+    XRC_MAKE_INSTANCE(buttonBar, wxRibbonButtonBar);
+
+    if (!buttonBar->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
+                           GetPosition(), GetSize(), GetStyle()))
+    {
+        ReportError("could not create ribbon panel");
+    }
+    else
+    {
+        const wxClassInfo *const wasInside = m_isInside;
+        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
+        m_isInside = &wxRibbonButtonBar::ms_classInfo;
+
+        CreateChildren(buttonBar, true);
+
+        buttonBar->Realize();
+    }
+
+    return buttonBar;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_toolbar()
+{
+    XRC_MAKE_INSTANCE(toolBar, wxRibbonToolBar);
+
+    if (!toolBar->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
+                         GetPosition(), GetSize(), GetStyle()))
+    {
+        ReportError("could not create ribbon panel");
+    }
+    else
+    {
+        const wxClassInfo *const wasInside = m_isInside;
+        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
+        m_isInside = &wxRibbonToolBar::ms_classInfo;
+
+        CreateChildren(toolBar, true);
+
+        if (HasParam("rows"))
+        {
+            wxSize tmp = GetSize("rows");
+
+            toolBar->SetRows(tmp.x, tmp.y);
+        }
+
+        toolBar->Realize();
+    }
+
+    return toolBar;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_button()
+{
+    wxRibbonButtonBar *buttonBar = wxStaticCast(m_parent, wxRibbonButtonBar);
+
+    wxRibbonButtonKind  kind = wxRIBBON_BUTTON_NORMAL;
+
+    if (GetBool(wxT("hybrid")))
+    {
+        kind = wxRIBBON_BUTTON_HYBRID;
+    }
+    else if (GetBool(wxT("toggle")))
+    {
+        kind = wxRIBBON_BUTTON_TOGGLE;
+    }
+
+    wxSize bitmap_size = GetSize();
+    wxSize small_bitmap_size = GetSize("small-size");
+
+    // FIXME: The code below uses wxXmlNode directly but this can't be done
+    //        in the ribbon library code as it would force it to always link
+    //        with the xml library. Disable it for now but the real solution
+    //        would be to virtualize GetChildren() and GetNext() methods via
+    //        wxXmlResourceHandler, just as we already do for many others.
+    //
+    // FIXME: If re-enabling, don't forget to update the docs and RELAG NG schema!
+#if 0 // wxUSE_MENUS
+    // check whether we have dropdown tag inside
+    wxMenu *menu = NULL; // menu for drop down items
+    wxXmlNode * const nodeDropdown = GetParamNode("dropdown");
+    if ( nodeDropdown )
+    {
+        if (kind == wxRIBBON_BUTTON_NORMAL)
+            kind = wxRIBBON_BUTTON_DROPDOWN;
+
+        // also check for the menu specified inside dropdown (it is
+        // optional and may be absent for e.g. dynamically-created
+        // menus)
+        wxXmlNode * const nodeMenu = nodeDropdown->GetChildren();
+        if ( nodeMenu )
+        {
+            wxObject *res = CreateResFromNode(nodeMenu, NULL);
+            menu = wxDynamicCast(res, wxMenu);
+            if ( !menu )
+            {
+                ReportError
+                (
+                    nodeMenu,
+                    "drop-down tool contents can only be a wxMenu"
+                );
+            }
+
+            if ( nodeMenu->GetNext() )
+            {
+                ReportError
+                (
+                    nodeMenu->GetNext(),
+                    "unexpected extra contents under drop-down tool"
+                );
+            }
+        }
+    }
+#endif // wxUSE_MENUS
+
+    if (!buttonBar->AddButton(GetID(),
+                              GetText("label"),
+                              GetBitmap("bitmap", wxART_OTHER, bitmap_size),
+                              GetBitmap("small-bitmap", wxART_OTHER, small_bitmap_size),
+                              GetBitmap("disabled-bitmap", wxART_OTHER, bitmap_size),
+                              GetBitmap("small-disabled-bitmap", wxART_OTHER, small_bitmap_size),
+                              kind,
+                              GetText("help")))
+    {
+        ReportError("could not create button");
+    }
+
+    if (GetBool(wxT("disabled")))
+    {
+        buttonBar->EnableButton(GetID(), false);
+    }
+
+    if (kind == wxRIBBON_BUTTON_TOGGLE && GetBool(wxT("checked")))
+    {
+        buttonBar->ToggleButton(GetID(), true);
+    }
+
+    return NULL; // nothing to return
+}
+
+wxObject *wxRibbonXmlHandler::Handle_separator()
+{
+    wxRibbonToolBar *toolBar = wxStaticCast(m_parent, wxRibbonToolBar);
+
+    if (!toolBar->AddSeparator())
+    {
+        ReportError("could not create toolbar separator");
+    }
+
+    return NULL;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_tool()
+{
+    wxRibbonToolBar *toolBar = wxStaticCast(m_parent, wxRibbonToolBar);
+
+    wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL;
+
+    if (GetBool(wxT("hybrid")))
+    {
+        kind = wxRIBBON_BUTTON_HYBRID;
+    }
+    else if (GetBool(wxT("toggle")))
+    {
+        kind = wxRIBBON_BUTTON_TOGGLE;
+    }
+
+    wxSize bitmap_size = GetSize();
+
+    if (!toolBar->AddTool(GetID(),
+                          GetBitmap("bitmap", wxART_OTHER, bitmap_size),
+                          GetBitmap("disabled-bitmap", wxART_OTHER, bitmap_size),
+                          GetText("help"),
+                          kind
+                         ))
+    {
+        ReportError("could not create tool");
+    }
+
+    if (GetBool(wxT("disabled")))
+    {
+        toolBar->EnableTool(GetID(), false);
+    }
+
+    if (kind == wxRIBBON_BUTTON_TOGGLE && GetBool(wxT("checked")))
+    {
+        toolBar->ToggleTool(GetID(), true);
+    }
+
+    return NULL; // nothing to return
+}
+
+
+wxObject *wxRibbonXmlHandler::Handle_control()
+{
+    wxRibbonControl *control = wxDynamicCast(m_instance, wxRibbonControl);
+
+    if (!m_instance)
+    {
+        ReportError("wxRibbonControl must be subclassed");
+    }
+    else if (!control)
+    {
+        ReportError("controls must derive from wxRibbonControl");
+    }
+
+    control->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
+                    GetPosition(), GetSize(), GetStyle());
+
+    return m_instance;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_page()
+{
+    XRC_MAKE_INSTANCE(ribbonPage, wxRibbonPage);
+
+    if (!ribbonPage->Create(wxDynamicCast(m_parent, wxRibbonBar), GetID(),
+                            GetText("label"), GetBitmap("icon"), GetStyle()))
+    {
+        ReportError("could not create ribbon page");
+    }
+    else
+    {
+        const wxClassInfo *const wasInside = m_isInside;
+        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
+        m_isInside = &wxRibbonPage::ms_classInfo;
+
+        CreateChildren(ribbonPage);
+
+        ribbonPage->Realize();
+    }
+
+    return ribbonPage;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_gallery()
+{
+    XRC_MAKE_INSTANCE(ribbonGallery, wxRibbonGallery);
+
+    if (!ribbonGallery->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
+                               GetPosition(), GetSize(), GetStyle()))
+    {
+        ReportError("could not create ribbon gallery");
+    }
+    else
+    {
+        const wxClassInfo *const wasInside = m_isInside;
+        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
+        m_isInside = &wxRibbonGallery::ms_classInfo;
+
+        CreateChildren(ribbonGallery);
+
+        ribbonGallery->Realize();
+    }
+
+    return ribbonGallery;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_galleryitem()
+{
+    wxRibbonGallery *gallery = wxStaticCast(m_parent, wxRibbonGallery);
+    wxCHECK(gallery, NULL);
+
+    gallery->Append(GetBitmap(), GetID());
+
+    return NULL; // nothing to return
+}
+
+wxObject *wxRibbonXmlHandler::Handle_panel()
+{
+    XRC_MAKE_INSTANCE(ribbonPanel, wxRibbonPanel);
+
+    if (!ribbonPanel->Create(wxDynamicCast(m_parent, wxWindow), GetID(),
+                             GetText("label"), GetBitmap("icon"), GetPosition(), GetSize(),
+                             GetStyle("style", wxRIBBON_PANEL_DEFAULT_STYLE)))
+    {
+        ReportError("could not create ribbon panel");
+    }
+    else
+    {
+        CreateChildren(ribbonPanel);
+
+        ribbonPanel->Realize();
+    }
+
+    return ribbonPanel;
+}
+
+wxObject *wxRibbonXmlHandler::Handle_bar()
+{
+    XRC_MAKE_INSTANCE(ribbonBar, wxRibbonBar);
+
+    Handle_RibbonArtProvider(ribbonBar);
+
+    wxColour primary, secondary, tertiary;
+
+    ribbonBar->GetArtProvider()->GetColourScheme(&primary, &secondary, &tertiary);
+
+    primary = GetColour("art-colour-primary", primary);
+    secondary = GetColour("art-colour-secondary", secondary);
+    tertiary = GetColour("art-colour-tertiary", tertiary);
+
+    //Should the alternate spelling be included as well?
+#if 0
+    primary = GetColour("art-color-primary", primary);
+    secondary = GetColour("art-color-secondary", secondary);
+    tertiary = GetColour("art-color-tertiary", tertiary);
+#endif
+
+    ribbonBar->GetArtProvider()->SetColourScheme(primary, secondary, tertiary);
+
+    if (!ribbonBar->Create(wxDynamicCast(m_parent, wxWindow),
+                           GetID(),
+                           GetPosition(),
+                           GetSize(),
+                           GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE)))
+    {
+        ReportError("could not create ribbonbar");
+    }
+    else
+    {
+        // Currently the art provider style must be explicitly set to the
+        // ribbon style too.
+        ribbonBar->GetArtProvider()->SetFlags(GetStyle("style", wxRIBBON_BAR_DEFAULT_STYLE));
+
+        const wxClassInfo *const wasInside = m_isInside;
+        wxON_BLOCK_EXIT_SET(m_isInside, wasInside);
+        m_isInside = &wxRibbonBar::ms_classInfo;
+
+        CreateChildren(ribbonBar, true);
+
+        ribbonBar->SetActivePage(GetLong("active-page", 0));
+        ribbonBar->ShowPanels(GetBool("show-panels", true));
+
+        if (this->HasParam("tab-ctrl-margins"))
+        {
+            wxSize tmp = GetSize("tab-ctrl-margins");
+
+            ribbonBar->SetTabCtrlMargins(tmp.x, tmp.y);
+        }
+
+        ribbonBar->Realize();
+    }
+
+    return ribbonBar;
+}
+
+#endif // wxUSE_XRC && wxUSE_RIBBON

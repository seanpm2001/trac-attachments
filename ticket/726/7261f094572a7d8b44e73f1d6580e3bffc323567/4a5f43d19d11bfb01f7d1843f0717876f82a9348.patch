Index: drawing.cpp
===================================================================
--- drawing.cpp	(revision 72024)
+++ drawing.cpp	(working copy)
@@ -38,7 +38,9 @@
 #include "wx/graphics.h"
 #include "wx/filename.h"
 #include "wx/metafile.h"
+#include "wx/msw/wrapgdip.h"
 
+
 #define TEST_CAIRO_EVERYWHERE 0
 
 // ----------------------------------------------------------------------------
@@ -403,13 +405,13 @@
                            wxHSCROLL | wxVSCROLL | wxNO_FULL_REPAINT_ON_RESIZE)
 {
     m_owner = parent;
-    m_show = File_ShowDefault;
+    m_show = File_ShowText;
     m_smile_bmp = wxBitmap(smile_xpm);
     m_std_icon = wxArtProvider::GetIcon(wxART_INFORMATION);
     m_clip = false;
     m_rubberBand = false;
 #if wxUSE_GRAPHICS_CONTEXT
-    m_useContext = false;
+    m_useContext = TRUE;
 #endif
 }
 
@@ -771,60 +773,37 @@
 
 void MyCanvas::DrawText(wxDC& dc)
 {
-    // set underlined font for testing
-    dc.SetFont( wxFont(12, wxMODERN, wxNORMAL, wxNORMAL, true) );
-    dc.DrawText( wxT("This is text"), 110, 10 );
-    dc.DrawRotatedText( wxT("That is text"), 20, 10, -45 );
+    wxString text = "battlestar.galactica.battlestar.galactica";
 
-    // use wxSWISS_FONT and not wxNORMAL_FONT as the latter can't be rotated
-    // under Win9x (it is not TrueType)
-    dc.SetFont( *wxSWISS_FONT );
 
-    wxString text;
-    dc.SetBackgroundMode(wxTRANSPARENT);
+	dc.SetBackgroundMode(wxTRANSPARENT);
+    dc.SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL));
+	dc.SetTextForeground(*wxRED);
 
-    for ( int n = -180; n < 180; n += 30 )
-    {
-        text.Printf(wxT("     %d rotated text"), n);
-        dc.DrawRotatedText(text , 400, 400, n);
-    }
+	dc.DrawText("wxGraphicsContext (wrong)", 300, 40);
+	dc.DrawText("wxWindowDC (reference)", 300, 55);
+	dc.DrawText("GDI+ (good)", 300, 70);
 
-    dc.SetFont( wxFont( 18, wxSWISS, wxNORMAL, wxNORMAL ) );
+	dc.SetTextForeground(*wxBLACK);
 
-    dc.DrawText( wxT("This is Swiss 18pt text."), 110, 40 );
 
-    wxCoord length;
-    wxCoord height;
-    wxCoord descent;
-    dc.GetTextExtent( wxT("This is Swiss 18pt text."), &length, &height, &descent );
-    text.Printf( wxT("Dimensions are length %d, height %d, descent %d"), length, height, descent );
-    dc.DrawText( text, 110, 80 );
+	// wxGraphicsContext
+	dc.DrawText(text, 110, 40);
 
-    text.Printf( wxT("CharHeight() returns: %d"), dc.GetCharHeight() );
-    dc.DrawText( text, 110, 120 );
 
-    dc.DrawRectangle( 100, 40, 4, height );
+	// wxWindowDC
+	wxWindowDC WindowDC(this);
+	WindowDC.SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL));
+	WindowDC.DrawText(text, 110, 55);
 
-    // test the logical function effect
-    wxCoord y = 150;
-    dc.SetLogicalFunction(wxINVERT);
-    // text drawing should ignore logical function
-    dc.DrawText( wxT("There should be a text below"), 110, 150 );
-    dc.DrawRectangle( 110, y, 100, height );
 
-    y += height;
-    dc.DrawText( wxT("Visible text"), 110, y );
-    dc.DrawRectangle( 110, y, 100, height );
-    dc.DrawText( wxT("Visible text"), 110, y );
-    dc.DrawRectangle( 110, y, 100, height );
-    dc.SetLogicalFunction(wxCOPY);
-
-    y += height;
-    dc.DrawRectangle( 110, y, 100, height );
-    dc.DrawText( wxT("Another visible text"), 110, y );
-
-    y += height;
-    dc.DrawText("And\nmore\ntext on\nmultiple\nlines", 110, y);
+	// GDI+
+	wxGCDC &gdc = (wxGCDC&)dc;
+	wxGraphicsContext * gc = gdc.GetGraphicsContext();
+	Graphics * const g = static_cast<Graphics *>(gc->GetNativeContext());
+	Font Text1Font(L"Arial", 8);
+	SolidBrush TextBrush(Color(255, 0, 0, 0));
+	g->DrawString(text.wc_str(*wxConvUI), -1, &Text1Font, RectF(109, 70, 500, 30), 0, &TextBrush);
 }
 
 static const struct
@@ -1538,7 +1517,7 @@
 
     gdc.SetGraphicsContext(context);
 
-    wxDC &dc = m_useContext ? (wxDC&) gdc : (wxDC&) pdc ;
+    wxDC &dc = (wxDC&) gdc;
 #else
     wxDC &dc = pdc ;
 #endif

Index: include/wx/archive.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/archive.h,v
retrieving revision 1.3
diff -u -2 -r1.3 archive.h
--- include/wx/archive.h	2004/11/23 14:25:57	1.3
+++ include/wx/archive.h	2004/11/25 19:36:06
@@ -68,4 +68,5 @@
 protected:
     wxArchiveEntry() : m_notifier(NULL) { }
+    wxArchiveEntry(const wxArchiveEntry& e) : wxObject(e), m_notifier(NULL) { }
 
     virtual void SetOffset(wxFileOffset offset) = 0;
@@ -212,12 +213,12 @@
 #include <utility>
 
-template <class X, class Y>
-void WXDLLIMPEXP_BASE _wxSetArchiveIteratorValue(
+template <class X, class Y> inline
+void _wxSetArchiveIteratorValue(
     X& val, Y entry, void *WXUNUSED(d))
 {
     val = X(entry);
 }
-template <class X, class Y, class Z>
-void WXDLLIMPEXP_BASE _wxSetArchiveIteratorValue(
+template <class X, class Y, class Z> inline
+void _wxSetArchiveIteratorValue(
     std::pair<X, Y>& val, Z entry, Z WXUNUSED(d))
 {
@@ -230,5 +231,5 @@
 template <class Arc, class T = typename Arc::entry_type*>
 #endif
-class WXDLLIMPEXP_BASE wxArchiveIterator
+class wxArchiveIterator
 {
 public:
@@ -284,9 +285,9 @@
     }
 
-    bool operator ==(const wxArchiveIterator& j) {
-        return (*this).m_rep == j.m_rep;
+    bool operator ==(const wxArchiveIterator& j) const {
+        return m_rep == j.m_rep;
     }
 
-    bool operator !=(const wxArchiveIterator& j) {
+    bool operator !=(const wxArchiveIterator& j) const {
         return !(*this == j);
     }
Index: include/wx/zipstrm.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/zipstrm.h,v
retrieving revision 1.15
diff -u -2 -r1.15 zipstrm.h
--- include/wx/zipstrm.h	2004/11/12 14:23:02	1.15
+++ include/wx/zipstrm.h	2004/11/25 19:36:08
@@ -456,5 +456,5 @@
 typedef wxArchiveIterator<wxZipInputStream> wxZipIter;
 typedef wxArchiveIterator<wxZipInputStream,
-         std::pair<wxString, wxZipEntry*> >  wxZipPairIter;
+         std::pair<wxString, wxZipEntry*> > wxZipPairIter;
 #endif
 
@@ -463,20 +463,20 @@
 // wxZipEntry inlines
 
-bool wxZipEntry::IsText() const
+inline bool wxZipEntry::IsText() const
 {
     return (m_InternalAttributes & TEXT_ATTR) != 0;
 }
 
-bool wxZipEntry::IsDir() const
+inline bool wxZipEntry::IsDir() const
 {
     return (m_ExternalAttributes & wxZIP_A_SUBDIR) != 0;
 }
 
-bool wxZipEntry::IsReadOnly() const
+inline bool wxZipEntry::IsReadOnly() const
 {
     return (m_ExternalAttributes & wxZIP_A_RDONLY) != 0;
 }
 
-bool wxZipEntry::IsMadeByUnix() const
+inline bool wxZipEntry::IsMadeByUnix() const
 {
     const int pattern =
@@ -493,5 +493,5 @@
 }
 
-void wxZipEntry::SetIsText(bool isText)
+inline void wxZipEntry::SetIsText(bool isText)
 {
     if (isText)
@@ -501,5 +501,5 @@
 }
 
-void wxZipEntry::SetIsReadOnly(bool isReadOnly)
+inline void wxZipEntry::SetIsReadOnly(bool isReadOnly)
 {
     if (isReadOnly)
@@ -509,6 +509,6 @@
 }
 
-void wxZipEntry::SetName(const wxString& name,
-                         wxPathFormat format /*=wxPATH_NATIVE*/)
+inline void wxZipEntry::SetName(const wxString& name,
+                                wxPathFormat format /*=wxPATH_NATIVE*/)
 {
     bool isDir;
Index: src/common/archive.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/archive.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 archive.cpp
--- src/common/archive.cpp	2004/11/10 23:58:08	1.1
+++ src/common/archive.cpp	2004/11/25 19:36:17
@@ -66,7 +66,7 @@
 }
 
-wxArchiveEntry& wxArchiveEntry::operator=(const wxArchiveEntry& entry)
+wxArchiveEntry& wxArchiveEntry::operator=(const wxArchiveEntry& WXUNUSED(e))
 {
-    m_notifier = entry.m_notifier;
+    m_notifier = NULL;
     return *this;
 }
Index: src/common/zipstrm.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/zipstrm.cpp,v
retrieving revision 1.21
diff -u -2 -r1.21 zipstrm.cpp
--- src/common/zipstrm.cpp	2004/11/17 16:13:29	1.21
+++ src/common/zipstrm.cpp	2004/11/25 19:36:22
@@ -623,5 +623,6 @@
 
 wxZipEntry::wxZipEntry(const wxZipEntry& e)
-  : m_SystemMadeBy(e.m_SystemMadeBy),
+  : wxArchiveEntry(e),
+    m_SystemMadeBy(e.m_SystemMadeBy),
     m_VersionMadeBy(e.m_VersionMadeBy),
     m_VersionNeeded(e.m_VersionNeeded),
@@ -641,5 +642,5 @@
     m_Extra(AddRef(e.m_Extra)),
     m_LocalExtra(AddRef(e.m_LocalExtra)),
-    m_zipnotifier(e.m_zipnotifier),
+    m_zipnotifier(NULL),
     m_backlink(NULL)
 {
@@ -667,5 +668,5 @@
         Copy(m_Extra, e.m_Extra);
         Copy(m_LocalExtra, e.m_LocalExtra);
-        m_zipnotifier = e.m_zipnotifier;
+        m_zipnotifier = NULL;
         if (m_backlink) {
             m_backlink->Release(m_Key);
Index: tests/test.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.cpp,v
retrieving revision 1.10
diff -u -2 -r1.10 test.cpp
--- tests/test.cpp	2004/11/22 04:59:25	1.10
+++ tests/test.cpp	2004/11/25 19:36:42
@@ -156,5 +156,7 @@
         name = test->getName();
         string::size_type i = name.find_last_of(".:");
-        name = parent + "." + (i != string::npos ? name.substr(i + 1) : name);
+        if (i != string::npos)
+            name = name.substr(i + 1);
+        name = parent + "." + name;
 
         // drop the 1st component from the display and indent
Index: tests/archive/archivetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/archive/archivetest.cpp,v
retrieving revision 1.5
diff -u -2 -r1.5 archivetest.cpp
--- tests/archive/archivetest.cpp	2004/11/23 13:49:43	1.5
+++ tests/archive/archivetest.cpp	2004/11/25 19:37:00
@@ -22,7 +22,7 @@
 #define WX_TEST_ARCHIVE_ITERATOR
 
-// This sample uses some advanced typedef syntax that messes
-// up MSVC 6 - turn off its warning about it
-#if defined _MSC_VER
+// VC++ 6 warns that the list iterator's '->' operator will not work whenever
+// std::list is used with a non-pointer, so switch it off.
+#if defined _MSC_VER && _MSC_VER < 1300
 #pragma warning (disable:4284)
 #endif
@@ -115,5 +115,5 @@
 public:
     TestEntry(const wxDateTime& dt, int len, const char *data);
-    ~TestEntry() { delete [] (char*) m_data; }
+    ~TestEntry() { delete [] m_data; }
 
     wxDateTime GetDateTime() const  { return m_dt; }
@@ -130,5 +130,5 @@
     wxDateTime m_dt;
     size_t m_len;
-    const char *m_data;
+    char *m_data;
     wxString m_comment;
     bool m_isText;
@@ -140,7 +140,6 @@
     m_isText(len > 0)
 {
-    char *d = new char[len];
-    memcpy(d, data, len);
-    m_data = d;
+    m_data = new char[len];
+    memcpy(m_data, data, len);
 
     for (int i = 0; i < len && m_isText; i++)
@@ -164,5 +163,5 @@
 
     // gives away the data, this stream is then empty, and can be reused
-    void GetData(const char*& data, size_t& size);
+    void GetData(char*& data, size_t& size);
 
     enum { STUB_SIZE = 2048, INITIAL_SIZE = 0x18000, SEEK_LIMIT = 0x100000 };
@@ -257,5 +256,5 @@
 }
 
-void TestOutputStream::GetData(const char*& data, size_t& size)
+void TestOutputStream::GetData(char*& data, size_t& size)
 {
     data = m_data;
@@ -290,5 +289,5 @@
     // this ctor 'dups'
     TestInputStream(const TestInputStream& in);
-    ~TestInputStream() { delete [] (char*) m_data; }
+    ~TestInputStream() { delete [] m_data; }
 
     void Rewind();
@@ -304,5 +303,5 @@
     size_t m_pos;
     size_t m_size;
-    const char *m_data;
+    char *m_data;
 };
 
@@ -312,7 +311,6 @@
     m_size(in.m_size)
 {
-    char *p = new char[m_size];
-    memcpy(p, in.m_data, m_size);
-    m_data = p;
+    m_data = new char[m_size];
+    memcpy(m_data, in.m_data, m_size);
 }
 
@@ -334,5 +332,5 @@
 void TestInputStream::SetData(TestOutputStream& out)
 {
-    delete [] (char*) m_data;
+    delete [] m_data;
     m_options = out.GetOptions();
     out.GetData(m_data, m_size);
@@ -735,5 +733,5 @@
     wxCharBuffer buf(len);
     for (int i = 0; i < len; i++)
-        buf.data()[i] = value == EOF ? rand() : value;
+        buf.data()[i] = (char)(value == EOF ? rand() : value);
     return Add(name, buf, len);
 }
@@ -885,5 +883,5 @@
     auto_ptr<InputStreamT> arcIn(m_factory->NewStream(in));
     auto_ptr<OutputStreamT> arcOut(m_factory->NewStream(out));
-    ;
+    EntryT *pEntry;
 
     const wxString deleteName = _T("bin/bin1000");
@@ -894,13 +892,9 @@
 
     arcOut->CopyArchiveMetaData(*arcIn);
-
-    auto_ptr<EntryT>* pEntry;
 
-    for (pEntry = new auto_ptr<EntryT>(arcIn->GetNextEntry()) ; 
-         pEntry->get() != NULL ; 
-         delete pEntry, pEntry = new auto_ptr<EntryT>(arcIn->GetNextEntry())) 
-    {
-        OnSetNotifier(**pEntry);
-        wxString name = (*pEntry)->GetName(wxPATH_UNIX);
+    while ((pEntry = arcIn->GetNextEntry()) != NULL) {
+        auto_ptr<EntryT> entry(pEntry);
+        OnSetNotifier(*entry);
+        wxString name = entry->GetName(wxPATH_UNIX);
 
         // provide some context for the error message so that we know which
@@ -920,5 +914,5 @@
         else {
             if (name == renameFrom) {
-                (*pEntry)->SetName(renameTo);
+                entry->SetName(renameTo);
                 TestEntries::iterator it = m_testEntries.find(renameFrom);
                 CPPUNIT_ASSERT_MESSAGE(
@@ -931,10 +925,8 @@
 
             CPPUNIT_ASSERT_MESSAGE("CopyEntry" + error_context,
-                arcOut->CopyEntry(pEntry->release(), *arcIn));
+                arcOut->CopyEntry(entry.release(), *arcIn));
         }
     }
 
-    delete pEntry;
-
     // check that the deletion and rename were done
     CPPUNIT_ASSERT(m_testEntries.count(deleteName) == 0);
@@ -1142,5 +1134,5 @@
                     "entry not found in archive" + error_entry, in.Ok());
 
-                size_t size = in.GetLength();
+                size_t size = (size_t)in.GetLength();
                 wxCharBuffer buf(size);
                 CPPUNIT_ASSERT_MESSAGE("Read" + error_context,
@@ -1249,4 +1241,9 @@
 void ArchiveTestCase<Classes>::TestSmartPairIterator(wxInputStream& in)
 {
+#if defined _MSC_VER && defined _MSC_VER < 1200
+    // With VC++ 5.0 the '=' operator of std::pair breaks when the second
+    // type is Ptr<EntryT>, so this iterator can't be made to work.
+    (void)in;
+#else
     typedef std::map<wxString, Ptr<EntryT> > ArchiveCatalog;
     typedef typename ArchiveCatalog::iterator CatalogIter;
@@ -1268,4 +1265,5 @@
     for (CatalogIter it = cat.begin(); it != cat.end(); ++it)
         CPPUNIT_ASSERT(m_testEntries.count(it->second->GetName(wxPATH_UNIX)));
+#endif
 }
 

 	  	 

Index: tests/test.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.bkl,v
retrieving revision 1.41
diff -u2 -r1.41 tests/test.bkl
--- tests/test.bkl
+++ tests/test.bkl
@@ -38,4 +38,5 @@
             lists/lists.cpp
             longlong/longlongtest.cpp
+            longlong/ulonglongtest.cpp
             mbconv/convautotest.cpp
             mbconv/mbconvtest.cpp
Index: tests/longlong/ulonglongtest.cpp
--- /dev/null
+++ tests/longlong/ulonglongtest.cpp
@@ -0,0 +1,319 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/longlong/ulonglong.cpp
+// Purpose:     wxULongLong unit test
+// Author:      Vadim Zeitlin, Wlodzimierz ABX Skiba
+// Modified by: Francesco Montorsi
+// Created:     2006-07-31
+// RCS-ID:      $Id$
+// Copyright:   (c) 2004 Vadim Zeitlin, Wlodzimierz Skiba
+///////////////////////////////////////////////////////////////////////////////
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif // WX_PRECOMP
+
+#include "wx/longlong.h"
+#include "wx/timer.h"
+
+#if wxUSE_LONGLONG
+
+// ----------------------------------------------------------------------------
+// helpers for testing
+// ----------------------------------------------------------------------------
+
+// number of iterations in loops
+#define ITEMS 1000
+
+// make a 64 bit number from 4 16 bit ones
+#define MAKE_LL(x1, x2, x3, x4) wxULongLong((x1 << 16) | x2, (x3 << 16) | x3)
+
+// get a random 64 bit number
+#define RAND_LL()   MAKE_LL(rand(), rand(), rand(), rand())
+
+static const long testLongs[] =
+{
+    0,
+    1,
+    3,
+    LONG_MAX,
+    LONG_MAX-2,
+    0x1234,
+    0x1235
+};
+
+// ----------------------------------------------------------------------------
+// test class
+// ----------------------------------------------------------------------------
+
+class ULongLongTestCase : public CppUnit::TestCase
+{
+public:
+    ULongLongTestCase();
+
+private:
+    CPPUNIT_TEST_SUITE( ULongLongTestCase );
+        CPPUNIT_TEST( Conversion );
+        CPPUNIT_TEST( Comparison );
+        CPPUNIT_TEST( Addition );
+        CPPUNIT_TEST( Multiplication );
+        CPPUNIT_TEST( Division );
+        CPPUNIT_TEST( BitOperations );
+        CPPUNIT_TEST( ToString );
+    CPPUNIT_TEST_SUITE_END();
+
+    void Conversion();
+    void Comparison();
+    void Addition();
+    void Multiplication();
+    void Division();
+    void BitOperations();
+    void ToString();
+
+    DECLARE_NO_COPY_CLASS(ULongLongTestCase)
+};
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION( ULongLongTestCase );
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( ULongLongTestCase, "ULongLongTestCase" );
+
+ULongLongTestCase::ULongLongTestCase()
+{
+    srand((unsigned)time(NULL));
+}
+
+void ULongLongTestCase::Conversion()
+{
+    for ( size_t n = 0; n < ITEMS; n++ )
+    {
+        wxULongLong a = RAND_LL();
+
+        wxULongLong b(a.GetHi(), a.GetLo());
+        CPPUNIT_ASSERT( a == b );
+
+#if wxUSE_LONGLONG_WX
+        wxULongLongWx c(a.GetHi(), a.GetLo());
+        CPPUNIT_ASSERT( a == c );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+        wxULongLongNative d(a.GetHi(), a.GetLo());
+        CPPUNIT_ASSERT( a == d );
+#endif
+    }
+}
+
+void ULongLongTestCase::Comparison()
+{
+    static const long ls[2] =
+    {
+        0x1234,
+        0x1235,
+    };
+
+    wxULongLong lls[2];
+    lls[0] = ls[0];
+    lls[1] = ls[1];
+
+    for ( size_t n = 0; n < WXSIZEOF(testLongs); n++ )
+    {
+        for ( size_t m = 0; m < WXSIZEOF(lls); m++ )
+        {
+            CPPUNIT_ASSERT( (lls[m] < testLongs[n]) == (ls[m] < testLongs[n]) );
+            CPPUNIT_ASSERT( (lls[m] > testLongs[n]) == (ls[m] > testLongs[n]) );
+            CPPUNIT_ASSERT( (lls[m] <= testLongs[n]) == (ls[m] <= testLongs[n]) );
+            CPPUNIT_ASSERT( (lls[m] >= testLongs[n]) == (ls[m] >= testLongs[n]) );
+            CPPUNIT_ASSERT( (lls[m] != testLongs[n]) == (ls[m] != testLongs[n]) );
+            CPPUNIT_ASSERT( (lls[m] == testLongs[n]) == (ls[m] == testLongs[n]) );
+        }
+    }
+}
+
+void ULongLongTestCase::Addition()
+{
+    for ( size_t n = 0; n < ITEMS; n++ )
+    {
+        wxULongLong a = RAND_LL();
+        wxULongLong b = RAND_LL();
+        wxULongLong c = a + b;
+
+#if wxUSE_LONGLONG_NATIVE
+        wxULongLongNative a1 = a;
+        wxULongLongNative b1 = b;
+        wxULongLongNative c1 = a1 + b1;
+        CPPUNIT_ASSERT( c == c1 );
+#endif
+
+#if wxUSE_LONGLONG_WX
+        wxULongLongWx a2 = a;
+        wxULongLongWx b2 = b;
+        wxULongLongWx c2 = a2 + b2;
+        CPPUNIT_ASSERT( c == c2 );
+#endif
+    }
+}
+
+void ULongLongTestCase::Multiplication()
+{
+    for ( size_t n = 0; n < ITEMS; n++ )
+    {
+        wxULongLong a = RAND_LL();
+        wxULongLong b = RAND_LL();
+        wxULongLong c = a*b;
+
+        wxULongLong a1(a.GetHi(), a.GetLo());
+        wxULongLong b1(b.GetHi(), b.GetLo());
+        wxULongLong c1 = a1*b1;
+        CPPUNIT_ASSERT( c1 == c );
+
+#if wxUSE_LONGLONG_WX
+        wxULongLongWx a2(a.GetHi(), a.GetLo());
+        wxULongLongWx b2(b.GetHi(), b.GetLo());
+        wxULongLongWx c2 = a2*b2;
+        CPPUNIT_ASSERT( c2 == c );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+        wxULongLongNative a3(a.GetHi(), a.GetLo());
+        wxULongLongNative b3(b.GetHi(), b.GetLo());
+        wxULongLongNative c3 = a3*b3;
+        CPPUNIT_ASSERT( c3 == c );
+#endif
+    }
+}
+
+void ULongLongTestCase::Division()
+{
+    for ( size_t n = 0; n < ITEMS; n++ )
+    {
+        // get a random wxULongLong (shifting by 12 the MSB ensures that the
+        // multiplication will not overflow)
+        wxULongLong a = MAKE_LL((rand() >> 12), rand(), rand(), rand());
+
+        // get a random (but non null) long (not wxULongLong for now) divider
+        long l;
+        do
+        {
+           l = rand();
+        }
+        while ( !l );
+
+        wxULongLong q = a / l;
+        wxULongLong r = a % l;
+
+        CPPUNIT_ASSERT( a == ( q * l + r ) );
+
+#if wxUSE_LONGLONG_WX
+        wxULongLongWx a1(a.GetHi(), a.GetLo());
+        wxULongLongWx q1 = a1 / l;
+        wxULongLongWx r1 = a1 % l;
+        CPPUNIT_ASSERT( q == q1 );
+        CPPUNIT_ASSERT( r == r1 );
+        CPPUNIT_ASSERT( a1 == ( q1 * l + r1 ) );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+        wxULongLongNative a2(a.GetHi(), a.GetLo());
+        wxULongLongNative q2 = a2 / l;
+        wxULongLongNative r2 = a2 % l;
+        CPPUNIT_ASSERT( q == q2 );
+        CPPUNIT_ASSERT( r == r2 );
+        CPPUNIT_ASSERT( a2 == ( q2 * l + r2 ) );
+#endif
+    }
+}
+
+void ULongLongTestCase::BitOperations()
+{
+    for ( size_t n = 0; n < ITEMS; n++ )
+    {
+        wxULongLong a = RAND_LL();
+
+        for ( size_t n = 0; n < 33; n++ )
+        {
+            wxULongLong b(a.GetHi(), a.GetLo()), c, d = b, e;
+            d >>= n;
+            c = b >> n;
+            CPPUNIT_ASSERT( c == d );
+            d <<= n;
+            e = c << n;
+            CPPUNIT_ASSERT( d == e );
+
+#if wxUSE_LONGLONG_WX
+            wxULongLongWx b1(a.GetHi(), a.GetLo()), c1, d1 = b1, e1;
+            d1 >>= n;
+            c1 = b1 >> n;
+            CPPUNIT_ASSERT( c1 == d1 );
+            d1 <<= n;
+            e1 = c1 << n;
+            CPPUNIT_ASSERT( d1 == e1 );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+            wxULongLongNative b2(a.GetHi(), a.GetLo()), c2, d2 = b2, e2;
+            d2 >>= n;
+            c2 = b2 >> n;
+            CPPUNIT_ASSERT( c2 == d2 );
+            d2 <<= n;
+            e2 = c2 << n;
+            CPPUNIT_ASSERT( d2 == e2 );
+#endif
+        }
+    }
+}
+
+void ULongLongTestCase::ToString()
+{
+    wxString s1, s2;
+
+    for ( size_t n = 0; n < WXSIZEOF(testLongs); n++ )
+    {
+        wxULongLong a = testLongs[n];
+        s1 = wxString::Format(_T("%ld"), testLongs[n]);
+        s2 = a.ToString();
+        CPPUNIT_ASSERT( s1 == s2 );
+
+        s2 = wxEmptyString;
+        s2 << a;
+        CPPUNIT_ASSERT( s1 == s2 );
+
+#if wxUSE_LONGLONG_WX
+        wxULongLongWx a1 = testLongs[n];
+        s2 = a1.ToString();
+        CPPUNIT_ASSERT( s1 == s2 );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+        wxULongLongNative a2 = testLongs[n];
+        s2 = a2.ToString();
+        CPPUNIT_ASSERT( s1 == s2 );
+#endif
+    }
+
+    wxULongLong a(0x12345678, 0x87654321);
+    CPPUNIT_ASSERT( a.ToString() == _T("1311768467139281697") );
+
+#if wxUSE_LONGLONG_WX
+    wxULongLongWx a1(a.GetHi(), a.GetLo());
+    CPPUNIT_ASSERT( a1.ToString() == _T("1311768467139281697") );
+#endif
+
+#if wxUSE_LONGLONG_NATIVE
+    wxULongLongNative a2(a.GetHi(), a.GetLo());
+    CPPUNIT_ASSERT( a2.ToString() == _T("1311768467139281697") );
+#endif
+
+}
+
+#endif // wxUSE_LONGLONG

 	  	 

Index: src/msw/app.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/app.cpp,v
retrieving revision 1.176
diff -u -r1.176 app.cpp
--- src/msw/app.cpp	2003/01/12 22:20:33	1.176
+++ src/msw/app.cpp	2003/01/22 11:20:08
@@ -1149,24 +1149,24 @@
     if (event.MoreRequested())
         needMore = TRUE;
 
-    wxNode* node = win->GetChildren().First();
+    wxWindowList::Node *node = win->GetChildren().GetFirst();
     while (node)
     {
-        wxWindow* win = (wxWindow*) node->Data();
+        wxWindow* win = node->GetData();
         if (SendIdleEvents(win))
             needMore = TRUE;
 
-        node = node->Next();
+        node = node->GetNext();
     }
     return needMore;
 }
 
 void wxApp::DeletePendingObjects()
 {
-    wxNode *node = wxPendingDelete.First();
+    wxNode *node = wxPendingDelete.GetFirst();
     while (node)
     {
-        wxObject *obj = (wxObject *)node->Data();
+        wxObject *obj = node->GetData();
 
         delete obj;
 
@@ -1175,7 +1175,7 @@
 
         // Deleting one object may have deleted other pending
         // objects, so start from beginning of list again.
-        node = wxPendingDelete.First();
+        node = wxPendingDelete.GetFirst();
     }
 }
 
Index: src/msw/dde.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/dde.cpp,v
retrieving revision 1.28
diff -u -r1.28 dde.cpp
--- src/msw/dde.cpp	2003/01/07 18:11:47	1.28
+++ src/msw/dde.cpp	2003/01/22 11:23:42
@@ -124,12 +124,17 @@
 
 static DWORD DDEIdInst = 0L;
 static wxDDEConnection *DDECurrentlyConnecting = NULL;
-
 static wxList wxAtomTable(wxKEY_STRING);
-static wxList wxDDEClientObjects;
-static wxList wxDDEServerObjects;
+
+#include "wx/listimpl.cpp"
+
+WX_DEFINE_LIST(wxDDEClientList);
+WX_DEFINE_LIST(wxDDEServerList);
+
+static wxDDEClientList wxDDEClientObjects;
+static wxDDEServerList wxDDEServerObjects;
 
-static bool DDEInitialized = FALSE;
+static bool DDEInitialized = false;
 
 // ----------------------------------------------------------------------------
 // private classes
@@ -142,7 +147,7 @@
 {
 public:
     wxDDEModule() {}
-    bool OnInit() { return TRUE; }
+    bool OnInit() { return true; }
     void OnExit() { wxDDECleanUp(); }
 
 private:
@@ -180,20 +185,20 @@
         }
         else
         {
-            DDEInitialized = TRUE;
+            DDEInitialized = true;
         }
     }
 }
 
 void wxDDECleanUp()
 {
-    wxDDEClientObjects.DeleteContents(TRUE);
+    wxDDEClientObjects.DeleteContents(true);
     wxDDEClientObjects.Clear();
-    wxDDEClientObjects.DeleteContents(FALSE);
+    wxDDEClientObjects.DeleteContents(false);
 
-    wxDDEServerObjects.DeleteContents(TRUE);
+    wxDDEServerObjects.DeleteContents(true);
     wxDDEServerObjects.Clear();
-    wxDDEServerObjects.DeleteContents(FALSE);
+    wxDDEServerObjects.DeleteContents(false);
 
     wxAtomTable.Clear();
 
@@ -211,64 +216,75 @@
 // Global find connection
 static wxDDEConnection *DDEFindConnection(HCONV hConv)
 {
-  wxNode *node = wxDDEServerObjects.First();
-  wxDDEConnection *found = NULL;
-  while (node && !found)
-  {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
-    found = object->FindConnection((WXHCONV) hConv);
-    node = node->Next();
-  }
-  if (found)
-      return found;
-
-  node = wxDDEClientObjects.First();
-  while (node && !found)
-  {
-    wxDDEClient *object = (wxDDEClient *)node->Data();
-    found = object->FindConnection((WXHCONV) hConv);
-    node = node->Next();
-  }
-  return found;
+    wxDDEServerList::Node *serverNode = wxDDEServerObjects.GetFirst();
+    wxDDEConnection *found = NULL;
+    while (serverNode && !found)
+    {
+        wxDDEServer *object = serverNode->GetData();
+        found = object->FindConnection((WXHCONV) hConv);
+        serverNode = serverNode->GetNext();
+    }
+
+    if (found)
+    {
+        return found;
+    }
+
+    wxDDEClientList::Node *clientNode = wxDDEClientObjects.GetFirst();
+    while (clientNode && !found)
+    {
+        wxDDEClient *object = clientNode->GetData();
+        found = object->FindConnection((WXHCONV) hConv);
+        clientNode = clientNode->GetNext();
+    }
+    return found;
 }
 
 // Global delete connection
 static void DDEDeleteConnection(HCONV hConv)
 {
-  wxNode *node = wxDDEServerObjects.First();
-  bool found = FALSE;
-  while (node && !found)
-  {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
-    found = object->DeleteConnection((WXHCONV) hConv);
-    node = node->Next();
-  }
-  if (found)
-    return;
-
-  node = wxDDEClientObjects.First();
-  while (node && !found)
-  {
-    wxDDEClient *object = (wxDDEClient *)node->Data();
-    found = object->DeleteConnection((WXHCONV) hConv);
-    node = node->Next();
-  }
+    wxDDEServerList::Node *serverNode = wxDDEServerObjects.GetFirst();
+    bool found = false;
+    while (serverNode && !found)
+    {
+        wxDDEServer *object = serverNode->GetData();
+        found = object->DeleteConnection((WXHCONV) hConv);
+        serverNode = serverNode->GetNext();
+    }
+    if (found)
+    {
+        return;
+    }
+
+    wxDDEClientList::Node *clientNode = wxDDEClientObjects.GetFirst();
+    while (clientNode && !found)
+    {
+        wxDDEClient *object = clientNode->GetData();
+        found = object->DeleteConnection((WXHCONV) hConv);
+        clientNode = clientNode->GetNext();
+    }
 }
 
 // Find a server from a service name
 static wxDDEServer *DDEFindServer(const wxString& s)
 {
-  wxNode *node = wxDDEServerObjects.First();
-  wxDDEServer *found = NULL;
-  while (node && !found)
-  {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
-
-    if (object->GetServiceName() == s)
-      found = object;
-    else node = node->Next();
-  }
-  return found;
+    wxDDEServerList::Node *node = wxDDEServerObjects.GetFirst();
+    wxDDEServer *found = NULL;
+    while (node && !found)
+    {
+        wxDDEServer *object = node->GetData();
+
+        if (object->GetServiceName() == s)
+        {
+            found = object;
+        }
+        else
+        {
+            node = node->GetNext();
+        }
+    }
+
+    return found;
 }
 
 // ----------------------------------------------------------------------------
@@ -291,10 +307,10 @@
         DDELogError(wxString::Format(_("Failed to register DDE server '%s'"),
                                      server.c_str()));
 
-        return FALSE;
+        return false;
     }
 
-    return TRUE;
+    return true;
 }
 
 wxDDEServer::~wxDDEServer()
@@ -311,22 +327,22 @@
 
     wxDDEServerObjects.DeleteObject(this);
 
-    wxNode *node = m_connections.First();
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
-        wxNode *next = node->Next();
+        wxDDEConnection *connection = node->GetData();
+        wxDDEConnectionList::Node *next = node->GetNext();
         connection->SetConnected(false);
         connection->OnDisconnect(); // May delete the node implicitly
         node = next;
     }
 
     // If any left after this, delete them
-    node = m_connections.First();
+    node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
-        wxNode *next = node->Next();
+        wxDDEConnection *connection = node->GetData();
+        wxDDEConnectionList::Node *next = node->GetNext();
         delete connection;
         node = next;
     }
@@ -339,14 +355,14 @@
 
 wxDDEConnection *wxDDEServer::FindConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
             found = connection;
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -354,17 +370,17 @@
 // Only delete the entry in the map, not the actual connection
 bool wxDDEServer::DeleteConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
-    bool found = FALSE;
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    bool found = false;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
         {
-            found = TRUE;
+            found = true;
             delete node;
         }
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -383,18 +399,18 @@
 wxDDEClient::~wxDDEClient()
 {
     wxDDEClientObjects.DeleteObject(this);
-    wxNode *node = m_connections.First();
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = node->GetData();
         delete connection;  // Deletes the node implicitly (see ~wxDDEConnection)
-        node = m_connections.First();
+        node = m_connections.GetFirst();
     }
 }
 
 bool wxDDEClient::ValidHost(const wxString& /* host */)
 {
-    return TRUE;
+    return true;
 }
 
 wxConnectionBase *wxDDEClient::MakeConnection(const wxString& WXUNUSED(host),
@@ -431,14 +447,14 @@
 
 wxDDEConnection *wxDDEClient::FindConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
             found = connection;
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -446,17 +462,17 @@
 // Only delete the entry in the map, not the actual connection
 bool wxDDEClient::DeleteConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
-    bool found = FALSE;
+    wxDDEConnectionList::Node *node = m_connections.GetFirst();
+    bool found = false;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = node->GetData();
         if (connection->m_hConv == conv)
         {
-            found = TRUE;
+            found = true;
             delete node;
         }
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -660,7 +676,7 @@
 bool wxDDEConnection::OnDisconnect()
 {
     delete this;
-    return TRUE;
+    return true;
 }
 
 // ----------------------------------------------------------------------------
@@ -697,7 +713,7 @@
                         connection->m_hConv = 0;
                         connection->m_topicName = topic;
                         DDECurrentlyConnecting = connection;
-                        return (DDERETURN)(DWORD)TRUE;
+                        return (DDERETURN)(DWORD)true;
                     }
                 }
                 break;
@@ -709,7 +725,7 @@
                 {
                     DDECurrentlyConnecting->m_hConv = (WXHCONV) hConv;
                     DDECurrentlyConnecting = NULL;
-                    return (DDERETURN)(DWORD)TRUE;
+                    return (DDERETURN)(DWORD)true;
                 }
                 break;
             }
@@ -723,7 +739,7 @@
                     if (connection->OnDisconnect())
                     {
                         DDEDeleteConnection(hConv);  // Delete mapping: hConv => connection
-                        return (DDERETURN)(DWORD)TRUE;
+                        return (DDERETURN)(DWORD)true;
                     }
                 }
                 break;
@@ -925,11 +941,11 @@
 {
     wxNode *node = wxAtomTable.Find(string);
     if (node)
-        return (HSZ)node->Data();
+        return (HSZ)node->GetData();
     else
     {
         DDEAddAtom(string);
-        return (HSZ)(wxAtomTable.Find(string)->Data());
+        return (HSZ)(wxAtomTable.Find(string)->GetData());
     }
 }
 
Index: include/wx/dde.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dde.h,v
retrieving revision 1.7
diff -u -r1.7 dde.h
--- include/wx/dde.h	2003/01/04 09:22:52	1.7
+++ include/wx/dde.h	2003/01/22 11:50:47
@@ -1,6 +1,17 @@
 #ifndef _WX_DDE_H_BASE_
 #define _WX_DDE_H_BASE_
 
+#include "wx/list.h"
+
+class wxDDEClient;
+class wxDDEServer;
+class wxDDEConnection;
+
+WX_DECLARE_LIST(wxDDEClient, wxDDEClientList);
+WX_DECLARE_LIST(wxDDEServer, wxDDEServerList);
+WX_DECLARE_LIST(wxDDEConnection, wxDDEConnectionList);
+
+
 #if defined(__WXMSW__)
 #include "wx/msw/dde.h"
 #elif defined(__WXMOTIF__)
Index: include/wx/msw/dde.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/dde.h,v
retrieving revision 1.11
diff -u -r1.11 dde.h
--- include/wx/msw/dde.h	2003/01/02 23:37:45	1.11
+++ include/wx/msw/dde.h	2003/01/22 11:50:51
@@ -100,12 +100,15 @@
   wxDDEConnection *FindConnection(WXHCONV conv);
   bool DeleteConnection(WXHCONV conv);
   inline wxString& GetServiceName(void) const { return (wxString&) m_serviceName; }
-  inline wxList& GetConnections(void) const { return (wxList&) m_connections; }
+    inline wxDDEConnectionList& GetConnections(void) const
+    {
+        return (wxDDEConnectionList&) m_connections;
+    }
 
- protected:
-  int       m_lastError;
-  wxString  m_serviceName;
-  wxList    m_connections;
+protected:
+    int       m_lastError;
+    wxString  m_serviceName;
+    wxDDEConnectionList m_connections;
 };
 
 class WXDLLEXPORT wxDDEClient: public wxClientBase
@@ -126,11 +129,15 @@
   // Find/delete wxDDEConnection corresponding to the HCONV
   wxDDEConnection *FindConnection(WXHCONV conv);
   bool DeleteConnection(WXHCONV conv);
-  inline wxList& GetConnections(void) const { return (wxList&) m_connections; }
 
- protected:
-  int       m_lastError;
-  wxList    m_connections;
+    inline wxDDEConnectionList& GetConnections(void) const
+    {
+        return (wxDDEConnectionList&) m_connections;
+    }
+
+protected:
+    int       m_lastError;
+    wxDDEConnectionList m_connections;
 };
 
 void WXDLLEXPORT wxDDEInitialize();
Index: src/msw/gdiimage.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/gdiimage.cpp,v
retrieving revision 1.25
diff -u -r1.25 gdiimage.cpp
--- src/msw/gdiimage.cpp	2002/12/04 14:09:13	1.25
+++ src/msw/gdiimage.cpp	2003/01/22 11:20:44
@@ -45,6 +45,10 @@
 #include "wx/msw/gdiimage.h"
 #include "wx/bitmap.h"
 
+#include "wx/listimpl.cpp"
+WX_DEFINE_LIST(wxGDIImageHandlerList);
+
+
 #ifdef __WIN16__
 #   include "wx/msw/curico.h"
 #endif // __WIN16__
@@ -191,7 +195,7 @@
 // implementation
 // ============================================================================
 
-wxList wxGDIImage::ms_handlers;
+wxGDIImageHandlerList wxGDIImage::ms_handlers;
 
 // ----------------------------------------------------------------------------
 // wxGDIImage functions forwarded to wxGDIImageRefData
@@ -241,13 +245,13 @@
 
 wxGDIImageHandler *wxGDIImage::FindHandler(const wxString& name)
 {
-    wxNode *node = ms_handlers.First();
+    wxGDIImageHandlerList::Node *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = node->GetData();
         if ( handler->GetName() == name )
             return handler;
-        node = node->Next();
+        node = node->GetNext();
     }
 
     return NULL;
@@ -256,31 +260,31 @@
 wxGDIImageHandler *wxGDIImage::FindHandler(const wxString& extension,
                                            long type)
 {
-    wxNode *node = ms_handlers.First();
+    wxGDIImageHandlerList::Node *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = node->GetData();
         if ( (handler->GetExtension() = extension) &&
              (type == -1 || handler->GetType() == type) )
         {
             return handler;
         }
 
-        node = node->Next();
+        node = node->GetNext();
     }
     return NULL;
 }
 
 wxGDIImageHandler *wxGDIImage::FindHandler(long type)
 {
-    wxNode *node = ms_handlers.First();
+    wxGDIImageHandlerList::Node *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = node->GetData();
         if ( handler->GetType() == type )
             return handler;
 
-        node = node->Next();
+        node = node->GetNext();
     }
 
     return NULL;
@@ -288,11 +292,11 @@
 
 void wxGDIImage::CleanUpHandlers()
 {
-    wxNode *node = ms_handlers.First();
+    wxGDIImageHandlerList::Node *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
-        wxNode *next = node->Next();
+        wxGDIImageHandler *handler = node->GetData();
+        wxGDIImageHandlerList::Node *next = node->GetNext();
         delete handler;
         delete node;
         node = next;
Index: include/wx/msw/gdiimage.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/gdiimage.h,v
retrieving revision 1.3
diff -u -r1.3 gdiimage.h
--- include/wx/msw/gdiimage.h	2002/12/04 13:59:04	1.3
+++ include/wx/msw/gdiimage.h	2003/01/22 11:21:01
@@ -28,6 +28,8 @@
 class WXDLLEXPORT wxGDIImageHandler;
 class WXDLLEXPORT wxGDIImage;
 
+WX_DECLARE_LIST(wxGDIImageHandler, wxGDIImageHandlerList);
+
 // ----------------------------------------------------------------------------
 // wxGDIImageRefData: common data fields for all derived classes
 // ----------------------------------------------------------------------------
@@ -135,7 +137,7 @@
 {
 public:
     // handlers list interface
-    static wxList& GetHandlers() { return ms_handlers; }
+    static wxGDIImageHandlerList& GetHandlers() { return ms_handlers; }
 
     static void AddHandler(wxGDIImageHandler *handler);
     static void InsertHandler(wxGDIImageHandler *handler);
@@ -186,7 +188,7 @@
     // create the data for the derived class here
     virtual wxGDIImageRefData *CreateData() const = 0;
 
-    static wxList ms_handlers;
+    static wxGDIImageHandlerList ms_handlers;
 };
 
 #endif // _WX_MSW_GDIIMAGE_H_
Index: src/msw/mdi.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/mdi.cpp,v
retrieving revision 1.88
diff -u -r1.88 mdi.cpp
--- src/msw/mdi.cpp	2002/12/06 23:42:16	1.88
+++ src/msw/mdi.cpp	2003/01/22 11:21:20
@@ -557,10 +557,10 @@
 
     if ( IsMdiCommandId(id) )
     {
-        wxWindowList::Node* node = GetChildren().GetFirst();
+        wxWindowList::Node *node = GetChildren().GetFirst();
         while ( node )
         {
-            wxWindow* child = node->GetData();
+            wxWindow *child = node->GetData();
             if ( child->GetHWND() )
             {
                 long childId = wxGetWindowId(child->GetHWND());
@@ -1245,16 +1245,16 @@
     {
         if (GetParent())
         {
-            wxNode* node = GetParent()->GetChildren().First();
+            wxWindowList::Node *node = GetParent()->GetChildren().GetFirst();
             while (node)
             {
-                wxWindow* child = (wxWindow*) node->Data();
+                wxWindow *child = node->GetData();
                 if (child->IsKindOf(CLASSINFO(wxMDIChildFrame)))
                 {
                     HWND hWnd = (HWND) child->GetHWND();
                    ::RedrawWindow(hWnd, NULL, NULL, RDW_FRAME|RDW_ALLCHILDREN|RDW_INVALIDATE );
                 }
-                node = node->Next();
+                node = node->GetNext();
             }
         }
     }
Index: src/msw/taskbar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/taskbar.cpp,v
retrieving revision 1.26
diff -u -r1.26 taskbar.cpp
--- src/msw/taskbar.cpp	2002/12/04 14:09:22	1.26
+++ src/msw/taskbar.cpp	2003/01/22 11:21:28
@@ -49,12 +49,15 @@
     #include <shellapi.h>
 #endif
 
+#include "wx/listimpl.cpp"
+WX_DEFINE_LIST(wxTaskBarIconList);
+
 LRESULT APIENTRY _EXPORT wxTaskBarIconWindowProc( HWND hWnd, unsigned msg,
                                      UINT wParam, LONG lParam );
 
 wxChar *wxTaskBarWindowClass = (wxChar*) wxT("wxTaskBarWindowClass");
 
-wxList wxTaskBarIcon::sm_taskBarIcons;
+wxTaskBarIconList wxTaskBarIcon::sm_taskBarIcons;
 bool   wxTaskBarIcon::sm_registeredClass = FALSE;
 UINT   wxTaskBarIcon::sm_taskbarMsg = 0;
 
@@ -247,13 +250,13 @@
 
 wxTaskBarIcon* wxTaskBarIcon::FindObjectForHWND(WXHWND hWnd)
 {
-    wxNode*node = sm_taskBarIcons.First();
+    wxTaskBarIconList::Node *node = sm_taskBarIcons.GetFirst();
     while (node)
     {
-        wxTaskBarIcon* obj = (wxTaskBarIcon*) node->Data();
+        wxTaskBarIcon *obj = node->GetData();
         if (obj->GetHWND() == hWnd)
             return obj;
-        node = node->Next();
+        node = node->GetNext();
     }
     return NULL;
 }
@@ -372,7 +375,7 @@
 LRESULT APIENTRY _EXPORT wxTaskBarIconWindowProc( HWND hWnd, unsigned msg,
                                      UINT wParam, LONG lParam )
 {
-    wxTaskBarIcon* obj = wxTaskBarIcon::FindObjectForHWND((WXHWND) hWnd);
+    wxTaskBarIcon *obj = wxTaskBarIcon::FindObjectForHWND((WXHWND) hWnd);
     if (obj)
         return obj->WindowProc((WXHWND) hWnd, msg, wParam, lParam);
     else
Index: include/wx/msw/taskbar.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/taskbar.h,v
retrieving revision 1.10
diff -u -r1.10 taskbar.h
--- include/wx/msw/taskbar.h	2002/12/04 13:59:09	1.10
+++ include/wx/msw/taskbar.h	2003/01/22 12:03:47
@@ -17,10 +17,14 @@
 #pragma interface "taskbar.h"
 #endif
 
-#include <wx/event.h>
-#include <wx/list.h>
-#include <wx/icon.h>
+#include "wx/event.h"
+#include "wx/list.h"
+#include "wx/icon.h"
 
+class wxTaskBarIcon;
+
+WX_DECLARE_LIST(wxTaskBarIcon, wxTaskBarIconList);
+
 class WXDLLEXPORT wxTaskBarIcon: public wxEvtHandler {
     DECLARE_DYNAMIC_CLASS(wxTaskBarIcon)
 public:
@@ -58,7 +62,7 @@
 protected:
     WXHWND          m_hWnd;
     bool            m_iconAdded;
-    static wxList   sm_taskBarIcons;
+    static wxTaskBarIconList sm_taskBarIcons;
     static bool     sm_registeredClass;
     static unsigned int sm_taskbarMsg;
 
Index: src/msw/timer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/timer.cpp,v
retrieving revision 1.18
diff -u -r1.18 timer.cpp
--- src/msw/timer.cpp	2002/05/12 22:46:12	1.18
+++ src/msw/timer.cpp	2003/01/22 11:21:36
@@ -140,7 +140,7 @@
 
     wxCHECK_MSG( node, 0, wxT("bogus timer id in wxTimerProc") );
 
-    wxProcessTimer(*(wxTimer *)node->Data());
+    wxProcessTimer(*(wxTimer *)node->GetData());
 
     return 0;
 }
Index: src/msw/treectrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/treectrl.cpp,v
retrieving revision 1.137
diff -u -r1.137 treectrl.cpp
--- src/msw/treectrl.cpp	2003/01/02 23:38:08	1.137
+++ src/msw/treectrl.cpp	2003/01/22 11:31:38
@@ -726,7 +726,7 @@
     {
         for ( wxNode *node = m_attrs.Next(); node; node = m_attrs.Next() )
         {
-            delete (wxTreeItemAttr *)node->Data();
+            delete (wxTreeItemAttr *)node->GetData();
         }
 
         // prevent TVN_DELETEITEM handler from deleting the attributes again!

 	  	 

Index: src/msw/app.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/app.cpp,v
retrieving revision 1.176
diff -u -r1.176 app.cpp
--- src/msw/app.cpp	2003/01/12 22:20:33	1.176
+++ src/msw/app.cpp	2003/01/14 23:23:13
@@ -1149,24 +1149,24 @@
     if (event.MoreRequested())
         needMore = TRUE;
 
-    wxNode* node = win->GetChildren().First();
+    wxNode* node = (wxNode *) win->GetChildren().GetFirst();
     while (node)
     {
-        wxWindow* win = (wxWindow*) node->Data();
+        wxWindow* win = (wxWindow*) node->GetData();
         if (SendIdleEvents(win))
             needMore = TRUE;
 
-        node = node->Next();
+        node = node->GetNext();
     }
     return needMore;
 }
 
 void wxApp::DeletePendingObjects()
 {
-    wxNode *node = wxPendingDelete.First();
+    wxNode *node = wxPendingDelete.GetFirst();
     while (node)
     {
-        wxObject *obj = (wxObject *)node->Data();
+        wxObject *obj = (wxObject *)node->GetData();
 
         delete obj;
 
@@ -1175,7 +1175,7 @@
 
         // Deleting one object may have deleted other pending
         // objects, so start from beginning of list again.
-        node = wxPendingDelete.First();
+        node = wxPendingDelete.GetFirst();
     }
 }
 
Index: src/msw/dde.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/dde.cpp,v
retrieving revision 1.28
diff -u -r1.28 dde.cpp
--- src/msw/dde.cpp	2003/01/07 18:11:47	1.28
+++ src/msw/dde.cpp	2003/01/14 23:23:32
@@ -211,23 +211,23 @@
 // Global find connection
 static wxDDEConnection *DDEFindConnection(HCONV hConv)
 {
-  wxNode *node = wxDDEServerObjects.First();
+  wxNode *node = wxDDEServerObjects.GetFirst();
   wxDDEConnection *found = NULL;
   while (node && !found)
   {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
+    wxDDEServer *object = (wxDDEServer *)node->GetData();
     found = object->FindConnection((WXHCONV) hConv);
-    node = node->Next();
+    node = node->GetNext();
   }
   if (found)
       return found;
 
-  node = wxDDEClientObjects.First();
+  node = wxDDEClientObjects.GetFirst();
   while (node && !found)
   {
-    wxDDEClient *object = (wxDDEClient *)node->Data();
+    wxDDEClient *object = (wxDDEClient *)node->GetData();
     found = object->FindConnection((WXHCONV) hConv);
-    node = node->Next();
+    node = node->GetNext();
   }
   return found;
 }
@@ -235,38 +235,38 @@
 // Global delete connection
 static void DDEDeleteConnection(HCONV hConv)
 {
-  wxNode *node = wxDDEServerObjects.First();
+  wxNode *node = wxDDEServerObjects.GetFirst();
   bool found = FALSE;
   while (node && !found)
   {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
+    wxDDEServer *object = (wxDDEServer *)node->GetData();
     found = object->DeleteConnection((WXHCONV) hConv);
-    node = node->Next();
+    node = node->GetNext();
   }
   if (found)
     return;
 
-  node = wxDDEClientObjects.First();
+  node = wxDDEClientObjects.GetFirst();
   while (node && !found)
   {
-    wxDDEClient *object = (wxDDEClient *)node->Data();
+    wxDDEClient *object = (wxDDEClient *)node->GetData();
     found = object->DeleteConnection((WXHCONV) hConv);
-    node = node->Next();
+    node = node->GetNext();
   }
 }
 
 // Find a server from a service name
 static wxDDEServer *DDEFindServer(const wxString& s)
 {
-  wxNode *node = wxDDEServerObjects.First();
+  wxNode *node = wxDDEServerObjects.GetFirst();
   wxDDEServer *found = NULL;
   while (node && !found)
   {
-    wxDDEServer *object = (wxDDEServer *)node->Data();
+    wxDDEServer *object = (wxDDEServer *)node->GetData();
 
     if (object->GetServiceName() == s)
       found = object;
-    else node = node->Next();
+    else node = node->GetNext();
   }
   return found;
 }
@@ -311,22 +311,22 @@
 
     wxDDEServerObjects.DeleteObject(this);
 
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
-        wxNode *next = node->Next();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
+        wxNode *next = node->GetNext();
         connection->SetConnected(false);
         connection->OnDisconnect(); // May delete the node implicitly
         node = next;
     }
 
     // If any left after this, delete them
-    node = m_connections.First();
+    node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
-        wxNode *next = node->Next();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
+        wxNode *next = node->GetNext();
         delete connection;
         node = next;
     }
@@ -339,14 +339,14 @@
 
 wxDDEConnection *wxDDEServer::FindConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
         if (connection->m_hConv == conv)
             found = connection;
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -354,17 +354,17 @@
 // Only delete the entry in the map, not the actual connection
 bool wxDDEServer::DeleteConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     bool found = FALSE;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
         if (connection->m_hConv == conv)
         {
             found = TRUE;
             delete node;
         }
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -383,12 +383,12 @@
 wxDDEClient::~wxDDEClient()
 {
     wxDDEClientObjects.DeleteObject(this);
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     while (node)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
         delete connection;  // Deletes the node implicitly (see ~wxDDEConnection)
-        node = m_connections.First();
+        node = m_connections.GetFirst();
     }
 }
 
@@ -431,14 +431,14 @@
 
 wxDDEConnection *wxDDEClient::FindConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     wxDDEConnection *found = NULL;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
         if (connection->m_hConv == conv)
             found = connection;
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -446,17 +446,17 @@
 // Only delete the entry in the map, not the actual connection
 bool wxDDEClient::DeleteConnection(WXHCONV conv)
 {
-    wxNode *node = m_connections.First();
+    wxNode *node = m_connections.GetFirst();
     bool found = FALSE;
     while (node && !found)
     {
-        wxDDEConnection *connection = (wxDDEConnection *)node->Data();
+        wxDDEConnection *connection = (wxDDEConnection *)node->GetData();
         if (connection->m_hConv == conv)
         {
             found = TRUE;
             delete node;
         }
-        else node = node->Next();
+        else node = node->GetNext();
     }
     return found;
 }
@@ -925,11 +925,11 @@
 {
     wxNode *node = wxAtomTable.Find(string);
     if (node)
-        return (HSZ)node->Data();
+        return (HSZ)node->GetData();
     else
     {
         DDEAddAtom(string);
-        return (HSZ)(wxAtomTable.Find(string)->Data());
+        return (HSZ)(wxAtomTable.Find(string)->GetData());
     }
 }
 
Index: src/msw/gdiimage.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/gdiimage.cpp,v
retrieving revision 1.25
diff -u -r1.25 gdiimage.cpp
--- src/msw/gdiimage.cpp	2002/12/04 14:09:13	1.25
+++ src/msw/gdiimage.cpp	2003/01/14 23:23:44
@@ -241,13 +241,13 @@
 
 wxGDIImageHandler *wxGDIImage::FindHandler(const wxString& name)
 {
-    wxNode *node = ms_handlers.First();
+    wxNode *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->GetData();
         if ( handler->GetName() == name )
             return handler;
-        node = node->Next();
+        node = node->GetNext();
     }
 
     return NULL;
@@ -256,31 +256,31 @@
 wxGDIImageHandler *wxGDIImage::FindHandler(const wxString& extension,
                                            long type)
 {
-    wxNode *node = ms_handlers.First();
+    wxNode *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->GetData();
         if ( (handler->GetExtension() = extension) &&
              (type == -1 || handler->GetType() == type) )
         {
             return handler;
         }
 
-        node = node->Next();
+        node = node->GetNext();
     }
     return NULL;
 }
 
 wxGDIImageHandler *wxGDIImage::FindHandler(long type)
 {
-    wxNode *node = ms_handlers.First();
+    wxNode *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
+        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->GetData();
         if ( handler->GetType() == type )
             return handler;
 
-        node = node->Next();
+        node = node->GetNext();
     }
 
     return NULL;
@@ -288,11 +288,11 @@
 
 void wxGDIImage::CleanUpHandlers()
 {
-    wxNode *node = ms_handlers.First();
+    wxNode *node = ms_handlers.GetFirst();
     while ( node )
     {
-        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->Data();
-        wxNode *next = node->Next();
+        wxGDIImageHandler *handler = (wxGDIImageHandler *)node->GetData();
+        wxNode *next = node->GetNext();
         delete handler;
         delete node;
         node = next;
Index: src/msw/mdi.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/mdi.cpp,v
retrieving revision 1.88
diff -u -r1.88 mdi.cpp
--- src/msw/mdi.cpp	2002/12/06 23:42:16	1.88
+++ src/msw/mdi.cpp	2003/01/14 23:24:10
@@ -1245,16 +1245,16 @@
     {
         if (GetParent())
         {
-            wxNode* node = GetParent()->GetChildren().First();
+            wxNode *node = (wxNode *) GetParent()->GetChildren().GetFirst();
             while (node)
             {
-                wxWindow* child = (wxWindow*) node->Data();
+                wxWindow *child = (wxWindow *) node->GetData();
                 if (child->IsKindOf(CLASSINFO(wxMDIChildFrame)))
                 {
                     HWND hWnd = (HWND) child->GetHWND();
                    ::RedrawWindow(hWnd, NULL, NULL, RDW_FRAME|RDW_ALLCHILDREN|RDW_INVALIDATE );
                 }
-                node = node->Next();
+                node = node->GetNext();
             }
         }
     }
Index: src/msw/taskbar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/taskbar.cpp,v
retrieving revision 1.26
diff -u -r1.26 taskbar.cpp
--- src/msw/taskbar.cpp	2002/12/04 14:09:22	1.26
+++ src/msw/taskbar.cpp	2003/01/14 23:24:21
@@ -247,13 +247,13 @@
 
 wxTaskBarIcon* wxTaskBarIcon::FindObjectForHWND(WXHWND hWnd)
 {
-    wxNode*node = sm_taskBarIcons.First();
+    wxNode*node = sm_taskBarIcons.GetFirst();
     while (node)
     {
-        wxTaskBarIcon* obj = (wxTaskBarIcon*) node->Data();
+        wxTaskBarIcon* obj = (wxTaskBarIcon*) node->GetData();
         if (obj->GetHWND() == hWnd)
             return obj;
-        node = node->Next();
+        node = node->GetNext();
     }
     return NULL;
 }
Index: src/msw/timer.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/timer.cpp,v
retrieving revision 1.18
diff -u -r1.18 timer.cpp
--- src/msw/timer.cpp	2002/05/12 22:46:12	1.18
+++ src/msw/timer.cpp	2003/01/14 23:24:33
@@ -140,7 +140,7 @@
 
     wxCHECK_MSG( node, 0, wxT("bogus timer id in wxTimerProc") );
 
-    wxProcessTimer(*(wxTimer *)node->Data());
+    wxProcessTimer(*(wxTimer *)node->GetData());
 
     return 0;
 }
Index: src/msw/treectrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/treectrl.cpp,v
retrieving revision 1.137
diff -u -r1.137 treectrl.cpp
--- src/msw/treectrl.cpp	2003/01/02 23:38:08	1.137
+++ src/msw/treectrl.cpp	2003/01/14 23:24:48
@@ -726,7 +726,7 @@
     {
         for ( wxNode *node = m_attrs.Next(); node; node = m_attrs.Next() )
         {
-            delete (wxTreeItemAttr *)node->Data();
+            delete (wxTreeItemAttr *)node->GetData();
         }
 
         // prevent TVN_DELETEITEM handler from deleting the attributes again!

 	  	 

Index: include/wx/settings.h
===================================================================
--- include/wx/settings.h	(revision 78364)
+++ include/wx/settings.h	(working copy)
@@ -204,6 +204,8 @@
     static int GetMetric(wxSystemMetric index, wxWindow *win = NULL);
 #endif // __WXUNIVERSAL__
 
+    static wxColour GetStringColour(const wxString& name);
+
     // Get system screen design (desktop, pda, ..) used for
     // laying out various dialogs.
     static wxSystemScreenType GetScreenType();
Index: interface/wx/colour.h
===================================================================
--- interface/wx/colour.h	(revision 78364)
+++ interface/wx/colour.h	(working copy)
@@ -77,7 +77,7 @@
 
     /**
         @param colourName
-            The colour name.
+            The colour name (@see Set()).
     */
     wxColour(const wxString& colourName);
 
@@ -189,7 +189,7 @@
         string (third overload).
 
         When using third form, Set() accepts: colour names (those listed in
-        wxColourDatabase), the CSS-like @c "rgb(r,g,b)" or @c "rgba(r,g,b,a)" syntax 
+        wxColourDatabase and ::wxSystemColour), the CSS-like @c "rgb(r,g,b)" or @c "rgba(r,g,b,a)" syntax 
         (case insensitive) and the HTML-like syntax: @c "#" followed by 6 hexadecimal 
         digits for red, green, blue components.
 
Index: interface/wx/settings.h
===================================================================
--- interface/wx/settings.h	(revision 78364)
+++ interface/wx/settings.h	(working copy)
@@ -254,6 +254,17 @@
     static wxColour GetColour(wxSystemColour index);
 
     /**
+        Returns a system colour from the string name given among the ones defined in ::wxSystemColour enum.
+
+        @param name 
+            Can be one of the ::wxSystemColour enum value given in string (eg. "wxSYS_COLOUR_MENU").
+            
+        @return
+            The expected system color or wxNullColour if not found.
+    */
+    static wxColour GetStringColour(const wxString& name);
+
+    /**
         Returns a system font.
 
         @param index 
Index: src/common/colourcmn.cpp
===================================================================
--- src/common/colourcmn.cpp	(revision 78364)
+++ src/common/colourcmn.cpp	(working copy)
@@ -169,17 +169,25 @@
             (unsigned char)(tmp >> 8),
             (unsigned char)tmp);
     }
-    else if (wxTheColourDatabase) // a colour name ?
+    else // a colour name ?
     {
+        wxColour clr;
         // we can't do
         // *this = wxTheColourDatabase->Find(str)
         // because this place can be called from constructor
         // and 'this' could not be available yet
-        wxColour clr = wxTheColourDatabase->Find(str);
+        if (wxTheColourDatabase)
+            clr = wxTheColourDatabase->Find(str);
+
+        if (!clr.IsOk())
+            clr = wxSystemSettings::GetStringColour(str);
+
         if (clr.IsOk())
+        {
             Set((unsigned char)clr.Red(),
                 (unsigned char)clr.Green(),
                 (unsigned char)clr.Blue());
+        }
     }
 
     if (IsOk())
Index: src/common/settcmn.cpp
===================================================================
--- src/common/settcmn.cpp	(revision 78364)
+++ src/common/settcmn.cpp	(working copy)
@@ -36,6 +36,58 @@
 // ----------------------------------------------------------------------------
 // ----------------------------------------------------------------------------
 
+wxColour wxSystemSettings::GetStringColour(const wxString& name)
+{
+    if (!name.empty())
+    {
+        #define SYSCLR(clr) \
+            if (name.IsSameAs(wxT(#clr))) return wxSystemSettings::GetColour(clr);
+        SYSCLR(wxSYS_COLOUR_SCROLLBAR)
+        SYSCLR(wxSYS_COLOUR_DESKTOP)
+        SYSCLR(wxSYS_COLOUR_ACTIVECAPTION)
+        SYSCLR(wxSYS_COLOUR_INACTIVECAPTION)
+        SYSCLR(wxSYS_COLOUR_MENU)
+        SYSCLR(wxSYS_COLOUR_WINDOW)
+        SYSCLR(wxSYS_COLOUR_WINDOWFRAME)
+        SYSCLR(wxSYS_COLOUR_MENUTEXT)
+        SYSCLR(wxSYS_COLOUR_WINDOWTEXT)
+        SYSCLR(wxSYS_COLOUR_CAPTIONTEXT)
+        SYSCLR(wxSYS_COLOUR_ACTIVEBORDER)
+        SYSCLR(wxSYS_COLOUR_INACTIVEBORDER)
+        SYSCLR(wxSYS_COLOUR_APPWORKSPACE)
+        SYSCLR(wxSYS_COLOUR_HIGHLIGHT)
+        SYSCLR(wxSYS_COLOUR_HIGHLIGHTTEXT)
+        SYSCLR(wxSYS_COLOUR_BTNFACE)
+        SYSCLR(wxSYS_COLOUR_BTNSHADOW)
+        SYSCLR(wxSYS_COLOUR_GRAYTEXT)
+        SYSCLR(wxSYS_COLOUR_BTNTEXT)
+        SYSCLR(wxSYS_COLOUR_INACTIVECAPTIONTEXT)
+        SYSCLR(wxSYS_COLOUR_BTNHIGHLIGHT)
+        SYSCLR(wxSYS_COLOUR_3DDKSHADOW)
+        SYSCLR(wxSYS_COLOUR_3DLIGHT)
+        SYSCLR(wxSYS_COLOUR_INFOTEXT)
+        SYSCLR(wxSYS_COLOUR_INFOBK)
+        SYSCLR(wxSYS_COLOUR_LISTBOX)
+        SYSCLR(wxSYS_COLOUR_HOTLIGHT)
+        SYSCLR(wxSYS_COLOUR_GRADIENTACTIVECAPTION)
+        SYSCLR(wxSYS_COLOUR_GRADIENTINACTIVECAPTION)
+        SYSCLR(wxSYS_COLOUR_MENUHILIGHT)
+        SYSCLR(wxSYS_COLOUR_MENUBAR)
+        SYSCLR(wxSYS_COLOUR_LISTBOXTEXT)
+        SYSCLR(wxSYS_COLOUR_LISTBOXHIGHLIGHTTEXT)
+        SYSCLR(wxSYS_COLOUR_BACKGROUND)
+        SYSCLR(wxSYS_COLOUR_3DFACE)
+        SYSCLR(wxSYS_COLOUR_3DSHADOW)
+        SYSCLR(wxSYS_COLOUR_BTNHILIGHT)
+        SYSCLR(wxSYS_COLOUR_3DHIGHLIGHT)
+        SYSCLR(wxSYS_COLOUR_3DHILIGHT)
+        SYSCLR(wxSYS_COLOUR_FRAMEBK)
+        #undef SYSCLR
+    }
+
+    return wxNullColour;
+}
+
 wxSystemScreenType wxSystemSettings::GetScreenType()
 {
     if (ms_screen == wxSYS_SCREEN_NONE)
Index: src/xrc/xmlres.cpp
===================================================================
--- src/xrc/xmlres.cpp	(revision 78364)
+++ src/xrc/xmlres.cpp	(working copy)
@@ -1668,56 +1668,6 @@
     return v.empty() ? defaultv : (v == '1');
 }
 
-
-static wxColour GetSystemColour(const wxString& name)
-{
-    if (!name.empty())
-    {
-        #define SYSCLR(clr) \
-            if (name == wxT(#clr)) return wxSystemSettings::GetColour(clr);
-        SYSCLR(wxSYS_COLOUR_SCROLLBAR)
-        SYSCLR(wxSYS_COLOUR_BACKGROUND)
-        SYSCLR(wxSYS_COLOUR_DESKTOP)
-        SYSCLR(wxSYS_COLOUR_ACTIVECAPTION)
-        SYSCLR(wxSYS_COLOUR_INACTIVECAPTION)
-        SYSCLR(wxSYS_COLOUR_MENU)
-        SYSCLR(wxSYS_COLOUR_WINDOW)
-        SYSCLR(wxSYS_COLOUR_WINDOWFRAME)
-        SYSCLR(wxSYS_COLOUR_MENUTEXT)
-        SYSCLR(wxSYS_COLOUR_WINDOWTEXT)
-        SYSCLR(wxSYS_COLOUR_CAPTIONTEXT)
-        SYSCLR(wxSYS_COLOUR_ACTIVEBORDER)
-        SYSCLR(wxSYS_COLOUR_INACTIVEBORDER)
-        SYSCLR(wxSYS_COLOUR_APPWORKSPACE)
-        SYSCLR(wxSYS_COLOUR_HIGHLIGHT)
-        SYSCLR(wxSYS_COLOUR_HIGHLIGHTTEXT)
-        SYSCLR(wxSYS_COLOUR_BTNFACE)
-        SYSCLR(wxSYS_COLOUR_3DFACE)
-        SYSCLR(wxSYS_COLOUR_BTNSHADOW)
-        SYSCLR(wxSYS_COLOUR_3DSHADOW)
-        SYSCLR(wxSYS_COLOUR_GRAYTEXT)
-        SYSCLR(wxSYS_COLOUR_BTNTEXT)
-        SYSCLR(wxSYS_COLOUR_INACTIVECAPTIONTEXT)
-        SYSCLR(wxSYS_COLOUR_BTNHIGHLIGHT)
-        SYSCLR(wxSYS_COLOUR_BTNHILIGHT)
-        SYSCLR(wxSYS_COLOUR_3DHIGHLIGHT)
-        SYSCLR(wxSYS_COLOUR_3DHILIGHT)
-        SYSCLR(wxSYS_COLOUR_3DDKSHADOW)
-        SYSCLR(wxSYS_COLOUR_3DLIGHT)
-        SYSCLR(wxSYS_COLOUR_INFOTEXT)
-        SYSCLR(wxSYS_COLOUR_INFOBK)
-        SYSCLR(wxSYS_COLOUR_LISTBOX)
-        SYSCLR(wxSYS_COLOUR_HOTLIGHT)
-        SYSCLR(wxSYS_COLOUR_GRADIENTACTIVECAPTION)
-        SYSCLR(wxSYS_COLOUR_GRADIENTINACTIVECAPTION)
-        SYSCLR(wxSYS_COLOUR_MENUHILIGHT)
-        SYSCLR(wxSYS_COLOUR_MENUBAR)
-        #undef SYSCLR
-    }
-
-    return wxNullColour;
-}
-
 wxColour wxXmlResourceHandlerImpl::GetColour(const wxString& param, const wxColour& defaultv)
 {
     wxString v = GetParamValue(param);
@@ -1732,7 +1682,7 @@
     {
         // the colour doesn't use #RRGGBB format, check if it is symbolic
         // colour name:
-        clr = GetSystemColour(v);
+        clr = wxSystemSettings::GetStringColour(v);
         if (clr.IsOk())
             return clr;
 

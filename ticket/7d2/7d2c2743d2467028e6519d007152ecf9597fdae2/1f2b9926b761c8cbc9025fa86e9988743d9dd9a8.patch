Index: include/wx/iconbndl.h
===================================================================
--- include/wx/iconbndl.h	(revision 70437)
+++ include/wx/iconbndl.h	(working copy)
@@ -68,6 +68,12 @@
     wxIcon GetIcon(wxCoord size = wxDefaultCoord) const
         { return GetIcon(wxSize(size, size)); }
 
+    // returns icon of closest larger size (or closest size, if there
+    // is no larger icon)
+    wxIcon GetNearestLargerIcon(const wxSize& size) const;
+    wxIcon GetNearestLargerIcon(wxCoord size) const
+        { return GetNearestLargerIcon(wxSize(size, size)); }
+
     // returns the icon exactly of the specified size or wxNullIcon if no icon
     // of exactly given size are available
     wxIcon GetIconOfExactSize(const wxSize& size) const;
Index: src/common/iconbndl.cpp
===================================================================
--- src/common/iconbndl.cpp	(revision 70437)
+++ src/common/iconbndl.cpp	(working copy)
@@ -193,6 +193,63 @@
 
 #endif // wxUSE_STREAMS && wxUSE_IMAGE
 
+wxIcon wxIconBundle::GetNearestLargerIcon(const wxSize& size) const
+{
+    wxASSERT(size.x >=0 && size.y > 0);
+
+    const size_t count = GetIconCount();
+
+    // no icon in bundle?
+    if (count == 0)
+        return wxNullIcon;
+
+    wxIcon bestIcon;
+    int bestDiff = 0;
+    bool bestLarger=false;
+
+    const wxIconArray& iconArray = M_ICONBUNDLEDATA->m_icons;
+    for ( size_t i = 0; i < count; i++ )
+    {
+        const wxIcon& icon = iconArray[i];
+        if (!icon.IsOk())
+            continue;
+        wxCoord sx = icon.GetWidth(),
+                sy = icon.GetHeight();
+
+        // exact match ends search immediately
+        if (sx == size.x && sy == size.y) {
+            bestIcon = icon;
+            break;
+        }
+
+        bool iconLarger = (sx >= size.x) && (sy >= size.y);
+        int  iconDiff = abs(sx - size.x) + abs(sy - size.y);
+
+        // use current icon as candidate for best icon, if:
+        // - we have no candidate yet
+        // - we have no candidate larger than desired size and current icon is
+        // - current icon is closer to desired size than candidate
+        if ( !bestIcon.IsOk() || (!bestLarger && iconLarger)
+            || ( (bestLarger==iconLarger) && (iconDiff<bestDiff) )) {
+            bestIcon = icon;
+            bestLarger = iconLarger;
+            bestDiff = iconDiff;
+            continue;
+        }
+    }
+
+    // if bundle contains only invalid icons
+    if (!bestIcon.IsOk())
+        return wxNullIcon;
+
+#if defined( __WXMAC__ ) && wxOSX_USE_CARBON
+    return wxIcon(bestIcon.GetHICON(), size);
+#else
+    return bestIcon;
+#endif
+}
+
+
 wxIcon wxIconBundle::GetIcon(const wxSize& size) const
 {
     const size_t count = GetIconCount();
Index: src/msw/toplevel.cpp
===================================================================
--- src/msw/toplevel.cpp	(revision 70437)
+++ src/msw/toplevel.cpp	(working copy)
@@ -1100,20 +1100,9 @@
 {
     const wxSize size(::GetSystemMetrics(smX), ::GetSystemMetrics(smY));
 
-    // Try the exact size first.
-    wxIcon icon = icons.GetIconOfExactSize(size);
+    wxIcon icon = icons.GetNearestLargerIcon(size);
 
     if ( !icon.IsOk() )
-    {
-        // If we didn't find any, set at least some icon: it will look scaled
-        // and ugly but in practice it's impossible to prevent this because not
-        // everyone can provide the icons in all sizes used by all versions of
-        // Windows in all DPIs (this would include creating them in at least
-        // 14, 16, 22, 32, 48, 64 and 128 pixel sizes).
-        icon = icons.GetIcon(size);
-    }
-
-    if ( !icon.IsOk() )
         return false;
 
     ::SendMessage(GetHwnd(), WM_SETICON, i, (LPARAM)GetHiconOf(icon));
Index: interface/wx/iconbndl.h
===================================================================
--- interface/wx/iconbndl.h	(revision 70437)
+++ interface/wx/iconbndl.h	(working copy)
@@ -106,6 +106,16 @@
     wxIcon GetIconOfExactSize(const wxSize& size) const;
 
     /**
+        Returns icon with exactly the given size. If there is no such icon, 
+        returns the icon with nearest size larger than desired size (smallest
+        sum of width and height differences). 
+        If there is no larger icon, returns icon with nearest size (with one 
+        or both dimensions smaller than desired size).
+        Returns ::wxNullIcon if there are no icons in the bundle.
+    */
+    wxIcon GetNearestLargerIcon(const wxSize& size) const;
+
+    /**
        return the number of available icons
     */
     size_t GetIconCount() const;

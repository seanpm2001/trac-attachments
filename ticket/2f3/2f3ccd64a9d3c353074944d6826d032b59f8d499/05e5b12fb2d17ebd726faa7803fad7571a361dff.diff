diff --git a/samples/minimal/minimal.cpp b/samples/minimal/minimal.cpp
index f765a70dac..b1969bf42f 100644
--- a/samples/minimal/minimal.cpp
+++ b/samples/minimal/minimal.cpp
@@ -39,6 +39,9 @@
     #include "../sample.xpm"
 #endif
 
+#include <wx/listctrl.h>
+#include <wx/display.h>
+
 // ----------------------------------------------------------------------------
 // private classes
 // ----------------------------------------------------------------------------
@@ -188,18 +191,233 @@ void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
     Close(true);
 }
 
+class IncrementalListCtrl : public wxListCtrl
+{
+    public:
+        IncrementalListCtrl(wxWindow *parent, wxWindowID winid = wxID_ANY, const wxPoint& pos = wxDefaultPosition,
+                            const wxSize& size = wxDefaultSize, long style = wxLC_ICON,
+                            const wxValidator &validator = wxDefaultValidator,
+                            const wxString &name = wxListCtrlNameStr);
+
+        wxString OnGetItemText(long item, long column) const override;
+
+        void CalcColumnLength();
+
+        wxArrayString m_array;
+        int m_columnLength = -1;
+};
+
+class GotoFunctionDlg : public wxDialog
+{
+        struct Iterator {};
+    public:
+
+        GotoFunctionDlg(wxWindow* parent, Iterator* iterator);
+
+    private:
+
+        //(*Declarations(GotoFunctionDlg)
+        IncrementalListCtrl* m_list;
+        wxBoxSizer* m_sizer;
+        wxCheckBox* m_mode;
+        wxTextCtrl* m_text;
+        //*)
+
+        //(*Identifiers(GotoFunctionDlg)
+        static const long ID_CHECKBOX1;
+        static const long ID_TEXTCTRL1;
+        static const long ID_LISTCTRL1;
+        //*)
+
+    private:
+        void BuildContent(wxWindow* parent, Iterator* iterator);
+    private:
+        DECLARE_EVENT_TABLE()
+};
+
+
+IncrementalListCtrl::IncrementalListCtrl(wxWindow *parent, wxWindowID winid, const wxPoint& pos,
+                                         const wxSize& size, long style,
+                                         const wxValidator &validator, const wxString &name) :
+    wxListCtrl(parent, winid, pos, size, style, validator, name)
+{
+    wxString arr[] = {
+        wxT("A::A()"),
+        wxT("void AAA::Method1()"),
+        wxT("void AAA::Method2()"),
+        wxT("void AAA::Method3()"),
+        wxT("void AAA::Method4()"),
+        wxT("void AAA::Method5()"),
+        wxT("void AAA::Method6()"),
+        wxT("int bloatted_watch()"),
+        wxT("void func1()"),
+        wxT("void locals(float f)"),
+        wxT("void locals(int arg1, int arg2)"),
+        wxT("void locals2()"),
+        wxT("void locals2(int a, int b)"),
+        wxT("void locals2(int a, int b, int c)"),
+        wxT("void locals3()"),
+        wxT("void locals_quotes()"),
+        wxT("int main(int argc, char* argv[])"),
+        wxT("void parser::detail::func()"),
+        wxT("parser::Foo::Foo(std::string name)"),
+        wxT("void parser::Foo::print()"),
+        wxT("parser::Foo::~Foo()"),
+        wxT("int parser::test_main(int a, int b)"),
+        wxT("void stl_map_test()"),
+        wxT("void stl_test_bitset()"),
+        wxT("void test_array_watches()"),
+        wxT("float& test_index_op::operator[](int v)"),
+        wxT("test_index_op::test_index_op()"),
+        wxT("int TestNamespace::func()"),
+        wxT("int TestNamespace::item::method()"),
+        wxT("TestStatic::TestStatic(const V& aValue)")
+    };
+    for (wxString &s : arr)
+        m_array.push_back(s);
+
+    SetItemCount(m_array.size());
+}
+
+void IncrementalListCtrl::CalcColumnLength()
+{
+    int length = 0;
+    for (const wxString &s : m_array)
+    {
+        length = std::max<int>(length, s.length());
+    }
+
+    int x, y;
+    GetTextExtent(wxString(wxT('A'), length), &x, &y);
+    m_columnLength = x;
+}
+
+wxString IncrementalListCtrl::OnGetItemText(long item, long column) const
+{
+    return m_array[item];
+}
+
+//(*InternalHeaders(GotoFunctionDlg)
+//*)
+
+//(*IdInit(GotoFunctionDlg)
+const long GotoFunctionDlg::ID_CHECKBOX1 = wxNewId();
+const long GotoFunctionDlg::ID_TEXTCTRL1 = wxNewId();
+const long GotoFunctionDlg::ID_LISTCTRL1 = wxNewId();
+//*)
+
+BEGIN_EVENT_TABLE(GotoFunctionDlg, wxDialog)
+    //(*EventTable(GotoFunctionDlg)
+    //*)
+END_EVENT_TABLE()
+
+GotoFunctionDlg::GotoFunctionDlg(wxWindow* parent, Iterator* iterator) //:
+//    m_handler(this, iterator),
+//    m_iterator(iterator)
+{
+    BuildContent(parent, iterator);
+}
+
+
+wxRect cbGetMonitorRectForWindow(wxWindow *window)
+{
+    wxRect monitorRect;
+    if (wxDisplay::GetCount() > 0)
+    {
+        int displayIdx = wxDisplay::GetFromWindow(window);
+        if (displayIdx == wxNOT_FOUND)
+            displayIdx = 0;
+        wxDisplay display(displayIdx);
+        monitorRect = display.GetClientArea();
+        // This is needed because on Linux the client area returned for the first monitor in a twin
+        // monitor setup with nVidia card is spanning the two monitors.
+        // The intersection function will return just the client for the specified monitor.
+        monitorRect = display.GetGeometry().Intersect(monitorRect);
+    }
+    else
+    {
+        int width, height;
+        wxDisplaySize(&width, &height);
+        monitorRect = wxRect(0, 0, width, height);
+    }
+    return monitorRect;
+}
+
+void FitContent(wxWindow *window, wxWindow *parent, wxListCtrl *listCtrl, int columnWidth)
+{
+    // Use GetItemRect to account for the spacing between rows. GetCharHeight is used just as
+    // precaution if GetItemRect fails.
+    wxRect itemRect;
+    if (!listCtrl->GetItemRect(0, itemRect))
+        itemRect = wxRect();
+    const int charHeight = std::max(listCtrl->GetCharHeight(), itemRect.GetHeight());
+    const int totalHeight = charHeight * listCtrl->GetItemCount() + charHeight / 2;
+
+    const wxSize minSize = listCtrl->GetMinSize();
+    int minYCorrected = minSize.y;
+
+    // Make the list taller if there are many items in it. This should make it a bit easier to find
+    // stuff. The height would be something like 70% of the display's client area height.
+    if (totalHeight > minSize.y)
+    {
+        const wxRect monitorRect = cbGetMonitorRectForWindow(parent);
+        const int monitorHeight = int(std::lround(monitorRect.GetHeight() * 0.7));
+        minYCorrected = std::max(minYCorrected, std::min(monitorHeight, totalHeight));
+    }
+
+    // Resize the window to maximise visible items. Do this using SetSize instead of using
+    // SetMinSize to allow the user to make the window smaller if he/she wishes to do so.
+    const wxSize windowSize = window->GetSize();
+    const wxSize listSize = listCtrl->GetSize();
+    // This accounts for non-list UI elements present in the window.
+    const wxSize sizeDiff = windowSize - listSize;
+
+    wxSize newWindowSize(std::max(columnWidth + sizeDiff.x, windowSize.x),
+                         minYCorrected + sizeDiff.y);
+    window->SetSize(newWindowSize);
+}
+
+void GotoFunctionDlg::BuildContent(wxWindow* parent, Iterator* iterator)
+{
+    //(*Initialize(GotoFunctionDlg)
+    wxBoxSizer* BoxSizer2;
+    wxStaticText* StaticText1;
+
+    Create(parent, wxID_ANY, _("Select function..."), wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX|wxMAXIMIZE_BOX, _T("wxID_ANY"));
+    m_sizer = new wxBoxSizer(wxVERTICAL);
+    BoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
+    StaticText1 = new wxStaticText(this, wxID_ANY, _("Please select function to go to:"), wxDefaultPosition, wxDefaultSize, 0, _T("wxID_ANY"));
+    BoxSizer2->Add(StaticText1, 0, wxALIGN_CENTER_VERTICAL, 5);
+    BoxSizer2->Add(-1,-1,1, wxALL|wxEXPAND, 5);
+    m_mode = new wxCheckBox(this, ID_CHECKBOX1, _("Column Mode"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_CHECKBOX1"));
+    m_mode->SetValue(false);
+    BoxSizer2->Add(m_mode, 0, wxEXPAND, 5);
+    m_sizer->Add(BoxSizer2, 0, wxLEFT|wxRIGHT|wxEXPAND, 8);
+    m_text = new wxTextCtrl(this, ID_TEXTCTRL1, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER, wxDefaultValidator, _T("ID_TEXTCTRL1"));
+    m_text->SetFocus();
+    m_sizer->Add(m_text, 0, wxBOTTOM|wxLEFT|wxRIGHT|wxEXPAND, 5);
+    m_list = new IncrementalListCtrl(this, ID_LISTCTRL1, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_VIRTUAL|wxVSCROLL|wxHSCROLL, wxDefaultValidator, _T("ID_LISTCTRL1"));
+    m_list->SetMinSize(wxSize(500,300));
+    m_sizer->Add(m_list, 1, wxBOTTOM|wxLEFT|wxRIGHT|wxEXPAND, 5);
+    SetSizer(m_sizer);
+    m_sizer->Fit(this);
+    m_sizer->SetSizeHints(this);
+    //*)
+
+    m_sizer->Fit(this);
+
+    m_list->CalcColumnLength();
+
+    m_list->SetWindowStyleFlag(m_list->GetWindowStyleFlag() | wxLC_NO_HEADER);
+    m_list->InsertColumn(0, _("Column"), wxLIST_FORMAT_LEFT, m_list->m_columnLength);
+
+
+    FitContent(this, parent, m_list, m_list->m_columnLength);
+}
+
+
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(wxString::Format
-                 (
-                    "Welcome to %s!\n"
-                    "\n"
-                    "This is the minimal wxWidgets sample\n"
-                    "running under %s.",
-                    wxVERSION_STRING,
-                    wxGetOsDescription()
-                 ),
-                 "About wxWidgets minimal sample",
-                 wxOK | wxICON_INFORMATION,
-                 this);
+    GotoFunctionDlg dlg(this, nullptr);
+    dlg.ShowModal();
 }

diff --git a/include/wx/tipwin.h b/include/wx/tipwin.h
index 2f16cbb03a..0c38712b0e 100644
--- a/include/wx/tipwin.h
+++ b/include/wx/tipwin.h
@@ -25,6 +25,8 @@ class WXDLLIMPEXP_FWD_CORE wxTipWindowView;
 class WXDLLIMPEXP_CORE wxTipWindow : public wxPopupTransientWindow
 {
 public:
+    bool m_inCtor;
+    bool m_closed;
     // the mandatory ctor parameters are: the parent window and the text to
     // show
     //
diff --git a/samples/dialogs/dialogs.cpp b/samples/dialogs/dialogs.cpp
index 9c726471fa..b82afc9152 100644
--- a/samples/dialogs/dialogs.cpp
+++ b/samples/dialogs/dialogs.cpp
@@ -291,6 +291,7 @@ wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
 #if wxUSE_TIPWINDOW
     EVT_MENU(DIALOGS_SHOW_TIP,                      MyFrame::OnShowTip)
     EVT_UPDATE_UI(DIALOGS_SHOW_TIP,                 MyFrame::OnUpdateShowTipUI)
+    EVT_TIMER(-1, MyFrame::OnTimer)
 #endif // wxUSE_TIPWINDOW
 #if wxUSE_RICHTOOLTIP
     EVT_MENU(DIALOGS_RICHTIP_DIALOG,                MyFrame::OnRichTipDialog)
@@ -662,6 +663,10 @@ bool MyApp::OnInit()
 // My frame constructor
 MyFrame::MyFrame(const wxString& title)
        : wxFrame(NULL, wxID_ANY, title)
+#if wxUSE_TIPWINDOW
+                                        ,
+    m_timer(this)
+#endif
 {
     SetIcon(wxICON(sample));
 
@@ -735,6 +740,7 @@ MyFrame::MyFrame(const wxString& title)
 
 #if wxUSE_TIPWINDOW
     m_tipWindow = NULL;
+    m_timer.Start(500);
 #endif // wxUSE_TIPWINDOW
 
 #ifdef __WXMSW__
@@ -2550,6 +2556,14 @@ void MyFrame::OnShowTip(wxCommandEvent& WXUNUSED(event))
                             FromDIP(60),
                             &m_tipWindow
                           );
+        if ( !m_tipWindow->m_closed )
+        {
+            m_tipWindow->GetEventHandler()->QueueEvent(new wxCommandEvent(wxEVT_MENU, DIALOGS_TIP));
+        }
+        else
+        {
+            m_tipWindow = NULL;
+        }
     }
 }
 
@@ -2558,6 +2572,11 @@ void MyFrame::OnUpdateShowTipUI(wxUpdateUIEvent& event)
     event.Check(m_tipWindow != NULL);
 }
 
+void MyFrame::OnTimer(wxTimerEvent& /*event*/)
+{
+    wxCommandEvent evt(wxEVT_MENU, DIALOGS_SHOW_TIP);
+    ProcessEvent(evt);
+}
 #endif // wxUSE_TIPWINDOW
 
 #if wxUSE_RICHTOOLTIP
diff --git a/samples/dialogs/dialogs.h b/samples/dialogs/dialogs.h
index 97869004b6..c78a39aa28 100644
--- a/samples/dialogs/dialogs.h
+++ b/samples/dialogs/dialogs.h
@@ -58,7 +58,7 @@ of MSW, MAC and OS2
     #define USE_WXGTK 0
 #endif
 
-#define USE_GENERIC_DIALOGS (!USE_WXUNIVERSAL && !USE_DLL)
+//#define USE_GENERIC_DIALOGS (!USE_WXUNIVERSAL && !USE_DLL)
 
 #define USE_COLOURDLG_GENERIC \
     ((USE_WXMSW || USE_WXMAC) && USE_GENERIC_DIALOGS && wxUSE_COLOURDLG)
@@ -557,6 +557,8 @@ private:
     void OnUpdateShowTipUI(wxUpdateUIEvent& event);
 
     wxTipWindow *m_tipWindow;
+    wxTimer m_timer;
+    void OnTimer(wxTimerEvent& event);
 #endif // wxUSE_TIPWINDOW
 
     wxDECLARE_EVENT_TABLE();
diff --git a/src/generic/tipwin.cpp b/src/generic/tipwin.cpp
index 2ecb4b206b..761038d27e 100644
--- a/src/generic/tipwin.cpp
+++ b/src/generic/tipwin.cpp
@@ -105,7 +105,9 @@ wxTipWindow::wxTipWindow(wxWindow *parent,
                          wxCoord maxLength,
                          wxTipWindow** windowPtr,
                          wxRect *rectBounds)
-           : wxPopupTransientWindow(parent)
+           : wxPopupTransientWindow(parent),
+             m_inCtor(true),
+             m_closed(false)
 {
     SetTipWindowPtr(windowPtr);
     if ( rectBounds )
@@ -162,6 +164,7 @@ wxTipWindow::wxTipWindow(wxWindow *parent,
     #ifdef __WXGTK__
         m_view->CaptureMouse();
     #endif
+    m_inCtor = false;
 }
 
 wxTipWindow::~wxTipWindow()
@@ -193,6 +196,17 @@ void wxTipWindow::SetBoundingRect(const wxRect& rectBound)
 
 void wxTipWindow::Close()
 {
+    if ( m_inCtor )
+    {
+        wxLogDebug("%s:%d(%p):  in ctor", __FILE__, __LINE__, this);
+    }
+    if (m_closed)
+    {
+        wxLogDebug("%s:%d(%p):  double close", __FILE__, __LINE__, this);
+        return;
+    }
+//    wxASSERT(!m_inCtor && !m_closed);
+    m_closed = true;
     if ( m_windowPtr )
     {
         *m_windowPtr = NULL;

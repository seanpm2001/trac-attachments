Index: src/unix/stackwalk.cpp
===================================================================
--- src/unix/stackwalk.cpp	(revision 56209)
+++ src/unix/stackwalk.cpp	(working copy)
@@ -132,7 +132,9 @@
     }
     else // not in "module(funcname+offset)" format
     {
+#ifndef __WXOSX__
         m_module = syminfo;
+#endif
     }
 }
 
@@ -220,9 +222,13 @@
         }
     }
 
+#ifndef __WXOSX__
     // build the (long) command line for executing addr2line in an optimized way
     // (e.g. use always chars, even in Unicode build: popen() always takes chars)
     int len = snprintf(g_buf, BUFSIZE, "addr2line -C -f -e \"%s\"", (const char*) exepath.mb_str());
+#else
+    int len = snprintf(g_buf, BUFSIZE, "atos -p %d", (int)getpid());
+#endif
     len = (len <= 0) ? strlen(g_buf) : len;     // in case snprintf() is broken
     for (size_t i=0; i<n; i++)
     {
@@ -243,6 +249,7 @@
                   curr = 0;
     for  ( size_t i = 0; i < n; i++ )
     {
+#ifndef __WXOSX__
         // 1st line has function name
         if ( fgets(g_buf, WXSIZEOF(g_buf), fp) )
         {
@@ -284,7 +291,38 @@
                            filename.c_str());
             }
         }
-
+#else
+        if ( fgets(g_buf, WXSIZEOF(g_buf), fp) )
+        {
+            wxString buffer( wxString::FromAscii(g_buf) );
+            buffer.RemoveLast();
+            name = buffer.BeforeFirst(_T(' '));
+            if (name == wxString::Format(_T("0x%08x"), addresses[i]))
+                name.clear();
+            
+            name = name.BeforeFirst(_T('('));
+            
+            if ( buffer.find(_T('+')) == wxString::npos )
+            {
+                buffer = buffer.AfterLast(_T('('));
+                buffer.RemoveLast();
+                const size_t posColon = buffer.find(_T(':'));
+                filename = buffer.Mid(0, posColon);
+                buffer.Mid(posColon + 1).ToULong(&line);
+            }
+            else
+            {
+                line = 0;
+                filename.clear();
+            }
+        }
+        else
+        {
+            wxLogDebug(_T("cannot read atos output for stack frame #%lu"),
+                       (unsigned long)i);
+            return false;
+        }
+#endif
         // now we've got enough info to initialize curr-th stack frame
         // (at worst, only addresses[i] and syminfo[i] have been initialized,
         //  but wxStackFrame::OnGetName may still be able to get function name):
Index: include/wx/osx/chkconf.h
===================================================================
--- include/wx/osx/chkconf.h	(revision 56209)
+++ include/wx/osx/chkconf.h	(working copy)
@@ -15,8 +15,8 @@
 #define _WX_OSX_CHKCONF_H_
 
 
-#if wxUSE_STACKWALKER
-    /* not supported under Mac */
+#if wxUSE_STACKWALKER && (MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_5)
+    /* not supported under MacOS X before 10.5 */
 #   undef wxUSE_STACKWALKER
 #   define wxUSE_STACKWALKER 0
 #endif /* wxUSE_STACKWALKER */
@@ -104,4 +104,4 @@
     #include "wx/osx/cocoa/chkconf.h"
 #endif
 
-#endif // _WX_OSX_CHKCONF_H_
\ No newline at end of file
+#endif // _WX_OSX_CHKCONF_H_

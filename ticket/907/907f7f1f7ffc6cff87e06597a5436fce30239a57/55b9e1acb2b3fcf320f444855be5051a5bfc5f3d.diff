Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 49590)
+++ src/generic/listctrl.cpp	(working copy)
@@ -307,7 +307,7 @@
     // case we determine our position/size ourselves
 
     // calculate the size of the line
-    void CalculateSize( wxDC *dc, int spacing );
+    void CalculateSize( wxDC *dc, int spacing, int width );
 
     // remember the position this line appears at
     void SetPosition( int x, int y, int spacing );
@@ -1144,7 +1144,7 @@
     InitItems( GetMode() == wxLC_REPORT ? m_owner->GetColumnCount() : 1 );
 }
 
-void wxListLineData::CalculateSize( wxDC *dc, int spacing )
+void wxListLineData::CalculateSize( wxDC *dc, int spacing, int width )
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
     wxCHECK_RET( node, _T("no subitems at all??") );
@@ -1170,15 +1170,15 @@
             }
             else // has label
             {
+                // Calculate the height but use the given width
                 dc->GetTextExtent( s, &lw, &lh );
-                lw += EXTRA_WIDTH;
                 lh += EXTRA_HEIGHT;
 
                 m_gi->m_rectAll.height = spacing + lh;
-                if (lw > spacing)
-                    m_gi->m_rectAll.width = lw;
+                if (width > spacing)
+                    m_gi->m_rectAll.width = width;
 
-                m_gi->m_rectLabel.width = lw;
+                m_gi->m_rectLabel.width = width;
                 m_gi->m_rectLabel.height = lh;
             }
 
@@ -1189,15 +1189,16 @@
                 m_gi->m_rectIcon.width = w + 8;
                 m_gi->m_rectIcon.height = h + 8;
 
-                if ( m_gi->m_rectIcon.width > m_gi->m_rectAll.width )
-                    m_gi->m_rectAll.width = m_gi->m_rectIcon.width;
+                // Calculate the height but use the given width
                 if ( m_gi->m_rectIcon.height + lh > m_gi->m_rectAll.height - 4 )
                     m_gi->m_rectAll.height = m_gi->m_rectIcon.height + lh + 4;
+
+                m_gi->m_rectAll.width = width;
             }
 
             if ( item->HasText() )
             {
-                m_gi->m_rectHighlight.width = m_gi->m_rectLabel.width;
+                m_gi->m_rectHighlight.width = m_gi->m_rectAll.width;
                 m_gi->m_rectHighlight.height = m_gi->m_rectLabel.height;
             }
             else // no text, highlight the icon
@@ -1213,7 +1214,6 @@
             dc->GetTextExtent( s, &lw, &lh );
             lw += EXTRA_WIDTH;
             lh += EXTRA_HEIGHT;
-
             m_gi->m_rectLabel.width = lw;
             m_gi->m_rectLabel.height = lh;
 
@@ -1226,7 +1226,6 @@
                 m_owner->GetImageSize( item->GetImage(), w, h );
                 m_gi->m_rectIcon.width = w;
                 m_gi->m_rectIcon.height = h;
-
                 m_gi->m_rectAll.width += 4 + w;
                 if (h > m_gi->m_rectAll.height)
                     m_gi->m_rectAll.height = h;
@@ -1243,6 +1242,7 @@
         default:
             wxFAIL_MSG( _T("unknown mode") );
             break;
+
     }
 }
 
@@ -1262,7 +1262,7 @@
 
             if ( item->HasImage() )
             {
-                m_gi->m_rectIcon.x = m_gi->m_rectAll.x + 4 +
+                m_gi->m_rectIcon.x = m_gi->m_rectAll.x +
                     (m_gi->m_rectAll.width - m_gi->m_rectIcon.width) / 2;
                 m_gi->m_rectIcon.y = m_gi->m_rectAll.y + 4;
             }
@@ -1270,17 +1270,17 @@
             if ( item->HasText() )
             {
                 if (m_gi->m_rectAll.width > spacing)
-                    m_gi->m_rectLabel.x = m_gi->m_rectAll.x + (EXTRA_WIDTH/2);
+                    m_gi->m_rectLabel.x = m_gi->m_rectAll.x;
                 else
                     m_gi->m_rectLabel.x = m_gi->m_rectAll.x + (EXTRA_WIDTH/2) + (spacing / 2) - (m_gi->m_rectLabel.width / 2);
-                m_gi->m_rectLabel.y = m_gi->m_rectAll.y + m_gi->m_rectAll.height + 2 - m_gi->m_rectLabel.height;
-                m_gi->m_rectHighlight.x = m_gi->m_rectLabel.x - 2;
-                m_gi->m_rectHighlight.y = m_gi->m_rectLabel.y - 2;
+                m_gi->m_rectLabel.y = m_gi->m_rectAll.y + m_gi->m_rectAll.height - m_gi->m_rectLabel.height;
+                m_gi->m_rectHighlight.x = m_gi->m_rectLabel.x;
+                m_gi->m_rectHighlight.y = m_gi->m_rectLabel.y;
             }
             else // no text, highlight the icon
             {
-                m_gi->m_rectHighlight.x = m_gi->m_rectIcon.x - 4;
-                m_gi->m_rectHighlight.y = m_gi->m_rectIcon.y - 4;
+                m_gi->m_rectHighlight.x = m_gi->m_rectIcon.x;
+                m_gi->m_rectHighlight.y = m_gi->m_rectIcon.y;
             }
             break;
 
@@ -1501,6 +1501,8 @@
     dc->DrawRectangle( m_gi->m_rectAll );
     dc->SetPen(*wxGREEN_PEN);
     dc->DrawRectangle( m_gi->m_rectIcon );
+    dc->SetPen(*wxGREEN_PEN);
+    dc->DrawRectangle( m_gi->m_rectLabel );
 #endif
 
     wxListItemData *item = node->GetData();
@@ -1508,17 +1510,20 @@
     {
         // centre the image inside our rectangle, this looks nicer when items
         // ae aligned in a row
+        int w, h;
+        m_owner->GetImageSize( item->GetImage(), w, h );
         const wxRect& rectIcon = m_gi->m_rectIcon;
 
-        m_owner->DrawImage(item->GetImage(), dc, rectIcon.x, rectIcon.y);
+        m_owner->DrawImage(item->GetImage(), dc, rectIcon.x + (rectIcon.width - w)/2,
+                           rectIcon.y + (rectIcon.height - h)/2);
     }
 
     if (item->HasText())
     {
-        const wxRect& rectLabel = m_gi->m_rectLabel;
-
-        wxDCClipper clipper(*dc, rectLabel);
-        dc->DrawText(item->GetText(), rectLabel.x, rectLabel.y);
+        wxCoord lw, lh;
+        dc->GetTextExtent(item->GetText(), &lw, &lh);
+        int x = m_gi->m_rectLabel.x + m_gi->m_rectAll.width/2 - lw/2;
+        dc->DrawText(item->GetText(), x, m_gi->m_rectLabel.y);
     }
 }
 
@@ -4227,44 +4232,59 @@
         // horizontally/vertically (wxLC_ALIGN_XXX styles explicitly given) or
         // to arrange them in top to bottom, left to right (don't ask me why
         // not the other way round...) order
+        int x = EXTRA_BORDER_X;
+        int y = EXTRA_BORDER_Y;
+        int columnCounter = 0;
         if ( HasFlag(wxLC_ALIGN_LEFT | wxLC_ALIGN_TOP) )
         {
-            int x = EXTRA_BORDER_X;
-            int y = EXTRA_BORDER_Y;
+            wxArrayInt columnSizes;
+            wxListLineData *line;
+            wxString LineString;
+            size_t i;
+            int itemWidth, maxItemWidth = 45;
+            int h,w = 0;
 
-            wxCoord widthMax = 0;
+            // first calculate the column sizes
+            for ( i = 0; i < count; i++ )
+            {
+                line = GetLine(i);
+                LineString = line->GetText(0);
+                dc.GetTextExtent(LineString ,&w ,&h);
+                if (w >= itemWidth)
+                {
+                    itemWidth = w + 4;
+                    columnSizes.Add(itemWidth);
+                }
 
-            size_t i;
+                // store the max width for wxLC_ALIGN_LEFT
+                if (itemWidth > maxItemWidth)
+                    maxItemWidth = itemWidth;
+            }
+
+            // 2. Layout and position the items
             for ( i = 0; i < count; i++ )
             {
-                wxListLineData *line = GetLine(i);
-                line->CalculateSize( &dc, iconSpacing );
-                line->SetPosition( x, y, iconSpacing );
+                line = GetLine(i);
 
-                wxSize sizeLine = GetLineSize(i);
-
-                if ( HasFlag(wxLC_ALIGN_TOP) )
+                // Layout the item
+                if (HasFlag(wxLC_ALIGN_LEFT))
                 {
-                    if ( sizeLine.x > widthMax )
-                        widthMax = sizeLine.x;
-
-                    y += sizeLine.y;
+                    line->CalculateSize( &dc, iconSpacing, maxItemWidth );
                 }
-                else // wxLC_ALIGN_LEFT
+                else
                 {
-                    x += sizeLine.x + MARGIN_BETWEEN_ROWS;
+                    line->CalculateSize( &dc, iconSpacing, columnSizes.Item(columnCounter) );
+                    columnSizes.RemoveAt(columnCounter);
                 }
-            }
 
-            if ( HasFlag(wxLC_ALIGN_TOP) )
-            {
-                // traverse the items again and tweak their sizes so that they are
-                // all the same in a row
-                for ( i = 0; i < count; i++ )
-                {
-                    wxListLineData *line = GetLine(i);
-                    line->m_gi->ExtendWidth(widthMax);
-                }
+                // Position the item
+                line->SetPosition( x, y, iconSpacing );
+
+                // Define the x,y position of the next item
+                if (HasFlag(wxLC_ALIGN_LEFT))
+                    x += GetLineSize(i).x + MARGIN_BETWEEN_ROWS;
+                else
+                    y += GetLineSize(i).y;
             }
 
             SetScrollbars
@@ -4285,9 +4305,63 @@
             // scrollbar
 
             int entireWidth = 0;
-
+            int itemWidth   = 0;
             for (int tries = 0; tries < 2; tries++)
             {
+                // first calculate the number of items per column
+                wxListLineData  *line;
+
+                if (count == 0)
+                    return;
+
+                int h = GetLineSize(0).y;
+                itemWidth = 0;
+
+                m_linesPerPage = 0;
+                if (h != 0)
+                {
+                    int testY = 0;
+                    int testHeight = clientHeight - EXTRA_BORDER_Y;
+                    for ( ;; )
+                    {
+                        testY += h;
+                        if (testY >= testHeight)
+                            break;
+                        else
+                            m_linesPerPage++;
+                    }
+                }
+
+                if (m_linesPerPage < 1)
+                    m_linesPerPage = 1;
+
+                // then calculate max width of each column
+                wxArrayInt columnSizes;
+                int counter = 0;
+                int w       = 0;
+
+                // Determine and store the maxWidth per column
+                for (size_t i = 0; i < count; i++)
+                {
+                    line = GetLine( i );
+                    wxString LineString = line->GetText(0);
+                    dc.GetTextExtent(LineString ,&w ,NULL);
+                    counter++;
+                    if (w >= itemWidth)
+                    {
+                        itemWidth = w + 4;
+                    }
+
+                    if(counter == m_linesPerPage || i+1 == count)
+                    {
+                        columnSizes.Add(itemWidth);
+                        itemWidth = line->m_gi->m_rectIcon.width;
+                        counter   = 0;
+                    }
+                }
+
+                // finally layout and position the items and remember the
+                // entire width for the scrollbar
                 entireWidth = 2 * EXTRA_BORDER_X;
 
                 if (tries == 1)
@@ -4297,48 +4371,47 @@
                     entireWidth += SCROLL_UNIT_X;
                 }
 
-                int x = EXTRA_BORDER_X;
-                int y = EXTRA_BORDER_Y;
-                int maxWidthInThisRow = 0;
+                // Now set items
+                x = EXTRA_BORDER_X;
+                y = EXTRA_BORDER_Y;
 
-                m_linesPerPage = 0;
-                int currentlyVisibleLines = 0;
-
                 for (size_t i = 0; i < count; i++)
                 {
-                    currentlyVisibleLines++;
-                    wxListLineData *line = GetLine( i );
-                    line->CalculateSize( &dc, iconSpacing );
+                    // We enter a new column ?
+                    if (i % m_linesPerPage == 0  && i != 0)
+                    {
+                        // Get the new max width of this column
+                        if (columnSizes.GetCount() > 0)
+                        {
+                            columnSizes.RemoveAt(columnCounter);
+                        }
+                    }
+                    line = GetLine( i );
+
+                    // Layout the item
+                    line->CalculateSize( &dc, iconSpacing, columnSizes.Item(columnCounter) );
+                    // Position the item
                     line->SetPosition( x, y, iconSpacing );
+                    // Set the y position of the next item
+                    y += GetLineSize( i ).y;
 
-                    wxSize sizeLine = GetLineSize( i );
-
-                    if ( maxWidthInThisRow < sizeLine.x )
-                        maxWidthInThisRow = sizeLine.x;
-
-                    y += sizeLine.y;
-                    if (currentlyVisibleLines > m_linesPerPage)
-                        m_linesPerPage = currentlyVisibleLines;
-
-                    if ( y + sizeLine.y >= clientHeight )
+                    // Check if the after next item position fit
+                    if ( y + GetLineSize( i ).y >= clientHeight )
                     {
-                        currentlyVisibleLines = 0;
                         y = EXTRA_BORDER_Y;
-                        maxWidthInThisRow += MARGIN_BETWEEN_ROWS;
-                        x += maxWidthInThisRow;
-                        entireWidth += maxWidthInThisRow;
-                        maxWidthInThisRow = 0;
+                        x += columnSizes.Item(columnCounter) + MARGIN_BETWEEN_ROWS;
+                        entireWidth += columnSizes.Item(columnCounter);
                     }
 
                     // We have reached the last item.
                     if ( i == count - 1 )
-                        entireWidth += maxWidthInThisRow;
+                        entireWidth += columnSizes.Item(columnCounter);
 
                     if ( (tries == 0) &&
                             (entireWidth + SCROLL_UNIT_X > clientWidth) )
                     {
                         clientHeight -= wxSystemSettings::
-                                            GetMetric(wxSYS_HSCROLL_Y);
+                            GetMetric(wxSYS_HSCROLL_Y);
                         m_linesPerPage = 0;
                         break;
                     }
@@ -4348,15 +4421,16 @@
                 }
             }
 
+
             SetScrollbars
             (
-                SCROLL_UNIT_X,
-                lineHeight,
-                (entireWidth + SCROLL_UNIT_X) / SCROLL_UNIT_X,
-                0,
-                GetScrollPos( wxHORIZONTAL ),
-                0,
-                true
+                 SCROLL_UNIT_X,
+                 lineHeight,
+                 (entireWidth + SCROLL_UNIT_X) / SCROLL_UNIT_X,
+                 0,
+                 GetScrollPos( wxHORIZONTAL ),
+                 0,
+                 true
             );
         }
     }

 	  	 

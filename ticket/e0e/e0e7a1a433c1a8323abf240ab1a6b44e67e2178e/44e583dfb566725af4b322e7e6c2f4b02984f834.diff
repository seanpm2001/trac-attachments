Binary files wxorig/.DS_Store and wxnew/.DS_Store differ
Binary files wxorig/src/stc/.DS_Store and wxnew/src/stc/.DS_Store differ
Binary files wxorig/src/stc/scintilla/.DS_Store and wxnew/src/stc/scintilla/.DS_Store differ
Binary files wxorig/src/stc/scintilla/src/.DS_Store and wxnew/src/stc/scintilla/src/.DS_Store differ
diff -uNr wxorig/src/stc/scintilla/src/Document.cxx wxnew/src/stc/scintilla/src/Document.cxx
--- wxorig/src/stc/scintilla/src/Document.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/Document.cxx	2011-01-03 10:22:12.000000000 -0500
@@ -684,7 +684,7 @@
  * Insert a null terminated string.
  */
 bool Document::InsertCString(int position, const char *s) {
-	return InsertString(position, s, strlen(s));
+	return InsertString(position, s, static_cast<int>(strlen(s)));
 }
 
 void Document::ChangeChar(int pos, char ch) {
diff -uNr wxorig/src/stc/scintilla/src/LexAU3.cxx wxnew/src/stc/scintilla/src/LexAU3.cxx
--- wxorig/src/stc/scintilla/src/LexAU3.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/LexAU3.cxx	2011-01-03 09:50:22.000000000 -0500
@@ -238,7 +238,7 @@
 		if (IsAWordChar(sc.ch) || sc.ch == '}') 
 		{
 			strcpy(s_save,s);
-			int tp = strlen(s_save);
+			const size_t tp = strlen(s_save);
 			if (tp < 99) {
 				s_save[tp] = static_cast<char>(tolower(sc.ch));
 				s_save[tp+1] = '\0';
diff -uNr wxorig/src/stc/scintilla/src/LexHTML.cxx wxnew/src/stc/scintilla/src/LexHTML.cxx
--- wxorig/src/stc/scintilla/src/LexHTML.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/LexHTML.cxx	2011-01-03 10:00:16.000000000 -0500
@@ -919,8 +919,8 @@
 				levelCurrent++;
 				
 			if (ch != '%' && ch != '$') {
-				i += strlen(makoBlockType);
-				visibleChars += strlen(makoBlockType);
+				i += static_cast<int>(strlen(makoBlockType));
+				visibleChars += static_cast<int>(strlen(makoBlockType));
 				if (keywords4.InList(makoBlockType))
 					styler.ColourTo(i, SCE_HP_WORD);
 				else
@@ -1859,7 +1859,7 @@
 					styler.ColourTo(i, StateToPrint);
 					state = SCE_HPHP_DEFAULT;
 				} else if (isLineEnd(chPrev)) {
-				const int psdLength = strlen(phpStringDelimiter);
+				const int psdLength = static_cast<int>(strlen(phpStringDelimiter));
 					const char chAfterPsd = styler.SafeGetCharAt(i + psdLength);
 					const char chAfterPsd2 = styler.SafeGetCharAt(i + psdLength + 1);
 					if (isLineEnd(chAfterPsd) ||
@@ -1882,7 +1882,7 @@
 					state = SCE_HPHP_DEFAULT;
 				}
 			} else if (isLineEnd(chPrev) && styler.Match(i, phpStringDelimiter)) {
-				const int psdLength = strlen(phpStringDelimiter);
+				const int psdLength = static_cast<int>(strlen(phpStringDelimiter));
 				const char chAfterPsd = styler.SafeGetCharAt(i + psdLength);
 				const char chAfterPsd2 = styler.SafeGetCharAt(i + psdLength + 1);
 				if (isLineEnd(chAfterPsd) ||
diff -uNr wxorig/src/stc/scintilla/src/LexPerl.cxx wxnew/src/stc/scintilla/src/LexPerl.cxx
--- wxorig/src/stc/scintilla/src/LexPerl.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/LexPerl.cxx	2011-01-03 10:07:12.000000000 -0500
@@ -247,7 +247,7 @@
 static bool isMatch(const char *sref, char *s)
 {
 	// match per-line delimiter - must kill trailing CR if CRLF
-	int i = strlen(s);
+	const size_t i = strlen(s);
 	if (i != 0 && s[i - 1] == '\r')
 		s[i - 1] = '\0';
 	return (strcmp(sref, s) == 0);
diff -uNr wxorig/src/stc/scintilla/src/LexPowerPro.cxx wxnew/src/stc/scintilla/src/LexPowerPro.cxx
--- wxorig/src/stc/scintilla/src/LexPowerPro.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/LexPowerPro.cxx	2011-01-03 10:08:50.000000000 -0500
@@ -134,7 +134,7 @@
 		if ((sc.ch > 0) && setWord.Contains(sc.ch)) 
 		{
 			strcpy(s_save,s);
-			int tp = strlen(s_save);
+			const size_t tp = strlen(s_save);
 			if (tp < 99) {
 				s_save[tp] = static_cast<char>(tolower(sc.ch));
 				s_save[tp+1] = '\0';
diff -uNr wxorig/src/stc/scintilla/src/LexTeX.cxx wxnew/src/stc/scintilla/src/LexTeX.cxx
--- wxorig/src/stc/scintilla/src/LexTeX.cxx	2010-06-28 05:15:30.000000000 -0400
+++ wxnew/src/stc/scintilla/src/LexTeX.cxx	2011-01-03 10:09:40.000000000 -0500
@@ -219,7 +219,7 @@
 						sc.ForwardSetState(SCE_TEX_TEXT) ;
 					} else {
 						sc.GetCurrent(key, sizeof(key)-1) ;
-						k = strlen(key) ;
+						k = static_cast<int>(strlen(key)) ;
 						memmove(key,key+1,k) ; // shift left over escape token
 						key[k] = '\0' ;
 						k-- ;

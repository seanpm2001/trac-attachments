diff --git a/include/wx/stc/stc.h b/include/wx/stc/stc.h
index 1b73462..a16c8ee 100644
--- a/include/wx/stc/stc.h
+++ b/include/wx/stc/stc.h
@@ -208,10 +208,6 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_INDIC_IME_MAX 35
 #define wxSTC_INDIC_MAX 35
 #define wxSTC_INDIC_CONTAINER 8
-#define wxSTC_INDIC0_MASK 0x20
-#define wxSTC_INDIC1_MASK 0x40
-#define wxSTC_INDIC2_MASK 0x80
-#define wxSTC_INDICS_MASK 0xE0
 #define wxSTC_INDICVALUEBIT 0x1000000
 #define wxSTC_INDICVALUEMASK 0xFFFFFF
 #define wxSTC_INDICFLAG_VALUEFORE 1
@@ -373,8 +369,6 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_VS_NOWRAPLINESTART 4
 #define wxSTC_TECHNOLOGY_DEFAULT 0
 #define wxSTC_TECHNOLOGY_DIRECTWRITE 1
-#define wxSTC_TECHNOLOGY_DIRECTWRITERETAIN 2
-#define wxSTC_TECHNOLOGY_DIRECTWRITEDC 3
 
 /// Line end types which may be used in addition to LF, CR, and CRLF
 /// SC_LINE_END_TYPE_UNICODE includes U+2028 Line Separator,
@@ -2472,22 +2466,64 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 
 //}}}
 //----------------------------------------------------------------------
-// The following entries have non-conformant prefixes.  Although preserved
-// here for backwards compatibility, these should be considered deprecated.
 
-// Instead of the following, use the wxSTC_KEYMOD_* entries defined above
-#define wxSTC_SCMOD_NORM 0
-#define wxSTC_SCMOD_SHIFT 1
-#define wxSTC_SCMOD_CTRL 2
-#define wxSTC_SCMOD_ALT 4
-#define wxSTC_SCMOD_SUPER 8
-#define wxSTC_SCMOD_META 16
 
-// Instead of the following, use the wxSTC_VS_* entries defined above
-#define wxSTC_SCVS_NONE 0
-#define wxSTC_SCVS_RECTANGULARSELECTION 1
-#define wxSTC_SCVS_USERACCESSIBLE 2
-#define wxSTC_SCVS_NOWRAPLINESTART 4
+#if defined(__clang__) || wxCHECK_GCC_VERSION(4, 5)
+    #define wxSTC_STRINGIFY(X) #X
+    #define wxSTC_DEPRECATED_MACRO_VALUE(value,msg) \
+        _Pragma(wxSTC_STRINGIFY(GCC warning msg)) value
+#else
+    #define wxSTC_DEPRECATED_MACRO_VALUE(value,msg) value
+#endif
+
+
+// The wxSTC_INDIC{0,1,2,S}_MASK values are no longer used in Scintilla
+
+#if wxCHECK_VISUALC_VERSION(10)
+    #pragma deprecated(wxSTC_INDIC0_MASK, wxSTC_INDIC1_MASK, \
+                       wxSTC_INDIC2_MASK, wxSTC_INDICS_MASK)
+#endif
+
+#define wxSTC_INDIC0_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x20,\
+    "wxSTC_INDIC0_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDIC1_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x40,\
+    "wxSTC_INDIC1_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDIC2_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x80,\
+    "wxSTC_INDIC2_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDICS_MASK wxSTC_DEPRECATED_MACRO_VALUE(0xE0,\
+    "wxSTC_INDICS_MASK is deprecated. Style byte indicators are no longer used.")
+
+
+// The following entries have non-conformant prefixes.
+
+#if wxCHECK_VISUALC_VERSION(10)
+    #pragma deprecated(wxSTC_SCMOD_NORM, wxSTC_SCMOD_SHIFT, wxSTC_SCMOD_CTRL, \
+                       wxSTC_SCMOD_ALT, wxSTC_SCMOD_SUPER, wxSTC_SCMOD_META, \
+                       wxSTC_SCVS_NONE, wxSTC_SCVS_RECTANGULARSELECTION, \
+                       wxSTC_SCVS_USERACCESSIBLE, wxSTC_SCVS_NOWRAPLINESTART)
+#endif
+
+#define wxSTC_SCMOD_NORM wxSTC_DEPRECATED_MACRO_VALUE(0,\
+    "wxSTC_SCMOD_NORM is deprecated. Use wxSTC_KEYMOD_NORM instead.")
+#define wxSTC_SCMOD_SHIFT wxSTC_DEPRECATED_MACRO_VALUE(1,\
+    "wxSTC_SCMOD_SHIFT is deprecated. Use wxSTC_KEYMOD_SHIFT instead.")
+#define wxSTC_SCMOD_CTRL wxSTC_DEPRECATED_MACRO_VALUE(2,\
+    "wxSTC_SCMOD_CTRL is deprecated. Use wxSTC_KEYMOD_CTRL instead.")
+#define wxSTC_SCMOD_ALT wxSTC_DEPRECATED_MACRO_VALUE(4,\
+    "wxSTC_SCMOD_ALT is deprecated. Use wxSTC_KEYMOD_ALT instead.")
+#define wxSTC_SCMOD_SUPER wxSTC_DEPRECATED_MACRO_VALUE(8,\
+    "wxSTC_SCMOD_SUPER is deprecated. Use wxSTC_KEYMOD_SUPER instead.")
+#define wxSTC_SCMOD_META wxSTC_DEPRECATED_MACRO_VALUE(16,\
+    "wxSTC_SCMOD_META is deprecated. Use wxSTC_KEYMOD_META instead.")
+
+#define wxSTC_SCVS_NONE wxSTC_DEPRECATED_MACRO_VALUE(0, \
+    "wxSTC_SCVS_NONE is deprecated. Use wxSTC_VS_NONE instead.")
+#define wxSTC_SCVS_RECTANGULARSELECTION wxSTC_DEPRECATED_MACRO_VALUE(1, \
+    "wxSTC_SCVS_RECTANGULARSELECTION is deprecated. Use wxSTC_VS_RECTANGULARSELECTION instead.")
+#define wxSTC_SCVS_USERACCESSIBLE wxSTC_DEPRECATED_MACRO_VALUE(2, \
+    "wxSTC_SCVS_USERACCESSIBLE is deprecated. Use wxSTC_VS_USERACCESSIBLE instead.")
+#define wxSTC_SCVS_NOWRAPLINESTART wxSTC_DEPRECATED_MACRO_VALUE(4, \
+    "wxSTC_SCVS_NOWRAPLINESTART is deprecated. Use wxSTC_VS_NOWRAPLINESTART instead.")
 
 
 //----------------------------------------------------------------------
@@ -2977,8 +3013,7 @@ public:
     void SetEOLMode(int eolMode);
 
     // Set the current styling position to start.
-    // The unused parameter is no longer used and should be set to 0.
-    void StartStyling(int start, int unused=0);
+    void StartStyling(int start);
 
     // Change style from current styling position for length characters to a style
     // and move the current styling position to after this newly styled segment.
@@ -3301,9 +3336,11 @@ public:
     // Divide each styling byte into lexical class bits (default: 5) and indicator
     // bits (default: 3). If a lexer requires more than 32 lexical states, then this
     // is used to expand the possible states.
+    wxDEPRECATED_MSG( "This method uses a function deprecated in the Scintilla library." )
     void SetStyleBits(int bits);
 
     // Retrieve number of bits in style bytes used to hold the lexical state.
+    wxDEPRECATED_MSG( "This method uses a function deprecated in the Scintilla library." )
     int GetStyleBits() const;
 
     // Used to hold extra styling information for each line.
@@ -4965,6 +5002,7 @@ public:
     int GetPropertyInt(const wxString &key, int defaultValue=0) const;
 
     // Retrieve the number of bits the current lexer needs for styling.
+    wxDEPRECATED_MSG( "This method uses a function deprecated in the Scintilla library." )
     int GetStyleBitsNeeded() const;
 
     // Retrieve the lexing language of the document.
@@ -5359,6 +5397,9 @@ public:
     wxDEPRECATED_MSG("use UsePopUp(int) instead.")
     void UsePopUp(bool allowPopUp);
 
+    wxDEPRECATED_MSG("use StartStyling(int start) instead.")
+    void StartStyling(int start, int unused);
+
 
     static wxVersionInfo GetLibraryVersionInfo();
 
diff --git a/interface/wx/stc/stc.h b/interface/wx/stc/stc.h
index d059b6b..c3fafbb 100644
--- a/interface/wx/stc/stc.h
+++ b/interface/wx/stc/stc.h
@@ -164,10 +164,6 @@
 #define wxSTC_INDIC_IME_MAX 35
 #define wxSTC_INDIC_MAX 35
 #define wxSTC_INDIC_CONTAINER 8
-#define wxSTC_INDIC0_MASK 0x20
-#define wxSTC_INDIC1_MASK 0x40
-#define wxSTC_INDIC2_MASK 0x80
-#define wxSTC_INDICS_MASK 0xE0
 #define wxSTC_INDICVALUEBIT 0x1000000
 #define wxSTC_INDICVALUEMASK 0xFFFFFF
 #define wxSTC_INDICFLAG_VALUEFORE 1
@@ -329,8 +325,6 @@
 #define wxSTC_VS_NOWRAPLINESTART 4
 #define wxSTC_TECHNOLOGY_DEFAULT 0
 #define wxSTC_TECHNOLOGY_DIRECTWRITE 1
-#define wxSTC_TECHNOLOGY_DIRECTWRITERETAIN 2
-#define wxSTC_TECHNOLOGY_DIRECTWRITEDC 3
 
 /// Line end types which may be used in addition to LF, CR, and CRLF
 /// SC_LINE_END_TYPE_UNICODE includes U+2028 Line Separator,
@@ -2428,6 +2422,22 @@
 
 //}}}
 
+
+//The following values are deprecated in the Scintilla library
+
+///@deprecated
+#define wxSTC_INDIC0_MASK 0x20
+
+///@deprecated
+#define wxSTC_INDIC1_MASK 0x40
+
+///@deprecated
+#define wxSTC_INDIC2_MASK 0x80
+
+///@deprecated
+#define wxSTC_INDICS_MASK 0xE0
+
+
 // Commands that can be bound to keystrokes {{{
 
 
@@ -4317,9 +4327,8 @@ public:
 
     /**
         Set the current styling position to start.
-        The unused parameter is no longer used and should be set to 0.
     */
-    void StartStyling(int start, int unused=0);
+    void StartStyling(int start);
 
     /**
         Change style from current styling position for length characters to a style
diff --git a/src/stc/gen_docs.py b/src/stc/gen_docs.py
index 41f6974..42b0680 100644
--- a/src/stc/gen_docs.py
+++ b/src/stc/gen_docs.py
@@ -806,6 +806,8 @@ docSubstitutions = {
     'TextWidth':{'NUL terminated text argument.':''},
     'GetCurLine':{'Result is NUL-terminated.':'',
         'Returns the index of the caret on the line.':''},
+    'StartStyling':
+        {'The unused parameter is no longer used and should be set to 0.':''},
 
     'DescribeKeyWordSets':{'\\n':'\\\\n','Result is NUL-terminated.':''},
     'PropertyNames':{'\\n':'\\\\n','Result is NUL-terminated.':''},
@@ -1355,7 +1357,7 @@ sinceAnnotations= {
 
 #----------------------------------------------------------------------------
 
-def buildDocs(name, docs):
+def buildDocs(name, docs, icat):
     docsLong = 0
 
     # If an item does not have a category or the category to which it is
@@ -1384,6 +1386,14 @@ def buildDocs(name, docs):
     if name in extendedDocs:
         docsLong = extendedDocs[name]
 
+    if icat=='Provisional':
+        note = ('','This method is provisional and is subject to change'
+                'in future versions of wxStyledTextCtrl.',)
+        if docsLong==0:
+            docsLong = note
+        else:
+            docsLong = docsLong + note
+
     if name in sinceAnnotations:
         note = ('@since '+sinceAnnotations[name],)
         if docsLong==0:
@@ -1391,7 +1401,7 @@ def buildDocs(name, docs):
         else:
             docsLong = docsLong + note
 
-    if category=='DeprecatedMessages':
+    if category=='DeprecatedMessages' or icat=='Deprecated':
         note = ('@deprecated',)
         if docsLong==0:
             docsLong = note
diff --git a/src/stc/gen_iface.py b/src/stc/gen_iface.py
index 67a235a..38a45e9 100755
--- a/src/stc/gen_iface.py
+++ b/src/stc/gen_iface.py
@@ -68,6 +68,18 @@ cmdValues = [ 2011,
 # Should a function be also generated for the CMDs?
 FUNC_FOR_CMD = 1
 
+# Should methods and values be generated for the provisional Scintilla items?
+GENERATE_PROVISIONAL_ITEMS = 0
+
+# No wxSTC value will be generated for the following Scintilla values.
+notMappedSciValues = {
+    'SC_TECHNOLOGY_DIRECTWRITERETAIN',
+    'SC_TECHNOLOGY_DIRECTWRITEDC',
+    'INDIC0_MASK',
+    'INDIC1_MASK',
+    'INDIC2_MASK',
+    'INDICS_MASK'
+}
 
 # Map some generic typenames to wx types, using return value syntax
 retTypeMap = {
@@ -452,13 +464,10 @@ methodOverrideMap = {
 
     'StartStyling' :
     (0,
-     'void %s(int start, int unused=0);',
-
-     '''void %s(int start, int unused) {
-        wxASSERT_MSG(unused==0,
-                     "The second argument passed to StartStyling should be 0");
+     'void %s(int start);',
 
-        SendMsg(%s, start, unused);'''
+     '''void %s(int start) {
+        SendMsg(%s, start, 0);'''
     ),
 
     'SetStylingEx' :
@@ -1111,6 +1120,9 @@ methodOverrideMap = {
          return stc2wx(buf);'''
     ),
 
+    'SetKeysUnicode' : (None,0,0),
+    'GetKeysUnicode' : (None,0,0),
+
     '' : ('', 0, 0),
 
     }
@@ -1150,6 +1162,7 @@ def processIface(iface, h_tmplt, cpp_tmplt, ih_tmplt, h_dest, cpp_dest, docstr_d
     values = []
     methods = []
     cmds = []
+    icat = 'Basics'
 
     # parse iface file
     fi = FileInput(iface)
@@ -1164,16 +1177,16 @@ def processIface(iface, h_tmplt, cpp_tmplt, ih_tmplt, h_dest, cpp_dest, docstr_d
             curDocStrings.append(line[2:])
 
         elif op == 'val ':
-            parseVal(line[4:], values, curDocStrings)
+            parseVal(line[4:], values, curDocStrings, icat)
             curDocStrings = []
 
         elif op == 'fun ' or op == 'set ' or op == 'get ':
-            parseFun(line[4:], methods, curDocStrings, cmds, op == 'get ', msgcodes)
+            parseFun(line[4:], methods, curDocStrings, cmds, op == 'get ', msgcodes, icat)
             curDocStrings = []
 
         elif op == 'cat ':
-            if line[4:].strip() == 'Deprecated':
-                break    # skip the rest of the file
+            icat = line[4:].strip()
+            curDocStrings = []
 
         elif op == 'evt ':
             pass
@@ -1277,16 +1290,19 @@ def processMethods(methods):
     for c in categoriesList:
         piecesForInterface[c[0]]=[]
 
-    for retType, interfName, number, param1, param2, docs, is_const, is_override in methods:
+    for retType, interfName, number, param1, param2, docs, is_const, is_override, icat  in methods:
         retType = retTypeMap.get(retType, retType)
         params = makeParamString(param1, param2)
 
+        if icat=='Provisional' and not GENERATE_PROVISIONAL_ITEMS:
+            continue
+
         name, theDef, theImp = checkMethodOverride(interfName, number)
 
         if name is None:
             continue
 
-        category, docs, docsLong = buildDocs(interfName, docs)
+        category, docs, docsLong = buildDocs(interfName, docs, icat)
 
         # Build docstrings
         st = 'DocStr(wxStyledTextCtrl::%s,\n' \
@@ -1305,6 +1321,9 @@ def processMethods(methods):
             if is_override:
                 theDef = theDef + ' wxOVERRIDE'
             theDef = theDef + ';'
+        if category=='DeprecatedMessages' or icat=='Deprecated':
+            defs.append('    wxDEPRECATED_MSG( "This method uses a function '
+                        'deprecated in the Scintilla library." )')
         defs.append(theDef)
 
         # Skip override from the interface file
@@ -1434,9 +1453,23 @@ def makeParamString(param1, param2):
 
 #----------------------------------------------------------------------------
 
-def parseVal(line, values, docs):
+def parseVal(line, values, docs, icat):
     name, val = line.split('=')
 
+    if name in notMappedSciValues:
+            return
+
+    if icat=='Deprecated':
+        docs.append('@deprecated')
+
+    if icat=='Provisional':
+        if GENERATE_PROVISIONAL_ITEMS:
+            docs.append('This item is a provisional value and is subject '
+                        'to change')
+            docs.append('in future versions of wxStyledTextCtrl.')
+        else:
+            return
+
     # remove prefixes such as SCI, etc.
     for old, new in valPrefixes:
         lo = len(old)
@@ -1456,7 +1489,7 @@ funregex = re.compile(r'\s*([a-zA-Z0-9_]+)'  # <ws>return type
                       '\(([ a-zA-Z0-9_]*),'  # (param,
                       '([ a-zA-Z0-9_]*),*\)')  # param)
 
-def parseFun(line, methods, docs, values, is_const, msgcodes):
+def parseFun(line, methods, docs, values, is_const, msgcodes, icat):
     def parseParam(param):
         param = param.strip()
         if param == '':
@@ -1478,7 +1511,7 @@ def parseFun(line, methods, docs, values, is_const, msgcodes):
     num = int(number)
     for v in cmdValues:
         if (type(v) == type(()) and v[0] <= num <= v[1]) or v == num:
-            parseVal('CMD_%s=%s' % (name.upper(), number), values, docs)
+            parseVal('CMD_%s=%s' % (name.upper(), number), values, docs, 'Basics')
 
             # if we are not also doing a function for CMD values, then
             # just return, otherwise fall through to the append blow.
@@ -1491,7 +1524,8 @@ def parseFun(line, methods, docs, values, is_const, msgcodes):
     else:
         code = number
     methods.append( (retType, name, code, param1, param2, tuple(docs),
-                     is_const or name in constNonGetterMethods, name in overrideNeeded) )
+                     is_const or name in constNonGetterMethods,
+                     name in overrideNeeded, icat) )
 
 
 #----------------------------------------------------------------------------
diff --git a/src/stc/stc.cpp b/src/stc/stc.cpp
index c45d240..25e3b44 100644
--- a/src/stc/stc.cpp
+++ b/src/stc/stc.cpp
@@ -508,12 +508,8 @@ void wxStyledTextCtrl::SetEOLMode(int eolMode)
 }
 
 // Set the current styling position to start.
-// The unused parameter is no longer used and should be set to 0.
-void wxStyledTextCtrl::StartStyling(int start, int unused) {
-        wxASSERT_MSG(unused==0,
-                     "The second argument passed to StartStyling should be 0");
-
-        SendMsg(SCI_STARTSTYLING, start, unused);
+void wxStyledTextCtrl::StartStyling(int start) {
+        SendMsg(SCI_STARTSTYLING, start, 0);
 }
 
 // Change style from current styling position for length characters to a style
@@ -5195,6 +5191,14 @@ void wxStyledTextCtrl::UsePopUp(bool allowPopUp)
     SendMsg(SCI_USEPOPUP, allowPopUp ? SC_POPUP_ALL : SC_POPUP_NEVER, 0);
 }
 
+void wxStyledTextCtrl::StartStyling(int start, int unused) 
+{
+        wxASSERT_MSG(unused==0,
+                     "The second argument passed to StartStyling should be 0");
+
+        SendMsg(SCI_STARTSTYLING, start, unused);
+}
+
 //----------------------------------------------------------------------
 // Event handlers
 
diff --git a/src/stc/stc.cpp.in b/src/stc/stc.cpp.in
index 9b56e3a..411505f 100644
--- a/src/stc/stc.cpp.in
+++ b/src/stc/stc.cpp.in
@@ -670,6 +670,14 @@ void wxStyledTextCtrl::UsePopUp(bool allowPopUp)
     SendMsg(SCI_USEPOPUP, allowPopUp ? SC_POPUP_ALL : SC_POPUP_NEVER, 0);
 }
 
+void wxStyledTextCtrl::StartStyling(int start, int unused) 
+{
+        wxASSERT_MSG(unused==0,
+                     "The second argument passed to StartStyling should be 0");
+
+        SendMsg(SCI_STARTSTYLING, start, unused);
+}
+
 //----------------------------------------------------------------------
 // Event handlers
 
diff --git a/src/stc/stc.h.in b/src/stc/stc.h.in
index d39c3b5..86baff0 100644
--- a/src/stc/stc.h.in
+++ b/src/stc/stc.h.in
@@ -62,22 +62,64 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 
 //}}}
 //----------------------------------------------------------------------
-// The following entries have non-conformant prefixes.  Although preserved
-// here for backwards compatibility, these should be considered deprecated.
 
-// Instead of the following, use the wxSTC_KEYMOD_* entries defined above
-#define wxSTC_SCMOD_NORM 0
-#define wxSTC_SCMOD_SHIFT 1
-#define wxSTC_SCMOD_CTRL 2
-#define wxSTC_SCMOD_ALT 4
-#define wxSTC_SCMOD_SUPER 8
-#define wxSTC_SCMOD_META 16
 
-// Instead of the following, use the wxSTC_VS_* entries defined above
-#define wxSTC_SCVS_NONE 0
-#define wxSTC_SCVS_RECTANGULARSELECTION 1
-#define wxSTC_SCVS_USERACCESSIBLE 2
-#define wxSTC_SCVS_NOWRAPLINESTART 4
+#if defined(__clang__) || wxCHECK_GCC_VERSION(4, 5)
+    #define wxSTC_STRINGIFY(X) #X
+    #define wxSTC_DEPRECATED_MACRO_VALUE(value,msg) \
+        _Pragma(wxSTC_STRINGIFY(GCC warning msg)) value
+#else
+    #define wxSTC_DEPRECATED_MACRO_VALUE(value,msg) value
+#endif
+
+
+// The wxSTC_INDIC{0,1,2,S}_MASK values are no longer used in Scintilla
+
+#if wxCHECK_VISUALC_VERSION(10)
+    #pragma deprecated(wxSTC_INDIC0_MASK, wxSTC_INDIC1_MASK, \
+                       wxSTC_INDIC2_MASK, wxSTC_INDICS_MASK)
+#endif
+
+#define wxSTC_INDIC0_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x20,\
+    "wxSTC_INDIC0_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDIC1_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x40,\
+    "wxSTC_INDIC1_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDIC2_MASK wxSTC_DEPRECATED_MACRO_VALUE(0x80,\
+    "wxSTC_INDIC2_MASK is deprecated. Style byte indicators are no longer used.")
+#define wxSTC_INDICS_MASK wxSTC_DEPRECATED_MACRO_VALUE(0xE0,\
+    "wxSTC_INDICS_MASK is deprecated. Style byte indicators are no longer used.")
+
+
+// The following entries have non-conformant prefixes.
+
+#if wxCHECK_VISUALC_VERSION(10)
+    #pragma deprecated(wxSTC_SCMOD_NORM, wxSTC_SCMOD_SHIFT, wxSTC_SCMOD_CTRL, \
+                       wxSTC_SCMOD_ALT, wxSTC_SCMOD_SUPER, wxSTC_SCMOD_META, \
+                       wxSTC_SCVS_NONE, wxSTC_SCVS_RECTANGULARSELECTION, \
+                       wxSTC_SCVS_USERACCESSIBLE, wxSTC_SCVS_NOWRAPLINESTART)
+#endif
+
+#define wxSTC_SCMOD_NORM wxSTC_DEPRECATED_MACRO_VALUE(0,\
+    "wxSTC_SCMOD_NORM is deprecated. Use wxSTC_KEYMOD_NORM instead.")
+#define wxSTC_SCMOD_SHIFT wxSTC_DEPRECATED_MACRO_VALUE(1,\
+    "wxSTC_SCMOD_SHIFT is deprecated. Use wxSTC_KEYMOD_SHIFT instead.")
+#define wxSTC_SCMOD_CTRL wxSTC_DEPRECATED_MACRO_VALUE(2,\
+    "wxSTC_SCMOD_CTRL is deprecated. Use wxSTC_KEYMOD_CTRL instead.")
+#define wxSTC_SCMOD_ALT wxSTC_DEPRECATED_MACRO_VALUE(4,\
+    "wxSTC_SCMOD_ALT is deprecated. Use wxSTC_KEYMOD_ALT instead.")
+#define wxSTC_SCMOD_SUPER wxSTC_DEPRECATED_MACRO_VALUE(8,\
+    "wxSTC_SCMOD_SUPER is deprecated. Use wxSTC_KEYMOD_SUPER instead.")
+#define wxSTC_SCMOD_META wxSTC_DEPRECATED_MACRO_VALUE(16,\
+    "wxSTC_SCMOD_META is deprecated. Use wxSTC_KEYMOD_META instead.")
+
+#define wxSTC_SCVS_NONE wxSTC_DEPRECATED_MACRO_VALUE(0, \
+    "wxSTC_SCVS_NONE is deprecated. Use wxSTC_VS_NONE instead.")
+#define wxSTC_SCVS_RECTANGULARSELECTION wxSTC_DEPRECATED_MACRO_VALUE(1, \
+    "wxSTC_SCVS_RECTANGULARSELECTION is deprecated. Use wxSTC_VS_RECTANGULARSELECTION instead.")
+#define wxSTC_SCVS_USERACCESSIBLE wxSTC_DEPRECATED_MACRO_VALUE(2, \
+    "wxSTC_SCVS_USERACCESSIBLE is deprecated. Use wxSTC_VS_USERACCESSIBLE instead.")
+#define wxSTC_SCVS_NOWRAPLINESTART wxSTC_DEPRECATED_MACRO_VALUE(4, \
+    "wxSTC_SCVS_NOWRAPLINESTART is deprecated. Use wxSTC_VS_NOWRAPLINESTART instead.")
 
 
 //----------------------------------------------------------------------
@@ -482,6 +524,9 @@ public:
     wxDEPRECATED_MSG("use UsePopUp(int) instead.")
     void UsePopUp(bool allowPopUp);
 
+    wxDEPRECATED_MSG("use StartStyling(int start) instead.")
+    void StartStyling(int start, int unused);
+
 
     static wxVersionInfo GetLibraryVersionInfo();
 
diff --git a/src/stc/stc.interface.h.in b/src/stc/stc.interface.h.in
index 2e4d121..7a47fbc 100644
--- a/src/stc/stc.interface.h.in
+++ b/src/stc/stc.interface.h.in
@@ -18,6 +18,22 @@
 
 //}}}
 
+
+//The following values are deprecated in the Scintilla library
+
+///@deprecated
+#define wxSTC_INDIC0_MASK 0x20
+
+///@deprecated
+#define wxSTC_INDIC1_MASK 0x40
+
+///@deprecated
+#define wxSTC_INDIC2_MASK 0x80
+
+///@deprecated
+#define wxSTC_INDICS_MASK 0xE0
+
+
 // Commands that can be bound to keystrokes {{{
 
 %(CMDS)s

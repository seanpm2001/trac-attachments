diff -ru -xmybuild wxWidgets-2008-03-15/docs/latex/wx/glcanvas.tex wxWidgets-2008-03-15-FSAA/docs/latex/wx/glcanvas.tex
--- wxWidgets-2008-03-15/docs/latex/wx/glcanvas.tex	2008-03-15 05:52:01.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/docs/latex/wx/glcanvas.tex	2008-03-16 21:08:32.000000000 +0100
@@ -73,6 +73,8 @@
 \twocolitem{\windowstyle{WX\_GL\_MIN\_ACCUM\_GREEN}}{Use green buffer with most bits (> MIN\_ACCUM\_GREEN bits)}
 \twocolitem{\windowstyle{WX\_GL\_MIN\_ACCUM\_BLUE}}{Use blue buffer with most bits (> MIN\_ACCUM\_BLUE bits)}
 \twocolitem{\windowstyle{WX\_GL\_MIN\_ACCUM\_ALPHA}}{Use blue buffer with most bits (> MIN\_ACCUM\_ALPHA bits)}
+\twocolitem{\windowstyle{WX\_GL\_SAMPLE\_BUFFERS}}{1 for multisampling support (antialiasing)}
+\twocolitem{\windowstyle{WX\_GL\_SAMPLES}}{4 for 2x2 antialising supersampling on most graphics cards}
 \end{twocollist}
 
 \wxheading{See also}
diff -ru -xmybuild wxWidgets-2008-03-15/include/wx/glcanvas.h wxWidgets-2008-03-15-FSAA/include/wx/glcanvas.h
--- wxWidgets-2008-03-15/include/wx/glcanvas.h	2008-03-15 05:50:58.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/include/wx/glcanvas.h	2008-04-08 17:08:05.000000000 +0200
@@ -47,7 +47,9 @@
     WX_GL_MIN_ACCUM_RED,   /* use red accum buffer with most bits (> MIN_ACCUM_RED bits) */
     WX_GL_MIN_ACCUM_GREEN, /* use green buffer with most bits (> MIN_ACCUM_GREEN bits) */
     WX_GL_MIN_ACCUM_BLUE,  /* use blue buffer with most bits (> MIN_ACCUM_BLUE bits) */
-    WX_GL_MIN_ACCUM_ALPHA  /* use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_MIN_ACCUM_ALPHA, /* use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits) */
+    WX_GL_SAMPLE_BUFFERS,  /* 1 for multisampling support (antialiasing) */
+    WX_GL_SAMPLES          /* 4 for 2x2 antialising supersampling on most graphics cards */
 };
 
 #define wxGLCanvasName _T("GLCanvas")
@@ -120,6 +122,9 @@
     // colour not found
     bool SetColour(const wxString& colour);
 
+    // will make sure that match is at the start of the string or that the previous char is a space, 
+    // or else we could accidentally match "glFunkyglExtension" with "glExtension"
+    static int IsExtensionSupported(const wxString& extension_, const wxString& extensionList_);
 
 
     // deprecated methods using the implicit wxGLContext
diff -ru -xmybuild wxWidgets-2008-03-15/include/wx/msw/glcanvas.h wxWidgets-2008-03-15-FSAA/include/wx/msw/glcanvas.h
--- wxWidgets-2008-03-15/include/wx/msw/glcanvas.h	2008-03-15 05:51:34.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/include/wx/msw/glcanvas.h	2008-04-08 18:03:41.000000000 +0200
@@ -141,6 +141,12 @@
     // HDC for this window, we keep it all the time
     HDC m_hDC;
 
+    // pixelFormat for multisample
+    // -1 : initial state
+    // -2 : means that multisample was requested, will setup up multisample
+    // >=0 : the multi sample pixelformat value used to create the window
+    static int ms_pixelFormatMultiSample;
+
 private:
     DECLARE_EVENT_TABLE()
     DECLARE_CLASS(wxGLCanvas)
diff -ru -xmybuild wxWidgets-2008-03-15/samples/opengl/penguin/penguin.cpp wxWidgets-2008-03-15-FSAA/samples/opengl/penguin/penguin.cpp
--- wxWidgets-2008-03-15/samples/opengl/penguin/penguin.cpp	2008-03-15 05:51:19.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/samples/opengl/penguin/penguin.cpp	2008-04-08 17:43:20.000000000 +0200
@@ -94,6 +94,8 @@
     menuBar->Append(helpMenu, wxT("&Help"));
     SetMenuBar(menuBar);
 
+    CreateStatusBar();
+
     Show(true);
 
     m_canvas = new TestGLCanvas(this, wxID_ANY, wxDefaultPosition,
@@ -141,13 +143,22 @@
     EVT_MOUSE_EVENTS(TestGLCanvas::OnMouse)
 END_EVENT_TABLE()
 
+// MultiSample example
+#define GL_MULTISAMPLE_ARB                0x809D
+int attribList[] = {WX_GL_RGBA, WX_GL_DOUBLEBUFFER, 
+        WX_GL_SAMPLE_BUFFERS, GL_TRUE, 
+        WX_GL_SAMPLES, 4, 
+        WX_GL_DEPTH_SIZE, 16, 
+        WX_GL_STENCIL_SIZE, 0,
+        0, 0};
+
 TestGLCanvas::TestGLCanvas(wxWindow *parent,
                            wxWindowID id,
                            const wxPoint& pos,
                            const wxSize& size,
                            long style,
                            const wxString& name)
-    : wxGLCanvas(parent, id, NULL, pos, size,
+    : wxGLCanvas(parent, id, attribList, pos, size,
                  style | wxFULL_REPAINT_ON_RESIZE, name)
 {
     // Explicitly create a new rendering context instance for this canvas.
@@ -156,6 +167,9 @@
     // Make the new context current (activate it for use) with this canvas.
     SetCurrent(*m_glRC);
 
+    wxLogStatus("the requested display is%s supported",
+                wxGLCanvas::IsDisplaySupported(attribList) ? "" : " not");
+
     m_gldata.initialized = false;
 
     // initialize view matrix
@@ -196,7 +210,9 @@
     build_rotmatrix( m, m_gldata.quat );
     glMultMatrixf( &m[0][0] );
 
+    glEnable(GL_MULTISAMPLE_ARB);
     m_renderer.Render();
+    glDisable(GL_MULTISAMPLE_ARB);
 
     // Flush
     glFlush();
diff -ru -xmybuild wxWidgets-2008-03-15/src/common/glcmn.cpp wxWidgets-2008-03-15-FSAA/src/common/glcmn.cpp
--- wxWidgets-2008-03-15/src/common/glcmn.cpp	2008-03-15 05:51:03.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/src/common/glcmn.cpp	2008-04-08 17:45:06.000000000 +0200
@@ -89,6 +89,33 @@
     return true;
 }
 
+int wxGLCanvasBase::IsExtensionSupported(const wxString& extension_, const wxString& extensionList_)
+{
+    const char *extensionList = extensionList_.c_str();
+    const char *extension = extension_.c_str();
+    size_t extensionLen = strlen(extension);
+
+    // Begin examination at start of string, increment by 1 on false match
+    for (const char* p = extensionList; ; p++)
+    {
+        // Advance up to the next possible match
+        p = strstr(p, extension);
+        if (p == NULL)
+        {
+            return 0; // No match
+        }
+        // Make sure that match is at the start of the string or that
+        // the previous char is a space, or else we could accidentally
+        // match "glFunkyglExtension" with "glExtension"
+        // Also, make sure that the following character is space or NULL
+        // or else "glExtensionTwo" might match "glExtension"
+        if ((p==extensionList || p[-1]==' ') && (p[extensionLen]=='\0' || p[extensionLen]==' '))
+        {
+            return 1; // Match
+        }
+    }
+}
+
 wxGLCanvasBase::~wxGLCanvasBase()
 {
 #if WXWIN_COMPATIBILITY_2_8
diff -ru -xmybuild wxWidgets-2008-03-15/src/mac/carbon/glcanvas.cpp wxWidgets-2008-03-15-FSAA/src/mac/carbon/glcanvas.cpp
--- wxWidgets-2008-03-15/src/mac/carbon/glcanvas.cpp	2008-03-15 05:51:51.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/src/mac/carbon/glcanvas.cpp	2008-04-08 18:02:08.000000000 +0200
@@ -165,6 +165,19 @@
 
 #endif // WXWIN_COMPATIBILITY_2_8
 
+static int IsExtensionSupported(const wxString& extension_)
+{
+    // we need a valid context to query for extensions.
+    const GLint defaultAttribs[] = {AGL_RGBA, AGL_DOUBLEBUFFER, AGL_NONE};
+    AGLPixelFormat fmt = aglChoosePixelFormat(NULL, 0, defaultAttribs);
+    AGLContext ctx = aglCreateContext(fmt, NULL);
+    if (ctx == NULL) return 0; // otherwise glGetString will crash
+    wxString extensionList_ = wxString::FromAscii(glGetString(GL_EXTENSIONS));
+    aglDestroyPixelFormat(fmt);
+    aglDestroyContext(ctx);
+    return wxGLCanvasBase::IsExtensionSupported(extension_, extensionList_);
+}
+
 static AGLPixelFormat ChoosePixelFormat(const int *attribList)
 {
     GLint data[512];
@@ -190,6 +203,8 @@
     {
         unsigned p = 0;
         data[p++] = AGL_MINIMUM_POLICY; // make _SIZE tags behave more like GLX
+        int multiSampleAvailable = -1; // -1 = unknown status, will call 
+        // IsExtensionSupported() only once, if needed, to set it to 0 or 1
 
         for ( unsigned arg = 0; attribList[arg] !=0 && p < WXSIZEOF(data); )
         {
@@ -271,6 +286,32 @@
                     data[p++] = AGL_ACCUM_ALPHA_SIZE;
                     data[p++] = attribList[arg++];
                     break;
+
+                case WX_GL_SAMPLE_BUFFERS:
+                    data[p++] = AGL_SAMPLE_BUFFERS_ARB;
+                    data[p++] = attribList[arg];
+                    if (attribList[arg] == GL_TRUE)
+                    {
+                        if (multiSampleAvailable == -1)
+                            multiSampleAvailable = IsExtensionSupported(wxT("GL_ARB_multisample"));
+                        if (multiSampleAvailable == 1)
+                            data[p++] = AGL_NO_RECOVERY; // if hardware resources run out, do NOT switch to software
+                        else
+                            data[p-1] = GL_FALSE;
+                    }
+                    arg++;
+                    break;
+
+                case WX_GL_SAMPLES:
+                    if (multiSampleAvailable == -1)
+                        multiSampleAvailable = IsExtensionSupported(wxT("GL_ARB_multisample"));
+                    if (multiSampleAvailable == 1)
+                    {
+                        data[p++] = AGL_SAMPLES_ARB; 
+                        data[p++] = attribList[arg];
+                    }
+                    arg++;
+                    break;
             }
         }
 
diff -ru -xmybuild wxWidgets-2008-03-15/src/msw/glcanvas.cpp wxWidgets-2008-03-15-FSAA/src/msw/glcanvas.cpp
--- wxWidgets-2008-03-15/src/msw/glcanvas.cpp	2008-03-15 05:51:33.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/src/msw/glcanvas.cpp	2008-04-08 18:03:04.000000000 +0200
@@ -225,6 +225,9 @@
 // wxGLCanvas construction
 // ----------------------------------------------------------------------------
 
+static bool InitMultiSample(HDC hdc, const int *attribList, int& ms_pixelFormatMultiSample);
+int wxGLCanvas::ms_pixelFormatMultiSample = -1;
+
 void wxGLCanvas::Init()
 {
 #if WXWIN_COMPATIBILITY_2_8
@@ -245,6 +248,36 @@
     Init();
 
     (void)Create(parent, id, pos, size, style, name, attribList, palette);
+    // Anti Aliasing support (WGL_ARB_multisample) :
+    // We can't request the pixel format (to query the multisampling) until we've created a window.
+    // But we can't create a FSAA screen unless we know the pixel format will support it.
+    // So, we create the window, query the pixelFormat, then destroy and remake the window
+    // if multisampling is supported.
+    if (ms_pixelFormatMultiSample == -2) // if multi sample is requested
+    {
+        wxGLContext *temp_glContext = new wxGLContext(this);
+        if (temp_glContext != NULL)
+            temp_glContext->SetCurrent(*this);
+        // Now, we have a valid handle to query for multisample support.
+        // If we find it's supported, we destroy and recreate this window, but with the new pixel format. 
+        if (InitMultiSample(GetHDC(), attribList, ms_pixelFormatMultiSample))
+        {
+            delete temp_glContext;
+            // destroy Window
+            parent->RemoveChild(this);
+            ::ReleaseDC(GetHwnd(), m_hDC);
+            m_hDC = 0;
+            HWND hwnd = GetHwnd();
+            DissociateHandle(); // will do SetHWND(0);
+            ::DestroyWindow(hwnd);
+            // recreate the window with multisample pixel format
+            (void)Create(parent, id, pos, size, style, name, attribList, palette);
+        }
+        else
+        {
+            delete temp_glContext;
+        }
+    }
 }
 
 wxGLCanvas::~wxGLCanvas()
@@ -315,18 +348,222 @@
 {
     if ( !::SwapBuffers(m_hDC) )
     {
-        return false;
         wxLogLastError(_T("SwapBuffers"));
+        return false;
     }
     return true;
 }
 
 // ----------------------------------------------------------------------------
+// multi sample stuff
+// ----------------------------------------------------------------------------
+
+typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
+typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
+
+static int IsWglExtensionSupported(const wxString& extension)
+{
+    wxString extensionList;
+    PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB =
+        (PFNWGLGETEXTENSIONSSTRINGARBPROC) wglGetProcAddress("wglGetExtensionsStringARB");
+    if (wglGetExtensionsStringARB != NULL)
+    {
+        extensionList = wxString::FromAscii(wglGetExtensionsStringARB(wglGetCurrentDC()));
+    }
+    else
+    {
+        PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT =
+            (PFNWGLGETEXTENSIONSSTRINGEXTPROC) wglGetProcAddress("wglGetExtensionsStringEXT");
+        if (wglGetExtensionsStringEXT != NULL)
+        {
+            extensionList = wxString::FromAscii(wglGetExtensionsStringEXT());
+        }
+        else
+        {
+            return 0;
+        }
+    }
+    return wxGLCanvasBase::IsExtensionSupported(extension, extensionList);
+}
+
+typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
+
+#ifndef WGL_ARB_pixel_format
+#define WGL_DRAW_TO_WINDOW_ARB            0x2001
+#define WGL_ACCELERATION_ARB              0x2003
+#define WGL_NUMBER_OVERLAYS_ARB           0x2008
+#define WGL_NUMBER_UNDERLAYS_ARB          0x2009
+#define WGL_SUPPORT_OPENGL_ARB            0x2010
+#define WGL_DOUBLE_BUFFER_ARB             0x2011
+#define WGL_STEREO_ARB                    0x2012
+#define WGL_COLOR_BITS_ARB                0x2014
+#define WGL_RED_BITS_ARB                  0x2015
+#define WGL_GREEN_BITS_ARB                0x2017
+#define WGL_BLUE_BITS_ARB                 0x2019
+#define WGL_ALPHA_BITS_ARB                0x201B
+#define WGL_ACCUM_RED_BITS_ARB            0x201E
+#define WGL_ACCUM_GREEN_BITS_ARB          0x201F
+#define WGL_ACCUM_BLUE_BITS_ARB           0x2020
+#define WGL_ACCUM_ALPHA_BITS_ARB          0x2021
+#define WGL_DEPTH_BITS_ARB                0x2022
+#define WGL_STENCIL_BITS_ARB              0x2023
+#define WGL_AUX_BUFFERS_ARB               0x2024
+#define WGL_FULL_ACCELERATION_ARB         0x2027
+#endif
+
+#ifndef WGL_ARB_multisample
+#define WGL_SAMPLE_BUFFERS_ARB            0x2041
+#define WGL_SAMPLES_ARB                   0x2042
+#endif
+
+static bool InitMultiSample(HDC hdc, const int *attribList, int& PFMS)
+{
+    // According to http://www.delphi3d.net/hardware/extsupport.php?extension=WGL_ARB_multisample
+    // and http://www.delphi3d.net/hardware/extsupport.php?extension=WGL_EXT_multisample
+    // there is no need to support WGL_EXT_multisample
+    if (IsWglExtensionSupported(wxT("WGL_ARB_multisample")))
+    {
+        const char *name="wglChoosePixelFormatARB";
+        PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB =
+            (PFNWGLCHOOSEPIXELFORMATARBPROC)wglGetProcAddress(name);
+        if (wglChoosePixelFormatARB == NULL)
+        {
+            return false; // should not occur
+        }
+        int i=0,j=0;
+        int iAttributes[128];
+        iAttributes[j++]=WGL_DRAW_TO_WINDOW_ARB; iAttributes[j++]=GL_TRUE;
+        iAttributes[j++]=WGL_SUPPORT_OPENGL_ARB; iAttributes[j++]=GL_TRUE;
+        iAttributes[j++]=WGL_ACCELERATION_ARB; iAttributes[j++]=WGL_FULL_ACCELERATION_ARB;
+
+        if (attribList == NULL)
+        {
+            iAttributes[j++]=WGL_COLOR_BITS_ARB; iAttributes[j++]=24;
+            iAttributes[j++]=WGL_ALPHA_BITS_ARB; iAttributes[j++]=8;
+            iAttributes[j++]=WGL_DEPTH_BITS_ARB; iAttributes[j++]=16;
+            iAttributes[j++]=WGL_STENCIL_BITS_ARB; iAttributes[j++]=0;
+            iAttributes[j++]=WGL_DOUBLE_BUFFER_ARB; iAttributes[j++]=GL_TRUE;
+            iAttributes[j++]=WGL_SAMPLE_BUFFERS_ARB; iAttributes[j++]=GL_TRUE;
+            iAttributes[j++]=WGL_SAMPLES_ARB; iAttributes[j++]=4;
+        }
+        else
+        {
+            while(attribList[i]!=0)
+            {
+                switch(attribList[i++])
+                {
+                    case WX_GL_RGBA:
+                        iAttributes[j++]=WGL_COLOR_BITS_ARB;
+                        iAttributes[j++]=24;
+                        iAttributes[j++]=WGL_ALPHA_BITS_ARB;
+                        iAttributes[j++]=8;
+                        break;
+                    case WX_GL_BUFFER_SIZE:
+                        iAttributes[j++]=WGL_COLOR_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_LEVEL:
+                        if (attribList[i]>0)
+                        {
+                            iAttributes[j++]=WGL_NUMBER_OVERLAYS_ARB;
+                            iAttributes[j++]=1;
+                        }
+                        else if (attribList[i]<0)
+                        {
+                            iAttributes[j++]=WGL_NUMBER_UNDERLAYS_ARB;
+                            iAttributes[j++]=1;
+                        }
+                        i++; // ignored
+                        break;
+                    case WX_GL_DOUBLEBUFFER:
+                        iAttributes[j++]=WGL_DOUBLE_BUFFER_ARB;
+                        iAttributes[j++]=GL_TRUE;
+                        break;
+                    case WX_GL_STEREO:
+                        iAttributes[j++]=WGL_STEREO_ARB;
+                        iAttributes[j++]=GL_TRUE;
+                        break;
+                    case WX_GL_AUX_BUFFERS:
+                        iAttributes[j++]=WGL_AUX_BUFFERS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_RED:
+                        iAttributes[j++]=WGL_RED_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_GREEN:
+                        iAttributes[j++]=WGL_GREEN_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_BLUE:
+                        iAttributes[j++]=WGL_BLUE_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_ALPHA:
+                        iAttributes[j++]=WGL_ALPHA_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_DEPTH_SIZE:
+                        iAttributes[j++]=WGL_DEPTH_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_STENCIL_SIZE:
+                        iAttributes[j++]=WGL_STENCIL_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_ACCUM_RED:
+                        iAttributes[j++]=WGL_ACCUM_RED_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_ACCUM_GREEN:
+                        iAttributes[j++]=WGL_ACCUM_GREEN_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_ACCUM_BLUE:
+                        iAttributes[j++]=WGL_ACCUM_BLUE_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_MIN_ACCUM_ALPHA:
+                        iAttributes[j++]=WGL_ACCUM_ALPHA_BITS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_SAMPLE_BUFFERS:
+                        iAttributes[j++]=WGL_SAMPLE_BUFFERS_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    case WX_GL_SAMPLES:
+                        iAttributes[j++]=WGL_SAMPLES_ARB;
+                        iAttributes[j++]=attribList[i++];
+                        break;
+                    default:
+                        break;
+                }
+            }
+        }
+        iAttributes[j++]=0;
+        iAttributes[j++]=0;
+        float fAttributes[] = {0,0};
+        UINT numFormats=0;
+        int valid = wglChoosePixelFormatARB(hdc,iAttributes,fAttributes,1,&PFMS,&numFormats);
+        if (valid == 0)
+        {
+            wxLogLastError(_T("wglChoosePixelFormatARB"));
+            return false;
+        }
+        if (numFormats >= 1)
+        {
+            return true;
+        }
+    }
+    return false;
+}
+
+// ----------------------------------------------------------------------------
 // pixel format stuff
 // ----------------------------------------------------------------------------
 
 static void
-AdjustPFDForAttributes(PIXELFORMATDESCRIPTOR& pfd, const int *attribList)
+AdjustPFDForAttributes(PIXELFORMATDESCRIPTOR& pfd, const int *attribList, int& PFMS)
 {
     if ( !attribList )
         return;
@@ -403,6 +640,15 @@
                 pfd.cAccumBits = (pfd.cAccumBits +
                         (pfd.cAccumAlphaBits = attribList[arg++]));
                 break;
+            case WX_GL_SAMPLE_BUFFERS:
+                // There is no support for multisample when using PIXELFORMATDESCRIPTOR
+                if ((attribList[arg++] == GL_TRUE) && (PFMS < 0))
+                    PFMS = -2;  // Remember that multi sample is requested,
+                                // will call InitMultiSample() later
+                break;
+            case WX_GL_SAMPLES:
+                arg++; // Ignore the number of samples here, will be used in InitMultiSample()
+                break;
         }
     }
 }
@@ -441,7 +687,12 @@
     else
         *ppfd = pfd;
 
-    AdjustPFDForAttributes(*ppfd, attribList);
+    AdjustPFDForAttributes(*ppfd, attribList, ms_pixelFormatMultiSample);
+    if (ms_pixelFormatMultiSample >= 0)
+    {
+        // if multisample was requested and it's supported, we return it's pixelformat
+        return ms_pixelFormatMultiSample;
+    }
 
     return ::ChoosePixelFormat(hdc, ppfd);
 }
diff -ru -xmybuild wxWidgets-2008-03-15/src/unix/glx11.cpp wxWidgets-2008-03-15-FSAA/src/unix/glx11.cpp
--- wxWidgets-2008-03-15/src/unix/glx11.cpp	2008-03-15 05:51:46.000000000 +0100
+++ wxWidgets-2008-03-15-FSAA/src/unix/glx11.cpp	2008-04-08 17:29:15.000000000 +0200
@@ -122,6 +122,13 @@
 // working with GL attributes
 // ----------------------------------------------------------------------------
 
+static int IsGLXExtensionSupported(const wxString& extension_)
+{
+    wxString extensionList = wxString::FromAscii((const char *)
+        glXQueryExtensionsString(wxGetX11Display(), DefaultScreen(wxGetX11Display())));
+    return wxGLCanvasBase::IsExtensionSupported(extension_, extensionList);
+}
+
 bool
 wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
 {
@@ -153,6 +160,10 @@
     else // have non-default attributes
     {
         size_t p = 0;
+
+        int multiSampleAvailable = -1; // -1 = unknown status, will call 
+        // IsExtensionSupported() only once, if needed, to set it to 0 or 1
+
         for ( int arg = 0; wxattrs[arg] != 0; )
         {
             // check if we have any space left, knowing that we may insert 2
@@ -245,6 +256,24 @@
                     glattrs[p++] = GLX_ACCUM_ALPHA_SIZE;
                     break;
 
+                case WX_GL_SAMPLE_BUFFERS:
+                    glattrs[p++] = GLX_SAMPLE_BUFFERS_ARB;
+                    glattrs[p++] = wxattrs[arg++];
+                    if (multiSampleAvailable == -1)
+                        multiSampleAvailable = IsGLXExtensionSupported(wxT("GLX_ARB_multisample"));
+                    if (multiSampleAvailable == 0)
+                        glattrs[p-1] = GL_FALSE;
+                    continue;
+
+                case WX_GL_SAMPLES:
+                    glattrs[p++] = GLX_SAMPLES_ARB;
+                    glattrs[p++] = wxattrs[arg++];
+                    if (multiSampleAvailable == -1)
+                        multiSampleAvailable = IsGLXExtensionSupported(wxT("GLX_ARB_multisample"));
+                    if (multiSampleAvailable == 0)
+                        glattrs[p-1] = 0;
+                    continue;
+
                 default:
                     wxLogDebug(_T("Unsupported OpenGL attribute %d"),
                                wxattrs[arg - 1]);

 	  	 

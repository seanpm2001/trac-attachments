--- d:\samples-drawing\drawing.cpp	Mon Aug  3 12:43:39 2020
+++ .\drawing.cpp	Mon Aug  3 13:45:42 2020
@@ -44,7 +44,7 @@
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
-
+//
 // the application icon
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
@@ -356,7 +356,7 @@
 
     // Create the main application window
     MyFrame *frame = new MyFrame(wxT("Drawing sample"),
-                                 wxDefaultPosition, wxSize(550, 840));
+                                 wxDefaultPosition, wxSize(1200, 1200));
 
     // Show it
     frame->Show(true);
@@ -558,217 +558,25 @@
     dc.DrawLine( x+20, y+170, 100, y+170 );
 }
 
-void MyCanvas::DrawDefault(wxDC& dc)
-{
-    // Draw circle centered at the origin, then flood fill it with a different
-    // color. Done with a wxMemoryDC because Blit (used by generic
-    // wxDoFloodFill) from a window that is being painted gives unpredictable
-    // results on wxGTK
-    {
-        wxImage img(21, 21, false);
-        img.Clear(1);
-        wxBitmap bmp(img);
-        {
-            wxMemoryDC mdc(bmp);
-            mdc.SetBrush(dc.GetBrush());
-            mdc.SetPen(dc.GetPen());
-            mdc.DrawCircle(10, 10, 10);
-            wxColour c;
-            if (mdc.GetPixel(11, 11, &c))
-            {
-                mdc.SetBrush(wxColour(128, 128, 0));
-                mdc.FloodFill(11, 11, c, wxFLOOD_SURFACE);
-            }
-        }
-        bmp.SetMask(new wxMask(bmp, wxColour(1, 1, 1)));
-        dc.DrawBitmap(bmp, -10, -10, true);
-    }
-
-    dc.DrawCheckMark(5, 80, 15, 15);
-    dc.DrawCheckMark(25, 80, 30, 30);
-    dc.DrawCheckMark(60, 80, 60, 60);
-
-    // this is the test for "blitting bitmap into DC damages selected brush" bug
-    wxCoord rectSize = m_std_icon.GetWidth() + 10;
-    wxCoord x = 100;
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush( *wxGREEN_BRUSH );
-    dc.DrawRectangle(x, 10, rectSize, rectSize);
-    dc.DrawBitmap(m_std_icon, x + 5, 15, true);
-    x += rectSize + 10;
-    dc.DrawRectangle(x, 10, rectSize, rectSize);
-    dc.DrawIcon(m_std_icon, x + 5, 15);
-    x += rectSize + 10;
-    dc.DrawRectangle(x, 10, rectSize, rectSize);
-
-    // test for "transparent" bitmap drawing (it intersects with the last
-    // rectangle above)
-    //dc.SetBrush( *wxTRANSPARENT_BRUSH );
-
-    if (m_smile_bmp.IsOk())
-        dc.DrawBitmap(m_smile_bmp, x + rectSize - 20, rectSize - 10, true);
-
-    dc.SetBrush( *wxBLACK_BRUSH );
-    dc.DrawRectangle( 0, 160, 1000, 300 );
-
-    // draw lines
-    wxBitmap bitmap(20,70);
-    wxMemoryDC memdc;
-    memdc.SelectObject( bitmap );
-    memdc.SetBrush( *wxBLACK_BRUSH );
-    memdc.SetPen( *wxWHITE_PEN );
-    memdc.DrawRectangle(0,0,20,70);
-    memdc.DrawLine( 10,0,10,70 );
-
-    // to the right
-    wxPen pen = *wxRED_PEN;
-    memdc.SetPen(pen);
-    memdc.DrawLine( 10, 5,10, 5 );
-    memdc.DrawLine( 10,10,11,10 );
-    memdc.DrawLine( 10,15,12,15 );
-    memdc.DrawLine( 10,20,13,20 );
-
-/*
-    memdc.SetPen(*wxRED_PEN);
-    memdc.DrawLine( 12, 5,12, 5 );
-    memdc.DrawLine( 12,10,13,10 );
-    memdc.DrawLine( 12,15,14,15 );
-    memdc.DrawLine( 12,20,15,20 );
-*/
-
-    // same to the left
-    memdc.DrawLine( 10,25,10,25 );
-    memdc.DrawLine( 10,30, 9,30 );
-    memdc.DrawLine( 10,35, 8,35 );
-    memdc.DrawLine( 10,40, 7,40 );
-
-    // XOR draw lines
-    dc.SetPen(*wxWHITE_PEN);
-    memdc.SetLogicalFunction( wxINVERT );
-    memdc.SetPen( *wxWHITE_PEN );
-    memdc.DrawLine( 10,50,10,50 );
-    memdc.DrawLine( 10,55,11,55 );
-    memdc.DrawLine( 10,60,12,60 );
-    memdc.DrawLine( 10,65,13,65 );
-
-    memdc.DrawLine( 12,50,12,50 );
-    memdc.DrawLine( 12,55,13,55 );
-    memdc.DrawLine( 12,60,14,60 );
-    memdc.DrawLine( 12,65,15,65 );
-
-    memdc.SelectObject( wxNullBitmap );
-    dc.DrawBitmap( bitmap, 10, 170 );
-    wxImage image = bitmap.ConvertToImage();
-    image.Rescale( 60,210 );
-    bitmap = wxBitmap(image);
-    dc.DrawBitmap( bitmap, 50, 170 );
-
-    // test the rectangle outline drawing - there should be one pixel between
-    // the rect and the lines
-    dc.SetPen(*wxWHITE_PEN);
-    dc.SetBrush( *wxTRANSPARENT_BRUSH );
-    dc.DrawRectangle(150, 170, 49, 29);
-    dc.DrawRectangle(200, 170, 49, 29);
-    dc.SetPen(*wxWHITE_PEN);
-    dc.DrawLine(250, 210, 250, 170);
-    dc.DrawLine(260, 200, 150, 200);
-
-    // test the rectangle filled drawing - there should be one pixel between
-    // the rect and the lines
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush( *wxWHITE_BRUSH );
-    dc.DrawRectangle(300, 170, 49, 29);
-    dc.DrawRectangle(350, 170, 49, 29);
-    dc.SetPen(*wxWHITE_PEN);
-    dc.DrawLine(400, 170, 400, 210);
-    dc.DrawLine(300, 200, 410, 200);
-
-    // a few more tests of this kind
-    dc.SetPen(*wxRED_PEN);
-    dc.SetBrush( *wxWHITE_BRUSH );
-    dc.DrawRectangle(300, 220, 1, 1);
-    dc.DrawRectangle(310, 220, 2, 2);
-    dc.DrawRectangle(320, 220, 3, 3);
-    dc.DrawRectangle(330, 220, 4, 4);
-
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush( *wxWHITE_BRUSH );
-    dc.DrawRectangle(300, 230, 1, 1);
-    dc.DrawRectangle(310, 230, 2, 2);
-    dc.DrawRectangle(320, 230, 3, 3);
-    dc.DrawRectangle(330, 230, 4, 4);
-
-    // and now for filled rect with outline
-    dc.SetPen(*wxRED_PEN);
-    dc.SetBrush( *wxWHITE_BRUSH );
-    dc.DrawRectangle(500, 170, 49, 29);
-    dc.DrawRectangle(550, 170, 49, 29);
-    dc.SetPen(*wxWHITE_PEN);
-    dc.DrawLine(600, 170, 600, 210);
-    dc.DrawLine(500, 200, 610, 200);
-
-    // test the rectangle outline drawing - there should be one pixel between
-    // the rect and the lines
-    dc.SetPen(*wxWHITE_PEN);
-    dc.SetBrush( *wxTRANSPARENT_BRUSH );
-    dc.DrawRoundedRectangle(150, 270, 49, 29, 6);
-    dc.DrawRoundedRectangle(200, 270, 49, 29, 6);
-    dc.SetPen(*wxWHITE_PEN);
-    dc.DrawLine(250, 270, 250, 310);
-    dc.DrawLine(150, 300, 260, 300);
-
-    // test the rectangle filled drawing - there should be one pixel between
-    // the rect and the lines
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush( *wxWHITE_BRUSH );
-    dc.DrawRoundedRectangle(300, 270, 49, 29, 6);
-    dc.DrawRoundedRectangle(350, 270, 49, 29, 6);
-    dc.SetPen(*wxWHITE_PEN);
-    dc.DrawLine(400, 270, 400, 310);
-    dc.DrawLine(300, 300, 410, 300);
-
-    // Added by JACS to demonstrate bizarre behaviour.
-    // With a size of 70, we get a missing red RHS,
-    // and the height is too small, so we get yellow
-    // showing. With a size of 40, it draws as expected:
-    // it just shows a white rectangle with red outline.
-    int totalWidth = 70;
-    int totalHeight = 70;
-    wxBitmap bitmap2(totalWidth, totalHeight);
-
-    wxMemoryDC memdc2;
-    memdc2.SelectObject(bitmap2);
-
-    memdc2.SetBackground(*wxYELLOW_BRUSH);
-    memdc2.Clear();
-
-    // Now draw a white rectangle with red outline. It should
-    // entirely eclipse the yellow background.
-    memdc2.SetPen(*wxRED_PEN);
-    memdc2.SetBrush(*wxWHITE_BRUSH);
-
-    memdc2.DrawRectangle(0, 0, totalWidth, totalHeight);
-
-    memdc2.SetPen(wxNullPen);
-    memdc2.SetBrush(wxNullBrush);
-    memdc2.SelectObject(wxNullBitmap);
-
-    dc.DrawBitmap(bitmap2, 500, 270);
-
-    // Repeat, but draw directly on dc
-    // Draw a yellow rectangle filling the bitmap
-
-    x = 600; int y = 270;
-    dc.SetPen(*wxYELLOW_PEN);
-    dc.SetBrush(*wxYELLOW_BRUSH);
-    dc.DrawRectangle(x, y, totalWidth, totalHeight);
-
-    // Now draw a white rectangle with red outline. It should
-    // entirely eclipse the yellow background.
-    dc.SetPen(*wxRED_PEN);
-    dc.SetBrush(*wxWHITE_BRUSH);
-
-    dc.DrawRectangle(x, y, totalWidth, totalHeight);
+void MyCanvas::DrawDefault(wxDC& dc)
+{
+  // draw lines
+  dc.SetPen(*wxBLACK_PEN);
+
+  for (size_t i = 0; i<1200; ++i) {
+    dc.DrawLine(100+i, 0, 100, 1200);
+  }
+
+  wxSleep(1);
+
+  auto dotpen = dc.GetPen();
+  dotpen.SetColour(wxColour(255, 0, 0));
+  dotpen.SetStyle(wxPENSTYLE_DOT);
+  dc.SetPen(dotpen);
+
+  for (size_t i = 0; i<1200; ++i) {
+    dc.DrawLine(100+i, 0, 100, 1200);
+  }
 }
 
 void MyCanvas::DrawText(wxDC& dc)

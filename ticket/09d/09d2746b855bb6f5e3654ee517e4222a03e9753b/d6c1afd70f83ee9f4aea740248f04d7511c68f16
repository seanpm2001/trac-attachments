diff --git a/include/wx/gtk/textentry.h b/include/wx/gtk/textentry.h
index f78dc7b..8995c70 100644
--- a/include/wx/gtk/textentry.h
+++ b/include/wx/gtk/textentry.h
@@ -58,7 +58,7 @@ public:
     void SendMaxLenEvent();
     bool GTKEntryOnInsertText(const char* text);
     bool GTKIsUpperCase() const { return m_isUpperCase; }
-
+    int GetMaxLength() { return m_maxlen; }
 protected:
     // This method must be called from the derived class Create() to connect
     // the handlers for the clipboard (cut/copy/paste) events.
@@ -89,6 +89,7 @@ private:
     virtual GtkEntry *GetEntry() const = 0;
 
     bool m_isUpperCase;
+    int m_maxlen;
 };
 
 // We don't need the generic version.
diff --git a/interface/wx/textentry.h b/interface/wx/textentry.h
index 20bb7e2..cc5ebe4 100644
--- a/interface/wx/textentry.h
+++ b/interface/wx/textentry.h
@@ -417,7 +417,6 @@ public:
         event is sent to notify the program about it (giving it the possibility
         to show an explanatory message, for example) and the extra input is discarded.
 
-        Note that in wxGTK this function may only be used with single line text controls.
     */
     virtual void SetMaxLength(unsigned long len);
 
diff --git a/src/gtk/textctrl.cpp b/src/gtk/textctrl.cpp
index 997316d..b15ef7e 100644
--- a/src/gtk/textctrl.cpp
+++ b/src/gtk/textctrl.cpp
@@ -55,6 +55,25 @@ static void wxGtkOnRemoveTag(GtkTextBuffer *buffer,
 }
 }
 
+extern "C"
+{
+static void maxlen_handler(GtkTextBuffer *buffer, GtkTextIter *location, gchar *WXUNUSED(text), gint WXUNUSED(len), wxTextCtrl *win)
+{
+    gint count = gtk_text_buffer_get_char_count( buffer );
+    unsigned long maxlen = win->GetMaxLength();
+    if( count > maxlen )
+    {
+        GtkTextIter offset, end;
+        gtk_text_buffer_get_iter_at_offset( buffer, &offset, maxlen );
+        gtk_text_buffer_get_end_iter( buffer, &end );
+        gtk_text_buffer_delete( buffer, &offset, &end );
+#if GTK_CHECK_VERSION( 3, 0, 0 )
+        gtk_text_iter_assign( location, offset );
+#endif
+    }
+}
+}
+
 // remove all tags starting with the given prefix from the start..end range
 static void
 wxGtkTextRemoveTagsWithPrefix(GtkTextBuffer *text_buffer,
@@ -845,9 +864,14 @@ bool wxTextCtrl::Create( wxWindow *parent,
 
 GtkEditable *wxTextCtrl::GetEditable() const
 {
-    wxCHECK_MSG( IsSingleLine(), NULL, "shouldn't be called for multiline" );
-
-    return GTK_EDITABLE(m_text);
+//    wxCHECK_MSG( IsSingleLine(), NULL, "shouldn't be called for multiline" );
+    if( IsSingleLine() )
+        return GTK_EDITABLE(m_text);
+    else
+    {
+        g_signal_connect_after( m_buffer, "insert-text", G_CALLBACK(maxlen_handler), gpointer( this ) );
+        return NULL;
+    }
 }
 
 GtkEntry *wxTextCtrl::GetEntry() const
diff --git a/src/gtk/textentry.cpp b/src/gtk/textentry.cpp
index f031844..8d9f30d 100644
--- a/src/gtk/textentry.cpp
+++ b/src/gtk/textentry.cpp
@@ -427,10 +427,11 @@ void wxTextEntry::SetEditable(bool editable)
 void wxTextEntry::SetMaxLength(unsigned long len)
 {
     GtkEntry* const entry = (GtkEntry*)GetEditable();
-    if (!GTK_IS_ENTRY(entry))
-        return;
-
-    gtk_entry_set_max_length(entry, len);
+//    if (!GTK_IS_ENTRY(entry))
+//        return;
+    m_maxlen = len;
+    if( entry )
+        gtk_entry_set_max_length(entry, len);
 }
 
 void wxTextEntry::SendMaxLenEvent()

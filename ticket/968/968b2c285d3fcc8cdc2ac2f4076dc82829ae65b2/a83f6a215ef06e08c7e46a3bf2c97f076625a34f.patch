diff --git a/include/wx/msw/uxtheme.h b/include/wx/msw/uxtheme.h
index 5c4eae9..7d66eb6 100644
--- a/include/wx/msw/uxtheme.h
+++ b/include/wx/msw/uxtheme.h
@@ -84,10 +84,32 @@ private:
     wxDECLARE_NO_COPY_CLASS(wxUxThemeFont);
 };
 
+typedef int(WINAPI *DTT_CALLBACK_PROC)(HDC hdc, LPWSTR pszText, int cchText, LPRECT prc, UINT dwFlags, LPARAM lParam);
+
+typedef struct _DTTOPTS
+{
+    DWORD             dwSize;
+    DWORD             dwFlags;
+    COLORREF          crText;
+    COLORREF          crBorder;
+    COLORREF          crShadow;
+    int               iTextShadowType;
+    POINT             ptShadowOffset;
+    int               iBorderSize;
+    int               iFontPropId;
+    int               iColorPropId;
+    int               iStateId;
+    BOOL              fApplyOverlay;
+    int               iGlowSize;
+    DTT_CALLBACK_PROC pfnDrawTextCallback;
+    LPARAM            lParam;
+} DTTOPTS, *PDTTOPTS;
+
 typedef HTHEME  (__stdcall *PFNWXUOPENTHEMEDATA)(HWND, const wchar_t *);
 typedef HRESULT (__stdcall *PFNWXUCLOSETHEMEDATA)(HTHEME);
 typedef HRESULT (__stdcall *PFNWXUDRAWTHEMEBACKGROUND)(HTHEME, HDC, int, int, const RECT *, const RECT *);
 typedef HRESULT (__stdcall *PFNWXUDRAWTHEMETEXT)(HTHEME, HDC, int, int, const wchar_t *, int, DWORD, DWORD, const RECT *);
+typedef HRESULT(__stdcall *PFNWXUDRAWTHEMETEXTEX)(HTHEME, HDC, int iPartId, int iStateId, LPCWSTR, int, DWORD, LPRECT, const DTTOPTS *);
 typedef HRESULT (__stdcall *PFNWXUGETTHEMEBACKGROUNDCONTENTRECT)(HTHEME, HDC, int, int, const RECT *, RECT *);
 typedef HRESULT (__stdcall *PFNWXUGETTHEMEBACKGROUNDEXTENT)(HTHEME, HDC, int, int, const RECT *, RECT *);
 typedef HRESULT (__stdcall *PFNWXUGETTHEMEPARTSIZE)(HTHEME, HDC, int, int, const RECT *, /* enum */ THEMESIZE, SIZE *);
@@ -161,6 +183,7 @@ public:
     wxUX_THEME_DECLARE(PFNWXUCLOSETHEMEDATA, CloseThemeData)
     wxUX_THEME_DECLARE(PFNWXUDRAWTHEMEBACKGROUND, DrawThemeBackground)
     wxUX_THEME_DECLARE(PFNWXUDRAWTHEMETEXT, DrawThemeText)
+    wxUX_THEME_DECLARE(PFNWXUDRAWTHEMETEXTEX, DrawThemeTextEx)
     wxUX_THEME_DECLARE(PFNWXUGETTHEMEBACKGROUNDCONTENTRECT, GetThemeBackgroundContentRect)
     wxUX_THEME_DECLARE(PFNWXUGETTHEMEBACKGROUNDEXTENT, GetThemeBackgroundExtent)
     wxUX_THEME_DECLARE(PFNWXUGETTHEMEPARTSIZE, GetThemePartSize)
diff --git a/include/wx/renderer.h b/include/wx/renderer.h
index 3dede7a..ac9283a 100644
--- a/include/wx/renderer.h
+++ b/include/wx/renderer.h
@@ -62,6 +62,7 @@ enum
     wxCONTROL_EXPANDED   = wxCONTROL_SPECIAL, // only for the tree items
     wxCONTROL_SIZEGRIP   = wxCONTROL_SPECIAL, // only for the status bar panes
     wxCONTROL_FLAT       = wxCONTROL_SPECIAL, // checkboxes only: flat border
+    wxCONTROL_LIST_SECONDARY = wxCONTROL_SPECIAL, // secondary text in list item
     wxCONTROL_CURRENT    = 0x00000010,  // mouse is currently over the control
     wxCONTROL_SELECTED   = 0x00000020,  // selected item in e.g. listbox
     wxCONTROL_CHECKED    = 0x00000040,  // (check/radio button) is checked
@@ -329,6 +330,14 @@ public:
                            int max,
                            int flags = 0) = 0;
 
+    // Draw item text using correct color if select or themes where applicable
+    virtual void DrawItemText(wxWindow* win,
+                              wxDC& dc,
+                              const wxString& text,
+                              const wxRect& rect,
+                              int alignment = wxALIGN_LEFT | wxALIGN_TOP,
+                              int flags = 0) = 0;
+
     // geometry functions
     // ------------------
 
@@ -515,6 +524,14 @@ public:
                            int flags = 0)
         { m_rendererNative.DrawGauge(win, dc, rect, value, max, flags); }
 
+    virtual void DrawItemText(wxWindow* win,
+                              wxDC& dc,
+                              const wxString& text,
+                              const wxRect& rect,
+                              int alignment = wxALIGN_LEFT | wxALIGN_TOP,
+                              int flags = 0)
+    { m_rendererNative.DrawItemText(win, dc, text, rect, alignment, flags); }
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win)
         { return m_rendererNative.GetSplitterParams(win); }
 
diff --git a/interface/wx/renderer.h b/interface/wx/renderer.h
index c33f532..c043a09 100644
--- a/interface/wx/renderer.h
+++ b/interface/wx/renderer.h
@@ -46,6 +46,13 @@ enum
     /** Checkboxes only: flat border. */
     wxCONTROL_FLAT       = wxCONTROL_SPECIAL,
 
+    /** 
+	    Secondary text in list item. 
+		
+		@since 3.1.0
+	*/
+	wxCONTROL_LIST_SECONDARY = wxCONTROL_SPECIAL,
+	
     /** Mouse is currently over the control. */
     wxCONTROL_CURRENT    = 0x00000010,
 
@@ -405,9 +412,34 @@ public:
         (otherwise the selection rectangle is e.g. often grey and not blue).
         This may be ignored by the renderer or deduced by the code directly from
         the @a win.
+		
+		@see DrawItemText()
     */
     virtual void DrawItemSelectionRect(wxWindow* win, wxDC& dc,
                                        const wxRect& rect, int flags = 0) = 0;
+									   
+
+	/**
+	    Draw item text in the correct color based on selection status. Background of the text
+		should be painted with DrawItemSelectionRect().
+		
+		The supported @a flags are @c wxCONTROL_SELECTED for items
+        which are selected.
+		@c wxCONTROL_FOCUSED may be used to indicate if the control has the focus.
+		@c wxCONTROL_DISABLED may be used to indicate if the control is disabled.
+		Additionally @c wxCONTROL_LIST_SECONDARY may be specified for secondary
+		information in a list item (e.g. usually grey second line with description text).
+	
+	    @since 3.1.0
+		@see DrawItemSelectionRect()
+	*/
+	virtual void DrawItemText(wxWindow* win,
+                              wxDC& dc,
+                              const wxString& text,
+                              const wxRect& rect,
+                              int alignment = wxALIGN_LEFT | wxALIGN_TOP,
+                              int flags = 0) = 0;
+									   
 
     /**
         Draw a blank push button that looks very similar to wxButton.
diff --git a/samples/dataview/dataview.cpp b/samples/dataview/dataview.cpp
index 434274f..eed771b 100644
--- a/samples/dataview/dataview.cpp
+++ b/samples/dataview/dataview.cpp
@@ -33,6 +33,9 @@
 #include "wx/spinctrl.h"
 #include "wx/imaglist.h"
 #include "wx/notebook.h"
+#ifdef __WXMSW__
+#include "wx/msw/uxtheme.h"
+#endif
 
 #include "mymodels.h"
 
@@ -264,6 +267,9 @@ enum
     ID_MULTIPLE,
     ID_ROW_LINES,
     ID_HORIZ_RULES,
+#ifdef __WXMSW__
+    ID_EXPLORER_STYLE,
+#endif
     ID_VERT_RULES,
 
     ID_EXIT = wxID_EXIT,
@@ -389,6 +395,10 @@ MyFrame::MyFrame(wxFrame *frame, const wxString &title, int x, int y, int w, int
     style_menu->AppendCheckItem(ID_ROW_LINES, "Alternating colours");
     style_menu->AppendCheckItem(ID_HORIZ_RULES, "Display horizontal rules");
     style_menu->AppendCheckItem(ID_VERT_RULES, "Display vertical rules");
+#ifdef __WXMSW__
+    if (wxGetWinVersion() >= wxWinVersion_Vista)
+        style_menu->AppendCheckItem(ID_EXPLORER_STYLE, "Explorer Style");
+#endif
 
     wxMenu *file_menu = new wxMenu;
     file_menu->Append(ID_CLEARLOG, "&Clear log\tCtrl-L");
@@ -772,6 +782,10 @@ void MyFrame::OnPageChanged( wxBookCtrlEvent& WXUNUSED(event) )
         case ID_VERT_RULES:
             style = wxDV_VERT_RULES;
             break;
+#ifdef __WXMSW__
+        case ID_EXPLORER_STYLE:
+            break;
+#endif
         default:
             wxFAIL;
         }
@@ -812,6 +826,20 @@ void MyFrame::OnStyleChange( wxCommandEvent& WXUNUSED(event) )
     // rebuild the DVC for the selected panel:
     BuildDataViewCtrl((wxPanel*)m_notebook->GetPage(nPanel), nPanel, style);
 
+#ifdef __WXMSW__
+    if (wxGetWinVersion() >= wxWinVersion_Vista)
+    {
+        if (wxUxThemeEngine *theme = wxUxThemeEngine::GetIfActive())
+        {
+            if (GetMenuBar()->FindItem(ID_EXPLORER_STYLE)->IsChecked())
+            {
+                theme->SetWindowTheme(GetHwndOf(m_ctrl[nPanel]->GetMainWindow()), L"EXPLORER", NULL);
+                theme->SetWindowTheme(GetHwndOf(m_ctrl[nPanel]), L"EXPLORER", NULL);
+            }
+        }
+    }
+#endif
+
     sz->Prepend(m_ctrl[nPanel], 1, wxGROW|wxALL, 5);
     sz->Layout();
 }
diff --git a/samples/render/render.cpp b/samples/render/render.cpp
index 132d172..daf6234 100644
--- a/samples/render/render.cpp
+++ b/samples/render/render.cpp
@@ -276,6 +276,21 @@ private:
             wxRect(x2, y, widthGauge, heightGauge), 25, 100, m_flags);
 
         y += lineHeight + heightGauge;
+
+        const wxCoord heightListItem = 48;
+        const wxCoord widthListItem = 260;
+
+        dc.DrawText("DrawItemSelectionRect()", x1, y);
+        wxRendererNative::GetDefault().DrawItemSelectionRect(this, dc,
+            wxRect(x2, y, widthListItem, heightListItem), m_flags | wxCONTROL_SELECTED);
+
+        wxRendererNative::GetDefault().DrawItemText(this, dc, "DrawItemText()",
+            wxRect(x2, y, widthListItem, heightListItem).Inflate(-2, -2), m_align, m_flags | wxCONTROL_SELECTED);
+        wxRendererNative::GetDefault().DrawItemText(this, dc, "DrawItemText(wxCONTROL_LIST_SECONDARY)",
+           wxRect(x2, y + dc.GetCharHeight(), widthListItem, heightListItem-dc.GetCharHeight()).Inflate(-2, -2), 
+           m_align, m_flags | wxCONTROL_SELECTED | wxCONTROL_LIST_SECONDARY);
+
+        y += lineHeight + heightListItem;
     }
 
     int m_flags;
diff --git a/src/common/datavcmn.cpp b/src/common/datavcmn.cpp
index 57fda4b..2f2384d 100644
--- a/src/common/datavcmn.cpp
+++ b/src/common/datavcmn.cpp
@@ -29,6 +29,7 @@
 #include "wx/spinctrl.h"
 #include "wx/choice.h"
 #include "wx/imaglist.h"
+#include "wx/renderer.h"
 
 const char wxDataViewCtrlNameStr[] = "dataviewCtrl";
 
@@ -920,7 +921,7 @@ wxDataViewCustomRendererBase::RenderText(const wxString& text,
                                          int xoffset,
                                          wxRect rect,
                                          wxDC *dc,
-                                         int WXUNUSED(state))
+                                         int state)
 {
     wxRect rectText = rect;
     rectText.x += xoffset;
@@ -940,9 +941,20 @@ wxDataViewCustomRendererBase::RenderText(const wxString& text,
                                     );
     }
 
+    int flags = 0;
+    if (state & wxDATAVIEW_CELL_SELECTED)
+        flags |= wxCONTROL_SELECTED | wxCONTROL_FOCUSED;
+    if (!GetOwner()->GetOwner()->IsEnabled())
+        flags |= wxCONTROL_DISABLED;
+
     // get the alignment to use
-    dc->DrawLabel(ellipsizedText.empty() ? text : ellipsizedText,
-                  rectText, GetEffectiveAlignment());
+    wxRendererNative::Get().DrawItemText(
+        GetOwner()->GetOwner(),
+        *dc,
+        ellipsizedText.empty() ? text : ellipsizedText,
+        rectText,
+        GetEffectiveAlignment(),
+        flags);
 }
 
 //-----------------------------------------------------------------------------
diff --git a/src/generic/renderg.cpp b/src/generic/renderg.cpp
index a754440..551ba62 100644
--- a/src/generic/renderg.cpp
+++ b/src/generic/renderg.cpp
@@ -132,6 +132,9 @@ public:
 
     virtual void DrawGauge(wxWindow* win, wxDC& dc, const wxRect& rect, int value, int max, int flags = 0) wxOVERRIDE;
 
+    virtual void DrawItemText(wxWindow* win, wxDC& dc, const wxString& text, const wxRect& rect, 
+        int alignment = wxALIGN_LEFT | wxALIGN_TOP, int flags = 0) wxOVERRIDE;
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win) wxOVERRIDE;
 
     virtual wxRendererVersion GetVersion() const wxOVERRIDE
@@ -809,6 +812,40 @@ void wxRendererGeneric::DrawGauge(wxWindow* win, wxDC& dc, const wxRect& rect, i
     dc.DrawRectangle(progRect);
 }
 
+void wxRendererGeneric::DrawItemText(wxWindow* win, wxDC& dc, const wxString& text, const wxRect& rect,
+    int alignment, int flags)
+{
+    // Determine text color
+    wxColour textColour;
+    if (flags & wxCONTROL_LIST_SECONDARY)
+        textColour = wxColour(139, 139, 139);
+    else if (flags & wxCONTROL_SELECTED)
+    {
+        if (flags & wxCONTROL_FOCUSED)
+        {
+            textColour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT);
+        }
+        else // !focused
+        {
+            textColour = wxSystemSettings::GetColour(wxSYS_COLOUR_LISTBOXTEXT);
+        }
+    }
+    else if (flags & wxCONTROL_DISABLED)
+        textColour = wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT);
+    else // !selected
+    {
+        textColour = win->GetForegroundColour();
+    }
+
+    wxString paintText = wxControl::Ellipsize(text, dc, wxELLIPSIZE_END, rect.GetWidth());
+
+    // Draw text
+    dc.SetTextForeground(textColour);
+    dc.SetTextBackground(wxTransparentColour);
+    dc.DrawLabel(paintText, rect, alignment);
+}
+
+
 // ----------------------------------------------------------------------------
 // A module to allow cleanup of generic renderer.
 // ----------------------------------------------------------------------------
diff --git a/src/msw/renderer.cpp b/src/msw/renderer.cpp
index 18a2eef..b204e1b 100644
--- a/src/msw/renderer.cpp
+++ b/src/msw/renderer.cpp
@@ -102,6 +102,18 @@
     #define PP_BAR 1
     #define PP_CHUNK 3
 
+    #define LISS_NORMAL 1
+    #define LISS_HOT 2
+    #define LISS_SELECTED 3
+    #define LISS_DISABLED 4
+    #define LISS_SELECTEDNOTFOCUS 5
+    #define LISS_HOTSELECTED 6
+
+    #define LVP_LISTITEM 1
+    #define LVP_LISTDETAIL 3
+
+    #define DTT_TEXTCOLOR       (1UL << 0)      // crText has been specified
+    #define DTT_STATEID         (1UL << 8)      // IStateId has been specified
 #endif
 
 #if defined(__WXWINCE__)
@@ -299,6 +311,11 @@ public:
             m_rendererNative.DrawPushButton(win, dc, rect, flags);
     }
 
+    virtual void DrawItemSelectionRect(wxWindow *win,
+                                       wxDC& dc,
+                                       const wxRect& rect,
+                                       int flags = 0);
+
     virtual void DrawTextCtrl(wxWindow* win,
                               wxDC& dc,
                               const wxRect& rect,
@@ -326,6 +343,12 @@ public:
                            int max,
                            int flags = 0);
 
+    virtual void DrawItemText(wxWindow* win,
+        wxDC& dc,
+        const wxString& text,
+        const wxRect& rect,
+        int alignment = wxALIGN_LEFT | wxALIGN_TOP,
+        int flags = 0);
 
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
 
@@ -890,6 +913,95 @@ wxRendererXP::DrawTitleBarBitmap(wxWindow *win,
     DoDrawButtonLike(hTheme, part, dc, rect, flags);
 }
 
+void wxRendererXP::DrawItemSelectionRect(wxWindow *win,
+    wxDC& dc,
+    const wxRect& rect,
+    int flags)
+{
+    wxUxThemeHandle hTheme(win, L"LISTVIEW");
+
+    int itemState = LISS_NORMAL;
+    if (flags & wxCONTROL_SELECTED)
+        itemState = LISS_SELECTED;
+    if (!(flags & wxCONTROL_FOCUSED))
+        itemState = LISS_SELECTEDNOTFOCUS;
+    if (flags & wxCONTROL_DISABLED)
+        itemState |= LISS_DISABLED;
+
+    wxUxThemeEngine* te = wxUxThemeEngine::Get();
+    if (te->IsThemePartDefined(hTheme, LVP_LISTITEM, itemState))
+    {
+        RECT rc;
+        wxCopyRectToRECT(rect, rc);
+        if (te->IsThemeBackgroundPartiallyTransparent(hTheme, LVP_LISTITEM, itemState))
+            te->DrawThemeParentBackground(win->GetHWND(), GetHdcOf(dc.GetTempHDC()), &rc);
+
+        te->DrawThemeBackground(hTheme, GetHdcOf(dc.GetTempHDC()), LVP_LISTITEM, itemState, &rc, 0);
+    }
+    else
+        m_rendererNative.DrawItemSelectionRect(win, dc, rect, flags);
+        
+}
+
+void wxRendererXP::DrawItemText(wxWindow* win,
+                                wxDC& dc,
+                                const wxString& text,
+                                const wxRect& rect,
+                                int alignment,
+                                int flags)
+{
+    wxUxThemeHandle hTheme(win, L"LISTVIEW");
+    int itemState = LISS_NORMAL;
+    if (flags & wxCONTROL_SELECTED)
+        itemState = LISS_SELECTED;
+    if (!(flags & wxCONTROL_FOCUSED))
+        itemState = LISS_SELECTEDNOTFOCUS;
+    if (flags & wxCONTROL_DISABLED)
+        itemState |= LISS_DISABLED;
+
+    wxUxThemeEngine* te = wxUxThemeEngine::Get();
+    if (te->IsThemePartDefined(hTheme, LVP_LISTITEM, itemState))
+    {
+        RECT rc;
+        wxCopyRectToRECT(rect, rc);
+
+        DTTOPTS textOpts;
+        textOpts.dwSize = sizeof(textOpts);
+        textOpts.dwFlags = DTT_STATEID;
+        textOpts.iStateId = itemState;
+        if (flags & wxCONTROL_LIST_SECONDARY)
+        {
+            textOpts.dwFlags |= DTT_TEXTCOLOR;
+            textOpts.crText = wxColour(139, 139, 139).GetPixel();
+        }
+        if (flags & wxCONTROL_DISABLED)
+        {
+            textOpts.dwFlags |= DTT_TEXTCOLOR;
+            textOpts.crText = wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT).GetPixel();
+        }
+
+        DWORD textFlags = DT_NOPREFIX | DT_END_ELLIPSIS;
+        if (alignment & wxALIGN_CENTER)
+            textFlags |= DT_CENTER;
+        else if (alignment & wxALIGN_RIGHT)
+            textFlags |= DT_RIGHT;
+        else
+            textFlags |= DT_LEFT;
+
+        if (alignment & wxALIGN_BOTTOM)
+            textFlags |= DT_BOTTOM;
+        else if (alignment & wxALIGN_CENTER_VERTICAL)
+            textFlags |= DT_VCENTER;
+        else
+            textFlags |= DT_TOP;
+
+        te->DrawThemeTextEx(hTheme, dc.GetHDC(), LVP_LISTITEM, itemState, text.wchar_str(), -1, textFlags, &rc, &textOpts);
+    }
+    else
+        m_rendererNative.DrawItemText(win, dc, text, rect, alignment, flags);
+}
+
+
 // Uses the theme to draw the border and fill for something like a wxTextCtrl
 void wxRendererXP::DrawTextCtrl(wxWindow* win,
                                 wxDC& dc,
diff --git a/src/msw/uxtheme.cpp b/src/msw/uxtheme.cpp
index ee30955..40d73c2 100644
--- a/src/msw/uxtheme.cpp
+++ b/src/msw/uxtheme.cpp
@@ -124,6 +124,7 @@ bool wxUxThemeEngine::Initialize()
     RESOLVE_UXTHEME_FUNCTION(PFNWXUCLOSETHEMEDATA, CloseThemeData);
     RESOLVE_UXTHEME_FUNCTION(PFNWXUDRAWTHEMEBACKGROUND, DrawThemeBackground);
     RESOLVE_UXTHEME_FUNCTION(PFNWXUDRAWTHEMETEXT, DrawThemeText);
+    RESOLVE_UXTHEME_FUNCTION(PFNWXUDRAWTHEMETEXTEX, DrawThemeTextEx);
     RESOLVE_UXTHEME_FUNCTION(PFNWXUGETTHEMEBACKGROUNDCONTENTRECT, GetThemeBackgroundContentRect);
     RESOLVE_UXTHEME_FUNCTION(PFNWXUGETTHEMEBACKGROUNDEXTENT, GetThemeBackgroundExtent);
     RESOLVE_UXTHEME_FUNCTION(PFNWXUGETTHEMEPARTSIZE, GetThemePartSize);

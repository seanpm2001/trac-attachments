diff --git a/include/wx/gtk/colordlg.h b/include/wx/gtk/colordlg.h
index 784c654..d057a85 100644
--- a/include/wx/gtk/colordlg.h
+++ b/include/wx/gtk/colordlg.h
@@ -13,6 +13,8 @@
 
 #include "wx/dialog.h"
 
+#include <gtk/gtk.h>
+
 class WXDLLIMPEXP_CORE wxColourDialog : public wxDialog
 {
 public:
@@ -42,6 +44,10 @@ protected:
 
     wxColourData m_data;
 
+#if GTK_CHECK_VERSION(3,4,0)
+    GdkRGBA m_colors[wxColourData::NUM_CUSTOM];
+#endif
+
     wxDECLARE_DYNAMIC_CLASS(wxColourDialog);
 };
 
diff --git a/src/gtk/colordlg.cpp b/src/gtk/colordlg.cpp
index 9a16036..b49347d 100644
--- a/src/gtk/colordlg.cpp
+++ b/src/gtk/colordlg.cpp
@@ -23,7 +23,6 @@
     #include "wx/intl.h"
 #endif
 
-#include <gtk/gtk.h>
 #include "wx/gtk/private.h"
 #include "wx/gtk/private/gtk2-compat.h"
 #include "wx/gtk/private/dialogcount.h"
@@ -52,7 +51,18 @@ bool wxColourDialog::Create(wxWindow *parent, wxColourData *data)
                                            : NULL;
 
     wxString title(_("Choose colour"));
-    m_widget = gtk_color_selection_dialog_new(wxGTK_CONV(title));
+
+#if GTK_CHECK_VERSION(3,4,0)
+    if( !gtk_check_version( 3, 4, 0 ) ) {
+        m_widget = gtk_color_chooser_dialog_new(wxGTK_CONV(title), parentGTK);
+    } else 
+#endif // !GTK_CHECK_VERSION(3,4,0)
+    {
+    wxGCC_WARNING_SUPPRESS(deprecated-declarations);
+        m_widget = gtk_color_selection_dialog_new(wxGTK_CONV(title));
+    wxGCC_WARNING_RESTORE();
+    }
+    
 
     g_object_ref(m_widget);
 
@@ -61,10 +71,14 @@ bool wxColourDialog::Create(wxWindow *parent, wxColourData *data)
         gtk_window_set_transient_for(GTK_WINDOW(m_widget), parentGTK);
     }
 
-    GtkColorSelection* sel = GTK_COLOR_SELECTION(
-        gtk_color_selection_dialog_get_color_selection(
-        GTK_COLOR_SELECTION_DIALOG(m_widget)));
-    gtk_color_selection_set_has_palette(sel, true);
+    if( gtk_check_version( 3, 4, 0 ) ) {
+        wxGCC_WARNING_SUPPRESS(deprecated-declarations);
+        GtkColorSelection* sel = GTK_COLOR_SELECTION(
+            gtk_color_selection_dialog_get_color_selection(
+            GTK_COLOR_SELECTION_DIALOG(m_widget)));
+        gtk_color_selection_set_has_palette(sel, true);
+        wxGCC_WARNING_RESTORE();
+    }
 
     return true;
 }
@@ -85,73 +99,129 @@ int wxColourDialog::ShowModal()
 
 void wxColourDialog::ColourDataToDialog()
 {
-    GtkColorSelection* sel = GTK_COLOR_SELECTION(
-        gtk_color_selection_dialog_get_color_selection(
-        GTK_COLOR_SELECTION_DIALOG(m_widget)));
 
+#if GTK_CHECK_VERSION(3,4,0)
+if( !gtk_check_version( 3, 4, 0 ) ) {
+    GtkColorChooser* chooser = GTK_COLOR_CHOOSER(m_widget);
     const wxColour& color = m_data.GetColour();
     if (color.IsOk())
     {
-#ifdef __WXGTK3__
-        gtk_color_selection_set_current_rgba(sel, color);
-#else
-        gtk_color_selection_set_current_color(sel, color.GetColor());
-#endif
+        gtk_color_chooser_set_rgba(chooser,color);
     }
 
-    // setup the palette:
-
-    GdkColor colors[wxColourData::NUM_CUSTOM];
     gint n_colors = 0;
-    for (unsigned i = 0; i < WXSIZEOF(colors); i++)
+    for (unsigned i = 0; i < WXSIZEOF(m_colors); i++)
     {
         wxColour c = m_data.GetCustomColour(i);
         if (c.IsOk())
         {
-            colors[n_colors] = *c.GetColor();
+            m_colors[n_colors] = *c;
             n_colors++;
         }
     }
 
-    wxGtkString pal(gtk_color_selection_palette_to_string(colors, n_colors));
+    if(n_colors > 0)
+    {
+        gtk_color_chooser_add_palette(
+            chooser,
+            GTK_ORIENTATION_HORIZONTAL,
+            wxColourData::NUM_CUSTOM / 2,
+            n_colors,
+            m_colors
+        );
+    }
+} else
+#endif // !GTK_CHECK_VERSION(3,4,0)
+    {
+        wxGCC_WARNING_SUPPRESS(deprecated-declarations);
+
+        GtkColorSelection* sel = GTK_COLOR_SELECTION(
+            gtk_color_selection_dialog_get_color_selection(
+            GTK_COLOR_SELECTION_DIALOG(m_widget)));
+
+        const wxColour& color = m_data.GetColour();
+        if (color.IsOk())
+        {
+#ifdef __WXGTK3__
+            gtk_color_selection_set_current_rgba(sel, color);
+#else
+            gtk_color_selection_set_current_color(sel, color.GetColor());
+#endif
+        }
+
+        GdkColor colors[wxColourData::NUM_CUSTOM];
 
-    GtkSettings *settings = gtk_widget_get_settings(GTK_WIDGET(sel));
-    g_object_set(settings, "gtk-color-palette", pal.c_str(), NULL);
+        gint n_colors = 0;
+        for (unsigned i = 0; i < WXSIZEOF(colors); i++)
+        {
+            wxColour c = m_data.GetCustomColour(i);
+            if (c.IsOk())
+            {
+                colors[n_colors] = *c.GetColor();
+                n_colors++;
+            }
+        }
+
+        wxGtkString pal(gtk_color_selection_palette_to_string(colors, n_colors));
+
+        GtkSettings *settings = gtk_widget_get_settings(GTK_WIDGET(sel));
+        g_object_set(settings, "gtk-color-palette", pal.c_str(), NULL);
+
+        wxGCC_WARNING_RESTORE();
+    }
 }
 
 void wxColourDialog::DialogToColourData()
 {
-    GtkColorSelection* sel = GTK_COLOR_SELECTION(
-        gtk_color_selection_dialog_get_color_selection(
-        GTK_COLOR_SELECTION_DIALOG(m_widget)));
 
-#ifdef __WXGTK3__
+#if GTK_CHECK_VERSION(3,4,0)
+if( !gtk_check_version( 3, 4, 0 ) ) {
     GdkRGBA clr;
-    gtk_color_selection_get_current_rgba(sel, &clr);
+    gtk_color_chooser_get_rgba(GTK_COLOR_CHOOSER(m_widget),&clr);
+    m_data.SetColour(clr);
+
+    int n_colors = WXSIZEOF(m_colors);
+    for (int i = 0; i < n_colors && i < wxColourData::NUM_CUSTOM; i++)
+    {
+        m_data.SetCustomColour(i, wxColour(m_colors[i]));
+    }
+} else
+#endif // !GTK_CHECK_VERSION(3,4,0)
+    {
+        wxGCC_WARNING_SUPPRESS(deprecated-declarations);
+        GtkColorSelection* sel = GTK_COLOR_SELECTION(
+            gtk_color_selection_dialog_get_color_selection(
+            GTK_COLOR_SELECTION_DIALOG(m_widget)));
+
+#ifdef __WXGTK3__
+        GdkRGBA clr;
+        gtk_color_selection_get_current_rgba(sel, &clr);
 #else
-    GdkColor clr;
-    gtk_color_selection_get_current_color(sel, &clr);
+        GdkColor clr;
+        gtk_color_selection_get_current_color(sel, &clr);
 #endif
-    m_data.SetColour(clr);
+        m_data.SetColour(clr);
 
-    // Extract custom palette:
+        // Extract custom palette:
 
-    GtkSettings *settings = gtk_widget_get_settings(GTK_WIDGET(sel));
-    gchar *pal;
-    g_object_get(settings, "gtk-color-palette", &pal, NULL);
+        GtkSettings *settings = gtk_widget_get_settings(GTK_WIDGET(sel));
+        gchar *pal;
+        g_object_get(settings, "gtk-color-palette", &pal, NULL);
 
-    GdkColor *colors;
-    gint n_colors;
-    if (gtk_color_selection_palette_from_string(pal, &colors, &n_colors))
-    {
-        for (int i = 0; i < n_colors && i < wxColourData::NUM_CUSTOM; i++)
+        GdkColor *colors;
+        gint n_colors;
+        if (gtk_color_selection_palette_from_string(pal, &colors, &n_colors))
         {
-            m_data.SetCustomColour(i, wxColour(colors[i]));
+            for (int i = 0; i < n_colors && i < wxColourData::NUM_CUSTOM; i++)
+            {
+                m_data.SetCustomColour(i, wxColour(colors[i]));
+            }
+            g_free(colors);
         }
-        g_free(colors);
-    }
 
-    g_free(pal);
+        g_free(pal);
+        wxGCC_WARNING_RESTORE();
+    }
 }
 
 #endif // wxUSE_COLOURDLG

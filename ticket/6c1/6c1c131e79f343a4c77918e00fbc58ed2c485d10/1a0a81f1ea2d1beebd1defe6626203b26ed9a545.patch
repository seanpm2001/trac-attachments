Index: include/wx/generic/animate.h
===================================================================
RCS file: 
/pack/cvsroots/wxwidgets/wxWidgets/include/wx/generic/animate.h,v
retrieving revision 1.12
diff -u -r1.12 animate.h
--- include/wx/generic/animate.h	2006/12/10 14:18:37	1.12
+++ include/wx/generic/animate.h	2007/02/23 18:33:37
@@ -129,7 +129,7 @@
 
     // Draw the current frame of the animation into given DC.
     // This is fast as current frame is always cached.
-    void DrawCurrentFrame(wxDC& dc);
+    void DrawCurrentFrame(wxDC& dc, const wxPoint &pos = wxPoint(0,0));
 
     // Returns a wxBitmap with the current frame drawn in it
     wxBitmap& GetBackingStore()
@@ -139,6 +139,7 @@
 
     // resize this control to fit m_animation
     void FitToAnimation();
+    void CenterAnimation();
 
     // Draw the background; use this when e.g. previous frame had wxANIM_TOBACKGROUND disposal.
     void DisposeToBackground();
@@ -163,6 +164,10 @@
 
     wxBitmap      m_backingStore;     // The frames are drawn here and then blitted
                                       // on the screen
+
+    wxPoint       m_ptAnimation; // Upper-left coordinate of animation:
+                                 // used to ensure the animation is centered inside
+                                 // this window
 
 private:
     typedef wxAnimationCtrlBase base_type;
Index: samples/animate/anitest.bkl
===================================================================
RCS file: 
/pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.bkl,v
retrieving revision 1.1
diff -u -r1.1 anitest.bkl
--- samples/animate/anitest.bkl	2006/10/09 17:50:26	1.1
+++ samples/animate/anitest.bkl	2007/02/23 17:20:18
@@ -1,7 +1,7 @@
 <?xml version="1.0" ?>
 <makefile>
 
-    <include file="../../../build/bakefiles/common_samples.bkl"/>
+    <include file="../../build/bakefiles/common_samples.bkl"/>
 
     <exe id="anitest" template="wx_sample" template_append="wx_append">
         <sources>
Index: samples/animate/anitest.cpp
===================================================================
RCS file: 
/pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.cpp,v
retrieving revision 1.9
diff -u -r1.9 anitest.cpp
--- samples/animate/anitest.cpp	2007/02/04 00:31:34	1.9
+++ samples/animate/anitest.cpp	2007/02/23 18:20:22
@@ -35,6 +35,7 @@
 #include "wx/aboutdlg.h"
 #include "wx/artprov.h"
 #include "wx/colordlg.h"
+#include "wx/numdlg.h"
 #include "anitest.h"
 
 #if !wxUSE_ANIMATIONCTRL
@@ -58,6 +59,7 @@
     ID_SET_NULL_ANIMATION,
     ID_SET_INACTIVE_BITMAP,
     ID_SET_NO_AUTO_RESIZE,
+    ID_SET_SIZE,
     ID_SET_BGCOLOR
 };
 
@@ -66,6 +68,7 @@
     EVT_MENU(ID_SET_NULL_ANIMATION, MyFrame::OnSetNullAnimation)
     EVT_MENU(ID_SET_INACTIVE_BITMAP, MyFrame::OnSetInactiveBitmap)
     EVT_MENU(ID_SET_NO_AUTO_RESIZE, MyFrame::OnSetNoAutoResize)
+    EVT_MENU(ID_SET_SIZE, MyFrame::OnSetSize)
     EVT_MENU(ID_SET_BGCOLOR, MyFrame::OnSetBgColor)
 
     EVT_MENU(wxID_STOP, MyFrame::OnStop)
@@ -76,7 +79,12 @@
 #endif // wxUSE_FILEDLG
 
     EVT_SIZE(MyFrame::OnSize)
-    EVT_UPDATE_UI(wxID_ANY, MyFrame::OnUpdateUI)
+
+    EVT_UPDATE_UI(wxID_STOP, MyFrame::OnStopUpdateUI)
+    EVT_UPDATE_UI(ID_PLAY, MyFrame::OnPlayUpdateUI)
+    EVT_UPDATE_UI(ID_SET_NO_AUTO_RESIZE, MyFrame::OnNoAutoresizeUpdateUI)
+    EVT_UPDATE_UI(ID_SET_SIZE, MyFrame::OnSetSizeUpdateUI)
+
 END_EVENT_TABLE()
 
 // 
===========================================================================
@@ -96,7 +104,7 @@
     // Create the main frame window
 
     MyFrame* frame = new MyFrame((wxFrame *)NULL, wxID_ANY, _T("Animation Demo"),
-                                 wxDefaultPosition, wxSize(500, 400),
+                                 wxDefaultPosition, wxSize(300, 250),
                                  wxDEFAULT_FRAME_STYLE);
 
     // Give it an icon
@@ -120,6 +128,8 @@
                                _T("Sets an inactive bitmap for the control"));
     play_menu->AppendCheckItem(ID_SET_NO_AUTO_RESIZE, _T("Set no autoresize"),
                                _T("Tells the control not to resize automatically"));
+    play_menu->Append(ID_SET_SIZE, _T("Set control size..."),
+                      _T("Set the control to a user specified size"));
     play_menu->Append(ID_SET_BGCOLOR, _T("Set background colour..."),
                       _T("Sets the background colour of the control"));
 
@@ -152,6 +162,10 @@
 
 #include "wx/wfstream.h"
 
+// remove the wxNO_BORDER style from the wxAnimationCtrl's default style
+// as we want to clearly see the border of the control
+#define ANIMCTRL_DEFAULT_STYLE     (wxAC_DEFAULT_STYLE & ~wxNO_BORDER)
+
 // Define my frame constructor
 MyFrame::MyFrame(wxWindow *parent,
                  const wxWindowID id,
@@ -165,16 +179,22 @@
     // use a wxBoxSizer otherwise wxFrame will automatically
     // resize the m_animationCtrl to fill its client area on
     // user resizes
+    m_panel = new wxPanel(this);
     wxSizer *sz = new wxBoxSizer(wxVERTICAL);
-    sz->Add(new wxStaticText(this, wxID_ANY, wxT("wxAnimationCtrl:")),
+
+    sz->Add(new wxStaticText(m_panel, wxID_ANY, wxT("wxAnimationCtrl:")),
             wxSizerFlags().Centre().Border());
 
-    m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY);
+    // create the control with wxSIMPLE_BORDER style so it's clear
+    // what's its size
+    m_animationCtrl = new wxAnimationCtrl(m_panel, wxID_ANY, wxNullAnimation,
+                                          wxDefaultPosition, wxDefaultSize,
+                                          ANIMCTRL_DEFAULT_STYLE);
     if (m_animationCtrl->LoadFile(wxT("throbber.gif")))
         m_animationCtrl->Play();
 
     sz->Add(m_animationCtrl, wxSizerFlags().Centre().Border());
-    SetSizer(sz);
+    m_panel->SetSizer(sz);
 }
 
 MyFrame::~MyFrame()
@@ -212,7 +232,7 @@
 void MyFrame::OnSetNoAutoResize(wxCommandEvent& event)
 {
     // recreate the control with the new flag if necessary
-    long style = wxAC_DEFAULT_STYLE |
+    long style = ANIMCTRL_DEFAULT_STYLE |
                     (event.IsChecked() ? wxAC_NO_AUTORESIZE : 0);
 
     if (style != m_animationCtrl->GetWindowStyle())
@@ -224,21 +244,62 @@
 
         // destroy & rebuild
         wxAnimationCtrl *old = m_animationCtrl;
-        m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY, curr,
+        m_animationCtrl = new wxAnimationCtrl(m_panel, wxID_ANY, curr,
                                               wxDefaultPosition, wxDefaultSize,
                                               style);
 
-        GetSizer()->Replace(old, m_animationCtrl);
+        m_panel->GetSizer()->Replace(old, m_animationCtrl);
         delete old;
 
         // load old status in new control
         m_animationCtrl->SetInactiveBitmap(inactive);
         m_animationCtrl->SetBackgroundColour(bg);
 
-        GetSizer()->Layout();
+        m_panel->GetSizer()->Layout();
     }
 }
 
+void MyFrame::OnSetSize(wxCommandEvent& WXUNUSED(event))
+{
+    const long MIN_SIZE = 10;
+    const long MAX_SIZE = 200;
+    const long size = 
+        wxGetNumberFromUser(
+            wxString::Format(wxT("Enter the new control size in pixels 
(%d to %d)\n")
+                             wxT("New control will be sized square"), 
+                             MIN_SIZE, MAX_SIZE).c_str(), 
+            wxEmptyString, 
+            _T("Set Control Size"), 
+            m_animationCtrl->GetAnimation().GetSize().GetX(), 
+            MIN_SIZE, MAX_SIZE);
+
+    // recreate the control with the same style flags
+    long style = m_animationCtrl->GetWindowStyle();
+
+    if (-1 != size)
+    {
+        // save status of the control before destroying it
+        wxAnimation curr = m_animationCtrl->GetAnimation();
+        wxBitmap inactive = m_animationCtrl->GetInactiveBitmap();
+        wxColour bg = m_animationCtrl->GetBackgroundColour();
+
+        // destroy & rebuild
+        wxAnimationCtrl *old = m_animationCtrl;
+        m_animationCtrl = new wxAnimationCtrl(m_panel, wxID_ANY, curr,
+                                              wxDefaultPosition, wxSize(size,size),
+                                              style);
+
+        m_panel->GetSizer()->Replace(old, m_animationCtrl);
+        delete old;
+
+        // load old status in new control
+        m_animationCtrl->SetInactiveBitmap(inactive);
+        m_animationCtrl->SetBackgroundColour(bg);
+
+        m_panel->GetSizer()->Layout();
+    }
+}
+
 void MyFrame::OnSetBgColor(wxCommandEvent& WXUNUSED(event))
 {
     wxColour clr = wxGetColourFromUser(this, m_animationCtrl->GetBackgroundColour(),
@@ -276,7 +337,8 @@
     {
         wxString filename(dialog.GetPath());
 
-        // enable one of the two chunk of codes to test different parts of wxAnimation/wxAnimationCtrl
+        // enable one of the two chunk of codes to test different 
+        // parts of wxAnimation/wxAnimationCtrl
 #if 0
         if (m_animationCtrl->LoadFile(filename))
             m_animationCtrl->Play();
@@ -313,15 +375,29 @@
     #endif
 #endif
 
-        GetSizer()->Layout();
+        m_panel->GetSizer()->Layout();
     }
 }
 #endif // wxUSE_FILEDLG
+
+void MyFrame::OnStopUpdateUI(wxUpdateUIEvent& event )
+{
+    event.Enable(m_animationCtrl->IsPlaying());
+}
+
+void MyFrame::OnPlayUpdateUI(wxUpdateUIEvent& event )
+{
+    event.Enable(!m_animationCtrl->IsPlaying());
+}
+
+void MyFrame::OnNoAutoresizeUpdateUI(wxUpdateUIEvent& event )
+{
+    event.Enable(!m_animationCtrl->IsPlaying());
+}
 
-void MyFrame::OnUpdateUI(wxUpdateUIEvent& WXUNUSED(event) )
+void MyFrame::OnSetSizeUpdateUI(wxUpdateUIEvent& event )
 {
-    GetMenuBar()->FindItem(wxID_STOP)->Enable(m_animationCtrl->IsPlaying());
-    GetMenuBar()->FindItem(ID_PLAY)->Enable(!m_animationCtrl->IsPlaying());
-    GetMenuBar()->FindItem(ID_SET_NO_AUTO_RESIZE)->Enable(!m_animationCtrl->IsPlaying());
+    event.Enable(!m_animationCtrl->IsPlaying() && 
+                 GetMenuBar()->FindItem(ID_SET_NO_AUTO_RESIZE)->IsChecked());
 }
 
Index: samples/animate/anitest.h
===================================================================
RCS file: 
/pack/cvsroots/wxwidgets/wxWidgets/samples/animate/anitest.h,v
retrieving revision 1.3
diff -u -r1.3 anitest.h
--- samples/animate/anitest.h	2006/11/17 18:15:44	1.3
+++ samples/animate/anitest.h	2007/02/23 18:14:21
@@ -34,10 +34,14 @@
     void OnSetNullAnimation(wxCommandEvent& event);
     void OnSetInactiveBitmap(wxCommandEvent& event);
     void OnSetNoAutoResize(wxCommandEvent& event);
+    void OnSetSize(wxCommandEvent& event);
     void OnSetBgColor(wxCommandEvent& event);
     void OnStop(wxCommandEvent& event);
 
-    void OnUpdateUI(wxUpdateUIEvent& event);
+    void OnStopUpdateUI(wxUpdateUIEvent& event);
+    void OnPlayUpdateUI(wxUpdateUIEvent& event);
+    void OnNoAutoresizeUpdateUI(wxUpdateUIEvent& event);
+    void OnSetSizeUpdateUI(wxUpdateUIEvent& event);
 
 #if wxUSE_FILEDLG
     void OnOpen(wxCommandEvent& event);
@@ -46,6 +50,7 @@
     wxAnimationCtrl* GetAnimationCtrl() const { return m_animationCtrl; }
 
 protected:
+    wxPanel*            m_panel;
     wxAnimationCtrl*    m_animationCtrl;
 
 private:
Index: src/generic/animateg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/generic/animateg.cpp,v
retrieving revision 1.18
diff -u -r1.18 animateg.cpp
--- src/generic/animateg.cpp	2006/12/10 14:18:28	1.18
+++ src/generic/animateg.cpp	2007/02/23 18:35:06
@@ -318,8 +318,16 @@
 
 wxSize wxAnimationCtrl::DoGetBestSize() const
 {
-    if (m_animation.IsOk() && !this->HasFlag(wxAC_NO_AUTORESIZE))
+    if (m_animation.IsOk())
+    {
+        const wxSize &currSz = GetSize();
+        if (this->HasFlag(wxAC_NO_AUTORESIZE) &&
+            currSz.GetWidth() > 0 &&
+            currSz.GetHeight() > 0)
+            return currSz;       // keep current size
+
         return m_animation.GetSize();
+    }
 
     return wxSize(100, 100);
 }
@@ -342,6 +350,8 @@
     if (!this->HasFlag(wxAC_NO_AUTORESIZE))
         FitToAnimation();
 
+    CenterAnimation();
+
     DisplayStaticImage();
 }
 
@@ -363,6 +373,22 @@
     SetSize(m_animation.GetSize());
 }
 
+void wxAnimationCtrl::CenterAnimation()
+{
+    if (!m_animation.IsOk())
+    {
+        m_ptAnimation = wxPoint(0,0);
+        return;
+    }
+
+    const wxSize &clientSz = GetClientSize();
+    const wxSize &animSz = m_animation.GetSize();
+
+    int posX = (clientSz.GetWidth() - animSz.GetWidth()) / 2;
+    int posY = (clientSz.GetHeight() - animSz.GetHeight()) / 2;
+    m_ptAnimation = wxPoint(posX, posY);
+}
+
 bool wxAnimationCtrl::SetBackgroundColour(const wxColour& colour)
 {
     if ( !wxWindow::SetBackgroundColour(colour) )
@@ -411,7 +437,7 @@
 
     // DrawCurrentFrame() will use our updated backing store
     wxClientDC clientDC(this);
-    DrawCurrentFrame(clientDC);
+    DrawCurrentFrame(clientDC, m_ptAnimation);
 
     // start the timer
     int delay = m_animation.GetDelay(0);
@@ -434,6 +460,10 @@
     // small, then recreate it
     wxSize sz = m_animation.GetSize(),
            winsz = GetClientSize();
+
+    // create a backing store as small as possible (for better performances):
+    // the centering of the animation if winsz > sz is done in OnPaint()
+    // and OnTimer() using m_ptAnimation
     int w = wxMin(sz.GetWidth(), winsz.GetWidth());
     int h = wxMin(sz.GetHeight(), winsz.GetHeight());
 
@@ -538,7 +568,8 @@
             wxMemoryDC temp;
             temp.SelectObject(m_backingStore);
             DisposeToBackground(temp);
-            temp.DrawBitmap(m_bmpStaticReal, 0, 0, true /* use mask */);
+            temp.DrawBitmap(m_bmpStaticReal, 0, 0, 
+                            true /* use mask */);
         }
         else
             m_backingStore = m_bmpStaticReal;
@@ -570,12 +601,13 @@
                   true /* use mask */);
 }
 
-void wxAnimationCtrl::DrawCurrentFrame(wxDC& dc)
+void wxAnimationCtrl::DrawCurrentFrame(wxDC& dc, const wxPoint &pos)
 {
     wxASSERT( m_backingStore.IsOk() );
 
     // m_backingStore always contains the current frame
-    dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    dc.DrawBitmap(m_backingStore, pos.x, pos.y,
+                  true /* use mask in case it's present */);
 }
 
 void wxAnimationCtrl::DisposeToBackground()
@@ -623,7 +655,8 @@
         // NOTE: we draw the bitmap explicitely ignoring the mask (if any);
         //       i.e. we don't want to combine the backing store with the 
         //       possibly wrong preexisting contents of the window!
-        dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        dc.DrawBitmap(m_backingStore, m_ptAnimation.x, m_ptAnimation.y, 
+                      false /* no mask */);
     }
     else
     {
@@ -651,7 +684,7 @@
     IncrementalUpdateBackingStore();
 
     wxClientDC dc(this);
-    DrawCurrentFrame(dc);
+    DrawCurrentFrame(dc, m_ptAnimation);
 
 #ifdef __WXMAC__
     // without this, the animation currently doesn't redraw under Mac
@@ -684,6 +717,8 @@
                 Stop();     // in case we are playing
         }
     }
+
+    CenterAnimation();
 }
 
 #endif      // wxUSE_ANIMATIONCTRL
 

 	  	 

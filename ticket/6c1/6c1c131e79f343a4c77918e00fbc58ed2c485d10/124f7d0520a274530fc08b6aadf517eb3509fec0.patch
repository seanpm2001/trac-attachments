Index: src/generic/animateg.cpp
===================================================================
--- src/generic/animateg.cpp	(revision 20)
+++ src/generic/animateg.cpp	(revision 25)
@@ -318,8 +318,13 @@
 
 wxSize wxAnimationCtrl::DoGetBestSize() const
 {
-    if (m_animation.IsOk() && !this->HasFlag(wxAC_NO_AUTORESIZE))
-        return m_animation.GetSize();
+    if (m_animation.IsOk())
+    {
+        if (!this->HasFlag(wxAC_NO_AUTORESIZE))
+            return m_animation.GetSize();
+        else
+            return GetSize();
+    }
 
     return wxSize(100, 100);
 }
@@ -342,6 +347,8 @@
     if (!this->HasFlag(wxAC_NO_AUTORESIZE))
         FitToAnimation();
 
+    CenterAnimation();
+
     DisplayStaticImage();
 }
 
@@ -363,6 +370,16 @@
     SetSize(m_animation.GetSize());
 }
 
+void wxAnimationCtrl::CenterAnimation()
+{
+    const wxSize &clientSz = GetClientSize();
+    const wxSize &animSz = m_animation.GetSize();
+
+    int posX = (clientSz.GetWidth() - animSz.GetWidth()) / 2;
+    int posY = (clientSz.GetHeight() - animSz.GetHeight()) / 2;
+    m_animationFrameLocation = wxPoint(posX, posY);
+}
+
 bool wxAnimationCtrl::SetBackgroundColour(const wxColour& colour)
 {
     if ( !wxWindow::SetBackgroundColour(colour) )
@@ -434,8 +451,8 @@
     // small, then recreate it
     wxSize sz = m_animation.GetSize(),
            winsz = GetClientSize();
-    int w = wxMin(sz.GetWidth(), winsz.GetWidth());
-    int h = wxMin(sz.GetHeight(), winsz.GetHeight());
+    int w = wxMax(sz.GetWidth(), winsz.GetWidth());
+    int h = wxMax(sz.GetHeight(), winsz.GetHeight());
 
     if ( !m_backingStore.IsOk() ||
             m_backingStore.GetWidth() < w || m_backingStore.GetHeight() < h )
@@ -566,7 +583,7 @@
     // If wxAnimationDecoder had a function to convert directly from its
     // internal format to a port-specific wxBitmap, it would be somewhat faster.
     wxBitmap bmp(m_animation.GetFrame(frame));
-    dc.DrawBitmap(bmp, m_animation.GetFramePosition(frame),
+    dc.DrawBitmap(bmp, m_animation.GetFramePosition(frame) + m_animationFrameLocation,
                   true /* use mask */);
 }
 
@@ -606,7 +623,7 @@
     wxBrush brush(col);
     dc.SetBrush(brush);         // SetBrush and not SetBackground !!
     dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.DrawRectangle(pos, sz);
+    dc.DrawRectangle(pos + m_animationFrameLocation, sz);
 }
 
 // ----------------------------------------------------------------------------
Index: include/wx/generic/animate.h
===================================================================
--- include/wx/generic/animate.h	(revision 20)
+++ include/wx/generic/animate.h	(revision 25)
@@ -139,6 +139,7 @@
 
     // resize this control to fit m_animation
     void FitToAnimation();
+    void CenterAnimation();
 
     // Draw the background; use this when e.g. previous frame had wxANIM_TOBACKGROUND disposal.
     void DisposeToBackground();
@@ -164,6 +165,9 @@
     wxBitmap      m_backingStore;     // The frames are drawn here and then blitted
                                       // on the screen
 
+    wxPoint       m_animationFrameLocation; // Upper-left coordinate of animation frame
+                                            // used to ensure animation frame is centered
+
 private:
     typedef wxAnimationCtrlBase base_type;
     DECLARE_DYNAMIC_CLASS(wxAnimationCtrl)
Index: samples/animate/anitest.cpp
===================================================================
--- samples/animate/anitest.cpp	(revision 20)
+++ samples/animate/anitest.cpp	(revision 25)
@@ -35,6 +35,7 @@
 #include "wx/aboutdlg.h"
 #include "wx/artprov.h"
 #include "wx/colordlg.h"
+#include "wx/numdlg.h"
 #include "anitest.h"
 
 #if !wxUSE_ANIMATIONCTRL
@@ -58,6 +59,7 @@
     ID_SET_NULL_ANIMATION,
     ID_SET_INACTIVE_BITMAP,
     ID_SET_NO_AUTO_RESIZE,
+    ID_SET_SIZE,
     ID_SET_BGCOLOR
 };
 
@@ -66,6 +68,7 @@
     EVT_MENU(ID_SET_NULL_ANIMATION, MyFrame::OnSetNullAnimation)
     EVT_MENU(ID_SET_INACTIVE_BITMAP, MyFrame::OnSetInactiveBitmap)
     EVT_MENU(ID_SET_NO_AUTO_RESIZE, MyFrame::OnSetNoAutoResize)
+    EVT_MENU(ID_SET_SIZE, MyFrame::OnSetSize)
     EVT_MENU(ID_SET_BGCOLOR, MyFrame::OnSetBgColor)
 
     EVT_MENU(wxID_STOP, MyFrame::OnStop)
@@ -117,6 +120,8 @@
                                _T("Sets an inactive bitmap for the control"));
     play_menu->AppendCheckItem(ID_SET_NO_AUTO_RESIZE, _T("Set no autoresize"),
                                _T("Tells the control not to resize automatically"));
+    play_menu->Append(ID_SET_SIZE, _T("Set control size"),
+                      _T("Set the control to a user specified size"));
     play_menu->Append(ID_SET_BGCOLOR, _T("Set background colour..."),
                       _T("Sets the background colour of the control"));
 
@@ -212,6 +217,8 @@
     long style = wxAC_DEFAULT_STYLE |
                     (event.IsChecked() ? wxAC_NO_AUTORESIZE : 0);
 
+    GetMenuBar()->Enable(ID_SET_SIZE, event.IsChecked());
+
     if (style != m_animationCtrl->GetWindowStyle())
     {
         // save status of the control before destroying it
@@ -236,6 +243,39 @@
     }
 }
 
+void MyFrame::OnSetSize(wxCommandEvent& WXUNUSED(event))
+{
+    const long MIN_SIZE = 10;
+    const long MAX_SIZE = 200;
+    const long size = wxGetNumberFromUser(wxString::Format(wxT("Enter the new control size in pixels (%d to %d)\nNew control will be sized square"), MIN_SIZE, MAX_SIZE).c_str(), wxEmptyString, _T("Set Control Size"), m_animationCtrl->GetAnimation().GetSize().GetX(), MIN_SIZE, MAX_SIZE);
+
+    // recreate the control with the same style flags
+    long style = m_animationCtrl->GetWindowStyle();
+
+    if (-1 != size)
+    {
+        // save status of the control before destroying it
+        wxAnimation curr = m_animationCtrl->GetAnimation();
+        wxBitmap inactive = m_animationCtrl->GetInactiveBitmap();
+        wxColour bg = m_animationCtrl->GetBackgroundColour();
+
+        // destroy & rebuild
+        wxAnimationCtrl *old = m_animationCtrl;
+        m_animationCtrl = new wxAnimationCtrl(this, wxID_ANY, curr,
+                                              wxDefaultPosition, wxSize(size,size),
+                                              style);
+
+        GetSizer()->Replace(old, m_animationCtrl);
+        delete old;
+
+        // load old status in new control
+        m_animationCtrl->SetInactiveBitmap(inactive);
+        m_animationCtrl->SetBackgroundColour(bg);
+
+        GetSizer()->Layout();
+    }
+}
+
 void MyFrame::OnSetBgColor(wxCommandEvent& WXUNUSED(event))
 {
     wxColour clr = wxGetColourFromUser(this, m_animationCtrl->GetBackgroundColour(),
@@ -320,5 +360,6 @@
     GetMenuBar()->FindItem(wxID_STOP)->Enable(m_animationCtrl->IsPlaying());
     GetMenuBar()->FindItem(ID_PLAY)->Enable(!m_animationCtrl->IsPlaying());
     GetMenuBar()->FindItem(ID_SET_NO_AUTO_RESIZE)->Enable(!m_animationCtrl->IsPlaying());
+    GetMenuBar()->FindItem(ID_SET_SIZE)->Enable(!m_animationCtrl->IsPlaying() && GetMenuBar()->FindItem(ID_SET_NO_AUTO_RESIZE)->IsChecked());
 }
 
Index: samples/animate/anitest.h
===================================================================
--- samples/animate/anitest.h	(revision 20)
+++ samples/animate/anitest.h	(revision 25)
@@ -34,6 +34,7 @@
     void OnSetNullAnimation(wxCommandEvent& event);
     void OnSetInactiveBitmap(wxCommandEvent& event);
     void OnSetNoAutoResize(wxCommandEvent& event);
+    void OnSetSize(wxCommandEvent& event);
     void OnSetBgColor(wxCommandEvent& event);
     void OnStop(wxCommandEvent& event);
 
Index: samples/animate/anitest.bkl
===================================================================
--- samples/animate/anitest.bkl	(revision 20)
+++ samples/animate/anitest.bkl	(revision 25)
@@ -1,7 +1,7 @@
 <?xml version="1.0" ?>
 <makefile>
 
-    <include file="../../../build/bakefiles/common_samples.bkl"/>
+    <include file="../../build/bakefiles/common_samples.bkl"/>
 
     <exe id="anitest" template="wx_sample" template_append="wx_append">
         <sources>

 	  	 

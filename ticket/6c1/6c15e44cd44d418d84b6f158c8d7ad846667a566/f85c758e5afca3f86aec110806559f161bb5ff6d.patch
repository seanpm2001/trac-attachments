Index: configure
===================================================================
--- configure	(revision 71803)
+++ configure	(working copy)
@@ -36853,7 +36853,7 @@
 
 
         SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS artprov controls dialogs drawing \
-                     erase event exec font image minimal render \
+                     erase event exec font image minimal privfont render \
                      shaped svg taborder vscroll widgets wrapsizer"
 
     if test "$wxUSE_MONOLITHIC" != "yes"; then
@@ -42291,3 +42291,4 @@
 
 echo ""
 
+ 
\ No newline at end of file
Index: src/gtk/font.cpp
===================================================================
--- src/gtk/font.cpp	(revision 71803)
+++ src/gtk/font.cpp	(working copy)
@@ -32,6 +32,9 @@
 
 #include "wx/gtk/private.h"
 
+#include <X11/Xlib.h>
+#include <X11/Xft/Xft.h>
+
 // ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
@@ -550,3 +553,38 @@
 
     return true;
 }
+
+
+// ----------------------------------------------------------------------------
+// Support for adding private fonts
+// ----------------------------------------------------------------------------
+
+static FcConfig* config = NULL;
+
+int wxFont::AddPrivateFont(const wxString& filename)
+{
+// This passes the name of a file expected to contain a font, as in
+//    wxAddPrivatefont("fontname.ttf");
+//    wxAddPrivatefont("fontname1.ttf");
+// and makes the fonts in those files available to the application but
+// not to other applications.
+    if ( config == NULL ) config = FcConfigCreate();
+// The fontconfig calls return true on success.
+    return FcConfigAppFontAddFile(config,
+            (const FcChar8 *)(const char *)filename.fn_str()) &&
+           FcConfigSetCurrent(config);
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    return 1;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    FcConfigDestroy(FcConfigGetCurrent());
+    config = NULL;
+    return 1;
+}
+
+
Index: src/os2/font.cpp
===================================================================
--- src/os2/font.cpp	(revision 71803)
+++ src/os2/font.cpp	(working copy)
@@ -1144,3 +1144,23 @@
 
     RealizeResource();
 } // end of wxFont::SetPS
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/cocoa/fontutil.cpp
===================================================================
--- src/cocoa/fontutil.cpp	(revision 71803)
+++ src/cocoa/fontutil.cpp	(working copy)
@@ -254,3 +254,23 @@
 
 #endif
   // not GTK 2.0
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/motif/font.cpp
===================================================================
--- src/motif/font.cpp	(revision 71803)
+++ src/motif/font.cpp	(working copy)
@@ -700,3 +700,23 @@
 }
 
 #endif // !wxMOTIF_USE_RENDER_TABLE
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/dfb/font.cpp
===================================================================
--- src/dfb/font.cpp	(revision 71803)
+++ src/dfb/font.cpp	(working copy)
@@ -191,3 +191,22 @@
     M_FONTDATA->SetEncoding(encoding);
 }
 
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/msw/graphics.cpp
===================================================================
--- src/msw/graphics.cpp	(revision 71803)
+++ src/msw/graphics.cpp	(working copy)
@@ -46,6 +46,7 @@
     #include "wx/msw/enhmeta.h"
 #endif
 #include "wx/dcgraph.h"
+#include "wx/filename.h"
 
 #include "wx/msw/private.h" // needs to be before #include <commdlg.h>
 
@@ -53,6 +54,8 @@
 #include <commdlg.h>
 #endif
 
+#include <gdiplus.h>
+
 namespace
 {
 
@@ -887,6 +890,92 @@
 }
 
 //-----------------------------------------------------------------------------
+// Support for adding private fonts
+//-----------------------------------------------------------------------------
+
+static wxArrayString privateFontFileNames;
+static Gdiplus::PrivateFontCollection* privateFonts = NULL;
+static Gdiplus::FontFamily* pFontFamily = NULL;
+
+int wxFont::AddPrivateFont(const wxString& filename)
+{
+// This adds a font from the named file...
+//    wxFont::AddPrivateFont("fontname.ttf");
+//    wxFont::AddPrivateFont("fontname1.ttf");
+//    wxFont::ActivatePrivateFonts();
+    privateFontFileNames.Add(filename);
+    return 1; // indicate success
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    int success = 1;
+    int n = privateFontFileNames.GetCount();
+    for ( int i=0 ; i<n ; i++)
+    {
+        wxString path(privateFontFileNames[i]);
+        if ( AddFontResourceExW(path.wc_str(), FR_PRIVATE, 0) == 0)
+            success = 0; // Record failure to add a font
+    }
+    SendMessage(HWND_BROADCAST, WM_FONTCHANGE, 0, 0);
+    return success;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    int n = privateFontFileNames.GetCount(), success = 1;
+    for ( int i=0 ; i<n ; i++)
+    {
+        wxString path(privateFontFileNames[i]);
+        if ( RemoveFontResourceExW(path.wc_str(), FR_PRIVATE, 0) == 0)
+            success = 0;
+    }
+    SendMessage(HWND_BROADCAST, WM_FONTCHANGE, 0, 0);
+    return success;
+}
+
+void wxGDIPlusRenderer::Load()
+{
+    GdiplusStartupInput input;
+    GdiplusStartupOutput output;
+    if ( GdiplusStartup(&m_gditoken,&input,&output) == Gdiplus::Ok )
+    {
+        wxLogTrace("gdiplus", "successfully initialized GDI+");
+        m_loaded = 1;
+// Now if some private fonts had been registered prior to use of gdiplus
+// I will establish them in a privateFontCollection. Note that I do not
+// do any of this until gdiplus has been started.
+        privateFonts = new Gdiplus::PrivateFontCollection();
+        int n = privateFontFileNames.GetCount();
+        pFontFamily = new Gdiplus::FontFamily[n];
+        for ( int i=0 ; i<n ; i++)
+        {
+            wxString path(privateFontFileNames[i]);
+            privateFonts->AddFontFile(path.wc_str());
+        }
+    }
+    else
+    {
+        wxLogTrace("gdiplus", "failed to initialize GDI+, missing gdiplus.dll?");
+        m_loaded = 0;
+    }
+}
+
+void wxGDIPlusRenderer::Unload()
+{
+    if ( m_gditoken )
+    {
+        GdiplusShutdown(m_gditoken);
+        m_gditoken = 0;
+        delete privateFonts;
+        delete[] pFontFamily;
+        privateFonts = NULL;
+        pFontFamily = NULL;
+    }
+    m_loaded = -1; // next Load() will try again
+}
+
+//-----------------------------------------------------------------------------
 // wxGDIPlusFont implementation
 //-----------------------------------------------------------------------------
 
@@ -897,7 +986,27 @@
                         const wxColour& col,
                         Unit fontUnit)
 {
-    m_font = new Font(name.wc_str(), size, style, fontUnit);
+// If the user has registered any private fonts I wish to use them in
+// preference to any system-wide ones.
+    m_font = NULL;
+    if ( privateFonts != NULL )
+    {
+        int count = privateFonts->GetFamilyCount();
+        int found = 0;
+        privateFonts->GetFamilies(count, pFontFamily, &found);
+// Here I hope and expect that found==count.
+        for ( int j=0 ; j<found ; j++ )
+        {
+            wchar_t familyName[LF_FACESIZE];
+            int rc = pFontFamily[j].GetFamilyName(familyName);
+            if ( rc==0 && wcscmp(name, familyName) == 0 )
+            {
+                m_font = new Font(&pFontFamily[j], size, style, fontUnit);
+                break;
+            }
+        }
+    }
+    if (m_font == NULL) m_font = new Font(name, size, style, fontUnit);
 
     m_textBrush = new SolidBrush(wxColourToColor(col));
 }
@@ -1959,33 +2068,6 @@
     if ( !EnsureIsLoaded() )                   \
         return (returnOnFail)
 
-
-void wxGDIPlusRenderer::Load()
-{
-    GdiplusStartupInput input;
-    GdiplusStartupOutput output;
-    if ( GdiplusStartup(&m_gditoken,&input,&output) == Gdiplus::Ok )
-    {
-        wxLogTrace("gdiplus", "successfully initialized GDI+");
-        m_loaded = 1;
-    }
-    else
-    {
-        wxLogTrace("gdiplus", "failed to initialize GDI+, missing gdiplus.dll?");
-        m_loaded = 0;
-    }
-}
-
-void wxGDIPlusRenderer::Unload()
-{
-    if ( m_gditoken )
-    {
-        GdiplusShutdown(m_gditoken);
-        m_gditoken = 0;
-    }
-    m_loaded = -1; // next Load() will try again
-}
-
 wxGraphicsContext * wxGDIPlusRenderer::CreateContext( const wxWindowDC& dc)
 {
     ENSURE_LOADED_OR_RETURN(NULL);
Index: src/gtk1/font.cpp
===================================================================
--- src/gtk1/font.cpp	(revision 71803)
+++ src/gtk1/font.cpp	(working copy)
@@ -754,3 +754,23 @@
 
     return font;
 }
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/x11/font.cpp
===================================================================
--- src/x11/font.cpp	(revision 71803)
+++ src/x11/font.cpp	(working copy)
@@ -920,3 +920,23 @@
 }
 
 #endif // !wxUSE_UNICODE
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::ActivatePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    wxLogError(_("Attempt to add a private font on an unsupported platform"));
+    return 0;
+}
+
Index: src/osx/fontutil.cpp
===================================================================
--- src/osx/fontutil.cpp	(revision 71803)
+++ src/osx/fontutil.cpp	(working copy)
@@ -66,6 +66,26 @@
 }
 
 // ----------------------------------------------------------------------------
+// Private Fonts
+// ----------------------------------------------------------------------------
+
+
+int wxFont::AddPrivateFont(wxString& filename)
+{
+    return 1;
+}
+
+int wxFont::ActivatePrivateFonts(wxString& filename)
+{
+    return 1;
+}
+
+int wxFont::RemovePrivateFonts()
+{
+    return 1;
+}
+
+// ----------------------------------------------------------------------------
 // helper functions
 // ----------------------------------------------------------------------------
 
@@ -86,3 +106,5 @@
     // basically we should be able to support every encoding via the OS
     return true;
 }
+
+
Index: configure.in
===================================================================
--- configure.in	(revision 71803)
+++ configure.in	(working copy)
@@ -7768,7 +7768,7 @@
 
     dnl TODO some samples are never built so far: mfc (requires VC++)
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS artprov controls dialogs drawing \
-                     erase event exec font image minimal render \
+                     erase event exec font image minimal privfont render \
                      shaped svg taborder vscroll widgets wrapsizer"
 
     if test "$wxUSE_MONOLITHIC" != "yes"; then
Index: interface/wx/font.h
===================================================================
--- interface/wx/font.h	(revision 71803)
+++ interface/wx/font.h	(working copy)
@@ -519,6 +519,29 @@
     const wxNativeFontInfo *GetNativeFontInfo() const;
 
     /**
+        Specify the name of a file containing a Truetype font to be
+        made available to the current application even though it is
+        not globally installed. Supported on Windows and GTK+. Not
+        needed on OSX because private fonts can be placed within an
+        application bundle. Should be called before any graphics
+        contexts have been created. Return value is zero on failure.
+    */
+    static int AddPrivateFont(wxString& filename);
+
+    /**
+        To be called after a succession of calls to AddPrivateFont
+        to make the new fonts available.
+    */
+    static int ActivatePrivatefonts();
+
+    /**
+        Discard private fonts.
+
+        @see AddPrivateFont();
+    */
+    static int RemovePrivatefonts();
+
+    /**
         Gets the point size.
 
         @see SetPointSize()
Index: samples/makefile.bcc
===================================================================
--- samples/makefile.bcc	(revision 71803)
+++ samples/makefile.bcc	(working copy)
@@ -45,7 +45,7 @@
 
 ### Targets: ###
 
-all: access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
+all: access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing privfont propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
 
 clean: 
 	-if exist .\*.obj del .\*.obj
@@ -247,6 +247,10 @@
 	@echo $(MAKE) -f makefile.bcc $(MAKEARGS) clean >>printing.bat
 	call printing.bat
 	@del printing.bat
+	@echo cd privfont >privfont.bat
+	@echo $(MAKE) -f makefile.bcc $(MAKEARGS) clean >>privfont.bat
+	call privfont.bat
+	@del privfont.bat
 	@echo cd propgrid >propgrid.bat
 	@echo $(MAKE) -f makefile.bcc $(MAKEARGS) clean >>propgrid.bat
 	call propgrid.bat
@@ -666,6 +670,12 @@
 	call printing.bat
 	@del printing.bat
 
+privfont: 
+	@echo cd privfont >privfont.bat
+	@echo $(MAKE) -f makefile.bcc $(MAKEARGS) all >>privfont.bat
+	call privfont.bat
+	@del privfont.bat
+
 propgrid: 
 	@echo cd propgrid >propgrid.bat
 	@echo $(MAKE) -f makefile.bcc $(MAKEARGS) all >>propgrid.bat
Index: samples/makefile.vc
===================================================================
--- samples/makefile.vc	(revision 71803)
+++ samples/makefile.vc	(working copy)
@@ -35,7 +35,7 @@
 
 ### Targets: ###
 
-all: sub_access sub_animate sub_artprov sub_aui sub_calendar sub_caret sub_clipboard sub_collpane sub_combo sub_config sub_console sub_controls sub_dataview sub_dialogs sub_dialup sub_display sub_dll sub_dnd sub_docview sub_dragimag sub_drawing sub_erase sub_event sub_except sub_exec sub_font sub_grid sub_help sub_htlbox sub_html sub_image sub_internat sub_ipc sub_joytest sub_keyboard sub_layout sub_listctrl sub_mdi sub_mediaplayer sub_menu sub_minimal sub_nativdlg sub_notebook sub_oleauto sub_opengl sub_ownerdrw sub_popup sub_power sub_printing sub_propgrid sub_regtest sub_render sub_ribbon sub_richtext sub_sashtest sub_scroll sub_shaped sub_sockets sub_sound sub_splash sub_splitter sub_statbar sub_stc sub_svg sub_taborder sub_taskbar sub_text sub_thread sub_toolbar sub_treectrl sub_typetest sub_uiaction sub_validate sub_vscroll sub_webview sub_widgets sub_wizard sub_wrapsizer sub_xrc
+all: sub_access sub_animate sub_artprov sub_aui sub_calendar sub_caret sub_clipboard sub_collpane sub_combo sub_config sub_console sub_controls sub_dataview sub_dialogs sub_dialup sub_display sub_dll sub_dnd sub_docview sub_dragimag sub_drawing sub_erase sub_event sub_except sub_exec sub_font sub_grid sub_help sub_htlbox sub_html sub_image sub_internat sub_ipc sub_joytest sub_keyboard sub_layout sub_listctrl sub_mdi sub_mediaplayer sub_menu sub_minimal sub_nativdlg sub_notebook sub_oleauto sub_opengl sub_ownerdrw sub_popup sub_power sub_printing sub_privfont sub_propgrid sub_regtest sub_render sub_ribbon sub_richtext sub_sashtest sub_scroll sub_shaped sub_sockets sub_sound sub_splash sub_splitter sub_statbar sub_stc sub_svg sub_taborder sub_taskbar sub_text sub_thread sub_toolbar sub_treectrl sub_typetest sub_uiaction sub_validate sub_vscroll sub_webview sub_widgets sub_wizard sub_wrapsizer sub_xrc
 
 clean: 
 	-if exist .\*.obj del .\*.obj
@@ -188,6 +188,9 @@
 	cd printing
 	$(MAKE) -f makefile.vc $(MAKEARGS) clean
 	cd "$(MAKEDIR)"
+	cd privfont
+	$(MAKE) -f makefile.vc $(MAKEARGS) clean
+	cd "$(MAKEDIR)"
 	cd propgrid
 	$(MAKE) -f makefile.vc $(MAKEARGS) clean
 	cd "$(MAKEDIR)"
@@ -533,6 +536,11 @@
 	$(MAKE) -f makefile.vc $(MAKEARGS) all
 	cd "$(MAKEDIR)"
 
+sub_privfont: 
+	cd privfont
+	$(MAKE) -f makefile.vc $(MAKEARGS) all
+	cd "$(MAKEDIR)"
+
 sub_propgrid: 
 	cd propgrid
 	$(MAKE) -f makefile.vc $(MAKEARGS) all
Index: samples/makefile.wat
===================================================================
--- samples/makefile.wat	(revision 71803)
+++ samples/makefile.wat	(working copy)
@@ -53,7 +53,7 @@
 
 ### Targets: ###
 
-all : .SYMBOLIC access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
+all : .SYMBOLIC access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing privfont propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
 
 clean : .SYMBOLIC 
 	-if exist .\*.obj del .\*.obj
@@ -208,6 +208,9 @@
 	cd printing
 	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) clean
 	cd $(WATCOM_CWD)
+	cd privfont
+	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) clean
+	cd $(WATCOM_CWD)
 	cd propgrid
 	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) clean
 	cd $(WATCOM_CWD)
@@ -547,6 +550,11 @@
 	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) all
 	cd $(WATCOM_CWD)
 
+privfont : .SYMBOLIC 
+	cd privfont
+	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) all
+	cd $(WATCOM_CWD)
+
 propgrid : .SYMBOLIC 
 	cd propgrid
 	wmake $(__MAKEOPTS__) -f makefile.wat $(MAKEARGS) all
Index: samples/makefile.gcc
===================================================================
--- samples/makefile.gcc	(revision 71803)
+++ samples/makefile.gcc	(working copy)
@@ -36,7 +36,7 @@
 
 ### Targets: ###
 
-all: access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
+all: access animate artprov aui calendar caret clipboard collpane combo config console controls dataview dialogs dialup display dll dnd docview dragimag drawing erase event except exec font grid help htlbox html image internat ipc joytest keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto opengl ownerdrw popup power printing privfont propgrid regtest render ribbon richtext sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview widgets wizard wrapsizer xrc
 
 clean: 
 	-if exist .\*.o del .\*.o
@@ -90,6 +90,7 @@
 	$(MAKE) -C popup -f makefile.gcc $(MAKEARGS) clean
 	$(MAKE) -C power -f makefile.gcc $(MAKEARGS) clean
 	$(MAKE) -C printing -f makefile.gcc $(MAKEARGS) clean
+	$(MAKE) -C privfont -f makefile.gcc $(MAKEARGS) clean
 	$(MAKE) -C propgrid -f makefile.gcc $(MAKEARGS) clean
 	$(MAKE) -C regtest -f makefile.gcc $(MAKEARGS) clean
 	$(MAKE) -C render -f makefile.gcc $(MAKEARGS) clean
@@ -269,6 +270,9 @@
 printing: 
 	$(MAKE) -C printing -f makefile.gcc $(MAKEARGS) all
 
+privfont: 
+	$(MAKE) -C privfont -f makefile.gcc $(MAKEARGS) all
+
 propgrid: 
 	$(MAKE) -C propgrid -f makefile.gcc $(MAKEARGS) all
 
@@ -366,7 +370,7 @@
 	config console controls dataview dialogs dialup display dll dnd docview dragimag \
 	drawing erase event except exec font grid help htlbox html image internat ipc joytest \
 	keyboard layout listctrl mdi mediaplayer menu minimal nativdlg notebook oleauto \
-	opengl ownerdrw popup power printing propgrid regtest render ribbon richtext \
+	opengl ownerdrw popup power printing privfont propgrid regtest render ribbon richtext \
 	sashtest scroll shaped sockets sound splash splitter statbar stc svg taborder \
 	taskbar text thread toolbar treectrl typetest uiaction validate vscroll webview \
 	widgets wizard wrapsizer xrc memcheck
Index: samples/samples.dsw
===================================================================
--- samples/samples.dsw	(revision 71803)
+++ samples/samples.dsw	(working copy)
@@ -795,6 +795,18 @@
 
 ###############################################################################
 
+Project: "privfont"=.\privfont\privfont.dsp - Package Owner=<4>
+
+Package=<5>
+{{{
+}}}
+
+Package=<4>
+{{{
+}}}
+
+###############################################################################
+
 Project: "propgrid"=.\propgrid\propgrid.dsp - Package Owner=<4>
 
 Package=<5>
Index: samples/samples.bkl
===================================================================
--- samples/samples.bkl	(revision 71803)
+++ samples/samples.bkl	(working copy)
@@ -62,6 +62,7 @@
     <subproject id="popup" template="sub"/>
     <subproject id="power" template="sub"/>
     <subproject id="printing" template="sub"/>
+    <subproject id="privfont" template="sub"/>
     <subproject id="propgrid" template="sub"/>
     <subproject id="regtest" template="sub"/>
     <subproject id="render" template="sub"/>
Index: docs/doxygen/overviews/font.h
===================================================================
--- docs/doxygen/overviews/font.h	(revision 71803)
+++ docs/doxygen/overviews/font.h	(working copy)
@@ -82,5 +82,22 @@
 are available for all the ports and should be used to make your program work
 correctly when they are implemented later.
 
+@section overview_font_privateinfo Private font information
+
+Sometimes an application needs fonts that are not globally installed on the
+system. On Macintosh/OSX this can be arranged by placing the desired fonts
+within the Application Bundle in Contents/Resources/Fonts and using
+the ATSApplicationFontsPath key to point there. The full details of the
+procedure there can be found as OSX developer resources. For the GTK+ and
+Windows ports it is possible to add Truetype fonts at run-time using
+a sequence of calls to wxFont::AddPrivateFont to give the names of files
+containing font data, followed by a call to wxFont::ActivatePrivateFonts
+to complete the process of making the fonts available. These functions
+return false if they fail. They should be called just once before any
+graphics contexts have been created or other activity liable to use fonts
+has happened. wxFont::RemovePrivateFonts can be used to tidy up at the end
+of a run, but since the fonts will be discarded when the application
+exits this will rarely be essential.
+
 */
 
Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 71803)
+++ include/wx/font.h	(working copy)
@@ -215,6 +215,11 @@
     // from the string representation of wxNativeFontInfo
     static wxFont *New(const wxString& strNativeFontDesc);
 
+    // to allow for adding private fonts
+    static int AddPrivateFont(const wxString& filename);
+    static int ActivatePrivateFonts();
+    static int RemovePrivateFonts();
+
     // comparison
     bool operator==(const wxFont& font) const;
     bool operator!=(const wxFont& font) const { return !(*this == font); }
Index: include/wx/msw/missing.h
===================================================================
--- include/wx/msw/missing.h	(revision 71803)
+++ include/wx/msw/missing.h	(working copy)
@@ -521,8 +521,25 @@
 #endif
 
 //Various defines that will be needed by mingw and possibly VC++6
-//Used by the webview library
+//Used by the webview library. Well i686-w64-mingw and x86_64-w64-mingw32
+//in fact define this enum, and define __SHDocVw_LIBRARY_DEFINED__
+//to note that fact... all in exdisp.h
 
+#ifdef __MINGW32__
+
+// Does this include need to be guarded by something that checks if the
+// file is present?
+#include <exdisp.h>
+
+#ifndef __SHDocVw_LIBRARY_DEFINED__
+typedef enum CommandStateChangeConstants {
+    CSC_UPDATECOMMANDS = (int) 0xFFFFFFFF,
+    CSC_NAVIGATEFORWARD = 0x1,
+    CSC_NAVIGATEBACK = 0x2
+} CommandStateChangeConstants;
+#endif
+#endif
+
 #ifndef DISPID_COMMANDSTATECHANGE
 #define DISPID_COMMANDSTATECHANGE 105
 #endif

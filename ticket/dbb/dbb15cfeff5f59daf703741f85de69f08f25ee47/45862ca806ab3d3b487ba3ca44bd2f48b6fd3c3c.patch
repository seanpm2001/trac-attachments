? include/.DS_Store
? include/wx/.DS_Store
? src/mac/.DS_Store
Index: include/wx/mac/control.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/control.h,v
retrieving revision 1.22
diff -u -2 -r1.22 control.h
--- include/wx/mac/control.h	2003/08/17 12:50:16	1.22
+++ include/wx/mac/control.h	2004/03/02 19:15:24
@@ -51,57 +51,21 @@
    bool ProcessCommand(wxCommandEvent& event);
    virtual void SetLabel(const wxString& title) ;
-
-   wxList& GetSubcontrols() { return m_subControls; }
-   
-   void OnEraseBackground(wxEraseEvent& event);
    
-   virtual bool             Enable(bool enable = TRUE) ;
-   virtual bool             Show(bool show = TRUE) ;
+   virtual bool         Enable(bool enable = TRUE) ;
+   virtual bool         Show(bool show = TRUE) ;
 
-   virtual void         MacRedrawControl () ;
-   virtual void      MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool mouseStillDown ) ;
-   virtual void             MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label ,
-                          const wxPoint& pos,
-                          const wxSize& size, long style,
-                          const wxValidator& validator,
-                          const wxString& name ,
-                          WXRECTPTR outBounds ,
-                          unsigned char* maclabel ) ;
-   virtual void         MacPostControlCreate() ;
    virtual void         MacAdjustControlRect() ;
-   virtual WXWidget MacGetContainerForEmbedding() ;
-   virtual void      MacSuperChangedPosition() ;
-   virtual void      MacSuperEnabled( bool enabled ) ;
-   virtual void      MacSuperShown( bool show ) ;
-   virtual bool         MacCanFocus() const ;
-   virtual void         MacUpdateDimensions() ;
-   void*             MacGetControlAction() { return m_macControlAction ; }
    
-   virtual void       DoSetSize(int x, int y,int width, int height,int sizeFlags = wxSIZE_AUTO ) ;
-   void              OnKeyDown( wxKeyEvent &event ) ;
-   void                 OnMouseEvent( wxMouseEvent &event ) ;
-   void              OnPaint(wxPaintEvent& event) ;
+   virtual void         DoSetSize(int x, int y,int width, int height,int sizeFlags = wxSIZE_AUTO ) ;
+   void                 OnKeyDown( wxKeyEvent &event ) ;
    virtual void         Refresh(bool eraseBack = TRUE, const wxRect *rect = NULL) ;
-   WXWidget     GetMacControl() { return m_macControl ;}
+   virtual bool         MacCanFocus() const ;
 
 protected:
-   // For controls like radiobuttons which are really composite
-   WXWidget m_macControl ;
-   void*    m_macControlAction ;
-   bool     m_macControlIsShown ;
-   wxList   m_subControls;
-   int      m_macHorizontalBorder ;
-   int      m_macVerticalBorder ;
 
-   virtual wxSize DoGetBestSize() const;
 
 private:
-   DECLARE_EVENT_TABLE()
-};
-
 
-wxControl *wxFindControlFromMacControl(WXWidget inControl ) ;
-void wxAssociateControlWithMacControl(WXWidget inControl, wxControl *control) ;
-void wxRemoveMacControlAssociation(wxControl *control) ;
+};
 
 #endif
Index: include/wx/mac/toplevel.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/toplevel.h,v
retrieving revision 1.18
diff -u -2 -r1.18 toplevel.h
--- include/wx/mac/toplevel.h	2004/01/26 13:19:31	1.18
+++ include/wx/mac/toplevel.h	2004/03/02 19:15:24
@@ -101,5 +101,5 @@
     static bool MacEnableCompositing( bool useCompositing ); 
     bool MacUsesCompositing() { return m_macUsesCompositing; } 
-
+    
 #if TARGET_CARBON
     WXEVENTHANDLERREF    MacGetEventHandler() { return m_macEventHandler ; }
Index: include/wx/mac/window.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/window.h,v
retrieving revision 1.42
diff -u -2 -r1.42 window.h
--- include/wx/mac/window.h	2003/08/17 12:50:16	1.42
+++ include/wx/mac/window.h	2004/03/02 19:15:27
@@ -197,5 +197,5 @@
     virtual void         MacSuperChangedPosition() ;
     // the absolute coordinates of this item within the toplevel window may have changed
-    virtual void         MacUpdateDimensions() {}
+    virtual void         MacUpdateDimensions(); 
     // the absolute coortinates of this window's root have changed
     virtual void         MacTopLevelWindowChangedPosition() ;
@@ -203,4 +203,5 @@
     virtual void         MacSuperEnabled( bool enable ) ;
     bool                 MacIsReallyShown() const ;
+    bool		 MacIsOwnerDrawn() { return m_macIsOwnerDrawn; }
     virtual void         Update() ;
     // for compatibility
@@ -216,6 +217,34 @@
         { return (m_hScrollBar == sb || m_vScrollBar == sb) ; }
     static wxWindowMac*  s_lastMouseWindow ;
+	WXWidget     GetMacControl() { return m_macControl ;}
+	virtual void		 MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label ,
+                          const wxPoint& pos,
+                          const wxSize& size, long style,
+                          const wxValidator& validator,
+                          const wxString& name ,
+                          WXRECTPTR outBounds ,
+                          unsigned char* maclabel ) ;
+	virtual void         	MacPostControlCreate() ;
+        virtual void		MacInstallEventHandler() ;
+	void*				 MacGetControlAction() { return m_macControlAction ; }
+	wxList&				 GetSubcontrols() { return m_subControls; }
+	void				 OnPaint(wxPaintEvent& event) ;
+	virtual void		 MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool mouseStillDown ) ;
+	virtual void		 MacRedrawControl();
+#if TARGET_CARBON
+    WXEVENTHANDLERREF    MacGetControlEventHandler() { return m_macControlEventHandler ; }
+#endif
 private:
 protected:
+	//moved from wxControl as wxWindow will now also be a native control
+    WXWidget m_macControl ;
+	void*    m_macControlAction ;
+    bool     m_macControlIsShown ;
+    wxList   m_subControls;
+    int      m_macHorizontalBorder ;
+    int      m_macVerticalBorder ;
+	virtual wxSize DoGetBestSize() const;
+   
+	bool				m_macIsOwnerDrawn ;
     wxBrush              m_macBackgroundBrush ;
     wxRegion             m_macVisibleRegion ;
@@ -261,8 +290,15 @@
     // common part of all ctors
     void Init();
+#if TARGET_CARBON
+    WXEVENTHANDLERREF    m_macControlEventHandler ;
+#endif
 
     DECLARE_NO_COPY_CLASS(wxWindowMac)
     DECLARE_EVENT_TABLE()
 };
+
+wxWindow *wxFindControlFromMacControl(WXWidget inControl ) ;
+void wxAssociateControlWithMacControl(WXWidget inControl, wxWindow *control) ;
+void wxRemoveMacControlAssociation(wxWindow *control) ;
 
 #endif
Index: src/generic/calctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/calctrl.cpp,v
retrieving revision 1.51
diff -u -2 -r1.51 calctrl.cpp
--- src/generic/calctrl.cpp	2003/10/16 10:27:55	1.51
+++ src/generic/calctrl.cpp	2004/03/02 19:15:31
@@ -243,4 +243,10 @@
     m_widthCol =
     m_heightRow = 0;
+    
+#ifdef __WXMAC__
+    //KO: wxMac expects that wxControl-derived classes are native controls
+    // so we need to tell it otherwise here.
+    m_macIsOwnerDrawn = TRUE;
+#endif
 
     wxDateTime::WeekDay wd;
Index: src/generic/listctrl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/listctrl.cpp,v
retrieving revision 1.319
diff -u -2 -r1.319 listctrl.cpp
--- src/generic/listctrl.cpp	2004/03/01 22:17:56	1.319
+++ src/generic/listctrl.cpp	2004/03/02 19:15:36
@@ -2584,5 +2584,4 @@
     // done (a Windows requirement).
     wxPaintDC dc( this );
-
     if ( IsEmpty() || m_freezeCount )
     {
Index: src/mac/combobox.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/combobox.cpp,v
retrieving revision 1.32
diff -u -2 -r1.32 combobox.cpp
--- src/mac/combobox.cpp	2004/01/31 18:21:31	1.32
+++ src/mac/combobox.cpp	2004/03/02 19:15:37
@@ -282,4 +282,5 @@
            const wxString& name)
 {
+    m_macIsOwnerDrawn = TRUE;
     if ( !wxControl::Create(parent, id, wxDefaultPosition, wxDefaultSize, style ,
                             wxDefaultValidator, name) )
Index: src/mac/control.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/control.cpp,v
retrieving revision 1.70
diff -u -2 -r1.70 control.cpp
--- src/mac/control.cpp	2004/02/26 07:09:13	1.70
+++ src/mac/control.cpp	2004/03/02 19:15:37
@@ -34,9 +34,4 @@
 #if !USE_SHARED_LIBRARY
 IMPLEMENT_ABSTRACT_CLASS(wxControl, wxWindow)
-
-BEGIN_EVENT_TABLE(wxControl, wxWindow)
-    EVT_MOUSE_EVENTS( wxControl::OnMouseEvent ) 
-    EVT_PAINT( wxControl::OnPaint ) 
-END_EVENT_TABLE()
 #endif
 
@@ -67,94 +62,8 @@
     #pragma pack()
 #endif
-
-ControlActionUPP wxMacLiveScrollbarActionUPP = NULL ;
-wxControl *wxFindControlFromMacControl(ControlHandle inControl ) ;
-
-pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode ) ;
-pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode )
-{
-    if ( partCode != 0)
-    {
-        wxControl*  wx = (wxControl*) GetControlReference( control ) ;
-        if ( wx )
-        {
-            wx->MacHandleControlClick( control , partCode , true /* stillDown */ ) ;
-        }
-    }
-}
-
-ControlColorUPP wxMacSetupControlBackgroundUPP = NULL ;
-ControlDefUPP wxMacControlActionUPP = NULL ;
-
-pascal SInt32  wxMacControlDefinition(SInt16 varCode, ControlRef theControl, ControlDefProcMessage message, SInt32 param)
-{
-    
-    wxControl*  wx = (wxControl*) wxFindControlFromMacControl( theControl ) ;
-    if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxControl ) ) )
-    {
-        if( message == drawCntl )
-        {
-            wxMacWindowClipper clip( wx ) ;
-            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
-        }
-        else
-            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
-    }
-    return  NULL ;
-}
-
-pascal OSStatus wxMacSetupControlBackground( ControlRef iControl , SInt16 iMessage , SInt16 iDepth , Boolean iIsColor )
-{
-    OSStatus status = noErr ;
-    switch( iMessage )
-    {
-        case kControlMsgSetUpBackground :
-            {
-                wxControl*  wx = (wxControl*) GetControlReference( iControl ) ;
-                if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxControl ) ) )
-                {
-                    wxDC::MacSetupBackgroundForCurrentPort( wx->MacGetBackgroundBrush() ) ;
-#if TARGET_CARBON
-                    // under classic this would lead to partial redraws
-                    RgnHandle clip = NewRgn() ;
-                    int x = 0 , y = 0;
-
-                    wx->MacWindowToRootWindow( &x,&y ) ;
-                    CopyRgn( (RgnHandle) wx->MacGetVisibleRegion(false).GetWXHRGN() , clip ) ;
-                    OffsetRgn( clip , x , y ) ;
-                    SetClip( clip ) ;
-                    DisposeRgn( clip ) ;
-#endif
-                }
-                else
-                {
-                    status = paramErr ;
-                }
-            }
-            break ;
-        default :
-            status = paramErr ;
-            break ;
-    }
-    return status ;
-}
  
 wxControl::wxControl()
 {
-    m_macControl = NULL ;
-    m_macControlAction = NULL ;
-    m_macHorizontalBorder = 0 ; // additional pixels around the real control
-    m_macVerticalBorder = 0 ;
-    m_backgroundColour = *wxWHITE;
-    m_foregroundColour = *wxBLACK;
-
-    if ( wxMacLiveScrollbarActionUPP == NULL )
-    {
-#if defined(UNIVERSAL_INTERFACES_VERSION) && (UNIVERSAL_INTERFACES_VERSION >= 0x0340)
-        wxMacLiveScrollbarActionUPP = NewControlActionUPP( wxMacLiveScrollbarActionProc );
-#else
-        wxMacLiveScrollbarActionUPP = NewControlActionProc( wxMacLiveScrollbarActionProc ) ;
-#endif
-    }
+    m_macIsOwnerDrawn = FALSE;
 }
 
@@ -165,19 +74,18 @@
                        const wxString& name)
 {
-    m_macControl = NULL ;
-    m_macHorizontalBorder = 0 ; // additional pixels around the real control
-    m_macVerticalBorder = 0 ;
-    
     bool rval = wxWindow::Create(parent, id, pos, size, style, name);
-    if ( parent )
-    {
+
+	if ( parent )
+    {	
         m_backgroundColour = parent->GetBackgroundColour() ;
         m_foregroundColour = parent->GetForegroundColour() ;
     }
-    if (rval) {
+	
+	if (rval){
 #if wxUSE_VALIDATORS
-        SetValidator(validator);
+		SetValidator(validator);
 #endif
-    }
+}
+
     return rval;
 }
@@ -186,18 +94,4 @@
 {
     m_isBeingDeleted = TRUE;
-    wxRemoveMacControlAssociation( this ) ;
-    // If we delete an item, we should initialize the parent panel,
-    // because it could now be invalid.
-    wxWindow *parent = GetParent() ;
-    if ( parent )
-    {
-        if (parent->GetDefaultItem() == (wxButton*) this)
-            parent->SetDefaultItem(NULL);
-    }
-    if ( (ControlHandle) m_macControl )
-    {
-        ::DisposeControl( (ControlHandle) m_macControl ) ;
-        m_macControl = NULL ;
-    }
 }
 
@@ -213,44 +107,4 @@
 }
 
-wxSize wxControl::DoGetBestSize() const
-{
-    if ( (ControlHandle) m_macControl == NULL )
-        return wxWindow::DoGetBestSize() ;
-        
-    Rect    bestsize = { 0 , 0 , 0 , 0 } ;
-    short   baselineoffset ;
-    int bestWidth, bestHeight ;
-    ::GetBestControlRect( (ControlHandle) m_macControl , &bestsize , &baselineoffset ) ;
-
-    if ( EmptyRect( &bestsize ) )
-    {
-        baselineoffset = 0;
-        bestsize.left = bestsize.top = 0 ;
-        bestsize.right = 16 ;
-        bestsize.bottom = 16 ;
-        if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
-        {
-            bestsize.bottom = 16 ;
-        }
-        else if ( IsKindOf( CLASSINFO( wxSpinButton ) ) )
-        {
-            bestsize.bottom = 24 ; 
-        }
-    }
-
-    bestWidth = bestsize.right - bestsize.left ;
-        
-    bestWidth += 2 * m_macHorizontalBorder ;
-
-    bestHeight = bestsize.bottom - bestsize.top ;
-    if ( bestHeight < 10 )
-        bestHeight = 13 ;
-
-    bestHeight += 2 * m_macVerticalBorder;
-
-        
-    return wxSize(bestWidth, bestHeight);
-}
-
 bool wxControl::ProcessCommand (wxCommandEvent & event)
 {
@@ -262,146 +116,4 @@
 
 // ------------------------
-wxList *wxWinMacControlList = NULL;
-wxControl *wxFindControlFromMacControl(ControlHandle inControl )
-{
-    wxNode *node = wxWinMacControlList->Find((long)inControl);
-    if (!node)
-        return NULL;
-    return (wxControl *)node->GetData();
-}
-
-void wxAssociateControlWithMacControl(ControlHandle inControl, wxControl *control)
-{
-    // adding NULL WindowRef is (first) surely a result of an error and
-    // (secondly) breaks menu command processing
-    wxCHECK_RET( inControl != (ControlHandle) NULL, wxT("attempt to add a NULL WindowRef to window list") );
-
-    if ( !wxWinMacControlList->Find((long)inControl) )
-        wxWinMacControlList->Append((long)inControl, control);
-}
-
-void wxRemoveMacControlAssociation(wxControl *control)
-{
-    if ( wxWinMacControlList )
-        wxWinMacControlList->DeleteObject(control);
-}
-
-void wxControl::MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label , 
-             const wxPoint& pos,
-             const wxSize& size, long style,
-             const wxValidator& validator,
-             const wxString& name , WXRECTPTR outBounds , unsigned char* maclabel ) 
-{
-    m_label = label ;
-
-    // These sizes will be adjusted in MacPostControlCreate
-    m_width = size.x ;
-    m_height = size.y ;
-    m_x = pos.x ;
-    m_y = pos.y ;
-        
-    ((Rect*)outBounds)->top = -10;
-    ((Rect*)outBounds)->left = -10;
-    ((Rect*)outBounds)->bottom = 0;
-    ((Rect*)outBounds)->right = 0;
-
-    wxMacStringToPascal( wxStripMenuCodes(label) , maclabel ) ;
-}
-
-void wxControl::MacPostControlCreate()
-{
-    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
-    
-    if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
-    {
-        // no font
-    }
-    else if ( !UMAHasAquaLayout() && (IsKindOf( CLASSINFO( wxStaticBox ) ) || IsKindOf( CLASSINFO( wxRadioBox ) ) || IsKindOf( CLASSINFO( wxButton ) ) ) )
-    {
-        ControlFontStyleRec     controlstyle ;
-        controlstyle.flags = kControlUseFontMask ;
-        controlstyle.font = kControlFontSmallBoldSystemFont ;
-        
-        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
-    }
-    else
-    {
-        ControlFontStyleRec     controlstyle ;
-        controlstyle.flags = kControlUseFontMask ;
-        
-        if (IsKindOf( CLASSINFO( wxButton ) ) )
-            controlstyle.font = kControlFontBigSystemFont ; // eventually kControlFontBigSystemFont ;
-        else
-            controlstyle.font = kControlFontSmallSystemFont ;
-        
-        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
-    }
-    ControlHandle container = (ControlHandle) GetParent()->MacGetContainerForEmbedding() ;
-    wxASSERT_MSG( container != NULL , wxT("No valid mac container control") ) ;
-    ::EmbedControl( (ControlHandle) m_macControl , container ) ;
-    m_macControlIsShown  = MacIsReallyShown() ;
-
-    wxAssociateControlWithMacControl( (ControlHandle) m_macControl , this ) ;
-    if ( wxMacSetupControlBackgroundUPP == NULL )
-    {
-        wxMacSetupControlBackgroundUPP = NewControlColorUPP( wxMacSetupControlBackground ) ;
-    }
-    if ( wxMacControlActionUPP == NULL )
-    {
-        wxMacControlActionUPP = NewControlDefUPP( wxMacControlDefinition ) ;
-    }
-    // The following block of code is responsible for crashes when switching
-    // back to windows, which can be seen in the dialogs sample.
-    // It is disabled until a proper solution can be found.
-#if 0
-#if TARGET_CARBON
-/*
-    only working under classic carbon
-    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
-    (**(ControlHandle)m_macControl).contrlDefProc = (Handle) &wxMacControlActionUPP ;
-*/
-#else
-    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
-
-    cdefHandle cdef ;
-    cdef = (cdefHandle) NewHandle( sizeof(cdefRec) ) ;
-    if (  (**(ControlHandle)m_macControl).contrlDefProc != NULL )
-    {
-        (**cdef).instruction = 0x4EF9;  /* JMP instruction */
-        (**cdef).function = (void(*)()) wxMacControlActionUPP;
-        (**(ControlHandle)m_macControl).contrlDefProc = (Handle) cdef ;
-    }
-#endif
-#endif
-    SetControlColorProc( (ControlHandle) m_macControl , wxMacSetupControlBackgroundUPP ) ;
-    
-    // Adjust the controls size and position
-    wxPoint pos(m_x, m_y);
-    wxSize best_size( DoGetBestSize() );
-    wxSize new_size( m_width, m_height );
-    
-    m_x = m_y = m_width = m_height = -1;  // Forces SetSize to move/size the control
-    
-    if (new_size.x == -1) {
-        new_size.x = best_size.x;
-    }
-    if (new_size.y == -1) {
-        new_size.y = best_size.y;
-    }
-    
-    SetSize(pos.x, pos.y, new_size.x, new_size.y);
-    
-#if wxUSE_UNICODE
-    UMASetControlTitle( (ControlHandle) m_macControl , wxStripMenuCodes(m_label) , m_font.GetEncoding() ) ;
-#endif
-
-    if ( m_macControlIsShown )
-        UMAShowControl( (ControlHandle) m_macControl ) ;
-    
-    SetCursor( *wxSTANDARD_CURSOR ) ;
-    
-    Refresh() ;
-}
-
 void wxControl::MacAdjustControlRect() 
 {
@@ -459,89 +171,4 @@
 }
 
-WXWidget wxControl::MacGetContainerForEmbedding() 
-{
-    if ( m_macControl )
-        return m_macControl ;
-
-    return wxWindow::MacGetContainerForEmbedding() ;
-}
-
-void wxControl::MacUpdateDimensions() 
-{
-    // actually in the current systems this should never be possible, but later reparenting
-    // may become a reality
-    
-    if ( (ControlHandle) m_macControl == NULL )
-        return ;
-        
-    if ( GetParent() == NULL )
-        return ;
-        
-    WindowRef rootwindow = (WindowRef) MacGetRootWindow() ;
-    if ( rootwindow == NULL )
-        return ;
-        
-    Rect oldBounds ;       
-    GetControlBounds( (ControlHandle) m_macControl , &oldBounds ) ; 
-    
-    int new_x = m_x + MacGetLeftBorderSize() + m_macHorizontalBorder ;
-    int new_y = m_y + MacGetTopBorderSize() + m_macVerticalBorder ;
-    int new_width = m_width - MacGetLeftBorderSize() - MacGetRightBorderSize() - 2 * m_macHorizontalBorder ;
-    int new_height = m_height - MacGetTopBorderSize() - MacGetBottomBorderSize() - 2 * m_macVerticalBorder ;
-    
-    GetParent()->MacWindowToRootWindow( & new_x , & new_y ) ;
-    bool doMove = new_x != oldBounds.left || new_y != oldBounds.top ;
-    bool doResize =  ( oldBounds.right - oldBounds.left ) != new_width || (oldBounds.bottom - oldBounds.top ) != new_height ;
-    if ( doMove || doResize )
-    {
-        InvalWindowRect( rootwindow, &oldBounds ) ;
-        if ( doMove )
-        {
-            UMAMoveControl( (ControlHandle) m_macControl , new_x , new_y ) ;
-        }
-        if ( doResize )
-        {
-            UMASizeControl( (ControlHandle) m_macControl , new_width , new_height ) ;
-        }
-    }
-}
-
-void wxControl::MacSuperChangedPosition() 
-{
-     MacUpdateDimensions() ;
-    wxWindow::MacSuperChangedPosition() ;
-}
-
-void wxControl::MacSuperEnabled( bool enabled ) 
-{
-    Refresh(FALSE) ;
-    wxWindow::MacSuperEnabled( enabled ) ;
-}
-
-void wxControl::MacSuperShown( bool show ) 
-{
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( !show )
-        {
-            if ( m_macControlIsShown )
-            {
-                ::UMAHideControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = false ;
-            }
-        }
-        else
-        {
-            if ( MacIsReallyShown() && !m_macControlIsShown )
-            {
-                ::UMAShowControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = true ;
-            }
-        }
-    }
-        
-    wxWindow::MacSuperShown( show ) ;
-}
-
 void  wxControl::DoSetSize(int x, int y,
             int width, int height,
@@ -573,24 +200,5 @@
     if ( !wxWindow::Show( show ) )
         return FALSE ;
-        
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( !show )
-        {
-            if ( m_macControlIsShown )
-            {
-                ::UMAHideControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = false ;
-            }
-        }
-        else
-        {
-            if ( MacIsReallyShown() && !m_macControlIsShown )
-            {
-                ::UMAShowControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = true ;
-            }
-        }
-    }
+		
     return TRUE ;
 }
@@ -601,11 +209,4 @@
         return FALSE;
 
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( enable )
-            UMAActivateControl( (ControlHandle) m_macControl ) ;
-        else
-            UMADeactivateControl( (ControlHandle) m_macControl ) ;
-    }
     return TRUE ;
 }
@@ -616,36 +217,4 @@
 }
 
-void wxControl::MacRedrawControl()
-{
-    if ( (ControlHandle) m_macControl && MacGetRootWindow() && m_macControlIsShown )
-    {
-        wxClientDC dc(this) ;
-        wxMacPortSetter helper(&dc) ;
-        wxMacWindowClipper clipper(this) ;
-        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
-        UMADrawControl( (ControlHandle) m_macControl ) ;
-    }
-}
-
-void wxControl::OnPaint(wxPaintEvent& event)
-{
-    if ( (ControlHandle) m_macControl )
-    {
-        wxPaintDC dc(this) ;
-        wxMacPortSetter helper(&dc) ;
-        wxMacWindowClipper clipper(this) ;
-        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
-        UMADrawControl( (ControlHandle) m_macControl ) ;
-    }
-    else
-    {
-      event.Skip() ;
-    }
-}
-void wxControl::OnEraseBackground(wxEraseEvent& event)
-{
-    wxWindow::OnEraseBackground( event ) ; 
-}
-
 void  wxControl::OnKeyDown( wxKeyEvent &event ) 
 {
@@ -676,64 +245,4 @@
 }
 
-void  wxControl::OnMouseEvent( wxMouseEvent &event ) 
-{
-    if ( (ControlHandle) m_macControl == NULL )
-    {
-        event.Skip() ;
-        return ;
-    }
-        
-    if (event.GetEventType() == wxEVT_LEFT_DOWN || event.GetEventType() == wxEVT_LEFT_DCLICK )
-    {
-            
-        int x = event.m_x ;
-        int y = event.m_y ;
-        
-        MacClientToRootWindow( &x , &y ) ;
-            
-        ControlHandle   control ;
-        Point       localwhere ;
-        SInt16      controlpart ;
-        
-        localwhere.h = x ;
-        localwhere.v = y ;
-    
-        short modifiers = 0;
-        
-        if ( !event.m_leftDown && !event.m_rightDown )
-            modifiers  |= btnState ;
-    
-        if ( event.m_shiftDown )
-            modifiers |= shiftKey ;
-            
-        if ( event.m_controlDown )
-            modifiers |= controlKey ;
-    
-        if ( event.m_altDown )
-            modifiers |= optionKey ;
-    
-        if ( event.m_metaDown )
-            modifiers |= cmdKey ;
-        {
-            control = (ControlHandle) m_macControl ;
-            if ( control && ::IsControlActive( control ) )
-            {
-                {
-                    controlpart = ::HandleControlClick( control , localwhere , modifiers , (ControlActionUPP) -1 ) ;
-                    wxTheApp->s_lastMouseDown = 0 ;
-                    if ( control && controlpart != kControlNoPart ) 
-                    {
-                        MacHandleControlClick( control , controlpart , false /* mouse not down anymore */ ) ;
-                    }
-                }
-            }
-        }
-    }
-    else
-    {
-    	event.Skip() ;
-    }
-}
-
 bool wxControl::MacCanFocus() const
 {
@@ -742,9 +251,3 @@
     else
         return false ; 
-}
-
-void wxControl::MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool WXUNUSED( mouseStillDown ) ) 
-{
-    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
-}
-
+}
\ No newline at end of file
Index: src/mac/dc.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/dc.cpp,v
retrieving revision 1.88
diff -u -2 -r1.88 dc.cpp
--- src/mac/dc.cpp	2004/02/27 10:07:24	1.88
+++ src/mac/dc.cpp	2004/03/02 19:15:39
@@ -91,7 +91,8 @@
         SetPort( (GrafPtr) m_dc->m_macPort ) ;
         SetClip( m_clipRgn ) ;
-	    SetPort( m_oldPort ) ;
-	    m_dc->MacCleanupPort( NULL ) ;
-	    DisposeRgn( m_clipRgn ) ;
+
+        SetPort( m_oldPort ) ;
+        m_dc->MacCleanupPort( NULL ) ;
+        DisposeRgn( m_clipRgn ) ;
     }
 private :
@@ -287,4 +288,7 @@
     m_needComputeScaleY = FALSE;
     m_macPort = NULL ;
+#if TARGET_CARBON
+    GetPort( (GrafPtr*) &m_macPort );
+#endif
     m_macMask = NULL ;
     m_ok = FALSE ;
@@ -323,5 +327,7 @@
     m_macCurrentPortStateHelper = help ;
 #endif
-    SetClip( (RgnHandle) m_macCurrentClipRgn);
+
+    SetClip( (RgnHandle) m_macCurrentClipRgn );
+
 #if ! wxMAC_EXPERIMENTAL_DC
     m_macFontInstalled = false ;
@@ -465,4 +471,5 @@
     SetRectRgn( (RgnHandle) m_macCurrentClipRgn , xx , yy , xx + ww , yy + hh ) ;
     SectRgn( (RgnHandle) m_macCurrentClipRgn , (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
+
     if( m_clipping )
     {
@@ -480,4 +487,5 @@
         m_clipY2 = yy + hh;
     }
+
 }
 
@@ -512,4 +520,5 @@
         }
         SectRgn( (RgnHandle) m_macCurrentClipRgn , (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
+        
         if( m_clipping )
         {
Index: src/mac/dcclient.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/dcclient.cpp,v
retrieving revision 1.22
diff -u -2 -r1.22 dcclient.cpp
--- src/mac/dcclient.cpp	2003/05/19 18:49:11	1.22
+++ src/mac/dcclient.cpp	2004/03/02 19:15:40
@@ -51,8 +51,6 @@
 wxWindowDC::wxWindowDC(wxWindow *window) 
 {
-    m_window = window ;
-    wxTopLevelWindowMac* rootwindow = window->MacGetTopLevelWindow() ;
-    WindowRef windowref = (WindowRef) rootwindow->MacGetWindowRef() ;
-    
+    //printf("Creating wxDC, class is: %s\n", window->GetClassInfo()->GetClassName());
+    m_window = window ;    
     int x , y ;
     x = y = 0 ;
@@ -60,8 +58,13 @@
     m_macLocalOrigin.x = x ;
     m_macLocalOrigin.y = y ;
+    
+    wxTopLevelWindowMac* rootwindow = window->MacGetTopLevelWindow() ;
+    WindowRef windowref = (WindowRef) rootwindow->MacGetWindowRef() ;
+
+    RgnHandle controlRgn = NewRgn();
     CopyRgn( (RgnHandle) window->MacGetVisibleRegion().GetWXHRGN() , (RgnHandle) m_macBoundaryClipRgn ) ;
     OffsetRgn( (RgnHandle) m_macBoundaryClipRgn , m_macLocalOrigin.x , m_macLocalOrigin.y ) ;
-    CopyRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
     m_macPort = UMAGetWindowPort( windowref ) ;
+    CopyRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
     m_ok = TRUE ;
     SetBackground(window->MacGetBackgroundBrush());
@@ -103,10 +106,12 @@
     m_macLocalOrigin.x = x ;
     m_macLocalOrigin.y = y ;
+
     SetRectRgn( (RgnHandle) m_macBoundaryClipRgn , origin.x , origin.y , origin.x + size.x , origin.y + size.y ) ;
     SectRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) window->MacGetVisibleRegion().GetWXHRGN() , (RgnHandle) m_macBoundaryClipRgn ) ;
     OffsetRgn( (RgnHandle) m_macBoundaryClipRgn , -origin.x , -origin.y ) ;
     OffsetRgn( (RgnHandle) m_macBoundaryClipRgn , m_macLocalOrigin.x , m_macLocalOrigin.y ) ;
-    CopyRgn( (RgnHandle) m_macBoundaryClipRgn ,(RgnHandle)  m_macCurrentClipRgn ) ;
+    
     m_macPort = UMAGetWindowPort( windowref ) ;
+    CopyRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
 
     m_ok = TRUE ;
@@ -139,6 +144,4 @@
 {
     m_window = window ;
-    wxTopLevelWindowMac* rootwindow = window->MacGetTopLevelWindow() ;
-    WindowRef windowref = (WindowRef) rootwindow->MacGetWindowRef() ;
     wxPoint origin = window->GetClientAreaOrigin() ;
     wxSize size = window->GetClientSize() ;
@@ -149,4 +152,7 @@
     m_macLocalOrigin.x = x ;
     m_macLocalOrigin.y = y ;
+
+    wxTopLevelWindowMac* rootwindow = window->MacGetTopLevelWindow() ;
+    WindowRef windowref = (WindowRef) rootwindow->MacGetWindowRef() ;
     SetRectRgn( (RgnHandle) m_macBoundaryClipRgn , origin.x , origin.y , origin.x + size.x , origin.y + size.y ) ;
     SectRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) window->MacGetVisibleRegion().GetWXHRGN() , (RgnHandle) m_macBoundaryClipRgn ) ;
@@ -154,6 +160,12 @@
     SectRgn( (RgnHandle) m_macBoundaryClipRgn  , (RgnHandle) window->GetUpdateRegion().GetWXHRGN() , (RgnHandle) m_macBoundaryClipRgn ) ;
     OffsetRgn( (RgnHandle) m_macBoundaryClipRgn , m_macLocalOrigin.x , m_macLocalOrigin.y ) ;
-    CopyRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
+
+//KO: In Carbon, the port was set in kEventControlDraw, so just retrieve it here.
+#if TARGET_CARBON
+    GetPort( (GrafPtr*) &m_macPort );
+#else
     m_macPort = UMAGetWindowPort( windowref ) ;
+#endif
+    CopyRgn( (RgnHandle) m_macBoundaryClipRgn , (RgnHandle) m_macCurrentClipRgn ) ;
 
     m_ok = TRUE ;
Index: src/mac/frame.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/frame.cpp,v
retrieving revision 1.33
diff -u -2 -r1.33 frame.cpp
--- src/mac/frame.cpp	2003/07/10 01:00:24	1.33
+++ src/mac/frame.cpp	2004/03/02 19:15:40
@@ -98,9 +98,10 @@
     SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
     
+    m_macIsOwnerDrawn = TRUE;
     if ( !wxTopLevelWindow::Create(parent, id, title, pos, size, style, name) )
         return FALSE;
     
     MacCreateRealWindow( title, pos , size , MacRemoveBordersFromStyle(style) , name ) ;
-
+    
     m_macWindowBackgroundTheme = kThemeBrushDocumentWindowBackground ;
     SetThemeWindowBackground( (WindowRef) m_macWindow , m_macWindowBackgroundTheme , false ) ;
Index: src/mac/notebmac.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/notebmac.cpp,v
retrieving revision 1.41
diff -u -2 -r1.41 notebmac.cpp
--- src/mac/notebmac.cpp	2004/02/14 05:22:14	1.41
+++ src/mac/notebmac.cpp	2004/03/02 19:15:41
@@ -182,7 +182,22 @@
     Rect bounds ;
     Str255 title ;
-
+    
     MacPreControlCreate( parent , id ,  wxEmptyString , pos , size ,style, wxDefaultValidator , name , &bounds , title ) ;
 
+//KO: Commented out because this causes the widgets sample to always draw the sample notebook control
+//  over any panel, even when the notebook panel is not currently shown.
+#if 0 //TARGET_CARBON
+    UInt16 tabstyle = kControlTabDirectionNorth ;
+    if ( HasFlag(wxNB_LEFT) )
+        tabstyle = kControlTabDirectionWest ;
+    else if ( HasFlag( wxNB_RIGHT ) )
+        tabstyle = kControlTabDirectionEast ;
+    else if ( HasFlag( wxNB_BOTTOM ) )
+        tabstyle = kControlTabDirectionSouth ;
+        
+    ::CreateTabsControl( MAC_WXHWND(parent->MacGetRootWindow()) , &bounds, kControlTabSizeSmall, tabstyle, 0, NULL, (ControlHandle*) &m_macControl); 
+    
+#else
+
     int tabstyle = kControlTabSmallNorthProc ;
     if ( HasFlag(wxNB_LEFT) )
@@ -192,8 +207,8 @@
     else if ( HasFlag( wxNB_BOTTOM ) )
         tabstyle = kControlTabSmallSouthProc ;
-
-
+        
     m_macControl = ::NewControl( MAC_WXHWND(parent->MacGetRootWindow()) , &bounds , title , false , 0 , 0 , 1,
         tabstyle , (long) this ) ;
+#endif
 
     MacPostControlCreate() ;
Index: src/mac/statbmp.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/statbmp.cpp,v
retrieving revision 1.19
diff -u -2 -r1.19 statbmp.cpp
--- src/mac/statbmp.cpp	2003/02/28 23:48:12	1.19
+++ src/mac/statbmp.cpp	2004/03/02 19:15:41
@@ -58,5 +58,5 @@
 
     m_windowStyle = style;
-
+    m_macIsOwnerDrawn = TRUE;
     bool ret = wxControl::Create( parent, id, pos, size, style , wxDefaultValidator , name );
     SetBestSize( size ) ;
Index: src/mac/stattext.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/stattext.cpp,v
retrieving revision 1.38
diff -u -2 -r1.38 stattext.cpp
--- src/mac/stattext.cpp	2004/02/08 13:22:53	1.38
+++ src/mac/stattext.cpp	2004/03/02 19:15:41
@@ -43,5 +43,12 @@
 {
     m_label = wxStripMenuCodes(label) ;
+    m_macIsOwnerDrawn = TRUE;
 
+    if ( parent )
+    {	
+        m_backgroundColour = parent->GetBackgroundColour() ;
+        m_foregroundColour = parent->GetForegroundColour() ;
+    }
+	
     if ( !wxControl::Create( parent, id, pos, size, style,
                              wxDefaultValidator , name ) )
Index: src/mac/toolbar.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/toolbar.cpp,v
retrieving revision 1.49
diff -u -2 -r1.49 toolbar.cpp
--- src/mac/toolbar.cpp	2003/08/31 12:05:49	1.49
+++ src/mac/toolbar.cpp	2004/03/02 19:15:41
@@ -245,4 +245,5 @@
     m_defaultWidth = kwxMacToolBarToolDefaultWidth;
     m_defaultHeight = kwxMacToolBarToolDefaultHeight;
+    m_macIsOwnerDrawn = TRUE;
 }
 
@@ -250,4 +251,24 @@
             long style, const wxString& name)
 {  
+#if TARGET_CARBON
+    //KO: Create our userpane control using this
+    if ( !wxWindow::Create(parent, id, pos, size, style, name) )
+        return false;
+#else
+    SetName(name);
+    
+    m_windowStyle = style;
+    parent->AddChild(this);
+    
+    m_backgroundColour = parent->GetBackgroundColour() ;
+    m_foregroundColour = parent->GetForegroundColour() ;
+
+    
+    if (id == -1)
+        m_windowId = NewControlId();
+    else
+        m_windowId = id;
+#endif
+
     int x = pos.x;
     int y = pos.y;
@@ -263,17 +284,4 @@
     if (y < 0)
         y = 0;
-    
-    SetName(name);
-    
-    m_windowStyle = style;
-    parent->AddChild(this);
-    
-    m_backgroundColour = parent->GetBackgroundColour() ;
-    m_foregroundColour = parent->GetForegroundColour() ;
-    
-    if (id == -1)
-        m_windowId = NewControlId();
-    else
-        m_windowId = id;
     
     {
Index: src/mac/toplevel.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/toplevel.cpp,v
retrieving revision 1.75
diff -u -2 -r1.75 toplevel.cpp
--- src/mac/toplevel.cpp	2004/02/08 06:33:27	1.75
+++ src/mac/toplevel.cpp	2004/03/02 19:15:43
@@ -93,5 +93,4 @@
 
     { kEventClassWindow , kEventWindowShown } ,
-    { kEventClassWindow , kEventWindowUpdate } ,
     { kEventClassWindow , kEventWindowActivated } ,
     { kEventClassWindow , kEventWindowDeactivated } ,
@@ -244,5 +243,4 @@
              break ;
     }
-
     return result ;
 }
@@ -251,5 +249,4 @@
 {
     OSStatus result = eventNotHandledErr ;
-
     wxTopLevelWindowMac* toplevelWindow = (wxTopLevelWindowMac*) data ;
     Point point ;
@@ -356,10 +353,5 @@
 
     switch( GetEventKind( event ) )
-    {
-        case kEventWindowUpdate :
-            if ( !wxPendingDelete.Member(toplevelWindow) )
-                toplevelWindow->MacUpdate( EventTimeToTicks( GetEventTime( event ) ) ) ;
-            result = noErr ;
-            break ;
+    {   
         case kEventWindowActivated :
                 toplevelWindow->MacActivate( EventTimeToTicks( GetEventTime( event ) ) , true) ;
@@ -422,7 +414,4 @@
                     SetEventParameter( event , kEventParamCurrentBounds , typeQDRectangle, sizeof( adjustedRect ) , &adjustedRect ) ;
                 }
-                
-                if ( toplevelWindow->GetSize() != formerSize )
-                    toplevelWindow->Update() ;
         
                 result = noErr ;
@@ -748,4 +737,5 @@
     //this setup lets us have compositing and non-compositing 
     //windows in the same application. 
+
   
 #if UNIVERSAL_INTERFACES_VERSION >= 0x0400  
@@ -788,5 +778,10 @@
     {
         ::CreateRootControl( (WindowRef)m_macWindow , (ControlHandle*)&m_macRootControl ) ;
+        //KO: Make sure that the wxWindow functions accessing m_macControl work for the 
+        // root control too.
+        m_macControl = m_macRootControl;
+        MacInstallEventHandler();
     }
+    
 #if TARGET_CARBON
     InstallStandardEventHandler( GetWindowEventTarget(MAC_WXHWND(m_macWindow)) ) ;
@@ -836,8 +831,9 @@
 WXWidget wxTopLevelWindowMac::MacGetContainerForEmbedding()
 {
-    return m_macRootControl ;
+    //KO: m_macRootControl and m_macControl are now one and the same.
+    if ( (ControlHandle) m_macControl )
+        return m_macControl ;
 }
 
-
 void wxTopLevelWindowMac::MacUpdate( long timestamp)
 {
@@ -871,4 +867,5 @@
 #endif
         DiffRgn( updateRgn , (RgnHandle) m_macNoEraseUpdateRgn , diffRgn ) ;
+
         if ( !EmptyRgn( updateRgn ) )
         {
@@ -1115,4 +1112,6 @@
         event.SetEventObject(this);
         GetEventHandler()->ProcessEvent(event);
+        //KO: Is this needed anymore?
+        Update();
     }
     else
@@ -1228,5 +1227,4 @@
         }
     }
-
 }
 
@@ -1287,5 +1285,5 @@
         }
     }
-    InvalWindowRect( (WindowRef)m_macWindow , (Rect*)rect ) ;
+	InvalWindowRect( (WindowRef)m_macWindow , (Rect*)rect ) ;
     // turn this on to debug the refreshing cycle
 #if wxMAC_DEBUG_REDRAW
Index: src/mac/uma.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/uma.cpp,v
retrieving revision 1.50
diff -u -2 -r1.50 uma.cpp
--- src/mac/uma.cpp	2004/02/11 06:50:10	1.50
+++ src/mac/uma.cpp	2004/03/02 19:15:44
@@ -549,4 +549,7 @@
 void UMADrawControl( ControlHandle inControl )
 {
+#if TARGET_CARBON
+    ::Draw1Control( inControl );
+#else
     WindowRef theWindow = GetControlOwner(inControl) ;
     wxMacPortStateHelper help( (GrafPtr) GetWindowPort(theWindow) ) ;
@@ -559,8 +562,10 @@
     InvalWindowRgn( theWindow, updateRgn) ;
     DisposeRgn( updateRgn ) ;
+#endif
 }
 
 void UMAMoveControl( ControlHandle inControl , short x , short y )
 {
+#ifndef __DARWIN__
     bool visible = IsControlVisible( inControl ) ;
     if ( visible ) {
@@ -569,5 +574,7 @@
         InvalWindowRect(GetControlOwner(inControl),GetControlBounds(inControl,&ctrlBounds) ) ;
     }
+#endif
     ::MoveControl( inControl , x , y ) ;
+#ifndef __DARWIN__
     if ( visible ) {
         SetControlVisibility( inControl , true , false ) ;
@@ -575,8 +582,10 @@
         InvalWindowRect(GetControlOwner(inControl),GetControlBounds(inControl,&ctrlBounds) ) ;
     }
+#endif
 }
 
 void UMASizeControl( ControlHandle inControl , short x , short y )
 {
+#ifndef __DARWIN__
     bool visible = IsControlVisible( inControl ) ;
     if ( visible ) {
@@ -585,5 +594,7 @@
         InvalWindowRect(GetControlOwner(inControl),GetControlBounds(inControl,&ctrlBounds) ) ;
     }
+#endif
     ::SizeControl( inControl , x , y ) ;
+#ifndef __DARWIN__ 
     if ( visible ) {
         SetControlVisibility( inControl , true , false ) ;
@@ -591,4 +602,5 @@
         InvalWindowRect(GetControlOwner(inControl),GetControlBounds(inControl,&ctrlBounds) ) ;
     }
+#endif
 }
 
@@ -615,5 +627,5 @@
 }
 
-// shows the control and adds the region to the update region
+// hides the control and adds the region to the update region
 void UMAHideControl                        (ControlHandle             inControl)
 {
Index: src/mac/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/window.cpp,v
retrieving revision 1.125
diff -u -2 -r1.125 window.cpp
--- src/mac/window.cpp	2004/02/10 17:29:48	1.125
+++ src/mac/window.cpp	2004/03/02 19:15:47
@@ -25,6 +25,13 @@
 #include "wx/dialog.h"
 #include "wx/listbox.h"
-#include "wx/scrolbar.h"
+#include "wx/listctrl.h"
+#include "wx/scrolbar.h" 
 #include "wx/statbox.h"
+#include "wx/calctrl.h"
+#include "wx/stattext.h"
+#include "wx/statbmp.h"
+#include "wx/radiobox.h"
+#include "wx/toolbar.h"
+#include "wx/treectrl.h"
 #include "wx/button.h"
 #include "wx/settings.h"
@@ -73,4 +80,5 @@
 BEGIN_EVENT_TABLE(wxWindowMac, wxWindowBase)
   EVT_NC_PAINT(wxWindowMac::OnNcPaint)
+  EVT_PAINT(wxWindowMac::OnPaint)
   EVT_ERASE_BACKGROUND(wxWindowMac::OnEraseBackground)
   EVT_SYS_COLOUR_CHANGED(wxWindowMac::OnSysColourChanged)
@@ -89,10 +97,281 @@
 #define wxMAC_USE_THEME_BORDER 0
 
+// ---------------------------------------------------------------------------
+// Carbon Events
+// ---------------------------------------------------------------------------
 
+#if TARGET_CARBON
+
+extern long wxMacTranslateKey(unsigned char key, unsigned char code) ;
+
+static const EventTypeSpec wxWindowMacEventList[] =
+{
+	{ kEventClassControl , kEventControlDraw }
+} ;
+
+static pascal OSStatus ControlEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
+{
+    OSStatus result = eventNotHandledErr ;
+    OSStatus err = noErr ;
+
+    ControlRef controlRef ;
+    wxWindowMac* thisWindow = (wxWindowMac*) data ;
+
+    GetEventParameter( event, kEventParamDirectObject, typeControlRef, NULL,
+        sizeof( ControlRef ), NULL, &controlRef );
+
+    wxWindowDC dc(thisWindow);
+			
+    switch( GetEventKind( event ) )
+    {
+        case kEventControlDraw :
+            {
+                
+                RgnHandle updateRgn = NewRgn();
+                
+                err = GetEventParameter( event, kEventParamRgnHandle, typeQDRgnHandle,
+                NULL, sizeof( RgnHandle ), NULL, &updateRgn );
+                
+                wxMacWindowClipper clip(thisWindow);
+                GrafPtr myport;
+                err = GetEventParameter( event, kEventParamGrafPort, typeGrafPtr,
+                NULL, sizeof( GrafPtr ), NULL, &myport );
+                GrafPtr oldport;
+                if (myport != NULL){
+                    ::GetPort(&oldport);
+                    ::SetPort(myport);
+                }
+                
+                if (!EmptyRgn(updateRgn))
+                {
+                    thisWindow->MacRedraw(updateRgn, 0, TRUE);
+                }
+
+                if (myport != NULL)
+                    ::SetPort(oldport);
+                
+                if( thisWindow->MacIsOwnerDrawn() )
+                    result = noErr ;
+                else
+                    result = eventNotHandledErr; //KO: Let the native control run its drawing code.
+                break ;
+            }
+        }
+    return result ;
+}
+
+pascal OSStatus ControlMouseEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
+{
+    OSStatus result = eventNotHandledErr ;
+
+    wxWindowMac* thisWindow = (wxWindowMac*) data ;
+    Point point ;
+    UInt32 modifiers = 0;
+    EventMouseButton button = 0 ;
+    UInt32 click = 0 ;
+
+    GetEventParameter( event, kEventParamMouseLocation, typeQDPoint, NULL,
+        sizeof( Point ), NULL, &point );
+    GetEventParameter( event, kEventParamKeyModifiers, typeUInt32, NULL,
+        sizeof( UInt32 ), NULL, &modifiers );
+    GetEventParameter( event, kEventParamMouseButton, typeMouseButton, NULL,
+        sizeof( EventMouseButton ), NULL, &button );
+    GetEventParameter( event, kEventParamClickCount, typeUInt32, NULL,
+        sizeof( UInt32 ), NULL, &click );
+
+    if ( button == 0 || GetEventKind( event ) == kEventMouseUp )
+        modifiers += btnState ;
+
+	// temporary hack to support true two button mouse
+	if ( button == kEventMouseButtonSecondary )
+	{
+		modifiers |= controlKey ;
+	}
+    WindowRef window ;
+    short windowPart = ::FindWindow(point, &window);
+
+    // either we really are active or we are capturing mouse events
+
+    if ( (IsWindowActive(window) && windowPart == inContent) || 
+        (wxTheApp->s_captureWindow))
+    {
+        switch ( GetEventKind( event ) )
+        {
+            case kEventMouseDown :
+                thisWindow->MacGetTopLevelWindow()->MacFireMouseEvent( mouseDown , point.h , point.v , modifiers , EventTimeToTicks( GetEventTime( event ) ) ) ;
+                result = noErr ;
+                break ;
+            case kEventMouseUp :
+                thisWindow->MacGetTopLevelWindow()->MacFireMouseEvent( mouseUp , point.h , point.v , modifiers , EventTimeToTicks( GetEventTime( event ) ) ) ;
+                result = noErr ;
+                break ;
+            case kEventMouseMoved :
+                wxTheApp->MacHandleMouseMovedEvent( point.h , point.v , modifiers , EventTimeToTicks( GetEventTime( event ) ) ) ;
+                result = noErr ;
+                break ;
+            case kEventMouseDragged :
+                thisWindow->MacGetTopLevelWindow()->MacFireMouseEvent( nullEvent , point.h , point.v , modifiers , EventTimeToTicks( GetEventTime( event ) ) ) ;
+                result = noErr ;
+                break ;
+            case kEventMouseWheelMoved :
+                {
+                    //bClearTooltip = false;
+                    EventMouseWheelAxis axis = kEventMouseWheelAxisY;
+                    SInt32 delta = 0;
+                    Point mouseLoc = {0, 0};
+                    if (::GetEventParameter(event, kEventParamMouseWheelAxis, typeMouseWheelAxis,
+                                        NULL, sizeof(EventMouseWheelAxis), NULL, &axis) == noErr &&
+                        ::GetEventParameter(event, kEventParamMouseWheelDelta, typeLongInteger,
+                                        NULL, sizeof(SInt32), NULL, &delta) == noErr &&
+                        ::GetEventParameter(event, kEventParamMouseLocation, typeQDPoint,
+                                        NULL, sizeof(Point), NULL, &mouseLoc) == noErr)
+                    {
+                        wxMouseEvent wheelEvent(wxEVT_MOUSEWHEEL);
+                       
+                        wheelEvent.m_x = mouseLoc.h;
+                        wheelEvent.m_y = mouseLoc.v;
+                       
+                        wheelEvent.m_wheelRotation = delta;
+                        wheelEvent.m_wheelDelta = 1;
+                        wheelEvent.m_linesPerAction = 1;
+
+                        wxWindow* currentMouseWindow = NULL;
+                        wxWindow::MacGetWindowFromPoint(wxPoint(mouseLoc.h, mouseLoc.v), &currentMouseWindow);
+                       
+                        if (currentMouseWindow)
+                        {
+                            currentMouseWindow->GetEventHandler()->ProcessEvent(wheelEvent);
+                            result = noErr;
+                        }
+                    }
+                }
+                break ;
+            default :
+                break ;
+        }
+    }
+
+    return result ;
+}
+
+pascal OSStatus wxWindowMacEventHandler( EventHandlerCallRef handler , EventRef event , void *data )
+{
+    OSStatus result = eventNotHandledErr ;
+
+    switch ( GetEventClass( event ) )
+    {
+        case kEventClassControl :
+            result = ControlEventHandler( handler, event, data ) ;
+        default :
+            break ;
+    }
+    return result ;
+}
+
+DEFINE_ONE_SHOT_HANDLER_GETTER( wxWindowMacEventHandler )
+
+#endif
+
 // ===========================================================================
 // implementation
 // ===========================================================================
 
+//global functions
+wxList *wxWinMacControlList = NULL;
+wxWindow *wxFindControlFromMacControl(ControlHandle inControl )
+{
+    wxNode *node = wxWinMacControlList->Find((long)inControl);
+    if (!node)
+        return NULL;
+    return (wxWindow *)node->GetData();
+}
 
+void wxAssociateControlWithMacControl(ControlHandle inControl, wxWindow *control)
+{
+    // adding NULL WindowRef is (first) surely a result of an error and
+    // (secondly) breaks menu command processing
+    wxCHECK_RET( inControl != (ControlHandle) NULL, wxT("attempt to add a NULL WindowRef to window list") );
+
+    if ( !wxWinMacControlList->Find((long)inControl) )
+        wxWinMacControlList->Append((long)inControl, control);
+}
+
+void wxRemoveMacControlAssociation(wxWindow *control)
+{
+    if ( wxWinMacControlList )
+        wxWinMacControlList->DeleteObject(control);
+}
+
+// UPP functions
+ControlColorUPP wxMacSetupControlBackgroundUPP = NULL ;
+ControlDefUPP wxMacControlActionUPP = NULL ;
+ControlActionUPP wxMacLiveScrollbarActionUPP = NULL ;
+
+pascal OSStatus wxMacSetupControlBackground( ControlRef iControl , SInt16 iMessage , SInt16 iDepth , Boolean iIsColor )
+{
+    OSStatus status = noErr ;
+    switch( iMessage )
+    {
+        case kControlMsgSetUpBackground :
+            {
+                wxWindow*  wx = (wxWindow*) GetControlReference( iControl ) ;
+                if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxWindow ) ) )
+                {
+                    wxDC::MacSetupBackgroundForCurrentPort( wx->MacGetBackgroundBrush() ) ;
+#if TARGET_CARBON
+                    // under classic this would lead to partial redraws
+                    RgnHandle clip = NewRgn() ;
+                    int x = 0 , y = 0;
+
+                    wx->MacWindowToRootWindow( &x,&y ) ;
+                    CopyRgn( (RgnHandle) wx->MacGetVisibleRegion(false).GetWXHRGN() , clip ) ;
+                    OffsetRgn( clip , x , y ) ;
+                    SetClip( clip ) ;
+                    DisposeRgn( clip ) ;
+#endif
+                }
+                else
+                {
+                    status = paramErr ;
+                }
+            }
+            break ;
+        default :
+            status = paramErr ;
+            break ;
+    }
+    return status ;
+}
+
+pascal SInt32  wxMacControlDefinition(SInt16 varCode, ControlRef theControl, ControlDefProcMessage message, SInt32 param)
+{
+    
+    wxWindow*  wx = (wxWindow *) wxFindControlFromMacControl( theControl ) ;
+    if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxWindow ) ) )
+    {
+        if( message == drawCntl )
+        {
+            wxMacWindowClipper clip( wx ) ;
+            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
+        }
+        else
+            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
+    }
+    return  NULL ;
+}
+
+pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode ) ;
+pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode )
+{
+    if ( partCode != 0)
+    {
+        wxWindow*  wx = (wxWindow*) GetControlReference( control ) ;
+        if ( wx )
+        {
+            wx->MacHandleControlClick( control , partCode , true /* stillDown */ ) ;
+        }
+    }
+}
+
 // ----------------------------------------------------------------------------
 // constructors and such
@@ -113,4 +392,10 @@
     m_hScrollBar = NULL ;
     m_vScrollBar = NULL ;
+	
+	m_macControl = NULL ;
+    m_macControlAction = NULL ;
+    m_macHorizontalBorder = 0 ; // additional pixels around the real control
+    m_macVerticalBorder = 0 ;
+    m_macIsOwnerDrawn = TRUE;
 }
 
@@ -152,4 +437,19 @@
 #endif // __WXUNIVERSAL__
 
+    wxRemoveMacControlAssociation( this ) ;
+    // If we delete an item, we should initialize the parent panel,
+    // because it could now be invalid.
+    wxWindow *parent = GetParent() ;
+    if ( parent )
+    {
+        if (parent->GetDefaultItem() == (wxButton*) this)
+            parent->SetDefaultItem(NULL);
+    }
+    if ( (ControlHandle) m_macControl )
+    {
+        ::DisposeControl( (ControlHandle) m_macControl ) ;
+        m_macControl = NULL ;
+    }
+	
     if ( s_lastMouseWindow == this )
     {
@@ -181,4 +481,12 @@
 }
 
+//KO: We need this function so that wxFrame and wxDialog can register the kEventControlDraw event
+// even though they never call wxWindow::Create
+void wxWindowMac::MacInstallEventHandler(){
+    InstallControlEventHandler( (ControlRef) m_macControl, GetwxWindowMacEventHandlerUPP(),
+        GetEventTypeCount(wxWindowMacEventList), wxWindowMacEventList, this, 
+        (EventHandlerRef *)&m_macControlEventHandler);
+}
+
 // Constructor
 bool wxWindowMac::Create(wxWindowMac *parent, wxWindowID id,
@@ -200,8 +508,45 @@
                   _T("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX
-
+    m_macHorizontalBorder = 0 ; // additional pixels around the real control
+    m_macVerticalBorder = 0 ;
+	
     if ( !CreateBase(parent, id, pos, size, style, wxDefaultValidator, name) )
         return FALSE;
 
+#if TARGET_CARBON
+	if ( m_macIsOwnerDrawn )
+	{
+            //KO: setup our native control here, but only if we know a native control isn't going to be created
+                Rect bounds ;
+                Str255 title ;
+                UInt32 features = kControlSupportsEmbedding | kControlSupportsLiveFeedback | kControlHasSpecialBackground | kControlSupportsCalcBestRect | kControlHandlesTracking | kControlSupportsFocus | kControlWantsActivate | kControlWantsIdle; 
+
+                MacPreControlCreate( parent , id,  wxEmptyString, pos, size , style, wxDefaultValidator , name, &bounds , title ) ;
+                ::CreateUserPaneControl( MAC_WXHWND(GetParent()->MacGetRootWindow()) , &bounds, features, (ControlHandle*) &m_macControl); 
+
+                MacPostControlCreate();
+	}
+        
+        {
+            if ( wxMacSetupControlBackgroundUPP == NULL )
+            {
+                wxMacSetupControlBackgroundUPP = NewControlColorUPP( wxMacSetupControlBackground ) ;
+            }
+            SetControlColorProc( (ControlHandle) m_macControl , wxMacSetupControlBackgroundUPP ) ;
+        }        
+        //KO: we do this whether or not we create our own control
+	
+#endif //TARGET_CARBON
+
+    if ( wxMacLiveScrollbarActionUPP == NULL )
+    {
+#if defined(UNIVERSAL_INTERFACES_VERSION) && (UNIVERSAL_INTERFACES_VERSION >= 0x0340)
+        wxMacLiveScrollbarActionUPP = NewControlActionUPP( wxMacLiveScrollbarActionProc );
+#else
+        wxMacLiveScrollbarActionUPP = NewControlActionProc( wxMacLiveScrollbarActionProc ) ;
+#endif
+    }
+
+
     parent->AddChild(this);
 
@@ -213,6 +558,5 @@
 #ifndef __WXUNIVERSAL__
     // Don't give scrollbars to wxControls unless they ask for them
-    if ( (! IsKindOf(CLASSINFO(wxControl)) && ! IsKindOf(CLASSINFO(wxStatusBar))) ||
-         (IsKindOf(CLASSINFO(wxControl)) && ( style & wxHSCROLL || style & wxVSCROLL)))
+    if ( ( style & wxHSCROLL || style & wxVSCROLL))
     {
         MacCreateScrollBars( style ) ;
@@ -226,4 +570,176 @@
 }
 
+void wxWindowMac::MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label , 
+             const wxPoint& pos,
+             const wxSize& size, long style,
+             const wxValidator& validator,
+             const wxString& name , WXRECTPTR outBounds , unsigned char* maclabel ) 
+{
+    m_label = label ;
+
+    // These sizes will be adjusted in MacPostControlCreate
+    m_width = size.x ;
+    m_height = size.y ;
+    m_x = pos.x ;
+    m_y = pos.y ;
+        
+    ((Rect*)outBounds)->top = -10;
+    ((Rect*)outBounds)->left = -10;
+    ((Rect*)outBounds)->bottom = 0;
+    ((Rect*)outBounds)->right = 0;
+
+    wxMacStringToPascal( wxStripMenuCodes(label) , maclabel ) ;
+}
+
+void wxWindowMac::MacPostControlCreate()
+{
+    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
+    
+    //KO: Install the control event handler, but not for native controls.
+    //if (m_macIsOwnerDrawn)
+    {
+        MacInstallEventHandler();
+    }
+            
+    if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
+    {
+        // no font
+    }
+    else if ( !UMAHasAquaLayout() && (IsKindOf( CLASSINFO( wxStaticBox ) ) || IsKindOf( CLASSINFO( wxRadioBox ) ) || IsKindOf( CLASSINFO( wxButton ) ) ) )
+    {
+        ControlFontStyleRec     controlstyle ;
+        controlstyle.flags = kControlUseFontMask ;
+        controlstyle.font = kControlFontSmallBoldSystemFont ;
+        
+        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
+    }
+    else
+    {
+        ControlFontStyleRec     controlstyle ;
+        controlstyle.flags = kControlUseFontMask ;
+        
+        if (IsKindOf( CLASSINFO( wxButton ) ) )
+            controlstyle.font = kControlFontSmallSystemFont ; // eventually kControlFontBigSystemFont ;
+        else
+            controlstyle.font = kControlFontSmallSystemFont ;
+        
+        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
+    }
+    ControlHandle container;
+    container = (ControlHandle) GetParent()->MacGetContainerForEmbedding() ;
+    wxASSERT_MSG( container != NULL , wxT("No valid mac container control") ) ;
+    ::EmbedControl( (ControlHandle) m_macControl , container ) ;
+    m_macControlIsShown  = MacIsReallyShown() ;
+
+    wxAssociateControlWithMacControl( (ControlHandle) m_macControl , this ) ;
+
+    if ( wxMacControlActionUPP == NULL )
+    {
+        wxMacControlActionUPP = NewControlDefUPP( wxMacControlDefinition ) ;
+    }
+    // The following block of code is responsible for crashes when switching
+    // back to windows, which can be seen in the dialogs sample.
+    // It is disabled until a proper solution can be found.
+#if 0
+#if TARGET_CARBON
+/*
+    only working under classic carbon
+    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
+    (**(ControlHandle)m_macControl).contrlDefProc = (Handle) &wxMacControlActionUPP ;
+*/
+#else
+    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
+
+    cdefHandle cdef ;
+    cdef = (cdefHandle) NewHandle( sizeof(cdefRec) ) ;
+    if (  (**(ControlHandle)m_macControl).contrlDefProc != NULL )
+    {
+        (**cdef).instruction = 0x4EF9;  /* JMP instruction */
+        (**cdef).function = (void(*)()) wxMacControlActionUPP;
+        (**(ControlHandle)m_macControl).contrlDefProc = (Handle) cdef ;
+    }
+#endif
+#endif
+    
+    // Adjust the controls size and position
+//KO: We don't want to do this when the control is owner drawn, as
+// some controls like wxCalendarCtrl create sub-controls, and 
+// DoGet(Best)Size won't work properly until those sub-controls are created.
+if (!m_macIsOwnerDrawn){    
+    wxPoint pos(m_x, m_y);
+    wxSize best_size( DoGetBestSize() );
+    wxSize new_size( m_width, m_height );
+    
+    m_x = m_y = m_width = m_height = -1;  // Forces SetSize to move/size the control
+    
+    if (new_size.x == -1) {
+        new_size.x = best_size.x;
+    }
+    if (new_size.y == -1) {
+        new_size.y = best_size.y;
+    }
+
+    SetSize(pos.x, pos.y, new_size.x, new_size.y);
+}
+
+#if wxUSE_UNICODE
+    UMASetControlTitle( (ControlHandle) m_macControl , wxStripMenuCodes(m_label) ) ;
+#endif
+
+    //KO: Wait until Show is called on the top level window - slow redraws will sometimes show
+    // the control appearing at the top left corner before being sized
+//#if !TARGET_CARBON
+    if ( MacGetTopLevelWindow()->IsShown() ){
+        UMAShowControl( (ControlHandle) m_macControl ) ;
+	}
+//#endif
+    
+    SetCursor( *wxSTANDARD_CURSOR ) ;
+
+#if !TARGET_CARBON    
+    Refresh() ;
+#endif
+}
+
+void wxWindowMac::MacUpdateDimensions() 
+{
+    // actually in the current systems this should never be possible, but later reparenting
+    // may become a reality
+    
+    if ( (ControlHandle) m_macControl == NULL )
+        return ;
+        
+    if ( GetParent() == NULL )
+        return ;
+        
+    WindowRef rootwindow = (WindowRef) MacGetRootWindow() ;
+    if ( rootwindow == NULL )
+        return ;
+        
+    Rect oldBounds ;       
+    GetControlBounds( (ControlHandle) m_macControl , &oldBounds ) ; 
+    
+    int new_x = m_x + MacGetLeftBorderSize() + m_macHorizontalBorder ;
+    int new_y = m_y + MacGetTopBorderSize() + m_macVerticalBorder ;
+    int new_width = m_width - MacGetLeftBorderSize() - MacGetRightBorderSize() - 2 * m_macHorizontalBorder ;
+    int new_height = m_height - MacGetTopBorderSize() - MacGetBottomBorderSize() - 2 * m_macVerticalBorder ;
+    
+    GetParent()->MacWindowToRootWindow( & new_x , & new_y ) ;
+    bool doMove = new_x != oldBounds.left || new_y != oldBounds.top ;
+    bool doResize =  ( oldBounds.right - oldBounds.left ) != new_width || (oldBounds.bottom - oldBounds.top ) != new_height ;
+    if ( doMove || doResize )
+    {
+        InvalWindowRect( rootwindow, &oldBounds ) ;
+        if ( doMove )
+        {
+            UMAMoveControl( (ControlHandle) m_macControl , new_x , new_y ) ;
+        }
+        if ( doResize )
+        {
+            UMASizeControl( (ControlHandle) m_macControl , new_width , new_height ) ;
+        }
+    }
+}
+
 void wxWindowMac::SetFocus()
 {
@@ -243,5 +759,5 @@
 #endif // wxUSE_CARET
 #ifndef __WXUNIVERSAL__
-            wxControl* control = wxDynamicCast( gFocusWindow , wxControl ) ;
+            wxWindow* control = wxDynamicCast( gFocusWindow , wxWindow ) ;
             if ( control && control->GetMacControl() )
             {
@@ -296,4 +812,12 @@
     MacSuperEnabled( enable ) ;
 
+    if ( (ControlHandle) m_macControl )
+    {
+        if ( enable )
+            UMAActivateControl( (ControlHandle) m_macControl ) ;
+        else
+            UMADeactivateControl( (ControlHandle) m_macControl ) ;
+    }
+	
     return TRUE;
 }
@@ -626,5 +1150,8 @@
         bool partialRepaint = false ;
 
-        if ( !HasFlag(wxFULL_REPAINT_ON_RESIZE) )
+//KO: When a resize event occurs in Carbon, it sets the update region to the changed area
+// and fires a kEventControlDraw event - so this is no longer necessary
+#if !TARGET_CARBON
+        if (!HasFlag(wxFULL_REPAINT_ON_RESIZE) )
         {
             wxPoint oldPos( m_x , m_y ) ;
@@ -678,7 +1205,12 @@
             }
         }
-
+                    
         if ( !partialRepaint )
             Refresh() ;
+#else
+    partialRepaint = true;
+    if ( HasFlag(wxFULL_REPAINT_ON_RESIZE) )
+        partialRepaint = false;
+#endif //!TARGET_CARBON
 
         m_x = actualX ;
@@ -694,4 +1226,5 @@
         if ( !partialRepaint )
             Refresh() ;
+		
         if ( doMove )
             wxWindowMac::MacSuperChangedPosition() ; // like this only children will be notified
@@ -714,5 +1247,57 @@
         }
     }
+}
+
+wxSize wxWindowMac::DoGetBestSize() const
+{
+	if ((ControlHandle)m_macControl == NULL)
+        {
+		return wxWindowBase::DoGetBestSize();
+        }
+		
+    Rect    bestsize = { 0 , 0 , 0 , 0 } ;
+    short   baselineoffset ;
+    int bestWidth, bestHeight ;
+    ::GetBestControlRect( (ControlHandle) m_macControl , &bestsize , &baselineoffset ) ;
+
+    if ( EmptyRect( &bestsize ) )
+    {
+        baselineoffset = 0;
+        bestsize.left = bestsize.top = 0 ;
+        bestsize.right = 16 ;
+        bestsize.bottom = 16 ;
+        if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
+        {
+            bestsize.bottom = 16 ;
+        }
+        else if ( IsKindOf( CLASSINFO( wxSpinButton ) ) )
+        {
+            bestsize.bottom = 24 ; 
+        }
+    }
+
+    if ( IsKindOf( CLASSINFO( wxButton ) ) )
+    {
+        bestWidth = m_label.Length() * 8 + 12 ;
+        if ( bestWidth < 70 )
+          bestWidth = 70 ;
+    }
+    else if ( IsKindOf( CLASSINFO( wxStaticText ) ) )
+    {
+        bestWidth = m_label.Length() * 8 ;
+    }
+    else
+        bestWidth = bestsize.right - bestsize.left ;
+        
+    bestWidth += 2 * m_macHorizontalBorder ;
+
+    bestHeight = bestsize.bottom - bestsize.top ;
+    if ( bestHeight < 10 )
+        bestHeight = 13 ;
+
+    bestHeight += 2 * m_macVerticalBorder;
 
+        
+    return wxSize(bestWidth, bestHeight);
 }
 
@@ -817,4 +1402,25 @@
 void wxWindowMac::MacSuperShown( bool show )
 {
+    if ( (ControlHandle) m_macControl && !IsTopLevel())
+    {
+        if ( !show )
+        {
+            if ( m_macControlIsShown )
+            {
+                ::UMAHideControl( (ControlHandle) m_macControl ) ;
+                m_macControlIsShown = false ;
+            }
+        }
+        else
+        {
+            if ( !m_macControlIsShown )
+            {
+                ::UMAShowControl( (ControlHandle) m_macControl ) ;
+                m_macControlIsShown = true ;
+            }
+        }
+    }
+	
+    
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -825,4 +1431,5 @@
         node = node->GetNext();
     }
+    
 }
 
@@ -835,4 +1442,7 @@
       // the borders area
     }
+	if ( (ControlHandle) m_macControl)
+	    Refresh(FALSE) ;
+		
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -907,5 +1517,5 @@
     if ( !MacIsReallyShown() )
     	return ;
- 
+
      wxPoint client = GetClientAreaOrigin();
     int x1 = -client.x;
@@ -937,9 +1547,30 @@
       MacClientToRootWindow( &left , &top ) ;
       OffsetRect( &clientrect , left , top ) ;
-
+    
       MacGetTopLevelWindow()->MacInvalidate( &clientrect , eraseBack ) ;
     }
 }
 
+void wxWindowMac::MacRedrawControl()
+{
+    if ( (ControlHandle) m_macControl && MacGetRootWindow() && m_macControlIsShown )
+    {
+#if TARGET_CARBON
+        Update();
+#else
+        wxClientDC dc(this) ;
+        wxMacPortSetter helper(&dc) ;
+        wxMacWindowClipper clipper(this) ;
+        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
+        UMADrawControl( (ControlHandle) m_macControl ) ;
+#endif
+    }
+}
+
+void wxWindowMac::OnPaint(wxPaintEvent& event)
+{
+
+}
+
 wxWindowMac *wxGetActiveWindow()
 {
@@ -1020,5 +1651,11 @@
 void wxWindowMac::OnEraseBackground(wxEraseEvent& event)
 {
-    event.GetDC()->Clear() ;
+    if( !MacIsOwnerDrawn() )
+        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
+    else
+    {
+        event.GetDC()->SetBackground(MacGetBackgroundBrush());
+        event.GetDC()->Clear() ;
+    }
 }
 
@@ -1226,25 +1863,46 @@
     if( dx == 0 && dy ==0 )
         return ;
-        
-
+    
     {
         wxClientDC dc(this) ;
         wxMacPortSetter helper(&dc) ;
-
+        
         int width , height ;
         GetClientSize( &width , &height ) ;
+
+        wxPoint pos;
+        pos.x = pos.y = 0; 
 
-        Rect scrollrect = { dc.YLOG2DEVMAC(0) , dc.XLOG2DEVMAC(0) , dc.YLOG2DEVMAC(height) , dc.XLOG2DEVMAC(width) } ;
+        Rect scrollrect;
+#if TARGET_CARBON
+        GetControlBounds( (ControlHandle) m_macControl, &scrollrect);
+#else
+        scrollrect = { dc.YLOG2DEVMAC(0), dc.XLOG2DEVMAC(0), dc.YLOG2DEVMAC(height), dc.XLOG2DEVMAC(width) } ;
+#endif
+        
         RgnHandle updateRgn = NewRgn() ;
+#if !TARGET_CARBON
         ClipRect( &scrollrect ) ;
+#endif
         if ( rect )
         {
+            wxClientDC dc(this) ;
+            wxMacPortSetter helper(&dc) ;
             Rect r = { dc.YLOG2DEVMAC(rect->y) , dc.XLOG2DEVMAC(rect->x) , dc.YLOG2DEVMAC(rect->y + rect->height) ,
                 dc.XLOG2DEVMAC(rect->x + rect->width) } ;
             SectRect( &scrollrect , &r , &scrollrect ) ;
         }
+        
         ScrollRect( &scrollrect , dx , dy , updateRgn ) ;
+#if TARGET_CARBON
+    //KO: The docs say ScrollRect creates an update region, which thus calls an update event
+    // but it seems the update only refreshes the background of the control, rather than calling 
+    // kEventControlDraw, so we need to force a proper update here. There has to be a better 
+    // way of doing this... (Note that code below under !TARGET_CARBON does not work either...)
+    Update();
+#endif        
         // we also have to scroll the update rgn in this rectangle 
         // in order not to loose updates
+#if !TARGET_CARBON
         WindowRef rootWindow = (WindowRef) MacGetRootWindow() ;
         RgnHandle formerUpdateRgn = NewRgn() ;
@@ -1266,6 +1924,8 @@
         DisposeRgn( formerUpdateRgn ) ;
         DisposeRgn( scrollRgn ) ;
+#endif
     }
-
+    
+#if !TARGET_CARBON
     for (wxWindowListNode *node = GetChildren().GetFirst(); node; node = node->GetNext())
     {
@@ -1290,7 +1950,6 @@
         }        
     }
+#endif
     
-    Update() ;
-
 }
 
@@ -1592,4 +2251,8 @@
 void wxWindowMac::Update()
 {
+#if TARGET_CARBON
+    if ( (ControlHandle) m_macControl)
+        ::Draw1Control( (ControlHandle) m_macControl ) ;
+#else
     wxRegion visRgn = MacGetVisibleRegion( false ) ;
     int top = 0 , left = 0 ;
@@ -1612,12 +2275,7 @@
     // for flushing and validating we need macos-local coordinates again
     OffsetRgn( updateRgn , left , top ) ;
-#if TARGET_API_MAC_CARBON
-    if ( QDIsPortBuffered( GetWindowPort( rootWindow ) ) )
-    {
-        QDFlushPortBuffer( GetWindowPort( rootWindow ) , updateRgn ) ;
-    }
-#endif
     ValidWindowRgn( rootWindow , updateRgn ) ;
     DisposeRgn( updateRgn ) ;
+#endif
 }
 
@@ -1634,9 +2292,8 @@
 
 const wxRegion& wxWindowMac::MacGetVisibleRegion( bool respectChildrenAndSiblings )
-{
+{	
     RgnHandle visRgn = NewRgn() ;
     RgnHandle tempRgn = NewRgn() ;
     RgnHandle tempStaticBoxRgn = NewRgn() ;
-
     if ( MacIsReallyShown() )
     {
@@ -1742,4 +2399,5 @@
     DisposeRgn( tempRgn ) ;
     DisposeRgn( tempStaticBoxRgn ) ;
+
     return m_macVisibleRegion ;
 }
@@ -1751,13 +2409,24 @@
     // it is in window coordinates, not in client coordinates
 
-    WindowRef window = (WindowRef) MacGetRootWindow() ;
-
-    {
-        // ownUpdateRgn is the area that this window has to repaint, it is in window coordinates
-        RgnHandle ownUpdateRgn = NewRgn() ;
-        CopyRgn( updatergn , ownUpdateRgn ) ;
-
+    // ownUpdateRgn is the area that this window has to repaint, it is in window coordinates
+    RgnHandle ownUpdateRgn = NewRgn() ;
+    CopyRgn( updatergn , ownUpdateRgn ) ;
+    
+    { 
+#if TARGET_CARBON
+        Rect bounds;
+        GetControlBounds( (ControlHandle)m_macControl, &bounds );
+        RgnHandle controlRgn = NewRgn();
+        RectRgn( controlRgn, &bounds );
+        //KO: This sets the ownUpdateRgn to the area of this control that is inside
+        // the window update region
+        SectRgn( ownUpdateRgn, controlRgn, ownUpdateRgn ); 
+        DisposeRgn( controlRgn );
+        
+        //KO: convert ownUpdateRgn to local coordinates
+        OffsetRgn( ownUpdateRgn, -bounds.left, -bounds.top ); 
+#else
         SectRgn( ownUpdateRgn , (RgnHandle) MacGetVisibleRegion().GetWXHRGN() , ownUpdateRgn ) ;
-
+#endif
         // newupdate is the update region in client coordinates
         RgnHandle newupdate = NewRgn() ;
@@ -1769,5 +2438,5 @@
         m_updateRegion = newupdate ;
         DisposeRgn( newupdate ) ; // it's been cloned to m_updateRegion
-
+ 
         if ( erase && !EmptyRgn(ownUpdateRgn) )
         {
@@ -1779,11 +2448,17 @@
             GetEventHandler()->ProcessEvent( eevent );
 
+#if !TARGET_CARBON            
             wxNcPaintEvent eventNc( GetId() );
             eventNc.SetEventObject( this );
             GetEventHandler()->ProcessEvent( eventNc );
+#endif
         }
-        DisposeRgn( ownUpdateRgn ) ;
+
         if ( !m_updateRegion.Empty() )
         {
+//KO: The Carbon event manager will properly take care of layered drawing
+#if !TARGET_CARBON
+			WindowRef window = (WindowRef) MacGetRootWindow() ;	
+					
             wxWindowList hiddenWindows ;
             for (wxWindowListNode *node = GetChildren().GetFirst(); node; node = node->GetNext())
@@ -1797,10 +2472,20 @@
                 }
             }
-            
+#endif            
+			
             wxPaintEvent event;
             event.m_timeStamp = time ;
             event.SetEventObject(this);
             GetEventHandler()->ProcessEvent(event);
- 
+            
+#if TARGET_CARBON
+            //KO: Putting this code here is a hack necessary to get borders to properly
+            // update when scrolling. 
+            wxNcPaintEvent eventNc( GetId() );
+            eventNc.SetEventObject( this );
+            GetEventHandler()->ProcessEvent( eventNc );
+#endif
+            
+#if !TARGET_CARBON                    
             for (wxWindowListNode *node = hiddenWindows.GetFirst(); node; node = node->GetNext())
             {
@@ -1812,9 +2497,12 @@
                 }
             }
+#endif            
+			
         }
+        DisposeRgn( ownUpdateRgn ) ;
     }
 
+#if !TARGET_CARBON
     // now intersect for each of the children their rect with the updateRgn and call MacRedraw recursively
-
     RgnHandle childupdate = NewRgn() ;
     for (wxWindowListNode *node = GetChildren().GetFirst(); node; node = node->GetNext())
@@ -1833,4 +2521,5 @@
     }
     DisposeRgn( childupdate ) ;
+#endif
     // eventually a draw grow box here
 
@@ -1870,6 +2559,5 @@
 
     if ( style & wxVSCROLL )
-    {
-
+    { 
     }
     else
@@ -1881,4 +2569,5 @@
     if ( style  & wxHSCROLL )
     {
+
     }
     else
@@ -1972,5 +2661,8 @@
 WXWidget wxWindowMac::MacGetContainerForEmbedding()
 {
-    return GetParent()->MacGetContainerForEmbedding() ;
+    if ( (ControlHandle) m_macControl )
+        return m_macControl ;
+    else //KO: for classic applications, do the same thing as before
+        return GetParent()->MacGetContainerForEmbedding();
 }
 
@@ -1978,5 +2670,7 @@
 {
     // only window-absolute structures have to be moved i.e. controls
-
+    if ( (ControlHandle) m_macControl != NULL)
+        MacUpdateDimensions() ;
+		
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -2089,4 +2783,55 @@
             event.Skip() ;
 	}
+	else if (event.GetEventType() == wxEVT_LEFT_DOWN || event.GetEventType() == wxEVT_LEFT_DCLICK )
+    {
+		if ( (ControlHandle) m_macControl == NULL )
+		{
+			event.Skip() ;
+			return ;
+		}
+            
+        int x = event.m_x ;
+        int y = event.m_y ;
+        
+        MacClientToRootWindow( &x , &y ) ;
+            
+        ControlHandle   control ;
+        Point       localwhere ;
+        SInt16      controlpart ;
+        
+        localwhere.h = x ;
+        localwhere.v = y ;
+    
+        short modifiers = 0;
+        
+        if ( !event.m_leftDown && !event.m_rightDown )
+            modifiers  |= btnState ;
+    
+        if ( event.m_shiftDown )
+            modifiers |= shiftKey ;
+            
+        if ( event.m_controlDown )
+            modifiers |= controlKey ;
+    
+        if ( event.m_altDown )
+            modifiers |= optionKey ;
+    
+        if ( event.m_metaDown )
+            modifiers |= cmdKey ;
+        {
+            control = (ControlHandle) m_macControl ;
+            if ( control && ::IsControlActive( control ) )
+            {
+                {
+                    controlpart = ::HandleControlClick( control , localwhere , modifiers , (ControlActionUPP) -1 ) ;
+                    wxTheApp->s_lastMouseDown = 0 ;
+                    if ( control && controlpart != kControlNoPart ) 
+                    {
+                        MacHandleControlClick( control , controlpart , false /* mouse not down anymore */ ) ;
+                    }
+                }
+            }
+        }
+    }
 	else
 	{
@@ -2094,3 +2839,9 @@
 	}
 }
+
+void wxWindowMac::MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool WXUNUSED( mouseStillDown ) ) 
+{
+    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
+}
+
 

 	  	 

? bld
? statbld
? userpanes.patch
Index: include/wx/mac/control.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/control.h,v
retrieving revision 1.22
diff -u -2 -r1.22 control.h
--- include/wx/mac/control.h	2003/08/17 12:50:16	1.22
+++ include/wx/mac/control.h	2004/01/26 18:41:58
@@ -51,57 +51,20 @@
    bool ProcessCommand(wxCommandEvent& event);
    virtual void SetLabel(const wxString& title) ;
-
-   wxList& GetSubcontrols() { return m_subControls; }
-   
-   void OnEraseBackground(wxEraseEvent& event);
    
    virtual bool             Enable(bool enable = TRUE) ;
    virtual bool             Show(bool show = TRUE) ;
 
-   virtual void         MacRedrawControl () ;
-   virtual void      MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool mouseStillDown ) ;
-   virtual void             MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label ,
-                          const wxPoint& pos,
-                          const wxSize& size, long style,
-                          const wxValidator& validator,
-                          const wxString& name ,
-                          WXRECTPTR outBounds ,
-                          unsigned char* maclabel ) ;
-   virtual void         MacPostControlCreate() ;
    virtual void         MacAdjustControlRect() ;
-   virtual WXWidget MacGetContainerForEmbedding() ;
-   virtual void      MacSuperChangedPosition() ;
-   virtual void      MacSuperEnabled( bool enabled ) ;
-   virtual void      MacSuperShown( bool show ) ;
-   virtual bool         MacCanFocus() const ;
-   virtual void         MacUpdateDimensions() ;
-   void*             MacGetControlAction() { return m_macControlAction ; }
    
    virtual void       DoSetSize(int x, int y,int width, int height,int sizeFlags = wxSIZE_AUTO ) ;
    void              OnKeyDown( wxKeyEvent &event ) ;
-   void                 OnMouseEvent( wxMouseEvent &event ) ;
-   void              OnPaint(wxPaintEvent& event) ;
    virtual void         Refresh(bool eraseBack = TRUE, const wxRect *rect = NULL) ;
-   WXWidget     GetMacControl() { return m_macControl ;}
-
+	virtual bool         MacCanFocus() const ;
 protected:
-   // For controls like radiobuttons which are really composite
-   WXWidget m_macControl ;
-   void*    m_macControlAction ;
-   bool     m_macControlIsShown ;
-   wxList   m_subControls;
-   int      m_macHorizontalBorder ;
-   int      m_macVerticalBorder ;
 
-   virtual wxSize DoGetBestSize() const;
 
 private:
    DECLARE_EVENT_TABLE()
 };
-
-
-wxControl *wxFindControlFromMacControl(WXWidget inControl ) ;
-void wxAssociateControlWithMacControl(WXWidget inControl, wxControl *control) ;
-void wxRemoveMacControlAssociation(wxControl *control) ;
 
 #endif
Index: include/wx/mac/window.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/window.h,v
retrieving revision 1.42
diff -u -2 -r1.42 window.h
--- include/wx/mac/window.h	2003/08/17 12:50:16	1.42
+++ include/wx/mac/window.h	2004/01/26 18:41:58
@@ -197,5 +197,5 @@
     virtual void         MacSuperChangedPosition() ;
     // the absolute coordinates of this item within the toplevel window may have changed
-    virtual void         MacUpdateDimensions() {}
+    virtual void         MacUpdateDimensions(); 
     // the absolute coortinates of this window's root have changed
     virtual void         MacTopLevelWindowChangedPosition() ;
@@ -216,6 +216,29 @@
         { return (m_hScrollBar == sb || m_vScrollBar == sb) ; }
     static wxWindowMac*  s_lastMouseWindow ;
+	WXWidget     GetMacControl() { return m_macControl ;}
+	virtual void		 MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label ,
+                          const wxPoint& pos,
+                          const wxSize& size, long style,
+                          const wxValidator& validator,
+                          const wxString& name ,
+                          WXRECTPTR outBounds ,
+                          unsigned char* maclabel ) ;
+	virtual void         MacPostControlCreate() ;
+	void*				 MacGetControlAction() { return m_macControlAction ; }
+	wxList&				 GetSubcontrols() { return m_subControls; }
+	void				 OnPaint(wxPaintEvent& event) ;
+	virtual void		 MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool mouseStillDown ) ;
+	virtual void		 MacRedrawControl();
 private:
 protected:
+	//moved from wxControl as wxWindow will now also be a native control
+    WXWidget m_macControl ;
+	void*    m_macControlAction ;
+    bool     m_macControlIsShown ;
+    wxList   m_subControls;
+    int      m_macHorizontalBorder ;
+    int      m_macVerticalBorder ;
+	virtual wxSize DoGetBestSize() const;
+   
     wxBrush              m_macBackgroundBrush ;
     wxRegion             m_macVisibleRegion ;
@@ -265,4 +288,8 @@
     DECLARE_EVENT_TABLE()
 };
+
+wxWindow *wxFindControlFromMacControl(WXWidget inControl ) ;
+void wxAssociateControlWithMacControl(WXWidget inControl, wxWindow *control) ;
+void wxRemoveMacControlAssociation(wxWindow *control) ;
 
 #endif
Index: src/mac/control.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/control.cpp,v
retrieving revision 1.66
diff -u -2 -r1.66 control.cpp
--- src/mac/control.cpp	2003/09/09 15:48:52	1.66
+++ src/mac/control.cpp	2004/01/26 18:42:06
@@ -36,6 +36,7 @@
 
 BEGIN_EVENT_TABLE(wxControl, wxWindow)
-    EVT_MOUSE_EVENTS( wxControl::OnMouseEvent ) 
-    EVT_PAINT( wxControl::OnPaint ) 
+    //EVT_MOUSE_EVENTS( wxControl::OnMouseEvent ) 
+    //EVT_PAINT( wxControl::OnPaint ) 
+	//KO: These are now in wxWindow
 END_EVENT_TABLE()
 #endif
@@ -67,94 +68,8 @@
     #pragma pack()
 #endif
-
-ControlActionUPP wxMacLiveScrollbarActionUPP = NULL ;
-wxControl *wxFindControlFromMacControl(ControlHandle inControl ) ;
-
-pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode ) ;
-pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode )
-{
-    if ( partCode != 0)
-    {
-        wxControl*  wx = (wxControl*) GetControlReference( control ) ;
-        if ( wx )
-        {
-            wx->MacHandleControlClick( control , partCode , true /* stillDown */ ) ;
-        }
-    }
-}
-
-ControlColorUPP wxMacSetupControlBackgroundUPP = NULL ;
-ControlDefUPP wxMacControlActionUPP = NULL ;
-
-pascal SInt32  wxMacControlDefinition(SInt16 varCode, ControlRef theControl, ControlDefProcMessage message, SInt32 param)
-{
-    
-    wxControl*  wx = (wxControl*) wxFindControlFromMacControl( theControl ) ;
-    if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxControl ) ) )
-    {
-        if( message == drawCntl )
-        {
-            wxMacWindowClipper clip( wx ) ;
-            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
-        }
-        else
-            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
-    }
-    return  NULL ;
-}
-
-pascal OSStatus wxMacSetupControlBackground( ControlRef iControl , SInt16 iMessage , SInt16 iDepth , Boolean iIsColor )
-{
-    OSStatus status = noErr ;
-    switch( iMessage )
-    {
-        case kControlMsgSetUpBackground :
-            {
-                wxControl*  wx = (wxControl*) GetControlReference( iControl ) ;
-                if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxControl ) ) )
-                {
-                    wxDC::MacSetupBackgroundForCurrentPort( wx->MacGetBackgroundBrush() ) ;
-#if TARGET_CARBON
-                    // under classic this would lead to partial redraws
-                    RgnHandle clip = NewRgn() ;
-                    int x = 0 , y = 0;
-
-                    wx->MacWindowToRootWindow( &x,&y ) ;
-                    CopyRgn( (RgnHandle) wx->MacGetVisibleRegion(false).GetWXHRGN() , clip ) ;
-                    OffsetRgn( clip , x , y ) ;
-                    SetClip( clip ) ;
-                    DisposeRgn( clip ) ;
-#endif
-                }
-                else
-                {
-                    status = paramErr ;
-                }
-            }
-            break ;
-        default :
-            status = paramErr ;
-            break ;
-    }
-    return status ;
-}
  
 wxControl::wxControl()
 {
-    m_macControl = NULL ;
-    m_macControlAction = NULL ;
-    m_macHorizontalBorder = 0 ; // additional pixels around the real control
-    m_macVerticalBorder = 0 ;
-    m_backgroundColour = *wxWHITE;
-    m_foregroundColour = *wxBLACK;
-
-    if ( wxMacLiveScrollbarActionUPP == NULL )
-    {
-#if defined(UNIVERSAL_INTERFACES_VERSION) && (UNIVERSAL_INTERFACES_VERSION >= 0x0340)
-        wxMacLiveScrollbarActionUPP = NewControlActionUPP( wxMacLiveScrollbarActionProc );
-#else
-        wxMacLiveScrollbarActionUPP = NewControlActionProc( wxMacLiveScrollbarActionProc ) ;
-#endif
-    }
+ //code here moved to wxWindow
 }
 
@@ -165,19 +80,19 @@
                        const wxString& name)
 {
-    m_macControl = NULL ;
-    m_macHorizontalBorder = 0 ; // additional pixels around the real control
-    m_macVerticalBorder = 0 ;
     
     bool rval = wxWindow::Create(parent, id, pos, size, style, name);
+	//KO: This gives bad results with wxPanels if moved into wxWindow, so leave it here
     if ( parent )
-    {
-        m_backgroundColour = parent->GetBackgroundColour() ;
+    {	
+		m_backgroundColour = parent->GetBackgroundColour() ;
         m_foregroundColour = parent->GetForegroundColour() ;
     }
-    if (rval) {
+	
+	if (rval){
 #if wxUSE_VALIDATORS
-        SetValidator(validator);
+		SetValidator(validator);
 #endif
-    }
+}
+
     return rval;
 }
@@ -186,18 +101,4 @@
 {
     m_isBeingDeleted = TRUE;
-    wxRemoveMacControlAssociation( this ) ;
-    // If we delete an item, we should initialize the parent panel,
-    // because it could now be invalid.
-    wxWindow *parent = GetParent() ;
-    if ( parent )
-    {
-        if (parent->GetDefaultItem() == (wxButton*) this)
-            parent->SetDefaultItem(NULL);
-    }
-    if ( (ControlHandle) m_macControl )
-    {
-        ::DisposeControl( (ControlHandle) m_macControl ) ;
-        m_macControl = NULL ;
-    }
 }
 
@@ -213,52 +114,4 @@
 }
 
-wxSize wxControl::DoGetBestSize() const
-{
-    Rect    bestsize = { 0 , 0 , 0 , 0 } ;
-    short   baselineoffset ;
-    int bestWidth, bestHeight ;
-    ::GetBestControlRect( (ControlHandle) m_macControl , &bestsize , &baselineoffset ) ;
-
-    if ( EmptyRect( &bestsize ) )
-    {
-        baselineoffset = 0;
-        bestsize.left = bestsize.top = 0 ;
-        bestsize.right = 16 ;
-        bestsize.bottom = 16 ;
-        if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
-        {
-            bestsize.bottom = 16 ;
-        }
-        else if ( IsKindOf( CLASSINFO( wxSpinButton ) ) )
-        {
-            bestsize.bottom = 24 ; 
-        }
-    }
-
-    if ( IsKindOf( CLASSINFO( wxButton ) ) )
-    {
-        bestWidth = m_label.Length() * 8 + 12 ;
-        if ( bestWidth < 70 )
-          bestWidth = 70 ;
-    }
-    else if ( IsKindOf( CLASSINFO( wxStaticText ) ) )
-    {
-        bestWidth = m_label.Length() * 8 ;
-    }
-    else
-        bestWidth = bestsize.right - bestsize.left ;
-        
-    bestWidth += 2 * m_macHorizontalBorder ;
-
-    bestHeight = bestsize.bottom - bestsize.top ;
-    if ( bestHeight < 10 )
-        bestHeight = 13 ;
-
-    bestHeight += 2 * m_macVerticalBorder;
-
-        
-    return wxSize(bestWidth, bestHeight);
-}
-
 bool wxControl::ProcessCommand (wxCommandEvent & event)
 {
@@ -270,146 +123,5 @@
 
 // ------------------------
-wxList *wxWinMacControlList = NULL;
-wxControl *wxFindControlFromMacControl(ControlHandle inControl )
-{
-    wxNode *node = wxWinMacControlList->Find((long)inControl);
-    if (!node)
-        return NULL;
-    return (wxControl *)node->GetData();
-}
-
-void wxAssociateControlWithMacControl(ControlHandle inControl, wxControl *control)
-{
-    // adding NULL WindowRef is (first) surely a result of an error and
-    // (secondly) breaks menu command processing
-    wxCHECK_RET( inControl != (ControlHandle) NULL, wxT("attempt to add a NULL WindowRef to window list") );
-
-    if ( !wxWinMacControlList->Find((long)inControl) )
-        wxWinMacControlList->Append((long)inControl, control);
-}
-
-void wxRemoveMacControlAssociation(wxControl *control)
-{
-    if ( wxWinMacControlList )
-        wxWinMacControlList->DeleteObject(control);
-}
-
-void wxControl::MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label , 
-             const wxPoint& pos,
-             const wxSize& size, long style,
-             const wxValidator& validator,
-             const wxString& name , WXRECTPTR outBounds , unsigned char* maclabel ) 
-{
-    m_label = label ;
-
-    // These sizes will be adjusted in MacPostControlCreate
-    m_width = size.x ;
-    m_height = size.y ;
-    m_x = pos.x ;
-    m_y = pos.y ;
-        
-    ((Rect*)outBounds)->top = -10;
-    ((Rect*)outBounds)->left = -10;
-    ((Rect*)outBounds)->bottom = 0;
-    ((Rect*)outBounds)->right = 0;
-
-    wxMacStringToPascal( wxStripMenuCodes(label) , maclabel ) ;
-}
 
-void wxControl::MacPostControlCreate()
-{
-    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
-    
-    if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
-    {
-        // no font
-    }
-    else if ( !UMAHasAquaLayout() && (IsKindOf( CLASSINFO( wxStaticBox ) ) || IsKindOf( CLASSINFO( wxRadioBox ) ) || IsKindOf( CLASSINFO( wxButton ) ) ) )
-    {
-        ControlFontStyleRec     controlstyle ;
-        controlstyle.flags = kControlUseFontMask ;
-        controlstyle.font = kControlFontSmallBoldSystemFont ;
-        
-        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
-    }
-    else
-    {
-        ControlFontStyleRec     controlstyle ;
-        controlstyle.flags = kControlUseFontMask ;
-        
-        if (IsKindOf( CLASSINFO( wxButton ) ) )
-            controlstyle.font = kControlFontSmallSystemFont ; // eventually kControlFontBigSystemFont ;
-        else
-            controlstyle.font = kControlFontSmallSystemFont ;
-        
-        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
-    }
-    ControlHandle container = (ControlHandle) GetParent()->MacGetContainerForEmbedding() ;
-    wxASSERT_MSG( container != NULL , wxT("No valid mac container control") ) ;
-    ::EmbedControl( (ControlHandle) m_macControl , container ) ;
-    m_macControlIsShown  = MacIsReallyShown() ;
-
-    wxAssociateControlWithMacControl( (ControlHandle) m_macControl , this ) ;
-    if ( wxMacSetupControlBackgroundUPP == NULL )
-    {
-        wxMacSetupControlBackgroundUPP = NewControlColorUPP( wxMacSetupControlBackground ) ;
-    }
-    if ( wxMacControlActionUPP == NULL )
-    {
-        wxMacControlActionUPP = NewControlDefUPP( wxMacControlDefinition ) ;
-    }
-    // The following block of code is responsible for crashes when switching
-    // back to windows, which can be seen in the dialogs sample.
-    // It is disabled until a proper solution can be found.
-#if 0
-#if TARGET_CARBON
-/*
-    only working under classic carbon
-    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
-    (**(ControlHandle)m_macControl).contrlDefProc = (Handle) &wxMacControlActionUPP ;
-*/
-#else
-    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
-
-    cdefHandle cdef ;
-    cdef = (cdefHandle) NewHandle( sizeof(cdefRec) ) ;
-    if (  (**(ControlHandle)m_macControl).contrlDefProc != NULL )
-    {
-        (**cdef).instruction = 0x4EF9;  /* JMP instruction */
-        (**cdef).function = (void(*)()) wxMacControlActionUPP;
-        (**(ControlHandle)m_macControl).contrlDefProc = (Handle) cdef ;
-    }
-#endif
-#endif
-    SetControlColorProc( (ControlHandle) m_macControl , wxMacSetupControlBackgroundUPP ) ;
-    
-    // Adjust the controls size and position
-    wxPoint pos(m_x, m_y);
-    wxSize best_size( DoGetBestSize() );
-    wxSize new_size( m_width, m_height );
-    
-    m_x = m_y = m_width = m_height = -1;  // Forces SetSize to move/size the control
-    
-    if (new_size.x == -1) {
-        new_size.x = best_size.x;
-    }
-    if (new_size.y == -1) {
-        new_size.y = best_size.y;
-    }
-    
-    SetSize(pos.x, pos.y, new_size.x, new_size.y);
-    
-#if wxUSE_UNICODE
-    UMASetControlTitle( (ControlHandle) m_macControl , wxStripMenuCodes(m_label) ) ;
-#endif
-
-    if ( m_macControlIsShown )
-        UMAShowControl( (ControlHandle) m_macControl ) ;
-    
-    SetCursor( *wxSTANDARD_CURSOR ) ;
-    
-    Refresh() ;
-}
-
 void wxControl::MacAdjustControlRect() 
 {
@@ -468,89 +180,4 @@
 }
 
-WXWidget wxControl::MacGetContainerForEmbedding() 
-{
-    if ( m_macControl )
-        return m_macControl ;
-
-    return wxWindow::MacGetContainerForEmbedding() ;
-}
-
-void wxControl::MacUpdateDimensions() 
-{
-    // actually in the current systems this should never be possible, but later reparenting
-    // may become a reality
-    
-    if ( (ControlHandle) m_macControl == NULL )
-        return ;
-        
-    if ( GetParent() == NULL )
-        return ;
-        
-    WindowRef rootwindow = (WindowRef) MacGetRootWindow() ;
-    if ( rootwindow == NULL )
-        return ;
-        
-    Rect oldBounds ;       
-    GetControlBounds( (ControlHandle) m_macControl , &oldBounds ) ; 
-    
-    int new_x = m_x + MacGetLeftBorderSize() + m_macHorizontalBorder ;
-    int new_y = m_y + MacGetTopBorderSize() + m_macVerticalBorder ;
-    int new_width = m_width - MacGetLeftBorderSize() - MacGetRightBorderSize() - 2 * m_macHorizontalBorder ;
-    int new_height = m_height - MacGetTopBorderSize() - MacGetBottomBorderSize() - 2 * m_macVerticalBorder ;
-    
-    GetParent()->MacWindowToRootWindow( & new_x , & new_y ) ;
-    bool doMove = new_x != oldBounds.left || new_y != oldBounds.top ;
-    bool doResize =  ( oldBounds.right - oldBounds.left ) != new_width || (oldBounds.bottom - oldBounds.top ) != new_height ;
-    if ( doMove || doResize )
-    {
-        InvalWindowRect( rootwindow, &oldBounds ) ;
-        if ( doMove )
-        {
-            UMAMoveControl( (ControlHandle) m_macControl , new_x , new_y ) ;
-        }
-        if ( doResize )
-        {
-            UMASizeControl( (ControlHandle) m_macControl , new_width , new_height ) ;
-        }
-    }
-}
-
-void wxControl::MacSuperChangedPosition() 
-{
-     MacUpdateDimensions() ;
-    wxWindow::MacSuperChangedPosition() ;
-}
-
-void wxControl::MacSuperEnabled( bool enabled ) 
-{
-    Refresh(FALSE) ;
-    wxWindow::MacSuperEnabled( enabled ) ;
-}
-
-void wxControl::MacSuperShown( bool show ) 
-{
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( !show )
-        {
-            if ( m_macControlIsShown )
-            {
-                ::UMAHideControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = false ;
-            }
-        }
-        else
-        {
-            if ( MacIsReallyShown() && !m_macControlIsShown )
-            {
-                ::UMAShowControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = true ;
-            }
-        }
-    }
-        
-    wxWindow::MacSuperShown( show ) ;
-}
-
 void  wxControl::DoSetSize(int x, int y,
             int width, int height,
@@ -582,24 +209,5 @@
     if ( !wxWindow::Show( show ) )
         return FALSE ;
-        
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( !show )
-        {
-            if ( m_macControlIsShown )
-            {
-                ::UMAHideControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = false ;
-            }
-        }
-        else
-        {
-            if ( MacIsReallyShown() && !m_macControlIsShown )
-            {
-                ::UMAShowControl( (ControlHandle) m_macControl ) ;
-                m_macControlIsShown = true ;
-            }
-        }
-    }
+		
     return TRUE ;
 }
@@ -610,11 +218,4 @@
         return FALSE;
 
-    if ( (ControlHandle) m_macControl )
-    {
-        if ( enable )
-            UMAActivateControl( (ControlHandle) m_macControl ) ;
-        else
-            UMADeactivateControl( (ControlHandle) m_macControl ) ;
-    }
     return TRUE ;
 }
@@ -625,36 +226,4 @@
 }
 
-void wxControl::MacRedrawControl()
-{
-    if ( (ControlHandle) m_macControl && MacGetRootWindow() && m_macControlIsShown )
-    {
-        wxClientDC dc(this) ;
-        wxMacPortSetter helper(&dc) ;
-        wxMacWindowClipper clipper(this) ;
-        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
-        UMADrawControl( (ControlHandle) m_macControl ) ;
-    }
-}
-
-void wxControl::OnPaint(wxPaintEvent& event)
-{
-    if ( (ControlHandle) m_macControl )
-    {
-        wxPaintDC dc(this) ;
-        wxMacPortSetter helper(&dc) ;
-        wxMacWindowClipper clipper(this) ;
-        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
-        UMADrawControl( (ControlHandle) m_macControl ) ;
-    }
-    else
-    {
-      event.Skip() ;
-    }
-}
-void wxControl::OnEraseBackground(wxEraseEvent& event)
-{
-    wxWindow::OnEraseBackground( event ) ; 
-}
-
 void  wxControl::OnKeyDown( wxKeyEvent &event ) 
 {
@@ -685,64 +254,4 @@
 }
 
-void  wxControl::OnMouseEvent( wxMouseEvent &event ) 
-{
-    if ( (ControlHandle) m_macControl == NULL )
-    {
-        event.Skip() ;
-        return ;
-    }
-        
-    if (event.GetEventType() == wxEVT_LEFT_DOWN || event.GetEventType() == wxEVT_LEFT_DCLICK )
-    {
-            
-        int x = event.m_x ;
-        int y = event.m_y ;
-        
-        MacClientToRootWindow( &x , &y ) ;
-            
-        ControlHandle   control ;
-        Point       localwhere ;
-        SInt16      controlpart ;
-        
-        localwhere.h = x ;
-        localwhere.v = y ;
-    
-        short modifiers = 0;
-        
-        if ( !event.m_leftDown && !event.m_rightDown )
-            modifiers  |= btnState ;
-    
-        if ( event.m_shiftDown )
-            modifiers |= shiftKey ;
-            
-        if ( event.m_controlDown )
-            modifiers |= controlKey ;
-    
-        if ( event.m_altDown )
-            modifiers |= optionKey ;
-    
-        if ( event.m_metaDown )
-            modifiers |= cmdKey ;
-        {
-            control = (ControlHandle) m_macControl ;
-            if ( control && ::IsControlActive( control ) )
-            {
-                {
-                    controlpart = ::HandleControlClick( control , localwhere , modifiers , (ControlActionUPP) -1 ) ;
-                    wxTheApp->s_lastMouseDown = 0 ;
-                    if ( control && controlpart != kControlNoPart ) 
-                    {
-                        MacHandleControlClick( control , controlpart , false /* mouse not down anymore */ ) ;
-                    }
-                }
-            }
-        }
-    }
-    else
-    {
-    	event.Skip() ;
-    }
-}
-
 bool wxControl::MacCanFocus() const
 {
@@ -752,8 +261,2 @@
         return false ; 
 }
-
-void wxControl::MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool WXUNUSED( mouseStillDown ) ) 
-{
-    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
-}
-
Index: src/mac/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/window.cpp,v
retrieving revision 1.118
diff -u -2 -r1.118 window.cpp
--- src/mac/window.cpp	2004/01/16 01:46:18	1.118
+++ src/mac/window.cpp	2004/01/26 18:42:09
@@ -27,4 +27,6 @@
 #include "wx/scrolbar.h"
 #include "wx/statbox.h"
+#include "wx/stattext.h"
+#include "wx/radiobox.h"
 #include "wx/button.h"
 #include "wx/settings.h"
@@ -73,4 +75,5 @@
 BEGIN_EVENT_TABLE(wxWindowMac, wxWindowBase)
   EVT_NC_PAINT(wxWindowMac::OnNcPaint)
+  EVT_PAINT(wxWindowMac::OnPaint)
   EVT_ERASE_BACKGROUND(wxWindowMac::OnEraseBackground)
   EVT_SYS_COLOUR_CHANGED(wxWindowMac::OnSysColourChanged)
@@ -94,4 +97,100 @@
 // ===========================================================================
 
+//global functions
+wxList *wxWinMacControlList = NULL;
+wxWindow *wxFindControlFromMacControl(ControlHandle inControl )
+{
+    wxNode *node = wxWinMacControlList->Find((long)inControl);
+    if (!node)
+        return NULL;
+    return (wxWindow *)node->GetData();
+}
+
+void wxAssociateControlWithMacControl(ControlHandle inControl, wxWindow *control)
+{
+    // adding NULL WindowRef is (first) surely a result of an error and
+    // (secondly) breaks menu command processing
+    wxCHECK_RET( inControl != (ControlHandle) NULL, wxT("attempt to add a NULL WindowRef to window list") );
+
+    if ( !wxWinMacControlList->Find((long)inControl) )
+        wxWinMacControlList->Append((long)inControl, control);
+}
+
+void wxRemoveMacControlAssociation(wxWindow *control)
+{
+    if ( wxWinMacControlList )
+        wxWinMacControlList->DeleteObject(control);
+}
+
+// UPP functions
+ControlColorUPP wxMacSetupControlBackgroundUPP = NULL ;
+ControlDefUPP wxMacControlActionUPP = NULL ;
+ControlActionUPP wxMacLiveScrollbarActionUPP = NULL ;
+
+pascal OSStatus wxMacSetupControlBackground( ControlRef iControl , SInt16 iMessage , SInt16 iDepth , Boolean iIsColor )
+{
+    OSStatus status = noErr ;
+    switch( iMessage )
+    {
+        case kControlMsgSetUpBackground :
+            {
+                wxWindow*  wx = (wxWindow*) GetControlReference( iControl ) ;
+                if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxWindow ) ) )
+                {
+                    wxDC::MacSetupBackgroundForCurrentPort( wx->MacGetBackgroundBrush() ) ;
+#if TARGET_CARBON
+                    // under classic this would lead to partial redraws
+                    RgnHandle clip = NewRgn() ;
+                    int x = 0 , y = 0;
+
+                    wx->MacWindowToRootWindow( &x,&y ) ;
+                    CopyRgn( (RgnHandle) wx->MacGetVisibleRegion(false).GetWXHRGN() , clip ) ;
+                    OffsetRgn( clip , x , y ) ;
+                    SetClip( clip ) ;
+                    DisposeRgn( clip ) ;
+#endif
+                }
+                else
+                {
+                    status = paramErr ;
+                }
+            }
+            break ;
+        default :
+            status = paramErr ;
+            break ;
+    }
+    return status ;
+}
+
+pascal SInt32  wxMacControlDefinition(SInt16 varCode, ControlRef theControl, ControlDefProcMessage message, SInt32 param)
+{
+    
+    wxWindow*  wx = (wxWindow *) wxFindControlFromMacControl( theControl ) ;
+    if ( wx != NULL && wx->IsKindOf( CLASSINFO( wxWindow ) ) )
+    {
+        if( message == drawCntl )
+        {
+            wxMacWindowClipper clip( wx ) ;
+            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
+        }
+        else
+            return InvokeControlDefUPP( varCode , theControl , message , param , (ControlDefUPP) wx->MacGetControlAction() ) ;
+    }
+    return  NULL ;
+}
+
+pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode ) ;
+pascal void wxMacLiveScrollbarActionProc( ControlHandle control , ControlPartCode partCode )
+{
+    if ( partCode != 0)
+    {
+        wxWindow*  wx = (wxWindow*) GetControlReference( control ) ;
+        if ( wx )
+        {
+            wx->MacHandleControlClick( control , partCode , true /* stillDown */ ) ;
+        }
+    }
+}
 
 // ----------------------------------------------------------------------------
@@ -113,4 +212,11 @@
     m_hScrollBar = NULL ;
     m_vScrollBar = NULL ;
+	
+	m_macControl = NULL ;
+    m_macControlAction = NULL ;
+    m_macHorizontalBorder = 0 ; // additional pixels around the real control
+    m_macVerticalBorder = 0 ;
+    //m_backgroundColour == wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE); //m_backgroundColour = *wxWHITE;
+    //m_foregroundColour = *wxBLACK;
 }
 
@@ -152,4 +258,19 @@
 #endif // __WXUNIVERSAL__
 
+    wxRemoveMacControlAssociation( this ) ;
+    // If we delete an item, we should initialize the parent panel,
+    // because it could now be invalid.
+    wxWindow *parent = GetParent() ;
+    if ( parent )
+    {
+        if (parent->GetDefaultItem() == (wxButton*) this)
+            parent->SetDefaultItem(NULL);
+    }
+    if ( (ControlHandle) m_macControl )
+    {
+        ::DisposeControl( (ControlHandle) m_macControl ) ;
+        m_macControl = NULL ;
+    }
+	
     if ( s_lastMouseWindow == this )
     {
@@ -200,8 +321,35 @@
                   _T("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX
-
+    m_macHorizontalBorder = 0 ; // additional pixels around the real control
+    m_macVerticalBorder = 0 ;
+	
     if ( !CreateBase(parent, id, pos, size, style, wxDefaultValidator, name) )
         return FALSE;
 
+#ifdef TARGET_CARBON
+	if (!IsKindOf ( CLASSINFO (wxControl)) && !IsKindOf ( CLASSINFO (wxTopLevelWindow)))
+	{
+		//setup our native control here, but only if we know a native control isn't going to be created
+		Rect bounds ;
+		Str255 title ;
+		UInt32 features = kControlSupportsEmbedding | kControlSupportsFocus | kControlWantsIdle | 
+						kControlWantsActivate | kControlHandlesTracking | kControlSupportsDataAccess |
+						kControlGetsFocusOnClick | kControlSupportsCalcBestRect | kControlSupportsLiveFeedback |
+						kControlSupportsGetRegion | kControlHasSpecialBackground;
+		MacPreControlCreate( parent , id ,  wxEmptyString, pos , size ,style, wxDefaultValidator , name , &bounds , title ) ;
+		::CreateUserPaneControl( MAC_WXHWND(parent->MacGetRootWindow()) , &bounds, features, &m_macControl); 
+		MacPostControlCreate();
+	}
+#endif //TARGET_CARBON
+
+    if ( wxMacLiveScrollbarActionUPP == NULL )
+    {
+#if defined(UNIVERSAL_INTERFACES_VERSION) && (UNIVERSAL_INTERFACES_VERSION >= 0x0340)
+        wxMacLiveScrollbarActionUPP = NewControlActionUPP( wxMacLiveScrollbarActionProc );
+#else
+        wxMacLiveScrollbarActionUPP = NewControlActionProc( wxMacLiveScrollbarActionProc ) ;
+#endif
+    }
+
     parent->AddChild(this);
 
@@ -226,4 +374,161 @@
 }
 
+void wxWindowMac::MacPreControlCreate( wxWindow *parent, wxWindowID id, wxString label , 
+             const wxPoint& pos,
+             const wxSize& size, long style,
+             const wxValidator& validator,
+             const wxString& name , WXRECTPTR outBounds , unsigned char* maclabel ) 
+{
+    m_label = label ;
+
+    // These sizes will be adjusted in MacPostControlCreate
+    m_width = size.x ;
+    m_height = size.y ;
+    m_x = pos.x ;
+    m_y = pos.y ;
+        
+    ((Rect*)outBounds)->top = -10;
+    ((Rect*)outBounds)->left = -10;
+    ((Rect*)outBounds)->bottom = 0;
+    ((Rect*)outBounds)->right = 0;
+
+    wxMacStringToPascal( wxStripMenuCodes(label) , maclabel ) ;
+}
+
+void wxWindowMac::MacPostControlCreate()
+{
+    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
+    
+    if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
+    {
+        // no font
+    }
+    else if ( !UMAHasAquaLayout() && (IsKindOf( CLASSINFO( wxStaticBox ) ) || IsKindOf( CLASSINFO( wxRadioBox ) ) || IsKindOf( CLASSINFO( wxButton ) ) ) )
+    {
+        ControlFontStyleRec     controlstyle ;
+        controlstyle.flags = kControlUseFontMask ;
+        controlstyle.font = kControlFontSmallBoldSystemFont ;
+        
+        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
+    }
+    else
+    {
+        ControlFontStyleRec     controlstyle ;
+        controlstyle.flags = kControlUseFontMask ;
+        
+        if (IsKindOf( CLASSINFO( wxButton ) ) )
+            controlstyle.font = kControlFontSmallSystemFont ; // eventually kControlFontBigSystemFont ;
+        else
+            controlstyle.font = kControlFontSmallSystemFont ;
+        
+        ::SetControlFontStyle( (ControlHandle) m_macControl , &controlstyle ) ;
+    }
+    ControlHandle container = (ControlHandle) GetParent()->MacGetContainerForEmbedding() ;
+    wxASSERT_MSG( container != NULL , wxT("No valid mac container control") ) ;
+    ::EmbedControl( (ControlHandle) m_macControl , container ) ;
+    m_macControlIsShown  = MacIsReallyShown() ;
+
+    wxAssociateControlWithMacControl( (ControlHandle) m_macControl , this ) ;
+    if ( wxMacSetupControlBackgroundUPP == NULL )
+    {
+        wxMacSetupControlBackgroundUPP = NewControlColorUPP( wxMacSetupControlBackground ) ;
+    }
+    if ( wxMacControlActionUPP == NULL )
+    {
+        wxMacControlActionUPP = NewControlDefUPP( wxMacControlDefinition ) ;
+    }
+    // The following block of code is responsible for crashes when switching
+    // back to windows, which can be seen in the dialogs sample.
+    // It is disabled until a proper solution can be found.
+#if 0
+#if TARGET_CARBON
+/*
+    only working under classic carbon
+    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
+    (**(ControlHandle)m_macControl).contrlDefProc = (Handle) &wxMacControlActionUPP ;
+*/
+#else
+    m_macControlAction = *(**(ControlHandle)m_macControl).contrlDefProc ;
+
+    cdefHandle cdef ;
+    cdef = (cdefHandle) NewHandle( sizeof(cdefRec) ) ;
+    if (  (**(ControlHandle)m_macControl).contrlDefProc != NULL )
+    {
+        (**cdef).instruction = 0x4EF9;  /* JMP instruction */
+        (**cdef).function = (void(*)()) wxMacControlActionUPP;
+        (**(ControlHandle)m_macControl).contrlDefProc = (Handle) cdef ;
+    }
+#endif
+#endif
+    SetControlColorProc( (ControlHandle) m_macControl , wxMacSetupControlBackgroundUPP ) ;
+    
+    // Adjust the controls size and position
+    wxPoint pos(m_x, m_y);
+    wxSize best_size( DoGetBestSize() );
+    wxSize new_size( m_width, m_height );
+    
+    m_x = m_y = m_width = m_height = -1;  // Forces SetSize to move/size the control
+    
+    if (new_size.x == -1) {
+        new_size.x = best_size.x;
+    }
+    if (new_size.y == -1) {
+        new_size.y = best_size.y;
+    }
+    
+    SetSize(pos.x, pos.y, new_size.x, new_size.y);
+    
+#if wxUSE_UNICODE
+    UMASetControlTitle( (ControlHandle) m_macControl , wxStripMenuCodes(m_label) ) ;
+#endif
+
+    if ( m_macControlIsShown )
+        UMAShowControl( (ControlHandle) m_macControl ) ;
+    
+    SetCursor( *wxSTANDARD_CURSOR ) ;
+    
+    Refresh() ;
+}
+
+void wxWindowMac::MacUpdateDimensions() 
+{
+    // actually in the current systems this should never be possible, but later reparenting
+    // may become a reality
+    
+    if ( (ControlHandle) m_macControl == NULL )
+        return ;
+        
+    if ( GetParent() == NULL )
+        return ;
+        
+    WindowRef rootwindow = (WindowRef) MacGetRootWindow() ;
+    if ( rootwindow == NULL )
+        return ;
+        
+    Rect oldBounds ;       
+    GetControlBounds( (ControlHandle) m_macControl , &oldBounds ) ; 
+    
+    int new_x = m_x + MacGetLeftBorderSize() + m_macHorizontalBorder ;
+    int new_y = m_y + MacGetTopBorderSize() + m_macVerticalBorder ;
+    int new_width = m_width - MacGetLeftBorderSize() - MacGetRightBorderSize() - 2 * m_macHorizontalBorder ;
+    int new_height = m_height - MacGetTopBorderSize() - MacGetBottomBorderSize() - 2 * m_macVerticalBorder ;
+    
+    GetParent()->MacWindowToRootWindow( & new_x , & new_y ) ;
+    bool doMove = new_x != oldBounds.left || new_y != oldBounds.top ;
+    bool doResize =  ( oldBounds.right - oldBounds.left ) != new_width || (oldBounds.bottom - oldBounds.top ) != new_height ;
+    if ( doMove || doResize )
+    {
+        InvalWindowRect( rootwindow, &oldBounds ) ;
+        if ( doMove )
+        {
+            UMAMoveControl( (ControlHandle) m_macControl , new_x , new_y ) ;
+        }
+        if ( doResize )
+        {
+            UMASizeControl( (ControlHandle) m_macControl , new_width , new_height ) ;
+        }
+    }
+}
+
 void wxWindowMac::SetFocus()
 {
@@ -243,5 +548,5 @@
 #endif // wxUSE_CARET
 #ifndef __WXUNIVERSAL__
-            wxControl* control = wxDynamicCast( gFocusWindow , wxControl ) ;
+            wxWindow* control = wxDynamicCast( gFocusWindow , wxWindow ) ;
             if ( control && control->GetMacControl() )
             {
@@ -296,4 +601,12 @@
     MacSuperEnabled( enable ) ;
 
+    if ( (ControlHandle) m_macControl )
+    {
+        if ( enable )
+            UMAActivateControl( (ControlHandle) m_macControl ) ;
+        else
+            UMADeactivateControl( (ControlHandle) m_macControl ) ;
+    }
+	
     return TRUE;
 }
@@ -689,4 +1002,55 @@
 }
 
+wxSize wxWindowMac::DoGetBestSize() const
+{
+	if ( !(ControlHandle)m_macControl)
+		return wxWindowBase::DoGetBestSize();
+		
+    Rect    bestsize = { 0 , 0 , 0 , 0 } ;
+    short   baselineoffset ;
+    int bestWidth, bestHeight ;
+    ::GetBestControlRect( (ControlHandle) m_macControl , &bestsize , &baselineoffset ) ;
+
+    if ( EmptyRect( &bestsize ) )
+    {
+        baselineoffset = 0;
+        bestsize.left = bestsize.top = 0 ;
+        bestsize.right = 16 ;
+        bestsize.bottom = 16 ;
+        if ( IsKindOf( CLASSINFO( wxScrollBar ) ) )
+        {
+            bestsize.bottom = 16 ;
+        }
+        else if ( IsKindOf( CLASSINFO( wxSpinButton ) ) )
+        {
+            bestsize.bottom = 24 ; 
+        }
+    }
+
+    if ( IsKindOf( CLASSINFO( wxButton ) ) )
+    {
+        bestWidth = m_label.Length() * 8 + 12 ;
+        if ( bestWidth < 70 )
+          bestWidth = 70 ;
+    }
+    else if ( IsKindOf( CLASSINFO( wxStaticText ) ) )
+    {
+        bestWidth = m_label.Length() * 8 ;
+    }
+    else
+        bestWidth = bestsize.right - bestsize.left ;
+        
+    bestWidth += 2 * m_macHorizontalBorder ;
+
+    bestHeight = bestsize.bottom - bestsize.top ;
+    if ( bestHeight < 10 )
+        bestHeight = 13 ;
+
+    bestHeight += 2 * m_macVerticalBorder;
+
+        
+    return wxSize(bestWidth, bestHeight);
+}
+
 // set the size of the window: if the dimensions are positive, just use them,
 // but if any of them is equal to -1, it means that we must find the value for
@@ -789,4 +1153,24 @@
 void wxWindowMac::MacSuperShown( bool show )
 {
+    if ( (ControlHandle) m_macControl )
+    {
+        if ( !show )
+        {
+            if ( m_macControlIsShown )
+            {
+                ::UMAHideControl( (ControlHandle) m_macControl ) ;
+                m_macControlIsShown = false ;
+            }
+        }
+        else
+        {
+            if ( MacIsReallyShown() && !m_macControlIsShown )
+            {
+                ::UMAShowControl( (ControlHandle) m_macControl ) ;
+                m_macControlIsShown = true ;
+            }
+        }
+    }
+	
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -807,4 +1191,7 @@
       // the borders area
     }
+	if ( (ControlHandle) m_macControl)
+	    Refresh(FALSE) ;
+		
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -914,4 +1301,26 @@
 }
 
+void wxWindowMac::MacRedrawControl()
+{
+    if ( (ControlHandle) m_macControl && MacGetRootWindow() && m_macControlIsShown )
+    {
+        wxClientDC dc(this) ;
+        wxMacPortSetter helper(&dc) ;
+        wxMacWindowClipper clipper(this) ;
+        wxDC::MacSetupBackgroundForCurrentPort( MacGetBackgroundBrush() ) ;
+        UMADrawControl( (ControlHandle) m_macControl ) ;
+    }
+}
+
+void wxWindowMac::OnPaint(wxPaintEvent& event)
+{
+	//KO: Why did the original function draw even though the control wasn't shown?
+	//MacRedrawControl checks first.
+	if ( (ControlHandle) m_macControl)
+		MacRedrawControl();
+	else
+		event.Skip();
+}
+
 wxWindowMac *wxGetActiveWindow()
 {
@@ -1911,5 +2320,8 @@
 WXWidget wxWindowMac::MacGetContainerForEmbedding()
 {
-    return GetParent()->MacGetContainerForEmbedding() ;
+    if ( (ControlHandle) m_macControl )
+        return m_macControl ;
+	else //KO: for classic applications, do the same thing as before
+		return GetParent()->MacGetContainerForEmbedding();
 }
 
@@ -1917,5 +2329,7 @@
 {
     // only window-absolute structures have to be moved i.e. controls
-
+	if ( (ControlHandle) m_macControl)
+		MacUpdateDimensions() ;
+		
     wxWindowListNode *node = GetChildren().GetFirst();
     while ( node )
@@ -2028,4 +2442,55 @@
             event.Skip() ;
 	}
+	else if (event.GetEventType() == wxEVT_LEFT_DOWN || event.GetEventType() == wxEVT_LEFT_DCLICK )
+    {
+		if ( (ControlHandle) m_macControl == NULL )
+		{
+			event.Skip() ;
+			return ;
+		}
+            
+        int x = event.m_x ;
+        int y = event.m_y ;
+        
+        MacClientToRootWindow( &x , &y ) ;
+            
+        ControlHandle   control ;
+        Point       localwhere ;
+        SInt16      controlpart ;
+        
+        localwhere.h = x ;
+        localwhere.v = y ;
+    
+        short modifiers = 0;
+        
+        if ( !event.m_leftDown && !event.m_rightDown )
+            modifiers  |= btnState ;
+    
+        if ( event.m_shiftDown )
+            modifiers |= shiftKey ;
+            
+        if ( event.m_controlDown )
+            modifiers |= controlKey ;
+    
+        if ( event.m_altDown )
+            modifiers |= optionKey ;
+    
+        if ( event.m_metaDown )
+            modifiers |= cmdKey ;
+        {
+            control = (ControlHandle) m_macControl ;
+            if ( control && ::IsControlActive( control ) )
+            {
+                {
+                    controlpart = ::HandleControlClick( control , localwhere , modifiers , (ControlActionUPP) -1 ) ;
+                    wxTheApp->s_lastMouseDown = 0 ;
+                    if ( control && controlpart != kControlNoPart ) 
+                    {
+                        MacHandleControlClick( control , controlpart , false /* mouse not down anymore */ ) ;
+                    }
+                }
+            }
+        }
+    }
 	else
 	{
@@ -2033,3 +2498,9 @@
 	}
 }
+
+void wxWindowMac::MacHandleControlClick( WXWidget control , wxInt16 controlpart , bool WXUNUSED( mouseStillDown ) ) 
+{
+    wxASSERT_MSG( (ControlHandle) m_macControl != NULL , wxT("No valid mac control") ) ;
+}
+
 

 	  	 

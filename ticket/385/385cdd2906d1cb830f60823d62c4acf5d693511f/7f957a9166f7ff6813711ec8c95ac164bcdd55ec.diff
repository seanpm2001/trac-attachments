Index: trunk/src/common/sizer.cpp
===================================================================
--- trunk/src/common/sizer.cpp	(revision 62674)
+++ trunk/src/common/sizer.cpp	(working copy)
@@ -44,6 +44,7 @@
 IMPLEMENT_CLASS(wxBoxSizer, wxSizer)
 #if wxUSE_STATBOX
 IMPLEMENT_CLASS(wxStaticBoxSizer, wxBoxSizer)
+IMPLEMENT_CLASS(wxStaticBoxGridSizer, wxGridSizer)
 #endif
 #if wxUSE_BUTTON
 IMPLEMENT_CLASS(wxStdDialogButtonSizer, wxBoxSizer)
@@ -2248,6 +2249,121 @@
 #endif // wxUSE_STATBOX
 
 //---------------------------------------------------------------------------
+// wxStaticBoxGridSizer
+//---------------------------------------------------------------------------
+
+#if wxUSE_STATBOX
+
+wxStaticBoxGridSizer::wxStaticBoxGridSizer(wxStaticBox* box, int rows, int cols, int vgap, int hgap)
+: wxGridSizer(rows, cols, wxSize(vgap, hgap)),
+m_staticBox( box )
+{
+    wxASSERT_MSG( box, wxT("wxStaticBoxGridSizer needs a static box") );
+
+    // do this so that our Detach() is called if the static box is destroyed
+    // before we are
+    m_staticBox->SetContainingSizer(this);
+}
+
+wxStaticBoxGridSizer::wxStaticBoxGridSizer(wxWindow *parent, const wxString& label, int rows, int cols, int vgap, int hgap)
+: wxGridSizer(rows, cols, wxSize(vgap, hgap)),
+m_staticBox(new wxStaticBox(parent, wxID_ANY, label))
+{
+    // same as above
+    m_staticBox->SetContainingSizer(this);
+}
+
+wxStaticBoxGridSizer::~wxStaticBoxGridSizer()
+{
+    delete m_staticBox;
+}
+
+void wxStaticBoxGridSizer::RecalcSizes()
+{
+    int top_border, other_border;
+    m_staticBox->GetBordersForSizer(&top_border, &other_border);
+
+    m_staticBox->SetSize( m_position.x, m_position.y, m_size.x, m_size.y );
+
+    wxSize old_size( m_size );
+    m_size.x -= 2*other_border;
+    m_size.y -= top_border + other_border;
+
+    wxPoint old_pos( m_position );
+    if (m_staticBox->GetChildren().GetCount() > 0)
+    {
+#if defined( __WXGTK20__ )
+        // if the wxStaticBox has created a wxPizza to contain its children
+        // (see wxStaticBox::AddChild) then we need to place the items it contains
+        // in the wxGridSizer::RecalcSizes() call below using coordinates relative
+        // to the top-left corner of the staticbox:
+        m_position.x = m_position.y = 0;
+#else
+        // if the wxStaticBox has childrens, then these windows must be placed
+        // by the wxGridSizer::RecalcSizes() call below using coordinates relative
+        // to the top-left corner of the staticbox (but unlike wxGTK, we need
+        // to keep in count the static borders here!):
+        m_position.x = other_border;
+        m_position.y = top_border;
+#endif
+    }
+    else
+    {
+        // the windows contained in the staticbox have been created as siblings of the
+        // staticbox (this is the "old" way of staticbox contents creation); in this
+        // case we need to position them with coordinates relative to our common parent
+        m_position.x += other_border;
+        m_position.y += top_border;
+    }
+
+    wxGridSizer::RecalcSizes();
+
+    m_position = old_pos;
+    m_size = old_size;
+}
+
+wxSize wxStaticBoxGridSizer::CalcMin()
+{
+    int top_border, other_border;
+    m_staticBox->GetBordersForSizer(&top_border, &other_border);
+
+    wxSize ret( wxGridSizer::CalcMin() );
+    ret.x += 2*other_border;
+
+    // ensure that we're wide enough to show the static box label (there is no
+    // need to check for the static box best size in vertical direction though)
+    const int boxWidth = m_staticBox->GetBestSize().x;
+    if ( ret.x < boxWidth )
+        ret.x = boxWidth;
+
+    ret.y += other_border + top_border;
+
+    return ret;
+}
+
+void wxStaticBoxGridSizer::ShowItems( bool show )
+{
+    m_staticBox->Show( show );
+    wxGridSizer::ShowItems( show );
+}
+
+bool wxStaticBoxGridSizer::Detach( wxWindow *window )
+{
+    // avoid deleting m_staticBox in our dtor if it's being detached from the
+    // sizer (which can happen because it's being already destroyed for
+    // example)
+    if ( window == m_staticBox )
+    {
+        m_staticBox = NULL;
+        return true;
+    }
+
+    return wxSizer::Detach( window );
+}
+
+#endif // wxUSE_STATBOX
+
+//---------------------------------------------------------------------------
 // wxStdDialogButtonSizer
 //---------------------------------------------------------------------------
 
Index: trunk/docs/doxygen/overviews/sizer.h
===================================================================
--- trunk/docs/doxygen/overviews/sizer.h	(revision 62674)
+++ trunk/docs/doxygen/overviews/sizer.h	(working copy)
@@ -10,8 +10,8 @@
 
 @page overview_sizer Sizers Overview
 
-Classes: wxSizer, wxBoxSizer, wxStaticBoxSizer, wxGridSizer, wxFlexGridSizer,
-         wxGridBagSizer
+Classes: wxSizer, wxBoxSizer, wxStaticBoxSizer, wxGridSizer, wxStaticBoxGridSizer,
+         wxFlexGridSizer, wxGridBagSizer
 
 Sizers, as represented by the wxSizer class and its descendants in the
 wxWidgets class hierarchy, have become the method of choice to define the
@@ -177,7 +177,8 @@
 
 @image html overview_sizer_10.png
 
-For programming information, see wxGridSizer.
+For programming information, see wxGridSizer. As with wxBoxSizer, there is a matching
+static box sizer, wxStaticBoxGridSizer.
 
 @subsection overview_sizer_hiding_flexgrid wxFlexGridSizer
 
@@ -332,13 +333,16 @@
 width of the widest child, the height of each field is the height of the
 tallest child.
 
+wxStaticBoxGridSizer is a sizer derived from wxGridSizer but adds a static box
+around the sizer.
+
 wxFlexGridSizer is a sizer which lays out its children in a two-dimensional
 table with all table fields in one row having the same height and all fields in
 one column having the same width, but all rows or all columns are not
 necessarily the same height or width as in the wxGridSizer.
 
 wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box
-around the sizer. Note that this static box has to be created separately.
+around the sizer.
 
 wxGridBagSizer is a rather special kind of sizer which, unlike the other
 classes, allows to directly put the elements at the given position in the
Index: trunk/include/wx/statbox.h
===================================================================
--- trunk/include/wx/statbox.h	(revision 62674)
+++ trunk/include/wx/statbox.h	(working copy)
@@ -33,8 +33,8 @@
     virtual bool AcceptsFocus() const { return false; }
     virtual bool HasTransparentBackground() { return true; }
 
-    // implementation only: this is used by wxStaticBoxSizer to account for the
-    // need for extra space taken by the static box
+    // implementation only: this is used by wxStaticBoxSizer and wxStaticBoxGridSizer
+    // to account for the need for extra space taken by the static box
     //
     // the top border is the margin at the top (where the title is),
     // borderOther is the margin on all other sides
Index: trunk/include/wx/sizer.h
===================================================================
--- trunk/include/wx/sizer.h	(revision 62674)
+++ trunk/include/wx/sizer.h	(working copy)
@@ -805,6 +805,44 @@
 };
 
 //---------------------------------------------------------------------------
+// wxStaticBoxGridSizer
+//---------------------------------------------------------------------------
+
+#if wxUSE_STATBOX
+
+class WXDLLIMPEXP_FWD_CORE wxStaticBox;
+
+class WXDLLIMPEXP_CORE wxStaticBoxGridSizer: public wxGridSizer
+{
+public:
+    wxStaticBoxGridSizer(wxStaticBox* box, int rows, int cols, int vgap, int hgap);
+    wxStaticBoxGridSizer(wxWindow *parent, const wxString& label, int rows, int cols, int vgap, int hgap);
+    virtual ~wxStaticBoxGridSizer();
+
+    void RecalcSizes();
+    wxSize CalcMin();
+
+    wxStaticBox *GetStaticBox() const
+	    { return m_staticBox; }
+
+    // override to hide/show the static box as well
+    virtual void ShowItems (bool show);
+
+    virtual bool Detach( wxWindow *window );
+    virtual bool Detach( wxSizer *sizer ) { return wxGridSizer::Detach(sizer); }
+    virtual bool Detach( int index ) { return wxGridSizer::Detach(index); }
+
+protected:
+    wxStaticBox   *m_staticBox;
+
+private:
+    DECLARE_CLASS(wxStaticBoxGridSizer)
+    wxDECLARE_NO_COPY_CLASS(wxStaticBoxGridSizer);
+};
+
+#endif // wxUSE_STATBOX
+
+//---------------------------------------------------------------------------
 // wxFlexGridSizer
 //---------------------------------------------------------------------------
 
@@ -1005,7 +1043,7 @@
     wxSize CalcMin();
 
     wxStaticBox *GetStaticBox() const
-        { return m_staticBox; }
+    { return m_staticBox; }
 
     // override to hide/show the static box as well
     virtual void ShowItems (bool show);
Index: trunk/interface/wx/sizer.h
===================================================================
--- trunk/interface/wx/sizer.h	(revision 62674)
+++ trunk/interface/wx/sizer.h	(working copy)
@@ -13,7 +13,7 @@
     wxSizer is the abstract base class used for laying out subwindows in a window.
     You cannot use wxSizer directly; instead, you will have to use one of the sizer
     classes derived from it. Currently there are wxBoxSizer, wxStaticBoxSizer,
-    wxGridSizer, wxFlexGridSizer, wxWrapSizer and wxGridBagSizer.
+    wxGridSizer, wxStaticBoxGridSizer, wxFlexGridSizer, wxWrapSizer and wxGridBagSizer.
 
     The layout algorithm used by sizers in wxWidgets is closely related to layout
     in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit.
@@ -1566,6 +1566,65 @@
 
 
 /**
+    @class wxStaticBoxGridSizer
+
+    wxStaticBoxGridSizer is a sizer derived from wxGridSizer but adds a static box around
+    the sizer.
+
+    The static box may be either created independently or the sizer may create it
+    itself as a convenience. In any case, the sizer owns the wxStaticBox control
+    and will delete it in the wxStaticBoxGridSizer destructor.
+
+    Note that since wxWidgets 2.9.1 you are encouraged to create the windows
+    which are added to wxStaticBoxGridSizer as children of wxStaticBox itself, see
+    this class documentation for more details.
+
+    Example of use of this class:
+    @code
+        void MyFrame::CreateControls()
+        {
+            wxPanel *panel = new wxPanel(this);
+            ...
+            wxStaticBoxGridSizer *sz = new wxStaticBoxGridSizer(panel, "Box", 1, 1, 0, 0);
+            sz->Add(new wxStaticText(sz->GetStaticBox(), wxID_ANY,
+                                     "This window is a child of the staticbox"));
+            ...
+        }
+    @endcode
+
+    @since 2.9.1
+
+    @library{wxcore}
+    @category{winlayout}
+
+    @see wxSizer, wxStaticBox, wxGridSizer, @ref overview_sizer
+*/
+class wxStaticBoxGridSizer : public wxGridSizer
+{
+public:
+    /**
+        This constructor uses an already existing static box.
+
+        @param box
+            The static box to associate with the sizer (which will take its
+            ownership).
+    */
+    wxStaticBoxGridSizer(wxStaticBox* box, int rows, int cols, int vgap, int hgap);
+
+    /**
+        This constructor creates a new static box with the given label and parent window.
+    */
+    wxStaticBoxGridSizer(wxWindow *parent, const wxString& label, int rows, int cols, int vgap, int hgap);
+
+    /**
+        Returns the static box associated with the sizer.
+    */
+    wxStaticBox* GetStaticBox() const;
+};
+
+
+
+/**
     @class wxGridSizer
 
     A grid sizer is a sizer which lays out its children in a two-dimensional

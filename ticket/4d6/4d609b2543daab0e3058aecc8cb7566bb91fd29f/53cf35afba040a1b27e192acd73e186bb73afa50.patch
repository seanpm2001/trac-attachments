Index: interface/wx/hyperlink.h
===================================================================
--- interface/wx/hyperlink.h	(revision 63977)
+++ interface/wx/hyperlink.h	(working copy)
@@ -91,7 +91,7 @@
     /**
         Constructor. See Create() for more info.
     */
-    wxHyperLinkCtrl(wxWindow* parent, wxWindowID id,
+    wxHyperlinkCtrl(wxWindow* parent, wxWindowID id,
                     const wxString& label,
                     const wxString& url,
                     const wxPoint& pos = wxDefaultPosition,
Index: interface/wx/listctrl.h
===================================================================
--- interface/wx/listctrl.h	(revision 63977)
+++ interface/wx/listctrl.h	(working copy)
@@ -19,7 +19,7 @@
     and attributes) is managed by the main program and is requested by the control
     itself only when needed which allows to have controls with millions of items
     without consuming much memory. To use virtual list control you must use
-    wxListCtrl::SetItemCount first and overload at least wxListCtrl::OnGetItemText
+    wxListCtrl::SetItemCount first and override at least wxListCtrl::OnGetItemText
     (and optionally wxListCtrl::OnGetItemImage or wxListCtrl::OnGetItemColumnImage and
     wxListCtrl::OnGetItemAttr) to return the information about the items when the
     control requests it.
@@ -923,7 +923,7 @@
 protected:
 
     /**
-        This function may be overloaded in the derived class for a control with
+        This function may be overridden in the derived class for a control with
         @c wxLC_VIRTUAL style. It should return the attribute for the specified
         @c item or @NULL to use the default appearance parameters.
 
@@ -955,7 +955,7 @@
     virtual wxListItemAttr* OnGetItemColumnAttr(long item, long column) const;
 
     /**
-        Overload this function in the derived class for a control with
+        Override this function in the derived class for a control with
         @c wxLC_VIRTUAL and @c wxLC_REPORT styles in order to specify the image
         index for the given line and column.
 
@@ -968,9 +968,9 @@
     virtual int OnGetItemColumnImage(long item, long column) const;
 
     /**
-        This function must be overloaded in the derived class for a control with
+        This function must be overridden in the derived class for a control with
         @c wxLC_VIRTUAL style having an "image list" (see SetImageList(); if the
-        control doesn't have an image list, it is not necessary to overload it).
+        control doesn't have an image list, it is not necessary to override it).
         It should return the index of the items image in the controls image list
         or -1 for no image.
 
@@ -984,7 +984,7 @@
     virtual int OnGetItemImage(long item) const;
 
     /**
-        This function @b must be overloaded in the derived class for a control with
+        This function @b must be overridden in the derived class for a control with
         @c wxLC_VIRTUAL style. It should return the string containing the text of
         the given @a column for the specified @c item.
 
Index: interface/wx/window.h
===================================================================
--- interface/wx/window.h	(revision 63977)
+++ interface/wx/window.h	(working copy)
@@ -767,7 +767,7 @@
         wxPanel), the size returned by this function will be the same as the size
         the window would have had after calling Fit().
 
-        Note that when you write your own widget you need to overload the
+        Note that when you write your own widget you need to override the
         DoGetBestSize() function instead of this (non-virtual!) function.
 
         @see CacheBestSize(), @ref overview_windowsizing
@@ -971,12 +971,12 @@
 
         @see @ref overview_windowsizing
     */
-    virtual void SetClientSize(int width, int height);
+    void SetClientSize(int width, int height);
 
     /**
         @overload
     */
-    virtual void SetClientSize(const wxSize& size);
+    void SetClientSize(const wxSize& size);
 
     /**
         This normally does not need to be called by user code.
@@ -1114,17 +1114,17 @@
 
         @see Move(), @ref overview_windowsizing
     */
-    virtual void SetSize(const wxRect& rect);
+    void SetSize(const wxRect& rect);
 
     /**
         @overload
     */
-    virtual void SetSize(const wxSize& size);
+    void SetSize(const wxSize& size);
 
     /**
         @overload
     */
-    virtual void SetSize(int width, int height);
+    void SetSize(int width, int height);
 
     /**
         Use of this function for windows which are not toplevel windows
@@ -1172,7 +1172,7 @@
 
         @param direction
             Specifies the direction for the centring. May be wxHORIZONTAL, wxVERTICAL
-            or wxBOTH. It may also include wxCENTRE_ON_SCREEN flag
+            or wxBOTH. It may also include the wxCENTRE_ON_SCREEN flag
             if you want to centre the window on the entire screen and not on its
             parent window.
 
@@ -1198,7 +1198,22 @@
         @see wxTopLevelWindow::CentreOnScreen
     */
     void CentreOnParent(int direction = wxBOTH);
+
     /**
+        Centres the window.
+
+        @param direction
+            Specifies the direction for the centring. May be wxHORIZONTAL,
+            wxVERTICAL or wxBOTH. It may also include the wxCENTRE_ON_SCREEN
+            flag.
+
+        @remarks This function is not meant to be called directly by user code,
+                 but via Centre, Center, CentreOnParent, or CenterOnParent.
+                 This function can be overriden to fine-tune centring behaviour.
+    */
+    virtual void DoCentre(int direction);
+
+    /**
         This gets the position of the window in pixels, relative to the parent window
         for the child windows or relative to the display origin for the top level windows.
 

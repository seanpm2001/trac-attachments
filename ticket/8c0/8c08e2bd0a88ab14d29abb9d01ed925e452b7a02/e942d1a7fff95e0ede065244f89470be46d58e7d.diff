diff --git a/include/wx/richtext/richtextbuffer.h b/include/wx/richtext/richtextbuffer.h
index ce85bc5..761ed46 100644
--- a/include/wx/richtext/richtextbuffer.h
+++ b/include/wx/richtext/richtextbuffer.h
@@ -66,6 +66,7 @@
 #include "wx/cmdproc.h"
 #include "wx/txtstrm.h"
 #include "wx/variant.h"
+#include "wx/position.h"
 
 #if wxUSE_DATAOBJ
 #include "wx/dataobj.h"
@@ -5683,6 +5684,11 @@ public:
     */
     virtual bool GetCellRowColumnPosition(long pos, int& row, int& col) const;
 
+    /**
+        Returns the coordinates of the cell with keyboard focus, or (-1,-1) if none.
+    */    
+    virtual wxPosition GetFocusedCell() const;
+
 // Operations
 
     /**
diff --git a/interface/wx/richtext/richtextbuffer.h b/interface/wx/richtext/richtextbuffer.h
index 7a12ac6..7490004 100644
--- a/interface/wx/richtext/richtextbuffer.h
+++ b/interface/wx/richtext/richtextbuffer.h
@@ -5506,6 +5506,11 @@ public:
     */
     virtual bool GetCellRowColumnPosition(long pos, int& row, int& col) const;
 
+    /**
+        Returns the coordinates of the cell with keyboard focus, or (-1,-1) if none.
+    */    
+    virtual wxPosition GetFocusedCell() const;
+
 // Operations
 
     /**
diff --git a/src/richtext/richtextbuffer.cpp b/src/richtext/richtextbuffer.cpp
index d272acb..6a22179 100644
--- a/src/richtext/richtextbuffer.cpp
+++ b/src/richtext/richtextbuffer.cpp
@@ -10239,6 +10239,27 @@ bool wxRichTextTable::SetCellStyle(const wxRichTextSelection& selection, const w
     return true;
 }
 
+wxPosition wxRichTextTable::GetFocusedCell() const
+{
+    wxPosition position(-1, -1);
+    const wxRichTextObject* focus = GetBuffer()->GetRichTextCtrl()->GetFocusObject();
+
+    for (int row = 0; row < GetRowCount(); ++row)
+    {
+        for (int col = 0; col < GetColumnCount(); ++col)
+        {
+            if (GetCell(row, col) == focus)
+            {
+              position.SetRow(row);
+              position.SetCol(col);
+              return position;
+            }
+        }
+    }
+
+    return position;
+}
+
 bool wxRichTextTable::DeleteRows(int startRow, int noRows)
 {
     wxASSERT((startRow + noRows) <= m_rowCount);
@@ -10246,14 +10267,42 @@ bool wxRichTextTable::DeleteRows(int startRow, int noRows)
         return false;
 
     wxRichTextBuffer* buffer = GetBuffer();
+    wxRichTextCtrl* rtc = buffer->GetRichTextCtrl();
+
+    wxPosition position = GetFocusedCell();
+    int focusCol = position.GetCol();
+    int focusRow = position.GetRow();
+    if (focusRow >= startRow && focusRow < (startRow+noRows))
+    {
+        // Deleting a focused cell causes a segfault later when laying out, due to GetFocusedObject() returning an invalid object
+        if (m_rowCount > noRows)
+        {
+            if ((startRow + noRows) < m_rowCount)
+            {
+                // There are more rows after the one(s) to be deleted, so set focus in the first of them
+                rtc->SetFocusObject(GetCell(startRow + noRows, focusCol));
+            }
+            else
+            {
+                // Otherwise set focus in the preceding row
+                rtc->SetFocusObject(GetCell(startRow - 1, focusCol));
+            }
+        }
+        else
+        {
+            // All the rows are to be deleted, so try to set focus outside the table
+            rtc->SetFocusObject(buffer, true);
+        }
+    }
+
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (!rtc->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
         clone->SetParent(GetParent());
-        action = new wxRichTextAction(NULL, _("Delete row"), wxRICHTEXT_CHANGE_OBJECT, buffer, this, buffer->GetRichTextCtrl());
+        action = new wxRichTextAction(NULL, _("Delete row"), wxRICHTEXT_CHANGE_OBJECT, buffer, this, rtc);
         action->SetObject(this);
         action->SetPosition(GetRange().GetStart());
     }
@@ -10275,7 +10324,7 @@ bool wxRichTextTable::DeleteRows(int startRow, int noRows)
 
     m_rowCount = m_rowCount - noRows;
 
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (!rtc->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures
@@ -10292,14 +10341,42 @@ bool wxRichTextTable::DeleteColumns(int startCol, int noCols)
         return false;
 
     wxRichTextBuffer* buffer = GetBuffer();
+    wxRichTextCtrl* rtc = buffer->GetRichTextCtrl();
+
+    wxPosition position = GetFocusedCell();
+    int focusCol = position.GetCol();
+    int focusRow = position.GetRow();
+    if (focusCol >= startCol && focusCol < (startCol+noCols))
+    {
+        // Deleting a focused cell causes a segfault later when laying out, due to GetFocusedObject() returning an invalid object
+        if (m_colCount > noCols)
+        {
+            if ((startCol + noCols) < m_colCount)
+            {
+                // There are more columns after the one(s) to be deleted, so set focus in the first of them
+                rtc->SetFocusObject(GetCell(focusRow, startCol + noCols));
+            }
+            else
+            {
+                // Otherwise set focus in the preceding column
+                rtc->SetFocusObject(GetCell(focusRow, startCol - 1));
+            }
+        }
+        else
+        {
+            // All the columns are to be deleted, so try to set focus outside the table
+            rtc->SetFocusObject(buffer, true);
+        }
+    }
+
     wxRichTextAction* action = NULL;
     wxRichTextTable* clone = NULL;
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (!rtc->SuppressingUndo())
     {
         // Create a clone containing the current state of the table. It will be used to Undo the action
         clone = wxStaticCast(this->Clone(), wxRichTextTable);
         clone->SetParent(GetParent());
-        action = new wxRichTextAction(NULL, _("Delete column"), wxRICHTEXT_CHANGE_OBJECT, buffer, this, buffer->GetRichTextCtrl());
+        action = new wxRichTextAction(NULL, _("Delete column"), wxRICHTEXT_CHANGE_OBJECT, buffer, this, rtc);
         action->SetObject(this);
         action->SetPosition(GetRange().GetStart());
     }
@@ -10325,7 +10402,7 @@ bool wxRichTextTable::DeleteColumns(int startCol, int noCols)
         m_rowCount = 0;
     m_colCount = m_colCount - noCols;
 
-    if (!buffer->GetRichTextCtrl()->SuppressingUndo())
+    if (!rtc->SuppressingUndo())
     {
         buffer->SubmitAction(action);
         // Finally store the original-state clone; doing so earlier would cause various failures

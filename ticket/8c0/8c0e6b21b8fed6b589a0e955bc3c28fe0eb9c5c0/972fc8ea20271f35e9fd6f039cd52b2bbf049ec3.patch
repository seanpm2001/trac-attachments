Index: include/wx/msw/ole/activex.h
===================================================================
--- include/wx/msw/ole/activex.h	(revision 70008)
+++ include/wx/msw/ole/activex.h	(working copy)
@@ -28,6 +28,7 @@
 #include "wx/variant.h"
 
 class FrameSite;
+class wxIDocHostUIHandler;
 
 //---------------------------------------------------------------------------
 // MSW COM includes
@@ -169,6 +170,7 @@
     void OnSetFocus(wxFocusEvent&);
     void OnKillFocus(wxFocusEvent&);
     virtual bool MSWTranslateMessage(WXMSG* pMsg);
+    void SetExternalUIHandler(wxIDocHostUIHandler* handler);
 
 protected:
     friend class FrameSite;
@@ -191,6 +193,101 @@
     void CreateActiveX(REFIID, IUnknown*);
 };
 
+//---------------------------------------------------------------------------
+//
+//  wxIDocHostUIHandler
+//
+//---------------------------------------------------------------------------
+
+typedef enum _tagwxDOCHOSTUIFLAG
+{
+    DOCHOSTUIFLAG_DIALOG = 0x1,DOCHOSTUIFLAG_DISABLE_HELP_MENU = 0x2,DOCHOSTUIFLAG_NO3DBORDER = 0x4,DOCHOSTUIFLAG_SCROLL_NO = 0x8,
+    DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 0x10,DOCHOSTUIFLAG_OPENNEWWIN = 0x20,DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 0x40,
+    DOCHOSTUIFLAG_FLAT_SCROLLBAR = 0x80,DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 0x100,DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 0x200,
+    DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = 0x400,DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = 0x800,DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = 0x1000,
+    DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = 0x2000,DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = 0x4000,DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = 0x10000,
+    DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = 0x20000,DOCHOSTUIFLAG_THEME = 0x40000,DOCHOSTUIFLAG_NOTHEME = 0x80000,DOCHOSTUIFLAG_NOPICS = 0x100000,
+    DOCHOSTUIFLAG_NO3DOUTERBORDER = 0x200000,DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = 0x400000,DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = 0x800000,
+    DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = 0x1000000
+} DOCHOSTUIFLAG;
+
+typedef struct _tagwxDOCHOSTUIINFO
+{
+    ULONG cbSize;
+    DWORD dwFlags;
+    DWORD dwDoubleClick;
+    OLECHAR *pchHostCss;
+    OLECHAR *pchHostNS;
+} DOCHOSTUIINFO;
+
+//not required?
+//DEFINE_GUID(IID_IDocHostUIHandler, 0xbd3f23c0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);
+
+EXTERN_C const IID IID_IDocHostUIHandler;
+
+class wxIDocHostUIHandler : public IUnknown
+{
+public:
+    virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(
+        DWORD dwID,
+        POINT *ppt,
+        IUnknown *pcmdtReserved,
+        IDispatch *pdispReserved) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetHostInfo(
+        DOCHOSTUIINFO *pInfo) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ShowUI(
+        DWORD dwID,
+        IOleInPlaceActiveObject *pActiveObject,
+        IOleCommandTarget *pCommandTarget,
+        IOleInPlaceFrame *pFrame,
+        IOleInPlaceUIWindow *pDoc) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE HideUI(void) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE UpdateUI(void) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE EnableModeless(
+        BOOL fEnable) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE OnDocWindowActivate(
+        BOOL fActivate) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE OnFrameWindowActivate(
+        BOOL fActivate) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ResizeBorder(
+        LPCRECT prcBorder,
+        IOleInPlaceUIWindow *pUIWindow,
+        BOOL fRameWindow) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator(
+        LPMSG lpMsg,
+        const GUID *pguidCmdGroup,
+        DWORD nCmdID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetOptionKeyPath(
+        __out  LPOLESTR *pchKey,
+        DWORD dw) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetDropTarget(
+        IDropTarget *pDropTarget,
+        IDropTarget **ppDropTarget) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetExternal(
+        IDispatch **ppDispatch) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateUrl(
+        DWORD dwTranslate,
+        __in __nullterminated  OLECHAR *pchURLIn,
+        __out  OLECHAR **ppchURLOut) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE FilterDataObject(
+        IDataObject *pDO,
+        IDataObject **ppDORet) = 0;
+};
+
 ///\brief Store native event parameters.
 ///\detail Store OLE 'Invoke' parameters for event handlers that need to access them.
 /// These are the exact values for the event as they are passed to the wxActiveXContainer.
Index: interface/wx/msw/ole/activex.h
===================================================================
--- interface/wx/msw/ole/activex.h	(revision 69786)
+++ interface/wx/msw/ole/activex.h	(working copy)
@@ -267,7 +267,7 @@
     };
 
     wxIMPLEMENT_DYNAMIC_CLASS(wxPDFMediaBackend, wxMediaBackend);
-    
+
     // Put this in one of your existing source files and then create a wxMediaCtrl with
     wxMediaCtrl* mymediactrl = new wxMediaCtrl(this, "myfile.pdf", wxID_ANY,
                                             wxDefaultPosition, wxSize(300,300),
@@ -297,5 +297,13 @@
             Interface of ActiveX control.
     */
     wxActiveXContainer(wxWindow* parent, REFIID iid, IUnknown* pUnk);
+    /**
+        Sets the UI handler.
+
+        @param handler
+            Sets the UI handler for this container which is basically a
+            IDocHostUIHandler interface.
+    */
+    void SetExternalUIHandler(wxIDocHostUIHandler* handler);
 };
 
Index: src/msw/ole/activex.cpp
===================================================================
--- src/msw/ole/activex.cpp	(revision 70008)
+++ src/msw/ole/activex.cpp	(working copy)
@@ -223,9 +223,14 @@
         m_bAmbientAppearance = true;
 
         m_hDCBuffer = NULL;
+        m_docHostUIHandler = NULL;
         m_hWndParent = (HWND)win->GetHWND();
     }
     virtual ~FrameSite(){}
+    void SetExternalUIHandler(wxIDocHostUIHandler* handler)
+    {
+        m_docHostUIHandler = handler;
+    }
     //***************************IDispatch*****************************
     HRESULT STDMETHODCALLTYPE GetIDsOfNames(REFIID, OLECHAR ** ,
                                             unsigned int , LCID ,
@@ -633,9 +638,20 @@
         return S_OK;
     }
 
+    friend bool wxIDocHostUIHandlerInterface(FrameSite *self, REFIID iid, void **_interface, const char *&desc)
+    {
+        if (self->m_docHostUIHandler && IsEqualIID(iid, IID_IDocHostUIHandler))
+        {
+            *_interface = (IUnknown *) (wxIDocHostUIHandler *) self->m_docHostUIHandler;
+            desc = "IDocHostUIHandler";
+            return true;
+        }
+        return false;
+    }
 
 protected:
     wxActiveXContainer * m_window;
+    wxIDocHostUIHandler * m_docHostUIHandler;
 
     HDC m_hDCBuffer;
     HWND m_hWndParent;
@@ -670,6 +686,7 @@
     OLE_IINTERFACE(IOleDocumentSite)
     OLE_IINTERFACE(IAdviseSink)
     OLE_IINTERFACE(IOleControlSite)
+    OLE_INTERFACE_CUSTOM(wxIDocHostUIHandlerInterface)
 END_OLE_TABLE
 
 
@@ -1276,4 +1293,12 @@
     return wxWindow::MSWTranslateMessage(pMsg);
 }
 
+void wxActiveXContainer::SetExternalUIHandler(wxIDocHostUIHandler* handler)
+{
+    if(m_frameSite)
+    {
+        m_frameSite->SetExternalUIHandler(handler);
+    }
+}
+
 #endif // wxUSE_ACTIVEX

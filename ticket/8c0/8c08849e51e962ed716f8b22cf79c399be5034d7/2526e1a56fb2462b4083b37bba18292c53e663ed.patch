diff -rbu2 wxWindows.orig\include\wx\msw\ole\automtn.h wxWindows\include\wx\msw\ole\automtn.h
--- wxWindows.orig\include\wx\msw\ole\automtn.h	Sun Feb 07 12:10:02 1999
+++ wxWindows\include\wx\msw\ole\automtn.h	Fri Apr 19 17:53:04 2002
@@ -56,4 +56,5 @@
 	// Invoke a member function
 	wxVariant CallMethod(const wxString& method, int noArgs, wxVariant args[]);
+	wxVariant CallMethodArray(const wxString& method, int noArgs, const wxVariant **args);
 
 	// Convenience function
@@ -65,4 +66,5 @@
 	// Get/Put property
     wxVariant GetProperty(const wxString& property, int noArgs = 0, wxVariant args[] = (wxVariant*) NULL) const;
+	wxVariant GetPropertyArray(const wxString& property, int noArgs, const wxVariant **args) const;
 	wxVariant GetProperty(const wxString& property,
 		const wxVariant& arg1, const wxVariant& arg2 = wxNullVariant,
@@ -70,4 +72,5 @@
 		const wxVariant& arg5 = wxNullVariant, const wxVariant& arg6 = wxNullVariant);
 
+	 bool wxAutomationObject::PutPropertyArray(const wxString& property, int noArgs, const wxVariant **args);
     bool PutProperty(const wxString& property, int noArgs, wxVariant args[]) ;
 	bool PutProperty(const wxString& property,
@@ -81,8 +84,10 @@
 	// with it and letting the destructor call Release.
     WXIDISPATCH* GetDispatchProperty(const wxString& property, int noArgs, wxVariant args[]) const;
+    WXIDISPATCH* GetDispatchProperty(const wxString& property, int noArgs, const wxVariant **args) const;
 
 	// A way of initialising another wxAutomationObject with a dispatch object,
 	// without having to deal with nasty IDispatch pointers.
 	bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs = 0, wxVariant args[] = (wxVariant*) NULL) const;
+	bool GetObject(wxAutomationObject& obj, const wxString& property, int noArgs, const wxVariant **args) const;
 
 public:
Only in wxWindows\include\wx\msw\ole: automtn.~h
diff -rbu2 wxWindows.orig\src\msw\ole\automtn.cpp wxWindows\src\msw\ole\automtn.cpp
--- wxWindows.orig\src\msw\ole\automtn.cpp	Fri Jun 29 14:18:30 2001
+++ wxWindows\src\msw\ole\automtn.cpp	Fri Apr 19 17:52:10 2002
@@ -268,4 +268,14 @@
 }
 
+wxVariant wxAutomationObject::CallMethodArray(const wxString& member, int noArgs, const wxVariant **args)
+{
+	wxVariant retVariant;
+	if (!Invoke(member, DISPATCH_METHOD, retVariant, noArgs, NULL, args))
+	{
+		retVariant.MakeNull();
+	}
+	return retVariant;
+}
+
 wxVariant wxAutomationObject::CallMethod(const wxString& member,
 		const wxVariant& arg1, const wxVariant& arg2,
@@ -315,4 +325,13 @@
 
 // Get/Set property
+wxVariant wxAutomationObject::GetPropertyArray(const wxString& property, int noArgs, const wxVariant **args) const
+{
+	wxVariant retVariant;
+	if (!Invoke(property, DISPATCH_PROPERTYGET, retVariant, noArgs, NULL, args))
+	{
+		retVariant.MakeNull();
+	}
+	return retVariant;
+}
 wxVariant wxAutomationObject::GetProperty(const wxString& property, int noArgs, wxVariant args[]) const
 {
@@ -381,4 +400,14 @@
 }
 
+bool wxAutomationObject::PutPropertyArray(const wxString& property, int noArgs, const wxVariant **args)
+{
+	wxVariant retVariant;
+	if (!Invoke(property, DISPATCH_PROPERTYPUT, retVariant, noArgs, NULL, args))
+	{
+		return FALSE;
+	}
+	return TRUE;
+}
+
 bool wxAutomationObject::PutProperty(const wxString& property,
 		const wxVariant& arg1, const wxVariant& arg2,
@@ -443,4 +472,23 @@
 }
 
+// Uses DISPATCH_PROPERTYGET
+// and returns a dispatch pointer. The calling code should call Release
+// on the pointer, though this could be implicit by constructing an wxAutomationObject
+// with it and letting the destructor call Release.
+WXIDISPATCH* wxAutomationObject::GetDispatchProperty(const wxString& property, int noArgs, const wxVariant **args) const
+{
+	wxVariant retVariant;
+	if (Invoke(property, DISPATCH_PROPERTYGET, retVariant, noArgs, NULL, args))
+	{
+		if (retVariant.GetType() == wxT("void*"))
+		{
+			return (WXIDISPATCH*) retVariant.GetVoidPtr();
+		}
+	}
+
+	return (WXIDISPATCH*) NULL;
+}
+
+
 // A way of initialising another wxAutomationObject with a dispatch object
 bool wxAutomationObject::GetObject(wxAutomationObject& obj, const wxString& property, int noArgs, wxVariant args[]) const
@@ -456,4 +504,17 @@
 }
 
+// A way of initialising another wxAutomationObject with a dispatch object
+bool wxAutomationObject::GetObject(wxAutomationObject& obj, const wxString& property, int noArgs, const wxVariant **args) const
+{
+	WXIDISPATCH* dispatch = GetDispatchProperty(property, noArgs, args);
+	if (dispatch)
+	{
+		obj.SetDispatchPtr(dispatch);
+		return TRUE;
+	}
+	else
+		return FALSE;
+}
+
 // Get a dispatch pointer from the current object associated
 // with a class id
@@ -528,5 +589,10 @@
     wxString type(variant.GetType());
 
-    if (type == wxT("long"))
+		if (type == wxT("char"))
+		{
+			oleVariant.vt=VT_I1;			// Signed Char
+			oleVariant.cVal=variant.GetChar();
+		}
+    else if (type == wxT("long"))
     {
         oleVariant.vt = VT_I4;
Only in wxWindows\src\msw\ole: automtn.~cp

 	  	 

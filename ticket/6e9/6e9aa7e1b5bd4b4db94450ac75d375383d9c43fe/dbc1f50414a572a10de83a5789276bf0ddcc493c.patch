Index: wxWidgets-trunk/src/xrc/xmlres.cpp
===================================================================
--- wxWidgets-trunk/src/xrc/xmlres.cpp	(revision 61846)
+++ wxWidgets-trunk/src/xrc/xmlres.cpp	(working copy)
@@ -47,6 +47,7 @@
 #include "wx/imaglist.h"
 #include "wx/dir.h"
 #include "wx/xml/xml.h"
+#include "wx/xrc/xmlreshandler.h"
 
 
 class wxXmlResourceDataRecord
@@ -331,7 +332,7 @@
 }
 
 
-IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+IMPLEMENT_CLASS(wxXmlResourceHandlerImpl, wxObject)
 
 void wxXmlResource::AddHandler(wxXmlResourceHandler *handler)
 {
@@ -939,68 +940,16 @@
 
 
 
-wxXmlResourceHandler::wxXmlResourceHandler()
+wxXmlResourceHandlerImpl::wxXmlResourceHandlerImpl()
         : m_node(NULL), m_parent(NULL), m_instance(NULL),
           m_parentAsWindow(NULL)
-{}
-
-
-
-wxObject *wxXmlResourceHandler::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
 {
-    wxXmlNode *myNode = m_node;
-    wxString myClass = m_class;
-    wxObject *myParent = m_parent, *myInstance = m_instance;
-    wxWindow *myParentAW = m_parentAsWindow;
+}
 
-    m_instance = instance;
-    if (!m_instance && node->HasAttribute(wxT("subclass")) &&
-        !(m_resource->GetFlags() & wxXRC_NO_SUBCLASSING))
-    {
-        wxString subclass = node->GetAttribute(wxT("subclass"), wxEmptyString);
-        if (!subclass.empty())
-        {
-            for (wxXmlSubclassFactories::iterator i = wxXmlResource::ms_subclassFactories->begin();
-                 i != wxXmlResource::ms_subclassFactories->end(); ++i)
-            {
-                m_instance = (*i)->Create(subclass);
-                if (m_instance)
-                    break;
-            }
 
-            if (!m_instance)
-            {
-                wxString name = node->GetAttribute(wxT("name"), wxEmptyString);
-                ReportError
-                (
-                    node,
-                    wxString::Format
-                    (
-                        "subclass \"%s\" not found for resource \"%s\", not subclassing",
-                        subclass, name
-                    )
-                );
-            }
-        }
-    }
 
-    m_node = node;
-    m_class = node->GetAttribute(wxT("class"), wxEmptyString);
-    m_parent = parent;
-    m_parentAsWindow = wxDynamicCast(m_parent, wxWindow);
 
-    wxObject *returned = DoCreateResource();
-
-    m_node = myNode;
-    m_class = myClass;
-    m_parent = myParent; m_parentAsWindow = myParentAW;
-    m_instance = myInstance;
-
-    return returned;
-}
-
-
-void wxXmlResourceHandler::AddStyle(const wxString& name, int value)
+void wxXmlResourceHandlerImpl::AddStyle(const wxString& name, int value)
 {
     m_styleNames.Add(name);
     m_styleValues.Add(value);
@@ -1008,7 +957,7 @@
 
 
 
-void wxXmlResourceHandler::AddWindowStyles()
+void wxXmlResourceHandlerImpl::AddWindowStyles()
 {
     XRC_ADD_STYLE(wxCLIP_CHILDREN);
 
@@ -1032,13 +981,13 @@
 
 
 
-bool wxXmlResourceHandler::HasParam(const wxString& param)
+bool wxXmlResourceHandlerImpl::HasParam(const wxString& param)
 {
     return (GetParamNode(param) != NULL);
 }
 
 
-int wxXmlResourceHandler::GetStyle(const wxString& param, int defaults)
+int wxXmlResourceHandlerImpl::GetStyle(const wxString& param, int defaults)
 {
     wxString s = GetParamValue(param);
 
@@ -1070,7 +1019,7 @@
 
 
 
-wxString wxXmlResourceHandler::GetText(const wxString& param, bool translate)
+wxString wxXmlResourceHandlerImpl::GetText(const wxString& param, bool translate)
 {
     wxXmlNode *parNode = GetParamNode(param);
     wxString str1(GetNodeContent(parNode));
@@ -1160,7 +1109,7 @@
 
 
 
-long wxXmlResourceHandler::GetLong(const wxString& param, long defaultv)
+long wxXmlResourceHandlerImpl::GetLong(const wxString& param, long defaultv)
 {
     long value;
     wxString str1 = GetParamValue(param);
@@ -1171,7 +1120,7 @@
     return value;
 }
 
-float wxXmlResourceHandler::GetFloat(const wxString& param, float defaultv)
+float wxXmlResourceHandlerImpl::GetFloat(const wxString& param, float defaultv)
 {
     wxString str = GetParamValue(param);
 
@@ -1193,27 +1142,27 @@
 }
 
 
-int wxXmlResourceHandler::GetID()
+int wxXmlResourceHandlerImpl::GetID()
 {
     return wxXmlResource::GetXRCID(GetName());
 }
 
 
 
-wxString wxXmlResourceHandler::GetName()
+wxString wxXmlResourceHandlerImpl::GetName()
 {
     return m_node->GetAttribute(wxT("name"), wxT("-1"));
 }
 
 
 
-bool wxXmlResourceHandler::GetBoolAttr(const wxString& attr, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBoolAttr(const wxString& attr, bool defaultv)
 {
     wxString v;
     return m_node->GetAttribute(attr, &v) ? v == '1' : defaultv;
 }
 
-bool wxXmlResourceHandler::GetBool(const wxString& param, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBool(const wxString& param, bool defaultv)
 {
     const wxString v = GetParamValue(param);
 
@@ -1270,7 +1219,7 @@
     return wxNullColour;
 }
 
-wxColour wxXmlResourceHandler::GetColour(const wxString& param, const wxColour& defaultv)
+wxColour wxXmlResourceHandlerImpl::GetColour(const wxString& param, const wxColour& defaultv)
 {
     wxString v = GetParamValue(param);
 
@@ -1330,7 +1279,7 @@
 
 } // anonymous namespace
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxString& param,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxString& param,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1351,7 +1300,7 @@
     return GetBitmap(node, defaultArtClient, size);
 }
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxXmlNode* node,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxXmlNode* node,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1401,7 +1350,7 @@
 }
 
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxString& param,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxString& param,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1419,7 +1368,7 @@
     return GetIcon(node, defaultArtClient, size);
 }
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxXmlNode* node,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxXmlNode* node,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1429,7 +1378,7 @@
 }
 
 
-wxIconBundle wxXmlResourceHandler::GetIconBundle(const wxString& param,
+wxIconBundle wxXmlResourceHandlerImpl::GetIconBundle(const wxString& param,
                                                  const wxArtClient& defaultArtClient)
 {
     wxString art_id, art_client;
@@ -1477,7 +1426,7 @@
 }
 
 
-wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+wxImageList *wxXmlResourceHandlerImpl::GetImageList(const wxString& param)
 {
     wxXmlNode * const imagelist_node = GetParamNode(param);
     if ( !imagelist_node )
@@ -1517,7 +1466,7 @@
     return imagelist;
 }
 
-wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
+wxXmlNode *wxXmlResourceHandlerImpl::GetParamNode(const wxString& param)
 {
     wxCHECK_MSG(m_node, NULL, wxT("You can't access handler data before it was initialized!"));
 
@@ -1540,14 +1489,14 @@
     return NULL;
 }
 
-bool wxXmlResourceHandler::IsOfClass(wxXmlNode *node, const wxString& classname)
+bool wxXmlResourceHandlerImpl::IsOfClass(wxXmlNode *node, const wxString& classname)
 {
     return node->GetAttribute(wxT("class"), wxEmptyString) == classname;
 }
 
 
 
-wxString wxXmlResourceHandler::GetNodeContent(const wxXmlNode *node)
+wxString wxXmlResourceHandlerImpl::GetNodeContent(const wxXmlNode *node)
 {
     const wxXmlNode *n = node;
     if (n == NULL) return wxEmptyString;
@@ -1565,7 +1514,7 @@
 
 
 
-wxString wxXmlResourceHandler::GetParamValue(const wxString& param)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxString& param)
 {
     if (param.empty())
         return GetNodeContent(m_node);
@@ -1573,13 +1522,13 @@
         return GetNodeContent(GetParamNode(param));
 }
 
-wxString wxXmlResourceHandler::GetParamValue(const wxXmlNode* node)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxXmlNode* node)
 {
     return GetNodeContent(node);
 }
 
 
-wxSize wxXmlResourceHandler::GetSize(const wxString& param,
+wxSize wxXmlResourceHandlerImpl::GetSize(const wxString& param,
                                      wxWindow *windowToUse)
 {
     wxString s = GetParamValue(param);
@@ -1627,7 +1576,7 @@
 
 
 
-wxPoint wxXmlResourceHandler::GetPosition(const wxString& param)
+wxPoint wxXmlResourceHandlerImpl::GetPosition(const wxString& param)
 {
     wxSize sz = GetSize(param);
     return wxPoint(sz.x, sz.y);
@@ -1635,7 +1584,7 @@
 
 
 
-wxCoord wxXmlResourceHandler::GetDimension(const wxString& param,
+wxCoord wxXmlResourceHandlerImpl::GetDimension(const wxString& param,
                                            wxCoord defaultv,
                                            wxWindow *windowToUse)
 {
@@ -1702,7 +1651,7 @@
     return wxNullFont;
 }
 
-wxFont wxXmlResourceHandler::GetFont(const wxString& param)
+wxFont wxXmlResourceHandlerImpl::GetFont(const wxString& param)
 {
     wxXmlNode *font_node = GetParamNode(param);
     if (font_node == NULL)
@@ -1841,7 +1790,7 @@
 }
 
 
-void wxXmlResourceHandler::SetupWindow(wxWindow *wnd)
+void wxXmlResourceHandlerImpl::SetupWindow(wxWindow *wnd)
 {
     //FIXME : add cursor
 
@@ -1877,52 +1826,23 @@
 }
 
 
-void wxXmlResourceHandler::CreateChildren(wxObject *parent, bool this_hnd_only)
-{
-    for ( wxXmlNode *n = m_node->GetChildren(); n; n = n->GetNext() )
-    {
-        if ( IsObjectNode(n) )
-        {
-            m_resource->CreateResFromNode(n, parent, NULL,
-                                          this_hnd_only ? this : NULL);
-        }
-    }
-}
 
-
-void wxXmlResourceHandler::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
-{
-    wxXmlNode *root;
-    if (rootnode == NULL) root = m_node; else root = rootnode;
-    wxXmlNode *n = root->GetChildren();
-
-    while (n)
-    {
-        if (n->GetType() == wxXML_ELEMENT_NODE && CanHandle(n))
-        {
-            CreateResource(n, parent, NULL);
-        }
-        n = n->GetNext();
-    }
-}
-
-
 //-----------------------------------------------------------------------------
 // errors reporting
 //-----------------------------------------------------------------------------
 
-void wxXmlResourceHandler::ReportError(const wxString& message)
+void wxXmlResourceHandlerImpl::ReportError(const wxString& message)
 {
     m_resource->ReportError(m_node, message);
 }
 
-void wxXmlResourceHandler::ReportError(wxXmlNode *context,
+void wxXmlResourceHandlerImpl::ReportError(wxXmlNode *context,
                                        const wxString& message)
 {
     m_resource->ReportError(context ? context : m_node, message);
 }
 
-void wxXmlResourceHandler::ReportParamError(const wxString& param,
+void wxXmlResourceHandlerImpl::ReportParamError(const wxString& param,
                                             const wxString& message)
 {
     m_resource->ReportError(GetParamNode(param), message);
Index: wxWidgets-trunk/src/xrc/xmlreshandler.cpp
===================================================================
--- wxWidgets-trunk/src/xrc/xmlreshandler.cpp	(revision 0)
+++ wxWidgets-trunk/src/xrc/xmlreshandler.cpp	(revision 0)
@@ -0,0 +1,100 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xmlreshandler.cpp
+// Purpose:     XRC resources
+// Author:      Steve Lamerton
+// Created:     2000/09/06
+// RCS-ID:      
+// Copyright:   (c) 2009 Steve Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#if wxUSE_XRC
+
+#include "xmlreshandler.h"
+
+IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+
+wxObject *wxXmlResourceHandler::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
+{
+    wxXmlNode *myNode = m_node;
+    wxString myClass = m_class;
+    wxObject *myParent = m_parent, *myInstance = m_instance;
+    wxWindow *myParentAW = m_parentAsWindow;
+
+    m_instance = instance;
+    if (!m_instance && node->HasAttribute(wxT("subclass")) &&
+        !(m_resource->GetFlags() & wxXRC_NO_SUBCLASSING))
+    {
+        wxString subclass = node->GetAttribute(wxT("subclass"), wxEmptyString);
+        if (!subclass.empty())
+        {
+            for (wxXmlSubclassFactories::iterator i = wxXmlResource::ms_subclassFactories->begin();
+                 i != wxXmlResource::ms_subclassFactories->end(); ++i)
+            {
+                m_instance = (*i)->Create(subclass);
+                if (m_instance)
+                    break;
+            }
+
+            if (!m_instance)
+            {
+                wxString name = node->GetAttribute(wxT("name"), wxEmptyString);
+                ReportError
+                (
+                    node,
+                    wxString::Format
+                    (
+                        "subclass \"%s\" not found for resource \"%s\", not subclassing",
+                        subclass, name
+                    )
+                );
+            }
+        }
+    }
+
+    m_node = node;
+    m_class = node->GetAttribute(wxT("class"), wxEmptyString);
+    m_parent = parent;
+    m_parentAsWindow = wxDynamicCast(m_parent, wxWindow);
+
+    wxObject *returned = GetHandler()->DoCreateResource();
+
+    m_node = myNode;
+    m_class = myClass;
+    m_parent = myParent; m_parentAsWindow = myParentAW;
+    m_instance = myInstance;
+
+    return returned;
+}
+
+
+void wxXmlResourceHandlerImpl::CreateChildren(wxObject *parent, bool this_hnd_only)
+{
+    for ( wxXmlNode *n = m_node->GetChildren(); n; n = n->GetNext() )
+    {
+        if ( IsObjectNode(n) )
+        {
+            m_resource->CreateResFromNode(n, parent, NULL,
+                                          this_hnd_only ? this->GetHandler() : NULL);
+        }
+    }
+}
+
+
+void wxXmlResourceHandlerImpl::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
+{
+    wxXmlNode *root;
+    if (rootnode == NULL) root = m_node; else root = rootnode;
+    wxXmlNode *n = root->GetChildren();
+
+    while (n)
+    {
+        if (n->GetType() == wxXML_ELEMENT_NODE && GetHandler()->CanHandle(n))
+        {
+            CreateResource(n, parent, NULL);
+        }
+        n = n->GetNext();
+    }
+}
+
+#endif 
Index: wxWidgets-trunk/include/wx/xrc/xmlreshandler.h
===================================================================
--- wxWidgets-trunk/include/wx/xrc/xmlreshandler.h	(revision 0)
+++ wxWidgets-trunk/include/wx/xrc/xmlreshandler.h	(revision 0)
@@ -0,0 +1,203 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xmlreshandler.h
+// Purpose:     XML resource handler
+// Author:      Steve Lamerton
+// Created:     2009/07/20
+// RCS-ID:      
+// Copyright:   (c) 2009 Steve Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XMLRESHANDLER_H_
+#define _WX_XMLRESHANDLER_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_XRC
+
+#include "wx/xrc/xmlres.h"
+
+class WXDLLIMPEXP_XRC wxXmlResourceHandler : public wxObject
+{
+DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+public:
+    // Constructor.
+    wxXmlResourceHandler()
+    {
+        impl = NULL;
+    }
+    
+
+    // Destructor.
+    virtual ~wxXmlResourceHandler() {}
+    
+    // This one is called from CreateResource after variables
+    // were filled.
+    virtual wxObject *DoCreateResource() = 0;
+
+    // Returns true if it understands this node and can create
+    // a resource from it, false otherwise.
+    virtual bool CanHandle(wxXmlNode *node) = 0;
+
+    // Creates an object (menu, dialog, control, ...) from an XML node.
+    // Should check for validity.
+    // parent is a higher-level object (usually window, dialog or panel)
+    // that is often necessary to create the resource.
+    // If instance is non-NULL it should not create a new instance via 'new' but
+    // should rather use this one, and call its Create method.
+    wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
+                             wxObject *instance);
+                             
+    // Creates children.
+    void CreateChildren(wxObject *parent, bool this_hnd_only = false);
+
+    // Helper function.
+    void CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode = NULL);
+
+    void SetParentResource(wxXmlResource *res)
+                           { GetImpl()->SetParentResource(res); }
+
+    void SetNode(wxXmlNode *node) { GetImpl()->SetNode(node); }
+    wxXmlNode *GetNode() { return GetImpl()->GetNode(); }
+    wxString GetClass() { return GetImpl()->GetClass(); }
+    wxObject *GetParent() { return GetImpl()->GetParent(); }
+    wxObject *GetInstance() { return GetImpl()->GetInstance(); }
+    wxWindow *GetParentAsWindow() { return GetImpl()->GetParentAsWindow(); }
+    wxXmlResource *GetResource() { return GetImpl()->GetResource(); }
+
+protected:
+    bool IsOfClass(wxXmlNode *node, const wxString& classname)
+        { return GetImpl()->IsOfClass(node, classname); }
+
+    wxString GetNodeContent(const wxXmlNode *node)
+        { return GetImpl()->GetNodeContent(node); }
+
+    bool HasParam(const wxString& param)
+        { return GetImpl()->HasParam(param); }
+
+    wxXmlNode *GetParamNode(const wxString& param)
+        { return GetImpl()->GetParamNode(param); }
+
+    wxString GetParamValue(const wxString& param)
+        { return GetImpl()->GetParamValue(param); };
+
+    wxString GetParamValue(const wxXmlNode* node)
+        { return GetImpl()->GetParamValue(node); }
+
+    void AddStyle(const wxString& name, int value)
+        { GetImpl()->AddStyle(name, value); }
+
+    void AddWindowStyles()
+        { GetImpl()->AddWindowStyles(); }
+
+    int GetStyle(const wxString& param = wxT("style"), int defaults = 0)
+        { return GetImpl()->GetStyle(param, defaults); }
+
+    wxString GetText(const wxString& param, bool translate = true)
+        { return GetImpl()->GetText(param, translate); }
+
+    int GetID()
+        { return GetImpl()->GetID(); }
+
+    wxString GetName()
+        { return GetImpl()->GetName(); }
+
+    bool GetBool(const wxString& param, bool defaultv = false)
+        { return GetImpl()->GetBool(param, defaultv); }
+
+    long GetLong(const wxString& param, long defaultv = 0)
+        { return GetImpl()->GetLong(param, defaultv); }
+
+    float GetFloat(const wxString& param, float defaultv = 0)
+        { return GetImpl()->GetFloat(param, defaultv); }
+
+    wxColour GetColour(const wxString& param, const wxColour& defaultv = wxNullColour)
+        { return GetImpl()->GetColour(param, defaultv); }
+
+    wxSize GetSize(const wxString& param = wxT("size"),
+                   wxWindow *windowToUse = NULL)
+        { return GetImpl()->GetSize(param, windowToUse); }
+
+    wxPoint GetPosition(const wxString& param = wxT("pos"))
+        { return GetImpl()->GetPosition(param); }
+
+    wxCoord GetDimension(const wxString& param, wxCoord defaultv = 0,
+                         wxWindow *windowToUse = NULL)
+        { return GetImpl()->GetDimension(param, defaultv, windowToUse); }
+
+    wxBitmap GetBitmap(const wxString& param = wxT("bitmap"),
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize)
+        { return GetImpl()->GetBitmap(param, defaultArtClient, size); }
+
+    wxBitmap GetBitmap(const wxXmlNode* node,
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize)
+        { return GetImpl()->GetBitmap(node, defaultArtClient, size); }
+
+    wxIcon GetIcon(const wxString& param = wxT("icon"),
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize)
+        { return GetImpl()->GetIcon(param, defaultArtClient, size); }
+
+    wxIcon GetIcon(const wxXmlNode* node,
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize)
+        { return GetImpl()->GetIcon(node, defaultArtClient, size); }
+
+    wxIconBundle GetIconBundle(const wxString& param,
+                               const wxArtClient& defaultArtClient = wxART_OTHER)
+        { return GetImpl()->GetIconBundle(param, defaultArtClient); }
+
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"))
+        { return GetImpl()->GetImageList(param); }
+
+#if wxUSE_ANIMATIONCTRL
+    wxAnimation GetAnimation(const wxString& param = wxT("animation"))
+        { return GetImpl()->GetAnimation(param); }
+#endif
+
+    wxFont GetFont(const wxString& param = wxT("font"))
+        { return GetImpl()->GetFont(param); }
+
+    bool GetBoolAttr(const wxString& attr, bool defaultv)
+        { return GetImpl()->GetBoolAttr(attr, defaultv); }
+
+    void SetupWindow(wxWindow *wnd)
+        { GetImpl()->SetupWindow(wnd); }
+
+    wxObject *CreateResFromNode(wxXmlNode *node,
+                                wxObject *parent, wxObject *instance = NULL)
+        { return impl->CreateResFromNode(node, parent, instance); }
+
+#if wxUSE_FILESYSTEM
+    wxFileSystem& GetCurFileSystem() { return impl->GetCurFileSystem(); }
+#endif
+
+    void ReportError(wxXmlNode *context, const wxString& message)
+        { return ReportError(context, message); }
+
+    void ReportError(const wxString& message)
+        { return impl->ReportError(message); }
+
+    void ReportParamError(const wxString& param, const wxString& message)
+        { return impl->ReportParamError(param, message); }
+    
+    wxXmlResourceHandlerImpl* GetImpl()
+    {
+        if(impl = NULL)
+        {
+            impl = new wxXmlResourceHandlerImpl();
+        }
+        return impl;
+    }
+
+private:
+
+    wxXmlResourceHandlerImpl *impl;
+};
+
+#endif
+
+#endif
+
Index: wxWidgets-trunk/include/wx/xrc/xmlres.h
===================================================================
--- wxWidgets-trunk/include/wx/xrc/xmlres.h	(revision 61846)
+++ wxWidgets-trunk/include/wx/xrc/xmlres.h	(working copy)
@@ -1,5 +1,5 @@
 /////////////////////////////////////////////////////////////////////////////
-// Name:        wx/xrc/xmlres.h
+// Name:        wx/xrc/xmlreshandler.h
 // Purpose:     XML resources
 // Author:      Vaclav Slavik
 // Created:     2000/03/05
@@ -42,9 +42,10 @@
 class WXDLLIMPEXP_FWD_CORE wxWindow;
 class WXDLLIMPEXP_FWD_CORE wxFrame;
 class WXDLLIMPEXP_FWD_CORE wxToolBar;
+class WXDLLIMPEXP_FWD_CORE wxXmlResourceHandler;
 
-class WXDLLIMPEXP_FWD_XRC wxXmlResourceHandler;
 class WXDLLIMPEXP_FWD_XRC wxXmlSubclassFactory;
+class wxXmlResourceHandlerImpl;
 class wxXmlSubclassFactories;
 class wxXmlResourceModule;
 class wxXmlResourceDataRecords;
@@ -340,7 +341,7 @@
     // domain to pass to translation functions, if any.
     wxString m_domain;
 
-    friend class wxXmlResourceHandler;
+    friend class wxXmlResourceHandlerImpl;
     friend class wxXmlResourceModule;
 
     static wxXmlSubclassFactories *ms_subclassFactories;
@@ -388,50 +389,30 @@
 #define XRCSIZERITEM(window, id) \
     ((window).GetSizer() ? (window).GetSizer()->GetItemById(XRCID(id)) : NULL)
 
-// wxXmlResourceHandler is an abstract base class for resource handlers
-// capable of creating a control from an XML node.
+// wxXmlResourceHandlerImplementation is the back end of the wxXmlResourceHander
+// class to allow the split between core and xrc
 
-class WXDLLIMPEXP_XRC wxXmlResourceHandler : public wxObject
+class WXDLLIMPEXP_XRC wxXmlResourceHandlerImpl : public wxObject
 {
-DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+DECLARE_CLASS(wxXmlResourceHandlerImpl)
 public:
     // Constructor.
-    wxXmlResourceHandler();
+    wxXmlResourceHandlerImpl();
 
     // Destructor.
-    virtual ~wxXmlResourceHandler() {}
+    virtual ~wxXmlResourceHandlerImpl() {}
 
-    // Creates an object (menu, dialog, control, ...) from an XML node.
-    // Should check for validity.
-    // parent is a higher-level object (usually window, dialog or panel)
-    // that is often necessary to create the resource.
-    // If instance is non-NULL it should not create a new instance via 'new' but
-    // should rather use this one, and call its Create method.
-    wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
-                             wxObject *instance);
-
-    // This one is called from CreateResource after variables
-    // were filled.
-    virtual wxObject *DoCreateResource() = 0;
-
-    // Returns true if it understands this node and can create
-    // a resource from it, false otherwise.
-    virtual bool CanHandle(wxXmlNode *node) = 0;
-
     // Sets the parent resource.
     void SetParentResource(wxXmlResource *res) { m_resource = res; }
+    
+    void SetNode(wxXmlNode *node) { m_node = node; }
+    wxXmlNode *GetNode() { return m_node; }
+    wxString GetClass() { return m_class; }
+    wxObject *GetParent() { return m_parent; }
+    wxObject *GetInstance() { return m_instance; }
+    wxWindow *GetParentAsWindow() { return m_parentAsWindow; }
+    wxXmlResource *GetResource() { return m_resource; }
 
-protected:
-    wxXmlResource *m_resource;
-    wxArrayString m_styleNames;
-    wxArrayInt m_styleValues;
-
-    // Variables (filled by CreateResource)
-    wxXmlNode *m_node;
-    wxString m_class;
-    wxObject *m_parent, *m_instance;
-    wxWindow *m_parentAsWindow;
-
     // --- Handy methods:
 
     // Returns true if the node has a property class equal to classname,
@@ -545,12 +526,6 @@
     // Sets common window options.
     void SetupWindow(wxWindow *wnd);
 
-    // Creates children.
-    void CreateChildren(wxObject *parent, bool this_hnd_only = false);
-
-    // Helper function.
-    void CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode = NULL);
-
     // Creates a resource from a node.
     wxObject *CreateResFromNode(wxXmlNode *node,
                                 wxObject *parent, wxObject *instance = NULL)
@@ -567,6 +542,21 @@
     void ReportError(const wxString& message);
     // reports input error when parsing parameter with given name
     void ReportParamError(const wxString& param, const wxString& message);
+    
+    wxXmlResourceHandler* GetHandler() { return m_handler; }
+
+private:
+
+    // Variables (filled by CreateResource)
+    wxXmlNode *m_node;
+    wxString m_class;
+    wxObject *m_parent, *m_instance;
+    wxWindow *m_parentAsWindow;  
+    
+    wxXmlResourceHandler *m_handler;
+    wxXmlResource *m_resource;
+    wxArrayString m_styleNames;
+    wxArrayInt m_styleValues;
 };
 
 
@@ -576,8 +566,8 @@
 
 #define XRC_MAKE_INSTANCE(variable, classname) \
    classname *variable = NULL; \
-   if (m_instance) \
-       variable = wxStaticCast(m_instance, classname); \
+   if (GetInstance()) \
+       variable = wxStaticCast(GetInstance(), classname); \
    if (!variable) \
        variable = new classname;
Index: wxWidgets-trunk/build/bakefiles/files.bkl
===================================================================
--- wxWidgets-trunk/build/bakefiles/files.bkl	(revision 61846)
+++ wxWidgets-trunk/build/bakefiles/files.bkl	(working copy)
@@ -747,6 +747,7 @@
     src/generic/treebkg.cpp
     src/generic/vlbox.cpp
     src/generic/vscroll.cpp
+    src/xrc/xmlreshandler.cpp
 </set>
 <set var="GUI_CMN_HDR" hints="files">
     wx/bmpbuttn.h
@@ -850,6 +851,7 @@
     wx/windowid.h
     wx/wrapsizer.h
     wx/wupdlock.h
+    wx/xrc/xmlreshandler.h
 
     wx/accel.h
     wx/access.h

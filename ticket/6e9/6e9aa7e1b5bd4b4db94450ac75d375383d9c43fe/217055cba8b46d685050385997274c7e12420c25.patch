Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 67364)
+++ build/bakefiles/files.bkl	(working copy)
@@ -807,6 +807,7 @@
     src/generic/treebkg.cpp
     src/generic/vlbox.cpp
     src/generic/vscroll.cpp
+    src/xrc/xmlreshandler.cpp
 </set>
 <set var="GUI_CMN_HDR" hints="files">
     wx/bmpbuttn.h
@@ -1026,6 +1027,7 @@
     wx/vscroll.h
     wx/xpmdecod.h
     wx/xpmhand.h
+    wx/xrc/xmlreshandler.h
 </set>
 
 <!-- ====================================================================== -->
@@ -3377,8 +3379,6 @@
     src/xrc/xh_propdlg.cpp
     src/xrc/xh_radbt.cpp
     src/xrc/xh_radbx.cpp
-    <!-- disabled until linking problems are fixed -->
-    <!-- src/xrc/xh_richtext.cpp -->
     src/xrc/xh_scrol.cpp
     src/xrc/xh_scwin.cpp
     src/xrc/xh_htmllbox.cpp
@@ -3445,7 +3445,6 @@
     wx/xrc/xh_propdlg.h
     wx/xrc/xh_radbt.h
     wx/xrc/xh_radbx.h
-    <!-- wx/xrc/xh_richtext.h -->
     wx/xrc/xh_scrol.h
     wx/xrc/xh_scwin.h
     wx/xrc/xh_htmllbox.h
@@ -3639,6 +3638,7 @@
     src/richtext/richtextstyledlg.cpp
     src/richtext/richtextprint.cpp
     src/richtext/richtextimagedlg.cpp
+    src/xrc/xh_richtext.cpp
 </set>
 <set var="RICHTEXT_HDR" hints="files">
     wx/richtext/richtextctrl.h
@@ -3651,6 +3651,7 @@
     wx/richtext/richtextstyledlg.h
     wx/richtext/richtextprint.h
     wx/richtext/richtextimagedlg.h
+    wx/xrc/xh_richtext.h
 </set>
 
 
Index: include/wx/xrc/xh_richtext.h
===================================================================
--- include/wx/xrc/xh_richtext.h	(revision 67364)
+++ include/wx/xrc/xh_richtext.h	(working copy)
@@ -15,7 +15,7 @@
 
 #if wxUSE_XRC && wxUSE_RICHTEXT
 
-class WXDLLIMPEXP_XRC wxRichTextCtrlXmlHandler : public wxXmlResourceHandler
+class WXDLLIMPEXP_RICHTEXT wxRichTextCtrlXmlHandler : public wxXmlResourceHandler
 {
     DECLARE_DYNAMIC_CLASS(wxRichTextCtrlXmlHandler)
 
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 67364)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -31,6 +31,8 @@
 
 #include "wx/xml/xml.h"
 
+#include "wx/xrc/xmlreshandler.h"
+
 class WXDLLIMPEXP_FWD_BASE wxFileName;
 
 class WXDLLIMPEXP_FWD_CORE wxIconBundle;
@@ -43,7 +45,6 @@
 class WXDLLIMPEXP_FWD_CORE wxFrame;
 class WXDLLIMPEXP_FWD_CORE wxToolBar;
 
-class WXDLLIMPEXP_FWD_XRC wxXmlResourceHandler;
 class WXDLLIMPEXP_FWD_XRC wxXmlSubclassFactory;
 class wxXmlSubclassFactories;
 class wxXmlResourceModule;
@@ -393,7 +394,7 @@
     // domain to pass to translation functions, if any.
     wxString m_domain;
 
-    friend class wxXmlResourceHandler;
+    friend class wxXmlResourceHandlerImpl;
     friend class wxXmlResourceModule;
     friend class wxIdRangeManager;
     friend class wxIdRange;
@@ -443,18 +444,19 @@
 #define XRCSIZERITEM(window, id) \
     ((window).GetSizer() ? (window).GetSizer()->GetItemById(XRCID(id)) : NULL)
 
-// wxXmlResourceHandler is an abstract base class for resource handlers
-// capable of creating a control from an XML node.
 
-class WXDLLIMPEXP_XRC wxXmlResourceHandler : public wxObject
+// wxXmlResourceHandlerImpl is the back-end of the wxXmlResourceHander
+// class to allow the split between core and xrc. 
+
+class WXDLLIMPEXP_XRC wxXmlResourceHandlerImpl : public wxXmlResourceHandlerImplBase
 {
-DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+DECLARE_DYNAMIC_CLASS(wxXmlResourceHandlerImpl)
 public:
     // Constructor.
-    wxXmlResourceHandler();
+    wxXmlResourceHandlerImpl(wxXmlResourceHandler *handler);
 
     // Destructor.
-    virtual ~wxXmlResourceHandler() {}
+    virtual ~wxXmlResourceHandlerImpl() {}
 
     // Creates an object (menu, dialog, control, ...) from an XML node.
     // Should check for validity.
@@ -464,34 +466,13 @@
     // should rather use this one, and call its Create method.
     wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
                              wxObject *instance);
+                             
 
-    // This one is called from CreateResource after variables
-    // were filled.
-    virtual wxObject *DoCreateResource() = 0;
-
-    // Returns true if it understands this node and can create
-    // a resource from it, false otherwise.
-    virtual bool CanHandle(wxXmlNode *node) = 0;
-
-    // Sets the parent resource.
-    void SetParentResource(wxXmlResource *res) { m_resource = res; }
-
-protected:
-    wxXmlResource *m_resource;
-    wxArrayString m_styleNames;
-    wxArrayInt m_styleValues;
-
-    // Variables (filled by CreateResource)
-    wxXmlNode *m_node;
-    wxString m_class;
-    wxObject *m_parent, *m_instance;
-    wxWindow *m_parentAsWindow;
-
     // --- Handy methods:
 
     // Returns true if the node has a property class equal to classname,
     // e.g. <object class="wxDialog">.
-    static bool IsOfClass(wxXmlNode *node, const wxString& classname);
+    bool IsOfClass(wxXmlNode *node, const wxString& classname) const;
 
     // Gets node content from wxXML_ENTITY_NODE
     // The problem is, <tag>content<tag> is represented as
@@ -512,13 +493,6 @@
     // Returns the parameter value from given node.
     wxString GetParamValue(const wxXmlNode* node);
 
-    // Add a style flag (e.g. wxMB_DOCKABLE) to the list of flags
-    // understood by this handler.
-    void AddStyle(const wxString& name, int value);
-
-    // Add styles common to all wxWindow-derived classes.
-    void AddWindowStyles();
-
     // Gets style flags from text in form "flag | flag2| flag3 |..."
     // Only understands flags added with AddStyle
     int GetStyle(const wxString& param = wxT("style"), int defaults = 0);
@@ -608,12 +582,11 @@
 
     // Creates a resource from a node.
     wxObject *CreateResFromNode(wxXmlNode *node,
-                                wxObject *parent, wxObject *instance = NULL)
-        { return m_resource->CreateResFromNode(node, parent, instance); }
+                                wxObject *parent, wxObject *instance = NULL);
 
     // helper
 #if wxUSE_FILESYSTEM
-    wxFileSystem& GetCurFileSystem() { return m_resource->GetCurFileSystem(); }
+    wxFileSystem& GetCurFileSystem();
 #endif
 
     // reports input error at position 'context'
Index: include/wx/xrc/xmlreshandler.h
===================================================================
--- include/wx/xrc/xmlreshandler.h	(revision 0)
+++ include/wx/xrc/xmlreshandler.h	(revision 0)
@@ -0,0 +1,216 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xmlreshandler.cpp
+// Purpose:     XML resource handler
+// Author:      Steven Lamerton
+// Created:     2011/01/26
+// RCS-ID:      
+// Copyright:   (c) 2011 Steven Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef _WX_XMLRESHANDLER_H_
+#define _WX_XMLRESHANDLER_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_XRC
+
+#include "wx/string.h"
+#include "wx/artprov.h"
+#include "wx/colour.h"
+#include "wx/animate.h"
+#include "wx/filesys.h"
+#include "wx/imaglist.h"
+
+class WXDLLIMPEXP_XML wxXmlNode;
+class WXDLLIMPEXP_XML wxXmlResource;
+
+class WXDLLIMPEXP_CORE wxXmlResourceHandlerImplBase;
+
+class WXDLLIMPEXP_CORE wxXmlResourceHandler : public wxObject
+{
+DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+public:
+    // Constructor.
+    wxXmlResourceHandler();
+
+    // Destructor.
+    ~wxXmlResourceHandler();
+    
+    // This one is called from CreateResource after variables
+    // were filled.
+    virtual wxObject *DoCreateResource() = 0;
+
+    // Returns true if it understands this node and can create
+    // a resource from it, false otherwise.
+    virtual bool CanHandle(wxXmlNode *node) = 0;
+
+    // Add a style flag (e.g. wxMB_DOCKABLE) to the list of flags
+    // understood by this handler.
+    void AddStyle(const wxString& name, int value);
+
+    // Add styles common to all wxWindow-derived classes.
+    void AddWindowStyles();
+
+    void SetParentResource(wxXmlResource *res);                    
+    void SetImpl(wxXmlResourceHandlerImplBase* impl);
+
+    void ReportError(wxXmlNode *context, const wxString& message);
+    void ReportError(const wxString& message);
+    void ReportParamError(const wxString& param, const wxString& message);
+
+    wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
+                             wxObject *instance);
+    bool IsOfClass(wxXmlNode *node, const wxString& classname) const;
+    wxString GetNodeContent(const wxXmlNode *node);
+    bool HasParam(const wxString& param);
+
+    //Various getters, see wxXmlResourceHandlerImpl for more details
+    wxXmlNode *GetParamNode(const wxString& param);
+    wxString GetParamValue(const wxString& param);
+    wxString GetParamValue(const wxXmlNode* node);
+    int GetStyle(const wxString& param = wxT("style"), int defaults = 0);
+    wxString GetText(const wxString& param, bool translate = true);
+    int GetID();
+    wxString GetName();
+    bool GetBool(const wxString& param, bool defaultv = false);
+    long GetLong(const wxString& param, long defaultv = 0);
+    float GetFloat(const wxString& param, float defaultv = 0);
+    wxColour GetColour(const wxString& param, 
+                       const wxColour& defaultv = wxNullColour);
+    wxSize GetSize(const wxString& param = wxT("size"),
+                   wxWindow *windowToUse = NULL);
+    wxPoint GetPosition(const wxString& param = wxT("pos"));
+    wxCoord GetDimension(const wxString& param, wxCoord defaultv = 0,
+                         wxWindow *windowToUse = NULL);
+    wxBitmap GetBitmap(const wxString& param = wxT("bitmap"),
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize);
+    wxBitmap GetBitmap(const wxXmlNode* node,
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize);
+    wxIcon GetIcon(const wxString& param = wxT("icon"),
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize);
+    wxIcon GetIcon(const wxXmlNode* node,
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize);
+    wxIconBundle GetIconBundle(const wxString& param,
+                               const wxArtClient& defaultArtClient = wxART_OTHER);
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"));
+
+#if wxUSE_ANIMATIONCTRL
+    wxAnimation GetAnimation(const wxString& param = wxT("animation"));
+#endif
+
+    wxFont GetFont(const wxString& param = wxT("font"));
+    bool GetBoolAttr(const wxString& attr, bool defaultv);
+    void SetupWindow(wxWindow *wnd);
+    void CreateChildren(wxObject *parent, bool this_hnd_only = false);
+    void CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode = NULL);
+    wxObject *CreateResFromNode(wxXmlNode *node,
+                                wxObject *parent, wxObject *instance = NULL);
+
+#if wxUSE_FILESYSTEM
+    wxFileSystem& GetCurFileSystem();
+#endif
+    
+    wxXmlResourceHandlerImplBase* GetImpl() const;
+
+public:
+    // Variables (filled by CreateResource)
+    wxXmlNode *m_node;
+    wxString m_class;
+    wxObject *m_parent, *m_instance;
+    wxWindow *m_parentAsWindow;  
+    wxXmlResource *m_resource;
+
+    wxArrayString m_styleNames;
+    wxArrayInt m_styleValues;
+
+private:
+    wxXmlResourceHandlerImplBase *m_impl;
+
+};
+
+//Abstract base class for wxXmlResourceHandlerImpl so we don't have any 
+//xrc dependancies in core
+class WXDLLIMPEXP_CORE wxXmlResourceHandlerImplBase : public wxObject
+{
+DECLARE_ABSTRACT_CLASS(wxXmlResourceHandlerImplBase)
+public:
+    // Constructor.
+    wxXmlResourceHandlerImplBase(wxXmlResourceHandler *handler) 
+                               : m_handler(handler)
+    {};
+
+    // Destructor.
+    virtual ~wxXmlResourceHandlerImplBase() {};
+
+    virtual wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
+                                     wxObject *instance) = 0;
+    virtual bool IsOfClass(wxXmlNode *node, const wxString& classname) const = 0;
+    virtual wxString GetNodeContent(const wxXmlNode *node) = 0;
+    virtual bool HasParam(const wxString& param) = 0;
+    virtual wxXmlNode *GetParamNode(const wxString& param) = 0;
+    virtual wxString GetParamValue(const wxString& param) = 0;
+    virtual wxString GetParamValue(const wxXmlNode* node) = 0;
+    virtual int GetStyle(const wxString& param = wxT("style"), int defaults = 0) = 0;
+    virtual wxString GetText(const wxString& param, bool translate = true) = 0;
+    virtual int GetID() = 0;
+    virtual wxString GetName() = 0;
+    virtual bool GetBool(const wxString& param, bool defaultv = false) = 0;
+    virtual long GetLong(const wxString& param, long defaultv = 0) = 0;
+    virtual float GetFloat(const wxString& param, float defaultv = 0) = 0;
+    virtual wxColour GetColour(const wxString& param, 
+                               const wxColour& defaultv = wxNullColour) = 0;
+    virtual wxSize GetSize(const wxString& param = wxT("size"), 
+                           wxWindow *windowToUse = NULL) = 0;
+    virtual wxPoint GetPosition(const wxString& param = wxT("pos")) = 0;
+    virtual wxCoord GetDimension(const wxString& param, wxCoord defaultv = 0,
+                                 wxWindow *windowToUse = NULL) = 0;
+    virtual wxBitmap GetBitmap(const wxString& param = wxT("bitmap"), 
+                               const wxArtClient& defaultArtClient = wxART_OTHER, 
+                               wxSize size = wxDefaultSize) = 0;
+    virtual wxBitmap GetBitmap(const wxXmlNode* node, 
+                               const wxArtClient& defaultArtClient = wxART_OTHER, 
+                               wxSize size = wxDefaultSize) = 0;
+    virtual wxIcon GetIcon(const wxString& param = wxT("icon"), 
+                           const wxArtClient& defaultArtClient = wxART_OTHER, 
+                           wxSize size = wxDefaultSize) = 0;
+    virtual wxIcon GetIcon(const wxXmlNode* node, 
+                           const wxArtClient& defaultArtClient = wxART_OTHER,
+                           wxSize size = wxDefaultSize) = 0;
+    virtual wxIconBundle GetIconBundle(const wxString& param, 
+                                       const wxArtClient& defaultArtClient = wxART_OTHER) = 0;
+    virtual wxImageList *GetImageList(const wxString& param = wxT("imagelist")) = 0;
+
+#if wxUSE_ANIMATIONCTRL
+    virtual wxAnimation GetAnimation(const wxString& param = wxT("animation")) = 0;
+#endif
+
+    virtual wxFont GetFont(const wxString& param = wxT("font")) = 0;
+    virtual bool GetBoolAttr(const wxString& attr, bool defaultv) = 0;
+    virtual void SetupWindow(wxWindow *wnd) = 0;
+    virtual void CreateChildren(wxObject *parent, bool this_hnd_only = false) = 0;
+    virtual void CreateChildrenPrivately(wxObject *parent, 
+                                         wxXmlNode *rootnode = NULL) = 0;
+    virtual wxObject *CreateResFromNode(wxXmlNode *node, wxObject *parent, 
+                                        wxObject *instance = NULL) = 0;
+
+#if wxUSE_FILESYSTEM
+    virtual wxFileSystem& GetCurFileSystem() = 0;
+#endif
+    virtual void ReportError(wxXmlNode *context, const wxString& message) = 0;
+    virtual void ReportError(const wxString& message) = 0;
+    virtual void ReportParamError(const wxString& param, const wxString& message) = 0;
+    
+    wxXmlResourceHandler* GetHandler() { return m_handler; }
+
+protected:   
+    wxXmlResourceHandler *m_handler;
+};
+#endif
+
+#endif
Index: src/xrc/xh_richtext.cpp
===================================================================
--- src/xrc/xh_richtext.cpp	(revision 67364)
+++ src/xrc/xh_richtext.cpp	(working copy)
@@ -15,10 +15,9 @@
     #pragma hdrstop
 #endif
 
-#if wxUSE_XRC && wxUSE_RICHTEXT && wxUSE_RICHTEXT_XML_HANDLER
+#if wxUSE_XRC && wxUSE_RICHTEXT
 
 #include "wx/xrc/xh_richtext.h"
-
 #include "wx/richtext/richtextctrl.h"
 
 IMPLEMENT_DYNAMIC_CLASS(wxRichTextCtrlXmlHandler, wxXmlResourceHandler)
Index: src/xrc/xmladv.cpp
===================================================================
--- src/xrc/xmladv.cpp	(revision 67364)
+++ src/xrc/xmladv.cpp	(working copy)
@@ -38,7 +38,7 @@
 // ============================================================================
 
 #if wxUSE_ANIMATIONCTRL
-wxAnimation wxXmlResourceHandler::GetAnimation(const wxString& param)
+wxAnimation wxXmlResourceHandlerImpl::GetAnimation(const wxString& param)
 {
     const wxString name = GetParamValue(param);
     if ( name.empty() )
Index: src/xrc/xmlres.cpp
===================================================================
--- src/xrc/xmlres.cpp	(revision 67364)
+++ src/xrc/xmlres.cpp	(working copy)
@@ -430,16 +430,20 @@
 }
 
 
-IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+IMPLEMENT_CLASS(wxXmlResourceHandlerImpl, wxObject)
 
 void wxXmlResource::AddHandler(wxXmlResourceHandler *handler)
 {
+    wxXmlResourceHandlerImpl *impl = new wxXmlResourceHandlerImpl(handler);
+    handler->SetImpl(impl);
     m_handlers.push_back(handler);
     handler->SetParentResource(this);
 }
 
 void wxXmlResource::InsertHandler(wxXmlResourceHandler *handler)
 {
+    wxXmlResourceHandlerImpl *impl = new wxXmlResourceHandlerImpl(handler);
+    handler->SetImpl(impl);
     m_handlers.insert(m_handlers.begin(), handler);
     handler->SetParentResource(this);
 }
@@ -1405,23 +1409,35 @@
 
 
 
-wxXmlResourceHandler::wxXmlResourceHandler()
-        : m_node(NULL), m_parent(NULL), m_instance(NULL),
-          m_parentAsWindow(NULL)
-{}
+wxXmlResourceHandlerImpl::wxXmlResourceHandlerImpl(wxXmlResourceHandler *handler)
+                         :wxXmlResourceHandlerImplBase(handler)
+{
+}
 
+wxObject *wxXmlResourceHandlerImpl::CreateResFromNode(wxXmlNode *node,
+                            wxObject *parent, wxObject *instance)
+{
+    return m_handler->m_resource->CreateResFromNode(node, parent, instance);
+}
 
+#if wxUSE_FILESYSTEM
+wxFileSystem& wxXmlResourceHandlerImpl::GetCurFileSystem() 
+{ 
+    return m_handler->m_resource->GetCurFileSystem(); 
+}
+#endif
 
-wxObject *wxXmlResourceHandler::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
+
+wxObject *wxXmlResourceHandlerImpl::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
 {
-    wxXmlNode *myNode = m_node;
-    wxString myClass = m_class;
-    wxObject *myParent = m_parent, *myInstance = m_instance;
-    wxWindow *myParentAW = m_parentAsWindow;
+    wxXmlNode *myNode = m_handler->m_node;
+    wxString myClass = m_handler->m_class;
+    wxObject *myParent = m_handler->m_parent, *myInstance = m_handler->m_instance;
+    wxWindow *myParentAW = m_handler->m_parentAsWindow;
 
-    m_instance = instance;
-    if (!m_instance && node->HasAttribute(wxT("subclass")) &&
-        !(m_resource->GetFlags() & wxXRC_NO_SUBCLASSING))
+    m_handler->m_instance = instance;
+    if (!m_handler->m_instance && node->HasAttribute(wxT("subclass")) &&
+        !(m_handler->m_resource->GetFlags() & wxXRC_NO_SUBCLASSING))
     {
         wxString subclass = node->GetAttribute(wxT("subclass"), wxEmptyString);
         if (!subclass.empty())
@@ -1429,12 +1445,12 @@
             for (wxXmlSubclassFactories::iterator i = wxXmlResource::ms_subclassFactories->begin();
                  i != wxXmlResource::ms_subclassFactories->end(); ++i)
             {
-                m_instance = (*i)->Create(subclass);
-                if (m_instance)
+                m_handler->m_instance = (*i)->Create(subclass);
+                if (m_handler->m_instance)
                     break;
             }
 
-            if (!m_instance)
+            if (!m_handler->m_instance)
             {
                 wxString name = node->GetAttribute(wxT("name"), wxEmptyString);
                 ReportError
@@ -1450,62 +1466,28 @@
         }
     }
 
-    m_node = node;
-    m_class = node->GetAttribute(wxT("class"), wxEmptyString);
-    m_parent = parent;
-    m_parentAsWindow = wxDynamicCast(m_parent, wxWindow);
+    m_handler->m_node = node;
+    m_handler->m_class = node->GetAttribute(wxT("class"), wxEmptyString);
+    m_handler->m_parent = parent;
+    m_handler->m_parentAsWindow = wxDynamicCast(m_handler->m_parent, wxWindow);
 
-    wxObject *returned = DoCreateResource();
+    wxObject *returned = GetHandler()->DoCreateResource();
 
-    m_node = myNode;
-    m_class = myClass;
-    m_parent = myParent; m_parentAsWindow = myParentAW;
-    m_instance = myInstance;
+    m_handler->m_node = myNode;
+    m_handler->m_class = myClass;
+    m_handler->m_parent = myParent; m_handler->m_parentAsWindow = myParentAW;
+    m_handler->m_instance = myInstance;
 
     return returned;
 }
 
-
-void wxXmlResourceHandler::AddStyle(const wxString& name, int value)
+bool wxXmlResourceHandlerImpl::HasParam(const wxString& param)
 {
-    m_styleNames.Add(name);
-    m_styleValues.Add(value);
-}
-
-
-
-void wxXmlResourceHandler::AddWindowStyles()
-{
-    XRC_ADD_STYLE(wxCLIP_CHILDREN);
-
-    // the border styles all have the old and new names, recognize both for now
-    XRC_ADD_STYLE(wxSIMPLE_BORDER); XRC_ADD_STYLE(wxBORDER_SIMPLE);
-    XRC_ADD_STYLE(wxSUNKEN_BORDER); XRC_ADD_STYLE(wxBORDER_SUNKEN);
-    XRC_ADD_STYLE(wxDOUBLE_BORDER); XRC_ADD_STYLE(wxBORDER_DOUBLE); // deprecated
-    XRC_ADD_STYLE(wxBORDER_THEME);
-    XRC_ADD_STYLE(wxRAISED_BORDER); XRC_ADD_STYLE(wxBORDER_RAISED);
-    XRC_ADD_STYLE(wxSTATIC_BORDER); XRC_ADD_STYLE(wxBORDER_STATIC);
-    XRC_ADD_STYLE(wxNO_BORDER);     XRC_ADD_STYLE(wxBORDER_NONE);
-
-    XRC_ADD_STYLE(wxTRANSPARENT_WINDOW);
-    XRC_ADD_STYLE(wxWANTS_CHARS);
-    XRC_ADD_STYLE(wxTAB_TRAVERSAL);
-    XRC_ADD_STYLE(wxNO_FULL_REPAINT_ON_RESIZE);
-    XRC_ADD_STYLE(wxFULL_REPAINT_ON_RESIZE);
-    XRC_ADD_STYLE(wxALWAYS_SHOW_SB);
-    XRC_ADD_STYLE(wxWS_EX_BLOCK_EVENTS);
-    XRC_ADD_STYLE(wxWS_EX_VALIDATE_RECURSIVELY);
-}
-
-
-
-bool wxXmlResourceHandler::HasParam(const wxString& param)
-{
     return (GetParamNode(param) != NULL);
 }
 
 
-int wxXmlResourceHandler::GetStyle(const wxString& param, int defaults)
+int wxXmlResourceHandlerImpl::GetStyle(const wxString& param, int defaults)
 {
     wxString s = GetParamValue(param);
 
@@ -1518,10 +1500,10 @@
     while (tkn.HasMoreTokens())
     {
         fl = tkn.GetNextToken();
-        index = m_styleNames.Index(fl);
+        index = m_handler->m_styleNames.Index(fl);
         if (index != wxNOT_FOUND)
         {
-            style |= m_styleValues[index];
+            style |= m_handler->m_styleValues[index];
         }
         else
         {
@@ -1537,19 +1519,19 @@
 
 
 
-wxString wxXmlResourceHandler::GetText(const wxString& param, bool translate)
+wxString wxXmlResourceHandlerImpl::GetText(const wxString& param, bool translate)
 {
     wxXmlNode *parNode = GetParamNode(param);
     wxString str1(GetNodeContent(parNode));
     wxString str2;
 
     // "\\" wasn't translated to "\" prior to 2.5.3.0:
-    const bool escapeBackslash = (m_resource->CompareVersion(2,5,3,0) >= 0);
+    const bool escapeBackslash = (m_handler->m_resource->CompareVersion(2,5,3,0) >= 0);
 
     // VS: First version of XRC resources used $ instead of & (which is
     //     illegal in XML), but later I realized that '_' fits this purpose
     //     much better (because &File means "File with F underlined").
-    const wxChar amp_char = (m_resource->CompareVersion(2,3,0,1) < 0)
+    const wxChar amp_char = (m_handler->m_resource->CompareVersion(2,3,0,1) < 0)
                             ? '$' : '_';
 
     for ( wxString::const_iterator dt = str1.begin(); dt != str1.end(); ++dt )
@@ -1600,12 +1582,12 @@
         }
     }
 
-    if (m_resource->GetFlags() & wxXRC_USE_LOCALE)
+    if (m_handler->m_resource->GetFlags() & wxXRC_USE_LOCALE)
     {
         if (translate && parNode &&
             parNode->GetAttribute(wxT("translate"), wxEmptyString) != wxT("0"))
         {
-            return wxGetTranslation(str2, m_resource->GetDomain());
+            return wxGetTranslation(str2, m_handler->m_resource->GetDomain());
         }
         else
         {
@@ -1627,7 +1609,7 @@
 
 
 
-long wxXmlResourceHandler::GetLong(const wxString& param, long defaultv)
+long wxXmlResourceHandlerImpl::GetLong(const wxString& param, long defaultv)
 {
     long value;
     wxString str1 = GetParamValue(param);
@@ -1638,7 +1620,7 @@
     return value;
 }
 
-float wxXmlResourceHandler::GetFloat(const wxString& param, float defaultv)
+float wxXmlResourceHandlerImpl::GetFloat(const wxString& param, float defaultv)
 {
     wxString str = GetParamValue(param);
 
@@ -1653,27 +1635,27 @@
 }
 
 
-int wxXmlResourceHandler::GetID()
+int wxXmlResourceHandlerImpl::GetID()
 {
     return wxXmlResource::GetXRCID(GetName());
 }
 
 
 
-wxString wxXmlResourceHandler::GetName()
+wxString wxXmlResourceHandlerImpl::GetName()
 {
-    return m_node->GetAttribute(wxT("name"), wxT("-1"));
+    return m_handler->m_node->GetAttribute(wxT("name"), wxT("-1"));
 }
 
 
 
-bool wxXmlResourceHandler::GetBoolAttr(const wxString& attr, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBoolAttr(const wxString& attr, bool defaultv)
 {
     wxString v;
-    return m_node->GetAttribute(attr, &v) ? v == '1' : defaultv;
+    return m_handler->m_node->GetAttribute(attr, &v) ? v == '1' : defaultv;
 }
 
-bool wxXmlResourceHandler::GetBool(const wxString& param, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBool(const wxString& param, bool defaultv)
 {
     const wxString v = GetParamValue(param);
 
@@ -1730,7 +1712,7 @@
     return wxNullColour;
 }
 
-wxColour wxXmlResourceHandler::GetColour(const wxString& param, const wxColour& defaultv)
+wxColour wxXmlResourceHandlerImpl::GetColour(const wxString& param, const wxColour& defaultv)
 {
     wxString v = GetParamValue(param);
 
@@ -1790,7 +1772,7 @@
 
 } // anonymous namespace
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxString& param,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxString& param,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1811,7 +1793,7 @@
     return GetBitmap(node, defaultArtClient, size);
 }
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxXmlNode* node,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxXmlNode* node,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1861,7 +1843,7 @@
 }
 
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxString& param,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxString& param,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1879,7 +1861,7 @@
     return GetIcon(node, defaultArtClient, size);
 }
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxXmlNode* node,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxXmlNode* node,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1889,7 +1871,7 @@
 }
 
 
-wxIconBundle wxXmlResourceHandler::GetIconBundle(const wxString& param,
+wxIconBundle wxXmlResourceHandlerImpl::GetIconBundle(const wxString& param,
                                                  const wxArtClient& defaultArtClient)
 {
     wxString art_id, art_client;
@@ -1937,14 +1919,14 @@
 }
 
 
-wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+wxImageList *wxXmlResourceHandlerImpl::GetImageList(const wxString& param)
 {
     wxXmlNode * const imagelist_node = GetParamNode(param);
     if ( !imagelist_node )
         return NULL;
 
-    wxXmlNode * const oldnode = m_node;
-    m_node = imagelist_node;
+    wxXmlNode * const oldnode = m_handler->m_node;
+    m_handler->m_node = imagelist_node;
 
     // Get the size if we have it, otherwise we will use the size of the first
     // list element.
@@ -1956,7 +1938,7 @@
     wxString parambitmap = wxT("bitmap");
     if ( HasParam(parambitmap) )
     {
-        wxXmlNode *n = m_node->GetChildren();
+        wxXmlNode *n = m_handler->m_node->GetChildren();
         while (n)
         {
             if (n->GetType() == wxXML_ELEMENT_NODE && n->GetName() == parambitmap)
@@ -1981,15 +1963,15 @@
         }
     }
 
-    m_node = oldnode;
+    m_handler->m_node = oldnode;
     return imagelist;
 }
 
-wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
+wxXmlNode *wxXmlResourceHandlerImpl::GetParamNode(const wxString& param)
 {
-    wxCHECK_MSG(m_node, NULL, wxT("You can't access handler data before it was initialized!"));
+    wxCHECK_MSG(m_handler->m_node, NULL, wxT("You can't access handler data before it was initialized!"));
 
-    wxXmlNode *n = m_node->GetChildren();
+    wxXmlNode *n = m_handler->m_node->GetChildren();
 
     while (n)
     {
@@ -2008,15 +1990,14 @@
     return NULL;
 }
 
-/* static */
-bool wxXmlResourceHandler::IsOfClass(wxXmlNode *node, const wxString& classname)
+bool wxXmlResourceHandlerImpl::IsOfClass(wxXmlNode *node, const wxString& classname) const
 {
     return node->GetAttribute(wxT("class")) == classname;
 }
 
 
 
-wxString wxXmlResourceHandler::GetNodeContent(const wxXmlNode *node)
+wxString wxXmlResourceHandlerImpl::GetNodeContent(const wxXmlNode *node)
 {
     const wxXmlNode *n = node;
     if (n == NULL) return wxEmptyString;
@@ -2034,21 +2015,21 @@
 
 
 
-wxString wxXmlResourceHandler::GetParamValue(const wxString& param)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxString& param)
 {
     if (param.empty())
-        return GetNodeContent(m_node);
+        return GetNodeContent(m_handler->m_node);
     else
         return GetNodeContent(GetParamNode(param));
 }
 
-wxString wxXmlResourceHandler::GetParamValue(const wxXmlNode* node)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxXmlNode* node)
 {
     return GetNodeContent(node);
 }
 
 
-wxSize wxXmlResourceHandler::GetSize(const wxString& param,
+wxSize wxXmlResourceHandlerImpl::GetSize(const wxString& param,
                                      wxWindow *windowToUse)
 {
     wxString s = GetParamValue(param);
@@ -2076,9 +2057,9 @@
         {
             return wxDLG_UNIT(windowToUse, wxSize(sx, sy));
         }
-        else if (m_parentAsWindow)
+        else if (m_handler->m_parentAsWindow)
         {
-            return wxDLG_UNIT(m_parentAsWindow, wxSize(sx, sy));
+            return wxDLG_UNIT(m_handler->m_parentAsWindow, wxSize(sx, sy));
         }
         else
         {
@@ -2096,7 +2077,7 @@
 
 
 
-wxPoint wxXmlResourceHandler::GetPosition(const wxString& param)
+wxPoint wxXmlResourceHandlerImpl::GetPosition(const wxString& param)
 {
     wxSize sz = GetSize(param);
     return wxPoint(sz.x, sz.y);
@@ -2104,7 +2085,7 @@
 
 
 
-wxCoord wxXmlResourceHandler::GetDimension(const wxString& param,
+wxCoord wxXmlResourceHandlerImpl::GetDimension(const wxString& param,
                                            wxCoord defaultv,
                                            wxWindow *windowToUse)
 {
@@ -2132,9 +2113,9 @@
         {
             return wxDLG_UNIT(windowToUse, wxSize(sx, 0)).x;
         }
-        else if (m_parentAsWindow)
+        else if (m_handler->m_parentAsWindow)
         {
-            return wxDLG_UNIT(m_parentAsWindow, wxSize(sx, 0)).x;
+            return wxDLG_UNIT(m_handler->m_parentAsWindow, wxSize(sx, 0)).x;
         }
         else
         {
@@ -2171,7 +2152,7 @@
     return wxNullFont;
 }
 
-wxFont wxXmlResourceHandler::GetFont(const wxString& param)
+wxFont wxXmlResourceHandlerImpl::GetFont(const wxString& param)
 {
     wxXmlNode *font_node = GetParamNode(param);
     if (font_node == NULL)
@@ -2181,8 +2162,8 @@
         return wxNullFont;
     }
 
-    wxXmlNode *oldnode = m_node;
-    m_node = font_node;
+    wxXmlNode *oldnode = m_handler->m_node;
+    m_handler->m_node = font_node;
 
     // font attributes:
 
@@ -2305,12 +2286,12 @@
                       underlined, facename, enc);
     }
 
-    m_node = oldnode;
+    m_handler->m_node = oldnode;
     return font;
 }
 
 
-void wxXmlResourceHandler::SetupWindow(wxWindow *wnd)
+void wxXmlResourceHandlerImpl::SetupWindow(wxWindow *wnd)
 {
     //FIXME : add cursor
 
@@ -2345,29 +2326,28 @@
         wnd->SetHelpText(GetText(wxT("help")));
 }
 
-
-void wxXmlResourceHandler::CreateChildren(wxObject *parent, bool this_hnd_only)
+void wxXmlResourceHandlerImpl::CreateChildren(wxObject *parent, bool this_hnd_only)
 {
-    for ( wxXmlNode *n = m_node->GetChildren(); n; n = n->GetNext() )
+    for ( wxXmlNode *n = m_handler->m_node->GetChildren(); n; n = n->GetNext() )
     {
         if ( IsObjectNode(n) )
         {
-            m_resource->DoCreateResFromNode(*n, parent, NULL,
-                                            this_hnd_only ? this : NULL);
-        }
+            m_handler->m_resource->DoCreateResFromNode(*n, parent, NULL,
+                                            this_hnd_only ? this->GetHandler() : NULL);
+       }
     }
 }
 
 
-void wxXmlResourceHandler::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
+void wxXmlResourceHandlerImpl::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
 {
     wxXmlNode *root;
-    if (rootnode == NULL) root = m_node; else root = rootnode;
+    if (rootnode == NULL) root = m_handler->m_node; else root = rootnode;
     wxXmlNode *n = root->GetChildren();
 
     while (n)
     {
-        if (n->GetType() == wxXML_ELEMENT_NODE && CanHandle(n))
+        if (n->GetType() == wxXML_ELEMENT_NODE && GetHandler()->CanHandle(n))
         {
             CreateResource(n, parent, NULL);
         }
@@ -2375,26 +2355,25 @@
     }
 }
 
-
 //-----------------------------------------------------------------------------
 // errors reporting
 //-----------------------------------------------------------------------------
 
-void wxXmlResourceHandler::ReportError(const wxString& message)
+void wxXmlResourceHandlerImpl::ReportError(const wxString& message)
 {
-    m_resource->ReportError(m_node, message);
+    m_handler->m_resource->ReportError(m_handler->m_node, message);
 }
 
-void wxXmlResourceHandler::ReportError(wxXmlNode *context,
+void wxXmlResourceHandlerImpl::ReportError(wxXmlNode *context,
                                        const wxString& message)
 {
-    m_resource->ReportError(context ? context : m_node, message);
+    m_handler->m_resource->ReportError(context ? context : m_handler->m_node, message);
 }
 
-void wxXmlResourceHandler::ReportParamError(const wxString& param,
+void wxXmlResourceHandlerImpl::ReportParamError(const wxString& param,
                                             const wxString& message)
 {
-    m_resource->ReportError(GetParamNode(param), message);
+    m_handler->m_resource->ReportError(GetParamNode(param), message);
 }
 
 void wxXmlResource::ReportError(const wxXmlNode *context, const wxString& message)
Index: src/xrc/xmlreshandler.cpp
===================================================================
--- src/xrc/xmlreshandler.cpp	(revision 0)
+++ src/xrc/xmlreshandler.cpp	(revision 0)
@@ -0,0 +1,278 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:wx/xrc/xmlreshandler.cpp
+// Purpose: XML resource handler
+// Author:  Steven Lamerton
+// Created: 2011/01/26
+// RCS-ID:  
+// Copyright:   (c) 2011 Steven Lamerton
+// Licence: wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+#if wxUSE_XRC
+
+#include "wx/xrc/xmlreshandler.h"
+#include "wx/xrc/xmlres.h"
+
+IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandlerImplBase, wxObject)
+
+wxXmlResourceHandler::wxXmlResourceHandler()
+{
+    m_impl = NULL;
+}
+
+wxXmlResourceHandler::~wxXmlResourceHandler()
+{
+    wxDELETE(m_impl);
+}
+
+void wxXmlResourceHandler::SetParentResource(wxXmlResource *res)
+{
+    m_resource = res;
+}
+
+void wxXmlResourceHandler::SetImpl(wxXmlResourceHandlerImplBase* impl) 
+{
+    m_impl = impl;
+}
+
+wxXmlResourceHandlerImplBase* wxXmlResourceHandler::GetImpl() const
+{
+    if(!m_impl)
+    {
+        wxFAIL_MSG(wxT("Implementation not found"));
+    }
+    return m_impl;
+}
+
+void wxXmlResourceHandler::AddStyle(const wxString& name, int value)
+{
+    m_styleNames.Add(name);
+    m_styleValues.Add(value);
+}
+
+void wxXmlResourceHandler::AddWindowStyles()
+{
+    XRC_ADD_STYLE(wxCLIP_CHILDREN);
+
+    // the border styles all have the old and new names, recognize both for now
+    XRC_ADD_STYLE(wxSIMPLE_BORDER); XRC_ADD_STYLE(wxBORDER_SIMPLE);
+    XRC_ADD_STYLE(wxSUNKEN_BORDER); XRC_ADD_STYLE(wxBORDER_SUNKEN);
+    XRC_ADD_STYLE(wxDOUBLE_BORDER); XRC_ADD_STYLE(wxBORDER_DOUBLE); // deprecated
+    XRC_ADD_STYLE(wxBORDER_THEME);
+    XRC_ADD_STYLE(wxRAISED_BORDER); XRC_ADD_STYLE(wxBORDER_RAISED);
+    XRC_ADD_STYLE(wxSTATIC_BORDER); XRC_ADD_STYLE(wxBORDER_STATIC);
+    XRC_ADD_STYLE(wxNO_BORDER);     XRC_ADD_STYLE(wxBORDER_NONE);
+
+    XRC_ADD_STYLE(wxTRANSPARENT_WINDOW);
+    XRC_ADD_STYLE(wxWANTS_CHARS);
+    XRC_ADD_STYLE(wxTAB_TRAVERSAL);
+    XRC_ADD_STYLE(wxNO_FULL_REPAINT_ON_RESIZE);
+    XRC_ADD_STYLE(wxFULL_REPAINT_ON_RESIZE);
+    XRC_ADD_STYLE(wxALWAYS_SHOW_SB);
+    XRC_ADD_STYLE(wxWS_EX_BLOCK_EVENTS);
+    XRC_ADD_STYLE(wxWS_EX_VALIDATE_RECURSIVELY);
+}
+
+//We simply pass everything through to the implementation 
+
+wxObject *wxXmlResourceHandler::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
+{
+    return GetImpl()->CreateResource(node, parent, instance);
+}
+
+void wxXmlResourceHandler::CreateChildren(wxObject *parent, bool this_hnd_only)
+{
+    GetImpl()->CreateChildren(parent, this_hnd_only);
+}
+
+void wxXmlResourceHandler::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
+{
+    GetImpl()->CreateChildrenPrivately(parent, rootnode);
+}
+
+bool wxXmlResourceHandler::IsOfClass(wxXmlNode *node, const wxString& classname) const
+{
+    return GetImpl()->IsOfClass(node, classname);
+}
+
+wxString wxXmlResourceHandler::GetNodeContent(const wxXmlNode *node)
+{
+    return GetImpl()->GetNodeContent(node);
+}
+
+bool wxXmlResourceHandler::HasParam(const wxString& param)
+{
+    return GetImpl()->HasParam(param);
+}
+
+wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
+{
+    return GetImpl()->GetParamNode(param);
+}
+
+wxString wxXmlResourceHandler::GetParamValue(const wxString& param)
+{
+    return GetImpl()->GetParamValue(param);
+};
+
+wxString wxXmlResourceHandler::GetParamValue(const wxXmlNode* node)
+{
+    return GetImpl()->GetParamValue(node);
+}
+
+int wxXmlResourceHandler::GetStyle(const wxString& param, int defaults)
+{
+    return GetImpl()->GetStyle(param, defaults);
+}
+
+wxString wxXmlResourceHandler::GetText(const wxString& param, bool translate)
+{
+    return GetImpl()->GetText(param, translate);
+}
+
+int wxXmlResourceHandler::GetID()
+{
+    return GetImpl()->GetID();
+}
+
+wxString wxXmlResourceHandler::GetName()
+{
+    return GetImpl()->GetName();
+}
+
+bool wxXmlResourceHandler::GetBool(const wxString& param, bool defaultv)
+{
+    return GetImpl()->GetBool(param, defaultv);
+}
+
+long wxXmlResourceHandler::GetLong(const wxString& param, long defaultv)
+{
+    return GetImpl()->GetLong(param, defaultv);
+}
+
+float wxXmlResourceHandler::GetFloat(const wxString& param, float defaultv)
+{
+    return GetImpl()->GetFloat(param, defaultv);
+}
+
+wxColour wxXmlResourceHandler::GetColour(const wxString& param, const wxColour& defaultv)
+{
+    return GetImpl()->GetColour(param, defaultv);
+}
+
+wxSize wxXmlResourceHandler::GetSize(const wxString& param, wxWindow *windowToUse)
+{
+    return GetImpl()->GetSize(param, windowToUse);
+}
+
+wxPoint wxXmlResourceHandler::GetPosition(const wxString& param)
+{ 
+    return GetImpl()->GetPosition(param);
+}
+
+wxCoord wxXmlResourceHandler::GetDimension(const wxString& param, wxCoord defaultv,
+                                           wxWindow *windowToUse)
+{ 
+    return GetImpl()->GetDimension(param, defaultv, windowToUse);
+}
+
+wxBitmap wxXmlResourceHandler::GetBitmap(const wxString& param,
+                                         const wxArtClient& defaultArtClient,
+                                         wxSize size)
+{ 
+    return GetImpl()->GetBitmap(param, defaultArtClient, size);
+}
+
+wxBitmap wxXmlResourceHandler::GetBitmap(const wxXmlNode* node,
+                                         const wxArtClient& defaultArtClient,
+                                         wxSize size)
+{
+    return GetImpl()->GetBitmap(node, defaultArtClient, size);
+}
+
+wxIcon wxXmlResourceHandler::GetIcon(const wxString& param,
+                                     const wxArtClient& defaultArtClient,
+                                     wxSize size)
+{ 
+    return GetImpl()->GetIcon(param, defaultArtClient, size); 
+}
+
+wxIcon wxXmlResourceHandler::GetIcon(const wxXmlNode* node,
+                                     const wxArtClient& defaultArtClient,
+                                     wxSize size)
+{
+    return GetImpl()->GetIcon(node, defaultArtClient, size);
+}
+
+wxIconBundle wxXmlResourceHandler::GetIconBundle(const wxString& param,
+                                                 const wxArtClient& defaultArtClient)
+{
+    return GetImpl()->GetIconBundle(param, defaultArtClient);
+}
+
+wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+{
+    return GetImpl()->GetImageList(param); 
+}
+
+#if wxUSE_ANIMATIONCTRL
+wxAnimation wxXmlResourceHandler::GetAnimation(const wxString& param)
+{ 
+    return GetImpl()->GetAnimation(param); 
+}
+#endif
+
+wxFont wxXmlResourceHandler::GetFont(const wxString& param)
+{ 
+    return GetImpl()->GetFont(param); 
+}
+
+bool wxXmlResourceHandler::GetBoolAttr(const wxString& attr, bool defaultv)
+{
+    return GetImpl()->GetBoolAttr(attr, defaultv);
+}
+
+void wxXmlResourceHandler::SetupWindow(wxWindow *wnd)
+{ 
+    GetImpl()->SetupWindow(wnd); 
+}
+
+wxObject *wxXmlResourceHandler::CreateResFromNode(wxXmlNode *node,
+                                                  wxObject *parent, 
+                                                  wxObject *instance)
+{ 
+    return GetImpl()->CreateResFromNode(node, parent, instance); 
+}
+
+#if wxUSE_FILESYSTEM
+wxFileSystem& wxXmlResourceHandler::GetCurFileSystem() 
+{ 
+    return GetImpl()->GetCurFileSystem(); 
+}
+#endif
+
+void wxXmlResourceHandler::ReportError(wxXmlNode *context, 
+                                       const wxString& message)
+{ 
+    return GetImpl()->ReportError(context, message);
+}
+
+void wxXmlResourceHandler::ReportError(const wxString& message)
+{ 
+    return GetImpl()->ReportError(message); 
+}
+
+void wxXmlResourceHandler::ReportParamError(const wxString& param, 
+                                            const wxString& message)
+{
+    return GetImpl()->ReportParamError(param, message);
+}
+
+#endif
Index: src/xrc/xmlrsall.cpp
===================================================================
--- src/xrc/xmlrsall.cpp	(revision 67364)
+++ src/xrc/xmlrsall.cpp	(working copy)
@@ -143,9 +143,6 @@
 #if wxUSE_RADIOBTN
     AddHandler(new wxRadioButtonXmlHandler);
 #endif
-#if 0 && wxUSE_RICHTEXT
-    AddHandler(new wxRichTextCtrlXmlHandler);
-#endif
 #if wxUSE_SCROLLBAR
     AddHandler(new wxScrollBarXmlHandler);
 #endif

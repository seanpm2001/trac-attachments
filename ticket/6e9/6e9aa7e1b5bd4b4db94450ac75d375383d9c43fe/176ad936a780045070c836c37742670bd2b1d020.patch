Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 66853)
+++ build/bakefiles/files.bkl	(working copy)
@@ -805,6 +805,7 @@
     src/generic/treebkg.cpp
     src/generic/vlbox.cpp
     src/generic/vscroll.cpp
+    src/xrc/xmlreshandler.cpp
 </set>
 <set var="GUI_CMN_HDR" hints="files">
     wx/bmpbuttn.h
@@ -1024,6 +1025,7 @@
     wx/vscroll.h
     wx/xpmdecod.h
     wx/xpmhand.h
+    wx/xrc/xmlreshandler.h
 </set>
 
 <!-- ====================================================================== -->
@@ -3333,12 +3335,12 @@
 <!-- ====================================================================== -->
 
 <set var="XRC_SRC" hints="files">
-    src/xrc/xh_animatctrl.cpp
+    <!-- src/xrc/xh_animatctrl.cpp
     src/xrc/xh_bmp.cpp
     src/xrc/xh_bmpcbox.cpp
-    src/xrc/xh_bmpbt.cpp
+    src/xrc/xh_bmpbt.cpp -->
     src/xrc/xh_bttn.cpp
-    src/xrc/xh_cald.cpp
+    <!--src/xrc/xh_cald.cpp
     src/xrc/xh_chckb.cpp
     src/xrc/xh_chckl.cpp
     src/xrc/xh_choic.cpp
@@ -3372,8 +3374,6 @@
     src/xrc/xh_propdlg.cpp
     src/xrc/xh_radbt.cpp
     src/xrc/xh_radbx.cpp
-    <!-- disabled until linking problems are fixed -->
-    <!-- src/xrc/xh_richtext.cpp -->
     src/xrc/xh_scrol.cpp
     src/xrc/xh_scwin.cpp
     src/xrc/xh_htmllbox.cpp
@@ -3394,19 +3394,19 @@
     src/xrc/xh_tree.cpp
     src/xrc/xh_treebk.cpp
     src/xrc/xh_unkwn.cpp
-    src/xrc/xh_wizrd.cpp
+    src/xrc/xh_wizrd.cpp-->
     src/xrc/xmlres.cpp
     src/xrc/xmladv.cpp
     src/xrc/xmlrsall.cpp
 </set>
 <set var="XRC_HDR" hints="files">
     wx/xrc/xh_all.h
-    wx/xrc/xh_animatctrl.h
+    <!--wx/xrc/xh_animatctrl.h
     wx/xrc/xh_bmpbt.h
     wx/xrc/xh_bmp.h
-    wx/xrc/xh_bmpcbox.h
+    wx/xrc/xh_bmpcbox.h-->
     wx/xrc/xh_bttn.h
-    wx/xrc/xh_cald.h
+    <!--wx/xrc/xh_cald.h
     wx/xrc/xh_chckb.h
     wx/xrc/xh_chckl.h
     wx/xrc/xh_choic.h
@@ -3439,9 +3439,8 @@
     wx/xrc/xh_panel.h
     wx/xrc/xh_propdlg.h
     wx/xrc/xh_radbt.h
-    wx/xrc/xh_radbx.h
-    <!-- wx/xrc/xh_richtext.h -->
-    wx/xrc/xh_scrol.h
+    wx/xrc/xh_radbx.h -->
+    <!--wx/xrc/xh_scrol.h
     wx/xrc/xh_scwin.h
     wx/xrc/xh_htmllbox.h
     wx/xrc/xh_sizer.h
@@ -3461,7 +3460,7 @@
     wx/xrc/xh_tree.h
     wx/xrc/xh_treebk.h
     wx/xrc/xh_unkwn.h
-    wx/xrc/xh_wizrd.h
+    wx/xrc/xh_wizrd.h-->
     wx/xrc/xmlres.h
 </set>
 
@@ -3634,6 +3633,7 @@
     src/richtext/richtextstyledlg.cpp
     src/richtext/richtextprint.cpp
     src/richtext/richtextimagedlg.cpp
+    src/xrc/xh_richtext.cpp
 </set>
 <set var="RICHTEXT_HDR" hints="files">
     wx/richtext/richtextctrl.h
@@ -3646,6 +3646,7 @@
     wx/richtext/richtextstyledlg.h
     wx/richtext/richtextprint.h
     wx/richtext/richtextimagedlg.h
+    wx/xrc/xh_richtext.h
 </set>
 
 
Index: include/wx/xrc/xh_all.h
===================================================================
--- include/wx/xrc/xh_all.h	(revision 66853)
+++ include/wx/xrc/xh_all.h	(working copy)
@@ -14,65 +14,65 @@
 
 // Existing handlers:
 
-#include "wx/xrc/xh_animatctrl.h"
-#include "wx/xrc/xh_bmp.h"
-#include "wx/xrc/xh_bmpbt.h"
-#include "wx/xrc/xh_bmpcbox.h"
+//#include "wx/xrc/xh_animatctrl.h"
+//#include "wx/xrc/xh_bmp.h"
+//#include "wx/xrc/xh_bmpbt.h"
+//#include "wx/xrc/xh_bmpcbox.h"
 #include "wx/xrc/xh_bttn.h"
-#include "wx/xrc/xh_cald.h"
-#include "wx/xrc/xh_chckb.h"
-#include "wx/xrc/xh_chckl.h"
-#include "wx/xrc/xh_choic.h"
-#include "wx/xrc/xh_choicbk.h"
-#include "wx/xrc/xh_clrpicker.h"
-#include "wx/xrc/xh_cmdlinkbn.h"
-#include "wx/xrc/xh_collpane.h"
-#include "wx/xrc/xh_combo.h"
-#include "wx/xrc/xh_comboctrl.h"
-#include "wx/xrc/xh_datectrl.h"
-#include "wx/xrc/xh_dirpicker.h"
-#include "wx/xrc/xh_dlg.h"
-#include "wx/xrc/xh_editlbox.h"
-#include "wx/xrc/xh_filectrl.h"
-#include "wx/xrc/xh_filepicker.h"
-#include "wx/xrc/xh_fontpicker.h"
-#include "wx/xrc/xh_frame.h"
-#include "wx/xrc/xh_gauge.h"
-#include "wx/xrc/xh_gdctl.h"
-#include "wx/xrc/xh_grid.h"
-#include "wx/xrc/xh_html.h"
-#include "wx/xrc/xh_htmllbox.h"
-#include "wx/xrc/xh_hyperlink.h"
-#include "wx/xrc/xh_listb.h"
-#include "wx/xrc/xh_listc.h"
-#include "wx/xrc/xh_listbk.h"
-#include "wx/xrc/xh_mdi.h"
-#include "wx/xrc/xh_menu.h"
-#include "wx/xrc/xh_notbk.h"
-#include "wx/xrc/xh_odcombo.h"
-#include "wx/xrc/xh_panel.h"
-#include "wx/xrc/xh_propdlg.h"
-#include "wx/xrc/xh_radbt.h"
-#include "wx/xrc/xh_radbx.h"
-#include "wx/xrc/xh_scrol.h"
-#include "wx/xrc/xh_scwin.h"
-#include "wx/xrc/xh_sizer.h"
-#include "wx/xrc/xh_slidr.h"
-#include "wx/xrc/xh_spin.h"
-#include "wx/xrc/xh_split.h"
-#include "wx/xrc/xh_srchctrl.h"
-#include "wx/xrc/xh_statbar.h"
-#include "wx/xrc/xh_stbox.h"
-#include "wx/xrc/xh_stbmp.h"
-#include "wx/xrc/xh_sttxt.h"
-#include "wx/xrc/xh_stlin.h"
-#include "wx/xrc/xh_text.h"
-#include "wx/xrc/xh_tglbtn.h"
-#include "wx/xrc/xh_toolb.h"
-#include "wx/xrc/xh_toolbk.h"
-#include "wx/xrc/xh_tree.h"
-#include "wx/xrc/xh_treebk.h"
-#include "wx/xrc/xh_unkwn.h"
-#include "wx/xrc/xh_wizrd.h"
+//#include "wx/xrc/xh_cald.h"
+//#include "wx/xrc/xh_chckb.h"
+//#include "wx/xrc/xh_chckl.h"
+//#include "wx/xrc/xh_choic.h"
+//#include "wx/xrc/xh_choicbk.h"
+//#include "wx/xrc/xh_clrpicker.h"
+//#include "wx/xrc/xh_cmdlinkbn.h"
+//#include "wx/xrc/xh_collpane.h"
+//#include "wx/xrc/xh_combo.h"
+//#include "wx/xrc/xh_comboctrl.h"
+//#include "wx/xrc/xh_datectrl.h"
+//#include "wx/xrc/xh_dirpicker.h"
+//#include "wx/xrc/xh_dlg.h"
+//#include "wx/xrc/xh_editlbox.h"
+//#include "wx/xrc/xh_filectrl.h"
+//#include "wx/xrc/xh_filepicker.h"
+//#include "wx/xrc/xh_fontpicker.h"
+//#include "wx/xrc/xh_frame.h"
+//#include "wx/xrc/xh_gauge.h"
+//#include "wx/xrc/xh_gdctl.h"
+//#include "wx/xrc/xh_grid.h"
+//#include "wx/xrc/xh_html.h"
+//#include "wx/xrc/xh_htmllbox.h"
+//#include "wx/xrc/xh_hyperlink.h"
+//#include "wx/xrc/xh_listb.h"
+//#include "wx/xrc/xh_listc.h"
+//#include "wx/xrc/xh_listbk.h"
+//#include "wx/xrc/xh_mdi.h"
+//#include "wx/xrc/xh_menu.h"
+//#include "wx/xrc/xh_notbk.h"
+//#include "wx/xrc/xh_odcombo.h"
+//#include "wx/xrc/xh_panel.h"
+//#include "wx/xrc/xh_propdlg.h"
+//#include "wx/xrc/xh_radbt.h"
+//#include "wx/xrc/xh_radbx.h"
+//#include "wx/xrc/xh_scrol.h"
+//#include "wx/xrc/xh_scwin.h"
+//#include "wx/xrc/xh_sizer.h"
+//#include "wx/xrc/xh_slidr.h"
+//#include "wx/xrc/xh_spin.h"
+//#include "wx/xrc/xh_split.h"
+//#include "wx/xrc/xh_srchctrl.h"
+//#include "wx/xrc/xh_statbar.h"
+//#include "wx/xrc/xh_stbox.h"
+//#include "wx/xrc/xh_stbmp.h"
+//#include "wx/xrc/xh_sttxt.h"
+//#include "wx/xrc/xh_stlin.h"
+//#include "wx/xrc/xh_text.h"
+//#include "wx/xrc/xh_tglbtn.h"
+//#include "wx/xrc/xh_toolb.h"
+//#include "wx/xrc/xh_toolbk.h"
+//#include "wx/xrc/xh_tree.h"
+//#include "wx/xrc/xh_treebk.h"
+//#include "wx/xrc/xh_unkwn.h"
+//#include "wx/xrc/xh_wizrd.h"
 
 #endif // _WX_XH_ALL_H_
Index: include/wx/xrc/xh_bttn.h
===================================================================
--- include/wx/xrc/xh_bttn.h	(revision 66853)
+++ include/wx/xrc/xh_bttn.h	(working copy)
@@ -11,7 +11,7 @@
 #ifndef _WX_XH_BTTN_H_
 #define _WX_XH_BTTN_H_
 
-#include "wx/xrc/xmlres.h"
+#include "wx/xrc/xmlreshandler.h"
 
 #if wxUSE_XRC && wxUSE_BUTTON
 
@@ -21,6 +21,7 @@
 
 public:
     wxButtonXmlHandler();
+    virtual void Initialize();
     virtual wxObject *DoCreateResource();
     virtual bool CanHandle(wxXmlNode *node);
 };
Index: include/wx/xrc/xh_richtext.h
===================================================================
--- include/wx/xrc/xh_richtext.h	(revision 66853)
+++ include/wx/xrc/xh_richtext.h	(working copy)
@@ -11,16 +11,17 @@
 #ifndef _WX_XH_RICHTEXT_H_
 #define _WX_XH_RICHTEXT_H_
 
-#include "wx/xrc/xmlres.h"
+#include "wx/xrc/xmlreshandler.h"
 
 #if wxUSE_XRC && wxUSE_RICHTEXT
 
-class WXDLLIMPEXP_XRC wxRichTextCtrlXmlHandler : public wxXmlResourceHandler
+class WXDLLIMPEXP_RICHTEXT wxRichTextCtrlXmlHandler : public wxXmlResourceHandler
 {
     DECLARE_DYNAMIC_CLASS(wxRichTextCtrlXmlHandler)
 
 public:
     wxRichTextCtrlXmlHandler();
+    virtual void Initialize();
     virtual wxObject *DoCreateResource();
     virtual bool CanHandle(wxXmlNode *node);
 };
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 66853)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -42,9 +42,10 @@
 class WXDLLIMPEXP_FWD_CORE wxWindow;
 class WXDLLIMPEXP_FWD_CORE wxFrame;
 class WXDLLIMPEXP_FWD_CORE wxToolBar;
+class WXDLLIMPEXP_FWD_CORE wxXmlResourceHandler;
 
-class WXDLLIMPEXP_FWD_XRC wxXmlResourceHandler;
 class WXDLLIMPEXP_FWD_XRC wxXmlSubclassFactory;
+class wxXmlResourceHandlerImpl;
 class wxXmlSubclassFactories;
 class wxXmlResourceModule;
 class wxXmlResourceDataRecords;
@@ -393,7 +394,7 @@
     // domain to pass to translation functions, if any.
     wxString m_domain;
 
-    friend class wxXmlResourceHandler;
+    friend class wxXmlResourceHandlerImpl;
     friend class wxXmlResourceModule;
     friend class wxIdRangeManager;
     friend class wxIdRange;
@@ -443,19 +444,31 @@
 #define XRCSIZERITEM(window, id) \
     ((window).GetSizer() ? (window).GetSizer()->GetItemById(XRCID(id)) : NULL)
 
-// wxXmlResourceHandler is an abstract base class for resource handlers
-// capable of creating a control from an XML node.
 
-class WXDLLIMPEXP_XRC wxXmlResourceHandler : public wxObject
+// wxXmlResourceHandlerImplementation is the back end of the wxXmlResourceHander
+// class to allow the split between core and xrc
+
+class WXDLLIMPEXP_XRC wxXmlResourceHandlerImpl : public wxObject
 {
-DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+DECLARE_DYNAMIC_CLASS(wxXmlResourceHandlerImpl)
 public:
     // Constructor.
-    wxXmlResourceHandler();
+    wxXmlResourceHandlerImpl(wxXmlResourceHandler *handler);
 
     // Destructor.
-    virtual ~wxXmlResourceHandler() {}
+    virtual ~wxXmlResourceHandlerImpl() {}
 
+    // Sets the parent resource.
+    void SetParentResource(wxXmlResource *res) { m_resource = res; }
+    
+    void SetNode(wxXmlNode *node) { m_node = node; }
+    wxXmlNode *GetNode() { return m_node; }
+    wxString GetClass() { return m_class; }
+    wxObject *GetParent() { return m_parent; }
+    wxObject *GetInstance() { return m_instance; }
+    wxWindow *GetParentAsWindow() { return m_parentAsWindow; }
+    wxXmlResource *GetResource() { return m_resource; }
+    
     // Creates an object (menu, dialog, control, ...) from an XML node.
     // Should check for validity.
     // parent is a higher-level object (usually window, dialog or panel)
@@ -464,29 +477,8 @@
     // should rather use this one, and call its Create method.
     wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
                              wxObject *instance);
+                             
 
-    // This one is called from CreateResource after variables
-    // were filled.
-    virtual wxObject *DoCreateResource() = 0;
-
-    // Returns true if it understands this node and can create
-    // a resource from it, false otherwise.
-    virtual bool CanHandle(wxXmlNode *node) = 0;
-
-    // Sets the parent resource.
-    void SetParentResource(wxXmlResource *res) { m_resource = res; }
-
-protected:
-    wxXmlResource *m_resource;
-    wxArrayString m_styleNames;
-    wxArrayInt m_styleValues;
-
-    // Variables (filled by CreateResource)
-    wxXmlNode *m_node;
-    wxString m_class;
-    wxObject *m_parent, *m_instance;
-    wxWindow *m_parentAsWindow;
-
     // --- Handy methods:
 
     // Returns true if the node has a property class equal to classname,
@@ -622,17 +614,30 @@
     void ReportError(const wxString& message);
     // reports input error when parsing parameter with given name
     void ReportParamError(const wxString& param, const wxString& message);
+    
+    wxXmlResourceHandler* GetHandler() { return m_handler; }
+
+private:
+    // Variables (filled by CreateResource)
+    wxXmlNode *m_node;
+    wxString m_class;
+    wxObject *m_parent, *m_instance;
+    wxWindow *m_parentAsWindow;  
+    
+    wxXmlResourceHandler *m_handler;
+    wxXmlResource *m_resource;
+    wxArrayString m_styleNames;
+    wxArrayInt m_styleValues;
 };
 
-
 // Programmer-friendly macros for writing XRC handlers:
 
 #define XRC_ADD_STYLE(style) AddStyle(wxT(#style), style)
 
 #define XRC_MAKE_INSTANCE(variable, classname) \
    classname *variable = NULL; \
-   if (m_instance) \
-       variable = wxStaticCast(m_instance, classname); \
+   if (GetInstance()) \
+       variable = wxStaticCast(GetInstance(), classname); \
    if (!variable) \
        variable = new classname;
 
Index: include/wx/xrc/xmlreshandler.h
===================================================================
--- include/wx/xrc/xmlreshandler.h	(revision 0)
+++ include/wx/xrc/xmlreshandler.h	(revision 0)
@@ -0,0 +1,199 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xmlreshandler.cpp
+// Purpose:     XML resource handler
+// Author:      Steven Lamerton
+// Created:     2011/01/26
+// RCS-ID:      
+// Copyright:   (c) 2011 Steven Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef _WX_XMLRESHANDLER_H_
+#define _WX_XMLRESHANDLER_H_
+
+#include "wx/defs.h"
+
+#if wxUSE_XRC
+
+#include "wx/xrc/xmlres.h"
+
+class WXDLLIMPEXP_CORE wxXmlResourceHandler : public wxObject
+{
+DECLARE_ABSTRACT_CLASS(wxXmlResourceHandler)
+public:
+    // Constructor.
+    wxXmlResourceHandler();
+
+    // Destructor.
+    ~wxXmlResourceHandler();
+    
+    virtual void Initialize() = 0;
+
+    // This one is called from CreateResource after variables
+    // were filled.
+    virtual wxObject *DoCreateResource() = 0;
+
+    // Returns true if it understands this node and can create
+    // a resource from it, false otherwise.
+    virtual bool CanHandle(wxXmlNode *node) = 0;
+
+    void SetParentResource(wxXmlResource *res)
+                           { GetImpl()->SetParentResource(res); }
+                           
+    void SetImpl(wxXmlResourceHandlerImpl* impl) { m_impl = impl; }
+
+    //Getters / Setter for accessing implementation variables
+    void SetNode(wxXmlNode *node) { GetImpl()->SetNode(node); }
+    wxXmlNode *GetNode() { return GetImpl()->GetNode(); }
+    wxString GetClass() { return GetImpl()->GetClass(); }
+    wxObject *GetParent() { return GetImpl()->GetParent(); }
+    wxObject *GetInstance() { return GetImpl()->GetInstance(); }
+    wxWindow *GetParentAsWindow() { return GetImpl()->GetParentAsWindow(); }
+    wxXmlResource *GetResource() { return GetImpl()->GetResource(); }
+    
+    wxObject *CreateResource(wxXmlNode *node, wxObject *parent,
+                             wxObject *instance)
+        { return GetImpl()->CreateResource(node, parent, instance); }
+
+protected:
+
+    void CreateChildren(wxObject *parent, bool this_hnd_only = false)
+        { GetImpl()->CreateChildren(parent, this_hnd_only); }
+
+    void CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode = NULL)
+        { GetImpl()->CreateChildrenPrivately(parent, rootnode); }
+
+    bool IsOfClass(wxXmlNode *node, const wxString& classname)
+        { return GetImpl()->IsOfClass(node, classname); }
+
+    wxString GetNodeContent(const wxXmlNode *node)
+        { return GetImpl()->GetNodeContent(node); }
+
+    bool HasParam(const wxString& param)
+        { return GetImpl()->HasParam(param); }
+
+    wxXmlNode *GetParamNode(const wxString& param)
+        { return GetImpl()->GetParamNode(param); }
+
+    wxString GetParamValue(const wxString& param)
+        { return GetImpl()->GetParamValue(param); };
+
+    wxString GetParamValue(const wxXmlNode* node)
+        { return GetImpl()->GetParamValue(node); }
+
+    void AddStyle(const wxString& name, int value)
+        { GetImpl()->AddStyle(name, value); }
+
+    void AddWindowStyles()
+        { GetImpl()->AddWindowStyles(); }
+
+    int GetStyle(const wxString& param = wxT("style"), int defaults = 0)
+        { return GetImpl()->GetStyle(param, defaults); }
+
+    wxString GetText(const wxString& param, bool translate = true)
+        { return GetImpl()->GetText(param, translate); }
+
+    int GetID()
+        { return GetImpl()->GetID(); }
+
+    wxString GetName()
+        { return GetImpl()->GetName(); }
+
+    bool GetBool(const wxString& param, bool defaultv = false)
+        { return GetImpl()->GetBool(param, defaultv); }
+
+    long GetLong(const wxString& param, long defaultv = 0)
+        { return GetImpl()->GetLong(param, defaultv); }
+
+    float GetFloat(const wxString& param, float defaultv = 0)
+        { return GetImpl()->GetFloat(param, defaultv); }
+
+    wxColour GetColour(const wxString& param, const wxColour& defaultv = wxNullColour)
+        { return GetImpl()->GetColour(param, defaultv); }
+
+    wxSize GetSize(const wxString& param = wxT("size"),
+                   wxWindow *windowToUse = NULL)
+        { return GetImpl()->GetSize(param, windowToUse); }
+
+    wxPoint GetPosition(const wxString& param = wxT("pos"))
+        { return GetImpl()->GetPosition(param); }
+
+    wxCoord GetDimension(const wxString& param, wxCoord defaultv = 0,
+                         wxWindow *windowToUse = NULL)
+        { return GetImpl()->GetDimension(param, defaultv, windowToUse); }
+
+    wxBitmap GetBitmap(const wxString& param = wxT("bitmap"),
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize)
+        { return GetImpl()->GetBitmap(param, defaultArtClient, size); }
+
+    wxBitmap GetBitmap(const wxXmlNode* node,
+                       const wxArtClient& defaultArtClient = wxART_OTHER,
+                       wxSize size = wxDefaultSize)
+        { return GetImpl()->GetBitmap(node, defaultArtClient, size); }
+
+    wxIcon GetIcon(const wxString& param = wxT("icon"),
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize)
+        { return GetImpl()->GetIcon(param, defaultArtClient, size); }
+
+    wxIcon GetIcon(const wxXmlNode* node,
+                   const wxArtClient& defaultArtClient = wxART_OTHER,
+                   wxSize size = wxDefaultSize)
+        { return GetImpl()->GetIcon(node, defaultArtClient, size); }
+
+    wxIconBundle GetIconBundle(const wxString& param,
+                               const wxArtClient& defaultArtClient = wxART_OTHER)
+        { return GetImpl()->GetIconBundle(param, defaultArtClient); }
+
+    wxImageList *GetImageList(const wxString& param = wxT("imagelist"))
+        { return GetImpl()->GetImageList(param); }
+
+#if wxUSE_ANIMATIONCTRL
+    wxAnimation GetAnimation(const wxString& param = wxT("animation"))
+        { return GetImpl()->GetAnimation(param); }
+#endif
+
+    wxFont GetFont(const wxString& param = wxT("font"))
+        { return GetImpl()->GetFont(param); }
+
+    bool GetBoolAttr(const wxString& attr, bool defaultv)
+        { return GetImpl()->GetBoolAttr(attr, defaultv); }
+
+    void SetupWindow(wxWindow *wnd)
+        { GetImpl()->SetupWindow(wnd); }
+
+    wxObject *CreateResFromNode(wxXmlNode *node,
+                                wxObject *parent, wxObject *instance = NULL)
+        { return GetImpl()->CreateResFromNode(node, parent, instance); }
+
+#if wxUSE_FILESYSTEM
+    wxFileSystem& GetCurFileSystem() { return GetImpl()->GetCurFileSystem(); }
+#endif
+
+    void ReportError(wxXmlNode *context, const wxString& message)
+        { return GetImpl()->ReportError(context, message); }
+
+    void ReportError(const wxString& message)
+        { return GetImpl()->ReportError(message); }
+
+    void ReportParamError(const wxString& param, const wxString& message)
+        { return GetImpl()->ReportParamError(param, message); }
+    
+    wxXmlResourceHandlerImpl* GetImpl()
+    {
+        if(!m_impl)
+        {
+            wxFAIL_MSG(wxT("Implementation not found"));
+        }
+        return m_impl;
+    }
+
+private:
+    wxXmlResourceHandlerImpl *m_impl;
+};
+
+#endif
+
+#endif
Index: src/xrc/xh_bttn.cpp
===================================================================
--- src/xrc/xh_bttn.cpp	(revision 66853)
+++ src/xrc/xh_bttn.cpp	(working copy)
@@ -19,6 +19,7 @@
 
 #include "wx/xrc/xh_bttn.h"
 
+
 #ifndef WX_PRECOMP
     #include "wx/button.h"
 #endif
@@ -28,6 +29,10 @@
 wxButtonXmlHandler::wxButtonXmlHandler()
 : wxXmlResourceHandler()
 {
+}
+
+void wxButtonXmlHandler::Initialize()
+{
     XRC_ADD_STYLE(wxBU_LEFT);
     XRC_ADD_STYLE(wxBU_RIGHT);
     XRC_ADD_STYLE(wxBU_TOP);
@@ -40,7 +45,7 @@
 {
    XRC_MAKE_INSTANCE(button, wxButton)
 
-   button->Create(m_parentAsWindow,
+   button->Create(GetParentAsWindow(),
                     GetID(),
                     GetText(wxT("label")),
                     GetPosition(), GetSize(),
Index: src/xrc/xh_richtext.cpp
===================================================================
--- src/xrc/xh_richtext.cpp	(revision 66853)
+++ src/xrc/xh_richtext.cpp	(working copy)
@@ -15,7 +15,7 @@
     #pragma hdrstop
 #endif
 
-#if wxUSE_XRC && wxUSE_RICHTEXT && wxUSE_RICHTEXT_XML_HANDLER
+#if wxUSE_XRC && wxUSE_RICHTEXT/* && wxUSE_RICHTEXT_XML_HANDLER*/
 
 #include "wx/xrc/xh_richtext.h"
 
@@ -25,6 +25,10 @@
 
 wxRichTextCtrlXmlHandler::wxRichTextCtrlXmlHandler() : wxXmlResourceHandler()
 {
+}
+
+void wxRichTextCtrlXmlHandler::Initialize()
+{
     XRC_ADD_STYLE(wxTE_PROCESS_ENTER);
     XRC_ADD_STYLE(wxTE_PROCESS_TAB);
     XRC_ADD_STYLE(wxTE_MULTILINE);
@@ -38,7 +42,7 @@
 {
     XRC_MAKE_INSTANCE(text, wxRichTextCtrl)
 
-    text->Create(m_parentAsWindow,
+    text->Create(GetParentAsWindow(),
                  GetID(),
                  GetText(wxT("value")),
                  GetPosition(), GetSize(),
Index: src/xrc/xmladv.cpp
===================================================================
--- src/xrc/xmladv.cpp	(revision 66853)
+++ src/xrc/xmladv.cpp	(working copy)
@@ -38,7 +38,7 @@
 // ============================================================================
 
 #if wxUSE_ANIMATIONCTRL
-wxAnimation wxXmlResourceHandler::GetAnimation(const wxString& param)
+wxAnimation wxXmlResourceHandlerImpl::GetAnimation(const wxString& param)
 {
     const wxString name = GetParamValue(param);
     if ( name.empty() )
Index: src/xrc/xmlres.cpp
===================================================================
--- src/xrc/xmlres.cpp	(revision 66853)
+++ src/xrc/xmlres.cpp	(working copy)
@@ -49,6 +49,7 @@
 #include "wx/xml/xml.h"
 #include "wx/hashset.h"
 #include "wx/scopedptr.h"
+#include "wx/xrc/xmlreshandler.h"
 
 namespace
 {
@@ -430,16 +431,22 @@
 }
 
 
-IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+IMPLEMENT_CLASS(wxXmlResourceHandlerImpl, wxObject)
 
 void wxXmlResource::AddHandler(wxXmlResourceHandler *handler)
 {
+    wxXmlResourceHandlerImpl *impl = new wxXmlResourceHandlerImpl(handler);
+    handler->SetImpl(impl);
+    handler->Initialize();
     m_handlers.push_back(handler);
     handler->SetParentResource(this);
 }
 
 void wxXmlResource::InsertHandler(wxXmlResourceHandler *handler)
 {
+    wxXmlResourceHandlerImpl *impl = new wxXmlResourceHandlerImpl(handler);
+    handler->SetImpl(impl);
+    handler->Initialize();
     m_handlers.insert(m_handlers.begin(), handler);
     handler->SetParentResource(this);
 }
@@ -1402,14 +1409,14 @@
 
 
 
-wxXmlResourceHandler::wxXmlResourceHandler()
+wxXmlResourceHandlerImpl::wxXmlResourceHandlerImpl(wxXmlResourceHandler *handler)
         : m_node(NULL), m_parent(NULL), m_instance(NULL),
-          m_parentAsWindow(NULL)
-{}
+          m_parentAsWindow(NULL), m_handler(handler)
+{
+}
 
 
-
-wxObject *wxXmlResourceHandler::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
+wxObject *wxXmlResourceHandlerImpl::CreateResource(wxXmlNode *node, wxObject *parent, wxObject *instance)
 {
     wxXmlNode *myNode = m_node;
     wxString myClass = m_class;
@@ -1452,7 +1459,7 @@
     m_parent = parent;
     m_parentAsWindow = wxDynamicCast(m_parent, wxWindow);
 
-    wxObject *returned = DoCreateResource();
+    wxObject *returned = GetHandler()->DoCreateResource();
 
     m_node = myNode;
     m_class = myClass;
@@ -1462,16 +1469,13 @@
     return returned;
 }
 
-
-void wxXmlResourceHandler::AddStyle(const wxString& name, int value)
+void wxXmlResourceHandlerImpl::AddStyle(const wxString& name, int value)
 {
     m_styleNames.Add(name);
     m_styleValues.Add(value);
 }
 
-
-
-void wxXmlResourceHandler::AddWindowStyles()
+void wxXmlResourceHandlerImpl::AddWindowStyles()
 {
     XRC_ADD_STYLE(wxCLIP_CHILDREN);
 
@@ -1494,15 +1498,13 @@
     XRC_ADD_STYLE(wxWS_EX_VALIDATE_RECURSIVELY);
 }
 
-
-
-bool wxXmlResourceHandler::HasParam(const wxString& param)
+bool wxXmlResourceHandlerImpl::HasParam(const wxString& param)
 {
     return (GetParamNode(param) != NULL);
 }
 
 
-int wxXmlResourceHandler::GetStyle(const wxString& param, int defaults)
+int wxXmlResourceHandlerImpl::GetStyle(const wxString& param, int defaults)
 {
     wxString s = GetParamValue(param);
 
@@ -1534,7 +1536,7 @@
 
 
 
-wxString wxXmlResourceHandler::GetText(const wxString& param, bool translate)
+wxString wxXmlResourceHandlerImpl::GetText(const wxString& param, bool translate)
 {
     wxXmlNode *parNode = GetParamNode(param);
     wxString str1(GetNodeContent(parNode));
@@ -1624,7 +1626,7 @@
 
 
 
-long wxXmlResourceHandler::GetLong(const wxString& param, long defaultv)
+long wxXmlResourceHandlerImpl::GetLong(const wxString& param, long defaultv)
 {
     long value;
     wxString str1 = GetParamValue(param);
@@ -1635,7 +1637,7 @@
     return value;
 }
 
-float wxXmlResourceHandler::GetFloat(const wxString& param, float defaultv)
+float wxXmlResourceHandlerImpl::GetFloat(const wxString& param, float defaultv)
 {
     wxString str = GetParamValue(param);
 
@@ -1650,27 +1652,27 @@
 }
 
 
-int wxXmlResourceHandler::GetID()
+int wxXmlResourceHandlerImpl::GetID()
 {
     return wxXmlResource::GetXRCID(GetName());
 }
 
 
 
-wxString wxXmlResourceHandler::GetName()
+wxString wxXmlResourceHandlerImpl::GetName()
 {
     return m_node->GetAttribute(wxT("name"), wxT("-1"));
 }
 
 
 
-bool wxXmlResourceHandler::GetBoolAttr(const wxString& attr, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBoolAttr(const wxString& attr, bool defaultv)
 {
     wxString v;
     return m_node->GetAttribute(attr, &v) ? v == '1' : defaultv;
 }
 
-bool wxXmlResourceHandler::GetBool(const wxString& param, bool defaultv)
+bool wxXmlResourceHandlerImpl::GetBool(const wxString& param, bool defaultv)
 {
     const wxString v = GetParamValue(param);
 
@@ -1727,7 +1729,7 @@
     return wxNullColour;
 }
 
-wxColour wxXmlResourceHandler::GetColour(const wxString& param, const wxColour& defaultv)
+wxColour wxXmlResourceHandlerImpl::GetColour(const wxString& param, const wxColour& defaultv)
 {
     wxString v = GetParamValue(param);
 
@@ -1787,7 +1789,7 @@
 
 } // anonymous namespace
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxString& param,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxString& param,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1808,7 +1810,7 @@
     return GetBitmap(node, defaultArtClient, size);
 }
 
-wxBitmap wxXmlResourceHandler::GetBitmap(const wxXmlNode* node,
+wxBitmap wxXmlResourceHandlerImpl::GetBitmap(const wxXmlNode* node,
                                          const wxArtClient& defaultArtClient,
                                          wxSize size)
 {
@@ -1858,7 +1860,7 @@
 }
 
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxString& param,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxString& param,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1876,7 +1878,7 @@
     return GetIcon(node, defaultArtClient, size);
 }
 
-wxIcon wxXmlResourceHandler::GetIcon(const wxXmlNode* node,
+wxIcon wxXmlResourceHandlerImpl::GetIcon(const wxXmlNode* node,
                                      const wxArtClient& defaultArtClient,
                                      wxSize size)
 {
@@ -1886,7 +1888,7 @@
 }
 
 
-wxIconBundle wxXmlResourceHandler::GetIconBundle(const wxString& param,
+wxIconBundle wxXmlResourceHandlerImpl::GetIconBundle(const wxString& param,
                                                  const wxArtClient& defaultArtClient)
 {
     wxString art_id, art_client;
@@ -1934,7 +1936,7 @@
 }
 
 
-wxImageList *wxXmlResourceHandler::GetImageList(const wxString& param)
+wxImageList *wxXmlResourceHandlerImpl::GetImageList(const wxString& param)
 {
     wxXmlNode * const imagelist_node = GetParamNode(param);
     if ( !imagelist_node )
@@ -1982,7 +1984,7 @@
     return imagelist;
 }
 
-wxXmlNode *wxXmlResourceHandler::GetParamNode(const wxString& param)
+wxXmlNode *wxXmlResourceHandlerImpl::GetParamNode(const wxString& param)
 {
     wxCHECK_MSG(m_node, NULL, wxT("You can't access handler data before it was initialized!"));
 
@@ -2005,15 +2007,14 @@
     return NULL;
 }
 
-/* static */
-bool wxXmlResourceHandler::IsOfClass(wxXmlNode *node, const wxString& classname)
+bool wxXmlResourceHandlerImpl::IsOfClass(wxXmlNode *node, const wxString& classname)
 {
     return node->GetAttribute(wxT("class")) == classname;
 }
 
 
 
-wxString wxXmlResourceHandler::GetNodeContent(const wxXmlNode *node)
+wxString wxXmlResourceHandlerImpl::GetNodeContent(const wxXmlNode *node)
 {
     const wxXmlNode *n = node;
     if (n == NULL) return wxEmptyString;
@@ -2031,7 +2032,7 @@
 
 
 
-wxString wxXmlResourceHandler::GetParamValue(const wxString& param)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxString& param)
 {
     if (param.empty())
         return GetNodeContent(m_node);
@@ -2039,13 +2040,13 @@
         return GetNodeContent(GetParamNode(param));
 }
 
-wxString wxXmlResourceHandler::GetParamValue(const wxXmlNode* node)
+wxString wxXmlResourceHandlerImpl::GetParamValue(const wxXmlNode* node)
 {
     return GetNodeContent(node);
 }
 
 
-wxSize wxXmlResourceHandler::GetSize(const wxString& param,
+wxSize wxXmlResourceHandlerImpl::GetSize(const wxString& param,
                                      wxWindow *windowToUse)
 {
     wxString s = GetParamValue(param);
@@ -2093,7 +2094,7 @@
 
 
 
-wxPoint wxXmlResourceHandler::GetPosition(const wxString& param)
+wxPoint wxXmlResourceHandlerImpl::GetPosition(const wxString& param)
 {
     wxSize sz = GetSize(param);
     return wxPoint(sz.x, sz.y);
@@ -2101,7 +2102,7 @@
 
 
 
-wxCoord wxXmlResourceHandler::GetDimension(const wxString& param,
+wxCoord wxXmlResourceHandlerImpl::GetDimension(const wxString& param,
                                            wxCoord defaultv,
                                            wxWindow *windowToUse)
 {
@@ -2168,7 +2169,7 @@
     return wxNullFont;
 }
 
-wxFont wxXmlResourceHandler::GetFont(const wxString& param)
+wxFont wxXmlResourceHandlerImpl::GetFont(const wxString& param)
 {
     wxXmlNode *font_node = GetParamNode(param);
     if (font_node == NULL)
@@ -2307,7 +2308,7 @@
 }
 
 
-void wxXmlResourceHandler::SetupWindow(wxWindow *wnd)
+void wxXmlResourceHandlerImpl::SetupWindow(wxWindow *wnd)
 {
     //FIXME : add cursor
 
@@ -2342,21 +2343,20 @@
         wnd->SetHelpText(GetText(wxT("help")));
 }
 
-
-void wxXmlResourceHandler::CreateChildren(wxObject *parent, bool this_hnd_only)
+void wxXmlResourceHandlerImpl::CreateChildren(wxObject *parent, bool this_hnd_only)
 {
     for ( wxXmlNode *n = m_node->GetChildren(); n; n = n->GetNext() )
     {
         if ( IsObjectNode(n) )
         {
             m_resource->DoCreateResFromNode(*n, parent, NULL,
-                                            this_hnd_only ? this : NULL);
-        }
+                                            this_hnd_only ? this->GetHandler() : NULL);
+       }
     }
 }
 
 
-void wxXmlResourceHandler::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
+void wxXmlResourceHandlerImpl::CreateChildrenPrivately(wxObject *parent, wxXmlNode *rootnode)
 {
     wxXmlNode *root;
     if (rootnode == NULL) root = m_node; else root = rootnode;
@@ -2364,7 +2364,7 @@
 
     while (n)
     {
-        if (n->GetType() == wxXML_ELEMENT_NODE && CanHandle(n))
+        if (n->GetType() == wxXML_ELEMENT_NODE && GetHandler()->CanHandle(n))
         {
             CreateResource(n, parent, NULL);
         }
@@ -2372,23 +2372,22 @@
     }
 }
 
-
 //-----------------------------------------------------------------------------
 // errors reporting
 //-----------------------------------------------------------------------------
 
-void wxXmlResourceHandler::ReportError(const wxString& message)
+void wxXmlResourceHandlerImpl::ReportError(const wxString& message)
 {
     m_resource->ReportError(m_node, message);
 }
 
-void wxXmlResourceHandler::ReportError(wxXmlNode *context,
+void wxXmlResourceHandlerImpl::ReportError(wxXmlNode *context,
                                        const wxString& message)
 {
     m_resource->ReportError(context ? context : m_node, message);
 }
 
-void wxXmlResourceHandler::ReportParamError(const wxString& param,
+void wxXmlResourceHandlerImpl::ReportParamError(const wxString& param,
                                             const wxString& message)
 {
     m_resource->ReportError(GetParamNode(param), message);
Index: src/xrc/xmlreshandler.cpp
===================================================================
--- src/xrc/xmlreshandler.cpp	(revision 0)
+++ src/xrc/xmlreshandler.cpp	(revision 0)
@@ -0,0 +1,34 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xmlreshandler.cpp
+// Purpose:     XML resource handler
+// Author:      Steven Lamerton
+// Created:     2011/01/26
+// RCS-ID:      
+// Copyright:   (c) 2011 Steven Lamerton
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC
+
+#include "wx/xrc/xmlreshandler.h"
+
+IMPLEMENT_ABSTRACT_CLASS(wxXmlResourceHandler, wxObject)
+
+wxXmlResourceHandler::wxXmlResourceHandler()
+{
+    m_impl = NULL;
+}
+
+wxXmlResourceHandler::~wxXmlResourceHandler()
+{
+    wxDELETE(m_impl);
+}
+
+#endif
+
Index: src/xrc/xmlrsall.cpp
===================================================================
--- src/xrc/xmlrsall.cpp	(revision 66853)
+++ src/xrc/xmlrsall.cpp	(working copy)
@@ -23,19 +23,19 @@
 void wxXmlResource::InitAllHandlers()
 {
     // these are the handlers, which we always have
-    AddHandler(new wxUnknownWidgetXmlHandler);
+    /*AddHandler(new wxUnknownWidgetXmlHandler);
     AddHandler(new wxBitmapXmlHandler);
     AddHandler(new wxIconXmlHandler);
     AddHandler(new wxDialogXmlHandler);
     AddHandler(new wxPanelXmlHandler);
     AddHandler(new wxSizerXmlHandler);
     AddHandler(new wxFrameXmlHandler);
-    AddHandler(new wxScrolledWindowXmlHandler);
+    AddHandler(new wxScrolledWindowXmlHandler);*/
 
     // these are configurable handlers
     //
     // please keep them in alphabetical order of wxUSE_XXX guards
-#if wxUSE_ANIMATIONCTRL
+/*#if wxUSE_ANIMATIONCTRL
     AddHandler(new wxAnimationCtrlXmlHandler);
 #endif
 #if wxUSE_BITMAPCOMBOBOX
@@ -46,12 +46,12 @@
 #endif
 #if wxUSE_BOOKCTRL
     AddHandler(new wxPropertySheetDialogXmlHandler);
-#endif
+#endif*/
 #if wxUSE_BUTTON
-    AddHandler(new wxStdDialogButtonSizerXmlHandler);
+    //AddHandler(new wxStdDialogButtonSizerXmlHandler);
     AddHandler(new wxButtonXmlHandler);
 #endif
-#if wxUSE_CALENDARCTRL
+/*#if wxUSE_CALENDARCTRL
     AddHandler(new wxCalendarCtrlXmlHandler);
 #endif
 #if wxUSE_CHECKBOX
@@ -199,7 +199,7 @@
 #endif
 #if wxUSE_WIZARDDLG
     AddHandler(new wxWizardXmlHandler);
-#endif
+#endif*/
 }
 
 #endif // wxUSE_XRC

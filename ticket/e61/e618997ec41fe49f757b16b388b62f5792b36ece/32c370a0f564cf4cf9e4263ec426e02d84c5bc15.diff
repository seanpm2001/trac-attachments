Index: include/wx/strconv.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/strconv.h,v
retrieving revision 1.36
diff -u -2 -r1.36 strconv.h
--- include/wx/strconv.h	2005/03/24 00:59:05	1.36
+++ include/wx/strconv.h	2005/03/26 18:52:17
@@ -102,9 +102,14 @@
 // ----------------------------------------------------------------------------
 
+enum { wxMAP_INVALID_UTF8_TO_PUA = 1 };
+
 class WXDLLIMPEXP_BASE wxMBConvUTF8 : public wxMBConv
 {
 public:
+    wxMBConvUTF8(int options = 0) : m_options(options) { }
     virtual size_t MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const;
     virtual size_t WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const;
+private:
+    int m_options;
 };
 
Index: samples/docview/docview.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/docview/docview.cpp,v
retrieving revision 1.24
diff -u -2 -r1.24 docview.cpp
--- samples/docview/docview.cpp	2004/09/24 23:14:01	1.24
+++ samples/docview/docview.cpp	2005/03/26 18:52:32
@@ -45,4 +45,7 @@
 #endif
 
+#include <locale.h>
+#include <langinfo.h>
+
 MyFrame *frame = (MyFrame *) NULL;
 
@@ -159,4 +162,8 @@
     
     SetTopWindow(frame);
+
+    setlocale(LC_ALL, "");
+    setenv("G_FILENAME_ENCODING", nl_langinfo(CODESET), false);
+
     return true;
 }
Index: src/common/strconv.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/strconv.cpp,v
retrieving revision 1.136
diff -u -2 -r1.136 strconv.cpp
--- src/common/strconv.cpp	2005/03/26 12:14:40	1.136
+++ src/common/strconv.cpp	2005/03/26 18:53:28
@@ -56,4 +56,7 @@
 #include <string.h>
 #include <stdlib.h>
+#ifdef HAVE_LANGINFO_H
+  #include <langinfo.h>
+#endif
 
 #if defined(__WIN32__) && !defined(__WXMICROWIN__)
@@ -368,26 +371,36 @@
 {
 public:
+    wxConvBrokenFileNames() : m_utf8conv(wxMAP_INVALID_UTF8_TO_PUA) { }
     virtual size_t MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const;
     virtual size_t WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const;
+    inline bool UseUTF8() const;
+private:
+    wxMBConvUTF8 m_utf8conv;
 };
 
+bool wxConvBrokenFileNames::UseUTF8() const
+{
+#if defined HAVE_LANGINFO_H && defined CODESET
+    char *codeset = nl_langinfo(CODESET);
+    return strcmp(codeset, "UTF-8") == 0;
+#else
+    return false;
+#endif
+}
+
 size_t wxConvBrokenFileNames::MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const
 {
-#if 0
-    if (we find some invalid characters)
-    {
-       Convert to Unicode range.
-    }
+    if (UseUTF8())
+        return m_utf8conv.MB2WC( outputBuf, psz, outputSize );
     else
-#endif
-    return wxMBConvLibc::MB2WC( outputBuf, psz, outputSize );
+        return wxMBConvLibc::MB2WC( outputBuf, psz, outputSize );
 }
 
 size_t wxConvBrokenFileNames::WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const
 {
-#if 0
-    Convert back from Unicode range.
-#endif
-    return wxMBConvLibc::WC2MB( outputBuf, psz, outputSize );
+    if (UseUTF8())
+        return m_utf8conv.WC2MB( outputBuf, psz, outputSize );
+    else
+        return wxMBConvLibc::WC2MB( outputBuf, psz, outputSize );
 }
 
@@ -603,4 +616,7 @@
     { 0x7f, 0x7ff, 0xffff, 0x1fffff, 0x3ffffff, 0x7fffffff, 0xffffffff };
 
+const wxUint32 wxUnicodePUA = 0x100000;
+const wxUint32 wxUnicodePUAEnd = wxUnicodePUA + 256;
+
 size_t wxMBConvUTF8::MB2WC(wchar_t *buf, const char *psz, size_t n) const
 {
@@ -609,4 +625,6 @@
     while (*psz && ((!buf) || (len < n)))
     {
+        const char *opsz = psz;
+        bool invalid = false;
         unsigned char cc = *psz++, fc = cc;
         unsigned cnt;
@@ -626,5 +644,5 @@
             {
                 // invalid UTF-8 sequence
-                return (size_t)-1;
+                invalid = true;
             }
             else
@@ -634,31 +652,76 @@
                 while (cnt--)
                 {
-                    cc = *psz++;
+                    cc = *psz;
                     if ((cc & 0xC0) != 0x80)
                     {
                         // invalid UTF-8 sequence
-                        return (size_t)-1;
+                        invalid = true;
+                        break;
                     }
+                    psz++;
                     res = (res << 6) | (cc & 0x3f);
                 }
-                if (res <= utf8_max[ocnt])
+                if (invalid || res <= utf8_max[ocnt])
                 {
                     // illegal UTF-8 encoding
-                    return (size_t)-1;
+                    invalid = true;
                 }
+                else if ((m_options & wxMAP_INVALID_UTF8_TO_PUA) &&
+                        res >= wxUnicodePUA && res < wxUnicodePUAEnd)
+                {
+                    // if one of our PUA characters turns up externally
+                    // it must also be treated as an illegal sequence
+                    // (a bit like you have to escape an escape character)
+                    invalid = true;
+                }
+                else
+                {
 #ifdef WC_UTF16
-                // cast is ok because wchar_t == wxUuint16 if WC_UTF16
-                size_t pa = encode_utf16(res, (wxUint16 *)buf);
-                if (pa == (size_t)-1)
-                  return (size_t)-1;
-                if (buf)
-                    buf += pa;
-                len += pa;
+                    // cast is ok because wchar_t == wxUuint16 if WC_UTF16
+                    size_t pa = encode_utf16(res, (wxUint16 *)buf);
+                    if (pa == (size_t)-1)
+                    {
+                        invalid = true;
+                    }
+                    else
+                    {
+                        if (buf)
+                            buf += pa;
+                        len += pa;
+                    }
 #else // !WC_UTF16
-                if (buf)
-                    *buf++ = res;
-                len++;
+                    if (buf)
+                        *buf++ = res;
+                    len++;
 #endif // WC_UTF16/!WC_UTF16
+                }
             }
+            if (invalid)
+            {
+                if (m_options & wxMAP_INVALID_UTF8_TO_PUA)
+                {
+                    while (opsz < psz && (!buf || len < n))
+                    {
+#ifdef WC_UTF16
+                        // cast is ok because wchar_t == wxUuint16 if WC_UTF16
+                        size_t pa = encode_utf16((unsigned char)*opsz + wxUnicodePUA, (wxUint16 *)buf);
+                        wxASSERT(pa != (size_t)-1);
+                        if (buf)
+                            buf += pa;
+                        opsz++;
+                        len += pa;
+#else
+                        if (buf)
+                            *buf++ = wxUnicodePUA + (unsigned char)*opsz;
+                        opsz++;
+                        len++;
+#endif
+                    }
+                }
+                else
+                {
+                    return (size_t)-1;
+                }
+            }
         }
     }
@@ -682,22 +745,32 @@
         cc=(*psz++) & 0x7fffffff;
 #endif
-        unsigned cnt;
-        for (cnt = 0; cc > utf8_max[cnt]; cnt++) {}
-        if (!cnt)
+        if ((m_options & wxMAP_INVALID_UTF8_TO_PUA)
+            && cc >= wxUnicodePUA && cc < wxUnicodePUAEnd)
         {
-            // plain ASCII char
             if (buf)
-                *buf++ = (char) cc;
+                *buf++ = (char)(cc - wxUnicodePUA);
             len++;
         }
-
         else
         {
-            len += cnt + 1;
-            if (buf)
+            unsigned cnt;
+            for (cnt = 0; cc > utf8_max[cnt]; cnt++) {}
+            if (!cnt)
             {
-                *buf++ = (char) ((-128 >> cnt) | ((cc >> (cnt * 6)) & (0x3f >> cnt)));
-                while (cnt--)
-                    *buf++ = (char) (0x80 | ((cc >> (cnt * 6)) & 0x3f));
+                // plain ASCII char
+                if (buf)
+                    *buf++ = (char) cc;
+                len++;
+            }
+
+            else
+            {
+                len += cnt + 1;
+                if (buf)
+                {
+                    *buf++ = (char) ((-128 >> cnt) | ((cc >> (cnt * 6)) & (0x3f >> cnt)));
+                    while (cnt--)
+                        *buf++ = (char) (0x80 | ((cc >> (cnt * 6)) & 0x3f));
+                }
             }
         }
@@ -709,7 +782,4 @@
 }
 
-
-
-
 // ----------------------------------------------------------------------------
 // UTF-16
@@ -2628,4 +2698,5 @@
 static wxMBConvUTF7 wxConvUTF7Obj;
 static wxMBConvUTF8 wxConvUTF8Obj;
+static wxConvBrokenFileNames wxConvBrokenFileNamesObj;
 
 WXDLLIMPEXP_DATA_BASE(wxMBConv&) wxConvLibc = wxConvLibcObj;
@@ -2637,7 +2708,9 @@
 WXDLLIMPEXP_DATA_BASE(wxMBConv *) wxConvFileName = &
 #ifdef __WXOSX__
-                                                    wxConvUTF8Obj;
+                                    wxConvUTF8Obj;
+#elif __WXGTK20__
+                                    wxConvBrokenFileNamesObj;
 #else
-                                                    wxConvLibcObj;
+                                    wxConvLibcObj;
 #endif
 
Index: src/gtk/filedlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/filedlg.cpp,v
retrieving revision 1.60
diff -u -2 -r1.60 filedlg.cpp
--- src/gtk/filedlg.cpp	2005/03/24 02:49:20	1.60
+++ src/gtk/filedlg.cpp	2005/03/26 18:54:33
@@ -45,5 +45,5 @@
     int style = dialog->GetStyle();
     gchar* text = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(widget));
-    wxString filename(wxGTK_CONV_BACK(text));
+    wxString filename(text, wxConvFile);
     if ( filename.empty() )
     {

 	  	 

diff -rU 2 -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/include/wx/bmpbuttn.h wxWidgets/include/wx/bmpbuttn.h
--- wxWidgets.orig/include/wx/bmpbuttn.h	2004-06-25 06:04:06.000000000 +1000
+++ wxWidgets/include/wx/bmpbuttn.h	2005-01-09 05:15:52.023043784 +1100
@@ -17,4 +17,7 @@
 #if wxUSE_BMPBUTTON
 
+// disable drawing of button using XP themes
+#define wxBU_NO_XP_THEME     0x0400
+
 #include "wx/bitmap.h"
 #include "wx/button.h"
diff -rU 2 -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/include/wx/msw/bmpbuttn.h wxWidgets/include/wx/msw/bmpbuttn.h
--- wxWidgets.orig/include/wx/msw/bmpbuttn.h	2004-10-03 23:46:10.000000000 +1000
+++ wxWidgets/include/wx/msw/bmpbuttn.h	2005-01-09 05:16:26.481805256 +1100
@@ -20,4 +20,7 @@
 #include "wx/bitmap.h"
 #include "wx/brush.h"
+#if wxUSE_UXTHEME
+#include "wx/msw/uxtheme.h"
+#endif
 
 #define wxDEFAULT_BUTTON_MARGIN 4
@@ -39,4 +42,7 @@
         Create(parent, id, bitmap, pos, size, style, validator, name);
     }
+#if wxUSE_UXTHEME
+    virtual ~wxBitmapButton();
+#endif
 
     bool Create(wxWindow *parent,
@@ -52,4 +58,7 @@
     virtual bool SetBackgroundColour(const wxColour& colour);
     virtual void SetDefault();
+#if wxUSE_UXTHEME
+    virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam);
+#endif
     virtual bool MSWOnDraw(WXDRAWITEMSTRUCT *item);
     virtual void DrawFace( WXHDC dc, int left, int top, int right, int bottom, bool sel );
@@ -63,4 +72,9 @@
     void OnSysColourChanged(wxSysColourChangedEvent& event);
 
+#if wxUSE_UXTHEME
+    // can't use wxUxThemeHandle since we need to handle WM_THEMECHANGED
+    WXHTHEME m_hTheme;
+    bool m_isHot;
+#endif
 
     // the brush we use to draw disabled buttons
diff -rU 2 -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/samples/controls/controls.cpp wxWidgets/samples/controls/controls.cpp
--- wxWidgets.orig/samples/controls/controls.cpp	2004-12-13 05:32:26.000000000 +1100
+++ wxWidgets/samples/controls/controls.cpp	2005-01-09 05:16:06.237882800 +1100
@@ -890,5 +890,6 @@
                                   panel, wxID_ANY,
                                   bmp1,
-                                  wxPoint(30, 70)
+                                  wxPoint(250, 80),
+				  wxSize(500, 200)
                                  );
 
diff -rU 2 -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/src/msw/bmpbuttn.cpp wxWidgets/src/msw/bmpbuttn.cpp
--- wxWidgets.orig/src/msw/bmpbuttn.cpp	2004-10-29 08:43:02.000000000 +1000
+++ wxWidgets/src/msw/bmpbuttn.cpp	2005-01-09 05:15:40.534790264 +1100
@@ -32,4 +32,10 @@
 #include "wx/image.h"
 
+#if wxUSE_UXTHEME
+    #include <commctrl.h>
+    #include <tmschema.h>
+    #include "wx/msw/uxtheme.h"
+#endif
+
 // ----------------------------------------------------------------------------
 // macros
@@ -113,4 +119,16 @@
     const wxString& name)
 {
+#if wxUSE_UXTHEME
+    if ( style & wxBU_NO_XP_THEME )
+        m_hTheme = NULL;
+    else
+    {
+        wxUxThemeEngine *engine = wxUxThemeEngine::GetIfActive();
+        m_hTheme =
+            engine ? (WXHTHEME)engine->OpenThemeData(GetHWND(), L"Button")
+                   : NULL;
+    }
+    m_isHot = false;
+#endif
     m_bmpNormal = bitmap;
     SetName(name);
@@ -174,4 +192,12 @@
 }
 
+#if wxUSE_UXTHEME
+wxBitmapButton::~wxBitmapButton()
+{
+    if ( m_hTheme )
+        wxUxThemeEngine::Get()->CloseThemeData(m_hTheme);
+}
+#endif
+
 bool wxBitmapButton::SetBackgroundColour(const wxColour& colour)
 {
@@ -206,4 +232,5 @@
 bool wxBitmapButton::MSWOnDraw(WXDRAWITEMSTRUCT *item)
 {
+//    wxLogMessage(_("Drawing"));
 #ifndef __WXWINCE__
     long style = GetWindowLong((HWND) GetHWND(), GWL_STYLE);
@@ -222,4 +249,32 @@
     bool autoDraw          = (GetWindowStyleFlag() & wxBU_AUTODRAW) != 0;
 
+#if wxUSE_UXTHEME
+    if ( m_hTheme )
+    {
+        int iState;
+
+        if ( m_isHot )
+// can't use this since it updates during OnInternalIdle, but we would need another paint message
+//        if (m_mouseInWindow)
+        {
+            if ( isSelected )
+                iState = PBS_PRESSED; // ODS_SELECTED
+            else
+                iState = PBS_HOT; // ODS_HOTLIGHT
+        }
+        else if ( state & ODS_FOCUS )
+            iState = PBS_DEFAULTED; // ODS_DEFAULT
+        else if ( state & ODS_DISABLED )
+            iState = PBS_DISABLED; // ODS_DISABLED
+//        else if ( state & ODS_HOTLIGHT )
+//            iState = PBS_HOT; // ODS_HOTLIGHT
+        else
+            iState = PBS_NORMAL;
+
+        wxUxThemeEngine::Get()->DrawThemeBackground(m_hTheme, hDC,
+                                                    BP_PUSHBUTTON, iState,
+                                                    &(lpDIS->rcItem), NULL);
+    }
+#endif
 
     // choose the bitmap to use depending on the button state
@@ -239,4 +294,5 @@
 
     // centre the bitmap in the control area
+    // TODO: probably need to fix this if using themes
     int x      = lpDIS->rcItem.left;
     int y      = lpDIS->rcItem.top;
@@ -262,5 +318,10 @@
         y1 = y + (height - hBmp) / 2;
 
+#if wxUSE_UXTHEME
+    // don't shift the bitmap if using themes
+    if ( !m_hTheme && isSelected && autoDraw )
+#else
     if ( isSelected && autoDraw )
+#endif
     {
         x1++;
@@ -268,6 +329,11 @@
     }
 
+#if wxUSE_UXTHEME
+    // not with themes enabled
+    if ( !m_hTheme && autoDraw )
+#else
     // draw the face, if auto-drawing
     if ( autoDraw )
+#endif
     {
         DrawFace((WXHDC) hDC,
@@ -282,4 +348,9 @@
     dst.DrawBitmap(*bitmap, x1, y1, true);
 
+#if wxUSE_UXTHEME
+    // not with themes enabled
+    if ( !m_hTheme )
+    {
+#endif
     // draw focus / disabled state, if auto-drawing
     if ( (state & ODS_DISABLED) && autoDraw )
@@ -299,4 +370,7 @@
                         isSelected);
     }
+#if wxUSE_UXTHEME
+    }
+#endif
 
     return true;
@@ -322,8 +396,8 @@
     penShadow   = CreatePen(PS_SOLID, 0, GetSysColor(COLOR_3DSHADOW));
     penDkShadow = CreatePen(PS_SOLID, 0, GetSysColor(COLOR_3DDKSHADOW));
-    // brushFace   = CreateSolidBrush(GetSysColor(COLOR_BTNFACE));
+    brushFace   = CreateSolidBrush(GetSysColor(COLOR_BTNFACE));
     // Taking the background colour fits in better with
     // Windows XP themes.
-    brushFace   = CreateSolidBrush(m_backgroundColour.m_pixel);
+//    brushFace   = CreateSolidBrush(m_backgroundColour.m_pixel);
 
     // draw the rectangle
@@ -495,4 +569,26 @@
     if ( m_bmpNormal.Ok() )
     {
+#if wxUSE_UXTHEME
+        if ( m_hTheme )
+        {
+            RECT crect;
+            RECT erect;
+
+            crect.top    = 0;
+            crect.left   = 0;
+            crect.right  = m_bmpNormal.GetWidth();
+            crect.bottom = m_bmpNormal.GetHeight();
+
+//        wxLogMessage(wxString::Format(_("CRECT: left %d, right %d, top %d, bottom %d"), crect.left, crect.right, crect.top, crect.bottom));
+
+          wxUxThemeEngine::Get()->GetThemeBackgroundExtent(m_hTheme, NULL,
+                                                           BP_PUSHBUTTON,
+                                                           PBS_NORMAL,
+                                                           &crect, &erect);
+
+//        wxLogMessage(wxString::Format(_("ERECT: left %d, right %d, top %d, bottom %d"), erect.left, erect.right, erect.top, erect.bottom));
+            return wxSize(erect.right - erect.left + 2, erect.bottom - erect.top + 2);
+        }
+#endif
         return wxSize(m_bmpNormal.GetWidth() + 2*m_marginX,
                       m_bmpNormal.GetHeight() + 2*m_marginY);
@@ -503,4 +599,61 @@
 }
 
+#if wxUSE_UXTHEME
+WXLRESULT wxBitmapButton::MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
+{
+    if ( (GetWindowStyleFlag() & wxBU_NO_XP_THEME) == 0 )
+    {
+// perhaps there should be a wxThemeChangedEvent?
+#ifndef WM_THEMECHANGED
+#define WM_THEMECHANGED 0x031A
+#endif
+        if ( nMsg == WM_THEMECHANGED )
+        {
+//            wxLogMessage(_("ThemeChanged"));
+            // destroy old theme handle if exists
+            if ( m_hTheme )
+                wxUxThemeEngine::Get()->CloseThemeData(m_hTheme);
+
+            // try and create a new one
+            wxUxThemeEngine *engine = wxUxThemeEngine::GetIfActive();
+            m_hTheme =
+                engine ? (WXHTHEME)engine->OpenThemeData(GetHWND(), L"Button")
+                       : NULL;
+
+            // need to resize button here as theme might have changed sizes
+            InvalidateBestSize();
+        }
+        // have this here so as not to Refresh() if not needed
+        if ( m_hTheme )
+        {
+            if ( nMsg == WM_MOUSEMOVE && !m_isHot )
+            {
+//                wxLogMessage(_("MouseMove"));
+                m_isHot = true;
+                Refresh();
+
+#if 1 // nasty hack, since this is commented out in src/msw/window.cpp
+                TRACKMOUSEEVENT tme;
+
+                tme.cbSize = sizeof(tme);
+                tme.dwFlags = TME_LEAVE;
+                tme.hwndTrack = GetHwnd();
+
+                ::_TrackMouseEvent(&tme);
+#endif
+            }
+            else if (nMsg == WM_MOUSELEAVE)
+            {
+//                wxLogMessage(_("MouseLeave"));
+                m_isHot = false;
+                Refresh();
+            }
+        }
+    }
+
+    return wxButton::MSWWindowProc(nMsg, wParam, lParam);
+}
+#endif
+
 #endif // wxUSE_BMPBUTTON
 

 	  	 

Index: include/wx/cocoa/slider.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/cocoa/slider.h,v
retrieving revision 1.4
diff -b -u -2 -r1.4 slider.h
--- include/wx/cocoa/slider.h	2004/05/23 20:50:42	1.4
+++ include/wx/cocoa/slider.h	2005/02/15 09:19:17
@@ -2,9 +2,9 @@
 // Name:        wx/cocoa/slider.h
 // Purpose:     wxSlider class
-// Author:      David Elliott
+// Author:      Ryan Norton
 // Modified by:
 // Created:     2003/06/19
 // RCS-ID:      $Id: slider.h,v 1.4 2004/05/23 20:50:42 JS Exp $
-// Copyright:   (c) 2003 David Elliott
+// Copyright:   (c) 2005 Ryan Norton
 // Licence:   	wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -13,14 +13,18 @@
 #define __WX_COCOA_SLIDER_H__
 
-// #include "wx/cocoa/NSSlider.h"
+DECLARE_WXCOCOA_OBJC_CLASS(NSSlider);
 
+class WXDLLEXPORT wxStaticText;
+
 // ========================================================================
 // wxSlider
 // ========================================================================
-class WXDLLEXPORT wxSlider: public wxSliderBase// , protected wxCocoaNSSlider
+class WXDLLEXPORT wxSlider: public wxSliderBase //, protected wxCocoaNSSlider
 {
     DECLARE_DYNAMIC_CLASS(wxSlider)
     DECLARE_EVENT_TABLE()
-//    WX_DECLARE_COCOA_OWNER(NSSlider,NSControl,NSView)
+public:
+    inline WX_NSSlider GetNSSlider() { return (WX_NSSlider)m_cocoaNSView; } 
+    inline const WX_NSSlider GetNSSlider() const { return (WX_NSSlider)m_cocoaNSView; } 
 // ------------------------------------------------------------------------
 // initialization
@@ -53,4 +57,15 @@
 // ------------------------------------------------------------------------
 protected:
+    virtual void DoSetSizeHints( int minW, int minH,
+                               int maxW , int maxH ,
+                               int incW , int incH );
+
+
+    wxSize DoGetBestSize() const;
+    void DoSetSize(int x, int y, int w, int h, int sizeFlags);
+
+    wxStaticText* m_macMinimumStatic ;
+    wxStaticText* m_macMaximumStatic ;
+    wxStaticText* m_macValueStatic ;
 // ------------------------------------------------------------------------
 // Implementation
@@ -58,24 +73,26 @@
 public:
     // Pure Virtuals
-    virtual int GetValue() const { return 0; }
-    virtual void SetValue(int value) { }
+    virtual int GetValue() const;
+    virtual void SetValue(int value);
 
     // retrieve/change the range
-    virtual void SetRange(int minValue, int maxValue) { }
-    virtual int GetMin() const { return 0; }
-    virtual int GetMax() const { return 0; }
+    virtual void SetRange(int minValue, int maxValue);
+    virtual int GetMin() const;
+    virtual int GetMax() const;
 
     // the line/page size is the increment by which the slider moves when
     // cursor arrow key/page up or down are pressed (clicking the mouse is like
     // pressing PageUp/Down) and are by default set to 1 and 1/10 of the range
-    virtual void SetLineSize(int lineSize) { }
-    virtual void SetPageSize(int pageSize) { }
-    virtual int GetLineSize() const { return 0; }
-    virtual int GetPageSize() const { return 0; }
+    virtual void SetLineSize(int lineSize);
+    virtual void SetPageSize(int pageSize);
+    virtual int GetLineSize() const;
+    virtual int GetPageSize() const;
 
     // these methods get/set the length of the slider pointer in pixels
-    virtual void SetThumbLength(int lenPixels) { }
-    virtual int GetThumbLength() const { return 0; }
+    virtual void SetThumbLength(int lenPixels);
+    virtual int GetThumbLength() const;
 
+    //vertical is opposite on mac - need to invert sometimes...
+    virtual int ValueInvertOrNot(int value) const;
 };
 
Index: src/cocoa/slider.mm
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/cocoa/slider.mm,v
retrieving revision 1.9
diff -b -u -2 -r1.9 slider.mm
--- src/cocoa/slider.mm	2004/05/23 15:10:39	1.9
+++ src/cocoa/slider.mm	2005/02/15 09:19:20
@@ -2,9 +2,9 @@
 // Name:        cocoa/slider.mm
 // Purpose:     wxSlider
-// Author:      David Elliott
+// Author:      Ryan Norton
 // Modified by:
 // Created:     2003/06/19
 // RCS-ID:      $Id: slider.mm,v 1.9 2004/05/23 15:10:39 JS Exp $
-// Copyright:   (c) 2003 David Elliott
+// Copyright:   (c) 2005 Ryan Norton
 // Licence:   	wxWidgets licence
 /////////////////////////////////////////////////////////////////////////////
@@ -16,4 +16,5 @@
     #include "wx/app.h"
     #include "wx/slider.h"
+    #include "wx/stattext.h"
 #endif //WX_PRECOMP
 
@@ -23,6 +24,65 @@
 BEGIN_EVENT_TABLE(wxSlider, wxSliderBase)
 END_EVENT_TABLE()
-// WX_IMPLEMENT_COCOA_OWNER(wxSlider,NSSlider,NSControl,NSView)
 
+
+@interface wxTrackingNSSliderCell : NSSliderCell
+{
+}
+
+//called when drag starts (return false to force unfocus)
+- (BOOL)startTrackingAt:(NSPoint)startPoint inView:(NSView *)controlView;
+//called when left the bounds of the control or if flag is true mouse button is up
+- (void)stopTracking:(NSPoint)lastPoint at:(NSPoint)stopPoint inView:(NSView *)controlView mouseIsUp:(BOOL)flag;
+
+// Convience
+- (void)doWXEvent:(int)command inView:(NSView *)controlView;
+@end
+
+@implementation wxTrackingNSSliderCell : NSSliderCell
+
+- (BOOL)startTrackingAt:(NSPoint)startPoint inView:(NSView *)controlView
+{
+    [self doWXEvent:wxEVT_SCROLL_THUMBTRACK inView:controlView];
+    return [super startTrackingAt:(NSPoint)startPoint inView:(NSView *)controlView];
+}
+- (void)stopTracking:(NSPoint)lastPoint at:(NSPoint)stopPoint inView:(NSView *)controlView mouseIsUp:(BOOL)flag
+{
+    if(flag)
+        [self doWXEvent:wxEVT_SCROLL_THUMBRELEASE inView:controlView];
+    [super stopTracking:(NSPoint)lastPoint at:(NSPoint)stopPoint inView:(NSView *)controlView mouseIsUp:(BOOL)flag];
+}
+- (void)doWXEvent:(int)command inView:(NSView *)controlView
+{
+    wxCocoaNSView* theView = wxCocoaNSView::GetFromCocoa(controlView);    
+    wxSlider* theSlider = ((wxSlider*)theView->GetWxWindow());
+    
+    wxScrollEvent event(command, theSlider->GetId());
+    event.SetPosition(theSlider->GetValue());
+    event.SetEventObject(theSlider);
+    theSlider->GetEventHandler()->ProcessEvent(event);    
+
+    wxCommandEvent cevent( wxEVT_COMMAND_SLIDER_UPDATED, theSlider->GetId() );
+    cevent.SetInt( theSlider->GetValue() );
+    cevent.SetEventObject(theSlider);
+    theSlider->GetEventHandler()->ProcessEvent( cevent );
+}
+@end
+
+
+// The dimensions of the different styles of sliders (From Aqua document)
+#define wxSLIDER_DIMENSIONACROSS 15
+#define wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS 24
+#define wxSLIDER_DIMENSIONACROSS_ARROW 18
+
+// Distance between slider and text
+#define wxSLIDER_BORDERTEXT 5
+
+/* NB!  The default orientation for a slider is horizontal however if the user specifies
+ * some slider styles but dosen't specify the orientation we have to assume he wants a
+ * horizontal one.  Therefore in this file when testing for the sliders orientation
+ * vertical is tested for if this is not set then we use the horizontal one
+ * eg.  if(GetWindowStyle() & wxSL_VERTICAL) {}  else { horizontal case }>
+ */
+
 bool wxSlider::Create(wxWindow *parent, wxWindowID winid,
             int value, int minValue, int maxValue,
@@ -32,8 +92,47 @@
     if(!CreateControl(parent,winid,pos,size,style,validator,name))
         return false;
+
+    m_macMinimumStatic = NULL ;
+    m_macMaximumStatic = NULL ;
+    m_macValueStatic = NULL ;
+
+    //set the slidercell subclass so we can get events (not quite as easy as NSScroller)
+    [NSSlider setCellClass:[wxTrackingNSSliderCell class]];
+
     SetNSView([[NSSlider alloc] initWithFrame: MakeDefaultNSRect(size)]);
     [m_cocoaNSView release];
     if(m_parent)
         m_parent->CocoaAddChild(this);
+    
+    //tick marks - from carbon port
+    int tickMarks = 0 ;
+    if ( style & wxSL_AUTOTICKS )
+        tickMarks = (maxValue - minValue) + 1; //+1 for the 0 value
+
+    while (tickMarks > 20)
+        tickMarks /= 5; //keep the number of tickmarks from becoming unwieldly
+
+    [GetNSSlider() setNumberOfTickMarks:tickMarks];
+    
+    if(style & wxSL_VERTICAL) {
+        SetSizeHints(10, -1, 10, -1);  // Forces SetSize to use the proper width
+    }
+    else {
+        SetSizeHints(-1, 10, -1, 10);  // Forces SetSize to use the proper height
+    }
+    // NB!  SetSizeHints is overloaded by wxSlider and will substitute 10 with the
+    // proper dimensions, it also means other people cannot bugger the slider with
+    // other values
+
+    if(style & wxSL_LABELS)
+    {
+        m_macMinimumStatic = new wxStaticText( parent, wxID_ANY, wxEmptyString );
+        m_macMaximumStatic = new wxStaticText( parent, wxID_ANY, wxEmptyString );
+        m_macValueStatic = new wxStaticText( parent, wxID_ANY, wxEmptyString );
+        SetRange(minValue, maxValue);
+        SetValue(value);
+    }
+
+    //finalize
     SetInitialFrameRect(pos,size);
 
@@ -43,4 +142,261 @@
 wxSlider::~wxSlider()
 {
+    // this is a special case, as we had to add windows as siblings we are
+    // responsible for their disposal, but only if we are not part of a DestroyAllChildren
+    if ( m_parent && m_parent->IsBeingDeleted() == false )
+    {
+        delete m_macMinimumStatic ;
+        delete m_macMaximumStatic ;
+        delete m_macValueStatic ;
+    }
+}
+
+/* This is overloaded in wxSlider so that the proper width/height will always be used
+* for the slider different values would cause redrawing and mouse detection problems */
+void wxSlider::DoSetSizeHints( int minW, int minH,
+                               int maxW , int maxH ,
+                               int incW , int incH )
+{
+    wxSize size = GetBestSize();
+
+    if(GetWindowStyle() & wxSL_VERTICAL) {
+        wxControl::DoSetSizeHints(size.x, minH, size.x, maxH, incW, incH);
+    }
+    else {
+        wxControl::DoSetSizeHints(minW, size.y, maxW, size.y, incW, incH);
+    }
+}
+
+//
+//	Slider value/range - note that cocoa uses double - not int
+//
+
+int wxSlider::GetValue() const 
+{ 	
+    // We may need to invert the value returned by the widget
+    return ValueInvertOrNot( (int) ([GetNSControl() doubleValue] ));
+}
+
+void wxSlider::SetValue(int value) 
+{ 
+    wxString valuestring ;
+    valuestring.Printf( wxT("%d") , value ) ;
+    if ( m_macValueStatic )
+        m_macValueStatic->SetLabel( valuestring ) ;
+
+    // We only invert for the setting of the actual native widget
+    [GetNSControl() setDoubleValue:ValueInvertOrNot(value)];
+}
+
+void wxSlider::SetRange(int minValue, int maxValue) 
+{ 
+    [GetNSSlider() setMinValue:minValue];
+    [GetNSSlider() setMaxValue:maxValue];    
+    
+    wxString value;
+    if(m_macMinimumStatic) {
+        value.Printf(wxT("%d"), ValueInvertOrNot( GetMin() ) );
+        m_macMinimumStatic->SetLabel(value);
+    }
+    if(m_macMaximumStatic) {
+        value.Printf(wxT("%d"), ValueInvertOrNot( GetMax() ) );
+        m_macMaximumStatic->SetLabel(value);
+    }
+    SetValue(GetMin());
+}
+
+int wxSlider::GetMin() const 
+{	return (int) ([GetNSSlider() minValue]); 	}
+
+int wxSlider::GetMax() const 
+{	return (int) ([GetNSSlider() maxValue]); 	}
+
+// the line/page size is the increment by which the slider moves when
+// cursor arrow key/page up or down are pressed (clicking the mouse is like
+// pressing PageUp/Down) and are by default set to 1 and 1/10 of the range
+void wxSlider::SetLineSize(int lineSize)
+{	}
+void wxSlider::SetPageSize(int pageSize)
+{	}
+int wxSlider::GetLineSize() const
+{	return 0;	}
+int wxSlider::GetPageSize() const
+{	return 0;	}
+
+// these methods get/set the length of the slider pointer in pixels
+// RN: Note that setKnobThickness is depreciated according to apple docs
+// also - these use floats (even though they are in fact in pixels)
+void wxSlider::SetThumbLength(int lenPixels)
+{	[GetNSSlider() setKnobThickness:lenPixels];		}
+
+int wxSlider::GetThumbLength() const
+{	return (int) ([GetNSSlider() knobThickness]);	}
+
+//
+// Logic from carbon port for sizers
+// (without these 2 slider can get too big, and are vertical instead of horizontal)
+//
+
+wxSize wxSlider::DoGetBestSize() const
+{
+    wxSize size;
+    int textwidth, textheight;
+
+    if(GetWindowStyle() & wxSL_LABELS)
+    {
+        wxString text;
+        int ht, wd;
+
+        // Get maximum text label width and height
+        text.Printf(wxT("%d"), ValueInvertOrNot( GetMin() ) );
+        GetTextExtent(text, &textwidth, &textheight);
+        text.Printf(wxT("%d"), ValueInvertOrNot( GetMax() ) );
+        GetTextExtent(text, &wd, &ht);
+        if(ht > textheight) {
+            textheight = ht;
+        }
+        if (wd > textwidth) {
+            textwidth = wd;
+        }
+    }
+
+    if(GetWindowStyle() & wxSL_VERTICAL)
+    {
+        if(GetWindowStyle() & wxSL_AUTOTICKS) {
+            size.x = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
+        }
+        else {
+            size.x = wxSLIDER_DIMENSIONACROSS_ARROW;
+        }
+        if(GetWindowStyle() & wxSL_LABELS) {
+            size.x += textwidth + wxSLIDER_BORDERTEXT;
+        }
+        size.y = 150;
+    }
+    else
+    {
+        if(GetWindowStyle() & wxSL_AUTOTICKS) {
+            size.y = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
+        }
+        else {
+            size.y = wxSLIDER_DIMENSIONACROSS_ARROW;
+        }
+        if(GetWindowStyle() & wxSL_LABELS) {
+            size.y += textheight + wxSLIDER_BORDERTEXT;
+        }
+        size.x = 150;
+    }
+    return size;
+}
+
+void wxSlider::DoSetSize(int x, int y, int w, int h, int sizeFlags)
+{
+    int  xborder, yborder;
+    int  minValWidth, maxValWidth, textwidth, textheight;
+    int  sliderBreadth;
+    int width = w;
+
+    xborder = yborder = 0;
+
+    if (GetWindowStyle() & wxSL_LABELS)
+    {
+        //Labels have this control's parent as their parent
+        //so if this control is not at 0,0 relative to the parent
+        //the labels need to know the position of this control
+        //relative to its parent in order to size properly, so
+        //move the control first so we can use GetPosition()
+        wxControl::DoSetSize( x, y , w , h ,sizeFlags ) ;
+
+        wxString text;
+        int ht;
+
+        // Get maximum text label width and height
+        text.Printf(wxT("%d"), ValueInvertOrNot( GetMin() ) );
+        GetTextExtent(text, &minValWidth, &textheight);
+        text.Printf(wxT("%d"), ValueInvertOrNot( GetMax() ) );
+        GetTextExtent(text, &maxValWidth, &ht);
+        if(ht > textheight) {
+            textheight = ht;
+        }
+        textwidth = (minValWidth > maxValWidth ? minValWidth : maxValWidth);
+
+        xborder = textwidth + wxSLIDER_BORDERTEXT;
+        yborder = textheight + wxSLIDER_BORDERTEXT;
+
+        // Get slider breadth
+        if(GetWindowStyle() & wxSL_AUTOTICKS) {
+            sliderBreadth = wxSLIDER_DIMENSIONACROSS_WITHTICKMARKS;
+        }
+        else {
+            sliderBreadth = wxSLIDER_DIMENSIONACROSS_ARROW;
+        }
+
+        if(GetWindowStyle() & wxSL_VERTICAL)
+        {
+            h = h - yborder ;
+
+            if ( m_macMinimumStatic )
+                m_macMinimumStatic->Move(GetPosition().x + sliderBreadth + wxSLIDER_BORDERTEXT,
+                GetPosition().y + h - yborder);
+            if ( m_macMaximumStatic )
+                m_macMaximumStatic->Move(GetPosition().x + sliderBreadth + wxSLIDER_BORDERTEXT, GetPosition().y + 0);
+            if ( m_macValueStatic )
+                m_macValueStatic->Move(GetPosition().x, GetPosition().y + h );
+        }
+        else
+        {
+            w = w - xborder ;
+            if ( m_macMinimumStatic )
+                m_macMinimumStatic->Move(GetPosition().x + 0, GetPosition().y + sliderBreadth + wxSLIDER_BORDERTEXT);
+            if ( m_macMaximumStatic )
+                m_macMaximumStatic->Move(GetPosition().x + w - (maxValWidth/2),
+                GetPosition().y + sliderBreadth + wxSLIDER_BORDERTEXT);
+            if ( m_macValueStatic )
+                m_macValueStatic->Move(GetPosition().x + w, GetPosition().y + 0);
+        }
+    }
+
+    // yet another hack since this is a composite control
+    // when wxSlider has it's size hardcoded, we're not allowed to
+    // change the size. But when the control has labels, we DO need
+    // to resize the internal Mac control to accomodate the text labels.
+    // We need to trick the wxWidgets resize mechanism so that we can
+    // resize the slider part of the control ONLY.
+
+    // TODO: Can all of this code go in the conditional wxSL_LABELS block?
+
+    int minWidth;
+    minWidth = m_minWidth;
+
+    if (GetWindowStyle() & wxSL_LABELS)
+    {
+        // make sure we don't allow the entire control to be resized accidently
+        if (width == GetSize().x)
+            m_minWidth = -1;
+    }
+    //If the control has labels, we still need to call this again because
+    //the labels alter the control's w and h values.
+    wxControl::DoSetSize( x, y , w , h ,sizeFlags ) ;
+
+    m_minWidth = minWidth;
+}
+
+// Common processing to invert slider values based on wxSL_INVERSE
+int wxSlider::ValueInvertOrNot(int value) const
+{
+    if (m_windowStyle & wxSL_VERTICAL)
+    {
+        // The reason for the backwards logic is that Mac's vertical sliders are
+        // inverted compared to Windows and GTK, hence we want inversion to be the
+        // default, and if wxSL_INVERSE is set, then we do not invert (use native)
+        if (m_windowStyle & wxSL_INVERSE)
+            return value;
+        else
+            return (GetMax() + GetMin()) - value;
+    }
+    else // normal logic applies to HORIZONTAL sliders
+    {
+        return wxSliderBase::ValueInvertOrNot(value);
+    }
 }
 

 	  	 

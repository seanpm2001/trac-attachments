Index: src/richtext/richtexthtml.cpp
===================================================================
--- src/richtext/richtexthtml.cpp	(revisione 71028)
+++ src/richtext/richtexthtml.cpp	(copia locale)
@@ -105,7 +105,7 @@
         wxRichTextAttr currentCharStyle = buffer->GetAttributes();
 
         if ((GetFlags() & wxRICHTEXT_HANDLER_NO_HEADER_FOOTER) == 0)
-            str << wxT("<html><head></head><body>\n");
+            str << wxT("<html><head><meta charset=\"UTF-8\"></head><body>\n");
 
         OutputFont(currentParaStyle, str);
 
@@ -115,55 +115,8 @@
         m_indents.Clear();
         m_listTypes.Clear();
 
-        wxRichTextObjectList::compatibility_iterator node = buffer->GetChildren().GetFirst();
-        while (node)
-        {
-            wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
-            wxASSERT (para != NULL);
+        DoSaveParagraphLayoutBox(buffer, stream);
 
-            if (para)
-            {
-                wxRichTextAttr paraStyle(para->GetCombinedAttributes());
-
-                BeginParagraphFormatting(currentParaStyle, paraStyle, str);
-
-                wxRichTextObjectList::compatibility_iterator node2 = para->GetChildren().GetFirst();
-                while (node2)
-                {
-                    wxRichTextObject* obj = node2->GetData();
-                    wxRichTextPlainText* textObj = wxDynamicCast(obj, wxRichTextPlainText);
-                    if (textObj && !textObj->IsEmpty())
-                    {
-                        wxRichTextAttr charStyle(para->GetCombinedAttributes(obj->GetAttributes()));
-                        BeginCharacterFormatting(currentCharStyle, charStyle, paraStyle, str);
-
-                        wxString text = textObj->GetText();
-
-                        if (charStyle.HasTextEffects() && (charStyle.GetTextEffects() & wxTEXT_ATTR_EFFECT_CAPITALS))
-                            text.MakeUpper();
-
-                        wxString toReplace = wxRichTextLineBreakChar;
-                        text.Replace(toReplace, wxT("<br>"));
-
-                        str << text;
-
-                        EndCharacterFormatting(currentCharStyle, charStyle, paraStyle, str);
-                    }
-
-                    wxRichTextImage* image = wxDynamicCast(obj, wxRichTextImage);
-                    if( image && (!image->IsEmpty() || image->GetImageBlock().GetData()))
-                        WriteImage( image, stream );
-
-                    node2 = node2->GetNext();
-                }
-
-                EndParagraphFormatting(currentParaStyle, paraStyle, str);
-
-                str << wxT("\n");
-            }
-            node = node->GetNext();
-        }
-
         CloseLists(-1, str);
 
         str << wxT("</font>");
@@ -184,6 +137,100 @@
     return true;
 }
 
+void wxRichTextHTMLHandler::DoSaveParagraphLayoutBox(wxRichTextParagraphLayoutBox* pParagraphLayoutBox, wxOutputStream& stream)
+{
+#if wxUSE_UNICODE
+    wxCSConv* customEncoding = NULL;
+    wxMBConv* conv = NULL;
+    if (!GetEncoding().IsEmpty())
+    {
+        customEncoding = new wxCSConv(GetEncoding());
+        if (!customEncoding->IsOk())
+        {
+            wxDELETE(customEncoding);
+        }
+    }
+    if (customEncoding)
+        conv = customEncoding;
+    else
+        conv = & wxConvUTF8;
+#endif
+#if wxUSE_UNICODE
+    wxTextOutputStream str(stream, wxEOL_NATIVE, *conv);
+#else
+    wxTextOutputStream str(stream, wxEOL_NATIVE);
+#endif
+    wxRichTextAttr currentParaStyle = pParagraphLayoutBox->GetAttributes();
+    wxRichTextAttr currentCharStyle = pParagraphLayoutBox->GetAttributes();
+
+    wxRichTextObjectList::compatibility_iterator node = pParagraphLayoutBox->GetChildren().GetFirst();
+    while (node)
+    {
+        wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
+        wxASSERT (para != NULL);
+
+        if (para)
+        {
+            wxRichTextAttr paraStyle(para->GetCombinedAttributes());
+
+            BeginParagraphFormatting(currentParaStyle, paraStyle, str);
+
+            wxRichTextObjectList::compatibility_iterator node2 = para->GetChildren().GetFirst();
+            while (node2)
+            {
+                wxRichTextObject* obj = node2->GetData();
+                wxRichTextPlainText* textObj = wxDynamicCast(obj, wxRichTextPlainText);
+                if (textObj && !textObj->IsEmpty())
+                {
+                    wxRichTextAttr charStyle(para->GetCombinedAttributes(obj->GetAttributes()));
+                    BeginCharacterFormatting(currentCharStyle, charStyle, paraStyle, str);
+
+                    wxString text = textObj->GetText();
+
+                    if (charStyle.HasTextEffects() && (charStyle.GetTextEffects() & wxTEXT_ATTR_EFFECT_CAPITALS))
+                        text.MakeUpper();
+
+                    wxString toReplace = wxRichTextLineBreakChar;
+                    text.Replace(toReplace, wxT("<br>"));
+
+                    str << text;
+
+                    EndCharacterFormatting(currentCharStyle, charStyle, paraStyle, str);
+                }
+
+                wxRichTextImage* image = wxDynamicCast(obj, wxRichTextImage);
+                if( image && (!image->IsEmpty() || image->GetImageBlock().GetData()))
+                {
+                    WriteImage( image, stream );
+                }
+                else
+                {
+                    wxRichTextTable* table = wxDynamicCast(obj, wxRichTextTable);
+                    if(table)
+                    {
+                        WriteTable( table, stream );
+                    }
+                    else
+                    {
+                        wxRichTextBox* box = wxDynamicCast(obj, wxRichTextBox);
+                        if(box)
+                        {
+                            WriteTextBox( box, stream );
+                        }
+                    }
+                }
+
+                node2 = node2->GetNext();
+            }
+
+            EndParagraphFormatting(currentParaStyle, paraStyle, str);
+
+            str << wxT("\n");
+        }
+        node = node->GetNext();
+    }
+}
+
 void wxRichTextHTMLHandler::BeginCharacterFormatting(const wxRichTextAttr& currentStyle, const wxRichTextAttr& thisStyle, const wxRichTextAttr& WXUNUSED(paraStyle), wxTextOutputStream& str)
 {
     wxString style;
@@ -584,6 +631,153 @@
     str << wxT("\" />");
 }
 
+void wxRichTextHTMLHandler::WriteBorderStyle(const wxTextAttrBorder& attr, wxTextOutputStream& str)
+{
+    if(attr.GetWidth().IsValid())
+        str << attr.GetWidth().GetValue() << wxT("px solid");
+    if(attr.HasColour())
+        str << wxT(" ") << attr.GetColour().GetAsString(wxC2S_HTML_SYNTAX).c_str();
+    str << wxT(";");
+}
+
+void wxRichTextHTMLHandler::WriteTextBoxStyle(const wxTextBoxAttr& tbAttr, wxTextOutputStream& str)
+{
+    // Border
+    if(tbAttr.GetBorder().GetLeft().HasStyle()){
+        str << wxT("border-left:");
+        WriteBorderStyle(tbAttr.GetBorder().GetLeft(), str);
+    }
+    if(tbAttr.GetBorder().GetRight().HasStyle()){
+        str << wxT("border-right:");
+        WriteBorderStyle(tbAttr.GetBorder().GetRight(), str);
+    }
+    if(tbAttr.GetBorder().GetBottom().HasStyle()){
+        str << wxT("border-bottom:");
+        WriteBorderStyle(tbAttr.GetBorder().GetBottom(), str);
+    }
+    if(tbAttr.GetBorder().GetTop().HasStyle()){
+        str << wxT("border-top:");
+        WriteBorderStyle(tbAttr.GetBorder().GetTop(), str);
+    }
+
+    if(tbAttr.GetPadding().GetLeft().IsValid())
+        str << wxT("padding-left:") << tbAttr.GetPadding().GetLeft().GetValue() << wxT("px;");
+    if(tbAttr.GetPadding().GetRight().IsValid())
+        str << wxT("padding-right:") << tbAttr.GetPadding().GetRight().GetValue() << wxT("px;");
+    if(tbAttr.GetPadding().GetBottom().IsValid())
+        str << wxT("padding-bottom:") << tbAttr.GetPadding().GetBottom().GetValue() << wxT("px;");
+    if(tbAttr.GetPadding().GetTop().IsValid())
+        str << wxT("padding-top:") << tbAttr.GetPadding().GetTop().GetValue() << wxT("px;");
+
+    if(tbAttr.GetMargins().GetLeft().IsValid())
+        str << wxT("margin-left:") << tbAttr.GetMargins().GetLeft().GetValue() << wxT("px;");
+    if(tbAttr.GetMargins().GetRight().IsValid())
+        str << wxT("margin-right:") << tbAttr.GetMargins().GetRight().GetValue() << wxT("px;");
+    if(tbAttr.GetMargins().GetBottom().IsValid())
+        str << wxT("margin-bottom:") << tbAttr.GetMargins().GetBottom().GetValue() << wxT("px;");
+    if(tbAttr.GetMargins().GetTop().IsValid())
+        str << wxT("margin-top:") << tbAttr.GetMargins().GetTop().GetValue() << wxT("px;");
+
+    if(tbAttr.GetWidth().IsValid())
+        str << wxT("width:") << tbAttr.GetWidth().GetValue() << wxT("px;");
+    if(tbAttr.GetHeight().IsValid())
+        str << wxT("height:") << tbAttr.GetHeight().GetValue() << wxT("px;");
+}
+
+void wxRichTextHTMLHandler::WriteBackgroundStyle(const wxRichTextAttr& attr, wxTextOutputStream& str)
+{
+    if(!attr.IsDefault())
+        if(attr.HasBackgroundColour())
+            str << wxT("background:") << attr.GetBackgroundColour().GetAsString(wxC2S_HTML_SYNTAX).c_str() << wxT(";");
+}
+
+void wxRichTextHTMLHandler::BeginTdFormatting(const wxRichTextAttr& attr, wxTextOutputStream& stream)
+{
+    stream << wxT("<td style=\"");
+    WriteTextBoxStyle(attr.GetTextBoxAttr(), stream);
+    WriteBackgroundStyle(attr, stream);
+    stream << wxT("\">");
+}
+
+void wxRichTextHTMLHandler::EndTdFormatting(const wxRichTextAttr& WXUNUSED(attr), wxTextOutputStream& str)
+{
+    str << wxT("</td>");
+}
+
+void wxRichTextHTMLHandler::BeginTrFormatting(wxTextOutputStream& str)
+{
+    str << wxT("<tr>");
+}
+
+void wxRichTextHTMLHandler::EndTrFormatting(wxTextOutputStream& str)
+{
+    str << wxT("</tr>");
+}
+
+void wxRichTextHTMLHandler::BeginTableFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str)
+{
+    str << wxT("<table style=\"display:inline-table;vertical-align:top;");
+    WriteTextBoxStyle(attr.GetTextBoxAttr(), str);
+    WriteBackgroundStyle(attr, str);
+    str << wxT("\" cellspacing=0>");
+}
+
+void wxRichTextHTMLHandler::EndTableFormatting(const wxRichTextAttr& WXUNUSED(attr), wxTextOutputStream& str)
+{
+    str << wxT("</table>");
+}
+
+void wxRichTextHTMLHandler::WriteTable(wxRichTextTable* pTable, wxOutputStream& stream)
+{
+    wxTextOutputStream str(stream);
+
+    BeginTableFormatting(pTable->GetAttributes(), str);
+
+    int iRow;
+    for(iRow=0; iRow<pTable->GetRowCount(); iRow++){
+        BeginTrFormatting(str);
+
+        int iCol;
+        for(iCol=0; iCol<pTable->GetColumnCount(); iCol++){
+            wxRichTextCell* pCell = pTable->GetCell(iRow, iCol);
+            BeginTdFormatting(pCell->GetAttributes(), str);
+
+            DoSaveParagraphLayoutBox(pCell, stream);
+
+            EndTdFormatting(pCell->GetAttributes(), str);
+        }
+        EndTrFormatting(str);
+    }
+
+    EndTableFormatting(pTable->GetAttributes(), str);
+}
+
+void wxRichTextHTMLHandler::BeginTextBoxFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str)
+{
+    BeginTableFormatting(attr, str);
+    str << wxT("<tr><td>");
+}
+
+void wxRichTextHTMLHandler::EndTextBoxFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str)
+{
+    str << wxT("</td></tr>");
+    EndTableFormatting(attr, str);
+}
+
+void wxRichTextHTMLHandler::WriteTextBox(wxRichTextBox* pTextBox, wxOutputStream& stream)
+{
+    if(pTextBox->IsEmpty())
+        return;
+
+    wxTextOutputStream str(stream);
+
+    BeginTextBoxFormatting(pTextBox->GetAttributes(), str);
+
+    DoSaveParagraphLayoutBox(pTextBox, stream);
+
+    EndTextBoxFormatting(pTextBox->GetAttributes(), str);
+}
+
 long wxRichTextHTMLHandler::PtToSize(long size)
 {
     int i;
Index: include/wx/richtext/richtexthtml.h
===================================================================
--- include/wx/richtext/richtexthtml.h	(revisione 71028)
+++ include/wx/richtext/richtexthtml.h	(copia locale)
@@ -78,6 +78,7 @@
 #if wxUSE_STREAMS
     virtual bool DoLoadFile(wxRichTextBuffer *buffer, wxInputStream& stream);
     virtual bool DoSaveFile(wxRichTextBuffer *buffer, wxOutputStream& stream);
+    void DoSaveParagraphLayoutBox(wxRichTextParagraphLayoutBox* pParagraphLayoutBox, wxOutputStream& stream);
 
     /// Output character formatting
     void BeginCharacterFormatting(const wxRichTextAttr& currentStyle, const wxRichTextAttr& thisStyle, const wxRichTextAttr& paraStyle, wxTextOutputStream& stream );
@@ -96,6 +97,33 @@
     /// Writes an image to its base64 equivalent, or to the memory filesystem, or to a file
     void WriteImage(wxRichTextImage* image, wxOutputStream& stream);
 
+    /// Write border attribute to stream
+    void WriteBorderStyle(const wxTextAttrBorder& attr, wxTextOutputStream& str);
+
+    /// Write text box attribute to stream
+    void WriteTextBoxStyle(const wxTextBoxAttr& tbAttr, wxTextOutputStream& str);
+
+    /// Write background attribute to stream
+    void WriteBackgroundStyle(const wxRichTextAttr& attr, wxTextOutputStream& str);
+
+    /// Td formatting
+    void BeginTdFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str);
+    void EndTdFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str);
+
+    /// Tr formatting
+    void BeginTrFormatting(wxTextOutputStream& str);
+    void EndTrFormatting(wxTextOutputStream& str);
+
+    /// Write table
+    void BeginTableFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str);
+    void EndTableFormatting(const wxRichTextAttr& attr, wxTextOutputStream& str);
+    void WriteTable(wxRichTextTable* pTable, wxOutputStream& stream);
+
+    /// Write textbox
+    void BeginTextBoxFormatting(const wxRichTextAttr& attr, wxTextOutputStream& stream);
+    void EndTextBoxFormatting(const wxRichTextAttr& attr, wxTextOutputStream& stream);
+    void WriteTextBox(wxRichTextBox* pTextBox, wxOutputStream& stream);
+
     /// Converts from pt to size property compatible height
     long PtToSize(long size);
 

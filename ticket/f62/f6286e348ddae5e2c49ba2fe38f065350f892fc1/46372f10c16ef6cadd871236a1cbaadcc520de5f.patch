--- wxWidgets.orig/build/bakefiles/files.bkl	Sat Sep  9 14:56:26 2006
+++ wxWidgets/build/bakefiles/files.bkl	Fri Sep 15 19:40:33 2006
@@ -2604,4 +2604,5 @@
     src/generic/helpext.cpp
     src/generic/hyperlink.cpp
+    src/generic/imgcboxg.cpp
     src/generic/laywin.cpp
     src/generic/odcombo.cpp
@@ -2625,4 +2626,5 @@
     wx/generic/gridsel.h
     wx/generic/helpext.h
+    wx/generic/imgcbox.h
     wx/generic/laywin.h
     wx/generic/propdlg.h
@@ -2632,4 +2634,5 @@
     wx/grid.h
     wx/hyperlink.h
+    wx/imgcbox.h
     wx/joystick.h
     wx/laywin.h
@@ -2877,4 +2880,5 @@
     src/xrc/xh_html.cpp
     src/xrc/xh_hyperlink.cpp
+    src/xrc/xh_imgcbox.cpp
     src/xrc/xh_listb.cpp
     src/xrc/xh_listbk.cpp
@@ -2931,4 +2935,5 @@
     wx/xrc/xh_html.h
     wx/xrc/xh_hyperlink.h
+    wx/xrc/xh_imgcbox.h
     wx/xrc/xh_listb.h
     wx/xrc/xh_listbk.h
--- wxWidgets.orig/configure.in	Tue Sep 12 17:32:19 2006
+++ wxWidgets/configure.in	Fri Sep 15 19:40:33 2006
@@ -528,4 +528,5 @@
   DEFAULT_wxUSE_GRID=no
   DEFAULT_wxUSE_HYPERLINKCTRL=no
+  DEFAULT_wxUSE_IMAGECOMBOBOX=no
   DEFAULT_wxUSE_DATAVIEWCTRL=no
   DEFAULT_wxUSE_IMAGLIST=no
@@ -740,4 +741,5 @@
   DEFAULT_wxUSE_GRID=yes
   DEFAULT_wxUSE_HYPERLINKCTRL=yes
+  DEFAULT_wxUSE_IMAGECOMBOBOX=yes
   DEFAULT_wxUSE_DATAVIEWCTRL=no
   DEFAULT_wxUSE_IMAGLIST=yes
@@ -1160,4 +1162,5 @@
 WX_ARG_ENABLE(dataviewctrl,[  --enable-dataviewctrl,  use wxDataViewCtrl class], wxUSE_DATAVIEWCTRL)
 WX_ARG_ENABLE(hyperlink,   [  --enable-hyperlink      use wxHyperlinkCtrl class], wxUSE_HYPERLINKCTRL)
+WX_ARG_ENABLE(imagcombobox,[  --enable-imagcombobox   use wxImageComboBox class], wxUSE_IMAGECOMBOBOX)
 WX_ARG_ENABLE(imaglist,    [  --enable-imaglist       use wxImageList class], wxUSE_IMAGLIST)
 WX_ARG_ENABLE(listbook,    [  --enable-listbook       use wxListbook class], wxUSE_LISTBOOK)
@@ -6549,4 +6552,8 @@
   AC_DEFINE(wxUSE_HYPERLINKCTRL)
   USES_CONTROLS=1
+fi
+
+if test "$wxUSE_IMAGECOMBOBOX" = "yes"; then
+  AC_DEFINE(wxUSE_IMAGECOMBOBOX)
 fi
 
--- wxWidgets.orig/docs/latex/wx/category.tex	Fri Sep 15 17:49:19 2006
+++ wxWidgets/docs/latex/wx/category.tex	Fri Sep 15 19:40:35 2006
@@ -99,4 +99,5 @@
 \twocolitem{\helpref{wxGenericDirCtrl}{wxgenericdirctrl}}{A control for displaying a directory tree}
 \twocolitem{\helpref{wxHtmlListBox}{wxhtmllistbox}}{A listbox showing HTML content}
+\twocolitem{\helpref{wxImageComboBox}{wximagecombobox}}{A combobox with images next to text items}
 \twocolitem{\helpref{wxStaticBox}{wxstaticbox}}{A static, or group box for visually grouping related controls}
 \twocolitem{\helpref{wxListBox}{wxlistbox}}{A list of strings for single or multiple selection}
--- wxWidgets.orig/docs/latex/wx/classes.tex	Fri Sep 15 17:49:19 2006
+++ wxWidgets/docs/latex/wx/classes.tex	Fri Sep 15 19:40:35 2006
@@ -199,4 +199,5 @@
 \input idleevt.tex
 \input image.tex
+\input imagecombobox.tex
 \input imaglist.tex
 \input ilayout.tex
--- wxWidgets.orig/docs/latex/wx/imagecombobox.tex	Fri Sep 15 19:40:35 2006
+++ wxWidgets/docs/latex/wx/imagecombobox.tex	Fri Sep 15 19:40:35 2006
@@ -0,0 +1,182 @@
+\section{\class{wxImageComboBox}}\label{wximagecombobox}
+
+A combobox that displays image in front of the list items.
+It currently only allows using images of one size, and resizes itself
+so that an image can be shown next to the text field.
+
+\wxheading{Derived from}
+
+\helpref{wxComboBox}{wxcombobox}\\
+\helpref{wxControlWithItems}{wxcontrolwithitems}\\
+\helpref{wxControl}{wxcontrol}\\
+\helpref{wxWindow}{wxwindow}\\
+\helpref{wxEvtHandler}{wxevthandler}\\
+\helpref{wxObject}{wxobject}
+
+\wxheading{Remarks}
+
+While wxImageComboBox contains the \helpref{wxComboBox}{wxcombobox}
+API, but it might not actually be derived from that class. In fact,
+if the platform does not have a native implementation, wxImageComboBox
+will inherit from \helpref{wxOwnerDrawnComboBox}{wxownerdrawncombobox}.
+You can determine if the implementation is generic by checking whether
+wxGENERIC\_IMAGECOMBOBOX is defined.
+
+\wxheading{Include files}
+
+<wx/imgcbox.h>
+
+\wxheading{Window styles}
+
+\begin{twocollist}\itemsep=0pt
+\twocolitem{\windowstyle{wxCB\_READONLY}}{Creates a combobox without a text
+editor. On some platforms the control may appear very different when this
+style is used.}
+\twocolitem{\windowstyle{wxCB\_SORT}}{Sorts the entries in the list alphabetically.}
+\twocolitem{\windowstyle{wxTE\_PROCESS\_ENTER}}{The control will generate
+the event wxEVT\_COMMAND\_TEXT\_ENTER (otherwise pressing Enter key
+is either processed internally by the control or used for navigation between
+dialog controls). Windows only.}
+\end{twocollist}
+
+See also \helpref{window styles overview}{windowstyles}.
+
+\wxheading{Event handling}
+
+\twocolwidtha{7cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf EVT\_COMBOBOX(id, func)}}{Process a wxEVT\_COMMAND\_COMBOBOX\_SELECTED event,
+when an item on the list is selected.}
+\twocolitem{{\bf EVT\_TEXT(id, func)}}{Process a wxEVT\_COMMAND\_TEXT\_UPDATED event,
+when the combobox text changes.}
+\twocolitem{{\bf EVT\_TEXT\_ENTER(id, func)}}{Process a wxEVT\_COMMAND\_TEXT\_ENTER event,
+when <RETURN> is pressed in the combobox.}
+\end{twocollist}
+
+\wxheading{See also}
+
+\helpref{wxComboBox}{wxcombobox}, \helpref{wxChoice}{wxchoice}, \helpref{wxOwnerDrawnComboBox}{wxownerdrawncombobox},
+\rtfsp\helpref{wxCommandEvent}{wxcommandevent}
+
+\latexignore{\rtfignore{\wxheading{Members}}}
+
+
+\membersection{wxImageComboBox::wxImageComboBox}\label{wximagecomboboxctor}
+
+\func{}{wxImageComboBox}{\void}
+
+Default constructor.
+
+\func{}{wxImageComboBox}{\param{wxWindow*}{ parent}, \param{wxWindowID}{ id},\rtfsp
+\param{const wxString\& }{value = ``"}, \param{const wxPoint\&}{ pos = wxDefaultPosition}, \param{const wxSize\&}{ size = wxDefaultSize},\rtfsp
+\param{int}{ n = 0}, \param{const wxString }{choices[] = NULL},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator = wxDefaultValidator}, \param{const wxString\& }{name = ``comboBox"}}
+
+\func{}{wxImageComboBox}{\param{wxWindow*}{ parent}, \param{wxWindowID}{ id},\rtfsp
+\param{const wxString\& }{value}, \param{const wxPoint\&}{ pos}, \param{const wxSize\&}{ size},\rtfsp
+\param{const wxArrayString\& }{choices},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator = wxDefaultValidator}, \param{const wxString\& }{name = ``comboBox"}}
+
+Constructor, creating and showing a combobox.
+
+\wxheading{Parameters}
+
+\docparam{parent}{Parent window. Must not be NULL.}
+
+\docparam{id}{Window identifier. A value of -1 indicates a default value.}
+
+\docparam{value}{Initial selection string. An empty string indicates no selection.}
+
+\docparam{pos}{Window position.}
+
+\docparam{size}{Window size. If the default size (-1, -1) is specified then the window is sized
+appropriately.}
+
+\docparam{n}{Number of strings with which to initialise the control.}
+
+\docparam{choices}{An array of strings with which to initialise the control.}
+
+\docparam{style}{Window style. See \helpref{wxImageComboBox}{wximagecombobox}.}
+
+\docparam{validator}{Window validator.}
+
+\docparam{name}{Window name.}
+
+\wxheading{See also}
+
+\helpref{wxImageComboBox::Create}{wximagecomboboxcreate}, \helpref{wxValidator}{wxvalidator}
+
+
+\membersection{wxImageComboBox::\destruct{wxImageComboBox}}\label{wximagecomboboxdtor}
+
+\func{}{\destruct{wxImageComboBox}}{\void}
+
+Destructor, destroying the combobox.
+
+
+\membersection{wxImageComboBox::Create}\label{wximagecomboboxcreate}
+
+\func{bool}{Create}{\param{wxWindow*}{ parent}, \param{wxWindowID}{ id},\rtfsp
+\param{const wxString\& }{value = ``"}, \param{const wxPoint\&}{ pos = wxDefaultPosition}, \param{const wxSize\&}{ size = wxDefaultSize},\rtfsp
+\param{int}{ n}, \param{const wxString }{choices[]},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator = wxDefaultValidator}, \param{const wxString\& }{name = ``comboBox"}}
+
+\func{bool}{Create}{\param{wxWindow*}{ parent}, \param{wxWindowID}{ id},\rtfsp
+\param{const wxString\& }{value}, \param{const wxPoint\&}{ pos}, \param{const wxSize\&}{ size},\rtfsp
+\param{const wxArrayString\& }{choices},\rtfsp
+\param{long}{ style = 0}, \param{const wxValidator\& }{validator = wxDefaultValidator}, \param{const wxString\& }{name = ``comboBox"}}
+
+Creates the combobox for two-step construction. Derived classes
+should call or replace this function. See \helpref{wxImageComboBox::wxImageComboBox}{wximagecomboboxctor}\rtfsp
+for further details.
+
+
+\membersection{wxImageComboBox::Append}\label{wximagecomboboxappend}
+
+\func{int}{Append}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap = wxNullBitmap}}
+
+Adds the item to the end of the combo box.
+
+\func{int}{Append}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap}, \param{void *}{clientData}}
+
+\func{int}{Append}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap}, \param{wxClientData *}{clientData}}
+
+Adds the item to the end of the combo box, associating the given, typed or
+untyped, client data pointer with the item.
+
+
+\membersection{wxImageComboBox::GetImageSize}\label{wximagecomboboxgetimagesize}
+
+\constfunc{wxSize}{GetImageSize}{\void}
+
+Returns size of images used in the list.
+
+
+\membersection{wxImageComboBox::GetItemBitmap}\label{wximagecomboboxgetitembitmap}
+
+\constfunc{wxBitmap}{GetItemBitmap}{\param{unsigned int }{n}}
+
+Returns the bitmap of the item with the given index.
+
+
+\membersection{wxImageComboBox::Insert}\label{wximagecomboboxinsert}
+
+\func{int}{Insert}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap}, \param{unsigned int }{pos}}
+
+Inserts the item into the list before pos.
+Not valid for {\tt wxCB\_SORT} style, use Append instead.
+
+\func{int}{Insert}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap}, \param{unsigned int }{pos}, \param{void *}{clientData}}
+
+\func{int}{Insert}{\param{const wxString\& }{ item}, \param{const wxBitmap\& }{bitmap}, \param{unsigned int }{pos}, \param{wxClientData *}{clientData}}
+
+Inserts the item into the list before pos, associating the given, typed or
+untyped, client data pointer with the item.
+Not valid for {\tt wxCB\_SORT} style, use Append instead.
+
+
+\membersection{wxImageComboBox::SetItemBitmap}\label{wximagecomboboxsetitembitmap}
+
+\func{void}{SetItemBitmap}{\param{unsigned int }{n}, \param{const wxBitmap\& }{bitmap}}
+
+Sets the bitmap for the given item.
--- wxWidgets.orig/include/wx/generic/imgcbox.h	Fri Sep 15 19:40:35 2006
+++ wxWidgets/include/wx/generic/imgcbox.h	Fri Sep 15 19:40:35 2006
@@ -0,0 +1,177 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/generic/imgcbox.h
+// Purpose:     wxImageComboBox
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     Aug-30-2006
+// RCS-ID:      $Id:
+// Copyright:   (c) Jaakko Salli
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_GENERIC_IMGCBOX_H_
+#define _WX_GENERIC_IMGCBOX_H_
+
+
+#define wxGENERIC_IMAGECOMBOBOX     1
+
+#if !wxUSE_ODCOMBOBOX
+    #error "Generic wxImageComboBox depends on wxOwnerDrawnComboBox"
+#endif
+
+#include "wx/odcombo.h"
+
+
+// ----------------------------------------------------------------------------
+// wxImageComboBox: a wxComboBox that allows images to be shown
+// in front of string items.
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_ADV wxImageComboBox : public wxOwnerDrawnComboBox,
+                                        public wxImageComboBoxBase
+{
+public:
+
+    // ctors and such
+    wxImageComboBox() : wxOwnerDrawnComboBox(), wxImageComboBoxBase()
+    {
+        Init();
+    }
+
+    wxImageComboBox(wxWindow *parent,
+                    wxWindowID id = wxID_ANY,
+                    const wxString& value = wxEmptyString,
+                    const wxPoint& pos = wxDefaultPosition,
+                    const wxSize& size = wxDefaultSize,
+                    int n = 0,
+                    const wxString choices[] = NULL,
+                    long style = 0,
+                    const wxValidator& validator = wxDefaultValidator,
+                    const wxString& name = wxImageComboBoxNameStr)
+        : wxOwnerDrawnComboBox(),
+          wxImageComboBoxBase()
+    {
+        Init();
+
+        (void)Create(parent, id, value, pos, size, n,
+                     choices, style, validator, name);
+    }
+
+    wxImageComboBox(wxWindow *parent,
+                    wxWindowID id,
+                    const wxString& value,
+                    const wxPoint& pos,
+                    const wxSize& size,
+                    const wxArrayString& choices,
+                    long style,
+                    const wxValidator& validator = wxDefaultValidator,
+                    const wxString& name = wxImageComboBoxNameStr);
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& value,
+                const wxPoint& pos,
+                const wxSize& size,
+                int n,
+                const wxString choices[],
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxImageComboBoxNameStr);
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& value,
+                const wxPoint& pos,
+                const wxSize& size,
+                const wxArrayString& choices,
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxImageComboBoxNameStr);
+
+    virtual ~wxImageComboBox();
+
+    // Adds item with image to the end of the combo box.
+    int Append(const wxString& item, const wxBitmap& bitmap = wxNullBitmap)
+        { return DoAppendWithImage(item, bitmap); }
+
+    int Append(const wxString& item, const wxBitmap& bitmap, void *clientData)
+        { int n = DoAppendWithImage(item, bitmap); SetClientData(n, clientData); return n; }
+    int Append(const wxString& item, const wxBitmap& bitmap, wxClientData *clientData)
+        { int n = DoAppendWithImage(item, bitmap); SetClientObject(n, clientData); return n; }
+
+    // Returns size of image used in list.
+    virtual wxSize GetImageSize() const
+    {
+        return m_usedImgSize;
+    }
+
+    // Returns the image of the item with the given index.
+    virtual wxBitmap GetItemBitmap(unsigned int n) const;
+
+    // Inserts item with image into the list before pos. Not valid for wxCB_SORT or wxCB_SORT
+    // styles, use Append instead.
+    int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos)
+        { return DoInsertWithImage(item, bitmap, pos); }
+
+    int Insert(const wxString& item, const wxBitmap& bitmap,
+               unsigned int pos, void *clientData);
+    int Insert(const wxString& item, const wxBitmap& bitmap,
+               unsigned int pos, wxClientData *clientData);
+
+    // Sets the image for the given item.
+    virtual void SetItemBitmap(unsigned int n, const wxBitmap& bitmap);
+
+    virtual void Clear();
+    virtual void Delete(unsigned int n);
+
+protected:
+
+    virtual void OnDrawBackground(wxDC& dc, const wxRect& rect, int item, int flags) const;
+    virtual void OnDrawItem(wxDC& dc, const wxRect& rect, int item, int flags) const;
+    virtual wxCoord OnMeasureItem(size_t item) const;
+    virtual wxCoord OnMeasureItemWidth(size_t item) const;
+
+    virtual int DoAppendWithImage(const wxString& item, const wxBitmap& bitmap);
+    virtual int DoInsertWithImage(const wxString& item, const wxBitmap& bitmap,
+                                  unsigned int pos);
+
+    virtual int DoAppend(const wxString& item);
+    virtual int DoInsert(const wxString& item, unsigned int pos);
+
+    virtual bool SetFont(const wxFont& font);
+
+    virtual wxSize DoGetBestSize() const;
+
+    // Event handlers
+    void OnResize(wxSizeEvent& event);
+
+    // Recalculates amount of empty space needed in front of
+    // text in control itself.
+    void DetermineIndent();
+
+    bool OnAddBitmap(const wxBitmap& bitmap);
+
+    // Adds image to position - called in Append/Insert before
+    // string is added.
+    bool DoInsertBitmap(const wxBitmap& image, unsigned int pos);
+
+
+    wxArrayPtrVoid      m_bitmaps;  // Images associated with items
+    wxSize              m_usedImgSize;  // Size of bitmaps
+
+private:
+    int                 m_imgAreaWidth;  // Width and height of area next to text field
+    int                 m_fontHeight;
+    bool                m_inResize;
+
+    void Init();
+    void PostCreate();
+
+    DECLARE_EVENT_TABLE()
+
+    DECLARE_DYNAMIC_CLASS(wxImageComboBox)
+};
+
+
+#endif
+    // _WX_GENERIC_IMGCBOX_H_
--- wxWidgets.orig/include/wx/imgcbox.h	Fri Sep 15 19:40:35 2006
+++ wxWidgets/include/wx/imgcbox.h	Fri Sep 15 19:40:35 2006
@@ -0,0 +1,59 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/imgcbox.h
+// Purpose:     wxImageComboBox base header
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     Aug-31-2006
+// Copyright:   (c) Jaakko Salli
+// RCS-ID:      $Id:
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_IMGCBOX_H_BASE_
+#define _WX_IMGCBOX_H_BASE_
+
+
+#include "wx/defs.h"
+
+#if wxUSE_IMAGECOMBOBOX
+
+#include "wx/bitmap.h"
+
+
+extern WXDLLIMPEXP_DATA_ADV(const wxChar) wxImageComboBoxNameStr[];
+
+
+class WXDLLIMPEXP_ADV wxImageComboBoxBase
+{
+public:
+
+    // ctors and such
+    wxImageComboBoxBase() { }
+
+    virtual ~wxImageComboBoxBase() { }
+
+    // Returns the image of the item with the given index.
+    virtual wxBitmap GetItemBitmap(unsigned int n) const = 0;
+
+    // Sets the image for the given item.
+    virtual void SetItemBitmap(unsigned int n, const wxBitmap& bitmap) = 0;
+
+    // Returns size of the image used in list
+    virtual wxSize GetImageSize() const = 0;
+
+protected:
+
+private:
+};
+
+
+#if defined(__WXUNIVERSAL__)
+    #include "wx/generic/imgcbox.h"
+#else
+    #include "wx/generic/imgcbox.h"
+#endif
+
+#endif // wxUSE_IMAGECOMBOBOX
+
+#endif
+    // _WX_IMGCBOX_H_BASE_
--- wxWidgets.orig/include/wx/mac/setup0.h	Thu Jul  6 07:23:06 2006
+++ wxWidgets/include/wx/mac/setup0.h	Fri Sep 15 19:40:35 2006
@@ -716,6 +716,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/motif/setup0.h	Thu Jul  6 07:23:07 2006
+++ wxWidgets/include/wx/motif/setup0.h	Fri Sep 15 19:40:36 2006
@@ -715,6 +715,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/msw/setup0.h	Thu Jul  6 07:23:07 2006
+++ wxWidgets/include/wx/msw/setup0.h	Fri Sep 15 19:40:36 2006
@@ -715,6 +715,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/os2/setup0.h	Thu Jul  6 07:23:08 2006
+++ wxWidgets/include/wx/os2/setup0.h	Fri Sep 15 19:40:36 2006
@@ -715,6 +715,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/palmos/setup0.h	Thu Jul  6 07:23:08 2006
+++ wxWidgets/include/wx/palmos/setup0.h	Fri Sep 15 19:40:36 2006
@@ -715,6 +715,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/setup_inc.h	Thu Jul  6 07:23:03 2006
+++ wxWidgets/include/wx/setup_inc.h	Fri Sep 15 19:40:36 2006
@@ -711,6 +711,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox is a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/univ/setup0.h	Thu Jun 15 17:49:16 2006
+++ wxWidgets/include/wx/univ/setup0.h	Fri Sep 15 19:40:37 2006
@@ -728,6 +728,14 @@
 // Default is 1.
 //
-// Recommended setting: 1 but can be safely set to 0
+// Recommended setting: 1 but can be safely set to 0, except where it is
+//                      needed as a base class for generic wxImageComboBox.
 #define wxUSE_ODCOMBOBOX 1
+
+// wxImageComboBox a combobox that can have images in front of text items.
+//
+// Default is 1.
+//
+// Recommended setting: 1 but can be safely set to 0
+#define wxUSE_IMAGECOMBOBOX 1
 
 // ----------------------------------------------------------------------------
--- wxWidgets.orig/include/wx/xrc/xh_all.h	Tue Jun 20 17:17:57 2006
+++ wxWidgets/include/wx/xrc/xh_all.h	Fri Sep 15 19:40:37 2006
@@ -64,4 +64,5 @@
 #include "wx/xrc/xh_dirpicker.h"
 #include "wx/xrc/xh_hyperlink.h"
+#include "wx/xrc/xh_imgcbox.h"
 
 #endif // _WX_XH_ALL_H_
--- wxWidgets.orig/include/wx/xrc/xh_imgcbox.h	Fri Sep 15 19:40:37 2006
+++ wxWidgets/include/wx/xrc/xh_imgcbox.h	Fri Sep 15 19:40:37 2006
@@ -0,0 +1,34 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_imgcbox.h
+// Purpose:     XML resource handler for wxImageComboBox
+// Author:      Jaakko Salli
+// Created:     Sep-10-2006
+// RCS-ID:      $Id: xh_combo.h,v 1.7 2006/07/04 18:08:06 ABX Exp $
+// Copyright:   (c) 2000 Bob Mitchell and Verant Interactive
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_IMGCBOX_H_
+#define _WX_XH_IMGCBOX_H_
+
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_IMAGECOMBOBOX
+
+class WXDLLIMPEXP_ADV wxImageComboBox;
+
+class WXDLLIMPEXP_XRC wxImageComboBoxXmlHandler : public wxXmlResourceHandler
+{
+    DECLARE_DYNAMIC_CLASS(wxImageComboBoxXmlHandler)
+public:
+    wxImageComboBoxXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+private:
+    wxImageComboBox*    m_combobox;
+    bool                m_isInside;
+};
+
+#endif
+
+#endif // _WX_XH_IMGCBOX_H_
--- wxWidgets.orig/samples/widgets/imgcombobox.cpp	Fri Sep 15 19:40:37 2006
+++ wxWidgets/samples/widgets/imgcombobox.cpp	Fri Sep 15 19:40:37 2006
@@ -0,0 +1,876 @@
+/////////////////////////////////////////////////////////////////////////////
+// Program:     wxWidgets Widgets Sample
+// Name:        imgcombobox.cpp
+// Purpose:     Part of the widgets sample showing wxImageComboBox
+// Author:      Jaakko Salli
+// Created:     Sep-01-2006
+// Id:          $Id:
+// Copyright:   (c) 2006 Jaakko Salli
+// License:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+// for compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_IMAGECOMBOBOX
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/log.h"
+
+    #include "wx/bitmap.h"
+    #include "wx/button.h"
+    #include "wx/checkbox.h"
+    #include "wx/combobox.h"
+    #include "wx/radiobox.h"
+    #include "wx/statbox.h"
+    #include "wx/textctrl.h"
+    #include "wx/filedlg.h"
+#endif
+
+#include "wx/stattext.h"
+#include "wx/dc.h"
+#include "wx/dcmemory.h"
+#include "wx/sizer.h"
+#include "wx/icon.h"
+#include "wx/dir.h"
+#include "wx/filename.h"
+#include "wx/image.h"
+#include "wx/imaglist.h"
+#include "wx/imgcbox.h"
+
+
+#include "widgets.h"
+
+#include "icons/odcombobox.xpm"
+
+// Images loaded from file are reduced this width and height, if larger
+#define IMG_SIZE_TRUNC  150
+
+
+// ----------------------------------------------------------------------------
+// constants
+// ----------------------------------------------------------------------------
+
+// control ids
+enum
+{
+    ImageComboBoxPage_Reset = wxID_HIGHEST,
+    ImageComboBoxPage_Insert,
+    ImageComboBoxPage_InsertText,
+    ImageComboBoxPage_ChangeHeight,
+    ImageComboBoxPage_LoadFromFile,
+    ImageComboBoxPage_SetFromFile,
+    ImageComboBoxPage_AddWidgetIcons,
+    ImageComboBoxPage_AddSeveralWithImages,
+    ImageComboBoxPage_AddSeveral,
+    ImageComboBoxPage_AddMany,
+    ImageComboBoxPage_Clear,
+    ImageComboBoxPage_Change,
+    ImageComboBoxPage_Delete,
+    ImageComboBoxPage_DeleteText,
+    ImageComboBoxPage_DeleteSel,
+    ImageComboBoxPage_Combo
+};
+
+
+// ----------------------------------------------------------------------------
+// ImageComboBoxWidgetsPage
+// ----------------------------------------------------------------------------
+
+class ImageComboBoxWidgetsPage : public WidgetsPage
+{
+public:
+    ImageComboBoxWidgetsPage(WidgetsBookCtrl *book, wxImageList *imaglist);
+
+    virtual wxControl *GetWidget() const { return m_combobox; }
+    virtual void RecreateWidget() { CreateCombo(); }
+
+    // lazy creation of the content
+    virtual void CreateContent();
+
+protected:
+    // event handlers
+    void OnButtonReset(wxCommandEvent& event);
+    void OnButtonChange(wxCommandEvent& event);
+    void OnButtonDelete(wxCommandEvent& event);
+    void OnButtonDeleteSel(wxCommandEvent& event);
+    void OnButtonClear(wxCommandEvent& event);
+    void OnButtonInsert(wxCommandEvent &event);
+    void OnTextChangeHeight(wxCommandEvent& event);
+    void OnButtonLoadFromFile(wxCommandEvent& event);
+    void OnButtonSetFromFile(wxCommandEvent& event);
+    void OnButtonAddSeveral(wxCommandEvent& event);
+    void OnButtonAddSeveralWithImages(wxCommandEvent& event);
+    void OnButtonAddWidgetIcons(wxCommandEvent& event);
+    void OnButtonAddMany(wxCommandEvent& event);
+
+    void OnComboBox(wxCommandEvent& event);
+    void OnComboText(wxCommandEvent& event);
+
+    void OnCheckOrRadioBox(wxCommandEvent& event);
+
+    void OnTextPopupWidth(wxCommandEvent& event);
+    void OnTextPopupHeight(wxCommandEvent& event);
+    void OnTextButtonAll(wxCommandEvent& event);
+
+    void OnUpdateUIInsert(wxUpdateUIEvent& event);
+    void OnUpdateUIAddSeveral(wxUpdateUIEvent& event);
+    void OnUpdateUIAddSeveralWithImages(wxUpdateUIEvent& event);
+    void OnUpdateUIClearButton(wxUpdateUIEvent& event);
+    void OnUpdateUIDeleteButton(wxUpdateUIEvent& event);
+    void OnUpdateUIDeleteSelButton(wxUpdateUIEvent& event);
+    void OnUpdateUIResetButton(wxUpdateUIEvent& event);
+
+    // reset the imgcombobox parameters
+    void Reset();
+
+    // (re)create the imgcombobox
+    void CreateCombo();
+
+    // helpers for creating bitmaps
+    wxBitmap CreateBitmap(const wxColour& colour);
+    wxBitmap CreateRandomBitmap(wxString* pStr);
+    wxBitmap LoadBitmap(const wxString& filepath);
+    wxBitmap QueryBitmap(wxString* pStr);
+
+    void LoadWidgetImages( wxArrayString* strings, wxImageList* images );
+
+    wxSizer *CreateSizerWithSmallTextAndLabel(const wxString& label,
+                                              wxWindowID id,
+                                              wxTextCtrl **ppText);
+
+    // the controls
+    // ------------
+
+    // the checkboxes for styles
+    wxCheckBox *m_chkSort,
+               *m_chkReadonly,
+               *m_chkScaleimages;
+
+    // the combobox itself and the sizer it is in
+    wxImageComboBox *m_combobox;
+    wxSizer *m_sizerCombo;
+
+    // the text entries for "Add/change string" and "Delete" buttons
+    wxTextCtrl *m_textInsert,
+               *m_textChangeHeight,
+               *m_textChange,
+               *m_textDelete;
+
+private:
+    DECLARE_EVENT_TABLE()
+    DECLARE_WIDGETS_PAGE(ImageComboBoxWidgetsPage)
+};
+
+// ----------------------------------------------------------------------------
+// event tables
+// ----------------------------------------------------------------------------
+
+BEGIN_EVENT_TABLE(ImageComboBoxWidgetsPage, WidgetsPage)
+    EVT_BUTTON(ImageComboBoxPage_Reset, ImageComboBoxWidgetsPage::OnButtonReset)
+    EVT_BUTTON(ImageComboBoxPage_Change, ImageComboBoxWidgetsPage::OnButtonChange)
+    EVT_BUTTON(ImageComboBoxPage_Delete, ImageComboBoxWidgetsPage::OnButtonDelete)
+    EVT_BUTTON(ImageComboBoxPage_DeleteSel, ImageComboBoxWidgetsPage::OnButtonDeleteSel)
+    EVT_BUTTON(ImageComboBoxPage_Clear, ImageComboBoxWidgetsPage::OnButtonClear)
+    EVT_BUTTON(ImageComboBoxPage_Insert, ImageComboBoxWidgetsPage::OnButtonInsert)
+    EVT_BUTTON(ImageComboBoxPage_AddSeveral, ImageComboBoxWidgetsPage::OnButtonAddSeveral)
+    EVT_BUTTON(ImageComboBoxPage_AddSeveralWithImages, ImageComboBoxWidgetsPage::OnButtonAddSeveralWithImages)
+    EVT_BUTTON(ImageComboBoxPage_AddWidgetIcons, ImageComboBoxWidgetsPage::OnButtonAddWidgetIcons)
+    EVT_BUTTON(ImageComboBoxPage_AddMany, ImageComboBoxWidgetsPage::OnButtonAddMany)
+    EVT_BUTTON(ImageComboBoxPage_LoadFromFile, ImageComboBoxWidgetsPage::OnButtonLoadFromFile)
+    EVT_BUTTON(ImageComboBoxPage_SetFromFile, ImageComboBoxWidgetsPage::OnButtonSetFromFile)
+
+    EVT_TEXT_ENTER(ImageComboBoxPage_InsertText, ImageComboBoxWidgetsPage::OnButtonInsert)
+    EVT_TEXT(ImageComboBoxPage_ChangeHeight, ImageComboBoxWidgetsPage::OnTextChangeHeight)
+    EVT_TEXT_ENTER(ImageComboBoxPage_DeleteText, ImageComboBoxWidgetsPage::OnButtonDelete)
+
+    EVT_UPDATE_UI(ImageComboBoxPage_Reset, ImageComboBoxWidgetsPage::OnUpdateUIResetButton)
+    EVT_UPDATE_UI(ImageComboBoxPage_Insert, ImageComboBoxWidgetsPage::OnUpdateUIInsert)
+    EVT_UPDATE_UI(ImageComboBoxPage_LoadFromFile, ImageComboBoxWidgetsPage::OnUpdateUIInsert)
+    EVT_UPDATE_UI(ImageComboBoxPage_AddSeveral, ImageComboBoxWidgetsPage::OnUpdateUIAddSeveral)
+    EVT_UPDATE_UI(ImageComboBoxPage_AddSeveralWithImages, ImageComboBoxWidgetsPage::OnUpdateUIAddSeveralWithImages)
+    EVT_UPDATE_UI(ImageComboBoxPage_Clear, ImageComboBoxWidgetsPage::OnUpdateUIClearButton)
+    EVT_UPDATE_UI(ImageComboBoxPage_DeleteText, ImageComboBoxWidgetsPage::OnUpdateUIClearButton)
+    EVT_UPDATE_UI(ImageComboBoxPage_Delete, ImageComboBoxWidgetsPage::OnUpdateUIDeleteButton)
+    EVT_UPDATE_UI(ImageComboBoxPage_Change, ImageComboBoxWidgetsPage::OnUpdateUIDeleteSelButton)
+    EVT_UPDATE_UI(ImageComboBoxPage_DeleteSel, ImageComboBoxWidgetsPage::OnUpdateUIDeleteSelButton)
+
+    EVT_COMBOBOX(ImageComboBoxPage_Combo, ImageComboBoxWidgetsPage::OnComboBox)
+    EVT_TEXT(ImageComboBoxPage_Combo, ImageComboBoxWidgetsPage::OnComboText)
+    EVT_TEXT_ENTER(ImageComboBoxPage_Combo, ImageComboBoxWidgetsPage::OnComboText)
+
+    EVT_CHECKBOX(wxID_ANY, ImageComboBoxWidgetsPage::OnCheckOrRadioBox)
+    EVT_RADIOBOX(wxID_ANY, ImageComboBoxWidgetsPage::OnCheckOrRadioBox)
+END_EVENT_TABLE()
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+
+
+IMPLEMENT_WIDGETS_PAGE(ImageComboBoxWidgetsPage, _T("ImageCombobox"),
+                       GENERIC_CTRLS | WITH_ITEMS_CTRLS | COMBO_CTRLS
+                       );
+
+
+ImageComboBoxWidgetsPage::ImageComboBoxWidgetsPage(WidgetsBookCtrl *book,
+                                             wxImageList *imaglist)
+                  : WidgetsPage(book, imaglist, odcombobox_xpm)
+{
+    // init everything
+    m_chkSort =
+    m_chkReadonly =
+    m_chkScaleimages = (wxCheckBox *)NULL;
+
+    m_combobox = (wxImageComboBox *)NULL;
+    m_sizerCombo = (wxSizer *)NULL;
+}
+
+// create a sizer containing a label and a small text ctrl
+wxSizer *ImageComboBoxWidgetsPage::CreateSizerWithSmallTextAndLabel(const wxString& label,
+                                                                    wxWindowID id,
+                                                                    wxTextCtrl **ppText)
+{
+    wxControl* control = new wxStaticText(this, wxID_ANY, label);
+    wxSizer *sizerRow = new wxBoxSizer(wxHORIZONTAL);
+    wxTextCtrl *text = new wxTextCtrl(this, id, wxEmptyString,
+        wxDefaultPosition, wxSize(50,-1), wxTE_PROCESS_ENTER);
+
+    sizerRow->Add(control, 0, wxRIGHT | wxALIGN_CENTRE_VERTICAL, 5);
+    sizerRow->Add(text, 1, wxFIXED_MINSIZE | wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
+
+    if ( ppText )
+        *ppText = text;
+
+    return sizerRow;
+}
+
+void ImageComboBoxWidgetsPage::CreateContent()
+{
+    /*
+       What we create here is a frame having 3 panes: style pane is the
+       leftmost one, in the middle the pane with buttons allowing to perform
+       miscellaneous combobox operations and the pane containing the combobox
+       itself to the right
+    */
+    //wxTextCtrl *text;
+    wxSizer *sizerRow;
+
+    wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
+
+    wxSizer *sizerLeft = new wxBoxSizer(wxVERTICAL);
+
+    // left pane - style box
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+
+    wxSizer *sizerStyle = new wxStaticBoxSizer(box, wxVERTICAL);
+
+    m_chkSort = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Sort items"));
+    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Read only"));
+
+    wxButton *btn = new wxButton(this, ImageComboBoxPage_Reset, _T("&Reset"));
+    sizerStyle->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 3);
+
+    sizerLeft->Add(sizerStyle, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL);
+
+    // left pane - other options box
+    box = new wxStaticBox(this, wxID_ANY, _T("Demo options"));
+
+    wxSizer *sizerOptions = new wxStaticBoxSizer(box, wxVERTICAL);
+
+    m_chkScaleimages = CreateCheckBoxAndAddToSizer(sizerOptions, _T("&Scale loaded images to fit"));
+
+    sizerRow = CreateSizerWithSmallTextAndLabel(_T("Control &height:"),
+                                                ImageComboBoxPage_ChangeHeight,
+                                                &m_textChangeHeight);
+    m_textChangeHeight->SetSize(20, -1);
+    sizerOptions->Add(sizerRow, 0, wxALL | wxFIXED_MINSIZE /*| wxGROW*/, 5);
+
+    sizerLeft->Add(sizerOptions, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL | wxTOP, 2);
+
+    // middle pane
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
+        _T("&Change wxImageComboBox contents"));
+    wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
+
+#if wxUSE_IMAGE
+    btn = new wxButton(this, ImageComboBoxPage_AddWidgetIcons, _T("Add &widget icons"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_LoadFromFile, _T("Insert image from &file"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_SetFromFile, _T("&Set image from file"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+#endif
+
+    btn = new wxButton(this, ImageComboBoxPage_AddSeveralWithImages, _T("A&ppend a few strings with images"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_AddSeveral, _T("Append a &few strings"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_AddMany, _T("Append &many strings"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    sizerRow = CreateSizerWithTextAndButton(ImageComboBoxPage_Delete,
+                                            _T("&Delete this item"),
+                                            ImageComboBoxPage_DeleteText,
+                                            &m_textDelete);
+    sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_DeleteSel, _T("Delete &selection"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+    btn = new wxButton(this, ImageComboBoxPage_Clear, _T("&Clear"));
+    sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
+
+#if wxUSE_IMAGE
+    wxInitAllImageHandlers();
+#endif
+
+    // right pane
+    wxSizer *sizerRight = new wxBoxSizer(wxVERTICAL);
+    m_combobox = new wxImageComboBox();
+    m_combobox->Create(this, ImageComboBoxPage_Combo, wxEmptyString,
+                       wxDefaultPosition, wxDefaultSize,
+                       0, NULL,
+                       wxCB_READONLY);
+
+#if defined(wxGENERIC_IMAGECOMBOBOX)
+    // This will sure make the list look nicer when larger images are used.
+    m_combobox->SetPopupMaxHeight(600);
+#endif
+
+    sizerRight->Add(m_combobox, 0, wxGROW | wxALL, 5);
+    sizerRight->SetMinSize(150, 0);
+    m_sizerCombo = sizerRight; // save it to modify it later
+
+    // the 3 panes panes compose the window
+    sizerTop->Add(sizerLeft, 0, wxGROW | (wxALL & ~wxLEFT), 10);
+    sizerTop->Add(sizerMiddle, 5, wxGROW | wxALL, 10);
+    sizerTop->Add(sizerRight, 4, wxGROW | (wxALL & ~wxRIGHT), 10);
+
+    // final initializations
+    Reset();
+
+    SetSizer(sizerTop);
+
+    sizerTop->Fit(this);
+}
+
+// ----------------------------------------------------------------------------
+// operations
+// ----------------------------------------------------------------------------
+
+void ImageComboBoxWidgetsPage::Reset()
+{
+    m_chkSort->SetValue(false);
+    m_chkReadonly->SetValue(true);
+    m_chkScaleimages->SetValue(true);
+}
+
+void ImageComboBoxWidgetsPage::CreateCombo()
+{
+    int flags = ms_defaultFlags;
+
+    if ( m_chkSort->GetValue() )
+        flags |= wxCB_SORT;
+    if ( m_chkReadonly->GetValue() )
+        flags |= wxCB_READONLY;
+
+    wxArrayString items;
+    wxArrayPtrVoid bitmaps;
+    if ( m_combobox )
+    {
+        unsigned int count = m_combobox->GetCount();
+        for ( unsigned int n = 0; n < count; n++ )
+        {
+            items.Add(m_combobox->GetString(n));
+            bitmaps.Add(new wxBitmap(m_combobox->GetItemBitmap(n)));
+        }
+
+        m_sizerCombo->Detach( m_combobox );
+        delete m_combobox;
+    }
+
+    m_combobox = new wxImageComboBox();
+    m_combobox->Create(this, ImageComboBoxPage_Combo, wxEmptyString,
+                       wxDefaultPosition, wxDefaultSize,
+                       0, NULL,
+                       flags);
+
+#if defined(wxGENERIC_IMAGECOMBOBOX)
+    // This will sure make the list look nicer when larger images are used.
+    m_combobox->SetPopupMaxHeight(600);
+#endif
+
+    unsigned int count = items.GetCount();
+    for ( unsigned int n = 0; n < count; n++ )
+    {
+        wxBitmap* bmp = (wxBitmap*) bitmaps[n];
+        m_combobox->Append(items[n], *bmp);
+        delete bmp;
+    }
+
+    m_sizerCombo->Add(m_combobox, 0, wxGROW | wxALL, 5);
+    m_sizerCombo->Layout();
+
+    // Allow changing height inorder to demonstrate flexible
+    // size of image "thumbnail" painted in the control itself.
+    long h = 0;
+    m_textChangeHeight->GetValue().ToLong(&h);
+    if ( h >= 5 )
+        m_combobox->SetSize(-1, h);
+}
+
+// ----------------------------------------------------------------------------
+// event handlers
+// ----------------------------------------------------------------------------
+
+void ImageComboBoxWidgetsPage::OnButtonReset(wxCommandEvent& WXUNUSED(event))
+{
+    Reset();
+
+    CreateCombo();
+}
+
+void ImageComboBoxWidgetsPage::OnButtonChange(wxCommandEvent& WXUNUSED(event))
+{
+    int sel = m_combobox->GetSelection();
+    if ( sel != wxNOT_FOUND )
+    {
+#ifndef __WXGTK__
+        m_combobox->SetString(sel, m_textChange->GetValue());
+#else
+        wxLogMessage(_T("Not implemented in wxGTK"));
+#endif
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnButtonDelete(wxCommandEvent& WXUNUSED(event))
+{
+    unsigned long n;
+    if ( !m_textDelete->GetValue().ToULong(&n) ||
+            (n >= m_combobox->GetCount()) )
+    {
+        return;
+    }
+
+    m_combobox->Delete(n);
+}
+
+void ImageComboBoxWidgetsPage::OnButtonDeleteSel(wxCommandEvent& WXUNUSED(event))
+{
+    int sel = m_combobox->GetSelection();
+    if ( sel != wxNOT_FOUND )
+    {
+        m_combobox->Delete(sel);
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnButtonClear(wxCommandEvent& WXUNUSED(event))
+{
+    m_combobox->Clear();
+}
+
+void ImageComboBoxWidgetsPage::OnButtonInsert(wxCommandEvent& WXUNUSED(event))
+{
+    static unsigned int s_item = 0;
+
+    wxString s = m_textInsert->GetValue();
+    if ( !m_textInsert->IsModified() )
+    {
+        // update the default string
+        m_textInsert->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+    }
+
+    if (m_combobox->GetSelection() >= 0)
+        m_combobox->Insert(s, wxNullBitmap, m_combobox->GetSelection());
+}
+
+void ImageComboBoxWidgetsPage::OnTextChangeHeight(wxCommandEvent& WXUNUSED(event))
+{
+    long h = 0;
+    m_textChangeHeight->GetValue().ToLong(&h);
+    if ( h < 5 )
+        return;
+    m_combobox->SetSize(-1, h);
+}
+
+void ImageComboBoxWidgetsPage::OnButtonLoadFromFile(wxCommandEvent& WXUNUSED(event))
+{
+    wxString s;
+    m_combobox->Insert(s, QueryBitmap(&s), m_combobox->GetSelection());
+}
+
+void ImageComboBoxWidgetsPage::OnButtonSetFromFile(wxCommandEvent& WXUNUSED(event))
+{
+    m_combobox->SetItemBitmap(m_combobox->GetSelection(), QueryBitmap(NULL));
+}
+
+void ImageComboBoxWidgetsPage::OnButtonAddMany(wxCommandEvent& WXUNUSED(event))
+{
+    // "many" means 1000 here
+    for ( unsigned int n = 0; n < 1000; n++ )
+    {
+        m_combobox->Append(wxString::Format(_T("item #%u"), n));
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
+{
+    m_combobox->Append(_T("First"));
+    m_combobox->Append(_T("another one"));
+    m_combobox->Append(_T("and the last (very very very very very very very very very very long) one"));
+}
+
+void ImageComboBoxWidgetsPage::OnButtonAddSeveralWithImages(wxCommandEvent& WXUNUSED(event))
+{
+    int i;
+
+    for ( i=0; i<4; i++ )
+    {
+        wxString s;
+        wxBitmap bmp = CreateRandomBitmap(&s);
+        m_combobox->Append(s, bmp);
+    }
+}
+
+void ImageComboBoxWidgetsPage::LoadWidgetImages( wxArrayString* strings, wxImageList* images )
+{
+    wxFileName fn;
+    fn.AssignCwd();
+    fn.AppendDir(wxT("icons"));
+    
+    wxSetCursor(*wxHOURGLASS_CURSOR);
+
+    if ( !wxDir::Exists(fn.GetFullPath()) ||
+         !wxDir::GetAllFiles(fn.GetFullPath(),strings,wxT("*.xpm")) )
+    {
+        fn.RemoveLastDir();
+        fn.RemoveLastDir();
+        fn.AppendDir(wxT("icons"));
+        if ( !wxDir::Exists(fn.GetFullPath()) ||
+             !wxDir::GetAllFiles(fn.GetFullPath(),strings,wxT("*.xpm")) )
+        {
+            // Try ../../../samples/widgets/icons
+            fn.AssignCwd();
+            fn.RemoveLastDir();
+            fn.RemoveLastDir();
+            fn.RemoveLastDir();
+            fn.AppendDir(wxT("samples"));
+            fn.AppendDir(wxT("widgets"));
+            fn.AppendDir(wxT("icons"));
+            if ( !wxDir::Exists(fn.GetFullPath()) ||
+                 !wxDir::GetAllFiles(fn.GetFullPath(),strings,wxT("*.xpm")) )
+            {
+                wxLogWarning(wxT("Could not load widget icons."));
+                wxSetCursor(*wxSTANDARD_CURSOR);
+                return;
+            }
+        }
+    }
+
+    unsigned int i;
+
+    // Get size of existing images in list
+    wxSize foundSize = m_combobox->GetImageSize();
+
+    for ( i=0; i<strings->size(); i++ )
+    {
+        fn.SetFullName((*strings)[i]);
+        wxString name =fn.GetName();
+
+        // Handle few exceptions
+        if ( name == wxT("bmpbtn") )
+        {
+            strings->RemoveAt(i);
+            i--;
+        }
+        else
+        {
+#if wxUSE_IMAGE
+            wxASSERT(fn.FileExists());
+            wxImage image(fn.GetFullPath());
+            wxASSERT(image.Ok());
+            if ( m_chkScaleimages->GetValue() && foundSize.x > 0 )
+                image.Rescale(foundSize.x, foundSize.y);
+            wxBitmap bmp(image);
+            wxASSERT( bmp.Ok() );
+#else
+            wxBitmap bmp(wxNullBitmap);
+#endif
+            images->Add(bmp);
+            (*strings)[i] = name;
+        }
+    }
+
+    wxSetCursor(*wxSTANDARD_CURSOR);
+}
+
+void ImageComboBoxWidgetsPage::OnButtonAddWidgetIcons(wxCommandEvent& WXUNUSED(event))
+{
+    wxArrayString strings;
+
+    int sz = 32;
+    //if ( m_chkScaleimages->GetValue() )
+    //    sz = 16;
+
+    wxImageList images(sz, sz);
+
+    LoadWidgetImages(&strings, &images);
+
+    unsigned int i;
+
+    for ( i=0; i<strings.size(); i++ )
+    {
+        m_combobox->Append(strings[i], images.GetBitmap(i));
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIResetButton(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+        event.Enable( m_chkSort->GetValue() || m_chkReadonly->GetValue() );
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIInsert(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+    {
+        bool enable = !(m_combobox->GetWindowStyle() & wxCB_SORT);
+
+        event.Enable(enable);
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIDeleteButton(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+    {
+      unsigned long n;
+      event.Enable(m_textDelete->GetValue().ToULong(&n) &&
+        (n < (unsigned)m_combobox->GetCount()));
+    }
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIDeleteSelButton(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+        event.Enable(m_combobox->GetSelection() != wxNOT_FOUND);
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIClearButton(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+        event.Enable(m_combobox->GetCount() != 0);
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIAddSeveral(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+        event.Enable(!(m_combobox->GetWindowStyle() & wxCB_SORT));
+}
+
+void ImageComboBoxWidgetsPage::OnUpdateUIAddSeveralWithImages(wxUpdateUIEvent& event)
+{
+    if (m_combobox)
+        event.Enable(!(m_combobox->GetWindowStyle() & wxCB_SORT));
+}
+
+void ImageComboBoxWidgetsPage::OnComboText(wxCommandEvent& event)
+{
+    if (!m_combobox)
+        return;
+
+    wxString s = event.GetString();
+
+    wxASSERT_MSG( s == m_combobox->GetValue(),
+                  _T("event and combobox values should be the same") );
+
+    if (event.GetEventType() == wxEVT_COMMAND_TEXT_ENTER)
+        wxLogMessage(_T("ImageCombobox enter pressed (now '%s')"), s.c_str());
+    else
+        wxLogMessage(_T("ImageCombobox text changed (now '%s')"), s.c_str());
+}
+
+void ImageComboBoxWidgetsPage::OnComboBox(wxCommandEvent& event)
+{
+    long sel = event.GetInt();
+    m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
+
+    wxLogMessage(_T("ImageCombobox item %ld selected"), sel);
+
+    wxLogMessage(_T("ImageCombobox GetValue(): %s"), m_combobox->GetValue().c_str() );
+}
+
+void ImageComboBoxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
+{
+    CreateCombo();
+}
+
+#if wxUSE_IMAGE
+wxBitmap ImageComboBoxWidgetsPage::LoadBitmap(const wxString& filepath)
+{
+    // Get size of existing images in list
+    wxSize foundSize = m_combobox->GetImageSize();
+
+    wxImage image(filepath);
+    if ( image.Ok() )
+    {
+        // Rescale very large images
+        int ow = image.GetWidth();
+        int oh = image.GetHeight();
+
+        if ( foundSize.x > 0 &&
+             (ow != foundSize.x || oh != foundSize.y) )
+        {
+            int w = ow;
+            if ( w > foundSize.x )
+                w = foundSize.x;
+            int h = oh;
+            if ( h > foundSize.y )
+                h = foundSize.y;
+
+            image.Rescale(w, h);
+        }
+
+        return wxBitmap(image);
+    }
+
+    return wxNullBitmap;
+}
+#else
+wxBitmap ImageComboBoxWidgetsPage::LoadBitmap(const wxString& WXUNUSED(filepath))
+{
+    return wxNullBitmap;
+}
+#endif
+
+wxBitmap ImageComboBoxWidgetsPage::QueryBitmap(wxString* pStr)
+{
+    wxString filepath = wxFileSelector(wxT("Choose image file"),
+                                       wxT(""),
+                                       wxT(""),
+                                       wxT(""),
+                                       wxT("*.*"),
+                                       wxOPEN | wxFILE_MUST_EXIST,
+                                       this);
+
+    wxBitmap bitmap;
+
+    ::wxSetCursor( *wxHOURGLASS_CURSOR );
+
+    if ( filepath.length() )
+    {
+        if ( pStr )
+        {
+            *pStr = wxFileName(filepath).GetName();
+        }
+
+        bitmap = LoadBitmap(filepath);
+    }
+
+    ::wxSetCursor( *wxSTANDARD_CURSOR );
+
+    return bitmap;
+}
+
+wxBitmap ImageComboBoxWidgetsPage::CreateBitmap(const wxColour& colour)
+{
+    int ch = m_combobox->GetImageSize().y;
+    int h0 = ch - 5;
+
+    long w = ch;
+    long h = ch;
+
+    if ( w <= 0 )
+        w = h0 - 1;
+    if ( h <= 0 )
+        h = h0;
+    if ( h > ch )
+        h = ch;
+
+    wxMemoryDC dc;
+    wxBitmap bmp(w,h);
+    dc.SelectObject(bmp);
+
+    // Draw transparent background
+    wxColour magic(255,0,255);
+    wxBrush magicBrush(magic);
+    dc.SetBrush(magicBrush);
+    dc.SetPen(*wxTRANSPARENT_PEN);
+    dc.DrawRectangle(0,0,bmp.GetWidth(),bmp.GetHeight());
+
+    // Draw image content
+    dc.SetBrush(wxBrush(colour));
+    dc.DrawCircle(h/2,h/2+1,(h/2));
+
+    dc.SelectObject(wxNullBitmap);
+
+    // Finalize transparency with a mask
+    wxMask *mask = new wxMask(bmp, magic);
+    bmp.SetMask(mask);
+
+    return bmp;
+}
+
+wxBitmap ImageComboBoxWidgetsPage::CreateRandomBitmap( wxString* pStr )
+{
+    int i = rand() % 6;
+    const wxChar* str = wxT("");
+    wxBitmap bmp;
+
+    if ( i == 0 )
+    {
+        str = wxT("Red Circle");
+        bmp = CreateBitmap( *wxRED );
+    }
+    else if ( i == 1 )
+    {
+        str = wxT("Green Circle");
+        bmp = CreateBitmap( *wxGREEN );
+    }
+    else if ( i == 2 )
+    {
+        str = wxT("Blue Circle");
+        bmp = CreateBitmap( *wxBLUE );
+    }
+    else if ( i == 3 )
+    {
+        str = wxT("Black Circle");
+        bmp = CreateBitmap( *wxBLACK );
+    }
+    else if ( i == 4 )
+    {
+        str = wxT("Cyan Circle");
+        bmp = CreateBitmap( *wxCYAN );
+    }
+    else if ( i == 5 )
+    {
+        str = wxT("Light Grey Circle");
+        bmp = CreateBitmap( *wxLIGHT_GREY );
+    }
+
+    if ( pStr )
+        *pStr = str;
+
+    return bmp;
+}
+
+#endif //wxUSE_IMAGECOMBOBOX
--- wxWidgets.orig/samples/widgets/widgets.bkl	Fri Aug 11 21:32:20 2006
+++ wxWidgets/samples/widgets/widgets.bkl	Fri Sep 15 19:40:37 2006
@@ -12,4 +12,5 @@
             gauge.cpp
             hyperlnk.cpp
+            imgcombobox.cpp
             listbox.cpp
             notebook.cpp
--- wxWidgets.orig/samples/xrc/rc/controls.xrc	Mon Jul 17 17:28:33 2006
+++ wxWidgets/samples/xrc/rc/controls.xrc	Fri Sep 15 19:40:37 2006
@@ -407,4 +407,29 @@
                                 </object>
                             </object>
+                            <object class="sizeritem">
+                                <flag>wxALIGN_TOP|wxALIGN_CENTRE_HORIZONTAL|wxALL</flag>
+                                <border>5</border>
+                                <object class="wxImageComboBox">
+                                    <size>200,-1</size>
+                                    <style>wxCB_READONLY</style>
+                                    <selection>2</selection>
+                                    <object class="ownerdrawnitem">
+										<text>This is a</text>
+										<bitmap>basicdlg.xpm</bitmap>
+									 </object>
+                                    <object class="ownerdrawnitem">
+										<text>read-only</text>
+										<bitmap>derivdlg.xpm</bitmap>
+									 </object>
+                                    <object class="ownerdrawnitem">
+										<text>wxImageComboBox</text>
+										<bitmap>uncenter.xpm</bitmap>
+									 </object>
+                                    <object class="ownerdrawnitem">
+										<text>control</text>
+										<bitmap>custclas.xpm</bitmap>
+									</object>
+                                </object>
+                            </object>
                         </object>
                     </object>
--- wxWidgets.orig/setup.h.in	Tue Sep 12 17:32:19 2006
+++ wxWidgets/setup.h.in	Fri Sep 15 19:40:38 2006
@@ -357,4 +357,6 @@
 #define wxUSE_ODCOMBOBOX 0
 
+#define wxUSE_IMAGECOMBOBOX 0
+
 
 #define wxUSE_ACCEL 0
--- wxWidgets.orig/setup.h_vms	Fri Aug 25 17:21:45 2006
+++ wxWidgets/setup.h_vms	Fri Sep 15 19:40:38 2006
@@ -379,4 +379,6 @@
 #define wxUSE_ODCOMBOBOX 1
 
+#define wxUSE_IMAGECOMBOBOX 1
+
 #define wxUSE_ACCEL 1
 
--- wxWidgets.orig/src/generic/imgcboxg.cpp	Fri Sep 15 19:40:38 2006
+++ wxWidgets/src/generic/imgcboxg.cpp	Fri Sep 15 19:40:38 2006
@@ -0,0 +1,471 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/generic/imgcboxg.cpp
+// Purpose:     wxImageComboBox
+// Author:      Jaakko Salli
+// Modified by:
+// Created:     Aug-31-2006
+// RCS-ID:      $Id:
+// Copyright:   (c) 2005 Jaakko Salli
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// ============================================================================
+// declarations
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// headers
+// ----------------------------------------------------------------------------
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_IMAGECOMBOBOX
+
+#include "wx/imgcbox.h"
+
+#if defined(wxGENERIC_IMAGECOMBOBOX)
+
+#ifndef WX_PRECOMP
+    #include "wx/log.h"
+#endif
+
+#include "wx/odcombo.h"
+#include "wx/settings.h"
+
+#if wxUSE_IMAGE
+    #include "wx/image.h"
+#endif
+
+
+const wxChar wxImageComboBoxNameStr[] = wxT("imageComboBox");
+
+
+// These macros allow wxArrayPtrVoid to be used in more convient manner
+#define GetBitmapPtr(n)     ((wxBitmap*)m_bitmaps[n])
+
+
+#define IMAGE_SPACING_RIGHT         4  // Space left of image
+
+#define IMAGE_SPACING_LEFT          4  // Space right of image, left of text
+
+#define IMAGE_SPACING_VERTICAL      2  // Space top and bottom of image
+
+#define IMAGE_SPACING_CTRL_VERTICAL 7  // Spacing used in control size calculation
+
+#define EXTRA_FONT_HEIGHT           0  // Add to increase min. height of list items
+
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+
+BEGIN_EVENT_TABLE(wxImageComboBox, wxOwnerDrawnComboBox)
+    EVT_SIZE(wxImageComboBox::OnResize)
+END_EVENT_TABLE()
+
+
+IMPLEMENT_DYNAMIC_CLASS(wxImageComboBox, wxOwnerDrawnComboBox)
+
+void wxImageComboBox::Init()
+{
+    m_fontHeight = 0;
+    m_imgAreaWidth = 0;
+    m_inResize = false;
+}
+
+wxImageComboBox::wxImageComboBox(wxWindow *parent,
+                                 wxWindowID id,
+                                 const wxString& value,
+                                 const wxPoint& pos,
+                                 const wxSize& size,
+                                 const wxArrayString& choices,
+                                 long style,
+                                 const wxValidator& validator,
+                                 const wxString& name)
+    : wxOwnerDrawnComboBox(),
+      wxImageComboBoxBase()
+{
+    Init();
+
+    Create(parent,id,value,pos,size,choices,style,validator,name);
+}
+
+bool wxImageComboBox::Create(wxWindow *parent,
+                             wxWindowID id,
+                             const wxString& value,
+                             const wxPoint& pos,
+                             const wxSize& size,
+                             const wxArrayString& choices,
+                             long style,
+                             const wxValidator& validator,
+                             const wxString& name)
+{
+    if ( !wxOwnerDrawnComboBox::Create(parent, id, value,
+                                       pos, size,
+                                       choices, style,
+                                       validator, name) )
+    {
+        return false;
+    }
+
+    PostCreate();
+
+    return true;
+}
+
+bool wxImageComboBox::Create(wxWindow *parent,
+                             wxWindowID id,
+                             const wxString& value,
+                             const wxPoint& pos,
+                             const wxSize& size,
+                             int n,
+                             const wxString choices[],
+                             long style,
+                             const wxValidator& validator,
+                             const wxString& name)
+{
+    if ( !wxOwnerDrawnComboBox::Create(parent, id, value,
+                                       pos, size, n,
+                                       choices, style,
+                                       validator, name) )
+    {
+        return false;
+    }
+
+    PostCreate();
+
+    return true;
+}
+
+void wxImageComboBox::PostCreate()
+{
+    m_fontHeight = GetCharHeight() + EXTRA_FONT_HEIGHT;
+}
+
+wxImageComboBox::~wxImageComboBox()
+{
+    Clear();
+}
+
+// ----------------------------------------------------------------------------
+// Item manipulation
+// ----------------------------------------------------------------------------
+
+void wxImageComboBox::SetItemBitmap(unsigned int n, const wxBitmap& bitmap)
+{
+    wxCHECK_RET( n < m_bitmaps.size(), wxT("invalid item index") );
+    OnAddBitmap(bitmap);
+    *GetBitmapPtr(n) = bitmap;
+
+    if ( (int)n == GetSelection() )
+        Refresh();
+}
+
+wxBitmap wxImageComboBox::GetItemBitmap(unsigned int n) const
+{
+    wxCHECK_MSG( n < m_bitmaps.size(), wxNullBitmap, wxT("invalid item index") );
+    return *GetBitmapPtr(n);
+}
+
+int wxImageComboBox::Insert(const wxString& item, const wxBitmap& bitmap,
+                            unsigned int pos, void *clientData)
+{
+    int n = DoInsertWithImage(item, bitmap, pos);
+    if ( n != wxNOT_FOUND )
+        SetClientData(n, clientData);
+
+    return n;
+}
+
+int wxImageComboBox::Insert(const wxString& item, const wxBitmap& bitmap,
+                            unsigned int pos, wxClientData *clientData)
+{
+    int n = DoInsertWithImage(item, bitmap, pos);
+    if ( n != wxNOT_FOUND )
+        SetClientObject(n, clientData);
+
+    return n;
+}
+
+bool wxImageComboBox::OnAddBitmap(const wxBitmap& bitmap)
+{
+    if ( bitmap.Ok() )
+    {
+        int width = bitmap.GetWidth();
+        int height = bitmap.GetHeight();
+
+        if ( m_usedImgSize.x <= 0 )
+        {
+            //
+            // If size not yet determined, get it from this image.
+            m_usedImgSize.x = width;
+            m_usedImgSize.y = height;
+
+            InvalidateBestSize();
+            wxSize newSz = GetBestSize();
+            wxSize sz = GetSize();
+            if ( newSz.y > sz.y )
+                SetSize(sz.x, newSz.y);
+            else
+                DetermineIndent();
+        }
+
+        wxCHECK_MSG(width == m_usedImgSize.x && height == m_usedImgSize.y,
+                    false,
+                    wxT("you can only add images of same size"));
+    }
+
+    return true;
+}
+
+bool wxImageComboBox::DoInsertBitmap(const wxBitmap& bitmap, unsigned int pos)
+{
+    if ( !OnAddBitmap(bitmap) )
+        return false;
+
+    // NB: We must try to set the image before DoInsert or
+    //     DoAppend because OnMeasureItem might be called
+    //     before it returns.
+    m_bitmaps.Insert( new wxBitmap(bitmap), pos);
+
+    return true;
+}
+
+int wxImageComboBox::DoAppendWithImage(const wxString& item, const wxBitmap& image)
+{
+    unsigned int pos = m_bitmaps.size();
+
+    if ( !DoInsertBitmap(image, pos) )
+        return wxNOT_FOUND;
+
+    int index = wxOwnerDrawnComboBox::DoAppend(item);
+
+    if ( index < 0 )
+        index = m_bitmaps.size();
+
+    // Need to re-check the index incase DoAppend sorted
+    if ( (unsigned int) index != pos )
+    {
+        wxBitmap* bmp = GetBitmapPtr(pos);
+        m_bitmaps.RemoveAt(pos);
+        m_bitmaps.Insert(bmp, index);
+    }
+
+    return index;
+}
+
+int wxImageComboBox::DoInsertWithImage(const wxString& item,
+                                       const wxBitmap& image,
+                                       unsigned int pos)
+{
+    if ( !DoInsertBitmap(image, pos) )
+        return wxNOT_FOUND;
+
+    return wxOwnerDrawnComboBox::DoInsert(item, pos);
+}
+
+int wxImageComboBox::DoAppend(const wxString& item)
+{
+    return DoAppendWithImage(item, wxNullBitmap);
+}
+
+int wxImageComboBox::DoInsert(const wxString& item, unsigned int pos)
+{
+    return DoInsertWithImage(item, wxNullBitmap, pos);
+}
+
+void wxImageComboBox::Clear()
+{
+    wxOwnerDrawnComboBox::Clear();
+
+    unsigned int i;
+
+    for ( i=0; i<m_bitmaps.size(); i++ )
+        delete GetBitmapPtr(i);
+
+    m_bitmaps.Empty();
+
+    m_usedImgSize.x = 0;
+    m_usedImgSize.y = 0;
+
+    DetermineIndent();
+}
+
+void wxImageComboBox::Delete(unsigned int n)
+{
+    wxOwnerDrawnComboBox::Delete(n);
+    delete GetBitmapPtr(n);
+    m_bitmaps.RemoveAt(n);
+}
+
+// ----------------------------------------------------------------------------
+// wxImageComboBox event handlers and such
+// ----------------------------------------------------------------------------
+
+void wxImageComboBox::DetermineIndent()
+{
+    //
+    // Recalculate amount of empty space needed in front of
+    // text in control itself.
+    int indent = m_imgAreaWidth = 0;
+
+    if ( m_usedImgSize.x > 0 )
+    {
+        indent = m_usedImgSize.y + IMAGE_SPACING_LEFT + IMAGE_SPACING_RIGHT;
+        m_imgAreaWidth = indent;
+
+        indent -= 3;
+    }
+
+    SetCustomPaintWidth(indent);
+}
+
+void wxImageComboBox::OnResize(wxSizeEvent& event)
+{
+    // Prevent infinite looping
+    if ( !m_inResize )
+    {
+        m_inResize = true;
+        DetermineIndent();
+        m_inResize = false;
+    }
+
+    event.Skip();
+}
+
+wxSize wxImageComboBox::DoGetBestSize() const
+{
+    wxSize sz = wxOwnerDrawnComboBox::DoGetBestSize();
+
+    // Scale control to match height of highest image.
+    int h2 = m_usedImgSize.y + IMAGE_SPACING_CTRL_VERTICAL;
+
+    if ( h2 > sz.y )
+        sz.y = h2;
+
+    CacheBestSize(sz);
+    return sz;
+}
+
+// ----------------------------------------------------------------------------
+// wxImageComboBox miscellaneous
+// ----------------------------------------------------------------------------
+
+bool wxImageComboBox::SetFont(const wxFont& font)
+{
+    bool res = wxOwnerDrawnComboBox::SetFont(font);
+    m_fontHeight = GetCharHeight() + EXTRA_FONT_HEIGHT;
+    return res;
+}
+
+// ----------------------------------------------------------------------------
+// wxImageComboBox item drawing and measuring
+// ----------------------------------------------------------------------------
+
+void wxImageComboBox::OnDrawBackground(wxDC& dc,
+                                       const wxRect& rect,
+                                       int item,
+                                       int flags) const
+{
+    if ( GetCustomPaintWidth() == 0 ||
+         !(flags & wxODCB_PAINTING_SELECTED) ||
+         item < 0 )
+    {
+        wxOwnerDrawnComboBox::OnDrawBackground(dc, rect, item, flags);
+        return;
+    }
+
+    //
+    // Just paint simple selection background under where is text
+    // (ie. emulate what MSW image choice does).
+    //
+
+    int xPos = 0;  // Starting x of selection rectangle
+    const int vSizeDec = 1;  // Vertical size reduction of selection rectangle edges
+
+    xPos = GetCustomPaintWidth() + 2;
+
+    wxCoord x, y;
+    GetTextExtent(GetString(item), &x, &y, 0, 0);
+
+    dc.SetTextForeground(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
+
+    wxColour selCol = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
+    dc.SetPen(selCol);
+    dc.SetBrush(selCol);
+    dc.DrawRectangle(rect.x+xPos,
+                     rect.y+vSizeDec,
+                     x + 4,
+                     rect.height-(vSizeDec*2));
+}
+
+void wxImageComboBox::OnDrawItem(wxDC& dc,
+                                 const wxRect& rect,
+                                 int item,
+                                 int flags) const
+{
+    wxString text;
+    int imgAreaWidth = m_imgAreaWidth;
+    bool drawText;
+
+    if ( imgAreaWidth == 0 )
+    {
+        wxOwnerDrawnComboBox::OnDrawItem(dc, rect, item, flags);
+        return;
+    }
+
+    if ( flags & wxODCB_PAINTING_CONTROL )
+    {
+        text = GetValue();
+        if ( HasFlag(wxCB_READONLY) )
+            drawText = true;
+        else
+            drawText = false;
+    }
+    else
+    {
+        text = GetString(item);
+        drawText = true;
+    }
+
+    const wxBitmap& bmp = *GetBitmapPtr(item);
+    if ( bmp.Ok() )
+    {
+        wxCoord w = bmp.GetWidth();
+        wxCoord h = bmp.GetHeight();
+
+        // Draw the image centered
+        dc.DrawBitmap(bmp,
+                      rect.x + (m_usedImgSize.x-w)/2 + IMAGE_SPACING_LEFT,
+                      rect.y + (rect.height-h)/2,
+                      true);
+    }
+
+    if ( drawText )
+        dc.DrawText(GetString(item),
+                    rect.x + imgAreaWidth + 1,
+                    rect.y + (rect.height-dc.GetCharHeight())/2);
+}
+
+wxCoord wxImageComboBox::OnMeasureItem(size_t WXUNUSED(item)) const
+{
+    int imgHeightArea = m_usedImgSize.y + 2;
+    return imgHeightArea > m_fontHeight ? imgHeightArea : m_fontHeight;
+}
+
+wxCoord wxImageComboBox::OnMeasureItemWidth(size_t item) const
+{
+    wxCoord x, y;
+    GetTextExtent(GetString(item), &x, &y, 0, 0);
+    x += m_imgAreaWidth;
+    return x;
+}
+
+#endif // defined(wxGENERIC_IMAGECOMBOBOX)
+
+#endif // wxUSE_IMAGECOMBOBOX
--- wxWidgets.orig/src/xrc/xh_imgcbox.cpp	Fri Sep 15 19:40:38 2006
+++ wxWidgets/src/xrc/xh_imgcbox.cpp	Fri Sep 15 19:40:38 2006
@@ -0,0 +1,102 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_imgcbox.cpp
+// Purpose:     XRC resource for wxImageComboBox
+// Author:      Jaakko Salli
+// Created:     Sep-10-2006
+// RCS-ID:      $Id:
+// Copyright:   (c) 2006 Jaakko Salli
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_IMAGECOMBOBOX
+
+#include "wx/xrc/xh_imgcbox.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/intl.h"
+#endif
+
+#include "wx/imgcbox.h"
+
+IMPLEMENT_DYNAMIC_CLASS(wxImageComboBoxXmlHandler, wxXmlResourceHandler)
+
+wxImageComboBoxXmlHandler::wxImageComboBoxXmlHandler()
+                     :wxXmlResourceHandler()
+                     ,m_combobox(NULL)
+                     ,m_isInside(false)
+{
+    XRC_ADD_STYLE(wxCB_SORT);
+    XRC_ADD_STYLE(wxCB_READONLY);
+    AddWindowStyles();
+}
+
+wxObject *wxImageComboBoxXmlHandler::DoCreateResource()
+{
+    if (m_class == wxT("ownerdrawnitem"))
+    {
+        wxCHECK_MSG(m_combobox, NULL, wxT("Incorrect syntax of XRC resource: ownerdrawnitem not within a imagecombobox!"));
+
+        m_combobox->Append(GetText(wxT("text")), GetBitmap(wxT("bitmap"), wxART_MISSING_IMAGE));
+
+        return m_combobox;
+    }
+    else /*if( m_class == wxT("wxImageComboBox"))*/
+    {
+        // find the selection
+        long selection = GetLong( wxT("selection"), -1 );
+
+        XRC_MAKE_INSTANCE(control, wxImageComboBox)
+
+        control->Create(m_parentAsWindow,
+                        GetID(),
+                        GetText(wxT("value")),
+                        GetPosition(), GetSize(),
+                        0,
+                        NULL,
+                        GetStyle(),
+                        wxDefaultValidator,
+                        GetName());
+
+        m_isInside = true;
+        m_combobox = control;
+
+        wxXmlNode *children_node = GetParamNode(wxT("object"));
+
+        wxXmlNode *n = children_node;
+
+        while (n)
+        {
+            if ((n->GetType() == wxXML_ELEMENT_NODE) &&
+                (n->GetName() == wxT("object")))
+            {
+                CreateResFromNode(n, control, NULL);
+            }
+            n = n->GetNext();
+        }
+
+        m_isInside = false;
+        m_combobox = NULL;
+
+        if (selection != -1)
+            control->SetSelection(selection);
+
+        SetupWindow(control);
+
+        return control;
+    }
+}
+
+bool wxImageComboBoxXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return ((!m_isInside && IsOfClass(node, wxT("wxImageComboBox"))) ||
+            (m_isInside && IsOfClass(node, wxT("ownerdrawnitem"))));
+}
+
+#endif // wxUSE_XRC && wxUSE_IMAGECOMBOBOX
--- wxWidgets.orig/src/xrc/xmlrsall.cpp	Tue Jun 20 17:18:58 2006
+++ wxWidgets/src/xrc/xmlrsall.cpp	Fri Sep 15 19:40:38 2006
@@ -81,4 +81,7 @@
     AddHandler(new wxOwnerDrawnComboBoxXmlHandler);
 #endif
+#if wxUSE_IMAGECOMBOBOX
+    AddHandler(new wxImageComboBoxXmlHandler);
+#endif
 #if wxUSE_NOTEBOOK
     AddHandler(new wxNotebookXmlHandler);

 	  	 

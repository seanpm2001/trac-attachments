Index: include/wx/msw/tooltip.h
===================================================================
--- include/wx/msw/tooltip.h	(revision 57279)
+++ include/wx/msw/tooltip.h	(working copy)
@@ -37,6 +37,10 @@
     static void Enable(bool flag);
         // set the delay after which the tooltip appears
     static void SetDelay(long milliseconds);
+        // set new tooltip maximum width, defaults to min(display width, 400)
+        // use -1 for unlimited width, 0 for default setting
+        // does not change tooltips already created
+    static void SetMaxWidth(int width) { ms_maxWidth = width; }
 
     // implementation only from now on
     // -------------------------------
@@ -58,6 +62,9 @@
     // create the tooltip ctrl if it doesn't exist yet and return its HWND
     static WXHWND GetToolTipCtrl();
 
+    // new tooltip maximum width, defaults to min(display width, 400)
+    static int ms_maxWidth;
+
     // remove this tooltip from the tooltip control
     void Remove();
 
Index: src/msw/tooltip.cpp
===================================================================
--- src/msw/tooltip.cpp	(revision 57279)
+++ src/msw/tooltip.cpp	(working copy)
@@ -62,6 +62,9 @@
 // the tooltip parent window
 WXHWND wxToolTip::ms_hwndTT = (WXHWND)NULL;
 
+// new tooltip maximum width, default value is set on first call to wxToolTip::Add()
+int wxToolTip::ms_maxWidth = 0;
+
 #if wxUSE_TTM_WINDOWFROMPOINT
 
 // the tooltip window proc
@@ -312,73 +315,80 @@
     }
     else
     {
-        // check for multiline toopltip
-        int index = m_text.Find(_T('\n'));
+        bool setmaxtipwidth;
+#ifdef TTM_SETMAXTIPWIDTH
+        setmaxtipwidth = (wxApp::GetComCtl32Version() >= 470);
+#else 
+        setmaxtipwidth = false;
+#endif
+        if (setmaxtipwidth)
+        {
+            // use TTM_SETMAXTIPWIDTH to make tooltip multiline using the
+            // extent of its first line as max value
+            HFONT hfont = (HFONT)
+                SendTooltipMessage(GetToolTipCtrl(), WM_GETFONT, 0);
 
-        if ( index != wxNOT_FOUND )
-        {
-#ifdef TTM_SETMAXTIPWIDTH
-            if ( wxApp::GetComCtl32Version() >= 470 )
+            if ( !hfont )
             {
-                // use TTM_SETMAXTIPWIDTH to make tooltip multiline using the
-                // extent of its first line as max value
-                HFONT hfont = (HFONT)
-                    SendTooltipMessage(GetToolTipCtrl(), WM_GETFONT, 0);
-
+                hfont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
                 if ( !hfont )
                 {
-                    hfont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
-                    if ( !hfont )
-                    {
-                        wxLogLastError(wxT("GetStockObject(DEFAULT_GUI_FONT)"));
-                    }
+                    wxLogLastError(wxT("GetStockObject(DEFAULT_GUI_FONT)"));
                 }
+            }
 
-                MemoryHDC hdc;
-                if ( !hdc )
-                {
-                    wxLogLastError(wxT("CreateCompatibleDC(NULL)"));
-                }
+            MemoryHDC hdc;
+            if ( !hdc )
+            {
+                wxLogLastError(wxT("CreateCompatibleDC(NULL)"));
+            }
 
-                if ( !SelectObject(hdc, hfont) )
-                {
-                    wxLogLastError(wxT("SelectObject(hfont)"));
-                }
+            if ( !SelectObject(hdc, hfont) )
+            {
+                wxLogLastError(wxT("SelectObject(hfont)"));
+            }
 
-                // find the width of the widest line
-                int max = 0;
-                wxStringTokenizer tokenizer(m_text, _T("\n"));
-                wxString token = tokenizer.GetNextToken();
-                while (token.length())
+            // find the width of the widest line
+            int max = 0;
+            wxStringTokenizer tokenizer(m_text, _T("\n"));
+            wxString token = tokenizer.GetNextToken();
+            while (token.length())
+            {
+                SIZE sz;
+                if ( !::GetTextExtentPoint32(hdc, token, token.length(), &sz) )
                 {
-                    SIZE sz;
-                    if ( !::GetTextExtentPoint32(hdc, token, token.length(), &sz) )
-                    {
-                        wxLogLastError(wxT("GetTextExtentPoint32"));
-                    }
-                    if ( sz.cx > max )
-                        max = sz.cx;
-
-                    token = tokenizer.GetNextToken();
+                    wxLogLastError(wxT("GetTextExtentPoint32"));
                 }
+                if ( sz.cx > max )
+                    max = sz.cx;
 
-                // only set a new width if it is bigger than the current setting
-                if (max > SendTooltipMessage(GetToolTipCtrl(), TTM_GETMAXTIPWIDTH, 0))
-                    SendTooltipMessage(GetToolTipCtrl(), TTM_SETMAXTIPWIDTH,
-                                       (void *)max);
+                token = tokenizer.GetNextToken();
             }
-            else
-#endif // comctl32.dll >= 4.70
+
+            // limit size to ms_maxWidth, if set
+            if (ms_maxWidth == 0)
             {
-                // replace the '\n's with spaces because otherwise they appear as
-                // unprintable characters in the tooltip string
-                m_text.Replace(_T("\n"), _T(" "));
-                ti.lpszText = (wxChar *)m_text.c_str(); // const_cast
+                ms_maxWidth = wxGetClientDisplayRect().width;
+                if (ms_maxWidth > 400) ms_maxWidth = 400;
+            }
+            if (ms_maxWidth != -1 && max > ms_maxWidth)
+                max = ms_maxWidth;
 
-                if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )
-                {
-                    wxLogDebug(_T("Failed to create the tooltip '%s'"), m_text.c_str());
-                }
+            // only set a new width if it is bigger than the current setting
+            if (max > SendTooltipMessage(GetToolTipCtrl(), TTM_GETMAXTIPWIDTH, 0))
+                SendTooltipMessage(GetToolTipCtrl(), TTM_SETMAXTIPWIDTH,
+                                   (void *)max);
+        }
+        else
+        {
+            // replace the '\n's with spaces because otherwise they appear as
+            // unprintable characters in the tooltip string
+            m_text.Replace(_T("\n"), _T(" "));
+            ti.lpszText = (wxChar *)m_text.c_str(); // const_cast
+
+            if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )
+            {
+                wxLogDebug(_T("Failed to create the tooltip '%s'"), m_text.c_str());
             }
         }
     }

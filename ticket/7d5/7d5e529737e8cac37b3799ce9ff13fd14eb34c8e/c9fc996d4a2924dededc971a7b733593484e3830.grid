Index: src/generic/grid.cpp
===================================================================
RCS file: /cvsroot/wxwindows/wxWindows/src/generic/grid.cpp,v
retrieving revision 1.146.2.51
diff -u -r1.146.2.51 grid.cpp
--- src/generic/grid.cpp	2001/02/02 15:56:30	1.146.2.51
+++ src/generic/grid.cpp	2001/03/29 00:52:42
@@ -355,7 +355,12 @@
 
 // scroll line size
 // TODO: fixed so far - make configurable later (and also different for x/y)
-static const size_t GRID_SCROLL_LINE = 10;
+//static const size_t GRID_SCROLL_LINE = 10;
+// It's not clear exactly what GRID_SCROLL_LINE is supposed to accomplish
+// (probably an attempt to make the scroll operation work on cell boundries)
+// but the effect, for any value other than one, is to make the scroll bars
+// imprecise by allowing slop in the calculation of the right&bottom edges.
+static const size_t GRID_SCROLL_LINE = 1;
 
 // the size of hash tables used a bit everywhere (the max number of elements
 // in these hash tables is the number of rows/columns)
@@ -3565,9 +3570,6 @@
     m_inOnKeyDown = FALSE;
     m_batchCount = 0;
 
-    m_extraWidth =
-    m_extraHeight = 50;
-
     CalcDimensions();
 }
 
@@ -3650,20 +3652,17 @@
 
 void wxGrid::CalcDimensions()
 {
-    int cw, ch;
-    GetClientSize( &cw, &ch );
-
     if ( m_numRows > 0  ||  m_numCols > 0 )
     {
-        int right = m_numCols > 0 ? GetColRight( m_numCols-1 ) + m_extraWidth : 0;
-        int bottom = m_numRows > 0 ? GetRowBottom( m_numRows-1 ) + m_extraHeight : 0;
+        int w = m_numCols > 0 ? GetColRight( m_numCols-1 ) + 1 : 0;
+        int h = m_numRows > 0 ? GetRowBottom( m_numRows-1 ) + 1 : 0;
 
         // TODO: restore the scroll position that we had before sizing
         //
         int x, y;
         GetViewStart( &x, &y );
         SetScrollbars( GRID_SCROLL_LINE, GRID_SCROLL_LINE,
-                       right/GRID_SCROLL_LINE, bottom/GRID_SCROLL_LINE,
+                       w/GRID_SCROLL_LINE, h/GRID_SCROLL_LINE,
                        x, y );
     }
 }

 	  	 

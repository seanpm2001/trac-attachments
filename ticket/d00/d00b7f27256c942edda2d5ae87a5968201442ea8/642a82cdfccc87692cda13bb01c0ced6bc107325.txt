===================================================================
RCS file: /home/cvsd/project/System/Reltech/Software/db.cpp,v
retrieving revision 1.1
retrieving revision 1.2
diff -c -r1.1 -r1.2
*** System/Reltech/Software/db.cpp	2004/06/22 09:41:17	1.1
--- System/Reltech/Software/db.cpp	2004/08/09 15:41:42	1.2
***************
*** 16,22 ****
  //                -Set ODBC option to only read committed writes to the DB so all
  //                   databases operate the same in that respect
  // Created:     9.96
! // RCS-ID:      $Id: db.cpp,v 1.1 2004/06/22 09:41:17 mnewsam Exp $
  // Copyright:   (c) 1996 Remstar International, Inc.
  // Licence:     wxWindows licence, plus:
  // Notice:      This class library and its intellectual design are free of charge for use,
--- 16,22 ----
  //                -Set ODBC option to only read committed writes to the DB so all
  //                   databases operate the same in that respect
  // Created:     9.96
! // RCS-ID:      $Id: db.cpp,v 1.2 2004/08/09 15:41:42 mnewsam Exp $
  // Copyright:   (c) 1996 Remstar International, Inc.
  // Licence:     wxWindows licence, plus:
  // Notice:      This class library and its intellectual design are free of charge for use,
***************
*** 123,131 ****
  
  
  /********** wxDbConnectInf Constructor - form 2 **********/
! wxDbConnectInf::wxDbConnectInf(HENV henv, const wxString &dsn, const wxString &userID,
!                        const wxString &password, const wxString &defaultDir,
!                        const wxString &fileType, const wxString &description)
  {
      Henv = 0;
      freeHenvOnDestroy = FALSE;
--- 123,136 ----
  
  
  /********** wxDbConnectInf Constructor - form 2 **********/
! wxDbConnectInf::wxDbConnectInf(HENV henv, const wxString &dsn,
!                                const wxString &userID,
!                                const wxString &password,
!                                const wxString &defaultDir,
!                                const wxString &fileType,
!                                const wxString &description,
!                                const wxString &fileDSN,
!                                bool isfiledsn)
  {
      Henv = 0;
      freeHenvOnDestroy = FALSE;
***************
*** 143,148 ****
--- 148,155 ----
      SetDescription(description);
      SetFileType(fileType);
      SetDefaultDir(defaultDir);
+     m_filedsn = fileDSN;
+     m_isfiledsn = isfiledsn;
  }  // wxDbConnectInf Constructor
  
  
***************
*** 209,214 ****
--- 216,235 ----
  }  // wxDbConnectInf::FreeHenv()
  
  
+ const wxChar *wxDbConnectInf::GetFileDSN()
+ {
+    return m_filedsn.c_str();
+ }
+ 
+ const char *wxDbConnectInf::GetConnectString()
+ {
+    wxString connect;
+ 
+    connect.sprintf("FILEDSN=%s;", m_filedsn.c_str());
+ 
+    return connect.c_str();
+ }
+ 
  void wxDbConnectInf::SetDsn(const wxString &dsn)
  {
      wxASSERT(dsn.Length() < sizeof(Dsn));
***************
*** 217,222 ****
--- 238,250 ----
  }  // wxDbConnectInf::SetDsn()
  
  
+ void wxDbConnectInf::SetFileDSN(const char *filedsn)
+ {
+    m_filedsn = filedsn;
+    m_isfiledsn = true;
+ }  // wxDbConnectInf::SetDsn()
+ 
+ 
  void wxDbConnectInf::SetUserID(const wxString &uid)
  {
      wxASSERT(uid.Length() < sizeof(Uid));
***************
*** 577,583 ****
  
  
  /********** wxDb::Open() **********/
! bool wxDb::Open(const wxString &Dsn, const wxString &Uid, const wxString &AuthStr, bool failOnDataTypeUnsupported)
  {
      wxASSERT(Dsn.Length());
      dsn        = Dsn;
--- 605,612 ----
  
  
  /********** wxDb::Open() **********/
! bool wxDb::Open(const wxString &Dsn, const wxString &Uid,
!                 const wxString &AuthStr, bool failOnDataTypeUnsupported)
  {
      wxASSERT(Dsn.Length());
      dsn        = Dsn;
***************
*** 605,612 ****
                           (UCHAR FAR *) uid.c_str(), SQL_NTS,
                           (UCHAR FAR *) authStr.c_str(), SQL_NTS);
  
!     if ((retcode != SQL_SUCCESS) &&
!         (retcode != SQL_SUCCESS_WITH_INFO))
          return(DispAllErrors(henv, hdbc));
  
  /*
--- 634,640 ----
                           (UCHAR FAR *) uid.c_str(), SQL_NTS,
                           (UCHAR FAR *) authStr.c_str(), SQL_NTS);
  
!     if ((retcode != SQL_SUCCESS) && (retcode != SQL_SUCCESS_WITH_INFO))
          return(DispAllErrors(henv, hdbc));
  
  /*
***************
*** 773,778 ****
--- 801,994 ----
  } // wxDb::Open()
  
  
+ bool wxDb::Open(const char *filedsn, bool failOnDataTypeUnsupported)
+ {
+    RETCODE retcode;
+    SQLCHAR OutConnectString[1024];
+    SQLSMALLINT StringLength = 1024;
+ 
+    if (!FwdOnlyCursors())
+    {
+       // Specify that the ODBC cursor library be used, if needed.  This must be
+       // specified before the connection is made.
+       retcode = SQLSetConnectOption(hdbc, SQL_ODBC_CURSORS, SQL_CUR_USE_IF_NEEDED);
+ 
+ #ifdef DBDEBUG_CONSOLE
+       if (retcode == SQL_SUCCESS)
+          cout << wxT("SQLSetConnectOption(CURSOR_LIB) successful") << endl;
+       else
+          cout << wxT("SQLSetConnectOption(CURSOR_LIB) failed") << endl;
+ #endif
+    }
+ 
+    // Connect to the data source
+    retcode = SQLDriverConnect( hdbc,
+                                NULL,
+                                (SQLCHAR*) filedsn,
+                                SQL_NTS,
+                                (SQLCHAR*)OutConnectString,
+                                sizeof(OutConnectString),
+                                &StringLength,
+                                SQL_DRIVER_COMPLETE );
+ 
+    if ((retcode != SQL_SUCCESS) && (retcode != SQL_SUCCESS_WITH_INFO))
+       return(DispAllErrors(henv, hdbc));
+    
+    // Mark database as open
+    dbIsOpen = true;
+ 
+    // Allocate a statement handle for the database connection
+    if (SQLAllocStmt(hdbc, &hstmt) != SQL_SUCCESS)
+       return(DispAllErrors(henv, hdbc));
+ 
+    // Set Connection Options
+    if (!setConnectionOptions())
+       return false;
+ 
+    // Query the data source for inf. about itself
+    if (!getDbInfo())
+       return false;
+ 
+    // Query the data source regarding data type information
+    
+    //
+    // The way it was determined which SQL data types to use was by calling SQLGetInfo
+    // for all of the possible SQL data types to see which ones were supported.  If
+    // a type is not supported, the SQLFetch() that's called from getDataTypeInfo()
+    // fails with SQL_NO_DATA_FOUND.  This is ugly because I'm sure the three SQL data
+    // types I've selected below will not alway's be what we want.  These are just
+    // what happened to work against an Oracle 7/Intersolv combination.  The following is
+    // a complete list of the results I got back against the Oracle 7 database:
+    //
+    // SQL_BIGINT             SQL_NO_DATA_FOUND
+    // SQL_BINARY             SQL_NO_DATA_FOUND
+    // SQL_BIT                SQL_NO_DATA_FOUND
+    // SQL_CHAR               type name = 'CHAR', Precision = 255
+    // SQL_DATE               SQL_NO_DATA_FOUND
+    // SQL_DECIMAL            type name = 'NUMBER', Precision = 38
+    // SQL_DOUBLE             type name = 'NUMBER', Precision = 15
+    // SQL_FLOAT              SQL_NO_DATA_FOUND
+    // SQL_INTEGER            SQL_NO_DATA_FOUND
+    // SQL_LONGVARBINARY      type name = 'LONG RAW', Precision = 2 billion
+    // SQL_LONGVARCHAR        type name = 'LONG', Precision = 2 billion
+    // SQL_NUMERIC            SQL_NO_DATA_FOUND
+    // SQL_REAL               SQL_NO_DATA_FOUND
+    // SQL_SMALLINT           SQL_NO_DATA_FOUND
+    // SQL_TIME               SQL_NO_DATA_FOUND
+    // SQL_TIMESTAMP          type name = 'DATE', Precision = 19
+    // SQL_VARBINARY          type name = 'RAW', Precision = 255
+    // SQL_VARCHAR            type name = 'VARCHAR2', Precision = 2000
+    // =====================================================================
+    // Results from a Microsoft Access 7.0 db, using a driver from Microsoft
+    //
+    // SQL_VARCHAR            type name = 'TEXT', Precision = 255
+    // SQL_TIMESTAMP          type name = 'DATETIME'
+    // SQL_DECIMAL            SQL_NO_DATA_FOUND
+    // SQL_NUMERIC            type name = 'CURRENCY', Precision = 19
+    // SQL_FLOAT              SQL_NO_DATA_FOUND
+    // SQL_REAL               type name = 'SINGLE', Precision = 7
+    // SQL_DOUBLE             type name = 'DOUBLE', Precision = 15
+    // SQL_INTEGER            type name = 'LONG', Precision = 10
+ 
+    // VARCHAR = Variable length character string
+    if (!getDataTypeInfo(SQL_VARCHAR, typeInfVarchar))
+       if (!getDataTypeInfo(SQL_CHAR, typeInfVarchar))
+          return false;
+       else
+          typeInfVarchar.FsqlType = SQL_CHAR;
+    else
+       typeInfVarchar.FsqlType = SQL_VARCHAR;
+    
+    // Float
+    if (!getDataTypeInfo(SQL_DOUBLE,typeInfFloat))
+       if (!getDataTypeInfo(SQL_REAL,typeInfFloat))
+          if (!getDataTypeInfo(SQL_FLOAT,typeInfFloat))
+             if (!getDataTypeInfo(SQL_DECIMAL,typeInfFloat))
+                if (!getDataTypeInfo(SQL_NUMERIC,typeInfFloat))
+                {
+                   if (failOnDataTypeUnsupported)
+                      return false;
+                }
+                else
+                   typeInfFloat.FsqlType = SQL_NUMERIC;
+             else
+                typeInfFloat.FsqlType = SQL_DECIMAL;
+          else
+             typeInfFloat.FsqlType = SQL_FLOAT;
+       else
+          typeInfFloat.FsqlType = SQL_REAL;
+    else
+       typeInfFloat.FsqlType = SQL_DOUBLE;
+    
+    // Integer
+    if (!getDataTypeInfo(SQL_INTEGER, typeInfInteger))
+    {
+       // If SQL_INTEGER is not supported, use the floating point
+       // data type to store integers as well as floats
+       if (!getDataTypeInfo(typeInfFloat.FsqlType, typeInfInteger))
+       {
+          if (failOnDataTypeUnsupported)
+             return false;
+       }
+       else
+          typeInfInteger.FsqlType = typeInfFloat.FsqlType;
+    }
+    else
+       typeInfInteger.FsqlType = SQL_INTEGER;
+ 
+    // Date/Time
+    if (!getDataTypeInfo(SQL_TIMESTAMP,typeInfDate))
+    {
+       if (!getDataTypeInfo(SQL_DATE,typeInfDate))
+       {
+ #ifdef SQL_DATETIME
+          if (getDataTypeInfo(SQL_DATETIME,typeInfDate))
+          {
+             typeInfDate.FsqlType = SQL_TIME;
+          }
+          else
+ #endif // SQL_DATETIME defined
+          {
+             if (failOnDataTypeUnsupported)
+                return false;
+          }
+       }
+       else
+          typeInfDate.FsqlType = SQL_DATE;
+    }
+    else
+       typeInfDate.FsqlType = SQL_TIMESTAMP;
+ 
+    
+    if (!getDataTypeInfo(SQL_LONGVARBINARY, typeInfBlob))
+    {
+       if (!getDataTypeInfo(SQL_VARBINARY,typeInfBlob))
+       {
+          if (failOnDataTypeUnsupported)
+             return false;
+       }
+       else
+          typeInfBlob.FsqlType = SQL_VARBINARY;
+    }
+    else
+       typeInfBlob.FsqlType = SQL_LONGVARBINARY;
+ 
+    //typeInfBlob.TypeName = "BLOB";
+ 
+ #ifdef DBDEBUG_CONSOLE
+    cout << wxT("VARCHAR DATA TYPE: ") << typeInfVarchar.TypeName << endl;
+    cout << wxT("INTEGER DATA TYPE: ") << typeInfInteger.TypeName << endl;
+    cout << wxT("FLOAT   DATA TYPE: ") << typeInfFloat.TypeName << endl;
+    cout << wxT("DATE    DATA TYPE: ") << typeInfDate.TypeName << endl;
+    cout << wxT("BLOB    DATA TYPE: ") << typeInfBlob.TypeName << endl;
+    cout << endl;
+ #endif
+ 
+    // Completed Successfully
+    return true;
+ } // wxDb::Open()
+ 
+ 
  bool wxDb::Open(wxDbConnectInf *dbConnectInf)
  {
      return Open(dbConnectInf->GetDsn(), dbConnectInf->GetUserID(),
***************
*** 1467,1505 ****
  /********** wxDb::DispAllErrors() **********/
  bool wxDb::DispAllErrors(HENV aHenv, HDBC aHdbc, HSTMT aHstmt)
  /*
!  * This function is called internally whenever an error condition prevents the user's
!  * request from being executed.  This function will query the datasource as to the
!  * actual error(s) that just occured on the previous request of the datasource.
   *
   * The function will retrieve each error condition from the datasource and
!  * Printf the codes/text values into a string which it then logs via logError().
!  * If in DBDEBUG_CONSOLE mode, the constructed string will be displayed in the console
!  * window and program execution will be paused until the user presses a key.
!  *
!  * This function always returns a FALSE, so that functions which call this function
!  * can have a line like "return (DispAllErrors(henv, hdbc));" to indicate the failure
!  * of the users request, so that the calling code can then process the error msg log
   */
  {
      wxString odbcErrMsg;
  
!     while (SQLError(aHenv, aHdbc, aHstmt, (UCHAR FAR *) sqlState, &nativeError, (UCHAR FAR *) errorMsg, SQL_MAX_MESSAGE_LENGTH - 1, &cbErrorMsg) == SQL_SUCCESS)
!     {
!         odbcErrMsg.Printf(wxT("SQL State = %s\nNative Error Code = %li\nError Message = %s\n"), sqlState, nativeError, errorMsg);
!         logError(odbcErrMsg, sqlState);
!         if (!silent)
!         {
  #ifdef DBDEBUG_CONSOLE
!             // When run in console mode, use standard out to display errors.
!             cout << odbcErrMsg.c_str() << endl;
!             cout << wxT("Press any key to continue...") << endl;
!             getchar();
  #endif
  
  #ifdef __WXDEBUG__
!             wxLogDebug(odbcErrMsg,wxT("ODBC DEBUG MESSAGE from DispAllErrors()"));
  #endif
!         }
      }
  
      return(FALSE);  // This function always returns FALSE.
--- 1683,1732 ----
  /********** wxDb::DispAllErrors() **********/
  bool wxDb::DispAllErrors(HENV aHenv, HDBC aHdbc, HSTMT aHstmt)
  /*
!  * This function is called internally whenever an error condition prevents
!  * the user's request from being executed.  This function will query the
!  * datasource as to the actual error(s) that just occured on the previous
!  * request of the datasource.
   *
   * The function will retrieve each error condition from the datasource and
!  * Printf the codes/text values into a string which it then logs via
!  * logError().
!  * If in DBDEBUG_CONSOLE mode, the constructed string will be displayed
!  * in the console window and program execution will be paused until the user
!  * presses a key.
!  *
!  * This function always returns a FALSE, so that functions which call this
!  * function can have a line like "return (DispAllErrors(henv, hdbc));" to
!  * indicate the failure of the users request, so that the calling code can
!  * then process the error msg log
   */
  {
      wxString odbcErrMsg;
  
!     while (SQLError(aHenv, aHdbc, aHstmt, (UCHAR FAR *) sqlState,
!                     &nativeError, (UCHAR FAR *) errorMsg,
!                     SQL_MAX_MESSAGE_LENGTH - 1, &cbErrorMsg) == SQL_SUCCESS)
!     {
!        odbcErrMsg.Printf(wxT("SQL State = %s  Native Error Code = %li\n"
!                              "\tError Message = %s\n"),
!                          sqlState, nativeError, errorMsg);
!        logError(odbcErrMsg, sqlState);
!        wxLogError(odbcErrMsg);
! 
!        if (!silent)
!        {
  #ifdef DBDEBUG_CONSOLE
!           // When run in console mode, use standard out to display errors.
!           cout << odbcErrMsg.c_str() << endl;
!           cout << wxT("Press any key to continue...") << endl;
!           getchar();
  #endif
  
  #ifdef __WXDEBUG__
!           wxLogDebug(odbcErrMsg,
!                      wxT("ODBC DEBUG MESSAGE from DispAllErrors()"));
  #endif
!        }
      }
  
      return(FALSE);  // This function always returns FALSE.
***************
*** 3668,3679 ****
  
      pList->PtrDb = new wxDb(pDbConfig->GetHenv(), FwdOnlyCursors);
  
!     bool opened = FALSE;
  
      if (!matchingDbConnection)
!         opened = pList->PtrDb->Open(pDbConfig->GetDsn(), pDbConfig->GetUserID(), pDbConfig->GetPassword());
!     else
!         opened = pList->PtrDb->Open(matchingDbConnection);
  
      // Connect to the datasource
      if (opened)
--- 3895,3916 ----
  
      pList->PtrDb = new wxDb(pDbConfig->GetHenv(), FwdOnlyCursors);
  
!     bool opened = false;
  
      if (!matchingDbConnection)
!     {
!        if(pDbConfig->IsFileDSN()) {
!           opened = pList->PtrDb->Open(pDbConfig->GetConnectString());
!        }
!        else {
!           opened = pList->PtrDb->Open(pDbConfig->GetDsn(),
!                                       pDbConfig->GetUserID(),
!                                       pDbConfig->GetPassword());
!        }
!     }
!     else {
!        opened = pList->PtrDb->Open(matchingDbConnection);
!     }
  
      // Connect to the datasource
      if (opened)






===================================================================
RCS file: /home/cvsd/project/System/Reltech/Software/db.h,v
retrieving revision 1.1
retrieving revision 1.2
diff -c -r1.1 -r1.2
*** System/Reltech/Software/db.h	2004/06/22 09:41:17	1.1
--- System/Reltech/Software/db.h	2004/08/09 15:41:42	1.2
***************
*** 17,23 ****
  //                     databases operate the same in that respect
  //
  // Created:     9.96
! // RCS-ID:      $Id: db.h,v 1.1 2004/06/22 09:41:17 mnewsam Exp $
  // Copyright:   (c) 1996 Remstar International, Inc.
  // Licence:     wxWindows licence, plus:
  // Notice:      This class library and its intellectual design are free of charge for use,
--- 17,23 ----
  //                     databases operate the same in that respect
  //
  // Created:     9.96
! // RCS-ID:      $Id: db.h,v 1.2 2004/08/09 15:41:42 mnewsam Exp $
  // Copyright:   (c) 1996 Remstar International, Inc.
  // Licence:     wxWindows licence, plus:
  // Notice:      This class library and its intellectual design are free of charge for use,
***************
*** 302,313 ****
          // Optionals needed for some databases like dBase
          wxString DefaultDir;                               // Directory that db file resides in
  
      public:
  
          wxDbConnectInf();
!         wxDbConnectInf(HENV henv, const wxString &dsn, const wxString &userID=wxEmptyString, 
!                        const wxString &password=wxEmptyString, const wxString &defaultDir=wxEmptyString, 
!                        const wxString &description=wxEmptyString, const wxString &fileType=wxEmptyString);
  
          ~wxDbConnectInf();
  
--- 302,323 ----
          // Optionals needed for some databases like dBase
          wxString DefaultDir;                               // Directory that db file resides in
  
+         // This DSN is a filedsn
+         wxString m_filedsn;
+         bool m_isfiledsn;
+ 
      public:
  
          wxDbConnectInf();
!         wxDbConnectInf(HENV henv,
!                        const wxString &dsn,
!                        const wxString &userID=wxEmptyString, 
!                        const wxString &password=wxEmptyString,
!                        const wxString &defaultDir=wxEmptyString, 
!                        const wxString &description=wxEmptyString,
!                        const wxString &fileType=wxEmptyString,
!                        const wxString &fileDSN = wxEmptyString,
!                        bool isfiledsn = false);
  
          ~wxDbConnectInf();
  
***************
*** 321,326 ****
--- 331,339 ----
  
          const wxChar    *GetDsn()           { return Dsn; };
  
+    const wxChar *GetFileDSN();
+    const char *GetConnectString();
+ 
          const wxChar    *GetUid()           { return Uid; };
          const wxChar    *GetUserID()        { return Uid; };
  
***************
*** 335,340 ****
--- 348,355 ----
  
          void             SetDsn(const wxString &dsn);
  
+    void SetFileDSN(const char *filedsn);
+ 
          void             SetUserID(const wxString &userID);
          void             SetUid(const wxString &uid)            { SetUserID(uid); };
  
***************
*** 344,349 ****
--- 359,366 ----
          void             SetDescription(const wxString &desc)   { Description   = desc;     };
          void             SetFileType(const wxString &fileType)  { FileType      = fileType; };
          void             SetDefaultDir(const wxString &defDir)  { DefaultDir    = defDir;   };
+ 
+    bool IsFileDSN() { return m_isfiledsn; }
  };  // class wxDbConnectInf
  
  
***************
*** 609,615 ****
      ~wxDb();
  
      // Data Source Name, User ID, Password and whether open should fail on data type not supported
!     bool         Open(const wxString &Dsn, const wxString &Uid, const wxString &AuthStr, bool failOnDataTypeUnsupported=TRUE);
      bool         Open(wxDbConnectInf *dbConnectInf);
      bool         Open(wxDb *copyDb);  // pointer to a wxDb whose connection info should be copied rather than re-queried
      void         Close(void);
--- 626,636 ----
      ~wxDb();
  
      // Data Source Name, User ID, Password and whether open should fail on data type not supported
!     bool         Open(const wxString &Dsn,
!                       const wxString &Uid,
!                       const wxString &AuthStr,
!                       bool failOnDataTypeUnsupported = true);
!    bool Open(const char *filedsn, bool failOnDataTypeUnsupported = true);
      bool         Open(wxDbConnectInf *dbConnectInf);
      bool         Open(wxDb *copyDb);  // pointer to a wxDb whose connection info should be copied rather than re-queried
      void         Close(void);

 	  	 

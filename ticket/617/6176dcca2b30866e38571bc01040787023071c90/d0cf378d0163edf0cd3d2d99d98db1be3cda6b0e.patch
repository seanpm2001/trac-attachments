Index: include/wx/gdicmn.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/gdicmn.h,v
retrieving revision 1.75
diff -u -r1.75 gdicmn.h
--- include/wx/gdicmn.h	2003/10/16 17:42:24	1.75
+++ include/wx/gdicmn.h	2003/10/24 11:29:56
@@ -426,10 +426,11 @@
     // add a new colour to the database
     void AddColour(const wxString& name, const wxColour& colour);
 
-    // deprecated, use Find()/Add() instead
-    wxColour *FindColour(const wxString& name);
-    void AddColour(const wxString& name, wxColour *colour);
-
+#if WXWIN_COMPATIBILITY_2_4
+    // deprecated, use the above Find()/AddColour() instead
+    wxDEPRECATED( wxColour *FindColour(const wxString& name) );
+    wxDEPRECATED( void AddColour(const wxString& name, wxColour *colour) );
+#endif
 
 #ifdef __WXPM__
     // PM keeps its own type of colour table
Index: include/wx/cocoa/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/cocoa/colour.h,v
retrieving revision 1.3
diff -u -r1.3 colour.h
--- include/wx/cocoa/colour.h	2003/07/03 17:59:52	1.3
+++ include/wx/cocoa/colour.h	2003/10/24 11:29:56
@@ -33,7 +33,7 @@
     wxColour( unsigned long colRGB )
     :   m_cocoaNSColor(NULL)
     {   Set(colRGB); }
-  
+
     // implicit conversion from the colour name
     wxColour( const wxString &colourName )
     :   m_cocoaNSColor(NULL)
@@ -62,10 +62,10 @@
     // comparison
     bool operator == (const wxColour& colour) const
     {
-        return (m_cocoaNSColor == colour.m_cocoaNSColor &&
-            m_red == colour.m_red && 
-            m_green == colour.m_green && 
-            m_blue == colour.m_blue);
+        return (m_cocoaNSColor == colour.m_cocoaNSColor
+            && m_red == colour.m_red
+            && m_green == colour.m_green
+            && m_blue == colour.m_blue);
     }
     bool operator != (const wxColour& colour) const
     {   return !(*this == colour); }
@@ -83,7 +83,6 @@
             (unsigned char)(colRGB >> 16));
     }
 
-protected:
     void InitFromName(const wxString& col);
 
 private:
Index: include/wx/gtk/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/gtk/colour.h,v
retrieving revision 1.18
diff -u -r1.18 colour.h
--- include/wx/gtk/colour.h	2003/10/17 17:38:24	1.18
+++ include/wx/gtk/colour.h	2003/10/24 11:29:56
@@ -40,7 +40,7 @@
 {
 public:
     wxColour() { }
-  
+
     // Construct from RGB
     wxColour( unsigned char red, unsigned char green, unsigned char blue );
     wxColour( unsigned long colRGB ) { Set(colRGB); }
@@ -61,7 +61,7 @@
     ~wxColour();
 
     bool Ok() const { return m_refData != NULL; }
-  
+
     bool operator == ( const wxColour& col ) const;
     bool operator != ( const wxColour& col ) const { return !(*this == col); }
 
@@ -88,13 +88,13 @@
     int GetPixel() const;
     GdkColor *GetColor() const;
 
+    void InitFromName(const wxString& colourName);
+
 protected:
     // ref counting code
     virtual wxObjectRefData *CreateRefData() const;
     virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;
-    
-    // Helper functions
-    void InitFromName(const wxString& colourName);
+
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColour)
Index: include/wx/mac/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mac/colour.h,v
retrieving revision 1.16
diff -u -r1.16 colour.h
--- include/wx/mac/colour.h	2003/10/18 23:50:45	1.16
+++ include/wx/mac/colour.h	2003/10/24 11:29:56
@@ -31,7 +31,7 @@
       { Set(red, green, blue); }
   wxColour( unsigned long colRGB )
       { Set(colRGB); }
-  
+
     // implicit conversion from the colour name
   wxColour( const wxString &colourName )
       { InitFromName(colourName); }
@@ -67,24 +67,27 @@
   // comparison
   bool operator == (const wxColour& colour) const
   {
-    return (m_isInit == colour.m_isInit &&
-            m_red == colour.m_red && 
-            m_green == colour.m_green && 
-            m_blue == colour.m_blue);
+    return (m_isInit == colour.m_isInit
+            && m_red == colour.m_red
+            && m_green == colour.m_green
+            && m_blue == colour.m_blue);
   }
   bool operator != (const wxColour& colour) const { return !(*this == colour); }
 
-  void InitFromName(const wxString& col);
-
   const WXCOLORREF& GetPixel() const { return m_pixel; };
 
+    void InitFromName(const wxString& col);
+
+protected :
+
+    // Helper function
+    void Init();
+
 private:
   bool          m_isInit;
   unsigned char m_red;
   unsigned char m_blue;
   unsigned char m_green;
-
-  void Init();
 
 public:
   WXCOLORREF m_pixel ;
Index: include/wx/mgl/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/mgl/colour.h,v
retrieving revision 1.5
diff -u -r1.5 colour.h
--- include/wx/mgl/colour.h	2003/10/18 23:50:48	1.5
+++ include/wx/mgl/colour.h	2003/10/24 11:29:56
@@ -69,15 +69,18 @@
     }
     bool operator != (const wxColour& colour) const { return !(*this == colour); }
 
+    void InitFromName(const wxString& colourName);
+
+protected:
+
+    // Helper function
+    void Init();
+
 private:
     bool m_isInit;
     unsigned char m_red;
     unsigned char m_blue;
     unsigned char m_green;
-
-    // ctors helpers
-    void Init();
-    void InitFromName(const wxString& colourName);
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColour)
Index: include/wx/motif/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/motif/colour.h,v
retrieving revision 1.14
diff -u -r1.14 colour.h
--- include/wx/motif/colour.h	2003/10/23 21:49:44	1.14
+++ include/wx/motif/colour.h	2003/10/24 11:29:56
@@ -31,18 +31,18 @@
     wxColour( unsigned char red, unsigned char green, unsigned char blue )
         { Set(red, green, blue); }
     wxColour( unsigned long colRGB ) { Set(colRGB); }
-    
+
     // implicit conversion from the colour name
     wxColour( const wxString &colourName ) { InitFromName(colourName); }
     wxColour( const char *colourName ) { InitFromName(colourName); }
-    
+
     // copy ctors and assignment operators
     wxColour( const wxColour& col );
     wxColour& operator = ( const wxColour& col );
-    
+
     // dtor
     ~wxColour();
-    
+
     // Set() functions
     void Set( unsigned char red, unsigned char green, unsigned char blue );
     void Set( unsigned long colRGB )
@@ -53,41 +53,45 @@
             (unsigned char)(colRGB >> 8),
             (unsigned char)(colRGB >> 16));
     }
-    
+
     // accessors
     bool Ok() const {return m_isInit; }
     unsigned char Red() const { return m_red; }
     unsigned char Green() const { return m_green; }
     unsigned char Blue() const { return m_blue; }
-    
+
     int GetPixel() const { return m_pixel; };
-    void SetPixel(int pixel) { m_pixel = pixel; m_isInit = TRUE; };
-    
+    void SetPixel(int pixel) { m_pixel = pixel; m_isInit = true; };
+
     inline bool operator == (const wxColour& colour) const { return (m_red == colour.m_red && m_green == colour.m_green && m_blue == colour.m_blue); }
-    
+
     inline bool operator != (const wxColour& colour) const { return (!(m_red == colour.m_red && m_green == colour.m_green && m_blue == colour.m_blue)); }
 
     // Get colour from name or wxNullColour
     static wxColour CreateByName(const wxString& name);
 
     // Allocate a colour, or nearest colour, using the given display.
-    // If realloc is TRUE, ignore the existing pixel, otherwise just return
+    // If realloc is true, ignore the existing pixel, otherwise just return
     // the existing one.
     // Returns the allocated pixel.
-    
+
     // TODO: can this handle mono displays? If not, we should have an extra
     // flag to specify whether this should be black or white by default.
-    
-    int AllocColour(WXDisplay* display, bool realloc = FALSE);
-    
+
+    int AllocColour(WXDisplay* display, bool realloc = false);
+
     void InitFromName(const wxString& col);
-    
+
+protected:
+    // Helper function
+    void Init();
+
 private:
     bool          m_isInit;
     unsigned char m_red;
     unsigned char m_blue;
     unsigned char m_green;
-    
+
 public:
     int           m_pixel;
 };
Index: include/wx/msw/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/colour.h,v
retrieving revision 1.19
diff -u -r1.19 colour.h
--- include/wx/msw/colour.h	2003/10/18 23:20:09	1.19
+++ include/wx/msw/colour.h	2003/10/24 11:29:56
@@ -54,9 +54,9 @@
     // other methods
     // -------------
 
-    // to have the matching Create also for this class 
+    // to have the matching Create also for this class
     void Create( unsigned char red, unsigned char green, unsigned char blue )
-    {	Set(red, green, blue); }
+    { Set(red, green, blue); }
 
     // Set() functions
     void Set(unsigned char red, unsigned char green, unsigned char blue);
@@ -65,14 +65,14 @@
         // we don't need to know sizeof(long) here because we assume that the three
         // least significant bytes contain the R, G and B values
         Set((unsigned char)colRGB,
-                (unsigned char)(colRGB >> 8),
-                (unsigned char)(colRGB >> 16));
+            (unsigned char)(colRGB >> 8),
+            (unsigned char)(colRGB >> 16));
     }
 
     // accessors
     // ---------
 
-    bool Ok() const {return m_isInit; }
+    bool Ok() const { return m_isInit; }
 
     unsigned char Red() const { return m_red; }
     unsigned char Green() const { return m_green; }
@@ -81,28 +81,30 @@
     // comparison
     bool operator==(const wxColour& colour) const
     {
-        return m_isInit == colour.m_isInit &&
-            m_red == colour.m_red &&
-            m_green == colour.m_green &&
-            m_blue == colour.m_blue;
+        return m_isInit == colour.m_isInit
+            && m_red == colour.m_red
+            && m_green == colour.m_green
+            && m_blue == colour.m_blue;
     }
 
     bool operator != (const wxColour& colour) const { return !(*this == colour); }
 
     WXCOLORREF GetPixel() const { return m_pixel; };
 
+    void InitFromName(const wxString& colourName);
+
 public:
     WXCOLORREF m_pixel;
 
+protected:
+    // Helper function
+    void Init();
+
 private:
     bool          m_isInit;
     unsigned char m_red;
     unsigned char m_blue;
     unsigned char m_green;
-
-    // ctors helpers
-    void Init();
-    void InitFromName(const wxString& colourName);
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColour)
Index: include/wx/os2/COLOUR.H
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/os2/COLOUR.H,v
retrieving revision 1.8
diff -u -r1.8 COLOUR.H
--- include/wx/os2/COLOUR.H	2003/08/17 12:50:28	1.8
+++ include/wx/os2/COLOUR.H	2003/10/24 11:29:56
@@ -41,7 +41,7 @@
     // Implicit conversion from the colour name
     //
     wxColour(const wxString& rColourName) { InitFromName(rColourName); }
-    wxColour(const char* zColourName) { InitFromName(zColourName); }
+    wxColour(const wxChar *zColourName) { InitFromName(zColourName); }
 
     //
     // Copy ctors and assignment operators
@@ -92,17 +92,24 @@
     //
     bool operator == (const wxColour& rColour) const
     {
-        return (m_cRed   == rColour.m_cRed &&
-                m_cGreen == rColour.m_cGreen &&
-                m_cBlue  == rColour.m_cBlue
+        return (m_isInit == rColour.m_isInit
+                && m_cRed   == rColour.m_cRed
+                && m_cGreen == rColour.m_cGreen
+                && m_cBlue  == rColour.m_cBlue
                );
     }
+
     bool operator != (const wxColour& rColour) const { return !(*this == rColour); }
 
-    void       InitFromName(const wxString& rCol);
     WXCOLORREF GetPixel(void) const { return m_vPixel; };
 
+    void InitFromName(const wxString& rCol);
+
 private:
+
+    // Helper function
+    void Init();
+
     bool                            m_bIsInit;
     unsigned char                   m_cRed;
     unsigned char                   m_cBlue;
Index: include/wx/x11/colour.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/x11/colour.h,v
retrieving revision 1.7
diff -u -r1.7 colour.h
--- include/wx/x11/colour.h	2003/10/18 23:50:50	1.7
+++ include/wx/x11/colour.h	2003/10/24 11:29:56
@@ -37,11 +37,11 @@
 // wxColour
 //-----------------------------------------------------------------------------
 
-class wxColour: public wxGDIObject
+class WXDLLEXPORT wxColour: public wxGDIObject
 {
 public:
     wxColour() { }
-  
+
     // Construct from RGB
     wxColour( unsigned char red, unsigned char green, unsigned char blue );
     wxColour( unsigned long colRGB ) { Set(colRGB); }
@@ -62,7 +62,7 @@
     ~wxColour();
 
     bool Ok() const { return m_refData != NULL; }
-  
+
     bool operator == ( const wxColour& col ) const;
     bool operator != ( const wxColour& col ) const { return !(*this == col); }
 
@@ -81,18 +81,18 @@
     unsigned char Blue() const;
 
     // Implementation part
-    
+
     void CalcPixel( WXColormap cmap );
     unsigned long GetPixel() const;
     WXColor *GetColor() const;
 
+    void InitFromName(const wxString& colourName);
+
 protected:
     // ref counting code
     virtual wxObjectRefData *CreateRefData() const;
     virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;
-    
-    // Helper functions
-    void InitFromName(const wxString& colourName);
+
 
 private:
     DECLARE_DYNAMIC_CLASS(wxColour)
Index: src/common/gdicmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/gdicmn.cpp,v
retrieving revision 1.98
diff -u -r1.98 gdicmn.cpp
--- src/common/gdicmn.cpp	2003/10/22 07:49:45	1.98
+++ src/common/gdicmn.cpp	2003/10/24 11:32:40
@@ -331,7 +331,7 @@
         {wxT("WHEAT"), 216, 216, 191},
         {wxT("WHITE"), 255, 255, 255},
         {wxT("YELLOW"), 255, 255, 0},
-        {wxT("YELLOW GREEN"), 153, 204, 50},
+        {wxT("YELLOW GREEN"), 153, 204, 50}
     };
 
     size_t n;
Index: src/gtk/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/gtk/colour.cpp,v
retrieving revision 1.43
diff -u -r1.43 colour.cpp
--- src/gtk/colour.cpp	2003/10/17 17:39:28	1.43
+++ src/gtk/colour.cpp	2003/10/24 11:32:40
@@ -37,7 +37,7 @@
         m_color.blue = 0;
         m_color.pixel = 0;
         m_colormap = (GdkColormap *) NULL;
-        m_hasPixel = FALSE;
+        m_hasPixel = false;
     }
 
     wxColourRefData(const wxColourRefData& data)
@@ -207,10 +207,10 @@
 bool wxColour::operator == ( const wxColour& col ) const
 {
     if (m_refData == col.m_refData)
-        return TRUE;
+        return true;
 
     if (!m_refData || !col.m_refData)
-        return FALSE;
+        return false;
 
     GdkColor *own = &(((wxColourRefData*)m_refData)->m_color);
     GdkColor *other = &(((wxColourRefData*)col.m_refData)->m_color);
@@ -239,7 +239,7 @@
     M_COLDATA->m_color.pixel = 0;
 
     M_COLDATA->m_colormap = (GdkColormap*) NULL;
-    M_COLDATA->m_hasPixel = FALSE;
+    M_COLDATA->m_hasPixel = false;
 }
 
 unsigned char wxColour::Red() const
Index: src/mac/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mac/colour.cpp,v
retrieving revision 1.9
diff -u -r1.9 colour.cpp
--- src/mac/colour.cpp	2003/10/18 23:50:55	1.9
+++ src/mac/colour.cpp	2003/10/24 11:32:40
@@ -25,7 +25,7 @@
 #include "wx/mac/private.h"
 
 static void wxComposeRGBColor( WXCOLORREF* color , int red, int blue, int green ) ;
-static void wxComposeRGBColor( WXCOLORREF* color , int red, int blue, int green ) 
+static void wxComposeRGBColor( WXCOLORREF* color , int red, int blue, int green )
 {
     RGBColor* col = (RGBColor*) color ;
     col->red = (red << 8) + red;
@@ -35,11 +35,11 @@
 
 void wxColour::Init()
 {
-    m_isInit = FALSE;
+    m_isInit = false;
     m_red =
     m_blue =
     m_green = 0;
-    
+
     wxComposeRGBColor( &m_pixel , m_red , m_blue , m_green ) ;
 }
 
@@ -70,23 +70,26 @@
     m_green = col.m_green;
     m_blue = col.m_blue;
     m_isInit = col.m_isInit;
-    
+
     memcpy( &m_pixel , &col.m_pixel , 6 ) ;
-    
+
     return *this;
 }
 
 void wxColour::InitFromName(const wxString& name)
 {
-    wxColour col = wxTheColourDatabase->Find(name);
-    if ( col.Ok() )
+    if ( wxTheColourDatabase )
     {
-        *this = col;
+        wxColour col = wxTheColourDatabase->Find(name);
+        if ( col.Ok() )
+        {
+            *this = col;
+            return;
+        }
     }
-    else
-    {
-        Init();
-    }
+
+    // leave invalid
+    Init();
 }
 
 wxColour::~wxColour ()
@@ -98,13 +101,13 @@
     m_red = r;
     m_green = g;
     m_blue = b;
-    m_isInit = TRUE;
+    m_isInit = true;
 
     wxComposeRGBColor( &m_pixel , m_red , m_blue , m_green ) ;
 }
 
 void wxColour::Set( const WXCOLORREF* color )
-{ 
+{
     RGBColor* col = (RGBColor*) color ;
     memcpy( &m_pixel , color , 6 ) ;
     m_red = col->red>>8 ;
Index: src/mgl/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/mgl/colour.cpp,v
retrieving revision 1.7
diff -u -r1.7 colour.cpp
--- src/mgl/colour.cpp	2003/10/18 23:50:57	1.7
+++ src/mgl/colour.cpp	2003/10/24 11:32:40
@@ -32,7 +32,7 @@
     m_red =
     m_blue =
     m_green = 0;
-    m_isInit = FALSE;
+    m_isInit = false;
 }
 
 wxColour::wxColour(const wxColour& col)
@@ -51,15 +51,18 @@
 
 void wxColour::InitFromName(const wxString& name)
 {
-    wxColour *col = wxTheColourDatabase->Find(name);
-    if ( col.Ok() )
+    if ( wxTheColourDatabase )
     {
-        *this = col;
+        wxColour col = wxTheColourDatabase->Find(name);
+        if ( col.Ok() )
+        {
+            *this = col;
+            return;
+        }
     }
-    else
-    {
-        Init();
-    }
+
+    // leave invalid
+    Init();
 }
 
 wxColour::~wxColour()
@@ -71,5 +74,5 @@
     m_red = r;
     m_green = g;
     m_blue = b;
-    m_isInit = TRUE;
+    m_isInit = true;
 }
Index: src/motif/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/motif/colour.cpp,v
retrieving revision 1.11
diff -u -r1.11 colour.cpp
--- src/motif/colour.cpp	2003/10/23 21:49:39	1.11
+++ src/motif/colour.cpp	2003/10/24 11:32:40
@@ -34,17 +34,22 @@
 
 // Colour
 
-wxColour::wxColour ()
+void wxColour::Init()
 {
-    m_isInit = FALSE;
+    m_isInit = false;
     m_red =
     m_blue =
     m_green = 0;
     m_pixel = -1;
 }
 
-wxColour::wxColour (const wxColour& col)
+wxColour::wxColour()
 {
+    Init();
+}
+
+wxColour::wxColour(const wxColour& col)
+{
     *this = col;
 }
 
@@ -60,7 +65,18 @@
 
 void wxColour::InitFromName(const wxString& name)
 {
-    *this = wxTheColourDatabase->Find(name);
+    if ( wxTheColourDatabase )
+    {
+        wxColour col = wxTheColourDatabase->Find(name);
+        if ( col.Ok() )
+        {
+            *this = col;
+            return;
+        }
+    }
+
+    // leave invalid
+    Init();
 }
 
 /* static */
@@ -83,21 +99,21 @@
     return col;
 }
 
-wxColour::~wxColour ()
+wxColour::~wxColour()
 {
 }
 
-void wxColour::Set (unsigned char r, unsigned char g, unsigned char b)
+void wxColour::Set(unsigned char r, unsigned char g, unsigned char b)
 {
     m_red = r;
     m_green = g;
     m_blue = b;
-    m_isInit = TRUE;
+    m_isInit = true;
     m_pixel = -1;
 }
 
 // Allocate a colour, or nearest colour, using the given display.
-// If realloc is TRUE, ignore the existing pixel, otherwise just return
+// If realloc is true, ignore the existing pixel, otherwise just return
 // the existing one.
 // Returns the old or allocated pixel.
 
@@ -108,7 +124,7 @@
 {
     if ((m_pixel != -1) && !realloc)
         return m_pixel;
-    
+
     XColor color;
     color.red = (unsigned short) Red ();
     color.red |= color.red << 8;
@@ -116,11 +132,11 @@
     color.green |= color.green << 8;
     color.blue = (unsigned short) Blue ();
     color.blue |= color.blue << 8;
-    
+
     color.flags = DoRed | DoGreen | DoBlue;
-    
+
     WXColormap cmap = wxTheApp->GetMainColormap(display);
-    
+
     if (!XAllocColor ((Display*) display, (Colormap) cmap, &color))
     {
         m_pixel = wxGetBestMatchingPixel((Display*) display, &color,(Colormap) cmap);
@@ -167,7 +183,7 @@
 {
     if (cmap == (Colormap) NULL)
         cmap = (Colormap) wxTheApp->GetMainColormap(display);
-    
+
     int numPixVals = XDisplayCells(display, DefaultScreen (display));
     int mindist = 256 * 256 * 3;
     int bestpixel = (int) BlackPixel (display, DefaultScreen (display));
@@ -175,21 +191,21 @@
     int green = desiredColor->green >> 8;
     int blue = desiredColor->blue >> 8;
     const int threshold = 2 * 2 * 3;    // allow an error of up to 2 in R,G & B
-    
+
     for (int pixelcount = 0; pixelcount < numPixVals; pixelcount++)
     {
         XColor matching_color;
         matching_color.pixel = pixelcount;
         XQueryColor(display,cmap,&matching_color);
-        
+
         int delta_red = red - (matching_color.red >> 8);
         int delta_green = green - (matching_color.green >> 8);
         int delta_blue = blue - (matching_color.blue >> 8);
-        
+
         int dist = delta_red * delta_red +
             delta_green * delta_green +
             delta_blue * delta_blue;
-        
+
         if (dist <= threshold)
         {
             // try to allocate a read-only colour...
Index: src/msw/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/colour.cpp,v
retrieving revision 1.15
diff -u -r1.15 colour.cpp
--- src/msw/colour.cpp	2003/10/18 23:20:13	1.15
+++ src/msw/colour.cpp	2003/10/24 11:32:40
@@ -6,7 +6,7 @@
 // Created:     01/02/97
 // RCS-ID:      $Id: colour.cpp,v 1.15 2003/10/18 23:20:13 VZ Exp $
 // Copyright:   (c) Julian Smart
-// Licence:   	wxWindows licence
+// Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
 #if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
@@ -29,38 +29,39 @@
 
 template<> void wxStringReadValue(const wxString &s , wxColour &data )
 {
-	// copied from VS xrc
-	unsigned long tmp = 0;
+    // copied from VS xrc
+    unsigned long tmp = 0;
 
-    if (s.Length() != 7 || s[0u] != wxT('#') ||
-        wxSscanf(s.c_str(), wxT("#%lX"), &tmp) != 1)
+    if (s.Length() != 7 || s[0u] != wxT('#')
+        || wxSscanf(s.c_str(), wxT("#%lX"), &tmp) != 1)
     {
-		wxLogError(_("String To Colour : Incorrect colour specification : %s"),
-                   s.c_str() );
+        wxLogError(_("String To Colour : Incorrect colour specification : %s"),
+            s.c_str() );
         data = wxNullColour;
     }
-	else
-	{
-		data = wxColour((unsigned char) ((tmp & 0xFF0000) >> 16) ,
-                    (unsigned char) ((tmp & 0x00FF00) >> 8),
-                    (unsigned char) ((tmp & 0x0000FF)));
-	}
+    else
+    {
+        data = wxColour((unsigned char) ((tmp & 0xFF0000) >> 16) ,
+            (unsigned char) ((tmp & 0x00FF00) >> 8),
+            (unsigned char) ((tmp & 0x0000FF)));
+    }
 }
 
 template<> void wxStringWriteValue(wxString &s , const wxColour &data )
 {
-	s = wxString::Format(wxT("#%02X%02X%02X"), data.Red() , data.Green() , data.Blue() ) ;
+    s = wxString::Format(wxT("#%02X%02X%02X"),
+        data.Red(), data.Green(), data.Blue() );
 }
 
-IMPLEMENT_DYNAMIC_CLASS_WITH_COPY_AND_STREAMERS_XTI( wxColour , wxObject , "wx/colour.h" ,  &wxToStringConverter<wxColour> , &wxFromStringConverter<wxColour>) 
+IMPLEMENT_DYNAMIC_CLASS_WITH_COPY_AND_STREAMERS_XTI( wxColour , wxObject , "wx/colour.h" ,  &wxToStringConverter<wxColour> , &wxFromStringConverter<wxColour>)
 
 wxBEGIN_PROPERTIES_TABLE(wxColour)
-	wxREADONLY_PROPERTY( Red, unsigned char , Red ,  , 0 /*flags*/ , wxT("Helpstring") , wxT("group"))
-	wxREADONLY_PROPERTY( Green, unsigned char  , Green ,  , 0 /*flags*/ , wxT("Helpstring") , wxT("group")) 
-	wxREADONLY_PROPERTY( Blue, unsigned char , Blue ,  , 0 /*flags*/ , wxT("Helpstring") , wxT("group"))
+    wxREADONLY_PROPERTY( Red, unsigned char, Red,  , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
+    wxREADONLY_PROPERTY( Green, unsigned char, Green,  , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
+    wxREADONLY_PROPERTY( Blue, unsigned char, Blue,  , 0 /*flags*/, wxT("Helpstring"), wxT("group"))
 wxEND_PROPERTIES_TABLE()
 
-wxCONSTRUCTOR_3( wxColour , unsigned char , Red , unsigned char , Green , unsigned char , Blue )  
+wxCONSTRUCTOR_3( wxColour, unsigned char, Red, unsigned char, Green, unsigned char, Blue )
 
 wxBEGIN_HANDLERS_TABLE(wxColour)
 wxEND_HANDLERS_TABLE()
@@ -72,14 +73,14 @@
 
 void wxColour::Init()
 {
-    m_isInit = FALSE;
+    m_isInit = false;
     m_pixel = 0;
     m_red =
     m_blue =
     m_green = 0;
 }
 
-wxColour::wxColour (const wxColour& col)
+wxColour::wxColour(const wxColour& col)
 {
     *this = col;
 }
@@ -114,12 +115,12 @@
 {
 }
 
-void wxColour::Set (unsigned char r, unsigned char g, unsigned char b)
+void wxColour::Set(unsigned char r, unsigned char g, unsigned char b)
 {
     m_red = r;
     m_green = g;
     m_blue = b;
-    m_isInit = TRUE;
-    m_pixel = PALETTERGB (m_red, m_green, m_blue);
+    m_isInit = true;
+    m_pixel = PALETTERGB(m_red, m_green, m_blue);
 }
 
Index: src/os2/COLOUR.CPP
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/os2/COLOUR.CPP,v
retrieving revision 1.8
diff -u -r1.8 COLOUR.CPP
--- src/os2/COLOUR.CPP	2003/08/31 20:52:26	1.8
+++ src/os2/COLOUR.CPP	2003/10/24 11:32:40
@@ -25,11 +25,16 @@
 
 // Colour
 
-wxColour::wxColour ()
+void wxColour::Init()
 {
-    m_bIsInit = FALSE;
+    m_bIsInit = false;
     m_vPixel = 0;
     m_cRed = m_cBlue = m_cGreen = 0;
+} // end of wxColour::Init
+
+wxColour::wxColour ()
+{
+    Init();
 } // end of wxColour::wxColour
 
 wxColour::wxColour (
@@ -38,22 +43,14 @@
 , unsigned char                     cBlue
 )
 {
-    m_cRed    = cRed;
-    m_cGreen  = cGreen;
-    m_cBlue   = cBlue;
-    m_bIsInit = TRUE;
-    m_vPixel  = OS2RGB (m_cRed, m_cGreen, m_cBlue);
+    Set(cRed, cGreen, cBlue);
 } // end of wxColour::wxColour
 
-wxColour::wxColour (
+wxColour::wxColour(
   const wxColour&                   rCol
 )
 {
-    m_cRed    = rCol.m_cRed;
-    m_cGreen  = rCol.m_cGreen;
-    m_cBlue   = rCol.m_cBlue;
-    m_bIsInit = rCol.m_bIsInit;
-    m_vPixel  = rCol.m_vPixel;
+    *this = col;
 } // end of wxColour::wxColour
 
 wxColour& wxColour::operator =(
@@ -72,30 +69,26 @@
   const wxString&                   sCol
 )
 {
-    wxColour*                       pTheColour = wxTheColourDatabase->FindColour(sCol);
-
-    if (pTheColour)
+    if ( wxTheColourDatabase )
     {
-        m_cRed    = pTheColour->Red();
-        m_cGreen  = pTheColour->Green();
-        m_cBlue   = pTheColour->Blue();
-        m_bIsInit = TRUE;
+        wxColour col = wxTheColourDatabase->Find(sCol);
+        if ( col.Ok() )
+        {
+            *this = col;
+            return;
+        }
     }
-    else
-    {
-        m_cRed = 0;
-        m_cGreen = 0;
-        m_cBlue = 0;
-        m_bIsInit = FALSE;
-    }
-    m_vPixel = OS2RGB (m_cRed, m_cGreen, m_cBlue);
+
+    // leave invalid
+    Init();
+
 } // end of wxColour::InitFromName
 
-wxColour::~wxColour ()
+wxColour::~wxColour()
 {
 } // end of wxColour::~wxColour
 
-void wxColour::Set (
+void wxColour::Set(
   unsigned char                     cRed
 , unsigned char                     cGreen
 , unsigned char                     cBlue
@@ -104,6 +97,6 @@
     m_cRed    = cRed;
     m_cGreen  = cGreen;
     m_cBlue   = cBlue;
-    m_bIsInit = TRUE;
+    m_bIsInit = true;
     m_vPixel  = OS2RGB (m_cRed, m_cGreen, m_cBlue);
 } // end of wxColour::Set
Index: src/os2/DC.CPP
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/os2/DC.CPP,v
retrieving revision 1.59
diff -u -r1.59 DC.CPP
--- src/os2/DC.CPP	2003/10/02 18:08:25	1.59
+++ src/os2/DC.CPP	2003/10/24 11:32:40
@@ -316,19 +316,19 @@
 
 void wxDC::ClearCache()
 {
-    m_svBitmapCache.DeleteContents(TRUE);
+    m_svBitmapCache.DeleteContents(true);
     m_svBitmapCache.Clear();
-    m_svBitmapCache.DeleteContents(FALSE);
-    m_svDCCache.DeleteContents(TRUE);
+    m_svBitmapCache.DeleteContents(false);
+    m_svDCCache.DeleteContents(true);
     m_svDCCache.Clear();
-    m_svDCCache.DeleteContents(FALSE);
+    m_svDCCache.DeleteContents(false);
 } // end of wxDC::ClearCache
 
 // Clean up cache at app exit
 class wxDCModule : public wxModule
 {
 public:
-    virtual bool OnInit() { return TRUE; }
+    virtual bool OnInit() { return true; }
     virtual void OnExit() { wxDC::ClearCache(); }
 
 private:
@@ -345,8 +345,6 @@
 
 wxDC::wxDC(void)
 {
-    wxColour                        vColor;
-
     m_pCanvas      = NULL;
 
     m_hOldBitmap   = 0;
@@ -355,16 +353,18 @@
     m_hOldFont     = 0;
     m_hOldPalette  = 0;
 
-    m_bOwnsDC      = FALSE;
+    m_bOwnsDC      = false;
     m_hDC          = 0;
     m_hOldPS       = NULL;
     m_hPS          = NULL;
-    m_bIsPaintTime = FALSE; // True at Paint Time
+    m_bIsPaintTime = false; // True at Paint Time
 
-    vColor.InitFromName("BLACK");
+    wxColour vColor( wxT("BLACK") );
     m_pen.SetColour(vColor);
-    vColor.Set("WHITE");
+
+    vColor.Set( wxT("WHITE") );
     m_brush.SetColour(vColor);
+
 } // end of wxDC::wxDC
 
 wxDC::~wxDC(void)
@@ -459,7 +459,7 @@
     RECTL                           vRect;
 
     vY = OS2Y(vY,vHeight);
-    m_clipping    = TRUE;
+    m_clipping    = true;
     vRect.xLeft   = vX;
     vRect.yTop    = vY + vHeight;
     vRect.xRight  = vX + vWidth;
@@ -475,7 +475,7 @@
      wxCHECK_RET(rRegion.GetHRGN(), wxT("invalid clipping region"));
      HRGN                           hRgnOld;
 
-     m_clipping = TRUE;
+     m_clipping = true;
      ::GpiSetClipRegion( m_hPS
                         ,(HRGN)rRegion.GetHRGN()
                         ,&hRgnOld
@@ -503,7 +503,7 @@
 
          ::GpiSetClipRegion(m_hPS, hRgn, &hRgnOld);
      }
-      m_clipping = FALSE;
+      m_clipping = false;
 } // end of wxDC::DestroyClippingRegion
 
 // ---------------------------------------------------------------------------
@@ -512,7 +512,7 @@
 
 bool wxDC::CanDrawBitmap() const
 {
-    return TRUE;
+    return true;
 }
 
 bool wxDC::CanGetTextExtent() const
@@ -571,7 +571,7 @@
     LONG                            lColor;
     LONG                            lOptions;
     LONG                            lHits;
-    bool                            bSuccess = FALSE;
+    bool                            bSuccess = false;
 
     vPtlPos.x = vX;             // Loads x-coordinate
     vPtlPos.y = OS2Y(vY,0);     // Loads y-coordinate
@@ -582,8 +582,9 @@
         lOptions = FF_SURFACE;
 
     if ((lHits = ::GpiFloodFill(m_hPS, lOptions, lColor)) != GPI_ERROR)
-        bSuccess = TRUE;
-    return TRUE;
+        bSuccess = true;
+
+    return true;
 } // end of wxDC::DoFloodFill
 
 bool wxDC::DoGetPixel(
@@ -1290,13 +1291,13 @@
     //
     if (rIcon.IsXpm())
     {
-        DoDrawBitmap(rIcon.GetXpmSrc(), vX, vY, TRUE);
+        DoDrawBitmap(rIcon.GetXpmSrc(), vX, vY, true);
     }
     else
     {
         wxBitmap                        vBitmap(rIcon);
 
-        DoDrawBitmap(vBitmap, vX, vY, FALSE);
+        DoDrawBitmap(vBitmap, vX, vY, false);
     }
     CalcBoundingBox(vX, vY);
     CalcBoundingBox(vX + rIcon.GetWidth(), vY + rIcon.GetHeight());
@@ -2074,7 +2075,7 @@
         return;
     if (m_pCanvas)
     {
-        bool                        bCustomColours = TRUE;
+        bool                        bCustomColours = true;
 
         //
         // If we haven't specified wxUSER_COLOURS, don't allow the panel/dialog box to
@@ -2082,12 +2083,12 @@
         //
         if (m_pCanvas->IsKindOf(CLASSINFO(wxWindow)) &&
             ((m_pCanvas->GetWindowStyleFlag() & wxUSER_COLOURS) != wxUSER_COLOURS))
-            bCustomColours = FALSE;
+            bCustomColours = false;
         if (bCustomColours)
         {
             if (m_backgroundBrush.GetStyle()==wxTRANSPARENT)
             {
-                m_pCanvas->SetTransparent(TRUE);
+                m_pCanvas->SetTransparent(true);
             }
             else
             {
@@ -2101,7 +2102,7 @@
                 // parent?
                 // m_canvas->SetBackgroundColour(m_backgroundBrush.GetColour());
                 //
-                m_pCanvas->SetTransparent(FALSE);
+                m_pCanvas->SetTransparent(false);
             }
         }
     }
@@ -2192,8 +2193,8 @@
   const wxString&                   rsMessage
 )
 {
-    // We might be previewing, so return TRUE to let it continue.
-    return TRUE;
+    // We might be previewing, so return true to let it continue.
+    return true;
 } // end of wxDC::StartDoc
 
 void wxDC::EndDoc()
@@ -2471,7 +2472,7 @@
 
 wxCoord wxDCBase::DeviceToLogicalXRel(wxCoord x) const
 {
-	// axis orientation is not taken into account for conversion of a distance
+    // axis orientation is not taken into account for conversion of a distance
     return (wxCoord) ((x)/(m_logicalScaleX*m_userScaleX*m_scaleX));
 }
 
@@ -2482,7 +2483,7 @@
 
 wxCoord wxDCBase::DeviceToLogicalYRel(wxCoord y) const
 {
-	// axis orientation is not taken into account for conversion of a distance
+    // axis orientation is not taken into account for conversion of a distance
     return (wxCoord) ((y)/(m_logicalScaleY*m_userScaleY*m_scaleY));
 }
 
@@ -2493,7 +2494,7 @@
 
 wxCoord wxDCBase::LogicalToDeviceXRel(wxCoord x) const
 {
-	// axis orientation is not taken into account for conversion of a distance
+    // axis orientation is not taken into account for conversion of a distance
     return (wxCoord) (x*m_logicalScaleX*m_userScaleX*m_scaleX);
 }
 
@@ -2504,7 +2505,7 @@
 
 wxCoord wxDCBase::LogicalToDeviceYRel(wxCoord y) const
 {
-	// axis orientation is not taken into account for conversion of a distance
+    // axis orientation is not taken into account for conversion of a distance
     return (wxCoord) (y*m_logicalScaleY*m_userScaleY*m_scaleY);
 }
 
@@ -2538,7 +2539,7 @@
         pMask = rBmp.GetMask();
         if (!(rBmp.Ok() && pMask && pMask->GetMaskBitmap()))
         {
-            bUseMask = FALSE;
+            bUseMask = false;
         }
     }
 
@@ -2586,7 +2587,7 @@
         case wxNOR:          lRop = ROP_NOTSRCCOPY;       break;
         default:
            wxFAIL_MSG( wxT("unsupported logical function") );
-           return FALSE;
+           return false;
     }
 
     bool                            bSuccess;
@@ -2618,7 +2619,7 @@
         vBmpHdr.cBitCount = 24;
 
 #if wxUSE_DC_CACHEING
-        if (TRUE)
+        if (true)
         {
             //
             // create a temp buffer bitmap and DCs to access it and the mask
@@ -2649,24 +2650,24 @@
         }
 
         POINTL                          aPoint1[4] = { {0, 0}
-						      ,{vWidth, vHeight}
-						      ,{vXdest, vYdest}
-						      ,{vXdest + vWidth, vYdest + vHeight}
+                              ,{vWidth, vHeight}
+                              ,{vXdest, vYdest}
+                              ,{vXdest + vWidth, vYdest + vHeight}
                                                      };
         POINTL                          aPoint2[4] = { {0, 0}
-						      ,{vWidth, vHeight}
-						      ,{vXsrc, vYsrc}
-						      ,{vXsrc + vWidth, vYsrc + vHeight}
+                              ,{vWidth, vHeight}
+                              ,{vXsrc, vYsrc}
+                              ,{vXsrc + vWidth, vYsrc + vHeight}
                                                      };
         POINTL                          aPoint3[4] = { {vXdest, vYdest}
-						      ,{vXdest + vWidth, vYdest + vHeight}
-						      ,{vXsrc, vYsrc}
-						      ,{vXsrc + vWidth, vYsrc + vHeight}
+                              ,{vXdest + vWidth, vYdest + vHeight}
+                              ,{vXsrc, vYsrc}
+                              ,{vXsrc + vWidth, vYsrc + vHeight}
                                                      };
         POINTL                          aPoint4[4] = { {vXdest, vYdest}
-						      ,{vXdest + vWidth, vYdest + vHeight}
-						      ,{0, 0}
-						      ,{vWidth, vHeight}
+                              ,{vXdest + vWidth, vYdest + vHeight}
+                              ,{0, 0}
+                              ,{vWidth, vHeight}
                                                      };
         ::GpiSetBitmap(hPSMask, (HBITMAP) pMask->GetMaskBitmap());
         ::GpiSetBitmap(hPSBuffer, (HBITMAP) hBufBitmap);
@@ -2757,7 +2758,7 @@
                         );
         if (rc == GPI_ERROR)
         {
-            bSuccess = FALSE;
+            bSuccess = false;
             wxLogLastError(wxT("BitBlt"));
         }
 
@@ -2773,14 +2774,14 @@
         ::DevCloseDC(hDCBuffer);
         ::GpiDeleteBitmap(hBufBitmap);
 #endif
-        bSuccess = TRUE;
+        bSuccess = true;
     }
     else // no mask, just BitBlt() it
     {
       POINTL                          aPoint[4] = { {vXdest, vYdest}
-						   ,{vXdest + vWidth, vYdest + vHeight}
-						   ,{vXsrc, vYsrc}
-						   ,{vXsrc + vWidth, vYsrc + vHeight}
+                           ,{vXdest + vWidth, vYdest + vHeight}
+                           ,{vXsrc, vYsrc}
+                           ,{vXsrc + vWidth, vYsrc + vHeight}
                                                     };
 
         bSuccess = (::GpiBitBlt( m_hPS
Index: src/os2/DCCLIENT.CPP
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/os2/DCCLIENT.CPP,v
retrieving revision 1.31
diff -u -r1.31 DCCLIENT.CPP
--- src/os2/DCCLIENT.CPP	2003/08/20 17:02:08	1.31
+++ src/os2/DCCLIENT.CPP	2003/10/24 11:32:40
@@ -142,7 +142,6 @@
 
 void wxWindowDC::InitDC()
 {
-    wxColour                        vColor;
 
     //
     // The background mode is only used for text background and is set in
@@ -155,9 +154,10 @@
     //
     SetBackground(wxBrush(m_pCanvas->GetBackgroundColour(), wxSOLID));
 
-    vColor.InitFromName("BLACK");
+    wxColour vColor( wxT("BLACK") );
     m_pen.SetColour(vColor);
-    vColor.Set("WHITE");
+
+    vColor.Set( wxT("WHITE") );
     m_brush.SetColour(vColor);
     InitializePalette();
     wxFont*                         pFont = new wxFont( 12
Index: src/os2/tooltip.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/os2/tooltip.cpp,v
retrieving revision 1.5
diff -u -r1.5 tooltip.cpp
--- src/os2/tooltip.cpp	2003/03/17 11:55:45	1.5
+++ src/os2/tooltip.cpp	2003/10/24 11:32:40
@@ -56,7 +56,6 @@
 )
 {
     ULONG                           lStyle = ES_READONLY | ES_MARGIN | ES_CENTER;
-    wxColour                        vColor;
     LONG                            lColor;
     char                            zFont[128];
 
@@ -74,7 +73,7 @@
     if (!m_hWnd)
         wxLogError("Unable to create tooltip window");
 
-    vColor.InitFromName("YELLOW");
+    wxColour                        vColor( wxT("YELLOW") );
     lColor = (LONG)vColor.GetPixel();
     ::WinSetPresParam( m_hWnd
                       ,PP_BACKGROUNDCOLOR
Index: src/x11/colour.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/x11/colour.cpp,v
retrieving revision 1.15
diff -u -r1.15 colour.cpp
--- src/x11/colour.cpp	2003/10/18 23:51:01	1.15
+++ src/x11/colour.cpp	2003/10/24 11:32:40
@@ -33,7 +33,7 @@
         m_color.blue = 0;
         m_color.pixel = 0;
         m_colormap = (WXColormap *) NULL;
-        m_hasPixel = FALSE;
+        m_hasPixel = false;
     }
     wxColourRefData(const wxColourRefData& data):
         wxObjectRefData()
@@ -42,7 +42,7 @@
         m_colormap = data.m_colormap;
         m_hasPixel = data.m_hasPixel;
     }
-    
+
     ~wxColourRefData()
     {
         FreeColour();
@@ -57,7 +57,7 @@
                 m_color.blue == data.m_color.blue &&
                 m_color.pixel == data.m_color.pixel);
     }
-    
+
     void FreeColour();
     void AllocColour( WXColormap cmap );
 
@@ -71,8 +71,8 @@
     static unsigned short colMapAllocCounter[ 256 ];
 };
 
-unsigned short wxColourRefData::colMapAllocCounter[ 256 ] = 
-{  
+unsigned short wxColourRefData::colMapAllocCounter[ 256 ] =
+{
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@@ -92,13 +92,13 @@
 {
     if (!m_colormap)
         return;
-#if !wxUSE_NANOX        
+#if !wxUSE_NANOX
     if ((wxTheApp->m_visualInfo->m_visualType == GrayScale) ||
         (wxTheApp->m_visualInfo->m_visualType == PseudoColor))
     {
         int idx = m_color.pixel;
         colMapAllocCounter[ idx ] = colMapAllocCounter[ idx ] - 1;
-        
+
         if (colMapAllocCounter[ idx ] == 0)
         {
             unsigned long pixel = m_color.pixel;
@@ -128,7 +128,7 @@
     {
         m_hasPixel = XAllocColor( wxGlobalDisplay(), (Colormap) cmap, &m_color );
     }
-    
+
     m_colormap = cmap;
 }
 
@@ -147,7 +147,7 @@
     M_COLDATA->m_color.red = ((unsigned short)red) ;
     M_COLDATA->m_color.green = ((unsigned short)green) ;
     M_COLDATA->m_color.blue = ((unsigned short)blue) ;
-#else    
+#else
     M_COLDATA->m_color.red = ((unsigned short)red) << SHIFT;
     M_COLDATA->m_color.green = ((unsigned short)green) << SHIFT;
     M_COLDATA->m_color.blue = ((unsigned short)blue) << SHIFT;
@@ -204,17 +204,17 @@
 
 bool wxColour::operator == ( const wxColour& col ) const
 {
-    if (m_refData == col.m_refData) return TRUE;
+    if (m_refData == col.m_refData) return true;
 
-    if (!m_refData || !col.m_refData) return FALSE;
+    if (!m_refData || !col.m_refData) return false;
 
     XColor *own = &(((wxColourRefData*)m_refData)->m_color);
     XColor *other = &(((wxColourRefData*)col.m_refData)->m_color);
-    if (own->red != other->red) return FALSE;
-    if (own->blue != other->blue) return FALSE;
-    if (own->green != other->green) return FALSE;
 
-    return TRUE;
+    return (own->red == other->red)
+        && (own->green == other->green)
+        && (own->blue == other->blue)
+
 }
 
 wxObjectRefData *wxColour::CreateRefData() const
@@ -230,7 +230,7 @@
 void wxColour::Set( unsigned char red, unsigned char green, unsigned char blue )
 {
     AllocExclusive();
-    
+
     m_refData = new wxColourRefData();
 #if wxUSE_NANOX
     M_COLDATA->m_color.red = ((unsigned short)red) ;

 	  	 

diff --git a/docs/changes.txt b/docs/changes.txt
index d2f2fe1..b9c289e 100644
--- a/docs/changes.txt
+++ b/docs/changes.txt
@@ -80,7 +80,7 @@ Changes in behaviour not resulting in compilation errors
 
 - wxGLCanvas now uses physical pixels on high DPI displays under platforms
   where they're different from logical ones (wxGTK3, wxOSX). Multiply logical
-  coordinates, e.g. returned by wxWindow::GetSize() by GetContentScaleFactor()
+  coordinates, e.g. returned by wxWindow::GetSize() by GetOpenGLScaleFactor()
   before using them with OpenGL functions.
 
 
diff --git a/include/wx/glcanvas.h b/include/wx/glcanvas.h
index d21f0d4..0670ea3 100644
--- a/include/wx/glcanvas.h
+++ b/include/wx/glcanvas.h
@@ -258,6 +258,11 @@ public:
     // as a parameter
     wxGLContextAttrs& GetGLCTXAttrs() { return m_GLCTXAttrs; }
 
+    // wxGLCanvas uses physical pixels on high DPI displays under platforms
+    // where they're different from logical ones (wxGTK3, wxOSX)
+    // so provide here a scale factor to hide these 2 different
+    // implementation details
+    virtual double GetOpenGLScaleFactor() const;
     // deprecated methods using the implicit wxGLContext
 #if WXWIN_COMPATIBILITY_2_8
     wxDEPRECATED( wxGLContext* GetContext() const );
diff --git a/include/wx/osx/glcanvas.h b/include/wx/osx/glcanvas.h
index 7f12f24..cf660ac 100644
--- a/include/wx/osx/glcanvas.h
+++ b/include/wx/osx/glcanvas.h
@@ -97,7 +97,7 @@ public:
 
     // implement wxGLCanvasBase methods
     virtual bool SwapBuffers() wxOVERRIDE;
-
+    virtual double GetOpenGLScaleFactor() const wxOVERRIDE;
 
     // Mac-specific functions
     // ----------------------
diff --git a/include/wx/unix/glx11.h b/include/wx/unix/glx11.h
index e7b49bb..d8032ef 100644
--- a/include/wx/unix/glx11.h
+++ b/include/wx/unix/glx11.h
@@ -59,7 +59,7 @@ public:
     // --------------------------------
 
     virtual bool SwapBuffers() wxOVERRIDE;
-
+    virtual double GetOpenGLScaleFactor() const wxOVERRIDE;
 
     // X11-specific methods
     // --------------------
diff --git a/interface/wx/glcanvas.h b/interface/wx/glcanvas.h
index ee6007f..2c3c4b0 100644
--- a/interface/wx/glcanvas.h
+++ b/interface/wx/glcanvas.h
@@ -752,7 +752,7 @@ enum
     platforms where wxWindow uses logical pixels, affected by the coordinate
     scaling, on high DPI displays. Thus, if you want to set the OpenGL view
     port to the size of entire window, you must multiply the result returned by
-    wxWindow::GetClientSize() by wxWindow::GetContentScaleFactor() before
+    wxWindow::GetClientSize() by wxGLCanvas::GetOpenGLScaleFactor() before
     passing it to @c glViewport(). Same considerations apply to other OpenGL
     functions and other coordinates, notably those retrieved from wxMouseEvent
     in the event handlers.
@@ -936,6 +936,11 @@ public:
     */
     bool SetCurrent(const wxGLContext& context) const;
 
+    /** returns the scale factor for transformation between logical and
+        physical coordinates
+        @since 3.1.4
+    */
+    double GetOpenGLScaleFactor() const;
     /**
         Swaps the double-buffer of this window, making the back-buffer the
         front-buffer and vice versa, so that the output of the previous OpenGL
diff --git a/samples/opengl/cube/cube.cpp b/samples/opengl/cube/cube.cpp
index 254812e..9410fb4 100644
--- a/samples/opengl/cube/cube.cpp
+++ b/samples/opengl/cube/cube.cpp
@@ -349,7 +349,7 @@ void TestGLCanvas::OnPaint(wxPaintEvent& WXUNUSED(event))
     // multiple canvases: If we updated the viewport in the wxSizeEvent
     // handler, changing the size of one canvas causes a viewport setting that
     // is wrong when next another canvas is repainted.
-    const wxSize ClientSize = GetClientSize() * GetContentScaleFactor();
+    const wxSize ClientSize = GetClientSize() * GetOpenGLScaleFactor();
 
     TestGLContext& canvas = wxGetApp().GetContext(this, m_useStereo);
     glViewport(0, 0, ClientSize.x, ClientSize.y);
diff --git a/samples/opengl/isosurf/isosurf.cpp b/samples/opengl/isosurf/isosurf.cpp
index 9dd47a1..19306d3 100644
--- a/samples/opengl/isosurf/isosurf.cpp
+++ b/samples/opengl/isosurf/isosurf.cpp
@@ -280,7 +280,7 @@ void TestGLCanvas::OnSize(wxSizeEvent& event)
     // This is OK here only because there is only one canvas that uses the
     // context. See the cube sample for that case that multiple canvases are
     // made current with one context.
-    const wxSize size = event.GetSize() * GetContentScaleFactor();
+    const wxSize size = event.GetSize() * GetOpenGLScaleFactor();
     glViewport(0, 0, size.x, size.y);
 }
 
diff --git a/samples/opengl/penguin/penguin.cpp b/samples/opengl/penguin/penguin.cpp
index b5992a6..e7fcc76 100644
--- a/samples/opengl/penguin/penguin.cpp
+++ b/samples/opengl/penguin/penguin.cpp
@@ -306,7 +306,7 @@ void TestGLCanvas::ResetProjectionMode()
     // or more than one wxGLContext in the application.
     SetCurrent(*m_glRC);
 
-    const wxSize ClientSize = GetClientSize() * GetContentScaleFactor();
+    const wxSize ClientSize = GetClientSize() * GetOpenGLScaleFactor();
 
     // It's up to the application code to update the OpenGL viewport settings.
     // In order to avoid extensive context switching, consider doing this in
diff --git a/samples/opengl/pyramid/pyramid.cpp b/samples/opengl/pyramid/pyramid.cpp
index 5123a91..92a0cde 100644
--- a/samples/opengl/pyramid/pyramid.cpp
+++ b/samples/opengl/pyramid/pyramid.cpp
@@ -565,7 +565,7 @@ void MyGLCanvas::OnSize(wxSizeEvent& event)
     SetCurrent(*m_oglContext);
 
     // It's up to the application code to update the OpenGL viewport settings.
-    const wxSize size = event.GetSize() * GetContentScaleFactor();
+    const wxSize size = event.GetSize() * GetOpenGLScaleFactor();
     m_winHeight = size.y;
     m_oglManager->SetViewport(0, 0, size.x, m_winHeight);
 
diff --git a/src/common/glcmn.cpp b/src/common/glcmn.cpp
index e0c056a..206fd9a 100644
--- a/src/common/glcmn.cpp
+++ b/src/common/glcmn.cpp
@@ -376,6 +376,11 @@ bool wxGLCanvasBase::ParseAttribList(const int *attribList,
     return true;
 }
 
+double wxGLCanvasBase::GetOpenGLScaleFactor() const
+{
+    return 1.0;
+}
+
 // ============================================================================
 // compatibility layer for OpenGL 3 and OpenGL ES
 // ============================================================================
diff --git a/src/osx/glcanvas_osx.cpp b/src/osx/glcanvas_osx.cpp
index 71d7dd0..90b0677 100644
--- a/src/osx/glcanvas_osx.cpp
+++ b/src/osx/glcanvas_osx.cpp
@@ -562,6 +562,11 @@ bool wxGLCanvas::IsAGLMultiSampleAvailable()
     return s_isMultiSampleAvailable != 0;
 }
 
+double wxGLCanvas::GetOpenGLScaleFactor() const
+{
+    return GetContentScaleFactor();
+}
+
 /* static */
 bool wxGLCanvasBase::IsDisplaySupported(const wxGLAttributes& dispAttrs)
 {
diff --git a/src/x11/glcanvas.cpp b/src/x11/glcanvas.cpp
index 7a4c5fb..cfffba44 100644
--- a/src/x11/glcanvas.cpp
+++ b/src/x11/glcanvas.cpp
@@ -124,4 +124,13 @@ int wxGLCanvas::GetColourIndex(const wxColour& col_)
     return col.GetPixel();
 }
 
+double wxGLCanvas::GetOpenGLScaleFactor() const
+{
+#ifdef __WXGTK3__
+    return GetContentScaleFactor();
+#else
+    return 1.0;
+#endif
+}
+
 #endif // wxUSE_GLCANVAS

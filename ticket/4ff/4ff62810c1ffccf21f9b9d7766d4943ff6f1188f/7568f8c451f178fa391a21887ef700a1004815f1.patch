Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(Revision 71056)
+++ include/wx/defs.h	(Arbeitskopie)
@@ -2192,6 +2192,9 @@
     wxITEM_CHECK,
     wxITEM_RADIO,
     wxITEM_DROPDOWN,
+    wxITEM_CONTROL,
+    wxITEM_LABEL,
+    wxITEM_SPACER,
     wxITEM_MAX
 };
 
Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(Revision 71056)
+++ include/wx/aui/auibar.h	(Arbeitskopie)
@@ -109,71 +109,59 @@
 };
 
 
-class WXDLLIMPEXP_AUI wxAuiToolBarItem
+class WXDLLIMPEXP_AUI wxAuiToolBarItem : public wxToolBarToolBase
 {
     friend class wxAuiToolBar;
 
 public:
 
-    wxAuiToolBarItem()
-    {
-        m_window = NULL;
-        m_sizerItem = NULL;
-        m_spacerPixels = 0;
-        m_toolId = 0;
-        m_kind = wxITEM_NORMAL;
+
+    wxAuiToolBarItem(wxToolBarBase *tbar = NULL,
+                          int toolid = wxID_SEPARATOR,
+                          const wxString& label = wxEmptyString,
+                          const wxBitmap& bmpNormal = wxNullBitmap,
+                          const wxBitmap& bmpDisabled = wxNullBitmap,
+                          wxItemKind kind = wxITEM_NORMAL,
+                          wxObject *clientData = NULL,
+                          const wxString& shortHelpString = wxEmptyString,
+                          const wxString& longHelpString = wxEmptyString) :
+                          wxToolBarToolBase(tbar,toolid,label,
+                        			  bmpNormal,bmpDisabled,kind,clientData,
+                        			  shortHelpString,longHelpString) {
         m_state = 0;  // normal, enabled
         m_proportion = 0;
         m_active = true;
-        m_dropDown = true;
+        m_dropDown = false;
         m_sticky = true;
         m_userData = 0;
         m_alignment = wxALIGN_CENTER;
     }
 
-    wxAuiToolBarItem(const wxAuiToolBarItem& c)
-    {
-        Assign(c);
-    }
 
-    wxAuiToolBarItem& operator=(const wxAuiToolBarItem& c)
-    {
-        Assign(c);
-        return *this;
+    wxAuiToolBarItem(wxToolBarBase *tbar,
+                          wxControl *control,
+                          const wxString& label) :
+                              wxToolBarToolBase(tbar,control,label) {
+        m_state = 0;  // normal, enabled
+        m_proportion = 0;
+        m_active = true;
+        m_dropDown = false;
+        m_sticky = true;
+        m_userData = 0;
+        m_alignment = wxALIGN_CENTER;
     }
 
-    void Assign(const wxAuiToolBarItem& c)
-    {
-        m_window = c.m_window;
-        m_label = c.m_label;
-        m_bitmap = c.m_bitmap;
-        m_disabledBitmap = c.m_disabledBitmap;
-        m_hoverBitmap = c.m_hoverBitmap;
-        m_shortHelp = c.m_shortHelp;
-        m_longHelp = c.m_longHelp;
-        m_sizerItem = c.m_sizerItem;
-        m_minSize = c.m_minSize;
-        m_spacerPixels = c.m_spacerPixels;
-        m_toolId = c.m_toolId;
-        m_kind = c.m_kind;
-        m_state = c.m_state;
-        m_proportion = c.m_proportion;
-        m_active = c.m_active;
-        m_dropDown = c.m_dropDown;
-        m_sticky = c.m_sticky;
-        m_userData = c.m_userData;
-        m_alignment = c.m_alignment;
-    }
 
 
     void SetWindow(wxWindow* w) { m_window = w; }
-    wxWindow* GetWindow() { return m_window; }
+    wxWindow* GetWindow() const { return m_window; }
 
-    void SetId(int newId) { m_toolId = newId; }
-    int GetId() const { return m_toolId; }
+    void SetId(int newId) { m_id = newId; }
 
-    void SetKind(int newKind) { m_kind = newKind; }
-    int GetKind() const { return m_kind; }
+    void SetKind(wxItemKind newKind) {
+        m_kind = newKind;
+        m_toolStyle = newKind == wxITEM_SEPARATOR ? wxTOOL_STYLE_SEPARATOR : wxTOOL_STYLE_BUTTON ;
+    }
 
     void SetState(int newState) { m_state = newState; }
     int GetState() const { return m_state; }
@@ -181,24 +169,10 @@
     void SetSizerItem(wxSizerItem* s) { m_sizerItem = s; }
     wxSizerItem* GetSizerItem() const { return m_sizerItem; }
 
-    void SetLabel(const wxString& s) { m_label = s; }
-    const wxString& GetLabel() const { return m_label; }
 
-    void SetBitmap(const wxBitmap& bmp) { m_bitmap = bmp; }
-    const wxBitmap& GetBitmap() const { return m_bitmap; }
-
-    void SetDisabledBitmap(const wxBitmap& bmp) { m_disabledBitmap = bmp; }
-    const wxBitmap& GetDisabledBitmap() const { return m_disabledBitmap; }
-
     void SetHoverBitmap(const wxBitmap& bmp) { m_hoverBitmap = bmp; }
     const wxBitmap& GetHoverBitmap() const { return m_hoverBitmap; }
 
-    void SetShortHelp(const wxString& s) { m_shortHelp = s; }
-    const wxString& GetShortHelp() const { return m_shortHelp; }
-
-    void SetLongHelp(const wxString& s) { m_longHelp = s; }
-    const wxString& GetLongHelp() const { return m_longHelp; }
-
     void SetMinSize(const wxSize& s) { m_minSize = s; }
     const wxSize& GetMinSize() const { return m_minSize; }
 
@@ -223,20 +197,60 @@
     void SetAlignment(int l) { m_alignment = l; }
     int GetAlignment() const { return m_alignment; }
 
+
+
+    wxAuiToolBarItem(const wxAuiToolBarItem& item){
+        if(item.IsControl())
+        {
+            Init(item.GetToolBar(),wxTOOL_STYLE_CONTROL,item.GetId(),wxITEM_MAX);
+            SetClientData(item.GetClientData());
+        }
+        else if(item.IsButton())
+            Init(item.GetToolBar(),wxTOOL_STYLE_BUTTON,item.GetId(),item.GetKind());
+        else if(item.IsSeparator())
+        {
+            Init(item.GetToolBar(),wxTOOL_STYLE_SEPARATOR,item.GetId(),wxITEM_SEPARATOR);
+            if(item.IsStretchable())
+            	MakeStretchable();
+        }
+        SetLabel(item.GetLabel());
+        SetShortHelp(item.GetShortHelp());
+        SetLongHelp(item.GetLongHelp());
+
+        SetNormalBitmap(item.GetNormalBitmap());
+        SetDisabledBitmap(item.GetDisabledBitmap());
+
+        Enable(item.IsEnabled());
+        if(item.IsToggled() && CanBeToggled())
+        	Toggle(true);
+
+
+#if wxUSE_MENUS
+        SetDropdownMenu(item.GetDropdownMenu());
+#endif
+
+        SetWindow(item.GetWindow());
+        SetState(item.GetState());
+        SetSizerItem(item.GetSizerItem());
+
+        SetHoverBitmap(item.GetHoverBitmap());
+
+        SetSpacerPixels(item.GetSpacerPixels());
+        SetProportion(item.GetProportion());
+        SetActive(item.IsActive());
+        SetHasDropDown(item.HasDropDown());
+        SetSticky(item.IsSticky());
+        SetUserData(item.GetUserData());
+        SetAlignment(item.GetAlignment());
+
+    }
 private:
 
     wxWindow* m_window;          // item's associated window
-    wxString m_label;            // label displayed on the item
-    wxBitmap m_bitmap;           // item's bitmap
-    wxBitmap m_disabledBitmap;  // item's disabled bitmap
     wxBitmap m_hoverBitmap;     // item's hover bitmap
-    wxString m_shortHelp;       // short help (for tooltip)
-    wxString m_longHelp;        // long help (for status bar)
     wxSizerItem* m_sizerItem;   // sizer item
     wxSize m_minSize;           // item's minimum size
     int m_spacerPixels;         // size of a spacer
-    int m_toolId;                // item's id
-    int m_kind;                  // item's kind
     int m_state;                 // state
     int m_proportion;            // proportion
     bool m_active;               // true if the item is currently active
@@ -330,7 +344,7 @@
 
     virtual int ShowDropDown(
                          wxWindow* wnd,
-                         const wxAuiToolBarItemArray& items) = 0;
+                         const wxToolBarToolsList& items) = 0;
 };
 
 
@@ -410,7 +424,7 @@
     virtual void SetElementSize(int elementId, int size);
 
     virtual int ShowDropDown(wxWindow* wnd,
-                             const wxAuiToolBarItemArray& items);
+                             const wxToolBarToolsList& items);
 
 protected:
 
@@ -436,15 +450,23 @@
 
 
 
-class WXDLLIMPEXP_AUI wxAuiToolBar : public wxControl
+class WXDLLIMPEXP_AUI wxAuiToolBar : public wxToolBarBase
 {
 public:
+	wxAuiToolBar();
 
     wxAuiToolBar(wxWindow* parent,
                  wxWindowID id = -1,
                  const wxPoint& position = wxDefaultPosition,
                  const wxSize& size = wxDefaultSize,
                  long style = wxAUI_TB_DEFAULT_STYLE);
+
+    bool Create(wxWindow* parent,
+            wxWindowID id = -1,
+            const wxPoint& position = wxDefaultPosition,
+            const wxSize& size = wxDefaultSize,
+            long style = wxAUI_TB_DEFAULT_STYLE);
+
     virtual ~wxAuiToolBar();
 
     void SetWindowStyleFlag(long style);
@@ -455,88 +477,73 @@
 
     bool SetFont(const wxFont& font);
 
+    using wxToolBarBase::AddTool;
+    wxToolBarToolBase* AddTool(int toolId,
+                     const wxBitmap& bitmap,
+                     const wxBitmap& disabledBitmap,
+                     bool toggle = false,
+                     wxObject* clientData = NULL,
+                     const wxString& shortHelpString = wxEmptyString,
+                     const wxString& longHelpString = wxEmptyString)
+        {
+            return AddTool(toolId,
+                    wxEmptyString,
+                    bitmap,
+                    disabledBitmap,
+                    toggle ? wxITEM_CHECK : wxITEM_NORMAL,
+                    shortHelpString,
+                    longHelpString,
+                    clientData);
+        }
 
-    wxAuiToolBarItem* AddTool(int toolId,
-                 const wxString& label,
-                 const wxBitmap& bitmap,
-                 const wxString& shortHelpString = wxEmptyString,
-                 wxItemKind kind = wxITEM_NORMAL);
 
-    wxAuiToolBarItem* AddTool(int toolId,
-                 const wxString& label,
-                 const wxBitmap& bitmap,
-                 const wxBitmap& disabledBitmap,
-                 wxItemKind kind,
-                 const wxString& shortHelpString,
-                 const wxString& longHelpString,
-                 wxObject* clientData);
+    wxToolBarToolBase* AddLabel(int toolId,
+                  const wxString& label = wxEmptyString,
+                  const int width = -1);
+    wxToolBarToolBase* AddSpacer(int pixels);
+    wxToolBarToolBase* AddStretchSpacer(int proportion = 1);
 
-    wxAuiToolBarItem* AddTool(int toolId,
-                 const wxBitmap& bitmap,
-                 const wxBitmap& disabledBitmap,
-                 bool toggle = false,
-                 wxObject* clientData = NULL,
-                 const wxString& shortHelpString = wxEmptyString,
-                 const wxString& longHelpString = wxEmptyString)
+    bool Realize();
+
+    wxAuiToolBarItem* FindToolByIndex(int idx) const
     {
-        return AddTool(toolId,
-                wxEmptyString,
-                bitmap,
-                disabledBitmap,
-                toggle ? wxITEM_CHECK : wxITEM_NORMAL,
-                shortHelpString,
-                longHelpString,
-                clientData);
+       	return wxDynamicCast(GetToolByPos(idx),wxAuiToolBarItem);
     }
 
-    wxAuiToolBarItem* AddLabel(int toolId,
-                  const wxString& label = wxEmptyString,
-                  const int width = -1);
-    wxAuiToolBarItem* AddControl(wxControl* control,
-                    const wxString& label = wxEmptyString);
-    wxAuiToolBarItem* AddSeparator();
-    wxAuiToolBarItem* AddSpacer(int pixels);
-    wxAuiToolBarItem* AddStretchSpacer(int proportion = 1);
+    wxAuiToolBarItem* FindTool(int toolId) const
+    {
+    	return wxDynamicCast(FindById(toolId),wxAuiToolBarItem);
+    }
 
-    bool Realize();
+    void Clear() { ClearTools() ; }
 
-    wxControl* FindControl(int windowId);
-    wxAuiToolBarItem* FindToolByPosition(wxCoord x, wxCoord y) const;
-    wxAuiToolBarItem* FindToolByIndex(int idx) const;
-    wxAuiToolBarItem* FindTool(int toolId) const;
+    // returns a (non separator) tool containing the point (x, y) or NULL if
+    // there is no tool at this point (coordinates are client)
+    wxToolBarToolBase *FindToolForPosition(wxCoord x, wxCoord y) const;
+    wxAuiToolBarItem* FindToolByPosition(wxCoord x, wxCoord y) const
+    {
+        return wxDynamicCast(FindToolForPosition(x,y),wxAuiToolBarItem);
+    }
 
-    void ClearTools() { Clear() ; }
-    void Clear();
-    bool DeleteTool(int toolId);
-    bool DeleteByIndex(int toolId);
+    size_t GetToolCount() const;
+    int GetToolIndex(int toolId) const { return GetToolPos(toolId); }
 
-    size_t GetToolCount() const;
-    int GetToolPos(int toolId) const { return GetToolIndex(toolId); }
-    int GetToolIndex(int toolId) const;
     bool GetToolFits(int toolId) const;
     wxRect GetToolRect(int toolId) const;
     bool GetToolFitsByIndex(int toolId) const;
     bool GetToolBarFits() const;
 
-    void SetMargins(const wxSize& size) { SetMargins(size.x, size.x, size.y, size.y); }
     void SetMargins(int x, int y) { SetMargins(x, x, y, y); }
     void SetMargins(int left, int right, int top, int bottom);
 
-    void SetToolBitmapSize(const wxSize& size);
-    wxSize GetToolBitmapSize() const;
-
     bool GetOverflowVisible() const;
     void SetOverflowVisible(bool visible);
 
     bool GetGripperVisible() const;
     void SetGripperVisible(bool visible);
 
-    void ToggleTool(int toolId, bool state);
-    bool GetToolToggled(int toolId) const;
+    bool GetToolToggled(int toolId) const {return GetToolState(toolId);}
 
-    void EnableTool(int toolId, bool state);
-    bool GetToolEnabled(int toolId) const;
-
     void SetToolDropDown(int toolId, bool dropdown);
     bool GetToolDropDown(int toolId) const;
 
@@ -546,9 +553,6 @@
     void SetToolTextOrientation(int orientation);
     int  GetToolTextOrientation() const;
 
-    void SetToolPacking(int packing);
-    int  GetToolPacking() const;
-
     void SetToolProportion(int toolId, int proportion);
     int  GetToolProportion(int toolId) const;
 
@@ -561,15 +565,9 @@
     wxString GetToolLabel(int toolId) const;
     void SetToolLabel(int toolId, const wxString& label);
 
-    wxBitmap GetToolBitmap(int toolId) const;
-    void SetToolBitmap(int toolId, const wxBitmap& bitmap);
+    wxBitmap GetToolBitmap(int toolId) const {return FindById(toolId)->GetNormalBitmap();}
+    void SetToolBitmap(int toolId, const wxBitmap& bitmap) {FindById(toolId)->SetNormalBitmap(bitmap);}
 
-    wxString GetToolShortHelp(int toolId) const;
-    void SetToolShortHelp(int toolId, const wxString& helpString);
-
-    wxString GetToolLongHelp(int toolId) const;
-    void SetToolLongHelp(int toolId, const wxString& helpString);
-
     void SetCustomOverflowItems(const wxAuiToolBarItemArray& prepend,
                                 const wxAuiToolBarItemArray& append);
 
@@ -588,6 +586,37 @@
 
 protected:
 
+    wxToolBarToolBase *CreateTool(int toolid,
+                                              const wxString& label,
+                                              const wxBitmap& bmpNormal,
+                                              const wxBitmap& bmpDisabled = wxNullBitmap,
+                                              wxItemKind kind = wxITEM_NORMAL,
+                                              wxObject *clientData = NULL,
+                                              const wxString& shortHelp = wxEmptyString,
+                                              const wxString& longHelp = wxEmptyString);
+
+    wxToolBarToolBase *CreateTool(wxControl *control, const wxString& label);
+
+
+    // the tool is not yet inserted into m_tools list when this function is
+    // called and will only be added to it if this function succeeds
+    bool DoInsertTool(size_t WXUNUSED(pos), wxToolBarToolBase* WXUNUSED(tool)) {return true;};
+
+    // the tool is still in m_tools list when this function is called, it will
+    // only be deleted from it if it succeeds
+    bool DoDeleteTool(size_t WXUNUSED(pos), wxToolBarToolBase* WXUNUSED(tool)) {return true;};
+
+    // called when the tools enabled flag changes
+    void DoEnableTool(wxToolBarToolBase* WXUNUSED(tool), bool WXUNUSED(enable)) {};
+
+    // called when the tool is toggled
+    void DoToggleTool(wxToolBarToolBase* WXUNUSED(tool), bool WXUNUSED(toggle)) {};
+
+    // called when the tools "can be toggled" flag changes
+    void DoSetToggle(wxToolBarToolBase* WXUNUSED(tool), bool WXUNUSED(toggle)) {};
+
+protected:
+
     void DoIdleUpdate();
     void SetOrientation(int orientation);
     void SetHoverItem(wxAuiToolBarItem* item);
@@ -624,7 +653,6 @@
 
 protected:
 
-    wxAuiToolBarItemArray m_items;      // array of toolbar items
     wxAuiToolBarArt* m_art;             // art provider
     wxBoxSizer* m_sizer;                // main sizer for toolbar
     wxAuiToolBarItem* m_actionItem;    // item that's being acted upon (pressed)
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(Revision 71056)
+++ src/aui/auibar.cpp	(Arbeitskopie)
@@ -41,9 +41,9 @@
 #endif
 
 #include "wx/arrimpl.cpp"
+
 WX_DEFINE_OBJARRAY(wxAuiToolBarItemArray)
 
-
 wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEvent );
 wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, wxAuiToolBarEvent );
 wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, wxAuiToolBarEvent );
@@ -55,14 +55,6 @@
 IMPLEMENT_DYNAMIC_CLASS(wxAuiToolBarEvent, wxEvent)
 
 
-// missing wxITEM_* items
-enum
-{
-    wxITEM_CONTROL = wxITEM_MAX,
-    wxITEM_LABEL,
-    wxITEM_SPACER
-};
-
 const int BUTTON_DROPDOWN_WIDTH = 10;
 
 
@@ -267,11 +259,11 @@
     {
         bmpX = rect.x +
                 (rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
+                (item.GetNormalBitmap().GetWidth()/2);
 
         bmpY = rect.y +
                 ((rect.height-textHeight)/2) -
-                (item.GetBitmap().GetHeight()/2);
+                (item.GetNormalBitmap().GetHeight()/2);
 
         textX = rect.x + (rect.width/2) - (textWidth/2) + 1;
         textY = rect.y + rect.height - textHeight - 1;
@@ -282,16 +274,16 @@
 
         bmpY = rect.y +
                 (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
+                (item.GetNormalBitmap().GetHeight()/2);
 
-        textX = bmpX + 3 + item.GetBitmap().GetWidth();
+        textX = bmpX + 3 + item.GetNormalBitmap().GetWidth();
         textY = rect.y +
                  (rect.height/2) -
                  (textHeight/2);
     }
 
 
-    if (!(item.GetState() & wxAUI_BUTTON_STATE_DISABLED))
+    if (item.IsEnabled())
     {
         if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
         {
@@ -306,12 +298,12 @@
 
             // draw an even lighter background for checked item hovers (since
             // the hover background is the same color as the check background)
-            if (item.GetState() & wxAUI_BUTTON_STATE_CHECKED)
+            if (item.IsToggled())
                 dc.SetBrush(wxBrush(m_highlightColour.ChangeLightness(180)));
 
             dc.DrawRectangle(rect);
         }
-        else if (item.GetState() & wxAUI_BUTTON_STATE_CHECKED)
+        else if (item.IsToggled())
         {
             // it's important to put this code in an else statment after the
             // hover, otherwise hovers won't draw properly for checked items
@@ -321,18 +313,14 @@
         }
     }
 
-    wxBitmap bmp;
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
-        bmp = item.GetDisabledBitmap();
-    else
-        bmp = item.GetBitmap();
+    wxBitmap bmp = item.GetBitmap();
 
     if ( bmp.IsOk() )
         dc.DrawBitmap(bmp, bmpX, bmpY, true);
 
     // set the item's text color based on if it is disabled
     dc.SetTextForeground(*wxBLACK);
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
+    if (!item.IsEnabled())
         dc.SetTextForeground(DISABLED_TEXT_COLOR);
 
     if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
@@ -659,8 +647,8 @@
                                           const wxRect& rect,
                                           int state)
 {
-    if (state & wxAUI_BUTTON_STATE_HOVER ||
-        state & wxAUI_BUTTON_STATE_PRESSED)
+    if ((state & wxAUI_BUTTON_STATE_HOVER) ||
+        (state & wxAUI_BUTTON_STATE_PRESSED))
     {
         wxColor light_gray_bg = m_highlightColour.ChangeLightness(170);
 
@@ -709,7 +697,7 @@
 }
 
 int wxAuiDefaultToolBarArt::ShowDropDown(wxWindow* wnd,
-                                         const wxAuiToolBarItemArray& items)
+                                         const wxToolBarToolsList& items)
 {
     wxMenu menuPopup;
 
@@ -718,24 +706,24 @@
     size_t i, count = items.GetCount();
     for (i = 0; i < count; ++i)
     {
-        wxAuiToolBarItem& item = items.Item(i);
+        wxAuiToolBarItem *item = wxDynamicCast(items[i],wxAuiToolBarItem);
 
-        if (item.GetKind() == wxITEM_NORMAL)
+        if (item->IsButton() && item->GetKind() == wxITEM_NORMAL)
         {
-            wxString text = item.GetShortHelp();
+            wxString text = item->GetShortHelp();
             if (text.empty())
-                text = item.GetLabel();
+                text = item->GetLabel();
 
             if (text.empty())
                 text = wxT(" ");
 
-            wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text, item.GetShortHelp());
+            wxMenuItem* m =  new wxMenuItem(&menuPopup, item->GetId(), text, item->GetShortHelp());
 
-            m->SetBitmap(item.GetBitmap());
+            m->SetBitmap(item->GetBitmap());
             menuPopup.Append(m);
             items_added++;
         }
-        else if (item.GetKind() == wxITEM_SEPARATOR)
+        else if (item->IsSeparator())
         {
             if (items_added > 0)
                 menuPopup.AppendSeparator();
@@ -798,18 +786,27 @@
     EVT_SET_CURSOR(wxAuiToolBar::OnSetCursor)
 END_EVENT_TABLE()
 
+wxAuiToolBar::wxAuiToolBar() : wxToolBarBase()
+{}
 
 wxAuiToolBar::wxAuiToolBar(wxWindow* parent,
                            wxWindowID id,
                            const wxPoint& position,
                            const wxSize& size,
                            long style)
-                            : wxControl(parent,
-                                        id,
-                                        position,
-                                        size,
-                                        style | wxBORDER_NONE)
+                            : wxToolBarBase()
 {
+	Create(parent,id,position,size,style | wxBORDER_NONE);
+}
+
+bool wxAuiToolBar::Create(wxWindow* parent,
+        wxWindowID id,
+        const wxPoint& position,
+        const wxSize& size,
+        long style)
+{
+	bool result = wxControl::Create(parent,id,position,size,style);
+
     m_sizer = new wxBoxSizer(wxHORIZONTAL);
     m_buttonWidth = -1;
     m_buttonHeight = -1;
@@ -840,9 +837,9 @@
     if (style & wxAUI_TB_HORZ_LAYOUT)
         SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
     SetBackgroundStyle(wxBG_STYLE_CUSTOM);
-}
 
-
+	return result;
+}
 wxAuiToolBar::~wxAuiToolBar()
 {
     delete m_art;
@@ -904,94 +901,27 @@
     return m_art;
 }
 
-
-
-
-wxAuiToolBarItem* wxAuiToolBar::AddTool(int tool_id,
-                           const wxString& label,
-                           const wxBitmap& bitmap,
-                           const wxString& shortHelp_string,
-                           wxItemKind kind)
+wxToolBarToolBase *wxAuiToolBar::CreateTool(int toolid,
+                                          const wxString& label,
+                                          const wxBitmap& bmpNormal,
+                                          const wxBitmap& bmpDisabled,
+                                          wxItemKind kind,
+                                          wxObject *clientData,
+                                          const wxString& shortHelp,
+                                          const wxString& longHelp)
 {
-    return AddTool(tool_id,
-            label,
-            bitmap,
-            wxNullBitmap,
-            kind,
-            shortHelp_string,
-            wxEmptyString,
-            NULL);
-}
+    return new wxAuiToolBarItem(this, toolid, label, bmpNormal,
+        bmpNormal.IsOk() && !bmpDisabled.IsOk() ? bmpNormal.ConvertToDisabled() : bmpDisabled , kind,
+	clientData, shortHelp, longHelp);
 
 
-wxAuiToolBarItem* wxAuiToolBar::AddTool(int tool_id,
-                           const wxString& label,
-                           const wxBitmap& bitmap,
-                           const wxBitmap& disabledBitmap,
-                           wxItemKind kind,
-                           const wxString& shortHelpString,
-                           const wxString& longHelpString,
-                           wxObject* WXUNUSED(client_data))
-{
-    wxAuiToolBarItem item;
-    item.m_window = NULL;
-    item.m_label = label;
-    item.m_bitmap = bitmap;
-    item.m_disabledBitmap = disabledBitmap;
-    item.m_shortHelp = shortHelpString;
-    item.m_longHelp = longHelpString;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_spacerPixels = 0;
-    item.m_toolId = tool_id;
-    item.m_state = 0;
-    item.m_proportion = 0;
-    item.m_kind = kind;
-    item.m_sizerItem = NULL;
-    item.m_minSize = wxDefaultSize;
-    item.m_userData = 0;
-    item.m_sticky = false;
-
-    if (item.m_toolId == wxID_ANY)
-        item.m_toolId = wxNewId();
-
-    if (!item.m_disabledBitmap.IsOk())
-    {
-        // no disabled bitmap specified, we need to make one
-        if (item.m_bitmap.IsOk())
-        {
-            item.m_disabledBitmap = item.m_bitmap.ConvertToDisabled();
-        }
-    }
-    m_items.Add(item);
-    return &m_items.Last();
 }
-
-wxAuiToolBarItem* wxAuiToolBar::AddControl(wxControl* control,
-                              const wxString& label)
+wxToolBarToolBase *wxAuiToolBar::CreateTool(wxControl *control, const wxString& label)
 {
-    wxAuiToolBarItem item;
-    item.m_window = (wxWindow*)control;
-    item.m_label = label;
-    item.m_bitmap = wxNullBitmap;
-    item.m_disabledBitmap = wxNullBitmap;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_spacerPixels = 0;
-    item.m_toolId = control->GetId();
-    item.m_state = 0;
-    item.m_proportion = 0;
-    item.m_kind = wxITEM_CONTROL;
-    item.m_sizerItem = NULL;
-    item.m_minSize = control->GetEffectiveMinSize();
-    item.m_userData = 0;
-    item.m_sticky = false;
-
-    m_items.Add(item);
-    return &m_items.Last();
+	return new wxAuiToolBarItem(this, control,label);
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddLabel(int tool_id,
+wxToolBarToolBase* wxAuiToolBar::AddLabel(int tool_id,
                             const wxString& label,
                             const int width)
 {
@@ -999,184 +929,66 @@
     if (width != -1)
         min_size.x = width;
 
-    wxAuiToolBarItem item;
-    item.m_window = NULL;
-    item.m_label = label;
-    item.m_bitmap = wxNullBitmap;
-    item.m_disabledBitmap = wxNullBitmap;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_spacerPixels = 0;
-    item.m_toolId = tool_id;
-    item.m_state = 0;
-    item.m_proportion = 0;
-    item.m_kind = wxITEM_LABEL;
-    item.m_sizerItem = NULL;
-    item.m_minSize = min_size;
-    item.m_userData = 0;
-    item.m_sticky = false;
+    wxAuiToolBarItem *item = new wxAuiToolBarItem(this,tool_id,label,wxNullBitmap,wxNullBitmap,wxITEM_LABEL);
 
-    if (item.m_toolId == wxID_ANY)
-        item.m_toolId = wxNewId();
+    item->m_minSize = min_size;
 
-    m_items.Add(item);
-    return &m_items.Last();
+    return AddTool(item);
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddSeparator()
+wxToolBarToolBase* wxAuiToolBar::AddSpacer(int pixels)
 {
-    wxAuiToolBarItem item;
-    item.m_window = NULL;
-    item.m_label = wxEmptyString;
-    item.m_bitmap = wxNullBitmap;
-    item.m_disabledBitmap = wxNullBitmap;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_toolId = -1;
-    item.m_state = 0;
-    item.m_proportion = 0;
-    item.m_kind = wxITEM_SEPARATOR;
-    item.m_sizerItem = NULL;
-    item.m_minSize = wxDefaultSize;
-    item.m_userData = 0;
-    item.m_sticky = false;
+    wxAuiToolBarItem *item = new wxAuiToolBarItem(this,-1,wxEmptyString,wxNullBitmap,wxNullBitmap,wxITEM_LABEL);
 
-    m_items.Add(item);
-    return &m_items.Last();
-}
+    item->m_spacerPixels = pixels;
 
-wxAuiToolBarItem* wxAuiToolBar::AddSpacer(int pixels)
-{
-    wxAuiToolBarItem item;
-    item.m_window = NULL;
-    item.m_label = wxEmptyString;
-    item.m_bitmap = wxNullBitmap;
-    item.m_disabledBitmap = wxNullBitmap;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_spacerPixels = pixels;
-    item.m_toolId = -1;
-    item.m_state = 0;
-    item.m_proportion = 0;
-    item.m_kind = wxITEM_SPACER;
-    item.m_sizerItem = NULL;
-    item.m_minSize = wxDefaultSize;
-    item.m_userData = 0;
-    item.m_sticky = false;
-
-    m_items.Add(item);
-    return &m_items.Last();
+    return AddTool(item);
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddStretchSpacer(int proportion)
+wxToolBarToolBase* wxAuiToolBar::AddStretchSpacer(int proportion)
 {
-    wxAuiToolBarItem item;
-    item.m_window = NULL;
-    item.m_label = wxEmptyString;
-    item.m_bitmap = wxNullBitmap;
-    item.m_disabledBitmap = wxNullBitmap;
-    item.m_active = true;
-    item.m_dropDown = false;
-    item.m_spacerPixels = 0;
-    item.m_toolId = -1;
-    item.m_state = 0;
-    item.m_proportion = proportion;
-    item.m_kind = wxITEM_SPACER;
-    item.m_sizerItem = NULL;
-    item.m_minSize = wxDefaultSize;
-    item.m_userData = 0;
-    item.m_sticky = false;
+    wxAuiToolBarItem *item = new wxAuiToolBarItem(this,-1,wxEmptyString,wxNullBitmap,wxNullBitmap,wxITEM_LABEL);
 
-    m_items.Add(item);
-    return &m_items.Last();
-}
+    item->m_proportion = proportion;
 
-void wxAuiToolBar::Clear()
-{
-    m_items.Clear();
-    m_sizerElementCount = 0;
+    return AddTool(item);
 }
 
-bool wxAuiToolBar::DeleteTool(int tool_id)
+wxToolBarToolBase* wxAuiToolBar::FindToolForPosition(wxCoord x, wxCoord y) const
 {
-    int idx = GetToolIndex(tool_id);
-    if (idx >= 0 && idx < (int)m_items.GetCount())
-    {
-        m_items.RemoveAt(idx);
-        Realize();
-        return true;
-    }
-
-    return false;
-}
-
-bool wxAuiToolBar::DeleteByIndex(int idx)
-{
-    if (idx >= 0 && idx < (int)m_items.GetCount())
-    {
-        m_items.RemoveAt(idx);
-        Realize();
-        return true;
-    }
-
-    return false;
-}
-
-
-wxControl* wxAuiToolBar::FindControl(int id)
-{
-    wxWindow* wnd = FindWindow(id);
-    return (wxControl*)wnd;
-}
-
-wxAuiToolBarItem* wxAuiToolBar::FindTool(int tool_id) const
-{
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_toolId == tool_id)
-            return &item;
-    }
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
 
-    return NULL;
-}
+ 	 	if (!item->m_sizerItem)
+ 	 	 	continue;
 
-wxAuiToolBarItem* wxAuiToolBar::FindToolByPosition(wxCoord x, wxCoord y) const
-{
-    size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
-    {
-        wxAuiToolBarItem& item = m_items.Item(i);
+ 	 	wxRect rect = item->m_sizerItem->GetRect();
+ 	 	if (rect.Contains(x,y))
+ 	 	{
+ 	 	// if the item doesn't fit on the toolbar, return NULL
+ 	 	 	if (!GetToolFitsByIndex(i))
+ 	 	 	 	return NULL;
 
-        if (!item.m_sizerItem)
-            continue;
+ 	 	 	return item;
+ 	 	}
+ 	 }
 
-        wxRect rect = item.m_sizerItem->GetRect();
-        if (rect.Contains(x,y))
-        {
-            // if the item doesn't fit on the toolbar, return NULL
-            if (!GetToolFitsByIndex(i))
-                return NULL;
-
-            return &item;
-        }
-    }
-
-    return NULL;
+ 	return NULL;
 }
 
 wxAuiToolBarItem* wxAuiToolBar::FindToolByPositionWithPacking(wxCoord x, wxCoord y) const
 {
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
 
-        if (!item.m_sizerItem)
+        if (!item->m_sizerItem)
             continue;
 
-        wxRect rect = item.m_sizerItem->GetRect();
+        wxRect rect = item->m_sizerItem->GetRect();
 
         // apply tool packing
         if (i+1 < count)
@@ -1188,38 +1000,16 @@
             if (!GetToolFitsByIndex(i))
                 return NULL;
 
-            return &item;
+            return item;
         }
     }
 
     return NULL;
 }
 
-wxAuiToolBarItem* wxAuiToolBar::FindToolByIndex(int idx) const
-{
-    if (idx < 0)
-        return NULL;
-
-    if (idx >= (int)m_items.size())
-        return NULL;
-
-    return &(m_items[idx]);
-}
-
-void wxAuiToolBar::SetToolBitmapSize(const wxSize& WXUNUSED(size))
-{
-    // TODO: wxToolBar compatibility
-}
-
-wxSize wxAuiToolBar::GetToolBitmapSize() const
-{
-    // TODO: wxToolBar compatibility
-    return wxSize(16,15);
-}
-
 void wxAuiToolBar::SetToolProportion(int tool_id, int proportion)
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return;
 
@@ -1228,7 +1018,7 @@
 
 int wxAuiToolBar::GetToolProportion(int tool_id) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return 0;
 
@@ -1252,7 +1042,7 @@
 
 void wxAuiToolBar::SetToolDropDown(int tool_id, bool dropdown)
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return;
 
@@ -1261,7 +1051,7 @@
 
 bool wxAuiToolBar::GetToolDropDown(int tool_id) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return 0;
 
@@ -1274,7 +1064,7 @@
     if (tool_id == -1)
         return;
 
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return;
 
@@ -1289,7 +1079,7 @@
 
 bool wxAuiToolBar::GetToolSticky(int tool_id) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (!item)
         return 0;
 
@@ -1324,17 +1114,6 @@
     return m_toolTextOrientation;
 }
 
-void wxAuiToolBar::SetToolPacking(int packing)
-{
-    m_toolPacking = packing;
-}
-
-int wxAuiToolBar::GetToolPacking() const
-{
-    return m_toolPacking;
-}
-
-
 void wxAuiToolBar::SetOrientation(int orientation)
 {
     wxCHECK_RET(orientation == wxHORIZONTAL ||
@@ -1409,12 +1188,12 @@
     wxAuiToolBarItem* former_hover = NULL;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_state & wxAUI_BUTTON_STATE_HOVER)
-            former_hover = &item;
-        item.m_state &= ~wxAUI_BUTTON_STATE_HOVER;
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+        if (item->m_state & wxAUI_BUTTON_STATE_HOVER)
+            former_hover = item;
+        item->m_state &= ~wxAUI_BUTTON_STATE_HOVER;
     }
 
     if (pitem)
@@ -1434,12 +1213,12 @@
     wxAuiToolBarItem* former_item = NULL;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_state & wxAUI_BUTTON_STATE_PRESSED)
-            former_item = &item;
-        item.m_state &= ~wxAUI_BUTTON_STATE_PRESSED;
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+        if (item->m_state & wxAUI_BUTTON_STATE_PRESSED)
+            former_item = item;
+        item->m_state &= ~wxAUI_BUTTON_STATE_PRESSED;
     }
 
     if (pitem)
@@ -1491,87 +1270,9 @@
     m_overflowState = overflow_state;
 }
 
-void wxAuiToolBar::ToggleTool(int tool_id, bool state)
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-
-    if (tool && (tool->m_kind == wxITEM_CHECK || tool->m_kind == wxITEM_RADIO))
-    {
-        if (tool->m_kind == wxITEM_RADIO)
-        {
-            int i, idx, count;
-            idx = GetToolIndex(tool_id);
-            count = (int)m_items.GetCount();
-
-            if (idx >= 0 && idx < count)
-            {
-                for (i = idx + 1; i < count; ++i)
-                {
-                    if (m_items[i].m_kind != wxITEM_RADIO)
-                        break;
-                    m_items[i].m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
-                }
-                for (i = idx - 1; i >= 0; i--)
-                {
-                    if (m_items[i].m_kind != wxITEM_RADIO)
-                        break;
-                    m_items[i].m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
-                }
-            }
-
-            tool->m_state |= wxAUI_BUTTON_STATE_CHECKED;
-        }
-         else if (tool->m_kind == wxITEM_CHECK)
-        {
-            if (state == true)
-                tool->m_state |= wxAUI_BUTTON_STATE_CHECKED;
-            else
-                tool->m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
-        }
-    }
-}
-
-bool wxAuiToolBar::GetToolToggled(int tool_id) const
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-
-    if (tool)
-    {
-        if ( (tool->m_kind != wxITEM_CHECK) && (tool->m_kind != wxITEM_RADIO) )
-            return false;
-
-        return (tool->m_state & wxAUI_BUTTON_STATE_CHECKED) ? true : false;
-    }
-
-    return false;
-}
-
-void wxAuiToolBar::EnableTool(int tool_id, bool state)
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-
-    if (tool)
-    {
-        if (state == true)
-            tool->m_state &= ~wxAUI_BUTTON_STATE_DISABLED;
-        else
-            tool->m_state |= wxAUI_BUTTON_STATE_DISABLED;
-    }
-}
-
-bool wxAuiToolBar::GetToolEnabled(int tool_id) const
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-
-    if (tool)
-        return (tool->m_state & wxAUI_BUTTON_STATE_DISABLED) ? false : true;
-
-    return false;
-}
-
 wxString wxAuiToolBar::GetToolLabel(int tool_id) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem* tool = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
     if (!tool)
         return wxEmptyString;
@@ -1581,70 +1282,13 @@
 
 void wxAuiToolBar::SetToolLabel(int tool_id, const wxString& label)
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem* tool = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (tool)
     {
         tool->m_label = label;
     }
 }
 
-wxBitmap wxAuiToolBar::GetToolBitmap(int tool_id) const
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
-        return wxNullBitmap;
-
-    return tool->m_bitmap;
-}
-
-void wxAuiToolBar::SetToolBitmap(int tool_id, const wxBitmap& bitmap)
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
-    {
-        tool->m_bitmap = bitmap;
-    }
-}
-
-wxString wxAuiToolBar::GetToolShortHelp(int tool_id) const
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
-        return wxEmptyString;
-
-    return tool->m_shortHelp;
-}
-
-void wxAuiToolBar::SetToolShortHelp(int tool_id, const wxString& help_string)
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
-    {
-        tool->m_shortHelp = help_string;
-    }
-}
-
-wxString wxAuiToolBar::GetToolLongHelp(int tool_id) const
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
-        return wxEmptyString;
-
-    return tool->m_longHelp;
-}
-
-void wxAuiToolBar::SetToolLongHelp(int tool_id, const wxString& help_string)
-{
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
-    {
-        tool->m_longHelp = help_string;
-    }
-}
-
 void wxAuiToolBar::SetCustomOverflowItems(const wxAuiToolBarItemArray& prepend,
                                           const wxAuiToolBarItemArray& append)
 {
@@ -1715,39 +1359,21 @@
 
 size_t wxAuiToolBar::GetToolCount() const
 {
-    return m_items.size();
+    return m_tools.size();
 }
 
-int wxAuiToolBar::GetToolIndex(int tool_id) const
-{
-    // this will prevent us from returning the index of the
-    // first separator in the toolbar since its id is equal to -1
-    if (tool_id == -1)
-        return wxNOT_FOUND;
-
-    size_t i, count = m_items.GetCount();
-    for (i = 0; i < count; ++i)
-    {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_toolId == tool_id)
-            return i;
-    }
-
-    return wxNOT_FOUND;
-}
-
 bool wxAuiToolBar::GetToolFitsByIndex(int tool_idx) const
 {
-    if (tool_idx < 0 || tool_idx >= (int)m_items.GetCount())
+    if (tool_idx < 0 || tool_idx >= (int)m_tools.GetCount())
         return false;
 
-    if (!m_items[tool_idx].m_sizerItem)
+    if (!wxDynamicCast(GetToolByPos(tool_idx),wxAuiToolBarItem)->m_sizerItem)
         return false;
 
     int cli_w, cli_h;
     GetClientSize(&cli_w, &cli_h);
 
-    wxRect rect = m_items[tool_idx].m_sizerItem->GetRect();
+    wxRect rect = wxDynamicCast(GetToolByPos(tool_idx),wxAuiToolBarItem)->m_sizerItem->GetRect();
 
     if (m_orientation == wxVERTICAL)
     {
@@ -1774,12 +1400,12 @@
 
 bool wxAuiToolBar::GetToolFits(int tool_id) const
 {
-    return GetToolFitsByIndex(GetToolIndex(tool_id));
+    return GetToolFitsByIndex(GetToolPos(tool_id));
 }
 
 wxRect wxAuiToolBar::GetToolRect(int tool_id) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem* tool = wxDynamicCast(FindById(tool_id),wxAuiToolBarItem);
     if (tool && tool->m_sizerItem)
     {
         return tool->m_sizerItem->GetRect();
@@ -1790,14 +1416,14 @@
 
 bool wxAuiToolBar::GetToolBarFits() const
 {
-    if (m_items.GetCount() == 0)
+    if (m_tools.GetCount() == 0)
     {
         // empty toolbar always 'fits'
         return true;
     }
 
     // entire toolbar content fits if the last tool fits
-    return GetToolFitsByIndex(m_items.GetCount() - 1);
+    return GetToolFitsByIndex(m_tools.GetCount() - 1);
 }
 
 bool wxAuiToolBar::Realize()
@@ -1868,37 +1494,36 @@
     }
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
         wxSizerItem* m_sizerItem = NULL;
+        wxSize size,min_size;
+        wxBoxSizer* vert_sizer = NULL;
 
-        switch (item.m_kind)
+        switch (item->m_kind)
         {
             case wxITEM_LABEL:
-            {
-                wxSize size = m_art->GetLabelSize(dc, this, item);
+                size = m_art->GetLabelSize(dc, this, *item);
                 m_sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
                                         size.y + (m_toolBorderPadding*2),
-                                        item.m_proportion,
-                                        item.m_alignment);
+                                        item->m_proportion,
+                                        item->m_alignment);
                 if (i+1 < count)
                 {
                     sizer->AddSpacer(m_toolPacking);
                 }
 
                 break;
-            }
-
             case wxITEM_CHECK:
             case wxITEM_NORMAL:
             case wxITEM_RADIO:
             {
-                wxSize size = m_art->GetToolSize(dc, this, item);
+                size = m_art->GetToolSize(dc, this, *item);
                 m_sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
                                         size.y + (m_toolBorderPadding*2),
                                         0,
-                                        item.m_alignment);
+                                        item->m_alignment);
                 // add tool packing
                 if (i+1 < count)
                 {
@@ -1925,10 +1550,10 @@
             }
 
             case wxITEM_SPACER:
-                if (item.m_proportion > 0)
-                    m_sizerItem = sizer->AddStretchSpacer(item.m_proportion);
+                if (item->m_proportion > 0)
+                    m_sizerItem = sizer->AddStretchSpacer(item->m_proportion);
                 else
-                    m_sizerItem = sizer->Add(item.m_spacerPixels, 1);
+                    m_sizerItem = sizer->Add(item->m_spacerPixels, 1);
                 break;
 
             case wxITEM_CONTROL:
@@ -1936,27 +1561,27 @@
                 //m_sizerItem = sizer->Add(item.m_window, item.m_proportion, wxEXPAND);
                 wxSizerItem* ctrl_m_sizerItem;
 
-                wxBoxSizer* vert_sizer = new wxBoxSizer(wxVERTICAL);
+                vert_sizer = new wxBoxSizer(wxVERTICAL);
                 vert_sizer->AddStretchSpacer(1);
-                ctrl_m_sizerItem = vert_sizer->Add(item.m_window, 0, wxEXPAND);
+                ctrl_m_sizerItem = vert_sizer->Add(item->m_window, 0, wxEXPAND);
                 vert_sizer->AddStretchSpacer(1);
                 if ( (m_style & wxAUI_TB_TEXT) &&
                      m_toolTextOrientation == wxAUI_TBTOOL_TEXT_BOTTOM &&
-                     !item.GetLabel().empty() )
+                     !item->GetLabel().empty() )
                 {
-                    wxSize s = GetLabelSize(item.GetLabel());
+                    wxSize s = GetLabelSize(item->GetLabel());
                     vert_sizer->Add(1, s.y);
                 }
 
 
-                m_sizerItem = sizer->Add(vert_sizer, item.m_proportion, wxEXPAND);
+                m_sizerItem = sizer->Add(vert_sizer, item->m_proportion, wxEXPAND);
 
-                wxSize min_size = item.m_minSize;
+                min_size = item->m_minSize;
 
 
                 // proportional items will disappear from the toolbar if
                 // their min width is not set to something really small
-                if (item.m_proportion != 0)
+                if (item->m_proportion != 0)
                 {
                     min_size.x = 1;
                 }
@@ -1972,10 +1597,13 @@
                 {
                     sizer->AddSpacer(m_toolPacking);
                 }
+                break;
+            default:
+            	break;
             }
         }
 
-        item.m_sizerItem = m_sizerItem;
+        item->m_sizerItem = m_sizerItem;
     }
 
     // add "right" padding
@@ -2035,21 +1663,21 @@
     m_sizer = outside_sizer;
 
     // calculate the rock-bottom minimum size
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_sizerItem && item.m_proportion > 0 && item.m_minSize.IsFullySpecified())
-            item.m_sizerItem->SetMinSize(0,0);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+        if (item->m_sizerItem && item->m_proportion > 0 && item->m_minSize.IsFullySpecified())
+            item->m_sizerItem->SetMinSize(0,0);
     }
 
     m_absoluteMinSize = m_sizer->GetMinSize();
 
     // reset the min sizes to what they were
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.m_sizerItem && item.m_proportion > 0 && item.m_minSize.IsFullySpecified())
-            item.m_sizerItem->SetMinSize(item.m_minSize);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+        if (item->m_sizerItem && item->m_proportion > 0 && item->m_minSize.IsFullySpecified())
+            item->m_sizerItem->SetMinSize(item->m_minSize);
     }
 
     // set control size
@@ -2134,14 +1762,14 @@
     bool need_refresh = false;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for (i = 0, count = m_tools.GetCount(); i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
 
-        if (item.m_toolId == -1)
+        if (item->m_id == -1)
             continue;
 
-        wxUpdateUIEvent evt(item.m_toolId);
+        wxUpdateUIEvent evt(item->m_id);
         evt.SetEventObject(this);
 
         if (handler->ProcessEvent(evt))
@@ -2149,24 +1777,21 @@
             if (evt.GetSetEnabled())
             {
                 bool is_enabled;
-                if (item.m_window)
-                    is_enabled = item.m_window->IsThisEnabled();
+                if (item->m_window)
+                    is_enabled = item->m_window->IsThisEnabled();
                 else
-                    is_enabled = (item.m_state & wxAUI_BUTTON_STATE_DISABLED) ? false : true;
+                    is_enabled = item->IsEnabled();
 
                 bool new_enabled = evt.GetEnabled();
                 if (new_enabled != is_enabled)
                 {
-                    if (item.m_window)
+                    if (item->m_window)
                     {
-                        item.m_window->Enable(new_enabled);
+                        item->m_window->Enable(new_enabled);
                     }
                     else
                     {
-                        if (new_enabled)
-                            item.m_state &= ~wxAUI_BUTTON_STATE_DISABLED;
-                        else
-                            item.m_state |= wxAUI_BUTTON_STATE_DISABLED;
+                    	item->Enable(new_enabled);
                     }
                     need_refresh = true;
                 }
@@ -2175,18 +1800,15 @@
             if (evt.GetSetChecked())
             {
                 // make sure we aren't checking an item that can't be
-                if (item.m_kind != wxITEM_CHECK && item.m_kind != wxITEM_RADIO)
+                if (item->m_kind != wxITEM_CHECK && item->m_kind != wxITEM_RADIO)
                     continue;
 
-                bool is_checked = (item.m_state & wxAUI_BUTTON_STATE_CHECKED) ? true : false;
+                bool is_checked = item->IsToggled();
                 bool new_checked = evt.GetChecked();
 
                 if (new_checked != is_checked)
                 {
-                    if (new_checked)
-                        item.m_state |= wxAUI_BUTTON_STATE_CHECKED;
-                    else
-                        item.m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
+                    item->Toggle();
 
                     need_refresh = true;
                 }
@@ -2213,13 +1835,13 @@
     {
         // hide all flexible items
         size_t i, count;
-        for (i = 0, count = m_items.GetCount(); i < count; ++i)
+        for (i = 0, count = m_tools.GetCount(); i < count; ++i)
         {
-            wxAuiToolBarItem& item = m_items.Item(i);
-            if (item.m_sizerItem && item.m_proportion > 0 && item.m_sizerItem->IsShown())
+            wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+            if (item->m_sizerItem && item->m_proportion > 0 && item->m_sizerItem->IsShown())
             {
-                item.m_sizerItem->Show(false);
-                item.m_sizerItem->SetProportion(0);
+                item->m_sizerItem->Show(false);
+                item->m_sizerItem->SetProportion(0);
             }
         }
     }
@@ -2227,13 +1849,13 @@
     {
         // show all flexible items
         size_t i, count;
-        for (i = 0, count = m_items.GetCount(); i < count; ++i)
+        for (i = 0, count = m_tools.GetCount(); i < count; ++i)
         {
-            wxAuiToolBarItem& item = m_items.Item(i);
-            if (item.m_sizerItem && item.m_proportion > 0 && !item.m_sizerItem->IsShown())
+            wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
+            if (item->m_sizerItem && item->m_proportion > 0 && !item->m_sizerItem->IsShown())
             {
-                item.m_sizerItem->Show(true);
-                item.m_sizerItem->SetProportion(item.m_proportion);
+                item->m_sizerItem->Show(true);
+                item->m_sizerItem->SetProportion(item->m_proportion);
             }
         }
     }
@@ -2386,15 +2008,15 @@
         last_extent -= dropdown_size;
 
     // paint each individual tool
-    size_t i, count = m_items.GetCount();
+    size_t i, count = m_tools.GetCount();
     for (i = 0; i < count; ++i)
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem *item = wxDynamicCast(GetToolByPos(i),wxAuiToolBarItem);
 
-        if (!item.m_sizerItem)
+        if (!item->m_sizerItem)
             continue;
 
-        wxRect item_rect = item.m_sizerItem->GetRect();
+        wxRect item_rect = item->m_sizerItem->GetRect();
 
 
         if ((horizontal  && item_rect.x + item_rect.width >= last_extent) ||
@@ -2402,46 +2024,37 @@
         {
             break;
         }
-
-        if (item.m_kind == wxITEM_SEPARATOR)
-        {
+        switch(item->m_kind){
+        case wxITEM_SEPARATOR:
             // draw a separator
             m_art->DrawSeparator(dc, this, item_rect);
-        }
-        else if (item.m_kind == wxITEM_LABEL)
-        {
+            break;
+        case wxITEM_LABEL:
             // draw a text label only
-            m_art->DrawLabel(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_NORMAL)
-        {
-            // draw a regular button or dropdown button
-            if (!item.m_dropDown)
-                m_art->DrawButton(dc, this, item, item_rect);
+            m_art->DrawLabel(dc, this, *item, item_rect);
+            break;
+        case wxITEM_NORMAL:
+        case wxITEM_CHECK:
+            // draw a regular button or dropdown button or toogle button
+            if (!item->m_dropDown)
+                m_art->DrawButton(dc, this, *item, item_rect);
             else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_CHECK)
-        {
-            // draw either a regular or dropdown toggle button
-            if (!item.m_dropDown)
-                m_art->DrawButton(dc, this, item, item_rect);
-            else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_RADIO)
-        {
+                m_art->DrawDropDownButton(dc, this, *item, item_rect);
+            break;
+        case wxITEM_RADIO:
             // draw a toggle button
-            m_art->DrawButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_CONTROL)
-        {
+            m_art->DrawButton(dc, this, *item, item_rect);
+            break;
+        case wxITEM_CONTROL:
             // draw the control's label
-            m_art->DrawControlLabel(dc, this, item, item_rect);
+            m_art->DrawControlLabel(dc, this, *item, item_rect);
+            break;
+        default:
+        	break;
         }
 
         // fire a signal to see if the item wants to be custom-rendered
-        OnCustomRender(dc, item, item_rect);
+        OnCustomRender(dc, *item, item_rect);
     }
 
     // paint the overflow button
@@ -2501,26 +2114,26 @@
             else
             {
                 size_t i, count;
-                wxAuiToolBarItemArray overflow_items;
+                wxToolBarToolsList overflow_items;
 
 
                 // add custom overflow prepend items, if any
                 count = m_customOverflowPrepend.GetCount();
                 for (i = 0; i < count; ++i)
-                    overflow_items.Add(m_customOverflowPrepend[i]);
+                    overflow_items.Append(&m_customOverflowPrepend[i]);
 
                 // only show items that don't fit in the dropdown
-                count = m_items.GetCount();
+                count = m_tools.GetCount();
                 for (i = 0; i < count; ++i)
                 {
                     if (!GetToolFitsByIndex(i))
-                        overflow_items.Add(m_items[i]);
+                        overflow_items.Append(m_tools[i]);
                 }
 
                 // add custom overflow append items, if any
                 count = m_customOverflowAppend.GetCount();
                 for (i = 0; i < count; ++i)
-                    overflow_items.Add(m_customOverflowAppend[i]);
+                    overflow_items.Append(&m_customOverflowAppend[i]);
 
                 int res = m_art->ShowDropDown(this, overflow_items);
                 m_overflowState = 0;
@@ -2539,11 +2152,11 @@
 
     m_dragging = false;
     m_actionPos = wxPoint(evt.GetX(), evt.GetY());
-    m_actionItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
 
     if (m_actionItem)
     {
-        if (m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED)
+        if (!m_actionItem->IsEnabled())
         {
             m_actionPos = wxPoint(-1,-1);
             m_actionItem = NULL;
@@ -2553,9 +2166,9 @@
         UnsetToolTip();
 
         // fire the tool dropdown event
-        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, m_actionItem->m_toolId);
+        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, m_actionItem->m_id);
         e.SetEventObject(this);
-        e.SetToolId(m_actionItem->m_toolId);
+        e.SetToolId(m_actionItem->m_id);
 
         int mouse_x = evt.GetX();
         wxRect rect = m_actionItem->m_sizerItem->GetRect();
@@ -2591,8 +2204,8 @@
 
     SetPressedItem(NULL);
 
-    wxAuiToolBarItem* hitItem = FindToolByPosition(evt.GetX(), evt.GetY());
-    if (hitItem && !(hitItem->m_state & wxAUI_BUTTON_STATE_DISABLED))
+    wxAuiToolBarItem* hitItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
+    if (hitItem && (hitItem->IsEnabled()))
     {
         SetHoverItem(hitItem);
     }
@@ -2613,14 +2226,14 @@
         {
             UnsetToolTip();
 
-            wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_actionItem->m_toolId);
+            wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_actionItem->m_id);
             e.SetEventObject(this);
 
             if (hitItem->m_kind == wxITEM_CHECK || hitItem->m_kind == wxITEM_RADIO)
             {
-                const bool toggle = !(m_actionItem->m_state & wxAUI_BUTTON_STATE_CHECKED);
+                const bool toggle = !(m_actionItem->IsToggled());
 
-                ToggleTool(m_actionItem->m_toolId, toggle);
+                ToggleTool(m_actionItem->m_id, toggle);
 
                 // repaint immediately
                 Refresh(false);
@@ -2667,9 +2280,9 @@
     }
 
     m_actionPos = wxPoint(evt.GetX(), evt.GetY());
-    m_actionItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
 
-    if (m_actionItem && m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED)
+    if (m_actionItem && !m_actionItem->IsEnabled())
     {
         m_actionPos = wxPoint(-1,-1);
         m_actionItem = NULL;
@@ -2682,13 +2295,13 @@
 void wxAuiToolBar::OnRightUp(wxMouseEvent& evt)
 {
     wxAuiToolBarItem* hitItem;
-    hitItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    hitItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
 
     if (m_actionItem && hitItem == m_actionItem)
     {
-        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, m_actionItem->m_toolId);
+        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, m_actionItem->m_id);
         e.SetEventObject(this);
-        e.SetToolId(m_actionItem->m_toolId);
+        e.SetToolId(m_actionItem->m_id);
         e.SetClickPoint(m_actionPos);
         GetEventHandler()->ProcessEvent(e);
         DoIdleUpdate();
@@ -2733,11 +2346,11 @@
     }
 
     m_actionPos = wxPoint(evt.GetX(), evt.GetY());
-    m_actionItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
 
     if (m_actionItem)
     {
-        if (m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED)
+        if (!m_actionItem->IsEnabled())
         {
             m_actionPos = wxPoint(-1,-1);
             m_actionItem = NULL;
@@ -2751,15 +2364,15 @@
 void wxAuiToolBar::OnMiddleUp(wxMouseEvent& evt)
 {
     wxAuiToolBarItem* hitItem;
-    hitItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    hitItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
 
     if (m_actionItem && hitItem == m_actionItem)
     {
         if (hitItem->m_kind == wxITEM_NORMAL)
         {
-            wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, m_actionItem->m_toolId);
+            wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, m_actionItem->m_id);
             e.SetEventObject(this);
-            e.SetToolId(m_actionItem->m_toolId);
+            e.SetToolId(m_actionItem->m_id);
             e.SetClickPoint(m_actionPos);
             GetEventHandler()->ProcessEvent(e);
             DoIdleUpdate();
@@ -2783,7 +2396,7 @@
         // event sent sometime in the future (see OnLeftUp())
         wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, GetId());
         e.SetEventObject(this);
-        e.SetToolId(m_actionItem->m_toolId);
+        e.SetToolId(m_actionItem->m_id);
         m_dragging = GetEventHandler()->ProcessEvent(e) && !e.GetSkipped();
 
         DoIdleUpdate();
@@ -2792,7 +2405,7 @@
     if(m_dragging)
         return;
 
-    wxAuiToolBarItem* hitItem = FindToolByPosition(evt.GetX(), evt.GetY());
+    wxAuiToolBarItem* hitItem = wxDynamicCast(FindToolForPosition(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
     if(button_pressed)
     {
         // if we have a button pressed we want it to be shown in 'depressed'
@@ -2808,22 +2421,22 @@
     }
     else
     {
-        if (hitItem && (hitItem->m_state & wxAUI_BUTTON_STATE_DISABLED))
+        if (hitItem && (!hitItem->IsEnabled()))
             SetHoverItem(NULL);
         else
             SetHoverItem(hitItem);
 
         // tooltips handling
         wxAuiToolBarItem* packingHitItem;
-        packingHitItem = FindToolByPositionWithPacking(evt.GetX(), evt.GetY());
+        packingHitItem = wxDynamicCast(FindToolByPositionWithPacking(evt.GetX(), evt.GetY()),wxAuiToolBarItem);
         if (packingHitItem)
         {
             if (packingHitItem != m_tipItem)
             {
                 m_tipItem = packingHitItem;
 
-                if ( !packingHitItem->m_shortHelp.empty() )
-                    SetToolTip(packingHitItem->m_shortHelp);
+                if ( !packingHitItem->GetShortHelp().empty() )
+                    SetToolTip(packingHitItem->GetShortHelp());
                 else
                     UnsetToolTip();
             }

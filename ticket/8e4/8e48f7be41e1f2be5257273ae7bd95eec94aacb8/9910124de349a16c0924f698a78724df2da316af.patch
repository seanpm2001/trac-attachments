--- wxWidgets.orig/docs/latex/wx/comboctrl.tex	Fri Jul 28 17:30:47 2006
+++ wxWidgets/docs/latex/wx/comboctrl.tex	Sat Sep 23 17:51:41 2006
@@ -239,4 +239,17 @@
 
 
+\membersection{wxComboCtrl::DoSetPopupControl}\label{wxcomboctrldosetpopupcontrol}
+
+\func{void}{DoSetPopupControl}{\param{wxComboPopup* }{popup}}
+
+This member function is not normally called in application code.
+Instead, it can be implemented in a derived class to return
+default wxComboPopup, incase {\tt popup} is NULL.
+
+\textbf{Note:} If you have implemented OnButtonClick to do
+something else than show the popup, then DoSetPopupControl
+must always return NULL.
+
+
 \membersection{wxComboCtrl::GetBitmapDisabled}\label{wxcomboctrlgetbitmapdisabled}
 
@@ -384,4 +397,12 @@
 
 
+\membersection{wxComboCtrl::GetTextRect}\label{wxcomboctrlgettextrect}
+
+\constfunc{const wxRect\&}{GetTextRect}{\void}
+
+Returns area covered by the text field (includes everything except
+borders and the dropdown button).
+
+
 \membersection{wxComboCtrl::GetValue}\label{wxcomboctrlgetvalue}
 
@@ -415,4 +436,9 @@
 Default action is to show the popup.
 
+\textbf{Note:} If you implement this to do something else than
+show the popup, you must then also implement
+\helpref{DoSetPopupControl}{wxcomboctrldosetpopupcontrol} to always
+return NULL.
+
 
 \membersection{wxComboCtrl::Paste}\label{wxcomboctrlpaste}
@@ -616,4 +642,12 @@
 string must be accepted by the popup (for instance, exist in the dropdown
 list), otherwise the call to SetValue() is ignored
+
+
+\membersection{wxComboCtrl::SetValueWithEvent}\label{wxcomboctrlsetvaluewithevent}
+
+\func{void}{SetValueWithEvent}{\param{const wxString\& }{value}, \param{bool }{withEvent = true}}
+
+Same as SetValue, but also sends wxCommandEvent of type wxEVT\_COMMAND\_TEXT\_UPDATED
+if {\tt withEvent} is \true.
 
 
--- wxWidgets.orig/docs/latex/wx/odcbox.tex	Wed Jun 14 22:15:29 2006
+++ wxWidgets/docs/latex/wx/odcbox.tex	Sat Sep 23 18:06:53 2006
@@ -141,4 +141,18 @@
 
 
+\membersection{wxOwnerDrawnComboBox::GetWidestItem}\label{wxownerdrawncomboboxgetwidestitem}
+
+\constfunc{int}{GetWidestItem}{\void}
+
+Returns index to the widest item in the list.
+
+
+\membersection{wxOwnerDrawnComboBox::GetWidestItemWidth}\label{wxownerdrawncomboboxgetwidestitemwidth}
+
+\constfunc{int}{GetWidestItemWidth}{\void}
+
+Returns width of the widest item in the list.
+
+
 \membersection{wxOwnerDrawnComboBox::OnDrawBackground}\label{wxownerdrawncomboboxondrawbackground}
 
@@ -180,4 +194,6 @@
 painted, instead of a list item. Argument item may be wxNOT\_FOUND in this
 case.}
+\twocolitem{{\tt wxODCB\_PAINTING\_SELECTED}}{An item with selection
+background is being painted. DC text colour should already be correct.}
 \end{twocollist}
 

 	  	 

diff --git a/tests/filename/filenametest.cpp b/tests/filename/filenametest.cpp
index 638434b..44a15b0 100644
--- a/tests/filename/filenametest.cpp
+++ b/tests/filename/filenametest.cpp
@@ -141,6 +141,9 @@ private:
         CPPUNIT_TEST( TestGetTimes );
         CPPUNIT_TEST( TestExists );
         CPPUNIT_TEST( TestIsSame );
+#if defined(__UNIX__)
+        CPPUNIT_TEST( TestSymlinks );
+#endif // __UNIX__
     CPPUNIT_TEST_SUITE_END();
 
     void TestConstruction();
@@ -160,6 +163,9 @@ private:
     void TestGetTimes();
     void TestExists();
     void TestIsSame();
+#if defined(__UNIX__)
+    void TestSymlinks();
+#endif // __UNIX__
 
     DECLARE_NO_COPY_CLASS(FileNameTestCase)
 };
@@ -727,3 +733,88 @@ void FileNameTestCase::TestIsSame()
     CPPUNIT_ASSERT( fn3.SameAs(fn4) );
 #endif // __UNIX__
 }
+
+#if defined(__UNIX__)
+    // Tests for functions that are changed by ShouldFollowLink()
+void FileNameTestCase::TestSymlinks()
+{
+    wxFileName homefn(wxFileName::DirName(wxFileName::GetHomeDir()));
+
+    wxDateTime dtAccessHome, dtModHome, dtCreateHome;
+    CPPUNIT_ASSERT(homefn.GetTimes(&dtAccessHome, &dtModHome, &dtCreateHome));
+
+    // Create a temporary directory
+    const wxString name = wxStandardPaths::Get().GetTempDir() +
+                          wxFileName::GetPathSeparator() + "filenametestXXXXXX";
+    wxString tempdir = wxString::From8BitData(mkdtemp(name.char_str()));
+    tempdir << wxFileName::GetPathSeparator();
+    wxFileName tempdirfn(wxFileName::DirName(tempdir));
+    CPPUNIT_ASSERT(tempdirfn.DirExists());
+
+    // Create a regular file in that dir, to act as a symlink target
+    wxFileName targetfn(wxFileName::CreateTempFileName(tempdir));
+    CPPUNIT_ASSERT(targetfn.FileExists());
+
+    // Create a symlink to that file, and another to the home dir
+    wxFileName linktofile(tempdir, "linktofile");
+    CPPUNIT_ASSERT_EQUAL(0, symlink(targetfn.GetFullPath().c_str(),
+                                        linktofile.GetFullPath().c_str()));
+    
+    wxFileName linktodir(tempdir, "linktodir");
+    CPPUNIT_ASSERT_EQUAL(0, symlink(homefn.GetFullPath().c_str(),
+                                        linktodir.GetFullPath().c_str()));
+
+    // and symlinks to both of those symlinks
+    linktofile.DontFollowLink(true);
+    wxFileName linktofilelnk(tempdir, "linktofilelnk");
+    CPPUNIT_ASSERT_EQUAL(0, symlink(linktofile.GetFullPath().c_str(),
+                                    linktofilelnk.GetFullPath().c_str()));
+    linktodir.DontFollowLink(true);
+    wxFileName linktodirlnk(tempdir, "linktodirlnk");
+    CPPUNIT_ASSERT_EQUAL(0, symlink(linktodir.GetFullPath().c_str(),
+                                    linktodirlnk.GetFullPath().c_str()));
+
+    bool deref = false;
+    for (int n=0; n < 2; ++n, deref = !deref)
+    {
+        std::string msg = wxString::Format(
+                "failed on deref = %s", deref ? "true":"false").ToStdString();
+
+        linktofile.DontFollowLink(!deref);
+        linktodir.DontFollowLink(!deref);
+        linktofilelnk.DontFollowLink(!deref);
+        linktodirlnk.DontFollowLink(!deref);
+
+        // Test SameAs()
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, linktofile.SameAs(targetfn));
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, linktodir.SameAs(homefn));
+        // A link-to-a-link should dereference through to the final target
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref,linktofilelnk.SameAs(targetfn));
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, linktodirlnk.SameAs(homefn));
+        
+        // Test GetTimes()
+        wxDateTime dtAccess, dtMod, dtCreate;
+        CPPUNIT_ASSERT_MESSAGE(msg,
+                            linktodir.GetTimes(&dtAccess, &dtMod, &dtCreate));
+        // IsEqualTo() should be true only when dereferencing. Don't test each
+        // individually: accessing to create the link will have updated some
+        bool equal = dtCreate.IsEqualTo(dtCreateHome) && 
+                dtMod.IsEqualTo(dtModHome) && dtAccess.IsEqualTo(dtAccessHome);
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, equal);
+
+        // Test Exists()
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, linktofile.FileExists());
+        CPPUNIT_ASSERT_EQUAL_MESSAGE(msg, deref, linktodir.DirExists());
+    }
+    
+    // Finally test Exists() when it doesn't
+    CPPUNIT_ASSERT(wxRemoveFile(targetfn.GetFullPath()));
+    CPPUNIT_ASSERT(linktofile.Exists() == false);
+    CPPUNIT_ASSERT(linktofilelnk.Exists() == false);
+    linktofile.DontFollowLink(true);
+    CPPUNIT_ASSERT(linktofile.Exists());
+
+    //Clean-up, and also tests removal of a dir containing a symlink-to-dir
+    CPPUNIT_ASSERT(tempdirfn.Rmdir(wxPATH_RMDIR_RECURSIVE));
+}
+#endif // __UNIX__

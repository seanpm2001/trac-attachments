--- wxWidgets-2.8.7/include/wx/msw/dialog.h.orig.bak	2007-11-21 14:42:48.000000000 +0200
+++ wxWidgets-2.8.7/include/wx/msw/dialog.h	2008-03-09 22:06:59.718750000 +0200
@@ -85,6 +85,9 @@
 
     virtual void Raise();
 
+    virtual void SetWindowStyleFlag( long style );
+
+
 #ifdef __POCKETPC__
     // Responds to the OK button in a PocketPC titlebar. This
     // can be overridden, or you can change the id used for
@@ -121,6 +124,9 @@
     // common part of all ctors
     void Init();
 
+    void CreateGripper();
+    void DestroyGripper();
+
 private:
     wxWindow*   m_oldFocus;
     bool        m_endModalCalled; // allow for closing within InitDialog
@@ -132,6 +138,8 @@
     // this pointer is non-NULL only while the modal event loop is running
     wxDialogModalData *m_modalData;
 
+    HWND m_hGripper;
+
     DECLARE_DYNAMIC_CLASS(wxDialog)
     DECLARE_NO_COPY_CLASS(wxDialog)
 };
--- wxWidgets-2.8.7/src/msw/dialog.cpp.orig.bak	2007-11-21 14:42:46.000000000 +0200
+++ wxWidgets-2.8.7/src/msw/dialog.cpp	2008-03-09 22:07:30.812500000 +0200
@@ -152,6 +152,7 @@
 #if wxUSE_TOOLBAR && defined(__POCKETPC__)
     m_dialogToolBar = NULL;
 #endif
+    m_hGripper = 0;
 }
 
 bool wxDialog::Create(wxWindow *parent,
@@ -183,6 +184,9 @@
     CreateToolBar();
 #endif
 
+    if(HasFlag(wxRESIZE_BORDER))
+        CreateGripper();
+
     return true;
 }
 
@@ -217,6 +221,8 @@
 
     // this will also reenable all the other windows for a modal dialog
     Show(false);
+
+    DestroyGripper();
 }
 
 // ----------------------------------------------------------------------------
@@ -366,6 +372,40 @@
     Hide();
 }
 
+void wxDialog::SetWindowStyleFlag( long style )
+{
+    wxDialogBase::SetWindowStyleFlag(style);
+
+    if(HasFlag(wxRESIZE_BORDER))
+        CreateGripper();
+    else
+        DestroyGripper();
+}
+
+void wxDialog::CreateGripper()
+{
+    m_hGripper = ::CreateWindowEx(
+        0,
+        wxT("SCROLLBAR"),
+        wxEmptyString,
+        WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | SBS_SIZEGRIP | SBS_SIZEBOX | SBS_SIZEBOXBOTTOMRIGHTALIGN,
+        0, 0, 0, 0,
+        GetHwnd(),
+        (HMENU) 0,
+        wxGetInstance(),
+        NULL
+        );
+}
+
+void wxDialog::DestroyGripper()
+{
+    if(m_hGripper)
+    {
+        ::DestroyWindow(m_hGripper);
+        m_hGripper = 0;
+    }
+}
+
 // ----------------------------------------------------------------------------
 // wxWin event handlers
 // ----------------------------------------------------------------------------
@@ -447,6 +487,26 @@
             break;
 
         case WM_SIZE:
+            if(m_hGripper != 0)
+            {
+                switch(wParam)
+                {
+                    case SIZE_MAXIMIZED:
+                    ::ShowWindow(m_hGripper, SW_HIDE);
+                    break;
+                    case SIZE_RESTORED:
+                    ::ShowWindow(m_hGripper, SW_SHOW);
+                    break;
+                }
+
+                const wxRect rectGripper = wxRectFromRECT(wxGetWindowRect(m_hGripper));
+                const wxSize size = GetClientSize() - rectGripper.GetSize();
+
+                ::SetWindowPos(m_hGripper, HWND_BOTTOM,
+                    size.x, size.y,
+                    rectGripper.width, rectGripper.height,
+                    SWP_NOACTIVATE);
+            }
             // the Windows dialogs unfortunately are not meant to be resizeable
             // at all and their standard class doesn't include CS_[VH]REDRAW
             // styles which means that the window is not refreshed properly

 	  	 

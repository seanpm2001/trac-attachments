Index: include/wx/msw/webview_ie.h
===================================================================
--- include/wx/msw/webview_ie.h	(revision 69786)
+++ include/wx/msw/webview_ie.h	(working copy)
@@ -274,7 +274,7 @@
      *  Busy property is false but should be true.
      */
     bool m_isBusy;
-    //We manage our own history, the history list contains the history items 
+    //We manage our own history, the history list contains the history items
     //which are added as documentcomplete events arrive, unless we are loading
     //an item from the history. The position is stored as an int, and reflects
     //where we are in the history list.
@@ -313,27 +313,27 @@
     ULONG STDMETHODCALLTYPE Release();
 
     //IInternetProtocolRoot
-    HRESULT STDMETHODCALLTYPE Abort(HRESULT WXUNUSED(hrReason), 
+    HRESULT STDMETHODCALLTYPE Abort(HRESULT WXUNUSED(hrReason),
                                     DWORD WXUNUSED(dwOptions))
                                    { return E_NOTIMPL; }
     HRESULT STDMETHODCALLTYPE Continue(wxPROTOCOLDATA *WXUNUSED(pProtocolData))
                                        { return S_OK; }
     HRESULT STDMETHODCALLTYPE Resume() { return S_OK; }
-    HRESULT STDMETHODCALLTYPE Start(LPCWSTR szUrl, 
+    HRESULT STDMETHODCALLTYPE Start(LPCWSTR szUrl,
                                     wxIInternetProtocolSink *pOIProtSink,
                                     wxIInternetBindInfo *pOIBindInfo,
-                                    DWORD grfPI, 
+                                    DWORD grfPI,
                                     HANDLE_PTR dwReserved);
     HRESULT STDMETHODCALLTYPE Suspend() { return S_OK; }
     HRESULT STDMETHODCALLTYPE Terminate(DWORD WXUNUSED(dwOptions)) { return S_OK; }
 
     //IInternetProtocol
-    HRESULT STDMETHODCALLTYPE LockRequest(DWORD WXUNUSED(dwOptions)) 
+    HRESULT STDMETHODCALLTYPE LockRequest(DWORD WXUNUSED(dwOptions))
                                           { return S_OK; }
     HRESULT STDMETHODCALLTYPE Read(void *pv, ULONG cb, ULONG *pcbRead);
-    HRESULT STDMETHODCALLTYPE Seek(LARGE_INTEGER WXUNUSED(dlibMove), 
-                                   DWORD WXUNUSED(dwOrigin), 
-                                   ULARGE_INTEGER* WXUNUSED(plibNewPosition)) 
+    HRESULT STDMETHODCALLTYPE Seek(LARGE_INTEGER WXUNUSED(dlibMove),
+                                   DWORD WXUNUSED(dwOrigin),
+                                   ULARGE_INTEGER* WXUNUSED(plibNewPosition))
                                    { return E_FAIL; }
     HRESULT STDMETHODCALLTYPE UnlockRequest() { return S_OK; }
 };
@@ -348,7 +348,7 @@
     ULONG STDMETHODCALLTYPE Release();
 
     //IClassFactory
-    HRESULT STDMETHODCALLTYPE CreateInstance(IUnknown* pUnkOuter, 
+    HRESULT STDMETHODCALLTYPE CreateInstance(IUnknown* pUnkOuter,
                                              REFIID riid, void** ppvObject);
     HRESULT STDMETHODCALLTYPE LockServer(BOOL fLock);
 private:
Index: src/msw/webview_ie.cpp
===================================================================
--- src/msw/webview_ie.cpp	(revision 69786)
+++ src/msw/webview_ie.cpp	(working copy)
@@ -472,7 +472,7 @@
 }
 
 bool wxWebViewIE::IsBusy() const
-{ 
+{
     if (m_isBusy) return true;
 
     wxVariant out = m_ie.GetProperty("Busy");
@@ -834,12 +834,12 @@
 
             //As we are complete we also add to the history list, but not if the
             //page is not the main page, ie it is a subframe
-            //We also have to check if we are loading a file:// url, if so we 
+            //We also have to check if we are loading a file:// url, if so we
             //need to change the comparison as ie passes back a different style
             //of url
-            if(m_historyEnabled && !m_historyLoadingFromList && 
-              (url == GetCurrentURL() || 
-              (GetCurrentURL().substr(0, 4) == "file" && 
+            if(m_historyEnabled && !m_historyLoadingFromList &&
+              (url == GetCurrentURL() ||
+              (GetCurrentURL().substr(0, 4) == "file" &&
                wxFileSystem::URLToFileName(GetCurrentURL()).GetFullPath() == url)))
             {
                 //If we are not at the end of the list, then erase everything
@@ -1081,7 +1081,7 @@
     wxUnusedVar(grfPI);
     wxUnusedVar(dwReserved);
     m_protocolSink = pOIProtSink;
-    
+
     //We get the file itself from the protocol handler
     m_file = m_handler->GetFile(szUrl);
 
@@ -1096,13 +1096,13 @@
                                wxBSCF_DATAFULLYAVAILABLE |
                                wxBSCF_LASTDATANOTIFICATION,
                                length, length);
-    return S_OK; 
+    return S_OK;
 }
 
 HRESULT VirtualProtocol::Read(void *pv, ULONG cb, ULONG *pcbRead)
 {
     //If the file is null we return false to indicte it is finished
-    if(!m_file) 
+    if(!m_file)
         return S_FALSE;
 
     wxStreamError err = m_file->GetStream()->Read(pv, cb).GetLastError();
@@ -1141,7 +1141,7 @@
 HRESULT ClassFactory::CreateInstance(IUnknown* pUnkOuter, REFIID riid,
                                      void ** ppvObject)
 {
-    if (pUnkOuter) 
+    if (pUnkOuter)
         return CLASS_E_NOAGGREGATION;
     VirtualProtocol* vp = new VirtualProtocol(m_handler);
     vp->AddRef();
@@ -1149,7 +1149,7 @@
     vp->Release();
     return hr;
 
-} 
+}
 
 STDMETHODIMP ClassFactory::LockServer(BOOL fLock)
 {
@@ -1192,6 +1192,6 @@
         return 0;
     }
 
-} 
+}
 
 #endif // wxUSE_WEBVIEW && wxUSE_WEBVIEW_IE

Index: include/wx/brush.h
===================================================================
--- include/wx/brush.h	(revision 65792)
+++ include/wx/brush.h	(working copy)
@@ -106,6 +106,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// bcc551 free compiler has ambiguity issues when
+// enum comparisons are overloaded
+#if !defined(__BORLANDC__) || (__BORLANDC__ > 0x551)
+
 inline bool operator==(wxBrushStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -116,6 +120,8 @@
     return !(s == t);
 }
 
+#endif // defined(__BORLANDC__) && (__BORLANDC__ == 0x551)
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_BRUSH_H_BASE_
Index: include/wx/chartype.h
===================================================================
--- include/wx/chartype.h	(revision 65792)
+++ include/wx/chartype.h	(working copy)
@@ -239,7 +239,7 @@
         #define wxT(x) x
     #else /* Unicode */
         /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
-        #define wxT(x) wxCONCAT_HELPER(L, x)
+        #define wxT(x) wxCONCAT_L(x)
     #endif /* ASCII/Unicode */
 #endif /* !defined(wxT) */
 
@@ -250,7 +250,7 @@
    builds everywhere (see wxStringCharType definition above).
  */
 #if wxUSE_UNICODE_WCHAR
-    #define wxS(x) wxCONCAT_HELPER(L, x)
+    #define wxS(x) wxCONCAT_L(x)
 #else /* wxUSE_UNICODE_UTF8 || ANSI */
     #define wxS(x) x
 #endif
Index: include/wx/cpp.h
===================================================================
--- include/wx/cpp.h	(revision 65792)
+++ include/wx/cpp.h	(working copy)
@@ -14,6 +14,7 @@
 #define _WX_CPP_H_
 
 /* wxCONCAT works like preprocessor ## operator but also works with macros */
+#define wxCONCAT_L(line) L ## line
 #define wxCONCAT_HELPER(text, line) text ## line
 #define wxCONCAT(text, line)        wxCONCAT_HELPER(text, line)
 
Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 65792)
+++ include/wx/font.h	(working copy)
@@ -378,6 +378,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// bcc551 free compiler has ambiguity issues when
+// enum comparisons are overloaded
+#if !defined(__BORLANDC__) || (__BORLANDC__ > 0x551)
+
 inline bool operator==(wxFontFamily s, wxDeprecatedGUIConstants t)
 { return static_cast<int>(s) == static_cast<int>(t); }
 inline bool operator!=(wxFontFamily s, wxDeprecatedGUIConstants t)
@@ -391,6 +395,8 @@
 inline bool operator!=(wxFontWeight s, wxDeprecatedGUIConstants t)
 { return !(s == t); }
 
+#endif // defined(__BORLANDC__) && (__BORLANDC__ == 0x551)
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif
Index: include/wx/msw/setup0.h
===================================================================
--- include/wx/msw/setup0.h	(revision 65792)
+++ include/wx/msw/setup0.h	(working copy)
@@ -397,7 +397,7 @@
 //
 // Recommended setting: 1 but may be disabled if you are writing programs
 // running only in C locale anyhow
-#define wxUSE_XLOCALE       1
+#define wxUSE_XLOCALE       0
 
 // Set wxUSE_DATETIME to 1 to compile the wxDateTime and related classes which
 // allow to manipulate dates, times and time intervals. wxDateTime replaces the
Index: include/wx/pen.h
===================================================================
--- include/wx/pen.h	(revision 65792)
+++ include/wx/pen.h	(working copy)
@@ -135,6 +135,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// bcc551 free compiler has ambiguity issues when
+// enum comparisons are overloaded
+#if !defined(__BORLANDC__) && (__BORLANDC__ > 0x551)
+
 inline bool operator==(wxPenStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -145,6 +149,8 @@
     return !(s == t);
 }
 
+#endif // defined(__BORLANDC__) && (__BORLANDC__ == 0x551)
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_PEN_H_BASE_
Index: include/wx/propgrid/propgridiface.h
===================================================================
--- include/wx/propgrid/propgridiface.h	(revision 65792)
+++ include/wx/propgrid/propgridiface.h	(working copy)
@@ -1385,7 +1385,11 @@
     {
         if ( !m_pState )
             return NULL;
+    #if defined(__BORLANDC__) && (__BORLANDC__ == 0x551)
+        return (const wxPropertyGrid*)(m_pState->GetGrid());
+    #else
         return static_cast<const wxPropertyGrid*>(m_pState->GetGrid());
+    #endif        
     }
 
     friend class wxPropertyGrid;
Index: include/wx/rawbmp.h
===================================================================
--- include/wx/rawbmp.h	(revision 65792)
+++ include/wx/rawbmp.h	(working copy)
@@ -411,10 +411,10 @@
             // -----------
 
             // access to individual colour components
-            ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
-            ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
-            ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
-            ChannelType& Alpha() { return *m_pAlpha; }
+            PixelFormat::ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
+            PixelFormat::ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
+            PixelFormat::ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
+            PixelFormat::ChannelType& Alpha() { return *m_pAlpha; }
 
             // address the pixel contents directly (always RGB, without alpha)
             //
Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 65792)
+++ include/wx/vector.h	(working copy)
@@ -118,7 +118,10 @@
     // Note that we use typedef instead of privately deriving from this (which
     // would allowed us to omit "Ops::" prefixes below) to keep VC6 happy,
     // it can't compile code that derives from wxIf<...>::value.
-    typedef typename wxIf< wxIsMovable<T>::value,
+    //
+    // bcc551 needs the extra parentheses for non-type template arguments
+    // to compile.
+    typedef typename wxIf< (wxIsMovable<T>::value),
                            wxPrivate::wxVectorMemOpsMovable<T>,
                            wxPrivate::wxVectorMemOpsGeneric<T> >::value
             Ops;
@@ -451,8 +454,11 @@
 
 // This is a helper for the wxVectorSort function, and should not be used
 // directly in user's code.
+//
+// bcc551 can't compile with template struct and template function with
+// the same name even though they're in different namespace.
 template<typename T>
-struct wxVectorSort
+struct wxVectorSort_ftor
 {
     static int wxCMPFUNC_CONV
     Compare(const void* pitem1, const void* pitem2, const void* )
@@ -477,7 +483,7 @@
 void wxVectorSort(wxVector<T>& v)
 {
     wxQsort(v.begin(), v.size(), sizeof(T),
-            wxPrivate::wxVectorSort<T>::Compare, NULL);
+            wxPrivate::wxVectorSort_ftor<T>::Compare, NULL);
 }
 
 
Index: samples/config/conftest.cpp
===================================================================
--- samples/config/conftest.cpp	(revision 65792)
+++ samples/config/conftest.cpp	(working copy)
@@ -196,7 +196,7 @@
     // we could write Read("/Controls/Text") as well, it's just to show SetPath()
     pConfig->SetPath(wxT("/Controls"));
 
-    m_text->SetValue(pConfig->Read(wxT("Text"), wxT("")));
+    m_text->SetValue(pConfig->Read(wxT("Text"), wxString(wxT("")) ) );
     m_check->SetValue(pConfig->Read(wxT("Check"), 1l) != 0);
 
     // SetPath() understands ".."
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	(revision 65792)
+++ samples/dataview/dataview.cpp	(working copy)
@@ -530,7 +530,7 @@
     {
     case 0:
         {
-            wxASSERT(!m_ctrl[0] && !m_music_model);
+            wxASSERT(!m_ctrl[0] && !m_music_model.get());
             m_ctrl[0] =
                 new wxDataViewCtrl( parent, ID_MUSIC_CTRL, wxDefaultPosition,
                                     wxDefaultSize, style );
@@ -612,7 +612,7 @@
 
     case 1:
         {
-            wxASSERT(!m_ctrl[1] && !m_list_model);
+            wxASSERT(!m_ctrl[1] && !m_list_model.get());
             m_ctrl[1] = new wxDataViewCtrl( parent, ID_ATTR_CTRL, wxDefaultPosition,
                                             wxDefaultSize, style );
 
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 65792)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1333,8 +1333,8 @@
                     dialog.GetPath().c_str(),
                     dialog.GetDirectory().c_str(),
                     dialog.GetFilename().c_str(),
-                    extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
-                          : wxString("None"));
+                    (extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
+                          : wxString("None")) );
         wxMessageDialog dialog2(this, info, wxT("Selected file"));
         dialog2.ShowModal();
     }
Index: src/common/translation.cpp
===================================================================
--- src/common/translation.cpp	(revision 65792)
+++ src/common/translation.cpp	(working copy)
@@ -1500,8 +1500,8 @@
             TRACE_I18N,
             "string \"%s\"%s not found in %slocale '%s'.",
             origString,
-            n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString(),
-            !domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString(),
+            (n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString()),
+            (!domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString()),
             m_lang
         );
 
@@ -1790,7 +1790,7 @@
                              resname,
                              GetResourceType(),
                              GetModule()) )
-        return false;
+        return NULL;
 
     wxLogTrace(TRACE_I18N,
                "Using catalog from Windows resource \"%s\".", resname);

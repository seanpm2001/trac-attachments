Index: include/wx/meta/implicitconversion.h
===================================================================
--- include/wx/meta/implicitconversion.h	(revision 65929)
+++ include/wx/meta/implicitconversion.h	(working copy)
@@ -35,13 +35,13 @@
 {
     // consider unknown types (e.g. objects, pointers) to be of highest
     // level, always convert to them if they occur
-    enum { level = 9999 };
+    static const int level = 9999;
 };
 
 #define WX_TYPE_HIERARCHY_LEVEL(level_num, type)        \
     template<> struct TypeHierarchy<type>               \
     {                                                   \
-        enum { level = level_num };                     \
+        static const int level = level_num;             \
     };
 
 WX_TYPE_HIERARCHY_LEVEL( 1, char);
@@ -84,7 +84,7 @@
     typedef typename wxIf
             <
                 // if T2 is "higher" type, convert to it
-                (int)wxPrivate::TypeHierarchy<T1>::level < (int)wxPrivate::TypeHierarchy<T2>::level,
+                (int)(wxPrivate::TypeHierarchy<T1>::level) < (int)(wxPrivate::TypeHierarchy<T2>::level),
                 T2,
                 // otherwise use T1
                 T1
Index: include/wx/propgrid/propgridiface.h
===================================================================
--- include/wx/propgrid/propgridiface.h	(revision 65929)
+++ include/wx/propgrid/propgridiface.h	(working copy)
@@ -1385,7 +1385,10 @@
     {
         if ( !m_pState )
             return NULL;
-        return static_cast<const wxPropertyGrid*>(m_pState->GetGrid());
+
+        // NOTE: bcc551 has trouble doing static_cast with incomplete
+        //       type definition. const_cast used as workaround
+        return const_cast<const wxPropertyGrid*>(m_pState->GetGrid());
     }
 
     friend class wxPropertyGrid;
Index: include/wx/brush.h
===================================================================
--- include/wx/brush.h	(revision 65929)
+++ include/wx/brush.h	(working copy)
@@ -119,6 +119,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxBrushStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -129,6 +133,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_BRUSH_H_BASE_
Index: include/wx/platform.h
===================================================================
--- include/wx/platform.h	(revision 65929)
+++ include/wx/platform.h	(working copy)
@@ -331,17 +331,34 @@
    test for old versions of Borland C, normally need at least 5.82, Turbo
    explorer, available for free at http://www.turboexplorer.com/downloads
 */
-#if defined(__BORLANDC__) && (__BORLANDC__ < 0x550)
-#   error "wxWidgets requires a newer version of Borland, we recommend upgrading to 5.82 (Turbo Explorer). You may at your own risk remove this line and try building but be prepared to get build errors."
-#endif /* __BORLANDC__ */
 
-#if defined(__BORLANDC__) && (__BORLANDC__ < 0x582) && (__BORLANDC__ > 0x559)
-#   ifndef _USE_OLD_RW_STL
-#       error "wxWidgets is incompatible with default Borland C++ 5.6 STL library, please add -D_USE_OLD_RW_STL to your bcc32.cfg to use RogueWave STL implementation."
-#   endif
+
+/*
+    older versions of Borland C have some compiler bugs that need
+    workarounds. Mostly pertains to the free commandline compiler 5.5.1.
+*/
+#if defined(__BORLANDC__) && (__BORLANDC__ <= 0x551)
+    /*
+        The Borland free compiler is unable to handle overloaded enum
+        comparisons under certain conditions. eg. When any class has a
+        conversion ctor for an integral type and there's an overload to
+        compare between an integral type and that class type.
+    */
+#   define wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
+    /* overcome bugs in 5.5.1 STL */
+#   define _RWSTD_COMPILE_INSTANTIATE
+    /*
+        Preprocessor in older Borland compilers have major problems
+        concating with ##. Specifically, if the string operands being
+        concatenated have special meaning (e.g L"str", 123i64 etc)
+        then ## will not concatenate the operands correctly.
+        As a workaround, wxPREPEND* and wxAPPEND* are defined that doesn't
+        use wxCONCAT_HELPER.
+    */
+#   define wxCONCAT_WORKAROUND
 #endif /* __BORLANDC__ */
 
-
 /*
    Define Watcom-specific macros.
 */
Index: include/wx/pen.h
===================================================================
--- include/wx/pen.h	(revision 65929)
+++ include/wx/pen.h	(working copy)
@@ -148,6 +148,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxPenStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -158,6 +162,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_PEN_H_BASE_
Index: include/wx/cpp.h
===================================================================
--- include/wx/cpp.h	(revision 65929)
+++ include/wx/cpp.h	(working copy)
@@ -28,6 +28,12 @@
 /* a Unicode-friendly version of wxSTRINGIZE_T */
 #define wxSTRINGIZE_T(x)            wxAPPLY_T(wxSTRINGIZE(x))
 
+#ifdef wxCONCAT_WORKAROUND
+    #define wxPREPEND_L(x)      L ## x
+    #define wxAPPEND_i64(x)     x ## i64
+    #define wxAPPEND_ui64(x)    x ## ui64
+#endif /* wxCONCAT_WORKAROUND */
+
 /*
    Helper macros for wxMAKE_UNIQUE_NAME: normally this works by appending the
    current line number to the given identifier to reduce the probability of the
Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 65929)
+++ include/wx/font.h	(working copy)
@@ -378,6 +378,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxFontFamily s, wxDeprecatedGUIConstants t)
 { return static_cast<int>(s) == static_cast<int>(t); }
 inline bool operator!=(wxFontFamily s, wxDeprecatedGUIConstants t)
@@ -391,6 +395,8 @@
 inline bool operator!=(wxFontWeight s, wxDeprecatedGUIConstants t)
 { return !(s == t); }
 
+#endif // // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif
Index: include/wx/rawbmp.h
===================================================================
--- include/wx/rawbmp.h	(revision 65929)
+++ include/wx/rawbmp.h	(working copy)
@@ -411,10 +411,10 @@
             // -----------
 
             // access to individual colour components
-            ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
-            ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
-            ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
-            ChannelType& Alpha() { return *m_pAlpha; }
+            PixelFormat::ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
+            PixelFormat::ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
+            PixelFormat::ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
+            PixelFormat::ChannelType& Alpha() { return *m_pAlpha; }
 
             // address the pixel contents directly (always RGB, without alpha)
             //
Index: include/wx/chartype.h
===================================================================
--- include/wx/chartype.h	(revision 65929)
+++ include/wx/chartype.h	(working copy)
@@ -238,8 +238,12 @@
     #if !wxUSE_UNICODE
         #define wxT(x) x
     #else /* Unicode */
-        /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
-        #define wxT(x) wxCONCAT_HELPER(L, x)
+        #ifndef wxCONCAT_WORKAROUND
+            /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
+            #define wxT(x) wxCONCAT_HELPER(L, x)
+        #else
+            #define wxT(x) wxPREPEND_L(x)
+        #endif
     #endif /* ASCII/Unicode */
 #endif /* !defined(wxT) */
 
@@ -250,7 +254,11 @@
    builds everywhere (see wxStringCharType definition above).
  */
 #if wxUSE_UNICODE_WCHAR
-    #define wxS(x) wxCONCAT_HELPER(L, x)
+    #ifndef wxCONCAT_WORKAROUND
+        #define wxS(x) wxCONCAT_HELPER(L, x)
+    #else
+        #define wxS(x) wxPREPEND_L(x)
+    #endif
 #else /* wxUSE_UNICODE_UTF8 || ANSI */
     #define wxS(x) x
 #endif
Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 65929)
+++ include/wx/vector.h	(working copy)
@@ -118,7 +118,10 @@
     // Note that we use typedef instead of privately deriving from this (which
     // would allowed us to omit "Ops::" prefixes below) to keep VC6 happy,
     // it can't compile code that derives from wxIf<...>::value.
-    typedef typename wxIf< wxIsMovable<T>::value,
+    //
+    // bcc551 needs the extra parentheses for non-type template arguments
+    // to compile.
+    typedef typename wxIf< (wxIsMovable<T>::value),
                            wxPrivate::wxVectorMemOpsMovable<T>,
                            wxPrivate::wxVectorMemOpsGeneric<T> >::value
             Ops;
@@ -451,8 +454,11 @@
 
 // This is a helper for the wxVectorSort function, and should not be used
 // directly in user's code.
+//
+// bcc551 can't compile with template struct and template function with
+// the same name even though they're in different namespace.
 template<typename T>
-struct wxVectorSort
+struct wxVectorSort_ftor
 {
     static int wxCMPFUNC_CONV
     Compare(const void* pitem1, const void* pitem2, const void* )
@@ -477,7 +483,7 @@
 void wxVectorSort(wxVector<T>& v)
 {
     wxQsort(v.begin(), v.size(), sizeof(T),
-            wxPrivate::wxVectorSort<T>::Compare, NULL);
+            wxPrivate::wxVectorSort_ftor<T>::Compare, NULL);
 }
 
 
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 65929)
+++ include/wx/defs.h	(working copy)
@@ -1056,9 +1056,14 @@
         #define wxULongLong_t unsigned wxLongLong_t
     #endif
 
-    /*  these macros allow to define 64 bit constants in a portable way */
-    #define wxLL(x) wxCONCAT(x, wxLongLongSuffix)
-    #define wxULL(x) wxCONCAT(x, wxCONCAT(u, wxLongLongSuffix))
+    #ifndef wxCONCAT_WORKAROUND
+        /*  these macros allow to define 64 bit constants in a portable way */
+        #define wxLL(x) wxCONCAT(x, wxLongLongSuffix)
+        #define wxULL(x) wxCONCAT(x, wxCONCAT(u, wxLongLongSuffix))
+    #else
+        #define wxLL(x) wxAPPEND_i64(x)
+        #define wxULL(x) wxAPPEND_ui64(x)
+    #endif
 
     typedef wxLongLong_t wxInt64;
     typedef wxULongLong_t wxUint64;
Index: src/common/translation.cpp
===================================================================
--- src/common/translation.cpp	(revision 65929)
+++ src/common/translation.cpp	(working copy)
@@ -1500,8 +1500,8 @@
             TRACE_I18N,
             "string \"%s\"%s not found in %slocale '%s'.",
             origString,
-            n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString(),
-            !domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString(),
+            (n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString()),
+            (!domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString()),
             m_lang
         );
 
Index: src/common/xlocale.cpp
===================================================================
--- src/common/xlocale.cpp	(revision 65929)
+++ src/common/xlocale.cpp	(working copy)
@@ -77,7 +77,9 @@
 {
     if ( !gs_cLocale )
     {
-        gs_cLocale = new wxXLocale(static_cast<wxXLocaleCTag *>(NULL));
+        // NOTE: bcc551 has trouble doing static_cast with incomplete
+        //       type definition. reinterpret_cast used as workaround
+        gs_cLocale = new wxXLocale( reinterpret_cast<wxXLocaleCTag *>(NULL) );
     }
 
     return *gs_cLocale;

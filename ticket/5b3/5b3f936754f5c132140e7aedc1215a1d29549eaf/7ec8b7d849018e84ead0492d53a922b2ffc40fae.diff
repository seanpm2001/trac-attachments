Index: build/msw/config.bcc
===================================================================
--- build/msw/config.bcc	(revision 65842)
+++ build/msw/config.bcc	(working copy)
@@ -37,7 +37,7 @@
 
 # Standard linker flags 
 !ifndef LDFLAGS
-LDFLAGS = 
+LDFLAGS = -w-dup
 !endif
 
 # The C preprocessor 
@@ -47,7 +47,7 @@
 
 # What type of library to build? [0,1]
 !ifndef SHARED
-SHARED = 0
+SHARED = 1
 !endif
 
 # Build wxUniversal instead of native port? [0,1]
@@ -86,7 +86,7 @@
 
 # Multiple libraries or single huge monolithic one? [0,1]
 !ifndef MONOLITHIC
-MONOLITHIC = 0
+MONOLITHIC = 1
 !endif
 
 # Build GUI libraries? [0,1]
Index: build/msw/makefile.bcc
===================================================================
--- build/msw/makefile.bcc	(revision 65842)
+++ build/msw/makefile.bcc	(working copy)
@@ -4695,9 +4695,9 @@
 !if "$(MONOLITHIC)" == "1" && "$(SHARED)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_bcc$(VENDORTAG).dll: $(OBJS)\monodll_dummy.obj  $(MONODLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\monodll_version.res $(__wxscintilla_library_link_DEP)
 	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
-	c0d32.obj $(MONODLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib     $(__wxscintilla) import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\monodll_version.res
+	c0d32.obj $(MONODLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib   bcc_basic_string.lib  $(__wxscintilla) import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\monodll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR) $@
+	implib /p:64 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR) $@
 !endif
 
 !if "$(MONOLITHIC)" == "1" && "$(SHARED)" == "0"
@@ -4993,7 +4993,7 @@
 	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(GLDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(__WXLIBGLDEP_CORE_p) $(__WXLIBGLDEP_BASE_p) $(__WXLIB_MONO_p)  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\gldll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_gl $@
+	implib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_gl $@
 !endif
 
 !if "$(SHARED)" == "0" && "$(USE_GUI)" == "1" && "$(USE_OPENGL)" == "1"
Index: include/wx/brush.h
===================================================================
--- include/wx/brush.h	(revision 65842)
+++ include/wx/brush.h	(working copy)
@@ -119,6 +119,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxBrushStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -129,6 +133,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_BRUSH_H_BASE_
Index: include/wx/chartype.h
===================================================================
--- include/wx/chartype.h	(revision 65842)
+++ include/wx/chartype.h	(working copy)
@@ -239,7 +239,7 @@
         #define wxT(x) x
     #else /* Unicode */
         /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
-        #define wxT(x) wxCONCAT_HELPER(L, x)
+        #define wxT(x) wxCONCAT_L(x)
     #endif /* ASCII/Unicode */
 #endif /* !defined(wxT) */
 
@@ -250,7 +250,7 @@
    builds everywhere (see wxStringCharType definition above).
  */
 #if wxUSE_UNICODE_WCHAR
-    #define wxS(x) wxCONCAT_HELPER(L, x)
+    #define wxS(x) wxCONCAT_L(x)
 #else /* wxUSE_UNICODE_UTF8 || ANSI */
     #define wxS(x) x
 #endif
Index: include/wx/cpp.h
===================================================================
--- include/wx/cpp.h	(revision 65842)
+++ include/wx/cpp.h	(working copy)
@@ -14,6 +14,7 @@
 #define _WX_CPP_H_
 
 /* wxCONCAT works like preprocessor ## operator but also works with macros */
+#define wxCONCAT_L(line) L ## line
 #define wxCONCAT_HELPER(text, line) text ## line
 #define wxCONCAT(text, line)        wxCONCAT_HELPER(text, line)
 
Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 65842)
+++ include/wx/font.h	(working copy)
@@ -378,6 +378,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxFontFamily s, wxDeprecatedGUIConstants t)
 { return static_cast<int>(s) == static_cast<int>(t); }
 inline bool operator!=(wxFontFamily s, wxDeprecatedGUIConstants t)
@@ -391,6 +395,8 @@
 inline bool operator!=(wxFontWeight s, wxDeprecatedGUIConstants t)
 { return !(s == t); }
 
+#endif // // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif
Index: include/wx/msw/mimetype.h
===================================================================
--- include/wx/msw/mimetype.h	(revision 65842)
+++ include/wx/msw/mimetype.h	(working copy)
@@ -14,7 +14,7 @@
 
 #include "wx/defs.h"
 
-#if wxUSE_MIMETYPE
+#if wxUSE_MIMETYPE 
 
 #include "wx/mimetype.h"
 
Index: include/wx/pen.h
===================================================================
--- include/wx/pen.h	(revision 65842)
+++ include/wx/pen.h	(working copy)
@@ -148,6 +148,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxPenStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -158,6 +162,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_PEN_H_BASE_
Index: include/wx/platform.h
===================================================================
--- include/wx/platform.h	(revision 65842)
+++ include/wx/platform.h	(working copy)
@@ -341,6 +341,15 @@
 #   endif
 #endif /* __BORLANDC__ */
 
+/*
+    The Borland free compiler is unable to handle overloaded enum
+    comparisons under certain conditions. eg. When any class has a
+    conversion ctor for an integral type and there's an overload to
+    compare between an integral type and that class type.
+*/
+#if defined(__BORLANDC__) && (__BORLANDC__ == 0x551)
+#   define wxCOMPILER_NO_OVERLOAD_ON_ENUM
+#endif /* __BORLANDC__ */
 
 /*
    Define Watcom-specific macros.
Index: include/wx/propgrid/propgridiface.h
===================================================================
--- include/wx/propgrid/propgridiface.h	(revision 65842)
+++ include/wx/propgrid/propgridiface.h	(working copy)
@@ -1385,7 +1385,8 @@
     {
         if ( !m_pState )
             return NULL;
-        return static_cast<const wxPropertyGrid*>(m_pState->GetGrid());
+            
+        return const_cast<const wxPropertyGrid*>(m_pState->GetGrid());
     }
 
     friend class wxPropertyGrid;
Index: include/wx/rawbmp.h
===================================================================
--- include/wx/rawbmp.h	(revision 65842)
+++ include/wx/rawbmp.h	(working copy)
@@ -411,10 +411,10 @@
             // -----------
 
             // access to individual colour components
-            ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
-            ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
-            ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
-            ChannelType& Alpha() { return *m_pAlpha; }
+            PixelFormat::ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
+            PixelFormat::ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
+            PixelFormat::ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
+            PixelFormat::ChannelType& Alpha() { return *m_pAlpha; }
 
             // address the pixel contents directly (always RGB, without alpha)
             //
Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 65842)
+++ include/wx/vector.h	(working copy)
@@ -118,7 +118,10 @@
     // Note that we use typedef instead of privately deriving from this (which
     // would allowed us to omit "Ops::" prefixes below) to keep VC6 happy,
     // it can't compile code that derives from wxIf<...>::value.
-    typedef typename wxIf< wxIsMovable<T>::value,
+    //
+    // bcc551 needs the extra parentheses for non-type template arguments
+    // to compile.
+    typedef typename wxIf< (wxIsMovable<T>::value),
                            wxPrivate::wxVectorMemOpsMovable<T>,
                            wxPrivate::wxVectorMemOpsGeneric<T> >::value
             Ops;
@@ -451,8 +454,11 @@
 
 // This is a helper for the wxVectorSort function, and should not be used
 // directly in user's code.
+//
+// bcc551 can't compile with template struct and template function with
+// the same name even though they're in different namespace.
 template<typename T>
-struct wxVectorSort
+struct wxVectorSort_ftor
 {
     static int wxCMPFUNC_CONV
     Compare(const void* pitem1, const void* pitem2, const void* )
@@ -477,7 +483,7 @@
 void wxVectorSort(wxVector<T>& v)
 {
     wxQsort(v.begin(), v.size(), sizeof(T),
-            wxPrivate::wxVectorSort<T>::Compare, NULL);
+            wxPrivate::wxVectorSort_ftor<T>::Compare, NULL);
 }
 
 
Index: samples/config/conftest.cpp
===================================================================
--- samples/config/conftest.cpp	(revision 65842)
+++ samples/config/conftest.cpp	(working copy)
@@ -196,7 +196,7 @@
     // we could write Read("/Controls/Text") as well, it's just to show SetPath()
     pConfig->SetPath(wxT("/Controls"));
 
-    m_text->SetValue(pConfig->Read(wxT("Text"), wxT("")));
+    m_text->SetValue(pConfig->Read(wxT("Text"), wxString(wxT("")) ) );
     m_check->SetValue(pConfig->Read(wxT("Check"), 1l) != 0);
 
     // SetPath() understands ".."
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	(revision 65842)
+++ samples/dataview/dataview.cpp	(working copy)
@@ -530,7 +530,7 @@
     {
     case 0:
         {
-            wxASSERT(!m_ctrl[0] && !m_music_model);
+            wxASSERT(!m_ctrl[0] && !m_music_model.get());
             m_ctrl[0] =
                 new wxDataViewCtrl( parent, ID_MUSIC_CTRL, wxDefaultPosition,
                                     wxDefaultSize, style );
@@ -612,7 +612,7 @@
 
     case 1:
         {
-            wxASSERT(!m_ctrl[1] && !m_list_model);
+            wxASSERT(!m_ctrl[1] && !m_list_model.get());
             m_ctrl[1] = new wxDataViewCtrl( parent, ID_ATTR_CTRL, wxDefaultPosition,
                                             wxDefaultSize, style );
 
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 65842)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1333,8 +1333,8 @@
                     dialog.GetPath().c_str(),
                     dialog.GetDirectory().c_str(),
                     dialog.GetFilename().c_str(),
-                    extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
-                          : wxString("None"));
+                    (extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
+                          : wxString("None")) );
         wxMessageDialog dialog2(this, info, wxT("Selected file"));
         dialog2.ShowModal();
     }
Index: samples/dll/makefile.bcc
===================================================================
--- samples/dll/makefile.bcc	(revision 65842)
+++ samples/dll/makefile.bcc	(working copy)
@@ -262,7 +262,7 @@
 	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(MY_DLL_OBJECTS),$@,, $(__WXLIB_CORE_p)  $(__WXLIB_BASE_p)  $(__WXLIB_MONO_p) $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib import32.lib cw32$(__THREADSFLAG)$(__RUNTIME_LIBS_1).lib,,
 |
-	implib -f $(OBJS)\my_dll $@
+	implib $(OBJS)\my_dll $@
 
 !if "$(SHARED)" == "0"
 $(OBJS)\wx_exe.exe: $(WX_EXE_OBJECTS)  $(OBJS)\wx_exe_sample.res $(OBJS)\my_dll.dll
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 65842)
+++ samples/docview/docview.cpp	(working copy)
@@ -346,7 +346,7 @@
 
     CreateMenuBarForFrame(subframe, menuFile, menuEdit);
 
-    subframe->SetIcon(isCanvas ? wxICON(chrt) : wxICON(notepad));
+    subframe->SetIcon( (isCanvas ? wxICON(chrt) : wxICON(notepad)) );
 
     return subframe;
 }
Index: samples/internat/internat.cpp
===================================================================
--- samples/internat/internat.cpp	(revision 65842)
+++ samples/internat/internat.cpp	(working copy)
@@ -247,7 +247,7 @@
     if (!m_locale.AddCatalog("internat"))
     {
         wxLogError(_("Couldn't find/load the 'internat' catalog for locale '%s'."),
-                   pInfo ? pInfo->GetLocaleName() : _("unknown"));
+                   (pInfo ? pInfo->GetLocaleName() : _("unknown")) );
     }
 
     // Now try to add wxstd.mo so that loading "NOTEXIST.ING" file will produce
Index: samples/mdi/mdi.cpp
===================================================================
--- samples/mdi/mdi.cpp	(revision 65842)
+++ samples/mdi/mdi.cpp	(working copy)
@@ -563,9 +563,9 @@
 {
     wxClipboardLocker lock;
     wxTextDataObject data;
-    m_canvas->SetText(wxTheClipboard->GetData(data)
+    m_canvas->SetText( (wxTheClipboard->GetData(data)
                         ? data.GetText()
-                        : wxString("No text on clipboard"));
+                        : wxString("No text on clipboard")) );
 }
 
 void MyChild::OnUpdatePaste(wxUpdateUIEvent& event)
Index: src/common/mimecmn.cpp
===================================================================
--- src/common/mimecmn.cpp	(revision 65842)
+++ src/common/mimecmn.cpp	(working copy)
@@ -628,8 +628,8 @@
     const wxString::const_iterator end = ext.end();
     wxString extWithoutDot;
     if ( i != end && *i == '.' )
-        extWithoutDot.assign(++i, ext.end());
-    else
+//        extWithoutDot.assign(++i, ext.end());
+//    else
         extWithoutDot = ext;
 
     wxCHECK_MSG( !ext.empty(), NULL, wxT("extension can't be empty") );
Index: src/common/translation.cpp
===================================================================
--- src/common/translation.cpp	(revision 65842)
+++ src/common/translation.cpp	(working copy)
@@ -1500,8 +1500,8 @@
             TRACE_I18N,
             "string \"%s\"%s not found in %slocale '%s'.",
             origString,
-            n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString(),
-            !domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString(),
+            (n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString()),
+            (!domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString()),
             m_lang
         );
 
Index: src/common/xlocale.cpp
===================================================================
--- src/common/xlocale.cpp	(revision 65842)
+++ src/common/xlocale.cpp	(working copy)
@@ -77,7 +77,7 @@
 {
     if ( !gs_cLocale )
     {
-        gs_cLocale = new wxXLocale(static_cast<wxXLocaleCTag *>(NULL));
+        gs_cLocale = new wxXLocale( reinterpret_cast<wxXLocaleCTag *>(NULL) );
     }
 
     return *gs_cLocale;

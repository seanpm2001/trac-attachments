Index: build/msw/makefile.bcc
===================================================================
--- build/msw/makefile.bcc	(revision 65886)
+++ build/msw/makefile.bcc	(working copy)
@@ -4702,10 +4702,10 @@
 
 !if "$(MONOLITHIC)" == "1" && "$(SHARED)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_bcc$(VENDORTAG).dll: $(OBJS)\monodll_dummy.obj  $(MONODLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\monodll_version.res $(__wxscintilla_library_link_DEP)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
-	c0d32.obj $(MONODLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib     $(__wxscintilla) import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\monodll_version.res
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	c0d32.obj $(MONODLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib   $(__wxscintilla) import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\monodll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR) $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib
 !endif
 
 !if "$(MONOLITHIC)" == "1" && "$(SHARED)" == "0"
@@ -4718,10 +4718,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1"
 $(LIBDIRNAME)\wxbase$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_bcc$(VENDORTAG).dll: $(OBJS)\basedll_dummy.obj  $(BASEDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\basedll_version.res
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(BASEDLL_OBJECTS),$@,, wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\basedll_version.res
 |
-	implib -f $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR) $@
+    move $*.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib    
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0"
@@ -4738,10 +4738,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1"
 $(LIBDIRNAME)\wxbase$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_net_bcc$(VENDORTAG).dll: $(OBJS)\netdll_dummy.obj  $(NETDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\netdll_version.res $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(NETDLL_OBJECTS),$@,, wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\netdll_version.res
 |
-	implib -f $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_net $@
+    move $*.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_net.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0"
@@ -4758,10 +4758,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_GUI)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core_bcc$(VENDORTAG).dll: $(OBJS)\coredll_dummy.obj  $(COREDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\coredll_version.res $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(COREDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\coredll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_GUI)" == "1"
@@ -4778,10 +4778,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_GUI)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv_bcc$(VENDORTAG).dll: $(OBJS)\advdll_dummy.obj  $(ADVDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\advdll_version.res $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(ADVDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\advdll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib    
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_GUI)" == "1"
@@ -4798,10 +4798,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_GUI)" == "1" && "$(USE_MEDIA)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_media_bcc$(VENDORTAG).dll: $(OBJS)\mediadll_dummy.obj  $(MEDIADLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\mediadll_version.res $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(MEDIADLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\mediadll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_media $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_media.lib        
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_GUI)" == "1" && "$(USE_MEDIA)" == "1"
@@ -4818,10 +4818,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_GUI)" == "1" && "$(USE_HTML)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_html_bcc$(VENDORTAG).dll: $(OBJS)\htmldll_dummy.obj  $(HTMLDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\htmldll_version.res $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(HTMLDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\htmldll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_html $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_html.lib    
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_GUI)" == "1" && "$(USE_HTML)" == "1"
@@ -4838,10 +4838,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_GUI)" == "1" && "$(USE_QA)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_qa_bcc$(VENDORTAG).dll: $(OBJS)\qadll_dummy.obj  $(QADLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\qadll_version.res $(__coredll___depname) $(__basedll___depname) $(__xmldll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(QADLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml.lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\qadll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_qa $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_qa.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_GUI)" == "1" && "$(USE_QA)" == "1"
@@ -4858,10 +4858,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1"
 $(LIBDIRNAME)\wxbase$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml_bcc$(VENDORTAG).dll: $(OBJS)\xmldll_dummy.obj  $(XMLDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\xmldll_version.res $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(XMLDLL_OBJECTS),$@,, wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\xmldll_version.res
 |
-	implib -f $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml $@
+    move $*.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0"
@@ -4878,10 +4878,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_XRC)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xrc_bcc$(VENDORTAG).dll: $(OBJS)\xrcdll_dummy.obj  $(XRCDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\xrcdll_version.res $(__htmldll_library_link_DEP) $(__advdll___depname) $(__coredll___depname) $(__xmldll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(XRCDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(__htmldll_library_link_LIBR) $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\xrcdll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xrc $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xrc.lib    
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_XRC)" == "1"
@@ -4898,10 +4898,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_AUI)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_aui_bcc$(VENDORTAG).dll: $(OBJS)\auidll_dummy.obj  $(AUIDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\auidll_version.res $(__advdll___depname) $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(AUIDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\auidll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_aui $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_aui.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_AUI)" == "1"
@@ -4918,10 +4918,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_RIBBON)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_ribbon_bcc$(VENDORTAG).dll: $(OBJS)\ribbondll_dummy.obj  $(RIBBONDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\ribbondll_version.res $(__advdll___depname) $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(RIBBONDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\ribbondll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_ribbon $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_ribbon.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_RIBBON)" == "1"
@@ -4938,10 +4938,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_PROPGRID)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_propgrid_bcc$(VENDORTAG).dll: $(OBJS)\propgriddll_dummy.obj  $(PROPGRIDDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\propgriddll_version.res $(__advdll___depname) $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(PROPGRIDDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\propgriddll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_propgrid $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_propgrid.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_PROPGRID)" == "1"
@@ -4958,10 +4958,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_RICHTEXT)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_richtext_bcc$(VENDORTAG).dll: $(OBJS)\richtextdll_dummy.obj  $(RICHTEXTDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\richtextdll_version.res $(__advdll___depname) $(__htmldll_library_link_DEP) $(__xmldll___depname) $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(RICHTEXTDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_adv.lib $(__htmldll_library_link_LIBR) $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_xml.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\richtextdll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_richtext $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_richtext.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_RICHTEXT)" == "1"
@@ -4978,10 +4978,10 @@
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "1" && "$(USE_STC)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_stc_bcc$(VENDORTAG).dll: $(OBJS)\stcdll_dummy.obj  $(STCDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib $(__wxscintilla)  $(OBJS)\stcdll_version.res $(__coredll___depname) $(__basedll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(STCDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(LIBDIRNAME)\wxscintilla$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_core.lib $(LIBDIRNAME)\wxbase$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR).lib import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\stcdll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_stc $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_stc.lib
 !endif
 
 !if "$(MONOLITHIC)" == "0" && "$(SHARED)" == "0" && "$(USE_STC)" == "1"
@@ -4998,10 +4998,10 @@
 
 !if "$(SHARED)" == "1" && "$(USE_GUI)" == "1" && "$(USE_OPENGL)" == "1"
 $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_VERSION_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_gl_bcc$(VENDORTAG).dll: $(OBJS)\gldll_dummy.obj  $(GLDLL_OBJECTS) $(__wxtiff___depname) $(__wxjpeg___depname) $(__wxpng___depname) $(__wxscintilla) $(LIBDIRNAME)\wxexpat$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxzlib$(WXDEBUGFLAG).lib $(LIBDIRNAME)\wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib  $(OBJS)\gldll_version.res $(__basedll___depname) $(__coredll___depname) $(__monodll___depname)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(GLDLL_OBJECTS),$@,, $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib $(__WXLIBGLDEP_CORE_p) $(__WXLIBGLDEP_BASE_p) $(__WXLIB_MONO_p)  import32.lib cw32$(__THREADSFLAG_13)$(__RUNTIME_LIBS_5).lib,, $(OBJS)\gldll_version.res
 |
-	implib -f $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_gl $@
+    move $*.lib $(LIBDIRNAME)\wx$(PORTNAME)$(WXUNIVNAME)$(WX_RELEASE_NODOT)$(WXUNICODEFLAG)$(WXDEBUGFLAG)$(WX_LIB_FLAVOUR)_gl.lib
 !endif
 
 !if "$(SHARED)" == "0" && "$(USE_GUI)" == "1" && "$(USE_OPENGL)" == "1"
Index: include/wx/brush.h
===================================================================
--- include/wx/brush.h	(revision 65886)
+++ include/wx/brush.h	(working copy)
@@ -119,6 +119,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxBrushStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -129,6 +133,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_BRUSH_H_BASE_
Index: include/wx/chartype.h
===================================================================
--- include/wx/chartype.h	(revision 65886)
+++ include/wx/chartype.h	(working copy)
@@ -238,8 +238,12 @@
     #if !wxUSE_UNICODE
         #define wxT(x) x
     #else /* Unicode */
-        /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
-        #define wxT(x) wxCONCAT_HELPER(L, x)
+        #ifndef wxCONCAT_WORKAROUND
+            /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
+            #define wxT(x) wxCONCAT_HELPER(L, x)
+        #else
+            #define wxT(x) wxPREPEND_L(x)
+        #endif
     #endif /* ASCII/Unicode */
 #endif /* !defined(wxT) */
 
@@ -250,7 +254,11 @@
    builds everywhere (see wxStringCharType definition above).
  */
 #if wxUSE_UNICODE_WCHAR
-    #define wxS(x) wxCONCAT_HELPER(L, x)
+    #ifndef wxCONCAT_WORKAROUND
+        #define wxS(x) wxCONCAT_HELPER(L, x)
+    #else
+        #define wxS(x) wxPREPEND_L(x)
+    #endif
 #else /* wxUSE_UNICODE_UTF8 || ANSI */
     #define wxS(x) x
 #endif
Index: include/wx/cpp.h
===================================================================
--- include/wx/cpp.h	(revision 65886)
+++ include/wx/cpp.h	(working copy)
@@ -28,6 +28,12 @@
 /* a Unicode-friendly version of wxSTRINGIZE_T */
 #define wxSTRINGIZE_T(x)            wxAPPLY_T(wxSTRINGIZE(x))
 
+#ifdef wxCONCAT_WORKAROUND
+    #define wxPREPEND_L(x)      L ## x
+    #define wxAPPEND_i64(x)     x ## i64
+    #define wxAPPEND_ui64(x)    x ## ui64
+#endif /* wxCONCAT_WORKAROUND */
+
 /*
    Helper macros for wxMAKE_UNIQUE_NAME: normally this works by appending the
    current line number to the given identifier to reduce the probability of the
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 65886)
+++ include/wx/defs.h	(working copy)
@@ -1056,9 +1056,14 @@
         #define wxULongLong_t unsigned wxLongLong_t
     #endif
 
-    /*  these macros allow to define 64 bit constants in a portable way */
-    #define wxLL(x) wxCONCAT(x, wxLongLongSuffix)
-    #define wxULL(x) wxCONCAT(x, wxCONCAT(u, wxLongLongSuffix))
+    #ifndef wxCONCAT_WORKAROUND
+        /*  these macros allow to define 64 bit constants in a portable way */
+        #define wxLL(x) wxCONCAT(x, wxLongLongSuffix)
+        #define wxULL(x) wxCONCAT(x, wxCONCAT(u, wxLongLongSuffix))
+    #else
+        #define wxLL(x) wxAPPEND_i64(x)
+        #define wxULL(x) wxAPPEND_ui64(x)
+    #endif
 
     typedef wxLongLong_t wxInt64;
     typedef wxULongLong_t wxUint64;
Index: include/wx/font.h
===================================================================
--- include/wx/font.h	(revision 65886)
+++ include/wx/font.h	(working copy)
@@ -378,6 +378,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxFontFamily s, wxDeprecatedGUIConstants t)
 { return static_cast<int>(s) == static_cast<int>(t); }
 inline bool operator!=(wxFontFamily s, wxDeprecatedGUIConstants t)
@@ -391,6 +395,8 @@
 inline bool operator!=(wxFontWeight s, wxDeprecatedGUIConstants t)
 { return !(s == t); }
 
+#endif // // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif
Index: include/wx/pen.h
===================================================================
--- include/wx/pen.h	(revision 65886)
+++ include/wx/pen.h	(working copy)
@@ -148,6 +148,10 @@
 // compilers as it compares elements of different enums
 #if FUTURE_WXWIN_COMPATIBILITY_3_0
 
+// some compilers might have ambiguity issues
+// when enum comparisons are overloaded. See wx/platform.h
+#ifndef wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 inline bool operator==(wxPenStyle s, wxDeprecatedGUIConstants t)
 {
     return static_cast<int>(s) == static_cast<int>(t);
@@ -158,6 +162,8 @@
     return !(s == t);
 }
 
+#endif // wxCOMPILER_NO_OVERLOAD_ON_ENUM
+
 #endif // FUTURE_WXWIN_COMPATIBILITY_3_0
 
 #endif // _WX_PEN_H_BASE_
Index: include/wx/platform.h
===================================================================
--- include/wx/platform.h	(revision 65886)
+++ include/wx/platform.h	(working copy)
@@ -341,6 +341,28 @@
 #   endif
 #endif /* __BORLANDC__ */
 
+/*
+    older versions of Borland C have some compiler bugs that need
+    workarounds. Mostly pertains to the free commandline compiler 5.5.1.
+*/
+#if defined(__BORLANDC__) && (__BORLANDC__ <= 0x551)
+    /*
+        The Borland free compiler is unable to handle overloaded enum
+        comparisons under certain conditions. eg. When any class has a
+        conversion ctor for an integral type and there's an overload to
+        compare between an integral type and that class type.
+    */
+#   define wxCOMPILER_NO_OVERLOAD_ON_ENUM
+    /*
+        Preprocessor in older Borland compilers have major problems
+        concating with ##. Specifically, if the string operands being
+        concatenated have special meaning (e.g L"str", 123i64 etc)
+        then ## will not concatenate the operands correctly.
+        As a workaround, wxPREPEND* and wxAPPEND* are defined that doesn't
+        use wxCONCAT_HELPER.
+    */
+#   define wxCONCAT_WORKAROUND
+#endif /* __BORLANDC__ */
 
 /*
    Define Watcom-specific macros.
Index: include/wx/propgrid/propgridiface.h
===================================================================
--- include/wx/propgrid/propgridiface.h	(revision 65886)
+++ include/wx/propgrid/propgridiface.h	(working copy)
@@ -1385,7 +1385,10 @@
     {
         if ( !m_pState )
             return NULL;
-        return static_cast<const wxPropertyGrid*>(m_pState->GetGrid());
+
+        // NOTE: bcc551 has trouble doing static_cast with incomplete
+        //       type definition. const_cast used as workaround
+        return const_cast<const wxPropertyGrid*>(m_pState->GetGrid());
     }
 
     friend class wxPropertyGrid;
Index: include/wx/rawbmp.h
===================================================================
--- include/wx/rawbmp.h	(revision 65886)
+++ include/wx/rawbmp.h	(working copy)
@@ -411,10 +411,10 @@
             // -----------
 
             // access to individual colour components
-            ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
-            ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
-            ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
-            ChannelType& Alpha() { return *m_pAlpha; }
+            PixelFormat::ChannelType& Red() { return m_pRGB[PixelFormat::RED]; }
+            PixelFormat::ChannelType& Green() { return m_pRGB[PixelFormat::GREEN]; }
+            PixelFormat::ChannelType& Blue() { return m_pRGB[PixelFormat::BLUE]; }
+            PixelFormat::ChannelType& Alpha() { return *m_pAlpha; }
 
             // address the pixel contents directly (always RGB, without alpha)
             //
Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 65886)
+++ include/wx/vector.h	(working copy)
@@ -118,7 +118,10 @@
     // Note that we use typedef instead of privately deriving from this (which
     // would allowed us to omit "Ops::" prefixes below) to keep VC6 happy,
     // it can't compile code that derives from wxIf<...>::value.
-    typedef typename wxIf< wxIsMovable<T>::value,
+    //
+    // bcc551 needs the extra parentheses for non-type template arguments
+    // to compile.
+    typedef typename wxIf< (wxIsMovable<T>::value),
                            wxPrivate::wxVectorMemOpsMovable<T>,
                            wxPrivate::wxVectorMemOpsGeneric<T> >::value
             Ops;
@@ -451,8 +454,11 @@
 
 // This is a helper for the wxVectorSort function, and should not be used
 // directly in user's code.
+//
+// bcc551 can't compile with template struct and template function with
+// the same name even though they're in different namespace.
 template<typename T>
-struct wxVectorSort
+struct wxVectorSort_ftor
 {
     static int wxCMPFUNC_CONV
     Compare(const void* pitem1, const void* pitem2, const void* )
@@ -477,7 +483,7 @@
 void wxVectorSort(wxVector<T>& v)
 {
     wxQsort(v.begin(), v.size(), sizeof(T),
-            wxPrivate::wxVectorSort<T>::Compare, NULL);
+            wxPrivate::wxVectorSort_ftor<T>::Compare, NULL);
 }
 
 
Index: samples/config/conftest.cpp
===================================================================
--- samples/config/conftest.cpp	(revision 65886)
+++ samples/config/conftest.cpp	(working copy)
@@ -196,7 +196,7 @@
     // we could write Read("/Controls/Text") as well, it's just to show SetPath()
     pConfig->SetPath(wxT("/Controls"));
 
-    m_text->SetValue(pConfig->Read(wxT("Text"), wxT("")));
+    m_text->SetValue(pConfig->Read(wxT("Text"), wxString()));
     m_check->SetValue(pConfig->Read(wxT("Check"), 1l) != 0);
 
     // SetPath() understands ".."
Index: samples/dataview/dataview.cpp
===================================================================
--- samples/dataview/dataview.cpp	(revision 65886)
+++ samples/dataview/dataview.cpp	(working copy)
@@ -530,7 +530,7 @@
     {
     case 0:
         {
-            wxASSERT(!m_ctrl[0] && !m_music_model);
+            wxASSERT(!m_ctrl[0] && !m_music_model.get());
             m_ctrl[0] =
                 new wxDataViewCtrl( parent, ID_MUSIC_CTRL, wxDefaultPosition,
                                     wxDefaultSize, style );
@@ -612,7 +612,7 @@
 
     case 1:
         {
-            wxASSERT(!m_ctrl[1] && !m_list_model);
+            wxASSERT(!m_ctrl[1] && !m_list_model.get());
             m_ctrl[1] = new wxDataViewCtrl( parent, ID_ATTR_CTRL, wxDefaultPosition,
                                             wxDefaultSize, style );
 
Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 65886)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1333,8 +1333,8 @@
                     dialog.GetPath().c_str(),
                     dialog.GetDirectory().c_str(),
                     dialog.GetFilename().c_str(),
-                    extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
-                          : wxString("None"));
+                    (extra ? static_cast<MyExtraPanel*>(extra)->GetInfo()
+                          : wxString("None")) );
         wxMessageDialog dialog2(this, info, wxT("Selected file"));
         dialog2.ShowModal();
     }
Index: samples/dll/makefile.bcc
===================================================================
--- samples/dll/makefile.bcc	(revision 65886)
+++ samples/dll/makefile.bcc	(working copy)
@@ -259,10 +259,10 @@
 	-if exist $(OBJS)\sdk_exe.ils del $(OBJS)\sdk_exe.ils
 
 $(OBJS)\my_dll.dll: $(MY_DLL_OBJECTS)
-	ilink32 -Tpd -q  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
+	ilink32 -Tpd -q -Gi  -L$(BCCDIR)\lib -L$(BCCDIR)\lib\psdk $(__DEBUGINFO)  -L$(LIBDIRNAME) $(____CAIRO_LIBDIR_FILENAMES) $(LDFLAGS) @&&|
 	c0d32.obj $(MY_DLL_OBJECTS),$@,, $(__WXLIB_CORE_p)  $(__WXLIB_BASE_p)  $(__WXLIB_MONO_p) $(__LIB_TIFF_p) $(__LIB_JPEG_p) $(__LIB_PNG_p)  wxzlib$(WXDEBUGFLAG).lib wxregex$(WXUNICODEFLAG)$(WXDEBUGFLAG).lib wxexpat$(WXDEBUGFLAG).lib $(EXTRALIBS_FOR_BASE) $(__UNICOWS_LIB_p) $(__CAIRO_LIB_p) ole2w32.lib oleacc.lib import32.lib cw32$(__THREADSFLAG)$(__RUNTIME_LIBS_1).lib,,
 |
-	implib -f $(OBJS)\my_dll $@
+    move $*.lib $(OBJS)\my_dll.lib
 
 !if "$(SHARED)" == "0"
 $(OBJS)\wx_exe.exe: $(WX_EXE_OBJECTS)  $(OBJS)\wx_exe_sample.res $(OBJS)\my_dll.dll
Index: samples/docview/docview.cpp
===================================================================
--- samples/docview/docview.cpp	(revision 65886)
+++ samples/docview/docview.cpp	(working copy)
@@ -346,7 +346,7 @@
 
     CreateMenuBarForFrame(subframe, menuFile, menuEdit);
 
-    subframe->SetIcon(isCanvas ? wxICON(chrt) : wxICON(notepad));
+    subframe->SetIcon( (isCanvas ? wxICON(chrt) : wxICON(notepad)) );
 
     return subframe;
 }
Index: samples/internat/internat.cpp
===================================================================
--- samples/internat/internat.cpp	(revision 65886)
+++ samples/internat/internat.cpp	(working copy)
@@ -247,7 +247,7 @@
     if (!m_locale.AddCatalog("internat"))
     {
         wxLogError(_("Couldn't find/load the 'internat' catalog for locale '%s'."),
-                   pInfo ? pInfo->GetLocaleName() : _("unknown"));
+                   (pInfo ? pInfo->GetLocaleName() : _("unknown")) );
     }
 
     // Now try to add wxstd.mo so that loading "NOTEXIST.ING" file will produce
Index: samples/mdi/mdi.cpp
===================================================================
--- samples/mdi/mdi.cpp	(revision 65886)
+++ samples/mdi/mdi.cpp	(working copy)
@@ -563,9 +563,9 @@
 {
     wxClipboardLocker lock;
     wxTextDataObject data;
-    m_canvas->SetText(wxTheClipboard->GetData(data)
+    m_canvas->SetText( (wxTheClipboard->GetData(data)
                         ? data.GetText()
-                        : wxString("No text on clipboard"));
+                        : wxString("No text on clipboard")) );
 }
 
 void MyChild::OnUpdatePaste(wxUpdateUIEvent& event)
Index: samples/sockets/client.cpp
===================================================================
--- samples/sockets/client.cpp	(revision 65886)
+++ samples/sockets/client.cpp	(working copy)
@@ -204,7 +204,7 @@
 
 // frame constructor
 MyFrame::MyFrame() : wxFrame((wxFrame *)NULL, wxID_ANY,
-                             _("wxSocket demo: Client"),
+                             wxT("wxSocket demo: Client"),
                              wxDefaultPosition, wxSize(300, 200))
 {
   // Give the frame an icon
@@ -212,38 +212,38 @@
 
   // Make menus
   m_menuFile = new wxMenu();
-  m_menuFile->Append(CLIENT_ABOUT, _("&About...\tCtrl-A"), _("Show about dialog"));
+  m_menuFile->Append(CLIENT_ABOUT, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
   m_menuFile->AppendSeparator();
-  m_menuFile->Append(CLIENT_QUIT, _("E&xit\tAlt-X"), _("Quit client"));
+  m_menuFile->Append(CLIENT_QUIT, wxT("E&xit\tAlt-X"), wxT("Quit client"));
 
   m_menuSocket = new wxMenu();
-  m_menuSocket->Append(CLIENT_OPEN, _("&Open session\tCtrl-O"), _("Connect to server"));
+  m_menuSocket->Append(CLIENT_OPEN, wxT("&Open session\tCtrl-O"), wxT("Connect to server"));
 #if wxUSE_IPV6
-  m_menuSocket->Append(CLIENT_OPENIPV6, _("&Open session(IPv6)\tShift-Ctrl-O"), _("Connect to server(IPv6)"));
+  m_menuSocket->Append(CLIENT_OPENIPV6, wxT("&Open session(IPv6)\tShift-Ctrl-O"), wxT("Connect to server(IPv6)"));
 #endif
   m_menuSocket->AppendSeparator();
-  m_menuSocket->Append(CLIENT_TEST1, _("Test &1\tCtrl-F1"), _("Test basic functionality"));
-  m_menuSocket->Append(CLIENT_TEST2, _("Test &2\tCtrl-F2"), _("Test ReadMsg and WriteMsg"));
-  m_menuSocket->Append(CLIENT_TEST3, _("Test &3\tCtrl-F3"), _("Test large data transfer"));
+  m_menuSocket->Append(CLIENT_TEST1, wxT("Test &1\tCtrl-F1"), wxT("Test basic functionality"));
+  m_menuSocket->Append(CLIENT_TEST2, wxT("Test &2\tCtrl-F2"), wxT("Test ReadMsg and WriteMsg"));
+  m_menuSocket->Append(CLIENT_TEST3, wxT("Test &3\tCtrl-F3"), wxT("Test large data transfer"));
   m_menuSocket->AppendSeparator();
-  m_menuSocket->Append(CLIENT_CLOSE, _("&Close session\tCtrl-Q"), _("Close connection"));
+  m_menuSocket->Append(CLIENT_CLOSE, wxT("&Close session\tCtrl-Q"), wxT("Close connection"));
 
   m_menuDatagramSocket = new wxMenu();
-  m_menuDatagramSocket->Append(CLIENT_DGRAM, _("&Datagram test\tCtrl-D"), _("Test UDP sockets"));
+  m_menuDatagramSocket->Append(CLIENT_DGRAM, wxT("&Datagram test\tCtrl-D"), wxT("Test UDP sockets"));
 
 #if wxUSE_URL
   m_menuProtocols = new wxMenu();
-  m_menuProtocols->Append(CLIENT_TESTURL, _("Test URL\tCtrl-U"),
-                          _("Get data from the specified URL"));
+  m_menuProtocols->Append(CLIENT_TESTURL, wxT("Test URL\tCtrl-U"),
+                          wxT("Get data from the specified URL"));
 #endif
 
   // Append menus to the menubar
   m_menuBar = new wxMenuBar();
-  m_menuBar->Append(m_menuFile, _("&File"));
-  m_menuBar->Append(m_menuSocket, _("&TCP"));
-  m_menuBar->Append(m_menuDatagramSocket, _("&UDP"));
+  m_menuBar->Append(m_menuFile, wxT("&File"));
+  m_menuBar->Append(m_menuSocket, wxT("&TCP"));
+  m_menuBar->Append(m_menuDatagramSocket, wxT("&UDP"));
 #if wxUSE_URL
-  m_menuBar->Append(m_menuProtocols, _("&Protocols"));
+  m_menuBar->Append(m_menuProtocols, wxT("&Protocols"));
 #endif
   SetMenuBar(m_menuBar);
 
@@ -254,7 +254,7 @@
 
   // Make a textctrl for logging
   m_text  = new wxTextCtrl(this, wxID_ANY,
-                           _("Welcome to wxSocket demo: Client\nClient ready\n"),
+                           wxT("Welcome to wxSocket demo: Client\nClient ready\n"),
                            wxDefaultPosition, wxDefaultSize,
                            wxTE_MULTILINE | wxTE_READONLY);
   delete wxLog::SetActiveTarget(new wxLogTextCtrl(m_text));
@@ -289,8 +289,8 @@
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-  wxMessageBox(_("wxSocket demo: Client\n(c) 1999 Guillermo Rodriguez Garcia\n"),
-               _("About Client"),
+  wxMessageBox(wxT("wxSocket demo: Client\n(c) 1999 Guillermo Rodriguez Garcia\n"),
+               wxT("About Client"),
                wxOK | wxICON_INFORMATION, this);
 }
 
@@ -327,9 +327,9 @@
 
   // Ask user for server address
   wxString hostname = wxGetTextFromUser(
-    _("Enter the address of the wxSocket demo server:"),
-    _("Connect ..."),
-    _("localhost"));
+    wxT("Enter the address of the wxSocket demo server:"),
+    wxT("Connect ..."),
+    wxT("localhost"));
   if ( hostname.empty() )
     return;
 
@@ -352,7 +352,7 @@
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 1 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 1 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xBE;
@@ -376,27 +376,27 @@
   unsigned char len  = (unsigned char)(wxStrlen(buf1) + 1);
   wxCharBuffer buf2(wxStrlen(buf1));
 
-  m_text->AppendText(_("Sending a test buffer to the server ..."));
+  m_text->AppendText(wxT("Sending a test buffer to the server ..."));
   m_sock->Write(&len, 1);
   m_sock->Write(buf1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
 
-  m_text->AppendText(_("Receiving the buffer back from server ..."));
+  m_text->AppendText(wxT("Receiving the buffer back from server ..."));
   m_sock->Read(buf2.data(), len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
 
-  m_text->AppendText(_("Comparing the two buffers ..."));
+  m_text->AppendText(wxT("Comparing the two buffers ..."));
   if (memcmp(buf1, buf2, len) != 0)
   {
-    m_text->AppendText(_("failed!\n"));
-    m_text->AppendText(_("Test 1 failed !\n"));
+    m_text->AppendText(wxT("failed!\n"));
+    m_text->AppendText(wxT("Test 1 failed !\n"));
   }
   else
   {
-    m_text->AppendText(_("done\n"));
-    m_text->AppendText(_("Test 1 passed !\n"));
+    m_text->AppendText(wxT("done\n"));
+    m_text->AppendText(wxT("Test 1 passed !\n"));
   }
-  m_text->AppendText(_("=== Test 1 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 1 ends ===\n"));
 
   m_busy = false;
   UpdateStatusBar();
@@ -408,7 +408,7 @@
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 2 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 2 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xCE;
@@ -424,43 +424,43 @@
   m_sock->SetFlags(wxSOCKET_WAITALL);
 
   wxString s = wxGetTextFromUser(
-    _("Enter an arbitrary string to send to the server:"),
-    _("Test 2 ..."),
-    _("Yes I like wxWidgets!"));
+    wxT("Enter an arbitrary string to send to the server:"),
+    wxT("Test 2 ..."),
+    wxT("Yes I like wxWidgets!"));
 
   const wxScopedCharBuffer msg1(s.utf8_str());
   size_t len  = wxStrlen(msg1) + 1;
   wxCharBuffer msg2(wxStrlen(msg1));
 
-  m_text->AppendText(_("Sending the string with WriteMsg ..."));
+  m_text->AppendText(wxT("Sending the string with WriteMsg ..."));
   m_sock->WriteMsg(msg1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-  m_text->AppendText(_("Waiting for an event (timeout = 2 sec)\n"));
+  m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
+  m_text->AppendText(wxT("Waiting for an event (timeout = 2 sec)\n"));
 
   // Wait until data available (will also return if the connection is lost)
   m_sock->WaitForRead(2);
 
   if (m_sock->IsData())
   {
-    m_text->AppendText(_("Reading the string back with ReadMsg ..."));
+    m_text->AppendText(wxT("Reading the string back with ReadMsg ..."));
     m_sock->ReadMsg(msg2.data(), len);
-    m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-    m_text->AppendText(_("Comparing the two buffers ..."));
+    m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
+    m_text->AppendText(wxT("Comparing the two buffers ..."));
     if (memcmp(msg1, msg2, len) != 0)
     {
-      m_text->AppendText(_("failed!\n"));
-      m_text->AppendText(_("Test 2 failed !\n"));
+      m_text->AppendText(wxT("failed!\n"));
+      m_text->AppendText(wxT("Test 2 failed !\n"));
     }
     else
     {
-      m_text->AppendText(_("done\n"));
-      m_text->AppendText(_("Test 2 passed !\n"));
+      m_text->AppendText(wxT("done\n"));
+      m_text->AppendText(wxT("Test 2 passed !\n"));
     }
   }
   else
-    m_text->AppendText(_("Timeout ! Test 2 failed.\n"));
+    m_text->AppendText(wxT("Timeout ! Test 2 failed.\n"));
 
-  m_text->AppendText(_("=== Test 2 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 2 ends ===\n"));
 
   m_busy = false;
   UpdateStatusBar();
@@ -472,7 +472,7 @@
   m_busy = true;
   UpdateStatusBar();
 
-  m_text->AppendText(_("\n=== Test 3 begins ===\n"));
+  m_text->AppendText(wxT("\n=== Test 3 begins ===\n"));
 
   // Tell the server which test we are running
   unsigned char c = 0xDE;
@@ -493,27 +493,27 @@
   for (size_t i = 0; i < len * 1024; i ++)
     buf1.data()[i] = (char)(i % 256);
 
-  m_text->AppendText(_("Sending a large buffer (32K) to the server ..."));
+  m_text->AppendText(wxT("Sending a large buffer (32K) to the server ..."));
   m_sock->Write(&len, 1);
   m_sock->Write(buf1, len * 1024);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
 
-  m_text->AppendText(_("Receiving the buffer back from server ..."));
+  m_text->AppendText(wxT("Receiving the buffer back from server ..."));
   m_sock->Read(buf2.data(), len * 1024);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
+  m_text->AppendText( (m_sock->Error() ? wxT("failed !\n") : wxT("done\n")) );
 
-  m_text->AppendText(_("Comparing the two buffers ..."));
+  m_text->AppendText(wxT("Comparing the two buffers ..."));
   if (memcmp(buf1, buf2, len) != 0)
   {
-    m_text->AppendText(_("failed!\n"));
-    m_text->AppendText(_("Test 3 failed !\n"));
+    m_text->AppendText(wxT("failed!\n"));
+    m_text->AppendText(wxT("Test 3 failed !\n"));
   }
   else
   {
-    m_text->AppendText(_("done\n"));
-    m_text->AppendText(_("Test 3 passed !\n"));
+    m_text->AppendText(wxT("done\n"));
+    m_text->AppendText(wxT("Test 3 passed !\n"));
   }
-  m_text->AppendText(_("=== Test 3 ends ===\n"));
+  m_text->AppendText(wxT("=== Test 3 ends ===\n"));
 
   m_busy = false;
   UpdateStatusBar();
@@ -583,8 +583,8 @@
     static wxString s_urlname("http://www.google.com/");
     wxString urlname = wxGetTextFromUser
                        (
-                        _("Enter an URL to get"),
-                        _("URL:"),
+                        wxT("Enter an URL to get"),
+                        wxT("URL:"),
                         s_urlname
                        );
     if ( urlname.empty() )
Index: samples/stc/defsext.h
===================================================================
--- samples/stc/defsext.h	(revision 65886)
+++ samples/stc/defsext.h	(working copy)
@@ -26,9 +26,9 @@
 
 #define DEFAULT_LANGUAGE "<default>"
 
-#define PAGE_COMMON _("Common")
-#define PAGE_LANGUAGES _("Languages")
-#define PAGE_STYLE_TYPES _("Style types")
+#define PAGE_COMMON wxT("Common")
+#define PAGE_LANGUAGES wxT("Languages")
+#define PAGE_STYLE_TYPES wxT("Style types")
 
 #define STYLE_TYPES_COUNT 32
 
Index: samples/thread/thread.cpp
===================================================================
--- samples/thread/thread.cpp	(revision 65886)
+++ samples/thread/thread.cpp	(working copy)
@@ -477,9 +477,9 @@
     (
         m_txtctrl,
         wxDateTime(info.timestamp).FormatISOTime(),
-        info.threadId == wxThread::GetMainId()
+        (info.threadId == wxThread::GetMainId()
             ? wxString("main")
-            : wxString::Format("%x", info.threadId),
+            : wxString::Format("%x", info.threadId)),
         msg + "\n"
     );
 }
Index: src/common/translation.cpp
===================================================================
--- src/common/translation.cpp	(revision 65886)
+++ src/common/translation.cpp	(working copy)
@@ -1500,8 +1500,8 @@
             TRACE_I18N,
             "string \"%s\"%s not found in %slocale '%s'.",
             origString,
-            n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString(),
-            !domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString(),
+            (n != UINT_MAX ? wxString::Format("[%ld]", (long)n) : wxString()),
+            (!domain.empty() ? wxString::Format("domain '%s' ", domain) : wxString()),
             m_lang
         );
 
Index: src/common/xlocale.cpp
===================================================================
--- src/common/xlocale.cpp	(revision 65886)
+++ src/common/xlocale.cpp	(working copy)
@@ -77,7 +77,9 @@
 {
     if ( !gs_cLocale )
     {
-        gs_cLocale = new wxXLocale(static_cast<wxXLocaleCTag *>(NULL));
+        // NOTE: bcc551 has trouble doing static_cast with incomplete
+        //       type definition. reinterpret_cast used as workaround
+        gs_cLocale = new wxXLocale( reinterpret_cast<wxXLocaleCTag *>(NULL) );
     }
 
     return *gs_cLocale;

Index: src/osx/menu_osx.cpp
===================================================================
--- src/osx/menu_osx.cpp	(revision 62839)
+++ src/osx/menu_osx.cpp	(working copy)
@@ -875,11 +875,15 @@
 bool wxMenuBar::Append(wxMenu *menu, const wxString& title)
 {
     WXHMENU submenu = menu ? menu->GetHMenu() : 0;
-        wxCHECK_MSG( submenu, false, wxT("can't append invalid menu to menubar") );
+        wxCHECK_MSG( submenu, false, "can't append invalid menu to menubar" );
 
     if ( !wxMenuBarBase::Append(menu, title) )
         return false;
 
+    if ( wxMenuItem *appendedAboutMenuItem = menu->FindChildItem(wxApp::s_macAboutMenuItemId) )
+        if ( wxMenuItem *shownAboutMenuItem = m_appleMenu->FindChildItem(wxApp::s_macAboutMenuItemId) )
+            shownAboutMenuItem->SetItemLabel( appendedAboutMenuItem->GetItemLabel() );
+
     m_titles.Add(title);
 
     m_rootMenu->AppendSubMenu(menu, title);
Index: include/wx/osx/menu.h
===================================================================
--- include/wx/osx/menu.h	(revision 62839)
+++ include/wx/osx/menu.h	(working copy)
@@ -43,9 +43,9 @@
 
     // semi-private accessors
 
-    // get the window which contains this menu
+        // get the window which contains this menu
     wxWindow *GetWindow() const;
-    // get the menu handle
+        // get the menu handle
     WXHMENU GetHMenu() const ;
 
     // implementation only from now on
@@ -67,9 +67,10 @@
     // we don't want native menu events being triggered
     void SetNoEventsMode( bool noEvents );
     bool GetNoEventsMode() const { return m_noEventsMode; }
+
 protected:
-    // hide special menu items like exit, preferences etc
-    // that are expected in the app menu
+        // hide special menu items like exit, preferences etc
+        // that are expected in the app menu
     void DoRearrange() ;
 
     bool DoHandleMenuEvent( wxEvent& evt );
@@ -78,25 +79,25 @@
     virtual wxMenuItem* DoRemove(wxMenuItem *item);
 
 private:
-    // common part of all ctors
+        // common part of all ctors
     void Init();
 
-    // common part of Append/Insert (behaves as Append is pos == (size_t)-1)
+        // common part of Append/Insert (behaves as Append is pos == (size_t)-1)
     bool DoInsertOrAppend(wxMenuItem *item, size_t pos = (size_t)-1);
 
-    // terminate the current radio group, if any
+        // terminate the current radio group, if any
     void EndRadioGroup();
 
-    // if TRUE, insert a breal before appending the next item
+        // if true, insert a break before appending the next item
     bool m_doBreak;
 
-    // in this menu rearranging of menu items (esp hiding) is allowed
+        // in this menu rearranging of menu items (esp hiding) is allowed
     bool m_allowRearrange;
 
-    // don't trigger native events
+        // don't trigger native events
     bool m_noEventsMode;
 
-    // the position of the first item in the current radio group or -1
+        // the position of the first item in the current radio group or -1
     int m_startRadioGroup;
 
     wxMenuImpl* m_peer;
@@ -130,28 +131,27 @@
     virtual wxMenu *Replace(size_t pos, wxMenu *menu, const wxString& title);
     virtual wxMenu *Remove(size_t pos);
 
-    virtual int FindMenuItem(const wxString& menuString,
-                             const wxString& itemString) const;
+    virtual int FindMenuItem(const wxString& menuString, const wxString& itemString) const;
     virtual wxMenuItem* FindItem( int id, wxMenu **menu = NULL ) const;
 
-    virtual void EnableTop( size_t pos, bool flag );
     virtual void SetMenuLabel( size_t pos, const wxString& label );
     virtual wxString GetMenuLabel( size_t pos ) const;
+
+    virtual void EnableTop( size_t pos, bool flag );
     virtual bool Enable( bool enable = true );
-    // for virtual function hiding
-    virtual void Enable( int itemid, bool enable )
-    {
-        wxMenuBarBase::Enable( itemid, enable );
-    }
+        // for virtual function hiding
+    virtual void Enable( int itemid, bool enable )      { wxMenuBarBase::Enable( itemid, enable ); }
 
-    // implementation from now on
-    int  FindMenu(const wxString& title);
+    // implementation only from now on
+    // -------------------------------
+
+    int FindMenu(const wxString& title);
     void Detach();
 
         // returns TRUE if we're attached to a frame
-    bool IsAttached() const { return m_menuBarFrame != NULL; }
+    bool IsAttached() const                             { return m_menuBarFrame != NULL; }
         // get the frame we live in
-    wxFrame *GetFrame() const { return m_menuBarFrame; }
+    wxFrame *GetFrame() const                           { return m_menuBarFrame; }
         // attach to a frame
     void Attach(wxFrame *frame);
 
@@ -161,23 +161,24 @@
         // set the invoking window for all menus and submenus
     void SetInvokingWindow( wxFrame* frame ) ;
 
-    // if the menubar is modified, the display is not updated automatically,
-    // call this function to update it (m_menuBarFrame should be !NULL)
+        // if the menubar is modified, the display is not updated automatically,
+        // call this function to update it (m_menuBarFrame should be !NULL)
     void Refresh(bool eraseBackground = true, const wxRect *rect = NULL);
 
-    static void SetAutoWindowMenu( bool enable ) { s_macAutoWindowMenu = enable ; }
-    static bool GetAutoWindowMenu() { return s_macAutoWindowMenu ; }
+    static void SetAutoWindowMenu( bool enable )        { s_macAutoWindowMenu = enable ; }
+    static bool GetAutoWindowMenu()                     { return s_macAutoWindowMenu ; }
 
     void MacInstallMenuBar() ;
-    static wxMenuBar* MacGetInstalledMenuBar() { return s_macInstalledMenuBar ; }
-    static void MacSetCommonMenuBar(wxMenuBar* menubar) { s_macCommonMenuBar=menubar; }
-    static wxMenuBar* MacGetCommonMenuBar() { return s_macCommonMenuBar; }
+    static wxMenuBar* MacGetInstalledMenuBar()          { return s_macInstalledMenuBar ; }
+    static void MacSetCommonMenuBar(wxMenuBar* menubar) { s_macCommonMenuBar = menubar; }
+    static wxMenuBar* MacGetCommonMenuBar()             { return s_macCommonMenuBar; }
 
+    static WXHMENU MacGetWindowMenuHMenu()              { return s_macWindowMenuHandle ; }
 
-    static WXHMENU MacGetWindowMenuHMenu() { return s_macWindowMenuHandle ; }
 protected:
-    // common part of all ctors
+        // common part of all ctors
     void Init();
+
     wxWindow        *m_invokingWindow;
 
     wxArrayString   m_titles;

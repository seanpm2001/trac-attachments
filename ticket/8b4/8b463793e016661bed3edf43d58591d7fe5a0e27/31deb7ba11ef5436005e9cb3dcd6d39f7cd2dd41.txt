diff -uNr wxWidgets/tests/mbconv/convautotest.cpp CopyofwxWidgets/tests/mbconv/convautotest.cpp
--- wxWidgets/tests/mbconv/convautotest.cpp	2009-10-08 16:06:08.000000000 +0200
+++ CopyofwxWidgets/tests/mbconv/convautotest.cpp	2009-12-30 01:16:10.359375000 +0100
@@ -3,7 +3,7 @@
 // Purpose:     wxConvAuto unit test
 // Author:      Vadim Zeitlin
 // Created:     2006-04-04
-// RCS-ID:      $Id: convautotest.cpp 61508 2009-07-23 20:30:22Z VZ $
+// RCS-ID:      $Id: convautotest.cpp 46992 2007-06-28 07:54:15Z VS $
 // Copyright:   (c) 2006 Vadim Zeitlin
 ///////////////////////////////////////////////////////////////////////////////
 
@@ -20,6 +20,8 @@
 #if wxUSE_WCHAR_T
 
 #ifndef WX_PRECOMP
+    #include "wx/txtstrm.h"
+    #include "wx/mstream.h"
 #endif // WX_PRECOMP
 
 #include "wx/convauto.h"
@@ -43,6 +45,12 @@
         CPPUNIT_TEST( UTF16LE );
         CPPUNIT_TEST( UTF16BE );
         CPPUNIT_TEST( UTF8 );
+        CPPUNIT_TEST( StreamUTF8NoBOM );
+        CPPUNIT_TEST( StreamUTF8 );
+        CPPUNIT_TEST( StreamUTF16LE );
+        CPPUNIT_TEST( StreamUTF16BE );
+        CPPUNIT_TEST( StreamUTF32LE );
+        CPPUNIT_TEST( StreamUTF32BE );
     CPPUNIT_TEST_SUITE_END();
 
     // real test function: check that converting the src multibyte string to
@@ -57,6 +65,17 @@
     void UTF16LE();
     void UTF16BE();
     void UTF8();
+
+    // test whether two lines of text are converted properly from a stream
+    void TestTextStream(const char *src,
+        size_t srclength, wxString comp_line1, wxString comp_line2);
+
+    void StreamUTF8NoBOM();
+    void StreamUTF8();
+    void StreamUTF16LE();
+    void StreamUTF16BE();
+    void StreamUTF32LE();
+    void StreamUTF32BE();
 };
 
 // register in the unnamed registry so that these tests are run by default
@@ -118,5 +137,85 @@
 #endif
 }
 
+void ConvAutoTestCase::TestTextStream(const char *src,
+    size_t srclength, wxString comp_line1, wxString comp_line2)
+{
+    wxMemoryInputStream instream(src, srclength);
+    wxTextInputStream text( instream, ' ', wxConvAuto() );
+    wxString line1 = text.ReadLine();
+    wxString line2 = text.ReadLine();
+    // If these assertions fail, the output is ugly.
+    // Oh well
+    CPPUNIT_ASSERT_EQUAL( line1, comp_line1 );
+    CPPUNIT_ASSERT_EQUAL( line2, comp_line2 );
+}
+
+// the first line of the teststring used in the following functions is an
+// 'a' followed by a Japanese hiragana A (u+3042).
+// The second line is a single Greek beta (u+03B2). There is no blank line
+// at the end.
+// Additionally, to test whether the text stream properly handles
+// both LF and CR+LF as line breaks, both are tested.
+
+void ConvAutoTestCase::StreamUTF8NoBOM()
+{
+    const char teststr_u[] =
+        "x61\xE3\x81\x82\x0A\xCE\xB2";
+    TestTextStream(teststr_u,  7, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+        "\x61\xE3\x81\x82\x0D\x0A\xCE\xB2";
+    TestTextStream(teststr_w,  8, wxT("a\u3042"), wxT("\u03B2"));
+}
+
+void ConvAutoTestCase::StreamUTF8()
+{
+    const char teststr_u[] =
+        "\xEF\xBB\xBF\x61\xE3\x81\x82\x0A\xCE\xB2";
+    TestTextStream(teststr_u, 10, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+        "\xEF\xBB\xBF\x61\xE3\x81\x82\x0D\x0A\xCE\xB2";
+    TestTextStream(teststr_w, 11, wxT("a\u3042"), wxT("\u03B2"));
+}
+
+void ConvAutoTestCase::StreamUTF16LE()
+{
+    const char teststr_u[] =
+        "\xFF\xFE\x61\x00\x42\x30\x0A\x00\xB2\x03";
+    TestTextStream(teststr_u, 10, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+        "\xFF\xFE\x61\x00\x42\x30\x0D\x00\x0A\x00\xB2\x03";
+    TestTextStream(teststr_w, 12, wxT("a\u3042"), wxT("\u03B2"));
+}
+
+void ConvAutoTestCase::StreamUTF16BE()
+{
+    const char teststr_u[] =
+        "\xFE\xFF\x00\x61\x30\x42\x00\x0A\x03\xB2";
+    TestTextStream(teststr_u, 10, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+        "\xFE\xFF\x00\x61\x30\x42\x00\x0D\x00\x0A\x03\xB2";
+    TestTextStream(teststr_w, 12, wxT("a\u3042"), wxT("\u03B2"));
+}
+
+void ConvAutoTestCase::StreamUTF32LE()
+{
+    const char teststr_u[] =
+    "\xFF\xFE\0\0\x61\x00\0\0\x42\x30\0\0\x0A\x00\0\0\xB2\x03\0\0";
+    TestTextStream(teststr_u, 20, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+    "\xFF\xFE\0\0\x61\x00\0\0\x42\x30\0\0\x0D\x00\0\0\x0A\x00\0\0\xB2\x03\0\0";
+    TestTextStream(teststr_w, 24, wxT("a\u3042"), wxT("\u03B2"));
+}
+
+void ConvAutoTestCase::StreamUTF32BE()
+{
+    const char teststr_u[] =
+    "\0\0\xFE\xFF\0\0\x00\x61\0\0\x30\x42\0\0\x00\x0A\0\0\x03\xB2";
+    TestTextStream(teststr_u, 20, wxT("a\u3042"), wxT("\u03B2"));
+    const char teststr_w[] =
+    "\0\0\xFE\xFF\0\0\x00\x61\0\0\x30\x42\0\0\x00\x0D\0\0\x00\x0A\0\0\x03\xB2";
+    TestTextStream(teststr_w, 24, wxT("a\u3042"), wxT("\u03B2"));
+}
+
 #endif // wxUSE_WCHAR_T
 

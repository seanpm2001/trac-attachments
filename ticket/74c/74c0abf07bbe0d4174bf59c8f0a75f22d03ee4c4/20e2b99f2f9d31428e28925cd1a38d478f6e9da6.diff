Index: src/osx/cocoa/stattext.mm
===================================================================
--- src/osx/cocoa/stattext.mm	(revision 59502)
+++ src/osx/cocoa/stattext.mm	(working copy)
@@ -84,33 +84,42 @@
 {
     Point bounds;
     
-#if wxOSX_USE_ATSU_TEXT
-    OSStatus err = noErr;
-    wxCFStringRef str( m_label,  GetFont().GetEncoding() );
+    wxNSStaticTextView* v = (wxNSStaticTextView*)m_peer->GetWXWidget();
 
-    SInt16 baseline;
-    if ( m_font.MacGetThemeFontID() != kThemeCurrentPortFont )
-    {
-        err = GetThemeTextDimensions(
-            (!m_label.empty() ? (CFStringRef)str : CFSTR(" ")),
-            m_font.MacGetThemeFontID(), kThemeStateActive, false, &bounds, &baseline );
-        verify_noerr( err );
-    }
-    else
-#endif
-    {
-        wxClientDC dc(const_cast<wxStaticText*>(this));
-        wxCoord width, height ;
-        dc.GetMultiLineTextExtent( m_label , &width, &height);
-        // FIXME: The calculations returned by this function are too small
-        // for some strings, so we adjust manually.
-        bounds.h = width+12;
-        bounds.v = height+4;
-    }
+    // See http://developer.apple.com/documentation/Cocoa/Conceptual/TextLayout/Tasks/StringHeight.html
+    // This assumes a single long line.  To wrap the text, specify an actual width instead of FLT_MAX.
+
+    wxCFStringRef label(m_label, GetFont().GetEncoding());
+    NSString *myString = label.AsNSString();
+    NSFont *myFont = [v font];
+    float width = FLT_MAX;
+    float height = FLT_MAX;
+    NSTextStorage *textStorage = [[NSTextStorage alloc] initWithString:myString];
+    NSTextContainer *textContainer = [[NSTextContainer alloc] initWithContainerSize: NSMakeSize(width, height)];
+    NSLayoutManager *layoutManager = [[NSLayoutManager alloc] init];
+    [layoutManager addTextContainer:textContainer];
+    [textStorage addLayoutManager:layoutManager];
+    [textStorage addAttribute:NSFontAttributeName value:myFont range:NSMakeRange(0, [textStorage length])];
+    float padding = [[v textContainer] lineFragmentPadding];
+    [textContainer setLineFragmentPadding:padding];
+    (void)[layoutManager glyphRangeForTextContainer:textContainer];
+    NSSize best = [layoutManager usedRectForTextContainer:textContainer].size;
+    [textStorage release];
+    [textContainer release];
+    [layoutManager release];
+
+    bounds.h = best.width;
+    bounds.v = best.height;
     
     if ( m_label.empty() )
         bounds.h = 0;
 
+    // The inset and origin are 0,0 by default, but this seems like a good idea.
+    NSSize inset = [v textContainerInset];
+    NSPoint origin = [v textContainerOrigin];
+    bounds.h += origin.x + inset.width*2;
+    bounds.v += origin.y + inset.height*2;
+
     bounds.h += MacGetLeftBorderSize() + MacGetRightBorderSize();
     bounds.v += MacGetTopBorderSize() + MacGetBottomBorderSize();
 

Index: E:/Dev/test/wxWindows/docs/latex/wx/ffilestr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/ffilestr.tex,v
retrieving revision 1.2
diff -u -2 -r1.2 ffilestr.tex
--- E:/Dev/test/wxWindows/docs/latex/wx/ffilestr.tex	2003/01/18 00:16:31	1.2
+++ E:/Dev/test/wxWindows/docs/latex/wx/ffilestr.tex	2004/04/03 09:03:19
@@ -16,4 +16,7 @@
 wxSTREAM\_EOF after having read the last byte whereas wxFFileInputStream
 will report wxSTREAM\_EOF after trying to read {\it past} the last byte.
+Related to EOF behavior, note that \helpref{SeekI()}{wxinputstreamseeki} 
+can seek beyond the end of the stream (file) and will thus not return 
+{\it wxInvalidOffset} for that.
 
 \wxheading{Derived from}
@@ -77,4 +80,7 @@
 wxSTREAM\_EOF after having read the last byte whereas wxFFileInputStream
 will report wxSTREAM\_EOF after trying to read {\it past} the last byte.
+Related to EOF behavior, note that \helpref{SeekO()}{wxoutputstreamseeko} 
+can seek beyond the end of the stream (file) and will thus not return 
+{\it wxInvalidOffset} for that.
 
 \wxheading{Derived from}
Index: E:/Dev/test/wxWindows/docs/latex/wx/fileistr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/fileistr.tex,v
retrieving revision 1.2
diff -u -2 -r1.2 fileistr.tex
--- E:/Dev/test/wxWindows/docs/latex/wx/fileistr.tex	2003/01/18 00:16:31	1.2
+++ E:/Dev/test/wxWindows/docs/latex/wx/fileistr.tex	2004/04/03 09:03:19
@@ -13,4 +13,7 @@
 wxSTREAM\_EOF after having read the last byte whereas wxFFileInputStream
 will report wxSTREAM\_EOF after trying to read {\it past} the last byte.
+Related to EOF behavior, note that \helpref{SeekI()}{wxinputstreamseeki} 
+can seek beyond the end of the stream (file) and will thus not return 
+{\it wxInvalidOffset} for that.
 
 \wxheading{Derived from}
Index: E:/Dev/test/wxWindows/docs/latex/wx/fileostr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/fileostr.tex,v
retrieving revision 1.2
diff -u -2 -r1.2 fileostr.tex
--- E:/Dev/test/wxWindows/docs/latex/wx/fileostr.tex	2003/01/18 00:16:31	1.2
+++ E:/Dev/test/wxWindows/docs/latex/wx/fileostr.tex	2004/04/03 09:03:20
@@ -16,4 +16,7 @@
 wxSTREAM\_EOF after having read the last byte whereas wxFFileInputStream
 will report wxSTREAM\_EOF after trying to read {\it past} the last byte.
+Related to EOF behavior, note that \helpref{SeekO()}{wxoutputstreamseeko} 
+can seek beyond the end of the stream (file) and will thus not return 
+{\it wxInvalidOffset} for that.
 
 \wxheading{Derived from}
Index: E:/Dev/test/wxWindows/docs/latex/wx/inputstr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/inputstr.tex,v
retrieving revision 1.16
diff -u -2 -r1.16 inputstr.tex
--- E:/Dev/test/wxWindows/docs/latex/wx/inputstr.tex	2003/09/26 20:07:22	1.16
+++ E:/Dev/test/wxWindows/docs/latex/wx/inputstr.tex	2004/04/03 09:03:20
@@ -35,6 +35,11 @@
 \func{char}{GetC}{\void}
 
-Returns the first character in the input queue and removes it.
+Returns the first character in the input queue and removes it, 
+blocking until it appears if necessary.
 
+\wxheading{Note}
+
+If EOF, return value is undefined and LastRead() will return 0 and not 1.
+
 \membersection{wxInputStream::Eof}\label{wxinputstreameof}
 
@@ -43,4 +48,9 @@
 Returns true if the end of stream has been reached.
 
+\wxheading{Note}
+
+This cannot be really implemented for all streams and CanRead() is more 
+reliable than Eof()
+
 \membersection{wxInputStream::LastRead}\label{wxinputstreamlastread}
 
@@ -55,4 +65,10 @@
 Returns the first character in the input queue without removing it.
 
+\wxheading{Note}
+
+Blocks until something appears in the stream if necessary, if nothing
+ever does (i.e. EOF) LastRead() will return 0 (and the return value is
+undefined), otherwise LastRead() returns 1.
+
 \membersection{wxInputStream::Read}
 
@@ -85,4 +101,14 @@
 
 Changes the stream current position.
+
+\wxheading{Parameters}
+
+\docparam{pos}{Offset to seek to.}
+
+\docparam{mode}{One of {\bf wxFromStart}, {\bf wxFromEnd}, {\bf wxFromCurrent}.}
+
+\wxheading{Return value}
+
+The new stream position or wxInvalidOffset on error.
 
 \membersection{wxInputStream::TellI}
Index: E:/Dev/test/wxWindows/docs/latex/wx/outptstr.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/outptstr.tex,v
retrieving revision 1.12
diff -u -2 -r1.12 outptstr.tex
--- E:/Dev/test/wxWindows/docs/latex/wx/outptstr.tex	2003/09/26 20:07:22	1.12
+++ E:/Dev/test/wxWindows/docs/latex/wx/outptstr.tex	2004/04/03 09:03:21
@@ -46,7 +46,17 @@
 \membersection{wxOutputStream::SeekO}\label{wxoutputstreamseeko}
 
-\func{off\_t}{SeekO}{\param{off\_t}{ pos}, \param{wxSeekMode}{ mode}}
+\func{off\_t}{SeekO}{\param{off\_t}{ pos}, \param{wxSeekMode}{ mode = wxFromStart}}
 
 Changes the stream current position.
+
+\wxheading{Parameters}
+
+\docparam{pos}{Offset to seek to.}
+
+\docparam{mode}{One of {\bf wxFromStart}, {\bf wxFromEnd}, {\bf wxFromCurrent}.}
+
+\wxheading{Return value}
+
+The new stream position or wxInvalidOffset on error.
 
 \membersection{wxOutputStream::TellO}
Index: E:/Dev/test/wxWindows/include/wx/cppunit.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/cppunit.h,v
retrieving revision 1.2
diff -u -2 -r1.2 cppunit.h
--- E:/Dev/test/wxWindows/include/wx/cppunit.h	2004/04/01 07:17:40	1.2
+++ E:/Dev/test/wxWindows/include/wx/cppunit.h	2004/04/03 09:03:22
@@ -11,4 +11,5 @@
 #define _WX_CPPUNIT_H_
 
+///////////////////////////////////////////////////////////////////////////////
 // using CPPUNIT_TEST() macro results in this warning, disable it as there is
 // no other way to get rid of it and it's not very useful anyhow
@@ -28,4 +29,9 @@
 #endif
 
+
+///////////////////////////////////////////////////////////////////////////////
+// Include all needed cppunit headers.
+//
+
 #include "wx/beforestd.h"
 #include <cppunit/extensions/TestFactoryRegistry.h>
@@ -34,4 +40,35 @@
 #include <cppunit/extensions/HelperMacros.h>
 #include "wx/afterstd.h"
+
+
+///////////////////////////////////////////////////////////////////////////////
+// Set of helpful test macros.
+//
+
+// Base macro for wrapping CPPUNIT_TEST macros and so making them conditional
+// tests, meaning that the test only get registered and thus run when a given
+// runtime condition is true. 
+// In case the condition is evaluated as false a skip message is logged, 
+// the message will of course only be shown in verbose mode.
+#define WXTEST_ANY_WITH_CONDITION(suiteName, Condition, testMethod, anyTest) \
+    if (Condition) \
+        { anyTest; } \
+    else \
+        wxLogInfo(wxString::Format(_T("skipping: %s.%s\n Because of %s equals false\n"), \
+                                    wxString(suiteName, wxConvUTF8).c_str(), \
+                                    wxString(#testMethod, wxConvUTF8).c_str(), \
+                                    wxString(#Condition, wxConvUTF8).c_str()))
+
+// Conditional CPPUNIT_TEST macro.
+#define WXTEST_WITH_CONDITION(suiteName, Condition, testMethod) \
+    WXTEST_ANY_WITH_CONDITION(suiteName, Condition, testMethod, CPPUNIT_TEST(testMethod))
+// Conditional CPPUNIT_TEST_FAIL macro.
+#define WXTEST_FAIL_WITH_CONDITION(suiteName, Condition, testMethod) \
+    WXTEST_ANY_WITH_CONDITION(suiteName, Condition, testMethod, CPPUNIT_TEST_FAIL(testMethod))
+
+
+///////////////////////////////////////////////////////////////////////////////
+// Some more compiler warning tweaking and auto linking.
+//
 
 #ifdef __BORLANDC__
Index: E:/Dev/test/wxWindows/src/common/wfstream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/wfstream.cpp,v
retrieving revision 1.20
diff -u -2 -r1.20 wfstream.cpp
--- E:/Dev/test/wxWindows/src/common/wfstream.cpp	2003/08/09 12:45:49	1.20
+++ E:/Dev/test/wxWindows/src/common/wfstream.cpp	2004/04/03 09:03:38
@@ -252,5 +252,5 @@
 off_t wxFFileInputStream::OnSysSeek(off_t pos, wxSeekMode mode)
 {
-    return ( m_file->Seek(pos, mode) ? pos : wxInvalidOffset );
+    return ( m_file->Seek(pos, mode) ? m_file->Tell() : wxInvalidOffset );
 }
 
@@ -325,5 +325,5 @@
 off_t wxFFileOutputStream::OnSysSeek(off_t pos, wxSeekMode mode)
 {
-    return ( m_file->Seek(pos, mode) ? pos : wxInvalidOffset );
+    return ( m_file->Seek(pos, mode) ? m_file->Tell() : wxInvalidOffset );
 }
 
Index: E:/Dev/test/wxWindows/tests/streams/bstream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/streams/bstream.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 bstream.cpp
--- E:/Dev/test/wxWindows/tests/streams/bstream.cpp	2004/04/01 10:13:47	1.1
+++ E:/Dev/test/wxWindows/tests/streams/bstream.cpp	2004/04/03 09:03:46
@@ -38,5 +38,5 @@
 public:
     StreamCase() 
-        :TestSuite("Streams") 
+        :TestSuite(STREAM_TEST_NAME) 
     { /* Nothing extra */ }
     static Test *suite();
Index: E:/Dev/test/wxWindows/tests/streams/bstream.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/streams/bstream.h,v
retrieving revision 1.1
diff -u -2 -r1.1 bstream.h
--- E:/Dev/test/wxWindows/tests/streams/bstream.h	2004/04/01 12:22:44	1.1
+++ E:/Dev/test/wxWindows/tests/streams/bstream.h	2004/04/03 09:03:47
@@ -15,8 +15,10 @@
 
 ///////////////////////////////////////////////////////////////////////////////
-// Some macros preventing use from typing too much ;-)
+// Some macros preventing us from typing too much ;-)
 //
 
 #define STREAM_TEST_NAME "Streams"
+#define COMPOSE_TEST_NAME(Name) \
+    STREAM_TEST_NAME "." #Name
 #define STREAM_REGISTER_SUB_SUITE(Name) \
     extern Test* Get##Name##Suite(); \
@@ -25,5 +27,5 @@
     Test* Get##Name##Suite() { return Name::suite(); }
 #define STREAM_TEST_SUBSUITE_NAMED_REGISTRATION(Name) \
-    CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( Name, STREAM_TEST_NAME "." #Name ); \
+    CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( Name, COMPOSE_TEST_NAME(Name) ); \
     STREAM_IMPLEMENT_SUB_REGISTRATION_ROUTINE( Name )
 
@@ -58,4 +60,5 @@
         :m_bSimpleTellITest(false),
          m_bSimpleTellOTest(false),
+         m_bSeekInvalidBeyondEnd(true),
          m_pCurrentIn(NULL),
          m_pCurrentOut(NULL)
@@ -177,5 +180,5 @@
         CPPUNIT_ASSERT(stream_in.SeekI(-2, wxFromEnd) != wxInvalidOffset);
         // Go beyond the stream size.
-        CPPUNIT_ASSERT(stream_in.SeekI(10, wxFromCurrent) == wxInvalidOffset);
+        CPPUNIT_ASSERT((stream_in.SeekI(10, wxFromCurrent) == wxInvalidOffset) == m_bSeekInvalidBeyondEnd);
     }
 
@@ -211,12 +214,10 @@
 
         // Test the full stream
-        while(!stream_in.Eof())
+        while (stream_in.IsOk())
         {
-            if (!stream_in.IsOk())
-                break;
-
             char peekChar = stream_in.Peek();
             char getChar = stream_in.GetC();
-            CPPUNIT_ASSERT(peekChar == getChar);
+            if (stream_in.LastRead() == 1)
+                CPPUNIT_ASSERT(peekChar == getChar);
         }
     }
@@ -314,5 +315,5 @@
         CPPUNIT_ASSERT(stream_out.SeekO(-2, wxFromEnd) != wxInvalidOffset);
         // Go beyond the stream size.
-        CPPUNIT_ASSERT(stream_out.SeekO(10, wxFromCurrent) == wxInvalidOffset);
+        CPPUNIT_ASSERT((stream_out.SeekO(10, wxFromCurrent) == wxInvalidOffset) == m_bSeekInvalidBeyondEnd);
     }
 
@@ -350,4 +351,6 @@
     bool m_bSimpleTellOTest;    // if true, no SeekO will be used by the TellI test. 
                                 // Default false.
+    bool m_bSeekInvalidBeyondEnd; // if true a SeekI|O beyond the end of the stream should return wxInvalidOffset
+                                  // Default true.
 
 protected:
Index: E:/Dev/test/wxWindows/tests/streams/ffilestream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/streams/ffilestream.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 ffilestream.cpp
--- E:/Dev/test/wxWindows/tests/streams/ffilestream.cpp	2004/04/01 10:13:47	1.1
+++ E:/Dev/test/wxWindows/tests/streams/ffilestream.cpp	2004/04/03 09:03:48
@@ -85,5 +85,5 @@
 ffileStream::ffileStream()
 {
-    /* Nothing extra */
+    m_bSeekInvalidBeyondEnd = false;
 }
 
Index: E:/Dev/test/wxWindows/tests/streams/filestream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/streams/filestream.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 filestream.cpp
--- E:/Dev/test/wxWindows/tests/streams/filestream.cpp	2004/04/01 10:13:47	1.1
+++ E:/Dev/test/wxWindows/tests/streams/filestream.cpp	2004/04/03 09:03:48
@@ -85,5 +85,5 @@
 fileStream::fileStream()
 {
-    /* Nothing extra */
+    m_bSeekInvalidBeyondEnd = false;
 }
 
Index: E:/Dev/test/wxWindows/tests/streams/zlibstream.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/tests/streams/zlibstream.cpp,v
retrieving revision 1.1
diff -u -2 -r1.1 zlibstream.cpp
--- E:/Dev/test/wxWindows/tests/streams/zlibstream.cpp	2004/04/01 10:13:47	1.1
+++ E:/Dev/test/wxWindows/tests/streams/zlibstream.cpp	2004/04/03 09:03:49
@@ -35,4 +35,7 @@
 using namespace CppUnit;
 
+#define WXTEST_WITH_GZIP_CONDITION(testMethod) \
+    WXTEST_WITH_CONDITION( COMPOSE_TEST_NAME(zlibStream), wxZlibInputStream::CanHandleGZip() && wxZlibOutputStream::CanHandleGZip(), testMethod )
+
 #define DATABUFFER_SIZE 1024
 
@@ -42,5 +45,5 @@
 // The test case
 //
-// Try to fully test wxZlibInputStream and wxFileOutputStream
+// Try to fully test wxZlibInputStream and wxZlibOutputStream
 
 class zlibStream : public BaseStreamTestCase<wxZlibInputStream, wxZlibOutputStream>
@@ -77,9 +80,9 @@
         CPPUNIT_TEST(TestStream_ZLib_SpeedComp);
         CPPUNIT_TEST(TestStream_ZLib_BestComp);
-        CPPUNIT_TEST(TestStream_GZip_Default);
-        CPPUNIT_TEST(TestStream_GZip_NoComp);
-        CPPUNIT_TEST(TestStream_GZip_SpeedComp);
-        CPPUNIT_TEST(TestStream_GZip_BestComp);
-        CPPUNIT_TEST(TestStream_ZLibGZip);
+        WXTEST_WITH_GZIP_CONDITION(TestStream_GZip_Default);
+        WXTEST_WITH_GZIP_CONDITION(TestStream_GZip_NoComp);
+        WXTEST_WITH_GZIP_CONDITION(TestStream_GZip_SpeedComp);
+        WXTEST_WITH_GZIP_CONDITION(TestStream_GZip_BestComp);
+        WXTEST_WITH_GZIP_CONDITION(TestStream_ZLibGZip);
         CPPUNIT_TEST(Decompress_BadData);
         CPPUNIT_TEST(Decompress_wx24Data);

 	  	 

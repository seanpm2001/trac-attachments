diff -bru wxWidgets/samples/notebook/notebook.cpp /mnt/winxp/wxWidgets/samples/notebook/notebook.cpp
--- wxWidgets/samples/notebook/notebook.cpp	2013-03-26 14:35:36.000000000 -0700
+++ /mnt/winxp/wxWidgets/samples/notebook/notebook.cpp	2013-03-29 19:30:03.453125000 -0700
@@ -26,6 +26,42 @@
 #include "wx/utils.h"
 #include "notebook.h"
 
+#ifdef __WINDOWS__
+    #define USE_XPM_BITMAPS 1
+#else
+    #define USE_XPM_BITMAPS 1
+#endif
+
+#define wxUSE_XPM_IN_MSW 1
+
+#if USE_XPM_BITMAPS && defined(__WXMSW__) && !wxUSE_XPM_IN_MSW
+    #error You need to enable XPM support to use XPM bitmaps with toolbar!
+#endif // USE_XPM_BITMAPS
+
+// If this is 1, the sample will test an extra toolbar identical to the
+// main one, but not managed by the frame. This can test subtle differences
+// in the way toolbars are handled, especially on Mac where there is one
+// native, 'installed' toolbar.
+#define USE_UNMANAGED_TOOLBAR 0
+
+// Define this as 0 for the platforms not supporting controls in toolbars
+#define USE_CONTROLS_IN_TOOLBAR 1
+
+// ----------------------------------------------------------------------------
+// resources
+// ----------------------------------------------------------------------------
+
+#if USE_XPM_BITMAPS
+    #include "bitmaps/new.xpm"
+    #include "bitmaps/open.xpm"
+    #include "bitmaps/save.xpm"
+    #include "bitmaps/copy.xpm"
+    #include "bitmaps/cut.xpm"
+    #include "bitmaps/preview.xpm"  // paste XPM
+    #include "bitmaps/print.xpm"
+    #include "bitmaps/help.xpm"
+#endif // USE_XPM_BITMAPS
+
 #ifndef wxHAS_IMAGES_IN_RESOURCES
     #include "../sample.xpm"
 #endif
@@ -189,6 +225,128 @@
     panel = CreateInsertPage(parent);
     parent->InsertPage( 0, panel, I_WAS_INSERTED_PAGE_NAME, false, GetIconIndex(parent) );
 
+    panel = new wxPanel( parent );
+    wxToolBar *toolBar = new wxToolBar( panel, wxID_ANY );
+    enum
+    {
+        Tool_new,
+        Tool_open,
+        Tool_save,
+        Tool_copy,
+        Tool_cut,
+        Tool_paste,
+        Tool_print,
+        Tool_help,
+        Tool_Max
+    };
+
+    wxBitmap toolBarBitmaps[Tool_Max];
+
+#if USE_XPM_BITMAPS
+    #define INIT_TOOL_BMP(bmp) \
+        toolBarBitmaps[Tool_##bmp] = wxBitmap(bmp##_xpm)
+#else // !USE_XPM_BITMAPS
+    #define INIT_TOOL_BMP(bmp) \
+        toolBarBitmaps[Tool_##bmp] = wxBITMAP(bmp)
+#endif // USE_XPM_BITMAPS/!USE_XPM_BITMAPS
+
+    INIT_TOOL_BMP(new);
+    INIT_TOOL_BMP(open);
+    INIT_TOOL_BMP(save);
+    INIT_TOOL_BMP(copy);
+    INIT_TOOL_BMP(cut);
+    INIT_TOOL_BMP(paste);
+    INIT_TOOL_BMP(print);
+    INIT_TOOL_BMP(help);
+
+    int w = toolBarBitmaps[Tool_new].GetWidth(),
+        h = toolBarBitmaps[Tool_new].GetHeight();
+
+    if ( false )
+    {
+        w *= 2;
+        h *= 2;
+
+        for ( size_t n = Tool_new; n < WXSIZEOF(toolBarBitmaps); n++ )
+        {
+            toolBarBitmaps[n] =
+                wxBitmap(toolBarBitmaps[n].ConvertToImage().Scale(w, h));
+        }
+    }
+
+    // this call is actually unnecessary as the toolbar will adjust its tools
+    // size to fit the biggest icon used anyhow but it doesn't hurt neither
+    toolBar->SetToolBitmapSize(wxSize(w, h));
+
+    toolBar->AddTool(wxID_NEW, wxT("New"),
+                     toolBarBitmaps[Tool_new], wxNullBitmap, wxITEM_DROPDOWN,
+                     wxT("New file"), wxT("This is help for new file tool"));
+    wxMenu* menu = new wxMenu;
+    menu->Append(wxID_ANY, wxT("&First dummy item"));
+    menu->Append(wxID_ANY, wxT("&Second dummy item"));
+    menu->AppendSeparator();
+    menu->Append(wxID_EXIT, wxT("Exit"));
+    toolBar->SetDropdownMenu(wxID_NEW, menu);
+
+    toolBar->AddTool(wxID_OPEN, wxT("Open"),
+                     toolBarBitmaps[Tool_open], wxNullBitmap, wxITEM_NORMAL,
+                     wxT("Open file"), wxT("This is help for open file tool"));
+
+#if USE_CONTROLS_IN_TOOLBAR
+    // adding a combo to a vertical toolbar is not very smart
+/*    if ( !toolBar->IsVertical() )
+    {
+        wxComboBox *combo = new wxComboBox(toolBar, -1, wxEmptyString, wxDefaultPosition, wxSize(100,-1) );
+        combo->Append(wxT("This"));
+        combo->Append(wxT("is a"));
+        combo->Append(wxT("combobox"));
+        combo->Append(wxT("in a"));
+        combo->Append(wxT("toolbar"));
+        toolBar->AddControl(combo, wxT("Combo Label"));
+    }*/
+#endif // USE_CONTROLS_IN_TOOLBAR
+
+    toolBar->AddTool(wxID_SAVE, wxT("Save"), toolBarBitmaps[Tool_save], wxT("Toggle button 1"), wxITEM_CHECK);
+
+    toolBar->AddSeparator();
+    toolBar->AddTool(wxID_COPY, wxT("Copy"), toolBarBitmaps[Tool_copy], wxT("Toggle button 2"), wxITEM_CHECK);
+    toolBar->AddTool(wxID_CUT, wxT("Cut"), toolBarBitmaps[Tool_cut], wxT("Toggle/Untoggle help button"));
+    toolBar->AddTool(wxID_PASTE, wxT("Paste"), toolBarBitmaps[Tool_paste], wxT("Paste"));
+    toolBar->AddSeparator();
+
+    if ( true )
+    {
+        wxBitmap bmpDisabled(w, h);
+        {
+            wxMemoryDC dc;
+            dc.SelectObject(bmpDisabled);
+            dc.DrawBitmap(toolBarBitmaps[Tool_print], 0, 0);
+
+            wxPen pen(*wxRED, 5);
+            dc.SetPen(pen);
+            dc.DrawLine(0, 0, w, h);
+        }
+
+        toolBar->AddTool(wxID_PRINT, wxT("Print"), toolBarBitmaps[Tool_print],
+                         bmpDisabled);
+    }
+    else
+    {
+        toolBar->AddTool(wxID_PRINT, wxT("Print"), toolBarBitmaps[Tool_print],
+                         wxT("Delete this tool. This is a very long tooltip to test whether it does the right thing when the tooltip is more than Windows can cope with."));
+    }
+
+    // add a stretchable space before the "Help" button to make it
+    // right-aligned
+    toolBar->AddStretchableSpace();
+    toolBar->AddTool(wxID_HELP, wxT("Help"), toolBarBitmaps[Tool_help], wxT("Help button"), wxITEM_CHECK);
+
+    // after adding the buttons to the toolbar, must call Realize() to reflect
+    // the changes
+    toolBar->Realize();
+
+	parent->AddPage( panel, "toolbar", false, -1 );
+
     parent->SetSelection(1);
 }
 

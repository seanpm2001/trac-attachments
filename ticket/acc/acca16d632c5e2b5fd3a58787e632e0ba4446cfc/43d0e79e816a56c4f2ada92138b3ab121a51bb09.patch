diff -uNr trunk/dcsvg.cpp iy/dcsvg.cpp
--- trunk/dcsvg.cpp	2013-11-11 13:10:39.000000000 +0000
+++ iy/dcsvg.cpp	2014-02-10 21:26:45.461301710 +0000
@@ -26,9 +26,13 @@
 #include "wx/dcsvg.h"
 #include "wx/wfstream.h"
 #include "wx/filename.h"
+#include "wx/mstream.h"
+#include "wx/base64.h"  // must be after mstream.h
 
 #include "wx/private/markupparser.h"
 
+#include "wxSVGFileDC.h"
+
 // ----------------------------------------------------------
 // Global utilities
 // ----------------------------------------------------------
@@ -110,6 +114,88 @@
 } // anonymous namespace
 
 // ----------------------------------------------------------
+// wxSVGFileDCDefaultHandler
+// ----------------------------------------------------------
+
+bool wxSVGFileDCDefaultHandler::ProcessBitmap(wxBitmap bmp, wxCoord x, wxCoord y, wxFileOutputStream* filestream, bool embed) const
+{
+    static int sub_images = 0;
+    wxString s, sPNG;
+    bool bPNG_OK;
+
+    if ( wxImage::FindHandler(wxBITMAP_TYPE_PNG) == NULL )
+        wxImage::AddHandler(new wxPNGHandler);
+
+    int w = bmp.GetWidth();
+    int h = bmp.GetHeight();
+
+    if (embed)
+    {
+        // write the bitmap as a PNG to a memory stream and Base64 encode
+        wxMemoryOutputStream stream;
+        wxImage tmp = bmp.ConvertToImage();
+
+        tmp.SaveFile(stream, wxBITMAP_TYPE_PNG);
+        wxString data = wxBase64Encode(stream.GetOutputStreamBuffer()->GetBufferStart(), stream.GetSize());
+        
+        // write image meta information
+        s += wxString::Format (" <image x=\"%d\" y=\"%d\" width=\"%dpx\" height=\"%dpx\" ", x, y, w, h );
+        s += wxString::Format (" id=\"image%d\" title=\"Image from wxSVG\"", sub_images++);
+        s += wxString::Format (" xlink:href=\"data:image/png;base64,\n");
+
+        // write the Base64 encoded data on lines 76 characters long
+        for (size_t i = 0; i < s.size(); i += 76)
+        {
+            if (i < s.size() - 76)
+                s +=  data.Mid(i, 76) + "\n";
+            else
+                s += data.Mid(i, s.size() - i) + "\"\n/>"; // last line
+        }
+    }
+    else
+    {
+        // find a suitable file name
+        do
+        {
+            sPNG = wxString::Format("image%d.png", sub_images++);
+        } 
+        while (wxFile::Exists(sPNG));
+
+        //create copy of bitmap (wxGTK doesn't like saving a constant bitmap) and save it
+        wxBitmap tmp = bmp;
+        bPNG_OK = tmp.SaveFile(sPNG, wxBITMAP_TYPE_PNG);
+
+        // reference the bitmap from the SVG doc using only filename & ext
+        sPNG = sPNG.AfterLast(wxFileName::GetPathSeparator());
+
+        // reference the bitmap from the SVG doc
+        s += wxString::Format(" <image x=\"%d\" y=\"%d\" width=\"%dpx\" height=\"%dpx\" ", x, y, w, h);
+        s += wxString::Format(" xlink:href=\"%s\"> \n", sPNG.c_str());
+        s += ("<title>Image from wxSVG</title>  </image>\n");
+        }
+
+    // write to the SVG file
+    const wxCharBuffer buf = s.utf8_str();
+    filestream->Write(buf, strlen((const char *)buf));
+
+    return filestream->IsOk() && (embed || bPNG_OK);
+}
+
+// ----------------------------------------------------------
+// wxSVGFileDC (specialisations)
+// ----------------------------------------------------------
+
+void wxSVGFileDC::SetBitmapHandler(wxSVGFileDCBitmapHandler* handler)
+{
+    ((wxSVGFileDCImpl*)GetImpl())->SetBitmapHandler(handler);
+}
+
+void wxSVGFileDC::SetEmbedBitmaps (bool embed)
+{
+    ((wxSVGFileDCImpl*)GetImpl())->SetEmbedBitmaps(embed);
+}
+
+// ----------------------------------------------------------
 // wxSVGFileDCImpl
 // ----------------------------------------------------------
 
@@ -145,11 +231,14 @@
     m_pen   = *wxBLACK_PEN;
     m_font  = *wxNORMAL_FONT;
     m_brush = *wxWHITE_BRUSH;
+    
+    m_embed_bmps = false;
 
     m_graphics_changed = true;
 
     ////////////////////code here
 
+    m_bmp_handler = new wxSVGFileDCDefaultHandler(); // default bitmap handler
     m_outfile = new wxFileOutputStream(filename);
     m_OK = m_outfile->IsOk();
     if (m_OK)
@@ -180,6 +269,7 @@
 {
     wxString s = wxT("</g> \n</svg> \n");
     write(s);
+    delete m_bmp_handler;
     delete m_outfile;
 }
 
@@ -578,6 +668,19 @@
     m_graphics_changed = true;
 }
 
+void wxSVGFileDCImpl::SetBitmapHandler(wxSVGFileDCBitmapHandler* handler)
+{
+    if (handler)
+    {
+        delete m_bmp_handler; // delete the old handler
+        m_bmp_handler = handler;
+    }
+}
+
+void wxSVGFileDCImpl::SetEmbedBitmaps(bool embed)
+{
+    m_embed_bmps = embed;
+}
 
 void wxSVGFileDCImpl::SetPen(const wxPen& pen)
 {
@@ -685,43 +788,8 @@
 void wxSVGFileDCImpl::DoDrawBitmap(const class wxBitmap & bmp, wxCoord x, wxCoord y , bool  WXUNUSED(bTransparent) /*=0*/ )
 {
     NewGraphicsIfNeeded();
-
-    wxString sTmp, s, sPNG;
-    if ( wxImage::FindHandler(wxBITMAP_TYPE_PNG) == NULL )
-        wxImage::AddHandler(new wxPNGHandler);
-
-// create suitable file name
-    sTmp.Printf ( wxT("_image%d.png"), m_sub_images);
-    sPNG = m_filename.BeforeLast(wxT('.')) + sTmp;
-    while (wxFile::Exists(sPNG) )
-    {
-        m_sub_images ++;
-        sTmp.Printf ( wxT("_image%d.png"), m_sub_images);
-        sPNG = m_filename.BeforeLast(wxT('.')) + sTmp;
-    }
-
-//create copy of bitmap (wxGTK doesn't like saving a constant bitmap)
-    wxBitmap myBitmap = bmp;
-//save it
-    bool bPNG_OK = myBitmap.SaveFile(sPNG,wxBITMAP_TYPE_PNG);
-
-// reference the bitmap from the SVG doc
-// only use filename & ext
-    sPNG = sPNG.AfterLast(wxFileName::GetPathSeparator());
-
-// reference the bitmap from the SVG doc
-    int w = myBitmap.GetWidth();
-    int h = myBitmap.GetHeight();
-    sTmp.Printf ( wxT(" <image x=\"%d\" y=\"%d\" width=\"%dpx\" height=\"%dpx\" "), x,y,w,h );
-    s += sTmp;
-    sTmp.Printf ( wxT(" xlink:href=\"%s\"> \n"), sPNG.c_str() );
-    s += sTmp + wxT("<title>Image from wxSVG</title>  </image>") + wxT("\n");
-
-    if (m_OK && bPNG_OK)
-    {
-        write(s);
-    }
-    m_OK = m_outfile->IsOk() && bPNG_OK;
+    
+    m_OK = m_bmp_handler->ProcessBitmap(bmp, x, y, m_outfile, m_embed_bmps);
 }
 
 void wxSVGFileDCImpl::write(const wxString &s)
@@ -731,7 +799,6 @@
     m_OK = m_outfile->IsOk();
 }
 
-
 #ifdef __BORLANDC__
 #pragma warn .rch
 #pragma warn .ccc
diff -uNr trunk/dcsvg.h iy/dcsvg.h
--- trunk/dcsvg.h	2013-11-11 13:10:39.000000000 +0000
+++ iy/dcsvg.h	2014-02-10 21:31:47.489289214 +0000
@@ -25,9 +25,19 @@
 
 class WXDLLIMPEXP_FWD_BASE wxFileOutputStream;
 
+class WXDLLIMPEXP_FWD_CORE wxSVGFileDC;
 
+class wxSVGFileDCBitmapHandler
+{ 
+public: 
+    virtual bool ProcessBitmap(wxBitmap bitmap, wxCoord x, wxCoord y, wxFileOutputStream* filestream, bool embed = false) const = 0; 
+};
 
-class WXDLLIMPEXP_FWD_CORE wxSVGFileDC;
+class wxSVGFileDCDefaultHandler : public wxSVGFileDCBitmapHandler
+{
+public:
+    bool ProcessBitmap(wxBitmap bitmap, wxCoord x, wxCoord y, wxFileOutputStream* filestream, bool embed = false) const;
+};
 
 class WXDLLIMPEXP_CORE wxSVGFileDCImpl : public wxDCImpl
 {
@@ -88,7 +98,9 @@
 
     virtual void SetBackground( const wxBrush &brush );
     virtual void SetBackgroundMode( int mode );
+    virtual void SetBitmapHandler(wxSVGFileDCBitmapHandler* handler);
     virtual void SetBrush(const wxBrush& brush);
+    virtual void SetEmbedBitmaps(bool embed = true);
     virtual void SetFont(const wxFont& font);
     virtual void SetPen(const wxPen& pen);
 
@@ -197,6 +209,8 @@
    bool                m_graphics_changed;  // set by Set{Brush,Pen}()
    int                 m_width, m_height;
    double              m_dpi;
+   wxSVGFileDCBitmapHandler* m_bmp_handler; // class to handle bitmaps
+   bool                m_embed_bmps; //
 
    // The clipping nesting level is incremented by every call to
    // SetClippingRegion() and reset when DestroyClippingRegion() is called.
@@ -220,6 +234,10 @@
         : wxDC(new wxSVGFileDCImpl(this, filename, width, height, dpi))
     {
     }
+
+    // specialisations
+    void SetBitmapHandler(wxSVGFileDCBitmapHandler* handler);
+    void SetEmbedBitmaps(bool embed = true);
 };
 
 #endif // wxUSE_SVG

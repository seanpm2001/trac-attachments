 include/wx/arrstr.h   | 26 ++++++++++++++++++++------
 interface/wx/arrstr.h |  8 ++++++++
 src/common/arrstr.cpp |  3 ++-
 3 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/include/wx/arrstr.h b/include/wx/arrstr.h
index 83af3fb..f3d6f3f 100644
--- a/include/wx/arrstr.h
+++ b/include/wx/arrstr.h
@@ -17,16 +17,21 @@
 // these functions are only used in STL build now but we define them in any
 // case for compatibility with the existing code outside of the library which
 // could be using them
-inline int wxCMPFUNC_CONV wxStringSortAscending(wxString* s1, wxString* s2)
+inline int wxCMPFUNC_CONV wxStringSortAscending(const wxString& s1, const wxString& s2)
 {
-    return s1->Cmp(*s2);
+    return s1.Cmp(s2);
 }
 
-inline int wxCMPFUNC_CONV wxStringSortDescending(wxString* s1, wxString* s2)
+inline int wxCMPFUNC_CONV wxStringSortDescending(const wxString& s1, const wxString& s2)
 {
     return wxStringSortAscending(s2, s1);
 }
 
+inline int wxCMPFUNC_CONV wxDictionaryStringSortAscending(const wxString& s1, const wxString& s2)
+{
+    return s1.IsSameAs(s2, false) ? s1.Cmp(s2) : s1.CmpNoCase(s2);
+}
+
 #if wxUSE_STD_CONTAINERS
 
 #include "wx/dynarray.h"
@@ -38,9 +43,6 @@ _WX_DECLARE_BASEARRAY_2(_wxArraywxBaseArrayStringBase, wxBaseArrayStringBase,
                         class WXDLLIMPEXP_BASE);
 WX_DEFINE_USER_EXPORTED_TYPEARRAY(wxString, wxArrayStringBase,
                                   wxBaseArrayStringBase, WXDLLIMPEXP_BASE);
-_WX_DEFINE_SORTED_TYPEARRAY_2(wxString, wxSortedArrayStringBase,
-                              wxBaseArrayStringBase, = wxStringSortAscending,
-                              class WXDLLIMPEXP_BASE, CMPFUNCwxString);
 
 class WXDLLIMPEXP_BASE wxArrayString : public wxArrayStringBase
 {
@@ -68,6 +70,10 @@ public:
     }
 };
 
+_WX_DEFINE_SORTED_TYPEARRAY_2(wxString, wxSortedArrayStringBase,
+                              wxBaseArrayStringBase, = wxStringSortAscending,
+                              class WXDLLIMPEXP_BASE, wxArrayString::CompareFunction);
+
 class WXDLLIMPEXP_BASE wxSortedArrayString : public wxSortedArrayStringBase
 {
 public:
@@ -84,6 +90,9 @@ public:
         for ( size_t n = 0; n < src.size(); n++ )
             Add(src[n]);
     }
+    wxSortedArrayString(wxArrayString::CompareFunction compareFunction)
+        : wxSortedArrayStringBase(compareFunction)
+        { }
 
     int Index(const wxString& str, bool bCase = true, bool bFromEnd = false) const;
 
@@ -341,6 +350,8 @@ protected:
   void Init(bool autoSort);             // common part of all ctors
   void Copy(const wxArrayString& src);  // copies the contents of another array
 
+  CompareFunction m_compareFunction;    // set only from wxSortedArrayString
+
 private:
   void Grow(size_t nIncrement = 0);     // makes array bigger if needed
 
@@ -359,6 +370,9 @@ public:
     { }
   wxSortedArrayString(const wxArrayString& array) : wxArrayString(true)
     { Copy(array); }
+
+  wxSortedArrayString(CompareFunction compareFunction) : wxArrayString(true)
+    { m_compareFunction = compareFunction; }
 };
 
 #endif // !wxUSE_STD_CONTAINERS
diff --git a/interface/wx/arrstr.h b/interface/wx/arrstr.h
index d22f7a0..47be586 100644
--- a/interface/wx/arrstr.h
+++ b/interface/wx/arrstr.h
@@ -289,6 +289,14 @@ public:
     wxSortedArrayString(const wxArrayString& array);
 
     /**
+        Constructs a sorted array using the specified @a compareFunction for
+        item comparison.
+
+        @since 3.1.0
+    */
+    wxSortedArrayString(CompareFunction compareFunction);
+
+    /**
         @copydoc wxArrayString::Add()
 
         @warning
diff --git a/src/common/arrstr.cpp b/src/common/arrstr.cpp
index f66fcdd..03441ee 100644
--- a/src/common/arrstr.cpp
+++ b/src/common/arrstr.cpp
@@ -72,6 +72,7 @@ void wxArrayString::Init(bool autoSort)
   m_nSize  =
   m_nCount = 0;
   m_pItems = NULL;
+  m_compareFunction = NULL;
   m_autoSort = autoSort;
 }
 
@@ -270,7 +271,7 @@ size_t wxArrayString::Add(const wxString& str, size_t nInsert)
     while ( lo < hi ) {
       i = (lo + hi)/2;
 
-      res = str.Cmp(m_pItems[i]);
+      res = m_compareFunction ? m_compareFunction(str, m_pItems[i]) : str.Cmp(m_pItems[i]);
       if ( res < 0 )
         hi = i;
       else if ( res > 0 )

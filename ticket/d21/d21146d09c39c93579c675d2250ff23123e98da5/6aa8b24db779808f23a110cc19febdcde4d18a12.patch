commit 1f9e5e9b534cf617c62f90f99d7c82dca9c7ce5c
Author: Jens Lody <jens@codeblocks.org>
Date:   Tue Apr 17 11:13:19 2012 +0200

    More exact determination, whether left/right buttons should be drawn.
    
    It has worked before (more or less), if the last tab was large enough. Very small tabs have been hidden before the right-arrow was drawn, if right close-button and windowlist-button have been shown.
    Also needed for coming left and right alignment.

Index: src/aui/auibook.cpp
===================================================================
--- src/aui/auibook.cpp
+++ src/aui/auibook.cpp
@@ -429,6 +429,47 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
     if (!dc.IsOk())
         return;
 
+    // draw background
+    m_art->DrawBackground(dc, wnd, m_rect);
+
+    // first we create all buttons on the right, except the forward arrow
+    // so we can determine, whether we need the backward- and forward-arrows
+
+    // draw buttons
+    int left_buttons_width = 0;
+    int right_buttons_width = 0;
+
+    int offset = 0;
+
+    // draw the buttons on the right side
+    offset = m_rect.x + m_rect.width;
+    for (i = 0; i < button_count; ++i)
+    {
+        wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
+
+        if (button.location != wxRIGHT)
+            continue;
+        if (button.curState & wxAUI_BUTTON_STATE_HIDDEN)
+            continue;
+        if (button.id == wxAUI_BUTTON_RIGHT)
+            continue;
+
+        wxRect button_rect = m_rect;
+        button_rect.SetY(1);
+        button_rect.SetWidth(offset);
+
+        m_art->DrawButton(dc,
+                          wnd,
+                          button_rect,
+                          button.id,
+                          button.curState,
+                          wxRIGHT,
+                          &button.rect);
+
+        offset -= button.rect.GetWidth();
+        right_buttons_width += button.rect.GetWidth();
+    }
+
     // find out if size of tabs is larger than can be
     // afforded on screen
     int total_width = 0;
@@ -471,32 +512,22 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
         }
     }
 
-    if (total_width > m_rect.GetWidth() || m_tabOffset != 0)
-    {
-        // show left/right buttons
-        for (i = 0; i < button_count; ++i)
+    // show up/down buttons
+    for (i = 0; i < button_count; ++i)
+     {
+        wxAuiTabContainerButton& button = m_buttons.Item(i);
+        if (button.id == wxAUI_BUTTON_RIGHT ||
+            button.id == wxAUI_BUTTON_LEFT)
         {
-            wxAuiTabContainerButton& button = m_buttons.Item(i);
-            if (button.id == wxAUI_BUTTON_LEFT ||
-                button.id == wxAUI_BUTTON_RIGHT)
-            {
+            if (total_width > (m_rect.GetWidth() - right_buttons_width - m_art->GetIndentSize()) ||
+                m_tabOffset != 0)
                 button.curState &= ~wxAUI_BUTTON_STATE_HIDDEN;
-            }
-        }
-    }
-    else
-    {
-        // hide left/right buttons
-        for (i = 0; i < button_count; ++i)
-        {
-            wxAuiTabContainerButton& button = m_buttons.Item(i);
-            if (button.id == wxAUI_BUTTON_LEFT ||
-                button.id == wxAUI_BUTTON_RIGHT)
-            {
+            else
                 button.curState |= wxAUI_BUTTON_STATE_HIDDEN;
-            }
         }
-    }
+     }
+ 
+
 
     // determine whether left button should be enabled
     for (i = 0; i < button_count; ++i)
@@ -509,40 +540,28 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
             else
                 button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
         }
-        if (button.id == wxAUI_BUTTON_RIGHT)
-        {
-            if (visible_width < m_rect.GetWidth() - ((int)button_count*16))
-                button.curState |= wxAUI_BUTTON_STATE_DISABLED;
-            else
-                button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
-        }
     }
 
+    // now draw forwardarrows, keep the rect where it should be drawn, so we are
+    // able to redraw it, if it should be enabled. We can only determine this, if it is actually drawn
+    // because we do not know it's exact size
+    wxRect right_btn_rect;
 
-
-    // draw background
-    m_art->DrawBackground(dc, wnd, m_rect);
-
-    // draw buttons
-    int left_buttons_width = 0;
-    int right_buttons_width = 0;
-
-    int offset = 0;
-
-    // draw the buttons on the right side
-    offset = m_rect.x + m_rect.width;
     for (i = 0; i < button_count; ++i)
     {
         wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
 
         if (button.location != wxRIGHT)
             continue;
+        if (button.id != wxAUI_BUTTON_RIGHT)
+            continue;
         if (button.curState & wxAUI_BUTTON_STATE_HIDDEN)
             continue;
 
         wxRect button_rect = m_rect;
         button_rect.SetY(1);
         button_rect.SetWidth(offset);
+        right_btn_rect = button_rect;
 
         m_art->DrawButton(dc,
                           wnd,
@@ -556,8 +575,6 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
         right_buttons_width += button.rect.GetWidth();
     }
 
-
-
     offset = 0;
 
     // draw the buttons on the left side
@@ -571,7 +588,10 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
         if (button.curState & wxAUI_BUTTON_STATE_HIDDEN)
             continue;
 
-        wxRect button_rect(offset, 1, 1000, m_rect.height);
+        wxRect button_rect = m_rect;
+        button_rect.SetX(offset);
+        button_rect.width -= offset;
+        button_rect.SetY(1);
 
         m_art->DrawButton(dc,
                           wnd,
@@ -613,6 +633,26 @@ void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
         m_tabCloseButtons.Item(i).curState = wxAUI_BUTTON_STATE_HIDDEN;
     }
 
+    // determine whether right button should be enabled
+    for (i = 0; i < button_count; ++i)
+    {
+        wxAuiTabContainerButton& button = m_buttons.Item(i);
+        if (button.id == wxAUI_BUTTON_RIGHT)
+        {
+            if (visible_width < m_rect.GetWidth() - (left_buttons_width + right_buttons_width))
+                button.curState |= wxAUI_BUTTON_STATE_DISABLED;
+            else
+                button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
+
+            m_art->DrawButton(dc,
+                              wnd,
+                              right_btn_rect,
+                              button.id,
+                              button.curState,
+                              button.location,
+                              &button.rect);
+        }
+    }
 
     // draw the tabs
 
@@ -781,22 +821,13 @@ bool wxAuiTabContainer::IsTabVisible(int tabPage, int tabOffset, wxDC* dc, wxWin
     if (offset == 0)
         offset += m_art->GetIndentSize();
 
-    wxRect active_rect;
-
-    wxRect rect = m_rect;
-    rect.y = 0;
-    rect.height = m_rect.height;
-
     // See if the given page is visible at the given tab offset (effectively scroll position)
     for (i = tabOffset; i < page_count; ++i)
     {
         wxAuiNotebookPage& page = m_pages.Item(i);
         wxAuiTabContainerButton& tab_button = m_tabCloseButtons.Item(i);
 
-        rect.x = offset;
-        rect.width = m_rect.width - right_buttons_width - offset - 2;
-
-        if (rect.width <= 0)
+        if ((m_rect.width - right_buttons_width - offset - 2) <= 0)
             return false; // haven't found the tab, and we've run out of space, so return false
 
         int x_extent = 0;

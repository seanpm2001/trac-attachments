--- ./wxWidgets-trunk/src/xml/xml.cpp	2011-12-11 23:47:28.000000000 +0100
+++ ./wxWidgetsProject/src/xml/xml.cpp	2011-12-18 11:54:18.000000000 +0100
@@ -3,7 +3,7 @@
 // Purpose:     wxXmlDocument - XML parser & data holder class
 // Author:      Vaclav Slavik
 // Created:     2000/03/05
-// RCS-ID:      $Id: xml.cpp 68283 2011-07-16 10:04:48Z VS $
+// RCS-ID:      $Id$
 // Copyright:   (c) 2000 Vaclav Slavik
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -364,7 +364,8 @@
     while (n)
     {
         if (n->GetType() == wxXML_TEXT_NODE ||
-            n->GetType() == wxXML_CDATA_SECTION_NODE)
+            n->GetType() == wxXML_CDATA_SECTION_NODE ||
+            n->GetType() == wxXML_DOCUMENT_TYPE_NODE)
             return n->GetContent();
         n = n->GetNext();
     }
@@ -725,6 +726,44 @@
     ctx->lastAsText = NULL;
 }
 
+static void StartDoctypeHnd(void* userData, char const* doctypeName, char const* sysid, char const* pubid, int has_internal_subset)
+{
+  wxXmlParsingContext* ctx = (wxXmlParsingContext*)userData;
+
+  wxXmlNode* doctypeNode;
+  
+  
+  if (pubid != NULL)
+    if (sysid != NULL)
+      doctypeNode = new wxXmlNode(wxXML_DOCUMENT_TYPE_NODE,
+                                  CharToString(ctx->conv,doctypeName),
+                                  wxString(wxT("PUBLIC ")) << CharToString(ctx->conv,pubid) << wxT(" ") << CharToString(ctx->conv,sysid),
+                                  XML_GetCurrentLineNumber(ctx->parser));
+    else
+      doctypeNode = new wxXmlNode(wxXML_DOCUMENT_TYPE_NODE,
+                                  CharToString(ctx->conv,doctypeName),
+                                  wxString(wxT("PUBLIC ")) << CharToString(ctx->conv,pubid),
+                                  XML_GetCurrentLineNumber(ctx->parser));
+  else if (sysid != NULL)
+    doctypeNode = new wxXmlNode(wxXML_DOCUMENT_TYPE_NODE,
+                                CharToString(ctx->conv,doctypeName),
+                                wxString(wxT("SYSTEM ")) << CharToString(ctx->conv,sysid),
+                                XML_GetCurrentLineNumber(ctx->parser));
+  else
+    doctypeNode = new wxXmlNode(wxXML_DOCUMENT_TYPE_NODE,
+                                CharToString(ctx->conv,doctypeName),
+                                wxEmptyString,
+                                XML_GetCurrentLineNumber(ctx->parser));
+  ASSERT_LAST_CHILD_OK(ctx);
+  ctx->node->InsertChildAfter(doctypeNode,ctx->lastChild);
+  ctx->lastChild  = doctypeNode;
+  ctx->lastAsText = NULL;
+}
+
+static void EndDoctypeHnd(void* WXUNUSED(userData))
+{
+}
+
 static void PIHnd(void *userData, const char *target, const char *data)
 {
     wxXmlParsingContext *ctx = (wxXmlParsingContext*)userData;
@@ -819,8 +858,9 @@
     XML_SetUserData(parser, (void*)&ctx);
     XML_SetElementHandler(parser, StartElementHnd, EndElementHnd);
     XML_SetCharacterDataHandler(parser, TextHnd);
-    XML_SetCdataSectionHandler(parser, StartCdataHnd, EndCdataHnd);;
+    XML_SetCdataSectionHandler(parser, StartCdataHnd, EndCdataHnd);
     XML_SetCommentHandler(parser, CommentHnd);
+    XML_SetDoctypeDeclHandler(parser, StartDoctypeHnd, EndDoctypeHnd);
     XML_SetProcessingInstructionHandler(parser, PIHnd);
     XML_SetDefaultHandler(parser, DefaultHnd);
     XML_SetUnknownEncodingHandler(parser, UnknownEncodingHnd, NULL);
@@ -1092,6 +1132,13 @@
                  OutputString(stream, wxT("?>"), convMem, convFile);
             break;
 
+        case wxXML_DOCUMENT_TYPE_NODE:
+            rc = OutputString(stream, wxT("<!DOCTYPE "), convMem,convFile) &&
+                 OutputString(stream, node->GetName(),   convMem,convFile) &&
+                 OutputString(stream, wxT(" "),          convMem,convFile) &&
+                 OutputString(stream, node->GetContent(),convMem,convFile) &&
+                 OutputString(stream, wxT(">"),          convMem,convFile);
+            break;
         default:
             wxFAIL_MSG("unsupported node type");
             rc = false;

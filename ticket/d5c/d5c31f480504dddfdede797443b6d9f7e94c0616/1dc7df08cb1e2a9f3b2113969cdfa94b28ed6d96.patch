Index: include/wx/gtk/notebook.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/gtk/notebook.h,v
retrieving revision 1.47
diff -u -p -r1.47 notebook.h
--- include/wx/gtk/notebook.h	2003/08/21 12:44:49	1.47
+++ include/wx/gtk/notebook.h	2004/01/13 09:37:31
@@ -106,6 +106,9 @@ public:
 
     void ApplyWidgetStyle();
 
+    // hit test
+    virtual int HitTest(const wxPoint& pt, long *flags = NULL) const;
+
     // report if window belongs to notebook
     bool IsOwnGtkWindow( GdkWindow *window );
 
Index: src/gtk/notebook.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/gtk/notebook.cpp,v
retrieving revision 1.98
diff -u -p -r1.98 notebook.cpp
--- src/gtk/notebook.cpp	2004/01/11 20:58:10	1.98
+++ src/gtk/notebook.cpp	2004/01/13 09:37:31
@@ -671,6 +671,59 @@ bool wxNotebook::InsertPage( size_t posi
     return TRUE;
 }
 
+int wxNotebook::HitTest(const wxPoint& pt, long *flags) const
+{
+#ifdef __WXGTK20__
+  int count = GetPageCount();
+  int i;
+  wxGtkNotebookPage* nb_page = 0;
+  gint wx = m_widget->allocation.x;
+  gint wy = m_widget->allocation.y;
+  gint bw = 0;
+  GtkWidget *pixmap = 0;
+  GList *childs = 0,*child = 0;
+
+  if(flags)
+    *flags = 0;
+
+#define IS_INSIDE(pt,widget,bw) (((pt).x >= (GTK_WIDGET(widget)->allocation.x-wx-(bw))) && \
+ ((pt).x <= (GTK_WIDGET(widget)->allocation.x-wx+(bw)+GTK_WIDGET(widget)->allocation.width)) && \
+ ((pt).y >= (GTK_WIDGET(widget)->allocation.y-wy-(bw))) && \
+ ((pt).y <= (GTK_WIDGET(widget)->allocation.y-wy+(bw)+GTK_WIDGET(widget)->allocation.height)))
+				 
+  for(i=0;i<c;i++) {
+    nb_page = GetNotebookPage(i);
+    bw = gtk_container_get_border_width(GTK_CONTAINER(nb_page->m_box));
+    if(IS_INSIDE(pt,nb_page->m_box,bw)) {
+      childs = gtk_container_children(GTK_CONTAINER(nb_page->m_box));
+      child = childs;
+      while(child) {
+	if(GTK_IS_PIXMAP(child->data)) {
+	  pixmap = GTK_WIDGET(child->data);
+	  break;
+	}
+	child = child->next;
+      }
+      if(childs)
+	g_list_free(childs);
+      if(flags && pixmap && IS_INSIDE(pt,pixmap,0)) {
+	*flags |= wxNB_HITTEST_ONICON;
+      } else if (flags && IS_INSIDE(pt,nb_page->m_label,0)) {
+	*flags |= wxNB_HITTEST_ONLABEL;
+      } else if (flags) {
+	*flags |= wxNB_HITTEST_ONITEM;
+      }
+      return i;
+    }
+  }
+  if(flags)
+    *flags = wxNB_HITTEST_NOWHERE;
+  return wxNOT_FOUND;
+#else
+  return wxNOT_FOUND;
+#endif
+}
+
 void wxNotebook::OnNavigationKey(wxNavigationKeyEvent& event)
 {
     if (event.IsWindowChange())

 	  	 

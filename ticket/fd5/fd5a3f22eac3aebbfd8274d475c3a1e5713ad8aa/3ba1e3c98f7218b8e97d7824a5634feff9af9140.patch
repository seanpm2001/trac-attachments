Index: include/wx/defs.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/defs.h,v
retrieving revision 1.351
diff -b -u -2 -r1.351 defs.h
--- include/wx/defs.h	2003/06/19 23:39:51	1.351
+++ include/wx/defs.h	2003/06/22 06:23:58
@@ -1695,4 +1695,13 @@
 };
 
+enum wxHotkeyModifier
+{
+    wxMOD_NONE = 0,
+    wxMOD_ALT = 1,
+    wxMOD_CONTROL = 2,
+    wxMOD_SHIFT = 4,
+    wxMOD_WIN = 8
+};
+
 // Mapping modes (same values as used by Windows, don't change)
 enum
Index: include/wx/event.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/event.h,v
retrieving revision 1.164
diff -b -u -2 -r1.164 event.h
--- include/wx/event.h	2003/06/01 20:47:50	1.164
+++ include/wx/event.h	2003/06/22 06:24:03
@@ -183,4 +183,5 @@
     DECLARE_EVENT_TYPE(wxEVT_KEY_DOWN, 215)
     DECLARE_EVENT_TYPE(wxEVT_KEY_UP, 216)
+    DECLARE_EVENT_TYPE(wxEVT_HOTKEY, 217)
 
         // Set cursor event
@@ -816,4 +817,5 @@
  wxEVT_KEY_DOWN
  wxEVT_KEY_UP
+ wxEVT_HOTKEY
  */
 
@@ -2225,4 +2227,5 @@
 #define EVT_KEY_DOWN(func)  DECLARE_EVENT_TABLE_ENTRY( wxEVT_KEY_DOWN, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCharEventFunction) & func, (wxObject *) NULL ),
 #define EVT_KEY_UP(func)  DECLARE_EVENT_TABLE_ENTRY( wxEVT_KEY_UP, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCharEventFunction) & func, (wxObject *) NULL ),
+#define EVT_HOTKEY(id, func)  DECLARE_EVENT_TABLE_ENTRY( wxEVT_HOTKEY, id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCharEventFunction) & func, (wxObject *) NULL ),
 #define EVT_CHAR_HOOK(func)  DECLARE_EVENT_TABLE_ENTRY( wxEVT_CHAR_HOOK, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCharEventFunction) & func, NULL ),
 #define EVT_MENU_OPEN(func)  DECLARE_EVENT_TABLE_ENTRY( wxEVT_MENU_OPEN, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxMenuEventFunction) & func, (wxObject *) NULL ),
Index: include/wx/window.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/window.h,v
retrieving revision 1.103
diff -b -u -2 -r1.103 window.h
--- include/wx/window.h	2003/05/19 14:00:13	1.103
+++ include/wx/window.h	2003/06/22 06:24:07
@@ -517,4 +517,9 @@
     wxAcceleratorTable *GetAcceleratorTable()
         { return &m_acceleratorTable; }
+
+    // install and deinstall a system wide hotkey
+    virtual bool RegisterHotKey(int hotkeyId, int modifiers, int virtualKeyCode);
+    virtual bool UnregisterHotKey(int hotkeyId);
+
 #endif // wxUSE_ACCEL
 
Index: include/wx/msw/window.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/msw/window.h,v
retrieving revision 1.97
diff -b -u -2 -r1.97 window.h
--- include/wx/msw/window.h	2003/06/01 14:37:24	1.97
+++ include/wx/msw/window.h	2003/06/22 06:24:09
@@ -172,4 +172,10 @@
 #endif // __WXUNIVERSAL__
 
+#if wxUSE_ACCEL
+    // install and deinstall a system wide hotkey
+    virtual bool RegisterHotKey(int hotkeyId, int modifiers, int virtualKeyCode);
+    virtual bool UnregisterHotKey(int hotkeyId);
+#endif
+
     // implementation from now on
     // --------------------------
@@ -362,4 +368,7 @@
     bool HandleKeyDown(WXWPARAM wParam, WXLPARAM lParam);
     bool HandleKeyUp(WXWPARAM wParam, WXLPARAM lParam);
+#if wxUSE_ACCEL
+    bool HandleHotKey(WXWPARAM wParam, WXLPARAM lParam);
+#endif
 #ifdef __WIN32__
     int HandleMenuChar(int chAccel, WXLPARAM lParam);
Index: src/common/event.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/event.cpp,v
retrieving revision 1.117
diff -b -u -2 -r1.117 event.cpp
--- src/common/event.cpp	2003/06/01 14:37:25	1.117
+++ src/common/event.cpp	2003/06/22 06:24:23
@@ -178,4 +178,5 @@
 DEFINE_EVENT_TYPE(wxEVT_KEY_DOWN)
 DEFINE_EVENT_TYPE(wxEVT_KEY_UP)
+DEFINE_EVENT_TYPE(wxEVT_HOTKEY)
 
 // Set cursor event
Index: src/common/wincmn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/wincmn.cpp,v
retrieving revision 1.140
diff -b -u -2 -r1.140 wincmn.cpp
--- src/common/wincmn.cpp	2003/05/04 21:07:34	1.140
+++ src/common/wincmn.cpp	2003/06/22 06:24:26
@@ -2093,4 +2093,17 @@
 }
 
+#if wxUSE_ACCEL
+bool wxWindowBase::RegisterHotKey(int hotkeyId, int modifiers, int virtualKeyCode)
+{
+    // not implemented
+    return false;
+}
+
+bool wxWindowBase::UnregisterHotKey(int hotkeyId)
+{
+    // not implemented
+    return false;
+}
+#endif
 
 void wxWindowBase::SendDestroyEvent()
Index: src/msw/window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/window.cpp,v
retrieving revision 1.387
diff -b -u -2 -r1.387 window.cpp
--- src/msw/window.cpp	2003/06/19 09:43:19	1.387
+++ src/msw/window.cpp	2003/06/22 06:24:41
@@ -2559,4 +2559,10 @@
             break;
 
+#ifdef wxUSE_ACCEL
+        case WM_HOTKEY:
+            processed = HandleHotKey((WORD)wParam, lParam);
+            break;
+#endif
+
         case WM_HSCROLL:
         case WM_VSCROLL:
@@ -5159,4 +5165,5 @@
         case 0x0310: return "WM_PALETTEISCHANGING";
         case 0x0311: return "WM_PALETTECHANGED";
+        case 0x0312: return "WM_HOTKEY";
 
 #ifdef __WIN32__
@@ -5480,2 +5487,49 @@
 }
 
+#if wxUSE_ACCEL
+bool wxWindowMSW::RegisterHotKey(int hotkeyId, int modifiers, int virtualKeyCode)
+{
+    UINT win_modifiers=0;
+    if (modifiers & wxMOD_ALT)
+        win_modifiers|=MOD_ALT;
+    if (modifiers & wxMOD_SHIFT)
+        win_modifiers|=MOD_SHIFT;
+    if (modifiers & wxMOD_CONTROL)
+        win_modifiers|=MOD_CONTROL;
+    if (modifiers & wxMOD_WIN)
+        win_modifiers|=MOD_WIN;
+
+    return ::RegisterHotKey(GetHwnd(), hotkeyId, win_modifiers, virtualKeyCode)!=FALSE;
+}
+
+bool wxWindowMSW::UnregisterHotKey(int hotkeyId)
+{
+    return ::UnregisterHotKey(GetHwnd(), hotkeyId)!=FALSE;
+}
+
+bool wxWindowMSW::HandleHotKey(WXWPARAM wParam, WXLPARAM lParam)
+{
+    int hotkeyId=wParam;
+     int virtualKey=HIWORD(lParam);
+    int win_modifiers=LOWORD(lParam);
+    /*
+    wxHotkeyModifier modifiers=wxMOD_NONE;
+    if (win_modifiers & MOD_ALT)
+        modifiers|=wxMOD_ALT;
+    if (win_modifiers & MOD_SHIFT)
+        modifiers|=wxMOD_SHIFT;
+    if (win_modifiers & MOD_CONTROL)
+        modifiers|=wxMOD_CONTROL;
+    if (win_modifiers & MOD_WIN)
+        modifiers|=wxMOD_WIN;
+*/
+    wxKeyEvent event(CreateKeyEvent(wxEVT_HOTKEY, virtualKey, wParam, lParam));
+    event.SetId(hotkeyId);
+    event.m_shiftDown = (win_modifiers & MOD_SHIFT) != 0;
+    event.m_controlDown = (win_modifiers & MOD_CONTROL) != 0;
+    event.m_altDown = (win_modifiers & MOD_ALT) != 0;
+    event.m_metaDown = (win_modifiers & MOD_WIN) != 0;
+    return GetEventHandler()->ProcessEvent(event);    
+}
+
+#endif
Index: docs/latex/wx/window.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/window.tex,v
retrieving revision 1.115
diff -b -u -2 -r1.115 window.tex
--- docs/latex/wx/window.tex	2003/05/30 21:20:25	1.115
+++ docs/latex/wx/window.tex	2003/06/22 07:03:07
@@ -1806,4 +1806,35 @@
 This is the same as \helpref{Refresh}{wxwindowrefresh} but has a nicer syntax.
 
+\membersection{wxWindow::RegisterHotKey}\label{wxwindowregisterhotkey}
+
+\func{bool}{RegisterHotKey}{\param{int}{hotkeyId}, \param{int}{modifiers}, \param{int}{virtualKeyCode}}
+
+Registers a system wide hotkey. Every time the user presses the hotkey registered here, this window
+will receive a hotkey event. It will receive the event even if the application is in the background
+and does not have the input focus because the user is working with some other application.
+
+\wxheading{Parameters}
+
+\docparam{hotkeyId}{Numeric identifier of the hotkey. For applications this must be between 0 and 0xBFFF. If
+this function is called from a shared DLL, it must be a system wide unique identifier between 0xC000 and 0xFFFF.
+This is a MSW specific detail.}
+
+\docparam{modifiers}{A bitwise combination of {\tt wxMOD_SHIFT}, {\tt wxMOD_CONTROL}, {\tt wxMOD_ALT}
+or {\tt wxMOD_WIN} specifying the modifier keys that have to be pressed along with the key.}
+
+\docparam{virtualKeyCode}{The virtual key code of the hotkey.}
+
+\wxheading{Return value}
+
+{\tt TRUE} if the hotkey was registered successfully. {\tt FALSE} if some other application already registered a
+hotkey with this modifier/virtualKeyCode combination.
+
+\wxheading{Remarks}
+
+Use EVT_HOTKEY(hotkeyId, fnc) in the event table to capture the event. This function is currently only implemented under MSW.
+
+\wxheading{See also}
+\helpref{UnregisterHotKey}{unregisterhotkey}
+
 \membersection{wxWindow::ReleaseMouse}\label{wxwindowreleasemouse}
 
@@ -2730,4 +2761,25 @@
 
 \membersection{wxWindow::Update}\label{wxwindowupdate}
+
+\membersection{wxWindow::UnregisterHotKey}\label{wxwindowunregisterhotkey}
+
+\func{bool}{UnregisterHotKey}{\param{int}{hotkeyId}}
+
+Unregisters a system wide hotkey.
+
+\wxheading{Parameters}
+
+\docparam{hotkeyId}{Numeric identifier of the hotkey. Must be the same id passed to RegisterHotKey.}
+
+\wxheading{Return value}
+
+{\tt TRUE} if the hotkey was unregistered successfully. {\tt FALSE} if the id was invalid.
+
+\wxheading{Remarks}
+
+This function is currently only implemented under MSW.
+
+\wxheading{See also}
+\helpref{RegisterHotKey}{registerhotkey}
 
 \func{virtual void}{Update}{\void}

 	  	 

Index: include/wx/txtstrm.h
===================================================================
--- include/wx/txtstrm.h	(revision 76167)
+++ include/wx/txtstrm.h	(working copy)
@@ -45,10 +45,11 @@
     ~wxTextInputStream();
 
     const wxInputStream& GetInputStream() const { return m_input; }
-
+    wxUint64 Read64(int base = 10);
     wxUint32 Read32(int base = 10); // base may be between 2 and 36, inclusive, or the special 0 (= C format)
     wxUint16 Read16(int base = 10);
     wxUint8  Read8(int base = 10);
+    wxInt64  Read64S(int base = 10);
     wxInt32  Read32S(int base = 10);
     wxInt16  Read16S(int base = 10);
     wxInt8   Read8S(int base = 10);
@@ -68,8 +69,10 @@
 #endif // wxUSE_UNICODE
     wxTextInputStream& operator>>(wxInt16& i);
     wxTextInputStream& operator>>(wxInt32& i);
+    wxTextInputStream& operator>>(wxInt64& i);
     wxTextInputStream& operator>>(wxUint16& i);
     wxTextInputStream& operator>>(wxUint32& i);
+    wxTextInputStream& operator>>(wxUint64& i);
     wxTextInputStream& operator>>(double& i);
     wxTextInputStream& operator>>(float& f);
 
@@ -117,7 +120,8 @@
 
     void SetMode( wxEOL mode = wxEOL_NATIVE );
     wxEOL GetMode() { return m_mode; }
-
+    
+    void Write64(wxUint64 i);
     void Write32(wxUint32 i);
     void Write16(wxUint16 i);
     void Write8(wxUint8 i);
@@ -135,8 +139,10 @@
 #endif // wxUSE_UNICODE
     wxTextOutputStream& operator<<(wxInt16 c);
     wxTextOutputStream& operator<<(wxInt32 c);
+    wxTextOutputStream& operator<<(wxInt64 c);
     wxTextOutputStream& operator<<(wxUint16 c);
     wxTextOutputStream& operator<<(wxUint32 c);
+    wxTextOutputStream& operator<<(wxUint64 c);
     wxTextOutputStream& operator<<(double f);
     wxTextOutputStream& operator<<(float f);
 
Index: interface/wx/txtstrm.h
===================================================================
--- interface/wx/txtstrm.h	(revision 76167)
+++ interface/wx/txtstrm.h	(working copy)
@@ -112,8 +112,26 @@
         See Read8() for the description of the @a base parameter.
     */
     wxInt32 Read32S(int base = 10);
+    
+    /**
+        Reads a 64 bit unsigned integer from the stream.
 
+        See Read8() for the description of the @a base parameter.
+        
+        @since 3.1.0
+    */
+    wxUint64 Read64(int base = 10);
+
     /**
+        Reads a 64 bit signed integer from the stream.
+
+        See Read8() for the description of the @a base parameter.
+        
+        @since 3.1.0
+    */
+    wxInt64 Read64S(int base = 10);
+
+    /**
         Reads a single unsigned byte from the stream, given in base @a base.
 
         The value of @a base must be comprised between 2 and 36, inclusive, or
@@ -296,6 +314,13 @@
         Writes the single byte @a i8 to the stream.
     */
     void Write8(wxUint8 i8);
+    
+    /**
+        Writes the 64 bit integer @a i64 to the stream.
+        
+        @since 3.1.0
+    */
+    void Write64(wxUint64 i64);
 
     /**
         Writes the double @a f to the stream using the IEEE format.
Index: src/common/txtstrm.cpp
===================================================================
--- src/common/txtstrm.cpp	(revision 76167)
+++ src/common/txtstrm.cpp	(working copy)
@@ -146,6 +146,20 @@
     return false;
 }
 
+wxUint64 wxTextInputStream::Read64(int base)
+{
+    wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
+    if(!m_input) return 0;
+
+    wxString word = ReadWord();
+    if(word.empty())
+        return 0;
+        
+    wxUint64 res;
+    if(!word.ToULongLong(&res, base)) return 0;
+    return res;
+}
+
 wxUint32 wxTextInputStream::Read32(int base)
 {
     wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
@@ -167,6 +181,20 @@
     return (wxUint8)Read32(base);
 }
 
+wxInt64 wxTextInputStream::Read64S(int base)
+{
+    wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
+    if(!m_input) return 0;
+
+    wxString word = ReadWord();
+    if(word.empty())
+        return 0;
+        
+    wxInt64 res;
+    if(!word.ToLongLong(&res, base)) return 0;
+    return res;
+}
+
 wxInt32 wxTextInputStream::Read32S(int base)
 {
     wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
@@ -287,6 +315,12 @@
     return *this;
 }
 
+wxTextInputStream& wxTextInputStream::operator>>(wxInt64& i)
+{
+    i = (wxInt64)Read64();
+    return *this;
+}
+
 wxTextInputStream& wxTextInputStream::operator>>(wxUint16& i)
 {
     i = Read16();
@@ -299,6 +333,12 @@
     return *this;
 }
 
+wxTextInputStream& wxTextInputStream::operator>>(wxUint64& i)
+{
+    i = Read64();
+    return *this;
+}
+
 wxTextInputStream& wxTextInputStream::operator>>(double& i)
 {
     i = ReadDouble();
@@ -354,6 +394,14 @@
     }
 }
 
+void wxTextOutputStream::Write64(wxUint64 i)
+{
+    wxString str;
+    str.Printf(wxT("%" wxLongLongFmtSpec "u"), (unsigned long long)i);
+
+    WriteString(str);
+}
+
 void wxTextOutputStream::Write32(wxUint32 i)
 {
     wxString str;
@@ -495,6 +543,15 @@
     return *this;
 }
 
+wxTextOutputStream& wxTextOutputStream::operator<<(wxInt64 c)
+{
+    wxString str;
+    str.Printf(wxT("%" wxLongLongFmtSpec "d"), (signed long long)c);
+    WriteString(str);
+
+    return *this;
+}
+
 wxTextOutputStream& wxTextOutputStream::operator<<(wxUint16 c)
 {
     wxString str;
@@ -513,6 +570,15 @@
     return *this;
 }
 
+wxTextOutputStream& wxTextOutputStream::operator<<(wxUint64 c)
+{
+    wxString str;
+    str.Printf(wxT("%" wxLongLongFmtSpec "u"), (unsigned long long)c);
+    WriteString(str);
+
+    return *this;
+}
+
 wxTextOutputStream &wxTextOutputStream::operator<<(double f)
 {
     WriteDouble(f);

diff -rub2 wxWindows.cvs/include/wx/event.h wxWindows/include/wx/event.h
--- wxWindows.cvs/include/wx/event.h	Thu Feb  8 17:17:08 2001
+++ wxWindows/include/wx/event.h	Thu Feb  8 17:43:54 2001
@@ -129,4 +129,5 @@
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOOL_ENTER, 17)
     DECLARE_EVENT_TYPE(wxEVT_COMMAND_SPINCTRL_UPDATED, 18)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, 19)
 
         // Sockets and timers send events, too
@@ -371,4 +372,5 @@
  wxEVT_COMMAND_VLBOX_SELECTED
  wxEVT_COMMAND_COMBOBOX_SELECTED
+ wxEVT_COMMAND_TOGGLEBUTTON_CLICKED
 */
 
@@ -1835,4 +1837,5 @@
 // Convenience macros for commonly-used commands
 #define EVT_BUTTON(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_BUTTON_CLICKED, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
+#define EVT_TOGGLEBUTTON(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
 #define EVT_CHECKBOX(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_CHECKBOX_CLICKED, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
 #define EVT_CHOICE(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_CHOICE_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) & fn, (wxObject *) NULL ),
diff -rub2 wxWindows.cvs/include/wx/gtk/togglebutton.h wxWindows/include/wx/gtk/togglebutton.h
--- wxWindows.cvs/include/wx/gtk/togglebutton.h	Thu Feb  8 18:01:37 2001
+++ wxWindows/include/wx/gtk/togglebutton.h	Thu Feb  8 17:19:11 2001
@@ -0,0 +1,85 @@
+/***
+ ***  Name:       togglebutton.h
+ ***  Purpose:    Declaration of the wxToggleButton class, which implements a
+ ***              toggle button under wxGTK.
+ ***  Author:     John Norris, minor changes by Axel Schlueter
+ ***  Copyright:  (c) 2000 Johnny C. Norris II
+ ***  Licence:    Rocketeer licence
+ ***/
+
+#ifndef _TOGGLEBUTTON_H
+#define _TOGGLEBUTTON_H
+
+#include "wx/defs.h"
+
+// Toggle buttons are basically check boxes, so if you don't want one, you
+// probably don't want the other, either.  
+#if wxUSE_CHECKBOX
+
+#include "wx/object.h"
+#include "wx/list.h"
+#include "wx/control.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class wxToggleButton;
+
+//-----------------------------------------------------------------------------
+// global data
+//-----------------------------------------------------------------------------
+
+extern const char *wxCheckBoxNameStr;
+
+//-----------------------------------------------------------------------------
+// wxToggleButton
+//-----------------------------------------------------------------------------
+
+class wxToggleButton: public wxControl
+{
+   public:
+      // construction/destruction
+      wxToggleButton() {}
+      wxToggleButton(wxWindow *parent, wxWindowID id, const wxString& label,
+                     const wxPoint& pos = wxDefaultPosition,
+                     const wxSize& size = wxDefaultSize, long style = 0,
+                     const wxValidator& validator = wxDefaultValidator,
+                     const wxString& name = wxCheckBoxNameStr)
+      {
+         Create(parent, id, label, pos, size, style, validator, name);
+      }
+
+      // Create the control
+      bool Create(wxWindow *parent, wxWindowID id, const wxString& label,
+                  const wxPoint& pos = wxDefaultPosition,
+                  const wxSize& size = wxDefaultSize, long style = 0,
+                  const wxValidator& validator = wxDefaultValidator,
+                  const wxString& name = wxCheckBoxNameStr);
+
+      // Get/set the value
+      void SetValue(bool state);
+      bool GetValue() const;
+
+      // Set the label
+      void SetLabel(const wxString& label);
+      bool Enable(bool enable = TRUE);
+
+   protected:
+      // Callback function given to gtk
+      static void gtk_togglebutton_clicked_callback(GtkWidget *widget,
+                                                    wxToggleButton *win);
+
+      // wx stuff
+      void ApplyWidgetStyle();
+      bool IsOwnGtkWindow(GdkWindow *window);
+      void OnInternalIdle();
+      virtual wxSize DoGetBestSize() const;
+
+   private:
+      DECLARE_DYNAMIC_CLASS(wxToggleButton)
+};
+
+#endif
+
+#endif // _TOGGLEBUTTON_H
diff -rub2 wxWindows.cvs/include/wx/msw/togglebutton.h wxWindows/include/wx/msw/togglebutton.h
--- wxWindows.cvs/include/wx/msw/togglebutton.h	Thu Feb  8 18:01:40 2001
+++ wxWindows/include/wx/msw/togglebutton.h	Thu Feb  8 17:19:22 2001
@@ -0,0 +1,59 @@
+/***
+ ***  Name:       togglebutton.h
+ ***  Purpose:    Declaration of the wxToggleButton class, which implements a
+ ***              toggle button under wxMSW.
+ ***  Author:     John Norris, minor changes by Axel Schlueter
+ ***  Copyright:  (c) 2000 Johnny C. Norris II
+ ***  Licence:    Rocketeer licence
+ ***/
+
+#ifndef _TOGGLEBUTTON_H 
+#define _TOGGLEBUTTON_H
+
+#include "wx/control.h"
+#include "wx/defs.h"
+
+// Toggle buttons are basically check boxes, so if you don't want one, you
+// probably don't want the other, either. 
+# if wxUSE_CHECKBOX
+
+WXDLLEXPORT_DATA(extern const wxChar*) wxCheckBoxNameStr;
+
+// Checkbox item (single checkbox)
+class WXDLLEXPORT wxToggleButton : public wxControl {
+   public:
+      wxToggleButton() {}
+      wxToggleButton(wxWindow *parent, wxWindowID id, const wxString& label,
+                     const wxPoint& pos = wxDefaultPosition,
+                     const wxSize& size = wxDefaultSize, long style = 0,
+                     const wxValidator& validator = wxDefaultValidator,
+                     const wxString& name = wxCheckBoxNameStr)
+	  {
+         Create(parent, id, label, pos, size, style, validator, name);
+	  }
+
+      bool Create(wxWindow *parent, wxWindowID id, const wxString& label,
+                  const wxPoint& pos = wxDefaultPosition,
+                  const wxSize& size = wxDefaultSize, long style = 0,
+                  const wxValidator& validator = wxDefaultValidator,
+                  const wxString& name = wxCheckBoxNameStr);
+
+      virtual void SetValue(bool value);
+      virtual bool GetValue() const ;
+
+	  static wxSize GetDefaultSize();
+
+      virtual bool MSWCommand(WXUINT param, WXWORD id);
+      virtual void SetLabel(const wxString& label);
+      virtual void Command(wxCommandEvent& event);
+
+   protected:
+      virtual wxSize DoGetBestSize() const;
+
+   private:
+      DECLARE_DYNAMIC_CLASS(wxToggleButton)
+};
+
+# endif // wxUSE_CHECKBOX
+
+#endif // _TOGGLEBUTTON_H
diff -rub2 wxWindows.cvs/include/wx/togglebutton.h wxWindows/include/wx/togglebutton.h
--- wxWindows.cvs/include/wx/togglebutton.h	Thu Feb  8 18:01:42 2001
+++ wxWindows/include/wx/togglebutton.h	Thu Feb  8 17:19:32 2001
@@ -0,0 +1,31 @@
+/***
+ ***  Name:       togglebutton.h (base)
+ ***  Purpose:    This dummy header includes the proper header file for the
+ ***              system we're compiling under.
+ ***  Author:     John Norris, minor changes by Axel Schlueter
+ ***  Copyright:  (c) 2000 Johnny C. Norris II
+ ***  Licence:    Rocketeer licence
+ ***/
+
+#ifndef _TOGGLEBUTTON_H_BASE 
+#define _TOGGLEBUTTON_H_BASE
+
+# if defined(__WXMSW__)
+#  include "wx/msw/togglebutton.h"
+# elif defined(__WXGTK__)
+#  include "wx/gtk/togglebutton.h"
+/*
+# elif defined(__WXMOTIF__)
+#  include "wx/motif/togglebutton.h"
+# elif defined(__WXQT__)
+#  include "wx/qt/togglebutton.h"
+# elif defined(__WXMAC__)
+#  include "wx/mac/togglebutton.h"
+# elif defined(__WXPM__)
+#  include "wx/os2/togglebutton.h"
+# elif defined(__WXSTUBS__)
+#  include "wx/stubs/togglebutton.h"
+*/
+# endif
+
+#endif // _TOGGLEBUTT_H_BASE
diff -rub2 wxWindows.cvs/include/wx/wx.h wxWindows/include/wx/wx.h
--- wxWindows.cvs/include/wx/wx.h	Thu Feb  8 17:17:09 2001
+++ wxWindows/include/wx/wx.h	Thu Feb  8 17:23:16 2001
@@ -36,4 +36,5 @@
 #include "wx/dcscreen.h"
 #include "wx/button.h"
+#include "wx/togglebutton.h"
 #include "wx/menu.h"
 #include "wx/pen.h"
diff -rub2 wxWindows.cvs/src/common/event.cpp wxWindows/src/common/event.cpp
--- wxWindows.cvs/src/common/event.cpp	Thu Feb  8 17:17:38 2001
+++ wxWindows/src/common/event.cpp	Thu Feb  8 17:44:44 2001
@@ -113,4 +113,5 @@
 
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_BUTTON_CLICKED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHECKBOX_CLICKED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHOICE_SELECTED)
diff -rub2 wxWindows.cvs/src/gtk/files.lst wxWindows/src/gtk/files.lst
--- wxWindows.cvs/src/gtk/files.lst	Thu Feb  8 17:17:47 2001
+++ wxWindows/src/gtk/files.lst	Thu Feb  8 17:22:21 2001
@@ -200,4 +200,5 @@
 		gtk/textctrl.cpp \
 		gtk/timer.cpp \
+		gtk/togglebutton.cpp \
 		gtk/tooltip.cpp \
 		gtk/utilsgtk.cpp \
@@ -418,4 +419,5 @@
 		tipdlg.h \
 		tipwin.h \
+		togglebutton.h \
 		tokenzr.h \
 		toolbar.h \
@@ -502,4 +504,5 @@
 		gtk/textctrl.h \
 		gtk/timer.h \
+		gtk/togglebutton.h \
 		gtk/tooltip.h \
 		gtk/treectrl.h \
@@ -917,4 +920,5 @@
 		textctrl.o \
 		timer.o \
+		togglebutton.o \
 		tooltip.o \
 		utilsgtk.o \
diff -rub2 wxWindows.cvs/src/gtk/togglebutton.cpp wxWindows/src/gtk/togglebutton.cpp
--- wxWindows.cvs/src/gtk/togglebutton.cpp	Thu Feb  8 18:02:00 2001
+++ wxWindows/src/gtk/togglebutton.cpp	Thu Feb  8 17:19:55 2001
@@ -0,0 +1,193 @@
+/***
+ ***  Name:       togglebutton.cpp
+ ***  Purpose:    Definition of the wxToggleButton class, which implements a
+ ***              toggle button under wxGTK.
+ ***  Author:     John Norris, minor changes by Axel Schlueter
+ ***  Copyright:  (c) 2000 Johnny C. Norris II
+ ***  Licence:    Rocketeer licence
+ ***/
+
+#include "wx/togglebutton.h"
+
+#if wxUSE_CHECKBOX
+
+#include <gdk/gdk.h>
+#include <gtk/gtk.h>
+
+extern void wxapp_install_idle_handler();
+extern bool g_isIdle;
+extern bool      g_blockEventsOnDrag;
+extern wxCursor   g_globalCursor;
+
+// void gtk_togglebutton_clicked_callback(GtkWidget *widget, wxToggleButton *cb)
+// Callback function given to gtk.
+void wxToggleButton::gtk_togglebutton_clicked_callback(GtkWidget *WXUNUSED(widget), wxToggleButton *cb)
+{
+   if (g_isIdle)
+      wxapp_install_idle_handler();
+
+   if (!cb->m_hasVMT || g_blockEventsOnDrag)
+      return;
+
+   // Generate a wx event.
+   wxCommandEvent event(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, cb->GetId());
+   event.SetInt(cb->GetValue());
+   event.SetEventObject(cb);
+   cb->GetEventHandler()->ProcessEvent(event);
+}
+
+IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxControl)
+
+// bool Create(wxWindow *parent, wxWindowID id, const wxString &label,
+//             const wxPoint &pos, const wxSize &size, long style,
+//             const wxValidator& validator, const wxString &name)
+// Create the control.
+bool wxToggleButton::Create(wxWindow *parent, wxWindowID id,
+                            const wxString &label, const wxPoint &pos,
+                            const wxSize &size, long style,
+                            const wxValidator& validator,
+                            const wxString &name)
+{
+   m_needParent = TRUE;
+   m_acceptsFocus = TRUE;
+
+   if (!PreCreation(parent, pos, size) ||
+       !CreateBase(parent, id, pos, size, style, validator, name )) {
+      wxFAIL_MSG(wxT("wxToggleButton creation failed"));
+      return FALSE;
+   }
+
+   wxControl::SetLabel(label);
+
+   // Create the gtk widget.
+   m_widget = gtk_toggle_button_new_with_label(m_label.mbc_str());
+
+   gtk_signal_connect(GTK_OBJECT(m_widget), "clicked",
+                      GTK_SIGNAL_FUNC(gtk_togglebutton_clicked_callback),
+                      (gpointer *)this);
+
+   m_parent->DoAddChild(this);
+
+   PostCreation();
+
+   SetFont(parent->GetFont());
+
+   wxSize size_best(DoGetBestSize());
+   wxSize new_size(size);
+   if (new_size.x == -1)
+      new_size.x = size_best.x;
+   if (new_size.y == -1)
+      new_size.y = size_best.y;
+   if ((new_size.x != size.x) || (new_size.y != size.y))
+      SetSize(new_size.x, new_size.y);
+
+   SetBackgroundColour(parent->GetBackgroundColour());
+   SetForegroundColour(parent->GetForegroundColour());
+
+   Show(TRUE);
+
+   return TRUE;
+}
+
+// void SetValue(bool state)
+// Set the value of the toggle button.
+void wxToggleButton::SetValue(bool state)
+{
+   wxCHECK_RET(m_widget != NULL, wxT("invalid toggle button"));
+
+   if (state == GetValue())
+      return;
+
+   gtk_signal_disconnect_by_func(GTK_OBJECT(m_widget),
+                                 GTK_SIGNAL_FUNC(gtk_togglebutton_clicked_callback),
+                                 (gpointer *)this);
+
+   gtk_toggle_button_set_state(GTK_TOGGLE_BUTTON(m_widget), state);
+   
+   gtk_signal_connect(GTK_OBJECT(m_widget), "clicked",
+                      GTK_SIGNAL_FUNC(gtk_togglebutton_clicked_callback),
+                      (gpointer *)this);
+}
+
+// bool GetValue() const
+// Get the value of the toggle button.
+bool wxToggleButton::GetValue() const
+{
+   wxCHECK_MSG(m_widget != NULL, FALSE, wxT("invalid toggle button"));
+
+   return GTK_TOGGLE_BUTTON(m_widget)->active;
+}
+
+// void SetLabel(const wxString& label)
+// Set the button's label.
+void wxToggleButton::SetLabel(const wxString& label)
+{
+   wxCHECK_RET(m_widget != NULL, wxT("invalid toggle button"));
+
+   wxControl::SetLabel(label);
+
+   gtk_label_set(GTK_LABEL(GTK_BUTTON(m_widget)->child),
+                 GetLabel().mbc_str());
+}
+
+// bool Enable(bool enable)
+// Enable (or disable) the control.
+bool wxToggleButton::Enable(bool enable /*=TRUE*/)
+{
+   if (!wxControl::Enable(enable))
+      return FALSE;
+
+   gtk_widget_set_sensitive(GTK_BUTTON(m_widget)->child, enable);
+
+   return TRUE;
+}
+
+// void ApplyWidgetStyle()
+// I don't really know what this does.
+void wxToggleButton::ApplyWidgetStyle()
+{
+   SetWidgetStyle();
+   gtk_widget_set_style(m_widget, m_widgetStyle);
+   gtk_widget_set_style(GTK_BUTTON(m_widget)->child, m_widgetStyle);
+}
+
+// bool IsOwnGtkWindow(GdkWindow *window)
+// I'm not really sure what this is for, either.
+bool wxToggleButton::IsOwnGtkWindow(GdkWindow *window)
+{
+   return (window == GTK_TOGGLE_BUTTON(m_widget)->event_window);
+}
+
+// void OnInternalIdle()
+// Apparently gtk cursors are difficult to deal with.
+void wxToggleButton::OnInternalIdle()
+{
+   wxCursor cursor = m_cursor;
+   if (g_globalCursor.Ok())
+      cursor = g_globalCursor;
+
+   if (GTK_TOGGLE_BUTTON(m_widget)->event_window && cursor.Ok()) {
+      /* I now set the cursor the anew in every OnInternalIdle call
+         as setting the cursor in a parent window also effects the
+         windows above so that checking for the current cursor is
+         not possible. */
+      
+      gdk_window_set_cursor(GTK_TOGGLE_BUTTON(m_widget)->event_window,
+                            cursor.GetCursor());
+   }
+
+   UpdateWindowUI();
+}
+
+// wxSize DoGetBestSize() const
+// Get the "best" size for this control.
+wxSize wxToggleButton::DoGetBestSize() const
+{
+   wxSize ret(wxControl::DoGetBestSize());
+   if (ret.x < 80)
+      ret.x = 80;
+
+   return ret;
+}
+
+#endif
diff -rub2 wxWindows.cvs/src/msw/togglebutton.cpp wxWindows/src/msw/togglebutton.cpp
--- wxWindows.cvs/src/msw/togglebutton.cpp	Thu Feb  8 18:02:03 2001
+++ wxWindows/src/msw/togglebutton.cpp	Thu Feb  8 17:20:04 2001
@@ -0,0 +1,174 @@
+/***
+ ***  Name:       togglebutton.cpp
+ ***  Purpose:    Definition of the wxToggleButton class, which implements a
+ ***              toggle button under wxMSW.
+ ***  Author:     John Norris, minor changes by Axel Schlueter
+ ***  Copyright:  (c) 2000 Johnny C. Norris II
+ ***  Licence:    Rocketeer licence
+ ***/
+
+#include "wx/togglebutton.h"
+
+#if wxUSE_CHECKBOX
+
+# include "wx/brush.h"
+# include "wx/dcscreen.h"
+# include "wx/settings.h"
+
+# include "wx/msw/private.h"
+
+// ----------------------------------------------------------------------------
+// macros
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxControl)
+#define BUTTON_HEIGHT_FROM_CHAR_HEIGHT(cy) (11*EDIT_HEIGHT_FROM_CHAR_HEIGHT(cy)/10)
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// wxToggleButton
+// ----------------------------------------------------------------------------
+
+bool wxToggleButton::MSWCommand(WXUINT WXUNUSED(param), WXWORD WXUNUSED(id))
+{
+   wxCommandEvent event(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, m_windowId);
+   event.SetInt(GetValue());
+   event.SetEventObject(this);
+   ProcessCommand(event);
+   return TRUE;
+}
+
+// Single check box item
+bool wxToggleButton::Create(wxWindow *parent, wxWindowID id,
+                            const wxString& label,
+                            const wxPoint& pos,
+                            const wxSize& size, long style,
+                            const wxValidator& validator,
+                            const wxString& name)
+{
+   if (!CreateBase(parent, id, pos, size, style, validator, name))
+      return FALSE;
+
+   parent->AddChild(this);
+
+   m_backgroundColour = parent->GetBackgroundColour();
+   m_foregroundColour = parent->GetForegroundColour();
+
+   long msStyle = BS_AUTOCHECKBOX | BS_PUSHLIKE | WS_TABSTOP | WS_CHILD | WS_VISIBLE;
+#ifdef __WIN32__
+   if(m_windowStyle & wxBU_LEFT)
+      msStyle |= BS_LEFT;
+   if(m_windowStyle & wxBU_RIGHT)
+      msStyle |= BS_RIGHT;
+   if(m_windowStyle & wxBU_TOP)
+      msStyle |= BS_TOP;
+   if(m_windowStyle & wxBU_BOTTOM)
+      msStyle |= BS_BOTTOM;
+#endif
+
+   m_hWnd = (WXHWND)CreateWindowEx(MakeExtendedStyle(m_windowStyle),
+	                               wxT("BUTTON"), label,
+                                   msStyle, 0, 0, 0, 0,
+                                   (HWND)parent->GetHWND(),
+								   (HMENU)m_windowId,
+                                   wxGetInstance(), NULL);
+
+   if (m_hWnd == 0) {
+        wxString msg;
+#ifdef __WIN16__
+        msg.Printf(wxT("CreateWindowEx failed"));
+#else
+        msg.Printf(wxT("CreateWindowEx failed with error number %ld"), (long) GetLastError());
+#endif
+        wxFAIL_MSG(msg);
+    }
+
+    // Subclass again for purposes of dialog editing mode
+    SubclassWin(m_hWnd);
+
+    SetFont(parent->GetFont());
+
+    SetSize(pos.x, pos.y, size.x, size.y);
+
+    return TRUE;
+}
+
+void wxToggleButton::SetLabel(const wxString& label)
+{
+    SetWindowText(GetHwnd(), label);
+}
+
+wxSize wxToggleButton::DoGetBestSize() const
+{
+   wxString label = wxGetWindowText(GetHWND());
+   int wBtn;
+   GetTextExtent(label, &wBtn, NULL);
+
+   int wChar, hChar;
+   wxGetCharSize(GetHWND(), &wChar, &hChar, &GetFont());
+
+   // add a margin - the button is wider than just its label
+   wBtn += 3*wChar;
+
+   // the button height is proportional to the height of the font used
+   int hBtn = BUTTON_HEIGHT_FROM_CHAR_HEIGHT(hChar);
+
+   wxSize sz = GetDefaultSize();
+   if (wBtn > sz.x) sz.x = wBtn;
+   if (hBtn > sz.y) sz.y = hBtn;
+
+   return sz;
+}
+
+void wxToggleButton::SetValue(bool val)
+{
+   SendMessage(GetHwnd(), BM_SETCHECK, val, 0);
+}
+
+#ifndef BST_CHECKED
+#define BST_CHECKED 0x0001
+#endif
+
+bool wxToggleButton::GetValue() const
+{
+#ifdef __WIN32__
+   return (SendMessage(GetHwnd(), BM_GETCHECK, 0, 0) == BST_CHECKED);
+#else
+   return ((0x001 & SendMessage(GetHwnd(), BM_GETCHECK, 0, 0)) == 0x001);
+#endif
+}
+
+wxSize wxToggleButton::GetDefaultSize()
+{
+    static wxSize s_sizeBtn;
+
+    if ( s_sizeBtn.x == 0 )
+    {
+        wxScreenDC dc;
+        dc.SetFont(wxSystemSettings::GetSystemFont(wxSYS_DEFAULT_GUI_FONT));
+
+        // the size of a standard button in the dialog units is 50x14,
+        // translate this to pixels
+        // NB1: the multipliers come from the Windows convention
+        // NB2: the extra +1/+2 were needed to get the size be the same as the
+        //      size of the buttons in the standard dialog - I don't know how
+        //      this happens, but on my system this size is 75x23 in pixels and
+        //      23*8 isn't even divisible by 14... Would be nice to understand
+        //      why these constants are needed though!
+        s_sizeBtn.x = (50 * (dc.GetCharWidth() + 1))/4;
+        s_sizeBtn.y = ((14 * dc.GetCharHeight()) + 2)/8;
+    }
+
+    return s_sizeBtn;
+}
+
+void wxToggleButton::Command(wxCommandEvent & event)
+{
+   SetValue((event.GetInt() != 0));
+   ProcessCommand(event);
+}
+
+#endif // wxUSE_CHECKBO

 	  	 

Index: docs/doxygen/mainpages/platdetails.h
===================================================================
--- docs/doxygen/mainpages/platdetails.h	(revision 54227)
+++ docs/doxygen/mainpages/platdetails.h	(working copy)
@@ -94,7 +94,7 @@
 
 
 
-@section page_port_wxmac wxCocoa
+@section page_port_wxcocoa wxCocoa
 
 @htmlonly
 <img src="osxleopard_logo.png" alt="Mac OS X (Leopard) logo"
@@ -153,7 +153,7 @@
 using the wxUniversal widget set which is now part of wxWidgets.
 wxX11 is well-suited for a number of special applications such
 as those running on systems with few resources (PDAs) or for
-applications which need to use a special themed look. 
+applications which need to use a special themed look.
 
 In order to configure wxWidgets to compile wxX11 you will
 need to type:
Index: interface/config.h
===================================================================
--- interface/config.h	(revision 54227)
+++ interface/config.h	(working copy)
@@ -34,7 +34,7 @@
                              platform.
     @li @c <wx/confbase.h> - Base config class.
     @li @c <wx/fileconf.h> - wxFileConfig class.
-    @li @c <wx/msw/regconf.h> - wxRegConfig class.
+    @li @c <wx/msw/regconf.h> - wxRegConfig class, see also wxRegKey.
 
 
     @section configbase_example Example
Index: interface/msw/registry.h
===================================================================
--- interface/msw/registry.h	(revision 54227)
+++ interface/msw/registry.h	(working copy)
@@ -17,37 +17,75 @@
     The Windows registry is easy to understand. There are five registry keys,
     namely:
 
-     HKEY_CLASSES_ROOT (HKCR)
-     HKEY_CURRENT_USER (HKCU)
-     HKEY_LOCAL_MACHINE (HKLM)
-     HKEY_CURRENT_CONFIG (HKCC)
-     HKEY_USERS (HKU)
+    @li @c HKEY_CLASSES_ROOT (HKCR)
+    @li @c HKEY_CURRENT_USER (HKCU)
+    @li @c HKEY_LOCAL_MACHINE (HKLM)
+    @li @c HKEY_CURRENT_CONFIG (HKCC)
+    @li @c HKEY_USERS (HKU)
 
     After creating a key, it can hold a value. The values can be:
 
-     String Value
-     Binary Value
-     DWORD Value
-     Multi String Value
-     Expandable String Value
+    @li String Value
+    @li Binary Value
+    @li DWORD Value
+    @li Multi String Value
+    @li Expandable String Value
 
     @onlyfor{wxmsw}
 
     @library{wxbase}
-    @category{FIXME}
+    @category{misc}
+
+    @b Example:
+
+    @code
+    wxRegKey *pRegKey = new wxRegKey("HKEY_LOCAL_MACHINE\\Software\\MyKey");
+
+    //will create the Key if it does not exist
+    if( !pRegKey->Exists() )
+        pRegKey->Create();
+
+    //will create a new value MYVALUE and set it to 12
+    pRegKey->SetValue("MYVALUE",12);
+
+    //Query for the Value and Retrieve it
+    long lMyVal;
+    wxString strTemp;
+    pRegKey->QueryValue("MYVALUE",&lMyVal);
+    strTemp.Printf("%d",lMyVal);
+    wxMessageBox(strTemp,"Registry Value",0,this);
+
+    //Retrive the number of SubKeys and enumerate them
+    size_t nSubKeys;
+    pRegKey->GetKeyInfo(&nSubKeys,NULL,NULL,NULL);
+
+    pRegKey->GetFirstKey(strTemp,1);
+    for(int i=0;i<nSubKeys;i++)
+    {
+         wxMessageBox(strTemp,"SubKey Name",0,this);
+         pRegKey->GetNextKey(strTemp,1);
+    }
+    @endcode
 */
 class wxRegKey
 {
 public:
-    //@{
+
     /**
+        The Constructor to set to @c HKEY_CLASSES_ROOT.
+    */
+    wxRegKey();
+
+    /**
+        The constructor to set the full name of the key.
+    */
+    wxRegKey(const wxString& strKey);
+
+    /**
         The constructor to set the full name of the key under a previously created
         parent.
     */
-    wxRegKey();
-    wxRegKey(const wxString& strKey);
     wxRegKey(const wxRegKey& keyParent, const wxString& strKey);
-    //@}
 
     /**
         Closes the key.
@@ -152,18 +190,20 @@
 
     /**
         Explicitly opens the key. This method also allows the key to be opened in
-        read-only mode by passing @c Read() instead of default
-        @c Write() parameter.
+        read-only mode by passing @c wxRegKey::Read instead of default
+        @c wxRegKey::Write parameter.
     */
     bool Open(AccessMode mode = Write);
 
-    //@{
     /**
+        Retrieves the string value.
+    */
+    bool QueryValue(const wxChar* szValue, wxString& strValue) const;
+
+    /**
         Retrieves the numeric value.
     */
-    bool QueryValue(const wxChar* szValue, wxString& strValue) const;
     const bool QueryValue(const wxChar* szValue, long* plValue) const;
-    //@}
 
     /**
         Renames the key.
@@ -176,16 +216,20 @@
     bool RenameValue(const wxChar* szValueOld,
                      const wxChar* szValueNew);
 
-    //@{
     /**
-        Sets the given @a szValue which must be numeric, string or binary depending
-        on the overload used. If the value doesn't exist, it is created.
+        Sets the given @a szValue which must be numeric. If the value doesn't exist, it is created.
     */
     bool SetValue(const wxChar* szValue, long lValue);
+
+    /**
+        Sets the given @a szValue which must be string. If the value doesn't exist, it is created.
+    */
     bool SetValue(const wxChar* szValue,
                   const wxString& strValue);
+    /**
+        Sets the given @a szValue which must be binary. If the value doesn't exist, it is created.
+    */
     bool SetValue(const wxChar* szValue,
                   const wxMemoryBuffer& buf);
-    //@}
 };
 
Index: interface/radiobox.h
===================================================================
--- interface/radiobox.h	(revision 54227)
+++ interface/radiobox.h	(working copy)
@@ -178,10 +178,10 @@
         @beginWxPythonOnly
         In place of a single overloaded method name, wxPython implements the following methods:
 
-        @beginTable
-        @row2col{Enable(flag), Enables or disables the entire radiobox.}
-        @row2col{EnableItem(n\, flag), Enables or disables an individual button in the radiobox.}
-        @endTable
+        @beginFlagTable
+        @flag{Enable(flag)} Enables or disables the entire radiobox.
+        @flag{EnableItem(n\, flag)} Enables or disables an individual button in the radiobox.
+        @endFlagTable
 
         @endWxPythonOnly
     */
@@ -306,10 +306,10 @@
         @beginWxPythonOnly
         In place of a single overloaded method name, wxPython implements the following methods:
 
-        @beginTable
-        @row2col{Show(flag), Shows or hides the entire radiobox.}
-        @row2col{ShowItem(n\, flag), Shows or hides individual buttons.}
-        @endTable
+        @beginFlagTable
+        @flag{Show(flag)} Shows or hides the entire radiobox.
+        @flag{ShowItem(n\, flag)} Shows or hides individual buttons.
+        @endFlagTable
 
         @endWxPythonOnly
 
Index: interface/recguard.h
===================================================================
--- interface/recguard.h	(revision 54227)
+++ interface/recguard.h	(working copy)
@@ -19,7 +19,7 @@
     would never be detected.
 
     @library{wxbase}
-    @category{FIXME}
+    @category{misc}
 */
 class wxRecursionGuardFlag
 {
@@ -65,7 +65,7 @@
     way (for example because an exception has been thrown).
 
     @library{wxbase}
-    @category{FIXME}
+    @category{misc}
 */
 class wxRecursionGuard
 {
Index: interface/regex.h
===================================================================
--- interface/regex.h	(revision 54227)
+++ interface/regex.h	(working copy)
@@ -7,7 +7,9 @@
 /////////////////////////////////////////////////////////////////////////////
 
 /**
-    Flags for regex compilation to be used with Compile().
+	@anchor wxRECompileFlags
+
+    Flags for regex compilation to be used with wxRegEx::Compile().
 */
 enum
 {
@@ -38,9 +40,12 @@
 };
 
 /**
-    Flags for regex matching to be used with Matches().
+	@anchor wxREMatchFlags
+
+    Flags for regex matching to be used with wxRegEx::Matches().
+
     These flags are mainly useful when doing several matches in a long string
-    to prevent erroneous matches for ¡¯¡¯ and ¡¯$¡¯:
+    to prevent erroneous matches for '^' and '$':
 */
 enum
 {
@@ -120,7 +125,7 @@
         Create and compile the regular expression, use
         IsValid() to test for compilation errors.
 
-        @todo Add referece to the flag enum.
+        As for the flags, please see @ref wxRECompileFlags.
     */
     wxRegEx(const wxString& expr, int flags = wxRE_DEFAULT);
 
@@ -134,7 +139,7 @@
         Compile the string into regular expression, return @true if ok or @false
         if string has a syntax error.
 
-        @todo Add referece to the flag enum.
+        As for the flags, please see @ref wxRECompileFlags.
     */
     bool Compile(const wxString& pattern, int flags = wxRE_DEFAULT);
 
@@ -179,8 +184,8 @@
         Matches the precompiled regular expression against the string @a text,
         returns @true if matches and @false otherwise.
 
-        @e Flags may be combination of @c wxRE_NOTBOL and @c wxRE_NOTEOL.
-        @todo  Add referece to the flag enum.
+        @e Flags may be combination of @c wxRE_NOTBOL and @c wxRE_NOTEOL, see
+        @ref wxREMatchFlags.
 
         Some regex libraries assume that the text given is null terminated, while
         others require the length be given as a separate parameter. Therefore for
@@ -202,8 +207,8 @@
         Matches the precompiled regular expression against the string @a text,
         returns @true if matches and @false otherwise.
 
-        @e Flags may be combination of @c wxRE_NOTBOL and @c wxRE_NOTEOL.
-        @todo  Add referece to the flag enum.
+        @e Flags may be combination of @c wxRE_NOTBOL and @c wxRE_NOTEOL, see
+        @ref wxREMatchFlags.
 
         May only be called after successful call to Compile().
     */
Index: interface/region.h
===================================================================
--- interface/region.h	(revision 54227)
+++ interface/region.h	(working copy)
@@ -7,6 +7,35 @@
 /////////////////////////////////////////////////////////////////////////////
 
 /**
+    An empty region.
+*/
+wxRegion wxNullRegion;
+
+/**
+    Return value of wxRegion::Contains().
+*/
+enum wxRegionContain
+{
+	/** It is not contained within the region. */
+    wxOutRegion = 0,
+
+	/**
+		It is partially contained within the region.
+
+		On Windows, this value won't be returned.
+	*/
+    wxPartRegion = 1,
+
+	/**
+		It is contained within the region.
+
+		On Windows, this return value indicates that all or some part of the region is
+		contained in this region.
+    */
+    wxInRegion = 2
+};
+
+/**
     @class wxRegionIterator
     @wxheader{region.h}
 
@@ -30,16 +59,19 @@
 class wxRegionIterator : public wxObject
 {
 public:
-    //@{
+
     /**
+        Default constructor.
+    */
+    wxRegionIterator();
+
+    /**
         Creates an iterator object given a region.
     */
-    wxRegionIterator();
     wxRegionIterator(const wxRegion& region);
-    //@}
 
     /**
-        An alias for GetHeight.
+        An alias for GetHeight().
     */
     wxCoord GetH() const;
 
@@ -54,7 +86,7 @@
     wxRect GetRect() const;
 
     /**
-        An alias for GetWidth.
+        An alias for GetWidth().
     */
     wxCoord GetW() const;
 
@@ -78,22 +110,29 @@
     */
     bool HaveRects() const;
 
-    //@{
     /**
+        Resets the iterator to the beginning of the rectangles.
+    */
+    void Reset();
+
+    /**
         Resets the iterator to the given region.
     */
-    void Reset();
     void Reset(const wxRegion& region);
-    //@}
 
     /**
         Increment operator. Increments the iterator to the next region.
+
+        @beginWxPythonOnly
+        A wxPython alias for this operator is called Next.
+        @endWxPythonOnly
     */
     void operator ++();
 
     /**
         Returns @true if there are still some rectangles; otherwise returns @false.
-        You can use this to test the iterator object as if it were of type bool.
+
+        You can use this to test the iterator object as if it were of type @b bool.
     */
     operator bool() const;
 };
@@ -106,7 +145,7 @@
 
     A wxRegion represents a simple or complex region on a device context or window.
 
-    This class uses @ref overview_trefcount "reference counting and copy-on-write"
+    This class uses @ref overview_refcount "reference counting and copy-on-write"
     internally so that assignments between two instances of this class are very
     cheap. You can therefore use actual objects instead of pointers without
     efficiency problems. If an instance of this class is changed it will create
@@ -121,26 +160,56 @@
 class wxRegion : public wxGDIObject
 {
 public:
-    //@{
+
     /**
-        Constructs a region using the non-transparent pixels of a bitmap.  See
-        Union() for more details.
+        Default constructor.
     */
     wxRegion();
+
+    /**
+        Constructs a rectangular region with the given position and size.
+    */
     wxRegion(wxCoord x, wxCoord y, wxCoord width, wxCoord height);
+
+    /**
+        Constructs a rectangular region from the top left point and the bottom right
+        point.
+    */
     wxRegion(const wxPoint& topLeft, const wxPoint& bottomRight);
+
+    /**
+        Constructs a rectangular region a wxRect object.
+    */
     wxRegion(const wxRect& rect);
+
+    /**
+        Copy constructor, uses @ref overview_refcount.
+    */
     wxRegion(const wxRegion& region);
-    wxRegion(size_t n, const wxPoint points,
+
+    /**
+        Constructs a region corresponding to the polygon made of @a n points
+        in the provided array.
+        @a fillStyle parameter may have values @c wxWINDING_RULE or @c wxODDEVEN_RULE.
+    */
+    wxRegion(size_t n, const wxPoint* points,
              int fillStyle = wxWINDING_RULE);
+
+    /**
+        Constructs a region using a bitmap. See Union() for more details.
+    */
     wxRegion(const wxBitmap& bmp);
+
+    /**
+        Constructs a region using the non-transparent pixels of a bitmap.  See
+        Union() for more details.
+    */
     wxRegion(const wxBitmap& bmp, const wxColour& transColour,
              int tolerance = 0);
-    //@}
 
     /**
         Destructor.
-        See @ref overview_refcountdestruct "reference-counted object destruction" for
+        See @ref overview_refcount_destruct "reference-counted object destruction" for
         more info.
     */
     ~wxRegion();
@@ -150,22 +219,47 @@
     */
     void Clear();
 
-    //@{
     /**
+        Returns a value indicating whether the given point is contained within the region.
+
+        @return The return value is one of @c wxOutRegion and @c wxInRegion.
+    */
+    wxRegionContain Contains(long& x, long& y) const;
+
+    /**
+        Returns a value indicating whether the given point is contained within the region.
+
+        @return The return value is one of @c wxOutRegion and @c wxInRegion.
+    */
+    wxRegionContain Contains(const wxPoint& pt) const;
+
+    /**
         Returns a value indicating whether the given rectangle is contained within the
         region.
 
-        @return The return value is one of wxOutRegion, wxPartRegion and
-                 wxInRegion.
+        @return The return value is one of @c wxOutRegion, @c wxPartRegion and
+                 @c wxInRegion.
+
+                 On Windows, only @c wxOutRegion and @c wxInRegion are returned; a value
+                 @c wxInRegion then indicates that all or some part of the region is
+                 contained in this region.
     */
-    wxRegionContain Contains(long& x, long& y) const;
-    const wxRegionContain Contains(const wxPoint& pt) const;
-    const wxRegionContain Contains(long& x, long& y,
+    wxRegionContain Contains(long& x, long& y,
                                    long& width,
                                    long& height) const;
-    const wxRegionContain Contains(const wxRect& rect) const;
-    //@}
+    /**
+        Returns a value indicating whether the given rectangle is contained within the
+        region.
 
+        @return The return value is one of @c wxOutRegion, @c wxPartRegion and
+                 @c wxInRegion.
+
+                 On Windows, only @c wxOutRegion and @c wxInRegion are returned; a value
+                 @c wxInRegion then indicates that all or some part of the region is
+                 contained in this region.
+    */
+    wxRegionContain Contains(const wxRect& rect) const;
+
     /**
         Convert the region to a black and white bitmap with the white pixels
         being inside the region.
@@ -181,9 +275,9 @@
     const wxRect  GetBox() const;
     //@}
 
-    //@{
     /**
-        Finds the intersection of this region and another region.
+        Finds the intersection of this region and another, rectangular region,
+        specified using position and size.
 
         @return @true if successful, @false otherwise.
 
@@ -193,9 +287,28 @@
     */
     bool Intersect(wxCoord x, wxCoord y, wxCoord width,
                    wxCoord height);
+
+    /**
+        Finds the intersection of this region and another, rectangular region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks Creates the intersection of the two regions, that is, the parts
+                 which are in both regions. The result is stored in this
+                 region.
+    */
     bool Intersect(const wxRect& rect);
+
+    /**
+        Finds the intersection of this region and another region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks Creates the intersection of the two regions, that is, the parts
+                 which are in both regions. The result is stored in this
+                 region.
+    */
     bool Intersect(const wxRegion& region);
-    //@}
 
     /**
         Returns @true if the region is empty, @false otherwise.
@@ -204,7 +317,9 @@
 
     /**
         Returns @true if the region is equal to, i.e. covers the same area as,
-        another one. Note that if both this region and @a region are invalid, they
+        another one.
+
+        @note If both this region and @a region are invalid, they
         are considered to be equal.
     */
     bool IsEqual(const wxRegion& region) const;
@@ -221,8 +336,18 @@
     bool Offset(const wxPoint& pt);
     //@}
 
-    //@{
     /**
+        Subtracts a rectangular region from this region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation combines the parts of 'this' region that are not
+                 part of the second region. The result is stored in this
+                 region.
+    */
+    bool Subtract(const wxRect& rect);
+
+    /**
         Subtracts a region from this region.
 
         @return @true if successful, @false otherwise.
@@ -231,16 +356,11 @@
                  part of the second region. The result is stored in this
                  region.
     */
-    bool Subtract(const wxRect& rect);
     bool Subtract(const wxRegion& region);
-    //@}
 
-    //@{
     /**
-        Finds the union of this region and the non-transparent pixels of a
-        bitmap. Colour to be treated as transparent is specified in the
-        @a transColour argument, along with an
-        optional colour tolerance value.
+        Finds the union of this region and another, rectangular region, specified using
+        position and size.
 
         @return @true if successful, @false otherwise.
 
@@ -249,16 +369,59 @@
                  region.
     */
     bool Union(wxCoord x, wxCoord y, wxCoord width, wxCoord height);
+
+    /**
+        Finds the union of this region and another, rectangular region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region. The result is stored in this
+                 region.
+    */
     bool Union(const wxRect& rect);
+
+    /**
+        Finds the union of this region and another region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region. The result is stored in this
+                 region.
+    */
     bool Union(const wxRegion& region);
+
+    /**
+        Finds the union of this region and the non-transparent pixels of a bitmap.
+        Bitmap¡¯s mask is used to determine transparency. If the bitmap doesn¡¯t have
+        a mask, solid rectangle of bitmap¡¯s dimensions is used.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region. The result is stored in this
+                 region.
+    */
     bool Union(const wxBitmap& bmp);
+
+    /**
+        Finds the union of this region and the non-transparent pixels of a
+        bitmap. Colour to be treated as transparent is specified in the
+        @a transColour argument, along with an optional colour tolerance value.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region. The result is stored in this
+                 region.
+    */
     bool Union(const wxBitmap& bmp, const wxColour& transColour,
                int tolerance = 0);
-    //@}
 
-    //@{
     /**
-        Finds the Xor of this region and another region.
+        Finds the Xor of this region and another, rectangular region, specified using
+        position and size.
 
         @return @true if successful, @false otherwise.
 
@@ -267,12 +430,31 @@
                  areas. The result is stored in this region.
     */
     bool Xor(wxCoord x, wxCoord y, wxCoord width, wxCoord height);
+
+    /**
+        Finds the Xor of this region and another, rectangular region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region, except for any overlapping
+                 areas. The result is stored in this region.
+    */
     bool Xor(const wxRect& rect);
+
+    /**
+        Finds the Xor of this region and another region.
+
+        @return @true if successful, @false otherwise.
+
+        @remarks This operation creates a region that combines all of this region
+                 and the second region, except for any overlapping
+                 areas. The result is stored in this region.
+    */
     bool Xor(const wxRegion& region);
-    //@}
 
     /**
-        Assignment operator, using @ref overview_trefcount "reference counting".
+        Assignment operator, using @ref overview_refcount.
     */
     void operator =(const wxRegion& region);
 };
Index: interface/renderer.h
===================================================================
--- interface/renderer.h	(revision 54227)
+++ interface/renderer.h	(working copy)
@@ -7,11 +7,61 @@
 /////////////////////////////////////////////////////////////////////////////
 
 /**
+	@anchor wxControlFlags
+
+	The following rendering flags are defined for wxRendererNative:
+*/
+enum
+{
+	/** Control is disabled. */
+    wxCONTROL_DISABLED   = 0x00000001,
+
+	/** Currently has keyboard focus. */
+    wxCONTROL_FOCUSED    = 0x00000002,
+
+	/** (Button) is pressed. */
+    wxCONTROL_PRESSED    = 0x00000004,
+
+	/** Control-specific bit. */
+    wxCONTROL_SPECIAL    = 0x00000008,
+
+	/** Only for the buttons. */
+    wxCONTROL_ISDEFAULT  = wxCONTROL_SPECIAL,
+
+	/** Only for the menu items. */
+    wxCONTROL_ISSUBMENU  = wxCONTROL_SPECIAL,
+
+	/** Only for the tree items. */
+    wxCONTROL_EXPANDED   = wxCONTROL_SPECIAL,
+
+	/** Only for the status bar panes. */
+    wxCONTROL_SIZEGRIP   = wxCONTROL_SPECIAL,
+
+	/** Checkboxes only: flat border. */
+    wxCONTROL_FLAT       = wxCONTROL_SPECIAL,
+
+	/** Mouse is currently over the control. */
+    wxCONTROL_CURRENT    = 0x00000010,
+
+	/** Selected item in e.g. listbox. */
+    wxCONTROL_SELECTED   = 0x00000020,
+
+	/** (Check/radio button) is checked. */
+    wxCONTROL_CHECKED    = 0x00000040,
+
+	/** (Menu) item can be checked. */
+    wxCONTROL_CHECKABLE  = 0x00000080,
+
+	/** (Check) undetermined state. */
+    wxCONTROL_UNDETERMINED = wxCONTROL_CHECKABLE
+};
+
+/**
     @class wxSplitterRenderParams
     @wxheader{renderer.h}
 
     This is just a simple @c struct used as a return value of
-    wxRendererNative::GetSplitterParams.
+    wxRendererNative::GetSplitterParams().
 
     It doesn't have any methods and all of its fields are constant and so can be
     only examined but not modified.
@@ -22,23 +72,26 @@
 class wxSplitterRenderParams
 {
 public:
+	/**
+		The only way to initialize this struct is by using this ctor.
+	*/
+	wxSplitterRenderParams(wxCoord widthSash_, wxCoord border_, bool isSens_);
+
     /**
-        const wxCoord border
         The width of the border drawn by the splitter inside it, may be 0.
     */
+	const wxCoord border;
 
-
     /**
-        const bool isHotSensitive
         @true if the sash changes appearance when the mouse passes over it, @false
         otherwise.
     */
+	const bool isHotSensitive;
 
-
     /**
-        const wxCoord widthSash
         The width of the splitter sash.
     */
+    const wxCoord widthSash;
 };
 
 
@@ -69,25 +122,32 @@
     be a real renderer which does the drawing.
 
     @library{wxcore}
-    @category{FIXME}
+    @category{gdi}
 */
 class wxDelegateRendererNative : public wxRendererNative
 {
 public:
-    //@{
+
     /**
         The default constructor does the same thing as the other one except that it
-        uses the @ref wxRendererNative::getgeneric "generic renderer" instead of the
-        user-specified @e rendererNative.
+        uses the @ref wxRendererNative::GetGeneric() "generic renderer" instead of the
+        user-specified @a rendererNative.
+
         In any case, this sets up the delegate renderer object to follow all calls to
         the specified real renderer.
-        Note that this object does not take ownership of (i.e. won't delete)
-        @e rendererNative.
     */
     wxDelegateRendererNative();
+
+    /**
+        This constructor uses the user-specified @a rendererNative to set up the delegate
+		renderer object to follow all calls to the specified real renderer.
+
+        @note
+        This object does not take ownership of (i.e. won't delete) @a rendererNative.
+    */
     wxDelegateRendererNative(wxRendererNative& rendererNative);
-    //@}
 
+
     /**
         This class also provides all the virtual methods of
         wxRendererNative, please refer to that class
@@ -102,7 +162,7 @@
     @class wxRendererNative
     @wxheader{renderer.h}
 
-    First, a brief introduction to wxRenderer and why it is needed.
+    First, a brief introduction to @b wxRenderer and why it is needed.
 
     Usually wxWidgets uses the underlying low level GUI system to draw all the
     controls - this is what we mean when we say that it is a "native" framework.
@@ -115,7 +175,7 @@
     appearance is different under different platforms while the lines are always
     drawn in the same way.
 
-    This is why we have renderers: wxRenderer is a class which virtualizes the
+    This is why we have renderers: @b wxRenderer is a class which virtualizes the
     drawing, i.e. it abstracts the drawing operations and allows you to draw say, a
     button, without caring about exactly how this is done. Of course, as we
     can draw the button differently in different renderers, this also allows us to
@@ -124,23 +184,23 @@
     So the renderers work by exposing a large set of high-level drawing functions
     which are used by the generic controls. There is always a default global
     renderer but it may be changed or extended by the user, see
-    @ref overview_samplerender "Render sample".
+    @ref page_samples_render.
 
     All drawing functions take some standard parameters:
 
-     @e win is the window being drawn. It is normally not used and when
+    @li @a win is the window being drawn. It is normally not used and when
     it is it should only be used as a generic wxWindow
     (in order to get its low level handle, for example), but you should
     not assume that it is of some given type as the same renderer
     function may be reused for drawing different kinds of control.
-     @e dc is the wxDC to draw on. Only this device
+    @li @a dc is the wxDC to draw on. Only this device
     context should be used for drawing. It is not necessary to restore
     pens and brushes for it on function exit but, on the other hand, you
     shouldn't assume that it is in any specific state on function entry:
     the rendering functions should always prepare it.
-     @e rect the bounding rectangle for the element to be drawn.
-     @e flags the optional flags (none by default) which can be a
-    combination of the @c wxCONTROL_XXX constants below.
+    @li @a rect the bounding rectangle for the element to be drawn.
+    @li @a flags the optional flags (none by default) which can be a
+    combination of the @ref wxControlFlags.
 
     Note that each drawing function restores the wxDC attributes if
     it changes them, so it is safe to assume that the same pen, brush and colours
@@ -159,8 +219,9 @@
 
     /**
         Draw a check box (used by wxDataViewCtrl).
+
         @a flags may have the @c wxCONTROL_CHECKED, @c wxCONTROL_CURRENT or
-        @c wxCONTROL_UNDETERMINED bit set.
+        @c wxCONTROL_UNDETERMINED bit set, see @ref wxControlFlags.
     */
     void DrawCheckBox(wxWindow* win, wxDC& dc, const wxRect& rect,
                       int flags);
@@ -168,7 +229,9 @@
     /**
         Draw a button like the one used by wxComboBox to show a
         drop down window. The usual appearance is a downwards pointing arrow.
-        @a flags may have the @c wxCONTROL_PRESSED or @c wxCONTROL_CURRENT bit set.
+
+        @a flags may have the @c wxCONTROL_PRESSED or @c wxCONTROL_CURRENT bit set,
+        see @ref wxControlFlags.
     */
     void DrawComboBoxDropButton(wxWindow* win, wxDC& dc,
                                 const wxRect& rect,
@@ -176,33 +239,42 @@
 
     /**
         Draw a drop down arrow that is suitable for use outside a combo box. Arrow will
-        have
-        transparent background.
+        have transparent background.
+
         @a rect is not entirely filled by the arrow. Instead, you should use bounding
         rectangle of a drop down button which arrow matches the size you need.
-        @a flags may have the @c wxCONTROL_PRESSED or @c wxCONTROL_CURRENT bit set.
+
+        @a flags may have the @c wxCONTROL_PRESSED or @c wxCONTROL_CURRENT bit set,
+        see @ref wxControlFlags.
     */
     void DrawDropArrow(wxWindow* win, wxDC& dc, const wxRect& rect,
                        int flags);
 
     /**
         Draw a focus rectangle using the specified rectangle.
-        wxListCtrl. The only supported flags is
-        @c wxCONTROL_SELECTED for items which are selected.
+        wxListCtrl.
+
+        The only supported flags is @c wxCONTROL_SELECTED for items which are selected.
+        see @ref wxControlFlags.
     */
     void DrawFocusRect(wxWindow* win, wxDC& dc, const wxRect& rect,
                        int flags = 0);
 
     /**
-        Draw the header control button (used, for example, by
-        wxListCtrl).  Depending on platforms the
-        @a flags parameter may support the @c wxCONTROL_SELECTED
-        @c wxCONTROL_DISABLED and @c wxCONTROL_CURRENT bits.
-        The @a sortArrow parameter can be one of
-        @c wxHDR_SORT_ICON_NONE, @c wxHDR_SORT_ICON_UP, or
-        @c wxHDR_SORT_ICON_DOWN.  Additional values controlling the
-        drawing of a text or bitmap label can be passed in @e params.  The
-        value returned is the optimal width to contain the the unabreviated
+        Draw the header control button (used, for example, by wxListCtrl).
+
+        @b Parameters:
+
+        Depending on platforms the @a flags parameter may support the @c wxCONTROL_SELECTED
+        @c wxCONTROL_DISABLED and @c wxCONTROL_CURRENT bits, see @ref wxControlFlags.
+
+        The @a sortArrow parameter can be one of @c wxHDR_SORT_ICON_NONE, @c wxHDR_SORT_ICON_UP,
+        or @c wxHDR_SORT_ICON_DOWN.
+
+        Additional values controlling the drawing of a text or bitmap label can be passed in @a params.
+
+        @return
+        The value returned is the optimal width to contain the the unabreviated
         label text or bitmap, the sort arrow if present, and internal margins.
     */
     int DrawHeaderButton(wxWindow* win, wxDC& dc, const wxRect& rect,
@@ -212,13 +284,15 @@
 
     /**
         Draw a selection rectangle underneath the text as used e.g. in a
-        wxListCtrl. The supported @a flags are
-        @c wxCONTROL_SELECTED for items which are selected (e.g. often a blue
-        rectangle) and @c wxCONTROL_CURRENT for the item that has the focus
-        (often a dotted line around the item's text). @c wxCONTROL_FOCUSED may
-        be used to indicate if the control has the focus (othewise the the selection
-        rectangle is e.g. often grey and not blue). This may be ignored by the renderer
-        or deduced by the code directly from the @e win.
+        wxListCtrl.
+
+        The supported @a flags are @c wxCONTROL_SELECTED for items
+        which are selected (e.g. often a blue rectangle) and @c wxCONTROL_CURRENT
+        for the item that has the focus (often a dotted line around the item's text).
+        @c wxCONTROL_FOCUSED may be used to indicate if the control has the focus
+        (othewise the the selection rectangle is e.g. often grey and not blue).
+        This may be ignored by the renderer or deduced by the code directly from
+        the @a win.
     */
     void DrawItemSelectionRect(wxWindow* win, wxDC& dc,
                                const wxRect& rect,
@@ -226,16 +300,16 @@
 
     /**
         Draw a blank push button that looks very similar to wxButton.
+
         @a flags may have the @c wxCONTROL_PRESSED, @c wxCONTROL_CURRENT or
-        @c wxCONTROL_ISDEFAULT bit set.
+        @c wxCONTROL_ISDEFAULT bit set, see @ref wxControlFlags.
     */
     void DrawPushButton(wxWindow* win, wxDC& dc, const wxRect& rect,
                         int flags);
 
     /**
         Draw the border for sash window: this border must be such that the sash
-        drawn by @ref drawsplittersash() DrawSash blends into it
-        well.
+        drawn by DrawSplitterSash() blends into it well.
     */
     void DrawSplitterBorder(wxWindow* win, wxDC& dc,
                             const wxRect& rect,
@@ -252,8 +326,10 @@
                           int flags = 0);
 
     /**
-        Draw the expanded/collapsed icon for a tree control item. To draw an expanded
-        button the @a flags parameter must contain @c wxCONTROL_EXPANDED bit.
+        Draw the expanded/collapsed icon for a tree control item.
+
+        To draw an expanded button the @a flags parameter must contain @c wxCONTROL_EXPANDED bit,
+        see @ref wxControlFlags.
     */
     void DrawTreeItemButton(wxWindow* win, wxDC& dc,
                             const wxRect& rect,
@@ -296,20 +372,22 @@
         This function is used for version checking: Load()
         refuses to load any shared libraries implementing an older or incompatible
         version.
+
+        @remarks
         The implementation of this method is always the same in all renderers (simply
-        construct wxRendererVersion using the
-        @c wxRendererVersion::Current_XXX values), but it has to be in the derived,
-        not base, class, to detect mismatches between the renderers versions and so you
-        have to implement it anew in all renderers.
+        construct wxRendererVersion using the @c wxRendererVersion::Current_XXX values),
+        but it has to be in the derived, not base, class, to detect mismatches between
+        the renderers versions and so you have to implement it anew in all renderers.
     */
     wxRendererVersion GetVersion() const;
 
     /**
         Load the renderer from the specified DLL, the returned pointer must be
         deleted by caller if not @NULL when it is not used any more.
+
         The @a name should be just the base name of the renderer and not the full
         name of the DLL file which is constructed differently (using
-        wxDynamicLibrary::CanonicalizePluginName)
+        wxDynamicLibrary::CanonicalizePluginName())
         on different systems.
     */
     wxRendererNative* Load(const wxString& name);
@@ -317,6 +395,7 @@
     /**
         Set the renderer to use, passing @NULL reverts to using the default
         renderer (the global renderer must always exist).
+
         Return the previous renderer used with Set() or @NULL if none.
     */
     wxRendererNative* Set(wxRendererNative* renderer);
@@ -330,7 +409,7 @@
 
     This simple struct represents the wxRendererNative
     interface version and is only used as the return value of
-    wxRendererNative::GetVersion.
+    wxRendererNative::GetVersion().
 
     The version has two components: the version itself and the age. If the main
     program and the renderer have different versions they are never compatible with
@@ -350,21 +429,20 @@
     /**
         Checks if the main program is compatible with the renderer having the version
         @e ver, returns @true if it is and @false otherwise.
-        This method is used by
-        wxRendererNative::Load to determine whether a
+
+        This method is used by wxRendererNative::Load() to determine whether a
         renderer can be used.
     */
     static bool IsCompatible(const wxRendererVersion& ver);
 
     /**
-        const int age
         The age component.
     */
+	const int age;
 
-
     /**
-        const int version
         The version component.
     */
+    const int version;
 };
 

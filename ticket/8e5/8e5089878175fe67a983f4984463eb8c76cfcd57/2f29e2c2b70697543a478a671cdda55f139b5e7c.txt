Index: docs/latex/wx/image.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/image.tex,v
retrieving revision 1.80
diff -C3 -r1.80 image.tex
*** docs/latex/wx/image.tex	2005/04/03 12:01:02	1.80
--- docs/latex/wx/image.tex	2005/06/22 22:00:58
***************
*** 589,594 ****
--- 589,614 ----
  \helpref{wxImage::GetHeight}{wximagegetheight}
  
  
+ \membersection{HSVValue::HSVValue}\label{hsvvaluehsvvalue}
+ 
+ \func{}{HSVValue}{\param{double }{h = 0.0}, \param{double }{s = 0.0}, \param{double }{v = 0.0}}
+ 
+ Constructor for HSVValue, an object that contains values for hue, saturation and value which
+ represent the value of a color. It is used by \helpref{wxImage::HSVtoRGB}{wximagehsvtorgb}
+ and \helpref{wxImage::RGBtoHSV}{wximagergbtohsv}, which
+ converts between HSV color space and RGB color space.
+ 
+ \pythonnote{use wxImage_HSVValue in wxPython}
+ 
+ 
+ 
+ \membersection{wxImage::HSVtoRGB}\label{wximagehsvtorgb}
+ 
+ \func{wxImage::RGBValue}{HSVtoRGB}{\param{wxImage::HSVValue }{hsv}}
+ 
+ Converts a color in HSV color space to RGB color space.
+ 
+ 
  \membersection{wxImage::HasAlpha}\label{wximagehasalpha}
  
  \constfunc{bool}{HasAlpha}{\void}
***************
*** 810,815 ****
--- 830,854 ----
  Returns true if image data is present.
  
  
+ \membersection{RGBValue::RGBValue}\label{rgbvaluergbvalue}
+ 
+ \func{}{RGBValue}{\param{unsigned char }{r = 0}, \param{unsigned char }{g = 0}, \param{unsigned char }{b = 0}}
+ 
+ Constructor for RGBValue, an object that contains values for red, green and blud which
+ represent the value of a color. It is used by \helpref{wxImage::HSVtoRGB}{wximagehsvtorgb}
+ and \helpref{wxImage::RGBtoHSV}{wximagergbtohsv}, which
+ converts between HSV color space and RGB color space.
+ 
+ \pythonnote{use wxImage_RGBValue in wxPython}
+ 
+ 
+ \membersection{wxImage::RGBtoHSV}\label{wximagergbtohsv}
+ 
+ \func{wxImage::HSVValue}{RGBtoHSV}{\param{wxImage::RGBValue }{rgb}}
+ 
+ Converts a color in RGB color space to HSV color space.
+ 
+ 
  \membersection{wxImage::RemoveHandler}\label{wximageremovehandler}
  
  \func{static bool}{RemoveHandler}{\param{const wxString\& }{name}}
***************
*** 887,892 ****
--- 926,940 ----
  rotated image background. Else, black (rgb 0, 0, 0) will be used.
  
  Returns the rotated image, leaving this image intact.
+ 
+ 
+ \membersection{wxImage::RotateHue}\label{wximagerotatehue}
+ 
+ \func{void}{RotateHue}{\param{double}{ angle}}
+ 
+ Rotates the hue of each pixel in the image by {\it angle}, which is a double in
+ the range of -1.0 to +1.0, where -1.0 corresponds to -360 degrees and +1.0 corresponds
+ to +360 degrees.
  
  
  \membersection{wxImage::Rotate90}\label{wximagerotate90}
Index: include/wx/image.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/image.h,v
retrieving revision 1.107
diff -C3 -r1.107 image.h
*** include/wx/image.h	2005/04/02 21:30:22	1.107
--- include/wx/image.h	2005/06/22 22:01:21
***************
*** 2,8 ****
  // Name:        image.h
  // Purpose:     wxImage class
  // Author:      Robert Roebling
! // RCS-ID:      $Id: image.h,v 1.107 2005/04/02 21:30:22 VZ Exp $
  // Copyright:   (c) Robert Roebling
  // Licence:     wxWindows licence
  /////////////////////////////////////////////////////////////////////////////
--- 2,8 ----
  // Name:        image.h
  // Purpose:     wxImage class
  // Author:      Robert Roebling
! // RCS-ID:      $Id: image.h 5659 2005-06-14 17:28:54Z davids $
  // Copyright:   (c) Robert Roebling
  // Licence:     wxWindows licence
  /////////////////////////////////////////////////////////////////////////////
***************
*** 157,162 ****
--- 157,185 ----
  class WXDLLEXPORT wxImage: public wxObject
  {
  public:
+     // red, green and blue are 8 bit unsigned integers in the range of 0..255
+     // We use the identifier RGBValue instead of RGB, since RGB is #defined
+     class RGBValue
+     {
+     public:
+       RGBValue(unsigned char r=0, unsigned char g=0, unsigned char b=0)
+         : red(r), green(g), blue(b) {}
+         unsigned char red;  
+         unsigned char green;
+         unsigned char blue;
+     };
+ 
+     // hue, saturation and value are doubles in the range 0.0..1.0
+     class HSVValue
+     {
+     public:
+         HSVValue(double h=0.0, double s=0.0, double v=0.0)
+             : hue(h), saturation(s), value(v) {}
+         double hue;  
+         double saturation;
+         double value;
+     };
+ 
      wxImage(){}
      wxImage( int width, int height, bool clear = true );
      wxImage( int width, int height, unsigned char* data, bool static_data = false );
***************
*** 337,342 ****
--- 360,369 ----
      // Returned value: # of entries in the histogram
      unsigned long ComputeHistogram( wxImageHistogram &h ) const;
  
+     // Rotates the hue of each pixel of the image. angle is a double in the range
+     // -1.0..1.0 where -1.0 is -360 degrees and 1.0 is 360 degrees
+     void RotateHue(double angle);
+ 
      wxImage& operator = (const wxImage& image)
      {
          if ( (*this) != image )
***************
*** 362,367 ****
--- 389,398 ----
  
      static void CleanUpHandlers();
      static void InitStandardHandlers();
+ 
+     static wxImage::HSVValue RGBtoHSV(wxImage::RGBValue rgb);
+     static wxImage::RGBValue HSVtoRGB(wxImage::HSVValue hsv);
+ 
  
  protected:
      static wxList   sm_handlers;
Index: samples/image/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/image/image.cpp,v
retrieving revision 1.105
diff -C3 -r1.105 image.cpp
*** samples/image/image.cpp	2005/06/13 12:19:18	1.105
--- samples/image/image.cpp	2005/06/22 22:01:43
***************
*** 84,89 ****
--- 84,91 ----
      wxBitmap  *my_horse_asciigrey_pnm;
      wxBitmap  *my_horse_rawgrey_pnm;
  
+     wxBitmap  *colorized_horse_jpeg;
+ 
      int xH, yH ;
      int m_ani_images ;
  
***************
*** 408,413 ****
--- 410,416 ----
      my_horse_ico = (wxBitmap*) NULL;
      my_horse_cur = (wxBitmap*) NULL;
      my_horse_ani = (wxBitmap*) NULL;
+     colorized_horse_jpeg = (wxBitmap*) NULL;
  
      my_smile_xbm = (wxBitmap*) NULL;
      my_square = (wxBitmap*) NULL;
***************
*** 465,471 ****
--- 468,481 ----
      if ( !image.LoadFile( dir + _T("horse.jpg")) )
          wxLogError(wxT("Can't load JPG image"));
      else
+     {
          my_horse_jpeg = new wxBitmap( image );
+         // Colorize by rotating green hue to red
+         wxImage::HSVValue greenHSV = wxImage::RGBtoHSV(wxImage::RGBValue(0, 255, 0));
+         wxImage::HSVValue redHSV = wxImage::RGBtoHSV(wxImage::RGBValue(255, 0, 0));
+         image.RotateHue(redHSV.hue - greenHSV.hue);
+         colorized_horse_jpeg = new wxBitmap( image );
+     }
  #endif // wxUSE_LIBJPEG
  
  #if wxUSE_GIF
***************
*** 843,848 ****
--- 853,866 ----
          {
              dc.DrawBitmap( my_horse_ani[i], 230 + i * 2 * my_horse_ani[i].GetWidth() , 2420, true );
          }
+ #if wxUSE_LIBJPEG
+     if (colorized_horse_jpeg)
+     {
+         dc.DrawText( _T("Colorize image by rotating green hue to red"), 30, 2490 );
+         dc.DrawBitmap( *colorized_horse_jpeg, 30, 2520 );
+     }
+ #endif // wxUSE_LIBJPEG
+ 
  }
  
  void MyCanvas::CreateAntiAliasedBitmap()
***************
*** 955,962 ****
  
    m_canvas = new MyCanvas( this, wxID_ANY, wxPoint(0,0), wxSize(10,10) );
  
!   // 500 width * 2500 height
!   m_canvas->SetScrollbars( 10, 10, 50, 250 );
  }
  
  void MyFrame::OnQuit( wxCommandEvent &WXUNUSED(event) )
--- 973,980 ----
  
    m_canvas = new MyCanvas( this, wxID_ANY, wxPoint(0,0), wxSize(10,10) );
  
!   // 500 width * 2750 height
!   m_canvas->SetScrollbars( 10, 10, 50, 275 );
  }
  
  void MyFrame::OnQuit( wxCommandEvent &WXUNUSED(event) )
Index: src/common/image.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/image.cpp,v
retrieving revision 1.200
diff -C3 -r1.200 image.cpp
*** src/common/image.cpp	2005/05/22 11:33:00	1.200
--- src/common/image.cpp	2005/06/22 22:02:00
***************
*** 2,8 ****
  // Name:        image.cpp
  // Purpose:     wxImage
  // Author:      Robert Roebling
! // RCS-ID:      $Id: image.cpp,v 1.200 2005/05/22 11:33:00 JS Exp $
  // Copyright:   (c) Robert Roebling
  // Licence:     wxWindows licence
  /////////////////////////////////////////////////////////////////////////////
--- 2,8 ----
  // Name:        image.cpp
  // Purpose:     wxImage
  // Author:      Robert Roebling
! // RCS-ID:      $Id: image.cpp 5731 2005-06-22 21:18:14Z john $
  // Copyright:   (c) Robert Roebling
  // Licence:     wxWindows licence
  /////////////////////////////////////////////////////////////////////////////
***************
*** 1756,1761 ****
--- 1756,1906 ----
      }
  
      return wxT("(") + fmts + wxT(")|") + fmts;
+ }
+ 
+ wxImage::HSVValue wxImage::RGBtoHSV(wxImage::RGBValue rgb)
+ {
+     double red, green, blue;
+     double hue, saturation, value;
+     double minimumRGB, maximumRGB;
+     double deltaRGB;
+ 
+     red = rgb.red / 255.0;
+     green = rgb.green / 255.0;
+     blue = rgb.blue / 255.0;
+ 
+     minimumRGB = red;
+     if (green < minimumRGB)
+         minimumRGB = green;
+ 
+     if (blue < minimumRGB)
+         minimumRGB = blue;
+ 
+     maximumRGB = red;
+     if (green > maximumRGB)
+         maximumRGB = green;
+ 
+     if (blue > maximumRGB)
+         maximumRGB = blue;
+ 
+     value = maximumRGB;
+ 
+     if (maximumRGB == minimumRGB) {
+         /*
+          * Gray has no color
+          */
+         hue = 0.0;
+         saturation = 0.0;
+     } else {
+         deltaRGB = maximumRGB - minimumRGB;
+ 
+         saturation = deltaRGB / maximumRGB;
+ 
+     if (red == maximumRGB)
+             hue = (green - blue) / deltaRGB;
+         else if (green == maximumRGB)
+             hue = 2.0 + (blue - red) / deltaRGB;
+         else
+             hue = 4.0 + (red - green) / deltaRGB;
+ 
+         hue = hue / 6.0;
+ 
+         if (hue < 0.0)
+             hue = hue + 1.0;
+     }
+ 
+     return wxImage::HSVValue(hue, saturation, value);
+ }
+ 
+ wxImage::RGBValue wxImage::HSVtoRGB(wxImage::HSVValue hsv)
+ {
+     int i;
+     double f, p;
+     double red, green, blue;
+ 
+     if(hsv.saturation == 0.0) {
+         red = hsv.value; //Grey
+         green = hsv.value;
+         blue = hsv.value; 
+     } else {
+         hsv.hue = hsv.hue * 6.0;      // sector 0 to 5
+         i = (int)floor(hsv.hue);
+         f = hsv.hue - i;          // fractional part of h
+         p = hsv.value * (1.0 - hsv.saturation);
+ 
+         switch (i) {
+             case 0:
+                 red = hsv.value;
+                 green = hsv.value * (1.0 - hsv.saturation * (1.0 - f));
+                 blue = p;
+                 break;
+             case 1:
+                 red = hsv.value * (1.0 - hsv.saturation * f);
+                 green = hsv.value;
+                 blue = p;
+                 break;
+             case 2:
+                 red = p;
+                 green = hsv.value;
+                 blue = hsv.value * (1.0 - hsv.saturation * (1.0 - f));
+                 break;
+             case 3:
+                 red = p;
+                 green = hsv.value * (1.0 - hsv.saturation * f);
+                 blue = hsv.value;
+                 break;
+             case 4:
+                 red = hsv.value * (1.0 - hsv.saturation * (1.0 - f));
+                 green = p;
+                 blue = hsv.value;
+                 break;
+             default:    // case 5:
+                 red = hsv.value;
+                 green = p;
+                 blue = hsv.value * (1.0 - hsv.saturation * f);
+               break;
+         }
+     }
+     return wxImage::RGBValue((unsigned char)(red * 255.0),
+                              (unsigned char)(green * 255.0),
+                              (unsigned char)(blue * 255.0));
+ }
+ 
+ void wxImage::RotateHue(double angle)
+ /*
+  * Rotates the hue of each pixel of the image. angle is a double in the range
+  * -1.0..1.0 where -1.0 is -360 degrees and 1.0 is 360 degrees
+  */
+ {
+     unsigned char *srcBytePtr;
+     unsigned char *dstBytePtr;
+     unsigned long count;
+     wxImage::HSVValue hsv;
+     wxImage::RGBValue rgb;
+ 
+     assert (angle >= -1.0 && angle <= 1.0);
+     count = M_IMGDATA->m_width * M_IMGDATA->m_height;
+     if (count > 0 && angle != 0.0) {
+         srcBytePtr = M_IMGDATA->m_data;
+         dstBytePtr = srcBytePtr;
+         do {
+             rgb.red = *srcBytePtr++;
+             rgb.green = *srcBytePtr++;
+             rgb.blue = *srcBytePtr++;
+             hsv = RGBtoHSV(rgb);
+ 
+             hsv.hue = hsv.hue + angle;
+             if (hsv.hue > 1.0)
+                 hsv.hue = hsv.hue - 1.0;
+             else if (hsv.hue < 0.0)
+                 hsv.hue = hsv.hue + 1.0;
+                       
+             rgb = HSVtoRGB(hsv);
+             *dstBytePtr++ = rgb.red;
+             *dstBytePtr++ = rgb.green;
+             *dstBytePtr++ = rgb.blue;
+         } while (--count != 0);
+     }
  }
  
  //-----------------------------------------------------------------------------
Index: wxPython/src/__core_rename.i
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/wxPython/src/__core_rename.i,v
retrieving revision 1.18
diff -C3 -r1.18 __core_rename.i
*** wxPython/src/__core_rename.i	2005/05/24 20:54:44	1.18
--- wxPython/src/__core_rename.i	2005/06/22 22:03:44
***************
*** 555,560 ****
--- 555,562 ----
  %rename(IMAGE_ALPHA_OPAQUE)                 wxIMAGE_ALPHA_OPAQUE;
  %rename(ImageHandler)                       wxImageHandler;
  %rename(ImageHistogram)                     wxImageHistogram;
+ %rename(Image_RGBValue)                     wxImage_RGBValue;
+ %rename(Image_HSVValue)                     wxImage_HSVValue;
  %rename(Image)                              wxImage;
  %rename(NullImage)                          wxNullImage;
  %rename(IMAGE_RESOLUTION_INCHES)            wxIMAGE_RESOLUTION_INCHES;
Index: wxPython/src/_image.i
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/wxPython/src/_image.i,v
retrieving revision 1.31
diff -C3 -r1.31 _image.i
*** wxPython/src/_image.i	2005/05/07 06:26:59	1.31
--- wxPython/src/_image.i	2005/06/22 22:03:47
***************
*** 5,11 ****
  // Author:      Robin Dunn
  //
  // Created:     25-Sept-2000
! // RCS-ID:      $Id: _image.i,v 1.31 2005/05/07 06:26:59 RD Exp $
  // Copyright:   (c) 2003 by Total Control Software
  // Licence:     wxWindows license
  /////////////////////////////////////////////////////////////////////////////
--- 5,11 ----
  // Author:      Robin Dunn
  //
  // Created:     25-Sept-2000
! // RCS-ID:      $Id: _image.i 5731 2005-06-22 21:18:14Z john $
  // Copyright:   (c) 2003 by Total Control Software
  // Licence:     wxWindows license
  /////////////////////////////////////////////////////////////////////////////
***************
*** 155,160 ****
--- 155,185 ----
  with `HasAlpha`. Note that currently only images loaded from PNG files
  with transparency information will have an alpha channel.", "");
  
+ %{
+ // Pull the nested class out to the top level for SWIG's sake
+ #define wxImage_RGBValue wxImage::RGBValue
+ #define wxImage_HSVValue wxImage::HSVValue
+ %}
+  
+ class wxImage_RGBValue
+ {
+ public:
+     wxImage_RGBValue(byte r=0, byte g=0, byte b=0);    
+     byte red;  
+     byte green;
+     byte blue;
+ };
+     
+ class wxImage_HSVValue
+ {
+ public:
+     wxImage_HSVValue(double h=0.0, double s=0.0, double v=0.0);
+     double hue;  
+     double saturation;
+     double value;
+ };
+ 
+ 
  class wxImage : public wxObject {
  public:
      %typemap(out) wxImage*;    // turn off this typemap
***************
*** 887,892 ****
--- 912,926 ----
              return bitmap;
          }
      }
+ 
+     
+     DocDeclStr(
+         void , RotateHue(double angle),
+         "Rotates the hue of each pixel of the image. Hue is a double in the
+ range -1.0..1.0 where -1.0 is -360 degrees and 1.0 is 360 degrees", "");
+         
+     static wxImage_HSVValue RGBtoHSV(wxImage_RGBValue rgb);
+     static wxImage_RGBValue HSVtoRGB(wxImage_HSVValue hsv);
  
      %pythoncode { def __nonzero__(self): return self.Ok() }
  };

 	  	 

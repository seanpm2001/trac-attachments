Index: docs/doxygen/overviews/html.h
===================================================================
--- docs/doxygen/overviews/html.h	(revision 76621)
+++ docs/doxygen/overviews/html.h	(working copy)
@@ -448,6 +448,9 @@
 
 [color]         HTML 4.0-compliant colour specification
 
+[coords]        c(1),c(2),c(3),...,c(n)
+                where c(i) is integer
+
 [fontsize]      -2
                 -1
                 +0
@@ -463,17 +466,22 @@
                 6
                 7
 
-[pixels]        integer value that represents dimension in pixels
+[listtype]      '1'
+                'a'
+                'A'
+                'i' (lower case roman numerals)
+                'I' (upper case roman numerals)
 
 [percent]       i%
                 where i is integer
 
-[url]           an URL
+[pixels]        integer value that represents dimension in pixels
 
 [string]        text string
 
-[coords]        c(1),c(2),c(3),...,c(n)
-                where c(i) is integer
+[url]           an URL
+
+
 @endcode
 
 
@@ -531,7 +539,7 @@
 MAP             NAME=[string]
 META            HTTP-EQUIV="Content-Type"
                 CONTENT=[string]
-OL
+OL              TYPE=[listtype]
 P               ALIGN=[alignment]
 PRE
 SAMP
Index: src/html/m_list.cpp
===================================================================
--- src/html/m_list.cpp	(revision 76621)
+++ src/html/m_list.cpp	(working copy)
@@ -7,6 +7,7 @@
 /////////////////////////////////////////////////////////////////////////////
 
 #include "wx/wxprec.h"
+#include "wx/private/numformat.h"
 
 #ifdef __BORLANDC__
     #pragma hdrstop
@@ -43,7 +44,8 @@
     wxDECLARE_NO_COPY_CLASS(wxHtmlListmarkCell);
 };
 
-wxHtmlListmarkCell::wxHtmlListmarkCell(wxDC* dc, const wxColour& clr) : wxHtmlCell(), m_Brush(clr, wxBRUSHSTYLE_SOLID)
+wxHtmlListmarkCell::wxHtmlListmarkCell(wxDC* dc, const wxColour& clr) 
+        : wxHtmlCell(), m_Brush(clr, wxBRUSHSTYLE_SOLID)
 {
     m_Width =  dc->GetCharHeight();
     m_Height = dc->GetCharHeight();
@@ -74,6 +76,13 @@
     int maxWidth;
 };
 
+enum wxHtmlListItemType 
+{
+    wxHTML_LISTTYPE_DECIMAL, wxHTML_LISTTYPE_ALPHALOWER, 
+    wxHTML_LISTTYPE_ALPHAUPPER, wxHTML_LISTTYPE_ROMANLOWER, 
+    wxHTML_LISTTYPE_ROMANUPPER
+};
+
 class wxHtmlListCell : public wxHtmlContainerCell
 {
     private:
@@ -95,7 +104,8 @@
     wxDECLARE_NO_COPY_CLASS(wxHtmlListCell);
 };
 
-wxHtmlListCell::wxHtmlListCell(wxHtmlContainerCell *parent) : wxHtmlContainerCell(parent)
+wxHtmlListCell::wxHtmlListCell(wxHtmlContainerCell *parent) 
+                : wxHtmlContainerCell(parent)
 {
     m_NumRows = 0;
     m_RowInfo = 0;
@@ -163,7 +173,8 @@
 
 void wxHtmlListCell::ReallocRows(int rows)
 {
-    m_RowInfo = (wxHtmlListItemStruct*) realloc(m_RowInfo, sizeof(wxHtmlListItemStruct) * rows);
+    m_RowInfo = (wxHtmlListItemStruct*) realloc(m_RowInfo, 
+                                        sizeof(wxHtmlListItemStruct) * rows);
     m_RowInfo[rows - 1].mark = NULL;
     m_RowInfo[rows - 1].cont = NULL;
     m_RowInfo[rows - 1].minWidth = 0;
@@ -221,12 +232,13 @@
 
     TAG_HANDLER_VARS
         wxHtmlListCell *m_List;
-        int m_Numbering;
-                // this is number of actual item of list or 0 for dots
+        char m_ListType;  // type of numbering (decimal, alpha, roman)
+        int m_Numbering;  // holds the item number or 0 for a 'bullet'
 
     TAG_HANDLER_CONSTR(OLULLI)
     {
         m_List = NULL;
+        m_ListType = '1';
         m_Numbering = 0;
     }
 
@@ -233,7 +245,8 @@
     TAG_HANDLER_PROC(tag)
     {
         wxHtmlContainerCell *c;
-
+        wxHtmlContainerCell *oldcont = m_WParser->GetContainer();
+        
         // List Item:
         if (m_List && tag.GetName() == wxT("LI"))
         {
@@ -241,18 +254,39 @@
             c->SetAlignVer(wxHTML_ALIGN_TOP);
 
             wxHtmlContainerCell *mark = c;
-            c->SetWidthFloat(2 * m_WParser->GetCharWidth(), wxHTML_UNITS_PIXELS);
             if (m_Numbering == 0)
             {
                 // Centering gives more space after the bullet
-                c->SetAlignHor(wxHTML_ALIGN_CENTER);
-                c->InsertCell(new wxHtmlListmarkCell(m_WParser->GetDC(), m_WParser->GetActualColor()));
+                c->SetWidthFloat(2 * m_WParser->GetCharWidth(), wxHTML_UNITS_PIXELS);
+                c->SetAlignHor(wxHTML_ALIGN_LEFT);
+                c->InsertCell(new wxHtmlListmarkCell(m_WParser->GetDC(), 
+                                                m_WParser->GetActualColor()));
             }
             else
             {
                 c->SetAlignHor(wxHTML_ALIGN_RIGHT);
+                c->SetWidthFloat(-2, wxHTML_UNITS_PIXELS);
                 wxString markStr;
-                markStr.Printf(wxT("%i. "), m_Numbering);
+                switch (m_ListType)
+                {
+                    default:    wxFALLTHROUGH;
+                    case '1':   markStr.Printf("%i.  ", m_Numbering);
+                                break;
+                    case 'a':   markStr.Printf("%s.  ", 
+                                    wxDecimalToAlpha(m_Numbering));
+                                break;
+                    case 'A':   markStr.Printf("%s.  ", 
+                                    wxDecimalToAlpha(m_Numbering).MakeUpper());
+                                break;
+                    case 'i':   markStr.Printf("%s.  ", 
+                                    wxDecimalToRoman(m_Numbering));
+                                break;
+                    case 'I':   markStr.Printf("%s.  ", 
+                                    wxDecimalToRoman(m_Numbering).MakeUpper());
+                                break;
+                }
+                
+               
                 c->InsertCell(new wxHtmlWordCell(markStr, *(m_WParser->GetDC())));
             }
             m_WParser->CloseContainer();
@@ -266,16 +300,26 @@
             if (m_Numbering != 0) m_Numbering++;
         }
 
-        // Begin of List (not-numbered): "UL", "OL"
+        // Begin of List: "UL", "OL"
         else if (tag.GetName() == wxT("UL") || tag.GetName() == wxT("OL"))
         {
+            char oldtype = m_ListType;
             int oldnum = m_Numbering;
 
-            if (tag.GetName() == wxT("UL")) m_Numbering = 0;
-            else m_Numbering = 1;
+            if (tag.GetName() == wxT("UL")) 
+                m_Numbering = 0;
+            else 
+            {
+                if (tag.HasParam("TYPE"))
+                {
+                    wxString param = tag.GetParam("TYPE");
+                    if (param.Len() == 1)
+                        param.at(0).GetAsChar(&m_ListType);
+                }
+                m_Numbering = 1;
+            }
 
-            wxHtmlContainerCell *oldcont;
-            oldcont = c = m_WParser->OpenContainer();
+            c = m_WParser->OpenContainer();
 
             wxHtmlListCell *oldList = m_List;
             m_List = new wxHtmlListCell(c);
@@ -283,9 +327,10 @@
 
             ParseInner(tag);
 
+            m_WParser->CloseContainer();
+            
             m_WParser->SetContainer(oldcont);
-            m_WParser->CloseContainer();
-
+            m_ListType = oldtype;
             m_Numbering = oldnum;
             m_List = oldList;
             return true;
Index: include/wx/private/numformat.h
===================================================================
--- include/wx/private/numformat.h	(revision 0)
+++ include/wx/private/numformat.h	(working copy)
@@ -0,0 +1,91 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/private/numformat.h
+// Purpose:     Convert integers to various text formats
+// Author:      The wxWidgets Team
+// Modified by: The wxWidgets Team
+// Created:     27/05/2014
+// Copyright:   (c) The wxWidgets Team
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _NUMFORMAT_H_
+#define _NUMFORMAT_H_
+
+// small class to map int values to roman numerals
+class wxDecRomanPair
+{
+public:
+    wxDecRomanPair ( int newInt, const wxString& newNumeral )
+    {
+        m_Int = newInt;
+        m_RomanNumeral = newNumeral;
+    }
+    int m_Int;
+    wxString m_RomanNumeral;
+};
+
+wxVector <wxDecRomanPair> DecRomanMap;
+
+// convert int to roman numeral
+inline wxString wxDecimalToRoman ( int number )
+{
+    wxASSERT ( number > 0 && number < 10000 );
+    if ( number < 1 || number > 9999 ) return "";
+
+    if ( DecRomanMap.size() == 0 )
+    {
+        DecRomanMap.push_back ( wxDecRomanPair ( 1000, "m" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 500, "d" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 400, "cd" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 100, "c" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 90, "xc" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 50, "l" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 40, "xl" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 10, "x" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 9, "ix" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 5, "v" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 4, "iv" ) );
+        DecRomanMap.push_back ( wxDecRomanPair ( 1, "i" ) );
+    }
+
+    wxString result;
+
+    for ( wxVector<wxDecRomanPair>::const_iterator it = DecRomanMap.begin();
+            it != DecRomanMap.end(); ++it )
+    {
+        while ( number >= it->m_Int )
+        {
+            result += it->m_RomanNumeral;
+            number -= it->m_Int;
+        }
+    }
+
+    return result;
+}
+
+// convert int to alphas (1 = a, 2 = b, 27 = aa, 28 = ab etc.)
+inline wxString wxDecimalToAlpha ( int number )
+{
+    wxASSERT ( number > 0 && number < 10000 );
+    if ( number < 1 || number > 9999 ) return "";
+
+    wxString result;
+
+    // Start by taking the remainder of 'number', this is the least significant
+    // digit. Convert it to an alphabet letter by indexing into digits.
+    // Next, divide by 26 to do the same with the second-to-least significant 
+    // digit so on until 'number' is < 26. This final remainder will be the most
+    // significant digit, 'number' / 26 will = 0 and the loop will end.
+    // Note: '--number' is required because the base 26 result is 0-indexed 
+    // but the base 10 input is 1-indexed.
+
+    while ( number != 0 )
+    {
+        result = (char)('a' + (--number % 26)) + result;
+        number /= 26;
+    }
+
+    return result;
+}
+
+#endif // _NUMFORMAT_
Index: samples/html/test/listtest.htm
===================================================================
--- samples/html/test/listtest.htm	(revision 76621)
+++ samples/html/test/listtest.htm	(working copy)
@@ -5,6 +5,47 @@
   <li>Same with line 2</li>
 </ul>
 ------
+<ol>
+  <li>This should be numbered (default)</li>
+  <li>Second line dd</li>
+</ol>
+<ol TYPE='a'>
+  <li>This should be alpha lower case</li>
+  <li>Second line dd</li>
+</ol>
+<ol TYPE='A'>
+  <li>This should be alpha upper case</li>
+  <li>Second line</li>
+</ol>
+<ol TYPE='i'>
+  <li>This should be roman lower case</li>
+  <li>Second line</li>
+</ol>
+<ol TYPE='I'>
+  <li>This should be roman upper case</li>
+  <li>Second line</li>
+</ol>
+-----
+<ol TYPE='*'>
+  <li>This should be numbered (invalid type)</li>
+  <li>Second line</li>
+</ol>
+<ol TYPE='1'>
+  <li>This should be numbered</li>
+    <ol TYPE='i'>
+      <li>This should be roman lower (nesting 1)</li>
+        <ol TYPE='a'>
+          <li>This should be alpha lower (nesting 2)</li>
+          <li>This should be alpha lower (nesting 2)</li>
+          <li>This should be alpha lower (nesting 2)</li>
+        </ol>
+      <li>This should be roman lower (nesting 1)</li>
+      <li>This should be roman lower (nesting 1)</li>
+    </ol>
+  <li>This should be numbered</li>
+  <li>This should be numbered</li>
+</ol>
+------
 <table>
   <tr>
     <td>

--- wxWidgets.orig/docs/latex/wx/dc.tex
+++ wxWidgets/docs/latex/wx/dc.tex
@@ -108,7 +108,7 @@
 
 \wxheading{See also}
 
-\helpref{wxMemoryDC}{wxmemorydc}, \helpref{wxBitmap}{wxbitmap}, \helpref{wxMask}{wxmask}
+\helpref{wxDC::StretchBlit}{wxdcstretchblit}, \helpref{wxMemoryDC}{wxmemorydc}, \helpref{wxBitmap}{wxbitmap}, \helpref{wxMask}{wxmask}
 
 \begin{comment}
 
@@ -1197,3 +1197,82 @@
 
 Starts a document page (only relevant when outputting to a printer).
 
+
+\membersection{wxDC::StretchBlit}\label{wxdcstretchblit}
+
+\func{bool}{StretchBlit}{\param{wxCoord}{ xdest}, \param{wxCoord}{ ydest}, \param{wxCoord}{ dstWidth}, \param{wxCoord}{ dstHeight},
+  \param{wxDC* }{source}, \param{wxCoord}{ xsrc}, \param{wxCoord}{ ysrc}, \param{wxCoord}{ srcWidth}, \param{wxCoord}{ srcHeight}, 
+  \param{int}{ logicalFunc = wxCOPY}, \param{bool }{useMask = false}, \param{wxCoord}{ xsrcMask = -1}, \param{wxCoord}{ ysrcMask = -1}}
+
+Copy from a source DC to this DC, specifying the destination
+coordinates, destination size, source DC, source coordinates,
+size of source area to copy, logical function, whether to use a bitmap mask, 
+and mask source position.
+
+\wxheading{Parameters}
+
+\docparam{xdest}{Destination device context x position.}
+
+\docparam{ydest}{Destination device context y position.}
+
+\docparam{dstWidth}{Width of destination area.}
+
+\docparam{dstHeight}{Height of destination area.}
+
+\docparam{source}{Source device context.}
+
+\docparam{xsrc}{Source device context x position.}
+
+\docparam{ysrc}{Source device context y position.}
+
+\docparam{srcWidth}{Width of source area to be copied.}
+
+\docparam{srcHeight}{Height of source area to be copied.}
+
+\docparam{logicalFunc}{Logical function to use: see \helpref{wxDC::SetLogicalFunction}{wxdcsetlogicalfunction}.}
+
+\docparam{useMask}{If true, Blit does a transparent blit using the mask that is associated with the bitmap
+selected into the source device context. The Windows implementation does the following if MaskBlt cannot be used:
+
+\begin{enumerate}
+\item Creates a temporary bitmap and copies the destination area into it.
+\item Copies the source area into the temporary bitmap using the specified logical function.
+\item Sets the masked area in the temporary bitmap to BLACK by ANDing the
+mask bitmap with the temp bitmap with the foreground colour set to WHITE
+and the bg colour set to BLACK.
+\item Sets the unmasked area in the destination area to BLACK by ANDing the
+mask bitmap with the destination area with the foreground colour set to BLACK
+and the background colour set to WHITE.
+\item ORs the temporary bitmap with the destination area.
+\item Deletes the temporary bitmap.
+\end{enumerate}
+
+This sequence of operations ensures that the source's transparent area need not be black,
+and logical functions are supported.
+
+{\bf Note:} on Windows, blitting with masks can be speeded up considerably by compiling
+wxWidgets with the wxUSE\_DC\_CACHE option enabled. You can also influence whether MaskBlt
+or the explicit mask blitting code above is used, by using \helpref{wxSystemOptions}{wxsystemoptions} and
+setting the {\bf no-maskblt} option to 1.
+
+}
+
+\docparam{xsrcMask}{Source x position on the mask. If both xsrcMask and ysrcMask are -1, xsrc and ysrc
+will be assumed for the mask source position. Currently only implemented on Windows.}
+
+\docparam{ysrcMask}{Source y position on the mask. If both xsrcMask and ysrcMask are -1, xsrc and ysrc
+will be assumed for the mask source position. Currently only implemented on Windows.}
+
+
+\wxheading{Remarks}
+
+There is partial support for Blit in wxPostScriptDC, under X.
+
+wxDC::StretchBlit is only implemented under wxMAC and wxMSW.
+
+See \helpref{wxMemoryDC}{wxmemorydc} for typical usage.
+
+\wxheading{See also}
+
+\helpref{wxDC::Blit}{wxdcblit}, \helpref{wxMemoryDC}{wxmemorydc}, \helpref{wxBitmap}{wxbitmap}, \helpref{wxMask}{wxmask}
+
--- wxWidgets.orig/include/wx/dc.h
+++ wxWidgets/include/wx/dc.h
@@ -313,7 +313,26 @@
         return DoBlit(destPt.x, destPt.y, sz.x, sz.y,
                       source, srcPt.x, srcPt.y, rop, useMask, srcPtMask.x, srcPtMask.y);
     }
-    
+
+    bool StretchBlit(wxCoord dstX, wxCoord dstY, 
+                     wxCoord dstWidth, wxCoord dstHeight,
+                     wxDC *source, 
+                     wxCoord srcX, wxCoord srcY,
+                     wxCoord srcWidth, wxCoord srcHeight,
+                     int rop = wxCOPY, bool useMask = false, 
+                     wxCoord srcMaskX = wxDefaultCoord, wxCoord srcMaskY = wxDefaultCoord)
+    {
+        return DoStretchBlit(dstX, dstY, dstWidth, dstHeight,
+                      source, srcX, srcY, srcWidth, srcHeight, rop, useMask, srcMaskX, srcMaskY);
+    }
+    bool StretchBlit(const wxPoint& dstPt, const wxSize& dstSize,
+                     wxDC *source, const wxPoint& srcPt, const wxSize& srcSize,
+                     int rop = wxCOPY, bool useMask = false, const wxPoint& srcMaskPt = wxDefaultPosition)
+    {
+        return DoStretchBlit(dstPt.x, dstPt.y, dstSize.x, dstSize.y,
+                      source, srcPt.x, srcPt.y, srcSize.x, srcSize.y, rop, useMask, srcMaskPt.x, srcMaskPt.y);
+    }
+
     wxBitmap GetAsBitmap(const wxRect *subrect = (const wxRect *) NULL) const
     {
         return DoGetAsBitmap(subrect);
@@ -731,6 +750,23 @@
                         wxDC *source, wxCoord xsrc, wxCoord ysrc,
                         int rop = wxCOPY, bool useMask = false, wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord) = 0;
 
+    virtual bool DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                               wxCoord dstWidth, wxCoord dstHeight,
+                               wxDC *source,
+                               wxCoord xsrc, wxCoord ysrc,
+                               wxCoord WXUNUSED(srcWidth), wxCoord WXUNUSED(srcHeight),
+                               int rop = wxCOPY, bool useMask = false,
+                               wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord)
+    {
+        // temporary default implementation to avoid breaking platforms 
+        // that don't have DoStretchBlit
+        // DoStretchBlit is implemented for __WXMAC_OSX__ && __WXMSW__
+        // please implement for your platform so we can take this out!
+        // dumb default implementation ignores srcWidth & srcHeight
+        return DoBlit( xdest, ydest, dstWidth, dstHeight, source, 
+            xsrc, ysrc, rop, useMask, xsrcMask, ysrcMask );
+    }
+
     virtual wxBitmap DoGetAsBitmap(const wxRect *WXUNUSED(subrect)) const { return wxNullBitmap; }
 
     virtual void DoGetSize(int *width, int *height) const = 0;
--- wxWidgets.orig/include/wx/dcgraph.h
+++ wxWidgets/include/wx/dcgraph.h
@@ -145,6 +145,14 @@
         wxDC *source, wxCoord xsrc, wxCoord ysrc,
         int rop = wxCOPY, bool useMask = false, wxCoord xsrcMask = -1, wxCoord ysrcMask = -1);
 
+    virtual bool DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                               wxCoord dstWidth, wxCoord dstHeight,
+                               wxDC *source,
+                               wxCoord xsrc, wxCoord ysrc,
+                               wxCoord srcWidth, wxCoord srcHeight,
+                               int rop = wxCOPY, bool useMask = false,
+                               wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
+
     virtual void DoGetSize(int *,int *) const;
     virtual void DoGetSizeMM(int* width, int* height) const;
 
--- wxWidgets.orig/include/wx/mac/carbon/dc.h
+++ wxWidgets/include/wx/mac/carbon/dc.h
@@ -255,6 +255,14 @@
                         wxDC *source, wxCoord xsrc, wxCoord ysrc,
                         int rop = wxCOPY, bool useMask = false, wxCoord xsrcMask = -1, wxCoord ysrcMask = -1);
 
+    virtual bool DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                               wxCoord dstWidth, wxCoord dstHeight,
+                               wxDC *source,
+                               wxCoord xsrc, wxCoord ysrc,
+                               wxCoord srcWidth, wxCoord srcHeight,
+                               int rop = wxCOPY, bool useMask = false,
+                               wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
+
     // this is gnarly - we can't even call this function DoSetClippingRegion()
     // because of virtual function hiding
 
--- wxWidgets.orig/include/wx/msw/dc.h
+++ wxWidgets/include/wx/msw/dc.h
@@ -214,6 +214,14 @@
                         wxDC *source, wxCoord xsrc, wxCoord ysrc,
                         int rop = wxCOPY, bool useMask = false, wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
 
+    virtual bool DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                               wxCoord dstWidth, wxCoord dstHeight,
+                               wxDC *source,
+                               wxCoord xsrc, wxCoord ysrc,
+                               wxCoord srcWidth, wxCoord srcHeight,
+                               int rop = wxCOPY, bool useMask = false,
+                               wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
+
     // this is gnarly - we can't even call this function DoSetClippingRegion()
     // because of virtual function hiding
     virtual void DoSetClippingRegionAsRegion(const wxRegion& region);
--- wxWidgets.orig/samples/drawing/drawing.cpp
+++ wxWidgets/samples/drawing/drawing.cpp
@@ -70,6 +70,7 @@
     Show_Brushes,
     Show_Polygons,
     Show_Mask,
+	Show_Mask_Stretch,
     Show_Ops,
     Show_Regions,
     Show_Circles,
@@ -182,7 +183,7 @@
     void DrawTestPoly(wxDC& dc);
     void DrawTestBrushes(wxDC& dc);
     void DrawText(wxDC& dc);
-    void DrawImages(wxDC& dc);
+    void DrawImages(wxDC& dc, bool stretch);
     void DrawWithLogicalOps(wxDC& dc);
 #if wxUSE_GRAPHICS_CONTEXT
     void DrawAlpha(wxDC& dc);
@@ -227,6 +228,7 @@
     File_ShowBrushes,
     File_ShowPolygons,
     File_ShowMask,
+    File_ShowMaskStretch,
     File_ShowOps,
     File_ShowRegions,
     File_ShowCircles,
@@ -310,7 +312,8 @@
     wxPathList pathList;
     pathList.Add(_T("."));
     pathList.Add(_T(".."));
-
+    pathList.Add(_T("../.."));
+	
     wxString path = pathList.FindValidPath(_T("pat4.bmp"));
     if ( !path )
         return false;
@@ -363,9 +366,11 @@
 
     if ( !LoadImages() )
     {
-        wxLogError(wxT("Can't load one of the bitmap files needed ")
-                   wxT("for this sample from the current or parent ")
-                   wxT("directory, please copy them there."));
+        wxString error = wxString::Format(wxT("Can't load one of the bitmap files needed ")
+                                          wxT("for this sample from the current or parent ")
+                                          wxT("directory, please copy them there. (wxGetCwd()==%s)"), wxGetCwd().c_str() );
+		
+		wxLogError( error );
 
         // stop here
         DeleteBitmaps();
@@ -832,7 +837,7 @@
     { wxT("wxXOR"),          wxXOR           },
 };
 
-void MyCanvas::DrawImages(wxDC& dc)
+void MyCanvas::DrawImages(wxDC& dc, bool stretch)
 {
     dc.DrawText(_T("original image"), 0, 0);
     dc.DrawBitmap(*gs_bmpNoMask, 0, 20, 0);
@@ -854,7 +859,14 @@
 
         dc.DrawText(rasterOperations[n].name, x, y - 20);
         memDC.SelectObject(*gs_bmpWithColMask);
-        dc.Blit(x, y, cx, cy, &memDC, 0, 0, rasterOperations[n].rop, true);
+        if ( stretch )
+        {
+            dc.StretchBlit(x, y, cx, cy, &memDC, 0, 0, cx/2, cy/2, rasterOperations[n].rop, true);
+        }
+        else
+        {
+            dc.Blit(x, y, cx, cy, &memDC, 0, 0, rasterOperations[n].rop, true);
+        }
     }
 }
 
@@ -1277,7 +1289,11 @@
             break;
 
         case Show_Mask:
-            DrawImages(dc);
+            DrawImages(dc,false);
+            break;
+
+        case Show_Mask_Stretch:
+            DrawImages(dc,true);
             break;
 
         case Show_Ops:
@@ -1352,6 +1368,7 @@
     menuFile->Append(File_ShowBrushes, _T("&Brushes screen\tF4"));
     menuFile->Append(File_ShowPolygons, _T("&Polygons screen\tF5"));
     menuFile->Append(File_ShowMask, _T("&Mask screen\tF6"));
+    menuFile->Append(File_ShowMaskStretch, _T("&Mask screen (StretchBlit)\tShift-F6"));
     menuFile->Append(File_ShowOps, _T("&ROP screen\tF7"));
     menuFile->Append(File_ShowRegions, _T("Re&gions screen\tF8"));
     menuFile->Append(File_ShowCircles, _T("&Circles screen\tF9"));
--- wxWidgets.orig/src/common/dcgraph.cpp
+++ wxWidgets/src/common/dcgraph.cpp
@@ -712,11 +712,22 @@
 
 bool wxGCDC::DoBlit(
     wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height,
-    wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func , bool WXUNUSED(useMask),
+    wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func , bool useMask,
+    wxCoord xsrcMask, wxCoord ysrcMask )
+{
+    return DoStretchBlit( xdest, ydest, width, height,
+        source, xsrc, ysrc, width, height, logical_func, useMask,
+        xsrcMask,ysrcMask );
+}
+
+bool wxGCDC::DoStretchBlit(
+    wxCoord xdest, wxCoord ydest, wxCoord dstWidth, wxCoord dstHeight,
+    wxDC *source, wxCoord xsrc, wxCoord ysrc, wxCoord srcWidth, wxCoord srcHeight,
+    int logical_func , bool WXUNUSED(useMask),
     wxCoord xsrcMask, wxCoord ysrcMask )
 {
-    wxCHECK_MSG( Ok(), false, wxT("wxGCDC(cg)::DoBlit - invalid DC") );
-    wxCHECK_MSG( source->Ok(), false, wxT("wxGCDC(cg)::DoBlit - invalid source DC") );
+    wxCHECK_MSG( Ok(), false, wxT("wxGCDC(cg)::DoStretchBlit - invalid DC") );
+    wxCHECK_MSG( source->Ok(), false, wxT("wxGCDC(cg)::DoStretchBlit - invalid source DC") );
 
     if ( logical_func == wxNO_OP )
         return true;
@@ -734,8 +745,8 @@
 
     wxRect subrect(source->LogicalToDeviceX(xsrc),
                    source->LogicalToDeviceY(ysrc),
-                   source->LogicalToDeviceXRel(width),
-                   source->LogicalToDeviceYRel(height));
+                   source->LogicalToDeviceXRel(srcWidth),
+                   source->LogicalToDeviceYRel(srcHeight));
 
     // if needed clip the subrect down to the size of the source DC
     wxCoord sw, sh;
@@ -752,8 +763,7 @@
     if ( blit.Ok() )
     {
         m_graphicContext->DrawBitmap( blit, xdest, ydest,
-                                      wxMin(width, blit.GetWidth()),
-                                      wxMin(height, blit.GetHeight()));
+                                      dstWidth, dstHeight);
     }
     else
     {
--- wxWidgets.orig/src/mac/carbon/dc.cpp
+++ wxWidgets/src/mac/carbon/dc.cpp
@@ -1175,12 +1175,26 @@
     return true ;
 }
 
-bool wxDC::DoBlit(wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height,
+bool wxDC::DoBlit(wxCoord xdest, wxCoord ydest, wxCoord dstWidth, wxCoord dstHeight,
                    wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func , bool useMask,
                    wxCoord xsrcMask, wxCoord ysrcMask )
 {
-    wxCHECK_MSG(Ok(), false, wxT("wxDC::DoBlit - invalid DC"));
-    wxCHECK_MSG(source->Ok(), false, wxT("wxDC::DoBlit - invalid source DC"));
+    return DoStretchBlit( xdest, ydest, dstWidth, dstHeight,
+                           source, xsrc, ysrc, dstWidth, dstHeight, 
+                           logical_func, useMask,
+                           xsrcMask, ysrcMask );
+}
+
+bool wxDC::DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                         wxCoord dstWidth, wxCoord dstHeight,
+                         wxDC *source,
+                         wxCoord xsrc, wxCoord ysrc,
+                         wxCoord srcWidth, wxCoord srcHeight,
+                         int logical_func = wxCOPY, bool useMask = false,
+                         wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
+{
+    wxCHECK_MSG(Ok(), false, wxT("wxDC::DoStretchBlit - invalid DC"));
+    wxCHECK_MSG(source->Ok(), false, wxT("wxDC::DoStretchBlit - invalid source DC"));
 
     if ( logical_func == wxNO_OP )
         return true ;
@@ -1198,12 +1212,12 @@
     Rect srcrect , dstrect ;
     srcrect.top = source->YLOG2DEVMAC(ysrc) ;
     srcrect.left = source->XLOG2DEVMAC(xsrc)  ;
-    srcrect.right = source->XLOG2DEVMAC(xsrc + width ) ;
-    srcrect.bottom = source->YLOG2DEVMAC(ysrc + height) ;
+    srcrect.right = source->XLOG2DEVMAC(xsrc + srcWidth ) ;
+    srcrect.bottom = source->YLOG2DEVMAC(ysrc + srcHeight) ;
     dstrect.top = YLOG2DEVMAC(ydest) ;
     dstrect.left = XLOG2DEVMAC(xdest) ;
-    dstrect.bottom = YLOG2DEVMAC(ydest + height )  ;
-    dstrect.right = XLOG2DEVMAC(xdest + width ) ;
+    dstrect.bottom = YLOG2DEVMAC(ydest + dstHeight )  ;
+    dstrect.right = XLOG2DEVMAC(xdest + dstWidth ) ;
     short mode = kUnsupportedMode ;
     bool invertDestinationFirst = false ;
 
--- wxWidgets.orig/src/mac/carbon/dccg.cpp
+++ wxWidgets/src/mac/carbon/dccg.cpp
@@ -2021,8 +2021,22 @@
     wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func , bool useMask,
     wxCoord xsrcMask, wxCoord ysrcMask )
 {
-    wxCHECK_MSG( Ok(), false, wxT("wxDC(cg)::DoBlit - invalid DC") );
-    wxCHECK_MSG( source->Ok(), false, wxT("wxDC(cg)::DoBlit - invalid source DC") );
+    return DoStretchBlit( xdest, ydest, width, height,
+                           source, xsrc, ysrc, width, height, 
+                           logical_func, useMask,
+                           xsrcMask, ysrcMask );
+}
+
+bool wxDC::DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                         wxCoord dstWidth, wxCoord dstHeight,
+                         wxDC *source,
+                         wxCoord xsrc, wxCoord ysrc,
+                         wxCoord srcWidth, wxCoord srcHeight,
+                         int logical_func = wxCOPY, bool useMask = false,
+                         wxCoord xsrcMask = wxDefaultCoord, wxCoord ysrcMask = wxDefaultCoord);
+{
+    wxCHECK_MSG( Ok(), false, wxT("wxDC(cg)::DoStretchBlit - invalid DC") );
+    wxCHECK_MSG( source->Ok(), false, wxT("wxDC(cg)::DoStretchBlit - invalid source DC") );
 
     if ( logical_func == wxNO_OP )
         return true ;
@@ -2035,13 +2049,13 @@
 
     wxCoord yysrc = source->YLOG2DEVMAC(ysrc) ;
     wxCoord xxsrc = source->XLOG2DEVMAC(xsrc) ;
-    wxCoord wwsrc = source->XLOG2DEVREL(width) ;
-    wxCoord hhsrc = source->YLOG2DEVREL(height) ;
+    wxCoord wwsrc = source->XLOG2DEVREL(srcWidth) ;
+    wxCoord hhsrc = source->YLOG2DEVREL(srcHeight) ;
 
     wxCoord yydest = YLOG2DEVMAC(ydest) ;
     wxCoord xxdest = XLOG2DEVMAC(xdest) ;
-    wxCoord wwdest = XLOG2DEVREL(width) ;
-    wxCoord hhdest = YLOG2DEVREL(height) ;
+    wxCoord wwdest = XLOG2DEVREL(dstWidth) ;
+    wxCoord hhdest = YLOG2DEVREL(dstHeight) ;
 
     wxMemoryDC* memdc = dynamic_cast<wxMemoryDC*>(source) ;
     if ( memdc && logical_func == wxCOPY )
--- wxWidgets.orig/src/msw/dc.cpp
+++ wxWidgets/src/msw/dc.cpp
@@ -130,16 +130,21 @@
 // return true if we could draw the bitmap in one way or the other, false
 // otherwise
 static bool AlphaBlt(HDC hdcDst,
-                     int x, int y, int w, int h,
-                     int srcX, int srcY, HDC hdcSrc,
-                     const wxBitmap& bmpSrc);
+                     int x, int y, int dstWidth, int dstHeight,
+                     int srcX, int srcY, 
+                     int srcWidth, int srcHeight,
+                     HDC hdcSrc,
+                     const wxBitmap& bmp);
 
 #ifdef wxHAVE_RAW_BITMAP
 
 // our (limited) AlphaBlend() replacement for Windows versions not providing it
 static void
-wxAlphaBlend(HDC hdcDst, int x, int y, int w, int h,
-             int srcX, int srcY, const wxBitmap& bmp);
+wxAlphaBlend(HDC hdcDst, int xDst, int yDst,
+             int dstWidth, int dstHeight,
+             int srcX, int srcY, 
+             int srcWidth, int srcHeight,
+             const wxBitmap& bmpSrc);
 
 #endif // wxHAVE_RAW_BITMAP
 
@@ -1183,7 +1188,7 @@
         MemoryHDC hdcMem;
         SelectInHDC select(hdcMem, GetHbitmapOf(bmp));
 
-        if ( AlphaBlt(GetHdc(), x, y, width, height, 0, 0, hdcMem, bmp) )
+        if ( AlphaBlt(GetHdc(), x, y, width, height, 0, 0, width, height, hdcMem, bmp) )
             return;
     }
 
@@ -2046,12 +2051,23 @@
 // ---------------------------------------------------------------------------
 // bit blit
 // ---------------------------------------------------------------------------
+bool wxDC::DoBlit(wxCoord dstX, wxCoord dstY,
+                  wxCoord dstWidth, wxCoord dstHeight,
+                  wxDC *source,
+                  wxCoord srcX, wxCoord srcY,
+                  int rop, bool useMask,
+                  wxCoord srcMaskX, wxCoord srcMaskY)
+{
+    return DoStretchBlit(dstX, dstY, dstWidth, dstHeight, source, srcX, srcY, dstWidth, dstHeight, rop, useMask, srcMaskX, srcMaskY);
+}
 
-bool wxDC::DoBlit(wxCoord xdest, wxCoord ydest,
-                  wxCoord width, wxCoord height,
-                  wxDC *source, wxCoord xsrc, wxCoord ysrc,
-                  int rop, bool useMask,
-                  wxCoord xsrcMask, wxCoord ysrcMask)
+bool wxDC::DoStretchBlit(wxCoord xdest, wxCoord ydest,
+                         wxCoord dstWidth, wxCoord dstHeight,
+                         wxDC *source,
+                         wxCoord xsrc, wxCoord ysrc,
+                         wxCoord srcWidth, wxCoord srcHeight,
+                         int rop, bool useMask,
+                         wxCoord xsrcMask, wxCoord ysrcMask)
 {
     wxCHECK_MSG( source, false, _T("wxDC::Blit(): NULL wxDC pointer") );
 
@@ -2063,8 +2079,8 @@
     if ( bmpSrc.Ok() && (bmpSrc.HasAlpha() ||
             (m_selectedBitmap.Ok() && m_selectedBitmap.HasAlpha())) )
     {
-        if ( AlphaBlt(GetHdc(), xdest, ydest, width, height,
-                      xsrc, ysrc, GetHdcOf(*source), bmpSrc) )
+        if ( AlphaBlt(GetHdc(), xdest, ydest, dstWidth, dstHeight,
+                      xsrc, ysrc, srcWidth, srcHeight, GetHdcOf(*source), bmpSrc) )
             return true;
     }
 
@@ -2138,16 +2154,19 @@
         if (wxSystemOptions::GetOptionInt(wxT("no-maskblt")) == 0)
 #endif
         {
-           success = ::MaskBlt
-                       (
+            if ( dstWidth == srcWidth && dstHeight == srcHeight )
+            {
+                success = ::MaskBlt
+                            (
                             GetHdc(),
-                            xdest, ydest, width, height,
+                            xdest, ydest, dstWidth, dstHeight,
                             GetHdcOf(*source),
                             xsrc, ysrc,
                             (HBITMAP)mask->GetMaskBitmap(),
                             xsrcMask, ysrcMask,
                             MAKEROP4(dwRop, DSTCOPY)
-                        ) != 0;
+                            ) != 0;
+            }
         }
 
         if ( !success )
@@ -2167,55 +2186,59 @@
             dc_buffer = (HDC) dcCacheEntry2->m_dc;
 
             wxDCCacheEntry* bitmapCacheEntry = FindBitmapInCache(GetHDC(),
-                width, height);
+                dstWidth, dstHeight);
 
             buffer_bmap = (HBITMAP) bitmapCacheEntry->m_bitmap;
 #else // !wxUSE_DC_CACHEING
             // create a temp buffer bitmap and DCs to access it and the mask
             dc_mask = ::CreateCompatibleDC(GetHdcOf(*source));
             dc_buffer = ::CreateCompatibleDC(GetHdc());
-            buffer_bmap = ::CreateCompatibleBitmap(GetHdc(), width, height);
+            buffer_bmap = ::CreateCompatibleBitmap(GetHdc(), dstWidth, dstHeight);
 #endif // wxUSE_DC_CACHEING/!wxUSE_DC_CACHEING
             HGDIOBJ hOldMaskBitmap = ::SelectObject(dc_mask, (HBITMAP) mask->GetMaskBitmap());
             HGDIOBJ hOldBufferBitmap = ::SelectObject(dc_buffer, buffer_bmap);
 
             // copy dest to buffer
-            if ( !::BitBlt(dc_buffer, 0, 0, (int)width, (int)height,
+            if ( !::BitBlt(dc_buffer, 0, 0, (int)dstWidth, (int)dstHeight,
                            GetHdc(), xdest, ydest, SRCCOPY) )
             {
                 wxLogLastError(wxT("BitBlt"));
             }
 
+#ifndef __WXWINCE__
+            StretchBltModeChanger changeMode(dc_buffer, COLORONCOLOR);
+#endif
+
             // copy src to buffer using selected raster op
-            if ( !::BitBlt(dc_buffer, 0, 0, (int)width, (int)height,
-                           GetHdcOf(*source), xsrc, ysrc, dwRop) )
+            if ( !::StretchBlt(dc_buffer, 0, 0, (int)dstWidth, (int)dstHeight,
+                           GetHdcOf(*source), xsrc, ysrc, srcWidth, srcHeight, dwRop) )
             {
-                wxLogLastError(wxT("BitBlt"));
+                wxLogLastError(wxT("StretchBlt"));
             }
 
             // set masked area in buffer to BLACK (pixel value 0)
             COLORREF prevBkCol = ::SetBkColor(GetHdc(), RGB(255, 255, 255));
             COLORREF prevCol = ::SetTextColor(GetHdc(), RGB(0, 0, 0));
-            if ( !::BitBlt(dc_buffer, 0, 0, (int)width, (int)height,
-                           dc_mask, xsrcMask, ysrcMask, SRCAND) )
+            if ( !::StretchBlt(dc_buffer, 0, 0, (int)dstWidth, (int)dstHeight,
+                           dc_mask, xsrcMask, ysrcMask, srcWidth, srcHeight, SRCAND) )
             {
-                wxLogLastError(wxT("BitBlt"));
+                wxLogLastError(wxT("StretchBlt"));
             }
 
             // set unmasked area in dest to BLACK
             ::SetBkColor(GetHdc(), RGB(0, 0, 0));
             ::SetTextColor(GetHdc(), RGB(255, 255, 255));
-            if ( !::BitBlt(GetHdc(), xdest, ydest, (int)width, (int)height,
-                           dc_mask, xsrcMask, ysrcMask, SRCAND) )
+            if ( !::StretchBlt(GetHdc(), xdest, ydest, (int)dstWidth, (int)dstHeight,
+                           dc_mask, xsrcMask, ysrcMask, srcWidth, srcHeight, SRCAND) )
             {
-                wxLogLastError(wxT("BitBlt"));
+                wxLogLastError(wxT("StretchBlt"));
             }
             ::SetBkColor(GetHdc(), prevBkCol);   // restore colours to original values
             ::SetTextColor(GetHdc(), prevCol);
 
             // OR buffer to dest
             success = ::BitBlt(GetHdc(), xdest, ydest,
-                               (int)width, (int)height,
+                               (int)dstWidth, (int)dstHeight,
                                dc_buffer, 0, 0, SRCPAINT) != 0;
             if ( !success )
             {
@@ -2260,14 +2283,14 @@
                 if ( hDIB > 0 )
                 {
                     // reflect ysrc
-                    ysrc = hDIB - (ysrc + height);
+                    ysrc = hDIB - (ysrc + dstHeight);
                 }
 
                 if ( ::StretchDIBits(GetHdc(),
                                      xdest, ydest,
-                                     width, height,
+                                     dstWidth, dstHeight,
                                      xsrc, ysrc,
-                                     width, height,
+                                     srcWidth, srcHeight,
                                      ds.dsBm.bmBits,
                                      (LPBITMAPINFO)&ds.dsBmih,
                                      DIB_RGB_COLORS,
@@ -2298,9 +2321,9 @@
             if ( !::StretchBlt
                     (
                         GetHdc(),
-                        xdest, ydest, width, height,
+                        xdest, ydest, dstWidth, dstHeight,
                         GetHdcOf(*source),
-                        xsrc, ysrc, width, height,
+                        xsrc, ysrc, srcWidth, srcHeight,
                         dwRop
                     ) )
             {
@@ -2318,7 +2341,7 @@
                     (
                         GetHdc(),
                         xdest, ydest,
-                        (int)width, (int)height,
+                        (int)dstWidth, (int)dstHeight,
                         GetHdcOf(*source),
                         xsrc, ysrc,
                         dwRop
@@ -2540,8 +2563,10 @@
 // ----------------------------------------------------------------------------
 
 static bool AlphaBlt(HDC hdcDst,
-                     int x, int y, int width, int height,
-                     int srcX, int srcY, HDC hdcSrc,
+                     int x, int y, int dstWidth, int dstHeight,
+                     int srcX, int srcY, 
+                     int srcWidth, int srcHeight,
+                     HDC hdcSrc,
                      const wxBitmap& bmp)
 {
     wxASSERT_MSG( bmp.Ok() && bmp.HasAlpha(), _T("AlphaBlt(): invalid bitmap") );
@@ -2564,8 +2589,8 @@
         bf.SourceConstantAlpha = 0xff;
         bf.AlphaFormat = AC_SRC_ALPHA;
 
-        if ( pfnAlphaBlend(hdcDst, x, y, width, height,
-                           hdcSrc, srcX, srcY, width, height,
+        if ( pfnAlphaBlend(hdcDst, x, y, dstWidth, dstHeight,
+                           hdcSrc, srcX, srcY, srcWidth, srcHeight,
                            bf) )
         {
             // skip wxAlphaBlend() call below
@@ -2581,7 +2606,7 @@
     // AlphaBlend() unavailable of failed: use our own (probably much slower)
     // implementation
 #ifdef wxHAVE_RAW_BITMAP
-    wxAlphaBlend(hdcDst, x, y, width, height, srcX, srcY, bmp);
+    wxAlphaBlend(hdcDst, x, y, dstWidth, dstHeight, srcX, srcY, srcWidth, srcHeight, bmp);
 
     return true;
 #else // !wxHAVE_RAW_BITMAP
@@ -2598,15 +2623,17 @@
 
 static void
 wxAlphaBlend(HDC hdcDst, int xDst, int yDst,
-             int w, int h,
-             int srcX, int srcY, const wxBitmap& bmpSrc)
+             int dstWidth, int dstHeight,
+             int srcX, int srcY, 
+             int srcWidth, int srcHeight,
+             const wxBitmap& bmpSrc)
 {
     // get the destination DC pixels
-    wxBitmap bmpDst(w, h, 32 /* force creating RGBA DIB */);
+    wxBitmap bmpDst(dstWidth, dstHeight, 32 /* force creating RGBA DIB */);
     MemoryHDC hdcMem;
     SelectInHDC select(hdcMem, GetHbitmapOf(bmpDst));
 
-    if ( !::BitBlt(hdcMem, 0, 0, w, h, hdcDst, xDst, yDst, SRCCOPY) )
+    if ( !::BitBlt(hdcMem, 0, 0, dstWidth, dstHeight, hdcDst, xDst, yDst, SRCCOPY) )
     {
         wxLogLastError(_T("BitBlt"));
     }
@@ -2621,15 +2648,17 @@
     wxAlphaPixelData::Iterator pDst(dataDst),
                                pSrc(dataSrc);
 
-    pSrc.Offset(dataSrc, srcX, srcY);
 
-    for ( int y = 0; y < h; y++ )
+    for ( int y = 0; y < dstHeight; y++ )
     {
-        wxAlphaPixelData::Iterator pDstRowStart = pDst,
-                                   pSrcRowStart = pSrc;
+        wxAlphaPixelData::Iterator pDstRowStart = pDst;
 
-        for ( int x = 0; x < w; x++ )
+        for ( int x = 0; x < dstWidth; x++ )
         {
+            // source is point sampled, Alpha StretchBlit is ugly on Win95
+            // (but does not impact performance)
+            pSrc.MoveTo(dataSrc, srcX + (srcWidth*x/dstWidth), srcY + (srcHeight*y/dstHeight));
+
             // note that source bitmap uses premultiplied alpha (as required by
             // the real AlphaBlend)
             const unsigned beta = 255 - pSrc.Alpha();
@@ -2639,17 +2668,14 @@
             pDst.Green() = pSrc.Green() + (beta * pDst.Green() + 127) / 255;
 
             ++pDst;
-            ++pSrc;
         }
 
         pDst = pDstRowStart;
-        pSrc = pSrcRowStart;
         pDst.OffsetY(dataDst, 1);
-        pSrc.OffsetY(dataSrc, 1);
     }
 
     // and finally blit them back to the destination DC
-    if ( !::BitBlt(hdcDst, xDst, yDst, w, h, hdcMem, 0, 0, SRCCOPY) )
+    if ( !::BitBlt(hdcDst, xDst, yDst, dstWidth, dstHeight, hdcMem, 0, 0, SRCCOPY) )
     {
         wxLogLastError(_T("BitBlt"));
     }
--- wxWidgets.orig/src/wxWindows.xcodeproj/project.pbxproj
+++ wxWidgets/src/wxWindows.xcodeproj/project.pbxproj
@@ -1119,6 +1119,8 @@
 		61048AE30B278C9A009C253D /* srchctrl.h in Headers */ = {isa = PBXBuildFile; fileRef = 61048AE10B278C9A009C253D /* srchctrl.h */; };
 		61048BE90B27B7D0009C253D /* srchctlg.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048BE80B27B7D0009C253D /* srchctlg.cpp */; };
 		61048BEA0B27B7D0009C253D /* srchctlg.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 61048BE80B27B7D0009C253D /* srchctlg.cpp */; };
+		61C4C2760B2A531300675592 /* dcgraph.h in Headers */ = {isa = PBXBuildFile; fileRef = 61C4C2750B2A531300675592 /* dcgraph.h */; };
+		61C4C2770B2A531300675592 /* dcgraph.h in Headers */ = {isa = PBXBuildFile; fileRef = 61C4C2750B2A531300675592 /* dcgraph.h */; };
 /* End PBXBuildFile section */
 
 /* Begin PBXBuildRule section */
@@ -1336,6 +1338,7 @@
 		61048A700B277DE5009C253D /* print.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; name = print.h; path = private/print.h; sourceTree = "<group>"; };
 		61048AE10B278C9A009C253D /* srchctrl.h */ = {isa = PBXFileReference; fileEncoding = 30; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = srchctrl.h; sourceTree = "<group>"; tabWidth = 4; usesTabs = 0; };
 		61048BE80B27B7D0009C253D /* srchctlg.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = srchctlg.cpp; sourceTree = "<group>"; };
+		61C4C2750B2A531300675592 /* dcgraph.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; path = dcgraph.h; sourceTree = "<group>"; };
 		CA0CB57B0450773900000102 /* accesscmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = accesscmn.cpp; sourceTree = "<group>"; };
 		CA0CB57C0450773900000102 /* datacmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = datacmn.cpp; sourceTree = "<group>"; };
 		CA0CB57D0450773900000102 /* dpycmn.cpp */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = dpycmn.cpp; sourceTree = "<group>"; };
@@ -2345,6 +2348,7 @@
 				F5A85C4501FA022A0175ACA7 /* dbtable.h */,
 				F5A85C4601FA022A0175ACA7 /* dc.h */,
 				F5A85C4701FA022A0175ACA7 /* dcclient.h */,
+				61C4C2750B2A531300675592 /* dcgraph.h */,
 				F5A85C4801FA022A0175ACA7 /* dcmemory.h */,
 				F5A85C4901FA022A0175ACA7 /* dcprint.h */,
 				F5A85C4A01FA022A0175ACA7 /* dcps.h */,
@@ -3272,6 +3276,7 @@
 				43DFF59D09926B080033000B /* helpdlg.h in Headers */,
 				43DFF59E09926B080033000B /* helpwnd.h in Headers */,
 				61048AE20B278C9A009C253D /* srchctrl.h in Headers */,
+				61C4C2760B2A531300675592 /* dcgraph.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -3287,6 +3292,7 @@
 				61048A750B277DE5009C253D /* overlay.h in Headers */,
 				61048A760B277DE5009C253D /* print.h in Headers */,
 				61048AE30B278C9A009C253D /* srchctrl.h in Headers */,
+				61C4C2770B2A531300675592 /* dcgraph.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};

 	  	 

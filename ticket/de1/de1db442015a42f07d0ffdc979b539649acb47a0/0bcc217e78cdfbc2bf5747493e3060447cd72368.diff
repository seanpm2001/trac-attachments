Index: accel.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/accel.h,v
retrieving revision 1.12
diff -b -u -2 -r1.12 accel.h
--- accel.h	2003/03/22 06:13:03	1.12
+++ accel.h	2004/01/29 19:52:16
@@ -112,5 +112,5 @@
 // and so doesn't have any published user visible interface
 // ----------------------------------------------------------------------------
-
+/*
 #if defined(__WXUNIVERSAL__)
     #include "wx/generic/accel.h"
@@ -128,5 +128,6 @@
     #include "wx/os2/accel.h"
 #endif
-
+*/
+    #include ":wx:mac:accel.h"
 WXDLLEXPORT_DATA(extern wxAcceleratorTable) wxNullAcceleratorTable;
 
Index: buffer.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/buffer.h,v
retrieving revision 1.28
diff -b -u -2 -r1.28 buffer.h
--- buffer.h	2003/03/17 10:33:29	1.28
+++ buffer.h	2004/01/29 19:52:16
@@ -174,5 +174,5 @@
     size_t m_ref;
 
-    DECLARE_NO_COPY_CLASS(wxMemoryBufferData)
+    DECLARE_NO_COPY_CLASS(wxMemoryBufferData);
 };
 
Index: datstrm.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/datstrm.h,v
retrieving revision 1.30
diff -b -u -2 -r1.30 datstrm.h
--- datstrm.h	2003/08/09 12:37:11	1.30
+++ datstrm.h	2004/01/29 19:52:16
@@ -22,5 +22,4 @@
 
 #if wxUSE_STREAMS
-
 class WXDLLIMPEXP_BASE wxDataInputStream
 {
Index: defs.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/defs.h,v
retrieving revision 1.412
diff -b -u -2 -r1.412 defs.h
--- defs.h	2003/12/18 07:38:00	1.412
+++ defs.h	2004/01/29 19:52:16
@@ -657,4 +657,8 @@
     #endif
 #else /*  !Windows */
+	/*On MRC size_t == UINT, and it will break string.h*/
+	#ifdef __MRC__
+		#define wxSIZE_T_IS_UINT
+    #endif
     /*  SIZEOF_XXX are normally defined by configure */
     #ifdef SIZEOF_INT
@@ -769,4 +773,8 @@
     typedef wxLongLong_t wxInt64;
     typedef unsigned wxLongLong_t wxUint64;
+#else
+#include "wx/longlong.h"
+    typedef wxLongLong wxInt64;
+    typedef wxULongLong wxUint64;
 #endif
 
@@ -2399,12 +2407,16 @@
 /*  --------------------------------------------------------------------------- */
 
+//
+//	NOTE: FOR MGW FUNCTIONS ----MUST---- HAVE IMPLEMENTATIONS OTHERWISE
+//	A LINK ERROR WILL OCCUR!!!!
+//
 #define DECLARE_NO_COPY_CLASS(classname)        \
     private:                                    \
-        classname(const classname&);            \
-        classname& operator=(const classname&);
+      /*classname(const classname&) {}*/       \
+      classname& operator=(const classname&) {return *this;}
 
 #define DECLARE_NO_ASSIGN_CLASS(classname)      \
     private:                                    \
-        classname& operator=(const classname&);
+       classname& operator=(const classname&) {return *this;}
 
 #endif
Index: dlimpexp.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dlimpexp.h,v
retrieving revision 1.1
diff -b -u -2 -r1.1 dlimpexp.h
--- dlimpexp.h	2003/10/16 10:25:50	1.1
+++ dlimpexp.h	2004/01/29 19:52:16
@@ -42,5 +42,5 @@
 #    endif
 #elif defined(__WXMAC__) || defined(__WXCOCOA__)
-#    ifdef __MWERKS__
+#    if defined(__MWERKS__)
 #        define WXEXPORT __declspec(export)
 #        define WXIMPORT __declspec(import)
Index: dynarray.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dynarray.h,v
retrieving revision 1.70
diff -b -u -2 -r1.70 dynarray.h
--- dynarray.h	2003/10/08 22:13:02	1.70
+++ dynarray.h	2004/01/29 19:52:16
@@ -185,7 +185,7 @@
   typedef T base_type;                                              \
                                                                     \
-protected:                                                          \
+                            /*MUST BE PUBLIC ON MRC*/                          \
   T& Item(size_t uiIndex) const                                     \
-    { wxASSERT( uiIndex < m_nCount ); return m_pItems[uiIndex]; }   \
+    { wxASSERT( uiIndex < m_nCount ); return ((T*)m_pItems)[uiIndex]; }   \
   T& operator[](size_t uiIndex) const { return Item(uiIndex); }     \
                                                                     \
@@ -480,7 +480,11 @@
 #define _WX_PTROP pointer operator->() const { return m_ptr; }
 #define _WX_PTROP_NONE
-
+#ifdef __MRC__
+#define _WX_DEFINE_TYPEARRAY(T, name, base, classexp)                 \
+    _WX_DEFINE_TYPEARRAY_HELPER(T, name, base, classexp, _WX_PTROP_NONE)
+#else
 #define _WX_DEFINE_TYPEARRAY(T, name, base, classexp)                 \
     _WX_DEFINE_TYPEARRAY_HELPER(T, name, base, classexp, _WX_PTROP)
+#endif
 #define _WX_DEFINE_TYPEARRAY_PTR(T, name, base, classexp)          \
     _WX_DEFINE_TYPEARRAY_HELPER(T, name, base, classexp, _WX_PTROP_NONE)
@@ -803,6 +807,5 @@
 // ----------------------------------------------------------------------------
 
-WX_DECLARE_USER_EXPORTED_BASEARRAY(const void *, wxBaseArrayPtrVoid,
-                                   WXDLLIMPEXP_BASE);
+WX_DECLARE_USER_EXPORTED_BASEARRAY(const void *, wxBaseArrayPtrVoid, WXDLLIMPEXP_BASE);
 WX_DECLARE_USER_EXPORTED_BASEARRAY(short, wxBaseArrayShort, WXDLLIMPEXP_BASE);
 WX_DECLARE_USER_EXPORTED_BASEARRAY(int, wxBaseArrayInt, WXDLLIMPEXP_BASE);
Index: event.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/event.h,v
retrieving revision 1.192
diff -b -u -2 -r1.192 event.h
--- event.h	2003/10/16 15:05:32	1.192
+++ event.h	2004/01/29 19:52:16
@@ -326,5 +326,5 @@
 {
 private:
-    wxEvent& operator=(const wxEvent&);
+    wxEvent& operator=(const wxEvent&) {return *this;}
 
 protected:
@@ -2183,11 +2183,14 @@
                   wxEvtHandler *eventSink = (wxEvtHandler *) NULL );
 
+#ifndef __MRC__ //broken on MRC - it think this function wants to call itself
     // Convenience function: take just one id
-    void Connect( int winid, int eventType,
-                  wxObjectEventFunction func,
+    void Connect( int winid, const int& eventType=0,
+                  wxObjectEventFunction func=NULL,
                   wxObject *userData = (wxObject *) NULL,
                   wxEvtHandler *eventSink = (wxEvtHandler *) NULL )
-        { Connect(winid, wxID_ANY, eventType, func, userData, eventSink); }
-
+        { 
+			Connect(winid, wxID_ANY, eventType, func, userData, eventSink); 
+		}
+#endif
     bool Disconnect( int winid, int lastId, wxEventType eventType,
                   wxObjectEventFunction func = NULL,
@@ -2195,4 +2198,5 @@
                   wxEvtHandler *eventSink = (wxEvtHandler *) NULL );
 
+#ifndef __MRC__
     // Convenience function: take just one id
     bool Disconnect( int winid, wxEventType eventType = wxEVT_NULL,
@@ -2200,6 +2204,8 @@
                   wxObject *userData = (wxObject *) NULL,
                   wxEvtHandler *eventSink = (wxEvtHandler *) NULL )
-        { return Disconnect(winid, wxID_ANY, eventType, func, userData, eventSink); }
-
+        { 
+			return Disconnect(winid, wxID_ANY, eventType, func, userData, eventSink); 
+		}
+#endif
     wxList* GetDynamicEventTable() const { return m_dynamicEvents ; }
 
Index: features.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/features.h,v
retrieving revision 1.11
diff -b -u -2 -r1.11 features.h
--- features.h	2003/12/17 19:50:58	1.11
+++ features.h	2004/01/29 19:52:16
@@ -38,6 +38,6 @@
 #endif
 
-/*  taskbar is only implemented in wxMSW and X11 ports */
-#if defined(__WXMSW__) || \
+/*  taskbar is only implemented in wxMSW, DARWIN and X11 ports */
+#if defined(__WXMSW__) || defined(__DARWIN__) || \
         defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXX11__)
     #define wxHAS_TASK_BAR_ICON
Index: ffile.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/ffile.h,v
retrieving revision 1.14
diff -b -u -2 -r1.14 ffile.h
--- ffile.h	2003/08/09 12:37:12	1.14
+++ ffile.h	2004/01/29 19:52:16
@@ -38,4 +38,6 @@
 {
 public:
+    // opening mode
+  enum OpenMode { read, write, read_write, write_append, write_excl };
   // ctors
   // -----
@@ -44,4 +46,7 @@
     // open specified file (may fail, use IsOpened())
   wxFFile(const wxChar *filename, const wxChar *mode = _T("r"));
+  wxFFile(const wxChar *filename, const int& mode)
+  { Open(filename, mode); }
+  
     // attach to (already opened) file
   wxFFile(FILE *fp) { m_fp = fp; }
@@ -50,7 +55,19 @@
     // open a file (existing or not - the mode controls what happens)
   bool Open(const wxChar *filename, const wxChar *mode = _T("r"));
+  bool Open(const wxChar *filename, const int& mode)
+  {	return Open(filename, 
+		mode == read ? "r" : 
+		mode == read_write ? "rw" : 
+		mode == write_append ? "a" : 
+		mode == write_excl ? "w+" : 
+		"a+"); }
     // closes the opened file (this is a NOP if not opened)
   bool Close();
 
+  bool Create(const wxChar* fn, int overwrite = 1)
+  {
+	m_fp = fopen((m_name=fn).c_str(), overwrite ? "w+" : "w");
+	return m_fp != NULL;
+  }
   // assign an existing file descriptor and get it back from wxFFile object
   void Attach(FILE *fp, const wxString& name = wxEmptyString)
@@ -97,4 +114,5 @@
   const wxString& GetName() const { return m_name; }
 
+  static bool Exists(const wxChar* fn) { FILE* f = fopen(fn, "r");  bool b = f != NULL; fclose(f); return b;}
   // dtor closes the file if opened
   ~wxFFile() { Close(); }
Index: file.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/file.h,v
retrieving revision 1.31
diff -b -u -2 -r1.31 file.h
--- file.h	2003/12/11 10:59:05	1.31
+++ file.h	2004/01/29 19:52:16
@@ -26,4 +26,9 @@
 #if wxUSE_FILE
 
+#ifdef __MRC__
+//MRC does not have non-crt file funcs
+#include "wx/ffile.h"
+typedef wxFFile wxFile;
+#else
 // ----------------------------------------------------------------------------
 // constants
@@ -142,5 +147,5 @@
   bool m_error; // error memory
 };
-
+#endif //__MRC__
 // ----------------------------------------------------------------------------
 // class wxTempFile: if you want to replace another file, create an instance
@@ -189,5 +194,4 @@
   wxFile    m_file;     // the temporary file
 };
-
 #endif // wxUSE_FILE
 
Index: filefn.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filefn.h,v
retrieving revision 1.83
diff -b -u -2 -r1.83 filefn.h
--- filefn.h	2003/11/23 22:08:23	1.83
+++ filefn.h	2004/01/29 19:52:16
@@ -44,8 +44,7 @@
 #elif defined(__SYMANTEC__)
     typedef long off_t;
-#elif defined(__MWERKS__) && !defined(__INTEL__) && !defined(__MACH__)
+#elif (defined(__MWERKS__)||defined(__MRC__)) && !defined(__INTEL__) && !defined(__MACH__)
     typedef long off_t;
 #endif
-
 #endif
 
Index: filename.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/filename.h,v
retrieving revision 1.49
diff -b -u -2 -r1.49 filename.h
--- filename.h	2003/12/20 13:59:03	1.49
+++ filename.h	2004/01/29 19:52:16
@@ -40,6 +40,10 @@
 #include "wx/datetime.h"
 
+#ifndef __MRC__
 class WXDLLIMPEXP_BASE wxFile;
-
+#else
+class WXDLLIMPEXP_BASE wxFFile;
+typedef wxFFile wxFile;
+#endif
 // ----------------------------------------------------------------------------
 // constants
Index: hashmap.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/hashmap.h,v
retrieving revision 1.34
diff -b -u -2 -r1.34 hashmap.h
--- hashmap.h	2003/11/23 08:12:30	1.34
+++ hashmap.h	2004/01/29 19:52:16
@@ -168,6 +168,6 @@
         iterator& operator++() { PlusPlus(); return *this; } \
         iterator operator++(int) { iterator it=*this;PlusPlus();return it; } \
-        reference operator *() const { return m_node->m_value; } \
-        pointer operator ->() const { return &(m_node->m_value); } \
+        reference operator *() const { return (reference)m_node->m_value; } \
+        pointer operator ->() const { return (pointer)&(m_node->m_value); } \
     }; \
  \
@@ -179,6 +179,6 @@
         const_iterator& operator++() { PlusPlus();return *this; } \
         const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } \
-        const_reference operator *() const { return m_node->m_value; } \
-        const_pointer operator ->() const { return &(m_node->m_value); } \
+        const_reference operator *() const { return (const_reference)m_node->m_value; } \
+        const_pointer operator ->() const { return (const_pointer)&(m_node->m_value); } \
     }; \
  \
@@ -307,5 +307,5 @@
     { \
         unsigned long hash = m_hasher( key ); \
-        Node** node = &m_table[hash % m_tableBuckets]; \
+        Node** node = (Node**) &m_table[hash % m_tableBuckets]; \
  \
         while( *node ) \
@@ -393,5 +393,5 @@
 public: \
     CLASSNAME() { } \
-    const_key_reference operator()( const_pair_reference pair ) const { return pair.first; }\
+    const_key_reference operator()( const_pair_reference pair ) const { return (const_key_reference)pair.first; }\
     \
     /* the dummy assignment operator is needed to suppress compiler */ \
Index: icon.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/icon.h,v
retrieving revision 1.13
diff -b -u -2 -r1.13 icon.h
--- icon.h	2003/06/21 13:39:26	1.13
+++ icon.h	2004/01/29 19:52:16
@@ -2,4 +2,6 @@
 #define _WX_ICON_H_BASE_
 
+#include "wx/defs.h"
+#include "wx/longlong.h"
 #include "wx/iconloc.h"
 
Index: iconloc.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/iconloc.h,v
retrieving revision 1.4
diff -b -u -2 -r1.4 iconloc.h
--- iconloc.h	2003/07/02 01:59:16	1.4
+++ iconloc.h	2004/01/29 19:52:16
@@ -13,6 +13,4 @@
 #define _WX_ICONLOC_H_
 
-#include "wx/string.h"
-
 // ----------------------------------------------------------------------------
 // wxIconLocation: describes the location of an icon
Index: imagxpm.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/imagxpm.h,v
retrieving revision 1.6
diff -b -u -2 -r1.6 imagxpm.h
--- imagxpm.h	2003/08/09 12:37:13	1.6
+++ imagxpm.h	2004/01/29 19:52:16
@@ -17,4 +17,5 @@
 #include "wx/image.h"
 
+#if wxUSE_IMAGE
 
 //-----------------------------------------------------------------------------
@@ -44,4 +45,5 @@
 
 
+#endif //wxUSE_IMAGE
 #endif
   // _WX_IMAGXPM_H_
Index: listbase.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/listbase.h,v
retrieving revision 1.10
diff -b -u -2 -r1.10 listbase.h
--- listbase.h	2003/10/27 04:12:42	1.10
+++ listbase.h	2004/01/29 19:52:16
@@ -331,5 +331,5 @@
 private:
     // VZ: this is strange, we have a copy ctor but not operator=(), why?
-    wxListItem& operator=(const wxListItem& item);
+    wxListItem& operator=(const wxListItem& item) {return *this;}
 
     DECLARE_DYNAMIC_CLASS(wxListItem)
Index: longlong.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/longlong.h,v
retrieving revision 1.53
diff -b -u -2 -r1.53 longlong.h
--- longlong.h	2003/09/22 17:10:30	1.53
+++ longlong.h	2004/01/29 19:52:16
@@ -44,5 +44,6 @@
     // broken compilers don't like it, so we have to disable it in this case
     // <sigh>
-    #if !(defined(__WATCOMC__) || defined(__VISAGECPP__))
+	// MRC gives a warning here since pragma warning is unsupported - disabled.
+    #if !(defined(__WATCOMC__) || defined(__VISAGECPP__) || defined(__MRC__))
         #pragma warning "Your compiler does not appear to support 64 bit "\
                         "integers, using emulation class instead.\n" \
@@ -835,6 +836,7 @@
 
     // return the string representation of this number
+#ifndef MRCLLHACK
     wxString ToString() const;
-
+#endif
     void *asArray() const;
 
Index: menu.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/menu.h,v
retrieving revision 1.34
diff -b -u -2 -r1.34 menu.h
--- menu.h	2003/08/17 12:50:08	1.34
+++ menu.h	2004/01/29 19:52:16
@@ -49,5 +49,5 @@
 public:
     // create a menu
-    static wxMenu *New(const wxString& title = wxEmptyString, long style = 0);
+    static wxMenu *New(const wxString& title = wxEmptyString, long style = 0) {return NULL;}
 
     // ctors
Index: module.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/module.h,v
retrieving revision 1.10
diff -b -u -2 -r1.10 module.h
--- module.h	2003/08/09 12:37:13	1.10
+++ module.h	2004/01/29 19:52:16
@@ -60,4 +60,6 @@
 protected:
     static wxModuleList m_modules;
+	wxModuleList& GetModules() {return m_modules;}	
+	const wxModuleList& GetModules() const {return m_modules;}
 
     DECLARE_CLASS(wxModule)
Index: object.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/object.h,v
retrieving revision 1.97
diff -b -u -2 -r1.97 object.h
--- object.h	2003/12/11 10:54:38	1.97
+++ object.h	2004/01/29 19:52:16
@@ -205,8 +205,13 @@
 // for abstract classes
 // -----------------------------------
+//The following is REQUIRED for MPW
+//wxObject* name::wxCreateObject()                             
+ // { return NULL; }                                          
 
     // Single inheritance with one base class
 
 #define IMPLEMENT_ABSTRACT_CLASS(name, basename)                \
+ wxObject* name::wxCreateObject()                             \
+  { return NULL; }                                          \
  wxClassInfo name::ms_classInfo(wxT(#name),                     \
             &basename::ms_classInfo, NULL,                      \
@@ -216,4 +221,6 @@
 
 #define IMPLEMENT_ABSTRACT_CLASS2(name, basename1, basename2)   \
+wxObject* name::wxCreateObject()                             \
+  { return NULL; }                                          \
  wxClassInfo name::ms_classInfo(wxT(#name),                     \
             &basename1::ms_classInfo,                           \
@@ -381,8 +388,10 @@
 
 // All compilers get this one
+#ifndef __MRC__
 #define _WX_WANT_NEW_SIZET_WXCHAR_INT
+#endif
 
 // Everyone except Visage gets the next one
-#ifndef __VISAGECPP__
+#if !defined(__VISAGECPP__) && !defined(__MRC__)
     #define _WX_WANT_DELETE_VOID
 #endif
@@ -402,10 +411,10 @@
 
     // Everyone except Visual C++ (cause problems for VC++ - crashes)
-    #if !defined(__VISUALC__)
+    #if !defined(__VISUALC__) && !defined(__MRC__)
         #define _WX_WANT_ARRAY_NEW_SIZET_WXCHAR_INT
     #endif
 
     // Everyone except Visual C++ (cause problems for VC++ - crashes)
-    #if !defined(__VISUALC__)
+    #if !defined(__VISUALC__) && !defined(__MRC__)
         #define _WX_WANT_ARRAY_DELETE_VOID
     #endif
Index: platform.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/platform.h,v
retrieving revision 1.34
diff -b -u -2 -r1.34 platform.h
--- platform.h	2003/12/17 19:50:58	1.34
+++ platform.h	2004/01/29 19:52:16
@@ -220,5 +220,6 @@
 #elif defined(applec) || \
       defined(THINK_C) || \
-      (defined(__MWERKS__) && !defined(__INTEL__))
+      (defined(__MWERKS__) && !defined(__INTEL__)) || \
+	  (defined(__MRC__) && defined(__WXMAC__))
       /* MacOS */
 #    if !defined(wxSIZE_T_IS_UINT) && !defined(wxSIZE_T_IS_ULONG)
Index: rawbmp.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/rawbmp.h,v
retrieving revision 1.18
diff -b -u -2 -r1.18 rawbmp.h
--- rawbmp.h	2003/12/06 23:20:46	1.18
+++ rawbmp.h	2004/01/29 19:52:16
@@ -12,4 +12,14 @@
 #ifndef _WX_RAWBMP_H_BASE_
 #define _WX_RAWBMP_H_BASE_
+// ============================================================================
+//	Mister C notes
+// ============================================================================
+// MRC DOES NOT SUPPORT
+// 1. DEFAULT TEMPLATE PARAMETERS
+// 2. TEMPLATE SPECIALIZATION
+// 3. TYPEDEF TYPENAME
+// 4. INTERNAL TEMPLATE CLASSES
+// ============================================================================
+// ============================================================================
 
 // ----------------------------------------------------------------------------
@@ -103,6 +113,6 @@
 
 template <class Channel,
-          size_t Bpp, int R, int G, int B, int A = -1,
-          class Pixel = wxUint32>
+          size_t Bpp, int R, int G, int B, int A,
+          class Pixel>
 
 struct WXDLLEXPORT wxPixelFormat
@@ -141,10 +151,10 @@
 
 // wxImage format is common to all platforms
-typedef wxPixelFormat<unsigned char, 24, 0, 1, 2> wxImagePixelFormat;
+typedef wxPixelFormat<unsigned char, 24, 0, 1, 2, -1, wxUint32> wxImagePixelFormat;
 
 // the (most common) native bitmap format without alpha support
 #if defined(__WXMSW__)
     // under MSW the RGB components are inversed, they're in BGR order
-    typedef wxPixelFormat<unsigned char, 24, 2, 1, 0> wxNativePixelFormat;
+    typedef wxPixelFormat<unsigned char, 24, 2, 1, 0, -1, wxUint32> wxNativePixelFormat;
 
     #define wxPIXEL_FORMAT_ALPHA 3
@@ -152,10 +162,10 @@
     // under Mac, first component is unused but still present, hence we use
     // 32bpp, not 24
-    typedef wxPixelFormat<unsigned char, 32, 1, 2, 3> wxNativePixelFormat;
+    typedef wxPixelFormat<unsigned char, 32, 1, 2, 3, -1, wxUint32> wxNativePixelFormat;
 
     #define wxPIXEL_FORMAT_ALPHA 0
 #elif defined(__WXCOCOA__)
     // Cocoa is standard RGB or RGBA (normally it is RGBA)
-    typedef wxPixelFormat<unsigned char, 24, 0, 1, 2> wxNativePixelFormat;
+    typedef wxPixelFormat<unsigned char, 24, 0, 1, 2, -1, wxUint32> wxNativePixelFormat;
 
     #define wxPIXEL_FORMAT_ALPHA 3
@@ -168,7 +178,8 @@
                           wxNativePixelFormat::GREEN,
                           wxNativePixelFormat::BLUE,
-                          wxPIXEL_FORMAT_ALPHA> wxAlphaPixelFormat;
+                          wxPIXEL_FORMAT_ALPHA, wxUint32> wxAlphaPixelFormat;
 #endif // wxPIXEL_FORMAT_ALPHA
 
+#ifndef __MRC__
 // we also define the (default/best) pixel format for the given class: this is
 // used as default value for the pixel format in wxPixelIterator template
@@ -183,5 +194,5 @@
     typedef wxImagePixelFormat Format;
 };
-
+#endif
 // ----------------------------------------------------------------------------
 // wxPixelData
@@ -257,5 +268,5 @@
     specializations.
  */
-
+#ifndef __MRC__
 // we need to define this skeleton template to mollify VC++
 template <class Image>
@@ -635,6 +646,186 @@
         }
     };
+}
+#else
+struct WXDLLEXPORT wxPixelDataOut
+{
 };
+    template <class Format>
+    class WXDLLEXPORT wxPixelDataIn : public wxPixelDataBase
+    {
+    public:
+        // the type of the class we're working with
+        typedef wxBitmap ImageType;
+
+        class Iterator
+        {
+        public:
+            // the pixel format we use
+            typedef Format PixelFormat;
+
+            // the type of the pixel components
+            typedef typename PixelFormat::ChannelType ChannelType;
+
+            // the pixel data we're working with
+            typedef wxPixelDataOut<wxBitmap>::wxPixelDataIn<Format> PixelData;
+
+
+            // go back to (0, 0)
+            void Reset(const PixelData& data)
+            {
+                *this = data.GetPixels();
+            }
+
+            // initializes the iterator to point to the origin of the given
+            // pixel data
+            Iterator(PixelData& data)
+            {
+                Reset(data);
+            }
+
+            // initializes the iterator to point to the origin of the given
+            // bitmap
+            Iterator(wxBitmap& bmp, PixelData& data)
+            {
+                // using cast here is ugly but it should be safe as
+                // GetRawData() real return type should be consistent with
+                // BitsPerPixel (which is in turn defined by ChannelType) and
+                // this is the only thing we can do without making GetRawData()
+                // a template function which is undesirable
+                m_ptr = (ChannelType *)
+                            bmp.GetRawData(data, PixelFormat::BitsPerPixel);
+            }
+
+            // return true if this iterator is valid
+            bool IsOk() const { return m_ptr != NULL; }
+
+
+            // navigation
+            // ----------
+
+            // advance the iterator to the next pixel, prefix version
+            Iterator& operator++()
+            {
+                m_ptr += PixelFormat::SizePixel;
+
+                return *this;
+            }
+
+            // postfix (hence less efficient -- don't use it unless you
+            // absolutely must) version
+            Iterator operator++(int)
+            {
+                Iterator p(*this);
+                ++*this;
+                return p;
+            }
 
+            // move x pixels to the right and y down
+            //
+            // note that the rows don't wrap!
+            void Offset(const PixelData& data, int x, int y)
+            {
+                m_ptr += data.GetRowStride()*y + PixelFormat::SizePixel*x;
+            }
+
+            // move x pixels to the right (again, no row wrapping)
+            void OffsetX(const PixelData& WXUNUSED(data), int x)
+            {
+                m_ptr += PixelFormat::SizePixel*x;
+            }
+
+            // move y rows to the bottom
+            void OffsetY(const PixelData& data, int y)
+            {
+                m_ptr += data.GetRowStride()*y;
+            }
+
+            // go to the given position
+            void MoveTo(const PixelData& data, int x, int y)
+            {
+                Reset(data);
+                Offset(data, x, y);
+            }
+
+
+            // data access
+            // -----------
+
+            // access to invidividual colour components
+            ChannelType& Red() { return m_ptr[PixelFormat::RED]; }
+            ChannelType& Green() { return m_ptr[PixelFormat::GREEN]; }
+            ChannelType& Blue() { return m_ptr[PixelFormat::BLUE]; }
+            ChannelType& Alpha() { return m_ptr[PixelFormat::ALPHA]; }
+
+            // address the pixel contents directly
+            //
+            // warning: the format is platform dependent
+            typename PixelFormat::PixelType& Data()
+                { return *(typename PixelFormat::PixelType *)m_ptr; }
+
+        // private: -- see comment in the beginning of the file
+
+            // for efficiency reasons this class should not have any other
+            // fields, otherwise it won't be put into a CPU register (as it
+            // should inside the inner loops) by some compilers, notably gcc
+            ChannelType *m_ptr;
+        };
+
+        // ctor associates this pointer with a bitmap and locks the bitmap for
+        // raw access, it will be unlocked only by our dtor and so these
+        // objects should normally be only created on the stack, i.e. have
+        // limited life-time
+        wxPixelDataIn(wxBitmap& bmp) : m_bmp(bmp), m_pixels(bmp, *this)
+        {
+        }
+
+        wxPixelDataIn(wxBitmap& bmp, const wxRect& rect)
+            : m_bmp(bmp), m_pixels(bmp, *this)
+        {
+            InitRect(rect.GetPosition(), rect.GetSize());
+        }
+
+        wxPixelDataIn(wxBitmap& bmp, const wxPoint& pt, const wxSize& sz)
+            : m_bmp(bmp), m_pixels(bmp, *this)
+        {
+            InitRect(pt, sz);
+        }
+
+        // we evaluate to true only if we could get access to bitmap data
+        // successfully
+        operator bool() const { return m_pixels.IsOk(); }
+
+        // get the iterator pointing to the origin
+        Iterator GetPixels() const { return m_pixels; }
+
+        // dtor unlocks the bitmap
+        ~wxPixelDataIn()
+        {
+            m_bmp.UngetRawData(*this);
+        }
+
+        // call this to indicate that we should use the alpha channel
+        void UseAlpha() { m_bmp.UseAlpha(); }
+
+    // private: -- see comment in the beginning of the file
+
+        // the bitmap we're associated with
+        wxBitmap m_bmp;
+
+        // the iterator pointing to the image origin
+        Iterator m_pixels;
+
+    private:
+        void InitRect(const wxPoint& pt, const wxSize& sz)
+        {
+            m_pixels.Offset(*this, pt.x, pt.y);
+
+            m_ptOrigin = pt;
+            m_width = sz.x;
+            m_height = sz.y;
+        }
+    };
+#endif
+
 #ifdef __VISUALC__
     // typedef-name 'foo' used as synonym for class-name 'bar'
@@ -645,11 +836,19 @@
 #endif // __VISUALC__
 
-template <class Image, class PixelFormat = wxPixelFormatFor<Image> >
+template <class Image, class PixelFormat >
 class wxPixelData :
+#ifndef __MRC__
     public wxPixelDataOut<Image>::template wxPixelDataIn<PixelFormat>
+#else
+    public wxPixelDataIn<PixelFormat>
+#endif
 {
 public:
     typedef
+	#ifndef __MRC__
         typename wxPixelDataOut<Image>::template wxPixelDataIn<PixelFormat>
+	#else
+        typename wxPixelDataOut::template wxPixelDataIn<PixelFormat>
+		#endif
         Base;
 
@@ -666,5 +865,7 @@
 
 // some "predefined" pixel data classes
-typedef wxPixelData<wxImage> wxImagePixelData;
+#ifndef __MRC__
+typedef wxPixelData<wxImage > wxImagePixelData;
+#endif
 typedef wxPixelData<wxBitmap, wxNativePixelFormat> wxNativePixelData;
 typedef wxPixelData<wxBitmap, wxAlphaPixelFormat> wxAlphaPixelData;
@@ -686,5 +887,5 @@
     partial template specialization then and neither VC6 nor VC7 provide it.
  */
-template < class Image, class PixelFormat = wxPixelFormatFor<Image> >
+template < class Image, class PixelFormat >
 struct WXDLLEXPORT wxPixelIterator : wxPixelData<Image, PixelFormat>::Iterator
 {
Index: sizer.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/sizer.h,v
retrieving revision 1.43
diff -b -u -2 -r1.43 sizer.h
--- sizer.h	2003/11/19 06:42:23	1.43
+++ sizer.h	2004/01/29 19:52:18
@@ -548,5 +548,5 @@
     wxNotebookSizer(wxNotebook *nb);
 
-    wxNotebook *GetNotebook() const { return (wxNotebook *)m_bookctrl; }
+    wxNotebook *GetNotebook() const;
 
 private:
Index: string.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/string.h,v
retrieving revision 1.171
diff -b -u -2 -r1.171 string.h
--- string.h	2003/12/14 04:23:35	1.171
+++ string.h	2004/01/29 19:52:18
@@ -137,5 +137,5 @@
 #elif defined(__UNIX__) || defined(__GNUWIN32__)
   return strcasecmp(psz1, psz2);
-#elif defined(__MWERKS__) && !defined(__INTEL__)
+#elif defined(__MRC__) || (defined(__MWERKS__) && !defined(__INTEL__)) 
   register char c1, c2;
   do {
@@ -1362,5 +1362,5 @@
     wxChar   *m_buf;
 
-    DECLARE_NO_COPY_CLASS(wxStringBuffer)
+    DECLARE_NO_COPY_CLASS(wxStringBuffer);
 };
 
@@ -1387,5 +1387,5 @@
     bool      m_lenSet;
 
-    DECLARE_NO_COPY_CLASS(wxStringBufferLength)
+    DECLARE_NO_COPY_CLASS(wxStringBufferLength);
 };
 
Index: taskbar.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/taskbar.h,v
retrieving revision 1.13
diff -b -u -2 -r1.13 taskbar.h
--- taskbar.h	2003/08/02 13:51:20	1.13
+++ taskbar.h	2004/01/29 19:52:18
@@ -30,4 +30,6 @@
 #elif defined(__WXGTK__) || defined(__WXX11__) || defined(__WXMOTIF__)
     #include "wx/unix/taskbarx11.h"
+#elif defined(__DARWIN__)
+	#include "wx/mac/taskbar.h"
 #endif
 
Index: validate.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/validate.h,v
retrieving revision 1.16
diff -b -u -2 -r1.16 validate.h
--- validate.h	2003/09/15 19:54:46	1.16
+++ validate.h	2004/01/29 19:52:18
@@ -64,5 +64,5 @@
 
     // accessors
-    wxWindow *GetWindow() const { return (wxWindow *)m_validatorWindow; }
+    wxWindow *GetWindow() const;
     void SetWindow(wxWindowBase *win) { m_validatorWindow = win; }
 
Index: wxchar.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/wxchar.h,v
retrieving revision 1.126
diff -b -u -2 -r1.126 wxchar.h
--- wxchar.h	2003/12/24 12:42:57	1.126
+++ wxchar.h	2004/01/29 19:52:18
@@ -63,6 +63,6 @@
 
 /*  Almost all compiler have strdup(), but not quite all: CodeWarrior under Mac */
-/*  and VC++ for Windows CE don't provide it */
-#if !(defined(__MWERKS__) && defined(__WXMAC__)) && !defined(__WXWINCE__)
+/*  VC++ for Windows CE, and MRC under Mac don't provide it */
+#if !(defined(__MWERKS__) && defined(__WXMAC__)) && !defined(__WXWINCE__) && !(defined(__MRC__) || defined(__WXMAC__))
     /*  use #define, not inline wrapper, as it is tested with #ifndef below */
     #define wxStrdupA strdup

 	  	 

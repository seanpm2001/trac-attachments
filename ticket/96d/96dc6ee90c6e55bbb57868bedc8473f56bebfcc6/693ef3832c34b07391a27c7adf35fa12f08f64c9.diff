Index: tests/archive/archivetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/archive/archivetest.cpp,v
retrieving revision 1.4
diff -u -2 -r1.4 archivetest.cpp
--- tests/archive/archivetest.cpp	2004/11/22 04:59:33	1.4
+++ tests/archive/archivetest.cpp	2004/11/23 00:00:49
@@ -28,6 +28,10 @@
 #include <string>
 #include <list>
+#include <map>
 #include <sys/stat.h>
 
+using std::string;
+using std::auto_ptr;
+
 // Check whether member templates can be used
 //
@@ -201,5 +205,5 @@
         if (pos < 0 || pos > SEEK_LIMIT)
             return wxInvalidOffset;
-        m_pos = pos;
+        m_pos = (size_t)pos;
         return m_pos;
     }
@@ -340,5 +344,5 @@
         if (pos < 0 || pos > TestOutputStream::SEEK_LIMIT)
             return wxInvalidOffset;
-        m_pos = pos;
+        m_pos = (size_t)pos;
         return m_pos;
     }
@@ -527,7 +531,7 @@
 {
 public:
-    ArchiveTestCase(const wxString& name,
+    ArchiveTestCase(string name,
                     int id,
-                    typename Classes::ClassFactoryT *factory,
+                    wxArchiveClassFactory *factory,
                     int options,
                     const wxString& archiver = wxEmptyString,
@@ -592,5 +596,5 @@
     typedef std::map<wxString, TestEntry*> TestEntries;
     TestEntries m_testEntries;              // test data
-    std::auto_ptr<ClassFactoryT> m_factory; // factory to make classes
+    auto_ptr<ClassFactoryT> m_factory;      // factory to make classes
     int m_options;                          // test options
     wxDateTime m_timeStamp;                 // timestamp to give test entries
@@ -600,19 +604,30 @@
 };
 
+// Constructor
+// The only way I could get this to compile on VC++ 5.0 was to pass 'factory'
+// as a wxArchiveFactory* then cast it, even then only with some ifdefing.
+//
 template <class Classes>
-ArchiveTestCase<Classes>::ArchiveTestCase(const wxString& name,
-                int id,
-                typename Classes::ClassFactoryT *factory,
-                int options,
-                const wxString& archiver,
-                const wxString& unarchiver)
-                : CppUnit::TestCase(std::string(name.mb_str())),
-                    m_factory(factory),
-                    m_options(options),
-                    m_timeStamp(1, wxDateTime::Mar, 2005, 12, 0),
-                    m_id(id),
-                    m_archiver(archiver),
-                    m_unarchiver(unarchiver)
+ArchiveTestCase<Classes>::ArchiveTestCase(
+    string name,
+    int id,
+    wxArchiveClassFactory *factory,
+    int options,
+    const wxString& archiver,
+    const wxString& unarchiver)
+  :
+    CppUnit::TestCase(name),
+#if defined _MSC_VER && _MSC_VER < 1300
+    m_factory(dynamic_cast<Classes::ClassFactoryT*>(factory)),
+#else
+    m_factory(dynamic_cast<typename Classes::ClassFactoryT*>(factory)),
+#endif
+    m_options(options),
+    m_timeStamp(1, wxDateTime::Mar, 2005, 12, 0),
+    m_id(id),
+    m_archiver(archiver),
+    m_unarchiver(unarchiver)
 {
+    wxASSERT(m_factory.get() != NULL);
 }
     
@@ -722,5 +737,5 @@
 void ArchiveTestCase<Classes>::CreateArchive(wxOutputStream& out)
 {
-    std::auto_ptr<OutputStreamT> arc(m_factory->NewStream(out));
+    auto_ptr<OutputStreamT> arc(m_factory->NewStream(out));
     TestEntries::iterator it;
 
@@ -745,10 +760,10 @@
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        std::string error_entry((_T(" '") + name + _T("'")).mb_str());
-        std::string error_context(" failed for entry" + error_entry);
+        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_context(" failed for entry" + error_entry);
 
         if ((choices & 2) || testEntry.IsText()) {
             // try PutNextEntry(EntryT *pEntry)
-            std::auto_ptr<EntryT> entry(m_factory->NewEntry());
+            auto_ptr<EntryT> entry(m_factory->NewEntry());
             entry->SetName(name, wxPATH_UNIX);
             if (setIsDir)
@@ -861,7 +876,7 @@
                                              wxOutputStream& out)
 {
-    std::auto_ptr<InputStreamT> arcIn(m_factory->NewStream(in));
-    std::auto_ptr<OutputStreamT> arcOut(m_factory->NewStream(out));
-    std::auto_ptr<EntryT> entry;
+    auto_ptr<InputStreamT> arcIn(m_factory->NewStream(in));
+    auto_ptr<OutputStreamT> arcOut(m_factory->NewStream(out));
+    auto_ptr<EntryT> entry;
 
     const wxString deleteName = _T("bin/bin1000");
@@ -879,6 +894,6 @@
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        std::string error_entry((_T(" '") + name + _T("'")).mb_str());
-        std::string error_context(" failed for entry" + error_entry);
+        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_context(" failed for entry" + error_entry);
 
         if (name == deleteName) {
@@ -941,5 +956,5 @@
     typedef typename Entries::iterator EntryIter;
 
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
     int expectedTotal = m_testEntries.size();
     EntryPtr entry;
@@ -954,6 +969,6 @@
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        std::string error_entry((_T(" '") + name + _T("'")).mb_str());
-        std::string error_context(" failed for entry" + error_entry);
+        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_context(" failed for entry" + error_entry);
 
         TestEntries::iterator it = m_testEntries.find(name);
@@ -1092,6 +1107,6 @@
             // provide some context for the error message so that we know which
             // iteration of the loop we were on
-            std::string error_entry((_T(" '") + name + _T("'")).mb_str());
-            std::string error_context(" failed for entry" + error_entry);
+            string error_entry((_T(" '") + name + _T("'")).mb_str());
+            string error_context(" failed for entry" + error_entry);
 
             TestEntries::iterator it = m_testEntries.find(name);
@@ -1141,5 +1156,5 @@
     typedef typename ArchiveCatalog::iterator CatalogIter;
 
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
     size_t count = 0;
 
@@ -1153,5 +1168,5 @@
 
     for (CatalogIter it = cat.begin(); it != cat.end(); ++it) {
-        std::auto_ptr<EntryT> entry(*it);
+        auto_ptr<EntryT> entry(*it);
         count += m_testEntries.count(entry->GetName(wxPATH_UNIX));
     }
@@ -1170,5 +1185,5 @@
     typedef typename ArchiveCatalog::iterator CatalogIter;
 
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
     size_t count = 0;
 
@@ -1182,5 +1197,5 @@
 
     for (CatalogIter it = cat.begin(); it != cat.end(); ++it) {
-        std::auto_ptr<EntryT> entry(it->second);
+        auto_ptr<EntryT> entry(it->second);
         count += m_testEntries.count(entry->GetName(wxPATH_UNIX));
     }
@@ -1199,5 +1214,5 @@
     typedef wxArchiveIterator<InputStreamT, Ptr<EntryT> > Iter;
 
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
 
 #ifdef WXARC_MEMBER_TEMPLATES
@@ -1225,5 +1240,5 @@
                 std::pair<wxString, Ptr<EntryT> > > PairIter;
 
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
 
 #ifdef WXARC_MEMBER_TEMPLATES
@@ -1252,6 +1267,6 @@
     // create two archive input streams
     TestInputStream in2(in);
-    std::auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
-    std::auto_ptr<InputStreamT> arc2(m_factory->NewStream(in2));
+    auto_ptr<InputStreamT> arc(m_factory->NewStream(in));
+    auto_ptr<InputStreamT> arc2(m_factory->NewStream(in2));
 
     // load the catalog
@@ -1331,5 +1346,5 @@
 {
 public:
-    ZipTestCase(const wxString& name,
+    ZipTestCase(string name,
                 int id,
                 int options,
@@ -1409,6 +1424,7 @@
     // provide some context for the error message so that we know which
     // iteration of the loop we were on
-    std::string error_entry((_T(" '") + entry.GetName() + _T("'")).mb_str());
-    std::string error_context(" failed for entry" + error_entry);
+    wxString name = _T(" '") + entry.GetName() + _T("'");
+    string error_entry(name.mb_str());
+    string error_context(" failed for entry" + error_entry);
 
     CPPUNIT_ASSERT_MESSAGE("GetComment" + error_context,
@@ -1457,6 +1473,6 @@
 {
 public:
-    ZipPipeTestCase(const wxString& name, int options) :
-        CppUnit::TestCase(std::string(name.mb_str())), m_options(options) { }
+    ZipPipeTestCase(string name, int options) :
+        CppUnit::TestCase(name), m_options(options) { }
 
 protected:
@@ -1481,5 +1497,5 @@
     wxZipInputStream zip(in);
 
-    std::auto_ptr<wxZipEntry> entry(zip.GetNextEntry());
+    auto_ptr<wxZipEntry> entry(zip.GetNextEntry());
     CPPUNIT_ASSERT(entry.get() != NULL);
 
@@ -1517,9 +1533,9 @@
     bool IsInPath(const wxString& cmd);
 
-    wxString Description(const wxString& type,
-                         int options,
-                         bool genericInterface = false,
-                         const wxString& archiver = wxEmptyString,
-                         const wxString& unarchiver = wxEmptyString);
+    string Description(const wxString& type,
+                       int options,
+                       bool genericInterface = false,
+                       const wxString& archiver = wxEmptyString,
+                       const wxString& unarchiver = wxEmptyString);
 };
 
@@ -1570,11 +1586,11 @@
                     if ((options & PipeIn) && !i->empty())
                         continue;
-#ifdef WXARC_NO_POPEN 
+#ifdef WXARC_NO_POPEN
                     // if no popen then can use piped output of zip
                     if ((options & PipeOut) && !j->empty())
                         continue;
 #endif
-                    wxString name = Description(_T("wxZip"), options, 
-                                                genInterface != 0, *j, *i);
+                    string name = Description(_T("wxZip"), options, 
+                                              genInterface != 0, *j, *i);
 
                     if (genInterface)
@@ -1589,9 +1605,9 @@
                 }
 
-#ifndef WXARC_NO_POPEN 
+#ifndef WXARC_NO_POPEN
     // if have popen then can check the piped output of 'zip - -'
     if (IsInPath(_T("zip")))
         for (int options = 0; options <= PipeIn; options += PipeIn) {
-            wxString name = Description(_T("ZipPipeTestCase"), options);
+            string name = Description(_T("ZipPipeTestCase"), options);
             addTest(new ZipPipeTestCase(name, options));
             m_id++;
@@ -1604,9 +1620,9 @@
 // make a display string for the option bits
 //
-wxString ArchiveTestSuite::Description(const wxString& type,
-                                       int options,
-                                       bool genericInterface,
-                                       const wxString& archiver,
-                                       const wxString& unarchiver)
+string ArchiveTestSuite::Description(const wxString& type,
+                                     int options,
+                                     bool genericInterface,
+                                     const wxString& archiver,
+                                     const wxString& unarchiver)
 {
     wxString descr;
@@ -1636,5 +1652,5 @@
     descr << optstr;
 
-    return descr;
+    return (const char*)descr.mb_str();
 }
 

 	  	 

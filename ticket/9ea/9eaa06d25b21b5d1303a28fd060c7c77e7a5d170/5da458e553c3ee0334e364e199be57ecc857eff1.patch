Index: src/common/dcbase.cpp
===================================================================
--- src/common/dcbase.cpp	(revision 65282)
+++ src/common/dcbase.cpp	(working copy)
@@ -1051,9 +1051,9 @@
 }
 
 void wxDCImpl::DoGradientFillConcentric(const wxRect& rect,
-                                      const wxColour& initialColour,
-                                      const wxColour& destColour,
-                                      const wxPoint& circleCenter)
+                                        const wxColour& initialColour,
+                                        const wxColour& destColour,
+                                        const wxPoint& circleCenter)
 {
     // save the old pen and ensure it is restored on exit
     const wxPen penOrig = m_pen;
@@ -1069,32 +1069,42 @@
 
 
     //Radius
-    wxInt32 cx = rect.GetWidth() / 2;
-    wxInt32 cy = rect.GetHeight() / 2;
-    wxInt32 nRadius;
+    double cx = rect.GetWidth() / 2;
+    double cy = rect.GetHeight() / 2;
+    double dRadius;
     if (cx < cy)
-        nRadius = cx;
+        dRadius = cx;
     else
-        nRadius = cy;
+        dRadius = cy;
 
     //Offset of circle
-    wxInt32 nCircleOffX = circleCenter.x - (rect.GetWidth() / 2);
-    wxInt32 nCircleOffY = circleCenter.y - (rect.GetHeight() / 2);
+    double ptX, ptY;
+    ptX = circleCenter.x;
+    ptY = circleCenter.y;
+    double nCircleOffX = ptX - cx;
+    double nCircleOffY = ptY - cy;
 
+    wxInt32 nGradient;
+    double dGradient;
+    double dx, dy;
+
     for ( wxInt32 x = 0; x < rect.GetWidth(); x++ )
     {
         for ( wxInt32 y = 0; y < rect.GetHeight(); y++ )
         {
             //get color difference
-            wxInt32 nGradient = ((nRadius -
-                                  (wxInt32)sqrt(
-                                    pow((double)(x - cx - nCircleOffX), 2) +
-                                    pow((double)(y - cy - nCircleOffY), 2)
-                                  )) * 100) / nRadius;
+            dx = x;
+            dy = y;
 
+            dGradient = ((dRadius - sqrt(  (dx - cx - nCircleOffX) * (dx - cx - nCircleOffX)
+                                          +(dy - cy - nCircleOffY) * (dy - cy - nCircleOffY)
+                                         )
+                         ) * 100
+                        ) / dRadius;
+
             //normalize Gradient
-            if (nGradient < 0 )
-                nGradient = 0;
+            if (dGradient < 0) dGradient = 0.0;
+            nGradient = dGradient;
 
             //get dest colors
             nR = (wxUint8)(nR1 + ((nR2 - nR1) * nGradient / 100));

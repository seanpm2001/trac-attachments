Index: docs/latex/wx/ffile.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/ffile.tex,v
retrieving revision 1.9
diff -u -2 -r1.9 ffile.tex
--- docs/latex/wx/ffile.tex	2004/12/12 11:53:36	1.9
+++ docs/latex/wx/ffile.tex	2005/02/04 09:45:16
@@ -146,4 +146,22 @@
 
 
+\membersection{wxFFile::GetFileType}\label{wxffilegetfiletype}
+
+\constfunc{wxFileTypeEnum}{GetFileType}{\void}
+
+Returns the type of the file. Possible return values are:
+
+\begin{verbatim}
+enum wxFileTypeEnum
+{
+  wxFILE_TYPE_UNKNOWN,
+  wxFILE_TYPE_DISK,     // a file supporting seeking to arbitrary offsets
+  wxFILE_TYPE_TERMINAL, // a tty
+  wxFILE_TYPE_PIPE      // a pipe
+};
+
+\end{verbatim}
+
+
 \membersection{wxFFile::IsOpened}\label{wxffileisopened}
 
Index: docs/latex/wx/file.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/file.tex,v
retrieving revision 1.26
diff -u -2 -r1.26 file.tex
--- docs/latex/wx/file.tex	2004/09/30 11:15:57	1.26
+++ docs/latex/wx/file.tex	2005/02/04 09:45:18
@@ -201,4 +201,21 @@
 (it can still be called but it will do nothing on unsupported compilers).
 
+\membersection{wxFile::GetFileType}\label{wxfilegetfiletype}
+
+\constfunc{wxFileTypeEnum}{GetFileType}{\void}
+
+Returns the type of the file. Possible return values are:
+
+\begin{verbatim}
+enum wxFileTypeEnum
+{
+  wxFILE_TYPE_UNKNOWN,
+  wxFILE_TYPE_DISK,     // a file supporting seeking to arbitrary offsets
+  wxFILE_TYPE_TERMINAL, // a tty
+  wxFILE_TYPE_PIPE      // a pipe
+};
+
+\end{verbatim}
+
 \membersection{wxFile::IsOpened}\label{wxfileisopened}
 
Index: docs/latex/wx/function.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/function.tex,v
retrieving revision 1.206
diff -u -2 -r1.206 function.tex
--- docs/latex/wx/function.tex	2005/01/31 17:57:30	1.206
+++ docs/latex/wx/function.tex	2005/02/04 09:45:59
@@ -109,4 +109,5 @@
 \helpref{wxGetEmailAddress}{wxgetemailaddress}\\
 \helpref{wxGetEnv}{wxgetenv}\\
+\helpref{wxGetFileType}{wxgetfiletype}\\
 \helpref{wxGetFontFromUser}{wxgetfontfromuser}\\
 \helpref{wxGetFreeMemory}{wxgetfreememory}\\
@@ -1014,4 +1015,28 @@
 
 This function first appeared in wxWidgets 2.3.2.
+
+
+\membersection{::wxGetFileType}\label{wxgetfiletype}
+
+\func{wxFileTypeEnum}{wxGetFileType}{\param{int }{fd}}
+
+\func{wxFileTypeEnum}{wxGetFileType}{\param{FILE *}{fp}}
+
+Returns the type of an open file. Possible return values are:
+
+\begin{verbatim}
+enum wxFileTypeEnum
+{
+  wxFILE_TYPE_UNKNOWN,
+  wxFILE_TYPE_DISK,     // a file supporting seeking to arbitrary offsets
+  wxFILE_TYPE_TERMINAL, // a tty
+  wxFILE_TYPE_PIPE      // a pipe
+};
+
+\end{verbatim}
+
+\wxheading{Include files}
+
+<wx/filefn.h>
 
 
Index: docs/latex/wx/strmbase.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/strmbase.tex,v
retrieving revision 1.23
diff -u -2 -r1.23 strmbase.tex
--- docs/latex/wx/strmbase.tex	2004/11/11 07:00:11	1.23
+++ docs/latex/wx/strmbase.tex	2005/02/04 09:46:06
@@ -95,4 +95,11 @@
 
 
+\membersection{wxStreamBase::IsSeekable}\label{wxstreambaseisok}
+
+\constfunc{bool}{IsSeekable}{\void}
+
+Returns true if the streams supports seeking to arbitrary offsets.
+
+
 \membersection{wxStreamBase::OnSysRead}\label{wxstreambaseonsysread}
 
Index: include/wx/ffile.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/ffile.h,v
retrieving revision 1.18
diff -u -2 -r1.18 ffile.h
--- include/wx/ffile.h	2004/12/12 11:53:41	1.18
+++ include/wx/ffile.h	2005/02/04 09:46:17
@@ -97,4 +97,6 @@
     // get the file name
   const wxString& GetName() const { return m_name; }
+    // type such as disk or pipe
+  wxFileTypeEnum GetFileType() const { return wxGetFileType(m_fp); }
 
   // dtor closes the file if opened
Index: include/wx/file.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/file.h,v
retrieving revision 1.41
diff -u -2 -r1.41 file.h
--- include/wx/file.h	2004/11/12 03:29:48	1.41
+++ include/wx/file.h	2005/02/04 09:46:18
@@ -126,4 +126,6 @@
     // has an error occured?
   bool Error() const { return m_error; }
+    // type such as disk or pipe
+  wxFileTypeEnum GetFileType() const { return wxGetFileType(m_fd); }
 
   // dtor closes the file if opened
Index: include/wx/filefn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/filefn.h,v
retrieving revision 1.114
diff -u -2 -r1.114 filefn.h
--- include/wx/filefn.h	2005/01/07 18:47:29	1.114
+++ include/wx/filefn.h	2005/02/04 09:47:31
@@ -123,4 +123,12 @@
 };
 
+enum wxFileTypeEnum
+{
+  wxFILE_TYPE_UNKNOWN,
+  wxFILE_TYPE_DISK,     // a file supporting seeking to arbitrary offsets
+  wxFILE_TYPE_TERMINAL, // a tty
+  wxFILE_TYPE_PIPE      // a pipe
+};
+
 // ----------------------------------------------------------------------------
 // declare our versions of low level file functions: some compilers prepend
@@ -141,4 +149,5 @@
     int wxEof(int fd);
     wxFileOffset wxSeek(int fd, wxFileOffset offset, int origin);
+    inline HANDLE wxGetOSFHandle(int fd) { return (HANDLE)fd; }
     #define wxLSeek wxSeek
     wxFileOffset wxTell(int fd);
@@ -344,4 +353,9 @@
 #endif // platforms
 
+#if defined __WXMSW__ && !defined __WXWINCE__ 
+    // get the HANDLE associated with a file descriptor
+    inline HANDLE wxGetOSFHandle(int fd) { return (HANDLE)_get_osfhandle(fd); }
+#endif
+
 #if defined(__VISAGECPP__) && __IBMCPP__ >= 400
 //
@@ -449,4 +463,8 @@
 // Remove directory. Flags reserved for future use.
 WXDLLIMPEXP_BASE bool wxRmdir(const wxString& dir, int flags = 0);
+
+// Return the type of an open file
+WXDLLIMPEXP_BASE wxFileTypeEnum wxGetFileType(int fd);
+inline wxFileTypeEnum wxGetFileType(FILE *fp) { return wxGetFileType(fileno(fp)); }
 
 // compatibility defines, don't use in new code
Index: include/wx/mstream.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mstream.h,v
retrieving revision 1.29
diff -u -2 -r1.29 mstream.h
--- include/wx/mstream.h	2004/11/10 21:10:15	1.29
+++ include/wx/mstream.h	2005/02/04 09:47:31
@@ -24,4 +24,5 @@
     virtual wxFileOffset GetLength() const { return m_length; }
     virtual bool Eof() const;
+    virtual bool IsSeekable() const { return true; }
 
     char Peek();
@@ -52,4 +53,5 @@
     virtual ~wxMemoryOutputStream();
     virtual wxFileOffset GetLength() const { return m_o_streambuf->GetLastAccess(); }
+    virtual bool IsSeekable() const { return true; }
 
     size_t CopyTo(void *buffer, size_t len) const;
Index: include/wx/stream.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/stream.h,v
retrieving revision 1.66
diff -u -2 -r1.66 stream.h
--- include/wx/stream.h	2005/01/07 20:03:08	1.66
+++ include/wx/stream.h	2005/02/04 09:48:40
@@ -86,4 +86,7 @@
     virtual wxFileOffset GetLength() const { return wxInvalidOffset; }
 
+    // returns true if the streams supports seeking to arbitrary offsets
+    virtual bool IsSeekable() const { return false; }
+
 #if WXWIN_COMPATIBILITY_2_2
     // deprecated, for compatibility only
@@ -480,4 +483,5 @@
     wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart);
     wxFileOffset TellI() const;
+    bool IsSeekable() const { return m_parent_i_stream->IsSeekable(); }
 
     // the buffer given to the stream will be deleted by it
@@ -515,4 +519,5 @@
     wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart);
     wxFileOffset TellO() const;
+    bool IsSeekable() const { return m_parent_o_stream->IsSeekable(); }
 
     void Sync();
Index: include/wx/wfstream.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/wfstream.h,v
retrieving revision 1.22
diff -u -2 -r1.22 wfstream.h
--- include/wx/wfstream.h	2005/01/15 23:05:56	1.22
+++ include/wx/wfstream.h	2005/02/04 09:48:41
@@ -42,4 +42,5 @@
 
     bool Ok() const { return m_file->IsOpened(); }
+    bool IsSeekable() const { return m_file->GetFileType() == wxFILE_TYPE_DISK; }
 
 protected:
@@ -70,4 +71,5 @@
 
     bool Ok() const { return m_file->IsOpened(); }
+    bool IsSeekable() const { return m_file->GetFileType() == wxFILE_TYPE_DISK; }
 
 protected:
@@ -110,4 +112,5 @@
 
     bool Ok() const { return m_file->IsOpened(); }
+    bool IsSeekable() const { return m_file->GetFileType() == wxFILE_TYPE_DISK; }
 
 protected:
@@ -138,4 +141,5 @@
 
     bool Ok() const { return m_file->IsOpened(); }
+    bool IsSeekable() const { return m_file->GetFileType() == wxFILE_TYPE_DISK; }
 
 protected:
Index: src/common/filefn.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/filefn.cpp,v
retrieving revision 1.221
diff -u -2 -r1.221 filefn.cpp
--- src/common/filefn.cpp	2005/02/01 19:37:35	1.221
+++ src/common/filefn.cpp	2005/02/04 09:50:01
@@ -76,4 +76,8 @@
 #endif // __WINDOWS__
 
+#if defined __VMS__
+    #include <fab.h>
+#endif
+
 // TODO: Borland probably has _wgetcwd as well?
 #ifdef _MSC_VER
@@ -1853,4 +1857,45 @@
 }
 
+// Return the type of an open file
+//
+wxFileTypeEnum wxGetFileType(int fd)
+{
+    if (isatty(fd))
+        return wxFILE_TYPE_TERMINAL;
+
+#if defined __WXMSW__
+    switch (::GetFileType(wxGetOSFHandle(fd)) & ~FILE_TYPE_REMOTE)
+    {
+        case FILE_TYPE_DISK:
+            return wxFILE_TYPE_DISK;
+        case FILE_TYPE_PIPE:
+            return wxFILE_TYPE_PIPE;
+    }
+
+    return wxFILE_TYPE_UNKNOWN;
+
+#elif defined __UNIX__
+    struct stat st;
+    fstat(fd, &st);
+
+    if (S_ISFIFO(st.st_mode))
+        return wxFILE_TYPE_PIPE;
+    if (!S_ISREG(st.st_mode))
+        return wxFILE_TYPE_UNKNOWN;
+
+    #if defined __VMS__
+        if (st.st_fab_rfm != FAB$C_STMLF)
+            return wxFILE_TYPE_UNKNOWN;
+    #endif
+
+    return wxFILE_TYPE_DISK;
+
+#else
+    if (lseek(fd, 0, SEEK_CUR) != -1)
+        return wxFILE_TYPE_DISK;
+    else
+        return wxFILE_TYPE_UNKNOWN;
+#endif
+}
 
 #ifdef __VISUALC__
Index: tests/test.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/tests/test.bkl,v
retrieving revision 1.31
diff -u -2 -r1.31 test.bkl
--- tests/test.bkl	2004/12/14 20:26:29	1.31
+++ tests/test.bkl	2005/02/04 09:50:01
@@ -31,4 +31,5 @@
             filename/filenametest.cpp
             filesys/filesystest.cpp
+            filetype/filetype.cpp
             fontmap/fontmaptest.cpp
             formatconverter/formatconvertertest.cpp
--- /dev/null	2004-12-12 21:49:49.000000000 +0000
+++ tests/filetype/filetype.cpp	2005-02-04 09:23:55.252851352 +0000
@@ -0,0 +1,202 @@
+///////////////////////////////////////////////////////////////////////////////
+// Name:        tests/filetype/filetype.cpp
+// Purpose:     Test wxGetFileType and wxStreamBase::IsSeekable
+// Author:      Mike Wetherell
+// RCS-ID:      $Id$
+// Copyright:   (c) 2005 Mike Wetherell
+// Licence:     wxWidgets licence
+///////////////////////////////////////////////////////////////////////////////
+
+#include "testprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+// for all others, include the necessary headers
+#ifndef WX_PRECOMP
+    #include "wx/wx.h"
+#endif
+
+#ifdef __UNIX__
+    #include <sys/socket.h>
+#endif
+
+#include "wx/file.h"
+#include "wx/ffile.h"
+#include "wx/wfstream.h"
+#include "wx/filename.h"
+#include "wx/socket.h"
+#include "wx/sckstrm.h"
+#include "wx/mstream.h"
+
+#if wxUSE_STREAMS
+
+///////////////////////////////////////////////////////////////////////////////
+// The test case
+
+class FileTypeTestCase : public CppUnit::TestCase
+{
+    CPPUNIT_TEST_SUITE(FileTypeTestCase);
+        CPPUNIT_TEST(File);
+#if defined __UNIX__ || defined _MSC_VER || defined __MINGW32__
+        CPPUNIT_TEST(Pipe);
+#endif
+#if defined __UNIX__
+        CPPUNIT_TEST(Socket);
+#endif
+        CPPUNIT_TEST(Stdin);
+        CPPUNIT_TEST(MemoryStream);
+        CPPUNIT_TEST(SocketStream);
+    CPPUNIT_TEST_SUITE_END();
+
+    void File();
+    void Pipe();
+    void Socket();
+    void Stdin();
+    void MemoryStream();
+    void SocketStream();
+
+    void TestFILE(wxFFile& file, bool expected);
+    void TestFd(wxFile& file, bool expected);
+};
+
+// test a wxFFile and wxFFileInput/OutputStreams of a known type
+// 
+void FileTypeTestCase::TestFILE(wxFFile& file, bool expected)
+{
+    CPPUNIT_ASSERT(file.IsOpened());
+    CPPUNIT_ASSERT((wxGetFileType(file.fp()) == wxFILE_TYPE_DISK) == expected);
+    CPPUNIT_ASSERT((file.GetFileType() == wxFILE_TYPE_DISK) == expected);
+
+    wxFFileInputStream inStream(file);
+    CPPUNIT_ASSERT(inStream.IsSeekable() == expected);
+
+    wxFFileOutputStream outStream(file);
+    CPPUNIT_ASSERT(outStream.IsSeekable() == expected);
+}
+
+// test a wxFile and wxFileInput/OutputStreams of a known type
+//
+void FileTypeTestCase::TestFd(wxFile& file, bool expected)
+{
+    CPPUNIT_ASSERT(file.IsOpened());
+    CPPUNIT_ASSERT((wxGetFileType(file.fd()) == wxFILE_TYPE_DISK) == expected);
+    CPPUNIT_ASSERT((file.GetFileType() == wxFILE_TYPE_DISK) == expected);
+
+    wxFileInputStream inStream(file);
+    CPPUNIT_ASSERT(inStream.IsSeekable() == expected);
+
+    wxFileOutputStream outStream(file);
+    CPPUNIT_ASSERT(outStream.IsSeekable() == expected);
+}
+
+struct TempFile
+{
+    ~TempFile() { if (!m_name.IsEmpty()) wxRemoveFile(m_name); }
+    wxString m_name;
+};
+
+// test with an ordinary file
+//
+void FileTypeTestCase::File()
+{
+    TempFile tmp; // put first
+    wxFile file;
+    tmp.m_name = wxFileName::CreateTempFileName(_T("wxft"), &file);
+    TestFd(file, true);
+    file.Close();
+
+    wxFFile ffile(tmp.m_name);
+    TestFILE(ffile, true);
+}
+
+// test with a pipe
+//
+#if defined __UNIX__ || defined _MSC_VER || defined __MINGW32__
+void FileTypeTestCase::Pipe()
+{
+    int afd[2];
+#ifdef __UNIX__
+    pipe(afd);
+#else
+    _pipe(afd, 256, O_BINARY);
+#endif
+
+    wxFile file0(afd[0]);
+    wxFile file1(afd[1]);
+    TestFd(file0, false);
+    file0.Detach();
+
+    wxFFile ffile(fdopen(afd[0], "r"));
+    TestFILE(ffile, false);
+}
+#endif
+
+// test with a socket
+//
+#if defined __UNIX__
+void FileTypeTestCase::Socket()
+{
+    int s = socket(PF_INET, SOCK_STREAM, 0);
+
+    wxFile file(s);
+    TestFd(file, false);
+    file.Detach();
+
+    wxFFile ffile(fdopen(s, "r"));
+    TestFILE(ffile, false);
+}
+#endif
+
+// Socket streams should be non-seekable
+//
+#if wxUSE_SOCKETS
+void FileTypeTestCase::SocketStream()
+{
+    wxSocketClient client;
+    wxSocketInputStream inStream(client);
+    CPPUNIT_ASSERT(!inStream.IsSeekable());
+    wxSocketOutputStream outStream(client);
+    CPPUNIT_ASSERT(!outStream.IsSeekable());
+
+    wxBufferedInputStream nonSeekableBufferedInput(inStream);
+    CPPUNIT_ASSERT(!nonSeekableBufferedInput.IsSeekable());
+    wxBufferedOutputStream nonSeekableBufferedOutput(outStream);
+    CPPUNIT_ASSERT(!nonSeekableBufferedOutput.IsSeekable());
+}
+#endif
+
+// Memory streams should be seekable
+//
+void FileTypeTestCase::MemoryStream()
+{
+    char buf[20];
+    wxMemoryInputStream inStream(buf, sizeof(buf));
+    CPPUNIT_ASSERT(inStream.IsSeekable());
+    wxMemoryOutputStream outStream(buf, sizeof(buf));
+    CPPUNIT_ASSERT(outStream.IsSeekable());
+
+    wxBufferedInputStream seekableBufferedInput(inStream);
+    CPPUNIT_ASSERT(seekableBufferedInput.IsSeekable());
+    wxBufferedOutputStream seekableBufferedOutput(outStream);
+    CPPUNIT_ASSERT(seekableBufferedOutput.IsSeekable());
+}
+
+// Stdin will usually be a terminal, if so then test it
+// 
+void FileTypeTestCase::Stdin()
+{
+    if (isatty(0))
+        CPPUNIT_ASSERT(wxGetFileType(0) == wxFILE_TYPE_TERMINAL);
+    if (isatty(fileno(stdin)))
+        CPPUNIT_ASSERT(wxGetFileType(stdin) == wxFILE_TYPE_TERMINAL);
+}
+
+// register in the unnamed registry so that these tests are run by default
+CPPUNIT_TEST_SUITE_REGISTRATION(FileTypeTestCase);
+
+// also include in it's own registry so that these tests can be run alone
+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION(FileTypeTestCase, "FileTypeTestCase");
+
+#endif // wxUSE_STREAMS

 	  	 

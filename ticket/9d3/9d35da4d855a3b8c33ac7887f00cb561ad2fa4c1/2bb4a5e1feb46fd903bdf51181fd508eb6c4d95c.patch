Index: include/wx/db.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/db.h,v
retrieving revision 1.107
diff -u -r1.107 db.h
--- include/wx/db.h	2006/11/27 13:16:38	1.107
+++ include/wx/db.h	2007/01/24 09:12:02
@@ -479,7 +479,7 @@
     dbmsXBASE_SEQUITER,
     dbmsFIREBIRD,
     dbmsMAXDB,
-    dbmsFuture1,
+    dbmsEXCEL,
     dbmsFuture2,
     dbmsFuture3,
     dbmsFuture4,
@@ -701,6 +701,10 @@
     bool         TablePrivileges(const wxString &tableName, const wxString &priv,
                                  const wxChar *userID=NULL, const wxChar *schema=NULL,
                                  const wxString &path=wxEmptyString);
+	
+	//This function prepare table name for ODBC command like SQLColumns, SQLTables, SQLTablePrivileges
+	//Now used in GetColumns, GetColumnCount, TableExists, TablePrivileges)
+	const wxString  ODBCTableName(const wxChar *tableName);
 
     // These two functions return the table name or column name in a form ready
     // for use in SQL statements.  For example, if the datasource allows spaces
Index: include/wx/dbtable.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/dbtable.h,v
retrieving revision 1.48
diff -u -r1.48 dbtable.h
--- include/wx/dbtable.h	2005/09/23 12:48:36	1.48
+++ include/wx/dbtable.h	2007/01/23 14:54:32
@@ -51,6 +51,7 @@
     SWORD   SqlCtype;                           // C data type; e.g. SQL_C_LONG
     void   *PtrDataObj;                         // Address of the data object
     int     SzDataObj;                          // Size, in bytes, of the data object
+    int     precision;                          // precision Maxlength for varchar
     bool    KeyField;                           // true if this column is part of the PRIMARY KEY to the table; Date fields should NOT be KeyFields.
     bool    Updateable;                         // Specifies whether this column is updateable
     bool    InsertAllowed;                      // Specifies whether this column should be included in an INSERT statement
@@ -292,7 +293,8 @@
     bool            SetColDefs(UWORD index, const wxString &fieldName, int dataType,
                                void *pData, SWORD cType,
                                int size, bool keyField = false, bool updateable = true,
-                               bool insertAllowed = true, bool derivedColumn = false);
+                               bool insertAllowed = true, bool derivedColumn = false, int precision =-1);
+
     wxDbColDataPtr *SetColDefs(wxDbColInf *colInfs, UWORD numCols);
 
     bool            CloseCursor(HSTMT cursor);
Index: src/common/db.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/db.cpp,v
retrieving revision 1.138
diff -u -r1.138 db.cpp
--- src/common/db.cpp	2006/12/24 12:14:31	1.138
+++ src/common/db.cpp	2007/01/25 08:37:20
@@ -39,6 +39,12 @@
 #endif
 
 #ifdef DBDEBUG_CONSOLE
+#if wxUSE_IOSTREAMH
+    #include <iostream.h>
+#else
+    #include <iostream>
+	using namespace std;
+#endif
     #include "wx/ioswrap.h"
 #endif
 
@@ -807,6 +813,7 @@
         return false;
 
 #ifdef DBDEBUG_CONSOLE
+	if(!silent){
     cout << wxT("VARCHAR DATA TYPE: ") << typeInfVarchar.TypeName << endl;
     cout << wxT("INTEGER DATA TYPE: ") << typeInfInteger.TypeName << endl;
     cout << wxT("FLOAT   DATA TYPE: ") << typeInfFloat.TypeName << endl;
@@ -814,6 +821,7 @@
     cout << wxT("BLOB    DATA TYPE: ") << typeInfBlob.TypeName << endl;
     cout << wxT("MEMO    DATA TYPE: ") << typeInfMemo.TypeName << endl;
     cout << endl;
+	}
 #endif
 
     // Completed Successfully
@@ -1155,7 +1163,7 @@
     }
     cout << endl;
 
-    retcode = SQLGetConnectOption(hdbc, SQL_OPT_TRACE, &l)
+    retcode = SQLGetConnectOption(hdbc, SQL_OPT_TRACE, &l);
     if (retcode != SQL_SUCCESS)
         return(DispAllErrors(henv, hdbc));
     cout << wxT("TRACING: ") << (l == SQL_OPT_TRACE_OFF ? wxT("OFF") : wxT("ON")) << endl;
@@ -1429,8 +1437,9 @@
     }
 
 #ifdef DBDEBUG_CONSOLE
+	if(!silent){
     cout << wxT("***** DATA SOURCE INFORMATION *****") << endl;
-    cout << wxT(wxT("SERVER Name: ") << dbInf.serverName << endl;
+    cout << wxT("SERVER Name: ") << dbInf.serverName << endl;
     cout << wxT("DBMS Name: ") << dbInf.dbmsName << wxT("; DBMS Version: ") << dbInf.dbmsVer << endl;
     cout << wxT("ODBC Version: ") << dbInf.odbcVer << wxT("; Driver Version: ") << dbInf.driverVer << endl;
 
@@ -1496,7 +1505,7 @@
     cout << endl << endl << wxT("more ...") << endl;
     getchar();
 
-    cout << wxT("Default Transaction Isolation: ";
+    cout << wxT("Default Transaction Isolation: ");
     switch(dbInf.txnIsolation)
     {
         case SQL_TXN_READ_UNCOMMITTED:  cout << wxT("Read Uncommitted");    break;
@@ -1560,7 +1569,7 @@
     if (dbInf.posOperations & SQL_POS_REFRESH)
         cout << wxT("Refresh, ");
     if (dbInf.posOperations & SQL_POS_UPDATE)
-        cout << wxT("Upd, "));
+        cout << wxT("Upd, ");
     if (dbInf.posOperations & SQL_POS_DELETE)
         cout << wxT("Del, ");
     if (dbInf.posOperations & SQL_POS_ADD)
@@ -1621,6 +1630,7 @@
     cout << endl;
 
     cout << endl;
+	}
 #endif
 
     // Completed Successfully
@@ -1650,8 +1660,10 @@
     if (retcode != SQL_SUCCESS)
     {
 #ifdef DBDEBUG_CONSOLE
+		if(!silent){
         if (retcode == SQL_NO_DATA_FOUND)
             cout << wxT("SQL_NO_DATA_FOUND fetching information about data type.") << endl;
+		}
 #endif
         DispAllErrors(henv, hdbc, hstmt);
         SQLFreeStmt(hstmt, SQL_CLOSE);
@@ -2599,13 +2611,7 @@
         int tbl;
         for (tbl = 0; tableName[tbl]; tbl++)
         {
-            TableName = tableName[tbl];
-            // Oracle and Interbase table names are uppercase only, so force
-            // the name to uppercase just in case programmer forgot to do this
-            if ((Dbms() == dbmsORACLE) ||
-                (Dbms() == dbmsFIREBIRD) ||
-                (Dbms() == dbmsINTERBASE))
-                TableName = TableName.Upper();
+			TableName = ODBCTableName(tableName[tbl]);
 
             SQLFreeStmt(hstmt, SQL_CLOSE);
 
@@ -2755,13 +2761,7 @@
             colInf[noCols].sqlDataType = 0;
         }
 
-        TableName = tableName;
-        // Oracle and Interbase table names are uppercase only, so force
-        // the name to uppercase just in case programmer forgot to do this
-        if ((Dbms() == dbmsORACLE) ||
-            (Dbms() == dbmsFIREBIRD) ||
-            (Dbms() == dbmsINTERBASE))
-            TableName = TableName.Upper();
+        TableName = ODBCTableName(tableName);
 
         SQLFreeStmt(hstmt, SQL_CLOSE);
 
@@ -3011,13 +3011,7 @@
             colInf[noCols].sqlDataType = 0;
         }
 
-        TableName = tableName;
-        // Oracle and Interbase table names are uppercase only, so force
-        // the name to uppercase just in case programmer forgot to do this
-        if ((Dbms() == dbmsORACLE) ||
-            (Dbms() == dbmsFIREBIRD) ||
-            (Dbms() == dbmsINTERBASE))
-            TableName = TableName.Upper();
+        TableName = ODBCTableName(tableName);
 
         SQLFreeStmt(hstmt, SQL_CLOSE);
 
@@ -3262,13 +3256,7 @@
     wxString UserID;
     convertUserID(userID,UserID);
 
-    TableName = tableName;
-    // Oracle and Interbase table names are uppercase only, so force
-    // the name to uppercase just in case programmer forgot to do this
-    if ((Dbms() == dbmsORACLE) ||
-        (Dbms() == dbmsFIREBIRD) ||
-        (Dbms() == dbmsINTERBASE))
-        TableName = TableName.Upper();
+    TableName = ODBCTableName(tableName);
 
     SQLFreeStmt(hstmt, SQL_CLOSE);
 
@@ -3592,13 +3580,7 @@
     wxString UserID;
     convertUserID(userID,UserID);
 
-    TableName = tableName;
-    // Oracle and Interbase table names are uppercase only, so force
-    // the name to uppercase just in case programmer forgot to do this
-    if ((Dbms() == dbmsORACLE) ||
-        (Dbms() == dbmsFIREBIRD) ||
-        (Dbms() == dbmsINTERBASE))
-        TableName = TableName.Upper();
+    TableName = ODBCTableName(tableName);
 
     SQLFreeStmt(hstmt, SQL_CLOSE);
     RETCODE retcode;
@@ -3665,13 +3647,7 @@
     convertUserID(userID,UserID);
     convertUserID(schema,Schema);
 
-    TableName = tableName;
-    // Oracle and Interbase table names are uppercase only, so force
-    // the name to uppercase just in case programmer forgot to do this
-    if ((Dbms() == dbmsORACLE) ||
-        (Dbms() == dbmsFIREBIRD) ||
-        (Dbms() == dbmsINTERBASE))
-        TableName = TableName.Upper();
+    TableName = ODBCTableName(tableName);
 
     SQLFreeStmt(hstmt, SQL_CLOSE);
 
@@ -3765,6 +3741,21 @@
 
 }  // wxDb::TablePrivileges
 
+const wxString wxDb::ODBCTableName(const wxChar *tableName)
+{
+    wxString TableName = tableName;
+    // Oracle and Interbase table names are uppercase only, so force
+    // the name to uppercase just in case programmer forgot to do this
+    if ((Dbms() == dbmsORACLE) ||
+        (Dbms() == dbmsFIREBIRD) ||
+        (Dbms() == dbmsINTERBASE))
+        TableName = TableName.Upper();
+	
+    //EXCEL sheet name must ends with $
+	if(Dbms() == dbmsEXCEL)
+		TableName += wxT('$');
+	return TableName;
+}
 
 const wxString wxDb::SQLTableName(const wxChar *tableName)
 {
@@ -3772,10 +3763,16 @@
 
     if (Dbms() == dbmsACCESS)
         TableName = _T("\"");
+	else
+	if(Dbms() == dbmsEXCEL)
+		TableName = _T("[");
+
     TableName += tableName;
     if (Dbms() == dbmsACCESS)
         TableName += _T("\"");
-
+	else
+	if(Dbms() == dbmsEXCEL)
+		TableName += _T("$]"); 
     return TableName;
 }  // wxDb::SQLTableName()
 
@@ -3954,6 +3951,8 @@
     if (!wxStricmp(dbInf.dbmsName,wxT("Microsoft SQL Server")))
         return((wxDBMS)(dbmsType = dbmsMS_SQL_SERVER));
 
+	if (!wxStricmp(dbInf.dbmsName,wxT("EXCEL")))
+        return((wxDBMS)(dbmsType = dbmsEXCEL));
     baseName[10] = 0;
     if (!wxStricmp(baseName,wxT("PostgreSQL")))  // v6.5.0
         return((wxDBMS)(dbmsType = dbmsPOSTGRES));
@@ -4419,10 +4418,12 @@
         if (retcode)
         {
 #ifdef DBDEBUG_CONSOLE
+			if(!silent){
                // When run in console mode, use standard out to display errors.
                cout << errMsg << endl;
                cout << wxT("Press any key to continue...") << endl;
                getchar();
+			}
 #endif  // DBDEBUG_CONSOLE
 
 #ifdef __WXDEBUG__
Index: src/common/dbtable.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/dbtable.cpp,v
retrieving revision 1.116
diff -u -r1.116 dbtable.cpp
--- src/common/dbtable.cpp	2006/10/30 13:29:46	1.116
+++ src/common/dbtable.cpp	2007/01/25 08:45:54
@@ -32,6 +32,7 @@
     #include <iostream.h>
 #else
     #include <iostream>
+	using namespace std;
 #endif
     #include "wx/ioswrap.h"
 #endif
@@ -87,6 +88,7 @@
     SqlCtype        = SQL_C_LONG;
     PtrDataObj      = NULL;
     SzDataObj       = 0;
+	precision       = 0;
     KeyField        = false;
     Updateable      = false;
     InsertAllowed   = false;
@@ -480,22 +482,18 @@
         {
             case DB_DATA_TYPE_VARCHAR:
                 fSqlType = pDb->GetTypeInfVarchar().FsqlType;
-                precision = colDefs[i].SzDataObj;
                 scale = 0;
                 break;
             case DB_DATA_TYPE_MEMO:
                 fSqlType = pDb->GetTypeInfMemo().FsqlType;
-                precision = colDefs[i].SzDataObj;
                 scale = 0;
                 break;
             case DB_DATA_TYPE_INTEGER:
                 fSqlType = pDb->GetTypeInfInteger().FsqlType;
-                precision = pDb->GetTypeInfInteger().Precision;
                 scale = 0;
                 break;
             case DB_DATA_TYPE_FLOAT:
                 fSqlType = pDb->GetTypeInfFloat().FsqlType;
-                precision = pDb->GetTypeInfFloat().Precision;
                 scale = pDb->GetTypeInfFloat().MaximumScale;
                 // SQL Sybase Anywhere v5.5 returned a negative number for the
                 // MaxScale.  This caused ODBC to kick out an error on ibscale.
@@ -505,12 +503,10 @@
                 break;
             case DB_DATA_TYPE_DATE:
                 fSqlType = pDb->GetTypeInfDate().FsqlType;
-                precision = pDb->GetTypeInfDate().Precision;
                 scale = 0;
                 break;
             case DB_DATA_TYPE_BLOB:
                 fSqlType = pDb->GetTypeInfBlob().FsqlType;
-                precision = colDefs[i].SzDataObj;
                 scale = 0;
                 break;
         }
@@ -520,8 +516,8 @@
         if (forUpdate)
         {
             if (SQLBindParameter(hstmtUpdate, colNumber++, SQL_PARAM_INPUT, colDefs[i].SqlCtype,
-                                 fSqlType, precision, scale, (UCHAR*) colDefs[i].PtrDataObj,
-                                 precision+1, &colDefs[i].CbValue) != SQL_SUCCESS)
+                                 fSqlType, colDefs[i].precision, scale, (UCHAR*) colDefs[i].PtrDataObj,
+                                 colDefs[i].SzDataObj, &colDefs[i].CbValue) != SQL_SUCCESS)
             {
                 return(pDb->DispAllErrors(henv, hdbc, hstmtUpdate));
             }
@@ -530,7 +526,7 @@
         {
             if (SQLBindParameter(hstmtInsert, colNumber++, SQL_PARAM_INPUT, colDefs[i].SqlCtype,
                                  fSqlType, precision, scale, (UCHAR*) colDefs[i].PtrDataObj,
-                                 precision+1, &colDefs[i].CbValue) != SQL_SUCCESS)
+                                 colDefs[i].SzDataObj, &colDefs[i].CbValue) != SQL_SUCCESS)
             {
                 return(pDb->DispAllErrors(henv, hdbc, hstmtInsert));
             }
@@ -584,8 +580,16 @@
         // Fetch the NEXT, PREV, FIRST or LAST record, depending on fetchType
         SQLULEN cRowsFetched;
         UWORD   rowStatus;
+#if 0
+		//For MS ODBC 3.x app must calls SQLFetchScroll for ODBC 2.x Driver Manager maps this function to SQLExtendedFetch		
+		//Except for the restriction just noted, the ODBC 3.x Driver Manager passes calls to SQLExtendedFetch to the driver, regardless of the driver version.
+		//Ensure right function called
+		if((pDb->dbInf.odbcVer[0] == '0' && pDb->dbInf.odbcVer[1] >= '3') || (pDb->dbInf.odbcVer[0] >= '3'))
+		 		retcode = SQLFetchScroll( hstmt, fetchType, 0);
+		else
+#endif			
+         retcode = SQLExtendedFetch(hstmt, fetchType, 0, &cRowsFetched, &rowStatus);
 
-        retcode = SQLExtendedFetch(hstmt, fetchType, 0, &cRowsFetched, &rowStatus);
         if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO)
         {
             if (retcode == SQL_NO_DATA_FOUND)
@@ -704,7 +708,6 @@
 
 }  // wxDbTable::execUpdate()
 
-
 /********** wxDbTable::query() **********/
 bool wxDbTable::query(int queryType, bool forUpdate, bool distinct, const wxString &pSqlStmt)
 {
@@ -868,6 +871,10 @@
         // Prepare the insert statement for execution
         if (insertableCount)
         {
+#ifdef DBDEBUG_CONSOLE
+			cout << endl <<wxT("INSERT STATEMENT: ")<< sqlStmt.c_str() << endl;
+#endif
+
             if (SQLPrepare(hstmtInsert, (SQLTCHAR FAR *) sqlStmt.c_str(), SQL_NTS) != SQL_SUCCESS)
                 return(pDb->DispAllErrors(henv, hdbc, hstmtInsert));
         }
@@ -1215,7 +1222,9 @@
 
     // Append the WHERE clause to the SQL UPDATE statement
     pSqlStmt += wxT(" WHERE ");
-    switch(typeOfUpdate)
+
+	
+	switch(typeOfUpdate)
     {
         case DB_UPD_KEYFIELDS:
             // If the datasource supports the ROWID column, build
@@ -1236,14 +1245,18 @@
                     pSqlStmt += wxT("'");
                     break;
                 }
-            }
+			}else{
+				//There is now key fields for this table - USE UpdateWhere
+				wxASSERT(m_keysize);
+			}
             // Unable to delete by ROWID, so build a WHERE
             // clause based on the keyfields.
             BuildWhereClause(whereClause, DB_WHERE_KEYFIELDS);
             pSqlStmt += whereClause;
             break;
         case DB_UPD_WHERE:
-            pSqlStmt += pWhereClause;
+			wxASSERT(!pWhereClause.IsEmpty());
+			pSqlStmt += pWhereClause;
             break;
     }
 }  // BuildUpdateStmt()
@@ -1436,9 +1449,14 @@
 
     // Build a CREATE TABLE string from the colDefs structure.
     bool needComma = false;
+
+	wxString TableName;
+	if(pDb->Dbms() == dbmsEXCEL)
+		TableName = tableName;
+	else
+		TableName = pDb->SQLTableName(tableName.c_str());
 
-    sqlStmt.Printf(wxT("CREATE TABLE %s ("),
-                   pDb->SQLTableName(tableName.c_str()).c_str());
+    sqlStmt.Printf(wxT("CREATE TABLE %s ("), TableName.c_str());
 
     for (i = 0; i < m_numCols; i++)
     {
@@ -1614,8 +1632,15 @@
 
     wxString sqlStmt;
 
+	wxString TableName;
+	if(pDb->Dbms() == dbmsEXCEL)
+		TableName = tableName;
+	else
+		TableName = pDb->SQLTableName(tableName.c_str());
+
+
     sqlStmt.Printf(wxT("DROP TABLE %s"),
-                   pDb->SQLTableName(tableName.c_str()).c_str());
+                   TableName.c_str());
 
     pDb->WriteSqlLog(sqlStmt);
 
@@ -2294,7 +2319,7 @@
 /********** wxDbTable::SetColDefs() **********/
 bool wxDbTable::SetColDefs(UWORD index, const wxString &fieldName, int dataType, void *pData,
                            SWORD cType, int size, bool keyField, bool updateable,
-                           bool insertAllowed, bool derivedColumn)
+                           bool insertAllowed, bool derivedColumn, int precision)
 {
     wxString tmpStr;
 
@@ -2341,9 +2366,34 @@
     }
 
     colDefs[index].Null                 = false;
-
+	
+	//set precision from parameter or from DBMS defaults
+    if(precision != -1)
+	  colDefs[index].precision       = precision;
+	else{
+	  switch(colDefs[index].DbDataType)
+        {
+            case DB_DATA_TYPE_VARCHAR:
+                colDefs[index].precision = colDefs[index].SzDataObj;
+                break;
+            case DB_DATA_TYPE_MEMO:
+                colDefs[index].precision = colDefs[index].SzDataObj;
+                break;
+            case DB_DATA_TYPE_INTEGER:
+                colDefs[index].precision = pDb->GetTypeInfInteger().Precision;
+                break;
+            case DB_DATA_TYPE_FLOAT:
+                colDefs[index].precision = pDb->GetTypeInfFloat().Precision;
+                break;
+            case DB_DATA_TYPE_DATE:
+                colDefs[index].precision = pDb->GetTypeInfDate().Precision;
+                break;
+            case DB_DATA_TYPE_BLOB:
+                colDefs[index].precision = colDefs[index].SzDataObj;
+                break;
+        }
+	}
     return true;
-
 }  // wxDbTable::SetColDefs()
 
 
@@ -2417,7 +2467,7 @@
                     break;
             }
             if (pColDataPtrs[index].PtrDataObj != NULL)
-                SetColDefs (index,pColInfs[index].colName,pColInfs[index].dbDataType, pColDataPtrs[index].PtrDataObj, pColDataPtrs[index].SqlCtype, pColDataPtrs[index].SzDataObj);
+				SetColDefs (index,pColInfs[index].colName,pColInfs[index].dbDataType, pColDataPtrs[index].PtrDataObj, pColDataPtrs[index].SqlCtype, pColDataPtrs[index].SzDataObj, false, true, true, false, pColInfs[index].columnLength);
             else
             {
                 // Unable to build all the column definitions, as either one of
 	  	 

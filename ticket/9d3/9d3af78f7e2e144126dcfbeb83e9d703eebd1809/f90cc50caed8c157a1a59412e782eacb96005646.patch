diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets.orig/src/common/sizer.cpp wxWidgets/src/common/sizer.cpp
--- wxWidgets.orig/src/common/sizer.cpp 2007-02-16 23:12:38.000000000 +0100
+++ wxWidgets/src/common/sizer.cpp  2007-02-24 16:15:16.440840204 +0100
@@ -1426,6 +1426,9 @@
         i++;
     }
 
+    // Specify size of columns/rows in 'non-flexible' direction.
+    // Width/height of all columns/rows is equal to width/heigth
+    // of widest/highest column/row.
     AdjustForFlexDirection();
 
     // Sum total minimum size, including gaps between rows/columns.
@@ -1471,10 +1474,12 @@
                 largest = array[n];
         }
 
-        // and now fill it with the largest value
+        // and now fill it with the largest value, but
+        // omit hidden columns/rows (size = -1)
         for ( n = 0; n < count; ++n )
         {
-            array[n] = largest;
+            if ( array[n] != -1 )
+                array[n] = largest;
         }
     }
 }
@@ -1487,7 +1492,6 @@
     if ( sz.y > minsz.y && ( (m_flexDirection & wxVERTICAL) || (m_growMode == wxFLEX_GROWMODE_SPECIFIED) ) )
     {
         int sum_proportions = 0;
-        int growable_space = 0;
         int num = 0;
         size_t idx;
         for (idx = 0; idx < m_growableRows.GetCount(); idx++)
@@ -1504,86 +1508,145 @@
             if (m_rowHeights[ m_growableRows[idx] ] == -1)
                 continue;
             sum_proportions += m_growableRowsProportions[idx];
-            growable_space += m_rowHeights[ m_growableRows[idx] ];
             num++;
         }
 
         if (num > 0)
         {
+            // We will subtract values from delta, num and sum_proportions
+            // each loop to avoid effects of round errors.
+            int delta = (sz.y - minsz.y);
+            
             for (idx = 0; idx < m_growableRows.GetCount(); idx++)
             {
                 if (m_growableRows[idx] >= nrows )
                     continue;
-                if (m_rowHeights[ m_growableRows[idx] ] == -1)
-                    m_rowHeights[ m_growableRows[idx] ] = 0;
-                else
+                // Divide free space only among visible rows.
+                if (m_rowHeights[ m_growableRows[idx] ] != -1)
                 {
-                    int delta = (sz.y - minsz.y);
+                    int current_row_delta;
                     if (sum_proportions == 0)
-                        delta = (delta/num) + m_rowHeights[ m_growableRows[idx] ];
+                    {
+                        // All rows have proportion=0 - divide space evenly among them.
+                        current_row_delta = delta/num;
+                        num--;
+                    }
                     else
-                        delta = ((delta+growable_space)*m_growableRowsProportions[idx]) / sum_proportions;
-                    m_rowHeights[ m_growableRows[idx] ] = delta;
+                    {
+                        // Rows have different proportions - give each of them its part.
+                        current_row_delta = (delta*m_growableRowsProportions[idx])/sum_proportions;
+                        sum_proportions -= m_growableRowsProportions[idx];
+                    }
+                    
+                    m_rowHeights[ m_growableRows[idx] ] += current_row_delta;
+                    delta -= current_row_delta;
                 }
             }
         }
     }
     else if ( (m_growMode == wxFLEX_GROWMODE_ALL) && (sz.y > minsz.y) )
     {
-        // rounding problem?
-        for ( int row = 0; row < nrows; ++row )
-            m_rowHeights[ row ] = sz.y / nrows;
+        int num = 0;
+        int idx;
+        // Count visible (as opposed to hidden) rows.
+        for (idx = 0; idx < nrows; idx++)
+        {
+            // If all items in a row/column are hidden, that row/column will
+            // have a dimension of -1.  This causes the row/column to be
+            // hidden completely.
+            if (m_rowHeights[ idx ] == -1)
+                continue;
+            num++;
+        }
+        
+        if (num > 0)
+        {
+            // This is additional free space, take it...
+            int vertical_space = sz.y - (num - 1)*m_vgap;
+
+            for (int row = 0; row < nrows; ++row)
+            {
+                if (m_rowHeights[ row ] != -1)
+                {
+                    // ...and give everyone equal part.
+                    m_rowHeights[ row ] = vertical_space / num;
+                    vertical_space -= m_rowHeights[ row ];
+                    num--;
+                }
+            }
+        }
     }
 
-    // the same logic as above but for the columns
+    // The same logic as above, but for the columns.
     if ( sz.x > minsz.x && ( (m_flexDirection & wxHORIZONTAL) || (m_growMode == wxFLEX_GROWMODE_SPECIFIED) ) )
     {
         int sum_proportions = 0;
-        int growable_space = 0;
         int num = 0;
         size_t idx;
         for (idx = 0; idx < m_growableCols.GetCount(); idx++)
         {
-            // Since the number of rows/columns can change as items are
-            // inserted/deleted, we need to verify at runtime that the
-            // requested growable rows/columns are still valid.
             if (m_growableCols[idx] >= ncols)
                 continue;
 
-            // If all items in a row/column are hidden, that row/column will
-            // have a dimension of -1.  This causes the column to be hidden
-            // completely.
             if (m_colWidths[ m_growableCols[idx] ] == -1)
                 continue;
             sum_proportions += m_growableColsProportions[idx];
-            growable_space += m_colWidths[ m_growableCols[idx] ];
             num++;
         }
 
         if (num > 0)
         {
+            int delta = (sz.x - minsz.x);
+            
             for (idx = 0; idx < m_growableCols.GetCount(); idx++)
             {
                 if (m_growableCols[idx] >= ncols )
                     continue;
-                if (m_colWidths[ m_growableCols[idx] ] == -1)
-                    m_colWidths[ m_growableCols[idx] ] = 0;
-                else
+                if (m_colWidths[ m_growableCols[idx] ] != -1)
                 {
-                    int delta = (sz.x - minsz.x);
+                    int current_col_delta;
                     if (sum_proportions == 0)
-                        delta = (delta/num) + m_colWidths[ m_growableCols[idx] ];
+                    {
+                        current_col_delta = delta/num;
+                        num--;
+                    }
                     else
-                        delta = ((delta+growable_space)*m_growableColsProportions[idx])/sum_proportions;
-                    m_colWidths[ m_growableCols[idx] ] = delta;
+                    {
+                        current_col_delta = (delta*m_growableColsProportions[idx])/sum_proportions;
+                        sum_proportions -= m_growableColsProportions[idx];
+                    }
+                    
+                    m_colWidths[ m_growableCols[idx] ] += current_col_delta;
+                    delta -= current_col_delta;
                 }
             }
         }
     }
     else if ( (m_growMode == wxFLEX_GROWMODE_ALL) && (sz.x > minsz.x) )
     {
-        for ( int col=0; col < ncols; ++col )
-            m_colWidths[ col ] = sz.x / ncols;
+        int num = 0;
+        int idx;
+        for (idx = 0; idx < ncols; idx++)
+        {
+            if (m_colWidths[ idx ] == -1)
+                continue;
+            num++;
+        }
+
+        if (num > 0)
+        {
+            int horizontal_space = sz.x - (num - 1)*m_hgap;
+        
+            for (int col = 0; col < ncols; ++col)
+            {
+                if (m_colWidths[ col ] != -1)
+                {
+                    m_colWidths[ col ] = horizontal_space / num;
+                    horizontal_space -= m_colWidths[ col ];
+                    num--;
+                }
+            }
+        }
     }
 }

 	  	 

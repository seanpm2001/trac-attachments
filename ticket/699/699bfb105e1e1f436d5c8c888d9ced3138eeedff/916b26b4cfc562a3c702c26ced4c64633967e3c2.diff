diff --git a/include/wx/unichar.h b/include/wx/unichar.h
index a966d59..a8cf47c 100644
--- a/include/wx/unichar.h
+++ b/include/wx/unichar.h
@@ -19,6 +19,20 @@
 class WXDLLIMPEXP_FWD_BASE wxUniCharRef;
 class WXDLLIMPEXP_FWD_BASE wxString;
 
+// If the compiler supports reference-qualified functions,
+// use that feature to restrict the assignment operators to lvalues.
+#if __cplusplus >= 201103L /* This is a C++11 feature */
+    #define wxUNICHAR_ASSIGN_OP_QUALIFIER &
+#elif defined(__cpp_ref_qualifiers) && __cpp_ref_qualifiers >= 200710L /* SD-6 feature checking macro */
+    #define wxUNICHAR_ASSIGN_OP_QUALIFIER &
+#elif WX_HAS_CLANG_FEATURE(cxx_reference_qualified_functions) /* Clang */
+    #define wxUNICHAR_ASSIGN_OP_QUALIFIER &
+#elif wxCHECK_VISUALC_VERSION(14) /* Visual C++ 2015 */
+    #define wxUNICHAR_ASSIGN_OP_QUALIFIER &
+#else /* C++98 */
+    #define wxUNICHAR_ASSIGN_OP_QUALIFIER
+#endif
+
 // This class represents single Unicode character. It can be converted to
 // and from char or wchar_t and implements commonly used character operations.
 class WXDLLIMPEXP_BASE wxUniChar
@@ -107,13 +121,13 @@ public:
     bool operator&&(bool v) const { return (bool)*this && v; }
 
     // Assignment operators:
-    wxUniChar& operator=(const wxUniChar& c) { if (&c != this) m_value = c.m_value; return *this; }
-    wxUniChar& operator=(const wxUniCharRef& c);
-    wxUniChar& operator=(char c) { m_value = From8bit(c); return *this; }
-    wxUniChar& operator=(unsigned char c) { m_value = From8bit((char)c); return *this; }
+    wxUniChar& operator=(const wxUniChar& c) wxUNICHAR_ASSIGN_OP_QUALIFIER { if (&c != this) m_value = c.m_value; return *this; }
+    wxUniChar& operator=(const wxUniCharRef& c) wxUNICHAR_ASSIGN_OP_QUALIFIER;
+    wxUniChar& operator=(char c) wxUNICHAR_ASSIGN_OP_QUALIFIER { m_value = From8bit(c); return *this; }
+    wxUniChar& operator=(unsigned char c) wxUNICHAR_ASSIGN_OP_QUALIFIER { m_value = From8bit((char)c); return *this; }
 
 #define wxUNICHAR_DEFINE_OPERATOR_EQUAL(type) \
-    wxUniChar& operator=(type c) { m_value = (value_type)c; return *this; }
+    wxUniChar& operator=(type c) wxUNICHAR_ASSIGN_OP_QUALIFIER { m_value = (value_type)c; return *this; }
     wxDO_FOR_INT_TYPES(wxUNICHAR_DEFINE_OPERATOR_EQUAL)
 #undef wxUNICHAR_DEFINE_OPERATOR_EQUAL
 
@@ -285,12 +299,14 @@ inline wxUniChar::wxUniChar(const wxUniCharRef& c)
     m_value = c.UniChar().m_value;
 }
 
-inline wxUniChar& wxUniChar::operator=(const wxUniCharRef& c)
+inline wxUniChar& wxUniChar::operator=(const wxUniCharRef& c) wxUNICHAR_ASSIGN_OP_QUALIFIER
 {
     m_value = c.UniChar().m_value;
     return *this;
 }
 
+#undef wxUNICHAR_ASSIGN_OP_QUALIFIER
+
 // wxUniCharRef doesn't behave quite like a reference, notably because template
 // deduction from wxUniCharRef doesn't yield wxUniChar as would have been the
 // case if it were a real reference. This results in a number of problems and

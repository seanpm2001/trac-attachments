Index: wx/lib/plot.py
===================================================================
--- wx/lib/plot.py	(revision 77517)
+++ wx/lib/plot.py	(working copy)
@@ -115,7 +115,7 @@
 
 # Needs NumPy
 try:
-    import numpy.oldnumeric as _Numeric
+    import numpy as np
 except:
     msg= """
     This module requires the NumPy module, which could not be
@@ -136,7 +136,7 @@
     """
 
     def __init__(self, points, attr):
-        self._points = _Numeric.array(points).astype(_Numeric.Float64)
+        self._points = np.array(points).astype(np.float64)
         self._logscale = (False, False)
         self._pointSize = (1.0, 1.0)
         self.currentScale= (1,1)
@@ -155,7 +155,7 @@
     def __getattr__(self, name):
         if name == 'points':
             if len(self._points)>0:
-                data = _Numeric.array(self._points,copy=True)
+                data = np.array(self._points,copy=True)
                 if self._logscale[0]:
                     data = self.log10(data, 0)
                 if self._logscale[1]:
@@ -167,19 +167,19 @@
             raise AttributeError(name)
 
     def log10(self, data, ind):
-        data = _Numeric.compress(data[:,ind]>0,data,0)
-        data[:,ind] = _Numeric.log10(data[:,ind])
+        data = np.compress(data[:,ind]>0,data,0)
+        data[:,ind] = np.log10(data[:,ind])
         return data
 
     def boundingBox(self):
         if len(self.points) == 0:
             # no curves to draw
             # defaults to (-1,-1) and (1,1) but axis can be set in Draw
-            minXY= _Numeric.array([-1.0,-1.0])
-            maxXY= _Numeric.array([ 1.0, 1.0])
+            minXY= np.array([-1.0,-1.0])
+            maxXY= np.array([ 1.0, 1.0])
         else:
-            minXY= _Numeric.minimum.reduce(self.points)
-            maxXY= _Numeric.maximum.reduce(self.points)
+            minXY= np.minimum.reduce(self.points)
+            maxXY= np.maximum.reduce(self.points)
         return minXY, maxXY
 
     def scaleAndShift(self, scale=(1,1), shift=(0,0)):
@@ -205,14 +205,14 @@
         if pointScaled == True:
             #Using screen coords
             p = self.scaled
-            pxy = self.currentScale * _Numeric.array(pntXY)+ self.currentShift
+            pxy = self.currentScale * np.array(pntXY)+ self.currentShift
         else:
             #Using user coords
             p = self.points
-            pxy = _Numeric.array(pntXY)
+            pxy = np.array(pntXY)
         #determine distance for each point
-        d= _Numeric.sqrt(_Numeric.add.reduce((p-pxy)**2,1)) #sqrt(dx^2+dy^2)
-        pntIndex = _Numeric.argmin(d)
+        d= np.sqrt(np.add.reduce((p-pxy)**2,1)) #sqrt(dx^2+dy^2)
+        pntIndex = np.argmin(d)
         dist = d[pntIndex]
         return [pntIndex, self.points[pntIndex], self.scaled[pntIndex] / self._pointSize, dist]
 
@@ -386,9 +386,9 @@
     def _circle(self, dc, coords, size=1):
         fact= 2.5*size
         wh= 5.0*size
-        rect= _Numeric.zeros((len(coords),4),_Numeric.Float)+[0.0,0.0,wh,wh]
+        rect= np.zeros((len(coords),4),np.float)+[0.0,0.0,wh,wh]
         rect[:,0:2]= coords-[fact,fact]
-        dc.DrawEllipseList(rect.astype(_Numeric.Int32))
+        dc.DrawEllipseList(rect.astype(np.int32))
 
     def _dot(self, dc, coords, size=1):
         dc.DrawPointList(coords)
@@ -396,35 +396,35 @@
     def _square(self, dc, coords, size=1):
         fact= 2.5*size
         wh= 5.0*size
-        rect= _Numeric.zeros((len(coords),4),_Numeric.Float)+[0.0,0.0,wh,wh]
+        rect= np.zeros((len(coords),4),np.float)+[0.0,0.0,wh,wh]
         rect[:,0:2]= coords-[fact,fact]
-        dc.DrawRectangleList(rect.astype(_Numeric.Int32))
+        dc.DrawRectangleList(rect.astype(np.int32))
 
     def _triangle(self, dc, coords, size=1):
         shape= [(-2.5*size,1.44*size), (2.5*size,1.44*size), (0.0,-2.88*size)]
-        poly= _Numeric.repeat(coords,3)
+        poly= np.repeat(coords,3)
         poly.shape= (len(coords),3,2)
         poly += shape
-        dc.DrawPolygonList(poly.astype(_Numeric.Int32))
+        dc.DrawPolygonList(poly.astype(np.int32))
 
     def _triangle_down(self, dc, coords, size=1):
         shape= [(-2.5*size,-1.44*size), (2.5*size,-1.44*size), (0.0,2.88*size)]
-        poly= _Numeric.repeat(coords,3)
+        poly= np.repeat(coords,3)
         poly.shape= (len(coords),3,2)
         poly += shape
-        dc.DrawPolygonList(poly.astype(_Numeric.Int32))
+        dc.DrawPolygonList(poly.astype(np.int32))
 
     def _cross(self, dc, coords, size=1):
         fact= 2.5*size
         for f in [[-fact,-fact,fact,fact],[-fact,fact,fact,-fact]]:
-            lines= _Numeric.concatenate((coords,coords),axis=1)+f
-            dc.DrawLineList(lines.astype(_Numeric.Int32))
+            lines= np.concatenate((coords,coords),axis=1)+f
+            dc.DrawLineList(lines.astype(np.int32))
 
     def _plus(self, dc, coords, size=1):
         fact= 2.5*size
         for f in [[-fact,0,fact,0],[0,-fact,0,fact]]:
-            lines= _Numeric.concatenate((coords,coords),axis=1)+f
-            dc.DrawLineList(lines.astype(_Numeric.Int32))
+            lines= np.concatenate((coords,coords),axis=1)+f
+            dc.DrawLineList(lines.astype(np.int32))
 
 class PlotGraphics:
     """Container to hold PolyXXX objects and graph labels
@@ -458,8 +458,8 @@
         p1, p2 = self.objects[0].boundingBox()
         for o in self.objects[1:]:
             p1o, p2o = o.boundingBox()
-            p1 = _Numeric.minimum(p1, p1o)
-            p2 = _Numeric.maximum(p2, p2o)
+            p1 = np.minimum(p1, p1o)
+            p2 = np.maximum(p2, p2o)
         return p1, p2
 
     def scaleAndShift(self, scale=(1,1), shift=(0,0)):
@@ -509,7 +509,7 @@
         for o in self.objects[1:]:
             o._pointSize = self._pointSize
             oSymExt = o.getSymExtent(printerScale)
-            symExt = _Numeric.maximum(symExt, oSymExt)
+            symExt = np.maximum(symExt, oSymExt)
         return symExt
 
     def getLegendNames(self):
@@ -602,15 +602,15 @@
         self._sb_yunit = 0
 
         self._dragEnabled = False
-        self._screenCoordinates = _Numeric.array([0.0, 0.0])
+        self._screenCoordinates = np.array([0.0, 0.0])
 
         self._logscale = (False, False)
 
         # Zooming variables
         self._zoomInFactor =  0.5
         self._zoomOutFactor = 2
-        self._zoomCorner1= _Numeric.array([0.0, 0.0]) # left mouse down corner
-        self._zoomCorner2= _Numeric.array([0.0, 0.0])   # left mouse up corner
+        self._zoomCorner1= np.array([0.0, 0.0]) # left mouse down corner
+        self._zoomCorner2= np.array([0.0, 0.0])   # left mouse up corner
         self._zoomEnabled= False
         self._hasDragged= False
 
@@ -1000,9 +1000,9 @@
         """Wrapper around _getXY, which handles log scales"""
         x,y = self._getXY(event)
         if self.getLogScale()[0]:
-            x = _Numeric.power(10,x)
+            x = np.power(10,x)
         if self.getLogScale()[1]:
-            y = _Numeric.power(10,y)
+            y = np.power(10,y)
         return x,y
 
     def _getXY(self,event):
@@ -1012,13 +1012,13 @@
 
     def PositionUserToScreen(self, pntXY):
         """Converts User position to Screen Coordinates"""
-        userPos= _Numeric.array(pntXY)
+        userPos= np.array(pntXY)
         x,y= userPos * self._pointScale + self._pointShift
         return x,y
 
     def PositionScreenToUser(self, pntXY):
         """Converts Screen position to User Coordinates"""
-        screenPos= _Numeric.array(pntXY)
+        screenPos= np.array(pntXY)
         x,y= (screenPos-self._pointShift)/self._pointScale
         return x,y
 
@@ -1055,7 +1055,7 @@
     def GetXMaxRange(self):
         xAxis = self._getXMaxRange()
         if self.getLogScale()[0]:
-            xAxis = _Numeric.power(10,xAxis)
+            xAxis = np.power(10,xAxis)
         return xAxis
 
     def _getXMaxRange(self):
@@ -1068,7 +1068,7 @@
     def GetYMaxRange(self):
         yAxis = self._getYMaxRange()
         if self.getLogScale()[1]:
-            yAxis = _Numeric.power(10,yAxis)
+            yAxis = np.power(10,yAxis)
         return yAxis
 
     def _getYMaxRange(self):
@@ -1081,7 +1081,7 @@
     def GetXCurrentRange(self):
         xAxis = self._getXCurrentRange()
         if self.getLogScale()[0]:
-            xAxis = _Numeric.power(10,xAxis)
+            xAxis = np.power(10,xAxis)
         return xAxis
 
     def _getXCurrentRange(self):
@@ -1091,7 +1091,7 @@
     def GetYCurrentRange(self):
         yAxis = self._getYCurrentRange()
         if self.getLogScale()[1]:
-            yAxis = _Numeric.power(10,yAxis)
+            yAxis = np.power(10,yAxis)
         return yAxis
 
     def _getYCurrentRange(self):
@@ -1114,12 +1114,12 @@
             if xAxis[0] == xAxis[1]:
                 return
             if self.getLogScale()[0]:
-                xAxis = _Numeric.log10(xAxis)
+                xAxis = np.log10(xAxis)
         if yAxis != None:
             if yAxis[0] == yAxis[1]:
                 return
             if self.getLogScale()[1]:
-                yAxis = _Numeric.log10(yAxis)
+                yAxis = np.log10(yAxis)
         self._Draw(graphics, xAxis, yAxis, dc)
 
     def _Draw(self, graphics, xAxis = None, yAxis = None, dc = None):
@@ -1183,10 +1183,10 @@
             p2[0],p2[1] = xAxis[1], yAxis[1]     # upper right corner user scale (xmax,ymax)
         else:
             # Both axis specified in Draw
-            p1= _Numeric.array([xAxis[0], yAxis[0]])    # lower left corner user scale (xmin,ymin)
-            p2= _Numeric.array([xAxis[1], yAxis[1]])     # upper right corner user scale (xmax,ymax)
+            p1= np.array([xAxis[0], yAxis[0]])    # lower left corner user scale (xmin,ymin)
+            p2= np.array([xAxis[1], yAxis[1]])     # upper right corner user scale (xmax,ymax)
 
-        self.last_draw = (graphics, _Numeric.array(xAxis), _Numeric.array(yAxis))       # saves most recient values
+        self.last_draw = (graphics, np.array(xAxis), np.array(yAxis))       # saves most recient values
 
         # Get ticks and textExtents for axis if required
         if self._xSpec is not 'none':
@@ -1219,8 +1219,8 @@
         lhsW= yTextExtent[0]+ yLabelWH[1] + 3*self._pointSize[0]
         bottomH= max(xTextExtent[1], yTextExtent[1]/2.)+ xLabelWH[1] + 2*self._pointSize[1]
         topH= yTextExtent[1]/2. + titleWH[1]
-        textSize_scale= _Numeric.array([rhsW+lhsW,bottomH+topH]) # make plot area smaller by text size
-        textSize_shift= _Numeric.array([lhsW, bottomH])          # shift plot area by this amount
+        textSize_scale= np.array([rhsW+lhsW,bottomH+topH]) # make plot area smaller by text size
+        textSize_shift= np.array([lhsW, bottomH])          # shift plot area by this amount
 
         # draw title if requested
         if self._titleEnabled:
@@ -1244,8 +1244,8 @@
             self._drawLegend(dc,graphics,rhsW,topH,legendBoxWH, legendSymExt, legendTextExt)
 
         # allow for scaling and shifting plotted points
-        scale = (self.plotbox_size-textSize_scale) / (p2-p1)* _Numeric.array((1,-1))
-        shift = -p1*scale + self.plotbox_origin + textSize_shift * _Numeric.array((1,-1))
+        scale = (self.plotbox_size-textSize_scale) / (p2-p1)* np.array((1,-1))
+        shift = -p1*scale + self.plotbox_origin + textSize_shift * np.array((1,-1))
         self._pointScale= scale / self._pointSize  # make available for mouse events
         self._pointShift= shift / self._pointSize
         self._drawAxes(dc, p1, p2, scale, shift, xticks, yticks)
@@ -1365,7 +1365,7 @@
         """
         if self.last_PointLabel != None:
             #compare pointXY
-            if _Numeric.sometrue(mDataDict["pointXY"] != self.last_PointLabel["pointXY"]):
+            if np.sometrue(mDataDict["pointXY"] != self.last_PointLabel["pointXY"]):
                 #closest changed
                 self._drawPointLabel(self.last_PointLabel) #erase old
                 self._drawPointLabel(mDataDict) #plot new
@@ -1386,7 +1386,7 @@
             self._drawRubberBand(self._zoomCorner1, self._zoomCorner2) # add new
         elif self._dragEnabled and event.LeftIsDown():
             coordinates = event.GetPosition()
-            newpos, oldpos = map(_Numeric.array, map(self.PositionScreenToUser, [coordinates, self._screenCoordinates]))
+            newpos, oldpos = map(np.array, map(self.PositionScreenToUser, [coordinates, self._screenCoordinates]))
             dist = newpos-oldpos
             self._screenCoordinates = coordinates
 
@@ -1398,7 +1398,7 @@
 
     def OnMouseLeftDown(self,event):
         self._zoomCorner1[0], self._zoomCorner1[1]= self._getXY(event)
-        self._screenCoordinates = _Numeric.array(event.GetPosition())
+        self._screenCoordinates = np.array(event.GetPosition())
         if self._dragEnabled:
             self.SetCursor(self.GrabHandCursor)
             self.canvas.CaptureMouse()
@@ -1409,8 +1409,8 @@
                 self._drawRubberBand(self._zoomCorner1, self._zoomCorner2) # remove old
                 self._zoomCorner2[0], self._zoomCorner2[1]= self._getXY(event)
                 self._hasDragged = False  # reset flag
-                minX, minY= _Numeric.minimum( self._zoomCorner1, self._zoomCorner2)
-                maxX, maxY= _Numeric.maximum( self._zoomCorner1, self._zoomCorner2)
+                minX, minY= np.minimum( self._zoomCorner1, self._zoomCorner2)
+                maxX, maxY= np.maximum( self._zoomCorner1, self._zoomCorner2)
                 self.last_PointLabel = None        #reset pointLabel
                 if self.last_draw != None:
                     self._Draw(self.last_draw[0], xAxis = (minX,maxX), yAxis = (minY,maxY), dc = None)
@@ -1498,10 +1498,10 @@
             self.width, self.height= width,height
         self.width *= self._pointSize[0] # high precision
         self.height *= self._pointSize[1] # high precision
-        self.plotbox_size = 0.97*_Numeric.array([self.width, self.height])
+        self.plotbox_size = 0.97*np.array([self.width, self.height])
         xo = 0.5*(self.width-self.plotbox_size[0])
         yo = self.height-0.5*(self.height-self.plotbox_size[1])
-        self.plotbox_origin = _Numeric.array([xo, yo])
+        self.plotbox_origin = np.array([xo, yo])
 
     def _setPrinterScale(self, scale):
         """Used to thicken lines and increase marker size for print out."""
@@ -1548,12 +1548,12 @@
             if isinstance(o,PolyMarker):
                 # draw marker with legend
                 pnt= (trhc[0]+legendLHS+legendSymExt[0]/2., trhc[1]+s+lineHeight/2.)
-                o.draw(dc, self.printerScale, coord= _Numeric.array([pnt]))
+                o.draw(dc, self.printerScale, coord= np.array([pnt]))
             elif isinstance(o,PolyLine):
                 # draw line with legend
                 pnt1= (trhc[0]+legendLHS, trhc[1]+s+lineHeight/2.)
                 pnt2= (trhc[0]+legendLHS+legendSymExt[0], trhc[1]+s+lineHeight/2.)
-                o.draw(dc, self.printerScale, coord= _Numeric.array([pnt1,pnt2]))
+                o.draw(dc, self.printerScale, coord= np.array([pnt1,pnt2]))
             else:
                 raise TypeError("object is neither PolyMarker or PolyLine instance")
             # draw legend txt
@@ -1588,7 +1588,7 @@
             txtList= graphics.getLegendNames()
             txtExt= dc.GetTextExtent(txtList[0])
             for txt in graphics.getLegendNames()[1:]:
-                txtExt= _Numeric.maximum(txtExt,dc.GetTextExtent(txt))
+                txtExt= np.maximum(txtExt,dc.GetTextExtent(txt))
             maxW= symExt[0]+txtExt[0]
             maxH= max(symExt[1],txtExt[1])
             # padding .1 for lhs of legend box and space between lines
@@ -1626,14 +1626,14 @@
 
     def _point2ClientCoord(self, corner1, corner2):
         """Converts user point coords to client screen int coords x,y,width,height"""
-        c1= _Numeric.array(corner1)
-        c2= _Numeric.array(corner2)
+        c1= np.array(corner1)
+        c2= np.array(corner2)
         # convert to screen coords
         pt1= c1*self._pointScale+self._pointShift
         pt2= c2*self._pointScale+self._pointShift
         # make height and width positive
-        pul= _Numeric.minimum(pt1,pt2) # Upper left corner
-        plr= _Numeric.maximum(pt1,pt2) # Lower right corner
+        pul= np.minimum(pt1,pt2) # Upper left corner
+        plr= np.maximum(pt1,pt2) # Lower right corner
         rectWidth, rectHeight= plr-pul
         ptx,pty= pul
         return ptx, pty, rectWidth, rectHeight
@@ -1649,8 +1649,8 @@
             range = upper-lower
             if range == 0.:
                 return lower-0.5, upper+0.5
-            log = _Numeric.log10(range)
-            power = _Numeric.floor(log)
+            log = np.log10(range)
+            power = np.floor(log)
             fraction = log-power
             if fraction <= 0.05:
                 power = power-1
@@ -1695,12 +1695,12 @@
             text = 1
             for y, d in [(p1[1], -xTickLength), (p2[1], xTickLength)]:   # miny, maxy and tick lengths
                 for x, label in xticks:
-                    pt = scale*_Numeric.array([x, y])+shift
+                    pt = scale*np.array([x, y])+shift
                     dc.DrawLine(pt[0],pt[1],pt[0],pt[1] + d) # draws tick mark d units
                     if text:
                         dc.DrawText(label,pt[0],pt[1]+2*self._pointSize[1])
-                a1 = scale*_Numeric.array([lower, y])+shift
-                a2 = scale*_Numeric.array([upper, y])+shift
+                a1 = scale*np.array([lower, y])+shift
+                a2 = scale*np.array([upper, y])+shift
                 dc.DrawLine(a1[0],a1[1],a2[0],a2[1])  # draws upper and lower axis line
                 text = 0  # axis values not drawn on top side
 
@@ -1710,13 +1710,13 @@
             h = dc.GetCharHeight()
             for x, d in [(p1[0], -yTickLength), (p2[0], yTickLength)]:
                 for y, label in yticks:
-                    pt = scale*_Numeric.array([x, y])+shift
+                    pt = scale*np.array([x, y])+shift
                     dc.DrawLine(pt[0],pt[1],pt[0]-d,pt[1])
                     if text:
                         dc.DrawText(label,pt[0]-dc.GetTextExtent(label)[0]-3*self._pointSize[0],
                                     pt[1]-0.75*h)
-                a1 = scale*_Numeric.array([x, lower])+shift
-                a2 = scale*_Numeric.array([x, upper])+shift
+                a1 = scale*np.array([x, lower])+shift
+                a2 = scale*np.array([x, upper])+shift
                 dc.DrawLine(a1[0],a1[1],a2[0],a2[1])
                 text = 0    # axis values not drawn on right side
 
@@ -1753,23 +1753,23 @@
             return self._ticks(*args, **attr)
 
     def _logticks(self, lower, upper):
-        #lower,upper = map(_Numeric.log10,[lower,upper])
+        #lower,upper = map(np.log10,[lower,upper])
         #print('logticks',lower,upper)
         ticks = []
-        mag = _Numeric.power(10,_Numeric.floor(lower))
+        mag = np.power(10,np.floor(lower))
         if upper-lower > 6:
-            t = _Numeric.power(10,_Numeric.ceil(lower))
-            base = _Numeric.power(10,_Numeric.floor((upper-lower)/6))
+            t = np.power(10,np.ceil(lower))
+            base = np.power(10,np.floor((upper-lower)/6))
             def inc(t):
                 return t*base-t
         else:
-            t = _Numeric.ceil(_Numeric.power(10,lower)/mag)*mag
+            t = np.ceil(np.power(10,lower)/mag)*mag
             def inc(t):
-                return 10**int(_Numeric.floor(_Numeric.log10(t)+1e-16))
-        majortick = int(_Numeric.log10(mag))
+                return 10**int(np.floor(np.log10(t)+1e-16))
+        majortick = int(np.log10(mag))
         while t <= pow(10,upper):
-            if majortick != int(_Numeric.floor(_Numeric.log10(t)+1e-16)):
-                majortick = int(_Numeric.floor(_Numeric.log10(t)+1e-16))
+            if majortick != int(np.floor(np.log10(t)+1e-16)):
+                majortick = int(np.floor(np.log10(t)+1e-16))
                 ticklabel = '1e%d'%majortick
             else:
                 if upper-lower < 2:
@@ -1777,7 +1777,7 @@
                     ticklabel = '%de%d'%(minortick,majortick)
                 else:
                     ticklabel = ''
-            ticks.append((_Numeric.log10(t), ticklabel))
+            ticks.append((np.log10(t), ticklabel))
             t += inc(t)
         if len(ticks) == 0:
             ticks = [(0,'')]
@@ -1788,8 +1788,8 @@
             ideal = (upper-lower)/float(numticks)
         else:
             ideal = (upper-lower)/7.
-        log = _Numeric.log10(ideal)
-        power = _Numeric.floor(log)
+        log = np.log10(ideal)
+        power = np.floor(log)
         if isinstance(numticks, (float, int)):
             grid = ideal
         else:
@@ -1797,7 +1797,7 @@
             factor = 1.
             error = fraction
             for f, lf in self._multiples:
-                e = _Numeric.fabs(fraction-lf)
+                e = np.fabs(fraction-lf)
                 if e < error:
                     error = e
                     factor = f
@@ -1811,7 +1811,7 @@
             digits = -int(power)
             format = '%' + repr(digits+2) + '.' + repr(digits) + 'f'
         ticks = []
-        t = -grid*_Numeric.floor(-lower/grid)
+        t = -grid*np.floor(-lower/grid)
         while t <= upper:
             if t == -0:
                 t = 0
@@ -1819,7 +1819,7 @@
             t = t + grid
         return ticks
 
-    _multiples = [(2., _Numeric.log10(2.)), (5., _Numeric.log10(5.))]
+    _multiples = [(2., np.log10(2.)), (5., np.log10(5.))]
 
 
     def _adjustScrollbars(self):
@@ -2006,19 +2006,19 @@
 
 def _draw1Objects():
     # 100 points sin function, plotted as green circles
-    data1 = 2.*_Numeric.pi*_Numeric.arange(200)/200.
+    data1 = 2.*np.pi*np.arange(200)/200.
     data1.shape = (100, 2)
-    data1[:,1] = _Numeric.sin(data1[:,0])
+    data1[:,1] = np.sin(data1[:,0])
     markers1 = PolyMarker(data1, legend='Green Markers', colour='green', marker='circle',size=1)
 
     # 50 points cos function, plotted as red line
-    data1 = 2.*_Numeric.pi*_Numeric.arange(100)/100.
+    data1 = 2.*np.pi*np.arange(100)/100.
     data1.shape = (50,2)
-    data1[:,1] = _Numeric.cos(data1[:,0])
+    data1[:,1] = np.cos(data1[:,0])
     lines = PolySpline(data1, legend= 'Red Line', colour='red')
 
     # A few more points...
-    pi = _Numeric.pi
+    pi = np.pi
     markers2 = PolyMarker([(0., 0.), (pi/4., 1.), (pi/2, 0.),
                           (3.*pi/4., -1)], legend='Cross Legend', colour='blue',
                           marker='cross')
@@ -2027,19 +2027,19 @@
 
 def _draw2Objects():
     # 100 points sin function, plotted as green dots
-    data1 = 2.*_Numeric.pi*_Numeric.arange(200)/200.
+    data1 = 2.*np.pi*np.arange(200)/200.
     data1.shape = (100, 2)
-    data1[:,1] = _Numeric.sin(data1[:,0])
+    data1[:,1] = np.sin(data1[:,0])
     line1 = PolySpline(data1, legend='Green Line', colour='green', width=6, style=wx.PENSTYLE_DOT)
 
     # 50 points cos function, plotted as red dot-dash
-    data1 = 2.*_Numeric.pi*_Numeric.arange(100)/100.
+    data1 = 2.*np.pi*np.arange(100)/100.
     data1.shape = (50,2)
-    data1[:,1] = _Numeric.cos(data1[:,0])
+    data1[:,1] = np.cos(data1[:,0])
     line2 = PolySpline(data1, legend='Red Line', colour='red', width=3, style= wx.PENSTYLE_DOT_DASH)
 
     # A few more points...
-    pi = _Numeric.pi
+    pi = np.pi
     markers1 = PolyMarker([(0., 0.), (pi/4., 1.), (pi/2, 0.),
                           (3.*pi/4., -1)], legend='Cross Hatch Square', colour='blue', width= 3, size= 6,
                           fillcolour= 'red', fillstyle= wx.CROSSDIAG_HATCH,
@@ -2058,7 +2058,7 @@
 
 def _draw4Objects():
     # 25,000 point line
-    data1 = _Numeric.arange(5e5,1e6,10)
+    data1 = np.arange(5e5,1e6,10)
     data1.shape = (25000, 2)
     line1 = PolyLine(data1, legend='Wide Line', colour='green', width=5)
 
@@ -2093,11 +2093,11 @@
                         "Bar Graph - (Turn on Grid, Legend)", "Months", "Number of Students")
 def _draw7Objects():
     # Empty graph with axis defined but no points/lines
-    x = _Numeric.arange(1,1000,1)
+    x = np.arange(1,1000,1)
     y1 = 4.5*x**2
     y2 = 2.2*x**3
-    points1 = _Numeric.transpose([x,y1])
-    points2 = _Numeric.transpose([x,y2])
+    points1 = np.transpose([x,y1])
+    points2 = np.transpose([x,y2])
     line1 = PolyLine(points1, legend='quadratic', colour='blue', width=1)
     line2 = PolyLine(points2, legend='cubic', colour='red', width=1)
     return PlotGraphics([line1,line2], "double log plot", "Value X", "Value Y")

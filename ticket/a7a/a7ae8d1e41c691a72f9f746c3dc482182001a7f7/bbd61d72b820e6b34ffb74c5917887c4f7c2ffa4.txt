
Index: docs/latex/wx/mltchdlg.tex
===================================================================
RCS file: /home/wxcvs/wxWindows/docs/latex/wx/mltchdlg.tex,v
retrieving revision 1.3
diff -U2 -r1.3 mltchdlg.tex
--- docs/latex/wx/mltchdlg.tex	15 Feb 1999 20:40:50 -0000	1.3
+++ docs/latex/wx/mltchdlg.tex	23 Feb 2002 15:18:11 -0000
@@ -2,7 +2,6 @@
 
 This class represents a dialog that shows a list of strings, and allows
-the user to select one or more.
+the user to select one or more, by clicking on each checkbox. Checkboxes may be enabled or disabled at construction.
 
-{\bf NOTE:} this class is not yet implemented.
 
 \wxheading{Derived from}
@@ -23,3 +22,67 @@
 \latexignore{\rtfignore{\wxheading{Members}}}
 
+\func{} {wxMultipleChoiceDialog } {\void}
 
+Default Constructor (Does nothing)
+
+\func{} {wxMultipleChoiceDialog}{\param{wxWindow \* }{parent}, \param{const wxString \& }{ caption}, \rtfsp
+\param{const bool \* }{SetChecked},  \param{int }{n},  \param{const wxString \* }{choices},  \rtfsp
+\param{const bool \* SetEnabled = }{NULL}, \param{long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_}{BORDER }} 
+
+Constructor, taking a string list and optional client data.
+
+\wxheading{Parameters}
+
+\docparam{parent}{Parent window.}
+
+\docparam{caption}{The dialog caption.}
+
+\docparam{SetChecked}{An array of bool, containing the initial check settings.}
+
+\docparam{n}{The number of choices.}
+
+\docparam{choices}{An array of strings, containing the choices.}
+
+\docparam{SetEnabled}{An array of bool, so the boxes can be disabled. If NULL is used, all boxes are enabled.}
+
+\docparam{style}{A dialog style (bitlist) containing flags chosen from the following:
+
+\twocolwidtha{5cm}
+\begin{twocollist}
+\twocolitem{{\bf wxDIALOG_EX_CONTEXTHELP}}{Show a Help button.}
+\end{twocollist}
+
+
+if the help button is clicked, a Comamnd event is sent ot the parent with value wxID_HELP_CONTEXT, 
+and can be intercepted with the EVT_BUTTON macro.
+
+\func{} {wxMultipleChoiceDialog} {\param {wxWindow \*}{parent}, \rtfsp
+\param {const wxString \& }{caption}, \param {wxArrayInt \& }{SetChecked},  \rtfsp
+\param {int }{ n},  \param {const wxArrayString \& }{choices}, \rtfsp
+\param {wxArrayInt \* }{SetEnabled = NULL},\rtfsp
+\param {long }{style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER}}
+
+A second constructor, same as above, but uses wxArrays instead of pointers
+
+\membersection{wxMultipleChoiceDialog::GetSelection}
+
+\func{int} {GetSelection} {\param {bool \* } {GetChecked}, \param{int } {n = -1}}
+\func{int} {GetSelection} {\param {wxArrayInt \& } {GetChecked}}
+\func{bool} {GetSelection} {\param {int }{n}}
+Returns the number of elements in the dialog box, or for the last form, the value of the requested item. 
+The first form will retrieve the values of all the checkboxes up to n, and up to the max if the default parameter -1 is used
+If a checkbox is disabled, FALSE will be returned for that item
+
+\membersection{wxMultipleChoiceDialog::SetSelection}
+
+\func{void} {SetSelection} {\param {const \bool \*} {SetChecked}, \param {int} {n}, \rtfsp
+\param {const wxString \* } {choices}, \param {const bool \* } {SetEnabled = NULL}}
+   
+Can be used to set the selection. Any existing checkboxes will be deleted
+
+
+\membersection{wxMultipleChoiceDialog::ShowModal}\label{wxmultiplechoicedialogshowmodal}
+
+\func{int}{ShowModal}{\void}
+
+Shows the dialog, returning either wxID\_OK or wxID\_CANCEL.
Index: include/wx/generic/choicdgg.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/generic/choicdgg.h,v
retrieving revision 1.20
diff -U2 -r1.20 choicdgg.h
--- include/wx/generic/choicdgg.h	7 Jul 2001 11:20:11 -0000	1.20
+++ include/wx/generic/choicdgg.h	23 Feb 2002 15:18:13 -0000
@@ -19,4 +19,5 @@
 #include "wx/dynarray.h"
 #include "wx/dialog.h"
+#include "wx/sizer.h"
 
 class WXDLLEXPORT wxListBox;
@@ -306,4 +307,52 @@
 
 #endif // WXWIN_COMPATIBILITY_2
+
+
+class WXDLLEXPORT wxMultipleChoiceDialog : public wxDialog
+{
+public:
+    wxMultipleChoiceDialog() {} 
+
+    wxMultipleChoiceDialog(wxWindow *parent,
+                const wxString & caption,
+                const bool * SetChecked, 
+                int n, 
+                const wxString * choices, 
+                const bool * SetEnabled = NULL,
+                long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER ) 
+    {
+    	Create (parent, caption, SetChecked, n, choices, SetEnabled, style ) ;
+    };
+
+//same, but use wxArrays, see .cpp file
+    wxMultipleChoiceDialog(wxWindow *parent,
+                const wxString & caption,
+                wxArrayInt & SetChecked, 
+                int n, 
+                const wxArrayString& choices,
+                wxArrayInt * SetEnabled = NULL,
+                long style = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER ) ;
+
+    void Create (wxWindow *parent,
+                const wxString & caption,
+                const bool * SetChecked, 
+                int n, 
+                const wxString * choices, 
+                const bool * SetEnabled,
+                long style )  ;
+ 
+    void OnButton(wxCommandEvent& event);
+    void SetSelection (const bool * SetChecked, int n, const wxString * choices, const bool * SetEnabled = NULL);
+    int  GetSelection (bool * GetChecked, int n = -1);
+    int  GetSelection (wxArrayInt & GetChecked) ;
+    bool GetSelection (int n);
+private:
+    wxArrayInt m_checked, m_enabled ;
+    int m_count ;
+    wxBoxSizer * m_topsizer ;
+
+    DECLARE_DYNAMIC_CLASS(wxMultipleChoiceDialog)
+    DECLARE_EVENT_TABLE()
+};
 
 #endif // __CHOICEDLGH_G__
Index: samples/dialogs/dialogs.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/dialogs/dialogs.cpp,v
retrieving revision 1.71
diff -U2 -r1.71 dialogs.cpp
--- samples/dialogs/dialogs.cpp	10 Feb 2002 19:04:22 -0000	1.71
+++ samples/dialogs/dialogs.cpp	23 Feb 2002 15:18:15 -0000
@@ -5,5 +5,5 @@
 // Modified by:
 // Created:     04/01/98
-// RCS-ID:      $Id: dialogs.cpp,v 1.71 2002/02/10 19:04:22 VS Exp $
+// RCS-ID:      $Id: dialogs.cpp,v 1.68 2001/11/27 14:46:18 VZ Exp $
 // Copyright:   (c) Julian Smart and Markus Holzem
 // Licence:     wxWindows license
@@ -39,12 +39,11 @@
 
 #if defined(__WXMSW__) && wxTEST_GENERIC_DIALOGS_IN_MSW
-#include "wx/generic/colrdlgg.h"
-#include "wx/generic/fontdlgg.h"
+#include <wx/generic/colrdlgg.h>
+#include <wx/generic/fontdlgg.h>
 #endif
 
-#define wxUSE_DIRDLGG 0
-
 #if !defined(__WXMSW__) || defined(wxUSE_DIRDLGG) && wxUSE_DIRDLGG
-#include "wx/generic/dirdlgg.h"
+// New wxGenericDirCtrl
+#include "wx/dirctrl.h"
 #endif
 
@@ -58,4 +57,6 @@
 
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+    EVT_BUTTON (wxID_HELP_CONTEXT,                  MyFrame::HelpMessage)
+
     EVT_MENU(DIALOGS_CHOOSE_COLOUR,                 MyFrame::ChooseColour)
     EVT_MENU(DIALOGS_CHOOSE_FONT,                   MyFrame::ChooseFont)
@@ -67,4 +68,5 @@
     EVT_MENU(DIALOGS_SINGLE_CHOICE,                 MyFrame::SingleChoice)
     EVT_MENU(DIALOGS_MULTI_CHOICE,                  MyFrame::MultiChoice)
+    EVT_MENU(DIALOGS_MULTIPLE_CHOICE,               MyFrame::MultipleChoice)
     EVT_MENU(DIALOGS_FILE_OPEN,                     MyFrame::FileOpen)
     EVT_MENU(DIALOGS_FILE_OPEN2,                    MyFrame::FileOpen2)
@@ -150,5 +152,6 @@
   file_menu->Append(DIALOGS_NUM_ENTRY, "&Numeric entry\tCtrl-N");
   file_menu->Append(DIALOGS_SINGLE_CHOICE,  "&Single choice\tCtrl-C");
-  file_menu->Append(DIALOGS_MULTI_CHOICE,  "M&ultiple choice\tCtrl-U");
+  file_menu->Append(DIALOGS_MULTI_CHOICE,  "M&ulti choice\tCtrl-U");
+  file_menu->Append(DIALOGS_MULTIPLE_CHOICE,  "Multiple c&hoice\tCtrl-H");
   file_menu->AppendSeparator();
   file_menu->Append(DIALOGS_TIP,  "&Tip of the day\tCtrl-T");
@@ -323,4 +326,11 @@
 }
 
+void MyFrame::HelpMessage(wxCommandEvent& WXUNUSED(event))
+{
+  wxMessageDialog dialog( NULL, wxT("The help button was pressed"));
+
+  dialog.ShowModal();
+}
+
 void MyFrame::NumericEntry(wxCommandEvent& WXUNUSED(event) )
 {
@@ -423,4 +433,41 @@
     //else: cancelled or nothing selected
 }
+
+
+void MyFrame::MultipleChoice(wxCommandEvent& WXUNUSED(event) )
+{
+    const int iMax = 3;
+    const wxString choices[iMax] =
+    {
+        "&One", "T&wo", "Three"
+    };
+    const bool checks[iMax] =
+    {
+        TRUE, FALSE, TRUE
+    };
+    const bool off[iMax] =
+    {
+        TRUE, TRUE, FALSE
+    };
+    bool result [iMax] ;
+
+
+    wxMultipleChoiceDialog dlg(this, wxT("wxMultipleChioice dialog (Arrays)"), checks, iMax, choices, off);
+    if (wxID_OK == dlg.ShowModal())
+    {
+        wxString msg;
+        dlg.GetSelection (result);
+
+        msg.Printf(wxT("You selected as follows:\n"));
+        for ( size_t n = 0; n < iMax; n++ )
+        {
+            if (result[n]) msg += wxString::Format(wxT("\t%s : TRUE\n"), choices[n].c_str());
+		else msg += wxString::Format(wxT("\t%s : FALSE\n"), choices[n].c_str());
+        }
+        wxLogMessage(msg);
+    }
+    
+}
+
 
 void MyFrame::FileOpen(wxCommandEvent& WXUNUSED(event) )
Index: samples/dialogs/dialogs.h
===================================================================
RCS file: /home/wxcvs/wxWindows/samples/dialogs/dialogs.h,v
retrieving revision 1.22
diff -U2 -r1.22 dialogs.h
--- samples/dialogs/dialogs.h	18 Nov 2001 23:06:43 -0000	1.22
+++ samples/dialogs/dialogs.h	23 Feb 2002 15:18:16 -0000
@@ -62,6 +62,8 @@
     void LogDialog(wxCommandEvent& event);
     void MessageBox(wxCommandEvent& event);
+    void HelpMessage(wxCommandEvent& event);
     void SingleChoice(wxCommandEvent& event);
     void MultiChoice(wxCommandEvent& event);
+    void MultipleChoice(wxCommandEvent& event);
     void TextEntry(wxCommandEvent& event);
     void PasswordEntry(wxCommandEvent& event);
@@ -130,4 +132,5 @@
     DIALOGS_SINGLE_CHOICE,
     DIALOGS_MULTI_CHOICE,
+    DIALOGS_MULTIPLE_CHOICE,
     DIALOGS_TEXT_ENTRY,
     DIALOGS_PASSWORD_ENTRY,
Index: src/generic/choicdgg.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/generic/choicdgg.cpp,v
retrieving revision 1.38
diff -U2 -r1.38 choicdgg.cpp
--- src/generic/choicdgg.cpp	8 Nov 2001 18:47:53 -0000	1.38
+++ src/generic/choicdgg.cpp	23 Feb 2002 15:18:34 -0000
@@ -46,5 +46,9 @@
 #endif
 
+#include <wx/cshelp.h>
+
+
 #include "wx/generic/choicdgg.h"
+#include <wx/checkbox.h>
 
 // ----------------------------------------------------------------------------
@@ -59,8 +63,5 @@
                                   wxTAB_TRAVERSAL)
 #else
-#define wxCHOICEDLG_DIALOG_STYLE (wxDEFAULT_DIALOG_STYLE | \
-                                  wxDIALOG_MODAL |         \
-                                  wxRESIZE_BORDER |        \
-                                  wxTAB_TRAVERSAL)
+#define wxCHOICEDLG_DIALOG_STYLE (wxDEFAULT_DIALOG_STYLE |  wxDIALOG_MODAL | wxRESIZE_BORDER | wxTAB_TRAVERSAL)
 #endif
 
@@ -527,3 +528,188 @@
 }
 
+
+
+// ----------------------------------------------------------------------------
+// wxMultipleChoiceDialog
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxMultipleChoiceDialog, wxDialog)
+
+
+BEGIN_EVENT_TABLE(wxMultipleChoiceDialog, wxDialog)
+EVT_BUTTON(-1, wxMultipleChoiceDialog::OnButton)
+END_EVENT_TABLE()                               
+
+
+wxMultipleChoiceDialog::wxMultipleChoiceDialog (wxWindow *parent,
+                const wxString & caption,
+                wxArrayInt & SetChecked,
+                int n,
+                const wxArrayString& choices,
+                wxArrayInt * SetEnabled /* = NULL*/,
+                long style /*= wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER */)
+{
+
+    int nCount ;
+
+    nCount = choices.GetCount();
+    wxString * newchoices = new wxString[nCount];
+    for ( int i = 0; i < nCount; i++ )
+    {
+        newchoices[i] = choices.Item(i);
+    }
+
+    nCount = SetChecked.GetCount();
+    bool * newSetChecked = new bool [nCount];
+    for ( int i = 0; i < nCount; i++ )
+    {
+        newSetChecked[i] = SetChecked[i];
+    }
+
+    nCount = SetEnabled->GetCount();
+    bool * newSetEnabled = new bool [nCount];
+    for ( int i = 0; i < nCount; i++ )
+    {
+        newSetEnabled[i] = SetEnabled->Item(i);
+    }
+
+    Create (parent, caption, newSetChecked, n, newchoices, newSetEnabled, style ) ;
+
+    delete [] newchoices ;
+    delete [] newSetChecked ;
+    delete [] newSetEnabled ;
+
+}
+
+void wxMultipleChoiceDialog::Create( wxWindow *parent,
+                                const wxString& caption,
+                                const bool * SetChecked,
+                                int n,
+                                const wxString * choices,
+                                const bool * SetEnabled, /*= NULL*/
+                                long style /* = wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER */)
+
+{
+    if ( !wxDialog::Create(parent, -1, caption, wxDefaultPosition, wxDefaultSize,
+                           wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER) )
+             return ;
+
+    m_count = 0;
+    m_topsizer = 0;
+
+    if (n > 0) SetSelection ( SetChecked, n, choices, SetEnabled );
+
+    wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );
+    wxButton * btnOK = new wxButton( this, wxID_OK, wxT("&OK") ) ;
+
+    button_sizer->Add( btnOK, 0, wxALL, 10 );
+    button_sizer->Add( new wxButton( this, wxID_CANCEL, wxT("Cancel") ), 0, wxALL, 10 );
+
+    // Dialog style wxDIALOG_EX_CONTEXTHELP, in MSW may have a ?, but always add the button
+    if (style | wxDIALOG_EX_CONTEXTHELP)
+        button_sizer->Add( new wxButton( this, wxID_HELP_CONTEXT, wxT("&Help") ), 0, wxALL, 10 );
+
+    m_topsizer->Add( button_sizer, 0, wxALIGN_CENTER );
+
+    SetAutoLayout( TRUE );
+    SetSizer( m_topsizer );
+
+    m_topsizer->Fit( this );
+    m_topsizer->SetSizeHints( this );
+
+    btnOK->SetFocus();
+    btnOK->SetDefault();
+}
+
+
+                                 
+void wxMultipleChoiceDialog::SetSelection (const bool * SetChecked, int n, const wxString * choices, const bool * SetEnabled /* = NULL*/)
+{
+    wxCheckBox * pBox ;
+
+    for (int i=0; i < m_count; i++)
+    //delete any existing checkboxes 
+    {        
+        pBox = (wxCheckBox *) FindWindow(i+1);
+        pBox -> Destroy();
+    }
+    m_count = n ;
+    m_checked.Alloc(n) ;
+    m_enabled.Alloc(n) ;
+
+    if (!m_topsizer) m_topsizer = new wxBoxSizer( wxVERTICAL );
+
+    for (int i = 0; i < n ; i ++)
+    {
+        m_checked.Add (SetChecked [i]);
+
+        pBox = new wxCheckBox (this,  i+1, choices[i], wxPoint (10,i*10) );
+        m_topsizer->Add(pBox, 1, wxEXPAND | wxALL, 10 );
+        pBox -> SetValue  ( m_checked [i] ) ;
+        if (SetEnabled != NULL)
+        {
+            m_enabled.Add ( SetEnabled [i] );
+            pBox -> Enable ( m_enabled [i] );
+        }
+        else m_enabled.Add (TRUE);
+    }
+}
+
+
+void wxMultipleChoiceDialog::OnButton(wxCommandEvent& event)
+{
+    int iID = event.GetId() ;
+    if (iID == wxID_HELP_CONTEXT)
+    {
+        //stop dialog closeing
+        event.Skip () ;
+        if (GetParent()) GetParent()->ProcessEvent(event);
+        return ;
+    }
+
+    if (iID == wxID_OK )
+    {
+        wxCheckBox * pBox ;
+        for (long  i= 0; i < m_count; i ++)
+        {
+            pBox = (wxCheckBox *) FindWindow(i+1);
+            m_checked [i] = pBox -> GetValue () ;
+            m_enabled [i] = pBox -> IsEnabled ();
+        }
+    }
+
+    EndModal (iID) ;
+}
+
+
+                                 
+int wxMultipleChoiceDialog::GetSelection (bool * GetChecked, int n /*= -1 */)
+{
+    if ( n != -1 && n < m_count ) m_count = n ;
+    {
+        for (int  i= 0; i < m_count; i ++)
+        {
+            GetChecked [i] = m_checked [i] && m_enabled [i] ;
+        }
+    }
+    return m_count ;
+}
+
+
+int  wxMultipleChoiceDialog::GetSelection (wxArrayInt & GetChecked)
+{
+    {
+        for (int  i= 0; i < m_count; i ++)
+        {
+            GetChecked [i] = m_checked [i] && m_enabled [i] ;
+        }
+    }
+    return m_count ;
+}
+
+bool wxMultipleChoiceDialog::GetSelection (int n)
+{
+    if ( n >= 0  &&  n < m_count ) return m_checked[n]  && m_enabled [n];
+    return FALSE;
+}
 #endif // wxUSE_CHOICEDLG


 	  	 

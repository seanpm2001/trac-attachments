Index: include/wx/calctrl.h
===================================================================
--- include/wx/calctrl.h	(revision 64294)
+++ include/wx/calctrl.h	(working copy)
@@ -349,6 +349,9 @@
     #elif defined(__WXMSW__)
         #define wxHAS_NATIVE_CALENDARCTRL
         #include "wx/msw/calctrl.h"
+    #elif defined(__WXQT__)
+        #define wxHAS_NATIVE_CALENDARCTRL
+        #include "wx/qt/calctrl.h"
     #endif
 #endif // !__WXUNIVERSAL__
 
Index: include/wx/qt/calctrl.h
===================================================================
--- include/wx/qt/calctrl.h	(revision 0)
+++ include/wx/qt/calctrl.h	(revision 0)
@@ -0,0 +1,97 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/qt/calctrl.h
+// Purpose:     wxCalendarCtrl control implementation for wxQt
+// Author:      Kolya Kosenko
+// Created:     2010-05-12
+// RCS-ID:      $Id$
+// Copyright:   (C) 2010 Kolya Kosenko
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_QT_CALCTRL_H_
+#define _WX_QT_CALCTRL_H_
+
+class QCalendarWidget;
+class QColor;
+
+class WXDLLIMPEXP_ADV wxCalendarCtrl : public wxCalendarCtrlBase
+{
+public:
+    wxCalendarCtrl() { Init(); }
+    wxCalendarCtrl(wxWindow *parent,
+                   wxWindowID id,
+                   const wxDateTime& date = wxDefaultDateTime,
+                   const wxPoint& pos = wxDefaultPosition,
+                   const wxSize& size = wxDefaultSize,
+                   long style = wxCAL_SHOW_HOLIDAYS,
+                   const wxString& name = wxCalendarNameStr)
+    {
+        Init();
+        Create(parent, id, date, pos, size, style, name);
+    }
+
+    ~wxCalendarCtrl();
+
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxDateTime& date = wxDefaultDateTime,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize,
+                long style = wxCAL_SHOW_HOLIDAYS,
+                const wxString& name = wxCalendarNameStr);
+
+    virtual bool SetDate(const wxDateTime& date);
+    virtual wxDateTime GetDate() const;
+
+    virtual bool SetDateRange(const wxDateTime& lowerdate = wxDefaultDateTime,
+                              const wxDateTime& upperdate = wxDefaultDateTime);
+    virtual bool GetDateRange(wxDateTime *lowerdate, wxDateTime *upperdate) const;
+
+    virtual bool EnableMonthChange(bool enable = true);
+    virtual void Mark(size_t day, bool mark);
+
+    // holidays colours
+    virtual void SetHoliday(size_t day);
+    virtual void SetHolidayColours(const wxColour& colFg, const wxColour& colBg);
+    virtual const wxColour& GetHolidayColourFg() const { return m_colHolidayFg; }
+    virtual const wxColour& GetHolidayColourBg() const { return m_colHolidayBg; }
+
+    // header colours
+    virtual void SetHeaderColours(const wxColour& colFg, const wxColour& colBg);
+    virtual const wxColour& GetHeaderColourFg() const { return m_colHeaderFg; }
+    virtual const wxColour& GetHeaderColourBg() const { return m_colHeaderBg; }
+
+    // day attributes
+    virtual wxCalendarDateAttr *GetAttr(size_t day) const;
+    virtual void SetAttr(size_t day, wxCalendarDateAttr *attr);
+    virtual void ResetAttr(size_t day) { SetAttr(day, NULL); }
+
+
+    virtual void SetWindowStyleFlag(long style);
+
+    // Temporary stub
+    void SetPosition(const wxPoint& pt);
+
+    bool GenerateAllChangeEvents(const wxDateTime& dateOld)
+        { return wxCalendarCtrlBase::GenerateAllChangeEvents(dateOld); }
+
+protected:
+    virtual void RefreshHolidays();
+
+private:
+    void Init();
+    void UpdateStyle();
+
+    QCalendarWidget *m_qtCalendar;
+    wxColour m_colHeaderFg,
+             m_colHeaderBg,
+             m_colHolidayFg,
+             m_colHolidayBg;
+
+    wxCalendarDateAttr *m_attrs[31];
+
+
+    DECLARE_DYNAMIC_CLASS(wxCalendarCtrl)
+};
+
+#endif // _WX_QT_CALCTRL_H_
Index: src/qt/calctrl.cpp
===================================================================
--- src/qt/calctrl.cpp	(revision 0)
+++ src/qt/calctrl.cpp	(revision 0)
@@ -0,0 +1,338 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/qt/calctrl.cpp
+// Purpose:     wxCalendarCtrl control implementation for wxQt
+// Author:      Kolya Kosenko
+// Created:     2010-05-12
+// RCS-ID:      $Id$
+// Copyright:   (C) 2010 Kolya Kosenko
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_CALENDARCTRL
+
+#include "wx/calctrl.h"
+#include "wx/qt/converter.h"
+
+#include <QtGui/QCalendarWidget>
+#include <QtGui/QTextCharFormat>
+
+class wxQtCalendarCtrl : public QCalendarWidget
+{
+    Q_OBJECT
+
+public:
+    wxQtCalendarCtrl(wxCalendarCtrl *calendar, QWidget *parent)
+        : QCalendarWidget(parent), m_calendar(calendar)
+    {
+        m_date = selectedDate();
+        connect(this, SIGNAL(selectionChanged()), this, SLOT(selectionChanged()));
+        connect(this, SIGNAL(activated(QDate)),   this, SLOT(activated(QDate)));
+    }
+
+private Q_SLOTS:
+    void selectionChanged()
+    {
+        m_calendar->GenerateAllChangeEvents(wxQtConvertDate(m_date));
+        m_date = selectedDate();
+    }
+
+    void activated(const QDate &WXUNUSED(date))
+    {
+        m_calendar->GenerateEvent(wxEVT_CALENDAR_DOUBLECLICKED);
+    }
+
+private:
+    wxCalendarCtrl *m_calendar;
+    QDate m_date;
+};
+
+IMPLEMENT_DYNAMIC_CLASS(wxCalendarCtrl, wxControl)
+
+void wxCalendarCtrl::Init()
+{
+    m_qtCalendar = NULL;
+
+    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
+    {
+        m_attrs[n] = NULL;
+    }
+}
+
+wxCalendarCtrl::~wxCalendarCtrl()
+{
+    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
+    {
+        delete m_attrs[n];
+    }
+}
+
+bool wxCalendarCtrl::Create(wxWindow *parent,
+                            wxWindowID id,
+                            const wxDateTime& date,
+                            const wxPoint& pos,
+                            const wxSize& size,
+                            long style,
+                            const wxString& name)
+{
+    if ( !CreateControl(parent, id, pos, size, style, wxDefaultValidator, name) )
+        return false;
+
+    m_qtCalendar = new wxQtCalendarCtrl(this, parent->GetHandle());
+    m_qtCalendar->resize(m_qtCalendar->sizeHint());
+
+    {
+        // Init holiday colours
+        const QTextCharFormat format = m_qtCalendar->weekdayTextFormat(Qt::Sunday);
+        m_colHolidayFg = format.foreground().color();
+        // Bug in Qt: returned background color is incorrect
+        //m_colHolidayBg = format.background().color();
+    }
+
+    {
+        // synchronize header colours
+        QTextCharFormat format = m_qtCalendar->headerTextFormat();
+
+        bool sync = false;
+
+        if ( m_colHeaderFg.IsOk() )
+            sync = true;
+        else
+            m_colHeaderFg = format.foreground().color();
+
+        if ( m_colHeaderBg.IsOk() )
+            sync = true;
+        else
+            m_colHeaderFg = format.background().color();
+
+        if ( sync )
+            SetHeaderColours(m_colHeaderFg, m_colHeaderBg);
+    }
+
+    UpdateStyle();
+
+    if ( date.IsValid() )
+        SetDate(date);
+
+    return true;
+}
+
+void wxCalendarCtrl::UpdateStyle()
+{
+    if ( !m_qtCalendar )
+        return;
+
+    if ( m_windowStyle & wxCAL_MONDAY_FIRST )
+        m_qtCalendar->setFirstDayOfWeek(Qt::Monday);
+    else // wxCAL_SUNDAY_FIRST
+        m_qtCalendar->setFirstDayOfWeek(Qt::Sunday);
+
+    if ( m_windowStyle & wxCAL_SHOW_WEEK_NUMBERS )
+        m_qtCalendar->setVerticalHeaderFormat(QCalendarWidget::ISOWeekNumbers);
+    else
+        m_qtCalendar->setVerticalHeaderFormat(QCalendarWidget::NoVerticalHeader);
+
+    RefreshHolidays();
+}
+
+void wxCalendarCtrl::SetWindowStyleFlag(long style)
+{
+    const long styleOld = GetWindowStyleFlag();
+
+    wxCalendarCtrlBase::SetWindowStyleFlag(style);
+
+    if ( styleOld != GetWindowStyleFlag() )
+        UpdateStyle();
+}
+
+// Temporary stub
+void wxCalendarCtrl::SetPosition(const wxPoint& pt)
+{
+    m_qtCalendar->move(pt.x, pt.y);
+}
+
+bool wxCalendarCtrl::SetDate(const wxDateTime& date)
+{
+    wxCHECK_MSG( date.IsValid(), false, "invalid date" );
+    if ( !m_qtCalendar )
+        return false;
+
+    m_qtCalendar->setSelectedDate(wxQtConvertDate(date));
+
+    return true;
+}
+
+wxDateTime wxCalendarCtrl::GetDate() const
+{
+    if ( !m_qtCalendar )
+        return wxDateTime();
+
+    return wxQtConvertDate(m_qtCalendar->selectedDate());
+}
+
+bool wxCalendarCtrl::SetDateRange(const wxDateTime& lowerdate,
+                                  const wxDateTime& upperdate)
+{
+    if ( !m_qtCalendar )
+        return false;
+
+    m_qtCalendar->setMinimumDate(wxQtConvertDate(lowerdate));
+    m_qtCalendar->setMaximumDate(wxQtConvertDate(upperdate));
+
+    return true;
+}
+
+bool wxCalendarCtrl::GetDateRange(wxDateTime *lowerdate,
+                                  wxDateTime *upperdate) const
+{
+    if ( !m_qtCalendar )
+        return false;
+
+    if (lowerdate)
+        *lowerdate = wxQtConvertDate(m_qtCalendar->minimumDate());
+    if (upperdate)
+        *upperdate = wxQtConvertDate(m_qtCalendar->maximumDate());
+
+    return true;
+}
+
+// Copied from wxMSW
+bool wxCalendarCtrl::EnableMonthChange(bool enable)
+{
+    if ( !wxCalendarCtrlBase::EnableMonthChange(enable) )
+        return false;
+
+    wxDateTime dtStart, dtEnd;
+    if ( !enable )
+    {
+        dtStart = GetDate();
+        dtStart.SetDay(1);
+
+        dtEnd = dtStart.GetLastMonthDay();
+    }
+    //else: leave them invalid to remove the restriction
+
+    SetDateRange(dtStart, dtEnd);
+
+    return true;
+}
+
+void wxCalendarCtrl::Mark(size_t day, bool mark)
+{
+    wxCHECK_RET( day > 0 && day < 32, "invalid day" );
+
+    if ( !m_qtCalendar )
+        return;
+
+    QDate date = m_qtCalendar->selectedDate();
+    date.setDate(date.year(), date.month(), day);
+
+    QTextCharFormat format = m_qtCalendar->dateTextFormat(date);
+    format.setFontWeight(mark ? QFont::Bold : QFont::Normal);
+    m_qtCalendar->setDateTextFormat(date, format);
+}
+
+void wxCalendarCtrl::SetHoliday(size_t day)
+{
+    wxCHECK_RET( day > 0 && day < 32, "invalid day" );
+
+    if ( !(m_windowStyle & wxCAL_SHOW_HOLIDAYS) )
+        return;
+
+    if ( !m_qtCalendar )
+        return;
+
+    QDate date = m_qtCalendar->selectedDate();
+    date.setDate(date.year(), date.month(), day);
+
+    QTextCharFormat format = m_qtCalendar->dateTextFormat(date);
+    format.setForeground(m_colHolidayFg.GetPixel());
+    m_qtCalendar->setDateTextFormat(date, format);
+}
+
+void wxCalendarCtrl::SetHolidayColours(const wxColour& colFg, const wxColour& colBg)
+{
+    m_colHolidayFg = colFg;
+    m_colHolidayBg = colBg;
+    RefreshHolidays();
+}
+
+void wxCalendarCtrl::RefreshHolidays()
+{
+    if ( !m_qtCalendar )
+        return;
+
+    QTextCharFormat format;
+    if ( m_windowStyle & wxCAL_SHOW_HOLIDAYS )
+    {
+        if ( m_colHolidayFg.IsOk() )
+            format.setForeground(m_colHolidayFg.GetPixel());
+        if ( m_colHolidayBg.IsOk() )
+            format.setBackground(m_colHolidayBg.GetPixel());
+    }
+    else
+    {
+        format.setForeground(m_qtCalendar->weekdayTextFormat(Qt::Monday)
+            .foreground().color());
+        // Bug in Qt: returned background color is incorrect
+        //format.setBackground(m_qtCalendar->weekdayTextFormat(Qt::Monday)
+        //    .background().color());
+    }
+    m_qtCalendar->setWeekdayTextFormat(Qt::Saturday, format);
+    m_qtCalendar->setWeekdayTextFormat(Qt::Sunday,   format);
+}
+
+void wxCalendarCtrl::SetHeaderColours(const wxColour& colFg, const wxColour& colBg)
+{
+    m_colHeaderFg = colFg;
+    m_colHeaderBg = colBg;
+
+    if ( !m_qtCalendar )
+        return;
+
+    QTextCharFormat format = m_qtCalendar->headerTextFormat();
+    if ( m_colHeaderFg.IsOk() )
+        format.setForeground(m_colHeaderFg.GetPixel());
+    if ( m_colHeaderBg.IsOk() )
+        format.setBackground(m_colHeaderBg.GetPixel());
+    m_qtCalendar->setHeaderTextFormat(format);
+}
+
+wxCalendarDateAttr *wxCalendarCtrl::GetAttr(size_t day) const
+{
+    wxCHECK_MSG( day > 0 && day < 32, NULL, wxT("invalid day") );
+
+    return m_attrs[day - 1];
+}
+
+void wxCalendarCtrl::SetAttr(size_t day, wxCalendarDateAttr *attr)
+{
+    wxCHECK_RET( day > 0 && day < 32, wxT("invalid day") );
+
+    delete m_attrs[day - 1];
+    m_attrs[day - 1] = attr;
+
+    QDate date = m_qtCalendar->selectedDate();
+    date.setDate(date.year(), date.month(), day);
+
+    QTextCharFormat format = m_qtCalendar->dateTextFormat(date);
+    if ( attr->HasTextColour() )
+        format.setForeground(attr->GetTextColour().GetPixel());
+    if ( attr->HasBackgroundColour() )
+        format.setBackground(attr->GetBackgroundColour().GetPixel());
+    // wxFont is not implemented yet
+    //if ( attr->HasFont() )
+    //    format.setFont(attr->GetFont().GetQFont());
+    
+    m_qtCalendar->setDateTextFormat(date, format);
+}
+
+#include "calctrl.moc.h"
+
+#endif // wxUSE_CALENDARCTRL
Index: include/wx/qt/converter.h
===================================================================
--- include/wx/qt/converter.h	(revision 64294)
+++ include/wx/qt/converter.h	(working copy)
@@ -1,10 +1,11 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Name:        wx/qt/converter.h
 // Purpose:     Converter utility classes and functions
-// Author:      Peter Most
+// Author:      Peter Most, Kolya Kosenko
 // Created:     02/28/10
 // RCS-ID:      $Id$
 // Copyright:   (c) Peter Most
+//              (c) 2010 Kolya Kosenko
 // Licence:     wxWindows licence
 ///////////////////////////////////////////////////////////////////////////////
 
@@ -27,5 +28,18 @@
 class wxFont;
 class QFont;
 QFont wxQtConvertFont( const wxFont &font );
+
+
+#if wxUSE_DATETIME
+
+class WXDLLIMPEXP_FWD_BASE wxDateTime;
+class QDate;
+
+wxDateTime wxQtConvertDate(const QDate& date);
+QDate wxQtConvertDate(const wxDateTime& date);
+
+#endif // wxUSE_DATETIME
+
+
 #endif // _WX_QT_CONVERTER_H_
 
Index: src/qt/converter.cpp
===================================================================
--- src/qt/converter.cpp	(revision 64294)
+++ src/qt/converter.cpp	(working copy)
@@ -1,8 +1,9 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        src/qt/converter.cpp
-// Author:      Peter Most
+// Author:      Peter Most, Kolya Kosenko
 // Id:          $Id$
 // Copyright:   (c) Peter Most
+//              (c) 2010 Kolya Kosenko
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
@@ -16,6 +17,11 @@
 #include <QtCore/QString>
 #include <QtGui/QFont>
 
+#if wxUSE_DATETIME
+    #include "wx/datetime.h"
+    #include <QtCore/QDate>
+#endif // wxUSE_DATETIME
+
 QRect wxQtConvertRect( const wxRect &rect )
     { return QRect( rect.GetX(), rect.GetY(), rect.GetWidth(), rect.GetHeight() ); }
 
@@ -31,3 +37,27 @@
 
 QFont wxQtConvertFont( const wxFont &font )
     { return QFont(); }
+
+
+#if wxUSE_DATETIME
+
+wxDateTime wxQtConvertDate(const QDate& date)
+{
+    if ( date.isValid() )
+        return wxDateTime(date.day(),
+            static_cast<wxDateTime::Month>(date.month() - 1),
+            date.year(), 0, 0, 0, 0);
+    else
+        return wxDateTime();
+}
+
+QDate wxQtConvertDate(const wxDateTime& date)
+{
+    if ( date.IsValid() )
+        return QDate(date.GetYear(), date.GetMonth() + 1, date.GetDay());
+    else
+        return QDate();
+}
+
+#endif // wxUSE_DATETIME
+
Index: include/wx/qt/colour.h
===================================================================
--- include/wx/qt/colour.h	(revision 64294)
+++ include/wx/qt/colour.h	(working copy)
@@ -1,31 +1,47 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        wx/qt/colour.h
-// Author:      Peter Most
+// Purpose:     wxColour class implementation for wxQt
+// Author:      Kolya Kosenko
+// Created:     2010-05-12
 // RCS-ID:      $Id$
-// Copyright:   Peter Most
+// Copyright:   (C) 2010 Kolya Kosenko
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
 #ifndef _WX_QT_COLOUR_H_
 #define _WX_QT_COLOUR_H_
 
+#include <QtGui/QColor>
+
 class WXDLLIMPEXP_CORE wxColour : public wxColourBase
 {
 public:
     DEFINE_STD_WXCOLOUR_CONSTRUCTORS
-    
-    virtual ChannelType Red() const;
-    virtual ChannelType Green() const;
-    virtual ChannelType Blue() const;
+    wxColour(const QColor& color) : m_qtColor(color) {}
 
-    bool operator != ( const wxColour & ) const;
-    bool operator == ( const wxColour & ) const;
-    
+    virtual bool IsOk() const { return m_qtColor.isValid(); }
+
+    virtual unsigned char Red()   const { return m_qtColor.red();   }
+    virtual unsigned char Green() const { return m_qtColor.green(); }
+    virtual unsigned char Blue()  const { return m_qtColor.blue();  }
+    virtual unsigned char Alpha() const { return m_qtColor.alpha(); }
+
+    bool operator==(const wxColour& color) const
+        { return m_qtColor == color.m_qtColor; }
+    bool operator!=(const wxColour& color) const
+        { return m_qtColor != color.m_qtColor; }
+
+    QColor GetPixel() const { return m_qtColor; };
+
 protected:
-    // void Init();
-    virtual void InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a);
-    
+    virtual void
+    InitRGBA(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
+        { m_qtColor.setRgb(r, g, b, a); }
+
 private:
+    QColor m_qtColor;
+
+    DECLARE_DYNAMIC_CLASS(wxColour)
 };
 
 #endif // _WX_QT_COLOUR_H_
Index: src/qt/colour.cpp
===================================================================
--- src/qt/colour.cpp	(revision 64294)
+++ src/qt/colour.cpp	(working copy)
@@ -1,44 +1,20 @@
 /////////////////////////////////////////////////////////////////////////////
-// Name:        src/qt/colour.cpp
-// Author:      Peter Most
-// Id:          $Id$
-// Copyright:   (c) Peter Most
+// Name:        wx/qt/colour.h
+// Purpose:     wxColour class implementation for wxQt
+// Author:      Kolya Kosenko
+// Created:     2010-05-12
+// RCS-ID:      $Id$
+// Copyright:   (C) 2010 Kolya Kosenko
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
 
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
 #include "wx/colour.h"
 
-wxColour::ChannelType wxColour::Red() const
-{
-    return ChannelType();
-}
-
-wxColour::ChannelType wxColour::Green() const
-{
-    return ChannelType();
-}
-
-wxColour::ChannelType wxColour::Blue() const
-{
-    return ChannelType();
-}
-
-
-bool wxColour::operator != ( const wxColour & ) const
-{
-    return false;
-}
-
-bool wxColour::operator == ( const wxColour & ) const
-{
-    return false;
-}
-
-void wxColour::InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a)
-{
-}
-
-
+IMPLEMENT_DYNAMIC_CLASS(wxColour, wxObject)
Index: build/bakefiles/qtrules.mk
===================================================================
--- build/bakefiles/qtrules.mk	(revision 64294)
+++ build/bakefiles/qtrules.mk	(working copy)
@@ -6,4 +6,10 @@
 
 $(srcdir)/src/qt/%_qt_cpp.moc.cpp: $(srcdir)/src/qt/%_qt.cpp
 	moc $< -o $@
+
+
+$(srcdir)/src/qt/calctrl.moc.h:
+	moc $(srcdir)/src/qt/calctrl.cpp  -DwxUSE_CALENDARCTRL -o $@
+
+$(srcdir)/src/qt/calctrl.cpp: $(srcdir)/src/qt/calctrl.moc.h
     
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 64294)
+++ build/bakefiles/files.bkl	(working copy)
@@ -493,6 +493,7 @@
 
 <set var="ADVANCED_QT_HDR" hints="files">
     wx/generic/animate.h
+    wx/qt/calctrl.h
     wx/qt/dataview.h
     wx/qt/dvrenderer.h
     wx/qt/dvrenderers.h
@@ -501,6 +502,7 @@
 
 <set var="ADVANCED_QT_SRC" hints="files">
     src/generic/animateg.cpp
+    src/qt/calctrl.cpp
     src/qt/dataview.cpp
     src/qt/dvrenderer.cpp
     src/qt/dvrenderers.cpp

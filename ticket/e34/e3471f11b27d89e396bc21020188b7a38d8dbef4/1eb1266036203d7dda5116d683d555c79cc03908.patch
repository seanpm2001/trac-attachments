Index: samples/minimal/minimal.cpp
===================================================================
--- samples/minimal/minimal.cpp	(revision 64294)
+++ samples/minimal/minimal.cpp	(working copy)
@@ -30,6 +30,8 @@
     #include "wx/wx.h"
 #endif
 
+#include "minimal_calctrl.h"
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -124,12 +126,13 @@
     if ( !wxApp::OnInit() )
         return false;
 
+    test_calctrl();
     // create the main application window
-    MyFrame *frame = new MyFrame("Minimal wxWidgets App");
+    //MyFrame *frame = new MyFrame("Minimal wxWidgets App");
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
-    frame->Show(true);
+    //frame->Show(true);
 
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned false here, the
Index: samples/minimal/minimal_calctrl.h
===================================================================
--- samples/minimal/minimal_calctrl.h	(revision 0)
+++ samples/minimal/minimal_calctrl.h	(revision 0)
@@ -0,0 +1,146 @@
+#ifndef SAMPLE_MINIMAL_CALCTRL_H
+#define SAMPLE_MINIMAL_CALCTRL_H
+
+#include "wx/calctrl.h"
+#include "wx/frame.h"
+#include "wx/log.h"
+#if defined(__WXMSW__)
+    #include "wx/generic/calctrlg.h"
+    typedef wxGenericCalendarCtrl wxCalendarCtrlType;
+#else
+    typedef wxCalendarCtrl wxCalendarCtrlType;
+#endif
+
+class TestFrame : public wxFrame
+{
+public:
+    TestFrame();
+
+private:
+    void OnCalendarSelChanged1(wxCalendarEvent& event);
+    void OnCalendarSelChanged2(wxCalendarEvent& event);
+
+    void OnCalendarSelChanged(wxCalendarEvent& event);
+    void OnCalendarPageChanged(wxCalendarEvent& event);
+    void OnCalendarDoubleClicked(wxCalendarEvent& event);
+    void OnCalendarWeekdayClicked(wxCalendarEvent& event);
+    void OnCalendarWeekClicked(wxCalendarEvent& event);
+
+private:
+    void LogEvent(wxCalendarEvent& event, const wxString& name);
+    wxCalendarCtrlType *m_cal1, *m_cal2;
+};
+
+TestFrame::TestFrame() : wxFrame(NULL, wxID_ANY,
+#if defined(__WXQT__)
+    "wxQt"
+#elif defined(__WXGTK__)
+    "wxGTK"
+#endif
+                                 " calendar")
+{
+    m_cal1 = new wxCalendarCtrlType(this, wxID_ANY, wxDefaultDateTime);
+    m_cal1->SetPosition(wxPoint(10, 10));
+    m_cal1->SetDateRange(
+        wxDateTime(1, wxDateTime::Mar, 2010, 0, 0, 0, 0),
+        wxDateTime(29, wxDateTime::May, 2010, 0, 0, 0, 0));
+    wxDateTime minDate, maxDate;
+    m_cal1->GetDateRange(&minDate, &maxDate);
+    wxLogDebug("GetDateRange: %s - %s",
+        minDate.IsValid() ? minDate.Format() : wxString("Invalid"),
+        maxDate.IsValid() ? maxDate.Format() : wxString("Invalid"));
+    m_cal1->Mark(4, true);
+    m_cal1->Mark(5, true);
+    m_cal1->Mark(5, false);
+    m_cal1->SetHoliday(10);
+
+
+    m_cal2 = new wxCalendarCtrlType(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize,
+        wxCAL_MONDAY_FIRST);
+    m_cal2->SetWindowStyleFlag(m_cal2->GetWindowStyleFlag() | wxCAL_SHOW_WEEK_NUMBERS);
+    m_cal2->SetPosition(wxPoint(300, 10));
+
+    m_cal1->Bind(wxEVT_CALENDAR_SEL_CHANGED, &TestFrame::OnCalendarSelChanged1, this);
+    m_cal2->Bind(wxEVT_CALENDAR_SEL_CHANGED, &TestFrame::OnCalendarSelChanged2, this);
+
+    Bind(wxEVT_CALENDAR_SEL_CHANGED,     &TestFrame::OnCalendarSelChanged,     this);
+    Bind(wxEVT_CALENDAR_PAGE_CHANGED,    &TestFrame::OnCalendarPageChanged,    this);
+    Bind(wxEVT_CALENDAR_DOUBLECLICKED,   &TestFrame::OnCalendarDoubleClicked,  this);
+    Bind(wxEVT_CALENDAR_WEEKDAY_CLICKED, &TestFrame::OnCalendarWeekdayClicked, this);
+    Bind(wxEVT_CALENDAR_WEEK_CLICKED,    &TestFrame::OnCalendarWeekClicked,    this);
+
+    SetSize(600, 300);
+}
+
+void TestFrame::OnCalendarSelChanged1(wxCalendarEvent& event)
+{
+    event.Skip();
+    m_cal2->SetDate(event.GetDate() + wxDateSpan::Days(6));
+
+    switch(event.GetDate().GetDay())
+    {
+    case 1:
+        m_cal1->EnableHolidayDisplay(false);
+        break;
+    case 2:
+        m_cal1->EnableHolidayDisplay(true);
+        break;
+    case 3:
+        m_cal1->SetHoliday(6);
+        break;
+    case 4:
+        m_cal1->SetHolidayColours(wxColour(255, 0, 255), wxColour(0, 255, 0));
+        break;
+    case 5:
+        m_cal1->SetHeaderColours(wxColour(255, 255, 0), wxColour(0, 255, 255));
+        break;
+    case 6:
+        m_cal1->SetAttr(7, new wxCalendarDateAttr(wxColour("cyan"), wxColour("blue")));
+        break;
+    }
+}
+
+void TestFrame::OnCalendarSelChanged2(wxCalendarEvent& event)
+{
+    event.Skip();
+}
+
+void TestFrame::OnCalendarSelChanged(wxCalendarEvent& event)
+{
+    LogEvent(event, "OnCalendarSelChanged");
+}
+
+void TestFrame::OnCalendarPageChanged(wxCalendarEvent& event)
+{
+    LogEvent(event, "OnCalendarPageChanged");
+}
+
+void TestFrame::OnCalendarDoubleClicked(wxCalendarEvent& event)
+{
+    LogEvent(event, "OnCalendarDoubleClicked");
+}
+
+void TestFrame::OnCalendarWeekdayClicked(wxCalendarEvent& event)
+{
+    LogEvent(event, "OnCalendarWeekdayClicked");
+}
+
+void TestFrame::OnCalendarWeekClicked(wxCalendarEvent& event)
+{
+    LogEvent(event, "OnCalendarWeekClicked");
+}
+
+void TestFrame::LogEvent(wxCalendarEvent& event, const wxString& name)
+{
+    wxLogDebug("TestFrame::%s, date: %s, week day: %d", name,
+        event.GetDate().Format(), event.GetWeekDay());
+}
+
+
+void test_calctrl()
+{
+    wxFrame *frame = new TestFrame;
+    frame->Show();
+}
+
+#endif // SAMPLE_MINIMAL_CALCTRL_H

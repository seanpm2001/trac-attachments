From a53aaf349c399dd4db2cadaa0b497ef47a466fce Mon Sep 17 00:00:00 2001
From: Artur Wieczorek <artwik@wp.pl>
Date: Sat, 11 Apr 2015 15:53:45 +0200
Subject: Add several file function tests to the test unit.

File names containing ASCII or non-ASCII (Unicode) characters are used in tests wherever it is possible.

diff --git a/tests/file/filefn.cpp b/tests/file/filefn.cpp
index 20ae207..5105ee4 100644
--- a/tests/file/filefn.cpp
+++ b/tests/file/filefn.cpp
@@ -20,6 +20,8 @@
 
 #include "wx/ffile.h"
 #include "wx/filefn.h"
+#include "wx/textfile.h"
+#include "wx/filesys.h"
 
 #include "testfile.h"
 
@@ -31,13 +33,49 @@ class FileFunctionsTestCase : public CppUnit::TestCase
 {
 public:
     FileFunctionsTestCase() { }
+    void setUp();
+    void tearDown();
 
 private:
     CPPUNIT_TEST_SUITE( FileFunctionsTestCase );
+        CPPUNIT_TEST( GetTempFolder );
         CPPUNIT_TEST( CopyFile );
+        CPPUNIT_TEST( CreateFile );
+        CPPUNIT_TEST( FileExists );
+        CPPUNIT_TEST( FindFile );
+        CPPUNIT_TEST( FindFileNext );
+        CPPUNIT_TEST( RemoveFile );
+        CPPUNIT_TEST( RenameFile );
+        CPPUNIT_TEST( ConcatenateFiles );
+        CPPUNIT_TEST( GetCwd );
     CPPUNIT_TEST_SUITE_END();
 
+    void GetTempFolder();
     void CopyFile();
+    void CreateFile();
+    void FileExists();
+    void FindFile();
+    void FindFileNext();
+    void RemoveFile();
+    void RenameFile();
+    void ConcatenateFiles();
+    void GetCwd();
+
+    // Helper methods
+    void CreateFileInt(const wxString& filePath);
+    void FileExistsInt(const wxString& filePath);
+    void FindFileInt(const wxString& filePath);
+    void RemoveFileInt(const wxString& filePath);
+    void RenameFileInt(const wxString& oldFilePath,
+                       const wxString& newFilePath,
+                       bool overwrite, bool withNew);
+    void ConcatFilesInt(const wxString& filePath1,
+                        const wxString& filePath2,
+                        const wxString& destFilePath);
+
+    wxString m_fileNameASCII;
+    wxString m_fileNameNonASCII;
+    wxString m_fileNameWork;
 
     wxDECLARE_NO_COPY_CLASS(FileFunctionsTestCase);
 };
@@ -53,10 +91,51 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( FileFunctionsTestCase, "FileFunctionsTest
 // tests implementation
 // ----------------------------------------------------------------------------
 
+void FileFunctionsTestCase::setUp()
+{
+    // Initialize local data
+
+    wxFileName fn1(wxFileName::GetTempDir(), wxT("wx_file_mask.txt"));
+    m_fileNameASCII = fn1.GetFullPath();
+
+    // This file name is 'wx_file_mask.txt' in Russian.
+    wxFileName fn2(wxFileName::GetTempDir(),
+      wxT("wx_\x043C\x0430\x0441\x043A\x0430_\x0444\x0430\x0438\x043F\x0430.txt"));
+    m_fileNameNonASCII = fn2.GetFullPath();
+
+    wxFileName fn3(wxFileName::GetTempDir(), wxT("wx_test_copy"));
+    m_fileNameWork = fn3.GetFullPath();
+}
+
+void FileFunctionsTestCase::tearDown()
+{
+    // Remove all remaining temporary files
+    if ( wxFileExists(m_fileNameASCII) )
+    {
+        wxRemoveFile(m_fileNameASCII);
+    }
+    if ( wxFileExists(m_fileNameNonASCII) )
+    {
+        wxRemoveFile(m_fileNameNonASCII);
+    }
+    if ( wxFileExists(m_fileNameWork) )
+    {
+        wxRemoveFile(m_fileNameWork);
+    }
+}
+
+void FileFunctionsTestCase::GetTempFolder()
+{
+    // Verify that obtained temporary folder is not empty.
+    wxString tmpDir = wxFileName::GetTempDir();
+
+    CPPUNIT_ASSERT( !tmpDir.IsEmpty() );
+}
+
 void FileFunctionsTestCase::CopyFile()
 {
-    static const wxChar *filename1 = wxT("horse.bmp");
-    static const wxChar *filename2 = wxT("test_copy");
+    const wxString filename1(wxT("horse.bmp"));
+    const wxString& filename2 = m_fileNameWork;
     
     CPPUNIT_ASSERT( wxCopyFile(filename1, filename2) );
 
@@ -75,12 +154,247 @@ void FileFunctionsTestCase::CopyFile()
     CPPUNIT_ASSERT( wxRemoveFile(filename2) );
 }
 
+void FileFunctionsTestCase::CreateFile()
+{
+    // Create file name containing ASCII characters only.
+    CreateFileInt(m_fileNameASCII);
+    // Create file name containing non-ASCII characters.
+    CreateFileInt(m_fileNameNonASCII);
+}
+
+void FileFunctionsTestCase::CreateFileInt(const wxString& filePath)
+{
+    // Create temporary file.
+    wxTextFile file;
+    CPPUNIT_ASSERT( file.Create(filePath) );
+    CPPUNIT_ASSERT( file.Close() );
+
+    wxRemoveFile(filePath);
+}
+
+void FileFunctionsTestCase::FileExists()
+{
+    CPPUNIT_ASSERT( wxFileExists(wxT("horse.png")) );
+    CPPUNIT_ASSERT( !wxFileExists(wxT("horse.___")) );
+
+    // Check file name containing ASCII characters only.
+    FileExistsInt(m_fileNameASCII);
+    // Check file name containing non-ASCII characters.
+    FileExistsInt(m_fileNameNonASCII);
+}
+
+void FileFunctionsTestCase::FileExistsInt(const wxString& filePath)
+{
+    // Create temporary file.
+    wxTextFile file;
+    CPPUNIT_ASSERT( file.Create(filePath) );
+    CPPUNIT_ASSERT( file.Close() );
+
+    // Verify that file exists with 2 methods.
+    CPPUNIT_ASSERT( file.Exists() );
+    CPPUNIT_ASSERT( wxFileExists(filePath) );
+
+    wxRemoveFile(filePath);
+}
+
+void FileFunctionsTestCase::FindFile()
+{
+    // Find file name conatining ASCII characters only.
+    FindFileInt(m_fileNameASCII);
+    // Find file name containing non-ASCII characters.
+    FindFileInt(m_fileNameNonASCII);
+}
+
+void FileFunctionsTestCase::FindFileInt(const wxString& filePath)
+{
+    // Create temporary file.
+    wxTextFile file;
+    CPPUNIT_ASSERT( file.Create(filePath) );
+    CPPUNIT_ASSERT( file.Close() );
+
+    // Check if file can be found (method 1).
+    wxString foundFile = wxFindFirstFile(filePath, wxFILE);
+    CPPUNIT_ASSERT_EQUAL( foundFile, filePath );
+
+    // Check if file can be found (method 2).
+    wxFileSystem fs;
+    wxString furl = fs.FindFirst(filePath, wxFILE);
+    wxFileName fname = wxFileSystem::URLToFileName(furl);
+    foundFile = fname.GetFullPath();
+    CPPUNIT_ASSERT_EQUAL( foundFile, filePath );
+
+    wxRemoveFile(filePath);
+}
+
+void FileFunctionsTestCase::FindFileNext()
+{
+    // Construct file name containging ASCII characters only.
+    const wxString fileMask(wxT("horse.*"));
+
+    // Check using method 1.
+    wxString foundFile1 = wxFindFirstFile(fileMask, wxFILE);
+    wxString foundFile2 = wxFindNextFile();
+    wxFileName fn1(foundFile1);
+    wxFileName fn2(foundFile2);
+    // Full names must be different.
+    CPPUNIT_ASSERT( foundFile1 != foundFile2 );
+    // Base names must be the same.
+    CPPUNIT_ASSERT_EQUAL( fn1.GetName(), fn2.GetName() );
+
+    // Check using method 2.
+    wxFileSystem fs;
+    wxString furl = fs.FindFirst(fileMask, wxFILE);
+    fn1 = wxFileSystem::URLToFileName(furl);
+    foundFile1 = fn1.GetFullPath();
+    furl = fs.FindNext();
+    fn2 = wxFileSystem::URLToFileName(furl);
+    foundFile2 = fn2.GetFullPath();
+    // Full names must be different.
+    CPPUNIT_ASSERT( fn1.GetFullPath() != fn2.GetFullPath() );
+    // Base names must be the same.
+    CPPUNIT_ASSERT_EQUAL( fn1.GetName(), fn2.GetName() );
+}
+
+void FileFunctionsTestCase::RemoveFile()
+{
+    // Create & remove file with name containging ASCII characters only.
+    RemoveFileInt(m_fileNameASCII);
+    // Create & remove file with name containging non-ASCII characters.
+    RemoveFileInt(m_fileNameNonASCII);
+}
+
+void FileFunctionsTestCase::RemoveFileInt(const wxString& filePath)
+{
+    // Create temporary file.
+    wxTextFile file;
+    CPPUNIT_ASSERT( file.Create(filePath) );
+    CPPUNIT_ASSERT( file.Close() );
+
+    CPPUNIT_ASSERT( file.Exists() );
+    CPPUNIT_ASSERT( wxRemoveFile(filePath) );
+    CPPUNIT_ASSERT( !file.Exists() );
+}
+
+void FileFunctionsTestCase::RenameFile()
+{
+    // Verify renaiming file with/without overwriting
+    // when new file already exist/don't exist.
+    RenameFileInt(m_fileNameASCII, m_fileNameNonASCII, false, false);
+    RenameFileInt(m_fileNameASCII, m_fileNameNonASCII, false, true);
+    RenameFileInt(m_fileNameASCII, m_fileNameNonASCII, true, false);
+    RenameFileInt(m_fileNameASCII, m_fileNameNonASCII, true, true);
+    RenameFileInt(m_fileNameNonASCII, m_fileNameASCII, false, false);
+    RenameFileInt(m_fileNameNonASCII, m_fileNameASCII, false, true);
+    RenameFileInt(m_fileNameNonASCII, m_fileNameASCII, true, false);
+    RenameFileInt(m_fileNameNonASCII, m_fileNameASCII, true, true);
+}
+
+void FileFunctionsTestCase::RenameFileInt(
+                       const wxString& oldFilePath,
+                       const wxString& newFilePath,
+                       bool overwrite, bool withNew)
+{
+    // Create temporary source file.
+    wxTextFile file;
+    CPPUNIT_ASSERT( file.Create(oldFilePath) );
+    CPPUNIT_ASSERT( file.Close() );
+
+    if ( withNew )
+    {
+        // Create destination file to test overwriting.
+        wxTextFile file2;
+        CPPUNIT_ASSERT( file2.Create(newFilePath) );
+        CPPUNIT_ASSERT( file2.Close() );
+
+        CPPUNIT_ASSERT( wxFileExists(newFilePath) );
+    }
+    else
+    {
+        // Remove destination file
+        if ( wxFileExists(newFilePath) )
+        {
+            wxRemoveFile(newFilePath);
+        }
+
+        CPPUNIT_ASSERT( !wxFileExists(newFilePath) );
+    }
+
+    CPPUNIT_ASSERT( wxFileExists(oldFilePath) );
+    bool shouldFailed = !overwrite && withNew;
+    if ( shouldFailed )
+    {
+        CPPUNIT_ASSERT( !wxRenameFile(oldFilePath, newFilePath, overwrite));
+        // Verify that file has not been renamed.
+        CPPUNIT_ASSERT( wxFileExists(oldFilePath) );
+        CPPUNIT_ASSERT( wxFileExists(newFilePath) );
+
+        // Cleanup.
+        wxRemoveFile(oldFilePath);
+    }
+    else
+    {
+        CPPUNIT_ASSERT( wxRenameFile(oldFilePath, newFilePath, overwrite) );
+        // Verify that file has been renamed.
+        CPPUNIT_ASSERT( !wxFileExists(oldFilePath) );
+        CPPUNIT_ASSERT( wxFileExists(newFilePath) );
+    }
+
+    // Cleanup.
+    wxRemoveFile(newFilePath);
+}
+
+void FileFunctionsTestCase::ConcatenateFiles()
+{
+    ConcatFilesInt(m_fileNameASCII, m_fileNameNonASCII, m_fileNameWork);
+    ConcatFilesInt(m_fileNameNonASCII, m_fileNameASCII, m_fileNameWork);
+}
+
+void FileFunctionsTestCase::ConcatFilesInt(
+                        const wxString& filePath1,
+                        const wxString& filePath2,
+                        const wxString& destFilePath)
+{
+    // Prepare source data
+    wxFFile f1(filePath1, wxT("wb")),
+            f2(filePath2, wxT("wb"));
+    CPPUNIT_ASSERT( f1.IsOpened() && f2.IsOpened() );
+
+    wxString s1(wxT("1234567890"));
+    wxString s2(wxT("abcdefghij"));
+    CPPUNIT_ASSERT( f1.Write(s1) );
+    CPPUNIT_ASSERT( f2.Write(s2) );
+
+    CPPUNIT_ASSERT( f1.Close() && f2.Close() );
+
+    // Concatenate source files
+    CPPUNIT_ASSERT( wxConcatFiles(filePath1, filePath2, destFilePath) );
+
+    // Verify content of destination file
+    CPPUNIT_ASSERT( wxFileExists(destFilePath) );
+    wxString sSrc = s1 + s2;
+    wxString s3;
+    wxFFile f3(destFilePath, wxT("rb"));
+    CPPUNIT_ASSERT( f3.ReadAll(&s3) );
+    CPPUNIT_ASSERT( (sSrc.length() == s3.length()) &&
+                    (memcmp(sSrc.c_str(), s3.c_str(), sSrc.length()) == 0) );
+    CPPUNIT_ASSERT( f3.Close() );
+
+    CPPUNIT_ASSERT( wxRemoveFile(filePath1) );
+    CPPUNIT_ASSERT( wxRemoveFile(filePath2) );
+    CPPUNIT_ASSERT( wxRemoveFile(destFilePath) );
+}
+
+void FileFunctionsTestCase::GetCwd()
+{
+    // Verify that obtained working directory is not empty.
+    wxString cwd = wxGetCwd();
+
+    CPPUNIT_ASSERT( !cwd.IsEmpty() );
+}
 
 /*
     TODO: other file functions to test:
 
-bool wxFileExists(const wxString& filename);
-
 bool wxDirExists(const wxString& pathName);
 
 bool wxIsAbsolutePath(const wxString& filename);
@@ -90,21 +404,10 @@ wxString wxFileNameFromPath(const wxString& path);
 
 wxString wxPathOnly(const wxString& path);
 
-wxString wxFindFirstFile(const wxString& spec, int flags = wxFILE);
-wxString wxFindNextFile();
-
 bool wxIsWild(const wxString& pattern);
 
 bool wxMatchWild(const wxString& pattern,  const wxString& text, bool dot_special = true);
 
-bool wxConcatFiles(const wxString& file1, const wxString& file2, const wxString& file3);
-
-bool wxRemoveFile(const wxString& file);
-
-bool wxRenameFile(const wxString& file1, const wxString& file2, bool overwrite = true);
-
-wxString wxGetCwd();
-
 bool wxSetWorkingDirectory(const wxString& d);
 
 bool wxMkdir(const wxString& dir, int perm = wxS_DIR_DEFAULT);
-- 
1.9.5.msysgit.0


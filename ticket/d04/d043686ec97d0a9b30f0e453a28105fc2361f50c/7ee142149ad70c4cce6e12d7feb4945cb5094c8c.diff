--- maskededit.py.svn	2011-01-25 20:17:14.303977544 +0100
+++ maskededit.py	2011-01-25 20:01:40.631630355 +0100
@@ -834,7 +834,7 @@
 
 # jmg 12/9/03 - when we cut ties with Py 2.2 and earlier, this would
 # be a good place to implement the 2.3 logger class
-from wx.tools.dbg import Logger
+##from wx.tools.dbg import Logger
 
 ##dbg = Logger()
 ##dbg(enable=1)
@@ -912,7 +912,7 @@
 ## Note: '|' is not a maskchar, in that it is a mask processing directive, and so
 ## does not appear here.
 ##
-maskchars = ("#","A","a","X","C","N",'*','&')
+maskchars = ("#", "A", "a", "X", "C", "N", '*', '&')
 ansichars = ""
 for i in xrange(32, 256):
     ansichars += chr(i)
@@ -934,23 +934,23 @@
 
 states = "AL,AK,AZ,AR,CA,CO,CT,DE,DC,FL,GA,GU,HI,ID,IL,IN,IA,KS,KY,LA,MA,ME,MD,MI,MN,MS,MO,MT,NE,NV,NH,NJ,NM,NY,NC,ND,OH,OK,OR,PA,PR,RI,SC,SD,TN,TX,UT,VA,VT,VI,WA,WV,WI,WY".split(',')
 
-state_names = ['Alabama','Alaska','Arizona','Arkansas',
-               'California','Colorado','Connecticut',
-               'Delaware','District of Columbia',
-               'Florida','Georgia','Hawaii',
-               'Idaho','Illinois','Indiana','Iowa',
-               'Kansas','Kentucky','Louisiana',
-               'Maine','Maryland','Massachusetts','Michigan',
-               'Minnesota','Mississippi','Missouri','Montana',
-               'Nebraska','Nevada','New Hampshire','New Jersey',
-               'New Mexico','New York','North Carolina','North Dakokta',
-               'Ohio','Oklahoma','Oregon',
-               'Pennsylvania','Puerto Rico','Rhode Island',
-               'South Carolina','South Dakota',
-               'Tennessee','Texas','Utah',
-               'Vermont','Virginia',
-               'Washington','West Virginia',
-               'Wisconsin','Wyoming']
+state_names = ['Alabama', 'Alaska', 'Arizona', 'Arkansas',
+               'California', 'Colorado', 'Connecticut',
+               'Delaware', 'District of Columbia',
+               'Florida', 'Georgia', 'Hawaii',
+               'Idaho', 'Illinois', 'Indiana', 'Iowa',
+               'Kansas', 'Kentucky', 'Louisiana',
+               'Maine', 'Maryland', 'Massachusetts', 'Michigan',
+               'Minnesota', 'Mississippi', 'Missouri', 'Montana',
+               'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',
+               'New Mexico', 'New York', 'North Carolina', 'North Dakokta',
+               'Ohio', 'Oklahoma', 'Oregon',
+               'Pennsylvania', 'Puerto Rico', 'Rhode Island',
+               'South Carolina', 'South Dakota',
+               'Tennessee', 'Texas', 'Utah',
+               'Vermont', 'Virginia',
+               'Washington', 'West Virginia',
+               'Wisconsin', 'Wyoming']
 
 ## ---------- ---------- ---------- ---------- ---------- ---------- ----------
 
@@ -1343,7 +1343,7 @@
 
     # This list contains all parameters that when set at the control level should
     # propagate down to each field:
-    propagating_params = ('fillChar', 'groupChar', 'decimalChar','useParensForNegatives',
+    propagating_params = ('fillChar', 'groupChar', 'decimalChar', 'useParensForNegatives',
                           'compareNoCase', 'emptyInvalid', 'validRequired', 'raiseOnInvalidPaste',
                           'stopFieldChangeIfInvalid')
 
@@ -1660,8 +1660,8 @@
                 right_signpos = -1
 
             intStr = intStr.replace(' ', '')                        # drop extra spaces
-            intStr = string.replace(intStr,self._fillChar,"")       # drop extra fillchars
-            intStr = string.replace(intStr,"-","")                  # drop sign, if any
+            intStr = string.replace(intStr, self._fillChar, "")     # drop extra fillchars
+            intStr = string.replace(intStr, "-", "")                # drop sign, if any
             intStr = string.replace(intStr, self._groupChar, "")    # lose commas/dots
 ####            dbg('intStr:"%s"' % intStr)
             start, end = self._extent
@@ -2403,7 +2403,7 @@
                 # generic control; parse mask to figure out where the fields are:
                 field_index = 0
                 pos = 0
-                i = self._findNextEntry(pos,adjustInsert=False)  # go to 1st entry point:
+                i = self._findNextEntry(pos, adjustInsert=False)  # go to 1st entry point:
                 if i < len(self._mask):   # no editable chars!
                     for j in range(pos, i+1):
                         self._lookupField[j] = field_index
@@ -2699,7 +2699,7 @@
 ##        dbg('mask: "%s"' % self._mask, 'previous mask: "%s"' % self._previous_mask)
         self._previous_mask = mask    # save unexpanded mask for next time
             # Set expanded mask and extent of field -1 to width of entire control:
-        self._ctrl_constraints._SetParameters(mask = self._mask, extent=(0,self._masklength))
+        self._ctrl_constraints._SetParameters(mask = self._mask, extent=(0, self._masklength))
 
         # Go parse mask to determine where each field is, construct field
         # instances as necessary, configure them with those extents, and
@@ -3378,7 +3378,7 @@
 ##        dbg(indent=0)
         return False
 
-    def _OnCtrl_A(self,event=None):
+    def _OnCtrl_A(self, event=None):
         """ Handles ctrl-a keypress in control. Should return False to skip other processing. """
         end = self._goEnd(getPosOnly=True)
         if not event or (isinstance(event, wx.KeyEvent) and event.ShiftDown()):
@@ -3623,7 +3623,7 @@
         return False
 
 
-    def _OnEnd(self,event):
+    def _OnEnd(self, event):
         """ Handles End keypress in control. Should return False to skip other processing. """
 ##        dbg("MaskedEditMixin::_OnEnd", indent=1)
         pos = self._adjustPos(self._GetInsertionPoint(), event.GetKeyCode())
@@ -3691,16 +3691,16 @@
 
 
     def _OnReturn(self, event):
-         """
-         Swallows the return, issues a Navigate event instead, since
-         masked controls are "single line" by defn.
-         """
-##         dbg('MaskedEditMixin::OnReturn')
-         self.Navigate(True)
-         return False
+        """
+        Swallows the return, issues a Navigate event instead, since
+        masked controls are "single line" by defn.
+        """
+##        dbg('MaskedEditMixin::OnReturn')
+        self.Navigate(True)
+        return False
 
 
-    def _OnHome(self,event):
+    def _OnHome(self, event):
         """ Handles Home keypress in control. Should return False to skip other processing."""
 ##        dbg("MaskedEditMixin::_OnHome", indent=1)
         pos = self._adjustPos(self._GetInsertionPoint(), event.GetKeyCode())
@@ -3993,10 +3993,10 @@
         sel_start, sel_to = self._GetSelection()
 
 ####        dbg('adjusted pos:', pos)
-        if chr(key) in ('-','+','(', ')') or (chr(key) == " " and pos == self._signpos):
+        if chr(key) in ('-', '+', '(', ')') or (chr(key) == " " and pos == self._signpos):
             cursign = self._isNeg
 ##            dbg('cursign:', cursign)
-            if chr(key) in ('-','(', ')'):
+            if chr(key) in ('-', '(', ')'):
                 if sel_start <= self._signpos:
                     self._isNeg = True
                 else:
@@ -4060,7 +4060,7 @@
             if self._ctrl_constraints._validRequired and not self.IsValid(newstr):
                 keep_processing = False
                 if not wx.Validator_IsSilent():
-                        wx.Bell()
+                    wx.Bell()
 
         if keep_processing:
             wx.CallAfter(self._SetValue, newstr)
@@ -4070,12 +4070,12 @@
         return keep_processing
 
 
-    def _findNextEntry(self,pos, adjustInsert=True):
+    def _findNextEntry(self, pos, adjustInsert=True):
         """ Find the insertion point for the next valid entry character position."""
 ##        dbg('MaskedEditMixin::_findNextEntry', indent=1)
         if self._isTemplateChar(pos) or pos in self._explicit_field_boundaries:   # if changing fields, pay attn to flag
             adjustInsert = adjustInsert
-        else:                           # else within a field; flag not relevant
+        else:                                                                     # else within a field; flag not relevant
             adjustInsert = False
 
         while self._isTemplateChar(pos) and pos < self._masklength:
@@ -4291,11 +4291,11 @@
     def _adjustKey(self, pos, key):
         """ Apply control formatting to the key (e.g. convert to upper etc). """
         field = self._FindField(pos)
-        if field._forceupper and key in range(97,123):
-            key = ord( chr(key).upper())
+        if field._forceupper and key in range(97, 123):
+            key = ord(chr(key).upper())
 
-        if field._forcelower and key in range(65,90):
-            key = ord( chr(key).lower())
+        if field._forcelower and key in range(65, 90):
+            key = ord(chr(key).lower())
 
         return key
 
@@ -4396,7 +4396,7 @@
         'Fixes' an floating point control. Collapses spaces, right-justifies, etc.
         """
 ##        dbg('MaskedEditMixin::_adjustFloat, candidate = "%s"' % candidate, indent=1)
-        lenInt,lenFraction  = [len(s) for s in self._mask.split('.')]  ## Get integer, fraction lengths
+        lenInt, lenFraction  = [len(s) for s in self._mask.split('.')]  ## Get integer, fraction lengths
 
         if candidate is None: value = self._GetValue()
         else: value = candidate
@@ -4495,7 +4495,7 @@
             year_field = 2
 
 ##        dbg('getYear: "%s"' % _getYear(text, self._datestyle))
-        year    = string.replace( _getYear( text, self._datestyle),self._fields[year_field]._fillChar,"")  # drop extra fillChars
+        year    = string.replace( _getYear( text, self._datestyle), self._fields[year_field]._fillChar,"")  # drop extra fillChars
         month   = _getMonth( text, self._datestyle)
         day     = _getDay( text, self._datestyle)
 ##        dbg('self._datestyle:', self._datestyle, 'year:', year, 'Month', month, 'day:', day)
@@ -4562,7 +4562,7 @@
         if i == 0:
             pos = self._goHome(getPosOnly=True)
         else:
-            pos = min(i,self._masklength)
+            pos = min(i, self._masklength)
 
         field = self._FindField(pos)
         start, end = field._extent
@@ -4588,7 +4588,7 @@
         if getPosOnly:
             return pos
         else:
-            self._SetInsertionPoint(max(i,0))
+            self._SetInsertionPoint(max(i, 0))
 
 
 
@@ -4622,7 +4622,7 @@
             return False
 
 
-    def _isTemplateChar(self,Pos):
+    def _isTemplateChar(self, Pos):
         """ Returns True if the char at position pos is a template character (e.g. -not- NCXaA#)
         """
         if Pos < self._masklength:
@@ -4763,7 +4763,7 @@
             fc = self._foregroundColour
 
         if hasattr(fc, '_name'):
-            c =fc._name
+            c = fc._name
         else:
             c = fc
 ##        dbg('setting foreground to', c)
@@ -4779,7 +4779,7 @@
 ##            dbg('invalid')
             bc = self._invalidBackgroundColour
         if hasattr(bc, '_name'):
-            c =bc._name
+            c = bc._name
         else:
             c = bc
 ##        dbg('setting background to', c)
@@ -5283,7 +5283,7 @@
             return newtext, newpos
 
 
-    def _OnFocus(self,event):
+    def _OnFocus(self, event):
         """
         This event handler is currently necessary to work around new default
         behavior as of wxPython2.3.3;
@@ -5475,7 +5475,7 @@
                 month -= 1
                 try:
 ##                    dbg("trying to create date from values day=%d, month=%d, year=%d" % (day,month,year))
-                    dateHandler = wx.DateTimeFromDMY(day,month,year)
+                    dateHandler = wx.DateTimeFromDMY(day, month, year)
 ##                    dbg("succeeded")
                     dateOk = True
                 except:
@@ -5531,7 +5531,7 @@
         return valid
 
 
-    def _OnKillFocus(self,event):
+    def _OnKillFocus(self, event):
         """ Handler for EVT_KILL_FOCUS event.
         """
 ##        dbg('MaskedEditMixin::_OnKillFocus', 'isDate=',self._isDate, indent=1)
@@ -5620,7 +5620,7 @@
 ##        dbg(indent=0)
 
 
-    def _Keypress(self,key):
+    def _Keypress(self, key):
         """ Method provided to override OnChar routine. Return False to force
             a skip of the 'normal' OnChar process. Called before class OnChar.
         """
@@ -5940,7 +5940,7 @@
 
             new_text = text[:sel_start] + replacement_text + text[replace_to:]
             if new_text:
-                new_text = string.ljust(new_text,self._masklength)
+                new_text = string.ljust(new_text, self._masklength)
             if signed:
                 new_text, signpos, right_signpos = self._getSignedValue(candidate=new_text)
                 if new_text:
@@ -5994,7 +5994,7 @@
             length = len(value)     # (both are same length in masked control)
 
             while( value[:i] == prev[:i] ):
-                    i += 1
+                i += 1
             sel_start = i - 1
 
 
@@ -6375,7 +6375,7 @@
 ## ---------- ---------- ---------- ---------- ---------- ---------- ----------
 ## these are helper subroutines:
 
-def _movetofloat( origvalue, fmtstring, neg, addseparators=False, sepchar = ',',fillchar=' '):
+def _movetofloat( origvalue, fmtstring, neg, addseparators=False, sepchar=',', fillchar=' '):
     """ addseparators = add separator character every three numerals if True
     """
     fmt0 = fmtstring.split('.')
@@ -6385,7 +6385,7 @@
     ret  = fillchar * (len(fmt1)-len(val)) + val + "." + "0" * len(fmt2)
     if neg:
         ret = '-' + ret[1:]
-    return (ret,len(fmt1))
+    return (ret, len(fmt1))
 
 
 def _isDateType( fmtstring ):
@@ -6405,8 +6405,9 @@
                  "^##/CCC/##$",
                  "^##.CCC.## ",)
     reString  = "|".join(dateMasks)
-    filter = re.compile( reString)
-    if re.match(filter,fmtstring): return True
+    filter = re.compile(reString)
+    if re.match(filter, fmtstring):
+        return True
     return False
 
 def _isTimeType( fmtstring ):
@@ -6414,20 +6415,23 @@
         time format.
     """
     reTimeMask = "^##:##(:##)?( (AM|PM))?"
-    filter = re.compile( reTimeMask )
-    if re.match(filter,fmtstring): return True
+    filter = re.compile(reTimeMask )
+    if re.match(filter, fmtstring):
+        return True
     return False
 
 
 def _isFloatingPoint( fmtstring):
     filter = re.compile("[ ]?[#]+\.[#]+\n")
-    if re.match(filter,fmtstring+"\n"): return True
+    if re.match(filter, fmtstring+"\n"):
+        return True
     return False
 
 
 def _isInteger( fmtstring ):
     filter = re.compile("[#]+\n")
-    if re.match(filter,fmtstring+"\n"): return True
+    if re.match(filter, fmtstring+"\n"):
+        return True
     return False
 
 
@@ -6440,17 +6444,17 @@
     dateSep = (('/' in clip) * '/') + (('-' in clip) * '-') + (('.' in clip) * '.')
     slices  = clip.split(dateSep)
     if dateFmt == "MDY":
-        y,m,d = (slices[2],slices[0],slices[1])  ## year, month, date parts
+        y, m, d = (slices[2], slices[0], slices[1])  ## year, month, date parts
     elif dateFmt == "DMY":
-        y,m,d = (slices[2],slices[1],slices[0])  ## year, month, date parts
+        y, m, d = (slices[2], slices[1], slices[0])  ## year, month, date parts
     elif dateFmt == "YMD":
-        y,m,d = (slices[0],slices[1],slices[2])  ## year, month, date parts
+        y, m, d = (slices[0], slices[1], slices[2])  ## year, month, date parts
     else:
-        y,m,d = None, None, None
+        y, m, d = None, None, None
     if not y:
         return None
     else:
-        return y,m,d
+        return y, m, d
 
 
 def _getDateSepChar(dateStr):
@@ -6462,273 +6466,273 @@
 def _makeDate( year, month, day, dateFmt, dateStr):
     sep    = _getDateSepChar( dateStr)
     if dateFmt == "MDY":
-        return "%s%s%s%s%s" % (month,sep,day,sep,year)  ## year, month, date parts
+        return "%s%s%s%s%s" % (month, sep, day, sep, year)  ## year, month, date parts
     elif dateFmt == "DMY":
-        return "%s%s%s%s%s" % (day,sep,month,sep,year)  ## year, month, date parts
+        return "%s%s%s%s%s" % (day, sep, month, sep, year)  ## year, month, date parts
     elif dateFmt == "YMD":
-        return "%s%s%s%s%s" % (year,sep,month,sep,day)  ## year, month, date parts
+        return "%s%s%s%s%s" % (year, sep, month, sep, day)  ## year, month, date parts
     else:
         return None
 
 
-def _getYear(dateStr,dateFmt):
-    parts = _getDateParts( dateStr, dateFmt)
+def _getYear(dateStr, dateFmt):
+    parts = _getDateParts(dateStr, dateFmt)
     return parts[0]
 
-def _getMonth(dateStr,dateFmt):
-    parts = _getDateParts( dateStr, dateFmt)
+def _getMonth(dateStr, dateFmt):
+    parts = _getDateParts(dateStr, dateFmt)
     return parts[1]
 
-def _getDay(dateStr,dateFmt):
-    parts = _getDateParts( dateStr, dateFmt)
+def _getDay(dateStr, dateFmt):
+    parts = _getDateParts(dateStr, dateFmt)
     return parts[2]
 
 ## ---------- ---------- ---------- ---------- ---------- ---------- ----------
 class __test(wx.PySimpleApp):
-        def OnInit(self):
-            from wx.lib.rcsizer import RowColSizer
-            self.frame = wx.Frame( None, -1, "MaskedEditMixin 0.0.7 Demo Page #1", size = (700,600))
-            self.panel = wx.Panel( self.frame, -1)
-            self.sizer = RowColSizer()
-            self.labels = []
-            self.editList  = []
-            rowcount    = 4
-
-            id, id1 = wx.NewId(), wx.NewId()
-            self.command1  = wx.Button( self.panel, id, "&Close" )
-            self.command2  = wx.Button( self.panel, id1, "&AutoFormats" )
-            self.sizer.Add(self.command1, row=0, col=0, flag=wx.ALL, border = 5)
-            self.sizer.Add(self.command2, row=0, col=1, colspan=2, flag=wx.ALL, border = 5)
-            self.panel.Bind(wx.EVT_BUTTON, self.onClick, self.command1 )
-##            self.panel.SetDefaultItem(self.command1 )
-            self.panel.Bind(wx.EVT_BUTTON, self.onClickPage, self.command2)
-
-            self.check1 = wx.CheckBox( self.panel, -1, "Disallow Empty" )
-            self.check2 = wx.CheckBox( self.panel, -1, "Highlight Empty" )
-            self.sizer.Add( self.check1, row=0,col=3, flag=wx.ALL,border=5 )
-            self.sizer.Add( self.check2, row=0,col=4, flag=wx.ALL,border=5 )
-            self.panel.Bind(wx.EVT_CHECKBOX, self._onCheck1, self.check1 )
-            self.panel.Bind(wx.EVT_CHECKBOX, self._onCheck2, self.check2 )
+    def OnInit(self):
+        from wx.lib.rcsizer import RowColSizer
+        self.frame = wx.Frame(None, -1, "MaskedEditMixin 0.0.7 Demo Page #1", size = (700, 600))
+        self.panel = wx.Panel(self.frame, -1)
+        self.sizer = RowColSizer()
+        self.labels = []
+        self.editList  = []
+        rowcount    = 4
+
+        id, id1 = wx.NewId(), wx.NewId()
+        self.command1  = wx.Button( self.panel, id, "&Close" )
+        self.command2  = wx.Button( self.panel, id1, "&AutoFormats" )
+        self.sizer.Add(self.command1, row=0, col=0, flag=wx.ALL, border = 5)
+        self.sizer.Add(self.command2, row=0, col=1, colspan=2, flag=wx.ALL, border = 5)
+        self.panel.Bind(wx.EVT_BUTTON, self.onClick, self.command1 )
+##        self.panel.SetDefaultItem(self.command1 )
+        self.panel.Bind(wx.EVT_BUTTON, self.onClickPage, self.command2)
+
+        self.check1 = wx.CheckBox(self.panel, -1, "Disallow Empty" )
+        self.check2 = wx.CheckBox(self.panel, -1, "Highlight Empty" )
+        self.sizer.Add(self.check1, row=0, col=3, flag=wx.ALL, border=5 )
+        self.sizer.Add(self.check2, row=0, col=4, flag=wx.ALL, border=5 )
+        self.panel.Bind(wx.EVT_CHECKBOX, self._onCheck1, self.check1 )
+        self.panel.Bind(wx.EVT_CHECKBOX, self._onCheck2, self.check2 )
 
 
-            label = """Press ctrl-s in any field to output the value and plain value. Press ctrl-x to clear and re-set any field.
+        label = """Press ctrl-s in any field to output the value and plain value. Press ctrl-x to clear and re-set any field.
 Note that all controls have been auto-sized by including F in the format code.
 Try entering nonsensical or partial values in validated fields to see what happens (use ctrl-s to test the valid status)."""
-            label2 = "\nNote that the State and Last Name fields are list-limited (Name:Smith,Jones,Williams)."
-
-            self.label1 = wx.StaticText( self.panel, -1, label)
-            self.label2 = wx.StaticText( self.panel, -1, "Description")
-            self.label3 = wx.StaticText( self.panel, -1, "Mask Value")
-            self.label4 = wx.StaticText( self.panel, -1, "Format")
-            self.label5 = wx.StaticText( self.panel, -1, "Reg Expr Val. (opt)")
-            self.label6 = wx.StaticText( self.panel, -1, "MaskedEdit Ctrl")
-            self.label7 = wx.StaticText( self.panel, -1, label2)
-            self.label7.SetForegroundColour("Blue")
-            self.label1.SetForegroundColour("Blue")
-            self.label2.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label3.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label4.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label5.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label6.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-
-            self.sizer.Add( self.label1, row=1,col=0,colspan=7, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label7, row=2,col=0,colspan=7, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label2, row=3,col=0, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label3, row=3,col=1, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label4, row=3,col=2, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label5, row=3,col=3, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label6, row=3,col=4, flag=wx.ALL,border=5)
-
-            # The following list is of the controls for the demo. Feel free to play around with
-            # the options!
-            controls = [
-            #description        mask                    excl format     regexp                              range,list,initial
-           ("Phone No",         "(###) ###-#### x:###", "", 'F!^-R',    "^\(\d\d\d\) \d\d\d-\d\d\d\d",    (),[],''),
-           ("Last Name Only",   "C{14}",                "", 'F {list}', '^[A-Z][a-zA-Z]+',                  (),('Smith','Jones','Williams'),''),
-           ("Full Name",        "C{14}",                "", 'F_',       '^[A-Z][a-zA-Z]+ [A-Z][a-zA-Z]+',   (),[],''),
-           ("Social Sec#",      "###-##-####",          "", 'F',        "\d{3}-\d{2}-\d{4}",                (),[],''),
-           ("U.S. Zip+4",       "#{5}-#{4}",            "", 'F',        "\d{5}-(\s{4}|\d{4})",(),[],''),
-           ("U.S. State (2 char)\n(with default)","AA",                 "", 'F!',       "[A-Z]{2}",                         (),states, 'AZ'),
-           ("Customer No",      "\CAA-###",              "", 'F!',      "C[A-Z]{2}-\d{3}",                   (),[],''),
-           ("Date (MDY) + Time\n(with default)",      "##/##/#### ##:## AM",  'BCDEFGHIJKLMNOQRSTUVWXYZ','DFR!',"",                (),[], r'03/05/2003 12:00 AM'),
-           ("Invoice Total",    "#{9}.##",              "", 'F-R,',     "",                                 (),[], ''),
-           ("Integer (signed)\n(with default)", "#{6}",                 "", 'F-R',      "",                                 (),[], '0     '),
-           ("Integer (unsigned)\n(with default), 1-399", "######",      "", 'F',        "",                                 (1,399),[], '1     '),
-           ("Month selector",   "XXX",                  "", 'F',        "",                                 (),
-                ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],""),
-           ("fraction selector","#/##",                 "", 'F',        "^\d\/\d\d?",                       (),
-                ['2/3', '3/4', '1/2', '1/4', '1/8', '1/16', '1/32', '1/64'], "")
-           ]
+        label2 = "\nNote that the State and Last Name fields are list-limited (Name:Smith,Jones,Williams)."
 
-            for control in controls:
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[0]),row=rowcount, col=0,border=5,flag=wx.ALL)
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[1]),row=rowcount, col=1,border=5, flag=wx.ALL)
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[3]),row=rowcount, col=2,border=5, flag=wx.ALL)
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[4][:20]),row=rowcount, col=3,border=5, flag=wx.ALL)
-
-                if control in controls[:]:#-2]:
-                    newControl  = MaskedTextCtrl( self.panel, -1, "",
-                                                    mask         = control[1],
-                                                    excludeChars = control[2],
-                                                    formatcodes  = control[3],
-                                                    includeChars = "",
-                                                    validRegex   = control[4],
-                                                    validRange   = control[5],
-                                                    choices      = control[6],
-                                                    defaultValue = control[7],
-                                                    demo         = True)
-                    if control[6]: newControl.SetCtrlParameters(choiceRequired = True)
-                else:
-                    newControl = MaskedComboBox(  self.panel, -1, "",
-                                                    choices = control[7],
-                                                    choiceRequired  = True,
-                                                    mask         = control[1],
-                                                    formatcodes  = control[3],
-                                                    excludeChars = control[2],
-                                                    includeChars = "",
-                                                    validRegex   = control[4],
-                                                    validRange   = control[5],
-                                                    demo         = True)
-                self.editList.append( newControl )
-
-                self.sizer.Add( newControl, row=rowcount,col=4,flag=wx.ALL,border=5)
-                rowcount += 1
+        self.label1 = wx.StaticText( self.panel, -1, label)
+        self.label2 = wx.StaticText( self.panel, -1, "Description")
+        self.label3 = wx.StaticText( self.panel, -1, "Mask Value")
+        self.label4 = wx.StaticText( self.panel, -1, "Format")
+        self.label5 = wx.StaticText( self.panel, -1, "Reg Expr Val. (opt)")
+        self.label6 = wx.StaticText( self.panel, -1, "MaskedEdit Ctrl")
+        self.label7 = wx.StaticText( self.panel, -1, label2)
+        self.label7.SetForegroundColour("Blue")
+        self.label1.SetForegroundColour("Blue")
+        self.label2.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label3.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label4.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label5.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label6.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+
+        self.sizer.Add(self.label1, row=1, col=0, colspan=7, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label7, row=2, col=0, colspan=7, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label2, row=3, col=0, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label3, row=3, col=1, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label4, row=3, col=2, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label5, row=3, col=3, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label6, row=3, col=4, flag=wx.ALL, border=5)
+
+        # The following list is of the controls for the demo. Feel free to play around with
+        # the options!
+        controls = [
+        #description        mask                    excl format     regexp                              range,list,initial
+       ("Phone No",         "(###) ###-#### x:###", "", 'F!^-R',    "^\(\d\d\d\) \d\d\d-\d\d\d\d",    (),[],''),
+       ("Last Name Only",   "C{14}",                "", 'F {list}', '^[A-Z][a-zA-Z]+',                  (),('Smith','Jones','Williams'),''),
+       ("Full Name",        "C{14}",                "", 'F_',       '^[A-Z][a-zA-Z]+ [A-Z][a-zA-Z]+',   (),[],''),
+       ("Social Sec#",      "###-##-####",          "", 'F',        "\d{3}-\d{2}-\d{4}",                (),[],''),
+       ("U.S. Zip+4",       "#{5}-#{4}",            "", 'F',        "\d{5}-(\s{4}|\d{4})",(),[],''),
+       ("U.S. State (2 char)\n(with default)","AA",                 "", 'F!',       "[A-Z]{2}",                         (),states, 'AZ'),
+       ("Customer No",      "\CAA-###",              "", 'F!',      "C[A-Z]{2}-\d{3}",                   (),[],''),
+       ("Date (MDY) + Time\n(with default)",      "##/##/#### ##:## AM",  'BCDEFGHIJKLMNOQRSTUVWXYZ','DFR!',"",                (),[], r'03/05/2003 12:00 AM'),
+       ("Invoice Total",    "#{9}.##",              "", 'F-R,',     "",                                 (),[], ''),
+       ("Integer (signed)\n(with default)", "#{6}",                 "", 'F-R',      "",                                 (),[], '0     '),
+       ("Integer (unsigned)\n(with default), 1-399", "######",      "", 'F',        "",                                 (1,399),[], '1     '),
+       ("Month selector",   "XXX",                  "", 'F',        "",                                 (),
+            ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],""),
+       ("fraction selector","#/##",                 "", 'F',        "^\d\/\d\d?",                       (),
+            ['2/3', '3/4', '1/2', '1/4', '1/8', '1/16', '1/32', '1/64'], "")
+       ]
+
+        for control in controls:
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[0]),      row=rowcount, col=0, border=5, flag=wx.ALL)
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[1]),      row=rowcount, col=1, border=5, flag=wx.ALL)
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[3]),      row=rowcount, col=2, border=5, flag=wx.ALL)
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[4][:20]), row=rowcount, col=3, border=5, flag=wx.ALL)
+
+            if control in controls[:]:#-2]:
+                newControl  = MaskedTextCtrl( self.panel, -1, "",
+                                              mask         = control[1],
+                                              excludeChars = control[2],
+                                              formatcodes  = control[3],
+                                              includeChars = "",
+                                              validRegex   = control[4],
+                                              validRange   = control[5],
+                                              choices      = control[6],
+                                              defaultValue = control[7],
+                                              demo         = True)
+                if control[6]: newControl.SetCtrlParameters(choiceRequired = True)
+            else:
+                newControl = MaskedComboBox(  self.panel, -1, "",
+                                              choices = control[7],
+                                              choiceRequired  = True,
+                                              mask         = control[1],
+                                              formatcodes  = control[3],
+                                              excludeChars = control[2],
+                                              includeChars = "",
+                                              validRegex   = control[4],
+                                              validRange   = control[5],
+                                              demo         = True)
+            self.editList.append( newControl )
+
+            self.sizer.Add( newControl, row=rowcount, col=4, flag=wx.ALL, border=5)
+            rowcount += 1
 
-            self.sizer.AddGrowableCol(4)
+        self.sizer.AddGrowableCol(4)
 
-            self.panel.SetSizer(self.sizer)
-            self.panel.SetAutoLayout(1)
+        self.panel.SetSizer(self.sizer)
+        self.panel.SetAutoLayout(1)
 
-            self.frame.Show(1)
-            self.MainLoop()
+        self.frame.Show(1)
+        self.MainLoop()
 
-            return True
+        return True
 
-        def onClick(self, event):
-            self.frame.Close()
+    def onClick(self, event):
+        self.frame.Close()
 
-        def onClickPage(self, event):
-            self.page2 = __test2(self.frame,-1,"")
-            self.page2.Show(True)
-
-        def _onCheck1(self,event):
-            """ Set required value on/off """
-            value = event.IsChecked()
-            if value:
-                for control in self.editList:
-                    control.SetCtrlParameters(emptyInvalid=True)
-                    control.Refresh()
-            else:
-                for control in self.editList:
-                    control.SetCtrlParameters(emptyInvalid=False)
-                    control.Refresh()
-            self.panel.Refresh()
-
-        def _onCheck2(self,event):
-            """ Highlight empty values"""
-            value = event.IsChecked()
-            if value:
-                for control in self.editList:
-                    control.SetCtrlParameters( emptyBackgroundColour = 'Aquamarine')
-                    control.Refresh()
-            else:
-                for control in self.editList:
-                    control.SetCtrlParameters( emptyBackgroundColour = 'White')
-                    control.Refresh()
-            self.panel.Refresh()
+    def onClickPage(self, event):
+        self.page2 = __test2(self.frame, -1, "")
+        self.page2.Show(True)
+
+    def _onCheck1(self, event):
+        """ Set required value on/off """
+        value = event.IsChecked()
+        if value:
+            for control in self.editList:
+                control.SetCtrlParameters(emptyInvalid=True)
+                control.Refresh()
+        else:
+            for control in self.editList:
+                control.SetCtrlParameters(emptyInvalid=False)
+                control.Refresh()
+        self.panel.Refresh()
+
+    def _onCheck2(self, event):
+        """ Highlight empty values"""
+        value = event.IsChecked()
+        if value:
+            for control in self.editList:
+                control.SetCtrlParameters( emptyBackgroundColour = 'Aquamarine')
+                control.Refresh()
+        else:
+            for control in self.editList:
+                control.SetCtrlParameters( emptyBackgroundColour = 'White')
+                control.Refresh()
+        self.panel.Refresh()
 
 
 ## ---------- ---------- ---------- ---------- ---------- ---------- ----------
 
 class __test2(wx.Frame):
-        def __init__(self, parent, id, caption):
-            wx.Frame.__init__( self, parent, id, "MaskedEdit control 0.0.7 Demo Page #2 -- AutoFormats", size = (550,600))
-            from wx.lib.rcsizer import RowColSizer
-            self.panel = wx.Panel( self, -1)
-            self.sizer = RowColSizer()
-            self.labels = []
-            self.texts  = []
-            rowcount    = 4
+    def __init__(self, parent, id, caption):
+        wx.Frame.__init__(self, parent, id, "MaskedEdit control 0.0.7 Demo Page #2 -- AutoFormats", size = (550, 600))
+        from wx.lib.rcsizer import RowColSizer
+        self.panel = wx.Panel( self, -1)
+        self.sizer = RowColSizer()
+        self.labels = []
+        self.texts  = []
+        rowcount    = 4
 
-            label = """\
+        label = """\
 All these controls have been created by passing a single parameter, the AutoFormat code.
 The class contains an internal dictionary of types and formats (autoformats).
 To see a great example of validations in action, try entering a bad email address, then tab out."""
 
-            self.label1 = wx.StaticText( self.panel, -1, label)
-            self.label2 = wx.StaticText( self.panel, -1, "Description")
-            self.label3 = wx.StaticText( self.panel, -1, "AutoFormat Code")
-            self.label4 = wx.StaticText( self.panel, -1, "MaskedEdit Control")
-            self.label1.SetForegroundColour("Blue")
-            self.label2.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label3.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-            self.label4.SetFont(wx.Font(9,wx.SWISS,wx.NORMAL,wx.BOLD))
-
-            self.sizer.Add( self.label1, row=1,col=0,colspan=3, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label2, row=3,col=0, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label3, row=3,col=1, flag=wx.ALL,border=5)
-            self.sizer.Add( self.label4, row=3,col=2, flag=wx.ALL,border=5)
-
-            id, id1 = wx.NewId(), wx.NewId()
-            self.command1  = wx.Button( self.panel, id, "&Close")
-            self.command2  = wx.Button( self.panel, id1, "&Print Formats")
-            self.panel.Bind(wx.EVT_BUTTON, self.onClick, self.command1)
-            self.panel.SetDefaultItem(self.command1)
-            self.panel.Bind(wx.EVT_BUTTON, self.onClickPrint, self.command2)
-
-            # The following list is of the controls for the demo. Feel free to play around with
-            # the options!
-            controls = [
-           ("Phone No","USPHONEFULLEXT"),
-           ("US Date + Time","USDATETIMEMMDDYYYY/HHMM"),
-           ("US Date MMDDYYYY","USDATEMMDDYYYY/"),
-           ("Time (with seconds)","TIMEHHMMSS"),
-           ("Military Time\n(without seconds)","24HRTIMEHHMM"),
-           ("Social Sec#","USSOCIALSEC"),
-           ("Credit Card","CREDITCARD"),
-           ("Expiration MM/YY","EXPDATEMMYY"),
-           ("Percentage","PERCENT"),
-           ("Person's Age","AGE"),
-           ("US Zip Code","USZIP"),
-           ("US Zip+4","USZIPPLUS4"),
-           ("Email Address","EMAIL"),
+        self.label1 = wx.StaticText(self.panel, -1, label)
+        self.label2 = wx.StaticText(self.panel, -1, "Description")
+        self.label3 = wx.StaticText(self.panel, -1, "AutoFormat Code")
+        self.label4 = wx.StaticText(self.panel, -1, "MaskedEdit Control")
+        self.label1.SetForegroundColour("Blue")
+        self.label2.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label3.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+        self.label4.SetFont(wx.Font(9, wx.SWISS, wx.NORMAL, wx.BOLD))
+
+        self.sizer.Add(self.label1, row=1, col=0, colspan=3, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label2, row=3, col=0, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label3, row=3, col=1, flag=wx.ALL, border=5)
+        self.sizer.Add(self.label4, row=3, col=2, flag=wx.ALL, border=5)
+
+        id, id1 = wx.NewId(), wx.NewId()
+        self.command1  = wx.Button(self.panel, id, "&Close")
+        self.command2  = wx.Button(self.panel, id1, "&Print Formats")
+        self.panel.Bind(wx.EVT_BUTTON, self.onClick, self.command1)
+        self.panel.SetDefaultItem(self.command1)
+        self.panel.Bind(wx.EVT_BUTTON, self.onClickPrint, self.command2)
+
+        # The following list is of the controls for the demo. Feel free to play around with
+        # the options!
+        controls = [
+           ("Phone No", "USPHONEFULLEXT"),
+           ("US Date + Time", "USDATETIMEMMDDYYYY/HHMM"),
+           ("US Date MMDDYYYY", "USDATEMMDDYYYY/"),
+           ("Time (with seconds)", "TIMEHHMMSS"),
+           ("Military Time\n(without seconds)", "24HRTIMEHHMM"),
+           ("Social Sec#", "USSOCIALSEC"),
+           ("Credit Card", "CREDITCARD"),
+           ("Expiration MM/YY", "EXPDATEMMYY"),
+           ("Percentage", "PERCENT"),
+           ("Person's Age", "AGE"),
+           ("US Zip Code", "USZIP"),
+           ("US Zip+4", "USZIPPLUS4"),
+           ("Email Address", "EMAIL"),
            ("IP Address", "(derived control IpAddrCtrl)")
            ]
 
-            for control in controls:
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[0]),row=rowcount, col=0,border=5,flag=wx.ALL)
-                self.sizer.Add( wx.StaticText( self.panel, -1, control[1]),row=rowcount, col=1,border=5, flag=wx.ALL)
-                if control in controls[:-1]:
-                    self.sizer.Add( MaskedTextCtrl( self.panel, -1, "",
-                                                      autoformat  = control[1],
-                                                      demo        = True),
-                                row=rowcount,col=2,flag=wx.ALL,border=5)
-                else:
-                    self.sizer.Add( IpAddrCtrl( self.panel, -1, "", demo=True ),
-                                    row=rowcount,col=2,flag=wx.ALL,border=5)
-                rowcount += 1
-
-            self.sizer.Add(self.command1, row=0, col=0, flag=wx.ALL, border = 5)
-            self.sizer.Add(self.command2, row=0, col=1, flag=wx.ALL, border = 5)
-            self.sizer.AddGrowableCol(3)
-
-            self.panel.SetSizer(self.sizer)
-            self.panel.SetAutoLayout(1)
-
-        def onClick(self, event):
-            self.Close()
-
-        def onClickPrint(self, event):
-            for format in masktags.keys():
-                sep = "+------------------------+"
-                print "%s\n%s  \n  Mask: %s \n  RE Validation string: %s\n" % (sep,format, masktags[format]['mask'], masktags[format]['validRegex'])
+        for control in controls:
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[0]), row=rowcount, col=0, border=5, flag=wx.ALL)
+            self.sizer.Add( wx.StaticText( self.panel, -1, control[1]), row=rowcount, col=1, border=5, flag=wx.ALL)
+            if control in controls[:-1]:
+                self.sizer.Add( MaskedTextCtrl(self.panel, -1, "",
+                                               autoformat  = control[1],
+                                               demo        = True),
+                                row=rowcount, col=2, flag=wx.ALL, border=5)
+            else:
+                self.sizer.Add( IpAddrCtrl( self.panel, -1, "", demo=True ),
+                                row=rowcount, col=2, flag=wx.ALL, border=5)
+            rowcount += 1
+
+        self.sizer.Add(self.command1, row=0, col=0, flag=wx.ALL, border = 5)
+        self.sizer.Add(self.command2, row=0, col=1, flag=wx.ALL, border = 5)
+        self.sizer.AddGrowableCol(3)
+
+        self.panel.SetSizer(self.sizer)
+        self.panel.SetAutoLayout(1)
+
+    def onClick(self, event):
+        self.Close()
+
+    def onClickPrint(self, event):
+        for format in masktags.keys():
+            sep = "+------------------------+"
+            print "%s\n%s  \n  Mask: %s \n  RE Validation string: %s\n" % (sep, format, masktags[format]['mask'], masktags[format]['validRegex'])
 
 ## ---------- ---------- ---------- ---------- ---------- ---------- ----------
 
 if __name__ == "__main__":
     app = __test(False)
 
-__i=0
+__i = 0
 ##
 ## Current Issues:
 ## ===================================

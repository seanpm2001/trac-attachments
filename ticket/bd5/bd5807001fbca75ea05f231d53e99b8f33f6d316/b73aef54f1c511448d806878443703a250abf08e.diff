diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/docs/latex/wx/datistrm.tex wxWindows/docs/latex/wx/datistrm.tex
--- wxWindows.orig/docs/latex/wx/datistrm.tex	Sat Jan 18 01:16:29 2003
+++ wxWindows/docs/latex/wx/datistrm.tex	Sun Jun 15 19:37:35 2003
@@ -79,4 +79,9 @@
 Reads a single byte from the stream.
 
+\func{void}{Read8}{\param{wxUint8 *}{buffer}, \param{size\_t }{size}}
+
+Reads bytes from the stream in a specified buffer. The amount of
+bytes to read is specified by the {\it size} variable.
+
 \membersection{wxDataInputStream::Read16}
 
@@ -85,4 +90,9 @@
 Reads a 16 bit unsigned integer from the stream.
 
+\func{void}{Read16}{\param{wxUint16 *}{buffer}, \param{size\_t }{size}}
+
+Reads 16 bit unsigned integers from the stream in a specified buffer. the
+amount of 16 bit unsigned integer to read is specified by the {\it size} variable.
+
 \membersection{wxDataInputStream::Read32}
 
@@ -91,4 +101,9 @@
 Reads a 32 bit unsigned integer from the stream.
 
+\func{void}{Read32}{\param{wxUint32 *}{buffer}, \param{size\_t }{size}}
+
+Reads 32 bit unsigned integers from the stream in a specified buffer. the amount of
+32 bit unsigned integer to read is specified by the {\it size} variable.
+
 \membersection{wxDataInputStream::Read64}
 
@@ -97,4 +112,9 @@
 Reads a 64 bit unsigned integer from the stream.
 
+\func{void}{Read64}{\param{wxUint64 *}{buffer}, \param{size\_t }{size}}
+
+Reads 64 bit unsigned integers from the stream in a specified buffer. the amount of
+64 bit unsigned integer to read is specified by the {\it size} variable.
+
 \membersection{wxDataInputStream::ReadDouble}
 
@@ -103,4 +123,9 @@
 Reads a double (IEEE encoded) from the stream.
 
+\func{void}{ReadDouble}{\param{double *}{buffer}, \param{size\_t }{size}}
+
+Reads double data (IEEE encoded) from the stream in a specified buffer. the amount of
+double to read is specified by the {\it size} variable.
+
 \membersection{wxDataInputStream::ReadString}\label{wxdatainputstreamreadstring}
 
@@ -117,3 +142,2 @@
 
 See also \helpref{wxDataOutputStream::WriteString}{wxdataoutputstreamwritestring}.
-
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/docs/latex/wx/datostrm.tex wxWindows/docs/latex/wx/datostrm.tex
--- wxWindows.orig/docs/latex/wx/datostrm.tex	Sat Jan 18 01:16:29 2003
+++ wxWindows/docs/latex/wx/datostrm.tex	Sun Jun 15 19:37:50 2003
@@ -61,4 +61,9 @@
 Writes the single byte {\it i8} to the stream.
 
+\func{void}{Write8}{\param{const wxUint8 *}{buffer}, \param{size\_t }{size}}
+
+Writes an array of bytes to the stream. The amount of bytes to write is
+specified with the {\it size} variable.
+
 \membersection{wxDataOutputStream::Write16}
 
@@ -67,4 +72,9 @@
 Writes the 16 bit unsigned integer {\it i16} to the stream.
 
+\func{void}{Write16}{\param{const wxUint16 *}{buffer}, \param{size\_t }{size}}
+
+Writes an array of 16 bit unsigned integer to the stream. The amount of
+16 bit unsigned integer to write is specified with the {\it size} variable.
+
 \membersection{wxDataOutputStream::Write32}
 
@@ -73,4 +83,9 @@
 Writes the 32 bit unsigned integer {\it i32} to the stream.
 
+\func{void}{Write32}{\param{const wxUint32 *}{buffer}, \param{size\_t }{size}}
+
+Writes an array of 32 bit unsigned integer to the stream. The amount of
+32 bit unsigned integer to write is specified with the {\it size} variable.
+
 \membersection{wxDataOutputStream::Write64}
 
@@ -79,4 +94,9 @@
 Writes the 64 bit unsigned integer {\it i64} to the stream.
 
+\func{void}{Write64}{\param{const wxUint64 *}{buffer}, \param{size\_t }{size}}
+
+Writes an array of 64 bit unsigned integer to the stream. The amount of
+64 bit unsigned integer to write is specified with the {\it size} variable.
+
 \membersection{wxDataOutputStream::WriteDouble}
 
@@ -84,4 +104,9 @@
 
 Writes the double {\it f} to the stream using the IEEE format.
+
+\func{void}{WriteDouble}{\param{const double *}{buffer}, \param{size\_t }{size}}
+
+Writes an array of double to the stream. The amount of double to write is
+specified with the {\it size} variable.
 
 \membersection{wxDataOutputStream::WriteString}\label{wxdataoutputstreamwritestring}
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/include/wx/datstrm.h wxWindows/include/wx/datstrm.h
--- wxWindows.orig/include/wx/datstrm.h	Mon Mar 17 11:33:30 2003
+++ wxWindows/include/wx/datstrm.h	Sun Jun 15 19:36:49 2003
@@ -3,5 +3,5 @@
 // Purpose:     Data stream classes
 // Author:      Guilhem Lavaux
-// Modified by:
+// Modified by: Mickael Gilabert
 // Created:     28/06/1998
 // RCS-ID:      $Id: datstrm.h,v 1.26 2003/03/17 10:33:30 JS Exp $
@@ -42,4 +42,10 @@
     wxString ReadString();
 
+    void Read64(wxUint64 *buffer, size_t size);
+    void Read32(wxUint32 *buffer, size_t size);
+    void Read16(wxUint16 *buffer, size_t size);
+    void Read8(wxUint8 *buffer, size_t size);
+    void ReadDouble(double *buffer, size_t size);
+
     wxDataInputStream& operator>>(wxString& s);
     wxDataInputStream& operator>>(wxInt8& c);
@@ -83,4 +89,10 @@
     void WriteDouble(double d);
     void WriteString(const wxString& string);
+
+    void Write64(const wxUint64 *buffer, size_t size);
+    void Write32(const wxUint32 *buffer, size_t size);
+    void Write16(const wxUint16 *buffer, size_t size);
+    void Write8(const wxUint8 *buffer, size_t size);
+    void WriteDouble(const double *buffer, size_t size);
 
     wxDataOutputStream& operator<<(const wxChar *string);
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/src/common/datstrm.cpp wxWindows/src/common/datstrm.cpp
--- wxWindows.orig/src/common/datstrm.cpp	Mon Mar 17 12:28:29 2003
+++ wxWindows/src/common/datstrm.cpp	Sun Jun 15 19:36:24 2003
@@ -3,5 +3,5 @@
 // Purpose:     Data stream classes
 // Author:      Guilhem Lavaux
-// Modified by:
+// Modified by: Mickael Gilabert
 // Created:     28/06/98
 // RCS-ID:      $Id: datstrm.cpp,v 1.38 2003/03/17 11:28:29 JS Exp $
@@ -127,4 +127,83 @@
 }
 
+void wxDataInputStream::Read64(wxUint64 *buffer, size_t size)
+{
+  m_input->Read(buffer, size * 8);
+
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint64 v = wxUINT64_SWAP_ON_LE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+  else
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint64 v = wxUINT64_SWAP_ON_BE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+}
+
+void wxDataInputStream::Read32(wxUint32 *buffer, size_t size)
+{
+  m_input->Read(buffer, size * 4);
+
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint32 v = wxUINT32_SWAP_ON_LE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+else
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint32 v = wxUINT32_SWAP_ON_BE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+}
+
+void wxDataInputStream::Read16(wxUint16 *buffer, size_t size)
+{
+  m_input->Read(buffer, size * 2);
+
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint16 v = wxUINT16_SWAP_ON_LE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+  else
+  {
+    for (wxUint32 i=0; i<size; i++)
+    {
+      wxUint16 v = wxUINT16_SWAP_ON_BE(*buffer);
+      *(buffer++) = v;
+    }
+  }
+}
+
+void wxDataInputStream::Read8(wxUint8 *buffer, size_t size)
+{
+  m_input->Read(buffer, size);
+}
+
+void wxDataInputStream::ReadDouble(double *buffer, size_t size)
+{
+  for (wxUint32 i=0; i<size; i++)
+  {
+    *(buffer++) = ReadDouble();
+  }
+}
+
 wxDataInputStream& wxDataInputStream::operator>>(wxString& s)
 {
@@ -273,4 +352,83 @@
 #endif
   m_output->Write(buf, 10);
+}
+
+void wxDataOutputStream::Write64(const wxUint64 *buffer, size_t size)
+{
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint64 i64 = wxUINT64_SWAP_ON_LE(*buffer);
+      buffer++;
+      m_output->Write(&i64, 8);
+    }
+  }
+  else
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint64 i64 = wxUINT64_SWAP_ON_BE(*buffer);
+      buffer++;
+      m_output->Write(&i64, 8);
+    }
+  }
+}
+
+void wxDataOutputStream::Write32(const wxUint32 *buffer, size_t size)
+{
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint32 i32 = wxUINT32_SWAP_ON_LE(*buffer);
+      buffer++;
+      m_output->Write(&i32, 4);
+    }
+  }
+  else
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint32 i32 = wxUINT32_SWAP_ON_BE(*buffer);
+      buffer++;
+      m_output->Write(&i32, 4);
+    }
+  }
+}
+
+void wxDataOutputStream::Write16(const wxUint16 *buffer, size_t size)
+{
+  if (m_be_order)
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint16 i16 = wxUINT16_SWAP_ON_LE(*buffer);
+      buffer++;
+      m_output->Write(&i16, 2);
+    }
+  }
+  else
+  {
+    for (wxUint32 i=0; i<size ;i++)
+    {
+      wxUint16 i16 = wxUINT16_SWAP_ON_BE(*buffer);
+      buffer++;
+      m_output->Write(&i16, 2);
+    }
+  }
+}
+
+void wxDataOutputStream::Write8(const wxUint8 *buffer, size_t size)
+{
+  m_output->Write(buffer, size);
+}
+
+void wxDataOutputStream::WriteDouble(const double *buffer, size_t size)
+{
+  for (wxUint32 i=0; i<size; i++)
+  {
+    WriteDouble(*(buffer++));
+  }
 }
 

 	  	 

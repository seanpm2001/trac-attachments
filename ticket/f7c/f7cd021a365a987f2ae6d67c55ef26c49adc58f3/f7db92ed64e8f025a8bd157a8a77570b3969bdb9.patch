Index: include/wx/calctrl.h
===================================================================
--- include/wx/calctrl.h	(revision 53633)
+++ include/wx/calctrl.h	(working copy)
@@ -180,9 +180,13 @@
 class WXDLLIMPEXP_ADV wxCalendarCtrlBase : public wxControl
 {
 public:
+    wxCalendarCtrlBase();
+
     // do we allow changing the month/year?
     bool AllowMonthChange() const { return !HasFlag(wxCAL_NO_MONTH_CHANGE); }
 
+    virtual ~wxCalendarCtrlBase();
+
     // get/set the current date
     virtual wxDateTime GetDate() const = 0;
     virtual bool SetDate(const wxDateTime& date) = 0;
@@ -248,7 +252,7 @@
     // some special appearance (which can be customized using SetMark() for the
     // generic version) to the given day
 
-    virtual void Mark(size_t day, bool mark) = 0;
+    virtual void Mark(size_t day, bool mark);
 
     virtual wxCalendarDateAttr *GetAttr(size_t WXUNUSED(day)) const
         { return NULL; }
@@ -264,7 +268,7 @@
 
     // equivalent to changing wxCAL_SHOW_HOLIDAYS flag but should be called
     // instead of just changing it
-    virtual void EnableHolidayDisplay(bool WXUNUSED(display) = true) { }
+    virtual void EnableHolidayDisplay(bool display = true);
 
     // set/get the colours to use for holidays (if they're enabled)
     virtual void SetHolidayColours(const wxColour& WXUNUSED(colFg),
@@ -274,9 +278,8 @@
     virtual const wxColour& GetHolidayColourBg() const { return wxNullColour; }
 
     // mark the given day of the current month as being a holiday
-    virtual void SetHoliday(size_t WXUNUSED(day)) { }
+    virtual void SetHoliday(size_t day);
 
-
     // customizing the colours of the controls
     //
     // most of the methods in this section are only implemented by the native
@@ -309,11 +312,23 @@
         return HandleWindowEvent(event);
     }
 
+    // set the attributes for the holidays if needed
+    void SetHolidayAttrs();
+
+    // reset all holidays
+    void ResetHolidayAttrs();
+
 protected:
     // generate all the events for the selection change from dateOld to current
     // date: SEL_CHANGED, PAGE_CHANGED if necessary and also one of (deprecated)
     // YEAR/MONTH/DAY_CHANGED ones
     void GenerateAllChangeEvents(const wxDateTime& dateOld);
+
+    // the current selection
+    wxDateTime m_date;
+
+    // the attributes for each of the month days
+    wxCalendarDateAttr *m_attrs[31];
 };
 
 // ----------------------------------------------------------------------------
Index: include/wx/generic/calctrlg.h
===================================================================
--- include/wx/generic/calctrlg.h	(revision 53633)
+++ include/wx/generic/calctrlg.h	(working copy)
@@ -84,15 +84,9 @@
     // corresponds to wxCAL_NO_YEAR_CHANGE bit, deprecated, generic only
     void EnableYearChange(bool enable = true);
 
-    // corresponds to wxCAL_SHOW_HOLIDAYS bit, generic only
-    virtual void EnableHolidayDisplay(bool display = true);
-
-
     // customization
     // -------------
 
-    virtual void Mark(size_t day, bool mark);
-
     // all other functions in this section are for generic version only
 
     // header colours are used for painting the weekdays at the top
@@ -142,8 +136,6 @@
 
     virtual void ResetAttr(size_t day) { SetAttr(day, NULL); }
 
-    virtual void SetHoliday(size_t day);
-
     virtual wxCalendarHitTestResult HitTest(const wxPoint& pos,
                                             wxDateTime *date = NULL,
                                             wxDateTime::WeekDay *wd = NULL);
@@ -215,12 +207,6 @@
     // change the date inside the same month/year
     void ChangeDay(const wxDateTime& date);
 
-    // set the attributes for the holidays if needed
-    void SetHolidayAttrs();
-
-    // reset all holidays
-    void ResetHolidayAttrs();
-
     // deprecated
     bool AllowYearChange() const
     {
@@ -262,9 +248,6 @@
     wxStaticText *m_staticYear;
     wxSpinCtrl *m_spinYear;
 
-    // the current selection
-    wxDateTime m_date;
-
     // the date-range
     wxDateTime m_lowdate;
     wxDateTime m_highdate;
@@ -279,9 +262,6 @@
              m_colBackground,
              m_colSurrounding;
 
-    // the attributes for each of the month days
-    wxCalendarDateAttr *m_attrs[31];
-
     // the width and height of one column/row in the calendar
     wxCoord m_widthCol,
             m_heightRow,
Index: include/wx/msw/calctrl.h
===================================================================
--- include/wx/msw/calctrl.h	(revision 53633)
+++ include/wx/msw/calctrl.h	(working copy)
@@ -44,8 +44,6 @@
 
     virtual bool EnableMonthChange(bool enable = true);
 
-    virtual void Mark(size_t day, bool mark);
-
     virtual wxCalendarHitTestResult HitTest(const wxPoint& pos,
                                             wxDateTime *date = NULL,
                                             wxDateTime::WeekDay *wd = NULL);
@@ -72,16 +70,9 @@
     // wxCAL_MONDAY_FIRST flag
     void UpdateFirstDayOfWeek();
 
-
-    // current date, we need to store it instead of simply retrieving it from
-    // the control as needed in order to be able to generate the correct events
-    // from MSWOnNotify()
-    wxDateTime m_date;
-
     // bit field containing the state (marked or not) of all days in the month
     wxUint32 m_marks;
 
-
     DECLARE_DYNAMIC_CLASS(wxCalendarCtrl)
     DECLARE_NO_COPY_CLASS(wxCalendarCtrl)
 };
Index: samples/calendar/calendar.cpp
===================================================================
--- samples/calendar/calendar.cpp	(revision 53633)
+++ samples/calendar/calendar.cpp	(working copy)
@@ -275,7 +275,7 @@
 #ifdef __WXGTK20__
     EVT_UPDATE_UI(Calendar_Cal_Monday, MyFrame::OnUpdateUIGenericOnly)
 #endif
-    EVT_UPDATE_UI(Calendar_Cal_Holidays, MyFrame::OnUpdateUIGenericOnly)
+    //EVT_UPDATE_UI(Calendar_Cal_Holidays, MyFrame::OnUpdateUIGenericOnly)
     EVT_UPDATE_UI(Calendar_Cal_Special, MyFrame::OnUpdateUIGenericOnly)
     EVT_UPDATE_UI(Calendar_Cal_SurroundWeeks, MyFrame::OnUpdateUIGenericOnly)
 END_EVENT_TABLE()
Index: src/common/calctrlcmn.cpp
===================================================================
--- src/common/calctrlcmn.cpp	(revision 53633)
+++ src/common/calctrlcmn.cpp	(working copy)
@@ -47,6 +47,22 @@
 
 wxCalendarDateAttr wxCalendarDateAttr::m_mark(wxCAL_BORDER_SQUARE);
 
+wxCalendarCtrlBase::wxCalendarCtrlBase()
+{
+    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
+    {
+        m_attrs[n] = NULL;
+    }
+}
+
+wxCalendarCtrlBase::~wxCalendarCtrlBase()
+{
+    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
+    {
+        delete m_attrs[n];
+    }
+}
+
 bool wxCalendarCtrlBase::EnableMonthChange(bool enable)
 {
     const long styleOrig = GetWindowStyle();
@@ -78,5 +94,132 @@
         GenerateEvent(wxEVT_CALENDAR_DAY_CHANGED);
 }
 
+void wxCalendarCtrlBase::SetHolidayAttrs()
+{
+    if ( HasFlag(wxCAL_SHOW_HOLIDAYS))
+    {
+        ResetHolidayAttrs();
+
+        wxDateTime::Tm tm = m_date.GetTm();
+        wxDateTime dtStart(1, tm.mon, tm.year),
+                   dtEnd = dtStart.GetLastMonthDay();
+
+        wxDateTimeArray hol;
+        wxDateTimeHolidayAuthority::GetHolidaysInRange(dtStart, dtEnd, hol);
+
+        size_t count = hol.GetCount();
+        for ( size_t n = 0; n < count; n++ )
+        {
+            SetHoliday(hol[n].GetDay());
+        }
+    }
+}
+
+void wxCalendarCtrlBase::ResetHolidayAttrs()
+{
+    for ( size_t day = 0; day < 31; day++ )
+    {
+        if ( m_attrs[day] )
+        {
+            m_attrs[day]->SetHoliday(false);
+        }
+    }
+}
+
+void wxCalendarCtrlBase::EnableHolidayDisplay(bool display)
+{
+    long style = GetWindowStyle();
+    if ( display )
+        style |= wxCAL_SHOW_HOLIDAYS;
+    else
+        style &= ~wxCAL_SHOW_HOLIDAYS;
+
+    SetWindowStyle(style);
+
+    if ( display )
+        SetHolidayAttrs();
+    else
+        ResetHolidayAttrs();
+
+    Refresh();
+}
+
+void wxCalendarCtrlBase::SetHoliday(size_t day)
+{
+    wxCHECK_RET( day > 0 && day < 32, _T("invalid day in SetHoliday") );
+
+    wxCalendarDateAttr *attr = GetAttr(day);
+    if ( !attr )
+    {
+        attr = new wxCalendarDateAttr;
+    }
+
+    attr->SetHoliday(true);
+
+    // can't use SetAttr() because it would delete this pointer
+    m_attrs[day - 1] = attr;
+}
+
+// ----------------------------------------------------------------------------
+// helper functions
+// ----------------------------------------------------------------------------
+
+namespace
+{
+
+// add attributes that are set in attr
+void AddAttr(wxCalendarDateAttr *self, const wxCalendarDateAttr& attr)
+{
+    if (attr.HasTextColour())
+        self->SetTextColour(attr.GetTextColour());
+    if (attr.HasBackgroundColour())
+        self->SetBackgroundColour(attr.GetBackgroundColour());
+    if (attr.HasBorderColour())
+        self->SetBorderColour(attr.GetBorderColour());
+    if (attr.HasFont())
+        self->SetFont(attr.GetFont());
+    if (attr.HasBorder())
+        self->SetBorder(attr.GetBorder());
+    if (attr.IsHoliday())
+        self->SetHoliday(true);
+}
+
+// remove attributes that are set in attr
+void DelAttr(wxCalendarDateAttr *self, const wxCalendarDateAttr &attr)
+{
+    if (attr.HasTextColour())
+        self->SetTextColour(wxNullColour);
+    if (attr.HasBackgroundColour())
+        self->SetBackgroundColour(wxNullColour);
+    if (attr.HasBorderColour())
+        self->SetBorderColour(wxNullColour);
+    if (attr.HasFont())
+        self->SetFont(wxNullFont);
+    if (attr.HasBorder())
+        self->SetBorder(wxCAL_BORDER_NONE);
+    if (attr.IsHoliday())
+        self->SetHoliday(false);
+}
+
+} // anonymous namespace
+
+
+void wxCalendarCtrlBase::Mark(size_t day, bool mark)
+{
+    wxCHECK_RET( day > 0 && day < 32, _T("invalid day in Mark") );
+
+    const wxCalendarDateAttr& m = wxCalendarDateAttr::GetMark();
+    if (mark) {
+        if ( m_attrs[day - 1] )
+            AddAttr(m_attrs[day - 1], m);
+        else
+            SetAttr(day, new wxCalendarDateAttr(m));
+    }
+    else {
+        if ( m_attrs[day - 1] )
+            DelAttr(m_attrs[day - 1], m);
+    }
+}
+
 #endif // wxUSE_CALENDARCTRL
 
Index: src/generic/calctrlg.cpp
===================================================================
--- src/generic/calctrlg.cpp	(revision 53633)
+++ src/generic/calctrlg.cpp	(working copy)
@@ -121,49 +121,6 @@
 // ============================================================================
 
 // ----------------------------------------------------------------------------
-// helper functions
-// ----------------------------------------------------------------------------
-
-namespace
-{
-
-// add attributes that are set in attr
-void AddAttr(wxCalendarDateAttr *self, const wxCalendarDateAttr& attr)
-{
-    if (attr.HasTextColour())
-        self->SetTextColour(attr.GetTextColour());
-    if (attr.HasBackgroundColour())
-        self->SetBackgroundColour(attr.GetBackgroundColour());
-    if (attr.HasBorderColour())
-        self->SetBorderColour(attr.GetBorderColour());
-    if (attr.HasFont())
-        self->SetFont(attr.GetFont());
-    if (attr.HasBorder())
-        self->SetBorder(attr.GetBorder());
-    if (attr.IsHoliday())
-        self->SetHoliday(true);
-}
-
-// remove attributes that are set in attr
-void DelAttr(wxCalendarDateAttr *self, const wxCalendarDateAttr &attr)
-{
-    if (attr.HasTextColour())
-        self->SetTextColour(wxNullColour);
-    if (attr.HasBackgroundColour())
-        self->SetBackgroundColour(wxNullColour);
-    if (attr.HasBorderColour())
-        self->SetBorderColour(wxNullColour);
-    if (attr.HasFont())
-        self->SetFont(wxNullFont);
-    if (attr.HasBorder())
-        self->SetBorder(wxCAL_BORDER_NONE);
-    if (attr.IsHoliday())
-        self->SetHoliday(false);
-}
-
-} // anonymous namespace
-
-// ----------------------------------------------------------------------------
 // wxGenericCalendarCtrl
 // ----------------------------------------------------------------------------
 
@@ -198,11 +155,6 @@
         m_weekdays[wd] = wxDateTime::GetWeekDayName(wd, wxDateTime::Name_Abbr);
     }
 
-    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
-    {
-        m_attrs[n] = NULL;
-    }
-
     InitColours();
 }
 
@@ -274,11 +226,6 @@
 
 wxGenericCalendarCtrl::~wxGenericCalendarCtrl()
 {
-    for ( size_t n = 0; n < WXSIZEOF(m_attrs); n++ )
-    {
-        delete m_attrs[n];
-    }
-
     if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
     {
         delete m_comboMonth;
@@ -1760,89 +1707,6 @@
 // holidays handling
 // ----------------------------------------------------------------------------
 
-void wxGenericCalendarCtrl::EnableHolidayDisplay(bool display)
-{
-    long style = GetWindowStyle();
-    if ( display )
-        style |= wxCAL_SHOW_HOLIDAYS;
-    else
-        style &= ~wxCAL_SHOW_HOLIDAYS;
-
-    SetWindowStyle(style);
-
-    if ( display )
-        SetHolidayAttrs();
-    else
-        ResetHolidayAttrs();
-
-    Refresh();
-}
-
-void wxGenericCalendarCtrl::SetHolidayAttrs()
-{
-    if ( GetWindowStyle() & wxCAL_SHOW_HOLIDAYS )
-    {
-        ResetHolidayAttrs();
-
-        wxDateTime::Tm tm = m_date.GetTm();
-        wxDateTime dtStart(1, tm.mon, tm.year),
-                   dtEnd = dtStart.GetLastMonthDay();
-
-        wxDateTimeArray hol;
-        wxDateTimeHolidayAuthority::GetHolidaysInRange(dtStart, dtEnd, hol);
-
-        size_t count = hol.GetCount();
-        for ( size_t n = 0; n < count; n++ )
-        {
-            SetHoliday(hol[n].GetDay());
-        }
-    }
-}
-
-void wxGenericCalendarCtrl::SetHoliday(size_t day)
-{
-    wxCHECK_RET( day > 0 && day < 32, _T("invalid day in SetHoliday") );
-
-    wxCalendarDateAttr *attr = GetAttr(day);
-    if ( !attr )
-    {
-        attr = new wxCalendarDateAttr;
-    }
-
-    attr->SetHoliday(true);
-
-    // can't use SetAttr() because it would delete this pointer
-    m_attrs[day - 1] = attr;
-}
-
-void wxGenericCalendarCtrl::ResetHolidayAttrs()
-{
-    for ( size_t day = 0; day < 31; day++ )
-    {
-        if ( m_attrs[day] )
-        {
-            m_attrs[day]->SetHoliday(false);
-        }
-    }
-}
-
-void wxGenericCalendarCtrl::Mark(size_t day, bool mark)
-{
-    wxCHECK_RET( day > 0 && day < 32, _T("invalid day in Mark") );
-
-    const wxCalendarDateAttr& m = wxCalendarDateAttr::GetMark();
-    if (mark) {
-        if ( m_attrs[day - 1] )
-            AddAttr(m_attrs[day - 1], m);
-        else
-            SetAttr(day, new wxCalendarDateAttr(m));
-    }
-    else {
-        if ( m_attrs[day - 1] )
-            DelAttr(m_attrs[day - 1], m);
-    }
-}
-
 //static
 wxVisualAttributes
 wxGenericCalendarCtrl::GetClassDefaultAttributes(wxWindowVariant variant)
Index: src/msw/calctrl.cpp
===================================================================
--- src/msw/calctrl.cpp	(revision 53633)
+++ src/msw/calctrl.cpp	(working copy)
@@ -314,6 +314,7 @@
     return true;
 }
 
+/*
 void wxCalendarCtrl::Mark(size_t day, bool mark)
 {
     wxCHECK_RET( day > 0 && day < 32, "invalid day" );
@@ -327,16 +328,58 @@
     // calling Refresh() here is not enough to change the day appearance
     UpdateMarks();
 }
+*/
 
+/*
+static void UpdateWeekends(const SYSTEMTIME& stStart, unsigned long* monthstate, int monthcount)
+{
+    wxDateTime dt;
+    wxMSWDateControls::FromSystemTime(&dt, stStart);
+    dt.SetDay(1);
+    for (int i = 0; i < monthcount; i++)
+    {
+        const wxDateTime::WeekDay day = dt.GetWeekDay();
+        for (int j = 0; j < 31; j++)
+        {
+            switch ((day + j) % 7)
+            {
+                case wxDateTime::WeekDay::Sat:
+                case wxDateTime::WeekDay::Sun:
+                    monthstate[i] |= 1 << j;
+                    break;
+            }
+        }
+        dt.Add(wxDateSpan::Months(1));
+    }
+}
+*/
+
 void wxCalendarCtrl::UpdateMarks()
 {
     MONTHDAYSTATE states[3];
-    const int nMonths = MonthCal_GetMonthRange(GetHwnd(), GMR_DAYSTATE, NULL);
+    //SYSTEMTIME stStart;
+    const int nMonths = MonthCal_GetMonthRange(GetHwnd(), GMR_DAYSTATE, NULL/*&stStart*/);
     wxCHECK_RET( nMonths <= (int)WXSIZEOF(states), "unexpected months range" );
 
-    for ( int i = 0; i < nMonths; i++ )
+    SetHolidayAttrs();
+
+    int i;
+    m_marks = 0;
+    for ( i = 0; i < WXSIZEOF(m_attrs); i++ )
+    {
+        if (m_attrs[i] && m_attrs[i]->IsHoliday()) m_marks |= (1 << i);
+    }
+
+    for ( i = 0; i < nMonths; i++ )
+    {
         states[i] = m_marks;
-
+    }
+/*    
+    if (HasFlag(wxCAL_SHOW_HOLIDAYS))
+    {
+        UpdateWeekends(stStart, states, nMonths);
+    }
+*/
     if ( !MonthCal_SetDayState(GetHwnd(), nMonths, states) )
     {
         wxLogLastError(_T("MonthCal_SetDayState"));
@@ -382,6 +425,12 @@
                 {
                     ds->prgDayState[i] = m_marks;
                 }
+                /*
+                if (HasFlag(wxCAL_SHOW_HOLIDAYS))
+                {
+                    UpdateWeekends(ds->stStart, ds->prgDayState, ds->cDayState);
+                }
+                */
             }
             break;
 

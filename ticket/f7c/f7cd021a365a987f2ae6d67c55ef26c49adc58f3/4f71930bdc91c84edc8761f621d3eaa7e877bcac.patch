Index: src/msw/calctrl.cpp
===================================================================
--- src/msw/calctrl.cpp	(revision 53586)
+++ src/msw/calctrl.cpp	(working copy)
@@ -328,15 +328,44 @@
     UpdateMarks();
 }
 
+static void UpdateWeekends(const SYSTEMTIME& stStart, unsigned long* monthstate, int monthcount)
+{
+    wxDateTime dt;
+    wxMSWDateControls::FromSystemTime(&dt, stStart);
+    dt.SetDay(1);
+    for (int i = 0; i < monthcount; i++)
+    {
+        const wxDateTime::WeekDay day = dt.GetWeekDay();
+        for (int j = 0; j < 31; j++)
+        {
+            switch ((day + j) % 7)
+            {
+                case wxDateTime::WeekDay::Sat:
+                case wxDateTime::WeekDay::Sun:
+                    monthstate[i] |= 1 << j;
+                    break;
+            }
+        }
+        dt.Add(wxDateSpan::Months(1));
+    }
+}
+
 void wxCalendarCtrl::UpdateMarks()
 {
     MONTHDAYSTATE states[3];
-    const int nMonths = MonthCal_GetMonthRange(GetHwnd(), GMR_DAYSTATE, NULL);
+    SYSTEMTIME stStart;
+    const int nMonths = MonthCal_GetMonthRange(GetHwnd(), GMR_DAYSTATE, &stStart);
     wxCHECK_RET( nMonths <= (int)WXSIZEOF(states), "unexpected months range" );
 
     for ( int i = 0; i < nMonths; i++ )
+    {
         states[i] = m_marks;
-
+    }
+    
+    if (HasFlag(wxCAL_SHOW_HOLIDAYS))
+    {
+        UpdateWeekends(stStart, states, nMonths);
+    }
     if ( !MonthCal_SetDayState(GetHwnd(), nMonths, states) )
     {
         wxLogLastError(_T("MonthCal_SetDayState"));
@@ -382,6 +411,10 @@
                 {
                     ds->prgDayState[i] = m_marks;
                 }
+                if (HasFlag(wxCAL_SHOW_HOLIDAYS))
+                {
+                    UpdateWeekends(ds->stStart, ds->prgDayState, ds->cDayState);
+                }
             }
             break;
 

 	  	 

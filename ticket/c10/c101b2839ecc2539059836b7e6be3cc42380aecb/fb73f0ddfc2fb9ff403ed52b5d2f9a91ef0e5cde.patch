Index: wx/lib/agw/ultimatelistctrl.py
===================================================================
--- wx/lib/agw/ultimatelistctrl.py	(revision 63775)
+++ wx/lib/agw/ultimatelistctrl.py	(working copy)
@@ -344,6 +344,7 @@
 # Autosize values for SetColumnWidth
 ULC_AUTOSIZE = wx.LIST_AUTOSIZE
 ULC_AUTOSIZE_USEHEADER = wx.LIST_AUTOSIZE_USEHEADER      # partly supported by generic version
+ULC_AUTOSIZE_FILL = -3
 
 # Flag values for GetItemRect
 ULC_RECT_BOUNDS = wx.LIST_RECT_BOUNDS
@@ -4504,7 +4505,6 @@
         :param `overflow`: ``True`` if the item should overflow into neighboring columns,
          ``False`` otherwise.
         """
-
         # determine if the string can fit inside the current width
         w, h, dummy = dc.GetMultiLineTextExtent(text)
         width = itemRect.width
@@ -5720,7 +5720,11 @@
 
         # the number of lines per page
         self._linesPerPage = 0
-
+        
+        # Automatically resized column - this column expands to fill the width of the window
+        self._resizeColumn = -1
+        self._resizeColMinWidth = None
+        
         # this flag is set when something which should result in the window
         # redrawing happens (i.e. an item was added or deleted, or its appearance
         # changed) and OnPaint() doesn't redraw the window while it is set which
@@ -6127,8 +6131,54 @@
         self._lineFrom = -1
         if self.IsShownOnScreen() and reset:
             self.ResetLineDimensions()
+           
+    # Called on EVT_SIZE to resize the _resizeColumn to fill the width of the window
+    def ResizeColumns(self):
+        """
+        If ``ULC_AUTOSIZE_FILL`` was passed to ULC.SetColumnWidth(col,width) then
+        that column's width will be expanded to fill the window on a resize event.
 
+        Called by UltimateListCtrl.OnSize() when the window is resized.
+        """
 
+        if self._resizeColumn == -1:
+            return
+        
+        numCols = self.GetColumnCount()
+        if numCols == 0: return # Nothing to resize.
+        
+        resizeCol = self._resizeColumn
+
+        if self._resizeColMinWidth == None:
+            self._resizeColMinWidth = self.GetColumnWidth(resizeCol)
+
+        # We're showing the vertical scrollbar -> allow for scrollbar width
+        # NOTE: on GTK, the scrollbar is included in the client size, but on
+        # Windows it is not included
+        listWidth = self.GetClientSize().width
+        if wx.Platform != '__WXMSW__':
+            if self.GetItemCount() > self.GetCountPerPage():
+                scrollWidth = wx.SystemSettings_GetMetric(wx.SYS_VSCROLL_X)
+                listWidth = listWidth - scrollWidth
+
+        totColWidth = 0 # Width of all columns except last one.
+        for col in range(numCols):
+            if col != (resizeCol):
+                totColWidth = totColWidth + self.GetColumnWidth(col)
+
+        resizeColWidth = self.GetColumnWidth(resizeCol)
+
+        if totColWidth + self._resizeColMinWidth > listWidth:
+            # We haven't got the width to show the last column at its minimum
+            # width -> set it to its minimum width and allow the horizontal
+            # scrollbar to show.
+            self.SetColumnWidth(resizeCol, self._resizeColMinWidth)
+            return
+
+        # Resize the last column to take up the remaining available space.
+        self.SetColumnWidth(resizeCol, listWidth - totColWidth)
+
+
     # get the colour to be used for drawing the rules
     def GetRuleColour(self):
         """ Returns the colour to be used for drawing the horizontal and vertical rules. """
@@ -8158,15 +8208,17 @@
         Sets the column width.
 
         :param `width`: can be a width in pixels or ``wx.LIST_AUTOSIZE`` (-1) or
-         ``wx.LIST_AUTOSIZE_USEHEADER`` (-2). ``wx.LIST_AUTOSIZE`` will resize the
-         column to the length of its longest item. ``wx.LIST_AUTOSIZE_USEHEADER``
-         will resize the column to the length of the header (Win32) or 80 pixels
-         (other platforms).
+         ``wx.LIST_AUTOSIZE_USEHEADER`` (-2) or ``ULC_AUTOSIZE_FILL`` (-3). 
+         ``wx.LIST_AUTOSIZE`` will resize the column to the length of its longest
+         item. ``wx.LIST_AUTOSIZE_USEHEADER`` will resize the column to the
+         length of the header (Win32) or 80 pixels (other platforms). 
+         ``ULC_AUTOSIZE_FILL`` will resize the column fill the remaining width
+         of the window.
 
         :note: In small or normal icon view, col must be -1, and the column width
          is set for all columns.
         """
-    
+        
         if col < 0:
             raise Exception("invalid column index")
 
@@ -8186,7 +8238,14 @@
         column = self._columns[col]
         count = self.GetItemCount()
 
-        if width == ULC_AUTOSIZE_USEHEADER:
+        if width == ULC_AUTOSIZE_FILL:
+            
+            width = self.GetColumnWidth(col)
+            if width == 0:
+                width = WIDTH_COL_DEFAULT
+            self._resizeColumn = col
+            
+        elif width == ULC_AUTOSIZE_USEHEADER:
 
             width = self.GetTextLength(column.GetText())
             width += 2*EXTRA_WIDTH
@@ -10659,10 +10718,12 @@
         Sets the column width.
 
         :param `width`: can be a width in pixels or ``wx.LIST_AUTOSIZE`` (-1) or
-         ``wx.LIST_AUTOSIZE_USEHEADER`` (-2). ``wx.LIST_AUTOSIZE`` will resize the
-         column to the length of its longest item. ``wx.LIST_AUTOSIZE_USEHEADER``
-         will resize the column to the length of the header (Win32) or 80 pixels
-         (other platforms).
+         ``wx.LIST_AUTOSIZE_USEHEADER`` (-2) or ``LIST_AUTOSIZE_FILL`` (-3). 
+         ``wx.LIST_AUTOSIZE`` will resize the column to the length of its longest
+         item. ``wx.LIST_AUTOSIZE_USEHEADER`` will resize the column to the
+         length of the header (Win32) or 80 pixels (other platforms). 
+         ``LIST_AUTOSIZE_FILL`` will resize the column fill the remaining width
+         of the window.
 
         :note: In small or normal icon view, col must be -1, and the column width
          is set for all columns.
@@ -11658,8 +11719,12 @@
 
         :param `event`: a `wx.SizeEvent` event to be processed.
         """
-
+        
         if not self.IsShownOnScreen():
+            # We don't have the proper column sizes until we are visible so 
+            # use CallAfter to resize the columns on the first display
+            if self._mainWin:
+                wx.CallAfter(self._mainWin.ResizeColumns)
             return
         
         if not self._mainWin:
@@ -11674,6 +11739,7 @@
 
         self.Layout()
         
+        self._mainWin.ResizeColumns()
         self._mainWin.ResetVisibleLinesRange(True)
         self._mainWin.RecalculatePositions()
         self._mainWin.AdjustScrollbars()
Index: demo/agw/UltimateVirtualDemo.py
===================================================================
--- demo/agw/UltimateVirtualDemo.py	(revision 63775)
+++ demo/agw/UltimateVirtualDemo.py	(working copy)
@@ -57,6 +57,11 @@
         self.SetColumnWidth(1, 175)
         self.SetColumnWidth(2, 175)
 
+        # After setting the column width you can specify that 
+        # this column expands to fill the window. Only one
+        # column may be specified.
+        self.SetColumnWidth(2, ULC.ULC_AUTOSIZE_FILL)
+
         self.SetItemCount(1000000)
 
         self.attr1 = ULC.UltimateListItemAttr()

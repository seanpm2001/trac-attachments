Index: client.cpp
===================================================================
--- client.cpp	(revision 50810)
+++ client.cpp	(working copy)
@@ -139,7 +139,7 @@
 #if wxUSE_URL
   EVT_MENU(CLIENT_TESTURL,  MyFrame::OnTestURL)
 #endif
-  EVT_SOCKET(SOCKET_ID,     MyFrame::OnSocketEvent)
+  EVT_SOCKET(wxID_ANY,     MyFrame::OnSocketEvent)
 END_EVENT_TABLE()
 
 IMPLEMENT_APP(MyApp)
@@ -270,7 +270,7 @@
     _("localhost"));
 
   addr.Hostname(hostname);
-  addr.Service(3000);
+  addr.Service(21);
 
   // Mini-tutorial for Connect() :-)
   // ---------------------------
@@ -323,7 +323,7 @@
 
   m_text->AppendText(_("\nTrying to connect (timeout = 10 sec) ...\n"));
   m_sock->Connect(addr, false);
-  m_sock->WaitOnConnect(10);
+  /*m_sock->WaitOnConnect(10);
 
   if (m_sock->IsConnected())
     m_text->AppendText(_("Succeeded ! Connection established\n"));
@@ -332,139 +332,60 @@
     m_sock->Close();
     m_text->AppendText(_("Failed ! Unable to connect\n"));
     wxMessageBox(_("Can't connect to the specified host"), _("Alert !"));
-  }
+  }*/
 
   UpdateStatusBar();
 }
 
 void MyFrame::OnTest1(wxCommandEvent& WXUNUSED(event))
 {
-  const wxChar *buf1;
-  wxChar       *buf2;
-  unsigned char len;
-
-  // Disable socket menu entries (exception: Close Session)
-  m_busy = true;
-  UpdateStatusBar();
-
-  m_text->AppendText(_("\n=== Test 1 begins ===\n"));
-
-  // Tell the server which test we are running
-  unsigned char c = 0xBE;
-  m_sock->Write(&c, 1);
-
-  // Send some data and read it back. We know the size of the
-  // buffer, so we can specify the exact number of bytes to be
-  // sent or received and use the wxSOCKET_WAITALL flag. Also,
-  // we have disabled menu entries which could interfere with
-  // the test, so we can safely avoid the wxSOCKET_BLOCK flag.
-  //
-  // First we send a byte with the length of the string, then
-  // we send the string itself (do NOT try to send any integral
-  // value larger than a byte "as is" across the network, or
-  // you might be in trouble! Ever heard about big and little
-  // endian computers?)
-
-  m_sock->SetFlags(wxSOCKET_WAITALL);
-
-  buf1 = _("Test string (less than 256 chars!)");
-  len  = (unsigned char)((wxStrlen(buf1) + 1) * sizeof(wxChar));
-  buf2 = new wxChar[wxStrlen(buf1) + 1];
-
-  m_text->AppendText(_("Sending a test buffer to the server ..."));
-  m_sock->Write(&len, 1);
-  m_sock->Write(buf1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-
-  m_text->AppendText(_("Receiving the buffer back from server ..."));
-  m_sock->Read(buf2, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-
-  m_text->AppendText(_("Comparing the two buffers ..."));
-  if (memcmp(buf1, buf2, len) != 0)
+  int i = 18000;
+  wxSocketServer* serv;
+  do
   {
-    m_text->AppendText(_("failed!\n"));
-    m_text->AppendText(_("Test 1 failed !\n"));
+	  wxIPV4address addr;
+	  addr.AnyAddress();
+	  addr.Service(i++);
+	  serv = new wxSocketServer(addr, wxSOCKET_NOWAIT);
   }
-  else
-  {
-    m_text->AppendText(_("done\n"));
-    m_text->AppendText(_("Test 1 passed !\n"));
-  }
-  m_text->AppendText(_("=== Test 1 ends ===\n"));
+  while (serv->IsOk());
 
-  delete[] buf2;
-  m_busy = false;
-  UpdateStatusBar();
+  m_sock->Write("QUIT\r\n", 6);
+  Sleep(1000);
+  delete m_sock;
+  m_text->AppendText(_T("wxSOCKET_LOST after this line is broken!!!"));
+  m_sock = new wxSocketClient(wxSOCKET_NOWAIT);
+  wxIPV4address addr;
+  addr.Hostname(_T("127.0.0.1"));
+  addr.Service(21);
+
+  m_sock->SetEventHandler(*this, SOCKET_ID + 1);
+  m_sock->SetNotify(wxSOCKET_CONNECTION_FLAG |
+                    wxSOCKET_INPUT_FLAG |
+                    wxSOCKET_LOST_FLAG);
+  m_sock->Notify(true);
+
+  m_sock->Connect(addr, false);
 }
 
 void MyFrame::OnTest2(wxCommandEvent& WXUNUSED(event))
 {
-  const wxChar *msg1;
-  wxChar *msg2;
-  size_t len;
+  m_sock->Write("QUIT\r\n", 6);
+  Sleep(1000);
+  delete m_sock;
+  m_text->AppendText(_T("wxSOCKET_LOST after this line is broken!!!"));
+  m_sock = new wxSocketClient(wxSOCKET_NOWAIT);
+  wxIPV4address addr;
+  addr.Hostname(_T("127.0.0.1"));
+  addr.Service(21);
 
-  // Disable socket menu entries (exception: Close Session)
-  m_busy = true;
-  UpdateStatusBar();
+  m_sock->SetEventHandler(*this, SOCKET_ID + 1);
+  m_sock->SetNotify(wxSOCKET_CONNECTION_FLAG |
+                    wxSOCKET_INPUT_FLAG |
+                    wxSOCKET_LOST_FLAG);
+  m_sock->Notify(true);
 
-  m_text->AppendText(_("\n=== Test 2 begins ===\n"));
-
-  // Tell the server which test we are running
-  unsigned char c = 0xCE;
-  m_sock->Write(&c, 1);
-
-  // Here we use ReadMsg and WriteMsg to send messages with
-  // a header with size information. Also, the reception is
-  // event triggered, so we test input events as well.
-  //
-  // We need to set no flags here (ReadMsg and WriteMsg are
-  // not affected by flags)
-
-  m_sock->SetFlags(wxSOCKET_WAITALL);
-
-  wxString s = wxGetTextFromUser(
-    _("Enter an arbitrary string to send to the server:"),
-    _("Test 2 ..."),
-    _("Yes I like wxWidgets!"));
-
-  msg1 = s.c_str();
-  len  = (wxStrlen(msg1) + 1) * sizeof(wxChar);
-  msg2 = new wxChar[wxStrlen(msg1) + 1];
-
-  m_text->AppendText(_("Sending the string with WriteMsg ..."));
-  m_sock->WriteMsg(msg1, len);
-  m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-  m_text->AppendText(_("Waiting for an event (timeout = 2 sec)\n"));
-
-  // Wait until data available (will also return if the connection is lost)
-  m_sock->WaitForRead(2);
-
-  if (m_sock->IsData())
-  {
-    m_text->AppendText(_("Reading the string back with ReadMsg ..."));
-    m_sock->ReadMsg(msg2, len);
-    m_text->AppendText(m_sock->Error() ? _("failed !\n") : _("done\n"));
-    m_text->AppendText(_("Comparing the two buffers ..."));
-    if (memcmp(msg1, msg2, len) != 0)
-    {
-      m_text->AppendText(_("failed!\n"));
-      m_text->AppendText(_("Test 2 failed !\n"));
-    }
-    else
-    {
-      m_text->AppendText(_("done\n"));
-      m_text->AppendText(_("Test 2 passed !\n"));
-    }
-  }
-  else
-    m_text->AppendText(_("Timeout ! Test 2 failed.\n"));
-
-  m_text->AppendText(_("=== Test 2 ends ===\n"));
-
-  delete[] msg2;
-  m_busy = false;
-  UpdateStatusBar();
+  m_sock->Connect(addr, false);
 }
 
 void MyFrame::OnTest3(wxCommandEvent& WXUNUSED(event))
@@ -603,6 +524,7 @@
 {
   wxString s = _("OnSocketEvent: ");
 
+  s.Append(wxString::Format(_T("%d"), event.GetId()));
   switch(event.GetSocketEvent())
   {
     case wxSOCKET_INPUT      : s.Append(_("wxSOCKET_INPUT\n")); break;

 	  	 

diff -u -3 -P -r wxWidgets/.\include\wx\ffile.h wxW/.\include\wx\ffile.h
--- wxWidgets/.\include\wx\ffile.h	Tue May 25 10:58:26 2004
+++ wxW/.\include\wx\ffile.h	Fri Oct 22 09:57:38 2004
@@ -63,28 +63,28 @@
   bool ReadAll(wxString *str);
     // returns number of bytes read - use Eof() and Error() to see if an error
     // occured or not
-  size_t Read(void *pBuf, size_t nCount);
+  wxFileOffset Read(void *pBuf, wxFileOffset nCount);
     // returns the number of bytes written
-  size_t Write(const void *pBuf, size_t nCount);
+  wxFileOffset Write(const void *pBuf, wxFileOffset nCount);
     // returns true on success
   bool Write(const wxString& s, wxMBConv& conv = wxConvUTF8)
   {
       const wxWX2MBbuf buf = s.mb_str(conv);
       size_t size = strlen(buf);
-      return Write((const char *)buf, size) == size;
+      return Write((const char *)buf, size) == (wxFileOffset)size;
   }
     // flush data not yet written
   bool Flush();
 
   // file pointer operations (return ofsInvalid on failure)
     // move ptr ofs bytes related to start/current pos/end of file
-  bool Seek(long ofs, wxSeekMode mode = wxFromStart);
+  bool Seek(wxFileOffset ofs, wxSeekMode mode = wxFromStart);
     // move ptr to ofs bytes before the end
   bool SeekEnd(long ofs = 0) { return Seek(ofs, wxFromEnd); }
     // get current position in the file
-  size_t Tell() const;
+  wxFileOffset Tell() const;
     // get current file length
-  size_t Length() const;
+  wxFileOffset Length() const;
 
   // simple accessors: note that Eof() and Error() may only be called if
   // IsOpened()!
diff -u -3 -P -r wxWidgets/.\include\wx\mstream.h wxW/.\include\wx\mstream.h
--- wxWidgets/.\include\wx\mstream.h	Mon Sep 27 10:24:40 2004
+++ wxW/.\include\wx\mstream.h	Fri Oct 22 09:57:38 2004
@@ -19,9 +19,9 @@
 class WXDLLIMPEXP_BASE wxMemoryInputStream : public wxInputStream
 {
 public:
-    wxMemoryInputStream(const void *data, size_t length);
+    wxMemoryInputStream(const void *data, wxFileOffset length);
     virtual ~wxMemoryInputStream();
-    virtual size_t GetSize() const { return m_length; }
+    virtual wxFileOffset GetSize() const { return m_length; }
     virtual bool Eof() const;
 
     char Peek();
@@ -34,12 +34,12 @@
 protected:
     wxStreamBuffer *m_i_streambuf;
 
-    size_t OnSysRead(void *buffer, size_t nbytes);
+    wxFileOffset OnSysRead(void *buffer, wxFileOffset nbytes);
     wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
     wxFileOffset OnSysTell() const;
 
 private:
-    size_t m_length;
+    wxFileOffset m_length;
 
     DECLARE_NO_COPY_CLASS(wxMemoryInputStream)
 };
@@ -48,9 +48,9 @@
 {
 public:
     // if data is !NULL it must be allocated with malloc()
-    wxMemoryOutputStream(void *data = NULL, size_t length = 0);
+    wxMemoryOutputStream(void *data = NULL, wxFileOffset length = 0);
     virtual ~wxMemoryOutputStream();
-    virtual size_t GetSize() const { return m_o_streambuf->GetLastAccess(); }
+    virtual wxFileOffset GetSize() const { return m_o_streambuf->GetLastAccess(); }
 
     size_t CopyTo(void *buffer, size_t len) const;
 
@@ -63,7 +63,7 @@
     wxStreamBuffer *m_o_streambuf;
 
 protected:
-    size_t OnSysWrite(const void *buffer, size_t nbytes);
+    wxFileOffset OnSysWrite(const void *buffer, wxFileOffset nbytes);
     wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
     wxFileOffset OnSysTell() const;
 
diff -u -3 -P -r wxWidgets/.\include\wx\sckstrm.h wxW/.\include\wx\sckstrm.h
--- wxWidgets/.\include\wx\sckstrm.h	Mon Sep 27 10:24:40 2004
+++ wxW/.\include\wx\sckstrm.h	Fri Oct 22 09:57:38 2004
@@ -23,19 +23,19 @@
 
 class WXDLLIMPEXP_NET wxSocketOutputStream : public wxOutputStream
 {
- public:
-  wxSocketOutputStream(wxSocketBase& s);
-  ~wxSocketOutputStream();
+  public:
+    wxSocketOutputStream(wxSocketBase& s);
+    ~wxSocketOutputStream();
+
+    wxFileOffset SeekO( wxFileOffset WXUNUSED(pos), wxSeekMode WXUNUSED(mode) )
+      { return -1; }
+    wxFileOffset TellO() const
+      { return -1; }
 
-  wxFileOffset SeekO( wxFileOffset WXUNUSED(pos), wxSeekMode WXUNUSED(mode) )
-    { return -1; }
-  wxFileOffset TellO() const
-    { return -1; }
-
- protected:
-  wxSocketBase *m_o_socket;
+  protected:
+    wxSocketBase *m_o_socket;
 
-  size_t OnSysWrite(const void *buffer, size_t bufsize);
+    wxFileOffset OnSysWrite(const void *buffer, wxFileOffset bufsize);
 
     DECLARE_NO_COPY_CLASS(wxSocketOutputStream)
 };
@@ -52,9 +52,9 @@
     { return -1; }
 
  protected:
-  wxSocketBase *m_i_socket;
+    wxSocketBase *m_i_socket;
 
-  size_t OnSysRead(void *buffer, size_t bufsize);
+    wxFileOffset OnSysRead(void *buffer, wxFileOffset bufsize);
 
     DECLARE_NO_COPY_CLASS(wxSocketInputStream)
 };
diff -u -3 -P -r wxWidgets/.\include\wx\sstream.h wxW/.\include\wx\sstream.h
--- wxWidgets/.\include\wx\sstream.h	Mon Sep 27 10:24:40 2004
+++ wxW/.\include\wx\sstream.h	Fri Oct 22 09:57:38 2004
@@ -31,19 +31,19 @@
         m_pos = 0;
     }
 
-    virtual size_t GetSize() const { return m_str.length(); }
+    virtual wxFileOffset GetSize() const { return m_str.length(); }
 
 protected:
     virtual wxFileOffset OnSysSeek(wxFileOffset ofs, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const;
-    virtual size_t OnSysRead(void *buffer, size_t size);
+    virtual wxFileOffset OnSysRead(void *buffer, wxFileOffset size);
 
 private:
     // the string we're reading from
     wxString m_str;
 
     // position in the stream in bytes, *not* in chars
-    size_t m_pos;
+    wxFileOffset m_pos;
 
 
     DECLARE_NO_COPY_CLASS(wxStringInputStream)
@@ -69,7 +69,7 @@
 
 protected:
     virtual wxFileOffset OnSysTell() const;
-    virtual size_t OnSysWrite(const void *buffer, size_t size);
+    virtual wxFileOffset OnSysWrite(const void *buffer, wxFileOffset size);
 
 private:
     // internal string, not used if caller provided his own string
@@ -79,7 +79,7 @@
     wxString *m_str;
 
     // position in the stream in bytes, *not* in chars
-    size_t m_pos;
+    wxFileOffset m_pos;
 
 
     DECLARE_NO_COPY_CLASS(wxStringOutputStream)
diff -u -3 -P -r wxWidgets/.\include\wx\stream.h wxW/.\include\wx\stream.h
--- wxWidgets/.\include\wx\stream.h	Mon Sep 27 10:24:40 2004
+++ wxW/.\include\wx\stream.h	Fri Oct 22 09:57:38 2004
@@ -82,19 +82,19 @@
     void Reset() { m_lasterror = wxSTREAM_NO_ERROR; }
 
     // this doesn't make sense for all streams, always test its return value
-    virtual size_t GetSize() const { return 0; }
+    virtual wxFileOffset GetSize() const { return 0; }
 
 #if WXWIN_COMPATIBILITY_2_2
     // deprecated, for compatibility only
     wxStreamError LastError() const { return m_lasterror; }
-    size_t StreamSize() const { return GetSize(); }
+    wxFileOffset StreamSize() const { return GetSize(); }
 #endif // WXWIN_COMPATIBILITY_2_2
 
 protected:
     virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const;
 
-    size_t m_lastcount;
+    wxFileOffset m_lastcount;
     wxStreamError m_lasterror;
 
     friend class wxStreamBuffer;
@@ -142,7 +142,7 @@
     // in any case, if there are not enough bytes in the stream right now,
     // LastRead() value will be less than size but greater than 0. If it is 0,
     // it means that EOF has been reached.
-    virtual wxInputStream& Read(void *buffer, size_t size);
+    virtual wxInputStream& Read(void *buffer, wxFileOffset size);
 
     // copy the entire contents of this stream into streamOut, stopping only
     // when EOF is reached or an error occurs
@@ -157,7 +157,7 @@
     //
     // this should be used to discover whether that call succeeded in reading
     // all the requested data or not
-    virtual size_t LastRead() const { return wxStreamBase::m_lastcount; }
+    virtual wxFileOffset LastRead() const { return wxStreamBase::m_lastcount; }
 
     // returns true if some data is available in the stream right now, so that
     // calling Read() wouldn't block
@@ -177,7 +177,7 @@
     // fetched by the next call to the read functions
     //
     // returns the number of bytes really stuffed back
-    size_t Ungetch(const void *buffer, size_t size);
+    wxFileOffset Ungetch(const void *buffer, wxFileOffset size);
 
     // put back the specified character in the stream
     //
@@ -210,26 +210,26 @@
     // this method should return 0 if EOF has been reached or an error occured
     // (m_lasterror should be set accordingly as well) or the number of bytes
     // read
-    virtual size_t OnSysRead(void *buffer, size_t size) = 0;
+    virtual wxFileOffset OnSysRead(void *buffer, wxFileOffset size) = 0;
 
     // write-back buffer support
     // -------------------------
 
     // return the pointer to a buffer big enough to hold sizeNeeded bytes
-    char *AllocSpaceWBack(size_t sizeNeeded);
+    char *AllocSpaceWBack(wxFileOffset sizeNeeded);
 
     // read up to size data from the write back buffer, return the number of
     // bytes read
-    size_t GetWBack(void *buf, size_t size);
+    wxFileOffset GetWBack(void *buf, wxFileOffset size);
 
     // write back buffer or NULL if none
     char *m_wback;
 
     // the size of the buffer
-    size_t m_wbacksize;
+    wxFileOffset m_wbacksize;
 
     // the current position in the buffer
-    size_t m_wbackcur;
+    wxFileOffset m_wbackcur;
 
     friend class wxStreamBuffer;
 
@@ -247,13 +247,13 @@
     virtual ~wxOutputStream();
 
     void PutC(char c);
-    virtual wxOutputStream& Write(const void *buffer, size_t size);
+    virtual wxOutputStream& Write(const void *buffer, wxFileOffset size);
     wxOutputStream& Write(wxInputStream& stream_in);
 
     virtual wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart);
     virtual wxFileOffset TellO() const;
 
-    virtual size_t LastWrite() const { return wxStreamBase::m_lastcount; }
+    virtual wxFileOffset LastWrite() const { return wxStreamBase::m_lastcount; }
 
     virtual void Sync();
 
@@ -263,7 +263,7 @@
 protected:
     // to be implemented in the derived classes (it should have been pure
     // virtual)
-    virtual size_t OnSysWrite(const void *buffer, size_t bufsize);
+    virtual wxFileOffset OnSysWrite(const void *buffer, wxFileOffset bufsize);
 
     friend class wxStreamBuffer;
 
@@ -283,15 +283,15 @@
 public:
     wxCountingOutputStream();
 
-    size_t GetSize() const;
+    wxFileOffset GetSize() const;
     bool Ok() const { return true; }
 
 protected:
-    virtual size_t OnSysWrite(const void *buffer, size_t size);
+    virtual wxFileOffset OnSysWrite(const void *buffer, wxFileOffset size);
     virtual wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const;
 
-    size_t m_currentPos;
+    wxFileOffset m_currentPos;
 
     DECLARE_NO_COPY_CLASS(wxCountingOutputStream)
 };
@@ -309,7 +309,7 @@
 
     char Peek() { return m_parent_i_stream->Peek(); }
 
-    size_t GetSize() const { return m_parent_i_stream->GetSize(); }
+    wxFileOffset GetSize() const { return m_parent_i_stream->GetSize(); }
 
     wxInputStream *GetFilterInputStream() const { return m_parent_i_stream; }
 
@@ -326,7 +326,7 @@
     wxFilterOutputStream(wxOutputStream& stream);
     virtual ~wxFilterOutputStream();
 
-    size_t GetSize() const { return m_parent_o_stream->GetSize(); }
+    wxFileOffset GetSize() const { return m_parent_o_stream->GetSize(); }
 
     wxOutputStream *GetFilterOutputStream() const { return m_parent_o_stream; }
 
@@ -360,10 +360,10 @@
     virtual ~wxStreamBuffer();
 
     // Filtered IO
-    virtual size_t Read(void *buffer, size_t size);
-    size_t Read(wxStreamBuffer *buf);
-    virtual size_t Write(const void *buffer, size_t size);
-    size_t Write(wxStreamBuffer *buf);
+    virtual wxFileOffset Read(void *buffer, wxFileOffset size);
+    wxFileOffset Read(wxStreamBuffer *buf);
+    virtual wxFileOffset Write(const void *buffer, wxFileOffset size);
+    wxFileOffset Write(wxStreamBuffer *buf);
 
     virtual char Peek();
     virtual char GetChar();
@@ -377,23 +377,23 @@
     // NB: the buffer must always be allocated with malloc() if takeOwn is
     //     true as it will be deallocated by free()
     void SetBufferIO(void *start, void *end, bool takeOwnership = false);
-    void SetBufferIO(void *start, size_t len, bool takeOwnership = false);
-    void SetBufferIO(size_t bufsize);
+    void SetBufferIO(void *start, wxFileOffset len, bool takeOwnership = false);
+    void SetBufferIO(wxFileOffset bufsize);
     void *GetBufferStart() const { return m_buffer_start; }
     void *GetBufferEnd() const { return m_buffer_end; }
     void *GetBufferPos() const { return m_buffer_pos; }
-    size_t GetBufferSize() const { return m_buffer_size; }
-    size_t GetIntPosition() const { return m_buffer_pos - m_buffer_start; }
-    void SetIntPosition(size_t pos) { m_buffer_pos = m_buffer_start + pos; }
-    size_t GetLastAccess() const { return m_buffer_end - m_buffer_start; }
-    size_t GetBytesLeft() const { return m_buffer_end - m_buffer_pos; }
+    wxFileOffset GetBufferSize() const { return m_buffer_size; }
+    wxFileOffset GetIntPosition() const { return m_buffer_pos - m_buffer_start; }
+    void SetIntPosition(wxFileOffset pos) { m_buffer_pos = m_buffer_start + pos; }
+    wxFileOffset GetLastAccess() const { return m_buffer_end - m_buffer_start; }
+    wxFileOffset GetBytesLeft() const { return m_buffer_end - m_buffer_pos; }
 
     void Fixed(bool fixed) { m_fixed = fixed; }
     void Flushable(bool f) { m_flushable = f; }
 
     bool FlushBuffer();
     bool FillBuffer();
-    size_t GetDataLeft();
+    wxFileOffset GetDataLeft();
 
     // misc accessors
     wxStreamBase *GetStream() const { return m_stream; }
@@ -414,8 +414,8 @@
     wxStreamBuffer(BufMode mode);
 
 protected:
-    void GetFromBuffer(void *buffer, size_t size);
-    void PutToBuffer(const void *buffer, size_t size);
+    void GetFromBuffer(void *buffer, wxFileOffset size);
+    void PutToBuffer(const void *buffer, wxFileOffset size);
 
     // set the last error to the specified value if we didn't have it before
     void SetError(wxStreamError err);
@@ -437,7 +437,7 @@
 
     // the buffer size
     // FIXME: isn't it the same as m_buffer_end - m_buffer_start? (VZ)
-    size_t m_buffer_size;
+    wxFileOffset m_buffer_size;
 
     // the stream we're associated with
     wxStreamBase *m_stream;
@@ -472,7 +472,7 @@
     virtual ~wxBufferedInputStream();
 
     char Peek();
-    wxInputStream& Read(void *buffer, size_t size);
+    wxInputStream& Read(void *buffer, wxFileOffset size);
 
     // Position functions
     wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart);
@@ -486,7 +486,7 @@
     wxStreamBuffer *InputStreamBuffer() const { return m_i_streambuf; }
 
 protected:
-    virtual size_t OnSysRead(void *buffer, size_t bufsize);
+    virtual wxFileOffset OnSysRead(void *buffer, wxFileOffset bufsize);
     virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const;
 
@@ -507,7 +507,7 @@
                            wxStreamBuffer *buffer = NULL);
     virtual ~wxBufferedOutputStream();
 
-    wxOutputStream& Write(const void *buffer, size_t size);
+    wxOutputStream& Write(const void *buffer, wxFileOffset size);
 
     // Position functions
     wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart);
@@ -515,7 +515,7 @@
 
     void Sync();
 
-    size_t GetSize() const;
+    wxFileOffset GetSize() const;
 
     // the buffer given to the stream will be deleted by it
     void SetOutputStreamBuffer(wxStreamBuffer *buffer);
@@ -525,7 +525,7 @@
     wxStreamBuffer *OutputStreamBuffer() const { return m_o_streambuf; }
 
 protected:
-    virtual size_t OnSysWrite(const void *buffer, size_t bufsize);
+    virtual wxFileOffset OnSysWrite(const void *buffer, wxFileOffset bufsize);
     virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const;
 
diff -u -3 -P -r wxWidgets/.\include\wx\wfstream.h wxW/.\include\wx\wfstream.h
--- wxWidgets/.\include\wx\wfstream.h	Mon Sep 27 10:24:57 2004
+++ wxW/.\include\wx\wfstream.h	Fri Oct 22 09:57:38 2004
@@ -37,14 +37,14 @@
   wxFileInputStream(int fd);
   ~wxFileInputStream();
 
-  size_t GetSize() const;
+  wxFileOffset GetSize() const;
 
   bool Ok() const { return m_file->IsOpened(); }
 
  protected:
   wxFileInputStream();
 
-  size_t OnSysRead(void *buffer, size_t size);
+  wxFileOffset OnSysRead(void *buffer, wxFileOffset size);
   wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
   wxFileOffset OnSysTell() const;
 
@@ -67,14 +67,14 @@
 //     { return wxOutputStream::Write(buffer, size); }
 
   void Sync();
-  size_t GetSize() const;
+  wxFileOffset GetSize() const;
 
   bool Ok() const { return m_file->IsOpened(); }
 
  protected:
   wxFileOutputStream();
 
-  size_t OnSysWrite(const void *buffer, size_t size);
+  wxFileOffset OnSysWrite(const void *buffer, wxFileOffset size);
   wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
   wxFileOffset OnSysTell() const;
 
@@ -106,14 +106,14 @@
   wxFFileInputStream(FILE *file);
   ~wxFFileInputStream();
 
-  size_t GetSize() const;
+  wxFileOffset GetSize() const;
 
   bool Ok() const { return m_file->IsOpened(); }
 
  protected:
   wxFFileInputStream();
 
-  size_t OnSysRead(void *buffer, size_t size);
+  wxFileOffset OnSysRead(void *buffer, wxFileOffset size);
   wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
   wxFileOffset OnSysTell() const;
 
@@ -136,14 +136,14 @@
 //     { return wxOutputStream::Write(buffer, size); }
 
   void Sync();
-  size_t GetSize() const;
+  wxFileOffset GetSize() const;
 
   bool Ok() const { return m_file->IsOpened(); }
 
  protected:
   wxFFileOutputStream();
 
-  size_t OnSysWrite(const void *buffer, size_t size);
+  wxFileOffset OnSysWrite(const void *buffer, wxFileOffset size);
   wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode);
   wxFileOffset OnSysTell() const;
 
diff -u -3 -P -r wxWidgets/.\include\wx\zipstrm.h wxW/.\include\wx\zipstrm.h
--- wxWidgets/.\include\wx\zipstrm.h	Mon Sep 27 10:24:57 2004
+++ wxW/.\include\wx\zipstrm.h	Fri Oct 22 09:57:38 2004
@@ -34,16 +34,16 @@
             // Remember that archive must be local file accesible via fopen, fread functions!
     ~wxZipInputStream();
 
-    virtual size_t GetSize() const {return m_Size;}
+    virtual wxFileOffset GetSize() const {return m_Size;}
     virtual bool Eof() const;
 
 protected:
-    virtual size_t OnSysRead(void *buffer, size_t bufsize);
+    virtual wxFileOffset OnSysRead(void *buffer, wxFileOffset bufsize);
     virtual wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode);
     virtual wxFileOffset OnSysTell() const {return m_Pos;}
 
 private:
-    size_t m_Size;
+    wxFileOffset m_Size;
     wxFileOffset m_Pos;
 
     // this void* is handle of archive . I'm sorry it is void and not proper
diff -u -3 -P -r wxWidgets/.\include\wx\zstream.h wxW/.\include\wx\zstream.h
--- wxWidgets/.\include\wx\zstream.h	Mon Sep 27 10:24:57 2004
+++ wxW/.\include\wx\zstream.h	Fri Oct 22 09:57:38 2004
@@ -46,12 +46,12 @@
   virtual ~wxZlibInputStream();
 
   char Peek() { return wxInputStream::Peek(); }
-  size_t GetSize() const { return wxInputStream::GetSize(); }
+  wxFileOffset GetSize() const { return wxInputStream::GetSize(); }
 
   static bool CanHandleGZip();
 
  protected:
-  size_t OnSysRead(void *buffer, size_t size);
+  wxFileOffset OnSysRead(void *buffer, wxFileOffset size);
   wxFileOffset OnSysTell() const { return m_pos; }
 
  protected:
@@ -72,12 +72,12 @@
   virtual ~wxZlibOutputStream();
 
   void Sync() { DoFlush(false); }
-  size_t GetSize() const { return (size_t)m_pos; }
+  wxFileOffset GetSize() const { return m_pos; }
 
   static bool CanHandleGZip();
 
  protected:
-  size_t OnSysWrite(const void *buffer, size_t size);
+  wxFileOffset OnSysWrite(const void *buffer, wxFileOffset size);
   wxFileOffset OnSysTell() const { return m_pos; }
 
   virtual void DoFlush(bool final);
diff -u -3 -P -r wxWidgets/.\src\common\docview.cpp wxW/.\src\common\docview.cpp
--- wxWidgets/.\src\common\docview.cpp	Mon Oct 18 07:59:14 2004
+++ wxW/.\src\common\docview.cpp	Fri Oct 22 11:15:01 2004
@@ -2390,7 +2390,7 @@
 
     char buf[4096];
 
-    size_t nRead;
+    wxFileOffset nRead;
     do
     {
         nRead = file.Read(buf, WXSIZEOF(buf));
@@ -2417,8 +2417,8 @@
     {
         stream.Read(buf, WXSIZEOF(buf));
 
-        const size_t nRead = stream.LastRead();
-        if ( !nRead || !file.Write(buf, nRead) )
+        const wxFileOffset nRead = stream.LastRead();
+        if ( ( (wxFileSize_t)nRead == wxInvalidOffset ) || ( (wxFileSize_t)file.Write(buf, nRead) == wxInvalidOffset ) )
             return false;
     }
     while ( !stream.Eof() );
diff -u -3 -P -r wxWidgets/.\src\common\execcmn.cpp wxW/.\src\common\execcmn.cpp
--- wxWidgets/.\src\common\execcmn.cpp	Tue May 25 10:59:20 2004
+++ wxW/.\src\common\execcmn.cpp	Fri Oct 22 09:57:38 2004
@@ -100,7 +100,7 @@
         {
             m_buffer = buf;
             m_stream->Read((char *)m_buffer + m_size, incSize);
-            m_size += m_stream->LastRead();
+            m_size += (size_t)m_stream->LastRead();
         }
     }
 }
diff -u -3 -P -r wxWidgets/.\src\common\ffile.cpp wxW/.\src\common\ffile.cpp
--- wxWidgets/.\src\common\ffile.cpp	Wed Sep 15 07:31:55 2004
+++ wxW/.\src\common\ffile.cpp	Fri Oct 22 17:10:39 2004
@@ -93,13 +93,15 @@
 
 bool wxFFile::ReadAll(wxString *str)
 {
+    wxCHECK_MSG( (wxFileSize_t)Length()==wxInvalidOffset, false, wxT("huge file not supported") );
+    wxCHECK_MSG( (wxFileSize_t)Length()==(size_t)Length(), false, wxT("huge file not supported") );
     wxCHECK_MSG( str, false, wxT("invalid parameter") );
     wxCHECK_MSG( IsOpened(), false, wxT("can't read from closed file") );
 
     clearerr(m_fp);
 
     str->Empty();
-    str->Alloc(Length());
+    str->Alloc((size_t)Length());
 
     wxChar buf[1024];
     static const size_t nSize = WXSIZEOF(buf) - 1; // -1 for trailing '\0'
@@ -121,13 +123,13 @@
     return true;
 }
 
-size_t wxFFile::Read(void *pBuf, size_t nCount)
+wxFileOffset wxFFile::Read(void *pBuf, wxFileOffset nCount)
 {
     wxCHECK_MSG( pBuf, FALSE, wxT("invalid parameter") );
     wxCHECK_MSG( IsOpened(), FALSE, wxT("can't read from closed file") );
 
-    size_t nRead = fread(pBuf, 1, nCount, m_fp);
-    if ( (nRead < nCount) && Error() )
+    size_t nRead = fread(pBuf, 1, (size_t)nCount, m_fp);
+    if ( (nRead < (wxFileSize_t)nCount) && Error() )
     {
         wxLogSysError(_("Read error on file '%s'"), m_name.c_str());
     }
@@ -135,13 +137,14 @@
     return nRead;
 }
 
-size_t wxFFile::Write(const void *pBuf, size_t nCount)
+wxFileOffset wxFFile::Write(const void *pBuf, wxFileOffset nCount)
 {
+    wxCHECK_MSG( (wxFileSize_t)nCount==(size_t)nCount, false, wxT("huge file not supported") );
     wxCHECK_MSG( pBuf, FALSE, wxT("invalid parameter") );
     wxCHECK_MSG( IsOpened(), FALSE, wxT("can't write to closed file") );
 
-    size_t nWritten = fwrite(pBuf, 1, nCount, m_fp);
-    if ( nWritten < nCount )
+    size_t nWritten = fwrite(pBuf, 1, (size_t)nCount, m_fp);
+    if ( nWritten < (wxFileSize_t)nCount )
     {
         wxLogSysError(_("Write error on file '%s'"), m_name.c_str());
     }
@@ -170,8 +173,9 @@
 // seeking
 // ----------------------------------------------------------------------------
 
-bool wxFFile::Seek(long ofs, wxSeekMode mode)
+bool wxFFile::Seek(wxFileOffset ofs, wxSeekMode mode)
 {
+    wxCHECK_MSG( (wxFileSize_t)ofs==(size_t)ofs, false, wxT("huge file not supported") );
     wxCHECK_MSG( IsOpened(), false, wxT("can't seek on closed file") );
 
     int origin;
@@ -194,7 +198,7 @@
             break;
     }
 
-    if ( fseek(m_fp, ofs, origin) != 0 )
+    if ( fseek(m_fp, (long)ofs, origin) != 0 )
     {
         wxLogSysError(_("Seek error on file '%s'"), m_name.c_str());
 
@@ -204,9 +208,9 @@
     return true;
 }
 
-size_t wxFFile::Tell() const
+wxFileOffset wxFFile::Tell() const
 {
-    wxCHECK_MSG( IsOpened(), (size_t)-1,
+    wxCHECK_MSG( IsOpened(), wxInvalidOffset,
                  _T("wxFFile::Tell(): file is closed!") );
 
     long rc = ftell(m_fp);
@@ -214,24 +218,25 @@
     {
         wxLogSysError(_("Can't find current position in file '%s'"),
                       m_name.c_str());
+        return wxInvalidOffset;
     }
 
-    return (size_t)rc;
+    return rc;
 }
 
-size_t wxFFile::Length() const
+wxFileOffset wxFFile::Length() const
 {
-    wxCHECK_MSG( IsOpened(), (size_t)-1,
+    wxCHECK_MSG( IsOpened(), wxInvalidOffset,
                  _T("wxFFile::Length(): file is closed!") );
 
     wxFFile& self = *(wxFFile *)this;   // const_cast
 
-    size_t posOld = Tell();
-    if ( posOld != (size_t)-1 )
+    wxFileOffset posOld = Tell();
+    if ( posOld != (wxFileOffset)wxInvalidOffset )
     {
         if ( self.SeekEnd() )
         {
-            size_t len = Tell();
+            wxFileOffset len = Tell();
 
             (void)self.Seek(posOld);
 
@@ -239,7 +244,7 @@
         }
     }
 
-    return (size_t)-1;
+    return wxInvalidOffset;
 }
 
 #endif // wxUSE_FFILE
diff -u -3 -P -r wxWidgets/.\src\common\fileconf.cpp wxW/.\src\common\fileconf.cpp
--- wxWidgets/.\src\common\fileconf.cpp	Sun Oct 17 10:28:21 2004
+++ wxW/.\src\common\fileconf.cpp	Fri Oct 22 10:48:12 2004
@@ -502,7 +502,12 @@
                 break;
             }
 
-            strTmp.append(wxConvertMB2WX(buf), inStream.LastRead());
+            wxFileOffset size = inStream.LastRead();
+
+            wxASSERT_MSG( (wxFileSize_t)size == (size_t)size,
+                          _T("Suprisingly huge size in reading options.") );
+
+            strTmp.append(wxConvertMB2WX(buf), (size_t)size);
         }
         while ( !inStream.Eof() );
 
diff -u -3 -P -r wxWidgets/.\src\common\fs_mem.cpp wxW/.\src\common\fs_mem.cpp
--- wxWidgets/.\src\common\fs_mem.cpp	Wed Sep 15 07:31:56 2004
+++ wxW/.\src\common\fs_mem.cpp	Fri Oct 22 13:04:49 2004
@@ -55,7 +55,7 @@
 
         MemFSHashObj(wxMemoryOutputStream& stream)
         {
-            m_Len = stream.GetSize();
+            m_Len = (size_t)stream.GetSize();
             m_Data = new char[m_Len];
             stream.CopyTo(m_Data, m_Len);
             InitTime();
diff -u -3 -P -r wxWidgets/.\src\common\gifdecod.cpp wxW/.\src\common\gifdecod.cpp
--- wxWidgets/.\src\common\gifdecod.cpp	Mon Oct 18 07:30:35 2004
+++ wxW/.\src\common\gifdecod.cpp	Fri Oct 22 12:03:15 2004
@@ -328,7 +328,7 @@
 
             /* prefetch data */
             m_f->Read((void *) m_buffer, m_restbyte);
-            if (m_f->LastRead() != m_restbyte)
+            if (m_f->LastRead() != (wxFileOffset)m_restbyte)
             {
                 code = ab_fin;
                 return code;
@@ -656,7 +656,7 @@
 
     static const size_t headerSize = (3 + 3);
     m_f->Read(buf, headerSize);
-    if (m_f->LastRead() != headerSize)
+    if (m_f->LastRead() != (wxFileOffset)headerSize)
     {
         return wxGIF_INVFORMAT;
     }
@@ -669,7 +669,7 @@
     /* read logical screen descriptor block (LSDB) */
     static const size_t lsdbSize = (2 + 2 + 1 + 1 + 1);
     m_f->Read(buf, lsdbSize);
-    if (m_f->LastRead() != lsdbSize)
+    if (m_f->LastRead() != (wxFileOffset)lsdbSize)
     {
         return wxGIF_INVFORMAT;
     }
@@ -685,7 +685,7 @@
         ncolors = 2 << (buf[4] & 0x07);
         size_t numBytes = 3 * ncolors;
         m_f->Read(pal, numBytes);
-        if (m_f->LastRead() != numBytes)
+        if (m_f->LastRead() != (wxFileOffset)numBytes)
         {
             return wxGIF_INVFORMAT;
         }
@@ -738,7 +738,7 @@
             {
                 static const size_t gceSize = 6;
                 m_f->Read(buf, gceSize);
-                if (m_f->LastRead() != gceSize)
+                if (m_f->LastRead() != (wxFileOffset)gceSize)
                 {
                     Destroy();
                     return wxGIF_INVFORMAT;
@@ -784,7 +784,7 @@
             /* fill in the data */
             static const size_t idbSize = (2 + 2 + 2 + 2 + 1);
             m_f->Read(buf, idbSize);
-            if (m_f->LastRead() != idbSize)
+            if (m_f->LastRead() != (wxFileOffset)idbSize)
             {
                 Destroy();
                 return wxGIF_INVFORMAT;
@@ -832,7 +832,7 @@
                 ncolors = 2 << (buf[8] & 0x07);
                 size_t numBytes = 3 * ncolors;
                 m_f->Read(pimg->pal, numBytes);
-                if (m_f->LastRead() != numBytes)
+                if (m_f->LastRead() != (wxFileOffset)numBytes)
                 {
                     Destroy();
                     return wxGIF_INVFORMAT;
@@ -896,7 +896,7 @@
             /* image descriptor block */
             static const size_t idbSize = (2 + 2 + 2 + 2 + 1);
             m_f->Read(buf, idbSize);
-            if (m_f->LastRead() != idbSize)
+            if (m_f->LastRead() != (wxFileOffset)idbSize)
             {
                 Destroy();
                 return wxGIF_INVFORMAT;
diff -u -3 -P -r wxWidgets/.\src\common\http.cpp wxW/.\src\common\http.cpp
--- wxWidgets/.\src\common\http.cpp	Tue Oct 05 08:19:53 2004
+++ wxW/.\src\common\http.cpp	Fri Oct 22 09:57:38 2004
@@ -305,20 +305,20 @@
 {
 public:
   wxHTTP *m_http;
-  size_t m_httpsize;
-  unsigned long m_read_bytes;
+  wxFileOffset m_httpsize;
+  wxFileOffset m_read_bytes;
 
   wxHTTPStream(wxHTTP *http) : wxSocketInputStream(*http), m_http(http) {}
-  size_t GetSize() const { return m_httpsize; }
+  wxFileOffset GetSize() const { return m_httpsize; }
   virtual ~wxHTTPStream(void) { m_http->Abort(); }
 
 protected:
-  size_t OnSysRead(void *buffer, size_t bufsize);
+  wxFileOffset OnSysRead(void *buffer, wxFileOffset bufsize);
 
     DECLARE_NO_COPY_CLASS(wxHTTPStream)
 };
 
-size_t wxHTTPStream::OnSysRead(void *buffer, size_t bufsize)
+wxFileOffset wxHTTPStream::OnSysRead(void *buffer, wxFileOffset bufsize)
 {
     if (m_httpsize > 0 && m_read_bytes >= m_httpsize)
     {
@@ -326,7 +326,7 @@
         return 0;
     }
 
-    size_t ret = wxSocketInputStream::OnSysRead(buffer, bufsize);
+    wxFileOffset ret = wxSocketInputStream::OnSysRead(buffer, bufsize);
     m_read_bytes += ret;
 
     return ret;
diff -u -3 -P -r wxWidgets/.\src\common\image.cpp wxW/.\src\common\image.cpp
--- wxWidgets/.\src\common\image.cpp	Mon Oct 18 07:59:14 2004
+++ wxW/.\src\common\image.cpp	Fri Oct 22 11:01:23 2004
@@ -1491,7 +1491,7 @@
     bool ok = DoCanRead(stream);
 
     // restore the old position to be able to test other formats and so on
-    if ( stream.SeekI(posOld) == wxInvalidOffset )
+    if ( (wxFileSize_t)stream.SeekI(posOld) == wxInvalidOffset )
     {
         wxLogDebug(_T("Failed to rewind the stream in wxImageHandler!"));
 
diff -u -3 -P -r wxWidgets/.\src\common\imagjpeg.cpp wxW/.\src\common\imagjpeg.cpp
--- wxWidgets/.\src\common\imagjpeg.cpp	Mon Oct 18 07:30:35 2004
+++ wxW/.\src\common\imagjpeg.cpp	Fri Oct 22 09:57:38 2004
@@ -108,7 +108,7 @@
     wx_src_ptr src = (wx_src_ptr) cinfo->src;
 
     src->pub.next_input_byte = src->buffer;
-    src->pub.bytes_in_buffer = src->stream->Read(src->buffer, JPEG_IO_BUFFER_SIZE).LastRead();
+    src->pub.bytes_in_buffer = (size_t)src->stream->Read(src->buffer, JPEG_IO_BUFFER_SIZE).LastRead();
 
     if (src->pub.bytes_in_buffer == 0) // check for end-of-stream
     {
diff -u -3 -P -r wxWidgets/.\src\common\imagtiff.cpp wxW/.\src\common\imagtiff.cpp
--- wxWidgets/.\src\common\imagtiff.cpp	Mon Oct 18 07:30:35 2004
+++ wxW/.\src\common\imagtiff.cpp	Fri Oct 22 09:57:38 2004
@@ -65,7 +65,7 @@
 {
     wxInputStream *stream = (wxInputStream*) handle;
     stream->Read( (void*) buf, (size_t) size );
-    return stream->LastRead();
+    return (tsize_t)stream->LastRead();
 }
 
 tsize_t TIFFLINKAGEMODE
@@ -73,7 +73,7 @@
 {
     wxOutputStream *stream = (wxOutputStream*) handle;
     stream->Write( (void*) buf, (size_t) size );
-    return stream->LastWrite();
+    return (tsize_t)stream->LastWrite();
 }
 
 toff_t TIFFLINKAGEMODE
diff -u -3 -P -r wxWidgets/.\src\common\intl.cpp wxW/.\src\common\intl.cpp
--- wxWidgets/.\src\common\intl.cpp	Sun Oct 17 10:28:21 2004
+++ wxW/.\src\common\intl.cpp	Fri Oct 22 09:57:39 2004
@@ -1120,7 +1120,9 @@
     return false;
 
   // get the file size (assume it is less than 4Gb...)
-  size_t nSize = fileMsg.Length();
+  wxASSERT_MSG( fileMsg.Length() == (size_t)fileMsg.Length(),
+                _T("Suprisingly huge wxMsgCatalogFile file") );
+  size_t nSize = (size_t)fileMsg.Length();
   if ( nSize == wxInvalidOffset )
     return false;
 
diff -u -3 -P -r wxWidgets/.\src\common\mstream.cpp wxW/.\src\common\mstream.cpp
--- wxWidgets/.\src\common\mstream.cpp	Mon Sep 27 10:25:49 2004
+++ wxW/.\src\common\mstream.cpp	Fri Oct 22 10:49:31 2004
@@ -42,7 +42,7 @@
 // wxMemoryInputStream
 // ----------------------------------------------------------------------------
 
-wxMemoryInputStream::wxMemoryInputStream(const void *data, size_t len)
+wxMemoryInputStream::wxMemoryInputStream(const void *data, wxFileOffset len)
 {
     m_i_streambuf = new wxStreamBuffer(wxStreamBuffer::read);
     m_i_streambuf->SetBufferIO((void *)data, len); // const_cast
@@ -69,9 +69,9 @@
     return !m_i_streambuf->GetBytesLeft();
 }
 
-size_t wxMemoryInputStream::OnSysRead(void *buffer, size_t nbytes)
+wxFileOffset wxMemoryInputStream::OnSysRead(void *buffer, wxFileOffset nbytes)
 {
-    size_t pos = m_i_streambuf->GetIntPosition();
+    wxFileOffset pos = m_i_streambuf->GetIntPosition();
     if ( pos == m_length )
     {
         m_lasterror = wxSTREAM_EOF;
@@ -99,7 +99,7 @@
 // wxMemoryOutputStream
 // ----------------------------------------------------------------------------
 
-wxMemoryOutputStream::wxMemoryOutputStream(void *data, size_t len)
+wxMemoryOutputStream::wxMemoryOutputStream(void *data, wxFileOffset len)
 {
     m_o_streambuf = new wxStreamBuffer(wxStreamBuffer::write);
     if ( data )
@@ -113,11 +113,11 @@
     delete m_o_streambuf;
 }
 
-size_t wxMemoryOutputStream::OnSysWrite(const void *buffer, size_t nbytes)
+wxFileOffset wxMemoryOutputStream::OnSysWrite(const void *buffer, wxFileOffset nbytes)
 {
-    size_t oldpos = m_o_streambuf->GetIntPosition();
+    wxFileOffset oldpos = m_o_streambuf->GetIntPosition();
     m_o_streambuf->Write(buffer, nbytes);
-    size_t newpos = m_o_streambuf->GetIntPosition();
+    wxFileOffset newpos = m_o_streambuf->GetIntPosition();
 
     // FIXME can someone please explain what this does? (VZ)
     if ( !newpos )
@@ -140,8 +140,8 @@
 {
     wxCHECK_MSG( buffer, 0, _T("must have buffer to CopyTo") );
 
-    if ( len > GetSize() )
-        len = GetSize();
+    if ( (wxFileOffset)len > GetSize() )
+        len = (size_t)GetSize();
 
     memcpy(buffer, m_o_streambuf->GetBufferStart(), len);
 
diff -u -3 -P -r wxWidgets/.\src\common\sckstrm.cpp wxW/.\src\common\sckstrm.cpp
--- wxWidgets/.\src\common\sckstrm.cpp	Tue May 25 10:59:23 2004
+++ wxW/.\src\common\sckstrm.cpp	Fri Oct 22 11:14:27 2004
@@ -42,9 +42,11 @@
 {
 }
 
-size_t wxSocketOutputStream::OnSysWrite(const void *buffer, size_t size)
+wxFileOffset wxSocketOutputStream::OnSysWrite(const void *buffer, wxFileOffset size)
 {
-  size_t ret = m_o_socket->Write((const char *)buffer, size).LastCount();
+  wxASSERT_MSG((wxFileSize_t)size == (size_t)size, wxT("Huge socket output not supported"));
+
+  size_t ret = m_o_socket->Write((const char *)buffer, (size_t)size).LastCount();
 
   m_lasterror = m_o_socket->Error() ? wxSTREAM_WRITE_ERROR : wxSTREAM_NO_ERROR;
 
@@ -64,9 +66,11 @@
 {
 }
 
-size_t wxSocketInputStream::OnSysRead(void *buffer, size_t size)
+wxFileOffset wxSocketInputStream::OnSysRead(void *buffer, wxFileOffset size)
 {
-  size_t ret = m_i_socket->Read((char *)buffer, size).LastCount();
+  wxASSERT_MSG((wxFileSize_t)size == (size_t)size, wxT("Huge socket input not supported"));
+
+  size_t ret = m_i_socket->Read((char *)buffer, (size_t)size).LastCount();
 
   m_lasterror = m_i_socket->Error() ? wxSTREAM_READ_ERROR : wxSTREAM_NO_ERROR;
 
diff -u -3 -P -r wxWidgets/.\src\common\sstream.cpp wxW/.\src\common\sstream.cpp
--- wxWidgets/.\src\common\sstream.cpp	Mon Sep 27 10:25:49 2004
+++ wxW/.\src\common\sstream.cpp	Fri Oct 22 10:51:19 2004
@@ -38,7 +38,7 @@
 
 wxFileOffset wxStringInputStream::OnSysSeek(wxFileOffset ofs, wxSeekMode mode)
 {
-    const size_t ofsMax = m_str.length()*sizeof(wxChar);
+    const wxFileOffset ofsMax = m_str.length()*sizeof(wxChar);
 
     switch ( mode )
     {
@@ -59,10 +59,10 @@
             return wxInvalidOffset;
     }
 
-    if ( ofs < 0 || wx_static_cast(size_t, ofs) >= ofsMax )
+    if ( ofs < 0 || ofs >= ofsMax )
         return wxInvalidOffset;
 
-    m_pos = wx_static_cast(size_t, ofs);
+    m_pos = ofs;
 
     return ofs;
 }
@@ -76,9 +76,9 @@
 // actual IO
 // ----------------------------------------------------------------------------
 
-size_t wxStringInputStream::OnSysRead(void *buffer, size_t size)
+wxFileOffset wxStringInputStream::OnSysRead(void *buffer, wxFileOffset size)
 {
-    const size_t sizeMax = m_str.length()*sizeof(wxChar) - m_pos;
+    const wxFileOffset sizeMax = m_str.length()*sizeof(wxChar) - m_pos;
 
     if ( size >= sizeMax )
     {
@@ -91,7 +91,9 @@
         size = sizeMax;
     }
 
-    memcpy(buffer, m_str.data() + m_pos, size);
+    wxASSERT_MSG( (wxFileSize_t)size == (size_t)size,
+                  _T("Suprisingly huge reading in wxStringInputStream") );
+    memcpy(buffer, m_str.data() + m_pos, (size_t)size);
     m_pos += size;
 
     return size;
@@ -114,10 +116,10 @@
 // actual IO
 // ----------------------------------------------------------------------------
 
-size_t wxStringOutputStream::OnSysWrite(const void *buffer, size_t size)
+wxFileOffset wxStringOutputStream::OnSysWrite(const void *buffer, wxFileOffset size)
 {
     // in Unicode mode we might not be able to write the last byte
-    size_t len = size / sizeof(wxChar);
+    wxFileOffset len = size / sizeof(wxChar);
 
     const wxChar *p = wx_static_cast(const wxChar *, buffer);
 
diff -u -3 -P -r wxWidgets/.\src\common\stream.cpp wxW/.\src\common\stream.cpp
--- wxWidgets/.\src\common\stream.cpp	Fri Oct 15 07:52:47 2004
+++ wxW/.\src\common\stream.cpp	Fri Oct 22 12:06:39 2004
@@ -148,7 +148,7 @@
 }
 
 void wxStreamBuffer::SetBufferIO(void *start,
-                                 size_t len,
+                                 wxFileOffset len,
                                  bool takeOwnership)
 {
     // start by freeing the old buffer
@@ -165,14 +165,16 @@
     ResetBuffer();
 }
 
-void wxStreamBuffer::SetBufferIO(size_t bufsize)
+void wxStreamBuffer::SetBufferIO(wxFileOffset bufsize)
 {
     // start by freeing the old buffer
     FreeBuffer();
 
     if ( bufsize )
     {
-        SetBufferIO(malloc(bufsize), bufsize, true /* take ownership */);
+        wxASSERT_MSG( (wxFileSize_t)bufsize == (size_t)bufsize,
+                      _T("Suprisingly huge stream buffer size, try 64bit malloc on 64bit platform") );
+        SetBufferIO(malloc((size_t)bufsize), bufsize, true /* take ownership */);
     }
     else // no buffer size => no buffer
     {
@@ -202,7 +204,7 @@
     if ( !inStream )
         return false;
 
-    size_t count = inStream->OnSysRead(m_buffer_start, m_buffer_size);
+    wxFileOffset count = inStream->OnSysRead(m_buffer_start, m_buffer_size);
     if ( !count )
         return false;
 
@@ -225,8 +227,8 @@
 
     wxCHECK_MSG( outStream, false, _T("should have a stream in wxStreamBuffer") );
 
-    size_t current = m_buffer_pos - m_buffer_start;
-    size_t count = outStream->OnSysWrite(m_buffer_start, current);
+    wxFileOffset current = m_buffer_pos - m_buffer_start;
+    wxFileOffset count = outStream->OnSysWrite(m_buffer_start, current);
     if ( count != current )
         return false;
 
@@ -235,7 +237,7 @@
     return true;
 }
 
-size_t wxStreamBuffer::GetDataLeft()
+wxFileOffset wxStreamBuffer::GetDataLeft()
 {
     /* Why is this done? RR. */
     if ( m_buffer_pos == m_buffer_end && m_flushable)
@@ -245,22 +247,24 @@
 }
 
 // copy up to size bytes from our buffer into the provided one
-void wxStreamBuffer::GetFromBuffer(void *buffer, size_t size)
+void wxStreamBuffer::GetFromBuffer(void *buffer, wxFileOffset size)
 {
     // don't get more bytes than left in the buffer
-    size_t left = GetBytesLeft();
+    wxFileOffset left = GetBytesLeft();
 
     if ( size > left )
         size = left;
 
-    memcpy(buffer, m_buffer_pos, size);
+    wxASSERT_MSG( (wxFileSize_t)size == (size_t)size,
+                  _T("Suprisingly huge stream buffer reading, try 64bit malloc on 64bit platform") );
+    memcpy(buffer, m_buffer_pos, (size_t)size);
     m_buffer_pos += size;
 }
 
 // copy the contents of the provided buffer into this one
-void wxStreamBuffer::PutToBuffer(const void *buffer, size_t size)
+void wxStreamBuffer::PutToBuffer(const void *buffer, wxFileOffset size)
 {
-    size_t left = GetBytesLeft();
+    wxFileOffset left = GetBytesLeft();
 
     if ( size > left )
     {
@@ -272,11 +276,13 @@
         else // !m_fixed
         {
             // realloc the buffer to have enough space for the data
-            size_t delta = m_buffer_pos - m_buffer_start;
+            wxFileOffset delta = m_buffer_pos - m_buffer_start;
 
             char *startOld = m_buffer_start;
             m_buffer_size += size;
-            m_buffer_start = (char *)realloc(m_buffer_start, m_buffer_size);
+            wxASSERT_MSG( (wxFileSize_t)m_buffer_size == (size_t)m_buffer_size,
+                         _T("Suprisingly huge stream buffer writing, try 64bit malloc on 64bit platform") );
+            m_buffer_start = (char *)realloc(m_buffer_start, (size_t)m_buffer_size);
             if ( !m_buffer_start )
             {
                 // don't leak memory if realloc() failed
@@ -293,7 +299,9 @@
         }
     }
 
-    memcpy(m_buffer_pos, buffer, size);
+    wxASSERT_MSG( (wxFileSize_t)size == (size_t)size,
+                  _T("Suprisingly huge stream buffer writing, try 64bit malloc on 64bit platform") );
+    memcpy(m_buffer_pos, buffer, (size_t)size);
     m_buffer_pos += size;
 }
 
@@ -370,13 +378,13 @@
     return c;
 }
 
-size_t wxStreamBuffer::Read(void *buffer, size_t size)
+wxFileOffset wxStreamBuffer::Read(void *buffer, wxFileOffset size)
 {
     // lasterror is reset before all new IO calls
     if ( m_stream )
         m_stream->Reset();
 
-    size_t read;
+    wxFileOffset read;
     if ( !HasBuffer() )
     {
         wxInputStream *inStream = GetInputStream();
@@ -387,11 +395,11 @@
     }
     else // we have a buffer, use it
     {
-        size_t orig_size = size;
+        wxFileOffset orig_size = size;
 
         while ( size > 0 )
         {
-            size_t left = GetDataLeft();
+            wxFileOffset left = GetDataLeft();
 
             // if the requested number of bytes if greater than the buffer
             // size, read data in chunks
@@ -424,13 +432,13 @@
 }
 
 // this should really be called "Copy()"
-size_t wxStreamBuffer::Read(wxStreamBuffer *dbuf)
+wxFileOffset wxStreamBuffer::Read(wxStreamBuffer *dbuf)
 {
     wxCHECK_MSG( m_mode != write, 0, _T("can't read from this buffer") );
 
     char buf[BUF_TEMP_SIZE];
-    size_t nRead,
-           total = 0;
+    wxFileOffset nRead,
+                 total = 0;
 
     do
     {
@@ -446,7 +454,7 @@
     return total;
 }
 
-size_t wxStreamBuffer::Write(const void *buffer, size_t size)
+wxFileOffset wxStreamBuffer::Write(const void *buffer, wxFileOffset size)
 {
     if (m_stream)
     {
@@ -454,7 +462,7 @@
         m_stream->Reset();
     }
 
-    size_t ret;
+    wxFileOffset ret;
 
     if ( !HasBuffer() && m_fixed )
     {
@@ -467,11 +475,11 @@
     }
     else // we [may] have a buffer, use it
     {
-        size_t orig_size = size;
+        wxFileOffset orig_size = size;
 
         while ( size > 0 )
         {
-            size_t left = GetBytesLeft();
+            wxFileOffset left = GetBytesLeft();
 
             // if the buffer is too large to fit in the stream buffer, split
             // it in smaller parts
@@ -516,18 +524,18 @@
     return ret;
 }
 
-size_t wxStreamBuffer::Write(wxStreamBuffer *sbuf)
+wxFileOffset wxStreamBuffer::Write(wxStreamBuffer *sbuf)
 {
     wxCHECK_MSG( m_mode != read, 0, _T("can't write to this buffer") );
     wxCHECK_MSG( sbuf->m_mode != write, 0, _T("can't read from that buffer") );
 
     char buf[BUF_TEMP_SIZE];
-    size_t nWrite,
-           total = 0;
+    wxFileOffset nWrite,
+                 total = 0;
 
     do
     {
-        size_t nRead = sbuf->Read(buf, WXSIZEOF(buf));
+        wxFileOffset nRead = sbuf->Read(buf, WXSIZEOF(buf));
         if ( nRead )
         {
             nWrite = Write(buf, nRead);
@@ -546,7 +554,7 @@
             nWrite = 0;
         }
     }
-    while ( nWrite == WXSIZEOF(buf) );
+    while ( nWrite == (wxFileOffset)WXSIZEOF(buf) );
 
     return total;
 }
@@ -621,13 +629,13 @@
 
 wxFileOffset wxStreamBuffer::Tell() const
 {
-    wxFileSize_t pos;
+    wxFileOffset pos;
 
     // ask the stream for position if we have a real one
     if ( m_stream )
     {
         pos = m_stream->OnSysTell();
-        if ( pos == wxInvalidOffset )
+        if ( (wxFileSize_t)pos == wxInvalidOffset )
             return wxInvalidOffset;
     }
     else // no associated stream
@@ -698,13 +706,16 @@
     return GetLastError() == wxSTREAM_EOF;
 }
 
-char *wxInputStream::AllocSpaceWBack(size_t needed_size)
+char *wxInputStream::AllocSpaceWBack(wxFileOffset needed_size)
 {
     // get number of bytes left from previous wback buffer
-    size_t toget = m_wbacksize - m_wbackcur;
+    wxFileOffset toget = m_wbacksize - m_wbackcur;
 
     // allocate a buffer large enough to hold prev + new data
-    char *temp_b = (char *)malloc(needed_size + toget);
+    wxFileOffset size = needed_size + toget;
+    wxASSERT_MSG( (wxFileSize_t)size == (size_t)size,
+                  _T("Suprisingly huge space allocating in wxInputStream, try 64bit malloc on 64bit platform") );
+    char *temp_b = (char *)malloc((size_t)size);
 
     if (!temp_b)
         return NULL;
@@ -712,7 +723,9 @@
     // copy previous data (and free old buffer) if needed
     if (m_wback)
     {
-        memmove(temp_b + needed_size, m_wback + m_wbackcur, toget);
+        wxASSERT_MSG( (wxFileSize_t)toget == (size_t)toget,
+                      _T("Suprisingly huge space allocating in wxInputStream, try 64bit malloc on 64bit platform") );
+        memmove(temp_b + needed_size, m_wback + m_wbackcur, (size_t)toget);
         free(m_wback);
     }
 
@@ -724,13 +737,13 @@
     return m_wback;
 }
 
-size_t wxInputStream::GetWBack(void *buf, size_t size)
+wxFileOffset wxInputStream::GetWBack(void *buf, wxFileOffset size)
 {
     if (!m_wback)
         return 0;
 
     // how many bytes do we have in the buffer?
-    size_t toget = m_wbacksize - m_wbackcur;
+    wxFileOffset toget = m_wbacksize - m_wbackcur;
 
     if ( size < toget )
     {
@@ -739,7 +752,9 @@
     }
 
     // copy the data from the cache
-    memcpy(buf, m_wback + m_wbackcur, toget);
+    wxASSERT_MSG( (wxFileSize_t)toget == (size_t)toget,
+                  _T("Suprisingly huge memory usage in wxInputStream, try 64bit malloc on 64bit platform") );
+    memcpy(buf, m_wback + m_wbackcur, (size_t)toget);
 
     m_wbackcur += toget;
     if ( m_wbackcur == m_wbacksize )
@@ -755,7 +770,7 @@
     return toget;
 }
 
-size_t wxInputStream::Ungetch(const void *buf, size_t bufsize)
+wxFileOffset wxInputStream::Ungetch(const void *buf, wxFileOffset bufsize)
 {
     if ( m_lasterror != wxSTREAM_NO_ERROR && m_lasterror != wxSTREAM_EOF )
     {
@@ -771,7 +786,9 @@
     if ( m_lasterror == wxSTREAM_EOF )
         m_lasterror = wxSTREAM_NO_ERROR;
 
-    memcpy(ptrback, buf, bufsize);
+    wxASSERT_MSG( (wxFileSize_t)bufsize == (size_t)bufsize,
+                  _T("Suprisingly huge memory usage in wxInputStream, try 64bit malloc on 64bit platform") );
+    memcpy(ptrback, buf, (size_t)bufsize);
     return bufsize;
 }
 
@@ -787,12 +804,12 @@
     return c;
 }
 
-wxInputStream& wxInputStream::Read(void *buf, size_t size)
+wxInputStream& wxInputStream::Read(void *buf, wxFileOffset size)
 {
     char *p = (char *)buf;
     m_lastcount = 0;
 
-    size_t read = GetWBack(buf, size);
+    wxFileOffset read = GetWBack(buf, size);
     for ( ;; )
     {
         size -= read;
@@ -842,7 +859,7 @@
 
     for ( ;; )
     {
-        size_t bytes_read = Read(buf, WXSIZEOF(buf)).LastRead();
+        wxFileOffset bytes_read = Read(buf, WXSIZEOF(buf)).LastRead();
         if ( !bytes_read )
             break;
 
@@ -889,9 +906,9 @@
 
 wxFileOffset wxInputStream::TellI() const
 {
-    wxFileSize_t pos = OnSysTell();
+    wxFileOffset pos = OnSysTell();
 
-    if (pos != wxInvalidOffset)
+    if ((wxFileSize_t)pos != wxInvalidOffset)
         pos -= (m_wbacksize - m_wbackcur);
 
     return pos;
@@ -910,8 +927,8 @@
 {
 }
 
-size_t wxOutputStream::OnSysWrite(const void * WXUNUSED(buffer),
-                                  size_t WXUNUSED(bufsize))
+wxFileOffset wxOutputStream::OnSysWrite(const void * WXUNUSED(buffer),
+                                        wxFileOffset WXUNUSED(bufsize))
 {
     return 0;
 }
@@ -921,7 +938,7 @@
     Write(&c, sizeof(c));
 }
 
-wxOutputStream& wxOutputStream::Write(const void *buffer, size_t size)
+wxOutputStream& wxOutputStream::Write(const void *buffer, wxFileOffset size)
 {
     m_lastcount = OnSysWrite(buffer, size);
     return *this;
@@ -957,13 +974,13 @@
      m_currentPos = 0;
 }
 
-size_t wxCountingOutputStream::GetSize() const
+wxFileOffset wxCountingOutputStream::GetSize() const
 {
     return m_lastcount;
 }
 
-size_t wxCountingOutputStream::OnSysWrite(const void *WXUNUSED(buffer),
-                                          size_t size)
+wxFileOffset wxCountingOutputStream::OnSysWrite(const void *WXUNUSED(buffer),
+                                                wxFileOffset size)
 {
     m_currentPos += size;
     if (m_currentPos > m_lastcount)
@@ -1074,7 +1091,7 @@
     return m_i_streambuf->Peek();
 }
 
-wxInputStream& wxBufferedInputStream::Read(void *buf, size_t size)
+wxInputStream& wxBufferedInputStream::Read(void *buf, wxFileOffset size)
 {
     // reset the error flag
     Reset();
@@ -1090,7 +1107,7 @@
 
         // the call to wxStreamBuffer::Read() below will reset our m_lastcount,
         // so save it
-        size_t countOld = m_lastcount;
+        wxFileOffset countOld = m_lastcount;
 
         m_i_streambuf->Read(buf, size);
 
@@ -1122,15 +1139,15 @@
 
 wxFileOffset wxBufferedInputStream::TellI() const
 {
-    wxFileSize_t pos = m_i_streambuf->Tell();
+    wxFileOffset pos = m_i_streambuf->Tell();
 
-    if (pos != wxInvalidOffset)
+    if ((wxFileSize_t)pos != wxInvalidOffset)
         pos -= (m_wbacksize - m_wbackcur);
 
     return pos;
 }
 
-size_t wxBufferedInputStream::OnSysRead(void *buffer, size_t bufsize)
+wxFileOffset wxBufferedInputStream::OnSysRead(void *buffer, wxFileOffset bufsize)
 {
     return m_parent_i_stream->Read(buffer, bufsize).LastRead();
 }
@@ -1179,7 +1196,7 @@
     delete m_o_streambuf;
 }
 
-wxOutputStream& wxBufferedOutputStream::Write(const void *buffer, size_t size)
+wxOutputStream& wxBufferedOutputStream::Write(const void *buffer, wxFileOffset size)
 {
     m_lastcount = 0;
     m_o_streambuf->Write(buffer, size);
@@ -1203,7 +1220,7 @@
     m_parent_o_stream->Sync();
 }
 
-size_t wxBufferedOutputStream::OnSysWrite(const void *buffer, size_t bufsize)
+wxFileOffset wxBufferedOutputStream::OnSysWrite(const void *buffer, wxFileOffset bufsize)
 {
     return m_parent_o_stream->Write(buffer, bufsize).LastWrite();
 }
@@ -1218,7 +1235,7 @@
     return m_parent_o_stream->TellO();
 }
 
-size_t wxBufferedOutputStream::GetSize() const
+wxFileOffset wxBufferedOutputStream::GetSize() const
 {
    return m_parent_o_stream->GetSize() + m_o_streambuf->GetIntPosition();
 }
diff -u -3 -P -r wxWidgets/.\src\common\wfstream.cpp wxW/.\src\common\wfstream.cpp
--- wxWidgets/.\src\common\wfstream.cpp	Fri Oct 15 07:52:52 2004
+++ wxW/.\src\common\wfstream.cpp	Fri Oct 22 11:10:04 2004
@@ -62,12 +62,12 @@
         delete m_file;
 }
 
-size_t wxFileInputStream::GetSize() const
+wxFileOffset wxFileInputStream::GetSize() const
 {
     return m_file->Length();
 }
 
-size_t wxFileInputStream::OnSysRead(void *buffer, size_t size)
+wxFileOffset wxFileInputStream::OnSysRead(void *buffer, wxFileOffset size)
 {
     wxFileSize_t ret = m_file->Read(buffer, size);
 
@@ -151,9 +151,9 @@
     }
 }
 
-size_t wxFileOutputStream::OnSysWrite(const void *buffer, size_t size)
+wxFileOffset wxFileOutputStream::OnSysWrite(const void *buffer, wxFileOffset size)
 {
-    size_t ret = m_file->Write(buffer, size);
+    wxFileOffset ret = m_file->Write(buffer, size);
 
     m_lasterror = m_file->Error() ? wxSTREAM_WRITE_ERROR : wxSTREAM_NO_ERROR;
 
@@ -176,7 +176,7 @@
     m_file->Flush();
 }
 
-size_t wxFileOutputStream::GetSize() const
+wxFileOffset wxFileOutputStream::GetSize() const
 {
     return m_file->Length();
 }
@@ -227,18 +227,18 @@
         delete m_file;
 }
 
-size_t wxFFileInputStream::GetSize() const
+wxFileOffset wxFFileInputStream::GetSize() const
 {
     return m_file->Length();
 }
 
-size_t wxFFileInputStream::OnSysRead(void *buffer, size_t size)
+wxFileOffset wxFFileInputStream::OnSysRead(void *buffer, wxFileOffset size)
 {
-    wxFileSize_t ret = m_file->Read(buffer, size);
+    wxFileOffset ret = m_file->Read(buffer, size);
 
     if (m_file->Eof())
         m_lasterror = wxSTREAM_EOF;
-    if (ret == wxInvalidOffset)
+    if ((wxFileSize_t)ret == wxInvalidOffset)
     {
         m_lasterror = wxSTREAM_READ_ERROR;
         ret = 0;
@@ -311,9 +311,9 @@
     }
 }
 
-size_t wxFFileOutputStream::OnSysWrite(const void *buffer, size_t size)
+wxFileOffset wxFFileOutputStream::OnSysWrite(const void *buffer, wxFileOffset size)
 {
-    size_t ret = m_file->Write(buffer, size);
+    wxFileOffset ret = m_file->Write(buffer, size);
     if (m_file->Error())
         m_lasterror = wxSTREAM_WRITE_ERROR;
     else
@@ -343,7 +343,7 @@
     m_file->Flush();
 }
 
-size_t wxFFileOutputStream::GetSize() const
+wxFileOffset wxFFileOutputStream::GetSize() const
 {
     return m_file->Length();
 }
diff -u -3 -P -r wxWidgets/.\src\common\xpmdecod.cpp wxW/.\src\common\xpmdecod.cpp
--- wxWidgets/.\src\common\xpmdecod.cpp	Mon Oct 18 07:30:36 2004
+++ wxW/.\src\common\xpmdecod.cpp	Fri Oct 22 09:57:39 2004
@@ -134,7 +134,7 @@
 
 wxImage wxXPMDecoder::ReadFile(wxInputStream& stream)
 {
-    size_t length = stream.GetSize();
+    size_t length = (size_t)stream.GetSize();
     wxCHECK_MSG( length != 0, wxNullImage,
                  wxT("Cannot read XPM from stream of unknown size") );
 
diff -u -3 -P -r wxWidgets/.\src\common\zipstrm.cpp wxW/.\src\common\zipstrm.cpp
--- wxWidgets/.\src\common\zipstrm.cpp	Mon Sep 27 10:25:52 2004
+++ wxW/.\src\common\zipstrm.cpp	Fri Oct 22 11:12:57 2004
@@ -60,7 +60,7 @@
         m_lasterror = wxSTREAM_READ_ERROR;
         return;
     }
-    m_Size = (size_t)zinfo.uncompressed_size;
+    m_Size = (wxFileOffset)zinfo.uncompressed_size;
 }
 
 
@@ -77,19 +77,19 @@
 
 bool wxZipInputStream::Eof() const
 {
-    wxASSERT_MSG( m_Pos <= (wxFileOffset)m_Size,
+    wxASSERT_MSG( m_Pos <= m_Size,
                   _T("wxZipInputStream: invalid current position") );
 
-    return m_Pos >= (wxFileOffset)m_Size;
+    return m_Pos >= m_Size;
 }
 
 
-size_t wxZipInputStream::OnSysRead(void *buffer, size_t bufsize)
+wxFileOffset wxZipInputStream::OnSysRead(void *buffer, wxFileOffset bufsize)
 {
-    wxASSERT_MSG( m_Pos <= (wxFileOffset)m_Size,
+    wxASSERT_MSG( m_Pos <= m_Size,
                   _T("wxZipInputStream: invalid current position") );
 
-    if ( m_Pos >= (wxFileOffset)m_Size )
+    if ( m_Pos >= m_Size )
     {
         m_lasterror = wxSTREAM_EOF;
         return 0;
@@ -98,7 +98,9 @@
     if (m_Pos + bufsize > m_Size)
         bufsize = m_Size - m_Pos;
 
-    unzReadCurrentFile((unzFile)m_Archive, buffer, bufsize);
+    wxASSERT_MSG( (wxFileSize_t)bufsize == (size_t)bufsize,
+                  _T("Suprisingly huge zip reading.") );
+    unzReadCurrentFile((unzFile)m_Archive, buffer, (size_t)bufsize);
     m_Pos += bufsize;
 
     return bufsize;
@@ -123,7 +125,7 @@
         default : nextpos = m_Pos; break; /* just to fool compiler, never happens */
     }
 
-    size_t toskip;
+    wxFileOffset toskip;
     if ( nextpos > m_Pos )
     {
         toskip = nextpos - m_Pos;
@@ -139,6 +141,8 @@
         toskip = nextpos;
     }
 
+    wxASSERT_MSG( (wxFileSize_t)toskip == (size_t)toskip, _T("Huge zip stream not supported") );
+
     if ( toskip > 0 )
     {
         const size_t BUFSIZE = 4096;
@@ -146,7 +150,7 @@
         char buffer[BUFSIZE];
         while ( toskip > 0 )
         {
-            sz = wxMin(toskip, BUFSIZE);
+            sz = wxMin((size_t)toskip, BUFSIZE);
             unzReadCurrentFile((unzFile)m_Archive, buffer, sz);
             toskip -= sz;
         }
diff -u -3 -P -r wxWidgets/.\src\common\zstream.cpp wxW/.\src\common\zstream.cpp
--- wxWidgets/.\src\common\zstream.cpp	Fri Sep 24 20:03:52 2004
+++ wxW/.\src\common\zstream.cpp	Fri Oct 22 11:37:20 2004
@@ -108,8 +108,9 @@
   delete [] m_z_buffer;
 }
 
-size_t wxZlibInputStream::OnSysRead(void *buffer, size_t size)
+wxFileOffset wxZlibInputStream::OnSysRead(void *buffer, wxFileOffset size)
 {
+  wxASSERT_MSG((wxFileSize_t)size == (size_t)size, wxT("Huge zlib stream not supported"));
   wxASSERT_MSG(m_inflate && m_z_buffer, wxT("Inflate stream not open"));
 
   if (!m_inflate || !m_z_buffer)
@@ -119,13 +120,13 @@
 
   int err = Z_OK;
   m_inflate->next_out = (unsigned char *)buffer;
-  m_inflate->avail_out = size;
+  m_inflate->avail_out = (size_t)size;
 
   while (err == Z_OK && m_inflate->avail_out > 0) {
     if (m_inflate->avail_in == 0 && m_parent_i_stream->IsOk()) {
       m_parent_i_stream->Read(m_z_buffer, m_z_size);
       m_inflate->next_in = m_z_buffer;
-      m_inflate->avail_in = m_parent_i_stream->LastRead();
+      m_inflate->avail_in = (size_t)m_parent_i_stream->LastRead();
     }
     err = inflate(m_inflate, Z_SYNC_FLUSH);
   }
@@ -263,7 +264,7 @@
   while (err == Z_OK || err == Z_STREAM_END) {
     size_t len = m_z_size  - m_deflate->avail_out;
     if (len) {
-      if (m_parent_o_stream->Write(m_z_buffer, len).LastWrite() != len) {
+      if (m_parent_o_stream->Write(m_z_buffer, len).LastWrite() != (wxFileOffset)len) {
         m_lasterror = wxSTREAM_WRITE_ERROR;
         wxLogDebug(wxT("wxZlibOutputStream: Error writing to underlying stream"));
         break;
@@ -279,9 +280,10 @@
   }
 }
 
-size_t wxZlibOutputStream::OnSysWrite(const void *buffer, size_t size)
+wxFileOffset wxZlibOutputStream::OnSysWrite(const void *buffer, wxFileOffset size)
 {
   wxASSERT_MSG(m_deflate && m_z_buffer, wxT("Deflate stream not open"));
+  wxASSERT_MSG( (wxFileSize_t)size == (size_t)size, _T("Suprisingly huge writing in wxZlibOutputStream") );
 
   if (!m_deflate || !m_z_buffer)
     m_lasterror = wxSTREAM_WRITE_ERROR;
@@ -290,12 +292,12 @@
 
   int err = Z_OK;
   m_deflate->next_in = (unsigned char *)buffer;
-  m_deflate->avail_in = size;
+  m_deflate->avail_in = (size_t)size;
 
   while (err == Z_OK && m_deflate->avail_in > 0) {
     if (m_deflate->avail_out == 0) {
       m_parent_o_stream->Write(m_z_buffer, m_z_size);
-      if (m_parent_o_stream->LastWrite() != m_z_size) {
+      if (m_parent_o_stream->LastWrite() != (wxFileOffset)m_z_size) {
         m_lasterror = wxSTREAM_WRITE_ERROR;
         wxLogDebug(wxT("wxZlibOutputStream: Error writing to underlying stream"));
         break;
diff -u -3 -P -r wxWidgets/.\src\html\htmlfilt.cpp wxW/.\src\html\htmlfilt.cpp
--- wxWidgets/.\src\html\htmlfilt.cpp	Mon Sep 27 22:08:52 2004
+++ wxW/.\src\html\htmlfilt.cpp	Fri Oct 22 11:15:45 2004
@@ -33,13 +33,13 @@
 // utility function: read a wxString from a wxInputStream
 static void ReadString(wxString& str, wxInputStream* s, wxMBConv& conv)
 {
-    size_t streamSize = s->GetSize();
+    wxFileSize_t streamSize = s->GetSize();
 
-    if (streamSize == ~(size_t)0)
+    if (streamSize != wxInvalidOffset)
     {
         const size_t bufSize = 4095;
         char buffer[bufSize+1];
-        size_t lastRead;
+        wxFileOffset lastRead;
 
         do
         {
@@ -48,7 +48,7 @@
             buffer[lastRead] = 0;
             str.Append(wxString(buffer, conv));
         }
-        while (lastRead == bufSize);
+        while (lastRead == (wxFileOffset)bufSize);
     }
     else
     {
diff -u -3 -P -r wxWidgets/.\src\msw\utilsexc.cpp wxW/.\src\msw\utilsexc.cpp
--- wxWidgets/.\src\msw\utilsexc.cpp	Wed Sep 08 07:34:26 2004
+++ wxW/.\src\msw\utilsexc.cpp	Fri Oct 22 13:03:44 2004
@@ -167,7 +167,7 @@
     virtual bool CanRead() const;
 
 protected:
-    size_t OnSysRead(void *buffer, size_t len);
+    wxFileOffset OnSysRead(void *buffer, wxFileOffset len);
 
 protected:
     HANDLE m_hInput;
@@ -182,7 +182,7 @@
     virtual ~wxPipeOutputStream();
 
 protected:
-    size_t OnSysWrite(const void *buffer, size_t len);
+    wxFileOffset OnSysWrite(const void *buffer, wxFileOffset len);
 
 protected:
     HANDLE m_hOutput;
@@ -399,7 +399,7 @@
     return nAvailable != 0;
 }
 
-size_t wxPipeInputStream::OnSysRead(void *buffer, size_t len)
+wxFileOffset wxPipeInputStream::OnSysRead(void *buffer, wxFileOffset len)
 {
     if ( !IsOpened() )
     {
@@ -409,7 +409,7 @@
     }
 
     DWORD bytesRead;
-    if ( !::ReadFile(m_hInput, buffer, len, &bytesRead, NULL) )
+    if ( !::ReadFile(m_hInput, buffer, (DWORD)len, &bytesRead, NULL) )
     {
         m_lasterror = ::GetLastError() == ERROR_BROKEN_PIPE
                         ? wxSTREAM_EOF
@@ -449,7 +449,7 @@
     ::CloseHandle(m_hOutput);
 }
 
-size_t wxPipeOutputStream::OnSysWrite(const void *buffer, size_t len)
+wxFileOffset wxPipeOutputStream::OnSysWrite(const void *buffer, wxFileOffset len)
 {
     m_lasterror = wxSTREAM_NO_ERROR;
 
@@ -457,7 +457,7 @@
     while ( len > 0 )
     {
         DWORD chunkWritten;
-        if ( !::WriteFile(m_hOutput, buffer, len, &chunkWritten, NULL) )
+        if ( !::WriteFile(m_hOutput, buffer, (DWORD)len, &chunkWritten, NULL) )
         {
             m_lasterror = ::GetLastError() == ERROR_BROKEN_PIPE
                                 ? wxSTREAM_EOF
diff -u -3 -P -r wxWidgets/.\src\xml\xml.cpp wxW/.\src\xml\xml.cpp
--- wxWidgets/.\src\xml\xml.cpp	Mon Oct 11 18:43:35 2004
+++ wxW/.\src\xml\xml.cpp	Fri Oct 22 11:03:52 2004
@@ -540,9 +540,10 @@
     bool ok = true;
     do
     {
-        size_t len = stream.Read(buf, BUFSIZE).LastRead();
+        wxFileSize_t len = stream.Read(buf, BUFSIZE).LastRead();
+        wxASSERT_MSG(len == (size_t)len, wxT("Huge XML parsing input not supported"));
         done = (len < BUFSIZE);
-        if (!XML_Parse(parser, buf, len, done))
+        if (!XML_Parse(parser, buf, (size_t)len, done))
         {
             wxString error(XML_ErrorString(XML_GetErrorCode(parser)),
                            *wxConvCurrent);

 	  	 

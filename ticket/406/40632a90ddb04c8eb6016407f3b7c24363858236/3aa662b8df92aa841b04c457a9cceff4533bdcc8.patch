Index: include/wx/chkconf.h
===================================================================
--- include/wx/chkconf.h	(revision 63135)
+++ include/wx/chkconf.h	(working copy)
@@ -49,7 +49,7 @@
    this global setting determines what should we do if the setting FOO
    requires BAR and BAR is not set: we can either silently unset FOO as well
    (do this if you're trying to build the smallest possible library) or give an
-   error and abort (default as leads to least surprizing behaviour)
+   error and abort (default as leads to least surprising behaviour)
  */
 #define wxABORT_ON_CONFIG_ERROR
 
Index: interface/wx/scopedptr.h
===================================================================
--- interface/wx/scopedptr.h	(revision 63135)
+++ interface/wx/scopedptr.h	(working copy)
@@ -20,7 +20,7 @@
     deleted when the smart pointer goes out of scope. This class is different from
     the @c std::auto_ptr<> in so far as it doesn't provide copy constructor
     nor assignment operator. This limits what you can do with it but is much less
-    surprizing than the "destructive copy" behaviour of the standard class.
+    surprising than the "destructive copy" behaviour of the standard class.
 
     @b Example:
 
Index: src/common/wincmn.cpp
===================================================================
--- src/common/wincmn.cpp	(revision 63135)
+++ src/common/wincmn.cpp	(working copy)
@@ -1365,7 +1365,7 @@
         wxColour colBg = GetDefaultAttributes().colBg;
 
         // we must return some valid colour to avoid redoing this every time
-        // and also to avoid surprizing the applications written for older
+        // and also to avoid surprising the applications written for older
         // wxWidgets versions where GetBackgroundColour() always returned
         // something -- so give them something even if it doesn't make sense
         // for this window (e.g. it has a themed background)
Index: src/msw/listctrl.cpp
===================================================================
--- src/msw/listctrl.cpp	(revision 63135)
+++ src/msw/listctrl.cpp	(working copy)
@@ -2454,7 +2454,7 @@
                         // wrap to the beginning if necessary
                         if ( currentPos == maxPos )
                         {
-                            // somewhat surprizingly, LVFI_WRAP isn't set in
+                            // somewhat surprisingly, LVFI_WRAP isn't set in
                             // flags but we still should wrap
                             currentPos = 0;
                         }
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 63135)
+++ src/msw/window.cpp	(working copy)
@@ -2338,7 +2338,7 @@
             // combinations which are always processed)
             LONG lDlgCode = ::SendMessage(msg->hwnd, WM_GETDLGCODE, 0, 0);
 
-            // surprizingly, DLGC_WANTALLKEYS bit mask doesn't contain the
+            // surprisingly, DLGC_WANTALLKEYS bit mask doesn't contain the
             // DLGC_WANTTAB nor DLGC_WANTARROWS bits although, logically,
             // it, of course, implies them
             if ( lDlgCode & DLGC_WANTALLKEYS )
Index: src/osx/dialog_osx.cpp
===================================================================
--- src/osx/dialog_osx.cpp	(revision 63135)
+++ src/osx/dialog_osx.cpp	(working copy)
@@ -138,7 +138,7 @@
     return GetReturnCode();
 }
 
-// NB: this function (surprizingly) may be called for both modal and modeless
+// NB: this function (surprisingly) may be called for both modal and modeless
 //     dialogs and should work for both of them
 void wxDialog::EndModal(int retCode)
 {
Index: tests/strings/strings.cpp
===================================================================
--- tests/strings/strings.cpp	(revision 63135)
+++ tests/strings/strings.cpp	(working copy)
@@ -567,7 +567,7 @@
     { wxT("--1"), 0, Number_Invalid },
 
     { wxT("-1"), -1, Number_Signed | Number_Long },
-    // this is surprizing but consistent with strtoul() behaviour
+    // this is surprising but consistent with strtoul() behaviour
     { wxT("-1"), ULONG_MAX, Number_Unsigned | Number_Long },
 
     // this must overflow, even with 64 bit long

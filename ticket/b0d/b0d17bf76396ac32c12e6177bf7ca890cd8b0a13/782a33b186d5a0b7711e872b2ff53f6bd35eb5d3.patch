diff -uNr wxWidgets-pre-patch/include/wx/socket.h wxWidgets-post-patch/include/wx/socket.h
--- wxWidgets-pre-patch/include/wx/socket.h	2011-03-20 01:30:47.000000000 +0000
+++ wxWidgets-post-patch/include/wx/socket.h	2012-09-28 03:40:27.628285800 +0000
@@ -1,7 +1,7 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        wx/socket.h
 // Purpose:     Socket handling classes
-// Authors:     Guilhem Lavaux, Guillermo Rodriguez Garcia
+// Authors:     Guilhem Lavaux, Guillermo Rodriguez Garcia, Rob Bresalier
 // Modified by:
 // Created:     April 1997
 // RCS-ID:      $Id: socket.h 67254 2011-03-20 00:14:35Z DS $
@@ -77,7 +77,11 @@
     wxSOCKET_BLOCK = 4,
     wxSOCKET_REUSEADDR = 8,
     wxSOCKET_BROADCAST = 16,
-    wxSOCKET_NOBIND = 32
+    wxSOCKET_NOBIND = 32,
+    wxSOCKET_NOWAIT_READ = 64,
+    wxSOCKET_WAITALL_READ = 128,
+    wxSOCKET_NOWAIT_WRITE = 256,
+    wxSOCKET_WAITALL_WRITE = 512
 };
 
 typedef int wxSocketFlags;
@@ -123,6 +127,8 @@
     bool IsData() { return WaitForRead(0, 0); }
     bool IsDisconnected() const { return !IsConnected(); }
     wxUint32 LastCount() const { return m_lcount; }
+    wxUint32 LastReadCount() const { return m_lcount_read; }
+    wxUint32 LastWriteCount() const { return m_lcount_write; }
     wxSocketError LastError() const;
     void SaveState();
     void RestoreState();
@@ -171,6 +177,8 @@
     bool GetOption(int level, int optname, void *optval, int *optlen);
     bool SetOption(int level, int optname, const void *optval, int optlen);
     wxUint32 GetLastIOSize() const { return m_lcount; }
+    wxUint32 GetLastIOReadSize() const { return m_lcount_read; }
+    wxUint32 GetLastIOWriteSize() const { return m_lcount_write; }
 
     // event handling
     void *GetClientData() const { return m_clientData; }
@@ -254,6 +262,8 @@
     bool          m_writing;          // busy writing?
     bool          m_closed;           // was the other end closed?
     wxUint32      m_lcount;           // last IO transaction size
+    wxUint32      m_lcount_read;      // last IO transaction size of Read() direction.
+    wxUint32      m_lcount_write;     // last IO transaction size of Write() direction.
     unsigned long m_timeout;          // IO timeout value in seconds
                                       // (TODO: remove, wxSocketImpl has it too)
     wxList        m_states;           // stack of states (TODO: remove!)
diff -uNr wxWidgets-pre-patch/interface/wx/socket.h wxWidgets-post-patch/interface/wx/socket.h
--- wxWidgets-pre-patch/interface/wx/socket.h	2011-03-23 01:30:56.000000000 +0000
+++ wxWidgets-post-patch/interface/wx/socket.h	2012-09-28 03:40:27.737486000 +0000
@@ -572,7 +572,29 @@
     in the output buffer. This is the same as issuing exactly one nonblocking
     low-level call to @b recv() or @b send(). Note that @e nonblocking here
     refers to when the function returns, not to whether the GUI blocks during
-    this time.
+    this time.  Also note that this flag impacts both Read and Write
+    operations.  If it is desired to control Read independently of Write, for
+    example you want no wait on Read(), but you do want to wait on Write(), then
+    use wxSOCKET_NOWAIT_READ and wxSOCKET_NOWAIT_WRITE.
+
+    If @b wxSOCKET_NOWAIT_READ is specified, Read operations will return
+    immediately. Read operations will retrieve only available data. This is the same
+    as issuing exactly one nonblocking low-level call to @b recv().
+    Note that @e nonblocking here refers to when the function returns, not to whether
+    the GUI blocks during this time.  This flag should not be enabled if ReadMsg() is
+    going to be used (it will be ignored), if you do then thread-safety may be at risk.
+    Note that wxSOCKET_NOWAIT_READ impacts only Read operations and does not impact
+    Write operations, allowing Read and Write operations to be set differently.
+
+    If @b wxSOCKET_NOWAIT_WRITE is specified, Write operations will return immediately.
+    Write operations will write as much data as possible, depending on how much space is available
+    in the output buffer. This is the same as issuing exactly one nonblocking
+    low-level call to @b send(). Note that @e nonblocking here
+    refers to when the function returns, not to whether the GUI blocks during
+    this time.  This flag should not be enabled if WriteMsg() is
+    going to be used (it will be ignored), if you use it then thread safety may be at risk.
+    Note that wxSOCKET_NOWAIT_WRITE impacts only Write operations and does not impact
+    Write operations, allowing Read and Write operations to be set differently.
 
     If @b wxSOCKET_WAITALL is specified, IO calls won't return until ALL
     the data has been read or written (or until an error occurs), blocking if
@@ -580,7 +602,30 @@
     same as having a loop which makes as many blocking low-level calls to
     @b recv() or @b send() as needed so as to transfer all the data. Note
     that @e blocking here refers to when the function returns, not
-    to whether the GUI blocks during this time.
+    to whether the GUI blocks during this time.  Note that wxSOCKET_WAITALL
+    impacts both Read and Write operations.  If you desire to wait
+    for all on just Read operations, but not on Write operations, (or vice versa),
+    use wxSOCKET_WAITALL_READ or wxSOCKET_WAITALL_WRITE.
+
+    If @b wxSOCKET_WAITALL_READ is specified, Read operations won't
+    return until ALL the data has been read (or until an error occurs), blocking
+    if necessary, and issuing several low level calls if necessary.
+    This is the same as having a loop which makes as many blocking low-level calls to
+    @b recv() as needed so as to transfer all the data. Note
+    that @e blocking here refers to when the function returns, not
+    to whether the GUI blocks during this time.  Note that wxSOCKET_WAITALL_READ
+    only has an impact on Read operations, and has no impact on Write operations, allowing
+    Read and Write operations to have different settings.
+
+    If @b wxSOCKET_WAITALL_WRITE is specified, Write() and WriteMsg() calls won't
+    return until ALL the data has been written (or until an error occurs), blocking
+    if necessary, and issuing several low level calls if necessary.
+    This is the same as having a loop which makes as many blocking low-level calls to
+    @b send() as needed so as to transfer all the data. Note
+    that @e blocking here refers to when the function returns, not
+    to whether the GUI blocks during this time.  Note that wxSOCKET_WAITALL_WRITE
+    only has an impact on Write operations, and has no impact on Read operations, allowing
+    Read and Write operations to have different settings.
 
     The @b wxSOCKET_BLOCK flag controls whether the GUI blocks during
     IO operations. If this flag is specified, the socket will not yield
@@ -627,9 +672,13 @@
     wxSOCKET_BLOCK = 4,     ///< Block the GUI (do not yield) while reading/writing data.
     wxSOCKET_REUSEADDR = 8, ///< Allows the use of an in-use port.
     wxSOCKET_BROADCAST = 16, ///< Switches the socket to broadcast mode
-    wxSOCKET_NOBIND = 32    ///< Stops the socket from being bound to a specific
+    wxSOCKET_NOBIND = 32,   ///< Stops the socket from being bound to a specific
                             ///< adapter (normally used in conjunction with
                             ///< @b wxSOCKET_BROADCAST)
+    wxSOCKET_NOWAIT_READ = 64,    ///< Read as much data as possible and return immediately
+    wxSOCKET_WAITALL_READ = 128,  ///< Wait for all required data to be read unless an error occurs.
+    wxSOCKET_NOWAIT_WRITE = 256,   ///< Write as much data as possible and return immediately
+    wxSOCKET_WAITALL_WRITE = 512   ///< Wait for all required data to be written unless an error occurs.
 };
 
 
@@ -804,10 +853,39 @@
         Use this function to get the number of bytes actually transferred
         after using one of the following IO calls: Discard(), Peek(), Read(),
         ReadMsg(), Unread(), Write(), WriteMsg().
+        
+        @deprecated
+        This function is kept mostly for backwards compatibility.  Use
+        LastReadCount() or LastWriteCount() instead.  LastCount() is still
+        needed for use with less commonly used functions: Discard(),
+        Peek(), and Unread().
     */
     wxUint32 LastCount() const;
 
     /**
+        Returns the number of bytes read by the last Read() or ReadMsg()
+        call (receive direction only).
+
+        This function is thread-safe, in case Read() is executed in a
+        different thread than Write().  Use LastReadCount() instead of
+        LastCount() for this reason.
+        
+        Unlike LastCount(), the functions Discard(), Peek(), and Unread()
+        are currently not supported by LastReadCount().
+    */
+    wxUint32 LastReadCount() const;
+
+    /**
+        Returns the number of bytes written by the last Write() or WriteMsg()
+        call (transmit direction only).
+        
+        This function is thread-safe, in case Write() is executed in a
+        different thread than Read().  Use LastWriteCount() instead of
+        LastCount() for this reason.        
+    */
+    wxUint32 LastWriteCount() const;
+
+    /**
         Returns the last wxSocket error. See @ref wxSocketError .
 
         @note
@@ -936,7 +1014,7 @@
     /**
         Read up to the given number of bytes from the socket.
 
-        Use LastCount() to verify the number of bytes actually read.
+        Use LastReadCount() to verify the number of bytes actually read.
         Use Error() to determine if the operation succeeded.
 
         @param buffer
@@ -950,7 +1028,7 @@
             The exact behaviour of Read() depends on the combination of flags being used.
             For a detailed explanation, see SetFlags()
 
-        @see Error(), LastError(), LastCount(),
+        @see Error(), LastError(), LastReadCount(),
              SetFlags()
     */
     wxSocketBase& Read(void* buffer, wxUint32 nbytes);
@@ -962,7 +1040,7 @@
         bytes will be discarded. This function always waits for the buffer to
         be entirely filled, unless an error occurs.
 
-        Use LastCount() to verify the number of bytes actually read.
+        Use LastReadCount() to verify the number of bytes actually read.
 
         Use Error() to determine if the operation succeeded.
 
@@ -978,8 +1056,15 @@
             and it will always ignore the @b wxSOCKET_NOWAIT flag.
             The exact behaviour of ReadMsg() depends on the @b wxSOCKET_BLOCK flag.
             For a detailed explanation, see SetFlags().
+            For thread safety, in case ReadMsg() and WriteMsg() are called in
+            different threads, it is a good idea to call
+            SetFlags(wxSOCKET_WAITALL|wx_SOCKET_BLOCK) before the first calls
+            to ReadMsg() and WriteMsg() in different threads, as each of these
+            functions will call SetFlags() which performs read/modify/write.  By
+            setting these flags before the multi-threading, it will ensure that
+            they don't get reset by thread race conditions.
 
-        @see Error(), LastError(), LastCount(), SetFlags(), WriteMsg()
+        @see Error(), LastError(), LastReadCount(), SetFlags(), WriteMsg()
     */
     wxSocketBase& ReadMsg(void* buffer, wxUint32 nbytes);
 
@@ -1163,7 +1248,7 @@
     /**
         Write up to the given number of bytes to the socket.
 
-        Use LastCount() to verify the number of bytes actually written.
+        Use LastWriteCount() to verify the number of bytes actually written.
 
         Use Error() to determine if the operation succeeded.
 
@@ -1179,7 +1264,7 @@
         The exact behaviour of Write() depends on the combination of flags being used.
         For a detailed explanation, see SetFlags().
 
-        @see Error(), LastError(), LastCount(), SetFlags()
+        @see Error(), LastError(), LastWriteCount(), SetFlags()
     */
     wxSocketBase& Write(const void* buffer, wxUint32 nbytes);
 
@@ -1192,7 +1277,7 @@
         This function always waits for the entire buffer to be sent, unless an
         error occurs.
 
-        Use LastCount() to verify the number of bytes actually written.
+        Use LastWriteCount() to verify the number of bytes actually written.
 
         Use Error() to determine if the operation succeeded.
 
@@ -1209,8 +1294,15 @@
         it will always ignore the @b wxSOCKET_NOWAIT flag. The exact behaviour of
         WriteMsg() depends on the @b wxSOCKET_BLOCK flag. For a detailed explanation,
         see SetFlags().
+        For thread safety, in case ReadMsg() and WriteMsg() are called in
+        different threads, it is a good idea to call
+        SetFlags(wxSOCKET_WAITALL|wx_SOCKET_BLOCK) before the first calls
+        to ReadMsg() and WriteMsg() in different threads, as each of these
+        functions will call SetFlags() which performs read/modify/write.  By
+        setting these flags before the multi-threading, it will ensure that
+        they don't get reset by thread race conditions.
 
-        @see  Error(), LastError(), LastCount(), SetFlags(), ReadMsg()
+        @see  Error(), LastError(), LastWriteCount(), SetFlags(), ReadMsg()
 
     */
     wxSocketBase& WriteMsg(const void* buffer, wxUint32 nbytes);
@@ -1321,7 +1413,7 @@
     /**
         Write a buffer of @a nbytes bytes to the socket.
 
-        Use wxSocketBase::LastCount() to verify the number of bytes actually wrote.
+        Use wxSocketBase::LastWriteCount() to verify the number of bytes actually wrote.
         Use wxSocketBase::Error() to determine if the operation succeeded.
 
         @param address
diff -uNr wxWidgets-pre-patch/src/common/socket.cpp wxWidgets-post-patch/src/common/socket.cpp
--- wxWidgets-pre-patch/src/common/socket.cpp	2012-07-28 14:51:12.000000000 +0000
+++ wxWidgets-post-patch/src/common/socket.cpp	2012-09-28 03:40:27.534685600 +0000
@@ -1,7 +1,7 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:       src/common/socket.cpp
 // Purpose:    Socket handler classes
-// Authors:    Guilhem Lavaux, Guillermo Rodriguez Garcia
+// Authors:    Guilhem Lavaux, Guillermo Rodriguez Garcia, Rob Bresalier
 // Created:    April 1997
 // Copyright:  (C) 1999-1997, Guilhem Lavaux
 //             (C) 1999-2000, Guillermo Rodriguez Garcia
@@ -817,6 +817,8 @@
     m_writing      =
     m_closed       = false;
     m_lcount       = 0;
+    m_lcount_read  = 0;
+    m_lcount_write = 0;
     m_timeout      = 600;
     m_beingDeleted = false;
 
@@ -947,7 +949,8 @@
 {
     wxSocketReadGuard read(this);
 
-    m_lcount = DoRead(buffer, nbytes);
+    m_lcount_read = DoRead(buffer, nbytes);
+    m_lcount = m_lcount_read;
 
     return *this;
 }
@@ -983,7 +986,7 @@
             if ( m_impl->GetLastError() == wxSOCKET_WOULDBLOCK )
             {
                 // if we don't want to wait, just return immediately
-                if ( m_flags & wxSOCKET_NOWAIT )
+                if ( m_flags & (wxSOCKET_NOWAIT|wxSOCKET_NOWAIT_READ ))
                 {
                     // this shouldn't be counted as an error in this case
                     SetError(wxSOCKET_NOERROR);
@@ -1019,7 +1022,7 @@
             // we're not going to read anything else and so if we haven't read
             // anything (or not everything in wxSOCKET_WAITALL case) already,
             // signal an error
-            if ( (m_flags & wxSOCKET_WAITALL) || !total )
+            if ( (m_flags & (wxSOCKET_WAITALL|wxSOCKET_WAITALL_READ)) || !total )
                 SetError(wxSOCKET_IOERR);
             break;
         }
@@ -1028,7 +1031,7 @@
 
         // if we are happy to read something and not the entire nbytes bytes,
         // then we're done
-        if ( !(m_flags & wxSOCKET_WAITALL) )
+        if ( !(m_flags & (wxSOCKET_WAITALL|wxSOCKET_WAITALL_READ)) )
             break;
 
         nbytes -= ret;
@@ -1048,7 +1051,7 @@
 
     wxSocketReadGuard read(this);
 
-    wxSocketWaitModeChanger changeFlags(this, wxSOCKET_WAITALL);
+    wxSocketWaitModeChanger changeFlags(this, (wxSOCKET_WAITALL|wxSOCKET_WAITALL_READ));
 
     bool ok = false;
     if ( DoRead(&msg, sizeof(msg)) == sizeof(msg) )
@@ -1075,7 +1078,8 @@
                 len2 = 0;
 
             // Don't attempt to read if the msg was zero bytes long.
-            m_lcount = len ? DoRead(buffer, len) : 0;
+            m_lcount_read = len ? DoRead(buffer, len) : 0;
+            m_lcount = m_lcount_read;
 
             if ( len2 )
             {
@@ -1131,7 +1135,8 @@
 {
     wxSocketWriteGuard write(this);
 
-    m_lcount = DoWrite(buffer, nbytes);
+    m_lcount_write = DoWrite(buffer, nbytes);
+    m_lcount = m_lcount_write;
 
     return *this;
 }
@@ -1151,7 +1156,7 @@
     {
         if ( m_impl->m_stream && !m_connected )
         {
-            if ( (m_flags & wxSOCKET_WAITALL) || !total )
+            if ( (m_flags & (wxSOCKET_WAITALL|wxSOCKET_WAITALL_WRITE)) || !total )
                 SetError(wxSOCKET_IOERR);
             break;
         }
@@ -1161,7 +1166,7 @@
         {
             if ( m_impl->GetLastError() == wxSOCKET_WOULDBLOCK )
             {
-                if ( m_flags & wxSOCKET_NOWAIT )
+                if ( m_flags & (wxSOCKET_NOWAIT|wxSOCKET_NOWAIT_WRITE) )
                     break;
 
                 if ( !DoWaitWithTimeout(wxSOCKET_OUTPUT_FLAG) )
@@ -1181,7 +1186,7 @@
 
         total += ret;
 
-        if ( !(m_flags & wxSOCKET_WAITALL) )
+        if ( !(m_flags & (wxSOCKET_WAITALL|wxSOCKET_WAITALL_WRITE)) )
             break;
 
         nbytes -= ret;
@@ -1201,7 +1206,7 @@
 
     wxSocketWriteGuard write(this);
 
-    wxSocketWaitModeChanger changeFlags(this, wxSOCKET_WAITALL);
+    wxSocketWaitModeChanger changeFlags(this, (wxSOCKET_WAITALL|wxSOCKET_WAITALL_WRITE));
 
     msg.sig[0] = (unsigned char) 0xad;
     msg.sig[1] = (unsigned char) 0xde;
@@ -1216,8 +1221,9 @@
     bool ok = false;
     if ( DoWrite(&msg, sizeof(msg)) == sizeof(msg) )
     {
-        m_lcount = DoWrite(buffer, nbytes);
-        if ( m_lcount == nbytes )
+        m_lcount_write = DoWrite(buffer, nbytes);
+        m_lcount = m_lcount_write;
+        if ( m_lcount_write == nbytes )
         {
             msg.sig[0] = (unsigned char) 0xed;
             msg.sig[1] = (unsigned char) 0xfe;
diff -uNr wxWidgets-pre-patch/tests/install_vc9.txt wxWidgets-post-patch/tests/install_vc9.txt
--- wxWidgets-pre-patch/tests/install_vc9.txt	1970-01-01 00:00:00.000000000 +0000
+++ wxWidgets-post-patch/tests/install_vc9.txt	2012-09-28 03:40:27.893486200 +0000
@@ -0,0 +1,118 @@
+How To Build/Execute the Unit Tests for Microsoft Visual Studio 2008
+====================================================================
+By Rob Bresalier, September 27, 2012
+
+-------------------------------------
+Build wxWidgets Library from Trunk
+-------------------------------------
+Copy or Rename the setup0.h to setup.h, in this directory:
+
+E:\wx\wx-2.9.4-trunk-ref\include\wx\msw
+
+-----------------
+Download CPPUNIT:
+-----------------
+The unit tests need the CPPUNIT library.
+
+http://sourceforge.net/projects/cppunit/files/cppunit/1.12.1/cppunit-1.12.1.tar.gz/download?use_mirror=iweb
+
+For later steps, it helps if you download so a location so that 
+cppunit-1.12.1 and wxWidgets both have the same parent directory.
+
+------------------------------------------
+Convert CPPUNIT source to DOS line endings
+------------------------------------------
+
+If have cygwin, can do this as follows:
+
+cd to cppunit-1.12.1 directory
+find . -type f \( -name '*.c' -o -name '*.cpp' -o -name '*.h' \) -print0 | xargs -r0 unix2dos
+
+------------------------------------------------
+Modify Source File in CPPUNIT to build on VS2008
+------------------------------------------------
+From:
+http://hide1713.wordpress.com/2009/06/15/intergrade-cppunit-in-visual-studio-2008/
+
+File: cppunit-1.12.1\src\msvc6\testrunner\MsDevCallerListCtrl.cpp
+
+Modify this:
+#import "libid:80cc9f66-e7d8-4ddd-85b6-d9e6cd0e93e2" version("7.0") lcid("0") raw_interfaces_only named_guids
+
+to this:
+#import "libid:80cc9f66-e7d8-4ddd-85b6-d9e6cd0e93e2" version("9.0") lcid("0") raw_interfaces_only named_guids
+
+---------------------------------------
+Load CPPUNIT Test Workspace into VS2008
+---------------------------------------
+First time, load into VS2008 (File->Open->Project/Solution)
+
+...\cppunit-1.12.1\src\CppUnitLibraries.dsw
+
+Say "Yes to All" to convert all the project files to VS2008 format.
+
+After this conversion, whenever reloading the project load the 
+
+...\cppunit-1.12.1\src\CppUnitLibraries.sln
+
+-----------------------
+Build CPPUNIT in VS2008
+-----------------------
+
+Select the "Debug Unicode" or "Release Unicode" configuration and
+do "Build Solution"
+
+----------------------------
+Load wx Unit Tests in VS2008
+----------------------------
+Load the solution file:  .../tests/tests_vc9.sln
+
+--------------------------------------------
+Add include/lib paths for CPPUNIT to Project
+--------------------------------------------
+Must repeat this for both projects, and each configuration:
+
+Right click on "Test" project and click "Properties"
+
+Configuration Properties -> 
+    C/C++ -> 
+	    General -> 
+		    Additional Include Directories			
+Add:  ;.\..\..\cppunit-1.12.1\include
+
+(the .\..\.. assumes that cppunit-1.12.1 is at the same level as wxWidgets directory,
+ if this is not the case then adjust it accordingly).
+
+Configuration Properties -> 
+    C/C++ -> 
+	    Linker 
+		    -> General 
+			    -> Additional Library Directories
+Add:  ;.\..\..\cppunit-1.12.1\lib
+(the .\..\.. assumes that cppunit-1.12.1 is at the same level as wxWidgets directory,
+ if this is not the case then adjust it accordingly).
+
+------------------
+Build under VS2008
+------------------
+Select desired build configuration.
+Build the solution.
+
+----------------
+Execute the test
+----------------
+Look under the tests/vc_mswud or tests/vc_mswu directories, and find the executables
+test.exe and test_gui.exe.
+
+Not all the unit tests are all passing in the wxWidgets trunk.  Therefore, it is
+good to run the test on the wxWidgets source without your patches first, so you can
+see which tests are failing.  When running the tests, pipe the output to a file
+using 'tee', so you can see it on the screen and save it to a file at the same
+time.  Using cygwin, this would be done as:
+
+./test.exe 2>&1 | tee test_result.log
+./test_gui.exe 2>&1 | tee test_gui_result.log
+
+Perform a 'diff' of the test result logs from the trunk without any patches
+and the test results log with your patches applied to see if anything is
+broken.
diff -uNr wxWidgets-pre-patch/tests/net/socket.cpp wxWidgets-post-patch/tests/net/socket.cpp
--- wxWidgets-pre-patch/tests/net/socket.cpp	2010-11-05 12:59:32.000000000 +0000
+++ wxWidgets-post-patch/tests/net/socket.cpp	2012-09-28 03:40:27.815486100 +0000
@@ -1,7 +1,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Name:        tests/net/socket.cpp
 // Purpose:     wxSocket unit tests
-// Author:      Vadim Zeitlin
+// Author:      Vadim Zeitlin, Rob Bresalier
 // RCS-ID:      $Id: socket.cpp 65386 2010-08-22 22:16:05Z VZ $
 // Copyright:   (c) 2008 Vadim Zeitlin
 // Licence:     wxWindows licence
@@ -186,6 +186,7 @@
 
     CPPUNIT_ASSERT_EQUAL( wxSOCKET_NOERROR, sock->LastError() );
     CPPUNIT_ASSERT_EQUAL( WXSIZEOF(bufSmall), (size_t)sock->LastCount() );
+    CPPUNIT_ASSERT_EQUAL( WXSIZEOF(bufSmall), (size_t)sock->LastReadCount() );
 
 
     char bufBig[102400];
@@ -193,6 +194,7 @@
 
     CPPUNIT_ASSERT_EQUAL( wxSOCKET_NOERROR, sock->LastError() );
     CPPUNIT_ASSERT( WXSIZEOF(bufBig) >= sock->LastCount() );
+    CPPUNIT_ASSERT( WXSIZEOF(bufBig) >= sock->LastReadCount() );
 }
 
 void SocketTestCase::ReadBlock()
@@ -206,6 +208,7 @@
 
     CPPUNIT_ASSERT_EQUAL( wxSOCKET_NOERROR, sock->LastError() );
     CPPUNIT_ASSERT_EQUAL( WXSIZEOF(bufSmall), (size_t)sock->LastCount() );
+    CPPUNIT_ASSERT_EQUAL( WXSIZEOF(bufSmall), (size_t)sock->LastReadCount() );
 
 
     char bufBig[102400];
@@ -213,6 +216,7 @@
 
     CPPUNIT_ASSERT_EQUAL( wxSOCKET_NOERROR, sock->LastError() );
     CPPUNIT_ASSERT( WXSIZEOF(bufBig) >= sock->LastCount() );
+    CPPUNIT_ASSERT( WXSIZEOF(bufBig) >= sock->LastReadCount() );
 }
 
 void SocketTestCase::ReadNowait()
@@ -242,6 +246,7 @@
 
     CPPUNIT_ASSERT_EQUAL( wxSOCKET_NOERROR, sock->LastError() );
     CPPUNIT_ASSERT_EQUAL( WXSIZEOF(buf), (size_t)sock->LastCount() );
+    CPPUNIT_ASSERT_EQUAL( WXSIZEOF(buf), (size_t)sock->LastReadCount() );
 }
 
 void SocketTestCase::UrlTest()

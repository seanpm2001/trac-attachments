? macbuild
? radiantrect.patch
? include/.DS_Store
? install/.DS_Store
Index: include/wx/dc.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/dc.h,v
retrieving revision 1.44
diff -b -u -2 -r1.44 dc.h
--- include/wx/dc.h	2003/06/26 13:15:02	1.44
+++ include/wx/dc.h	2003/07/02 18:11:07
@@ -211,4 +211,7 @@
                      int fillStyle = wxODDEVEN_RULE);
 
+    void DrawGradiantRect(const wxRect &rect,wxColour clrFrom, wxColour clrTo =wxColour(255,255,255),
+                          bool hori = true, bool ascend = true, wxUint32 dwColorShades = 128);
+
     void DrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
         { DoDrawRectangle(x, y, width, height); }
Index: src/common/dcbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/dcbase.cpp,v
retrieving revision 1.17
diff -b -u -2 -r1.17 dcbase.cpp
--- src/common/dcbase.cpp	2003/03/17 11:28:29	1.17
+++ src/common/dcbase.cpp	2003/07/02 18:11:18
@@ -545,2 +545,90 @@
     CalcBoundingBox(x0 + width0, y0 + height);
 }
+
+void wxDCBase::DrawGradiantRect(const wxRect &rect,wxColour clrFrom, wxColour clrTo,
+                      bool hori, bool ascend, wxUint32 dwColorShades)
+{
+    wxColour kOldPenColour = m_pen.GetColour();
+
+    // Get the intensity values for the ending color
+    wxUint8 r1 = clrTo.Red(); // red
+    wxUint8 g1 = clrTo.Green(); // green
+    wxUint8 b1 = clrTo.Blue(); // blue
+
+    // Get the intensity values for the begining color
+    wxUint8 r2 = clrFrom.Red(); // red
+    wxUint8 g2 = clrFrom.Green(); // green
+    wxUint8 b2 = clrFrom.Blue(); // blue
+
+    wxUint8 r, g, b;
+
+    if(hori) //paint horizontal rect;
+    {
+        wxInt32 x = rect.GetWidth();
+        wxInt32 w = x;							// width of area to shade
+        wxInt32 xDelta = w/dwColorShades;	//height of one shade bend
+        if (xDelta < 1)
+            xDelta = 1;
+
+
+        while (x >= xDelta) {
+            x -= xDelta;
+            if (r1 > r2)
+                r = r1 - (r1-r2)*(w-x)/w;
+            else
+                r = r1 + (r2-r1)*(w-x)/w;
+
+            if (g1 > g2)
+                g = g1 - (g1-g2)*(w-x)/w;
+            else
+                g = g1 + (g2-g1)*(w-x)/w;
+
+            if (b1 > b2)
+                b = b1 - (b1-b2)*(w-x)/w;
+            else
+                b = b1 + (b2-b1)*(w-x)/w;
+
+            m_pen.SetColour(wxColour(r, g, b));
+            if(ascend) // Paint from  left to right;
+                DrawRectangle(rect.GetLeft()+x, rect.GetTop(), xDelta, rect.GetHeight());
+            else               // Paint from  right to left;
+                DrawRectangle(rect.GetRight()-x-xDelta, rect.GetTop(), xDelta, rect.GetHeight());
+        }
+    }
+    else    //paint vertical rect;
+    {
+        wxInt32 y = rect.GetHeight();
+        wxInt32 w = y;							// height of area to shade
+        wxInt32 yDelta = w/dwColorShades;	//height of one shade bend
+        if (yDelta < 1)
+            yDelta = 1;
+
+
+        //while (y >= yDelta) {
+        while (y > 0) {
+            y -= yDelta;
+            if (r1 > r2)
+                r = r1 - (r1-r2)*(w-y)/w;
+            else
+                r = r1 + (r2-r1)*(w-y)/w;
+
+            if (g1 > g2)
+                g = g1 - (g1-g2)*(w-y)/w;
+            else
+                g = g1 + (g2-g1)*(w-y)/w;
+
+            if (b1 > b2)
+                b = b1 - (b1-b2)*(w-y)/w;
+            else
+                b = b1 + (b2-b1)*(w-y)/w;
+
+            m_pen.SetColour(wxColour(r, g, b));
+            if(ascend) // Paint from  top to bottom;
+                DrawRectangle(rect.GetLeft(), rect.GetTop()+y, rect.GetWidth(), yDelta);
+            else       // Paint from  bottom to top;
+                DrawRectangle(rect.GetLeft(), rect.GetBottom()-y-yDelta, rect.GetWidth(), yDelta);
+        }
+    }
+
+    m_pen.SetColour(kOldPenColour);
+}

 	  	 

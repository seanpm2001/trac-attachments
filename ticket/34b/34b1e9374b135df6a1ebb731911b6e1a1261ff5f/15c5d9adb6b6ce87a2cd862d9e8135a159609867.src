
#include "wx/sizer.h"
#include "wx/stattext.h"
#include "wx/wx.h"


class gcClickCell : public wxPanel
{
  private:
    gcClickCell();         // undefined
  protected:
    wxStaticBoxSizer *      m_sizer;
    gcClickPanel *          m_clickPanel;
    bool                    m_mouseInCell;
    int                     m_clickCount;  // HACK.HACK.HACK - 10.7 counts things wrong apparently
    
    void        FinishSizing();
  public:
    gcClickCell(wxWindow * parent, wxString label);
    virtual ~gcClickCell();

    void OnMouse(wxMouseEvent & event);
    void RecursiveSetColour(wxColour c);

    virtual void NotifyEntering     ();
    virtual void NotifyLeaving      ();
    virtual void NotifyLeftDClick   ();
    virtual void NotifyLeftDown     ();
    virtual void NotifyLeftUp       ();

    void AddText(wxString text);
    void CenterText(wxString text);

    DECLARE_EVENT_TABLE()
};
#include "gc_clickpanel.h"
//------------------------------------------------------------------------------------

BEGIN_EVENT_TABLE(gcClickCell,wxPanel)
EVT_MOUSE_EVENTS(gcClickCell::OnMouse)
END_EVENT_TABLE()

gcClickCell::gcClickCell(wxWindow * parent, wxString label)
:   wxPanel(parent,-1,wxDefaultPosition,wxDefaultSize,wxTAB_TRAVERSAL),
    m_sizer(NULL),
    m_clickPanel(NULL),
    m_mouseInCell(false)
{
    m_sizer = new wxStaticBoxSizer(wxVERTICAL,this,label);
    m_clickPanel = new gcClickPanel(this);
    m_sizer->Add(m_clickPanel,1,wxEXPAND);
    RecursiveSetColour(wxNullColour);
}

gcClickCell::~gcClickCell()
{
}

void
gcClickCell::FinishSizing()
{
    m_clickPanel->FinishSizing();
    SetSizerAndFit(m_sizer);
}

void
gcClickCell::AddText(wxString text)
{
    assert(m_clickPanel != NULL);
    m_clickPanel->AddText(text);
}

void
gcClickCell::CenterText(wxString text)
{
    assert(m_clickPanel != NULL);
    m_clickPanel->CenterText(text);
}

void
gcClickCell::OnMouse(wxMouseEvent & event)
{
    event.Skip();
    if( !event.Moving())
    {
        // we need to process events from here, but
        // we're currently only using the events
        // from the wxStaticText objects that are
        // children of this cell. This isn't quite
        // right, but each of Linux/GTK, OS X, and
        // MSW treat the events for the gcClickCell
        // itself differently, so we're punting for
        // now with this.
        if(this == event.GetEventObject()) return;

        if ( event.Entering() )
        {
            m_mouseInCell = true;
            m_clickCount = 0;// HACK.HACK.HACK - 10.7 counts things wrong apparently
            NotifyEntering();
        }
        if ( event.Leaving() )
        {
            m_mouseInCell = false;
            m_clickCount = 0;// HACK.HACK.HACK - 10.7 counts things wrong apparently
            NotifyLeaving();
        }
        if ( event.LeftDClick() )
        {
            wxLogVerbose(" event.LeftDClick detected");  // JMDBG

            m_mouseInCell = true;
            if (m_clickCount > 1)// HACK.HACK.HACK - 10.7 counts things wrong apparently
            {
                NotifyLeftDClick();
                m_clickCount = 0;// HACK.HACK.HACK - 10.7 counts things wrong apparently
            }
        }
        if ( event.LeftDown() )
        {
            wxLogVerbose(" event.LeftDown detected");  // JMDBG
            m_mouseInCell = true;
            m_clickCount++;// HACK.HACK.HACK - 10.7 counts things wrong apparently

            NotifyLeftDown();
        }
        if ( event.LeftUp() )
        {
            // doesn't change m_mouseInCell because this cell
            // will get the event if the corresponding down
            // happened in the cell
            NotifyLeftUp();
        }
    }
}

void
gcClickCell::RecursiveSetColour(wxColour c)
{
    // EWFIX.P3 -- not calling SetBackgroundColour because
    // we don't appear to get click events until we pass
    // into the enclosed gcClickPanel. Turned it off since
    // it otherwise gives a false clue, but boy is this ugly.
    // SetBackgroundColour(c);

    m_clickPanel->RecursiveSetColour(c);
    Refresh();  // for MSW ??
}

void
gcClickCell::NotifyEntering()
{
    RecursiveSetColour(gccolor::enteredObject());
}

void
gcClickCell::NotifyLeaving()
{
    RecursiveSetColour(wxNullColour);

}

void
gcClickCell::NotifyLeftDClick()
{
    wxLogDebug("Implementation Error: override NotifyLeftDClick");
}

void
gcClickCell::NotifyLeftDown()
{
    RecursiveSetColour(gccolor::activeObject());
}

void
gcClickCell::NotifyLeftUp()
{
    // EWFIX.P3 -- there should be a better way to do this
    if(m_mouseInCell)
    {
        RecursiveSetColour(gccolor::enteredObject());
    }
    else
    {
        RecursiveSetColour(wxNullColour);
    }
}

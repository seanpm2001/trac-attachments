Index: window.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/os2/window.cpp,v
retrieving revision 1.158
diff -b -u -2 -r1.158 window.cpp
--- window.cpp	2005/07/22 12:57:02	1.158
+++ window.cpp	2005/08/02 23:08:04
@@ -144,5 +144,5 @@
 
 #ifdef  __WXDEBUG__
-    const char *wxGetMessageName(int message);
+    const wxChar *wxGetMessageName(int message);
 #endif  //__WXDEBUG__
 
@@ -4671,462 +4671,462 @@
 
 #ifdef __WXDEBUG__
-const char* wxGetMessageName( int nMessage )
+const wxChar* wxGetMessageName( int nMessage )
 {
     switch (nMessage)
     {
-        case 0x0000: return "WM_NULL";
-        case 0x0001: return "WM_CREATE";
-        case 0x0002: return "WM_DESTROY";
-        case 0x0004: return "WM_ENABLE";
-        case 0x0005: return "WM_SHOW";
-        case 0x0006: return "WM_MOVE";
-        case 0x0007: return "WM_SIZE";
-        case 0x0008: return "WM_ADJUSTWINDOWPOS";
-        case 0x0009: return "WM_CALCVALIDRECTS";
-        case 0x000A: return "WM_SETWINDOWPARAMS";
-        case 0x000B: return "WM_QUERYWINDOWPARAMS";
-        case 0x000C: return "WM_HITTEST";
-        case 0x000D: return "WM_ACTIVATE";
-        case 0x000F: return "WM_SETFOCUS";
-        case 0x0010: return "WM_SETSELECTION";
-        case 0x0011: return "WM_PPAINT";
-        case 0x0012: return "WM_PSETFOCUS";
-        case 0x0013: return "WM_PSYSCOLORCHANGE";
-        case 0x0014: return "WM_PSIZE";
-        case 0x0015: return "WM_PACTIVATE";
-        case 0x0016: return "WM_PCONTROL";
-        case 0x0020: return "WM_COMMAND";
-        case 0x0021: return "WM_SYSCOMMAND";
-        case 0x0022: return "WM_HELP";
-        case 0x0023: return "WM_PAINT";
-        case 0x0024: return "WM_TIMER";
-        case 0x0025: return "WM_SEM1";
-        case 0x0026: return "WM_SEM2";
-        case 0x0027: return "WM_SEM3";
-        case 0x0028: return "WM_SEM4";
-        case 0x0029: return "WM_CLOSE";
-        case 0x002A: return "WM_QUIT";
-        case 0x002B: return "WM_SYSCOLORCHANGE";
-        case 0x002D: return "WM_SYSVALUECHANGE";
-        case 0x002E: return "WM_APPTERMINATENOTIFY";
-        case 0x002F: return "WM_PRESPARAMCHANGED";
+        case 0x0000: return wxT("WM_NULL");
+        case 0x0001: return wxT("WM_CREATE");
+        case 0x0002: return wxT("WM_DESTROY");
+        case 0x0004: return wxT("WM_ENABLE");
+        case 0x0005: return wxT("WM_SHOW");
+        case 0x0006: return wxT("WM_MOVE");
+        case 0x0007: return wxT("WM_SIZE");
+        case 0x0008: return wxT("WM_ADJUSTWINDOWPOS");
+        case 0x0009: return wxT("WM_CALCVALIDRECTS");
+        case 0x000A: return wxT("WM_SETWINDOWPARAMS");
+        case 0x000B: return wxT("WM_QUERYWINDOWPARAMS");
+        case 0x000C: return wxT("WM_HITTEST");
+        case 0x000D: return wxT("WM_ACTIVATE");
+        case 0x000F: return wxT("WM_SETFOCUS");
+        case 0x0010: return wxT("WM_SETSELECTION");
+        case 0x0011: return wxT("WM_PPAINT");
+        case 0x0012: return wxT("WM_PSETFOCUS");
+        case 0x0013: return wxT("WM_PSYSCOLORCHANGE");
+        case 0x0014: return wxT("WM_PSIZE");
+        case 0x0015: return wxT("WM_PACTIVATE");
+        case 0x0016: return wxT("WM_PCONTROL");
+        case 0x0020: return wxT("WM_COMMAND");
+        case 0x0021: return wxT("WM_SYSCOMMAND");
+        case 0x0022: return wxT("WM_HELP");
+        case 0x0023: return wxT("WM_PAINT");
+        case 0x0024: return wxT("WM_TIMER");
+        case 0x0025: return wxT("WM_SEM1");
+        case 0x0026: return wxT("WM_SEM2");
+        case 0x0027: return wxT("WM_SEM3");
+        case 0x0028: return wxT("WM_SEM4");
+        case 0x0029: return wxT("WM_CLOSE");
+        case 0x002A: return wxT("WM_QUIT");
+        case 0x002B: return wxT("WM_SYSCOLORCHANGE");
+        case 0x002D: return wxT("WM_SYSVALUECHANGE");
+        case 0x002E: return wxT("WM_APPTERMINATENOTIFY");
+        case 0x002F: return wxT("WM_PRESPARAMCHANGED");
         // Control notification messages
-        case 0x0030: return "WM_CONTROL";
-        case 0x0031: return "WM_VSCROLL";
-        case 0x0032: return "WM_HSCROLL";
-        case 0x0033: return "WM_INITMENU";
-        case 0x0034: return "WM_MENUSELECT";
-        case 0x0035: return "WM_MENUSEND";
-        case 0x0036: return "WM_DRAWITEM";
-        case 0x0037: return "WM_MEASUREITEM";
-        case 0x0038: return "WM_CONTROLPOINTER";
-        case 0x003A: return "WM_QUERYDLGCODE";
-        case 0x003B: return "WM_INITDLG";
-        case 0x003C: return "WM_SUBSTITUTESTRING";
-        case 0x003D: return "WM_MATCHMNEMONIC";
-        case 0x003E: return "WM_SAVEAPPLICATION";
-        case 0x0129: return "WM_CTLCOLORCHANGE";
-        case 0x0130: return "WM_QUERYCTLTYPE";
+        case 0x0030: return wxT("WM_CONTROL");
+        case 0x0031: return wxT("WM_VSCROLL");
+        case 0x0032: return wxT("WM_HSCROLL");
+        case 0x0033: return wxT("WM_INITMENU");
+        case 0x0034: return wxT("WM_MENUSELECT");
+        case 0x0035: return wxT("WM_MENUSEND");
+        case 0x0036: return wxT("WM_DRAWITEM");
+        case 0x0037: return wxT("WM_MEASUREITEM");
+        case 0x0038: return wxT("WM_CONTROLPOINTER");
+        case 0x003A: return wxT("WM_QUERYDLGCODE");
+        case 0x003B: return wxT("WM_INITDLG");
+        case 0x003C: return wxT("WM_SUBSTITUTESTRING");
+        case 0x003D: return wxT("WM_MATCHMNEMONIC");
+        case 0x003E: return wxT("WM_SAVEAPPLICATION");
+        case 0x0129: return wxT("WM_CTLCOLORCHANGE");
+        case 0x0130: return wxT("WM_QUERYCTLTYPE");
         // Frame messages
-        case 0x0040: return "WM_FLASHWINDOW";
-        case 0x0041: return "WM_FORMATFRAME";
-        case 0x0042: return "WM_UPDATEFRAME";
-        case 0x0043: return "WM_FOCUSCHANGE";
-        case 0x0044: return "WM_SETBORDERSIZE";
-        case 0x0045: return "WM_TRACKFRAME";
-        case 0x0046: return "WM_MINMAXFRAME";
-        case 0x0047: return "WM_SETICON";
-        case 0x0048: return "WM_QUERYICON";
-        case 0x0049: return "WM_SETACCELTABLE";
-        case 0x004A: return "WM_QUERYACCELTABLE";
-        case 0x004B: return "WM_TRANSLATEACCEL";
-        case 0x004C: return "WM_QUERYTRACKINFO";
-        case 0x004D: return "WM_QUERYBORDERSIZE";
-        case 0x004E: return "WM_NEXTMENU";
-        case 0x004F: return "WM_ERASEBACKGROUND";
-        case 0x0050: return "WM_QUERYFRAMEINFO";
-        case 0x0051: return "WM_QUERYFOCUSCHAIN";
-        case 0x0052: return "WM_OWNERPOSCHANGE";
-        case 0x0053: return "WM_CACLFRAMERECT";
-        case 0x0055: return "WM_WINDOWPOSCHANGED";
-        case 0x0056: return "WM_ADJUSTFRAMEPOS";
-        case 0x0059: return "WM_QUERYFRAMECTLCOUNT";
-        case 0x005B: return "WM_QUERYHELPINFO";
-        case 0x005C: return "WM_SETHELPINFO";
-        case 0x005D: return "WM_ERROR";
-        case 0x005E: return "WM_REALIZEPALETTE";
+        case 0x0040: return wxT("WM_FLASHWINDOW");
+        case 0x0041: return wxT("WM_FORMATFRAME");
+        case 0x0042: return wxT("WM_UPDATEFRAME");
+        case 0x0043: return wxT("WM_FOCUSCHANGE");
+        case 0x0044: return wxT("WM_SETBORDERSIZE");
+        case 0x0045: return wxT("WM_TRACKFRAME");
+        case 0x0046: return wxT("WM_MINMAXFRAME");
+        case 0x0047: return wxT("WM_SETICON");
+        case 0x0048: return wxT("WM_QUERYICON");
+        case 0x0049: return wxT("WM_SETACCELTABLE");
+        case 0x004A: return wxT("WM_QUERYACCELTABLE");
+        case 0x004B: return wxT("WM_TRANSLATEACCEL");
+        case 0x004C: return wxT("WM_QUERYTRACKINFO");
+        case 0x004D: return wxT("WM_QUERYBORDERSIZE");
+        case 0x004E: return wxT("WM_NEXTMENU");
+        case 0x004F: return wxT("WM_ERASEBACKGROUND");
+        case 0x0050: return wxT("WM_QUERYFRAMEINFO");
+        case 0x0051: return wxT("WM_QUERYFOCUSCHAIN");
+        case 0x0052: return wxT("WM_OWNERPOSCHANGE");
+        case 0x0053: return wxT("WM_CACLFRAMERECT");
+        case 0x0055: return wxT("WM_WINDOWPOSCHANGED");
+        case 0x0056: return wxT("WM_ADJUSTFRAMEPOS");
+        case 0x0059: return wxT("WM_QUERYFRAMECTLCOUNT");
+        case 0x005B: return wxT("WM_QUERYHELPINFO");
+        case 0x005C: return wxT("WM_SETHELPINFO");
+        case 0x005D: return wxT("WM_ERROR");
+        case 0x005E: return wxT("WM_REALIZEPALETTE");
         // Clipboard messages
-        case 0x0060: return "WM_RENDERFMT";
-        case 0x0061: return "WM_RENDERALLFMTS";
-        case 0x0062: return "WM_DESTROYCLIPBOARD";
-        case 0x0063: return "WM_PAINTCLIPBOARD";
-        case 0x0064: return "WM_SIZECLIPBOARD";
-        case 0x0065: return "WM_HSCROLLCLIPBOARD";
-        case 0x0066: return "WM_VSCROLLCLIPBOARD";
-        case 0x0067: return "WM_DRAWCLIPBOARD";
+        case 0x0060: return wxT("WM_RENDERFMT");
+        case 0x0061: return wxT("WM_RENDERALLFMTS");
+        case 0x0062: return wxT("WM_DESTROYCLIPBOARD");
+        case 0x0063: return wxT("WM_PAINTCLIPBOARD");
+        case 0x0064: return wxT("WM_SIZECLIPBOARD");
+        case 0x0065: return wxT("WM_HSCROLLCLIPBOARD");
+        case 0x0066: return wxT("WM_VSCROLLCLIPBOARD");
+        case 0x0067: return wxT("WM_DRAWCLIPBOARD");
         // mouse messages
-        case 0x0070: return "WM_MOUSEMOVE";
-        case 0x0071: return "WM_BUTTON1DOWN";
-        case 0x0072: return "WM_BUTTON1UP";
-        case 0x0073: return "WM_BUTTON1DBLCLK";
-        case 0x0074: return "WM_BUTTON2DOWN";
-        case 0x0075: return "WM_BUTTON2UP";
-        case 0x0076: return "WM_BUTTON2DBLCLK";
-        case 0x0077: return "WM_BUTTON3DOWN";
-        case 0x0078: return "WM_BUTTON3UP";
-        case 0x0079: return "WM_BUTTON3DBLCLK";
-        case 0x007D: return "WM_MOUSEMAP";
-        case 0x007E: return "WM_VRNDISABLED";
-        case 0x007F: return "WM_VRNENABLED";
-        case 0x0410: return "WM_CHORD";
-        case 0x0411: return "WM_BUTTON1MOTIONSTART";
-        case 0x0412: return "WM_BUTTON1MOTIONEND";
-        case 0x0413: return "WM_BUTTON1CLICK";
-        case 0x0414: return "WM_BUTTON2MOTIONSTART";
-        case 0x0415: return "WM_BUTTON2MOTIONEND";
-        case 0x0416: return "WM_BUTTON2CLICK";
-        case 0x0417: return "WM_BUTTON3MOTIONSTART";
-        case 0x0418: return "WM_BUTTON3MOTIONEND";
-        case 0x0419: return "WM_BUTTON3CLICK";
-        case 0x0420: return "WM_BEGINDRAG";
-        case 0x0421: return "WM_ENDDRAG";
-        case 0x0422: return "WM_SINGLESELECT";
-        case 0x0423: return "WM_OPEN";
-        case 0x0424: return "WM_CONTEXTMENU";
-        case 0x0425: return "WM_CONTEXTHELP";
-        case 0x0426: return "WM_TEXTEDIT";
-        case 0x0427: return "WM_BEGINSELECT";
-        case 0x0228: return "WM_ENDSELECT";
-        case 0x0429: return "WM_PICKUP";
-        case 0x04C0: return "WM_PENFIRST";
-        case 0x04FF: return "WM_PENLAST";
-        case 0x0500: return "WM_MMPMFIRST";
-        case 0x05FF: return "WM_MMPMLAST";
-        case 0x0600: return "WM_STDDLGFIRST";
-        case 0x06FF: return "WM_STDDLGLAST";
-        case 0x0BD0: return "WM_BIDI_FIRST";
-        case 0x0BFF: return "WM_BIDI_LAST";
+        case 0x0070: return wxT("WM_MOUSEMOVE");
+        case 0x0071: return wxT("WM_BUTTON1DOWN");
+        case 0x0072: return wxT("WM_BUTTON1UP");
+        case 0x0073: return wxT("WM_BUTTON1DBLCLK");
+        case 0x0074: return wxT("WM_BUTTON2DOWN");
+        case 0x0075: return wxT("WM_BUTTON2UP");
+        case 0x0076: return wxT("WM_BUTTON2DBLCLK");
+        case 0x0077: return wxT("WM_BUTTON3DOWN");
+        case 0x0078: return wxT("WM_BUTTON3UP");
+        case 0x0079: return wxT("WM_BUTTON3DBLCLK");
+        case 0x007D: return wxT("WM_MOUSEMAP");
+        case 0x007E: return wxT("WM_VRNDISABLED");
+        case 0x007F: return wxT("WM_VRNENABLED");
+        case 0x0410: return wxT("WM_CHORD");
+        case 0x0411: return wxT("WM_BUTTON1MOTIONSTART");
+        case 0x0412: return wxT("WM_BUTTON1MOTIONEND");
+        case 0x0413: return wxT("WM_BUTTON1CLICK");
+        case 0x0414: return wxT("WM_BUTTON2MOTIONSTART");
+        case 0x0415: return wxT("WM_BUTTON2MOTIONEND");
+        case 0x0416: return wxT("WM_BUTTON2CLICK");
+        case 0x0417: return wxT("WM_BUTTON3MOTIONSTART");
+        case 0x0418: return wxT("WM_BUTTON3MOTIONEND");
+        case 0x0419: return wxT("WM_BUTTON3CLICK");
+        case 0x0420: return wxT("WM_BEGINDRAG");
+        case 0x0421: return wxT("WM_ENDDRAG");
+        case 0x0422: return wxT("WM_SINGLESELECT");
+        case 0x0423: return wxT("WM_OPEN");
+        case 0x0424: return wxT("WM_CONTEXTMENU");
+        case 0x0425: return wxT("WM_CONTEXTHELP");
+        case 0x0426: return wxT("WM_TEXTEDIT");
+        case 0x0427: return wxT("WM_BEGINSELECT");
+        case 0x0228: return wxT("WM_ENDSELECT");
+        case 0x0429: return wxT("WM_PICKUP");
+        case 0x04C0: return wxT("WM_PENFIRST");
+        case 0x04FF: return wxT("WM_PENLAST");
+        case 0x0500: return wxT("WM_MMPMFIRST");
+        case 0x05FF: return wxT("WM_MMPMLAST");
+        case 0x0600: return wxT("WM_STDDLGFIRST");
+        case 0x06FF: return wxT("WM_STDDLGLAST");
+        case 0x0BD0: return wxT("WM_BIDI_FIRST");
+        case 0x0BFF: return wxT("WM_BIDI_LAST");
         // keyboard input
-        case 0x007A: return "WM_CHAR";
-        case 0x007B: return "WM_VIOCHAR";
+        case 0x007A: return wxT("WM_CHAR");
+        case 0x007B: return wxT("WM_VIOCHAR");
         // DDE messages
-        case 0x00A0: return "WM_DDE_INITIATE";
-        case 0x00A1: return "WM_DDE_REQUEST";
-        case 0x00A2: return "WM_DDE_ACK";
-        case 0x00A3: return "WM_DDE_DATA";
-        case 0x00A4: return "WM_DDE_ADVISE";
-        case 0x00A5: return "WM_DDE_UNADVISE";
-        case 0x00A6: return "WM_DDE_POKE";
-        case 0x00A7: return "WM_DDE_EXECUTE";
-        case 0x00A8: return "WM_DDE_TERMINATE";
-        case 0x00A9: return "WM_DDE_INITIATEACK";
-        case 0x00AF: return "WM_DDE_LAST";
+        case 0x00A0: return wxT("WM_DDE_INITIATE");
+        case 0x00A1: return wxT("WM_DDE_REQUEST");
+        case 0x00A2: return wxT("WM_DDE_ACK");
+        case 0x00A3: return wxT("WM_DDE_DATA");
+        case 0x00A4: return wxT("WM_DDE_ADVISE");
+        case 0x00A5: return wxT("WM_DDE_UNADVISE");
+        case 0x00A6: return wxT("WM_DDE_POKE");
+        case 0x00A7: return wxT("WM_DDE_EXECUTE");
+        case 0x00A8: return wxT("WM_DDE_TERMINATE");
+        case 0x00A9: return wxT("WM_DDE_INITIATEACK");
+        case 0x00AF: return wxT("WM_DDE_LAST");
         // Buttons
-        case 0x0120: return "BM_CLICK";
-        case 0x0121: return "BM_QUERYCHECKINDEX";
-        case 0x0122: return "BM_QUERYHILITE";
-        case 0x0123: return "BM_SETHILITE";
-        case 0x0124: return "BM_QUERYCHECK";
-        case 0x0125: return "BM_SETCHECK";
-        case 0x0126: return "BM_SETDEFAULT";
-        case 0x0128: return "BM_AUTOSIZE";
+        case 0x0120: return wxT("BM_CLICK");
+        case 0x0121: return wxT("BM_QUERYCHECKINDEX");
+        case 0x0122: return wxT("BM_QUERYHILITE");
+        case 0x0123: return wxT("BM_SETHILITE");
+        case 0x0124: return wxT("BM_QUERYCHECK");
+        case 0x0125: return wxT("BM_SETCHECK");
+        case 0x0126: return wxT("BM_SETDEFAULT");
+        case 0x0128: return wxT("BM_AUTOSIZE");
         // Combo boxes
-        case 0x029A: return "CBID_LIST";
-        case 0x029B: return "CBID_EDIT";
-        case 0x0170: return "CBM_SHOWLIST";
-        case 0x0171: return "CBM_HILITE";
-        case 0x0172: return "CBM_ISLISTSHOWING";
+        case 0x029A: return wxT("CBID_LIST");
+        case 0x029B: return wxT("CBID_EDIT");
+        case 0x0170: return wxT("CBM_SHOWLIST");
+        case 0x0171: return wxT("CBM_HILITE");
+        case 0x0172: return wxT("CBM_ISLISTSHOWING");
         // Edit fields
-        case 0x0140: return "EM_QUERYCHANGED";
-        case 0x0141: return "EM_QUERYSEL";
-        case 0x0142: return "EM_SETSEL";
-        case 0x0143: return "EM_SETTEXTLIMIT";
-        case 0x0144: return "EM_CUT";
-        case 0x0145: return "EM_COPY";
-        case 0x0146: return "EM_CLEAR";
-        case 0x0147: return "EM_PASTE";
-        case 0x0148: return "EM_QUERYFIRSTCHAR";
-        case 0x0149: return "EM_SETFIRSTCHAR";
-        case 0x014A: return "EM_QUERYREADONLY";
-        case 0x014B: return "EM_SETREADONLY";
-        case 0x014C: return "EM_SETINSERTMODE";
+        case 0x0140: return wxT("EM_QUERYCHANGED");
+        case 0x0141: return wxT("EM_QUERYSEL");
+        case 0x0142: return wxT("EM_SETSEL");
+        case 0x0143: return wxT("EM_SETTEXTLIMIT");
+        case 0x0144: return wxT("EM_CUT");
+        case 0x0145: return wxT("EM_COPY");
+        case 0x0146: return wxT("EM_CLEAR");
+        case 0x0147: return wxT("EM_PASTE");
+        case 0x0148: return wxT("EM_QUERYFIRSTCHAR");
+        case 0x0149: return wxT("EM_SETFIRSTCHAR");
+        case 0x014A: return wxT("EM_QUERYREADONLY");
+        case 0x014B: return wxT("EM_SETREADONLY");
+        case 0x014C: return wxT("EM_SETINSERTMODE");
         // Listboxes
-        case 0x0160: return "LM_QUERYITEMCOUNT";
-        case 0x0161: return "LM_INSERTITEM";
-        case 0x0162: return "LM_SETOPENINDEX";
-        case 0x0163: return "LM_DELETEITEM";
-        case 0x0164: return "LM_SELECTITEM";
-        case 0x0165: return "LM_QUERYSELECTION";
-        case 0x0166: return "LM_SETITEMTEXT";
-        case 0x0167: return "LM_QUERYITEMTEXTLENGTH";
-        case 0x0168: return "LM_QUERYITEMTEXT";
-        case 0x0169: return "LM_SETITEMHANDLE";
-        case 0x016A: return "LM_QUERYITEMHANDLE";
-        case 0x016B: return "LM_SEARCHSTRING";
-        case 0x016C: return "LM_SETITEMHEIGHT";
-        case 0x016D: return "LM_QUERYTOPINDEX";
-        case 0x016E: return "LM_DELETEALL";
-        case 0x016F: return "LM_INSERTMULITEMS";
-        case 0x0660: return "LM_SETITEMWIDTH";
+        case 0x0160: return wxT("LM_QUERYITEMCOUNT");
+        case 0x0161: return wxT("LM_INSERTITEM");
+        case 0x0162: return wxT("LM_SETOPENINDEX");
+        case 0x0163: return wxT("LM_DELETEITEM");
+        case 0x0164: return wxT("LM_SELECTITEM");
+        case 0x0165: return wxT("LM_QUERYSELECTION");
+        case 0x0166: return wxT("LM_SETITEMTEXT");
+        case 0x0167: return wxT("LM_QUERYITEMTEXTLENGTH");
+        case 0x0168: return wxT("LM_QUERYITEMTEXT");
+        case 0x0169: return wxT("LM_SETITEMHANDLE");
+        case 0x016A: return wxT("LM_QUERYITEMHANDLE");
+        case 0x016B: return wxT("LM_SEARCHSTRING");
+        case 0x016C: return wxT("LM_SETITEMHEIGHT");
+        case 0x016D: return wxT("LM_QUERYTOPINDEX");
+        case 0x016E: return wxT("LM_DELETEALL");
+        case 0x016F: return wxT("LM_INSERTMULITEMS");
+        case 0x0660: return wxT("LM_SETITEMWIDTH");
         // Menus
-        case 0x0180: return "MM_INSERTITEM";
-        case 0x0181: return "MM_DELETEITEM";
-        case 0x0182: return "MM_QUERYITEM";
-        case 0x0183: return "MM_SETITEM";
-        case 0x0184: return "MM_QUERYITEMCOUNT";
-        case 0x0185: return "MM_STARTMENUMODE";
-        case 0x0186: return "MM_ENDMENUMODE";
-        case 0x0188: return "MM_REMOVEITEM";
-        case 0x0189: return "MM_SELECTITEM";
-        case 0x018A: return "MM_QUERYSELITEMID";
-        case 0x018B: return "MM_QUERYITEMTEXT";
-        case 0x018C: return "MM_QUERYITEMTEXTLENGTH";
-        case 0x018D: return "MM_SETITEMHANDLE";
-        case 0x018E: return "MM_SETITEMTEXT";
-        case 0x018F: return "MM_ITEMPOSITIONFROMID";
-        case 0x0190: return "MM_ITEMIDFROMPOSITION";
-        case 0x0191: return "MM_QUERYITEMATTR";
-        case 0x0192: return "MM_SETITEMATTR";
-        case 0x0193: return "MM_ISITEMVALID";
-        case 0x0194: return "MM_QUERYITEMRECT";
-        case 0x0431: return "MM_QUERYDEFAULTITEMID";
-        case 0x0432: return "MM_SETDEFAULTITEMID";
+        case 0x0180: return wxT("MM_INSERTITEM");
+        case 0x0181: return wxT("MM_DELETEITEM");
+        case 0x0182: return wxT("MM_QUERYITEM");
+        case 0x0183: return wxT("MM_SETITEM");
+        case 0x0184: return wxT("MM_QUERYITEMCOUNT");
+        case 0x0185: return wxT("MM_STARTMENUMODE");
+        case 0x0186: return wxT("MM_ENDMENUMODE");
+        case 0x0188: return wxT("MM_REMOVEITEM");
+        case 0x0189: return wxT("MM_SELECTITEM");
+        case 0x018A: return wxT("MM_QUERYSELITEMID");
+        case 0x018B: return wxT("MM_QUERYITEMTEXT");
+        case 0x018C: return wxT("MM_QUERYITEMTEXTLENGTH");
+        case 0x018D: return wxT("MM_SETITEMHANDLE");
+        case 0x018E: return wxT("MM_SETITEMTEXT");
+        case 0x018F: return wxT("MM_ITEMPOSITIONFROMID");
+        case 0x0190: return wxT("MM_ITEMIDFROMPOSITION");
+        case 0x0191: return wxT("MM_QUERYITEMATTR");
+        case 0x0192: return wxT("MM_SETITEMATTR");
+        case 0x0193: return wxT("MM_ISITEMVALID");
+        case 0x0194: return wxT("MM_QUERYITEMRECT");
+        case 0x0431: return wxT("MM_QUERYDEFAULTITEMID");
+        case 0x0432: return wxT("MM_SETDEFAULTITEMID");
         // Scrollbars
-        case 0x01A0: return "SBM_SETSCROLLBAR";
-        case 0x01A1: return "SBM_SETPOS";
-        case 0x01A2: return "SBM_QUERYPOS";
-        case 0x01A3: return "SBM_QUERYRANGE";
-        case 0x01A6: return "SBM_SETTHUMBSIZE";
+        case 0x01A0: return wxT("SBM_SETSCROLLBAR");
+        case 0x01A1: return wxT("SBM_SETPOS");
+        case 0x01A2: return wxT("SBM_QUERYPOS");
+        case 0x01A3: return wxT("SBM_QUERYRANGE");
+        case 0x01A6: return wxT("SBM_SETTHUMBSIZE");
 
         // Help messages
-        case 0x0F00: return "WM_HELPBASE";
-        case 0x0FFF: return "WM_HELPTOP";
+        case 0x0F00: return wxT("WM_HELPBASE");
+        case 0x0FFF: return wxT("WM_HELPTOP");
         // Beginning of user defined messages
-        case 0x1000: return "WM_USER";
+        case 0x1000: return wxT("WM_USER");
 
         // wxWidgets user defined types
 
         // listview
-        // case 0x1000 + 0: return "LVM_GETBKCOLOR";
-        case 0x1000 + 1: return "LVM_SETBKCOLOR";
-        case 0x1000 + 2: return "LVM_GETIMAGELIST";
-        case 0x1000 + 3: return "LVM_SETIMAGELIST";
-        case 0x1000 + 4: return "LVM_GETITEMCOUNT";
-        case 0x1000 + 5: return "LVM_GETITEMA";
-        case 0x1000 + 75: return "LVM_GETITEMW";
-        case 0x1000 + 6: return "LVM_SETITEMA";
-        case 0x1000 + 76: return "LVM_SETITEMW";
-        case 0x1000 + 7: return "LVM_INSERTITEMA";
-        case 0x1000 + 77: return "LVM_INSERTITEMW";
-        case 0x1000 + 8: return "LVM_DELETEITEM";
-        case 0x1000 + 9: return "LVM_DELETEALLITEMS";
-        case 0x1000 + 10: return "LVM_GETCALLBACKMASK";
-        case 0x1000 + 11: return "LVM_SETCALLBACKMASK";
-        case 0x1000 + 12: return "LVM_GETNEXTITEM";
-        case 0x1000 + 13: return "LVM_FINDITEMA";
-        case 0x1000 + 83: return "LVM_FINDITEMW";
-        case 0x1000 + 14: return "LVM_GETITEMRECT";
-        case 0x1000 + 15: return "LVM_SETITEMPOSITION";
-        case 0x1000 + 16: return "LVM_GETITEMPOSITION";
-        case 0x1000 + 17: return "LVM_GETSTRINGWIDTHA";
-        case 0x1000 + 87: return "LVM_GETSTRINGWIDTHW";
-        case 0x1000 + 18: return "LVM_HITTEST";
-        case 0x1000 + 19: return "LVM_ENSUREVISIBLE";
-        case 0x1000 + 20: return "LVM_SCROLL";
-        case 0x1000 + 21: return "LVM_REDRAWITEMS";
-        case 0x1000 + 22: return "LVM_ARRANGE";
-        case 0x1000 + 23: return "LVM_EDITLABELA";
-        case 0x1000 + 118: return "LVM_EDITLABELW";
-        case 0x1000 + 24: return "LVM_GETEDITCONTROL";
-        case 0x1000 + 25: return "LVM_GETCOLUMNA";
-        case 0x1000 + 95: return "LVM_GETCOLUMNW";
-        case 0x1000 + 26: return "LVM_SETCOLUMNA";
-        case 0x1000 + 96: return "LVM_SETCOLUMNW";
-        case 0x1000 + 27: return "LVM_INSERTCOLUMNA";
-        case 0x1000 + 97: return "LVM_INSERTCOLUMNW";
-        case 0x1000 + 28: return "LVM_DELETECOLUMN";
-        case 0x1000 + 29: return "LVM_GETCOLUMNWIDTH";
-        case 0x1000 + 30: return "LVM_SETCOLUMNWIDTH";
-        case 0x1000 + 31: return "LVM_GETHEADER";
-        case 0x1000 + 33: return "LVM_CREATEDRAGIMAGE";
-        case 0x1000 + 34: return "LVM_GETVIEWRECT";
-        case 0x1000 + 35: return "LVM_GETTEXTCOLOR";
-        case 0x1000 + 36: return "LVM_SETTEXTCOLOR";
-        case 0x1000 + 37: return "LVM_GETTEXTBKCOLOR";
-        case 0x1000 + 38: return "LVM_SETTEXTBKCOLOR";
-        case 0x1000 + 39: return "LVM_GETTOPINDEX";
-        case 0x1000 + 40: return "LVM_GETCOUNTPERPAGE";
-        case 0x1000 + 41: return "LVM_GETORIGIN";
-        case 0x1000 + 42: return "LVM_UPDATE";
-        case 0x1000 + 43: return "LVM_SETITEMSTATE";
-        case 0x1000 + 44: return "LVM_GETITEMSTATE";
-        case 0x1000 + 45: return "LVM_GETITEMTEXTA";
-        case 0x1000 + 115: return "LVM_GETITEMTEXTW";
-        case 0x1000 + 46: return "LVM_SETITEMTEXTA";
-        case 0x1000 + 116: return "LVM_SETITEMTEXTW";
-        case 0x1000 + 47: return "LVM_SETITEMCOUNT";
-        case 0x1000 + 48: return "LVM_SORTITEMS";
-        case 0x1000 + 49: return "LVM_SETITEMPOSITION32";
-        case 0x1000 + 50: return "LVM_GETSELECTEDCOUNT";
-        case 0x1000 + 51: return "LVM_GETITEMSPACING";
-        case 0x1000 + 52: return "LVM_GETISEARCHSTRINGA";
-        case 0x1000 + 117: return "LVM_GETISEARCHSTRINGW";
-        case 0x1000 + 53: return "LVM_SETICONSPACING";
-        case 0x1000 + 54: return "LVM_SETEXTENDEDLISTVIEWSTYLE";
-        case 0x1000 + 55: return "LVM_GETEXTENDEDLISTVIEWSTYLE";
-        case 0x1000 + 56: return "LVM_GETSUBITEMRECT";
-        case 0x1000 + 57: return "LVM_SUBITEMHITTEST";
-        case 0x1000 + 58: return "LVM_SETCOLUMNORDERARRAY";
-        case 0x1000 + 59: return "LVM_GETCOLUMNORDERARRAY";
-        case 0x1000 + 60: return "LVM_SETHOTITEM";
-        case 0x1000 + 61: return "LVM_GETHOTITEM";
-        case 0x1000 + 62: return "LVM_SETHOTCURSOR";
-        case 0x1000 + 63: return "LVM_GETHOTCURSOR";
-        case 0x1000 + 64: return "LVM_APPROXIMATEVIEWRECT";
-        case 0x1000 + 65: return "LVM_SETWORKAREA";
+        // case 0x1000 + 0: return wxT("LVM_GETBKCOLOR");
+        case 0x1000 + 1: return wxT("LVM_SETBKCOLOR");
+        case 0x1000 + 2: return wxT("LVM_GETIMAGELIST");
+        case 0x1000 + 3: return wxT("LVM_SETIMAGELIST");
+        case 0x1000 + 4: return wxT("LVM_GETITEMCOUNT");
+        case 0x1000 + 5: return wxT("LVM_GETITEMA");
+        case 0x1000 + 75: return wxT("LVM_GETITEMW");
+        case 0x1000 + 6: return wxT("LVM_SETITEMA");
+        case 0x1000 + 76: return wxT("LVM_SETITEMW");
+        case 0x1000 + 7: return wxT("LVM_INSERTITEMA");
+        case 0x1000 + 77: return wxT("LVM_INSERTITEMW");
+        case 0x1000 + 8: return wxT("LVM_DELETEITEM");
+        case 0x1000 + 9: return wxT("LVM_DELETEALLITEMS");
+        case 0x1000 + 10: return wxT("LVM_GETCALLBACKMASK");
+        case 0x1000 + 11: return wxT("LVM_SETCALLBACKMASK");
+        case 0x1000 + 12: return wxT("LVM_GETNEXTITEM");
+        case 0x1000 + 13: return wxT("LVM_FINDITEMA");
+        case 0x1000 + 83: return wxT("LVM_FINDITEMW");
+        case 0x1000 + 14: return wxT("LVM_GETITEMRECT");
+        case 0x1000 + 15: return wxT("LVM_SETITEMPOSITION");
+        case 0x1000 + 16: return wxT("LVM_GETITEMPOSITION");
+        case 0x1000 + 17: return wxT("LVM_GETSTRINGWIDTHA");
+        case 0x1000 + 87: return wxT("LVM_GETSTRINGWIDTHW");
+        case 0x1000 + 18: return wxT("LVM_HITTEST");
+        case 0x1000 + 19: return wxT("LVM_ENSUREVISIBLE");
+        case 0x1000 + 20: return wxT("LVM_SCROLL");
+        case 0x1000 + 21: return wxT("LVM_REDRAWITEMS");
+        case 0x1000 + 22: return wxT("LVM_ARRANGE");
+        case 0x1000 + 23: return wxT("LVM_EDITLABELA");
+        case 0x1000 + 118: return wxT("LVM_EDITLABELW");
+        case 0x1000 + 24: return wxT("LVM_GETEDITCONTROL");
+        case 0x1000 + 25: return wxT("LVM_GETCOLUMNA");
+        case 0x1000 + 95: return wxT("LVM_GETCOLUMNW");
+        case 0x1000 + 26: return wxT("LVM_SETCOLUMNA");
+        case 0x1000 + 96: return wxT("LVM_SETCOLUMNW");
+        case 0x1000 + 27: return wxT("LVM_INSERTCOLUMNA");
+        case 0x1000 + 97: return wxT("LVM_INSERTCOLUMNW");
+        case 0x1000 + 28: return wxT("LVM_DELETECOLUMN");
+        case 0x1000 + 29: return wxT("LVM_GETCOLUMNWIDTH");
+        case 0x1000 + 30: return wxT("LVM_SETCOLUMNWIDTH");
+        case 0x1000 + 31: return wxT("LVM_GETHEADER");
+        case 0x1000 + 33: return wxT("LVM_CREATEDRAGIMAGE");
+        case 0x1000 + 34: return wxT("LVM_GETVIEWRECT");
+        case 0x1000 + 35: return wxT("LVM_GETTEXTCOLOR");
+        case 0x1000 + 36: return wxT("LVM_SETTEXTCOLOR");
+        case 0x1000 + 37: return wxT("LVM_GETTEXTBKCOLOR");
+        case 0x1000 + 38: return wxT("LVM_SETTEXTBKCOLOR");
+        case 0x1000 + 39: return wxT("LVM_GETTOPINDEX");
+        case 0x1000 + 40: return wxT("LVM_GETCOUNTPERPAGE");
+        case 0x1000 + 41: return wxT("LVM_GETORIGIN");
+        case 0x1000 + 42: return wxT("LVM_UPDATE");
+        case 0x1000 + 43: return wxT("LVM_SETITEMSTATE");
+        case 0x1000 + 44: return wxT("LVM_GETITEMSTATE");
+        case 0x1000 + 45: return wxT("LVM_GETITEMTEXTA");
+        case 0x1000 + 115: return wxT("LVM_GETITEMTEXTW");
+        case 0x1000 + 46: return wxT("LVM_SETITEMTEXTA");
+        case 0x1000 + 116: return wxT("LVM_SETITEMTEXTW");
+        case 0x1000 + 47: return wxT("LVM_SETITEMCOUNT");
+        case 0x1000 + 48: return wxT("LVM_SORTITEMS");
+        case 0x1000 + 49: return wxT("LVM_SETITEMPOSITION32");
+        case 0x1000 + 50: return wxT("LVM_GETSELECTEDCOUNT");
+        case 0x1000 + 51: return wxT("LVM_GETITEMSPACING");
+        case 0x1000 + 52: return wxT("LVM_GETISEARCHSTRINGA");
+        case 0x1000 + 117: return wxT("LVM_GETISEARCHSTRINGW");
+        case 0x1000 + 53: return wxT("LVM_SETICONSPACING");
+        case 0x1000 + 54: return wxT("LVM_SETEXTENDEDLISTVIEWSTYLE");
+        case 0x1000 + 55: return wxT("LVM_GETEXTENDEDLISTVIEWSTYLE");
+        case 0x1000 + 56: return wxT("LVM_GETSUBITEMRECT");
+        case 0x1000 + 57: return wxT("LVM_SUBITEMHITTEST");
+        case 0x1000 + 58: return wxT("LVM_SETCOLUMNORDERARRAY");
+        case 0x1000 + 59: return wxT("LVM_GETCOLUMNORDERARRAY");
+        case 0x1000 + 60: return wxT("LVM_SETHOTITEM");
+        case 0x1000 + 61: return wxT("LVM_GETHOTITEM");
+        case 0x1000 + 62: return wxT("LVM_SETHOTCURSOR");
+        case 0x1000 + 63: return wxT("LVM_GETHOTCURSOR");
+        case 0x1000 + 64: return wxT("LVM_APPROXIMATEVIEWRECT");
+        case 0x1000 + 65: return wxT("LVM_SETWORKAREA");
 
         // tree view
-        case 0x1100 + 0: return "TVM_INSERTITEMA";
-        case 0x1100 + 50: return "TVM_INSERTITEMW";
-        case 0x1100 + 1: return "TVM_DELETEITEM";
-        case 0x1100 + 2: return "TVM_EXPAND";
-        case 0x1100 + 4: return "TVM_GETITEMRECT";
-        case 0x1100 + 5: return "TVM_GETCOUNT";
-        case 0x1100 + 6: return "TVM_GETINDENT";
-        case 0x1100 + 7: return "TVM_SETINDENT";
-        case 0x1100 + 8: return "TVM_GETIMAGELIST";
-        case 0x1100 + 9: return "TVM_SETIMAGELIST";
-        case 0x1100 + 10: return "TVM_GETNEXTITEM";
-        case 0x1100 + 11: return "TVM_SELECTITEM";
-        case 0x1100 + 12: return "TVM_GETITEMA";
-        case 0x1100 + 62: return "TVM_GETITEMW";
-        case 0x1100 + 13: return "TVM_SETITEMA";
-        case 0x1100 + 63: return "TVM_SETITEMW";
-        case 0x1100 + 14: return "TVM_EDITLABELA";
-        case 0x1100 + 65: return "TVM_EDITLABELW";
-        case 0x1100 + 15: return "TVM_GETEDITCONTROL";
-        case 0x1100 + 16: return "TVM_GETVISIBLECOUNT";
-        case 0x1100 + 17: return "TVM_HITTEST";
-        case 0x1100 + 18: return "TVM_CREATEDRAGIMAGE";
-        case 0x1100 + 19: return "TVM_SORTCHILDREN";
-        case 0x1100 + 20: return "TVM_ENSUREVISIBLE";
-        case 0x1100 + 21: return "TVM_SORTCHILDRENCB";
-        case 0x1100 + 22: return "TVM_ENDEDITLABELNOW";
-        case 0x1100 + 23: return "TVM_GETISEARCHSTRINGA";
-        case 0x1100 + 64: return "TVM_GETISEARCHSTRINGW";
-        case 0x1100 + 24: return "TVM_SETTOOLTIPS";
-        case 0x1100 + 25: return "TVM_GETTOOLTIPS";
+        case 0x1100 + 0: return wxT("TVM_INSERTITEMA");
+        case 0x1100 + 50: return wxT("TVM_INSERTITEMW");
+        case 0x1100 + 1: return wxT("TVM_DELETEITEM");
+        case 0x1100 + 2: return wxT("TVM_EXPAND");
+        case 0x1100 + 4: return wxT("TVM_GETITEMRECT");
+        case 0x1100 + 5: return wxT("TVM_GETCOUNT");
+        case 0x1100 + 6: return wxT("TVM_GETINDENT");
+        case 0x1100 + 7: return wxT("TVM_SETINDENT");
+        case 0x1100 + 8: return wxT("TVM_GETIMAGELIST");
+        case 0x1100 + 9: return wxT("TVM_SETIMAGELIST");
+        case 0x1100 + 10: return wxT("TVM_GETNEXTITEM");
+        case 0x1100 + 11: return wxT("TVM_SELECTITEM");
+        case 0x1100 + 12: return wxT("TVM_GETITEMA");
+        case 0x1100 + 62: return wxT("TVM_GETITEMW");
+        case 0x1100 + 13: return wxT("TVM_SETITEMA");
+        case 0x1100 + 63: return wxT("TVM_SETITEMW");
+        case 0x1100 + 14: return wxT("TVM_EDITLABELA");
+        case 0x1100 + 65: return wxT("TVM_EDITLABELW");
+        case 0x1100 + 15: return wxT("TVM_GETEDITCONTROL");
+        case 0x1100 + 16: return wxT("TVM_GETVISIBLECOUNT");
+        case 0x1100 + 17: return wxT("TVM_HITTEST");
+        case 0x1100 + 18: return wxT("TVM_CREATEDRAGIMAGE");
+        case 0x1100 + 19: return wxT("TVM_SORTCHILDREN");
+        case 0x1100 + 20: return wxT("TVM_ENSUREVISIBLE");
+        case 0x1100 + 21: return wxT("TVM_SORTCHILDRENCB");
+        case 0x1100 + 22: return wxT("TVM_ENDEDITLABELNOW");
+        case 0x1100 + 23: return wxT("TVM_GETISEARCHSTRINGA");
+        case 0x1100 + 64: return wxT("TVM_GETISEARCHSTRINGW");
+        case 0x1100 + 24: return wxT("TVM_SETTOOLTIPS");
+        case 0x1100 + 25: return wxT("TVM_GETTOOLTIPS");
 
         // header
-        case 0x1200 + 0: return "HDM_GETITEMCOUNT";
-        case 0x1200 + 1: return "HDM_INSERTITEMA";
-        case 0x1200 + 10: return "HDM_INSERTITEMW";
-        case 0x1200 + 2: return "HDM_DELETEITEM";
-        case 0x1200 + 3: return "HDM_GETITEMA";
-        case 0x1200 + 11: return "HDM_GETITEMW";
-        case 0x1200 + 4: return "HDM_SETITEMA";
-        case 0x1200 + 12: return "HDM_SETITEMW";
-        case 0x1200 + 5: return "HDM_LAYOUT";
-        case 0x1200 + 6: return "HDM_HITTEST";
-        case 0x1200 + 7: return "HDM_GETITEMRECT";
-        case 0x1200 + 8: return "HDM_SETIMAGELIST";
-        case 0x1200 + 9: return "HDM_GETIMAGELIST";
-        case 0x1200 + 15: return "HDM_ORDERTOINDEX";
-        case 0x1200 + 16: return "HDM_CREATEDRAGIMAGE";
-        case 0x1200 + 17: return "HDM_GETORDERARRAY";
-        case 0x1200 + 18: return "HDM_SETORDERARRAY";
-        case 0x1200 + 19: return "HDM_SETHOTDIVIDER";
+        case 0x1200 + 0: return wxT("HDM_GETITEMCOUNT");
+        case 0x1200 + 1: return wxT("HDM_INSERTITEMA");
+        case 0x1200 + 10: return wxT("HDM_INSERTITEMW");
+        case 0x1200 + 2: return wxT("HDM_DELETEITEM");
+        case 0x1200 + 3: return wxT("HDM_GETITEMA");
+        case 0x1200 + 11: return wxT("HDM_GETITEMW");
+        case 0x1200 + 4: return wxT("HDM_SETITEMA");
+        case 0x1200 + 12: return wxT("HDM_SETITEMW");
+        case 0x1200 + 5: return wxT("HDM_LAYOUT");
+        case 0x1200 + 6: return wxT("HDM_HITTEST");
+        case 0x1200 + 7: return wxT("HDM_GETITEMRECT");
+        case 0x1200 + 8: return wxT("HDM_SETIMAGELIST");
+        case 0x1200 + 9: return wxT("HDM_GETIMAGELIST");
+        case 0x1200 + 15: return wxT("HDM_ORDERTOINDEX");
+        case 0x1200 + 16: return wxT("HDM_CREATEDRAGIMAGE");
+        case 0x1200 + 17: return wxT("HDM_GETORDERARRAY");
+        case 0x1200 + 18: return wxT("HDM_SETORDERARRAY");
+        case 0x1200 + 19: return wxT("HDM_SETHOTDIVIDER");
 
         // tab control
-        case 0x1300 + 2: return "TCM_GETIMAGELIST";
-        case 0x1300 + 3: return "TCM_SETIMAGELIST";
-        case 0x1300 + 4: return "TCM_GETITEMCOUNT";
-        case 0x1300 + 5: return "TCM_GETITEMA";
-        case 0x1300 + 60: return "TCM_GETITEMW";
-        case 0x1300 + 6: return "TCM_SETITEMA";
-        case 0x1300 + 61: return "TCM_SETITEMW";
-        case 0x1300 + 7: return "TCM_INSERTITEMA";
-        case 0x1300 + 62: return "TCM_INSERTITEMW";
-        case 0x1300 + 8: return "TCM_DELETEITEM";
-        case 0x1300 + 9: return "TCM_DELETEALLITEMS";
-        case 0x1300 + 10: return "TCM_GETITEMRECT";
-        case 0x1300 + 11: return "TCM_GETCURSEL";
-        case 0x1300 + 12: return "TCM_SETCURSEL";
-        case 0x1300 + 13: return "TCM_HITTEST";
-        case 0x1300 + 14: return "TCM_SETITEMEXTRA";
-        case 0x1300 + 40: return "TCM_ADJUSTRECT";
-        case 0x1300 + 41: return "TCM_SETITEMSIZE";
-        case 0x1300 + 42: return "TCM_REMOVEIMAGE";
-        case 0x1300 + 43: return "TCM_SETPADDING";
-        case 0x1300 + 44: return "TCM_GETROWCOUNT";
-        case 0x1300 + 45: return "TCM_GETTOOLTIPS";
-        case 0x1300 + 46: return "TCM_SETTOOLTIPS";
-        case 0x1300 + 47: return "TCM_GETCURFOCUS";
-        case 0x1300 + 48: return "TCM_SETCURFOCUS";
-        case 0x1300 + 49: return "TCM_SETMINTABWIDTH";
-        case 0x1300 + 50: return "TCM_DESELECTALL";
+        case 0x1300 + 2: return wxT("TCM_GETIMAGELIST");
+        case 0x1300 + 3: return wxT("TCM_SETIMAGELIST");
+        case 0x1300 + 4: return wxT("TCM_GETITEMCOUNT");
+        case 0x1300 + 5: return wxT("TCM_GETITEMA");
+        case 0x1300 + 60: return wxT("TCM_GETITEMW");
+        case 0x1300 + 6: return wxT("TCM_SETITEMA");
+        case 0x1300 + 61: return wxT("TCM_SETITEMW");
+        case 0x1300 + 7: return wxT("TCM_INSERTITEMA");
+        case 0x1300 + 62: return wxT("TCM_INSERTITEMW");
+        case 0x1300 + 8: return wxT("TCM_DELETEITEM");
+        case 0x1300 + 9: return wxT("TCM_DELETEALLITEMS");
+        case 0x1300 + 10: return wxT("TCM_GETITEMRECT");
+        case 0x1300 + 11: return wxT("TCM_GETCURSEL");
+        case 0x1300 + 12: return wxT("TCM_SETCURSEL");
+        case 0x1300 + 13: return wxT("TCM_HITTEST");
+        case 0x1300 + 14: return wxT("TCM_SETITEMEXTRA");
+        case 0x1300 + 40: return wxT("TCM_ADJUSTRECT");
+        case 0x1300 + 41: return wxT("TCM_SETITEMSIZE");
+        case 0x1300 + 42: return wxT("TCM_REMOVEIMAGE");
+        case 0x1300 + 43: return wxT("TCM_SETPADDING");
+        case 0x1300 + 44: return wxT("TCM_GETROWCOUNT");
+        case 0x1300 + 45: return wxT("TCM_GETTOOLTIPS");
+        case 0x1300 + 46: return wxT("TCM_SETTOOLTIPS");
+        case 0x1300 + 47: return wxT("TCM_GETCURFOCUS");
+        case 0x1300 + 48: return wxT("TCM_SETCURFOCUS");
+        case 0x1300 + 49: return wxT("TCM_SETMINTABWIDTH");
+        case 0x1300 + 50: return wxT("TCM_DESELECTALL");
 
         // toolbar
-        case WM_USER+1000+1: return "TB_ENABLEBUTTON";
-        case WM_USER+1000+2: return "TB_CHECKBUTTON";
-        case WM_USER+1000+3: return "TB_PRESSBUTTON";
-        case WM_USER+1000+4: return "TB_HIDEBUTTON";
-        case WM_USER+1000+5: return "TB_INDETERMINATE";
-        case WM_USER+1000+9: return "TB_ISBUTTONENABLED";
-        case WM_USER+1000+10: return "TB_ISBUTTONCHECKED";
-        case WM_USER+1000+11: return "TB_ISBUTTONPRESSED";
-        case WM_USER+1000+12: return "TB_ISBUTTONHIDDEN";
-        case WM_USER+1000+13: return "TB_ISBUTTONINDETERMINATE";
-        case WM_USER+1000+17: return "TB_SETSTATE";
-        case WM_USER+1000+18: return "TB_GETSTATE";
-        case WM_USER+1000+19: return "TB_ADDBITMAP";
-        case WM_USER+1000+20: return "TB_ADDBUTTONS";
-        case WM_USER+1000+21: return "TB_INSERTBUTTON";
-        case WM_USER+1000+22: return "TB_DELETEBUTTON";
-        case WM_USER+1000+23: return "TB_GETBUTTON";
-        case WM_USER+1000+24: return "TB_BUTTONCOUNT";
-        case WM_USER+1000+25: return "TB_COMMANDTOINDEX";
-        case WM_USER+1000+26: return "TB_SAVERESTOREA";
-        case WM_USER+1000+76: return "TB_SAVERESTOREW";
-        case WM_USER+1000+27: return "TB_CUSTOMIZE";
-        case WM_USER+1000+28: return "TB_ADDSTRINGA";
-        case WM_USER+1000+77: return "TB_ADDSTRINGW";
-        case WM_USER+1000+29: return "TB_GETITEMRECT";
-        case WM_USER+1000+30: return "TB_BUTTONSTRUCTSIZE";
-        case WM_USER+1000+31: return "TB_SETBUTTONSIZE";
-        case WM_USER+1000+32: return "TB_SETBITMAPSIZE";
-        case WM_USER+1000+33: return "TB_AUTOSIZE";
-        case WM_USER+1000+35: return "TB_GETTOOLTIPS";
-        case WM_USER+1000+36: return "TB_SETTOOLTIPS";
-        case WM_USER+1000+37: return "TB_SETPARENT";
-        case WM_USER+1000+39: return "TB_SETROWS";
-        case WM_USER+1000+40: return "TB_GETROWS";
-        case WM_USER+1000+42: return "TB_SETCMDID";
-        case WM_USER+1000+43: return "TB_CHANGEBITMAP";
-        case WM_USER+1000+44: return "TB_GETBITMAP";
-        case WM_USER+1000+45: return "TB_GETBUTTONTEXTA";
-        case WM_USER+1000+75: return "TB_GETBUTTONTEXTW";
-        case WM_USER+1000+46: return "TB_REPLACEBITMAP";
-        case WM_USER+1000+47: return "TB_SETINDENT";
-        case WM_USER+1000+48: return "TB_SETIMAGELIST";
-        case WM_USER+1000+49: return "TB_GETIMAGELIST";
-        case WM_USER+1000+50: return "TB_LOADIMAGES";
-        case WM_USER+1000+51: return "TB_GETRECT";
-        case WM_USER+1000+52: return "TB_SETHOTIMAGELIST";
-        case WM_USER+1000+53: return "TB_GETHOTIMAGELIST";
-        case WM_USER+1000+54: return "TB_SETDISABLEDIMAGELIST";
-        case WM_USER+1000+55: return "TB_GETDISABLEDIMAGELIST";
-        case WM_USER+1000+56: return "TB_SETSTYLE";
-        case WM_USER+1000+57: return "TB_GETSTYLE";
-        case WM_USER+1000+58: return "TB_GETBUTTONSIZE";
-        case WM_USER+1000+59: return "TB_SETBUTTONWIDTH";
-        case WM_USER+1000+60: return "TB_SETMAXTEXTROWS";
-        case WM_USER+1000+61: return "TB_GETTEXTROWS";
-        case WM_USER+1000+41: return "TB_GETBITMAPFLAGS";
-    }
-
-    static char s_szBuf[128];
-    sprintf(s_szBuf, "<unknown message = %d>", nMessage);
-    return s_szBuf;
+        case WM_USER+1000+1: return wxT("TB_ENABLEBUTTON");
+        case WM_USER+1000+2: return wxT("TB_CHECKBUTTON");
+        case WM_USER+1000+3: return wxT("TB_PRESSBUTTON");
+        case WM_USER+1000+4: return wxT("TB_HIDEBUTTON");
+        case WM_USER+1000+5: return wxT("TB_INDETERMINATE");
+        case WM_USER+1000+9: return wxT("TB_ISBUTTONENABLED");
+        case WM_USER+1000+10: return wxT("TB_ISBUTTONCHECKED");
+        case WM_USER+1000+11: return wxT("TB_ISBUTTONPRESSED");
+        case WM_USER+1000+12: return wxT("TB_ISBUTTONHIDDEN");
+        case WM_USER+1000+13: return wxT("TB_ISBUTTONINDETERMINATE");
+        case WM_USER+1000+17: return wxT("TB_SETSTATE");
+        case WM_USER+1000+18: return wxT("TB_GETSTATE");
+        case WM_USER+1000+19: return wxT("TB_ADDBITMAP");
+        case WM_USER+1000+20: return wxT("TB_ADDBUTTONS");
+        case WM_USER+1000+21: return wxT("TB_INSERTBUTTON");
+        case WM_USER+1000+22: return wxT("TB_DELETEBUTTON");
+        case WM_USER+1000+23: return wxT("TB_GETBUTTON");
+        case WM_USER+1000+24: return wxT("TB_BUTTONCOUNT");
+        case WM_USER+1000+25: return wxT("TB_COMMANDTOINDEX");
+        case WM_USER+1000+26: return wxT("TB_SAVERESTOREA");
+        case WM_USER+1000+76: return wxT("TB_SAVERESTOREW");
+        case WM_USER+1000+27: return wxT("TB_CUSTOMIZE");
+        case WM_USER+1000+28: return wxT("TB_ADDSTRINGA");
+        case WM_USER+1000+77: return wxT("TB_ADDSTRINGW");
+        case WM_USER+1000+29: return wxT("TB_GETITEMRECT");
+        case WM_USER+1000+30: return wxT("TB_BUTTONSTRUCTSIZE");
+        case WM_USER+1000+31: return wxT("TB_SETBUTTONSIZE");
+        case WM_USER+1000+32: return wxT("TB_SETBITMAPSIZE");
+        case WM_USER+1000+33: return wxT("TB_AUTOSIZE");
+        case WM_USER+1000+35: return wxT("TB_GETTOOLTIPS");
+        case WM_USER+1000+36: return wxT("TB_SETTOOLTIPS");
+        case WM_USER+1000+37: return wxT("TB_SETPARENT");
+        case WM_USER+1000+39: return wxT("TB_SETROWS");
+        case WM_USER+1000+40: return wxT("TB_GETROWS");
+        case WM_USER+1000+42: return wxT("TB_SETCMDID");
+        case WM_USER+1000+43: return wxT("TB_CHANGEBITMAP");
+        case WM_USER+1000+44: return wxT("TB_GETBITMAP");
+        case WM_USER+1000+45: return wxT("TB_GETBUTTONTEXTA");
+        case WM_USER+1000+75: return wxT("TB_GETBUTTONTEXTW");
+        case WM_USER+1000+46: return wxT("TB_REPLACEBITMAP");
+        case WM_USER+1000+47: return wxT("TB_SETINDENT");
+        case WM_USER+1000+48: return wxT("TB_SETIMAGELIST");
+        case WM_USER+1000+49: return wxT("TB_GETIMAGELIST");
+        case WM_USER+1000+50: return wxT("TB_LOADIMAGES");
+        case WM_USER+1000+51: return wxT("TB_GETRECT");
+        case WM_USER+1000+52: return wxT("TB_SETHOTIMAGELIST");
+        case WM_USER+1000+53: return wxT("TB_GETHOTIMAGELIST");
+        case WM_USER+1000+54: return wxT("TB_SETDISABLEDIMAGELIST");
+        case WM_USER+1000+55: return wxT("TB_GETDISABLEDIMAGELIST");
+        case WM_USER+1000+56: return wxT("TB_SETSTYLE");
+        case WM_USER+1000+57: return wxT("TB_GETSTYLE");
+        case WM_USER+1000+58: return wxT("TB_GETBUTTONSIZE");
+        case WM_USER+1000+59: return wxT("TB_SETBUTTONWIDTH");
+        case WM_USER+1000+60: return wxT("TB_SETMAXTEXTROWS");
+        case WM_USER+1000+61: return wxT("TB_GETTEXTROWS");
+        case WM_USER+1000+41: return wxT("TB_GETBITMAPFLAGS");
+    }
+
+    static wxString s_szBuf;
+    s_szBuf.Printf(wxT("<unknown message = %d>"), message);
+    return s_szBuf.c_str();
 
 } // end of wxGetMessageName

 	  	 

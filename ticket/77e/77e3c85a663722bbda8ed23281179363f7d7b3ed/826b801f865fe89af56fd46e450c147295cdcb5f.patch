Index: docs/doxygen/overviews/eventhandling.h
===================================================================
--- docs/doxygen/overviews/eventhandling.h	(revision 59524)
+++ docs/doxygen/overviews/eventhandling.h	(working copy)
@@ -27,7 +27,7 @@
 Like with all the other GUI frameworks, the control of flow in wxWidgets
 applications is event-based: the program normally performs most of its actions
 in response to the events generated by the user. These events can be triggered
-by using the input devices (such as keyboard, mouse, joystick) directly or,
+by using an input device (such as a keyboard, a mouse, a joystick) directly or,
 more commonly, by a standard control which synthesizes such input events into
 higher level events: for example, a wxButton can generate a click event when
 the user presses the left mouse button on it and then releases it without
@@ -61,23 +61,29 @@
 @section overview_events_eventhandling Event Handling
 
 There are two principal ways to handle events in wxWidgets. One of them uses
-<em>event table</em> macros and allows you to define the connection between events
-and their handlers only statically, i.e., during program compilation. The other
-one uses wxEvtHandler::Connect() call and can be used to connect, and
-disconnect, the handlers dynamically, i.e., during run-time depending on some
-conditions. It also allows the direct connection of the events of one object to a
-handler method in another object. The static event tables can only handle
-events in the object where they are defined so using Connect() is more flexible
-than using the event tables. On the other hand, event tables are more succinct
-and centralize all event handlers connection in one place. You can either
-choose a single approach that you find preferable or freely combine both
-methods in your program in different classes or even in one and the same class,
-although this is probably sufficiently confusing to be a bad idea.
+<em>event table</em> macros and allows you to define the connection between
+events and their handlers only statically, i.e., during program compilation.
+The other one uses wxEvtHandler::Connect() or wxEvtHandler::Bind<>() calls and can
+be used to connect, and disconnect, the handlers dynamically, i.e., during
+run-time depending on some conditions. It also allows the direct connection of
+the events of one object to:
+@li A handler method in another object.
+@li An ordinary function like a static method or a global function.
+@li An arbitrary functor like boost::function<>.
 
+The static
+event tables can only handle events in the object where they are defined so
+using Connect() or Bind<>() is more flexible than using the event tables. On the other
+hand, event tables are more succinct and centralize all event handlers
+connection in one place. You can either choose a single approach that you find
+preferable or freely combine both methods in your program in different classes
+or even in one and the same class, although this is probably sufficiently
+confusing to be a bad idea.
+
 But before you make this choice, let us discuss these two ways in more
 detail. In the next section we provide a short introduction to handling the
 events using the event tables. Please see @ref overview_events_connect
-for the discussion of Connect().
+for the discussion of Connect() and @ref overview_events_bind for Bind<>().
 
 @subsection overview_events_eventtables Event Handling with Event Tables
 
@@ -205,7 +211,7 @@
 events.
 
 
-@subsection overview_events_connect Dynamic Event Handling
+@subsection overview_events_connect Dynamic Event Handling with Connect()
 
 As with the event tables, decide in which class you intend to
 handle the events first and, as before, this class must derive from
@@ -313,7 +319,144 @@
 need this extra power. On the other hand, event tables are still perfectly fine
 in simple situations where this extra flexibility is not needed.
 
+@subsection overview_events_bind Dynamic Event Handling with Bind<>()
 
+An even more flexible way of <em>binding</em> an event with a handler is with
+wxEvtHandler::Bind<>(). Connect() only allows you to connect to methods from
+wxEvtHandler derived classes, but with Bind<>() you can use:
+@li A method from another object.
+@li An ordinary function like a static method or a global function.
+@li An arbitrary functor like boost::function<>.
+
+So the example from Connect() can be rewritten like this:
+@code
+MyFrame::MyFrame()
+{
+      Bind( wxEVT_COMMAND_MENU_SELECTED, &MyFrame::OnExit, this, wxID_EXIT );
+}
+@endcode
+
+Note that the usage of the @c wxCommandEventHandler macro is not necessary
+anymore! Note also that you can't omit the @c this parameter. This is necessary
+to prevent code like this from compiling:
+
+@code
+// Pseudo code!
+
+struct Handler1 : wxEvtHandler
+{
+};
+
+struct Handler2 : wxEvtHandler
+{
+    void OnWhatEver( wxEvent & )
+};
+
+Handler1 handler1;
+handler1.Bind( &Handler2::OnWhatEver );
+
+// Handler2::OnWhatEver would be called with the Handler1 this pointer and Ugly
+// things will happen!
+@endcode
+
+But you can also use a method from a completely different object as an event
+handler:
+
+@code
+void MyFrameHandler::OnFrameExit( wxCommandEvent & )
+{
+    // Do something useful.
+}
+
+MyFrameHandler myFrameHandler;
+
+MyFrame::MyFrame()
+{
+      Bind( wxEVT_COMMAND_MENU_SELECTED, &MyFrameHandler::OnFrameExit,
+              &myFrameHandler, wxID_EXIT );
+}
+@endcode
+
+Note that @c MyFrameHandler doesn't need to derive from wxEvtHandler anymore.
+Keep in mind though, that then the lifetime of @c myFrameHandler is not
+tracked. So if it gets deleted before @c MyFrame, then @c MyFrame will hold a
+dangling pointer! 
+
+To use an ordinary function or a static method as an event handler you would
+write something like this:
+
+@code
+void HandleExit( wxCommandEvent & )
+{
+    // Do something useful
+}
+
+MyFrame::MyFrame()
+{
+    Bind( wxEVT_COMMAND_MENU_SELECTED, &HandleExit, wxID_EXIT );
+}
+@endcode
+
+Note that for clarity the address operator on @c HandleExit wasn't omitted.
+
+And last but not least, you can bind to an arbitrary functor like boost::function<>:
+
+@code
+void MyHandler::OnExit( wxCommandEvent & )
+{
+    // Do something useful
+}
+
+MyHandler myHandler;
+
+MyFrame::MyFrame()
+{
+    function< void ( wxCommandEvent & ) > exitHandler( bind( &MyHandler::OnExit, &myHandler, _1 ));
+
+    Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
+}
+@endcode
+
+Or you can define your own functor and use it as an event handler:
+
+@code
+
+struct MyFunctor
+{
+    void operator()( wxCommandEvent & )
+    {
+        // Do something useful
+    }
+};
+
+MyFunctor myFunctor;
+
+MyFrame::MyFrame()
+{
+    Bind( wxEVT_COMMAND_MENU_SELECTED, &myFunctor, wxID_EXIT );
+}
+@endcode
+
+With the aid of boost::bind<>() you can even use methods or functions which
+don't quite have the correct signature:
+
+@code
+void MyHandler::OnExit( int exitCode, wxCommandEvent &, wxString goodByeMessage )
+{
+    // Do something useful
+}
+
+MyHandler myHandler;
+
+MyFrame::MyFrame()
+{
+    function< void ( wxCommandEvent & ) > exitHandler(
+            bind( &MyHandler::OnExit, &myHandler, EXIT_FAILURE, _1, "Bye" ));
+
+    Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
+}
+@endcode
+
 @section overview_events_processing How Events are Processed
 
 The previous sections explain how to define event handlers but don't address
@@ -398,7 +541,7 @@
 details of event propagation up the window hierarchy are described in the
 next section.
 
-Also please notice that there are additional steps in the event handling for
+Also please note that there are additional steps in the event handling for
 the windows-making part of wxWidgets document-view framework, i.e.,
 wxDocParentFrame, wxDocChildFrame and their MDI equivalents wxDocMDIParentFrame
 and wxDocMDIChildFrame. The parent frame classes modify step (2) above to
@@ -458,9 +601,10 @@
 @subsection overview_events_custom_general General approach
 
 As each event is uniquely defined by its event type, defining a custom event
-starts with defining a new event type for it. This is done using
-wxDEFINE_EVENT() macro. As an event type is a variable, it can also be
-declared using wxDECLARE_EVENT() if necessary.
+starts with defining a new event type for it. This is done using the
+wxDEFINE_EVENT() macro. If you need to access the event from a different
+translation unit, then you probably need to declare it in a header with the
+wxDECLARE_EVENT() macro.
 
 The next thing to do is to decide whether you need to define a custom event
 class for events of this type or if you can reuse an existing class, typically
@@ -502,7 +646,8 @@
 // example of code handling the event with Connect():
 MyFrame::MyFrame()
 {
-    Connect(ID_MY_WINDOW, MY_EVENT, &MyFrame::OnMyEvent);
+    Connect(ID_MY_WINDOW, MY_EVENT, wxCommandHandler(MyFrame::OnMyEvent));
+    // Or: Bind(MY_EVENT, &MyFrame::OnMyEvent, this, ID_MY_WINDOW);
 }
 
 // example of code generating the event
@@ -561,16 +706,16 @@
 typedef void (wxEvtHandler::*MyPlotEventFunction)(MyPlotEvent&);
 #define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)
 
-// if your code is only built sing reasonably modern compilers, you could just
+// if your code is only built using reasonably modern compilers, you could just
 // do this instead:
 #define MyPlotEventHandler(func) (&func)
+// Or omit it completely if you only use Bind<>().
 
 // finally define a macro for creating the event table entries for the new
 // event type
 //
-// remember that you don't need this at all if you only use Connect() and that
-// you can replace MyPlotEventHandler(func) with just &func unless you use a
-// really old compiler
+// remember that you don't need this at all if you only use Bind<>() and that
+// you then can replace MyPlotEventHandler(func) with just &func.
 #define MY_EVT_PLOT_CLICK(id, func) \
     wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))
 
@@ -584,6 +729,7 @@
 MyFrame::MyFrame()
 {
     Connect(ID_MY_WINDOW, MY_PLOT_CLICKED, &MyFrame::OnPlot);
+    // Or: Bind(MY_PLOT_CLICKED, &MyFrame::OnPlot, this, ID_MY_WINDOW);
 }
 
 void MyFrame::OnPlot(MyPlotEvent& event)
@@ -626,7 +772,7 @@
 wxWidgets level, it should never be called directly as the event handlers are
 not part of wxWidgets API and should never be called directly.
 
-Finally, please notice that the event handlers themselves shouldn't be virtual.
+Finally, please note that the event handlers themselves shouldn't be virtual.
 They should always be non-virtual and usually private (as there is no need to
 make them public) methods of a wxEvtHandler-derived class.
 
Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 59524)
+++ include/wx/event.h	(working copy)
@@ -462,12 +462,10 @@
 };
 
 
-//
 // Create functors for the templatized events, either allocated on the heap for
-// wxNewXXX() variants (this is needed in wxEvtHandler::Connect() to store them
+// wxNewXXX() variants (this is needed in wxEvtHandler::Bind<>() to store them
 // in dynamic event table) or just by returning them as temporary objects (this
-// is enough for Disconnect() and we allocate unnecessary heap allocation like
-// this)
+// is enough for Unbind<>() and we avoid unnecessary heap allocation like this).
 
 
 // Create functors wrapping other functors (including functions):
@@ -2977,26 +2975,26 @@
     // Bind arbitrary functor (including just a function) to an event:
     template <typename EventTag, typename Functor>
     void Bind(const EventTag& eventType,
-              Functor func,
+              Functor functor,
               int winid = wxID_ANY,
               int lastId = wxID_ANY,
               wxObject *userData = NULL)
     {
         DoConnect(winid, lastId, eventType,
-                  wxNewEventFunctor(eventType, func),
+                  wxNewEventFunctor(eventType, functor),
                   userData);
     }
 
 
     template <typename EventTag, typename Functor>
     bool Unbind(const EventTag& eventType,
-                Functor func,
+                Functor functor,
                 int winid = wxID_ANY,
                 int lastId = wxID_ANY,
                 wxObject *userData = NULL)
     {
         return DoDisconnect(winid, lastId, eventType,
-                            wxMakeEventFunctor(eventType, func),
+                            wxMakeEventFunctor(eventType, functor),
                             userData);
     }
 
@@ -3004,31 +3002,29 @@
     // Bind a method of a class (called on the specified eventSink which must
     // be convertible to this class) object to an event:
 
-    template
-      <typename EventTag, typename Class, typename EventArg, typename ObjClass>
+    template <typename EventTag, typename Class, typename EventArg, typename ObjClass>
     void Bind(const EventTag &eventType,
-              void (Class::*func)(EventArg &),
+              void (Class::*method)(EventArg &),
               ObjClass *eventSink,
               int winid = wxID_ANY,
               int lastId = wxID_ANY,
               wxObject *userData = NULL)
     {
         DoConnect(winid, lastId, eventType,
-                  wxNewEventFunctor(eventType, func, eventSink),
+                  wxNewEventFunctor(eventType, method, eventSink),
                   userData);
     }
 
-    template
-      <typename EventTag, typename Class, typename EventArg, typename ObjClass>
+    template <typename EventTag, typename Class, typename EventArg, typename ObjClass>
     bool Unbind(const EventTag &eventType,
-                void (Class::*func)(EventArg&),
+                void (Class::*method)(EventArg&),
                 ObjClass *eventSink,
                 int winid = wxID_ANY,
                 int lastId = wxID_ANY,
                 wxObject *userData = NULL )
     {
         return DoDisconnect(winid, lastId, eventType,
-                            wxMakeEventFunctor(eventType, func, eventSink),
+                            wxMakeEventFunctor(eventType, method, eventSink),
                             userData);
     }
 #endif // !wxEVENTS_COMPATIBILITY_2_8
Index: interface/wx/event.h
===================================================================
--- interface/wx/event.h	(revision 59524)
+++ interface/wx/event.h	(working copy)
@@ -639,6 +639,8 @@
             Object whose member function should be called. It must be specified
             when connecting an event generated by one object to a member
             function of a different object. If it is omitted, @c this is used.
+
+        @see Bind<>()
     */
     void Connect(int id, int lastId, wxEventType eventType,
                  wxObjectEventFunction function,
@@ -725,6 +727,135 @@
 
 
     /**
+        @name Binding and Unbinding
+    */
+    //@{
+
+    /**
+        Binds the given function, functor or method dynamically with the event.
+
+        This offers basically the same functionality as Connect(), but it is
+        more flexible as it also allows you to use ordinary functions and
+        arbitrary functors as event handlers. It is also less restrictive then
+        Connect() because you can use an arbitrary method as an event handler,
+        where as Connect() requires a wxEvtHandler derived handler.
+
+        See @ref overview_events_bind for more detailed explanation
+        of this function and the @ref page_samples_event sample for usage
+        examples.
+
+        @param eventType
+            The event type to be associated with this event handler.
+        @param functor
+            The event handler functor. This can be an ordinary function but also
+            an arbitrary functor like boost::function<>.
+        @param id
+            The first ID of the identifier range to be associated with the event
+            handler.
+        @param lastId
+            The last ID of the identifier range to be associated with the event
+            handler.
+        @param userData
+            Data to be associated with the event table entry.
+    */
+    template <typename EventTag, typename Functor>
+    void Bind(const EventTag& eventType,
+              Functor functor,
+              int id = wxID_ANY,
+              int lastId = wxID_ANY,
+              wxObject *userData = NULL);
+
+    /**
+        See the Bind<>(const EventTag&, Functor, int, int, wxObject*) overload for
+        more info.
+
+        This overload will bind the given method as the event handler.
+
+        @param eventType
+            The event type to be associated with this event handler.
+        @param method
+            The event handler method. This can be an arbitrary method (doesn't need
+            to be from a wxEvtHandler derived class).
+        @param eventSink
+            Object whose method should be called. It must always be specified
+            so it can be checked at compile time whether the given method is an
+            actual member of the given eventSink.
+        @param id
+            The first ID of the identifier range to be associated with the event
+            handler.
+        @param lastId
+            The last ID of the identifier range to be associated with the event
+            handler.
+        @param userData
+            Data to be associated with the event table entry.
+    */
+    template <typename EventTag, typename Class, typename EventArg, typename ObjClass>
+    void Bind(const EventTag &eventType,
+              void (Class::*method)(EventArg &),
+              ObjClass *eventSink,
+              int id = wxID_ANY,
+              int lastId = wxID_ANY,
+              wxObject *userData = NULL);
+    /**
+        Unbinds the given function, functor or method dynamically from the
+        event handler, using the specified parameters as search criteria and
+        returning @true if a matching function has been found and removed.
+
+        This method can only unbind functions, functors or methods which have
+        been added using the Bind<>() method. There is no way to unbind
+        functions binded using the (static) event tables.
+
+        @param eventType
+            The event type associated with this event handler.
+        @param functor
+            The event handler functor. This can be an ordinary function but also
+            an arbitrary functor like boost::function<>.
+        @param id
+            The first ID of the identifier range associated with the event
+            handler.
+        @param lastId
+            The last ID of the identifier range associated with the event
+            handler.
+        @param userData
+            Data associated with the event table entry.
+    */
+    template <typename EventTag, typename Functor>
+    bool Unbind(const EventTag& eventType,
+                Functor functor,
+                int id = wxID_ANY,
+                int lastId = wxID_ANY,
+                wxObject *userData = NULL);
+
+    /**
+        See the Unbind<>(const EventTag&, Functor, int, int, wxObject*)
+        overload for more info.
+
+        This overload unbinds the given method from the event..
+
+        @param eventType
+            The event type associated with this event handler.
+        @param method
+            The event handler method associated with this event.
+        @param eventSink
+            Object whose method was called.
+        @param id
+            The first ID of the identifier range associated with the event
+            handler.
+        @param lastId
+            The last ID of the identifier range associated with the event
+            handler.
+        @param userData
+            Data associated with the event table entry.
+    */
+    template <typename EventTag, typename Class, typename EventArg, typename ObjClass>
+    bool Unbind(const EventTag &eventType,
+                void (Class::*method)(EventArg&),
+                ObjClass *eventSink,
+                int id = wxID_ANY,
+                int lastId = wxID_ANY,
+                wxObject *userData = NULL );
+    //@}
+    /**
         @name User-supplied data
     */
     //@{

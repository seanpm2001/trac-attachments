Index: include/wx/mac/dc.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/mac/dc.h,v
retrieving revision 1.14
diff -r1.14 dc.h
75c75
<     virtual bool StartDoc( const wxString& WXUNUSED(message) ) { return TRUE; };
---
>     virtual bool StartDoc( const wxString& WXUNUSED(message) ) { return TRUE; }
237a238,255
> #if wxUSE_SPLINES
>     virtual void DoDrawSpline(wxList *points);
> #endif // wxUSE_SPLINES
> 
>   protected:
>     //begin wxmac
> 
>     // Varaibles used for scaling
>     double       m_mm_to_pix_x,m_mm_to_pix_y;
>     // not yet used
>     bool         m_needComputeScaleX,m_needComputeScaleY;
>     // If un-scrolled is non-zero or  d.o. changes with scrolling.
>     // Set using SetInternalDeviceOrigin().
>     long         m_internalDeviceOriginX,m_internalDeviceOriginY;
> 
>     // To be set by external classes such as wxScrolledWindow
>     //  using SetDeviceOrigin()
>     long         m_externalDeviceOriginX,m_externalDeviceOriginY;
239,253c257
< 
< //
< 
<   public:
< //begin wxmac
<     double       m_mm_to_pix_x,m_mm_to_pix_y; 
<     bool         m_needComputeScaleX,m_needComputeScaleY;         // not yet used
<     long         m_internalDeviceOriginX,m_internalDeviceOriginY;   // If un-scrolled is non-zero or
< 								    // d.o. changes with scrolling.
< 								    // Set using SetInternalDeviceOrigin().
< 								    
<     long         m_externalDeviceOriginX,m_externalDeviceOriginY;   // To be set by external classes
<                                                                     // such as wxScrolledWindow
< 								    // using SetDeviceOrigin()
< 	GrafPtr				m_macPort ;
---
>     // Begin implementation for Mac
268a273
>   public:
269a275
>     GrafPtr             m_macPort ;
Index: src/mac/dc.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/dc.cpp,v
retrieving revision 1.19
diff -r1.19 dc.cpp
16a17
> #include "wx/dcmemory.h"
18c19,20
< #include "wx/mac/uma.h"
---
> #include "wx/region.h"
> #include "wx/image.h"
37a40,48
> const double RAD2DEG  = 180.0 / M_PI;
> 
> //-----------------------------------------------------------------------------
> // Local functions
> //-----------------------------------------------------------------------------
> 
> static inline double dmin(double a, double b) { return a < b ? a : b; }
> static inline double dmax(double a, double b) { return a > b ? a : b; }
> static inline double DegToRad(double deg) { return (deg * M_PI) / 180.0; }
85,86c96,97
<     m_brush = *wxWHITE_BRUSH;
< };
---
>     m_brush = *wxTRANSPARENT_BRUSH;
> }
100c111
< wxDC::~wxDC(void)
---
> wxDC::~wxDC()
102c113
< };
---
> }
111,116c122
< 		long x1 = XLOG2DEV(m_clipX1);
< 		long y1 = YLOG2DEV(m_clipY1);
< 		long x2 = XLOG2DEV(m_clipX2);
< 		long y2 = YLOG2DEV(m_clipY2);
< 		
< 		Rect clip = { y1 , x1 , y2 , x2 } ;
---
> 		Rect clip = { m_clipY1 , m_clipX1 , m_clipY2 , m_clipX2 } ;
133,145c139,167
< 	float scale = 1.0 ;
< 	
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
<   
<   long xx1 = XLOG2DEV(x); 
<   long yy1 = YLOG2DEV(y);
< 	
< 	{
< 		wxBitmapRefData * bmap = (wxBitmapRefData*) ( bmp.GetRefData()) ;
< 	   	
<    	if ( bmap )
---
>     wxCHECK_RET( Ok(), wxT("invalid window dc") );
> 
>     wxCHECK_RET( bmp.Ok(), wxT("invalid bitmap") );
> 
>     wxMacPortSetter helper(this) ;
> 
>     wxCoord xx = XLOG2DEV(x);
>     wxCoord yy = YLOG2DEV(y);
>     wxCoord w = bmp.GetWidth();
>     wxCoord h = bmp.GetHeight();
>     wxCoord ww = XLOG2DEVREL(w);
>     wxCoord hh = YLOG2DEVREL(h);
> 
>     // Set up drawing mode
>     short  mode = (m_logicalFunction == wxCOPY ? srcCopy :
>                    //m_logicalFunction == wxCLEAR ? WHITENESS :
>                    //m_logicalFunction == wxSET ? BLACKNESS :
>                    m_logicalFunction == wxINVERT ? hilite :
>                    //m_logicalFunction == wxAND ? MERGECOPY :
>                    m_logicalFunction == wxOR ? srcOr :
>                    m_logicalFunction == wxSRC_INVERT ? notSrcCopy :
>                    m_logicalFunction == wxXOR ? srcXor :
>                    m_logicalFunction == wxOR_REVERSE ? notSrcOr :
>                    //m_logicalFunction == wxAND_REVERSE ? SRCERASE :
>                    //m_logicalFunction == wxSRC_OR ? srcOr :
>                    //m_logicalFunction == wxSRC_AND ? SRCAND :
>                    srcCopy );
> 
>     if ( bmp.GetBitmapType() == kMacBitmapTypePict )
147,197c169,171
< 			if ( bmap->m_bitmapType == kMacBitmapTypePict )
< 			{ 
<     		Rect bitmaprect = { 0 , 0 , int(bmap->m_height * scale) , int(bmap->m_width * scale)} ;
< 				::OffsetRect( &bitmaprect , xx1 , yy1 ) ;
< 				::DrawPicture( bmap->m_hPict , &bitmaprect ) ;
< 			}
< 			else if ( bmap->m_bitmapType == kMacBitmapTypeGrafWorld )
< 			{
< 				if ( bmap->m_hBitmap )
< 				{
< 					GWorldPtr 		bmapworld = bmap->m_hBitmap ;
< 					PixMapHandle	bmappixels ;
< 					RGBColor		white = { 0xFFFF, 0xFFFF,0xFFFF} ;
< 					RGBColor		black = { 0,0,0} ;
< 					RGBForeColor( &black ) ;
< 					RGBBackColor( &white ) ;
< 			
< 					bmappixels = GetGWorldPixMap( bmapworld ) ;
< 					if ( LockPixels(bmappixels) )
< 					{
< 						Rect source , dest ;
< 						source.top = 0 ;
< 						source.left = 0 ;
< 						source.right = bmap->m_width ;
< 						source.bottom = bmap->m_height ;
< 						dest.top = YLOG2DEV(y) ;
< 						dest.left = XLOG2DEV(x) ;
< 						dest.bottom = YLOG2DEV(y + bmap->m_height * scale)  ;
< 						dest.right = XLOG2DEV(x + bmap->m_width * scale ) ;
< 	
< 						if ( useMask && bmp.GetMask() )
< 						{
< 							if ( LockPixels( GetGWorldPixMap( bmp.GetMask()->GetMaskBitmap( ) ) ) )
< 							{
< 								CopyMask( GetPortBitMapForCopyBits( bmapworld ) , GetPortBitMapForCopyBits( bmp.GetMask()->GetMaskBitmap( ) ) ,
< 								 GetPortBitMapForCopyBits( m_macPort ) ,
< 									&source, &source , &dest ) ;
< 								UnlockPixels( GetGWorldPixMap( bmp.GetMask()->GetMaskBitmap( ) )  ) ;
< 							}
< 						}
< 						else
< 							CopyBits( GetPortBitMapForCopyBits( bmapworld ) , GetPortBitMapForCopyBits( m_macPort ),
< 								&source, &dest, srcCopy, NULL ) ;
< 
< 						UnlockPixels( bmappixels ) ;
< 					} 
< 					m_macPenInstalled = false ;
< 					m_macBrushInstalled = false ;
< 					m_macFontInstalled = false ;
< 				}
< 			}
---
>         Rect bitmaprect = { 0 , 0 , hh, ww };
>         ::OffsetRect( &bitmaprect, xx, yy ) ;
>         ::DrawPicture( bmp.GetPict(), &bitmaprect ) ;
199c173,225
< 	}
---
>     else if ( bmp.GetBitmapType() == kMacBitmapTypeGrafWorld )
>     {
>         GWorldPtr    bmapworld = bmp.GetHBITMAP();
>         PixMapHandle bmappixels ;
> 
>         // Set foreground and background colours (for bitmaps depth = 1)
>         if(bmp.GetDepth() == 1)
>         {
>             RGBColor fore = m_textForegroundColour.GetPixel();
>             RGBColor back = m_textBackgroundColour.GetPixel();
>             RGBForeColor(&fore);
>             RGBBackColor(&back);
>         }
>         else
>         {
>             RGBColor white = { 0xFFFF, 0xFFFF,0xFFFF} ;
>             RGBColor black = { 0,0,0} ;
>             RGBForeColor( &black ) ;
>             RGBBackColor( &white ) ;
>         }
> 
>         bmappixels = GetGWorldPixMap( bmapworld ) ;
> 
>         wxCHECK_RET(LockPixels(bmappixels),
>                     wxT("DoDrawBitmap:  Unable to lock pixels"));
> 
>         Rect source = { 0, 0, h, w };
>         Rect dest   = { yy, xx, yy + hh, xx + ww };
> 
>         if ( useMask && bmp.GetMask() )
>         {
>             if( LockPixels(GetGWorldPixMap(bmp.GetMask()->GetMaskBitmap())))
>             {
>                 CopyDeepMask
>                     (
>                      GetPortBitMapForCopyBits(bmapworld),
>                      GetPortBitMapForCopyBits(bmp.GetMask()->GetMaskBitmap()),
>                      GetPortBitMapForCopyBits( m_macPort ),
>                      &source, &source, &dest, mode, NULL
>                      );
>                 UnlockPixels(GetGWorldPixMap(bmp.GetMask()->GetMaskBitmap()));
>             }
>         }
>         else {
>             CopyBits( GetPortBitMapForCopyBits( bmapworld ),
>                       GetPortBitMapForCopyBits( m_macPort ),
>                       &source, &dest, mode, NULL ) ;
>         }
>         UnlockPixels( bmappixels ) ;
>     }
>     m_macPenInstalled = false ;
>     m_macBrushInstalled = false ;
>     m_macFontInstalled = false ;
204,214c230,239
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
<   
<   long xx1 = XLOG2DEV(x); 
<   long yy1 = YLOG2DEV(y);
< 	
< 	{
< 		wxIconRefData * iconref = (wxIconRefData*) ( icon.GetRefData()) ;
< 	   	
<    	if ( iconref && iconref->m_ok && iconref->m_hIcon )
---
>     wxCHECK_RET(Ok(), wxT("Invalid dc  wxDC::DoDrawIcon"));
> 
>     wxCHECK_RET(icon.Ok(), wxT("Invalid icon wxDC::DoDrawIcon"));
> 
>     wxMacPortSetter helper(this) ;
> 
>     wxCoord xx = XLOG2DEV(x);
>     wxCoord yy = YLOG2DEV(y);
> 
>     //if(icon.GetBitmapType() == kMacBitmapTypeIcon)
216,218c241,243
<     	Rect bitmaprect = { 0 , 0 , iconref->m_height , iconref->m_width } ;
< 			OffsetRect( &bitmaprect , xx1 , yy1 ) ;
<     	PlotCIconHandle( &bitmaprect , atNone , ttNone , iconref->m_hIcon ) ;
---
>         Rect bitmaprect = { 0 , 0 , icon.GetHeight(), icon.GetWidth() } ;
>         OffsetRect( &bitmaprect, xx, yy ) ;
>         PlotCIconHandle( &bitmaprect , atNone , ttNone , icon.GetHICON() ) ;
220,221c245,250
< 	}
< };
---
> #if 0
>     else {
>         DrawBitmap(icon, x, y, true);
>     }
> #endif
> }
225,241c254,278
< 	if( m_clipping )
< 	{
< 		m_clipX1 = wxMax( m_clipX1 , x ) ;
<   		m_clipY1 = wxMax( m_clipY1 ,y );
<   		m_clipX2 = wxMin( m_clipX2, (x + width));
<   		m_clipY2 = wxMin( m_clipY2,(y + height));
< 		
< 	}
< 	else
< 	{
< 	  m_clipping = TRUE;
< 	  m_clipX1 = x;
< 	  m_clipY1 = y;
< 	  m_clipX2 = x + width;
< 	  m_clipY2 = y + height;
< 	}
<   };
---
>     wxCHECK_RET(Ok(), wxT("wxDC::DoSetClippingRegion  Invalid DC"));
> 
>     wxCoord xx, yy, ww, hh;
> 
>     xx = XLOG2DEV(x);
>     yy = YLOG2DEV(y);
>     ww = XLOG2DEVREL(width);
>     hh = YLOG2DEVREL(height);
> 
>     if( m_clipping )
>     {
>         m_clipX1 = wxMax( m_clipX1 , xx );
>         m_clipY1 = wxMax( m_clipY1 , yy );
>         m_clipX2 = wxMin( m_clipX2, (xx + ww));
>         m_clipY2 = wxMin( m_clipY2, (yy + hh));
>     }
>     else
>     {
>         m_clipping = TRUE;
>         m_clipX1 = xx;
>         m_clipY1 = yy;
>         m_clipX2 = xx + ww;
>         m_clipY2 = yy + hh;
>     }
> }
259c296
< void wxDC::DestroyClippingRegion(void)
---
> void wxDC::DestroyClippingRegion()
263c300
< };
---
> }
269c306
< };
---
> }
278c315
< };
---
> }
282,285c319,322
<   if (!Ok()) return;
<   m_textForegroundColour = col;
<   m_macFontInstalled = false ;
< };
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     m_textForegroundColour = col;
>     m_macFontInstalled = false ;
> }
289,292c326,329
<   if (!Ok()) return;
<   m_textBackgroundColour = col;
<   m_macFontInstalled = false ;
< };
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     m_textBackgroundColour = col;
>     m_macFontInstalled = false ;
> }
314c351
<   };
---
>   }
319,320c356,357
<   };
< };
---
>   }
> }
328c365
< };
---
> }
336c373
< };
---
> }
343c380
< };
---
> }
350,351c387,389
< };
< /*
---
> }
> 
> #if 0
357c395
< };
---
> }
364c402,403
< */
---
> #endif
> 
370,372c409,411
< };
< /*
<     
---
> }
> 
> #if 0    
379,380c418,420
< };
< */
---
> }
> #endif
> 
391c431
< void wxDC::ComputeScaleAndOrigin(void)
---
> void wxDC::ComputeScaleAndOrigin()
413c453
< };
---
> }
426,432c466,469
<   if (!Ok()) 
<   	return;
<   	
< //  wxMacPortSetter helper(this) ;
<   
<   m_font = font;
<   m_macFontInstalled = false ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
> 
>     m_font = font;
>     m_macFontInstalled = false ;
437,440c474
<   if (!Ok()  ) 
<   	return;
< 
< //  wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
445,450c479,481
<   m_pen = pen;
< /*  
<   if (!m_pen.Ok()) 
<   	return;
< */  	
<   m_macPenInstalled = false ;
---
>     m_pen = pen;
> 
>     m_macPenInstalled = false ;
455,457c486
<   if (!Ok() ) 
<   	return;
< //  wxMacPortSetter helper(this) ;
---
>   wxCHECK_RET(Ok(), wxT("Invalid DC"));
468,470c497
<   if (!Ok()) 
<   	return;
< //  wxMacPortSetter helper(this) ;
---
>   wxCHECK_RET(Ok(), wxT("Invalid DC"));
500c527,539
< 	return true ;
---
>     wxCHECK_MSG( Ok(), false, wxT("wxDC::DoGetPixel  Invalid DC") );
>     wxMacPortSetter helper(this) ;
> 
>     RGBColor colour;
> 
>     GetCPixel( XLOG2DEV(x), YLOG2DEV(y), &colour );
> 
>     // Convert from Mac colour to wx
>     col->Set( colour.red   >> 8,
>               colour.green >> 8,
>               colour.blue  >> 8);
> 
>     return true ;
505,508c544,545
<   if (!Ok()) 
<   	return;
<   	
<   wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
510,511c547,548
<   if (m_pen.GetStyle() != wxTRANSPARENT)
<   {
---
>     if (m_pen.GetStyle() != wxTRANSPARENT)
>     {
513,521c550,560
< 		int offset = ( (m_pen.GetWidth() == 0 ? 1 : m_pen.GetWidth() ) * m_scaleX - 1) / 2 ;	
<   	long xx1 = XLOG2DEV(x1); 
<   	long yy1 = YLOG2DEV(y1);
<   	long xx2 = XLOG2DEV(x2); 
<   	long yy2 = YLOG2DEV(y2);
< 	
< 		::MoveTo(xx1 - offset ,yy1 - offset);
< 		::LineTo(xx2 - offset , yy2 - offset );
<   };
---
> 		wxCoord offset = ( (m_pen.GetWidth() == 0 ? 1 :
>                             m_pen.GetWidth() ) * (wxCoord)m_scaleX - 1) / 2;
> 
>         wxCoord xx1 = XLOG2DEV(x1);
>         wxCoord yy1 = YLOG2DEV(y1);
>         wxCoord xx2 = XLOG2DEV(x2);
>         wxCoord yy2 = YLOG2DEV(y2);
> 
> 		::MoveTo(xx1 - offset, yy1 - offset);
> 		::LineTo(xx2 - offset, yy2 - offset);
>     }
525a565,615
>     wxCHECK_RET( Ok(), wxT("wxDC::DoCrossHair  Invalid window dc") );
> 
>     if (m_pen.GetStyle() != wxTRANSPARENT)
>     {
>         int w = 0;
>         int h = 0;
>         GetSize( &w, &h );
>         wxCoord xx = XLOG2DEV(x);
>         wxCoord yy = YLOG2DEV(y);
> 
>         MacInstallPen();
>         ::MoveTo( 0, yy );
>         ::LineTo( XLOG2DEVREL(w), yy );
>         ::MoveTo( xx, 0 );
>         ::LineTo( xx, YLOG2DEVREL(h) );
>     }
> }
> 
> /*
>  * To draw arcs properly the angles need to be converted from the WX style:
>  * Angles start on the +ve X axis and go anti-clockwise (As you would draw on
>  * a normal axis on paper).
>  * TO
>  * the Mac style:
>  * Angles start on the +ve y axis and go clockwise.
>  * To achive this I work out which quadrant the angle lies in then map this to
>  * the equivalent quadrant on the Mac.  (Sin and Cos values reveal which
>  * quadrant you are in).
>  */
> static double wxConvertWXangleToMACangle(double angle)
> {
>     double sin_a, cos_a;
> 
>     sin_a = sin(angle / RAD2DEG);
>     cos_a = cos(angle / RAD2DEG);
> 
>     if( (sin_a >= 0.0) && (cos_a >= 0.0) ) {
>         angle = acos(sin_a) * RAD2DEG;
>     }
>     else if( (sin_a >= 0.0) && (cos_a <= 0.0) ) {
>         sin_a *= -1;
>         angle = acos(sin_a) * RAD2DEG + 180;
>     }
>     else if( (sin_a <= 0.0) && (cos_a >=  0.0) ) {
>         angle = acos(sin_a) * RAD2DEG + 180;
>     }
>     else if( (sin_a <  0.0) && (cos_a <  0.0) ) {
>         sin_a *= -1;
>         angle = acos(sin_a) * RAD2DEG + 180;
>     }
>     return angle;
529,530c619,620
<                            wxCoord x2, wxCoord y2,
<                            wxCoord xc, wxCoord yc )
---
>                        wxCoord x2, wxCoord y2,
>                        wxCoord xc, wxCoord yc )
531a622,669
>     wxCHECK_RET(Ok(), wxT("wxDC::DoDrawArc  Invalid DC"));
> 
>     wxCoord xx1 = XLOG2DEV(x1);
>     wxCoord yy1 = YLOG2DEV(y1);
>     wxCoord xx2 = XLOG2DEV(x2);
>     wxCoord yy2 = YLOG2DEV(y2);
>     wxCoord xxc = XLOG2DEV(xc);
>     wxCoord yyc = YLOG2DEV(yc);
>     double dx = xx1 - xxc;
>     double dy = yy1 - yyc;
>     double radius = sqrt((double)(dx*dx+dy*dy));
>     wxCoord rad   = (wxCoord)radius;
>     double radius1, radius2;
> 
>     if (xx1 == xx2 && yy1 == yy2)
>     {
>         radius1 = 0.0;
>         radius2 = 360.0;
>     }
>     else if (radius == 0.0)
>     {
>         radius1 = radius2 = 0.0;
>     }
>     else
>     {
>         radius1 = (xx1 - xxc == 0) ?
>             (yy1 - yyc < 0) ? 90.0 : -90.0 :
>             -atan2(double(yy1-yyc), double(xx1-xxc)) * RAD2DEG;
>         radius2 = (xx2 - xxc == 0) ?
>             (yy2 - yyc < 0) ? 90.0 : -90.0 :
>             -atan2(double(yy2-yyc), double(xx2-xxc)) * RAD2DEG;
>     }
>     wxCoord alpha2 = wxCoord(radius2 - radius1);
>     wxCoord alpha1 = wxCoord(wxConvertWXangleToMACangle(radius1));
>     if( (xx1 > xx2) || (yy1 > yy2) ) {
>         alpha2 *= -1;
>     }
> 
>     Rect r = { yyc - rad, xxc - rad, yyc + rad, xxc + rad };
> 
>     if(m_brush.GetStyle() != wxTRANSPARENT) {
>         MacInstallBrush();
>         PaintArc(&r, alpha1, alpha2);
>     }
>     if(m_pen.GetStyle() != wxTRANSPARENT) {
>         MacInstallPen();
>         FrameArc(&r, alpha1, alpha2);
>     }
534,535c672,673
< void  wxDC::DoDrawEllipticArc( wxCoord x, wxCoord y, wxCoord w, wxCoord h,
<                                    double sa, double ea )
---
> void wxDC::DoDrawEllipticArc( wxCoord x, wxCoord y, wxCoord w, wxCoord h,
>                               double sa, double ea )
536a675,703
>     wxCHECK_RET(Ok(), wxT("wxDC::DoDrawEllepticArc  Invalid DC"));
> 
>     Rect r;
>     double angle = sa - ea;  // Order important Mac in opposite direction to wx
> 
>     wxCoord xx = XLOG2DEV(x);
>     wxCoord yy = YLOG2DEV(y);
>     wxCoord ww = m_signX * XLOG2DEVREL(w);
>     wxCoord hh = m_signY * YLOG2DEVREL(h);
> 
>     // handle -ve width and/or height
>     if (ww < 0) { ww = -ww; xx = xx - ww; }
>     if (hh < 0) { hh = -hh; yy = yy - hh; }
> 
>     sa = wxConvertWXangleToMACangle(sa);
> 
>     r.top    = yy;
>     r.left   = xx;
>     r.bottom = yy + hh;
>     r.right  = xx + ww;
> 
>     if(m_brush.GetStyle() != wxTRANSPARENT) {
>         MacInstallBrush();
>         PaintArc(&r, (short)sa, (short)angle);
>     }
>     if(m_pen.GetStyle() != wxTRANSPARENT) {
>         MacInstallPen();
>         FrameArc(&r, (short)sa, (short)angle);
>     }
541,542c708
<   if (!Ok()) 
<   	return;
---
>   wxCHECK_RET(Ok(), wxT("Invalid DC"));
549,550c715,716
<   	long xx1 = XLOG2DEV(x); 
<   	long yy1 = YLOG2DEV(y);
---
>         wxCoord xx1 = XLOG2DEV(x); 
>         wxCoord yy1 = YLOG2DEV(y);
552c718
< 		::MoveTo(xx1,yy1);
---
> 		::MoveTo(xx1,   yy1);
554c720
<   };
---
>   }
560,561c726
<   if (!Ok()) 
<   	return;
---
>   wxCHECK_RET(Ok(), wxT("Invalid DC"));
569,570c734,737
<   int offset = (m_pen.GetWidth() - 1 ) / 2 ;	
<   long x1, x2 , y1 , y2 ;
---
>   wxCoord offset = ( (m_pen.GetWidth() == 0 ? 1 :
>                       m_pen.GetWidth() ) * (wxCoord)m_scaleX - 1) / 2 ;
> 
>   wxCoord x1, x2 , y1 , y2 ;
573c740
<   ::MoveTo(x1 - offset ,y1 - offset );
---
>   ::MoveTo(x1 - offset, y1 - offset );
579c746
<     ::LineTo(x2 - offset  , y2 - offset );
---
>     ::LineTo( x2 - offset, y2 - offset );
587,588c754
<   if (!Ok()) 
<   	return;
---
>   wxCHECK_RET(Ok(), wxT("Invalid DC"));
592c758
<   long x1, x2 , y1 , y2 ;
---
>   wxCoord x1, x2 , y1 , y2 ;
605,615c771,781
< 	if (m_brush.GetStyle() != wxTRANSPARENT) 
< 	{
< 		MacInstallBrush() ;
< 		::PaintPoly( polygon ) ;
< 	};
< 	
< 	if (m_pen.GetStyle() != wxTRANSPARENT) 
< 	{
< 		MacInstallPen() ;
< 		::FramePoly( polygon ) ;
< 	};
---
>   if (m_brush.GetStyle() != wxTRANSPARENT) 
>   {
>       MacInstallBrush() ;
>       ::PaintPoly( polygon ) ;
>   }
> 
>   if (m_pen.GetStyle() != wxTRANSPARENT) 
>   {
>       MacInstallPen() ;
>       ::FramePoly( polygon ) ;
>   }
619c785
< void  wxDC::DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
---
> void wxDC::DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
621,629c787,794
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
< 	
< 	long xx = XLOG2DEV(x);
< 	long yy = YLOG2DEV(y);
< 	long ww = m_signX * XLOG2DEVREL(width);
< 	long hh = m_signY * YLOG2DEVREL(height);
< 	
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
> 
> 	wxCoord xx = XLOG2DEV(x);
> 	wxCoord yy = YLOG2DEV(y);
> 	wxCoord ww = m_signX * XLOG2DEVREL(width);
> 	wxCoord hh = m_signY * YLOG2DEVREL(height);
> 
653c818
< 	};
---
> 	}
659c824
< 	};
---
> 	}
666,668c831,832
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
670,671c834,835
<   if (radius < 0.0) 
<   	radius = - radius * ((width < height) ? width : height);
---
>     if (radius < 0.0) 
>         radius = - radius * ((width < height) ? width : height);
673,676c837,840
< 	long xx = XLOG2DEV(x);
< 	long yy = YLOG2DEV(y);
< 	long ww = m_signX * XLOG2DEVREL(width);
< 	long hh = m_signY * YLOG2DEVREL(height);
---
> 	wxCoord xx = XLOG2DEV(x);
> 	wxCoord yy = YLOG2DEV(y);
> 	wxCoord ww = m_signX * XLOG2DEVREL(width);
> 	wxCoord hh = m_signY * YLOG2DEVREL(height);
701c865
< 	};
---
> 	}
707c871
< 	};
---
> 	}
712,714c876,877
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
716,719c879,882
< 	long xx = XLOG2DEV(x);
< 	long yy = YLOG2DEV(y);
< 	long ww = m_signX * XLOG2DEVREL(width);
< 	long hh = m_signY * YLOG2DEVREL(height);
---
> 	wxCoord xx = XLOG2DEV(x);
> 	wxCoord yy = YLOG2DEV(y);
> 	wxCoord ww = m_signX * XLOG2DEVREL(width);
> 	wxCoord hh = m_signY * YLOG2DEVREL(height);
744c907
< 	};
---
> 	}
750c913
< 	};
---
> 	}
752a916
> // --------------------------- spline code -------------------------------
754,755c918,936
<     
< bool  wxDC::CanDrawBitmap(void) const 
---
> static void wx_quadratic_spline(double a1, double b1, double a2, double b2,
>                                 double a3, double b3, double a4, double b4);
> static void wx_clear_stack();
> static int wx_spline_pop(double *x1, double *y1, double *x2, double *y2,
>                          double *x3, double *y3, double *x4, double *y4);
> static void wx_spline_push(double x1, double y1, double x2, double y2,
>                            double x3, double y3, double x4, double y4);
> static bool wx_spline_add_point(double x, double y);
> static void wx_spline_draw_point_array(wxDC *dc);
> 
> static wxList wx_spline_point_list;
> 
> #define     half(z1, z2)    ((z1+z2)/2.0)
> #define     THRESHOLD   5
> 
> /* iterative version */
> 
> static void wx_quadratic_spline(double a1, double b1, double a2, double b2,
>                                 double a3, double b3, double a4, double b4)
757c938,1084
< 	return true ;
---
>     register double  xmid, ymid;
>     double           x1, y1, x2, y2, x3, y3, x4, y4;
> 
>     wx_clear_stack();
>     wx_spline_push(a1, b1, a2, b2, a3, b3, a4, b4);
> 
>     while (wx_spline_pop(&x1, &y1, &x2, &y2, &x3, &y3, &x4, &y4))
>     {
>         xmid = (double)half(x2, x3);
>         ymid = (double)half(y2, y3);
>         if (fabs(x1 - xmid) < THRESHOLD && fabs(y1 - ymid) < THRESHOLD &&
>             fabs(xmid - x4) < THRESHOLD && fabs(ymid - y4) < THRESHOLD)
>         {
>             wx_spline_add_point( x1, y1 );
>             wx_spline_add_point( xmid, ymid );
>         }
>         else {
>             wx_spline_push(xmid, ymid, (double)half(xmid, x3),
>                            (double)half(ymid, y3),
>                            (double)half(x3, x4), (double)half(y3, y4), x4, y4);
>             wx_spline_push(x1, y1, (double)half(x1, x2), (double)half(y1, y2),
>                            (double)half(x2, xmid), (double)half(y2, ymid),
>                            xmid, ymid);
>         }
>     }
> }
> 
> /* utilities used by spline drawing routines */
> 
> typedef struct wx_spline_stack_struct {
>     double           x1, y1, x2, y2, x3, y3, x4, y4;
> } Stack;
> 
> #define         SPLINE_STACK_DEPTH             20
> static Stack    wx_spline_stack[SPLINE_STACK_DEPTH];
> static Stack   *wx_stack_top;
> static int      wx_stack_count;
> 
> static void wx_clear_stack()
> {
>     wx_stack_top = wx_spline_stack;
>     wx_stack_count = 0;
> }
> 
> static void wx_spline_push(double x1, double y1, double x2, double y2,
>                            double x3, double y3, double x4, double y4)
> {
>     wx_stack_top->x1 = x1;
>     wx_stack_top->y1 = y1;
>     wx_stack_top->x2 = x2;
>     wx_stack_top->y2 = y2;
>     wx_stack_top->x3 = x3;
>     wx_stack_top->y3 = y3;
>     wx_stack_top->x4 = x4;
>     wx_stack_top->y4 = y4;
>     wx_stack_top++;
>     wx_stack_count++;
> }
> 
> static int wx_spline_pop(double *x1, double *y1, double *x2, double *y2,
>                          double *x3, double *y3, double *x4, double *y4)
> {
>     if (wx_stack_count == 0)
>         return (0);
>     wx_stack_top--;
>     wx_stack_count--;
>     *x1 = wx_stack_top->x1;
>     *y1 = wx_stack_top->y1;
>     *x2 = wx_stack_top->x2;
>     *y2 = wx_stack_top->y2;
>     *x3 = wx_stack_top->x3;
>     *y3 = wx_stack_top->y3;
>     *x4 = wx_stack_top->x4;
>     *y4 = wx_stack_top->y4;
>     return (1);
> }
> 
> static bool wx_spline_add_point(double x, double y)
> {
>     wxPoint *point = new wxPoint ;
>     point->x = (int) x;
>     point->y = (int) y;
>     wx_spline_point_list.Append((wxObject*)point);
>     return TRUE;
> }
> 
> static void wx_spline_draw_point_array(wxDC *dc)
> {
>     dc->DrawLines(&wx_spline_point_list, 0, 0 );
>     wxNode *node = wx_spline_point_list.First();
>     while (node)
>     {
>         wxPoint *point = (wxPoint *)node->Data();
>         delete point;
>         delete node;
>         node = wx_spline_point_list.First();
>     }
> }
> 
> void  wxDC::DoDrawSpline(wxList *points)
> {
>     wxPoint *p;
>     double   cx1, cy1, cx2, cy2, cx3, cy3, cx4, cy4;
>     double   x1, y1, x2, y2;
> 
>     wxNode *node = points->First();
>     p = (wxPoint *)node->Data();
> 
>     x1 = p->x;
>     y1 = p->y;
> 
>     node = node->Next();
>     p = (wxPoint *)node->Data();
> 
>     x2 = p->x;
>     y2 = p->y;
>     cx1 = (double)((x1 + x2) / 2);
>     cy1 = (double)((y1 + y2) / 2);
>     cx2 = (double)((cx1 + x2) / 2);
>     cy2 = (double)((cy1 + y2) / 2);
> 
>     wx_spline_add_point(x1, y1);
> 
>     while ((node = node->Next()) != NULL)
>     {
>         p = (wxPoint *)node->Data();
>         x1 = x2;
>         y1 = y2;
>         x2 = p->x;
>         y2 = p->y;
>         cx4 = (double)(x1 + x2) / 2;
>         cy4 = (double)(y1 + y2) / 2;
>         cx3 = (double)(x1 + cx4) / 2;
>         cy3 = (double)(y1 + cy4) / 2;
> 
>         wx_quadratic_spline(cx1, cy1, cx2, cy2, cx3, cy3, cx4, cy4);
> 
>         cx1 = cx4;
>         cy1 = cy4;
>         cx2 = (double)(cx1 + x2) / 2;
>         cy2 = (double)(cy1 + y2) / 2;
>     }
> 
>     wx_spline_add_point( cx1, cy1 );
>     wx_spline_add_point( x2, y2 );
> 
>     wx_spline_draw_point_array( this );
760a1088,1092
> bool  wxDC::CanDrawBitmap() const 
> {
> 	return true ;
> }
> 
762c1094,1095
<                         wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func , bool useMask )
---
>                    wxDC *source, wxCoord xsrc, wxCoord ysrc, int logical_func,
>                    bool useMask )
764,765c1097,1099
<   if (!Ok()) return FALSE;
<   wxMacPortSetter helper(this) ;
---
>     wxCHECK_MSG(Ok(), false, wxT("wxDC::DoBlit Illegal dc"));
>     wxCHECK_MSG(source->Ok(), false, wxT("wxDC::DoBlit  Illegal source DC"));
>     wxMacPortSetter helper(this) ;
807,809c1141,1144
< 				CopyMask( GetPortBitMapForCopyBits( sourcePort ) , GetPortBitMapForCopyBits( source->m_macMask ) , 
< 				GetPortBitMapForCopyBits( m_macPort ) ,
< 					&srcrect, &srcrect , &dstrect ) ;
---
> 				CopyMask( GetPortBitMapForCopyBits( sourcePort ),
>                           GetPortBitMapForCopyBits( source->m_macMask ) , 
>                           GetPortBitMapForCopyBits( m_macPort ),
>                           &srcrect, &srcrect , &dstrect ) ;
815,816c1150,1152
< 			CopyBits( GetPortBitMapForCopyBits( sourcePort ) , GetPortBitMapForCopyBits( m_macPort ) ,
< 				&srcrect, &dstrect, mode, NULL ) ;
---
> 			CopyBits( GetPortBitMapForCopyBits( sourcePort ),
>                       GetPortBitMapForCopyBits( m_macPort ),
>                       &srcrect, &dstrect, mode, NULL ) ;
829c1165
<                                    double angle)
---
>                               double angle)
830a1167,1260
>     wxCHECK_RET( Ok(), wxT("wxDC::DoDrawRotatedText  Invalid window dc") );
> 
>     if (angle == 0.0)
>     {
>         DrawText(text, x, y);
>         return;
>     }
> 
>     MacInstallFont();
> 
>     // the size of the text
>     wxCoord w, h;
>     GetTextExtent(text, &w, &h);
> 
>     // draw the string normally
>     wxBitmap src(w, h);
>     wxMemoryDC dc;
>     dc.SelectObject(src);
>     dc.SetFont(GetFont());
>     dc.SetBackground(*wxWHITE_BRUSH);
>     dc.SetBrush(*wxBLACK_BRUSH);
>     dc.Clear();
>     dc.DrawText(text, 0, 0);
>     dc.SetFont(wxNullFont);
>     dc.SelectObject(wxNullBitmap);
> 
>     wxMacPortSetter helper(this) ;
> 
>     // Calculate the size of the rotated bounding box.
>     double rad = DegToRad(angle);
>     double dx = cos(rad);
>     double dy = sin(rad);
> 
>     // the rectngle vertices are counted clockwise with the first one being at
>     // (0, 0) (or, rather, at (x, y))
>     double x2 = w * dx;
>     double y2 = -w * dy;      // y axis points to the bottom, hence minus
>     double x4 = h * dy;
>     double y4 = h * dx;
>     double x3 = x4 + x2;
>     double y3 = y4 + y2;
> 
>     // calc max and min
>     wxCoord maxX = (wxCoord)(dmax(x2, dmax(x3, x4)) + 0.5);
>     wxCoord maxY = (wxCoord)(dmax(y2, dmax(y3, y4)) + 0.5);
>     wxCoord minX = (wxCoord)(dmin(x2, dmin(x3, x4)) - 0.5);
>     wxCoord minY = (wxCoord)(dmin(y2, dmin(y3, y4)) - 0.5);
> 
>     // prepare to blit-with-rotate the bitmap to the DC
>     wxImage image(src);
> 
>     RGBColor colText = m_textForegroundColour.GetPixel();
>     RGBColor colBack = m_textBackgroundColour.GetPixel();
> 
>     unsigned char *data = image.GetData();
> 
>     wxCoord dstX, dstY;
>     double r, angleOrig;
>     bool textPixel;
> 
>     // paint pixel by pixel
>     for ( wxCoord srcX = 0; srcX < w; srcX++ )
>     {
>         for ( wxCoord srcY = 0; srcY < h; srcY++ )
>         {
>             // transform source coords to dest coords
>             r         = sqrt( (double)(srcX * srcX + srcY * srcY) );
>             angleOrig = atan2((double)srcY, (double)srcX) - rad;
>             dstX      = (wxCoord)(r * cos(angleOrig) + 0.5);
>             dstY      = (wxCoord)(r * sin(angleOrig) + 0.5);
> 
>             // black pixel?
>             textPixel = data[(srcY*w + srcX)*3] == 0;
>             if ( textPixel || (m_backgroundMode == wxSOLID) )
>             {
>                 SetCPixel(XLOG2DEV(x + dstX), YLOG2DEV(y + dstY),
>                           textPixel ? &colText : &colBack);
>             }
>         }
>     }
> 
>     // it would be better to draw with non underlined font and draw the line
>     // manually here (it would be more straight...)
> #if 0
>     if ( m_font.GetUnderlined() )
>     {
>         ::MoveTo(XLOG2DEV(x + x4), YLOG2DEV(y + y4 + font->descent));
>         ::LineTo(XLOG2DEV(x + x3), YLOG2DEV(y + y3 + font->descent));
>     }
> #endif // 0
> 
>     // update the bounding box
>     CalcBoundingBox(x + minX, y + minY);
>     CalcBoundingBox(x + maxX, y + maxY);
831a1262
> 
834,836c1265,1266
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("wxDC::DoDrawText  Invalid DC"));
>     wxMacPortSetter helper(this) ;
901c1331
< bool  wxDC::CanGetTextExtent(void) const 
---
> bool  wxDC::CanGetTextExtent() const 
903,904c1333
< 	if ( !Ok() )
< 		return false  ;
---
>     wxCHECK_MSG(Ok(), false, wxT("Invalid DC"));
913,916c1342,1343
<   if (!Ok()) 
<   	return;
<  
<    wxMacPortSetter helper(this) ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
993c1420
< wxCoord   wxDC::GetCharWidth(void) const
---
> wxCoord   wxDC::GetCharWidth() const
995,998c1422,1423
<   if (!Ok()) 
<   	return 1;
<  
<    wxMacPortSetter helper(this) ;
---
>     wxCHECK_MSG(Ok(), 1, wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
1008c1433
< wxCoord   wxDC::GetCharHeight(void) const
---
> wxCoord   wxDC::GetCharHeight() const
1010,1013c1435,1436
<   if (!Ok()) 
<   	return 1;
<  
<    wxMacPortSetter helper(this) ;
---
>     wxCHECK_MSG(Ok(), 1, wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
1023c1446
< void  wxDC::Clear(void)
---
> void  wxDC::Clear()
1025,1028c1448,1451
<   if (!Ok()) 
<   	return;
<   wxMacPortSetter helper(this) ;
< 	Rect rect = { -32767 , -32767 , 32767 , 32767 } ;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
>     wxMacPortSetter helper(this) ;
> 
>     Rect rect = { -32767 , -32767 , 32767 , 32767 } ;
1034c1457
< 	};
---
> 	}
1039,1040c1462
<   if (!Ok()) 
<   	return;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
1160,1161c1582
<   if (!Ok()) 
<   	return;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
1174c1595
< 	int penWidth = m_pen.GetWidth() * m_scaleX ;
---
> 	int penWidth = m_pen.GetWidth() * (int)m_scaleX ;
1246,1247c1667
<   if (!Ok()) 
<   	return;
---
>     wxCHECK_RET(Ok(), wxT("Invalid DC"));
1340d1759
< 
Index: src/mac/dcmemory.cpp
===================================================================
RCS file: /home/wxcvs/wxWindows/src/mac/dcmemory.cpp,v
retrieving revision 1.6
diff -r1.6 dcmemory.cpp
24c24
< wxMemoryDC::wxMemoryDC(void)
---
> wxMemoryDC::wxMemoryDC()
31c31
< };
---
> }
40c40
< };
---
> }
42c42
< wxMemoryDC::~wxMemoryDC(void)
---
> wxMemoryDC::~wxMemoryDC()
46,47c46
< 		wxBitmapRefData * bmap = (wxBitmapRefData*) (m_selected.GetRefData()) ;
< 		UnlockPixels( GetGWorldPixMap(  (CGrafPtr) bmap->m_hBitmap ) ) ;
---
> 		UnlockPixels( GetGWorldPixMap(m_selected.GetHBITMAP()) );
49c48
< };
---
> }
55,62c54,61
< 		wxBitmapRefData * bmap = (wxBitmapRefData*) (m_selected.GetRefData()) ;
< 		UnlockPixels( GetGWorldPixMap(  (CGrafPtr) bmap->m_hBitmap ) ) ;
< 	}
<   m_selected = bitmap;
<   if (m_selected.Ok())
<   {
< 		wxBitmapRefData * bmap = (wxBitmapRefData*) (m_selected.GetRefData()) ;
< 		if ( bmap->m_hBitmap )
---
> 		UnlockPixels( GetGWorldPixMap(m_selected.GetHBITMAP()) );
>     }
> 
>     // Setup with new bitmap
>     m_selected = bitmap;
>     if (m_selected.Ok())
>     {
> 		if ( m_selected.GetHBITMAP() )
64c63
< 			m_macPort = (GrafPtr) bmap->m_hBitmap ;
---
> 			m_macPort = (GrafPtr) m_selected.GetHBITMAP();
72d70
< 			// SetBackground(wxBrush(*wxWHITE, wxSOLID));
76c74
< 	    m_ok = FALSE;
---
>             m_ok = FALSE;
81,83c79,81
<     m_ok = FALSE;
<   };
< };
---
>       m_ok = FALSE;
>   }
> }
96,99c94,95
<   };
< };
< 
< 
---
>   }
> }

 	  	 

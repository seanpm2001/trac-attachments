diff --git a/include/wx/richtext/richtextbuffer.h b/include/wx/richtext/richtextbuffer.h
index 471300e..f6c58e8 100644
--- a/include/wx/richtext/richtextbuffer.h
+++ b/include/wx/richtext/richtextbuffer.h
@@ -3332,8 +3332,10 @@ public:
 
     /**
         Sets with undo the properties for the given object.
+        This will normally be the first parameter. However if objToSet is non-NULL, set the properties on this object instead;
+        for example, when changing the properties of a wxRichTextCell, objToSet will be the cell, and obj the parent table.
     */
-    virtual bool SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties);
+    virtual bool SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties, wxRichTextObject* objToSet = NULL);
 
     /**
         Test if this whole range has character attributes of the specified kind. If any
diff --git a/interface/wx/richtext/richtextbuffer.h b/interface/wx/richtext/richtextbuffer.h
index 870c85a..f479c27 100644
--- a/interface/wx/richtext/richtextbuffer.h
+++ b/interface/wx/richtext/richtextbuffer.h
@@ -3212,8 +3212,10 @@ public:
 
     /**
         Sets with undo the properties for the given object.
+        This will normally be the first parameter. However if objToSet is non-NULL, set the properties on this object instead;
+        for example, when changing the properties of a wxRichTextCell, objToSet will be the cell, and obj the parent table.
     */
-    virtual bool SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties);
+    virtual bool SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties, wxRichTextObject* objToSet = NULL);
 
     /**
         Test if this whole range has character attributes of the specified kind. If any
diff --git a/src/richtext/richtextbuffer.cpp b/src/richtext/richtextbuffer.cpp
index 3ff45e8..0582c28 100644
--- a/src/richtext/richtextbuffer.cpp
+++ b/src/richtext/richtextbuffer.cpp
@@ -7723,7 +7723,7 @@ wxRichTextField* wxRichTextParagraphLayoutBox::InsertFieldWithUndo(wxRichTextBuf
     return obj;
 }
 
-bool wxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties)
+bool wxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties, wxRichTextObject* objToSet)
 {
     wxRichTextBuffer* buffer = GetBuffer();
     wxCHECK_MSG(buffer, false, wxT("Invalid buffer"));
@@ -7733,39 +7733,27 @@ bool wxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo(wxRichTextObject&
     wxRichTextAction* action = NULL;
     wxRichTextObject* clone = NULL;
 
-#if 1
     if (rtc->SuppressingUndo())
         obj.SetProperties(properties);
     else
     {
         clone = obj.Clone();
-        clone->SetProperties(obj.GetProperties());
-        action = new wxRichTextAction(NULL, _("Change Properties"), wxRICHTEXT_CHANGE_OBJECT, buffer, obj.GetParentContainer(), rtc);
+        if (objToSet)
+        {
+            // Necessary e.g. if when setting a wxRichTextCell's properties, when obj will be the parent table
+            objToSet->SetProperties(properties);
+        }
+        else
+        {
+            obj.SetProperties(properties);
+        }
+        // The 'true' parameter in the next line says "Ignore first time"; otherwise the objects are prematurely switched
+        action = new wxRichTextAction(NULL, _("Change Properties"), wxRICHTEXT_CHANGE_OBJECT, buffer, obj.GetParentContainer(), rtc, true);
         action->SetOldAndNewObjects(& obj, clone);
         action->SetPosition(obj.GetRange().GetStart());
         action->SetRange(obj.GetRange());
         buffer->SubmitAction(action);
     }
-#else
-    if (!rtc->SuppressingUndo())
-    {
-        // Create a clone containing the current state of the object. It will be used to Undo the action
-        clone = obj.Clone();
-        clone->SetParent(obj.GetParent());
-        action = new wxRichTextAction(NULL, _("Change Properties"), wxRICHTEXT_CHANGE_OBJECT, buffer, rtc->GetFocusObject(), rtc);
-        action->SetObject(&obj);
-        action->SetPosition(GetRange().GetStart());
-    }
-
-    obj.SetProperties(properties);
-
-    if (!rtc->SuppressingUndo())
-    {
-        buffer->SubmitAction(action);
-        // Finally store the original-state clone; doing so earlier would cause various failures
-        action->StoreObject(clone);
-    }
-#endif
 
     return true;
 }

diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets-2.8.0-orig/src/msw/thread.cpp wxWidgets-2.8.0-fix/src/msw/thread.cpp
--- wxWidgets-2.8.0-orig/src/msw/thread.cpp	2006-12-12 00:50:35.000000000 +0300
+++ wxWidgets-2.8.0-fix/src/msw/thread.cpp	2006-12-19 14:49:44.000000000 +0300
@@ -178,6 +178,7 @@
     bool IsOk() const { return m_mutex != NULL; }
 
     wxMutexError Lock() { return LockTimeout(INFINITE); }
+    wxMutexError Lock(unsigned long ms) { return LockTimeout(ms); }
     wxMutexError TryLock() { return LockTimeout(0); }
     wxMutexError Unlock();
 
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets-2.8.0-orig/src/unix/threadpsx.cpp wxWidgets-2.8.0-fix/src/unix/threadpsx.cpp
--- wxWidgets-2.8.0-orig/src/unix/threadpsx.cpp	2006-12-12 00:50:37.000000000 +0300
+++ wxWidgets-2.8.0-fix/src/unix/threadpsx.cpp	2007-03-01 12:49:44.000000000 +0300
@@ -163,10 +163,13 @@
     ~wxMutexInternal();
 
     wxMutexError Lock();
+    wxMutexError Lock(unsigned long ms);
     wxMutexError TryLock();
     wxMutexError Unlock();
 
     bool IsOk() const { return m_isOk; }
+private:
+	wxMutexError HandleResult(int err);
 
 private:
     pthread_mutex_t m_mutex;
@@ -245,29 +248,65 @@
 
 wxMutexError wxMutexInternal::Lock()
 {
-    int err = pthread_mutex_lock(&m_mutex);
+    return HandleResult(pthread_mutex_lock(&m_mutex));
+}
+
+wxMutexError wxMutexInternal::Lock(unsigned long ms)
+{
+    static const long MSEC_IN_SEC   =       1000;
+    static const long NSEC_IN_MSEC  =       1000000;
+    static const long NSEC_IN_SEC   =       MSEC_IN_SEC * NSEC_IN_MSEC;
+
+    time_t seconds=ms/MSEC_IN_SEC;
+    long nanoseconds=(ms % MSEC_IN_SEC) * NSEC_IN_MSEC;
+    timespec ts = { 0, 0 };
+
+    if (clock_gettime(0,&ts)==0) {
+        ts.tv_sec+=seconds;
+        ts.tv_nsec+=nanoseconds;
+        if (ts.tv_nsec>NSEC_IN_SEC) {
+            ts.tv_sec+=1;
+            ts.tv_nsec-=NSEC_IN_SEC;
+        }
+    }
+    else {
+            perror("clock_gettime() failed");
+            ts.tv_sec=time(0)+seconds;
+            ts.tv_nsec=nanoseconds;
+    }
+
+    return HandleResult(pthread_mutex_timedlock(&m_mutex,&ts));
+}
+
+wxMutexError wxMutexInternal::HandleResult(int err)
+{
     switch ( err )
     {
         case EDEADLK:
             // only error checking mutexes return this value and so it's an
             // unexpected situation -- hence use assert, not wxLogDebug
-            wxFAIL_MSG( _T("mutex deadlock prevented") );
+            wxFAIL_MSG( _T("mutex deadlock prevented\n") );
             return wxMUTEX_DEAD_LOCK;
 
         case EINVAL:
-            wxLogDebug(_T("pthread_mutex_lock(): mutex not initialized."));
+            wxLogDebug(_T("pthread_mutex_lock() or pthread_mutex_timedlock(): mutex not initialized.\n"));
+            break;
+
+        case ETIMEDOUT:
+            wxLogDebug(_T("pthread_mutex_timedlock(): The mutex could not be locked before the specified timeout expired.\n"));
             break;
 
         case 0:
             return wxMUTEX_NO_ERROR;
 
         default:
-            wxLogApiError(_T("pthread_mutex_lock()"), err);
+            wxLogApiError(_T("pthread_mutex_timedlock() or pthread_mutex_lock()"), err);
     }
 
     return wxMUTEX_MISC_ERROR;
 }
 
+
 wxMutexError wxMutexInternal::TryLock()
 {
     int err = pthread_mutex_trylock(&m_mutex);
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets-2.8.0-orig/include/wx/thread.h wxWidgets-2.8.0-fix/include/wx/thread.h
--- wxWidgets-2.8.0-orig/include/wx/thread.h	2006-12-12 00:49:39.000000000 +0300
+++ wxWidgets-2.8.0-fix/include/wx/thread.h	2006-12-19 14:59:07.000000000 +0300
@@ -148,6 +148,7 @@
     //
     // The caller must call Unlock() later if Lock() returned wxMUTEX_NO_ERROR.
     wxMutexError Lock();
+	wxMutexError LockTimeout(unsigned long ms);
 
     // Try to lock the mutex: if it is currently locked, return immediately
     // with an error. Otherwise the caller must call Unlock().
diff -ru -xCVS -x'.#*' -x'*.orig' -x'*.rej' -x'*~' wxWidgets-2.8.0-orig/include/wx/thrimpl.cpp wxWidgets-2.8.0-fix/include/wx/thrimpl.cpp
--- wxWidgets-2.8.0-orig/include/wx/thrimpl.cpp	2006-12-12 00:49:39.000000000 +0300
+++ wxWidgets-2.8.0-fix/include/wx/thrimpl.cpp	2007-02-27 17:43:21.000000000 +0300
@@ -44,6 +44,14 @@
     return m_internal->Lock();
 }
 
+wxMutexError wxMutex::LockTimeout(unsigned long ms)
+{
+    wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
+                 _T("wxMutex::Lock(): not initialized") );
+
+    return m_internal->Lock(ms);
+}
+
 wxMutexError wxMutex::TryLock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,

 	  	 

Index: include/wx/aui/dockart.h
===================================================================
--- include/wx/aui/dockart.h	(revision 69060)
+++ include/wx/aui/dockart.h	(working copy)
@@ -36,47 +36,47 @@
     wxAuiDockArt() { }
     virtual ~wxAuiDockArt() { }
 
-    virtual int GetMetric(int id) = 0;
-    virtual void SetMetric(int id, int new_val) = 0;
-    virtual void SetFont(int id, const wxFont& font) = 0;
-    virtual wxFont GetFont(int id) = 0;
-    virtual wxColour GetColour(int id) = 0;
-    virtual void SetColour(int id, const wxColor& colour) = 0;
-    wxColour GetColor(int id) { return GetColour(id); }
-    void SetColor(int id, const wxColour& color) { SetColour(id, color); }
+    virtual int GetMetric ( int id ) = 0;
+    virtual void SetMetric ( int id, int newVal ) = 0;
+    virtual void SetFont ( int id, const wxFont & font ) = 0;
+    virtual wxFont GetFont ( int id ) = 0;
+    virtual wxColour GetColour ( int id ) = 0;
+    virtual void SetColour ( int id, const wxColor & colour ) = 0;
+    wxColour GetColor ( int id ) { return GetColour ( id ); }
+    void SetColor ( int id, const wxColour & color ) { SetColour ( id, color ); }
 
-    virtual void DrawSash(wxDC& dc,
-                          wxWindow* window,
-                          int orientation,
-                          const wxRect& rect) = 0;
+    virtual void DrawSash ( wxDC & dc,
+                            wxWindow * window,
+                            int orientation,
+                            const wxRect & rect ) = 0;
 
-    virtual void DrawBackground(wxDC& dc,
-                          wxWindow* window,
-                          int orientation,
-                          const wxRect& rect) = 0;
+    virtual void DrawBackground ( wxDC & dc,
+                                  wxWindow * window,
+                                  int orientation,
+                                  const wxRect & rect ) = 0;
 
-    virtual void DrawCaption(wxDC& dc,
-                          wxWindow* window,
-                          const wxString& text,
-                          const wxRect& rect,
-                          wxAuiPaneInfo& pane) = 0;
+    virtual void DrawCaption ( wxDC & dc,
+                               wxWindow * window,
+                               const wxString & text,
+                               const wxRect & rect,
+                               wxAuiPaneInfo & pane ) = 0;
 
-    virtual void DrawGripper(wxDC& dc,
-                          wxWindow* window,
-                          const wxRect& rect,
-                          wxAuiPaneInfo& pane) = 0;
+    virtual void DrawGripper ( wxDC & dc,
+                               wxWindow * window,
+                               const wxRect & rect,
+                               wxAuiPaneInfo & pane ) = 0;
 
-    virtual void DrawBorder(wxDC& dc,
-                          wxWindow* window,
-                          const wxRect& rect,
-                          wxAuiPaneInfo& pane) = 0;
+    virtual void DrawBorder ( wxDC & dc,
+                              wxWindow * window,
+                              const wxRect & rect,
+                              wxAuiPaneInfo & pane ) = 0;
 
-    virtual void DrawPaneButton(wxDC& dc,
-                          wxWindow* window,
-                          int button,
-                          int button_state,
-                          const wxRect& rect,
-                          wxAuiPaneInfo& pane) = 0;
+    virtual void DrawPaneButton ( wxDC & dc,
+                                  wxWindow * window,
+                                  int button,
+                                  int buttonState,
+                                  const wxRect & rect,
+                                  wxAuiPaneInfo & pane ) = 0;
 };
 
 
@@ -90,87 +90,87 @@
 
     wxAuiDefaultDockArt();
 
-    int GetMetric(int metric_id);
-    void SetMetric(int metric_id, int new_val);
-    wxColour GetColour(int id);
-    void SetColour(int id, const wxColor& colour);
-    void SetFont(int id, const wxFont& font);
-    wxFont GetFont(int id);
+    int GetMetric ( int metricId );
+    void SetMetric ( int metricId, int newVal );
+    wxColour GetColour ( int id );
+    void SetColour ( int id, const wxColor & colour );
+    void SetFont ( int id, const wxFont & font );
+    wxFont GetFont ( int id );
 
-    void DrawSash(wxDC& dc,
-                  wxWindow *window,
-                  int orientation,
-                  const wxRect& rect);
+    void DrawSash ( wxDC & dc,
+                    wxWindow * window,
+                    int orientation,
+                    const wxRect & rect );
 
-    void DrawBackground(wxDC& dc,
-                  wxWindow *window,
-                  int orientation,
-                  const wxRect& rect);
+    void DrawBackground ( wxDC & dc,
+                          wxWindow * window,
+                          int orientation,
+                          const wxRect & rect );
 
-    void DrawCaption(wxDC& dc,
-                  wxWindow *window,
-                  const wxString& text,
-                  const wxRect& rect,
-                  wxAuiPaneInfo& pane);
+    void DrawCaption ( wxDC & dc,
+                       wxWindow * window,
+                       const wxString & text,
+                       const wxRect & rect,
+                       wxAuiPaneInfo & pane );
 
-    void DrawGripper(wxDC& dc,
-                  wxWindow *window,
-                  const wxRect& rect,
-                  wxAuiPaneInfo& pane);
+    void DrawGripper ( wxDC & dc,
+                       wxWindow * window,
+                       const wxRect & rect,
+                       wxAuiPaneInfo & pane );
 
-    void DrawBorder(wxDC& dc,
-                  wxWindow *window,
-                  const wxRect& rect,
-                  wxAuiPaneInfo& pane);
+    void DrawBorder ( wxDC & dc,
+                      wxWindow * window,
+                      const wxRect & rect,
+                      wxAuiPaneInfo & pane );
 
-    void DrawPaneButton(wxDC& dc,
-                  wxWindow *window,
-                  int button,
-                  int button_state,
-                  const wxRect& rect,
-                  wxAuiPaneInfo& pane);
+    void DrawPaneButton ( wxDC & dc,
+                          wxWindow * window,
+                          int button,
+                          int buttonState,
+                          const wxRect & rect,
+                          wxAuiPaneInfo & pane );
 
-    void DrawIcon(wxDC& dc,
-                  const wxRect& rect,
-                  wxAuiPaneInfo& pane);
+    void DrawIcon ( wxDC & dc,
+                    const wxRect & rect,
+                    wxAuiPaneInfo & pane );
 
 protected:
 
-    void DrawCaptionBackground(wxDC& dc, const wxRect& rect, bool active);
+    void DrawCaptionBackground ( wxDC & dc, const wxRect & rect, bool active );
 
     void InitBitmaps();
 
 protected:
 
-    wxPen m_border_pen;
-    wxBrush m_sash_brush;
-    wxBrush m_background_brush;
-    wxBrush m_gripper_brush;
-    wxFont m_caption_font;
-    wxBitmap m_inactive_close_bitmap;
-    wxBitmap m_inactive_pin_bitmap;
-    wxBitmap m_inactive_maximize_bitmap;
-    wxBitmap m_inactive_restore_bitmap;
-    wxBitmap m_active_close_bitmap;
-    wxBitmap m_active_pin_bitmap;
-    wxBitmap m_active_maximize_bitmap;
-    wxBitmap m_active_restore_bitmap;
-    wxPen m_gripper_pen1;
-    wxPen m_gripper_pen2;
-    wxPen m_gripper_pen3;
-    wxColour m_base_colour;
-    wxColour m_active_caption_colour;
-    wxColour m_active_caption_gradient_colour;
-    wxColour m_active_caption_text_colour;
-    wxColour m_inactive_caption_colour;
-    wxColour m_inactive_caption_gradient_colour;
-    wxColour m_inactive_caption_text_colour;
-    int m_border_size;
-    int m_caption_size;
-    int m_sash_size;
-    int m_button_size;
-    int m_gripper_size;
-    int m_gradient_type;
+    wxPen m_borderPen;
+    wxBrush m_sashBrush;
+    wxBrush m_backgroundBrush;
+    wxBrush m_gripperBrush;
+    wxFont m_captionFont;
+    wxBitmap m_inactiveCloseBitmap;
+    wxBitmap m_inactivePinBitmap;
+    wxBitmap m_inactiveMaximizeBitmap;
+    wxBitmap m_inactiveRestoreBitmap;
+    wxBitmap m_activeCloseBitmap;
+    wxBitmap m_activePinBitmap;
+    wxBitmap m_activeMaximizeBitmap;
+    wxBitmap m_activeRestoreBitmap;
+    wxPen m_gripperPen1;
+    wxPen m_gripperPen2;
+    wxPen m_gripperPen3;
+    wxColour m_baseColour;
+    wxColour m_activeCaptionColour;
+    wxColour m_activeCaptionGradientColour;
+    wxColour m_activeCaptionTextColour;
+    wxColour m_inactiveCaptionColour;
+    wxColour m_inactiveCaptionGradientColour;
+    wxColour m_inactiveCaptionTextColour;
+    int m_borderSize;
+    int m_captionSize;
+    int m_sashSize;
+    int m_buttonSize;
+    int m_gripperSize;
+    int m_gradientType;
 };
 
 
Index: src/aui/dockart.cpp
===================================================================
--- src/aui/dockart.cpp	(revision 69060)
+++ src/aui/dockart.cpp	(working copy)
@@ -20,7 +20,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #if wxUSE_AUI
@@ -29,9 +29,9 @@
 #include "wx/aui/dockart.h"
 
 #ifndef WX_PRECOMP
-    #include "wx/settings.h"
-    #include "wx/dcclient.h"
-    #include "wx/image.h"
+#include "wx/settings.h"
+#include "wx/dcclient.h"
+#include "wx/image.h"
 #endif
 
 #ifdef __WXMAC__
@@ -44,9 +44,9 @@
 #include <gtk/gtk.h>
 #include "wx/renderer.h"
 #if GTK_CHECK_VERSION(2,0,0)
-   #include "wx/gtk/private/gtk2-compat.h"
+#include "wx/gtk/private/gtk2-compat.h"
 #else
-   #define gtk_widget_is_drawable GTK_WIDGET_DRAWABLE
+#define gtkWidgetIsDrawable GTK_WIDGET_DRAWABLE
 #endif
 #endif
 
@@ -59,157 +59,176 @@
 // with custom dock art (probably by writing a new stand-alone class derived
 // from the wxAuiDockArt base class). The active dock art class can be set via
 // wxAuiManager::SetDockArt()
-wxColor wxAuiLightContrastColour(const wxColour& c)
+wxColor wxAuiLightContrastColour ( const wxColour & c )
 {
     int amount = 120;
 
     // if the color is especially dark, then
     // make the contrast even lighter
-    if (c.Red() < 128 && c.Green() < 128 && c.Blue() < 128)
+    if ( c.Red() < 128 && c.Green() < 128 && c.Blue() < 128 )
+    {
         amount = 160;
+    }
 
-    return c.ChangeLightness(amount);
+    return c.ChangeLightness ( amount );
 }
 
 // wxAuiBitmapFromBits() is a utility function that creates a
 // masked bitmap from raw bits (XBM format)
-wxBitmap wxAuiBitmapFromBits(const unsigned char bits[], int w, int h,
-                             const wxColour& color)
+wxBitmap wxAuiBitmapFromBits ( const unsigned char bits[], int w, int h,
+                               const wxColour & color )
 {
-    wxImage img = wxBitmap((const char*)bits, w, h).ConvertToImage();
-    img.Replace(0,0,0,123,123,123);
-    img.Replace(255,255,255,color.Red(),color.Green(),color.Blue());
-    img.SetMaskColour(123,123,123);
-    return wxBitmap(img);
+    wxImage img = wxBitmap ( ( const char * ) bits, w, h ).ConvertToImage();
+    img.Replace ( 0, 0, 0, 123, 123, 123 );
+    img.Replace ( 255, 255, 255, color.Red(), color.Green(), color.Blue() );
+    img.SetMaskColour ( 123, 123, 123 );
+    return wxBitmap ( img );
 }
 
 
-static void DrawGradientRectangle(wxDC& dc,
-                                  const wxRect& rect,
-                                  const wxColour& start_color,
-                                  const wxColour& end_color,
-                                  int direction)
+static void DrawGradientRectangle ( wxDC & dc,
+                                    const wxRect & rect,
+                                    const wxColour & startColor,
+                                    const wxColour & endColor,
+                                    int direction )
 {
     int rd, gd, bd, high = 0;
-    rd = end_color.Red() - start_color.Red();
-    gd = end_color.Green() - start_color.Green();
-    bd = end_color.Blue() - start_color.Blue();
+    rd = endColor.Red() - startColor.Red();
+    gd = endColor.Green() - startColor.Green();
+    bd = endColor.Blue() - startColor.Blue();
 
-    if (direction == wxAUI_GRADIENT_VERTICAL)
-        high = rect.GetHeight()-1;
+    if ( direction == wxAUI_GRADIENT_VERTICAL )
+    {
+        high = rect.GetHeight() - 1;
+    }
+
     else
-        high = rect.GetWidth()-1;
+    {
+        high = rect.GetWidth() - 1;
+    }
 
-    for (int i = 0; i <= high; ++i)
+    for ( int i = 0; i <= high; ++i )
     {
-        int r,g,b;
+        int r, g, b;
 
 
-        r = start_color.Red() + (high <= 0 ? 0 : (((i*rd*100)/high)/100));
-        g = start_color.Green() + (high <= 0 ? 0 : (((i*gd*100)/high)/100));
-        b = start_color.Blue() + (high <= 0 ? 0 : (((i*bd*100)/high)/100));
+        r = startColor.Red() + ( high <= 0 ? 0 : ( ( ( i * rd * 100 ) / high ) / 100 ) );
+        g = startColor.Green() + ( high <= 0 ? 0 : ( ( ( i * gd * 100 ) / high ) / 100 ) );
+        b = startColor.Blue() + ( high <= 0 ? 0 : ( ( ( i * bd * 100 ) / high ) / 100 ) );
 
-        wxPen p(wxColor((unsigned char)r,
-                        (unsigned char)g,
-                        (unsigned char)b));
-        dc.SetPen(p);
+        wxPen p ( wxColor ( ( unsigned char ) r,
+                            ( unsigned char ) g,
+                            ( unsigned char ) b ) );
+        dc.SetPen ( p );
 
-        if (direction == wxAUI_GRADIENT_VERTICAL)
-            dc.DrawLine(rect.x, rect.y+i, rect.x+rect.width, rect.y+i);
+        if ( direction == wxAUI_GRADIENT_VERTICAL )
+        {
+            dc.DrawLine ( rect.x, rect.y + i, rect.x + rect.width, rect.y + i );
+        }
+
         else
-            dc.DrawLine(rect.x+i, rect.y, rect.x+i, rect.y+rect.height);
+        {
+            dc.DrawLine ( rect.x + i, rect.y, rect.x + i, rect.y + rect.height );
+        }
     }
 }
 
-wxString wxAuiChopText(wxDC& dc, const wxString& text, int max_size)
+wxString wxAuiChopText ( wxDC & dc, const wxString & text, int maxSize )
 {
-    wxCoord x,y;
+    wxCoord x, y;
 
     // first check if the text fits with no problems
-    dc.GetTextExtent(text, &x, &y);
-    if (x <= max_size)
+    dc.GetTextExtent ( text, &x, &y );
+
+    if ( x <= maxSize )
+    {
         return text;
+    }
 
     size_t i, len = text.Length();
-    size_t last_good_length = 0;
-    for (i = 0; i < len; ++i)
+    size_t lastGoodLength = 0;
+
+    for ( i = 0; i < len; ++i )
     {
-        wxString s = text.Left(i);
-        s += wxT("...");
+        wxString s = text.Left ( i );
+        s += wxT ( "..." );
 
-        dc.GetTextExtent(s, &x, &y);
-        if (x > max_size)
+        dc.GetTextExtent ( s, &x, &y );
+
+        if ( x > maxSize )
+        {
             break;
+        }
 
-        last_good_length = i;
+        lastGoodLength = i;
     }
 
-    wxString ret = text.Left(last_good_length);
-    ret += wxT("...");
+    wxString ret = text.Left ( lastGoodLength );
+    ret += wxT ( "..." );
     return ret;
 }
 
 wxAuiDefaultDockArt::wxAuiDefaultDockArt()
 {
 #if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor base_colour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
+    wxColor baseColour = wxColour ( wxMacCreateCGColorFromHITheme ( kThemeBrushToolbarBackground ) );
 #else
-    wxColor base_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
+    wxColor baseColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_3DFACE );
 #endif
 
-    // the base_colour is too pale to use as our base colour,
+    // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
-    if ((255-base_colour.Red()) +
-        (255-base_colour.Green()) +
-        (255-base_colour.Blue()) < 60)
+    if ( ( 255 - baseColour.Red() ) +
+            ( 255 - baseColour.Green() ) +
+            ( 255 - baseColour.Blue() ) < 60 )
     {
-        base_colour = base_colour.ChangeLightness(92);
+        baseColour = baseColour.ChangeLightness ( 92 );
     }
 
-    m_base_colour = base_colour;
-    wxColor darker1_colour = base_colour.ChangeLightness(85);
-    wxColor darker2_colour = base_colour.ChangeLightness(75);
-    wxColor darker3_colour = base_colour.ChangeLightness(60);
-    //wxColor darker4_colour = base_colour.ChangeLightness(50);
-    wxColor darker5_colour = base_colour.ChangeLightness(40);
+    m_baseColour = baseColour;
+    wxColor darker1Colour = baseColour.ChangeLightness ( 85 );
+    wxColor darker2Colour = baseColour.ChangeLightness ( 75 );
+    wxColor darker3Colour = baseColour.ChangeLightness ( 60 );
+    //wxColor darker4Colour = baseColour.ChangeLightness(50);
+    wxColor darker5Colour = baseColour.ChangeLightness ( 40 );
 
-    m_active_caption_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
-    m_active_caption_gradient_colour = wxAuiLightContrastColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
-    m_active_caption_text_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT);
-    m_inactive_caption_colour = darker1_colour;
-    m_inactive_caption_gradient_colour = base_colour.ChangeLightness(97);
-    m_inactive_caption_text_colour = *wxBLACK;
+    m_activeCaptionColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_HIGHLIGHT );
+    m_activeCaptionGradientColour = wxAuiLightContrastColour ( wxSystemSettings::GetColour ( wxSYS_COLOUR_HIGHLIGHT ) );
+    m_activeCaptionTextColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_HIGHLIGHTTEXT );
+    m_inactiveCaptionColour = darker1Colour;
+    m_inactiveCaptionGradientColour = baseColour.ChangeLightness ( 97 );
+    m_inactiveCaptionTextColour = *wxBLACK;
 
-    m_sash_brush = wxBrush(base_colour);
-    m_background_brush = wxBrush(base_colour);
-    m_gripper_brush = wxBrush(base_colour);
+    m_sashBrush = wxBrush ( baseColour );
+    m_backgroundBrush = wxBrush ( baseColour );
+    m_gripperBrush = wxBrush ( baseColour );
 
-    m_border_pen = wxPen(darker2_colour);
-    m_gripper_pen1 = wxPen(darker5_colour);
-    m_gripper_pen2 = wxPen(darker3_colour);
-    m_gripper_pen3 = *wxWHITE_PEN;
+    m_borderPen = wxPen ( darker2Colour );
+    m_gripperPen1 = wxPen ( darker5Colour );
+    m_gripperPen2 = wxPen ( darker3Colour );
+    m_gripperPen3 = *wxWHITE_PEN;
 
 #ifdef __WXMAC__
-    m_caption_font = *wxSMALL_FONT;
+    m_captionFont = *wxSMALL_FONT;
 #else
-    m_caption_font = wxFont(8, wxDEFAULT, wxNORMAL, wxNORMAL, FALSE);
+    m_captionFont = wxFont ( 8, wxDEFAULT, wxNORMAL, wxNORMAL, FALSE );
 #endif
 
     // default metric values
 #if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
     SInt32 height;
-    GetThemeMetric( kThemeMetricSmallPaneSplitterHeight , &height );
-    m_sash_size = height;
+    GetThemeMetric ( kThemeMetricSmallPaneSplitterHeight , &height );
+    m_sashSize = height;
 #elif defined(__WXGTK__)
-    m_sash_size = wxRendererNative::Get().GetSplitterParams(NULL).widthSash;
+    m_sashSize = wxRendererNative::Get().GetSplitterParams ( NULL ).widthSash;
 #else
-    m_sash_size = 4;
+    m_sashSize = 4;
 #endif
-    m_caption_size = 17;
-    m_border_size = 1;
-    m_button_size = 14;
-    m_gripper_size = 9;
-    m_gradient_type = wxAUI_GRADIENT_VERTICAL;
+    m_captionSize = 17;
+    m_borderSize = 1;
+    m_buttonSize = 14;
+    m_gripperSize = 9;
+    m_gradientType = wxAUI_GRADIENT_VERTICAL;
 
     InitBitmaps();
 }
@@ -219,510 +238,627 @@
 {
     // some built in bitmaps
 #if defined( __WXMAC__ )
-     static const unsigned char close_bits[]={
-         0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFE, 0x03, 0xF8, 0x01, 0xF0, 0x19, 0xF3,
-         0xB8, 0xE3, 0xF0, 0xE1, 0xE0, 0xE0, 0xF0, 0xE1, 0xB8, 0xE3, 0x19, 0xF3,
-         0x01, 0xF0, 0x03, 0xF8, 0x0F, 0xFE, 0xFF, 0xFF };
+    static const unsigned char closeBits[] =
+    {
+        0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFE, 0x03, 0xF8, 0x01, 0xF0, 0x19, 0xF3,
+        0xB8, 0xE3, 0xF0, 0xE1, 0xE0, 0xE0, 0xF0, 0xE1, 0xB8, 0xE3, 0x19, 0xF3,
+        0x01, 0xF0, 0x03, 0xF8, 0x0F, 0xFE, 0xFF, 0xFF
+    };
 #elif defined(__WXGTK__)
-     static const unsigned char close_bits[]={
-         0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xfb, 0xef, 0xdb, 0xed, 0x8b, 0xe8,
-         0x1b, 0xec, 0x3b, 0xee, 0x1b, 0xec, 0x8b, 0xe8, 0xdb, 0xed, 0xfb, 0xef,
-         0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
+    static const unsigned char closeBits[] =
+    {
+        0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xfb, 0xef, 0xdb, 0xed, 0x8b, 0xe8,
+        0x1b, 0xec, 0x3b, 0xee, 0x1b, 0xec, 0x8b, 0xe8, 0xdb, 0xed, 0xfb, 0xef,
+        0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
 #else
-    static const unsigned char close_bits[]={
-         // reduced height, symmetric
-         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf3, 0x9f, 0xf9,
-         0x3f, 0xfc, 0x7f, 0xfe, 0x3f, 0xfc, 0x9f, 0xf9, 0xcf, 0xf3, 0xff, 0xff,
-         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
-      /*
-         // same height as maximize/restore
-         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0xcf, 0xf3, 0x9f, 0xf9,
-         0x3f, 0xfc, 0x7f, 0xfe, 0x3f, 0xfc, 0x9f, 0xf9, 0xcf, 0xf3, 0xe7, 0xe7,
-         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
-      */
+    static const unsigned char closeBits[] =
+    {
+        // reduced height, symmetric
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf3, 0x9f, 0xf9,
+        0x3f, 0xfc, 0x7f, 0xfe, 0x3f, 0xfc, 0x9f, 0xf9, 0xcf, 0xf3, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
+    /*
+       // same height as maximize/restore
+       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0xcf, 0xf3, 0x9f, 0xf9,
+       0x3f, 0xfc, 0x7f, 0xfe, 0x3f, 0xfc, 0x9f, 0xf9, 0xcf, 0xf3, 0xe7, 0xe7,
+       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
+    */
 #endif
 
-    static const unsigned char maximize_bits[] = {
+    static const unsigned char maximizeBits[] =
+    {
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xf7, 0xf7, 0x07, 0xf0,
         0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7, 0x07, 0xf0,
-        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
 
-    static const unsigned char restore_bits[]={
+    static const unsigned char restoreBits[] =
+    {
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x1f, 0xf0, 0xdf, 0xf7,
         0x07, 0xf4, 0x07, 0xf4, 0xf7, 0xf5, 0xf7, 0xf1, 0xf7, 0xfd, 0xf7, 0xfd,
-        0x07, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+        0x07, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
 
-    static const unsigned char pin_bits[]={
-        0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xfc,0xdf,0xfc,0xdf,0xfc,
-        0xdf,0xfc,0xdf,0xfc,0xdf,0xfc,0x0f,0xf8,0x7f,0xff,0x7f,0xff,
-        0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
+    static const unsigned char pinBits[] =
+    {
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfc, 0xdf, 0xfc, 0xdf, 0xfc,
+        0xdf, 0xfc, 0xdf, 0xfc, 0xdf, 0xfc, 0x0f, 0xf8, 0x7f, 0xff, 0x7f, 0xff,
+        0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+    };
 
 #ifdef __WXMAC__
-    m_inactive_close_bitmap = wxAuiBitmapFromBits(close_bits, 16, 16, *wxWHITE);
-    m_active_close_bitmap = wxAuiBitmapFromBits(close_bits, 16, 16, *wxWHITE );
+    m_inactiveCloseBitmap = wxAuiBitmapFromBits ( closeBits, 16, 16, *wxWHITE );
+    m_activeCloseBitmap = wxAuiBitmapFromBits ( closeBits, 16, 16, *wxWHITE );
 #else
-    m_inactive_close_bitmap = wxAuiBitmapFromBits(close_bits, 16, 16, m_inactive_caption_text_colour);
-    m_active_close_bitmap = wxAuiBitmapFromBits(close_bits, 16, 16, m_active_caption_text_colour);
+    m_inactiveCloseBitmap = wxAuiBitmapFromBits ( closeBits, 16, 16, m_inactiveCaptionTextColour );
+    m_activeCloseBitmap = wxAuiBitmapFromBits ( closeBits, 16, 16, m_activeCaptionTextColour );
 #endif
 
 #ifdef __WXMAC__
-    m_inactive_maximize_bitmap = wxAuiBitmapFromBits(maximize_bits, 16, 16, *wxWHITE);
-    m_active_maximize_bitmap = wxAuiBitmapFromBits(maximize_bits, 16, 16, *wxWHITE );
+    m_inactiveMaximizeBitmap = wxAuiBitmapFromBits ( maximizeBits, 16, 16, *wxWHITE );
+    m_activeMaximizeBitmap = wxAuiBitmapFromBits ( maximizeBits, 16, 16, *wxWHITE );
 #else
-    m_inactive_maximize_bitmap = wxAuiBitmapFromBits(maximize_bits, 16, 16, m_inactive_caption_text_colour);
-    m_active_maximize_bitmap = wxAuiBitmapFromBits(maximize_bits, 16, 16, m_active_caption_text_colour);
+    m_inactiveMaximizeBitmap = wxAuiBitmapFromBits ( maximizeBits, 16, 16, m_inactiveCaptionTextColour );
+    m_activeMaximizeBitmap = wxAuiBitmapFromBits ( maximizeBits, 16, 16, m_activeCaptionTextColour );
 #endif
 
 #ifdef __WXMAC__
-    m_inactive_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE);
-    m_active_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, *wxWHITE );
+    m_inactiveRestoreBitmap = wxAuiBitmapFromBits ( restoreBits, 16, 16, *wxWHITE );
+    m_activeRestoreBitmap = wxAuiBitmapFromBits ( restoreBits, 16, 16, *wxWHITE );
 #else
-    m_inactive_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, m_inactive_caption_text_colour);
-    m_active_restore_bitmap = wxAuiBitmapFromBits(restore_bits, 16, 16, m_active_caption_text_colour);
+    m_inactiveRestoreBitmap = wxAuiBitmapFromBits ( restoreBits, 16, 16, m_inactiveCaptionTextColour );
+    m_activeRestoreBitmap = wxAuiBitmapFromBits ( restoreBits, 16, 16, m_activeCaptionTextColour );
 #endif
 
-    m_inactive_pin_bitmap = wxAuiBitmapFromBits(pin_bits, 16, 16, m_inactive_caption_text_colour);
-    m_active_pin_bitmap = wxAuiBitmapFromBits(pin_bits, 16, 16, m_active_caption_text_colour);
+    m_inactivePinBitmap = wxAuiBitmapFromBits ( pinBits, 16, 16, m_inactiveCaptionTextColour );
+    m_activePinBitmap = wxAuiBitmapFromBits ( pinBits, 16, 16, m_activeCaptionTextColour );
 }
 
-int wxAuiDefaultDockArt::GetMetric(int id)
+int wxAuiDefaultDockArt::GetMetric ( int id )
 {
-    switch (id)
+    switch ( id )
     {
-        case wxAUI_DOCKART_SASH_SIZE:          return m_sash_size;
-        case wxAUI_DOCKART_CAPTION_SIZE:       return m_caption_size;
-        case wxAUI_DOCKART_GRIPPER_SIZE:       return m_gripper_size;
-        case wxAUI_DOCKART_PANE_BORDER_SIZE:   return m_border_size;
-        case wxAUI_DOCKART_PANE_BUTTON_SIZE:   return m_button_size;
-        case wxAUI_DOCKART_GRADIENT_TYPE:      return m_gradient_type;
-        default: wxFAIL_MSG(wxT("Invalid Metric Ordinal")); break;
+        case wxAUI_DOCKART_SASH_SIZE:          return m_sashSize;
+
+        case wxAUI_DOCKART_CAPTION_SIZE:       return m_captionSize;
+
+        case wxAUI_DOCKART_GRIPPER_SIZE:       return m_gripperSize;
+
+        case wxAUI_DOCKART_PANE_BORDER_SIZE:   return m_borderSize;
+
+        case wxAUI_DOCKART_PANE_BUTTON_SIZE:   return m_buttonSize;
+
+        case wxAUI_DOCKART_GRADIENT_TYPE:      return m_gradientType;
+
+        default: wxFAIL_MSG ( wxT ( "Invalid Metric Ordinal" ) ); break;
     }
 
     return 0;
 }
 
-void wxAuiDefaultDockArt::SetMetric(int id, int new_val)
+void wxAuiDefaultDockArt::SetMetric ( int id, int newVal )
 {
-    switch (id)
+    switch ( id )
     {
-        case wxAUI_DOCKART_SASH_SIZE:          m_sash_size = new_val; break;
-        case wxAUI_DOCKART_CAPTION_SIZE:       m_caption_size = new_val; break;
-        case wxAUI_DOCKART_GRIPPER_SIZE:       m_gripper_size = new_val; break;
-        case wxAUI_DOCKART_PANE_BORDER_SIZE:   m_border_size = new_val; break;
-        case wxAUI_DOCKART_PANE_BUTTON_SIZE:   m_button_size = new_val; break;
-        case wxAUI_DOCKART_GRADIENT_TYPE:      m_gradient_type = new_val; break;
-        default: wxFAIL_MSG(wxT("Invalid Metric Ordinal")); break;
+        case wxAUI_DOCKART_SASH_SIZE:          m_sashSize = newVal; break;
+
+        case wxAUI_DOCKART_CAPTION_SIZE:       m_captionSize = newVal; break;
+
+        case wxAUI_DOCKART_GRIPPER_SIZE:       m_gripperSize = newVal; break;
+
+        case wxAUI_DOCKART_PANE_BORDER_SIZE:   m_borderSize = newVal; break;
+
+        case wxAUI_DOCKART_PANE_BUTTON_SIZE:   m_buttonSize = newVal; break;
+
+        case wxAUI_DOCKART_GRADIENT_TYPE:      m_gradientType = newVal; break;
+
+        default: wxFAIL_MSG ( wxT ( "Invalid Metric Ordinal" ) ); break;
     }
 }
 
-wxColour wxAuiDefaultDockArt::GetColour(int id)
+wxColour wxAuiDefaultDockArt::GetColour ( int id )
 {
-    switch (id)
+    switch ( id )
     {
-        case wxAUI_DOCKART_BACKGROUND_COLOUR:                return m_background_brush.GetColour();
-        case wxAUI_DOCKART_SASH_COLOUR:                      return m_sash_brush.GetColour();
-        case wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR:          return m_inactive_caption_colour;
-        case wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR: return m_inactive_caption_gradient_colour;
-        case wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR:     return m_inactive_caption_text_colour;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR:            return m_active_caption_colour;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR:   return m_active_caption_gradient_colour;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR:       return m_active_caption_text_colour;
-        case wxAUI_DOCKART_BORDER_COLOUR:                    return m_border_pen.GetColour();
-        case wxAUI_DOCKART_GRIPPER_COLOUR:                   return m_gripper_brush.GetColour();
-        default: wxFAIL_MSG(wxT("Invalid Metric Ordinal")); break;
+        case wxAUI_DOCKART_BACKGROUND_COLOUR:                return m_backgroundBrush.GetColour();
+
+        case wxAUI_DOCKART_SASH_COLOUR:                      return m_sashBrush.GetColour();
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR:          return m_inactiveCaptionColour;
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR: return m_inactiveCaptionGradientColour;
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR:     return m_inactiveCaptionTextColour;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR:            return m_activeCaptionColour;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR:   return m_activeCaptionGradientColour;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR:       return m_activeCaptionTextColour;
+
+        case wxAUI_DOCKART_BORDER_COLOUR:                    return m_borderPen.GetColour();
+
+        case wxAUI_DOCKART_GRIPPER_COLOUR:                   return m_gripperBrush.GetColour();
+
+        default: wxFAIL_MSG ( wxT ( "Invalid Metric Ordinal" ) ); break;
     }
 
     return wxColour();
 }
 
-void wxAuiDefaultDockArt::SetColour(int id, const wxColor& colour)
+void wxAuiDefaultDockArt::SetColour ( int id, const wxColor & colour )
 {
-    switch (id)
+    switch ( id )
     {
-        case wxAUI_DOCKART_BACKGROUND_COLOUR:                m_background_brush.SetColour(colour); break;
-        case wxAUI_DOCKART_SASH_COLOUR:                      m_sash_brush.SetColour(colour); break;
-        case wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR:          m_inactive_caption_colour = colour; break;
-        case wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR: m_inactive_caption_gradient_colour = colour; break;
-        case wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR:     m_inactive_caption_text_colour = colour; break;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR:            m_active_caption_colour = colour; break;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR:   m_active_caption_gradient_colour = colour; break;
-        case wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR:       m_active_caption_text_colour = colour; break;
-        case wxAUI_DOCKART_BORDER_COLOUR:                    m_border_pen.SetColour(colour); break;
+        case wxAUI_DOCKART_BACKGROUND_COLOUR:                m_backgroundBrush.SetColour ( colour ); break;
+
+        case wxAUI_DOCKART_SASH_COLOUR:                      m_sashBrush.SetColour ( colour ); break;
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR:          m_inactiveCaptionColour = colour; break;
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR: m_inactiveCaptionGradientColour = colour; break;
+
+        case wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR:     m_inactiveCaptionTextColour = colour; break;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR:            m_activeCaptionColour = colour; break;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR:   m_activeCaptionGradientColour = colour; break;
+
+        case wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR:       m_activeCaptionTextColour = colour; break;
+
+        case wxAUI_DOCKART_BORDER_COLOUR:                    m_borderPen.SetColour ( colour ); break;
+
         case wxAUI_DOCKART_GRIPPER_COLOUR:
-            m_gripper_brush.SetColour(colour);
-            m_gripper_pen1.SetColour(colour.ChangeLightness(40));
-            m_gripper_pen2.SetColour(colour.ChangeLightness(60));
+            m_gripperBrush.SetColour ( colour );
+            m_gripperPen1.SetColour ( colour.ChangeLightness ( 40 ) );
+            m_gripperPen2.SetColour ( colour.ChangeLightness ( 60 ) );
             break;
-        default: wxFAIL_MSG(wxT("Invalid Metric Ordinal")); break;
+
+        default: wxFAIL_MSG ( wxT ( "Invalid Metric Ordinal" ) ); break;
     }
 
     InitBitmaps();
 }
 
-void wxAuiDefaultDockArt::SetFont(int id, const wxFont& font)
+void wxAuiDefaultDockArt::SetFont ( int id, const wxFont & font )
 {
-    if (id == wxAUI_DOCKART_CAPTION_FONT)
-        m_caption_font = font;
+    if ( id == wxAUI_DOCKART_CAPTION_FONT )
+    {
+        m_captionFont = font;
+    }
 }
 
-wxFont wxAuiDefaultDockArt::GetFont(int id)
+wxFont wxAuiDefaultDockArt::GetFont ( int id )
 {
-    if (id == wxAUI_DOCKART_CAPTION_FONT)
-        return m_caption_font;
+    if ( id == wxAUI_DOCKART_CAPTION_FONT )
+    {
+        return m_captionFont;
+    }
+
     return wxNullFont;
 }
 
-void wxAuiDefaultDockArt::DrawSash(wxDC& dc, wxWindow *window, int orientation, const wxRect& rect)
+void wxAuiDefaultDockArt::DrawSash ( wxDC & dc, wxWindow * window, int orientation, const wxRect & rect )
 {
 #if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxUnusedVar(window);
-    wxUnusedVar(orientation);
+    wxUnusedVar ( window );
+    wxUnusedVar ( orientation );
 
-    HIRect splitterRect = CGRectMake( rect.x , rect.y , rect.width , rect.height );
+    HIRect splitterRect = CGRectMake ( rect.x , rect.y , rect.width , rect.height );
     CGContextRef cgContext ;
-    wxGCDCImpl *impl = (wxGCDCImpl*) dc.GetImpl();
-    cgContext = (CGContextRef) impl->GetGraphicsContext()->GetNativeContext() ;
+    wxGCDCImpl * impl = ( wxGCDCImpl * ) dc.GetImpl();
+    cgContext = ( CGContextRef ) impl->GetGraphicsContext()->GetNativeContext() ;
 
     HIThemeSplitterDrawInfo drawInfo ;
     drawInfo.version = 0 ;
     drawInfo.state = kThemeStateActive ;
     drawInfo.adornment = kHIThemeSplitterAdornmentNone ;
-    HIThemeDrawPaneSplitter( &splitterRect , &drawInfo , cgContext , kHIThemeOrientationNormal ) ;
+    HIThemeDrawPaneSplitter ( &splitterRect , &drawInfo , cgContext , kHIThemeOrientationNormal ) ;
 
 #elif defined(__WXGTK__)
     // clear out the rectangle first
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush(m_sash_brush);
-    dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+    dc.SetPen ( *wxTRANSPARENT_PEN );
+    dc.SetBrush ( m_sashBrush );
+    dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
 
 #if 0
-    GdkRectangle gdk_rect;
-    if (orientation == wxVERTICAL )
+    GdkRectangle gdkRect;
+
+    if ( orientation == wxVERTICAL )
     {
-        gdk_rect.x = rect.x;
-        gdk_rect.y = rect.y;
-        gdk_rect.width = m_sash_size;
-        gdk_rect.height = rect.height;
+        gdkRect.x = rect.x;
+        gdkRect.y = rect.y;
+        gdkRect.width = m_sashSize;
+        gdkRect.height = rect.height;
     }
+
     else
     {
-        gdk_rect.x = rect.x;
-        gdk_rect.y = rect.y;
-        gdk_rect.width = rect.width;
-        gdk_rect.height = m_sash_size;
+        gdkRect.x = rect.x;
+        gdkRect.y = rect.y;
+        gdkRect.width = rect.width;
+        gdkRect.height = m_sashSize;
     }
+
 #endif
 
-    if (!window) return;
-    if (!window->m_wxwindow) return;
-    if (!gtk_widget_is_drawable(window->m_wxwindow)) return;
+    if ( !window ) { return; }
 
-    gtk_paint_handle
+    if ( !window->mWxwindow ) { return; }
+
+    if ( !gtkWidgetIsDrawable ( window->mWxwindow ) ) { return; }
+
+    gtkPaintHandle
     (
-        gtk_widget_get_style(window->m_wxwindow),
+        gtkWidgetGetStyle ( window->mWxwindow ),
         window->GTKGetDrawingWindow(),
         // flags & wxCONTROL_CURRENT ? GTK_STATE_PRELIGHT : GTK_STATE_NORMAL,
         GTK_STATE_NORMAL,
         GTK_SHADOW_NONE,
         NULL /* no clipping */,
-        window->m_wxwindow,
+        window->mWxwindow,
         "paned",
         rect.x,
         rect.y,
         rect.width,
         rect.height,
-        (orientation == wxVERTICAL) ? GTK_ORIENTATION_VERTICAL : GTK_ORIENTATION_HORIZONTAL
+        ( orientation == wxVERTICAL ) ? GTK_ORIENTATION_VERTICAL : GTK_ORIENTATION_HORIZONTAL
     );
 
 #else
-    wxUnusedVar(window);
-    wxUnusedVar(orientation);
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush(m_sash_brush);
-    dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+    wxUnusedVar ( window );
+    wxUnusedVar ( orientation );
+    dc.SetPen ( *wxTRANSPARENT_PEN );
+    dc.SetBrush ( m_sashBrush );
+    dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
 #endif
 }
 
 
-void wxAuiDefaultDockArt::DrawBackground(wxDC& dc, wxWindow *WXUNUSED(window), int, const wxRect& rect)
+void wxAuiDefaultDockArt::DrawBackground ( wxDC & dc, wxWindow * WXUNUSED ( window ), int, const wxRect & rect )
 {
-    dc.SetPen(*wxTRANSPARENT_PEN);
+    dc.SetPen ( *wxTRANSPARENT_PEN );
 #ifdef __WXMAC__
     // we have to clear first, otherwise we are drawing a light striped pattern
     // over an already darker striped background
-    dc.SetBrush(*wxWHITE_BRUSH) ;
-    dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+    dc.SetBrush ( *wxWHITE_BRUSH ) ;
+    dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
 #endif
-    dc.SetBrush(m_background_brush);
-    dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+    dc.SetBrush ( m_backgroundBrush );
+    dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
 }
 
-void wxAuiDefaultDockArt::DrawBorder(wxDC& dc, wxWindow *WXUNUSED(window), const wxRect& _rect,
-                                  wxAuiPaneInfo& pane)
+void wxAuiDefaultDockArt::DrawBorder ( wxDC & dc, wxWindow * WXUNUSED ( window ), const wxRect & Rect,
+                                       wxAuiPaneInfo & pane )
 {
-    dc.SetPen(m_border_pen);
-    dc.SetBrush(*wxTRANSPARENT_BRUSH);
+    dc.SetPen ( m_borderPen );
+    dc.SetBrush ( *wxTRANSPARENT_BRUSH );
 
-    wxRect rect = _rect;
-    int i, border_width = GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE);
+    wxRect rect = Rect;
+    int i, borderWidth = GetMetric ( wxAUI_DOCKART_PANE_BORDER_SIZE );
 
-    if (pane.IsToolbar())
+    if ( pane.IsToolbar() )
     {
-        for (i = 0; i < border_width; ++i)
+        for ( i = 0; i < borderWidth; ++i )
         {
-            dc.SetPen(*wxWHITE_PEN);
-            dc.DrawLine(rect.x, rect.y, rect.x+rect.width, rect.y);
-            dc.DrawLine(rect.x, rect.y, rect.x, rect.y+rect.height);
-            dc.SetPen(m_border_pen);
-            dc.DrawLine(rect.x, rect.y+rect.height-1,
-                        rect.x+rect.width, rect.y+rect.height-1);
-            dc.DrawLine(rect.x+rect.width-1, rect.y,
-                        rect.x+rect.width-1, rect.y+rect.height);
-            rect.Deflate(1);
+            dc.SetPen ( *wxWHITE_PEN );
+            dc.DrawLine ( rect.x, rect.y, rect.x + rect.width, rect.y );
+            dc.DrawLine ( rect.x, rect.y, rect.x, rect.y + rect.height );
+            dc.SetPen ( m_borderPen );
+            dc.DrawLine ( rect.x, rect.y + rect.height - 1,
+                          rect.x + rect.width, rect.y + rect.height - 1 );
+            dc.DrawLine ( rect.x + rect.width - 1, rect.y,
+                          rect.x + rect.width - 1, rect.y + rect.height );
+            rect.Deflate ( 1 );
         }
     }
+
     else
     {
-        for (i = 0; i < border_width; ++i)
+        for ( i = 0; i < borderWidth; ++i )
         {
-            dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
-            rect.Deflate(1);
+            dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
+            rect.Deflate ( 1 );
         }
     }
 }
 
 
-void wxAuiDefaultDockArt::DrawCaptionBackground(wxDC& dc, const wxRect& rect, bool active)
+void wxAuiDefaultDockArt::DrawCaptionBackground ( wxDC & dc, const wxRect & rect, bool active )
 {
-    if (m_gradient_type == wxAUI_GRADIENT_NONE)
+    if ( m_gradientType == wxAUI_GRADIENT_NONE )
     {
-        if (active)
-            dc.SetBrush(wxBrush(m_active_caption_colour));
+        if ( active )
+        {
+            dc.SetBrush ( wxBrush ( m_activeCaptionColour ) );
+        }
+
         else
-            dc.SetBrush(wxBrush(m_inactive_caption_colour));
+        {
+            dc.SetBrush ( wxBrush ( m_inactiveCaptionColour ) );
+        }
 
-        dc.DrawRectangle(rect.x, rect.y, rect.width, rect.height);
+        dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
     }
+
     else
     {
-        if (active)
+        if ( active )
         {
             // on mac the gradients are expected to become darker from the top
 #ifdef __WXMAC__
-            DrawGradientRectangle(dc, rect,
-                                 m_active_caption_colour,
-                                 m_active_caption_gradient_colour,
-                                 m_gradient_type);
+            DrawGradientRectangle ( dc, rect,
+                                    m_activeCaptionColour,
+                                    m_activeCaptionGradientColour,
+                                    m_gradientType );
 #else
             // on other platforms, active gradients become lighter at the top
-            DrawGradientRectangle(dc, rect,
-                                 m_active_caption_gradient_colour,
-                                 m_active_caption_colour,
-                                 m_gradient_type);
+            DrawGradientRectangle ( dc, rect,
+                                    m_activeCaptionGradientColour,
+                                    m_activeCaptionColour,
+                                    m_gradientType );
 #endif
         }
+
         else
         {
 #ifdef __WXMAC__
             // on mac the gradients are expected to become darker from the top
-            DrawGradientRectangle(dc, rect,
-                                 m_inactive_caption_gradient_colour,
-                                 m_inactive_caption_colour,
-                                 m_gradient_type);
+            DrawGradientRectangle ( dc, rect,
+                                    m_inactiveCaptionGradientColour,
+                                    m_inactiveCaptionColour,
+                                    m_gradientType );
 #else
             // on other platforms, inactive gradients become lighter at the bottom
-            DrawGradientRectangle(dc, rect,
-                                 m_inactive_caption_colour,
-                                 m_inactive_caption_gradient_colour,
-                                 m_gradient_type);
+            DrawGradientRectangle ( dc, rect,
+                                    m_inactiveCaptionColour,
+                                    m_inactiveCaptionGradientColour,
+                                    m_gradientType );
 #endif
         }
     }
 }
 
 
-void wxAuiDefaultDockArt::DrawCaption(wxDC& dc, wxWindow *WXUNUSED(window),
-                                   const wxString& text,
-                                   const wxRect& rect,
-                                   wxAuiPaneInfo& pane)
+void wxAuiDefaultDockArt::DrawCaption ( wxDC & dc, wxWindow * WXUNUSED ( window ),
+                                        const wxString & text,
+                                        const wxRect & rect,
+                                        wxAuiPaneInfo & pane )
 {
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetFont(m_caption_font);
+    dc.SetPen ( *wxTRANSPARENT_PEN );
+    dc.SetFont ( m_captionFont );
 
-    DrawCaptionBackground(dc, rect,
-                          (pane.state & wxAuiPaneInfo::optionActive)?true:false);
+    DrawCaptionBackground ( dc, rect,
+                            ( pane.state & wxAuiPaneInfo::optionActive ) ? true : false );
 
-    int caption_offset = 0;
+    int captionOffset = 0;
+
     if ( pane.icon.IsOk() )
     {
-        DrawIcon(dc, rect, pane);
+        DrawIcon ( dc, rect, pane );
 
-        caption_offset += pane.icon.GetWidth() + 3;
+        captionOffset += pane.icon.GetWidth() + 3;
     }
 
-    if (pane.state & wxAuiPaneInfo::optionActive)
-        dc.SetTextForeground(m_active_caption_text_colour);
+    if ( pane.state & wxAuiPaneInfo::optionActive )
+    {
+        dc.SetTextForeground ( m_activeCaptionTextColour );
+    }
+
     else
-        dc.SetTextForeground(m_inactive_caption_text_colour);
+    {
+        dc.SetTextForeground ( m_inactiveCaptionTextColour );
+    }
 
 
-    wxCoord w,h;
-    dc.GetTextExtent(wxT("ABCDEFHXfgkj"), &w, &h);
+    wxCoord w, h;
+    dc.GetTextExtent ( wxT ( "ABCDEFHXfgkj" ), &w, &h );
 
-    wxRect clip_rect = rect;
-    clip_rect.width -= 3; // text offset
-    clip_rect.width -= 2; // button padding
-    if (pane.HasCloseButton())
-        clip_rect.width -= m_button_size;
-    if (pane.HasPinButton())
-        clip_rect.width -= m_button_size;
-    if (pane.HasMaximizeButton())
-        clip_rect.width -= m_button_size;
+    wxRect clipRect = rect;
+    clipRect.width -= 3; // text offset
+    clipRect.width -= 2; // button padding
 
-    wxString draw_text = wxAuiChopText(dc, text, clip_rect.width);
+    if ( pane.HasCloseButton() )
+    {
+        clipRect.width -= m_buttonSize;
+    }
 
-    dc.SetClippingRegion(clip_rect);
-    dc.DrawText(draw_text, rect.x+3 + caption_offset, rect.y+(rect.height/2)-(h/2)-1);
+    if ( pane.HasPinButton() )
+    {
+        clipRect.width -= m_buttonSize;
+    }
+
+    if ( pane.HasMaximizeButton() )
+    {
+        clipRect.width -= m_buttonSize;
+    }
+
+    wxString drawText = wxAuiChopText ( dc, text, clipRect.width );
+
+    dc.SetClippingRegion ( clipRect );
+    dc.DrawText ( drawText, rect.x + 3 + captionOffset, rect.y + ( rect.height / 2 ) - ( h / 2 ) - 1 );
     dc.DestroyClippingRegion();
 }
 
 void
-wxAuiDefaultDockArt::DrawIcon(wxDC& dc, const wxRect& rect, wxAuiPaneInfo& pane)
+wxAuiDefaultDockArt::DrawIcon ( wxDC & dc, const wxRect & rect, wxAuiPaneInfo & pane )
 {
-   // Draw the icon centered vertically
-   dc.DrawBitmap(pane.icon,
-                 rect.x+2, rect.y+(rect.height-pane.icon.GetHeight())/2,
-                 true);
+    // Draw the icon centered vertically
+    dc.DrawBitmap ( pane.icon,
+                    rect.x + 2, rect.y + ( rect.height - pane.icon.GetHeight() ) / 2,
+                    true );
 }
 
-void wxAuiDefaultDockArt::DrawGripper(wxDC& dc, wxWindow *WXUNUSED(window),
-                                   const wxRect& rect,
-                                   wxAuiPaneInfo& pane)
+void wxAuiDefaultDockArt::DrawGripper ( wxDC & dc, wxWindow * WXUNUSED ( window ),
+                                        const wxRect & rect,
+                                        wxAuiPaneInfo & pane )
 {
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.SetBrush(m_gripper_brush);
+    dc.SetPen ( *wxTRANSPARENT_PEN );
+    dc.SetBrush ( m_gripperBrush );
 
-    dc.DrawRectangle(rect.x, rect.y, rect.width,rect.height);
+    dc.DrawRectangle ( rect.x, rect.y, rect.width, rect.height );
 
-    if (!pane.HasGripperTop())
+    if ( !pane.HasGripperTop() )
     {
         int y = 5;
-        while (1)
+
+        while ( 1 )
         {
-            dc.SetPen(m_gripper_pen1);
-            dc.DrawPoint(rect.x+3, rect.y+y);
-            dc.SetPen(m_gripper_pen2);
-            dc.DrawPoint(rect.x+3, rect.y+y+1);
-            dc.DrawPoint(rect.x+4, rect.y+y);
-            dc.SetPen(m_gripper_pen3);
-            dc.DrawPoint(rect.x+5, rect.y+y+1);
-            dc.DrawPoint(rect.x+5, rect.y+y+2);
-            dc.DrawPoint(rect.x+4, rect.y+y+2);
+            dc.SetPen ( m_gripperPen1 );
+            dc.DrawPoint ( rect.x + 3, rect.y + y );
+            dc.SetPen ( m_gripperPen2 );
+            dc.DrawPoint ( rect.x + 3, rect.y + y + 1 );
+            dc.DrawPoint ( rect.x + 4, rect.y + y );
+            dc.SetPen ( m_gripperPen3 );
+            dc.DrawPoint ( rect.x + 5, rect.y + y + 1 );
+            dc.DrawPoint ( rect.x + 5, rect.y + y + 2 );
+            dc.DrawPoint ( rect.x + 4, rect.y + y + 2 );
 
             y += 4;
-            if (y > rect.GetHeight()-5)
+
+            if ( y > rect.GetHeight() - 5 )
+            {
                 break;
+            }
         }
     }
+
     else
     {
         int x = 5;
-        while (1)
+
+        while ( 1 )
         {
-            dc.SetPen(m_gripper_pen1);
-            dc.DrawPoint(rect.x+x, rect.y+3);
-            dc.SetPen(m_gripper_pen2);
-            dc.DrawPoint(rect.x+x+1, rect.y+3);
-            dc.DrawPoint(rect.x+x, rect.y+4);
-            dc.SetPen(m_gripper_pen3);
-            dc.DrawPoint(rect.x+x+1, rect.y+5);
-            dc.DrawPoint(rect.x+x+2, rect.y+5);
-            dc.DrawPoint(rect.x+x+2, rect.y+4);
+            dc.SetPen ( m_gripperPen1 );
+            dc.DrawPoint ( rect.x + x, rect.y + 3 );
+            dc.SetPen ( m_gripperPen2 );
+            dc.DrawPoint ( rect.x + x + 1, rect.y + 3 );
+            dc.DrawPoint ( rect.x + x, rect.y + 4 );
+            dc.SetPen ( m_gripperPen3 );
+            dc.DrawPoint ( rect.x + x + 1, rect.y + 5 );
+            dc.DrawPoint ( rect.x + x + 2, rect.y + 5 );
+            dc.DrawPoint ( rect.x + x + 2, rect.y + 4 );
 
             x += 4;
-            if (x > rect.GetWidth()-5)
+
+            if ( x > rect.GetWidth() - 5 )
+            {
                 break;
+            }
         }
     }
 }
 
-void wxAuiDefaultDockArt::DrawPaneButton(wxDC& dc, wxWindow *WXUNUSED(window),
-                                      int button,
-                                      int button_state,
-                                      const wxRect& _rect,
-                                      wxAuiPaneInfo& pane)
+void wxAuiDefaultDockArt::DrawPaneButton ( wxDC & dc, wxWindow * WXUNUSED ( window ),
+                                           int button,
+                                           int buttonState,
+                                           const wxRect & Rect,
+                                           wxAuiPaneInfo & pane )
 {
     wxBitmap bmp;
-    if (!(&pane))
+
+    if ( ! ( &pane ) )
+    {
         return;
-    switch (button)
+    }
+
+    switch ( button )
     {
         default:
         case wxAUI_BUTTON_CLOSE:
-            if (pane.state & wxAuiPaneInfo::optionActive)
-                bmp = m_active_close_bitmap;
+            if ( pane.state & wxAuiPaneInfo::optionActive )
+            {
+                bmp = m_activeCloseBitmap;
+            }
+
             else
-                bmp = m_inactive_close_bitmap;
+            {
+                bmp = m_inactiveCloseBitmap;
+            }
+
             break;
+
         case wxAUI_BUTTON_PIN:
-            if (pane.state & wxAuiPaneInfo::optionActive)
-                bmp = m_active_pin_bitmap;
+            if ( pane.state & wxAuiPaneInfo::optionActive )
+            {
+                bmp = m_activePinBitmap;
+            }
+
             else
-                bmp = m_inactive_pin_bitmap;
+            {
+                bmp = m_inactivePinBitmap;
+            }
+
             break;
+
         case wxAUI_BUTTON_MAXIMIZE_RESTORE:
-            if (pane.IsMaximized())
+            if ( pane.IsMaximized() )
             {
-                if (pane.state & wxAuiPaneInfo::optionActive)
-                    bmp = m_active_restore_bitmap;
+                if ( pane.state & wxAuiPaneInfo::optionActive )
+                {
+                    bmp = m_activeRestoreBitmap;
+                }
+
                 else
-                    bmp = m_inactive_restore_bitmap;
+                {
+                    bmp = m_inactiveRestoreBitmap;
+                }
             }
+
             else
             {
-                if (pane.state & wxAuiPaneInfo::optionActive)
-                    bmp = m_active_maximize_bitmap;
+                if ( pane.state & wxAuiPaneInfo::optionActive )
+                {
+                    bmp = m_activeMaximizeBitmap;
+                }
+
                 else
-                    bmp = m_inactive_maximize_bitmap;
+                {
+                    bmp = m_inactiveMaximizeBitmap;
+                }
             }
+
             break;
     }
 
 
-    wxRect rect = _rect;
+    wxRect rect = Rect;
 
-    int old_y = rect.y;
-    rect.y = rect.y + (rect.height/2) - (bmp.GetHeight()/2);
-    rect.height = old_y + rect.height - rect.y - 1;
+    int oldY = rect.y;
+    rect.y = rect.y + ( rect.height / 2 ) - ( bmp.GetHeight() / 2 );
+    rect.height = oldY + rect.height - rect.y - 1;
 
 
-    if (button_state == wxAUI_BUTTON_STATE_PRESSED)
+    if ( buttonState == wxAUI_BUTTON_STATE_PRESSED )
     {
         rect.x++;
         rect.y++;
     }
 
-    if (button_state == wxAUI_BUTTON_STATE_HOVER ||
-        button_state == wxAUI_BUTTON_STATE_PRESSED)
+    if ( buttonState == wxAUI_BUTTON_STATE_HOVER ||
+            buttonState == wxAUI_BUTTON_STATE_PRESSED )
     {
-        if (pane.state & wxAuiPaneInfo::optionActive)
+        if ( pane.state & wxAuiPaneInfo::optionActive )
         {
-            dc.SetBrush(wxBrush(m_active_caption_colour.ChangeLightness(120)));
-            dc.SetPen(wxPen(m_active_caption_colour.ChangeLightness(70)));
+            dc.SetBrush ( wxBrush ( m_activeCaptionColour.ChangeLightness ( 120 ) ) );
+            dc.SetPen ( wxPen ( m_activeCaptionColour.ChangeLightness ( 70 ) ) );
         }
+
         else
         {
-            dc.SetBrush(wxBrush(m_inactive_caption_colour.ChangeLightness(120)));
-            dc.SetPen(wxPen(m_inactive_caption_colour.ChangeLightness(70)));
+            dc.SetBrush ( wxBrush ( m_inactiveCaptionColour.ChangeLightness ( 120 ) ) );
+            dc.SetPen ( wxPen ( m_inactiveCaptionColour.ChangeLightness ( 70 ) ) );
         }
 
         // draw the background behind the button
-        dc.DrawRectangle(rect.x, rect.y, 15, 15);
+        dc.DrawRectangle ( rect.x, rect.y, 15, 15 );
     }
 
 
     // draw the button itself
-    dc.DrawBitmap(bmp, rect.x, rect.y, true);
+    dc.DrawBitmap ( bmp, rect.x, rect.y, true );
 }
 
 

Index: include/wx/aui/framemanager.h
===================================================================
--- include/wx/aui/framemanager.h	(revision 69060)
+++ include/wx/aui/framemanager.h	(working copy)
@@ -131,12 +131,12 @@
 class wxAuiManagerEvent;
 
 #ifndef SWIG
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiDockInfo, wxAuiDockInfoArray, WXDLLIMPEXP_AUI);
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiDockUIPart, wxAuiDockUIPartArray, WXDLLIMPEXP_AUI);
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiPaneButton, wxAuiPaneButtonArray, WXDLLIMPEXP_AUI);
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiPaneInfo, wxAuiPaneInfoArray, WXDLLIMPEXP_AUI);
-WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiPaneInfo*, wxAuiPaneInfoPtrArray, class WXDLLIMPEXP_AUI);
-WX_DEFINE_USER_EXPORTED_ARRAY_PTR(wxAuiDockInfo*, wxAuiDockInfoPtrArray, class WXDLLIMPEXP_AUI);
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiDockInfo, wxAuiDockInfoArray, WXDLLIMPEXP_AUI );
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiDockUIPart, wxAuiDockUIPartArray, WXDLLIMPEXP_AUI );
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiPaneButton, wxAuiPaneButtonArray, WXDLLIMPEXP_AUI );
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiPaneInfo, wxAuiPaneInfoArray, WXDLLIMPEXP_AUI );
+WX_DEFINE_USER_EXPORTED_ARRAY_PTR ( wxAuiPaneInfo *, wxAuiPaneInfoPtrArray, class WXDLLIMPEXP_AUI );
+WX_DEFINE_USER_EXPORTED_ARRAY_PTR ( wxAuiDockInfo *, wxAuiDockInfoPtrArray, class WXDLLIMPEXP_AUI );
 #endif // SWIG
 
 extern WXDLLIMPEXP_AUI wxAuiDockInfo wxAuiNullDockInfo;
@@ -153,16 +153,16 @@
         window = NULL;
         frame = NULL;
         state = 0;
-        dock_direction = wxAUI_DOCK_LEFT;
-        dock_layer = 0;
-        dock_row = 0;
-        dock_pos = 0;
-        floating_pos = wxDefaultPosition;
-        floating_size = wxDefaultSize;
-        best_size = wxDefaultSize;
-        min_size = wxDefaultSize;
-        max_size = wxDefaultSize;
-        dock_proportion = 0;
+        dockDirection = wxAUI_DOCK_LEFT;
+        dockLayer = 0;
+        dockRow = 0;
+        dockPos = 0;
+        floatingPos = wxDefaultPosition;
+        floatingSize = wxDefaultSize;
+        bestSize = wxDefaultSize;
+        minSize = wxDefaultSize;
+        maxSize = wxDefaultSize;
+        dockProportion = 0;
 
         DefaultPane();
     }
@@ -170,7 +170,7 @@
     ~wxAuiPaneInfo() {}
 
 #ifndef SWIG
-    wxAuiPaneInfo(const wxAuiPaneInfo& c)
+    wxAuiPaneInfo ( const wxAuiPaneInfo & c )
     {
         name = c.name;
         caption = c.caption;
@@ -178,37 +178,37 @@
         window = c.window;
         frame = c.frame;
         state = c.state;
-        dock_direction = c.dock_direction;
-        dock_layer = c.dock_layer;
-        dock_row = c.dock_row;
-        dock_pos = c.dock_pos;
-        best_size = c.best_size;
-        min_size = c.min_size;
-        max_size = c.max_size;
-        floating_pos = c.floating_pos;
-        floating_size = c.floating_size;
-        dock_proportion = c.dock_proportion;
+        dockDirection = c.dockDirection;
+        dockLayer = c.dockLayer;
+        dockRow = c.dockRow;
+        dockPos = c.dockPos;
+        bestSize = c.bestSize;
+        minSize = c.minSize;
+        maxSize = c.maxSize;
+        floatingPos = c.floatingPos;
+        floatingSize = c.floatingSize;
+        dockProportion = c.dockProportion;
         buttons = c.buttons;
         rect = c.rect;
     }
 
-    wxAuiPaneInfo& operator=(const wxAuiPaneInfo& c)
+    wxAuiPaneInfo & operator= ( const wxAuiPaneInfo & c )
     {
         name = c.name;
         caption = c.caption;
         window = c.window;
         frame = c.frame;
         state = c.state;
-        dock_direction = c.dock_direction;
-        dock_layer = c.dock_layer;
-        dock_row = c.dock_row;
-        dock_pos = c.dock_pos;
-        best_size = c.best_size;
-        min_size = c.min_size;
-        max_size = c.max_size;
-        floating_pos = c.floating_pos;
-        floating_size = c.floating_size;
-        dock_proportion = c.dock_proportion;
+        dockDirection = c.dockDirection;
+        dockLayer = c.dockLayer;
+        dockRow = c.dockRow;
+        dockPos = c.dockPos;
+        bestSize = c.bestSize;
+        minSize = c.minSize;
+        maxSize = c.maxSize;
+        floatingPos = c.floatingPos;
+        floatingSize = c.floatingSize;
+        dockProportion = c.dockProportion;
         buttons = c.buttons;
         rect = c.rect;
         return *this;
@@ -217,163 +217,174 @@
 
     // Write the safe parts of a newly loaded PaneInfo structure "source" into "this"
     // used on loading perspectives etc.
-    void SafeSet(wxAuiPaneInfo source)
+    void SafeSet ( wxAuiPaneInfo source )
     {
         // note source is not passed by reference so we can overwrite, to keep the
         // unsafe bits of "dest"
         source.window = window;
         source.frame = frame;
         source.buttons = buttons;
-        wxCHECK_RET(source.IsValid(),
-                    "window settings and pane settings are incompatible");
+        wxCHECK_RET ( source.IsValid(),
+                      "window settings and pane settings are incompatible" );
         // now assign
         *this = source;
     }
 
     bool IsOk() const { return window != NULL; }
-    bool IsFixed() const { return !HasFlag(optionResizable); }
-    bool IsResizable() const { return HasFlag(optionResizable); }
-    bool IsShown() const { return !HasFlag(optionHidden); }
-    bool IsFloating() const { return HasFlag(optionFloating); }
-    bool IsDocked() const { return !HasFlag(optionFloating); }
-    bool IsToolbar() const { return HasFlag(optionToolbar); }
-    bool IsTopDockable() const { return HasFlag(optionTopDockable); }
-    bool IsBottomDockable() const { return HasFlag(optionBottomDockable); }
-    bool IsLeftDockable() const { return HasFlag(optionLeftDockable); }
-    bool IsRightDockable() const { return HasFlag(optionRightDockable); }
+    bool IsFixed() const { return !HasFlag ( optionResizable ); }
+    bool IsResizable() const { return HasFlag ( optionResizable ); }
+    bool IsShown() const { return !HasFlag ( optionHidden ); }
+    bool IsFloating() const { return HasFlag ( optionFloating ); }
+    bool IsDocked() const { return !HasFlag ( optionFloating ); }
+    bool IsToolbar() const { return HasFlag ( optionToolbar ); }
+    bool IsTopDockable() const { return HasFlag ( optionTopDockable ); }
+    bool IsBottomDockable() const { return HasFlag ( optionBottomDockable ); }
+    bool IsLeftDockable() const { return HasFlag ( optionLeftDockable ); }
+    bool IsRightDockable() const { return HasFlag ( optionRightDockable ); }
     bool IsDockable() const
     {
-        return HasFlag(optionTopDockable | optionBottomDockable |
-                        optionLeftDockable | optionRightDockable);
+        return HasFlag ( optionTopDockable | optionBottomDockable |
+                         optionLeftDockable | optionRightDockable );
     }
-    bool IsFloatable() const { return HasFlag(optionFloatable); }
-    bool IsMovable() const { return HasFlag(optionMovable); }
-    bool IsDestroyOnClose() const { return HasFlag(optionDestroyOnClose); }
-    bool IsMaximized() const { return HasFlag(optionMaximized); }
-    bool HasCaption() const { return HasFlag(optionCaption); }
-    bool HasGripper() const { return HasFlag(optionGripper); }
-    bool HasBorder() const { return HasFlag(optionPaneBorder); }
-    bool HasCloseButton() const { return HasFlag(buttonClose); }
-    bool HasMaximizeButton() const { return HasFlag(buttonMaximize); }
-    bool HasMinimizeButton() const { return HasFlag(buttonMinimize); }
-    bool HasPinButton() const { return HasFlag(buttonPin); }
-    bool HasGripperTop() const { return HasFlag(optionGripperTop); }
+    bool IsFloatable() const { return HasFlag ( optionFloatable ); }
+    bool IsMovable() const { return HasFlag ( optionMovable ); }
+    bool IsDestroyOnClose() const { return HasFlag ( optionDestroyOnClose ); }
+    bool IsMaximized() const { return HasFlag ( optionMaximized ); }
+    bool HasCaption() const { return HasFlag ( optionCaption ); }
+    bool HasGripper() const { return HasFlag ( optionGripper ); }
+    bool HasBorder() const { return HasFlag ( optionPaneBorder ); }
+    bool HasCloseButton() const { return HasFlag ( buttonClose ); }
+    bool HasMaximizeButton() const { return HasFlag ( buttonMaximize ); }
+    bool HasMinimizeButton() const { return HasFlag ( buttonMinimize ); }
+    bool HasPinButton() const { return HasFlag ( buttonPin ); }
+    bool HasGripperTop() const { return HasFlag ( optionGripperTop ); }
 
 #ifdef SWIG
-    %typemap(out) wxAuiPaneInfo& { $result = $self; Py_INCREF($result); }
+    % typemap ( out ) wxAuiPaneInfo & { $result = $self; Py_INCREF ( $result ); }
 #endif
-    wxAuiPaneInfo& Window(wxWindow* w)
+    wxAuiPaneInfo & Window ( wxWindow * w )
     {
-        wxAuiPaneInfo test(*this);
+        wxAuiPaneInfo test ( *this );
         test.window = w;
-        wxCHECK_MSG(test.IsValid(), *this,
-                    "window settings and pane settings are incompatible");
+        wxCHECK_MSG ( test.IsValid(), *this,
+                      "window settings and pane settings are incompatible" );
         *this = test;
         return *this;
     }
-    wxAuiPaneInfo& Name(const wxString& n) { name = n; return *this; }
-    wxAuiPaneInfo& Caption(const wxString& c) { caption = c; return *this; }
-    wxAuiPaneInfo& Icon(const wxBitmap& b) { icon = b; return *this; }
-    wxAuiPaneInfo& Left() { dock_direction = wxAUI_DOCK_LEFT; return *this; }
-    wxAuiPaneInfo& Right() { dock_direction = wxAUI_DOCK_RIGHT; return *this; }
-    wxAuiPaneInfo& Top() { dock_direction = wxAUI_DOCK_TOP; return *this; }
-    wxAuiPaneInfo& Bottom() { dock_direction = wxAUI_DOCK_BOTTOM; return *this; }
-    wxAuiPaneInfo& Center() { dock_direction = wxAUI_DOCK_CENTER; return *this; }
-    wxAuiPaneInfo& Centre() { dock_direction = wxAUI_DOCK_CENTRE; return *this; }
-    wxAuiPaneInfo& Direction(int direction) { dock_direction = direction; return *this; }
-    wxAuiPaneInfo& Layer(int layer) { dock_layer = layer; return *this; }
-    wxAuiPaneInfo& Row(int row) { dock_row = row; return *this; }
-    wxAuiPaneInfo& Position(int pos) { dock_pos = pos; return *this; }
-    wxAuiPaneInfo& BestSize(const wxSize& size) { best_size = size; return *this; }
-    wxAuiPaneInfo& MinSize(const wxSize& size) { min_size = size; return *this; }
-    wxAuiPaneInfo& MaxSize(const wxSize& size) { max_size = size; return *this; }
-    wxAuiPaneInfo& BestSize(int x, int y) { best_size.Set(x,y); return *this; }
-    wxAuiPaneInfo& MinSize(int x, int y) { min_size.Set(x,y); return *this; }
-    wxAuiPaneInfo& MaxSize(int x, int y) { max_size.Set(x,y); return *this; }
-    wxAuiPaneInfo& FloatingPosition(const wxPoint& pos) { floating_pos = pos; return *this; }
-    wxAuiPaneInfo& FloatingPosition(int x, int y) { floating_pos.x = x; floating_pos.y = y; return *this; }
-    wxAuiPaneInfo& FloatingSize(const wxSize& size) { floating_size = size; return *this; }
-    wxAuiPaneInfo& FloatingSize(int x, int y) { floating_size.Set(x,y); return *this; }
-    wxAuiPaneInfo& Fixed() { return SetFlag(optionResizable, false); }
-    wxAuiPaneInfo& Resizable(bool resizable = true) { return SetFlag(optionResizable, resizable); }
-    wxAuiPaneInfo& Dock() { return SetFlag(optionFloating, false); }
-    wxAuiPaneInfo& Float() { return SetFlag(optionFloating, true); }
-    wxAuiPaneInfo& Hide() { return SetFlag(optionHidden, true); }
-    wxAuiPaneInfo& Show(bool show = true) { return SetFlag(optionHidden, !show); }
-    wxAuiPaneInfo& CaptionVisible(bool visible = true) { return SetFlag(optionCaption, visible); }
-    wxAuiPaneInfo& Maximize() { return SetFlag(optionMaximized, true); }
-    wxAuiPaneInfo& Restore() { return SetFlag(optionMaximized, false); }
-    wxAuiPaneInfo& PaneBorder(bool visible = true) { return SetFlag(optionPaneBorder, visible); }
-    wxAuiPaneInfo& Gripper(bool visible = true) { return SetFlag(optionGripper, visible); }
-    wxAuiPaneInfo& GripperTop(bool attop = true) { return SetFlag(optionGripperTop, attop); }
-    wxAuiPaneInfo& CloseButton(bool visible = true) { return SetFlag(buttonClose, visible); }
-    wxAuiPaneInfo& MaximizeButton(bool visible = true) { return SetFlag(buttonMaximize, visible); }
-    wxAuiPaneInfo& MinimizeButton(bool visible = true) { return SetFlag(buttonMinimize, visible); }
-    wxAuiPaneInfo& PinButton(bool visible = true) { return SetFlag(buttonPin, visible); }
-    wxAuiPaneInfo& DestroyOnClose(bool b = true) { return SetFlag(optionDestroyOnClose, b); }
-    wxAuiPaneInfo& TopDockable(bool b = true) { return SetFlag(optionTopDockable, b); }
-    wxAuiPaneInfo& BottomDockable(bool b = true) { return SetFlag(optionBottomDockable, b); }
-    wxAuiPaneInfo& LeftDockable(bool b = true) { return SetFlag(optionLeftDockable, b); }
-    wxAuiPaneInfo& RightDockable(bool b = true) { return SetFlag(optionRightDockable, b); }
-    wxAuiPaneInfo& Floatable(bool b = true) { return SetFlag(optionFloatable, b); }
-    wxAuiPaneInfo& Movable(bool b = true) { return SetFlag(optionMovable, b); }
-    wxAuiPaneInfo& DockFixed(bool b = true) { return SetFlag(optionDockFixed, b); }
+    wxAuiPaneInfo & Name ( const wxString & n ) { name = n; return *this; }
+    wxAuiPaneInfo & Caption ( const wxString & c ) { caption = c; return *this; }
+    wxAuiPaneInfo & Icon ( const wxBitmap & b ) { icon = b; return *this; }
+    wxAuiPaneInfo & Left() { dockDirection = wxAUI_DOCK_LEFT; return *this; }
+    wxAuiPaneInfo & Right() { dockDirection = wxAUI_DOCK_RIGHT; return *this; }
+    wxAuiPaneInfo & Top() { dockDirection = wxAUI_DOCK_TOP; return *this; }
+    wxAuiPaneInfo & Bottom() { dockDirection = wxAUI_DOCK_BOTTOM; return *this; }
+    wxAuiPaneInfo & Center() { dockDirection = wxAUI_DOCK_CENTER; return *this; }
+    wxAuiPaneInfo & Centre() { dockDirection = wxAUI_DOCK_CENTRE; return *this; }
+    wxAuiPaneInfo & Direction ( int direction ) { dockDirection = direction; return *this; }
+    wxAuiPaneInfo & Layer ( int layer ) { dockLayer = layer; return *this; }
+    wxAuiPaneInfo & Row ( int row ) { dockRow = row; return *this; }
+    wxAuiPaneInfo & Position ( int pos ) { dockPos = pos; return *this; }
+    wxAuiPaneInfo & BestSize ( const wxSize & size ) { bestSize = size; return *this; }
+    wxAuiPaneInfo & MinSize ( const wxSize & size ) { minSize = size; return *this; }
+    wxAuiPaneInfo & MaxSize ( const wxSize & size ) { maxSize = size; return *this; }
+    wxAuiPaneInfo & BestSize ( int x, int y ) { bestSize.Set ( x, y ); return *this; }
+    wxAuiPaneInfo & MinSize ( int x, int y ) { minSize.Set ( x, y ); return *this; }
+    wxAuiPaneInfo & MaxSize ( int x, int y ) { maxSize.Set ( x, y ); return *this; }
+    wxAuiPaneInfo & FloatingPosition ( const wxPoint & pos ) { floatingPos = pos; return *this; }
+    wxAuiPaneInfo & FloatingPosition ( int x, int y ) { floatingPos.x = x; floatingPos.y = y; return *this; }
+    wxAuiPaneInfo & FloatingSize ( const wxSize & size ) { floatingSize = size; return *this; }
+    wxAuiPaneInfo & FloatingSize ( int x, int y ) { floatingSize.Set ( x, y ); return *this; }
+    wxAuiPaneInfo & Fixed() { return SetFlag ( optionResizable, false ); }
+    wxAuiPaneInfo & Resizable ( bool resizable = true ) { return SetFlag ( optionResizable, resizable ); }
+    wxAuiPaneInfo & Dock() { return SetFlag ( optionFloating, false ); }
+    wxAuiPaneInfo & Float() { return SetFlag ( optionFloating, true ); }
+    wxAuiPaneInfo & Hide() { return SetFlag ( optionHidden, true ); }
+    wxAuiPaneInfo & Show ( bool show = true ) { return SetFlag ( optionHidden, !show ); }
+    wxAuiPaneInfo & CaptionVisible ( bool visible = true ) { return SetFlag ( optionCaption, visible ); }
+    wxAuiPaneInfo & Maximize() { return SetFlag ( optionMaximized, true ); }
+    wxAuiPaneInfo & Restore() { return SetFlag ( optionMaximized, false ); }
+    wxAuiPaneInfo & PaneBorder ( bool visible = true ) { return SetFlag ( optionPaneBorder, visible ); }
+    wxAuiPaneInfo & Gripper ( bool visible = true ) { return SetFlag ( optionGripper, visible ); }
+    wxAuiPaneInfo & GripperTop ( bool attop = true ) { return SetFlag ( optionGripperTop, attop ); }
+    wxAuiPaneInfo & CloseButton ( bool visible = true ) { return SetFlag ( buttonClose, visible ); }
+    wxAuiPaneInfo & MaximizeButton ( bool visible = true ) { return SetFlag ( buttonMaximize, visible ); }
+    wxAuiPaneInfo & MinimizeButton ( bool visible = true ) { return SetFlag ( buttonMinimize, visible ); }
+    wxAuiPaneInfo & PinButton ( bool visible = true ) { return SetFlag ( buttonPin, visible ); }
+    wxAuiPaneInfo & DestroyOnClose ( bool b = true ) { return SetFlag ( optionDestroyOnClose, b ); }
+    wxAuiPaneInfo & TopDockable ( bool b = true ) { return SetFlag ( optionTopDockable, b ); }
+    wxAuiPaneInfo & BottomDockable ( bool b = true ) { return SetFlag ( optionBottomDockable, b ); }
+    wxAuiPaneInfo & LeftDockable ( bool b = true ) { return SetFlag ( optionLeftDockable, b ); }
+    wxAuiPaneInfo & RightDockable ( bool b = true ) { return SetFlag ( optionRightDockable, b ); }
+    wxAuiPaneInfo & Floatable ( bool b = true ) { return SetFlag ( optionFloatable, b ); }
+    wxAuiPaneInfo & Movable ( bool b = true ) { return SetFlag ( optionMovable, b ); }
+    wxAuiPaneInfo & DockFixed ( bool b = true ) { return SetFlag ( optionDockFixed, b ); }
 
-    wxAuiPaneInfo& Dockable(bool b = true)
+    wxAuiPaneInfo & Dockable ( bool b = true )
     {
-        return TopDockable(b).BottomDockable(b).LeftDockable(b).RightDockable(b);
+        return TopDockable ( b ).BottomDockable ( b ).LeftDockable ( b ).RightDockable ( b );
     }
 
-    wxAuiPaneInfo& DefaultPane()
+    wxAuiPaneInfo & DefaultPane()
     {
-        wxAuiPaneInfo test(*this);
+        wxAuiPaneInfo test ( *this );
         test.state |= optionTopDockable | optionBottomDockable |
-                 optionLeftDockable | optionRightDockable |
-                 optionFloatable | optionMovable | optionResizable |
-                 optionCaption | optionPaneBorder | buttonClose;
-        wxCHECK_MSG(test.IsValid(), *this,
-                    "window settings and pane settings are incompatible");
+                      optionLeftDockable | optionRightDockable |
+                      optionFloatable | optionMovable | optionResizable |
+                      optionCaption | optionPaneBorder | buttonClose;
+        wxCHECK_MSG ( test.IsValid(), *this,
+                      "window settings and pane settings are incompatible" );
         *this = test;
         return *this;
     }
 
-    wxAuiPaneInfo& CentrePane() { return CenterPane(); }
-    wxAuiPaneInfo& CenterPane()
+    wxAuiPaneInfo & CentrePane() { return CenterPane(); }
+    wxAuiPaneInfo & CenterPane()
     {
         state = 0;
         return Center().PaneBorder().Resizable();
     }
 
-    wxAuiPaneInfo& ToolbarPane()
+    wxAuiPaneInfo & ToolbarPane()
     {
         DefaultPane();
-        state |= (optionToolbar | optionGripper);
-        state &= ~(optionResizable | optionCaption);
-        if (dock_layer == 0)
-            dock_layer = 10;
+        state |= ( optionToolbar | optionGripper );
+        state &= ~ ( optionResizable | optionCaption );
+
+        if ( dockLayer == 0 )
+        {
+            dockLayer = 10;
+        }
+
         return *this;
     }
 
-    wxAuiPaneInfo& SetFlag(int flag, bool option_state)
+    wxAuiPaneInfo & SetFlag ( int flag, bool optionState )
     {
-        wxAuiPaneInfo test(*this);
-        if (option_state)
+        wxAuiPaneInfo test ( *this );
+
+        if ( optionState )
+        {
             test.state |= flag;
+        }
+
         else
+        {
             test.state &= ~flag;
-        wxCHECK_MSG(test.IsValid(), *this,
-                    "window settings and pane settings are incompatible");
+        }
+
+        wxCHECK_MSG ( test.IsValid(), *this,
+                      "window settings and pane settings are incompatible" );
         *this = test;
         return *this;
     }
 
-    bool HasFlag(int flag) const
+    bool HasFlag ( int flag ) const
     {
-        return (state & flag) != 0;
+        return ( state & flag ) != 0;
     }
 
 #ifdef SWIG
-    %typemap(out) wxAuiPaneInfo& ;
+    % typemap ( out ) wxAuiPaneInfo & ;
 #endif
 
 public:
@@ -423,22 +434,22 @@
     wxString caption;     // caption displayed on the window
     wxBitmap icon;        // icon of the pane, may be invalid
 
-    wxWindow* window;     // window that is in this pane
-    wxFrame* frame;       // floating frame window that holds the pane
+    wxWindow * window;    // window that is in this pane
+    wxFrame * frame;      // floating frame window that holds the pane
     unsigned int state;   // a combination of wxPaneState values
 
-    int dock_direction;   // dock direction (top, bottom, left, right, center)
-    int dock_layer;       // layer number (0 = innermost layer)
-    int dock_row;         // row number on the docking bar (0 = first row)
-    int dock_pos;         // position inside the row (0 = first position)
+    int dockDirection;   // dock direction (top, bottom, left, right, center)
+    int dockLayer;       // layer number (0 = innermost layer)
+    int dockRow;         // row number on the docking bar (0 = first row)
+    int dockPos;         // position inside the row (0 = first position)
 
-    wxSize best_size;     // size that the layout engine will prefer
-    wxSize min_size;      // minimum size the pane window can tolerate
-    wxSize max_size;      // maximum size the pane window can tolerate
+    wxSize bestSize;     // size that the layout engine will prefer
+    wxSize minSize;      // minimum size the pane window can tolerate
+    wxSize maxSize;      // maximum size the pane window can tolerate
 
-    wxPoint floating_pos; // position while floating
-    wxSize floating_size; // size while floating
-    int dock_proportion;  // proportion while docked
+    wxPoint floatingPos; // position while floating
+    wxSize floatingSize; // size while floating
+    int dockProportion;  // proportion while docked
 
     wxAuiPaneButtonArray buttons; // buttons on the pane
 
@@ -458,89 +469,89 @@
 
 public:
 
-    wxAuiManager(wxWindow* managed_wnd = NULL,
-                   unsigned int flags = wxAUI_MGR_DEFAULT);
+    wxAuiManager ( wxWindow * managedWnd = NULL,
+                   unsigned int flags = wxAUI_MGR_DEFAULT );
     virtual ~wxAuiManager();
     void UnInit();
 
-    void SetFlags(unsigned int flags);
+    void SetFlags ( unsigned int flags );
     unsigned int GetFlags() const;
 
-    void SetManagedWindow(wxWindow* managed_wnd);
-    wxWindow* GetManagedWindow() const;
+    void SetManagedWindow ( wxWindow * managedWnd );
+    wxWindow * GetManagedWindow() const;
 
-    static wxAuiManager* GetManager(wxWindow* window);
+    static wxAuiManager * GetManager ( wxWindow * window );
 
-    void SetArtProvider(wxAuiDockArt* art_provider);
-    wxAuiDockArt* GetArtProvider() const;
+    void SetArtProvider ( wxAuiDockArt * artProvider );
+    wxAuiDockArt * GetArtProvider() const;
 
-    wxAuiPaneInfo& GetPane(wxWindow* window);
-    wxAuiPaneInfo& GetPane(const wxString& name);
-    wxAuiPaneInfoArray& GetAllPanes();
+    wxAuiPaneInfo & GetPane ( wxWindow * window );
+    wxAuiPaneInfo & GetPane ( const wxString & name );
+    wxAuiPaneInfoArray & GetAllPanes();
 
-    bool AddPane(wxWindow* window,
-                 const wxAuiPaneInfo& pane_info);
+    bool AddPane ( wxWindow * window,
+                   const wxAuiPaneInfo & paneInfo );
 
-    bool AddPane(wxWindow* window,
-                 const wxAuiPaneInfo& pane_info,
-                 const wxPoint& drop_pos);
+    bool AddPane ( wxWindow * window,
+                   const wxAuiPaneInfo & paneInfo,
+                   const wxPoint & dropPos );
 
-    bool AddPane(wxWindow* window,
-                 int direction = wxLEFT,
-                 const wxString& caption = wxEmptyString);
+    bool AddPane ( wxWindow * window,
+                   int direction = wxLEFT,
+                   const wxString & caption = wxEmptyString );
 
-    bool InsertPane(wxWindow* window,
-                 const wxAuiPaneInfo& insert_location,
-                 int insert_level = wxAUI_INSERT_PANE);
+    bool InsertPane ( wxWindow * window,
+                      const wxAuiPaneInfo & insertLocation,
+                      int insertLevel = wxAUI_INSERT_PANE );
 
-    bool DetachPane(wxWindow* window);
+    bool DetachPane ( wxWindow * window );
 
     void Update();
 
-    wxString SavePaneInfo(wxAuiPaneInfo& pane);
-    void LoadPaneInfo(wxString pane_part, wxAuiPaneInfo &pane);
+    wxString SavePaneInfo ( wxAuiPaneInfo & pane );
+    void LoadPaneInfo ( wxString panePart, wxAuiPaneInfo & pane );
     wxString SavePerspective();
-    bool LoadPerspective(const wxString& perspective, bool update = true);
+    bool LoadPerspective ( const wxString & perspective, bool update = true );
 
-    void SetDockSizeConstraint(double width_pct, double height_pct);
-    void GetDockSizeConstraint(double* width_pct, double* height_pct) const;
+    void SetDockSizeConstraint ( double widthPct, double heightPct );
+    void GetDockSizeConstraint ( double * widthPct, double * heightPct ) const;
 
-    void ClosePane(wxAuiPaneInfo& pane_info);
-    void MaximizePane(wxAuiPaneInfo& pane_info);
-    void RestorePane(wxAuiPaneInfo& pane_info);
+    void ClosePane ( wxAuiPaneInfo & paneInfo );
+    void MaximizePane ( wxAuiPaneInfo & paneInfo );
+    void RestorePane ( wxAuiPaneInfo & paneInfo );
     void RestoreMaximizedPane();
 
 public:
 
-    virtual wxAuiFloatingFrame* CreateFloatingFrame(wxWindow* parent, const wxAuiPaneInfo& p);
-    virtual bool CanDockPanel(const wxAuiPaneInfo & p);
+    virtual wxAuiFloatingFrame * CreateFloatingFrame ( wxWindow * parent, const wxAuiPaneInfo & p );
+    virtual bool CanDockPanel ( const wxAuiPaneInfo & p );
 
-    void StartPaneDrag(
-                 wxWindow* pane_window,
-                 const wxPoint& offset);
+    void StartPaneDrag (
+        wxWindow * paneWindow,
+        const wxPoint & offset );
 
-    wxRect CalculateHintRect(
-                 wxWindow* pane_window,
-                 const wxPoint& pt,
-                 const wxPoint& offset);
+    wxRect CalculateHintRect (
+        wxWindow * paneWindow,
+        const wxPoint & pt,
+        const wxPoint & offset );
 
-    void DrawHintRect(
-                 wxWindow* pane_window,
-                 const wxPoint& pt,
-                 const wxPoint& offset);
+    void DrawHintRect (
+        wxWindow * paneWindow,
+        const wxPoint & pt,
+        const wxPoint & offset );
 
-    virtual void ShowHint(const wxRect& rect);
+    virtual void ShowHint ( const wxRect & rect );
     virtual void HideHint();
 
-    void OnHintActivate(wxActivateEvent& event);
+    void OnHintActivate ( wxActivateEvent & event );
 
 public:
 
     // deprecated -- please use SetManagedWindow() and
     // and GetManagedWindow() instead
 
-    wxDEPRECATED( void SetFrame(wxFrame* frame) );
-    wxDEPRECATED( wxFrame* GetFrame() const );
+    wxDEPRECATED ( void SetFrame ( wxFrame * frame ) );
+    wxDEPRECATED ( wxFrame * GetFrame() const );
 
 protected:
 
@@ -548,73 +559,73 @@
 
     void DoFrameLayout();
 
-    void LayoutAddPane(wxSizer* container,
-                       wxAuiDockInfo& dock,
-                       wxAuiPaneInfo& pane,
-                       wxAuiDockUIPartArray& uiparts,
-                       bool spacer_only);
+    void LayoutAddPane ( wxSizer * container,
+                         wxAuiDockInfo & dock,
+                         wxAuiPaneInfo & pane,
+                         wxAuiDockUIPartArray & uiParts,
+                         bool spacerOnly );
 
-    void LayoutAddDock(wxSizer* container,
-                       wxAuiDockInfo& dock,
-                       wxAuiDockUIPartArray& uiparts,
-                       bool spacer_only);
+    void LayoutAddDock ( wxSizer * container,
+                         wxAuiDockInfo & dock,
+                         wxAuiDockUIPartArray & uiParts,
+                         bool spacerOnly );
 
-    wxSizer* LayoutAll(wxAuiPaneInfoArray& panes,
-                       wxAuiDockInfoArray& docks,
-                       wxAuiDockUIPartArray& uiparts,
-                       bool spacer_only = false);
+    wxSizer * LayoutAll ( wxAuiPaneInfoArray & panes,
+                          wxAuiDockInfoArray & docks,
+                          wxAuiDockUIPartArray & uiParts,
+                          bool spacerOnly = false );
 
-    virtual bool ProcessDockResult(wxAuiPaneInfo& target,
-                                   const wxAuiPaneInfo& new_pos);
+    virtual bool ProcessDockResult ( wxAuiPaneInfo & target,
+                                     const wxAuiPaneInfo & newPos );
 
-    bool DoDrop(wxAuiDockInfoArray& docks,
-                wxAuiPaneInfoArray& panes,
-                wxAuiPaneInfo& drop,
-                const wxPoint& pt,
-                const wxPoint& action_offset = wxPoint(0,0));
+    bool DoDrop ( wxAuiDockInfoArray & docks,
+                  wxAuiPaneInfoArray & panes,
+                  wxAuiPaneInfo & drop,
+                  const wxPoint & pt,
+                  const wxPoint & actionOffset = wxPoint ( 0, 0 ) );
 
-    wxAuiDockUIPart* HitTest(int x, int y);
-    wxAuiDockUIPart* GetPanePart(wxWindow* pane);
-    int GetDockPixelOffset(wxAuiPaneInfo& test);
-    void OnFloatingPaneMoveStart(wxWindow* window);
-    void OnFloatingPaneMoving(wxWindow* window, wxDirection dir );
-    void OnFloatingPaneMoved(wxWindow* window, wxDirection dir);
-    void OnFloatingPaneActivated(wxWindow* window);
-    void OnFloatingPaneClosed(wxWindow* window, wxCloseEvent& evt);
-    void OnFloatingPaneResized(wxWindow* window, const wxRect& rect);
-    void Render(wxDC* dc);
-    void Repaint(wxDC* dc = NULL);
-    void ProcessMgrEvent(wxAuiManagerEvent& event);
-    void UpdateButtonOnScreen(wxAuiDockUIPart* button_ui_part,
-                              const wxMouseEvent& event);
-    void GetPanePositionsAndSizes(wxAuiDockInfo& dock,
-                              wxArrayInt& positions,
-                              wxArrayInt& sizes);
+    wxAuiDockUIPart * HitTest ( int x, int y );
+    wxAuiDockUIPart * GetPanePart ( wxWindow * pane );
+    int GetDockPixelOffset ( wxAuiPaneInfo & test );
+    void OnFloatingPaneMoveStart ( wxWindow * window );
+    void OnFloatingPaneMoving ( wxWindow * window, wxDirection dir );
+    void OnFloatingPaneMoved ( wxWindow * window, wxDirection dir );
+    void OnFloatingPaneActivated ( wxWindow * window );
+    void OnFloatingPaneClosed ( wxWindow * window, wxCloseEvent & evt );
+    void OnFloatingPaneResized ( wxWindow * window, const wxRect & rect );
+    void Render ( wxDC * dc );
+    void Repaint ( wxDC * dc = NULL );
+    void ProcessMgrEvent ( wxAuiManagerEvent & event );
+    void UpdateButtonOnScreen ( wxAuiDockUIPart * buttonUiPart,
+                                const wxMouseEvent & event );
+    void GetPanePositionsAndSizes ( wxAuiDockInfo & dock,
+                                    wxArrayInt & positions,
+                                    wxArrayInt & sizes );
 
     /// Ends a resize action, or for live update, resizes the sash
-    bool DoEndResizeAction(wxMouseEvent& event);
+    bool DoEndResizeAction ( wxMouseEvent & event );
 
 public:
 
     // public events (which can be invoked externally)
-    void OnRender(wxAuiManagerEvent& evt);
-    void OnPaneButton(wxAuiManagerEvent& evt);
+    void OnRender ( wxAuiManagerEvent & evt );
+    void OnPaneButton ( wxAuiManagerEvent & evt );
 
 protected:
 
     // protected events
-    void OnPaint(wxPaintEvent& evt);
-    void OnEraseBackground(wxEraseEvent& evt);
-    void OnSize(wxSizeEvent& evt);
-    void OnSetCursor(wxSetCursorEvent& evt);
-    void OnLeftDown(wxMouseEvent& evt);
-    void OnLeftUp(wxMouseEvent& evt);
-    void OnMotion(wxMouseEvent& evt);
-    void OnCaptureLost(wxMouseCaptureLostEvent& evt);
-    void OnLeaveWindow(wxMouseEvent& evt);
-    void OnChildFocus(wxChildFocusEvent& evt);
-    void OnHintFadeTimer(wxTimerEvent& evt);
-    void OnFindManager(wxAuiManagerEvent& evt);
+    void OnPaint ( wxPaintEvent & evt );
+    void OnEraseBackground ( wxEraseEvent & evt );
+    void OnSize ( wxSizeEvent & evt );
+    void OnSetCursor ( wxSetCursorEvent & evt );
+    void OnLeftDown ( wxMouseEvent & evt );
+    void OnLeftUp ( wxMouseEvent & evt );
+    void OnMotion ( wxMouseEvent & evt );
+    void OnCaptureLost ( wxMouseCaptureLostEvent & evt );
+    void OnLeaveWindow ( wxMouseEvent & evt );
+    void OnChildFocus ( wxChildFocusEvent & evt );
+    void OnHintFadeTimer ( wxTimerEvent & evt );
+    void OnFindManager ( wxAuiManagerEvent & evt );
 
 protected:
 
@@ -630,41 +641,41 @@
 
 protected:
 
-    wxWindow* m_frame;           // the window being managed
-    wxAuiDockArt* m_art;            // dock art object which does all drawing
+    wxWindow * m_frame;          // the window being managed
+    wxAuiDockArt * m_art;           // dock art object which does all drawing
     unsigned int m_flags;        // manager flags wxAUI_MGR_*
 
     wxAuiPaneInfoArray m_panes;     // array of panes structures
     wxAuiDockInfoArray m_docks;     // array of docks structures
-    wxAuiDockUIPartArray m_uiparts; // array of UI parts (captions, buttons, etc)
+    wxAuiDockUIPartArray m_uiParts; // array of UI parts (captions, buttons, etc)
 
     int m_action;                // current mouse action
-    wxPoint m_action_start;      // position where the action click started
-    wxPoint m_action_offset;     // offset from upper left of the item clicked
-    wxAuiDockUIPart* m_action_part; // ptr to the part the action happened to
-    wxWindow* m_action_window;   // action frame or window (NULL if none)
-    wxRect m_action_hintrect;    // hint rectangle for the action
-    wxRect m_last_rect;
-    wxAuiDockUIPart* m_hover_button;// button uipart being hovered over
-    wxRect m_last_hint;          // last hint rectangle
-    wxPoint m_last_mouse_move;   // last mouse move position (see OnMotion)
+    wxPoint m_actionStart;      // position where the action click started
+    wxPoint m_actionOffset;     // offset from upper left of the item clicked
+    wxAuiDockUIPart * m_actionPart; // ptr to the part the action happened to
+    wxWindow * m_actionWindow;  // action frame or window (NULL if none)
+    wxRect m_actionHintRect;    // hint rectangle for the action
+    wxRect m_lastRect;
+    wxAuiDockUIPart * m_hoverButton; // button uipart being hovered over
+    wxRect m_lastHint;          // last hint rectangle
+    wxPoint m_lastMouseMove;   // last mouse move position (see OnMotion)
     int  m_currentDragItem;
     bool m_skipping;
-    bool m_has_maximized;
+    bool m_hasMaximized;
 
-    double m_dock_constraint_x;  // 0.0 .. 1.0; max pct of window width a dock can consume
-    double m_dock_constraint_y;  // 0.0 .. 1.0; max pct of window height a dock can consume
+    double m_dockConstraintX;  // 0.0 .. 1.0; max pct of window width a dock can consume
+    double m_dockConstraintY;  // 0.0 .. 1.0; max pct of window height a dock can consume
 
-    wxFrame* m_hint_wnd;         // transparent hint window, if supported by platform
-    wxTimer m_hint_fadetimer;    // transparent fade timer
-    wxByte m_hint_fadeamt;       // transparent fade amount
-    wxByte m_hint_fademax;       // maximum value of hint fade
+    wxFrame * m_hintWnd;        // transparent hint window, if supported by platform
+    wxTimer m_hintFadeTimer;    // transparent fade timer
+    wxByte m_hintFadeAmt;       // transparent fade amount
+    wxByte m_hintFadeMax;       // maximum value of hint fade
 
-    void* m_reserved;
+    void * m_reserved;
 
 #ifndef SWIG
     DECLARE_EVENT_TABLE()
-    DECLARE_CLASS(wxAuiManager)
+    DECLARE_CLASS ( wxAuiManager )
 #endif // SWIG
 };
 
@@ -675,54 +686,54 @@
 class WXDLLIMPEXP_AUI wxAuiManagerEvent : public wxEvent
 {
 public:
-    wxAuiManagerEvent(wxEventType type=wxEVT_NULL) : wxEvent(0, type)
+    wxAuiManagerEvent ( wxEventType type = wxEVT_NULL ) : wxEvent ( 0, type )
     {
         manager = NULL;
         pane = NULL;
         button = 0;
-        veto_flag = false;
-        canveto_flag = true;
+        vetoFlag = false;
+        canvetoFlag = true;
         dc = NULL;
     }
 #ifndef SWIG
-    wxAuiManagerEvent(const wxAuiManagerEvent& c) : wxEvent(c)
+    wxAuiManagerEvent ( const wxAuiManagerEvent & c ) : wxEvent ( c )
     {
         manager = c.manager;
         pane = c.pane;
         button = c.button;
-        veto_flag = c.veto_flag;
-        canveto_flag = c.canveto_flag;
+        vetoFlag = c.vetoFlag;
+        canvetoFlag = c.canvetoFlag;
         dc = c.dc;
     }
 #endif
-    wxEvent *Clone() const { return new wxAuiManagerEvent(*this); }
+    wxEvent * Clone() const { return new wxAuiManagerEvent ( *this ); }
 
-    void SetManager(wxAuiManager* mgr) { manager = mgr; }
-    void SetPane(wxAuiPaneInfo* p) { pane = p; }
-    void SetButton(int b) { button = b; }
-    void SetDC(wxDC* pdc) { dc = pdc; }
+    void SetManager ( wxAuiManager * mgr ) { manager = mgr; }
+    void SetPane ( wxAuiPaneInfo * p ) { pane = p; }
+    void SetButton ( int b ) { button = b; }
+    void SetDC ( wxDC * pdc ) { dc = pdc; }
 
-    wxAuiManager* GetManager() const { return manager; }
-    wxAuiPaneInfo* GetPane() const { return pane; }
+    wxAuiManager * GetManager() const { return manager; }
+    wxAuiPaneInfo * GetPane() const { return pane; }
     int GetButton() const { return button; }
-    wxDC* GetDC() const { return dc; }
+    wxDC * GetDC() const { return dc; }
 
-    void Veto(bool veto = true) { veto_flag = veto; }
-    bool GetVeto() const { return veto_flag; }
-    void SetCanVeto(bool can_veto) { canveto_flag = can_veto; }
-    bool CanVeto() const { return  canveto_flag && veto_flag; }
+    void Veto ( bool veto = true ) { vetoFlag = veto; }
+    bool GetVeto() const { return vetoFlag; }
+    void SetCanVeto ( bool canVeto ) { canvetoFlag = canVeto; }
+    bool CanVeto() const { return  canvetoFlag && vetoFlag; }
 
 public:
-    wxAuiManager* manager;
-    wxAuiPaneInfo* pane;
+    wxAuiManager * manager;
+    wxAuiPaneInfo * pane;
     int button;
-    bool veto_flag;
-    bool canveto_flag;
-    wxDC* dc;
+    bool vetoFlag;
+    bool canvetoFlag;
+    wxDC * dc;
 
 #ifndef SWIG
 private:
-    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxAuiManagerEvent)
+    DECLARE_DYNAMIC_CLASS_NO_ASSIGN ( wxAuiManagerEvent )
 #endif
 };
 
@@ -732,11 +743,11 @@
 public:
     wxAuiDockInfo()
     {
-        dock_direction = 0;
-        dock_layer = 0;
-        dock_row = 0;
+        dockDirection = 0;
+        dockLayer = 0;
+        dockRow = 0;
         size = 0;
-        min_size = 0;
+        minSize = 0;
         resizable = true;
         fixed = false;
         toolbar = false;
@@ -744,13 +755,13 @@
     }
 
 #ifndef SWIG
-    wxAuiDockInfo(const wxAuiDockInfo& c)
+    wxAuiDockInfo ( const wxAuiDockInfo & c )
     {
-        dock_direction = c.dock_direction;
-        dock_layer = c.dock_layer;
-        dock_row = c.dock_row;
+        dockDirection = c.dockDirection;
+        dockLayer = c.dockLayer;
+        dockRow = c.dockRow;
         size = c.size;
-        min_size = c.min_size;
+        minSize = c.minSize;
         resizable = c.resizable;
         fixed = c.fixed;
         toolbar = c.toolbar;
@@ -759,13 +770,13 @@
         reserved1 = c.reserved1;
     }
 
-    wxAuiDockInfo& operator=(const wxAuiDockInfo& c)
+    wxAuiDockInfo & operator= ( const wxAuiDockInfo & c )
     {
-        dock_direction = c.dock_direction;
-        dock_layer = c.dock_layer;
-        dock_row = c.dock_row;
+        dockDirection = c.dockDirection;
+        dockLayer = c.dockLayer;
+        dockRow = c.dockRow;
         size = c.size;
-        min_size = c.min_size;
+        minSize = c.minSize;
         resizable = c.resizable;
         fixed = c.fixed;
         toolbar = c.toolbar;
@@ -776,24 +787,30 @@
     }
 #endif // SWIG
 
-    bool IsOk() const { return dock_direction != 0; }
-    bool IsHorizontal() const { return dock_direction == wxAUI_DOCK_TOP ||
-                             dock_direction == wxAUI_DOCK_BOTTOM; }
-    bool IsVertical() const { return dock_direction == wxAUI_DOCK_LEFT ||
-                             dock_direction == wxAUI_DOCK_RIGHT ||
-                             dock_direction == wxAUI_DOCK_CENTER; }
+    bool IsOk() const { return dockDirection != 0; }
+    bool IsHorizontal() const
+    {
+        return dockDirection == wxAUI_DOCK_TOP ||
+               dockDirection == wxAUI_DOCK_BOTTOM;
+    }
+    bool IsVertical() const
+    {
+        return dockDirection == wxAUI_DOCK_LEFT ||
+               dockDirection == wxAUI_DOCK_RIGHT ||
+               dockDirection == wxAUI_DOCK_CENTER;
+    }
 public:
     wxAuiPaneInfoPtrArray panes; // array of panes
     wxRect rect;              // current rectangle
-    int dock_direction;       // dock direction (top, bottom, left, right, center)
-    int dock_layer;           // layer number (0 = innermost layer)
-    int dock_row;             // row number on the docking bar (0 = first row)
+    int dockDirection;       // dock direction (top, bottom, left, right, center)
+    int dockLayer;           // layer number (0 = innermost layer)
+    int dockRow;             // row number on the docking bar (0 = first row)
     int size;                 // size of the dock
-    int min_size;             // minimum size of a dock (0 if there is no min)
+    int minSize;             // minimum size of a dock (0 if there is no min)
     bool resizable;           // flag indicating whether the dock is resizable
     bool toolbar;             // flag indicating dock contains only toolbars
     bool fixed;               // flag indicating that the dock operates on
-                              // absolute coordinates as opposed to proportional
+    // absolute coordinates as opposed to proportional
     bool reserved1;
 };
 
@@ -816,11 +833,11 @@
 
     int type;                // ui part type (see enum above)
     int orientation;         // orientation (either wxHORIZONTAL or wxVERTICAL)
-    wxAuiDockInfo* dock;        // which dock the item is associated with
-    wxAuiPaneInfo* pane;        // which pane the item is associated with
-    wxAuiPaneButton* button;    // which pane button the item is associated with
-    wxSizer* cont_sizer;     // the part's containing sizer
-    wxSizerItem* sizer_item; // the sizer item of the part
+    wxAuiDockInfo * dock;       // which dock the item is associated with
+    wxAuiPaneInfo * pane;       // which pane the item is associated with
+    wxAuiPaneButton * button;   // which pane button the item is associated with
+    wxSizer * contSizer;    // the part's containing sizer
+    wxSizerItem * sizerItem; // the sizer item of the part
     wxRect rect;             // client coord rectangle of the part itself
 };
 
@@ -828,54 +845,55 @@
 class WXDLLIMPEXP_AUI wxAuiPaneButton
 {
 public:
-    int button_id;        // id of the button (e.g. buttonClose)
+    int buttonId;        // id of the button (e.g. buttonClose)
 };
 
 
 
 #ifndef SWIG
 
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_BUTTON, wxAuiManagerEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_CLOSE, wxAuiManagerEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_RESTORE, wxAuiManagerEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_RENDER, wxAuiManagerEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_AUI_FIND_MANAGER, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_BUTTON, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_CLOSE, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_PANE_RESTORE, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_RENDER, wxAuiManagerEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_AUI_FIND_MANAGER, wxAuiManagerEvent );
 
-typedef void (wxEvtHandler::*wxAuiManagerEventFunction)(wxAuiManagerEvent&);
+typedef void ( wxEvtHandler::*wxAuiManagerEventFunction ) ( wxAuiManagerEvent & );
 
 #define wxAuiManagerEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxAuiManagerEventFunction, func)
 
 #define EVT_AUI_PANE_BUTTON(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(func))
 #define EVT_AUI_PANE_CLOSE(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(func))
 #define EVT_AUI_PANE_MAXIMIZE(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(func))
 #define EVT_AUI_PANE_RESTORE(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(func))
 #define EVT_AUI_RENDER(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(func))
 #define EVT_AUI_FIND_MANAGER(func) \
-   wx__DECLARE_EVT0(wxEVT_AUI_FIND_MANAGER, wxAuiManagerEventHandler(func))
+    wx__DECLARE_EVT0(wxEVT_AUI_FIND_MANAGER, wxAuiManagerEventHandler(func))
 
 #else
 
-%constant wxEventType wxEVT_AUI_PANE_BUTTON;
-%constant wxEventType wxEVT_AUI_PANE_CLOSE;
-%constant wxEventType wxEVT_AUI_PANE_MAXIMIZE;
-%constant wxEventType wxEVT_AUI_PANE_RESTORE;
-%constant wxEventType wxEVT_AUI_RENDER;
-%constant wxEventType wxEVT_AUI_FIND_MANAGER;
+% constant wxEventType wxEVT_AUI_PANE_BUTTON;
+% constant wxEventType wxEVT_AUI_PANE_CLOSE;
+% constant wxEventType wxEVT_AUI_PANE_MAXIMIZE;
+% constant wxEventType wxEVT_AUI_PANE_RESTORE;
+% constant wxEventType wxEVT_AUI_RENDER;
+% constant wxEventType wxEVT_AUI_FIND_MANAGER;
 
-%pythoncode {
-    EVT_AUI_PANE_BUTTON = wx.PyEventBinder( wxEVT_AUI_PANE_BUTTON )
-    EVT_AUI_PANE_CLOSE = wx.PyEventBinder( wxEVT_AUI_PANE_CLOSE )
-    EVT_AUI_PANE_MAXIMIZE = wx.PyEventBinder( wxEVT_AUI_PANE_MAXIMIZE )
-    EVT_AUI_PANE_RESTORE = wx.PyEventBinder( wxEVT_AUI_PANE_RESTORE )
-    EVT_AUI_RENDER = wx.PyEventBinder( wxEVT_AUI_RENDER )
-    EVT_AUI_FIND_MANAGER = wx.PyEventBinder( wxEVT_AUI_FIND_MANAGER )
+% pythoncode
+{
+    EVT_AUI_PANE_BUTTON = wx.PyEventBinder ( wxEVT_AUI_PANE_BUTTON )
+    EVT_AUI_PANE_CLOSE = wx.PyEventBinder ( wxEVT_AUI_PANE_CLOSE )
+    EVT_AUI_PANE_MAXIMIZE = wx.PyEventBinder ( wxEVT_AUI_PANE_MAXIMIZE )
+    EVT_AUI_PANE_RESTORE = wx.PyEventBinder ( wxEVT_AUI_PANE_RESTORE )
+    EVT_AUI_RENDER = wx.PyEventBinder ( wxEVT_AUI_RENDER )
+    EVT_AUI_FIND_MANAGER = wx.PyEventBinder ( wxEVT_AUI_FIND_MANAGER )
 }
 #endif // SWIG
 

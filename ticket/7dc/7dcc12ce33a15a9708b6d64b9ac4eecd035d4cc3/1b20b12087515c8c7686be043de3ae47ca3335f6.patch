Index: include/wx/aui/floatpane.h
===================================================================
--- include/wx/aui/floatpane.h	(revision 69060)
+++ include/wx/aui/floatpane.h	(working copy)
@@ -22,57 +22,57 @@
 #if wxUSE_AUI
 
 #if wxUSE_MINIFRAME
-    #include "wx/minifram.h"
-    #define wxAuiFloatingFrameBaseClass wxMiniFrame
+#include "wx/minifram.h"
+#define wxAuiFloatingFrameBaseClass wxMiniFrame
 #else
-    #include "wx/frame.h"
-    #define wxAuiFloatingFrameBaseClass wxFrame
+#include "wx/frame.h"
+#define wxAuiFloatingFrameBaseClass wxFrame
 #endif
 
 class WXDLLIMPEXP_AUI wxAuiFloatingFrame : public wxAuiFloatingFrameBaseClass
 {
 public:
-    wxAuiFloatingFrame(wxWindow* parent,
-                   wxAuiManager* owner_mgr,
-                   const wxAuiPaneInfo& pane,
-                   wxWindowID id = wxID_ANY,
-                   long style = wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
-                                wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
-                                wxCLIP_CHILDREN
-                   );
+    wxAuiFloatingFrame ( wxWindow * parent,
+                         wxAuiManager * ownerMgr,
+                         const wxAuiPaneInfo & pane,
+                         wxWindowID id = wxID_ANY,
+                         long style = wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
+                                      wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
+                                      wxCLIP_CHILDREN
+                       );
     virtual ~wxAuiFloatingFrame();
-    void SetPaneWindow(const wxAuiPaneInfo& pane);
-    wxAuiManager* GetOwnerManager() const;
+    void SetPaneWindow ( const wxAuiPaneInfo & pane );
+    wxAuiManager * GetOwnerManager() const;
 
 protected:
     virtual void OnMoveStart();
-    virtual void OnMoving(const wxRect& window_rect, wxDirection dir);
+    virtual void OnMoving ( const wxRect & windowRect, wxDirection dir );
     virtual void OnMoveFinished();
 
 private:
-    void OnSize(wxSizeEvent& event);
-    void OnClose(wxCloseEvent& event);
-    void OnMoveEvent(wxMoveEvent& event);
-    void OnIdle(wxIdleEvent& event);
-    void OnActivate(wxActivateEvent& event);
+    void OnSize ( wxSizeEvent & event );
+    void OnClose ( wxCloseEvent & event );
+    void OnMoveEvent ( wxMoveEvent & event );
+    void OnIdle ( wxIdleEvent & event );
+    void OnActivate ( wxActivateEvent & event );
     static bool isMouseDown();
 
 private:
-    wxWindow* m_pane_window;    // pane window being managed
-    bool m_solid_drag;          // true if system uses solid window drag
+    wxWindow * m_paneWindow;   // pane window being managed
+    bool m_solidDrag;          // true if system uses solid window drag
     bool m_moving;
-    wxRect m_last_rect;
-    wxRect m_last2_rect;
-    wxRect m_last3_rect;
-    wxSize m_last_size;
+    wxRect m_lastRect;
+    wxRect m_last2Rect;
+    wxRect m_last3Rect;
+    wxSize m_lastSize;
     wxDirection m_lastDirection;
 
-    wxWeakRef<wxAuiManager> m_owner_mgr;
+    wxWeakRef<wxAuiManager> m_ownerMgr;
     wxAuiManager m_mgr;
 
 #ifndef SWIG
     DECLARE_EVENT_TABLE()
-    DECLARE_CLASS(wxAuiFloatingFrame)
+    DECLARE_CLASS ( wxAuiFloatingFrame )
 #endif // SWIG
 };
 
Index: src/aui/floatpane.cpp
===================================================================
--- src/aui/floatpane.cpp	(revision 69060)
+++ src/aui/floatpane.cpp	(working copy)
@@ -20,7 +20,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #if wxUSE_AUI
@@ -36,92 +36,93 @@
 #include "wx/msw/private.h"
 #endif
 
-IMPLEMENT_CLASS(wxAuiFloatingFrame, wxAuiFloatingFrameBaseClass)
+IMPLEMENT_CLASS ( wxAuiFloatingFrame, wxAuiFloatingFrameBaseClass )
 
-wxAuiFloatingFrame::wxAuiFloatingFrame(wxWindow* parent,
-                wxAuiManager* owner_mgr,
-                const wxAuiPaneInfo& pane,
-                wxWindowID id /*= wxID_ANY*/,
-                long style /*=wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
+wxAuiFloatingFrame::wxAuiFloatingFrame ( wxWindow * parent,
+                                         wxAuiManager * ownerMgr,
+                                         const wxAuiPaneInfo & pane,
+                                         wxWindowID id /*= wxID_ANY*/,
+                                         long style /*=wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION |
                               wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
                               wxCLIP_CHILDREN
-                           */)
-                : wxAuiFloatingFrameBaseClass(parent, id, wxEmptyString,
-                        pane.floating_pos, pane.floating_size,
-                        style |
-                        (pane.HasCloseButton()?wxCLOSE_BOX:0) |
-                        (pane.HasMaximizeButton()?wxMAXIMIZE_BOX:0) |
-                        (pane.IsFixed()?0:wxRESIZE_BORDER)
-                        )
+                           */ )
+    : wxAuiFloatingFrameBaseClass ( parent, id, wxEmptyString,
+                                    pane.floatingPos, pane.floatingSize,
+                                    style |
+                                    ( pane.HasCloseButton() ? wxCLOSE_BOX : 0 ) |
+                                    ( pane.HasMaximizeButton() ? wxMAXIMIZE_BOX : 0 ) |
+                                    ( pane.IsFixed() ? 0 : wxRESIZE_BORDER )
+                                  )
 {
-    m_owner_mgr = owner_mgr;
+    m_ownerMgr = ownerMgr;
     m_moving = false;
-    m_mgr.SetManagedWindow(this);
-    m_solid_drag = true;
+    m_mgr.SetManagedWindow ( this );
+    m_solidDrag = true;
 
     // find out if the system supports solid window drag.
     // on non-msw systems, this is assumed to be the case
 #ifdef __WXMSW__
     BOOL b = TRUE;
-    SystemParametersInfo(38 /*SPI_GETDRAGFULLWINDOWS*/, 0, &b, 0);
-    m_solid_drag = b ? true : false;
+    SystemParametersInfo ( 38 /*SPI_GETDRAGFULLWINDOWS*/, 0, &b, 0 );
+    m_solidDrag = b ? true : false;
 #endif
 
-    SetExtraStyle(wxWS_EX_PROCESS_IDLE);
+    SetExtraStyle ( wxWS_EX_PROCESS_IDLE );
 }
 
 wxAuiFloatingFrame::~wxAuiFloatingFrame()
 {
     // if we do not do this, then we can crash...
-    if (m_owner_mgr && m_owner_mgr->m_action_window == this)
+    if ( m_ownerMgr && m_ownerMgr->m_actionWindow == this )
     {
-        m_owner_mgr->m_action_window = NULL;
+        m_ownerMgr->m_actionWindow = NULL;
     }
 
     m_mgr.UnInit();
 }
 
-void wxAuiFloatingFrame::SetPaneWindow(const wxAuiPaneInfo& pane)
+void wxAuiFloatingFrame::SetPaneWindow ( const wxAuiPaneInfo & pane )
 {
-    m_pane_window = pane.window;
-    m_pane_window->Reparent(this);
+    m_paneWindow = pane.window;
+    m_paneWindow->Reparent ( this );
 
-    wxAuiPaneInfo contained_pane = pane;
-    contained_pane.Dock().Center().Show().
-                    CaptionVisible(false).
-                    PaneBorder(false).
-                    Layer(0).Row(0).Position(0);
+    wxAuiPaneInfo containedPane = pane;
+    containedPane.Dock().Center().Show().
+    CaptionVisible ( false ).
+    PaneBorder ( false ).
+    Layer ( 0 ).Row ( 0 ).Position ( 0 );
 
     // Carry over the minimum size
-    wxSize pane_min_size = pane.window->GetMinSize();
+    wxSize paneMinSize = pane.window->GetMinSize();
 
     // if the frame window's max size is greater than the min size
     // then set the max size to the min size as well
-    wxSize cur_max_size = GetMaxSize();
-    if (cur_max_size.IsFullySpecified() &&
-          (cur_max_size.x < pane.min_size.x ||
-           cur_max_size.y < pane.min_size.y)
+    wxSize curMaxSize = GetMaxSize();
+
+    if ( curMaxSize.IsFullySpecified() &&
+            ( curMaxSize.x < pane.minSize.x ||
+              curMaxSize.y < pane.minSize.y )
        )
     {
-        SetMaxSize(pane_min_size);
+        SetMaxSize ( paneMinSize );
     }
 
-    SetMinSize(pane.window->GetMinSize());
+    SetMinSize ( pane.window->GetMinSize() );
 
-    m_mgr.AddPane(m_pane_window, contained_pane);
+    m_mgr.AddPane ( m_paneWindow, containedPane );
     m_mgr.Update();
 
-    if (pane.min_size.IsFullySpecified())
+    if ( pane.minSize.IsFullySpecified() )
     {
         // because SetSizeHints() calls Fit() too (which sets the window
         // size to its minimum allowed), we keep the size before calling
         // SetSizeHints() and reset it afterwards...
         wxSize tmp = GetSize();
-        GetSizer()->SetSizeHints(this);
-        SetSize(tmp);
+        GetSizer()->SetSizeHints ( this );
+        SetSize ( tmp );
     }
 
-    SetTitle(pane.caption);
+    SetTitle ( pane.caption );
 
     // This code is slightly awkward because we need to reset wxRESIZE_BORDER
     // before calling SetClientSize() below as doing it after setting the
@@ -130,169 +131,205 @@
     // the client size does change.
     //
     // So we must call it first but doing it generates a size event and updates
-    // pane.floating_size from inside it so we must also record its original
+    // pane.floatingSize from inside it so we must also record its original
     // value before doing it.
-    const bool hasFloatingSize = pane.floating_size != wxDefaultSize;
-    if (pane.IsFixed())
+    const bool hasFloatingSize = pane.floatingSize != wxDefaultSize;
+
+    if ( pane.IsFixed() )
     {
-        SetWindowStyleFlag(GetWindowStyleFlag() & ~wxRESIZE_BORDER);
+        SetWindowStyleFlag ( GetWindowStyleFlag() & ~wxRESIZE_BORDER );
     }
 
     if ( hasFloatingSize )
     {
-        SetSize(pane.floating_size);
+        SetSize ( pane.floatingSize );
     }
+
     else
     {
-        wxSize size = pane.best_size;
-        if (size == wxDefaultSize)
-            size = pane.min_size;
-        if (size == wxDefaultSize)
-            size = m_pane_window->GetSize();
-        if (m_owner_mgr && pane.HasGripper())
+        wxSize size = pane.bestSize;
+
+        if ( size == wxDefaultSize )
         {
-            if (pane.HasGripperTop())
-                size.y += m_owner_mgr->m_art->GetMetric(wxAUI_DOCKART_GRIPPER_SIZE);
+            size = pane.minSize;
+        }
+
+        if ( size == wxDefaultSize )
+        {
+            size = m_paneWindow->GetSize();
+        }
+
+        if ( m_ownerMgr && pane.HasGripper() )
+        {
+            if ( pane.HasGripperTop() )
+            {
+                size.y += m_ownerMgr->m_art->GetMetric ( wxAUI_DOCKART_GRIPPER_SIZE );
+            }
+
             else
-                size.x += m_owner_mgr->m_art->GetMetric(wxAUI_DOCKART_GRIPPER_SIZE);
+            {
+                size.x += m_ownerMgr->m_art->GetMetric ( wxAUI_DOCKART_GRIPPER_SIZE );
+            }
         }
 
-        SetClientSize(size);
+        SetClientSize ( size );
     }
 }
 
-wxAuiManager* wxAuiFloatingFrame::GetOwnerManager() const
+wxAuiManager * wxAuiFloatingFrame::GetOwnerManager() const
 {
-    return m_owner_mgr;
+    return m_ownerMgr;
 }
 
 
-void wxAuiFloatingFrame::OnSize(wxSizeEvent& WXUNUSED(event))
+void wxAuiFloatingFrame::OnSize ( wxSizeEvent & WXUNUSED ( event ) )
 {
-    if (m_owner_mgr)
+    if ( m_ownerMgr )
     {
-        m_owner_mgr->OnFloatingPaneResized(m_pane_window, GetRect());
+        m_ownerMgr->OnFloatingPaneResized ( m_paneWindow, GetRect() );
     }
 }
 
-void wxAuiFloatingFrame::OnClose(wxCloseEvent& evt)
+void wxAuiFloatingFrame::OnClose ( wxCloseEvent & evt )
 {
-    if (m_owner_mgr)
+    if ( m_ownerMgr )
     {
-        m_owner_mgr->OnFloatingPaneClosed(m_pane_window, evt);
+        m_ownerMgr->OnFloatingPaneClosed ( m_paneWindow, evt );
     }
-    if (!evt.GetVeto())
+
+    if ( !evt.GetVeto() )
     {
-        m_mgr.DetachPane(m_pane_window);
+        m_mgr.DetachPane ( m_paneWindow );
         Destroy();
     }
 }
 
-void wxAuiFloatingFrame::OnMoveEvent(wxMoveEvent& event)
+void wxAuiFloatingFrame::OnMoveEvent ( wxMoveEvent & event )
 {
-    if (!m_solid_drag)
+    if ( !m_solidDrag )
     {
         // systems without solid window dragging need to be
         // handled slightly differently, due to the lack of
         // the constant stream of EVT_MOVING events
-        if (!isMouseDown())
+        if ( !isMouseDown() )
+        {
             return;
+        }
+
         OnMoveStart();
-        OnMoving(event.GetRect(), wxNORTH);
+        OnMoving ( event.GetRect(), wxNORTH );
         m_moving = true;
         return;
     }
 
 
-    wxRect win_rect = GetRect();
+    wxRect winRect = GetRect();
 
-    if (win_rect == m_last_rect)
+    if ( winRect == m_lastRect )
+    {
         return;
+    }
 
     // skip the first move event
-    if (m_last_rect.IsEmpty())
+    if ( m_lastRect.IsEmpty() )
     {
-        m_last_rect = win_rect;
+        m_lastRect = winRect;
         return;
     }
 
     // skip if moving too fast to avoid massive redraws and
     // jumping hint windows
-    if ((abs(win_rect.x - m_last_rect.x) > 3) ||
-        (abs(win_rect.y - m_last_rect.y) > 3))
+    if ( ( abs ( winRect.x - m_lastRect.x ) > 3 ) ||
+            ( abs ( winRect.y - m_lastRect.y ) > 3 ) )
     {
-        m_last3_rect = m_last2_rect;
-        m_last2_rect = m_last_rect;
-        m_last_rect = win_rect;
+        m_last3Rect = m_last2Rect;
+        m_last2Rect = m_lastRect;
+        m_lastRect = winRect;
 
         // However still update the internally stored position to avoid
         // snapping back to the old one later.
-        if (m_owner_mgr)
+        if ( m_ownerMgr )
         {
-            m_owner_mgr->GetPane(m_pane_window).
-                floating_pos = win_rect.GetPosition();
+            m_ownerMgr->GetPane ( m_paneWindow ).
+            floatingPos = winRect.GetPosition();
         }
 
         return;
     }
 
     // prevent frame redocking during resize
-    if (m_last_rect.GetSize() != win_rect.GetSize())
+    if ( m_lastRect.GetSize() != winRect.GetSize() )
     {
-        m_last3_rect = m_last2_rect;
-        m_last2_rect = m_last_rect;
-        m_last_rect = win_rect;
+        m_last3Rect = m_last2Rect;
+        m_last2Rect = m_lastRect;
+        m_lastRect = winRect;
         return;
     }
 
     wxDirection dir = wxALL;
 
-    int horiz_dist = abs(win_rect.x - m_last3_rect.x);
-    int vert_dist = abs(win_rect.y - m_last3_rect.y);
+    int horizDist = abs ( winRect.x - m_last3Rect.x );
+    int vertDist = abs ( winRect.y - m_last3Rect.y );
 
-    if (vert_dist >= horiz_dist)
+    if ( vertDist >= horizDist )
     {
-        if (win_rect.y < m_last3_rect.y)
+        if ( winRect.y < m_last3Rect.y )
+        {
             dir = wxNORTH;
+        }
+
         else
+        {
             dir = wxSOUTH;
+        }
     }
+
     else
     {
-        if (win_rect.x < m_last3_rect.x)
+        if ( winRect.x < m_last3Rect.x )
+        {
             dir = wxWEST;
+        }
+
         else
+        {
             dir = wxEAST;
+        }
     }
 
-    m_last3_rect = m_last2_rect;
-    m_last2_rect = m_last_rect;
-    m_last_rect = win_rect;
+    m_last3Rect = m_last2Rect;
+    m_last2Rect = m_lastRect;
+    m_lastRect = winRect;
 
-    if (!isMouseDown())
+    if ( !isMouseDown() )
+    {
         return;
+    }
 
-    if (!m_moving)
+    if ( !m_moving )
     {
         OnMoveStart();
         m_moving = true;
     }
 
-    if (m_last3_rect.IsEmpty())
+    if ( m_last3Rect.IsEmpty() )
+    {
         return;
+    }
 
-    OnMoving(event.GetRect(), dir);
+    OnMoving ( event.GetRect(), dir );
 }
 
-void wxAuiFloatingFrame::OnIdle(wxIdleEvent& event)
+void wxAuiFloatingFrame::OnIdle ( wxIdleEvent & event )
 {
-    if (m_moving)
+    if ( m_moving )
     {
-        if (!isMouseDown())
+        if ( !isMouseDown() )
         {
             m_moving = false;
             OnMoveFinished();
         }
+
         else
         {
             event.RequestMore();
@@ -303,36 +340,37 @@
 void wxAuiFloatingFrame::OnMoveStart()
 {
     // notify the owner manager that the pane has started to move
-    if (m_owner_mgr)
+    if ( m_ownerMgr )
     {
-        m_owner_mgr->OnFloatingPaneMoveStart(m_pane_window);
+        m_ownerMgr->OnFloatingPaneMoveStart ( m_paneWindow );
     }
 }
 
-void wxAuiFloatingFrame::OnMoving(const wxRect& WXUNUSED(window_rect), wxDirection dir)
+void wxAuiFloatingFrame::OnMoving ( const wxRect & WXUNUSED ( windowRect ), wxDirection dir )
 {
     // notify the owner manager that the pane is moving
-    if (m_owner_mgr)
+    if ( m_ownerMgr )
     {
-        m_owner_mgr->OnFloatingPaneMoving(m_pane_window, dir);
+        m_ownerMgr->OnFloatingPaneMoving ( m_paneWindow, dir );
     }
+
     m_lastDirection = dir;
 }
 
 void wxAuiFloatingFrame::OnMoveFinished()
 {
     // notify the owner manager that the pane has finished moving
-    if (m_owner_mgr)
+    if ( m_ownerMgr )
     {
-        m_owner_mgr->OnFloatingPaneMoved(m_pane_window, m_lastDirection);
+        m_ownerMgr->OnFloatingPaneMoved ( m_paneWindow, m_lastDirection );
     }
 }
 
-void wxAuiFloatingFrame::OnActivate(wxActivateEvent& event)
+void wxAuiFloatingFrame::OnActivate ( wxActivateEvent & event )
 {
-    if (m_owner_mgr && event.GetActive())
+    if ( m_ownerMgr && event.GetActive() )
     {
-        m_owner_mgr->OnFloatingPaneActivated(m_pane_window);
+        m_ownerMgr->OnFloatingPaneActivated ( m_paneWindow );
     }
 }
 
@@ -346,13 +384,13 @@
 }
 
 
-BEGIN_EVENT_TABLE(wxAuiFloatingFrame, wxAuiFloatingFrameBaseClass)
-    EVT_SIZE(wxAuiFloatingFrame::OnSize)
-    EVT_MOVE(wxAuiFloatingFrame::OnMoveEvent)
-    EVT_MOVING(wxAuiFloatingFrame::OnMoveEvent)
-    EVT_CLOSE(wxAuiFloatingFrame::OnClose)
-    EVT_IDLE(wxAuiFloatingFrame::OnIdle)
-    EVT_ACTIVATE(wxAuiFloatingFrame::OnActivate)
+BEGIN_EVENT_TABLE ( wxAuiFloatingFrame, wxAuiFloatingFrameBaseClass )
+    EVT_SIZE ( wxAuiFloatingFrame::OnSize )
+    EVT_MOVE ( wxAuiFloatingFrame::OnMoveEvent )
+    EVT_MOVING ( wxAuiFloatingFrame::OnMoveEvent )
+    EVT_CLOSE ( wxAuiFloatingFrame::OnClose )
+    EVT_IDLE ( wxAuiFloatingFrame::OnIdle )
+    EVT_ACTIVATE ( wxAuiFloatingFrame::OnActivate )
 END_EVENT_TABLE()
 
 

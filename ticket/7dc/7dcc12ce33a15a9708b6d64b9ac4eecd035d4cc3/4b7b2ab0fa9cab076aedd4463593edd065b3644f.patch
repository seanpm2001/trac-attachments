Index: include/wx/aui/auibook.h
===================================================================
--- include/wx/aui/auibook.h	(revision 69060)
+++ include/wx/aui/auibook.h	(working copy)
@@ -63,41 +63,42 @@
 class WXDLLIMPEXP_AUI wxAuiNotebookEvent : public wxNotifyEvent
 {
 public:
-    wxAuiNotebookEvent(wxEventType command_type = wxEVT_NULL,
-                       int win_id = 0)
-          : wxNotifyEvent(command_type, win_id)
+    wxAuiNotebookEvent ( wxEventType commandType = wxEVT_NULL,
+                         int winId = 0 )
+        : wxNotifyEvent ( commandType, winId )
     {
-        old_selection = -1;
-        selection = -1;
-        drag_source = NULL;
+        m_oldSelection = -1;
+        m_selection = -1;
+        m_dragSource = NULL;
     }
 #ifndef SWIG
-    wxAuiNotebookEvent(const wxAuiNotebookEvent& c) : wxNotifyEvent(c)
+    wxAuiNotebookEvent ( const wxAuiNotebookEvent & c ) : wxNotifyEvent ( c )
     {
-        old_selection = c.old_selection;
-        selection = c.selection;
-        drag_source = c.drag_source;
+        m_oldSelection = c.m_oldSelection;
+        m_selection = c.m_selection;
+        m_dragSource = c.m_dragSource;
     }
 #endif
-    wxEvent *Clone() const { return new wxAuiNotebookEvent(*this); }
+    wxEvent * Clone() const { return new wxAuiNotebookEvent ( *this ); }
 
-    void SetSelection(int s) { selection = s; m_commandInt = s; }
-    int GetSelection() const { return selection; }
+    void SetSelection ( int s ) { m_selection = s; m_commandInt = s; }
+    int GetSelection() const { return m_selection; }
 
-    void SetOldSelection(int s) { old_selection = s; }
-    int GetOldSelection() const { return old_selection; }
+    void SetOldSelection ( int s ) { m_oldSelection = s; }
+    int GetOldSelection() const { return m_oldSelection; }
 
-    void SetDragSource(wxAuiNotebook* s) { drag_source = s; }
-    wxAuiNotebook* GetDragSource() const { return drag_source; }
+    void SetDragSource ( wxAuiNotebook * s ) { m_dragSource = s; }
+    wxAuiNotebook * GetDragSource() const { return m_dragSource; }
 
 public:
-    int old_selection;
-    int selection;
-    wxAuiNotebook* drag_source;
+private:
+    int m_oldSelection;
+    int m_selection;
+    wxAuiNotebook * m_dragSource;
 
 #ifndef SWIG
 private:
-    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxAuiNotebookEvent)
+    DECLARE_DYNAMIC_CLASS_NO_ASSIGN ( wxAuiNotebookEvent )
 #endif
 };
 
@@ -105,7 +106,7 @@
 class WXDLLIMPEXP_AUI wxAuiNotebookPage
 {
 public:
-    wxWindow* window;     // page's associated window
+    wxWindow * window;    // page's associated window
     wxString caption;     // caption displayed on the tab
     wxBitmap bitmap;      // tab's bitmap
     wxRect rect;          // tab's hit rectangle
@@ -117,17 +118,17 @@
 public:
 
     int id;               // button's id
-    int cur_state;        // current state (normal, hover, pressed, etc.)
+    int curState;        // current state (normal, hover, pressed, etc.)
     int location;         // buttons location (wxLEFT, wxRIGHT, or wxCENTER)
     wxBitmap bitmap;      // button's hover bitmap
-    wxBitmap dis_bitmap;  // button's disabled bitmap
+    wxBitmap disBitmap;  // button's disabled bitmap
     wxRect rect;          // button's hit rectangle
 };
 
 
 #ifndef SWIG
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiNotebookPage, wxAuiNotebookPageArray, WXDLLIMPEXP_AUI);
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiTabContainerButton, wxAuiTabContainerButtonArray, WXDLLIMPEXP_AUI);
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiNotebookPage, wxAuiNotebookPageArray, WXDLLIMPEXP_AUI );
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiTabContainerButton, wxAuiTabContainerButtonArray, WXDLLIMPEXP_AUI );
 #endif
 
 
@@ -140,61 +141,61 @@
     wxAuiTabArt() { }
     virtual ~wxAuiTabArt() { }
 
-    virtual wxAuiTabArt* Clone() = 0;
-    virtual void SetFlags(unsigned int flags) = 0;
+    virtual wxAuiTabArt * Clone() = 0;
+    virtual void SetFlags ( unsigned int flags ) = 0;
 
-    virtual void SetSizingInfo(const wxSize& tab_ctrl_size,
-                               size_t tab_count) = 0;
+    virtual void SetSizingInfo ( const wxSize & tabCtrlSize,
+                                 size_t tabCount ) = 0;
 
-    virtual void SetNormalFont(const wxFont& font) = 0;
-    virtual void SetSelectedFont(const wxFont& font) = 0;
-    virtual void SetMeasuringFont(const wxFont& font) = 0;
-    virtual void SetColour(const wxColour& colour) = 0;
-    virtual void SetActiveColour(const wxColour& colour) = 0;
+    virtual void SetNormalFont ( const wxFont & font ) = 0;
+    virtual void SetSelectedFont ( const wxFont & font ) = 0;
+    virtual void SetMeasuringFont ( const wxFont & font ) = 0;
+    virtual void SetColour ( const wxColour & colour ) = 0;
+    virtual void SetActiveColour ( const wxColour & colour ) = 0;
 
-    virtual void DrawBackground(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& rect) = 0;
+    virtual void DrawBackground (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawTab(wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiNotebookPage& pane,
-                         const wxRect& in_rect,
-                         int close_button_state,
-                         wxRect* out_tab_rect,
-                         wxRect* out_button_rect,
-                         int* x_extent) = 0;
+    virtual void DrawTab ( wxDC & dc,
+                           wxWindow * wnd,
+                           const wxAuiNotebookPage & pane,
+                           const wxRect & inRect,
+                           int closeButtonState,
+                           wxRect * outTabRect,
+                           wxRect * outButtonRect,
+                           int * xExtent ) = 0;
 
-    virtual void DrawButton(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& in_rect,
-                         int bitmap_id,
-                         int button_state,
-                         int orientation,
-                         wxRect* out_rect) = 0;
+    virtual void DrawButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & inRect,
+        int bitmapId,
+        int buttonState,
+        int orientation,
+        wxRect * outRect ) = 0;
 
-    virtual wxSize GetTabSize(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxString& caption,
-                         const wxBitmap& bitmap,
-                         bool active,
-                         int close_button_state,
-                         int* x_extent) = 0;
+    virtual wxSize GetTabSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxString & caption,
+        const wxBitmap & bitmap,
+        bool active,
+        int closeButtonState,
+        int * xExtent ) = 0;
 
-    virtual int ShowDropDown(
-                         wxWindow* wnd,
-                         const wxAuiNotebookPageArray& items,
-                         int active_idx) = 0;
+    virtual int ShowDropDown (
+        wxWindow * wnd,
+        const wxAuiNotebookPageArray & items,
+        int activeIdx ) = 0;
 
     virtual int GetIndentSize() = 0;
 
-    virtual int GetBestTabCtrlSize(
-                         wxWindow* wnd,
-                         const wxAuiNotebookPageArray& pages,
-                         const wxSize& required_bmp_size) = 0;
+    virtual int GetBestTabCtrlSize (
+        wxWindow * wnd,
+        const wxAuiNotebookPageArray & pages,
+        const wxSize & requiredBmpSize ) = 0;
 };
 
 
@@ -206,81 +207,81 @@
     wxAuiDefaultTabArt();
     virtual ~wxAuiDefaultTabArt();
 
-    wxAuiTabArt* Clone();
-    void SetFlags(unsigned int flags);
-    void SetSizingInfo(const wxSize& tab_ctrl_size,
-                       size_t tab_count);
+    wxAuiTabArt * Clone();
+    void SetFlags ( unsigned int flags );
+    void SetSizingInfo ( const wxSize & tabCtrlSize,
+                         size_t tabCount );
 
-    void SetNormalFont(const wxFont& font);
-    void SetSelectedFont(const wxFont& font);
-    void SetMeasuringFont(const wxFont& font);
-    void SetColour(const wxColour& colour);
-    void SetActiveColour(const wxColour& colour);
+    void SetNormalFont ( const wxFont & font );
+    void SetSelectedFont ( const wxFont & font );
+    void SetMeasuringFont ( const wxFont & font );
+    void SetColour ( const wxColour & colour );
+    void SetActiveColour ( const wxColour & colour );
 
-    void DrawBackground(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxRect& rect);
+    void DrawBackground (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect );
 
-    void DrawTab(wxDC& dc,
-                 wxWindow* wnd,
-                 const wxAuiNotebookPage& pane,
-                 const wxRect& in_rect,
-                 int close_button_state,
-                 wxRect* out_tab_rect,
-                 wxRect* out_button_rect,
-                 int* x_extent);
+    void DrawTab ( wxDC & dc,
+                   wxWindow * wnd,
+                   const wxAuiNotebookPage & pane,
+                   const wxRect & inRect,
+                   int closeButtonState,
+                   wxRect * outTabRect,
+                   wxRect * outButtonRect,
+                   int * xExtent );
 
-    void DrawButton(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxRect& in_rect,
-                 int bitmap_id,
-                 int button_state,
-                 int orientation,
-                 wxRect* out_rect);
+    void DrawButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & inRect,
+        int bitmapId,
+        int buttonState,
+        int orientation,
+        wxRect * outRect );
 
     int GetIndentSize();
 
-    wxSize GetTabSize(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxString& caption,
-                 const wxBitmap& bitmap,
-                 bool active,
-                 int close_button_state,
-                 int* x_extent);
+    wxSize GetTabSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxString & caption,
+        const wxBitmap & bitmap,
+        bool active,
+        int closeButtonState,
+        int * xExtent );
 
-    int ShowDropDown(
-                 wxWindow* wnd,
-                 const wxAuiNotebookPageArray& items,
-                 int active_idx);
+    int ShowDropDown (
+        wxWindow * wnd,
+        const wxAuiNotebookPageArray & items,
+        int activeIdx );
 
-    int GetBestTabCtrlSize(wxWindow* wnd,
-                 const wxAuiNotebookPageArray& pages,
-                 const wxSize& required_bmp_size);
+    int GetBestTabCtrlSize ( wxWindow * wnd,
+                             const wxAuiNotebookPageArray & pages,
+                             const wxSize & requiredBmpSize );
 
 protected:
 
-    wxFont m_normal_font;
-    wxFont m_selected_font;
-    wxFont m_measuring_font;
-    wxColour m_base_colour;
-    wxPen m_base_colour_pen;
-    wxPen m_border_pen;
-    wxBrush m_base_colour_brush;
-    wxColour m_active_colour;
-    wxBitmap m_active_close_bmp;
-    wxBitmap m_disabled_close_bmp;
-    wxBitmap m_active_left_bmp;
-    wxBitmap m_disabled_left_bmp;
-    wxBitmap m_active_right_bmp;
-    wxBitmap m_disabled_right_bmp;
-    wxBitmap m_active_windowlist_bmp;
-    wxBitmap m_disabled_windowlist_bmp;
+    wxFont m_normalFont;
+    wxFont m_selectedFont;
+    wxFont m_measuringFont;
+    wxColour m_baseColour;
+    wxPen m_baseColourPen;
+    wxPen m_borderPen;
+    wxBrush m_baseColourBrush;
+    wxColour m_activeColour;
+    wxBitmap m_activeCloseBmp;
+    wxBitmap m_disabledCloseBmp;
+    wxBitmap m_activeLeftBmp;
+    wxBitmap m_disabledLeftBmp;
+    wxBitmap m_activeRightBmp;
+    wxBitmap m_disabledRightBmp;
+    wxBitmap m_activeWindowListBmp;
+    wxBitmap m_disabledWindowListBmp;
 
-    int m_fixed_tab_width;
-    int m_tab_ctrl_height;
+    int m_fixedTabWidth;
+    int m_tabCtrlHeight;
     unsigned int m_flags;
 };
 
@@ -293,81 +294,81 @@
     wxAuiSimpleTabArt();
     virtual ~wxAuiSimpleTabArt();
 
-    wxAuiTabArt* Clone();
-    void SetFlags(unsigned int flags);
+    wxAuiTabArt * Clone();
+    void SetFlags ( unsigned int flags );
 
-    void SetSizingInfo(const wxSize& tab_ctrl_size,
-                       size_t tab_count);
+    void SetSizingInfo ( const wxSize & tabCtrlSize,
+                         size_t tabCount );
 
-    void SetNormalFont(const wxFont& font);
-    void SetSelectedFont(const wxFont& font);
-    void SetMeasuringFont(const wxFont& font);
-    void SetColour(const wxColour& colour);
-    void SetActiveColour(const wxColour& colour);
+    void SetNormalFont ( const wxFont & font );
+    void SetSelectedFont ( const wxFont & font );
+    void SetMeasuringFont ( const wxFont & font );
+    void SetColour ( const wxColour & colour );
+    void SetActiveColour ( const wxColour & colour );
 
-    void DrawBackground(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxRect& rect);
+    void DrawBackground (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect );
 
-    void DrawTab(wxDC& dc,
-                 wxWindow* wnd,
-                 const wxAuiNotebookPage& pane,
-                 const wxRect& in_rect,
-                 int close_button_state,
-                 wxRect* out_tab_rect,
-                 wxRect* out_button_rect,
-                 int* x_extent);
+    void DrawTab ( wxDC & dc,
+                   wxWindow * wnd,
+                   const wxAuiNotebookPage & pane,
+                   const wxRect & inRect,
+                   int closeButtonState,
+                   wxRect * outTabRect,
+                   wxRect * outButtonRect,
+                   int * xExtent );
 
-    void DrawButton(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxRect& in_rect,
-                 int bitmap_id,
-                 int button_state,
-                 int orientation,
-                 wxRect* out_rect);
+    void DrawButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & inRect,
+        int bitmapId,
+        int buttonState,
+        int orientation,
+        wxRect * outRect );
 
     int GetIndentSize();
 
-    wxSize GetTabSize(
-                 wxDC& dc,
-                 wxWindow* wnd,
-                 const wxString& caption,
-                 const wxBitmap& bitmap,
-                 bool active,
-                 int close_button_state,
-                 int* x_extent);
+    wxSize GetTabSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxString & caption,
+        const wxBitmap & bitmap,
+        bool active,
+        int closeButtonState,
+        int * xExtent );
 
-    int ShowDropDown(
-                 wxWindow* wnd,
-                 const wxAuiNotebookPageArray& items,
-                 int active_idx);
+    int ShowDropDown (
+        wxWindow * wnd,
+        const wxAuiNotebookPageArray & items,
+        int activeIdx );
 
-    int GetBestTabCtrlSize(wxWindow* wnd,
-                 const wxAuiNotebookPageArray& pages,
-                 const wxSize& required_bmp_size);
+    int GetBestTabCtrlSize ( wxWindow * wnd,
+                             const wxAuiNotebookPageArray & pages,
+                             const wxSize & requiredBmpSize );
 
 protected:
 
-    wxFont m_normal_font;
-    wxFont m_selected_font;
-    wxFont m_measuring_font;
-    wxPen m_normal_bkpen;
-    wxPen m_selected_bkpen;
-    wxBrush m_normal_bkbrush;
-    wxBrush m_selected_bkbrush;
-    wxBrush m_bkbrush;
-    wxBitmap m_active_close_bmp;
-    wxBitmap m_disabled_close_bmp;
-    wxBitmap m_active_left_bmp;
-    wxBitmap m_disabled_left_bmp;
-    wxBitmap m_active_right_bmp;
-    wxBitmap m_disabled_right_bmp;
-    wxBitmap m_active_windowlist_bmp;
-    wxBitmap m_disabled_windowlist_bmp;
+    wxFont m_normalFont;
+    wxFont m_selectedFont;
+    wxFont m_measuringFont;
+    wxPen m_normalBkPen;
+    wxPen m_selectedBkPen;
+    wxBrush m_normalBkBrush;
+    wxBrush m_selectedBkBrush;
+    wxBrush m_bkBrush;
+    wxBitmap m_activeCloseBmp;
+    wxBitmap m_disabledCloseBmp;
+    wxBitmap m_activeLeftBmp;
+    wxBitmap m_disabledLeftBmp;
+    wxBitmap m_activeRightBmp;
+    wxBitmap m_disabledRightBmp;
+    wxBitmap m_activeWindowListBmp;
+    wxBitmap m_disabledWindowListBmp;
 
-    int m_fixed_tab_width;
+    int m_fixedTabWidth;
     unsigned int m_flags;
 };
 
@@ -386,115 +387,115 @@
     wxAuiTabContainer();
     virtual ~wxAuiTabContainer();
 
-    void SetArtProvider(wxAuiTabArt* art);
-    wxAuiTabArt* GetArtProvider() const;
+    void SetArtProvider ( wxAuiTabArt * art );
+    wxAuiTabArt * GetArtProvider() const;
 
-    void SetFlags(unsigned int flags);
+    void SetFlags ( unsigned int flags );
     unsigned int GetFlags() const;
 
-    bool AddPage(wxWindow* page, const wxAuiNotebookPage& info);
-    bool InsertPage(wxWindow* page, const wxAuiNotebookPage& info, size_t idx);
-    bool MovePage(wxWindow* page, size_t new_idx);
-    bool RemovePage(wxWindow* page);
-    bool SetActivePage(wxWindow* page);
-    bool SetActivePage(size_t page);
+    bool AddPage ( wxWindow * page, const wxAuiNotebookPage & info );
+    bool InsertPage ( wxWindow * page, const wxAuiNotebookPage & info, size_t idx );
+    bool MovePage ( wxWindow * page, size_t newIdx );
+    bool RemovePage ( wxWindow * page );
+    bool SetActivePage ( wxWindow * page );
+    bool SetActivePage ( size_t page );
     void SetNoneActive();
     int GetActivePage() const;
-    bool TabHitTest(int x, int y, wxWindow** hit) const;
-    bool ButtonHitTest(int x, int y, wxAuiTabContainerButton** hit) const;
-    wxWindow* GetWindowFromIdx(size_t idx) const;
-    int GetIdxFromWindow(wxWindow* page) const;
+    bool TabHitTest ( int x, int y, wxWindow ** hit ) const;
+    bool ButtonHitTest ( int x, int y, wxAuiTabContainerButton ** hit ) const;
+    wxWindow * GetWindowFromIdx ( size_t idx ) const;
+    int GetIdxFromWindow ( wxWindow * page ) const;
     size_t GetPageCount() const;
-    wxAuiNotebookPage& GetPage(size_t idx);
-    const wxAuiNotebookPage& GetPage(size_t idx) const;
-    wxAuiNotebookPageArray& GetPages();
-    void SetNormalFont(const wxFont& normal_font);
-    void SetSelectedFont(const wxFont& selected_font);
-    void SetMeasuringFont(const wxFont& measuring_font);
-    void SetColour(const wxColour& colour);
-    void SetActiveColour(const wxColour& colour);
+    wxAuiNotebookPage & GetPage ( size_t idx );
+    const wxAuiNotebookPage & GetPage ( size_t idx ) const;
+    wxAuiNotebookPageArray & GetPages();
+    void SetNormalFont ( const wxFont & normalFont );
+    void SetSelectedFont ( const wxFont & selectedFont );
+    void SetMeasuringFont ( const wxFont & measuringFont );
+    void SetColour ( const wxColour & colour );
+    void SetActiveColour ( const wxColour & colour );
     void DoShowHide();
-    void SetRect(const wxRect& rect);
+    void SetRect ( const wxRect & rect );
 
-    void RemoveButton(int id);
-    void AddButton(int id,
-                   int location,
-                   const wxBitmap& normal_bitmap = wxNullBitmap,
-                   const wxBitmap& disabled_bitmap = wxNullBitmap);
+    void RemoveButton ( int id );
+    void AddButton ( int id,
+                     int location,
+                     const wxBitmap & normalBitmap = wxNullBitmap,
+                     const wxBitmap & disabledBitmap = wxNullBitmap );
 
     size_t GetTabOffset() const;
-    void SetTabOffset(size_t offset);
+    void SetTabOffset ( size_t offset );
 
     // Is the tab visible?
-    bool IsTabVisible(int tabPage, int tabOffset, wxDC* dc, wxWindow* wnd);
+    bool IsTabVisible ( int tabPage, int tabOffset, wxDC * dc, wxWindow * wnd );
 
     // Make the tab visible if it wasn't already
-    void MakeTabVisible(int tabPage, wxWindow* win);
+    void MakeTabVisible ( int tabPage, wxWindow * win );
 
 protected:
 
-    virtual void Render(wxDC* dc, wxWindow* wnd);
+    virtual void Render ( wxDC * dc, wxWindow * wnd );
 
 protected:
 
-    wxAuiTabArt* m_art;
+    wxAuiTabArt * m_art;
     wxAuiNotebookPageArray m_pages;
     wxAuiTabContainerButtonArray m_buttons;
-    wxAuiTabContainerButtonArray m_tab_close_buttons;
+    wxAuiTabContainerButtonArray m_tabCloseButtons;
     wxRect m_rect;
-    size_t m_tab_offset;
+    size_t m_tabOffset;
     unsigned int m_flags;
 };
 
 
 
 class WXDLLIMPEXP_AUI wxAuiTabCtrl : public wxControl,
-                                     public wxAuiTabContainer
+    public wxAuiTabContainer
 {
 public:
 
-    wxAuiTabCtrl(wxWindow* parent,
-                 wxWindowID id = wxID_ANY,
-                 const wxPoint& pos = wxDefaultPosition,
-                 const wxSize& size = wxDefaultSize,
-                 long style = 0);
+    wxAuiTabCtrl ( wxWindow * parent,
+                   wxWindowID id = wxID_ANY,
+                   const wxPoint & pos = wxDefaultPosition,
+                   const wxSize & size = wxDefaultSize,
+                   long style = 0 );
 
     ~wxAuiTabCtrl();
 
-    bool IsDragging() const { return m_is_dragging; }
+    bool IsDragging() const { return m_isDragging; }
 
 protected:
     // choose the default border for this window
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }
 
-    void OnPaint(wxPaintEvent& evt);
-    void OnEraseBackground(wxEraseEvent& evt);
-    void OnSize(wxSizeEvent& evt);
-    void OnLeftDown(wxMouseEvent& evt);
-    void OnLeftDClick(wxMouseEvent& evt);
-    void OnLeftUp(wxMouseEvent& evt);
-    void OnMiddleDown(wxMouseEvent& evt);
-    void OnMiddleUp(wxMouseEvent& evt);
-    void OnRightDown(wxMouseEvent& evt);
-    void OnRightUp(wxMouseEvent& evt);
-    void OnMotion(wxMouseEvent& evt);
-    void OnLeaveWindow(wxMouseEvent& evt);
-    void OnButton(wxAuiNotebookEvent& evt);
-    void OnSetFocus(wxFocusEvent& event);
-    void OnKillFocus(wxFocusEvent& event);
-    void OnChar(wxKeyEvent& event);
-    void OnCaptureLost(wxMouseCaptureLostEvent& evt);
+    void OnPaint ( wxPaintEvent & evt );
+    void OnEraseBackground ( wxEraseEvent & evt );
+    void OnSize ( wxSizeEvent & evt );
+    void OnLeftDown ( wxMouseEvent & evt );
+    void OnLeftDClick ( wxMouseEvent & evt );
+    void OnLeftUp ( wxMouseEvent & evt );
+    void OnMiddleDown ( wxMouseEvent & evt );
+    void OnMiddleUp ( wxMouseEvent & evt );
+    void OnRightDown ( wxMouseEvent & evt );
+    void OnRightUp ( wxMouseEvent & evt );
+    void OnMotion ( wxMouseEvent & evt );
+    void OnLeaveWindow ( wxMouseEvent & evt );
+    void OnButton ( wxAuiNotebookEvent & evt );
+    void OnSetFocus ( wxFocusEvent & event );
+    void OnKillFocus ( wxFocusEvent & event );
+    void OnChar ( wxKeyEvent & event );
+    void OnCaptureLost ( wxMouseCaptureLostEvent & evt );
 
 protected:
 
-    wxPoint m_click_pt;
-    wxWindow* m_click_tab;
-    bool m_is_dragging;
-    wxAuiTabContainerButton* m_hover_button;
-    wxAuiTabContainerButton* m_pressed_button;
+    wxPoint m_clickPt;
+    wxWindow * m_clickTab;
+    bool m_isDragging;
+    wxAuiTabContainerButton * m_hoverButton;
+    wxAuiTabContainerButton * m_pressedButton;
 
 #ifndef SWIG
-    DECLARE_CLASS(wxAuiTabCtrl)
+    DECLARE_CLASS ( wxAuiTabCtrl )
     DECLARE_EVENT_TABLE()
 #endif
 };
@@ -509,82 +510,82 @@
 
     wxAuiNotebook() { Init(); }
 
-    wxAuiNotebook(wxWindow* parent,
-                  wxWindowID id = wxID_ANY,
-                  const wxPoint& pos = wxDefaultPosition,
-                  const wxSize& size = wxDefaultSize,
-                  long style = wxAUI_NB_DEFAULT_STYLE)
+    wxAuiNotebook ( wxWindow * parent,
+                    wxWindowID id = wxID_ANY,
+                    const wxPoint & pos = wxDefaultPosition,
+                    const wxSize & size = wxDefaultSize,
+                    long style = wxAUI_NB_DEFAULT_STYLE )
     {
         Init();
-        Create(parent, id, pos, size, style);
+        Create ( parent, id, pos, size, style );
     }
 
     virtual ~wxAuiNotebook();
 
-    bool Create(wxWindow* parent,
-                wxWindowID id = wxID_ANY,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = 0);
+    bool Create ( wxWindow * parent,
+                  wxWindowID id = wxID_ANY,
+                  const wxPoint & pos = wxDefaultPosition,
+                  const wxSize & size = wxDefaultSize,
+                  long style = 0 );
 
-    void SetWindowStyleFlag(long style);
-    void SetArtProvider(wxAuiTabArt* art);
-    wxAuiTabArt* GetArtProvider() const;
+    void SetWindowStyleFlag ( long style );
+    void SetArtProvider ( wxAuiTabArt * art );
+    wxAuiTabArt * GetArtProvider() const;
 
-    virtual void SetUniformBitmapSize(const wxSize& size);
-    virtual void SetTabCtrlHeight(int height);
+    virtual void SetUniformBitmapSize ( const wxSize & size );
+    virtual void SetTabCtrlHeight ( int height );
 
-    bool AddPage(wxWindow* page,
-                 const wxString& caption,
-                 bool select = false,
-                 const wxBitmap& bitmap = wxNullBitmap);
+    bool AddPage ( wxWindow * page,
+                   const wxString & caption,
+                   bool select = false,
+                   const wxBitmap & bitmap = wxNullBitmap );
 
-    bool InsertPage(size_t page_idx,
-                    wxWindow* page,
-                    const wxString& caption,
-                    bool select = false,
-                    const wxBitmap& bitmap = wxNullBitmap);
+    bool InsertPage ( size_t pageIdx,
+                      wxWindow * page,
+                      const wxString & caption,
+                      bool select = false,
+                      const wxBitmap & bitmap = wxNullBitmap );
 
-    bool DeletePage(size_t page);
-    bool RemovePage(size_t page);
+    bool DeletePage ( size_t page );
+    bool RemovePage ( size_t page );
 
     size_t GetPageCount() const;
-    wxWindow* GetPage(size_t page_idx) const;
-    int GetPageIndex(wxWindow* page_wnd) const;
+    wxWindow * GetPage ( size_t pageIdx ) const;
+    int GetPageIndex ( wxWindow * pageWnd ) const;
 
-    bool SetPageText(size_t page, const wxString& text);
-    wxString GetPageText(size_t page_idx) const;
+    bool SetPageText ( size_t page, const wxString & text );
+    wxString GetPageText ( size_t pageIdx ) const;
 
-    bool SetPageBitmap(size_t page, const wxBitmap& bitmap);
-    wxBitmap GetPageBitmap(size_t page_idx) const;
+    bool SetPageBitmap ( size_t page, const wxBitmap & bitmap );
+    wxBitmap GetPageBitmap ( size_t pageIdx ) const;
 
-    size_t SetSelection(size_t new_page);
+    size_t SetSelection ( size_t newPage );
     int GetSelection() const;
 
-    virtual void Split(size_t page, int direction);
+    virtual void Split ( size_t page, int direction );
 
-    const wxAuiManager& GetAuiManager() const { return m_mgr; }
+    const wxAuiManager & GetAuiManager() const { return m_mgr; }
 
     // Sets the normal font
-    void SetNormalFont(const wxFont& font);
+    void SetNormalFont ( const wxFont & font );
 
     // Sets the selected tab font
-    void SetSelectedFont(const wxFont& font);
+    void SetSelectedFont ( const wxFont & font );
 
     // Sets the measuring font
-    void SetMeasuringFont(const wxFont& font);
+    void SetMeasuringFont ( const wxFont & font );
 
     // Sets the tab font
-    virtual bool SetFont(const wxFont& font);
+    virtual bool SetFont ( const wxFont & font );
 
     // Gets the tab control height
     int GetTabCtrlHeight() const;
 
     // Gets the height of the notebook for a given page height
-    int GetHeightForPageHeight(int pageHeight);
+    int GetHeightForPageHeight ( int pageHeight );
 
     // Advances the selection, generation page selection events
-    void AdvanceSelection(bool forward = true);
+    void AdvanceSelection ( bool forward = true );
 
     // Shows the window menu
     bool ShowWindowMenu();
@@ -617,59 +618,59 @@
 protected:
 
     void DoSizing();
-    void InitNotebook(long style);
-    wxAuiTabCtrl* GetTabCtrlFromPoint(const wxPoint& pt);
-    wxWindow* GetTabFrameFromTabCtrl(wxWindow* tab_ctrl);
-    wxAuiTabCtrl* GetActiveTabCtrl();
-    bool FindTab(wxWindow* page, wxAuiTabCtrl** ctrl, int* idx);
+    void InitNotebook ( long style );
+    wxAuiTabCtrl * GetTabCtrlFromPoint ( const wxPoint & pt );
+    wxWindow * GetTabFrameFromTabCtrl ( wxWindow * tabCtrl );
+    wxAuiTabCtrl * GetActiveTabCtrl();
+    bool FindTab ( wxWindow * page, wxAuiTabCtrl ** ctrl, int * idx );
     void RemoveEmptyTabFrames();
     void UpdateHintWindowSize();
 
 protected:
 
-    void OnChildFocusNotebook(wxChildFocusEvent& evt);
-    void OnRender(wxAuiManagerEvent& evt);
-    void OnSize(wxSizeEvent& evt);
-    void OnTabClicked(wxAuiNotebookEvent& evt);
-    void OnTabBeginDrag(wxAuiNotebookEvent& evt);
-    void OnTabDragMotion(wxAuiNotebookEvent& evt);
-    void OnTabEndDrag(wxAuiNotebookEvent& evt);
-    void OnTabCancelDrag(wxAuiNotebookEvent& evt);
-    void OnTabButton(wxAuiNotebookEvent& evt);
-    void OnTabMiddleDown(wxAuiNotebookEvent& evt);
-    void OnTabMiddleUp(wxAuiNotebookEvent& evt);
-    void OnTabRightDown(wxAuiNotebookEvent& evt);
-    void OnTabRightUp(wxAuiNotebookEvent& evt);
-    void OnTabBgDClick(wxAuiNotebookEvent& evt);
-    void OnNavigationKeyNotebook(wxNavigationKeyEvent& event);
+    void OnChildFocusNotebook ( wxChildFocusEvent & evt );
+    void OnRender ( wxAuiManagerEvent & evt );
+    void OnSize ( wxSizeEvent & evt );
+    void OnTabClicked ( wxAuiNotebookEvent & evt );
+    void OnTabBeginDrag ( wxAuiNotebookEvent & evt );
+    void OnTabDragMotion ( wxAuiNotebookEvent & evt );
+    void OnTabEndDrag ( wxAuiNotebookEvent & evt );
+    void OnTabCancelDrag ( wxAuiNotebookEvent & evt );
+    void OnTabButton ( wxAuiNotebookEvent & evt );
+    void OnTabMiddleDown ( wxAuiNotebookEvent & evt );
+    void OnTabMiddleUp ( wxAuiNotebookEvent & evt );
+    void OnTabRightDown ( wxAuiNotebookEvent & evt );
+    void OnTabRightUp ( wxAuiNotebookEvent & evt );
+    void OnTabBgDClick ( wxAuiNotebookEvent & evt );
+    void OnNavigationKeyNotebook ( wxNavigationKeyEvent & event );
 
     // set selection to the given window (which must be non-NULL and be one of
     // our pages, otherwise an assert is raised)
-    void SetSelectionToWindow(wxWindow *win);
-    void SetSelectionToPage(const wxAuiNotebookPage& page)
+    void SetSelectionToWindow ( wxWindow * win );
+    void SetSelectionToPage ( const wxAuiNotebookPage & page )
     {
-        SetSelectionToWindow(page.window);
+        SetSelectionToWindow ( page.window );
     }
 
 protected:
 
     wxAuiManager m_mgr;
     wxAuiTabContainer m_tabs;
-    int m_curpage;
-    int m_tab_id_counter;
-    wxWindow* m_dummy_wnd;
+    int m_curPage;
+    int m_tabIdCounter;
+    wxWindow * m_dummyWnd;
 
-    wxSize m_requested_bmp_size;
-    int m_requested_tabctrl_height;
-    wxFont m_selected_font;
-    wxFont m_normal_font;
-    int m_tab_ctrl_height;
+    wxSize m_requestedBmpSize;
+    int m_requestedTabCtrlHeight;
+    wxFont m_selectedFont;
+    wxFont m_normalFont;
+    int m_tabCtrlHeight;
 
-    int m_last_drag_x;
+    int m_lastDragX;
     unsigned int m_flags;
 
 #ifndef SWIG
-    DECLARE_CLASS(wxAuiNotebook)
+    DECLARE_CLASS ( wxAuiNotebook )
     DECLARE_EVENT_TABLE()
 #endif
 };
@@ -681,23 +682,23 @@
 
 #ifndef SWIG
 
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BUTTON, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, wxAuiNotebookEvent);
-wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, wxAuiNotebookEvent);
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BUTTON, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, wxAuiNotebookEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, wxAuiNotebookEvent );
 
-typedef void (wxEvtHandler::*wxAuiNotebookEventFunction)(wxAuiNotebookEvent&);
+typedef void ( wxEvtHandler::*wxAuiNotebookEventFunction ) ( wxAuiNotebookEvent & );
 
 #define wxAuiNotebookEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxAuiNotebookEventFunction, func)
@@ -735,38 +736,39 @@
 #else
 
 // wxpython/swig event work
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BUTTON;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_END_DRAG;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP;
-%constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BUTTON;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_END_DRAG;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP;
+% constant wxEventType wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK;
 
-%pythoncode {
-    EVT_AUINOTEBOOK_PAGE_CLOSE = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, 1 )
-    EVT_AUINOTEBOOK_PAGE_CLOSED = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, 1 )
-    EVT_AUINOTEBOOK_PAGE_CHANGED = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, 1 )
-    EVT_AUINOTEBOOK_PAGE_CHANGING = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, 1 )
-    EVT_AUINOTEBOOK_BUTTON = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_BUTTON, 1 )
-    EVT_AUINOTEBOOK_BEGIN_DRAG = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, 1 )
-    EVT_AUINOTEBOOK_END_DRAG = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, 1 )
-    EVT_AUINOTEBOOK_DRAG_MOTION = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, 1 )
-    EVT_AUINOTEBOOK_ALLOW_DND = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, 1 )
-    EVT_AUINOTEBOOK_DRAG_DONE = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, 1 )
-    EVT__AUINOTEBOOK_TAB_MIDDLE_DOWN = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, 1 )
-    EVT__AUINOTEBOOK_TAB_MIDDLE_UP = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, 1 )
-    EVT__AUINOTEBOOK_TAB_RIGHT_DOWN = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, 1 )
-    EVT__AUINOTEBOOK_TAB_RIGHT_UP = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, 1 )
-    EVT_AUINOTEBOOK_BG_DCLICK = wx.PyEventBinder( wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, 1 )
+% pythoncode
+{
+    EVT_AUINOTEBOOK_PAGE_CLOSE = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, 1 )
+    EVT_AUINOTEBOOK_PAGE_CLOSED = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, 1 )
+    EVT_AUINOTEBOOK_PAGE_CHANGED = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, 1 )
+    EVT_AUINOTEBOOK_PAGE_CHANGING = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, 1 )
+    EVT_AUINOTEBOOK_BUTTON = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_BUTTON, 1 )
+    EVT_AUINOTEBOOK_BEGIN_DRAG = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, 1 )
+    EVT_AUINOTEBOOK_END_DRAG = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, 1 )
+    EVT_AUINOTEBOOK_DRAG_MOTION = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, 1 )
+    EVT_AUINOTEBOOK_ALLOW_DND = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, 1 )
+    EVT_AUINOTEBOOK_DRAG_DONE = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, 1 )
+    EVT__AUINOTEBOOK_TAB_MIDDLE_DOWN = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, 1 )
+    EVT__AUINOTEBOOK_TAB_MIDDLE_UP = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, 1 )
+    EVT__AUINOTEBOOK_TAB_RIGHT_DOWN = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, 1 )
+    EVT__AUINOTEBOOK_TAB_RIGHT_UP = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, 1 )
+    EVT_AUINOTEBOOK_BG_DCLICK = wx.PyEventBinder ( wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, 1 )
 }
 #endif
 
Index: src/aui/auibook.cpp
===================================================================
--- src/aui/auibook.cpp	(revision 69060)
+++ src/aui/auibook.cpp	(working copy)
@@ -15,7 +15,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #if wxUSE_AUI
@@ -23,9 +23,9 @@
 #include "wx/aui/auibook.h"
 
 #ifndef WX_PRECOMP
-    #include "wx/settings.h"
-    #include "wx/image.h"
-    #include "wx/menu.h"
+#include "wx/settings.h"
+#include "wx/image.h"
+#include "wx/menu.h"
 #endif
 
 #include "wx/aui/tabmdi.h"
@@ -38,29 +38,29 @@
 #endif
 
 #include "wx/arrimpl.cpp"
-WX_DEFINE_OBJARRAY(wxAuiNotebookPageArray)
-WX_DEFINE_OBJARRAY(wxAuiTabContainerButtonArray)
+WX_DEFINE_OBJARRAY ( wxAuiNotebookPageArray )
+WX_DEFINE_OBJARRAY ( wxAuiTabContainerButtonArray )
 
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_BUTTON, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, wxAuiNotebookEvent);
-wxDEFINE_EVENT(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, wxAuiNotebookEvent);
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_BUTTON, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, wxAuiNotebookEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, wxAuiNotebookEvent );
 
-IMPLEMENT_CLASS(wxAuiNotebook, wxControl)
-IMPLEMENT_CLASS(wxAuiTabCtrl, wxControl)
-IMPLEMENT_DYNAMIC_CLASS(wxAuiNotebookEvent, wxEvent)
+IMPLEMENT_CLASS ( wxAuiNotebook, wxControl )
+IMPLEMENT_CLASS ( wxAuiTabCtrl, wxControl )
+IMPLEMENT_DYNAMIC_CLASS ( wxAuiNotebookEvent, wxEvent )
 
 
 
@@ -69,42 +69,42 @@
 // these functions live in dockart.cpp -- they'll eventually
 // be moved to a new utility cpp file
 
-wxBitmap wxAuiBitmapFromBits(const unsigned char bits[], int w, int h,
-                             const wxColour& color);
+wxBitmap wxAuiBitmapFromBits ( const unsigned char bits[], int w, int h,
+                               const wxColour & color );
 
-wxString wxAuiChopText(wxDC& dc, const wxString& text, int max_size);
+wxString wxAuiChopText ( wxDC & dc, const wxString & text, int maxSize );
 
-static void DrawButtons(wxDC& dc,
-                        const wxRect& _rect,
-                        const wxBitmap& bmp,
-                        const wxColour& bkcolour,
-                        int button_state)
+static void DrawButtons ( wxDC & dc,
+                          const wxRect & Rect,
+                          const wxBitmap & bmp,
+                          const wxColour & bkcolour,
+                          int buttonState )
 {
-    wxRect rect = _rect;
+    wxRect rect = Rect;
 
-    if (button_state == wxAUI_BUTTON_STATE_PRESSED)
+    if ( buttonState == wxAUI_BUTTON_STATE_PRESSED )
     {
         rect.x++;
         rect.y++;
     }
 
-    if (button_state == wxAUI_BUTTON_STATE_HOVER ||
-        button_state == wxAUI_BUTTON_STATE_PRESSED)
+    if ( buttonState == wxAUI_BUTTON_STATE_HOVER ||
+            buttonState == wxAUI_BUTTON_STATE_PRESSED )
     {
-        dc.SetBrush(wxBrush(bkcolour.ChangeLightness(120)));
-        dc.SetPen(wxPen(bkcolour.ChangeLightness(75)));
+        dc.SetBrush ( wxBrush ( bkcolour.ChangeLightness ( 120 ) ) );
+        dc.SetPen ( wxPen ( bkcolour.ChangeLightness ( 75 ) ) );
 
         // draw the background behind the button
-        dc.DrawRectangle(rect.x, rect.y, 15, 15);
+        dc.DrawRectangle ( rect.x, rect.y, 15, 15 );
     }
 
     // draw the button itself
-    dc.DrawBitmap(bmp, rect.x, rect.y, true);
+    dc.DrawBitmap ( bmp, rect.x, rect.y, true );
 }
 
-static void IndentPressedBitmap(wxRect* rect, int button_state)
+static void IndentPressedBitmap ( wxRect * rect, int buttonState )
 {
-    if (button_state == wxAUI_BUTTON_STATE_PRESSED)
+    if ( buttonState == wxAUI_BUTTON_STATE_PRESSED )
     {
         rect->x++;
         rect->y++;
@@ -119,61 +119,75 @@
 {
 public:
 
-    wxAuiCommandCapture() { m_last_id = 0; }
-    int GetCommandId() const { return m_last_id; }
+    wxAuiCommandCapture() { m_lastId = 0; }
+    int GetCommandId() const { return m_lastId; }
 
-    bool ProcessEvent(wxEvent& evt)
+    bool ProcessEvent ( wxEvent & evt )
     {
-        if (evt.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+        if ( evt.GetEventType() == wxEVT_COMMAND_MENU_SELECTED )
         {
-            m_last_id = evt.GetId();
+            m_lastId = evt.GetId();
             return true;
         }
 
-        if (GetNextHandler())
-            return GetNextHandler()->ProcessEvent(evt);
+        if ( GetNextHandler() )
+        {
+            return GetNextHandler()->ProcessEvent ( evt );
+        }
 
         return false;
     }
 
 private:
-    int m_last_id;
+    int m_lastId;
 };
 
 
 // -- bitmaps --
 
 #if defined( __WXMAC__ )
- static const unsigned char close_bits[]={
-     0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFE, 0x03, 0xF8, 0x01, 0xF0, 0x19, 0xF3,
-     0xB8, 0xE3, 0xF0, 0xE1, 0xE0, 0xE0, 0xF0, 0xE1, 0xB8, 0xE3, 0x19, 0xF3,
-     0x01, 0xF0, 0x03, 0xF8, 0x0F, 0xFE, 0xFF, 0xFF };
+static const unsigned char closeBits[] =
+{
+    0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFE, 0x03, 0xF8, 0x01, 0xF0, 0x19, 0xF3,
+    0xB8, 0xE3, 0xF0, 0xE1, 0xE0, 0xE0, 0xF0, 0xE1, 0xB8, 0xE3, 0x19, 0xF3,
+    0x01, 0xF0, 0x03, 0xF8, 0x0F, 0xFE, 0xFF, 0xFF
+};
 #elif defined( __WXGTK__)
- static const unsigned char close_bits[]={
-     0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xfb, 0xef, 0xdb, 0xed, 0x8b, 0xe8,
-     0x1b, 0xec, 0x3b, 0xee, 0x1b, 0xec, 0x8b, 0xe8, 0xdb, 0xed, 0xfb, 0xef,
-     0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
+static const unsigned char closeBits[] =
+{
+    0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xfb, 0xef, 0xdb, 0xed, 0x8b, 0xe8,
+    0x1b, 0xec, 0x3b, 0xee, 0x1b, 0xec, 0x8b, 0xe8, 0xdb, 0xed, 0xfb, 0xef,
+    0x07, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+};
 #else
- static const unsigned char close_bits[]={
-     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf3, 0xcf, 0xf9,
-     0x9f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x9f, 0xfc, 0xcf, 0xf9, 0xe7, 0xf3,
-     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+static const unsigned char closeBits[] =
+{
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf3, 0xcf, 0xf9,
+    0x9f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x9f, 0xfc, 0xcf, 0xf9, 0xe7, 0xf3,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+};
 #endif
 
-static const unsigned char left_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0x3f, 0xfe,
-   0x1f, 0xfe, 0x0f, 0xfe, 0x1f, 0xfe, 0x3f, 0xfe, 0x7f, 0xfe, 0xff, 0xfe,
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+static const unsigned char leftBits[] =
+{
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfe, 0x3f, 0xfe,
+    0x1f, 0xfe, 0x0f, 0xfe, 0x1f, 0xfe, 0x3f, 0xfe, 0x7f, 0xfe, 0xff, 0xfe,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+};
 
-static const unsigned char right_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x9f, 0xff, 0x1f, 0xff,
-   0x1f, 0xfe, 0x1f, 0xfc, 0x1f, 0xfe, 0x1f, 0xff, 0x9f, 0xff, 0xdf, 0xff,
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+static const unsigned char rightBits[] =
+{
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x9f, 0xff, 0x1f, 0xff,
+    0x1f, 0xfe, 0x1f, 0xfc, 0x1f, 0xfe, 0x1f, 0xff, 0x9f, 0xff, 0xdf, 0xff,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+};
 
-static const unsigned char list_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-   0x0f, 0xf8, 0xff, 0xff, 0x0f, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xff,
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+static const unsigned char listBits[] =
+{
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    0x0f, 0xf8, 0xff, 0xff, 0x0f, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xff,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+};
 
 
 
@@ -184,48 +198,48 @@
 
 wxAuiDefaultTabArt::wxAuiDefaultTabArt()
 {
-    m_normal_font = *wxNORMAL_FONT;
-    m_selected_font = *wxNORMAL_FONT;
-    m_selected_font.SetWeight(wxBOLD);
-    m_measuring_font = m_selected_font;
+    m_normalFont = *wxNORMAL_FONT;
+    m_selectedFont = *wxNORMAL_FONT;
+    m_selectedFont.SetWeight ( wxBOLD );
+    m_measuringFont = m_selectedFont;
 
-    m_fixed_tab_width = 100;
-    m_tab_ctrl_height = 0;
+    m_fixedTabWidth = 100;
+    m_tabCtrlHeight = 0;
 
 #if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor base_colour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
+    wxColor baseColour = wxColour ( wxMacCreateCGColorFromHITheme ( kThemeBrushToolbarBackground ) );
 #else
-    wxColor base_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
+    wxColor baseColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_3DFACE );
 #endif
 
-    // the base_colour is too pale to use as our base colour,
+    // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
-    if ((255-base_colour.Red()) +
-        (255-base_colour.Green()) +
-        (255-base_colour.Blue()) < 60)
+    if ( ( 255 - baseColour.Red() ) +
+            ( 255 - baseColour.Green() ) +
+            ( 255 - baseColour.Blue() ) < 60 )
     {
-        base_colour = base_colour.ChangeLightness(92);
+        baseColour = baseColour.ChangeLightness ( 92 );
     }
 
-    m_active_colour = base_colour;
-    m_base_colour = base_colour;
-    wxColor border_colour = base_colour.ChangeLightness(75);
+    m_activeColour = baseColour;
+    m_baseColour = baseColour;
+    wxColor borderColour = baseColour.ChangeLightness ( 75 );
 
-    m_border_pen = wxPen(border_colour);
-    m_base_colour_pen = wxPen(m_base_colour);
-    m_base_colour_brush = wxBrush(m_base_colour);
+    m_borderPen = wxPen ( borderColour );
+    m_baseColourPen = wxPen ( m_baseColour );
+    m_baseColourBrush = wxBrush ( m_baseColour );
 
-    m_active_close_bmp = wxAuiBitmapFromBits(close_bits, 16, 16, *wxBLACK);
-    m_disabled_close_bmp = wxAuiBitmapFromBits(close_bits, 16, 16, wxColour(128,128,128));
+    m_activeCloseBmp = wxAuiBitmapFromBits ( closeBits, 16, 16, *wxBLACK );
+    m_disabledCloseBmp = wxAuiBitmapFromBits ( closeBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_left_bmp = wxAuiBitmapFromBits(left_bits, 16, 16, *wxBLACK);
-    m_disabled_left_bmp = wxAuiBitmapFromBits(left_bits, 16, 16, wxColour(128,128,128));
+    m_activeLeftBmp = wxAuiBitmapFromBits ( leftBits, 16, 16, *wxBLACK );
+    m_disabledLeftBmp = wxAuiBitmapFromBits ( leftBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_right_bmp = wxAuiBitmapFromBits(right_bits, 16, 16, *wxBLACK);
-    m_disabled_right_bmp = wxAuiBitmapFromBits(right_bits, 16, 16, wxColour(128,128,128));
+    m_activeRightBmp = wxAuiBitmapFromBits ( rightBits, 16, 16, *wxBLACK );
+    m_disabledRightBmp = wxAuiBitmapFromBits ( rightBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_windowlist_bmp = wxAuiBitmapFromBits(list_bits, 16, 16, *wxBLACK);
-    m_disabled_windowlist_bmp = wxAuiBitmapFromBits(list_bits, 16, 16, wxColour(128,128,128));
+    m_activeWindowListBmp = wxAuiBitmapFromBits ( listBits, 16, 16, *wxBLACK );
+    m_disabledWindowListBmp = wxAuiBitmapFromBits ( listBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
     m_flags = 0;
 }
@@ -234,134 +248,154 @@
 {
 }
 
-wxAuiTabArt* wxAuiDefaultTabArt::Clone()
+wxAuiTabArt * wxAuiDefaultTabArt::Clone()
 {
-    return new wxAuiDefaultTabArt(*this);
+    return new wxAuiDefaultTabArt ( *this );
 }
 
-void wxAuiDefaultTabArt::SetFlags(unsigned int flags)
+void wxAuiDefaultTabArt::SetFlags ( unsigned int flags )
 {
     m_flags = flags;
 }
 
-void wxAuiDefaultTabArt::SetSizingInfo(const wxSize& tab_ctrl_size,
-                                       size_t tab_count)
+void wxAuiDefaultTabArt::SetSizingInfo ( const wxSize & tabCtrlSize,
+                                         size_t tabCount )
 {
-    m_fixed_tab_width = 100;
+    m_fixedTabWidth = 100;
 
-    int tot_width = (int)tab_ctrl_size.x - GetIndentSize() - 4;
+    int totWidth = ( int ) tabCtrlSize.x - GetIndentSize() - 4;
 
-    if (m_flags & wxAUI_NB_CLOSE_BUTTON)
-        tot_width -= m_active_close_bmp.GetWidth();
-    if (m_flags & wxAUI_NB_WINDOWLIST_BUTTON)
-        tot_width -= m_active_windowlist_bmp.GetWidth();
+    if ( m_flags & wxAUI_NB_CLOSE_BUTTON )
+    {
+        totWidth -= m_activeCloseBmp.GetWidth();
+    }
 
-    if (tab_count > 0)
+    if ( m_flags & wxAUI_NB_WINDOWLIST_BUTTON )
     {
-        m_fixed_tab_width = tot_width/(int)tab_count;
+        totWidth -= m_activeWindowListBmp.GetWidth();
     }
 
+    if ( tabCount > 0 )
+    {
+        m_fixedTabWidth = totWidth / ( int ) tabCount;
+    }
 
-    if (m_fixed_tab_width < 100)
-        m_fixed_tab_width = 100;
 
-    if (m_fixed_tab_width > tot_width/2)
-        m_fixed_tab_width = tot_width/2;
+    if ( m_fixedTabWidth < 100 )
+    {
+        m_fixedTabWidth = 100;
+    }
 
-    if (m_fixed_tab_width > 220)
-        m_fixed_tab_width = 220;
+    if ( m_fixedTabWidth > totWidth / 2 )
+    {
+        m_fixedTabWidth = totWidth / 2;
+    }
 
-    m_tab_ctrl_height = tab_ctrl_size.y;
+    if ( m_fixedTabWidth > 220 )
+    {
+        m_fixedTabWidth = 220;
+    }
+
+    m_tabCtrlHeight = tabCtrlSize.y;
 }
 
 
-void wxAuiDefaultTabArt::DrawBackground(wxDC& dc,
-                                        wxWindow* WXUNUSED(wnd),
-                                        const wxRect& rect)
+void wxAuiDefaultTabArt::DrawBackground ( wxDC & dc,
+                                          wxWindow * WXUNUSED ( wnd ),
+                                          const wxRect & rect )
 {
     // draw background
 
-    wxColor top_color       = m_base_colour.ChangeLightness(90);
-    wxColor bottom_color   = m_base_colour.ChangeLightness(170);
+    wxColor topColor       = m_baseColour.ChangeLightness ( 90 );
+    wxColor bottomColor   = m_baseColour.ChangeLightness ( 170 );
     wxRect r;
 
-   if (m_flags &wxAUI_NB_BOTTOM)
-       r = wxRect(rect.x, rect.y, rect.width+2, rect.height);
-   // TODO: else if (m_flags &wxAUI_NB_LEFT) {}
-   // TODO: else if (m_flags &wxAUI_NB_RIGHT) {}
-   else //for wxAUI_NB_TOP
-       r = wxRect(rect.x, rect.y, rect.width+2, rect.height-3);
+    if ( m_flags & wxAUI_NB_BOTTOM )
+    {
+        r = wxRect ( rect.x, rect.y, rect.width + 2, rect.height );
+    }
 
-    dc.GradientFillLinear(r, top_color, bottom_color, wxSOUTH);
+    // TODO: else if (mFlags &wxAUI_NB_LEFT) {}
+    // TODO: else if (mFlags &wxAUI_NB_RIGHT) {}
+    else //for wxAUI_NB_TOP
+    {
+        r = wxRect ( rect.x, rect.y, rect.width + 2, rect.height - 3 );
+    }
 
+    dc.GradientFillLinear ( r, topColor, bottomColor, wxSOUTH );
 
-   // draw base lines
 
-   dc.SetPen(m_border_pen);
-   int y = rect.GetHeight();
-   int w = rect.GetWidth();
+    // draw base lines
 
-   if (m_flags &wxAUI_NB_BOTTOM)
-   {
-       dc.SetBrush(wxBrush(bottom_color));
-       dc.DrawRectangle(-1, 0, w+2, 4);
-   }
-   // TODO: else if (m_flags &wxAUI_NB_LEFT) {}
-   // TODO: else if (m_flags &wxAUI_NB_RIGHT) {}
-   else //for wxAUI_NB_TOP
-   {
-       dc.SetBrush(m_base_colour_brush);
-       dc.DrawRectangle(-1, y-4, w+2, 4);
-   }
+    dc.SetPen ( m_borderPen );
+    int y = rect.GetHeight();
+    int w = rect.GetWidth();
+
+    if ( m_flags & wxAUI_NB_BOTTOM )
+    {
+        dc.SetBrush ( wxBrush ( bottomColor ) );
+        dc.DrawRectangle ( -1, 0, w + 2, 4 );
+    }
+
+    // TODO: else if (mFlags &wxAUI_NB_LEFT) {}
+    // TODO: else if (mFlags &wxAUI_NB_RIGHT) {}
+    else //for wxAUI_NB_TOP
+    {
+        dc.SetBrush ( m_baseColourBrush );
+        dc.DrawRectangle ( -1, y - 4, w + 2, 4 );
+    }
 }
 
 
 // DrawTab() draws an individual tab.
 //
 // dc       - output dc
-// in_rect  - rectangle the tab should be confined to
+// inRect  - rectangle the tab should be confined to
 // caption  - tab's caption
 // active   - whether or not the tab is active
-// out_rect - actual output rectangle
-// x_extent - the advance x; where the next tab should start
+// outRect - actual output rectangle
+// xExtent - the advance x; where the next tab should start
 
-void wxAuiDefaultTabArt::DrawTab(wxDC& dc,
-                                 wxWindow* wnd,
-                                 const wxAuiNotebookPage& page,
-                                 const wxRect& in_rect,
-                                 int close_button_state,
-                                 wxRect* out_tab_rect,
-                                 wxRect* out_button_rect,
-                                 int* x_extent)
+void wxAuiDefaultTabArt::DrawTab ( wxDC & dc,
+                                   wxWindow * wnd,
+                                   const wxAuiNotebookPage & page,
+                                   const wxRect & inRect,
+                                   int closeButtonState,
+                                   wxRect * outTabRect,
+                                   wxRect * outButtonRect,
+                                   int * xExtent )
 {
-    wxCoord normal_textx, normal_texty;
-    wxCoord selected_textx, selected_texty;
+    wxCoord normalTextx, normalTexty;
+    wxCoord selectedTextx, selectedTexty;
     wxCoord texty;
 
     // if the caption is empty, measure some temporary text
     wxString caption = page.caption;
-    if (caption.empty())
-        caption = wxT("Xj");
 
-    dc.SetFont(m_selected_font);
-    dc.GetTextExtent(caption, &selected_textx, &selected_texty);
+    if ( caption.empty() )
+    {
+        caption = wxT ( "Xj" );
+    }
 
-    dc.SetFont(m_normal_font);
-    dc.GetTextExtent(caption, &normal_textx, &normal_texty);
+    dc.SetFont ( m_selectedFont );
+    dc.GetTextExtent ( caption, &selectedTextx, &selectedTexty );
 
+    dc.SetFont ( m_normalFont );
+    dc.GetTextExtent ( caption, &normalTextx, &normalTexty );
+
     // figure out the size of the tab
-    wxSize tab_size = GetTabSize(dc,
-                                 wnd,
-                                 page.caption,
-                                 page.bitmap,
-                                 page.active,
-                                 close_button_state,
-                                 x_extent);
+    wxSize tabSize = GetTabSize ( dc,
+                                  wnd,
+                                  page.caption,
+                                  page.bitmap,
+                                  page.active,
+                                  closeButtonState,
+                                  xExtent );
 
-    wxCoord tab_height = m_tab_ctrl_height - 3;
-    wxCoord tab_width = tab_size.x;
-    wxCoord tab_x = in_rect.x;
-    wxCoord tab_y = in_rect.y + in_rect.height - tab_height;
+    wxCoord tabHeight = m_tabCtrlHeight - 3;
+    wxCoord tabWidth = tabSize.x;
+    wxCoord tabX = inRect.x;
+    wxCoord tabY = inRect.y + inRect.height - tabHeight;
 
 
     caption = page.caption;
@@ -369,108 +403,116 @@
 
     // select pen, brush and font for the tab to be drawn
 
-    if (page.active)
+    if ( page.active )
     {
-        dc.SetFont(m_selected_font);
-        texty = selected_texty;
+        dc.SetFont ( m_selectedFont );
+        texty = selectedTexty;
     }
+
     else
     {
-        dc.SetFont(m_normal_font);
-        texty = normal_texty;
+        dc.SetFont ( m_normalFont );
+        texty = normalTexty;
     }
 
 
     // create points that will make the tab outline
 
-    int clip_width = tab_width;
-    if (tab_x + clip_width > in_rect.x + in_rect.width)
-        clip_width = (in_rect.x + in_rect.width) - tab_x;
+    int clipWidth = tabWidth;
 
-/*
-    wxPoint clip_points[6];
-    clip_points[0] = wxPoint(tab_x,              tab_y+tab_height-3);
-    clip_points[1] = wxPoint(tab_x,              tab_y+2);
-    clip_points[2] = wxPoint(tab_x+2,            tab_y);
-    clip_points[3] = wxPoint(tab_x+clip_width-1, tab_y);
-    clip_points[4] = wxPoint(tab_x+clip_width+1, tab_y+2);
-    clip_points[5] = wxPoint(tab_x+clip_width+1, tab_y+tab_height-3);
+    if ( tabX + clipWidth > inRect.x + inRect.width )
+    {
+        clipWidth = ( inRect.x + inRect.width ) - tabX;
+    }
 
-    // FIXME: these ports don't provide wxRegion ctor from array of points
-#if !defined(__WXDFB__) && !defined(__WXCOCOA__)
-    // set the clipping region for the tab --
-    wxRegion clipping_region(WXSIZEOF(clip_points), clip_points);
-    dc.SetClippingRegion(clipping_region);
-#endif // !wxDFB && !wxCocoa
-*/
+    /*
+        wxPoint clipPoints[6];
+        clipPoints[0] = wxPoint(tabX,              tabY+tabHeight-3);
+        clipPoints[1] = wxPoint(tabX,              tabY+2);
+        clipPoints[2] = wxPoint(tabX+2,            tabY);
+        clipPoints[3] = wxPoint(tabX+clipWidth-1, tabY);
+        clipPoints[4] = wxPoint(tabX+clipWidth+1, tabY+2);
+        clipPoints[5] = wxPoint(tabX+clipWidth+1, tabY+tabHeight-3);
+
+        // FIXME: these ports don't provide wxRegion ctor from array of points
+    #if !defined(__WXDFB__) && !defined(__WXCOCOA__)
+        // set the clipping region for the tab --
+        wxRegion clippingRegion(WXSIZEOF(clipPoints), clipPoints);
+        dc.SetClippingRegion(clippingRegion);
+    #endif // !wxDFB && !wxCocoa
+    */
     // since the above code above doesn't play well with WXDFB or WXCOCOA,
     // we'll just use a rectangle for the clipping region for now --
-    dc.SetClippingRegion(tab_x, tab_y, clip_width+1, tab_height-3);
+    dc.SetClippingRegion ( tabX, tabY, clipWidth + 1, tabHeight - 3 );
 
 
-    wxPoint border_points[6];
-    if (m_flags &wxAUI_NB_BOTTOM)
+    wxPoint borderPoints[6];
+
+    if ( m_flags & wxAUI_NB_BOTTOM )
     {
-        border_points[0] = wxPoint(tab_x,             tab_y);
-        border_points[1] = wxPoint(tab_x,             tab_y+tab_height-6);
-        border_points[2] = wxPoint(tab_x+2,           tab_y+tab_height-4);
-        border_points[3] = wxPoint(tab_x+tab_width-2, tab_y+tab_height-4);
-        border_points[4] = wxPoint(tab_x+tab_width,   tab_y+tab_height-6);
-        border_points[5] = wxPoint(tab_x+tab_width,   tab_y);
+        borderPoints[0] = wxPoint ( tabX,             tabY );
+        borderPoints[1] = wxPoint ( tabX,             tabY + tabHeight - 6 );
+        borderPoints[2] = wxPoint ( tabX + 2,           tabY + tabHeight - 4 );
+        borderPoints[3] = wxPoint ( tabX + tabWidth - 2, tabY + tabHeight - 4 );
+        borderPoints[4] = wxPoint ( tabX + tabWidth,   tabY + tabHeight - 6 );
+        borderPoints[5] = wxPoint ( tabX + tabWidth,   tabY );
     }
-    else //if (m_flags & wxAUI_NB_TOP) {}
+
+    else //if (mFlags & wxAUI_NB_TOP) {}
     {
-        border_points[0] = wxPoint(tab_x,             tab_y+tab_height-4);
-        border_points[1] = wxPoint(tab_x,             tab_y+2);
-        border_points[2] = wxPoint(tab_x+2,           tab_y);
-        border_points[3] = wxPoint(tab_x+tab_width-2, tab_y);
-        border_points[4] = wxPoint(tab_x+tab_width,   tab_y+2);
-        border_points[5] = wxPoint(tab_x+tab_width,   tab_y+tab_height-4);
+        borderPoints[0] = wxPoint ( tabX,             tabY + tabHeight - 4 );
+        borderPoints[1] = wxPoint ( tabX,             tabY + 2 );
+        borderPoints[2] = wxPoint ( tabX + 2,           tabY );
+        borderPoints[3] = wxPoint ( tabX + tabWidth - 2, tabY );
+        borderPoints[4] = wxPoint ( tabX + tabWidth,   tabY + 2 );
+        borderPoints[5] = wxPoint ( tabX + tabWidth,   tabY + tabHeight - 4 );
     }
-    // TODO: else if (m_flags &wxAUI_NB_LEFT) {}
-    // TODO: else if (m_flags &wxAUI_NB_RIGHT) {}
 
-    int drawn_tab_yoff = border_points[1].y;
-    int drawn_tab_height = border_points[0].y - border_points[1].y;
+    // TODO: else if (mFlags &wxAUI_NB_LEFT) {}
+    // TODO: else if (mFlags &wxAUI_NB_RIGHT) {}
 
+    int drawnTabYoff = borderPoints[1].y;
+    int drawnTabHeight = borderPoints[0].y - borderPoints[1].y;
 
-    if (page.active)
+
+    if ( page.active )
     {
         // draw active tab
 
         // draw base background color
-        wxRect r(tab_x, tab_y, tab_width, tab_height);
-        dc.SetPen(wxPen(m_active_colour));
-        dc.SetBrush(wxBrush(m_active_colour));
-        dc.DrawRectangle(r.x+1, r.y+1, r.width-1, r.height-4);
+        wxRect r ( tabX, tabY, tabWidth, tabHeight );
+        dc.SetPen ( wxPen ( m_activeColour ) );
+        dc.SetBrush ( wxBrush ( m_activeColour ) );
+        dc.DrawRectangle ( r.x + 1, r.y + 1, r.width - 1, r.height - 4 );
 
         // this white helps fill out the gradient at the top of the tab
-        dc.SetPen(*wxWHITE_PEN);
-        dc.SetBrush(*wxWHITE_BRUSH);
-        dc.DrawRectangle(r.x+2, r.y+1, r.width-3, r.height-4);
+        dc.SetPen ( *wxWHITE_PEN );
+        dc.SetBrush ( *wxWHITE_BRUSH );
+        dc.DrawRectangle ( r.x + 2, r.y + 1, r.width - 3, r.height - 4 );
 
         // these two points help the rounded corners appear more antialiased
-        dc.SetPen(wxPen(m_active_colour));
-        dc.DrawPoint(r.x+2, r.y+1);
-        dc.DrawPoint(r.x+r.width-2, r.y+1);
+        dc.SetPen ( wxPen ( m_activeColour ) );
+        dc.DrawPoint ( r.x + 2, r.y + 1 );
+        dc.DrawPoint ( r.x + r.width - 2, r.y + 1 );
 
         // set rectangle down a bit for gradient drawing
-        r.SetHeight(r.GetHeight()/2);
+        r.SetHeight ( r.GetHeight() / 2 );
         r.x += 2;
         r.width -= 3;
         r.y += r.height;
         r.y -= 2;
 
         // draw gradient background
-        wxColor top_color = *wxWHITE;
-        wxColor bottom_color = m_active_colour;
-        dc.GradientFillLinear(r, bottom_color, top_color, wxNORTH);
+        wxColor topColor = *wxWHITE;
+        wxColor bottomColor = m_activeColour;
+        dc.GradientFillLinear ( r, bottomColor, topColor, wxNORTH );
     }
+
     else
     {
         // draw inactive tab
 
-        wxRect r(tab_x, tab_y+1, tab_width, tab_height-3);
+        wxRect r ( tabX, tabY + 1, tabWidth, tabHeight - 3 );
 
         // start the gradent up a bit and leave the inside border inset
         // by a pixel for a 3D look.  Only the top half of the inactive
@@ -482,130 +524,150 @@
         r.height--;
 
         // -- draw top gradient fill for glossy look
-        wxColor top_color = m_base_colour;
-        wxColor bottom_color = top_color.ChangeLightness(160);
-        dc.GradientFillLinear(r, bottom_color, top_color, wxNORTH);
+        wxColor topColor = m_baseColour;
+        wxColor bottomColor = topColor.ChangeLightness ( 160 );
+        dc.GradientFillLinear ( r, bottomColor, topColor, wxNORTH );
 
         r.y += r.height;
         r.y--;
 
         // -- draw bottom fill for glossy look
-        top_color = m_base_colour;
-        bottom_color = m_base_colour;
-        dc.GradientFillLinear(r, top_color, bottom_color, wxSOUTH);
+        topColor = m_baseColour;
+        bottomColor = m_baseColour;
+        dc.GradientFillLinear ( r, topColor, bottomColor, wxSOUTH );
     }
 
     // draw tab outline
-    dc.SetPen(m_border_pen);
-    dc.SetBrush(*wxTRANSPARENT_BRUSH);
-    dc.DrawPolygon(WXSIZEOF(border_points), border_points);
+    dc.SetPen ( m_borderPen );
+    dc.SetBrush ( *wxTRANSPARENT_BRUSH );
+    dc.DrawPolygon ( WXSIZEOF ( borderPoints ), borderPoints );
 
     // there are two horizontal grey lines at the bottom of the tab control,
     // this gets rid of the top one of those lines in the tab control
-    if (page.active)
+    if ( page.active )
     {
-        if (m_flags &wxAUI_NB_BOTTOM)
-            dc.SetPen(wxPen(m_base_colour.ChangeLightness(170)));
-        // TODO: else if (m_flags &wxAUI_NB_LEFT) {}
-        // TODO: else if (m_flags &wxAUI_NB_RIGHT) {}
+        if ( m_flags & wxAUI_NB_BOTTOM )
+        {
+            dc.SetPen ( wxPen ( m_baseColour.ChangeLightness ( 170 ) ) );
+        }
+
+        // TODO: else if (mFlags &wxAUI_NB_LEFT) {}
+        // TODO: else if (mFlags &wxAUI_NB_RIGHT) {}
         else //for wxAUI_NB_TOP
-            dc.SetPen(m_base_colour_pen);
-        dc.DrawLine(border_points[0].x+1,
-                    border_points[0].y,
-                    border_points[5].x,
-                    border_points[5].y);
+        {
+            dc.SetPen ( m_baseColourPen );
+        }
+
+        dc.DrawLine ( borderPoints[0].x + 1,
+                      borderPoints[0].y,
+                      borderPoints[5].x,
+                      borderPoints[5].y );
     }
 
 
-    int text_offset = tab_x + 8;
-    int close_button_width = 0;
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
+    int textOffset = tabX + 8;
+    int closeButtonWidth = 0;
+
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
     {
-        close_button_width = m_active_close_bmp.GetWidth();
+        closeButtonWidth = m_activeCloseBmp.GetWidth();
     }
 
-    int bitmap_offset = 0;
-    if (page.bitmap.IsOk())
+    int bitmapOffset = 0;
+
+    if ( page.bitmap.IsOk() )
     {
-        bitmap_offset = tab_x + 8;
+        bitmapOffset = tabX + 8;
 
         // draw bitmap
-        dc.DrawBitmap(page.bitmap,
-                      bitmap_offset,
-                      drawn_tab_yoff + (drawn_tab_height/2) - (page.bitmap.GetHeight()/2),
-                      true);
+        dc.DrawBitmap ( page.bitmap,
+                        bitmapOffset,
+                        drawnTabYoff + ( drawnTabHeight / 2 ) - ( page.bitmap.GetHeight() / 2 ),
+                        true );
 
-        text_offset = bitmap_offset + page.bitmap.GetWidth();
-        text_offset += 3; // bitmap padding
+        textOffset = bitmapOffset + page.bitmap.GetWidth();
+        textOffset += 3; // bitmap padding
 
     }
+
     else
     {
-        text_offset = tab_x + 8;
+        textOffset = tabX + 8;
     }
 
 
-    wxString draw_text = wxAuiChopText(dc,
-                          caption,
-                          tab_width - (text_offset-tab_x) - close_button_width);
+    wxString drawText = wxAuiChopText ( dc,
+                                        caption,
+                                        tabWidth - ( textOffset - tabX ) - closeButtonWidth );
 
     // draw tab text
-    dc.DrawText(draw_text,
-                text_offset,
-                drawn_tab_yoff + (drawn_tab_height)/2 - (texty/2) - 1);
+    dc.DrawText ( drawText,
+                  textOffset,
+                  drawnTabYoff + ( drawnTabHeight ) / 2 - ( texty / 2 ) - 1 );
 
     // draw focus rectangle
-    if (page.active && (wnd->FindFocus() == wnd))
+    if ( page.active && ( wnd->FindFocus() == wnd ) )
     {
-        wxRect focusRectText(text_offset, (drawn_tab_yoff + (drawn_tab_height)/2 - (texty/2) - 1),
-            selected_textx, selected_texty);
+        wxRect focusRectText ( textOffset, ( drawnTabYoff + ( drawnTabHeight ) / 2 - ( texty / 2 ) - 1 ),
+                               selectedTextx, selectedTexty );
 
         wxRect focusRect;
         wxRect focusRectBitmap;
 
-        if (page.bitmap.IsOk())
-            focusRectBitmap = wxRect(bitmap_offset, drawn_tab_yoff + (drawn_tab_height/2) - (page.bitmap.GetHeight()/2),
-                                            page.bitmap.GetWidth(), page.bitmap.GetHeight());
+        if ( page.bitmap.IsOk() )
+            focusRectBitmap = wxRect ( bitmapOffset, drawnTabYoff + ( drawnTabHeight / 2 ) - ( page.bitmap.GetHeight() / 2 ),
+                                       page.bitmap.GetWidth(), page.bitmap.GetHeight() );
 
-        if (page.bitmap.IsOk() && draw_text.IsEmpty())
+        if ( page.bitmap.IsOk() && drawText.IsEmpty() )
+        {
             focusRect = focusRectBitmap;
-        else if (!page.bitmap.IsOk() && !draw_text.IsEmpty())
+        }
+
+        else if ( !page.bitmap.IsOk() && !drawText.IsEmpty() )
+        {
             focusRect = focusRectText;
-        else if (page.bitmap.IsOk() && !draw_text.IsEmpty())
-            focusRect = focusRectText.Union(focusRectBitmap);
+        }
 
-        focusRect.Inflate(2, 2);
+        else if ( page.bitmap.IsOk() && !drawText.IsEmpty() )
+        {
+            focusRect = focusRectText.Union ( focusRectBitmap );
+        }
 
-        wxRendererNative::Get().DrawFocusRect(wnd, dc, focusRect, 0);
+        focusRect.Inflate ( 2, 2 );
+
+        wxRendererNative::Get().DrawFocusRect ( wnd, dc, focusRect, 0 );
     }
 
     // draw close button if necessary
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
     {
-        wxBitmap bmp = m_disabled_close_bmp;
+        wxBitmap bmp = m_disabledCloseBmp;
 
-        if (close_button_state == wxAUI_BUTTON_STATE_HOVER ||
-            close_button_state == wxAUI_BUTTON_STATE_PRESSED)
+        if ( closeButtonState == wxAUI_BUTTON_STATE_HOVER ||
+                closeButtonState == wxAUI_BUTTON_STATE_PRESSED )
         {
-            bmp = m_active_close_bmp;
+            bmp = m_activeCloseBmp;
         }
 
-        int offsetY = tab_y-1;
-        if (m_flags & wxAUI_NB_BOTTOM)
+        int offsetY = tabY - 1;
+
+        if ( m_flags & wxAUI_NB_BOTTOM )
+        {
             offsetY = 1;
+        }
 
-        wxRect rect(tab_x + tab_width - close_button_width - 1,
-                    offsetY + (tab_height/2) - (bmp.GetHeight()/2),
-                    close_button_width,
-                    tab_height);
+        wxRect rect ( tabX + tabWidth - closeButtonWidth - 1,
+                      offsetY + ( tabHeight / 2 ) - ( bmp.GetHeight() / 2 ),
+                      closeButtonWidth,
+                      tabHeight );
 
-        IndentPressedBitmap(&rect, close_button_state);
-        dc.DrawBitmap(bmp, rect.x, rect.y, true);
+        IndentPressedBitmap ( &rect, closeButtonState );
+        dc.DrawBitmap ( bmp, rect.x, rect.y, true );
 
-        *out_button_rect = rect;
+        *outButtonRect = rect;
     }
 
-    *out_tab_rect = wxRect(tab_x, tab_y, tab_width, tab_height);
+    *outTabRect = wxRect ( tabX, tabY, tabWidth, tabHeight );
 
     dc.DestroyClippingRegion();
 }
@@ -615,272 +677,321 @@
     return 5;
 }
 
-wxSize wxAuiDefaultTabArt::GetTabSize(wxDC& dc,
-                                      wxWindow* WXUNUSED(wnd),
-                                      const wxString& caption,
-                                      const wxBitmap& bitmap,
-                                      bool WXUNUSED(active),
-                                      int close_button_state,
-                                      int* x_extent)
+wxSize wxAuiDefaultTabArt::GetTabSize ( wxDC & dc,
+                                        wxWindow * WXUNUSED ( wnd ),
+                                        const wxString & caption,
+                                        const wxBitmap & bitmap,
+                                        bool WXUNUSED ( active ),
+                                        int closeButtonState,
+                                        int * xExtent )
 {
-    wxCoord measured_textx, measured_texty, tmp;
+    wxCoord measuredTextx, measuredTexty, tmp;
 
-    dc.SetFont(m_measuring_font);
-    dc.GetTextExtent(caption, &measured_textx, &measured_texty);
+    dc.SetFont ( m_measuringFont );
+    dc.GetTextExtent ( caption, &measuredTextx, &measuredTexty );
 
-    dc.GetTextExtent(wxT("ABCDEFXj"), &tmp, &measured_texty);
+    dc.GetTextExtent ( wxT ( "ABCDEFXj" ), &tmp, &measuredTexty );
 
     // add padding around the text
-    wxCoord tab_width = measured_textx;
-    wxCoord tab_height = measured_texty;
+    wxCoord tabWidth = measuredTextx;
+    wxCoord tabHeight = measuredTexty;
 
     // if the close button is showing, add space for it
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
-        tab_width += m_active_close_bmp.GetWidth() + 3;
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
+    {
+        tabWidth += m_activeCloseBmp.GetWidth() + 3;
+    }
 
     // if there's a bitmap, add space for it
-    if (bitmap.IsOk())
+    if ( bitmap.IsOk() )
     {
-        tab_width += bitmap.GetWidth();
-        tab_width += 3; // right side bitmap padding
-        tab_height = wxMax(tab_height, bitmap.GetHeight());
+        tabWidth += bitmap.GetWidth();
+        tabWidth += 3; // right side bitmap padding
+        tabHeight = wxMax ( tabHeight, bitmap.GetHeight() );
     }
 
     // add padding
-    tab_width += 16;
-    tab_height += 10;
+    tabWidth += 16;
+    tabHeight += 10;
 
-    if (m_flags & wxAUI_NB_TAB_FIXED_WIDTH)
+    if ( m_flags & wxAUI_NB_TAB_FIXED_WIDTH )
     {
-        tab_width = m_fixed_tab_width;
+        tabWidth = m_fixedTabWidth;
     }
 
-    *x_extent = tab_width;
+    *xExtent = tabWidth;
 
-    return wxSize(tab_width, tab_height);
+    return wxSize ( tabWidth, tabHeight );
 }
 
 
-void wxAuiDefaultTabArt::DrawButton(wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxRect& in_rect,
-                                    int bitmap_id,
-                                    int button_state,
-                                    int orientation,
-                                    wxRect* out_rect)
+void wxAuiDefaultTabArt::DrawButton ( wxDC & dc,
+                                      wxWindow * WXUNUSED ( wnd ),
+                                      const wxRect & inRect,
+                                      int bitmapId,
+                                      int buttonState,
+                                      int orientation,
+                                      wxRect * outRect )
 {
     wxBitmap bmp;
     wxRect rect;
 
-    switch (bitmap_id)
+    switch ( bitmapId )
     {
         case wxAUI_BUTTON_CLOSE:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_close_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledCloseBmp;
+            }
+
             else
-                bmp = m_active_close_bmp;
+            {
+                bmp = m_activeCloseBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_LEFT:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_left_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledLeftBmp;
+            }
+
             else
-                bmp = m_active_left_bmp;
+            {
+                bmp = m_activeLeftBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_RIGHT:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_right_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledRightBmp;
+            }
+
             else
-                bmp = m_active_right_bmp;
+            {
+                bmp = m_activeRightBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_WINDOWLIST:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_windowlist_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledWindowListBmp;
+            }
+
             else
-                bmp = m_active_windowlist_bmp;
+            {
+                bmp = m_activeWindowListBmp;
+            }
+
             break;
     }
 
 
-    if (!bmp.IsOk())
+    if ( !bmp.IsOk() )
+    {
         return;
+    }
 
-    rect = in_rect;
+    rect = inRect;
 
-    if (orientation == wxLEFT)
+    if ( orientation == wxLEFT )
     {
-        rect.SetX(in_rect.x);
-        rect.SetY(((in_rect.y + in_rect.height)/2) - (bmp.GetHeight()/2));
-        rect.SetWidth(bmp.GetWidth());
-        rect.SetHeight(bmp.GetHeight());
+        rect.SetX ( inRect.x );
+        rect.SetY ( ( ( inRect.y + inRect.height ) / 2 ) - ( bmp.GetHeight() / 2 ) );
+        rect.SetWidth ( bmp.GetWidth() );
+        rect.SetHeight ( bmp.GetHeight() );
     }
+
     else
     {
-        rect = wxRect(in_rect.x + in_rect.width - bmp.GetWidth(),
-                      ((in_rect.y + in_rect.height)/2) - (bmp.GetHeight()/2),
-                      bmp.GetWidth(), bmp.GetHeight());
+        rect = wxRect ( inRect.x + inRect.width - bmp.GetWidth(),
+                        ( ( inRect.y + inRect.height ) / 2 ) - ( bmp.GetHeight() / 2 ),
+                        bmp.GetWidth(), bmp.GetHeight() );
     }
 
-    IndentPressedBitmap(&rect, button_state);
-    dc.DrawBitmap(bmp, rect.x, rect.y, true);
+    IndentPressedBitmap ( &rect, buttonState );
+    dc.DrawBitmap ( bmp, rect.x, rect.y, true );
 
-    *out_rect = rect;
+    *outRect = rect;
 }
 
-int wxAuiDefaultTabArt::ShowDropDown(wxWindow* wnd,
-                                     const wxAuiNotebookPageArray& pages,
-                                     int /*active_idx*/)
+int wxAuiDefaultTabArt::ShowDropDown ( wxWindow * wnd,
+                                       const wxAuiNotebookPageArray & pages,
+                                       int /*activeIdx*/ )
 {
     wxMenu menuPopup;
 
     size_t i, count = pages.GetCount();
-    for (i = 0; i < count; ++i)
+
+    for ( i = 0; i < count; ++i )
     {
-        const wxAuiNotebookPage& page = pages.Item(i);
+        const wxAuiNotebookPage & page = pages.Item ( i );
         wxString caption = page.caption;
 
         // if there is no caption, make it a space.  This will prevent
         // an assert in the menu code.
-        if (caption.IsEmpty())
-            caption = wxT(" ");
+        if ( caption.IsEmpty() )
+        {
+            caption = wxT ( " " );
+        }
 
-        wxMenuItem* item = new wxMenuItem(NULL, 1000+i, caption);
-        if (page.bitmap.IsOk())
-            item->SetBitmap(page.bitmap);
-        menuPopup.Append(item);
+        wxMenuItem * item = new wxMenuItem ( NULL, 1000 + i, caption );
+
+        if ( page.bitmap.IsOk() )
+        {
+            item->SetBitmap ( page.bitmap );
+        }
+
+        menuPopup.Append ( item );
     }
 
     // find out where to put the popup menu of window items
     wxPoint pt = ::wxGetMousePosition();
-    pt = wnd->ScreenToClient(pt);
+    pt = wnd->ScreenToClient ( pt );
 
     // find out the screen coordinate at the bottom of the tab ctrl
-    wxRect cli_rect = wnd->GetClientRect();
-    pt.y = cli_rect.y + cli_rect.height;
+    wxRect cliRect = wnd->GetClientRect();
+    pt.y = cliRect.y + cliRect.height;
 
-    wxAuiCommandCapture* cc = new wxAuiCommandCapture;
-    wnd->PushEventHandler(cc);
-    wnd->PopupMenu(&menuPopup, pt);
+    wxAuiCommandCapture * cc = new wxAuiCommandCapture;
+    wnd->PushEventHandler ( cc );
+    wnd->PopupMenu ( &menuPopup, pt );
     int command = cc->GetCommandId();
-    wnd->PopEventHandler(true);
+    wnd->PopEventHandler ( true );
 
-    if (command >= 1000)
-        return command-1000;
+    if ( command >= 1000 )
+    {
+        return command - 1000;
+    }
 
     return -1;
 }
 
-int wxAuiDefaultTabArt::GetBestTabCtrlSize(wxWindow* wnd,
-                                           const wxAuiNotebookPageArray& pages,
-                                           const wxSize& required_bmp_size)
+int wxAuiDefaultTabArt::GetBestTabCtrlSize ( wxWindow * wnd,
+                                             const wxAuiNotebookPageArray & pages,
+                                             const wxSize & requiredBmpSize )
 {
-    wxClientDC dc(wnd);
-    dc.SetFont(m_measuring_font);
+    wxClientDC dc ( wnd );
+    dc.SetFont ( m_measuringFont );
 
     // sometimes a standard bitmap size needs to be enforced, especially
     // if some tabs have bitmaps and others don't.  This is important because
     // it prevents the tab control from resizing when tabs are added.
-    wxBitmap measure_bmp;
-    if (required_bmp_size.IsFullySpecified())
+    wxBitmap measureBmp;
+
+    if ( requiredBmpSize.IsFullySpecified() )
     {
-        measure_bmp.Create(required_bmp_size.x,
-                           required_bmp_size.y);
+        measureBmp.Create ( requiredBmpSize.x,
+                            requiredBmpSize.y );
     }
 
 
-    int max_y = 0;
-    size_t i, page_count = pages.GetCount();
-    for (i = 0; i < page_count; ++i)
+    int maxY = 0;
+    size_t i, pageCount = pages.GetCount();
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = pages.Item(i);
+        wxAuiNotebookPage & page = pages.Item ( i );
 
         wxBitmap bmp;
-        if (measure_bmp.IsOk())
-            bmp = measure_bmp;
+
+        if ( measureBmp.IsOk() )
+        {
+            bmp = measureBmp;
+        }
+
         else
+        {
             bmp = page.bitmap;
+        }
 
         // we don't use the caption text because we don't
         // want tab heights to be different in the case
         // of a very short piece of text on one tab and a very
         // tall piece of text on another tab
-        int x_ext = 0;
-        wxSize s = GetTabSize(dc,
-                              wnd,
-                              wxT("ABCDEFGHIj"),
-                              bmp,
-                              true,
-                              wxAUI_BUTTON_STATE_HIDDEN,
-                              &x_ext);
+        int xExt = 0;
+        wxSize s = GetTabSize ( dc,
+                                wnd,
+                                wxT ( "ABCDEFGHIj" ),
+                                bmp,
+                                true,
+                                wxAUI_BUTTON_STATE_HIDDEN,
+                                &xExt );
 
-        max_y = wxMax(max_y, s.y);
+        maxY = wxMax ( maxY, s.y );
     }
 
-    return max_y+2;
+    return maxY + 2;
 }
 
-void wxAuiDefaultTabArt::SetNormalFont(const wxFont& font)
+void wxAuiDefaultTabArt::SetNormalFont ( const wxFont & font )
 {
-    m_normal_font = font;
+    m_normalFont = font;
 }
 
-void wxAuiDefaultTabArt::SetSelectedFont(const wxFont& font)
+void wxAuiDefaultTabArt::SetSelectedFont ( const wxFont & font )
 {
-    m_selected_font = font;
+    m_selectedFont = font;
 }
 
-void wxAuiDefaultTabArt::SetMeasuringFont(const wxFont& font)
+void wxAuiDefaultTabArt::SetMeasuringFont ( const wxFont & font )
 {
-    m_measuring_font = font;
+    m_measuringFont = font;
 }
 
-void wxAuiDefaultTabArt::SetColour(const wxColour& colour)
+void wxAuiDefaultTabArt::SetColour ( const wxColour & colour )
 {
-    m_base_colour = colour;
-    m_border_pen = wxPen(m_base_colour.ChangeLightness(75));
-    m_base_colour_pen = wxPen(m_base_colour);
-    m_base_colour_brush = wxBrush(m_base_colour);
+    m_baseColour = colour;
+    m_borderPen = wxPen ( m_baseColour.ChangeLightness ( 75 ) );
+    m_baseColourPen = wxPen ( m_baseColour );
+    m_baseColourBrush = wxBrush ( m_baseColour );
 }
 
-void wxAuiDefaultTabArt::SetActiveColour(const wxColour& colour)
+void wxAuiDefaultTabArt::SetActiveColour ( const wxColour & colour )
 {
-    m_active_colour = colour;
+    m_activeColour = colour;
 }
 
 // -- wxAuiSimpleTabArt class implementation --
 
 wxAuiSimpleTabArt::wxAuiSimpleTabArt()
 {
-    m_normal_font = *wxNORMAL_FONT;
-    m_selected_font = *wxNORMAL_FONT;
-    m_selected_font.SetWeight(wxBOLD);
-    m_measuring_font = m_selected_font;
+    m_normalFont = *wxNORMAL_FONT;
+    m_selectedFont = *wxNORMAL_FONT;
+    m_selectedFont.SetWeight ( wxBOLD );
+    m_measuringFont = m_selectedFont;
 
     m_flags = 0;
-    m_fixed_tab_width = 100;
+    m_fixedTabWidth = 100;
 
-    wxColour base_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
+    wxColour baseColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_3DFACE );
 
-    wxColour background_colour = base_colour;
-    wxColour normaltab_colour = base_colour;
-    wxColour selectedtab_colour = *wxWHITE;
+    wxColour backgroundColour = baseColour;
+    wxColour normaltabColour = baseColour;
+    wxColour selectedtabColour = *wxWHITE;
 
-    m_bkbrush = wxBrush(background_colour);
-    m_normal_bkbrush = wxBrush(normaltab_colour);
-    m_normal_bkpen = wxPen(normaltab_colour);
-    m_selected_bkbrush = wxBrush(selectedtab_colour);
-    m_selected_bkpen = wxPen(selectedtab_colour);
+    m_bkBrush = wxBrush ( backgroundColour );
+    m_normalBkBrush = wxBrush ( normaltabColour );
+    m_normalBkPen = wxPen ( normaltabColour );
+    m_selectedBkBrush = wxBrush ( selectedtabColour );
+    m_selectedBkPen = wxPen ( selectedtabColour );
 
-    m_active_close_bmp = wxAuiBitmapFromBits(close_bits, 16, 16, *wxBLACK);
-    m_disabled_close_bmp = wxAuiBitmapFromBits(close_bits, 16, 16, wxColour(128,128,128));
+    m_activeCloseBmp = wxAuiBitmapFromBits ( closeBits, 16, 16, *wxBLACK );
+    m_disabledCloseBmp = wxAuiBitmapFromBits ( closeBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_left_bmp = wxAuiBitmapFromBits(left_bits, 16, 16, *wxBLACK);
-    m_disabled_left_bmp = wxAuiBitmapFromBits(left_bits, 16, 16, wxColour(128,128,128));
+    m_activeLeftBmp = wxAuiBitmapFromBits ( leftBits, 16, 16, *wxBLACK );
+    m_disabledLeftBmp = wxAuiBitmapFromBits ( leftBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_right_bmp = wxAuiBitmapFromBits(right_bits, 16, 16, *wxBLACK);
-    m_disabled_right_bmp = wxAuiBitmapFromBits(right_bits, 16, 16, wxColour(128,128,128));
+    m_activeRightBmp = wxAuiBitmapFromBits ( rightBits, 16, 16, *wxBLACK );
+    m_disabledRightBmp = wxAuiBitmapFromBits ( rightBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
-    m_active_windowlist_bmp = wxAuiBitmapFromBits(list_bits, 16, 16, *wxBLACK);
-    m_disabled_windowlist_bmp = wxAuiBitmapFromBits(list_bits, 16, 16, wxColour(128,128,128));
+    m_activeWindowListBmp = wxAuiBitmapFromBits ( listBits, 16, 16, *wxBLACK );
+    m_disabledWindowListBmp = wxAuiBitmapFromBits ( listBits, 16, 16, wxColour ( 128, 128, 128 ) );
 
 }
 
@@ -888,227 +999,252 @@
 {
 }
 
-wxAuiTabArt* wxAuiSimpleTabArt::Clone()
+wxAuiTabArt * wxAuiSimpleTabArt::Clone()
 {
-    return new wxAuiSimpleTabArt(*this);
+    return new wxAuiSimpleTabArt ( *this );
 }
 
-void wxAuiSimpleTabArt::SetFlags(unsigned int flags)
+void wxAuiSimpleTabArt::SetFlags ( unsigned int flags )
 {
     m_flags = flags;
 }
 
-void wxAuiSimpleTabArt::SetSizingInfo(const wxSize& tab_ctrl_size,
-                                      size_t tab_count)
+void wxAuiSimpleTabArt::SetSizingInfo ( const wxSize & tabCtrlSize,
+                                        size_t tabCount )
 {
-    m_fixed_tab_width = 100;
+    m_fixedTabWidth = 100;
 
-    int tot_width = (int)tab_ctrl_size.x - GetIndentSize() - 4;
+    int totWidth = ( int ) tabCtrlSize.x - GetIndentSize() - 4;
 
-    if (m_flags & wxAUI_NB_CLOSE_BUTTON)
-        tot_width -= m_active_close_bmp.GetWidth();
-    if (m_flags & wxAUI_NB_WINDOWLIST_BUTTON)
-        tot_width -= m_active_windowlist_bmp.GetWidth();
+    if ( m_flags & wxAUI_NB_CLOSE_BUTTON )
+    {
+        totWidth -= m_activeCloseBmp.GetWidth();
+    }
 
-    if (tab_count > 0)
+    if ( m_flags & wxAUI_NB_WINDOWLIST_BUTTON )
     {
-        m_fixed_tab_width = tot_width/(int)tab_count;
+        totWidth -= m_activeWindowListBmp.GetWidth();
     }
 
+    if ( tabCount > 0 )
+    {
+        m_fixedTabWidth = totWidth / ( int ) tabCount;
+    }
 
-    if (m_fixed_tab_width < 100)
-        m_fixed_tab_width = 100;
 
-    if (m_fixed_tab_width > tot_width/2)
-        m_fixed_tab_width = tot_width/2;
+    if ( m_fixedTabWidth < 100 )
+    {
+        m_fixedTabWidth = 100;
+    }
 
-    if (m_fixed_tab_width > 220)
-        m_fixed_tab_width = 220;
+    if ( m_fixedTabWidth > totWidth / 2 )
+    {
+        m_fixedTabWidth = totWidth / 2;
+    }
+
+    if ( m_fixedTabWidth > 220 )
+    {
+        m_fixedTabWidth = 220;
+    }
 }
 
-void wxAuiSimpleTabArt::SetColour(const wxColour& colour)
+void wxAuiSimpleTabArt::SetColour ( const wxColour & colour )
 {
-    m_bkbrush = wxBrush(colour);
-    m_normal_bkbrush = wxBrush(colour);
-    m_normal_bkpen = wxPen(colour);
+    m_bkBrush = wxBrush ( colour );
+    m_normalBkBrush = wxBrush ( colour );
+    m_normalBkPen = wxPen ( colour );
 }
 
-void wxAuiSimpleTabArt::SetActiveColour(const wxColour& colour)
+void wxAuiSimpleTabArt::SetActiveColour ( const wxColour & colour )
 {
-    m_selected_bkbrush = wxBrush(colour);
-    m_selected_bkpen = wxPen(colour);
+    m_selectedBkBrush = wxBrush ( colour );
+    m_selectedBkPen = wxPen ( colour );
 }
 
-void wxAuiSimpleTabArt::DrawBackground(wxDC& dc,
-                                       wxWindow* WXUNUSED(wnd),
-                                       const wxRect& rect)
+void wxAuiSimpleTabArt::DrawBackground ( wxDC & dc,
+                                         wxWindow * WXUNUSED ( wnd ),
+                                         const wxRect & rect )
 {
     // draw background
-    dc.SetBrush(m_bkbrush);
-    dc.SetPen(*wxTRANSPARENT_PEN);
-    dc.DrawRectangle(-1, -1, rect.GetWidth()+2, rect.GetHeight()+2);
+    dc.SetBrush ( m_bkBrush );
+    dc.SetPen ( *wxTRANSPARENT_PEN );
+    dc.DrawRectangle ( -1, -1, rect.GetWidth() + 2, rect.GetHeight() + 2 );
 
     // draw base line
-    dc.SetPen(*wxGREY_PEN);
-    dc.DrawLine(0, rect.GetHeight()-1, rect.GetWidth(), rect.GetHeight()-1);
+    dc.SetPen ( *wxGREY_PEN );
+    dc.DrawLine ( 0, rect.GetHeight() - 1, rect.GetWidth(), rect.GetHeight() - 1 );
 }
 
 
 // DrawTab() draws an individual tab.
 //
 // dc       - output dc
-// in_rect  - rectangle the tab should be confined to
+// inRect  - rectangle the tab should be confined to
 // caption  - tab's caption
 // active   - whether or not the tab is active
-// out_rect - actual output rectangle
-// x_extent - the advance x; where the next tab should start
+// outRect - actual output rectangle
+// xExtent - the advance x; where the next tab should start
 
-void wxAuiSimpleTabArt::DrawTab(wxDC& dc,
-                                wxWindow* wnd,
-                                const wxAuiNotebookPage& page,
-                                const wxRect& in_rect,
-                                int close_button_state,
-                                wxRect* out_tab_rect,
-                                wxRect* out_button_rect,
-                                int* x_extent)
+void wxAuiSimpleTabArt::DrawTab ( wxDC & dc,
+                                  wxWindow * wnd,
+                                  const wxAuiNotebookPage & page,
+                                  const wxRect & inRect,
+                                  int closeButtonState,
+                                  wxRect * outTabRect,
+                                  wxRect * outButtonRect,
+                                  int * xExtent )
 {
-    wxCoord normal_textx, normal_texty;
-    wxCoord selected_textx, selected_texty;
+    wxCoord normalTextx, normalTexty;
+    wxCoord selectedTextx, selectedTexty;
     wxCoord textx, texty;
 
     // if the caption is empty, measure some temporary text
     wxString caption = page.caption;
-    if (caption.empty())
-        caption = wxT("Xj");
 
-    dc.SetFont(m_selected_font);
-    dc.GetTextExtent(caption, &selected_textx, &selected_texty);
+    if ( caption.empty() )
+    {
+        caption = wxT ( "Xj" );
+    }
 
-    dc.SetFont(m_normal_font);
-    dc.GetTextExtent(caption, &normal_textx, &normal_texty);
+    dc.SetFont ( m_selectedFont );
+    dc.GetTextExtent ( caption, &selectedTextx, &selectedTexty );
 
+    dc.SetFont ( m_normalFont );
+    dc.GetTextExtent ( caption, &normalTextx, &normalTexty );
+
     // figure out the size of the tab
-    wxSize tab_size = GetTabSize(dc,
-                                 wnd,
-                                 page.caption,
-                                 page.bitmap,
-                                 page.active,
-                                 close_button_state,
-                                 x_extent);
+    wxSize tabSize = GetTabSize ( dc,
+                                  wnd,
+                                  page.caption,
+                                  page.bitmap,
+                                  page.active,
+                                  closeButtonState,
+                                  xExtent );
 
-    wxCoord tab_height = tab_size.y;
-    wxCoord tab_width = tab_size.x;
-    wxCoord tab_x = in_rect.x;
-    wxCoord tab_y = in_rect.y + in_rect.height - tab_height;
+    wxCoord tabHeight = tabSize.y;
+    wxCoord tabWidth = tabSize.x;
+    wxCoord tabX = inRect.x;
+    wxCoord tabY = inRect.y + inRect.height - tabHeight;
 
     caption = page.caption;
 
     // select pen, brush and font for the tab to be drawn
 
-    if (page.active)
+    if ( page.active )
     {
-        dc.SetPen(m_selected_bkpen);
-        dc.SetBrush(m_selected_bkbrush);
-        dc.SetFont(m_selected_font);
-        textx = selected_textx;
-        texty = selected_texty;
+        dc.SetPen ( m_selectedBkPen );
+        dc.SetBrush ( m_selectedBkBrush );
+        dc.SetFont ( m_selectedFont );
+        textx = selectedTextx;
+        texty = selectedTexty;
     }
+
     else
     {
-        dc.SetPen(m_normal_bkpen);
-        dc.SetBrush(m_normal_bkbrush);
-        dc.SetFont(m_normal_font);
-        textx = normal_textx;
-        texty = normal_texty;
+        dc.SetPen ( m_normalBkPen );
+        dc.SetBrush ( m_normalBkBrush );
+        dc.SetFont ( m_normalFont );
+        textx = normalTextx;
+        texty = normalTexty;
     }
 
 
     // -- draw line --
 
     wxPoint points[7];
-    points[0].x = tab_x;
-    points[0].y = tab_y + tab_height - 1;
-    points[1].x = tab_x + tab_height - 3;
-    points[1].y = tab_y + 2;
-    points[2].x = tab_x + tab_height + 3;
-    points[2].y = tab_y;
-    points[3].x = tab_x + tab_width - 2;
-    points[3].y = tab_y;
-    points[4].x = tab_x + tab_width;
-    points[4].y = tab_y + 2;
-    points[5].x = tab_x + tab_width;
-    points[5].y = tab_y + tab_height - 1;
+    points[0].x = tabX;
+    points[0].y = tabY + tabHeight - 1;
+    points[1].x = tabX + tabHeight - 3;
+    points[1].y = tabY + 2;
+    points[2].x = tabX + tabHeight + 3;
+    points[2].y = tabY;
+    points[3].x = tabX + tabWidth - 2;
+    points[3].y = tabY;
+    points[4].x = tabX + tabWidth;
+    points[4].y = tabY + 2;
+    points[5].x = tabX + tabWidth;
+    points[5].y = tabY + tabHeight - 1;
     points[6] = points[0];
 
-    dc.SetClippingRegion(in_rect);
+    dc.SetClippingRegion ( inRect );
 
-    dc.DrawPolygon(WXSIZEOF(points) - 1, points);
+    dc.DrawPolygon ( WXSIZEOF ( points ) - 1, points );
 
-    dc.SetPen(*wxGREY_PEN);
+    dc.SetPen ( *wxGREY_PEN );
 
     //dc.DrawLines(active ? WXSIZEOF(points) - 1 : WXSIZEOF(points), points);
-    dc.DrawLines(WXSIZEOF(points), points);
+    dc.DrawLines ( WXSIZEOF ( points ), points );
 
 
-    int text_offset;
+    int textOffset;
 
-    int close_button_width = 0;
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
+    int closeButtonWidth = 0;
+
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
     {
-        close_button_width = m_active_close_bmp.GetWidth();
-        text_offset = tab_x + (tab_height/2) + ((tab_width-close_button_width)/2) - (textx/2);
+        closeButtonWidth = m_activeCloseBmp.GetWidth();
+        textOffset = tabX + ( tabHeight / 2 ) + ( ( tabWidth - closeButtonWidth ) / 2 ) - ( textx / 2 );
     }
+
     else
     {
-        text_offset = tab_x + (tab_height/3) + (tab_width/2) - (textx/2);
+        textOffset = tabX + ( tabHeight / 3 ) + ( tabWidth / 2 ) - ( textx / 2 );
     }
 
     // set minimum text offset
-    if (text_offset < tab_x + tab_height)
-        text_offset = tab_x + tab_height;
+    if ( textOffset < tabX + tabHeight )
+    {
+        textOffset = tabX + tabHeight;
+    }
 
     // chop text if necessary
-    wxString draw_text = wxAuiChopText(dc,
-                          caption,
-                          tab_width - (text_offset-tab_x) - close_button_width);
+    wxString drawText = wxAuiChopText ( dc,
+                                        caption,
+                                        tabWidth - ( textOffset - tabX ) - closeButtonWidth );
 
     // draw tab text
-    dc.DrawText(draw_text,
-                 text_offset,
-                 (tab_y + tab_height)/2 - (texty/2) + 1);
+    dc.DrawText ( drawText,
+                  textOffset,
+                  ( tabY + tabHeight ) / 2 - ( texty / 2 ) + 1 );
 
 
     // draw focus rectangle
-    if (page.active && (wnd->FindFocus() == wnd))
+    if ( page.active && ( wnd->FindFocus() == wnd ) )
     {
-        wxRect focusRect(text_offset, ((tab_y + tab_height)/2 - (texty/2) + 1),
-            selected_textx, selected_texty);
+        wxRect focusRect ( textOffset, ( ( tabY + tabHeight ) / 2 - ( texty / 2 ) + 1 ),
+                           selectedTextx, selectedTexty );
 
-        focusRect.Inflate(2, 2);
+        focusRect.Inflate ( 2, 2 );
 
-        wxRendererNative::Get().DrawFocusRect(wnd, dc, focusRect, 0);
+        wxRendererNative::Get().DrawFocusRect ( wnd, dc, focusRect, 0 );
     }
 
     // draw close button if necessary
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
     {
         wxBitmap bmp;
-        if (page.active)
-            bmp = m_active_close_bmp;
+
+        if ( page.active )
+        {
+            bmp = m_activeCloseBmp;
+        }
+
         else
-            bmp = m_disabled_close_bmp;
+        {
+            bmp = m_disabledCloseBmp;
+        }
 
-        wxRect rect(tab_x + tab_width - close_button_width - 1,
-                    tab_y + (tab_height/2) - (bmp.GetHeight()/2) + 1,
-                    close_button_width,
-                    tab_height - 1);
-        DrawButtons(dc, rect, bmp, *wxWHITE, close_button_state);
+        wxRect rect ( tabX + tabWidth - closeButtonWidth - 1,
+                      tabY + ( tabHeight / 2 ) - ( bmp.GetHeight() / 2 ) + 1,
+                      closeButtonWidth,
+                      tabHeight - 1 );
+        DrawButtons ( dc, rect, bmp, *wxWHITE, closeButtonState );
 
-        *out_button_rect = rect;
+        *outButtonRect = rect;
     }
 
 
-    *out_tab_rect = wxRect(tab_x, tab_y, tab_width, tab_height);
+    *outTabRect = wxRect ( tabX, tabY, tabWidth, tabHeight );
 
     dc.DestroyClippingRegion();
 }
@@ -1118,174 +1254,215 @@
     return 0;
 }
 
-wxSize wxAuiSimpleTabArt::GetTabSize(wxDC& dc,
-                                     wxWindow* WXUNUSED(wnd),
-                                     const wxString& caption,
-                                     const wxBitmap& WXUNUSED(bitmap),
-                                     bool WXUNUSED(active),
-                                     int close_button_state,
-                                     int* x_extent)
+wxSize wxAuiSimpleTabArt::GetTabSize ( wxDC & dc,
+                                       wxWindow * WXUNUSED ( wnd ),
+                                       const wxString & caption,
+                                       const wxBitmap & WXUNUSED ( bitmap ),
+                                       bool WXUNUSED ( active ),
+                                       int closeButtonState,
+                                       int * xExtent )
 {
-    wxCoord measured_textx, measured_texty;
+    wxCoord measuredTextx, measuredTexty;
 
-    dc.SetFont(m_measuring_font);
-    dc.GetTextExtent(caption, &measured_textx, &measured_texty);
+    dc.SetFont ( m_measuringFont );
+    dc.GetTextExtent ( caption, &measuredTextx, &measuredTexty );
 
-    wxCoord tab_height = measured_texty + 4;
-    wxCoord tab_width = measured_textx + tab_height + 5;
+    wxCoord tabHeight = measuredTexty + 4;
+    wxCoord tabWidth = measuredTextx + tabHeight + 5;
 
-    if (close_button_state != wxAUI_BUTTON_STATE_HIDDEN)
-        tab_width += m_active_close_bmp.GetWidth();
+    if ( closeButtonState != wxAUI_BUTTON_STATE_HIDDEN )
+    {
+        tabWidth += m_activeCloseBmp.GetWidth();
+    }
 
-    if (m_flags & wxAUI_NB_TAB_FIXED_WIDTH)
+    if ( m_flags & wxAUI_NB_TAB_FIXED_WIDTH )
     {
-        tab_width = m_fixed_tab_width;
+        tabWidth = m_fixedTabWidth;
     }
 
-    *x_extent = tab_width - (tab_height/2) - 1;
+    *xExtent = tabWidth - ( tabHeight / 2 ) - 1;
 
-    return wxSize(tab_width, tab_height);
+    return wxSize ( tabWidth, tabHeight );
 }
 
 
-void wxAuiSimpleTabArt::DrawButton(wxDC& dc,
-                                   wxWindow* WXUNUSED(wnd),
-                                   const wxRect& in_rect,
-                                   int bitmap_id,
-                                   int button_state,
-                                   int orientation,
-                                   wxRect* out_rect)
+void wxAuiSimpleTabArt::DrawButton ( wxDC & dc,
+                                     wxWindow * WXUNUSED ( wnd ),
+                                     const wxRect & inRect,
+                                     int bitmapId,
+                                     int buttonState,
+                                     int orientation,
+                                     wxRect * outRect )
 {
     wxBitmap bmp;
     wxRect rect;
 
-    switch (bitmap_id)
+    switch ( bitmapId )
     {
         case wxAUI_BUTTON_CLOSE:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_close_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledCloseBmp;
+            }
+
             else
-                bmp = m_active_close_bmp;
+            {
+                bmp = m_activeCloseBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_LEFT:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_left_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledLeftBmp;
+            }
+
             else
-                bmp = m_active_left_bmp;
+            {
+                bmp = m_activeLeftBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_RIGHT:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_right_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledRightBmp;
+            }
+
             else
-                bmp = m_active_right_bmp;
+            {
+                bmp = m_activeRightBmp;
+            }
+
             break;
+
         case wxAUI_BUTTON_WINDOWLIST:
-            if (button_state & wxAUI_BUTTON_STATE_DISABLED)
-                bmp = m_disabled_windowlist_bmp;
+            if ( buttonState & wxAUI_BUTTON_STATE_DISABLED )
+            {
+                bmp = m_disabledWindowListBmp;
+            }
+
             else
-                bmp = m_active_windowlist_bmp;
+            {
+                bmp = m_activeWindowListBmp;
+            }
+
             break;
     }
 
-    if (!bmp.IsOk())
+    if ( !bmp.IsOk() )
+    {
         return;
+    }
 
-    rect = in_rect;
+    rect = inRect;
 
-    if (orientation == wxLEFT)
+    if ( orientation == wxLEFT )
     {
-        rect.SetX(in_rect.x);
-        rect.SetY(((in_rect.y + in_rect.height)/2) - (bmp.GetHeight()/2));
-        rect.SetWidth(bmp.GetWidth());
-        rect.SetHeight(bmp.GetHeight());
+        rect.SetX ( inRect.x );
+        rect.SetY ( ( ( inRect.y + inRect.height ) / 2 ) - ( bmp.GetHeight() / 2 ) );
+        rect.SetWidth ( bmp.GetWidth() );
+        rect.SetHeight ( bmp.GetHeight() );
     }
+
     else
     {
-        rect = wxRect(in_rect.x + in_rect.width - bmp.GetWidth(),
-                      ((in_rect.y + in_rect.height)/2) - (bmp.GetHeight()/2),
-                      bmp.GetWidth(), bmp.GetHeight());
+        rect = wxRect ( inRect.x + inRect.width - bmp.GetWidth(),
+                        ( ( inRect.y + inRect.height ) / 2 ) - ( bmp.GetHeight() / 2 ),
+                        bmp.GetWidth(), bmp.GetHeight() );
     }
 
 
-    DrawButtons(dc, rect, bmp, *wxWHITE, button_state);
+    DrawButtons ( dc, rect, bmp, *wxWHITE, buttonState );
 
-    *out_rect = rect;
+    *outRect = rect;
 }
 
-int wxAuiSimpleTabArt::ShowDropDown(wxWindow* wnd,
-                                    const wxAuiNotebookPageArray& pages,
-                                    int active_idx)
+int wxAuiSimpleTabArt::ShowDropDown ( wxWindow * wnd,
+                                      const wxAuiNotebookPageArray & pages,
+                                      int activeIdx )
 {
     wxMenu menuPopup;
 
     size_t i, count = pages.GetCount();
-    for (i = 0; i < count; ++i)
+
+    for ( i = 0; i < count; ++i )
     {
-        const wxAuiNotebookPage& page = pages.Item(i);
-        menuPopup.AppendCheckItem(1000+i, page.caption);
+        const wxAuiNotebookPage & page = pages.Item ( i );
+        menuPopup.AppendCheckItem ( 1000 + i, page.caption );
     }
 
-    if (active_idx != -1)
+    if ( activeIdx != -1 )
     {
-        menuPopup.Check(1000+active_idx, true);
+        menuPopup.Check ( 1000 + activeIdx, true );
     }
 
     // find out where to put the popup menu of window
     // items.  Subtract 100 for now to center the menu
     // a bit, until a better mechanism can be implemented
     wxPoint pt = ::wxGetMousePosition();
-    pt = wnd->ScreenToClient(pt);
-    if (pt.x < 100)
+    pt = wnd->ScreenToClient ( pt );
+
+    if ( pt.x < 100 )
+    {
         pt.x = 0;
+    }
+
     else
+    {
         pt.x -= 100;
+    }
 
     // find out the screen coordinate at the bottom of the tab ctrl
-    wxRect cli_rect = wnd->GetClientRect();
-    pt.y = cli_rect.y + cli_rect.height;
+    wxRect cliRect = wnd->GetClientRect();
+    pt.y = cliRect.y + cliRect.height;
 
-    wxAuiCommandCapture* cc = new wxAuiCommandCapture;
-    wnd->PushEventHandler(cc);
-    wnd->PopupMenu(&menuPopup, pt);
+    wxAuiCommandCapture * cc = new wxAuiCommandCapture;
+    wnd->PushEventHandler ( cc );
+    wnd->PopupMenu ( &menuPopup, pt );
     int command = cc->GetCommandId();
-    wnd->PopEventHandler(true);
+    wnd->PopEventHandler ( true );
 
-    if (command >= 1000)
-        return command-1000;
+    if ( command >= 1000 )
+    {
+        return command - 1000;
+    }
 
     return -1;
 }
 
-int wxAuiSimpleTabArt::GetBestTabCtrlSize(wxWindow* wnd,
-                                          const wxAuiNotebookPageArray& WXUNUSED(pages),
-                                          const wxSize& WXUNUSED(required_bmp_size))
+int wxAuiSimpleTabArt::GetBestTabCtrlSize ( wxWindow * wnd,
+                                            const wxAuiNotebookPageArray & WXUNUSED ( pages ),
+                                            const wxSize & WXUNUSED ( requiredBmpSize ) )
 {
-    wxClientDC dc(wnd);
-    dc.SetFont(m_measuring_font);
-    int x_ext = 0;
-    wxSize s = GetTabSize(dc,
-                          wnd,
-                          wxT("ABCDEFGHIj"),
-                          wxNullBitmap,
-                          true,
-                          wxAUI_BUTTON_STATE_HIDDEN,
-                          &x_ext);
-    return s.y+3;
+    wxClientDC dc ( wnd );
+    dc.SetFont ( m_measuringFont );
+    int xExt = 0;
+    wxSize s = GetTabSize ( dc,
+                            wnd,
+                            wxT ( "ABCDEFGHIj" ),
+                            wxNullBitmap,
+                            true,
+                            wxAUI_BUTTON_STATE_HIDDEN,
+                            &xExt );
+    return s.y + 3;
 }
 
-void wxAuiSimpleTabArt::SetNormalFont(const wxFont& font)
+void wxAuiSimpleTabArt::SetNormalFont ( const wxFont & font )
 {
-    m_normal_font = font;
+    m_normalFont = font;
 }
 
-void wxAuiSimpleTabArt::SetSelectedFont(const wxFont& font)
+void wxAuiSimpleTabArt::SetSelectedFont ( const wxFont & font )
 {
-    m_selected_font = font;
+    m_selectedFont = font;
 }
 
-void wxAuiSimpleTabArt::SetMeasuringFont(const wxFont& font)
+void wxAuiSimpleTabArt::SetMeasuringFont ( const wxFont & font )
 {
-    m_measuring_font = font;
+    m_measuringFont = font;
 }
 
 
@@ -1306,14 +1483,14 @@
 
 wxAuiTabContainer::wxAuiTabContainer()
 {
-    m_tab_offset = 0;
+    m_tabOffset = 0;
     m_flags = 0;
     m_art = new wxAuiDefaultTabArt;
 
-    AddButton(wxAUI_BUTTON_LEFT, wxLEFT);
-    AddButton(wxAUI_BUTTON_RIGHT, wxRIGHT);
-    AddButton(wxAUI_BUTTON_WINDOWLIST, wxRIGHT);
-    AddButton(wxAUI_BUTTON_CLOSE, wxRIGHT);
+    AddButton ( wxAUI_BUTTON_LEFT, wxLEFT );
+    AddButton ( wxAUI_BUTTON_RIGHT, wxRIGHT );
+    AddButton ( wxAUI_BUTTON_WINDOWLIST, wxRIGHT );
+    AddButton ( wxAUI_BUTTON_CLOSE, wxRIGHT );
 }
 
 wxAuiTabContainer::~wxAuiTabContainer()
@@ -1321,52 +1498,52 @@
     delete m_art;
 }
 
-void wxAuiTabContainer::SetArtProvider(wxAuiTabArt* art)
+void wxAuiTabContainer::SetArtProvider ( wxAuiTabArt * art )
 {
     delete m_art;
     m_art = art;
 
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetFlags(m_flags);
+        m_art->SetFlags ( m_flags );
     }
 }
 
-wxAuiTabArt* wxAuiTabContainer::GetArtProvider() const
+wxAuiTabArt * wxAuiTabContainer::GetArtProvider() const
 {
     return m_art;
 }
 
-void wxAuiTabContainer::SetFlags(unsigned int flags)
+void wxAuiTabContainer::SetFlags ( unsigned int flags )
 {
     m_flags = flags;
 
     // check for new close button settings
-    RemoveButton(wxAUI_BUTTON_LEFT);
-    RemoveButton(wxAUI_BUTTON_RIGHT);
-    RemoveButton(wxAUI_BUTTON_WINDOWLIST);
-    RemoveButton(wxAUI_BUTTON_CLOSE);
+    RemoveButton ( wxAUI_BUTTON_LEFT );
+    RemoveButton ( wxAUI_BUTTON_RIGHT );
+    RemoveButton ( wxAUI_BUTTON_WINDOWLIST );
+    RemoveButton ( wxAUI_BUTTON_CLOSE );
 
 
-    if (flags & wxAUI_NB_SCROLL_BUTTONS)
+    if ( flags & wxAUI_NB_SCROLL_BUTTONS )
     {
-        AddButton(wxAUI_BUTTON_LEFT, wxLEFT);
-        AddButton(wxAUI_BUTTON_RIGHT, wxRIGHT);
+        AddButton ( wxAUI_BUTTON_LEFT, wxLEFT );
+        AddButton ( wxAUI_BUTTON_RIGHT, wxRIGHT );
     }
 
-    if (flags & wxAUI_NB_WINDOWLIST_BUTTON)
+    if ( flags & wxAUI_NB_WINDOWLIST_BUTTON )
     {
-        AddButton(wxAUI_BUTTON_WINDOWLIST, wxRIGHT);
+        AddButton ( wxAUI_BUTTON_WINDOWLIST, wxRIGHT );
     }
 
-    if (flags & wxAUI_NB_CLOSE_BUTTON)
+    if ( flags & wxAUI_NB_CLOSE_BUTTON )
     {
-        AddButton(wxAUI_BUTTON_CLOSE, wxRIGHT);
+        AddButton ( wxAUI_BUTTON_CLOSE, wxRIGHT );
     }
 
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetFlags(m_flags);
+        m_art->SetFlags ( m_flags );
     }
 }
 
@@ -1376,114 +1553,124 @@
 }
 
 
-void wxAuiTabContainer::SetNormalFont(const wxFont& font)
+void wxAuiTabContainer::SetNormalFont ( const wxFont & font )
 {
-    m_art->SetNormalFont(font);
+    m_art->SetNormalFont ( font );
 }
 
-void wxAuiTabContainer::SetSelectedFont(const wxFont& font)
+void wxAuiTabContainer::SetSelectedFont ( const wxFont & font )
 {
-    m_art->SetSelectedFont(font);
+    m_art->SetSelectedFont ( font );
 }
 
-void wxAuiTabContainer::SetMeasuringFont(const wxFont& font)
+void wxAuiTabContainer::SetMeasuringFont ( const wxFont & font )
 {
-    m_art->SetMeasuringFont(font);
+    m_art->SetMeasuringFont ( font );
 }
 
-void wxAuiTabContainer::SetColour(const wxColour& colour)
+void wxAuiTabContainer::SetColour ( const wxColour & colour )
 {
-    m_art->SetColour(colour);
+    m_art->SetColour ( colour );
 }
 
-void wxAuiTabContainer::SetActiveColour(const wxColour& colour)
+void wxAuiTabContainer::SetActiveColour ( const wxColour & colour )
 {
-    m_art->SetActiveColour(colour);
+    m_art->SetActiveColour ( colour );
 }
 
-void wxAuiTabContainer::SetRect(const wxRect& rect)
+void wxAuiTabContainer::SetRect ( const wxRect & rect )
 {
     m_rect = rect;
 
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetSizingInfo(rect.GetSize(), m_pages.GetCount());
+        m_art->SetSizingInfo ( rect.GetSize(), m_pages.GetCount() );
     }
 }
 
-bool wxAuiTabContainer::AddPage(wxWindow* page,
-                                const wxAuiNotebookPage& info)
+bool wxAuiTabContainer::AddPage ( wxWindow * page,
+                                  const wxAuiNotebookPage & info )
 {
-    wxAuiNotebookPage page_info;
-    page_info = info;
-    page_info.window = page;
+    wxAuiNotebookPage pageInfo;
+    pageInfo = info;
+    pageInfo.window = page;
 
-    m_pages.Add(page_info);
+    m_pages.Add ( pageInfo );
 
     // let the art provider know how many pages we have
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetSizingInfo(m_rect.GetSize(), m_pages.GetCount());
+        m_art->SetSizingInfo ( m_rect.GetSize(), m_pages.GetCount() );
     }
 
     return true;
 }
 
-bool wxAuiTabContainer::InsertPage(wxWindow* page,
-                                   const wxAuiNotebookPage& info,
-                                   size_t idx)
+bool wxAuiTabContainer::InsertPage ( wxWindow * page,
+                                     const wxAuiNotebookPage & info,
+                                     size_t idx )
 {
-    wxAuiNotebookPage page_info;
-    page_info = info;
-    page_info.window = page;
+    wxAuiNotebookPage pageInfo;
+    pageInfo = info;
+    pageInfo.window = page;
 
-    if (idx >= m_pages.GetCount())
-        m_pages.Add(page_info);
+    if ( idx >= m_pages.GetCount() )
+    {
+        m_pages.Add ( pageInfo );
+    }
+
     else
-        m_pages.Insert(page_info, idx);
+    {
+        m_pages.Insert ( pageInfo, idx );
+    }
 
     // let the art provider know how many pages we have
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetSizingInfo(m_rect.GetSize(), m_pages.GetCount());
+        m_art->SetSizingInfo ( m_rect.GetSize(), m_pages.GetCount() );
     }
 
     return true;
 }
 
-bool wxAuiTabContainer::MovePage(wxWindow* page,
-                                 size_t new_idx)
+bool wxAuiTabContainer::MovePage ( wxWindow * page,
+                                   size_t newIdx )
 {
-    int idx = GetIdxFromWindow(page);
-    if (idx == -1)
+    int idx = GetIdxFromWindow ( page );
+
+    if ( idx == -1 )
+    {
         return false;
+    }
 
     // get page entry, make a copy of it
-    wxAuiNotebookPage p = GetPage(idx);
+    wxAuiNotebookPage p = GetPage ( idx );
 
     // remove old page entry
-    RemovePage(page);
+    RemovePage ( page );
 
     // insert page where it should be
-    InsertPage(page, p, new_idx);
+    InsertPage ( page, p, newIdx );
 
     return true;
 }
 
-bool wxAuiTabContainer::RemovePage(wxWindow* wnd)
+bool wxAuiTabContainer::RemovePage ( wxWindow * wnd )
 {
-    size_t i, page_count = m_pages.GetCount();
-    for (i = 0; i < page_count; ++i)
+    size_t i, pageCount = m_pages.GetCount();
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        if (page.window == wnd)
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+
+        if ( page.window == wnd )
         {
-            m_pages.RemoveAt(i);
+            m_pages.RemoveAt ( i );
 
             // let the art provider know how many pages we have
-            if (m_art)
+            if ( m_art )
             {
-                m_art->SetSizingInfo(m_rect.GetSize(), m_pages.GetCount());
+                m_art->SetSizingInfo ( m_rect.GetSize(), m_pages.GetCount() );
             }
 
             return true;
@@ -1493,19 +1680,22 @@
     return false;
 }
 
-bool wxAuiTabContainer::SetActivePage(wxWindow* wnd)
+bool wxAuiTabContainer::SetActivePage ( wxWindow * wnd )
 {
     bool found = false;
 
-    size_t i, page_count = m_pages.GetCount();
-    for (i = 0; i < page_count; ++i)
+    size_t i, pageCount = m_pages.GetCount();
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        if (page.window == wnd)
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+
+        if ( page.window == wnd )
         {
             page.active = true;
             found = true;
         }
+
         else
         {
             page.active = false;
@@ -1517,70 +1707,84 @@
 
 void wxAuiTabContainer::SetNoneActive()
 {
-    size_t i, page_count = m_pages.GetCount();
-    for (i = 0; i < page_count; ++i)
+    size_t i, pageCount = m_pages.GetCount();
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
+        wxAuiNotebookPage & page = m_pages.Item ( i );
         page.active = false;
     }
 }
 
-bool wxAuiTabContainer::SetActivePage(size_t page)
+bool wxAuiTabContainer::SetActivePage ( size_t page )
 {
-    if (page >= m_pages.GetCount())
+    if ( page >= m_pages.GetCount() )
+    {
         return false;
+    }
 
-    return SetActivePage(m_pages.Item(page).window);
+    return SetActivePage ( m_pages.Item ( page ).window );
 }
 
 int wxAuiTabContainer::GetActivePage() const
 {
-    size_t i, page_count = m_pages.GetCount();
-    for (i = 0; i < page_count; ++i)
+    size_t i, pageCount = m_pages.GetCount();
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        if (page.active)
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+
+        if ( page.active )
+        {
             return i;
+        }
     }
 
     return -1;
 }
 
-wxWindow* wxAuiTabContainer::GetWindowFromIdx(size_t idx) const
+wxWindow * wxAuiTabContainer::GetWindowFromIdx ( size_t idx ) const
 {
-    if (idx >= m_pages.GetCount())
+    if ( idx >= m_pages.GetCount() )
+    {
         return NULL;
+    }
 
     return m_pages[idx].window;
 }
 
-int wxAuiTabContainer::GetIdxFromWindow(wxWindow* wnd) const
+int wxAuiTabContainer::GetIdxFromWindow ( wxWindow * wnd ) const
 {
-    const size_t page_count = m_pages.GetCount();
-    for ( size_t i = 0; i < page_count; ++i )
+    const size_t pageCount = m_pages.GetCount();
+
+    for ( size_t i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        if (page.window == wnd)
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+
+        if ( page.window == wnd )
+        {
             return i;
+        }
     }
+
     return wxNOT_FOUND;
 }
 
-wxAuiNotebookPage& wxAuiTabContainer::GetPage(size_t idx)
+wxAuiNotebookPage & wxAuiTabContainer::GetPage ( size_t idx )
 {
-    wxASSERT_MSG(idx < m_pages.GetCount(), wxT("Invalid Page index"));
+    wxASSERT_MSG ( idx < m_pages.GetCount(), wxT ( "Invalid Page index" ) );
 
     return m_pages[idx];
 }
 
-const wxAuiNotebookPage& wxAuiTabContainer::GetPage(size_t idx) const
+const wxAuiNotebookPage & wxAuiTabContainer::GetPage ( size_t idx ) const
 {
-    wxASSERT_MSG(idx < m_pages.GetCount(), wxT("Invalid Page index"));
+    wxASSERT_MSG ( idx < m_pages.GetCount(), wxT ( "Invalid Page index" ) );
 
     return m_pages[idx];
 }
 
-wxAuiNotebookPageArray& wxAuiTabContainer::GetPages()
+wxAuiNotebookPageArray & wxAuiTabContainer::GetPages()
 {
     return m_pages;
 }
@@ -1590,30 +1794,30 @@
     return m_pages.GetCount();
 }
 
-void wxAuiTabContainer::AddButton(int id,
-                                  int location,
-                                  const wxBitmap& normal_bitmap,
-                                  const wxBitmap& disabled_bitmap)
+void wxAuiTabContainer::AddButton ( int id,
+                                    int location,
+                                    const wxBitmap & normalBitmap,
+                                    const wxBitmap & disabledBitmap )
 {
     wxAuiTabContainerButton button;
     button.id = id;
-    button.bitmap = normal_bitmap;
-    button.dis_bitmap = disabled_bitmap;
+    button.bitmap = normalBitmap;
+    button.disBitmap = disabledBitmap;
     button.location = location;
-    button.cur_state = wxAUI_BUTTON_STATE_NORMAL;
+    button.curState = wxAUI_BUTTON_STATE_NORMAL;
 
-    m_buttons.Add(button);
+    m_buttons.Add ( button );
 }
 
-void wxAuiTabContainer::RemoveButton(int id)
+void wxAuiTabContainer::RemoveButton ( int id )
 {
-    size_t i, button_count = m_buttons.GetCount();
+    size_t i, buttonCount = m_buttons.GetCount();
 
-    for (i = 0; i < button_count; ++i)
+    for ( i = 0; i < buttonCount; ++i )
     {
-        if (m_buttons.Item(i).id == id)
+        if ( m_buttons.Item ( i ).id == id )
         {
-            m_buttons.RemoveAt(i);
+            m_buttons.RemoveAt ( i );
             return;
         }
     }
@@ -1623,12 +1827,12 @@
 
 size_t wxAuiTabContainer::GetTabOffset() const
 {
-    return m_tab_offset;
+    return m_tabOffset;
 }
 
-void wxAuiTabContainer::SetTabOffset(size_t offset)
+void wxAuiTabContainer::SetTabOffset ( size_t offset )
 {
-    m_tab_offset = offset;
+    m_tabOffset = offset;
 }
 
 
@@ -1637,154 +1841,191 @@
 // Render() renders the tab catalog to the specified DC
 // It is a virtual function and can be overridden to
 // provide custom drawing capabilities
-void wxAuiTabContainer::Render(wxDC* raw_dc, wxWindow* wnd)
+void wxAuiTabContainer::Render ( wxDC * rawDc, wxWindow * wnd )
 {
-    if (!raw_dc || !raw_dc->IsOk())
+    if ( !rawDc || !rawDc->IsOk() )
+    {
         return;
+    }
 
     wxMemoryDC dc;
 
     // use the same layout direction as the window DC uses to ensure that the
     // text is rendered correctly
-    dc.SetLayoutDirection(raw_dc->GetLayoutDirection());
+    dc.SetLayoutDirection ( rawDc->GetLayoutDirection() );
 
     wxBitmap bmp;
     size_t i;
-    size_t page_count = m_pages.GetCount();
-    size_t button_count = m_buttons.GetCount();
+    size_t pageCount = m_pages.GetCount();
+    size_t buttonCount = m_buttons.GetCount();
 
     // create off-screen bitmap
-    bmp.Create(m_rect.GetWidth(), m_rect.GetHeight());
-    dc.SelectObject(bmp);
+    bmp.Create ( m_rect.GetWidth(), m_rect.GetHeight() );
+    dc.SelectObject ( bmp );
 
-    if (!dc.IsOk())
+    if ( !dc.IsOk() )
+    {
         return;
+    }
 
     // find out if size of tabs is larger than can be
     // afforded on screen
-    int total_width = 0;
-    int visible_width = 0;
-    for (i = 0; i < page_count; ++i)
+    int totalWidth = 0;
+    int visibleWidth = 0;
+
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
+        wxAuiNotebookPage & page = m_pages.Item ( i );
 
         // determine if a close button is on this tab
-        bool close_button = false;
-        if ((m_flags & wxAUI_NB_CLOSE_ON_ALL_TABS) != 0 ||
-            ((m_flags & wxAUI_NB_CLOSE_ON_ACTIVE_TAB) != 0 && page.active))
+        bool closeButton = false;
+
+        if ( ( m_flags & wxAUI_NB_CLOSE_ON_ALL_TABS ) != 0 ||
+                ( ( m_flags & wxAUI_NB_CLOSE_ON_ACTIVE_TAB ) != 0 && page.active ) )
         {
-            close_button = true;
+            closeButton = true;
         }
 
 
-        int x_extent = 0;
-        wxSize size = m_art->GetTabSize(dc,
-                            wnd,
-                            page.caption,
-                            page.bitmap,
-                            page.active,
-                            close_button ?
-                              wxAUI_BUTTON_STATE_NORMAL :
-                              wxAUI_BUTTON_STATE_HIDDEN,
-                            &x_extent);
+        int xExtent = 0;
+        wxSize size = m_art->GetTabSize ( dc,
+                                          wnd,
+                                          page.caption,
+                                          page.bitmap,
+                                          page.active,
+                                          closeButton ?
+                                          wxAUI_BUTTON_STATE_NORMAL :
+                                          wxAUI_BUTTON_STATE_HIDDEN,
+                                          &xExtent );
 
-        if (i+1 < page_count)
-            total_width += x_extent;
+        if ( i + 1 < pageCount )
+        {
+            totalWidth += xExtent;
+        }
+
         else
-            total_width += size.x;
+        {
+            totalWidth += size.x;
+        }
 
-        if (i >= m_tab_offset)
+        if ( i >= m_tabOffset )
         {
-            if (i+1 < page_count)
-                visible_width += x_extent;
+            if ( i + 1 < pageCount )
+            {
+                visibleWidth += xExtent;
+            }
+
             else
-                visible_width += size.x;
+            {
+                visibleWidth += size.x;
+            }
         }
     }
 
-    if (total_width > m_rect.GetWidth() || m_tab_offset != 0)
+    if ( totalWidth > m_rect.GetWidth() || m_tabOffset != 0 )
     {
         // show left/right buttons
-        for (i = 0; i < button_count; ++i)
+        for ( i = 0; i < buttonCount; ++i )
         {
-            wxAuiTabContainerButton& button = m_buttons.Item(i);
-            if (button.id == wxAUI_BUTTON_LEFT ||
-                button.id == wxAUI_BUTTON_RIGHT)
+            wxAuiTabContainerButton & button = m_buttons.Item ( i );
+
+            if ( button.id == wxAUI_BUTTON_LEFT ||
+                    button.id == wxAUI_BUTTON_RIGHT )
             {
-                button.cur_state &= ~wxAUI_BUTTON_STATE_HIDDEN;
+                button.curState &= ~wxAUI_BUTTON_STATE_HIDDEN;
             }
         }
     }
+
     else
     {
         // hide left/right buttons
-        for (i = 0; i < button_count; ++i)
+        for ( i = 0; i < buttonCount; ++i )
         {
-            wxAuiTabContainerButton& button = m_buttons.Item(i);
-            if (button.id == wxAUI_BUTTON_LEFT ||
-                button.id == wxAUI_BUTTON_RIGHT)
+            wxAuiTabContainerButton & button = m_buttons.Item ( i );
+
+            if ( button.id == wxAUI_BUTTON_LEFT ||
+                    button.id == wxAUI_BUTTON_RIGHT )
             {
-                button.cur_state |= wxAUI_BUTTON_STATE_HIDDEN;
+                button.curState |= wxAUI_BUTTON_STATE_HIDDEN;
             }
         }
     }
 
     // determine whether left button should be enabled
-    for (i = 0; i < button_count; ++i)
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(i);
-        if (button.id == wxAUI_BUTTON_LEFT)
+        wxAuiTabContainerButton & button = m_buttons.Item ( i );
+
+        if ( button.id == wxAUI_BUTTON_LEFT )
         {
-            if (m_tab_offset == 0)
-                button.cur_state |= wxAUI_BUTTON_STATE_DISABLED;
+            if ( m_tabOffset == 0 )
+            {
+                button.curState |= wxAUI_BUTTON_STATE_DISABLED;
+            }
+
             else
-                button.cur_state &= ~wxAUI_BUTTON_STATE_DISABLED;
+            {
+                button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
+            }
         }
-        if (button.id == wxAUI_BUTTON_RIGHT)
+
+        if ( button.id == wxAUI_BUTTON_RIGHT )
         {
-            if (visible_width < m_rect.GetWidth() - ((int)button_count*16))
-                button.cur_state |= wxAUI_BUTTON_STATE_DISABLED;
+            if ( visibleWidth < m_rect.GetWidth() - ( ( int ) buttonCount * 16 ) )
+            {
+                button.curState |= wxAUI_BUTTON_STATE_DISABLED;
+            }
+
             else
-                button.cur_state &= ~wxAUI_BUTTON_STATE_DISABLED;
+            {
+                button.curState &= ~wxAUI_BUTTON_STATE_DISABLED;
+            }
         }
     }
 
 
 
     // draw background
-    m_art->DrawBackground(dc, wnd, m_rect);
+    m_art->DrawBackground ( dc, wnd, m_rect );
 
     // draw buttons
-    int left_buttons_width = 0;
-    int right_buttons_width = 0;
+    int leftButtonsWidth = 0;
+    int rightButtonsWidth = 0;
 
     int offset = 0;
 
     // draw the buttons on the right side
     offset = m_rect.x + m_rect.width;
-    for (i = 0; i < button_count; ++i)
+
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
+        wxAuiTabContainerButton & button = m_buttons.Item ( buttonCount - i - 1 );
 
-        if (button.location != wxRIGHT)
+        if ( button.location != wxRIGHT )
+        {
             continue;
-        if (button.cur_state & wxAUI_BUTTON_STATE_HIDDEN)
+        }
+
+        if ( button.curState & wxAUI_BUTTON_STATE_HIDDEN )
+        {
             continue;
+        }
 
-        wxRect button_rect = m_rect;
-        button_rect.SetY(1);
-        button_rect.SetWidth(offset);
+        wxRect buttonRect = m_rect;
+        buttonRect.SetY ( 1 );
+        buttonRect.SetWidth ( offset );
 
-        m_art->DrawButton(dc,
-                          wnd,
-                          button_rect,
-                          button.id,
-                          button.cur_state,
-                          wxRIGHT,
-                          &button.rect);
+        m_art->DrawButton ( dc,
+                            wnd,
+                            buttonRect,
+                            button.id,
+                            button.curState,
+                            wxRIGHT,
+                            &button.rect );
 
         offset -= button.rect.GetWidth();
-        right_buttons_width += button.rect.GetWidth();
+        rightButtonsWidth += button.rect.GetWidth();
     }
 
 
@@ -1793,262 +2034,306 @@
 
     // draw the buttons on the left side
 
-    for (i = 0; i < button_count; ++i)
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
+        wxAuiTabContainerButton & button = m_buttons.Item ( buttonCount - i - 1 );
 
-        if (button.location != wxLEFT)
+        if ( button.location != wxLEFT )
+        {
             continue;
-        if (button.cur_state & wxAUI_BUTTON_STATE_HIDDEN)
+        }
+
+        if ( button.curState & wxAUI_BUTTON_STATE_HIDDEN )
+        {
             continue;
+        }
 
-        wxRect button_rect(offset, 1, 1000, m_rect.height);
+        wxRect buttonRect ( offset, 1, 1000, m_rect.height );
 
-        m_art->DrawButton(dc,
-                          wnd,
-                          button_rect,
-                          button.id,
-                          button.cur_state,
-                          wxLEFT,
-                          &button.rect);
+        m_art->DrawButton ( dc,
+                            wnd,
+                            buttonRect,
+                            button.id,
+                            button.curState,
+                            wxLEFT,
+                            &button.rect );
 
         offset += button.rect.GetWidth();
-        left_buttons_width += button.rect.GetWidth();
+        leftButtonsWidth += button.rect.GetWidth();
     }
 
-    offset = left_buttons_width;
+    offset = leftButtonsWidth;
 
-    if (offset == 0)
+    if ( offset == 0 )
+    {
         offset += m_art->GetIndentSize();
+    }
 
 
     // prepare the tab-close-button array
     // make sure tab button entries which aren't used are marked as hidden
-    for (i = page_count; i < m_tab_close_buttons.GetCount(); ++i)
-        m_tab_close_buttons.Item(i).cur_state = wxAUI_BUTTON_STATE_HIDDEN;
+    for ( i = pageCount; i < m_tabCloseButtons.GetCount(); ++i )
+    {
+        m_tabCloseButtons.Item ( i ).curState = wxAUI_BUTTON_STATE_HIDDEN;
+    }
 
     // make sure there are enough tab button entries to accommodate all tabs
-    while (m_tab_close_buttons.GetCount() < page_count)
+    while ( m_tabCloseButtons.GetCount() < pageCount )
     {
         wxAuiTabContainerButton tempbtn;
         tempbtn.id = wxAUI_BUTTON_CLOSE;
         tempbtn.location = wxCENTER;
-        tempbtn.cur_state = wxAUI_BUTTON_STATE_HIDDEN;
-        m_tab_close_buttons.Add(tempbtn);
+        tempbtn.curState = wxAUI_BUTTON_STATE_HIDDEN;
+        m_tabCloseButtons.Add ( tempbtn );
     }
 
 
     // buttons before the tab offset must be set to hidden
-    for (i = 0; i < m_tab_offset; ++i)
+    for ( i = 0; i < m_tabOffset; ++i )
     {
-        m_tab_close_buttons.Item(i).cur_state = wxAUI_BUTTON_STATE_HIDDEN;
+        m_tabCloseButtons.Item ( i ).curState = wxAUI_BUTTON_STATE_HIDDEN;
     }
 
 
     // draw the tabs
 
     size_t active = 999;
-    int active_offset = 0;
-    wxRect active_rect;
+    int activeOffset = 0;
+    wxRect activeRect;
 
-    int x_extent = 0;
+    int xExtent = 0;
     wxRect rect = m_rect;
     rect.y = 0;
     rect.height = m_rect.height;
 
-    for (i = m_tab_offset; i < page_count; ++i)
+    for ( i = m_tabOffset; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        wxAuiTabContainerButton& tab_button = m_tab_close_buttons.Item(i);
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+        wxAuiTabContainerButton & tabButton = m_tabCloseButtons.Item ( i );
 
         // determine if a close button is on this tab
-        if ((m_flags & wxAUI_NB_CLOSE_ON_ALL_TABS) != 0 ||
-            ((m_flags & wxAUI_NB_CLOSE_ON_ACTIVE_TAB) != 0 && page.active))
+        if ( ( m_flags & wxAUI_NB_CLOSE_ON_ALL_TABS ) != 0 ||
+                ( ( m_flags & wxAUI_NB_CLOSE_ON_ACTIVE_TAB ) != 0 && page.active ) )
         {
-            if (tab_button.cur_state == wxAUI_BUTTON_STATE_HIDDEN)
+            if ( tabButton.curState == wxAUI_BUTTON_STATE_HIDDEN )
             {
-                tab_button.id = wxAUI_BUTTON_CLOSE;
-                tab_button.cur_state = wxAUI_BUTTON_STATE_NORMAL;
-                tab_button.location = wxCENTER;
+                tabButton.id = wxAUI_BUTTON_CLOSE;
+                tabButton.curState = wxAUI_BUTTON_STATE_NORMAL;
+                tabButton.location = wxCENTER;
             }
         }
+
         else
         {
-            tab_button.cur_state = wxAUI_BUTTON_STATE_HIDDEN;
+            tabButton.curState = wxAUI_BUTTON_STATE_HIDDEN;
         }
 
         rect.x = offset;
-        rect.width = m_rect.width - right_buttons_width - offset - 2;
+        rect.width = m_rect.width - rightButtonsWidth - offset - 2;
 
-        if (rect.width <= 0)
+        if ( rect.width <= 0 )
+        {
             break;
+        }
 
-        m_art->DrawTab(dc,
-                       wnd,
-                       page,
-                       rect,
-                       tab_button.cur_state,
-                       &page.rect,
-                       &tab_button.rect,
-                       &x_extent);
+        m_art->DrawTab ( dc,
+                         wnd,
+                         page,
+                         rect,
+                         tabButton.curState,
+                         &page.rect,
+                         &tabButton.rect,
+                         &xExtent );
 
-        if (page.active)
+        if ( page.active )
         {
             active = i;
-            active_offset = offset;
-            active_rect = rect;
+            activeOffset = offset;
+            activeRect = rect;
         }
 
-        offset += x_extent;
+        offset += xExtent;
     }
 
 
     // make sure to deactivate buttons which are off the screen to the right
-    for (++i; i < m_tab_close_buttons.GetCount(); ++i)
+    for ( ++i; i < m_tabCloseButtons.GetCount(); ++i )
     {
-        m_tab_close_buttons.Item(i).cur_state = wxAUI_BUTTON_STATE_HIDDEN;
+        m_tabCloseButtons.Item ( i ).curState = wxAUI_BUTTON_STATE_HIDDEN;
     }
 
 
     // draw the active tab again so it stands in the foreground
-    if (active >= m_tab_offset && active < m_pages.GetCount())
+    if ( active >= m_tabOffset && active < m_pages.GetCount() )
     {
-        wxAuiNotebookPage& page = m_pages.Item(active);
+        wxAuiNotebookPage & page = m_pages.Item ( active );
 
-        wxAuiTabContainerButton& tab_button = m_tab_close_buttons.Item(active);
+        wxAuiTabContainerButton & tabButton = m_tabCloseButtons.Item ( active );
 
-        rect.x = active_offset;
-        m_art->DrawTab(dc,
-                       wnd,
-                       page,
-                       active_rect,
-                       tab_button.cur_state,
-                       &page.rect,
-                       &tab_button.rect,
-                       &x_extent);
+        rect.x = activeOffset;
+        m_art->DrawTab ( dc,
+                         wnd,
+                         page,
+                         activeRect,
+                         tabButton.curState,
+                         &page.rect,
+                         &tabButton.rect,
+                         &xExtent );
     }
 
 
-    raw_dc->Blit(m_rect.x, m_rect.y,
-                 m_rect.GetWidth(), m_rect.GetHeight(),
-                 &dc, 0, 0);
+    rawDc->Blit ( m_rect.x, m_rect.y,
+                  m_rect.GetWidth(), m_rect.GetHeight(),
+                  &dc, 0, 0 );
 }
 
 // Is the tab visible?
-bool wxAuiTabContainer::IsTabVisible(int tabPage, int tabOffset, wxDC* dc, wxWindow* wnd)
+bool wxAuiTabContainer::IsTabVisible ( int tabPage, int tabOffset, wxDC * dc, wxWindow * wnd )
 {
-    if (!dc || !dc->IsOk())
+    if ( !dc || !dc->IsOk() )
+    {
         return false;
+    }
 
     size_t i;
-    size_t page_count = m_pages.GetCount();
-    size_t button_count = m_buttons.GetCount();
+    size_t pageCount = m_pages.GetCount();
+    size_t buttonCount = m_buttons.GetCount();
 
     // Hasn't been rendered yet; assume it's visible
-    if (m_tab_close_buttons.GetCount() < page_count)
+    if ( m_tabCloseButtons.GetCount() < pageCount )
+    {
         return true;
+    }
 
     // First check if both buttons are disabled - if so, there's no need to
     // check further for visibility.
     int arrowButtonVisibleCount = 0;
-    for (i = 0; i < button_count; ++i)
+
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(i);
-        if (button.id == wxAUI_BUTTON_LEFT ||
-            button.id == wxAUI_BUTTON_RIGHT)
+        wxAuiTabContainerButton & button = m_buttons.Item ( i );
+
+        if ( button.id == wxAUI_BUTTON_LEFT ||
+                button.id == wxAUI_BUTTON_RIGHT )
         {
-            if ((button.cur_state & wxAUI_BUTTON_STATE_HIDDEN) == 0)
+            if ( ( button.curState & wxAUI_BUTTON_STATE_HIDDEN ) == 0 )
+            {
                 arrowButtonVisibleCount ++;
+            }
         }
     }
 
     // Tab must be visible
-    if (arrowButtonVisibleCount == 0)
+    if ( arrowButtonVisibleCount == 0 )
+    {
         return true;
+    }
 
     // If tab is less than the given offset, it must be invisible by definition
-    if (tabPage < tabOffset)
+    if ( tabPage < tabOffset )
+    {
         return false;
+    }
 
     // draw buttons
-    int left_buttons_width = 0;
-    int right_buttons_width = 0;
+    int leftButtonsWidth = 0;
+    int rightButtonsWidth = 0;
 
     int offset = 0;
 
     // calculate size of the buttons on the right side
     offset = m_rect.x + m_rect.width;
-    for (i = 0; i < button_count; ++i)
+
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
+        wxAuiTabContainerButton & button = m_buttons.Item ( buttonCount - i - 1 );
 
-        if (button.location != wxRIGHT)
+        if ( button.location != wxRIGHT )
+        {
             continue;
-        if (button.cur_state & wxAUI_BUTTON_STATE_HIDDEN)
+        }
+
+        if ( button.curState & wxAUI_BUTTON_STATE_HIDDEN )
+        {
             continue;
+        }
 
         offset -= button.rect.GetWidth();
-        right_buttons_width += button.rect.GetWidth();
+        rightButtonsWidth += button.rect.GetWidth();
     }
 
     offset = 0;
 
     // calculate size of the buttons on the left side
-    for (i = 0; i < button_count; ++i)
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(button_count - i - 1);
+        wxAuiTabContainerButton & button = m_buttons.Item ( buttonCount - i - 1 );
 
-        if (button.location != wxLEFT)
+        if ( button.location != wxLEFT )
+        {
             continue;
-        if (button.cur_state & wxAUI_BUTTON_STATE_HIDDEN)
+        }
+
+        if ( button.curState & wxAUI_BUTTON_STATE_HIDDEN )
+        {
             continue;
+        }
 
         offset += button.rect.GetWidth();
-        left_buttons_width += button.rect.GetWidth();
+        leftButtonsWidth += button.rect.GetWidth();
     }
 
-    offset = left_buttons_width;
+    offset = leftButtonsWidth;
 
-    if (offset == 0)
+    if ( offset == 0 )
+    {
         offset += m_art->GetIndentSize();
+    }
 
-    wxRect active_rect;
+    wxRect activeRect;
 
     wxRect rect = m_rect;
     rect.y = 0;
     rect.height = m_rect.height;
 
     // See if the given page is visible at the given tab offset (effectively scroll position)
-    for (i = tabOffset; i < page_count; ++i)
+    for ( i = tabOffset; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        wxAuiTabContainerButton& tab_button = m_tab_close_buttons.Item(i);
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+        wxAuiTabContainerButton & tabButton = m_tabCloseButtons.Item ( i );
 
         rect.x = offset;
-        rect.width = m_rect.width - right_buttons_width - offset - 2;
+        rect.width = m_rect.width - rightButtonsWidth - offset - 2;
 
-        if (rect.width <= 0)
-            return false; // haven't found the tab, and we've run out of space, so return false
+        if ( rect.width <= 0 )
+        {
+            return false;    // haven't found the tab, and we've run out of space, so return false
+        }
 
-        int x_extent = 0;
-        wxSize size = m_art->GetTabSize(*dc,
-                            wnd,
-                            page.caption,
-                            page.bitmap,
-                            page.active,
-                            tab_button.cur_state,
-                            &x_extent);
+        int xExtent = 0;
+        wxSize size = m_art->GetTabSize ( *dc,
+                                          wnd,
+                                          page.caption,
+                                          page.bitmap,
+                                          page.active,
+                                          tabButton.curState,
+                                          &xExtent );
 
-        offset += x_extent;
+        offset += xExtent;
 
-        if (i == (size_t) tabPage)
+        if ( i == ( size_t ) tabPage )
         {
             // If not all of the tab is visible, and supposing there's space to display it all,
             // we could do better so we return false.
-            if (((m_rect.width - right_buttons_width - offset - 2) <= 0) && ((m_rect.width - right_buttons_width - left_buttons_width) > x_extent))
+            if ( ( ( m_rect.width - rightButtonsWidth - offset - 2 ) <= 0 ) && ( ( m_rect.width - rightButtonsWidth - leftButtonsWidth ) > xExtent ) )
+            {
                 return false;
+            }
+
             else
+            {
                 return true;
+            }
         }
     }
 
@@ -2058,17 +2343,19 @@
 }
 
 // Make the tab visible if it wasn't already
-void wxAuiTabContainer::MakeTabVisible(int tabPage, wxWindow* win)
+void wxAuiTabContainer::MakeTabVisible ( int tabPage, wxWindow * win )
 {
-    wxClientDC dc(win);
-    if (!IsTabVisible(tabPage, GetTabOffset(), & dc, win))
+    wxClientDC dc ( win );
+
+    if ( !IsTabVisible ( tabPage, GetTabOffset(), & dc, win ) )
     {
         int i;
-        for (i = 0; i < (int) m_pages.GetCount(); i++)
+
+        for ( i = 0; i < ( int ) m_pages.GetCount(); i++ )
         {
-            if (IsTabVisible(tabPage, i, & dc, win))
+            if ( IsTabVisible ( tabPage, i, & dc, win ) )
             {
-                SetTabOffset(i);
+                SetTabOffset ( i );
                 win->Refresh();
                 return;
             }
@@ -2079,27 +2366,36 @@
 // TabHitTest() tests if a tab was hit, passing the window pointer
 // back if that condition was fulfilled.  The function returns
 // true if a tab was hit, otherwise false
-bool wxAuiTabContainer::TabHitTest(int x, int y, wxWindow** hit) const
+bool wxAuiTabContainer::TabHitTest ( int x, int y, wxWindow ** hit ) const
 {
-    if (!m_rect.Contains(x,y))
+    if ( !m_rect.Contains ( x, y ) )
+    {
         return false;
+    }
 
-    wxAuiTabContainerButton* btn = NULL;
-    if (ButtonHitTest(x, y, &btn) && !(btn->cur_state & wxAUI_BUTTON_STATE_DISABLED))
+    wxAuiTabContainerButton * btn = NULL;
+
+    if ( ButtonHitTest ( x, y, &btn ) && ! ( btn->curState & wxAUI_BUTTON_STATE_DISABLED ) )
     {
-        if (m_buttons.Index(*btn) != wxNOT_FOUND)
+        if ( m_buttons.Index ( *btn ) != wxNOT_FOUND )
+        {
             return false;
+        }
     }
 
-    size_t i, page_count = m_pages.GetCount();
+    size_t i, pageCount = m_pages.GetCount();
 
-    for (i = m_tab_offset; i < page_count; ++i)
+    for ( i = m_tabOffset; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = m_pages.Item(i);
-        if (page.rect.Contains(x,y))
+        wxAuiNotebookPage & page = m_pages.Item ( i );
+
+        if ( page.rect.Contains ( x, y ) )
         {
-            if (hit)
+            if ( hit )
+            {
                 *hit = page.window;
+            }
+
             return true;
         }
     }
@@ -2109,38 +2405,50 @@
 
 // ButtonHitTest() tests if a button was hit. The function returns
 // true if a button was hit, otherwise false
-bool wxAuiTabContainer::ButtonHitTest(int x, int y,
-                                      wxAuiTabContainerButton** hit) const
+bool wxAuiTabContainer::ButtonHitTest ( int x, int y,
+                                        wxAuiTabContainerButton ** hit ) const
 {
-    if (!m_rect.Contains(x,y))
+    if ( !m_rect.Contains ( x, y ) )
+    {
         return false;
+    }
 
-    size_t i, button_count;
+    size_t i, buttonCount;
 
 
-    button_count = m_buttons.GetCount();
-    for (i = 0; i < button_count; ++i)
+    buttonCount = m_buttons.GetCount();
+
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_buttons.Item(i);
-        if (button.rect.Contains(x,y) &&
-            !(button.cur_state & wxAUI_BUTTON_STATE_HIDDEN ))
+        wxAuiTabContainerButton & button = m_buttons.Item ( i );
+
+        if ( button.rect.Contains ( x, y ) &&
+                ! ( button.curState & wxAUI_BUTTON_STATE_HIDDEN ) )
         {
-            if (hit)
+            if ( hit )
+            {
                 *hit = &button;
+            }
+
             return true;
         }
     }
 
-    button_count = m_tab_close_buttons.GetCount();
-    for (i = 0; i < button_count; ++i)
+    buttonCount = m_tabCloseButtons.GetCount();
+
+    for ( i = 0; i < buttonCount; ++i )
     {
-        wxAuiTabContainerButton& button = m_tab_close_buttons.Item(i);
-        if (button.rect.Contains(x,y) &&
-            !(button.cur_state & (wxAUI_BUTTON_STATE_HIDDEN |
-                                   wxAUI_BUTTON_STATE_DISABLED)))
+        wxAuiTabContainerButton & button = m_tabCloseButtons.Item ( i );
+
+        if ( button.rect.Contains ( x, y ) &&
+                ! ( button.curState & ( wxAUI_BUTTON_STATE_HIDDEN |
+                                        wxAUI_BUTTON_STATE_DISABLED ) ) )
         {
-            if (hit)
+            if ( hit )
+            {
                 *hit = &button;
+            }
+
             return true;
         }
     }
@@ -2153,18 +2461,20 @@
 // the utility function ShowWnd() is the same as show,
 // except it handles wxAuiMDIChildFrame windows as well,
 // as the Show() method on this class is "unplugged"
-static void ShowWnd(wxWindow* wnd, bool show)
+static void ShowWnd ( wxWindow * wnd, bool show )
 {
 #if wxUSE_MDI
-    if (wnd->IsKindOf(CLASSINFO(wxAuiMDIChildFrame)))
+
+    if ( wnd->IsKindOf ( CLASSINFO ( wxAuiMDIChildFrame ) ) )
     {
-        wxAuiMDIChildFrame* cf = (wxAuiMDIChildFrame*)wnd;
-        cf->DoShow(show);
+        wxAuiMDIChildFrame * cf = ( wxAuiMDIChildFrame * ) wnd;
+        cf->DoShow ( show );
     }
+
     else
 #endif
     {
-        wnd->Show(show);
+        wnd->Show ( show );
     }
 }
 
@@ -2173,26 +2483,30 @@
 // hides all of the other windows (in that order)
 void wxAuiTabContainer::DoShowHide()
 {
-    wxAuiNotebookPageArray& pages = GetPages();
-    size_t i, page_count = pages.GetCount();
+    wxAuiNotebookPageArray & pages = GetPages();
+    size_t i, pageCount = pages.GetCount();
 
     // show new active page first
-    for (i = 0; i < page_count; ++i)
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = pages.Item(i);
-        if (page.active)
+        wxAuiNotebookPage & page = pages.Item ( i );
+
+        if ( page.active )
         {
-            ShowWnd(page.window, true);
+            ShowWnd ( page.window, true );
             break;
         }
     }
 
     // hide all other pages
-    for (i = 0; i < page_count; ++i)
+    for ( i = 0; i < pageCount; ++i )
     {
-        wxAuiNotebookPage& page = pages.Item(i);
-        if (!page.active)
-            ShowWnd(page.window, false);
+        wxAuiNotebookPage & page = pages.Item ( i );
+
+        if ( !page.active )
+        {
+            ShowWnd ( page.window, false );
+        }
     }
 }
 
@@ -2205,364 +2519,392 @@
 
 
 
-BEGIN_EVENT_TABLE(wxAuiTabCtrl, wxControl)
-    EVT_PAINT(wxAuiTabCtrl::OnPaint)
-    EVT_ERASE_BACKGROUND(wxAuiTabCtrl::OnEraseBackground)
-    EVT_SIZE(wxAuiTabCtrl::OnSize)
-    EVT_LEFT_DOWN(wxAuiTabCtrl::OnLeftDown)
-    EVT_LEFT_DCLICK(wxAuiTabCtrl::OnLeftDClick)
-    EVT_LEFT_UP(wxAuiTabCtrl::OnLeftUp)
-    EVT_MIDDLE_DOWN(wxAuiTabCtrl::OnMiddleDown)
-    EVT_MIDDLE_UP(wxAuiTabCtrl::OnMiddleUp)
-    EVT_RIGHT_DOWN(wxAuiTabCtrl::OnRightDown)
-    EVT_RIGHT_UP(wxAuiTabCtrl::OnRightUp)
-    EVT_MOTION(wxAuiTabCtrl::OnMotion)
-    EVT_LEAVE_WINDOW(wxAuiTabCtrl::OnLeaveWindow)
-    EVT_AUINOTEBOOK_BUTTON(wxID_ANY, wxAuiTabCtrl::OnButton)
-    EVT_SET_FOCUS(wxAuiTabCtrl::OnSetFocus)
-    EVT_KILL_FOCUS(wxAuiTabCtrl::OnKillFocus)
-    EVT_CHAR(wxAuiTabCtrl::OnChar)
-    EVT_MOUSE_CAPTURE_LOST(wxAuiTabCtrl::OnCaptureLost)
+BEGIN_EVENT_TABLE ( wxAuiTabCtrl, wxControl )
+    EVT_PAINT ( wxAuiTabCtrl::OnPaint )
+    EVT_ERASE_BACKGROUND ( wxAuiTabCtrl::OnEraseBackground )
+    EVT_SIZE ( wxAuiTabCtrl::OnSize )
+    EVT_LEFT_DOWN ( wxAuiTabCtrl::OnLeftDown )
+    EVT_LEFT_DCLICK ( wxAuiTabCtrl::OnLeftDClick )
+    EVT_LEFT_UP ( wxAuiTabCtrl::OnLeftUp )
+    EVT_MIDDLE_DOWN ( wxAuiTabCtrl::OnMiddleDown )
+    EVT_MIDDLE_UP ( wxAuiTabCtrl::OnMiddleUp )
+    EVT_RIGHT_DOWN ( wxAuiTabCtrl::OnRightDown )
+    EVT_RIGHT_UP ( wxAuiTabCtrl::OnRightUp )
+    EVT_MOTION ( wxAuiTabCtrl::OnMotion )
+    EVT_LEAVE_WINDOW ( wxAuiTabCtrl::OnLeaveWindow )
+    EVT_AUINOTEBOOK_BUTTON ( wxID_ANY, wxAuiTabCtrl::OnButton )
+    EVT_SET_FOCUS ( wxAuiTabCtrl::OnSetFocus )
+    EVT_KILL_FOCUS ( wxAuiTabCtrl::OnKillFocus )
+    EVT_CHAR ( wxAuiTabCtrl::OnChar )
+    EVT_MOUSE_CAPTURE_LOST ( wxAuiTabCtrl::OnCaptureLost )
 END_EVENT_TABLE()
 
 
-wxAuiTabCtrl::wxAuiTabCtrl(wxWindow* parent,
-                           wxWindowID id,
-                           const wxPoint& pos,
-                           const wxSize& size,
-                           long style) : wxControl(parent, id, pos, size, style)
+wxAuiTabCtrl::wxAuiTabCtrl ( wxWindow * parent,
+                             wxWindowID id,
+                             const wxPoint & pos,
+                             const wxSize & size,
+                             long style ) : wxControl ( parent, id, pos, size, style )
 {
-    SetName(wxT("wxAuiTabCtrl"));
-    m_click_pt = wxDefaultPosition;
-    m_is_dragging = false;
-    m_hover_button = NULL;
-    m_pressed_button = NULL;
+    SetName ( wxT ( "wxAuiTabCtrl" ) );
+    m_clickPt = wxDefaultPosition;
+    m_isDragging = false;
+    m_hoverButton = NULL;
+    m_pressedButton = NULL;
 }
 
 wxAuiTabCtrl::~wxAuiTabCtrl()
 {
 }
 
-void wxAuiTabCtrl::OnPaint(wxPaintEvent&)
+void wxAuiTabCtrl::OnPaint ( wxPaintEvent & )
 {
-    wxPaintDC dc(this);
+    wxPaintDC dc ( this );
 
-    dc.SetFont(GetFont());
+    dc.SetFont ( GetFont() );
 
-    if (GetPageCount() > 0)
-        Render(&dc, this);
+    if ( GetPageCount() > 0 )
+    {
+        Render ( &dc, this );
+    }
 }
 
-void wxAuiTabCtrl::OnEraseBackground(wxEraseEvent& WXUNUSED(evt))
+void wxAuiTabCtrl::OnEraseBackground ( wxEraseEvent & WXUNUSED ( evt ) )
 {
 }
 
-void wxAuiTabCtrl::OnSize(wxSizeEvent& evt)
+void wxAuiTabCtrl::OnSize ( wxSizeEvent & evt )
 {
     wxSize s = evt.GetSize();
-    wxRect r(0, 0, s.GetWidth(), s.GetHeight());
-    SetRect(r);
+    wxRect r ( 0, 0, s.GetWidth(), s.GetHeight() );
+    SetRect ( r );
 }
 
-void wxAuiTabCtrl::OnLeftDown(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnLeftDown ( wxMouseEvent & evt )
 {
     CaptureMouse();
-    m_click_pt = wxDefaultPosition;
-    m_is_dragging = false;
-    m_click_tab = NULL;
-    m_pressed_button = NULL;
+    m_clickPt = wxDefaultPosition;
+    m_isDragging = false;
+    m_clickTab = NULL;
+    m_pressedButton = NULL;
 
 
-    wxWindow* wnd;
-    if (TabHitTest(evt.m_x, evt.m_y, &wnd))
+    wxWindow * wnd;
+
+    if ( TabHitTest ( evt.m_x, evt.m_y, &wnd ) )
     {
-        int new_selection = GetIdxFromWindow(wnd);
+        int newSelection = GetIdxFromWindow ( wnd );
 
         // wxAuiNotebooks always want to receive this event
         // even if the tab is already active, because they may
         // have multiple tab controls
-        if (new_selection != GetActivePage() ||
-            GetParent()->IsKindOf(CLASSINFO(wxAuiNotebook)))
+        if ( newSelection != GetActivePage() ||
+                GetParent()->IsKindOf ( CLASSINFO ( wxAuiNotebook ) ) )
         {
-            wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId);
-            e.SetSelection(new_selection);
-            e.SetOldSelection(GetActivePage());
-            e.SetEventObject(this);
-            GetEventHandler()->ProcessEvent(e);
+            wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId );
+            e.SetSelection ( newSelection );
+            e.SetOldSelection ( GetActivePage() );
+            e.SetEventObject ( this );
+            GetEventHandler()->ProcessEvent ( e );
         }
 
-        m_click_pt.x = evt.m_x;
-        m_click_pt.y = evt.m_y;
-        m_click_tab = wnd;
+        m_clickPt.x = evt.m_x;
+        m_clickPt.y = evt.m_y;
+        m_clickTab = wnd;
     }
 
-    if (m_hover_button)
+    if ( m_hoverButton )
     {
-        m_pressed_button = m_hover_button;
-        m_pressed_button->cur_state = wxAUI_BUTTON_STATE_PRESSED;
+        m_pressedButton = m_hoverButton;
+        m_pressedButton->curState = wxAUI_BUTTON_STATE_PRESSED;
         Refresh();
         Update();
     }
 }
 
-void wxAuiTabCtrl::OnCaptureLost(wxMouseCaptureLostEvent& WXUNUSED(event))
+void wxAuiTabCtrl::OnCaptureLost ( wxMouseCaptureLostEvent & WXUNUSED ( event ) )
 {
-    if (m_is_dragging)
+    if ( m_isDragging )
     {
-        m_is_dragging = false;
+        m_isDragging = false;
 
-        wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG, m_windowId);
-        evt.SetSelection(GetIdxFromWindow(m_click_tab));
-        evt.SetOldSelection(evt.GetSelection());
-        evt.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(evt);
+        wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG, m_windowId );
+        evt.SetSelection ( GetIdxFromWindow ( m_clickTab ) );
+        evt.SetOldSelection ( evt.GetSelection() );
+        evt.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( evt );
     }
 }
 
-void wxAuiTabCtrl::OnLeftUp(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnLeftUp ( wxMouseEvent & evt )
 {
-    if (GetCapture() == this)
+    if ( GetCapture() == this )
+    {
         ReleaseMouse();
+    }
 
-    if (m_is_dragging)
+    if ( m_isDragging )
     {
-        m_is_dragging = false;
+        m_isDragging = false;
 
-        wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, m_windowId);
-        evt.SetSelection(GetIdxFromWindow(m_click_tab));
-        evt.SetOldSelection(evt.GetSelection());
-        evt.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(evt);
+        wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, m_windowId );
+        evt.SetSelection ( GetIdxFromWindow ( m_clickTab ) );
+        evt.SetOldSelection ( evt.GetSelection() );
+        evt.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( evt );
 
         return;
     }
 
-    if (m_pressed_button)
+    if ( m_pressedButton )
     {
         // make sure we're still clicking the button
-        wxAuiTabContainerButton* button = NULL;
-        if (!ButtonHitTest(evt.m_x, evt.m_y, &button) ||
-            button->cur_state & wxAUI_BUTTON_STATE_DISABLED)
+        wxAuiTabContainerButton * button = NULL;
+
+        if ( !ButtonHitTest ( evt.m_x, evt.m_y, &button ) ||
+                button->curState & wxAUI_BUTTON_STATE_DISABLED )
+        {
             return;
+        }
 
-        if (button != m_pressed_button)
+        if ( button != m_pressedButton )
         {
-            m_pressed_button = NULL;
+            m_pressedButton = NULL;
             return;
         }
 
         Refresh();
         Update();
 
-        if (!(m_pressed_button->cur_state & wxAUI_BUTTON_STATE_DISABLED))
+        if ( ! ( m_pressedButton->curState & wxAUI_BUTTON_STATE_DISABLED ) )
         {
-            wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_BUTTON, m_windowId);
-            evt.SetSelection(GetIdxFromWindow(m_click_tab));
-            evt.SetInt(m_pressed_button->id);
-            evt.SetEventObject(this);
-            GetEventHandler()->ProcessEvent(evt);
+            wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_BUTTON, m_windowId );
+            evt.SetSelection ( GetIdxFromWindow ( m_clickTab ) );
+            evt.SetInt ( m_pressedButton->id );
+            evt.SetEventObject ( this );
+            GetEventHandler()->ProcessEvent ( evt );
         }
 
-        m_pressed_button = NULL;
+        m_pressedButton = NULL;
     }
 
-    m_click_pt = wxDefaultPosition;
-    m_is_dragging = false;
-    m_click_tab = NULL;
+    m_clickPt = wxDefaultPosition;
+    m_isDragging = false;
+    m_clickTab = NULL;
 }
 
-void wxAuiTabCtrl::OnMiddleUp(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnMiddleUp ( wxMouseEvent & evt )
 {
-    wxWindow* wnd = NULL;
-    if (!TabHitTest(evt.m_x, evt.m_y, &wnd))
+    wxWindow * wnd = NULL;
+
+    if ( !TabHitTest ( evt.m_x, evt.m_y, &wnd ) )
+    {
         return;
+    }
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, m_windowId);
-    e.SetEventObject(this);
-    e.SetSelection(GetIdxFromWindow(wnd));
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, m_windowId );
+    e.SetEventObject ( this );
+    e.SetSelection ( GetIdxFromWindow ( wnd ) );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiTabCtrl::OnMiddleDown(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnMiddleDown ( wxMouseEvent & evt )
 {
-    wxWindow* wnd = NULL;
-    if (!TabHitTest(evt.m_x, evt.m_y, &wnd))
+    wxWindow * wnd = NULL;
+
+    if ( !TabHitTest ( evt.m_x, evt.m_y, &wnd ) )
+    {
         return;
+    }
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, m_windowId);
-    e.SetEventObject(this);
-    e.SetSelection(GetIdxFromWindow(wnd));
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, m_windowId );
+    e.SetEventObject ( this );
+    e.SetSelection ( GetIdxFromWindow ( wnd ) );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiTabCtrl::OnRightUp(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnRightUp ( wxMouseEvent & evt )
 {
-    wxWindow* wnd = NULL;
-    if (!TabHitTest(evt.m_x, evt.m_y, &wnd))
+    wxWindow * wnd = NULL;
+
+    if ( !TabHitTest ( evt.m_x, evt.m_y, &wnd ) )
+    {
         return;
+    }
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, m_windowId);
-    e.SetEventObject(this);
-    e.SetSelection(GetIdxFromWindow(wnd));
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, m_windowId );
+    e.SetEventObject ( this );
+    e.SetSelection ( GetIdxFromWindow ( wnd ) );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiTabCtrl::OnRightDown(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnRightDown ( wxMouseEvent & evt )
 {
-    wxWindow* wnd = NULL;
-    if (!TabHitTest(evt.m_x, evt.m_y, &wnd))
+    wxWindow * wnd = NULL;
+
+    if ( !TabHitTest ( evt.m_x, evt.m_y, &wnd ) )
+    {
         return;
+    }
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, m_windowId);
-    e.SetEventObject(this);
-    e.SetSelection(GetIdxFromWindow(wnd));
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, m_windowId );
+    e.SetEventObject ( this );
+    e.SetSelection ( GetIdxFromWindow ( wnd ) );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiTabCtrl::OnLeftDClick(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnLeftDClick ( wxMouseEvent & evt )
 {
-    wxWindow* wnd;
-    wxAuiTabContainerButton* button;
-    if (!TabHitTest(evt.m_x, evt.m_y, &wnd) && !ButtonHitTest(evt.m_x, evt.m_y, &button))
+    wxWindow * wnd;
+    wxAuiTabContainerButton * button;
+
+    if ( !TabHitTest ( evt.m_x, evt.m_y, &wnd ) && !ButtonHitTest ( evt.m_x, evt.m_y, &button ) )
     {
-        wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, m_windowId);
-        e.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(e);
+        wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, m_windowId );
+        e.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( e );
     }
 }
 
-void wxAuiTabCtrl::OnMotion(wxMouseEvent& evt)
+void wxAuiTabCtrl::OnMotion ( wxMouseEvent & evt )
 {
     wxPoint pos = evt.GetPosition();
 
     // check if the mouse is hovering above a button
-    wxAuiTabContainerButton* button;
-    if (ButtonHitTest(pos.x, pos.y, &button) && !(button->cur_state & wxAUI_BUTTON_STATE_DISABLED))
+    wxAuiTabContainerButton * button;
+
+    if ( ButtonHitTest ( pos.x, pos.y, &button ) && ! ( button->curState & wxAUI_BUTTON_STATE_DISABLED ) )
     {
-        if (m_hover_button && button != m_hover_button)
+        if ( m_hoverButton && button != m_hoverButton )
         {
-            m_hover_button->cur_state = wxAUI_BUTTON_STATE_NORMAL;
-            m_hover_button = NULL;
+            m_hoverButton->curState = wxAUI_BUTTON_STATE_NORMAL;
+            m_hoverButton = NULL;
             Refresh();
             Update();
         }
 
-        if (button->cur_state != wxAUI_BUTTON_STATE_HOVER)
+        if ( button->curState != wxAUI_BUTTON_STATE_HOVER )
         {
-            button->cur_state = wxAUI_BUTTON_STATE_HOVER;
+            button->curState = wxAUI_BUTTON_STATE_HOVER;
             Refresh();
             Update();
-            m_hover_button = button;
+            m_hoverButton = button;
             return;
         }
     }
+
     else
     {
-        if (m_hover_button)
+        if ( m_hoverButton )
         {
-            m_hover_button->cur_state = wxAUI_BUTTON_STATE_NORMAL;
-            m_hover_button = NULL;
+            m_hoverButton->curState = wxAUI_BUTTON_STATE_NORMAL;
+            m_hoverButton = NULL;
             Refresh();
             Update();
         }
     }
 
 
-    if (!evt.LeftIsDown() || m_click_pt == wxDefaultPosition)
+    if ( !evt.LeftIsDown() || m_clickPt == wxDefaultPosition )
+    {
         return;
+    }
 
-    if (m_is_dragging)
+    if ( m_isDragging )
     {
-        wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, m_windowId);
-        evt.SetSelection(GetIdxFromWindow(m_click_tab));
-        evt.SetOldSelection(evt.GetSelection());
-        evt.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(evt);
+        wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, m_windowId );
+        evt.SetSelection ( GetIdxFromWindow ( m_clickTab ) );
+        evt.SetOldSelection ( evt.GetSelection() );
+        evt.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( evt );
         return;
     }
 
 
-    int drag_x_threshold = wxSystemSettings::GetMetric(wxSYS_DRAG_X);
-    int drag_y_threshold = wxSystemSettings::GetMetric(wxSYS_DRAG_Y);
+    int dragXThreshold = wxSystemSettings::GetMetric ( wxSYS_DRAG_X );
+    int dragYThreshold = wxSystemSettings::GetMetric ( wxSYS_DRAG_Y );
 
-    if (abs(pos.x - m_click_pt.x) > drag_x_threshold ||
-        abs(pos.y - m_click_pt.y) > drag_y_threshold)
+    if ( abs ( pos.x - m_clickPt.x ) > dragXThreshold ||
+            abs ( pos.y - m_clickPt.y ) > dragYThreshold )
     {
-        wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, m_windowId);
-        evt.SetSelection(GetIdxFromWindow(m_click_tab));
-        evt.SetOldSelection(evt.GetSelection());
-        evt.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(evt);
+        wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, m_windowId );
+        evt.SetSelection ( GetIdxFromWindow ( m_clickTab ) );
+        evt.SetOldSelection ( evt.GetSelection() );
+        evt.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( evt );
 
-        m_is_dragging = true;
+        m_isDragging = true;
     }
 }
 
-void wxAuiTabCtrl::OnLeaveWindow(wxMouseEvent& WXUNUSED(event))
+void wxAuiTabCtrl::OnLeaveWindow ( wxMouseEvent & WXUNUSED ( event ) )
 {
-    if (m_hover_button)
+    if ( m_hoverButton )
     {
-        m_hover_button->cur_state = wxAUI_BUTTON_STATE_NORMAL;
-        m_hover_button = NULL;
+        m_hoverButton->curState = wxAUI_BUTTON_STATE_NORMAL;
+        m_hoverButton = NULL;
         Refresh();
         Update();
     }
 }
 
-void wxAuiTabCtrl::OnButton(wxAuiNotebookEvent& event)
+void wxAuiTabCtrl::OnButton ( wxAuiNotebookEvent & event )
 {
     int button = event.GetInt();
 
-    if (button == wxAUI_BUTTON_LEFT || button == wxAUI_BUTTON_RIGHT)
+    if ( button == wxAUI_BUTTON_LEFT || button == wxAUI_BUTTON_RIGHT )
     {
-        if (button == wxAUI_BUTTON_LEFT)
+        if ( button == wxAUI_BUTTON_LEFT )
         {
-            if (GetTabOffset() > 0)
+            if ( GetTabOffset() > 0 )
             {
-                SetTabOffset(GetTabOffset()-1);
+                SetTabOffset ( GetTabOffset() - 1 );
                 Refresh();
                 Update();
             }
         }
+
         else
         {
-            SetTabOffset(GetTabOffset()+1);
+            SetTabOffset ( GetTabOffset() + 1 );
             Refresh();
             Update();
         }
     }
-    else if (button == wxAUI_BUTTON_WINDOWLIST)
+
+    else if ( button == wxAUI_BUTTON_WINDOWLIST )
     {
-        int idx = GetArtProvider()->ShowDropDown(this, m_pages, GetActivePage());
+        int idx = GetArtProvider()->ShowDropDown ( this, m_pages, GetActivePage() );
 
-        if (idx != -1)
+        if ( idx != -1 )
         {
-            wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId);
-            e.SetSelection(idx);
-            e.SetOldSelection(GetActivePage());
-            e.SetEventObject(this);
-            GetEventHandler()->ProcessEvent(e);
+            wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId );
+            e.SetSelection ( idx );
+            e.SetOldSelection ( GetActivePage() );
+            e.SetEventObject ( this );
+            GetEventHandler()->ProcessEvent ( e );
         }
     }
+
     else
     {
         event.Skip();
     }
 }
 
-void wxAuiTabCtrl::OnSetFocus(wxFocusEvent& WXUNUSED(event))
+void wxAuiTabCtrl::OnSetFocus ( wxFocusEvent & WXUNUSED ( event ) )
 {
     Refresh();
 }
 
-void wxAuiTabCtrl::OnKillFocus(wxFocusEvent& WXUNUSED(event))
+void wxAuiTabCtrl::OnKillFocus ( wxFocusEvent & WXUNUSED ( event ) )
 {
     Refresh();
 }
 
-void wxAuiTabCtrl::OnChar(wxKeyEvent& event)
+void wxAuiTabCtrl::OnChar ( wxKeyEvent & event )
 {
-    if (GetActivePage() == -1)
+    if ( GetActivePage() == -1 )
     {
         event.Skip();
         return;
@@ -2575,52 +2917,74 @@
 
     int key = event.GetKeyCode();
 
-    if (key == WXK_NUMPAD_PAGEUP)
+    if ( key == WXK_NUMPAD_PAGEUP )
+    {
         key = WXK_PAGEUP;
-    if (key == WXK_NUMPAD_PAGEDOWN)
+    }
+
+    if ( key == WXK_NUMPAD_PAGEDOWN )
+    {
         key = WXK_PAGEDOWN;
-    if (key == WXK_NUMPAD_HOME)
+    }
+
+    if ( key == WXK_NUMPAD_HOME )
+    {
         key = WXK_HOME;
-    if (key == WXK_NUMPAD_END)
+    }
+
+    if ( key == WXK_NUMPAD_END )
+    {
         key = WXK_END;
-    if (key == WXK_NUMPAD_LEFT)
+    }
+
+    if ( key == WXK_NUMPAD_LEFT )
+    {
         key = WXK_LEFT;
-    if (key == WXK_NUMPAD_RIGHT)
+    }
+
+    if ( key == WXK_NUMPAD_RIGHT )
+    {
         key = WXK_RIGHT;
+    }
 
-    if (key == WXK_TAB || key == WXK_PAGEUP || key == WXK_PAGEDOWN)
+    if ( key == WXK_TAB || key == WXK_PAGEUP || key == WXK_PAGEDOWN )
     {
         bool bCtrlDown = event.ControlDown();
         bool bShiftDown = event.ShiftDown();
 
-        bool bForward = (key == WXK_TAB && !bShiftDown) || (key == WXK_PAGEDOWN);
-        bool bWindowChange = (key == WXK_PAGEUP) || (key == WXK_PAGEDOWN) || bCtrlDown;
-        bool bFromTab = (key == WXK_TAB);
+        bool bForward = ( key == WXK_TAB && !bShiftDown ) || ( key == WXK_PAGEDOWN );
+        bool bWindowChange = ( key == WXK_PAGEUP ) || ( key == WXK_PAGEDOWN ) || bCtrlDown;
+        bool bFromTab = ( key == WXK_TAB );
 
-        wxAuiNotebook* nb = wxDynamicCast(GetParent(), wxAuiNotebook);
-        if (!nb)
+        wxAuiNotebook * nb = wxDynamicCast ( GetParent(), wxAuiNotebook );
+
+        if ( !nb )
         {
             event.Skip();
             return;
         }
 
         wxNavigationKeyEvent keyEvent;
-        keyEvent.SetDirection(bForward);
-        keyEvent.SetWindowChange(bWindowChange);
-        keyEvent.SetFromTab(bFromTab);
-        keyEvent.SetEventObject(nb);
+        keyEvent.SetDirection ( bForward );
+        keyEvent.SetWindowChange ( bWindowChange );
+        keyEvent.SetFromTab ( bFromTab );
+        keyEvent.SetEventObject ( nb );
 
-        if (!nb->GetEventHandler()->ProcessEvent(keyEvent))
+        if ( !nb->GetEventHandler()->ProcessEvent ( keyEvent ) )
         {
             // Not processed? Do an explicit tab into the page.
-            wxWindow* win = GetWindowFromIdx(GetActivePage());
-            if (win)
+            wxWindow * win = GetWindowFromIdx ( GetActivePage() );
+
+            if ( win )
+            {
                 win->SetFocus();
+            }
         }
+
         return;
     }
 
-    if (m_pages.GetCount() < 2)
+    if ( m_pages.GetCount() < 2 )
     {
         event.Skip();
         return;
@@ -2629,58 +2993,79 @@
     int newPage = -1;
 
     int forwardKey, backwardKey;
-    if (GetLayoutDirection() == wxLayout_RightToLeft)
+
+    if ( GetLayoutDirection() == wxLayout_RightToLeft )
     {
         forwardKey = WXK_LEFT;
         backwardKey = WXK_RIGHT;
     }
+
     else
-     {
+    {
         forwardKey = WXK_RIGHT;
         backwardKey = WXK_LEFT;
     }
 
-    if (key == forwardKey)
+    if ( key == forwardKey )
     {
-        if (m_pages.GetCount() > 1)
+        if ( m_pages.GetCount() > 1 )
         {
-            if (GetActivePage() == -1)
+            if ( GetActivePage() == -1 )
+            {
                 newPage = 0;
-            else if (GetActivePage() < (int) (m_pages.GetCount() - 1))
+            }
+
+            else if ( GetActivePage() < ( int ) ( m_pages.GetCount() - 1 ) )
+            {
                 newPage = GetActivePage() + 1;
+            }
         }
     }
-    else if (key == backwardKey)
+
+    else if ( key == backwardKey )
     {
-        if (m_pages.GetCount() > 1)
+        if ( m_pages.GetCount() > 1 )
         {
-            if (GetActivePage() == -1)
-                newPage = (int) (m_pages.GetCount() - 1);
-            else if (GetActivePage() > 0)
+            if ( GetActivePage() == -1 )
+            {
+                newPage = ( int ) ( m_pages.GetCount() - 1 );
+            }
+
+            else if ( GetActivePage() > 0 )
+            {
                 newPage = GetActivePage() - 1;
+            }
         }
     }
-    else if (key == WXK_HOME)
+
+    else if ( key == WXK_HOME )
     {
         newPage = 0;
     }
-    else if (key == WXK_END)
+
+    else if ( key == WXK_END )
     {
-        newPage = (int) (m_pages.GetCount() - 1);
+        newPage = ( int ) ( m_pages.GetCount() - 1 );
     }
+
     else
+    {
         event.Skip();
+    }
 
-    if (newPage != -1)
+    if ( newPage != -1 )
     {
-        wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId);
-        e.SetSelection(newPage);
-        e.SetOldSelection(newPage);
-        e.SetEventObject(this);
-        this->GetEventHandler()->ProcessEvent(e);
+        wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId );
+        e.SetSelection ( newPage );
+        e.SetOldSelection ( newPage );
+        e.SetEventObject ( this );
+        this->GetEventHandler()->ProcessEvent ( e );
     }
+
     else
+    {
         event.Skip();
+    }
 }
 
 // wxTabFrame is an interesting case.  It's important that all child pages
@@ -2698,71 +3083,79 @@
     wxTabFrame()
     {
         m_tabs = NULL;
-        m_rect = wxRect(0,0,200,200);
-        m_tab_ctrl_height = 20;
+        m_rect = wxRect ( 0, 0, 200, 200 );
+        m_tabCtrlHeight = 20;
     }
 
     ~wxTabFrame()
     {
-        wxDELETE(m_tabs);
+        wxDELETE ( m_tabs );
     }
 
-    void SetTabCtrlHeight(int h)
+    void SetTabCtrlHeight ( int h )
     {
-        m_tab_ctrl_height = h;
+        m_tabCtrlHeight = h;
     }
 
 protected:
-    void DoSetSize(int x, int y,
-                   int width, int height,
-                   int WXUNUSED(sizeFlags = wxSIZE_AUTO))
+    void DoSetSize ( int x, int y,
+                     int width, int height,
+                     int WXUNUSED ( sizeFlags = wxSIZE_AUTO ) )
     {
-        m_rect = wxRect(x, y, width, height);
+        m_rect = wxRect ( x, y, width, height );
         DoSizing();
     }
 
-    void DoGetClientSize(int* x, int* y) const
+    void DoGetClientSize ( int * x, int * y ) const
     {
         *x = m_rect.width;
         *y = m_rect.height;
     }
 
 public:
-    bool Show( bool WXUNUSED(show = true) ) { return false; }
+    bool Show ( bool WXUNUSED ( show = true ) ) { return false; }
 
     void DoSizing()
     {
-        if (!m_tabs)
+        if ( !m_tabs )
+        {
             return;
+        }
 
-        if (m_tabs->IsFrozen() || m_tabs->GetParent()->IsFrozen())
+        if ( m_tabs->IsFrozen() || m_tabs->GetParent()->IsFrozen() )
+        {
             return;
+        }
 
-        m_tab_rect = wxRect(m_rect.x, m_rect.y, m_rect.width, m_tab_ctrl_height);
-        if (m_tabs->GetFlags() & wxAUI_NB_BOTTOM)
+        m_tabRect = wxRect ( m_rect.x, m_rect.y, m_rect.width, m_tabCtrlHeight );
+
+        if ( m_tabs->GetFlags() & wxAUI_NB_BOTTOM )
         {
-            m_tab_rect = wxRect (m_rect.x, m_rect.y + m_rect.height - m_tab_ctrl_height, m_rect.width, m_tab_ctrl_height);
-            m_tabs->SetSize     (m_rect.x, m_rect.y + m_rect.height - m_tab_ctrl_height, m_rect.width, m_tab_ctrl_height);
-            m_tabs->SetRect     (wxRect(0, 0, m_rect.width, m_tab_ctrl_height));
+            m_tabRect = wxRect ( m_rect.x, m_rect.y + m_rect.height - m_tabCtrlHeight, m_rect.width, m_tabCtrlHeight );
+            m_tabs->SetSize     ( m_rect.x, m_rect.y + m_rect.height - m_tabCtrlHeight, m_rect.width, m_tabCtrlHeight );
+            m_tabs->SetRect     ( wxRect ( 0, 0, m_rect.width, m_tabCtrlHeight ) );
         }
+
         else //TODO: if (GetFlags() & wxAUI_NB_TOP)
         {
-            m_tab_rect = wxRect (m_rect.x, m_rect.y, m_rect.width, m_tab_ctrl_height);
-            m_tabs->SetSize     (m_rect.x, m_rect.y, m_rect.width, m_tab_ctrl_height);
-            m_tabs->SetRect     (wxRect(0, 0,        m_rect.width, m_tab_ctrl_height));
+            m_tabRect = wxRect ( m_rect.x, m_rect.y, m_rect.width, m_tabCtrlHeight );
+            m_tabs->SetSize     ( m_rect.x, m_rect.y, m_rect.width, m_tabCtrlHeight );
+            m_tabs->SetRect     ( wxRect ( 0, 0,        m_rect.width, m_tabCtrlHeight ) );
         }
+
         // TODO: else if (GetFlags() & wxAUI_NB_LEFT){}
         // TODO: else if (GetFlags() & wxAUI_NB_RIGHT){}
 
         m_tabs->Refresh();
         m_tabs->Update();
 
-        wxAuiNotebookPageArray& pages = m_tabs->GetPages();
-        size_t i, page_count = pages.GetCount();
+        wxAuiNotebookPageArray & pages = m_tabs->GetPages();
+        size_t i, pageCount = pages.GetCount();
 
-        for (i = 0; i < page_count; ++i)
+        for ( i = 0; i < pageCount; ++i )
         {
-            int height = m_rect.height - m_tab_ctrl_height;
+            int height = m_rect.height - m_tabCtrlHeight;
+
             if ( height < 0 )
             {
                 // avoid passing negative height to wxWindow::SetSize(), this
@@ -2770,36 +3163,46 @@
                 height = 0;
             }
 
-            wxAuiNotebookPage& page = pages.Item(i);
-            if (m_tabs->GetFlags() & wxAUI_NB_BOTTOM)
+            wxAuiNotebookPage & page = pages.Item ( i );
+
+            if ( m_tabs->GetFlags() & wxAUI_NB_BOTTOM )
             {
-                page.window->SetSize(m_rect.x, m_rect.y, m_rect.width, height);
+                page.window->SetSize ( m_rect.x, m_rect.y, m_rect.width, height );
             }
+
             else //TODO: if (GetFlags() & wxAUI_NB_TOP)
             {
-                page.window->SetSize(m_rect.x, m_rect.y + m_tab_ctrl_height,
-                                     m_rect.width, height);
+                page.window->SetSize ( m_rect.x, m_rect.y + m_tabCtrlHeight,
+                                       m_rect.width, height );
             }
+
             // TODO: else if (GetFlags() & wxAUI_NB_LEFT){}
             // TODO: else if (GetFlags() & wxAUI_NB_RIGHT){}
 
 #if wxUSE_MDI
-            if (page.window->IsKindOf(CLASSINFO(wxAuiMDIChildFrame)))
+
+            if ( page.window->IsKindOf ( CLASSINFO ( wxAuiMDIChildFrame ) ) )
             {
-                wxAuiMDIChildFrame* wnd = (wxAuiMDIChildFrame*)page.window;
+                wxAuiMDIChildFrame * wnd = ( wxAuiMDIChildFrame * ) page.window;
                 wnd->ApplyMDIChildFrameRect();
             }
+
 #endif
         }
     }
 
 protected:
-    void DoGetSize(int* x, int* y) const
+    void DoGetSize ( int * x, int * y ) const
     {
-        if (x)
+        if ( x )
+        {
             *x = m_rect.GetWidth();
-        if (y)
+        }
+
+        if ( y )
+        {
             *y = m_rect.GetHeight();
+        }
     }
 
 public:
@@ -2809,9 +3212,9 @@
     }
 
     wxRect m_rect;
-    wxRect m_tab_rect;
-    wxAuiTabCtrl* m_tabs;
-    int m_tab_ctrl_height;
+    wxRect m_tabRect;
+    wxAuiTabCtrl * m_tabs;
+    int m_tabCtrlHeight;
 };
 
 
@@ -2823,96 +3226,98 @@
 #define EVT_AUI_RANGE(id1, id2, event, func) \
     wx__DECLARE_EVT2(event, id1, id2, wxAuiNotebookEventHandler(func))
 
-BEGIN_EVENT_TABLE(wxAuiNotebook, wxControl)
-    EVT_SIZE(wxAuiNotebook::OnSize)
-    EVT_CHILD_FOCUS(wxAuiNotebook::OnChildFocusNotebook)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING,
-                      wxAuiNotebook::OnTabClicked)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG,
-                      wxAuiNotebook::OnTabBeginDrag)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_END_DRAG,
-                      wxAuiNotebook::OnTabEndDrag)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG,
-                      wxAuiNotebook::OnTabCancelDrag)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION,
-                      wxAuiNotebook::OnTabDragMotion)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_BUTTON,
-                      wxAuiNotebook::OnTabButton)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN,
-                      wxAuiNotebook::OnTabMiddleDown)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP,
-                      wxAuiNotebook::OnTabMiddleUp)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN,
-                      wxAuiNotebook::OnTabRightDown)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP,
-                      wxAuiNotebook::OnTabRightUp)
-    EVT_AUI_RANGE(wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId+500,
-                      wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK,
-                      wxAuiNotebook::OnTabBgDClick)
-    EVT_NAVIGATION_KEY(wxAuiNotebook::OnNavigationKeyNotebook)
+BEGIN_EVENT_TABLE ( wxAuiNotebook, wxControl )
+    EVT_SIZE ( wxAuiNotebook::OnSize )
+    EVT_CHILD_FOCUS ( wxAuiNotebook::OnChildFocusNotebook )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING,
+                    wxAuiNotebook::OnTabClicked )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG,
+                    wxAuiNotebook::OnTabBeginDrag )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_END_DRAG,
+                    wxAuiNotebook::OnTabEndDrag )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_CANCEL_DRAG,
+                    wxAuiNotebook::OnTabCancelDrag )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION,
+                    wxAuiNotebook::OnTabDragMotion )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_BUTTON,
+                    wxAuiNotebook::OnTabButton )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN,
+                    wxAuiNotebook::OnTabMiddleDown )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP,
+                    wxAuiNotebook::OnTabMiddleUp )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN,
+                    wxAuiNotebook::OnTabRightDown )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP,
+                    wxAuiNotebook::OnTabRightUp )
+    EVT_AUI_RANGE ( wxAuiBaseTabCtrlId, wxAuiBaseTabCtrlId + 500,
+                    wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK,
+                    wxAuiNotebook::OnTabBgDClick )
+    EVT_NAVIGATION_KEY ( wxAuiNotebook::OnNavigationKeyNotebook )
 END_EVENT_TABLE()
 
 void wxAuiNotebook::Init()
 {
-    m_curpage = -1;
-    m_tab_id_counter = wxAuiBaseTabCtrlId;
-    m_dummy_wnd = NULL;
-    m_tab_ctrl_height = 20;
-    m_requested_bmp_size = wxDefaultSize;
-    m_requested_tabctrl_height = -1;
+    m_curPage = -1;
+    m_tabIdCounter = wxAuiBaseTabCtrlId;
+    m_dummyWnd = NULL;
+    m_tabCtrlHeight = 20;
+    m_requestedBmpSize = wxDefaultSize;
+    m_requestedTabCtrlHeight = -1;
 }
 
-bool wxAuiNotebook::Create(wxWindow* parent,
-                           wxWindowID id,
-                           const wxPoint& pos,
-                           const wxSize& size,
-                           long style)
+bool wxAuiNotebook::Create ( wxWindow * parent,
+                             wxWindowID id,
+                             const wxPoint & pos,
+                             const wxSize & size,
+                             long style )
 {
-    if (!wxControl::Create(parent, id, pos, size, style))
+    if ( !wxControl::Create ( parent, id, pos, size, style ) )
+    {
         return false;
+    }
 
-    InitNotebook(style);
+    InitNotebook ( style );
 
     return true;
 }
 
 // InitNotebook() contains common initialization
 // code called by all constructors
-void wxAuiNotebook::InitNotebook(long style)
+void wxAuiNotebook::InitNotebook ( long style )
 {
-    SetName(wxT("wxAuiNotebook"));
-    m_curpage = -1;
-    m_tab_id_counter = wxAuiBaseTabCtrlId;
-    m_dummy_wnd = NULL;
-    m_flags = (unsigned int)style;
-    m_tab_ctrl_height = 20;
+    SetName ( wxT ( "wxAuiNotebook" ) );
+    m_curPage = -1;
+    m_tabIdCounter = wxAuiBaseTabCtrlId;
+    m_dummyWnd = NULL;
+    m_flags = ( unsigned int ) style;
+    m_tabCtrlHeight = 20;
 
-    m_normal_font = *wxNORMAL_FONT;
-    m_selected_font = *wxNORMAL_FONT;
-    m_selected_font.SetWeight(wxBOLD);
+    m_normalFont = *wxNORMAL_FONT;
+    m_selectedFont = *wxNORMAL_FONT;
+    m_selectedFont.SetWeight ( wxBOLD );
 
-    SetArtProvider(new wxAuiDefaultTabArt);
+    SetArtProvider ( new wxAuiDefaultTabArt );
 
-    m_dummy_wnd = new wxWindow(this, wxID_ANY, wxPoint(0,0), wxSize(0,0));
-    m_dummy_wnd->SetSize(200, 200);
-    m_dummy_wnd->Show(false);
+    m_dummyWnd = new wxWindow ( this, wxID_ANY, wxPoint ( 0, 0 ), wxSize ( 0, 0 ) );
+    m_dummyWnd->SetSize ( 200, 200 );
+    m_dummyWnd->Show ( false );
 
-    m_mgr.SetManagedWindow(this);
-    m_mgr.SetFlags(wxAUI_MGR_DEFAULT);
-    m_mgr.SetDockSizeConstraint(1.0, 1.0); // no dock size constraint
+    m_mgr.SetManagedWindow ( this );
+    m_mgr.SetFlags ( wxAUI_MGR_DEFAULT );
+    m_mgr.SetDockSizeConstraint ( 1.0, 1.0 ); // no dock size constraint
 
-    m_mgr.AddPane(m_dummy_wnd,
-              wxAuiPaneInfo().Name(wxT("dummy")).Bottom().CaptionVisible(false).Show(false));
+    m_mgr.AddPane ( m_dummyWnd,
+                    wxAuiPaneInfo().Name ( wxT ( "dummy" ) ).Bottom().CaptionVisible ( false ).Show ( false ) );
 
     m_mgr.Update();
 }
@@ -2923,30 +3328,37 @@
     SendDestroyEvent();
 
     while ( GetPageCount() > 0 )
-        DeletePage(0);
+    {
+        DeletePage ( 0 );
+    }
 
     m_mgr.UnInit();
 }
 
-void wxAuiNotebook::SetArtProvider(wxAuiTabArt* art)
+void wxAuiNotebook::SetArtProvider ( wxAuiTabArt * art )
 {
-    m_tabs.SetArtProvider(art);
+    m_tabs.SetArtProvider ( art );
 
     // Update the height and do nothing else if it did something but otherwise
     // (i.e. if the new art provider uses the same height as the old one) we
     // need to manually set the art provider for all tabs ourselves.
     if ( !UpdateTabCtrlHeight() )
     {
-        wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-        const size_t pane_count = all_panes.GetCount();
-        for (size_t i = 0; i < pane_count; ++i)
+        wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+        const size_t paneCount = allPanes.GetCount();
+
+        for ( size_t i = 0; i < paneCount; ++i )
         {
-            wxAuiPaneInfo& pane = all_panes.Item(i);
-            if (pane.name == wxT("dummy"))
+            wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+            if ( pane.name == wxT ( "dummy" ) )
+            {
                 continue;
-            wxTabFrame* tab_frame = (wxTabFrame*)pane.window;
-            wxAuiTabCtrl* tabctrl = tab_frame->m_tabs;
-            tabctrl->SetArtProvider(art->Clone());
+            }
+
+            wxTabFrame * tabFrame = ( wxTabFrame * ) pane.window;
+            wxAuiTabCtrl * tabctrl = tabFrame->m_tabs;
+            tabctrl->SetArtProvider ( art->Clone() );
         }
     }
 }
@@ -2958,12 +3370,12 @@
 // SetUniformBitmapSize().  Specifying a height of -1 reverts
 // any previous call and returns to the default behaviour
 
-void wxAuiNotebook::SetTabCtrlHeight(int height)
+void wxAuiNotebook::SetTabCtrlHeight ( int height )
 {
-    m_requested_tabctrl_height = height;
+    m_requestedTabCtrlHeight = height;
 
     // if window is already initialized, recalculate the tab height
-    if (m_dummy_wnd)
+    if ( m_dummyWnd )
     {
         UpdateTabCtrlHeight();
     }
@@ -2977,12 +3389,12 @@
 // with a large bitmap is added, the tab ctrl's height will
 // automatically increase to accommodate the bitmap
 
-void wxAuiNotebook::SetUniformBitmapSize(const wxSize& size)
+void wxAuiNotebook::SetUniformBitmapSize ( const wxSize & size )
 {
-    m_requested_bmp_size = size;
+    m_requestedBmpSize = size;
 
     // if window is already initialized, recalculate the tab height
-    if (m_dummy_wnd)
+    if ( m_dummyWnd )
     {
         UpdateTabCtrlHeight();
     }
@@ -2997,25 +3409,32 @@
 
     // if the tab control height needs to change, update
     // all of our tab controls with the new height
-    if (m_tab_ctrl_height == height)
+    if ( m_tabCtrlHeight == height )
+    {
         return false;
+    }
 
-    wxAuiTabArt* art = m_tabs.GetArtProvider();
+    wxAuiTabArt * art = m_tabs.GetArtProvider();
 
-    m_tab_ctrl_height = height;
+    m_tabCtrlHeight = height;
 
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        wxAuiPaneInfo& pane = all_panes.Item(i);
-        if (pane.name == wxT("dummy"))
+        wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+        if ( pane.name == wxT ( "dummy" ) )
+        {
             continue;
-        wxTabFrame* tab_frame = (wxTabFrame*)pane.window;
-        wxAuiTabCtrl* tabctrl = tab_frame->m_tabs;
-        tab_frame->SetTabCtrlHeight(m_tab_ctrl_height);
-        tabctrl->SetArtProvider(art->Clone());
-        tab_frame->DoSizing();
+        }
+
+        wxTabFrame * tabFrame = ( wxTabFrame * ) pane.window;
+        wxAuiTabCtrl * tabctrl = tabFrame->m_tabs;
+        tabFrame->SetTabCtrlHeight ( m_tabCtrlHeight );
+        tabctrl->SetArtProvider ( art->Clone() );
+        tabFrame->DoSizing();
     }
 
     return true;
@@ -3026,12 +3445,13 @@
     wxSize size = CalculateNewSplitSize();
 
     // the placeholder hint window should be set to this size
-    wxAuiPaneInfo& info = m_mgr.GetPane(wxT("dummy"));
-    if (info.IsOk())
+    wxAuiPaneInfo & info = m_mgr.GetPane ( wxT ( "dummy" ) );
+
+    if ( info.IsOk() )
     {
-        info.MinSize(size);
-        info.BestSize(size);
-        m_dummy_wnd->SetSize(size);
+        info.MinSize ( size );
+        info.BestSize ( size );
+        m_dummyWnd->SetSize ( size );
     }
 }
 
@@ -3040,35 +3460,41 @@
 wxSize wxAuiNotebook::CalculateNewSplitSize()
 {
     // count number of tab controls
-    int tab_ctrl_count = 0;
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    int tabCtrlCount = 0;
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        wxAuiPaneInfo& pane = all_panes.Item(i);
-        if (pane.name == wxT("dummy"))
+        wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+        if ( pane.name == wxT ( "dummy" ) )
+        {
             continue;
-        tab_ctrl_count++;
+        }
+
+        tabCtrlCount++;
     }
 
-    wxSize new_split_size;
+    wxSize newSplitSize;
 
     // if there is only one tab control, the first split
     // should happen around the middle
-    if (tab_ctrl_count < 2)
+    if ( tabCtrlCount < 2 )
     {
-        new_split_size = GetClientSize();
-        new_split_size.x /= 2;
-        new_split_size.y /= 2;
+        newSplitSize = GetClientSize();
+        newSplitSize.x /= 2;
+        newSplitSize.y /= 2;
     }
+
     else
     {
         // this is in place of a more complicated calculation
         // that needs to be implemented
-        new_split_size = wxSize(180,180);
+        newSplitSize = wxSize ( 180, 180 );
     }
 
-    return new_split_size;
+    return newSplitSize;
 }
 
 int wxAuiNotebook::CalculateTabCtrlHeight()
@@ -3076,44 +3502,51 @@
     // if a fixed tab ctrl height is specified,
     // just return that instead of calculating a
     // tab height
-    if (m_requested_tabctrl_height != -1)
-        return m_requested_tabctrl_height;
+    if ( m_requestedTabCtrlHeight != -1 )
+    {
+        return m_requestedTabCtrlHeight;
+    }
 
     // find out new best tab height
-    wxAuiTabArt* art = m_tabs.GetArtProvider();
+    wxAuiTabArt * art = m_tabs.GetArtProvider();
 
-    return art->GetBestTabCtrlSize(this,
-                                   m_tabs.GetPages(),
-                                   m_requested_bmp_size);
+    return art->GetBestTabCtrlSize ( this,
+                                     m_tabs.GetPages(),
+                                     m_requestedBmpSize );
 }
 
 
-wxAuiTabArt* wxAuiNotebook::GetArtProvider() const
+wxAuiTabArt * wxAuiNotebook::GetArtProvider() const
 {
     return m_tabs.GetArtProvider();
 }
 
-void wxAuiNotebook::SetWindowStyleFlag(long style)
+void wxAuiNotebook::SetWindowStyleFlag ( long style )
 {
-    wxControl::SetWindowStyleFlag(style);
+    wxControl::SetWindowStyleFlag ( style );
 
-    m_flags = (unsigned int)style;
+    m_flags = ( unsigned int ) style;
 
     // if the control is already initialized
-    if (m_mgr.GetManagedWindow() == (wxWindow*)this)
+    if ( m_mgr.GetManagedWindow() == ( wxWindow * ) this )
     {
         // let all of the tab children know about the new style
 
-        wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-        size_t i, pane_count = all_panes.GetCount();
-        for (i = 0; i < pane_count; ++i)
+        wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+        size_t i, paneCount = allPanes.GetCount();
+
+        for ( i = 0; i < paneCount; ++i )
         {
-            wxAuiPaneInfo& pane = all_panes.Item(i);
-            if (pane.name == wxT("dummy"))
+            wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+            if ( pane.name == wxT ( "dummy" ) )
+            {
                 continue;
-            wxTabFrame* tabframe = (wxTabFrame*)pane.window;
-            wxAuiTabCtrl* tabctrl = tabframe->m_tabs;
-            tabctrl->SetFlags(m_flags);
+            }
+
+            wxTabFrame * tabframe = ( wxTabFrame * ) pane.window;
+            wxAuiTabCtrl * tabctrl = tabframe->m_tabs;
+            tabctrl->SetFlags ( m_flags );
             tabframe->DoSizing();
             tabctrl->Refresh();
             tabctrl->Update();
@@ -3122,25 +3555,28 @@
 }
 
 
-bool wxAuiNotebook::AddPage(wxWindow* page,
-                            const wxString& caption,
-                            bool select,
-                            const wxBitmap& bitmap)
+bool wxAuiNotebook::AddPage ( wxWindow * page,
+                              const wxString & caption,
+                              bool select,
+                              const wxBitmap & bitmap )
 {
-    return InsertPage(GetPageCount(), page, caption, select, bitmap);
+    return InsertPage ( GetPageCount(), page, caption, select, bitmap );
 }
 
-bool wxAuiNotebook::InsertPage(size_t page_idx,
-                               wxWindow* page,
-                               const wxString& caption,
-                               bool select,
-                               const wxBitmap& bitmap)
+bool wxAuiNotebook::InsertPage ( size_t pageIdx,
+                                 wxWindow * page,
+                                 const wxString & caption,
+                                 bool select,
+                                 const wxBitmap & bitmap )
 {
-    wxASSERT_MSG(page, wxT("page pointer must be non-NULL"));
-    if (!page)
+    wxASSERT_MSG ( page, wxT ( "page pointer must be non-NULL" ) );
+
+    if ( !page )
+    {
         return false;
+    }
 
-    page->Reparent(this);
+    page->Reparent ( this );
 
     wxAuiNotebookPage info;
     info.window = page;
@@ -3150,35 +3586,48 @@
 
     // if there are currently no tabs, the first added
     // tab must be active
-    if (m_tabs.GetPageCount() == 0)
+    if ( m_tabs.GetPageCount() == 0 )
+    {
         info.active = true;
+    }
 
-    m_tabs.InsertPage(page, info, page_idx);
+    m_tabs.InsertPage ( page, info, pageIdx );
 
     // if that was the first page added, even if
     // select is false, it must become the "current page"
     // (though no select events will be fired)
-    if (!select && m_tabs.GetPageCount() == 1)
+    if ( !select && m_tabs.GetPageCount() == 1 )
+    {
         select = true;
-        //m_curpage = GetPageIndex(page);
+    }
 
-    wxAuiTabCtrl* active_tabctrl = GetActiveTabCtrl();
-    if (page_idx >= active_tabctrl->GetPageCount())
-        active_tabctrl->AddPage(page, info);
+    //mCurPage = GetPageIndex(page);
+
+    wxAuiTabCtrl * activeTabctrl = GetActiveTabCtrl();
+
+    if ( pageIdx >= activeTabctrl->GetPageCount() )
+    {
+        activeTabctrl->AddPage ( page, info );
+    }
+
     else
-        active_tabctrl->InsertPage(page, info, page_idx);
+    {
+        activeTabctrl->InsertPage ( page, info, pageIdx );
+    }
 
     UpdateTabCtrlHeight();
     DoSizing();
-    active_tabctrl->DoShowHide();
+    activeTabctrl->DoShowHide();
 
     // adjust selected index
-    if(m_curpage >= (int) page_idx)
-        m_curpage++;
+    if ( m_curPage >= ( int ) pageIdx )
+    {
+        m_curPage++;
+    }
 
-    if (select)
+    if ( select )
     {
-        SetSelectionToWindow(page);
+        SetSelectionToWindow ( page );
     }
 
     return true;
@@ -3187,29 +3636,37 @@
 
 // DeletePage() removes a tab from the multi-notebook,
 // and destroys the window as well
-bool wxAuiNotebook::DeletePage(size_t page_idx)
+bool wxAuiNotebook::DeletePage ( size_t pageIdx )
 {
-    if (page_idx >= m_tabs.GetPageCount())
+    if ( pageIdx >= m_tabs.GetPageCount() )
+    {
         return false;
+    }
 
-    wxWindow* wnd = m_tabs.GetWindowFromIdx(page_idx);
+    wxWindow * wnd = m_tabs.GetWindowFromIdx ( pageIdx );
 
     // hide the window in advance, as this will
     // prevent flicker
-    ShowWnd(wnd, false);
+    ShowWnd ( wnd, false );
 
-    if (!RemovePage(page_idx))
+    if ( !RemovePage ( pageIdx ) )
+    {
         return false;
+    }
 
 #if wxUSE_MDI
+
     // actually destroy the window now
-    if (wnd->IsKindOf(CLASSINFO(wxAuiMDIChildFrame)))
+    if ( wnd->IsKindOf ( CLASSINFO ( wxAuiMDIChildFrame ) ) )
     {
         // delete the child frame with pending delete, as is
         // customary with frame windows
-        if (!wxPendingDelete.Member(wnd))
-            wxPendingDelete.Append(wnd);
+        if ( !wxPendingDelete.Member ( wnd ) )
+        {
+            wxPendingDelete.Append ( wnd );
+        }
     }
+
     else
 #endif
     {
@@ -3223,120 +3680,138 @@
 
 // RemovePage() removes a tab from the multi-notebook,
 // but does not destroy the window
-bool wxAuiNotebook::RemovePage(size_t page_idx)
+bool wxAuiNotebook::RemovePage ( size_t pageIdx )
 {
     // save active window pointer
-    wxWindow* active_wnd = NULL;
-    if (m_curpage >= 0)
-        active_wnd = m_tabs.GetWindowFromIdx(m_curpage);
+    wxWindow * activeWnd = NULL;
 
+    if ( m_curPage >= 0 )
+    {
+        activeWnd = m_tabs.GetWindowFromIdx ( m_curPage );
+    }
+
     // save pointer of window being deleted
-    wxWindow* wnd = m_tabs.GetWindowFromIdx(page_idx);
-    wxWindow* new_active = NULL;
+    wxWindow * wnd = m_tabs.GetWindowFromIdx ( pageIdx );
+    wxWindow * newActive = NULL;
 
     // make sure we found the page
-    if (!wnd)
+    if ( !wnd )
+    {
         return false;
+    }
 
     // find out which onscreen tab ctrl owns this tab
-    wxAuiTabCtrl* ctrl;
-    int ctrl_idx;
-    if (!FindTab(wnd, &ctrl, &ctrl_idx))
+    wxAuiTabCtrl * ctrl;
+    int ctrlIdx;
+
+    if ( !FindTab ( wnd, &ctrl, &ctrlIdx ) )
+    {
         return false;
+    }
 
-    bool is_curpage = (m_curpage == (int)page_idx);
-    bool is_active_in_split = ctrl->GetPage(ctrl_idx).active;
+    bool isCurpage = ( m_curPage == ( int ) pageIdx );
+    bool isActiveInSplit = ctrl->GetPage ( ctrlIdx ).active;
 
 
     // remove the tab from main catalog
-    if (!m_tabs.RemovePage(wnd))
+    if ( !m_tabs.RemovePage ( wnd ) )
+    {
         return false;
+    }
 
     // remove the tab from the onscreen tab ctrl
-    ctrl->RemovePage(wnd);
+    ctrl->RemovePage ( wnd );
 
-    if (is_active_in_split)
+    if ( isActiveInSplit )
     {
-        int ctrl_new_page_count = (int)ctrl->GetPageCount();
+        int ctrlNewPageCount = ( int ) ctrl->GetPageCount();
 
-        if (ctrl_idx >= ctrl_new_page_count)
-            ctrl_idx = ctrl_new_page_count-1;
+        if ( ctrlIdx >= ctrlNewPageCount )
+        {
+            ctrlIdx = ctrlNewPageCount - 1;
+        }
 
-        if (ctrl_idx >= 0 && ctrl_idx < (int)ctrl->GetPageCount())
+        if ( ctrlIdx >= 0 && ctrlIdx < ( int ) ctrl->GetPageCount() )
         {
             // set new page as active in the tab split
-            ctrl->SetActivePage(ctrl_idx);
+            ctrl->SetActivePage ( ctrlIdx );
 
             // if the page deleted was the current page for the
             // entire tab control, then record the window
             // pointer of the new active page for activation
-            if (is_curpage)
+            if ( isCurpage )
             {
-                new_active = ctrl->GetWindowFromIdx(ctrl_idx);
+                newActive = ctrl->GetWindowFromIdx ( ctrlIdx );
             }
         }
     }
+
     else
     {
         // we are not deleting the active page, so keep it the same
-        new_active = active_wnd;
+        newActive = activeWnd;
     }
 
 
-    if (!new_active)
+    if ( !newActive )
     {
         // we haven't yet found a new page to active,
         // so select the next page from the main tab
         // catalogue
 
-        if (page_idx < m_tabs.GetPageCount())
+        if ( pageIdx < m_tabs.GetPageCount() )
         {
-            new_active = m_tabs.GetPage(page_idx).window;
+            newActive = m_tabs.GetPage ( pageIdx ).window;
         }
 
-        if (!new_active && m_tabs.GetPageCount() > 0)
+        if ( !newActive && m_tabs.GetPageCount() > 0 )
         {
-            new_active = m_tabs.GetPage(0).window;
+            newActive = m_tabs.GetPage ( 0 ).window;
         }
     }
 
 
     RemoveEmptyTabFrames();
 
-    m_curpage = wxNOT_FOUND;
+    m_curPage = wxNOT_FOUND;
 
     // set new active pane unless we're being destroyed anyhow
-    if (new_active && !m_isBeingDeleted)
-        SetSelectionToWindow(new_active);
+    if ( newActive && !m_isBeingDeleted )
+    {
+        SetSelectionToWindow ( newActive );
+    }
 
     return true;
 }
 
 // GetPageIndex() returns the index of the page, or -1 if the
 // page could not be located in the notebook
-int wxAuiNotebook::GetPageIndex(wxWindow* page_wnd) const
+int wxAuiNotebook::GetPageIndex ( wxWindow * pageWnd ) const
 {
-    return m_tabs.GetIdxFromWindow(page_wnd);
+    return m_tabs.GetIdxFromWindow ( pageWnd );
 }
 
 
 
 // SetPageText() changes the tab caption of the specified page
-bool wxAuiNotebook::SetPageText(size_t page_idx, const wxString& text)
+bool wxAuiNotebook::SetPageText ( size_t pageIdx, const wxString & text )
 {
-    if (page_idx >= m_tabs.GetPageCount())
+    if ( pageIdx >= m_tabs.GetPageCount() )
+    {
         return false;
+    }
 
     // update our own tab catalog
-    wxAuiNotebookPage& page_info = m_tabs.GetPage(page_idx);
-    page_info.caption = text;
+    wxAuiNotebookPage & pageInfo = m_tabs.GetPage ( pageIdx );
+    pageInfo.caption = text;
 
     // update what's on screen
-    wxAuiTabCtrl* ctrl;
-    int ctrl_idx;
-    if (FindTab(page_info.window, &ctrl, &ctrl_idx))
+    wxAuiTabCtrl * ctrl;
+    int ctrlIdx;
+
+    if ( FindTab ( pageInfo.window, &ctrl, &ctrlIdx ) )
     {
-        wxAuiNotebookPage& info = ctrl->GetPage(ctrl_idx);
+        wxAuiNotebookPage & info = ctrl->GetPage ( ctrlIdx );
         info.caption = text;
         ctrl->Refresh();
         ctrl->Update();
@@ -3346,34 +3821,39 @@
 }
 
 // returns the page caption
-wxString wxAuiNotebook::GetPageText(size_t page_idx) const
+wxString wxAuiNotebook::GetPageText ( size_t pageIdx ) const
 {
-    if (page_idx >= m_tabs.GetPageCount())
+    if ( pageIdx >= m_tabs.GetPageCount() )
+    {
         return wxEmptyString;
+    }
 
     // update our own tab catalog
-    const wxAuiNotebookPage& page_info = m_tabs.GetPage(page_idx);
-    return page_info.caption;
+    const wxAuiNotebookPage & pageInfo = m_tabs.GetPage ( pageIdx );
+    return pageInfo.caption;
 }
 
-bool wxAuiNotebook::SetPageBitmap(size_t page_idx, const wxBitmap& bitmap)
+bool wxAuiNotebook::SetPageBitmap ( size_t pageIdx, const wxBitmap & bitmap )
 {
-    if (page_idx >= m_tabs.GetPageCount())
+    if ( pageIdx >= m_tabs.GetPageCount() )
+    {
         return false;
+    }
 
     // update our own tab catalog
-    wxAuiNotebookPage& page_info = m_tabs.GetPage(page_idx);
-    page_info.bitmap = bitmap;
+    wxAuiNotebookPage & pageInfo = m_tabs.GetPage ( pageIdx );
+    pageInfo.bitmap = bitmap;
 
     // tab height might have changed
     UpdateTabCtrlHeight();
 
     // update what's on screen
-    wxAuiTabCtrl* ctrl;
-    int ctrl_idx;
-    if (FindTab(page_info.window, &ctrl, &ctrl_idx))
+    wxAuiTabCtrl * ctrl;
+    int ctrlIdx;
+
+    if ( FindTab ( pageInfo.window, &ctrl, &ctrlIdx ) )
     {
-        wxAuiNotebookPage& info = ctrl->GetPage(ctrl_idx);
+        wxAuiNotebookPage & info = ctrl->GetPage ( ctrlIdx );
         info.bitmap = bitmap;
         ctrl->Refresh();
         ctrl->Update();
@@ -3383,101 +3863,126 @@
 }
 
 // returns the page bitmap
-wxBitmap wxAuiNotebook::GetPageBitmap(size_t page_idx) const
+wxBitmap wxAuiNotebook::GetPageBitmap ( size_t pageIdx ) const
 {
-    if (page_idx >= m_tabs.GetPageCount())
+    if ( pageIdx >= m_tabs.GetPageCount() )
+    {
         return wxBitmap();
+    }
 
     // update our own tab catalog
-    const wxAuiNotebookPage& page_info = m_tabs.GetPage(page_idx);
-    return page_info.bitmap;
+    const wxAuiNotebookPage & pageInfo = m_tabs.GetPage ( pageIdx );
+    return pageInfo.bitmap;
 }
 
 // GetSelection() returns the index of the currently active page
 int wxAuiNotebook::GetSelection() const
 {
-    return m_curpage;
+    return m_curPage;
 }
 
 // SetSelection() sets the currently active page
-size_t wxAuiNotebook::SetSelection(size_t new_page)
+size_t wxAuiNotebook::SetSelection ( size_t newPage )
 {
-    wxWindow* wnd = m_tabs.GetWindowFromIdx(new_page);
-    if (!wnd)
-        return m_curpage;
+    wxWindow * wnd = m_tabs.GetWindowFromIdx ( newPage );
 
+    if ( !wnd )
+    {
+        return m_curPage;
+    }
+
     // don't change the page unless necessary;
     // however, clicking again on a tab should give it the focus.
-    if ((int)new_page == m_curpage)
+    if ( ( int ) newPage == m_curPage )
     {
-        wxAuiTabCtrl* ctrl;
-        int ctrl_idx;
-        if (FindTab(wnd, &ctrl, &ctrl_idx))
+        wxAuiTabCtrl * ctrl;
+        int ctrlIdx;
+
+        if ( FindTab ( wnd, &ctrl, &ctrlIdx ) )
         {
-            if (FindFocus() != ctrl)
+            if ( FindFocus() != ctrl )
+            {
                 ctrl->SetFocus();
+            }
         }
-        return m_curpage;
+
+        return m_curPage;
     }
 
-    wxAuiNotebookEvent evt(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId);
-    evt.SetSelection(new_page);
-    evt.SetOldSelection(m_curpage);
-    evt.SetEventObject(this);
-    if (!GetEventHandler()->ProcessEvent(evt) || evt.IsAllowed())
+    wxAuiNotebookEvent evt ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, m_windowId );
+    evt.SetSelection ( newPage );
+    evt.SetOldSelection ( m_curPage );
+    evt.SetEventObject ( this );
+
+    if ( !GetEventHandler()->ProcessEvent ( evt ) || evt.IsAllowed() )
     {
-        int old_curpage = m_curpage;
-        m_curpage = new_page;
+        int oldCurpage = m_curPage;
+        m_curPage = newPage;
 
         // program allows the page change
-        evt.SetEventType(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED);
-        (void)GetEventHandler()->ProcessEvent(evt);
+        evt.SetEventType ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED );
+        ( void ) GetEventHandler()->ProcessEvent ( evt );
 
 
-        wxAuiTabCtrl* ctrl;
-        int ctrl_idx;
-        if (FindTab(wnd, &ctrl, &ctrl_idx))
+        wxAuiTabCtrl * ctrl;
+        int ctrlIdx;
+
+        if ( FindTab ( wnd, &ctrl, &ctrlIdx ) )
         {
-            m_tabs.SetActivePage(wnd);
+            m_tabs.SetActivePage ( wnd );
 
-            ctrl->SetActivePage(ctrl_idx);
+            ctrl->SetActivePage ( ctrlIdx );
             DoSizing();
             ctrl->DoShowHide();
 
-            ctrl->MakeTabVisible(ctrl_idx, ctrl);
+            ctrl->MakeTabVisible ( ctrlIdx, ctrl );
 
             // set fonts
-            wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-            size_t i, pane_count = all_panes.GetCount();
-            for (i = 0; i < pane_count; ++i)
+            wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+            size_t i, paneCount = allPanes.GetCount();
+
+            for ( i = 0; i < paneCount; ++i )
             {
-                wxAuiPaneInfo& pane = all_panes.Item(i);
-                if (pane.name == wxT("dummy"))
+                wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+                if ( pane.name == wxT ( "dummy" ) )
+                {
                     continue;
-                wxAuiTabCtrl* tabctrl = ((wxTabFrame*)pane.window)->m_tabs;
-                if (tabctrl != ctrl)
-                    tabctrl->SetSelectedFont(m_normal_font);
+                }
+
+                wxAuiTabCtrl * tabctrl = ( ( wxTabFrame * ) pane.window )->m_tabs;
+
+                if ( tabctrl != ctrl )
+                {
+                    tabctrl->SetSelectedFont ( m_normalFont );
+                }
+
                 else
-                    tabctrl->SetSelectedFont(m_selected_font);
+                {
+                    tabctrl->SetSelectedFont ( m_selectedFont );
+                }
+
                 tabctrl->Refresh();
             }
 
             // Set the focus to the page if we're not currently focused on the tab.
             // This is Firefox-like behaviour.
-            if (wnd->IsShownOnScreen() && FindFocus() != ctrl)
+            if ( wnd->IsShownOnScreen() && FindFocus() != ctrl )
+            {
                 wnd->SetFocus();
+            }
 
-            return old_curpage;
+            return oldCurpage;
         }
     }
 
-    return m_curpage;
+    return m_curPage;
 }
 
-void wxAuiNotebook::SetSelectionToWindow(wxWindow *win)
+void wxAuiNotebook::SetSelectionToWindow ( wxWindow * win )
 {
-    const int idx = m_tabs.GetIdxFromWindow(win);
-    wxCHECK_RET( idx != wxNOT_FOUND, wxT("invalid notebook page") );
+    const int idx = m_tabs.GetIdxFromWindow ( win );
+    wxCHECK_RET ( idx != wxNOT_FOUND, wxT ( "invalid notebook page" ) );
 
 
     // since a tab was clicked, let the parent know that we received
@@ -3486,15 +3991,16 @@
     // (the child focus event will also let wxAuiManager, if any,
     // know that the notebook control has been activated)
 
-    wxWindow* parent = GetParent();
-    if (parent)
+    wxWindow * parent = GetParent();
+
+    if ( parent )
     {
-        wxChildFocusEvent eventFocus(this);
-        parent->GetEventHandler()->ProcessEvent(eventFocus);
+        wxChildFocusEvent eventFocus ( this );
+        parent->GetEventHandler()->ProcessEvent ( eventFocus );
     }
 
 
-    SetSelection(idx);
+    SetSelection ( idx );
 }
 
 // GetPageCount() returns the total number of
@@ -3506,69 +4012,75 @@
 
 // GetPage() returns the wxWindow pointer of the
 // specified page
-wxWindow* wxAuiNotebook::GetPage(size_t page_idx) const
+wxWindow * wxAuiNotebook::GetPage ( size_t pageIdx ) const
 {
-    wxASSERT(page_idx < m_tabs.GetPageCount());
+    wxASSERT ( pageIdx < m_tabs.GetPageCount() );
 
-    return m_tabs.GetWindowFromIdx(page_idx);
+    return m_tabs.GetWindowFromIdx ( pageIdx );
 }
 
 // DoSizing() performs all sizing operations in each tab control
 void wxAuiNotebook::DoSizing()
 {
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tabframe = (wxTabFrame*)all_panes.Item(i).window;
+        wxTabFrame * tabframe = ( wxTabFrame * ) allPanes.Item ( i ).window;
         tabframe->DoSizing();
     }
 }
 
 // GetActiveTabCtrl() returns the active tab control.  It is
 // called to determine which control gets new windows being added
-wxAuiTabCtrl* wxAuiNotebook::GetActiveTabCtrl()
+wxAuiTabCtrl * wxAuiNotebook::GetActiveTabCtrl()
 {
-    if (m_curpage >= 0 && m_curpage < (int)m_tabs.GetPageCount())
+    if ( m_curPage >= 0 && m_curPage < ( int ) m_tabs.GetPageCount() )
     {
-        wxAuiTabCtrl* ctrl;
+        wxAuiTabCtrl * ctrl;
         int idx;
 
         // find the tab ctrl with the current page
-        if (FindTab(m_tabs.GetPage(m_curpage).window,
-                    &ctrl, &idx))
+        if ( FindTab ( m_tabs.GetPage ( m_curPage ).window,
+                       &ctrl, &idx ) )
         {
             return ctrl;
         }
     }
 
     // no current page, just find the first tab ctrl
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tabframe = (wxTabFrame*)all_panes.Item(i).window;
+        wxTabFrame * tabframe = ( wxTabFrame * ) allPanes.Item ( i ).window;
         return tabframe->m_tabs;
     }
 
     // If there is no tabframe at all, create one
-    wxTabFrame* tabframe = new wxTabFrame;
-    tabframe->SetTabCtrlHeight(m_tab_ctrl_height);
-    tabframe->m_tabs = new wxAuiTabCtrl(this,
-                                        m_tab_id_counter++,
-                                        wxDefaultPosition,
-                                        wxDefaultSize,
-                                        wxNO_BORDER|wxWANTS_CHARS);
-    tabframe->m_tabs->SetFlags(m_flags);
-    tabframe->m_tabs->SetArtProvider(m_tabs.GetArtProvider()->Clone());
-    m_mgr.AddPane(tabframe,
-                  wxAuiPaneInfo().Center().CaptionVisible(false));
+    wxTabFrame * tabframe = new wxTabFrame;
+    tabframe->SetTabCtrlHeight ( m_tabCtrlHeight );
+    tabframe->m_tabs = new wxAuiTabCtrl ( this,
+                                          m_tabIdCounter++,
+                                          wxDefaultPosition,
+                                          wxDefaultSize,
+                                          wxNO_BORDER | wxWANTS_CHARS );
+    tabframe->m_tabs->SetFlags ( m_flags );
+    tabframe->m_tabs->SetArtProvider ( m_tabs.GetArtProvider()->Clone() );
+    m_mgr.AddPane ( tabframe,
+                    wxAuiPaneInfo().Center().CaptionVisible ( false ) );
 
     m_mgr.Update();
 
@@ -3578,22 +4090,26 @@
 // FindTab() finds the tab control that currently contains the window as well
 // as the index of the window in the tab control.  It returns true if the
 // window was found, otherwise false.
-bool wxAuiNotebook::FindTab(wxWindow* page, wxAuiTabCtrl** ctrl, int* idx)
+bool wxAuiNotebook::FindTab ( wxWindow * page, wxAuiTabCtrl ** ctrl, int * idx )
 {
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tabframe = (wxTabFrame*)all_panes.Item(i).window;
+        wxTabFrame * tabframe = ( wxTabFrame * ) allPanes.Item ( i ).window;
 
-        int page_idx = tabframe->m_tabs->GetIdxFromWindow(page);
-        if (page_idx != -1)
+        int pageIdx = tabframe->m_tabs->GetIdxFromWindow ( page );
+
+        if ( pageIdx != -1 )
         {
             *ctrl = tabframe->m_tabs;
-            *idx = page_idx;
+            *idx = pageIdx;
             return true;
         }
     }
@@ -3601,201 +4117,218 @@
     return false;
 }
 
-void wxAuiNotebook::Split(size_t page, int direction)
+void wxAuiNotebook::Split ( size_t page, int direction )
 {
-    wxSize cli_size = GetClientSize();
+    wxSize cliSize = GetClientSize();
 
     // get the page's window pointer
-    wxWindow* wnd = GetPage(page);
-    if (!wnd)
+    wxWindow * wnd = GetPage ( page );
+
+    if ( !wnd )
+    {
         return;
+    }
 
     // notebooks with 1 or less pages can't be split
-    if (GetPageCount() < 2)
+    if ( GetPageCount() < 2 )
+    {
         return;
+    }
 
     // find out which tab control the page currently belongs to
-    wxAuiTabCtrl *src_tabs, *dest_tabs;
-    int src_idx = -1;
-    src_tabs = NULL;
-    if (!FindTab(wnd, &src_tabs, &src_idx))
+    wxAuiTabCtrl * srcTabs, *destTabs;
+    int srcIdx = -1;
+    srcTabs = NULL;
+
+    if ( !FindTab ( wnd, &srcTabs, &srcIdx ) )
+    {
         return;
-    if (!src_tabs || src_idx == -1)
+    }
+
+    if ( !srcTabs || srcIdx == -1 )
+    {
         return;
+    }
 
     // choose a split size
-    wxSize split_size;
-    if (GetPageCount() > 2)
+    wxSize splitSize;
+
+    if ( GetPageCount() > 2 )
     {
-        split_size = CalculateNewSplitSize();
+        splitSize = CalculateNewSplitSize();
     }
+
     else
     {
         // because there are two panes, always split them
         // equally
-        split_size = GetClientSize();
-        split_size.x /= 2;
-        split_size.y /= 2;
+        splitSize = GetClientSize();
+        splitSize.x /= 2;
+        splitSize.y /= 2;
     }
 
 
     // create a new tab frame
-    wxTabFrame* new_tabs = new wxTabFrame;
-    new_tabs->m_rect = wxRect(wxPoint(0,0), split_size);
-    new_tabs->SetTabCtrlHeight(m_tab_ctrl_height);
-    new_tabs->m_tabs = new wxAuiTabCtrl(this,
-                                        m_tab_id_counter++,
-                                        wxDefaultPosition,
-                                        wxDefaultSize,
-                                        wxNO_BORDER|wxWANTS_CHARS);
-    new_tabs->m_tabs->SetArtProvider(m_tabs.GetArtProvider()->Clone());
-    new_tabs->m_tabs->SetFlags(m_flags);
-    dest_tabs = new_tabs->m_tabs;
+    wxTabFrame * newTabs = new wxTabFrame;
+    newTabs->m_rect = wxRect ( wxPoint ( 0, 0 ), splitSize );
+    newTabs->SetTabCtrlHeight ( m_tabCtrlHeight );
+    newTabs->m_tabs = new wxAuiTabCtrl ( this,
+                                         m_tabIdCounter++,
+                                         wxDefaultPosition,
+                                         wxDefaultSize,
+                                         wxNO_BORDER | wxWANTS_CHARS );
+    newTabs->m_tabs->SetArtProvider ( m_tabs.GetArtProvider()->Clone() );
+    newTabs->m_tabs->SetFlags ( m_flags );
+    destTabs = newTabs->m_tabs;
 
     // create a pane info structure with the information
     // about where the pane should be added
-    wxAuiPaneInfo pane_info = wxAuiPaneInfo().Bottom().CaptionVisible(false);
-    wxPoint mouse_pt;
+    wxAuiPaneInfo paneInfo = wxAuiPaneInfo().Bottom().CaptionVisible ( false );
+    wxPoint mousePt;
 
-    if (direction == wxLEFT)
+    if ( direction == wxLEFT )
     {
-        pane_info.Left();
-        mouse_pt = wxPoint(0, cli_size.y/2);
+        paneInfo.Left();
+        mousePt = wxPoint ( 0, cliSize.y / 2 );
     }
-    else if (direction == wxRIGHT)
+
+    else if ( direction == wxRIGHT )
     {
-        pane_info.Right();
-        mouse_pt = wxPoint(cli_size.x, cli_size.y/2);
+        paneInfo.Right();
+        mousePt = wxPoint ( cliSize.x, cliSize.y / 2 );
     }
-    else if (direction == wxTOP)
+
+    else if ( direction == wxTOP )
     {
-        pane_info.Top();
-        mouse_pt = wxPoint(cli_size.x/2, 0);
+        paneInfo.Top();
+        mousePt = wxPoint ( cliSize.x / 2, 0 );
     }
-    else if (direction == wxBOTTOM)
+
+    else if ( direction == wxBOTTOM )
     {
-        pane_info.Bottom();
-        mouse_pt = wxPoint(cli_size.x/2, cli_size.y);
+        paneInfo.Bottom();
+        mousePt = wxPoint ( cliSize.x / 2, cliSize.y );
     }
 
-    m_mgr.AddPane(new_tabs, pane_info, mouse_pt);
+    m_mgr.AddPane ( newTabs, paneInfo, mousePt );
     m_mgr.Update();
 
     // remove the page from the source tabs
-    wxAuiNotebookPage page_info = src_tabs->GetPage(src_idx);
-    page_info.active = false;
-    src_tabs->RemovePage(page_info.window);
-    if (src_tabs->GetPageCount() > 0)
+    wxAuiNotebookPage pageInfo = srcTabs->GetPage ( srcIdx );
+    pageInfo.active = false;
+    srcTabs->RemovePage ( pageInfo.window );
+
+    if ( srcTabs->GetPageCount() > 0 )
     {
-        src_tabs->SetActivePage((size_t)0);
-        src_tabs->DoShowHide();
-        src_tabs->Refresh();
+        srcTabs->SetActivePage ( ( size_t ) 0 );
+        srcTabs->DoShowHide();
+        srcTabs->Refresh();
     }
 
 
     // add the page to the destination tabs
-    dest_tabs->InsertPage(page_info.window, page_info, 0);
+    destTabs->InsertPage ( pageInfo.window, pageInfo, 0 );
 
-    if (src_tabs->GetPageCount() == 0)
+    if ( srcTabs->GetPageCount() == 0 )
     {
         RemoveEmptyTabFrames();
     }
 
     DoSizing();
-    dest_tabs->DoShowHide();
-    dest_tabs->Refresh();
+    destTabs->DoShowHide();
+    destTabs->Refresh();
 
     // force the set selection function reset the selection
-    m_curpage = -1;
+    m_curPage = -1;
 
     // set the active page to the one we just split off
-    SetSelectionToPage(page_info);
+    SetSelectionToPage ( pageInfo );
 
     UpdateHintWindowSize();
 }
 
 
-void wxAuiNotebook::OnSize(wxSizeEvent& evt)
+void wxAuiNotebook::OnSize ( wxSizeEvent & evt )
 {
     UpdateHintWindowSize();
 
     evt.Skip();
 }
 
-void wxAuiNotebook::OnTabClicked(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabClicked ( wxAuiNotebookEvent & evt )
 {
-    wxAuiTabCtrl* ctrl = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxASSERT(ctrl != NULL);
+    wxAuiTabCtrl * ctrl = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxASSERT ( ctrl != NULL );
 
-    wxWindow* wnd = ctrl->GetWindowFromIdx(evt.GetSelection());
-    wxASSERT(wnd != NULL);
+    wxWindow * wnd = ctrl->GetWindowFromIdx ( evt.GetSelection() );
+    wxASSERT ( wnd != NULL );
 
-    SetSelectionToWindow(wnd);
+    SetSelectionToWindow ( wnd );
 }
 
-void wxAuiNotebook::OnTabBgDClick(wxAuiNotebookEvent& WXUNUSED(evt))
+void wxAuiNotebook::OnTabBgDClick ( wxAuiNotebookEvent & WXUNUSED ( evt ) )
 {
     // notify owner that the tabbar background has been double-clicked
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, m_windowId);
-    e.SetEventObject(this);
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, m_windowId );
+    e.SetEventObject ( this );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiNotebook::OnTabBeginDrag(wxAuiNotebookEvent&)
+void wxAuiNotebook::OnTabBeginDrag ( wxAuiNotebookEvent & )
 {
-    m_last_drag_x = 0;
+    m_lastDragX = 0;
 }
 
-void wxAuiNotebook::OnTabDragMotion(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabDragMotion ( wxAuiNotebookEvent & evt )
 {
-    wxPoint screen_pt = ::wxGetMousePosition();
-    wxPoint client_pt = ScreenToClient(screen_pt);
-    wxPoint zero(0,0);
+    wxPoint screenPt = ::wxGetMousePosition();
+    wxPoint clientPt = ScreenToClient ( screenPt );
+    wxPoint zero ( 0, 0 );
 
-    wxAuiTabCtrl* src_tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxAuiTabCtrl* dest_tabs = GetTabCtrlFromPoint(client_pt);
+    wxAuiTabCtrl * srcTabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxAuiTabCtrl * destTabs = GetTabCtrlFromPoint ( clientPt );
 
-    if (dest_tabs == src_tabs)
+    if ( destTabs == srcTabs )
     {
-        if (src_tabs)
+        if ( srcTabs )
         {
-            src_tabs->SetCursor(wxCursor(wxCURSOR_ARROW));
+            srcTabs->SetCursor ( wxCursor ( wxCURSOR_ARROW ) );
         }
 
         // always hide the hint for inner-tabctrl drag
         m_mgr.HideHint();
 
         // if tab moving is not allowed, leave
-        if (!(m_flags & wxAUI_NB_TAB_MOVE))
+        if ( ! ( m_flags & wxAUI_NB_TAB_MOVE ) )
         {
             return;
         }
 
-        wxPoint pt = dest_tabs->ScreenToClient(screen_pt);
-        wxWindow* dest_location_tab;
+        wxPoint pt = destTabs->ScreenToClient ( screenPt );
+        wxWindow * destLocationTab;
 
         // this is an inner-tab drag/reposition
-        if (dest_tabs->TabHitTest(pt.x, pt.y, &dest_location_tab))
+        if ( destTabs->TabHitTest ( pt.x, pt.y, &destLocationTab ) )
         {
-            int src_idx = evt.GetSelection();
-            int dest_idx = dest_tabs->GetIdxFromWindow(dest_location_tab);
+            int srcIdx = evt.GetSelection();
+            int destIdx = destTabs->GetIdxFromWindow ( destLocationTab );
 
             // prevent jumpy drag
-            if ((src_idx == dest_idx) || dest_idx == -1 ||
-                (src_idx > dest_idx && m_last_drag_x <= pt.x) ||
-                (src_idx < dest_idx && m_last_drag_x >= pt.x))
+            if ( ( srcIdx == destIdx ) || destIdx == -1 ||
+                    ( srcIdx > destIdx && m_lastDragX <= pt.x ) ||
+                    ( srcIdx < destIdx && m_lastDragX >= pt.x ) )
             {
-                m_last_drag_x = pt.x;
+                m_lastDragX = pt.x;
                 return;
             }
 
 
-            wxWindow* src_tab = dest_tabs->GetWindowFromIdx(src_idx);
-            dest_tabs->MovePage(src_tab, dest_idx);
-            dest_tabs->SetActivePage((size_t)dest_idx);
-            dest_tabs->DoShowHide();
-            dest_tabs->Refresh();
-            m_last_drag_x = pt.x;
+            wxWindow * srcTab = destTabs->GetWindowFromIdx ( srcIdx );
+            destTabs->MovePage ( srcTab, destIdx );
+            destTabs->SetActivePage ( ( size_t ) destIdx );
+            destTabs->DoShowHide();
+            destTabs->Refresh();
+            m_lastDragX = pt.x;
 
         }
 
@@ -3805,40 +4338,46 @@
 
     // if external drag is allowed, check if the tab is being dragged
     // over a different wxAuiNotebook control
-    if (m_flags & wxAUI_NB_TAB_EXTERNAL_MOVE)
+    if ( m_flags & wxAUI_NB_TAB_EXTERNAL_MOVE )
     {
-        wxWindow* tab_ctrl = ::wxFindWindowAtPoint(screen_pt);
+        wxWindow * tabCtrl = ::wxFindWindowAtPoint ( screenPt );
 
         // if we aren't over any window, stop here
-        if (!tab_ctrl)
+        if ( !tabCtrl )
+        {
             return;
+        }
 
         // make sure we are not over the hint window
-        if (!tab_ctrl->IsKindOf(CLASSINFO(wxFrame)))
+        if ( !tabCtrl->IsKindOf ( CLASSINFO ( wxFrame ) ) )
         {
-            while (tab_ctrl)
+            while ( tabCtrl )
             {
-                if (tab_ctrl->IsKindOf(CLASSINFO(wxAuiTabCtrl)))
+                if ( tabCtrl->IsKindOf ( CLASSINFO ( wxAuiTabCtrl ) ) )
+                {
                     break;
-                tab_ctrl = tab_ctrl->GetParent();
+                }
+
+                tabCtrl = tabCtrl->GetParent();
             }
 
-            if (tab_ctrl)
+            if ( tabCtrl )
             {
-                wxAuiNotebook* nb = (wxAuiNotebook*)tab_ctrl->GetParent();
+                wxAuiNotebook * nb = ( wxAuiNotebook * ) tabCtrl->GetParent();
 
-                if (nb != this)
+                if ( nb != this )
                 {
-                    wxRect hint_rect = tab_ctrl->GetClientRect();
-                    tab_ctrl->ClientToScreen(&hint_rect.x, &hint_rect.y);
-                    m_mgr.ShowHint(hint_rect);
+                    wxRect hintRect = tabCtrl->GetClientRect();
+                    tabCtrl->ClientToScreen ( &hintRect.x, &hintRect.y );
+                    m_mgr.ShowHint ( hintRect );
                     return;
                 }
             }
         }
+
         else
         {
-            if (!dest_tabs)
+            if ( !destTabs )
             {
                 // we are either over a hint window, or not over a tab
                 // window, and there is no where to drag to, so exit
@@ -3849,80 +4388,88 @@
 
 
     // if there are less than two panes, split can't happen, so leave
-    if (m_tabs.GetPageCount() < 2)
+    if ( m_tabs.GetPageCount() < 2 )
+    {
         return;
+    }
 
     // if tab moving is not allowed, leave
-    if (!(m_flags & wxAUI_NB_TAB_SPLIT))
+    if ( ! ( m_flags & wxAUI_NB_TAB_SPLIT ) )
+    {
         return;
+    }
 
 
-    if (src_tabs)
+    if ( srcTabs )
     {
-        src_tabs->SetCursor(wxCursor(wxCURSOR_SIZING));
+        srcTabs->SetCursor ( wxCursor ( wxCURSOR_SIZING ) );
     }
 
 
-    if (dest_tabs)
+    if ( destTabs )
     {
-        wxRect hint_rect = dest_tabs->GetRect();
-        ClientToScreen(&hint_rect.x, &hint_rect.y);
-        m_mgr.ShowHint(hint_rect);
+        wxRect hintRect = destTabs->GetRect();
+        ClientToScreen ( &hintRect.x, &hintRect.y );
+        m_mgr.ShowHint ( hintRect );
     }
+
     else
     {
-        m_mgr.DrawHintRect(m_dummy_wnd, client_pt, zero);
+        m_mgr.DrawHintRect ( m_dummyWnd, clientPt, zero );
     }
 }
 
 
 
-void wxAuiNotebook::OnTabEndDrag(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabEndDrag ( wxAuiNotebookEvent & evt )
 {
     m_mgr.HideHint();
 
 
-    wxAuiTabCtrl* src_tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxCHECK_RET( src_tabs, wxT("no source object?") );
+    wxAuiTabCtrl * srcTabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxCHECK_RET ( srcTabs, wxT ( "no source object?" ) );
 
-    src_tabs->SetCursor(wxCursor(wxCURSOR_ARROW));
+    srcTabs->SetCursor ( wxCursor ( wxCURSOR_ARROW ) );
 
     // get the mouse position, which will be used to determine the drop point
-    wxPoint mouse_screen_pt = ::wxGetMousePosition();
-    wxPoint mouse_client_pt = ScreenToClient(mouse_screen_pt);
+    wxPoint mouseScreenPt = ::wxGetMousePosition();
+    wxPoint mouseClientPt = ScreenToClient ( mouseScreenPt );
 
 
 
     // check for an external move
-    if (m_flags & wxAUI_NB_TAB_EXTERNAL_MOVE)
+    if ( m_flags & wxAUI_NB_TAB_EXTERNAL_MOVE )
     {
-        wxWindow* tab_ctrl = ::wxFindWindowAtPoint(mouse_screen_pt);
+        wxWindow * tabCtrl = ::wxFindWindowAtPoint ( mouseScreenPt );
 
-        while (tab_ctrl)
+        while ( tabCtrl )
         {
-            if (tab_ctrl->IsKindOf(CLASSINFO(wxAuiTabCtrl)))
+            if ( tabCtrl->IsKindOf ( CLASSINFO ( wxAuiTabCtrl ) ) )
+            {
                 break;
-            tab_ctrl = tab_ctrl->GetParent();
+            }
+
+            tabCtrl = tabCtrl->GetParent();
         }
 
-        if (tab_ctrl)
+        if ( tabCtrl )
         {
-            wxAuiNotebook* nb = (wxAuiNotebook*)tab_ctrl->GetParent();
+            wxAuiNotebook * nb = ( wxAuiNotebook * ) tabCtrl->GetParent();
 
-            if (nb != this)
+            if ( nb != this )
             {
                 // find out from the destination control
                 // if it's ok to drop this tab here
-                wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, m_windowId);
-                e.SetSelection(evt.GetSelection());
-                e.SetOldSelection(evt.GetSelection());
-                e.SetEventObject(this);
-                e.SetDragSource(this);
+                wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, m_windowId );
+                e.SetSelection ( evt.GetSelection() );
+                e.SetOldSelection ( evt.GetSelection() );
+                e.SetEventObject ( this );
+                e.SetDragSource ( this );
                 e.Veto(); // dropping must be explicitly approved by control owner
 
-                nb->GetEventHandler()->ProcessEvent(e);
+                nb->GetEventHandler()->ProcessEvent ( e );
 
-                if (!e.IsAllowed())
+                if ( !e.IsAllowed() )
                 {
                     // no answer or negative answer
                     m_mgr.HideHint();
@@ -3930,67 +4477,73 @@
                 }
 
                 // drop was allowed
-                int src_idx = evt.GetSelection();
-                wxWindow* src_page = src_tabs->GetWindowFromIdx(src_idx);
+                int srcIdx = evt.GetSelection();
+                wxWindow * srcPage = srcTabs->GetWindowFromIdx ( srcIdx );
 
                 // Check that it's not an impossible parent relationship
-                wxWindow* p = nb;
-                while (p && !p->IsTopLevel())
+                wxWindow * p = nb;
+
+                while ( p && !p->IsTopLevel() )
                 {
-                    if (p == src_page)
+                    if ( p == srcPage )
                     {
                         return;
                     }
+
                     p = p->GetParent();
                 }
 
                 // get main index of the page
-                int main_idx = m_tabs.GetIdxFromWindow(src_page);
-                wxCHECK_RET( main_idx != wxNOT_FOUND, wxT("no source page?") );
+                int mainIdx = m_tabs.GetIdxFromWindow ( srcPage );
+                wxCHECK_RET ( mainIdx != wxNOT_FOUND, wxT ( "no source page?" ) );
 
 
                 // make a copy of the page info
-                wxAuiNotebookPage page_info = m_tabs.GetPage(main_idx);
+                wxAuiNotebookPage pageInfo = m_tabs.GetPage ( mainIdx );
 
                 // remove the page from the source notebook
-                RemovePage(main_idx);
+                RemovePage ( mainIdx );
 
                 // reparent the page
-                src_page->Reparent(nb);
+                srcPage->Reparent ( nb );
 
 
                 // found out the insert idx
-                wxAuiTabCtrl* dest_tabs = (wxAuiTabCtrl*)tab_ctrl;
-                wxPoint pt = dest_tabs->ScreenToClient(mouse_screen_pt);
+                wxAuiTabCtrl * destTabs = ( wxAuiTabCtrl * ) tabCtrl;
+                wxPoint pt = destTabs->ScreenToClient ( mouseScreenPt );
 
-                wxWindow* target = NULL;
-                int insert_idx = -1;
-                dest_tabs->TabHitTest(pt.x, pt.y, &target);
-                if (target)
+                wxWindow * target = NULL;
+                int insertIdx = -1;
+                destTabs->TabHitTest ( pt.x, pt.y, &target );
+
+                if ( target )
                 {
-                    insert_idx = dest_tabs->GetIdxFromWindow(target);
+                    insertIdx = destTabs->GetIdxFromWindow ( target );
                 }
 
 
                 // add the page to the new notebook
-                if (insert_idx == -1)
-                    insert_idx = dest_tabs->GetPageCount();
-                dest_tabs->InsertPage(page_info.window, page_info, insert_idx);
-                nb->m_tabs.AddPage(page_info.window, page_info);
+                if ( insertIdx == -1 )
+                {
+                    insertIdx = destTabs->GetPageCount();
+                }
 
+                destTabs->InsertPage ( pageInfo.window, pageInfo, insertIdx );
+                nb->m_tabs.AddPage ( pageInfo.window, pageInfo );
+
                 nb->DoSizing();
-                dest_tabs->DoShowHide();
-                dest_tabs->Refresh();
+                destTabs->DoShowHide();
+                destTabs->Refresh();
 
                 // set the selection in the destination tab control
-                nb->SetSelectionToPage(page_info);
+                nb->SetSelectionToPage ( pageInfo );
 
                 // notify owner that the tab has been dragged
-                wxAuiNotebookEvent e2(wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, m_windowId);
-                e2.SetSelection(evt.GetSelection());
-                e2.SetOldSelection(evt.GetSelection());
-                e2.SetEventObject(this);
-                GetEventHandler()->ProcessEvent(e2);
+                wxAuiNotebookEvent e2 ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, m_windowId );
+                e2.SetSelection ( evt.GetSelection() );
+                e2.SetOldSelection ( evt.GetSelection() );
+                e2.SetEventObject ( this );
+                GetEventHandler()->ProcessEvent ( e2 );
 
                 return;
             }
@@ -4001,153 +4554,173 @@
 
 
     // only perform a tab split if it's allowed
-    wxAuiTabCtrl* dest_tabs = NULL;
+    wxAuiTabCtrl * destTabs = NULL;
 
-    if ((m_flags & wxAUI_NB_TAB_SPLIT) && m_tabs.GetPageCount() >= 2)
+    if ( ( m_flags & wxAUI_NB_TAB_SPLIT ) && m_tabs.GetPageCount() >= 2 )
     {
         // If the pointer is in an existing tab frame, do a tab insert
-        wxWindow* hit_wnd = ::wxFindWindowAtPoint(mouse_screen_pt);
-        wxTabFrame* tab_frame = (wxTabFrame*)GetTabFrameFromTabCtrl(hit_wnd);
-        int insert_idx = -1;
-        if (tab_frame)
+        wxWindow * hitWnd = ::wxFindWindowAtPoint ( mouseScreenPt );
+        wxTabFrame * tabFrame = ( wxTabFrame * ) GetTabFrameFromTabCtrl ( hitWnd );
+        int insertIdx = -1;
+
+        if ( tabFrame )
         {
-            dest_tabs = tab_frame->m_tabs;
+            destTabs = tabFrame->m_tabs;
 
-            if (dest_tabs == src_tabs)
+            if ( destTabs == srcTabs )
+            {
                 return;
+            }
 
 
-            wxPoint pt = dest_tabs->ScreenToClient(mouse_screen_pt);
-            wxWindow* target = NULL;
-            dest_tabs->TabHitTest(pt.x, pt.y, &target);
-            if (target)
+            wxPoint pt = destTabs->ScreenToClient ( mouseScreenPt );
+            wxWindow * target = NULL;
+            destTabs->TabHitTest ( pt.x, pt.y, &target );
+
+            if ( target )
             {
-                insert_idx = dest_tabs->GetIdxFromWindow(target);
+                insertIdx = destTabs->GetIdxFromWindow ( target );
             }
         }
+
         else
         {
-            wxPoint zero(0,0);
-            wxRect rect = m_mgr.CalculateHintRect(m_dummy_wnd,
-                                                  mouse_client_pt,
-                                                  zero);
-            if (rect.IsEmpty())
+            wxPoint zero ( 0, 0 );
+            wxRect rect = m_mgr.CalculateHintRect ( m_dummyWnd,
+                                                    mouseClientPt,
+                                                    zero );
+
+            if ( rect.IsEmpty() )
             {
                 // there is no suitable drop location here, exit out
                 return;
             }
 
             // If there is no tabframe at all, create one
-            wxTabFrame* new_tabs = new wxTabFrame;
-            new_tabs->m_rect = wxRect(wxPoint(0,0), CalculateNewSplitSize());
-            new_tabs->SetTabCtrlHeight(m_tab_ctrl_height);
-            new_tabs->m_tabs = new wxAuiTabCtrl(this,
-                                                m_tab_id_counter++,
-                                                wxDefaultPosition,
-                                                wxDefaultSize,
-                                                wxNO_BORDER|wxWANTS_CHARS);
-            new_tabs->m_tabs->SetArtProvider(m_tabs.GetArtProvider()->Clone());
-            new_tabs->m_tabs->SetFlags(m_flags);
+            wxTabFrame * newTabs = new wxTabFrame;
+            newTabs->m_rect = wxRect ( wxPoint ( 0, 0 ), CalculateNewSplitSize() );
+            newTabs->SetTabCtrlHeight ( m_tabCtrlHeight );
+            newTabs->m_tabs = new wxAuiTabCtrl ( this,
+                                                 m_tabIdCounter++,
+                                                 wxDefaultPosition,
+                                                 wxDefaultSize,
+                                                 wxNO_BORDER | wxWANTS_CHARS );
+            newTabs->m_tabs->SetArtProvider ( m_tabs.GetArtProvider()->Clone() );
+            newTabs->m_tabs->SetFlags ( m_flags );
 
-            m_mgr.AddPane(new_tabs,
-                          wxAuiPaneInfo().Bottom().CaptionVisible(false),
-                          mouse_client_pt);
+            m_mgr.AddPane ( newTabs,
+                            wxAuiPaneInfo().Bottom().CaptionVisible ( false ),
+                            mouseClientPt );
             m_mgr.Update();
-            dest_tabs = new_tabs->m_tabs;
+            destTabs = newTabs->m_tabs;
         }
 
 
 
         // remove the page from the source tabs
-        wxAuiNotebookPage page_info = src_tabs->GetPage(evt.GetSelection());
-        page_info.active = false;
-        src_tabs->RemovePage(page_info.window);
-        if (src_tabs->GetPageCount() > 0)
+        wxAuiNotebookPage pageInfo = srcTabs->GetPage ( evt.GetSelection() );
+        pageInfo.active = false;
+        srcTabs->RemovePage ( pageInfo.window );
+
+        if ( srcTabs->GetPageCount() > 0 )
         {
-            src_tabs->SetActivePage((size_t)0);
-            src_tabs->DoShowHide();
-            src_tabs->Refresh();
+            srcTabs->SetActivePage ( ( size_t ) 0 );
+            srcTabs->DoShowHide();
+            srcTabs->Refresh();
         }
 
 
 
         // add the page to the destination tabs
-        if (insert_idx == -1)
-            insert_idx = dest_tabs->GetPageCount();
-        dest_tabs->InsertPage(page_info.window, page_info, insert_idx);
+        if ( insertIdx == -1 )
+        {
+            insertIdx = destTabs->GetPageCount();
+        }
 
-        if (src_tabs->GetPageCount() == 0)
+        destTabs->InsertPage ( pageInfo.window, pageInfo, insertIdx );
+
+        if ( srcTabs->GetPageCount() == 0 )
         {
             RemoveEmptyTabFrames();
         }
 
         DoSizing();
-        dest_tabs->DoShowHide();
-        dest_tabs->Refresh();
+        destTabs->DoShowHide();
+        destTabs->Refresh();
 
         // force the set selection function reset the selection
-        m_curpage = -1;
+        m_curPage = -1;
 
         // set the active page to the one we just split off
-        SetSelectionToPage(page_info);
+        SetSelectionToPage ( pageInfo );
 
         UpdateHintWindowSize();
     }
 
     // notify owner that the tab has been dragged
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, m_windowId);
-    e.SetSelection(evt.GetSelection());
-    e.SetOldSelection(evt.GetSelection());
-    e.SetEventObject(this);
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, m_windowId );
+    e.SetSelection ( evt.GetSelection() );
+    e.SetOldSelection ( evt.GetSelection() );
+    e.SetEventObject ( this );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
 
 
-void wxAuiNotebook::OnTabCancelDrag(wxAuiNotebookEvent& command_evt)
+void wxAuiNotebook::OnTabCancelDrag ( wxAuiNotebookEvent & commandEvt )
 {
-    wxAuiNotebookEvent& evt = (wxAuiNotebookEvent&)command_evt;
+    wxAuiNotebookEvent & evt = ( wxAuiNotebookEvent & ) commandEvt;
 
     m_mgr.HideHint();
 
-    wxAuiTabCtrl* src_tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxCHECK_RET( src_tabs, _T("no source object?") );
+    wxAuiTabCtrl * srcTabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxCHECK_RET ( srcTabs, _T ( "no source object?" ) );
 
-    src_tabs->SetCursor(wxCursor(wxCURSOR_ARROW));
+    srcTabs->SetCursor ( wxCursor ( wxCURSOR_ARROW ) );
 }
 
-wxAuiTabCtrl* wxAuiNotebook::GetTabCtrlFromPoint(const wxPoint& pt)
+wxAuiTabCtrl * wxAuiNotebook::GetTabCtrlFromPoint ( const wxPoint & pt )
 {
     // if we've just removed the last tab from the source
     // tab set, the remove the tab control completely
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tabframe = (wxTabFrame*)all_panes.Item(i).window;
-        if (tabframe->m_tab_rect.Contains(pt))
+        wxTabFrame * tabframe = ( wxTabFrame * ) allPanes.Item ( i ).window;
+
+        if ( tabframe->m_tabRect.Contains ( pt ) )
+        {
             return tabframe->m_tabs;
+        }
     }
 
     return NULL;
 }
 
-wxWindow* wxAuiNotebook::GetTabFrameFromTabCtrl(wxWindow* tab_ctrl)
+wxWindow * wxAuiNotebook::GetTabFrameFromTabCtrl ( wxWindow * tabCtrl )
 {
     // if we've just removed the last tab from the source
     // tab set, the remove the tab control completely
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tabframe = (wxTabFrame*)all_panes.Item(i).window;
-        if (tabframe->m_tabs == tab_ctrl)
+        wxTabFrame * tabframe = ( wxTabFrame * ) allPanes.Item ( i ).window;
+
+        if ( tabframe->m_tabs == tabCtrl )
         {
             return tabframe;
         }
@@ -4160,26 +4733,32 @@
 {
     // if we've just removed the last tab from the source
     // tab set, the remove the tab control completely
-    wxAuiPaneInfoArray all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (all_panes.Item(i).name == wxT("dummy"))
+        if ( allPanes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
+        }
 
-        wxTabFrame* tab_frame = (wxTabFrame*)all_panes.Item(i).window;
-        if (tab_frame->m_tabs->GetPageCount() == 0)
+        wxTabFrame * tabFrame = ( wxTabFrame * ) allPanes.Item ( i ).window;
+
+        if ( tabFrame->m_tabs->GetPageCount() == 0 )
         {
-            m_mgr.DetachPane(tab_frame);
+            m_mgr.DetachPane ( tabFrame );
 
             // use pending delete because sometimes during
             // window closing, refreshs are pending
-            if (!wxPendingDelete.Member(tab_frame->m_tabs))
-                wxPendingDelete.Append(tab_frame->m_tabs);
+            if ( !wxPendingDelete.Member ( tabFrame->m_tabs ) )
+            {
+                wxPendingDelete.Append ( tabFrame->m_tabs );
+            }
 
-            tab_frame->m_tabs = NULL;
+            tabFrame->m_tabs = NULL;
 
-            delete tab_frame;
+            delete tabFrame;
         }
     }
 
@@ -4187,29 +4766,40 @@
     // check to see if there is still a center pane;
     // if there isn't, make a frame the center pane
     wxAuiPaneInfoArray panes = m_mgr.GetAllPanes();
-    pane_count = panes.GetCount();
-    wxWindow* first_good = NULL;
-    bool center_found = false;
-    for (i = 0; i < pane_count; ++i)
+    paneCount = panes.GetCount();
+    wxWindow * firstGood = NULL;
+    bool centerFound = false;
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        if (panes.Item(i).name == wxT("dummy"))
+        if ( panes.Item ( i ).name == wxT ( "dummy" ) )
+        {
             continue;
-        if (panes.Item(i).dock_direction == wxAUI_DOCK_CENTRE)
-            center_found = true;
-        if (!first_good)
-            first_good = panes.Item(i).window;
+        }
+
+        if ( panes.Item ( i ).dockDirection == wxAUI_DOCK_CENTRE )
+        {
+            centerFound = true;
+        }
+
+        if ( !firstGood )
+        {
+            firstGood = panes.Item ( i ).window;
+        }
     }
 
-    if (!center_found && first_good)
+    if ( !centerFound && firstGood )
     {
-        m_mgr.GetPane(first_good).Centre();
+        m_mgr.GetPane ( firstGood ).Centre();
     }
 
-    if (!m_isBeingDeleted)
+    if ( !m_isBeingDeleted )
+    {
         m_mgr.Update();
+    }
 }
 
-void wxAuiNotebook::OnChildFocusNotebook(wxChildFocusEvent& evt)
+void wxAuiNotebook::OnChildFocusNotebook ( wxChildFocusEvent & evt )
 {
     evt.Skip();
 
@@ -4219,37 +4809,49 @@
     // child, which would then enter this handler and call
     // SetSelection, which is not desired turn tab dragging.
 
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    size_t i, pane_count = all_panes.GetCount();
-    for (i = 0; i < pane_count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    size_t i, paneCount = allPanes.GetCount();
+
+    for ( i = 0; i < paneCount; ++i )
     {
-        wxAuiPaneInfo& pane = all_panes.Item(i);
-        if (pane.name == wxT("dummy"))
+        wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+        if ( pane.name == wxT ( "dummy" ) )
+        {
             continue;
-        wxTabFrame* tabframe = (wxTabFrame*)pane.window;
-        if (tabframe->m_tabs->IsDragging())
+        }
+
+        wxTabFrame * tabframe = ( wxTabFrame * ) pane.window;
+
+        if ( tabframe->m_tabs->IsDragging() )
+        {
             return;
+        }
     }
 
 
     // change the tab selection to the child
     // which was focused
-    int idx = m_tabs.GetIdxFromWindow(evt.GetWindow());
-    if (idx != -1 && idx != m_curpage)
+    int idx = m_tabs.GetIdxFromWindow ( evt.GetWindow() );
+
+    if ( idx != -1 && idx != m_curPage )
     {
-        SetSelection(idx);
+        SetSelection ( idx );
     }
 }
 
-void wxAuiNotebook::OnNavigationKeyNotebook(wxNavigationKeyEvent& event)
+void wxAuiNotebook::OnNavigationKeyNotebook ( wxNavigationKeyEvent & event )
 {
-    if ( event.IsWindowChange() ) {
+    if ( event.IsWindowChange() )
+    {
         // change pages
         // FIXME: the problem with this is that if we have a split notebook,
         // we selection may go all over the place.
-        AdvanceSelection(event.GetDirection());
+        AdvanceSelection ( event.GetDirection() );
     }
-    else {
+
+    else
+    {
         // we get this event in 3 cases
         //
         // a) one of our pages might have generated it because the user TABbed
@@ -4271,32 +4873,36 @@
         wxWindow * const parent = GetParent();
 
         // the wxObject* casts are required to avoid MinGW GCC 2.95.3 ICE
-        const bool isFromParent = event.GetEventObject() == (wxObject*) parent;
-        const bool isFromSelf = event.GetEventObject() == (wxObject*) this;
+        const bool isFromParent = event.GetEventObject() == ( wxObject * ) parent;
+        const bool isFromSelf = event.GetEventObject() == ( wxObject * ) this;
 
         if ( isFromParent || isFromSelf )
         {
             // no, it doesn't come from child, case (b) or (c): forward to a
             // page but only if direction is backwards (TAB) or from ourselves,
             if ( GetSelection() != wxNOT_FOUND &&
-                    (!event.GetDirection() || isFromSelf) )
+                    ( !event.GetDirection() || isFromSelf ) )
             {
                 // so that the page knows that the event comes from it's parent
                 // and is being propagated downwards
-                event.SetEventObject(this);
+                event.SetEventObject ( this );
 
-                wxWindow *page = GetPage(GetSelection());
-                if ( !page->GetEventHandler()->ProcessEvent(event) )
+                wxWindow * page = GetPage ( GetSelection() );
+
+                if ( !page->GetEventHandler()->ProcessEvent ( event ) )
                 {
                     page->SetFocus();
                 }
+
                 //else: page manages focus inside it itself
             }
+
             else // otherwise set the focus to the notebook itself
             {
                 SetFocus();
             }
         }
+
         else
         {
             // it comes from our child, case (a), pass to the parent, but only
@@ -4307,167 +4913,181 @@
             {
                 SetFocus();
             }
+
             else if ( parent )
             {
-                event.SetCurrentFocus(this);
-                parent->GetEventHandler()->ProcessEvent(event);
+                event.SetCurrentFocus ( this );
+                parent->GetEventHandler()->ProcessEvent ( event );
             }
         }
     }
 }
 
-void wxAuiNotebook::OnTabButton(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabButton ( wxAuiNotebookEvent & evt )
 {
-    wxAuiTabCtrl* tabs = (wxAuiTabCtrl*)evt.GetEventObject();
+    wxAuiTabCtrl * tabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
 
-    int button_id = evt.GetInt();
+    int buttonId = evt.GetInt();
 
-    if (button_id == wxAUI_BUTTON_CLOSE)
+    if ( buttonId == wxAUI_BUTTON_CLOSE )
     {
         int selection = evt.GetSelection();
 
-        if (selection == -1)
+        if ( selection == -1 )
         {
             // if the close button is to the right, use the active
             // page selection to determine which page to close
             selection = tabs->GetActivePage();
         }
 
-        if (selection != -1)
+        if ( selection != -1 )
         {
-            wxWindow* close_wnd = tabs->GetWindowFromIdx(selection);
+            wxWindow * closeWnd = tabs->GetWindowFromIdx ( selection );
 
             // ask owner if it's ok to close the tab
-            wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, m_windowId);
-            e.SetSelection(m_tabs.GetIdxFromWindow(close_wnd));
-            const int idx = m_tabs.GetIdxFromWindow(close_wnd);
-            e.SetSelection(idx);
-            e.SetOldSelection(evt.GetSelection());
-            e.SetEventObject(this);
-            GetEventHandler()->ProcessEvent(e);
-            if (!e.IsAllowed())
+            wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, m_windowId );
+            e.SetSelection ( m_tabs.GetIdxFromWindow ( closeWnd ) );
+            const int idx = m_tabs.GetIdxFromWindow ( closeWnd );
+            e.SetSelection ( idx );
+            e.SetOldSelection ( evt.GetSelection() );
+            e.SetEventObject ( this );
+            GetEventHandler()->ProcessEvent ( e );
+
+            if ( !e.IsAllowed() )
+            {
                 return;
+            }
 
 
 #if wxUSE_MDI
-            if (close_wnd->IsKindOf(CLASSINFO(wxAuiMDIChildFrame)))
+
+            if ( closeWnd->IsKindOf ( CLASSINFO ( wxAuiMDIChildFrame ) ) )
             {
-                close_wnd->Close();
+                closeWnd->Close();
             }
+
             else
 #endif
             {
-                int main_idx = m_tabs.GetIdxFromWindow(close_wnd);
-                wxCHECK_RET( main_idx != wxNOT_FOUND, wxT("no page to delete?") );
+                int mainIdx = m_tabs.GetIdxFromWindow ( closeWnd );
+                wxCHECK_RET ( mainIdx != wxNOT_FOUND, wxT ( "no page to delete?" ) );
 
-                DeletePage(main_idx);
+                DeletePage ( mainIdx );
             }
 
             // notify owner that the tab has been closed
-            wxAuiNotebookEvent e2(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, m_windowId);
-            e2.SetSelection(idx);
-            e2.SetEventObject(this);
-            GetEventHandler()->ProcessEvent(e2);
+            wxAuiNotebookEvent e2 ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, m_windowId );
+            e2.SetSelection ( idx );
+            e2.SetEventObject ( this );
+            GetEventHandler()->ProcessEvent ( e2 );
         }
     }
 }
 
 
-void wxAuiNotebook::OnTabMiddleDown(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabMiddleDown ( wxAuiNotebookEvent & evt )
 {
     // patch event through to owner
-    wxAuiTabCtrl* tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxWindow* wnd = tabs->GetWindowFromIdx(evt.GetSelection());
+    wxAuiTabCtrl * tabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxWindow * wnd = tabs->GetWindowFromIdx ( evt.GetSelection() );
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, m_windowId);
-    e.SetSelection(m_tabs.GetIdxFromWindow(wnd));
-    e.SetEventObject(this);
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, m_windowId );
+    e.SetSelection ( m_tabs.GetIdxFromWindow ( wnd ) );
+    e.SetEventObject ( this );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiNotebook::OnTabMiddleUp(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabMiddleUp ( wxAuiNotebookEvent & evt )
 {
     // if the wxAUI_NB_MIDDLE_CLICK_CLOSE is specified, middle
     // click should act like a tab close action.  However, first
     // give the owner an opportunity to handle the middle up event
     // for custom action
 
-    wxAuiTabCtrl* tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxWindow* wnd = tabs->GetWindowFromIdx(evt.GetSelection());
+    wxAuiTabCtrl * tabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxWindow * wnd = tabs->GetWindowFromIdx ( evt.GetSelection() );
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, m_windowId);
-    e.SetSelection(m_tabs.GetIdxFromWindow(wnd));
-    e.SetEventObject(this);
-    if (GetEventHandler()->ProcessEvent(e))
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, m_windowId );
+    e.SetSelection ( m_tabs.GetIdxFromWindow ( wnd ) );
+    e.SetEventObject ( this );
+
+    if ( GetEventHandler()->ProcessEvent ( e ) )
+    {
         return;
-    if (!e.IsAllowed())
+    }
+
+    if ( !e.IsAllowed() )
+    {
         return;
+    }
 
     // check if we are supposed to close on middle-up
-    if ((m_flags & wxAUI_NB_MIDDLE_CLICK_CLOSE) == 0)
+    if ( ( m_flags & wxAUI_NB_MIDDLE_CLICK_CLOSE ) == 0 )
+    {
         return;
+    }
 
     // simulate the user pressing the close button on the tab
-    evt.SetInt(wxAUI_BUTTON_CLOSE);
-    OnTabButton(evt);
+    evt.SetInt ( wxAUI_BUTTON_CLOSE );
+    OnTabButton ( evt );
 }
 
-void wxAuiNotebook::OnTabRightDown(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabRightDown ( wxAuiNotebookEvent & evt )
 {
     // patch event through to owner
-    wxAuiTabCtrl* tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxWindow* wnd = tabs->GetWindowFromIdx(evt.GetSelection());
+    wxAuiTabCtrl * tabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxWindow * wnd = tabs->GetWindowFromIdx ( evt.GetSelection() );
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, m_windowId);
-    e.SetSelection(m_tabs.GetIdxFromWindow(wnd));
-    e.SetEventObject(this);
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, m_windowId );
+    e.SetSelection ( m_tabs.GetIdxFromWindow ( wnd ) );
+    e.SetEventObject ( this );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
-void wxAuiNotebook::OnTabRightUp(wxAuiNotebookEvent& evt)
+void wxAuiNotebook::OnTabRightUp ( wxAuiNotebookEvent & evt )
 {
     // patch event through to owner
-    wxAuiTabCtrl* tabs = (wxAuiTabCtrl*)evt.GetEventObject();
-    wxWindow* wnd = tabs->GetWindowFromIdx(evt.GetSelection());
+    wxAuiTabCtrl * tabs = ( wxAuiTabCtrl * ) evt.GetEventObject();
+    wxWindow * wnd = tabs->GetWindowFromIdx ( evt.GetSelection() );
 
-    wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, m_windowId);
-    e.SetSelection(m_tabs.GetIdxFromWindow(wnd));
-    e.SetEventObject(this);
-    GetEventHandler()->ProcessEvent(e);
+    wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, m_windowId );
+    e.SetSelection ( m_tabs.GetIdxFromWindow ( wnd ) );
+    e.SetEventObject ( this );
+    GetEventHandler()->ProcessEvent ( e );
 }
 
 // Sets the normal font
-void wxAuiNotebook::SetNormalFont(const wxFont& font)
+void wxAuiNotebook::SetNormalFont ( const wxFont & font )
 {
-    m_normal_font = font;
-    GetArtProvider()->SetNormalFont(font);
+    m_normalFont = font;
+    GetArtProvider()->SetNormalFont ( font );
 }
 
 // Sets the selected tab font
-void wxAuiNotebook::SetSelectedFont(const wxFont& font)
+void wxAuiNotebook::SetSelectedFont ( const wxFont & font )
 {
-    m_selected_font = font;
-    GetArtProvider()->SetSelectedFont(font);
+    m_selectedFont = font;
+    GetArtProvider()->SetSelectedFont ( font );
 }
 
 // Sets the measuring font
-void wxAuiNotebook::SetMeasuringFont(const wxFont& font)
+void wxAuiNotebook::SetMeasuringFont ( const wxFont & font )
 {
-    GetArtProvider()->SetMeasuringFont(font);
+    GetArtProvider()->SetMeasuringFont ( font );
 }
 
 // Sets the tab font
-bool wxAuiNotebook::SetFont(const wxFont& font)
+bool wxAuiNotebook::SetFont ( const wxFont & font )
 {
-    wxControl::SetFont(font);
+    wxControl::SetFont ( font );
 
-    wxFont normalFont(font);
-    wxFont selectedFont(normalFont);
-    selectedFont.SetWeight(wxBOLD);
+    wxFont normalFont ( font );
+    wxFont selectedFont ( normalFont );
+    selectedFont.SetWeight ( wxBOLD );
 
-    SetNormalFont(normalFont);
-    SetSelectedFont(selectedFont);
-    SetMeasuringFont(selectedFont);
+    SetNormalFont ( normalFont );
+    SetSelectedFont ( selectedFont );
+    SetMeasuringFont ( selectedFont );
 
     return true;
 }
@@ -4475,11 +5095,11 @@
 // Gets the tab control height
 int wxAuiNotebook::GetTabCtrlHeight() const
 {
-    return m_tab_ctrl_height;
+    return m_tabCtrlHeight;
 }
 
 // Gets the height of the notebook for a given page height
-int wxAuiNotebook::GetHeightForPageHeight(int pageHeight)
+int wxAuiNotebook::GetHeightForPageHeight ( int pageHeight )
 {
     UpdateTabCtrlHeight();
 
@@ -4489,52 +5109,71 @@
 }
 
 // Advances the selection, generation page selection events
-void wxAuiNotebook::AdvanceSelection(bool forward)
+void wxAuiNotebook::AdvanceSelection ( bool forward )
 {
-    if (GetPageCount() <= 1)
+    if ( GetPageCount() <= 1 )
+    {
         return;
+    }
 
     int currentSelection = GetSelection();
 
-    if (forward)
+    if ( forward )
     {
-        if (currentSelection == (int) (GetPageCount() - 1))
+        if ( currentSelection == ( int ) ( GetPageCount() - 1 ) )
+        {
             return;
-        else if (currentSelection == -1)
+        }
+
+        else if ( currentSelection == -1 )
+        {
             currentSelection = 0;
+        }
+
         else
+        {
             currentSelection ++;
+        }
     }
+
     else
     {
-        if (currentSelection <= 0)
+        if ( currentSelection <= 0 )
+        {
             return;
+        }
+
         else
+        {
             currentSelection --;
+        }
     }
 
-    SetSelection(currentSelection);
+    SetSelection ( currentSelection );
 }
 
 // Shows the window menu
 bool wxAuiNotebook::ShowWindowMenu()
 {
-    wxAuiTabCtrl* tabCtrl = GetActiveTabCtrl();
+    wxAuiTabCtrl * tabCtrl = GetActiveTabCtrl();
 
-    int idx = tabCtrl->GetArtProvider()->ShowDropDown(tabCtrl, tabCtrl->GetPages(), tabCtrl->GetActivePage());
+    int idx = tabCtrl->GetArtProvider()->ShowDropDown ( tabCtrl, tabCtrl->GetPages(), tabCtrl->GetActivePage() );
 
-    if (idx != -1)
+    if ( idx != -1 )
     {
-        wxAuiNotebookEvent e(wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, tabCtrl->GetId());
-        e.SetSelection(idx);
-        e.SetOldSelection(tabCtrl->GetActivePage());
-        e.SetEventObject(tabCtrl);
-        GetEventHandler()->ProcessEvent(e);
+        wxAuiNotebookEvent e ( wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, tabCtrl->GetId() );
+        e.SetSelection ( idx );
+        e.SetOldSelection ( tabCtrl->GetActivePage() );
+        e.SetEventObject ( tabCtrl );
+        GetEventHandler()->ProcessEvent ( e );
 
         return true;
     }
+
     else
+    {
         return false;
+    }
 }
 
 void wxAuiNotebook::Thaw()

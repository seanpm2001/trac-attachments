Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 69060)
+++ include/wx/aui/auibar.h	(working copy)
@@ -39,8 +39,8 @@
     // analogous to wxAUI_TB_VERTICAL, but forces the toolbar
     // to be horizontal
     wxAUI_TB_HORIZONTAL    = 1 << 7,
-    wxAUI_TB_HORZ_TEXT     = (wxAUI_TB_HORZ_LAYOUT | wxAUI_TB_TEXT),
-    wxAUI_ORIENTATION_MASK = (wxAUI_TB_VERTICAL | wxAUI_TB_HORIZONTAL),
+    wxAUI_TB_HORZ_TEXT     = ( wxAUI_TB_HORZ_LAYOUT | wxAUI_TB_TEXT ),
+    wxAUI_ORIENTATION_MASK = ( wxAUI_TB_VERTICAL | wxAUI_TB_HORIZONTAL ),
     wxAUI_TB_DEFAULT_STYLE = 0
 };
 
@@ -65,47 +65,47 @@
 class WXDLLIMPEXP_AUI wxAuiToolBarEvent : public wxNotifyEvent
 {
 public:
-    wxAuiToolBarEvent(wxEventType command_type = wxEVT_NULL,
-                      int win_id = 0)
-          : wxNotifyEvent(command_type, win_id)
+    wxAuiToolBarEvent ( wxEventType commandType = wxEVT_NULL,
+                        int winId = 0 )
+        : wxNotifyEvent ( commandType, winId )
     {
-        is_dropdown_clicked = false;
-        click_pt = wxPoint(-1, -1);
-        rect = wxRect(-1,-1, 0, 0);
-        tool_id = -1;
+        m_isDropdownClicked = false;
+        m_clickPt = wxPoint ( -1, -1 );
+        m_rect = wxRect ( -1, -1, 0, 0 );
+        m_toolId = -1;
     }
 #ifndef SWIG
-    wxAuiToolBarEvent(const wxAuiToolBarEvent& c) : wxNotifyEvent(c)
+    wxAuiToolBarEvent ( const wxAuiToolBarEvent & c ) : wxNotifyEvent ( c )
     {
-        is_dropdown_clicked = c.is_dropdown_clicked;
-        click_pt = c.click_pt;
-        rect = c.rect;
-        tool_id = c.tool_id;
+        m_isDropdownClicked = c.m_isDropdownClicked;
+        m_clickPt = c.m_clickPt;
+        m_rect = c.m_rect;
+        m_toolId = c.m_toolId;
     }
 #endif
-    wxEvent *Clone() const { return new wxAuiToolBarEvent(*this); }
+    wxEvent * Clone() const { return new wxAuiToolBarEvent ( *this ); }
 
-    bool IsDropDownClicked() const  { return is_dropdown_clicked; }
-    void SetDropDownClicked(bool c) { is_dropdown_clicked = c;    }
+    bool IsDropDownClicked() const  { return m_isDropdownClicked; }
+    void SetDropDownClicked ( bool c ) { m_isDropdownClicked = c;    }
 
-    wxPoint GetClickPoint() const        { return click_pt; }
-    void SetClickPoint(const wxPoint& p) { click_pt = p;    }
+    wxPoint GetClickPoint() const        { return m_clickPt; }
+    void SetClickPoint ( const wxPoint & p ) { m_clickPt = p;    }
 
-    wxRect GetItemRect() const        { return rect; }
-    void SetItemRect(const wxRect& r) { rect = r;    }
+    wxRect GetItemRect() const        { return m_rect; }
+    void SetItemRect ( const wxRect & r ) { m_rect = r;    }
 
-    int GetToolId() const  { return tool_id; }
-    void SetToolId(int toolid) { tool_id = toolid; }
+    int GetToolId() const  { return m_toolId; }
+    void SetToolId ( int toolId ) { m_toolId = toolId; }
 
 private:
 
-    bool is_dropdown_clicked;
-    wxPoint click_pt;
-    wxRect rect;
-    int tool_id;
+    bool m_isDropdownClicked;
+    wxPoint m_clickPt;
+    wxRect m_rect;
+    int m_toolId;
 
 private:
-    DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxAuiToolBarEvent)
+    DECLARE_DYNAMIC_CLASS_NO_ASSIGN ( wxAuiToolBarEvent )
 };
 
 
@@ -117,137 +117,137 @@
 
     wxAuiToolBarItem()
     {
-        window = NULL;
-        sizer_item = NULL;
-        spacer_pixels = 0;
-        toolid = 0;
-        kind = wxITEM_NORMAL;
-        state = 0;  // normal, enabled
-        proportion = 0;
-        active = true;
-        dropdown = true;
-        sticky = true;
-        user_data = 0;
-        alignment = wxALIGN_CENTER;
+        m_window = NULL;
+        m_sizerItem = NULL;
+        m_spacerPixels = 0;
+        m_toolId = 0;
+        m_kind = wxITEM_NORMAL;
+        m_state = 0;  // normal, enabled
+        m_proportion = 0;
+        m_active = true;
+        m_dropDown = true;
+        m_sticky = true;
+        m_userData = 0;
+        m_alignment = wxALIGN_CENTER;
     }
 
-    wxAuiToolBarItem(const wxAuiToolBarItem& c)
+    wxAuiToolBarItem ( const wxAuiToolBarItem & c )
     {
-        Assign(c);
+        Assign ( c );
     }
 
-    wxAuiToolBarItem& operator=(const wxAuiToolBarItem& c)
+    wxAuiToolBarItem & operator= ( const wxAuiToolBarItem & c )
     {
-        Assign(c);
+        Assign ( c );
         return *this;
     }
 
-    void Assign(const wxAuiToolBarItem& c)
+    void Assign ( const wxAuiToolBarItem & c )
     {
-        window = c.window;
-        label = c.label;
-        bitmap = c.bitmap;
-        disabled_bitmap = c.disabled_bitmap;
-        hover_bitmap = c.hover_bitmap;
-        short_help = c.short_help;
-        long_help = c.long_help;
-        sizer_item = c.sizer_item;
-        min_size = c.min_size;
-        spacer_pixels = c.spacer_pixels;
-        toolid = c.toolid;
-        kind = c.kind;
-        state = c.state;
-        proportion = c.proportion;
-        active = c.active;
-        dropdown = c.dropdown;
-        sticky = c.sticky;
-        user_data = c.user_data;
-        alignment = c.alignment;
+        m_window = c.m_window;
+        m_label = c.m_label;
+        m_bitmap = c.m_bitmap;
+        m_disabledBitmap = c.m_disabledBitmap;
+        m_hoverBitmap = c.m_hoverBitmap;
+        m_shortHelp = c.m_shortHelp;
+        m_longHelp = c.m_longHelp;
+        m_sizerItem = c.m_sizerItem;
+        m_minSize = c.m_minSize;
+        m_spacerPixels = c.m_spacerPixels;
+        m_toolId = c.m_toolId;
+        m_kind = c.m_kind;
+        m_state = c.m_state;
+        m_proportion = c.m_proportion;
+        m_active = c.m_active;
+        m_dropDown = c.m_dropDown;
+        m_sticky = c.m_sticky;
+        m_userData = c.m_userData;
+        m_alignment = c.m_alignment;
     }
 
 
-    void SetWindow(wxWindow* w) { window = w; }
-    wxWindow* GetWindow() { return window; }
+    void SetWindow ( wxWindow * w ) { m_window = w; }
+    wxWindow * GetWindow() { return m_window; }
 
-    void SetId(int new_id) { toolid = new_id; }
-    int GetId() const { return toolid; }
+    void SetId ( int newId ) { m_toolId = newId; }
+    int GetId() const { return m_toolId; }
 
-    void SetKind(int new_kind) { kind = new_kind; }
-    int GetKind() const { return kind; }
+    void SetKind ( int newKind ) { m_kind = newKind; }
+    int GetKind() const { return m_kind; }
 
-    void SetState(int new_state) { state = new_state; }
-    int GetState() const { return state; }
+    void SetState ( int newState ) { m_state = newState; }
+    int GetState() const { return m_state; }
 
-    void SetSizerItem(wxSizerItem* s) { sizer_item = s; }
-    wxSizerItem* GetSizerItem() const { return sizer_item; }
+    void SetSizerItem ( wxSizerItem * s ) { m_sizerItem = s; }
+    wxSizerItem * GetSizerItem() const { return m_sizerItem; }
 
-    void SetLabel(const wxString& s) { label = s; }
-    const wxString& GetLabel() const { return label; }
+    void SetLabel ( const wxString & s ) { m_label = s; }
+    const wxString & GetLabel() const { return m_label; }
 
-    void SetBitmap(const wxBitmap& bmp) { bitmap = bmp; }
-    const wxBitmap& GetBitmap() const { return bitmap; }
+    void SetBitmap ( const wxBitmap & bmp ) { m_bitmap = bmp; }
+    const wxBitmap & GetBitmap() const { return m_bitmap; }
 
-    void SetDisabledBitmap(const wxBitmap& bmp) { disabled_bitmap = bmp; }
-    const wxBitmap& GetDisabledBitmap() const { return disabled_bitmap; }
+    void SetDisabledBitmap ( const wxBitmap & bmp ) { m_disabledBitmap = bmp; }
+    const wxBitmap & GetDisabledBitmap() const { return m_disabledBitmap; }
 
-    void SetHoverBitmap(const wxBitmap& bmp) { hover_bitmap = bmp; }
-    const wxBitmap& GetHoverBitmap() const { return hover_bitmap; }
+    void SetHoverBitmap ( const wxBitmap & bmp ) { m_hoverBitmap = bmp; }
+    const wxBitmap & GetHoverBitmap() const { return m_hoverBitmap; }
 
-    void SetShortHelp(const wxString& s) { short_help = s; }
-    const wxString& GetShortHelp() const { return short_help; }
+    void SetShortHelp ( const wxString & s ) { m_shortHelp = s; }
+    const wxString & GetShortHelp() const { return m_shortHelp; }
 
-    void SetLongHelp(const wxString& s) { long_help = s; }
-    const wxString& GetLongHelp() const { return long_help; }
+    void SetLongHelp ( const wxString & s ) { m_longHelp = s; }
+    const wxString & GetLongHelp() const { return m_longHelp; }
 
-    void SetMinSize(const wxSize& s) { min_size = s; }
-    const wxSize& GetMinSize() const { return min_size; }
+    void SetMinSize ( const wxSize & s ) { m_minSize = s; }
+    const wxSize & GetMinSize() const { return m_minSize; }
 
-    void SetSpacerPixels(int s) { spacer_pixels = s; }
-    int GetSpacerPixels() const { return spacer_pixels; }
+    void SetSpacerPixels ( int s ) { m_spacerPixels = s; }
+    int GetSpacerPixels() const { return m_spacerPixels; }
 
-    void SetProportion(int p) { proportion = p; }
-    int GetProportion() const { return proportion; }
+    void SetProportion ( int p ) { m_proportion = p; }
+    int GetProportion() const { return m_proportion; }
 
-    void SetActive(bool b) { active = b; }
-    bool IsActive() const { return active; }
+    void SetActive ( bool b ) { m_active = b; }
+    bool IsActive() const { return m_active; }
 
-    void SetHasDropDown(bool b) { dropdown = b; }
-    bool HasDropDown() const { return dropdown; }
+    void SetHasDropDown ( bool b ) { m_dropDown = b; }
+    bool HasDropDown() const { return m_dropDown; }
 
-    void SetSticky(bool b) { sticky = b; }
-    bool IsSticky() const { return sticky; }
+    void SetSticky ( bool b ) { m_sticky = b; }
+    bool IsSticky() const { return m_sticky; }
 
-    void SetUserData(long l) { user_data = l; }
-    long GetUserData() const { return user_data; }
+    void SetUserData ( long l ) { m_userData = l; }
+    long GetUserData() const { return m_userData; }
 
-    void SetAlignment(int l) { alignment = l; }
-    int GetAlignment() const { return alignment; }
+    void SetAlignment ( int l ) { m_alignment = l; }
+    int GetAlignment() const { return m_alignment; }
 
 private:
 
-    wxWindow* window;          // item's associated window
-    wxString label;            // label displayed on the item
-    wxBitmap bitmap;           // item's bitmap
-    wxBitmap disabled_bitmap;  // item's disabled bitmap
-    wxBitmap hover_bitmap;     // item's hover bitmap
-    wxString short_help;       // short help (for tooltip)
-    wxString long_help;        // long help (for status bar)
-    wxSizerItem* sizer_item;   // sizer item
-    wxSize min_size;           // item's minimum size
-    int spacer_pixels;         // size of a spacer
-    int toolid;                // item's id
-    int kind;                  // item's kind
-    int state;                 // state
-    int proportion;            // proportion
-    bool active;               // true if the item is currently active
-    bool dropdown;             // true if the item has a dropdown button
-    bool sticky;               // overrides button states if true (always active)
-    long user_data;            // user-specified data
-    int alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
+    wxWindow * m_window;         // item's associated window
+    wxString m_label;            // label displayed on the item
+    wxBitmap m_bitmap;           // item's bitmap
+    wxBitmap m_disabledBitmap;  // item's disabled bitmap
+    wxBitmap m_hoverBitmap;     // item's hover bitmap
+    wxString m_shortHelp;       // short help (for tooltip)
+    wxString m_longHelp;        // long help (for status bar)
+    wxSizerItem * m_sizerItem;  // sizer item
+    wxSize m_minSize;           // item's minimum size
+    int m_spacerPixels;         // size of a spacer
+    int m_toolId;                // item's id
+    int m_kind;                  // item's kind
+    int m_state;                 // state
+    int m_proportion;            // proportion
+    bool m_active;               // true if the item is currently active
+    bool m_dropDown;             // true if the item has a dropdown button
+    bool m_sticky;               // overrides button states if true (always active)
+    long m_userData;            // user-specified data
+    int m_alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
 };
 
 #ifndef SWIG
-WX_DECLARE_USER_EXPORTED_OBJARRAY(wxAuiToolBarItem, wxAuiToolBarItemArray, WXDLLIMPEXP_AUI);
+WX_DECLARE_USER_EXPORTED_OBJARRAY ( wxAuiToolBarItem, wxAuiToolBarItemArray, WXDLLIMPEXP_AUI );
 #endif
 
 
@@ -262,75 +262,75 @@
     wxAuiToolBarArt() { }
     virtual ~wxAuiToolBarArt() { }
 
-    virtual wxAuiToolBarArt* Clone() = 0;
-    virtual void SetFlags(unsigned int flags) = 0;
+    virtual wxAuiToolBarArt * Clone() = 0;
+    virtual void SetFlags ( unsigned int flags ) = 0;
     virtual unsigned int GetFlags() = 0;
-    virtual void SetFont(const wxFont& font) = 0;
+    virtual void SetFont ( const wxFont & font ) = 0;
     virtual wxFont GetFont() = 0;
-    virtual void SetTextOrientation(int orientation) = 0;
+    virtual void SetTextOrientation ( int orientation ) = 0;
     virtual int GetTextOrientation() = 0;
 
-    virtual void DrawBackground(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& rect) = 0;
+    virtual void DrawBackground (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawLabel(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item,
-                         const wxRect& rect) = 0;
+    virtual void DrawLabel (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawButton(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item,
-                         const wxRect& rect) = 0;
+    virtual void DrawButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawDropDownButton(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item,
-                         const wxRect& rect) = 0;
+    virtual void DrawDropDownButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawControlLabel(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item,
-                         const wxRect& rect) = 0;
+    virtual void DrawControlLabel (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawSeparator(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& rect) = 0;
+    virtual void DrawSeparator (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawGripper(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& rect) = 0;
+    virtual void DrawGripper (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect ) = 0;
 
-    virtual void DrawOverflowButton(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxRect& rect,
-                         int state) = 0;
+    virtual void DrawOverflowButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect,
+        int state ) = 0;
 
-    virtual wxSize GetLabelSize(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item) = 0;
+    virtual wxSize GetLabelSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item ) = 0;
 
-    virtual wxSize GetToolSize(
-                         wxDC& dc,
-                         wxWindow* wnd,
-                         const wxAuiToolBarItem& item) = 0;
+    virtual wxSize GetToolSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item ) = 0;
 
-    virtual int GetElementSize(int element_id) = 0;
-    virtual void SetElementSize(int element_id, int size) = 0;
+    virtual int GetElementSize ( int elementId ) = 0;
+    virtual void SetElementSize ( int elementId, int size ) = 0;
 
-    virtual int ShowDropDown(
-                         wxWindow* wnd,
-                         const wxAuiToolBarItemArray& items) = 0;
+    virtual int ShowDropDown (
+        wxWindow * wnd,
+        const wxAuiToolBarItemArray & items ) = 0;
 };
 
 
@@ -343,94 +343,94 @@
     wxAuiDefaultToolBarArt();
     virtual ~wxAuiDefaultToolBarArt();
 
-    virtual wxAuiToolBarArt* Clone();
-    virtual void SetFlags(unsigned int flags);
+    virtual wxAuiToolBarArt * Clone();
+    virtual void SetFlags ( unsigned int flags );
     virtual unsigned int GetFlags();
-    virtual void SetFont(const wxFont& font);
+    virtual void SetFont ( const wxFont & font );
     virtual wxFont GetFont();
-    virtual void SetTextOrientation(int orientation);
+    virtual void SetTextOrientation ( int orientation );
     virtual int GetTextOrientation();
 
-    virtual void DrawBackground(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxRect& rect);
+    virtual void DrawBackground (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect );
 
-    virtual void DrawLabel(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item,
-                const wxRect& rect);
+    virtual void DrawLabel (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect );
 
-    virtual void DrawButton(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item,
-                const wxRect& rect);
+    virtual void DrawButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect );
 
-    virtual void DrawDropDownButton(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item,
-                const wxRect& rect);
+    virtual void DrawDropDownButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect );
 
-    virtual void DrawControlLabel(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item,
-                const wxRect& rect);
+    virtual void DrawControlLabel (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item,
+        const wxRect & rect );
 
-    virtual void DrawSeparator(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxRect& rect);
+    virtual void DrawSeparator (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect );
 
-    virtual void DrawGripper(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxRect& rect);
+    virtual void DrawGripper (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect );
 
-    virtual void DrawOverflowButton(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxRect& rect,
-                int state);
+    virtual void DrawOverflowButton (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxRect & rect,
+        int state );
 
-    virtual wxSize GetLabelSize(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item);
+    virtual wxSize GetLabelSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item );
 
-    virtual wxSize GetToolSize(
-                wxDC& dc,
-                wxWindow* wnd,
-                const wxAuiToolBarItem& item);
+    virtual wxSize GetToolSize (
+        wxDC & dc,
+        wxWindow * wnd,
+        const wxAuiToolBarItem & item );
 
-    virtual int GetElementSize(int element);
-    virtual void SetElementSize(int element_id, int size);
+    virtual int GetElementSize ( int element );
+    virtual void SetElementSize ( int elementId, int size );
 
-    virtual int ShowDropDown(wxWindow* wnd,
-                             const wxAuiToolBarItemArray& items);
+    virtual int ShowDropDown ( wxWindow * wnd,
+                               const wxAuiToolBarItemArray & items );
 
 protected:
 
-    wxBitmap m_button_dropdown_bmp;
-    wxBitmap m_disabled_button_dropdown_bmp;
-    wxBitmap m_overflow_bmp;
-    wxBitmap m_disabled_overflow_bmp;
-    wxColour m_base_colour;
-    wxColour m_highlight_colour;
+    wxBitmap m_buttonDropdownBmp;
+    wxBitmap m_disabledButtonDropdownBmp;
+    wxBitmap m_overflowBmp;
+    wxBitmap m_disabledOverflowBmp;
+    wxColour m_baseColour;
+    wxColour m_highlightColour;
     wxFont m_font;
     unsigned int m_flags;
-    int m_text_orientation;
+    int m_textOrientation;
 
-    wxPen m_gripper_pen1;
-    wxPen m_gripper_pen2;
-    wxPen m_gripper_pen3;
+    wxPen m_gripperPen1;
+    wxPen m_gripperPen2;
+    wxPen m_gripperPen3;
 
-    int m_separator_size;
-    int m_gripper_size;
-    int m_overflow_size;
+    int m_separatorSize;
+    int m_gripperSize;
+    int m_overflowSize;
 };
 
 
@@ -440,219 +440,219 @@
 {
 public:
 
-    wxAuiToolBar(wxWindow* parent,
-                 wxWindowID id = -1,
-                 const wxPoint& position = wxDefaultPosition,
-                 const wxSize& size = wxDefaultSize,
-                 long style = wxAUI_TB_DEFAULT_STYLE);
+    wxAuiToolBar ( wxWindow * parent,
+                   wxWindowID id = -1,
+                   const wxPoint & position = wxDefaultPosition,
+                   const wxSize & size = wxDefaultSize,
+                   long style = wxAUI_TB_DEFAULT_STYLE );
     virtual ~wxAuiToolBar();
 
-    void SetWindowStyleFlag(long style);
+    void SetWindowStyleFlag ( long style );
     long GetWindowStyleFlag() const;
 
-    void SetArtProvider(wxAuiToolBarArt* art);
-    wxAuiToolBarArt* GetArtProvider() const;
+    void SetArtProvider ( wxAuiToolBarArt * art );
+    wxAuiToolBarArt * GetArtProvider() const;
 
-    bool SetFont(const wxFont& font);
+    bool SetFont ( const wxFont & font );
 
 
-    wxAuiToolBarItem* AddTool(int tool_id,
-                 const wxString& label,
-                 const wxBitmap& bitmap,
-                 const wxString& short_help_string = wxEmptyString,
-                 wxItemKind kind = wxITEM_NORMAL);
+    wxAuiToolBarItem * AddTool ( int toolId,
+                                 const wxString & label,
+                                 const wxBitmap & bitmap,
+                                 const wxString & shortHelpString = wxEmptyString,
+                                 wxItemKind kind = wxITEM_NORMAL );
 
-    wxAuiToolBarItem* AddTool(int tool_id,
-                 const wxString& label,
-                 const wxBitmap& bitmap,
-                 const wxBitmap& disabled_bitmap,
-                 wxItemKind kind,
-                 const wxString& short_help_string,
-                 const wxString& long_help_string,
-                 wxObject* client_data);
+    wxAuiToolBarItem * AddTool ( int toolId,
+                                 const wxString & label,
+                                 const wxBitmap & bitmap,
+                                 const wxBitmap & disabledBitmap,
+                                 wxItemKind kind,
+                                 const wxString & shortHelpString,
+                                 const wxString & longHelpString,
+                                 wxObject * clientData );
 
-    wxAuiToolBarItem* AddTool(int tool_id,
-                 const wxBitmap& bitmap,
-                 const wxBitmap& disabled_bitmap,
-                 bool toggle = false,
-                 wxObject* client_data = NULL,
-                 const wxString& short_help_string = wxEmptyString,
-                 const wxString& long_help_string = wxEmptyString)
+    wxAuiToolBarItem * AddTool ( int toolId,
+                                 const wxBitmap & bitmap,
+                                 const wxBitmap & disabledBitmap,
+                                 bool toggle = false,
+                                 wxObject * clientData = NULL,
+                                 const wxString & shortHelpString = wxEmptyString,
+                                 const wxString & longHelpString = wxEmptyString )
     {
-        return AddTool(tool_id,
-                wxEmptyString,
-                bitmap,
-                disabled_bitmap,
-                toggle ? wxITEM_CHECK : wxITEM_NORMAL,
-                short_help_string,
-                long_help_string,
-                client_data);
+        return AddTool ( toolId,
+                         wxEmptyString,
+                         bitmap,
+                         disabledBitmap,
+                         toggle ? wxITEM_CHECK : wxITEM_NORMAL,
+                         shortHelpString,
+                         longHelpString,
+                         clientData );
     }
 
-    wxAuiToolBarItem* AddLabel(int tool_id,
-                  const wxString& label = wxEmptyString,
-                  const int width = -1);
-    wxAuiToolBarItem* AddControl(wxControl* control,
-                    const wxString& label = wxEmptyString);
-    wxAuiToolBarItem* AddSeparator();
-    wxAuiToolBarItem* AddSpacer(int pixels);
-    wxAuiToolBarItem* AddStretchSpacer(int proportion = 1);
+    wxAuiToolBarItem * AddLabel ( int toolId,
+                                  const wxString & label = wxEmptyString,
+                                  const int width = -1 );
+    wxAuiToolBarItem * AddControl ( wxControl * control,
+                                    const wxString & label = wxEmptyString );
+    wxAuiToolBarItem * AddSeparator();
+    wxAuiToolBarItem * AddSpacer ( int pixels );
+    wxAuiToolBarItem * AddStretchSpacer ( int proportion = 1 );
 
     bool Realize();
 
-    wxControl* FindControl(int window_id);
-    wxAuiToolBarItem* FindToolByPosition(wxCoord x, wxCoord y) const;
-    wxAuiToolBarItem* FindToolByIndex(int idx) const;
-    wxAuiToolBarItem* FindTool(int tool_id) const;
+    wxControl * FindControl ( int windowId );
+    wxAuiToolBarItem * FindToolByPosition ( wxCoord x, wxCoord y ) const;
+    wxAuiToolBarItem * FindToolByIndex ( int idx ) const;
+    wxAuiToolBarItem * FindTool ( int toolId ) const;
 
     void ClearTools() { Clear() ; }
     void Clear();
-    bool DeleteTool(int tool_id);
-    bool DeleteByIndex(int tool_id);
+    bool DeleteTool ( int toolId );
+    bool DeleteByIndex ( int toolId );
 
     size_t GetToolCount() const;
-    int GetToolPos(int tool_id) const { return GetToolIndex(tool_id); }
-    int GetToolIndex(int tool_id) const;
-    bool GetToolFits(int tool_id) const;
-    wxRect GetToolRect(int tool_id) const;
-    bool GetToolFitsByIndex(int tool_id) const;
+    int GetToolPos ( int toolId ) const { return GetToolIndex ( toolId ); }
+    int GetToolIndex ( int toolId ) const;
+    bool GetToolFits ( int toolId ) const;
+    wxRect GetToolRect ( int toolId ) const;
+    bool GetToolFitsByIndex ( int toolId ) const;
     bool GetToolBarFits() const;
 
-    void SetMargins(const wxSize& size) { SetMargins(size.x, size.x, size.y, size.y); }
-    void SetMargins(int x, int y) { SetMargins(x, x, y, y); }
-    void SetMargins(int left, int right, int top, int bottom);
+    void SetMargins ( const wxSize & size ) { SetMargins ( size.x, size.x, size.y, size.y ); }
+    void SetMargins ( int x, int y ) { SetMargins ( x, x, y, y ); }
+    void SetMargins ( int left, int right, int top, int bottom );
 
-    void SetToolBitmapSize(const wxSize& size);
+    void SetToolBitmapSize ( const wxSize & size );
     wxSize GetToolBitmapSize() const;
 
     bool GetOverflowVisible() const;
-    void SetOverflowVisible(bool visible);
+    void SetOverflowVisible ( bool visible );
 
     bool GetGripperVisible() const;
-    void SetGripperVisible(bool visible);
+    void SetGripperVisible ( bool visible );
 
-    void ToggleTool(int tool_id, bool state);
-    bool GetToolToggled(int tool_id) const;
+    void ToggleTool ( int toolId, bool state );
+    bool GetToolToggled ( int toolId ) const;
 
-    void EnableTool(int tool_id, bool state);
-    bool GetToolEnabled(int tool_id) const;
+    void EnableTool ( int toolId, bool state );
+    bool GetToolEnabled ( int toolId ) const;
 
-    void SetToolDropDown(int tool_id, bool dropdown);
-    bool GetToolDropDown(int tool_id) const;
+    void SetToolDropDown ( int toolId, bool dropdown );
+    bool GetToolDropDown ( int toolId ) const;
 
-    void SetToolBorderPadding(int padding);
+    void SetToolBorderPadding ( int padding );
     int  GetToolBorderPadding() const;
 
-    void SetToolTextOrientation(int orientation);
+    void SetToolTextOrientation ( int orientation );
     int  GetToolTextOrientation() const;
 
-    void SetToolPacking(int packing);
+    void SetToolPacking ( int packing );
     int  GetToolPacking() const;
 
-    void SetToolProportion(int tool_id, int proportion);
-    int  GetToolProportion(int tool_id) const;
+    void SetToolProportion ( int toolId, int proportion );
+    int  GetToolProportion ( int toolId ) const;
 
-    void SetToolSeparation(int separation);
+    void SetToolSeparation ( int separation );
     int GetToolSeparation() const;
 
-    void SetToolSticky(int tool_id, bool sticky);
-    bool GetToolSticky(int tool_id) const;
+    void SetToolSticky ( int toolId, bool sticky );
+    bool GetToolSticky ( int toolId ) const;
 
-    wxString GetToolLabel(int tool_id) const;
-    void SetToolLabel(int tool_id, const wxString& label);
+    wxString GetToolLabel ( int toolId ) const;
+    void SetToolLabel ( int toolId, const wxString & label );
 
-    wxBitmap GetToolBitmap(int tool_id) const;
-    void SetToolBitmap(int tool_id, const wxBitmap& bitmap);
+    wxBitmap GetToolBitmap ( int toolId ) const;
+    void SetToolBitmap ( int toolId, const wxBitmap & bitmap );
 
-    wxString GetToolShortHelp(int tool_id) const;
-    void SetToolShortHelp(int tool_id, const wxString& help_string);
+    wxString GetToolShortHelp ( int toolId ) const;
+    void SetToolShortHelp ( int toolId, const wxString & helpString );
 
-    wxString GetToolLongHelp(int tool_id) const;
-    void SetToolLongHelp(int tool_id, const wxString& help_string);
+    wxString GetToolLongHelp ( int toolId ) const;
+    void SetToolLongHelp ( int toolId, const wxString & helpString );
 
-    void SetCustomOverflowItems(const wxAuiToolBarItemArray& prepend,
-                                const wxAuiToolBarItemArray& append);
+    void SetCustomOverflowItems ( const wxAuiToolBarItemArray & prepend,
+                                  const wxAuiToolBarItemArray & append );
 
     // get size of hint rectangle for a particular dock location
-    wxSize GetHintSize(int dock_direction) const;
-    bool IsPaneValid(const wxAuiPaneInfo& pane) const;
+    wxSize GetHintSize ( int dockDirection ) const;
+    bool IsPaneValid ( const wxAuiPaneInfo & pane ) const;
 
 protected:
 
-    virtual void OnCustomRender(wxDC& WXUNUSED(dc),
-                                const wxAuiToolBarItem& WXUNUSED(item),
-                                const wxRect& WXUNUSED(rect)) { }
+    virtual void OnCustomRender ( wxDC & WXUNUSED ( dc ),
+                                  const wxAuiToolBarItem & WXUNUSED ( item ),
+                                  const wxRect & WXUNUSED ( rect ) ) { }
 
 protected:
 
     void DoIdleUpdate();
-    void SetOrientation(int orientation);
-    void SetHoverItem(wxAuiToolBarItem* item);
-    void SetPressedItem(wxAuiToolBarItem* item);
+    void SetOrientation ( int orientation );
+    void SetHoverItem ( wxAuiToolBarItem * item );
+    void SetPressedItem ( wxAuiToolBarItem * item );
     void RefreshOverflowState();
 
     int GetOverflowState() const;
     wxRect GetOverflowRect() const;
-    wxSize GetLabelSize(const wxString& label);
-    wxAuiToolBarItem* FindToolByPositionWithPacking(wxCoord x, wxCoord y) const;
+    wxSize GetLabelSize ( const wxString & label );
+    wxAuiToolBarItem * FindToolByPositionWithPacking ( wxCoord x, wxCoord y ) const;
 
-    void DoSetSize(int x,
-                   int y,
-                   int width,
-                   int height,
-                   int sizeFlags = wxSIZE_AUTO);
+    void DoSetSize ( int x,
+                     int y,
+                     int width,
+                     int height,
+                     int sizeFlags = wxSIZE_AUTO );
 
 protected: // handlers
 
-    void OnSize(wxSizeEvent& evt);
-    void OnIdle(wxIdleEvent& evt);
-    void OnPaint(wxPaintEvent& evt);
-    void OnEraseBackground(wxEraseEvent& evt);
-    void OnLeftDown(wxMouseEvent& evt);
-    void OnLeftUp(wxMouseEvent& evt);
-    void OnRightDown(wxMouseEvent& evt);
-    void OnRightUp(wxMouseEvent& evt);
-    void OnMiddleDown(wxMouseEvent& evt);
-    void OnMiddleUp(wxMouseEvent& evt);
-    void OnMotion(wxMouseEvent& evt);
-    void OnLeaveWindow(wxMouseEvent& evt);
-    void OnCaptureLost(wxMouseCaptureLostEvent& evt);
-    void OnSetCursor(wxSetCursorEvent& evt);
+    void OnSize ( wxSizeEvent & evt );
+    void OnIdle ( wxIdleEvent & evt );
+    void OnPaint ( wxPaintEvent & evt );
+    void OnEraseBackground ( wxEraseEvent & evt );
+    void OnLeftDown ( wxMouseEvent & evt );
+    void OnLeftUp ( wxMouseEvent & evt );
+    void OnRightDown ( wxMouseEvent & evt );
+    void OnRightUp ( wxMouseEvent & evt );
+    void OnMiddleDown ( wxMouseEvent & evt );
+    void OnMiddleUp ( wxMouseEvent & evt );
+    void OnMotion ( wxMouseEvent & evt );
+    void OnLeaveWindow ( wxMouseEvent & evt );
+    void OnCaptureLost ( wxMouseCaptureLostEvent & evt );
+    void OnSetCursor ( wxSetCursorEvent & evt );
 
 protected:
 
     wxAuiToolBarItemArray m_items;      // array of toolbar items
-    wxAuiToolBarArt* m_art;             // art provider
-    wxBoxSizer* m_sizer;                // main sizer for toolbar
-    wxAuiToolBarItem* m_action_item;    // item that's being acted upon (pressed)
-    wxAuiToolBarItem* m_tip_item;       // item that has its tooltip shown
+    wxAuiToolBarArt * m_art;            // art provider
+    wxBoxSizer * m_sizer;               // main sizer for toolbar
+    wxAuiToolBarItem * m_actionItem;   // item that's being acted upon (pressed)
+    wxAuiToolBarItem * m_tipItem;      // item that has its tooltip shown
     wxBitmap m_bitmap;                  // double-buffer bitmap
-    wxSizerItem* m_gripper_sizer_item;
-    wxSizerItem* m_overflow_sizer_item;
-    wxSize m_absolute_min_size;
-    wxPoint m_action_pos;               // position of left-mouse down
-    wxAuiToolBarItemArray m_custom_overflow_prepend;
-    wxAuiToolBarItemArray m_custom_overflow_append;
+    wxSizerItem * m_gripperSizerItem;
+    wxSizerItem * m_overflowSizerItem;
+    wxSize m_absoluteMinSize;
+    wxPoint m_actionPos;               // position of left-mouse down
+    wxAuiToolBarItemArray m_customOverflowPrepend;
+    wxAuiToolBarItemArray m_customOverflowAppend;
 
-    int m_button_width;
-    int m_button_height;
-    int m_sizer_element_count;
-    int m_left_padding;
-    int m_right_padding;
-    int m_top_padding;
-    int m_bottom_padding;
-    int m_tool_packing;
-    int m_tool_border_padding;
-    int m_tool_text_orientation;
-    int m_overflow_state;
+    int m_buttonWidth;
+    int m_buttonHeight;
+    int m_sizerElementCount;
+    int m_leftPadding;
+    int m_rightPadding;
+    int m_topPadding;
+    int m_bottomPadding;
+    int m_toolPacking;
+    int m_toolBorderPadding;
+    int m_toolTextOrientation;
+    int m_overflowState;
     bool m_dragging;
-    bool m_gripper_visible;
-    bool m_overflow_visible;
+    bool m_gripperVisible;
+    bool m_overflowVisible;
     long m_style;
 
-    bool RealizeHelper(wxClientDC& dc, bool horizontal);
-    static bool IsPaneValid(long style, const wxAuiPaneInfo& pane);
-    bool IsPaneValid(long style) const;
+    bool RealizeHelper ( wxClientDC & dc, bool horizontal );
+    static bool IsPaneValid ( long style, const wxAuiPaneInfo & pane );
+    bool IsPaneValid ( long style ) const;
     void SetArtFlags() const;
     wxOrientation m_orientation;
     wxSize m_horzHintSize;
@@ -663,7 +663,7 @@
     void DoResetMouseState();
 
     DECLARE_EVENT_TABLE()
-    DECLARE_CLASS(wxAuiToolBar)
+    DECLARE_CLASS ( wxAuiToolBar )
 };
 
 
@@ -673,13 +673,13 @@
 
 #ifndef SWIG
 
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, wxAuiToolBarEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, wxAuiToolBarEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, wxAuiToolBarEvent );
-wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, wxAuiToolBarEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, wxAuiToolBarEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, wxAuiToolBarEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, wxAuiToolBarEvent );
+wxDECLARE_EXPORTED_EVENT ( WXDLLIMPEXP_AUI, wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, wxAuiToolBarEvent );
 
-typedef void (wxEvtHandler::*wxAuiToolBarEventFunction)(wxAuiToolBarEvent&);
+typedef void ( wxEvtHandler::*wxAuiToolBarEventFunction ) ( wxAuiToolBarEvent & );
 
 #define wxAuiToolBarEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxAuiToolBarEventFunction, func)
@@ -698,18 +698,19 @@
 #else
 
 // wxpython/swig event work
-%constant wxEventType wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN;
-%constant wxEventType wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK;
-%constant wxEventType wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK;
-%constant wxEventType wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK;
-%constant wxEventType wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG;
+% constant wxEventType wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN;
+% constant wxEventType wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK;
+% constant wxEventType wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK;
+% constant wxEventType wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK;
+% constant wxEventType wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG;
 
-%pythoncode {
-    EVT_AUITOOLBAR_TOOL_DROPDOWN = wx.PyEventBinder( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, 1 )
-    EVT_AUITOOLBAR_OVERFLOW_CLICK = wx.PyEventBinder( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, 1 )
-    EVT_AUITOOLBAR_RIGHT_CLICK = wx.PyEventBinder( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, 1 )
-    EVT_AUITOOLBAR_MIDDLE_CLICK = wx.PyEventBinder( wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, 1 )
-    EVT_AUITOOLBAR_BEGIN_DRAG = wx.PyEventBinder( wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, 1 )
+% pythoncode
+{
+    EVT_AUITOOLBAR_TOOL_DROPDOWN = wx.PyEventBinder ( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, 1 )
+    EVT_AUITOOLBAR_OVERFLOW_CLICK = wx.PyEventBinder ( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, 1 )
+    EVT_AUITOOLBAR_RIGHT_CLICK = wx.PyEventBinder ( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, 1 )
+    EVT_AUITOOLBAR_MIDDLE_CLICK = wx.PyEventBinder ( wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, 1 )
+    EVT_AUITOOLBAR_BEGIN_DRAG = wx.PyEventBinder ( wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, 1 )
 }
 #endif  // SWIG
 
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 69060)
+++ src/aui/auibar.cpp	(working copy)
@@ -21,7 +21,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #if wxUSE_AUI
@@ -41,18 +41,18 @@
 #endif
 
 #include "wx/arrimpl.cpp"
-WX_DEFINE_OBJARRAY(wxAuiToolBarItemArray)
+WX_DEFINE_OBJARRAY ( wxAuiToolBarItemArray )
 
 
-wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEvent );
-wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, wxAuiToolBarEvent );
-wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, wxAuiToolBarEvent );
-wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, wxAuiToolBarEvent );
-wxDEFINE_EVENT( wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, wxAuiToolBarEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, wxAuiToolBarEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, wxAuiToolBarEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, wxAuiToolBarEvent );
+wxDEFINE_EVENT ( wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, wxAuiToolBarEvent );
 
 
-IMPLEMENT_CLASS(wxAuiToolBar, wxControl)
-IMPLEMENT_DYNAMIC_CLASS(wxAuiToolBarEvent, wxEvent)
+IMPLEMENT_CLASS ( wxAuiToolBar, wxControl )
+IMPLEMENT_DYNAMIC_CLASS ( wxAuiToolBarEvent, wxEvent )
 
 
 // missing wxITEM_* items
@@ -66,28 +66,28 @@
 const int BUTTON_DROPDOWN_WIDTH = 10;
 
 
-wxBitmap wxAuiBitmapFromBits(const unsigned char bits[], int w, int h,
-                             const wxColour& color);
+wxBitmap wxAuiBitmapFromBits ( const unsigned char bits[], int w, int h,
+                               const wxColour & color );
 
 static wxColor GetBaseColor()
 {
 
 #if defined( __WXMAC__ ) && wxOSX_USE_COCOA_OR_CARBON
-    wxColor base_colour = wxColour( wxMacCreateCGColorFromHITheme(kThemeBrushToolbarBackground));
+    wxColor baseColour = wxColour ( wxMacCreateCGColorFromHITheme ( kThemeBrushToolbarBackground ) );
 #else
-    wxColor base_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
+    wxColor baseColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_3DFACE );
 #endif
 
-    // the base_colour is too pale to use as our base colour,
+    // the baseColour is too pale to use as our base colour,
     // so darken it a bit --
-    if ((255-base_colour.Red()) +
-        (255-base_colour.Green()) +
-        (255-base_colour.Blue()) < 60)
+    if ( ( 255 - baseColour.Red() ) +
+            ( 255 - baseColour.Green() ) +
+            ( 255 - baseColour.Blue() ) < 60 )
     {
-        base_colour = base_colour.ChangeLightness(92);
+        baseColour = baseColour.ChangeLightness ( 92 );
     }
 
-    return base_colour;
+    return baseColour;
 }
 
 
@@ -96,67 +96,69 @@
 {
 public:
 
-    ToolbarCommandCapture() { m_last_id = 0; }
-    int GetCommandId() const { return m_last_id; }
+    ToolbarCommandCapture() { m_lastId = 0; }
+    int GetCommandId() const { return m_lastId; }
 
-    bool ProcessEvent(wxEvent& evt)
+    bool ProcessEvent ( wxEvent & evt )
     {
-        if (evt.GetEventType() == wxEVT_COMMAND_MENU_SELECTED)
+        if ( evt.GetEventType() == wxEVT_COMMAND_MENU_SELECTED )
         {
-            m_last_id = evt.GetId();
+            m_lastId = evt.GetId();
             return true;
         }
 
-        if (GetNextHandler())
-            return GetNextHandler()->ProcessEvent(evt);
+        if ( GetNextHandler() )
+        {
+            return GetNextHandler()->ProcessEvent ( evt );
+        }
 
         return false;
     }
 
 private:
-    int m_last_id;
+    int m_lastId;
 };
 
 
 
 static const unsigned char
-    DISABLED_TEXT_GREY_HUE = wxColour::AlphaBlend(0, 255, 0.4);
-const wxColour DISABLED_TEXT_COLOR(DISABLED_TEXT_GREY_HUE,
-                                   DISABLED_TEXT_GREY_HUE,
-                                   DISABLED_TEXT_GREY_HUE);
+DISABLED_TEXT_GREY_HUE = wxColour::AlphaBlend ( 0, 255, 0.4 );
+const wxColour DISABLED_TEXT_COLOR ( DISABLED_TEXT_GREY_HUE,
+                                     DISABLED_TEXT_GREY_HUE,
+                                     DISABLED_TEXT_GREY_HUE );
 
 wxAuiDefaultToolBarArt::wxAuiDefaultToolBarArt()
 {
-    m_base_colour = GetBaseColor();
+    m_baseColour = GetBaseColor();
 
     m_flags = 0;
-    m_text_orientation = wxAUI_TBTOOL_TEXT_BOTTOM;
-    m_highlight_colour = wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT);
+    m_textOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+    m_highlightColour = wxSystemSettings::GetColour ( wxSYS_COLOUR_HIGHLIGHT );
 
-    m_separator_size = 7;
-    m_gripper_size = 7;
-    m_overflow_size = 16;
+    m_separatorSize = 7;
+    m_gripperSize = 7;
+    m_overflowSize = 16;
 
-    wxColor darker1_colour = m_base_colour.ChangeLightness(85);
-    wxColor darker2_colour = m_base_colour.ChangeLightness(75);
-    wxColor darker3_colour = m_base_colour.ChangeLightness(60);
-    wxColor darker4_colour = m_base_colour.ChangeLightness(50);
-    wxColor darker5_colour = m_base_colour.ChangeLightness(40);
+    wxColor darker1Colour = m_baseColour.ChangeLightness ( 85 );
+    wxColor darker2Colour = m_baseColour.ChangeLightness ( 75 );
+    wxColor darker3Colour = m_baseColour.ChangeLightness ( 60 );
+    wxColor darker4Colour = m_baseColour.ChangeLightness ( 50 );
+    wxColor darker5Colour = m_baseColour.ChangeLightness ( 40 );
 
-    m_gripper_pen1 = wxPen(darker5_colour);
-    m_gripper_pen2 = wxPen(darker3_colour);
-    m_gripper_pen3 = *wxWHITE_PEN;
+    m_gripperPen1 = wxPen ( darker5Colour );
+    m_gripperPen2 = wxPen ( darker3Colour );
+    m_gripperPen3 = *wxWHITE_PEN;
 
-    static const unsigned char button_dropdown_bits[] = { 0xe0, 0xf1, 0xfb };
-    static const unsigned char overflow_bits[] = { 0x80, 0xff, 0x80, 0xc1, 0xe3, 0xf7 };
+    static const unsigned char buttonDropdownBits[] = { 0xe0, 0xf1, 0xfb };
+    static const unsigned char overflowBits[] = { 0x80, 0xff, 0x80, 0xc1, 0xe3, 0xf7 };
 
-    m_button_dropdown_bmp = wxAuiBitmapFromBits(button_dropdown_bits, 5, 3,
-                                                *wxBLACK);
-    m_disabled_button_dropdown_bmp = wxAuiBitmapFromBits(
-                                                button_dropdown_bits, 5, 3,
-                                                wxColor(128,128,128));
-    m_overflow_bmp = wxAuiBitmapFromBits(overflow_bits, 7, 6, *wxBLACK);
-    m_disabled_overflow_bmp = wxAuiBitmapFromBits(overflow_bits, 7, 6, wxColor(128,128,128));
+    m_buttonDropdownBmp = wxAuiBitmapFromBits ( buttonDropdownBits, 5, 3,
+                                                *wxBLACK );
+    m_disabledButtonDropdownBmp = wxAuiBitmapFromBits (
+                                      buttonDropdownBits, 5, 3,
+                                      wxColor ( 128, 128, 128 ) );
+    m_overflowBmp = wxAuiBitmapFromBits ( overflowBits, 7, 6, *wxBLACK );
+    m_disabledOverflowBmp = wxAuiBitmapFromBits ( overflowBits, 7, 6, wxColor ( 128, 128, 128 ) );
 
     m_font = *wxNORMAL_FONT;
 }
@@ -167,24 +169,24 @@
 }
 
 
-wxAuiToolBarArt* wxAuiDefaultToolBarArt::Clone()
+wxAuiToolBarArt * wxAuiDefaultToolBarArt::Clone()
 {
-    return static_cast<wxAuiToolBarArt*>(new wxAuiDefaultToolBarArt);
+    return static_cast <wxAuiToolBarArt *> ( new wxAuiDefaultToolBarArt );
 }
 
-void wxAuiDefaultToolBarArt::SetFlags(unsigned int flags)
+void wxAuiDefaultToolBarArt::SetFlags ( unsigned int flags )
 {
     m_flags = flags;
 }
 
-void wxAuiDefaultToolBarArt::SetFont(const wxFont& font)
+void wxAuiDefaultToolBarArt::SetFont ( const wxFont & font )
 {
     m_font = font;
 }
 
-void wxAuiDefaultToolBarArt::SetTextOrientation(int orientation)
+void wxAuiDefaultToolBarArt::SetTextOrientation ( int orientation )
 {
-    m_text_orientation = orientation;
+    m_textOrientation = orientation;
 }
 
 unsigned int wxAuiDefaultToolBarArt::GetFlags()
@@ -199,368 +201,405 @@
 
 int wxAuiDefaultToolBarArt::GetTextOrientation()
 {
-    return m_text_orientation;
+    return m_textOrientation;
 }
 
-void wxAuiDefaultToolBarArt::DrawBackground(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxRect& _rect)
+void wxAuiDefaultToolBarArt::DrawBackground (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxRect & Rect )
 {
-    wxRect rect = _rect;
+    wxRect rect = Rect;
     rect.height++;
-    wxColour start_colour = m_base_colour.ChangeLightness(150);
-    wxColour end_colour = m_base_colour.ChangeLightness(90);
-    dc.GradientFillLinear(rect, start_colour, end_colour, wxSOUTH);
+    wxColour startColour = m_baseColour.ChangeLightness ( 150 );
+    wxColour endColour = m_baseColour.ChangeLightness ( 90 );
+    dc.GradientFillLinear ( rect, startColour, endColour, wxSOUTH );
 }
 
-void wxAuiDefaultToolBarArt::DrawLabel(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxAuiToolBarItem& item,
-                                    const wxRect& rect)
+void wxAuiDefaultToolBarArt::DrawLabel (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item,
+    const wxRect & rect )
 {
-    dc.SetFont(m_font);
-    dc.SetTextForeground(*wxBLACK);
+    dc.SetFont ( m_font );
+    dc.SetTextForeground ( *wxBLACK );
 
     // we only care about the text height here since the text
     // will get cropped based on the width of the item
-    int text_width = 0, text_height = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &text_width, &text_height);
+    int textWidth = 0, textHeight = 0;
+    dc.GetTextExtent ( wxT ( "ABCDHgj" ), &textWidth, &textHeight );
 
     // set the clipping region
-    wxRect clip_rect = rect;
-    clip_rect.width -= 1;
-    dc.SetClippingRegion(clip_rect);
+    wxRect clipRect = rect;
+    clipRect.width -= 1;
+    dc.SetClippingRegion ( clipRect );
 
-    int text_x, text_y;
-    text_x = rect.x + 1;
-    text_y = rect.y + (rect.height-text_height)/2;
-    dc.DrawText(item.GetLabel(), text_x, text_y);
+    int textX, textY;
+    textX = rect.x + 1;
+    textY = rect.y + ( rect.height - textHeight ) / 2;
+    dc.DrawText ( item.GetLabel(), textX, textY );
     dc.DestroyClippingRegion();
 }
 
 
-void wxAuiDefaultToolBarArt::DrawButton(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxAuiToolBarItem& item,
-                                    const wxRect& rect)
+void wxAuiDefaultToolBarArt::DrawButton (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item,
+    const wxRect & rect )
 {
-    int text_width = 0, text_height = 0;
+    int textWidth = 0, textHeight = 0;
 
-    if (m_flags & wxAUI_TB_TEXT)
+    if ( m_flags & wxAUI_TB_TEXT )
     {
-        dc.SetFont(m_font);
+        dc.SetFont ( m_font );
 
         int tx, ty;
 
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-        text_width = 0;
-        dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
+        dc.GetTextExtent ( wxT ( "ABCDHgj" ), &tx, &textHeight );
+        textWidth = 0;
+        dc.GetTextExtent ( item.GetLabel(), &textWidth, &ty );
     }
 
-    int bmp_x = 0, bmp_y = 0;
-    int text_x = 0, text_y = 0;
+    int bmpX = 0, bmpY = 0;
+    int textX = 0, textY = 0;
 
-    if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+    if ( m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM )
     {
-        bmp_x = rect.x +
-                (rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
+        bmpX = rect.x +
+               ( rect.width / 2 ) -
+               ( item.GetBitmap().GetWidth() / 2 );
 
-        bmp_y = rect.y +
-                ((rect.height-text_height)/2) -
-                (item.GetBitmap().GetHeight()/2);
+        bmpY = rect.y +
+               ( ( rect.height - textHeight ) / 2 ) -
+               ( item.GetBitmap().GetHeight() / 2 );
 
-        text_x = rect.x + (rect.width/2) - (text_width/2) + 1;
-        text_y = rect.y + rect.height - text_height - 1;
+        textX = rect.x + ( rect.width / 2 ) - ( textWidth / 2 ) + 1;
+        textY = rect.y + rect.height - textHeight - 1;
     }
-    else if (m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT)
+
+    else if ( m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT )
     {
-        bmp_x = rect.x + 3;
+        bmpX = rect.x + 3;
 
-        bmp_y = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
+        bmpY = rect.y +
+               ( rect.height / 2 ) -
+               ( item.GetBitmap().GetHeight() / 2 );
 
-        text_x = bmp_x + 3 + item.GetBitmap().GetWidth();
-        text_y = rect.y +
-                 (rect.height/2) -
-                 (text_height/2);
+        textX = bmpX + 3 + item.GetBitmap().GetWidth();
+        textY = rect.y +
+                ( rect.height / 2 ) -
+                ( textHeight / 2 );
     }
 
 
-    if (!(item.GetState() & wxAUI_BUTTON_STATE_DISABLED))
+    if ( ! ( item.GetState() & wxAUI_BUTTON_STATE_DISABLED ) )
     {
-        if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
+        if ( item.GetState() & wxAUI_BUTTON_STATE_PRESSED )
         {
-            dc.SetPen(wxPen(m_highlight_colour));
-            dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(150)));
-            dc.DrawRectangle(rect);
+            dc.SetPen ( wxPen ( m_highlightColour ) );
+            dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 150 ) ) );
+            dc.DrawRectangle ( rect );
         }
-        else if ((item.GetState() & wxAUI_BUTTON_STATE_HOVER) || item.IsSticky())
+
+        else if ( ( item.GetState() & wxAUI_BUTTON_STATE_HOVER ) || item.IsSticky() )
         {
-            dc.SetPen(wxPen(m_highlight_colour));
-            dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(170)));
+            dc.SetPen ( wxPen ( m_highlightColour ) );
+            dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 170 ) ) );
 
             // draw an even lighter background for checked item hovers (since
             // the hover background is the same color as the check background)
-            if (item.GetState() & wxAUI_BUTTON_STATE_CHECKED)
-                dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(180)));
+            if ( item.GetState() & wxAUI_BUTTON_STATE_CHECKED )
+            {
+                dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 180 ) ) );
+            }
 
-            dc.DrawRectangle(rect);
+            dc.DrawRectangle ( rect );
         }
-        else if (item.GetState() & wxAUI_BUTTON_STATE_CHECKED)
+
+        else if ( item.GetState() & wxAUI_BUTTON_STATE_CHECKED )
         {
             // it's important to put this code in an else statment after the
             // hover, otherwise hovers won't draw properly for checked items
-            dc.SetPen(wxPen(m_highlight_colour));
-            dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(170)));
-            dc.DrawRectangle(rect);
+            dc.SetPen ( wxPen ( m_highlightColour ) );
+            dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 170 ) ) );
+            dc.DrawRectangle ( rect );
         }
     }
 
     wxBitmap bmp;
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
+
+    if ( item.GetState() & wxAUI_BUTTON_STATE_DISABLED )
+    {
         bmp = item.GetDisabledBitmap();
+    }
+
     else
+    {
         bmp = item.GetBitmap();
+    }
 
     if ( bmp.IsOk() )
-        dc.DrawBitmap(bmp, bmp_x, bmp_y, true);
+    {
+        dc.DrawBitmap ( bmp, bmpX, bmpY, true );
+    }
 
     // set the item's text color based on if it is disabled
-    dc.SetTextForeground(*wxBLACK);
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
-        dc.SetTextForeground(DISABLED_TEXT_COLOR);
+    dc.SetTextForeground ( *wxBLACK );
 
-    if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
+    if ( item.GetState() & wxAUI_BUTTON_STATE_DISABLED )
     {
-        dc.DrawText(item.GetLabel(), text_x, text_y);
+        dc.SetTextForeground ( DISABLED_TEXT_COLOR );
     }
+
+    if ( ( m_flags & wxAUI_TB_TEXT ) && !item.GetLabel().empty() )
+    {
+        dc.DrawText ( item.GetLabel(), textX, textY );
+    }
 }
 
 
-void wxAuiDefaultToolBarArt::DrawDropDownButton(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxAuiToolBarItem& item,
-                                    const wxRect& rect)
+void wxAuiDefaultToolBarArt::DrawDropDownButton (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item,
+    const wxRect & rect )
 {
-    int text_width = 0, text_height = 0, text_x = 0, text_y = 0;
-    int bmp_x = 0, bmp_y = 0, dropbmp_x = 0, dropbmp_y = 0;
+    int textWidth = 0, textHeight = 0, textX = 0, textY = 0;
+    int bmpX = 0, bmpY = 0, dropbmpX = 0, dropbmpY = 0;
 
-    wxRect button_rect = wxRect(rect.x,
-                                rect.y,
-                                rect.width-BUTTON_DROPDOWN_WIDTH,
-                                rect.height);
-    wxRect dropdown_rect = wxRect(rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1,
-                                  rect.y,
-                                  BUTTON_DROPDOWN_WIDTH+1,
-                                  rect.height);
+    wxRect buttonRect = wxRect ( rect.x,
+                                 rect.y,
+                                 rect.width - BUTTON_DROPDOWN_WIDTH,
+                                 rect.height );
+    wxRect dropdownRect = wxRect ( rect.x + rect.width - BUTTON_DROPDOWN_WIDTH - 1,
+                                   rect.y,
+                                   BUTTON_DROPDOWN_WIDTH + 1,
+                                   rect.height );
 
-    if (m_flags & wxAUI_TB_TEXT)
+    if ( m_flags & wxAUI_TB_TEXT )
     {
-        dc.SetFont(m_font);
+        dc.SetFont ( m_font );
 
         int tx, ty;
-        if (m_flags & wxAUI_TB_TEXT)
+
+        if ( m_flags & wxAUI_TB_TEXT )
         {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-            text_width = 0;
+            dc.GetTextExtent ( wxT ( "ABCDHgj" ), &tx, &textHeight );
+            textWidth = 0;
         }
 
-        dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
+        dc.GetTextExtent ( item.GetLabel(), &textWidth, &ty );
     }
 
 
 
-    dropbmp_x = dropdown_rect.x +
-                (dropdown_rect.width/2) -
-                (m_button_dropdown_bmp.GetWidth()/2);
-    dropbmp_y = dropdown_rect.y +
-                (dropdown_rect.height/2) -
-                (m_button_dropdown_bmp.GetHeight()/2);
+    dropbmpX = dropdownRect.x +
+               ( dropdownRect.width / 2 ) -
+               ( m_buttonDropdownBmp.GetWidth() / 2 );
+    dropbmpY = dropdownRect.y +
+               ( dropdownRect.height / 2 ) -
+               ( m_buttonDropdownBmp.GetHeight() / 2 );
 
 
-    if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+    if ( m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM )
     {
-        bmp_x = button_rect.x +
-                (button_rect.width/2) -
-                (item.GetBitmap().GetWidth()/2);
-        bmp_y = button_rect.y +
-                ((button_rect.height-text_height)/2) -
-                (item.GetBitmap().GetHeight()/2);
+        bmpX = buttonRect.x +
+               ( buttonRect.width / 2 ) -
+               ( item.GetBitmap().GetWidth() / 2 );
+        bmpY = buttonRect.y +
+               ( ( buttonRect.height - textHeight ) / 2 ) -
+               ( item.GetBitmap().GetHeight() / 2 );
 
-        text_x = rect.x + (rect.width/2) - (text_width/2) + 1;
-        text_y = rect.y + rect.height - text_height - 1;
+        textX = rect.x + ( rect.width / 2 ) - ( textWidth / 2 ) + 1;
+        textY = rect.y + rect.height - textHeight - 1;
     }
-    else if (m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT)
+
+    else if ( m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT )
     {
-        bmp_x = rect.x + 3;
+        bmpX = rect.x + 3;
 
-        bmp_y = rect.y +
-                (rect.height/2) -
-                (item.GetBitmap().GetHeight()/2);
+        bmpY = rect.y +
+               ( rect.height / 2 ) -
+               ( item.GetBitmap().GetHeight() / 2 );
 
-        text_x = bmp_x + 3 + item.GetBitmap().GetWidth();
-        text_y = rect.y +
-                 (rect.height/2) -
-                 (text_height/2);
+        textX = bmpX + 3 + item.GetBitmap().GetWidth();
+        textY = rect.y +
+                ( rect.height / 2 ) -
+                ( textHeight / 2 );
     }
 
 
-    if (item.GetState() & wxAUI_BUTTON_STATE_PRESSED)
+    if ( item.GetState() & wxAUI_BUTTON_STATE_PRESSED )
     {
-        dc.SetPen(wxPen(m_highlight_colour));
-        dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(140)));
-        dc.DrawRectangle(button_rect);
+        dc.SetPen ( wxPen ( m_highlightColour ) );
+        dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 140 ) ) );
+        dc.DrawRectangle ( buttonRect );
 
-        dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(170)));
-        dc.DrawRectangle(dropdown_rect);
+        dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 170 ) ) );
+        dc.DrawRectangle ( dropdownRect );
     }
-    else if (item.GetState() & wxAUI_BUTTON_STATE_HOVER ||
-             item.IsSticky())
+
+    else if ( item.GetState() & wxAUI_BUTTON_STATE_HOVER ||
+              item.IsSticky() )
     {
-        dc.SetPen(wxPen(m_highlight_colour));
-        dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(170)));
-        dc.DrawRectangle(button_rect);
-        dc.DrawRectangle(dropdown_rect);
+        dc.SetPen ( wxPen ( m_highlightColour ) );
+        dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 170 ) ) );
+        dc.DrawRectangle ( buttonRect );
+        dc.DrawRectangle ( dropdownRect );
     }
-    else if (item.GetState() & wxAUI_BUTTON_STATE_CHECKED)
+
+    else if ( item.GetState() & wxAUI_BUTTON_STATE_CHECKED )
     {
         // Notice that this branch must come after the hover one to ensure the
         // correct appearance when the mouse hovers over a checked item.
-        dc.SetPen(wxPen(m_highlight_colour));
-        dc.SetBrush(wxBrush(m_highlight_colour.ChangeLightness(170)));
-        dc.DrawRectangle(button_rect);
-        dc.DrawRectangle(dropdown_rect);
+        dc.SetPen ( wxPen ( m_highlightColour ) );
+        dc.SetBrush ( wxBrush ( m_highlightColour.ChangeLightness ( 170 ) ) );
+        dc.DrawRectangle ( buttonRect );
+        dc.DrawRectangle ( dropdownRect );
     }
 
     wxBitmap bmp;
     wxBitmap dropbmp;
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
+
+    if ( item.GetState() & wxAUI_BUTTON_STATE_DISABLED )
     {
         bmp = item.GetDisabledBitmap();
-        dropbmp = m_disabled_button_dropdown_bmp;
+        dropbmp = m_disabledButtonDropdownBmp;
     }
+
     else
     {
         bmp = item.GetBitmap();
-        dropbmp = m_button_dropdown_bmp;
+        dropbmp = m_buttonDropdownBmp;
     }
 
-    if (!bmp.IsOk())
+    if ( !bmp.IsOk() )
+    {
         return;
+    }
 
-    dc.DrawBitmap(bmp, bmp_x, bmp_y, true);
-    dc.DrawBitmap(dropbmp, dropbmp_x, dropbmp_y, true);
+    dc.DrawBitmap ( bmp, bmpX, bmpY, true );
+    dc.DrawBitmap ( dropbmp, dropbmpX, dropbmpY, true );
 
     // set the item's text color based on if it is disabled
-    dc.SetTextForeground(*wxBLACK);
-    if (item.GetState() & wxAUI_BUTTON_STATE_DISABLED)
-        dc.SetTextForeground(DISABLED_TEXT_COLOR);
+    dc.SetTextForeground ( *wxBLACK );
 
-    if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
+    if ( item.GetState() & wxAUI_BUTTON_STATE_DISABLED )
     {
-        dc.DrawText(item.GetLabel(), text_x, text_y);
+        dc.SetTextForeground ( DISABLED_TEXT_COLOR );
     }
+
+    if ( ( m_flags & wxAUI_TB_TEXT ) && !item.GetLabel().empty() )
+    {
+        dc.DrawText ( item.GetLabel(), textX, textY );
+    }
 }
 
-void wxAuiDefaultToolBarArt::DrawControlLabel(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxAuiToolBarItem& item,
-                                    const wxRect& rect)
+void wxAuiDefaultToolBarArt::DrawControlLabel (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item,
+    const wxRect & rect )
 {
-    if (!(m_flags & wxAUI_TB_TEXT))
+    if ( ! ( m_flags & wxAUI_TB_TEXT ) )
+    {
         return;
+    }
 
-    if (m_text_orientation != wxAUI_TBTOOL_TEXT_BOTTOM)
+    if ( m_textOrientation != wxAUI_TBTOOL_TEXT_BOTTOM )
+    {
         return;
+    }
 
-    int text_x = 0, text_y = 0;
-    int text_width = 0, text_height = 0;
+    int textX = 0, textY = 0;
+    int textWidth = 0, textHeight = 0;
 
-    dc.SetFont(m_font);
+    dc.SetFont ( m_font );
 
     int tx, ty;
-    if (m_flags & wxAUI_TB_TEXT)
+
+    if ( m_flags & wxAUI_TB_TEXT )
     {
-        dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
-        text_width = 0;
+        dc.GetTextExtent ( wxT ( "ABCDHgj" ), &tx, &textHeight );
+        textWidth = 0;
     }
 
-    dc.GetTextExtent(item.GetLabel(), &text_width, &ty);
+    dc.GetTextExtent ( item.GetLabel(), &textWidth, &ty );
 
     // don't draw the label if it is wider than the item width
-    if (text_width > rect.width)
+    if ( textWidth > rect.width )
+    {
         return;
+    }
 
     // set the label's text color
-    dc.SetTextForeground(*wxBLACK);
+    dc.SetTextForeground ( *wxBLACK );
 
-    text_x = rect.x + (rect.width/2) - (text_width/2) + 1;
-    text_y = rect.y + rect.height - text_height - 1;
+    textX = rect.x + ( rect.width / 2 ) - ( textWidth / 2 ) + 1;
+    textY = rect.y + rect.height - textHeight - 1;
 
-    if ( (m_flags & wxAUI_TB_TEXT) && !item.GetLabel().empty() )
+    if ( ( m_flags & wxAUI_TB_TEXT ) && !item.GetLabel().empty() )
     {
-        dc.DrawText(item.GetLabel(), text_x, text_y);
+        dc.DrawText ( item.GetLabel(), textX, textY );
     }
 }
 
-wxSize wxAuiDefaultToolBarArt::GetLabelSize(
-                                        wxDC& dc,
-                                        wxWindow* WXUNUSED(wnd),
-                                        const wxAuiToolBarItem& item)
+wxSize wxAuiDefaultToolBarArt::GetLabelSize (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item )
 {
-    dc.SetFont(m_font);
+    dc.SetFont ( m_font );
 
     // get label's height
     int width = 0, height = 0;
-    dc.GetTextExtent(wxT("ABCDHgj"), &width, &height);
+    dc.GetTextExtent ( wxT ( "ABCDHgj" ), &width, &height );
 
     // get item's width
     width = item.GetMinSize().GetWidth();
 
-    if (width == -1)
+    if ( width == -1 )
     {
         // no width specified, measure the text ourselves
-        width = dc.GetTextExtent(item.GetLabel()).GetX();
+        width = dc.GetTextExtent ( item.GetLabel() ).GetX();
     }
 
-    return wxSize(width, height);
+    return wxSize ( width, height );
 }
 
-wxSize wxAuiDefaultToolBarArt::GetToolSize(
-                                        wxDC& dc,
-                                        wxWindow* WXUNUSED(wnd),
-                                        const wxAuiToolBarItem& item)
+wxSize wxAuiDefaultToolBarArt::GetToolSize (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxAuiToolBarItem & item )
 {
-    if (!item.GetBitmap().IsOk() && !(m_flags & wxAUI_TB_TEXT))
-        return wxSize(16,16);
+    if ( !item.GetBitmap().IsOk() && ! ( m_flags & wxAUI_TB_TEXT ) )
+    {
+        return wxSize ( 16, 16 );
+    }
 
     int width = item.GetBitmap().GetWidth();
     int height = item.GetBitmap().GetHeight();
 
-    if (m_flags & wxAUI_TB_TEXT)
+    if ( m_flags & wxAUI_TB_TEXT )
     {
-        dc.SetFont(m_font);
+        dc.SetFont ( m_font );
         int tx, ty;
 
-        if (m_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM)
+        if ( m_textOrientation == wxAUI_TBTOOL_TEXT_BOTTOM )
         {
-            dc.GetTextExtent(wxT("ABCDHgj"), &tx, &ty);
+            dc.GetTextExtent ( wxT ( "ABCDHgj" ), &tx, &ty );
             height += ty;
 
             if ( !item.GetLabel().empty() )
             {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
-                width = wxMax(width, tx+6);
+                dc.GetTextExtent ( item.GetLabel(), &tx, &ty );
+                width = wxMax ( width, tx + 6 );
             }
         }
-        else if ( m_text_orientation == wxAUI_TBTOOL_TEXT_RIGHT &&
+
+        else if ( m_textOrientation == wxAUI_TBTOOL_TEXT_RIGHT &&
                   !item.GetLabel().empty() )
         {
             width += 3; // space between left border and bitmap
@@ -568,194 +607,223 @@
 
             if ( !item.GetLabel().empty() )
             {
-                dc.GetTextExtent(item.GetLabel(), &tx, &ty);
+                dc.GetTextExtent ( item.GetLabel(), &tx, &ty );
                 width += tx;
-                height = wxMax(height, ty);
+                height = wxMax ( height, ty );
             }
         }
     }
 
     // if the tool has a dropdown button, add it to the width
-    if (item.HasDropDown())
-        width += (BUTTON_DROPDOWN_WIDTH+4);
+    if ( item.HasDropDown() )
+    {
+        width += ( BUTTON_DROPDOWN_WIDTH + 4 );
+    }
 
-    return wxSize(width, height);
+    return wxSize ( width, height );
 }
 
-void wxAuiDefaultToolBarArt::DrawSeparator(
-                                    wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxRect& _rect)
+void wxAuiDefaultToolBarArt::DrawSeparator (
+    wxDC & dc,
+    wxWindow * WXUNUSED ( wnd ),
+    const wxRect & Rect )
 {
     bool horizontal = true;
-    if (m_flags & wxAUI_TB_VERTICAL)
+
+    if ( m_flags & wxAUI_TB_VERTICAL )
+    {
         horizontal = false;
+    }
 
-    wxRect rect = _rect;
+    wxRect rect = Rect;
 
-    if (horizontal)
+    if ( horizontal )
     {
-        rect.x += (rect.width/2);
+        rect.x += ( rect.width / 2 );
         rect.width = 1;
-        int new_height = (rect.height*3)/4;
-        rect.y += (rect.height/2) - (new_height/2);
-        rect.height = new_height;
+        int newHeight = ( rect.height * 3 ) / 4;
+        rect.y += ( rect.height / 2 ) - ( newHeight / 2 );
+        rect.height = newHeight;
     }
+
     else
     {
-        rect.y += (rect.height/2);
+        rect.y += ( rect.height / 2 );
         rect.height = 1;
-        int new_width = (rect.width*3)/4;
-        rect.x += (rect.width/2) - (new_width/2);
-        rect.width = new_width;
+        int newWidth = ( rect.width * 3 ) / 4;
+        rect.x += ( rect.width / 2 ) - ( newWidth / 2 );
+        rect.width = newWidth;
     }
 
-    wxColour start_colour = m_base_colour.ChangeLightness(80);
-    wxColour end_colour = m_base_colour.ChangeLightness(80);
-    dc.GradientFillLinear(rect, start_colour, end_colour, horizontal ? wxSOUTH : wxEAST);
+    wxColour startColour = m_baseColour.ChangeLightness ( 80 );
+    wxColour endColour = m_baseColour.ChangeLightness ( 80 );
+    dc.GradientFillLinear ( rect, startColour, endColour, horizontal ? wxSOUTH : wxEAST );
 }
 
-void wxAuiDefaultToolBarArt::DrawGripper(wxDC& dc,
-                                    wxWindow* WXUNUSED(wnd),
-                                    const wxRect& rect)
+void wxAuiDefaultToolBarArt::DrawGripper ( wxDC & dc,
+                                           wxWindow * WXUNUSED ( wnd ),
+                                           const wxRect & rect )
 {
     int i = 0;
-    while (1)
+
+    while ( 1 )
     {
         int x, y;
 
-        if (m_flags & wxAUI_TB_VERTICAL)
+        if ( m_flags & wxAUI_TB_VERTICAL )
         {
-            x = rect.x + (i*4) + 5;
+            x = rect.x + ( i * 4 ) + 5;
             y = rect.y + 3;
-            if (x > rect.GetWidth()-5)
+
+            if ( x > rect.GetWidth() - 5 )
+            {
                 break;
+            }
         }
+
         else
         {
             x = rect.x + 3;
-            y = rect.y + (i*4) + 5;
-            if (y > rect.GetHeight()-5)
+            y = rect.y + ( i * 4 ) + 5;
+
+            if ( y > rect.GetHeight() - 5 )
+            {
                 break;
+            }
         }
 
-        dc.SetPen(m_gripper_pen1);
-        dc.DrawPoint(x, y);
-        dc.SetPen(m_gripper_pen2);
-        dc.DrawPoint(x, y+1);
-        dc.DrawPoint(x+1, y);
-        dc.SetPen(m_gripper_pen3);
-        dc.DrawPoint(x+2, y+1);
-        dc.DrawPoint(x+2, y+2);
-        dc.DrawPoint(x+1, y+2);
+        dc.SetPen ( m_gripperPen1 );
+        dc.DrawPoint ( x, y );
+        dc.SetPen ( m_gripperPen2 );
+        dc.DrawPoint ( x, y + 1 );
+        dc.DrawPoint ( x + 1, y );
+        dc.SetPen ( m_gripperPen3 );
+        dc.DrawPoint ( x + 2, y + 1 );
+        dc.DrawPoint ( x + 2, y + 2 );
+        dc.DrawPoint ( x + 1, y + 2 );
 
         i++;
     }
 
 }
 
-void wxAuiDefaultToolBarArt::DrawOverflowButton(wxDC& dc,
-                                          wxWindow* wnd,
-                                          const wxRect& rect,
-                                          int state)
+void wxAuiDefaultToolBarArt::DrawOverflowButton ( wxDC & dc,
+                                                  wxWindow * wnd,
+                                                  const wxRect & rect,
+                                                  int state )
 {
-    if (state & wxAUI_BUTTON_STATE_HOVER ||
-        state & wxAUI_BUTTON_STATE_PRESSED)
+    if ( state & wxAUI_BUTTON_STATE_HOVER ||
+            state & wxAUI_BUTTON_STATE_PRESSED )
     {
-        wxRect cli_rect = wnd->GetClientRect();
-        wxColor light_gray_bg = m_highlight_colour.ChangeLightness(170);
+        wxRect cliRect = wnd->GetClientRect();
+        wxColor lightGrayBg = m_highlightColour.ChangeLightness ( 170 );
 
-        if (m_flags & wxAUI_TB_VERTICAL)
+        if ( m_flags & wxAUI_TB_VERTICAL )
         {
-            dc.SetPen(wxPen(m_highlight_colour));
-            dc.DrawLine(rect.x, rect.y, rect.x+rect.width, rect.y);
-            dc.SetPen(wxPen(light_gray_bg));
-            dc.SetBrush(wxBrush(light_gray_bg));
-            dc.DrawRectangle(rect.x, rect.y+1, rect.width, rect.height);
+            dc.SetPen ( wxPen ( m_highlightColour ) );
+            dc.DrawLine ( rect.x, rect.y, rect.x + rect.width, rect.y );
+            dc.SetPen ( wxPen ( lightGrayBg ) );
+            dc.SetBrush ( wxBrush ( lightGrayBg ) );
+            dc.DrawRectangle ( rect.x, rect.y + 1, rect.width, rect.height );
         }
+
         else
         {
-            dc.SetPen(wxPen(m_highlight_colour));
-            dc.DrawLine(rect.x, rect.y, rect.x, rect.y+rect.height);
-            dc.SetPen(wxPen(light_gray_bg));
-            dc.SetBrush(wxBrush(light_gray_bg));
-            dc.DrawRectangle(rect.x+1, rect.y, rect.width, rect.height);
+            dc.SetPen ( wxPen ( m_highlightColour ) );
+            dc.DrawLine ( rect.x, rect.y, rect.x, rect.y + rect.height );
+            dc.SetPen ( wxPen ( lightGrayBg ) );
+            dc.SetBrush ( wxBrush ( lightGrayBg ) );
+            dc.DrawRectangle ( rect.x + 1, rect.y, rect.width, rect.height );
         }
     }
 
-    int x = rect.x+1+(rect.width-m_overflow_bmp.GetWidth())/2;
-    int y = rect.y+1+(rect.height-m_overflow_bmp.GetHeight())/2;
-    dc.DrawBitmap(m_overflow_bmp, x, y, true);
+    int x = rect.x + 1 + ( rect.width - m_overflowBmp.GetWidth() ) / 2;
+    int y = rect.y + 1 + ( rect.height - m_overflowBmp.GetHeight() ) / 2;
+    dc.DrawBitmap ( m_overflowBmp, x, y, true );
 }
 
-int wxAuiDefaultToolBarArt::GetElementSize(int element_id)
+int wxAuiDefaultToolBarArt::GetElementSize ( int elementId )
 {
-    switch (element_id)
+    switch ( elementId )
     {
-        case wxAUI_TBART_SEPARATOR_SIZE: return m_separator_size;
-        case wxAUI_TBART_GRIPPER_SIZE:   return m_gripper_size;
-        case wxAUI_TBART_OVERFLOW_SIZE:  return m_overflow_size;
+        case wxAUI_TBART_SEPARATOR_SIZE: return m_separatorSize;
+
+        case wxAUI_TBART_GRIPPER_SIZE:   return m_gripperSize;
+
+        case wxAUI_TBART_OVERFLOW_SIZE:  return m_overflowSize;
+
         default: return 0;
     }
 }
 
-void wxAuiDefaultToolBarArt::SetElementSize(int element_id, int size)
+void wxAuiDefaultToolBarArt::SetElementSize ( int elementId, int size )
 {
-    switch (element_id)
+    switch ( elementId )
     {
-        case wxAUI_TBART_SEPARATOR_SIZE: m_separator_size = size; break;
-        case wxAUI_TBART_GRIPPER_SIZE:   m_gripper_size = size; break;
-        case wxAUI_TBART_OVERFLOW_SIZE:  m_overflow_size = size; break;
+        case wxAUI_TBART_SEPARATOR_SIZE: m_separatorSize = size; break;
+
+        case wxAUI_TBART_GRIPPER_SIZE:   m_gripperSize = size; break;
+
+        case wxAUI_TBART_OVERFLOW_SIZE:  m_overflowSize = size; break;
     }
 }
 
-int wxAuiDefaultToolBarArt::ShowDropDown(wxWindow* wnd,
-                                         const wxAuiToolBarItemArray& items)
+int wxAuiDefaultToolBarArt::ShowDropDown ( wxWindow * wnd,
+                                           const wxAuiToolBarItemArray & items )
 {
     wxMenu menuPopup;
 
-    size_t items_added = 0;
+    size_t itemsAdded = 0;
 
     size_t i, count = items.GetCount();
-    for (i = 0; i < count; ++i)
+
+    for ( i = 0; i < count; ++i )
     {
-        wxAuiToolBarItem& item = items.Item(i);
+        wxAuiToolBarItem & item = items.Item ( i );
 
-        if (item.GetKind() == wxITEM_NORMAL)
+        if ( item.GetKind() == wxITEM_NORMAL )
         {
             wxString text = item.GetShortHelp();
-            if (text.empty())
+
+            if ( text.empty() )
+            {
                 text = item.GetLabel();
+            }
 
-            if (text.empty())
-                text = wxT(" ");
+            if ( text.empty() )
+            {
+                text = wxT ( " " );
+            }
 
-            wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text, item.GetShortHelp());
+            wxMenuItem * m =  new wxMenuItem ( &menuPopup, item.GetId(), text, item.GetShortHelp() );
 
-            m->SetBitmap(item.GetBitmap());
-            menuPopup.Append(m);
-            items_added++;
+            m->SetBitmap ( item.GetBitmap() );
+            menuPopup.Append ( m );
+            itemsAdded++;
         }
-        else if (item.GetKind() == wxITEM_SEPARATOR)
+
+        else if ( item.GetKind() == wxITEM_SEPARATOR )
         {
-            if (items_added > 0)
+            if ( itemsAdded > 0 )
+            {
                 menuPopup.AppendSeparator();
+            }
         }
     }
 
     // find out where to put the popup menu of window items
     wxPoint pt = ::wxGetMousePosition();
-    pt = wnd->ScreenToClient(pt);
+    pt = wnd->ScreenToClient ( pt );
 
     // find out the screen coordinate at the bottom of the tab ctrl
-    wxRect cli_rect = wnd->GetClientRect();
-    pt.y = cli_rect.y + cli_rect.height;
+    wxRect cliRect = wnd->GetClientRect();
+    pt.y = cliRect.y + cliRect.height;
 
-    ToolbarCommandCapture* cc = new ToolbarCommandCapture;
-    wnd->PushEventHandler(cc);
-    wnd->PopupMenu(&menuPopup, pt);
+    ToolbarCommandCapture * cc = new ToolbarCommandCapture;
+    wnd->PushEventHandler ( cc );
+    wnd->PopupMenu ( &menuPopup, pt );
     int command = cc->GetCommandId();
-    wnd->PopEventHandler(true);
+    wnd->PopEventHandler ( true );
 
     return command;
 }
@@ -763,84 +831,93 @@
 
 
 
-static wxOrientation GetOrientation(long& style)
+static wxOrientation GetOrientation ( long & style )
 {
-    switch (style & wxAUI_ORIENTATION_MASK)
+    switch ( style & wxAUI_ORIENTATION_MASK )
     {
         case wxAUI_TB_HORIZONTAL:
             return wxHORIZONTAL;
+
         case wxAUI_TB_VERTICAL:
             return wxVERTICAL;
+
         default:
-            wxFAIL_MSG("toolbar cannot be locked in both horizontal and vertical orientations (maybe no lock was intended?)");
+            wxFAIL_MSG ( "toolbar cannot be locked in both horizontal and vertical orientations (maybe no lock was intended?)" );
+
             // fall through
         case 0:
             return wxBOTH;
     }
 }
 
-BEGIN_EVENT_TABLE(wxAuiToolBar, wxControl)
-    EVT_SIZE(wxAuiToolBar::OnSize)
-    EVT_IDLE(wxAuiToolBar::OnIdle)
-    EVT_ERASE_BACKGROUND(wxAuiToolBar::OnEraseBackground)
-    EVT_PAINT(wxAuiToolBar::OnPaint)
-    EVT_LEFT_DOWN(wxAuiToolBar::OnLeftDown)
-    EVT_LEFT_DCLICK(wxAuiToolBar::OnLeftDown)
-    EVT_LEFT_UP(wxAuiToolBar::OnLeftUp)
-    EVT_RIGHT_DOWN(wxAuiToolBar::OnRightDown)
-    EVT_RIGHT_DCLICK(wxAuiToolBar::OnRightDown)
-    EVT_RIGHT_UP(wxAuiToolBar::OnRightUp)
-    EVT_MIDDLE_DOWN(wxAuiToolBar::OnMiddleDown)
-    EVT_MIDDLE_DCLICK(wxAuiToolBar::OnMiddleDown)
-    EVT_MIDDLE_UP(wxAuiToolBar::OnMiddleUp)
-    EVT_MOTION(wxAuiToolBar::OnMotion)
-    EVT_LEAVE_WINDOW(wxAuiToolBar::OnLeaveWindow)
-    EVT_MOUSE_CAPTURE_LOST(wxAuiToolBar::OnCaptureLost)
-    EVT_SET_CURSOR(wxAuiToolBar::OnSetCursor)
+BEGIN_EVENT_TABLE ( wxAuiToolBar, wxControl )
+    EVT_SIZE ( wxAuiToolBar::OnSize )
+    EVT_IDLE ( wxAuiToolBar::OnIdle )
+    EVT_ERASE_BACKGROUND ( wxAuiToolBar::OnEraseBackground )
+    EVT_PAINT ( wxAuiToolBar::OnPaint )
+    EVT_LEFT_DOWN ( wxAuiToolBar::OnLeftDown )
+    EVT_LEFT_DCLICK ( wxAuiToolBar::OnLeftDown )
+    EVT_LEFT_UP ( wxAuiToolBar::OnLeftUp )
+    EVT_RIGHT_DOWN ( wxAuiToolBar::OnRightDown )
+    EVT_RIGHT_DCLICK ( wxAuiToolBar::OnRightDown )
+    EVT_RIGHT_UP ( wxAuiToolBar::OnRightUp )
+    EVT_MIDDLE_DOWN ( wxAuiToolBar::OnMiddleDown )
+    EVT_MIDDLE_DCLICK ( wxAuiToolBar::OnMiddleDown )
+    EVT_MIDDLE_UP ( wxAuiToolBar::OnMiddleUp )
+    EVT_MOTION ( wxAuiToolBar::OnMotion )
+    EVT_LEAVE_WINDOW ( wxAuiToolBar::OnLeaveWindow )
+    EVT_MOUSE_CAPTURE_LOST ( wxAuiToolBar::OnCaptureLost )
+    EVT_SET_CURSOR ( wxAuiToolBar::OnSetCursor )
 END_EVENT_TABLE()
 
 
-wxAuiToolBar::wxAuiToolBar(wxWindow* parent,
-                           wxWindowID id,
-                           const wxPoint& position,
-                           const wxSize& size,
-                           long style)
-                            : wxControl(parent,
-                                        id,
-                                        position,
-                                        size,
-                                        style | wxBORDER_NONE)
+wxAuiToolBar::wxAuiToolBar ( wxWindow * parent,
+                             wxWindowID id,
+                             const wxPoint & position,
+                             const wxSize & size,
+                             long style )
+    : wxControl ( parent,
+                  id,
+                  position,
+                  size,
+                  style | wxBORDER_NONE )
 {
-    m_sizer = new wxBoxSizer(wxHORIZONTAL);
-    m_button_width = -1;
-    m_button_height = -1;
-    m_sizer_element_count = 0;
-    m_action_pos = wxPoint(-1,-1);
-    m_action_item = NULL;
-    m_tip_item = NULL;
+    m_sizer = new wxBoxSizer ( wxHORIZONTAL );
+    m_buttonWidth = -1;
+    m_buttonHeight = -1;
+    m_sizerElementCount = 0;
+    m_actionPos = wxPoint ( -1, -1 );
+    m_actionItem = NULL;
+    m_tipItem = NULL;
     m_art = new wxAuiDefaultToolBarArt;
-    m_tool_packing = 2;
-    m_tool_border_padding = 3;
-    m_tool_text_orientation = wxAUI_TBTOOL_TEXT_BOTTOM;
-    m_gripper_sizer_item = NULL;
-    m_overflow_sizer_item = NULL;
+    m_toolPacking = 2;
+    m_toolBorderPadding = 3;
+    m_toolTextOrientation = wxAUI_TBTOOL_TEXT_BOTTOM;
+    m_gripperSizerItem = NULL;
+    m_overflowSizerItem = NULL;
     m_dragging = false;
-    m_orientation = GetOrientation(style);
-    if (m_orientation == wxBOTH)
+    m_orientation = GetOrientation ( style );
+
+    if ( m_orientation == wxBOTH )
     {
         m_orientation = wxHORIZONTAL;
     }
+
     m_style = style | wxBORDER_NONE;
-    m_gripper_visible = (m_style & wxAUI_TB_GRIPPER) ? true : false;
-    m_overflow_visible = (m_style & wxAUI_TB_OVERFLOW) ? true : false;
-    m_overflow_state = 0;
-    SetMargins(5, 5, 2, 2);
-    SetFont(*wxNORMAL_FONT);
+    m_gripperVisible = ( m_style & wxAUI_TB_GRIPPER ) ? true : false;
+    m_overflowVisible = ( m_style & wxAUI_TB_OVERFLOW ) ? true : false;
+    m_overflowState = 0;
+    SetMargins ( 5, 5, 2, 2 );
+    SetFont ( *wxNORMAL_FONT );
     SetArtFlags();
-    SetExtraStyle(wxWS_EX_PROCESS_IDLE);
-    if (style & wxAUI_TB_HORZ_LAYOUT)
-        SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
-    SetBackgroundStyle(wxBG_STYLE_CUSTOM);
+    SetExtraStyle ( wxWS_EX_PROCESS_IDLE );
+
+    if ( style & wxAUI_TB_HORZ_LAYOUT )
+    {
+        SetToolTextOrientation ( wxAUI_TBTOOL_TEXT_RIGHT );
+    }
+
+    SetBackgroundStyle ( wxBG_STYLE_CUSTOM );
 }
 
 
@@ -850,36 +927,51 @@
     delete m_sizer;
 }
 
-void wxAuiToolBar::SetWindowStyleFlag(long style)
+void wxAuiToolBar::SetWindowStyleFlag ( long style )
 {
-    GetOrientation(style);      // assert if style is invalid
-    wxCHECK_RET(IsPaneValid(style),
-                "window settings and pane settings are incompatible");
+    GetOrientation ( style );   // assert if style is invalid
+    wxCHECK_RET ( IsPaneValid ( style ),
+                  "window settings and pane settings are incompatible" );
 
-    wxControl::SetWindowStyleFlag(style);
+    wxControl::SetWindowStyleFlag ( style );
 
     m_style = style;
 
-    if (m_art)
+    if ( m_art )
     {
         SetArtFlags();
     }
 
-    if (m_style & wxAUI_TB_GRIPPER)
-        m_gripper_visible = true;
+    if ( m_style & wxAUI_TB_GRIPPER )
+    {
+        m_gripperVisible = true;
+    }
+
     else
-        m_gripper_visible = false;
+    {
+        m_gripperVisible = false;
+    }
 
 
-    if (m_style & wxAUI_TB_OVERFLOW)
-        m_overflow_visible = true;
+    if ( m_style & wxAUI_TB_OVERFLOW )
+    {
+        m_overflowVisible = true;
+    }
+
     else
-        m_overflow_visible = false;
+    {
+        m_overflowVisible = false;
+    }
 
-    if (style & wxAUI_TB_HORZ_LAYOUT)
-        SetToolTextOrientation(wxAUI_TBTOOL_TEXT_RIGHT);
+    if ( style & wxAUI_TB_HORZ_LAYOUT )
+    {
+        SetToolTextOrientation ( wxAUI_TBTOOL_TEXT_RIGHT );
+    }
+
     else
-        SetToolTextOrientation(wxAUI_TBTOOL_TEXT_BOTTOM);
+    {
+        SetToolTextOrientation ( wxAUI_TBTOOL_TEXT_BOTTOM );
+    }
 }
 
 long wxAuiToolBar::GetWindowStyleFlag() const
@@ -887,20 +979,20 @@
     return m_style;
 }
 
-void wxAuiToolBar::SetArtProvider(wxAuiToolBarArt* art)
+void wxAuiToolBar::SetArtProvider ( wxAuiToolBarArt * art )
 {
     delete m_art;
 
     m_art = art;
 
-    if (m_art)
+    if ( m_art )
     {
         SetArtFlags();
-        m_art->SetTextOrientation(m_tool_text_orientation);
+        m_art->SetTextOrientation ( m_toolTextOrientation );
     }
 }
 
-wxAuiToolBarArt* wxAuiToolBar::GetArtProvider() const
+wxAuiToolBarArt * wxAuiToolBar::GetArtProvider() const
 {
     return m_art;
 }
@@ -908,202 +1000,211 @@
 
 
 
-wxAuiToolBarItem* wxAuiToolBar::AddTool(int tool_id,
-                           const wxString& label,
-                           const wxBitmap& bitmap,
-                           const wxString& short_help_string,
-                           wxItemKind kind)
+wxAuiToolBarItem * wxAuiToolBar::AddTool ( int toolId,
+                                           const wxString & label,
+                                           const wxBitmap & bitmap,
+                                           const wxString & shortHelpString,
+                                           wxItemKind kind )
 {
-    return AddTool(tool_id,
-            label,
-            bitmap,
-            wxNullBitmap,
-            kind,
-            short_help_string,
-            wxEmptyString,
-            NULL);
+    return AddTool ( toolId,
+                     label,
+                     bitmap,
+                     wxNullBitmap,
+                     kind,
+                     shortHelpString,
+                     wxEmptyString,
+                     NULL );
 }
 
 
-wxAuiToolBarItem* wxAuiToolBar::AddTool(int tool_id,
-                           const wxString& label,
-                           const wxBitmap& bitmap,
-                           const wxBitmap& disabled_bitmap,
-                           wxItemKind kind,
-                           const wxString& short_help_string,
-                           const wxString& long_help_string,
-                           wxObject* WXUNUSED(client_data))
+wxAuiToolBarItem * wxAuiToolBar::AddTool ( int toolId,
+                                           const wxString & label,
+                                           const wxBitmap & bitmap,
+                                           const wxBitmap & disabledBitmap,
+                                           wxItemKind kind,
+                                           const wxString & shortHelpString,
+                                           const wxString & longHelpString,
+                                           wxObject * WXUNUSED ( clientData ) )
 {
     wxAuiToolBarItem item;
-    item.window = NULL;
-    item.label = label;
-    item.bitmap = bitmap;
-    item.disabled_bitmap = disabled_bitmap;
-    item.short_help = short_help_string;
-    item.long_help = long_help_string;
-    item.active = true;
-    item.dropdown = false;
-    item.spacer_pixels = 0;
-    item.toolid = tool_id;
-    item.state = 0;
-    item.proportion = 0;
-    item.kind = kind;
-    item.sizer_item = NULL;
-    item.min_size = wxDefaultSize;
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = NULL;
+    item.m_label = label;
+    item.m_bitmap = bitmap;
+    item.m_disabledBitmap = disabledBitmap;
+    item.m_shortHelp = shortHelpString;
+    item.m_longHelp = longHelpString;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_spacerPixels = 0;
+    item.m_toolId = toolId;
+    item.m_state = 0;
+    item.m_proportion = 0;
+    item.m_kind = kind;
+    item.m_sizerItem = NULL;
+    item.m_minSize = wxDefaultSize;
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    if (item.toolid == wxID_ANY)
-        item.toolid = wxNewId();
+    if ( item.m_toolId == wxID_ANY )
+    {
+        item.m_toolId = wxNewId();
+    }
 
-    if (!item.disabled_bitmap.IsOk())
+    if ( !item.m_disabledBitmap.IsOk() )
     {
         // no disabled bitmap specified, we need to make one
-        if (item.bitmap.IsOk())
+        if ( item.m_bitmap.IsOk() )
         {
-            item.disabled_bitmap = item.bitmap.ConvertToDisabled();
+            item.m_disabledBitmap = item.m_bitmap.ConvertToDisabled();
         }
     }
-    m_items.Add(item);
+
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddControl(wxControl* control,
-                              const wxString& label)
+wxAuiToolBarItem * wxAuiToolBar::AddControl ( wxControl * control,
+                                              const wxString & label )
 {
     wxAuiToolBarItem item;
-    item.window = (wxWindow*)control;
-    item.label = label;
-    item.bitmap = wxNullBitmap;
-    item.disabled_bitmap = wxNullBitmap;
-    item.active = true;
-    item.dropdown = false;
-    item.spacer_pixels = 0;
-    item.toolid = control->GetId();
-    item.state = 0;
-    item.proportion = 0;
-    item.kind = wxITEM_CONTROL;
-    item.sizer_item = NULL;
-    item.min_size = control->GetEffectiveMinSize();
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = ( wxWindow * ) control;
+    item.m_label = label;
+    item.m_bitmap = wxNullBitmap;
+    item.m_disabledBitmap = wxNullBitmap;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_spacerPixels = 0;
+    item.m_toolId = control->GetId();
+    item.m_state = 0;
+    item.m_proportion = 0;
+    item.m_kind = wxITEM_CONTROL;
+    item.m_sizerItem = NULL;
+    item.m_minSize = control->GetEffectiveMinSize();
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    m_items.Add(item);
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddLabel(int tool_id,
-                            const wxString& label,
-                            const int width)
+wxAuiToolBarItem * wxAuiToolBar::AddLabel ( int toolId,
+                                            const wxString & label,
+                                            const int width )
 {
-    wxSize min_size = wxDefaultSize;
-    if (width != -1)
-        min_size.x = width;
+    wxSize minSize = wxDefaultSize;
 
+    if ( width != -1 )
+    {
+        minSize.x = width;
+    }
+
     wxAuiToolBarItem item;
-    item.window = NULL;
-    item.label = label;
-    item.bitmap = wxNullBitmap;
-    item.disabled_bitmap = wxNullBitmap;
-    item.active = true;
-    item.dropdown = false;
-    item.spacer_pixels = 0;
-    item.toolid = tool_id;
-    item.state = 0;
-    item.proportion = 0;
-    item.kind = wxITEM_LABEL;
-    item.sizer_item = NULL;
-    item.min_size = min_size;
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = NULL;
+    item.m_label = label;
+    item.m_bitmap = wxNullBitmap;
+    item.m_disabledBitmap = wxNullBitmap;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_spacerPixels = 0;
+    item.m_toolId = toolId;
+    item.m_state = 0;
+    item.m_proportion = 0;
+    item.m_kind = wxITEM_LABEL;
+    item.m_sizerItem = NULL;
+    item.m_minSize = minSize;
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    if (item.toolid == wxID_ANY)
-        item.toolid = wxNewId();
+    if ( item.m_toolId == wxID_ANY )
+    {
+        item.m_toolId = wxNewId();
+    }
 
-    m_items.Add(item);
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddSeparator()
+wxAuiToolBarItem * wxAuiToolBar::AddSeparator()
 {
     wxAuiToolBarItem item;
-    item.window = NULL;
-    item.label = wxEmptyString;
-    item.bitmap = wxNullBitmap;
-    item.disabled_bitmap = wxNullBitmap;
-    item.active = true;
-    item.dropdown = false;
-    item.toolid = -1;
-    item.state = 0;
-    item.proportion = 0;
-    item.kind = wxITEM_SEPARATOR;
-    item.sizer_item = NULL;
-    item.min_size = wxDefaultSize;
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = NULL;
+    item.m_label = wxEmptyString;
+    item.m_bitmap = wxNullBitmap;
+    item.m_disabledBitmap = wxNullBitmap;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_toolId = -1;
+    item.m_state = 0;
+    item.m_proportion = 0;
+    item.m_kind = wxITEM_SEPARATOR;
+    item.m_sizerItem = NULL;
+    item.m_minSize = wxDefaultSize;
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    m_items.Add(item);
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddSpacer(int pixels)
+wxAuiToolBarItem * wxAuiToolBar::AddSpacer ( int pixels )
 {
     wxAuiToolBarItem item;
-    item.window = NULL;
-    item.label = wxEmptyString;
-    item.bitmap = wxNullBitmap;
-    item.disabled_bitmap = wxNullBitmap;
-    item.active = true;
-    item.dropdown = false;
-    item.spacer_pixels = pixels;
-    item.toolid = -1;
-    item.state = 0;
-    item.proportion = 0;
-    item.kind = wxITEM_SPACER;
-    item.sizer_item = NULL;
-    item.min_size = wxDefaultSize;
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = NULL;
+    item.m_label = wxEmptyString;
+    item.m_bitmap = wxNullBitmap;
+    item.m_disabledBitmap = wxNullBitmap;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_spacerPixels = pixels;
+    item.m_toolId = -1;
+    item.m_state = 0;
+    item.m_proportion = 0;
+    item.m_kind = wxITEM_SPACER;
+    item.m_sizerItem = NULL;
+    item.m_minSize = wxDefaultSize;
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    m_items.Add(item);
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
-wxAuiToolBarItem* wxAuiToolBar::AddStretchSpacer(int proportion)
+wxAuiToolBarItem * wxAuiToolBar::AddStretchSpacer ( int proportion )
 {
     wxAuiToolBarItem item;
-    item.window = NULL;
-    item.label = wxEmptyString;
-    item.bitmap = wxNullBitmap;
-    item.disabled_bitmap = wxNullBitmap;
-    item.active = true;
-    item.dropdown = false;
-    item.spacer_pixels = 0;
-    item.toolid = -1;
-    item.state = 0;
-    item.proportion = proportion;
-    item.kind = wxITEM_SPACER;
-    item.sizer_item = NULL;
-    item.min_size = wxDefaultSize;
-    item.user_data = 0;
-    item.sticky = false;
+    item.m_window = NULL;
+    item.m_label = wxEmptyString;
+    item.m_bitmap = wxNullBitmap;
+    item.m_disabledBitmap = wxNullBitmap;
+    item.m_active = true;
+    item.m_dropDown = false;
+    item.m_spacerPixels = 0;
+    item.m_toolId = -1;
+    item.m_state = 0;
+    item.m_proportion = proportion;
+    item.m_kind = wxITEM_SPACER;
+    item.m_sizerItem = NULL;
+    item.m_minSize = wxDefaultSize;
+    item.m_userData = 0;
+    item.m_sticky = false;
 
-    m_items.Add(item);
+    m_items.Add ( item );
     return &m_items.Last();
 }
 
 void wxAuiToolBar::Clear()
 {
     m_items.Clear();
-    m_sizer_element_count = 0;
+    m_sizerElementCount = 0;
 }
 
-bool wxAuiToolBar::DeleteTool(int tool_id)
+bool wxAuiToolBar::DeleteTool ( int toolId )
 {
-    int idx = GetToolIndex(tool_id);
-    if (idx >= 0 && idx < (int)m_items.GetCount())
+    int idx = GetToolIndex ( toolId );
+
+    if ( idx >= 0 && idx < ( int ) m_items.GetCount() )
     {
-        m_items.RemoveAt(idx);
+        m_items.RemoveAt ( idx );
         Realize();
         return true;
     }
@@ -1111,11 +1212,11 @@
     return false;
 }
 
-bool wxAuiToolBar::DeleteByIndex(int idx)
+bool wxAuiToolBar::DeleteByIndex ( int idx )
 {
-    if (idx >= 0 && idx < (int)m_items.GetCount())
+    if ( idx >= 0 && idx < ( int ) m_items.GetCount() )
     {
-        m_items.RemoveAt(idx);
+        m_items.RemoveAt ( idx );
         Realize();
         return true;
     }
@@ -1124,41 +1225,51 @@
 }
 
 
-wxControl* wxAuiToolBar::FindControl(int id)
+wxControl * wxAuiToolBar::FindControl ( int id )
 {
-    wxWindow* wnd = FindWindow(id);
-    return (wxControl*)wnd;
+    wxWindow * wnd = FindWindow ( id );
+    return ( wxControl * ) wnd;
 }
 
-wxAuiToolBarItem* wxAuiToolBar::FindTool(int tool_id) const
+wxAuiToolBarItem * wxAuiToolBar::FindTool ( int toolId ) const
 {
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.toolid == tool_id)
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_toolId == toolId )
+        {
             return &item;
+        }
     }
 
     return NULL;
 }
 
-wxAuiToolBarItem* wxAuiToolBar::FindToolByPosition(wxCoord x, wxCoord y) const
+wxAuiToolBarItem * wxAuiToolBar::FindToolByPosition ( wxCoord x, wxCoord y ) const
 {
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem & item = m_items.Item ( i );
 
-        if (!item.sizer_item)
+        if ( !item.m_sizerItem )
+        {
             continue;
+        }
 
-        wxRect rect = item.sizer_item->GetRect();
-        if (rect.Contains(x,y))
+        wxRect rect = item.m_sizerItem->GetRect();
+
+        if ( rect.Contains ( x, y ) )
         {
             // if the item doesn't fit on the toolbar, return NULL
-            if (!GetToolFitsByIndex(i))
+            if ( !GetToolFitsByIndex ( i ) )
+            {
                 return NULL;
+            }
 
             return &item;
         }
@@ -1167,27 +1278,34 @@
     return NULL;
 }
 
-wxAuiToolBarItem* wxAuiToolBar::FindToolByPositionWithPacking(wxCoord x, wxCoord y) const
+wxAuiToolBarItem * wxAuiToolBar::FindToolByPositionWithPacking ( wxCoord x, wxCoord y ) const
 {
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem & item = m_items.Item ( i );
 
-        if (!item.sizer_item)
+        if ( !item.m_sizerItem )
+        {
             continue;
+        }
 
-        wxRect rect = item.sizer_item->GetRect();
+        wxRect rect = item.m_sizerItem->GetRect();
 
         // apply tool packing
-        if (i+1 < count)
-            rect.width += m_tool_packing;
+        if ( i + 1 < count )
+        {
+            rect.width += m_toolPacking;
+        }
 
-        if (rect.Contains(x,y))
+        if ( rect.Contains ( x, y ) )
         {
             // if the item doesn't fit on the toolbar, return NULL
-            if (!GetToolFitsByIndex(i))
+            if ( !GetToolFitsByIndex ( i ) )
+            {
                 return NULL;
+            }
 
             return &item;
         }
@@ -1196,18 +1314,22 @@
     return NULL;
 }
 
-wxAuiToolBarItem* wxAuiToolBar::FindToolByIndex(int idx) const
+wxAuiToolBarItem * wxAuiToolBar::FindToolByIndex ( int idx ) const
 {
-    if (idx < 0)
+    if ( idx < 0 )
+    {
         return NULL;
+    }
 
-    if (idx >= (int)m_items.size())
+    if ( idx >= ( int ) m_items.size() )
+    {
         return NULL;
+    }
 
-    return &(m_items[idx]);
+    return & ( m_items[idx] );
 }
 
-void wxAuiToolBar::SetToolBitmapSize(const wxSize& WXUNUSED(size))
+void wxAuiToolBar::SetToolBitmapSize ( const wxSize & WXUNUSED ( size ) )
 {
     // TODO: wxToolBar compatibility
 }
@@ -1215,502 +1337,618 @@
 wxSize wxAuiToolBar::GetToolBitmapSize() const
 {
     // TODO: wxToolBar compatibility
-    return wxSize(16,15);
+    return wxSize ( 16, 15 );
 }
 
-void wxAuiToolBar::SetToolProportion(int tool_id, int proportion)
+void wxAuiToolBar::SetToolProportion ( int toolId, int proportion )
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return;
+    }
 
-    item->proportion = proportion;
+    item->m_proportion = proportion;
 }
 
-int wxAuiToolBar::GetToolProportion(int tool_id) const
+int wxAuiToolBar::GetToolProportion ( int toolId ) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return 0;
+    }
 
-    return item->proportion;
+    return item->m_proportion;
 }
 
-void wxAuiToolBar::SetToolSeparation(int separation)
+void wxAuiToolBar::SetToolSeparation ( int separation )
 {
-    if (m_art)
-        m_art->SetElementSize(wxAUI_TBART_SEPARATOR_SIZE, separation);
+    if ( m_art )
+    {
+        m_art->SetElementSize ( wxAUI_TBART_SEPARATOR_SIZE, separation );
+    }
 }
 
 int wxAuiToolBar::GetToolSeparation() const
 {
-    if (m_art)
-        return m_art->GetElementSize(wxAUI_TBART_SEPARATOR_SIZE);
+    if ( m_art )
+    {
+        return m_art->GetElementSize ( wxAUI_TBART_SEPARATOR_SIZE );
+    }
+
     else
+    {
         return 5;
+    }
 }
 
 
-void wxAuiToolBar::SetToolDropDown(int tool_id, bool dropdown)
+void wxAuiToolBar::SetToolDropDown ( int toolId, bool dropdown )
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return;
+    }
 
-    item->dropdown = dropdown;
+    item->m_dropDown = dropdown;
 }
 
-bool wxAuiToolBar::GetToolDropDown(int tool_id) const
+bool wxAuiToolBar::GetToolDropDown ( int toolId ) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return 0;
+    }
 
-    return item->dropdown;
+    return item->m_dropDown;
 }
 
-void wxAuiToolBar::SetToolSticky(int tool_id, bool sticky)
+void wxAuiToolBar::SetToolSticky ( int toolId, bool sticky )
 {
     // ignore separators
-    if (tool_id == -1)
+    if ( toolId == -1 )
+    {
         return;
+    }
 
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return;
+    }
 
-    if (item->sticky == sticky)
+    if ( item->m_sticky == sticky )
+    {
         return;
+    }
 
-    item->sticky = sticky;
+    item->m_sticky = sticky;
 
-    Refresh(false);
+    Refresh ( false );
     Update();
 }
 
-bool wxAuiToolBar::GetToolSticky(int tool_id) const
+bool wxAuiToolBar::GetToolSticky ( int toolId ) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
+    wxAuiToolBarItem * item = FindTool ( toolId );
+
+    if ( !item )
+    {
         return 0;
+    }
 
-    return item->sticky;
+    return item->m_sticky;
 }
 
 
 
 
-void wxAuiToolBar::SetToolBorderPadding(int padding)
+void wxAuiToolBar::SetToolBorderPadding ( int padding )
 {
-    m_tool_border_padding = padding;
+    m_toolBorderPadding = padding;
 }
 
 int wxAuiToolBar::GetToolBorderPadding() const
 {
-    return m_tool_border_padding;
+    return m_toolBorderPadding;
 }
 
-void wxAuiToolBar::SetToolTextOrientation(int orientation)
+void wxAuiToolBar::SetToolTextOrientation ( int orientation )
 {
-    m_tool_text_orientation = orientation;
+    m_toolTextOrientation = orientation;
 
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetTextOrientation(orientation);
+        m_art->SetTextOrientation ( orientation );
     }
 }
 
 int wxAuiToolBar::GetToolTextOrientation() const
 {
-    return m_tool_text_orientation;
+    return m_toolTextOrientation;
 }
 
-void wxAuiToolBar::SetToolPacking(int packing)
+void wxAuiToolBar::SetToolPacking ( int packing )
 {
-    m_tool_packing = packing;
+    m_toolPacking = packing;
 }
 
 int wxAuiToolBar::GetToolPacking() const
 {
-    return m_tool_packing;
+    return m_toolPacking;
 }
 
 
-void wxAuiToolBar::SetOrientation(int orientation)
+void wxAuiToolBar::SetOrientation ( int orientation )
 {
-    wxCHECK_RET(orientation == wxHORIZONTAL ||
-                orientation == wxVERTICAL,
-                "invalid orientation value");
-    if (orientation != m_orientation)
+    wxCHECK_RET ( orientation == wxHORIZONTAL ||
+                  orientation == wxVERTICAL,
+                  "invalid orientation value" );
+
+    if ( orientation != m_orientation )
     {
-        m_orientation = wxOrientation(orientation);
+        m_orientation = wxOrientation ( orientation );
         SetArtFlags();
     }
 }
 
-void wxAuiToolBar::SetMargins(int left, int right, int top, int bottom)
+void wxAuiToolBar::SetMargins ( int left, int right, int top, int bottom )
 {
-    if (left != -1)
-        m_left_padding = left;
-    if (right != -1)
-        m_right_padding = right;
-    if (top != -1)
-        m_top_padding = top;
-    if (bottom != -1)
-        m_bottom_padding = bottom;
+    if ( left != -1 )
+    {
+        m_leftPadding = left;
+    }
+
+    if ( right != -1 )
+    {
+        m_rightPadding = right;
+    }
+
+    if ( top != -1 )
+    {
+        m_topPadding = top;
+    }
+
+    if ( bottom != -1 )
+    {
+        m_bottomPadding = bottom;
+    }
 }
 
 bool wxAuiToolBar::GetGripperVisible() const
 {
-    return m_gripper_visible;
+    return m_gripperVisible;
 }
 
-void wxAuiToolBar::SetGripperVisible(bool visible)
+void wxAuiToolBar::SetGripperVisible ( bool visible )
 {
-    m_gripper_visible = visible;
-    if (visible)
+    m_gripperVisible = visible;
+
+    if ( visible )
+    {
         m_style |= wxAUI_TB_GRIPPER;
+    }
+
     else
+    {
         m_style &= ~wxAUI_TB_GRIPPER;
+    }
+
     Realize();
-    Refresh(false);
+    Refresh ( false );
 }
 
 
 bool wxAuiToolBar::GetOverflowVisible() const
 {
-    return m_overflow_visible;
+    return m_overflowVisible;
 }
 
-void wxAuiToolBar::SetOverflowVisible(bool visible)
+void wxAuiToolBar::SetOverflowVisible ( bool visible )
 {
-    m_overflow_visible = visible;
-    if (visible)
+    m_overflowVisible = visible;
+
+    if ( visible )
+    {
         m_style |= wxAUI_TB_OVERFLOW;
+    }
+
     else
+    {
         m_style &= ~wxAUI_TB_OVERFLOW;
-    Refresh(false);
+    }
+
+    Refresh ( false );
 }
 
-bool wxAuiToolBar::SetFont(const wxFont& font)
+bool wxAuiToolBar::SetFont ( const wxFont & font )
 {
-    bool res = wxWindow::SetFont(font);
+    bool res = wxWindow::SetFont ( font );
 
-    if (m_art)
+    if ( m_art )
     {
-        m_art->SetFont(font);
+        m_art->SetFont ( font );
     }
 
     return res;
 }
 
 
-void wxAuiToolBar::SetHoverItem(wxAuiToolBarItem* pitem)
+void wxAuiToolBar::SetHoverItem ( wxAuiToolBarItem * pitem )
 {
-    wxAuiToolBarItem* former_hover = NULL;
+    wxAuiToolBarItem * formerHover = NULL;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.state & wxAUI_BUTTON_STATE_HOVER)
-            former_hover = &item;
-        item.state &= ~wxAUI_BUTTON_STATE_HOVER;
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_state & wxAUI_BUTTON_STATE_HOVER )
+        {
+            formerHover = &item;
+        }
+
+        item.m_state &= ~wxAUI_BUTTON_STATE_HOVER;
     }
 
-    if (pitem)
+    if ( pitem )
     {
-        pitem->state |= wxAUI_BUTTON_STATE_HOVER;
+        pitem->m_state |= wxAUI_BUTTON_STATE_HOVER;
     }
 
-    if (former_hover != pitem)
+    if ( formerHover != pitem )
     {
-        Refresh(false);
+        Refresh ( false );
         Update();
     }
 }
 
-void wxAuiToolBar::SetPressedItem(wxAuiToolBarItem* pitem)
+void wxAuiToolBar::SetPressedItem ( wxAuiToolBarItem * pitem )
 {
-    wxAuiToolBarItem* former_item = NULL;
+    wxAuiToolBarItem * formerItem = NULL;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.state & wxAUI_BUTTON_STATE_PRESSED)
-            former_item = &item;
-        item.state &= ~wxAUI_BUTTON_STATE_PRESSED;
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_state & wxAUI_BUTTON_STATE_PRESSED )
+        {
+            formerItem = &item;
+        }
+
+        item.m_state &= ~wxAUI_BUTTON_STATE_PRESSED;
     }
 
-    if (pitem)
+    if ( pitem )
     {
-        pitem->state &= ~wxAUI_BUTTON_STATE_HOVER;
-        pitem->state |= wxAUI_BUTTON_STATE_PRESSED;
+        pitem->m_state &= ~wxAUI_BUTTON_STATE_HOVER;
+        pitem->m_state |= wxAUI_BUTTON_STATE_PRESSED;
     }
 
-    if (former_item != pitem)
+    if ( formerItem != pitem )
     {
-        Refresh(false);
+        Refresh ( false );
         Update();
     }
 }
 
 void wxAuiToolBar::RefreshOverflowState()
 {
-    if (!m_overflow_sizer_item)
+    if ( !m_overflowSizerItem )
     {
-        m_overflow_state = 0;
+        m_overflowState = 0;
         return;
     }
 
-    int overflow_state = 0;
+    int overflowState = 0;
 
-    wxRect overflow_rect = GetOverflowRect();
+    wxRect overflowRect = GetOverflowRect();
 
 
     // find out the mouse's current position
     wxPoint pt = ::wxGetMousePosition();
-    pt = this->ScreenToClient(pt);
+    pt = this->ScreenToClient ( pt );
 
     // find out if the mouse cursor is inside the dropdown rectangle
-    if (overflow_rect.Contains(pt.x, pt.y))
+    if ( overflowRect.Contains ( pt.x, pt.y ) )
     {
-        if (::wxGetMouseState().LeftIsDown())
-            overflow_state = wxAUI_BUTTON_STATE_PRESSED;
+        if ( ::wxGetMouseState().LeftIsDown() )
+        {
+            overflowState = wxAUI_BUTTON_STATE_PRESSED;
+        }
+
         else
-            overflow_state = wxAUI_BUTTON_STATE_HOVER;
+        {
+            overflowState = wxAUI_BUTTON_STATE_HOVER;
+        }
     }
 
-    if (overflow_state != m_overflow_state)
+    if ( overflowState != m_overflowState )
     {
-        m_overflow_state = overflow_state;
-        Refresh(false);
+        m_overflowState = overflowState;
+        Refresh ( false );
         Update();
     }
 
-    m_overflow_state = overflow_state;
+    m_overflowState = overflowState;
 }
 
-void wxAuiToolBar::ToggleTool(int tool_id, bool state)
+void wxAuiToolBar::ToggleTool ( int toolId, bool state )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem * tool = FindTool ( toolId );
 
-    if (tool && (tool->kind == wxITEM_CHECK || tool->kind == wxITEM_RADIO))
+    if ( tool && ( tool->m_kind == wxITEM_CHECK || tool->m_kind == wxITEM_RADIO ) )
     {
-        if (tool->kind == wxITEM_RADIO)
+        if ( tool->m_kind == wxITEM_RADIO )
         {
             int i, idx, count;
-            idx = GetToolIndex(tool_id);
-            count = (int)m_items.GetCount();
+            idx = GetToolIndex ( toolId );
+            count = ( int ) m_items.GetCount();
 
-            if (idx >= 0 && idx < count)
+            if ( idx >= 0 && idx < count )
             {
-                for (i = idx + 1; i < count; ++i)
+                for ( i = idx + 1; i < count; ++i )
                 {
-                    if (m_items[i].kind != wxITEM_RADIO)
+                    if ( m_items[i].m_kind != wxITEM_RADIO )
+                    {
                         break;
-                    m_items[i].state &= ~wxAUI_BUTTON_STATE_CHECKED;
+                    }
+
+                    m_items[i].m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
                 }
-                for (i = idx - 1; i >= 0; i--)
+
+                for ( i = idx - 1; i >= 0; i-- )
                 {
-                    if (m_items[i].kind != wxITEM_RADIO)
+                    if ( m_items[i].m_kind != wxITEM_RADIO )
+                    {
                         break;
-                    m_items[i].state &= ~wxAUI_BUTTON_STATE_CHECKED;
+                    }
+
+                    m_items[i].m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
                 }
             }
 
-            tool->state |= wxAUI_BUTTON_STATE_CHECKED;
+            tool->m_state |= wxAUI_BUTTON_STATE_CHECKED;
         }
-         else if (tool->kind == wxITEM_CHECK)
+
+        else if ( tool->m_kind == wxITEM_CHECK )
         {
-            if (state == true)
-                tool->state |= wxAUI_BUTTON_STATE_CHECKED;
+            if ( state == true )
+            {
+                tool->m_state |= wxAUI_BUTTON_STATE_CHECKED;
+            }
+
             else
-                tool->state &= ~wxAUI_BUTTON_STATE_CHECKED;
+            {
+                tool->m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
+            }
         }
     }
 }
 
-bool wxAuiToolBar::GetToolToggled(int tool_id) const
+bool wxAuiToolBar::GetToolToggled ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem * tool = FindTool ( toolId );
 
-    if (tool)
+    if ( tool )
     {
-        if ( (tool->kind != wxITEM_CHECK) && (tool->kind != wxITEM_RADIO) )
+        if ( ( tool->m_kind != wxITEM_CHECK ) && ( tool->m_kind != wxITEM_RADIO ) )
+        {
             return false;
+        }
 
-        return (tool->state & wxAUI_BUTTON_STATE_CHECKED) ? true : false;
+        return ( tool->m_state & wxAUI_BUTTON_STATE_CHECKED ) ? true : false;
     }
 
     return false;
 }
 
-void wxAuiToolBar::EnableTool(int tool_id, bool state)
+void wxAuiToolBar::EnableTool ( int toolId, bool state )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem * tool = FindTool ( toolId );
 
-    if (tool)
+    if ( tool )
     {
-        if (state == true)
-            tool->state &= ~wxAUI_BUTTON_STATE_DISABLED;
+        if ( state == true )
+        {
+            tool->m_state &= ~wxAUI_BUTTON_STATE_DISABLED;
+        }
+
         else
-            tool->state |= wxAUI_BUTTON_STATE_DISABLED;
+        {
+            tool->m_state |= wxAUI_BUTTON_STATE_DISABLED;
+        }
     }
 }
 
-bool wxAuiToolBar::GetToolEnabled(int tool_id) const
+bool wxAuiToolBar::GetToolEnabled ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
+    wxAuiToolBarItem * tool = FindTool ( toolId );
 
-    if (tool)
-        return (tool->state & wxAUI_BUTTON_STATE_DISABLED) ? false : true;
+    if ( tool )
+    {
+        return ( tool->m_state & wxAUI_BUTTON_STATE_DISABLED ) ? false : true;
+    }
 
     return false;
 }
 
-wxString wxAuiToolBar::GetToolLabel(int tool_id) const
+wxString wxAuiToolBar::GetToolLabel ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+    wxASSERT_MSG ( tool, wxT ( "can't find tool in toolbar item array" ) );
+
+    if ( !tool )
+    {
         return wxEmptyString;
+    }
 
-    return tool->label;
+    return tool->m_label;
 }
 
-void wxAuiToolBar::SetToolLabel(int tool_id, const wxString& label)
+void wxAuiToolBar::SetToolLabel ( int toolId, const wxString & label )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+
+    if ( tool )
     {
-        tool->label = label;
+        tool->m_label = label;
     }
 }
 
-wxBitmap wxAuiToolBar::GetToolBitmap(int tool_id) const
+wxBitmap wxAuiToolBar::GetToolBitmap ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+    wxASSERT_MSG ( tool, wxT ( "can't find tool in toolbar item array" ) );
+
+    if ( !tool )
+    {
         return wxNullBitmap;
+    }
 
-    return tool->bitmap;
+    return tool->m_bitmap;
 }
 
-void wxAuiToolBar::SetToolBitmap(int tool_id, const wxBitmap& bitmap)
+void wxAuiToolBar::SetToolBitmap ( int toolId, const wxBitmap & bitmap )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+
+    if ( tool )
     {
-        tool->bitmap = bitmap;
+        tool->m_bitmap = bitmap;
     }
 }
 
-wxString wxAuiToolBar::GetToolShortHelp(int tool_id) const
+wxString wxAuiToolBar::GetToolShortHelp ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+    wxASSERT_MSG ( tool, wxT ( "can't find tool in toolbar item array" ) );
+
+    if ( !tool )
+    {
         return wxEmptyString;
+    }
 
-    return tool->short_help;
+    return tool->m_shortHelp;
 }
 
-void wxAuiToolBar::SetToolShortHelp(int tool_id, const wxString& help_string)
+void wxAuiToolBar::SetToolShortHelp ( int toolId, const wxString & helpString )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+
+    if ( tool )
     {
-        tool->short_help = help_string;
+        tool->m_shortHelp = helpString;
     }
 }
 
-wxString wxAuiToolBar::GetToolLongHelp(int tool_id) const
+wxString wxAuiToolBar::GetToolLongHelp ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    wxASSERT_MSG(tool, wxT("can't find tool in toolbar item array"));
-    if (!tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+    wxASSERT_MSG ( tool, wxT ( "can't find tool in toolbar item array" ) );
+
+    if ( !tool )
+    {
         return wxEmptyString;
+    }
 
-    return tool->long_help;
+    return tool->m_longHelp;
 }
 
-void wxAuiToolBar::SetToolLongHelp(int tool_id, const wxString& help_string)
+void wxAuiToolBar::SetToolLongHelp ( int toolId, const wxString & helpString )
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+
+    if ( tool )
     {
-        tool->long_help = help_string;
+        tool->m_longHelp = helpString;
     }
 }
 
-void wxAuiToolBar::SetCustomOverflowItems(const wxAuiToolBarItemArray& prepend,
-                                          const wxAuiToolBarItemArray& append)
+void wxAuiToolBar::SetCustomOverflowItems ( const wxAuiToolBarItemArray & prepend,
+                                            const wxAuiToolBarItemArray & append )
 {
-    m_custom_overflow_prepend = prepend;
-    m_custom_overflow_append = append;
+    m_customOverflowPrepend = prepend;
+    m_customOverflowAppend = append;
 }
 
 // get size of hint rectangle for a particular dock location
-wxSize wxAuiToolBar::GetHintSize(int dock_direction) const
+wxSize wxAuiToolBar::GetHintSize ( int dockDirection ) const
 {
-    switch (dock_direction)
+    switch ( dockDirection )
     {
         case wxAUI_DOCK_TOP:
         case wxAUI_DOCK_BOTTOM:
             return m_horzHintSize;
+
         case wxAUI_DOCK_RIGHT:
         case wxAUI_DOCK_LEFT:
             return m_vertHintSize;
+
         default:
-            wxCHECK_MSG(false, wxDefaultSize, "invalid dock location value");
+            wxCHECK_MSG ( false, wxDefaultSize, "invalid dock location value" );
     }
 }
 
-bool wxAuiToolBar::IsPaneValid(const wxAuiPaneInfo& pane) const
+bool wxAuiToolBar::IsPaneValid ( const wxAuiPaneInfo & pane ) const
 {
-    return IsPaneValid(m_style, pane);
+    return IsPaneValid ( m_style, pane );
 }
 
-bool wxAuiToolBar::IsPaneValid(long style, const wxAuiPaneInfo& pane)
+bool wxAuiToolBar::IsPaneValid ( long style, const wxAuiPaneInfo & pane )
 {
-    if (style & wxAUI_TB_HORIZONTAL)
+    if ( style & wxAUI_TB_HORIZONTAL )
     {
-        if (pane.IsLeftDockable() || pane.IsRightDockable())
+        if ( pane.IsLeftDockable() || pane.IsRightDockable() )
         {
             return false;
         }
     }
-    else if (style & wxAUI_TB_VERTICAL)
+
+    else if ( style & wxAUI_TB_VERTICAL )
     {
-        if (pane.IsTopDockable() || pane.IsBottomDockable())
+        if ( pane.IsTopDockable() || pane.IsBottomDockable() )
         {
             return false;
         }
     }
+
     return true;
 }
 
-bool wxAuiToolBar::IsPaneValid(long style) const
+bool wxAuiToolBar::IsPaneValid ( long style ) const
 {
-    wxAuiManager* manager = wxAuiManager::GetManager(const_cast<wxAuiToolBar*>(this));
-    if (manager)
+    wxAuiManager * manager = wxAuiManager::GetManager ( const_cast <wxAuiToolBar *> ( this ) );
+
+    if ( manager )
     {
-        return IsPaneValid(style, manager->GetPane(const_cast<wxAuiToolBar*>(this)));
+        return IsPaneValid ( style, manager->GetPane ( const_cast <wxAuiToolBar *> ( this ) ) );
     }
+
     return true;
 }
 
 void wxAuiToolBar::SetArtFlags() const
 {
     unsigned int artflags = m_style & ~wxAUI_ORIENTATION_MASK;
-    if (m_orientation == wxVERTICAL)
+
+    if ( m_orientation == wxVERTICAL )
     {
         artflags |= wxAUI_TB_VERTICAL;
     }
-    m_art->SetFlags(artflags);
+
+    m_art->SetFlags ( artflags );
 }
 
 size_t wxAuiToolBar::GetToolCount() const
@@ -1718,71 +1956,91 @@
     return m_items.size();
 }
 
-int wxAuiToolBar::GetToolIndex(int tool_id) const
+int wxAuiToolBar::GetToolIndex ( int toolId ) const
 {
     // this will prevent us from returning the index of the
     // first separator in the toolbar since its id is equal to -1
-    if (tool_id == -1)
+    if ( toolId == -1 )
+    {
         return wxNOT_FOUND;
+    }
 
     size_t i, count = m_items.GetCount();
-    for (i = 0; i < count; ++i)
+
+    for ( i = 0; i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.toolid == tool_id)
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_toolId == toolId )
+        {
             return i;
+        }
     }
 
     return wxNOT_FOUND;
 }
 
-bool wxAuiToolBar::GetToolFitsByIndex(int tool_idx) const
+bool wxAuiToolBar::GetToolFitsByIndex ( int toolIdx ) const
 {
-    if (tool_idx < 0 || tool_idx >= (int)m_items.GetCount())
+    if ( toolIdx < 0 || toolIdx >= ( int ) m_items.GetCount() )
+    {
         return false;
+    }
 
-    if (!m_items[tool_idx].sizer_item)
+    if ( !m_items[toolIdx].m_sizerItem )
+    {
         return false;
+    }
 
-    int cli_w, cli_h;
-    GetClientSize(&cli_w, &cli_h);
+    int cliW, cliH;
+    GetClientSize ( &cliW, &cliH );
 
-    wxRect rect = m_items[tool_idx].sizer_item->GetRect();
+    wxRect rect = m_items[toolIdx].m_sizerItem->GetRect();
 
-    if (m_orientation == wxVERTICAL)
+    if ( m_orientation == wxVERTICAL )
     {
         // take the dropdown size into account
-        if (m_overflow_visible)
-            cli_h -= m_overflow_sizer_item->GetSize().y;
+        if ( m_overflowVisible )
+        {
+            cliH -= m_overflowSizerItem->GetSize().y;
+        }
 
-        if (rect.y+rect.height < cli_h)
+        if ( rect.y + rect.height < cliH )
+        {
             return true;
+        }
     }
+
     else
     {
         // take the dropdown size into account
-        if (m_overflow_visible)
-            cli_w -= m_overflow_sizer_item->GetSize().x;
+        if ( m_overflowVisible )
+        {
+            cliW -= m_overflowSizerItem->GetSize().x;
+        }
 
-        if (rect.x+rect.width < cli_w)
+        if ( rect.x + rect.width < cliW )
+        {
             return true;
+        }
     }
 
     return false;
 }
 
 
-bool wxAuiToolBar::GetToolFits(int tool_id) const
+bool wxAuiToolBar::GetToolFits ( int toolId ) const
 {
-    return GetToolFitsByIndex(GetToolIndex(tool_id));
+    return GetToolFitsByIndex ( GetToolIndex ( toolId ) );
 }
 
-wxRect wxAuiToolBar::GetToolRect(int tool_id) const
+wxRect wxAuiToolBar::GetToolRect ( int toolId ) const
 {
-    wxAuiToolBarItem* tool = FindTool(tool_id);
-    if (tool && tool->sizer_item)
+    wxAuiToolBarItem * tool = FindTool ( toolId );
+
+    if ( tool && tool->m_sizerItem )
     {
-        return tool->sizer_item->GetRect();
+        return tool->m_sizerItem->GetRect();
     }
 
     return wxRect();
@@ -1790,43 +2048,50 @@
 
 bool wxAuiToolBar::GetToolBarFits() const
 {
-    if (m_items.GetCount() == 0)
+    if ( m_items.GetCount() == 0 )
     {
         // empty toolbar always 'fits'
         return true;
     }
 
     // entire toolbar content fits if the last tool fits
-    return GetToolFitsByIndex(m_items.GetCount() - 1);
+    return GetToolFitsByIndex ( m_items.GetCount() - 1 );
 }
 
 bool wxAuiToolBar::Realize()
 {
-    wxClientDC dc(this);
-    if (!dc.IsOk())
+    wxClientDC dc ( this );
+
+    if ( !dc.IsOk() )
+    {
         return false;
+    }
 
     // calculate hint sizes for both horizontal and vertical
     // in the order that leaves toolbar in correct final state
     bool retval = false;
-    if (m_orientation == wxHORIZONTAL)
+
+    if ( m_orientation == wxHORIZONTAL )
     {
-        if (RealizeHelper(dc, false))
+        if ( RealizeHelper ( dc, false ) )
         {
             m_vertHintSize = GetSize();
-            if (RealizeHelper(dc, true))
+
+            if ( RealizeHelper ( dc, true ) )
             {
                 m_horzHintSize = GetSize();
                 retval = true;
             }
         }
     }
+
     else
     {
-        if (RealizeHelper(dc, true))
+        if ( RealizeHelper ( dc, true ) )
         {
             m_horzHintSize = GetSize();
-            if (RealizeHelper(dc, false))
+
+            if ( RealizeHelper ( dc, false ) )
             {
                 m_vertHintSize = GetSize();
                 retval = true;
@@ -1834,57 +2099,71 @@
         }
     }
 
-    Refresh(false);
+    Refresh ( false );
     return retval;
 }
 
-bool wxAuiToolBar::RealizeHelper(wxClientDC& dc, bool horizontal)
+bool wxAuiToolBar::RealizeHelper ( wxClientDC & dc, bool horizontal )
 {
     // create the new sizer to add toolbar elements to
-    wxBoxSizer* sizer = new wxBoxSizer(horizontal ? wxHORIZONTAL : wxVERTICAL);
+    wxBoxSizer * sizer = new wxBoxSizer ( horizontal ? wxHORIZONTAL : wxVERTICAL );
 
     // add gripper area
-    int separator_size = m_art->GetElementSize(wxAUI_TBART_SEPARATOR_SIZE);
-    int gripper_size = m_art->GetElementSize(wxAUI_TBART_GRIPPER_SIZE);
-    if (gripper_size > 0 && m_gripper_visible)
+    int separatorSize = m_art->GetElementSize ( wxAUI_TBART_SEPARATOR_SIZE );
+    int gripperSize = m_art->GetElementSize ( wxAUI_TBART_GRIPPER_SIZE );
+
+    if ( gripperSize > 0 && m_gripperVisible )
     {
-        if (horizontal)
-            m_gripper_sizer_item = sizer->Add(gripper_size, 1, 0, wxEXPAND);
+        if ( horizontal )
+        {
+            m_gripperSizerItem = sizer->Add ( gripperSize, 1, 0, wxEXPAND );
+        }
+
         else
-            m_gripper_sizer_item = sizer->Add(1, gripper_size, 0, wxEXPAND);
+        {
+            m_gripperSizerItem = sizer->Add ( 1, gripperSize, 0, wxEXPAND );
+        }
     }
+
     else
     {
-        m_gripper_sizer_item = NULL;
+        m_gripperSizerItem = NULL;
     }
 
     // add "left" padding
-    if (m_left_padding > 0)
+    if ( m_leftPadding > 0 )
     {
-        if (horizontal)
-            sizer->Add(m_left_padding, 1);
+        if ( horizontal )
+        {
+            sizer->Add ( m_leftPadding, 1 );
+        }
+
         else
-            sizer->Add(1, m_left_padding);
+        {
+            sizer->Add ( 1, m_leftPadding );
+        }
     }
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        wxSizerItem* sizer_item = NULL;
+        wxAuiToolBarItem & item = m_items.Item ( i );
+        wxSizerItem * sizerItem = NULL;
 
-        switch (item.kind)
+        switch ( item.m_kind )
         {
             case wxITEM_LABEL:
             {
-                wxSize size = m_art->GetLabelSize(dc, this, item);
-                sizer_item = sizer->Add(size.x + (m_tool_border_padding*2),
-                                        size.y + (m_tool_border_padding*2),
-                                        item.proportion,
-                                        item.alignment);
-                if (i+1 < count)
+                wxSize size = m_art->GetLabelSize ( dc, this, item );
+                sizerItem = sizer->Add ( size.x + ( m_toolBorderPadding * 2 ),
+                                         size.y + ( m_toolBorderPadding * 2 ),
+                                         item.m_proportion,
+                                         item.m_alignment );
+
+                if ( i + 1 < count )
                 {
-                    sizer->AddSpacer(m_tool_packing);
+                    sizer->AddSpacer ( m_toolPacking );
                 }
 
                 break;
@@ -1894,15 +2173,16 @@
             case wxITEM_NORMAL:
             case wxITEM_RADIO:
             {
-                wxSize size = m_art->GetToolSize(dc, this, item);
-                sizer_item = sizer->Add(size.x + (m_tool_border_padding*2),
-                                        size.y + (m_tool_border_padding*2),
-                                        0,
-                                        item.alignment);
+                wxSize size = m_art->GetToolSize ( dc, this, item );
+                sizerItem = sizer->Add ( size.x + ( m_toolBorderPadding * 2 ),
+                                         size.y + ( m_toolBorderPadding * 2 ),
+                                         0,
+                                         item.m_alignment );
+
                 // add tool packing
-                if (i+1 < count)
+                if ( i + 1 < count )
                 {
-                    sizer->AddSpacer(m_tool_packing);
+                    sizer->AddSpacer ( m_toolPacking );
                 }
 
                 break;
@@ -1910,146 +2190,186 @@
 
             case wxITEM_SEPARATOR:
             {
-                if (horizontal)
-                    sizer_item = sizer->Add(separator_size, 1, 0, wxEXPAND);
+                if ( horizontal )
+                {
+                    sizerItem = sizer->Add ( separatorSize, 1, 0, wxEXPAND );
+                }
+
                 else
-                    sizer_item = sizer->Add(1, separator_size, 0, wxEXPAND);
+                {
+                    sizerItem = sizer->Add ( 1, separatorSize, 0, wxEXPAND );
+                }
 
                 // add tool packing
-                if (i+1 < count)
+                if ( i + 1 < count )
                 {
-                    sizer->AddSpacer(m_tool_packing);
+                    sizer->AddSpacer ( m_toolPacking );
                 }
 
                 break;
             }
 
             case wxITEM_SPACER:
-                if (item.proportion > 0)
-                    sizer_item = sizer->AddStretchSpacer(item.proportion);
+                if ( item.m_proportion > 0 )
+                {
+                    sizerItem = sizer->AddStretchSpacer ( item.m_proportion );
+                }
+
                 else
-                    sizer_item = sizer->Add(item.spacer_pixels, 1);
+                {
+                    sizerItem = sizer->Add ( item.m_spacerPixels, 1 );
+                }
+
                 break;
 
             case wxITEM_CONTROL:
             {
-                //sizer_item = sizer->Add(item.window, item.proportion, wxEXPAND);
-                wxSizerItem* ctrl_sizer_item;
+                //sizerItem = sizer->Add(item.m_window, item.m_proportion, wxEXPAND);
+                wxSizerItem * ctrlSizerItem;
 
-                wxBoxSizer* vert_sizer = new wxBoxSizer(wxVERTICAL);
-                vert_sizer->AddStretchSpacer(1);
-                ctrl_sizer_item = vert_sizer->Add(item.window, 0, wxEXPAND);
-                vert_sizer->AddStretchSpacer(1);
-                if ( (m_style & wxAUI_TB_TEXT) &&
-                     m_tool_text_orientation == wxAUI_TBTOOL_TEXT_BOTTOM &&
-                     !item.GetLabel().empty() )
+                wxBoxSizer * vertSizer = new wxBoxSizer ( wxVERTICAL );
+                vertSizer->AddStretchSpacer ( 1 );
+                ctrlSizerItem = vertSizer->Add ( item.m_window, 0, wxEXPAND );
+                vertSizer->AddStretchSpacer ( 1 );
+
+                if ( ( m_style & wxAUI_TB_TEXT ) &&
+                        m_toolTextOrientation == wxAUI_TBTOOL_TEXT_BOTTOM &&
+                        !item.GetLabel().empty() )
                 {
-                    wxSize s = GetLabelSize(item.GetLabel());
-                    vert_sizer->Add(1, s.y);
+                    wxSize s = GetLabelSize ( item.GetLabel() );
+                    vertSizer->Add ( 1, s.y );
                 }
 
 
-                sizer_item = sizer->Add(vert_sizer, item.proportion, wxEXPAND);
+                sizerItem = sizer->Add ( vertSizer, item.m_proportion, wxEXPAND );
 
-                wxSize min_size = item.min_size;
+                wxSize minSize = item.m_minSize;
 
 
                 // proportional items will disappear from the toolbar if
                 // their min width is not set to something really small
-                if (item.proportion != 0)
+                if ( item.m_proportion != 0 )
                 {
-                    min_size.x = 1;
+                    minSize.x = 1;
                 }
 
-                if (min_size.IsFullySpecified())
+                if ( minSize.IsFullySpecified() )
                 {
-                    sizer_item->SetMinSize(min_size);
-                    ctrl_sizer_item->SetMinSize(min_size);
+                    sizerItem->SetMinSize ( minSize );
+                    ctrlSizerItem->SetMinSize ( minSize );
                 }
 
                 // add tool packing
-                if (i+1 < count)
+                if ( i + 1 < count )
                 {
-                    sizer->AddSpacer(m_tool_packing);
+                    sizer->AddSpacer ( m_toolPacking );
                 }
             }
         }
 
-        item.sizer_item = sizer_item;
+        item.m_sizerItem = sizerItem;
     }
 
     // add "right" padding
-    if (m_right_padding > 0)
+    if ( m_rightPadding > 0 )
     {
-        if (horizontal)
-            sizer->Add(m_right_padding, 1);
+        if ( horizontal )
+        {
+            sizer->Add ( m_rightPadding, 1 );
+        }
+
         else
-            sizer->Add(1, m_right_padding);
+        {
+            sizer->Add ( 1, m_rightPadding );
+        }
     }
 
     // add drop down area
-    m_overflow_sizer_item = NULL;
+    m_overflowSizerItem = NULL;
 
-    if (m_style & wxAUI_TB_OVERFLOW)
+    if ( m_style & wxAUI_TB_OVERFLOW )
     {
-        int overflow_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
-        if (overflow_size > 0 && m_overflow_visible)
+        int overflowSize = m_art->GetElementSize ( wxAUI_TBART_OVERFLOW_SIZE );
+
+        if ( overflowSize > 0 && m_overflowVisible )
         {
-            if (horizontal)
-                m_overflow_sizer_item = sizer->Add(overflow_size, 1, 0, wxEXPAND);
+            if ( horizontal )
+            {
+                m_overflowSizerItem = sizer->Add ( overflowSize, 1, 0, wxEXPAND );
+            }
+
             else
-                m_overflow_sizer_item = sizer->Add(1, overflow_size, 0, wxEXPAND);
+            {
+                m_overflowSizerItem = sizer->Add ( 1, overflowSize, 0, wxEXPAND );
+            }
         }
+
         else
         {
-            m_overflow_sizer_item = NULL;
+            m_overflowSizerItem = NULL;
         }
     }
 
 
     // the outside sizer helps us apply the "top" and "bottom" padding
-    wxBoxSizer* outside_sizer = new wxBoxSizer(horizontal ? wxVERTICAL : wxHORIZONTAL);
+    wxBoxSizer * outsideSizer = new wxBoxSizer ( horizontal ? wxVERTICAL : wxHORIZONTAL );
 
     // add "top" padding
-    if (m_top_padding > 0)
+    if ( m_topPadding > 0 )
     {
-        if (horizontal)
-            outside_sizer->Add(1, m_top_padding);
+        if ( horizontal )
+        {
+            outsideSizer->Add ( 1, m_topPadding );
+        }
+
         else
-            outside_sizer->Add(m_top_padding, 1);
+        {
+            outsideSizer->Add ( m_topPadding, 1 );
+        }
     }
 
     // add the sizer that contains all of the toolbar elements
-    outside_sizer->Add(sizer, 1, wxEXPAND);
+    outsideSizer->Add ( sizer, 1, wxEXPAND );
 
     // add "bottom" padding
-    if (m_bottom_padding > 0)
+    if ( m_bottomPadding > 0 )
     {
-        if (horizontal)
-            outside_sizer->Add(1, m_bottom_padding);
+        if ( horizontal )
+        {
+            outsideSizer->Add ( 1, m_bottomPadding );
+        }
+
         else
-            outside_sizer->Add(m_bottom_padding, 1);
+        {
+            outsideSizer->Add ( m_bottomPadding, 1 );
+        }
     }
 
     delete m_sizer; // remove old sizer
-    m_sizer = outside_sizer;
+    m_sizer = outsideSizer;
 
     // calculate the rock-bottom minimum size
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.sizer_item && item.proportion > 0 && item.min_size.IsFullySpecified())
-            item.sizer_item->SetMinSize(0,0);
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_sizerItem && item.m_proportion > 0 && item.m_minSize.IsFullySpecified() )
+        {
+            item.m_sizerItem->SetMinSize ( 0, 0 );
+        }
     }
 
-    m_absolute_min_size = m_sizer->GetMinSize();
+    m_absoluteMinSize = m_sizer->GetMinSize();
 
     // reset the min sizes to what they were
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
-        if (item.sizer_item && item.proportion > 0 && item.min_size.IsFullySpecified())
-            item.sizer_item->SetMinSize(item.min_size);
+        wxAuiToolBarItem & item = m_items.Item ( i );
+
+        if ( item.m_sizerItem && item.m_proportion > 0 && item.m_minSize.IsFullySpecified() )
+        {
+            item.m_sizerItem->SetMinSize ( item.m_minSize );
+        }
     }
 
     // set control size
@@ -2057,23 +2377,26 @@
     m_minWidth = size.x;
     m_minHeight = size.y;
 
-    if ((m_style & wxAUI_TB_NO_AUTORESIZE) == 0)
+    if ( ( m_style & wxAUI_TB_NO_AUTORESIZE ) == 0 )
     {
-        wxSize cur_size = GetClientSize();
-        wxSize new_size = GetMinSize();
-        if (new_size != cur_size)
+        wxSize curSize = GetClientSize();
+        wxSize newSize = GetMinSize();
+
+        if ( newSize != curSize )
         {
-            SetClientSize(new_size);
+            SetClientSize ( newSize );
         }
+
         else
         {
-            m_sizer->SetDimension(0, 0, cur_size.x, cur_size.y);
+            m_sizer->SetDimension ( 0, 0, curSize.x, curSize.y );
         }
     }
+
     else
     {
-        wxSize cur_size = GetClientSize();
-        m_sizer->SetDimension(0, 0, cur_size.x, cur_size.y);
+        wxSize curSize = GetClientSize();
+        m_sizer->SetDimension ( 0, 0, curSize.x, curSize.y );
     }
 
     return true;
@@ -2081,114 +2404,139 @@
 
 int wxAuiToolBar::GetOverflowState() const
 {
-    return m_overflow_state;
+    return m_overflowState;
 }
 
 wxRect wxAuiToolBar::GetOverflowRect() const
 {
-    wxRect cli_rect(wxPoint(0,0), GetClientSize());
-    wxRect overflow_rect = m_overflow_sizer_item->GetRect();
-    int overflow_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
+    wxRect cliRect ( wxPoint ( 0, 0 ), GetClientSize() );
+    wxRect overflowRect = m_overflowSizerItem->GetRect();
+    int overflowSize = m_art->GetElementSize ( wxAUI_TBART_OVERFLOW_SIZE );
 
-    if (m_orientation == wxVERTICAL)
+    if ( m_orientation == wxVERTICAL )
     {
-        overflow_rect.y = cli_rect.height - overflow_size;
-        overflow_rect.x = 0;
-        overflow_rect.width = cli_rect.width;
-        overflow_rect.height = overflow_size;
+        overflowRect.y = cliRect.height - overflowSize;
+        overflowRect.x = 0;
+        overflowRect.width = cliRect.width;
+        overflowRect.height = overflowSize;
     }
+
     else
     {
-        overflow_rect.x = cli_rect.width - overflow_size;
-        overflow_rect.y = 0;
-        overflow_rect.width = overflow_size;
-        overflow_rect.height = cli_rect.height;
+        overflowRect.x = cliRect.width - overflowSize;
+        overflowRect.y = 0;
+        overflowRect.width = overflowSize;
+        overflowRect.height = cliRect.height;
     }
 
-    return overflow_rect;
+    return overflowRect;
 }
 
-wxSize wxAuiToolBar::GetLabelSize(const wxString& label)
+wxSize wxAuiToolBar::GetLabelSize ( const wxString & label )
 {
-    wxClientDC dc(this);
+    wxClientDC dc ( this );
 
     int tx, ty;
-    int text_width = 0, text_height = 0;
+    int textWidth = 0, textHeight = 0;
 
-    dc.SetFont(m_font);
+    dc.SetFont ( m_font );
 
     // get the text height
-    dc.GetTextExtent(wxT("ABCDHgj"), &tx, &text_height);
+    dc.GetTextExtent ( wxT ( "ABCDHgj" ), &tx, &textHeight );
 
     // get the text width
-    dc.GetTextExtent(label, &text_width, &ty);
+    dc.GetTextExtent ( label, &textWidth, &ty );
 
-    return wxSize(text_width, text_height);
+    return wxSize ( textWidth, textHeight );
 }
 
 
 void wxAuiToolBar::DoIdleUpdate()
 {
-    wxEvtHandler* handler = GetEventHandler();
+    wxEvtHandler * handler = GetEventHandler();
 
-    bool need_refresh = false;
+    bool needRefresh = false;
 
     size_t i, count;
-    for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+    for ( i = 0, count = m_items.GetCount(); i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem & item = m_items.Item ( i );
 
-        if (item.toolid == -1)
+        if ( item.m_toolId == -1 )
+        {
             continue;
+        }
 
-        wxUpdateUIEvent evt(item.toolid);
-        evt.SetEventObject(this);
+        wxUpdateUIEvent evt ( item.m_toolId );
+        evt.SetEventObject ( this );
 
-        if (handler->ProcessEvent(evt))
+        if ( handler->ProcessEvent ( evt ) )
         {
-            if (evt.GetSetEnabled())
+            if ( evt.GetSetEnabled() )
             {
-                bool is_enabled;
-                if (item.window)
-                    is_enabled = item.window->IsEnabled();
+                bool isEnabled;
+
+                if ( item.m_window )
+                {
+                    isEnabled = item.m_window->IsEnabled();
+                }
+
                 else
-                    is_enabled = (item.state & wxAUI_BUTTON_STATE_DISABLED) ? false : true;
+                {
+                    isEnabled = ( item.m_state & wxAUI_BUTTON_STATE_DISABLED ) ? false : true;
+                }
 
-                bool new_enabled = evt.GetEnabled();
-                if (new_enabled != is_enabled)
+                bool newEnabled = evt.GetEnabled();
+
+                if ( newEnabled != isEnabled )
                 {
-                    if (item.window)
+                    if ( item.m_window )
                     {
-                        item.window->Enable(new_enabled);
+                        item.m_window->Enable ( newEnabled );
                     }
+
                     else
                     {
-                        if (new_enabled)
-                            item.state &= ~wxAUI_BUTTON_STATE_DISABLED;
+                        if ( newEnabled )
+                        {
+                            item.m_state &= ~wxAUI_BUTTON_STATE_DISABLED;
+                        }
+
                         else
-                            item.state |= wxAUI_BUTTON_STATE_DISABLED;
+                        {
+                            item.m_state |= wxAUI_BUTTON_STATE_DISABLED;
+                        }
                     }
-                    need_refresh = true;
+
+                    needRefresh = true;
                 }
             }
 
-            if (evt.GetSetChecked())
+            if ( evt.GetSetChecked() )
             {
                 // make sure we aren't checking an item that can't be
-                if (item.kind != wxITEM_CHECK && item.kind != wxITEM_RADIO)
+                if ( item.m_kind != wxITEM_CHECK && item.m_kind != wxITEM_RADIO )
+                {
                     continue;
+                }
 
-                bool is_checked = (item.state & wxAUI_BUTTON_STATE_CHECKED) ? true : false;
-                bool new_checked = evt.GetChecked();
+                bool isChecked = ( item.m_state & wxAUI_BUTTON_STATE_CHECKED ) ? true : false;
+                bool newChecked = evt.GetChecked();
 
-                if (new_checked != is_checked)
+                if ( newChecked != isChecked )
                 {
-                    if (new_checked)
-                        item.state |= wxAUI_BUTTON_STATE_CHECKED;
+                    if ( newChecked )
+                    {
+                        item.m_state |= wxAUI_BUTTON_STATE_CHECKED;
+                    }
+
                     else
-                        item.state &= ~wxAUI_BUTTON_STATE_CHECKED;
+                    {
+                        item.m_state &= ~wxAUI_BUTTON_STATE_CHECKED;
+                    }
 
-                    need_refresh = true;
+                    needRefresh = true;
                 }
             }
 
@@ -2196,144 +2544,168 @@
     }
 
 
-    if (need_refresh)
+    if ( needRefresh )
     {
-        Refresh(false);
+        Refresh ( false );
     }
 }
 
 
-void wxAuiToolBar::OnSize(wxSizeEvent& WXUNUSED(evt))
+void wxAuiToolBar::OnSize ( wxSizeEvent & WXUNUSED ( evt ) )
 {
     int x, y;
-    GetClientSize(&x, &y);
+    GetClientSize ( &x, &y );
 
-    if (((x >= y) && m_absolute_min_size.x > x) ||
-        ((y > x) && m_absolute_min_size.y > y))
+    if ( ( ( x >= y ) && m_absoluteMinSize.x > x ) ||
+            ( ( y > x ) && m_absoluteMinSize.y > y ) )
     {
         // hide all flexible items
         size_t i, count;
-        for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+        for ( i = 0, count = m_items.GetCount(); i < count; ++i )
         {
-            wxAuiToolBarItem& item = m_items.Item(i);
-            if (item.sizer_item && item.proportion > 0 && item.sizer_item->IsShown())
+            wxAuiToolBarItem & item = m_items.Item ( i );
+
+            if ( item.m_sizerItem && item.m_proportion > 0 && item.m_sizerItem->IsShown() )
             {
-                item.sizer_item->Show(false);
-                item.sizer_item->SetProportion(0);
+                item.m_sizerItem->Show ( false );
+                item.m_sizerItem->SetProportion ( 0 );
             }
         }
     }
+
     else
     {
         // show all flexible items
         size_t i, count;
-        for (i = 0, count = m_items.GetCount(); i < count; ++i)
+
+        for ( i = 0, count = m_items.GetCount(); i < count; ++i )
         {
-            wxAuiToolBarItem& item = m_items.Item(i);
-            if (item.sizer_item && item.proportion > 0 && !item.sizer_item->IsShown())
+            wxAuiToolBarItem & item = m_items.Item ( i );
+
+            if ( item.m_sizerItem && item.m_proportion > 0 && !item.m_sizerItem->IsShown() )
             {
-                item.sizer_item->Show(true);
-                item.sizer_item->SetProportion(item.proportion);
+                item.m_sizerItem->Show ( true );
+                item.m_sizerItem->SetProportion ( item.m_proportion );
             }
         }
     }
 
-    m_sizer->SetDimension(0, 0, x, y);
+    m_sizer->SetDimension ( 0, 0, x, y );
 
-    Refresh(false);
+    Refresh ( false );
     Update();
 
     // idle events aren't sent while user is resizing frame (why?),
     // but resizing toolbar here causes havoc,
     // so force idle handler to run after size handling complete
-    QueueEvent(new wxIdleEvent);
+    QueueEvent ( new wxIdleEvent );
 }
 
 
 
-void wxAuiToolBar::DoSetSize(int x,
-                             int y,
-                             int width,
-                             int height,
-                             int sizeFlags)
+void wxAuiToolBar::DoSetSize ( int x,
+                               int y,
+                               int width,
+                               int height,
+                               int sizeFlags )
 {
-    wxSize parent_size = GetParent()->GetClientSize();
-    if (x + width > parent_size.x)
-        width = wxMax(0, parent_size.x - x);
-    if (y + height > parent_size.y)
-        height = wxMax(0, parent_size.y - y);
+    wxSize parentSize = GetParent()->GetClientSize();
 
-    wxWindow::DoSetSize(x, y, width, height, sizeFlags);
+    if ( x + width > parentSize.x )
+    {
+        width = wxMax ( 0, parentSize.x - x );
+    }
+
+    if ( y + height > parentSize.y )
+    {
+        height = wxMax ( 0, parentSize.y - y );
+    }
+
+    wxWindow::DoSetSize ( x, y, width, height, sizeFlags );
 }
 
 
-void wxAuiToolBar::OnIdle(wxIdleEvent& evt)
+void wxAuiToolBar::OnIdle ( wxIdleEvent & evt )
 {
     // if orientation doesn't match dock, fix it
-    wxAuiManager* manager = wxAuiManager::GetManager(this);
-    if (manager)
+    wxAuiManager * manager = wxAuiManager::GetManager ( this );
+
+    if ( manager )
     {
-        wxAuiPaneInfo& pane = manager->GetPane(this);
+        wxAuiPaneInfo & pane = manager->GetPane ( this );
         // pane state member is public, so it might have been changed
         // without going through wxPaneInfo::SetFlag() check
         bool ok = pane.IsOk();
-        wxCHECK2_MSG(!ok || IsPaneValid(m_style, pane), ok = false,
-                    "window settings and pane settings are incompatible");
-        if (ok)
+        wxCHECK2_MSG ( !ok || IsPaneValid ( m_style, pane ), ok = false,
+                       "window settings and pane settings are incompatible" );
+
+        if ( ok )
         {
             wxOrientation newOrientation = m_orientation;
-            if (pane.IsDocked())
+
+            if ( pane.IsDocked() )
             {
-                switch (pane.dock_direction)
+                switch ( pane.dockDirection )
                 {
                     case wxAUI_DOCK_TOP:
                     case wxAUI_DOCK_BOTTOM:
                         newOrientation = wxHORIZONTAL;
                         break;
+
                     case wxAUI_DOCK_LEFT:
                     case wxAUI_DOCK_RIGHT:
                         newOrientation = wxVERTICAL;
                         break;
+
                     default:
-                        wxFAIL_MSG("invalid dock location value");
+                        wxFAIL_MSG ( "invalid dock location value" );
                 }
             }
-            else if (pane.IsResizable() &&
-                    GetOrientation(m_style) == wxBOTH)
+
+            else if ( pane.IsResizable() &&
+                      GetOrientation ( m_style ) == wxBOTH )
             {
                 // changing orientation in OnSize causes havoc
                 int x, y;
-                GetClientSize(&x, &y);
+                GetClientSize ( &x, &y );
 
-                if (x > y)
+                if ( x > y )
                 {
                     newOrientation = wxHORIZONTAL;
                 }
+
                 else
                 {
                     newOrientation = wxVERTICAL;
                 }
             }
-            if (newOrientation != m_orientation)
+
+            if ( newOrientation != m_orientation )
             {
-                SetOrientation(newOrientation);
+                SetOrientation ( newOrientation );
                 Realize();
-                if (newOrientation == wxHORIZONTAL)
+
+                if ( newOrientation == wxHORIZONTAL )
                 {
-                    pane.best_size = GetHintSize(wxAUI_DOCK_TOP);
+                    pane.bestSize = GetHintSize ( wxAUI_DOCK_TOP );
                 }
+
                 else
                 {
-                    pane.best_size = GetHintSize(wxAUI_DOCK_LEFT);
+                    pane.bestSize = GetHintSize ( wxAUI_DOCK_LEFT );
                 }
-                if (pane.IsDocked())
+
+                if ( pane.IsDocked() )
                 {
-                    pane.floating_size = wxDefaultSize;
+                    pane.floatingSize = wxDefaultSize;
                 }
+
                 else
                 {
-                    SetSize(GetParent()->GetClientSize());
+                    SetSize ( GetParent()->GetClientSize() );
                 }
+
                 manager->Update();
             }
         }
@@ -2343,186 +2715,235 @@
     evt.Skip();
 }
 
-void wxAuiToolBar::OnPaint(wxPaintEvent& WXUNUSED(evt))
+void wxAuiToolBar::OnPaint ( wxPaintEvent & WXUNUSED ( evt ) )
 {
-    wxAutoBufferedPaintDC dc(this);
-    wxRect cli_rect(wxPoint(0,0), GetClientSize());
+    wxAutoBufferedPaintDC dc ( this );
+    wxRect cliRect ( wxPoint ( 0, 0 ), GetClientSize() );
 
 
     bool horizontal = m_orientation == wxHORIZONTAL;
 
 
-    m_art->DrawBackground(dc, this, cli_rect);
+    m_art->DrawBackground ( dc, this, cliRect );
 
-    int gripper_size = m_art->GetElementSize(wxAUI_TBART_GRIPPER_SIZE);
-    int dropdown_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
+    int gripperSize = m_art->GetElementSize ( wxAUI_TBART_GRIPPER_SIZE );
+    int dropdownSize = m_art->GetElementSize ( wxAUI_TBART_OVERFLOW_SIZE );
 
     // paint the gripper
-    if (gripper_size > 0 && m_gripper_sizer_item)
+    if ( gripperSize > 0 && m_gripperSizerItem )
     {
-        wxRect gripper_rect = m_gripper_sizer_item->GetRect();
-        if (horizontal)
-            gripper_rect.width = gripper_size;
+        wxRect gripperRect = m_gripperSizerItem->GetRect();
+
+        if ( horizontal )
+        {
+            gripperRect.width = gripperSize;
+        }
+
         else
-            gripper_rect.height = gripper_size;
-        m_art->DrawGripper(dc, this, gripper_rect);
+        {
+            gripperRect.height = gripperSize;
+        }
+
+        m_art->DrawGripper ( dc, this, gripperRect );
     }
 
     // calculated how far we can draw items
-    int last_extent;
-    if (horizontal)
-        last_extent = cli_rect.width;
+    int lastExtent;
+
+    if ( horizontal )
+    {
+        lastExtent = cliRect.width;
+    }
+
     else
-        last_extent = cli_rect.height;
-    if (m_overflow_visible)
-        last_extent -= dropdown_size;
+    {
+        lastExtent = cliRect.height;
+    }
 
+    if ( m_overflowVisible )
+    {
+        lastExtent -= dropdownSize;
+    }
+
     // paint each individual tool
     size_t i, count = m_items.GetCount();
-    for (i = 0; i < count; ++i)
+
+    for ( i = 0; i < count; ++i )
     {
-        wxAuiToolBarItem& item = m_items.Item(i);
+        wxAuiToolBarItem & item = m_items.Item ( i );
 
-        if (!item.sizer_item)
+        if ( !item.m_sizerItem )
+        {
             continue;
+        }
 
-        wxRect item_rect = item.sizer_item->GetRect();
+        wxRect itemRect = item.m_sizerItem->GetRect();
 
 
-        if ((horizontal  && item_rect.x + item_rect.width >= last_extent) ||
-            (!horizontal && item_rect.y + item_rect.height >= last_extent))
+        if ( ( horizontal  && itemRect.x + itemRect.width >= lastExtent ) ||
+                ( !horizontal && itemRect.y + itemRect.height >= lastExtent ) )
         {
             break;
         }
 
-        if (item.kind == wxITEM_SEPARATOR)
+        if ( item.m_kind == wxITEM_SEPARATOR )
         {
             // draw a separator
-            m_art->DrawSeparator(dc, this, item_rect);
+            m_art->DrawSeparator ( dc, this, itemRect );
         }
-        else if (item.kind == wxITEM_LABEL)
+
+        else if ( item.m_kind == wxITEM_LABEL )
         {
             // draw a text label only
-            m_art->DrawLabel(dc, this, item, item_rect);
+            m_art->DrawLabel ( dc, this, item, itemRect );
         }
-        else if (item.kind == wxITEM_NORMAL)
+
+        else if ( item.m_kind == wxITEM_NORMAL )
         {
             // draw a regular button or dropdown button
-            if (!item.dropdown)
-                m_art->DrawButton(dc, this, item, item_rect);
+            if ( !item.m_dropDown )
+            {
+                m_art->DrawButton ( dc, this, item, itemRect );
+            }
+
             else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
+            {
+                m_art->DrawDropDownButton ( dc, this, item, itemRect );
+            }
         }
-        else if (item.kind == wxITEM_CHECK)
+
+        else if ( item.m_kind == wxITEM_CHECK )
         {
             // draw either a regular or dropdown toggle button
-            if (!item.dropdown)
-                m_art->DrawButton(dc, this, item, item_rect);
+            if ( !item.m_dropDown )
+            {
+                m_art->DrawButton ( dc, this, item, itemRect );
+            }
+
             else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
+            {
+                m_art->DrawDropDownButton ( dc, this, item, itemRect );
+            }
         }
-        else if (item.kind == wxITEM_RADIO)
+
+        else if ( item.m_kind == wxITEM_RADIO )
         {
             // draw a toggle button
-            m_art->DrawButton(dc, this, item, item_rect);
+            m_art->DrawButton ( dc, this, item, itemRect );
         }
-        else if (item.kind == wxITEM_CONTROL)
+
+        else if ( item.m_kind == wxITEM_CONTROL )
         {
             // draw the control's label
-            m_art->DrawControlLabel(dc, this, item, item_rect);
+            m_art->DrawControlLabel ( dc, this, item, itemRect );
         }
 
         // fire a signal to see if the item wants to be custom-rendered
-        OnCustomRender(dc, item, item_rect);
+        OnCustomRender ( dc, item, itemRect );
     }
 
     // paint the overflow button
-    if (dropdown_size > 0 && m_overflow_sizer_item)
+    if ( dropdownSize > 0 && m_overflowSizerItem )
     {
-        wxRect dropdown_rect = GetOverflowRect();
-        m_art->DrawOverflowButton(dc, this, dropdown_rect, m_overflow_state);
+        wxRect dropdownRect = GetOverflowRect();
+        m_art->DrawOverflowButton ( dc, this, dropdownRect, m_overflowState );
     }
 }
 
-void wxAuiToolBar::OnEraseBackground(wxEraseEvent& WXUNUSED(evt))
+void wxAuiToolBar::OnEraseBackground ( wxEraseEvent & WXUNUSED ( evt ) )
 {
     // empty
 }
 
-void wxAuiToolBar::OnLeftDown(wxMouseEvent& evt)
+void wxAuiToolBar::OnLeftDown ( wxMouseEvent & evt )
 {
-    wxRect cli_rect(wxPoint(0,0), GetClientSize());
+    wxRect cliRect ( wxPoint ( 0, 0 ), GetClientSize() );
 
-    if (m_gripper_sizer_item)
+    if ( m_gripperSizerItem )
     {
-        wxRect gripper_rect = m_gripper_sizer_item->GetRect();
-        if (gripper_rect.Contains(evt.GetX(), evt.GetY()))
+        wxRect gripperRect = m_gripperSizerItem->GetRect();
+
+        if ( gripperRect.Contains ( evt.GetX(), evt.GetY() ) )
         {
             // find aui manager
-            wxAuiManager* manager = wxAuiManager::GetManager(this);
-            if (!manager)
+            wxAuiManager * manager = wxAuiManager::GetManager ( this );
+
+            if ( !manager )
+            {
                 return;
+            }
 
-            int x_drag_offset = evt.GetX() - gripper_rect.GetX();
-            int y_drag_offset = evt.GetY() - gripper_rect.GetY();
+            int xDragOffset = evt.GetX() - gripperRect.GetX();
+            int yDragOffset = evt.GetY() - gripperRect.GetY();
 
             // gripper was clicked
-            manager->StartPaneDrag(this, wxPoint(x_drag_offset, y_drag_offset));
+            manager->StartPaneDrag ( this, wxPoint ( xDragOffset, yDragOffset ) );
             return;
         }
     }
 
-    if (m_overflow_sizer_item)
+    if ( m_overflowSizerItem )
     {
-        wxRect overflow_rect = GetOverflowRect();
+        wxRect overflowRect = GetOverflowRect();
 
-        if (m_art &&
-            m_overflow_visible &&
-            overflow_rect.Contains(evt.m_x, evt.m_y))
+        if ( m_art &&
+                m_overflowVisible &&
+                overflowRect.Contains ( evt.m_x, evt.m_y ) )
         {
-            wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, -1);
-            e.SetEventObject(this);
-            e.SetToolId(-1);
-            e.SetClickPoint(wxPoint(evt.GetX(), evt.GetY()));
-            bool processed = GetEventHandler()->ProcessEvent(e);
+            wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, -1 );
+            e.SetEventObject ( this );
+            e.SetToolId ( -1 );
+            e.SetClickPoint ( wxPoint ( evt.GetX(), evt.GetY() ) );
+            bool processed = GetEventHandler()->ProcessEvent ( e );
 
-            if (processed)
+            if ( processed )
             {
                 DoIdleUpdate();
             }
+
             else
             {
                 size_t i, count;
-                wxAuiToolBarItemArray overflow_items;
+                wxAuiToolBarItemArray overflowItems;
 
 
                 // add custom overflow prepend items, if any
-                count = m_custom_overflow_prepend.GetCount();
-                for (i = 0; i < count; ++i)
-                    overflow_items.Add(m_custom_overflow_prepend[i]);
+                count = m_customOverflowPrepend.GetCount();
 
+                for ( i = 0; i < count; ++i )
+                {
+                    overflowItems.Add ( m_customOverflowPrepend[i] );
+                }
+
                 // only show items that don't fit in the dropdown
                 count = m_items.GetCount();
-                for (i = 0; i < count; ++i)
+
+                for ( i = 0; i < count; ++i )
                 {
-                    if (!GetToolFitsByIndex(i))
-                        overflow_items.Add(m_items[i]);
+                    if ( !GetToolFitsByIndex ( i ) )
+                    {
+                        overflowItems.Add ( m_items[i] );
+                    }
                 }
 
                 // add custom overflow append items, if any
-                count = m_custom_overflow_append.GetCount();
-                for (i = 0; i < count; ++i)
-                    overflow_items.Add(m_custom_overflow_append[i]);
+                count = m_customOverflowAppend.GetCount();
 
-                int res = m_art->ShowDropDown(this, overflow_items);
-                m_overflow_state = 0;
-                Refresh(false);
-                if (res != -1)
+                for ( i = 0; i < count; ++i )
                 {
-                    wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, res);
-                    e.SetEventObject(this);
-                    GetParent()->GetEventHandler()->ProcessEvent(e);
+                    overflowItems.Add ( m_customOverflowAppend[i] );
                 }
+
+                int res = m_art->ShowDropDown ( this, overflowItems );
+                m_overflowState = 0;
+                Refresh ( false );
+
+                if ( res != -1 )
+                {
+                    wxCommandEvent e ( wxEVT_COMMAND_MENU_SELECTED, res );
+                    e.SetEventObject ( this );
+                    GetParent()->GetEventHandler()->ProcessEvent ( e );
+                }
             }
 
             return;
@@ -2530,66 +2951,71 @@
     }
 
     m_dragging = false;
-    m_action_pos = wxPoint(evt.GetX(), evt.GetY());
-    m_action_item = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionPos = wxPoint ( evt.GetX(), evt.GetY() );
+    m_actionItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-    if (m_action_item)
+    if ( m_actionItem )
     {
-        if (m_action_item->state & wxAUI_BUTTON_STATE_DISABLED)
+        if ( m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED )
         {
-            m_action_pos = wxPoint(-1,-1);
-            m_action_item = NULL;
+            m_actionPos = wxPoint ( -1, -1 );
+            m_actionItem = NULL;
             return;
         }
 
         UnsetToolTip();
 
         // fire the tool dropdown event
-        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, m_action_item->toolid);
-        e.SetEventObject(this);
-        e.SetToolId(m_action_item->toolid);
+        wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, m_actionItem->m_toolId );
+        e.SetEventObject ( this );
+        e.SetToolId ( m_actionItem->m_toolId );
 
-        int mouse_x = evt.GetX();
-        wxRect rect = m_action_item->sizer_item->GetRect();
-        const bool dropDownHit = m_action_item->dropdown &&
-                                 mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
-                                 mouse_x < (rect.x+rect.width);
-        e.SetDropDownClicked(dropDownHit);
+        int mouseX = evt.GetX();
+        wxRect rect = m_actionItem->m_sizerItem->GetRect();
+        const bool dropDownHit = m_actionItem->m_dropDown &&
+                                 mouseX >= ( rect.x + rect.width - BUTTON_DROPDOWN_WIDTH - 1 ) &&
+                                 mouseX < ( rect.x + rect.width );
+        e.SetDropDownClicked ( dropDownHit );
 
-        e.SetClickPoint(evt.GetPosition());
-        e.SetItemRect(rect);
+        e.SetClickPoint ( evt.GetPosition() );
+        e.SetItemRect ( rect );
 
         // we only set the 'pressed button' state if we hit the actual button
         // and not just the drop-down
-        SetPressedItem(dropDownHit ? 0 : m_action_item);
+        SetPressedItem ( dropDownHit ? 0 : m_actionItem );
 
-        if(dropDownHit)
+        if ( dropDownHit )
         {
-            m_action_pos = wxPoint(-1,-1);
-            m_action_item = NULL;
+            m_actionPos = wxPoint ( -1, -1 );
+            m_actionItem = NULL;
         }
 
-        if(!GetEventHandler()->ProcessEvent(e) || e.GetSkipped())
+        if ( !GetEventHandler()->ProcessEvent ( e ) || e.GetSkipped() )
+        {
             CaptureMouse();
+        }
 
         DoIdleUpdate();
     }
 }
 
-void wxAuiToolBar::OnLeftUp(wxMouseEvent& evt)
+void wxAuiToolBar::OnLeftUp ( wxMouseEvent & evt )
 {
-    if (!HasCapture())
+    if ( !HasCapture() )
+    {
         return;
+    }
 
-    SetPressedItem(NULL);
+    SetPressedItem ( NULL );
 
-    wxAuiToolBarItem* hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
-    if (hit_item && !(hit_item->state & wxAUI_BUTTON_STATE_DISABLED))
+    wxAuiToolBarItem * hitItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
+
+    if ( hitItem && ! ( hitItem->m_state & wxAUI_BUTTON_STATE_DISABLED ) )
     {
-        SetHoverItem(hit_item);
+        SetHoverItem ( hitItem );
     }
 
-    if (m_dragging)
+    if ( m_dragging )
     {
         // TODO: it would make sense to send out an 'END_DRAG' event here,
         // otherwise a client would never know what to do with the 'BEGIN_DRAG'
@@ -2599,29 +3025,30 @@
         // tracking variables
         ReleaseMouse();
     }
+
     else
     {
-        wxAuiToolBarItem* hit_item;
-        hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
+        wxAuiToolBarItem * hitItem;
+        hitItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-        if (m_action_item && hit_item == m_action_item)
+        if ( m_actionItem && hitItem == m_actionItem )
         {
             UnsetToolTip();
 
-            wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->toolid);
-            e.SetEventObject(this);
+            wxCommandEvent e ( wxEVT_COMMAND_MENU_SELECTED, m_actionItem->m_toolId );
+            e.SetEventObject ( this );
 
-            if (hit_item->kind == wxITEM_CHECK || hit_item->kind == wxITEM_RADIO)
+            if ( hitItem->m_kind == wxITEM_CHECK || hitItem->m_kind == wxITEM_RADIO )
             {
-                const bool toggle = !(m_action_item->state & wxAUI_BUTTON_STATE_CHECKED);
+                const bool toggle = ! ( m_actionItem->m_state & wxAUI_BUTTON_STATE_CHECKED );
 
-                ToggleTool(m_action_item->toolid, toggle);
+                ToggleTool ( m_actionItem->m_toolId, toggle );
 
                 // repaint immediately
-                Refresh(false);
+                Refresh ( false );
                 Update();
 
-                e.SetInt(toggle);
+                e.SetInt ( toggle );
             }
 
             // we have to release the mouse *before* sending the event, because
@@ -2630,117 +3057,129 @@
 
             ReleaseMouse();
 
-            GetEventHandler()->ProcessEvent(e);
+            GetEventHandler()->ProcessEvent ( e );
             DoIdleUpdate();
         }
+
         else
+        {
             ReleaseMouse();
+        }
     }
 }
 
-void wxAuiToolBar::OnRightDown(wxMouseEvent& evt)
+void wxAuiToolBar::OnRightDown ( wxMouseEvent & evt )
 {
-    wxRect cli_rect(wxPoint(0,0), GetClientSize());
+    wxRect cliRect ( wxPoint ( 0, 0 ), GetClientSize() );
 
-    if (m_gripper_sizer_item)
+    if ( m_gripperSizerItem )
     {
-        wxRect gripper_rect = m_gripper_sizer_item->GetRect();
-        if (gripper_rect.Contains(evt.GetX(), evt.GetY()))
+        wxRect gripperRect = m_gripperSizerItem->GetRect();
+
+        if ( gripperRect.Contains ( evt.GetX(), evt.GetY() ) )
+        {
             return;
+        }
     }
 
-    if (m_overflow_sizer_item)
+    if ( m_overflowSizerItem )
     {
-        int dropdown_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
-        if (dropdown_size > 0 &&
-            evt.m_x > cli_rect.width - dropdown_size &&
-            evt.m_y >= 0 &&
-            evt.m_y < cli_rect.height &&
-            m_art)
+        int dropdownSize = m_art->GetElementSize ( wxAUI_TBART_OVERFLOW_SIZE );
+
+        if ( dropdownSize > 0 &&
+                evt.m_x > cliRect.width - dropdownSize &&
+                evt.m_y >= 0 &&
+                evt.m_y < cliRect.height &&
+                m_art )
         {
             return;
         }
     }
 
-    m_action_pos = wxPoint(evt.GetX(), evt.GetY());
-    m_action_item = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionPos = wxPoint ( evt.GetX(), evt.GetY() );
+    m_actionItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-    if (m_action_item && m_action_item->state & wxAUI_BUTTON_STATE_DISABLED)
+    if ( m_actionItem && m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED )
     {
-        m_action_pos = wxPoint(-1,-1);
-        m_action_item = NULL;
+        m_actionPos = wxPoint ( -1, -1 );
+        m_actionItem = NULL;
         return;
     }
 
     UnsetToolTip();
 }
 
-void wxAuiToolBar::OnRightUp(wxMouseEvent& evt)
+void wxAuiToolBar::OnRightUp ( wxMouseEvent & evt )
 {
-    wxAuiToolBarItem* hit_item;
-    hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
+    wxAuiToolBarItem * hitItem;
+    hitItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-    if (m_action_item && hit_item == m_action_item)
+    if ( m_actionItem && hitItem == m_actionItem )
     {
-        if (hit_item->kind == wxITEM_NORMAL)
+        if ( hitItem->m_kind == wxITEM_NORMAL )
         {
-            wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, m_action_item->toolid);
-            e.SetEventObject(this);
-            e.SetToolId(m_action_item->toolid);
-            e.SetClickPoint(m_action_pos);
-            GetEventHandler()->ProcessEvent(e);
+            wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, m_actionItem->m_toolId );
+            e.SetEventObject ( this );
+            e.SetToolId ( m_actionItem->m_toolId );
+            e.SetClickPoint ( m_actionPos );
+            GetEventHandler()->ProcessEvent ( e );
             DoIdleUpdate();
         }
     }
+
     else
     {
         // right-clicked on the invalid area of the toolbar
-        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, -1);
-        e.SetEventObject(this);
-        e.SetToolId(-1);
-        e.SetClickPoint(m_action_pos);
-        GetEventHandler()->ProcessEvent(e);
+        wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, -1 );
+        e.SetEventObject ( this );
+        e.SetToolId ( -1 );
+        e.SetClickPoint ( m_actionPos );
+        GetEventHandler()->ProcessEvent ( e );
         DoIdleUpdate();
     }
 
     // reset member variables
-    m_action_pos = wxPoint(-1,-1);
-    m_action_item = NULL;
+    m_actionPos = wxPoint ( -1, -1 );
+    m_actionItem = NULL;
 }
 
-void wxAuiToolBar::OnMiddleDown(wxMouseEvent& evt)
+void wxAuiToolBar::OnMiddleDown ( wxMouseEvent & evt )
 {
-    wxRect cli_rect(wxPoint(0,0), GetClientSize());
+    wxRect cliRect ( wxPoint ( 0, 0 ), GetClientSize() );
 
-    if (m_gripper_sizer_item)
+    if ( m_gripperSizerItem )
     {
-        wxRect gripper_rect = m_gripper_sizer_item->GetRect();
-        if (gripper_rect.Contains(evt.GetX(), evt.GetY()))
+        wxRect gripperRect = m_gripperSizerItem->GetRect();
+
+        if ( gripperRect.Contains ( evt.GetX(), evt.GetY() ) )
+        {
             return;
+        }
     }
 
-    if (m_overflow_sizer_item)
+    if ( m_overflowSizerItem )
     {
-        int dropdown_size = m_art->GetElementSize(wxAUI_TBART_OVERFLOW_SIZE);
-        if (dropdown_size > 0 &&
-            evt.m_x > cli_rect.width - dropdown_size &&
-            evt.m_y >= 0 &&
-            evt.m_y < cli_rect.height &&
-            m_art)
+        int dropdownSize = m_art->GetElementSize ( wxAUI_TBART_OVERFLOW_SIZE );
+
+        if ( dropdownSize > 0 &&
+                evt.m_x > cliRect.width - dropdownSize &&
+                evt.m_y >= 0 &&
+                evt.m_y < cliRect.height &&
+                m_art )
         {
             return;
         }
     }
 
-    m_action_pos = wxPoint(evt.GetX(), evt.GetY());
-    m_action_item = FindToolByPosition(evt.GetX(), evt.GetY());
+    m_actionPos = wxPoint ( evt.GetX(), evt.GetY() );
+    m_actionItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-    if (m_action_item)
+    if ( m_actionItem )
     {
-        if (m_action_item->state & wxAUI_BUTTON_STATE_DISABLED)
+        if ( m_actionItem->m_state & wxAUI_BUTTON_STATE_DISABLED )
         {
-            m_action_pos = wxPoint(-1,-1);
-            m_action_item = NULL;
+            m_actionPos = wxPoint ( -1, -1 );
+            m_actionItem = NULL;
             return;
         }
     }
@@ -2748,90 +3187,109 @@
     UnsetToolTip();
 }
 
-void wxAuiToolBar::OnMiddleUp(wxMouseEvent& evt)
+void wxAuiToolBar::OnMiddleUp ( wxMouseEvent & evt )
 {
-    wxAuiToolBarItem* hit_item;
-    hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
+    wxAuiToolBarItem * hitItem;
+    hitItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
 
-    if (m_action_item && hit_item == m_action_item)
+    if ( m_actionItem && hitItem == m_actionItem )
     {
-        if (hit_item->kind == wxITEM_NORMAL)
+        if ( hitItem->m_kind == wxITEM_NORMAL )
         {
-            wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, m_action_item->toolid);
-            e.SetEventObject(this);
-            e.SetToolId(m_action_item->toolid);
-            e.SetClickPoint(m_action_pos);
-            GetEventHandler()->ProcessEvent(e);
+            wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, m_actionItem->m_toolId );
+            e.SetEventObject ( this );
+            e.SetToolId ( m_actionItem->m_toolId );
+            e.SetClickPoint ( m_actionPos );
+            GetEventHandler()->ProcessEvent ( e );
             DoIdleUpdate();
         }
     }
 
     // reset member variables
-    m_action_pos = wxPoint(-1,-1);
-    m_action_item = NULL;
+    m_actionPos = wxPoint ( -1, -1 );
+    m_actionItem = NULL;
 }
 
-void wxAuiToolBar::OnMotion(wxMouseEvent& evt)
+void wxAuiToolBar::OnMotion ( wxMouseEvent & evt )
 {
-    const bool button_pressed = HasCapture();
+    const bool buttonPressed = HasCapture();
 
     // start a drag event
-    if (!m_dragging && button_pressed &&
-        abs(evt.GetX() - m_action_pos.x) + abs(evt.GetY() - m_action_pos.y) > 5)
+    if ( !m_dragging && buttonPressed &&
+            abs ( evt.GetX() - m_actionPos.x ) + abs ( evt.GetY() - m_actionPos.y ) > 5 )
     {
         // TODO: sending this event only makes sense if there is an 'END_DRAG'
         // event sent sometime in the future (see OnLeftUp())
-        wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, GetId());
-        e.SetEventObject(this);
-        e.SetToolId(m_action_item->toolid);
-        m_dragging = GetEventHandler()->ProcessEvent(e) && !e.GetSkipped();
+        wxAuiToolBarEvent e ( wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, GetId() );
+        e.SetEventObject ( this );
+        e.SetToolId ( m_actionItem->m_toolId );
+        m_dragging = GetEventHandler()->ProcessEvent ( e ) && !e.GetSkipped();
 
         DoIdleUpdate();
     }
 
-    if(m_dragging)
+    if ( m_dragging )
+    {
         return;
+    }
 
-    wxAuiToolBarItem* hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
-    if(button_pressed)
+    wxAuiToolBarItem * hitItem = FindToolByPosition ( evt.GetX(), evt.GetY() );
+
+    if ( buttonPressed )
     {
         // if we have a button pressed we want it to be shown in 'depressed'
         // state unless we move the mouse outside the button, then we want it
         // to show as just 'highlighted'
-        if (hit_item == m_action_item)
-            SetPressedItem(m_action_item);
+        if ( hitItem == m_actionItem )
+        {
+            SetPressedItem ( m_actionItem );
+        }
+
         else
         {
-            SetPressedItem(NULL);
-            SetHoverItem(m_action_item);
+            SetPressedItem ( NULL );
+            SetHoverItem ( m_actionItem );
         }
     }
+
     else
     {
-        if (hit_item && (hit_item->state & wxAUI_BUTTON_STATE_DISABLED))
-            SetHoverItem(NULL);
+        if ( hitItem && ( hitItem->m_state & wxAUI_BUTTON_STATE_DISABLED ) )
+        {
+            SetHoverItem ( NULL );
+        }
+
         else
-            SetHoverItem(hit_item);
+        {
+            SetHoverItem ( hitItem );
+        }
 
         // tooltips handling
-        wxAuiToolBarItem* packing_hit_item;
-        packing_hit_item = FindToolByPositionWithPacking(evt.GetX(), evt.GetY());
-        if (packing_hit_item)
+        wxAuiToolBarItem * packingHitItem;
+        packingHitItem = FindToolByPositionWithPacking ( evt.GetX(), evt.GetY() );
+
+        if ( packingHitItem )
         {
-            if (packing_hit_item != m_tip_item)
+            if ( packingHitItem != m_tipItem )
             {
-                m_tip_item = packing_hit_item;
+                m_tipItem = packingHitItem;
 
-                if ( !packing_hit_item->short_help.empty() )
-                    SetToolTip(packing_hit_item->short_help);
+                if ( !packingHitItem->m_shortHelp.empty() )
+                {
+                    SetToolTip ( packingHitItem->m_shortHelp );
+                }
+
                 else
+                {
                     UnsetToolTip();
+                }
             }
         }
+
         else
         {
             UnsetToolTip();
-            m_tip_item = NULL;
+            m_tipItem = NULL;
         }
 
         // figure out the dropdown button state (are we hovering or pressing it?)
@@ -2842,21 +3300,21 @@
 void wxAuiToolBar::DoResetMouseState()
 {
     RefreshOverflowState();
-    SetHoverItem(NULL);
-    SetPressedItem(NULL);
+    SetHoverItem ( NULL );
+    SetPressedItem ( NULL );
 
-    m_tip_item = NULL;
+    m_tipItem = NULL;
 
     // we have to reset those here, because the mouse-up handlers which do
     // it usually won't be called if we let go of a mouse button while we
     // are outside of the window
-    m_action_pos = wxPoint(-1,-1);
-    m_action_item = NULL;
+    m_actionPos = wxPoint ( -1, -1 );
+    m_actionItem = NULL;
 }
 
-void wxAuiToolBar::OnLeaveWindow(wxMouseEvent& evt)
+void wxAuiToolBar::OnLeaveWindow ( wxMouseEvent & evt )
 {
-    if(HasCapture())
+    if ( HasCapture() )
     {
         evt.Skip();
         return;
@@ -2865,27 +3323,28 @@
     DoResetMouseState();
 }
 
-void wxAuiToolBar::OnCaptureLost(wxMouseCaptureLostEvent& WXUNUSED(evt))
+void wxAuiToolBar::OnCaptureLost ( wxMouseCaptureLostEvent & WXUNUSED ( evt ) )
 {
     m_dragging = false;
 
     DoResetMouseState();
 }
 
-void wxAuiToolBar::OnSetCursor(wxSetCursorEvent& evt)
+void wxAuiToolBar::OnSetCursor ( wxSetCursorEvent & evt )
 {
     wxCursor cursor = wxNullCursor;
 
-    if (m_gripper_sizer_item)
+    if ( m_gripperSizerItem )
     {
-        wxRect gripper_rect = m_gripper_sizer_item->GetRect();
-        if (gripper_rect.Contains(evt.GetX(), evt.GetY()))
+        wxRect gripperRect = m_gripperSizerItem->GetRect();
+
+        if ( gripperRect.Contains ( evt.GetX(), evt.GetY() ) )
         {
-            cursor = wxCursor(wxCURSOR_SIZING);
+            cursor = wxCursor ( wxCURSOR_SIZING );
         }
     }
 
-    evt.SetCursor(cursor);
+    evt.SetCursor ( cursor );
 }
 
 

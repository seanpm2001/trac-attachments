Index: include/wx/aui/tabmdi.h
===================================================================
--- include/wx/aui/tabmdi.h	(revision 69060)
+++ include/wx/aui/tabmdi.h	(working copy)
@@ -40,76 +40,76 @@
 {
 public:
     wxAuiMDIParentFrame();
-    wxAuiMDIParentFrame(wxWindow *parent,
-                        wxWindowID winid,
-                        const wxString& title,
-                        const wxPoint& pos = wxDefaultPosition,
-                        const wxSize& size = wxDefaultSize,
-                        long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
-                        const wxString& name = wxFrameNameStr);
+    wxAuiMDIParentFrame ( wxWindow * parent,
+                          wxWindowID winid,
+                          const wxString & title,
+                          const wxPoint & pos = wxDefaultPosition,
+                          const wxSize & size = wxDefaultSize,
+                          long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                          const wxString & name = wxFrameNameStr );
 
     ~wxAuiMDIParentFrame();
 
-    bool Create(wxWindow *parent,
-                wxWindowID winid,
-                const wxString& title,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
-                const wxString& name = wxFrameNameStr );
+    bool Create ( wxWindow * parent,
+                  wxWindowID winid,
+                  const wxString & title,
+                  const wxPoint & pos = wxDefaultPosition,
+                  const wxSize & size = wxDefaultSize,
+                  long style = wxDEFAULT_FRAME_STYLE | wxVSCROLL | wxHSCROLL,
+                  const wxString & name = wxFrameNameStr );
 
-    void SetArtProvider(wxAuiTabArt* provider);
-    wxAuiTabArt* GetArtProvider();
-    wxAuiNotebook* GetNotebook() const;
+    void SetArtProvider ( wxAuiTabArt * provider );
+    wxAuiTabArt * GetArtProvider();
+    wxAuiNotebook * GetNotebook() const;
 
 #if wxUSE_MENUS
-    wxMenu* GetWindowMenu() const { return m_pWindowMenu; }
-    void SetWindowMenu(wxMenu* pMenu);
+    wxMenu * GetWindowMenu() const { return m_pWindowMenu; }
+    void SetWindowMenu ( wxMenu * pMenu );
 
-    virtual void SetMenuBar(wxMenuBar *pMenuBar);
+    virtual void SetMenuBar ( wxMenuBar * pMenuBar );
 #endif // wxUSE_MENUS
 
-    void SetChildMenuBar(wxAuiMDIChildFrame *pChild);
+    void SetChildMenuBar ( wxAuiMDIChildFrame * pChild );
 
-    wxAuiMDIChildFrame *GetActiveChild() const;
-    void SetActiveChild(wxAuiMDIChildFrame* pChildFrame);
+    wxAuiMDIChildFrame * GetActiveChild() const;
+    void SetActiveChild ( wxAuiMDIChildFrame * pChildFrame );
 
-    wxAuiMDIClientWindow *GetClientWindow() const;
-    virtual wxAuiMDIClientWindow *OnCreateClient();
+    wxAuiMDIClientWindow * GetClientWindow() const;
+    virtual wxAuiMDIClientWindow * OnCreateClient();
 
     virtual void Cascade() { /* Has no effect */ }
-    virtual void Tile(wxOrientation orient = wxHORIZONTAL);
+    virtual void Tile ( wxOrientation orient = wxHORIZONTAL );
     virtual void ArrangeIcons() { /* Has no effect */ }
     virtual void ActivateNext();
     virtual void ActivatePrevious();
 
 protected:
-    wxAuiMDIClientWindow*   m_pClientWindow;
-    wxAuiMDIChildFrame*     m_pActiveChild;
-    wxEvent*                m_pLastEvt;
+    wxAuiMDIClientWindow  * m_pClientWindow;
+    wxAuiMDIChildFrame   *  m_pActiveChild;
+    wxEvent        *        m_pLastEvt;
 
 #if wxUSE_MENUS
-    wxMenu              *m_pWindowMenu;
-    wxMenuBar           *m_pMyMenuBar;
+    wxMenu       *       m_pWindowMenu;
+    wxMenuBar      *     m_pMyMenuBar;
 #endif // wxUSE_MENUS
 
 protected:
     void Init();
 
 #if wxUSE_MENUS
-    void RemoveWindowMenu(wxMenuBar *pMenuBar);
-    void AddWindowMenu(wxMenuBar *pMenuBar);
+    void RemoveWindowMenu ( wxMenuBar * pMenuBar );
+    void AddWindowMenu ( wxMenuBar * pMenuBar );
 
-    void DoHandleMenu(wxCommandEvent &event);
+    void DoHandleMenu ( wxCommandEvent & event );
 #endif // wxUSE_MENUS
 
-    virtual bool ProcessEvent(wxEvent& event);
+    virtual bool ProcessEvent ( wxEvent & event );
 
-    virtual void DoGetClientSize(int *width, int *height) const;
+    virtual void DoGetClientSize ( int * width, int * height ) const;
 
 private:
     DECLARE_EVENT_TABLE()
-    DECLARE_DYNAMIC_CLASS(wxAuiMDIParentFrame)
+    DECLARE_DYNAMIC_CLASS ( wxAuiMDIParentFrame )
 };
 
 //-----------------------------------------------------------------------------
@@ -120,116 +120,116 @@
 {
 public:
     wxAuiMDIChildFrame();
-    wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent,
-                       wxWindowID winid,
-                       const wxString& title,
-                       const wxPoint& pos = wxDefaultPosition,
-                       const wxSize& size = wxDefaultSize,
-                       long style = wxDEFAULT_FRAME_STYLE,
-                       const wxString& name = wxFrameNameStr);
+    wxAuiMDIChildFrame ( wxAuiMDIParentFrame * parent,
+                         wxWindowID winid,
+                         const wxString & title,
+                         const wxPoint & pos = wxDefaultPosition,
+                         const wxSize & size = wxDefaultSize,
+                         long style = wxDEFAULT_FRAME_STYLE,
+                         const wxString & name = wxFrameNameStr );
 
     virtual ~wxAuiMDIChildFrame();
-    bool Create(wxAuiMDIParentFrame *parent,
-                wxWindowID winid,
-                const wxString& title,
-                const wxPoint& pos = wxDefaultPosition,
-                const wxSize& size = wxDefaultSize,
-                long style = wxDEFAULT_FRAME_STYLE,
-                const wxString& name = wxFrameNameStr);
+    bool Create ( wxAuiMDIParentFrame * parent,
+                  wxWindowID winid,
+                  const wxString & title,
+                  const wxPoint & pos = wxDefaultPosition,
+                  const wxSize & size = wxDefaultSize,
+                  long style = wxDEFAULT_FRAME_STYLE,
+                  const wxString & name = wxFrameNameStr );
 
 #if wxUSE_MENUS
-    virtual void SetMenuBar(wxMenuBar *menu_bar);
-    virtual wxMenuBar *GetMenuBar() const;
+    virtual void SetMenuBar ( wxMenuBar * menuBar );
+    virtual wxMenuBar * GetMenuBar() const;
 #endif // wxUSE_MENUS
 
-    virtual void SetTitle(const wxString& title);
+    virtual void SetTitle ( const wxString & title );
     virtual wxString GetTitle() const;
 
-    virtual void SetIcons(const wxIconBundle& icons);
-    virtual const wxIconBundle& GetIcons() const;
+    virtual void SetIcons ( const wxIconBundle & icons );
+    virtual const wxIconBundle & GetIcons() const;
 
-    virtual void SetIcon(const wxIcon& icon);
-    virtual const wxIcon& GetIcon() const;
+    virtual void SetIcon ( const wxIcon & icon );
+    virtual const wxIcon & GetIcon() const;
 
     virtual void Activate();
     virtual bool Destroy();
 
-    virtual bool Show(bool show = true);
+    virtual bool Show ( bool show = true );
 
 #if wxUSE_STATUSBAR
     // no status bars
-    virtual wxStatusBar* CreateStatusBar(int WXUNUSED(number) = 1,
-                                         long WXUNUSED(style) = 1,
-                                         wxWindowID WXUNUSED(winid) = 1,
-                                         const wxString& WXUNUSED(name) = wxEmptyString)
-      { return NULL; }
+    virtual wxStatusBar * CreateStatusBar ( int WXUNUSED ( number ) = 1,
+                                            long WXUNUSED ( style ) = 1,
+                                            wxWindowID WXUNUSED ( winid ) = 1,
+                                            const wxString & WXUNUSED ( name ) = wxEmptyString )
+    { return NULL; }
 
-    virtual wxStatusBar *GetStatusBar() const { return NULL; }
-    virtual void SetStatusText( const wxString &WXUNUSED(text), int WXUNUSED(number)=0 ) {}
-    virtual void SetStatusWidths( int WXUNUSED(n), const int WXUNUSED(widths_field)[] ) {}
+    virtual wxStatusBar * GetStatusBar() const { return NULL; }
+    virtual void SetStatusText ( const wxString & WXUNUSED ( text ), int WXUNUSED ( number ) = 0 ) {}
+    virtual void SetStatusWidths ( int WXUNUSED ( n ), const int WXUNUSED ( widthsField ) [] ) {}
 #endif
 
 #if wxUSE_TOOLBAR
     // no toolbar bars
-    virtual wxToolBar* CreateToolBar(long WXUNUSED(style),
-                                     wxWindowID WXUNUSED(winid),
-                                     const wxString& WXUNUSED(name))
-        { return NULL; }
-    virtual wxToolBar *GetToolBar() const { return NULL; }
+    virtual wxToolBar * CreateToolBar ( long WXUNUSED ( style ),
+                                        wxWindowID WXUNUSED ( winid ),
+                                        const wxString & WXUNUSED ( name ) )
+    { return NULL; }
+    virtual wxToolBar * GetToolBar() const { return NULL; }
 #endif
 
 
     // no maximize etc
-    virtual void Maximize(bool WXUNUSED(maximize) = true) { /* Has no effect */ }
+    virtual void Maximize ( bool WXUNUSED ( maximize ) = true ) { /* Has no effect */ }
     virtual void Restore() { /* Has no effect */ }
-    virtual void Iconize(bool WXUNUSED(iconize)  = true) { /* Has no effect */ }
+    virtual void Iconize ( bool WXUNUSED ( iconize )  = true ) { /* Has no effect */ }
     virtual bool IsMaximized() const { return true; }
     virtual bool IsIconized() const { return false; }
-    virtual bool ShowFullScreen(bool WXUNUSED(show), long WXUNUSED(style)) { return false; }
+    virtual bool ShowFullScreen ( bool WXUNUSED ( show ), long WXUNUSED ( style ) ) { return false; }
     virtual bool IsFullScreen() const { return false; }
 
     virtual bool IsTopLevel() const { return false; }
 
-    void OnMenuHighlight(wxMenuEvent& evt);
-    void OnActivate(wxActivateEvent& evt);
-    void OnCloseWindow(wxCloseEvent& evt);
+    void OnMenuHighlight ( wxMenuEvent & evt );
+    void OnActivate ( wxActivateEvent & evt );
+    void OnCloseWindow ( wxCloseEvent & evt );
 
-    void SetMDIParentFrame(wxAuiMDIParentFrame* parent);
-    wxAuiMDIParentFrame* GetMDIParentFrame() const;
+    void SetMDIParentFrame ( wxAuiMDIParentFrame * parent );
+    wxAuiMDIParentFrame * GetMDIParentFrame() const;
 
 protected:
     void Init();
-    virtual void DoSetSize(int x, int y, int width, int height, int size_flags);
-    virtual void DoMoveWindow(int x, int y, int width, int height);
+    virtual void DoSetSize ( int x, int y, int width, int height, int sizeFlags );
+    virtual void DoMoveWindow ( int x, int y, int width, int height );
 
     // no size hints
-    virtual void DoSetSizeHints(int WXUNUSED(minW), int WXUNUSED(minH),
-                                int WXUNUSED(maxW), int WXUNUSED(maxH),
-                                int WXUNUSED(incW), int WXUNUSED(incH)) {}
+    virtual void DoSetSizeHints ( int WXUNUSED ( minW ), int WXUNUSED ( minH ),
+                                  int WXUNUSED ( maxW ), int WXUNUSED ( maxH ),
+                                  int WXUNUSED ( incW ), int WXUNUSED ( incH ) ) {}
 public:
     // This function needs to be called when a size change is confirmed,
     // we needed this function to prevent anybody from the outside
     // changing the panel... it messes the UI layout when we would allow it.
     void ApplyMDIChildFrameRect();
-    void DoShow(bool show);
+    void DoShow ( bool show );
 
 protected:
-    wxAuiMDIParentFrame* m_pMDIParentFrame;
-    wxRect m_mdi_newrect;
-    wxRect m_mdi_currect;
+    wxAuiMDIParentFrame * m_pMDIParentFrame;
+    wxRect m_mdiNewRect;
+    wxRect m_mdiCurrect;
     wxString m_title;
     wxIcon m_icon;
-    wxIconBundle m_icon_bundle;
-    bool m_activate_on_create;
+    wxIconBundle m_iconBundle;
+    bool m_activateOnCreate;
 
 #if wxUSE_MENUS
-    wxMenuBar* m_pMenuBar;
+    wxMenuBar * m_pMenuBar;
 #endif // wxUSE_MENUS
 
 
 
 private:
-    DECLARE_DYNAMIC_CLASS(wxAuiMDIChildFrame)
+    DECLARE_DYNAMIC_CLASS ( wxAuiMDIChildFrame )
     DECLARE_EVENT_TABLE()
 
     friend class wxAuiMDIClientWindow;
@@ -243,23 +243,23 @@
 {
 public:
     wxAuiMDIClientWindow();
-    wxAuiMDIClientWindow(wxAuiMDIParentFrame *parent, long style = 0);
+    wxAuiMDIClientWindow ( wxAuiMDIParentFrame * parent, long style = 0 );
     ~wxAuiMDIClientWindow();
 
-    virtual bool CreateClient(wxAuiMDIParentFrame *parent,
-                              long style = wxVSCROLL | wxHSCROLL);
+    virtual bool CreateClient ( wxAuiMDIParentFrame * parent,
+                                long style = wxVSCROLL | wxHSCROLL );
 
-    virtual int SetSelection(size_t page);
+    virtual int SetSelection ( size_t page );
 
 protected:
 
-    void PageChanged(int old_selection, int new_selection);
-    void OnPageClose(wxAuiNotebookEvent& evt);
-    void OnPageChanged(wxAuiNotebookEvent& evt);
-    void OnSize(wxSizeEvent& evt);
+    void PageChanged ( int oldSelection, int newSelection );
+    void OnPageClose ( wxAuiNotebookEvent & evt );
+    void OnPageChanged ( wxAuiNotebookEvent & evt );
+    void OnSize ( wxSizeEvent & evt );
 
 private:
-    DECLARE_DYNAMIC_CLASS(wxAuiMDIClientWindow)
+    DECLARE_DYNAMIC_CLASS ( wxAuiMDIClientWindow )
     DECLARE_EVENT_TABLE()
 };
 #endif // wxUSE_AUI
Index: samples/aui/auidemo.cpp
===================================================================
--- samples/aui/auidemo.cpp	(revision 69060)
+++ samples/aui/auidemo.cpp	(working copy)
@@ -13,7 +13,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #include "wx/app.h"
@@ -46,8 +46,8 @@
     bool OnInit();
 };
 
-DECLARE_APP(MyApp)
-IMPLEMENT_APP(MyApp)
+DECLARE_APP ( MyApp )
+IMPLEMENT_APP ( MyApp )
 
 
 class wxSizeReportCtrl;
@@ -58,7 +58,7 @@
 {
     enum
     {
-        ID_CreateTree = wxID_HIGHEST+1,
+        ID_CreateTree = wxID_HIGHEST + 1,
         ID_CreateGrid,
         ID_CreateText,
         ID_CreateHTML,
@@ -106,73 +106,73 @@
 
         ID_SampleItem,
 
-        ID_FirstPerspective = ID_CreatePerspective+1000
+        ID_FirstPerspective = ID_CreatePerspective + 1000
     };
 
 public:
-    MyFrame(wxWindow* parent,
-            wxWindowID id,
-            const wxString& title,
-            const wxPoint& pos = wxDefaultPosition,
-            const wxSize& size = wxDefaultSize,
-            long style = wxDEFAULT_FRAME_STYLE | wxSUNKEN_BORDER);
+    MyFrame ( wxWindow * parent,
+              wxWindowID id,
+              const wxString & title,
+              const wxPoint & pos = wxDefaultPosition,
+              const wxSize & size = wxDefaultSize,
+              long style = wxDEFAULT_FRAME_STYLE | wxSUNKEN_BORDER );
 
     ~MyFrame();
 
-    wxAuiDockArt* GetDockArt();
+    wxAuiDockArt * GetDockArt();
     void DoUpdate();
 
 private:
-    wxTextCtrl* CreateTextCtrl(const wxString& text = wxEmptyString);
-    wxGrid* CreateGrid();
-    wxTreeCtrl* CreateTreeCtrl();
-    wxSizeReportCtrl* CreateSizeReportCtrl(int width = 80, int height = 80);
+    wxTextCtrl * CreateTextCtrl ( const wxString & text = wxEmptyString );
+    wxGrid * CreateGrid();
+    wxTreeCtrl * CreateTreeCtrl();
+    wxSizeReportCtrl * CreateSizeReportCtrl ( int width = 80, int height = 80 );
     wxPoint GetStartPosition();
-    wxHtmlWindow* CreateHTMLCtrl(wxWindow* parent = NULL);
-    wxAuiNotebook* CreateNotebook();
+    wxHtmlWindow * CreateHTMLCtrl ( wxWindow * parent = NULL );
+    wxAuiNotebook * CreateNotebook();
 
     wxString GetIntroText();
 
 private:
 
-    void OnEraseBackground(wxEraseEvent& evt);
-    void OnSize(wxSizeEvent& evt);
+    void OnEraseBackground ( wxEraseEvent & evt );
+    void OnSize ( wxSizeEvent & evt );
 
-    void OnCreateTree(wxCommandEvent& evt);
-    void OnCreateGrid(wxCommandEvent& evt);
-    void OnCreateHTML(wxCommandEvent& evt);
-    void OnCreateNotebook(wxCommandEvent& evt);
-    void OnCreateText(wxCommandEvent& evt);
-    void OnCreateSizeReport(wxCommandEvent& evt);
-    void OnChangeContentPane(wxCommandEvent& evt);
-    void OnDropDownToolbarItem(wxAuiToolBarEvent& evt);
-    void OnCreatePerspective(wxCommandEvent& evt);
-    void OnCopyPerspectiveCode(wxCommandEvent& evt);
-    void OnRestorePerspective(wxCommandEvent& evt);
-    void OnSettings(wxCommandEvent& evt);
-    void OnCustomizeToolbar(wxCommandEvent& evt);
-    void OnAllowNotebookDnD(wxAuiNotebookEvent& evt);
-    void OnNotebookPageClose(wxAuiNotebookEvent& evt);
-    void OnNotebookPageClosed(wxAuiNotebookEvent& evt);
-    void OnExit(wxCommandEvent& evt);
-    void OnAbout(wxCommandEvent& evt);
-    void OnTabAlignment(wxCommandEvent &evt);
+    void OnCreateTree ( wxCommandEvent & evt );
+    void OnCreateGrid ( wxCommandEvent & evt );
+    void OnCreateHTML ( wxCommandEvent & evt );
+    void OnCreateNotebook ( wxCommandEvent & evt );
+    void OnCreateText ( wxCommandEvent & evt );
+    void OnCreateSizeReport ( wxCommandEvent & evt );
+    void OnChangeContentPane ( wxCommandEvent & evt );
+    void OnDropDownToolbarItem ( wxAuiToolBarEvent & evt );
+    void OnCreatePerspective ( wxCommandEvent & evt );
+    void OnCopyPerspectiveCode ( wxCommandEvent & evt );
+    void OnRestorePerspective ( wxCommandEvent & evt );
+    void OnSettings ( wxCommandEvent & evt );
+    void OnCustomizeToolbar ( wxCommandEvent & evt );
+    void OnAllowNotebookDnD ( wxAuiNotebookEvent & evt );
+    void OnNotebookPageClose ( wxAuiNotebookEvent & evt );
+    void OnNotebookPageClosed ( wxAuiNotebookEvent & evt );
+    void OnExit ( wxCommandEvent & evt );
+    void OnAbout ( wxCommandEvent & evt );
+    void OnTabAlignment ( wxCommandEvent & evt );
 
-    void OnGradient(wxCommandEvent& evt);
-    void OnToolbarResizing(wxCommandEvent& evt);
-    void OnManagerFlag(wxCommandEvent& evt);
-    void OnNotebookFlag(wxCommandEvent& evt);
-    void OnUpdateUI(wxUpdateUIEvent& evt);
+    void OnGradient ( wxCommandEvent & evt );
+    void OnToolbarResizing ( wxCommandEvent & evt );
+    void OnManagerFlag ( wxCommandEvent & evt );
+    void OnNotebookFlag ( wxCommandEvent & evt );
+    void OnUpdateUI ( wxUpdateUIEvent & evt );
 
-    void OnPaneClose(wxAuiManagerEvent& evt);
+    void OnPaneClose ( wxAuiManagerEvent & evt );
 
 private:
 
     wxAuiManager m_mgr;
     wxArrayString m_perspectives;
-    wxMenu* m_perspectives_menu;
-    long m_notebook_style;
-    long m_notebook_theme;
+    wxMenu * m_perspectivesMenu;
+    long m_notebookStyle;
+    long m_notebookTheme;
 
     DECLARE_EVENT_TABLE()
 };
@@ -185,79 +185,79 @@
 {
 public:
 
-    wxSizeReportCtrl(wxWindow* parent, wxWindowID id = wxID_ANY,
-                     const wxPoint& pos = wxDefaultPosition,
-                     const wxSize& size = wxDefaultSize,
-                     wxAuiManager* mgr = NULL)
-                     : wxControl(parent, id, pos, size, wxNO_BORDER)
+    wxSizeReportCtrl ( wxWindow * parent, wxWindowID id = wxID_ANY,
+                       const wxPoint & pos = wxDefaultPosition,
+                       const wxSize & size = wxDefaultSize,
+                       wxAuiManager * mgr = NULL )
+        : wxControl ( parent, id, pos, size, wxNO_BORDER )
     {
         m_mgr = mgr;
     }
 
 private:
 
-    void OnPaint(wxPaintEvent& WXUNUSED(evt))
+    void OnPaint ( wxPaintEvent & WXUNUSED ( evt ) )
     {
-        wxPaintDC dc(this);
+        wxPaintDC dc ( this );
         wxSize size = GetClientSize();
         wxString s;
         int h, w, height;
 
-        s.Printf(wxT("Size: %d x %d"), size.x, size.y);
+        s.Printf ( wxT ( "Size: %d x %d" ), size.x, size.y );
 
-        dc.SetFont(*wxNORMAL_FONT);
-        dc.GetTextExtent(s, &w, &height);
+        dc.SetFont ( *wxNORMAL_FONT );
+        dc.GetTextExtent ( s, &w, &height );
         height += 3;
-        dc.SetBrush(*wxWHITE_BRUSH);
-        dc.SetPen(*wxWHITE_PEN);
-        dc.DrawRectangle(0, 0, size.x, size.y);
-        dc.SetPen(*wxLIGHT_GREY_PEN);
-        dc.DrawLine(0, 0, size.x, size.y);
-        dc.DrawLine(0, size.y, size.x, 0);
-        dc.DrawText(s, (size.x-w)/2, ((size.y-(height*5))/2));
+        dc.SetBrush ( *wxWHITE_BRUSH );
+        dc.SetPen ( *wxWHITE_PEN );
+        dc.DrawRectangle ( 0, 0, size.x, size.y );
+        dc.SetPen ( *wxLIGHT_GREY_PEN );
+        dc.DrawLine ( 0, 0, size.x, size.y );
+        dc.DrawLine ( 0, size.y, size.x, 0 );
+        dc.DrawText ( s, ( size.x - w ) / 2, ( ( size.y - ( height * 5 ) ) / 2 ) );
 
-        if (m_mgr)
+        if ( m_mgr )
         {
-            wxAuiPaneInfo pi = m_mgr->GetPane(this);
+            wxAuiPaneInfo pi = m_mgr->GetPane ( this );
 
-            s.Printf(wxT("Layer: %d"), pi.dock_layer);
-            dc.GetTextExtent(s, &w, &h);
-            dc.DrawText(s, (size.x-w)/2, ((size.y-(height*5))/2)+(height*1));
+            s.Printf ( wxT ( "Layer: %d" ), pi.dockLayer );
+            dc.GetTextExtent ( s, &w, &h );
+            dc.DrawText ( s, ( size.x - w ) / 2, ( ( size.y - ( height * 5 ) ) / 2 ) + ( height * 1 ) );
 
-            s.Printf(wxT("Dock: %d Row: %d"), pi.dock_direction, pi.dock_row);
-            dc.GetTextExtent(s, &w, &h);
-            dc.DrawText(s, (size.x-w)/2, ((size.y-(height*5))/2)+(height*2));
+            s.Printf ( wxT ( "Dock: %d Row: %d" ), pi.dockDirection, pi.dockRow );
+            dc.GetTextExtent ( s, &w, &h );
+            dc.DrawText ( s, ( size.x - w ) / 2, ( ( size.y - ( height * 5 ) ) / 2 ) + ( height * 2 ) );
 
-            s.Printf(wxT("Position: %d"), pi.dock_pos);
-            dc.GetTextExtent(s, &w, &h);
-            dc.DrawText(s, (size.x-w)/2, ((size.y-(height*5))/2)+(height*3));
+            s.Printf ( wxT ( "Position: %d" ), pi.dockPos );
+            dc.GetTextExtent ( s, &w, &h );
+            dc.DrawText ( s, ( size.x - w ) / 2, ( ( size.y - ( height * 5 ) ) / 2 ) + ( height * 3 ) );
 
-            s.Printf(wxT("Proportion: %d"), pi.dock_proportion);
-            dc.GetTextExtent(s, &w, &h);
-            dc.DrawText(s, (size.x-w)/2, ((size.y-(height*5))/2)+(height*4));
+            s.Printf ( wxT ( "Proportion: %d" ), pi.dockProportion );
+            dc.GetTextExtent ( s, &w, &h );
+            dc.DrawText ( s, ( size.x - w ) / 2, ( ( size.y - ( height * 5 ) ) / 2 ) + ( height * 4 ) );
         }
     }
 
-    void OnEraseBackground(wxEraseEvent& WXUNUSED(evt))
+    void OnEraseBackground ( wxEraseEvent & WXUNUSED ( evt ) )
     {
         // intentionally empty
     }
 
-    void OnSize(wxSizeEvent& WXUNUSED(evt))
+    void OnSize ( wxSizeEvent & WXUNUSED ( evt ) )
     {
         Refresh();
     }
 private:
 
-    wxAuiManager* m_mgr;
+    wxAuiManager * m_mgr;
 
     DECLARE_EVENT_TABLE()
 };
 
-BEGIN_EVENT_TABLE(wxSizeReportCtrl, wxControl)
-    EVT_PAINT(wxSizeReportCtrl::OnPaint)
-    EVT_SIZE(wxSizeReportCtrl::OnSize)
-    EVT_ERASE_BACKGROUND(wxSizeReportCtrl::OnEraseBackground)
+BEGIN_EVENT_TABLE ( wxSizeReportCtrl, wxControl )
+    EVT_PAINT ( wxSizeReportCtrl::OnPaint )
+    EVT_SIZE ( wxSizeReportCtrl::OnSize )
+    EVT_ERASE_BACKGROUND ( wxSizeReportCtrl::OnEraseBackground )
 END_EVENT_TABLE()
 
 
@@ -265,7 +265,7 @@
 {
     enum
     {
-        ID_PaneBorderSize = wxID_HIGHEST+1,
+        ID_PaneBorderSize = wxID_HIGHEST + 1,
         ID_SashSize,
         ID_CaptionSize,
         ID_BackgroundColor,
@@ -282,730 +282,756 @@
 
 public:
 
-    SettingsPanel(wxWindow* parent, MyFrame* frame)
-            : wxPanel(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize),
-              m_frame(frame)
+    SettingsPanel ( wxWindow * parent, MyFrame * frame )
+        : wxPanel ( parent, wxID_ANY, wxDefaultPosition, wxDefaultSize ),
+          m_frame ( frame )
     {
         //wxBoxSizer* vert = new wxBoxSizer(wxVERTICAL);
 
         //vert->Add(1, 1, 1, wxEXPAND);
 
-        wxBoxSizer* s1 = new wxBoxSizer(wxHORIZONTAL);
-        m_border_size = new wxSpinCtrl(this, ID_PaneBorderSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE));
-        s1->Add(1, 1, 1, wxEXPAND);
-        s1->Add(new wxStaticText(this, wxID_ANY, wxT("Pane Border Size:")));
-        s1->Add(m_border_size);
-        s1->Add(1, 1, 1, wxEXPAND);
-        s1->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s1 = new wxBoxSizer ( wxHORIZONTAL );
+        m_borderSize = new wxSpinCtrl ( this, ID_PaneBorderSize, wxString::Format ( wxT ( "%d" ), frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_PANE_BORDER_SIZE ) ), wxDefaultPosition, wxSize ( 50, 20 ), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_PANE_BORDER_SIZE ) );
+        s1->Add ( 1, 1, 1, wxEXPAND );
+        s1->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Pane Border Size:" ) ) );
+        s1->Add ( m_borderSize );
+        s1->Add ( 1, 1, 1, wxEXPAND );
+        s1->SetItemMinSize ( ( size_t ) 1, 180, 20 );
         //vert->Add(s1, 0, wxEXPAND | wxLEFT | wxBOTTOM, 5);
 
-        wxBoxSizer* s2 = new wxBoxSizer(wxHORIZONTAL);
-        m_sash_size = new wxSpinCtrl(this, ID_SashSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE));
-        s2->Add(1, 1, 1, wxEXPAND);
-        s2->Add(new wxStaticText(this, wxID_ANY, wxT("Sash Size:")));
-        s2->Add(m_sash_size);
-        s2->Add(1, 1, 1, wxEXPAND);
-        s2->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s2 = new wxBoxSizer ( wxHORIZONTAL );
+        m_sashSize = new wxSpinCtrl ( this, ID_SashSize, wxString::Format ( wxT ( "%d" ), frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_SASH_SIZE ) ), wxDefaultPosition, wxSize ( 50, 20 ), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_SASH_SIZE ) );
+        s2->Add ( 1, 1, 1, wxEXPAND );
+        s2->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Sash Size:" ) ) );
+        s2->Add ( m_sashSize );
+        s2->Add ( 1, 1, 1, wxEXPAND );
+        s2->SetItemMinSize ( ( size_t ) 1, 180, 20 );
         //vert->Add(s2, 0, wxEXPAND | wxLEFT | wxBOTTOM, 5);
 
-        wxBoxSizer* s3 = new wxBoxSizer(wxHORIZONTAL);
-        m_caption_size = new wxSpinCtrl(this, ID_CaptionSize, wxString::Format(wxT("%d"), frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE)), wxDefaultPosition, wxSize(50,20), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE));
-        s3->Add(1, 1, 1, wxEXPAND);
-        s3->Add(new wxStaticText(this, wxID_ANY, wxT("Caption Size:")));
-        s3->Add(m_caption_size);
-        s3->Add(1, 1, 1, wxEXPAND);
-        s3->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s3 = new wxBoxSizer ( wxHORIZONTAL );
+        m_captionSize = new wxSpinCtrl ( this, ID_CaptionSize, wxString::Format ( wxT ( "%d" ), frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_CAPTION_SIZE ) ), wxDefaultPosition, wxSize ( 50, 20 ), wxSP_ARROW_KEYS, 0, 100, frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_CAPTION_SIZE ) );
+        s3->Add ( 1, 1, 1, wxEXPAND );
+        s3->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Caption Size:" ) ) );
+        s3->Add ( m_captionSize );
+        s3->Add ( 1, 1, 1, wxEXPAND );
+        s3->SetItemMinSize ( ( size_t ) 1, 180, 20 );
         //vert->Add(s3, 0, wxEXPAND | wxLEFT | wxBOTTOM, 5);
 
         //vert->Add(1, 1, 1, wxEXPAND);
 
 
-        wxBitmap b = CreateColorBitmap(*wxBLACK);
+        wxBitmap b = CreateColorBitmap ( *wxBLACK );
 
-        wxBoxSizer* s4 = new wxBoxSizer(wxHORIZONTAL);
-        m_background_color = new wxBitmapButton(this, ID_BackgroundColor, b, wxDefaultPosition, wxSize(50,25));
-        s4->Add(1, 1, 1, wxEXPAND);
-        s4->Add(new wxStaticText(this, wxID_ANY, wxT("Background Color:")));
-        s4->Add(m_background_color);
-        s4->Add(1, 1, 1, wxEXPAND);
-        s4->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s4 = new wxBoxSizer ( wxHORIZONTAL );
+        m_backgroundColor = new wxBitmapButton ( this, ID_BackgroundColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s4->Add ( 1, 1, 1, wxEXPAND );
+        s4->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Background Color:" ) ) );
+        s4->Add ( m_backgroundColor );
+        s4->Add ( 1, 1, 1, wxEXPAND );
+        s4->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s5 = new wxBoxSizer(wxHORIZONTAL);
-        m_sash_color = new wxBitmapButton(this, ID_SashColor, b, wxDefaultPosition, wxSize(50,25));
-        s5->Add(1, 1, 1, wxEXPAND);
-        s5->Add(new wxStaticText(this, wxID_ANY, wxT("Sash Color:")));
-        s5->Add(m_sash_color);
-        s5->Add(1, 1, 1, wxEXPAND);
-        s5->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s5 = new wxBoxSizer ( wxHORIZONTAL );
+        m_sashColor = new wxBitmapButton ( this, ID_SashColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s5->Add ( 1, 1, 1, wxEXPAND );
+        s5->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Sash Color:" ) ) );
+        s5->Add ( m_sashColor );
+        s5->Add ( 1, 1, 1, wxEXPAND );
+        s5->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s6 = new wxBoxSizer(wxHORIZONTAL);
-        m_inactive_caption_color = new wxBitmapButton(this, ID_InactiveCaptionColor, b, wxDefaultPosition, wxSize(50,25));
-        s6->Add(1, 1, 1, wxEXPAND);
-        s6->Add(new wxStaticText(this, wxID_ANY, wxT("Normal Caption:")));
-        s6->Add(m_inactive_caption_color);
-        s6->Add(1, 1, 1, wxEXPAND);
-        s6->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s6 = new wxBoxSizer ( wxHORIZONTAL );
+        m_inactiveCaptionColor = new wxBitmapButton ( this, ID_InactiveCaptionColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s6->Add ( 1, 1, 1, wxEXPAND );
+        s6->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Normal Caption:" ) ) );
+        s6->Add ( m_inactiveCaptionColor );
+        s6->Add ( 1, 1, 1, wxEXPAND );
+        s6->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s7 = new wxBoxSizer(wxHORIZONTAL);
-        m_inactive_caption_gradient_color = new wxBitmapButton(this, ID_InactiveCaptionGradientColor, b, wxDefaultPosition, wxSize(50,25));
-        s7->Add(1, 1, 1, wxEXPAND);
-        s7->Add(new wxStaticText(this, wxID_ANY, wxT("Normal Caption Gradient:")));
-        s7->Add(m_inactive_caption_gradient_color);
-        s7->Add(1, 1, 1, wxEXPAND);
-        s7->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s7 = new wxBoxSizer ( wxHORIZONTAL );
+        m_inactiveCaptionGradientColor = new wxBitmapButton ( this, ID_InactiveCaptionGradientColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s7->Add ( 1, 1, 1, wxEXPAND );
+        s7->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Normal Caption Gradient:" ) ) );
+        s7->Add ( m_inactiveCaptionGradientColor );
+        s7->Add ( 1, 1, 1, wxEXPAND );
+        s7->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s8 = new wxBoxSizer(wxHORIZONTAL);
-        m_inactive_caption_text_color = new wxBitmapButton(this, ID_InactiveCaptionTextColor, b, wxDefaultPosition, wxSize(50,25));
-        s8->Add(1, 1, 1, wxEXPAND);
-        s8->Add(new wxStaticText(this, wxID_ANY, wxT("Normal Caption Text:")));
-        s8->Add(m_inactive_caption_text_color);
-        s8->Add(1, 1, 1, wxEXPAND);
-        s8->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s8 = new wxBoxSizer ( wxHORIZONTAL );
+        m_inactiveCaptionTextColor = new wxBitmapButton ( this, ID_InactiveCaptionTextColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s8->Add ( 1, 1, 1, wxEXPAND );
+        s8->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Normal Caption Text:" ) ) );
+        s8->Add ( m_inactiveCaptionTextColor );
+        s8->Add ( 1, 1, 1, wxEXPAND );
+        s8->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s9 = new wxBoxSizer(wxHORIZONTAL);
-        m_active_caption_color = new wxBitmapButton(this, ID_ActiveCaptionColor, b, wxDefaultPosition, wxSize(50,25));
-        s9->Add(1, 1, 1, wxEXPAND);
-        s9->Add(new wxStaticText(this, wxID_ANY, wxT("Active Caption:")));
-        s9->Add(m_active_caption_color);
-        s9->Add(1, 1, 1, wxEXPAND);
-        s9->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s9 = new wxBoxSizer ( wxHORIZONTAL );
+        m_activeCaptionColor = new wxBitmapButton ( this, ID_ActiveCaptionColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s9->Add ( 1, 1, 1, wxEXPAND );
+        s9->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Active Caption:" ) ) );
+        s9->Add ( m_activeCaptionColor );
+        s9->Add ( 1, 1, 1, wxEXPAND );
+        s9->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s10 = new wxBoxSizer(wxHORIZONTAL);
-        m_active_caption_gradient_color = new wxBitmapButton(this, ID_ActiveCaptionGradientColor, b, wxDefaultPosition, wxSize(50,25));
-        s10->Add(1, 1, 1, wxEXPAND);
-        s10->Add(new wxStaticText(this, wxID_ANY, wxT("Active Caption Gradient:")));
-        s10->Add(m_active_caption_gradient_color);
-        s10->Add(1, 1, 1, wxEXPAND);
-        s10->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s10 = new wxBoxSizer ( wxHORIZONTAL );
+        m_activeCaptionGradientColor = new wxBitmapButton ( this, ID_ActiveCaptionGradientColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s10->Add ( 1, 1, 1, wxEXPAND );
+        s10->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Active Caption Gradient:" ) ) );
+        s10->Add ( m_activeCaptionGradientColor );
+        s10->Add ( 1, 1, 1, wxEXPAND );
+        s10->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s11 = new wxBoxSizer(wxHORIZONTAL);
-        m_active_caption_text_color = new wxBitmapButton(this, ID_ActiveCaptionTextColor, b, wxDefaultPosition, wxSize(50,25));
-        s11->Add(1, 1, 1, wxEXPAND);
-        s11->Add(new wxStaticText(this, wxID_ANY, wxT("Active Caption Text:")));
-        s11->Add(m_active_caption_text_color);
-        s11->Add(1, 1, 1, wxEXPAND);
-        s11->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s11 = new wxBoxSizer ( wxHORIZONTAL );
+        m_activeCaptionTextColor = new wxBitmapButton ( this, ID_ActiveCaptionTextColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s11->Add ( 1, 1, 1, wxEXPAND );
+        s11->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Active Caption Text:" ) ) );
+        s11->Add ( m_activeCaptionTextColor );
+        s11->Add ( 1, 1, 1, wxEXPAND );
+        s11->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s12 = new wxBoxSizer(wxHORIZONTAL);
-        m_border_color = new wxBitmapButton(this, ID_BorderColor, b, wxDefaultPosition, wxSize(50,25));
-        s12->Add(1, 1, 1, wxEXPAND);
-        s12->Add(new wxStaticText(this, wxID_ANY, wxT("Border Color:")));
-        s12->Add(m_border_color);
-        s12->Add(1, 1, 1, wxEXPAND);
-        s12->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s12 = new wxBoxSizer ( wxHORIZONTAL );
+        m_borderColor = new wxBitmapButton ( this, ID_BorderColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s12->Add ( 1, 1, 1, wxEXPAND );
+        s12->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Border Color:" ) ) );
+        s12->Add ( m_borderColor );
+        s12->Add ( 1, 1, 1, wxEXPAND );
+        s12->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxBoxSizer* s13 = new wxBoxSizer(wxHORIZONTAL);
-        m_gripper_color = new wxBitmapButton(this, ID_GripperColor, b, wxDefaultPosition, wxSize(50,25));
-        s13->Add(1, 1, 1, wxEXPAND);
-        s13->Add(new wxStaticText(this, wxID_ANY, wxT("Gripper Color:")));
-        s13->Add(m_gripper_color);
-        s13->Add(1, 1, 1, wxEXPAND);
-        s13->SetItemMinSize((size_t)1, 180, 20);
+        wxBoxSizer * s13 = new wxBoxSizer ( wxHORIZONTAL );
+        m_gripperColor = new wxBitmapButton ( this, ID_GripperColor, b, wxDefaultPosition, wxSize ( 50, 25 ) );
+        s13->Add ( 1, 1, 1, wxEXPAND );
+        s13->Add ( new wxStaticText ( this, wxID_ANY, wxT ( "Gripper Color:" ) ) );
+        s13->Add ( m_gripperColor );
+        s13->Add ( 1, 1, 1, wxEXPAND );
+        s13->SetItemMinSize ( ( size_t ) 1, 180, 20 );
 
-        wxGridSizer* grid_sizer = new wxGridSizer(2);
-        grid_sizer->SetHGap(5);
-        grid_sizer->Add(s1);  grid_sizer->Add(s4);
-        grid_sizer->Add(s2);  grid_sizer->Add(s5);
-        grid_sizer->Add(s3);  grid_sizer->Add(s13);
-        grid_sizer->Add(1,1); grid_sizer->Add(s12);
-        grid_sizer->Add(s6);  grid_sizer->Add(s9);
-        grid_sizer->Add(s7);  grid_sizer->Add(s10);
-        grid_sizer->Add(s8);  grid_sizer->Add(s11);
+        wxGridSizer * gridSizer = new wxGridSizer ( 2 );
+        gridSizer->SetHGap ( 5 );
+        gridSizer->Add ( s1 );  gridSizer->Add ( s4 );
+        gridSizer->Add ( s2 );  gridSizer->Add ( s5 );
+        gridSizer->Add ( s3 );  gridSizer->Add ( s13 );
+        gridSizer->Add ( 1, 1 ); gridSizer->Add ( s12 );
+        gridSizer->Add ( s6 );  gridSizer->Add ( s9 );
+        gridSizer->Add ( s7 );  gridSizer->Add ( s10 );
+        gridSizer->Add ( s8 );  gridSizer->Add ( s11 );
 
-        wxBoxSizer* cont_sizer = new wxBoxSizer(wxVERTICAL);
-        cont_sizer->Add(grid_sizer, 1, wxEXPAND | wxALL, 5);
-        SetSizer(cont_sizer);
-        GetSizer()->SetSizeHints(this);
+        wxBoxSizer * contSizer = new wxBoxSizer ( wxVERTICAL );
+        contSizer->Add ( gridSizer, 1, wxEXPAND | wxALL, 5 );
+        SetSizer ( contSizer );
+        GetSizer()->SetSizeHints ( this );
 
-        m_border_size->SetValue(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE));
-        m_sash_size->SetValue(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_SASH_SIZE));
-        m_caption_size->SetValue(frame->GetDockArt()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE));
+        m_borderSize->SetValue ( frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_PANE_BORDER_SIZE ) );
+        m_sashSize->SetValue ( frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_SASH_SIZE ) );
+        m_captionSize->SetValue ( frame->GetDockArt()->GetMetric ( wxAUI_DOCKART_CAPTION_SIZE ) );
 
         UpdateColors();
     }
 
 private:
 
-    wxBitmap CreateColorBitmap(const wxColour& c)
+    wxBitmap CreateColorBitmap ( const wxColour & c )
     {
         wxImage image;
-        image.Create(25,14);
-        for (int x = 0; x < 25; ++x)
-            for (int y = 0; y < 14; ++y)
+        image.Create ( 25, 14 );
+
+        for ( int x = 0; x < 25; ++x )
+            for ( int y = 0; y < 14; ++y )
             {
                 wxColour pixcol = c;
-                if (x == 0 || x == 24 || y == 0 || y == 13)
+
+                if ( x == 0 || x == 24 || y == 0 || y == 13 )
+                {
                     pixcol = *wxBLACK;
-                image.SetRGB(x, y, pixcol.Red(), pixcol.Green(), pixcol.Blue());
+                }
+
+                image.SetRGB ( x, y, pixcol.Red(), pixcol.Green(), pixcol.Blue() );
             }
-        return wxBitmap(image);
+
+        return wxBitmap ( image );
     }
 
     void UpdateColors()
     {
-        wxColour bk = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_BACKGROUND_COLOUR);
-        m_background_color->SetBitmapLabel(CreateColorBitmap(bk));
+        wxColour bk = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_BACKGROUND_COLOUR );
+        m_backgroundColor->SetBitmapLabel ( CreateColorBitmap ( bk ) );
 
-        wxColour cap = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR);
-        m_inactive_caption_color->SetBitmapLabel(CreateColorBitmap(cap));
+        wxColour cap = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR );
+        m_inactiveCaptionColor->SetBitmapLabel ( CreateColorBitmap ( cap ) );
 
-        wxColour capgrad = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR);
-        m_inactive_caption_gradient_color->SetBitmapLabel(CreateColorBitmap(capgrad));
+        wxColour capgrad = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR );
+        m_inactiveCaptionGradientColor->SetBitmapLabel ( CreateColorBitmap ( capgrad ) );
 
-        wxColour captxt = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR);
-        m_inactive_caption_text_color->SetBitmapLabel(CreateColorBitmap(captxt));
+        wxColour captxt = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR );
+        m_inactiveCaptionTextColor->SetBitmapLabel ( CreateColorBitmap ( captxt ) );
 
-        wxColour acap = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR);
-        m_active_caption_color->SetBitmapLabel(CreateColorBitmap(acap));
+        wxColour acap = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR );
+        m_activeCaptionColor->SetBitmapLabel ( CreateColorBitmap ( acap ) );
 
-        wxColour acapgrad = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR);
-        m_active_caption_gradient_color->SetBitmapLabel(CreateColorBitmap(acapgrad));
+        wxColour acapgrad = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR );
+        m_activeCaptionGradientColor->SetBitmapLabel ( CreateColorBitmap ( acapgrad ) );
 
-        wxColour acaptxt = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR);
-        m_active_caption_text_color->SetBitmapLabel(CreateColorBitmap(acaptxt));
+        wxColour acaptxt = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR );
+        m_activeCaptionTextColor->SetBitmapLabel ( CreateColorBitmap ( acaptxt ) );
 
-        wxColour sash = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_SASH_COLOUR);
-        m_sash_color->SetBitmapLabel(CreateColorBitmap(sash));
+        wxColour sash = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_SASH_COLOUR );
+        m_sashColor->SetBitmapLabel ( CreateColorBitmap ( sash ) );
 
-        wxColour border = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_BORDER_COLOUR);
-        m_border_color->SetBitmapLabel(CreateColorBitmap(border));
+        wxColour border = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_BORDER_COLOUR );
+        m_borderColor->SetBitmapLabel ( CreateColorBitmap ( border ) );
 
-        wxColour gripper = m_frame->GetDockArt()->GetColor(wxAUI_DOCKART_GRIPPER_COLOUR);
-        m_gripper_color->SetBitmapLabel(CreateColorBitmap(gripper));
+        wxColour gripper = m_frame->GetDockArt()->GetColor ( wxAUI_DOCKART_GRIPPER_COLOUR );
+        m_gripperColor->SetBitmapLabel ( CreateColorBitmap ( gripper ) );
     }
 
-    void OnPaneBorderSize(wxSpinEvent& event)
+    void OnPaneBorderSize ( wxSpinEvent & event )
     {
-        m_frame->GetDockArt()->SetMetric(wxAUI_DOCKART_PANE_BORDER_SIZE,
-                                         event.GetPosition());
+        m_frame->GetDockArt()->SetMetric ( wxAUI_DOCKART_PANE_BORDER_SIZE,
+                                           event.GetPosition() );
         m_frame->DoUpdate();
     }
 
-    void OnSashSize(wxSpinEvent& event)
+    void OnSashSize ( wxSpinEvent & event )
     {
-        m_frame->GetDockArt()->SetMetric(wxAUI_DOCKART_SASH_SIZE,
-                                         event.GetPosition());
+        m_frame->GetDockArt()->SetMetric ( wxAUI_DOCKART_SASH_SIZE,
+                                           event.GetPosition() );
         m_frame->DoUpdate();
     }
 
-    void OnCaptionSize(wxSpinEvent& event)
+    void OnCaptionSize ( wxSpinEvent & event )
     {
-        m_frame->GetDockArt()->SetMetric(wxAUI_DOCKART_CAPTION_SIZE,
-                                         event.GetPosition());
+        m_frame->GetDockArt()->SetMetric ( wxAUI_DOCKART_CAPTION_SIZE,
+                                           event.GetPosition() );
         m_frame->DoUpdate();
     }
 
-    void OnSetColor(wxCommandEvent& event)
+    void OnSetColor ( wxCommandEvent & event )
     {
-        wxColourDialog dlg(m_frame);
-        dlg.SetTitle(_("Color Picker"));
-        if (dlg.ShowModal() != wxID_OK)
+        wxColourDialog dlg ( m_frame );
+        dlg.SetTitle ( _ ( "Color Picker" ) );
+
+        if ( dlg.ShowModal() != wxID_OK )
+        {
             return;
+        }
 
         int var = 0;
-        switch (event.GetId())
+
+        switch ( event.GetId() )
         {
             case ID_BackgroundColor:              var = wxAUI_DOCKART_BACKGROUND_COLOUR; break;
+
             case ID_SashColor:                    var = wxAUI_DOCKART_SASH_COLOUR; break;
+
             case ID_InactiveCaptionColor:         var = wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR; break;
+
             case ID_InactiveCaptionGradientColor: var = wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR; break;
+
             case ID_InactiveCaptionTextColor:     var = wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR; break;
+
             case ID_ActiveCaptionColor:           var = wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR; break;
+
             case ID_ActiveCaptionGradientColor:   var = wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR; break;
+
             case ID_ActiveCaptionTextColor:       var = wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR; break;
+
             case ID_BorderColor:                  var = wxAUI_DOCKART_BORDER_COLOUR; break;
+
             case ID_GripperColor:                 var = wxAUI_DOCKART_GRIPPER_COLOUR; break;
+
             default: return;
         }
 
-        m_frame->GetDockArt()->SetColor(var, dlg.GetColourData().GetColour());
+        m_frame->GetDockArt()->SetColor ( var, dlg.GetColourData().GetColour() );
         m_frame->DoUpdate();
         UpdateColors();
     }
 
 private:
 
-    MyFrame* m_frame;
-    wxSpinCtrl* m_border_size;
-    wxSpinCtrl* m_sash_size;
-    wxSpinCtrl* m_caption_size;
-    wxBitmapButton* m_inactive_caption_text_color;
-    wxBitmapButton* m_inactive_caption_gradient_color;
-    wxBitmapButton* m_inactive_caption_color;
-    wxBitmapButton* m_active_caption_text_color;
-    wxBitmapButton* m_active_caption_gradient_color;
-    wxBitmapButton* m_active_caption_color;
-    wxBitmapButton* m_sash_color;
-    wxBitmapButton* m_background_color;
-    wxBitmapButton* m_border_color;
-    wxBitmapButton* m_gripper_color;
+    MyFrame * m_frame;
+    wxSpinCtrl * m_borderSize;
+    wxSpinCtrl * m_sashSize;
+    wxSpinCtrl * m_captionSize;
+    wxBitmapButton * m_inactiveCaptionTextColor;
+    wxBitmapButton * m_inactiveCaptionGradientColor;
+    wxBitmapButton * m_inactiveCaptionColor;
+    wxBitmapButton * m_activeCaptionTextColor;
+    wxBitmapButton * m_activeCaptionGradientColor;
+    wxBitmapButton * m_activeCaptionColor;
+    wxBitmapButton * m_sashColor;
+    wxBitmapButton * m_backgroundColor;
+    wxBitmapButton * m_borderColor;
+    wxBitmapButton * m_gripperColor;
 
     DECLARE_EVENT_TABLE()
 };
 
-BEGIN_EVENT_TABLE(SettingsPanel, wxPanel)
-    EVT_SPINCTRL(ID_PaneBorderSize, SettingsPanel::OnPaneBorderSize)
-    EVT_SPINCTRL(ID_SashSize, SettingsPanel::OnSashSize)
-    EVT_SPINCTRL(ID_CaptionSize, SettingsPanel::OnCaptionSize)
-    EVT_BUTTON(ID_BackgroundColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_SashColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_InactiveCaptionColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_InactiveCaptionGradientColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_InactiveCaptionTextColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_ActiveCaptionColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_ActiveCaptionGradientColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_ActiveCaptionTextColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_BorderColor, SettingsPanel::OnSetColor)
-    EVT_BUTTON(ID_GripperColor, SettingsPanel::OnSetColor)
+BEGIN_EVENT_TABLE ( SettingsPanel, wxPanel )
+    EVT_SPINCTRL ( ID_PaneBorderSize, SettingsPanel::OnPaneBorderSize )
+    EVT_SPINCTRL ( ID_SashSize, SettingsPanel::OnSashSize )
+    EVT_SPINCTRL ( ID_CaptionSize, SettingsPanel::OnCaptionSize )
+    EVT_BUTTON ( ID_BackgroundColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_SashColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_InactiveCaptionColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_InactiveCaptionGradientColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_InactiveCaptionTextColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_ActiveCaptionColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_ActiveCaptionGradientColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_ActiveCaptionTextColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_BorderColor, SettingsPanel::OnSetColor )
+    EVT_BUTTON ( ID_GripperColor, SettingsPanel::OnSetColor )
 END_EVENT_TABLE()
 
 
 bool MyApp::OnInit()
 {
     if ( !wxApp::OnInit() )
+    {
         return false;
+    }
 
-    wxFrame* frame = new MyFrame(NULL,
-                                 wxID_ANY,
-                                 wxT("wxAUI Sample Application"),
-                                 wxDefaultPosition,
-                                 wxSize(800, 600));
+    wxFrame * frame = new MyFrame ( NULL,
+                                    wxID_ANY,
+                                    wxT ( "wxAUI Sample Application" ),
+                                    wxDefaultPosition,
+                                    wxSize ( 800, 600 ) );
     frame->Show();
 
     return true;
 }
 
-BEGIN_EVENT_TABLE(MyFrame, wxFrame)
-    EVT_ERASE_BACKGROUND(MyFrame::OnEraseBackground)
-    EVT_SIZE(MyFrame::OnSize)
-    EVT_MENU(MyFrame::ID_CreateTree, MyFrame::OnCreateTree)
-    EVT_MENU(MyFrame::ID_CreateGrid, MyFrame::OnCreateGrid)
-    EVT_MENU(MyFrame::ID_CreateText, MyFrame::OnCreateText)
-    EVT_MENU(MyFrame::ID_CreateHTML, MyFrame::OnCreateHTML)
-    EVT_MENU(MyFrame::ID_CreateSizeReport, MyFrame::OnCreateSizeReport)
-    EVT_MENU(MyFrame::ID_CreateNotebook, MyFrame::OnCreateNotebook)
-    EVT_MENU(MyFrame::ID_CreatePerspective, MyFrame::OnCreatePerspective)
-    EVT_MENU(MyFrame::ID_CopyPerspectiveCode, MyFrame::OnCopyPerspectiveCode)
-    EVT_MENU(ID_AllowFloating, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_TransparentHint, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_VenetianBlindsHint, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_RectangleHint, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_NoHint, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_HintFade, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_NoVenetianFade, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_TransparentDrag, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_LiveUpdate, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_AllowActivePane, MyFrame::OnManagerFlag)
-    EVT_MENU(ID_NotebookTabFixedWidth, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookNoCloseButton, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookCloseButton, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookCloseButtonAll, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookCloseButtonActive, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookAllowTabMove, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookAllowTabExternalMove, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookAllowTabSplit, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookScrollButtons, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookWindowList, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookArtGloss, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookArtSimple, MyFrame::OnNotebookFlag)
-    EVT_MENU(ID_NotebookAlignTop,     MyFrame::OnTabAlignment)
-    EVT_MENU(ID_NotebookAlignBottom,  MyFrame::OnTabAlignment)
-    EVT_MENU(ID_NoGradient, MyFrame::OnGradient)
-    EVT_MENU(ID_VerticalGradient, MyFrame::OnGradient)
-    EVT_MENU(ID_HorizontalGradient, MyFrame::OnGradient)
-    EVT_MENU(ID_AllowToolbarResizing, MyFrame::OnToolbarResizing)
-    EVT_MENU(ID_Settings, MyFrame::OnSettings)
-    EVT_MENU(ID_CustomizeToolbar, MyFrame::OnCustomizeToolbar)
-    EVT_MENU(ID_GridContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(ID_TreeContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(ID_TextContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(ID_SizeReportContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(ID_HTMLContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(ID_NotebookContent, MyFrame::OnChangeContentPane)
-    EVT_MENU(wxID_EXIT, MyFrame::OnExit)
-    EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
-    EVT_UPDATE_UI(ID_NotebookTabFixedWidth, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookNoCloseButton, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookCloseButton, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookCloseButtonAll, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookCloseButtonActive, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookAllowTabMove, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookAllowTabExternalMove, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookAllowTabSplit, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookScrollButtons, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NotebookWindowList, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_AllowFloating, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_TransparentHint, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_VenetianBlindsHint, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_RectangleHint, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NoHint, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_HintFade, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NoVenetianFade, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_TransparentDrag, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_LiveUpdate, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_NoGradient, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_VerticalGradient, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_HorizontalGradient, MyFrame::OnUpdateUI)
-    EVT_UPDATE_UI(ID_AllowToolbarResizing, MyFrame::OnUpdateUI)
-    EVT_MENU_RANGE(MyFrame::ID_FirstPerspective, MyFrame::ID_FirstPerspective+1000,
-                   MyFrame::OnRestorePerspective)
-    EVT_AUITOOLBAR_TOOL_DROPDOWN(ID_DropDownToolbarItem, MyFrame::OnDropDownToolbarItem)
-    EVT_AUI_PANE_CLOSE(MyFrame::OnPaneClose)
-    EVT_AUINOTEBOOK_ALLOW_DND(wxID_ANY, MyFrame::OnAllowNotebookDnD)
-    EVT_AUINOTEBOOK_PAGE_CLOSE(wxID_ANY, MyFrame::OnNotebookPageClose)
-    EVT_AUINOTEBOOK_PAGE_CLOSED(wxID_ANY, MyFrame::OnNotebookPageClosed)
+BEGIN_EVENT_TABLE ( MyFrame, wxFrame )
+    EVT_ERASE_BACKGROUND ( MyFrame::OnEraseBackground )
+    EVT_SIZE ( MyFrame::OnSize )
+    EVT_MENU ( MyFrame::ID_CreateTree, MyFrame::OnCreateTree )
+    EVT_MENU ( MyFrame::ID_CreateGrid, MyFrame::OnCreateGrid )
+    EVT_MENU ( MyFrame::ID_CreateText, MyFrame::OnCreateText )
+    EVT_MENU ( MyFrame::ID_CreateHTML, MyFrame::OnCreateHTML )
+    EVT_MENU ( MyFrame::ID_CreateSizeReport, MyFrame::OnCreateSizeReport )
+    EVT_MENU ( MyFrame::ID_CreateNotebook, MyFrame::OnCreateNotebook )
+    EVT_MENU ( MyFrame::ID_CreatePerspective, MyFrame::OnCreatePerspective )
+    EVT_MENU ( MyFrame::ID_CopyPerspectiveCode, MyFrame::OnCopyPerspectiveCode )
+    EVT_MENU ( ID_AllowFloating, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_TransparentHint, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_VenetianBlindsHint, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_RectangleHint, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_NoHint, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_HintFade, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_NoVenetianFade, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_TransparentDrag, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_LiveUpdate, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_AllowActivePane, MyFrame::OnManagerFlag )
+    EVT_MENU ( ID_NotebookTabFixedWidth, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookNoCloseButton, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookCloseButton, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookCloseButtonAll, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookCloseButtonActive, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookAllowTabMove, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookAllowTabExternalMove, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookAllowTabSplit, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookScrollButtons, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookWindowList, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookArtGloss, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookArtSimple, MyFrame::OnNotebookFlag )
+    EVT_MENU ( ID_NotebookAlignTop,     MyFrame::OnTabAlignment )
+    EVT_MENU ( ID_NotebookAlignBottom,  MyFrame::OnTabAlignment )
+    EVT_MENU ( ID_NoGradient, MyFrame::OnGradient )
+    EVT_MENU ( ID_VerticalGradient, MyFrame::OnGradient )
+    EVT_MENU ( ID_HorizontalGradient, MyFrame::OnGradient )
+    EVT_MENU ( ID_AllowToolbarResizing, MyFrame::OnToolbarResizing )
+    EVT_MENU ( ID_Settings, MyFrame::OnSettings )
+    EVT_MENU ( ID_CustomizeToolbar, MyFrame::OnCustomizeToolbar )
+    EVT_MENU ( ID_GridContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( ID_TreeContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( ID_TextContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( ID_SizeReportContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( ID_HTMLContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( ID_NotebookContent, MyFrame::OnChangeContentPane )
+    EVT_MENU ( wxID_EXIT, MyFrame::OnExit )
+    EVT_MENU ( wxID_ABOUT, MyFrame::OnAbout )
+    EVT_UPDATE_UI ( ID_NotebookTabFixedWidth, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookNoCloseButton, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookCloseButton, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookCloseButtonAll, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookCloseButtonActive, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookAllowTabMove, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookAllowTabExternalMove, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookAllowTabSplit, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookScrollButtons, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NotebookWindowList, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_AllowFloating, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_TransparentHint, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_VenetianBlindsHint, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_RectangleHint, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NoHint, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_HintFade, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NoVenetianFade, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_TransparentDrag, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_LiveUpdate, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_NoGradient, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_VerticalGradient, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_HorizontalGradient, MyFrame::OnUpdateUI )
+    EVT_UPDATE_UI ( ID_AllowToolbarResizing, MyFrame::OnUpdateUI )
+    EVT_MENU_RANGE ( MyFrame::ID_FirstPerspective, MyFrame::ID_FirstPerspective + 1000,
+                     MyFrame::OnRestorePerspective )
+    EVT_AUITOOLBAR_TOOL_DROPDOWN ( ID_DropDownToolbarItem, MyFrame::OnDropDownToolbarItem )
+    EVT_AUI_PANE_CLOSE ( MyFrame::OnPaneClose )
+    EVT_AUINOTEBOOK_ALLOW_DND ( wxID_ANY, MyFrame::OnAllowNotebookDnD )
+    EVT_AUINOTEBOOK_PAGE_CLOSE ( wxID_ANY, MyFrame::OnNotebookPageClose )
+    EVT_AUINOTEBOOK_PAGE_CLOSED ( wxID_ANY, MyFrame::OnNotebookPageClosed )
 END_EVENT_TABLE()
 
 
-MyFrame::MyFrame(wxWindow* parent,
-                 wxWindowID id,
-                 const wxString& title,
-                 const wxPoint& pos,
-                 const wxSize& size,
-                 long style)
-        : wxFrame(parent, id, title, pos, size, style)
+MyFrame::MyFrame ( wxWindow * parent,
+                   wxWindowID id,
+                   const wxString & title,
+                   const wxPoint & pos,
+                   const wxSize & size,
+                   long style )
+    : wxFrame ( parent, id, title, pos, size, style )
 {
     // tell wxAuiManager to manage this frame
-    m_mgr.SetManagedWindow(this);
+    m_mgr.SetManagedWindow ( this );
 
     // set frame icon
-    SetIcon(wxIcon(sample_xpm));
+    SetIcon ( wxIcon ( sample_xpm ) );
 
     // set up default notebook style
-    m_notebook_style = wxAUI_NB_DEFAULT_STYLE | wxAUI_NB_TAB_EXTERNAL_MOVE | wxNO_BORDER;
-    m_notebook_theme = 0;
+    m_notebookStyle = wxAUI_NB_DEFAULT_STYLE | wxAUI_NB_TAB_EXTERNAL_MOVE | wxNO_BORDER;
+    m_notebookTheme = 0;
 
     // create menu
-    wxMenuBar* mb = new wxMenuBar;
+    wxMenuBar * mb = new wxMenuBar;
 
-    wxMenu* file_menu = new wxMenu;
-    file_menu->Append(wxID_EXIT);
+    wxMenu * fileMenu = new wxMenu;
+    fileMenu->Append ( wxID_EXIT );
 
-    wxMenu* view_menu = new wxMenu;
-    view_menu->Append(ID_CreateText, _("Create Text Control"));
-    view_menu->Append(ID_CreateHTML, _("Create HTML Control"));
-    view_menu->Append(ID_CreateTree, _("Create Tree"));
-    view_menu->Append(ID_CreateGrid, _("Create Grid"));
-    view_menu->Append(ID_CreateNotebook, _("Create Notebook"));
-    view_menu->Append(ID_CreateSizeReport, _("Create Size Reporter"));
-    view_menu->AppendSeparator();
-    view_menu->Append(ID_GridContent, _("Use a Grid for the Content Pane"));
-    view_menu->Append(ID_TextContent, _("Use a Text Control for the Content Pane"));
-    view_menu->Append(ID_HTMLContent, _("Use an HTML Control for the Content Pane"));
-    view_menu->Append(ID_TreeContent, _("Use a Tree Control for the Content Pane"));
-    view_menu->Append(ID_NotebookContent, _("Use a wxAuiNotebook control for the Content Pane"));
-    view_menu->Append(ID_SizeReportContent, _("Use a Size Reporter for the Content Pane"));
+    wxMenu * viewMenu = new wxMenu;
+    viewMenu->Append ( ID_CreateText, _ ( "Create Text Control" ) );
+    viewMenu->Append ( ID_CreateHTML, _ ( "Create HTML Control" ) );
+    viewMenu->Append ( ID_CreateTree, _ ( "Create Tree" ) );
+    viewMenu->Append ( ID_CreateGrid, _ ( "Create Grid" ) );
+    viewMenu->Append ( ID_CreateNotebook, _ ( "Create Notebook" ) );
+    viewMenu->Append ( ID_CreateSizeReport, _ ( "Create Size Reporter" ) );
+    viewMenu->AppendSeparator();
+    viewMenu->Append ( ID_GridContent, _ ( "Use a Grid for the Content Pane" ) );
+    viewMenu->Append ( ID_TextContent, _ ( "Use a Text Control for the Content Pane" ) );
+    viewMenu->Append ( ID_HTMLContent, _ ( "Use an HTML Control for the Content Pane" ) );
+    viewMenu->Append ( ID_TreeContent, _ ( "Use a Tree Control for the Content Pane" ) );
+    viewMenu->Append ( ID_NotebookContent, _ ( "Use a wxAuiNotebook control for the Content Pane" ) );
+    viewMenu->Append ( ID_SizeReportContent, _ ( "Use a Size Reporter for the Content Pane" ) );
 
-    wxMenu* options_menu = new wxMenu;
-    options_menu->AppendRadioItem(ID_TransparentHint, _("Transparent Hint"));
-    options_menu->AppendRadioItem(ID_VenetianBlindsHint, _("Venetian Blinds Hint"));
-    options_menu->AppendRadioItem(ID_RectangleHint, _("Rectangle Hint"));
-    options_menu->AppendRadioItem(ID_NoHint, _("No Hint"));
-    options_menu->AppendSeparator();
-    options_menu->AppendCheckItem(ID_HintFade, _("Hint Fade-in"));
-    options_menu->AppendCheckItem(ID_AllowFloating, _("Allow Floating"));
-    options_menu->AppendCheckItem(ID_NoVenetianFade, _("Disable Venetian Blinds Hint Fade-in"));
-    options_menu->AppendCheckItem(ID_TransparentDrag, _("Transparent Drag"));
-    options_menu->AppendCheckItem(ID_AllowActivePane, _("Allow Active Pane"));
-    options_menu->AppendCheckItem(ID_LiveUpdate, _("Live Resize Update"));
-    options_menu->AppendSeparator();
-    options_menu->AppendRadioItem(ID_NoGradient, _("No Caption Gradient"));
-    options_menu->AppendRadioItem(ID_VerticalGradient, _("Vertical Caption Gradient"));
-    options_menu->AppendRadioItem(ID_HorizontalGradient, _("Horizontal Caption Gradient"));
-    options_menu->AppendSeparator();
-    options_menu->AppendCheckItem(ID_AllowToolbarResizing, _("Allow Toolbar Resizing"));
-    options_menu->AppendSeparator();
-    options_menu->Append(ID_Settings, _("Settings Pane"));
+    wxMenu * optionsMenu = new wxMenu;
+    optionsMenu->AppendRadioItem ( ID_TransparentHint, _ ( "Transparent Hint" ) );
+    optionsMenu->AppendRadioItem ( ID_VenetianBlindsHint, _ ( "Venetian Blinds Hint" ) );
+    optionsMenu->AppendRadioItem ( ID_RectangleHint, _ ( "Rectangle Hint" ) );
+    optionsMenu->AppendRadioItem ( ID_NoHint, _ ( "No Hint" ) );
+    optionsMenu->AppendSeparator();
+    optionsMenu->AppendCheckItem ( ID_HintFade, _ ( "Hint Fade-in" ) );
+    optionsMenu->AppendCheckItem ( ID_AllowFloating, _ ( "Allow Floating" ) );
+    optionsMenu->AppendCheckItem ( ID_NoVenetianFade, _ ( "Disable Venetian Blinds Hint Fade-in" ) );
+    optionsMenu->AppendCheckItem ( ID_TransparentDrag, _ ( "Transparent Drag" ) );
+    optionsMenu->AppendCheckItem ( ID_AllowActivePane, _ ( "Allow Active Pane" ) );
+    optionsMenu->AppendCheckItem ( ID_LiveUpdate, _ ( "Live Resize Update" ) );
+    optionsMenu->AppendSeparator();
+    optionsMenu->AppendRadioItem ( ID_NoGradient, _ ( "No Caption Gradient" ) );
+    optionsMenu->AppendRadioItem ( ID_VerticalGradient, _ ( "Vertical Caption Gradient" ) );
+    optionsMenu->AppendRadioItem ( ID_HorizontalGradient, _ ( "Horizontal Caption Gradient" ) );
+    optionsMenu->AppendSeparator();
+    optionsMenu->AppendCheckItem ( ID_AllowToolbarResizing, _ ( "Allow Toolbar Resizing" ) );
+    optionsMenu->AppendSeparator();
+    optionsMenu->Append ( ID_Settings, _ ( "Settings Pane" ) );
 
-    wxMenu* notebook_menu = new wxMenu;
-    notebook_menu->AppendRadioItem(ID_NotebookArtGloss, _("Glossy Theme (Default)"));
-    notebook_menu->AppendRadioItem(ID_NotebookArtSimple, _("Simple Theme"));
-    notebook_menu->AppendSeparator();
-    notebook_menu->AppendRadioItem(ID_NotebookNoCloseButton, _("No Close Button"));
-    notebook_menu->AppendRadioItem(ID_NotebookCloseButton, _("Close Button at Right"));
-    notebook_menu->AppendRadioItem(ID_NotebookCloseButtonAll, _("Close Button on All Tabs"));
-    notebook_menu->AppendRadioItem(ID_NotebookCloseButtonActive, _("Close Button on Active Tab"));
-    notebook_menu->AppendSeparator();
-    notebook_menu->AppendRadioItem(ID_NotebookAlignTop, _("Tab Top Alignment"));
-    notebook_menu->AppendRadioItem(ID_NotebookAlignBottom, _("Tab Bottom Alignment"));
-    notebook_menu->AppendSeparator();
-    notebook_menu->AppendCheckItem(ID_NotebookAllowTabMove, _("Allow Tab Move"));
-    notebook_menu->AppendCheckItem(ID_NotebookAllowTabExternalMove, _("Allow External Tab Move"));
-    notebook_menu->AppendCheckItem(ID_NotebookAllowTabSplit, _("Allow Notebook Split"));
-    notebook_menu->AppendCheckItem(ID_NotebookScrollButtons, _("Scroll Buttons Visible"));
-    notebook_menu->AppendCheckItem(ID_NotebookWindowList, _("Window List Button Visible"));
-    notebook_menu->AppendCheckItem(ID_NotebookTabFixedWidth, _("Fixed-width Tabs"));
+    wxMenu * notebookMenu = new wxMenu;
+    notebookMenu->AppendRadioItem ( ID_NotebookArtGloss, _ ( "Glossy Theme (Default)" ) );
+    notebookMenu->AppendRadioItem ( ID_NotebookArtSimple, _ ( "Simple Theme" ) );
+    notebookMenu->AppendSeparator();
+    notebookMenu->AppendRadioItem ( ID_NotebookNoCloseButton, _ ( "No Close Button" ) );
+    notebookMenu->AppendRadioItem ( ID_NotebookCloseButton, _ ( "Close Button at Right" ) );
+    notebookMenu->AppendRadioItem ( ID_NotebookCloseButtonAll, _ ( "Close Button on All Tabs" ) );
+    notebookMenu->AppendRadioItem ( ID_NotebookCloseButtonActive, _ ( "Close Button on Active Tab" ) );
+    notebookMenu->AppendSeparator();
+    notebookMenu->AppendRadioItem ( ID_NotebookAlignTop, _ ( "Tab Top Alignment" ) );
+    notebookMenu->AppendRadioItem ( ID_NotebookAlignBottom, _ ( "Tab Bottom Alignment" ) );
+    notebookMenu->AppendSeparator();
+    notebookMenu->AppendCheckItem ( ID_NotebookAllowTabMove, _ ( "Allow Tab Move" ) );
+    notebookMenu->AppendCheckItem ( ID_NotebookAllowTabExternalMove, _ ( "Allow External Tab Move" ) );
+    notebookMenu->AppendCheckItem ( ID_NotebookAllowTabSplit, _ ( "Allow Notebook Split" ) );
+    notebookMenu->AppendCheckItem ( ID_NotebookScrollButtons, _ ( "Scroll Buttons Visible" ) );
+    notebookMenu->AppendCheckItem ( ID_NotebookWindowList, _ ( "Window List Button Visible" ) );
+    notebookMenu->AppendCheckItem ( ID_NotebookTabFixedWidth, _ ( "Fixed-width Tabs" ) );
 
-    m_perspectives_menu = new wxMenu;
-    m_perspectives_menu->Append(ID_CreatePerspective, _("Create Perspective"));
-    m_perspectives_menu->Append(ID_CopyPerspectiveCode, _("Copy Perspective Data To Clipboard"));
-    m_perspectives_menu->AppendSeparator();
-    m_perspectives_menu->Append(ID_FirstPerspective+0, _("Default Startup"));
-    m_perspectives_menu->Append(ID_FirstPerspective+1, _("All Panes"));
+    m_perspectivesMenu = new wxMenu;
+    m_perspectivesMenu->Append ( ID_CreatePerspective, _ ( "Create Perspective" ) );
+    m_perspectivesMenu->Append ( ID_CopyPerspectiveCode, _ ( "Copy Perspective Data To Clipboard" ) );
+    m_perspectivesMenu->AppendSeparator();
+    m_perspectivesMenu->Append ( ID_FirstPerspective + 0, _ ( "Default Startup" ) );
+    m_perspectivesMenu->Append ( ID_FirstPerspective + 1, _ ( "All Panes" ) );
 
-    wxMenu* help_menu = new wxMenu;
-    help_menu->Append(wxID_ABOUT);
+    wxMenu * helpMenu = new wxMenu;
+    helpMenu->Append ( wxID_ABOUT );
 
-    mb->Append(file_menu, _("&File"));
-    mb->Append(view_menu, _("&View"));
-    mb->Append(m_perspectives_menu, _("&Perspectives"));
-    mb->Append(options_menu, _("&Options"));
-    mb->Append(notebook_menu, _("&Notebook"));
-    mb->Append(help_menu, _("&Help"));
+    mb->Append ( fileMenu, _ ( "&File" ) );
+    mb->Append ( viewMenu, _ ( "&View" ) );
+    mb->Append ( m_perspectivesMenu, _ ( "&Perspectives" ) );
+    mb->Append ( optionsMenu, _ ( "&Options" ) );
+    mb->Append ( notebookMenu, _ ( "&Notebook" ) );
+    mb->Append ( helpMenu, _ ( "&Help" ) );
 
-    SetMenuBar(mb);
+    SetMenuBar ( mb );
 
     CreateStatusBar();
-    GetStatusBar()->SetStatusText(_("Ready"));
+    GetStatusBar()->SetStatusText ( _ ( "Ready" ) );
 
 
     // min size for the frame itself isn't completely done.
     // see the end up wxAuiManager::Update() for the test
     // code. For now, just hard code a frame minimum size
-    SetMinSize(wxSize(400,300));
+    SetMinSize ( wxSize ( 400, 300 ) );
 
 
 
     // prepare a few custom overflow elements for the toolbars' overflow buttons
 
-    wxAuiToolBarItemArray prepend_items;
-    wxAuiToolBarItemArray append_items;
+    wxAuiToolBarItemArray prependItems;
+    wxAuiToolBarItemArray appendItems;
     wxAuiToolBarItem item;
-    item.SetKind(wxITEM_SEPARATOR);
-    append_items.Add(item);
-    item.SetKind(wxITEM_NORMAL);
-    item.SetId(ID_CustomizeToolbar);
-    item.SetLabel(_("Customize..."));
-    append_items.Add(item);
+    item.SetKind ( wxITEM_SEPARATOR );
+    appendItems.Add ( item );
+    item.SetKind ( wxITEM_NORMAL );
+    item.SetId ( ID_CustomizeToolbar );
+    item.SetLabel ( _ ( "Customize..." ) );
+    appendItems.Add ( item );
 
 
     // create some toolbars
-    wxAuiToolBar* tb1 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW);
-    tb1->SetToolBitmapSize(wxSize(48,48));
-    tb1->AddTool(ID_SampleItem+1, wxT("Test"), wxArtProvider::GetBitmap(wxART_ERROR));
+    wxAuiToolBar * tb1 = new wxAuiToolBar ( this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                            wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW );
+    tb1->SetToolBitmapSize ( wxSize ( 48, 48 ) );
+    tb1->AddTool ( ID_SampleItem + 1, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_ERROR ) );
     tb1->AddSeparator();
-    tb1->AddTool(ID_SampleItem+2, wxT("Test"), wxArtProvider::GetBitmap(wxART_QUESTION));
-    tb1->AddTool(ID_SampleItem+3, wxT("Test"), wxArtProvider::GetBitmap(wxART_INFORMATION));
-    tb1->AddTool(ID_SampleItem+4, wxT("Test"), wxArtProvider::GetBitmap(wxART_WARNING));
-    tb1->AddTool(ID_SampleItem+5, wxT("Test"), wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
-    tb1->SetCustomOverflowItems(prepend_items, append_items);
+    tb1->AddTool ( ID_SampleItem + 2, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_QUESTION ) );
+    tb1->AddTool ( ID_SampleItem + 3, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_INFORMATION ) );
+    tb1->AddTool ( ID_SampleItem + 4, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_WARNING ) );
+    tb1->AddTool ( ID_SampleItem + 5, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_MISSING_IMAGE ) );
+    tb1->SetCustomOverflowItems ( prependItems, appendItems );
     tb1->Realize();
 
 
-    wxAuiToolBar* tb2 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_HORIZONTAL);
-    tb2->SetToolBitmapSize(wxSize(16,16));
+    wxAuiToolBar * tb2 = new wxAuiToolBar ( this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                            wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_HORIZONTAL );
+    tb2->SetToolBitmapSize ( wxSize ( 16, 16 ) );
 
-    wxBitmap tb2_bmp1 = wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16));
-    tb2->AddTool(ID_SampleItem+6, wxT("Disabled"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+7, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+8, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+9, wxT("Test"), tb2_bmp1);
+    wxBitmap tb2Bmp1 = wxArtProvider::GetBitmap ( wxART_QUESTION, wxART_OTHER, wxSize ( 16, 16 ) );
+    tb2->AddTool ( ID_SampleItem + 6, wxT ( "Disabled" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 7, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 8, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 9, wxT ( "Test" ), tb2Bmp1 );
     tb2->AddSeparator();
-    tb2->AddTool(ID_SampleItem+10, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+11, wxT("Test"), tb2_bmp1);
+    tb2->AddTool ( ID_SampleItem + 10, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 11, wxT ( "Test" ), tb2Bmp1 );
     tb2->AddSeparator();
-    tb2->AddTool(ID_SampleItem+12, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+13, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+14, wxT("Test"), tb2_bmp1);
-    tb2->AddTool(ID_SampleItem+15, wxT("Test"), tb2_bmp1);
-    tb2->SetCustomOverflowItems(prepend_items, append_items);
-    tb2->EnableTool(ID_SampleItem+6, false);
+    tb2->AddTool ( ID_SampleItem + 12, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 13, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 14, wxT ( "Test" ), tb2Bmp1 );
+    tb2->AddTool ( ID_SampleItem + 15, wxT ( "Test" ), tb2Bmp1 );
+    tb2->SetCustomOverflowItems ( prependItems, appendItems );
+    tb2->EnableTool ( ID_SampleItem + 6, false );
     tb2->Realize();
 
 
-    wxAuiToolBar* tb3 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW);
-    tb3->SetToolBitmapSize(wxSize(16,16));
-    wxBitmap tb3_bmp1 = wxArtProvider::GetBitmap(wxART_FOLDER, wxART_OTHER, wxSize(16,16));
-    tb3->AddTool(ID_SampleItem+16, wxT("Check 1"), tb3_bmp1, wxT("Check 1"), wxITEM_CHECK);
-    tb3->AddTool(ID_SampleItem+17, wxT("Check 2"), tb3_bmp1, wxT("Check 2"), wxITEM_CHECK);
-    tb3->AddTool(ID_SampleItem+18, wxT("Check 3"), tb3_bmp1, wxT("Check 3"), wxITEM_CHECK);
-    tb3->AddTool(ID_SampleItem+19, wxT("Check 4"), tb3_bmp1, wxT("Check 4"), wxITEM_CHECK);
+    wxAuiToolBar * tb3 = new wxAuiToolBar ( this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                            wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW );
+    tb3->SetToolBitmapSize ( wxSize ( 16, 16 ) );
+    wxBitmap tb3Bmp1 = wxArtProvider::GetBitmap ( wxART_FOLDER, wxART_OTHER, wxSize ( 16, 16 ) );
+    tb3->AddTool ( ID_SampleItem + 16, wxT ( "Check 1" ), tb3Bmp1, wxT ( "Check 1" ), wxITEM_CHECK );
+    tb3->AddTool ( ID_SampleItem + 17, wxT ( "Check 2" ), tb3Bmp1, wxT ( "Check 2" ), wxITEM_CHECK );
+    tb3->AddTool ( ID_SampleItem + 18, wxT ( "Check 3" ), tb3Bmp1, wxT ( "Check 3" ), wxITEM_CHECK );
+    tb3->AddTool ( ID_SampleItem + 19, wxT ( "Check 4" ), tb3Bmp1, wxT ( "Check 4" ), wxITEM_CHECK );
     tb3->AddSeparator();
-    tb3->AddTool(ID_SampleItem+20, wxT("Radio 1"), tb3_bmp1, wxT("Radio 1"), wxITEM_RADIO);
-    tb3->AddTool(ID_SampleItem+21, wxT("Radio 2"), tb3_bmp1, wxT("Radio 2"), wxITEM_RADIO);
-    tb3->AddTool(ID_SampleItem+22, wxT("Radio 3"), tb3_bmp1, wxT("Radio 3"), wxITEM_RADIO);
+    tb3->AddTool ( ID_SampleItem + 20, wxT ( "Radio 1" ), tb3Bmp1, wxT ( "Radio 1" ), wxITEM_RADIO );
+    tb3->AddTool ( ID_SampleItem + 21, wxT ( "Radio 2" ), tb3Bmp1, wxT ( "Radio 2" ), wxITEM_RADIO );
+    tb3->AddTool ( ID_SampleItem + 22, wxT ( "Radio 3" ), tb3Bmp1, wxT ( "Radio 3" ), wxITEM_RADIO );
     tb3->AddSeparator();
-    tb3->AddTool(ID_SampleItem+23, wxT("Radio 1 (Group 2)"), tb3_bmp1, wxT("Radio 1 (Group 2)"), wxITEM_RADIO);
-    tb3->AddTool(ID_SampleItem+24, wxT("Radio 2 (Group 2)"), tb3_bmp1, wxT("Radio 2 (Group 2)"), wxITEM_RADIO);
-    tb3->AddTool(ID_SampleItem+25, wxT("Radio 3 (Group 2)"), tb3_bmp1, wxT("Radio 3 (Group 2)"), wxITEM_RADIO);
-    tb3->SetCustomOverflowItems(prepend_items, append_items);
+    tb3->AddTool ( ID_SampleItem + 23, wxT ( "Radio 1 (Group 2)" ), tb3Bmp1, wxT ( "Radio 1 (Group 2)" ), wxITEM_RADIO );
+    tb3->AddTool ( ID_SampleItem + 24, wxT ( "Radio 2 (Group 2)" ), tb3Bmp1, wxT ( "Radio 2 (Group 2)" ), wxITEM_RADIO );
+    tb3->AddTool ( ID_SampleItem + 25, wxT ( "Radio 3 (Group 2)" ), tb3Bmp1, wxT ( "Radio 3 (Group 2)" ), wxITEM_RADIO );
+    tb3->SetCustomOverflowItems ( prependItems, appendItems );
     tb3->Realize();
 
 
-    wxAuiToolBar* tb4 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE |
-                                         wxAUI_TB_OVERFLOW |
-                                         wxAUI_TB_TEXT |
-                                         wxAUI_TB_HORZ_TEXT);
-    tb4->SetToolBitmapSize(wxSize(16,16));
-    wxBitmap tb4_bmp1 = wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16));
-    tb4->AddTool(ID_DropDownToolbarItem, wxT("Item 1"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+23, wxT("Item 2"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+24, wxT("Item 3"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+25, wxT("Item 4"), tb4_bmp1);
+    wxAuiToolBar * tb4 = new wxAuiToolBar ( this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                            wxAUI_TB_DEFAULT_STYLE |
+                                            wxAUI_TB_OVERFLOW |
+                                            wxAUI_TB_TEXT |
+                                            wxAUI_TB_HORZ_TEXT );
+    tb4->SetToolBitmapSize ( wxSize ( 16, 16 ) );
+    wxBitmap tb4Bmp1 = wxArtProvider::GetBitmap ( wxART_NORMAL_FILE, wxART_OTHER, wxSize ( 16, 16 ) );
+    tb4->AddTool ( ID_DropDownToolbarItem, wxT ( "Item 1" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 23, wxT ( "Item 2" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 24, wxT ( "Item 3" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 25, wxT ( "Item 4" ), tb4Bmp1 );
     tb4->AddSeparator();
-    tb4->AddTool(ID_SampleItem+26, wxT("Item 5"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+27, wxT("Item 6"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+28, wxT("Item 7"), tb4_bmp1);
-    tb4->AddTool(ID_SampleItem+29, wxT("Item 8"), tb4_bmp1);
-    tb4->SetToolDropDown(ID_DropDownToolbarItem, true);
-    tb4->SetCustomOverflowItems(prepend_items, append_items);
-    wxChoice* choice = new wxChoice(tb4, ID_SampleItem+35);
-    choice->AppendString(wxT("One choice"));
-    choice->AppendString(wxT("Another choice"));
-    tb4->AddControl(choice);
+    tb4->AddTool ( ID_SampleItem + 26, wxT ( "Item 5" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 27, wxT ( "Item 6" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 28, wxT ( "Item 7" ), tb4Bmp1 );
+    tb4->AddTool ( ID_SampleItem + 29, wxT ( "Item 8" ), tb4Bmp1 );
+    tb4->SetToolDropDown ( ID_DropDownToolbarItem, true );
+    tb4->SetCustomOverflowItems ( prependItems, appendItems );
+    wxChoice * choice = new wxChoice ( tb4, ID_SampleItem + 35 );
+    choice->AppendString ( wxT ( "One choice" ) );
+    choice->AppendString ( wxT ( "Another choice" ) );
+    tb4->AddControl ( choice );
     tb4->Realize();
 
 
-    wxAuiToolBar* tb5 = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-                                         wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_VERTICAL);
-    tb5->SetToolBitmapSize(wxSize(48,48));
-    tb5->AddTool(ID_SampleItem+30, wxT("Test"), wxArtProvider::GetBitmap(wxART_ERROR));
+    wxAuiToolBar * tb5 = new wxAuiToolBar ( this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                            wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_OVERFLOW | wxAUI_TB_VERTICAL );
+    tb5->SetToolBitmapSize ( wxSize ( 48, 48 ) );
+    tb5->AddTool ( ID_SampleItem + 30, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_ERROR ) );
     tb5->AddSeparator();
-    tb5->AddTool(ID_SampleItem+31, wxT("Test"), wxArtProvider::GetBitmap(wxART_QUESTION));
-    tb5->AddTool(ID_SampleItem+32, wxT("Test"), wxArtProvider::GetBitmap(wxART_INFORMATION));
-    tb5->AddTool(ID_SampleItem+33, wxT("Test"), wxArtProvider::GetBitmap(wxART_WARNING));
-    tb5->AddTool(ID_SampleItem+34, wxT("Test"), wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
-    tb5->SetCustomOverflowItems(prepend_items, append_items);
+    tb5->AddTool ( ID_SampleItem + 31, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_QUESTION ) );
+    tb5->AddTool ( ID_SampleItem + 32, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_INFORMATION ) );
+    tb5->AddTool ( ID_SampleItem + 33, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_WARNING ) );
+    tb5->AddTool ( ID_SampleItem + 34, wxT ( "Test" ), wxArtProvider::GetBitmap ( wxART_MISSING_IMAGE ) );
+    tb5->SetCustomOverflowItems ( prependItems, appendItems );
     tb5->Realize();
 
     // add a bunch of panes
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test1")).Caption(wxT("Pane Caption")).
-                  Top());
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test1" ) ).Caption ( wxT ( "Pane Caption" ) ).
+                    Top() );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test2")).Caption(wxT("Client Size Reporter")).
-                  Bottom().Position(1).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test2" ) ).Caption ( wxT ( "Client Size Reporter" ) ).
+                    Bottom().Position ( 1 ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test3")).Caption(wxT("Client Size Reporter")).
-                  Bottom().
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test3" ) ).Caption ( wxT ( "Client Size Reporter" ) ).
+                    Bottom().
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test4")).Caption(wxT("Pane Caption")).
-                  Left());
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test4" ) ).Caption ( wxT ( "Pane Caption" ) ).
+                    Left() );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test5")).Caption(wxT("No Close Button")).
-                  Right().CloseButton(false));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test5" ) ).Caption ( wxT ( "No Close Button" ) ).
+                    Right().CloseButton ( false ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test6")).Caption(wxT("Client Size Reporter")).
-                  Right().Row(1).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test6" ) ).Caption ( wxT ( "Client Size Reporter" ) ).
+                    Right().Row ( 1 ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test7")).Caption(wxT("Client Size Reporter")).
-                  Left().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test7" ) ).Caption ( wxT ( "Client Size Reporter" ) ).
+                    Left().Layer ( 1 ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test8")).Caption(wxT("Tree Pane")).
-                  Left().Layer(1).Position(1).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateTreeCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test8" ) ).Caption ( wxT ( "Tree Pane" ) ).
+                    Left().Layer ( 1 ).Position ( 1 ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test9")).Caption(wxT("Min Size 200x100")).
-                  BestSize(wxSize(200,100)).MinSize(wxSize(200,100)).
-                  Bottom().Layer(1).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test9" ) ).Caption ( wxT ( "Min Size 200x100" ) ).
+                    BestSize ( wxSize ( 200, 100 ) ).MinSize ( wxSize ( 200, 100 ) ).
+                    Bottom().Layer ( 1 ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
 
-    wxWindow* wnd10 = CreateTextCtrl(wxT("This pane will prompt the user before hiding."));
+    wxWindow * wnd10 = CreateTextCtrl ( wxT ( "This pane will prompt the user before hiding." ) );
 
     // Give this pane an icon, too, just for testing.
-    int iconSize = m_mgr.GetArtProvider()->GetMetric(wxAUI_DOCKART_CAPTION_SIZE);
+    int iconSize = m_mgr.GetArtProvider()->GetMetric ( wxAUI_DOCKART_CAPTION_SIZE );
 
     // Make it even to use 16 pixel icons with default 17 caption height.
     iconSize &= ~1;
 
-    m_mgr.AddPane(wnd10, wxAuiPaneInfo().
-                  Name(wxT("test10")).Caption(wxT("Text Pane with Hide Prompt")).
-                  Bottom().Layer(1).Position(1).
-                  Icon(wxArtProvider::GetBitmap(wxART_WARNING,
-                                                wxART_OTHER,
-                                                wxSize(iconSize, iconSize))));
+    m_mgr.AddPane ( wnd10, wxAuiPaneInfo().
+                    Name ( wxT ( "test10" ) ).Caption ( wxT ( "Text Pane with Hide Prompt" ) ).
+                    Bottom().Layer ( 1 ).Position ( 1 ).
+                    Icon ( wxArtProvider::GetBitmap ( wxART_WARNING,
+                                                      wxART_OTHER,
+                                                      wxSize ( iconSize, iconSize ) ) ) );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Name(wxT("test11")).Caption(wxT("Fixed Pane")).
-                  Bottom().Layer(1).Position(2).Fixed());
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Name ( wxT ( "test11" ) ).Caption ( wxT ( "Fixed Pane" ) ).
+                    Bottom().Layer ( 1 ).Position ( 2 ).Fixed() );
 
 
-    m_mgr.AddPane(new SettingsPanel(this,this), wxAuiPaneInfo().
-                  Name(wxT("settings")).Caption(wxT("Dock Manager Settings")).
-                  Dockable(false).Float().Hide());
+    m_mgr.AddPane ( new SettingsPanel ( this, this ), wxAuiPaneInfo().
+                    Name ( wxT ( "settings" ) ).Caption ( wxT ( "Dock Manager Settings" ) ).
+                    Dockable ( false ).Float().Hide() );
 
     // create some center panes
 
-    m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().Name(wxT("grid_content")).
-                  CenterPane().Hide());
+    m_mgr.AddPane ( CreateGrid(), wxAuiPaneInfo().Name ( wxT ( "gridContent" ) ).
+                    CenterPane().Hide() );
 
-    m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().Name(wxT("tree_content")).
-                  CenterPane().Hide());
+    m_mgr.AddPane ( CreateTreeCtrl(), wxAuiPaneInfo().Name ( wxT ( "treeContent" ) ).
+                    CenterPane().Hide() );
 
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().Name(wxT("sizereport_content")).
-                  CenterPane().Hide());
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().Name ( wxT ( "sizereportContent" ) ).
+                    CenterPane().Hide() );
 
-    m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().Name(wxT("text_content")).
-                  CenterPane().Hide());
+    m_mgr.AddPane ( CreateTextCtrl(), wxAuiPaneInfo().Name ( wxT ( "textContent" ) ).
+                    CenterPane().Hide() );
 
-    m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().Name(wxT("html_content")).
-                  CenterPane().Hide());
+    m_mgr.AddPane ( CreateHTMLCtrl(), wxAuiPaneInfo().Name ( wxT ( "htmlContent" ) ).
+                    CenterPane().Hide() );
 
-    m_mgr.AddPane(CreateNotebook(), wxAuiPaneInfo().Name(wxT("notebook_content")).
-                  CenterPane().PaneBorder(false));
+    m_mgr.AddPane ( CreateNotebook(), wxAuiPaneInfo().Name ( wxT ( "notebookContent" ) ).
+                    CenterPane().PaneBorder ( false ) );
 
     // add the toolbars to the manager
-    m_mgr.AddPane(tb1, wxAuiPaneInfo().
-                  Name(wxT("tb1")).Caption(wxT("Big Toolbar")).
-                  ToolbarPane().Top());
+    m_mgr.AddPane ( tb1, wxAuiPaneInfo().
+                    Name ( wxT ( "tb1" ) ).Caption ( wxT ( "Big Toolbar" ) ).
+                    ToolbarPane().Top() );
 
-    m_mgr.AddPane(tb2, wxAuiPaneInfo().
-                  Name(wxT("tb2")).Caption(wxT("Toolbar 2 (Horizontal)")).
-                  ToolbarPane().Top().Row(1));
+    m_mgr.AddPane ( tb2, wxAuiPaneInfo().
+                    Name ( wxT ( "tb2" ) ).Caption ( wxT ( "Toolbar 2 (Horizontal)" ) ).
+                    ToolbarPane().Top().Row ( 1 ) );
 
-    m_mgr.AddPane(tb3, wxAuiPaneInfo().
-                  Name(wxT("tb3")).Caption(wxT("Toolbar 3")).
-                  ToolbarPane().Top().Row(1).Position(1));
+    m_mgr.AddPane ( tb3, wxAuiPaneInfo().
+                    Name ( wxT ( "tb3" ) ).Caption ( wxT ( "Toolbar 3" ) ).
+                    ToolbarPane().Top().Row ( 1 ).Position ( 1 ) );
 
-    m_mgr.AddPane(tb4, wxAuiPaneInfo().
-                  Name(wxT("tb4")).Caption(wxT("Sample Bookmark Toolbar")).
-                  ToolbarPane().Top().Row(2));
+    m_mgr.AddPane ( tb4, wxAuiPaneInfo().
+                    Name ( wxT ( "tb4" ) ).Caption ( wxT ( "Sample Bookmark Toolbar" ) ).
+                    ToolbarPane().Top().Row ( 2 ) );
 
-    m_mgr.AddPane(tb5, wxAuiPaneInfo().
-                  Name(wxT("tb5")).Caption(wxT("Sample Vertical Toolbar")).
-                  ToolbarPane().Left().
-                  GripperTop());
+    m_mgr.AddPane ( tb5, wxAuiPaneInfo().
+                    Name ( wxT ( "tb5" ) ).Caption ( wxT ( "Sample Vertical Toolbar" ) ).
+                    ToolbarPane().Left().
+                    GripperTop() );
 
-    m_mgr.AddPane(new wxButton(this, wxID_ANY, _("Test Button")),
-                  wxAuiPaneInfo().Name(wxT("tb6")).
-                  ToolbarPane().Top().Row(2).Position(1).
-                  LeftDockable(false).RightDockable(false));
+    m_mgr.AddPane ( new wxButton ( this, wxID_ANY, _ ( "Test Button" ) ),
+                    wxAuiPaneInfo().Name ( wxT ( "tb6" ) ).
+                    ToolbarPane().Top().Row ( 2 ).Position ( 1 ).
+                    LeftDockable ( false ).RightDockable ( false ) );
 
     // make some default perspectives
 
-    wxString perspective_all = m_mgr.SavePerspective();
+    wxString perspectiveAll = m_mgr.SavePerspective();
 
     int i, count;
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    for (i = 0, count = all_panes.GetCount(); i < count; ++i)
-        if (!all_panes.Item(i).IsToolbar())
-            all_panes.Item(i).Hide();
-    m_mgr.GetPane(wxT("tb1")).Hide();
-    m_mgr.GetPane(wxT("tb6")).Hide();
-    m_mgr.GetPane(wxT("test8")).Show().Left().Layer(0).Row(0).Position(0);
-    m_mgr.GetPane(wxT("test10")).Show().Bottom().Layer(0).Row(0).Position(0);
-    m_mgr.GetPane(wxT("notebook_content")).Show();
-    wxString perspective_default = m_mgr.SavePerspective();
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
 
-    m_perspectives.Add(perspective_default);
-    m_perspectives.Add(perspective_all);
+    for ( i = 0, count = allPanes.GetCount(); i < count; ++i )
+        if ( !allPanes.Item ( i ).IsToolbar() )
+        {
+            allPanes.Item ( i ).Hide();
+        }
 
+    m_mgr.GetPane ( wxT ( "tb1" ) ).Hide();
+    m_mgr.GetPane ( wxT ( "tb6" ) ).Hide();
+    m_mgr.GetPane ( wxT ( "test8" ) ).Show().Left().Layer ( 0 ).Row ( 0 ).Position ( 0 );
+    m_mgr.GetPane ( wxT ( "test10" ) ).Show().Bottom().Layer ( 0 ).Row ( 0 ).Position ( 0 );
+    m_mgr.GetPane ( wxT ( "notebookContent" ) ).Show();
+    wxString perspectiveDefault = m_mgr.SavePerspective();
+
+    m_perspectives.Add ( perspectiveDefault );
+    m_perspectives.Add ( perspectiveAll );
+
     // "commit" all changes made to wxAuiManager
     m_mgr.Update();
 }
@@ -1015,7 +1041,7 @@
     m_mgr.UnInit();
 }
 
-wxAuiDockArt* MyFrame::GetDockArt()
+wxAuiDockArt * MyFrame::GetDockArt()
 {
     return m_mgr.GetArtProvider();
 }
@@ -1025,183 +1051,210 @@
     m_mgr.Update();
 }
 
-void MyFrame::OnEraseBackground(wxEraseEvent& event)
+void MyFrame::OnEraseBackground ( wxEraseEvent & event )
 {
     event.Skip();
 }
 
-void MyFrame::OnSize(wxSizeEvent& event)
+void MyFrame::OnSize ( wxSizeEvent & event )
 {
     event.Skip();
 }
 
-void MyFrame::OnSettings(wxCommandEvent& WXUNUSED(evt))
+void MyFrame::OnSettings ( wxCommandEvent & WXUNUSED ( evt ) )
 {
     // show the settings pane, and float it
-    wxAuiPaneInfo& floating_pane = m_mgr.GetPane(wxT("settings")).Float().Show();
+    wxAuiPaneInfo & floatingPane = m_mgr.GetPane ( wxT ( "settings" ) ).Float().Show();
 
-    if (floating_pane.floating_pos == wxDefaultPosition)
-        floating_pane.FloatingPosition(GetStartPosition());
+    if ( floatingPane.floatingPos == wxDefaultPosition )
+    {
+        floatingPane.FloatingPosition ( GetStartPosition() );
+    }
 
     m_mgr.Update();
 }
 
-void MyFrame::OnCustomizeToolbar(wxCommandEvent& WXUNUSED(evt))
+void MyFrame::OnCustomizeToolbar ( wxCommandEvent & WXUNUSED ( evt ) )
 {
-    wxMessageBox(_("Customize Toolbar clicked"));
+    wxMessageBox ( _ ( "Customize Toolbar clicked" ) );
 }
 
-void MyFrame::OnGradient(wxCommandEvent& event)
+void MyFrame::OnGradient ( wxCommandEvent & event )
 {
     int gradient = 0;
 
-    switch (event.GetId())
+    switch ( event.GetId() )
     {
         case ID_NoGradient:         gradient = wxAUI_GRADIENT_NONE; break;
+
         case ID_VerticalGradient:   gradient = wxAUI_GRADIENT_VERTICAL; break;
+
         case ID_HorizontalGradient: gradient = wxAUI_GRADIENT_HORIZONTAL; break;
     }
 
-    m_mgr.GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, gradient);
+    m_mgr.GetArtProvider()->SetMetric ( wxAUI_DOCKART_GRADIENT_TYPE, gradient );
     m_mgr.Update();
 }
 
-void MyFrame::OnToolbarResizing(wxCommandEvent& WXUNUSED(evt))
+void MyFrame::OnToolbarResizing ( wxCommandEvent & WXUNUSED ( evt ) )
 {
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    const size_t count = all_panes.GetCount();
-    for (size_t i = 0; i < count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+    const size_t count = allPanes.GetCount();
+
+    for ( size_t i = 0; i < count; ++i )
     {
-        wxAuiToolBar* toolbar = wxDynamicCast(all_panes[i].window, wxAuiToolBar);
-        if (toolbar)
+        wxAuiToolBar * toolbar = wxDynamicCast ( allPanes[i].window, wxAuiToolBar );
+
+        if ( toolbar )
         {
-            all_panes[i].Resizable(!all_panes[i].IsResizable());
+            allPanes[i].Resizable ( !allPanes[i].IsResizable() );
         }
     }
 
     m_mgr.Update();
 }
 
-void MyFrame::OnManagerFlag(wxCommandEvent& event)
+void MyFrame::OnManagerFlag ( wxCommandEvent & event )
 {
     unsigned int flag = 0;
 
 #if !defined(__WXMSW__) && !defined(__WXMAC__) && !defined(__WXGTK__)
-    if (event.GetId() == ID_TransparentDrag ||
-        event.GetId() == ID_TransparentHint ||
-        event.GetId() == ID_HintFade)
+
+    if ( event.GetId() == ID_TransparentDrag ||
+            event.GetId() == ID_TransparentHint ||
+            event.GetId() == ID_HintFade )
     {
-        wxMessageBox(wxT("This option is presently only available on wxGTK, wxMSW and wxMac"));
+        wxMessageBox ( wxT ( "This option is presently only available on wxGTK, wxMSW and wxMac" ) );
         return;
     }
+
 #endif
 
     int id = event.GetId();
 
-    if (id == ID_TransparentHint ||
-        id == ID_VenetianBlindsHint ||
-        id == ID_RectangleHint ||
-        id == ID_NoHint)
+    if ( id == ID_TransparentHint ||
+            id == ID_VenetianBlindsHint ||
+            id == ID_RectangleHint ||
+            id == ID_NoHint )
     {
         unsigned int flags = m_mgr.GetFlags();
         flags &= ~wxAUI_MGR_TRANSPARENT_HINT;
         flags &= ~wxAUI_MGR_VENETIAN_BLINDS_HINT;
         flags &= ~wxAUI_MGR_RECTANGLE_HINT;
-        m_mgr.SetFlags(flags);
+        m_mgr.SetFlags ( flags );
     }
 
-    switch (id)
+    switch ( id )
     {
         case ID_AllowFloating: flag = wxAUI_MGR_ALLOW_FLOATING; break;
+
         case ID_TransparentDrag: flag = wxAUI_MGR_TRANSPARENT_DRAG; break;
+
         case ID_HintFade: flag = wxAUI_MGR_HINT_FADE; break;
+
         case ID_NoVenetianFade: flag = wxAUI_MGR_NO_VENETIAN_BLINDS_FADE; break;
+
         case ID_AllowActivePane: flag = wxAUI_MGR_ALLOW_ACTIVE_PANE; break;
+
         case ID_TransparentHint: flag = wxAUI_MGR_TRANSPARENT_HINT; break;
+
         case ID_VenetianBlindsHint: flag = wxAUI_MGR_VENETIAN_BLINDS_HINT; break;
+
         case ID_RectangleHint: flag = wxAUI_MGR_RECTANGLE_HINT; break;
+
         case ID_LiveUpdate: flag = wxAUI_MGR_LIVE_RESIZE; break;
     }
 
-    if (flag)
+    if ( flag )
     {
-        m_mgr.SetFlags(m_mgr.GetFlags() ^ flag);
+        m_mgr.SetFlags ( m_mgr.GetFlags() ^ flag );
     }
 
     m_mgr.Update();
 }
 
 
-void MyFrame::OnNotebookFlag(wxCommandEvent& event)
+void MyFrame::OnNotebookFlag ( wxCommandEvent & event )
 {
     int id = event.GetId();
 
-    if (id == ID_NotebookNoCloseButton ||
-        id == ID_NotebookCloseButton ||
-        id == ID_NotebookCloseButtonAll ||
-        id == ID_NotebookCloseButtonActive)
+    if ( id == ID_NotebookNoCloseButton ||
+            id == ID_NotebookCloseButton ||
+            id == ID_NotebookCloseButtonAll ||
+            id == ID_NotebookCloseButtonActive )
     {
-        m_notebook_style &= ~(wxAUI_NB_CLOSE_BUTTON |
-                              wxAUI_NB_CLOSE_ON_ACTIVE_TAB |
-                              wxAUI_NB_CLOSE_ON_ALL_TABS);
+        m_notebookStyle &= ~ ( wxAUI_NB_CLOSE_BUTTON |
+                               wxAUI_NB_CLOSE_ON_ACTIVE_TAB |
+                               wxAUI_NB_CLOSE_ON_ALL_TABS );
 
-        switch (id)
+        switch ( id )
         {
             case ID_NotebookNoCloseButton: break;
-            case ID_NotebookCloseButton: m_notebook_style |= wxAUI_NB_CLOSE_BUTTON; break;
-            case ID_NotebookCloseButtonAll: m_notebook_style |= wxAUI_NB_CLOSE_ON_ALL_TABS; break;
-            case ID_NotebookCloseButtonActive: m_notebook_style |= wxAUI_NB_CLOSE_ON_ACTIVE_TAB; break;
+
+            case ID_NotebookCloseButton: m_notebookStyle |= wxAUI_NB_CLOSE_BUTTON; break;
+
+            case ID_NotebookCloseButtonAll: m_notebookStyle |= wxAUI_NB_CLOSE_ON_ALL_TABS; break;
+
+            case ID_NotebookCloseButtonActive: m_notebookStyle |= wxAUI_NB_CLOSE_ON_ACTIVE_TAB; break;
         }
     }
 
-    if (id == ID_NotebookAllowTabMove)
+    if ( id == ID_NotebookAllowTabMove )
     {
-        m_notebook_style ^= wxAUI_NB_TAB_MOVE;
+        m_notebookStyle ^= wxAUI_NB_TAB_MOVE;
     }
-    if (id == ID_NotebookAllowTabExternalMove)
+
+    if ( id == ID_NotebookAllowTabExternalMove )
     {
-        m_notebook_style ^= wxAUI_NB_TAB_EXTERNAL_MOVE;
+        m_notebookStyle ^= wxAUI_NB_TAB_EXTERNAL_MOVE;
     }
-     else if (id == ID_NotebookAllowTabSplit)
+
+    else if ( id == ID_NotebookAllowTabSplit )
     {
-        m_notebook_style ^= wxAUI_NB_TAB_SPLIT;
+        m_notebookStyle ^= wxAUI_NB_TAB_SPLIT;
     }
-     else if (id == ID_NotebookWindowList)
+
+    else if ( id == ID_NotebookWindowList )
     {
-        m_notebook_style ^= wxAUI_NB_WINDOWLIST_BUTTON;
+        m_notebookStyle ^= wxAUI_NB_WINDOWLIST_BUTTON;
     }
-     else if (id == ID_NotebookScrollButtons)
+
+    else if ( id == ID_NotebookScrollButtons )
     {
-        m_notebook_style ^= wxAUI_NB_SCROLL_BUTTONS;
+        m_notebookStyle ^= wxAUI_NB_SCROLL_BUTTONS;
     }
-     else if (id == ID_NotebookTabFixedWidth)
+
+    else if ( id == ID_NotebookTabFixedWidth )
     {
-        m_notebook_style ^= wxAUI_NB_TAB_FIXED_WIDTH;
+        m_notebookStyle ^= wxAUI_NB_TAB_FIXED_WIDTH;
     }
 
 
     size_t i, count;
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    for (i = 0, count = all_panes.GetCount(); i < count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+
+    for ( i = 0, count = allPanes.GetCount(); i < count; ++i )
     {
-        wxAuiPaneInfo& pane = all_panes.Item(i);
-        if (pane.window->IsKindOf(CLASSINFO(wxAuiNotebook)))
+        wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+        if ( pane.window->IsKindOf ( CLASSINFO ( wxAuiNotebook ) ) )
         {
-            wxAuiNotebook* nb = (wxAuiNotebook*)pane.window;
+            wxAuiNotebook * nb = ( wxAuiNotebook * ) pane.window;
 
-            if (id == ID_NotebookArtGloss)
+            if ( id == ID_NotebookArtGloss )
             {
-                nb->SetArtProvider(new wxAuiDefaultTabArt);
-                m_notebook_theme = 0;
+                nb->SetArtProvider ( new wxAuiDefaultTabArt );
+                m_notebookTheme = 0;
             }
-             else if (id == ID_NotebookArtSimple)
+
+            else if ( id == ID_NotebookArtSimple )
             {
-                nb->SetArtProvider(new wxAuiSimpleTabArt);
-                m_notebook_theme = 1;
+                nb->SetArtProvider ( new wxAuiSimpleTabArt );
+                m_notebookTheme = 1;
             }
 
 
-            nb->SetWindowStyleFlag(m_notebook_style);
+            nb->SetWindowStyleFlag ( m_notebookStyle );
             nb->Refresh();
         }
     }
@@ -1210,183 +1263,221 @@
 }
 
 
-void MyFrame::OnUpdateUI(wxUpdateUIEvent& event)
+void MyFrame::OnUpdateUI ( wxUpdateUIEvent & event )
 {
     unsigned int flags = m_mgr.GetFlags();
 
-    switch (event.GetId())
+    switch ( event.GetId() )
     {
         case ID_NoGradient:
-            event.Check(m_mgr.GetArtProvider()->GetMetric(wxAUI_DOCKART_GRADIENT_TYPE) == wxAUI_GRADIENT_NONE);
+            event.Check ( m_mgr.GetArtProvider()->GetMetric ( wxAUI_DOCKART_GRADIENT_TYPE ) == wxAUI_GRADIENT_NONE );
             break;
+
         case ID_VerticalGradient:
-            event.Check(m_mgr.GetArtProvider()->GetMetric(wxAUI_DOCKART_GRADIENT_TYPE) == wxAUI_GRADIENT_VERTICAL);
+            event.Check ( m_mgr.GetArtProvider()->GetMetric ( wxAUI_DOCKART_GRADIENT_TYPE ) == wxAUI_GRADIENT_VERTICAL );
             break;
+
         case ID_HorizontalGradient:
-            event.Check(m_mgr.GetArtProvider()->GetMetric(wxAUI_DOCKART_GRADIENT_TYPE) == wxAUI_GRADIENT_HORIZONTAL);
+            event.Check ( m_mgr.GetArtProvider()->GetMetric ( wxAUI_DOCKART_GRADIENT_TYPE ) == wxAUI_GRADIENT_HORIZONTAL );
             break;
+
         case ID_AllowToolbarResizing:
         {
-            wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-            const size_t count = all_panes.GetCount();
-            for (size_t i = 0; i < count; ++i)
+            wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+            const size_t count = allPanes.GetCount();
+
+            for ( size_t i = 0; i < count; ++i )
             {
-                wxAuiToolBar* toolbar = wxDynamicCast(all_panes[i].window, wxAuiToolBar);
-                if (toolbar)
+                wxAuiToolBar * toolbar = wxDynamicCast ( allPanes[i].window, wxAuiToolBar );
+
+                if ( toolbar )
                 {
-                    event.Check(all_panes[i].IsResizable());
+                    event.Check ( allPanes[i].IsResizable() );
                     break;
                 }
             }
+
             break;
         }
+
         case ID_AllowFloating:
-            event.Check((flags & wxAUI_MGR_ALLOW_FLOATING) != 0);
+            event.Check ( ( flags & wxAUI_MGR_ALLOW_FLOATING ) != 0 );
             break;
+
         case ID_TransparentDrag:
-            event.Check((flags & wxAUI_MGR_TRANSPARENT_DRAG) != 0);
+            event.Check ( ( flags & wxAUI_MGR_TRANSPARENT_DRAG ) != 0 );
             break;
+
         case ID_TransparentHint:
-            event.Check((flags & wxAUI_MGR_TRANSPARENT_HINT) != 0);
+            event.Check ( ( flags & wxAUI_MGR_TRANSPARENT_HINT ) != 0 );
             break;
+
         case ID_LiveUpdate:
-            event.Check((flags & wxAUI_MGR_LIVE_RESIZE) != 0);
+            event.Check ( ( flags & wxAUI_MGR_LIVE_RESIZE ) != 0 );
             break;
+
         case ID_VenetianBlindsHint:
-            event.Check((flags & wxAUI_MGR_VENETIAN_BLINDS_HINT) != 0);
+            event.Check ( ( flags & wxAUI_MGR_VENETIAN_BLINDS_HINT ) != 0 );
             break;
+
         case ID_RectangleHint:
-            event.Check((flags & wxAUI_MGR_RECTANGLE_HINT) != 0);
+            event.Check ( ( flags & wxAUI_MGR_RECTANGLE_HINT ) != 0 );
             break;
+
         case ID_NoHint:
-            event.Check(((wxAUI_MGR_TRANSPARENT_HINT |
-                          wxAUI_MGR_VENETIAN_BLINDS_HINT |
-                          wxAUI_MGR_RECTANGLE_HINT) & flags) == 0);
+            event.Check ( ( ( wxAUI_MGR_TRANSPARENT_HINT |
+                              wxAUI_MGR_VENETIAN_BLINDS_HINT |
+                              wxAUI_MGR_RECTANGLE_HINT ) & flags ) == 0 );
             break;
+
         case ID_HintFade:
-            event.Check((flags & wxAUI_MGR_HINT_FADE) != 0);
+            event.Check ( ( flags & wxAUI_MGR_HINT_FADE ) != 0 );
             break;
+
         case ID_NoVenetianFade:
-            event.Check((flags & wxAUI_MGR_NO_VENETIAN_BLINDS_FADE) != 0);
+            event.Check ( ( flags & wxAUI_MGR_NO_VENETIAN_BLINDS_FADE ) != 0 );
             break;
 
         case ID_NotebookNoCloseButton:
-            event.Check((m_notebook_style & (wxAUI_NB_CLOSE_BUTTON|wxAUI_NB_CLOSE_ON_ALL_TABS|wxAUI_NB_CLOSE_ON_ACTIVE_TAB)) != 0);
+            event.Check ( ( m_notebookStyle & ( wxAUI_NB_CLOSE_BUTTON | wxAUI_NB_CLOSE_ON_ALL_TABS | wxAUI_NB_CLOSE_ON_ACTIVE_TAB ) ) != 0 );
             break;
+
         case ID_NotebookCloseButton:
-            event.Check((m_notebook_style & wxAUI_NB_CLOSE_BUTTON) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_CLOSE_BUTTON ) != 0 );
             break;
+
         case ID_NotebookCloseButtonAll:
-            event.Check((m_notebook_style & wxAUI_NB_CLOSE_ON_ALL_TABS) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_CLOSE_ON_ALL_TABS ) != 0 );
             break;
+
         case ID_NotebookCloseButtonActive:
-            event.Check((m_notebook_style & wxAUI_NB_CLOSE_ON_ACTIVE_TAB) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_CLOSE_ON_ACTIVE_TAB ) != 0 );
             break;
+
         case ID_NotebookAllowTabSplit:
-            event.Check((m_notebook_style & wxAUI_NB_TAB_SPLIT) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_TAB_SPLIT ) != 0 );
             break;
+
         case ID_NotebookAllowTabMove:
-            event.Check((m_notebook_style & wxAUI_NB_TAB_MOVE) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_TAB_MOVE ) != 0 );
             break;
+
         case ID_NotebookAllowTabExternalMove:
-            event.Check((m_notebook_style & wxAUI_NB_TAB_EXTERNAL_MOVE) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_TAB_EXTERNAL_MOVE ) != 0 );
             break;
+
         case ID_NotebookScrollButtons:
-            event.Check((m_notebook_style & wxAUI_NB_SCROLL_BUTTONS) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_SCROLL_BUTTONS ) != 0 );
             break;
+
         case ID_NotebookWindowList:
-            event.Check((m_notebook_style & wxAUI_NB_WINDOWLIST_BUTTON) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_WINDOWLIST_BUTTON ) != 0 );
             break;
+
         case ID_NotebookTabFixedWidth:
-            event.Check((m_notebook_style & wxAUI_NB_TAB_FIXED_WIDTH) != 0);
+            event.Check ( ( m_notebookStyle & wxAUI_NB_TAB_FIXED_WIDTH ) != 0 );
             break;
+
         case ID_NotebookArtGloss:
-            event.Check(m_notebook_style == 0);
+            event.Check ( m_notebookStyle == 0 );
             break;
+
         case ID_NotebookArtSimple:
-            event.Check(m_notebook_style == 1);
+            event.Check ( m_notebookStyle == 1 );
             break;
 
     }
 }
 
-void MyFrame::OnPaneClose(wxAuiManagerEvent& evt)
+void MyFrame::OnPaneClose ( wxAuiManagerEvent & evt )
 {
-    if (evt.pane->name == wxT("test10"))
+    if ( evt.pane->name == wxT ( "test10" ) )
     {
-        int res = wxMessageBox(wxT("Are you sure you want to close/hide this pane?"),
-                               wxT("wxAUI"),
-                               wxYES_NO,
-                               this);
-        if (res != wxYES)
+        int res = wxMessageBox ( wxT ( "Are you sure you want to close/hide this pane?" ),
+                                 wxT ( "wxAUI" ),
+                                 wxYES_NO,
+                                 this );
+
+        if ( res != wxYES )
+        {
             evt.Veto();
+        }
     }
 }
 
-void MyFrame::OnCreatePerspective(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreatePerspective ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    wxTextEntryDialog dlg(this, wxT("Enter a name for the new perspective:"),
-                          wxT("wxAUI Test"));
+    wxTextEntryDialog dlg ( this, wxT ( "Enter a name for the new perspective:" ),
+                            wxT ( "wxAUI Test" ) );
 
-    dlg.SetValue(wxString::Format(wxT("Perspective %u"), unsigned(m_perspectives.GetCount() + 1)));
-    if (dlg.ShowModal() != wxID_OK)
+    dlg.SetValue ( wxString::Format ( wxT ( "Perspective %u" ), unsigned ( m_perspectives.GetCount() + 1 ) ) );
+
+    if ( dlg.ShowModal() != wxID_OK )
+    {
         return;
+    }
 
-    if (m_perspectives.GetCount() == 0)
+    if ( m_perspectives.GetCount() == 0 )
     {
-        m_perspectives_menu->AppendSeparator();
+        m_perspectivesMenu->AppendSeparator();
     }
 
-    m_perspectives_menu->Append(ID_FirstPerspective + m_perspectives.GetCount(), dlg.GetValue());
-    m_perspectives.Add(m_mgr.SavePerspective());
+    m_perspectivesMenu->Append ( ID_FirstPerspective + m_perspectives.GetCount(), dlg.GetValue() );
+    m_perspectives.Add ( m_mgr.SavePerspective() );
 }
 
-void MyFrame::OnCopyPerspectiveCode(wxCommandEvent& WXUNUSED(evt))
+void MyFrame::OnCopyPerspectiveCode ( wxCommandEvent & WXUNUSED ( evt ) )
 {
     wxString s = m_mgr.SavePerspective();
 
 #if wxUSE_CLIPBOARD
-    if (wxTheClipboard->Open())
+
+    if ( wxTheClipboard->Open() )
     {
-        wxTheClipboard->SetData(new wxTextDataObject(s));
+        wxTheClipboard->SetData ( new wxTextDataObject ( s ) );
         wxTheClipboard->Close();
     }
+
 #endif
 }
 
-void MyFrame::OnRestorePerspective(wxCommandEvent& evt)
+void MyFrame::OnRestorePerspective ( wxCommandEvent & evt )
 {
-    m_mgr.LoadPerspective(m_perspectives.Item(evt.GetId() - ID_FirstPerspective));
+    m_mgr.LoadPerspective ( m_perspectives.Item ( evt.GetId() - ID_FirstPerspective ) );
 }
 
-void MyFrame::OnNotebookPageClose(wxAuiNotebookEvent& evt)
+void MyFrame::OnNotebookPageClose ( wxAuiNotebookEvent & evt )
 {
-    wxAuiNotebook* ctrl = (wxAuiNotebook*)evt.GetEventObject();
-    if (ctrl->GetPage(evt.GetSelection())->IsKindOf(CLASSINFO(wxHtmlWindow)))
+    wxAuiNotebook * ctrl = ( wxAuiNotebook * ) evt.GetEventObject();
+
+    if ( ctrl->GetPage ( evt.GetSelection() )->IsKindOf ( CLASSINFO ( wxHtmlWindow ) ) )
     {
-        int res = wxMessageBox(wxT("Are you sure you want to close/hide this notebook page?"),
-                       wxT("wxAUI"),
-                       wxYES_NO,
-                       this);
-        if (res != wxYES)
+        int res = wxMessageBox ( wxT ( "Are you sure you want to close/hide this notebook page?" ),
+                                 wxT ( "wxAUI" ),
+                                 wxYES_NO,
+                                 this );
+
+        if ( res != wxYES )
+        {
             evt.Veto();
+        }
     }
 }
 
-void MyFrame::OnNotebookPageClosed(wxAuiNotebookEvent& evt)
+void MyFrame::OnNotebookPageClosed ( wxAuiNotebookEvent & evt )
 {
-    wxAuiNotebook* ctrl = (wxAuiNotebook*)evt.GetEventObject();
+    wxAuiNotebook * ctrl = ( wxAuiNotebook * ) evt.GetEventObject();
 
     // selection should always be a valid index
-    wxASSERT_MSG( ctrl->GetSelection() < (int)ctrl->GetPageCount(),
-                  wxString::Format("Invalid selection %d, only %d pages left",
-                                   ctrl->GetSelection(),
-                                   (int)ctrl->GetPageCount()) );
+    wxASSERT_MSG ( ctrl->GetSelection() < ( int ) ctrl->GetPageCount(),
+                   wxString::Format ( "Invalid selection %d, only %d pages left",
+                                      ctrl->GetSelection(),
+                                      ( int ) ctrl->GetPageCount() ) );
 
     evt.Skip();
 }
 
-void MyFrame::OnAllowNotebookDnD(wxAuiNotebookEvent& evt)
+void MyFrame::OnAllowNotebookDnD ( wxAuiNotebookEvent & evt )
 {
     // for the purpose of this test application, explicitly
     // allow all noteboko drag and drop events
@@ -1395,304 +1486,322 @@
 
 wxPoint MyFrame::GetStartPosition()
 {
-    static int x = 0;
-    x += 20;
-    wxPoint pt = ClientToScreen(wxPoint(0,0));
-    return wxPoint(pt.x + x, pt.y + x);
+    static int s_X = 0;
+    s_X += 20;
+    wxPoint pt = ClientToScreen ( wxPoint ( 0, 0 ) );
+    return wxPoint ( pt.x + s_X, pt.y + s_X );
 }
 
-void MyFrame::OnCreateTree(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateTree ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateTreeCtrl(), wxAuiPaneInfo().
-                  Caption(wxT("Tree Control")).
-                  Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(150,300)));
+    m_mgr.AddPane ( CreateTreeCtrl(), wxAuiPaneInfo().
+                    Caption ( wxT ( "Tree Control" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ).
+                    FloatingSize ( wxSize ( 150, 300 ) ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnCreateGrid(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateGrid ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateGrid(), wxAuiPaneInfo().
-                  Caption(wxT("Grid")).
-                  Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+    m_mgr.AddPane ( CreateGrid(), wxAuiPaneInfo().
+                    Caption ( wxT ( "Grid" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ).
+                    FloatingSize ( wxSize ( 300, 200 ) ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnCreateHTML(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateHTML ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateHTMLCtrl(), wxAuiPaneInfo().
-                  Caption(wxT("HTML Control")).
-                  Float().FloatingPosition(GetStartPosition()).
-                  FloatingSize(wxSize(300,200)));
+    m_mgr.AddPane ( CreateHTMLCtrl(), wxAuiPaneInfo().
+                    Caption ( wxT ( "HTML Control" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ).
+                    FloatingSize ( wxSize ( 300, 200 ) ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnCreateNotebook(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateNotebook ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateNotebook(), wxAuiPaneInfo().
-                  Caption(wxT("Notebook")).
-                  Float().FloatingPosition(GetStartPosition()).
-                  //FloatingSize(300,200).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateNotebook(), wxAuiPaneInfo().
+                    Caption ( wxT ( "Notebook" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ).
+                    //FloatingSize(300,200).
+                    CloseButton ( true ).MaximizeButton ( true ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnCreateText(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateText ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateTextCtrl(), wxAuiPaneInfo().
-                  Caption(wxT("Text Control")).
-                  Float().FloatingPosition(GetStartPosition()));
+    m_mgr.AddPane ( CreateTextCtrl(), wxAuiPaneInfo().
+                    Caption ( wxT ( "Text Control" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnCreateSizeReport(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnCreateSizeReport ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    m_mgr.AddPane(CreateSizeReportCtrl(), wxAuiPaneInfo().
-                  Caption(wxT("Client Size Reporter")).
-                  Float().FloatingPosition(GetStartPosition()).
-                  CloseButton(true).MaximizeButton(true));
+    m_mgr.AddPane ( CreateSizeReportCtrl(), wxAuiPaneInfo().
+                    Caption ( wxT ( "Client Size Reporter" ) ).
+                    Float().FloatingPosition ( GetStartPosition() ).
+                    CloseButton ( true ).MaximizeButton ( true ) );
     m_mgr.Update();
 }
 
-void MyFrame::OnChangeContentPane(wxCommandEvent& evt)
+void MyFrame::OnChangeContentPane ( wxCommandEvent & evt )
 {
-    m_mgr.GetPane(wxT("grid_content")).Show(evt.GetId() == ID_GridContent);
-    m_mgr.GetPane(wxT("text_content")).Show(evt.GetId() == ID_TextContent);
-    m_mgr.GetPane(wxT("tree_content")).Show(evt.GetId() == ID_TreeContent);
-    m_mgr.GetPane(wxT("sizereport_content")).Show(evt.GetId() == ID_SizeReportContent);
-    m_mgr.GetPane(wxT("html_content")).Show(evt.GetId() == ID_HTMLContent);
-    m_mgr.GetPane(wxT("notebook_content")).Show(evt.GetId() == ID_NotebookContent);
+    m_mgr.GetPane ( wxT ( "gridContent" ) ).Show ( evt.GetId() == ID_GridContent );
+    m_mgr.GetPane ( wxT ( "textContent" ) ).Show ( evt.GetId() == ID_TextContent );
+    m_mgr.GetPane ( wxT ( "treeContent" ) ).Show ( evt.GetId() == ID_TreeContent );
+    m_mgr.GetPane ( wxT ( "sizereportContent" ) ).Show ( evt.GetId() == ID_SizeReportContent );
+    m_mgr.GetPane ( wxT ( "htmlContent" ) ).Show ( evt.GetId() == ID_HTMLContent );
+    m_mgr.GetPane ( wxT ( "notebookContent" ) ).Show ( evt.GetId() == ID_NotebookContent );
     m_mgr.Update();
 }
 
-void MyFrame::OnDropDownToolbarItem(wxAuiToolBarEvent& evt)
+void MyFrame::OnDropDownToolbarItem ( wxAuiToolBarEvent & evt )
 {
-    if (evt.IsDropDownClicked())
+    if ( evt.IsDropDownClicked() )
     {
-        wxAuiToolBar* tb = static_cast<wxAuiToolBar*>(evt.GetEventObject());
+        wxAuiToolBar * tb = static_cast <wxAuiToolBar *> ( evt.GetEventObject() );
 
-        tb->SetToolSticky(evt.GetId(), true);
+        tb->SetToolSticky ( evt.GetId(), true );
 
         // create the popup menu
         wxMenu menuPopup;
 
-        wxBitmap bmp = wxArtProvider::GetBitmap(wxART_QUESTION, wxART_OTHER, wxSize(16,16));
+        wxBitmap bmp = wxArtProvider::GetBitmap ( wxART_QUESTION, wxART_OTHER, wxSize ( 16, 16 ) );
 
-        wxMenuItem* m1 =  new wxMenuItem(&menuPopup, 10001, _("Drop Down Item 1"));
-        m1->SetBitmap(bmp);
-        menuPopup.Append(m1);
+        wxMenuItem * m1 =  new wxMenuItem ( &menuPopup, 10001, _ ( "Drop Down Item 1" ) );
+        m1->SetBitmap ( bmp );
+        menuPopup.Append ( m1 );
 
-        wxMenuItem* m2 =  new wxMenuItem(&menuPopup, 10002, _("Drop Down Item 2"));
-        m2->SetBitmap(bmp);
-        menuPopup.Append(m2);
+        wxMenuItem * m2 =  new wxMenuItem ( &menuPopup, 10002, _ ( "Drop Down Item 2" ) );
+        m2->SetBitmap ( bmp );
+        menuPopup.Append ( m2 );
 
-        wxMenuItem* m3 =  new wxMenuItem(&menuPopup, 10003, _("Drop Down Item 3"));
-        m3->SetBitmap(bmp);
-        menuPopup.Append(m3);
+        wxMenuItem * m3 =  new wxMenuItem ( &menuPopup, 10003, _ ( "Drop Down Item 3" ) );
+        m3->SetBitmap ( bmp );
+        menuPopup.Append ( m3 );
 
-        wxMenuItem* m4 =  new wxMenuItem(&menuPopup, 10004, _("Drop Down Item 4"));
-        m4->SetBitmap(bmp);
-        menuPopup.Append(m4);
+        wxMenuItem * m4 =  new wxMenuItem ( &menuPopup, 10004, _ ( "Drop Down Item 4" ) );
+        m4->SetBitmap ( bmp );
+        menuPopup.Append ( m4 );
 
         // line up our menu with the button
-        wxRect rect = tb->GetToolRect(evt.GetId());
-        wxPoint pt = tb->ClientToScreen(rect.GetBottomLeft());
-        pt = ScreenToClient(pt);
+        wxRect rect = tb->GetToolRect ( evt.GetId() );
+        wxPoint pt = tb->ClientToScreen ( rect.GetBottomLeft() );
+        pt = ScreenToClient ( pt );
 
 
-        PopupMenu(&menuPopup, pt);
+        PopupMenu ( &menuPopup, pt );
 
 
         // make sure the button is "un-stuck"
-        tb->SetToolSticky(evt.GetId(), false);
+        tb->SetToolSticky ( evt.GetId(), false );
     }
 }
 
 
-void MyFrame::OnTabAlignment(wxCommandEvent &evt)
+void MyFrame::OnTabAlignment ( wxCommandEvent & evt )
 {
     size_t i, count;
-    wxAuiPaneInfoArray& all_panes = m_mgr.GetAllPanes();
-    for (i = 0, count = all_panes.GetCount(); i < count; ++i)
+    wxAuiPaneInfoArray & allPanes = m_mgr.GetAllPanes();
+
+    for ( i = 0, count = allPanes.GetCount(); i < count; ++i )
     {
-        wxAuiPaneInfo& pane = all_panes.Item(i);
-        if (pane.window->IsKindOf(CLASSINFO(wxAuiNotebook)))
+        wxAuiPaneInfo & pane = allPanes.Item ( i );
+
+        if ( pane.window->IsKindOf ( CLASSINFO ( wxAuiNotebook ) ) )
         {
-            wxAuiNotebook* nb = (wxAuiNotebook*)pane.window;
+            wxAuiNotebook * nb = ( wxAuiNotebook * ) pane.window;
 
             long style = nb->GetWindowStyleFlag();
-            style &= ~(wxAUI_NB_TOP | wxAUI_NB_BOTTOM);
-            if (evt.GetId() == ID_NotebookAlignTop)
+            style &= ~ ( wxAUI_NB_TOP | wxAUI_NB_BOTTOM );
+
+            if ( evt.GetId() == ID_NotebookAlignTop )
+            {
                 style |= wxAUI_NB_TOP;
-            else if (evt.GetId() == ID_NotebookAlignBottom)
+            }
+
+            else if ( evt.GetId() == ID_NotebookAlignBottom )
+            {
                 style |= wxAUI_NB_BOTTOM;
-            nb->SetWindowStyleFlag(style);
+            }
 
+            nb->SetWindowStyleFlag ( style );
+
             nb->Refresh();
         }
     }
 }
 
-void MyFrame::OnExit(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnExit ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    Close(true);
+    Close ( true );
 }
 
-void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
+void MyFrame::OnAbout ( wxCommandEvent & WXUNUSED ( event ) )
 {
-    wxMessageBox(_("wxAUI Demo\nAn advanced window management library for wxWidgets\n(c) Copyright 2005-2006, Kirix Corporation"), _("About wxAUI Demo"), wxOK, this);
+    wxMessageBox ( _ ( "wxAUI Demo\nAn advanced window management library for wxWidgets\n(c) Copyright 2005-2006, Kirix Corporation" ), _ ( "About wxAUI Demo" ), wxOK, this );
 }
 
-wxTextCtrl* MyFrame::CreateTextCtrl(const wxString& ctrl_text)
+wxTextCtrl * MyFrame::CreateTextCtrl ( const wxString & ctrlText )
 {
-    static int n = 0;
+    static int s_N = 0;
 
     wxString text;
-    if ( !ctrl_text.empty() )
-        text = ctrl_text;
+
+    if ( !ctrlText.empty() )
+    {
+        text = ctrlText;
+    }
+
     else
-        text.Printf(wxT("This is text box %d"), ++n);
+    {
+        text.Printf ( wxT ( "This is text box %d" ), ++s_N );
+    }
 
-    return new wxTextCtrl(this,wxID_ANY, text,
-                          wxPoint(0,0), wxSize(150,90),
-                          wxNO_BORDER | wxTE_MULTILINE);
+    return new wxTextCtrl ( this, wxID_ANY, text,
+                            wxPoint ( 0, 0 ), wxSize ( 150, 90 ),
+                            wxNO_BORDER | wxTE_MULTILINE );
 }
 
 
-wxGrid* MyFrame::CreateGrid()
+wxGrid * MyFrame::CreateGrid()
 {
-    wxGrid* grid = new wxGrid(this, wxID_ANY,
-                              wxPoint(0,0),
-                              wxSize(150,250),
-                              wxNO_BORDER | wxWANTS_CHARS);
-    grid->CreateGrid(50, 20);
+    wxGrid * grid = new wxGrid ( this, wxID_ANY,
+                                 wxPoint ( 0, 0 ),
+                                 wxSize ( 150, 250 ),
+                                 wxNO_BORDER | wxWANTS_CHARS );
+    grid->CreateGrid ( 50, 20 );
     return grid;
 }
 
-wxTreeCtrl* MyFrame::CreateTreeCtrl()
+wxTreeCtrl * MyFrame::CreateTreeCtrl()
 {
-    wxTreeCtrl* tree = new wxTreeCtrl(this, wxID_ANY,
-                                      wxPoint(0,0), wxSize(160,250),
-                                      wxTR_DEFAULT_STYLE | wxNO_BORDER);
+    wxTreeCtrl * tree = new wxTreeCtrl ( this, wxID_ANY,
+                                         wxPoint ( 0, 0 ), wxSize ( 160, 250 ),
+                                         wxTR_DEFAULT_STYLE | wxNO_BORDER );
 
-    wxImageList* imglist = new wxImageList(16, 16, true, 2);
-    imglist->Add(wxArtProvider::GetBitmap(wxART_FOLDER, wxART_OTHER, wxSize(16,16)));
-    imglist->Add(wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16)));
-    tree->AssignImageList(imglist);
+    wxImageList * imglist = new wxImageList ( 16, 16, true, 2 );
+    imglist->Add ( wxArtProvider::GetBitmap ( wxART_FOLDER, wxART_OTHER, wxSize ( 16, 16 ) ) );
+    imglist->Add ( wxArtProvider::GetBitmap ( wxART_NORMAL_FILE, wxART_OTHER, wxSize ( 16, 16 ) ) );
+    tree->AssignImageList ( imglist );
 
-    wxTreeItemId root = tree->AddRoot(wxT("wxAUI Project"), 0);
+    wxTreeItemId root = tree->AddRoot ( wxT ( "wxAUI Project" ), 0 );
     wxArrayTreeItemIds items;
 
 
 
-    items.Add(tree->AppendItem(root, wxT("Item 1"), 0));
-    items.Add(tree->AppendItem(root, wxT("Item 2"), 0));
-    items.Add(tree->AppendItem(root, wxT("Item 3"), 0));
-    items.Add(tree->AppendItem(root, wxT("Item 4"), 0));
-    items.Add(tree->AppendItem(root, wxT("Item 5"), 0));
+    items.Add ( tree->AppendItem ( root, wxT ( "Item 1" ), 0 ) );
+    items.Add ( tree->AppendItem ( root, wxT ( "Item 2" ), 0 ) );
+    items.Add ( tree->AppendItem ( root, wxT ( "Item 3" ), 0 ) );
+    items.Add ( tree->AppendItem ( root, wxT ( "Item 4" ), 0 ) );
+    items.Add ( tree->AppendItem ( root, wxT ( "Item 5" ), 0 ) );
 
 
     int i, count;
-    for (i = 0, count = items.Count(); i < count; ++i)
+
+    for ( i = 0, count = items.Count(); i < count; ++i )
     {
-        wxTreeItemId id = items.Item(i);
-        tree->AppendItem(id, wxT("Subitem 1"), 1);
-        tree->AppendItem(id, wxT("Subitem 2"), 1);
-        tree->AppendItem(id, wxT("Subitem 3"), 1);
-        tree->AppendItem(id, wxT("Subitem 4"), 1);
-        tree->AppendItem(id, wxT("Subitem 5"), 1);
+        wxTreeItemId id = items.Item ( i );
+        tree->AppendItem ( id, wxT ( "Subitem 1" ), 1 );
+        tree->AppendItem ( id, wxT ( "Subitem 2" ), 1 );
+        tree->AppendItem ( id, wxT ( "Subitem 3" ), 1 );
+        tree->AppendItem ( id, wxT ( "Subitem 4" ), 1 );
+        tree->AppendItem ( id, wxT ( "Subitem 5" ), 1 );
     }
 
 
-    tree->Expand(root);
+    tree->Expand ( root );
 
     return tree;
 }
 
-wxSizeReportCtrl* MyFrame::CreateSizeReportCtrl(int width, int height)
+wxSizeReportCtrl * MyFrame::CreateSizeReportCtrl ( int width, int height )
 {
-    wxSizeReportCtrl* ctrl = new wxSizeReportCtrl(this, wxID_ANY,
-                                   wxDefaultPosition,
-                                   wxSize(width, height), &m_mgr);
+    wxSizeReportCtrl * ctrl = new wxSizeReportCtrl ( this, wxID_ANY,
+                                                     wxDefaultPosition,
+                                                     wxSize ( width, height ), &m_mgr );
     return ctrl;
 }
 
-wxHtmlWindow* MyFrame::CreateHTMLCtrl(wxWindow* parent)
+wxHtmlWindow * MyFrame::CreateHTMLCtrl ( wxWindow * parent )
 {
-    if (!parent)
+    if ( !parent )
+    {
         parent = this;
+    }
 
-    wxHtmlWindow* ctrl = new wxHtmlWindow(parent, wxID_ANY,
-                                   wxDefaultPosition,
-                                   wxSize(400,300));
-    ctrl->SetPage(GetIntroText());
+    wxHtmlWindow * ctrl = new wxHtmlWindow ( parent, wxID_ANY,
+                                             wxDefaultPosition,
+                                             wxSize ( 400, 300 ) );
+    ctrl->SetPage ( GetIntroText() );
     return ctrl;
 }
 
-wxAuiNotebook* MyFrame::CreateNotebook()
+wxAuiNotebook * MyFrame::CreateNotebook()
 {
-   // create the notebook off-window to avoid flicker
-   wxSize client_size = GetClientSize();
+    // create the notebook off-window to avoid flicker
+    wxSize clientSize = GetClientSize();
 
-   wxAuiNotebook* ctrl = new wxAuiNotebook(this, wxID_ANY,
-                                    wxPoint(client_size.x, client_size.y),
-                                    wxSize(430,200),
-                                    m_notebook_style);
-   ctrl->Freeze();
+    wxAuiNotebook * ctrl = new wxAuiNotebook ( this, wxID_ANY,
+                                               wxPoint ( clientSize.x, clientSize.y ),
+                                               wxSize ( 430, 200 ),
+                                               m_notebookStyle );
+    ctrl->Freeze();
 
-   wxBitmap page_bmp = wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16));
+    wxBitmap pageBmp = wxArtProvider::GetBitmap ( wxART_NORMAL_FILE, wxART_OTHER, wxSize ( 16, 16 ) );
 
-   ctrl->AddPage(CreateHTMLCtrl(ctrl), wxT("Welcome to wxAUI") , false, page_bmp);
+    ctrl->AddPage ( CreateHTMLCtrl ( ctrl ), wxT ( "Welcome to wxAUI" ) , false, pageBmp );
 
-   wxPanel *panel = new wxPanel( ctrl, wxID_ANY );
-   wxFlexGridSizer *flex = new wxFlexGridSizer( 4, 2, 0, 0 );
-   flex->AddGrowableRow( 0 );
-   flex->AddGrowableRow( 3 );
-   flex->AddGrowableCol( 1 );
-   flex->Add( 5,5 );   flex->Add( 5,5 );
-   flex->Add( new wxStaticText( panel, -1, wxT("wxTextCtrl:") ), 0, wxALL|wxALIGN_CENTRE, 5 );
-   flex->Add( new wxTextCtrl( panel, -1, wxT(""), wxDefaultPosition, wxSize(100,-1)),
-                1, wxALL|wxALIGN_CENTRE, 5 );
-   flex->Add( new wxStaticText( panel, -1, wxT("wxSpinCtrl:") ), 0, wxALL|wxALIGN_CENTRE, 5 );
-   flex->Add( new wxSpinCtrl( panel, -1, wxT("5"), wxDefaultPosition, wxSize(100,-1),
-                wxSP_ARROW_KEYS, 5, 50, 5 ), 0, wxALL|wxALIGN_CENTRE, 5 );
-   flex->Add( 5,5 );   flex->Add( 5,5 );
-   panel->SetSizer( flex );
-   ctrl->AddPage( panel, wxT("wxPanel"), false, page_bmp );
+    wxPanel * panel = new wxPanel ( ctrl, wxID_ANY );
+    wxFlexGridSizer * flex = new wxFlexGridSizer ( 4, 2, 0, 0 );
+    flex->AddGrowableRow ( 0 );
+    flex->AddGrowableRow ( 3 );
+    flex->AddGrowableCol ( 1 );
+    flex->Add ( 5, 5 );   flex->Add ( 5, 5 );
+    flex->Add ( new wxStaticText ( panel, -1, wxT ( "wxTextCtrl:" ) ), 0, wxALL | wxALIGN_CENTRE, 5 );
+    flex->Add ( new wxTextCtrl ( panel, -1, wxT ( "" ), wxDefaultPosition, wxSize ( 100, -1 ) ),
+                1, wxALL | wxALIGN_CENTRE, 5 );
+    flex->Add ( new wxStaticText ( panel, -1, wxT ( "wxSpinCtrl:" ) ), 0, wxALL | wxALIGN_CENTRE, 5 );
+    flex->Add ( new wxSpinCtrl ( panel, -1, wxT ( "5" ), wxDefaultPosition, wxSize ( 100, -1 ),
+                                 wxSP_ARROW_KEYS, 5, 50, 5 ), 0, wxALL | wxALIGN_CENTRE, 5 );
+    flex->Add ( 5, 5 );   flex->Add ( 5, 5 );
+    panel->SetSizer ( flex );
+    ctrl->AddPage ( panel, wxT ( "wxPanel" ), false, pageBmp );
 
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 1"), false, page_bmp );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 1" ), false, pageBmp );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 2") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 2" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 3") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 3" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 4") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 4" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 5") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 5" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 6") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 6" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 7 (longer title)") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 7 (longer title)" ) );
 
-   ctrl->AddPage( new wxTextCtrl( ctrl, wxID_ANY, wxT("Some more text"),
-                wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxNO_BORDER) , wxT("wxTextCtrl 8") );
+    ctrl->AddPage ( new wxTextCtrl ( ctrl, wxID_ANY, wxT ( "Some more text" ),
+                                     wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxNO_BORDER ) , wxT ( "wxTextCtrl 8" ) );
 
-   ctrl->Thaw();
-   return ctrl;
+    ctrl->Thaw();
+    return ctrl;
 }
 
 wxString MyFrame::GetIntroText()
 {
-    const char* text =
+    const char * text =
         "<html><body>"
         "<h3>Welcome to wxAUI</h3>"
         "<br/><b>Overview</b><br/>"
@@ -1753,5 +1862,5 @@
         "<p>See README.txt for more information.</p>"
         "</body></html>";
 
-    return wxString::FromAscii(text);
+    return wxString::FromAscii ( text );
 }
Index: src/aui/tabmdi.cpp
===================================================================
--- src/aui/tabmdi.cpp	(revision 69060)
+++ src/aui/tabmdi.cpp	(working copy)
@@ -21,7 +21,7 @@
 #include "wx/wxprec.h"
 
 #ifdef __BORLANDC__
-    #pragma hdrstop
+#pragma hdrstop
 #endif
 
 #if wxUSE_AUI
@@ -30,11 +30,11 @@
 #include "wx/aui/tabmdi.h"
 
 #ifndef WX_PRECOMP
-    #include "wx/panel.h"
-    #include "wx/menu.h"
-    #include "wx/intl.h"
-    #include "wx/log.h"
-    #include "wx/settings.h"
+#include "wx/panel.h"
+#include "wx/menu.h"
+#include "wx/intl.h"
+#include "wx/log.h"
+#include "wx/settings.h"
 #endif //WX_PRECOMP
 
 #include "wx/stockitem.h"
@@ -51,11 +51,11 @@
 // wxAuiMDIParentFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIParentFrame, wxFrame)
+IMPLEMENT_DYNAMIC_CLASS ( wxAuiMDIParentFrame, wxFrame )
 
-BEGIN_EVENT_TABLE(wxAuiMDIParentFrame, wxFrame)
+BEGIN_EVENT_TABLE ( wxAuiMDIParentFrame, wxFrame )
 #if wxUSE_MENUS
-    EVT_MENU (wxID_ANY, wxAuiMDIParentFrame::DoHandleMenu)
+    EVT_MENU ( wxID_ANY, wxAuiMDIParentFrame::DoHandleMenu )
 #endif
 END_EVENT_TABLE()
 
@@ -64,172 +64,194 @@
     Init();
 }
 
-wxAuiMDIParentFrame::wxAuiMDIParentFrame(wxWindow *parent,
-                                         wxWindowID id,
-                                         const wxString& title,
-                                         const wxPoint& pos,
-                                         const wxSize& size,
-                                         long style,
-                                         const wxString& name)
+wxAuiMDIParentFrame::wxAuiMDIParentFrame ( wxWindow * parent,
+                                           wxWindowID id,
+                                           const wxString & title,
+                                           const wxPoint & pos,
+                                           const wxSize & size,
+                                           long style,
+                                           const wxString & name )
 {
     Init();
-    (void)Create(parent, id, title, pos, size, style, name);
+    ( void ) Create ( parent, id, title, pos, size, style, name );
 }
 
 wxAuiMDIParentFrame::~wxAuiMDIParentFrame()
 {
     // Make sure the client window is destructed before the menu bars are!
-    wxDELETE(m_pClientWindow);
+    wxDELETE ( m_pClientWindow );
 
 #if wxUSE_MENUS
-    wxDELETE(m_pMyMenuBar);
-    RemoveWindowMenu(GetMenuBar());
-    wxDELETE(m_pWindowMenu);
+    wxDELETE ( m_pMyMenuBar );
+    RemoveWindowMenu ( GetMenuBar() );
+    wxDELETE ( m_pWindowMenu );
 #endif // wxUSE_MENUS
 }
 
-bool wxAuiMDIParentFrame::Create(wxWindow *parent,
-                                 wxWindowID id,
-                                 const wxString& title,
-                                 const wxPoint& pos,
-                                 const wxSize& size,
-                                 long style,
-                                 const wxString& name)
+bool wxAuiMDIParentFrame::Create ( wxWindow * parent,
+                                   wxWindowID id,
+                                   const wxString & title,
+                                   const wxPoint & pos,
+                                   const wxSize & size,
+                                   long style,
+                                   const wxString & name )
 {
 #if wxUSE_MENUS
+
     // this style can be used to prevent a window from having the standard MDI
     // "Window" menu
-    if (!(style & wxFRAME_NO_WINDOW_MENU))
+    if ( ! ( style & wxFRAME_NO_WINDOW_MENU ) )
     {
         m_pWindowMenu = new wxMenu;
-        m_pWindowMenu->Append(wxWINDOWCLOSE,    _("Cl&ose"));
-        m_pWindowMenu->Append(wxWINDOWCLOSEALL, _("Close All"));
+        m_pWindowMenu->Append ( wxWINDOWCLOSE,    _ ( "Cl&ose" ) );
+        m_pWindowMenu->Append ( wxWINDOWCLOSEALL, _ ( "Close All" ) );
         m_pWindowMenu->AppendSeparator();
-        m_pWindowMenu->Append(wxWINDOWNEXT,     _("&Next"));
-        m_pWindowMenu->Append(wxWINDOWPREV,     _("&Previous"));
+        m_pWindowMenu->Append ( wxWINDOWNEXT,     _ ( "&Next" ) );
+        m_pWindowMenu->Append ( wxWINDOWPREV,     _ ( "&Previous" ) );
     }
+
 #endif // wxUSE_MENUS
 
-    if ( !wxFrame::Create(parent, id, title, pos, size, style, name) )
+    if ( !wxFrame::Create ( parent, id, title, pos, size, style, name ) )
+    {
         return false;
+    }
 
     m_pClientWindow = OnCreateClient();
     return m_pClientWindow != NULL;
 }
 
 
-void wxAuiMDIParentFrame::SetArtProvider(wxAuiTabArt* provider)
+void wxAuiMDIParentFrame::SetArtProvider ( wxAuiTabArt * provider )
 {
-    if (m_pClientWindow)
+    if ( m_pClientWindow )
     {
-        m_pClientWindow->SetArtProvider(provider);
+        m_pClientWindow->SetArtProvider ( provider );
     }
 }
 
-wxAuiTabArt* wxAuiMDIParentFrame::GetArtProvider()
+wxAuiTabArt * wxAuiMDIParentFrame::GetArtProvider()
 {
-    if (!m_pClientWindow)
+    if ( !m_pClientWindow )
+    {
         return NULL;
+    }
 
     return m_pClientWindow->GetArtProvider();
 }
 
-wxAuiNotebook* wxAuiMDIParentFrame::GetNotebook() const
+wxAuiNotebook * wxAuiMDIParentFrame::GetNotebook() const
 {
-    return static_cast<wxAuiNotebook*>(m_pClientWindow);
+    return static_cast <wxAuiNotebook *> ( m_pClientWindow );
 }
 
 
 
 #if wxUSE_MENUS
-void wxAuiMDIParentFrame::SetWindowMenu(wxMenu* pMenu)
+void wxAuiMDIParentFrame::SetWindowMenu ( wxMenu * pMenu )
 {
     // Replace the window menu from the currently loaded menu bar.
-    wxMenuBar *pMenuBar = GetMenuBar();
+    wxMenuBar * pMenuBar = GetMenuBar();
 
-    if (m_pWindowMenu)
+    if ( m_pWindowMenu )
     {
-        RemoveWindowMenu(pMenuBar);
-        wxDELETE(m_pWindowMenu);
+        RemoveWindowMenu ( pMenuBar );
+        wxDELETE ( m_pWindowMenu );
     }
 
-    if (pMenu)
+    if ( pMenu )
     {
         m_pWindowMenu = pMenu;
-        AddWindowMenu(pMenuBar);
+        AddWindowMenu ( pMenuBar );
     }
 }
 
-void wxAuiMDIParentFrame::SetMenuBar(wxMenuBar* pMenuBar)
+void wxAuiMDIParentFrame::SetMenuBar ( wxMenuBar * pMenuBar )
 {
     // Remove the Window menu from the old menu bar
-    RemoveWindowMenu(GetMenuBar());
+    RemoveWindowMenu ( GetMenuBar() );
 
     // Add the Window menu to the new menu bar.
-    AddWindowMenu(pMenuBar);
+    AddWindowMenu ( pMenuBar );
 
-    wxFrame::SetMenuBar(pMenuBar);
-    //m_pMyMenuBar = GetMenuBar();
+    wxFrame::SetMenuBar ( pMenuBar );
+    //mPMyMenuBar = GetMenuBar();
 }
 #endif // wxUSE_MENUS
 
-void wxAuiMDIParentFrame::SetChildMenuBar(wxAuiMDIChildFrame* pChild)
+void wxAuiMDIParentFrame::SetChildMenuBar ( wxAuiMDIChildFrame * pChild )
 {
 #if wxUSE_MENUS
-    if (!pChild)
+
+    if ( !pChild )
     {
         // No Child, set Our menu bar back.
-        if (m_pMyMenuBar)
-            SetMenuBar(m_pMyMenuBar);
+        if ( m_pMyMenuBar )
+        {
+            SetMenuBar ( m_pMyMenuBar );
+        }
+
         else
-            SetMenuBar(GetMenuBar());
+        {
+            SetMenuBar ( GetMenuBar() );
+        }
 
         // Make sure we know our menu bar is in use
         m_pMyMenuBar = NULL;
     }
+
     else
     {
-        if (pChild->GetMenuBar() == NULL)
+        if ( pChild->GetMenuBar() == NULL )
+        {
             return;
+        }
 
         // Do we need to save the current bar?
-        if (m_pMyMenuBar == NULL)
+        if ( m_pMyMenuBar == NULL )
+        {
             m_pMyMenuBar = GetMenuBar();
+        }
 
-        SetMenuBar(pChild->GetMenuBar());
+        SetMenuBar ( pChild->GetMenuBar() );
     }
+
 #endif // wxUSE_MENUS
 }
 
-bool wxAuiMDIParentFrame::ProcessEvent(wxEvent& event)
+bool wxAuiMDIParentFrame::ProcessEvent ( wxEvent & event )
 {
     // stops the same event being processed repeatedly
-    if (m_pLastEvt == &event)
+    if ( m_pLastEvt == &event )
+    {
         return false;
+    }
+
     m_pLastEvt = &event;
 
     // let the active child (if any) process the event first.
     bool res = false;
-    if (m_pActiveChild &&
-        event.IsCommandEvent() &&
-        event.GetEventObject() != m_pClientWindow &&
-           !(event.GetEventType() == wxEVT_ACTIVATE ||
-             event.GetEventType() == wxEVT_SET_FOCUS ||
-             event.GetEventType() == wxEVT_KILL_FOCUS ||
-             event.GetEventType() == wxEVT_CHILD_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
-             event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
+
+    if ( m_pActiveChild &&
+            event.IsCommandEvent() &&
+            event.GetEventObject() != m_pClientWindow &&
+            ! ( event.GetEventType() == wxEVT_ACTIVATE ||
+                event.GetEventType() == wxEVT_SET_FOCUS ||
+                event.GetEventType() == wxEVT_KILL_FOCUS ||
+                event.GetEventType() == wxEVT_CHILD_FOCUS ||
+                event.GetEventType() == wxEVT_COMMAND_SET_FOCUS ||
+                event.GetEventType() == wxEVT_COMMAND_KILL_FOCUS )
        )
     {
-        res = m_pActiveChild->GetEventHandler()->ProcessEvent(event);
+        res = m_pActiveChild->GetEventHandler()->ProcessEvent ( event );
     }
 
-    if (!res)
+    if ( !res )
     {
         // if the event was not handled this frame will handle it,
         // which is why we need the protection code at the beginning
         // of this method
-        res = wxEvtHandler::ProcessEvent(event);
+        res = wxEvtHandler::ProcessEvent ( event );
     }
 
     m_pLastEvt = NULL;
@@ -237,47 +259,53 @@
     return res;
 }
 
-wxAuiMDIChildFrame *wxAuiMDIParentFrame::GetActiveChild() const
+wxAuiMDIChildFrame * wxAuiMDIParentFrame::GetActiveChild() const
 {
     return m_pActiveChild;
 }
 
-void wxAuiMDIParentFrame::SetActiveChild(wxAuiMDIChildFrame* pChildFrame)
+void wxAuiMDIParentFrame::SetActiveChild ( wxAuiMDIChildFrame * pChildFrame )
 {
     m_pActiveChild = pChildFrame;
 }
 
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::GetClientWindow() const
+wxAuiMDIClientWindow * wxAuiMDIParentFrame::GetClientWindow() const
 {
     return m_pClientWindow;
 }
 
-wxAuiMDIClientWindow *wxAuiMDIParentFrame::OnCreateClient()
+wxAuiMDIClientWindow * wxAuiMDIParentFrame::OnCreateClient()
 {
-    return new wxAuiMDIClientWindow( this );
+    return new wxAuiMDIClientWindow ( this );
 }
 
 void wxAuiMDIParentFrame::ActivateNext()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if ( m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND )
     {
         size_t active = m_pClientWindow->GetSelection() + 1;
-        if (active >= m_pClientWindow->GetPageCount())
+
+        if ( active >= m_pClientWindow->GetPageCount() )
+        {
             active = 0;
+        }
 
-        m_pClientWindow->SetSelection(active);
+        m_pClientWindow->SetSelection ( active );
     }
 }
 
 void wxAuiMDIParentFrame::ActivatePrevious()
 {
-    if (m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND)
+    if ( m_pClientWindow && m_pClientWindow->GetSelection() != wxNOT_FOUND )
     {
         int active = m_pClientWindow->GetSelection() - 1;
-        if (active < 0)
+
+        if ( active < 0 )
+        {
             active = m_pClientWindow->GetPageCount() - 1;
+        }
 
-        m_pClientWindow->SetSelection(active);
+        m_pClientWindow->SetSelection ( active );
     }
 }
 
@@ -293,83 +321,102 @@
 }
 
 #if wxUSE_MENUS
-void wxAuiMDIParentFrame::RemoveWindowMenu(wxMenuBar* pMenuBar)
+void wxAuiMDIParentFrame::RemoveWindowMenu ( wxMenuBar * pMenuBar )
 {
-    if (pMenuBar && m_pWindowMenu)
+    if ( pMenuBar && m_pWindowMenu )
     {
         // Remove old window menu
-        int pos = pMenuBar->FindMenu(_("&Window"));
-        if (pos != wxNOT_FOUND)
+        int pos = pMenuBar->FindMenu ( _ ( "&Window" ) );
+
+        if ( pos != wxNOT_FOUND )
         {
             // DBG:: We're going to delete the wrong menu!!!
-            wxASSERT(m_pWindowMenu == pMenuBar->GetMenu(pos));
-            pMenuBar->Remove(pos);
+            wxASSERT ( m_pWindowMenu == pMenuBar->GetMenu ( pos ) );
+            pMenuBar->Remove ( pos );
         }
     }
 }
 
-void wxAuiMDIParentFrame::AddWindowMenu(wxMenuBar *pMenuBar)
+void wxAuiMDIParentFrame::AddWindowMenu ( wxMenuBar * pMenuBar )
 {
-    if (pMenuBar && m_pWindowMenu)
+    if ( pMenuBar && m_pWindowMenu )
     {
-        int pos = pMenuBar->FindMenu(wxGetStockLabel(wxID_HELP,wxSTOCK_NOFLAGS));
-        if (pos == wxNOT_FOUND)
-            pMenuBar->Append(m_pWindowMenu, _("&Window"));
+        int pos = pMenuBar->FindMenu ( wxGetStockLabel ( wxID_HELP, wxSTOCK_NOFLAGS ) );
+
+        if ( pos == wxNOT_FOUND )
+        {
+            pMenuBar->Append ( m_pWindowMenu, _ ( "&Window" ) );
+        }
+
         else
-            pMenuBar->Insert(pos, m_pWindowMenu, _("&Window"));
+        {
+            pMenuBar->Insert ( pos, m_pWindowMenu, _ ( "&Window" ) );
+        }
     }
 }
 
-void wxAuiMDIParentFrame::DoHandleMenu(wxCommandEvent& event)
+void wxAuiMDIParentFrame::DoHandleMenu ( wxCommandEvent & event )
 {
-    switch (event.GetId())
+    switch ( event.GetId() )
     {
         case wxWINDOWCLOSE:
-            if (m_pActiveChild)
+            if ( m_pActiveChild )
+            {
                 m_pActiveChild->Close();
+            }
+
             break;
+
         case wxWINDOWCLOSEALL:
-            while (m_pActiveChild)
+            while ( m_pActiveChild )
             {
-                if (!m_pActiveChild->Close())
+                if ( !m_pActiveChild->Close() )
                 {
                     return; // failure
                 }
             }
+
             break;
+
         case wxWINDOWNEXT:
             ActivateNext();
             break;
+
         case wxWINDOWPREV:
             ActivatePrevious();
             break;
+
         default:
             event.Skip();
     }
 }
 #endif // wxUSE_MENUS
 
-void wxAuiMDIParentFrame::DoGetClientSize(int* width, int* height) const
+void wxAuiMDIParentFrame::DoGetClientSize ( int * width, int * height ) const
 {
-    wxFrame::DoGetClientSize(width, height);
+    wxFrame::DoGetClientSize ( width, height );
 }
 
-void wxAuiMDIParentFrame::Tile(wxOrientation orient)
+void wxAuiMDIParentFrame::Tile ( wxOrientation orient )
 {
-    wxAuiMDIClientWindow* client_window = GetClientWindow();
-    wxASSERT_MSG(client_window, wxT("Missing MDI Client Window"));
+    wxAuiMDIClientWindow * clientWindow = GetClientWindow();
+    wxASSERT_MSG ( clientWindow, wxT ( "Missing MDI Client Window" ) );
 
-    int cur_idx = client_window->GetSelection();
-    if (cur_idx == -1)
+    int curIdx = clientWindow->GetSelection();
+
+    if ( curIdx == -1 )
+    {
         return;
+    }
 
-    if (orient == wxVERTICAL)
+    if ( orient == wxVERTICAL )
     {
-        client_window->Split(cur_idx, wxLEFT);
+        clientWindow->Split ( curIdx, wxLEFT );
     }
-    else if (orient == wxHORIZONTAL)
+
+    else if ( orient == wxHORIZONTAL )
     {
-        client_window->Split(cur_idx, wxTOP);
+        clientWindow->Split ( curIdx, wxTOP );
     }
 }
 
@@ -378,12 +425,12 @@
 // wxAuiMDIChildFrame
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIChildFrame, wxPanel)
+IMPLEMENT_DYNAMIC_CLASS ( wxAuiMDIChildFrame, wxPanel )
 
-BEGIN_EVENT_TABLE(wxAuiMDIChildFrame, wxPanel)
-    EVT_MENU_HIGHLIGHT_ALL(wxAuiMDIChildFrame::OnMenuHighlight)
-    EVT_ACTIVATE(wxAuiMDIChildFrame::OnActivate)
-    EVT_CLOSE(wxAuiMDIChildFrame::OnCloseWindow)
+BEGIN_EVENT_TABLE ( wxAuiMDIChildFrame, wxPanel )
+    EVT_MENU_HIGHLIGHT_ALL ( wxAuiMDIChildFrame::OnMenuHighlight )
+    EVT_ACTIVATE ( wxAuiMDIChildFrame::OnActivate )
+    EVT_CLOSE ( wxAuiMDIChildFrame::OnCloseWindow )
 END_EVENT_TABLE()
 
 wxAuiMDIChildFrame::wxAuiMDIChildFrame()
@@ -391,13 +438,13 @@
     Init();
 }
 
-wxAuiMDIChildFrame::wxAuiMDIChildFrame(wxAuiMDIParentFrame *parent,
-                                       wxWindowID id,
-                                       const wxString& title,
-                                       const wxPoint& WXUNUSED(pos),
-                                       const wxSize& size,
-                                       long style,
-                                       const wxString& name)
+wxAuiMDIChildFrame::wxAuiMDIChildFrame ( wxAuiMDIParentFrame * parent,
+                                         wxWindowID id,
+                                         const wxString & title,
+                                         const wxPoint & WXUNUSED ( pos ),
+                                         const wxSize & size,
+                                         long style,
+                                         const wxString & name )
 {
     Init();
 
@@ -408,70 +455,77 @@
     // wxAuiMDIChildFrame is not really derived from wxFrame, as wxMDIChildFrame
     // is, but those are the expected symantics.  No style flag is passed
     // onto the panel underneath.
-    if (style & wxMINIMIZE)
-        m_activate_on_create = false;
+    if ( style & wxMINIMIZE )
+    {
+        m_activateOnCreate = false;
+    }
 
-    Create(parent, id, title, wxDefaultPosition, size, 0, name);
+    Create ( parent, id, title, wxDefaultPosition, size, 0, name );
 }
 
 wxAuiMDIChildFrame::~wxAuiMDIChildFrame()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    if (pParentFrame)
+    wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+
+    if ( pParentFrame )
     {
-        if (pParentFrame->GetActiveChild() == this)
+        if ( pParentFrame->GetActiveChild() == this )
         {
-            pParentFrame->SetActiveChild(NULL);
-            pParentFrame->SetChildMenuBar(NULL);
+            pParentFrame->SetActiveChild ( NULL );
+            pParentFrame->SetChildMenuBar ( NULL );
         }
-        wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-        wxASSERT(pClientWindow);
-        int idx = pClientWindow->GetPageIndex(this);
-        if (idx != wxNOT_FOUND)
+
+        wxAuiMDIClientWindow * pClientWindow = pParentFrame->GetClientWindow();
+        wxASSERT ( pClientWindow );
+        int idx = pClientWindow->GetPageIndex ( this );
+
+        if ( idx != wxNOT_FOUND )
         {
-            pClientWindow->RemovePage(idx);
+            pClientWindow->RemovePage ( idx );
         }
     }
 
 #if wxUSE_MENUS
-    wxDELETE(m_pMenuBar);
+    wxDELETE ( m_pMenuBar );
 #endif // wxUSE_MENUS
 }
 
-bool wxAuiMDIChildFrame::Create(wxAuiMDIParentFrame* parent,
-                                wxWindowID id,
-                                const wxString& title,
-                                const wxPoint& WXUNUSED(pos),
-                                const wxSize& size,
-                                long style,
-                                const wxString& name)
+bool wxAuiMDIChildFrame::Create ( wxAuiMDIParentFrame * parent,
+                                  wxWindowID id,
+                                  const wxString & title,
+                                  const wxPoint & WXUNUSED ( pos ),
+                                  const wxSize & size,
+                                  long style,
+                                  const wxString & name )
 {
-    wxAuiMDIClientWindow* pClientWindow = parent->GetClientWindow();
-    wxASSERT_MSG((pClientWindow != NULL), wxT("Missing MDI client window."));
+    wxAuiMDIClientWindow * pClientWindow = parent->GetClientWindow();
+    wxASSERT_MSG ( ( pClientWindow != NULL ), wxT ( "Missing MDI client window." ) );
 
     // see comment in constructor
-    if (style & wxMINIMIZE)
-        m_activate_on_create = false;
+    if ( style & wxMINIMIZE )
+    {
+        m_activateOnCreate = false;
+    }
 
-    wxSize cli_size = pClientWindow->GetClientSize();
+    wxSize cliSize = pClientWindow->GetClientSize();
 
     // create the window off-screen to prevent flicker
-    wxPanel::Create(pClientWindow,
-                    id,
-                    wxPoint(cli_size.x+1, cli_size.y+1),
-                    size,
-                    wxNO_BORDER, name);
+    wxPanel::Create ( pClientWindow,
+                      id,
+                      wxPoint ( cliSize.x + 1, cliSize.y + 1 ),
+                      size,
+                      wxNO_BORDER, name );
 
-    DoShow(false);
+    DoShow ( false );
 
-    SetMDIParentFrame(parent);
+    SetMDIParentFrame ( parent );
 
     // this is the currently active child
-    parent->SetActiveChild(this);
+    parent->SetActiveChild ( this );
 
     m_title = title;
 
-    pClientWindow->AddPage(this, title, m_activate_on_create);
+    pClientWindow->AddPage ( this, title, m_activateOnCreate );
     pClientWindow->Refresh();
 
     return true;
@@ -479,77 +533,86 @@
 
 bool wxAuiMDIChildFrame::Destroy()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+    wxASSERT_MSG ( pParentFrame, wxT ( "Missing MDI Parent Frame" ) );
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    wxASSERT_MSG(pClientWindow, wxT("Missing MDI Client Window"));
+    wxAuiMDIClientWindow * pClientWindow = pParentFrame->GetClientWindow();
+    wxASSERT_MSG ( pClientWindow, wxT ( "Missing MDI Client Window" ) );
 
-    if (pParentFrame->GetActiveChild() == this)
+    if ( pParentFrame->GetActiveChild() == this )
     {
         // deactivate ourself
-        wxActivateEvent event(wxEVT_ACTIVATE, false, GetId());
-        event.SetEventObject(this);
-        GetEventHandler()->ProcessEvent(event);
+        wxActivateEvent event ( wxEVT_ACTIVATE, false, GetId() );
+        event.SetEventObject ( this );
+        GetEventHandler()->ProcessEvent ( event );
 
-        pParentFrame->SetActiveChild(NULL);
-        pParentFrame->SetChildMenuBar(NULL);
+        pParentFrame->SetActiveChild ( NULL );
+        pParentFrame->SetChildMenuBar ( NULL );
     }
 
-    size_t page_count = pClientWindow->GetPageCount();
-    for (size_t pos = 0; pos < page_count; pos++)
+    size_t pageCount = pClientWindow->GetPageCount();
+
+    for ( size_t pos = 0; pos < pageCount; pos++ )
     {
-        if (pClientWindow->GetPage(pos) == this)
-            return pClientWindow->DeletePage(pos);
+        if ( pClientWindow->GetPage ( pos ) == this )
+        {
+            return pClientWindow->DeletePage ( pos );
+        }
     }
 
     return false;
 }
 
 #if wxUSE_MENUS
-void wxAuiMDIChildFrame::SetMenuBar(wxMenuBar *menu_bar)
+void wxAuiMDIChildFrame::SetMenuBar ( wxMenuBar * menuBar )
 {
-    wxMenuBar *pOldMenuBar = m_pMenuBar;
-    m_pMenuBar = menu_bar;
+    wxMenuBar * pOldMenuBar = m_pMenuBar;
+    m_pMenuBar = menuBar;
 
-    if (m_pMenuBar)
+    if ( m_pMenuBar )
     {
-        wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-        wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+        wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+        wxASSERT_MSG ( pParentFrame, wxT ( "Missing MDI Parent Frame" ) );
 
-        m_pMenuBar->SetParent(pParentFrame);
-        if (pParentFrame->GetActiveChild() == this)
+        m_pMenuBar->SetParent ( pParentFrame );
+
+        if ( pParentFrame->GetActiveChild() == this )
         {
             // replace current menu bars
-            if (pOldMenuBar)
-                pParentFrame->SetChildMenuBar(NULL);
-            pParentFrame->SetChildMenuBar(this);
+            if ( pOldMenuBar )
+            {
+                pParentFrame->SetChildMenuBar ( NULL );
+            }
+
+            pParentFrame->SetChildMenuBar ( this );
         }
     }
 }
 
-wxMenuBar *wxAuiMDIChildFrame::GetMenuBar() const
+wxMenuBar * wxAuiMDIChildFrame::GetMenuBar() const
 {
     return m_pMenuBar;
 }
 #endif // wxUSE_MENUS
 
-void wxAuiMDIChildFrame::SetTitle(const wxString& title)
+void wxAuiMDIChildFrame::SetTitle ( const wxString & title )
 {
     m_title = title;
 
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+    wxASSERT_MSG ( pParentFrame, wxT ( "Missing MDI Parent Frame" ) );
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    if (pClientWindow != NULL)
+    wxAuiMDIClientWindow * pClientWindow = pParentFrame->GetClientWindow();
+
+    if ( pClientWindow != NULL )
     {
         size_t pos;
-        for (pos = 0; pos < pClientWindow->GetPageCount(); pos++)
+
+        for ( pos = 0; pos < pClientWindow->GetPageCount(); pos++ )
         {
-            if (pClientWindow->GetPage(pos) == this)
+            if ( pClientWindow->GetPage ( pos ) == this )
             {
-                pClientWindow->SetPageText(pos, m_title);
+                pClientWindow->SetPageText ( pos, m_title );
                 break;
             }
         }
@@ -561,41 +624,42 @@
     return m_title;
 }
 
-void wxAuiMDIChildFrame::SetIcons(const wxIconBundle& icons)
+void wxAuiMDIChildFrame::SetIcons ( const wxIconBundle & icons )
 {
     // get icon with the system icon size
-    SetIcon(icons.GetIcon(-1));
-    m_icon_bundle = icons;
+    SetIcon ( icons.GetIcon ( -1 ) );
+    m_iconBundle = icons;
 }
 
-const wxIconBundle& wxAuiMDIChildFrame::GetIcons() const
+const wxIconBundle & wxAuiMDIChildFrame::GetIcons() const
 {
-    return m_icon_bundle;
+    return m_iconBundle;
 }
 
-void wxAuiMDIChildFrame::SetIcon(const wxIcon& icon)
+void wxAuiMDIChildFrame::SetIcon ( const wxIcon & icon )
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+    wxASSERT_MSG ( pParentFrame, wxT ( "Missing MDI Parent Frame" ) );
 
     m_icon = icon;
 
     wxBitmap bmp;
-    bmp.CopyFromIcon(m_icon);
+    bmp.CopyFromIcon ( m_icon );
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
-    if (pClientWindow != NULL)
+    wxAuiMDIClientWindow * pClientWindow = pParentFrame->GetClientWindow();
+
+    if ( pClientWindow != NULL )
     {
-        int idx = pClientWindow->GetPageIndex(this);
+        int idx = pClientWindow->GetPageIndex ( this );
 
-        if (idx != -1)
+        if ( idx != -1 )
         {
-            pClientWindow->SetPageBitmap((size_t)idx, bmp);
+            pClientWindow->SetPageBitmap ( ( size_t ) idx, bmp );
         }
     }
 }
 
-const wxIcon& wxAuiMDIChildFrame::GetIcon() const
+const wxIcon & wxAuiMDIChildFrame::GetIcon() const
 {
     return m_icon;
 }
@@ -603,103 +667,106 @@
 
 void wxAuiMDIChildFrame::Activate()
 {
-    wxAuiMDIParentFrame* pParentFrame = GetMDIParentFrame();
-    wxASSERT_MSG(pParentFrame, wxT("Missing MDI Parent Frame"));
+    wxAuiMDIParentFrame * pParentFrame = GetMDIParentFrame();
+    wxASSERT_MSG ( pParentFrame, wxT ( "Missing MDI Parent Frame" ) );
 
-    wxAuiMDIClientWindow* pClientWindow = pParentFrame->GetClientWindow();
+    wxAuiMDIClientWindow * pClientWindow = pParentFrame->GetClientWindow();
 
-    if (pClientWindow != NULL)
+    if ( pClientWindow != NULL )
     {
         size_t pos;
-        for (pos = 0; pos < pClientWindow->GetPageCount(); pos++)
+
+        for ( pos = 0; pos < pClientWindow->GetPageCount(); pos++ )
         {
-            if (pClientWindow->GetPage(pos) == this)
+            if ( pClientWindow->GetPage ( pos ) == this )
             {
-                pClientWindow->SetSelection(pos);
+                pClientWindow->SetSelection ( pos );
                 break;
             }
         }
     }
 }
 
-void wxAuiMDIChildFrame::OnMenuHighlight(wxMenuEvent& event)
+void wxAuiMDIChildFrame::OnMenuHighlight ( wxMenuEvent & event )
 {
 #if wxUSE_STATUSBAR
-    if (m_pMDIParentFrame)
+
+    if ( m_pMDIParentFrame )
     {
         // we don't have any help text for this item,
         // but may be the MDI frame does?
-        m_pMDIParentFrame->OnMenuHighlight(event);
+        m_pMDIParentFrame->OnMenuHighlight ( event );
     }
+
 #else
-    wxUnusedVar(event);
+    wxUnusedVar ( event );
 #endif // wxUSE_STATUSBAR
 }
 
-void wxAuiMDIChildFrame::OnActivate(wxActivateEvent& WXUNUSED(event))
+void wxAuiMDIChildFrame::OnActivate ( wxActivateEvent & WXUNUSED ( event ) )
 {
     // do nothing
 }
 
-void wxAuiMDIChildFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
+void wxAuiMDIChildFrame::OnCloseWindow ( wxCloseEvent & WXUNUSED ( event ) )
 {
     Destroy();
 }
 
-void wxAuiMDIChildFrame::SetMDIParentFrame(wxAuiMDIParentFrame* parentFrame)
+void wxAuiMDIChildFrame::SetMDIParentFrame ( wxAuiMDIParentFrame * parentFrame )
 {
     m_pMDIParentFrame = parentFrame;
 }
 
-wxAuiMDIParentFrame* wxAuiMDIChildFrame::GetMDIParentFrame() const
+wxAuiMDIParentFrame * wxAuiMDIChildFrame::GetMDIParentFrame() const
 {
     return m_pMDIParentFrame;
 }
 
 void wxAuiMDIChildFrame::Init()
 {
-    m_activate_on_create = true;
+    m_activateOnCreate = true;
     m_pMDIParentFrame = NULL;
 #if wxUSE_MENUS
     m_pMenuBar = NULL;
 #endif // wxUSE_MENUS
 }
 
-bool wxAuiMDIChildFrame::Show(bool show)
+bool wxAuiMDIChildFrame::Show ( bool show )
 {
-    m_activate_on_create = show;
+    m_activateOnCreate = show;
 
     // do nothing
     return true;
 }
 
-void wxAuiMDIChildFrame::DoShow(bool show)
+void wxAuiMDIChildFrame::DoShow ( bool show )
 {
-    wxWindow::Show(show);
+    wxWindow::Show ( show );
 }
 
-void wxAuiMDIChildFrame::DoSetSize(int x, int y, int width, int height, int sizeFlags)
+void wxAuiMDIChildFrame::DoSetSize ( int x, int y, int width, int height, int sizeFlags )
 {
-    m_mdi_newrect = wxRect(x, y, width, height);
+    m_mdiNewRect = wxRect ( x, y, width, height );
 #ifdef __WXGTK__
-    wxPanel::DoSetSize(x,y,width, height, sizeFlags);
+    wxPanel::DoSetSize ( x, y, width, height, sizeFlags );
 #else
-    wxUnusedVar(sizeFlags);
+    wxUnusedVar ( sizeFlags );
 #endif
 }
 
-void wxAuiMDIChildFrame::DoMoveWindow(int x, int y, int width, int height)
+void wxAuiMDIChildFrame::DoMoveWindow ( int x, int y, int width, int height )
 {
-    m_mdi_newrect = wxRect(x, y, width, height);
+    m_mdiNewRect = wxRect ( x, y, width, height );
 }
 
 void wxAuiMDIChildFrame::ApplyMDIChildFrameRect()
 {
-    if (m_mdi_currect != m_mdi_newrect)
+    if ( m_mdiCurrect != m_mdiNewRect )
     {
-        wxPanel::DoMoveWindow(m_mdi_newrect.x, m_mdi_newrect.y,
-                              m_mdi_newrect.width, m_mdi_newrect.height);
-        m_mdi_currect = m_mdi_newrect;
+        wxPanel::DoMoveWindow ( m_mdiNewRect.x, m_mdiNewRect.y,
+                                m_mdiNewRect.width, m_mdiNewRect.height );
+        m_mdiCurrect = m_mdiNewRect;
     }
 }
 
@@ -708,21 +775,21 @@
 // wxAuiMDIClientWindow
 //-----------------------------------------------------------------------------
 
-IMPLEMENT_DYNAMIC_CLASS(wxAuiMDIClientWindow, wxAuiNotebook)
+IMPLEMENT_DYNAMIC_CLASS ( wxAuiMDIClientWindow, wxAuiNotebook )
 
-BEGIN_EVENT_TABLE(wxAuiMDIClientWindow, wxAuiNotebook)
-    EVT_AUINOTEBOOK_PAGE_CHANGED(wxID_ANY, wxAuiMDIClientWindow::OnPageChanged)
-    EVT_AUINOTEBOOK_PAGE_CLOSE(wxID_ANY, wxAuiMDIClientWindow::OnPageClose)
-    EVT_SIZE(wxAuiMDIClientWindow::OnSize)
+BEGIN_EVENT_TABLE ( wxAuiMDIClientWindow, wxAuiNotebook )
+    EVT_AUINOTEBOOK_PAGE_CHANGED ( wxID_ANY, wxAuiMDIClientWindow::OnPageChanged )
+    EVT_AUINOTEBOOK_PAGE_CLOSE ( wxID_ANY, wxAuiMDIClientWindow::OnPageClose )
+    EVT_SIZE ( wxAuiMDIClientWindow::OnSize )
 END_EVENT_TABLE()
 
 wxAuiMDIClientWindow::wxAuiMDIClientWindow()
 {
 }
 
-wxAuiMDIClientWindow::wxAuiMDIClientWindow(wxAuiMDIParentFrame* parent, long style)
+wxAuiMDIClientWindow::wxAuiMDIClientWindow ( wxAuiMDIParentFrame * parent, long style )
 {
-    CreateClient(parent, style);
+    CreateClient ( parent, style );
 }
 
 wxAuiMDIClientWindow::~wxAuiMDIClientWindow()
@@ -730,88 +797,90 @@
     DestroyChildren();
 }
 
-bool wxAuiMDIClientWindow::CreateClient(wxAuiMDIParentFrame* parent, long style)
+bool wxAuiMDIClientWindow::CreateClient ( wxAuiMDIParentFrame * parent, long style )
 {
-    SetWindowStyleFlag(style);
+    SetWindowStyleFlag ( style );
 
-    wxSize caption_icon_size =
-            wxSize(wxSystemSettings::GetMetric(wxSYS_SMALLICON_X),
-                   wxSystemSettings::GetMetric(wxSYS_SMALLICON_Y));
-    SetUniformBitmapSize(caption_icon_size);
+    wxSize captionIconSize =
+        wxSize ( wxSystemSettings::GetMetric ( wxSYS_SMALLICON_X ),
+                 wxSystemSettings::GetMetric ( wxSYS_SMALLICON_Y ) );
+    SetUniformBitmapSize ( captionIconSize );
 
-    if (!wxAuiNotebook::Create(parent,
-                               wxID_ANY,
-                               wxPoint(0,0),
-                               wxSize(100, 100),
-                               wxAUI_NB_DEFAULT_STYLE | wxNO_BORDER))
+    if ( !wxAuiNotebook::Create ( parent,
+                                  wxID_ANY,
+                                  wxPoint ( 0, 0 ),
+                                  wxSize ( 100, 100 ),
+                                  wxAUI_NB_DEFAULT_STYLE | wxNO_BORDER ) )
     {
         return false;
     }
 
-    wxColour bkcolour = wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE);
-    SetOwnBackgroundColour(bkcolour);
+    wxColour bkcolour = wxSystemSettings::GetColour ( wxSYS_COLOUR_APPWORKSPACE );
+    SetOwnBackgroundColour ( bkcolour );
 
-    m_mgr.GetArtProvider()->SetColour(wxAUI_DOCKART_BACKGROUND_COLOUR, bkcolour);
+    m_mgr.GetArtProvider()->SetColour ( wxAUI_DOCKART_BACKGROUND_COLOUR, bkcolour );
 
     return true;
 }
 
-int wxAuiMDIClientWindow::SetSelection(size_t nPage)
+int wxAuiMDIClientWindow::SetSelection ( size_t nPage )
 {
-    return wxAuiNotebook::SetSelection(nPage);
+    return wxAuiNotebook::SetSelection ( nPage );
 }
 
-void wxAuiMDIClientWindow::PageChanged(int old_selection, int new_selection)
+void wxAuiMDIClientWindow::PageChanged ( int oldSelection, int newSelection )
 {
     // don't do anything if the page doesn't actually change
-    if (old_selection == new_selection)
+    if ( oldSelection == newSelection )
+    {
         return;
+    }
 
     /*
     // don't do anything if the new page is already active
-    if (new_selection != -1)
+    if (newSelection != -1)
     {
-        wxAuiMDIChildFrame* child = (wxAuiMDIChildFrame*)GetPage(new_selection);
+        wxAuiMDIChildFrame* child = (wxAuiMDIChildFrame*)GetPage(newSelection);
         if (child->GetMDIParentFrame()->GetActiveChild() == child)
             return;
     }*/
 
 
     // notify old active child that it has been deactivated
-    if ((old_selection != -1) && (old_selection < (int)GetPageCount()))
+    if ( ( oldSelection != -1 ) && ( oldSelection < ( int ) GetPageCount() ) )
     {
-        wxAuiMDIChildFrame* old_child = (wxAuiMDIChildFrame*)GetPage(old_selection);
-        wxASSERT_MSG(old_child, wxT("wxAuiMDIClientWindow::PageChanged - null page pointer"));
+        wxAuiMDIChildFrame * oldChild = ( wxAuiMDIChildFrame * ) GetPage ( oldSelection );
+        wxASSERT_MSG ( oldChild, wxT ( "wxAuiMDIClientWindow::PageChanged - null page pointer" ) );
 
-        wxActivateEvent event(wxEVT_ACTIVATE, false, old_child->GetId());
-        event.SetEventObject(old_child);
-        old_child->GetEventHandler()->ProcessEvent(event);
+        wxActivateEvent event ( wxEVT_ACTIVATE, false, oldChild->GetId() );
+        event.SetEventObject ( oldChild );
+        oldChild->GetEventHandler()->ProcessEvent ( event );
     }
 
     // notify new active child that it has been activated
-    if (new_selection != -1)
+    if ( newSelection != -1 )
     {
-        wxAuiMDIChildFrame* active_child = (wxAuiMDIChildFrame*)GetPage(new_selection);
-        wxASSERT_MSG(active_child, wxT("wxAuiMDIClientWindow::PageChanged - null page pointer"));
+        wxAuiMDIChildFrame * activeChild = ( wxAuiMDIChildFrame * ) GetPage ( newSelection );
+        wxASSERT_MSG ( activeChild, wxT ( "wxAuiMDIClientWindow::PageChanged - null page pointer" ) );
 
-        wxActivateEvent event(wxEVT_ACTIVATE, true, active_child->GetId());
-        event.SetEventObject(active_child);
-        active_child->GetEventHandler()->ProcessEvent(event);
+        wxActivateEvent event ( wxEVT_ACTIVATE, true, activeChild->GetId() );
+        event.SetEventObject ( activeChild );
+        activeChild->GetEventHandler()->ProcessEvent ( event );
 
-        if (active_child->GetMDIParentFrame())
+        if ( activeChild->GetMDIParentFrame() )
         {
-            active_child->GetMDIParentFrame()->SetActiveChild(active_child);
-            active_child->GetMDIParentFrame()->SetChildMenuBar(active_child);
+            activeChild->GetMDIParentFrame()->SetActiveChild ( activeChild );
+            activeChild->GetMDIParentFrame()->SetChildMenuBar ( activeChild );
         }
     }
 
 
 }
 
-void wxAuiMDIClientWindow::OnPageClose(wxAuiNotebookEvent& evt)
+void wxAuiMDIClientWindow::OnPageClose ( wxAuiNotebookEvent & evt )
 {
-    wxAuiMDIChildFrame* wnd;
-    wnd = static_cast<wxAuiMDIChildFrame*>(GetPage(evt.GetSelection()));
+    wxAuiMDIChildFrame * wnd;
+    wnd = static_cast <wxAuiMDIChildFrame *> ( GetPage ( evt.GetSelection() ) );
 
     wnd->Close();
 
@@ -821,17 +890,19 @@
     evt.Veto();
 }
 
-void wxAuiMDIClientWindow::OnPageChanged(wxAuiNotebookEvent& evt)
+void wxAuiMDIClientWindow::OnPageChanged ( wxAuiNotebookEvent & evt )
 {
-    PageChanged(evt.GetOldSelection(), evt.GetSelection());
+    PageChanged ( evt.GetOldSelection(), evt.GetSelection() );
 }
 
-void wxAuiMDIClientWindow::OnSize(wxSizeEvent& evt)
+void wxAuiMDIClientWindow::OnSize ( wxSizeEvent & evt )
 {
-    wxAuiNotebook::OnSize(evt);
+    wxAuiNotebook::OnSize ( evt );
 
-    for (size_t pos = 0; pos < GetPageCount(); pos++)
-        ((wxAuiMDIChildFrame *)GetPage(pos))->ApplyMDIChildFrameRect();
+    for ( size_t pos = 0; pos < GetPageCount(); pos++ )
+    {
+        ( ( wxAuiMDIChildFrame * ) GetPage ( pos ) )->ApplyMDIChildFrameRect();
+    }
 }
 
 #endif //wxUSE_AUI

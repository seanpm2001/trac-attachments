diff -ru2 -N -xCVS -x.#* -x*.orig -x*.rej -x*~ -x*.o -x*.a-x*setup.h -x*y*.c wxWidgets-2.5.3.orig/src/msw/timer.cpp wxWidgets-2.5.3/src/msw/timer.cpp
--- wxWidgets-2.5.3.orig/src/msw/timer.cpp	Sat Oct  9 12:01:32 2004
+++ wxWidgets-2.5.3/src/msw/timer.cpp	Thu Nov  4 14:30:02 2004
@@ -47,5 +47,12 @@
                     wxTimerMap);
 
-static wxTimerMap g_timerMap;
+
+static wxTimerMap & g_timerMap()
+{
+    // Prevents static allocation ordering problems.
+    static wxTimerMap s_timerMap;
+    return s_timerMap;
+}
+
 
 // ----------------------------------------------------------------------------
@@ -104,5 +111,5 @@
     // this can happen and this would be catastrophic to us as we rely on ids
     // uniquely identifying the timers because we use them as keys in the hash
-    if ( g_timerMap.find(m_id) != g_timerMap.end() )
+    if ( g_timerMap().find(m_id) != g_timerMap().end() )
     {
         wxLogError(_("Timer creation failed."));
@@ -114,5 +121,5 @@
     }
 
-    g_timerMap[m_id] = this;
+    ( g_timerMap() )[m_id] = this;
 
     return true;
@@ -125,5 +132,5 @@
         ::KillTimer(NULL, m_id);
 
-        g_timerMap.erase(m_id);
+        g_timerMap().erase(m_id);
     }
 
@@ -151,7 +158,7 @@
             DWORD WXUNUSED(dwTime))
 {
-    wxTimerMap::iterator node = g_timerMap.find((unsigned long)idTimer);
+    wxTimerMap::iterator node = g_timerMap().find((unsigned long)idTimer);
 
-    wxCHECK_RET( node != g_timerMap.end(), wxT("bogus timer id in wxTimerProc") );
+    wxCHECK_RET( node != g_timerMap().end(), wxT("bogus timer id in wxTimerProc") );
 
     wxProcessTimer(*(node->second));

 	  	 

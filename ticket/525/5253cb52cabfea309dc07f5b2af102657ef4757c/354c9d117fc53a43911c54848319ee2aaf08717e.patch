diff -rbu2P wxWindows/samples/controls/Makefile.in wxWindows/samples/cont1/Makefile.in
--- wxWindows/samples/controls/Makefile.in	Fri Jan 25 12:30:04 2002
+++ wxWindows/samples/cont1/Makefile.in	Sun Nov 10 17:47:26 2002
@@ -16,5 +16,5 @@
 PROGRAM=controls
 
-OBJECTS =$(PROGRAM).o
+OBJECTS =$(PROGRAM).o resizec.o
 DEPFILES=$(PROGRAM).d
 
diff -rbu2P wxWindows/samples/controls/controls.cpp wxWindows/samples/cont1/controls.cpp
--- wxWindows/samples/controls/controls.cpp	Sun Nov 10 16:42:14 2002
+++ wxWindows/samples/cont1/controls.cpp	Sun Nov 10 17:32:04 2002
@@ -36,4 +36,11 @@
 #endif
 
+// temporary until patch applied
+#define wxUSE_RESIZEABLECONTROL 1
+
+#if wxUSE_RESIZEABLECONTROL
+#include "wx/resizec.h"
+#endif
+
 #if defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXMAC__) || defined(__WXMGL__) || defined(__WXX11__)
     #define USE_XPM
@@ -859,4 +866,35 @@
 
     m_notebook->AddPage(panel, "wxSizer");
+#if wxUSE_RESIZEABLECONTROL
+
+    // resizeable controls
+
+#if defined(__WXGTK__) && wxUSE_PNG && wxUSE_IMAGE
+    wxImage::AddHandler(new wxPNGHandler);
+#endif
+    panel = new wxPanel(m_notebook);
+    panel->SetAutoLayout( TRUE );
+
+    wxBoxSizer *sizer1 = new wxBoxSizer( wxHORIZONTAL );
+
+    wxResizeableControlCanvas *cnv = new wxResizeableControlCanvas(panel,-1);
+    wxBitmapControl *tmp;
+    tmp = new wxBitmapControl(cnv,0,bitmap,wxPoint(10,10),
+                              wxSize(bitmap.GetWidth(),bitmap.GetHeight()),
+                              wxCLIP_SIBLINGS);
+    tmp = new wxBitmapControl(cnv,0,bmp1,wxPoint(100,10),
+                              wxSize(bmp1.GetWidth(),bmp1.GetHeight()),
+                              wxCLIP_SIBLINGS);
+    tmp = new wxBitmapControl(cnv,0,bmp2,wxPoint(10,100),
+                              wxSize(bmp2.GetWidth(),bmp2.GetHeight()),
+                              wxCLIP_SIBLINGS);
+    tmp = new wxBitmapControl(cnv,0,bmp3,wxPoint(100,100),
+                              wxSize(bmp3.GetWidth(),bmp3.GetHeight()),
+                              wxCLIP_SIBLINGS);
+    sizer1->Add( cnv, 3, wxALL|wxEXPAND, 10 );
+    panel->SetSizer( sizer1 );
+
+    m_notebook->AddPage(panel, "wxResizeableControl");
+#endif
 }
 
@@ -1515,5 +1553,7 @@
     wxToolTip::SetDelay(s_delay);
 
+#if wxUSE_LOG_DIALOG
     wxLogStatus(this, _T("Tooltip delay set to %ld milliseconds"), s_delay);
+#endif
 }
 
@@ -1526,5 +1566,7 @@
     wxToolTip::Enable(s_enabled);
 
+#if wxUSE_LOG_DIALOG
     wxLogStatus(this, _T("Tooltips %sabled"), s_enabled ? _T("en") : _T("dis") );
+#endif
 }
 #endif // tooltips
diff -rbu2P wxWindows/samples/controls/makefile.b32 wxWindows/samples/cont1/makefile.b32
--- wxWindows/samples/controls/makefile.b32	Sun Nov 10 16:43:04 2002
+++ wxWindows/samples/cont1/makefile.b32	Sun Nov 10 16:30:48 2002
@@ -11,5 +11,5 @@
 
 TARGET=controls
-OBJECTS = $(TARGET).obj
+OBJECTS = $(TARGET).obj resizec.obj
 
 !include $(WXDIR)\src\makeprog.b32
diff -rbu2P wxWindows/samples/controls/makefile.g95 wxWindows/samples/cont1/makefile.g95
--- wxWindows/samples/controls/makefile.g95	Tue Feb  9 16:29:12 1999
+++ wxWindows/samples/cont1/makefile.g95	Sun Nov 10 16:55:00 2002
@@ -11,5 +11,5 @@
 
 TARGET=controls
-OBJECTS = $(TARGET).o
+OBJECTS = $(TARGET).o resizec.o
 
 include $(WXDIR)/src/makeprog.g95
diff -rbu2P wxWindows/samples/controls/makefile.unx wxWindows/samples/cont1/makefile.unx
--- wxWindows/samples/controls/makefile.unx	Wed Nov 28 19:09:22 2001
+++ wxWindows/samples/cont1/makefile.unx	Sun Nov 10 17:47:42 2002
@@ -18,5 +18,5 @@
 CXX = $(shell wx-config --cxx)
 
-OBJECTS = $(PROGRAM).o
+OBJECTS = $(PROGRAM).o resizec.o
 
 # implementation
diff -rbu2P wxWindows/samples/controls/makefile.vc wxWindows/samples/cont1/makefile.vc
--- wxWindows/samples/controls/makefile.vc	Sun Jan 24 19:58:52 1999
+++ wxWindows/samples/cont1/makefile.vc	Sun Nov 10 16:54:14 2002
@@ -13,5 +13,5 @@
 
 PROGRAM=controls
-OBJECTS = $(PROGRAM).obj
+OBJECTS = $(PROGRAM).obj resizec.obj
 
 !include $(WXDIR)\src\makeprog.vc
diff -rbu2P wxWindows/samples/controls/resizec.cpp wxWindows/samples/cont1/resizec.cpp
--- wxWindows/samples/controls/resizec.cpp	Thu Jan  1 01:00:00 1970
+++ wxWindows/samples/cont1/resizec.cpp	Sun Nov 10 17:40:58 2002
@@ -0,0 +1,713 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        resizec.cpp
+// Purpose:     wxResizeableControl
+// Author:      Markus Greither
+// Modified by:
+// Created:     11/10/02
+// RCS-ID:      $Id:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifdef __GNUG__
+    #pragma implementation "resizec.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#if defined(__BORLANDC__)
+    #pragma hdrstop
+#endif
+
+#ifndef WX_PRECOMP
+#include "wx/wx.h"
+#endif
+
+#include "wx/metafile.h"
+#include "wx/image.h"
+#include "wx/clipbrd.h"
+#include "wx/resizec.h"
+
+#ifdef __WXMSW__
+#include <windows.h>
+#include "wx/msw/winundef.h"
+#include "wx/msw/dib.h"
+#endif
+
+// ----------------------------------------------------------------------------
+// wxResizeableControl
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxResizeableControl, wxWindow)
+
+wxResizeableControl::wxResizeableControl(wxWindow *AParent,
+                                         int AnId,const wxPoint &pos,
+                                         const wxSize &size,long style,
+                                         const wxString &name)
+ : wxWindow(AParent,AnId,pos,size,style,name),
+   m_capt(0),m_movemode(wxResizeableControl::MoveWin),m_hasfocus(false)
+{
+    wxCommandEvent cevent(wxEVT_COMMAND_CHILD_CREATED,GetId());
+    if (GetParent())
+        GetParent()->AddPendingEvent(cevent);
+}
+
+void wxResizeableControl::FocusRectCoord(wxDC &DC,wxCoord x1,wxCoord y1,
+                                    wxCoord w,wxCoord h)
+{
+    wxPen pen(*wxBLACK,1,wxDOT);
+    wxBrush &OldBr = DC.GetBrush();
+    DC.SetBrush(*wxTRANSPARENT_BRUSH);
+    DC.SetPen(pen);
+    DC.SetLogicalFunction(wxINVERT);
+    DC.DrawRectangle(x1,y1,w,h);
+    DC.SetBrush(OldBr);
+    DC.SetPen(wxNullPen);
+    DC.SetLogicalFunction(wxCOPY);
+}
+
+// Draws the current window size
+void wxResizeableControl::DrawMoveRect(wxPoint hp,int Mode,float Ratio)
+{
+    wxScreenDC dc;
+    wxRect rect = NewRect(hp,Mode,Ratio);
+    DrawFocusRect(dc,rect);
+}
+
+int wxResizeableControl::PointInSizeRect(wxPoint hp)
+{
+    for (int i = 0;i < 8;i++)
+    {
+        int x = 6+GetSizeX(i)*(GetClientSize().x-11)/2;
+        int y = 6+GetSizeY(i)*(GetClientSize().y-11)/2;
+        wxRect rect(wxPoint(x-SizeXRad,y-SizeYRad),
+                    wxPoint(x+SizeXRad,y+SizeYRad));
+        if ((hp.x >= rect.x) && (hp.x <= rect.x+rect.width) &&
+            (hp.y >= rect.y) && (hp.y <= rect.y+rect.height))
+            return i;
+    }
+    return MoveWin;
+}
+
+// Calculates the current window size (Parent coordinates)
+wxRect wxResizeableControl::NewRect(wxPoint hp,int Mode,float Ratio)
+{
+    wxSize size = GetClientSize();
+    wxPoint pt(0,0);
+    ClientToScreen(&pt.x,&pt.y);
+    wxRect rect(pt,size);
+    wxRect rect1(rect);
+    wxPoint delta(hp.x-m_curpos.x,hp.y-m_curpos.y);
+    switch (Mode)
+    {
+      case MoveWin : {rect.x += delta.x; rect.y += delta.y;}; break;
+      case Top : rect.y += delta.y; rect.height -= delta.y; break;
+      case Bottom : rect.height += delta.y; break;
+      case Left : rect.x += delta.x; rect.width -= delta.x; break;
+      case Right : rect.width += delta.x; break;
+      case TopLeft :
+          rect.x += delta.x;
+          rect.y += delta.y;
+          rect.width -= delta.x;
+          rect.height -= delta.y;
+          if (Ratio)
+          {
+            if (rect.GetWidth() < rect.GetHeight()*Ratio)
+            {
+                int tmp = int(rect.GetHeight()*Ratio);
+                rect.x = rect.GetRight()-tmp+1;
+                rect.width = tmp;
+            }
+            else
+            {
+                int tmp = int(rect.GetWidth()/Ratio);
+                rect.y = rect.GetBottom()-tmp+1;
+                rect.height = tmp;
+            }
+          }
+          break;
+      case TopRight :
+          rect.width += delta.x;
+          rect.y += delta.y;
+          rect.height -= delta.y;
+          if (Ratio)
+          {
+              if (rect.GetWidth() < rect.GetHeight()*Ratio)
+                  rect.width = int(rect.GetHeight()*Ratio);
+              else
+              {
+                  int tmp = int(rect.GetWidth()/Ratio);
+                  rect.y = rect.GetBottom()-tmp+1;
+                  rect.height = tmp;
+              }
+          }
+          break;
+      case BottomLeft :
+          rect.x += delta.x;
+          rect.width -= delta.x;
+          rect.height += delta.y;
+          if (Ratio)
+          {
+              if (rect.GetWidth() < rect.GetHeight()*Ratio)
+              {
+                  int tmp = int(rect.GetHeight()*Ratio);
+                  rect.x = rect.GetRight()-tmp+1;
+                  rect.width = tmp;
+              }
+              else
+                  rect.height = int(rect.GetWidth()/Ratio);
+          }
+          break;
+      case BottomRight :
+          rect.width += delta.x;
+          rect.height += delta.y;
+          if (Ratio)
+          {
+              if (rect.GetWidth() < rect.GetHeight()*Ratio)
+                  rect.width = int(rect.GetHeight()*Ratio);
+              else
+                  rect.height = int(rect.GetWidth()/Ratio);
+          }
+          break;
+    }
+    wxSize size1 = GetParent()->GetClientSize();
+    wxPoint pt1(0,0);
+    GetParent()->ClientToScreen(&pt1.x,&pt1.y);
+    wxRect prect(pt1,size1);
+    prect.Inflate(-30,-30);
+    if ((((rect.x < prect.GetRight()) &&
+          (prect.x < rect.GetRight())) &&
+         ((rect.y < prect.GetBottom()) &&
+          (prect.y < rect.GetBottom()))) &&
+         (rect.GetWidth() >= 20) && (rect.GetHeight() >= 20))
+        return rect;
+    else
+        return rect1;
+}
+
+// Draws the size rectangles
+void wxResizeableControl::DrawSizeRect(wxDC &dc)
+{
+    int AltROP = dc.GetLogicalFunction();
+    dc.SetLogicalFunction(wxXOR);
+    wxBrush brs(wxSystemSettings::GetSystemColour(wxSYS_COLOUR_WINDOW),wxSOLID);
+    wxBrush &OldBr = dc.GetBrush();
+    dc.SetBrush(brs);
+    wxPen pen(wxSystemSettings::GetSystemColour(wxSYS_COLOUR_WINDOW),1,wxSOLID);
+    dc.SetPen(pen);
+    for (int i = 0;i < 8;i++)
+    {
+        int x = 0,y = 0;
+        switch (GetSizeX(i))
+        {
+            case 0 : x = SizeXRad; break;
+            case 1 : x = GetClientSize().x/2; break;
+            case 2 : x = GetClientSize().x-SizeXRad; break;
+        }
+        switch (GetSizeY(i))
+        {
+            case 0 : y = SizeYRad; break;
+            case 1 : y = GetClientSize().y/2; break;
+            case 2 : y = GetClientSize().y-SizeYRad; break;
+        }
+        dc.DrawRectangle(x-SizeXRad,y-SizeYRad,2*SizeXRad,2*SizeYRad);
+    }
+    dc.SetPen(wxNullPen);
+    dc.SetBrush(OldBr);
+    dc.SetLogicalFunction(AltROP);
+}
+
+bool wxResizeableControl::OnSetCursor(wxPoint hp)
+{
+  if (m_hasfocus)
+  {
+      wxPoint point = hp;
+      switch (PointInSizeRect(point))
+      {
+          case MoveWin : return (SetCursor(wxCursor(wxCURSOR_SIZING)) != 0);
+          case Top :
+          case Bottom : return (SetCursor(wxCursor(wxCURSOR_SIZENS)) != 0);
+          case Left :
+          case Right : return (SetCursor(wxCursor(wxCURSOR_SIZEWE)) != 0);
+          case TopRight :
+          case BottomLeft : return (SetCursor(wxCursor(wxCURSOR_SIZENESW)) != 0);
+          case BottomRight :
+          case TopLeft : return (SetCursor(wxCursor(wxCURSOR_SIZENWSE)) != 0);
+          default : return (SetCursor(*wxSTANDARD_CURSOR) != 0);
+      }
+  }
+  else
+      return (SetCursor(wxCursor(wxCURSOR_SIZING)) != 0);
+}
+
+void wxResizeableControl::OnLButtonDown(wxMouseEvent &event)
+{
+    wxPoint hp;
+    hp.x = event.GetX();
+    hp.y = event.GetY();
+    ScreenToClient(hp);
+    m_curpos = hp;
+    m_lastcurpos = hp;
+    if (!m_hasfocus)
+    {
+        SetFocus();
+        m_hasfocus = true;
+        m_movemode = MoveWin;
+    }
+    else
+    {
+        m_movemode = PointInSizeRect(hp);
+        OnSetCursor(hp);
+    }
+    CaptureMouse();
+    m_capt = true;
+    m_moved = false;
+}
+
+void wxResizeableControl::OnMouseMove(wxMouseEvent &event)
+{
+    wxPoint hp;
+    hp.x = event.GetX();
+    hp.y = event.GetY();
+    ScreenToClient(hp);
+    if (hp != m_lastcurpos)
+    {
+        if (m_capt)
+        {
+          if (m_moved)
+              DrawMoveRect(m_lastcurpos,m_movemode,GetRatio());
+          m_moved |= ((abs(m_curpos.x-hp.x) > 10) ||
+                      (abs(m_curpos.y-hp.y) > 10));
+          if (m_moved)
+            DrawMoveRect(hp,m_movemode,GetRatio());
+        }
+        else
+          OnSetCursor(hp);
+        m_lastcurpos = hp;
+    }
+}
+
+void wxResizeableControl::OnLButtonUp(wxMouseEvent &event)
+{
+    wxPoint point;
+    point.x = event.GetX();
+    point.y = event.GetY();
+    ScreenToClient(point);
+    if (m_capt)
+    {
+        ReleaseMouse();
+        m_capt = false;
+        if (m_moved)
+        {
+            DrawMoveRect(m_lastcurpos,m_movemode,GetRatio());
+            wxRect rect = NewRect(point,m_movemode,GetRatio());
+            wxPoint pt = rect.GetPosition();
+            GetParent()->ScreenToClient(&pt.x,&pt.y);
+            rect.x = pt.x;
+            rect.y = pt.y;
+            SetSize(rect);
+            Refresh();
+        }
+    }
+    m_movemode = MoveWin;
+}
+
+int wxResizeableControl::GetSizeX(int Mode)
+{
+    int Pos = -1;
+    switch (Mode)
+    {
+        case Bottom :
+        case Top : Pos = 1; break;
+        case TopLeft :
+        case BottomLeft :
+        case Left : Pos = 0; break;
+        case TopRight :
+        case BottomRight :
+        case Right : Pos = 2; break;
+    }
+    return Pos;
+}
+
+int wxResizeableControl::GetSizeY(int Mode)
+{
+  int Pos = -1;
+  switch (Mode)
+  {
+      case TopRight :
+      case TopLeft :
+      case Top : Pos = 0; break;
+      case Left :
+      case Right : Pos = 1; break;
+      case BottomRight :
+      case BottomLeft :
+      case Bottom : Pos = 2; break;
+  }
+  return Pos;
+}
+
+void wxResizeableControl::OnKillFocus(wxFocusEvent &)
+{
+    if (m_hasfocus)
+    {
+        m_hasfocus = false;
+        wxClientDC DC(this);
+        DrawSizeRect(DC);
+    }
+}
+
+void wxResizeableControl::OnSetFocus(wxFocusEvent &)
+{
+    if (!m_hasfocus)
+    {
+        Raise();
+        Update();
+        wxClientDC DC(this);
+        DrawSizeRect(DC);
+        m_hasfocus = true;
+    }
+}
+
+
+void wxResizeableControl::OnEditCut(wxCommandEvent &event)
+{
+    OnEditCopy(event);
+    wxCommandEvent cevent(wxEVT_COMMAND_CHILD_CLOSED,GetId());
+    if (GetParent())
+        GetParent()->AddPendingEvent(cevent);
+    Destroy();
+}
+
+void wxResizeableControl::OnKeyDown(wxKeyEvent &event)
+{
+    switch (event.GetKeyCode())
+    {
+        case WXK_DELETE :
+        {
+            wxCommandEvent cevent(wxEVT_COMMAND_CHILD_CLOSED,GetId());
+            if (GetParent())
+                GetParent()->AddPendingEvent(cevent);
+            Destroy();
+        }
+    }
+}
+
+void wxResizeableControl::OnSize(wxSizeEvent &)
+{
+    wxCommandEvent cevent(wxEVT_COMMAND_CHILD_RESIZED,GetId());
+    if (GetParent())
+        GetParent()->AddPendingEvent(cevent);
+}
+
+void wxResizeableControl::OnMove(wxMoveEvent &)
+{
+    wxCommandEvent cevent(wxEVT_COMMAND_CHILD_MOVED,GetId());
+    if (GetParent())
+        GetParent()->AddPendingEvent(cevent);
+}
+
+BEGIN_EVENT_TABLE(wxResizeableControl,wxWindow)
+    EVT_SET_FOCUS(wxResizeableControl::OnSetFocus)
+    EVT_KILL_FOCUS(wxResizeableControl::OnKillFocus)
+    EVT_MOTION(wxResizeableControl::OnMouseMove)
+    EVT_LEFT_UP(wxResizeableControl::OnLButtonUp)
+    EVT_LEFT_DOWN(wxResizeableControl::OnLButtonDown)
+    EVT_KEY_DOWN(wxResizeableControl::OnKeyDown)
+    EVT_SIZE(wxResizeableControl::OnSize)
+    EVT_MOVE(wxResizeableControl::OnMove)
+END_EVENT_TABLE()
+
+// ----------------------------------------------------------------------------
+// wxPictureControl
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxPictureControl,wxResizeableControl)
+
+void wxPictureControl::OnRightDown(wxMouseEvent &event)
+{
+    wxMenu *context_menu = new wxMenu;
+
+    context_menu->Append(wxID_COPY, _("Copy"));
+    context_menu->Append(wxID_CUT, _("Cut"));
+
+    wxPoint hp;
+    hp = event.GetPosition();
+    PopupMenu(context_menu,hp);
+    delete context_menu;
+}
+
+void wxPictureControl::OnPaletteChanged(wxSysColourChangedEvent &)
+{
+    Refresh();
+}
+
+void wxPictureControl::OnSize(wxSizeEvent &event)
+{
+    Refresh();
+    event.Skip();
+}
+
+BEGIN_EVENT_TABLE(wxPictureControl,wxResizeableControl)
+    EVT_RIGHT_DOWN(wxPictureControl::OnRightDown)
+    EVT_SIZE(wxPictureControl::OnSize)
+    EVT_UPDATE_UI(wxID_COPY,wxPictureControl::CeEditCopy)
+    EVT_UPDATE_UI(wxID_CUT,wxPictureControl::CeEditCopy)
+    EVT_SYS_COLOUR_CHANGED(wxPictureControl::OnPaletteChanged)
+END_EVENT_TABLE()
+
+#if defined(__WXMSW__) && wxUSE_METAFILE && wxUSE_ENH_METAFILE
+
+// ----------------------------------------------------------------------------
+// wxMetafileControl
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxMetafileControl, wxPictureControl)
+
+wxMetafileControl::wxMetafileControl(wxWindow *AParent, int AnId,WXHANDLE Meta,
+                               const wxPoint &pos,const wxSize &size,
+                               long style,const wxString &name)
+ : wxPictureControl(AParent,AnId,pos,size,style,name)
+{
+    m_metafile.SetHENHMETAFILE(Meta);
+    wxSize msize = m_metafile.GetSize();
+    SetSize(msize.x,msize.y);
+}
+
+wxMetafileControl::wxMetafileControl(wxWindow *AParent, int AnId,char *Data,
+                                     int Size,
+                                     const wxPoint &pos,const wxSize &size,
+                                     long style,const wxString &name)
+ : wxPictureControl(AParent,AnId,pos,size,style,name)
+{
+    m_metafile.SetHENHMETAFILE((WXHANDLE)
+                             ::SetEnhMetaFileBits(Size,(unsigned char *)Data));
+}
+
+wxMetafileControl::~wxMetafileControl()
+{
+}
+
+void wxMetafileControl::OnEditCopy(wxCommandEvent &)
+{
+    if (wxTheClipboard->Open())
+    {
+        wxTheClipboard->Clear();
+        m_metafile.SetClipboard(1,1);
+        wxTheClipboard->Close();
+    }
+}
+
+void wxMetafileControl::OnPaint(wxPaintEvent &)
+{
+    wxPaintDC dc(this);
+    wxSize size = GetClientSize();
+    Paint(dc,false,size);
+    if (m_hasfocus)
+        DrawSizeRect(dc);
+}
+
+void wxMetafileControl::Paint(wxDC &dc,bool,wxSize &size)
+{
+    wxRect rct(wxPoint(0,0),size);
+    if (m_metafile.Ok())
+        m_metafile.Play(&dc,&rct);
+}
+
+float wxMetafileControl::GetRatio()
+{
+    if (m_metafile.GetHeight())
+        return float(m_metafile.GetWidth())/m_metafile.GetHeight();
+    else
+        return 0;
+}
+
+long wxMetafileControl::GetPictureSize()
+{
+#ifdef __BORLANDC__
+    return ::GetEnhMetaFileBits((HENHMETAFILE)m_metafile.GetHENHMETAFILE(),0,0);
+#else // some MinGW versions do not have GetEnhMetaFileBits in the headers
+    HINSTANCE gdi = ::LoadLibrary("GDI32.DLL");
+    UINT WINAPI (*metab)(HENHMETAFILE,UINT,LPBYTE) = 0;
+    long ret = 0;
+    if (gdi)
+        metab = (UINT (WINAPI *)(HENHMETAFILE,UINT,LPBYTE))
+                ::GetProcAddress(gdi,"GetEnhMetaFileBits");
+    if (metab)
+        ret = metab((HENHMETAFILE)m_metafile.GetHENHMETAFILE(),0,0);
+    if (gdi)
+        ::FreeLibrary(gdi);
+    return ret;
+#endif
+}
+
+long wxMetafileControl::GetPictureData(char *data,long n)
+{
+#ifdef __BORLANDC__
+    return ::GetEnhMetaFileBits((HENHMETAFILE)m_metafile.GetHENHMETAFILE(),
+                                n,(unsigned char *)data);
+#else // some MinGW versions do not have GetEnhMetaFileBits in the headers
+    HINSTANCE gdi = ::LoadLibrary("GDI32.DLL");
+    UINT WINAPI (*metab)(HENHMETAFILE,UINT,LPBYTE) = 0;
+    long ret = 0;
+    if (gdi)
+        metab = (UINT (WINAPI *)(HENHMETAFILE,UINT,LPBYTE))
+                ::GetProcAddress(gdi,"GetEnhMetaFileBits");
+    if (metab)
+        ret = metab((HENHMETAFILE)m_metafile.GetHENHMETAFILE(),
+                    n,(unsigned char *)data);
+      if (gdi)
+        ::FreeLibrary(gdi);
+    return ret;
+#endif
+}
+
+BEGIN_EVENT_TABLE(wxMetafileControl,wxPictureControl)
+  EVT_MENU(wxID_CUT, wxMetafileControl::OnEditCut)
+  EVT_MENU(wxID_COPY, wxMetafileControl::OnEditCopy)
+  EVT_PAINT(wxMetafileControl::OnPaint)
+END_EVENT_TABLE()
+
+#endif // __WXMSW__
+
+// ----------------------------------------------------------------------------
+// wxBitmapControl
+// ----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxBitmapControl, wxPictureControl)
+
+wxBitmapControl::wxBitmapControl(wxWindow *AParent, int AnId,wxBitmap bitmap,
+                                 const wxPoint &pos,const wxSize &size,
+                                 long style,const wxString &name)
+ : wxPictureControl(AParent,AnId,pos,size,style,name)
+{
+    m_bitmap = new wxBitmap(bitmap);
+    int W = m_bitmap->GetWidth();
+    int H = m_bitmap->GetHeight();
+    SetSize(W,H);
+}
+
+#ifdef __WXMSW__
+
+wxBitmapControl::wxBitmapControl(wxWindow *AParent, int AnId,char *Data,
+                                 int /*Size*/,const wxPoint &pos,
+                                 const wxSize &size,
+                                 long style,const wxString &name)
+ : wxPictureControl(AParent,AnId,pos,size,style,name)
+{
+    m_bitmap = new wxBitmap(wxConvertDIBToBitmap((const LPBITMAPINFO)Data));
+}
+
+#endif
+
+wxBitmapControl::~wxBitmapControl()
+{
+    delete m_bitmap;
+}
+
+void wxBitmapControl::OnPaint(wxPaintEvent &)
+{
+    wxPaintDC dc(this);
+    wxSize size = GetClientSize();
+    Paint(dc,false,size);
+    if (m_hasfocus)
+        DrawSizeRect(dc);
+}
+
+void wxBitmapControl::Paint(wxDC &dc,bool,wxSize &size)
+{
+    if (m_bitmap)
+    {
+        wxImage img = m_bitmap->ConvertToImage();
+        img.Rescale(size.x,size.y);
+        wxBitmap bmp(img);
+        dc.DrawBitmap(bmp,0,0);
+    }
+}
+
+void wxBitmapControl::OnEditCopy(wxCommandEvent &)
+{
+    if (wxTheClipboard->Open())
+    {
+        wxTheClipboard->Clear();
+        wxBitmapDataObject *bdo = new wxBitmapDataObject;
+        wxBitmap *ClBitmap = new wxBitmap(*m_bitmap);
+        bdo->SetBitmap(*ClBitmap);
+        wxTheClipboard->SetData(bdo);
+        wxTheClipboard->Close();
+    }
+}
+
+#ifdef __WXMSW__
+
+long wxBitmapControl::GetPictureData(char *data,long /*n*/)
+{
+    wxConvertBitmapToDIB((LPBITMAPINFO)data,*m_bitmap);
+    return GetPictureSize();
+}
+
+long wxBitmapControl::GetPictureSize()
+{
+    return wxConvertBitmapToDIB(0,*m_bitmap);
+}
+
+#endif
+
+float wxBitmapControl::GetRatio()
+{
+    if (m_bitmap->GetHeight())
+        return float(m_bitmap->GetWidth())/m_bitmap->GetHeight();
+    else
+        return 0;
+}
+
+BEGIN_EVENT_TABLE(wxBitmapControl,wxPictureControl)
+  EVT_MENU(wxID_CUT, wxBitmapControl::OnEditCut)
+  EVT_MENU(wxID_COPY, wxBitmapControl::OnEditCopy)
+  EVT_PAINT(wxBitmapControl::OnPaint)
+END_EVENT_TABLE()
+
+// ----------------------------------------------------------------------------
+// wxResizeableControlCanvas
+// ----------------------------------------------------------------------------
+
+void wxResizeableControlCanvas::UpdateScrollRange()
+{
+    wxNode *Child = GetChildren().First();
+    wxSize GesSize;
+    while (Child)
+    {
+        wxWindow *chw = wxDynamicCast(Child->GetData(),wxResizeableControl);
+        if (chw)
+        {
+            wxRect rect = chw->GetRect();
+            rect.x += GetScrollPos(wxHORIZONTAL);
+            rect.y += GetScrollPos(wxVERTICAL);
+            if (rect.GetBottom() > GesSize.y)
+                GesSize.y = rect.GetBottom();
+            if (rect.GetRight() > GesSize.x)
+                GesSize.x = rect.GetRight();
+        }
+        Child = Child->Next();
+    }
+    SetScrollbars(1,1,GesSize.x,GesSize.y,
+                  GetScrollPos(wxHORIZONTAL),GetScrollPos(wxVERTICAL),true);
+}
+
+BEGIN_EVENT_TABLE(wxResizeableControlCanvas,wxScrolledWindow)
+     EVT_CHILD_CREATED(-1, wxResizeableControlCanvas::OnChildWindowChange)
+     EVT_CHILD_MOVED(-1, wxResizeableControlCanvas::OnChildWindowChange)
+     EVT_CHILD_RESIZED(-1, wxResizeableControlCanvas::OnChildWindowChange)
+     EVT_CHILD_CLOSED(-1, wxResizeableControlCanvas::OnChildWindowChange)
+END_EVENT_TABLE()
+
+// ----------------------------------------------------------------------------
+// Events
+// ----------------------------------------------------------------------------
+
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHILD_CREATED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHILD_MOVED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHILD_CLOSED)
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_CHILD_RESIZED)
+
+
diff -rbu2P wxWindows/samples/controls/wx/resizec.h wxWindows/samples/cont1/wx/resizec.h
--- wxWindows/samples/controls/wx/resizec.h	Thu Jan  1 01:00:00 1970
+++ wxWindows/samples/cont1/wx/resizec.h	Sun Nov 10 17:43:12 2002
@@ -0,0 +1,358 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/resizec.h
+// Purpose:     wxResizeableControl base class and derived classes
+//              for resizeable pictures
+// Author:      Markus Greither
+// Modified by:
+// Created:     11/10/02
+// RCS-ID:      $Id:
+// Copyright:   (c) Markus Greither
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef __RESIZECONTROL__
+#define __RESIZECONTROL__
+
+#if defined(__WXMSW__) && wxUSE_METAFILE && wxUSE_ENH_METAFILE
+#include "wx/metafile.h"
+#endif
+
+// ----------------------------------------------------------------------------
+// wxResizeable
+// ----------------------------------------------------------------------------
+
+//! Class for moveable and resizable child windows
+/*!
+    This class draws resize rectangles on each side and corner when focused.
+    Dragging these rectangles resizes the window.
+    
+    This class needs to be overloaded and Paint() defined with the graphics
+    rendering.
+
+    This would make a perfect abstract class, but the
+    definition of wxDynamicCast() doesn't allow this.
+*/
+class WXDLLEXPORT wxResizeableControl : public wxWindow
+{
+ public:
+    //! Flags for resize mode
+    enum SizeMoveModes
+    {
+        Top = 0,
+        Bottom,
+        Left,
+        Right,
+        TopLeft,
+        BottomLeft,
+        TopRight,
+        BottomRight,
+        MoveWin,
+        MaxMode
+    };
+    //! Size box dimension
+    enum SizeRads
+    {
+        SizeXRad = 5,
+        SizeYRad = 5
+    };
+    //! Ctor
+    wxResizeableControl() : wxWindow() {};
+    //! Ctor
+    wxResizeableControl(wxWindow *AParent, int AnId,const wxPoint &pos,
+                        const wxSize &size,long style = 0,
+                        const wxString &name = wxPanelNameStr);
+    //! Dtor
+    virtual ~wxResizeableControl() {};
+    //! Paint function for printing and screen output
+    virtual void Paint(wxDC &dc,bool Printing,wxSize &size) {};
+    //! Returns with/height ration
+    virtual float GetRatio()
+    {
+        return 1.0;
+    }
+    //! Same as FocusRectCoord but with wxRect parameter
+    inline void DrawFocusRect(wxDC &dc,wxRect rct)
+    {
+        FocusRectCoord(dc,rct.x,rct.y,rct.width,rct.height);
+    }
+
+// Event Handlers
+
+    //! Responds to set cursor event
+    bool OnSetCursor(wxPoint point);
+    //! Responds to left button up event
+    void OnLButtonUp(wxMouseEvent &event);
+    //! Responds to left button down event
+    void OnLButtonDown(wxMouseEvent &event);
+    //! Responds to mouse move event
+    void OnMouseMove(wxMouseEvent &event);
+    //! Responds to kill focus event
+    void OnKillFocus(wxFocusEvent &event);
+    //! Responds to set focus event
+    void OnSetFocus(wxFocusEvent &event);
+    //! Reponds to key down event
+    void OnKeyDown(wxKeyEvent &event);
+    //! Reponds to size event
+    void OnSize(wxSizeEvent &event);
+    //! Reponds to move event
+    void OnMove(wxMoveEvent &event);
+    //! Responds to cut event
+    virtual void OnEditCut(wxCommandEvent &event);
+    //! Enable cut event
+    virtual void CeEditCut(wxUpdateUIEvent &ce)
+    {
+        ce.Enable(true);
+    }
+    //! Responds to copy event
+    virtual void OnEditCopy(wxCommandEvent &event) {};
+    //! Enable / disable copy event
+    virtual void CeEditCopy(wxUpdateUIEvent &ce) {};
+
+ protected:
+    //! Flag for mouse capture
+    int m_capt;
+    //! Cached mouse cursor positions
+    wxPoint m_curpos,m_lastcurpos;
+    //! Saved move mode from left button down
+    int m_movemode;
+    //! Flags for focus and move state
+    bool m_hasfocus,m_moved;
+
+    //! Function that draws a focus rectangle
+    void FocusRectCoord(wxDC &DC,wxCoord x1,wxCoord y1,wxCoord w,wxCoord h);
+    //! Returns x size
+    int GetSizeX(int Mode);
+    //! Returns y size
+    int GetSizeY(int Mode);
+    //! Draw ored rectangle of current new size (redraw to remove)
+    void DrawMoveRect(wxPoint hp,int Mode,float Ratio = 0);
+    //! Return new rectangle size, based on mouse position hp
+    wxRect NewRect(wxPoint hp,int Mode,float Ratio = 0);
+    //! Draw size boxes for resize
+    void DrawSizeRect(wxDC &dc);
+    //! Determine in which size box the pouse position hp is if any
+    int PointInSizeRect(wxPoint hp);
+
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxResizeableControl)
+};
+
+// ----------------------------------------------------------------------------
+// wxPictureControl
+// ----------------------------------------------------------------------------
+
+//! Abstract class for pictures
+/*! This would make a perfect abstract class, but the
+    definition of wxDynamicCast() doesn't allow this.
+*/
+class WXDLLEXPORT wxPictureControl : public wxResizeableControl
+{
+ public:
+    //! Ctor
+    wxPictureControl() : wxResizeableControl() {};
+    //! Ctor
+    wxPictureControl(wxWindow *AParent, int AnId,const wxPoint &pos,
+                      const wxSize &size,long style = 0,
+                      const wxString &name = wxPanelNameStr)
+      : wxResizeableControl(AParent,AnId,pos,size,style,name) {};
+    //! Return picture type string
+    virtual const char *GetPictureType() {return "NOTYPE";}
+    //! Return picture data size
+    virtual long GetPictureSize() {return 0;}
+    //! Copy picture data into pt
+    virtual long GetPictureData(char *,long) {return 0;}
+
+// Event handlers
+
+    //! Show context menu
+    void OnRightDown(wxMouseEvent &event);
+    //! Respond to system color palette change event
+    void OnPaletteChanged(wxSysColourChangedEvent &event);
+    //! Enable copy event
+    void CeEditCopy(wxUpdateUIEvent &ce)
+    {
+        ce.Enable(true);
+    }
+    //! Reponds to size event
+    void OnSize(wxSizeEvent &event);
+
+ protected:
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxPictureControl)
+};
+
+
+#if defined(__WXMSW__) && wxUSE_METAFILE && wxUSE_ENH_METAFILE
+// ----------------------------------------------------------------------------
+// wxMetafileControl
+// ----------------------------------------------------------------------------
+
+//! Class for EnhMetaFile pictures
+class WXDLLEXPORT wxMetafileControl : public wxPictureControl
+{
+ public:
+    //! Ctor
+    wxMetafileControl() : wxPictureControl() {};
+    //! Ctor
+    wxMetafileControl(wxWindow *AParent, int AnId,WXHANDLE Meta,
+                      const wxPoint &pos,
+                      const wxSize &size,long style = 0,
+                      const wxString &name = wxPanelNameStr);
+    //! Ctor with raw picture data
+    wxMetafileControl(wxWindow *AParent, int AnId,char *Data,int Size,
+                      const wxPoint &pos,const wxSize &size,long style = 0,
+                      const wxString &name = wxPanelNameStr);
+    //! Dtor
+    virtual ~wxMetafileControl();
+    //! Return picture type name
+    const char *GetPictureType()
+    {
+        return "EnhMetaFile";
+    }
+    //! Returns picture data size
+    long GetPictureSize();
+    //! Copy picture data into data
+    long GetPictureData(char *data,long n);
+    //! Paint function for printing
+    void Paint(wxDC &dc,bool Printing,wxSize &size);
+    //! Returns with/height ratio
+    float GetRatio();
+
+// Event handlers
+
+    //! Responds to copy event
+    void OnEditCopy(wxCommandEvent &event);
+    //! Responds to paint event
+    void OnPaint(wxPaintEvent &event);
+
+ protected:
+    //! Displayed metafile
+    wxEnhMetaFile m_metafile;
+
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxMetafileControl)
+};
+
+#endif
+
+// ----------------------------------------------------------------------------
+// wxBitmapControl
+// ----------------------------------------------------------------------------
+
+//! Class for Bitmaps
+class WXDLLEXPORT wxBitmapControl : public wxPictureControl
+{
+ public:
+    //! Ctor
+    wxBitmapControl() : wxPictureControl(),m_bitmap(0) {};
+    //! Ctor
+    wxBitmapControl(wxWindow *AParent, int AnId,wxBitmap Data,const wxPoint &pos,
+                    const wxSize &size,long style = 0,
+                    const wxString &name = wxPanelNameStr);
+#ifdef __WXMSW__
+    //! Ctor with raw picture data in DIB format
+    wxBitmapControl(wxWindow *AParent, int AnId,char *Data,int Size,
+                    const wxPoint &pos,const wxSize &size,long style = 0,
+                    const wxString &name = wxPanelNameStr);
+#endif
+    //! Dtor
+    virtual ~wxBitmapControl();
+#ifdef __WXMSW__
+    //! Return picture type name
+    const char *GetPictureType()
+    {
+        return "Dib";
+    }
+    //! Returns picture data size
+    long GetPictureSize();
+    //! Copy picture data into data
+    long GetPictureData(char *data,long n);
+#endif
+    //! Paint function for printing
+    void Paint(wxDC &dc,bool Printing,wxSize &size);
+    //! Returns width/height ratio
+    float GetRatio();
+
+// Event handlers
+
+    //! Responds to paint event
+    void OnPaint(wxPaintEvent &event);
+    //! Responds to copy event
+    void OnEditCopy(wxCommandEvent &event);
+
+ protected:
+    wxBitmap *m_bitmap;
+
+    DECLARE_EVENT_TABLE()
+    DECLARE_DYNAMIC_CLASS(wxBitmapControl)
+};
+
+//! Events from child windows
+/*! These events notify the parent window of changes, so that it can
+    update itself accordingly (recalculate Scrollbars, set document modified
+    flag and so on).
+*/
+BEGIN_DECLARE_EVENT_TYPES()
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHILD_MOVED, 520)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHILD_CLOSED, 521)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHILD_RESIZED, 522)
+    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHILD_CREATED, 523)
+END_DECLARE_EVENT_TYPES()
+
+#define EVT_CHILD_MOVED(id, fn) \
+    DECLARE_EVENT_TABLE_ENTRY( \
+        wxEVT_COMMAND_CHILD_MOVED, id, -1, \
+        (wxObjectEventFunction)(wxEventFunction)(wxCommandEventFunction) \
+        & fn, \
+        (wxObject *) NULL \
+    ),
+
+#define EVT_CHILD_CLOSED(id, fn) \
+    DECLARE_EVENT_TABLE_ENTRY( \
+        wxEVT_COMMAND_CHILD_CLOSED, id, -1, \
+        (wxObjectEventFunction)(wxEventFunction)(wxCommandEventFunction) \
+        & fn, \
+        (wxObject *) NULL \
+    ),
+
+#define EVT_CHILD_RESIZED(id, fn) \
+    DECLARE_EVENT_TABLE_ENTRY( \
+        wxEVT_COMMAND_CHILD_RESIZED, id, -1, \
+        (wxObjectEventFunction)(wxEventFunction)(wxCommandEventFunction) \
+        & fn, \
+        (wxObject *) NULL \
+    ),
+
+#define EVT_CHILD_CREATED(id, fn) \
+    DECLARE_EVENT_TABLE_ENTRY( \
+        wxEVT_COMMAND_CHILD_CREATED, id, -1, \
+        (wxObjectEventFunction)(wxEventFunction)(wxCommandEventFunction) \
+        & fn, \
+        (wxObject *) NULL \
+    ),
+
+//! Parent window class for wxResizableControl child windows.
+/*! This is a demo implementation that shows the typical operations
+    that are necessary to support wxResizableControl child windows.
+*/
+class WXDLLEXPORT wxResizeableControlCanvas : public wxScrolledWindow
+{
+  public:
+    //! Ctor
+    wxResizeableControlCanvas() : wxScrolledWindow() {}
+    //! Ctor
+    wxResizeableControlCanvas(wxWindow *AParent, int AnId,
+                              const wxPoint &pos = wxDefaultPosition,
+                              const wxSize &size = wxDefaultSize,long style = 0,
+                              const wxString &name = wxPanelNameStr)
+      : wxScrolledWindow(AParent,AnId,pos,size,style,name) {}
+    //! Recalculate the Scrollbars
+    void UpdateScrollRange();
+    //! Respond to child window notification
+    void OnChildWindowChange(wxCommandEvent &) {UpdateScrollRange();}
+
+    DECLARE_EVENT_TABLE()
+};
+
+#endif // __RESIZECONTROL__
+

 	  	 

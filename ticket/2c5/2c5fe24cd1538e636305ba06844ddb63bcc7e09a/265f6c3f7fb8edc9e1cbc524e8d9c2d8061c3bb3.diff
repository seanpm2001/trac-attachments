--- C:\wxWidgets\bugs\string_org.cpp	Mo Sep 15 11:09:56 2008
+++ C:\wxWidgets\bugs\string.cpp	Mi Okt 22 11:39:31 2008
@@ -746,20 +746,53 @@
 wxStringBase& wxStringBase::replace(size_t nStart, size_t nLen,
                                     size_t nCount, wxChar ch)
 {
-  return replace(nStart, nLen, wxStringBase(nCount, ch).c_str());
+	if( nLen == nCount )
+	{
+		wxASSERT_MSG( nStart + nLen <= length(),
+						_T("index out of bounds in wxStringBase::replace") );
+
+		wxTmemset( m_pchData + nStart, ch, nLen );
+		return *this;
+	}
+	else
+	{
+		return replace(nStart, nLen, wxStringBase(nCount, ch).c_str());
+	}
 }
 
 wxStringBase& wxStringBase::replace(size_t nStart, size_t nLen,
                                     const wxStringBase& str,
                                     size_t nStart2, size_t nLen2)
 {
-  return replace(nStart, nLen, str.substr(nStart2, nLen2));
+	if( (nLen == nLen2) && (nLen != npos) )
+	{
+		wxASSERT_MSG( nStart + nLen <= length(),
+						_T("index out of bounds in wxStringBase::replace") );
+
+		wxTmemcpy( m_pchData + nStart, str.c_str() + nStart2, nLen );
+		return *this;
+	}
+	else
+	{
+		return replace(nStart, nLen, str.substr(nStart2, nLen2));
+	}
 }
 
 wxStringBase& wxStringBase::replace(size_t nStart, size_t nLen,
                                     const wxChar* sz, size_t nCount)
 {
-  return replace(nStart, nLen, wxStringBase(sz, nCount).c_str());
+	if( nLen == nCount )
+	{
+		wxASSERT_MSG( nStart + nLen <= length(),
+						_T("index out of bounds in wxStringBase::replace") );
+
+		wxTmemcpy( m_pchData + nStart, sz, nLen );
+		return *this;
+	}
+	else
+	{
+		return replace(nStart, nLen, wxStringBase(sz, nCount).c_str());
+	}
 }
 
 wxStringBase wxStringBase::substr(size_t nStart, size_t nLen) const
@@ -1549,6 +1582,89 @@
     return uiCount;
 }
 
+// replace first (or all) occurences of some substring with another one
+//size_t
+//wxString::Replace(const wxChar *szOld, const wxChar *szNew, bool bReplaceAll)
+//{
+//    // if we tried to replace an empty string we'd enter an infinite loop below
+//    wxCHECK_MSG( szOld && *szOld && szNew, 0,
+//                 _T("wxString::Replace(): invalid parameter") );
+//
+//    size_t uiCount = 0;   // count of replacements made
+//
+//    const size_t uiOldLen = wxStrlen(szOld);
+//    const size_t uiNewLen = wxStrlen(szNew);
+//
+//    // optimize the special common case of replacing same size of characters
+//    if ( uiOldLen == uiNewLen )
+//    {
+//		if( uiOldLen == 1 )			// single character
+//		{
+//			// this loop is the simplified version of the one below
+//			for ( size_t pos = 0; ; )
+//			{
+//				pos = find(*szOld, pos);
+//				if ( pos == npos )
+//					break;
+//
+//				(*this)[pos++] = *szNew;
+//
+//				uiCount++;
+//
+//				if ( !bReplaceAll )
+//					break;
+//			}
+//		}
+//		else
+//		{
+//			// this loop is the simplified version of the one below
+//			for ( size_t pos = 0; ; )
+//			{
+//				pos = find(szOld, pos);
+//				if ( pos == npos )
+//					break;
+//
+//	            // replace this occurrence of the old string with the new one
+//				wxTmemcpy( m_pchData + pos, szNew, uiNewLen );
+//
+//		        // move past the string that was replaced
+//				//pos += uiNewLen;
+//
+//			    // increase replace count
+//				uiCount++;
+//
+//				// stop now?
+//				if ( !bReplaceAll )
+//					break;
+//			}
+//		}
+//    }
+//    else // general case
+//    {
+//        for ( size_t pos = 0; ; )
+//        {
+//            pos = find(szOld, pos);
+//            if ( pos == npos )
+//                break;
+//
+//            // replace this occurrence of the old string with the new one
+//            replace(pos, uiOldLen, szNew, uiNewLen);
+//
+//            // move past the string that was replaced
+//            pos += uiNewLen;
+//
+//            // increase replace count
+//            uiCount++;
+//
+//            // stop now?
+//            if ( !bReplaceAll )
+//                break;
+//        }
+//    }
+//
+//    return uiCount;
+//}
+
 bool wxString::IsAscii() const
 {
   const wxChar *s = (const wxChar*) *this;

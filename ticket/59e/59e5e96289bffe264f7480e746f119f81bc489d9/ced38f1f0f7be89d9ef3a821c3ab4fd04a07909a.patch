Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 69648)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -1324,12 +1324,13 @@
 
 #if wxUSE_FILEDLG
 
+const int btn_id = wxNewId();
+
 // panel with custom controls for file dialog
 class MyExtraPanel : public wxPanel
 {
 public:
     MyExtraPanel(wxWindow *parent);
-    void OnCheckBox(wxCommandEvent& event) { m_btn->Enable(event.IsChecked()); }
     wxString GetInfo() const
     {
         return wxString::Format("checkbox value = %d", (int) m_cb->GetValue());
@@ -1337,16 +1338,20 @@
 private:
     wxButton *m_btn;
     wxCheckBox *m_cb;
+
+    void OnUpdateButton(wxUpdateUIEvent&);
+    DECLARE_EVENT_TABLE()
 };
 
+BEGIN_EVENT_TABLE(MyExtraPanel, wxPanel)
+    EVT_UPDATE_UI(btn_id, MyExtraPanel::OnUpdateButton)
+END_EVENT_TABLE()
+
 MyExtraPanel::MyExtraPanel(wxWindow *parent)
             : wxPanel(parent)
 {
-    m_btn = new wxButton(this, -1, wxT("Custom Button"));
-    m_btn->Enable(false);
-    m_cb = new wxCheckBox(this, -1, wxT("Enable Custom Button"));
-    m_cb->Connect(wxID_ANY, wxEVT_COMMAND_CHECKBOX_CLICKED,
-                  wxCommandEventHandler(MyExtraPanel::OnCheckBox), NULL, this);
+    m_btn = new wxButton(this, btn_id, wxT("Custom Button"));
+    m_cb = new wxCheckBox(this, wxID_ANY, wxT("Enable Custom Button"));
     wxBoxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
     sizerTop->Add(m_cb, wxSizerFlags().Centre().Border());
     sizerTop->AddStretchSpacer();
@@ -1354,6 +1359,11 @@
     SetSizerAndFit(sizerTop);
 }
 
+void MyExtraPanel::OnUpdateButton(wxUpdateUIEvent& event)
+{
+    event.Enable(m_cb->GetValue());
+}
+
 // a static method can be used instead of a function with most of compilers
 static wxWindow* createMyExtraPanel(wxWindow *parent)
 {

--- toolbar_orig.cpp	2018-02-19 22:52:40.000000000 -0500
+++ toolbar.cpp	2018-03-03 20:38:31.000000000 -0500
@@ -4,6 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     04/01/98
+// RCS-ID:      $Id$
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -36,12 +37,16 @@
 
 // define this to use XPMs everywhere (by default, BMPs are used under Win)
 // BMPs use less space, but aren't compiled into the executable on other platforms
-#if defined(__WINDOWS__) && wxUSE_WXDIB
+#ifdef __WXMSW__
     #define USE_XPM_BITMAPS 0
 #else
     #define USE_XPM_BITMAPS 1
 #endif
 
+#if USE_XPM_BITMAPS && defined(__WXMSW__) && !wxUSE_XPM_IN_MSW
+    #error You need to enable XPM support to use XPM bitmaps with toolbar!
+#endif // USE_XPM_BITMAPS
+
 // If this is 1, the sample will test an extra toolbar identical to the
 // main one, but not managed by the frame. This can test subtle differences
 // in the way toolbars are handled, especially on Mac where there is one
@@ -55,7 +60,7 @@
 // resources
 // ----------------------------------------------------------------------------
 
-#ifndef wxHAS_IMAGES_IN_RESOURCES
+#if !defined(__WXMSW__) && !defined(__WXPM__)
     #include "../sample.xpm"
 #endif
 
@@ -78,6 +83,105 @@
     TOOLBAR_BOTTOM
 };
 
+#include <wx/odcombo.h>
+
+class wxPenStyleComboBox : public wxOwnerDrawnComboBox
+{
+public:
+    virtual void OnDrawItem( wxDC& dc,
+                             const wxRect& rect,
+                             int item,
+                             int flags ) const
+    {
+        if ( item == wxNOT_FOUND )
+            return;
+
+        wxRect r(rect);
+        r.Deflate(3);
+        r.height -= 2;
+
+        int penStyle = wxSOLID;
+        if ( item == 1 )
+            penStyle = wxTRANSPARENT;
+        else if ( item == 2 )
+            penStyle = wxDOT;
+        else if ( item == 3 )
+            penStyle = wxLONG_DASH;
+        else if ( item == 4 )
+            penStyle = wxSHORT_DASH;
+        else if ( item == 5 )
+            penStyle = wxDOT_DASH;
+        else if ( item == 6 )
+            penStyle = wxBDIAGONAL_HATCH;
+        else if ( item == 7 )
+            penStyle = wxCROSSDIAG_HATCH;
+        else if ( item == 8 )
+            penStyle = wxFDIAGONAL_HATCH;
+        else if ( item == 9 )
+            penStyle = wxCROSS_HATCH;
+        else if ( item == 10 )
+            penStyle = wxHORIZONTAL_HATCH;
+        else if ( item == 11 )
+            penStyle = wxVERTICAL_HATCH;
+
+        wxPen pen( dc.GetTextForeground(), 3, penStyle );
+
+        // Get text colour as pen colour
+        dc.SetPen( pen );
+
+        if ( !(flags & wxODCB_PAINTING_CONTROL) )
+        {
+            dc.DrawText(GetString( item ),
+                        r.x + 3,
+                        (r.y + 0) + ( (r.height/2) - dc.GetCharHeight() )/2
+                       );
+
+            dc.DrawLine( r.x+5, r.y+((r.height/4)*3), r.x+r.width - 5, r.y+((r.height/4)*3) );
+        }
+        else
+        {
+            dc.DrawLine( r.x+5, r.y+r.height/2, r.x+r.width - 5, r.y+r.height/2 );
+        }
+    }
+
+    virtual void OnDrawBackground( wxDC& dc, const wxRect& rect,
+                                   int item, int flags ) const
+    {
+
+        // If item is selected or even, or we are painting the
+        // combo control itself, use the default rendering.
+        if ( (flags & (wxODCB_PAINTING_CONTROL|wxODCB_PAINTING_SELECTED)) ||
+             (item & 1) == 0 )
+        {
+            wxOwnerDrawnComboBox::OnDrawBackground(dc,rect,item,flags);
+            return;
+        }
+
+        // Otherwise, draw every other background with different colour.
+        wxColour bgCol(240,240,250);
+        dc.SetBrush(wxBrush(bgCol));
+        dc.SetPen(wxPen(bgCol));
+        dc.DrawRectangle(rect);
+    }
+
+    virtual wxCoord OnMeasureItem( size_t item ) const
+    {
+        // Simply demonstrate the ability to have variable-height items
+        if ( item & 1 )
+            return 36;
+        else
+            return 24;
+    }
+
+    virtual wxCoord OnMeasureItemWidth( size_t WXUNUSED(item) ) const
+    {
+        return -1; // default - will be measured from text width
+    }
+
+};
+
+
+
 // ----------------------------------------------------------------------------
 // classes
 // ----------------------------------------------------------------------------
@@ -86,7 +190,7 @@
 class MyApp : public wxApp
 {
 public:
-    bool OnInit() wxOVERRIDE;
+    bool OnInit();
 };
 
 // Define a new frame
@@ -123,8 +227,6 @@
     void OnDeletePrint(wxCommandEvent& WXUNUSED(event)) { DoDeletePrint(); }
     void OnInsertPrint(wxCommandEvent& event);
     void OnChangeToolTip(wxCommandEvent& event);
-    void OnIncToolSpacing(wxCommandEvent& event);
-    void OnDecToolSpacing(wxCommandEvent& event);
     void OnToggleHelp(wxCommandEvent& WXUNUSED(event)) { DoToggleHelp(); }
     void OnToggleSearch(wxCommandEvent& event);
     void OnToggleRadioBtn(wxCommandEvent& event);
@@ -178,7 +280,7 @@
     // the search tool, initially NULL
     wxToolBarToolBase *m_searchTool;
 
-    wxDECLARE_EVENT_TABLE();
+    DECLARE_EVENT_TABLE()
 };
 
 // ----------------------------------------------------------------------------
@@ -211,7 +313,6 @@
     IDM_TOOLBAR_OTHER_1,
     IDM_TOOLBAR_OTHER_2,
     IDM_TOOLBAR_OTHER_3,
-    IDM_TOOLBAR_OTHER_4,
 
     // tools menu items
     IDM_TOOLBAR_ENABLEPRINT,
@@ -223,10 +324,9 @@
     IDM_TOOLBAR_TOGGLERADIOBTN2,
     IDM_TOOLBAR_TOGGLERADIOBTN3,
     IDM_TOOLBAR_CHANGE_TOOLTIP,
-    IDM_TOOLBAR_INC_TOOL_SPACING,
-    IDM_TOOLBAR_DEC_TOOL_SPACING,
 
-    ID_COMBO = 1000
+    ID_COMBO = 1000,
+    Menu_ColorComboBox
 };
 
 // ----------------------------------------------------------------------------
@@ -236,7 +336,7 @@
 // Notice that wxID_HELP will be processed for the 'About' menu and the toolbar
 // help button.
 
-wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_SIZE(MyFrame::OnSize)
 
     EVT_MENU(wxID_EXIT, MyFrame::OnQuit)
@@ -260,8 +360,6 @@
     EVT_MENU_RANGE(IDM_TOOLBAR_TOGGLERADIOBTN1, IDM_TOOLBAR_TOGGLERADIOBTN3,
                    MyFrame::OnToggleRadioBtn)
     EVT_MENU(IDM_TOOLBAR_CHANGE_TOOLTIP, MyFrame::OnChangeToolTip)
-    EVT_MENU(IDM_TOOLBAR_INC_TOOL_SPACING, MyFrame::OnIncToolSpacing)
-    EVT_MENU(IDM_TOOLBAR_DEC_TOOL_SPACING, MyFrame::OnDecToolSpacing)
 
     EVT_MENU_RANGE(IDM_TOOLBAR_SHOW_TEXT, IDM_TOOLBAR_SHOW_BOTH,
                    MyFrame::OnToolbarStyle)
@@ -285,7 +383,7 @@
                         MyFrame::OnUpdateToggleRadioBtn)
     EVT_UPDATE_UI(IDM_TOOLBAR_TOGGLE_HORIZONTAL_TEXT,
                   MyFrame::OnUpdateToggleHorzText)
-wxEND_EVENT_TABLE()
+END_EVENT_TABLE()
 
 // ============================================================================
 // implementation
@@ -295,7 +393,7 @@
 // MyApp
 // ----------------------------------------------------------------------------
 
-wxIMPLEMENT_APP(MyApp);
+IMPLEMENT_APP(MyApp)
 
 // The `main program' equivalent, creating the windows and returning the
 // main frame
@@ -307,7 +405,7 @@
     // Create the main frame window
     MyFrame* frame = new MyFrame((wxFrame *) NULL, wxID_ANY,
                                  wxT("wxToolBar Sample"),
-                                  wxPoint(100, 100), wxSize(650, 350));
+                                  wxPoint(100, 100), wxSize(650, 300));
 
     frame->Show(true);
 
@@ -322,6 +420,12 @@
 
 void MyFrame::RecreateToolbar()
 {
+#ifdef __WXWINCE__
+    // On Windows CE, we should not delete the
+    // previous toolbar in case it contains the menubar.
+    // We'll try to accommodate this usage in due course.
+    wxToolBar* toolBar = CreateToolBar();
+#else
     // delete and recreate the toolbar
     wxToolBarBase *toolBar = GetToolBar();
     long style = toolBar ? toolBar->GetWindowStyle() : TOOLBAR_STYLE;
@@ -363,6 +467,7 @@
         style |= wxTB_HORZ_LAYOUT;
 
     toolBar = CreateToolBar(style, ID_TOOLBAR);
+#endif
 
     PopulateToolbar(toolBar);
 }
@@ -447,6 +552,32 @@
         combo->Append(wxT("in a"));
         combo->Append(wxT("toolbar"));
         toolBar->AddControl(combo, wxT("Combo Label"));
+        
+	
+	// Create common strings array
+	 wxArrayString   m_arrItems;
+
+    m_arrItems.Add( wxT("Solid") );
+    m_arrItems.Add( wxT("Transparent") );
+    m_arrItems.Add( wxT("Dot") );
+    m_arrItems.Add( wxT("Long Dash") );
+    m_arrItems.Add( wxT("Short Dash") );
+    m_arrItems.Add( wxT("Dot Dash") );
+    m_arrItems.Add( wxT("Backward Diagonal Hatch") );
+    m_arrItems.Add( wxT("Cross-diagonal Hatch") );
+    m_arrItems.Add( wxT("Forward Diagonal Hatch") );
+    m_arrItems.Add( wxT("Cross Hatch") );
+    m_arrItems.Add( wxT("Horizontal Hatch") );
+    m_arrItems.Add( wxT("Vertical Hatch") );
+
+	wxPenStyleComboBox *odc = new wxPenStyleComboBox();
+	odc->Create(toolBar,wxID_ANY,wxEmptyString,
+                wxDefaultPosition, wxDefaultSize,
+                m_arrItems,
+                wxCB_READONLY //wxNO_BORDER | wxCB_READONLY
+               );
+        toolBar->AddControl(odc, _("Pen style"));
+
     }
 #endif // USE_CONTROLS_IN_TOOLBAR
 
@@ -480,8 +611,6 @@
                          wxT("Delete this tool. This is a very long tooltip to test whether it does the right thing when the tooltip is more than Windows can cope with."));
     }
 
-    m_nPrint = 1;
-
     // add a stretchable space before the "Help" button to make it
     // right-aligned
     toolBar->AddStretchableSpace();
@@ -505,8 +634,7 @@
     // the changes
     toolBar->Realize();
 
-    toolBar->SetRows(toolBar->IsVertical() ? toolBar->GetToolsCount() / m_rows
-                                           : m_rows);
+    toolBar->SetRows(!(toolBar->IsVertical()) ? m_rows : 10 / m_rows);
 }
 
 // ----------------------------------------------------------------------------
@@ -531,7 +659,7 @@
     m_searchTool = NULL;
 
     m_rows = 1;
-    m_nPrint = 0; // set to 1 in PopulateToolbar()
+    m_nPrint = 1;
 
 #if wxUSE_STATUSBAR
     // Give it a status line
@@ -606,9 +734,6 @@
     toolMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN3, wxT("Toggle &3rd radio button\tCtrl-3"));
     toolMenu->AppendSeparator();
     toolMenu->Append(IDM_TOOLBAR_CHANGE_TOOLTIP, wxT("Change tooltip of \"New\""));
-    toolMenu->AppendSeparator();
-    toolMenu->Append(IDM_TOOLBAR_INC_TOOL_SPACING, wxT("Increase spacing\tCtrl-+"));
-    toolMenu->Append(IDM_TOOLBAR_DEC_TOOL_SPACING, wxT("Decrease spacing\tCtrl--"));
 
     wxMenu *fileMenu = new wxMenu;
     fileMenu->Append(wxID_EXIT, wxT("E&xit\tAlt-X"), wxT("Quit toolbar sample") );
@@ -642,8 +767,7 @@
     PopulateToolbar(m_extraToolBar);
 #endif
 
-    // Use a read-only text control; Cut tool will not cut selected text anyway.
-    m_textWindow = new wxTextCtrl(m_panel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
+    m_textWindow = new wxTextCtrl(m_panel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
 
     wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
     m_panel->SetSizer(sizer);
@@ -745,8 +869,6 @@
         m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_3, wxT("Third"), wxBITMAP(save));
         m_tbar->AddSeparator();
         m_tbar->AddTool(wxID_HELP, wxT("Help"), wxBITMAP(help));
-        m_tbar->AddTool(IDM_TOOLBAR_OTHER_4, wxT("Disabled"), wxBITMAP(cut), wxBITMAP(paste));
-        m_tbar->EnableTool(IDM_TOOLBAR_OTHER_4, false);
 
         m_tbar->Realize();
     }
@@ -766,9 +888,7 @@
     // m_rows may be only 1 or 2
     m_rows = 3 - m_rows;
 
-    wxToolBar* const toolBar = GetToolBar();
-    toolBar->SetRows(toolBar->IsVertical() ? toolBar->GetToolsCount() / m_rows
-                                           : m_rows);
+    GetToolBar()->SetRows(!(GetToolBar()->IsVertical()) ? m_rows : 10 / m_rows);
 
     //RecreateToolbar(); -- this is unneeded
 }
@@ -815,9 +935,9 @@
 void MyFrame::OnAbout(wxCommandEvent& event)
 {
     if ( event.IsChecked() )
-        m_textWindow->AppendText( wxT("Help button down now.\n") );
+        m_textWindow->WriteText( wxT("Help button down now.\n") );
     else
-        m_textWindow->AppendText( wxT("Help button up now.\n") );
+        m_textWindow->WriteText( wxT("Help button up now.\n") );
 
     (void)wxMessageBox(wxT("wxWidgets toolbar sample"), wxT("About wxToolBar"));
 }
@@ -825,8 +945,14 @@
 void MyFrame::OnToolLeftClick(wxCommandEvent& event)
 {
     wxString str;
+    wxToolBar* tbar = GetToolBar(); 
+    wxPoint tbPos = tbar->GetPosition(); 
+    //wxPoint cbPos = m_cbox->GetPosition(); 
+    str.Printf( _T("Toolbar at %i,%i\n"), tbPos.x, tbPos.y ); 
+    m_textWindow->WriteText( str ); 
+   // str.Printf( _T("ComboBox at %i,%i\n"), cbPos.x, cbPos.y ); 
     str.Printf( wxT("Clicked on tool %d\n"), event.GetId());
-    m_textWindow->AppendText( str );
+    m_textWindow->WriteText( str );
 
     if (event.GetId() == wxID_COPY)
     {
@@ -863,7 +989,6 @@
 
     wxToolBarBase *tb = GetToolBar();
     tb->EnableTool(wxID_PRINT, !tb->GetToolEnabled(wxID_PRINT));
-    m_textWindow->AppendText("Print tool state changed.\n");
 }
 
 void MyFrame::DoDeletePrint()
@@ -873,7 +998,6 @@
 
     wxToolBarBase *tb = GetToolBar();
     tb->DeleteTool( wxID_PRINT );
-    m_textWindow->AppendText("Print tool was deleted.\n");
 
     m_nPrint--;
 }
@@ -882,7 +1006,6 @@
 {
     wxToolBarBase *tb = GetToolBar();
     tb->ToggleTool( wxID_HELP, !tb->GetToolState( wxID_HELP ) );
-    m_textWindow->AppendText("Help tool was toggled.\n");
 }
 
 void MyFrame::OnToggleSearch(wxCommandEvent& WXUNUSED(event))
@@ -931,27 +1054,15 @@
     GetToolBar()->SetToolShortHelp(wxID_NEW, wxT("New toolbar button"));
 }
 
-void MyFrame::OnIncToolSpacing(wxCommandEvent& WXUNUSED(event))
-{
-    wxToolBar *tb = GetToolBar();
-    tb->SetToolPacking(tb->GetToolPacking()+1);
-}
-
-void MyFrame::OnDecToolSpacing(wxCommandEvent& WXUNUSED(event))
-{
-    wxToolBar *tb = GetToolBar();
-    tb->SetToolPacking(tb->GetToolPacking()-1);
-}
-
 void MyFrame::OnToolbarStyle(wxCommandEvent& event)
 {
     long style = GetToolBar()->GetWindowStyle();
-    style &= ~(wxTB_NOICONS | wxTB_HORZ_TEXT);
+    style &= ~(wxTB_NOICONS | wxTB_TEXT);
 
     switch ( event.GetId() )
     {
         case IDM_TOOLBAR_SHOW_TEXT:
-            style |= wxTB_NOICONS | (m_horzText ? wxTB_HORZ_TEXT : wxTB_TEXT);
+            style |= wxTB_NOICONS | wxTB_TEXT;
             break;
 
         case IDM_TOOLBAR_SHOW_ICONS:
@@ -959,7 +1070,7 @@
             break;
 
         case IDM_TOOLBAR_SHOW_BOTH:
-            style |= (m_horzText ? wxTB_HORZ_TEXT : wxTB_TEXT);
+            style |= wxTB_TEXT;
     }
 
     GetToolBar()->SetWindowStyle(style);
@@ -1015,7 +1126,7 @@
 {
     wxString str;
     str.Printf( wxT("Dropdown on tool %d\n"), event.GetId());
-    m_textWindow->AppendText( str );
+    m_textWindow->WriteText( str );
 
     event.Skip();
 }

diff --git a/include/wx/aui/auibar.h b/include/wx/aui/auibar.h
index 3e04399..43023af 100644
--- a/include/wx/aui/auibar.h
+++ b/include/wx/aui/auibar.h
@@ -211,7 +211,14 @@ public:
     void SetActive(bool b) { m_active = b; }
     bool IsActive() const { return m_active; }
 
-    void SetHasDropDown(bool b) { m_dropDown = b; }
+    void SetHasDropDown(bool b)
+    {
+        if (m_kind != wxITEM_NORMAL)
+            return;
+
+        m_dropDown = b;
+    }
+
     bool HasDropDown() const { return m_dropDown; }
 
     void SetSticky(bool b) { m_sticky = b; }
diff --git a/interface/wx/aui/auibar.h b/interface/wx/aui/auibar.h
index e02e3cd..1ff8262 100644
--- a/interface/wx/aui/auibar.h
+++ b/interface/wx/aui/auibar.h
@@ -339,16 +339,15 @@ public:
 
     */
     bool IsActive() const;
-
     /**
-
+        Sets or unsets a dropdown button associated with the toolbar item.
+        This is only valid for wxITEM_NORMAL tools.
     */
     void SetHasDropDown(bool b);
     /**
-
+        Returns whether the toolbar item has an associated dropdown button.
     */
     bool HasDropDown() const;
-
     /**
 
     */
@@ -703,8 +702,16 @@ public:
 
     void EnableTool(int tool_id, bool state);
     bool GetToolEnabled(int tool_id) const;
-
+    /**
+        Sets or unsets a dropdown button associated with the specified toolbar item.
+        This is only valid for wxITEM_NORMAL tools.
+        @see wxAuiToolBarItem::SetHasDropDown()
+    */
     void SetToolDropDown(int tool_id, bool dropdown);
+    /**
+        Returns whether the specified toolbar item has an associated dropdown button.
+        @see wxAuiToolBarItem::HasDropDown()
+    */
     bool GetToolDropDown(int tool_id) const;
 
     void SetToolBorderPadding(int padding);
diff --git a/src/aui/auibar.cpp b/src/aui/auibar.cpp
index 564279c..65c0cdd 100644
--- a/src/aui/auibar.cpp
+++ b/src/aui/auibar.cpp
@@ -1254,23 +1254,22 @@ int wxAuiToolBar::GetToolSeparation() const
         return 5;
 }
 
-
 void wxAuiToolBar::SetToolDropDown(int tool_id, bool dropdown)
 {
     wxAuiToolBarItem* item = FindTool(tool_id);
     if (!item)
         return;
 
-    item->m_dropDown = dropdown;
+    item->SetHasDropDown(dropdown);
 }
 
 bool wxAuiToolBar::GetToolDropDown(int tool_id) const
 {
     wxAuiToolBarItem* item = FindTool(tool_id);
     if (!item)
-        return 0;
+        return false;
 
-    return item->m_dropDown;
+    return item->HasDropDown();
 }
 
 void wxAuiToolBar::SetToolSticky(int tool_id, bool sticky)
@@ -2404,48 +2403,52 @@ void wxAuiToolBar::OnPaint(wxPaintEvent& WXUNUSED(evt))
 
         wxRect item_rect = item.m_sizerItem->GetRect();
 
-
         if ((horizontal  && item_rect.x + item_rect.width >= last_extent) ||
             (!horizontal && item_rect.y + item_rect.height >= last_extent))
         {
             break;
         }
 
-        if (item.m_kind == wxITEM_SEPARATOR)
-        {
-            // draw a separator
-            m_art->DrawSeparator(dc, this, item_rect);
-        }
-        else if (item.m_kind == wxITEM_LABEL)
-        {
-            // draw a text label only
-            m_art->DrawLabel(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_NORMAL)
+        switch (item.m_kind)
         {
-            // draw a regular button or dropdown button
-            if (!item.m_dropDown)
-                m_art->DrawButton(dc, this, item, item_rect);
-            else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_CHECK)
+        case wxITEM_NORMAL:
         {
-            // draw either a regular or dropdown toggle button
+            // draw a regular or dropdown button
             if (!item.m_dropDown)
                 m_art->DrawButton(dc, this, item, item_rect);
             else
                 m_art->DrawDropDownButton(dc, this, item, item_rect);
+            break;
         }
-        else if (item.m_kind == wxITEM_RADIO)
+        case wxITEM_CHECK:
+        case wxITEM_RADIO:
         {
             // draw a toggle button
             m_art->DrawButton(dc, this, item, item_rect);
+            break;
+        }
+        case wxITEM_SEPARATOR:
+        {
+            // draw a separator
+            m_art->DrawSeparator(dc, this, item_rect);
+            break;
+        }
+        case wxITEM_LABEL:
+        {
+            // draw a text label only
+            m_art->DrawLabel(dc, this, item, item_rect);
+            break;
         }
-        else if (item.m_kind == wxITEM_CONTROL)
+        case wxITEM_CONTROL:
         {
             // draw the control's label
             m_art->DrawControlLabel(dc, this, item, item_rect);
+            break;
+        }
+        default:
+        {
+            break;
+        }
         }
 
         // fire a signal to see if the item wants to be custom-rendered
@@ -2793,7 +2796,7 @@ void wxAuiToolBar::OnMotion(wxMouseEvent& evt)
     const bool button_pressed = HasCapture();
 
     // start a drag event
-    if (!m_dragging && button_pressed &&
+    if (m_actionItem && !m_dragging && button_pressed &&
         abs(evt.GetX() - m_actionPos.x) + abs(evt.GetY() - m_actionPos.y) > 5)
     {
         // TODO: sending this event only makes sense if there is an 'END_DRAG'

diff --git a/include/wx/aui/auibar.h b/include/wx/aui/auibar.h
index 3e04399..bb7ffbd 100644
--- a/include/wx/aui/auibar.h
+++ b/include/wx/aui/auibar.h
@@ -125,7 +125,6 @@ public:
         m_state = 0;  // normal, enabled
         m_proportion = 0;
         m_active = true;
-        m_dropDown = true;
         m_sticky = true;
         m_userData = 0;
         m_alignment = wxALIGN_CENTER;
@@ -159,7 +158,6 @@ public:
         m_state = c.m_state;
         m_proportion = c.m_proportion;
         m_active = c.m_active;
-        m_dropDown = c.m_dropDown;
         m_sticky = c.m_sticky;
         m_userData = c.m_userData;
         m_alignment = c.m_alignment;
@@ -211,8 +209,8 @@ public:
     void SetActive(bool b) { m_active = b; }
     bool IsActive() const { return m_active; }
 
-    void SetHasDropDown(bool b) { m_dropDown = b; }
-    bool HasDropDown() const { return m_dropDown; }
+    void SetHasDropDown(bool WXUNUSED(b)) {}
+    bool HasDropDown() const { return (m_kind == wxITEM_DROPDOWN); }
 
     void SetSticky(bool b) { m_sticky = b; }
     bool IsSticky() const { return m_sticky; }
@@ -240,7 +238,6 @@ private:
     int m_state;                 // state
     int m_proportion;            // proportion
     bool m_active;               // true if the item is currently active
-    bool m_dropDown;             // true if the item has a dropdown button
     bool m_sticky;               // overrides button states if true (always active)
     long m_userData;            // user-specified data
     int m_alignment;             // sizer alignment flag, defaults to wxCENTER, may be wxEXPAND or any other
diff --git a/samples/aui/auidemo.cpp b/samples/aui/auidemo.cpp
index 9654e9a..4926342 100644
--- a/samples/aui/auidemo.cpp
+++ b/samples/aui/auidemo.cpp
@@ -842,7 +842,8 @@ MyFrame::MyFrame(wxWindow* parent,
                                          wxAUI_TB_HORZ_TEXT);
     tb4->SetToolBitmapSize(wxSize(16,16));
     wxBitmap tb4_bmp1 = wxArtProvider::GetBitmap(wxART_NORMAL_FILE, wxART_OTHER, wxSize(16,16));
-    tb4->AddTool(ID_DropDownToolbarItem, wxT("Item 1"), tb4_bmp1);
+    tb4->AddTool(ID_DropDownToolbarItem, wxT("Item 1"), tb4_bmp1,
+                                         wxT("Dropdown item"), wxITEM_DROPDOWN);
     tb4->AddTool(ID_SampleItem+23, wxT("Item 2"), tb4_bmp1);
     tb4->AddTool(ID_SampleItem+24, wxT("Item 3"), tb4_bmp1);
     tb4->AddTool(ID_SampleItem+25, wxT("Item 4"), tb4_bmp1);
diff --git a/src/aui/auibar.cpp b/src/aui/auibar.cpp
index 564279c..cd58acb 100644
--- a/src/aui/auibar.cpp
+++ b/src/aui/auibar.cpp
@@ -720,7 +720,11 @@ int wxAuiDefaultToolBarArt::ShowDropDown(wxWindow* wnd,
     {
         wxAuiToolBarItem& item = items.Item(i);
 
-        if (item.GetKind() == wxITEM_NORMAL)
+        // TODO: Support toggle buttons in overflow menu
+        // NOTE: 'items_added' check is used to avoid to add separators without
+        //       items between them, not only toggle buttons, but also controls
+        int itemKind = item.GetKind();
+        if ((itemKind == wxITEM_NORMAL) || (itemKind == wxITEM_DROPDOWN))
         {
             wxString text = item.GetShortHelp();
             if (text.empty())
@@ -729,13 +733,13 @@ int wxAuiDefaultToolBarArt::ShowDropDown(wxWindow* wnd,
             if (text.empty())
                 text = wxT(" ");
 
-            wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text, item.GetShortHelp());
-
+            wxMenuItem* m =  new wxMenuItem(&menuPopup, item.GetId(), text,
+                                            item.GetShortHelp());
             m->SetBitmap(item.GetBitmap());
             menuPopup.Append(m);
             items_added++;
         }
-        else if (item.GetKind() == wxITEM_SEPARATOR)
+        else if (itemKind == wxITEM_SEPARATOR)
         {
             if (items_added > 0)
                 menuPopup.AppendSeparator();
@@ -946,7 +950,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddTool(int tool_id,
     item.m_shortHelp = shortHelpString;
     item.m_longHelp = longHelpString;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_spacerPixels = 0;
     item.m_toolId = tool_id;
     item.m_state = 0;
@@ -981,7 +984,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddControl(wxControl* control,
     item.m_bitmap = wxNullBitmap;
     item.m_disabledBitmap = wxNullBitmap;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_spacerPixels = 0;
     item.m_toolId = control->GetId();
     item.m_state = 0;
@@ -1010,7 +1012,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddLabel(int tool_id,
     item.m_bitmap = wxNullBitmap;
     item.m_disabledBitmap = wxNullBitmap;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_spacerPixels = 0;
     item.m_toolId = tool_id;
     item.m_state = 0;
@@ -1036,7 +1037,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddSeparator()
     item.m_bitmap = wxNullBitmap;
     item.m_disabledBitmap = wxNullBitmap;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_toolId = -1;
     item.m_state = 0;
     item.m_proportion = 0;
@@ -1058,7 +1058,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddSpacer(int pixels)
     item.m_bitmap = wxNullBitmap;
     item.m_disabledBitmap = wxNullBitmap;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_spacerPixels = pixels;
     item.m_toolId = -1;
     item.m_state = 0;
@@ -1081,7 +1080,6 @@ wxAuiToolBarItem* wxAuiToolBar::AddStretchSpacer(int proportion)
     item.m_bitmap = wxNullBitmap;
     item.m_disabledBitmap = wxNullBitmap;
     item.m_active = true;
-    item.m_dropDown = false;
     item.m_spacerPixels = 0;
     item.m_toolId = -1;
     item.m_state = 0;
@@ -1255,22 +1253,17 @@ int wxAuiToolBar::GetToolSeparation() const
 }
 
 
-void wxAuiToolBar::SetToolDropDown(int tool_id, bool dropdown)
+void wxAuiToolBar::SetToolDropDown(int WXUNUSED(toolId), bool WXUNUSED(dropdown))
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
-    if (!item)
-        return;
-
-    item->m_dropDown = dropdown;
 }
 
-bool wxAuiToolBar::GetToolDropDown(int tool_id) const
+bool wxAuiToolBar::GetToolDropDown(int toolId) const
 {
-    wxAuiToolBarItem* item = FindTool(tool_id);
+    wxAuiToolBarItem* item = FindTool(toolId);
     if (!item)
-        return 0;
+        return false;
 
-    return item->m_dropDown;
+    return item->HasDropDown();
 }
 
 void wxAuiToolBar::SetToolSticky(int tool_id, bool sticky)
@@ -1898,9 +1891,10 @@ bool wxAuiToolBar::RealizeHelper(wxClientDC& dc, bool horizontal)
                 break;
             }
 
-            case wxITEM_CHECK:
             case wxITEM_NORMAL:
+            case wxITEM_CHECK:
             case wxITEM_RADIO:
+            case wxITEM_DROPDOWN:
             {
                 wxSize size = m_art->GetToolSize(dc, this, item);
                 m_sizerItem = sizer->Add(size.x + (m_toolBorderPadding*2),
@@ -1995,7 +1989,7 @@ bool wxAuiToolBar::RealizeHelper(wxClientDC& dc, bool horizontal)
             sizer->Add(1, m_rightPadding);
     }
 
-    // add drop down area
+    // add overflow area
     m_overflowSizerItem = NULL;
 
     if (m_windowStyle & wxAUI_TB_OVERFLOW)
@@ -2411,41 +2405,44 @@ void wxAuiToolBar::OnPaint(wxPaintEvent& WXUNUSED(evt))
             break;
         }
 
-        if (item.m_kind == wxITEM_SEPARATOR)
-        {
-            // draw a separator
-            m_art->DrawSeparator(dc, this, item_rect);
-        }
-        else if (item.m_kind == wxITEM_LABEL)
-        {
-            // draw a text label only
-            m_art->DrawLabel(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_NORMAL)
-        {
-            // draw a regular button or dropdown button
-            if (!item.m_dropDown)
-                m_art->DrawButton(dc, this, item, item_rect);
-            else
-                m_art->DrawDropDownButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_CHECK)
+        switch (item.m_kind)
         {
-            // draw either a regular or dropdown toggle button
-            if (!item.m_dropDown)
+            case wxITEM_NORMAL:
+            case wxITEM_CHECK:
+            case wxITEM_RADIO:
+            {
+                // draw a regular or toggle button
                 m_art->DrawButton(dc, this, item, item_rect);
-            else
+                break;
+            }
+            case wxITEM_DROPDOWN:
+            {
+                // draw a dropdown button
                 m_art->DrawDropDownButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_RADIO)
-        {
-            // draw a toggle button
-            m_art->DrawButton(dc, this, item, item_rect);
-        }
-        else if (item.m_kind == wxITEM_CONTROL)
-        {
-            // draw the control's label
-            m_art->DrawControlLabel(dc, this, item, item_rect);
+                break;
+            }
+            case wxITEM_SEPARATOR:
+            {
+                // draw a separator
+                m_art->DrawSeparator(dc, this, item_rect);
+                break;
+            }
+            case wxITEM_LABEL:
+            {
+                // draw a text label only
+                m_art->DrawLabel(dc, this, item, item_rect);
+                break;
+            }
+            case wxITEM_CONTROL:
+            {
+                // draw the control's label
+                m_art->DrawControlLabel(dc, this, item, item_rect);
+                break;
+            }
+            default:
+            {
+                break;
+            }
         }
 
         // fire a signal to see if the item wants to be custom-rendered
@@ -2567,7 +2564,7 @@ void wxAuiToolBar::OnLeftDown(wxMouseEvent& evt)
 
         int mouse_x = evt.GetX();
         wxRect rect = m_actionItem->m_sizerItem->GetRect();
-        const bool dropDownHit = m_actionItem->m_dropDown &&
+        const bool dropDownHit = m_actionItem->HasDropDown() &&
                                  mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
                                  mouse_x < (rect.x+rect.width);
         e.SetDropDownClicked(dropDownHit);
@@ -2793,7 +2790,7 @@ void wxAuiToolBar::OnMotion(wxMouseEvent& evt)
     const bool button_pressed = HasCapture();
 
     // start a drag event
-    if (!m_dragging && button_pressed &&
+    if (m_actionItem && !m_dragging && button_pressed &&
         abs(evt.GetX() - m_actionPos.x) + abs(evt.GetY() - m_actionPos.y) > 5)
     {
         // TODO: sending this event only makes sense if there is an 'END_DRAG'
@@ -2801,6 +2798,7 @@ void wxAuiToolBar::OnMotion(wxMouseEvent& evt)
         wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, GetId());
         e.SetEventObject(this);
         e.SetToolId(m_actionItem->m_toolId);
+
         m_dragging = GetEventHandler()->ProcessEvent(e) && !e.GetSkipped();
 
         DoIdleUpdate();

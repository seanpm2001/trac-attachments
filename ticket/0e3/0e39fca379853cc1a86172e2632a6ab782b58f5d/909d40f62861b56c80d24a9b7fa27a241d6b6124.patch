diff -ru2 -x*.dsp -x*.dsw -x*Debug* -x*Release* -x*.ncb -x*.plg -x*.dsp -x*.dsw -xsamples -xCVS -x*.dll -x*.ilk -x*.exp -x*.lib -x*.pdb -xlib -x*.opt -xsetup.h wxWindows.orig/include/wx/thread.h wxWindows/include/wx/thread.h
--- wxWindows.orig/include/wx/thread.h	Tue Jun 03 20:41:17 2003
+++ wxWindows/include/wx/thread.h	Wed Jun 18 22:32:37 2003
@@ -115,4 +115,5 @@
 
 // forward declarations
+class WXDLLEXPORT wxThreadHelper;
 class WXDLLEXPORT wxConditionInternal;
 class WXDLLEXPORT wxMutexInternal;
@@ -581,4 +582,77 @@
     bool m_isDetached;
 };
+
+// wxThreadHelperThread class
+// ----------------------
+
+class WXDLLEXPORT wxThreadHelperThread : public wxThread
+{
+public:
+    // constructor only creates the C++ thread object and doesn't create (or
+    // start) the real thread
+    wxThreadHelperThread(wxThreadHelper * owner)
+        : wxThread(wxTHREAD_JOINABLE), m_owner(owner)
+        { wxASSERT(m_owner); }
+
+protected:
+    // entry point for the thread - calls Entry() in owner.
+    virtual void *Entry()
+        { wxASSERT(m_owner); return CallEntry(); }
+
+    // calls Entry() in owner - avoid circular declaration, virtual inline.
+    inline void *CallEntry();
+
+private:
+    // no copy ctor/assignment operator
+    wxThreadHelperThread(const wxThreadHelperThread&);
+    wxThreadHelperThread& operator=(const wxThreadHelperThread&);
+
+    // pointer to the owner of the thread
+    wxThreadHelper * m_owner;
+};
+
+// ----------------------------------------------------------------------------
+// wxThreadHelper: this class implements the threading logic to run a
+// background task in another object (such as a window).  It is a mix-in: just
+// derive from it to implement a threading background task in your class.
+// ----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxThreadHelper
+{
+public:
+    // constructor only initializes m_thread to NULL
+    wxThreadHelper()
+        : m_thread(NULL)
+        { }
+
+    // create a new thread and optionally set the stack size on platforms that
+    // support that - call Run() to start it (special cased for watcom which
+    // won't accept 0 default)
+    wxThreadError Create(unsigned int stackSize = 0)
+        {
+            if (m_thread)
+            {
+                delete m_thread;
+            }
+
+            m_thread = new wxThreadHelperThread(this);
+
+            return m_thread->Create(stackSize);
+        }
+
+    // entry point for the thread - called by Run() and executes in the context
+    // of this thread.
+    virtual void *Entry() = 0;
+
+    // returns a pointer to the thread which can be used to call Run()
+    wxThread * GetThread()
+        { return m_thread; }
+
+protected:
+    wxThread * m_thread;
+};
+
+// call Entry() in owner, put it down here to avoid circular declarations
+inline void *wxThreadHelperThread::CallEntry() { return m_owner->Entry(); }
 
 // ----------------------------------------------------------------------------

 	  	 

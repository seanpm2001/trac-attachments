Index: samples/dialogs/dialogs.cpp
===================================================================
--- samples/dialogs/dialogs.cpp	(revision 63733)
+++ samples/dialogs/dialogs.cpp	(working copy)
@@ -748,7 +748,7 @@
                            wxCENTER |
                            wxNO_DEFAULT | wxYES_NO | wxCANCEL |
                            wxICON_INFORMATION);
-    
+
     wxString extmsg;
     if ( dialog.SetYesNoCancelLabels
         (
@@ -766,21 +766,21 @@
         "so the default \"Yes\"/\"No\"/\"Cancel\" buttons are used.";
     }
     dialog.SetExtendedMessage(extmsg);
-    
+
     switch ( dialog.ShowModal() )
     {
         case wxID_YES:
             wxLogStatus(wxT("You pressed \"Yes\""));
             break;
-            
+
         case wxID_NO:
             wxLogStatus(wxT("You pressed \"No\""));
             break;
-            
+
         case wxID_CANCEL:
             wxLogStatus(wxT("You pressed \"Cancel\""));
             break;
-            
+
         default:
             wxLogError(wxT("Unexpected wxMessageDialog return code!"));
     }
@@ -2183,67 +2183,18 @@
       wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER),
       m_buttonsSizer(NULL)
 {
-    wxBoxSizer *const sizerTop = new wxBoxSizer(wxVERTICAL);
+	wxBoxSizer *topSizer = new wxBoxSizer(wxVERTICAL);
+	wxBoxSizer *midleSizer = new wxBoxSizer(wxVERTICAL);
+    wxBoxSizer *innerSizer = new wxBoxSizer(wxHORIZONTAL);
 
-    wxBoxSizer *const sizer = new wxBoxSizer(wxHORIZONTAL);
-    wxBoxSizer *const sizerInside1 = new wxBoxSizer(wxVERTICAL);
+    innerSizer->Add(-1, 11, 0, wxEXPAND|wxALIGN_LEFT|wxALIGN_TOP);
 
-    m_chkboxAffirmativeButton = new wxCheckBox(this, wxID_ANY, _("Enable Affirmative Button"));
+	midleSizer->Add(innerSizer, 0, wxEXPAND|wxALIGN_CENTER);
 
-    wxStaticBoxSizer *const sizer1 = new wxStaticBoxSizer(wxVERTICAL, this, wxT("Affirmative Button"));
+	topSizer->Add(midleSizer, 1, wxALL|wxEXPAND|wxALIGN_CENTER, 11);
 
-    m_radiobtnOk = new wxRadioButton(this, wxID_ANY, _("Ok"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
-    m_radiobtnYes = new wxRadioButton(this, wxID_ANY, _("Yes"));
-
-    wxBoxSizer *const sizerInside2 = new wxBoxSizer(wxVERTICAL);
-
-    m_chkboxDismissButton = new wxCheckBox(this, wxID_ANY, _("Enable Dismiss Button"));
-
-    wxStaticBoxSizer *const sizer2 = new wxStaticBoxSizer(wxVERTICAL, this, wxT("Dismiss Button"));
-
-    m_radiobtnCancel = new wxRadioButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
-    m_radiobtnClose = new wxRadioButton(this, wxID_ANY, _("Close"));
-
-    wxBoxSizer *const sizer3 = new wxBoxSizer(wxHORIZONTAL);
-
-    m_chkboxNo = new wxCheckBox(this, wxID_ANY, _("No"));
-    m_chkboxHelp = new wxCheckBox(this, wxID_ANY, _("Help"));
-    m_chkboxApply = new wxCheckBox(this, wxID_ANY, _("Apply"));
-
-    m_chkboxNoDefault = new wxCheckBox(this, wxID_ANY, wxT("No Default"));
-
-    sizer1->Add(m_radiobtnOk, 0, wxALL, 5);
-    sizer1->Add(m_radiobtnYes, 0, wxALL, 5);
-
-    sizer->Add(sizerInside1, 0, 0, 0);
-    sizerInside1->Add(m_chkboxAffirmativeButton, 0, wxALL, 5);
-    sizerInside1->Add(sizer1, 0, wxALL, 5);
-    sizerInside1->SetItemMinSize(sizer1, sizer1->GetStaticBox()->GetBestSize());    // to prevent wrapping of static box label
-
-    sizer2->Add(m_radiobtnCancel, 0, wxALL, 5);
-    sizer2->Add(m_radiobtnClose, 0, wxALL, 5);
-
-    sizer->Add(sizerInside2, 0, 0, 0);
-    sizerInside2->Add(m_chkboxDismissButton, 0, wxALL, 5);
-    sizerInside2->Add(sizer2, 0, wxALL, 5);
-    sizerInside2->SetItemMinSize(sizer2, sizer2->GetStaticBox()->GetBestSize());    // to prevent wrapping of static box label
-
-    sizerTop->Add(sizer, 0, wxALL, 5);
-
-    sizer3->Add(m_chkboxNo, 0, wxALL, 5);
-    sizer3->Add(m_chkboxHelp, 0, wxALL, 5);
-    sizer3->Add(m_chkboxApply, 0, wxALL, 5);
-
-    sizerTop->Add(sizer3, 0, wxALL, 5);
-
-    sizerTop->Add(m_chkboxNoDefault, 0, wxLEFT|wxRIGHT, 10);
-
-    EnableDisableControls();
-
-    SetSizerAndFit(sizerTop);
-
-    wxCommandEvent ev;
-    OnEvent(ev);
+	SetSizer(topSizer);
+	topSizer->Fit(this);    // it never returns from here
 }
 
 void StdButtonSizerDialog::OnEvent(wxCommandEvent& WXUNUSED(event))

diff -rbu2 wxWindows/src/generic/grid.cpp wx/src/generic/grid.cpp
--- wxWindows/src/generic/grid.cpp	Tue Nov 20 12:58:47 2001
+++ wx/src/generic/grid.cpp	Wed Nov 28 11:13:03 2001
@@ -3576,5 +3576,4 @@
     m_defaultCellAttr->SetEditor(new wxGridCellTextEditor);
 
-
     m_numRows = 0;
     m_numCols = 0;
@@ -4233,6 +4232,23 @@
         CalcUnscrolledPosition( 0, r.GetBottom(), &dummy, &bottom );
 
+
         // find the row labels within these bounds
         //
+        if ( m_rowHeights.IsEmpty() )
+        {
+            // if row heights are uniform, this
+            // can be calculated faster with division
+            
+            int start = top / m_defaultRowHeight;
+            int end = bottom / m_defaultRowHeight;
+
+            int row;
+            for ( row = start; row <= end; row++ )
+            {
+                rowlabels.Add( row );
+            }
+        }
+          else
+        {
         int row;
         for ( row = 0;  row < m_numRows;  row++ )
@@ -4246,4 +4262,5 @@
             rowlabels.Add( row );
         }
+        }
 
         iter++ ;
@@ -4338,4 +4355,29 @@
         //
         int row, col;
+
+        if ( m_rowHeights.IsEmpty() )
+        {
+            // if row heights are uniform, this
+            // can be calculated faster with division
+            
+            int start = top / m_defaultRowHeight;
+            int end = bottom / m_defaultRowHeight;
+
+            for ( row = start; row <= end; row++ )
+            {
+                for ( col = 0;  col < m_numCols;  col++ )
+                {
+                    if ( GetColRight(col) <= left )
+                        continue;
+
+                    if ( GetColLeft(col) > right )
+                        break;
+
+                    cellsExposed.Add( wxGridCellCoords( row, col ) );
+                }
+            }
+        }
+         else
+        {
         for ( row = 0;  row < m_numRows;  row++ )
         {
@@ -4346,5 +4388,4 @@
                 break;
 
-
             for ( col = 0;  col < m_numCols;  col++ )
             {
@@ -4358,4 +4399,5 @@
             }
         }
+        }
 
         iter++;
@@ -6284,6 +6326,15 @@
     // horizontal grid lines
     //
+
+    int start_row;
+    start_row = 0;
+
+    if ( m_rowHeights.IsEmpty() )
+    {
+        start_row = (top / m_defaultRowHeight);
+    }
+
     int i;
-    for ( i = 0; i < m_numRows; i++ )
+    for ( i = start_row; i < m_numRows; i++ )
     {
         int bot = GetRowBottom(i) - 1;
@@ -6454,5 +6505,6 @@
         dc.GetTextExtent( lines[0], &lineWidth, &lineHeight );
 
-        float x, y;
+        double x, y;
+
         switch ( horizAlign )
         {
@@ -6822,6 +6874,17 @@
 int wxGrid::YToRow( int y )
 {
-    int i;
+    if ( m_rowHeights.IsEmpty() )
+    {
+        // if all rows are of a uniform height,
+        // we can determine the row # by division
+
+        if ( m_defaultRowHeight == 0 )
+            return 0;
+        if ( y > 0 )
+            y -= 1; // (for grid line)
+        return ( y / m_defaultRowHeight );
+    }
 
+    int i;
     for ( i = 0;  i < m_numRows;  i++ )
     {
@@ -6853,6 +6916,23 @@
 int wxGrid::YToEdgeOfRow( int y )
 {
-    int i, d;
+    if ( m_rowHeights.IsEmpty() )
+    {
+        // if all rows are of a uniform height,
+        // we can determine the nearest edge by division
+
+        if ( m_defaultRowHeight == 0 )
+            return -1;
+        int row = ( y / m_defaultRowHeight ) - 1;
+        if ( row < 0 )
+            return -1;
+        int d = ( y % m_defaultRowHeight );
+        if ( d < WXGRID_LABEL_EDGE_ZONE )
+            return row;
+        if ( d > m_defaultRowHeight - WXGRID_LABEL_EDGE_ZONE )
+            return row+1;
+        return -1;
+    }
 
+    int i, d;
     for ( i = 0;  i < m_numRows;  i++ )
     {
@@ -8283,5 +8363,12 @@
     if ( resizeExistingRows )
     {
-        InitRowHeights();
+        // since we are resizing all rows to the default row size,
+        // we can simply clear the row heights and row bottoms
+        // arrays (which also allows us to take advantage of
+        // some speed optimisations)
+
+        m_rowHeights.Empty();
+        m_rowBottoms.Empty();
+
         if ( !GetBatchCount() )
             CalcDimensions();

 	  	 

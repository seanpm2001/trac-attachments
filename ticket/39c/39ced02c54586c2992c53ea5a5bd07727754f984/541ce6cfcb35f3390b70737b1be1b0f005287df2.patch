Only in wx: Debug
diff -rbu2 wxWindows\include\wx\generic\grid.h wx\include\wx\generic\grid.h
--- wxWindows\include\wx\generic\grid.h	Fri Nov 02 18:44:54 2001
+++ wx\include\wx\generic\grid.h	Sun Nov 18 16:47:14 2001
@@ -1226,4 +1226,6 @@
     void     SetCellHighlightROPenWidth(int width);
 
+    void     EnableUniformRowSize( bool enable = TRUE );
+    void     DisableUniformRowSize() { EnableUniformRowSize( FALSE ); }
     void     EnableDragRowSize( bool enable = TRUE );
     void     DisableDragRowSize() { EnableDragRowSize( FALSE ); }
@@ -1662,4 +1664,6 @@
     bool       m_defaultRowLabelValues;
     bool       m_defaultColLabelValues;
+
+    bool       m_uniformRowSize;
 
     wxColour   m_gridLineColour;
diff -rbu2 wxWindows\src\generic\grid.cpp wx\src\generic\grid.cpp
--- wxWindows\src\generic\grid.cpp	Sun Nov 04 15:51:05 2001
+++ wx\src\generic\grid.cpp	Sun Nov 18 12:56:52 2001
@@ -3573,5 +3573,4 @@
     m_defaultCellAttr->SetEditor(new wxGridCellTextEditor);
 
-
     m_numRows = 0;
     m_numCols = 0;
@@ -3581,4 +3580,6 @@
     m_colLabelHeight = WXGRID_DEFAULT_COL_LABEL_HEIGHT;
 
+    m_uniformRowSize = false;
+
     // create the type registry
     m_typeRegistry = new wxGridTypeRegistry;
@@ -3766,4 +3767,6 @@
     m_rowBottoms.Empty();
 
+    if (!m_uniformRowSize)
+    {
     m_rowHeights.Alloc( m_numRows );
     m_rowBottoms.Alloc( m_numRows );
@@ -3776,4 +3779,5 @@
         m_rowBottoms.Add( rowBottom );
     }
+    }
 }
 
@@ -4228,6 +4232,23 @@
         CalcUnscrolledPosition( 0, r.GetBottom(), &dummy, &bottom );
 
+
         // find the row labels within these bounds
         //
+        if (m_uniformRowSize)
+        {
+            // if row heights are uniform, this
+            // can be calculated faster with division
+            
+            int start = top / m_defaultRowHeight;
+            int end = bottom / m_defaultRowHeight;
+
+            int row;
+            for ( row = start; row <= end; row++ )
+            {
+                rowlabels.Add( row );
+            }
+        }
+          else
+        {
         int row;
         for ( row = 0;  row < m_numRows;  row++ )
@@ -4241,4 +4262,5 @@
             rowlabels.Add( row );
         }
+        }
 
         iter++ ;
@@ -4333,4 +4355,29 @@
         //
         int row, col;
+
+        if (m_uniformRowSize)
+        {
+            // if row heights are uniform, this
+            // can be calculated faster with division
+            
+            int start = top / m_defaultRowHeight;
+            int end = bottom / m_defaultRowHeight;
+
+            for ( row = start; row <= end; row++ )
+            {
+                for ( col = 0;  col < m_numCols;  col++ )
+                {
+                    if ( GetColRight(col) <= left )
+                        continue;
+
+                    if ( GetColLeft(col) > right )
+                        break;
+
+                    cellsExposed.Add( wxGridCellCoords( row, col ) );
+                }
+            }
+        }
+         else
+        {
         for ( row = 0;  row < m_numRows;  row++ )
         {
@@ -4341,5 +4388,4 @@
                 break;
 
-
             for ( col = 0;  col < m_numCols;  col++ )
             {
@@ -4353,4 +4399,5 @@
             }
         }
+        }
 
         iter++;
@@ -5214,4 +5261,14 @@
         if ( !GetBatchCount() )
         {
+            if (m_uniformRowSize)
+            {
+                // if row height uniform, we must refresh the whole
+                // window
+
+                m_gridWin->Refresh( TRUE, NULL );
+                m_rowLabelWin->Refresh( TRUE, NULL );
+            }
+             else
+            {
             // Only needed to get the correct rect.y:
             wxRect rect ( CellToRect( m_dragRowOrCol, 0 ) );
@@ -5224,4 +5281,5 @@
             m_gridWin->Refresh( FALSE, &rect );
         }
+        }
 
         ShowCellEditControl();
@@ -6279,6 +6337,15 @@
     // horizontal grid lines
     //
+
+    int start_row;
+    start_row = 0;
+
+    if (m_uniformRowSize)
+    {
+        start_row = (top / m_defaultRowHeight);
+    }
+
     int i;
-    for ( i = 0; i < m_numRows; i++ )
+    for ( i = start_row; i < m_numRows; i++ )
     {
         int bot = GetRowBottom(i) - 1;
@@ -6449,5 +6516,6 @@
         dc.GetTextExtent( lines[0], &lineWidth, &lineHeight );
 
-        float x, y;
+        double x, y;
+
         switch ( horizAlign )
         {
@@ -6817,6 +6885,17 @@
 int wxGrid::YToRow( int y )
 {
-    int i;
+    if ( m_uniformRowSize )
+    {
+        // if all rows are of a uniform height,
+        // we can determine the row # by division
+
+        if ( m_defaultRowHeight == 0 )
+            return 0;
+        if ( y > 0 )
+            y -= 1; // (for grid line)
+        return ( y / m_defaultRowHeight );
+    }
 
+    int i;
     for ( i = 0;  i < m_numRows;  i++ )
     {
@@ -6848,6 +6927,23 @@
 int wxGrid::YToEdgeOfRow( int y )
 {
-    int i, d;
+    if ( m_uniformRowSize )
+    {
+        // if all rows are of a uniform height,
+        // we can determine the nearest edge by division
 
+        if ( m_defaultRowHeight == 0 )
+            return -1;
+        int row = ( y / m_defaultRowHeight ) - 1;
+        if ( row < 0 )
+            return -1;
+        int d = ( y % m_defaultRowHeight );
+        if ( d < WXGRID_LABEL_EDGE_ZONE )
+            return row;
+        if ( d > m_defaultRowHeight - WXGRID_LABEL_EDGE_ZONE )
+            return row+1;
+        return -1;
+    }
+
+    int i, d;
     for ( i = 0;  i < m_numRows;  i++ )
     {
@@ -7778,4 +7874,15 @@
 }
 
+
+void wxGrid::EnableUniformRowSize( bool enable )
+{
+    m_uniformRowSize = enable;
+    if (m_uniformRowSize)
+    {
+        InitRowHeights();
+    }
+}
+
+
 void wxGrid::EnableGridLines( bool enable )
 {
@@ -8287,4 +8394,14 @@
 {
     wxCHECK_RET( row >= 0 && row < m_numRows, _T("invalid row index") );
+
+    if ( m_uniformRowSize )
+    {
+        // since all rows are the same size in this
+        // mode, set default row size
+        m_defaultRowHeight = height;
+        if ( !GetBatchCount() )
+            CalcDimensions();
+        return;
+    }
 
     if ( m_rowHeights.IsEmpty() )

 	  	 

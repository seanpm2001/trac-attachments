Index: include/wx/bookctrl.h
===================================================================
--- include/wx/bookctrl.h	(revision 65925)
+++ include/wx/bookctrl.h	(working copy)
@@ -106,7 +106,7 @@
     }
 
     // get the currently selected page or wxNOT_FOUND if none
-    virtual int GetSelection() const = 0;
+    virtual int GetSelection() const { return m_selection; }
 
     // set/get the title of a page
     virtual bool SetPageText(size_t n, const wxString& strText) = 0;
@@ -181,6 +181,7 @@
     // remove all pages and delete them
     virtual bool DeleteAllPages()
     {
+        m_selection = wxNOT_FOUND;
         DoInvalidateBestSize();
         WX_CLEAR_ARRAY(m_pages);
         return true;
@@ -204,7 +205,7 @@
                             int imageId = -1) = 0;
 
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     //
     // NB: this function will generate PAGE_CHANGING/ED events
     virtual int SetSelection(size_t n) = 0;
@@ -217,7 +218,7 @@
     void AdvanceSelection(bool forward = true)
     {
         int nPage = GetNextPage(forward);
-        if ( nPage != -1 )
+        if ( nPage != wxNOT_FOUND )
         {
             // cast is safe because of the check above
             SetSelection((size_t)nPage);
@@ -332,6 +333,9 @@
     // the margin around the choice control
     int m_controlMargin;
 
+    // the currently selected page or wxNOT_FOUND if none
+    int m_selection;
+
 private:
 
     // common part of all ctors
@@ -342,6 +346,7 @@
 
     DECLARE_ABSTRACT_CLASS(wxBookCtrlBase)
     wxDECLARE_NO_COPY_CLASS(wxBookCtrlBase);
+
     DECLARE_EVENT_TABLE()
 };
 
@@ -353,7 +358,7 @@
 {
 public:
     wxBookCtrlEvent(wxEventType commandType = wxEVT_NULL, int winid = 0,
-                        int nSel = -1, int nOldSel = -1)
+                        int nSel = wxNOT_FOUND, int nOldSel = wxNOT_FOUND)
         : wxNotifyEvent(commandType, winid)
     {
         m_nSel = nSel;
@@ -370,10 +375,10 @@
     virtual wxEvent *Clone() const { return new wxBookCtrlEvent(*this); }
 
     // accessors
-        // the currently selected page (-1 if none)
+        // the currently selected page (wxNOT_FOUND if none)
     int GetSelection() const { return m_nSel; }
     void SetSelection(int nSel) { m_nSel = nSel; }
-        // the page that was selected before the change (-1 if none)
+        // the page that was selected before the change (wxNOT_FOUND if none)
     int GetOldSelection() const { return m_nOldSel; }
     void SetOldSelection(int nOldSel) { m_nOldSel = nOldSel; }
 
Index: include/wx/choicebk.h
===================================================================
--- include/wx/choicebk.h	(revision 65925)
+++ include/wx/choicebk.h	(working copy)
@@ -65,7 +65,6 @@
                 const wxString& name = wxEmptyString);
 
 
-    virtual int GetSelection() const;
     virtual bool SetPageText(size_t n, const wxString& strText);
     virtual wxString GetPageText(size_t n) const;
     virtual int GetPageImage(size_t n) const;
@@ -102,9 +101,6 @@
     // event handlers
     void OnChoiceSelected(wxCommandEvent& event);
 
-    // the currently selected page or wxNOT_FOUND if none
-    int m_selection;
-
 private:
     // common part of all constructors
     void Init();
Index: include/wx/cocoa/notebook.h
===================================================================
--- include/wx/cocoa/notebook.h	(revision 65925)
+++ include/wx/cocoa/notebook.h	(working copy)
@@ -56,7 +56,7 @@
 // ------------------------------------------------------------------------
 public:
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     int SetSelection(size_t nPage);
     // get the currently selected page
     int GetSelection() const;
Index: include/wx/generic/notebook.h
===================================================================
--- include/wx/generic/notebook.h	(revision 65925)
+++ include/wx/generic/notebook.h	(working copy)
@@ -56,17 +56,15 @@
 
   // accessors
   // ---------
-  // Find the position of the wxNotebookPage, -1 if not found.
+  // Find the position of the wxNotebookPage, wxNOT_FOUND if not found.
   int FindPagePosition(wxNotebookPage* page) const;
 
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
   int SetSelection(size_t nPage);
     // cycle thru the tabs
   //  void AdvanceSelection(bool bForward = true);
-    // get the currently selected page
-  int GetSelection() const { return m_nSelection; }
 
     // changes selected page without sending events
   int ChangeSelection(size_t nPage);
@@ -149,8 +147,6 @@
   // helper functions
   void ChangePage(int nOldSel, int nSel); // change pages
 
-  int m_nSelection;           // the current selection (-1 if none)
-
   wxTabView*   m_tabView;
 
   DECLARE_DYNAMIC_CLASS(wxNotebook)
Index: include/wx/gtk1/notebook.h
===================================================================
--- include/wx/gtk1/notebook.h	(revision 65925)
+++ include/wx/gtk1/notebook.h	(working copy)
@@ -50,7 +50,7 @@
   // ---------
 
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
     int SetSelection(size_t nPage) { return DoSetSelection(nPage, SetSelection_SendEvent); }
     // get the currently selected page
Index: include/wx/gtk/notebook.h
===================================================================
--- include/wx/gtk/notebook.h	(revision 65925)
+++ include/wx/gtk/notebook.h	(working copy)
@@ -50,7 +50,7 @@
   // ---------
 
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
     int SetSelection(size_t nPage) { return DoSetSelection(nPage, SetSelection_SendEvent); }
     // get the currently selected page
@@ -116,11 +116,6 @@
     // the additional page data (the pages themselves are in m_pages array)
     wxGtkNotebookPagesList m_pagesData;
 
-    // we need to store the old selection since there
-    // is no other way to know about it at the time
-    // of the change selection event
-    int m_oldSelection;
-
 protected:
     // set all page's attributes
     virtual void DoApplyWidgetStyle(GtkRcStyle *style);
Index: include/wx/listbook.h
===================================================================
--- include/wx/listbook.h	(revision 65925)
+++ include/wx/listbook.h	(working copy)
@@ -66,7 +66,6 @@
 
 
     // overridden base class methods
-    virtual int GetSelection() const;
     virtual bool SetPageText(size_t n, const wxString& strText);
     virtual wxString GetPageText(size_t n) const;
     virtual int GetPageImage(size_t n) const;
@@ -101,9 +100,6 @@
     void OnListSelected(wxListEvent& event);
     void OnSize(wxSizeEvent& event);
 
-    // the currently selected page or wxNOT_FOUND if none
-    int m_selection;
-
 private:
     // common part of all constructors
     void Init();
Index: include/wx/msw/notebook.h
===================================================================
--- include/wx/msw/notebook.h	(revision 65925)
+++ include/wx/msw/notebook.h	(working copy)
@@ -86,11 +86,9 @@
   virtual size_t GetPageCount() const;
 
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
   int SetSelection(size_t nPage);
-    // get the currently selected page
-  int GetSelection() const { return m_nSelection; }
 
     // changes selected page without sending events
   int ChangeSelection(size_t nPage);
@@ -199,7 +197,7 @@
   void Init();
 
   // hides the currently shown page and shows the given one (if not -1) and
-  // updates m_nSelection accordingly
+  // updates m_selection accordingly
   void UpdateSelection(int selNew);
 
   // remove one page from the notebook, without deleting
@@ -236,8 +234,6 @@
   bool m_hasSubclassedUpdown;
 #endif // __WXWINCE__
 
-  // the current selection (-1 if none)
-  int m_nSelection;
 
   wxNotebookPageInfoList m_pageInfos;
 
Index: include/wx/notebook.h
===================================================================
--- include/wx/notebook.h	(revision 65925)
+++ include/wx/notebook.h	(working copy)
@@ -96,8 +96,8 @@
     bool SendPageChangingEvent(int nPage);
 
     // sends the event about page change from old to new (or GetSelection() if
-    // new is -1)
-    void SendPageChangedEvent(int nPageOld, int nPageNew = -1);
+    // new is wxNOT_FOUND)
+    void SendPageChangedEvent(int nPageOld, int nPageNew = wxNOT_FOUND);
 
     // wxBookCtrlBase overrides this method to return false but we do need
     // focus because we have tabs
Index: include/wx/os2/notebook.h
===================================================================
--- include/wx/os2/notebook.h	(revision 65925)
+++ include/wx/os2/notebook.h	(working copy)
@@ -61,7 +61,7 @@
 
     //
     // Set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
     //
     int      SetSelection(size_t nPage);
@@ -70,11 +70,6 @@
     int ChangeSelection(size_t nPage);
 
     //
-    // Get the currently selected page
-    //
-    inline int      GetSelection(void) const { return m_nSelection; }
-
-    //
     // Set/Get the title of a page
     //
     bool     SetPageText( size_t             nPage
@@ -193,8 +188,6 @@
     // Helper functions
     //
 
-    int                     m_nSelection; // The current selection (-1 if none)
-
 private:
     wxArrayLong                     m_alPageId;
     int                             m_nTabSize; // holds the largest tab size
Index: include/wx/osx/notebook.h
===================================================================
--- include/wx/osx/notebook.h	(revision 65925)
+++ include/wx/osx/notebook.h	(working copy)
@@ -55,11 +55,9 @@
   // accessors
   // ---------
     // set the currently selected page, return the index of the previously
-    // selected one (or -1 on error)
+    // selected one (or wxNOT_FOUND on error)
     // NB: this function will _not_ generate wxEVT_NOTEBOOK_PAGE_xxx events
   int SetSelection(size_t nPage) { return DoSetSelection(nPage, SetSelection_SendEvent); }
-    // get the currently selected page
-  int GetSelection() const { return m_nSelection; }
 
     // changes selected page without sending events
   int ChangeSelection(size_t nPage) { return DoSetSelection(nPage); }
@@ -135,8 +133,6 @@
   // the icon indices
   wxArrayInt m_images;
 
-  int m_nSelection;           // the current selection (-1 if none)
-
   DECLARE_DYNAMIC_CLASS(wxNotebook)
   DECLARE_EVENT_TABLE()
 };
Index: include/wx/toolbook.h
===================================================================
--- include/wx/toolbook.h	(revision 65925)
+++ include/wx/toolbook.h	(working copy)
@@ -70,7 +70,6 @@
 
 
     // implement base class virtuals
-    virtual int GetSelection() const;
     virtual bool SetPageText(size_t n, const wxString& strText);
     virtual wxString GetPageText(size_t n) const;
     virtual int GetPageImage(size_t n) const;
@@ -110,9 +109,6 @@
     wxBookCtrlEvent* CreatePageChangingEvent() const;
     void MakeChangedEvent(wxBookCtrlEvent &event);
 
-    // the currently selected page or wxNOT_FOUND if none
-    int m_selection;
-
     // whether the toolbar needs to be realized
     bool m_needsRealizing;
 
Index: include/wx/treebook.h
===================================================================
--- include/wx/treebook.h	(revision 65925)
+++ include/wx/treebook.h	(working copy)
@@ -126,7 +126,6 @@
     // Standard operations inherited from wxBookCtrlBase
     // -------------------------------------------------
 
-    virtual int GetSelection() const;
     virtual bool SetPageText(size_t n, const wxString& strText);
     virtual wxString GetPageText(size_t n) const;
     virtual int GetPageImage(size_t n) const;
@@ -152,9 +151,6 @@
     // array of page ids and page windows
     wxArrayTreeItemIds m_treeIds;
 
-    // the currently selected page or wxNOT_FOUND if none
-    int m_selection;
-
     // in the situation when m_selection page is not wxNOT_FOUND but page is
     // NULL this is the first (sub)child that has a non-NULL page
     int m_actualSelection;
Index: include/wx/univ/notebook.h
===================================================================
--- include/wx/univ/notebook.h	(revision 65925)
+++ include/wx/univ/notebook.h	(working copy)
@@ -64,7 +64,6 @@
     // --------------------------------------
 
     virtual int SetSelection(size_t nPage) { return DoSetSelection(nPage, SetSelection_SendEvent); }
-    virtual int GetSelection() const { return (int) m_sel; }
 
     // changes selected page without sending events
     int ChangeSelection(size_t nPage) { return DoSetSelection(nPage); }
@@ -210,9 +209,6 @@
     // the pages titles
     wxArrayString m_titles;
 
-    // the current selection
-    size_t m_sel;
-
     // the spin button to change the pages
     wxSpinButton *m_spinbtn;
 
Index: src/cocoa/notebook.mm
===================================================================
--- src/cocoa/notebook.mm	(revision 65925)
+++ src/cocoa/notebook.mm	(working copy)
@@ -301,7 +301,7 @@
 {
     NSTabViewItem *selectedItem = [GetNSTabView() selectedTabViewItem];
     if(!selectedItem)
-        return -1;
+        return wxNOT_FOUND;
     return [GetNSTabView() indexOfTabViewItem:selectedItem];
 }
 
Index: src/common/bookctrl.cpp
===================================================================
--- src/common/bookctrl.cpp	(revision 65925)
+++ src/common/bookctrl.cpp	(working copy)
@@ -53,6 +53,7 @@
 
 void wxBookCtrlBase::Init()
 {
+    m_selection = wxNOT_FOUND;
     m_bookctrl = NULL;
     m_imageList = NULL;
     m_ownsImageList = false;
Index: src/generic/choicbkg.cpp
===================================================================
--- src/generic/choicbkg.cpp	(revision 65925)
+++ src/generic/choicbkg.cpp	(working copy)
@@ -65,9 +65,7 @@
 // ----------------------------------------------------------------------------
 
 void wxChoicebook::Init()
-{
-    m_selection = wxNOT_FOUND;
-}
+{}
 
 bool
 wxChoicebook::Create(wxWindow *parent,
@@ -165,11 +163,6 @@
 // selection
 // ----------------------------------------------------------------------------
 
-int wxChoicebook::GetSelection() const
-{
-    return m_selection;
-}
-
 wxBookCtrlEvent* wxChoicebook::CreatePageChangingEvent() const
 {
     return new wxBookCtrlEvent(wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING, m_windowId);
@@ -254,7 +247,6 @@
 
 bool wxChoicebook::DeleteAllPages()
 {
-    m_selection = wxNOT_FOUND;
     GetChoiceCtrl()->Clear();
     return wxBookCtrlBase::DeleteAllPages();
 }
Index: src/generic/listbkg.cpp
===================================================================
--- src/generic/listbkg.cpp	(revision 65925)
+++ src/generic/listbkg.cpp	(working copy)
@@ -86,9 +86,7 @@
 // ----------------------------------------------------------------------------
 
 void wxListbook::Init()
-{
-    m_selection = wxNOT_FOUND;
-}
+{}
 
 bool
 wxListbook::Create(wxWindow *parent,
@@ -311,11 +309,6 @@
     GetListView()->Focus(newsel);
 }
 
-int wxListbook::GetSelection() const
-{
-    return m_selection;
-}
-
 wxBookCtrlEvent* wxListbook::CreatePageChangingEvent() const
 {
     return new wxBookCtrlEvent(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING, m_windowId);
@@ -355,16 +348,16 @@
 
     // some page should be selected: either this one or the first one if there
     // is still no selection
-    int selNew = -1;
+    int selNew = wxNOT_FOUND;
     if ( bSelect )
         selNew = n;
-    else if ( m_selection == -1 )
+    else if ( m_selection == wxNOT_FOUND )
         selNew = 0;
 
     if ( selNew != m_selection )
         page->Hide();
 
-    if ( selNew != -1 )
+    if ( selNew != wxNOT_FOUND )
         SetSelection(selNew);
 
     UpdateSize();
@@ -387,7 +380,7 @@
             int sel = m_selection - 1;
             if (page_count == 1)
                 sel = wxNOT_FOUND;
-            else if ((page_count == 2) || (sel == -1))
+            else if ((page_count == 2) || (sel == wxNOT_FOUND))
                 sel = 0;
 
             // force sel invalid if deleting current page - don't try to hide it
@@ -411,8 +404,6 @@
     if (!wxBookCtrlBase::DeleteAllPages())
         return false;
 
-    m_selection = -1;
-
     UpdateSize();
 
     return true;
Index: src/generic/toolbkg.cpp
===================================================================
--- src/generic/toolbkg.cpp	(revision 65925)
+++ src/generic/toolbkg.cpp	(working copy)
@@ -64,7 +64,6 @@
 
 void wxToolbook::Init()
 {
-    m_selection = wxNOT_FOUND;
     m_needsRealizing = false;
 }
 
@@ -201,11 +200,6 @@
 // selection
 // ----------------------------------------------------------------------------
 
-int wxToolbook::GetSelection() const
-{
-    return m_selection;
-}
-
 wxBookCtrlEvent* wxToolbook::CreatePageChangingEvent() const
 {
     return new wxBookCtrlEvent(wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING, m_windowId);
@@ -235,13 +229,13 @@
         GetToolBar()->Realize();
     }
 
-    if (m_selection == -1)
+    if (m_selection == wxNOT_FOUND)
         m_selection = 0;
 
     if (GetPageCount() > 0)
     {
         int sel = m_selection;
-        m_selection = -1;
+        m_selection = wxNOT_FOUND;
         SetSelection(sel);
     }
 
@@ -352,7 +346,7 @@
             int sel = m_selection - 1;
             if (page_count == 1)
                 sel = wxNOT_FOUND;
-            else if ((page_count == 2) || (sel == -1))
+            else if ((page_count == 2) || (sel == wxNOT_FOUND))
                 sel = 0;
 
             // force sel invalid if deleting current page - don't try to hide it
Index: src/generic/treebkg.cpp
===================================================================
--- src/generic/treebkg.cpp	(revision 65925)
+++ src/generic/treebkg.cpp	(working copy)
@@ -556,11 +556,6 @@
     return true;
 }
 
-int wxTreebook::GetSelection() const
-{
-   return m_selection;
-}
-
 int wxTreebook::DoSetSelection(size_t pagePos, int flags)
 {
     wxCHECK_MSG( IS_VALID_PAGE(pagePos), wxNOT_FOUND,
Index: src/gtk1/notebook.cpp
===================================================================
--- src/gtk1/notebook.cpp	(revision 65925)
+++ src/gtk1/notebook.cpp	(working copy)
@@ -107,7 +107,7 @@
         // make wxNotebook::GetSelection() return the correct (i.e. consistent
         // with wxBookCtrlEvent::GetSelection()) value even though the page is
         // not really changed in GTK+
-        notebook->m_selection = page;
+        notebook->SetSelection(page);
     }
     else
     {
@@ -121,7 +121,7 @@
             // make wxNotebook::GetSelection() return the correct (i.e. consistent
             // with wxBookCtrlEvent::GetSelection()) value even though the page is
             // not really changed in GTK+
-            notebook->m_selection = page;
+            notebook->SetSelection(page);
 
             notebook->SendPageChangedEvent(old);
         }
@@ -227,7 +227,7 @@
     if ((gdk_event->keyval == GDK_Tab) || (gdk_event->keyval == GDK_ISO_Left_Tab))
     {
         int sel = notebook->GetSelection();
-        if (sel == -1)
+        if (sel == wxNOT_FOUND)
             return TRUE;
         wxGtkNotebookPage *nb_page = notebook->GetNotebookPage(sel);
         wxCHECK_MSG( nb_page, FALSE, wxT("invalid selection in wxNotebook") );
@@ -292,7 +292,6 @@
     m_inSwitchPage = false;
 
     m_imageList = NULL;
-    m_selection = -1;
     m_themeEnabled = true;
 }
 
@@ -362,9 +361,9 @@
 
 int wxNotebook::GetSelection() const
 {
-    wxCHECK_MSG( m_widget != NULL, -1, wxT("invalid notebook") );
+    wxCHECK_MSG( m_widget != NULL, wxNOT_FOUND, wxT("invalid notebook") );
 
-    if ( m_selection == -1 )
+    if ( m_selection == wxNOT_FOUND )
     {
         GList *nb_pages = GTK_NOTEBOOK(m_widget)->children;
 
@@ -375,8 +374,7 @@
             gpointer cur = notebook->cur_page;
             if ( cur != NULL )
             {
-                wxConstCast(this, wxNotebook)->m_selection =
-                    g_list_index( nb_pages, cur );
+                SetSelection(g_list_index( nb_pages, cur ));
             }
         }
     }
@@ -417,7 +415,7 @@
 
 int wxNotebook::DoSetSelection( size_t page, int flags )
 {
-    wxCHECK_MSG( m_widget != NULL, -1, wxT("invalid notebook") );
+    wxCHECK_MSG( m_widget != NULL, wxNOT_FOUND, wxT("invalid notebook") );
 
     wxCHECK_MSG( page < m_pagesData.GetCount(), -1, wxT("invalid notebook index") );
 
@@ -597,10 +595,10 @@
 
 wxNotebookPage *wxNotebook::DoRemovePage( size_t page )
 {
-    if ( m_selection != -1 && (size_t)m_selection >= page )
+    if ( m_selection != wxNOT_FOUND && (size_t)m_selection >= page )
     {
         // the index will become invalid after the page is deleted
-        m_selection = -1;
+        m_selection = wxNOT_FOUND;
     }
 
     wxNotebookPage *client = wxNotebookBase::DoRemovePage(page);
Index: src/gtk/notebook.cpp
===================================================================
--- src/gtk/notebook.cpp	(revision 65925)
+++ src/gtk/notebook.cpp	(working copy)
@@ -64,7 +64,7 @@
 switch_page_after(GtkWidget* widget, GtkNotebookPage*, guint, wxNotebook* win)
 {
     g_signal_handlers_block_by_func(widget, (void*)switch_page_after, win);
-    win->SendPageChangedEvent(win->m_oldSelection);
+    win->SendPageChangedEvent(win->GetSelection());
 }
 }
 
@@ -72,7 +72,7 @@
 static void
 switch_page(GtkNotebook* widget, GtkNotebookPage*, int page, wxNotebook* win)
 {
-    win->m_oldSelection = gtk_notebook_get_current_page(widget);
+    win->SetSelection(gtk_notebook_get_current_page(widget));
 
     if (win->SendPageChangingEvent(page))
         // allow change, unblock handler for changed event
@@ -94,7 +94,7 @@
     g_signal_handlers_block_by_func(widget, (void*)switch_page, win);
 
     // restore previous selection
-    gtk_notebook_set_current_page(widget, win->m_oldSelection);
+    gtk_notebook_set_current_page(widget, win->GetSelection());
 
     g_signal_handlers_unblock_by_func(widget, (void*)switch_page, win);
 }
@@ -134,7 +134,6 @@
 void wxNotebook::Init()
 {
     m_padding = 0;
-    m_oldSelection = -1;
     m_themeEnabled = true;
 }
 
@@ -202,7 +201,7 @@
 
 int wxNotebook::GetSelection() const
 {
-    wxCHECK_MSG( m_widget != NULL, -1, wxT("invalid notebook") );
+    wxCHECK_MSG( m_widget != NULL, wxNOT_FOUND, wxT("invalid notebook") );
 
     return gtk_notebook_get_current_page( GTK_NOTEBOOK(m_widget) );
 }
@@ -217,7 +216,7 @@
 
 int wxNotebook::GetPageImage( size_t page ) const
 {
-    wxCHECK_MSG(page < GetPageCount(), -1, "invalid notebook index");
+    wxCHECK_MSG(page < GetPageCount(), wxNOT_FOUND, "invalid notebook index");
 
     return GetNotebookPage(page)->m_imageIndex;
 }
@@ -229,7 +228,7 @@
 
 int wxNotebook::DoSetSelection( size_t page, int flags )
 {
-    wxCHECK_MSG(page < GetPageCount(), -1, "invalid notebook index");
+    wxCHECK_MSG(page < GetPageCount(), wxNOT_FOUND, "invalid notebook index");
 
     int selOld = GetSelection();
 
Index: src/msw/notebook.cpp
===================================================================
--- src/msw/notebook.cpp	(revision 65925)
+++ src/msw/notebook.cpp	(working copy)
@@ -240,7 +240,6 @@
 void wxNotebook::Init()
 {
     m_imageList = NULL;
-    m_nSelection = wxNOT_FOUND;
 
 #if wxUSE_UXTHEME
     m_hbrBackground = NULL;
@@ -451,24 +450,24 @@
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("notebook page out of range") );
 
-    if ( m_nSelection == wxNOT_FOUND || nPage != (size_t)m_nSelection )
+    if ( m_selection == wxNOT_FOUND || nPage != (size_t)m_selection )
     {
         if ( SendPageChangingEvent(nPage) )
         {
             // program allows the page change
-            SendPageChangedEvent(m_nSelection, nPage);
+            SendPageChangedEvent(m_selection, nPage);
 
             TabCtrl_SetCurSel(GetHwnd(), nPage);
         }
     }
 
-    return m_nSelection;
+    return m_selection;
 }
 
 void wxNotebook::UpdateSelection(int selNew)
 {
-    if ( m_nSelection != wxNOT_FOUND )
-        m_pages[m_nSelection]->Show(false);
+    if ( m_selection != wxNOT_FOUND )
+        m_pages[m_selection]->Show(false);
 
     if ( selNew != wxNOT_FOUND )
     {
@@ -486,16 +485,16 @@
     if ( ::IsWindowVisible(GetHwnd()) )
         SetFocus();
 
-    m_nSelection = selNew;
+    m_selection = selNew;
 }
 
 int wxNotebook::ChangeSelection(size_t nPage)
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("notebook page out of range") );
 
-    const int selOld = m_nSelection;
+    const int selOld = m_selection;
 
-    if ( m_nSelection == wxNOT_FOUND || nPage != (size_t)m_nSelection )
+    if ( m_selection == wxNOT_FOUND || nPage != (size_t)m_selection )
     {
         TabCtrl_SetCurSel(GetHwnd(), nPage);
 
@@ -697,7 +696,7 @@
     if ( m_pages.IsEmpty() )
     {
         // no selection any more, the notebook becamse empty
-        m_nSelection = wxNOT_FOUND;
+        m_selection = wxNOT_FOUND;
     }
     else // notebook still not empty
     {
@@ -708,22 +707,22 @@
             // Because it could be that the slection index changed
             // we need to update it.
             // Note: this does not mean the selection it self changed.
-            m_nSelection = selNew;
-            m_pages[m_nSelection]->Refresh();
+            m_selection = selNew;
+            m_pages[m_selection]->Refresh();
         }
-        else if (int(nPage) == m_nSelection)
+        else if (int(nPage) == m_selection)
         {
             // The selection was deleted.
 
             // Determine new selection.
-            if (m_nSelection == int(GetPageCount()))
-                selNew = m_nSelection - 1;
+            if (m_selection == int(GetPageCount()))
+                selNew = m_selection - 1;
             else
-                selNew = m_nSelection;
+                selNew = m_selection;
 
-            // m_nSelection must be always valid so reset it before calling
+            // m_selection must be always valid so reset it before calling
             // SetSelection()
-            m_nSelection = wxNOT_FOUND;
+            m_selection = wxNOT_FOUND;
             SetSelection(selNew);
         }
         else
@@ -747,7 +746,7 @@
 
     TabCtrl_DeleteAllItems(GetHwnd());
 
-    m_nSelection = wxNOT_FOUND;
+    m_selection = wxNOT_FOUND;
 
     InvalidateBestSize();
     return true;
@@ -837,10 +836,10 @@
 
     // if the inserted page is before the selected one, we must update the
     // index of the selected page
-    if ( int(nPage) <= m_nSelection )
+    if ( int(nPage) <= m_selection )
     {
         // one extra page added
-        m_nSelection++;
+        m_selection++;
     }
 
     // some page should be selected: either this one or the first one if there
@@ -848,7 +847,7 @@
     int selNew = wxNOT_FOUND;
     if ( bSelect )
         selNew = nPage;
-    else if ( m_nSelection == wxNOT_FOUND )
+    else if ( m_selection == wxNOT_FOUND )
         selNew = 0;
 
     if ( selNew != wxNOT_FOUND )
@@ -1149,14 +1148,14 @@
             // page but only if entering notebook page (i.e. direction is
             // backwards (Shift-TAB) comething from out-of-notebook, or
             // direction is forward (TAB) from ourselves),
-            if ( m_nSelection != wxNOT_FOUND &&
+            if ( m_selection != wxNOT_FOUND &&
                     (!event.GetDirection() || isFromSelf) )
             {
                 // so that the page knows that the event comes from it's parent
                 // and is being propagated downwards
                 event.SetEventObject(this);
 
-                wxWindow *page = m_pages[m_nSelection];
+                wxWindow *page = m_pages[m_selection];
                 if ( !page->HandleWindowEvent(event) )
                 {
                     page->SetFocus();
@@ -1451,7 +1450,7 @@
   }
 
   event.SetSelection(TabCtrl_GetCurSel(GetHwnd()));
-  event.SetOldSelection(m_nSelection);
+  event.SetOldSelection(m_selection);
   event.SetEventObject(this);
   event.SetInt(idCtrl);
 
Index: src/os2/notebook.cpp
===================================================================
--- src/os2/notebook.cpp	(revision 65925)
+++ src/os2/notebook.cpp	(working copy)
@@ -76,7 +76,6 @@
 void wxNotebook::Init()
 {
     m_imageList  = NULL;
-    m_nSelection = -1;
     m_nTabSize   = 0;
 } // end of wxNotebook::Init
 
@@ -210,14 +209,14 @@
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("notebook page out of range") );
 
-    if (nPage != (size_t)m_nSelection)
+    if (nPage != (size_t)m_selection)
     {
         wxBookCtrlEvent             vEvent( wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING
                                            ,m_windowId
                                           );
 
         vEvent.SetSelection(nPage);
-        vEvent.SetOldSelection(m_nSelection);
+        vEvent.SetOldSelection(m_selection);
         vEvent.SetEventObject(this);
         if (!HandleWindowEvent(vEvent) || vEvent.IsAllowed())
         {
@@ -235,7 +234,7 @@
                         );
         }
     }
-    m_nSelection = nPage;
+    m_selection = nPage;
     return nPage;
 } // end of wxNotebook::SetSelection
 
@@ -243,7 +242,7 @@
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("notebook page out of range") );
 
-    if (nPage != (size_t)m_nSelection)
+    if (nPage != (size_t)m_selection)
     {
         ::WinSendMsg( GetHWND()
                 ,BKM_TURNTOPAGE
@@ -251,7 +250,7 @@
                         ,(MPARAM)0
                     );
     }
-    m_nSelection = nPage;
+    m_selection = nPage;
     return nPage;
 }
 
@@ -404,7 +403,7 @@
         //
         // No selection any more, the notebook becamse empty
         //
-        m_nSelection = -1;
+        m_selection = wxNOT_FOUND;
     }
     else // notebook still not empty
     {
@@ -413,23 +412,23 @@
         //
         int                         nSelNew;
 
-        if (m_nSelection == (int)GetPageCount())
+        if (m_selection == (int)GetPageCount())
         {
             //
             // Last page deleted, make the new last page the new selection
             //
-            nSelNew = m_nSelection - 1;
+            nSelNew = m_selection - 1;
         }
-        else if (nPage <= (size_t)m_nSelection)
+        else if (nPage <= (size_t)m_selection)
         {
             //
             // We must show another page, even if it has the same index
             //
-            nSelNew = m_nSelection;
+            nSelNew = m_selection;
         }
         else // nothing changes for the currently selected page
         {
-            nSelNew = -1;
+            nSelNew = wxNOT_FOUND;
 
             //
             // We still must refresh the current page: this needs to be done
@@ -437,16 +436,16 @@
             // control (i.e. when there are too many pages) -- otherwise after
             // deleting a page nothing at all is shown
             //
-            m_pages[m_nSelection]->Refresh();
+            m_pages[m_selection]->Refresh();
         }
 
-        if (nSelNew != -1)
+        if (nSelNew != wxNOT_FOUND)
         {
             //
-            // m_nSelection must be always valid so reset it before calling
+            // m_selection must be always valid so reset it before calling
             // SetSelection()
             //
-            m_nSelection = -1;
+            m_selection = wxNOT_FOUND;
             SetSelection(nSelNew);
         }
     }
@@ -469,7 +468,7 @@
                  ,(MPARAM)0
                  ,(MPARAM)BKA_ALL
                 );
-    m_nSelection = -1;
+    m_selection = wxNOT_FOUND;
 
     return true;
 } // end of wxNotebook::DeleteAllPages
@@ -569,12 +568,12 @@
     // If the inserted page is before the selected one, we must update the
     // index of the selected page
     //
-    if (nPage <= (size_t)m_nSelection)
+    if (nPage <= (size_t)m_selection)
     {
         //
         // One extra page added
         //
-        m_nSelection++;
+        m_selection++;
     }
 
     if (pPage)
@@ -653,14 +652,14 @@
     // Some page should be selected: either this one or the first one if there is
     // still no selection
     //
-    int nSelNew = -1;
+    int nSelNew = wxNOT_FOUND;
 
     if (bSelect)
         nSelNew = nPage;
-    else if ( m_nSelection == -1 )
+    else if ( m_selection == wxNOT_FOUND )
         nSelNew = 0;
 
-    if (nSelNew != -1)
+    if (nSelNew != wxNOT_FOUND)
         SetSelection(nSelNew);
 
     InvalidateBestSize();
@@ -725,7 +724,7 @@
         wxNotebookPage*         pPage = m_pages[nSel];
 
         pPage->Show(true);
-        m_nSelection = nSel;
+        m_selection = nSel;
     }
 
     //
@@ -746,8 +745,8 @@
     //
     // set focus to the currently selected page if any
     //
-    if (m_nSelection != -1)
-        m_pages[m_nSelection]->SetFocus();
+    if (m_selection != wxNOT_FOUND)
+        m_pages[m_selection]->SetFocus();
     rEvent.Skip();
 } // end of wxNotebook::OnSetFocus
 
@@ -786,7 +785,7 @@
             //
             // No, it doesn't come from child, case (b): forward to a page
             //
-            if (m_nSelection != -1)
+            if (m_selection != wxNOT_FOUND)
             {
                 //
                 // So that the page knows that the event comes from it's parent
@@ -794,7 +793,7 @@
                 //
                 rEvent.SetEventObject(this);
 
-                wxWindow*           pPage = m_pages[m_nSelection];
+                wxWindow*           pPage = m_pages[m_selection];
 
                 if (!pPage->HandleWindowEvent(rEvent))
                 {
Index: src/osx/notebook_osx.cpp
===================================================================
--- src/osx/notebook_osx.cpp	(revision 65925)
+++ src/osx/notebook_osx.cpp	(working copy)
@@ -43,9 +43,7 @@
 
 // common part of all ctors
 void wxNotebook::Init()
-{
-    m_nSelection = -1;
-}
+{}
 
 // default for dynamic class
 wxNotebook::wxNotebook()
@@ -121,25 +119,25 @@
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("DoSetSelection: invalid notebook page") );
 
-    if ( m_nSelection == wxNOT_FOUND || nPage != (size_t)m_nSelection )
+    if ( m_selection == wxNOT_FOUND || nPage != (size_t)m_selection )
     {
         if ( flags & SetSelection_SendEvent )
         {
             if ( !SendPageChangingEvent(nPage) )
             {
                 // vetoed by program
-                return m_nSelection;
+                return m_selection;
             }
             //else: program allows the page change
 
-            SendPageChangedEvent(m_nSelection, nPage);
+            SendPageChangedEvent(m_selection, nPage);
         }
 
-        ChangePage(m_nSelection, nPage);
+        ChangePage(m_selection, nPage);
     }
     //else: no change
 
-    return m_nSelection;
+    return m_selection;
 }
 
 bool wxNotebook::SetPageText(size_t nPage, const wxString& strText)
@@ -204,11 +202,11 @@
 
     MacSetupTabs();
 
-    if (m_nSelection >= (int)GetPageCount())
-        m_nSelection = GetPageCount() - 1;
+    if (m_selection >= (int)GetPageCount())
+        m_selection = GetPageCount() - 1;
 
-    if (m_nSelection >= 0)
-        m_pages[m_nSelection]->Show(true);
+    if (m_selection >= 0)
+        m_pages[m_selection]->Show(true);
 
     InvalidateBestSize();
 
@@ -220,7 +218,7 @@
 {
     WX_CLEAR_ARRAY(m_pages) ;
     MacSetupTabs();
-    m_nSelection = -1 ;
+    m_selection = wxNOT_FOUND ;
     InvalidateBestSize();
 
     return true;
@@ -258,23 +256,23 @@
     // if the inserted page is before the selected one, we must update the
     // index of the selected page
 
-    if ( int(nPage) <= m_nSelection )
+    if ( int(nPage) <= m_selection )
     {
-        m_nSelection++;
+        m_selection++;
 
         // while this still is the same page showing, we need to update the tabs
-        m_peer->SetValue( m_nSelection + 1 ) ;
+        m_peer->SetValue( m_selection + 1 ) ;
     }
 
     // some page should be selected: either this one or the first one if there
     // is still no selection
-    int selNew = -1;
+    int selNew = wxNOT_FOUND;
     if ( bSelect )
         selNew = nPage;
-    else if ( m_nSelection == -1 )
+    else if ( m_selection == wxNOT_FOUND )
         selNew = 0;
 
-    if ( selNew != -1 )
+    if ( selNew != wxNOT_FOUND )
         SetSelection( selNew );
 
     InvalidateBestSize();
@@ -380,9 +378,9 @@
     // has become visible for the first time after creation, and
     // we postponed showing the page in ChangePage().
     // So show the selected page now.
-    if ( m_nSelection != -1 )
+    if ( m_selection != wxNOT_FOUND )
     {
-        wxNotebookPage *pPage = m_pages[m_nSelection];
+        wxNotebookPage *pPage = m_pages[m_selection];
         if ( !pPage->IsShown() )
         {
             pPage->Show( true );
@@ -407,8 +405,8 @@
 void wxNotebook::OnSetFocus(wxFocusEvent& event)
 {
     // set focus to the currently selected page if any
-    if ( m_nSelection != -1 )
-        m_pages[m_nSelection]->SetFocus();
+    if ( m_selection != wxNOT_FOUND )
+        m_pages[m_selection]->SetFocus();
 
     event.Skip();
 }
@@ -441,13 +439,13 @@
         if ( ((wxWindow*)event.GetEventObject()) == parent )
         {
             // no, it doesn't come from child, case (b): forward to a page
-            if ( m_nSelection != -1 )
+            if ( m_selection != wxNOT_FOUND )
             {
                 // so that the page knows that the event comes from it's parent
                 // and is being propagated downwards
                 event.SetEventObject( this );
 
-                wxWindow *page = m_pages[m_nSelection];
+                wxWindow *page = m_pages[m_selection];
                 if ( !page->HandleWindowEvent( event ) )
                 {
                     page->SetFocus();
@@ -508,10 +506,10 @@
     if (nOldSel == nSel)
         return;
 
-    if ( nOldSel != -1 )
+    if ( nOldSel != wxNOT_FOUND )
         m_pages[nOldSel]->Show( false );
 
-    if ( nSel != -1 )
+    if ( nSel != wxNOT_FOUND )
     {
         wxNotebookPage *pPage = m_pages[nSel];
         if ( IsShownOnScreen() )
@@ -530,8 +528,8 @@
         }
     }
 
-    m_nSelection = nSel;
-    m_peer->SetValue( m_nSelection + 1 ) ;
+    m_selection = nSel;
+    m_peer->SetValue( m_selection + 1 ) ;
 }
 
 bool wxNotebook::OSXHandleClicked( double WXUNUSED(timestampsec) )
@@ -539,11 +537,11 @@
     bool status = false ;
 
     SInt32 newSel = m_peer->GetValue() - 1 ;
-    if ( newSel != m_nSelection )
+    if ( newSel != m_selection )
     {
         wxBookCtrlEvent changing(
             wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, m_windowId,
-            newSel , m_nSelection );
+            newSel , m_selection );
         changing.SetEventObject( this );
         HandleWindowEvent( changing );
 
@@ -551,13 +549,13 @@
         {
             wxBookCtrlEvent event(
                 wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, m_windowId,
-                newSel, m_nSelection );
+                newSel, m_selection );
             event.SetEventObject( this );
             HandleWindowEvent( event );
         }
         else
         {
-            m_peer->SetValue( m_nSelection + 1 ) ;
+            m_peer->SetValue( m_selection + 1 ) ;
         }
 
         status = true ;
Index: src/univ/notebook.cpp
===================================================================
--- src/univ/notebook.cpp	(revision 65925)
+++ src/univ/notebook.cpp	(working copy)
@@ -71,12 +71,6 @@
 #endif
 
 // ----------------------------------------------------------------------------
-// constants
-// ----------------------------------------------------------------------------
-
-static const size_t INVALID_PAGE = (size_t)-1;
-
-// ----------------------------------------------------------------------------
 // private classes
 // ----------------------------------------------------------------------------
 
@@ -119,8 +113,6 @@
 
 void wxNotebook::Init()
 {
-    m_sel = INVALID_PAGE;
-
     m_heightTab =
     m_widthMax = 0;
 
@@ -233,10 +225,10 @@
 {
     wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("invalid notebook page") );
 
-    if ( (size_t)nPage == m_sel )
+    if ( (size_t)nPage == m_selection )
     {
         // don't do anything if there is nothing to do
-        return m_sel;
+        return m_selection;
     }
 
     if ( flags & SetSelection_SendEvent )
@@ -244,51 +236,51 @@
         if ( !SendPageChangingEvent(nPage) )
         {
             // program doesn't allow the page change
-            return m_sel;
+            return m_selection;
         }
     }
 
-    // we need to change m_sel first, before calling RefreshTab() below as
+    // we need to change m_selection first, before calling RefreshTab() below as
     // otherwise the previously selected tab wouldn't be redrawn properly under
     // wxGTK which calls Refresh() immediately and not during the next event
     // loop iteration as wxMSW does and as it should
-    size_t selOld = m_sel;
+    size_t selOld = m_selection;
 
-    m_sel = nPage;
+    m_selection = nPage;
 
-    if ( selOld != INVALID_PAGE )
+    if ( selOld != wxNOT_FOUND )
     {
         RefreshTab(selOld, true /* this tab was selected */);
 
         m_pages[selOld]->Hide();
     }
 
-    if ( m_sel != INVALID_PAGE ) // this is impossible - but test nevertheless
+    if ( m_selection != wxNOT_FOUND ) // this is impossible - but test nevertheless
     {
         if ( HasSpinBtn() )
         {
             // keep it in sync
-            m_spinbtn->SetValue(m_sel);
+            m_spinbtn->SetValue(m_selection);
         }
 
-        if ( m_sel < m_firstVisible )
+        if ( m_selection < m_firstVisible )
         {
             // selection is to the left of visible part of tabs
-            ScrollTo(m_sel);
+            ScrollTo(m_selection);
         }
-        else if ( m_sel > m_lastFullyVisible )
+        else if ( m_selection > m_lastFullyVisible )
         {
             // selection is to the right of visible part of tabs
-            ScrollLastTo(m_sel);
+            ScrollLastTo(m_selection);
         }
         else // we already see this tab
         {
             // no need to scroll
-            RefreshTab(m_sel);
+            RefreshTab(m_selection);
         }
 
-        m_pages[m_sel]->SetSize(GetPageRect());
-        m_pages[m_sel]->Show();
+        m_pages[m_selection]->SetSize(GetPageRect());
+        m_pages[m_selection]->Show();
     }
 
     if ( flags & SetSelection_SendEvent )
@@ -376,9 +368,6 @@
     m_accels.Clear();
     m_widths.Clear();
 
-    // it is not valid any longer
-    m_sel = INVALID_PAGE;
-
     // spin button is not needed any more
     UpdateSpinBtn();
 
@@ -411,23 +400,23 @@
     size_t count = GetPageCount();
     if ( count )
     {
-        if ( m_sel == (size_t)nPage )
+        if ( m_selection == (size_t)nPage )
         {
             // avoid sending event to this page which doesn't exist in the
             // notebook any more
-            m_sel = INVALID_PAGE;
+            m_selection = wxNOT_FOUND;
 
             SetSelection(nPage == count ? nPage - 1 : nPage);
         }
-        else if ( m_sel > (size_t)nPage )
+        else if ( m_selection > (size_t)nPage )
         {
             // no need to change selection, just adjust the index
-            m_sel--;
+            m_selection--;
         }
     }
     else // no more tabs left
     {
-        m_sel = INVALID_PAGE;
+        m_selection = wxNOT_FOUND;
     }
 
     // have to refresh everything
@@ -442,9 +431,9 @@
 
 void wxNotebook::RefreshCurrent()
 {
-    if ( m_sel != INVALID_PAGE )
+    if ( m_selection != wxNOT_FOUND )
     {
-        RefreshTab(m_sel);
+        RefreshTab(m_selection);
     }
 }
 
@@ -453,7 +442,7 @@
     wxCHECK_RET( IS_VALID_PAGE(page), wxT("invalid notebook page") );
 
     wxRect rect = GetTabRect(page);
-    if ( forceSelected || ((size_t)page == m_sel) )
+    if ( forceSelected || ((size_t)page == m_selection) )
     {
         const wxSize indent = GetRenderer()->GetTabIndent();
         rect.Inflate(indent.x, indent.y);
@@ -496,7 +485,7 @@
     }
 
     int flags = 0;
-    if ( n == m_sel )
+    if ( n == m_selection )
     {
         flags |= wxCONTROL_SELECTED;
 
@@ -560,7 +549,7 @@
     {
         GetTabSize(n, &rect.width, &rect.height);
 
-        if ( n == m_sel )
+        if ( n == m_selection )
         {
             // don't redraw it now as this tab has to be drawn over the other
             // ones as it takes more place and spills over to them
@@ -591,7 +580,7 @@
     // now redraw the selected tab
     if ( rectSel.width )
     {
-        DoDrawTab(dc, rectSel, m_sel);
+        DoDrawTab(dc, rectSel, m_selection);
     }
 
     dc.DestroyClippingRegion();
@@ -908,27 +897,27 @@
 
         UpdateSpinBtn();
 
-        if ( m_sel != INVALID_PAGE )
+        if ( m_selection != wxNOT_FOUND )
         {
             // resize the currently shown page
             wxRect rectPage = GetPageRect();
 
-            m_pages[m_sel]->SetSize(rectPage);
+            m_pages[m_selection]->SetSize(rectPage);
 
             // also scroll it into view if needed (note that m_lastVisible
             // was updated by the call to UpdateSpinBtn() above, this is why it
             // is needed here)
             if ( HasSpinBtn() )
             {
-                if ( m_sel < m_firstVisible )
+                if ( m_selection < m_firstVisible )
                 {
                     // selection is to the left of visible part of tabs
-                    ScrollTo(m_sel);
+                    ScrollTo(m_selection);
                 }
-                else if ( m_sel > m_lastFullyVisible )
+                else if ( m_selection > m_lastFullyVisible )
                 {
                     // selection is to the right of visible part of tabs
-                    ScrollLastTo(m_sel);
+                    ScrollLastTo(m_selection);
                 }
             }
         }
@@ -1133,7 +1122,7 @@
             m_spinbtn = new wxNotebookSpinBtn(this);
 
             // set the correct value to keep it in sync
-            m_spinbtn->SetValue(m_sel);
+            m_spinbtn->SetValue(m_selection);
         }
 
         // position it correctly

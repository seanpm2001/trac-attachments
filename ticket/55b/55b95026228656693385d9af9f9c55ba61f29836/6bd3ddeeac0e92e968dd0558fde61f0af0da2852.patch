Index: include/wx/dataview.h
===================================================================
--- include/wx/dataview.h	(revision 68170)
+++ include/wx/dataview.h	(working copy)
@@ -767,7 +767,8 @@
 #if wxUSE_DRAG_AND_DROP
         , m_dataObject(NULL),
         m_dataBuffer(NULL),
-        m_dataSize(0)
+        m_dataSize(0),
+        m_drag_effect(-1)
 #endif
         { }
 
@@ -785,7 +786,8 @@
         , m_dataObject(event.m_dataObject),
         m_dataFormat(event.m_dataFormat),
         m_dataBuffer(event.m_dataBuffer),
-        m_dataSize(event.m_dataSize)
+        m_dataSize(event.m_dataSize),
+        m_drag_effect(event.m_drag_effect)
 #endif
         { }
 
@@ -816,6 +818,10 @@
 
 
 #if wxUSE_DRAG_AND_DROP
+    // For both drag and drop operations
+    void SetDragEffect(int effect) { m_drag_effect = effect; }
+    int GetDragEffect() const { return m_drag_effect; }
+
     // For drag operations
     void SetDataObject( wxDataObject *obj ) { m_dataObject = obj; }
     wxDataObject *GetDataObject() const { return m_dataObject; }
@@ -847,6 +853,7 @@
     wxDataFormat        m_dataFormat;
     void*               m_dataBuffer;
     size_t              m_dataSize;
+    int                 m_drag_effect;
 #endif // wxUSE_DRAG_AND_DROP
 
 private:
@@ -875,6 +882,7 @@
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_COMMAND_DATAVIEW_CACHE_HINT, wxDataViewEvent );
 
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG, wxDataViewEvent );
+wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_COMMAND_DATAVIEW_ITEM_END_DRAG, wxDataViewEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE, wxDataViewEvent );
 wxDECLARE_EXPORTED_EVENT( WXDLLIMPEXP_ADV, wxEVT_COMMAND_DATAVIEW_ITEM_DROP, wxDataViewEvent );
 
@@ -907,6 +915,7 @@
 #define EVT_DATAVIEW_CACHE_HINT(id, fn) wx__DECLARE_DATAVIEWEVT(CACHE_HINT, id, fn)
 
 #define EVT_DATAVIEW_ITEM_BEGIN_DRAG(id, fn) wx__DECLARE_DATAVIEWEVT(ITEM_BEGIN_DRAG, id, fn)
+#define EVT_DATAVIEW_ITEM_END_DRAG(id, fn) wx__DECLARE_DATAVIEWEVT(ITEM_END_DRAG, id, fn)
 #define EVT_DATAVIEW_ITEM_DROP_POSSIBLE(id, fn) wx__DECLARE_DATAVIEWEVT(ITEM_DROP_POSSIBLE, id, fn)
 #define EVT_DATAVIEW_ITEM_DROP(id, fn) wx__DECLARE_DATAVIEWEVT(ITEM_DROP, id, fn)
 
Index: interface/wx/dataview.h
===================================================================
--- interface/wx/dataview.h	(revision 68170)
+++ interface/wx/dataview.h	(working copy)
@@ -79,10 +79,10 @@
     @endcode
 
     A potentially better way to avoid memory leaks is to use wxObjectDataPtr
-    
+
     @code
         wxObjectDataPtr<MyMusicModel> musicModel;
-        
+
         wxDataViewCtrl *musicCtrl = new wxDataViewCtrl( this, wxID_ANY );
         musicModel = new MyMusicModel;
         m_musicCtrl->AssociateModel( musicModel.get() );
@@ -184,7 +184,7 @@
             @true if this item should be enabled, @false otherwise.
 
         @note Currently disabling items is fully implemented only for the
-              native control implementation in wxOSX/Cocoa and wxGTK. 
+              native control implementation in wxOSX/Cocoa and wxGTK.
               This feature is only partially supported in the generic
               version (used by wxMSW) and not supported by the wxOSX/Carbon
               implementation.
@@ -507,7 +507,7 @@
     have other reason to use a virtual control.
 
     @see wxDataViewListModel for the API.
-    
+
     @library{wxadv}
     @category{dvc}
 */
@@ -715,6 +715,8 @@
            Process a @c wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED event.
     @event{EVT_DATAVIEW_ITEM_BEGIN_DRAG(id, func)}
            Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG event.
+    @event{EVT_DATAVIEW_ITEM_END_DRAG(id, func)}
+           Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_END_DRAG event.
     @event{EVT_DATAVIEW_ITEM_DROP_POSSIBLE(id, func)}
            Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE event.
     @event{EVT_DATAVIEW_ITEM_DROP(id, func)}
@@ -1095,12 +1097,12 @@
     */
     virtual void SetSelections(const wxDataViewItemArray& sel);
 
-    /** 
+    /**
         Programmatically starts editing the given item on the given column.
         Currently not implemented on wxOSX Carbon.
         @since 2.9.2
     */
-    
+
     virtual void StartEditor(const wxDataViewItem & item, unsigned int column);
 
     /**
@@ -1532,7 +1534,7 @@
         Returns the choice referred to by index.
     */
     wxString GetChoice(size_t index) const;
-    
+
     /**
         Returns all choices.
     */
@@ -2274,7 +2276,7 @@
         Returns true if item is a container.
     */
     bool IsContainer( const wxDataViewItem& item );
-    
+
     /**
         Calls the same method from wxDataViewTreeStore but uses
         an index position in the image list instead of a wxIcon.
@@ -2668,6 +2670,8 @@
            Process a @c wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED event.
     @event{EVT_DATAVIEW_ITEM_BEGIN_DRAG(id, func)}
            Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG event.
+    @event{EVT_DATAVIEW_ITEM_END_DRAG(id, func)}
+           Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_END_DRAG event.
     @event{EVT_DATAVIEW_ITEM_DROP_POSSIBLE(id, func)}
            Process a @c wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE event.
     @event{EVT_DATAVIEW_ITEM_DROP(id, func)}
Index: src/common/datavcmn.cpp
===================================================================
--- src/common/datavcmn.cpp	(revision 68170)
+++ src/common/datavcmn.cpp	(working copy)
@@ -1402,6 +1402,7 @@
 wxDEFINE_EVENT( wxEVT_COMMAND_DATAVIEW_CACHE_HINT, wxDataViewEvent );
 
 wxDEFINE_EVENT( wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG, wxDataViewEvent );
+wxDEFINE_EVENT( wxEVT_COMMAND_DATAVIEW_ITEM_END_DRAG, wxDataViewEvent );
 wxDEFINE_EVENT( wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE, wxDataViewEvent );
 wxDEFINE_EVENT( wxEVT_COMMAND_DATAVIEW_ITEM_DROP, wxDataViewEvent );
 
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 68170)
+++ src/generic/datavgen.cpp	(working copy)
@@ -596,6 +596,7 @@
     wxDataFormat                m_dropFormat;
     bool                        m_dropHint;
     unsigned int                m_dropHintLine;
+    int                         m_last_drag_effect;
 #endif // wxUSE_DRAG_AND_DROP
 
     // for double click logic
@@ -1327,6 +1328,7 @@
 
 #if wxUSE_DRAG_AND_DROP
     m_dragCount = 0;
+    m_last_drag_effect = -1;
     m_dragStart = wxPoint(0,0);
 
     m_dragEnabled = false;
@@ -1420,6 +1422,8 @@
     event.SetItem( item );
     event.SetModel( model );
     event.SetDataFormat( format );
+    event.SetDragEffect( def );
+    m_last_drag_effect = def;
     if (!m_owner->HandleWindowEvent( event ))
     {
         RemoveDropHint();
@@ -1439,7 +1443,7 @@
     m_dropHintLine = row;
     RefreshRow( row );
 
-    return def;
+    return (wxDragResult)event.GetDragEffect();
 }
 
 bool wxDataViewMainWindow::OnDrop( wxDataFormat format, wxCoord x, wxCoord y )
@@ -1463,6 +1467,7 @@
     event.SetItem( item );
     event.SetModel( model );
     event.SetDataFormat( format );
+    event.SetDragEffect( m_last_drag_effect );
     if (!m_owner->HandleWindowEvent( event ))
         return false;
 
@@ -1496,6 +1501,7 @@
     event.SetDataFormat( format );
     event.SetDataSize( obj->GetSize() );
     event.SetDataBuffer( obj->GetData() );
+    event.SetDragEffect( m_last_drag_effect );
     if (!m_owner->HandleWindowEvent( event ))
         return wxDragNone;
 
@@ -3614,8 +3620,11 @@
 
             wxDataViewDropSource drag( this, drag_item_row );
             drag.SetData( *obj );
-            /* wxDragResult res = */ drag.DoDragDrop();
+            /* wxDragResult res = */ drag.DoDragDrop((event.GetDragEffect() == -1 ? wxDrag_DefaultMove : event.GetDragEffect()));
             delete obj;
+            // Notify about drag end
+            event.SetEventType( wxEVT_COMMAND_DATAVIEW_ITEM_END_DRAG );
+            m_owner->HandleWindowEvent( event );
         }
         return;
     }

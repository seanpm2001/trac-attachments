Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 1347)
+++ src/common/sizer.cpp	(working copy)
@@ -1618,6 +1618,8 @@
 
     AdjustForFlexDirection();
 
+    AdjustForMinimumSize(nrows, ncols);
+
     m_calculatedMinSize = wxSize(SumArraySizes(m_colWidths, m_hgap),
                                  SumArraySizes(m_rowHeights, m_vgap));
 }
@@ -1829,6 +1831,57 @@
     }
 }
 
+void wxFlexGridSizer::AdjustForMinimumSize( int nrows, int ncols )
+{
+    size_t idx;
+    int unit_size;
+    
+    // Adjust minimum height for growable rows
+    unit_size = 0;
+    for (idx = 0; idx < m_growableRows.GetCount(); idx++)
+    {
+        if (m_growableRows[idx] >= nrows)
+            continue;
+        if (m_rowHeights[ m_growableRows[idx] ] <= 0)
+            continue;
+        unit_size = wxMax(unit_size, m_rowHeights[ m_growableRows[idx] ]);
+    }
+    if (unit_size > 0)
+    {
+        for (idx = 0; idx < m_growableRows.GetCount(); idx++)
+        {
+            if (m_growableRows[idx] >= nrows)
+                continue;
+            if (m_rowHeights[ m_growableRows[idx] ] <= 0)
+                continue;
+            if (m_rowHeights[ m_growableRows[idx] ] < m_growableRowsProportions[idx] * unit_size)
+                m_rowHeights[ m_growableRows[idx] ] = m_growableRowsProportions[idx] * unit_size;
+        }
+    }
+    
+    // Adjust minimum width for growable columns
+    unit_size = 0;
+    for (idx = 0; idx < m_growableCols.GetCount(); idx++)
+    {
+        if (m_growableCols[idx] >= ncols)
+            continue;
+        if (m_colWidths[ m_growableCols[idx] ] <= 0)
+            continue;
+        unit_size = wxMax(unit_size, m_colWidths[ m_growableCols[idx] ]);
+    }
+    if (unit_size > 0)
+    {
+        for (idx = 0; idx < m_growableCols.GetCount(); idx++)
+        {
+            if (m_growableCols[idx] >= ncols)
+                continue;
+            if (m_colWidths[ m_growableCols[idx] ] <= 0)
+                continue;
+            if (m_colWidths[ m_growableCols[idx] ] < m_growableColsProportions[idx] * unit_size)
+                m_colWidths[ m_growableCols[idx] ] = m_growableColsProportions[idx] * unit_size;
+        }
+    }
+}
 
 void wxFlexGridSizer::AddGrowableRow( size_t idx, int proportion )
 {
Index: src/common/gbsizer.cpp
===================================================================
--- src/common/gbsizer.cpp	(revision 1347)
+++ src/common/gbsizer.cpp	(working copy)
@@ -227,6 +227,8 @@
     item->SetGBSizer(this);
     if ( item->GetWindow() )
         item->GetWindow()->SetContainingSizer( this );
+    if ( item->GetSizer() )
+        item->GetSizer()->SetContainingWindow( m_containingWindow );
 
     return item;
 }
@@ -479,14 +481,17 @@
     AdjustForOverflow();
     AdjustForFlexDirection();
 
+    m_cols = m_colWidths.GetCount();
+    m_rows = m_rowHeights.GetCount();
+
+    AdjustForMinimumSize(m_rows, m_cols);
+
     // Now traverse the heights and widths arrays calcing the totals, including gaps
     int width = 0;
-    m_cols = m_colWidths.GetCount();
     for (idx=0; idx < m_cols; idx++)
         width += m_colWidths[idx] + ( idx == m_cols-1 ? 0 : m_hgap );
 
     int height = 0;
-    m_rows = m_rowHeights.GetCount();
     for (idx=0; idx < m_rows; idx++)
         height += m_rowHeights[idx] + ( idx == m_rows-1 ? 0 : m_vgap );
 
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 1347)
+++ include/wx/sizer.h	(working copy)
@@ -778,6 +778,7 @@
 protected:
     void AdjustForFlexDirection();
     void AdjustForGrowables(const wxSize& sz);
+    void AdjustForMinimumSize(int nrows, int ncols);
     void FindWidthsAndHeights(int nrows, int ncols);
 
     // the heights/widths of all rows/columns

 	  	 

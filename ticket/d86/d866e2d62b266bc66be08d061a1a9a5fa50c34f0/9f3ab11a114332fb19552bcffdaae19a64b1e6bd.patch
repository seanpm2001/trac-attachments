67a68
> 	void OnSize(wxSizeEvent &event);
69a71
>     void OnToggle(wxCommandEvent& event);
71a74,84
> 	wxScrolledWindow *m_pTopWindow;
> 	wxPanel *m_pTopPanel;
> 
> 	enum ePanelOrWindow
> 	{	ePanel,
> 		eWindow
> 	} m_curMode;
> 
> 	void MakeWindows(void);
> 	void DeleteWindows(void);
> 
89c102,104
<     Minimal_About = wxID_ABOUT
---
>     Minimal_About = wxID_ABOUT,
> 
> 	Minimal_ToggleMode = 101
99a115
> 	EVT_SIZE(MyFrame::OnSize)
101a118
>     EVT_MENU(Minimal_ToggleMode,  MyFrame::OnToggle)
141c158,161
<        : wxFrame(NULL, wxID_ANY, title)
---
>        : wxFrame(NULL, wxID_ANY, title),
> 	   	 m_pTopPanel(NULL),
> 		 m_pTopWindow(NULL)
> 
153a174
> 	fileMenu->Append(Minimal_ToggleMode, _T("&Toggle Mode"), _T("Toggle outer window between wxScrolledWindow and wxPanel"));
169a191,194
> 
> 	m_curMode = eWindow;
> 	
> 	MakeWindows();
171a197,276
> void MyFrame::MakeWindows(void)
> {
> 	// Create panel--sizer--panel--sizer structure
> 	wxWindow *pTopPanel;
> 	wxBoxSizer *pTopSizer;
> 	wxStaticText *pLabel;
> 	wxString topLabel;
> 	wxString staticLabel;
> 	wxSize clientSize;
> 
> 	clientSize = GetClientSize();
> 
> 	if(m_curMode == eWindow)
> 	{
> 		m_pTopWindow = new wxScrolledWindow(this,-1,wxDefaultPosition,clientSize);
> 		pTopPanel = (wxWindow *)m_pTopWindow;
> 		topLabel = "Outer Panel (wxScrolledWindow)";
> 
> 		m_pTopWindow->SetScrollRate(20,20);
> 	}
> 	else
> 	{
> 		m_pTopPanel = new wxPanel(this,-1,wxDefaultPosition,clientSize);
> 		pTopPanel = (wxWindow *)m_pTopPanel;
> 		topLabel = "Outer Panel (wxPanel)";
> 	}
> 
> 	pTopSizer = new wxBoxSizer(wxVERTICAL);
> 
> 	pTopSizer->Add(new wxStaticText(pTopPanel,-1,topLabel),0);
> 
> 	for(int i=1;i<5;i++)
> 	{
> 		wxPanel *pSubPanel;
> 		wxBoxSizer *pSubSizer;
> 
> 		pSubPanel = new wxPanel;
> 		
> 		pSubPanel->Create(pTopPanel,-1,wxDefaultPosition,wxDefaultSize,wxRAISED_BORDER);
> 
> 		pSubSizer = new wxBoxSizer(wxVERTICAL);
> 
> 		staticLabel = "Inner Panel ";
> 		staticLabel << i << "-1";
> 		pLabel = new wxStaticText(pSubPanel,-1,staticLabel);
> 		pLabel->SetSize(-1,-1,400,-1);
> 		pSubSizer->Add(pLabel,1,wxEXPAND);
> 
> 		staticLabel = "Inner Panel ";
> 		staticLabel << i << "-2";
> 		pLabel = new wxStaticText(pSubPanel,-1,staticLabel);
> 		pLabel->SetSize(-1,-1,400,-1);
> 		pSubSizer->Add(pLabel,1,wxEXPAND);
> 
> 		pSubPanel->SetSizer(pSubSizer);
> 		pSubSizer->SetMinSize(380,-1);
> 		pSubSizer->SetSizeHints(pSubPanel);
> 
> 		pTopSizer->Add(pSubPanel,0);
> 	}
> 
> 	pTopPanel->SetSizer(pTopSizer);
> 	pTopSizer->SetSizeHints(pTopPanel);
> 	if(m_curMode == eWindow)
> 		pTopSizer->FitInside(pTopPanel);
> }
> 
> void MyFrame::DeleteWindows(void)
> {
> 	if(m_pTopPanel)
> 	{
> 		delete m_pTopPanel;
> 		m_pTopPanel = NULL;
> 	}
> 	if(m_pTopWindow)
> 	{
> 		delete m_pTopWindow;
> 		m_pTopWindow = NULL;
> 	}
> }
187a293,320
> }
> 
> void MyFrame::OnSize(wxSizeEvent &event)
> {
> 	wxSize clientSize;
> 
> 	clientSize = GetClientSize();
> 
> 	if(m_pTopPanel)
> 	{
> 		m_pTopPanel->SetSize(clientSize);
> 	}
> 	else if(m_pTopWindow)
> 	{
> 		m_pTopWindow->SetSize(clientSize);
> 	}
> }
> 
> void MyFrame::OnToggle(wxCommandEvent& WXUNUSED(event))
> {
> 	DeleteWindows();
> 
> 	if(m_curMode == eWindow)
> 		m_curMode = ePanel;
> 	else
> 		m_curMode = eWindow;
> 
> 	MakeWindows();

 	  	 

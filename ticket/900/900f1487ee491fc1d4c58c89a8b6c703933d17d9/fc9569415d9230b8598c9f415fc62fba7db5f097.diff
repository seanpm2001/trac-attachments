diff --git a/src/unix/fswatcher_inotify.cpp b/src/unix/fswatcher_inotify.cpp
index dfee797..45f722f 100644
--- a/src/unix/fswatcher_inotify.cpp
+++ b/src/unix/fswatcher_inotify.cpp
@@ -40,7 +40,7 @@ WX_DECLARE_HASH_MAP(int, inotify_event*, wxIntegerHash, wxIntegerEqual,
 /**
  * Helper class encapsulating inotify mechanism
  */
-class wxFSWatcherImplUnix : public wxFSWatcherImpl
+class wxFSWatcherImplUnix : public wxEvtHandler, public wxFSWatcherImpl
 {
 public:
     wxFSWatcherImplUnix(wxFileSystemWatcherBase* watcher) :
@@ -212,6 +212,22 @@ protected:
         return inotify_rm_watch(m_ifd, watch->GetWatchDescriptor());
     }
 
+    void RemoveStaleWatchDescriptor(const inotify_event& inevt)
+    {
+        // We were called-after when an IN_IGNORED event was received.
+        // It is now safe to remove it from the stale descriptors, as we
+        // really shouldn't get any more events for it.
+        // However if we're here because a dir that we're still watching
+        // has just been deleted, its wd won't be on this list
+        const int pos = m_staleDescriptors.Index(inevt.wd);
+        if ( pos != wxNOT_FOUND )
+        {
+            m_staleDescriptors.RemoveAt(static_cast<size_t>(pos));
+            wxLogTrace(wxTRACE_FSWATCHER,
+                   "Removed wd %i from the stale-wd cache", inevt.wd);
+        }
+    }
+
     void ProcessNativeEvent(const inotify_event& inevt)
     {
         wxLogTrace(wxTRACE_FSWATCHER, InotifyEventToString(inevt));
@@ -220,17 +236,11 @@ protected:
         // will be already removed from our list at that time
         if (inevt.mask & IN_IGNORED)
         {
-            // It is now safe to remove it from the stale descriptors too, we
-            // won't get any more events for it.
-            // However if we're here because a dir that we're still watching
-            // has just been deleted, its wd won't be on this list
-            const int pos = m_staleDescriptors.Index(inevt.wd);
-            if ( pos != wxNOT_FOUND )
-            {
-                m_staleDescriptors.RemoveAt(static_cast<size_t>(pos));
-                wxLogTrace(wxTRACE_FSWATCHER,
-                       "Removed wd %i from the stale-wd cache", inevt.wd);
-            }
+            // Though we shouldn't get any more events for this watch,
+            // in practice there are rare late-arrivals. So don't remove the
+            // stale descriptors entry instantly; create a delay with call-after
+            CallAfter(&wxFSWatcherImplUnix::RemoveStaleWatchDescriptor, inevt);
+
             return;
         }
 

Index: docs/latex/wx/config.tex
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/docs/latex/wx/config.tex,v
retrieving revision 1.33
diff -u -r1.33 config.tex
--- docs/latex/wx/config.tex	2003/04/28 10:37:08	1.33
+++ docs/latex/wx/config.tex	2004/02/22 23:54:41
@@ -446,7 +446,9 @@
 \func{bool}{Flush}{\param{bool }{bCurrentOnly = false}}
 
 permanently writes all changes (otherwise, they're only written from object's
-destructor)
+destructor).  wxFileConfig also has FlushToStream(wxOutputStream &output, 
+bool bCurrentOnly = false), which allows flushing a wxFileConfig created
+with wxFileConfig's wxInputStream constructor.
 
 \membersection{wxConfigBase::Get}\label{wxconfigbaseget}
 
Index: include/wx/fileconf.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/fileconf.h,v
retrieving revision 1.47
diff -u -r1.47 fileconf.h
--- include/wx/fileconf.h	2003/12/18 14:54:25	1.47
+++ include/wx/fileconf.h	2004/02/22 23:54:42
@@ -158,6 +158,8 @@
 
   virtual bool Flush(bool bCurrentOnly = FALSE);
 
+  bool FlushToStream(wxOutputStream &outputstream, bool bCurrentOnly = FALSE);
+
   virtual bool RenameEntry(const wxString& oldName, const wxString& newName);
   virtual bool RenameGroup(const wxString& oldName, const wxString& newName);
 
Index: src/common/fileconf.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/fileconf.cpp,v
retrieving revision 1.110
diff -u -r1.110 fileconf.cpp
--- src/common/fileconf.cpp	2004/02/15 12:55:35	1.110
+++ src/common/fileconf.cpp	2004/02/22 23:54:48
@@ -960,67 +960,101 @@
   return Write(key, wxString::Format(_T("%ld"), lValue));
 }
 
-bool wxFileConfig::Flush(bool /* bCurrentOnly */)
+bool wxFileConfig::Flush(bool bCurrentOnly /* = FALSE */)
 {
-  if ( LineListIsEmpty() || !m_pRootGroup->IsDirty() || !m_strLocalFile )
-    return TRUE;
+    if ( LineListIsEmpty() || !m_pRootGroup->IsDirty() || !m_strLocalFile )
+        return TRUE;
 
+    wxTempFile tempfile(m_strLocalFile);
+
+    if ( !tempfile.IsOpened() )
+    {
+        wxLogError(_("can't open user configuration file."));
+        return FALSE;
+    }
+    else
+    {
+        wxMemoryOutputStream outputstream;
+
+        bool ret = false;
+
+        if(FlushToStream(outputstream, bCurrentOnly))
+        {
+            wxString filecontents;
+
+            size_t streamsize = outputstream.GetSize();
+            char* bufptr = filecontents.GetWriteBuf(streamsize);
+            outputstream.CopyTo(bufptr, streamsize);
+            filecontents.UngetWriteBuf();
+
+            tempfile.Write(filecontents, wxConvUTF8);
+
+            ret = tempfile.Commit();
+        }
+
+        return ret;
+    }
+}
+
+bool wxFileConfig::FlushToStream(wxOutputStream &outputstream, bool /* bCurrentOnly */)
+{
+
 #ifdef __UNIX__
-  // set the umask if needed
-  mode_t umaskOld = 0;
-  if ( m_umask != -1 )
-  {
-      umaskOld = umask((mode_t)m_umask);
-  }
+    // set the umask if needed
+    mode_t umaskOld = 0;
+    if ( m_umask != -1 )
+    {
+        umaskOld = umask((mode_t)m_umask);
+    }
 #endif // __UNIX__
+
 
-  wxTempFile file(m_strLocalFile);
+    bool ret = false;
 
-  if ( !file.IsOpened() )
-  {
-    wxLogError(_("can't open user configuration file."));
-    return FALSE;
-  }
-
-  // write all strings to file
-  for ( wxFileConfigLineList *p = m_linesHead; p != NULL; p = p->Next() )
-  {
-    wxString line = p->Text();
-    line += wxTextFile::GetEOL();
-    if ( !file.Write(line, m_conv) )
+
+    // write all strings to the output stream
+    for ( wxFileConfigLineList *p = m_linesHead; p != NULL; p = p->Next() )
     {
-      wxLogError(_("can't write user configuration file."));
-      return FALSE;
+        wxString line = p->Text();
+        line += wxTextFile::GetEOL();
+
+        outputstream.Write(line, line.Len());
+
+        ret = outputstream.IsOk();
+        if(!ret)
+        {
+            wxLogError(_("can't write user configuration file."));
+            return FALSE;
+        }
     }
-  }
 
-  bool ret = file.Commit();
 
+
 #if defined(__WXMAC__)
-  if ( ret )
-  {
-  	FSSpec spec ;
-
-  	wxMacFilename2FSSpec( m_strLocalFile , &spec ) ;
-  	FInfo finfo ;
-  	if ( FSpGetFInfo( &spec , &finfo ) == noErr )
-  	{
-  		finfo.fdType = 'TEXT' ;
-  		finfo.fdCreator = 'ttxt' ;
-  		FSpSetFInfo( &spec , &finfo ) ;
-  	}
-  }
+    if ( ret )
+    {
+        FSSpec spec ;
+
+        wxMacFilename2FSSpec( m_strLocalFile , &spec ) ;
+        FInfo finfo ;
+        if ( FSpGetFInfo( &spec , &finfo ) == noErr )
+        {
+            finfo.fdType = 'TEXT' ;
+            finfo.fdCreator = 'ttxt' ;
+            FSpSetFInfo( &spec , &finfo ) ;
+        }
+    }
 #endif // __WXMAC__
 
 #ifdef __UNIX__
-  // restore the old umask if we changed it
-  if ( m_umask != -1 )
-  {
-      (void)umask(umaskOld);
-  }
+    // restore the old umask if we changed it
+    if ( m_umask != -1 )
+    {
+        (void)umask(umaskOld);
+    }
 #endif // __UNIX__
 
-  return ret;
+    return ret;
 }
 
 // ----------------------------------------------------------------------------

 	  	 

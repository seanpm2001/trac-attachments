Index: include/wx/generic/progdlgg.h
===================================================================
--- include/wx/generic/progdlgg.h	(revision 69994)
+++ include/wx/generic/progdlgg.h	(working copy)
@@ -73,6 +73,15 @@
         Dismissed            // was closed by user after finishing
     };
 
+    // return the sizer holding the gauge and texts
+    wxSizer* GetProgressSizer() const { return m_sizerProgress; }
+
+    // return the button sizer
+    wxSizer* GetButtonSizer() const { return m_sizerButton; }
+
+    // called to disable the other windows while this dialog is shown
+    void DisableOtherWindows();
+
 protected:
     // Update just the m_maximum field, this is used by public SetRange() but,
     // unlike it, doesn't update the controls state. This makes it useful for
@@ -114,9 +123,6 @@
     // callback to disable "hard" window closing
     void OnClose(wxCloseEvent&);
 
-    // called to disable the other windows while this dialog is shown
-    void DisableOtherWindows();
-
     // must be called to reenable the other windows temporarily disabled while
     // the dialog was shown
     void ReenableOtherWindows();
@@ -124,7 +130,6 @@
     // return the top level parent window of this dialog (may be NULL)
     wxWindow *GetTopParent() const { return m_parentTop; }
 
-
     // continue processing or not (return value for Update())
     State m_state;
 
@@ -144,6 +149,11 @@
     // time between the moment the dialog was closed/cancelled and resume
     unsigned long m_break;
 
+    // create the sizer holding the gauge and texts
+    virtual wxSizer* CreateProgressSizer();
+
+    // create the button sizer
+    virtual wxSizer* CreateButtonSizer(long flags);
 private:
     // update the label to show the given time (in seconds)
     static void SetTimeLabel(unsigned long val, wxStaticText *label);
@@ -183,6 +193,12 @@
     // parent top level window (may be NULL)
     wxWindow *m_parentTop;
 
+    // sizer holding the gauge and texts
+    wxSizer* m_sizerProgress;
+
+    // button sizer
+    wxSizer* m_sizerButton;
+
     // Progress dialog styles: this is not the same as m_windowStyle because
     // wxPD_XXX constants clash with the existing TLW styles so to be sure we
     // don't have any conflicts we just use a separate variable for storing
Index: src/generic/progdlgg.cpp
===================================================================
--- src/generic/progdlgg.cpp	(revision 69994)
+++ src/generic/progdlgg.cpp	(working copy)
@@ -49,7 +49,8 @@
 // ---------------------------------------------------------------------------
 
 /* Macro for avoiding #ifdefs when value have to be different depending on size of
-   device we display on - take it from something like wxDesktopPolicy in the future
+   device we display on - take it from something like wxDesktopPolicy in the future.
+   See border calculations in wxStdDialogButtonSizer::Realize().
  */
 
 #if defined(__SMARTPHONE__)
@@ -126,6 +127,11 @@
 
     m_winDisabler = NULL;
     m_tempEventLoop = NULL;
+
+    m_sizerProgress = NULL;
+    m_sizerButton  = NULL;
+
+    SetWindowStyle(wxDEFAULT_DIALOG_STYLE);
 }
 
 wxGenericProgressDialog::wxGenericProgressDialog()
@@ -144,6 +150,23 @@
     Init();
 
     Create( title, message, maximum, parent, style );
+
+    Centre(wxCENTER_FRAME | wxBOTH);
+
+    DisableOtherWindows();
+
+    Show();
+    Enable();
+
+    // this one can be initialized even if the others are unknown for now
+    //
+    // NB: do it after calling Layout() to keep the labels correctly aligned
+    if ( m_elapsed )
+    {
+        SetTimeLabel(0, m_elapsed);
+    }
+
+    Update();
 }
 
 bool wxGenericProgressDialog::Create( const wxString& title,
@@ -158,7 +181,7 @@
     wxWindow* const
         realParent = GetParentForModalDialog(parent, GetWindowStyle());
 
-    if (!wxDialog::Create(realParent, wxID_ANY, title))
+    if (!wxDialog::Create(realParent, wxID_ANY, title, wxDefaultPosition, wxDefaultSize, GetWindowStyle()))
         return false;
 
     SetMaximum(maximum);
@@ -191,16 +214,48 @@
 
     m_state = HasPDFlag(wxPD_CAN_ABORT) ? Continue : Uncancelable;
 
-    // top-level sizerTop
+    m_btnAbort =
+    m_btnSkip = NULL;
+
+    // top-level sizer
     wxSizer * const sizerTop = new wxBoxSizer(wxVERTICAL);
+    SetSizer(sizerTop);
 
-    m_msg = new wxStaticText(this, wxID_ANY, message);
-    sizerTop->Add(m_msg, 0, wxLEFT | wxTOP, 2*LAYOUT_MARGIN);
+    const int sizerFlags = wxEXPAND | wxALL;
 
+    m_sizerProgress = CreateProgressSizer();
+    if (m_sizerProgress)
+    {
+        sizerTop->Add(m_sizerProgress, 0, sizerFlags, LAYOUT_MARGIN);
+    }
+
+    m_sizerButton = CreateButtonSizer(HasPDFlag(wxPD_CAN_ABORT) ? wxCANCEL : 0);
+    if (m_sizerButton)
+    {
+        sizerTop->Add(m_sizerButton, 0, sizerFlags, LAYOUT_MARGIN + LAYOUT_MARGIN/2);
+    }
+
+    if (m_msg)
+    {
+        m_msg->SetLabel(message);
+    }
+    sizerTop->SetSizeHints(this);
+
+    return true;
+}
+
+wxSizer* wxGenericProgressDialog::CreateProgressSizer()
+{
+    wxSizer* sizer = new wxBoxSizer(wxVERTICAL);
+
+    m_msg = new wxStaticText(this, wxID_ANY, wxEmptyString);
+    sizer->Add(m_msg, 0, wxALL, LAYOUT_MARGIN);
+
     int gauge_style = wxGA_HORIZONTAL;
-    if ( style & wxPD_SMOOTH )
+    if ( m_pdStyle & wxPD_SMOOTH )
         gauge_style |= wxGA_SMOOTH;
 
+    int maximum = m_maximum;
 #ifdef __WXMSW__
     maximum /= m_factor;
 #endif
@@ -216,7 +271,7 @@
                     gauge_style
                   );
 
-    sizerTop->Add(m_gauge, 0, wxLEFT | wxRIGHT | wxTOP | wxEXPAND, 2*LAYOUT_MARGIN);
+    sizer->Add(m_gauge, 0, wxALL | wxEXPAND, LAYOUT_MARGIN);
     m_gauge->SetValue(0);
 
     // create the estimated/remaining/total time zones if requested
@@ -227,89 +282,61 @@
     // also count how many labels we really have
     size_t nTimeLabels = 0;
 
-    wxSizer * const sizerLabels = new wxFlexGridSizer(2);
+    wxSizer * const sizerLabels = new wxFlexGridSizer(0, 2, LAYOUT_MARGIN, LAYOUT_MARGIN);
 
-    if ( style & wxPD_ELAPSED_TIME )
+    if ( m_pdStyle & wxPD_ELAPSED_TIME )
     {
         nTimeLabels++;
 
         m_elapsed = CreateLabel(GetElapsedLabel(), sizerLabels);
     }
 
-    if ( style & wxPD_ESTIMATED_TIME )
+    if ( m_pdStyle & wxPD_ESTIMATED_TIME )
     {
         nTimeLabels++;
 
         m_estimated = CreateLabel(GetEstimatedLabel(), sizerLabels);
     }
 
-    if ( style & wxPD_REMAINING_TIME )
+    if ( m_pdStyle & wxPD_REMAINING_TIME )
     {
         nTimeLabels++;
 
         m_remaining = CreateLabel(GetRemainingLabel(), sizerLabels);
     }
-    sizerTop->Add(sizerLabels, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
+    sizer->Add(sizerLabels, 0, wxALIGN_CENTER_HORIZONTAL | wxTOP, LAYOUT_MARGIN);
 
+    return sizer;
+}
+
+wxSizer* wxGenericProgressDialog::CreateButtonSizer(long flags)
+{
+    wxSizer* sizer = wxDialog::CreateButtonSizer(flags);
+    
 #if defined(__SMARTPHONE__)
     if ( HasPDFlag(wxPD_CAN_SKIP) )
         SetRightMenu(wxID_SKIP, _("Skip"));
-    if ( HasPDFlag(wxPD_CAN_ABORT) )
-        SetLeftMenu(wxID_CANCEL);
+    
+    // this is done in wxDialog::CreateButtonSizer()
+    //if ( HasPDFlag(wxPD_CAN_ABORT) )
+    //    SetLeftMenu(wxID_CANCEL);
 #else
-    m_btnAbort =
-    m_btnSkip = NULL;
+    m_btnAbort = (wxButton*)FindWindow(wxID_CANCEL); // may be NULL
 
-    wxBoxSizer *buttonSizer = new wxBoxSizer(wxHORIZONTAL);
-
-    // Windows dialogs usually have buttons in the lower right corner
-    const int sizerFlags =
-#if defined(__WXMSW__) || defined(__WXPM__) || defined(__WXOSX__)
-                           wxALIGN_RIGHT | wxALL
-#else // !MSW
-                           wxALIGN_CENTER_HORIZONTAL | wxBOTTOM | wxTOP
-#endif // MSW/!MSW
-                           ;
-
     if ( HasPDFlag(wxPD_CAN_SKIP) )
     {
+        int sizerFlags = wxALIGN_CENTRE | wxLEFT | wxRIGHT; // from wxStdDialogButtonSizer::Realize()
+        size_t index = sizer->GetItemCount() ? (sizer->GetItemCount() - 1) : 0;
+
         m_btnSkip = new wxButton(this, wxID_SKIP, _("&Skip"));
 
-        buttonSizer->Add(m_btnSkip, 0, sizerFlags, LAYOUT_MARGIN);
+        sizer->Insert(index, m_btnSkip, 0, sizerFlags, LAYOUT_MARGIN);
     }
 
-    if ( HasPDFlag(wxPD_CAN_ABORT) )
-    {
-        m_btnAbort = new wxButton(this, wxID_CANCEL);
-
-        buttonSizer->Add(m_btnAbort, 0, sizerFlags, LAYOUT_MARGIN);
-    }
-
     if ( !HasPDFlag(wxPD_CAN_SKIP | wxPD_CAN_ABORT) )
-        buttonSizer->AddSpacer(LAYOUT_MARGIN);
-
-    sizerTop->Add(buttonSizer, 0, sizerFlags, LAYOUT_MARGIN );
+        sizer->AddSpacer(LAYOUT_MARGIN);
 #endif // __SMARTPHONE__/!__SMARTPHONE__
-
-    SetSizerAndFit(sizerTop);
-
-    Centre(wxCENTER_FRAME | wxBOTH);
-
-    DisableOtherWindows();
-
-    Show();
-    Enable();
-
-    // this one can be initialized even if the others are unknown for now
-    //
-    // NB: do it after calling Layout() to keep the labels correctly aligned
-    if ( m_elapsed )
-    {
-        SetTimeLabel(0, m_elapsed);
-    }
-
-    Update();
-    return true;
+    return sizer;
 }
 
 void wxGenericProgressDialog::UpdateTimeEstimates(int value,
@@ -399,12 +426,12 @@
     sizer->Add(value, 1, wxALIGN_LEFT);
 #elif defined(__WXMSW__) || defined(__WXPM__) || defined(__WXMAC__) || defined(__WXGTK20__)
     // value and time centered in one row
-    sizer->Add(label, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT) | wxTOP | wxRIGHT, LAYOUT_MARGIN);
-    sizer->Add(value, 1, wxALIGN_LEFT | wxTOP, LAYOUT_MARGIN);
+    sizer->Add(label, 1, wxLARGESMALL(wxALIGN_RIGHT,wxALIGN_LEFT));
+    sizer->Add(value, 1, wxALIGN_LEFT);
 #else
     // value and time to the right in one row
     sizer->Add(label);
-    sizer->Add(value, 0, wxLEFT, LAYOUT_MARGIN);
+    sizer->Add(value);
 #endif
 
     return value;

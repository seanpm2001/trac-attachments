*** include/wx/image.h	Mon Oct 08 16:48:48 2007
--- include/wx/image.h	Tue Sep 25 08:48:44 2007
***************
*** 242,250 ****
      wxImage ResampleBox(int width, int height) const;
      wxImage ResampleBicubic(int width, int height) const;
  
-     // apply a factor to the image channels
-     wxImage AdjustChannels(float factor_red, float factor_green, float factor_blue, float factor_alpha = 1.0) const;
-     
      // blur the image according to the specified pixel radius
      wxImage Blur(int radius);
      wxImage BlurHorizontal(int radius);
--- 242,247 ----
*** src/common/image.cpp	Mon Oct 08 16:49:30 2007
--- src/common/image.cpp	Tue Sep 25 08:48:14 2007
***************
*** 523,601 ****
      return image;
  }
  
- wxImage wxImage::AdjustChannels(float factor_red, float factor_green, float factor_blue, float factor_alpha) const
- {
-     // This function muliplies all 4 channels (red, green, blue, alpha) with a factor (around 1.0). Useful for gamma correction,
-     // colour correction and to add a certain amount of transparency to a image. If factor_alpha is given but the original
-     // image has no alpha channel then a alpha channel will be added to the new image.
-     
-     wxImage ret_image( M_IMGDATA->m_width, M_IMGDATA->m_height, false );
-     
-     unsigned rgblen =   3 * M_IMGDATA->m_width * M_IMGDATA->m_height;
-     unsigned alphalen = M_IMGDATA->m_width * M_IMGDATA->m_height;
-     unsigned char* src_data =  M_IMGDATA->m_data;
-     unsigned char* src_alpha = M_IMGDATA->m_alpha;
-     unsigned char* dst_data =  ret_image.GetData();
-     unsigned char* dst_alpha = NULL;
-     
-     // adjust rgb
-     if ( factor_red == 1.0 && factor_green == 1.0 && factor_blue == 1.0)
-     {
-         // nothing to do for RGB
-         memcpy(dst_data, src_data, rgblen);
-     }
-     else
-     {
-         // pixel by pixel
-         for ( unsigned i = 0; i < rgblen; i= i + 3 )
-         {
-             dst_data[i] =     (unsigned char) wxMin( 255, (int) (factor_red * src_data[i]));
-             dst_data[i + 1] = (unsigned char) wxMin( 255, (int) (factor_green * src_data[i + 1]));
-             dst_data[i + 2] = (unsigned char) wxMin( 255, (int) (factor_blue * src_data[i + 2]));
-         }
-     }
-     
-     // adjust the mask colour
-     if ( M_IMGDATA->m_hasMask )
-     {
-         ret_image.SetMaskColour((unsigned char) wxMin( 255, (int) (factor_red * M_IMGDATA->m_maskRed)),
-                                 (unsigned char) wxMin( 255, (int) (factor_green * M_IMGDATA->m_maskGreen)),
-                                 (unsigned char) wxMin( 255, (int) (factor_blue * M_IMGDATA->m_maskBlue)) );
-     }
-     
-     // adjust the alpha channel
-     if ( src_alpha )
-     {
-         ret_image.SetAlpha();
-         dst_alpha = ret_image.GetAlpha();
-         if ( factor_alpha == 1.0)
-         {
-             // no need to adjust
-             memcpy(dst_alpha, src_alpha, alphalen);
-         }
-         else
-         {
-             // alpha value for alpha value
-             for ( unsigned i = 0; i < alphalen; ++i )
-             {
-                 dst_alpha[i] = (unsigned char) wxMin( 255, (int) (factor_alpha * src_alpha[i]));
-             }
-         }
-     }
-     else if ( factor_alpha != 1.0)
-     {
-         // no alpha yet -> create
-         ret_image.InitAlpha(); // respect mask
-         dst_alpha = ret_image.GetAlpha();
-         for ( unsigned i = 0; i < alphalen; ++i )
-         {
-             dst_alpha[i] = (unsigned char) wxMin( 255, (int) (factor_alpha * dst_alpha[i]));
-         }
-     }
-     
-     return ret_image;
- }
- 
  wxImage wxImage::ResampleBox(int width, int height) const
  {
      // This function implements a simple pre-blur/box averaging method for
--- 523,528 ----

 	  	 

Index: src/osx/webview_webkit.mm
===================================================================
--- src/osx/webview_webkit.mm	(revision 70897)
+++ src/osx/webview_webkit.mm	(working copy)
@@ -362,7 +362,7 @@
     m_webView = [[WebView alloc] initWithFrame:r
                                      frameName:@"webkitFrame"
                                      groupName:@"webkitGroup"];
-    SetPeer(new wxWidgetCocoaImpl( this, m_webView ));
+    SetPeer(new wxWidgetCocoaImpl( this, (WebView*)m_webView ));
 #endif
 
     MacPostControlCreate(pos, size);
@@ -370,7 +370,7 @@
 #if wxOSX_USE_CARBON
     HIViewSetVisible( GetPeer()->GetControlRef(), true );
 #endif
-    [m_webView setHidden:false];
+    [(WebView*)m_webView setHidden:false];
 
 
 
@@ -378,13 +378,13 @@
     WebViewLoadDelegate* loadDelegate =
             [[WebViewLoadDelegate alloc] initWithWxWindow: this];
 
-    [m_webView setFrameLoadDelegate:loadDelegate];
+    [(WebView*)m_webView setFrameLoadDelegate:loadDelegate];
 
     // this is used to veto page loads, etc.
     WebViewPolicyDelegate* policyDelegate =
             [[WebViewPolicyDelegate alloc] initWithWxWindow: this];
 
-    [m_webView setPolicyDelegate:policyDelegate];
+    [(WebView*)m_webView setPolicyDelegate:policyDelegate];
 
     //Register our own class for custom scheme handling
     [NSURLProtocol registerClass:[WebViewCustomProtocol class]];
@@ -395,10 +395,10 @@
 
 wxWebViewWebKit::~wxWebViewWebKit()
 {
-    WebViewLoadDelegate* loadDelegate = [m_webView frameLoadDelegate];
-    WebViewPolicyDelegate* policyDelegate = [m_webView policyDelegate];
-    [m_webView setFrameLoadDelegate: nil];
-    [m_webView setPolicyDelegate: nil];
+    WebViewLoadDelegate* loadDelegate = [(WebView*)m_webView frameLoadDelegate];
+    WebViewPolicyDelegate* policyDelegate = [(WebView*)m_webView policyDelegate];
+    [(WebView*)m_webView setFrameLoadDelegate: nil];
+    [(WebView*)m_webView setPolicyDelegate: nil];
 
     if (loadDelegate)
         [loadDelegate release];
@@ -416,7 +416,7 @@
     if ( !m_webView )
         return false;
 
-    return [m_webView canGoBack];
+    return [(WebView*)m_webView canGoBack];
 }
 
 bool wxWebViewWebKit::CanGoForward() const
@@ -424,7 +424,7 @@
     if ( !m_webView )
         return false;
 
-    return [m_webView canGoForward];
+    return [(WebView*)m_webView canGoForward];
 }
 
 void wxWebViewWebKit::GoBack()
@@ -451,13 +451,13 @@
     if (flags & wxWEB_VIEW_RELOAD_NO_CACHE)
     {
         // TODO: test this indeed bypasses the cache
-        [[m_webView preferences] setUsesPageCache:NO];
-        [[m_webView mainFrame] reload];
-        [[m_webView preferences] setUsesPageCache:YES];
+        [[(WebView*)m_webView preferences] setUsesPageCache:NO];
+        [[(WebView*)m_webView mainFrame] reload];
+        [[(WebView*)m_webView preferences] setUsesPageCache:YES];
     }
     else
     {
-        [[m_webView mainFrame] reload];
+        [[(WebView*)m_webView mainFrame] reload];
     }
 }
 
@@ -466,7 +466,7 @@
     if ( !m_webView )
         return;
 
-    [[m_webView mainFrame] stopLoading];
+    [[(WebView*)m_webView mainFrame] stopLoading];
 }
 
 bool wxWebViewWebKit::CanGetPageSource() const
@@ -474,7 +474,7 @@
     if ( !m_webView )
         return false;
 
-    WebDataSource* dataSource = [[m_webView mainFrame] dataSource];
+    WebDataSource* dataSource = [[(WebView*)m_webView mainFrame] dataSource];
     return ( [[dataSource representation] canProvideDocumentSource] );
 }
 
@@ -483,7 +483,7 @@
 
     if (CanGetPageSource())
 	{
-        WebDataSource* dataSource = [[m_webView mainFrame] dataSource];
+        WebDataSource* dataSource = [[(WebView*)m_webView mainFrame] dataSource];
 		wxASSERT (dataSource != nil);
 
 		id<WebDocumentRepresentation> representation = [dataSource representation];
@@ -506,7 +506,7 @@
     if ( !m_webView )
         return false;
 
-    if ([m_webView canMakeTextLarger])
+    if ([(WebView*)m_webView canMakeTextLarger])
         return true;
     else
         return false;
@@ -518,7 +518,7 @@
         return;
 
     if (CanIncreaseTextSize())
-        [m_webView makeTextLarger:(WebView*)m_webView];
+        [(WebView*)m_webView makeTextLarger:(WebView*)m_webView];
 }
 
 bool wxWebViewWebKit::CanDecreaseTextSize() const
@@ -526,7 +526,7 @@
     if ( !m_webView )
         return false;
 
-    if ([m_webView canMakeTextSmaller])
+    if ([(WebView*)m_webView canMakeTextSmaller])
         return true;
     else
         return false;
@@ -538,7 +538,7 @@
         return;
 
     if (CanDecreaseTextSize())
-        [m_webView makeTextSmaller:(WebView*)m_webView];
+        [(WebView*)m_webView makeTextSmaller:(WebView*)m_webView];
 }
 
 void wxWebViewWebKit::Print()
@@ -550,7 +550,7 @@
     if ( !m_webView )
         return;
 
-    id view = [[[m_webView mainFrame] frameView] documentView];
+    id view = [[[(WebView*)m_webView mainFrame] frameView] documentView];
     NSPrintOperation *op = [NSPrintOperation printOperationWithView:view
                                  printInfo: [NSPrintInfo sharedPrintInfo]];
     if (showPrompt)
@@ -570,7 +570,7 @@
     if ( !m_webView )
         return;
 
-    [m_webView setEditable:enable ];
+    [(WebView*)m_webView setEditable:enable ];
 }
 
 bool wxWebViewWebKit::IsEditable() const
@@ -578,7 +578,7 @@
     if ( !m_webView )
         return false;
 
-    return [m_webView isEditable];
+    return [(WebView*)m_webView isEditable];
 }
 
 void wxWebViewWebKit::SetZoomType(wxWebViewZoomType zoomType)
@@ -613,7 +613,7 @@
 
 int wxWebViewWebKit::GetScrollPos()
 {
-    id result = [[m_webView windowScriptObject]
+    id result = [[(WebView*)m_webView windowScriptObject]
                     evaluateWebScript:@"document.body.scrollTop"];
     return [result intValue];
 }
@@ -625,13 +625,13 @@
 
     wxString javascript;
     javascript.Printf(wxT("document.body.scrollTop = %d;"), pos);
-    [[m_webView windowScriptObject] evaluateWebScript:
+    [[(WebView*)m_webView windowScriptObject] evaluateWebScript:
             (NSString*)wxNSStringWithWxString( javascript )];
 }
 
 wxString wxWebViewWebKit::GetSelectedText() const
 {
-    NSString* selection = [[m_webView selectedDOMRange] markupString];
+    NSString* selection = [[(WebView*)m_webView selectedDOMRange] markupString];
     if (!selection) return wxEmptyString;
 
     return wxStringWithNSString(selection);
@@ -642,7 +642,7 @@
     if ( !m_webView )
         return;
 
-    [[m_webView windowScriptObject] evaluateWebScript:
+    [[(WebView*)m_webView windowScriptObject] evaluateWebScript:
                     (NSString*)wxNSStringWithWxString( javascript )];
 }
 
@@ -731,34 +731,34 @@
     if (!isHidden)
         [(WebView*)m_webView display];
 
-    [m_webView setHidden:isHidden];
+    [(WebView*)m_webView setHidden:isHidden];
 #endif
 }
 
 void wxWebViewWebKit::LoadURL(const wxString& url)
 {
-    [[m_webView mainFrame] loadRequest:[NSURLRequest requestWithURL:
+    [[(WebView*)m_webView mainFrame] loadRequest:[NSURLRequest requestWithURL:
             [NSURL URLWithString:wxNSStringWithWxString(url)]]];
 }
 
 wxString wxWebViewWebKit::GetCurrentURL() const
 {
-    return wxStringWithNSString([m_webView mainFrameURL]);
+    return wxStringWithNSString([(WebView*)m_webView mainFrameURL]);
 }
 
 wxString wxWebViewWebKit::GetCurrentTitle() const
 {
-    return wxStringWithNSString([m_webView mainFrameTitle]);
+    return wxStringWithNSString([(WebView*)m_webView mainFrameTitle]);
 }
 
 float wxWebViewWebKit::GetWebkitZoom() const
 {
-    return [m_webView textSizeMultiplier];
+    return [(WebView*)m_webView textSizeMultiplier];
 }
 
 void wxWebViewWebKit::SetWebkitZoom(float zoom)
 {
-    [m_webView setTextSizeMultiplier:zoom];
+    [(WebView*)m_webView setTextSizeMultiplier:zoom];
 }
 
 wxWebViewZoom wxWebViewWebKit::GetZoom() const
@@ -828,7 +828,7 @@
    if ( !m_webView )
         return;
 
-    [[m_webView mainFrame] loadHTMLString:(NSString*)wxNSStringWithWxString(src)
+    [[(WebView*)m_webView mainFrame] loadHTMLString:(NSString*)wxNSStringWithWxString(src)
                                   baseURL:[NSURL URLWithString:
                                     wxNSStringWithWxString( baseUrl )]];
 }
@@ -838,7 +838,7 @@
     if ( !m_webView )
         return;
 
-    [(WebView*)m_webView cut:m_webView];
+    [(WebView*)m_webView cut:(WebView*)m_webView];
 }
 
 void wxWebViewWebKit::Copy()
@@ -846,7 +846,7 @@
     if ( !m_webView )
         return;
 
-    [(WebView*)m_webView copy:m_webView];
+    [(WebView*)m_webView copy:(WebView*)m_webView];
 }
 
 void wxWebViewWebKit::Paste()
@@ -854,7 +854,7 @@
     if ( !m_webView )
         return;
 
-    [(WebView*)m_webView paste:m_webView];
+    [(WebView*)m_webView paste:(WebView*)m_webView];
 }
 
 void wxWebViewWebKit::DeleteSelection()
@@ -867,7 +867,7 @@
 
 bool wxWebViewWebKit::HasSelection() const
 {
-    DOMRange* range = [m_webView selectedDOMRange];
+    DOMRange* range = [(WebView*)m_webView selectedDOMRange];
     if(!range)
     {
         return false;
@@ -895,14 +895,14 @@
                        "var element = document.createElement('div');"
                        "element.appendChild(range.cloneContents());"
                        "return element.innerHTML;");
-    id result = [[m_webView windowScriptObject]
+    id result = [[(WebView*)m_webView windowScriptObject]
                    evaluateWebScript:wxNSStringWithWxString(script)];
     return wxStringWithNSString([result stringValue]);
 }
 
 wxString wxWebViewWebKit::GetPageText() const
 {
-    id result = [[m_webView windowScriptObject]
+    id result = [[(WebView*)m_webView windowScriptObject]
                  evaluateWebScript:@"document.body.textContent"];
     return wxStringWithNSString([result stringValue]);
 }
@@ -912,19 +912,19 @@
     if ( !m_webView )
         return;
 
-    [m_webView setMaintainsBackForwardList:enable];
+    [(WebView*)m_webView setMaintainsBackForwardList:enable];
 }
 
 void wxWebViewWebKit::ClearHistory()
 {
-    [m_webView setMaintainsBackForwardList:NO];
-    [m_webView setMaintainsBackForwardList:YES];
+    [(WebView*)m_webView setMaintainsBackForwardList:NO];
+    [(WebView*)m_webView setMaintainsBackForwardList:YES];
 }
 
 wxVector<wxSharedPtr<wxWebViewHistoryItem> > wxWebViewWebKit::GetBackwardHistory()
 {
     wxVector<wxSharedPtr<wxWebViewHistoryItem> > backhist;
-    WebBackForwardList* history = [m_webView backForwardList];
+    WebBackForwardList* history = [(WebView*)m_webView backForwardList];
     int count = [history backListCount];
     for(int i = -count; i < 0; i++)
     {
@@ -942,7 +942,7 @@
 wxVector<wxSharedPtr<wxWebViewHistoryItem> > wxWebViewWebKit::GetForwardHistory()
 {
     wxVector<wxSharedPtr<wxWebViewHistoryItem> > forwardhist;
-    WebBackForwardList* history = [m_webView backForwardList];
+    WebBackForwardList* history = [(WebView*)m_webView backForwardList];
     int count = [history forwardListCount];
     for(int i = 1; i <= count; i++)
     {
@@ -959,27 +959,27 @@
 
 void wxWebViewWebKit::LoadHistoryItem(wxSharedPtr<wxWebViewHistoryItem> item)
 {
-    [m_webView goToBackForwardItem:item->m_histItem];
+    [(WebView*)m_webView goToBackForwardItem:(WebHistoryItem*)item->m_histItem];
 }
 
 bool wxWebViewWebKit::CanUndo() const
 {
-    return [[m_webView undoManager] canUndo];
+    return [[(WebView*)m_webView undoManager] canUndo];
 }
 
 bool wxWebViewWebKit::CanRedo() const
 {
-    return [[m_webView undoManager] canRedo];
+    return [[(WebView*)m_webView undoManager] canRedo];
 }
 
 void wxWebViewWebKit::Undo()
 {
-    [[m_webView undoManager] undo];
+    [[(WebView*)m_webView undoManager] undo];
 }
 
 void wxWebViewWebKit::Redo()
 {
-    [[m_webView undoManager] redo];
+    [[(WebView*)m_webView undoManager] redo];
 }
 
 void wxWebViewWebKit::RegisterHandler(wxSharedPtr<wxWebViewHandler> handler)
Index: include/wx/osx/webviewhistoryitem_webkit.h
===================================================================
--- include/wx/osx/webviewhistoryitem_webkit.h	(revision 70897)
+++ include/wx/osx/webviewhistoryitem_webkit.h	(working copy)
@@ -27,7 +27,7 @@
 
 private:
     wxString m_url, m_title;
-    struct objc_object *m_histItem;
+    void* m_histItem;
 };
 
 #endif // wxUSE_WEBVIEW && wxUSE_WEBVIEW_WEBKIT 
Index: include/wx/osx/webview_webkit.h
===================================================================
--- include/wx/osx/webview_webkit.h	(revision 70897)
+++ include/wx/osx/webview_webkit.h	(working copy)
@@ -149,7 +149,7 @@
     wxWindowID m_windowID;
     wxString m_pageTitle;
 
-    struct objc_object *m_webView;
+    void* m_webView;
 
     // we may use this later to setup our own mouse events,
     // so leave it in for now.

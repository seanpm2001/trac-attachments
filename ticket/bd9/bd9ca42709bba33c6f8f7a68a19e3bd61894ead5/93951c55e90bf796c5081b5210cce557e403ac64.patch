Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 57202)
+++ src/common/sizer.cpp	(working copy)
@@ -1307,7 +1307,7 @@
 //---------------------------------------------------------------------------
 
 wxGridSizer::wxGridSizer( int rows, int cols, int vgap, int hgap )
-    : m_rows( ( cols == 0 && rows == 0 ) ? 1 : rows )
+    : m_rows( rows )
     , m_cols( cols )
     , m_vgap( vgap )
     , m_hgap( hgap )
@@ -1315,7 +1315,7 @@
 }
 
 wxGridSizer::wxGridSizer( int cols, int vgap, int hgap )
-    : m_rows( cols == 0 ? 1 : 0 )
+    : m_rows( 0 )
     , m_cols( cols )
     , m_vgap( vgap )
     , m_hgap( hgap )
@@ -1324,28 +1324,13 @@
 
 int wxGridSizer::CalcRowsCols(int& nrows, int& ncols) const
 {
-    int nitems = m_children.GetCount();
-    if ( nitems)
-    {
-        if ( m_cols )
-        {
-            ncols = m_cols;
-            nrows = (nitems + m_cols - 1) / m_cols;
-        }
-        else if ( m_rows )
-        {
-            ncols = (nitems + m_rows - 1) / m_rows;
-            nrows = m_rows;
-        }
-        else // 0 columns, 0 rows?
-        {
-            wxFAIL_MSG( _T("grid sizer must have either rows or columns fixed") );
+    nrows = GetEffectiveRowsCount();
+    ncols = GetEffectiveColsCount();
 
-            nrows = ncols = 0;
-        }
-    }
+    wxASSERT_MSG( nrows * ncols >= m_children.GetCount(),
+        "Too few rows and columns specified to accommodate all wxGridSizer children");
 
-    return nitems;
+    return m_children.GetCount();
 }
 
 void wxGridSizer::RecalcSizes()
@@ -1830,9 +1815,7 @@
 
 void wxFlexGridSizer::AddGrowableRow( size_t idx, int proportion )
 {
-    int nrows, ncols;
-    CalcRowsCols(nrows, ncols);
-    wxCHECK_RET( idx < (size_t)nrows, "invalid row index" );
+    wxCHECK_RET( idx < (size_t)GetEffectiveRowsCount(), "invalid row index" );
 
     wxASSERT_MSG( !IsRowGrowable( idx ),
                   "AddGrowableRow() called for growable row" );
@@ -1842,9 +1825,7 @@
 
 void wxFlexGridSizer::AddGrowableCol( size_t idx, int proportion )
 {
-    int nrows, ncols;
-    CalcRowsCols(nrows, ncols);
-    wxCHECK_RET( idx < (size_t)ncols, "invalid column index" );
+    wxCHECK_RET( idx < (size_t)GetEffectiveColsCount(), "invalid column index" );
 
     wxASSERT_MSG( !IsColGrowable( idx ),
                   "AddGrowableCol() called for growable column" );
Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 57202)
+++ include/wx/sizer.h	(working copy)
@@ -727,8 +727,18 @@
     virtual void RecalcSizes();
     virtual wxSize CalcMin();
 
-    void SetCols( int cols )    { m_cols = cols; }
-    void SetRows( int rows )    { m_rows = rows; }
+    void SetCols( int cols )
+    {
+        wxASSERT_MSG( cols >= 0, "Negative number of columns passed to wxGridSizer::SetCols()");
+        m_cols = cols;
+    }
+
+    void SetRows( int rows )
+    {
+        wxASSERT_MSG( rows >= 0, "Negative number of rows passed to wxGridSizer::SetRows()");
+        m_rows = rows;
+    }
+
     void SetVGap( int gap )     { m_vgap = gap; }
     void SetHGap( int gap )     { m_hgap = gap; }
     int GetCols() const         { return m_cols; }
@@ -736,6 +746,26 @@
     int GetVGap() const         { return m_vgap; }
     int GetHGap() const         { return m_hgap; }
 
+private:
+    // returns the number of parts (columns / rows) currently being used for the grid,
+    // based on the number of divisions (rows / columns, respectively) and number of children
+    int GetEffectivePartCount( int nparts, int ndivisions ) const
+    {
+        if ( nparts )
+            return nparts;
+        else if ( ndivisions )
+            return (m_children.GetCount() + ndivisions - 1) / ndivisions;
+        else
+        {
+            wxASSERT_MSG( m_children.GetCount() == 0, "Zero rows and columns set for populated wxGridSizer" );
+            return 0;
+        }
+    }
+
+public:
+    int GetEffectiveRowsCount() const { return GetEffectivePartCount( m_rows, m_cols ); }
+    int GetEffectiveColsCount() const { return GetEffectivePartCount( m_cols, m_rows ); }
+
 protected:
     int    m_rows;
     int    m_cols;
Index: samples/layout/layout.cpp
===================================================================
--- samples/layout/layout.cpp	(revision 57208)
+++ samples/layout/layout.cpp	(working copy)
@@ -301,7 +301,7 @@
     {
         for ( int j = 0; j < 3; j++ )
         {
-            sizer->Add(new wxStaticText
+            wxStaticText *cell = new wxStaticText
                            (
                             parent,
                             wxID_ANY,
@@ -309,8 +309,10 @@
                             wxDefaultPosition,
                             wxDefaultSize,
                             wxALIGN_CENTER
-                           ),
-                       0, wxEXPAND | wxALIGN_CENTER_VERTICAL | wxALL, 3);
+                           );
+            if ( i + j & 1 )
+                cell->SetBackgroundColour( wxColour(128, 128, 128) );
+            sizer->Add(cell, 0, wxEXPAND | wxALIGN_CENTER_VERTICAL | wxALL, 3);
         }
     }
 }

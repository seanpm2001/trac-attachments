diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\docs\latex\wx\renderer.tex wxWidgets\docs\latex\wx\renderer.tex
--- wxWidgets.orig\docs\latex\wx\renderer.tex	Fri Mar 18 21:07:02 2005
+++ wxWidgets\docs\latex\wx\renderer.tex	Mon Mar 21 14:44:18 2005
@@ -99,5 +99,17 @@
 drop down window. The usual appearance is a downwards pointing arrow.
 
-\arg{flags} may have the \texttt{wxCONTROL\_PRESSED} bit set.
+\arg{flags} may have the \texttt{wxCONTROL\_PRESSED} or \texttt{wxCONTROL\_CURRENT} bit set.
+
+
+\membersection{wxRendererNative::DrawDropArrow}\label{wxrenderernativedrawdroparrow}
+
+\func{void}{DrawDropArrow}{\param{wxWindow *}{win}, \param{wxDC\& }{dc}, \param{const wxRect\& }{rect}, \param{int }{flags}}
+
+Draw a drop down arrow that is suitable for use outside a combo box. Arrow will have
+transparent background.
+
+\arg{rect} is not entirely filled by the arrow. Instead, you should use bounding
+rectangle of a drop down button which arrow matches the size you need.
+\arg{flags} may have the \texttt{wxCONTROL\_PRESSED} or \texttt{wxCONTROL\_CURRENT} bit set.
 
 
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\include\wx\renderer.h wxWidgets\include\wx\renderer.h
--- wxWidgets.orig\include\wx\renderer.h	Sat Jan 22 06:03:10 2005
+++ wxWidgets\include\wx\renderer.h	Sat Mar 19 12:14:42 2005
@@ -157,5 +157,5 @@
     // draw a combobox dropdown button
     //
-    // flags may only use wxCONTROL_PRESSED
+    // flags may use wxCONTROL_PRESSED and wxCONTROL_CURRENT
     virtual void DrawComboBoxDropButton(wxWindow *win,
                                         wxDC& dc,
@@ -163,4 +163,11 @@
                                         int flags = 0) = 0;
 
+    // draw a dropdown arrow
+    //
+    // flags may use wxCONTROL_PRESSED and wxCONTROL_CURRENT
+    virtual void DrawDropArrow(wxWindow *win,
+                               wxDC& dc,
+                               const wxRect& rect,
+                               int flags = 0) = 0;
 
     // geometry functions
@@ -260,4 +267,9 @@
         { m_rendererNative.DrawComboBoxDropButton(win, dc, rect, flags); }
 
+    virtual void DrawDropArrow(wxWindow *win,
+                               wxDC& dc,
+                               const wxRect& rect,
+                               int flags = 0)
+        { m_rendererNative.DrawDropArrow(win, dc, rect, flags); }
 
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win)
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\src\generic\datectlg.cpp wxWidgets\src\generic\datectlg.cpp
--- wxWidgets.orig\src\generic\datectlg.cpp	Tue Mar 01 06:05:36 2005
+++ wxWidgets\src\generic\datectlg.cpp	Sat Mar 19 19:20:39 2005
@@ -77,13 +77,13 @@
     #define wxUSE_POPUPWIN    0  // Popup not working
     #define TXTCTRL_FLAGS     wxNO_BORDER
-    #define BTN_FLAGS         wxNO_BORDER
+    #define USEDRAWCOMBOBTN   1
     #define CALBORDER         0
-    #define RIGHTBUTTONBORDER 3
+    #define RIGHTBUTTONBORDER 4
     #define TOPBUTTONBORDER   0
-    #define BUTTONBORDER      3
+    #define BUTTONBORDER      4
     #define TXTPOSY           1
 #else
     #define TXTCTRL_FLAGS     0
-    #define BTN_FLAGS         wxBU_AUTODRAW
+    #define USEDRAWCOMBOBTN   0
     #define CALBORDER         4
     #define RIGHTBUTTONBORDER 0
@@ -151,7 +151,13 @@
     m_marginY = 0;
 
+#if USEDRAWCOMBOBTN
+    int buttonFlags = wxNO_BORDER;
+#else
+    int buttonFlags = wxBU_AUTODRAW;
+#endif
+
     wxBitmap chkBmp(15,15);  // arbitrary
     if ( !wxBitmapButton::Create(parent, id, chkBmp,
-                                 pos, wxDefaultSize, BTN_FLAGS, validator) )
+                                 pos, wxDefaultSize, buttonFlags, validator) )
         return false;
 
@@ -177,5 +183,5 @@
         wxMemoryDC dc;
         if (w < 0)
-              w = GetSize().x;
+            w = GetSize().x;
 #ifdef __WXGTK__
         else
@@ -185,25 +191,39 @@
             h = GetSize().y;
 
-        int bw = w - m_marginX - m_borderX;
-        int bh = h - m_marginY - m_borderY;
+#if USEDRAWCOMBOBTN
+        const int bw = w;
+        const int bh = h;
+#else
+        int borderX = m_marginX + m_borderX;
+        int borderY = m_marginY + m_borderY;
+        int bw = w - borderX;
+        int bh = h - borderY;
         if (bh < 11) bh=11;
         if (bw < 9)  bw=9;
+#endif
 
         wxBitmap bmp(bw, bh);
         dc.SelectObject(bmp);
 
-        wxRect r(0,0,bw, bh);
         wxRendererNative& renderer = wxRendererNative::Get();
         
-#ifdef __WXGTK__
+#if USEDRAWCOMBOBTN
+        // Atleast wxMSW can draw the entire button
+        wxRect r(0,0,w,h);
+
+        renderer.DrawComboBoxDropButton(this, dc, r);
+#else
+        // For other platforms, draw a drop arrow with
+        // transparent background.
+        wxRect r(-(borderX/2),-(borderY/2),w,h);
+
         wxColour magic(255,0,255);
         dc.SetBrush( wxBrush( magic ) );
         dc.SetPen( *wxTRANSPARENT_PEN );
         dc.DrawRectangle(0,0,bw,bh);
-        renderer.DrawComboBoxDropButton(this, dc, r);
+        renderer.DrawDropArrow(this, dc, r);
+        dc.SelectObject(wxNullBitmap);
         wxMask *mask = new wxMask( bmp, magic );
         bmp.SetMask( mask );
-#else
-        renderer.DrawComboBoxDropButton(this, dc, r);
 #endif
         SetBitmapLabel(bmp);
@@ -212,13 +232,14 @@
         dc.SelectObject(bmpSel);
         
-#ifdef __WXGTK__
+#if USEDRAWCOMBOBTN
+        renderer.DrawComboBoxDropButton(this, dc, r, wxCONTROL_PRESSED);
+#else
         dc.SetBrush( wxBrush( magic ) );
         dc.SetPen( *wxTRANSPARENT_PEN );
         dc.DrawRectangle(0,0,bw,bh);
-        renderer.DrawComboBoxDropButton(this, dc, r, wxCONTROL_PRESSED);
+        renderer.DrawDropArrow(this, dc, r, wxCONTROL_PRESSED);
+        dc.SelectObject(wxNullBitmap);
         mask = new wxMask( bmpSel, magic );
         bmpSel.SetMask( mask );
-#else
-        renderer.DrawComboBoxDropButton(this, dc, r, wxCONTROL_PRESSED);
 #endif        
         SetBitmapSelected(bmpSel);
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\src\generic\renderg.cpp wxWidgets\src\generic\renderg.cpp
--- wxWidgets.orig\src\generic\renderg.cpp	Thu Feb 17 06:04:58 2005
+++ wxWidgets\src\generic\renderg.cpp	Sat Mar 19 15:16:42 2005
@@ -74,4 +74,8 @@
                                         int flags = 0);
 
+    virtual void DrawDropArrow(wxWindow *win,
+                               wxDC& dc,
+                               const wxRect& rect,
+                               int flags = 0);
 
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
@@ -344,4 +348,8 @@
 }
 
+// ----------------------------------------------------------------------------
+// button drawing
+// ----------------------------------------------------------------------------
+
 void
 wxRendererGeneric::DrawComboBoxDropButton(wxWindow *win,
@@ -350,13 +358,31 @@
                                           int WXUNUSED(flags))
 {
-    dc.SetBrush(wxBrush(win->GetBackgroundColour()));
-    dc.SetPen(wxPen(win->GetBackgroundColour()));
-    dc.DrawRectangle(rect);
+    // FIXME: Is it worth to do a better implementation?
+    // Generic wxComboDropButton should be drawn using
+    // combination of wxBitmapButton and DrawDropArrow
+    // anyway.
+    DrawDropArrow(win,dc,rect);
+}
 
+
+void
+wxRendererGeneric::DrawDropArrow(wxWindow *win,
+                                 wxDC& dc,
+                                 const wxRect& rect,
+                                 int WXUNUSED(flags))
+{
+    // This generic implementation should be good
+    // enough for Windows platforms (including XP).
+
+    int arrowHalf = rect.width/5;
+    int rectMid = rect.width / 2;
+    int arrowTopY = (rect.height/2) - (arrowHalf/2);
+
+    // This should always result in arrow with odd width.
     wxPoint pt[] =
     {
-        wxPoint(0,0),
-        wxPoint(rect.width, 0),
-        wxPoint(rect.width/2, rect.height - 2)
+        wxPoint(rectMid - arrowHalf, arrowTopY),
+        wxPoint(rectMid + arrowHalf, arrowTopY),
+        wxPoint(rectMid, arrowTopY + arrowHalf)
     };
     dc.SetBrush(wxBrush(win->GetForegroundColour()));
@@ -364,5 +390,4 @@
     dc.DrawPolygon(WXSIZEOF(pt), pt, rect.x, rect.y);
 }
-
 
 // ----------------------------------------------------------------------------
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWidgets.orig\src\gtk\renderer.cpp wxWidgets\src\gtk\renderer.cpp
--- wxWidgets.orig\src\gtk\renderer.cpp	Sun Mar 13 06:05:02 2005
+++ wxWidgets\src\gtk\renderer.cpp	Mon Mar 21 17:45:22 2005
@@ -80,4 +80,9 @@
                                         int flags = 0);
 
+    virtual void DrawDropArrow(wxWindow *win,
+                               wxDC& dc,
+                               const wxRect& rect,
+                               int flags = 0);
+
     virtual wxSplitterRenderParams GetSplitterParams(const wxWindow *win);
 
@@ -395,18 +400,33 @@
 }
 
-void wxRendererGTK::DrawComboBoxDropButton(wxWindow *win,
-                                            wxDC& dc,
-                                            const wxRect& rect,
-                                            int flags)
+void
+wxRendererGTK::DrawDropArrow(wxWindow *win,
+                             wxDC& dc,
+                             const wxRect& rect,
+                             int flags)
 {
     GtkWidget *button = GetButtonWidget();
 
-    // device context must inherit from wxWindowDC
-    // (so it must be wxClientDC, wxMemoryDC or wxPaintDC)
+    // If we give GTK_PIZZA(win->m_wxwindow)->bin_window as
+    // a window for gtk_paint_xxx function, then it won't
+    // work for wxMemoryDC. So that is why we assume wxDC
+    // is wxWindowDC (wxClientDC, wxMemoryDC and wxPaintDC
+    // are derived from it) and use its m_window.
     wxWindowDC& wdc = (wxWindowDC&)dc;
 
-    // only doing debug-time checking here (it should probably be enough)
+    // only doing debug-time checking here (it should
+    // probably be enough)
     wxASSERT ( wdc.IsKindOf(CLASSINFO(wxWindowDC)) );
 
+    // draw arrow so that there is even space horizontally
+    // on both sides
+    int arrowX = rect.width/4 + 1;
+    int arrowWidth = rect.width - (arrowX*2);
+
+    // scale arrow's height accoording to the width
+    int arrowHeight = rect.width/3;
+    int arrowY = (rect.height-arrowHeight)/2 +
+                 ((rect.height-arrowHeight) & 1);
+
     GtkStateType state;
 
@@ -430,6 +450,48 @@
         GTK_ARROW_DOWN,
         FALSE,
-        rect.x + 1, rect.y + 1, rect.width - 2, rect.height - 2
+        rect.x + arrowX,
+        rect.y + arrowY,
+        arrowWidth,
+        arrowHeight
+    );
+}
+
+void
+wxRendererGTK::DrawComboBoxDropButton(wxWindow *win,
+                                      wxDC& dc,
+                                      const wxRect& rect,
+                                      int flags)
+{
+    GtkWidget *button = GetButtonWidget();
+
+    // for reason why we do this, see DrawDropArrow
+    wxWindowDC& wdc = (wxWindowDC&)dc;
+    wxASSERT ( wdc.IsKindOf(CLASSINFO(wxWindowDC)) );
+
+    // draw button
+    GtkStateType state;
+
+    if ( flags & wxCONTROL_CURRENT )
+        state = GTK_STATE_PRELIGHT;
+    else if ( flags & wxCONTROL_DISABLED )
+        state = GTK_STATE_INSENSITIVE;
+    else
+        state = GTK_STATE_NORMAL;
+
+    gtk_paint_box
+    (
+        button->style,
+        wdc.m_window,
+        state,
+        flags & wxCONTROL_PRESSED ? GTK_SHADOW_IN : GTK_SHADOW_OUT,
+        NULL,
+        button,
+        "button",
+        rect.x, rect.y, rect.width, rect.height
     );
+
+    // draw arrow on button
+    DrawDropArrow(win,dc,rect,flags);
+
 }
 

 	  	 

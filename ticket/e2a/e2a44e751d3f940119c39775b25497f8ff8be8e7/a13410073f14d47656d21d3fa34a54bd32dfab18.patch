Index: include/wx/unix/glx11.h
===================================================================
--- include/wx/unix/glx11.h	(Revision 77022)
+++ include/wx/unix/glx11.h	(Arbeitskopie)
@@ -72,6 +72,13 @@
     virtual Window GetXWindow() const = 0;
 
 
+    // GLX-specific methods
+    // --------------------
+
+    // return attribs for glXCreateContextAttribsARB
+    const int *GetGLXContextAttribs() const { return m_glxContextAttribs; }
+
+
     // override some wxWindow methods
     // ------------------------------
 
@@ -105,8 +112,13 @@
                                 GLXFBConfig **pFBC, XVisualInfo **pXVisual);
 
 private:
+    // initializes glxContextAttribs as defined by wxattrs which must be
+    // 0-terminated
+    static void InitGLXContextAttribs(const int *wxattrs, int *glxctxattribs);
+
     // fills in glattrs with attributes defined by wxattrs which must be
     // 0-terminated if it is non-NULL
+    // will ignore any gl context attribs
     //
     // n is the max size of glattrs, false is returned if we overflow it, it
     // should be at least 16 to accommodate the default attributes
@@ -122,6 +134,10 @@
     // the global/default versions of the above
     static GLXFBConfig *ms_glFBCInfo;
     static XVisualInfo *ms_glVisualInfo;
+
+    // max 8 attributes plus terminator
+    // if first is 0, create legacy context
+    int m_glxContextAttribs[9];
 };
 
 // ----------------------------------------------------------------------------
Index: samples/opengl/cube/cube.cpp
===================================================================
--- samples/opengl/cube/cube.cpp	(Revision 77022)
+++ samples/opengl/cube/cube.cpp	(Arbeitskopie)
@@ -128,30 +128,14 @@
 // ============================================================================
 
 // ----------------------------------------------------------------------------
-// TestGLContext
+// TestGLCubeRenderer
 // ----------------------------------------------------------------------------
 
-TestGLContext::TestGLContext(wxGLCanvas *canvas)
+TestGLCubeRenderer::TestGLCubeRenderer(wxGLCanvas *canvas)
              : wxGLContext(canvas)
 {
     SetCurrent(*canvas);
 
-    // set up the parameters we want to use
-    glEnable(GL_CULL_FACE);
-    glEnable(GL_DEPTH_TEST);
-    glEnable(GL_LIGHTING);
-    glEnable(GL_LIGHT0);
-    glEnable(GL_TEXTURE_2D);
-
-    // add slightly more light, the default lighting is rather dark
-    GLfloat ambient[] = { 0.5, 0.5, 0.5, 0.5 };
-    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
-
-    // set viewing projection
-    glMatrixMode(GL_PROJECTION);
-    glLoadIdentity();
-    glFrustum(-0.5f, 0.5f, -0.5f, 0.5f, 1.0f, 3.0f);
-
     // create the textures to use for cube sides: they will be reused by all
     // canvases (which is probably not critical in the case of simple textures
     // we use here but could be really important for a real application where
@@ -162,7 +146,7 @@
     {
         glBindTexture(GL_TEXTURE_2D, m_textures[i]);
 
-        glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
+        //glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
         glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
         glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
@@ -178,6 +162,36 @@
     CheckGLError();
 }
 
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// TestGLContext
+// ----------------------------------------------------------------------------
+
+TestGLContext::TestGLContext(wxGLCanvas *canvas)
+             : TestGLCubeRenderer(canvas)
+{
+    SetCurrent(*canvas);
+
+    // set up the parameters we want to use
+    glEnable(GL_CULL_FACE);
+    glEnable(GL_DEPTH_TEST);
+    glEnable(GL_LIGHTING);
+    glEnable(GL_LIGHT0);
+    glEnable(GL_TEXTURE_2D);
+
+    // add slightly more light, the default lighting is rather dark
+    GLfloat ambient[] = { 0.5, 0.5, 0.5, 0.5 };
+    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
+
+    // set viewing projection
+    glMatrixMode(GL_PROJECTION);
+    glLoadIdentity();
+    glFrustum(-0.5f, 0.5f, -0.5f, 0.5f, 1.0f, 3.0f);
+}
+
 void TestGLContext::DrawRotatedCube(float xangle, float yangle)
 {
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
@@ -249,7 +263,236 @@
 }
 
 
+// ============================================================================
+// implementation
+// ============================================================================
+
 // ----------------------------------------------------------------------------
+// TestGLCoreContext
+// ----------------------------------------------------------------------------
+
+#include <GL/glx.h> // for glXGetProcAddress
+//#define GL_GLEXT_PROTOTYPES
+//#include "glcorearb.h"
+
+PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
+PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
+PFNGLGENBUFFERSPROC glGenBuffers;
+PFNGLBINDBUFFERPROC glBindBuffer;
+PFNGLBUFFERDATAPROC glBufferData;
+PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
+PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
+PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
+PFNGLCREATEPROGRAMPROC glCreateProgram;
+PFNGLCREATESHADERPROC glCreateShader;
+PFNGLSHADERSOURCEPROC glShaderSource;
+PFNGLCOMPILESHADERPROC glCompileShader;
+PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
+PFNGLATTACHSHADERPROC glAttachShader;
+PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
+PFNGLLINKPROGRAMPROC glLinkProgram;
+PFNGLUSEPROGRAMPROC glUseProgram;
+PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
+PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
+
+// not needed on OS X
+void InitGLCoreFunctionPointers()
+{
+#if defined(__linux__)
+    glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)glXGetProcAddress((GLubyte *)"glGenVertexArrays");
+    glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)glXGetProcAddress((GLubyte *)"glBindVertexArray");
+    glGenBuffers = (PFNGLGENBUFFERSPROC)glXGetProcAddress((GLubyte *)"glGenBuffers");
+    glBindBuffer = (PFNGLBINDBUFFERPROC)glXGetProcAddress((GLubyte *)"glBindBuffer");
+    glBufferData = (PFNGLBUFFERDATAPROC)glXGetProcAddress((GLubyte *)"glBufferData");
+    glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)glXGetProcAddress((GLubyte *)"glVertexAttribPointer");
+    glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)glXGetProcAddress((GLubyte *)"glEnableVertexAttribArray");
+    glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)glXGetProcAddress((GLubyte *)"glDrawElementsBaseVertex");
+    glCreateProgram = (PFNGLCREATEPROGRAMPROC)glXGetProcAddress((GLubyte *)"glCreateProgram");
+    glCreateShader = (PFNGLCREATESHADERPROC)glXGetProcAddress((GLubyte *)"glCreateShader");
+    glShaderSource = (PFNGLSHADERSOURCEPROC)glXGetProcAddress((GLubyte *)"glShaderSource");
+    glCompileShader = (PFNGLCOMPILESHADERPROC)glXGetProcAddress((GLubyte *)"glCompileShader");
+    glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)glXGetProcAddress((GLubyte *)"glGetShaderInfoLog");
+    glAttachShader = (PFNGLATTACHSHADERPROC)glXGetProcAddress((GLubyte *)"glAttachShader");
+    glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)glXGetProcAddress((GLubyte *)"glBindAttribLocation");
+    glLinkProgram = (PFNGLLINKPROGRAMPROC)glXGetProcAddress((GLubyte *)"glLinkProgram");
+    glUseProgram = (PFNGLUSEPROGRAMPROC)glXGetProcAddress((GLubyte *)"glUseProgram");
+    glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)glXGetProcAddress((GLubyte *)"glUniformMatrix4fv");
+    glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)glXGetProcAddress((GLubyte *)"glGetUniformLocation");
+#elif defined(_WIN32)
+
+#endif
+}
+
+// px, py, pz, nx, ny, nz, tx, ty
+static const GLfloat cubeVertexData[] = {
+     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f,
+    -0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
+    -0.5f,-0.5f, 0.5f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
+     0.5f,-0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
+
+    -0.5f,-0.5f,-0.5f, 0.0f, 0.0f, 0.0f, 0.0f,-1.0f,
+    -0.5f, 0.5f,-0.5f, 1.0f, 0.0f, 0.0f, 0.0f,-1.0f,
+     0.5f, 0.5f,-0.5f, 1.0f, 1.0f, 0.0f, 0.0f,-1.0f,
+     0.5f,-0.5f,-0.5f, 0.0f, 1.0f, 0.0f, 0.0f,-1.0f,
+
+     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f,
+     0.5f, 0.5f,-0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
+    -0.5f, 0.5f,-0.5f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
+    -0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
+
+    -0.5f,-0.5f,-0.5f, 0.0f, 0.0f, 0.0f,-1.0f, 0.0f,
+     0.5f,-0.5f,-0.5f, 1.0f, 0.0f, 0.0f,-1.0f, 0.0f,
+     0.5f,-0.5f, 0.5f, 1.0f, 1.0f, 0.0f,-1.0f, 0.0f,
+    -0.5f,-0.5f, 0.5f, 0.0f, 1.0f, 0.0f,-1.0f, 0.0f,
+
+     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
+     0.5f,-0.5f, 0.5f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f,
+     0.5f,-0.5f,-0.5f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
+     0.5f, 0.5f,-0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
+
+    -0.5f,-0.5f,-0.5f, 0.0f, 0.0f,-1.0f, 0.0f, 0.0f,
+    -0.5f,-0.5f, 0.5f, 1.0f, 0.0f,-1.0f, 0.0f, 0.0f,
+    -0.5f, 0.5f, 0.5f, 1.0f, 1.0f,-1.0f, 0.0f, 0.0f,
+    -0.5f, 0.5f,-0.5f, 0.0f, 1.0f,-1.0f, 0.0f, 0.0f
+};
+
+static const GLuint cubeIndices[] = {
+    0, 1, 2,
+    0, 2, 3
+}; // quad
+
+static const GLchar *vertexShaderSrc =
+{
+"#version 150 core\n\
+uniform mat4 mvp;\n\
+in vec3 position;\n\
+in vec2 texCoord;\n\
+in vec3 normal;\n\
+out vec2 vertexTexCoord;\n\
+out vec3 vertexNormal;\n\
+void main() {\n\
+    vertexTexCoord = texCoord;\n\
+    vertexNormal = normal;\n\
+    gl_Position = mvp * vec4(position, 1.0);\n\
+}\n\
+"
+};
+
+static const GLchar *fragmentShaderSrc =
+{
+"#version 150 core\n\
+uniform sampler2D colormap;\n\
+in vec3 vertexNormal;\n\
+in vec2 vertexTexCoord;\n\
+out vec4 fragColor;\n\
+void main() {\n\
+    fragColor = texture(colormap, vertexTexCoord);\n\
+}\n\
+"
+};
+
+TestGLCoreContext::TestGLCoreContext(wxGLCanvas *canvas)
+             : TestGLCubeRenderer(canvas)
+{
+    SetCurrent(*canvas);
+
+    CheckGLError();
+
+    InitGLCoreFunctionPointers();
+
+    // set up the parameters we want to use
+    glEnable(GL_CULL_FACE);
+    glEnable(GL_DEPTH_TEST);
+
+    glGenVertexArrays(1, &m_vao);
+    glBindVertexArray(m_vao);
+
+    glGenBuffers(2, m_vbos);
+    glBindBuffer(GL_ARRAY_BUFFER, m_vbos[0]);
+    
+    glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertexData), cubeVertexData, GL_STATIC_DRAW);
+
+    const GLsizei stride = 32; 
+    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (GLvoid *)0); // position
+    glEnableVertexAttribArray(0);
+    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, stride, (GLvoid *)12); // texcoord
+    glEnableVertexAttribArray(1);
+    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, stride, (GLvoid *)20); // normal
+    glEnableVertexAttribArray(2);
+
+    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_vbos[1]);
+    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(cubeIndices), cubeIndices, GL_STATIC_DRAW);
+
+    glBindBuffer(GL_ARRAY_BUFFER, 0); // not part of vao state
+
+    // create shader
+    m_shaderProgram = glCreateProgram();
+
+    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
+    glShaderSource(vertexShader, 1, &vertexShaderSrc, NULL);
+    glCompileShader(vertexShader);
+
+    GLchar log[256];
+    GLint logLength = 256;
+    glGetShaderInfoLog(vertexShader, logLength, &logLength, log);
+    if (logLength > 0)
+        wxLogDebug(wxString::FromAscii(log));
+
+    glAttachShader(m_shaderProgram, vertexShader);
+
+    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
+    glShaderSource(fragmentShader, 1, &fragmentShaderSrc, NULL);
+    glCompileShader(fragmentShader);
+
+    logLength = 256;
+    glGetShaderInfoLog(fragmentShader, logLength, &logLength, log);
+    if (logLength > 0)
+        wxLogDebug(wxString::FromAscii(log));
+
+    glAttachShader(m_shaderProgram, fragmentShader);
+
+    glBindAttribLocation(m_shaderProgram, 0, "position");
+    glBindAttribLocation(m_shaderProgram, 1, "texcoord");
+    glBindAttribLocation(m_shaderProgram, 2, "normal");
+
+    glLinkProgram(m_shaderProgram);
+    glUseProgram(m_shaderProgram);
+
+    glBindVertexArray(0);
+
+    CheckGLError();
+}
+
+void TestGLCoreContext::DrawRotatedCube(float xangle, float yangle)
+{
+    xangle *=  (float)M_PI / 180.0f;
+    yangle *=  (float)M_PI / 180.0f;
+    GLfloat c = cosf(yangle);
+    GLfloat s = sinf(yangle);
+    GLfloat modelMatrix[] = {
+           c, 0.0f,    s, 0.0f,
+        0.0f, 1.0f, 0.0f, 0.0f,
+          -s, 0.0f,    c, 0.0f,
+        0.0f, 0.0f, 0.0f, 1.0f
+    };
+
+    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+
+    glBindVertexArray(m_vao);
+    glUseProgram(m_shaderProgram);
+    glUniformMatrix4fv(glGetUniformLocation(m_shaderProgram, "mvp"), 1, GL_FALSE, modelMatrix);
+    for ( int i = 0; i < 6; i++ )
+    {
+        glBindTexture(GL_TEXTURE_2D, m_textures[i]);
+        glDrawElementsBaseVertex(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (GLvoid *)0, 4 * i);
+    }
+    glUseProgram(0);
+    glBindVertexArray(0);
+
+    CheckGLError();
+}
+
+// ----------------------------------------------------------------------------
 // MyApp: the application object
 // ----------------------------------------------------------------------------
 
@@ -268,16 +511,25 @@
 int MyApp::OnExit()
 {
     delete m_glContext;
+    delete m_glCoreContext;
     delete m_glStereoContext;
 
     return wxApp::OnExit();
 }
 
-TestGLContext& MyApp::GetContext(wxGLCanvas *canvas, bool useStereo)
+TestGLCubeRenderer& MyApp::GetRenderer(wxGLCanvas *canvas, bool useCore, bool useStereo)
 {
-    TestGLContext *glContext;
-    if ( useStereo )
+    TestGLCubeRenderer *glContext;
+    if ( useCore )
     {
+        if ( !m_glCoreContext )
+        {
+            m_glCoreContext = new TestGLCoreContext(canvas);
+        }
+        glContext = m_glCoreContext;
+    }
+    else if ( useStereo )
+    {
         if ( !m_glStereoContext )
         {
             // Create the OpenGL context for the first stereo window which needs it:
@@ -323,6 +575,7 @@
       m_xangle(30.0),
       m_yangle(30.0),
       m_spinTimer(this,SpinTimer),
+      m_useCore(false),
       m_useStereo(false),
       m_stereoWarningAlreadyDisplayed(false)
 {
@@ -331,7 +584,9 @@
         int i = 0;
         while ( attribList[i] != 0 )
         {
-            if ( attribList[i] == WX_GL_STEREO )
+            if ( attribList[i] == WX_GL_CORE_PROFILE )
+                m_useCore = true;
+            else if ( attribList[i] == WX_GL_STEREO )
                 m_useStereo = true;
             ++i;
         }
@@ -351,26 +606,28 @@
     // is wrong when next another canvas is repainted.
     const wxSize ClientSize = GetClientSize();
 
-    TestGLContext& canvas = wxGetApp().GetContext(this, m_useStereo);
+    TestGLCubeRenderer& canvas = wxGetApp().GetRenderer(this, m_useCore, m_useStereo);
     glViewport(0, 0, ClientSize.x, ClientSize.y);
 
     // Render the graphics and swap the buffers.
-    GLboolean quadStereoSupported;
-    glGetBooleanv( GL_STEREO, &quadStereoSupported);
-    if ( quadStereoSupported )
-    {
-        glDrawBuffer( GL_BACK_LEFT );
-        glMatrixMode(GL_PROJECTION);
-        glLoadIdentity();
-        glFrustum(-0.47f, 0.53f, -0.5f, 0.5f, 1.0f, 3.0f);
-        canvas.DrawRotatedCube(m_xangle, m_yangle);
-        CheckGLError();
-        glDrawBuffer( GL_BACK_RIGHT );
-        glMatrixMode(GL_PROJECTION);
-        glLoadIdentity();
-        glFrustum(-0.53f, 0.47f, -0.5f, 0.5f, 1.0f, 3.0f);
-        canvas.DrawRotatedCube(m_xangle, m_yangle);
-        CheckGLError();
+    if ( m_useStereo ) {
+        GLboolean quadStereoSupported;
+        glGetBooleanv( GL_STEREO, &quadStereoSupported);
+        if ( quadStereoSupported )
+        {
+            glDrawBuffer( GL_BACK_LEFT );
+            glMatrixMode(GL_PROJECTION);
+            glLoadIdentity();
+            glFrustum(-0.47f, 0.53f, -0.5f, 0.5f, 1.0f, 3.0f);
+            canvas.DrawRotatedCube(m_xangle, m_yangle);
+            CheckGLError();
+            glDrawBuffer( GL_BACK_RIGHT );
+            glMatrixMode(GL_PROJECTION);
+            glLoadIdentity();
+            glFrustum(-0.53f, 0.47f, -0.5f, 0.5f, 1.0f, 3.0f);
+            canvas.DrawRotatedCube(m_xangle, m_yangle);
+            CheckGLError();
+        }
     }
     else
     {
@@ -454,16 +711,21 @@
 
 wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(wxID_NEW, MyFrame::OnNewWindow)
+    EVT_MENU(NEW_CORE_WINDOW, MyFrame::OnNewCoreWindow)
     EVT_MENU(NEW_STEREO_WINDOW, MyFrame::OnNewStereoWindow)
     EVT_MENU(wxID_CLOSE, MyFrame::OnClose)
 wxEND_EVENT_TABLE()
 
-MyFrame::MyFrame( bool stereoWindow )
+MyFrame::MyFrame( bool coreWindow, bool stereoWindow )
        : wxFrame(NULL, wxID_ANY, wxT("wxWidgets OpenGL Cube Sample"))
 {
+    int coreAttribList[] = { WX_GL_RGBA, WX_GL_DOUBLEBUFFER, WX_GL_CORE_PROFILE,
+        WX_GL_MAJOR_VERSION, 3,
+        WX_GL_MINOR_VERSION, 2,
+        0 };
     int stereoAttribList[] = { WX_GL_RGBA, WX_GL_DOUBLEBUFFER, WX_GL_STEREO, 0 };
 
-    new TestGLCanvas(this, stereoWindow ? stereoAttribList : NULL);
+    new TestGLCanvas(this, coreWindow ? coreAttribList : (stereoWindow ? stereoAttribList : NULL));
 
     SetIcon(wxICON(sample));
 
@@ -470,6 +732,7 @@
     // Make a menubar
     wxMenu *menu = new wxMenu;
     menu->Append(wxID_NEW);
+    menu->Append(NEW_CORE_WINDOW, "New OpenGL core profile window");
     menu->Append(NEW_STEREO_WINDOW, "New Stereo Window");
     menu->AppendSeparator();
     menu->Append(wxID_CLOSE);
@@ -483,6 +746,8 @@
     SetClientSize(400, 400);
     Show();
 
+    wxLogDebug("OpenGL version: %s", glGetwxString(GL_VERSION));
+
     // test IsDisplaySupported() function:
     static const int attribs[] = { WX_GL_RGBA, WX_GL_DOUBLEBUFFER, 0 };
     wxLogStatus("Double-buffered display %s supported",
@@ -509,7 +774,12 @@
     new MyFrame();
 }
 
+void MyFrame::OnNewCoreWindow( wxCommandEvent& WXUNUSED(event) )
+{
+    new MyFrame(true, false);
+}
+
 void MyFrame::OnNewStereoWindow( wxCommandEvent& WXUNUSED(event) )
 {
-    new MyFrame(true);
+    new MyFrame(false, true);
 }
Index: samples/opengl/cube/cube.h
===================================================================
--- samples/opengl/cube/cube.h	(Revision 77022)
+++ samples/opengl/cube/cube.h	(Arbeitskopie)
@@ -13,8 +13,20 @@
 
 #include "wx/glcanvas.h"
 
+class TestGLCubeRenderer : public wxGLContext {
+public:
+    TestGLCubeRenderer(wxGLCanvas *canvas);
+
+    // render the cube showing it at given angles
+    virtual void DrawRotatedCube(float xangle, float yangle) = 0;
+
+protected:
+    // textures for the cube faces
+    GLuint m_textures[6];
+};
+
 // the rendering context used by all GL canvases
-class TestGLContext : public wxGLContext
+class TestGLContext : public TestGLCubeRenderer
 {
 public:
     TestGLContext(wxGLCanvas *canvas);
@@ -21,10 +33,20 @@
 
     // render the cube showing it at given angles
     void DrawRotatedCube(float xangle, float yangle);
+};
 
+class TestGLCoreContext : public TestGLCubeRenderer
+{
+public:
+    TestGLCoreContext(wxGLCanvas *canvas);
+
+    // render the cube showing it at given angles
+    void DrawRotatedCube(float xangle, float yangle);
+
 private:
-    // textures for the cube faces
-    GLuint m_textures[6];
+    GLuint m_vao;
+    GLuint m_vbos[2];
+    GLuint m_shaderProgram;
 };
 
 // Define a new application type
@@ -31,11 +53,11 @@
 class MyApp : public wxApp
 {
 public:
-    MyApp() { m_glContext = NULL; m_glStereoContext = NULL; }
+    MyApp() { m_glContext = NULL; m_glCoreContext = NULL; m_glStereoContext = NULL; }
 
     // Returns the shared context used by all frames and sets it as current for
     // the given canvas.
-    TestGLContext& GetContext(wxGLCanvas *canvas, bool useStereo);
+    TestGLCubeRenderer& GetRenderer(wxGLCanvas *canvas, bool useCore, bool useStereo);
 
     // virtual wxApp methods
     virtual bool OnInit() wxOVERRIDE;
@@ -44,6 +66,8 @@
 private:
     // the GL context we use for all our mono rendering windows
     TestGLContext *m_glContext;
+    // the GL context we use for all our OpenGL 3 core profile rendering windows
+    TestGLCoreContext *m_glCoreContext;
     // the GL context we use for all our stereo rendering windows
     TestGLContext *m_glStereoContext;
 };
@@ -52,11 +76,12 @@
 class MyFrame : public wxFrame
 {
 public:
-    MyFrame(bool stereoWindow = false);
+    MyFrame(bool coreWindow = false, bool stereoWindow = false);
 
 private:
     void OnClose(wxCommandEvent& event);
     void OnNewWindow(wxCommandEvent& event);
+    void OnNewCoreWindow(wxCommandEvent& event);
     void OnNewStereoWindow(wxCommandEvent& event);
 
     wxDECLARE_EVENT_TABLE();
@@ -78,6 +103,7 @@
           m_yangle;
 
     wxTimer m_spinTimer;
+    bool m_useCore;
     bool m_useStereo,
          m_stereoWarningAlreadyDisplayed;
 
@@ -86,7 +112,8 @@
 
 enum
 {
-    NEW_STEREO_WINDOW = wxID_HIGHEST + 1
+    NEW_CORE_WINDOW = wxID_HIGHEST + 1,
+    NEW_STEREO_WINDOW
 };
 
 #endif // _WX_CUBE_H_
Index: src/unix/glx11.cpp
===================================================================
--- src/unix/glx11.cpp	(Revision 77022)
+++ src/unix/glx11.cpp	(Arbeitskopie)
@@ -114,15 +114,9 @@
 
 IMPLEMENT_CLASS(wxGLContext, wxObject)
 
-// The window will always be created first so the array will be initialized
-// and then the window will be assigned to the context.
-// max 8 attributes plus terminator
-// if first is 0, create legacy context
-static int s_glxContextAttribs[9] = {0};
-
 wxGLContext::wxGLContext(wxGLCanvas *gc, const wxGLContext *other)
 {
-    if ( s_glxContextAttribs[0] != 0 ) // OpenGL 3 context creation
+    if ( gc->GetGLXContextAttribs()[0] != 0 ) // OpenGL 3 context creation
     {
         XVisualInfo *vi = gc->GetXVisualInfo();
         wxCHECK_RET( vi, wxT("invalid visual for OpenGL") );
@@ -148,7 +142,7 @@
 
         m_glContext = glXCreateContextAttribsARB( wxGetX11Display(), fbc[0],
             other ? other->m_glContext : None,
-            GL_TRUE, s_glxContextAttribs );
+            GL_TRUE, gc->GetGLXContextAttribs() );
 
         glXDestroyContext( wxGetX11Display(), tempContext );
     }
@@ -219,10 +213,13 @@
 {
     m_fbc = NULL;
     m_vi = NULL;
+    m_glxContextAttribs[0] = 0;
 }
 
 bool wxGLCanvasX11::InitVisual(const int *attribList)
 {
+    InitGLXContextAttribs(attribList, m_glxContextAttribs);     
+
     return InitXVisualInfo(attribList, &m_fbc, &m_vi);
 }
 
@@ -259,6 +256,57 @@
     return s_isMultiSampleAvailable != 0;
 }
 
+
+/* static */
+void wxGLCanvasX11::InitGLXContextAttribs(const int *wxattrs, int *wxctxattrs )
+{
+    wxctxattrs[0] = 0; // default is legacy context
+
+    if ( !wxattrs ) { // default attribs
+        return;
+    }
+
+    bool useGLCoreProfile = false;
+
+    // the minimum gl core version would be 3.0
+    int glVersionMajor = 3,
+        glVersionMinor = 0;
+
+    for ( int arg = 0; wxattrs[arg] != 0; )
+    {
+        switch ( wxattrs[arg++] )
+        {
+            case WX_GL_CORE_PROFILE:
+                useGLCoreProfile = true;
+                break;
+
+            case WX_GL_MAJOR_VERSION:
+                glVersionMajor = wxattrs[arg++];
+                break;
+
+            case WX_GL_MINOR_VERSION:
+                glVersionMinor = wxattrs[arg++];
+                break;
+
+            default: break;
+        }
+    }  
+
+    if ( useGLCoreProfile )
+    {
+        wxctxattrs[0] = GLX_CONTEXT_MAJOR_VERSION_ARB;
+        wxctxattrs[1] = glVersionMajor;
+        wxctxattrs[2] = GLX_CONTEXT_MINOR_VERSION_ARB;
+        wxctxattrs[3] = glVersionMinor;
+        wxctxattrs[4] = GLX_CONTEXT_FLAGS_ARB;
+        wxctxattrs[5] = GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
+        wxctxattrs[6] = GLX_CONTEXT_PROFILE_MASK_ARB;
+        wxctxattrs[7] = GLX_CONTEXT_CORE_PROFILE_BIT_ARB;
+        wxctxattrs[8] = 0; // terminate
+    }
+}
+
+/* static */
 bool
 wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
 {
@@ -278,8 +326,6 @@
           old version but must be followed by True or False in the new one.
      */
 
-    s_glxContextAttribs[0] = 0; // default is legacy context
-
     if ( !wxattrs )
     {
         size_t i = 0;
@@ -309,14 +355,6 @@
     }
     else // have non-default attributes
     {
-        // these will be used for the context creation attributes
-        // if a core profile is requested
-        bool useGLCoreProfile = false;
-
-        // the minimum gl core version is 3.0
-        int glVersionMajor = 3,
-            glVersionMinor = 0;
-
         size_t p = 0;
         for ( int arg = 0; wxattrs[arg] != 0; )
         {
@@ -433,16 +471,17 @@
 
                     return false;
 
+                // the following constants are context attribs
+                // ignore them
                 case WX_GL_CORE_PROFILE:
-                    useGLCoreProfile = true;
                     continue;
 
                 case WX_GL_MAJOR_VERSION:
-                    glVersionMajor = wxattrs[arg++];
+                    arg++; // skip int
                     continue;
 
                 case WX_GL_MINOR_VERSION:
-                    glVersionMinor = wxattrs[arg++];
+                    arg++; // skip int
                     continue;
 
                 default:
@@ -466,23 +505,6 @@
         }
 
         glattrs[p] = None;
-
-        if ( useGLCoreProfile )
-        {
-            s_glxContextAttribs[0] = GLX_CONTEXT_MAJOR_VERSION_ARB;
-            s_glxContextAttribs[1] = glVersionMajor;
-            s_glxContextAttribs[2] = GLX_CONTEXT_MINOR_VERSION_ARB;
-            s_glxContextAttribs[3] = glVersionMinor;
-            s_glxContextAttribs[4] = GLX_CONTEXT_FLAGS_ARB;
-            s_glxContextAttribs[5] = GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB;
-            s_glxContextAttribs[6] = GLX_CONTEXT_PROFILE_MASK_ARB;
-            s_glxContextAttribs[7] = GLX_CONTEXT_CORE_PROFILE_BIT_ARB;
-            s_glxContextAttribs[8] = 0; // terminate
-        }
-        else // create legacy/compatibility context
-        {
-            s_glxContextAttribs[0] = 0;
-        }
     }
 
     return true;

From e1f6c06fbd3fddc74e4a050eca869da7a06d056d Mon Sep 17 00:00:00 2001
From: Fabio Arnold <fabioarnold90@gmail.com>
Date: Mon, 4 Aug 2014 20:34:47 +0200
Subject: [PATCH 1/2] added OpenGL context profiles

---
 include/wx/glcanvas.h     | 12 +++++++++++-
 interface/wx/glcanvas.h   | 26 +++++++++++++++++++++++++-
 src/osx/cocoa/glcanvas.mm | 11 +++++++++++
 3 files changed, 47 insertions(+), 2 deletions(-)

diff --git a/include/wx/glcanvas.h b/include/wx/glcanvas.h
index 3b60eb0..27e6073 100644
--- a/include/wx/glcanvas.h
+++ b/include/wx/glcanvas.h
@@ -48,7 +48,17 @@ enum
     WX_GL_MIN_ACCUM_BLUE,  // use blue buffer with most bits (> MIN_ACCUM_BLUE bits)
     WX_GL_MIN_ACCUM_ALPHA, // use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits)
     WX_GL_SAMPLE_BUFFERS,  // 1 for multisampling support (antialiasing)
-    WX_GL_SAMPLES          // 4 for 2x2 antialiasing supersampling on most graphics cards
+    WX_GL_SAMPLES,         // 4 for 2x2 antialiasing supersampling on most graphics cards
+    WX_GL_CONTEXT_MAJOR_VERSION, // Specifies the major version number for the requested OpenGL context
+    WX_GL_CONTEXT_MINOR_VERSION, // Specifies the minor version number for the requested OpenGL context
+    WX_GL_CONTEXT_PROFILE_MASK   // Specifies the OpenGL context profile @see wxGL_CONTEXT_PROFILE_FLAGS
+};
+
+// Constants for use with WX_GL_CONTEXT_PROFILE_MASK.
+enum
+{
+    WX_GL_CONTEXT_PROFILE_CORE          = 0x0001, // OpenGL core profile
+    WX_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002  // OpenGL compatibility profile
 };
 
 #define wxGLCanvasName wxT("GLCanvas")
diff --git a/interface/wx/glcanvas.h b/interface/wx/glcanvas.h
index 49d120e..5f1ce94 100644
--- a/interface/wx/glcanvas.h
+++ b/interface/wx/glcanvas.h
@@ -137,7 +137,31 @@ enum
     WX_GL_SAMPLE_BUFFERS,
 
     /// 4 for 2x2 antialiasing supersampling on most graphics cards
-    WX_GL_SAMPLES
+    WX_GL_SAMPLES,
+
+    /// Specifies the major version number for the requested OpenGL context
+    WX_GL_CONTEXT_MAJOR_VERSION,
+
+    /// Specifies the minor version number for the requested OpenGL context
+    WX_GL_CONTEXT_MINOR_VERSION,
+
+    /// Specifies the OpenGL context profile @see wxGL_CONTEXT_PROFILE_FLAGS
+    WX_GL_CONTEXT_PROFILE_MASK
+
+};
+
+/**
+    @anchor wxGL_CONTEXT_PROFILE_FLAGS
+
+    Constants for use with WX_GL_CONTEXT_PROFILE_MASK.
+*/
+enum
+{
+    /// OpenGL core profile
+    WX_GL_CONTEXT_PROFILE_CORE          = 0x0001,
+
+    /// OpenGL compatibility profile
+    WX_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002
 
 };
 
diff --git a/src/osx/cocoa/glcanvas.mm b/src/osx/cocoa/glcanvas.mm
index e51fd34..5bf75ee 100644
--- a/src/osx/cocoa/glcanvas.mm
+++ b/src/osx/cocoa/glcanvas.mm
@@ -213,6 +213,17 @@ WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
                     data[p++] = NSOpenGLPFASamples;
                     data[p++] = (NSOpenGLPixelFormatAttribute) attribList[arg++];
                     break;
+
+                case WX_GL_CONTEXT_PROFILE_MASK:
+                    if ( attribList[arg++] == WX_GL_CONTEXT_PROFILE_CORE )
+                    {
+                        // TODO: check if OS X version is at least 10.7
+                        data[p++] = NSOpenGLPFAOpenGLProfile;
+                        // request core profile and version to be at least 3.2
+                        data[p++] = NSOpenGLProfileVersion3_2Core;
+                    }
+
+                    break;
             }
         }
 
-- 
1.8.5.2 (Apple Git-48)


From 4058c66be48ad4da24ef1f9518d07d6a1654136f Mon Sep 17 00:00:00 2001
From: Fabio Arnold <fabioarnold90@gmail.com>
Date: Tue, 5 Aug 2014 02:46:36 +0200
Subject: [PATCH 2/2] OpenGL core profile for Windows and Linux

---
 include/wx/glcanvas.h     |   6 +--
 interface/wx/glcanvas.h   |   6 ---
 src/msw/glcanvas.cpp      | 103 +++++++++++++++++++++++++++++++++++++--
 src/osx/cocoa/glcanvas.mm |   4 +-
 src/unix/glx11.cpp        | 121 +++++++++++++++++++++++++++++++++++++++++++++-
 5 files changed, 224 insertions(+), 16 deletions(-)

diff --git a/include/wx/glcanvas.h b/include/wx/glcanvas.h
index 27e6073..e3e9ff5 100644
--- a/include/wx/glcanvas.h
+++ b/include/wx/glcanvas.h
@@ -49,12 +49,10 @@ enum
     WX_GL_MIN_ACCUM_ALPHA, // use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits)
     WX_GL_SAMPLE_BUFFERS,  // 1 for multisampling support (antialiasing)
     WX_GL_SAMPLES,         // 4 for 2x2 antialiasing supersampling on most graphics cards
-    WX_GL_CONTEXT_MAJOR_VERSION, // Specifies the major version number for the requested OpenGL context
-    WX_GL_CONTEXT_MINOR_VERSION, // Specifies the minor version number for the requested OpenGL context
-    WX_GL_CONTEXT_PROFILE_MASK   // Specifies the OpenGL context profile @see wxGL_CONTEXT_PROFILE_FLAGS
+    WX_GL_CONTEXT_PROFILE_MASK   // Specifies the OpenGL context profile @see wxGL_CONTEXT_PROFILE_FLAGS @since 3.1.0
 };
 
-// Constants for use with WX_GL_CONTEXT_PROFILE_MASK.
+// Constants for use with WX_GL_CONTEXT_PROFILE_MASK @since 3.1.0
 enum
 {
     WX_GL_CONTEXT_PROFILE_CORE          = 0x0001, // OpenGL core profile
diff --git a/interface/wx/glcanvas.h b/interface/wx/glcanvas.h
index 5f1ce94..8a92d37 100644
--- a/interface/wx/glcanvas.h
+++ b/interface/wx/glcanvas.h
@@ -139,12 +139,6 @@ enum
     /// 4 for 2x2 antialiasing supersampling on most graphics cards
     WX_GL_SAMPLES,
 
-    /// Specifies the major version number for the requested OpenGL context
-    WX_GL_CONTEXT_MAJOR_VERSION,
-
-    /// Specifies the minor version number for the requested OpenGL context
-    WX_GL_CONTEXT_MINOR_VERSION,
-
     /// Specifies the OpenGL context profile @see wxGL_CONTEXT_PROFILE_FLAGS
     WX_GL_CONTEXT_PROFILE_MASK
 
diff --git a/src/msw/glcanvas.cpp b/src/msw/glcanvas.cpp
index 7beb05c..e102893 100644
--- a/src/msw/glcanvas.cpp
+++ b/src/msw/glcanvas.cpp
@@ -45,7 +45,7 @@ LRESULT WXDLLEXPORT APIENTRY _EXPORT wxWndProc(HWND hWnd, UINT message,
 #endif
 
 // ----------------------------------------------------------------------------
-// define possibly missing WGL constants
+// define possibly missing WGL constants and types
 // ----------------------------------------------------------------------------
 
 #ifndef WGL_ARB_pixel_format
@@ -76,6 +76,49 @@ LRESULT WXDLLEXPORT APIENTRY _EXPORT wxWndProc(HWND hWnd, UINT message,
 #define WGL_SAMPLES_ARB                   0x2042
 #endif
 
+#ifndef WGL_ARB_create_context
+#define WGL_ARB_create_context
+#define WGL_CONTEXT_MAJOR_VERSION_ARB   0x2091
+#define WGL_CONTEXT_MINOR_VERSION_ARB   0x2092
+#define WGL_CONTEXT_LAYER_PLANE_ARB     0x2093
+#define WGL_CONTEXT_FLAGS_ARB           0x2094
+#define WGL_CONTEXT_DEBUG_BIT_ARB       0x0001
+#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB  0x0002
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_ARB_create_context_profile
+#define WGL_CONTEXT_PROFILE_MASK_ARB              0x9126
+#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB          0x00000001
+#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
+#endif
+
+#ifndef WGL_ARB_create_context_robustness
+#define WGL_ARB_create_context_robustness
+#define WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB         0x00000004
+#define WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB     0x8256
+#define WGL_NO_RESET_NOTIFICATION_ARB                   0x8261
+#define WGL_LOSE_CONTEXT_ON_RESET_ARB                   0x8252
+#endif
+#endif
+
+#ifndef WGL_EXT_create_context_es2_profile
+#define WGL_EXT_create_context_es2_profile
+#define WGL_CONTEXT_ES2_PROFILE_BIT_EXT           0x00000004
+#endif
+
+#ifndef WGL_EXT_create_context_es_profile
+#define WGL_EXT_create_context_es_profile
+#define WGL_CONTEXT_ES_PROFILE_BIT_EXT            0x00000004
+#endif
+
+#ifndef WGL_ARB_framebuffer_sRGB
+#define WGL_ARB_framebuffer_sRGB
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB                0x20A9
+#endif
+
+typedef HGLRC(APIENTRYP PFNWGLCREATECONTEXTATTRIBSARBPROC)
+    (HDC hDC, HGLRC hShareContext, const int *attribList);
+
 // ----------------------------------------------------------------------------
 // libraries
 // ----------------------------------------------------------------------------
@@ -108,10 +151,42 @@ LRESULT WXDLLEXPORT APIENTRY _EXPORT wxWndProc(HWND hWnd, UINT message,
 
 IMPLEMENT_CLASS(wxGLContext, wxObject)
 
+// This is ugly. It would be nicer to be able to pass context flags
+// and the context profile as an argument. Right now context (flags and)
+// profile are specified in the context pixelformat.
+// The window will always be created first so the array will be initialized
+// and then the window will be assigned to the context.
+// max 8 attributes plus terminator
+// if first is 0, create legacy context
+static int s_wglContextAttribs[9] = {0};
+
 wxGLContext::wxGLContext(wxGLCanvas *win, const wxGLContext* other)
 {
-    m_glContext = wglCreateContext(win->GetHDC());
-    wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
+    if ( s_wglContextAttribs[0] == 0 ) // create legacy context
+    {
+        m_glContext = wglCreateContext(win->GetHDC());
+        wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
+    }
+    else // create a context using attributes
+    {
+        // We need to create a temporary context to get the
+        // wglCreateContextAttribsARB function
+        HGLRC tempContext = wglCreateContext(win->GetHDC());
+        wxCHECK_RET( tempContext, wxT("Couldn't create OpenGL context") );
+        wglMakeCurrent(win->GetHDC(), tempContext);
+        PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB
+            = (PFNWGLCREATECONTEXTATTRIBSARBPROC)
+            wglGetProcAddress("wglCreateContextAttribsARB");
+        wglMakeCurrent(win->GetHDC(), NULL);
+        wglDeleteContext(tempContext);
+
+        wxCHECK_RET( wglCreateContextAttribsARB,
+            wxT("OpenGL 3.x is not supported") );
+        
+        m_glContext = wglCreateContextAttribsARB(
+            win->GetHDC(), 0, s_wglContextAttribs);
+        wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
+    }
 
     if ( other )
     {
@@ -235,6 +310,28 @@ bool wxGLCanvas::Create(wxWindow *parent,
     if ( !CreateWindow(parent, id, pos, size, style, name) )
         return false;
 
+    // Find out whether a core profile is requested
+    bool useCoreProfile = false;
+    for ( int i = 0; attribList[i]; i++ )
+    {
+        if ( attribList[i] == WX_GL_CONTEXT_PROFILE_MASK && attribList[i+1] == WX_GL_CONTEXT_PROFILE_CORE )
+        {
+            useCoreProfile = true;
+            break;
+        }
+    }
+
+    if ( useCoreProfile )
+    {
+        s_wglContextAttribs[0] = WGL_CONTEXT_PROFILE_MASK_ARB;
+        s_wglContextAttribs[1] = WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
+        s_wglContextAttribs[2] = 0; // terminate
+    }
+    else
+    {
+        s_wglContextAttribs[0] = 0; // create legacy context
+    }
+
     PIXELFORMATDESCRIPTOR pfd;
     const int setupVal = DoSetup(pfd, attribList);
     if ( setupVal == 0 ) // PixelFormat error
diff --git a/src/osx/cocoa/glcanvas.mm b/src/osx/cocoa/glcanvas.mm
index 5bf75ee..62f39fe 100644
--- a/src/osx/cocoa/glcanvas.mm
+++ b/src/osx/cocoa/glcanvas.mm
@@ -217,9 +217,9 @@ WXGLPixelFormat WXGLChoosePixelFormat(const int *attribList)
                 case WX_GL_CONTEXT_PROFILE_MASK:
                     if ( attribList[arg++] == WX_GL_CONTEXT_PROFILE_CORE )
                     {
-                        // TODO: check if OS X version is at least 10.7
                         data[p++] = NSOpenGLPFAOpenGLProfile;
-                        // request core profile and version to be at least 3.2
+                        // request an OpenGL core profile
+                        // the OpenGL version will be at least 3.2
                         data[p++] = NSOpenGLProfileVersion3_2Core;
                     }
 
diff --git a/src/unix/glx11.cpp b/src/unix/glx11.cpp
index ec2bd5b..eb2e13e 100644
--- a/src/unix/glx11.cpp
+++ b/src/unix/glx11.cpp
@@ -36,15 +36,123 @@
     #endif
 #endif // __SGI__
 
+// ----------------------------------------------------------------------------
+// define possibly missing XGL constants and types
+// ----------------------------------------------------------------------------
+
+#ifndef GLX_NONE_EXT
+#define GLX_NONE_EXT                       0x8000
+#endif
+
+#ifndef GLX_ARB_multisample
+#define GLX_ARB_multisample
+#define GLX_SAMPLE_BUFFERS_ARB             100000
+#define GLX_SAMPLES_ARB                    100001
+#endif
+
+#ifndef GLX_EXT_visual_rating
+#define GLX_EXT_visual_rating
+#define GLX_VISUAL_CAVEAT_EXT              0x20
+#define GLX_NONE_EXT                       0x8000
+#define GLX_SLOW_VISUAL_EXT                0x8001
+#define GLX_NON_CONFORMANT_VISUAL_EXT      0x800D
+#endif
+
+#ifndef GLX_EXT_visual_info
+#define GLX_EXT_visual_info
+#define GLX_X_VISUAL_TYPE_EXT              0x22
+#define GLX_DIRECT_COLOR_EXT               0x8003
+#endif
+
+#ifndef GLX_ARB_create_context
+#define GLX_ARB_create_context
+#define GLX_CONTEXT_MAJOR_VERSION_ARB      0x2091
+#define GLX_CONTEXT_MINOR_VERSION_ARB      0x2092
+#define GLX_CONTEXT_FLAGS_ARB              0x2094
+#define GLX_CONTEXT_DEBUG_BIT_ARB          0x0001
+#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x0002
+
+/* Typedef for the GL 3.0 context creation function */
+typedef GLXContext(*PFNGLXCREATECONTEXTATTRIBSARBPROC)
+    (Display * dpy, GLXFBConfig config, GLXContext share_context,
+    Bool direct, const int *attrib_list);
+#endif
+
+#ifndef GLX_ARB_create_context_profile
+#define GLX_ARB_create_context_profile
+#define GLX_CONTEXT_PROFILE_MASK_ARB       0x9126
+#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB   0x00000001
+#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
+#endif
+
+#ifndef GLX_ARB_create_context_robustness
+#define GLX_ARB_create_context_robustness
+#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB  0x00000004
+#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB     0x8256
+#define GLX_NO_RESET_NOTIFICATION_ARB                   0x8261
+#define GLX_LOSE_CONTEXT_ON_RESET_ARB                   0x8252
+#endif
+
+#ifndef GLX_EXT_create_context_es2_profile
+#define GLX_EXT_create_context_es2_profile
+#ifndef GLX_CONTEXT_ES2_PROFILE_BIT_EXT
+#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT    0x00000002
+#endif
+#endif
+
+#ifndef GLX_ARB_framebuffer_sRGB
+#define GLX_ARB_framebuffer_sRGB
+#ifndef GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB
+#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB                0x20B2
+#endif
+#endif
+
+
 // ============================================================================
 // wxGLContext implementation
 // ============================================================================
 
 IMPLEMENT_CLASS(wxGLContext, wxObject)
 
+// This is ugly. It would be nicer to be able to pass context flags
+// and the context profile as an argument. Right now context (flags and)
+// profile are specified in the context pixelformat.
+// The window will always be created first so the array will be initialized
+// and then the window will be assigned to the context.
+// max 8 attributes plus terminator
+// if first is 0, create legacy context
+static int s_glxContextAttribs[9] = {0};
+
 wxGLContext::wxGLContext(wxGLCanvas *gc, const wxGLContext *other)
 {
-    if ( wxGLCanvas::GetGLXVersion() >= 13 )
+    if ( s_glxContextAttribs[0] != 0 ) // OpenGL 3 context creation
+    {
+        XVisualInfo *vi = gc->GetXVisualInfo();
+        wxCHECK_RET( vi, wxT("invalid visual for OpenGL") );
+
+        // We need to create a temporary context to get the
+        // glXCreateContextAttribsARB function
+        GLXContext tempContext = glXCreateContext( wxGetX11Display(), vi,
+                                                   NULL,
+                                                   GL_TRUE );
+        wxCHECK_RET( tempContext, wxT("Couldn't create OpenGL context") );
+
+        PFNGLXCREATECONTEXTATTRIBSARBPROC glXCreateContextAttribsARB
+            = (PFNGLXCREATECONTEXTATTRIBSARBPROC)
+            glXGetProcAddress((GLubyte *)"glXCreateContextAttribsARB");
+        wxCHECK_RET( glXCreateContextAttribsARB,
+            wxT("OpenGL 3.x is not supported") );
+
+        GLXFBConfig *fbc = gc->GetGLXFBConfig();
+        wxCHECK_RET( fbc, wxT("invalid GLXFBConfig for OpenGL") );
+
+        m_glContext = glXCreateContextAttribsARB( wxGetX11Display(), fbc[0],
+            other ? other->m_glContext : None,
+            s_glxContextAttribs );
+
+        glXDestroyContext( wxGetX11Display(), tempContext );
+    }
+    else if ( wxGLCanvas::GetGLXVersion() >= 13 )
     {
         GLXFBConfig *fbc = gc->GetGLXFBConfig();
         wxCHECK_RET( fbc, wxT("invalid GLXFBConfig for OpenGL") );
@@ -170,6 +278,8 @@ wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
           old version but must be followed by True or False in the new one.
      */
 
+    s_glxContextAttribs[0] = 0; // default is legacy context
+
     if ( !wxattrs )
     {
         size_t i = 0;
@@ -315,6 +425,15 @@ wxGLCanvasX11::ConvertWXAttrsToGL(const int *wxattrs, int *glattrs, size_t n)
 
                     return false;
 
+                case WX_GL_CONTEXT_PROFILE_MASK:
+                    if ( wxattrs[arg++] == WX_GL_CONTEXT_PROFILE_CORE )
+                    {
+                        s_glxContextAttribs[0] = GLX_CONTEXT_PROFILE_MASK_ARB;
+                        s_glxContextAttribs[1] = GLX_CONTEXT_CORE_PROFILE_BIT_ARB;
+                        s_glxContextAttribs[2] = 0;
+                    }
+                    break;
+
                 default:
                     wxLogDebug(wxT("Unsupported OpenGL attribute %d"),
                                wxattrs[arg - 1]);
-- 
1.8.5.2 (Apple Git-48)


Index: include/wx/unix/stdpaths.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/unix/stdpaths.h,v
retrieving revision 1.4
diff -u2 -r1.4 include/wx/unix/stdpaths.h
--- include/wx/unix/stdpaths.h
+++ include/wx/unix/stdpaths.h
@@ -20,4 +20,8 @@
 {
 public:
+    // tries to determine the installation prefix automatically (Linux only right
+    // now) and returns /usr/local if it failed
+    void DetectPrefix();
+
     // set the program installation directory which is /usr/local by default
     //
@@ -30,6 +34,5 @@
     //
     // if the prefix had been previously by SetInstallPrefix, returns that
-    // value, otherwise tries to determine it automatically (Linux only right
-    // now) and returns /usr/local if it failed
+    // value, otherwise calls DetectPrefix()
     wxString GetInstallPrefix() const;
 
Index: src/unix/stdpaths.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/stdpaths.cpp,v
retrieving revision 1.14
diff -u2 -r1.14 src/unix/stdpaths.cpp
--- src/unix/stdpaths.cpp
+++ src/unix/stdpaths.cpp
@@ -107,32 +107,52 @@
 // ============================================================================
 
-wxString wxStandardPaths::GetInstallPrefix() const
+void wxStandardPaths::DetectPrefix()
 {
-    if ( m_prefix.empty() )
+#ifdef __LINUX__
+    // under Linux, we can try to infer the prefix from the location of the
+    // executable
+    char buf[4096];
+    wxString exeStr;
+
+    int result = readlink("/proc/self/exe", buf, WXSIZEOF(buf) - sizeof(char));
+    if ( result != -1 )
     {
-        wxStandardPaths *pathPtr = wx_const_cast(wxStandardPaths *, this);
+        buf[result] = '\0'; // readlink() doesn't NUL-terminate the buffer
 
-#ifdef __LINUX__
-        // under Linux, we can try to infer the prefix from the location of the
-        // executable
-        char buf[4096];
-        int result = readlink("/proc/self/exe", buf, WXSIZEOF(buf) - sizeof(char));
-        if ( result != -1 )
-        {
-            buf[result] = '\0'; // readlink() doesn't NUL-terminate the buffer
-
-            const wxString exeStr(buf, wxConvLibc);
-
-            // consider that we're in the last "bin" subdirectory of our prefix
-            size_t pos = exeStr.rfind(wxT("/bin/"));
-            if ( pos != wxString::npos )
-                pathPtr->m_prefix.assign(exeStr, 0, pos);
-        }
+        // if the /proc/self/exe symlink has been dropped by the kernel for some reason,
+        // then readlink() could also return success but "(deleted)" as link destination...
+        if (strcmp(buf, "(deleted)") != 0)
+            exeStr = wxString(buf, wxConvLibc);
+    }
+
+    if ( exeStr.empty() )
+    {
+        // UPX-specific hack: when using UPX on linux, the kernel will drop the
+        // /proc/self/exe link; in this case we try to look for a special environment
+        // variable called "   " which is created by UPX to save /proc/self/exe contents.
+        // See
+        //       https://sourceforge.net/tracker/?func=detail&atid=309863&aid=1565357&group_id=9863
+        // for more info about this issue.
+        wxGetEnv(wxT("   "), &exeStr);
+    }
+
+    // consider that we're in the last "bin" subdirectory of our prefix
+    size_t pos = exeStr.rfind(wxT("/bin/"));
+    if ( pos != wxString::npos )
+        m_prefix.assign(exeStr, 0, pos);
 #endif // __LINUX__
 
-        if ( m_prefix.empty() )
-        {
-            pathPtr->m_prefix = wxT("/usr/local");
-        }
+    if ( m_prefix.empty() )
+    {
+        m_prefix = wxT("/usr/local");
+    }
+}
+
+wxString wxStandardPaths::GetInstallPrefix() const
+{
+    if ( m_prefix.empty() )
+    {
+        wxStandardPaths *pathPtr = wx_const_cast(wxStandardPaths *, this);
+        pathPtr->DetectPrefix();
     }
 

 	  	 

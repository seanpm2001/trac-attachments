diff -u -r ../wxWidgets.orig/docs/latex/wx/text.tex ./docs/latex/wx/text.tex
--- ../wxWidgets.orig/docs/latex/wx/text.tex	Fri May  5 10:27:25 2006
+++ ./docs/latex/wx/text.tex	Fri May  5 18:41:09 2006
@@ -196,6 +196,15 @@
 
 Returns {\tt true} if this style specifies any non-default attributes.
 
+\membersection{wxTextAttr::Merge}\label{wxtextattrmerge}
+
+\func{void}{Merge}{\param{const wxTextAttr\&}{ overlay}}
+
+Copies defined/valid properties from {\tt overlay} to current object.
+
+\func{static wxTextAttr}{Merge}{\param{const wxTextAttr\&}{ base}, \param{const wxTextAttr\&}{ overlay}}
+
+Creates a new {\tt wxTextAttr} which is a merge of {\tt base} and {\tt overlay}. Properties defined in {\tt overlay} take precedence over those in {\tt base}. Properties undefined/invalid in both are undefined in the result.
 
 \membersection{wxTextAttr::SetAlignment}\label{wxtextattrsetalignment}
 
Only in ./docs/latex/wx: text.tex.orig
diff -u -r ../wxWidgets.orig/include/wx/textctrl.h ./include/wx/textctrl.h
--- ../wxWidgets.orig/include/wx/textctrl.h	Fri May  5 10:27:31 2006
+++ ./include/wx/textctrl.h	Fri May  5 18:33:52 2006
@@ -197,6 +197,17 @@
     // operations
     void Init();
 
+    // Similar to Combine function below. Merges add properties from overlay to
+    // object (or to base and store it in the result in the static version).
+    void Merge(const wxTextAttr& overlay);
+    
+    // WARNING: the order of arguments is the opposite of Combine, it is more
+    // natural, I think. Because this is intended for end-user who doesn't use
+    // Combine, this seems fine.
+    static wxTextAttr Merge(const wxTextAttr& base,
+                            const wxTextAttr& overlay);
+
+    
     // operators
     void operator= (const wxTextAttr& attr);
 
diff -u -r ../wxWidgets.orig/src/common/textcmn.cpp ./src/common/textcmn.cpp
--- ../wxWidgets.orig/src/common/textcmn.cpp	Fri May  5 10:27:51 2006
+++ ./src/common/textcmn.cpp	Fri May  5 14:42:24 2006
@@ -84,6 +84,53 @@
     m_rightIndent = 0;
 }
 
+
+/* static */
+wxTextAttr wxTextAttr::Merge(const wxTextAttr& base,
+                             const wxTextAttr& overlay)
+{
+    wxFont font = overlay.GetFont();
+    if ( !font.Ok() )
+        font = base.GetFont();
+
+    wxColour colFg = overlay.GetTextColour();
+    if ( !colFg.Ok() )
+        colFg = base.GetTextColour();
+
+    wxColour colBg = overlay.GetBackgroundColour();
+    if ( !colBg.Ok() )
+        colBg = base.GetBackgroundColour();
+
+    wxTextAttr newAttr(colFg, colBg, font);
+
+    if (overlay.HasAlignment())
+        newAttr.SetAlignment(overlay.GetAlignment());
+    else if (base.HasAlignment())
+        newAttr.SetAlignment(base.GetAlignment());
+
+    if (overlay.HasTabs())
+        newAttr.SetTabs(overlay.GetTabs());
+    else if (base.HasTabs())
+        newAttr.SetTabs(base.GetTabs());
+
+    if (overlay.HasLeftIndent())
+        newAttr.SetLeftIndent(overlay.GetLeftIndent(), overlay.GetLeftSubIndent());
+    else if (base.HasLeftIndent())
+        newAttr.SetLeftIndent(base.GetLeftIndent(), overlay.GetLeftSubIndent());
+
+    if (overlay.HasRightIndent())
+        newAttr.SetRightIndent(overlay.GetRightIndent());
+    else if (base.HasRightIndent())
+        newAttr.SetRightIndent(base.GetRightIndent());
+
+    return newAttr;
+}
+
+void wxTextAttr::Merge(const wxTextAttr& overlay)
+{
+    *this = Merge(*this, overlay);
+}
+
 /* static */
 wxTextAttr wxTextAttr::Combine(const wxTextAttr& attr,
                                const wxTextAttr& attrDef,

 	  	 

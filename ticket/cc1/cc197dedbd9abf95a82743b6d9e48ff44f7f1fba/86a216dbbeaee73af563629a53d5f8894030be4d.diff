---
 samples/ipc/client.cpp |   58 +++++++++++++++++++++++++++++--------------------
 samples/ipc/client.h   |   10 ++++----
 samples/ipc/server.cpp |   52 +++++++++++++++++++++++++++----------------
 samples/ipc/server.h   |   12 +++++-----
 4 files changed, 78 insertions(+), 54 deletions(-)

Index: wxWidgets/samples/ipc/client.cpp
===================================================================
--- wxWidgets.orig/samples/ipc/client.cpp
+++ wxWidgets/samples/ipc/client.cpp
@@ -337,14 +337,14 @@ void MyFrame::OnExecute(wxCommandEvent& 
     {
         wxString s = _T("Date");
 
-        m_client->GetConnection()->Execute((const wxChar *)s.c_str());
-        m_client->GetConnection()->Execute((const wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
+        m_client->GetConnection()->Execute(s);
+        m_client->GetConnection()->Execute((const char *)s.c_str(), s.Length() + 1);
 #if wxUSE_DDE_FOR_IPC
         wxLogMessage(_T("DDE Execute can only be used to send text strings, not arbitrary data.\nThe type argument will be ignored, text truncated, converted to Unicode and null terminated."));
 #endif
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
-        m_client->GetConnection()->Execute((wxChar *)bytes, 3, wxIPC_PRIVATE);
+        m_client->GetConnection()->Execute(bytes, 3, wxIPC_PRIVATE);
     }
 }
 
@@ -353,12 +353,12 @@ void MyFrame::OnPoke(wxCommandEvent& WXU
     if (m_client->IsConnected())
     {
         wxString s = wxDateTime::Now().Format();
-        m_client->GetConnection()->Poke(_T("Date"), (const wxChar *)s.c_str());
+        m_client->GetConnection()->Poke(_T("Date"), s);
         s = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
-        m_client->GetConnection()->Poke(_T("Date"), (const wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
+        m_client->GetConnection()->Poke(_T("Date"), (const char *)s.c_str(), s.Length() + 1);
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
-        m_client->GetConnection()->Poke(_T("bytes[3]"), (wxChar *)bytes, 3, wxIPC_PRIVATE);
+        m_client->GetConnection()->Poke(_T("bytes[3]"), bytes, 3, wxIPC_PRIVATE);
     }
 }
 
@@ -366,7 +366,7 @@ void MyFrame::OnRequest(wxCommandEvent& 
 {
     if (m_client->IsConnected())
     {
-        int size;
+        size_t size;
         m_client->GetConnection()->Request(_T("Date"));
         m_client->GetConnection()->Request(_T("Date+len"), &size);
         m_client->GetConnection()->Request(_T("bytes[3]"), &size, wxIPC_PRIVATE);
@@ -417,7 +417,7 @@ MyClient::~MyClient()
 // ----------------------------------------------------------------------------
 
 void MyConnection::Log(const wxString& command, const wxString& topic,
-    const wxString& item, const wxChar *data, int size, wxIPCFormat format)
+    const wxString& item, const void *data, size_t size, wxIPCFormat format)
 {
     wxString s;
     if (topic.IsEmpty() && item.IsEmpty())
@@ -429,10 +429,17 @@ void MyConnection::Log(const wxString& c
     else
         s.Printf(_T("%s(topic=\"%s\",item=\"%s\","), command.c_str(), topic.c_str(), item.c_str());
 
-    if (format == wxIPC_TEXT || format == wxIPC_UNICODETEXT)
-        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
-    else if (format == wxIPC_PRIVATE)
+    switch (format)
     {
+      case wxIPC_TEXT:
+      case wxIPC_UTF8TEXT:
+#if !wxUSE_UNICODE || wxUSE_UNICODE_UTF8
+        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
+#else
+        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), wxConvUTF8.cMB2WC((const char*)data), size);
+#endif
+        break;
+      case wxIPC_PRIVATE:
         if (size == 3)
         {
             char *bytes = (char *)data;
@@ -440,13 +447,18 @@ void MyConnection::Log(const wxString& c
         }
         else
             wxLogMessage(_T("%s...,%d)"), s.c_str(), size);
-    }
-    else if (format == wxIPC_INVALID)
+        break;
+      case wxIPC_INVALID:
         wxLogMessage(_T("%s[invalid data],%d)"), s.c_str(), size);
+        break;
+      default:
+        wxLogMessage(_T("%s[unknown data],%d)"), s.c_str(), size);
+        break;
+    }
 }
 
-bool MyConnection::OnAdvise(const wxString& topic, const wxString& item, wxChar *data,
-    int size, wxIPCFormat format)
+bool MyConnection::OnAdvise(const wxString& topic, const wxString& item, const void *data,
+    size_t size, wxIPCFormat format)
 {
     Log(_T("OnAdvise"), topic, item, data, size, format);
     return true;
@@ -459,24 +471,24 @@ bool MyConnection::OnDisconnect()
     return true;
 }
 
-bool MyConnection::Execute(const wxChar *data, int size, wxIPCFormat format)
+bool MyConnection::DoExecute(const void *data, size_t size, wxIPCFormat format)
 {
-    Log(_T("Execute"), wxEmptyString, wxEmptyString, (wxChar *)data, size, format);
-    bool retval = wxConnection::Execute(data, size, format);
+    Log(_T("Execute"), wxEmptyString, wxEmptyString, data, size, format);
+    bool retval = wxConnection::DoExecute(data, size, format);
     if (!retval)
         wxLogMessage(_T("Execute failed!"));
     return retval;
 }
 
-wxChar *MyConnection::Request(const wxString& item, int *size, wxIPCFormat format)
+const void *MyConnection::Request(const wxString& item, size_t *size, wxIPCFormat format)
 {
-    wxChar *data =  wxConnection::Request(item, size, format);
-    Log(_T("Request"), wxEmptyString, item, data, size ? *size : -1, format);
+    const void *data =  wxConnection::Request(item, size, format);
+    Log(_T("Request"), wxEmptyString, item, data, size ? *size : (size_t)-1, format);
     return data;
 }
 
-bool MyConnection::Poke(const wxString& item, const wxChar *data, int size, wxIPCFormat format)
+bool MyConnection::DoPoke(const wxString& item, const void *data, size_t size, wxIPCFormat format)
 {
     Log(_T("Poke"), wxEmptyString, item, data, size, format);
-    return wxConnection::Poke(item, data, size, format);
+    return wxConnection::DoPoke(item, data, size, format);
 }
Index: wxWidgets/samples/ipc/client.h
===================================================================
--- wxWidgets.orig/samples/ipc/client.h
+++ wxWidgets/samples/ipc/client.h
@@ -81,14 +81,14 @@ protected:
 class MyConnection: public wxConnection
 {
 public:
-    virtual bool Execute(const wxChar *data, int size = -1, wxIPCFormat format = wxIPC_TEXT);
-    virtual wxChar *Request(const wxString& item, int *size = NULL, wxIPCFormat format = wxIPC_TEXT);
-    virtual bool Poke(const wxString& item, const wxChar *data, int size = -1, wxIPCFormat format = wxIPC_TEXT);
-    virtual bool OnAdvise(const wxString& topic, const wxString& item, wxChar *data, int size, wxIPCFormat format);
+    virtual bool DoExecute(const void *data, size_t size, wxIPCFormat format);
+    virtual const void *Request(const wxString& item, size_t *size = NULL, wxIPCFormat format = wxIPC_TEXT);
+    virtual bool DoPoke(const wxString& item, const void* data, size_t size, wxIPCFormat format);
+    virtual bool OnAdvise(const wxString& topic, const wxString& item, const void *data, size_t size, wxIPCFormat format);
     virtual bool OnDisconnect();
 protected:
     void Log(const wxString& command, const wxString& topic,
-        const wxString& item, const wxChar *data, int size, wxIPCFormat format);
+        const wxString& item, const void *data, size_t size, wxIPCFormat format);
 };
 
 class MyClient: public wxClient
Index: wxWidgets/samples/ipc/server.cpp
===================================================================
--- wxWidgets.orig/samples/ipc/server.cpp
+++ wxWidgets/samples/ipc/server.cpp
@@ -285,18 +285,18 @@ void MyServer::Advise()
     if (CanAdvise())
     {
         wxString s = wxDateTime::Now().Format();
-        m_connection->Advise(m_connection->m_sAdvise, s.c_str());
+        m_connection->Advise(m_connection->m_sAdvise, s);
         s = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
-        m_connection->Advise(m_connection->m_sAdvise, s.c_str(), (s.Length() + 1) * sizeof(wxChar));
+        m_connection->Advise(m_connection->m_sAdvise, (const char *)s.c_str(), s.Length() + 1);
 
 #if wxUSE_DDE_FOR_IPC
         wxLogMessage(_T("DDE Advise type argument cannot be wxIPC_PRIVATE. The client will receive it as wxIPC_TEXT, and receive the correct no of bytes, but not print a correct log entry."));
 #endif
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
-        m_connection->Advise(m_connection->m_sAdvise, (wxChar *)bytes, 3, wxIPC_PRIVATE);
+        m_connection->Advise(m_connection->m_sAdvise, bytes, 3, wxIPC_PRIVATE);
         // this works, but the log treats it as a string now
-//        m_connection->Advise(m_connection->m_sAdvise, (wxChar *)bytes, 3, wxIPC_TEXT );
+//        m_connection->Advise(m_connection->m_sAdvise, bytes, 3, wxIPC_TEXT );
     }
 }
 
@@ -314,34 +314,34 @@ MyConnection::~MyConnection()
 }
 
 bool MyConnection::OnExecute(const wxString& topic,
-    wxChar *data, int size, wxIPCFormat format)
+    const void *data, size_t size, wxIPCFormat format)
 {
     Log(_T("OnExecute"), topic, _T(""), data, size, format);
     return true;
 }
 
 bool MyConnection::OnPoke(const wxString& topic,
-    const wxString& item, wxChar *data, int size, wxIPCFormat format)
+    const wxString& item, const void *data, size_t size, wxIPCFormat format)
 {
     Log(_T("OnPoke"), topic, item, data, size, format);
     return wxConnection::OnPoke(topic, item, data, size, format);
 }
 
-const wxChar *MyConnection::OnRequest(const wxString& topic,
-    const wxString& item, int * size, wxIPCFormat format)
+const void *MyConnection::OnRequest(const wxString& topic,
+    const wxString& item, size_t *size, wxIPCFormat format)
 {
-    const wxChar *data;
+    const void *data;
     if (item == _T("Date"))
     {
         m_sRequestDate = wxDateTime::Now().Format();
         data = m_sRequestDate.c_str();
-        *size = -1;
+        *size = (size_t)-1;
     }    
     else if (item == _T("Date+len"))
     {
         m_sRequestDate = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
         data = m_sRequestDate.c_str();
-        *size = (m_sRequestDate.Length() + 1) * sizeof(wxChar);
+        *size = m_sRequestDate.Length() + 1;
     }    
     else if (item == _T("bytes[3]"))
     {
@@ -354,7 +354,7 @@ const wxChar *MyConnection::OnRequest(co
         data = NULL;
         *size = 0;
     }
-     Log(_T("OnRequest"), topic, item, data, *size, format);
+    Log(_T("OnRequest"), topic, item, data, *size, format);
     return data;
 }
 
@@ -379,7 +379,7 @@ bool MyConnection::OnStopAdvise(const wx
 }
 
 void MyConnection::Log(const wxString& command, const wxString& topic,
-    const wxString& item, const wxChar *data, int size, wxIPCFormat format)
+    const wxString& item, const void *data, size_t size, wxIPCFormat format)
 {
     wxString s;
     if (topic.IsEmpty() && item.IsEmpty())
@@ -391,10 +391,17 @@ void MyConnection::Log(const wxString& c
     else
         s.Printf(_T("%s(\"%s\",\"%s\","), command.c_str(), topic.c_str(), item.c_str());
 
-    if (format == wxIPC_TEXT || format == wxIPC_UNICODETEXT) 
-        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
-    else if (format == wxIPC_PRIVATE)
+    switch (format)
     {
+      case wxIPC_TEXT:
+      case wxIPC_UTF8TEXT:
+#if !wxUSE_UNICODE || wxUSE_UNICODE_UTF8
+        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
+#else
+        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), wxConvUTF8.cMB2WC((const char*)data), size);
+#endif
+        break;
+      case wxIPC_PRIVATE:
         if (size == 3)
         {
             char *bytes = (char *)data;
@@ -402,15 +409,20 @@ void MyConnection::Log(const wxString& c
         }
         else
             wxLogMessage(_T("%s...,%d)"), s.c_str(), size);
-    }
-    else if (format == wxIPC_INVALID) 
+        break;
+      case wxIPC_INVALID:
         wxLogMessage(_T("%s[invalid data],%d)"), s.c_str(), size);
+        break;
+      default:
+        wxLogMessage(_T("%s[unknown data],%d)"), s.c_str(), size);
+        break;
+    }
 }
 
-bool MyConnection::Advise(const wxString& item, const wxChar *data, int size, wxIPCFormat format)
+bool MyConnection::DoAdvise(const wxString& item, const void *data, size_t size, wxIPCFormat format)
 {
     Log(_T("Advise"), _T(""), item, data, size, format);
-    return wxConnection::Advise(item, data, size, format);
+    return wxConnection::DoAdvise(item, data, size, format);
 }
 
 bool MyConnection::OnDisconnect()
Index: wxWidgets/samples/ipc/server.h
===================================================================
--- wxWidgets.orig/samples/ipc/server.h
+++ wxWidgets/samples/ipc/server.h
@@ -69,20 +69,20 @@ public:
     MyConnection();
     ~MyConnection();
 
-    virtual bool OnExecute(const wxString& topic, wxChar *data, int size, wxIPCFormat format);
-    virtual const wxChar *OnRequest(const wxString& topic, const wxString& item, int *size, wxIPCFormat format);
-    virtual bool OnPoke(const wxString& topic, const wxString& item, wxChar *data, int size, wxIPCFormat format);
+    virtual bool OnExecute(const wxString& topic, const void *data, size_t size, wxIPCFormat format);
+    virtual const void *OnRequest(const wxString& topic, const wxString& item, size_t *size, wxIPCFormat format);
+    virtual bool OnPoke(const wxString& topic, const wxString& item, const void *data, size_t size, wxIPCFormat format);
     virtual bool OnStartAdvise(const wxString& topic, const wxString& item);
     virtual bool OnStopAdvise(const wxString& topic, const wxString& item);
-    virtual bool Advise(const wxString& item, const wxChar *data, int size = -1, wxIPCFormat format = wxIPC_TEXT);
+    virtual bool DoAdvise(const wxString& item, const void *data, size_t size, wxIPCFormat format);
     virtual bool OnDisconnect();
 protected:
-    void Log(const wxString& command, const wxString& topic, const wxString& item, const wxChar *data, int size, wxIPCFormat format);
+    void Log(const wxString& command, const wxString& topic, const wxString& item, const void *data, size_t size, wxIPCFormat format);
 public:
     wxString        m_sAdvise;
 protected:
     wxString        m_sRequestDate;
-    char             m_achRequestBytes[3];
+    char            m_achRequestBytes[3];
 };
 
 class MyServer: public wxServer

 	  	 

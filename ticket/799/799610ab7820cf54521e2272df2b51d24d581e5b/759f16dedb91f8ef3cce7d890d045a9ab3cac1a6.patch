diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/include/wx/gtk/menu.h wxWindows/include/wx/gtk/menu.h
--- wxWindows.orig/include/wx/gtk/menu.h	Sat Aug  9 13:37:35 2003
+++ wxWindows/include/wx/gtk/menu.h	Sat Nov  8 18:47:06 2003
@@ -50,5 +50,5 @@
 
     GtkAccelGroup   *m_accel;
-    GtkItemFactory  *m_factory;
+
     GtkWidget       *m_menubar;
     long             m_style;
@@ -84,9 +84,9 @@
     int FindMenuIdByMenuItem( GtkWidget *menuItem ) const;
 
+
     // implementation GTK only
     GtkWidget       *m_menu;  // GtkMenu
     GtkWidget       *m_owner;
     GtkAccelGroup   *m_accel;
-    GtkItemFactory  *m_factory;
 
 private:
@@ -99,5 +99,13 @@
     // if the last menu item was a radio one, this field contains its path,
     // otherwise it is empty
+//#if GTK_CHECK_VERSION(2, 0, 0)
+
+	GtkWidget *m_prevRadio;
+
+//#else
+
     wxString m_pathLastRadio;
+
+//#endif
 
     DECLARE_DYNAMIC_CLASS(wxMenu)
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/include/wx/gtk/menuitem.h wxWindows/include/wx/gtk/menuitem.h
--- wxWindows.orig/include/wx/gtk/menuitem.h	Sat Aug  9 13:37:35 2003
+++ wxWindows/include/wx/gtk/menuitem.h	Sat Nov  8 14:38:39 2003
@@ -49,5 +49,4 @@
     GtkWidget *GetLabelWidget() const { return m_labelWidget; }
     void SetLabelWidget(GtkWidget *labelWidget) { m_labelWidget = labelWidget; }
-    wxString GetFactoryPath() const;
 
     wxString GetHotKey() const { return m_hotKey; }
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/include/wx/menu.h wxWindows/include/wx/menu.h
--- wxWindows.orig/include/wx/menu.h	Sun Aug 17 13:50:08 2003
+++ wxWindows/include/wx/menu.h	Sat Nov  8 18:47:07 2003
@@ -331,4 +331,9 @@
     }
 
+    static void LockAccels(bool locked)
+    {
+      ms_locked = locked;
+    }
+
 protected:
     // virtuals to override in derived classes
@@ -362,4 +367,6 @@
 
     wxEvtHandler  *m_eventHandler;      // a pluggable in event handler
+
+    static bool      ms_locked;
 
     DECLARE_NO_COPY_CLASS(wxMenuBase)
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/samples/menu/menu.cpp wxWindows/samples/menu/menu.cpp
--- wxWindows.orig/samples/menu/menu.cpp	Thu Sep 11 13:52:11 2003
+++ wxWindows/samples/menu/menu.cpp	Sat Nov  8 18:38:28 2003
@@ -358,7 +358,7 @@
     subMenu->Append(Menu_SubMenu_Normal, _T("&Normal submenu item"), _T("Disabled submenu item"));
     subMenu->AppendCheckItem(Menu_SubMenu_Check, _T("&Unchecked submenu item"), _T("Unchecked submenu item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio1, _T("&Radio item 1"), _T("Radio item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio2, _T("&Radio item 2"), _T("Radio item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio3, _T("&Radio item 3"), _T("Radio item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio1, _T("Radio item &1"), _T("Radio item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio2, _T("Radio item &2"), _T("Radio item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio3, _T("Radio item &3"), _T("Radio item"));
 
     menubarMenu->Append(Menu_SubMenu, _T("Submenu"), subMenu);
@@ -379,5 +379,5 @@
                      _T("Check or uncheck the last menu item"), TRUE);
     menuMenu->AppendSeparator();
-    menuMenu->Append(Menu_Menu_GetInfo, _T("Get menu item in&fo\tAlt-F"),
+    menuMenu->Append(Menu_Menu_GetInfo, _T("Get menu item in&fo\tAlt-G"),
                      _T("Show the state of the last menu item"));
     menuMenu->AppendSeparator();
@@ -509,5 +509,5 @@
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("wxWindows menu sample\n© 1999-2001 Vadim Zeitlin"),
+    (void)wxMessageBox(_T("wxWindows menu sample\nÂ© 1999-2001 Vadim Zeitlin"),
                        _T("About wxWindows menu sample"),
                        wxICON_INFORMATION);
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/src/common/menucmn.cpp wxWindows/src/common/menucmn.cpp
--- wxWindows.orig/src/common/menucmn.cpp	Sat Aug  9 13:45:47 2003
+++ wxWindows/src/common/menucmn.cpp	Sat Nov  8 18:50:54 2003
@@ -275,4 +275,6 @@
 // ----------------------------------------------------------------------------
 
+bool wxMenuBase::ms_locked = true;
+
 void wxMenuBase::Init(long style)
 {
diff -ru2 -xCVS -x.#* -x*.orig -x*.rej -x*~ wxWindows.orig/src/gtk/menu.cpp wxWindows/src/gtk/menu.cpp
--- wxWindows.orig/src/gtk/menu.cpp	Sat Aug  9 13:46:10 2003
+++ wxWindows/src/gtk/menu.cpp	Sat Nov  8 18:50:55 2003
@@ -34,11 +34,11 @@
     #include <glib-object.h>
 
-    #define gtk_accel_group_attach(g, o) _gtk_accel_group_attach((g), (o))
-    #define gtk_accel_group_detach(g, o) _gtk_accel_group_detach((g), (o))
+    #define gtk_accel_group_attach(g, o) gtk_window_add_accel_group((o), (g))
+    #define gtk_accel_group_detach(g, o) gtk_window_remove_accel_group((o), (g))
     #define gtk_menu_ensure_uline_accel_group(m) gtk_menu_get_accel_group(m)
 
-    #define ACCEL_OBJECT        GObject
+    #define ACCEL_OBJECT       GtkWindow
     #define ACCEL_OBJECTS(a)    (a)->acceleratables
-    #define ACCEL_OBJ_CAST(obj) G_OBJECT(obj)
+    #define ACCEL_OBJ_CAST(obj) ((GtkWindow*) obj)
 #else // GTK+ 1.x
     #define ACCEL_OBJECT        GtkObject
@@ -204,9 +204,7 @@
     }
 
-    /* GTK 1.2.0 doesn't have gtk_item_factory_get_item(), but GTK 1.2.1 has. */
 #if GTK_CHECK_VERSION(1, 2, 1)
     m_accel = gtk_accel_group_new();
-    m_factory = gtk_item_factory_new( GTK_TYPE_MENU_BAR, "<main>", m_accel );
-    m_menubar = gtk_item_factory_get_widget( m_factory, "<main>" );
+    m_menubar = gtk_menu_bar_new();
 #else
     m_menubar = gtk_menu_bar_new();
@@ -243,9 +241,7 @@
     }
 
-    /* GTK 1.2.0 doesn't have gtk_item_factory_get_item(), but GTK 1.2.1 has. */
 #if GTK_CHECK_VERSION(1, 2, 1)
     m_accel = gtk_accel_group_new();
-    m_factory = gtk_item_factory_new( GTK_TYPE_MENU_BAR, "<main>", m_accel );
-    m_menubar = gtk_item_factory_get_widget( m_factory, "<main>" );
+    m_menubar = gtk_menu_bar_new();
 #else
     m_menubar = gtk_menu_bar_new();
@@ -261,5 +257,4 @@
 wxMenuBar::~wxMenuBar()
 {
-//    gtk_object_unref( GTK_OBJECT(m_factory) );  why not ?
 }
 
@@ -369,36 +364,36 @@
     menu->SetTitle( str );
 
-    // GTK 1.2.0 doesn't have gtk_item_factory_get_item(), but GTK 1.2.1 has.
 #if GTK_CHECK_VERSION(1, 2, 1)
 
-    wxString buf;
-    buf << wxT('/') << str.c_str();
+	// The "m_owner" is the "menu item"
+    #if GTK_CHECK_VERSION(2, 0, 0)
+        menu->m_owner = gtk_menu_item_new_with_mnemonic( wxGTK_CONV( str ) );
+    #else
+        menu->m_owner = gtk_menu_item_new_with_label( wxGTK_CONV( str ) );
 
-    // local buffer in multibyte form
-    char cbuf[400];
-    strcpy(cbuf, wxGTK_CONV(buf) );
-
-    GtkItemFactoryEntry entry;
-    entry.path = (gchar *)cbuf;  // const_cast
-    entry.accelerator = (gchar*) NULL;
-    entry.callback = (GtkItemFactoryCallback) NULL;
-    entry.callback_action = 0;
-    entry.item_type = (char *)"<Branch>";
-
-    gtk_item_factory_create_item( m_factory, &entry, (gpointer) this, 2 );  // what is 2 ?
-    // in order to get the pointer to the item we need the item text _without_ underscores
-    wxString tmp = wxT("<main>/");
-    const wxChar *pc;
-    for ( pc = str; *pc != wxT('\0'); pc++ )
-    {
-       // contrary to the common sense, we must throw out _all_ underscores,
-       // (i.e. "Hello__World" => "HelloWorld" and not "Hello_World" as we
-       // might naively think). IMHO it's a bug in GTK+ (VZ)
-       while (*pc == wxT('_'))
-           pc++;
-       tmp << *pc;
-    }
-    menu->m_owner = gtk_item_factory_get_item( m_factory, wxGTK_CONV( tmp ) );
+        GtkLabel *label = GTK_LABEL( GTK_BIN(menu->m_owner)->child );
+
+        // set new text
+        gtk_label_set_text( label, wxGTK_CONV( str ) );
+
+        // reparse key accel
+        guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( str ) );
+
+        if (accel_key != GDK_VoidSymbol)
+        {
+            gtk_widget_add_accelerator (menu->m_owner,
+                                        "activate_item",
+                                        m_accel,//gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menubar)),
+                                        accel_key,
+                                        GDK_MOD1_MASK,
+                                        GTK_ACCEL_LOCKED);
+        }
+
+    #endif
+
+    gtk_widget_show( menu->m_owner );
     gtk_menu_item_set_submenu( GTK_MENU_ITEM(menu->m_owner), menu->m_menu );
+
+    gtk_menu_shell_append( GTK_MENU_SHELL(m_menubar), menu->m_owner );
 #else
 
@@ -450,9 +445,4 @@
         return TRUE;
 
-    GtkMenuShell *menu_shell = GTK_MENU_SHELL(m_factory->widget);
-    gpointer data = g_list_last(menu_shell->children)->data;
-    menu_shell->children = g_list_remove(menu_shell->children, data);
-    menu_shell->children = g_list_insert(menu_shell->children, data, pos);
-
     return TRUE;
 }
@@ -1061,31 +1051,4 @@
 }
 
-wxString wxMenuItem::GetFactoryPath() const
-{
-    // In order to get the pointer to the item we need the item
-    // text _without_ underscores in GTK 1.2
-    wxString path( wxT("<main>/") );
-
-    for ( const wxChar *pc = m_text.c_str(); *pc; pc++ )
-    {
-        if ( *pc == wxT('_') )
-        {
-#ifdef __WXGTK20__
-            pc++;
-#else
-            // remove '_' unconditionally
-            continue;
-#endif
-        }
-
-        // don't remove ampersands '&' since if we have them in the menu item title
-        // it means that they were doubled to indicate "&" instead of accelerator
-
-        path += *pc;
-    }
-
-    return path;
-}
-
 //-----------------------------------------------------------------------------
 // wxMenu
@@ -1097,6 +1060,5 @@
 {
     m_accel = gtk_accel_group_new();
-    m_factory = gtk_item_factory_new( GTK_TYPE_MENU, "<main>", m_accel );
-    m_menu = gtk_item_factory_get_widget( m_factory, "<main>" );
+    m_menu = gtk_menu_new();
 
     m_owner = (GtkWidget*) NULL;
@@ -1107,13 +1069,11 @@
     if(m_style & wxMENU_TEAROFF)
     {
-       GtkItemFactoryEntry entry;
-       entry.path = (char *)"/tearoff";
-       entry.callback = (GtkItemFactoryCallback) NULL;
-       entry.callback_action = 0;
-       entry.item_type = (char *)"<Tearoff>";
-       entry.accelerator = (gchar*) NULL;
-       gtk_item_factory_create_item( m_factory, &entry, (gpointer) this, 2 );  // what is 2 ?
-       //GtkWidget *menuItem = gtk_item_factory_get_widget( m_factory, "<main>/tearoff" );
-    }
+		// Will this leak? Dunno.
+		GtkWidget *tearoff = gtk_tearoff_menu_item_new();
+
+		gtk_menu_append(GTK_MENU(m_menu), tearoff);
+	}
+
+	m_prevRadio = NULL;
 
     // append the title as the very first entry if we have it
@@ -1131,6 +1091,4 @@
    if ( GTK_IS_WIDGET( m_menu ))
        gtk_widget_destroy( m_menu );
-
-   gtk_object_unref( GTK_OBJECT(m_factory) );
 }
 
@@ -1139,27 +1097,23 @@
     GtkWidget *menuItem;
 
-#if defined(USE_MENU_BITMAPS) || !GTK_CHECK_VERSION(1, 2, 0)
+#if defined(USE_MENU_BITMAPS)// || !GTK_CHECK_VERSION(1, 2, 0)
     bool appended = FALSE;
 #endif
 
-    // does this item terminate the current radio group?
-    bool endOfRadioGroup = TRUE;
-
     if ( mitem->IsSeparator() )
     {
-        GtkItemFactoryEntry entry;
-        entry.path = (char *)"/sep";
-        entry.callback = (GtkItemFactoryCallback) NULL;
-        entry.callback_action = 0;
-        entry.item_type = (char *)"<Separator>";
-        entry.accelerator = (gchar*) NULL;
+        // Will this leak? Dunno.
+        #ifdef __WXGTK20__
+
+                menuItem = gtk_separator_menu_item_new();
+
+        #else
 
-        gtk_item_factory_create_item( m_factory, &entry, (gpointer) this, 2 );  // what is 2 ?
+                menuItem = gtk_menu_item_new();
 
-        // this will be wrong for more than one separator. do we care?
-        menuItem = gtk_item_factory_get_widget( m_factory, "<main>/sep" );
+        #endif
+
+        gtk_menu_shell_append(GTK_MENU_SHELL(m_menu), menuItem);
 
-        // we might have a separator inside a radio group
-        endOfRadioGroup = FALSE;
     }
     else if ( mitem->IsSubMenu() )
@@ -1168,22 +1122,38 @@
         wxString text( mitem->GetText() );
 
-        // local buffer in multibyte form
-        char buf[200];
-        strcpy( buf, "/" );
-        strcat( buf, wxGTK_CONV( text ) );
-
-        GtkItemFactoryEntry entry;
-        entry.path = buf;
-        entry.callback = (GtkItemFactoryCallback) 0;
-        entry.callback_action = 0;
-        entry.item_type = (char *)"<Branch>";
-        entry.accelerator = (gchar*) NULL;
+        #ifdef __WXGTK20__
+
+                menuItem = gtk_menu_item_new_with_mnemonic( wxGTK_CONV( text ) );
+
+        #else
+
+                menuItem = gtk_menu_item_new_with_label( wxGTK_CONV( text ) );
+
+                GtkLabel *label = GTK_LABEL( GTK_BIN(menuItem)->child );
+
+                // set new text
+                gtk_label_set_text( label, wxGTK_CONV( text ) );
+
+                // reparse key accel
+                guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( text ) );
+
+                if (accel_key != GDK_VoidSymbol)
+                {
+                    gtk_widget_add_accelerator (menuItem,
+                                                "activate_item",
+                                                gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menu)),
+                                                accel_key,
+                                                GDK_MOD1_MASK,
+                                                GTK_ACCEL_LOCKED);
+                }
 
-        gtk_item_factory_create_item( m_factory, &entry, (gpointer) this, 2 );  // what is 2 ?
+        #endif
 
-        wxString path( mitem->GetFactoryPath() );
-        menuItem = gtk_item_factory_get_item( m_factory, wxGTK_CONV( path ) );
+                gtk_menu_item_set_submenu( GTK_MENU_ITEM(menuItem), mitem->GetSubMenu()->m_menu );
+		gtk_menu_shell_append(GTK_MENU_SHELL(m_menu), menuItem);
 
-        gtk_menu_item_set_submenu( GTK_MENU_ITEM(menuItem), mitem->GetSubMenu()->m_menu );
+		gtk_widget_show( mitem->GetSubMenu()->m_menu );
+
+		m_prevRadio = NULL;
 
         // if adding a submenu to a menu already existing in the menu bar, we
@@ -1215,6 +1185,5 @@
             gtk_widget_add_accelerator (menuItem,
                                         "activate_item",
-                                        gtk_menu_get_accel_group(
-                                            GTK_MENU(m_menu)),
+                                        m_accel,
                                         accel_key, accel_mods,
                                         GTK_ACCEL_VISIBLE);
@@ -1227,7 +1196,7 @@
             gtk_widget_add_accelerator (menuItem,
                                         "activate_item",
-                                        gtk_menu_ensure_uline_accel_group (
-                                            GTK_MENU (m_menu)),
-                                        accel_key, 0,
+                                        gtk_menu_ensure_uline_accel_group(GTK_MENU (m_menu)),
+                                        accel_key,
+                                        GDK_MOD1_MASK,
                                         GTK_ACCEL_LOCKED);
         }
@@ -1257,47 +1226,108 @@
         wxString text( mitem->GetText() );
 
-        // buffers containing the menu item path and type in multibyte form
-        char bufPath[256],
-             bufType[256];
-
-        strcpy( bufPath, "/" );
-        strncat( bufPath, wxGTK_CONV(text), WXSIZEOF(bufPath) - 2 );
-        bufPath[WXSIZEOF(bufPath) - 1] = '\0';
-
-        GtkItemFactoryEntry entry;
-        entry.path = bufPath;
-        entry.callback = (GtkItemFactoryCallback) gtk_menu_clicked_callback;
-        entry.callback_action = 0;
-
-        wxString pathRadio;
-        const char *item_type;
         switch ( mitem->GetKind() )
         {
             case wxITEM_CHECK:
-                item_type = "<CheckItem>";
+            {
+                #ifdef __WXGTK20__
+
+                        menuItem = gtk_check_menu_item_new_with_mnemonic( wxGTK_CONV( text ) );
+
+                #else
+
+                        menuItem = gtk_check_menu_item_new_with_label( wxGTK_CONV( text ) );
+
+                        GtkLabel *label = GTK_LABEL( GTK_BIN(menuItem)->child );
+
+                        // set new text
+                        gtk_label_set_text( label, wxGTK_CONV( text ) );
+
+                        // reparse key accel
+                        guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( text ) );
+
+                        if (accel_key != GDK_VoidSymbol)
+                        {
+                            gtk_widget_add_accelerator (menuItem,
+                                                        "activate_item",
+                                                        gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menu)),
+                                                        accel_key,
+                                                        GDK_MOD1_MASK,
+                                                        GTK_ACCEL_LOCKED);
+                        }
+
+                #endif
+
+			m_prevRadio = NULL;
+            }
                 break;
 
             case wxITEM_RADIO:
-                if ( m_pathLastRadio.empty() )
-                {
-                    // start of a new radio group
-                    item_type = "<RadioItem>";
-                    wxString tmp( wxGTK_CONV_BACK( bufPath ) );
-                    tmp.Remove(0,1);
-                    m_pathLastRadio = tmp;
-                }
-                else // continue the radio group
                 {
-                    pathRadio = m_pathLastRadio;
-                    pathRadio.Replace(wxT("_"), wxT(""));
-                    pathRadio.Prepend(wxT("<main>/"));
-
-                    strncpy(bufType, wxGTK_CONV(pathRadio), WXSIZEOF(bufType));
-                    bufType[WXSIZEOF(bufType) - 1] = '\0';
-                    item_type = bufType;
-                }
+                        GSList *group = NULL;
+
+                        if ( m_prevRadio == NULL )
+                        {
+                                // start of a new radio group
+                        #ifdef __WXGTK20__
+
+                                m_prevRadio = menuItem = gtk_radio_menu_item_new_with_mnemonic( group, wxGTK_CONV( text ) );
+
+                        #else
+
+                                m_prevRadio = menuItem = gtk_radio_menu_item_new_with_label( group, wxGTK_CONV( text ) );
+
+                                GtkLabel *label = GTK_LABEL( GTK_BIN(menuItem)->child );
+
+                                // set new text
+                                gtk_label_set_text( label, wxGTK_CONV( text ) );
+
+                                // reparse key accel
+                                guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( text ) );
+
+                                if (accel_key != GDK_VoidSymbol)
+                                {
+                                    gtk_widget_add_accelerator (menuItem,
+                                                                "activate_item",
+                                                                gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menu)),
+                                                                accel_key,
+                                                                GDK_MOD1_MASK,
+                                                                GTK_ACCEL_LOCKED);
+                                }
+
+                        #endif
+                        }
+                        else // continue the radio group
+                        {
+                          #ifdef __WXGTK20__
+
+                                  group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (m_prevRadio));
+                                  m_prevRadio = menuItem = gtk_radio_menu_item_new_with_mnemonic( group, wxGTK_CONV( text ) );
+
+                          #else
+
+                                  group = gtk_radio_menu_item_group (GTK_RADIO_MENU_ITEM (m_prevRadio));
+                                  m_prevRadio = menuItem = gtk_radio_menu_item_new_with_label( group, wxGTK_CONV( text ) );
 
-                // continue the existing radio group, if any
-                endOfRadioGroup = FALSE;
+                                  GtkLabel *label = GTK_LABEL( GTK_BIN(menuItem)->child );
+
+                                  // set new text
+                                  gtk_label_set_text( label, wxGTK_CONV( text ) );
+
+                                  // reparse key accel
+                                  guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( text ) );
+
+                                  if (accel_key != GDK_VoidSymbol)
+                                  {
+                                      gtk_widget_add_accelerator (menuItem,
+                                                                  "activate_item",
+                                                                  gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menu)),
+                                                                  accel_key,
+                                                                  GDK_MOD1_MASK,
+                                                                  GTK_ACCEL_LOCKED);
+                                  }
+
+                          #endif
+                        }
+                }
                 break;
 
@@ -1307,33 +1337,59 @@
 
             case wxITEM_NORMAL:
-                item_type = "<Item>";
+            #ifdef __WXGTK20__
+
+                    menuItem = gtk_menu_item_new_with_mnemonic( wxGTK_CONV( text ) );
+
+            #else
+
+                    menuItem = gtk_menu_item_new_with_label( wxGTK_CONV( text ) );
+
+                    GtkLabel *label = GTK_LABEL( GTK_BIN(menuItem)->child );
+
+                    // set new text
+                    gtk_label_set_text( label, wxGTK_CONV( text ) );
+
+                    // reparse key accel
+                    guint accel_key = gtk_label_parse_uline (GTK_LABEL(label), wxGTK_CONV( text ) );
+
+                    if (accel_key != GDK_VoidSymbol)
+                    {
+                        gtk_widget_add_accelerator (menuItem,
+                                                    "activate_item",
+                                                    gtk_menu_ensure_uline_accel_group(GTK_MENU(m_menu)),
+                                                    accel_key,
+                                                    GDK_MOD1_MASK,
+                                                    GTK_ACCEL_LOCKED);
+                    }
+
+            #endif
+
+				m_prevRadio = NULL;
                 break;
         }
 
-        entry.item_type = (char *)item_type; // cast needed for GTK+
-        entry.accelerator = (gchar*) NULL;
+        gtk_signal_connect( GTK_OBJECT(menuItem), "activate",
+                            GTK_SIGNAL_FUNC(gtk_menu_clicked_callback),
+                            (gpointer)this );
 
-#if wxUSE_ACCEL
-        // due to an apparent bug in GTK+, we have to use a static buffer here -
-        // otherwise GTK+ 1.2.2 manages to override the memory we pass to it
-        // somehow! (VZ)
-        char s_accel[50]; // should be big enough, we check for overruns
-        wxString tmp( GetHotKey(*mitem) );
-        strncpy(s_accel, wxGTK_CONV( tmp ), WXSIZEOF(s_accel));
-        s_accel[WXSIZEOF(s_accel) - 1] = '\0';
-        entry.accelerator = s_accel;
-#else // !wxUSE_ACCEL
-        entry.accelerator = (char*) NULL;
-#endif // wxUSE_ACCEL/!wxUSE_ACCEL
+        gtk_menu_shell_append(GTK_MENU_SHELL(m_menu), menuItem);
 
-        gtk_item_factory_create_item( m_factory, &entry, (gpointer) this, 2 );  /* what is 2 ? */
+    }
 
-        wxString path( mitem->GetFactoryPath() );
-        menuItem = gtk_item_factory_get_widget( m_factory, wxGTK_CONV( path ) );
+    guint accel_key;
+    GdkModifierType accel_mods;
 
-        if (!menuItem)
-            wxLogError( wxT("Wrong menu path: %s\n"), path.c_str() );
+    gtk_accelerator_parse(GetHotKey(*mitem).c_str(),
+                                              &accel_key, &accel_mods);
+
+    if (accel_key != 0 && accel_mods != 0)
+    {
+            gtk_widget_add_accelerator (GTK_WIDGET(menuItem), "activate", m_accel,
+                                                                    accel_key, accel_mods,
+                                                                    GTK_ACCEL_VISIBLE);
     }
 
+    gtk_widget_show( menuItem );
+
     if ( !mitem->IsSeparator() )
     {
@@ -1351,7 +1407,9 @@
     mitem->SetMenuItem(menuItem);
 
-    if ( endOfRadioGroup )
+    if (ms_locked == true)
     {
-        m_pathLastRadio.clear();
+    #if !GTK_CHECK_VERSION(2, 0, 0)
+        gtk_widget_lock_accelerators(mitem->GetMenuItem());
+    #endif
     }
 
@@ -1381,9 +1439,4 @@
     }
 
-    GtkMenuShell *menu_shell = GTK_MENU_SHELL(m_factory->widget);
-    gpointer data = g_list_last(menu_shell->children)->data;
-    menu_shell->children = g_list_remove(menu_shell->children, data);
-    menu_shell->children = g_list_insert(menu_shell->children, data, pos);
-
     return TRUE;
 }
@@ -1900,3 +1953,2 @@
 
 #endif // USE_MENU_BITMAPS
-

 	  	 

Index: include/wx/matrix.h
===================================================================
--- include/wx/matrix.h	(revision 67383)
+++ include/wx/matrix.h	(working copy)
@@ -1,6 +1,6 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:         wx/matrix.h
-// Purpose:      wxTransformMatrix class. NOT YET USED
+// Purpose:      wxTransformMatrix class.
 // Author:       Chris Breeze, Julian Smart
 // Modified by:  Klaas Holwerda
 // Created:      01/02/97
@@ -12,17 +12,13 @@
 #ifndef _WX_MATRIXH__
 #define _WX_MATRIXH__
 
-//! headerfiles="matrix.h wx/object.h"
-#include "wx/object.h"
+//! headerfiles="matrix.h"
 #include "wx/math.h"
 
 //! codefiles="matrix.cpp"
 
 // A simple 3x3 matrix. This may be replaced by a more general matrix
 // class some day.
-//
-// Note: this is intended to be used in wxDC at some point to replace
-// the current system of scaling/translation. It is not yet used.
 
 //:definition
 //  A 3x3 matrix to do 2D transformations.
@@ -32,30 +28,30 @@
 //  at a certain coordinate and angle within another parent picture.
 //  At all times m_isIdentity is set if the matrix itself is an Identity matrix.
 //  It is used where possible to optimize calculations.
-class WXDLLIMPEXP_CORE wxTransformMatrix: public wxObject
+class WXDLLIMPEXP_CORE wxTransformMatrix
 {
 public:
-    wxTransformMatrix(void);
+    wxTransformMatrix();
     wxTransformMatrix(const wxTransformMatrix& mat);
 
-    //get the value in the matrix at col,row
-    //rows are horizontal (second index of m_matrix member)
-    //columns are vertical (first index of m_matrix member)
-    double GetValue(int col, int row) const;
+    //get the value in the matrix element at row,col
+    double GetElement(int row, int col) const;
+    wxDEPRECATED_INLINE( double GetValue(int col, int row) const,
+       return GetElement(row, col); )
 
-    //set the value in the matrix at col,row
-    //rows are horizontal (second index of m_matrix member)
-    //columns are vertical (first index of m_matrix member)
-    void SetValue(int col, int row, double value);
+    //set the value in the matrix element at row,col
+    void SetElement(int row, int col, double value);
+    wxDEPRECATED_INLINE( void SetValue(int col, int row, double value),
+       SetElement(row, col, value); )
 
     void operator = (const wxTransformMatrix& mat);
     bool operator == (const wxTransformMatrix& mat) const;
     bool operator != (const wxTransformMatrix& mat) const;
 
     //multiply every element by t
-    wxTransformMatrix&          operator*=(const double& t);
+    wxTransformMatrix&          operator*=(double t);
     //divide every element by t
-    wxTransformMatrix&          operator/=(const double& t);
+    wxTransformMatrix&          operator/=(double t);
     //add matrix m to this t
     wxTransformMatrix&          operator+=(const wxTransformMatrix& m);
     //subtract matrix m from this
@@ -66,9 +62,9 @@
     // constant operators
 
     //multiply every element by t  and return result
-    wxTransformMatrix           operator*(const double& t) const;
+    wxTransformMatrix           operator*(double t) const;
     //divide this matrix by t and return result
-    wxTransformMatrix           operator/(const double& t) const;
+    wxTransformMatrix           operator/(double t) const;
     //add matrix m to this and return result
     wxTransformMatrix           operator+(const wxTransformMatrix& m) const;
     //subtract matrix m from this and return result
@@ -77,27 +73,24 @@
     wxTransformMatrix           operator*(const wxTransformMatrix& m) const;
     wxTransformMatrix           operator-() const;
 
-    //rows are horizontal (second index of m_matrix member)
-    //columns are vertical (first index of m_matrix member)
-    double& operator()(int col, int row);
+    wxDEPRECATED(double& operator()(int col, int row));
 
-    //rows are horizontal (second index of m_matrix member)
-    //columns are vertical (first index of m_matrix member)
-    double operator()(int col, int row) const;
+    wxDEPRECATED(double operator()(int col, int row) const);
 
     // Invert matrix
-    bool Invert(void);
+    bool Invert();
 
     // Make into identity matrix
-    bool Identity(void);
+    bool Identity();
 
     // Is the matrix the identity matrix?
     // Only returns a flag, which is set whenever an operation
     // is done.
-    inline bool IsIdentity(void) const { return m_isIdentity; }
+    inline bool IsIdentity() const { return m_isIdentity; }
 
     // This does an actual check.
-    inline bool IsIdentity1(void) const ;
+    wxDEPRECATED(bool IsIdentity1() const)
+       { return CheckIdentity(); }
 
     //Scale by scale (isotropic scaling i.e. the same in x and y):
     //!ex:
@@ -112,7 +105,7 @@
     //!code:           |  xs    0      xc(1-xs) |
     //!code: matrix' = |  0    ys      yc(1-ys) | x matrix
     //!code:           |  0     0      1        |
-    wxTransformMatrix&  Scale(const double &xs, const double &ys,const double &xc, const double &yc);
+    wxTransformMatrix&  Scale(double xs, double ys, double xc, double yc);
 
     // mirror a matrix in x, y
     //!ex:
@@ -127,20 +120,20 @@
     //!code:           | 0  0  1 |
     bool Translate(double x, double y);
 
-    // Rotate clockwise by the given number of degrees:
+    // Rotate counter clockwise by the given number of degrees:
     //!ex:
     //!code:           |  cos sin 0 |
     //!code: matrix' = | -sin cos 0 | x matrix
     //!code:           |   0   0  1 |
-    bool Rotate(double angle);
+    bool Rotate(double ccDegrees);
 
-    //Rotate counter clockwise with point of rotation
+    //Rotate clockwise with point of rotation
     //
     //!ex:
-    //!code:           |  cos(r) -sin(r)    x(1-cos(r))+y(sin(r)|
-    //!code: matrix' = |  sin(r)  cos(r)    y(1-cos(r))-x(sin(r)| x matrix
-    //!code:           |   0          0                       1 |
-    wxTransformMatrix&  Rotate(const double &r, const double &x, const double &y);
+    //!code:           |  cos   -sin    x(1-cos)+y*sin |
+    //!code: matrix' = |  sin    cos    y(1-cos)-x*sin | x matrix
+    //!code:           |   0       0                 1 |
+    wxTransformMatrix&  Rotate(double cDegrees, double x, double y);
 
     // Transform X value from logical to device
     inline double TransformX(double x) const;
@@ -163,13 +156,19 @@
     // N.B. 'this' matrix is the inverse at this point
     bool InverseTransformPoint(double x, double y, double& tx, double& ty) const;
 
-    double Get_scaleX();
-    double Get_scaleY();
-    double GetRotation();
+    double GetScaleX() const;
+    wxDEPRECATED_INLINE( double Get_scaleX(),
+       return GetScaleX(); )
+    double GetScaleY() const;
+    wxDEPRECATED_INLINE( double Get_scaleY(),
+       return GetScaleY(); )
+    double GetRotation() const;
     void   SetRotation(double rotation);
 
 
-public:
+private:
+    bool CheckIdentity() const;
+
     double  m_matrix[3][3];
     bool    m_isIdentity;
 };
@@ -190,8 +189,8 @@
 inline double wxTransformMatrix::TransformX(double x) const
 {
     //normally like this, but since no rotation is involved (only mirror and scale)
-    //we can do without Y -> m_matrix[1]{0] is -sin(rotation angle) and therefore zero
-    //(x * m_matrix[0][0] + y * m_matrix[1][0] + m_matrix[2][0]))
+    //we can do without Y -> m_matrix[1][0] is -sin(rotation angle) and therefore zero
+    //(x * m_matrix[0][0] + y * m_matrix[1][0] + m_matrix[2][0])
     return (m_isIdentity ? x : (x * m_matrix[0][0] +  m_matrix[2][0]));
 }
 
@@ -204,15 +203,15 @@
 inline double wxTransformMatrix::TransformY(double y) const
 {
     //normally like this, but since no rotation is involved (only mirror and scale)
-    //we can do without X -> m_matrix[0]{1] is sin(rotation angle) and therefore zero
-    //(x * m_matrix[0][1] + y * m_matrix[1][1] + m_matrix[2][1]))
+    //we can do without X -> m_matrix[0][1] is sin(rotation angle) and therefore zero
+    //(x * m_matrix[0][1] + y * m_matrix[1][1] + m_matrix[2][1])
     return (m_isIdentity ? y : (y * m_matrix[1][1] + m_matrix[2][1]));
 }
 
 
 // Is the matrix the identity matrix?
 // Each operation checks whether the result is still the identity matrix and sets a flag.
-inline bool wxTransformMatrix::IsIdentity1(void) const
+inline bool wxTransformMatrix::CheckIdentity() const
 {
     return
     ( wxIsSameDouble(m_matrix[0][0], 1.0) &&
Index: interface/wx/matrix.h
===================================================================
--- interface/wx/matrix.h	(revision 0)
+++ interface/wx/matrix.h	(revision 0)
@@ -0,0 +1,280 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        matrix.h
+// Purpose:     interface of wxTransformMatrix
+// Author:      wxWidgets team
+// RCS-ID:      
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+/**
+    @class wxTransformMatrix
+
+    A 3x3 matrix to do 2D transformations.
+
+    It can be used to map data to window coordinates,
+    and also for manipulating user data.
+    For example drawing a picture (composed of several primitives)
+    at a certain coordinate and angle within another parent picture.
+    It is used where possible to optimize calculations (i.e. wxDC).
+
+    @library{wxcore}
+    @category{misc}
+
+    @see wxDC
+*/
+class wxTransformMatrix : public wxObject
+{
+public:
+    /**
+        Default constructor.
+    */
+    wxTransformMatrix();
+
+    /**
+        Copy constructor.
+    */
+    wxTransformMatrix(const wxTransformMatrix& mat);
+
+    /**
+        Get the element in the matrix at row,col.
+
+        @param row
+            Row index.
+        @param col
+            Column index.
+    */
+    double GetElement(int row, int col) const;
+
+    /**
+        Set the element in the matrix at row,col.
+
+        @param row
+            Row index.
+        @param col
+            Column index.
+        @param value
+            The new value.
+    */
+    void SetValue(int row, int col, double value);
+
+    /**
+        Assignment operator.
+    */
+    void operator = (const wxTransformMatrix& mat);
+
+    //@{
+    /**
+        Comparison operators.
+    */
+    bool operator == (const wxTransformMatrix& mat) const;
+    bool operator != (const wxTransformMatrix& mat) const;
+    //@}
+
+    /**
+        Multiply every element by t.
+
+        @param t
+            Multiplicator value.
+    */
+    wxTransformMatrix& operator*=(double t);
+
+    /**
+        Multiply matrix m with this.
+
+        @param m
+            The multiplicator matrix.
+    */
+    wxTransformMatrix& operator*=(const wxTransformMatrix& m);
+
+    /**
+        Divide every element by t.
+
+        @param t
+            Divisor value.
+    */
+    wxTransformMatrix& operator/=(double t);
+
+    /**
+        Add matrix m to this.
+
+        @param m
+            The matrix to be added.
+    */
+    wxTransformMatrix& operator+=(const wxTransformMatrix& m);
+
+    /**
+        Subtract matrix m from this.
+
+        @param m
+            The matrix to be subtracted.
+    */
+    wxTransformMatrix& operator-=(const wxTransformMatrix& m);
+
+    /**
+        Multiply every element by t and return result.
+
+        @param t
+            Multiplicator value.
+    */
+    wxTransformMatrix operator*(double t) const;
+
+    /**
+        Multiply matrix m with this and return result.
+
+        @param m
+            The multiplicator matrix.
+    */
+    wxTransformMatrix operator*(const wxTransformMatrix& m) const;
+
+    /**
+        Divide every element by t and return result.
+
+        @param t
+            Divisor value.
+    */
+    wxTransformMatrix operator/(double t) const;
+
+    /**
+        Add matrix m to this and return result.
+
+        @param m
+            The matrix to be added.
+    */
+    wxTransformMatrix operator+(const wxTransformMatrix& m) const;
+
+    /**
+        Subtract matrix m from this and return result.
+
+        @param m
+            The matrix to be subtracted.
+    */
+    wxTransformMatrix operator-(const wxTransformMatrix& m) const;
+
+    /**
+        Invert the sign of each element and return result.
+    */
+    wxTransformMatrix operator-() const;
+
+    /**
+        Invert the matrix.
+
+        @return @true if the matrix was inverted.
+    */
+    bool Invert();
+
+    /**
+        Make into identity matrix.
+
+        @return @true on success.
+    */
+    bool Identity();
+
+    /**
+        Check that this matrix is the identity matrix.
+
+        @return A flag, updated whenever an operation is done.
+    */
+    inline bool IsIdentity() const;
+
+    /**
+        Perform isotropic scaling (the same in x and y).
+
+        @param scale
+            Value for scaling.
+
+        @code
+        //ex:
+        //           | scale  0      0      |
+        // matrix' = | 0      scale  0      | x matrix
+        //           | 0      0      scale  |
+        @endcode
+    */
+    bool Scale(double scale);
+
+    /**
+        Scale with center point and x/y scale.
+
+        @code
+        //ex:
+        //           |  xs    0      xc(1-xs) |
+        // matrix' = |  0    ys      yc(1-ys) | x matrix
+        //           |  0     0      1        |
+        @endcode
+    */
+    wxTransformMatrix& Scale(double xs, double ys, double xc, double yc);
+
+    /**
+        Mirror a matrix in x, y.
+
+        @code
+        //ex:
+        //           | -1     0      0 |
+        // matrix' = |  0    -1      0 | x matrix
+        //           |  0     0      1 |
+        @endcode
+    */
+    wxTransformMatrix& Mirror(bool x=true, bool y=false);
+
+    /**
+        Translate by dx, dy.
+
+        @code
+        //ex:
+        //           | 1      0     dx |
+        // matrix' = | 0      1     dy | x matrix
+        //           | 0      0      1 |
+        @endcode
+    */
+    bool Translate(double x, double y);
+
+    /**
+        Counter clockwise rotate by the given number of degrees.
+    */
+    bool Rotate(double ccDegrees);
+
+    /**
+        Clockwise rotate by the given number of degrees with point of rotation.
+    */
+    wxTransformMatrix& Rotate(double cDegrees, double x, double y);
+
+    /**
+        // Transform X value from logical to device.
+    */
+    inline double TransformX(double x) const;
+
+    /**
+        // Transform Y value from logical to device.
+    */
+    inline double TransformY(double y) const;
+
+    /**
+        // Transform a point from logical to device coordinates.
+    */
+    bool TransformPoint(double x, double y, double& tx, double& ty) const;
+
+    /**
+        // Transform a point from device to logical coordinates.
+    */
+    bool InverseTransformPoint(double x, double y, double& tx, double& ty) const;
+
+    /**
+        // Get scale factor in X direction.
+    */
+    double GetScaleX() const;
+
+    /**
+        // Get scale factor in Y direction.
+    */
+    double GetScaleY() const;
+
+    /**
+        // Get the counter clockwise rotation degrees.
+    */
+    double GetRotation() const;
+
+    /**
+        // Set the counter clockwise rotation degrees.
+           Revert any previous rotation if present then rotate by @a degrees.
+    */
+    void SetRotation(double degrees);
+};
Index: src/common/matrix.cpp
===================================================================
--- src/common/matrix.cpp	(revision 67383)
+++ src/common/matrix.cpp	(working copy)
@@ -9,9 +9,6 @@
 // Licence:     wxWindows licence
 ///////////////////////////////////////////////////////////////////////////////
 
-// Note: this is intended to be used in wxDC at some point to replace
-// the current system of scaling/translation. It is not yet used.
-
 // For compilers that support precompilation, includes "wx.h".
 #include "wx/wxprec.h"
 
@@ -21,13 +18,9 @@
 
 #include "wx/matrix.h"
 
-#ifndef WX_PRECOMP
-    #include "wx/math.h"
-#endif
-
 static const double pi = M_PI;
 
-wxTransformMatrix::wxTransformMatrix(void)
+wxTransformMatrix::wxTransformMatrix()
 {
     m_isIdentity = false;
 
@@ -35,12 +28,11 @@
 }
 
 wxTransformMatrix::wxTransformMatrix(const wxTransformMatrix& mat)
-    : wxObject()
 {
     (*this) = mat;
 }
 
-double wxTransformMatrix::GetValue(int col, int row) const
+double wxTransformMatrix::GetElement(int row, int col) const
 {
     if (row < 0 || row > 2 || col < 0 || col > 2)
         return 0.0;
@@ -48,21 +40,20 @@
     return m_matrix[col][row];
 }
 
-void wxTransformMatrix::SetValue(int col, int row, double value)
+void wxTransformMatrix::SetElement(int row, int col, double value)
 {
     if (row < 0 || row > 2 || col < 0 || col > 2)
         return;
 
     m_matrix[col][row] = value;
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
 }
 
 void wxTransformMatrix::operator = (const wxTransformMatrix& mat)
 {
-    int i, j;
-    for (i = 0; i < 3; i++)
+    for (int i = 0; i < 3; i++)
     {
-        for (j = 0; j < 3; j++)
+        for (int j = 0; j < 3; j++)
         {
             m_matrix[i][j] = mat.m_matrix[i][j];
         }
@@ -75,10 +66,9 @@
     if (m_isIdentity && mat.m_isIdentity)
         return true;
 
-    int i, j;
-    for (i = 0; i < 3; i++)
+    for (int i = 0; i < 3; i++)
     {
-        for (j = 0; j < 3; j++)
+        for (int j = 0; j < 3; j++)
         {
             if ( !wxIsSameDouble(m_matrix[i][j], mat.m_matrix[i][j]) )
                 return false;
@@ -109,7 +99,7 @@
 }
 
 // Invert matrix
-bool wxTransformMatrix::Invert(void)
+bool wxTransformMatrix::Invert()
 {
     double inverseMatrix[3][3];
 
@@ -142,12 +132,12 @@
             m_matrix[i][j] = inverseMatrix[i][j];
         }
     }
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return true;
 }
 
 // Make into identity matrix
-bool wxTransformMatrix::Identity(void)
+bool wxTransformMatrix::Identity()
 {
     m_matrix[0][0] = m_matrix[1][1] = m_matrix[2][2] = 1.0;
     m_matrix[1][0] = m_matrix[2][0] = m_matrix[0][1] = m_matrix[2][1] = m_matrix[0][2] = m_matrix[1][2] = 0.0;
@@ -163,15 +153,14 @@
 //
 bool wxTransformMatrix::Scale(double scale)
 {
-    int i, j;
-    for (i = 0; i < 3; i++)
+    for (int i = 0; i < 3; i++)
     {
-        for (j = 0; j < 3; j++)
+        for (int j = 0; j < 3; j++)
         {
             m_matrix[i][j] *= scale;
         }
     }
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
 
     return true;
 }
@@ -183,7 +172,7 @@
 //     0    ys      yc(1-ys)
 //     0     0      1
 //
-wxTransformMatrix&  wxTransformMatrix::Scale(const double &xs, const double &ys,const double &xc, const double &yc)
+wxTransformMatrix&  wxTransformMatrix::Scale(double xs, double ys, double xc, double yc)
 {
     double r00,r10,r20,r01,r11,r21;
 
@@ -234,7 +223,7 @@
     wxTransformMatrix scale;
     scale.m_matrix[0][0] = x_fac;
     scale.m_matrix[1][1] = y_fac;
-   scale.m_isIdentity = IsIdentity1();
+   scale.m_isIdentity = CheckIdentity();
 
     *this = scale * (*this);
 
@@ -242,7 +231,7 @@
     (*this).Translate(x_cen, y_cen);
 */
 
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
 
     return *this;
 }
@@ -259,16 +248,16 @@
     if (x)
     {
         temp.m_matrix[1][1] = -1;
-        temp.m_isIdentity=false;
+        //temp.m_isIdentity=false; // checked later for 'this'
     }
     if (y)
     {
         temp.m_matrix[0][0] = -1;
-        temp.m_isIdentity=false;
+        //temp.m_isIdentity=false; // checked later for 'this'
     }
 
     *this = temp * (*this);
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
@@ -285,29 +274,29 @@
     for (i = 0; i < 3; i++)
         m_matrix[i][1] += dy * m_matrix[i][2];
 
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
 
     return true;
 }
 
-// Rotate clockwise by the given number of degrees:
+// Rotate counter clockwise by the given number of degrees:
 //           |  cos sin 0 |
 // matrix' = | -sin cos 0 | x matrix
 //           |   0   0  1 |
-bool wxTransformMatrix::Rotate(double degrees)
+bool wxTransformMatrix::Rotate(double ccDegrees)
 {
-    Rotate(-degrees,0,0);
+    Rotate(-ccDegrees,0,0);
     return true;
 }
 
-// counter clockwise rotate around a point
+// Clockwise rotate around a point
 //
-//  cos(r) -sin(r)    x(1-cos(r))+y(sin(r)
-//  sin(r)  cos(r)    y(1-cos(r))-x(sin(r)
-//    0      0        1
-wxTransformMatrix&  wxTransformMatrix::Rotate(const double &degrees, const double &x, const double &y)
+//  cos   -sin    x(1-cos)+y*sin
+//  sin    cos    y(1-cos)-x*sin
+//    0      0                 1
+wxTransformMatrix&  wxTransformMatrix::Rotate(double cDegrees, double x, double y)
 {
-    double angle = degrees * pi / 180.0;
+    double angle = cDegrees * pi / 180.0;
     double c = cos(angle);
     double s = sin(angle);
     double r00,r10,r20,r01,r11,r21;
@@ -365,7 +354,7 @@
    rotate.m_isIdentity=false;
    *this = rotate * (*this);
 */
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
 
     return *this;
 }
@@ -375,7 +364,9 @@
 {
     if (IsIdentity())
     {
-        tx = x; ty = y; return true;
+        tx = x;
+        ty = y;
+        return true;
     }
 
     tx = x * m_matrix[0][0] + y * m_matrix[1][0] + m_matrix[2][0];
@@ -412,21 +403,21 @@
     return true;
 }
 
-wxTransformMatrix& wxTransformMatrix::operator*=(const double& t)
+wxTransformMatrix& wxTransformMatrix::operator*=(double t)
 {
     for (int i = 0; i < 3; i++)
         for (int j = 0; j < 3; j++)
             m_matrix[i][j]*= t;
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
-wxTransformMatrix& wxTransformMatrix::operator/=(const double& t)
+wxTransformMatrix& wxTransformMatrix::operator/=(double t)
 {
     for (int i = 0; i < 3; i++)
         for (int j = 0; j < 3; j++)
             m_matrix[i][j]/= t;
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
@@ -435,7 +426,7 @@
     for (int i = 0; i < 3; i++)
         for (int j = 0; j < 3; j++)
             m_matrix[i][j] += mat.m_matrix[i][j];
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
@@ -444,15 +435,15 @@
     for (int i = 0; i < 3; i++)
         for (int j = 0; j < 3; j++)
             m_matrix[i][j] -= mat.m_matrix[i][j];
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
 wxTransformMatrix& wxTransformMatrix::operator*=(const wxTransformMatrix& mat)
 {
-
     if (mat.m_isIdentity)
         return *this;
+
     if (m_isIdentity)
     {
         *this = mat;
@@ -474,26 +465,26 @@
         *this = result;
     }
 
-    m_isIdentity = IsIdentity1();
+    m_isIdentity = CheckIdentity();
     return *this;
 }
 
 
 // constant operators
-wxTransformMatrix  wxTransformMatrix::operator*(const double& t) const
+wxTransformMatrix  wxTransformMatrix::operator*(double t) const
 {
     wxTransformMatrix result = *this;
     result *= t;
-    result.m_isIdentity = result.IsIdentity1();
+    //result.m_isIdentity = result.CheckIdentity(); // updated by operator*=()
     return result;
 }
 
-wxTransformMatrix  wxTransformMatrix::operator/(const double& t) const
+wxTransformMatrix  wxTransformMatrix::operator/(double t) const
 {
     wxTransformMatrix result = *this;
 //    wxASSERT(t!=0);
     result /= t;
-    result.m_isIdentity = result.IsIdentity1();
+    //result.m_isIdentity = result.CheckIdentity(); // updated by operator/=()
     return result;
 }
 
@@ -501,7 +492,7 @@
 {
     wxTransformMatrix result = *this;
     result += m;
-    result.m_isIdentity = result.IsIdentity1();
+    //result.m_isIdentity = result.CheckIdentity(); // updated by operator+=()
     return result;
 }
 
@@ -509,7 +500,7 @@
 {
     wxTransformMatrix result = *this;
     result -= m;
-    result.m_isIdentity = result.IsIdentity1();
+    //result.m_isIdentity = result.CheckIdentity(); // updated by operator-=()
     return result;
 }
 
@@ -518,7 +509,7 @@
 {
     wxTransformMatrix result = *this;
     result *= m;
-    result.m_isIdentity = result.IsIdentity1();
+    //result.m_isIdentity = result.CheckIdentity(); // updated by operator*=()
     return result;
 }
 
@@ -529,7 +520,7 @@
     for (int i = 0; i < 3; i++)
         for (int j = 0; j < 3; j++)
             result.m_matrix[i][j] = -(this->m_matrix[i][j]);
-    result.m_isIdentity = result.IsIdentity1();
+    result.m_isIdentity = result.CheckIdentity();
     return result;
 }
 
@@ -546,14 +537,15 @@
 
 }
 
-double wxTransformMatrix::Get_scaleX()
+double wxTransformMatrix::GetScaleX() const
 {
     double scale_factor;
     double rot_angle = CheckInt(atan2(m_matrix[1][0],m_matrix[0][0])*180/pi);
+
     if ( !wxIsSameDouble(rot_angle, 90) && !wxIsSameDouble(rot_angle, -90) )
         scale_factor = m_matrix[0][0]/cos((rot_angle/180)*pi);
     else
-        scale_factor = m_matrix[0][0]/sin((rot_angle/180)*pi);  // er kan nl. niet door 0 gedeeld worden !
+        scale_factor = m_matrix[0][0]/sin((rot_angle/180)*pi);  // division by 0 possibility !
 
     scale_factor = CheckInt(scale_factor);
     if (scale_factor < 0)
@@ -562,28 +554,28 @@
     return scale_factor;
 }
 
-double wxTransformMatrix::Get_scaleY()
+double wxTransformMatrix::GetScaleY() const
 {
     double scale_factor;
     double rot_angle = CheckInt(atan2(m_matrix[1][0],m_matrix[0][0])*180/pi);
+
     if ( !wxIsSameDouble(rot_angle, 90) && !wxIsSameDouble(rot_angle, -90) )
        scale_factor = m_matrix[1][1]/cos((rot_angle/180)*pi);
     else
-       scale_factor = m_matrix[1][1]/sin((rot_angle/180)*pi);   // er kan nl. niet door 0 gedeeld worden !
+       scale_factor = m_matrix[1][1]/sin((rot_angle/180)*pi);   // division by 0 possibility !
 
     scale_factor = CheckInt(scale_factor);
     if (scale_factor < 0)
-
         scale_factor = -scale_factor;
 
     return scale_factor;
 
 }
 
-double wxTransformMatrix::GetRotation()
+double wxTransformMatrix::GetRotation() const
 {
-    double temp1 = GetValue(0,0);   // for angle calculation
-    double temp2 = GetValue(0,1);   //
+    double temp1 = GetElement(0,0);   // for angle calculation
+    double temp2 = GetElement(1,0);   //
 
     // Rotation
     double rot_angle = atan2(temp2,temp1)*180/pi;
@@ -594,8 +586,8 @@
 
 void wxTransformMatrix::SetRotation(double rotation)
 {
-    double x=GetValue(2,0);
-    double y=GetValue(2,1);
+    double x=GetElement(0,2);
+    double y=GetElement(1,2);
     Rotate(-GetRotation(), x, y);
     Rotate(rotation, x, y);
 }

diff -rbu2 wxCVS1/wxWindows/include/wx/generic/grid.h wxCVS/wxWindows/include/wx/generic/grid.h
--- wxCVS1/wxWindows/include/wx/generic/grid.h	Sun Dec 30 12:22:03 2001
+++ wxCVS/wxWindows/include/wx/generic/grid.h	Fri Feb 15 17:25:28 2002
@@ -624,4 +624,6 @@
         m_vAlign = vAlign;
     }
+    void SetSize(int num_rows, int num_cols);
+    void SetOverflow( bool allow ) { m_overflow = allow; }
     void SetReadOnly(bool isReadOnly = TRUE)
         { m_isReadOnly = isReadOnly ? ReadOnly : ReadWrite; }
@@ -648,4 +650,6 @@
     const wxFont& GetFont() const;
     void GetAlignment(int *hAlign, int *vAlign) const;
+    void GetSize(int *num_rows, int *num_cols) const;
+    bool GetOverflow() const { return m_overflow; }
     wxGridCellRenderer *GetRenderer(wxGrid* grid, int row, int col) const;
     wxGridCellEditor *GetEditor(wxGrid* grid, int row, int col) const;
@@ -683,4 +687,7 @@
     int      m_hAlign,
              m_vAlign;
+    int      m_sizeRows,
+             m_sizeCols;
+    bool     m_overflow;
 
     wxGridCellRenderer* m_renderer;
@@ -816,5 +823,5 @@
 
     // these functions take ownership of the pointer
-    virtual void SetAttr(wxGridCellAttr* attr, int row, int col);
+    virtual void SetAttr( wxGridCellAttr* attr, int row, int col);
     virtual void SetRowAttr(wxGridCellAttr *attr, int row);
     virtual void SetColAttr(wxGridCellAttr *attr, int col);
@@ -1227,5 +1234,6 @@
     bool     CanDragGridSize() { return m_canDragGridSize; }
 
-    // this sets the specified attribute for all cells in this row/col
+    // this sets the specified attribute for this cell or in this row/col
+    void     SetAttr(int row, int col, wxGridCellAttr *attr);
     void     SetRowAttr(int row, wxGridCellAttr *attr);
     void     SetColAttr(int col, wxGridCellAttr *attr);
@@ -1256,4 +1264,7 @@
     void     GetDefaultCellAlignment( int *horiz, int *vert );
     void     GetCellAlignment( int row, int col, int *horiz, int *vert );
+    bool     GetDefaultCellOverflow();
+    bool     GetCellOverflow( int row, int col );
+    void     GetCellSize( int row, int col, int *num_rows, int *num_cols );
 
     void     SetDefaultRowSize( int height, bool resizeExistingRows = FALSE );
@@ -1297,4 +1308,7 @@
     void     SetDefaultCellAlignment( int horiz, int vert );
     void     SetCellAlignment( int row, int col, int horiz, int vert );
+    void     SetDefaultCellOverflow( bool allow );
+    void     SetCellOverflow( int row, int col, bool allow );
+    void     SetCellSize( int row, int col, int num_rows, int num_cols );
 
     // takes ownership of the pointer
@@ -1759,5 +1773,4 @@
     bool       m_cellEditCtrlEnabled;   // is in-place edit currently shown?
 
-
     void Create();
     void Init();
diff -rbu2 wxCVS1/wxWindows/samples/newgrid/griddemo.cpp wxCVS/wxWindows/samples/newgrid/griddemo.cpp
--- wxCVS1/wxWindows/samples/newgrid/griddemo.cpp	Mon Jan 21 13:11:15 2002
+++ wxCVS/wxWindows/samples/newgrid/griddemo.cpp	Fri Feb 15 09:44:12 2002
@@ -75,4 +75,6 @@
     EVT_MENU( ID_TOGGLEGRIDLINES, GridFrame::ToggleGridLines )
     EVT_MENU( ID_AUTOSIZECOLS, GridFrame::AutoSizeCols )
+    EVT_MENU( ID_CELLOVERFLOW, GridFrame::CellOverflow )
+    EVT_MENU( ID_RESIZECELL, GridFrame::ResizeCell )
     EVT_MENU( ID_SETLABELCOLOUR, GridFrame::SetLabelColour )
     EVT_MENU( ID_SETLABELTEXTCOLOUR, GridFrame::SetLabelTextColour )
@@ -151,4 +153,6 @@
     viewMenu->Append( ID_SET_RO_HIGHLIGHT_WIDTH, "&Set Cell RO Highlight Width...", "" );
     viewMenu->Append( ID_AUTOSIZECOLS, "&Auto-size cols" );
+    viewMenu->Append( ID_CELLOVERFLOW, "&Overflow cells", "", TRUE );
+    viewMenu->Append( ID_RESIZECELL, "&Resize cell (7,1)", "", TRUE );
 
     wxMenu *rowLabelMenu = new wxMenu;
@@ -260,4 +264,11 @@
     grid->SetCellValue( 99, 99, "Ctrl+End\nwill go to\nthis cell" );
 
+    grid->SetCellValue( 1, 0, "This default cell will overflow into neighboring cells, but not if you turn overflow off.");
+
+    grid->SetCellTextColour(1, 2, *wxRED);
+    grid->SetCellBackgroundColour(1, 2, *wxGREEN);
+
+    grid->SetCellValue( 1, 4, "I'm in the middle");
+
     grid->SetCellValue(2, 2, "red");
 
@@ -288,6 +299,6 @@
 
     grid->SetCellTextColour(5, 8, *wxGREEN);
-    grid->SetCellValue(5, 8, "Bg from row attr\nText col from cell attr");
-    grid->SetCellValue(5, 5, "Bg from row attr\nText col from col attr");
+    grid->SetCellValue(5, 8, "Bg from row attr\nText col from col attr");
+    grid->SetCellValue(5, 5, "Bg from row attr text col from cell attr and this text is so long that it covers over many many empty cells but is broken by one that isn't");
 
     grid->SetColFormatFloat(6);
@@ -301,4 +312,19 @@
     grid->SetCellValue(2, 7, "12345.67890");
 
+    const wxString choices[] =
+    {
+        _T("Please select a choice"),
+        _T("This takes two cells"),
+        _T("Another choice"),
+    };
+    grid->SetCellEditor(4, 0, new wxGridCellChoiceEditor(WXSIZEOF(choices), choices));
+    grid->SetCellSize(4, 0, 1, 2);
+    grid->SetCellValue(4, 0, choices[0]);
+    grid->SetCellOverflow(4, 0, FALSE);
+
+    grid->SetCellSize(7, 1, 3, 4);
+    grid->SetCellAlignment(7, 1, wxALIGN_CENTRE, wxALIGN_CENTRE);
+    grid->SetCellValue(7, 1, "Big box!");
+
     wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
     topSizer->Add( grid,
@@ -336,4 +362,5 @@
     GetMenuBar()->Check( ID_TOGGLEGRIDSIZING, TRUE );
     GetMenuBar()->Check( ID_TOGGLEGRIDLINES, TRUE );
+    GetMenuBar()->Check( ID_CELLOVERFLOW, TRUE );
 }
 
@@ -427,5 +454,4 @@
 
 
-
 void GridFrame::AutoSizeCols( wxCommandEvent& WXUNUSED(ev) )
 {
@@ -434,4 +460,18 @@
 }
 
+void GridFrame::CellOverflow( wxCommandEvent& ev )
+{
+    grid->SetDefaultCellOverflow(ev.IsChecked());
+    grid->Refresh();
+}
+
+void GridFrame::ResizeCell( wxCommandEvent& ev )
+{
+    if (ev.IsChecked())
+        grid->SetCellSize( 7, 1, 5, 5 );
+    else
+        grid->SetCellSize( 7, 1, 1, 5 );
+    grid->Refresh();
+}
 
 void GridFrame::SetLabelColour( wxCommandEvent& WXUNUSED(ev) )
Only in wxCVS/wxWindows/samples/newgrid: griddemo.d
diff -rbu2 wxCVS1/wxWindows/samples/newgrid/griddemo.h wxCVS/wxWindows/samples/newgrid/griddemo.h
--- wxCVS1/wxWindows/samples/newgrid/griddemo.h	Mon Jan 21 13:11:15 2002
+++ wxCVS/wxWindows/samples/newgrid/griddemo.h	Thu Feb 14 23:57:38 2002
@@ -43,4 +43,6 @@
     void ToggleGridLines( wxCommandEvent& );
     void AutoSizeCols( wxCommandEvent& );
+    void CellOverflow( wxCommandEvent& );
+    void ResizeCell( wxCommandEvent& );
     void SetLabelColour( wxCommandEvent& );
     void SetLabelTextColour( wxCommandEvent& );
@@ -107,4 +109,6 @@
         ID_TOGGLEGRIDLINES,
         ID_AUTOSIZECOLS,
+        ID_CELLOVERFLOW,
+        ID_RESIZECELL,
         ID_SETLABELCOLOUR,
         ID_SETLABELTEXTCOLOUR,
diff -rbu2 wxCVS1/wxWindows/src/generic/grid.cpp wxCVS/wxWindows/src/generic/grid.cpp
--- wxCVS1/wxWindows/src/generic/grid.cpp	Mon Feb 11 20:54:48 2002
+++ wxCVS/wxWindows/src/generic/grid.cpp	Fri Feb 15 16:40:59 2002
@@ -1589,4 +1589,31 @@
                                     bool isSelected)
 {
+    wxRect rect = rectCell;
+
+    if (attr.GetOverflow())
+    {
+        int cols = grid.GetNumberCols();
+        int best_width = GetBestSize(grid,attr,dc,row,col).GetWidth();
+        int cell_rows, cell_cols;
+        attr.GetSize( &cell_rows, &cell_cols ); // shouldn't get here if <=0
+        if ((best_width > rectCell.width) && (col < cols) && grid.GetTable())
+        {
+            int i, c_cols, c_rows;
+            for (i = col+cell_cols; i < cols; i++)
+            {
+                // check w/ anchor cell for multicell block
+                grid.GetCellSize(row, i, &c_rows, &c_cols);
+                if (c_rows > 0) c_rows = 0;
+                if (grid.GetTable()->IsEmptyCell(row+c_rows, i))
+                {
+                    rect.width += grid.GetColSize(i);
+                    if (rect.width >= best_width) break;
+                }
+                else break;
+            }
+        }
+    }
+
+    // erase only this cells background, overflow cells should have been erased
     wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
 
@@ -1597,9 +1624,7 @@
     attr.GetAlignment(&hAlign, &vAlign);
 
-    wxRect rect = rectCell;
     rect.Inflate(-1);
-
-    grid.DrawTextRectangle(dc, grid.GetCellValue(row, col),
-                           rect, hAlign, vAlign);
+    grid.DrawTextRectangle(dc, grid.GetCellValue(row, col), rect,
+                           hAlign, vAlign);
 }
 
@@ -1910,4 +1935,7 @@
     m_attrkind = wxGridCellAttr::Cell;
 
+    m_sizeRows = m_sizeCols = 1;
+    m_overflow = TRUE;
+
     SetDefAttr(attrDefault);
 }
@@ -1926,4 +1954,6 @@
         attr->SetAlignment(m_hAlign, m_vAlign);
 
+    attr->SetSize( m_sizeRows, m_sizeCols );
+
     if ( m_renderer )
     {
@@ -1959,4 +1989,6 @@
     }
 
+    mergefrom->GetSize( &m_sizeRows, &m_sizeCols );
+
     // Directly access member functions as GetRender/Editor don't just return
     // m_renderer/m_editor
@@ -1979,4 +2011,25 @@
 }
 
+void wxGridCellAttr::SetSize(int num_rows, int num_cols)
+{
+    // The size of a cell is normally 1,1
+
+    // If this cell is larger (2,2) then this is the top left cell
+    // the other cells that will be covered (lower right cells) must be
+    // set to negative or zero values such that
+    // row + num_rows of the covered cell points to the larger cell (this cell)
+    // same goes for the col + num_cols.
+
+    // Size of 0,0 is NOT valid, neither is <=0 and any positive value
+
+    wxASSERT_MSG( (!((num_rows>0)&&(num_cols<=0)) ||
+                  !((num_rows<=0)&&(num_cols>0)) ||
+                  !((num_rows==0)&&(num_cols==0))),
+                  wxT("wxGridCellAttr::SetSize only takes two postive values or negative/zero values"));
+
+    m_sizeRows = num_rows;
+    m_sizeCols = num_cols;
+}
+
 const wxColour& wxGridCellAttr::GetTextColour() const
 {
@@ -2040,4 +2093,9 @@
 }
 
+void wxGridCellAttr::GetSize( int *num_rows, int *num_cols ) const
+{
+    if ( num_rows ) *num_rows = m_sizeRows;
+    if ( num_cols ) *num_cols = m_sizeCols;
+}
 
 // GetRenderer and GetEditor use a slightly different decision path about
@@ -3522,4 +3580,5 @@
     wxRegion reg = GetUpdateRegion();
     wxGridCellCoordsArray DirtyCells = m_owner->CalcCellsExposed( reg );
+
     m_owner->DrawGridCellArea( dc , DirtyCells);
 #if WXGRID_DRAW_LINES
@@ -4917,4 +4976,12 @@
     XYToCell( x, y, coords );
 
+    int cell_rows, cell_cols;
+    GetCellSize( coords.GetRow(), coords.GetCol(), &cell_rows, &cell_cols );
+    if ((cell_rows < 0) || (cell_cols < 0))
+    {
+        coords.SetRow(coords.GetRow() + cell_rows);
+        coords.SetCol(coords.GetCol() + cell_cols);
+    }
+
     if ( event.Dragging() )
     {
@@ -4941,6 +5008,6 @@
             if ( IsCellEditControlShown() )
             {
-                HideCellEditControl();
                 SaveEditControlValue();
+                HideCellEditControl();
             }
 
@@ -5280,6 +5347,6 @@
         dc.SetLogicalFunction( wxINVERT );
         dc.DrawLine( left, m_dragLastPos, left+cw, m_dragLastPos );
-        HideCellEditControl();
         SaveEditControlValue();
+        HideCellEditControl();
 
         int rowTop = GetRowTop(m_dragRowOrCol);
@@ -5296,5 +5363,27 @@
             rect.height = ch - rect.y;
             m_rowLabelWin->Refresh( TRUE, &rect );
+
             rect.width = cw;
+
+            // if there is a multicell block, paint all of it
+            if (m_table)
+            {
+                int i, cell_rows, cell_cols, subtract_rows = 0;
+                int leftCol = XToCol(left);
+                int rightCol = XToCol(left+cw);
+                if (leftCol >= 0)
+                {
+                    if (rightCol < 0) rightCol = m_numCols;
+                    for (i=leftCol; i<rightCol; i++)
+                    {
+                        GetCellSize(m_dragRowOrCol, i, &cell_rows, &cell_cols);
+                        if (cell_rows < subtract_rows) subtract_rows = cell_rows;
+                    }
+                    rect.y = GetRowTop(m_dragRowOrCol + subtract_rows);
+                    CalcScrolledPosition(0, rect.y, &dummy, &rect.y);
+                    rect.height = ch - rect.y;
+                }
+            }
+
             m_gridWin->Refresh( FALSE, &rect );
         }
@@ -5319,6 +5408,6 @@
         dc.SetLogicalFunction( wxINVERT );
         dc.DrawLine( m_dragLastPos, top, m_dragLastPos, top+ch );
-        HideCellEditControl();
         SaveEditControlValue();
+        HideCellEditControl();
 
         int colLeft = GetColLeft(m_dragRowOrCol);
@@ -5336,5 +5425,26 @@
             rect.height = m_colLabelHeight;
             m_colLabelWin->Refresh( TRUE, &rect );
+
             rect.height = ch;
+
+            // if there is a multicell block, paint all of it
+            if (m_table)
+            {
+                int i, cell_rows, cell_cols, subtract_cols = 0;
+                int topRow = YToRow(top);
+                int bottomRow = YToRow(top+cw);
+                if (topRow >= 0)
+                {
+                    if (bottomRow < 0) bottomRow = m_numRows;
+                    for (i=topRow; i<bottomRow; i++)
+                    {
+                        GetCellSize(i, m_dragRowOrCol, &cell_rows, &cell_cols);
+                        if (cell_cols < subtract_cols) subtract_cols = cell_cols;
+                    }
+                    rect.x = GetColLeft(m_dragRowOrCol + subtract_cols);
+                    CalcScrolledPosition(rect.x, 0, &rect.x, &dummy);
+                    rect.width = cw - rect.x;
+                }
+            }
             m_gridWin->Refresh( FALSE, &rect );
         }
@@ -5728,6 +5838,6 @@
                     {
                         // at the bottom of a column
-                        HideCellEditControl();
                         SaveEditControlValue();
+                        HideCellEditControl();
                     }
                 }
@@ -5748,6 +5858,6 @@
                     {
                         // at left of grid
-                        HideCellEditControl();
                         SaveEditControlValue();
+                        HideCellEditControl();
                     }
                 }
@@ -5761,6 +5871,6 @@
                     {
                         // at right of grid
-                        HideCellEditControl();
                         SaveEditControlValue();
+                        HideCellEditControl();
                     }
                 }
@@ -5966,4 +6076,5 @@
         // Either one rectangle is a real subset of the
         // other, or they are (almost) disjoint!
+        int     i;
         wxRect  rect[4];
         bool    need_refresh[4];
@@ -5972,5 +6083,4 @@
         need_refresh[2] =
         need_refresh[3] = FALSE;
-        int     i;
 
         // Store intermediate values
@@ -6110,11 +6220,94 @@
     if ( !m_numRows || !m_numCols ) return;
 
-    size_t i;
-    size_t numCells = cells.GetCount();
+    int i, j, k, l, numCells = cells.GetCount();
+    int row, col, cell_rows, cell_cols;
+    wxGridCellCoordsArray redrawCells;
+
+    for ( i = numCells-1; i >= 0;  i-- )
+    {
+        row = cells[i].GetRow();
+        col = cells[i].GetCol();
+        GetCellSize( row, col, &cell_rows, &cell_cols );
+
+        // If this cell is part of a multicell block, find owner for repaint
+        if ( cell_rows <= 0 || cell_cols <= 0 )
+        {
+            wxGridCellCoords cell(row+cell_rows, col+cell_cols);
+            bool marked = FALSE;
 
-    for ( i = 0;  i < numCells;  i++ )
+            for (j=0; j<numCells; j++)
+            {
+                if ( cell == cells[j] )
     {
+                    marked = TRUE;
+                    break;;
+                }
+            }
+            if (!marked)
+            {
+                int count = redrawCells.GetCount();
+                for (j=0; j<count; j++)
+                {
+                    if ( cell == redrawCells[j] )
+                    {
+                        marked = TRUE;
+                        break;
+                    }
+                }
+                if (!marked) redrawCells.Add( cell );
+            }
+            continue; // don't bother drawing this cell
+        }
+
+        // If this cell is empty, find cell to left that might want to overflow
+        if (m_table && m_table->IsEmptyCell(row, col))
+        {
+            for ( l = 0; l < cell_rows; l++ )
+            {
+                for (j=col-1; j >= 0; j--)
+                {
+                    if (!m_table->IsEmptyCell(row+l, j))
+                    {
+                        if (GetCellOverflow(row+l, j))
+                        {
+                            wxGridCellCoords cell(row+l, j);
+                            bool marked = FALSE;
+
+                            for (k=0; k<numCells; k++)
+                            {
+                                if ( cell == cells[k] )
+                                {
+                                    marked = TRUE;
+                                    break;
+                                }
+                            }
+                            if (!marked)
+                            {
+                                int count = redrawCells.GetCount();
+                                for (k=0; k<count; k++)
+                                {
+                                    if ( cell == redrawCells[k] )
+                                    {
+                                        marked = TRUE;
+                                        break;
+                                    }
+                                }
+                                if (!marked) redrawCells.Add( cell );
+                            }
+                        }
+                        break;
+                    }
+                }
+            }
+        }
         DrawCell( dc, cells[i] );
     }
+
+    numCells = redrawCells.GetCount();
+
+    for ( i = numCells - 1; i >= 0;  i-- )
+    {
+        DrawCell( dc, redrawCells[i] );
+    }
 }
 
@@ -6162,14 +6355,13 @@
     // we draw the cell border ourselves
 #if !WXGRID_DRAW_LINES
-    if ( m_gridLinesEnabled )
-        DrawCellBorder( dc, coords );
+    if ( m_gridLinesEnabled ) DrawCellBorder( dc, coords );
 #endif
 
     wxGridCellAttr* attr = GetCellAttr(row, col);
 
-    bool isCurrent = coords == m_currentCellCoords;
-
     wxRect rect = CellToRect( row, col );
 
+    bool isCurrent = coords == m_currentCellCoords;
+
     // if the editor is shown, we should use it and not the renderer
     // Note: However, only if it is really _shown_, i.e. not hidden!
@@ -6208,6 +6400,6 @@
     int penWidth = attr->IsReadOnly() ? m_cellHighlightROPenWidth : m_cellHighlightPenWidth;
 
-    if (penWidth > 0) {
-
+    if (penWidth > 0)
+    {
         // The center of th drawn line is where the position/width/height of
         // the rectangle is actually at, (on wxMSW atr least,) so we will
@@ -6259,13 +6451,12 @@
     dc.SetPen( wxPen(GetGridLineColour(), 1, wxSOLID) );
 
-    // right hand border
-    //
-    dc.DrawLine( GetColRight(col), GetRowTop(row),
-                 GetColRight(col), GetRowBottom(row) );
+    wxRect rect = CellToRect( row, col );
 
+    // right hand border
+    dc.DrawLine( rect.x + rect.width, rect.y,
+                 rect.x + rect.width, rect.y + rect.height + 1);
     // bottom border
-    //
-    dc.DrawLine( GetColLeft(col), GetRowBottom(row),
-                 GetColRight(col), GetRowBottom(row) );
+    dc.DrawLine( rect.x,              rect.y + rect.height,
+                 rect.x + rect.width, rect.y + rect.height);
 }
 
@@ -6309,4 +6500,8 @@
 void wxGrid::DrawAllGridLines( wxDC& dc, const wxRegion & WXUNUSED(reg) )
 {
+#if !WXGRID_DRAW_LINES
+    return;
+#endif
+
     if ( !m_gridLinesEnabled ||
          !m_numRows ||
@@ -6345,34 +6540,65 @@
     bottom = wxMin( bottom, GetRowBottom(m_numRows - 1) );
 
+    // no gridlines inside multicells, clip them out
+    int leftCol   = XToCol(left);
+    int topRow    = YToRow(top);
+    int rightCol  = XToCol(right);
+    int bottomRow = YToRow(bottom);
+    wxRegion clippedcells(0, 0, cw, ch);
+
+    if ((leftCol >= 0) && (topRow >= 0))
+    {
+        if (rightCol  < 0) rightCol  = m_numCols;
+        if (bottomRow < 0) bottomRow = m_numRows;
+
+        int i, j, cell_rows, cell_cols;
+        wxRect rect;
+
+        for (j=topRow; j<bottomRow; j++)
+        {
+            for (i=leftCol; i<rightCol; i++)
+            {
+                GetCellSize( j, i, &cell_rows, &cell_cols );
+                if ((cell_rows > 1) || (cell_cols > 1))
+                {
+                    rect = CellToRect(j,i);
+                    CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
+                    clippedcells.Subtract(rect);
+                }
+                else if ((cell_rows < 0) || (cell_cols < 0))
+                {
+                    rect = CellToRect(j+cell_rows, i+cell_cols);
+                    CalcScrolledPosition( rect.x, rect.y, &rect.x, &rect.y );
+                    clippedcells.Subtract(rect);
+                }
+            }
+        }
+    }
+    dc.SetClippingRegion( clippedcells );
+
     dc.SetPen( wxPen(GetGridLineColour(), 1, wxSOLID) );
 
     // horizontal grid lines
     //
-    int i;
+    int i, rowBottom, colRight;
     for ( i = 0; i < m_numRows; i++ )
     {
-        int bot = GetRowBottom(i) - 1;
+        rowBottom = GetRowBottom(i) - 1;
 
-        if ( bot > bottom )
-        {
-            break;
-        }
+        if ( rowBottom > bottom ) break;
 
-        if ( bot >= top )
+        if ( rowBottom >= top )
         {
-            dc.DrawLine( left, bot, right, bot );
+            dc.DrawLine( left, rowBottom, right, rowBottom );
         }
     }
 
-
     // vertical grid lines
     //
     for ( i = 0; i < m_numCols; i++ )
     {
-        int colRight = GetColRight(i) - 1;
-        if ( colRight > right )
-        {
-            break;
-        }
+        colRight = GetColRight(i) - 1;
+
+        if ( colRight > right ) break;
 
         if ( colRight >= left )
@@ -6381,4 +6607,6 @@
         }
     }
+
+    dc.DestroyClippingRegion();
 }
 
@@ -6693,6 +6921,6 @@
             SendEvent( wxEVT_GRID_EDITOR_HIDDEN);
 
-            HideCellEditControl();
             SaveEditControlValue();
+            HideCellEditControl();
 
             // do it after HideCellEditControl()
@@ -6765,4 +6993,15 @@
             int col = m_currentCellCoords.GetCol();
 
+            // if this is part of a multicell, find owner (topleft)
+            int cell_rows, cell_cols;
+            GetCellSize( row, col, &cell_rows, &cell_cols );
+            if ( cell_rows <= 0 || cell_cols <= 0 )
+            {
+                row += cell_rows;
+                col += cell_cols;
+                m_currentCellCoords.SetRow( row );
+                m_currentCellCoords.SetCol( col );
+            }
+
             // convert to scrolled coords
             //
@@ -6802,4 +7041,31 @@
             editor->Show( TRUE, attr );
 
+            // resize editor to overflow into righthand cells if allowed
+            wxString value = GetCellValue(row, col);
+            if ( (value != wxEmptyString) && (attr->GetOverflow()) )
+            {
+                wxClientDC dc(m_gridWin);
+                wxCoord y = 0, best_width = 0;
+                dc.SetFont(attr->GetFont());
+                dc.GetTextExtent(value, &best_width, &y);
+
+                int cell_rows, cell_cols;
+                attr->GetSize( &cell_rows, &cell_cols );
+
+                if ((best_width > rect.width) && (col < m_numCols) && m_table)
+                {
+                    int i;
+                    for (i = col+cell_cols; i < m_numCols; i++)
+                    {
+                        if (m_table->IsEmptyCell(row,i))
+                        {
+                            rect.width += GetColWidth(i);
+                            if (rect.width >= best_width) break;
+                        }
+                        else
+                            break;
+                    }
+                }
+            }
             editor->SetSize( rect );
 
@@ -6826,5 +7092,10 @@
         attr->DecRef();
         m_gridWin->SetFocus();
-        wxRect rect( CellToRect( row, col ) );
+
+        // refresh whole row to the right
+        wxRect rect( CellToRect(row, col) );
+        CalcScrolledPosition(rect.x, rect.y, &rect.x, &rect.y );
+        rect.width = m_gridWin->GetClientSize().GetWidth() - rect.x;
+
         m_gridWin->Refresh( FALSE, &rect );
     }
@@ -6884,30 +7155,61 @@
 }
 
-
 int wxGrid::YToRow( int y )
 {
-    int i;
+    // fast search 100 rows = 6 iterations, 10000 rows = 10
+    if (m_numRows == 0) return -1;
+    if (y < 0) return -1;
+    if (y > GetRowBottom(m_numRows-1)) return -1;
 
-    for ( i = 0;  i < m_numRows;  i++ )
+    int hi = m_numRows/2, lo = 0, tmp;
+
+    while (hi - lo > 0)
     {
-        if ( y < GetRowBottom(i) )
-            return i;
+        if (y > GetRowBottom(hi))
+        {
+            tmp = hi;
+            hi += (hi + 1 - lo)/2;
+            lo = tmp;
+        }
+        else if (y > GetRowTop(hi))
+        {
+            return hi;
+        }
+        else
+        {
+            hi -= (hi + 1 - lo)/2;
+        }
     }
 
-    return -1;
+    return hi;
 }
 
-
 int wxGrid::XToCol( int x )
 {
-    int i;
+    if (m_numCols == 0) return -1;
+    if (x < 0) return -1;
+    if (x > GetColRight(m_numCols-1)) return -1;
 
-    for ( i = 0;  i < m_numCols;  i++ )
+    int hi = m_numCols/2, lo = 0, tmp;
+
+    while (hi - lo > 0)
     {
-        if ( x < GetColRight(i) )
-            return i;
+        if (x > GetColRight(hi))
+        {
+            tmp = hi;
+            hi += (hi + 1 - lo)/2;
+            lo = tmp;
+        }
+        else if (x > GetColLeft(hi))
+        {
+            return hi;
+        }
+        else
+        {
+            hi -= (hi + 1 - lo)/2;
+        }
     }
 
-    return -1;
+    return hi;
 }
 
@@ -6962,12 +7264,21 @@
          col >= 0  &&  col < m_numCols )
     {
+        int i, cell_rows, cell_cols;
+        rect.width = rect.height = 0;
+        GetCellSize( row, col, &cell_rows, &cell_cols );
+        // if negative then find multicell owner
+        if (cell_rows < 0) row += cell_rows;
+        if (cell_cols < 0) col += cell_cols;
+        GetCellSize( row, col, &cell_rows, &cell_cols );
+
         rect.x = GetColLeft(col);
         rect.y = GetRowTop(row);
-        rect.width = GetColWidth(col);
-        rect.height = GetRowHeight(row);
+        for (i=col; i<col+cell_cols; i++) rect.width  += GetColWidth(i);
+        for (i=row; i<row+cell_rows; i++) rect.height += GetRowHeight(i);
     }
 
     // if grid lines are enabled, then the area of the cell is a bit smaller
-    if (m_gridLinesEnabled) {
+    if (m_gridLinesEnabled)
+    {
         rect.width -= 1;
         rect.height -= 1;
@@ -7924,4 +8235,9 @@
 }
 
+void wxGrid::SetDefaultCellOverflow( bool allow )
+{
+    m_defaultCellAttr->SetOverflow(allow);
+}
+
 void wxGrid::SetDefaultCellFont( const wxFont& font )
 {
@@ -7963,4 +8279,9 @@
 }
 
+bool wxGrid::GetDefaultCellOverflow()
+{
+    return m_defaultCellAttr->GetOverflow();
+}
+
 wxGridCellRenderer *wxGrid::GetDefaultRenderer() const
 {
@@ -8008,4 +8329,19 @@
 }
 
+bool wxGrid::GetCellOverflow( int row, int col )
+{
+    wxGridCellAttr *attr = GetCellAttr(row, col);
+    bool allow = attr->GetOverflow();
+    attr->DecRef();
+    return allow;
+}
+
+void wxGrid::GetCellSize( int row, int col, int *num_rows, int *num_cols )
+{
+    wxGridCellAttr *attr = GetCellAttr(row, col);
+    attr->GetSize( num_rows, num_cols );
+    attr->DecRef();
+}
+
 wxGridCellRenderer* wxGrid::GetCellRenderer(int row, int col)
 {
@@ -8168,5 +8504,4 @@
 
     SetColAttr(col, attr);
-
 }
 
@@ -8175,4 +8510,17 @@
 // ----------------------------------------------------------------------------
 
+void wxGrid::SetAttr(int row, int col, wxGridCellAttr *attr)
+{
+    if ( CanHaveAttributes() )
+    {
+        m_table->SetAttr(attr, row, col);
+        ClearAttrCache();
+    }
+    else
+    {
+        wxSafeDecRef(attr);
+    }
+}
+
 void wxGrid::SetRowAttr(int row, wxGridCellAttr *attr)
 {
@@ -8241,4 +8589,73 @@
 }
 
+void wxGrid::SetCellOverflow( int row, int col, bool allow )
+{
+    if ( CanHaveAttributes() )
+    {
+        wxGridCellAttr *attr = GetOrCreateCellAttr(row, col);
+        attr->SetOverflow(allow);
+        attr->DecRef();
+    }
+}
+
+void wxGrid::SetCellSize( int row, int col, int num_rows, int num_cols )
+{
+    if ( CanHaveAttributes() )
+    {
+        int cell_rows, cell_cols;
+
+        wxGridCellAttr *attr = GetOrCreateCellAttr(row, col);
+        attr->GetSize(&cell_rows, &cell_cols);
+        attr->SetSize(num_rows, num_cols);
+        attr->DecRef();
+
+        // Cannot set the size of a cell to 0 or negative values
+        // While it is perfectly legal to do that, this function cannot
+        // handle all the possibilies, do it by hand by getting the CellAttr.
+        // You can only set the size of a cell to 1,1 or greater with this fn
+        wxASSERT_MSG( !((cell_rows < 1) || (cell_cols < 1)),
+                      wxT("wxGrid::SetCellSize setting cell size that is already part of another cell"));
+        wxASSERT_MSG( !((num_rows < 1) || (num_cols < 1)),
+                      wxT("wxGrid::SetCellSize setting cell size to < 1"));
+
+        // if this was already a multicell then "turn off" the other cells first
+        if ((cell_rows > 1) || (cell_rows > 1))
+        {
+            int i, j;
+            for (j=row; j<row+cell_rows; j++)
+            {
+                for (i=col; i<col+cell_cols; i++)
+                {
+                    if ((i != col) || (j != row))
+                    {
+                        wxGridCellAttr *attr_stub = GetOrCreateCellAttr(j, i);
+                        attr_stub->SetSize( 1, 1 );
+                        attr_stub->DecRef();
+                    }
+                }
+            }
+        }
+
+        // mark the cells that will be covered by this cell to
+        // negative or zero values to point back at this cell
+        if (((num_rows > 1) || (num_cols > 1)) && (num_rows >= 1) && (num_cols >= 1))
+        {
+            int i, j;
+            for (j=row; j<row+num_rows; j++)
+            {
+                for (i=col; i<col+num_cols; i++)
+                {
+                    if ((i != col) || (j != row))
+                    {
+                        wxGridCellAttr *attr_stub = GetOrCreateCellAttr(j, i);
+                        attr_stub->SetSize( row-j, col-i );
+                        attr_stub->DecRef();
+                    }
+                }
+            }
+        }
+    }
+}
+
 void wxGrid::SetCellRenderer(int row, int col, wxGridCellRenderer *renderer)
 {
@@ -8699,7 +9116,10 @@
         if ( !GetBatchCount() )
         {
-            wxClientDC dc( m_gridWin );
-            PrepareDC( dc );
-            DrawCell( dc, wxGridCellCoords(row, col) );
+            int dummy;
+            wxRect rect( CellToRect( row, col ) );
+            rect.x = 0;
+            rect.width = m_gridWin->GetClientSize().GetWidth();
+            CalcScrolledPosition(0, rect.y, &dummy, &rect.y);
+            m_gridWin->Refresh( FALSE, &rect );
         }
 
@@ -8856,9 +9276,39 @@
     }
 
+    int i, j;
+    int left = rect.GetLeft();
+    int top = rect.GetTop();
+    int right = rect.GetRight();
+    int bottom = rect.GetBottom();
+
+    int leftCol = topLeft.GetCol();
+    int topRow = topLeft.GetRow();
+    int rightCol = bottomRight.GetCol();
+    int bottomRow = bottomRight.GetRow();
+
+    for ( j = topRow; j <= bottomRow; j++ )
+    {
+        for ( i = leftCol; i <= rightCol; i++ )
+        {
+            if ((j==topRow) || (j==bottomRow) || (i==leftCol) || (i==rightCol))
+            {
+                cellRect = CellToRect( j, i );
+
+                if (cellRect.x < left)
+                    left = cellRect.x;
+                if (cellRect.y < top)
+                    top = cellRect.y;
+                if (cellRect.x + cellRect.width > right)
+                    right = cellRect.x + cellRect.width;
+                if (cellRect.y + cellRect.height > bottom)
+                    bottom = cellRect.y + cellRect.height;
+            }
+        }
+    }
+
     // convert to scrolled coords
     //
-    int left, top, right, bottom;
-    CalcScrolledPosition( rect.GetLeft(), rect.GetTop(), &left, &top );
-    CalcScrolledPosition( rect.GetRight(), rect.GetBottom(), &right, &bottom );
+    CalcScrolledPosition( left, top, &left, &top );
+    CalcScrolledPosition( right, bottom, &right, &bottom );
 
     int cw, ch;

 	  	 

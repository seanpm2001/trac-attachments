diff -rbu2 wxWindows.orig/samples/db/dbtest.cpp wxWindows/samples/db/dbtest.cpp
--- wxWindows.orig/samples/db/dbtest.cpp	Sat Aug 31 19:36:12 2002
+++ wxWindows/samples/db/dbtest.cpp	Mon Mar 10 17:18:52 2003
@@ -1069,5 +1069,5 @@
     SetColDefs (11,wxT("LANGUAGE"),   DB_DATA_TYPE_INTEGER,    &NativeLanguage, SQL_C_ENUM,                 sizeof(NativeLanguage), FALSE,TRUE);
 #if wxODBC_BLOB_EXPERIMENT > 0
-    SetColDefs (12,wxT("PICTURE"),    DB_DATA_TYPE_BLOB,        Picture,        SQL_LONGVARBINARY,          sizeof(Picture),        FALSE,TRUE);
+    SetColDefs (12,wxT("PICTURE"),    DB_DATA_TYPE_BLOB,        Picture,        SQL_C_BINARY,          sizeof(Picture),        FALSE,TRUE);
 #endif
 }  // Ccontact::SetupColumns
diff -rbu2 wxWindows.orig/samples/db/dbtest.h wxWindows/samples/db/dbtest.h
--- wxWindows.orig/samples/db/dbtest.h	Sat Aug 31 19:36:13 2002
+++ wxWindows/samples/db/dbtest.h	Mon Mar 10 17:04:30 2003
@@ -43,5 +43,5 @@
 
 
-#define wxODBC_BLOB_EXPERIMENT 0
+#define wxODBC_BLOB_EXPERIMENT 1
 
 // Number of columns in the CONTACT table
diff -rbu2 wxWindows.orig/src/common/dbtable.cpp wxWindows/src/common/dbtable.cpp
--- wxWindows.orig/src/common/dbtable.cpp	Mon Dec 09 05:50:14 2002
+++ wxWindows/src/common/dbtable.cpp	Mon Mar 10 16:50:40 2003
@@ -478,5 +478,5 @@
             case DB_DATA_TYPE_BLOB:
                 fSqlType = pDb->GetTypeInfBlob().FsqlType;
-                precision = 50000;
+                precision = -1;
                 scale = 0;
                 if (colDefs[i].Null)
@@ -639,4 +639,34 @@
         return(TRUE);
     }
+    else if (retcode == SQL_NEED_DATA)
+    {
+        PTR pParmID;
+        while ((retcode = SQLParamData(hstmtUpdate, &pParmID) == SQL_NEED_DATA))
+        {
+            // Find the parameter
+            int i;
+            for (i=0; i < noCols; i++)
+            {
+                if (colDefs[i].PtrDataObj == pParmID)
+                {
+                    // We found it.  Store the parameter.
+                    retcode = SQLPutData(hstmtUpdate, pParmID, colDefs[i].SzDataObj);
+                    if (retcode != SQL_SUCCESS)
+                    {
+                        pDb->DispNextError();
+                        return pDb->DispAllErrors(henv, hdbc, hstmtUpdate);
+                    }
+                    break;
+                }
+            }
+        }
+        if (retcode == SQL_SUCCESS ||
+            retcode == SQL_NO_DATA_FOUND ||
+            retcode == SQL_SUCCESS_WITH_INFO)
+        {
+            // Record updated successfully
+            return(TRUE);
+        }
+    }
 
     // Problem updating record
@@ -1832,5 +1862,6 @@
     RETCODE retcode;
     retcode=SQLExecute(hstmtInsert);
-    if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO)
+    if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO &&
+        retcode != SQL_NEED_DATA)
     {
         // Check to see if integrity constraint was violated
@@ -1843,4 +1874,28 @@
             pDb->DispAllErrors(henv, hdbc, hstmtInsert);
             return(DB_FAILURE);
+        }
+    }
+    if (retcode == SQL_NEED_DATA)
+    {
+        PTR pParmID;
+        while ((retcode = SQLParamData(hstmtInsert, &pParmID) == SQL_NEED_DATA))
+        {
+            // Find the parameter
+            int i;
+            for (i=0; i < noCols; i++)
+            {
+                if (colDefs[i].PtrDataObj == pParmID)
+                {
+                    // We found it.  Store the parameter.
+                    retcode = SQLPutData(hstmtInsert, pParmID, colDefs[i].SzDataObj);
+                    if (retcode != SQL_SUCCESS)
+                    {
+                        pDb->DispNextError();
+                        pDb->DispAllErrors(henv, hdbc, hstmtInsert);
+                        return(DB_FAILURE);
+                    }
+                    break;
+                }
+            }
         }
     }

 	  	 

Index: samples/dnd/dnd.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/samples/dnd/dnd.cpp,v
retrieving revision 1.103
diff -u -r1.103 dnd.cpp
--- samples/dnd/dnd.cpp	2005/10/17 23:45:25	1.103
+++ samples/dnd/dnd.cpp	2005/12/29 22:40:31
@@ -38,6 +38,36 @@
 #if wxUSE_DRAG_AND_DROP
 
 // ----------------------------------------------------------------------------
+// Derive one class which puts any string (text, file names, or urls) we drop on
+// it in the listbox
+// ----------------------------------------------------------------------------
+
+class DnDAny : public wxDropTarget
+{
+public:
+    DnDAny(wxListBox *pOwner)
+    {
+      m_pOwner = pOwner;
+      dcomp = new wxDataObjectComposite();
+      dcomp->Add(new wxTextDataObject());
+      dcomp->Add(new wxFileDataObject());
+      SetDataObject(dcomp);
+    }
+
+    virtual wxDragResult OnDragOver(wxCoord x, wxCoord y, wxDragResult def)
+    {
+      // how can this support both text and url drops? Wordpad manages to.
+      return def;
+    }
+
+    virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def);
+
+private:
+    wxDataObjectComposite *dcomp;
+    wxListBox *m_pOwner;
+};
+
+// ----------------------------------------------------------------------------
 // Derive two simple classes which just put in the listbox the strings (text or
 // file names) we drop on them
 // ----------------------------------------------------------------------------
@@ -975,11 +1005,9 @@
 
     SetMenuBar(menu_bar);
 
-    // make a panel with 3 subwindows
-    wxString strFile(_T("Drop files here!")), strText(_T("Drop text on me"));
+    // make a panel with 2 subwindows
+    wxString strText(_T("Drop text for files on me"));
 
-    m_ctrlFile  = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, &strFile,
-                                wxLB_HSCROLL | wxLB_ALWAYS_SB );
     m_ctrlText  = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, &strText,
                                 wxLB_HSCROLL | wxLB_ALWAYS_SB );
 
@@ -995,15 +1023,15 @@
 
 #if wxUSE_DRAG_AND_DROP
     // associate drop targets with the controls
-    m_ctrlFile->SetDropTarget(new DnDFile(m_ctrlFile));
-    m_ctrlText->SetDropTarget(new DnDText(m_ctrlText));
+    //m_ctrlFile->SetDropTarget(new DnDFile(m_ctrlFile));
+    m_ctrlText->SetDropTarget(new DnDAny(m_ctrlText));
 #if wxUSE_LOG
     m_ctrlLog->SetDropTarget(new URLDropTarget);
 #endif // wxUSE_LOG
 #endif // wxUSE_DRAG_AND_DROP
 
     wxBoxSizer *sizer_top = new wxBoxSizer( wxHORIZONTAL );
-    sizer_top->Add(m_ctrlFile, 1, wxEXPAND );
+    //sizer_top->Add(m_ctrlFile, 1, wxEXPAND );
     sizer_top->Add(m_ctrlText, 1, wxEXPAND );
 
     wxBoxSizer *sizer = new wxBoxSizer( wxVERTICAL );
@@ -1153,7 +1181,7 @@
 {
     m_ctrlLog->Clear();
     m_ctrlText->Clear();
-    m_ctrlFile->Clear();
+    //m_ctrlFile->Clear();
 }
 #endif // wxUSE_LOG
 
@@ -1481,6 +1509,56 @@
 // ----------------------------------------------------------------------------
 // Notifications called by the base class
 // ----------------------------------------------------------------------------
+
+wxDragResult DnDAny::OnData(wxCoord x, wxCoord y, wxDragResult def)
+{
+    wxDataFormat df_file(wxDF_FILENAME);
+    wxDataFormat df_text(wxDF_TEXT);
+    char *data = NULL;
+    size_t data_size = 0;
+    wxString str;
+    
+    if ( !GetData() )
+    {
+      return wxDragNone;
+    }
+
+    // how do we tell which type of data we received?
+
+    data_size = dcomp->GetDataSize(df_file);
+    if (data_size)
+    {
+      int i = 0;
+      data = (char *)malloc(data_size);
+      dcomp->GetDataHere(df_file, data);
+
+      str = _T("DF_FILENAME:");
+      for (i = 0; i < data_size; i++)
+      {
+        if (data[i] != 0)
+        {
+          str += wxChar(data[i]);
+        }
+      }
+      m_pOwner->Append(str);
+
+      free(data);
+    }
+
+    data_size = dcomp->GetDataSize(df_text);
+    if (data_size)
+    {
+      data = (char *)malloc(data_size);
+      dcomp->GetDataHere(df_text, data);
+
+      str.Printf( _T("DF_TEXT: %s"), data);
+      m_pOwner->Append(str);
+
+      free(data);
+    }
+
+    return def;
+}
 
 bool DnDText::OnDropText(wxCoord, wxCoord, const wxString& text)
 {

 	  	 

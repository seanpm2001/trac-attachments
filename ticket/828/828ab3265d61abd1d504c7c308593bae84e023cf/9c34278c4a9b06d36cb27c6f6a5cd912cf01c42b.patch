Index: docs/latex/wx/longlong.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/docs/latex/wx/longlong.tex,v
retrieving revision 1.12
diff -u -r1.12 longlong.tex
--- docs/latex/wx/longlong.tex	2005/02/22 15:09:51	1.12
+++ docs/latex/wx/longlong.tex	2005/05/17 14:35:36
@@ -71,6 +71,31 @@
 
 Assignment operator from native long long (only for compilers supporting it).
 
+\membersection{wxLongLong::operator=}\label{wxlonglongoperatorassignull}
+
+\func{wxLongLong\& operator}{operator=}{\param{wxULongLong\_t }{ll}}
+
+Assignment operator from native unsigned long long (only for compilers 
+supporting it).
+
+\membersection{wxLongLong::operator=}\label{wxlonglongoperatorassignlong}
+
+\func{wxLongLong\& operator}{operator=}{\param{long }{l}}
+
+Assignment operator from long.
+
+\membersection{wxLongLong::operator=}\label{wxlonglongoperatorassignulong}
+
+\func{wxLongLong\& operator}{operator=}{\param{unsigned long }{l}}
+
+Assignment operator from unsigned long.
+
+\membersection{wxLongLong::operator=}\label{wxlonglongoperatorassignulonglong}
+
+\func{wxLongLong\& operator}{operator=}{\param{const wxULongLong \& }{ll}}
+
+Assignment operator from unsigned long long. The sign bit will be copied too.
+
 \membersection{wxLongLong::Abs}\label{wxlonglongabs}
 
 \constfunc{wxLongLong}{Abs}{\void}
Index: include/wx/chkconf.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/chkconf.h,v
retrieving revision 1.105
diff -u -r1.105 chkconf.h
--- include/wx/chkconf.h	2005/05/05 20:29:22	1.105
+++ include/wx/chkconf.h	2005/05/17 16:19:56
@@ -980,6 +980,17 @@
 #   endif
 #endif  /* wxUSE_DYNLIB_CLASS */
 
+#if wxUSE_ARCHIVE_STREAMS
+#   if !wxUSE_DATETIME
+#       ifdef wxABORT_ON_CONFIG_ERROR
+#           error "wxArchive requires wxUSE_DATETIME"
+#       else
+#           undef wxUSE_ARCHIVE_STREAMS
+#           define wxUSE_ARCHIVE_STREAMS 0
+#       endif
+#   endif
+#endif /* wxUSE_ARCHIVE_STREAMS */
+
 #if wxUSE_ZIPSTREAM
 #   if !wxUSE_ZLIB
 #       ifdef wxABORT_ON_CONFIG_ERROR
@@ -993,11 +1004,22 @@
 #       ifdef wxABORT_ON_CONFIG_ERROR
 #           error "wxZip requires wxArchive"
 #       else
-#           undef wxUSE_ARCHIVE_STREAMS
-#           define wxUSE_ARCHIVE_STREAMS 1
+#           undef wxUSE_ZIPSTREAM
+#           define wxUSE_ZIPSTREAM 0
 #       endif
 #   endif
 #endif /* wxUSE_ZIPSTREAM */
+
+#if wxUSE_ODBC
+#   if !wxUSE_DATETIME
+#       ifdef wxABORT_ON_CONFIG_ERROR
+#           error "wxODBC requires wxUSE_DATETIME"
+#       else
+#           undef wxUSE_ODBC
+#           define wxUSE_ODBC 0
+#       endif
+#   endif
+#endif /* wxUSE_ODBC */
 
 /* the rest of the tests is for the GUI settings only */
 #if wxUSE_GUI
Index: include/wx/datstrm.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/datstrm.h,v
retrieving revision 1.35
diff -u -r1.35 datstrm.h
--- include/wx/datstrm.h	2004/10/12 20:48:21	1.35
+++ include/wx/datstrm.h	2005/05/17 21:50:26
@@ -34,14 +34,30 @@
 
     bool IsOk() { return m_input->IsOk(); }
 
+#if wxHAS_INT64
     wxUint64 Read64();
+#endif
+#if wxUSE_LONGLONG
+    wxLongLong ReadLL();
+#endif
     wxUint32 Read32();
     wxUint16 Read16();
     wxUint8 Read8();
     double ReadDouble();
     wxString ReadString();
 
+#if wxHAS_INT64
     void Read64(wxUint64 *buffer, size_t size);
+    void Read64(wxInt64 *buffer, size_t size);
+#endif
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+    void Read64(wxULongLong *buffer, size_t size);
+    void Read64(wxLongLong *buffer, size_t size);
+#endif
+#if wxUSE_LONGLONG
+    void ReadLL(wxULongLong *buffer, size_t size);
+    void ReadLL(wxLongLong *buffer, size_t size);
+#endif
     void Read32(wxUint32 *buffer, size_t size);
     void Read16(wxUint16 *buffer, size_t size);
     void Read8(wxUint8 *buffer, size_t size);
@@ -54,7 +70,14 @@
     wxDataInputStream& operator>>(wxUint8& c);
     wxDataInputStream& operator>>(wxUint16& i);
     wxDataInputStream& operator>>(wxUint32& i);
+#if wxHAS_INT64
     wxDataInputStream& operator>>(wxUint64& i);
+    wxDataInputStream& operator>>(wxInt64& i);
+#endif
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+    wxDataInputStream& operator>>(wxULongLong& i);
+    wxDataInputStream& operator>>(wxLongLong& i);
+#endif
     wxDataInputStream& operator>>(double& i);
     wxDataInputStream& operator>>(float& f);
 
@@ -82,14 +105,32 @@
 
     bool IsOk() { return m_output->IsOk(); }
 
+#if wxHAS_INT64
     void Write64(wxUint64 i);
+    void Write64(wxInt64 i);
+#endif
+#if wxUSE_LONGLONG
+    void WriteLL(const wxLongLong &ll);
+    void WriteLL(const wxULongLong &ll);
+#endif
     void Write32(wxUint32 i);
     void Write16(wxUint16 i);
     void Write8(wxUint8 i);
     void WriteDouble(double d);
     void WriteString(const wxString& string);
 
+#if wxHAS_INT64
     void Write64(const wxUint64 *buffer, size_t size);
+    void Write64(const wxInt64 *buffer, size_t size);
+#endif
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+    void Write64(const wxULongLong *buffer, size_t size);
+    void Write64(const wxLongLong *buffer, size_t size);
+#endif
+#if wxUSE_LONGLONG
+    void WriteLL(const wxULongLong *buffer, size_t size);
+    void WriteLL(const wxLongLong *buffer, size_t size);
+#endif
     void Write32(const wxUint32 *buffer, size_t size);
     void Write16(const wxUint16 *buffer, size_t size);
     void Write8(const wxUint8 *buffer, size_t size);
@@ -103,7 +144,14 @@
     wxDataOutputStream& operator<<(wxUint8 c);
     wxDataOutputStream& operator<<(wxUint16 i);
     wxDataOutputStream& operator<<(wxUint32 i);
+#if wxHAS_INT64
     wxDataOutputStream& operator<<(wxUint64 i);
+    wxDataOutputStream& operator<<(wxInt64 i);
+#endif
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+    wxDataOutputStream& operator<<(const wxULongLong &i);
+    wxDataOutputStream& operator<<(const wxLongLong &i);
+#endif
     wxDataOutputStream& operator<<(double f);
     wxDataOutputStream& operator<<(float f);
 
Index: include/wx/defs.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/defs.h,v
retrieving revision 1.498
diff -u -r1.498 defs.h
--- include/wx/defs.h	2005/05/09 16:03:13	1.498
+++ include/wx/defs.h	2005/05/17 22:29:43
@@ -929,6 +932,23 @@
 
     typedef wxLongLong_t wxInt64;
     typedef wxULongLong_t wxUint64;
+
+    #define wxHAS_INT64 1
+
+#elif wxUSE_LONGLONG
+    /*  these macros allow to definea 64 bit constants in a portable way */
+    #define wxLL(x) wxLongLong(x)
+    #define wxULL(x) wxULongLong(x)
+
+    #define wxInt64 wxLongLong
+    #define wxUint64 wxULongLong
+
+    #define wxHAS_INT64 1
+
+#else
+
+    #define wxHAS_INT64 0
+
 #endif
 
 
@@ -1088,7 +1108,7 @@
         (((wxUint64) (val) & (wxUint64) wxULL(0x0000ff0000000000)) >> 24) | \
         (((wxUint64) (val) & (wxUint64) wxULL(0x00ff000000000000)) >> 40) | \
         (((wxUint64) (val) & (wxUint64) wxULL(0xff00000000000000)) >> 56)))
-#else /*  !wxLongLong_t */
+#elif wxUSE_LONGLONG /*  !wxLongLong_t */
     #define wxUINT64_SWAP_ALWAYS(val) \
        ((wxUint64) ( \
         ((wxULongLong(val) & wxULongLong(0L, 0x000000ffU)) << 56) | \
@@ -1121,8 +1141,10 @@
     #define wxINT32_SWAP_ON_BE(val)   wxINT32_SWAP_ALWAYS(val)
     #define wxUINT32_SWAP_ON_LE(val)  (val)
     #define wxINT32_SWAP_ON_LE(val)   (val)
-    #define wxUINT64_SWAP_ON_BE(val)  wxUINT64_SWAP_ALWAYS(val)
-    #define wxUINT64_SWAP_ON_LE(val)  (val)
+    #if wxHAS_INT64
+        #define wxUINT64_SWAP_ON_BE(val)  wxUINT64_SWAP_ALWAYS(val)
+        #define wxUINT64_SWAP_ON_LE(val)  (val)
+    #endif
 #else
     #define wxUINT16_SWAP_ON_LE(val)  wxUINT16_SWAP_ALWAYS(val)
     #define wxINT16_SWAP_ON_LE(val)   wxINT16_SWAP_ALWAYS(val)
@@ -1132,8 +1154,10 @@
     #define wxINT32_SWAP_ON_LE(val)   wxINT32_SWAP_ALWAYS(val)
     #define wxUINT32_SWAP_ON_BE(val)  (val)
     #define wxINT32_SWAP_ON_BE(val)   (val)
-    #define wxUINT64_SWAP_ON_LE(val)  wxUINT64_SWAP_ALWAYS(val)
-    #define wxUINT64_SWAP_ON_BE(val)  (val)
+    #if wxHAS_INT64
+        #define wxUINT64_SWAP_ON_LE(val)  wxUINT64_SWAP_ALWAYS(val)
+        #define wxUINT64_SWAP_ON_BE(val)  (val)
+    #endif
 #endif
 
 /*  ---------------------------------------------------------------------------- */
Index: include/wx/longlong.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/longlong.h,v
retrieving revision 1.61
diff -u -r1.61 longlong.h
--- include/wx/longlong.h	2005/04/08 14:33:56	1.61
+++ include/wx/longlong.h	2005/05/17 22:35:06
@@ -18,6 +18,9 @@
 #endif
 
 #include "wx/defs.h"
+
+#if wxUSE_LONGLONG
+
 #include "wx/string.h"
 
 #include <limits.h>     // for LONG_MAX
@@ -43,7 +46,12 @@
     // unknown pragma should never be an error -- except that, actually, some
     // broken compilers don't like it, so we have to disable it in this case
     // <sigh>
-    #if !(defined(__WATCOMC__) || defined(__VISAGECPP__))
+    #ifdef __GNUC__
+        #warning "Your compiler does not appear to support 64 bit "\
+                 "integers, using emulation class instead.\n" \
+                 "Please report your compiler version to " \
+                 "wx-dev@lists.wxwidgets.org!"
+    #elif !(defined(__WATCOMC__) || defined(__VISAGECPP__))
         #pragma warning "Your compiler does not appear to support 64 bit "\
                         "integers, using emulation class instead.\n" \
                         "Please report your compiler version to " \
@@ -127,8 +135,16 @@
         // from native 64 bit integer
     wxLongLongNative& operator=(wxLongLong_t ll)
         { m_ll = ll; return *this; }
+    wxLongLongNative& operator=(wxULongLong_t ll)
+        { m_ll = ll; return *this; }
+    wxLongLongNative& operator=(const wxULongLongNative &ll);
+    wxLongLongNative& operator=(long l)
+        { m_ll = l; return *this; }
+    wxLongLongNative& operator=(unsigned long l)
+        { m_ll = l; return *this; }
 #if wxUSE_LONGLONG_WX
     wxLongLongNative& operator=(wxLongLongWx ll);
+    wxLongLongNative& operator=(const class wxULongLongWx &ll);
 #endif
 
 
@@ -308,6 +324,13 @@
     friend WXDLLIMPEXP_BASE
     wxString& operator<<(wxString&, const wxLongLongNative&);
 
+#if wxUSE_STREAMS
+    friend WXDLLIMPEXP_BASE
+    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxLongLongNative&);
+    friend WXDLLIMPEXP_BASE
+    class wxTextInputStream& operator>>(class wxTextInputStream&, wxLongLongNative&);
+#endif
+
 private:
     wxLongLong_t  m_ll;
 };
@@ -329,6 +352,10 @@
         m_ll |= (wxULongLong_t) lo;
     }
 
+#if wxUSE_LONGLONG_WX
+    wxULongLongNative(const class wxULongLongWx &ll);
+#endif
+
     // default copy ctor is ok
 
     // no dtor
@@ -337,6 +364,18 @@
         // from native 64 bit integer
     wxULongLongNative& operator=(wxULongLong_t ll)
         { m_ll = ll; return *this; }
+    wxULongLongNative& operator=(wxLongLong_t ll)
+        { m_ll = ll; return *this; }
+    wxULongLongNative& operator=(long l)
+        { m_ll = l; return *this; }
+    wxULongLongNative& operator=(unsigned long l)
+        { m_ll = l; return *this; }
+    wxULongLongNative& operator=(const wxLongLongNative &ll)
+        { m_ll = ll.GetValue(); return *this; }
+#if wxUSE_LONGLONG_WX
+    wxULongLongNative& operator=(wxLongLongWx ll);
+    wxULongLongNative& operator=(const class wxULongLongWx &ll);
+#endif
 
     // assignment operators from wxULongLongNative is ok
 
@@ -495,10 +534,24 @@
     friend WXDLLIMPEXP_BASE
     wxString& operator<<(wxString&, const wxULongLongNative&);
 
+#if wxUSE_STREAMS
+    friend WXDLLIMPEXP_BASE
+    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxULongLongNative&);
+    friend WXDLLIMPEXP_BASE
+    class wxTextInputStream& operator>>(class wxTextInputStream&, wxULongLongNative&);
+#endif
+
 private:
     wxULongLong_t  m_ll;
 };
 
+inline
+wxLongLongNative& wxLongLongNative::operator=(const wxULongLongNative &ll)
+{
+    m_ll = ll.GetValue();
+    return *this;
+}
+
 #endif // wxUSE_LONGLONG_NATIVE
 
 #if wxUSE_LONGLONG_WX
@@ -554,7 +607,22 @@
 
         return *this;
     }
-        // from double
+    wxLongLongWx& operator=(unsigned long l)
+    {
+        m_lo = l;
+        m_hi = 0;
+
+#ifdef wxLONGLONG_TEST_MODE
+        m_ll = l;
+
+        Check();
+#endif // wxLONGLONG_TEST_MODE
+
+        return *this;
+    }
+    wxLongLongWx& operator=(const class wxULongLongWx &ll);
+
+    // from double
     wxLongLongWx& Assign(double d);
         // can't have assignment operator from 2 longs
 
@@ -691,6 +759,13 @@
     friend WXDLLIMPEXP_BASE
     wxString& operator<<(wxString&, const wxLongLongWx&);
 
+#if wxUSE_STREAMS
+    friend WXDLLIMPEXP_BASE
+    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxLongLongWx&);
+    friend WXDLLIMPEXP_BASE
+    class wxTextInputStream& operator>>(class wxTextInputStream&, wxLongLongWx&);
+#endif
+
 private:
     // long is at least 32 bits, so represent our 64bit number as 2 longs
 
@@ -767,6 +842,26 @@
 
         return *this;
     }
+    wxULongLongWx& operator=(long l)
+    {
+        m_lo = l;
+        m_hi = (unsigned long) ((l<0) ? -1l : 0);
+
+#ifdef wxLONGLONG_TEST_MODE
+        m_ll = (wxULongLong_t) (wxLongLong_t) l;
+
+        Check();
+#endif // wxLONGLONG_TEST_MODE
+
+        return *this;
+    }
+    wxULongLongWx& operator=(const class wxLongLongWx &ll) {
+        // Should we use an assert like it was before in the constructor?
+        // wxASSERT(ll.GetHi() >= 0);
+        m_hi = (unsigned long)ll.GetHi();
+        m_lo = ll.GetLo();
+        return *this;
+    }
 
     // can't have assignment operator from 2 longs
 
@@ -877,6 +972,13 @@
     friend WXDLLIMPEXP_BASE
     wxString& operator<<(wxString&, const wxULongLongWx&);
 
+#if wxUSE_STREAMS
+    friend WXDLLIMPEXP_BASE
+    class wxTextOutputStream& operator<<(class wxTextOutputStream&, const wxULongLongWx&);
+    friend WXDLLIMPEXP_BASE
+    class wxTextInputStream& operator>>(class wxTextInputStream&, wxULongLongWx&);
+#endif
+
 private:
     // long is at least 32 bits, so represent our 64bit number as 2 longs
 
@@ -926,5 +1028,17 @@
     wxULongLong ret = wxULongLong(l) - ull;
     return wxLongLong((long)ret.GetHi(),ret.GetLo());
 }
+
+#if wxUSE_LONGLONG_NATIVE && wxUSE_STREAMS
+
+WXDLLIMPEXP_BASE class wxTextOutputStream &operator<<(class wxTextOutputStream &stream, wxULongLong_t value);
+WXDLLIMPEXP_BASE class wxTextOutputStream &operator<<(class wxTextOutputStream &stream, wxLongLong_t value);
+
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &stream, wxULongLong_t &value);
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &stream, wxLongLong_t &value);
+
+#endif
+
+#endif // wxUSE_LONGLONG
 
 #endif // _WX_LONGLONG_H
Index: include/wx/utils.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/utils.h,v
retrieving revision 1.115
diff -u -r1.115 utils.h
--- include/wx/utils.h	2005/04/21 20:13:37	1.115
+++ include/wx/utils.h	2005/05/17 16:31:55
@@ -379,10 +379,16 @@
 WXDLLIMPEXP_BASE wxChar* wxGetUserHome(const wxString& user = wxEmptyString);
 #endif
 
+#if !wxUSE_LONGLONG
+#define wxDiskspaceSize_t long
+#else
+#define wxDiskspaceSize_t wxLongLong
+#endif
+
 // get number of total/free bytes on the disk where path belongs
 WXDLLIMPEXP_BASE bool wxGetDiskSpace(const wxString& path,
-                                wxLongLong *pTotal = NULL,
-                                wxLongLong *pFree = NULL);
+                                wxDiskspaceSize_t *pTotal = NULL,
+                                wxDiskspaceSize_t *pFree = NULL);
 
 #if wxUSE_GUI // GUI only things from now on
 
Index: include/wx/html/htmlwin.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/html/htmlwin.h,v
retrieving revision 1.65
diff -u -r1.65 htmlwin.h
--- include/wx/html/htmlwin.h	2005/02/17 23:55:53	1.65
+++ include/wx/html/htmlwin.h	2005/05/17 17:03:28
@@ -28,6 +28,10 @@
 #include "wx/filename.h"
 #include "wx/bitmap.h"
 
+#if !wxUSE_LONGLONG
+#include <time.h>
+#endif
+
 class wxHtmlProcessor;
 class wxHtmlWinModule;
 class wxHtmlHistoryArray;
@@ -315,7 +319,14 @@
 #if wxUSE_CLIPBOARD
     // time of the last doubleclick event, used to detect tripleclicks
     // (tripleclicks are used to select whole line):
+#if wxUSE_LONGLONG
     wxLongLong m_lastDoubleClick;
+#else
+    static double wxGetLocalTimeMillis(void) {
+        return (double(clock()) / double(CLOCKS_PER_SEC)) * 1000.0;
+    }
+    double m_lastDoubleClick;
+#endif
 
     // helper class to automatically scroll the window if the user is selecting
     // text and the mouse leaves wxHtmlWindow:
Index: include/wx/xrc/xmlres.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/include/wx/xrc/xmlres.h,v
retrieving revision 1.42
diff -u -r1.42 xmlres.h
--- include/wx/xrc/xmlres.h	2005/04/08 14:34:00	1.42
+++ include/wx/xrc/xmlres.h	2005/05/17 17:09:04
@@ -72,12 +72,18 @@
 class WXDLLIMPEXP_XRC wxXmlResourceDataRecord
 {
 public:
-    wxXmlResourceDataRecord() : Doc(NULL), Time(wxDateTime::Now()) {}
+    wxXmlResourceDataRecord() : Doc(NULL) {
+#if wxUSE_DATETIME
+        Time = wxDateTime::Now();
+#endif
+    }
     ~wxXmlResourceDataRecord() {delete Doc;}
 
     wxString File;
     wxXmlDocument *Doc;
+#if wxUSE_DATETIME
     wxDateTime Time;
+#endif
 };
 
 
Index: src/common/datstrm.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/datstrm.cpp,v
retrieving revision 1.46
diff -u -r1.46 datstrm.cpp
--- src/common/datstrm.cpp	2005/02/17 10:19:31	1.46
+++ src/common/datstrm.cpp	2005/05/17 21:51:10
@@ -38,17 +38,14 @@
 {
 }
 
+#if wxHAS_INT64
 wxUint64 wxDataInputStream::Read64()
 {
-  wxUint64 i64;
-
-  m_input->Read(&i64, 8);
-
-  if (m_be_order)
-    return wxUINT64_SWAP_ON_LE(i64);
-  else
-    return wxUINT64_SWAP_ON_BE(i64);
+  wxUint64 tmp;
+  Read64(&tmp, 1);
+  return tmp;
 }
+#endif
 
 wxUint32 wxDataInputStream::Read32()
 {
@@ -120,15 +117,83 @@
     return wxEmptyString;
 }
 
-void wxDataInputStream::Read64(wxUint64 *buffer, size_t size)
-{
-  m_input->Read(buffer, size * 8);
+#if wxUSE_LONGLONG
 
-  if (m_be_order)
+template <class T>
+static
+void DoReadLL(T *buffer, size_t size, wxInputStream *input, bool be_order)
+{
+  typedef T DataType;
+  unsigned char *pchBuffer = new unsigned char[size * 8];
+  // TODO: Check for overflow when size is of type uint and is > than 512m
+  input->Read(pchBuffer, size * 8);
+  size_t idx_base = 0;
+  if (be_order) {
+    for (size_t uiIndex=0; uiIndex!=size; ++uiIndex) {
+      buffer[uiIndex] = 0l;
+      for (unsigned ui=0; ui!=8; ++ui)
+        buffer[uiIndex] = buffer[uiIndex] * 256l + DataType((unsigned long) pchBuffer[idx_base + ui]);
+      idx_base += 8;
+    }
+  } else {
+    for (size_t uiIndex=0; uiIndex!=size; ++uiIndex) {
+      buffer[uiIndex] = 0l;
+      for (unsigned ui=0; ui!=8; ++ui)
+        buffer[uiIndex] = buffer[uiIndex] * 256l + DataType((unsigned long) pchBuffer[idx_base + 7 - ui]);
+      idx_base += 8;
+    }
+  }
+  delete[] pchBuffer;
+}
+
+template <class T>
+static
+void DoWriteLL(const T *buffer, size_t size, wxOutputStream *output, bool be_order)
+{
+  typedef T DataType;
+  unsigned char *pchBuffer = new unsigned char[size * 8];
+  size_t idx_base = 0;
+  if (be_order) {
+    for (size_t uiIndex=0; uiIndex!=size; ++uiIndex) {
+      DataType i64 = buffer[uiIndex];
+      for (unsigned ui=0; ui!=8; ++ui) {
+        pchBuffer[idx_base + 7 - ui] = (unsigned char) (i64.GetLo() & 255l);
+        i64 >>= 8l;
+      }
+      idx_base += 8;
+    }
+  } else {
+    for (size_t uiIndex=0; uiIndex!=size; ++uiIndex) {
+      DataType i64 = buffer[uiIndex];
+      for (unsigned ui=0; ui!=8; ++ui) {
+        pchBuffer[idx_base + ui] = (unsigned char) (i64.GetLo() & 255l);
+        i64 >>= 8l;
+      }
+      idx_base += 8;
+    }
+  }
+  // TODO: Check for overflow when size is of type uint and is > than 512m
+  output->Write(pchBuffer, size * 8);
+  delete[] pchBuffer;
+}
+
+#endif // wxUSE_LONGLONG
+
+#ifdef wxLongLong_t
+
+template <class T>
+static
+void DoReadI64(T *buffer, size_t size, wxInputStream *input, bool be_order)
+{
+  typedef T DataType;
+  unsigned char *pchBuffer = (unsigned char*) buffer;
+  // TODO: Check for overflow when size is of type uint and is > than 512m
+  input->Read(pchBuffer, size * 8);
+  if (be_order)
   {
     for (wxUint32 i=0; i<size; i++)
     {
-      wxUint64 v = wxUINT64_SWAP_ON_LE(*buffer);
+      DataType v = wxUINT64_SWAP_ON_LE(*buffer);
       *(buffer++) = v;
     }
   }
@@ -136,12 +201,91 @@
   {
     for (wxUint32 i=0; i<size; i++)
     {
-      wxUint64 v = wxUINT64_SWAP_ON_BE(*buffer);
+      DataType v = wxUINT64_SWAP_ON_BE(*buffer);
       *(buffer++) = v;
     }
   }
 }
 
+template <class T>
+static
+void DoWriteI64(const T *buffer, size_t size, wxOutputStream *output, bool be_order)
+{
+  typedef T DataType;
+  if (be_order)
+  {
+    for (size_t i=0; i<size ;i++)
+    {
+      DataType i64 = wxUINT64_SWAP_ON_LE(*buffer);
+      buffer++;
+      output->Write(&i64, 8);
+    }
+  }
+  else
+  {
+    for (size_t i=0; i<size ;i++)
+    {
+      DataType i64 = wxUINT64_SWAP_ON_BE(*buffer);
+      buffer++;
+      output->Write(&i64, 8);
+    }
+  }
+}
+
+#endif // wxLongLong_t
+
+
+#if wxHAS_INT64
+void wxDataInputStream::Read64(wxUint64 *buffer, size_t size)
+{
+#ifndef wxLongLong_t
+    DoReadLL<wxULongLong>(buffer, size, m_input, m_be_order);
+#else
+    DoReadI64<wxUint64>(buffer, size, m_input, m_be_order);
+#endif
+}
+
+void wxDataInputStream::Read64(wxInt64 *buffer, size_t size)
+{
+#ifndef wxLongLong_t
+    DoReadLL<wxLongLong>(buffer, size, m_input, m_be_order);
+#else
+    DoReadI64<wxInt64>(buffer, size, m_input, m_be_order);
+#endif
+}
+#endif
+
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+void wxDataInputStream::Read64(wxULongLong *buffer, size_t size)
+{
+    DoReadLL<wxULongLong>(buffer, size, m_input, m_be_order);
+}
+
+void wxDataInputStream::Read64(wxLongLong *buffer, size_t size)
+{
+    DoReadLL<wxLongLong>(buffer, size, m_input, m_be_order);
+}
+#endif
+
+#if wxUSE_LONGLONG
+void wxDataInputStream::ReadLL(wxULongLong *buffer, size_t size)
+{
+    DoReadLL<wxULongLong>(buffer, size, m_input, m_be_order);
+}
+
+void wxDataInputStream::ReadLL(wxLongLong *buffer, size_t size)
+{
+    DoReadLL<wxLongLong>(buffer, size, m_input, m_be_order);
+}
+
+wxLongLong wxDataInputStream::ReadLL(void)
+{
+    wxLongLong ll;
+    DoReadLL<wxLongLong>(&ll, 1, m_input, m_be_order);
+    return ll;
+}
+#endif
+
 void wxDataInputStream::Read32(wxUint32 *buffer, size_t size)
 {
   m_input->Read(buffer, size * 4);
@@ -241,12 +385,34 @@
   return *this;
 }
 
+#if wxHAS_INT64
 wxDataInputStream& wxDataInputStream::operator>>(wxUint64& i)
 {
   i = Read64();
   return *this;
 }
 
+wxDataInputStream& wxDataInputStream::operator>>(wxInt64& i)
+{
+  i = Read64();
+  return *this;
+}
+#endif
+
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+wxDataInputStream& wxDataInputStream::operator>>(wxULongLong& i)
+{
+  i = ReadLL();
+  return *this;
+}
+
+wxDataInputStream& wxDataInputStream::operator>>(wxLongLong& i)
+{
+  i = ReadLL();
+  return *this;
+}
+#endif
+
 wxDataInputStream& wxDataInputStream::operator>>(double& i)
 {
   i = ReadDouble();
@@ -273,16 +439,17 @@
 {
 }
 
+#if wxHAS_INT64
 void wxDataOutputStream::Write64(wxUint64 i)
 {
-  wxUint64 i64;
+  Write64(&i, 1);
+}
 
-  if (m_be_order)
-    i64 = wxUINT64_SWAP_ON_LE(i);
-  else
-    i64 = wxUINT64_SWAP_ON_BE(i);
-  m_output->Write(&i64, 8);
+void wxDataOutputStream::Write64(wxInt64 i)
+{
+  Write64(&i, 1);
 }
+#endif
 
 void wxDataOutputStream::Write32(wxUint32 i)
 {
@@ -343,28 +510,60 @@
   m_output->Write(buf, 10);
 }
 
+#if wxHAS_INT64
 void wxDataOutputStream::Write64(const wxUint64 *buffer, size_t size)
 {
-  if (m_be_order)
-  {
-    for (wxUint32 i=0; i<size ;i++)
-    {
-      wxUint64 i64 = wxUINT64_SWAP_ON_LE(*buffer);
-      buffer++;
-      m_output->Write(&i64, 8);
-    }
-  }
-  else
-  {
-    for (wxUint32 i=0; i<size ;i++)
-    {
-      wxUint64 i64 = wxUINT64_SWAP_ON_BE(*buffer);
-      buffer++;
-      m_output->Write(&i64, 8);
-    }
-  }
+#ifndef wxLongLong_t
+    DoWriteLL<wxULongLong>(buffer, size, m_output, m_be_order);
+#else
+    DoWriteI64<wxUint64>(buffer, size, m_output, m_be_order);
+#endif
+}
+
+void wxDataOutputStream::Write64(const wxInt64 *buffer, size_t size)
+{
+#ifndef wxLongLong_t
+    DoWriteLL<wxLongLong>(buffer, size, m_output, m_be_order);
+#else
+    DoWriteI64<wxInt64>(buffer, size, m_output, m_be_order);
+#endif
+}
+#endif
+
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+void wxDataOutputStream::Write64(const wxULongLong *buffer, size_t size)
+{
+    DoWriteLL<wxULongLong>(buffer, size, m_output, m_be_order);
 }
 
+void wxDataOutputStream::Write64(const wxLongLong *buffer, size_t size)
+{
+    DoWriteLL<wxLongLong>(buffer, size, m_output, m_be_order);
+}
+#endif
+
+#if wxUSE_LONGLONG
+void wxDataOutputStream::WriteLL(const wxULongLong *buffer, size_t size)
+{
+    DoWriteLL<wxULongLong>(buffer, size, m_output, m_be_order);
+}
+
+void wxDataOutputStream::WriteLL(const wxLongLong *buffer, size_t size)
+{
+    DoWriteLL<wxLongLong>(buffer, size, m_output, m_be_order);
+}
+
+void wxDataOutputStream::WriteLL(const wxLongLong &ll)
+{
+    DoWriteLL<wxLongLong>(&ll, 1, m_output, m_be_order);
+}
+
+void wxDataOutputStream::WriteLL(const wxULongLong &ll)
+{
+    DoWriteLL<wxULongLong>(&ll, 1, m_output, m_be_order);
+}
+#endif
+
 void wxDataOutputStream::Write32(const wxUint32 *buffer, size_t size)
 {
   if (m_be_order)
@@ -471,11 +670,33 @@
   return *this;
 }
 
+#if wxHAS_INT64
 wxDataOutputStream& wxDataOutputStream::operator<<(wxUint64 i)
 {
   Write64(i);
   return *this;
 }
+
+wxDataOutputStream& wxDataOutputStream::operator<<(wxInt64 i)
+{
+  Write64(i);
+  return *this;
+}
+#endif
+
+#if defined(wxLongLong_t) && wxUSE_LONGLONG
+wxDataOutputStream& wxDataOutputStream::operator<<(const wxULongLong &i)
+{
+  WriteLL(i);
+  return *this;
+}
+
+wxDataOutputStream& wxDataOutputStream::operator<<(const wxLongLong &i)
+{
+  WriteLL(i);
+  return *this;
+}
+#endif
 
 wxDataOutputStream& wxDataOutputStream::operator<<(double f)
 {
Index: src/common/debugrpt.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/debugrpt.cpp,v
retrieving revision 1.18
diff -u -r1.18 debugrpt.cpp
--- src/common/debugrpt.cpp	2005/04/23 12:54:24	1.18
+++ src/common/debugrpt.cpp	2005/05/17 17:07:44
@@ -190,10 +190,16 @@
     // of course, this doesn't protect us against malicious users...
     wxFileName fn;
     fn.AssignTempFileName(appname);
+#if wxUSE_DATETIME
     m_dir.Printf(_T("%s%c%s_dbgrpt-%lu-%s"),
                  fn.GetPath().c_str(), wxFILE_SEP_PATH, appname.c_str(),
                  wxGetProcessId(),
                  wxDateTime::Now().Format(_T("%Y%m%dT%H%M%S")).c_str());
+#else
+    m_dir.Printf(_T("%s%c%s_dbgrpt-%lu"),
+                 fn.GetPath().c_str(), wxFILE_SEP_PATH, appname.c_str(),
+                 wxGetProcessId());
+#endif
 
     // as we are going to save the process state there use restrictive
     // permissions
Index: src/common/longlong.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/longlong.cpp,v
retrieving revision 1.39
diff -u -r1.39 longlong.cpp
--- src/common/longlong.cpp	2005/05/04 18:38:08	1.39
+++ src/common/longlong.cpp	2005/05/17 22:35:11
@@ -29,6 +29,10 @@
 #include "wx/longlong.h"
 #include "wx/math.h"       // for fabs()
 
+#if wxUSE_STREAMS
+#include "wx/txtstrm.h"
+#endif
+
 #if defined(__MWERKS__) && defined(__WXMSW__)
 #include <string.h>     // for memset()
 #else
@@ -96,6 +100,41 @@
     m_ll |= ll.GetLo();
     return *this;
 }
+
+wxLongLongNative& wxLongLongNative::operator=(const class wxULongLongWx &ll)
+{
+    // assign first to avoid precision loss!
+    m_ll = ll.GetHi();
+    m_ll <<= 32;
+    m_ll |= ll.GetLo();
+    return *this;
+}
+
+wxULongLongNative::wxULongLongNative(const class wxULongLongWx &ll)
+{
+    // assign first to avoid precision loss!
+    m_ll = ll.GetHi();
+    m_ll <<= 32;
+    m_ll |= ((unsigned long) ll.GetLo());
+}
+
+wxULongLongNative& wxULongLongNative::operator=(wxLongLongWx ll)
+{
+    // assign first to avoid precision loss!
+    m_ll = ll.GetHi();
+    m_ll <<= 32;
+    m_ll |= ((unsigned long) ll.GetLo());
+    return *this;
+}
+
+wxULongLongNative& wxULongLongNative::operator=(const class wxULongLongWx &ll)
+{
+    // assign first to avoid precision loss!
+    m_ll = ll.GetHi();
+    m_ll <<= 32;
+    m_ll |= ((unsigned long) ll.GetLo());
+    return *this;
+}
 #endif
 
 #endif // wxUSE_LONGLONG_NATIVE
@@ -106,6 +145,14 @@
 
 #if wxUSE_LONGLONG_WX
 
+// Set value from unsigned wxULongLongWx
+wxLongLongWx &wxLongLongWx::operator=(const class wxULongLongWx &ll)
+{
+    m_hi = (unsigned long) ll.GetHi();
+    m_lo = ll.GetLo();
+    return *this;
+}
+
 // assignment
 wxLongLongWx& wxLongLongWx::Assign(double d)
 {
@@ -779,9 +826,11 @@
 
 // division
 
+#define IS_MSB_SET(ll)  ((ll.GetHi()) & (1 << (8*sizeof(long) - 1)))
+
 void wxLongLongWx::Divide(const wxLongLongWx& divisorIn,
                           wxLongLongWx& quotient,
-                          wxLongLongWx& remainder) const
+                          wxLongLongWx& remainderIO) const
 {
     if ((divisorIn.m_lo == 0) && (divisorIn.m_hi == 0))
     {
@@ -805,8 +854,7 @@
     //     all responsibility for using this code.
 
     // init everything
-    wxLongLongWx dividend = *this,
-                 divisor = divisorIn;
+    wxULongLongWx dividend, divisor, remainder;
 
     quotient = 0l;
     remainder = 0l;
@@ -819,17 +867,21 @@
     //      dividend = quotient*divisor + remainder
     //
     // with 0 <= abs(remainder) < abs(divisor)
-    bool negRemainder = dividend.m_hi < 0;
+    bool negRemainder = GetHi() < 0;
     bool negQuotient = false;   // assume positive
-    if ( dividend.m_hi < 0 )
+    if ( GetHi() < 0 )
     {
         negQuotient = !negQuotient;
-        dividend = -dividend;
+        dividend = -*this;
+    } else {
+        dividend = *this;
     }
-    if ( divisor.m_hi < 0 )
+    if ( divisorIn.GetHi() < 0 )
     {
         negQuotient = !negQuotient;
-        divisor = -divisor;
+        divisor = -divisorIn;
+    } else {
+        divisor = divisorIn;
     }
 
     // check for some particular cases
@@ -847,8 +899,6 @@
         size_t nBits = 64u;
         wxLongLongWx d;
 
-        #define IS_MSB_SET(ll)  ((ll.m_hi) & (1 << (8*sizeof(long) - 1)))
-
         while ( remainder < divisor )
         {
             remainder <<= 1;
@@ -888,10 +938,12 @@
         }
     }
 
+    remainderIO = remainder;
+
     // adjust signs
     if ( negRemainder )
     {
-        remainder = -remainder;
+        remainderIO = -remainderIO;
     }
 
     if ( negQuotient )
@@ -947,8 +999,6 @@
         size_t nBits = 64u;
         wxULongLongWx d;
 
-        #define IS_MSB_SET(ll)  ((ll.m_hi) & (1 << (8*sizeof(long) - 1)))
-
         while ( remainder < divisor )
         {
             remainder <<= 1;
@@ -1178,5 +1228,114 @@
 {
     return s << ll.ToString();
 }
+
+#if wxUSE_STREAMS
+
+WXDLLIMPEXP_BASE wxTextOutputStream& operator<< (wxTextOutputStream& o, const wxULongLong& ll)
+{
+    return o << ll.ToString();
+}
+
+WXDLLIMPEXP_BASE wxTextOutputStream& operator<< (wxTextOutputStream& o, const wxLongLong& ll)
+{
+    return o << ll.ToString();
+}
+
+#define READ_STRING_CHAR(s, idx, len) ((wxChar) ((idx!=len) ? s[idx++] : 0))
+
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &o, wxULongLong &ll)
+{
+    wxString s = o.ReadWord();
+
+    ll = wxULongLong(0l, 0l);
+    size_t length = s.Length();
+    size_t idx = 0;
+
+    wxChar ch = READ_STRING_CHAR(s, idx, length);
+
+    // Skip WS
+    while (ch==wxT(' ') || ch==wxT('\t'))
+        ch = READ_STRING_CHAR(s, idx, length);
+
+    // Read number
+    wxULongLong multiplier(0l, 10l);
+    while (ch>=wxT('0') && ch<=wxT('9')) {
+        long lValue = (unsigned) (ch - wxT('0'));
+        ll = ll * multiplier + wxULongLong(0l, lValue);
+        ch = READ_STRING_CHAR(s, idx, length);
+    }
+
+    return o;
+}
+
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &o, wxLongLong &ll)
+{
+    wxString s = o.ReadWord();
+
+    ll = wxLongLong(0l, 0l);
+    size_t length = s.Length();
+    size_t idx = 0;
+
+    wxChar ch = READ_STRING_CHAR(s, idx, length);
+
+    // Skip WS
+    while (ch==wxT(' ') || ch==wxT('\t'))
+        ch = READ_STRING_CHAR(s, idx, length);
+
+    // Ask for sign
+    int iSign = 1;
+    if (ch==wxT('-') || ch==wxT('+')) {
+        iSign = ((ch==wxT('-')) ? -1 : 1);
+        ch = READ_STRING_CHAR(s, idx, length);
+    }
+
+    // Read number
+    wxLongLong multiplier(0l, 10l);
+    while (ch>=wxT('0') && ch<=wxT('9')) {
+        long lValue = (unsigned) (ch - wxT('0'));
+        ll = ll * multiplier + wxLongLong(0l, lValue);
+        ch = READ_STRING_CHAR(s, idx, length);
+    }
+
+#if wxUSE_LONGLONG_NATIVE
+    ll = ll * wxLongLong((wxLongLong_t) iSign);
+#else
+    ll = ll * wxLongLong((long) iSign);
+#endif
+
+    return o;
+}
+
+#if wxUSE_LONGLONG_NATIVE
+
+WXDLLIMPEXP_BASE class wxTextOutputStream &operator<<(class wxTextOutputStream &o, wxULongLong_t value)
+{
+    return o << wxULongLong(value).ToString();
+}
+
+WXDLLIMPEXP_BASE class wxTextOutputStream &operator<<(class wxTextOutputStream &o, wxLongLong_t value)
+{
+    return o << wxLongLong(value).ToString();
+}
+
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &o, wxULongLong_t &value)
+{
+    wxULongLong ll;
+    o >> ll;
+    value = ll.GetValue();
+    return o;
+}
+
+WXDLLIMPEXP_BASE class wxTextInputStream &operator>>(class wxTextInputStream &o, wxLongLong_t &value)
+{
+    wxLongLong ll;
+    o >> ll;
+    value = ll.GetValue();
+    return o;
+}
+
+#endif
+
+#endif // wxUSE_STREAMS
 
 #endif // wxUSE_LONGLONG
Index: src/common/variant.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/common/variant.cpp,v
retrieving revision 1.67
diff -u -r1.67 variant.cpp
--- src/common/variant.cpp	2005/04/12 20:57:09	1.67
+++ src/common/variant.cpp	2005/05/17 16:07:30
@@ -1287,7 +1287,7 @@
 }
 #endif // wxUSE_DATETIME
 
-#if wxUSE_ODBC
+#if wxUSE_ODBC && wxUSE_DATETIME
 wxVariant::wxVariant(const TIME_STRUCT* valptr, const wxString& name) // Date
 {
     m_data = new wxVariantDataDateTime(valptr);
@@ -1661,7 +1661,7 @@
 }
 #endif // wxUSE_DATETIME
 
-#if wxUSE_ODBC
+#if wxUSE_ODBC && wxUSE_DATETIME
 void wxVariant::operator= (const DATE_STRUCT* value)
 {
     if (m_data)
Index: src/generic/logg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/generic/logg.cpp,v
retrieving revision 1.90
diff -u -r1.90 logg.cpp
--- src/generic/logg.cpp	2005/03/14 20:00:42	1.90
+++ src/generic/logg.cpp	2005/05/17 16:12:28
@@ -913,7 +913,11 @@
     if ( !fmt )
     {
         // default format
+#if wxUSE_DATETIME
         fmt = wxDefaultDateTimeFormat;
+#else
+        fmt = wxT("%c");
+#endif
     }
 
     size_t count = m_messages.GetCount();
@@ -999,7 +1003,11 @@
     if ( !fmt )
     {
         // default format
+#if wxUSE_DATETIME
         fmt = wxDefaultDateTimeFormat;
+#else
+        fmt = wxT("%c");
+#endif
     }
 
     size_t count = m_messages.GetCount();
Index: src/html/htmlwin.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/html/htmlwin.cpp,v
retrieving revision 1.108
diff -u -r1.108 htmlwin.cpp
--- src/html/htmlwin.cpp	2005/05/04 21:07:06	1.108
+++ src/html/htmlwin.cpp	2005/05/17 14:05:07
@@ -177,7 +177,7 @@
     m_makingSelection = false;
 #if wxUSE_CLIPBOARD
     m_timerAutoScroll = NULL;
-    m_lastDoubleClick = 0;
+    m_lastDoubleClick = 0l;
 #endif // wxUSE_CLIPBOARD
     m_backBuffer = NULL;
     m_eraseBgInOnPaint = false;
Index: src/mac/carbon/utils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/mac/carbon/utils.cpp,v
retrieving revision 1.101
diff -u -r1.101 utils.cpp
--- src/mac/carbon/utils.cpp	2005/04/19 10:16:28	1.101
+++ src/mac/carbon/utils.cpp	2005/05/17 16:30:48
@@ -655,7 +655,7 @@
     return NULL;
 }
 
-bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+bool wxGetDiskSpace(const wxString& path, wxDiskspaceSize_t *pTotal, wxDiskspaceSize_t *pFree)
 {
     if ( path.empty() )
         return false;
@@ -687,9 +687,9 @@
             if ( noErr == err )
             {
                 if ( pTotal )
-                    *pTotal = wxLongLong( totalBytes ) ;
+                    *pTotal = wxDiskspaceSize_t( totalBytes ) ;
                 if ( pFree )
-                    *pFree = wxLongLong( freeBytes ) ;
+                    *pFree = wxDiskspaceSize_t( freeBytes ) ;
             }
         }
     }
Index: src/mac/classic/utils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/mac/classic/utils.cpp,v
retrieving revision 1.6
diff -u -r1.6 utils.cpp
--- src/mac/classic/utils.cpp	2005/01/20 16:09:18	1.6
+++ src/mac/classic/utils.cpp	2005/05/17 16:30:36
@@ -533,7 +533,7 @@
     return NULL;
 }
 
-bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+bool wxGetDiskSpace(const wxString& path, wxDiskspaceSize_t *pTotal, wxDiskspaceSize_t *pFree)
 {
     if ( path.empty() )
         return false;
@@ -557,10 +557,10 @@
     OSErr err = XGetVolumeInfoNoName( volumeName , 0 , &pb ) ;
     if ( err == noErr ) {
       if ( pTotal ) {
-        (*pTotal) = wxLongLong( pb.ioVTotalBytes ) ;
+        (*pTotal) = wxDiskspaceSize_t( pb.ioVTotalBytes ) ;
       }
       if ( pFree ) {
-        (*pFree) = wxLongLong( pb.ioVFreeBytes ) ;
+        (*pFree) = wxDiskspaceSize_t( pb.ioVFreeBytes ) ;
       }
     }
 
Index: src/msw/utils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/msw/utils.cpp,v
retrieving revision 1.173
diff -u -r1.173 utils.cpp
--- src/msw/utils.cpp	2005/05/13 12:15:04	1.173
+++ src/msw/utils.cpp	2005/05/17 16:29:50
@@ -466,7 +466,7 @@
     return (wxChar *)wxGetHomeDir(&s_home);
 }
 
-bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+bool wxGetDiskSpace(const wxString& path, wxDiskspaceSize_t *pTotal, wxDiskspaceSize_t *pFree)
 {
 #ifdef __WXWINCE__
     // TODO-CE
@@ -524,12 +524,20 @@
 #endif
         if ( pTotal )
         {
-            *pTotal = wxLongLong(UL(bytesTotal).HighPart, UL(bytesTotal).LowPart);
+#if wxUSE_LONGLONG
+            *pTotal = wxDiskspaceSize_t(UL(bytesTotal).HighPart, UL(bytesTotal).LowPart);
+#else
+            *pTotal = wxDiskspaceSize_t(UL(bytesTotal).LowPart);
+#endif
         }
 
         if ( pFree )
         {
+#if wxUSE_LONGLONG
             *pFree = wxLongLong(UL(bytesFree).HighPart, UL(bytesFree).LowPart);
+#else
+            *pFree = wxDiskspaceSize_t(UL(bytesFree).LowPart);
+#endif
         }
     }
     else
@@ -557,7 +565,7 @@
             return false;
         }
 
-        wxLongLong lBytesPerCluster = lSectorsPerCluster;
+        wxDiskspaceSize_t lBytesPerCluster = (wxDiskspaceSize_t) lSectorsPerCluster;
         lBytesPerCluster *= lBytesPerSector;
 
         if ( pTotal )
Index: src/palmos/utils.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/palmos/utils.cpp,v
retrieving revision 1.9
diff -u -r1.9 utils.cpp
--- src/palmos/utils.cpp	2005/03/17 17:46:30	1.9
+++ src/palmos/utils.cpp	2005/05/17 16:31:22
@@ -106,7 +106,7 @@
     return NULL;
 }
 
-bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+bool wxGetDiskSpace(const wxString& path, wxDiskspaceSize_t *pTotal, wxDiskspaceSize_t *pFree)
 {
     return false;
 }
Index: src/unix/utilsunx.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/unix/utilsunx.cpp,v
retrieving revision 1.126
diff -u -r1.126 utilsunx.cpp
--- src/unix/utilsunx.cpp	2005/05/10 05:44:10	1.126
+++ src/unix/utilsunx.cpp	2005/05/17 16:28:16
@@ -917,7 +917,7 @@
     return -1;
 }
 
-bool wxGetDiskSpace(const wxString& path, wxLongLong *pTotal, wxLongLong *pFree)
+bool wxGetDiskSpace(const wxString& path, wxDiskspaceSize_t *pTotal, wxDiskspaceSize_t *pFree)
 {
 #if defined(HAVE_STATFS) || defined(HAVE_STATVFS)
     // the case to "char *" is needed for AIX 4.3
@@ -932,19 +932,19 @@
     // under Solaris we also have to use f_frsize field instead of f_bsize
     // which is in general a multiple of f_frsize
 #ifdef HAVE_STATVFS
-    wxLongLong blockSize = fs.f_frsize;
+    wxDiskspaceSize_t blockSize = fs.f_frsize;
 #else // HAVE_STATFS
-    wxLongLong blockSize = fs.f_bsize;
+    wxDiskspaceSize_t blockSize = fs.f_bsize;
 #endif // HAVE_STATVFS/HAVE_STATFS
 
     if ( pTotal )
     {
-        *pTotal = wxLongLong(fs.f_blocks) * blockSize;
+        *pTotal = wxDiskspaceSize_t(fs.f_blocks) * blockSize;
     }
 
     if ( pFree )
     {
-        *pFree = wxLongLong(fs.f_bavail) * blockSize;
+        *pFree = wxDiskspaceSize_t(fs.f_bavail) * blockSize;
     }
 
     return true;
Index: src/xrc/xmlres.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/src/xrc/xmlres.cpp,v
retrieving revision 1.69
diff -u -r1.69 xmlres.cpp
--- src/xrc/xmlres.cpp	2005/03/28 09:42:23	1.69
+++ src/xrc/xmlres.cpp	2005/05/17 17:13:08
@@ -354,7 +354,11 @@
         {
 #           if wxUSE_FILESYSTEM
             file = fsys.OpenFile(m_data[i].File);
+#           if wxUSE_DATETIME
             modif = file && file->GetModificationTime() > m_data[i].Time;
+#           else // wxUSE_DATETIME
+            modif = true;
+#           endif // wxUSE_DATETIME
             if (!file)
             {
                 wxLogError(_("Cannot open file '%s'."), m_data[i].File.c_str());
@@ -362,9 +366,13 @@
             }
             wxDELETE(file);
             wxUnusedVar(file);
-#           else
+#           else // wxUSE_FILESYSTEM
+#           if wxUSE_DATETIME
             modif = wxDateTime(wxFileModificationTime(m_data[i].File)) > m_data[i].Time;
-#           endif
+#           else // wxUSE_DATETIME
+            modif = true;
+#           endif // wxUSE_DATETIME
+#           endif // wxUSE_FILESYSTEM
         }
 
         if (modif)
@@ -420,11 +428,13 @@
                 }
 
                 ProcessPlatformProperty(m_data[i].Doc->GetRoot());
+#if wxUSE_DATETIME
 #if wxUSE_FILESYSTEM
                 m_data[i].Time = file->GetModificationTime();
-#else
+#else // wxUSE_FILESYSTEM
                 m_data[i].Time = wxDateTime(wxFileModificationTime(m_data[i].File));
-#endif
+#endif // wxUSE_FILESYSTEM
+#endif // wxUSE_DATETIME
             }
 
 #           if wxUSE_FILESYSTEM
Index: tests/datetime/datetimetest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/tests/datetime/datetimetest.cpp,v
retrieving revision 1.6
diff -u -r1.6 datetimetest.cpp
--- tests/datetime/datetimetest.cpp	2005/02/28 00:23:05	1.6
+++ tests/datetime/datetimetest.cpp	2005/05/17 22:09:15
@@ -27,6 +27,8 @@
 // the macro below to do it
 //#define CHANGE_SYSTEM_DATE
 
+#if wxUSE_DATETIME
+
 #ifndef __WINDOWS__
     #undef CHANGE_SYSTEM_DATE
 #endif
@@ -803,3 +805,4 @@
 #endif // CHANGE_SYSTEM_DATE
 }
 
+#endif // wxUSE_DATETIME
Index: tests/longlong/longlongtest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/tests/longlong/longlongtest.cpp,v
retrieving revision 1.5
diff -u -r1.5 longlongtest.cpp
--- tests/longlong/longlongtest.cpp	2005/02/28 00:20:31	1.5
+++ tests/longlong/longlongtest.cpp	2005/05/17 22:10:02
@@ -24,6 +24,8 @@
 #include "wx/longlong.h"
 #include "wx/timer.h"
 
+#if wxUSE_LONGLONG
+
 // ----------------------------------------------------------------------------
 // helpers for testing
 // ----------------------------------------------------------------------------
@@ -322,3 +324,4 @@
 
 }
 
+#endif // wxUSE_LONGLONG
Index: tests/streams/datastreamtest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/tests/streams/datastreamtest.cpp,v
retrieving revision 1.2
diff -u -r1.2 datastreamtest.cpp
--- tests/streams/datastreamtest.cpp	2004/12/14 20:44:20	1.2
+++ tests/streams/datastreamtest.cpp	2005/05/17 22:43:36
@@ -21,6 +21,8 @@
     #include "wx/wx.h"
 #endif // WX_PRECOMP
 
+#include <vector>
+
 #include "wx/datstrm.h"
 #include "wx/wfstream.h"
 #include "wx/math.h"
@@ -38,11 +40,23 @@
     CPPUNIT_TEST_SUITE( DataStreamTestCase );
         CPPUNIT_TEST( FloatRW );
         CPPUNIT_TEST( DoubleRW );
+#if wxUSE_LONGLONG
+        CPPUNIT_TEST( LongLongRW );
+#endif
+#if wxHAS_INT64
+        CPPUNIT_TEST( Int64RW );
+#endif
         CPPUNIT_TEST( NaNRW );
     CPPUNIT_TEST_SUITE_END();
 
     void FloatRW();
     void DoubleRW();
+#if wxUSE_LONGLONG
+    void LongLongRW();
+#endif
+#if wxHAS_INT64
+    void Int64RW();
+#endif
     void NaNRW();
 
     DECLARE_NO_COPY_CLASS(DataStreamTestCase)
@@ -58,6 +72,7 @@
 {
 }
 
+static
 wxFloat64 TestFloatRW(wxFloat64 fValue)
 {
     wxFileOutputStream* pFileOutput = new wxFileOutputStream( _T("mytext.dat") );
@@ -81,6 +96,91 @@
     return fInFloat;
 }
 
+template <class T>
+class TestMultiRW {
+public:
+    typedef std::vector<T> ValueArray;
+    typedef void (wxDataOutputStream::*FnWriter)(const T *buffer, size_t size);
+    typedef void (wxDataInputStream::*FnReader)(T *buffer, size_t size);
+
+private:
+    bool m_ok;
+
+private:
+    void ProcessData(const T *Values,
+                     typename ValueArray::size_type Size,
+                     FnWriter pfnWriter,
+                     FnReader pfnReader)
+    {
+        ValueArray InValues(Size);
+
+        {
+            wxFileOutputStream FileOutput( _T("mytext.dat") );
+            wxDataOutputStream DataOutput( FileOutput );
+
+            (DataOutput.*pfnWriter)(Values, Size);
+        }
+
+        {
+            wxFileInputStream FileInput( _T("mytext.dat") );
+            wxDataInputStream DataInput( FileInput );
+
+            (DataInput.*pfnReader)(&*InValues.begin(), InValues.size());
+        }
+
+        m_ok = true;
+        for (typename ValueArray::size_type idx=0; idx!=Size; ++idx) {
+            if (InValues[idx]!=Values[idx]) {
+                m_ok = false;
+                break;
+            }
+        }
+    }
+
+
+public:
+    TestMultiRW(const T *Values,
+                size_t Size,
+                FnWriter pfnWriter,
+                FnReader pfnReader)
+    {
+        ProcessData(Values, (typename ValueArray::size_type) Size, pfnWriter, pfnReader);
+    }
+    TestMultiRW(const ValueArray &Values,
+                FnWriter pfnWriter,
+                FnReader pfnReader)
+    {
+        ProcessData(&*Values.begin(), Values.size(), pfnWriter, pfnReader);
+    }
+
+    bool Ok(void) const {
+        return m_ok;
+    }
+};
+
+template <class T>
+static
+T TestRW(const T &Value)
+{
+    T InValue;
+
+    {
+        wxFileOutputStream FileOutput( _T("mytext.dat") );
+        wxDataOutputStream DataOutput( FileOutput );
+
+        DataOutput << Value;
+    }
+
+    {
+        wxFileInputStream FileInput( _T("mytext.dat") );
+        wxDataInputStream DataInput( FileInput );
+
+        DataInput >> InValue;
+    }
+
+    return InValue;
+}
+
 void DataStreamTestCase::FloatRW()
 {
     CPPUNIT_ASSERT( TestFloatRW(5.5) == 5.5 );
@@ -94,6 +194,54 @@
     CPPUNIT_ASSERT( TestFloatRW(2132131.1232132) == 2132131.1232132 );
     CPPUNIT_ASSERT( TestFloatRW(21321343431.1232143432) == 21321343431.1232143432 );
 }
+
+#if wxUSE_LONGLONG
+void DataStreamTestCase::LongLongRW()
+{
+    TestMultiRW<wxLongLong>::ValueArray ValuesLL;
+    TestMultiRW<wxULongLong>::ValueArray ValuesULL;
+
+    ValuesLL.push_back(wxLongLong(0l));
+    ValuesLL.push_back(wxLongLong(1l));
+    ValuesLL.push_back(wxLongLong(-1l));
+    ValuesLL.push_back(wxLongLong(0x12345678l));
+    ValuesLL.push_back(wxLongLong(0x12345678l, 0xabcdef01l));
+
+    ValuesULL.push_back(wxULongLong(0l));
+    ValuesULL.push_back(wxULongLong(1l));
+    ValuesULL.push_back(wxULongLong(0x12345678l));
+    ValuesULL.push_back(wxULongLong(0x12345678l, 0xabcdef01l));
+
+    CPPUNIT_ASSERT( TestRW(wxLongLong(0x12345678l)) == wxLongLong(0x12345678l) );
+    CPPUNIT_ASSERT( TestRW(wxLongLong(0x12345678l, 0xabcdef01l)) == wxLongLong(0x12345678l, 0xabcdef01l) );
+    CPPUNIT_ASSERT( TestMultiRW<wxLongLong>(ValuesLL, &wxDataOutputStream::WriteLL, &wxDataInputStream::ReadLL).Ok() );
+    CPPUNIT_ASSERT( TestMultiRW<wxULongLong>(ValuesULL, &wxDataOutputStream::WriteLL, &wxDataInputStream::ReadLL).Ok() );
+}
+#endif
+
+#if wxHAS_INT64
+void DataStreamTestCase::Int64RW()
+{
+    TestMultiRW<wxInt64>::ValueArray ValuesI64;
+    TestMultiRW<wxUint64>::ValueArray ValuesUI64;
+
+    ValuesI64.push_back(wxInt64(0l));
+    ValuesI64.push_back(wxInt64(1l));
+    ValuesI64.push_back(wxInt64(-1l));
+    ValuesI64.push_back(wxInt64(0x12345678l));
+    ValuesI64.push_back((wxInt64(0x12345678l) << 32) + wxInt64(0xabcdef01l));
+
+    ValuesUI64.push_back(wxUint64(0l));
+    ValuesUI64.push_back(wxUint64(1l));
+    ValuesUI64.push_back(wxUint64(0x12345678l));
+    ValuesUI64.push_back((wxUint64(0x12345678l) << 32) + wxUint64(0xabcdef01l));
+
+    CPPUNIT_ASSERT( TestRW(wxUint64(0x12345678l)) == wxUint64(0x12345678l) );
+    CPPUNIT_ASSERT( TestRW((wxUint64(0x12345678l) << 32) + wxUint64(0xabcdef01l)) == (wxUint64(0x12345678l) << 32) + wxUint64(0xabcdef01l) );
+    CPPUNIT_ASSERT( TestMultiRW<wxInt64>(ValuesI64, &wxDataOutputStream::Write64, &wxDataInputStream::Read64).Ok() );
+    CPPUNIT_ASSERT( TestMultiRW<wxUint64>(ValuesUI64, &wxDataOutputStream::Write64, &wxDataInputStream::Read64).Ok() );
+}
+#endif
 
 void DataStreamTestCase::NaNRW()
 {
Index: tests/streams/textstreamtest.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWindows/tests/streams/textstreamtest.cpp,v
retrieving revision 1.2
diff -u -r1.2 textstreamtest.cpp
--- tests/streams/textstreamtest.cpp	2004/11/22 05:00:02	1.2
+++ tests/streams/textstreamtest.cpp	2005/05/18 01:35:34
@@ -24,6 +24,10 @@
 #include "wx/txtstrm.h"
 #include "wx/wfstream.h"
 
+#if wxUSE_LONGLONG
+#include "wx/longlong.h"
+#endif
+
 // ----------------------------------------------------------------------------
 // test class
 // ----------------------------------------------------------------------------
@@ -36,9 +40,15 @@
 private:
     CPPUNIT_TEST_SUITE( TextStreamTestCase );
         CPPUNIT_TEST( Endline );
+#if wxUSE_LONGLONG
+        CPPUNIT_TEST( TestLongLong );
+#endif
     CPPUNIT_TEST_SUITE_END();
 
     void Endline();
+#if wxUSE_LONGLONG
+    void TestLongLong();
+#endif
 
 
     DECLARE_NO_COPY_CLASS(TextStreamTestCase)
@@ -85,3 +95,43 @@
 
     delete pInFile;
 }
+
+#if wxUSE_LONGLONG
+void TextStreamTestCase::TestLongLong()
+{
+    {
+        wxFileOutputStream OutFile(_T("test.txt"));
+        wxTextOutputStream OutText(OutFile);
+        OutText
+            << wxLongLong(0l) << endl
+            << wxLongLong(1l) << endl
+            << wxLongLong(-1l) << endl
+            << wxLongLong(0x12345678l) << endl
+            << wxLongLong(0x12345678l, 0x9abcdef0l) << endl
+            << wxULongLong(0l) << endl
+            << wxULongLong(1l) << endl
+            << wxULongLong(0x12345678l) << endl
+            << wxULongLong(0x12345678l, 0x9abcdef0l) << endl;
+    }
+
+    {
+        wxFileInputStream InFile(_T("test.txt"));
+        wxTextInputStream InText(InFile);
+
+        wxLongLong ll[5];
+        wxULongLong ull[4];
+        InText
+            >> ll[0] >> ll[1] >> ll[2] >> ll[3] >> ll[4]
+            >> ull[0] >> ull[1] >> ull[2] >> ull[3];
+        CPPUNIT_ASSERT( ll[0] == wxLongLong(0l) );
+        CPPUNIT_ASSERT( ll[1] == wxLongLong(1l) );
+        CPPUNIT_ASSERT( ll[2] == wxLongLong(-1l) );
+        CPPUNIT_ASSERT( ll[3] == wxLongLong(0x12345678l) );
+        CPPUNIT_ASSERT( ll[4] == wxLongLong(0x12345678l, 0x9abcdef0l) );
+        CPPUNIT_ASSERT( ull[0] == wxULongLong(0l) );
+        CPPUNIT_ASSERT( ull[1] == wxULongLong(1l) );
+        CPPUNIT_ASSERT( ull[2] == wxULongLong(0x12345678l) );
+        CPPUNIT_ASSERT( ull[3] == wxULongLong(0x12345678l, 0x9abcdef0l) );
+    }
+}
+#endif

 	  	 

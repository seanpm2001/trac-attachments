Index: include/wx/msw/statusbar.h
===================================================================
--- include/wx/msw/statusbar.h	(revision 60063)
+++ include/wx/msw/statusbar.h	(working copy)
@@ -59,6 +59,14 @@
     virtual int GetBorderX() const;
     virtual int GetBorderY() const;
 
+    // Windows does not place the field text at the left edge of
+    // the field rect, so setting the width based directly on
+    // wxWindow::GetTextExtent() yields an ellipsized string.
+    // Add the result of this function to the result of
+    // GetTextExtent to get a better field width.  Note that the
+    // required adjustement varies with the field index!
+    virtual int GetTextExtentAdjustment(int i) const;
+
     virtual bool SetFont(const wxFont& font);
 
     virtual WXLRESULT MSWWindowProc(WXUINT nMsg,
Index: include/wx/statusbr.h
===================================================================
--- include/wx/statusbr.h	(revision 60063)
+++ include/wx/statusbr.h	(working copy)
@@ -139,6 +139,14 @@
     virtual int GetBorderX() const = 0;
     virtual int GetBorderY() const = 0;
 
+    // Windows does not place the field text at the left edge of
+    // the field rect, so setting the width based directly on
+    // wxWindow::GetTextExtent() yields an ellipsized string.
+    // Add the result of this function to the result of
+    // GetTextExtent to get a better field width.  Note that the
+    // required adjustement varies with the field index!
+    virtual int GetTextExtentAdjustment(int WXUNUSED(i)) const { return 0; }
+
     // miscellaneous
     // -------------
     
Index: interface/wx/statusbr.h
===================================================================
--- interface/wx/statusbr.h	(revision 60063)
+++ interface/wx/statusbr.h	(working copy)
@@ -169,6 +169,23 @@
     int GetStatusStyle(int n) const;
         
     /**
+        Windows does not place the field text at the left edge of
+        the field rect, so setting the width to the result of
+        wxWindow::GetTextExtent() yields an ellipsized string.
+        Add the result of this function to the result of
+        GetTextExtent() to get a better field width.  Note that
+        the required adjustement varies with the field index!
+
+        @param i
+            The field in question.
+
+        @return the value to add to wxWindow::GetTextExtent
+
+        @see wxWindow::GetTextExtent()
+    */
+    virtual int GetTextExtentAdjustment(int i) const;
+
+    /**
         Sets the field text to the top of the stack, and pops the stack of saved
         strings.
 
Index: samples/statbar/statbar.cpp
===================================================================
--- samples/statbar/statbar.cpp	(revision 60063)
+++ samples/statbar/statbar.cpp	(working copy)
@@ -49,6 +49,7 @@
 #include "wx/datetime.h"
 #include "wx/numdlg.h"
 #include "wx/fontdlg.h"
+#include "wx/dcclient.h"
 
 #ifndef __WXMSW__
     #include "../sample.xpm"
@@ -67,7 +68,10 @@
     #include "wx/mdi.h"
 #endif // USE_MDI_PARENT_FRAME
 
+#define SHOW_FIELD_RECT 0
+#define USE_TEXT_EXTENT_ADJUST 0
 
+
 // ----------------------------------------------------------------------------
 // resources
 // ----------------------------------------------------------------------------
@@ -155,6 +159,9 @@
 #endif
 
     // event handlers (these functions should _not_ be virtual)
+#if SHOW_FIELD_RECT
+    void OnStatusIdle(wxIdleEvent& event);
+#endif
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
 
@@ -378,6 +385,33 @@
     SetStatusText(_T("Welcome to wxWidgets!"));
 
     m_statbarDefault = GetStatusBar();
+    // make sure fonts match
+    m_statbarDefault->SetFont(m_statbarDefault->GetFont());
+    HFONT hWxFont = HFONT(m_statbarDefault->GetFont().GetHFONT());
+    LOGFONT wxLogfont, w32Logfont;
+    wxASSERT(GetObject(hWxFont, sizeof(wxLogfont), &wxLogfont) == sizeof(wxLogfont));
+    HFONT hW32Font = HFONT(::SendMessage(HWND(m_statbarDefault->GetHWND()), WM_GETFONT, 0, 0));
+    wxASSERT(GetObject(hW32Font, sizeof(w32Logfont), &w32Logfont) == sizeof(w32Logfont));
+    wxASSERT(memcmp(&wxLogfont, &w32Logfont, sizeof(wxLogfont)) == 0);
+#if SHOW_FIELD_RECT
+    // show the pane boundaries
+    m_statbarDefault->Bind(wxEVT_IDLE, &MyFrame::OnStatusIdle, this);
+#endif
+    /* even with font match, setting widths from text length
+        gives fields that are too small */
+    m_statbarDefault->SetFieldsCount(4);
+    int widths[4] = { -1, 0, -1, 0 };
+    LPCSTR s = "test text";
+#if USE_TEXT_EXTENT_ADJUST
+    widths[1] = m_statbarDefault->wxWindowBase::GetTextExtent(s).GetX() + m_statbarDefault->GetTextExtentAdjustment(1);
+    widths[3] = m_statbarDefault->wxWindowBase::GetTextExtent(s).GetX() + m_statbarDefault->GetTextExtentAdjustment(3);
+#else
+    widths[1] = m_statbarDefault->wxWindowBase::GetTextExtent(s).GetX();
+    widths[3] = m_statbarDefault->wxWindowBase::GetTextExtent(s).GetX();
+#endif
+    m_statbarDefault->SetStatusWidths(4, widths);
+    m_statbarDefault->SetStatusText(s, 1);
+    m_statbarDefault->SetStatusText(s, 3);
 }
 
 MyFrame::~MyFrame()
@@ -388,6 +422,23 @@
     delete m_statbarCustom;
 }
 
+#if SHOW_FIELD_RECT
+void MyFrame::OnStatusIdle(wxIdleEvent& event)
+{
+    wxClientDC dc(m_statbarDefault);
+    dc.SetPen(*wxRED_PEN);
+    dc.SetBrush(*wxTRANSPARENT_BRUSH);
+    wxRect r;
+    bool b = m_statbarDefault->GetFieldRect(1, r);
+    wxASSERT(b);
+    dc.DrawRectangle(r);
+    b = m_statbarDefault->GetFieldRect(3, r);
+    wxASSERT(b);
+    dc.DrawRectangle(r);
+    event.Skip();
+}
+#endif
+
 void MyFrame::DoCreateStatusBar(MyFrame::StatBarKind kind)
 {
     wxStatusBar *statbarOld = GetStatusBar();
Index: src/msw/statusbar.cpp
===================================================================
--- src/msw/statusbar.cpp	(revision 60063)
+++ src/msw/statusbar.cpp	(working copy)
@@ -287,6 +287,42 @@
     return aBorders[1];
 }
 
+int wxStatusBar::GetTextExtentAdjustment(int i) const
+{
+    wxCHECK_MSG( (i >= 0) && ((size_t)i < m_panes.GetCount()), false,
+                 _T("invalid statusbar field index") );
+
+    wxWinVersion ver = wxGetWinVersion();
+    if (ver >= wxWinVersion_Vista)
+    {
+        if (i < GetFieldsCount()-1)
+        {
+            return 8;
+        }
+        else
+        {
+            return 20;
+        }
+    }
+    else if (ver >= wxWinVersion_XP)
+    {
+        if (i < GetFieldsCount()-1)
+        {
+            return 8;
+        }
+        else
+        {
+            return 32;
+        }
+    }
+    else
+    {
+        // I don't know the correct values here
+        wxASSERT(false);
+        return 0;
+    }
+}
+
 void wxStatusBar::SetMinHeight(int height)
 {
     SendMessage(GetHwnd(), SB_SETMINHEIGHT, height + 2*GetBorderY(), 0);

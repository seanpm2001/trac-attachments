Index: include/wx/ptr_scpd.h
===================================================================
--- include/wx/ptr_scpd.h	(revision 54783)
+++ include/wx/ptr_scpd.h	(working copy)
@@ -164,7 +164,8 @@
     {                               \
         if (m_ptr != ptr)           \
         {                           \
-            delete m_ptr;           \
+            if (m_ptr)		        \
+                delete m_ptr;       \
             m_ptr = ptr;            \
         }                           \
     }                               \
@@ -204,7 +205,8 @@
 #define wxDEFINE_SCOPED_PTR(T, name)\
 name::~name()                       \
 {                                   \
-    wxCHECKED_DELETE(m_ptr);        \
+    if (m_ptr)                      \
+        wxCHECKED_DELETE(m_ptr);    \
 }
 
 // this macro can be used for the most common case when you want to declare and
Index: src/common/event.cpp
===================================================================
--- src/common/event.cpp	(revision 54783)
+++ src/common/event.cpp	(working copy)
@@ -1165,17 +1165,22 @@
 
     // this method is only called by wxApp if this handler does have
     // pending events
-    wxCHECK_RET( m_pendingEvents && !m_pendingEvents->IsEmpty(),
+    if (!m_pendingEvents){
+        wxFAIL_COND_MSG("m_pendingEvents",
                  "should have pending events if called" );
+        wxLEAVE_CRIT_SECT( m_pendingEventsLock );
+        return;
+	}
+    wxEventPtr event;
+    if (!m_pendingEvents->IsEmpty()){
+        wxList::compatibility_iterator node = m_pendingEvents->GetFirst();
+        event.reset(wx_static_cast(wxEvent *, node->GetData()));
 
-    wxList::compatibility_iterator node = m_pendingEvents->GetFirst();
-    wxEventPtr event(wx_static_cast(wxEvent *, node->GetData()));
-
-    // it's important we remove event from list before processing it, else a
-    // nested event loop, for example from a modal dialog, might process the
-    // same event again.
-    m_pendingEvents->Erase(node);
-
+        // it's important we remove event from list before processing it, else a
+        // nested event loop, for example from a modal dialog, might process the
+        // same event again.
+        m_pendingEvents->Erase(node);
+    }
     // if there are no more pending events left, we don't need to stay in this
     // list
     if ( m_pendingEvents->IsEmpty() )
@@ -1193,7 +1198,8 @@
 
     wxLEAVE_CRIT_SECT( m_pendingEventsLock );
 
-    ProcessEvent(*event);
+    if (event.get())
+	    ProcessEvent(*event);
 
     // careful: this object could have been deleted by the event handler
     // executed by the above ProcessEvent() call, so we can't access any fields

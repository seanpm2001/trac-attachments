Index: include/wx/msw/webview_ie.h
===================================================================
--- include/wx/msw/webview_ie.h	(revision 70098)
+++ include/wx/msw/webview_ie.h	(working copy)
@@ -150,9 +150,106 @@
 
 /* END OF URLMON.H implementation */
 
+/* Same goes for the mshtmhst.h, these are also taken
+ * from mingw-w64 headers.
+ */
+
+typedef enum _tagwxDOCHOSTUIFLAG
+{
+    DOCHOSTUIFLAG_DIALOG = 0x1,DOCHOSTUIFLAG_DISABLE_HELP_MENU = 0x2,DOCHOSTUIFLAG_NO3DBORDER = 0x4,DOCHOSTUIFLAG_SCROLL_NO = 0x8,
+    DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 0x10,DOCHOSTUIFLAG_OPENNEWWIN = 0x20,DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 0x40,
+    DOCHOSTUIFLAG_FLAT_SCROLLBAR = 0x80,DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 0x100,DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 0x200,
+    DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = 0x400,DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = 0x800,DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = 0x1000,
+    DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = 0x2000,DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = 0x4000,DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = 0x10000,
+    DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = 0x20000,DOCHOSTUIFLAG_THEME = 0x40000,DOCHOSTUIFLAG_NOTHEME = 0x80000,DOCHOSTUIFLAG_NOPICS = 0x100000,
+    DOCHOSTUIFLAG_NO3DOUTERBORDER = 0x200000,DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = 0x400000,DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = 0x800000,
+    DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = 0x1000000
+} DOCHOSTUIFLAG;
+
+typedef struct _tagwxDOCHOSTUIINFO
+{
+    ULONG cbSize;
+    DWORD dwFlags;
+    DWORD dwDoubleClick;
+    OLECHAR *pchHostCss;
+    OLECHAR *pchHostNS;
+} DOCHOSTUIINFO;
+
+//not required?
+//DEFINE_GUID(IID_IDocHostUIHandler, 0xbd3f23c0, 0xd43e, 0x11cf, 0x89, 0x3b, 0x00, 0xaa, 0x00, 0xbd, 0xce, 0x1a);
+
+EXTERN_C const IID IID_IDocHostUIHandler;
+
+class wxIDocHostUIHandler : public IUnknown
+{
+public:
+    virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(
+        DWORD dwID,
+        POINT *ppt,
+        IUnknown *pcmdtReserved,
+        IDispatch *pdispReserved) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetHostInfo(
+        DOCHOSTUIINFO *pInfo) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ShowUI(
+        DWORD dwID,
+        IOleInPlaceActiveObject *pActiveObject,
+        IOleCommandTarget *pCommandTarget,
+        IOleInPlaceFrame *pFrame,
+        IOleInPlaceUIWindow *pDoc) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE HideUI(void) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE UpdateUI(void) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE EnableModeless(
+        BOOL fEnable) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE OnDocWindowActivate(
+        BOOL fActivate) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE OnFrameWindowActivate(
+        BOOL fActivate) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ResizeBorder(
+        LPCRECT prcBorder,
+        IOleInPlaceUIWindow *pUIWindow,
+        BOOL fRameWindow) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator(
+        LPMSG lpMsg,
+        const GUID *pguidCmdGroup,
+        DWORD nCmdID) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetOptionKeyPath(
+        __out  LPOLESTR *pchKey,
+        DWORD dw) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetDropTarget(
+        IDropTarget *pDropTarget,
+        IDropTarget **ppDropTarget) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetExternal(
+        IDispatch **ppDispatch) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateUrl(
+        DWORD dwTranslate,
+        __in __nullterminated  OLECHAR *pchURLIn,
+        __out  OLECHAR **ppchURLOut) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE FilterDataObject(
+        IDataObject *pDO,
+        IDataObject **ppDORet) = 0;
+};
+
+/* END OF MSHTMHST.H implementation */
+
 struct IHTMLDocument2;
 class wxFSFile;
 class ClassFactory;
+class wxIEContainer;
+class DocHostUIHandler;
 
 class WXDLLIMPEXP_WEBVIEW wxWebViewIE : public wxWebView
 {
@@ -262,10 +359,11 @@
     DECLARE_EVENT_TABLE();
 
 private:
-    wxActiveXContainer* m_container;
+    wxIEContainer* m_container;
     wxAutomationObject m_ie;
     IWebBrowser2* m_webBrowser;
     DWORD m_dwCookie;
+    DocHostUIHandler* m_uiHandler;
 
     //We store the current zoom type;
     wxWebViewZoomType m_zoomType;
@@ -353,6 +451,83 @@
     wxSharedPtr<wxWebViewHandler> m_handler;
 };
 
+class wxIEContainer : public wxActiveXContainer
+{
+public:
+    wxIEContainer(wxWindow *parent, REFIID iid, IUnknown *pUnk, DocHostUIHandler* uiHandler = NULL);
+    virtual ~wxIEContainer();
+    virtual bool QueryClientSiteInterface(REFIID iid, void **_interface, const char *&desc);
+private:
+    DocHostUIHandler* m_uiHandler;
+};
+
+class DocHostUIHandler : public wxIDocHostUIHandler
+{
+public:
+    DocHostUIHandler();
+    ~DocHostUIHandler();
+    virtual HRESULT STDMETHODCALLTYPE ShowContextMenu(
+        DWORD dwID,
+        POINT *ppt,
+        IUnknown *pcmdtReserved,
+        IDispatch *pdispReserved);
+
+    virtual HRESULT STDMETHODCALLTYPE GetHostInfo(
+        DOCHOSTUIINFO *pInfo);
+
+    virtual HRESULT STDMETHODCALLTYPE ShowUI(
+        DWORD dwID,
+        IOleInPlaceActiveObject *pActiveObject,
+        IOleCommandTarget *pCommandTarget,
+        IOleInPlaceFrame *pFrame,
+        IOleInPlaceUIWindow *pDoc);
+
+    virtual HRESULT STDMETHODCALLTYPE HideUI(void);
+
+    virtual HRESULT STDMETHODCALLTYPE UpdateUI(void);
+
+    virtual HRESULT STDMETHODCALLTYPE EnableModeless(
+        BOOL fEnable);
+
+    virtual HRESULT STDMETHODCALLTYPE OnDocWindowActivate(
+        BOOL fActivate);
+
+    virtual HRESULT STDMETHODCALLTYPE OnFrameWindowActivate(
+        BOOL fActivate);
+
+    virtual HRESULT STDMETHODCALLTYPE ResizeBorder(
+        LPCRECT prcBorder,
+        IOleInPlaceUIWindow *pUIWindow,
+        BOOL fRameWindow);
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator(
+        LPMSG lpMsg,
+        const GUID *pguidCmdGroup,
+        DWORD nCmdID);
+
+    virtual HRESULT STDMETHODCALLTYPE GetOptionKeyPath(
+        __out  LPOLESTR *pchKey,
+        DWORD dw);
+
+    virtual HRESULT STDMETHODCALLTYPE GetDropTarget(
+        IDropTarget *pDropTarget,
+        IDropTarget **ppDropTarget);
+
+    virtual HRESULT STDMETHODCALLTYPE GetExternal(
+        IDispatch **ppDispatch);
+
+    virtual HRESULT STDMETHODCALLTYPE TranslateUrl(
+        DWORD dwTranslate,
+        __in __nullterminated  OLECHAR *pchURLIn,
+        __out  OLECHAR **ppchURLOut);
+
+    virtual HRESULT STDMETHODCALLTYPE FilterDataObject(
+        IDataObject *pDO,
+        IDataObject **ppDORet);
+    //IUnknown
+    DECLARE_IUNKNOWN_METHODS;
+};
+
 #endif // wxUSE_WEBVIEW && wxUSE_WEBVIEW_IE && defined(__WXMSW__)
 
 #endif // wxWebViewIE_H
Index: src/msw/webview_ie.cpp
===================================================================
--- src/msw/webview_ie.cpp	(revision 70098)
+++ src/msw/webview_ie.cpp	(working copy)
@@ -81,8 +81,11 @@
     m_webBrowser->put_RegisterAsBrowser(VARIANT_TRUE);
     m_webBrowser->put_RegisterAsDropTarget(VARIANT_TRUE);
 
-    m_container = new wxActiveXContainer(this, IID_IWebBrowser2, m_webBrowser);
+    m_uiHandler = new DocHostUIHandler;
+    m_uiHandler->AddRef();
 
+    m_container = new wxIEContainer(this, IID_IWebBrowser2, m_webBrowser, m_uiHandler);
+
     LoadURL(url);
     return true;
 }
@@ -93,6 +96,8 @@
     {
         m_factories[i]->Release();
     }
+
+    m_uiHandler->Release();
 }
 
 void wxWebViewIE::LoadURL(const wxString& url)
@@ -112,7 +117,7 @@
         param->bstrVal = bstr;
 
         hr = SafeArrayUnaccessData(psaStrings);
-        
+
         IHTMLDocument2* document = GetDocument();
         document->write(psaStrings);
         document->close();
@@ -1155,4 +1160,162 @@
     return S_OK;
 }
 
+wxIEContainer::wxIEContainer(wxWindow *parent, REFIID iid, IUnknown *pUnk, DocHostUIHandler* uiHandler) :
+    wxActiveXContainer(parent,iid,pUnk)
+{
+    m_uiHandler = uiHandler;
+}
+
+wxIEContainer::~wxIEContainer()
+{
+}
+
+bool wxIEContainer::QueryClientSiteInterface(REFIID iid, void **_interface, const char *&desc)
+{
+    if (m_uiHandler && IsEqualIID(iid, IID_IDocHostUIHandler))
+    {
+        *_interface = (IUnknown *) (wxIDocHostUIHandler *) m_uiHandler;
+        desc = "IDocHostUIHandler";
+        return true;
+    }
+    return false;
+}
+
+DocHostUIHandler::DocHostUIHandler()
+{
+}
+
+DocHostUIHandler::~DocHostUIHandler()
+{
+}
+
+HRESULT DocHostUIHandler::ShowContextMenu(DWORD dwID,POINT *ppt,IUnknown *pcmdtReserved,IDispatch *pdispReserved)
+{
+    wxUnusedVar(dwID);
+    wxUnusedVar(ppt);
+    wxUnusedVar(pcmdtReserved);
+    wxUnusedVar(pdispReserved);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::GetHostInfo(DOCHOSTUIINFO *pInfo)
+{
+    //don't show 3d border.
+    pInfo->dwFlags = DOCHOSTUIFLAG_NO3DBORDER;
+    return S_OK;
+}
+
+HRESULT DocHostUIHandler::ShowUI(DWORD dwID,IOleInPlaceActiveObject *pActiveObject,IOleCommandTarget *pCommandTarget,IOleInPlaceFrame *pFrame,IOleInPlaceUIWindow *pDoc)
+{
+    wxUnusedVar(dwID);
+    wxUnusedVar(pActiveObject);
+    wxUnusedVar(pCommandTarget);
+    wxUnusedVar(pFrame);
+    wxUnusedVar(pDoc);
+    return S_FALSE;
+}
+
+HRESULT DocHostUIHandler::HideUI(void)
+{
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::UpdateUI(void)
+{
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::EnableModeless(BOOL fEnable)
+{
+    wxUnusedVar(fEnable);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::OnDocWindowActivate(BOOL fActivate)
+{
+    wxUnusedVar(fActivate);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::OnFrameWindowActivate(BOOL fActivate)
+{
+    wxUnusedVar(fActivate);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::ResizeBorder(LPCRECT prcBorder,IOleInPlaceUIWindow *pUIWindow,BOOL fFrameWindow)
+{
+    wxUnusedVar(prcBorder);
+    wxUnusedVar(pUIWindow);
+    wxUnusedVar(fFrameWindow);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::TranslateAccelerator(LPMSG lpMsg,const GUID *pguidCmdGroup,DWORD nCmdID)
+{
+    if(lpMsg && lpMsg->message == WM_KEYDOWN)
+    {
+        //control is down?
+        if((GetKeyState(VK_CONTROL) & 0x8000 ))
+        {
+            //skip CTRL-N, CTRL-F and CTRL-P
+            if(lpMsg->wParam == 'N' || lpMsg->wParam == 'P' || lpMsg->wParam == 'F')
+            {
+                return S_OK;
+            }
+        }
+        //skip F5
+        if(lpMsg->wParam == VK_F5)
+        {
+            return S_OK;
+        }
+    }
+
+    wxUnusedVar(pguidCmdGroup);
+    wxUnusedVar(nCmdID);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::GetOptionKeyPath(LPOLESTR *pchKey,DWORD dw)
+{
+    wxUnusedVar(pchKey);
+    wxUnusedVar(dw);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::GetDropTarget(IDropTarget *pDropTarget,IDropTarget **ppDropTarget)
+{
+    wxUnusedVar(pDropTarget);
+    wxUnusedVar(ppDropTarget);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::GetExternal(IDispatch **ppDispatch)
+{
+    wxUnusedVar(ppDispatch);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::TranslateUrl(DWORD dwTranslate,OLECHAR *pchURLIn,OLECHAR **ppchURLOut)
+{
+    wxUnusedVar(dwTranslate);
+    wxUnusedVar(pchURLIn);
+    wxUnusedVar(ppchURLOut);
+    return E_NOTIMPL;
+}
+
+HRESULT DocHostUIHandler::FilterDataObject(IDataObject *pDO, IDataObject **ppDORet)
+{
+    wxUnusedVar(pDO);
+    wxUnusedVar(ppDORet);
+    return E_NOTIMPL;
+}
+
+BEGIN_IID_TABLE(DocHostUIHandler)
+    ADD_IID(Unknown)
+    ADD_IID(DocHostUIHandler)
+END_IID_TABLE;
+
+IMPLEMENT_IUNKNOWN_METHODS(DocHostUIHandler)
+
 #endif // wxUSE_WEBVIEW && wxUSE_WEBVIEW_IE

Index: build/bakefiles/files.bkl
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/build/bakefiles/files.bkl,v
retrieving revision 1.292
diff -u -r1.292 files.bkl
--- build/bakefiles/files.bkl	2005/12/18 12:30:49	1.292
+++ build/bakefiles/files.bkl	2006/01/01 21:28:15
@@ -581,6 +581,7 @@
     src/common/imagpcx.cpp
     src/common/imagpng.cpp
     src/common/imagpnm.cpp
+    src/common/imagtga.cpp
     src/common/imagtiff.cpp
     src/common/imagxpm.cpp
     src/common/layout.cpp
@@ -762,6 +763,7 @@
     wx/imagpcx.h
     wx/imagpng.h
     wx/imagpnm.h
+    wx/imagtga.h
     wx/imagtiff.h
     wx/imagxpm.h
     wx/listbase.h
Index: include/wx/gdicmn.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gdicmn.h,v
retrieving revision 1.100
diff -u -r1.100 gdicmn.h
--- include/wx/gdicmn.h	2005/09/25 18:14:51	1.100
+++ include/wx/gdicmn.h	2005/11/24 15:17:46
@@ -57,6 +57,7 @@
     wxBITMAP_TYPE_XBM_DATA,
     wxBITMAP_TYPE_XPM,
     wxBITMAP_TYPE_XPM_DATA,
+    wxBITMAP_TYPE_TGA,
     wxBITMAP_TYPE_TIF,
     wxBITMAP_TYPE_TIF_RESOURCE,
     wxBITMAP_TYPE_GIF,
Index: include/wx/image.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/image.h,v
retrieving revision 1.110
diff -u -r1.110 image.h
--- include/wx/image.h	2005/09/25 20:23:20	1.110
+++ include/wx/image.h	2005/11/24 15:09:14
@@ -160,7 +160,7 @@
     public:
       RGBValue(unsigned char r=0, unsigned char g=0, unsigned char b=0)
         : red(r), green(g), blue(b) {}
-        unsigned char red;  
+        unsigned char red;
         unsigned char green;
         unsigned char blue;
     };
@@ -171,7 +171,7 @@
     public:
         HSVValue(double h=0.0, double s=0.0, double v=0.0)
             : hue(h), saturation(s), value(v) {}
-        double hue;  
+        double hue;
         double saturation;
         double value;
     };
@@ -419,6 +419,7 @@
 #include "wx/imaggif.h"
 #include "wx/imagpcx.h"
 #include "wx/imagjpeg.h"
+#include "wx/imagtga.h"
 #include "wx/imagtiff.h"
 #include "wx/imagpnm.h"
 #include "wx/imagxpm.h"
Index: include/wx/msw/setup0.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/setup0.h,v
retrieving revision 1.216
diff -u -r1.216 setup0.h
--- include/wx/msw/setup0.h	2006/01/01 01:42:13	1.216
+++ include/wx/msw/setup0.h	2006/01/01 21:29:09
@@ -469,7 +469,7 @@
 //
 // Default is 1.
 //
-// Recommended setting: 1 
+// Recommended setting: 1
 #define wxUSE_MEDIACTRL     1
 
 // Use GStreamer for Unix (req a lot of dependancies)
@@ -1031,6 +1031,9 @@
 
 // Set to 1 for IFF format support (Amiga format)
 #define wxUSE_IFF           0
+
+// Set to 1 for TGA format support
+#define wxUSE_TGA           1
 
 // Set to 1 for XPM format support
 #define wxUSE_XPM           1
Index: src/common/imagall.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/imagall.cpp,v
retrieving revision 1.14
diff -u -r1.14 imagall.cpp
--- src/common/imagall.cpp	2005/09/23 12:52:57	1.14
+++ src/common/imagall.cpp	2005/11/24 15:39:39
@@ -55,6 +55,9 @@
   wxImage::AddHandler( new wxCURHandler );
   wxImage::AddHandler( new wxANIHandler );
 #endif
+#if wxUSE_TGA
+  wxImage::AddHandler( new wxTGAHandler );
+#endif
 #if wxUSE_XPM
   wxImage::AddHandler( new wxXPMHandler );
 #endif
--- C:/wxWidgets/include/wx/imagtga.h
+++ C:/wxWidgets/include/wx/imagtga.h
@@ -0,0 +1,48 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        imagtga.h
+// Purpose:     wxImage TGA handler
+// Author:      Seth Jackson
+// RCS-ID:
+// Copyright:   (c) 2005 Seth Jackson
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_IMAGTGA_H_
+#define _WX_IMAGTGA_H_
+
+#include "wx/image.h"
+
+//-----------------------------------------------------------------------------
+// wxTGAHandler
+//-----------------------------------------------------------------------------
+
+#if wxUSE_TGA
+
+class WXDLLEXPORT wxTGAHandler : public wxImageHandler
+{
+    public:
+
+        inline wxTGAHandler()
+        {
+            m_name = wxT("TGA file");
+            m_extension = wxT("tga");
+            m_type = wxBITMAP_TYPE_TGA;
+            m_mime = wxT("image/tga");
+        }
+
+        #if wxUSE_STREAMS
+
+        virtual bool LoadFile(wxImage* image, wxInputStream& stream, bool verbose = true, int index = -1);
+        virtual bool SaveFile(wxImage* image, wxOutputStream& stream, bool verbose = true);
+        virtual bool DoCanRead(wxInputStream& stream);
+
+        #endif // wxUSE_STREAMS
+
+    private:
+
+        DECLARE_DYNAMIC_CLASS(wxTGAHandler)
+};
+
+#endif // wxUSE_TGA
+
+#endif // _WX_IMAGTGA_H_

--- C:/wxWidgets/src/common/imagtga.cpp
+++ C:/wxWidgets/src/common/imagtga.cpp
@@ -0,0 +1,781 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        imagtga.cpp
+// Purpose:     wxImage TGA handler
+// Author:      Seth Jackson
+// CVS-ID:
+// Copyright:   (c) 2005 Seth Jackson
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+  #pragma hdrstop
+#endif
+
+#if wxUSE_IMAGE && wxUSE_TGA
+
+#ifndef WX_PRECOMP
+    #include "wx/palette.h"
+#endif
+
+#include "wx/imagtga.h"
+#include "wx/log.h"
+
+//-----------------------------------------------------------------------------
+// wxTGAHandler
+//-----------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxTGAHandler, wxImageHandler)
+
+#if wxUSE_STREAMS
+
+// TGA error codes.
+
+enum
+{
+    wxTGA_OK = 0,
+    wxTGA_INVFORMAT = 1,
+    wxTGA_MEMERR = 2
+};
+
+// TGA header bytes.
+
+enum
+{
+    HDR_OFFSET = 0,
+    HDR_COLORTYPE  = 1,
+    HDR_IMAGETYPE = 2,
+    HDR_PALETTESTART = 3,
+    HDR_PALETTELENGTH = 5,
+    HDR_PALETTEBITS = 7,
+    HDR_XORIGIN = 8,
+    HDR_YORIGIN = 10,
+    HDR_WIDTH = 12,
+    HDR_HEIGHT = 14,
+    HDR_BPP = 16,
+    HDR_ORIENTATION = 17
+};
+
+// TGA color types.
+
+enum
+{
+    wxTGA_UNMAPPED = 0,
+    wxTGA_MAPPED = 1
+};
+
+void FlipTGA(unsigned char* imageData, int width, int height, short pixelSize)
+{
+    unsigned char temp;
+    unsigned char* line1;
+    unsigned char* line2;
+    int lineLength;
+
+    lineLength = width * pixelSize;
+    line1 = imageData;
+    line2 = &imageData[lineLength * (height - 1)];
+
+    for ( ; line1 < line2; line2 -= (lineLength * 2))
+    {
+        for (int index = 0; index < lineLength; line1++, line2++, index++)
+        {
+            temp = *line1;
+            *line1 = *line2;
+            *line2 = temp;
+        }
+    }
+}
+
+void DecodeRLE(unsigned char* imageData, unsigned long imageSize,
+               short pixelSize, wxInputStream& stream)
+{
+    unsigned long index = 0;
+    unsigned char current;
+    unsigned int length;
+    unsigned char buf[4];
+
+    while (index < imageSize)
+    {
+        current = stream.GetC();
+
+        // RLE packet.
+
+        if (current & 0x80)
+        {
+            // Get the run length of the packet.
+
+            current &= 0x7f;
+
+            current++;
+
+            length = current;
+
+            index += current * pixelSize;
+
+            // Repeat the pixel length times.
+
+            stream.Read(buf, pixelSize);
+
+            for (unsigned int i = 0; i < length; i++)
+            {
+                memcpy(imageData, buf, pixelSize);
+
+                imageData += pixelSize;
+            }
+        }
+
+        // Raw packet.
+
+        else
+        {
+            // Get the run length of the packet.
+
+            current++;
+
+            length = current * pixelSize;
+
+            index += length;
+
+            // Write the next length pixels directly to the image data.
+
+            stream.Read(imageData, length);
+
+            imageData += length;
+        }
+    }
+}
+
+int ReadTGA(wxImage* image, wxInputStream& stream)
+{
+    unsigned char hdr[18];
+    unsigned char* imageData;
+    unsigned char* dst;
+    unsigned char* alpha = 0;
+    short offset;
+    short colorType;
+    short imageType;
+    int paletteLength;
+    short bpp;
+    short orientation;
+    int width;
+    int height;
+    unsigned long imageSize;
+    short pixelSize;
+
+    // Seek from the beginning of the stream.
+    // We need to do this because DoCanRead() reads the header also,
+    // that means the stream position is a 19! That would cause problems
+    // when we start to load the file.
+
+    stream.SeekI(0, wxFromStart);
+
+    // Read in the first 18 bytes of the file.
+    // The first 18 bytes are the TGA header.
+
+    stream.Read(hdr, 18);
+
+    offset = hdr[HDR_OFFSET] + 18;
+    colorType = hdr[HDR_COLORTYPE];
+    imageType = hdr[HDR_IMAGETYPE];
+    paletteLength = hdr[HDR_PALETTELENGTH] + 256 * hdr[HDR_PALETTELENGTH + 1];
+    width = (hdr[HDR_WIDTH] + 256 * hdr[HDR_WIDTH + 1]) -
+            (hdr[HDR_XORIGIN] + 256 * hdr[HDR_XORIGIN + 1]);
+    height = (hdr[HDR_HEIGHT] + 256 * hdr[HDR_HEIGHT + 1]) -
+             (hdr[HDR_YORIGIN] + 256 * hdr[HDR_YORIGIN + 1]);
+    bpp = hdr[HDR_BPP];
+    orientation = hdr[HDR_ORIENTATION] & 0x20;
+
+    image->Create(width, height);
+
+    if (!image->Ok())
+    {
+        return wxTGA_MEMERR;
+    }
+
+    pixelSize = bpp / 8;
+
+    imageSize = width * height * pixelSize;
+
+    imageData = (unsigned char* )malloc(imageSize);
+
+    if (!imageData)
+    {
+        return wxTGA_MEMERR;
+    }
+
+    dst = image->GetData();
+
+    if (bpp == 16 || bpp == 32)
+    {
+        image->SetAlpha();
+
+        alpha = image->GetAlpha();
+    }
+
+    // Seek from the offset we got from the TGA header.
+
+    stream.SeekI(offset, wxFromStart);
+
+    // Load a palette if we have one.
+
+    if (colorType == wxTGA_MAPPED)
+    {
+        unsigned char buf[3];
+
+        unsigned char* r = new unsigned char[paletteLength];
+        unsigned char* g = new unsigned char[paletteLength];
+        unsigned char* b = new unsigned char[paletteLength];
+
+        for (int i = 0; i < paletteLength; i++)
+        {
+            stream.Read(buf, 3);
+
+            r[i] = buf[2];
+            g[i] = buf[1];
+            b[i] = buf[0];
+        }
+
+        #if wxUSE_PALETTE
+
+        // Set the palette of the image.
+
+        image->SetPalette(wxPalette(paletteLength, r, g, b));
+
+        #endif // wxUSE_PALETTE
+
+        delete[] r;
+        delete[] g;
+        delete[] b;
+    }
+
+    // Handle the various TGA formats we support.
+
+    switch (imageType)
+    {
+        // Raw indexed.
+
+        case 1:
+        {
+            const wxPalette& palette = image->GetPalette();
+            unsigned char r;
+            unsigned char g;
+            unsigned char b;
+
+            // No compression read the data directly to imageData.
+
+            stream.Read(imageData, imageSize);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                // 8 bpp.
+
+                case 8:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        palette.GetRGB(imageData[index], &r, &g, &b);
+
+                        *(dst++) = r;
+                        *(dst++) = g;
+                        *(dst++) = b;
+                    }
+                }
+                break;
+
+                // 16 bpp.
+
+                case 16:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        palette.GetRGB(imageData[index], &r, &g, &b);
+
+                        *(dst++) = r;
+                        *(dst++) = g;
+                        *(dst++) = b;
+                        *(alpha++) = (imageData[index + 1] & 0x80) ? 0 : 255;
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        // Raw RGB.
+
+        case 2:
+        {
+            // No compression read the data directly to imageData.
+
+            stream.Read(imageData, imageSize);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                //16 bpp.
+
+                case 16:
+                {
+                    unsigned char temp;
+
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        temp = (imageData[index + 1] & 0x7c) << 1;
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        temp = ((imageData[index + 1] & 0x03) << 6) | ((imageData[index] & 0xe0) >> 2);
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        temp = (imageData[index] & 0x1f) << 3;
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        *(alpha++) = (imageData[index + 1] & 0x80) ? 0 : 255;
+                    }
+                }
+                break;
+
+                // 24 bpp.
+
+                case 24:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index + 2];
+                        *(dst++) = imageData[index + 1];
+                        *(dst++) = imageData[index];
+                    }
+                }
+                break;
+
+                // 32 bpp.
+
+                case 32:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index + 2];
+                        *(dst++) = imageData[index + 1];
+                        *(dst++) = imageData[index];
+                        *(alpha++) = imageData[index + 3];
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        // Raw grayscale.
+
+        case 3:
+        {
+            // No compression read the data directly to imageData.
+
+            stream.Read(imageData, imageSize);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                // 8 bpp.
+
+                case 8:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                    }
+                }
+                break;
+
+                // 16 bpp.
+
+                case 16:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(alpha++) = imageData[index + 1];
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        // RLE indexed.
+
+        case 9:
+        {
+            const wxPalette& palette = image->GetPalette();
+            unsigned char r;
+            unsigned char g;
+            unsigned char b;
+
+            // Decode the RLE data.
+
+            DecodeRLE(imageData, imageSize, pixelSize, stream);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                // 8 bpp.
+
+                case 8:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        palette.GetRGB(imageData[index], &r, &g, &b);
+
+                        *(dst++) = r;
+                        *(dst++) = g;
+                        *(dst++) = b;
+                    }
+                }
+                break;
+
+                // 16 bpp.
+
+                case 16:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        palette.GetRGB(imageData[index], &r, &g, &b);
+
+                        *(dst++) = r;
+                        *(dst++) = g;
+                        *(dst++) = b;
+                        *(alpha++) = (imageData[index + 1] & 0x80) ? 0 : 255;
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        // RLE RGB.
+
+        case 10:
+        {
+            // Decode the RLE data.
+
+            DecodeRLE(imageData, imageSize, pixelSize, stream);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                //16 bpp.
+
+                case 16:
+                {
+                    unsigned char temp;
+
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        temp = (imageData[index + 1] & 0x7c) << 1;
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        temp = ((imageData[index + 1] & 0x03) << 6) | ((imageData[index] & 0xe0) >> 2);
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        temp = (imageData[index] & 0x1f) << 3;
+                        temp |= temp >> 5;
+                        *(dst++) = temp;
+
+                        *(alpha++) = (imageData[index + 1] & 0x80) ? 0 : 255;
+                    }
+                }
+                break;
+
+                // 24 bpp.
+
+                case 24:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index + 2];
+                        *(dst++) = imageData[index + 1];
+                        *(dst++) = imageData[index];
+                    }
+                }
+                break;
+
+                // 32 bpp.
+
+                case 32:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index + 2];
+                        *(dst++) = imageData[index + 1];
+                        *(dst++) = imageData[index];
+                        *(alpha++) = imageData[index + 3];
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        // RLE grayscale.
+
+        case 11:
+        {
+            // Decode the RLE data.
+
+            DecodeRLE(imageData, imageSize, pixelSize, stream);
+
+            // If orientation == 0, then the image is stored upside down.
+            // We need to store it right side up.
+
+            if (orientation == 0)
+            {
+                FlipTGA(imageData, width, height, pixelSize);
+            }
+
+            // Handle the different pixel depths.
+
+            switch (bpp)
+            {
+                // 8 bpp.
+
+                case 8:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                    }
+                }
+                break;
+
+                // 16 bpp.
+
+                case 16:
+                {
+                    for (unsigned long index = 0; index < imageSize; index += pixelSize)
+                    {
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(dst++) = imageData[index];
+                        *(alpha++) = imageData[index + 1];
+                    }
+                }
+                break;
+
+                default:
+                    return wxTGA_INVFORMAT;
+            }
+        }
+        break;
+
+        default:
+            return wxTGA_INVFORMAT;
+    }
+
+    free(imageData);
+
+    return wxTGA_OK;
+}
+
+int SaveTGA(wxImage* WXUNUSED(image), wxOutputStream& WXUNUSED(stream))
+{
+    wxLogError(wxT("TGA: Saving not supported at this time."));
+
+    return wxTGA_OK;
+}
+
+bool wxTGAHandler::LoadFile(wxImage* image, wxInputStream& stream, bool verbose, int WXUNUSED(index))
+{
+    int error;
+
+    if (!CanRead(stream))
+    {
+        if (verbose)
+        {
+            wxLogError(wxT("TGA: this is not a TGA file."));
+        }
+
+        return false;
+    }
+
+    image->Destroy();
+
+    error = ReadTGA(image, stream);
+
+    if (error != wxTGA_OK)
+    {
+        if (verbose)
+        {
+            switch (error)
+            {
+                case wxTGA_INVFORMAT:
+                {
+                    wxLogError(wxT("TGA: image format unsupported."));
+                }
+                break;
+
+                case wxTGA_MEMERR:
+                {
+                    wxLogError(wxT("TGA: couldn't allocate memory."));
+                }
+                break;
+
+                default:
+                    wxLogError(wxT("TGA: unknown error!"));
+            }
+        }
+
+        image->Destroy();
+
+        return false;
+    }
+
+    return true;
+}
+
+bool wxTGAHandler::SaveFile(wxImage* image, wxOutputStream& stream, bool verbose)
+{
+    int error;
+
+    error = SaveTGA(image, stream);
+
+    if (error != wxTGA_OK)
+    {
+        if (verbose)
+        {
+            switch (error)
+            {
+                case wxTGA_INVFORMAT:
+                {
+                    wxLogError(wxT("TGA: invalid image."));
+                }
+                break;
+
+                case wxTGA_MEMERR:
+                {
+                    wxLogError(wxT("TGA: couldn't allocate memory."));
+                }
+                break;
+
+                default:
+                    wxLogError(wxT("TGA: unknown error!"));
+            }
+        }
+
+        return false;
+    }
+
+    return true;
+}
+
+bool wxTGAHandler::DoCanRead(wxInputStream& stream)
+{
+    unsigned char hdr[18];
+    short colorType;
+    short imageType;
+    short bpp;
+
+    // Read in the first 18 bytes of the file.
+    // The first 18 bytes compose the TGA header.
+
+    stream.Read(hdr, 18);
+
+    colorType = hdr[HDR_COLORTYPE];
+    imageType = hdr[HDR_IMAGETYPE];
+    bpp= hdr[HDR_BPP];
+
+    // Check wether we can read the file or not.
+
+    if (colorType != wxTGA_UNMAPPED && colorType != wxTGA_MAPPED)
+    {
+        return false;
+    }
+
+    if (imageType == 0 || imageType == 32 || imageType == 33)
+    {
+        return false;
+    }
+
+    if (bpp != 8 && bpp != 16 && bpp != 24 && bpp != 32)
+    {
+        return false;
+    }
+
+    return true;
+}
+
+#endif // wxUSE_STREAMS
+
+#endif // wxUSE_IMAGE && wxUSE_TGA



 	  	 

Index: docs/changes.txt
===================================================================
--- docs/changes.txt	(révision 72509)
+++ docs/changes.txt	(copie de travail)
@@ -553,6 +553,7 @@
 - Restore the original wxGrid col/row size when unhiding it (Michael Richards).
 - Fix text origin and extent computations in wxSVGFileDC (Neil Chittenden).
 - Show tooltips for the too long items in generic wxTreeCtrl (Steven Houchins).
+- Add full client data and items management to wxRibbonButtonBar (Laurent Poujoulat)
 
 wxGTK:
 
Index: include/wx/ribbon/buttonbar.h
===================================================================
--- include/wx/ribbon/buttonbar.h	(révision 72509)
+++ include/wx/ribbon/buttonbar.h	(copie de travail)
@@ -81,8 +81,7 @@
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
-                const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                const wxString& help_string = wxEmptyString);
 
     virtual wxRibbonButtonBarButtonBase* InsertButton(
                 size_t pos,
@@ -122,16 +121,27 @@
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
-                const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                const wxString& help_string = wxEmptyString);
 
+    void SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data);
+    wxClientData* GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const;
+    void SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data);
+    void* GetItemClientData(const wxRibbonButtonBarButtonBase* item) const;
+
     virtual size_t GetButtonCount() const;
+    virtual wxRibbonButtonBarButtonBase *GetItem(size_t n) const;
+    virtual wxRibbonButtonBarButtonBase *GetItemById(int id) const;
+    virtual int GetItemId(wxRibbonButtonBarButtonBase *) const;
+    
 
     virtual bool Realize();
     virtual void ClearButtons();
     virtual bool DeleteButton(int button_id);
     virtual void EnableButton(int button_id, bool enable = true);
     virtual void ToggleButton(int button_id, bool checked);
+    
+    virtual wxRibbonButtonBarButtonBase *GetActiveItem() const;
+    virtual wxRibbonButtonBarButtonBase *GetHoveredItem() const;
 
     virtual void SetArtProvider(wxRibbonArtProvider* art);
     virtual bool IsSizingContinuous() const;
@@ -188,25 +198,30 @@
 public:
     wxRibbonButtonBarEvent(wxEventType command_type = wxEVT_NULL,
                        int win_id = 0,
-                       wxRibbonButtonBar* bar = NULL)
+                       wxRibbonButtonBar* bar = NULL,
+                       wxRibbonButtonBarButtonBase* button = NULL)
         : wxCommandEvent(command_type, win_id)
-        , m_bar(bar)
+        , m_bar(bar), m_button(button)
     {
     }
 #ifndef SWIG
     wxRibbonButtonBarEvent(const wxRibbonButtonBarEvent& e) : wxCommandEvent(e)
     {
         m_bar = e.m_bar;
+        m_button = e.m_button;
     }
 #endif
     wxEvent *Clone() const { return new wxRibbonButtonBarEvent(*this); }
 
     wxRibbonButtonBar* GetBar() {return m_bar;}
+    wxRibbonButtonBarButtonBase *GetButton() { return m_button; }
     void SetBar(wxRibbonButtonBar* bar) {m_bar = bar;}
+    void SetButton(wxRibbonButtonBarButtonBase* button) { m_button = button; }
     bool PopupMenu(wxMenu* menu);
 
 protected:
     wxRibbonButtonBar* m_bar;
+    wxRibbonButtonBarButtonBase *m_button;
 
 #ifndef SWIG
 private:
Index: interface/wx/ribbon/buttonbar.h
===================================================================
--- interface/wx/ribbon/buttonbar.h	(révision 72509)
+++ interface/wx/ribbon/buttonbar.h	(copie de travail)
@@ -230,9 +230,7 @@
         @param kind
             The kind of button to add.
         @param help_string
-            The UI help string to associate with the new button.
-        @param client_data
-            Client data to associate with the new button.
+            The UI help string to associate with the new button.       
         
         @return An opaque pointer which can be used only with other button bar
             methods.
@@ -240,6 +238,7 @@
         @see AddDropdownButton()
         @see AddHybridButton()
         @see AddToggleButton()
+
     */
     virtual wxRibbonButtonBarButtonBase* AddButton(
                 int button_id,
@@ -249,9 +248,9 @@
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
-                const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
-
+                const wxString& help_string = wxEmptyString);              
+                
+                
     /**
         Inserts a button to the button bar (simple version) at the given position.
 
@@ -345,8 +344,6 @@
             The kind of button to add.
         @param help_string
             The UI help string to associate with the new button.
-        @param client_data
-            Client data to associate with the new button.
 
         @return An opaque pointer which can be used only with other button bar
             methods.
@@ -367,16 +364,70 @@
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
-                const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                const wxString& help_string = wxEmptyString);
 
+                           
     /**
         Returns the number of buttons in this button bar.
 
         @since 2.9.4
     */
     virtual size_t GetButtonCount() const;
+    
+    /**
+        Set the client object associated with a button. The button bar
+        owns the given object and takes care of its deletion. 
+        Please, note that you cannot use both client object and client data.
+        
+        @since 2.9.5
+    */    
+    void SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data);
+    
+    /**
+        Get the client object associated with a button. 
+        
+        @since 2.9.5
+    */    
+    wxClientData* GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const;
+    
+    /**
+        Set the client data associated with a button.
+        Please, note that you cannot use both client object and client data.
+        
+        @since 2.9.5
+    */
+    void SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data);
+    
+    /**
+        Get the client data associated with a button.
+        
+        @since 2.9.5
+    */
+    void* GetItemClientData(const wxRibbonButtonBarButtonBase* item) const;
 
+    /** 
+        Returns the nth button of the bar
+        
+        @see GetButtonCount()
+        
+        @since 2.9.5
+    */
+    virtual wxRibbonButtonBarButtonBase *GetItem(size_t n) const;
+    
+    /** 
+        Returns the first button having a given id or NULL if none matches
+                
+        @since 2.9.5
+    */   
+    virtual wxRibbonButtonBarButtonBase *GetItemById(int id) const;
+    
+    /** 
+        Returns the id of a button
+                
+        @since 2.9.5
+    */      
+    virtual int GetItemId(wxRibbonButtonBarButtonBase *) const;    
+    
     /**
         Calculate button layouts and positions.
         
@@ -420,6 +471,23 @@
             @false to set it to the untoggled/unpressed/unchecked state.
     */
     virtual void ToggleButton(int button_id, bool checked);
+
+    /**
+        Returns the active item of the button bar or NULL if there is none.
+        The active button is the one being clicked.
+        
+        @since 2.9.5
+    */    
+    virtual wxRibbonButtonBarButtonBase *GetActiveItem() const;
+    
+    /**
+        Returns the hovered item of the button bar or NULL if there is none.
+        The hovered button is the one the mouse is over.
+        
+        @since 2.9.5
+    */      
+    virtual wxRibbonButtonBarButtonBase *GetHoveredItem() const;    
+    
 };
 
 /**
@@ -444,19 +512,30 @@
     */
     wxRibbonButtonBarEvent(wxEventType command_type = wxEVT_NULL,
                        int win_id = 0,
-                       wxRibbonButtonBar* bar = NULL);
+                       wxRibbonButtonBar* bar = NULL,
+                       wxRibbonButtonBarButtonBase* button = NULL);
 
     /**
         Returns the bar which contains the button which the event relates to.
     */
     wxRibbonButtonBar* GetBar();
-        
+                
     /**
         Sets the button bar relating to this event.
     */
     void SetBar(wxRibbonButtonBar* bar);
     
     /**
+        Returns the button which the event relates to.
+    */
+    wxRibbonButtonBarButtonBase* GetButton();
+                
+    /**
+        Sets the button relating to this event.
+    */
+    void SetButton(wxRibbonButtonBarButtonBase* bar);   
+    
+    /**
         Display a popup menu as a result of this (dropdown clicked) event.
     */
     bool PopupMenu(wxMenu* menu);
Index: src/ribbon/buttonbar.cpp
===================================================================
--- src/ribbon/buttonbar.cpp	(révision 72509)
+++ src/ribbon/buttonbar.cpp	(copie de travail)
@@ -117,7 +117,7 @@
     wxBitmap bitmap_small;
     wxBitmap bitmap_small_disabled;
     wxRibbonButtonBarButtonSizeInfo sizes[3];
-    wxObject* client_data;
+    wxClientDataContainer client_data;
     int id;
     wxRibbonButtonKind kind;
     long state;
@@ -278,14 +278,13 @@
                 const wxBitmap& bitmap_disabled,
                 const wxBitmap& bitmap_small_disabled,
                 wxRibbonButtonKind kind,
-                const wxString& help_string,
-                wxObject* client_data)
+                const wxString& help_string)
 {
     return InsertButton(GetButtonCount(), button_id, label, bitmap,
-        bitmap_small, bitmap_disabled,bitmap_small_disabled, kind, help_string,
-        client_data);
+        bitmap_small, bitmap_disabled,bitmap_small_disabled, kind, help_string);
 }
 
+
 wxRibbonButtonBarButtonBase* wxRibbonButtonBar::InsertButton(
                 size_t pos,
                 int button_id,
@@ -295,8 +294,7 @@
                 const wxBitmap& bitmap_disabled,
                 const wxBitmap& bitmap_small_disabled,
                 wxRibbonButtonKind kind,
-                const wxString& help_string,
-                wxObject* client_data)
+                const wxString& help_string)
 {
     wxASSERT(bitmap.IsOk() || bitmap_small.IsOk());
     if(m_buttons.IsEmpty())
@@ -322,6 +320,9 @@
     }
 
     wxRibbonButtonBarButtonBase* base = new wxRibbonButtonBarButtonBase;
+    if (base == NULL)
+        return NULL;
+    
     base->id = button_id;
     base->label = label;
     base->bitmap_large = bitmap;
@@ -358,7 +359,6 @@
     }
     base->kind = kind;
     base->help_string = help_string;
-    base->client_data = client_data;
     base->state = 0;
 
     wxClientDC temp_dc(this);
@@ -371,6 +371,32 @@
     return base;
 }
 
+ 
+void wxRibbonButtonBar::SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data)
+{
+    wxCHECK_RET(item != NULL, "wxRibbonButtonBar item should not be NULL");
+    item->client_data.SetClientObject(data);
+}
+ 
+ wxClientData* wxRibbonButtonBar::GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const
+ {
+    wxCHECK_MSG(item != NULL, NULL, "wxRibbonButtonBar item should not be NULL");
+    return item->client_data.GetClientObject();
+ }
+ 
+ void wxRibbonButtonBar::SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data)
+ {
+    wxCHECK_RET(item != NULL, "wxRibbonButtonBar item should not be NULL");
+    item->client_data.SetClientData(data);
+ }
+ 
+void* wxRibbonButtonBar::GetItemClientData(const wxRibbonButtonBarButtonBase* item) const
+{
+    wxCHECK_MSG(item != NULL, NULL, "wxRibbonButtonBar item should not be NULL");
+    return item->client_data.GetClientData();
+}
+
+
 wxRibbonButtonBarButtonBase* wxRibbonButtonBar::InsertButton(
                 size_t pos,
                 int button_id,
@@ -1098,10 +1124,10 @@
                 }
                 notification.SetEventObject(this);
                 notification.SetBar(this);
+                notification.SetButton(m_active_button->base);
                 m_lock_active_state = true;
                 ProcessWindowEvent(notification);
                 m_lock_active_state = false;
-
                 wxStaticCast(m_parent, wxRibbonPanel)->HideIfExpanded();
             } while(false);
             if(m_active_button) // may have been NULLed by event handler
@@ -1140,6 +1166,48 @@
         Refresh(false);
 }
 
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetActiveItem() const
+{
+    return m_active_button == NULL ? NULL : m_active_button->base;
+}
+
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetHoveredItem() const
+{
+    return m_hovered_button == NULL ? NULL : m_hovered_button->base;
+}
+
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetItem(size_t n) const
+{
+    wxCHECK_MSG(n >= 0 && n < m_buttons.GetCount(), NULL, "wxRibbonButtonBar item's index is out of bound");
+    return m_buttons.Item(n);
+}
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetItemById(int button_id) const
+{
+    size_t count = m_buttons.GetCount();
+    size_t i;
+    for(i = 0; i < count; ++i)
+    {
+        wxRibbonButtonBarButtonBase* button = m_buttons.Item(i);
+        if(button->id == button_id)
+            return button;
+    }
+    
+    return NULL;
+    
+}
+
+int wxRibbonButtonBar::GetItemId(wxRibbonButtonBarButtonBase *item) const
+{
+    wxCHECK_MSG(item != NULL, wxNOT_FOUND, "wxRibbonButtonBar item should not be NULL");
+    return item->id;
+}
+
+
+
 bool wxRibbonButtonBarEvent::PopupMenu(wxMenu* menu)
 {
     wxPoint pos = wxDefaultPosition;

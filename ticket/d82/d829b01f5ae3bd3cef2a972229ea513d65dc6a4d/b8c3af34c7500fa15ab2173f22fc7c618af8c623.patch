Index: include/wx/ribbon/buttonbar.h
===================================================================
--- include/wx/ribbon/buttonbar.h	(révision 72502)
+++ include/wx/ribbon/buttonbar.h	(copie de travail)
@@ -77,12 +77,23 @@
                 int button_id,
                 const wxString& label,
                 const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
+                const wxString& help_string,
+                void* client_data);
+
+    virtual wxRibbonButtonBarButtonBase* AddButton(
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
                 const wxBitmap& bitmap_small = wxNullBitmap,
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
                 const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                wxClientData* client_data = NULL);
 
     virtual wxRibbonButtonBarButtonBase* InsertButton(
                 size_t pos,
@@ -118,20 +129,44 @@
                 int button_id,
                 const wxString& label,
                 const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
+                const wxString& help_string,
+                void* client_data);
+
+    virtual wxRibbonButtonBarButtonBase*InsertButton(
+                size_t pos,
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
                 const wxBitmap& bitmap_small = wxNullBitmap,
                 const wxBitmap& bitmap_disabled = wxNullBitmap,
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
                 const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                wxClientData* client_data = NULL);
 
+    void SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data);
+    wxClientData* GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const;
+    void SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data);
+    void* GetItemClientData(const wxRibbonButtonBarButtonBase* item) const;
+
     virtual size_t GetButtonCount() const;
+    virtual wxRibbonButtonBarButtonBase *GetItem(size_t n) const;
+    virtual wxRibbonButtonBarButtonBase *GetItemById(int id) const;
+    virtual int GetItemId(wxRibbonButtonBarButtonBase *) const;
+    
 
     virtual bool Realize();
     virtual void ClearButtons();
     virtual bool DeleteButton(int button_id);
     virtual void EnableButton(int button_id, bool enable = true);
     virtual void ToggleButton(int button_id, bool checked);
+    
+    virtual wxRibbonButtonBarButtonBase *GetActiveItem() const;
+    virtual wxRibbonButtonBarButtonBase *GetHoveredItem() const;
 
     virtual void SetArtProvider(wxRibbonArtProvider* art);
     virtual bool IsSizingContinuous() const;
@@ -188,25 +223,30 @@
 public:
     wxRibbonButtonBarEvent(wxEventType command_type = wxEVT_NULL,
                        int win_id = 0,
-                       wxRibbonButtonBar* bar = NULL)
+                       wxRibbonButtonBar* bar = NULL,
+                       wxRibbonButtonBarButtonBase* button = NULL)
         : wxCommandEvent(command_type, win_id)
-        , m_bar(bar)
+        , m_bar(bar), m_button(button)
     {
     }
 #ifndef SWIG
     wxRibbonButtonBarEvent(const wxRibbonButtonBarEvent& e) : wxCommandEvent(e)
     {
         m_bar = e.m_bar;
+        m_button = e.m_button;
     }
 #endif
     wxEvent *Clone() const { return new wxRibbonButtonBarEvent(*this); }
 
     wxRibbonButtonBar* GetBar() {return m_bar;}
+    wxRibbonButtonBarButtonBase *GetButton() { return m_button; }
     void SetBar(wxRibbonButtonBar* bar) {m_bar = bar;}
+    void SetButton(wxRibbonButtonBarButtonBase* button) { m_button = button; }
     bool PopupMenu(wxMenu* menu);
 
 protected:
     wxRibbonButtonBar* m_bar;
+    wxRibbonButtonBarButtonBase *m_button;
 
 #ifndef SWIG
 private:
Index: interface/wx/ribbon/buttonbar.h
===================================================================
--- interface/wx/ribbon/buttonbar.h	(révision 72502)
+++ interface/wx/ribbon/buttonbar.h	(copie de travail)
@@ -232,7 +232,10 @@
         @param help_string
             The UI help string to associate with the new button.
         @param client_data
-            Client data to associate with the new button.
+            An object which contains data to associate with the button. The button
+            takes ownership of this pointer, and will delete it when the button
+            client data is changed to something else, or when the button is
+            destroyed.
         
         @return An opaque pointer which can be used only with other button bar
             methods.
@@ -240,6 +243,7 @@
         @see AddDropdownButton()
         @see AddHybridButton()
         @see AddToggleButton()
+        @see GetItemClientObject()
     */
     virtual wxRibbonButtonBarButtonBase* AddButton(
                 int button_id,
@@ -250,9 +254,59 @@
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
                 const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                wxClientData* client_data = NULL);
 
     /**
+        Add a button to the button bar.
+        
+        @param button_id
+            ID of the new button (used for event callbacks).
+        @param label
+            Label of the new button.
+        @param bitmap
+            Large bitmap of the new button. Must be the same size as all other
+            large bitmaps used on the button bar.
+        @param bitmap_small
+            Small bitmap of the new button. If left as null, then a small
+            bitmap will be automatically generated. Must be the same size as
+            all other small bitmaps used on the button bar.
+        @param bitmap_disabled
+            Large bitmap of the new button when it is disabled. If left as
+            null, then a bitmap will be automatically generated from @a bitmap.
+        @param bitmap_small_disabled
+            Small bitmap of the new button when it is disabled. If left as
+            null, then a bitmap will be automatically generated from @a
+            bitmap_small.
+        @param kind
+            The kind of button to add.
+        @param help_string
+            The UI help string to associate with the new button.
+        @param client_data
+            An opaque pointer to associate with the item.
+        
+        @return An opaque pointer which can be used only with other button bar
+            methods.
+            
+        @see AddDropdownButton()
+        @see AddHybridButton()
+        @see AddToggleButton()
+        @see GetItemClientData()
+        
+        @since 2.9.5
+    */
+    virtual wxRibbonButtonBarButtonBase* AddButton(
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
+                const wxString& help_string,
+                void* client_data);                
+                
+                
+    /**
         Inserts a button to the button bar (simple version) at the given position.
 
         @see AddButton()
@@ -346,7 +400,10 @@
         @param help_string
             The UI help string to associate with the new button.
         @param client_data
-            Client data to associate with the new button.
+            An object which contains data to associate with the button. The button
+            takes ownership of this pointer, and will delete it when the button
+            client data is changed to something else, or when the button is
+            destroyed.
 
         @return An opaque pointer which can be used only with other button bar
             methods.
@@ -355,8 +412,9 @@
         @see InsertHybridButton()
         @see InsertToggleButton()
         @see AddButton()
+        @see GetItemClientObject()
 
-        @since 2.9.4
+        @since 2.9.5
     */
     virtual wxRibbonButtonBarButtonBase* InsertButton(
                 size_t pos,
@@ -368,15 +426,121 @@
                 const wxBitmap& bitmap_small_disabled = wxNullBitmap,
                 wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL,
                 const wxString& help_string = wxEmptyString,
-                wxObject* client_data = NULL);
+                wxClientData* client_data = NULL);
 
     /**
+        Insert a button to the button bar at the given position.
+
+        @param pos
+            Position of the new button in the button bar.
+        @param button_id
+            ID of the new button (used for event callbacks).
+        @param label
+            Label of the new button.
+        @param bitmap
+            Large bitmap of the new button. Must be the same size as all other
+            large bitmaps used on the button bar.
+        @param bitmap_small
+            Small bitmap of the new button. If left as null, then a small
+            bitmap will be automatically generated. Must be the same size as
+            all other small bitmaps used on the button bar.
+        @param bitmap_disabled
+            Large bitmap of the new button when it is disabled. If left as
+            null, then a bitmap will be automatically generated from @a bitmap.
+        @param bitmap_small_disabled
+            Small bitmap of the new button when it is disabled. If left as
+            null, then a bitmap will be automatically generated from @a
+            bitmap_small.
+        @param kind
+            The kind of button to add.
+        @param help_string
+            The UI help string to associate with the new button.
+        @param client_data
+            An opaque pointer to associate with the button.
+
+        @return An opaque pointer which can be used only with other button bar
+            methods.
+
+        @see InsertDropdownButton()
+        @see InsertHybridButton()
+        @see InsertToggleButton()
+        @see AddButton()
+        @see GetItemClientObject()
+
+        @since 2.9.5
+    */
+    virtual wxRibbonButtonBarButtonBase* InsertButton(
+                size_t pos,
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
+                const wxString& help_string,
+                wxClientData* client_data);                
+                
+                
+    /**
         Returns the number of buttons in this button bar.
 
         @since 2.9.4
     */
     virtual size_t GetButtonCount() const;
+    
+    /**
+        Set the client object associated with a button. The button bar
+        owns the given object and takes care of its deletion.
+        
+        @since 2.9.5
+    */    
+    void SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data);
+    
+    /**
+        Get the client object associated with a button.
+        
+        @since 2.9.5
+    */    
+    wxClientData* GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const;
+    
+    /**
+        Set the client data associated with a button.
+        
+        @since 2.9.5
+    */
+    void SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data);
+    
+    /**
+        Get the client data associated with a button.
+        
+        @since 2.9.5
+    */
+    void* GetItemClientData(const wxRibbonButtonBarButtonBase* item) const;
 
+    /** 
+        Returns the nth button of the bar
+        
+        @see GetButtonCount()
+        
+        @since 2.9.5
+    */
+    virtual wxRibbonButtonBarButtonBase *GetItem(size_t n) const;
+    
+    /** 
+        Returns the first button having a given id or NULL if none matches
+                
+        @since 2.9.5
+    */   
+    virtual wxRibbonButtonBarButtonBase *GetItemById(int id) const;
+    
+    /** 
+        Returns the id of a button
+                
+        @since 2.9.5
+    */      
+    virtual int GetItemId(wxRibbonButtonBarButtonBase *) const;    
+    
     /**
         Calculate button layouts and positions.
         
@@ -420,6 +584,23 @@
             @false to set it to the untoggled/unpressed/unchecked state.
     */
     virtual void ToggleButton(int button_id, bool checked);
+
+    /**
+        Returns the active item of the button bar or NULL if there is none.
+        The active button is the one being clicked.
+        
+        @since 2.9.5
+    */    
+    virtual wxRibbonButtonBarButtonBase *GetActiveItem() const;
+    
+    /**
+        Returns the hovered item of the button bar or NULL if there is none.
+        The hovered button is the one the mouse is over.
+        
+        @since 2.9.5
+    */      
+    virtual wxRibbonButtonBarButtonBase *GetHoveredItem() const;    
+    
 };
 
 /**
@@ -444,19 +625,30 @@
     */
     wxRibbonButtonBarEvent(wxEventType command_type = wxEVT_NULL,
                        int win_id = 0,
-                       wxRibbonButtonBar* bar = NULL);
+                       wxRibbonButtonBar* bar = NULL,
+                       wxRibbonButtonBarButtonBase* button = NULL);
 
     /**
         Returns the bar which contains the button which the event relates to.
     */
     wxRibbonButtonBar* GetBar();
-        
+                
     /**
         Sets the button bar relating to this event.
     */
     void SetBar(wxRibbonButtonBar* bar);
     
     /**
+        Returns the button which the event relates to.
+    */
+    wxRibbonButtonBarButtonBase* GetButton();
+                
+    /**
+        Sets the button relating to this event.
+    */
+    void SetButton(wxRibbonButtonBarButtonBase* bar);   
+    
+    /**
         Display a popup menu as a result of this (dropdown clicked) event.
     */
     bool PopupMenu(wxMenu* menu);
Index: src/ribbon/buttonbar.cpp
===================================================================
--- src/ribbon/buttonbar.cpp	(révision 72502)
+++ src/ribbon/buttonbar.cpp	(copie de travail)
@@ -117,7 +117,7 @@
     wxBitmap bitmap_small;
     wxBitmap bitmap_small_disabled;
     wxRibbonButtonBarButtonSizeInfo sizes[3];
-    wxObject* client_data;
+    wxClientDataContainer client_data;
     int id;
     wxRibbonButtonKind kind;
     long state;
@@ -279,13 +279,31 @@
                 const wxBitmap& bitmap_small_disabled,
                 wxRibbonButtonKind kind,
                 const wxString& help_string,
-                wxObject* client_data)
+                wxClientData* client_data)
 {
     return InsertButton(GetButtonCount(), button_id, label, bitmap,
         bitmap_small, bitmap_disabled,bitmap_small_disabled, kind, help_string,
         client_data);
 }
 
+wxRibbonButtonBarButtonBase* wxRibbonButtonBar::AddButton(
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
+                const wxString& help_string,
+                void* client_data)
+{
+    return InsertButton(GetButtonCount(), button_id, label, bitmap,
+        bitmap_small, bitmap_disabled,bitmap_small_disabled, kind, help_string,
+        client_data);
+}
+
+
+
 wxRibbonButtonBarButtonBase* wxRibbonButtonBar::InsertButton(
                 size_t pos,
                 int button_id,
@@ -296,7 +314,7 @@
                 const wxBitmap& bitmap_small_disabled,
                 wxRibbonButtonKind kind,
                 const wxString& help_string,
-                wxObject* client_data)
+                wxClientData* client_data)
 {
     wxASSERT(bitmap.IsOk() || bitmap_small.IsOk());
     if(m_buttons.IsEmpty())
@@ -322,6 +340,9 @@
     }
 
     wxRibbonButtonBarButtonBase* base = new wxRibbonButtonBarButtonBase;
+    if (base == NULL)
+        return NULL;
+    
     base->id = button_id;
     base->label = label;
     base->bitmap_large = bitmap;
@@ -358,7 +379,7 @@
     }
     base->kind = kind;
     base->help_string = help_string;
-    base->client_data = client_data;
+    base->client_data.SetClientObject(client_data);
     base->state = 0;
 
     wxClientDC temp_dc(this);
@@ -376,7 +397,56 @@
                 int button_id,
                 const wxString& label,
                 const wxBitmap& bitmap,
+                const wxBitmap& bitmap_small,
+                const wxBitmap& bitmap_disabled,
+                const wxBitmap& bitmap_small_disabled,
+                wxRibbonButtonKind kind,
                 const wxString& help_string,
+                void* client_data)
+{
+    wxRibbonButtonBarButtonBase *item = InsertButton(pos, button_id, label, bitmap, bitmap_small, bitmap_disabled, bitmap_small_disabled,
+                                                       kind, help_string, (wxClientData *)NULL);
+                                                       
+    if (item != NULL)
+        SetItemClientData(item, client_data);
+     
+    return item;
+}
+ 
+ 
+void wxRibbonButtonBar::SetItemClientObject(wxRibbonButtonBarButtonBase* item, wxClientData* data)
+{
+    wxASSERT(item != NULL);
+    if (item != NULL)
+        item->client_data.SetClientObject(data);
+}
+ 
+ wxClientData* wxRibbonButtonBar::GetItemClientObject(const wxRibbonButtonBarButtonBase* item) const
+ {
+    wxASSERT(item != NULL);
+    return item == NULL ? NULL : item->client_data.GetClientObject();
+ }
+ 
+ void wxRibbonButtonBar::SetItemClientData(wxRibbonButtonBarButtonBase* item, void* data)
+ {
+    wxASSERT(item != NULL);
+    if (item != NULL)
+       item->client_data.SetClientData(data);
+ }
+ 
+void* wxRibbonButtonBar::GetItemClientData(const wxRibbonButtonBarButtonBase* item) const
+{
+    wxASSERT(item != NULL);
+    return item == NULL ? NULL : item->client_data.GetClientData();
+}
+
+
+wxRibbonButtonBarButtonBase* wxRibbonButtonBar::InsertButton(
+                size_t pos,
+                int button_id,
+                const wxString& label,
+                const wxBitmap& bitmap,
+                const wxString& help_string,
                 wxRibbonButtonKind kind)
 {
     return InsertButton(pos, button_id, label, bitmap, wxNullBitmap,
@@ -1098,6 +1168,7 @@
                 }
                 notification.SetEventObject(this);
                 notification.SetBar(this);
+                notification.SetButton(m_active_button->base);
                 m_lock_active_state = true;
                 ProcessWindowEvent(notification);
                 m_lock_active_state = false;
@@ -1140,6 +1211,55 @@
         Refresh(false);
 }
 
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetActiveItem() const
+{
+    return m_active_button == NULL ? NULL : m_active_button->base;
+}
+
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetHoveredItem() const
+{
+    return m_hovered_button == NULL ? NULL : m_hovered_button->base;
+}
+
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetItem(size_t n) const
+{
+wxASSERT(n >= 0 && n < m_buttons.GetCount());
+
+if (n >= 0 && n < m_buttons.GetCount())
+    return m_buttons.Item(n);
+else 
+    return NULL;
+}
+
+wxRibbonButtonBarButtonBase *wxRibbonButtonBar::GetItemById(int button_id) const
+{
+    size_t count = m_buttons.GetCount();
+    size_t i;
+    for(i = 0; i < count; ++i)
+    {
+        wxRibbonButtonBarButtonBase* button = m_buttons.Item(i);
+        if(button->id == button_id)
+            return button;
+    }
+    
+    return NULL;
+    
+}
+
+int wxRibbonButtonBar::GetItemId(wxRibbonButtonBarButtonBase *item) const
+{
+    wxASSERT(item != NULL);
+    if (item == NULL)
+        return wxNOT_FOUND;
+    else
+        return item->id;
+}
+
+
+
 bool wxRibbonButtonBarEvent::PopupMenu(wxMenu* menu)
 {
     wxPoint pos = wxDefaultPosition;

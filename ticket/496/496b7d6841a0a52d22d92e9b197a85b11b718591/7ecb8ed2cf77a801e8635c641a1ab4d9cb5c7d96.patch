diff --git a/samples/stc/defsext.h b/samples/stc/defsext.h
index d152c37..82fc0f7 100644
--- a/samples/stc/defsext.h
+++ b/samples/stc/defsext.h
@@ -84,6 +84,7 @@ enum {
     myID_SELECTLINE,
     myID_EDIT_LAST = myID_SELECTLINE,
     myID_WINDOW_MINIMAL,
+    myID_WINDOW_EXTERNAL,
 
     // other IDs
     myID_STATUSBAR,
diff --git a/samples/stc/stctest.cpp b/samples/stc/stctest.cpp
index c4c89d8..ebd721a 100644
--- a/samples/stc/stctest.cpp
+++ b/samples/stc/stctest.cpp
@@ -102,8 +102,10 @@ private:
     AppFrame* m_frame;
 
     wxFrame* MinimalEditor();
+    wxFrame* ExternalLexer();
 protected:
     void OnMinimalEditor(wxCommandEvent&);
+    void OnExternalLexer(wxCommandEvent&);
     wxDECLARE_EVENT_TABLE();
 };
 
@@ -195,6 +197,7 @@ wxIMPLEMENT_APP(App);
 
 wxBEGIN_EVENT_TABLE(App, wxApp)
 EVT_MENU(myID_WINDOW_MINIMAL, App::OnMinimalEditor)
+EVT_MENU(myID_WINDOW_EXTERNAL, App::OnExternalLexer)
 wxEND_EVENT_TABLE()
 
 //----------------------------------------------------------------------------
@@ -555,6 +558,7 @@ void AppFrame::CreateMenu ()
     menuWindow->Append (myID_PAGEPREV, _("&Previous\tCtrl+Shift+Tab"));
     menuWindow->Append (myID_PAGENEXT, _("&Next\tCtrl+Tab"));
     menuWindow->Append(myID_WINDOW_MINIMAL, _("&Minimal editor"));
+    menuWindow->Append(myID_WINDOW_EXTERNAL, _("&External lexer"));
 
     // Help menu
     wxMenu *menuHelp = new wxMenu;
@@ -812,3 +816,147 @@ void App::OnMinimalEditor(wxCommandEvent& WXUNUSED(event))
     MinimalEditor();
 }
 
+/////////////////////////////////////////////////////////////////////////////
+// External lexer example
+
+static inline bool isParen(int i){
+    return (i==40||i==41);
+}
+
+class LambdaCalculusFrame: public wxFrame {
+public:
+    LambdaCalculusFrame(wxWindow* parent, wxWindowID id = wxID_ANY,
+                        const wxString& title = "Lambda Calculus",
+                        const wxPoint& pos = wxDefaultPosition,
+                        const wxSize& size = wxSize( 481,466 ),
+                        long style = wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL);
+
+private:
+    void OnUpdateUI(wxStyledTextEvent& event);
+    void OnMarginClick(wxStyledTextEvent& event);
+
+    wxStyledTextCtrl * m_stc;
+    wxStatusBar* m_statusBar;
+    int m_curPos;
+};
+
+LambdaCalculusFrame::LambdaCalculusFrame( wxWindow* parent, wxWindowID id,
+                                         const wxString& title,
+                                         const wxPoint& pos, const wxSize& size,
+                                         long style )
+: wxFrame( parent, id, title, pos, size, style ),m_curPos(-1) {
+
+    m_statusBar = CreateStatusBar(2, wxST_SIZEGRIP);
+    m_stc = new wxStyledTextCtrl(this);
+
+    // Load the library and try to set the lexer by name.
+    m_stc->LoadLexerLibrary("LexLambdaCalc");
+    m_stc->SetLexerLanguage("lambdacalc");
+
+    // double check that the lexer has been set.
+    if (m_stc->GetLexerLanguage()!="lambdacalc") {
+        m_statusBar->SetStatusText("Unable to load lexer", 0);
+    } else {
+        m_statusBar->SetStatusText("Lexer loaded", 0);
+
+        // This lexer is built so that if we pass it the STC's direct pointer,
+        // direct function, and the name of a fixed width font, it will
+        // configure the STC.
+
+        // first get the name of the system's fixed width font.
+        wxFont fixedWidthFont = wxFont(12, wxFONTFAMILY_TELETYPE,
+                                       wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL);
+        wxString font = fixedWidthFont.GetFaceName();
+        void * fontStr
+        = reinterpret_cast<void *>(const_cast<char *>(font.ToUTF8().data()));
+
+        // now use the lexer to configure the styled text control
+        m_stc->PrivateLexerCall(1, m_stc->GetDirectPointer());
+        m_stc->PrivateLexerCall(2, m_stc->GetDirectFunction());
+        m_stc->PrivateLexerCall(3, fontStr);
+        m_stc->PrivateLexerCall(4, 0);
+
+        // This application will highlight matching parentheses (and ones with
+        // no match) in the OnUpdateUI event handler.
+        // Since the work is done in the application, these styles are defined
+        // here instead of having the lexer do it.
+        m_stc->StyleSetForeground(wxSTC_STYLE_BRACELIGHT, *wxRED);
+        m_stc->StyleSetBackground(wxSTC_STYLE_BRACEBAD, *wxRED);
+        m_stc->StyleSetForeground(wxSTC_STYLE_BRACEBAD, *wxGREEN);
+
+        // add some initial evaluations
+        wxUniChar lambda(0x03BB); //U+03BB: greek small letter lamda
+        wxString initialText(
+            "(Lx.x+1)31\n"
+            "  31+1\n"
+            "  32\n"
+            "\n"
+            "(Lx.x-2)((Ly.y*4)3)\n"
+            "  (Lx.x-2)(3*4)\n"
+            "  (Lx.x-2)12\n"
+            "  12-2\n"
+            "  10\n"
+        );
+        initialText.Replace("L", lambda, true);
+        m_stc->AppendText(initialText);
+
+        // move the caret to the end of the text
+        m_stc->SetEmptySelection(m_stc->GetTextLength());
+
+        // Connect Events
+        m_stc->Bind(wxEVT_STC_UPDATEUI, &LambdaCalculusFrame::OnUpdateUI, this);
+        m_stc->Bind(wxEVT_STC_MARGINCLICK,&LambdaCalculusFrame::OnMarginClick,this);
+    }
+}
+
+void LambdaCalculusFrame::OnUpdateUI(wxStyledTextEvent& WXUNUSED(event)) {
+    int caretPos = m_stc->GetCurrentPos();
+
+    if (m_curPos != caretPos) {
+        int bracePos1 = -1;
+        int bracePos2 = -1;
+
+        m_curPos = caretPos;
+        m_statusBar->SetStatusText(wxString::Format("Position: %d",m_curPos),1);
+
+        // Is there a paren to the left or right?
+        if (caretPos > 0 && isParen(m_stc->GetCharAt(caretPos - 1)))
+            bracePos1 = caretPos - 1;
+        else if (isParen(m_stc->GetCharAt(caretPos)))
+            bracePos1 = caretPos;
+
+        if (bracePos1 >= 0) {
+            // Find the matching brace
+            bracePos2 = m_stc->BraceMatch(bracePos1);
+            if (bracePos2 == wxSTC_INVALID_POSITION)
+                m_stc->BraceBadLight(bracePos1);
+            else
+                m_stc->BraceHighlight(bracePos1,bracePos2);
+        } else
+            m_stc->BraceHighlight(wxSTC_INVALID_POSITION,
+                                  wxSTC_INVALID_POSITION);
+    }
+}
+
+void LambdaCalculusFrame::OnMarginClick(wxStyledTextEvent& event) {
+    int margin = event.GetMargin();
+
+    int position = event.GetPosition();
+    int line = m_stc->LineFromPosition(position);
+    int foldLevel = m_stc->GetFoldLevel(line);
+    bool headerFlag = (foldLevel & wxSTC_FOLDLEVELHEADERFLAG)!=0;
+
+    if ( margin==2 && headerFlag ) {
+        m_stc->ToggleFold(line);
+    }
+}
+
+wxFrame* App::ExternalLexer() {
+    LambdaCalculusFrame* frame = new LambdaCalculusFrame(0L);
+    frame->Show();
+    return frame;
+}
+
+void App::OnExternalLexer(wxCommandEvent& WXUNUSED(event)) {
+    ExternalLexer();
+}

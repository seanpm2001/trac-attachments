Index: include/wx/aui/auibar.h
===================================================================
--- include/wx/aui/auibar.h	(revision 63602)
+++ include/wx/aui/auibar.h	(working copy)
@@ -603,6 +603,7 @@
     void OnMiddleUp(wxMouseEvent& evt);
     void OnMotion(wxMouseEvent& evt);
     void OnLeaveWindow(wxMouseEvent& evt);
+    void OnCaptureLost(wxMouseCaptureLostEvent& evt);
     void OnSetCursor(wxSetCursorEvent& evt);
 
 protected:
Index: src/aui/auibar.cpp
===================================================================
--- src/aui/auibar.cpp	(revision 63602)
+++ src/aui/auibar.cpp	(working copy)
@@ -456,6 +456,8 @@
         dc.SetPen(wxPen(m_highlight_colour));
         dc.SetBrush(wxBrush(wxAuiStepColour(m_highlight_colour, 140)));
         dc.DrawRectangle(button_rect);
+
+        dc.SetBrush(wxBrush(wxAuiStepColour(m_highlight_colour, 170)));
         dc.DrawRectangle(dropdown_rect);
     }
     else if (item.GetState() & wxAUI_BUTTON_STATE_HOVER ||
@@ -808,6 +810,7 @@
     EVT_MIDDLE_UP(wxAuiToolBar::OnMiddleUp)
     EVT_MOTION(wxAuiToolBar::OnMotion)
     EVT_LEAVE_WINDOW(wxAuiToolBar::OnLeaveWindow)
+    EVT_MOUSE_CAPTURE_LOST(wxAuiToolBar::OnCaptureLost)
     EVT_SET_CURSOR(wxAuiToolBar::OnSetCursor)
 END_EVENT_TABLE()
 
@@ -2382,33 +2385,44 @@
             return;
         }
 
-        SetPressedItem(m_action_item);
+        UnsetToolTip();
 
         // fire the tool dropdown event
         wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, m_action_item->id);
         e.SetEventObject(this);
         e.SetToolId(m_action_item->id);
-        e.SetDropDownClicked(false);
 
-        int mouse_x = evt.GetX();
-        wxRect rect = m_action_item->sizer_item->GetRect();
+        const int mouse_x = evt.GetX();
+        const wxRect rect = m_action_item->sizer_item->GetRect();
+        const bool dropDownHit = m_action_item->dropdown &&
+                                 mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
+                                 mouse_x < (rect.x+rect.width);
+        e.SetDropDownClicked(dropDownHit);
 
-        if (m_action_item->dropdown &&
-            mouse_x >= (rect.x+rect.width-BUTTON_DROPDOWN_WIDTH-1) &&
-            mouse_x < (rect.x+rect.width))
+        e.SetClickPoint(evt.GetPosition());
+        e.SetItemRect(rect);
+
+        // we only set the 'pressed button' state if we hit the actual button and not just the drop-down
+        SetPressedItem(dropDownHit ? 0 : m_action_item);
+
+        if(dropDownHit)
         {
-            e.SetDropDownClicked(true);
+            m_action_pos = wxPoint(-1,-1);
+            m_action_item = NULL;
         }
 
-        e.SetClickPoint(evt.GetPosition());
-        e.SetItemRect(rect);
-        GetEventHandler()->ProcessEvent(e);
+        if(!GetEventHandler()->ProcessEvent(e) || e.GetSkipped())
+            CaptureMouse();
+
         DoIdleUpdate();
     }
 }
 
 void wxAuiToolBar::OnLeftUp(wxMouseEvent& evt)
 {
+    if (!HasCapture())
+        return;
+
     SetPressedItem(NULL);
 
     wxAuiToolBarItem* hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
@@ -2417,14 +2431,12 @@
         SetHoverItem(hit_item);
     }
 
-
     if (m_dragging)
     {
-        // reset drag and drop member variables
-        m_dragging = false;
-        m_action_pos = wxPoint(-1,-1);
-        m_action_item = NULL;
-        return;
+        //TODO: it would make sense to send out an 'END_DRAG' event here, otherwise a client would never know
+        //      what to do with the 'BEGIN_DRAG' event
+        // OnCaptureLost() will be called now and this will reset all our state tracking variables
+        ReleaseCapture();
     }
     else
     {
@@ -2435,41 +2447,34 @@
         {
             UnsetToolTip();
 
+            wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->id);
+            e.SetEventObject(this);
+
             if (hit_item->kind == wxITEM_CHECK || hit_item->kind == wxITEM_RADIO)
             {
-                bool toggle = false;
+                const bool toggle = !(m_action_item->state & wxAUI_BUTTON_STATE_CHECKED);
 
-                if (m_action_item->state & wxAUI_BUTTON_STATE_CHECKED)
-                    toggle = false;
-                else
-                    toggle = true;
-
                 ToggleTool(m_action_item->id, toggle);
 
                 // repaint immediately
                 Refresh(false);
                 Update();
 
-                wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->id);
-                e.SetEventObject(this);
-                e.SetInt (toggle);
-                GetEventHandler()->ProcessEvent(e);
-                DoIdleUpdate();
+                e.SetInt(toggle);
             }
-            else
-            {
-                wxCommandEvent e(wxEVT_COMMAND_MENU_SELECTED, m_action_item->id);
-                e.SetEventObject(this);
-                GetEventHandler()->ProcessEvent(e);
-                DoIdleUpdate();
-            }
+            
+            // we have to release the mouse *before* sending the event, because we don't know what
+            // a handler might do. It could open up a popup menu for example and that would make us
+            // lose our capture anyway
+            // OnCaptureLost() will be called now and this will reset all our state tracking variables
+            ReleaseCapture();
+
+            GetEventHandler()->ProcessEvent(e);
+            DoIdleUpdate();
         }
+        else
+            ReleaseCapture();
     }
-
-    // reset drag and drop member variables
-    m_dragging = false;
-    m_action_pos = wxPoint(-1,-1);
-    m_action_item = NULL;
 }
 
 void wxAuiToolBar::OnRightDown(wxMouseEvent& evt)
@@ -2499,15 +2504,14 @@
     m_action_pos = wxPoint(evt.GetX(), evt.GetY());
     m_action_item = FindToolByPosition(evt.GetX(), evt.GetY());
 
-    if (m_action_item)
+    if (m_action_item && m_action_item->state & wxAUI_BUTTON_STATE_DISABLED)
     {
-        if (m_action_item->state & wxAUI_BUTTON_STATE_DISABLED)
-        {
-            m_action_pos = wxPoint(-1,-1);
-            m_action_item = NULL;
-            return;
-        }
+        m_action_pos = wxPoint(-1,-1);
+        m_action_item = NULL;
+        return;
     }
+
+    UnsetToolTip();
 }
 
 void wxAuiToolBar::OnRightUp(wxMouseEvent& evt)
@@ -2579,6 +2583,8 @@
             return;
         }
     }
+
+    UnsetToolTip();
 }
 
 void wxAuiToolBar::OnMiddleUp(wxMouseEvent& evt)
@@ -2606,83 +2612,103 @@
 
 void wxAuiToolBar::OnMotion(wxMouseEvent& evt)
 {
+    const bool button_pressed = HasCapture();
+
     // start a drag event
-    if (!m_dragging &&
-        m_action_item != NULL &&
-        m_action_pos != wxPoint(-1,-1) &&
-        abs(evt.m_x - m_action_pos.x) + abs(evt.m_y - m_action_pos.y) > 5)
+    if (!m_dragging && button_pressed &&
+        abs(evt.GetX() - m_action_pos.x) + abs(evt.GetY() - m_action_pos.y) > 5)
     {
-        UnsetToolTip();
-
-        m_dragging = true;
-
+        //TODO: sending this event only makes sense if there is an 'END_DRAG' event sent sometime in the future (see OnLeftUp())
         wxAuiToolBarEvent e(wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, GetId());
         e.SetEventObject(this);
         e.SetToolId(m_action_item->id);
-        GetEventHandler()->ProcessEvent(e);
+        m_dragging = GetEventHandler()->ProcessEvent(e) && !e.GetSkipped();
+
         DoIdleUpdate();
-        return;
     }
 
+    if(m_dragging)
+        return;
+
     wxAuiToolBarItem* hit_item = FindToolByPosition(evt.GetX(), evt.GetY());
-    if (hit_item)
+    if(button_pressed)
     {
-        if (!(hit_item->state & wxAUI_BUTTON_STATE_DISABLED))
-            SetHoverItem(hit_item);
+        // if we have a button pressed we want it to be shown in 'depressed' state
+        // unless we move the mouse outside the button, then we want it to show as just 'highlighted'
+        if (hit_item == m_action_item)
+            SetPressedItem(m_action_item);
         else
-            SetHoverItem(NULL);
+        {
+            SetPressedItem(NULL);
+            SetHoverItem(m_action_item);
+        }
     }
     else
     {
-        // no hit item, remove any hit item
-        SetHoverItem(hit_item);
-    }
+        if (hit_item && (hit_item->state & wxAUI_BUTTON_STATE_DISABLED))
+            SetHoverItem(NULL);
+        else
+            SetHoverItem(hit_item);
 
-    // figure out tooltips
-    wxAuiToolBarItem* packing_hit_item;
-    packing_hit_item = FindToolByPositionWithPacking(evt.GetX(), evt.GetY());
-    if (packing_hit_item)
-    {
-        if (packing_hit_item != m_tip_item)
+        // tooltips handling
+        wxAuiToolBarItem* packing_hit_item;
+        packing_hit_item = FindToolByPositionWithPacking(evt.GetX(), evt.GetY());
+        if (packing_hit_item)
         {
-            m_tip_item = packing_hit_item;
+            if (packing_hit_item != m_tip_item)
+            {
+                m_tip_item = packing_hit_item;
 
-            if ( !packing_hit_item->short_help.empty() )
-                SetToolTip(packing_hit_item->short_help);
-            else
-                UnsetToolTip();
+                if ( !packing_hit_item->short_help.empty() )
+                    SetToolTip(packing_hit_item->short_help);
+                else
+                    UnsetToolTip();
+            }
         }
+        else
+        {
+            UnsetToolTip();
+            m_tip_item = NULL;
+        }
+
+        // figure out the dropdown button state (are we hovering or pressing it?)
+        RefreshOverflowState();
     }
+}
+
+void wxAuiToolBar::OnLeaveWindow(wxMouseEvent& evt)
+{
+    if(HasCapture())
+    {
+        evt.Skip();
+    }
     else
     {
-        UnsetToolTip();
+        RefreshOverflowState();
+        SetHoverItem(NULL);
+        SetPressedItem(NULL);
+
         m_tip_item = NULL;
-    }
 
-    // if we've pressed down an item and we're hovering
-    // over it, make sure it's state is set to pressed
-    if (m_action_item)
-    {
-        if (m_action_item == hit_item)
-            SetPressedItem(m_action_item);
-        else
-            SetPressedItem(NULL);
-    }
-
-    // figure out the dropdown button state (are we hovering or pressing it?)
-    RefreshOverflowState();
+        // we have to reset those here, because the mouse-up handlers which do it usually won't be called
+        // if we let go of a mouse button while we are outside of the window
+        m_action_pos = wxPoint(-1,-1);
+        m_action_item = NULL;
+	}
 }
 
-void wxAuiToolBar::OnLeaveWindow(wxMouseEvent& WXUNUSED(evt))
+void wxAuiToolBar::OnCaptureLost(wxMouseCaptureLostEvent& WXUNUSED(evt))
 {
     RefreshOverflowState();
     SetHoverItem(NULL);
     SetPressedItem(NULL);
 
+    m_dragging = false;
     m_tip_item = NULL;
+    m_action_pos = wxPoint(-1,-1);
+    m_action_item = NULL;
 }
 
-
 void wxAuiToolBar::OnSetCursor(wxSetCursorEvent& evt)
 {
     wxCursor cursor = wxNullCursor;

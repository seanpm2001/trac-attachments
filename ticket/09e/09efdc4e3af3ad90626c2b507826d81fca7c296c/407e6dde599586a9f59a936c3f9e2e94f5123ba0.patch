Index: src/osx/core/fontenum.cpp
===================================================================
--- src/osx/core/fontenum.cpp	(revision 66491)
+++ src/osx/core/fontenum.cpp	(working copy)
@@ -65,7 +65,7 @@
         status = ATSFontFamilyIteratorNext( theFontFamilyIterator, &theATSFontFamilyRef );
         if(status == noErr)
         {
- #ifndef __LP64__
+#ifndef __LP64__
             // TODO CS : Find replacement
             // added CS : avoid showing fonts that won't be displayable
             FMFontStyle intrinsicStyle = 0 ;
@@ -102,6 +102,43 @@
         }
     }
     ATSFontFamilyIteratorRelease(&theFontFamilyIterator);
+
+    if ( encoding == wxFONTENCODING_SYSTEM )
+    {
+        ATSFontIterator theFontIterator = NULL;
+        ATSFontRef theATSFontRef = 0;
+        // Create the iterator
+        status = ATSFontIteratorCreate(kATSFontContextLocal, nil,nil,
+                                             kATSOptionFlagsUnRestrictedScope,
+                                             &theFontIterator );
+        
+        while (status == noErr)
+        {
+            // Get the next font in the iteration.
+            status = ATSFontIteratorNext( theFontIterator, &theATSFontRef );
+            if(status == noErr)
+            {
+                // TODO: determine fixed widths ...
+                
+                CFStringRef theName = NULL;
+                ATSFontGetName(theATSFontRef, kATSOptionFlagsDefault, &theName);
+                wxCFStringRef cfName(theName) ;
+                wxString fontName(cfName.AsString(wxLocale::GetSystemEncoding()));
+                // only add the font name if its not already in the list
+                if (fontFamilies.Index(fontName) == wxNOT_FOUND)
+                    fontFamilies.Add(fontName);
+            }
+            else if (status == kATSIterationScopeModified) // Make sure the font database hasn't changed.
+            {
+                // reset the iterator
+                status = ATSFontIteratorReset (kATSFontContextLocal, nil, nil,
+                                                     kATSOptionFlagsUnRestrictedScope,
+                                                     &theFontIterator);
+                fontFamilies.Clear() ;
+            }
+        }
+        ATSFontIteratorRelease(&theFontIterator);
+    }
 #endif
 
     for ( size_t i = 0 ; i < fontFamilies.Count() ; ++i )

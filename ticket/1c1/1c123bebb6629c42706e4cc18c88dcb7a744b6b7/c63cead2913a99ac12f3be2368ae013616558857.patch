Index: interface/wx/grid.h
===================================================================
--- interface/wx/grid.h	(revision 72625)
+++ interface/wx/grid.h	(working copy)
@@ -2811,6 +2811,60 @@
     void AutoSizeRows(bool setAsMin = true);
 
     /**
+        Get the size of the cell in number of cells covered by it.
+
+        For normal cells, the function fills both @a num_rows and @a num_cols
+        with 1 and returns CellSpan_None. For cells which span multiple cells, i.e.
+        for which SetCellSize() had been called, the returned values are the
+        same ones as were passed to SetCellSize() call and the function return
+        value is CellSpan_Main.
+
+        More unexpectedly, perhaps, the returned values may be @em negative for
+        the cells which are inside a span covered by a cell occupying multiple
+        rows or columns. They correspond to the offset of the main cell of the
+        span from the cell passed to this functions and the function returns
+        CellSpan_Inside value to indicate this.
+
+        As an example, consider a 3*3 grid with the cell (1, 1) (the one in the
+        middle) having a span of 2 rows and 2 columns, i.e. the grid looks like
+        @code
+            +----+----+----+
+            |    |    |    |
+            +----+----+----+
+            |    |         |
+            +----+         |
+            |    |         |
+            +----+----+----+
+        @endcode
+        Then the function returns 2 and 2 in @a num_rows and @a num_cols for
+        the cell (1, 1) itself and -1 and -1 for the cell (2, 2) as well as -1
+        and 0 for the cell (2, 1).
+
+        @param row
+            The row of the cell.
+        @param col
+            The column of the cell.
+        @param num_rows
+            Pointer to variable receiving the number of rows, must not be @NULL.
+        @param num_cols
+            Pointer to variable receiving the number of columns, must not be
+            @NULL.
+        @return
+            The kind of this cell span (the return value is new in wxWidgets
+            2.9.1, this function was void in previous wxWidgets versions).
+     */
+    CellSpan GetCellSize( int row, int col, int *num_rows, int *num_cols ) const;
+
+    /**
+        Get the number of rows and columns allocated for this cell.
+
+        This overload doesn't return a CellSpan value but the values returned
+        may still be negative, see GetCellSize(int, int, int *, int *) for
+        details.
+     */
+    wxSize GetCellSize(const wxGridCellCoords& coords);
+
+    /**
         Returns the current height of the column labels.
     */
     int GetColLabelSize() const;
@@ -2831,9 +2885,15 @@
     int GetColSize(int col) const;
 
     /**
-        Returns @true if the specified column is not currently hidden.
+        Get size information for all columns at once.
+
+        This method is useful when the information about all column widths
+        needs to be saved. The widths can be later restored using
+        SetColSizes().
+
+        @sa wxGridSizesInfo, GetRowSizes()
      */
-    bool IsColShown(int col) const;
+    wxGridSizesInfo GetColSizes() const;
 
     /**
         Returns the default height for column labels.
@@ -2876,11 +2936,69 @@
     int GetRowSize(int row) const;
 
     /**
+        Get size information for all row at once.
+
+        @sa wxGridSizesInfo, GetColSizes()
+     */
+    wxGridSizesInfo GetRowSizes() const;
+
+    /**
+        Hides the specified column.
+
+        To show the column later you need to call SetColSize() with non-0
+        width or ShowCol() to restore the previous column width.
+
+        Notice that this method shouldn't be called if the column is already
+        hidden.
+
+        @param col
+            The column index.
+     */
+    void HideCol(int col);
+
+    /**
+        Hides the specified row.
+
+        To show the row later you need to call SetRowSize() with non-0
+        width or ShowRow() to restore its original height.
+
+        @param col
+            The row index.
+     */
+    void HideRow(int col);
+
+    /**
+        Returns @true if the specified column is not currently hidden.
+     */
+    bool IsColShown(int col) const;
+
+    /**
         Returns @true if the specified row is not currently hidden.
      */
     bool IsRowShown(int row) const;
 
     /**
+        Set the size of the cell.
+
+        Specifying a value of more than 1 in @a num_rows or @a num_cols will
+        make the cell at (@a row, @a col) span the block of the specified size,
+        covering the other cells which would be normally shown in it. Passing 1
+        for both arguments resets the cell to normal appearance.
+
+        @see GetCellSize()
+
+        @param row
+            The row of the cell.
+        @param col
+            The column of the cell.
+        @param num_rows
+            Number of rows to be occupied by this cell, must be >= 1.
+        @param num_cols
+            Number of columns to be occupied by this cell, must be >= 1.
+     */
+    void SetCellSize(int row, int col, int num_rows, int num_cols);
+
+    /**
         Sets the height of the column labels.
 
         If @a height equals to @c wxGRID_AUTOSIZE then height is calculated
@@ -2920,34 +3038,16 @@
     void SetColSize(int col, int width);
 
     /**
-        Hides the specified column.
+        Restore all columns sizes.
 
-        To show the column later you need to call SetColSize() with non-0
-        width or ShowCol() to restore the previous column width.
+        This is usually called with wxGridSizesInfo object previously returned
+        by GetColSizes().
 
-        Notice that this method shouldn't be called if the column is already
-        hidden.
-
-        @param col
-            The column index.
+        @sa SetRowSizes()
      */
-    void HideCol(int col);
+    void SetColSizes(const wxGridSizesInfo& sizeInfo);
 
     /**
-        Shows the previously hidden column by resizing it to non-0 size.
-
-        The column is shown again with the same width that it had before
-        HideCol() call.
-
-        Notice that this method shouldn't be called if the column is not
-        currently hidden.
-
-        @see HideCol(), SetColSize()
-     */
-    void ShowCol(int col);
-
-
-    /**
         Sets the default width for columns in the grid.
 
         This will only affect columns subsequently added to the grid unless
@@ -3000,55 +3100,6 @@
     void SetRowSize(int row, int height);
 
     /**
-        Hides the specified row.
-
-        To show the row later you need to call SetRowSize() with non-0
-        width or ShowRow() to restore its original height.
-
-        @param col
-            The row index.
-     */
-    void HideRow(int col);
-
-    /**
-        Shows the previously hidden row.
-
-        The row is shown again with the same height that it had before
-        HideRow() call.
-
-        @see HideRow(), SetRowSize()
-     */
-    void ShowRow(int col);
-
-    /**
-        Get size information for all columns at once.
-
-        This method is useful when the information about all column widths
-        needs to be saved. The widths can be later restored using
-        SetColSizes().
-
-        @sa wxGridSizesInfo, GetRowSizes()
-     */
-    wxGridSizesInfo GetColSizes() const;
-
-    /**
-        Get size information for all row at once.
-
-        @sa wxGridSizesInfo, GetColSizes()
-     */
-    wxGridSizesInfo GetRowSizes() const;
-
-    /**
-        Restore all columns sizes.
-
-        This is usually called with wxGridSizesInfo object previously returned
-        by GetColSizes().
-
-        @sa SetRowSizes()
-     */
-    void SetColSizes(const wxGridSizesInfo& sizeInfo);
-
-    /**
         Restore all rows sizes.
 
         @sa SetColSizes()
@@ -3056,80 +3107,28 @@
     void SetRowSizes(const wxGridSizesInfo& sizeInfo);
 
     /**
-        Set the size of the cell.
+        Shows the previously hidden column by resizing it to non-0 size.
 
-        Specifying a value of more than 1 in @a num_rows or @a num_cols will
-        make the cell at (@a row, @a col) span the block of the specified size,
-        covering the other cells which would be normally shown in it. Passing 1
-        for both arguments resets the cell to normal appearance.
+        The column is shown again with the same width that it had before
+        HideCol() call.
 
-        @see GetCellSize()
+        Notice that this method shouldn't be called if the column is not
+        currently hidden.
 
-        @param row
-            The row of the cell.
-        @param col
-            The column of the cell.
-        @param num_rows
-            Number of rows to be occupied by this cell, must be >= 1.
-        @param num_cols
-            Number of columns to be occupied by this cell, must be >= 1.
+        @see HideCol(), SetColSize()
      */
-    void SetCellSize(int row, int col, int num_rows, int num_cols);
+    void ShowCol(int col);
 
     /**
-        Get the size of the cell in number of cells covered by it.
+        Shows the previously hidden row.
 
-        For normal cells, the function fills both @a num_rows and @a num_cols
-        with 1 and returns CellSpan_None. For cells which span multiple cells, i.e.
-        for which SetCellSize() had been called, the returned values are the
-        same ones as were passed to SetCellSize() call and the function return
-        value is CellSpan_Main.
+        The row is shown again with the same height that it had before
+        HideRow() call.
 
-        More unexpectedly, perhaps, the returned values may be @em negative for
-        the cells which are inside a span covered by a cell occupying multiple
-        rows or columns. They correspond to the offset of the main cell of the
-        span from the cell passed to this functions and the function returns
-        CellSpan_Inside value to indicate this.
-
-        As an example, consider a 3*3 grid with the cell (1, 1) (the one in the
-        middle) having a span of 2 rows and 2 columns, i.e. the grid looks like
-        @code
-            +----+----+----+
-            |    |    |    |
-            +----+----+----+
-            |    |         |
-            +----+         |
-            |    |         |
-            +----+----+----+
-        @endcode
-        Then the function returns 2 and 2 in @a num_rows and @a num_cols for
-        the cell (1, 1) itself and -1 and -1 for the cell (2, 2) as well as -1
-        and 0 for the cell (2, 1).
-
-        @param row
-            The row of the cell.
-        @param col
-            The column of the cell.
-        @param num_rows
-            Pointer to variable receiving the number of rows, must not be @NULL.
-        @param num_cols
-            Pointer to variable receiving the number of columns, must not be
-            @NULL.
-        @return
-            The kind of this cell span (the return value is new in wxWidgets
-            2.9.1, this function was void in previous wxWidgets versions).
+        @see HideRow(), SetRowSize()
      */
-    CellSpan GetCellSize( int row, int col, int *num_rows, int *num_cols ) const;
+    void ShowRow(int col);
 
-    /**
-        Get the number of rows and columns allocated for this cell.
-
-        This overload doesn't return a CellSpan value but the values returned
-        may still be negative, see GetCellSize(int, int, int *, int *) for
-        details.
-     */
-    wxSize GetCellSize(const wxGridCellCoords& coords);
-
     //@}
 
 

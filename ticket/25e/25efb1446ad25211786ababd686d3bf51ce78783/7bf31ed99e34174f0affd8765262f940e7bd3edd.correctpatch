diff -rbu2 wxMSW-2.4.1-original/include/msw/menu.h wxMSW-2.4.1-patch/include/msw/menu.h
--- wxMSW-2.4.1-original/include/msw/menu.h	Thu Mar 21 03:35:08 2002
+++ wxMSW-2.4.1-patch/include/msw/menu.h	Sun Jun 22 00:38:58 2003
@@ -87,4 +87,10 @@
 #endif // wxUSE_ACCEL
 
+#if wxUSE_OWNER_DRAWN
+    // searches for a menuitem in hMenu that has the '&'-accelerators cUser;
+    // returns the zero-based relative position of the found menuitem in hMenu or wxNOT_FOUND
+    int FindMenuItemByChar( WXHMENU hMenu, wxChar cUser );
+#endif // wxUSE_OWNER_DRAWN
+
 private:
     // common part of all ctors
@@ -168,4 +174,10 @@
     // call this function to update it (m_menuBarFrame should be !NULL)
     void Refresh();
+
+#if wxUSE_OWNER_DRAWN
+    // searches for a menuitem in hMenu that has the '&'-accelerators cUser;
+    // returns the zero-based relative position of this menuitem in hMenu or wxNOT_FOUND
+    int FindMenuItemByChar( WXHMENU hMenu, wxChar cUser );
+#endif // wxUSE_OWNER_DRAWN
 
 protected:
diff -rbu2 wxMSW-2.4.1-original/include/msw/menuitem.h wxMSW-2.4.1-patch/include/msw/menuitem.h
--- wxMSW-2.4.1-original/include/msw/menuitem.h	Sun Mar 24 02:24:16 2002
+++ wxMSW-2.4.1-patch/include/msw/menuitem.h	Sun Jun 22 00:39:46 2003
@@ -74,4 +74,9 @@
                wxMenu *subMenu = (wxMenu *)NULL);
 
+#if wxUSE_OWNER_DRAWN
+    // returns TRUE if cUser is found after the first '&' in m_text
+    bool FindMenuItemByChar( wxChar cUser );
+#endif // wxUSE_OWNER_DRAWN
+
 private:
     // common part of all ctors
diff -rbu2 wxMSW-2.4.1-original/include/ownerdrw.h wxMSW-2.4.1-patch/include/ownerdrw.h
--- wxMSW-2.4.1-original/include/ownerdrw.h	Mon Sep 02 21:15:40 2002
+++ wxMSW-2.4.1-patch/include/ownerdrw.h	Sun Jun 22 01:07:20 2003
@@ -68,7 +68,14 @@
         m_bOwnerDrawn = TRUE; }
 
+  void SetDisabledBitmap( const wxBitmap& bmpDisabled )
+      { m_bmpDisabled = bmpDisabled;
+        m_bOwnerDrawn = TRUE; }
+
   const wxBitmap& GetBitmap(bool bChecked = TRUE) const
       { return (bChecked ? m_bmpChecked : m_bmpUnchecked); }
 
+  const wxBitmap& GetDisabledBitmap() const
+      { return m_bmpDisabled; }
+
   // the height of the menu checkmark (or bitmap) is determined by the font
   // for the current item, but the width should be always the same (for the
@@ -103,5 +110,6 @@
   // (see wxMenuItem::wxMenuItem for example)
   bool IsOwnerDrawn() const { return m_bOwnerDrawn;   }
-  void ResetOwnerDrawn() { m_bOwnerDrawn = FALSE;  }
+  void SetOwnerDrawn( int ownerDrawn ) { m_bOwnerDrawn = ownerDrawn; }
+  void ResetOwnerDrawn() { m_bOwnerDrawn = FALSE;  } // deprecated, use SetOwnerDrawn( FALSE ) instead
 
 public:
@@ -144,5 +152,6 @@
             m_colBack;      // background color
   wxBitmap  m_bmpChecked,   // bitmap to put near the item
-            m_bmpUnchecked; // (checked is used also for 'uncheckable' items)
+            m_bmpUnchecked, // (checked is used also for 'uncheckable' items)
+            m_bmpDisabled;
 
   size_t    m_nHeight,      // font height
diff -rbu2 wxMSW-2.4.1-original/src/msw/frame.cpp wxMSW-2.4.1-patch/src/msw/frame.cpp
--- wxMSW-2.4.1-original/src/msw/frame.cpp	Thu Jun 13 02:04:22 2002
+++ wxMSW-2.4.1-patch/src/msw/frame.cpp	Sun Jun 22 09:46:04 2003
@@ -785,4 +785,22 @@
             break;
 #endif // !__WXMICROWIN__
+
+#if wxUSE_OWNER_DRAWN
+        case WM_MENUCHAR:
+            {
+                wxMenuBar* pMB = GetMenuBar();
+                if ( pMB )
+                {
+                    int iSelectedMenuItem = 
+                        pMB->FindMenuItemByChar( (WXHMENU)lParam, (wxChar)LOWORD(wParam) );
+                    if ( iSelectedMenuItem != wxNOT_FOUND )
+                    {
+                        rc = ( 0x00020000 | iSelectedMenuItem );
+                        processed = TRUE;
+                    }
+                }
+            }
+            break;
+#endif // wxUSE_OWNER_DRAWN
     }
 
diff -rbu2 wxMSW-2.4.1-original/src/msw/menu.cpp wxMSW-2.4.1-patch/src/msw/menu.cpp
--- wxMSW-2.4.1-original/src/msw/menu.cpp	Mon Dec 16 13:56:38 2002
+++ wxMSW-2.4.1-patch/src/msw/menu.cpp	Sun Jun 22 00:56:10 2003
@@ -298,4 +298,53 @@
 }
 
+#if wxUSE_OWNER_DRAWN
+int wxMenu::FindMenuItemByChar( WXHMENU hMenu, wxChar cUser )
+{
+    wxMenuItem *item;
+    int iCt;
+    wxMenuItemList::Node* node;
+
+    // first check all submenus
+    for ( iCt = 0, node = m_items.GetFirst();
+          node;
+          node = node->GetNext(), iCt++
+        )
+    {
+        item = (wxMenuItem*)(node->GetData());
+
+        if ( item->IsSubMenu() )
+        {
+            int iResult = item->GetSubMenu()->FindMenuItemByChar( hMenu, cUser );
+            if ( iResult != wxNOT_FOUND )
+            {
+                return iResult;
+            }
+        }
+    }
+
+    // now check our own items
+
+    if ( GetHMenu() != hMenu )
+    {
+        return wxNOT_FOUND;
+    }
+    
+    for ( iCt = 0, node = m_items.GetFirst();
+          node;
+          node = node->GetNext(), iCt++
+        )
+    {
+        item = (wxMenuItem*)(node->GetData());
+
+        if ( item->FindMenuItemByChar( cUser ) == TRUE )
+        {
+            return iCt;
+        }
+    }
+
+    return wxNOT_FOUND;
+}
+#endif // wxUSE_OWNER_DRAWN
+
 void wxMenu::EndRadioGroup()
 {
@@ -605,4 +654,22 @@
     return m_hMenu;
 }
+
+#if wxUSE_OWNER_DRAWN
+int wxMenuBar::FindMenuItemByChar( WXHMENU hMenu, wxChar cUser )
+{
+    size_t count = GetMenuCount();
+    int iResult;
+
+    for ( size_t i = 0; i < count; i++ )
+    {
+        if ( ( iResult = m_menus[i]->FindMenuItemByChar( hMenu, cUser ) ) != wxNOT_FOUND )
+        {
+            return iResult;
+        }
+    }
+
+    return wxNOT_FOUND;
+}
+#endif // wxUSE_OWNER_DRAWN
 
 // ---------------------------------------------------------------------------
diff -rbu2 wxMSW-2.4.1-original/src/msw/menuitem.cpp wxMSW-2.4.1-patch/src/msw/menuitem.cpp
--- wxMSW-2.4.1-original/src/msw/menuitem.cpp	Fri May 09 23:37:08 2003
+++ wxMSW-2.4.1-patch/src/msw/menuitem.cpp	Sun Jun 22 00:51:26 2003
@@ -358,4 +358,32 @@
 }
 
+#if wxUSE_OWNER_DRAWN
+bool wxMenuItem::FindMenuItemByChar( wxChar cUser )
+{
+    // If we did not care whether the item is disabled Windows would do this for us.
+    // But: Returning FALSE if the item is disabled has the advantage that the menu is not 
+    // closed and the program peeps if the user chooses a disabled menuitem.
+    if ( IsSeparator() || !IsEnabled() )
+    {
+      return FALSE;
+    }
+
+    int iPosOfAmpersand = GetText().Find( wxT('&') );
+    int iPosOfTab = GetText().Find(wxT('\t'));
+    if (    // 1. found an ampersound
+            iPosOfAmpersand != -1
+            // 2. and the ampersound is not in the accelerator but before the first '\t'
+         && ( iPosOfTab == -1 || iPosOfTab > iPosOfAmpersand )
+            // 3. and the char after the ampersand == cUser
+         && wxTolower( GetText().GetChar( iPosOfAmpersand + 1 ) ) == wxTolower( cUser )
+       )
+    {
+        return TRUE;
+    }
+
+    return FALSE;
+}
+#endif // wxUSE_OWNER_DRAWN
+
 // ----------------------------------------------------------------------------
 // wxMenuItemBase
diff -rbu2 wxMSW-2.4.1-original/src/msw/ownerdrw.cpp wxMSW-2.4.1-patch/src/msw/ownerdrw.cpp
--- wxMSW-2.4.1-original/src/msw/ownerdrw.cpp	Tue Jun 03 15:58:26 2003
+++ wxMSW-2.4.1-patch/src/msw/ownerdrw.cpp	Sun Jun 22 01:59:04 2003
@@ -127,4 +127,6 @@
     m_nMarginWidth = ms_nLastMarginWidth;
     m_nMinHeight   = wxMSWSystemMenuFontModule::ms_systemMenuHeight;
+
+    m_bmpDisabled = wxNullBitmap;
 }
 
@@ -163,19 +165,7 @@
   dc.GetTextExtent(str, (long *)pwidth, (long *)pheight);
 
-  if (!m_strAccel.IsEmpty())
-  {
-      // measure the accelerator string, and add it's width to
-      // the total item width, plus 16 (Accelerators are right justified,
-      // with the right edge of the text rectangle 16 pixels left of
-      // the right edge of the menu)
-
-      int accel_width, accel_height;
-      dc.GetTextExtent(m_strAccel, &accel_width, &accel_height);
-      *pwidth += accel_width;
-  }
-
   // add space at the end of the menu for the submenu expansion arrow
   // this will also allow offsetting the accel string from the right edge
-  *pwidth += (size_t) (GetDefaultMarginWidth() * 1.5);
+  *pwidth += (size_t) (GetDefaultMarginWidth() * 1.5) + 16;
 
   // JACS: items still look too tightly packed, so adding 5 pixels.
@@ -202,7 +192,4 @@
       if ((size_t)GetMarginWidth() < adjustedWidth)
           SetMarginWidth(adjustedWidth);
-
-      // add the size of the bitmap to our total size...
-      *pwidth += GetMarginWidth(); 
   }
 
@@ -347,4 +334,5 @@
                 (((st & wxODDisabled) && !(st & wxODSelected)) ? DSS_DISABLED : 0));
 
+    /* Right alignment does not work with DSS_DISABLED (Windows98) - why?
     if ( !m_strAccel.empty() )
     {
@@ -359,4 +347,20 @@
         ::SetTextAlign(hdc, TA_LEFT);
     }
+    */
+
+    // ::SetTextAlign(hdc, TA_RIGHT) doesn't work with DSS_DISABLED or DSS_MONO as last parameter 
+    // in DrawState() (at least with Windows98). So we have to take care of right alignment ourselves.
+    if ( !m_strAccel.empty() )
+    {
+        int accel_width, accel_height;
+        dc.GetTextExtent(m_strAccel, &accel_width, &accel_height);
+        // right align accel string with right edge of menu ( offset by the margin width )
+        ::DrawState(hdc, NULL, NULL,
+                (LPARAM)m_strAccel.c_str(), m_strAccel.length(),
+                rc.GetWidth()-GetMarginWidth()-accel_width, rc.y+(int) ((rc.GetHeight()-sizeRect.cy)/2.0),
+                rc.GetWidth()-GetMarginWidth()-accel_width, sizeRect.cy,
+                DST_TEXT |
+                (((st & wxODDisabled) && !(st & wxODSelected)) ? DSS_DISABLED : 0));
+    }
 
     (void)SelectObject(hdc, hPrevBrush);
@@ -404,6 +408,9 @@
   }
   else {
+    wxBitmap bmp( // for disabled items we use m_bmpDisabled if it exists
+                  ( GetDisabledBitmap() != wxNullBitmap && ( st & wxODDisabled ) ) ? GetDisabledBitmap() :
     // for uncheckable item we use only the 'checked' bitmap
-    wxBitmap bmp(GetBitmap(IsCheckable() ? ((st & wxODChecked) != 0) : TRUE));
+                  GetBitmap(IsCheckable() ? ((st & wxODChecked) != 0) : TRUE)
+                );
     if ( bmp.Ok() ) {
       wxMemoryDC dcMem(&dc);

 	  	 

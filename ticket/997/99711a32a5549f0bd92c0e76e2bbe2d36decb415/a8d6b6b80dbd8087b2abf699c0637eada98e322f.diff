diff --git a/samples/fswatcher/fswatcher.cpp b/samples/fswatcher/fswatcher.cpp
index f5a8d16..68ec840 100644
--- a/samples/fswatcher/fswatcher.cpp
+++ b/samples/fswatcher/fswatcher.cpp
@@ -452,6 +452,60 @@ void MyFrame::OnFileSystemEvent(wxFileSystemWatcherEvent& event)
     // TODO remove when code is rock-solid
     wxLogTrace(wxTRACE_FSWATCHER, "*** %s ***", event.ToString());
     LogEvent(event);
+    
+    int type = event.GetChangeType();
+    if ((type == wxFSW_EVENT_DELETE) || (type == wxFSW_EVENT_RENAME))
+    {
+        // If path is one of our watched dirs, we need to react to this
+        // otherwise there'll be asserts if later we try to remove it
+        wxString eventpath = event.GetPath().GetFullPath();
+        bool found(false);
+        for (size_t n = m_filesList->GetItemCount(); n > 0; --n)
+        {
+            wxString path, foo = m_filesList->GetItemText(n-1);
+            if ((!m_filesList->GetItemText(n-1).StartsWith("Dir:  ", &path)) &&
+                (!m_filesList->GetItemText(n-1).StartsWith("Tree: ", &path)))
+            {
+                wxFAIL_MSG("Unexpected item in wxListView.");
+            }
+            if (path == eventpath)
+            {
+                if (type == wxFSW_EVENT_DELETE)
+                {
+                    m_filesList->DeleteItem(n-1);
+                }
+                else
+                {
+                    // At least in wxGTK, we'll never get here: renaming the top
+                    // watched dir gives IN_MOVE_SELF and no new-name info.
+                    // However I'll leave the code in case other platforms do
+                    wxString newname = event.GetNewPath().GetFullPath();
+                    if (newname.empty() ||
+                        newname == event.GetPath().GetFullPath())
+                    {
+                        // Just in case either of these are possible...
+                        wxLogTrace(wxTRACE_FSWATCHER, 
+                                   "Invalid attempt to rename to %s", newname);
+                        return;
+                    }
+                    wxString prefix = 
+                        m_filesList->GetItemText(n-1).StartsWith("Dir:  ") ?
+                                      "Dir:  " : "Tree: ";
+                    m_filesList->SetItemText(n-1, prefix + newname);
+                }
+                found = true;
+                // Don't break: a filepath may have been added more than once
+            }
+        }
+        
+        if (found)
+        {
+            wxString msg = wxString::Format(
+                           "Your watched path %s has been deleted or renamed\n",
+                           eventpath);
+            m_evtConsole->AppendText(msg);
+        }
+    }
 }
 
 
diff --git a/tests/fswatcher/fswatchertest.cpp b/tests/fswatcher/fswatchertest.cpp
index 67dc7f1..53306e6 100644
--- a/tests/fswatcher/fswatchertest.cpp
+++ b/tests/fswatcher/fswatchertest.cpp
@@ -726,8 +726,8 @@ void FileSystemWatcherTestCase::TestTrees()
 #ifndef __WINDOWS__
             // When there's no file mask, wxMSW sets a single watch
             // on the trunk which is implemented recursively.
-            // wxGTK always sets an additional watch for each file/subdir
-            treeitems += (subdirs*files) + subdirs + 1; // +1 for 'child'
+            // wxGTK always sets an additional watch for each subdir
+            treeitems += subdirs + 1; // +1 for 'child'
 #endif // __WINDOWS__
 
             // Store the initial count; there may already be some watches
@@ -778,28 +778,6 @@ void FileSystemWatcherTestCase::TestTrees()
 #endif // __UNIX__
         }
 
-        void WatchTreeWithFilespec(const wxFileName& dir)
-        {
-            CPPUNIT_ASSERT(m_watcher);
-            CPPUNIT_ASSERT(dir.DirExists()); // Was built in WatchTree()
-
-            // Store the initial count; there may already be some watches
-            const int initial = m_watcher->GetWatchedPathsCount();
-
-            // When we use a filter, both wxMSW and wxGTK implementations set
-            // an additional watch for each file/subdir. Test by passing *.txt
-            // We expect the dirs and the other 2 files to be skipped
-            const size_t treeitems = subdirs + 1;
-            m_watcher->AddTree(dir, wxFSW_EVENT_ALL, "*.txt");
-
-            const int plustree = m_watcher->GetWatchedPathsCount();
-            CPPUNIT_ASSERT_EQUAL(initial + treeitems, plustree);
-
-            // RemoveTree should try to remove only those files that were added
-            m_watcher->RemoveTree(dir);
-            CPPUNIT_ASSERT_EQUAL(initial, m_watcher->GetWatchedPathsCount());
-        }
-
         void RemoveAllWatches()
         {
             CPPUNIT_ASSERT(m_watcher);
@@ -826,12 +804,6 @@ void FileSystemWatcherTestCase::TestTrees()
 
             WatchDir(singledir);
             WatchTree(treedir);
-            // Now test adding and removing a tree using a filespec
-            // wxMSW uses the generic method to add matching files; which fails
-            // as it doesn't support adding files :/ So disable the test
-#ifndef __WINDOWS__
-            WatchTreeWithFilespec(treedir);
-#endif // __WINDOWS__
 
             RemoveSingleWatch(singledir);
             // Add it back again, ready to test RemoveAll()

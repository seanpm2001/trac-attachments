Index: include/wx/sizer.h
===================================================================
--- include/wx/sizer.h	(revision 48387)
+++ include/wx/sizer.h	(working copy)
@@ -47,6 +47,7 @@
     {
         m_flags = 0;
         m_borderInPixels = 0;
+        m_id = wxID_NONE;
     }
 
     // setters for all sizer flags, they all return the object itself so that
@@ -169,16 +170,26 @@
 
         return *this;
     }
+    
+    // Identify a sizer item with a number
+    wxSizerFlags& Id(int id)
+    {
+        m_id = id;
+        
+        return *this;
+    }
 
     // accessors for wxSizer only
     int GetProportion() const { return m_proportion; }
     int GetFlags() const { return m_flags; }
     int GetBorderInPixels() const { return m_borderInPixels; }
+    int GetId() const { return m_id; }
 
 private:
     int m_proportion;
     int m_flags;
     int m_borderInPixels;
+    int m_id;
 };
 
 
@@ -297,6 +308,11 @@
         { return m_ratio; }
 
     virtual wxRect GetRect() { return m_rect; }
+    
+    // Id of a sizer item, not a window id
+    // Even sizer items spacers can have an id
+    void SetId(int id) { m_id = id; }
+    int GetId() const { return m_id; }
 
     bool IsWindow() const { return m_kind == Item_Window; }
     bool IsSizer() const { return m_kind == Item_Sizer; }
@@ -407,6 +423,7 @@
     int          m_proportion;
     int          m_border;
     int          m_flag;
+    int          m_id;
 
     // on screen rectangle of this item (not including borders)
     wxRect       m_rect;
@@ -593,6 +610,7 @@
     wxSizerItem* GetItem( wxWindow *window, bool recursive = false );
     wxSizerItem* GetItem( wxSizer *sizer, bool recursive = false );
     wxSizerItem* GetItem( size_t index );
+    wxSizerItem* GetItemById( int id, bool recursive = false );
 
     // Manage whether individual scene items are considered
     // in the layout calculations or not.
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 48387)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -336,7 +336,19 @@
 
 #define XRCCTRL(window, id, type) \
     (wxStaticCast((window).FindWindow(XRCID(id)), type))
+    
+// This macro returns pointer to sizer item
+// Example:
+//
+// <object class="spacer" name="area">
+//   <size>400, 300</size>
+// </object>
+//
+// wxSizerItem* item = XRCSIZERITEM(*this, wxT("area"))
 
+#define XRCSIZERITEM(window, id) \
+    ((window).GetSizer() ? (window).GetSizer()->GetItemById(id) : NULL)    
+
 // wxXmlResourceHandler is an abstract base class for resource handlers
 // capable of creating a control from an XML node.
 
Index: src/common/sizer.cpp
===================================================================
--- src/common/sizer.cpp	(revision 48387)
+++ src/common/sizer.cpp	(working copy)
@@ -103,6 +103,7 @@
     m_proportion = 0;
     m_border = 0;
     m_flag = 0;
+    m_id = wxID_NONE;
 }
 
 // window item
@@ -132,6 +133,7 @@
              m_proportion(proportion),
              m_border(border),
              m_flag(flag),
+             m_id(wxID_NONE),
              m_userData(userData)
 {
     DoSetWindow(window);
@@ -154,6 +156,7 @@
              m_proportion(proportion),
              m_border(border),
              m_flag(flag),
+             m_id(wxID_NONE),             
              m_ratio(0.0),
              m_userData(userData)
 {
@@ -183,6 +186,7 @@
              m_proportion(proportion),
              m_border(border),
              m_flag(flag),
+             m_id(wxID_NONE),
              m_userData(userData)
 {
     DoSetSpacer(wxSize(width, height));
@@ -1085,6 +1089,33 @@
     return m_children.Item( index )->GetData();
 }
 
+wxSizerItem* wxSizer::GetItemById( int id, bool recursive )
+{
+    // This gets a sizer item by the id of the sizer item
+    // and NOT the id of a window if the item is a window.
+
+    wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
+    while (node)
+    {
+        wxSizerItem     *item = node->GetData();
+
+        if (item->GetId() == id)
+        {
+            return item;
+        }
+        else if (recursive && item->IsSizer())
+        {
+            wxSizerItem *subitem = item->GetSizer()->GetItemById( id, true );
+            if (subitem)
+                return subitem;
+        }
+
+        node = node->GetNext();
+    }
+
+    return NULL;
+}
+
 bool wxSizer::Show( wxWindow *window, bool show, bool recursive )
 {
     wxSizerItem *item = GetItem( window, recursive );
Index: src/xrc/xh_sizer.cpp
===================================================================
--- src/xrc/xh_sizer.cpp	(revision 48387)
+++ src/xrc/xh_sizer.cpp	(working copy)
@@ -361,6 +361,9 @@
         gbsitem->SetPos(GetGBPos(wxT("cellpos")));
         gbsitem->SetSpan(GetGBSpan(wxT("cellspan")));
     }
+    
+    // Id of the item
+    sitem->SetId(GetID());
 }
 
 void wxSizerXmlHandler::AddSizerItem(wxSizerItem* sitem)

 	  	 

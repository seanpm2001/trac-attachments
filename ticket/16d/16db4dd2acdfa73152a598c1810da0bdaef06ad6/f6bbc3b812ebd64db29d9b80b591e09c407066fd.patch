Index: docs/latex/wx/msgdlg.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/msgdlg.tex,v
retrieving revision 1.9
diff -u -r1.9 msgdlg.tex
--- docs/latex/wx/msgdlg.tex	2004/09/28 11:54:57	1.9
+++ docs/latex/wx/msgdlg.tex	2007/04/13 23:05:37
@@ -68,3 +68,40 @@
 
 Shows the dialog, returning one of wxID\_OK, wxID\_CANCEL, wxID\_YES, wxID\_NO.
 
+\membersection{wxMessageDialog::SetYesNoLabels}\label{wxmessagedialogsetyesnolabels}
+
+\func{bool}{SetYesNoLabels}{\param{const wxString&}{yes},\param{const wxString&}{no}}
+
+Overrides the text labels of the Yes and No buttons.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+\membersection{wxMessageDialog::SetYesNoCancelLabels}\label{wxmessagedialogsetyesnocancellabels}
+
+\func{bool}{SetYesNoCancelLabels}{\param{const wxString&}{yes},\param{const wxString&}{no},\param{const wxString&}{cancel}}
+
+Overrides the text labels of the Yes, No and Cancel buttons.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+\membersection{wxMessageDialog::SetOKLabel}\label{wxmessagedialogsetyesoklabel}
+
+\func{bool}{SetOKLabel}{\param{const wxString&}{ok}}
+
+Overrides the text label of the OK button.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+\membersection{wxMessageDialog::SetOKCancelLabels}\label{wxmessagedialogsetokcancellabels}
+
+\func{bool}{SetOKCancelLabels}{\param{const wxString&}{ok},\param{const wxString&}{cancel}}
+
+Overrides the text labels of the OK and Cancel buttons.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+\membersection{wxMessageDialog::SetMessage}\label{wxmessagedialogsetmessage}
+
+\func{bool}{SetMessage}{\param{const wxString&}{msg}}
+
+Resets the message.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+\membersection{wxMessageDialog::SetExtendedMessage}\label{wxmessagedialogsetextendedmessage}
+
+\func{bool}{SetExtendedMessage}{\param{const wxString&}{exMsg}
+
+Sets the extended message for the dialog.  Not available on all platforms.  A true return value indicates that the function is supported on the current platform (currently wxMac only).
+
+How the Extended Message is represented depends on the underlying platform.  For example in wxMac default Message Dialogs with no Extended Message will display the Caption in bold with the Message below.  Setting the Extended Message text will mean that the Caption is discarded and the Message is displayed in bold with the Extended Message beneath it.
Index: include/wx/msgdlg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msgdlg.h,v
retrieving revision 1.24
diff -u -r1.24 msgdlg.h
--- include/wx/msgdlg.h	2006/01/23 03:27:33	1.24
+++ include/wx/msgdlg.h	2007/04/13 23:05:37
@@ -18,6 +18,12 @@
 
 class WXDLLEXPORT wxMessageDialogBase
 {
+public: 
+    // Just to get rid of compiler warning
+    virtual ~wxMessageDialogBase()
+    {
+    }
+
 protected:
     // common validation of wxMessageDialog style
     void SetMessageDialogStyle(long style)
@@ -33,6 +39,38 @@
     inline long GetMessageDialogStyle() const
     {
         return m_dialogStyle;
+    }
+    
+    // Methods for setting up more custom message dialogs - returns
+    // false to indicate not implemented
+    virtual bool SetYesNoLabels(const wxString& yes,const wxString& no)
+    {
+        return false;
+    }
+    
+    virtual bool SetYesNoCancelLabels(const wxString& yes, const wxString& no, const wxString& cancel)
+    {
+        return false;
+    }
+    
+    virtual bool SetOKLabel(const wxString& ok)
+    {
+        return false;
+    }
+    
+    virtual bool SetOKCancelLabels(const wxString& ok, const wxString& cancel)
+    {
+        return false;
+    }
+    
+    virtual bool SetMessage(const wxString& msg)
+    {
+        return false;
+    }
+    
+    virtual bool SetExtendedMessage(const wxString& exMsg)
+    {
+        return false;
     }
 
 private:
Index: include/wx/mac/carbon/msgdlg.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/mac/carbon/msgdlg.h,v
retrieving revision 1.9
diff -u -r1.9 msgdlg.h
--- include/wx/mac/carbon/msgdlg.h	2006/02/08 21:46:11	1.9
+++ include/wx/mac/carbon/msgdlg.h	2007/04/13 23:05:37
@@ -29,6 +29,11 @@
 protected:
     wxString    m_caption;
     wxString    m_message;
+    wxString    m_extendedMessage;
+    wxString    m_yes;
+    wxString    m_no;
+    wxString    m_ok;
+    wxString    m_cancel;
     wxWindow *  m_parent;
 public:
     wxMessageDialog(wxWindow *parent,
@@ -38,6 +43,15 @@
                     const wxPoint& pos = wxDefaultPosition);
 
     int ShowModal();
+    
+    // customization of the messag box
+    virtual bool SetYesNoLabels(const wxString& yes,const wxString& no);
+    virtual bool SetYesNoCancelLabels(const wxString& yes, const wxString& no, const wxString& cancel);
+    virtual bool SetOKLabel(const wxString& ok);
+    virtual bool SetOKCancelLabels(const wxString& ok, const wxString& cancel);
+    virtual bool SetMessage(const wxString& msg);
+    virtual bool SetExtendedMessage(const wxString& exMsg);
+
 
 protected:
     // not supported for message dialog, RR
Index: samples/dialogs/dialogs.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/samples/dialogs/dialogs.cpp,v
retrieving revision 1.165
diff -u -r1.165 dialogs.cpp
--- samples/dialogs/dialogs.cpp	2007/04/07 22:14:44	1.165
+++ samples/dialogs/dialogs.cpp	2007/04/13 23:05:38
@@ -588,6 +588,13 @@
     wxMessageDialog dialog( NULL, _T("This is a message box\nA long, long string to test out the message box properly"),
         _T("Message box text"), wxNO_DEFAULT|wxYES_NO|wxCANCEL|wxICON_INFORMATION);
 
+    
+    //  Use advanced stuff here
+    if(dialog.SetYesNoLabels(_T("Answer Yes"),_T("Answer No")))
+    {
+        dialog.SetExtendedMessage(_T("This is the extra message text that can be set on some platforms like wxMac.\n\nNote how caption is removed and message put in its place."));
+    }
+    
     switch ( dialog.ShowModal() )
     {
         case wxID_YES:
Index: src/mac/carbon/msgdlg.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/mac/carbon/msgdlg.cpp,v
retrieving revision 1.33
diff -u -r1.33 msgdlg.cpp
--- src/mac/carbon/msgdlg.cpp	2007/01/12 17:22:02	1.33
+++ src/mac/carbon/msgdlg.cpp	2007/04/13 23:05:40
@@ -31,9 +31,54 @@
     m_caption = caption;
     m_message = message;
     m_parent = parent;
+    m_yes = _("Yes");
+    m_no  = _("No");
+    m_ok  = _("OK");
+    m_cancel = _("Cancel");
+    m_extendedMessage = _T("");
     SetMessageDialogStyle(style);
 }
 
+bool wxMessageDialog::SetYesNoLabels(const wxString& yes,const wxString& no)
+{
+    m_yes = yes;
+    m_no = no;
+    return true;
+}
+
+bool wxMessageDialog::SetYesNoCancelLabels(const wxString& yes, const wxString& no, const wxString& cancel)
+{
+    m_yes = yes;
+    m_no = no;
+    m_cancel = cancel;
+    return true;
+}
+
+bool wxMessageDialog::SetOKLabel(const wxString& ok)
+{
+    m_ok = ok;
+    return true;
+}
+
+bool wxMessageDialog::SetOKCancelLabels(const wxString& ok, const wxString& cancel)
+{
+    m_ok = ok;
+    m_cancel = cancel;
+    return true;
+}
+
+bool wxMessageDialog::SetMessage(const wxString& msg)
+{
+    m_message = msg;
+    return true;
+}
+
+bool wxMessageDialog::SetExtendedMessage(const wxString& exMsg)
+{
+    m_extendedMessage = exMsg;
+    return true;
+}
+
 int wxMessageDialog::ShowModal()
 {
     int resultbutton = wxID_CANCEL;
@@ -52,21 +97,41 @@
     else if (style & wxICON_QUESTION)
         alertType = kAlertCautionAlert;
 
+
+    // work out what to display
+    // if the extened text is empty then we use the caption as the title
+    // and the message as the text (for backwards compatibilty)
+    // but if the extended message is not empty then we use the message as the title
+    // and the extended message as the text because that makes more sense
+    
+    wxString msgtitle,msgtext;
+    if(m_extendedMessage.IsEmpty())
+    {
+        msgtitle = m_caption;
+        msgtext  = m_message;
+    }
+    else
+    {
+        msgtitle = m_message;
+        msgtext  = m_extendedMessage;
+    }
+
+
 #if TARGET_API_MAC_OSX
     if ( !wxIsMainThread() )
     {
         CFStringRef defaultButtonTitle = NULL;
         CFStringRef alternateButtonTitle = NULL;
         CFStringRef otherButtonTitle = NULL;
+        
+        wxMacCFStringHolder cfTitle( msgtitle, m_font.GetEncoding() );
+        wxMacCFStringHolder cfText( msgtext, m_font.GetEncoding() );
+
+        wxMacCFStringHolder cfNoString( m_no.c_str(), m_font.GetEncoding() );
+        wxMacCFStringHolder cfYesString( m_yes.c_str(), m_font.GetEncoding() );
+        wxMacCFStringHolder cfOKString( m_ok.c_str() , m_font.GetEncoding()) ;
+        wxMacCFStringHolder cfCancelString( m_cancel.c_str(), m_font.GetEncoding() );
 
-        wxMacCFStringHolder cfTitle( m_caption, m_font.GetEncoding() );
-        wxMacCFStringHolder cfText( m_message, m_font.GetEncoding() );
-
-        wxMacCFStringHolder cfNoString( _("No"), m_font.GetEncoding() );
-        wxMacCFStringHolder cfYesString( _("Yes"), m_font.GetEncoding() );
-        wxMacCFStringHolder cfOKString( _("OK") , m_font.GetEncoding()) ;
-        wxMacCFStringHolder cfCancelString( _("Cancel"), m_font.GetEncoding() );
-
         int buttonId[4] = { 0, 0, 0, wxID_CANCEL /* time-out */ };
 
         if (style & wxYES_NO)
@@ -115,13 +180,15 @@
 #endif
     {
         short result;
-
+        
         AlertStdCFStringAlertParamRec param;
-        wxMacCFStringHolder cfNoString( _("No"), m_font.GetEncoding() );
-        wxMacCFStringHolder cfYesString( _("Yes"), m_font.GetEncoding() );
+        wxMacCFStringHolder cfNoString( m_no.c_str(), m_font.GetEncoding() );
+        wxMacCFStringHolder cfYesString( m_yes.c_str(), m_font.GetEncoding() );
+        wxMacCFStringHolder cfOKString( m_ok.c_str(), m_font.GetEncoding() );
+        wxMacCFStringHolder cfCancelString( m_cancel.c_str(), m_font.GetEncoding() );
 
-        wxMacCFStringHolder cfTitle( m_caption, m_font.GetEncoding() );
-        wxMacCFStringHolder cfText( m_message, m_font.GetEncoding() );
+        wxMacCFStringHolder cfTitle( msgtitle, m_font.GetEncoding() );
+        wxMacCFStringHolder cfText( msgtext, m_font.GetEncoding() );
 
         param.movable = true;
         param.flags = 0;
@@ -134,7 +201,7 @@
             if (style & wxCANCEL)
             {
                 param.defaultText = cfYesString;
-                param.cancelText = (CFStringRef) kAlertDefaultCancelText;
+                param.cancelText = cfCancelString;
                 param.otherText = cfNoString;
                 param.helpButton = false;
                 param.defaultButton = style & wxNO_DEFAULT ? kAlertStdAlertOtherButton : kAlertStdAlertOKButton;
@@ -156,8 +223,8 @@
             if (style & wxCANCEL)
             {
                 // that's a cancel missing
-                param.defaultText = (CFStringRef) kAlertDefaultOKText;
-                param.cancelText = (CFStringRef) kAlertDefaultCancelText;
+                param.defaultText = cfOKString;
+                param.cancelText = cfCancelString;
                 param.otherText = NULL;
                 param.helpButton = false;
                 param.defaultButton = kAlertStdAlertOKButton;
@@ -165,7 +232,7 @@
             }
             else
             {
-                param.defaultText = (CFStringRef) kAlertDefaultOKText;
+                param.defaultText = cfOKString;
                 param.cancelText = NULL;
                 param.otherText = NULL;
                 param.helpButton = false;

 	  	 

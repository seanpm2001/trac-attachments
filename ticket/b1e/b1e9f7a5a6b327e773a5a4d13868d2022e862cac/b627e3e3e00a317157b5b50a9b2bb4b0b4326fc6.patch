diff --git a/include/wx/generic/infobar.h b/include/wx/generic/infobar.h
index 7beb08a..fe15c8e 100644
--- a/include/wx/generic/infobar.h
+++ b/include/wx/generic/infobar.h
@@ -47,6 +47,12 @@ public:
 
     virtual void RemoveButton(wxWindowID btnid);
 
+    virtual size_t GetButtonCount() const;
+
+    virtual wxWindowID GetButtonId(size_t idx) const;
+
+    virtual bool HasButtonId(wxWindowID btnid) const;
+
     // methods specific to this version
     // --------------------------------
 
diff --git a/include/wx/gtk/infobar.h b/include/wx/gtk/infobar.h
index 7275756..1b8010d 100644
--- a/include/wx/gtk/infobar.h
+++ b/include/wx/gtk/infobar.h
@@ -48,6 +48,11 @@ public:
 
     virtual void RemoveButton(wxWindowID btnid);
 
+    virtual size_t GetButtonCount() const;
+    
+    virtual wxWindowID GetButtonId(size_t idx) const;
+
+    virtual bool HasButtonId(wxWindowID btnid) const;
     // implementation only
     // -------------------
 
diff --git a/include/wx/infobar.h b/include/wx/infobar.h
index 4ae10cb..e9b4b98 100644
--- a/include/wx/infobar.h
+++ b/include/wx/infobar.h
@@ -47,6 +47,10 @@ public:
     // remove a button previously added by AddButton()
     virtual void RemoveButton(wxWindowID btnid) = 0;
 
+    virtual bool HasButtonId(wxWindowID btnid) const = 0;
+    virtual wxWindowID GetButtonId(size_t idx) const = 0;
+    virtual size_t GetButtonCount() const = 0;
+    
 private:
     wxDECLARE_NO_COPY_CLASS(wxInfoBarBase);
 };
diff --git a/interface/wx/infobar.h b/interface/wx/infobar.h
index e87fc77..ee75510 100644
--- a/interface/wx/infobar.h
+++ b/interface/wx/infobar.h
@@ -183,6 +183,39 @@ public:
     void ShowMessage(const wxString& msg, int flags = wxICON_NONE);
 
     /**
+        Returns the number of added Buttons.
+
+        @since 2.9.5
+
+        Note: it returns 0 if there is only the default Button.
+     */
+    virtual size_t GetButtonCount() const;
+
+    /**
+        Returns the Id of the added Button on the given Position.
+        If position is out of range return wxID_NONE.
+
+        @since 2.9.5
+
+        @param idx
+            the idx-th Button right of the rightest Spacer.
+     */
+    virtual wxWindowID GetButtonId(size_t idx) const;
+
+    /**
+        Returns if the InfoBar does have a button with the given Id.
+
+        @since 2.9.5
+
+        Note: it ignores the StandardButton and returns false
+            if that Id is used for this function.
+
+        @param btnid
+            Id of the button to ask for.
+     */
+    virtual bool HasButtonId(wxWindowID btnid) const;
+
+    /**
         @name Generic version customization methods.
 
         All these methods exist in the generic version of the class only.
diff --git a/src/generic/infobar.cpp b/src/generic/infobar.cpp
index 31f0d0e..a4b3816 100644
--- a/src/generic/infobar.cpp
+++ b/src/generic/infobar.cpp
@@ -271,6 +271,108 @@ void wxInfoBarGeneric::AddButton(wxWindowID btnid, const wxString& label)
     sizer->Add(button, wxSizerFlags().Centre().DoubleBorder());
 }
 
+size_t wxInfoBarGeneric::GetButtonCount() const
+{
+    size_t count = 0;
+    wxSizer * const sizer = GetSizer();
+    if(!sizer)
+        return 0;
+
+    // iterate over the sizer items in reverse order
+    const wxSizerItemList& items = sizer->GetChildren();
+    for ( wxSizerItemList::compatibility_iterator node = items.GetLast();
+          node != items.GetFirst();
+          node = node->GetPrevious() )
+    {
+        const wxSizerItem * const item = node->GetData();
+
+        // if we reached the spacer separating the buttons from the text
+        // break the for-loop.
+        if ( item->IsSpacer() )
+        {
+            break;
+        }
+        // return 0 if standard button is found
+        if ( item->GetWindow() == m_button )
+        {
+            return 0;
+        }
+        ++count;
+    }
+    return count;
+}
+
+
+wxWindowID wxInfoBarGeneric::GetButtonId(size_t idx) const
+{
+    if(idx < 0 || idx >= GetButtonCount())
+        return wxID_NONE;
+
+    wxSizer * const sizer = GetSizer();
+    if(!sizer)
+        return wxID_NONE;
+
+    bool spacerfound = false;
+    
+    size_t count = 0;
+    const wxSizerItemList& items = sizer->GetChildren();
+    for ( wxSizerItemList::compatibility_iterator node = items.GetLast();
+          node != items.GetFirst() || node != items.GetLast();
+          )
+    {
+        const wxSizerItem * const item = node->GetData();
+
+        if ( item->IsSpacer() )
+            spacerfound = true;
+
+        if(spacerfound){
+            if (!item->IsSpacer() )
+            {
+                if(count == idx)
+                  if(item->GetWindow() != m_button)
+                    return item->GetWindow()->GetId();
+                ++count;
+            }
+            node = node->GetNext();
+        }else
+            node = node->GetPrevious();
+    }
+    
+    return wxID_NONE;
+}
+
+bool wxInfoBarGeneric::HasButtonId(wxWindowID btnid) const
+{
+    wxSizer * const sizer = GetSizer();
+    if(!sizer)
+        return false;
+
+    // iterate over the sizer items in reverse order to find the last added
+    // button with this id
+    const wxSizerItemList& items = sizer->GetChildren();
+    for ( wxSizerItemList::compatibility_iterator node = items.GetLast();
+          node != items.GetFirst();
+          node = node->GetPrevious() )
+    {
+        const wxSizerItem * const item = node->GetData();
+
+        // if we reached the spacer separating the buttons from the text
+        // then the wanted ID is not inside.
+        if ( item->IsSpacer() )
+        {
+            return false;
+        }
+
+        // check if we found our button
+        if ( item->GetWindow()->GetId() == btnid )
+        {
+            return true;
+        }
+    }
+    
+    return false;
+}
+
 void wxInfoBarGeneric::RemoveButton(wxWindowID btnid)
 {
     wxSizer * const sizer = GetSizer();
diff --git a/src/gtk/infobar.cpp b/src/gtk/infobar.cpp
index 9963cdb..0c8944d 100644
--- a/src/gtk/infobar.cpp
+++ b/src/gtk/infobar.cpp
@@ -224,6 +224,24 @@ GtkWidget *wxInfoBar::GTKAddButton(wxWindowID btnid, const wxString& label)
     return button;
 }
 
+size_t wxInfoBar::GetButtonCount() const
+{
+    if ( !UseNative() )
+        return wxInfoBarGeneric::GetButtonCount();
+
+    return m_impl->m_buttons.size();
+}
+
+wxWindowID wxInfoBar::GetButtonId(size_t idx) const
+{
+    if ( !UseNative() )
+        return wxInfoBarGeneric::GetButtonId(idx);
+
+    if(idx < 0 || idx >= m_impl->m_buttons.size())
+        return wxID_NONE;
+    return m_impl->m_buttons[idx].id;
+}
+
 void wxInfoBar::AddButton(wxWindowID btnid, const wxString& label)
 {
     if ( !UseNative() )
@@ -245,6 +263,24 @@ void wxInfoBar::AddButton(wxWindowID btnid, const wxString& label)
         m_impl->m_buttons.push_back(wxInfoBarGTKImpl::Button(button, btnid));
 }
 
+bool wxInfoBar::HasButtonId(wxWindowID btnid) const
+{
+    if ( !UseNative() )
+        return wxInfoBarGeneric::HasButtonId(btnid);
+
+    // as in the generic version, look for the button starting from the end
+    wxInfoBarGTKImpl::Buttons& buttons = m_impl->m_buttons;
+    for ( wxInfoBarGTKImpl::Buttons::reverse_iterator i = buttons.rbegin();
+          i != buttons.rend();
+          ++i )
+    {
+        if (i->id == btnid)
+            return true;
+    }
+    
+    return false;
+}
+
 void wxInfoBar::RemoveButton(wxWindowID btnid)
 {
     if ( !UseNative() )

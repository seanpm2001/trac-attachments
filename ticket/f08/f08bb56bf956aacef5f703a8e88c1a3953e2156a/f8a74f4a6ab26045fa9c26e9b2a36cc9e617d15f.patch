Index: include/wx/msw/wrapwin.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/wrapwin.h,v
retrieving revision 1.14
diff -b -u -2 -r1.14 wrapwin.h
--- include/wx/msw/wrapwin.h	2005/06/08 20:13:27	1.14
+++ include/wx/msw/wrapwin.h	2006/01/24 20:49:52
@@ -65,18 +65,16 @@
 
 
-// types DWORD_PTR, ULONG_PTR and so on might be not defined in old headers but
-// unfortunately I don't know of any standard way to test for this (as they're
-// typedefs and not #defines), so simply overwrite them in any case in Win32
-// mode -- and if compiling for Win64 they'd better have new headers anyhow
-//
-// this is ugly but what else can we do? even testing for compiler version
-// wouldn't help as you can perfectly well be using an older compiler (VC6)
-// with newer SDK headers
-#if !defined(__WIN64__) && !defined(__WXWINCE__)
+// Types DWORD_PTR, ULONG_PTR and so on are used for 64-bit compatability 
+// in the WINAPI SDK (they are an integral type that is the size of a
+// pointer) on MSVC 7 and later. However, they are not available in older 
+// Platform SDKs, and since they are typedefs and not #defines we simply 
+// overwrite them where they are not needed.
+
+#if !defined(_MSC_VER) || _MSC_VER < 1300
     #define UINT_PTR unsigned int
     #define LONG_PTR long
     #define ULONG_PTR unsigned long
     #define DWORD_PTR unsigned long
-#endif // !__WIN64__
+#endif // !defined(_MSC_VER) || _MSC_VER < 1300
 
 #endif // _WX_WRAPWIN_H_
Index: include/wx/msw/private.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/private.h,v
retrieving revision 1.149
diff -b -u -2 -r1.149 private.h
--- include/wx/msw/private.h	2005/11/15 07:40:09	1.149
+++ include/wx/msw/private.h	2006/01/24 20:49:52
@@ -860,35 +860,33 @@
 #else // __WIN32__
 
-#ifdef __VISUALC__
-    // strangely enough, VC++ 7.1 gives warnings about 32 -> 64 bit conversions
-    // in the functions below, even in spite of the explicit casts
-    #pragma warning(disable:4311)
-    #pragma warning(disable:4312)
-#endif
+// The casts to LONG_PTR here are required even on 32-bit machines
+// for the 64-bit warning mode of later versions of MSVC. As
+// explained on the list:
+// As for why it does [the warning], well pretend you're on a 64-bit 
+// machine - just casting from a long (32-bit) to a void* (64-bit) which 
+// is a integral casted to a non-integral of unequal size which is 
+// generally a warning/error, but using LONG_PTR first casts it to a 
+// longlong which makes it a integral cast to an non-integral of equal 
+// length which generally is warning-less.
 
 inline void *wxGetWindowProc(HWND hwnd)
 {
-    return (void *)::GetWindowLong(hwnd, GWL_WNDPROC);
+    return (void *)(LONG_PTR)::GetWindowLong(hwnd, GWL_WNDPROC);
 }
 
 inline void *wxGetWindowUserData(HWND hwnd)
 {
-    return (void *)::GetWindowLong(hwnd, GWL_USERDATA);
+    return (void *)(LONG_PTR)::GetWindowLong(hwnd, GWL_USERDATA);
 }
 
 inline WNDPROC wxSetWindowProc(HWND hwnd, WNDPROC func)
 {
-    return (WNDPROC)::SetWindowLong(hwnd, GWL_WNDPROC, (LONG)func);
+    return (WNDPROC)(LONG_PTR)::SetWindowLong(hwnd, GWL_WNDPROC, (LONG_PTR)func);
 }
 
 inline void *wxSetWindowUserData(HWND hwnd, void *data)
 {
-    return (void *)::SetWindowLong(hwnd, GWL_USERDATA, (LONG)data);
+    return (void *)(LONG_PTR)::SetWindowLong(hwnd, GWL_USERDATA, (LONG_PTR)data);
 }
-
-#ifdef __VISUALC__
-    #pragma warning(default:4311)
-    #pragma warning(default:4312)
-#endif
 
 #endif // __WIN64__/__WIN32__

 	  	 

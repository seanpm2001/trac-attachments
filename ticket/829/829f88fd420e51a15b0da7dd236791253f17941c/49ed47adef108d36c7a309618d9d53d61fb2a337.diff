Index: src/gtk/files.lst
===================================================================
--- src/gtk/files.lst	(revision 21)
+++ src/gtk/files.lst	(revision 21)
@@ -9,6 +9,7 @@
 		generic/colrdlgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dirdlgg.cpp \
 		generic/dragimgg.cpp \
@@ -34,6 +35,7 @@
 		generic/prop.cpp \
 		generic/propform.cpp \
 		generic/proplist.cpp \
+		generic/rawbtmpg.cpp \
 		generic/sashwin.cpp \
 		generic/scrlwing.cpp \
 		generic/spinctlg.cpp \
@@ -68,6 +70,7 @@
 		common/dbgrid.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -140,6 +143,7 @@
 		common/protocol.cpp \
 		common/quantize.cpp \
 		common/radiocmn.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -320,6 +324,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -436,6 +441,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -580,6 +586,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -601,6 +608,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -657,6 +665,7 @@
 		dbgrid.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -729,6 +738,7 @@
 		protocol.o \
 		quantize.o \
 		radiocmn.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -776,6 +786,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		dragimgg.o \
@@ -801,6 +812,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
@@ -887,6 +899,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		dragimgg.o \
@@ -912,6 +925,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
Index: src/wxUniv.dsp
===================================================================
--- src/wxUniv.dsp	(revision 21)
+++ src/wxUniv.dsp	(revision 21)
@@ -49,7 +49,7 @@
 # ADD BSC32 /nologo
 LIB32=link.exe -lib
 # ADD BASE LIB32 /nologo
-# ADD LIB32 /nologo
+# ADD LIB32 /nologo /out:"..\lib\wxuniv.lib"
 
 !ELSEIF  "$(CFG)" == "wxUniv - Win32 Debug"
 
@@ -221,11 +221,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\common\extended.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
 SOURCE=.\common\fddlgcmn.cpp
 # End Source File
 # Begin Source File
@@ -554,11 +549,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\common\unzip.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
 SOURCE=.\common\url.cpp
 # End Source File
 # Begin Source File
@@ -609,6 +599,18 @@
 
 SOURCE=.\common\zstream.cpp
 # End Source File
+
+# Begin Source File
+
+SOURCE=.\common\extended.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
+SOURCE=.\common\unzip.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+
 # End Group
 # Begin Group "Generic Files"
 
@@ -643,6 +645,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\generic\dcrawg.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\generic\dirctrlg.cpp
 # End Source File
 # Begin Source File
@@ -743,6 +749,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\generic\rawbtmpg.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\generic\sashwin.cpp
 # End Source File
 # Begin Source File
@@ -793,6 +803,7 @@
 
 SOURCE=.\generic\wizard.cpp
 # End Source File
+
 # End Group
 # Begin Group "wxHTML Files"
 
@@ -881,12 +892,18 @@
 
 SOURCE=.\html\winpars.cpp
 # End Source File
+
 # End Group
 # Begin Group "MSW Files"
 
 # PROP Default_Filter ""
 # Begin Source File
 
+SOURCE=.\msw\dummy.cpp
+# ADD CPP /Yc"wx/wxprec.h"
+# End Source File
+# Begin Source File
+
 SOURCE=.\msw\app.cpp
 # End Source File
 # Begin Source File
@@ -951,11 +968,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\msw\dummy.cpp
-# ADD CPP /Yc"wx/wxprec.h"
-# End Source File
-# Begin Source File
-
 SOURCE=.\msw\evtloop.cpp
 # End Source File
 # Begin Source File
@@ -980,16 +992,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\msw\gsocket.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
-SOURCE=.\msw\gsockmsw.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
 SOURCE=.\msw\icon.cpp
 # End Source File
 # Begin Source File
@@ -1060,26 +1062,22 @@
 
 SOURCE=.\msw\window.cpp
 # End Source File
-# End Group
-# Begin Group "Universal Files"
-
-# PROP Default_Filter ""
-# Begin Group "Theme Files"
 
-# PROP Default_Filter ""
 # Begin Source File
 
-SOURCE=.\univ\themes\gtk.cpp
+SOURCE=.\msw\gsocket.c
+# SUBTRACT CPP /YX /Yc /Yu
 # End Source File
 # Begin Source File
 
-SOURCE=.\univ\themes\metal.cpp
+SOURCE=.\msw\gsockmsw.c
+# SUBTRACT CPP /YX /Yc /Yu
 # End Source File
-# Begin Source File
 
-SOURCE=.\univ\themes\win32.cpp
-# End Source File
 # End Group
+# Begin Group "Universal Files"
+
+# PROP Default_Filter ""
 # Begin Source File
 
 SOURCE=.\univ\bmpbuttn.cpp
@@ -1216,6 +1214,24 @@
 
 SOURCE=.\univ\winuniv.cpp
 # End Source File
+
+# Begin Group "Theme Files"
+
+# PROP Default_Filter ""
+# Begin Source File
+
+SOURCE=.\univ\themes\gtk.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\univ\themes\metal.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\univ\themes\win32.cpp
+# End Source File
+
+# End Group
 # End Group
 # Begin Group "Headers"
 
@@ -1226,9 +1242,7 @@
 # Begin Source File
 
 SOURCE=..\include\wx\univ\setup.h
-
 !IF  "$(CFG)" == "wxUniv - Win32 Release"
-
 # Begin Custom Build - Creating lib\univ\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\univ\setup.h
 
@@ -1236,9 +1250,7 @@
 	copy "$(InputPath)" ..\lib\univ\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxUniv - Win32 Debug"
-
 # Begin Custom Build - Creating lib\univd\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\univ\setup.h
 
@@ -1246,9 +1258,7 @@
 	copy "$(InputPath)" ..\lib\univd\wx\setup.h
 
 # End Custom Build
-
 !ENDIF 
-
 # End Source File
 # End Group
 # Begin Group "Common"
@@ -1444,6 +1454,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\dcraw.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\dcscreen.h
 # End Source File
 # Begin Source File
@@ -1904,6 +1918,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\rawbtmp.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\regex.h
 # End Source File
 # Begin Source File
@@ -2202,6 +2220,7 @@
 
 SOURCE=..\include\wx\zstream.h
 # End Source File
+
 # End Group
 # Begin Group "MSW"
 
@@ -2236,6 +2255,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\generic\dcrawg.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\generic\dirctrlg.h
 # End Source File
 # Begin Source File
@@ -2292,6 +2315,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\generic\mdig.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\generic\msgdlgg.h
 # End Source File
 # Begin Source File
@@ -2320,6 +2347,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\generic\rawbtmpg.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\generic\sashwin.h
 # End Source File
 # Begin Source File
@@ -2366,6 +2397,7 @@
 
 SOURCE=..\include\wx\generic\wizard.h
 # End Source File
+
 # End Group
 # Begin Group "HTML"
 
@@ -2422,6 +2454,7 @@
 
 SOURCE=..\include\wx\html\winpars.h
 # End Source File
+
 # End Group
 # Begin Group "Universal"
 
Index: src/mac/files.lst
===================================================================
--- src/mac/files.lst	(revision 21)
+++ src/mac/files.lst	(revision 21)
@@ -8,6 +8,7 @@
 		generic/colrdlgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dirdlgg.cpp \
 		generic/dragimgg.cpp \
@@ -31,6 +32,7 @@
 		generic/prop.cpp \
 		generic/propform.cpp \
 		generic/proplist.cpp \
+		generic/rawbtmpg.cpp \
 		generic/sashwin.cpp \
 		generic/scrlwing.cpp \
 		generic/spinctlg.cpp \
@@ -65,6 +67,7 @@
 		common/db.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -137,6 +140,7 @@
 		common/process.cpp \
 		common/protocol.cpp \
 		common/quantize.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -326,6 +330,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -442,6 +447,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -607,6 +613,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -621,7 +628,7 @@
 		generic/imaglist.h \
 		generic/laywin.h \
 		generic/listctrl.h \
-		generic/mdig.cpp \
+		generic/mdig.h \
 		generic/msgdlgg.h \
 		generic/notebook.h \
 		generic/paletteg.h \
@@ -629,6 +636,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -686,6 +694,7 @@
 		db.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -758,6 +767,7 @@
 		process.o \
 		protocol.o \
 		quantize.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -804,6 +814,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		dragimgg.o \
@@ -827,6 +838,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
Index: src/os2/files.lst
===================================================================
--- src/os2/files.lst	(revision 21)
+++ src/os2/files.lst	(revision 21)
@@ -8,6 +8,7 @@
 		generic/colrdlgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dirdlgg.cpp \
 		generic/fdrepdlg.cpp \
@@ -29,6 +30,7 @@
 		generic/prop.cpp \
 		generic/propform.cpp \
 		generic/proplist.cpp \
+		generic/rawbtmpg.cpp \
 		generic/sashwin.cpp \
 		generic/scrlwing.cpp \
 		generic/spinctlg.cpp \
@@ -62,6 +64,7 @@
 		common/dbgrid.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -134,6 +137,7 @@
 		common/protocol.cpp \
 		common/quantize.cpp \
 		common/radiocmn.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -320,6 +324,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -336,6 +341,7 @@
 		dynarray.h \
 		dynlib.h \
 		dynload.h \
+		effects.h \
 		encconv.h \
 		event.h \
 		expr.h \
@@ -435,6 +441,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -589,6 +596,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -603,7 +611,7 @@
 		generic/imaglist.h \
 		generic/laywin.h \
 		generic/listctrl.h \
-		generic/mdig.cpp \
+		generic/mdig.h \
 		generic/msgdlgg.h \
 		generic/notebook.h \
 		generic/paletteg.h \
@@ -611,6 +619,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -663,6 +672,7 @@
 		dbgrid.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -735,6 +745,7 @@
 		protocol.o \
 		quantize.o \
 		radiocmn.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -781,6 +792,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		fdrepdlg.o \
@@ -802,6 +814,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
Index: src/generic/dcrawg.cpp
===================================================================
--- src/generic/dcrawg.cpp	(revision 21)
+++ src/generic/dcrawg.cpp	(revision 21)
@@ -0,0 +1,309 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcrawg.cpp
+// Purpose:     wxRawBitmapDCGeneric class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcrawg.cpp,v 1.3 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "dcrawg.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#include "wx/log.h"
+#endif // WX_PRECOMP
+
+#include "wx/dcraw.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmapDCGeneric
+//-------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxRawBitmapDCGeneric, wxRawBitmapDCBase)
+
+#define WX_RBDC_UNIMPLEMENTED(FUNC) \
+    wxLogError("wxRawBitmapDCGeneric::%s is unimplemented.  Code may be " \
+			   "added at %s line %d and submitted to the wxWindows " \
+			   "project.", FUNC, __FILE__, __LINE__);
+
+wxRawBitmapDCGeneric::wxRawBitmapDCGeneric()
+{
+	// TODO - Implement.
+}
+
+wxRawBitmapDCGeneric::wxRawBitmapDCGeneric(wxRawBitmap &bitmap)
+{
+	// TODO - Implement.
+}
+	
+void wxRawBitmapDCGeneric::SelectObject(wxRawBitmap& bitmap)
+{
+	// TODO - Implement.
+}
+
+void wxRawBitmapDCGeneric::Clear()
+{
+    WX_RBDC_UNIMPLEMENTED("Clear");
+}
+
+void wxRawBitmapDCGeneric::SetFont(const wxFont& WXUNUSED(font))
+{
+    WX_RBDC_UNIMPLEMENTED("SetFont");
+}
+
+void wxRawBitmapDCGeneric::SetPen(const wxPen& WXUNUSED(pen))
+{
+    WX_RBDC_UNIMPLEMENTED("SetPen");
+}
+
+void wxRawBitmapDCGeneric::SetBrush(const wxBrush& WXUNUSED(brush))
+{
+    WX_RBDC_UNIMPLEMENTED("SetBrush");
+}
+
+void wxRawBitmapDCGeneric::SetBackground(const wxBrush& WXUNUSED(brush))
+{
+    WX_RBDC_UNIMPLEMENTED("SetBackground");
+}
+
+void wxRawBitmapDCGeneric::SetBackgroundMode(int WXUNUSED(mode))
+{
+    WX_RBDC_UNIMPLEMENTED("SetBackgroundMode");
+}
+
+#if wxUSE_PALETTE
+void wxRawBitmapDCGeneric::SetPalette(const wxPalette& WXUNUSED(palette))
+{
+    WX_RBDC_UNIMPLEMENTED("SetPalette");
+}
+#endif // wxUSE_PALETTE
+
+wxCoord wxRawBitmapDCGeneric::GetCharHeight() const
+{
+    WX_RBDC_UNIMPLEMENTED("GetCharHeight");
+	return 0;
+}
+
+wxCoord wxRawBitmapDCGeneric::GetCharWidth() const
+{
+    WX_RBDC_UNIMPLEMENTED("GetCharWidth");
+	return 0;
+}
+
+bool wxRawBitmapDCGeneric::CanDrawBitmap() const
+{
+    WX_RBDC_UNIMPLEMENTED("CanDrawBitmap");
+	return false;
+}
+
+bool wxRawBitmapDCGeneric::CanGetTextExtent() const
+{
+    WX_RBDC_UNIMPLEMENTED("CanGetTextExtent");
+	return false;
+}
+
+int wxRawBitmapDCGeneric::GetDepth() const
+{
+    WX_RBDC_UNIMPLEMENTED("GetDepth");
+	return 0;
+}
+
+void wxRawBitmapDCGeneric::SetLogicalFunction(int WXUNUSED(function))
+{
+    WX_RBDC_UNIMPLEMENTED("SetLogicalFunction");
+}
+
+bool wxRawBitmapDCGeneric::DoFloodFill(wxCoord WXUNUSED(x),
+									   wxCoord WXUNUSED(y),
+									   const wxColour& WXUNUSED(col),
+									   int WXUNUSED(style))
+{
+    WX_RBDC_UNIMPLEMENTED("DoFloodFill");
+	return false;
+}
+	
+bool wxRawBitmapDCGeneric::DoGetPixel(wxCoord WXUNUSED(x), wxCoord WXUNUSED(y),
+									  wxColour *WXUNUSED(col)) const
+{
+    WX_RBDC_UNIMPLEMENTED("DoGetPixel");
+	return false;
+}
+	
+void wxRawBitmapDCGeneric::DoDrawPoint(wxCoord WXUNUSED(x),
+									   wxCoord WXUNUSED(y))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawPoint");
+}
+
+void wxRawBitmapDCGeneric::DoDrawLine(wxCoord WXUNUSED(x1),
+									  wxCoord WXUNUSED(y1),
+									  wxCoord WXUNUSED(x2),
+									  wxCoord WXUNUSED(y2))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawLine");
+}
+	
+void wxRawBitmapDCGeneric::DoDrawArc(wxCoord WXUNUSED(x1),
+									 wxCoord WXUNUSED(y1),
+									 wxCoord WXUNUSED(x2),
+									 wxCoord WXUNUSED(y2),
+									 wxCoord WXUNUSED(xc),
+									 wxCoord WXUNUSED(yc))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawArc");
+}
+
+void wxRawBitmapDCGeneric::DoDrawCheckMark(wxCoord WXUNUSED(x),
+										   wxCoord WXUNUSED(y),
+										   wxCoord WXUNUSED(width),
+										   wxCoord WXUNUSED(height))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawCheckMark");
+}
+
+void wxRawBitmapDCGeneric::DoDrawEllipticArc(wxCoord WXUNUSED(x),
+											 wxCoord WXUNUSED(y),
+											 wxCoord WXUNUSED(w),
+											 wxCoord WXUNUSED(h),
+											 double WXUNUSED(sa),
+											 double WXUNUSED(ea))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawEllipticArc");
+}
+
+void wxRawBitmapDCGeneric::DoDrawRectangle(wxCoord WXUNUSED(x),
+										   wxCoord WXUNUSED(y),
+										   wxCoord WXUNUSED(width),
+										   wxCoord WXUNUSED(height))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawRectangle");
+}
+
+void wxRawBitmapDCGeneric::DoDrawRoundedRectangle(wxCoord WXUNUSED(x),
+												  wxCoord WXUNUSED(y),
+												  wxCoord WXUNUSED(width),
+												  wxCoord WXUNUSED(height),
+												  double WXUNUSED(radius))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawRoundedRectangle");
+}
+
+void wxRawBitmapDCGeneric::DoDrawEllipse(wxCoord WXUNUSED(x),
+										 wxCoord WXUNUSED(y),
+										 wxCoord WXUNUSED(width),
+										 wxCoord WXUNUSED(height))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawEllipse");
+}
+
+void wxRawBitmapDCGeneric::DoCrossHair(wxCoord WXUNUSED(x),
+									   wxCoord WXUNUSED(y))
+{
+    WX_RBDC_UNIMPLEMENTED("DoCrossHair");
+}
+	
+void wxRawBitmapDCGeneric::DoDrawIcon(const wxIcon& WXUNUSED(icon),
+									  wxCoord WXUNUSED(x),
+									  wxCoord WXUNUSED(y))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawIcon");
+}
+
+void wxRawBitmapDCGeneric::DoDrawBitmap(const wxBitmap &WXUNUSED(bmp),
+										wxCoord WXUNUSED(x),
+										wxCoord WXUNUSED(y),
+										bool WXUNUSED(useMask))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawBitmap");
+}
+	
+void wxRawBitmapDCGeneric::DoDrawText(const wxString& WXUNUSED(text),
+									  wxCoord WXUNUSED(x), wxCoord WXUNUSED(y))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawText");
+}
+
+void wxRawBitmapDCGeneric::DoDrawRotatedText(const wxString& WXUNUSED(text),
+											 wxCoord WXUNUSED(x),
+											 wxCoord WXUNUSED(y),
+											 double WXUNUSED(angle))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawRotatedText");
+}
+	
+bool wxRawBitmapDCGeneric::DoBlit(wxCoord WXUNUSED(xdest),
+								  wxCoord WXUNUSED(ydest),
+								  wxCoord WXUNUSED(width),
+								  wxCoord WXUNUSED(height),
+								  wxDC *WXUNUSED(source),
+								  wxCoord WXUNUSED(xsrc),
+								  wxCoord WXUNUSED(ysrc),
+								  int WXUNUSED(rop),
+								  bool WXUNUSED(useMask),
+								  wxCoord WXUNUSED(xsrcMask),
+								  wxCoord WXUNUSED(ysrcMask))
+{
+    WX_RBDC_UNIMPLEMENTED("DoBlit");
+	return false;
+}
+
+void wxRawBitmapDCGeneric::DoGetSize(int *WXUNUSED(width),
+									 int *WXUNUSED(height)) const
+{
+    WX_RBDC_UNIMPLEMENTED("DoGetSize");
+}
+	
+void wxRawBitmapDCGeneric::DoDrawLines(int WXUNUSED(n),
+									   wxPoint WXUNUSED(points)[],
+								wxCoord WXUNUSED(xoffset),
+								wxCoord WXUNUSED(yoffset))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawLines");
+}
+
+void wxRawBitmapDCGeneric::DoDrawPolygon(int WXUNUSED(n),
+										 wxPoint WXUNUSED(points)[],
+										 wxCoord WXUNUSED(xoffset),
+										 wxCoord WXUNUSED(yoffset),
+										 int WXUNUSED(fillStyle))
+{
+    WX_RBDC_UNIMPLEMENTED("DoDrawPolygon");
+}
+	
+void wxRawBitmapDCGeneric::DoSetClippingRegionAsRegion(
+	const wxRegion& WXUNUSED(region))
+{
+    WX_RBDC_UNIMPLEMENTED("DoSetClippingRegionAsRegion");
+}
+
+void wxRawBitmapDCGeneric::DoSetClippingRegion(wxCoord WXUNUSED(x),
+											   wxCoord WXUNUSED(y),
+											   wxCoord WXUNUSED(width),
+											   wxCoord WXUNUSED(height))
+{
+    WX_RBDC_UNIMPLEMENTED("DoSetClippingRegion");
+}
+
+void wxRawBitmapDCGeneric::DoGetTextExtent(const wxString& WXUNUSED(string),
+										   wxCoord *WXUNUSED(x),
+										   wxCoord *WXUNUSED(y),
+										   wxCoord *WXUNUSED(descent),
+										   wxCoord *WXUNUSED(externalLeading),
+										   wxFont *WXUNUSED(theFont)) const
+{
+    WX_RBDC_UNIMPLEMENTED("DoGetTextExtent");
+}
+
+#endif // wxUSE_RAWBITMAP
Index: src/generic/rawbtmpg.cpp
===================================================================
--- src/generic/rawbtmpg.cpp	(revision 21)
+++ src/generic/rawbtmpg.cpp	(revision 21)
@@ -0,0 +1,139 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmpg.cpp
+// Purpose:     wxRawBitmap class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmpg.cpp,v 1.4 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "rawbtmpg.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#include "wx/dc.h"
+#endif // WX_PRECOMP
+
+#include "wx/rawbtmp.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmapRefData
+//-------------------------------------------------------------------------
+
+wxRawBitmapRefData::wxRawBitmapRefData(wxCoord width, wxCoord height,
+									   wxRawBitmapType type)
+	: m_Type(type), m_Image(width, height)
+{
+	// If you want another color depth, feel free to implement it.
+	wxASSERT(type == wxRAWBITMAP_24BIT);
+}
+
+//-------------------------------------------------------------------------
+// wxRawBitmap
+//-------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxRawBitmap, wxObject)
+
+wxRawBitmap::wxRawBitmap()
+{
+	UnRef();
+}
+
+wxRawBitmap::wxRawBitmap(wxCoord width, wxCoord height,
+						 wxRawBitmapType type)
+{
+	SetRefData(new wxRawBitmapRefData(width, height, type));
+}
+
+bool wxRawBitmap::Ok() const
+{
+	return (GetRefData() != NULL);
+}
+
+wxCoord wxRawBitmap::GetWidth() const
+{
+	return GetImage()->GetWidth();
+}
+
+wxCoord wxRawBitmap::GetHeight() const
+{
+	return GetImage()->GetHeight();
+}
+
+int wxRawBitmap::GetDepth() const
+{
+	return 24;
+}
+
+wxRawBitmapType wxRawBitmap::GetType() const
+{
+	return GetRawBitmapRefData()->m_Type;
+}
+
+wxRawBitmapPixelRef24 wxRawBitmap::GetData24()
+{
+	return GetImage()->GetData();
+}
+
+wxRawBitmapStride24 wxRawBitmap::GetStride24()
+{
+	return GetWidth() * 3;
+}
+
+wxRawBitmapLimits24 wxRawBitmap::GetLimits24()
+{
+	wxRawBitmapLimits24 limits;
+	limits.begin_ = GetData24();
+	limits.end_ = limits.begin_ + GetHeight() * GetStride24();
+	return limits;
+}
+
+bool wxRawBitmap::BlitTo(wxDC *dest, wxCoord xdest, wxCoord ydest,
+						 wxCoord width, wxCoord height,
+						 wxCoord xsrc, wxCoord ysrc)
+{
+	// FIXME - Check that the source rectangle is actually valid.
+	if (xsrc == 0 && ysrc == 0 &&
+		width == GetWidth() && height == GetHeight())
+	{
+		// Draw the whole image to the specified wxDC.
+		wxBitmap bitmap(*GetImage());
+		dest->DrawBitmap(bitmap, xdest, ydest);
+		return true;
+	}
+	else
+	{
+		// Extract a portion of the image, and draw it to
+		// the DC.  Painfully slow...
+		wxRect rect(xsrc, ysrc, width, height);
+		wxImage subimage = GetImage()->GetSubImage(rect);
+		wxBitmap bitmap(subimage);
+		dest->DrawBitmap(bitmap, xdest, ydest);
+		return true;
+	}
+}
+
+wxRawBitmapRefData *wxRawBitmap::GetRawBitmapRefData() const
+{
+	wxRawBitmapRefData *rawBitmapRefData = (wxRawBitmapRefData *) GetRefData();
+	wxASSERT(rawBitmapRefData != NULL);
+	return rawBitmapRefData;
+}
+
+wxImage *wxRawBitmap::GetImage() const
+{
+	return &(GetRawBitmapRefData()->m_Image);
+}
+
+#endif // wxUSE_RAWBITMAP
Index: src/wxBase.dsp
===================================================================
--- src/wxBase.dsp	(revision 21)
+++ src/wxBase.dsp	(revision 21)
@@ -2,8 +2,8 @@
 # Microsoft Developer Studio Generated Build File, Format Version 6.00
 # ** DO NOT EDIT **
 
-# TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
 # TARGTYPE "Win32 (x86) Static Library" 0x0104
+# TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
 
 CFG=wxBase - Win32 Debug
 !MESSAGE This is not a valid makefile. To build this project using NMAKE,
@@ -32,6 +32,8 @@
 # PROP AllowPerConfigDependencies 0
 # PROP Scc_ProjName ""
 # PROP Scc_LocalPath ""
+CPP=cl.exe
+RSC=rc.exe
 
 !IF  "$(CFG)" == "wxBase - Win32 Release Unicode DLL"
 
@@ -46,13 +48,10 @@
 # PROP Intermediate_Dir "../BaseReleaseUnicodeDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_USRDLL" /D "WXBASEDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/basedllu" /I "../include" /I "./regex" /I "./zlib" /D "NDEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /D "WXMAKINGDLL" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
-MTL=midl.exe
 # ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
-RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "NDEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "NDEBUG"
 BSC32=bscmake.exe
@@ -60,7 +59,7 @@
 # ADD BSC32 /nologo
 LINK32=link.exe
 # ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /machine:I386 /out:"../lib/wxbase233u.dll"
-# ADD LINK32 ../lib/zlib.lib ../lib/regex.lib kernel32.lib user32.lib advapi32.lib wsock32.lib shell32.lib /nologo /version:2.3 /dll /machine:I386 /out:"../lib/wxbase233u.dll"
+# ADD LINK32 kernel32.lib user32.lib advapi32.lib shell32.lib wsock32.lib ../lib/zlib.lib ../lib/regex.lib /nologo /version:2.3 /dll /machine:I386 /out:"../lib/wxbase233u.dll"
 
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug Unicode DLL"
 
@@ -75,21 +74,18 @@
 # PROP Intermediate_Dir "../BaseDebugUnicodeDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_USRDLL" /D "WXBASEDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/basedllud" /I "../include" /I "./regex" /I "./zlib" /D "_DEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /D "WXMAKINGDLL" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
-MTL=midl.exe
 # ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
-RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "_DEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "_DEBUG"
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
 # ADD BSC32 /nologo
 LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /debug /machine:I386 /out:"../lib/wxbase233ud.dll" /pdbtype:sept
-# ADD LINK32 ../lib/zlibd.lib ../lib/regexd.lib kernel32.lib user32.lib advapi32.lib wsock32.lib shell32.lib /nologo /version:2.2 /dll /debug /machine:I386 /out:"../lib/wxbase233ud.dll" /pdbtype:sept
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxbase233ud.dll"
+# ADD LINK32 kernel32.lib user32.lib advapi32.lib shell32.lib wsock32.lib ../lib/zlibd.lib ../lib/regexd.lib /nologo /version:2.2 /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxbase233ud.dll"
 
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Release Unicode"
 
@@ -103,10 +99,8 @@
 # PROP Output_Dir "..\lib"
 # PROP Intermediate_Dir "..\BaseReleaseUnicode"
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/baseu" /I "../include" /I "./regex" /I "./zlib" /D "NDEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
-RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -128,15 +122,13 @@
 # PROP Output_Dir "..\lib"
 # PROP Intermediate_Dir "..\BaseDebugUnicode"
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/baseud" /I "../include" /I "./regex" /I "./zlib" /D "_DEBUG" /D wxUSE_GUI=0 /D "WIN32" /D "__WXDEBUG__" /D WINVER=0x400 /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
-RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
+# ADD BSC32 /nologo /o"../lib/wxbase.bsc"
 LIB32=link.exe -lib
 # ADD BASE LIB32 /nologo
 # ADD LIB32 /nologo /out:"..\lib\wxbaseud.lib"
@@ -154,13 +146,10 @@
 # PROP Intermediate_Dir "../BaseReleaseDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_USRDLL" /D "WXBASEDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/basedll" /I "../include" /I "./regex" /I "./zlib" /D "NDEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /D "WXMAKINGDLL" /Yu"wx/wxprec.h" /FD /c
-MTL=midl.exe
 # ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
-RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "NDEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "NDEBUG"
 BSC32=bscmake.exe
@@ -168,7 +157,7 @@
 # ADD BSC32 /nologo
 LINK32=link.exe
 # ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /machine:I386 /out:"../lib/wxbase233.dll"
-# ADD LINK32 ../lib/zlib.lib ../lib/regex.lib kernel32.lib user32.lib advapi32.lib wsock32.lib shell32.lib /nologo /version:2.3 /dll /machine:I386 /out:"../lib/wxbase233.dll"
+# ADD LINK32 kernel32.lib user32.lib advapi32.lib shell32.lib wsock32.lib ../lib/zlib.lib ../lib/regex.lib /nologo /version:2.3 /dll /machine:I386 /out:"../lib/wxbase233.dll"
 
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug DLL"
 
@@ -183,21 +172,18 @@
 # PROP Intermediate_Dir "../BaseDebugDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_USRDLL" /D "WXBASEDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/basedlld" /I "../include" /I "./regex" /I "./zlib" /D "_DEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /D "WXMAKINGDLL" /Yu"wx/wxprec.h" /FD /c
-MTL=midl.exe
 # ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
-RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "_DEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "_DEBUG"
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
 # ADD BSC32 /nologo
 LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /debug /machine:I386 /out:"../lib/wxbase233d.dll" /pdbtype:sept
-# ADD LINK32 ../lib/zlibd.lib ../lib/regexd.lib kernel32.lib user32.lib advapi32.lib wsock32.lib shell32.lib /nologo /version:2.2 /dll /debug /machine:I386 /out:"../lib/wxbase233d.dll" /pdbtype:sept
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxbase233d.dll"
+# ADD LINK32 kernel32.lib user32.lib advapi32.lib shell32.lib wsock32.lib ../lib/zlibd.lib ../lib/regexd.lib /nologo /version:2.2 /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxbase233d.dll"
 
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Release"
 
@@ -211,10 +197,8 @@
 # PROP Output_Dir "..\lib"
 # PROP Intermediate_Dir "..\BaseRelease"
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/base" /I "../include" /I "./regex" /I "./zlib" /D "NDEBUG" /D wxUSE_GUI=0 /D "WIN32" /D WINVER=0x400 /Yu"wx/wxprec.h" /FD /c
-RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -222,7 +206,7 @@
 # ADD BSC32 /nologo
 LIB32=link.exe -lib
 # ADD BASE LIB32 /nologo
-# ADD LIB32 /nologo
+# ADD LIB32 /nologo /out:"..\lib\wxbase.lib"
 
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug"
 
@@ -236,15 +220,13 @@
 # PROP Output_Dir "..\lib"
 # PROP Intermediate_Dir "..\BaseDebug"
 # PROP Target_Dir ""
-CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/based" /I "../include" /I "./regex" /I "./zlib" /D "_DEBUG" /D wxUSE_GUI=0 /D "WIN32" /D "__WXDEBUG__" /D WINVER=0x400 /Yu"wx/wxprec.h" /FD /c
-RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
+# ADD BSC32 /nologo /o"../lib/wxbase.bsc"
 LIB32=link.exe -lib
 # ADD BASE LIB32 /nologo
 # ADD LIB32 /nologo /out:"..\lib\wxbased.lib"
@@ -261,6 +243,7 @@
 # Name "wxBase - Win32 Debug DLL"
 # Name "wxBase - Win32 Release"
 # Name "wxBase - Win32 Debug"
+
 # Begin Group "Common Files"
 
 # PROP Default_Filter ""
@@ -322,11 +305,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\common\extended.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
 SOURCE=.\common\ffile.cpp
 # End Source File
 # Begin Source File
@@ -383,10 +361,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\common\init.cpp
-# End Source File
-# Begin Source File
-
 SOURCE=.\common\intl.cpp
 # End Source File
 # Begin Source File
@@ -499,11 +473,6 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\common\unzip.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
 SOURCE=.\common\url.cpp
 # End Source File
 # Begin Source File
@@ -530,18 +499,26 @@
 
 SOURCE=.\common\zstream.cpp
 # End Source File
-# End Group
-# Begin Group "MSW Files"
+# Begin Source File
+
+SOURCE=.\common\init.cpp
+# End Source File
 
-# PROP Default_Filter ""
 # Begin Source File
 
-SOURCE=.\msw\dde.cpp
+SOURCE=.\common\extended.c
+# SUBTRACT CPP /YX /Yc /Yu
 # End Source File
 # Begin Source File
 
-SOURCE=.\msw\dir.cpp
+SOURCE=.\common\unzip.c
+# SUBTRACT CPP /YX /Yc /Yu
 # End Source File
+
+# End Group
+# Begin Group "MSW Files"
+
+# PROP Default_Filter ""
 # Begin Source File
 
 SOURCE=.\msw\dummy.cpp
@@ -549,13 +526,11 @@
 # End Source File
 # Begin Source File
 
-SOURCE=.\msw\gsocket.c
-# SUBTRACT CPP /YX /Yc /Yu
+SOURCE=.\msw\dde.cpp
 # End Source File
 # Begin Source File
 
-SOURCE=.\msw\gsockmsw.c
-# SUBTRACT CPP /YX /Yc /Yu
+SOURCE=.\msw\dir.cpp
 # End Source File
 # Begin Source File
 
@@ -593,6 +568,18 @@
 
 SOURCE=.\msw\volume.cpp
 # End Source File
+
+# Begin Source File
+
+SOURCE=.\msw\gsocket.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
+SOURCE=.\msw\gsockmsw.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+
 # End Group
 # Begin Group "Headers"
 
@@ -603,9 +590,7 @@
 # Begin Source File
 
 SOURCE=..\include\wx\msw\setup.h
-
 !IF  "$(CFG)" == "wxBase - Win32 Release Unicode DLL"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -613,19 +598,14 @@
 	copy "$(InputPath)" ..\lib\basedllu\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug Unicode DLL"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
 "../lib/basedllud/wx/setup.h" : $(SOURCE) "$(INTDIR)" "$(OUTDIR)"
 	copy "$(InputPath)" ..\lib\basedllud\wx\setup.h
-
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Release Unicode"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -633,9 +613,7 @@
 	copy "$(InputPath)" ..\lib\baseu\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug Unicode"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -643,9 +621,7 @@
 	copy "$(InputPath)" ..\lib\baseud\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Release DLL"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -653,19 +629,14 @@
 	copy "$(InputPath)" ..\lib\basedll\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug DLL"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
 "../lib/basedlld/wx/setup.h" : $(SOURCE) "$(INTDIR)" "$(OUTDIR)"
 	copy "$(InputPath)" ..\lib\basedlld\wx\setup.h
-
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Release"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -673,9 +644,7 @@
 	copy "$(InputPath)" ..\lib\base\wx\setup.h
 
 # End Custom Build
-
 !ELSEIF  "$(CFG)" == "wxBase - Win32 Debug"
-
 # Begin Custom Build - Copying $(InputPath) to $(TargetDir)
 InputPath=..\include\wx\msw\setup.h
 
@@ -683,7 +652,6 @@
 	copy "$(InputPath)" ..\lib\based\wx\setup.h
 
 # End Custom Build
-
 !ENDIF 
 
 # End Source File
@@ -1035,6 +1003,7 @@
 
 SOURCE=..\include\wx\zstream.h
 # End Source File
+
 # End Group
 # Begin Group "MSW"
 
@@ -1051,6 +1020,7 @@
 
 SOURCE=..\include\wx\msw\winundef.h
 # End Source File
+
 # End Group
 # End Group
 # End Target
Index: src/motif/files.lst
===================================================================
--- src/motif/files.lst	(revision 21)
+++ src/motif/files.lst	(revision 21)
@@ -8,6 +8,7 @@
 		generic/colrdlgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dirdlgg.cpp \
 		generic/dragimgg.cpp \
@@ -33,6 +34,7 @@
 		generic/prop.cpp \
 		generic/propform.cpp \
 		generic/proplist.cpp \
+		generic/rawbtmpg.cpp \
 		generic/sashwin.cpp \
 		generic/scrlwing.cpp \
 		generic/spinctlg.cpp \
@@ -68,6 +70,7 @@
 		common/dbgrid.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -140,6 +143,7 @@
 		common/protocol.cpp \
 		common/quantize.cpp \
 		common/radiocmn.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -312,6 +316,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -428,6 +433,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -569,6 +575,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -583,7 +590,7 @@
 		generic/imaglist.h \
 		generic/laywin.h \
 		generic/listctrl.h \
-		generic/mdig.cpp \
+		generic/mdig.h \
 		generic/msgdlgg.h \
 		generic/notebook.h \
 		generic/paletteg.h \
@@ -591,6 +598,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -648,6 +656,7 @@
 		dbgrid.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -720,6 +729,7 @@
 		protocol.o \
 		quantize.o \
 		radiocmn.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -766,6 +776,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		dragimgg.o \
@@ -791,6 +802,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
Index: src/common/dcraw.cpp
===================================================================
--- src/common/dcraw.cpp	(revision 21)
+++ src/common/dcraw.cpp	(revision 21)
@@ -0,0 +1,35 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcraw.cpp
+// Purpose:     wxRawBitmapDC class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcraw.cpp,v 1.1 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "dcrawbase.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#endif // WX_PRECOMP
+
+#include "wx/dcraw.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmap
+//-------------------------------------------------------------------------
+
+IMPLEMENT_ABSTRACT_CLASS(wxRawBitmapDCBase, wxObject)
+
+#endif // wxUSE_RAWBITMAP
Index: src/common/rawbtmp.cpp
===================================================================
--- src/common/rawbtmp.cpp	(revision 21)
+++ src/common/rawbtmp.cpp	(revision 21)
@@ -0,0 +1,38 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmp.cpp
+// Purpose:     wxRawBitmapDC class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmp.cpp,v 1.3 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "rawbtmpbase.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#endif // WX_PRECOMP
+
+#include "wx/rawbtmp.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmap
+//-------------------------------------------------------------------------
+
+IMPLEMENT_ABSTRACT_CLASS(wxRawBitmapBase, wxObject)
+
+// MERGE - This belongs in platform-specific data.cpp.
+wxRawBitmap wxNullRawBitmap;
+
+#endif // wxUSE_RAWBITMAP
Index: src/wxWindows.dsp
===================================================================
--- src/wxWindows.dsp	(revision 21)
+++ src/wxWindows.dsp	(revision 21)
@@ -2,8 +2,8 @@
 # Microsoft Developer Studio Generated Build File, Format Version 6.00
 # ** DO NOT EDIT **
 
-# TARGTYPE "Win32 (x86) Static Library" 0x0104
 # TARGTYPE "Win32 (x86) Dynamic-Link Library" 0x0102
+# TARGTYPE "Win32 (x86) Static Library" 0x0104
 
 CFG=wxWindows - Win32 Debug
 !MESSAGE This is not a valid makefile. To build this project using NMAKE,
@@ -32,8 +32,6 @@
 # PROP AllowPerConfigDependencies 0
 # PROP Scc_ProjName ""
 # PROP Scc_LocalPath ""
-CPP=cl.exe
-RSC=rc.exe
 
 !IF  "$(CFG)" == "wxWindows - Win32 Release Unicode DLL"
 
@@ -48,10 +46,13 @@
 # PROP Intermediate_Dir "../ReleaseUnicodeDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL" /D "WXWINDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/mswdllu" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "_USRDLL" /D "WIN32" /D "NDEBUG" /D WINVER=0x0400 /D "STRICT" /D "WXMAKINGDLL" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
+MTL=midl.exe
 # ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
+RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "NDEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "NDEBUG"
 BSC32=bscmake.exe
@@ -74,18 +75,21 @@
 # PROP Intermediate_Dir "../DebugUnicodeDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL" /D "WXWINDLL_EXPORTS" /YX /FD /GZ /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/mswdllud" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "_USRDLL" /D "WIN32" /D "_DEBUG" /D WINVER=0x0400 /D "STRICT" /D "WXMAKINGDLL" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
+MTL=midl.exe
 # ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
+RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "_DEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "_DEBUG"
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
 # ADD BSC32 /nologo
 LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxmsw233ud.dll"
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib advapi32.lib comdlg32.lib shell32.lib ole32.lib oleaut32.lib odbc32.lib uuid.lib rpcrt4.lib comctl32.lib wsock32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /nologo /version:2.3 /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxmsw233ud.dll"
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /dll /debug /machine:I386 /out:"../lib/wxmsw233ud.dll" /pdbtype:sept
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib advapi32.lib comdlg32.lib shell32.lib ole32.lib oleaut32.lib odbc32.lib uuid.lib rpcrt4.lib comctl32.lib wsock32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /nologo /version:2.3 /dll /debug /machine:I386 /out:"../lib/wxmsw233ud.dll" /pdbtype:sept
 
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Release Unicode"
 
@@ -99,8 +103,10 @@
 # PROP Output_Dir "../lib"
 # PROP Intermediate_Dir "../ReleaseUnicode"
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/mswu" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "NDEBUG" /D WINVER=0x0400 /D "STRICT" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
+RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -122,8 +128,10 @@
 # PROP Output_Dir "../lib"
 # PROP Intermediate_Dir "../DebugUnicode"
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /YX /FD /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/mswud" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "_DEBUG" /D "__WXDEBUG__" /D WINVER=0x0400 /D "STRICT" /D "_UNICODE" /D "UNICODE" /Yu"wx/wxprec.h" /FD /c
+RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -146,10 +154,13 @@
 # PROP Intermediate_Dir "../ReleaseDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL" /D "WXWINDLL_EXPORTS" /YX /FD /c
 # ADD CPP /nologo /MD /W4 /O2 /I "../lib/mswdll" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "_USRDLL" /D "WIN32" /D "NDEBUG" /D WINVER=0x0400 /D "STRICT" /D "WXMAKINGDLL" /Yu"wx/wxprec.h" /FD /c
+MTL=midl.exe
 # ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
+RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "NDEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "NDEBUG"
 BSC32=bscmake.exe
@@ -172,18 +183,21 @@
 # PROP Intermediate_Dir "../DebugDll"
 # PROP Ignore_Export_Lib 0
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Gm /GX /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /D "_USRDLL" /D "WXWINDLL_EXPORTS" /YX /FD /GZ /c
 # ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/mswdlld" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "_USRDLL" /D "WIN32" /D "_DEBUG" /D WINVER=0x0400 /D "STRICT" /D "WXMAKINGDLL" /Yu"wx/wxprec.h" /FD /c
+MTL=midl.exe
 # ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
 # ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
+RSC=rc.exe
 # ADD BASE RSC /l 0x409 /d "_DEBUG"
 # ADD RSC /l 0x409 /i "../include" /d "_DEBUG"
 BSC32=bscmake.exe
 # ADD BASE BSC32 /nologo
 # ADD BSC32 /nologo
 LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxmsw233d.dll"
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib advapi32.lib comdlg32.lib shell32.lib ole32.lib oleaut32.lib odbc32.lib uuid.lib rpcrt4.lib comctl32.lib wsock32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /nologo /version:2.3 /dll /debug /machine:I386 /pdbtype:sept /out:"../lib/wxmsw233d.dll"
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /dll /debug /machine:I386 /out:"../lib/wxmsw233d.dll" /pdbtype:sept
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib advapi32.lib comdlg32.lib shell32.lib ole32.lib oleaut32.lib odbc32.lib uuid.lib rpcrt4.lib comctl32.lib wsock32.lib winmm.lib ..\lib\jpegd.lib ..\lib\tiffd.lib ..\lib\pngd.lib ..\lib\regexd.lib ..\lib\zlibd.lib /nologo /version:2.3 /dll /debug /machine:I386 /out:"../lib/wxmsw233d.dll" /pdbtype:sept
 
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Release"
 
@@ -197,8 +211,10 @@
 # PROP Output_Dir "../lib"
 # PROP Intermediate_Dir "../Release"
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MD /W4 /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /YX /FD /c
-# ADD CPP /nologo /MD /W4 /O2 /I "../lib/msw" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "NDEBUG" /D WINVER=0x0400 /D "STRICT" /Yu"wx/wxprec.h" /FD /c
+# ADD CPP /nologo /MT /W4 /GR /GX /Zi /O2 /I "../lib/msw" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "NDEBUG" /D WINVER=0x0400 /D "STRICT" /Yu"wx/wxprec.h" /FD /c
+RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -220,8 +236,10 @@
 # PROP Output_Dir "../lib"
 # PROP Intermediate_Dir "../Debug"
 # PROP Target_Dir ""
+CPP=cl.exe
 # ADD BASE CPP /nologo /MDd /W4 /Zi /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /YX /FD /c
-# ADD CPP /nologo /MDd /W4 /Zi /Od /I "../lib/mswd" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "_DEBUG" /D "__WXDEBUG__" /D WINVER=0x0400 /D "STRICT" /Yu"wx/wxprec.h" /FD /c
+# ADD CPP /nologo /MTd /W4 /GR /GX /Zi /Od /I "../lib/mswd" /I "../include" /I "./zlib" /I "./jpeg" /I "./png" /I "./regex" /I "./tiff" /D "WIN32" /D "_DEBUG" /D "__WXDEBUG__" /D WINVER=0x0400 /D "STRICT" /Yu"wx/wxprec.h" /FD /c
+RSC=rc.exe
 # ADD BASE RSC /l 0x409
 # ADD RSC /l 0x409
 BSC32=bscmake.exe
@@ -328,6 +346,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\common\dcraw.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\common\dircmn.cpp
 # End Source File
 # Begin Source File
@@ -352,6 +374,12 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\common\dosyacc.c
+# ADD CPP /W1 /D "USE_DEFINE" /D "IDE_INVOKED"
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
 SOURCE=.\common\dseldlg.cpp
 # End Source File
 # Begin Source File
@@ -380,6 +408,11 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\common\extended.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
 SOURCE=.\common\fddlgcmn.cpp
 # End Source File
 # Begin Source File
@@ -616,6 +649,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\common\rawbtmp.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\common\regex.cpp
 # End Source File
 # Begin Source File
@@ -708,6 +745,11 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\common\unzip.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
 SOURCE=.\common\url.cpp
 # End Source File
 # Begin Source File
@@ -758,24 +800,6 @@
 
 SOURCE=.\common\zstream.cpp
 # End Source File
-
-# Begin Source File
-
-SOURCE=.\common\extended.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
-SOURCE=.\common\unzip.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-
-# Begin Source File
-
-SOURCE=.\common\dosyacc.c
-# ADD CPP /W1 /D "USE_DEFINE" /D "IDE_INVOKED"
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
 # End Group
 # Begin Group "Generic Files"
 
@@ -802,6 +826,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\generic\dcrawg.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\generic\dirctrlg.cpp
 # End Source File
 # Begin Source File
@@ -904,7 +932,6 @@
 
 SOURCE=.\generic\wizard.cpp
 # End Source File
-
 # End Group
 # Begin Group "wxHTML Files"
 
@@ -993,18 +1020,12 @@
 
 SOURCE=.\html\winpars.cpp
 # End Source File
-
 # End Group
 # Begin Group "MSW Files"
 
 # PROP Default_Filter ""
 # Begin Source File
 
-SOURCE=.\msw\dummy.cpp
-# ADD CPP /Yc"wx/wxprec.h"
-# End Source File
-# Begin Source File
-
 SOURCE=.\msw\accel.cpp
 # End Source File
 # Begin Source File
@@ -1093,6 +1114,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\msw\dcraww.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\msw\dcscreen.cpp
 # End Source File
 # Begin Source File
@@ -1129,6 +1154,11 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\msw\dummy.cpp
+# ADD CPP /Yc"wx/wxprec.h"
+# End Source File
+# Begin Source File
+
 SOURCE=.\msw\enhmeta.cpp
 # End Source File
 # Begin Source File
@@ -1181,6 +1211,16 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\msw\gsocket.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
+SOURCE=.\msw\gsockmsw.c
+# SUBTRACT CPP /YX /Yc /Yu
+# End Source File
+# Begin Source File
+
 SOURCE=.\msw\helpbest.cpp
 # End Source File
 # Begin Source File
@@ -1297,6 +1337,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=.\msw\rawbtmpw.cpp
+# End Source File
+# Begin Source File
+
 SOURCE=.\msw\regconf.cpp
 # End Source File
 # Begin Source File
@@ -1411,18 +1455,6 @@
 
 SOURCE=.\msw\window.cpp
 # End Source File
-
-# Begin Source File
-
-SOURCE=.\msw\gsocket.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-# Begin Source File
-
-SOURCE=.\msw\gsockmsw.c
-# SUBTRACT CPP /YX /Yc /Yu
-# End Source File
-
 # End Group
 # Begin Group "OLE Files"
 
@@ -1451,7 +1483,6 @@
 
 SOURCE=.\msw\ole\uuid.cpp
 # End Source File
-
 # End Group
 # Begin Group "Headers"
 
@@ -1462,7 +1493,9 @@
 # Begin Source File
 
 SOURCE=..\include\wx\msw\setup.h
+
 !IF  "$(CFG)" == "wxWindows - Win32 Release Unicode DLL"
+
 # Begin Custom Build - Creating ..\lib\mswdllu\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1470,7 +1503,9 @@
 	copy "$(InputPath)" ..\lib\mswdllu\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Debug Unicode DLL"
+
 # Begin Custom Build - Creating ..\lib\mswdllud\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1478,7 +1513,9 @@
 	copy "$(InputPath)" ..\lib\mswdllud\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Release Unicode"
+
 # Begin Custom Build - Creating ..\lib\mswu\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1486,7 +1523,9 @@
 	copy "$(InputPath)" ..\lib\mswu\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Debug Unicode"
+
 # Begin Custom Build - Creating ..\lib\mswud\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1494,7 +1533,9 @@
 	copy "$(InputPath)" ..\lib\mswud\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Release DLL"
+
 # Begin Custom Build - Creating ..\lib\mswdll\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1502,7 +1543,9 @@
 	copy "$(InputPath)" ..\lib\mswdll\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Debug DLL"
+
 # Begin Custom Build - Creating ..\lib\mswdlld\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1510,7 +1553,9 @@
 	copy "$(InputPath)" ..\lib\mswdlld\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Release"
+
 # Begin Custom Build - Creating ..\lib\msw\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1518,7 +1563,9 @@
 	copy "$(InputPath)" ..\lib\msw\wx\setup.h
 
 # End Custom Build
+
 !ELSEIF  "$(CFG)" == "wxWindows - Win32 Debug"
+
 # Begin Custom Build - Creating ..\lib\mswd\wx\setup.h from $(InputPath)
 InputPath=..\include\wx\msw\setup.h
 
@@ -1526,7 +1573,9 @@
 	copy "$(InputPath)" ..\lib\mswd\wx\setup.h
 
 # End Custom Build
+
 !ENDIF 
+
 # End Source File
 # End Group
 # Begin Group "Common"
@@ -1722,6 +1771,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\dcraw.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\dcscreen.h
 # End Source File
 # Begin Source File
@@ -2182,6 +2235,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\rawbtmp.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\regex.h
 # End Source File
 # Begin Source File
@@ -2480,7 +2537,6 @@
 
 SOURCE=..\include\wx\zstream.h
 # End Source File
-
 # End Group
 # Begin Group "MSW"
 
@@ -2575,6 +2631,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\msw\dcraww.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\msw\dcscreen.h
 # End Source File
 # Begin Source File
@@ -2759,6 +2819,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\msw\rawbtmpw.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\msw\regconf.h
 # End Source File
 # Begin Source File
@@ -2861,7 +2925,6 @@
 
 SOURCE=..\include\wx\msw\winundef.h
 # End Source File
-
 # End Group
 # Begin Group "Generic"
 
@@ -2892,6 +2955,10 @@
 # End Source File
 # Begin Source File
 
+SOURCE=..\include\wx\generic\dcrawg.h
+# End Source File
+# Begin Source File
+
 SOURCE=..\include\wx\generic\dirctrlg.h
 # End Source File
 # Begin Source File
@@ -3022,7 +3089,6 @@
 
 SOURCE=..\include\wx\generic\wizard.h
 # End Source File
-
 # End Group
 # Begin Group "HTML"
 
@@ -3079,7 +3145,6 @@
 
 SOURCE=..\include\wx\html\winpars.h
 # End Source File
-
 # End Group
 # End Group
 # End Target
Index: src/msw/makefile.bcc
===================================================================
--- src/msw/makefile.bcc	(revision 21)
+++ src/msw/makefile.bcc	(revision 21)
@@ -71,6 +71,7 @@
 		$(MSWDIR)\choicdgg.obj \
 		$(MSWDIR)\dcbuffer.obj \
 		$(MSWDIR)\dcpsg.obj \
+		$(MSWDIR)\dcrawg.obj \
 		$(MSWDIR)\dirctrlg.obj \
 		$(MSWDIR)\dirdlgg.obj \
 		$(MSWDIR)\dragimgg.obj \
@@ -124,6 +125,7 @@
 		$(MSWDIR)\datetime.obj \
 		$(MSWDIR)\datstrm.obj \
 		$(MSWDIR)\dcbase.obj \
+		$(MSWDIR)\dcraw.obj \
 		$(MSWDIR)\dircmn.obj \
 		$(MSWDIR)\dlgcmn.obj \
 		$(MSWDIR)\dndcmn.obj \
@@ -186,6 +188,7 @@
 		$(MSWDIR)\prntbase.obj \
 		$(MSWDIR)\quantize.obj \
 		$(MSWDIR)\radiocmn.obj \
+		$(MSWDIR)\rawbtmp.obj \
 		$(MSWDIR)\regex.obj \
 		$(MSWDIR)\resource.obj \
 		$(MSWDIR)\settcmn.obj \
@@ -241,6 +244,7 @@
 		$(MSWDIR)\dcclient.obj \
 		$(MSWDIR)\dcmemory.obj \
 		$(MSWDIR)\dcprint.obj \
+		$(MSWDIR)\dcraww.obj \
 		$(MSWDIR)\dcscreen.obj \
 		$(MSWDIR)\dde.obj \
 		$(MSWDIR)\dialog.obj \
@@ -285,6 +289,7 @@
 		$(MSWDIR)\printwin.obj \
 		$(MSWDIR)\radiobox.obj \
 		$(MSWDIR)\radiobut.obj \
+		$(MSWDIR)\rawbtmpw.obj \
 		$(MSWDIR)\region.obj \
 		$(MSWDIR)\scrolbar.obj \
 		$(MSWDIR)\settings.obj \
@@ -384,6 +389,8 @@
 
 $(MSWDIR)\dcprint.obj: $(MSWDIR)\dcprint.$(SRCSUFF)
 
+$(MSWDIR)\dcraww.obj: $(MSWDIR)\dcraww.$(SRCSUFF)
+
 $(MSWDIR)\dcscreen.obj: $(MSWDIR)\dcscreen.$(SRCSUFF)
 
 $(MSWDIR)\dde.obj: $(MSWDIR)\dde.$(SRCSUFF)
@@ -472,6 +479,8 @@
 
 $(MSWDIR)\radiobut.obj: $(MSWDIR)\radiobut.$(SRCSUFF)
 
+$(MSWDIR)\rawbtmpw.obj: $(MSWDIR)\rawbtmpw.$(SRCSUFF)
+
 $(MSWDIR)\region.obj: $(MSWDIR)\region.$(SRCSUFF)
 
 $(MSWDIR)\scrolbar.obj: $(MSWDIR)\scrolbar.$(SRCSUFF)
@@ -555,6 +564,8 @@
 
 $(MSWDIR)\dcbase.obj: $(COMMDIR)\dcbase.$(SRCSUFF)
 
+$(MSWDIR)\dcraw.obj: $(COMMDIR)\dcraw.$(SRCSUFF)
+
 $(MSWDIR)\dircmn.obj: $(COMMDIR)\dircmn.$(SRCSUFF)
 
 $(MSWDIR)\dlgcmn.obj: $(COMMDIR)\dlgcmn.$(SRCSUFF)
@@ -679,6 +690,8 @@
 
 $(MSWDIR)\radiocmn.obj: $(COMMDIR)\radiocmn.$(SRCSUFF)
 
+$(MSWDIR)\rawbtmp.obj: $(COMMDIR)\rawbtmp.$(SRCSUFF)
+
 $(MSWDIR)\regex.obj: $(COMMDIR)\regex.$(SRCSUFF)
 
 $(MSWDIR)\resource.obj: $(COMMDIR)\resource.$(SRCSUFF)
@@ -759,6 +772,8 @@
 
 $(MSWDIR)\dcpsg.obj: $(GENDIR)\dcpsg.$(SRCSUFF)
 
+$(MSWDIR)\dcrawg.obj: $(GENDIR)\dcrawg.$(SRCSUFF)
+
 $(MSWDIR)\dirctrlg.obj: $(GENDIR)\dirctrlg.$(SRCSUFF)
 
 $(MSWDIR)\dirdlgg.obj: $(GENDIR)\dirdlgg.$(SRCSUFF)
Index: src/msw/makefile.vc
===================================================================
--- src/msw/makefile.vc	(revision 21)
+++ src/msw/makefile.vc	(revision 21)
@@ -93,6 +93,7 @@
 		$(GENDIR)\$D\choicdgg.obj \
 		$(GENDIR)\$D\dcbuffer.obj \
 		$(GENDIR)\$D\dcpsg.obj \
+		$(GENDIR)\$D\dcrawg.obj \
 		$(GENDIR)\$D\dirctrlg.obj \
 		$(GENDIR)\$D\dragimgg.obj \
 		$(GENDIR)\$D\grid.obj \
@@ -156,6 +157,7 @@
 		$(COMMDIR)\$D\dbgrid.obj \
 		$(COMMDIR)\$D\dbtable.obj \
 		$(COMMDIR)\$D\dcbase.obj \
+		$(COMMDIR)\$D\dcraw.obj \
 		$(COMMDIR)\$D\dircmn.obj \
 		$(COMMDIR)\$D\dlgcmn.obj \
 		$(COMMDIR)\$D\dndcmn.obj \
@@ -229,6 +231,7 @@
 		$(COMMDIR)\$D\protocol.obj \
 		$(COMMDIR)\$D\quantize.obj \
 		$(COMMDIR)\$D\radiocmn.obj \
+		$(COMMDIR)\$D\rawbtmp.obj \
 		$(COMMDIR)\$D\regex.obj \
 		$(COMMDIR)\$D\resource.obj \
 		$(COMMDIR)\$D\sckaddr.obj \
@@ -291,6 +294,7 @@
 		$(MSWDIR)\$D\dcclient.obj \
 		$(MSWDIR)\$D\dcmemory.obj \
 		$(MSWDIR)\$D\dcprint.obj \
+		$(MSWDIR)\$D\dcraww.obj \
 		$(MSWDIR)\$D\dcscreen.obj \
 		$(MSWDIR)\$D\dde.obj \
 		$(MSWDIR)\$D\dialog.obj \
@@ -347,6 +351,7 @@
 		$(MSWDIR)\$D\printwin.obj \
 		$(MSWDIR)\$D\radiobox.obj \
 		$(MSWDIR)\$D\radiobut.obj \
+		$(MSWDIR)\$D\rawbtmpw.obj \
 		$(MSWDIR)\$D\regconf.obj \
 		$(MSWDIR)\$D\region.obj \
 		$(MSWDIR)\$D\registry.obj \
Index: src/msw/makefile.dos
===================================================================
--- src/msw/makefile.dos	(revision 21)
+++ src/msw/makefile.dos	(revision 21)
@@ -54,6 +54,7 @@
 		$(GENDIR)\choicdgg.obj \
 		$(GENDIR)\dcbuffer.obj \
 		$(GENDIR)\dcpsg.obj \
+		$(GENDIR)\dcrawg.obj \
 		$(GENDIR)\dirctrlg.obj \
 		$(GENDIR)\dirdlgg.obj \
 		$(GENDIR)\dragimgg.obj \
@@ -109,6 +110,7 @@
 		$(COMMDIR)\datetime.obj \
 		$(COMMDIR)\datstrm.obj \
 		$(COMMDIR)\dcbase.obj \
+		$(COMMDIR)\dcraw.obj \
 		$(COMMDIR)\dircmn.obj \
 		$(COMMDIR)\dlgcmn.obj \
 		$(COMMDIR)\dndcmn.obj \
@@ -174,6 +176,7 @@
 		$(COMMDIR)\prntbase.obj \
 		$(COMMDIR)\quantize.obj \
 		$(COMMDIR)\radiocmn.obj \
+		$(COMMDIR)\rawbtmp.obj \
 		$(COMMDIR)\regex.obj \
 		$(COMMDIR)\resource.obj \
 		$(COMMDIR)\settcmn.obj \
@@ -229,6 +232,7 @@
 		$(MSWDIR)\dcclient.obj \
 		$(MSWDIR)\dcmemory.obj \
 		$(MSWDIR)\dcprint.obj \
+		$(MSWDIR)\dcraww.obj \
 		$(MSWDIR)\dcscreen.obj \
 		$(MSWDIR)\dde.obj \
 		$(MSWDIR)\dialog.obj \
@@ -274,6 +278,7 @@
 		$(MSWDIR)\printwin.obj \
 		$(MSWDIR)\radiobox.obj \
 		$(MSWDIR)\radiobut.obj \
+		$(MSWDIR)\rawbtmpw.obj \
 		$(MSWDIR)\region.obj \
 		$(MSWDIR)\scrolbar.obj \
 		$(MSWDIR)\settings.obj \
@@ -478,6 +483,11 @@
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
 <<
 
+$(MSWDIR)/dcraww.obj:     $*.$(SRCSUFF)
+        cl @<<
+$(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
+<<
+
 $(MSWDIR)/dcscreen.obj:     $*.$(SRCSUFF)
         cl @<<
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
@@ -698,6 +708,11 @@
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
 <<
 
+$(MSWDIR)/rawbtmpw.obj:     $*.$(SRCSUFF)
+        cl @<<
+$(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
+<<
+
 $(MSWDIR)/region.obj:     $*.$(SRCSUFF)
         cl @<<
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
@@ -898,6 +913,11 @@
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
 <<
 
+$(COMMDIR)/dcraw.obj:     $*.$(SRCSUFF)
+        cl @<<
+$(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
+<<
+
 $(COMMDIR)/dircmn.obj:     $*.$(SRCSUFF)
         cl @<<
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
@@ -1213,6 +1233,11 @@
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
 <<
 
+$(COMMDIR)/rawbtmp.obj:     $*.$(SRCSUFF)
+        cl @<<
+$(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
+<<
+
 $(COMMDIR)/regex.obj:     $*.$(SRCSUFF)
         cl @<<
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
@@ -1393,6 +1418,11 @@
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
 <<
 
+$(GENDIR)/dcrawg.obj:     $*.$(SRCSUFF)
+        cl @<<
+$(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
+<<
+
 $(GENDIR)/dirctrlg.obj:     $*.$(SRCSUFF)
         cl @<<
 $(CPPFLAGS) /Fo$@ /c /Tp $*.$(SRCSUFF)
Index: src/msw/makefile.wat
===================================================================
--- src/msw/makefile.wat	(revision 21)
+++ src/msw/makefile.wat	(revision 21)
@@ -46,6 +46,7 @@
 	choicdgg.obj &
 	dcbuffer.obj &
 	dcpsg.obj &
+	dcrawg.obj &
 	dirctrlg.obj &
 	dragimgg.obj &
 	grid.obj &
@@ -92,6 +93,7 @@
 	paletteg.obj &
 	printps.obj &
 	prntdlgg.obj &
+	rawbtmpg.obj &
 	statline.obj &
 	tabg.obj &
 	timer.obj
@@ -118,6 +120,7 @@
 	dbgrid.obj &
 	dbtable.obj &
 	dcbase.obj &
+	dcraw.obj &
 	dircmn.obj &
 	dlgcmn.obj &
 	dndcmn.obj &
@@ -191,6 +194,7 @@
 	protocol.obj &
 	quantize.obj &
 	radiocmn.obj &
+	rawbtmp.obj &
 	regex.obj &
 	resource.obj &
 	sckaddr.obj &
@@ -253,6 +257,7 @@
 	dcclient.obj &
 	dcmemory.obj &
 	dcprint.obj &
+	dcraww.obj &
 	dcscreen.obj &
 	dde.obj &
 	dialog.obj &
@@ -310,6 +315,7 @@
 	printwin.obj &
 	radiobox.obj &
 	radiobut.obj &
+	rawbtmpw.obj &
 	regconf.obj &
 	region.obj &
 	registry.obj &
@@ -472,6 +478,9 @@
 dcprint.obj:     $(MSWDIR)\dcprint.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
+dcraww.obj:     $(MSWDIR)\dcraww.cpp
+  *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
+
 dcscreen.obj:     $(MSWDIR)\dcscreen.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
@@ -643,6 +652,9 @@
 radiobut.obj:     $(MSWDIR)\radiobut.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
+rawbtmpw.obj:     $(MSWDIR)\rawbtmpw.cpp
+  *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
+
 regconf.obj:     $(MSWDIR)\regconf.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
@@ -804,6 +816,9 @@
 dcbase.obj:     $(COMMDIR)\dcbase.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
+dcraw.obj:     $(COMMDIR)\dcraw.cpp
+  *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
+
 dircmn.obj:     $(COMMDIR)\dircmn.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
@@ -1023,6 +1038,9 @@
 radiocmn.obj:     $(COMMDIR)\radiocmn.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
+rawbtmp.obj:     $(COMMDIR)\rawbtmp.cpp
+  *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
+
 regex.obj:     $(COMMDIR)\regex.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
@@ -1166,6 +1184,9 @@
 dcpsg.obj:     $(GENDIR)\dcpsg.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
+dcrawg.obj:     $(GENDIR)\dcrawg.cpp
+  *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
+
 dirctrlg.obj:     $(GENDIR)\dirctrlg.cpp
   *$(CCC) $(CPPFLAGS) $(IFLAGS) $<
 
Index: src/msw/rawbtmpw.cpp
===================================================================
--- src/msw/rawbtmpw.cpp	(revision 21)
+++ src/msw/rawbtmpw.cpp	(revision 21)
@@ -0,0 +1,190 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmpw.cpp
+// Purpose:     wxRawBitmap class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmpw.cpp,v 1.3 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "rawbtmpg.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#include "wx/dc.h"
+#endif // WX_PRECOMP
+
+#include "wx/rawbtmp.h"
+#include "wx/dcraw.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmapRefData
+//-------------------------------------------------------------------------
+
+wxRawBitmapRefData::wxRawBitmapRefData(wxCoord width, wxCoord height,
+									   wxRawBitmapType type)
+	: m_Type(type), m_BitmapHandle(NULL), m_Bitmap(NULL),
+	  m_selectedInto(NULL)
+{
+	// If you want another color depth, feel free to implement it.
+	wxASSERT(type == wxRAWBITMAP_24BIT);
+	wxASSERT(width > 0 && height > 0);
+
+	// Create a bitmap information header describing our bitmap.
+	BITMAPINFOHEADER bmp_info;
+	bmp_info.biSize = sizeof(BITMAPINFOHEADER);
+	bmp_info.biHeight = -1 * height;	// always a top down dib
+	bmp_info.biWidth = width;
+	bmp_info.biPlanes = 1;
+	bmp_info.biBitCount = 24;
+	bmp_info.biCompression = BI_RGB;
+	bmp_info.biSizeImage = 0;
+	bmp_info.biXPelsPerMeter = 0;
+	bmp_info.biYPelsPerMeter = 0;
+	bmp_info.biClrUsed = 0;
+	bmp_info.biClrImportant = 0;
+
+	// Create the bitmap itself.
+	HBITMAP bitmap_handle = ::CreateDIBSection(NULL, (PBITMAPINFO) &bmp_info,
+											   DIB_RGB_COLORS, NULL, NULL, 0);
+	if (!bitmap_handle)
+		::wxLogLastError(_T("CreateDIBSection"));
+
+	// Extract the underlying BITMAP object.  (Allocate the necessary
+	// memory on the heap so we don't need to know the size of BITMAP
+	// in our header.)
+	BITMAP *bitmap = new BITMAP;
+	if (!::GetObject(bitmap_handle, sizeof(BITMAP), bitmap))
+		::wxLogLastError(_T("CreateDIBSection"));
+	wxASSERT(bitmap->bmBitsPixel == 24);
+	wxASSERT(bitmap->bmWidth == width && bitmap->bmHeight == height);
+	
+	// Cast our objects to "header-safe" types which don't require windows.h,
+	// and store them in our object.
+	m_BitmapHandle = (WXHBITMAP) bitmap_handle;
+	m_Bitmap = (void *) bitmap;
+}
+
+wxRawBitmapRefData::~wxRawBitmapRefData()
+{
+	if (m_BitmapHandle)
+		::DeleteObject((HBITMAP) m_BitmapHandle);
+	if (m_Bitmap)
+		delete (BITMAP *) m_Bitmap;
+}
+
+//-------------------------------------------------------------------------
+// wxRawBitmap
+//-------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxRawBitmap, wxObject)
+
+wxRawBitmap::wxRawBitmap()
+{
+	UnRef();
+}
+
+wxRawBitmap::wxRawBitmap(wxCoord width, wxCoord height, wxRawBitmapType type)
+{
+	SetRefData(new wxRawBitmapRefData(width, height, type));
+}
+
+WXHBITMAP wxRawBitmap::GetHBITMAP()
+{
+	return GetRawBitmapRefData()->m_BitmapHandle;
+}
+
+bool wxRawBitmap::Ok() const
+{
+	return (GetRefData() != NULL);
+}
+
+wxCoord wxRawBitmap::GetWidth() const
+{
+	return ((BITMAP *) GetBitmap())->bmWidth;
+}
+
+wxCoord wxRawBitmap::GetHeight() const
+{
+	return ((BITMAP *) GetBitmap())->bmHeight;
+}
+
+int wxRawBitmap::GetDepth() const
+{
+	return 24;
+}
+
+wxRawBitmapType wxRawBitmap::GetType() const
+{
+	return GetRawBitmapRefData()->m_Type;
+}
+
+wxRawBitmapPixelRef24 wxRawBitmap::GetData24()
+{
+	return (unsigned char *) ((BITMAP *) GetBitmap())->bmBits;
+}
+
+wxRawBitmapStride24 wxRawBitmap::GetStride24()
+{
+	return ((BITMAP *) GetBitmap())->bmWidthBytes;
+}
+
+wxRawBitmapLimits24 wxRawBitmap::GetLimits24()
+{
+	wxRawBitmapLimits24 limits;
+	limits.begin_ = GetData24();
+	limits.end_ = limits.begin_ + GetHeight() * GetStride24();
+	return limits;
+}
+
+bool wxRawBitmap::BlitTo(wxDC *dest, wxCoord xdest, wxCoord ydest,
+						 wxCoord width, wxCoord height,
+						 wxCoord xsrc, wxCoord ysrc)
+{
+	// Create an appropriate DC for us, and use it to blit.
+	// XXX - This assumes that 'dest' is compatible with the screen
+	// DC.  I don't know when or if this will be a problem.
+	wxRawBitmapDC src(*this);
+	return dest->Blit(xdest, ydest, width, height, &src, xsrc, ysrc);
+}
+
+void wxRawBitmap::SetSelectedInto(wxDC *dc)
+{
+	// Based on wxBitmap::SetSelectedInto.
+	if (Ok())
+		GetRawBitmapRefData()->m_selectedInto = dc;
+}
+
+wxDC *wxRawBitmap::GetSelectedInto() const
+{
+	// Based on wxBitmap::GetSelectedInto.
+	if (Ok())
+		return GetRawBitmapRefData()->m_selectedInto;
+	else 
+		return (wxDC*) NULL;
+}
+
+wxRawBitmapRefData *wxRawBitmap::GetRawBitmapRefData() const
+{
+	wxRawBitmapRefData *rawBitmapRefData = (wxRawBitmapRefData *) GetRefData();
+	wxASSERT(rawBitmapRefData != NULL);
+	return rawBitmapRefData;
+}
+
+const void *wxRawBitmap::GetBitmap() const
+{
+	return GetRawBitmapRefData()->m_Bitmap;
+}
+
+#endif // wxUSE_RAWBITMAP
Index: src/msw/files.lst
===================================================================
--- src/msw/files.lst	(revision 21)
+++ src/msw/files.lst	(revision 21)
@@ -6,6 +6,7 @@
 		generic/choicdgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dragimgg.cpp \
 		generic/grid.cpp \
@@ -52,6 +53,7 @@
 		common/dbgrid.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -125,6 +127,7 @@
 		common/protocol.cpp \
 		common/quantize.cpp \
 		common/radiocmn.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -186,6 +189,7 @@
 		msw/dcclient.cpp \
 		msw/dcmemory.cpp \
 		msw/dcprint.cpp \
+		msw/dcraww.cpp \
 		msw/dcscreen.cpp \
 		msw/dde.cpp \
 		msw/dialog.cpp \
@@ -242,6 +246,7 @@
 		msw/printwin.cpp \
 		msw/radiobox.cpp \
 		msw/radiobut.cpp \
+		msw/rawbtmpw.cpp \
 		msw/regconf.cpp \
 		msw/region.cpp \
 		msw/registry.cpp \
@@ -343,6 +348,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -459,6 +465,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -557,6 +564,7 @@
 		msw/dcclient.h \
 		msw/dcmemory.h \
 		msw/dcprint.h \
+		msw/dcraww.h \
 		msw/dcscreen.h \
 		msw/dde.h \
 		msw/dialog.h \
@@ -603,6 +611,7 @@
 		msw/private.h \
 		msw/radiobox.h \
 		msw/radiobut.h \
+		msw/rawbtmpw.h \
 		msw/regconf.h \
 		msw/region.h \
 		msw/registry.h \
@@ -644,6 +653,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -658,7 +668,7 @@
 		generic/imaglist.h \
 		generic/laywin.h \
 		generic/listctrl.h \
-		generic/mdig.cpp \
+		generic/mdig.h \
 		generic/msgdlgg.h \
 		generic/notebook.h \
 		generic/paletteg.h \
@@ -666,6 +676,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -723,6 +734,7 @@
 		dbgrid.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -796,6 +808,7 @@
 		protocol.o \
 		quantize.o \
 		radiocmn.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -840,6 +853,7 @@
 		choicdgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dragimgg.o \
 		grid.o \
@@ -890,6 +904,7 @@
 		dcclient.o \
 		dcmemory.o \
 		dcprint.o \
+		dcraww.o \
 		dcscreen.o \
 		dde.o \
 		dialog.o \
@@ -943,6 +958,7 @@
 		printwin.o \
 		radiobox.o \
 		radiobut.o \
+		rawbtmpw.o \
 		regconf.o \
 		region.o \
 		registry.o \
@@ -996,7 +1012,6 @@
 		gdiimage.o \
 		gdiobj.o \
 		icon.o \
-		imaglist.o \
 		main.o \
 		palette.o \
 		pen.o \
Index: src/msw/makefile.b32
===================================================================
--- src/msw/makefile.b32	(revision 21)
+++ src/msw/makefile.b32	(revision 21)
@@ -74,6 +74,7 @@
 		$(MSWDIR)\choicdgg.obj \
 		$(MSWDIR)\dcbuffer.obj \
 		$(MSWDIR)\dcpsg.obj \
+		$(MSWDIR)\dcrawg.obj \
 		$(MSWDIR)\dirctrlg.obj \
 		$(MSWDIR)\dragimgg.obj \
 		$(MSWDIR)\grid.obj \
@@ -133,6 +134,7 @@
 		$(MSWDIR)\dbgrid.obj \
 		$(MSWDIR)\dbtable.obj \
 		$(MSWDIR)\dcbase.obj \
+		$(MSWDIR)\dcraw.obj \
 		$(MSWDIR)\dircmn.obj \
 		$(MSWDIR)\dlgcmn.obj \
 		$(MSWDIR)\dndcmn.obj \
@@ -206,6 +208,7 @@
 		$(MSWDIR)\protocol.obj \
 		$(MSWDIR)\quantize.obj \
 		$(MSWDIR)\radiocmn.obj \
+		$(MSWDIR)\rawbtmp.obj \
 		$(MSWDIR)\regex.obj \
 		$(MSWDIR)\resource.obj \
 		$(MSWDIR)\sckaddr.obj \
@@ -268,6 +271,7 @@
 		$(MSWDIR)\dcclient.obj \
 		$(MSWDIR)\dcmemory.obj \
 		$(MSWDIR)\dcprint.obj \
+		$(MSWDIR)\dcraww.obj \
 		$(MSWDIR)\dcscreen.obj \
 		$(MSWDIR)\dde.obj \
 		$(MSWDIR)\dialog.obj \
@@ -324,6 +328,7 @@
 		$(MSWDIR)\printwin.obj \
 		$(MSWDIR)\radiobox.obj \
 		$(MSWDIR)\radiobut.obj \
+		$(MSWDIR)\rawbtmpw.obj \
 		$(MSWDIR)\regconf.obj \
 		$(MSWDIR)\region.obj \
 		$(MSWDIR)\registry.obj \
@@ -492,6 +497,8 @@
 
 $(MSWDIR)\dcprint.obj: $(MSWDIR)\dcprint.$(SRCSUFF)
 
+$(MSWDIR)\dcraww.obj: $(MSWDIR)\dcraww.$(SRCSUFF)
+
 $(MSWDIR)\dcscreen.obj: $(MSWDIR)\dcscreen.$(SRCSUFF)
 
 $(MSWDIR)\dde.obj: $(MSWDIR)\dde.$(SRCSUFF)
@@ -604,6 +611,8 @@
 
 $(MSWDIR)\radiobut.obj: $(MSWDIR)\radiobut.$(SRCSUFF)
 
+$(MSWDIR)\rawbtmpw.obj: $(MSWDIR)\rawbtmpw.$(SRCSUFF)
+
 $(MSWDIR)\regconf.obj: $(MSWDIR)\regconf.$(SRCSUFF)
 
 $(MSWDIR)\region.obj: $(MSWDIR)\region.$(SRCSUFF)
@@ -709,6 +718,8 @@
 
 $(MSWDIR)\dcbase.obj: $(COMMDIR)\dcbase.$(SRCSUFF)
 
+$(MSWDIR)\dcraw.obj: $(COMMDIR)\dcraw.$(SRCSUFF)
+
 $(MSWDIR)\dircmn.obj: $(COMMDIR)\dircmn.$(SRCSUFF)
 
 $(MSWDIR)\dlgcmn.obj: $(COMMDIR)\dlgcmn.$(SRCSUFF)
@@ -855,6 +866,8 @@
 
 $(MSWDIR)\radiocmn.obj: $(COMMDIR)\radiocmn.$(SRCSUFF)
 
+$(MSWDIR)\rawbtmp.obj: $(COMMDIR)\rawbtmp.$(SRCSUFF)
+
 $(MSWDIR)\regex.obj: $(COMMDIR)\regex.$(SRCSUFF)
 
 $(MSWDIR)\resource.obj: $(COMMDIR)\resource.$(SRCSUFF)
@@ -945,6 +958,8 @@
 
 $(MSWDIR)\dcpsg.obj: $(GENDIR)\dcpsg.$(SRCSUFF)
 
+$(MSWDIR)\dcrawg.obj: $(GENDIR)\dcrawg.$(SRCSUFF)
+
 $(MSWDIR)\dirctrlg.obj: $(GENDIR)\dirctrlg.$(SRCSUFF)
 
 $(MSWDIR)\dragimgg.obj: $(GENDIR)\dragimgg.$(SRCSUFF)
Index: src/msw/dcraww.cpp
===================================================================
--- src/msw/dcraww.cpp	(revision 21)
+++ src/msw/dcraww.cpp	(revision 21)
@@ -0,0 +1,146 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcraww.cpp
+// Purpose:     wxRawBitmapDC class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcraww.cpp,v 1.2 2003/01/09 23:28:25 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma implementation "dcraww.h"
+#endif
+
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#ifndef WX_PRECOMP
+#include "wx/log.h"
+#endif // WX_PRECOMP
+
+#include "wx/dcraw.h"
+#include "wx/msw/private.h"
+
+//-------------------------------------------------------------------------
+// wxRawBitmapDC
+//-------------------------------------------------------------------------
+
+IMPLEMENT_DYNAMIC_CLASS(wxRawBitmapDC, wxRawBitmapDCBase)
+
+wxRawBitmapDC::wxRawBitmapDC()
+{
+	InitDC();
+}
+
+wxRawBitmapDC::wxRawBitmapDC(wxRawBitmap &bitmap)
+{
+	InitDC();
+	SelectBitmap(bitmap);
+}
+
+wxRawBitmapDC::~wxRawBitmapDC()
+{
+	// MERGE - We'd like to override SelectOldObjects to call SelectOldBitmap
+	// (or even patch wxDC::SelectOldObjects to handle raw bitmaps directly),
+	// but we need to handle it from here because wxDC tries to call
+	// wxDC::SelectOldObjects from its destructor, after our vtable has
+	// already been dismantled.  Stupid C++ tricks.
+	if (m_hDC)
+		SelectOldBitmap(m_hDC);
+}
+
+void wxRawBitmapDC::InitDC()
+{
+	// Initialize our instance variables.
+	m_oldRawBitmap = 0;
+
+	// Create a DC compatible with the screen, and store it.
+	ScreenHDC hdcScreen;
+	HDC dc = ::CreateCompatibleDC(hdcScreen);
+	SetHDC((WXHDC) dc, TRUE);
+}
+
+void wxRawBitmapDC::SelectObject(wxRawBitmap& bitmap)
+{
+	SelectBitmap(bitmap);
+}
+
+void wxRawBitmapDC::Clear()
+{
+	// MERGE - This code is based on wxDC::Clear, which doesn't work
+	// right with custom HBITMAPs because it has hard-coded knowledge
+	// of wxBitmap.  Yuck.
+    RECT rect;
+	if (!m_selectedRawBitmap.Ok())
+		return;
+	rect.left = 0; rect.top = 0;
+	rect.right = m_selectedRawBitmap.GetWidth();
+	rect.bottom = m_selectedRawBitmap.GetHeight();
+	
+	// Do the heavy lifting.
+    DWORD colour = ::GetBkColor(GetHdc());
+    HBRUSH brush = ::CreateSolidBrush(colour);
+    ::FillRect(GetHdc(), &rect, brush);
+    ::DeleteObject(brush);	
+}
+
+void wxRawBitmapDC::SelectOldBitmap(WXHDC dc)
+{
+	// (This code is based on wxDC::SelectOldObjects.)
+	// MERGE - Should this move into wxDC::SelectOldObjects?
+	// If necessary, restore the originally selected bitmap.
+	if (dc && m_oldRawBitmap)
+	{
+		::SelectObject((HDC) dc, (HBITMAP) m_oldRawBitmap);
+		if (m_selectedRawBitmap.Ok())
+			m_selectedRawBitmap.SetSelectedInto(NULL);
+	}
+
+	// Reset our member variables.
+	m_selectedRawBitmap = wxNullRawBitmap;
+}
+
+void wxRawBitmapDC::SelectBitmap(wxRawBitmap& bitmap)
+{
+	// (This code is based on wxMemoryDC::SelectObject.)
+	// Unselect any existing bitmap.
+	SelectOldBitmap(GetHDC());
+
+	// Don't try to select wxNullRawBitmap.
+	if (!bitmap.Ok())
+		return;
+
+	// Check for duplicate selections.
+    wxCHECK_RET( !bitmap.GetSelectedInto() ||
+                 (bitmap.GetSelectedInto() == this),
+                 wxT("Bitmap is selected in another wxRawMemoryDC, delete the first wxRawMemoryDC or use SelectObject(wxNullRawBitmap)") );
+
+	// Update our member variables.
+	m_selectedRawBitmap = bitmap;
+
+	// Select the new bitmap into this DC.
+    m_selectedRawBitmap.SetSelectedInto(this);
+	HDC result =
+		(HDC) ::SelectObject((HDC) GetHDC(), (HBITMAP) bitmap.GetHBITMAP());
+
+    if ( !result )
+    {
+        wxLogLastError(wxT("SelectObject(dc, rawbitmap)"));
+        wxFAIL_MSG(wxT("Couldn't select a bitmap into wxRawMemoryDC"));
+    }
+    else if ( !m_oldRawBitmap )
+    {
+		// This is our first successful selection, so save the value returned
+		// by Windows (we'll need this when it comes time to clean up).
+        m_oldRawBitmap = (WXHDC) result;
+    }
+}
+
+#endif // wxUSE_RAWBITMAP
Index: src/msw/makefile.g95
===================================================================
--- src/msw/makefile.g95	(revision 21)
+++ src/msw/makefile.g95	(revision 21)
@@ -84,6 +84,7 @@
 		$(GENDIR)/choicdgg.$(OBJSUFF) \
 		$(GENDIR)/dcbuffer.$(OBJSUFF) \
 		$(GENDIR)/dcpsg.$(OBJSUFF) \
+		$(GENDIR)/dcrawg.$(OBJSUFF) \
 		$(GENDIR)/dirctrlg.$(OBJSUFF) \
 		$(GENDIR)/dragimgg.$(OBJSUFF) \
 		$(GENDIR)/grid.$(OBJSUFF) \
@@ -196,6 +197,7 @@
 		$(COMMDIR)/ctrlsub.$(OBJSUFF) \
 		$(COMMDIR)/dbgrid.$(OBJSUFF) \
 		$(COMMDIR)/dcbase.$(OBJSUFF) \
+		$(COMMDIR)/dcraw.$(OBJSUFF) \
 		$(COMMDIR)/dlgcmn.$(OBJSUFF) \
 		$(COMMDIR)/dndcmn.$(OBJSUFF) \
 		$(COMMDIR)/dobjcmn.$(OBJSUFF) \
@@ -234,6 +236,7 @@
 		$(COMMDIR)/prntbase.$(OBJSUFF) \
 		$(COMMDIR)/quantize.$(OBJSUFF) \
 		$(COMMDIR)/radiocmn.$(OBJSUFF) \
+		$(COMMDIR)/rawbtmp.$(OBJSUFF) \
 		$(COMMDIR)/resource.$(OBJSUFF) \
 		$(COMMDIR)/settcmn.$(OBJSUFF) \
 		$(COMMDIR)/sizer.$(OBJSUFF) \
@@ -311,6 +314,7 @@
 		$(MSWDIR)/dcclient.$(OBJSUFF) \
 		$(MSWDIR)/dcmemory.$(OBJSUFF) \
 		$(MSWDIR)/dcprint.$(OBJSUFF) \
+		$(MSWDIR)/dcraww.$(OBJSUFF) \
 		$(MSWDIR)/dcscreen.$(OBJSUFF) \
 		$(MSWDIR)/dialog.$(OBJSUFF) \
 		$(MSWDIR)/dialup.$(OBJSUFF) \
@@ -357,6 +361,7 @@
 		$(MSWDIR)/printwin.$(OBJSUFF) \
 		$(MSWDIR)/radiobox.$(OBJSUFF) \
 		$(MSWDIR)/radiobut.$(OBJSUFF) \
+		$(MSWDIR)/rawbtmpw.$(OBJSUFF) \
 		$(MSWDIR)/region.$(OBJSUFF) \
 		$(MSWDIR)/scrolbar.$(OBJSUFF) \
 		$(MSWDIR)/settings.$(OBJSUFF) \
Index: src/msw/makefile.sc
===================================================================
--- src/msw/makefile.sc	(revision 21)
+++ src/msw/makefile.sc	(revision 21)
@@ -30,6 +30,7 @@
 		$(GENDIR)\choicdgg.obj \
 		$(GENDIR)\dcbuffer.obj \
 		$(GENDIR)\dcpsg.obj \
+		$(GENDIR)\dcrawg.obj \
 		$(GENDIR)\dirctrlg.obj \
 		$(GENDIR)\dragimgg.obj \
 		$(GENDIR)\grid.obj \
@@ -79,6 +80,7 @@
 		$(COMMDIR)\dbgrid.obj \
 		$(COMMDIR)\dbtable.obj \
 		$(COMMDIR)\dcbase.obj \
+		$(COMMDIR)\dcraw.obj \
 		$(COMMDIR)\dircmn.obj \
 		$(COMMDIR)\dlgcmn.obj \
 		$(COMMDIR)\dndcmn.obj \
@@ -152,6 +154,7 @@
 		$(COMMDIR)\protocol.obj \
 		$(COMMDIR)\quantize.obj \
 		$(COMMDIR)\radiocmn.obj \
+		$(COMMDIR)\rawbtmp.obj \
 		$(COMMDIR)\regex.obj \
 		$(COMMDIR)\resource.obj \
 		$(COMMDIR)\sckaddr.obj \
@@ -214,6 +217,7 @@
 		$(MSWDIR)\dcclient.obj \
 		$(MSWDIR)\dcmemory.obj \
 		$(MSWDIR)\dcprint.obj \
+		$(MSWDIR)\dcraww.obj \
 		$(MSWDIR)\dcscreen.obj \
 		$(MSWDIR)\dde.obj \
 		$(MSWDIR)\dialog.obj \
@@ -267,6 +271,7 @@
 		$(MSWDIR)\printwin.obj \
 		$(MSWDIR)\radiobox.obj \
 		$(MSWDIR)\radiobut.obj \
+		$(MSWDIR)\rawbtmpw.obj \
 		$(MSWDIR)\regconf.obj \
 		$(MSWDIR)\region.obj \
 		$(MSWDIR)\registry.obj \
Index: src/x11/files.lst
===================================================================
--- src/x11/files.lst	(revision 21)
+++ src/x11/files.lst	(revision 21)
@@ -40,6 +40,7 @@
 		generic/colrdlgg.cpp \
 		generic/dcbuffer.cpp \
 		generic/dcpsg.cpp \
+		generic/dcrawg.cpp \
 		generic/dirctrlg.cpp \
 		generic/dirdlgg.cpp \
 		generic/dragimgg.cpp \
@@ -65,6 +66,7 @@
 		generic/prop.cpp \
 		generic/propform.cpp \
 		generic/proplist.cpp \
+		generic/rawbtmpg.cpp \
 		generic/sashwin.cpp \
 		generic/scrlwing.cpp \
 		generic/spinctlg.cpp \
@@ -100,6 +102,7 @@
 		common/dbgrid.cpp \
 		common/dbtable.cpp \
 		common/dcbase.cpp \
+		common/dcraw.cpp \
 		common/dircmn.cpp \
 		common/dlgcmn.cpp \
 		common/dndcmn.cpp \
@@ -173,6 +176,7 @@
 		common/protocol.cpp \
 		common/quantize.cpp \
 		common/radiocmn.cpp \
+		common/rawbtmp.cpp \
 		common/regex.cpp \
 		common/resource.cpp \
 		common/sckaddr.cpp \
@@ -291,6 +295,7 @@
 		dcmemory.h \
 		dcprint.h \
 		dcps.h \
+		dcraw.h \
 		dcscreen.h \
 		dde.h \
 		debug.h \
@@ -407,6 +412,7 @@
 		proplist.h \
 		radiobox.h \
 		radiobut.h \
+		rawbtmp.h \
 		regex.h \
 		region.h \
 		resource.h \
@@ -557,6 +563,7 @@
 		generic/choicdgg.h \
 		generic/colrdlgg.h \
 		generic/dcpsg.h \
+		generic/dcrawg.h \
 		generic/dirctrlg.h \
 		generic/dirdlgg.h \
 		generic/dragimgg.h \
@@ -579,6 +586,7 @@
 		generic/printps.h \
 		generic/prntdlgg.h \
 		generic/progdlgg.h \
+		generic/rawbtmpg.h \
 		generic/sashwin.h \
 		generic/scrolwin.h \
 		generic/spinctlg.h \
@@ -670,6 +678,7 @@
 		dbgrid.o \
 		dbtable.o \
 		dcbase.o \
+		dcraw.o \
 		dircmn.o \
 		dlgcmn.o \
 		dndcmn.o \
@@ -743,6 +752,7 @@
 		protocol.o \
 		quantize.o \
 		radiocmn.o \
+		rawbtmp.o \
 		regex.o \
 		resource.o \
 		sckaddr.o \
@@ -790,6 +800,7 @@
 		colrdlgg.o \
 		dcbuffer.o \
 		dcpsg.o \
+		dcrawg.o \
 		dirctrlg.o \
 		dirdlgg.o \
 		dragimgg.o \
@@ -815,6 +826,7 @@
 		prop.o \
 		propform.o \
 		proplist.o \
+		rawbtmpg.o \
 		sashwin.o \
 		scrlwing.o \
 		spinctlg.o \
Index: setup.h.in
===================================================================
--- setup.h.in	(revision 21)
+++ setup.h.in	(revision 21)
@@ -399,6 +399,10 @@
  */
 #define wxUSE_RADIOBTN 0
 /*
+ * Use wxRawBitmap and wxRawBitmapDC
+ */
+#define wxUSE_RAWBITMAP 0
+/*
  * Use this control
  */
 #define wxUSE_SASH 0
Index: include/wx/univ/setup.h
===================================================================
--- include/wx/univ/setup.h	(revision 21)
+++ include/wx/univ/setup.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Vadim Zeitlin
 // Modified by:
 // Created:     14.08.00
-// RCS-ID:      $Id: setup.h,v 1.22 2002/03/21 02:37:18 VZ Exp $
+// RCS-ID:      $Id: setup.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) 2000 SciTech Software, Inc. (www.scitechsoft.com)
 // Licence:     wxWindows license
 ///////////////////////////////////////////////////////////////////////////////
@@ -102,6 +102,7 @@
 #define wxUSE_LISTCTRL     0
 #define wxUSE_RADIOBOX     1
 #define wxUSE_RADIOBTN     1
+#define wxUSE_RAWBITMAP    1
 #define wxUSE_SASH         0
 #define wxUSE_SCROLLBAR    1
 #define wxUSE_SLIDER       1
Index: include/wx/dcraw.h
===================================================================
--- include/wx/dcraw.h	(revision 21)
+++ include/wx/dcraw.h	(revision 21)
@@ -0,0 +1,57 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcraw.cpp
+// Purpose:     wxRawBitmapDC class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcraw.h,v 1.2 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_DCRAW_H_BASE_
+#define _WX_DCRAW_H_BASE_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "dcrawbase.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#include "wx/dc.h"
+
+class WXDLLEXPORT wxRawBitmap;
+class WXDLLEXPORT wxRawBitmapDCBase;
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapDCBase
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapDCBase : public wxDC
+{
+public:
+    virtual void SelectObject(wxRawBitmap& bitmap) = 0;
+
+private:
+    DECLARE_ABSTRACT_CLASS(wxRawBitmapDCBase)
+};
+
+//-----------------------------------------------------------------------------
+// Platform-Specific Headers
+//-----------------------------------------------------------------------------
+
+// We always want the generic DC.  This allows any platform to call the
+// portable routines instead of the native ones (which may be useful
+// to applications with precise layout requirements).
+#include "wx/generic/dcrawg.h"
+
+// If a native DC is available, include it.  If not, use the generic
+// DC in place of the native DC.
+#if defined(__WXMSW__)
+    #include "wx/msw/dcraww.h"
+#else
+    typedef wxRawBitmapDCGeneric wxRawBitmapDC;
+#endif
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_DCRAW_H_BASE_
Index: include/wx/mac/setup0.h
===================================================================
--- include/wx/mac/setup0.h	(revision 21)
+++ include/wx/mac/setup0.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Stefan Csomor
 // Modified by: Stefan Csomor
 // Created:     ??/??/98
-// RCS-ID:      $Id: setup0.h,v 1.11 2002/08/20 18:38:05 JS Exp $
+// RCS-ID:      $Id: setup0.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) AUTHOR
 // Licence:   	wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -453,6 +453,7 @@
 #define wxUSE_PROPSHEET    1    // wxProperty
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/msw/setup0.h
===================================================================
--- include/wx/msw/setup0.h	(revision 21)
+++ include/wx/msw/setup0.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id: setup0.h,v 1.123 2002/07/27 22:27:46 VS Exp $
+// RCS-ID:      $Id: setup0.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
@@ -491,6 +491,7 @@
 #define wxUSE_LISTCTRL     1    // wxListCtrl
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/msw/rawbtmpw.h
===================================================================
--- include/wx/msw/rawbtmpw.h	(revision 21)
+++ include/wx/msw/rawbtmpw.h	(revision 21)
@@ -0,0 +1,137 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmpw.h
+// Purpose:     wxRawBitmap class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmpw.h,v 1.2 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_RAWBITMAP_H_
+#define _WX_RAWBITMAP_H_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "rawbtmpw.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+//-----------------------------------------------------------------------------
+// Classes
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapRefData;
+class WXDLLEXPORT wxRawBitmap;
+
+//-----------------------------------------------------------------------------
+// Abstract Pixel API
+//
+// See wx/rawbtmp.h for documentation.
+//-----------------------------------------------------------------------------
+
+typedef long wxRawBitmapStride24;
+typedef unsigned char *wxRawBitmapPixelRef24;
+
+typedef struct {
+	// These members are only for use by the macros below.
+	wxRawBitmapPixelRef24 begin_;
+	wxRawBitmapPixelRef24 end_;
+} wxRawBitmapLimits24;
+
+// You can use these as lvalues or rvalues.
+#define WX_RAW24_RED(ref)   (ref[2])
+#define WX_RAW24_GREEN(ref) (ref[1])
+#define WX_RAW24_BLUE(ref)  (ref[0])
+
+// Use these to move around.
+#define WX_RAW24_OFFSET(ref,stride,x,y) (ref += 3 * x + stride * y)
+#define WX_RAW24_OFFSET_X(ref,x)        (ref += 3 * x)
+#define WX_RAW24_OFFSET_Y(ref,stride,y) (ref += stride * y)
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapRefData
+//
+// NB: This class is a private, reference-counted data structure used to
+// implement wxRawBitmap.
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapRefData : public wxObjectRefData
+{
+public:
+	wxRawBitmapRefData(wxCoord width, wxCoord height,
+					   wxRawBitmapType type);
+	~wxRawBitmapRefData();
+
+	wxRawBitmapType m_Type;
+	WXHBITMAP m_BitmapHandle;
+	wxDC *m_selectedInto;
+
+	// Information about our bitmap.  This is really a BITMAP*,
+	// but we're not supposed to include windows.h from a header.
+	void *m_Bitmap;
+
+private:
+    DECLARE_NO_COPY_CLASS(wxRawBitmapRefData)
+};
+
+//-----------------------------------------------------------------------------
+// wxRawBitmap
+//
+// A portable implementation of wxRawBitmap using wxImage to store the
+// actual bits.  Raw drawing performance is fine, but blitting performance
+// is poor.  The generic implementation of wxRawBitmapDC does not support
+// a full set of wxDC methods.
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmap : public wxRawBitmapBase
+{
+public:
+	wxRawBitmap(); // TODO - Construct a null bitmap.  But do we want one?
+	wxRawBitmap(wxCoord width, wxCoord height,
+				wxRawBitmapType type = wxRAWBITMAP_24BIT);
+
+	// Extract the underlying bitmap handle.  This is Windows-specific
+	// and semi-private, but you can use it if absolutely necessary.
+	WXHBITMAP GetHBITMAP();
+
+	// Methods similar to wxBitmap.
+	virtual bool Ok() const;
+	virtual wxCoord GetWidth() const;
+	virtual wxCoord GetHeight() const;
+	virtual int GetDepth() const;
+
+	// Raw access methods.
+	virtual wxRawBitmapType GetType() const;
+	virtual void Lock() {}
+	virtual void Unlock() {}
+
+	// These functions are only callable if GetType returns
+	// wxRAWBITMAP_24BIT.
+	virtual wxRawBitmapPixelRef24 GetData24();
+	virtual wxRawBitmapStride24 GetStride24();
+	virtual wxRawBitmapLimits24 GetLimits24();
+
+	// This isn't guaranteed to be here in the future--we
+	// need to decide how to handle blitting between
+	// wxBitmap and wxRawBitmap objects.
+    virtual bool BlitTo(wxDC *dest, wxCoord xdest, wxCoord ydest,
+						wxCoord width, wxCoord height,
+						wxCoord xsrc, wxCoord ysrc);
+
+	// Semi-private functions for use by wxRawBitmapDC, which
+	// needs to make sure no bitmap gets selected into more than
+	// one device context at a time.
+    void SetSelectedInto(wxDC *dc);
+    wxDC *GetSelectedInto() const;	
+
+private:
+	wxRawBitmapRefData *GetRawBitmapRefData() const;
+	const void *GetBitmap() const;
+
+    DECLARE_DYNAMIC_CLASS(wxRawBitmap)
+};
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_RAWBITMAP_H_
Index: include/wx/msw/dcraww.h
===================================================================
--- include/wx/msw/dcraww.h	(revision 21)
+++ include/wx/msw/dcraww.h	(revision 21)
@@ -0,0 +1,58 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcraww.h
+// Purpose:     wxRawBitmapDC class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcraww.h,v 1.2 2003/01/09 23:28:25 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_DCRAW_H_
+#define _WX_DCRAW_H_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "dcraww.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#include "wx/rawbtmp.h"
+#include "wx/dc.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapDC;
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapDC
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapDC : public wxRawBitmapDCBase
+{
+public:
+	wxRawBitmapDC();
+	wxRawBitmapDC(wxRawBitmap &bitmap);
+	~wxRawBitmapDC();
+	
+    void SelectObject(wxRawBitmap& bitmap);
+
+	void Clear();
+
+protected:
+	WXHBITMAP m_oldRawBitmap;
+	wxRawBitmap m_selectedRawBitmap;
+	
+private:
+	void InitDC();
+	void SelectOldBitmap(WXHDC dc);
+    void SelectBitmap(wxRawBitmap& bitmap);
+
+    DECLARE_DYNAMIC_CLASS(wxRawBitmapDC)
+};
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_DCRAW_H_
Index: include/wx/msw/setup.h
===================================================================
--- include/wx/msw/setup.h	(revision 21)
+++ include/wx/msw/setup.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id: setup0.h,v 1.123 2002/07/27 22:27:46 VS Exp $
+// RCS-ID:      $Id: setup.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
@@ -491,6 +491,7 @@
 #define wxUSE_LISTCTRL     1    // wxListCtrl
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/msw/setup_microwin.h
===================================================================
--- include/wx/msw/setup_microwin.h	(revision 21)
+++ include/wx/msw/setup_microwin.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id: setup_microwin.h,v 1.9 2002/03/27 18:43:12 VZ Exp $
+// RCS-ID:      $Id: setup_microwin.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows license
 /////////////////////////////////////////////////////////////////////////////
@@ -467,6 +467,7 @@
 #define wxUSE_LISTCTRL     0    // wxListCtrl
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/os2/setup0.h
===================================================================
--- include/wx/os2/setup0.h	(revision 21)
+++ include/wx/os2/setup0.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id: SETUP0.H,v 1.42 2002/08/19 02:24:22 DW Exp $
+// RCS-ID:      $Id: setup0.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -93,6 +93,7 @@
 #define wxUSE_LISTCTRL     1    // wxListCtrl
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/os2/setup.h
===================================================================
--- include/wx/os2/setup.h	(revision 21)
+++ include/wx/os2/setup.h	(revision 21)
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id: SETUP0.H,v 1.42 2002/08/19 02:24:22 DW Exp $
+// RCS-ID:      $Id: setup.h,v 1.2 2003/01/07 20:35:16 emk Exp $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -93,6 +93,7 @@
 #define wxUSE_LISTCTRL     1    // wxListCtrl
 #define wxUSE_RADIOBOX     1    // wxRadioBox
 #define wxUSE_RADIOBTN     1    // wxRadioButton
+#define wxUSE_RAWBITMAP    1    // wxRawBitmap
 #define wxUSE_SCROLLBAR    1    // wxScrollBar
 #define wxUSE_SLIDER       1    // wxSlider
 #define wxUSE_SPINBTN      1    // wxSpinButton
Index: include/wx/rawbtmp.h
===================================================================
--- include/wx/rawbtmp.h	(revision 21)
+++ include/wx/rawbtmp.h	(revision 21)
@@ -0,0 +1,151 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmp.h
+// Purpose:     wxRawBitmap class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmp.h,v 1.4 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_RAWBITMAP_H_BASE_
+#define _WX_RAWBITMAP_H_BASE_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "rawbtmpbase.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#include "wx/dc.h"
+#include "wx/object.h"
+
+//-----------------------------------------------------------------------------
+// Classes
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapBase;
+
+//-----------------------------------------------------------------------------
+// Bitmap Types
+//
+// For now, we only support raw-accessible, 24-bit data.  Since wxWindows
+// already has way too many bitmap-like classes, however, I'm making the
+// bitmap type a parameter so other bitmap types may be added without
+// breaking the general API.
+//-----------------------------------------------------------------------------
+
+typedef unsigned long wxRawBitmapType;
+
+enum /* wxRawBitmapType */ {
+	wxRAWBITMAP_24BIT = 0x01
+};
+
+//-----------------------------------------------------------------------------
+// Abstract Pixel API
+//
+// We need to access our raw bitmap data (1) portably and (2) efficiently.
+// We do this using a two-dimensional "iteration" interface.  Performance
+// is extremely important here: these functions will be called hundreds
+// of thousands of times in a row, and even small inefficiencies will
+// make applications seem slow.
+//
+// We can't rely on inline functions, because not all compilers actually
+// bother to inline them unless we crank the optimization levels way up.
+// Therefore, we use processor macros to wring maximum speed out of stupid
+// compilers.
+//
+// Several macros take a 'stride' parameter.  This is the distance
+// (in abstract units) between the point (x,y) and (x,y+1).  Do not assume
+// that rows are laid out consecutively in memory--this is often not the
+// case.  The are often gaps between rows, and on some platforms, the
+// stride is actually negative.
+//
+// Handy tip: Because of L1 cache, L2 cache and TLBs, it's much more
+// efficient to move in short horizontal hops than in big vertical hops.
+// Try to call WX_RAW24_OFFSET_X from your inner loop and WX_RAW24_OFFSET_Y
+// from your outer loop when possible.
+//-----------------------------------------------------------------------------
+
+// Opaque data types.
+//   typedef ... wxRawBitmapStride24;
+//   typedef ... wxRawBitmapPixelRef24;
+//   typedef ... wxRawBitmapLimits24;
+
+// Abstract accessors.
+//   #define WX_RAW24_RED(ref)   ...
+//   #define WX_RAW24_GREEN(ref) ...
+//   #define WX_RAW24_BLUE(ref)  ...
+
+// Use these to move around.
+//   #define WX_RAW24_OFFSET(ref,stride,x,y) ...
+//   #define WX_RAW24_OFFSET_X(ref,x)        ...
+//   #define WX_RAW24_OFFSET_Y(ref,stride,y) ...
+
+// Assert (in debug builds only) that a given pixel ref is in bounds.
+// This will slow down your graphics code considerably, but it's a
+// big help in detecting out-of-bounds access in highly optimized
+// drawing routines.
+#ifdef __WXDEBUG__
+#	define WX_RAW24_DECLARE_LIMITS(name,rawbitmap) \
+		wxRawBitmapLimits24 name = (rawbitmap).GetLimits24()
+#	define WX_RAW24_ASSERT_WITHIN_LIMITS(name,ref) \
+		wxASSERT((name).begin_ <= (ref) && (ref) < (name).end_)
+#else
+#	define WX_RAW24_DECLARE_LIMITS(name,rawbitmap) ((void) 0)
+#	define WX_RAW24_ASSERT_WITHIN_LIMITS(name,ref) ((void) 0)
+#endif
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapBase
+//
+// Abstract interface for platform-specific wxRawBitmap classes.
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapBase : public wxObject
+{
+public:
+    // Methods similar to wxBitmap.
+    virtual bool Ok() const = 0;
+    virtual wxCoord GetWidth() const = 0;
+    virtual wxCoord GetHeight() const = 0;
+    virtual int GetDepth() const = 0;
+    
+    // Raw access methods.
+    virtual wxRawBitmapType GetType() const = 0;
+    virtual void Lock() = 0;
+    virtual void Unlock() = 0;
+
+    // These functions are only callable if GetType returns
+    // wxRAWBITMAP_24BIT.
+    //   virtual wxRawBitmapPixelRef24 GetData24();
+    //   virtual wxRawBitmapStride24 GetStride24();
+    //   virtual wxRawBitmapLimits24 GetLimits24();  
+
+	// This isn't guaranteed to be here in the future--we
+	// need to decide how to handle blitting between
+	// wxBitmap and wxRawBitmap objects.
+    virtual bool BlitTo(wxDC *dest, wxCoord xdest, wxCoord ydest,
+						wxCoord width, wxCoord height,
+						wxCoord xsrc, wxCoord ysrc) = 0;
+
+private:
+    DECLARE_ABSTRACT_CLASS(wxRawBitmapBase)
+};
+
+//-----------------------------------------------------------------------------
+// Platform-Specific Headers
+//-----------------------------------------------------------------------------
+
+#if defined(__WXMSW__)
+    #include "wx/msw/rawbtmpw.h"
+#else
+    #include "wx/generic/rawbtmpg.h"
+#endif
+
+// MERGE - This really belongs in gdicmn.h.
+WXDLLEXPORT_DATA(extern wxRawBitmap)     wxNullRawBitmap;
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_RAWBITMAP_H_BASE_
Index: include/wx/generic/rawbtmpg.h
===================================================================
--- include/wx/generic/rawbtmpg.h	(revision 21)
+++ include/wx/generic/rawbtmpg.h	(revision 21)
@@ -0,0 +1,126 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        rawbtmpg.h
+// Purpose:     wxRawBitmap class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: rawbtmpg.h,v 1.5 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_RAWBITMAP_H_
+#define _WX_RAWBITMAP_H_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "rawbtmpg.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+#include "wx/image.h"
+
+//-----------------------------------------------------------------------------
+// Classes
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapRefData;
+class WXDLLEXPORT wxRawBitmap;
+
+//-----------------------------------------------------------------------------
+// Abstract Pixel API
+//
+// See wx/rawbtmp.h for documentation.
+//-----------------------------------------------------------------------------
+
+typedef long wxRawBitmapStride24;
+typedef unsigned char *wxRawBitmapPixelRef24;
+
+typedef struct {
+	// These members are only for use by the macros below.
+	wxRawBitmapPixelRef24 begin_;
+	wxRawBitmapPixelRef24 end_;
+} wxRawBitmapLimits24;
+
+// You can use these as lvalues or rvalues.
+#define WX_RAW24_RED(ref)   (ref[0])
+#define WX_RAW24_GREEN(ref) (ref[1])
+#define WX_RAW24_BLUE(ref)  (ref[2])
+
+// Use these to move around.
+#define WX_RAW24_OFFSET(ref,stride,x,y) (ref += 3 * x + stride * y)
+#define WX_RAW24_OFFSET_X(ref,x)        (ref += 3 * x)
+#define WX_RAW24_OFFSET_Y(ref,stride,y) (ref += stride * y)
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapRefData
+//
+// NB: This class is a private, reference-counted data structure used to
+// implement wxRawBitmap.
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapRefData : public wxObjectRefData
+{
+public:
+	wxRawBitmapRefData(wxCoord width, wxCoord height,
+					   wxRawBitmapType type);
+
+	wxRawBitmapType m_Type;
+	wxImage m_Image;
+
+private:
+    DECLARE_NO_COPY_CLASS(wxRawBitmapRefData)
+};
+
+//-----------------------------------------------------------------------------
+// wxRawBitmap
+//
+// A portable implementation of wxRawBitmap using wxImage to store the
+// actual bits.  Raw drawing performance is fine, but blitting performance
+// is poor.  The generic implementation of wxRawBitmapDC does not support
+// a full set of wxDC methods.
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmap : public wxRawBitmapBase
+{
+public:
+	wxRawBitmap(); // TODO - Construct a null bitmap.  But do we want one?
+	wxRawBitmap(wxCoord width, wxCoord height,
+				wxRawBitmapType type = wxRAWBITMAP_24BIT);
+
+	// Methods similar to wxBitmap.
+	virtual bool Ok() const;
+	virtual wxCoord GetWidth() const;
+	virtual wxCoord GetHeight() const;
+	virtual int GetDepth() const;
+
+	// Raw access methods.
+	virtual wxRawBitmapType GetType() const;
+	virtual void Lock() {}
+	virtual void Unlock() {}
+
+	// These functions are only callable if GetType returns
+	// wxRAWBITMAP_24BIT.
+	virtual wxRawBitmapPixelRef24 GetData24();
+	virtual wxRawBitmapStride24 GetStride24();
+	virtual wxRawBitmapLimits24 GetLimits24();
+
+	// This isn't guaranteed to be here in the future--we
+	// need to decide how to handle blitting between
+	// wxBitmap and wxRawBitmap objects.
+    virtual bool BlitTo(wxDC *dest, wxCoord xdest, wxCoord ydest,
+						wxCoord width, wxCoord height,
+						wxCoord xsrc, wxCoord ysrc);
+
+private:
+	wxRawBitmapRefData *GetRawBitmapRefData() const;
+	wxImage *GetImage() const;
+
+    DECLARE_DYNAMIC_CLASS(wxRawBitmap)
+};
+
+// TODO - Do we want one of these, and if so, where should it live?
+//WXDLLEXPORT_DATA(extern wxRawBitmap) wxNullRawBitmap;
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_RAWBITMAP_H_
Index: include/wx/generic/dcrawg.h
===================================================================
--- include/wx/generic/dcrawg.h	(revision 21)
+++ include/wx/generic/dcrawg.h	(revision 21)
@@ -0,0 +1,131 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+/////////////////////////////////////////////////////////////////////////////
+// Name:        dcrawg.h
+// Purpose:     wxRawBitmapDCGeneric class
+// Author:      Eric Kidd
+// Modified by:
+// RCS-ID:      $Id: dcrawg.h,v 1.2 2003/01/09 00:37:42 emk Exp $
+// Copyright:   Copyright 2002-2003 Trustees of Dartmouth College
+// Licence:     wxWindows license
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_DCRAW_GENERIC_H_
+#define _WX_DCRAW_GENERIC_H_
+
+#if defined(__GNUG__) && !defined(__APPLE__)
+#pragma interface "dcrawg.h"
+#endif
+
+#if wxUSE_RAWBITMAP
+
+// Note that we're implemented in terms of wx/rawbtmp.h, not in terms
+// of wx/generic/rawbtmpg.h.  This allows the generic wxRawBitmapDCGeneric to
+// be used with non-generic wxRawBitmap classes.  This could be very
+// useful under wxGTK and the other X11 ports--they can supply much faster
+// wxRawBitmap classes, but they still need the generic DC.
+#include "wx/rawbtmp.h"
+#include "wx/dc.h"
+
+//-----------------------------------------------------------------------------
+// classes
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapDCGeneric;
+
+//-----------------------------------------------------------------------------
+// wxRawBitmapDCGeneric
+//-----------------------------------------------------------------------------
+
+class WXDLLEXPORT wxRawBitmapDCGeneric : public wxRawBitmapDCBase
+{
+public:
+	wxRawBitmapDCGeneric();
+	wxRawBitmapDCGeneric(wxRawBitmap &bitmap);
+	
+    virtual void SelectObject(wxRawBitmap& bitmap);
+
+    virtual void Clear();
+
+    virtual void SetFont(const wxFont& font);
+    virtual void SetPen(const wxPen& pen);
+    virtual void SetBrush(const wxBrush& brush);
+    virtual void SetBackground(const wxBrush& brush);
+    virtual void SetBackgroundMode(int mode);
+#if wxUSE_PALETTE
+    virtual void SetPalette(const wxPalette& palette);
+#endif // wxUSE_PALETTE
+
+    virtual wxCoord GetCharHeight() const;
+    virtual wxCoord GetCharWidth() const;
+
+    virtual bool CanDrawBitmap() const;
+    virtual bool CanGetTextExtent() const;
+    virtual int GetDepth() const;
+
+    virtual void SetLogicalFunction(int function);
+
+protected:
+    virtual bool DoFloodFill(wxCoord x, wxCoord y, const wxColour& col,
+							 int style = wxFLOOD_SURFACE);
+	
+    virtual bool DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const;
+	
+    virtual void DoDrawPoint(wxCoord x, wxCoord y);
+    virtual void DoDrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2);
+	
+    virtual void DoDrawArc(wxCoord x1, wxCoord y1,
+						   wxCoord x2, wxCoord y2,
+						   wxCoord xc, wxCoord yc);
+    virtual void DoDrawCheckMark(wxCoord x, wxCoord y,
+								 wxCoord width, wxCoord height);
+    virtual void DoDrawEllipticArc(wxCoord x, wxCoord y, wxCoord w, wxCoord h,
+								   double sa, double ea);
+	
+    virtual void DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width,
+								 wxCoord height);
+    virtual void DoDrawRoundedRectangle(wxCoord x, wxCoord y,
+										wxCoord width, wxCoord height,
+										double radius);
+    virtual void DoDrawEllipse(wxCoord x, wxCoord y,
+							   wxCoord width, wxCoord height);
+	
+    virtual void DoCrossHair(wxCoord x, wxCoord y);
+	
+    virtual void DoDrawIcon(const wxIcon& icon, wxCoord x, wxCoord y);
+    virtual void DoDrawBitmap(const wxBitmap &bmp, wxCoord x, wxCoord y,
+							  bool useMask = FALSE);
+	
+    virtual void DoDrawText(const wxString& text, wxCoord x, wxCoord y);
+    virtual void DoDrawRotatedText(const wxString& text,
+								   wxCoord x, wxCoord y, double angle);
+	
+    virtual bool DoBlit(wxCoord xdest, wxCoord ydest,
+						wxCoord width, wxCoord height,
+						wxDC *source, wxCoord xsrc, wxCoord ysrc,
+						int rop = wxCOPY, bool useMask = FALSE,
+						wxCoord xsrcMask = -1, wxCoord ysrcMask = -1);
+	
+    virtual void DoGetSize(int *width, int *height) const;
+	
+    virtual void DoDrawLines(int n, wxPoint points[],
+							 wxCoord xoffset, wxCoord yoffset);
+    virtual void DoDrawPolygon(int n, wxPoint points[],
+							   wxCoord xoffset, wxCoord yoffset,
+							   int fillStyle = wxODDEVEN_RULE);
+	
+    virtual void DoSetClippingRegionAsRegion(const wxRegion& region);
+    virtual void DoSetClippingRegion(wxCoord x, wxCoord y,
+									 wxCoord width, wxCoord height);
+	
+    virtual void DoGetTextExtent(const wxString& string,
+								 wxCoord *x, wxCoord *y,
+								 wxCoord *descent = NULL,
+								 wxCoord *externalLeading = NULL,
+								 wxFont *theFont = NULL) const;
+	
+private:
+    DECLARE_DYNAMIC_CLASS(wxRawBitmapDCGeneric)
+};
+
+#endif // wxUSE_RAWBITMAP
+#endif // _WX_DCRAW_GENERIC_H_
Index: configure.in
===================================================================
--- configure.in	(revision 21)
+++ configure.in	(revision 21)
@@ -1,5 +1,5 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_REVISION($Id: configure.in,v 1.624 2002/09/15 17:20:14 VZ Exp $)dnl
+AC_REVISION($Id: configure.in,v 1.2 2003/01/07 20:35:16 emk Exp $)dnl
 
 dnl ---------------------------------------------------------------------------
 dnl
@@ -8,7 +8,7 @@
 dnl
 dnl This script is under the wxWindows licence.
 dnl
-dnl Version: $Id: configure.in,v 1.624 2002/09/15 17:20:14 VZ Exp $
+dnl Version: $Id: configure.in,v 1.2 2003/01/07 20:35:16 emk Exp $
 dnl ---------------------------------------------------------------------------
 
 dnl ---------------------------------------------------------------------------
@@ -415,6 +415,7 @@
   DEFAULT_wxUSE_FILESYSTEM=no
   DEFAULT_wxUSE_FS_INET=no
   DEFAULT_wxUSE_FS_ZIP=no
+  DEFAULT_wxUSE_RAWBITMAP=no
   DEFAULT_wxUSE_BUSYINFO=no
   DEFAULT_wxUSE_ZIPSTREAM=no
   DEFAULT_wxUSE_VALIDATORS=no
@@ -590,6 +591,7 @@
   DEFAULT_wxUSE_FILESYSTEM=yes
   DEFAULT_wxUSE_FS_INET=yes
   DEFAULT_wxUSE_FS_ZIP=yes
+  DEFAULT_wxUSE_RAWBITMAP=yes
   DEFAULT_wxUSE_BUSYINFO=yes
   DEFAULT_wxUSE_ZIPSTREAM=yes
   DEFAULT_wxUSE_VALIDATORS=yes
@@ -1019,6 +1021,7 @@
 WX_ARG_ENABLE(joystick,    [  --enable-joystick       use wxJoystick (Linux only)], wxUSE_JOYSTICK)
 WX_ARG_ENABLE(metafile,    [  --enable-metafiles      use wxMetaFile (Windows only)], wxUSE_METAFILE)
 WX_ARG_ENABLE(dragimage,   [  --enable-dragimage      use wxDragImage], wxUSE_DRAGIMAGE)
+WX_ARG_ENABLE(rawbitmap,   [  --enable-rawbitmap      use wxRawBitmap], wxUSE_RAWBITMAP)
 
 dnl ---------------------------------------------------------------------------
 dnl support for image formats that do not rely on external library
@@ -4810,6 +4813,11 @@
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS minifram"
 fi
 
+if test "$wxUSE_RAWBITMAP" = "yes"; then
+    AC_DEFINE(wxUSE_RAWBITMAP)
+    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS rawbitmap"
+fi
+
 if test "$wxUSE_HTML" = "yes"; then
     AC_DEFINE(wxUSE_HTML)
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS html"
Index: distrib/msw/tmake/filelist.txt
===================================================================
--- distrib/msw/tmake/filelist.txt	(revision 21)
+++ distrib/msw/tmake/filelist.txt	(revision 21)
@@ -3,7 +3,7 @@
 # Purpose: The list of source files for MSW version of wxWindows.
 # Author:  Vadim Zeitlin
 # Created: 14.07.99
-# Version: $Id: filelist.txt,v 1.266 2002/09/15 18:15:39 VZ Exp $
+# Version: $Id: filelist.txt,v 1.2 2003/01/07 20:35:16 emk Exp $
 #
 # Format of this file: TAB separated columns. The first column contains the
 # filename, the second the file type (roughly corresponds to the directory)
@@ -75,6 +75,7 @@
 colrdlgg.cpp	Generic	Generic
 dcbuffer.cpp	Generic
 dcpsg.cpp	Generic
+dcrawg.cpp	Generic
 dirctrlg.cpp	Generic
 dirdlgg.cpp	Generic	NotWin32
 dragimgg.cpp	Generic	NotOS2
@@ -102,6 +103,7 @@
 prop.cpp	Generic
 propform.cpp	Generic
 proplist.cpp	Generic
+rawbtmpg.cpp	Generic	NotMSW
 sashwin.cpp	Generic
 scrlwing.cpp	Generic
 spinctlg.cpp	Generic
@@ -140,6 +142,7 @@
 dbgrid.cpp	Common	Win32Only,NotMac
 dbtable.cpp	Common	Win32Only,Base
 dcbase.cpp	Common
+dcraw.cpp	Common
 dircmn.cpp	Common	Base
 dlgcmn.cpp	Common
 dndcmn.cpp	Common
@@ -215,6 +218,7 @@
 protocol.cpp	Common	Socket,Base
 quantize.cpp	Common
 radiocmn.cpp	Common	NotMac
+rawbtmp.cpp	Common
 regex.cpp	Common	Base
 resource.cpp	Common
 sckaddr.cpp	Common	Socket,Base
@@ -279,6 +283,7 @@
 dcclient.cpp	MSW	LowLevel
 dcmemory.cpp	MSW	LowLevel
 dcprint.cpp	MSW	LowLevel
+dcraww.cpp	MSW
 dcscreen.cpp	MSW	LowLevel
 dde.cpp	MSW	LowLevel,Base
 dialog.cpp	MSW
@@ -334,6 +339,7 @@
 printwin.cpp	MSW
 radiobox.cpp	MSW
 radiobut.cpp	MSW
+rawbtmpw.cpp	MSW
 regconf.cpp	MSW	Win32Only,Base,LowLevel
 region.cpp	MSW	LowLevel
 registry.cpp	MSW	Win32Only,Base,LowLevel
@@ -797,6 +803,7 @@
 dcmemory.h	WXH
 dcprint.h	WXH
 dcps.h	WXH
+dcraw.h	WXH
 dcscreen.h	WXH
 dde.h	WXH	Base
 debug.h	WXH	Base
@@ -917,6 +924,7 @@
 proplist.h	WXH
 radiobox.h	WXH
 radiobut.h	WXH
+rawbtmp.h	WXH
 regex.h	WXH	Base
 region.h	WXH
 resource.h	WXH
@@ -1252,6 +1260,7 @@
 dcclient.h	MSWH
 dcmemory.h	MSWH
 dcprint.h	MSWH
+dcraww.h	MSWH
 dcscreen.h	MSWH
 dde.h	MSWH	Base
 dialog.h	MSWH
@@ -1298,6 +1307,7 @@
 private.h	MSWH
 radiobox.h	MSWH
 radiobut.h	MSWH
+rawbtmpw.h	MSWH
 regconf.h	MSWH
 region.h	MSWH
 registry.h	MSWH
@@ -1465,6 +1475,7 @@
 choicdgg.h	GenericH
 colrdlgg.h	GenericH
 dcpsg.h	GenericH
+dcrawg.h	GenericH
 dirctrlg.h	GenericH
 dirdlgg.h	GenericH	NotWin32
 dragimgg.h	GenericH	NotWin32
@@ -1487,6 +1498,7 @@
 printps.h	GenericH
 prntdlgg.h	GenericH
 progdlgg.h	GenericH
+rawbtmpg.h	GenericH	NotMSW
 sashwin.h	GenericH
 scrolwin.h	GenericH
 spinctlg.h	GenericH
Index: distrib/msw/tmake/Makefile
===================================================================
Index: samples/rawbitmap/rawbitmap.dsw
===================================================================
--- samples/rawbitmap/rawbitmap.dsw	(revision 21)
+++ samples/rawbitmap/rawbitmap.dsw	(revision 21)
@@ -0,0 +1,29 @@
+Microsoft Developer Studio Workspace File, Format Version 6.00
+# WARNING: DO NOT EDIT OR DELETE THIS WORKSPACE FILE!
+
+###############################################################################
+
+Project: "rawbitmap"=.\rawbitmap.dsp - Package Owner=<4>
+
+Package=<5>
+{{{
+}}}
+
+Package=<4>
+{{{
+}}}
+
+###############################################################################
+
+Global:
+
+Package=<5>
+{{{
+}}}
+
+Package=<3>
+{{{
+}}}
+
+###############################################################################
+
Index: samples/rawbitmap/Makefile.in
===================================================================
--- samples/rawbitmap/Makefile.in	(revision 21)
+++ samples/rawbitmap/Makefile.in	(revision 21)
@@ -0,0 +1,23 @@
+#
+# File:		Makefile.in
+# Author:	Julian Smart
+# Created:	1998
+# Updated:	
+# Copyright:	(c) 1998 Julian Smart
+#
+# "%W% %G%"
+#
+# Makefile for rawbitmap example (UNIX).
+
+top_srcdir = @top_srcdir@/..
+top_builddir = ../..
+program_dir = samples/rawbitmap
+
+PROGRAM=rawbitmap-test
+
+OBJECTS =$(PROGRAM).o
+DEPFILES=$(PROGRAM).d
+
+include ../../src/makeprog.env
+
+@IF_GNU_MAKE@-include $(DEPFILES)
Index: samples/rawbitmap/rawbitmap-test.cpp
===================================================================
--- samples/rawbitmap/rawbitmap-test.cpp	(revision 21)
+++ samples/rawbitmap/rawbitmap-test.cpp	(revision 21)
@@ -0,0 +1,546 @@
+// -*- Mode: C++; tab-width: 4; c-basic-offset: 4; -*-
+
+// TODO - Fill in standard cruft from artprov.cpp.
+
+// For compilers that support precompilation, includes "wx/wx.h".
+#include "wx/wxprec.h"
+
+// For compilers that don't support precompilation, include only
+// those headers we actually need, to keep things fast.
+#ifndef WX_PRECOMP
+#include "wx/app.h"
+#include "wx/frame.h"
+#include "wx/menu.h"
+#include "wx/dcmemory.h"
+#include "wx/image.h"
+#include "wx/bitmap.h"
+#endif
+
+// These headers are not included in the precompiled headers on
+// any platform.
+#include "wx/rawbtmp.h"
+#include "wx/dcraw.h"
+#include "wx/image.h"
+
+
+//=========================================================================
+//  Constants
+//=========================================================================
+
+// The different image representations this program supports.
+// See below for more information.
+enum {
+	REP_RAWBITMAP,
+	REP_BITMAP,
+	REP_IMAGE,
+
+	REP_COUNT,
+	REP_DEFAULT = REP_RAWBITMAP
+};
+
+// The different tests this program supports.
+enum {
+	TEST_FULLSCREEN,
+	TEST_RECTS,
+
+	TEST_COUNT,
+	TEST_DEFAULT = TEST_FULLSCREEN
+};
+
+// The size of our drawing "stage".
+static const int STAGE_WIDTH = 800;
+static const int STAGE_HEIGHT = 600;
+
+// Menu commands.
+enum {
+	CMD_EXIT,
+	CMD_REP_RAWBITMAP,
+	CMD_REP_BITMAP,
+	CMD_REP_IMAGE,
+	CMD_TEST_FULLSCREEN,
+	CMD_TEST_RECTS,
+};
+
+
+//=========================================================================
+//  Class Declarations
+//=========================================================================
+
+class Stage;
+class Representation;
+
+class MyApp : public wxApp
+{
+public:
+	virtual bool OnInit();
+};
+
+class MyFrame : public wxFrame
+{
+	Stage *m_Stage;
+
+    DECLARE_EVENT_TABLE();
+
+	void OnExit(wxMenuEvent &inEvent);
+	void OnRepRawBitmap(wxMenuEvent &inEvent);
+	void OnRepBitmap(wxMenuEvent &inEvent);
+	void OnRepImage(wxMenuEvent &inEvent);
+	void OnTestFullScreen(wxMenuEvent &inEvent);
+	void OnTestRectangles(wxMenuEvent &inEvent);
+
+public:
+    MyFrame();
+};
+
+class Stage : public wxWindow
+{
+	int mRepID;
+	int mTestID;
+	Representation *mRepresentations[REP_COUNT];
+
+    DECLARE_EVENT_TABLE();
+
+	void OnPaint(wxPaintEvent &inEvent);
+
+public:
+    Stage(wxWindow *inParent, const wxSize &inSize);
+	~Stage();
+
+	void SetRepID(int inRepID);
+	void SetTestID(int inTestID);
+};
+
+
+//=========================================================================
+//  Representation Declarations
+//=========================================================================
+//  We can run our tests using various image representations.  Each
+//  representation is based on a different bitmap-like class: wxBitmap,
+//  wxImage, etc.
+
+class Representation
+{
+public:
+	virtual ~Representation() {}
+
+	// Clear the offscreen representation to the
+	// specified color.
+	virtual void Clear(const wxColour &inColor) = 0;
+
+	// Add some entertaining decorations to the buffer.
+	virtual void Decorate() = 0;
+
+	// Paint the specified DC with the offscreen data.
+	virtual void Paint(wxDC &inDC) = 0;
+
+	// Paint the specified DC with the offscreen data, copying
+	// only the specified rectangle.
+	virtual void PaintRect(wxDC &inDC, const wxRect &inRect) = 0;
+};
+
+class RawBitmapRepresentation : public Representation
+{
+	wxRawBitmap *m_RawBitmap;
+	
+public:
+	RawBitmapRepresentation(const wxSize &inStageSize);
+	~RawBitmapRepresentation();
+
+	void Clear(const wxColour &inColor);
+	void Decorate();
+	void Paint(wxDC &inDC);
+	void PaintRect(wxDC &inDC, const wxRect &inRect);
+};
+
+class BitmapRepresentation : public Representation
+{
+	wxBitmap *m_Bitmap;
+	
+public:
+	BitmapRepresentation(const wxSize &inStageSize);
+	~BitmapRepresentation();
+
+	void Clear(const wxColour &inColor);
+	void Decorate();
+	void Paint(wxDC &inDC);
+	void PaintRect(wxDC &inDC, const wxRect &inRect);
+};
+
+class ImageRepresentation : public Representation
+{
+	wxImage *m_Image;
+
+public:
+	ImageRepresentation(const wxSize &inStageSize);
+	~ImageRepresentation();
+
+	void Clear(const wxColour &inColor);
+	void Decorate();
+	void Paint(wxDC &inDC);
+	void PaintRect(wxDC &inDC, const wxRect &inRect);
+};
+
+
+//=========================================================================
+//  MyApp Implementation
+//=========================================================================
+
+IMPLEMENT_APP(MyApp)
+
+bool MyApp::OnInit()
+{
+    wxFrame *frame = new MyFrame();
+    frame->Show();
+    SetTopWindow(frame);
+    return TRUE;
+}
+
+
+//=========================================================================
+//  MyFrame Implementation
+//=========================================================================
+
+BEGIN_EVENT_TABLE(MyFrame, wxFrame)
+	EVT_MENU(CMD_EXIT, MyFrame::OnExit)
+	EVT_MENU(CMD_REP_RAWBITMAP, MyFrame::OnRepRawBitmap)
+	EVT_MENU(CMD_REP_BITMAP, MyFrame::OnRepBitmap)
+	EVT_MENU(CMD_REP_IMAGE, MyFrame::OnRepImage)
+	EVT_MENU(CMD_TEST_FULLSCREEN, MyFrame::OnTestFullScreen)
+	EVT_MENU(CMD_TEST_RECTS, MyFrame::OnTestRectangles)
+END_EVENT_TABLE()
+
+MyFrame::MyFrame()
+    : wxFrame(NULL, -1, "rawbitmap-test", wxDefaultPosition, wxDefaultSize,
+              wxMINIMIZE_BOX|wxSYSTEM_MENU|wxCAPTION)
+{
+    // Make a stage for drawing.
+    wxSize stage_size(STAGE_WIDTH, STAGE_HEIGHT);
+    m_Stage = new Stage(this, stage_size);
+
+	// Set up our File menu.
+    wxMenu *file_menu = new wxMenu();
+    file_menu->Append(CMD_EXIT, "E&xit\tCtrl+Q", "Exit the application.");
+
+	// Set up our Options menu.
+	// TODO - Test wxHAS_RADIO_MENU_ITEMS.
+    wxMenu *opt_menu = new wxMenu();
+    opt_menu->AppendRadioItem(CMD_REP_RAWBITMAP,
+							  "wx&RawBitmap Representation\tCtrl+R",
+							  "Store data in a wxBitmap.");
+    opt_menu->AppendRadioItem(CMD_REP_BITMAP,
+							  "wx&Bitmap Representation\tCtrl+B",
+							  "Store data in a wxBitmap.");
+    opt_menu->AppendRadioItem(CMD_REP_IMAGE,
+							  "wx&Image Representation\tCtrl+I",
+							  "Store data in a wxImage.");
+	
+	// Set up our Tests menu.
+    wxMenu *tests_menu = new wxMenu();
+	tests_menu->AppendRadioItem(CMD_TEST_FULLSCREEN, "&Full Screen",
+								"Display a full-screen test pattern.");
+	tests_menu->AppendRadioItem(CMD_TEST_RECTS, "&Rectangles",
+								"Display a test pattern with rectangles.");
+
+	// Set up our menu bar.
+    wxMenuBar *menu_bar = new wxMenuBar();
+    menu_bar->Append(file_menu, "&File");
+    menu_bar->Append(opt_menu, "&Options");
+    menu_bar->Append(tests_menu, "&Tests");
+    SetMenuBar(menu_bar);	
+
+    // Force our window to be exactly large enough for the stage.
+	// There are better ways to do this, but they require work.
+    SetClientSize(stage_size);
+}
+
+void MyFrame::OnExit(wxMenuEvent &WXUNUSED(inEvent))
+{
+	// Force the frame to close.
+	Close(TRUE);
+}
+
+void MyFrame::OnRepRawBitmap(wxMenuEvent &WXUNUSED(inEvent))
+{
+	m_Stage->SetRepID(REP_RAWBITMAP);
+}
+
+void MyFrame::OnRepBitmap(wxMenuEvent &WXUNUSED(inEvent))
+{
+	m_Stage->SetRepID(REP_BITMAP);
+}
+
+void MyFrame::OnRepImage(wxMenuEvent &WXUNUSED(inEvent))
+{
+	m_Stage->SetRepID(REP_IMAGE);
+}
+
+void MyFrame::OnTestFullScreen(wxMenuEvent &inEvent)
+{
+	m_Stage->SetTestID(TEST_FULLSCREEN);
+
+}
+
+void MyFrame::OnTestRectangles(wxMenuEvent &inEvent)
+{
+	m_Stage->SetTestID(TEST_RECTS);
+}
+
+
+//=========================================================================
+//  Stage Implementation
+//=========================================================================
+
+BEGIN_EVENT_TABLE(Stage, wxWindow)
+	EVT_PAINT(Stage::OnPaint)
+END_EVENT_TABLE()
+
+Stage::Stage(wxWindow *inParent, const wxSize &inSize)
+	: wxWindow(inParent, -1, wxDefaultPosition, inSize)
+{
+	// Set a reasonable background color.
+	SetBackgroundColour(*wxWHITE);
+
+	// Allocate some offscreen drawing frobs.
+	int i = 0;
+	mRepresentations[i++] = new RawBitmapRepresentation(inSize);
+	mRepresentations[i++] = new BitmapRepresentation(inSize);
+	mRepresentations[i++] = new ImageRepresentation(inSize);
+	wxASSERT(i == REP_COUNT);
+
+	// Prepare our offscreen drawing frobs.
+	mTestID = TEST_DEFAULT;
+	mRepID = REP_DEFAULT;
+	for (i = 0; i < REP_COUNT; i++)
+	{
+		mRepresentations[i]->Clear(wxColour(255, 128, 0));
+		mRepresentations[i]->Decorate();
+	}
+}
+
+Stage::~Stage()
+{
+	int i;
+	for (i = 0; i < REP_COUNT; i++)
+		delete mRepresentations[i];
+}
+
+void Stage::OnPaint(wxPaintEvent &WXUNUSED(inEvent))
+{
+    wxPaintDC screen_dc(this);
+	Representation *rep = mRepresentations[mRepID];
+
+	switch (mTestID)
+	{
+		case TEST_FULLSCREEN:
+			rep->Paint(screen_dc);
+			break;
+
+		case TEST_RECTS:
+			int x, x_step, y, y_step;
+			x_step = STAGE_WIDTH / 10;
+			y_step = STAGE_HEIGHT / 10;
+			for (y = 0; y < STAGE_HEIGHT; y += y_step)
+				for (x = 0; x < STAGE_WIDTH; x += x_step)
+					rep->PaintRect(screen_dc,
+								   wxRect(wxPoint(x, y),
+										  wxSize(x_step - 10, y_step - 10)));
+			break;
+		
+		default:
+			wxFAIL_MSG("Unknown test");
+	}
+}
+
+
+void Stage::SetRepID(int inRepID)
+{
+	mRepID = inRepID;
+	Refresh(TRUE);
+}
+
+void Stage::SetTestID(int inTestID)
+{
+	mTestID = inTestID;
+	Refresh(TRUE);
+}
+
+
+//=========================================================================
+//  RawBitmapRepresentation Implementation
+//=========================================================================
+
+RawBitmapRepresentation::RawBitmapRepresentation(const wxSize &inStageSize)
+{
+	m_RawBitmap =
+		new wxRawBitmap(inStageSize.GetWidth(), inStageSize.GetHeight(),
+						wxRAWBITMAP_24BIT);
+}
+
+RawBitmapRepresentation::~RawBitmapRepresentation()
+{
+	delete m_RawBitmap;
+}
+
+void RawBitmapRepresentation::Clear(const wxColour &inColor)
+{
+	unsigned char red, green, blue;
+	int x, width, y, height;
+	
+	// Cache our screen size.
+	height = m_RawBitmap->GetHeight();
+	width = m_RawBitmap->GetWidth();
+
+	// Cache our colors.
+	red = inColor.Red();
+	green = inColor.Green();
+	blue = inColor.Blue();
+
+	// Actually clear the screen.
+	wxRawBitmapPixelRef24 row_start = m_RawBitmap->GetData24();
+	wxRawBitmapStride24 stride = m_RawBitmap->GetStride24();
+	WX_RAW24_DECLARE_LIMITS(limits, *m_RawBitmap);
+	for (y = height; y; y--)
+	{
+		wxRawBitmapPixelRef24 cursor = row_start;
+		for (x = width; x; x--)
+		{
+			WX_RAW24_ASSERT_WITHIN_LIMITS(limits, cursor);
+			WX_RAW24_RED(cursor) = red;
+			WX_RAW24_GREEN(cursor) = green;
+			WX_RAW24_BLUE(cursor) = blue;
+			WX_RAW24_OFFSET_X(cursor, 1);
+		}
+		WX_RAW24_OFFSET_Y(row_start, stride, 1);
+	}
+}
+
+void RawBitmapRepresentation::Decorate()
+{
+	wxRawBitmapDC dc(*m_RawBitmap);
+
+	dc.SetPen(*wxBLACK_PEN);
+	dc.SetBrush(*wxGREEN_BRUSH);
+	dc.DrawRectangle(20, 20, 100, 100);
+}
+
+void RawBitmapRepresentation::Paint(wxDC &inDC)
+{
+	m_RawBitmap->BlitTo(&inDC, 0, 0,
+						m_RawBitmap->GetWidth(), m_RawBitmap->GetHeight(),
+						0, 0);
+}
+
+void RawBitmapRepresentation::PaintRect(wxDC &inDC, const wxRect &inRect)
+{
+	m_RawBitmap->BlitTo(&inDC, inRect.GetX(), inRect.GetY(),
+						inRect.GetWidth(), inRect.GetHeight(),
+						inRect.GetX(), inRect.GetY());
+}
+
+
+//=========================================================================
+//  BitmapRepresentation Implementation
+//=========================================================================
+
+BitmapRepresentation::BitmapRepresentation(const wxSize &inStageSize)
+{
+	m_Bitmap = new wxBitmap(inStageSize.GetWidth(), inStageSize.GetHeight());
+}
+
+BitmapRepresentation::~BitmapRepresentation()
+{
+	delete m_Bitmap;
+}
+
+void BitmapRepresentation::Clear(const wxColour &inColor)
+{
+	wxMemoryDC dc;
+	dc.SelectObject(*m_Bitmap);
+
+    wxBrush brush(inColor, wxSOLID);
+	dc.SetBackground(brush);
+	dc.Clear();
+}
+
+void BitmapRepresentation::Decorate()
+{
+	wxMemoryDC dc;
+	dc.SelectObject(*m_Bitmap);
+
+	dc.SetPen(*wxBLACK_PEN);
+	dc.SetBrush(*wxGREEN_BRUSH);
+	dc.DrawRectangle(20, 20, 100, 100);
+}
+
+void BitmapRepresentation::Paint(wxDC &inDC)
+{
+	inDC.DrawBitmap(*m_Bitmap, 0, 0);
+}
+
+void BitmapRepresentation::PaintRect(wxDC &inDC, const wxRect &inRect)
+{
+	wxMemoryDC dc;
+	dc.SelectObject(*m_Bitmap);
+	inDC.Blit(inRect.GetPosition(), inRect.GetSize(), &dc,
+			  inRect.GetPosition());
+}
+
+
+//=========================================================================
+//  ImageRepresentation Implementation
+//=========================================================================
+
+ImageRepresentation::ImageRepresentation(const wxSize &inStageSize)
+{
+	m_Image = new wxImage(inStageSize.GetWidth(), inStageSize.GetHeight());
+}
+
+ImageRepresentation::~ImageRepresentation()
+{
+	delete m_Image;
+}
+
+void ImageRepresentation::Clear(const wxColour &inColor)
+{
+	unsigned char red, green, blue;
+	int x, width, y, height;
+	
+	// Cache our screen size.
+	height = m_Image->GetHeight();
+	width = m_Image->GetWidth();
+
+	// Cache our colors.
+	red = inColor.Red();
+	green = inColor.Green();
+	blue = inColor.Blue();
+
+	// Actually clear the screen.
+	unsigned char *cursor = m_Image->GetData();
+	for (y = 0; y < height; y++)
+	{		
+		for (x = 0; x < width; x++)
+		{
+			*cursor++ = red;
+			*cursor++ = green;
+			*cursor++ = blue;
+		}
+	}
+}
+
+void ImageRepresentation::Decorate()
+{
+	// No decorations yet.
+}
+
+void ImageRepresentation::Paint(wxDC &inDC)
+{
+	wxBitmap bitmap(m_Image);
+	inDC.DrawBitmap(bitmap, 0, 0);
+}
+
+void ImageRepresentation::PaintRect(wxDC &inDC, const wxRect &inRect)
+{
+	wxImage subimage = m_Image->GetSubImage(inRect);
+	wxBitmap bitmap(subimage);
+	inDC.DrawBitmap(bitmap, inRect.GetPosition());
+}
Index: samples/rawbitmap/rawbitmap.rc
===================================================================
--- samples/rawbitmap/rawbitmap.rc	(revision 21)
+++ samples/rawbitmap/rawbitmap.rc	(revision 21)
@@ -0,0 +1 @@
+#include "wx/msw/wx.rc"
Index: samples/rawbitmap/rawbitmap.dsp
===================================================================
--- samples/rawbitmap/rawbitmap.dsp	(revision 21)
+++ samples/rawbitmap/rawbitmap.dsp	(revision 21)
@@ -0,0 +1,155 @@
+# Microsoft Developer Studio Project File - Name="rawbitmap" - Package Owner=<4>
+# Microsoft Developer Studio Generated Build File, Format Version 6.00
+# ** DO NOT EDIT **
+
+# TARGTYPE "Win32 (x86) Application" 0x0101
+
+CFG=rawbitmap - Win32 Debug
+!MESSAGE This is not a valid makefile. To build this project using NMAKE,
+!MESSAGE use the Export Makefile command and run
+!MESSAGE 
+!MESSAGE NMAKE /f "rawbitmap.mak".
+!MESSAGE 
+!MESSAGE You can specify a configuration when running NMAKE
+!MESSAGE by defining the macro CFG on the command line. For example:
+!MESSAGE 
+!MESSAGE NMAKE /f "rawbitmap.mak" CFG="rawbitmap - Win32 Debug"
+!MESSAGE 
+!MESSAGE Possible choices for configuration are:
+!MESSAGE 
+!MESSAGE "rawbitmap - Win32 Release DLL" (based on "Win32 (x86) Application")
+!MESSAGE "rawbitmap - Win32 Debug DLL" (based on "Win32 (x86) Application")
+!MESSAGE "rawbitmap - Win32 Release" (based on "Win32 (x86) Application")
+!MESSAGE "rawbitmap - Win32 Debug" (based on "Win32 (x86) Application")
+!MESSAGE 
+
+# Begin Project
+# PROP AllowPerConfigDependencies 0
+# PROP Scc_ProjName ""
+# PROP Scc_LocalPath ""
+CPP=cl.exe
+MTL=midl.exe
+RSC=rc.exe
+
+!IF  "$(CFG)" == "rawbitmap - Win32 Release DLL"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "ReleaseDll"
+# PROP BASE Intermediate_Dir "ReleaseDll"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "ReleaseDll"
+# PROP Intermediate_Dir "ReleaseDll"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W4 /O2 /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /YX /FD /c
+# ADD CPP /nologo /MD /W4 /O2 /I "../../include" /I "..\..\lib\mswdll" /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /D "_MT" /D wxUSE_GUI=1 /D "WXUSINGDLL" /YX /FD /c
+# ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /o "NUL" /win32
+# ADD MTL /nologo /D "NDEBUG" /mktyplib203 /o "NUL" /win32
+# ADD BASE RSC /l 0x409 /i "../../include" /d "NDEBUG"
+# ADD RSC /l 0x409 /i "../../include" /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib /nologo /subsystem:windows /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib ..\..\lib\wxmsw233.lib /nologo /subsystem:windows /machine:I386
+
+!ELSEIF  "$(CFG)" == "rawbitmap - Win32 Debug DLL"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "DebugDll"
+# PROP BASE Intermediate_Dir "DebugDll"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "DebugDll"
+# PROP Intermediate_Dir "DebugDll"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W4 /Zi /Od /D "_DEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /YX /FD /c
+# ADD CPP /nologo /MDd /W4 /Zi /Od /I "../../include" /I "..\..\lib\mswdlld" /D "_DEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /D "_MT" /D wxUSE_GUI=1 /D "__WXDEBUG__" /D WXDEBUG=1 /D "WXUSINGDLL" /YX /FD /c
+# ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /o "NUL" /win32
+# ADD MTL /nologo /D "_DEBUG" /mktyplib203 /o "NUL" /win32
+# ADD BASE RSC /l 0x409 /i "../../include" /d "_DEBUG"
+# ADD RSC /l 0x409 /i "../../include" /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib ..\..\lib\wxmsw233d.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
+
+!ELSEIF  "$(CFG)" == "rawbitmap - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "Release"
+# PROP BASE Intermediate_Dir "Release"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W4 /O2 /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /YX /FD /c
+# ADD CPP /nologo /MD /W4 /O2 /I "../../include" /I "..\..\lib\msw" /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /D "_MT" /D wxUSE_GUI=1 /YX /FD /c
+# ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /o "NUL" /win32
+# ADD MTL /nologo /D "NDEBUG" /mktyplib203 /o "NUL" /win32
+# ADD BASE RSC /l 0x409 /i "../../include" /d "NDEBUG"
+# ADD RSC /l 0x409 /i "../../include" /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib /nologo /subsystem:windows /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib ..\..\lib\zlib.lib ..\..\lib\regex.lib ..\..\lib\png.lib ..\..\lib\jpeg.lib ..\..\lib\tiff.lib ..\..\lib\wxmsw.lib /nologo /subsystem:windows /machine:I386
+
+!ELSEIF  "$(CFG)" == "rawbitmap - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "Debug"
+# PROP BASE Intermediate_Dir "Debug"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W4 /Zi /Od /D "_DEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /YX /FD /c
+# ADD CPP /nologo /MTd /W4 /GR /GX /Zi /Od /I "../../include" /I "..\..\lib\mswd" /D "_DEBUG" /D "WIN32" /D "_WINDOWS" /D WINVER=0x400 /D "_MT" /D wxUSE_GUI=1 /D "__WXDEBUG__" /D WXDEBUG=1 /YX /FD /c
+# ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /o "NUL" /win32
+# ADD MTL /nologo /D "_DEBUG" /mktyplib203 /o "NUL" /win32
+# ADD BASE RSC /l 0x409 /i "../../include" /d "_DEBUG"
+# ADD RSC /l 0x409 /i "../../include" /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib rpcrt4.lib wsock32.lib ..\..\lib\zlibd.lib ..\..\lib\regexd.lib ..\..\lib\pngd.lib ..\..\lib\jpegd.lib ..\..\lib\tiffd.lib ..\..\lib\wxmswd.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
+
+!ENDIF 
+
+# Begin Target
+
+# Name "rawbitmap - Win32 Release DLL"
+# Name "rawbitmap - Win32 Debug DLL"
+# Name "rawbitmap - Win32 Release"
+# Name "rawbitmap - Win32 Debug"
+# Begin Source File
+
+SOURCE=".\rawbitmap-test.cpp"
+# End Source File
+# Begin Source File
+
+SOURCE=.\rawbitmap.rc
+# End Source File
+# End Target
+# End Project
Index: samples/configure.in
===================================================================
--- samples/configure.in	(revision 21)
+++ samples/configure.in	(revision 21)
@@ -1,5 +1,5 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_REVISION($Id: configure.in,v 1.27 2002/08/21 18:41:23 VZ Exp $)dnl
+AC_REVISION($Id: configure.in,v 1.2 2003/01/07 20:35:16 emk Exp $)dnl
 
 AC_INIT(Makefile.in)
 
@@ -69,6 +69,7 @@
             printing/Makefile
             proplist/Makefile
             propsize/Makefile
+	    rawbitmap/Makefile
             resource/Makefile
             rotate/Makefile
             sashtest/Makefile
Index: setup.h_vms
===================================================================
--- setup.h_vms	(revision 21)
+++ setup.h_vms	(revision 21)
@@ -417,6 +417,10 @@
  */
 #define wxUSE_RADIOBTN 1
 /*
+ * Use wxRawBitmap and wxRawBitmapDC
+ */
+#define wxUSE_RAWBITMAP 0
+/*
  * Use this control
  */
 #define wxUSE_SASH 1

 	  	 

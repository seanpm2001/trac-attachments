Index: mediactrl.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/mediactrl.tex,v
retrieving revision 1.9
diff -b -u -2 -r1.9 mediactrl.tex
--- mediactrl.tex	2005/09/17 12:53:06	1.9
+++ mediactrl.tex	2005/11/10 14:39:14
@@ -29,4 +29,5 @@
 \latexignore{\rtfignore{\wxheading{Members}}}
 
+
 \membersection{Rendering media}\label{renderingmediawxmediactrl}
 
@@ -49,4 +50,5 @@
 slightly more flexible in that regard.
 
+
 \membersection{Operation}\label{operationwxmediactrl}
 
@@ -87,4 +89,41 @@
 to keep consistant for all types of media.
 
+
+\membersection{Video size}\label{videosizewxmediactrl}
+
+By default, wxMediaCtrl will scale the size of the video to the 
+requested amount passed to either it's constructor or Create().
+After calling Load or performing an equivilant operation, you
+can subsequently obtain the "real" size of the video (if there 
+is any) by calling GetBestSize(). Note that the actual result
+on the display will be slightly different when ShowPlayerControls
+is activated and the actual video size will be less then 
+specified due to the extra controls provided by the native toolkit.
+In addition, the backend may modify GetBestSize() to include the
+size of the extra controls - so if you want the real size of the 
+video just disable ShowPlayerControls().
+
+The idea with setting GetBestSize to the size of the video is 
+that GetBestSize is a wxWindow-derived function that is called
+when sizers on a window recalculate. What this means is that 
+if you use sizers by default the video will show in it's 
+original size without any extra assistance needed from the user.
+
+
+\membersection{Player controls}\label{playercontrolswxmediactrl}
+
+Normally, when you use wxMediaCtrl it is just a window for the video to 
+play in.  However, some toolkits have their own media player interface.
+For example, QuickTime generally has a bar below the video with a slider.  
+A special feature available to wxMediaCtrl, you can use the toolkit's interface instead of 
+making your own by using the \helpref{ShowPlayerControls()}{wxmediactrlshowplayercontrols}
+function.  There are several options for the flags parameter, with 
+the two general flags being wxMEDIACTRLPLAYERCONTROLS\_NONE which turns off 
+the native interface, and wxMEDIACTRLPLAYERCONTROLS\_DEFAULT which lets 
+wxMediaCtrl decide what native controls on the interface. Be sure to review
+the caveats outlined in \helpref{Video size}{videosizewxmediactrl} before 
+doing so.
+
+
 \membersection{Choosing a backend}\label{choosingbackendwxmediactrl}
 
@@ -100,13 +139,24 @@
 \begin{twocollist}\itemsep=0pt
 \twocolitem{{\bf wxMEDIABACKEND\_DIRECTSHOW}}{ 
-Use ActiveMovie/DirectShow.  Requires wxUSE\_DIRECTSHOW to be 
-enabled, requires linkage with the static library strmiids.lib,
-and is available on Windows Only.}
+Use ActiveMovie/DirectShow.  Uses the native ActiveMovie 
+(I.E. DirectShow) control. Default backend on Windows and 
+supported by nearly all Windows versions, even some 
+Windows CE versions. May display a windows media player 
+logo while inactive. }
 \twocolitem{{\bf wxMEDIABACKEND\_QUICKTIME}}{
-Use QuickTime.  Windows and Mac Only. NOTE: On Mac Systems lower than OSX 10.2 this defaults to emulating window positioning and suffers from several bugs, including not working correctly embedded in a wxNotebook. }
+Use QuickTime.  Windows and Mac Only. 
+WARNING: May not working correctly embedded in a wxNotebook. 
+On Windows requires Quicktime 7. It can also work on Windows with 
+Quicktime 6 and/or Quicktime 7 and the Quicktime 6 SDK as long 
+as qtmlClient.dll is accessable by your PATH environment variable
+(or, alternatively, in the same directory as your application).}
 \twocolitem{{\bf wxMEDIABACKEND\_MCI}}{
 Use Media Command Interface.  Windows Only. }
 \twocolitem{{\bf wxMEDIABACKEND\_GSTREAMER}}{
-Use GStreamer.  Unix Only. }
+Use GStreamer.  Unix Only. Requires GStreamer 0.8 along 
+with at the very least the xvimagesink, xoverlay, and 
+gst-play modules of gstreamer to function. You need the correct 
+modules to play the relavant files, for example the mad module 
+to play mp3s, etc.}
 \end{twocollist}
 
@@ -174,17 +224,29 @@
 
 
-\membersection{wxMediaCtrl::Length}\label{wxmediactrlgetduration}
+\membersection{wxMediaCtrl::GetBestSize}\label{wxmediactrlgetbestsize}
 
-\func{wxFileOffset}{GetDuration}{\void}
+\func{wxSize}{GetBestSize}{\void}
 
-Obtains the length - the total amount of time the movie has in milliseconds.
+Obtains the best size relative to the original/natural size of the 
+video, if there is any. See \helpref{Video size}{videosizewxmediactrl}
+for more information.
 
 
-\membersection{wxMediaCtrl::Tell}\label{wxmediactrlgetposition}
+\membersection{wxMediaCtrl::GetPlaybackRate}\label{wxmediactrlgetplaybackrate}
+
+\func{double}{GetPlaybackrate}{\void}
 
-\func{wxFileOffset}{GetPosition}{\void}
+Obtains the playback rate, or speed of the media. \tt{1.0} represents normal 
+speed, while \tt{2.0} represents twice the normal speed of the media, for 
+example. Only supported on the directshow and quicktime backends. 
+Returns 0 on failure.
 
-Obtains the current position in time within the movie in milliseconds.
 
+\membersection{wxMediaCtrl::GetVolume}\label{wxmediactrlgetvolume}
+
+\func{double}{GetVolume}{\void}
+
+Gets the volume of the media from a 0.0 to 1.0 range.
+
 
 \membersection{wxMediaCtrl::GetState}\label{wxmediactrlgetstate}
@@ -202,4 +264,11 @@
 
 
+\membersection{wxMediaCtrl::Length}\label{wxmediactrllength}
+
+\func{wxFileOffset}{Length}{\void}
+
+Obtains the length - the total amount of time the movie has in milliseconds.
+
+
 \membersection{wxMediaCtrl::Load}\label{wxmediactrlload}
 
@@ -210,9 +279,31 @@
 
 \membersection{wxMediaCtrl::Load}\label{wxmediactrlloaduri}
+
+\func{bool}{Load}{\param{const wxURI\& }{uri}}
+
+Loads the location that \tt{uri} refers to.  Note that this is very implementation-dependant, although HTTP URI/URLs are generally supported, for example. Returns false if loading fails.
+
+
+\membersection{wxMediaCtrl::Load}\label{wxmediactrlloaduriwithproxy}
+
+\func{bool}{Load}{\param{const wxURI\& }{uri}, \param{const wxURI\& }{proxy}}
 
-\func{bool}{Load}{\param{const wxURI\& }{location}}
+Loads the location that \tt{uri} refers to with the proxy \tt{proxy}. Not implemented on most backends so it should be called with caution. Returns false if loading fails.
 
-Loads the url that \tt{location} refers to.  Returns false if loading fails.  
 
+\membersection{wxMediaCtrl::LoadURI}\label{wxmediactrlloaduriliteral}
+
+\func{bool}{LoadURI}{\param{const wxURI\& }{uri}}
+
+Same as \helpref{Load}{wxmediactrlloaduri}. Kept for wxPython compatability.
+
+
+\membersection{wxMediaCtrl::LoadURIWithProxy}\label{wxmediactrlloaduriwithproxyliteral}
+
+\func{bool}{LoadURIWithProxy}{\param{const wxURI\& }{uri}, \param{const wxURI\& }{proxy}}
+
+Same as \helpref{Load}{wxmediactrlloaduriwithproxy}. Kept for wxPython compatability.
+
+
 \membersection{wxMediaCtrl::Pause}\label{wxmediactrlpause}
 
@@ -236,11 +327,12 @@
 
 
-\membersection{wxMediaCtrl::Stop}\label{wxmediactrlstop}
-
-\func{bool}{Stop}{\void}
+\membersection{wxMediaCtrl::SetPlaybackRate}\label{wxmediactrlsetplaybackrate}
 
-Stops the media.
+\func{bool}{SetPlaybackRate}{\param{double }{dRate}}
 
-See \helpref{Operation}{operationwxmediactrl} for an overview of how stopping works.
+Sets the playback rate, or speed of the media, to that referred by \tt{dRate}. 
+\tt{1.0} represents normal speed, while \tt{2.0} represents twice the normal 
+speed of the media, for example. Only supported on the directshow and 
+quicktime backends. Returns true if successful.
 
 
@@ -248,41 +340,51 @@
 
 \func{bool}{SetVolume}{\param{double }{dVolume}}
-
-Sets the volume of the media from a 0.0 to 1.0 range.
 
+Sets the volume of the media from a 0.0 to 1.0 range to that referred 
+by \tt{dVolume}.  \tt{1.0} represents full volume, while \tt{0.5} 
+represents half (50 percent) volume, for example.  Note that this may not be 
+exact due to conversion and rounding errors, although setting the volume to 
+full or none is always exact. Returns true if successful.
 
-\membersection{wxMediaCtrl::GetVolume}\label{wxmediactrlgetvolume}
-
-\func{double}{GetVolume}{\void}
 
-Gets the volume of the media from a 0.0 to 1.0 range.
+\membersection{wxMediaCtrl::ShowPlayerControls}\label{wxmediactrlshowplayercontrols}
 
+\func{bool}{ShowPlayerControls}{\param{wxMediaCtrlPlayerControls }{flags = wxMEDIACTRLPLAYERCONTROLS\_DEFAULT}}
 
-\membersection{wxMediaCtrl::GetPlaybackRate}\label{wxmediactrlgetplaybackrate}
+A special feature to wxMediaCtrl. Applications using native toolkits such as 
+QuickTime usually have a scrollbar, play button, and more provided to 
+them by the toolkit. By default wxMediaCtrl does not do this. However, on 
+the directshow and quicktime backends you can show or hide the native controls 
+provided by the underlying toolkit at will using ShowPlayerControls. Simply 
+calling the function with default parameters tells wxMediaCtrl to use the 
+default controls provided by the toolkit. The function takes a 
+\tt{wxMediaCtrlPlayerControls} enumeration as follows:
 
-\func{double}{GetPlaybackrate}{\void}
+\twocolwidtha{7cm}
+\begin{twocollist}\itemsep=0pt
+\twocolitem{{\bf wxMEDIACTRLPLAYERCONTROLS\_NONE}}{No controls. return wxMediaCtrl to it's default state.}
+\twocolitem{{\bf wxMEDIACTRLPLAYERCONTROLS\_STEP}}{Step controls like fastfoward, step one frame etc.}
+\twocolitem{{\bf wxMEDIACTRLPLAYERCONTROLS\_VOLUME}}{Volume controls like the speaker icon, volume slider, etc.}
+\twocolitem{{\bf wxMEDIACTRLPLAYERCONTROLS\_DEFAULT}}{Default controls for the toolkit. Currently a typedef for wxMEDIACTRLPLAYERCONTROLS\_STEP and wxMEDIACTRLPLAYERCONTROLS\_VOLUME.}
+\end{twocollist}
 
-Gets the playback rate of the media; for example 2.0 is double speed.
-Not implemented on MCI or GStreamer.
+For more see \helpref{Player controls}{playercontrolswxmediactrl}. Currently 
+only implemented on the QuickTime and DirectShow backends. The function 
+returns true on success.
 
 
-\membersection{wxMediaCtrl::SetPlaybackRate}\label{wxmediactrlsetplaybackrate}
+\membersection{wxMediaCtrl::Stop}\label{wxmediactrlstop}
 
-\func{bool}{SetPlaybackrate}{\param{double }{dVolume}}
+\func{bool}{Stop}{\void}
 
-Sets the rate that the media plays; for example 0.5 is half speed.
+Stops the media.
 
+See \helpref{Operation}{operationwxmediactrl} for an overview of how 
+stopping works.
 
-\membersection{wxMediaCtrl::ShowPlayerControls}\label{wxmediactrlshowplayercontrols}
 
-\func{bool}{ShowPlayerControls}{\param{wxMediaCtrlPlayerControls }{flags}}
+\membersection{wxMediaCtrl::Tell}\label{wxmediactrlgetposition}
 
-Normally, when you use wxMediaCtrl it is just a window for the video to 
-play in.  However, platforms generally have their own media player interface,
-like quicktime has a bar below the video with a slider etc..  If you want that native 
-interface instead of making your own use this function.  There are several options
-for the flags parameter, however you can look at the mediactrl header for these. 
-The two general flags are wxMEDIACTRLPLAYERCONTROLS\_NONE which turns off the 
-native interface, and wxMEDIACTRLPLAYERCONTROLS\_DEFAULT which lets wxMediaCtrl
-decide what native controls on the interface.
+\func{wxFileOffset}{Tell}{\void}
 
+Obtains the current position in time within the movie in milliseconds.

 	  	 

Index: include/wx/generic/gridctrl.h
===================================================================
--- include/wx/generic/gridctrl.h	(revision 69852)
+++ include/wx/generic/gridctrl.h	(working copy)
@@ -81,13 +81,17 @@
 class WXDLLIMPEXP_ADV wxGridCellFloatRenderer : public wxGridCellStringRenderer
 {
 public:
-    wxGridCellFloatRenderer(int width = -1, int precision = -1);
+    wxGridCellFloatRenderer(int width = -1,
+                            int precision = -1,
+                            long format = wxGCF_DEFAULT);
 
     // get/change formatting parameters
     int GetWidth() const { return m_width; }
     void SetWidth(int width) { m_width = width; m_format.clear(); }
     int GetPrecision() const { return m_precision; }
     void SetPrecision(int precision) { m_precision = precision; m_format.clear(); }
+    long GetFormat() const { return m_style; }
+    void SetFormat(long format) { m_style = format; m_format.clear(); }
 
     // draw the string right aligned with given width/precision
     virtual void Draw(wxGrid& grid,
@@ -102,7 +106,8 @@
                                wxDC& dc,
                                int row, int col);
 
-    // parameters string format is "width[,precision]"
+    // parameters string format is "width[,precision[,format]]"
+    // format should be choosen beween f|e|g|E|G
     virtual void SetParameters(const wxString& params);
 
     virtual wxGridCellRenderer *Clone() const;
@@ -115,6 +120,7 @@
     int m_width,
         m_precision;
 
+    long m_style;
     wxString m_format;
 };
 
Index: include/wx/generic/grideditors.h
===================================================================
--- include/wx/generic/grideditors.h	(revision 69852)
+++ include/wx/generic/grideditors.h	(working copy)
@@ -154,11 +154,25 @@
     wxDECLARE_NO_COPY_CLASS(wxGridCellNumberEditor);
 };
 
+enum wxGridCellFloatFormat
+{
+    wxGCF_FLOATING      = 0x0010, // Decimal floating point (%f)
+    wxGCF_EXPONENT      = 0x0020, // Scientific notation (mantise/exponent) using e character (%e)
+    wxGCF_SHORTER       = 0x0040, // Use the shorter of %e or %f (%g)
+    wxGCF_CASE_UPPER    = 0x0080, // To use in combination with wxGCF_EXPONENT (%E) or wxGCF_SHORTER (%G)
+    wxGCF_DEFAULT       = wxGCF_FLOATING,
+
+    /*  a mask to extract format from the combination of flags */
+    wxGCF_FORMAT_MASK   = (wxGCF_FLOATING | wxGCF_EXPONENT | wxGCF_SHORTER | wxGCF_CASE_UPPER)
+};
+
 // the editor for floating point numbers (double) data
 class WXDLLIMPEXP_ADV wxGridCellFloatEditor : public wxGridCellTextEditor
 {
 public:
-    wxGridCellFloatEditor(int width = -1, int precision = -1);
+    wxGridCellFloatEditor(int width = -1,
+                          int precision = -1,
+                          long format = wxGCF_DEFAULT);
 
     virtual void Create(wxWindow* parent,
                         wxWindowID id,
@@ -176,18 +190,22 @@
     virtual wxGridCellEditor *Clone() const
         { return new wxGridCellFloatEditor(m_width, m_precision); }
 
-    // parameters string format is "width,precision"
+    // parameters string format is "width[,precision[,format]]"
+    // format to choose beween f|e|g|E|G (f is used by default)
     virtual void SetParameters(const wxString& params);
 
 protected:
     // string representation of our value
-    wxString GetString() const;
+    wxString GetString();
 
 private:
     int m_width,
         m_precision;
     double m_value;
 
+    long m_style;
+    wxString m_format;
+
     wxDECLARE_NO_COPY_CLASS(wxGridCellFloatEditor);
 };
 
Index: interface/wx/grid.h
===================================================================
--- interface/wx/grid.h	(revision 69852)
+++ interface/wx/grid.h	(working copy)
@@ -179,6 +179,25 @@
 };
 
 /**
+    Specifier used to format the data to string for the numbers handled by wxGridCellFloatRenderer and wxGridCellFloatEditor.
+*/
+enum wxGridCellFloatFormat
+{
+    /// Decimal floating point (%f)
+    wxGCF_FLOATING      = 0x0010,
+    /// Scientific notation (mantise/exponent) using e character (%e)
+    wxGCF_EXPONENT      = 0x0020,
+    /// Use the shorter of %e or %f (%g)
+    wxGCF_SHORTER       = 0x0040,
+    /// To use in combination with wxGCF_EXPONENT (%E) or wxGCF_SHORTER (%G)
+    wxGCF_CASE_UPPER    = 0x0080,
+    /// Default format (wxGCF_FLOATING)
+    wxGCF_DEFAULT       = wxGCF_FLOATING,
+    /// A mask to extract the format from the combination of flags
+    wxGCF_FORMAT_MASK   = (wxGCF_FLOATING | wxGCF_EXPONENT | wxGCF_SHORTER | wxGCF_CASE_UPPER)
+};
+
+/**
     @class wxGridCellFloatRenderer
 
     This class may be used to format floating point data in a cell.
@@ -201,10 +220,17 @@
             Minimum number of characters to be shown.
         @param precision
             Number of digits after the decimal dot.
+        @param format
+            Specifier used to format the data to string (see wxGridCellFloatFormat).
     */
-    wxGridCellFloatRenderer(int width = -1, int precision = -1);
+    wxGridCellFloatRenderer(int width = -1, int precision = -1, long format = wxGCF_DEFAULT);
 
     /**
+        Returns the specifier used to format the data to string (see wxGridCellFloatFormat).
+    */
+    long GetFormat() const;
+
+    /**
         Returns the precision.
     */
     int GetPrecision() const;
@@ -215,8 +241,14 @@
     int GetWidth() const;
 
     /**
-        Parameters string format is "width[,precision]".
+        Set the specifier used to format the data to string (see wxGridCellFloatFormat).
     */
+    void SetFormat(long format);
+
+    /**
+        The parameters string format is "width[,precision[,format]]" where
+        @c format should be choosen beween f|e|g|E|G (f is used by default) 
+    */
     virtual void SetParameters(const wxString& params);
 
     /**
@@ -596,11 +628,14 @@
             Minimum number of characters to be shown.
         @param precision
             Number of digits after the decimal dot.
+        @param format
+            Specifier used to format the data to string (see wxGridCellFloatFormat).
     */
-    wxGridCellFloatEditor(int width = -1, int precision = -1);
+    wxGridCellFloatEditor(int width = -1, int precision = -1, long format = wxGCF_DEFAULT);
 
     /**
-        Parameters string format is "width,precision"
+        The parameters string format is "width[,precision[,format]]" where
+        @c format should be choosen beween f|e|g|E|G (f is used by default) 
     */
     virtual void SetParameters(const wxString& params);
 };
Index: samples/grid/griddemo.cpp
===================================================================
--- samples/grid/griddemo.cpp	(revision 69852)
+++ samples/grid/griddemo.cpp	(working copy)
@@ -449,13 +449,18 @@
     grid->SetCellValue(1, 7, wxString::Format(wxT("%g"), 1415.0));
     grid->SetCellValue(2, 7, wxString::Format(wxT("%g"), 12345.67890));
 
-    grid->SetColFormatNumber(8);
-    grid->SetCellValue(0, 8, "17");
-    grid->SetCellValue(1, 8, "0");
-    grid->SetCellValue(2, 8, "-666");
-    grid->SetCellAlignment(2, 8, wxALIGN_CENTRE, wxALIGN_TOP);
-    grid->SetCellValue(2, 9, "<- This numeric cell should be centred");
+    grid->SetColFormatCustom(8, wxString::Format(wxT("%s:%i,%i,%s"), wxGRID_VALUE_FLOAT, -1, 4, wxT("g")));
+    grid->SetCellValue(0, 8, wxT("31415e-4"));
+    grid->SetCellValue(1, 8, wxT("1415"));
+    grid->SetCellValue(2, 8, wxT("123456789e-4"));
 
+    grid->SetColFormatNumber(9);
+    grid->SetCellValue(0, 9, "17");
+    grid->SetCellValue(1, 9, "0");
+    grid->SetCellValue(2, 9, "-666");
+    grid->SetCellAlignment(2, 9, wxALIGN_CENTRE, wxALIGN_TOP);
+    grid->SetCellValue(2, 10, "<- This numeric cell should be centred");
+
     const wxString choices[] =
     {
         wxT("Please select a choice"),
Index: src/generic/gridctrl.cpp
===================================================================
--- src/generic/gridctrl.cpp	(revision 69852)
+++ src/generic/gridctrl.cpp	(working copy)
@@ -598,10 +598,13 @@
 // wxGridCellFloatRenderer
 // ----------------------------------------------------------------------------
 
-wxGridCellFloatRenderer::wxGridCellFloatRenderer(int width, int precision)
+wxGridCellFloatRenderer::wxGridCellFloatRenderer(int width,
+                                                 int precision,
+                                                 long format)
 {
     SetWidth(width);
     SetPrecision(precision);
+    SetFormat(format);
 }
 
 wxGridCellRenderer *wxGridCellFloatRenderer::Clone() const
@@ -609,6 +612,7 @@
     wxGridCellFloatRenderer *renderer = new wxGridCellFloatRenderer;
     renderer->m_width = m_width;
     renderer->m_precision = m_precision;
+    renderer->m_style = m_style;
     renderer->m_format = m_format;
 
     return renderer;
@@ -641,22 +645,30 @@
                 if ( m_precision == -1 )
                 {
                     // default width/precision
-                    m_format = wxT("%f");
+                    m_format = wxT("%");
                 }
                 else
                 {
-                    m_format.Printf(wxT("%%.%df"), m_precision);
+                    m_format.Printf(wxT("%%.%d"), m_precision);
                 }
             }
             else if ( m_precision == -1 )
             {
                 // default precision
-                m_format.Printf(wxT("%%%d.f"), m_width);
+                m_format.Printf(wxT("%%%d."), m_width);
             }
             else
             {
-                m_format.Printf(wxT("%%%d.%df"), m_width, m_precision);
+                m_format.Printf(wxT("%%%d.%d"), m_width, m_precision);
             }
+
+            bool isUpper = ( ( m_style & wxGCF_CASE_UPPER ) == wxGCF_CASE_UPPER);
+            if ( ( m_style & wxGCF_EXPONENT ) == wxGCF_EXPONENT)
+                m_format += isUpper ? wxT('E') : wxT('e');
+            else if ( ( m_style & wxGCF_SHORTER ) == wxGCF_SHORTER)
+                m_format += isUpper ? wxT('G') : wxT('g');
+            else 
+                m_format += wxT('f');
         }
 
         text.Printf(m_format, val);
@@ -704,10 +716,12 @@
         // reset to defaults
         SetWidth(-1);
         SetPrecision(-1);
+        SetFormat(wxGCF_DEFAULT);
     }
     else
     {
-        wxString tmp = params.BeforeFirst(wxT(','));
+        wxString rest;
+        wxString tmp = params.BeforeFirst(wxT(','), &rest);
         if ( !tmp.empty() )
         {
             long width;
@@ -721,7 +735,7 @@
             }
         }
 
-        tmp = params.AfterFirst(wxT(','));
+        tmp = rest.BeforeFirst(wxT(','));
         if ( !tmp.empty() )
         {
             long precision;
@@ -734,6 +748,35 @@
                 wxLogDebug(wxT("Invalid wxGridCellFloatRenderer precision parameter string '%s ignored"), params.c_str());
             }
         }
+
+        tmp = rest.AfterFirst(wxT(','));
+        if ( !tmp.empty() )
+        {
+            if ( tmp[0] == wxT('f') )
+            {
+                SetFormat(wxGCF_FLOATING);
+            }
+            else if ( tmp[0] == wxT('e') )
+            {
+                SetFormat(wxGCF_EXPONENT);
+            }
+            else if ( tmp[0] == wxT('g') )
+            {
+                SetFormat(wxGCF_SHORTER);
+            }
+            else if ( tmp[0] == wxT('E') )
+            {
+                SetFormat(wxGCF_EXPONENT|wxGCF_CASE_UPPER);
+            }
+            else if ( tmp[0] == wxT('G') )
+            {
+                SetFormat(wxGCF_SHORTER|wxGCF_CASE_UPPER);
+            }
+            else
+            {
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer format parameter string '%s ignored"), params.c_str());
+            }
+        }
     }
 }
 
Index: src/generic/grideditors.cpp
===================================================================
--- src/generic/grideditors.cpp	(revision 69852)
+++ src/generic/grideditors.cpp	(working copy)
@@ -862,10 +862,13 @@
 // wxGridCellFloatEditor
 // ----------------------------------------------------------------------------
 
-wxGridCellFloatEditor::wxGridCellFloatEditor(int width, int precision)
+wxGridCellFloatEditor::wxGridCellFloatEditor(int width,
+                                             int precision,
+                                             long format)
 {
     m_width = width;
     m_precision = precision;
+    m_style = format;
 }
 
 void wxGridCellFloatEditor::Create(wxWindow* parent,
@@ -988,51 +991,105 @@
         // reset to default
         m_width =
         m_precision = -1;
+        m_style = wxGCF_DEFAULT;
+        m_format.clear();
     }
     else
     {
-        long tmp;
-        if ( params.BeforeFirst(wxT(',')).ToLong(&tmp) )
+        wxString rest;
+        wxString tmp = params.BeforeFirst(wxT(','), &rest);
+        if ( !tmp.empty() )
         {
-            m_width = (int)tmp;
+            long width;
+            if ( tmp.ToLong(&width) )
+            {
+                m_width = (int)width;
+            }
+            else
+            {
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer width parameter string '%s ignored"), params.c_str());
+            }
+        }
 
-            if ( params.AfterFirst(wxT(',')).ToLong(&tmp) )
+        tmp = rest.BeforeFirst(wxT(','));
+        if ( !tmp.empty() )
+        {
+            long precision;
+            if ( tmp.ToLong(&precision) )
             {
-                m_precision = (int)tmp;
+                m_precision = (int)precision;
+            }
+            else
+            {
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer precision parameter string '%s ignored"), params.c_str());
+            }
+        }
 
-                // skip the error message below
-                return;
+        tmp = rest.AfterFirst(wxT(','));
+        if ( !tmp.empty() )
+        {
+            if ( tmp[0] == wxT('f') )
+            {
+                m_style = wxGCF_FLOATING;
             }
+            else if ( tmp[0] == wxT('e') )
+            {
+                m_style = wxGCF_EXPONENT;
+            }
+            else if ( tmp[0] == wxT('g') )
+            {
+                m_style = wxGCF_SHORTER;
+            }
+            else if ( tmp[0] == wxT('E') )
+            {
+                m_style = wxGCF_EXPONENT|wxGCF_CASE_UPPER;
+            }
+            else if ( tmp[0] == wxT('G') )
+            {
+                m_style = wxGCF_SHORTER|wxGCF_CASE_UPPER;
+            }
+            else
+            {
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer format parameter string '%s ignored"), params.c_str());
+            }
         }
-
-        wxLogDebug(wxT("Invalid wxGridCellFloatEditor parameter string '%s' ignored"), params.c_str());
     }
 }
 
-wxString wxGridCellFloatEditor::GetString() const
+wxString wxGridCellFloatEditor::GetString()
 {
-    wxString fmt;
-    if ( m_precision == -1 && m_width != -1)
+    if ( !m_format )
     {
-        // default precision
-        fmt.Printf(wxT("%%%d.f"), m_width);
+        if ( m_precision == -1 && m_width != -1)
+        {
+            // default precision
+            m_format.Printf(wxT("%%%d."), m_width);
+        }
+        else if ( m_precision != -1 && m_width == -1)
+        {
+            // default width
+            m_format.Printf(wxT("%%.%d"), m_precision);
+        }
+        else if ( m_precision != -1 && m_width != -1 )
+        {
+            m_format.Printf(wxT("%%%d.%d"), m_width, m_precision);
+        }
+        else
+        {
+            // default width/precision
+            m_format = wxT("%");
+        }
+
+        bool isUpper = ( ( m_style & wxGCF_CASE_UPPER ) == wxGCF_CASE_UPPER);
+        if ( ( m_style & wxGCF_EXPONENT ) == wxGCF_EXPONENT)
+            m_format += isUpper ? wxT('E') : wxT('e');
+        else if ( ( m_style & wxGCF_SHORTER ) == wxGCF_SHORTER)
+            m_format += isUpper ? wxT('G') : wxT('g');
+        else 
+            m_format += wxT('f');
     }
-    else if ( m_precision != -1 && m_width == -1)
-    {
-        // default width
-        fmt.Printf(wxT("%%.%df"), m_precision);
-    }
-    else if ( m_precision != -1 && m_width != -1 )
-    {
-        fmt.Printf(wxT("%%%d.%df"), m_width, m_precision);
-    }
-    else
-    {
-        // default width/precision
-        fmt = wxT("%f");
-    }
 
-    return wxString::Format(fmt, m_value);
+    return wxString::Format(m_format, m_value);
 }
 
 bool wxGridCellFloatEditor::IsAcceptedKey(wxKeyEvent& event)

Index: src/common/filename.cpp
===================================================================
--- src/common/filename.cpp	(revision 76616)
+++ src/common/filename.cpp	(working copy)
@@ -1748,8 +1748,8 @@
 
     // get cwd only once - small time saving
     wxString cwd = wxGetCwd();
-    Normalize(wxPATH_NORM_ALL & ~wxPATH_NORM_CASE, cwd, format);
-    fnBase.Normalize(wxPATH_NORM_ALL & ~wxPATH_NORM_CASE, cwd, format);
+    Normalize(wxPATH_NORM_ALL & ~wxPATH_NORM_CASE & ~wxPATH_NORM_SHORTCUT, cwd, format);
+    fnBase.Normalize(wxPATH_NORM_ALL & ~wxPATH_NORM_CASE & ~wxPATH_NORM_SHORTCUT, cwd, format);
 
     bool withCase = IsCaseSensitive(format);
 
Index: tests/filename/filenametest.cpp
===================================================================
--- tests/filename/filenametest.cpp	(revision 76616)
+++ tests/filename/filenametest.cpp	(working copy)
@@ -27,6 +27,8 @@
 
 #ifdef __WINDOWS__
     #include "wx/msw/registry.h"
+    #include <shlobj.h>
+    #include "wx/msw/ole/oleutils.h"
 #endif // __WINDOWS__
 
 #ifdef __UNIX__
@@ -145,6 +147,9 @@
 #if defined(__UNIX__)
         CPPUNIT_TEST( TestSymlinks );
 #endif // __UNIX__
+#ifdef __WINDOWS__
+        CPPUNIT_TEST( TestShortcuts );
+#endif // __WINDOWS__
     CPPUNIT_TEST_SUITE_END();
 
     void TestConstruction();
@@ -168,6 +173,9 @@
 #if defined(__UNIX__)
     void TestSymlinks();
 #endif // __UNIX__
+#ifdef __WINDOWS__
+    void TestShortcuts();
+#endif // __WINDOWS__
 
     DECLARE_NO_COPY_CLASS(FileNameTestCase)
 };
@@ -985,3 +993,62 @@
 }
 
 #endif // __UNIX__
+
+#ifdef __WINDOWS__
+
+bool fntest_CreateShortcut( const wxString &s_target_path,
+                            const wxString &s_shortcut_path
+                          )
+{
+   /*----------------------------------------------------------------------*/
+   IShellLink   *p_sl = NULL ;
+   IPersistFile *p_pf = NULL ;
+   HRESULT      hres         ;
+   int          i_ret = 0    ;
+   /*----------------------------------------------------------------------*/
+   hres = CoCreateInstance( CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER,
+                            IID_IShellLink, (void **)&p_sl
+                          ) ;
+   if( FAILED( hres ) ) { i_ret = -1 ; goto func_end ; }
+   /*----------------------------------------------------------------------*/
+   hres = p_sl->QueryInterface( IID_IPersistFile, ( void ** )&p_pf ) ;
+   if( FAILED( hres ) ) { i_ret = -2 ; goto func_end ; }
+   /*----------------------------------------------------------------------*/
+   hres = p_sl->SetPath( s_target_path.wx_str() ) ;
+   if( FAILED( hres ) ) { i_ret = -3 ; goto func_end ; }
+   /*----------------------------------------------------------------------*/
+   hres = p_pf->Save( s_shortcut_path.wx_str(), TRUE ) ;
+   if( FAILED( hres ) ) { i_ret = -4 ; goto func_end ; }
+   /*----------------------------------------------------------------------*/
+func_end :
+   /*----------------------------------------------------------------------*/
+   if( p_pf != NULL ) { p_pf->Release() ; }
+   if( p_sl != NULL ) { p_sl->Release() ; }
+   /*----------------------------------------------------------------------*/
+   return( i_ret ) ;
+   /*----------------------------------------------------------------------*/
+}
+
+void FileNameTestCase::TestShortcuts()
+{
+   wxOleInitialize() ;
+
+   wxFileName fn(wxFileName::CreateTempFileName("filenametest"));
+   CPPUNIT_ASSERT( fn.IsOk() );
+   wxON_BLOCK_EXIT1( wxRemoveFile, fn.GetFullPath() );
+
+   wxFileName fn_shortcut( wxFileName( fn.GetPath(), "sc_" + fn.GetName() + ".lnk" ) ) ;
+   CPPUNIT_ASSERT( fn_shortcut.IsOk() );
+   wxON_BLOCK_EXIT1( wxRemoveFile, fn_shortcut.GetFullPath() );
+
+   CPPUNIT_ASSERT( fntest_CreateShortcut( fn.GetFullPath(), fn_shortcut.GetFullPath() ) == 0 ) ;
+
+   wxFileName fn_shortcut_save( fn_shortcut ) ;
+   // MakeRelativeTo is supposed to change only the path of the file, not its name   
+   fn_shortcut.MakeRelativeTo( "." ) ;
+   CPPUNIT_ASSERT_EQUAL( fn_shortcut_save.GetFullName(), fn_shortcut.GetFullName() ) ;
+
+   wxOleUninitialize() ;
+}
+
+#endif // __WINDOWS__

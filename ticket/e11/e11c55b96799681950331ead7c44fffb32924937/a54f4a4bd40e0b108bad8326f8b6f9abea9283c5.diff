Index: include/wx/generic/grid.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/generic/grid.h,v
retrieving revision 1.111.2.2
diff -u -r1.111.2.2 grid.h
--- include/wx/generic/grid.h	2002/12/16 12:34:06	1.111.2.2
+++ include/wx/generic/grid.h	2003/05/10 05:53:54
@@ -1309,6 +1309,39 @@
     void     SetColMinimalWidth( int col, int width );
     void     SetRowMinimalHeight( int row, int width );
 
+    /*  These two members can be used to query and modify the minimal
+     *  acceptable size of grid rows and columns. In the implementation of
+     *  wxGrid and related functions and classes these replace the macros
+     *  WXGRID_MIN_ROW_HEIGHT and WXGRID_MIN_COL_WIDTH. This allows users
+     *  to override these defaults to allow for grids with smaller cells.
+     *
+     *  These numbers are the lower boundaries for the arguments which are
+     *  passed to the two versions above for setting per row/column minimum
+     *  sizes. Like the members SetColMinimalWidth and SetRowMinimalWidth,
+     *  the two Set members below must be called during grid creation, because
+     *  the existing rows or columns will not be resized if necessary.
+     *
+     *  Notes:
+     *  * In order to keep backwards compatibility, these bits of state
+     *    information cannot be stored in member variables in the 2.4 series.
+     *    Hence the implementations of these functions use auxiliary static
+     *    functions which hold the numbers as static data (see grid.cpp).
+     *  * Those data are initialised to according to the values of the macros
+     *    WXGRID_MIN_ROW_HEIGHT and WXGRID_MIN_COL_WIDTH. This ensures 
+     *    complete backward compatibility. There is guaranteed to be no 
+     *    effect of this change, unless you actually call this function.
+     *  * In the 2.6 series, the behaviour of these functions will change. The
+     *    minimal acceptable height and width will be stored in member
+     *    variables, so calling these members only affects the class on which
+     *    they are called.
+     */
+    void     SetColMinimalAcceptableWidth( int width );
+    void     SetRowMinimalAcceptableHeight( int width );
+    int      GetColMinimalAcceptableWidth() const;
+    int      GetRowMinimalAcceptableHeight() const;
+
+
+
     void     SetDefaultCellBackgroundColour( const wxColour& );
     void     SetCellBackgroundColour( int row, int col, const wxColour& );
     void     SetDefaultCellTextColour( const wxColour& );
@@ -1835,6 +1868,7 @@
     DECLARE_DYNAMIC_CLASS( wxGrid )
     DECLARE_EVENT_TABLE()
 };
+
 
 // ----------------------------------------------------------------------------
 // Grid event class and event types
Index: src/generic/grid.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/generic/grid.cpp,v
retrieving revision 1.231.2.16
diff -u -r1.231.2.16 grid.cpp
--- src/generic/grid.cpp	2003/05/07 19:29:18	1.231.2.16
+++ src/generic/grid.cpp	2003/05/10 05:53:54
@@ -3694,10 +3694,10 @@
                            bool clipToMinMax);
 
 #define internalXToCol(x) CoordToRowOrCol(x, m_defaultColWidth, \
-                                          WXGRID_MIN_COL_WIDTH, \
+                                          GetColMinimalAcceptableWidth(), \
                                           m_colRights, m_numCols, TRUE)
 #define internalYToRow(y) CoordToRowOrCol(y, m_defaultRowHeight, \
-                                          WXGRID_MIN_ROW_HEIGHT, \
+                                          GetRowMinimalAcceptableHeight(), \
                                           m_rowBottoms, m_numRows, TRUE)
 /////////////////////////////////////////////////////////////////////
 
@@ -5538,7 +5538,7 @@
 
         int rowTop = GetRowTop(m_dragRowOrCol);
         SetRowSize( m_dragRowOrCol,
-                    wxMax( m_dragLastPos - rowTop, WXGRID_MIN_ROW_HEIGHT ) );
+                    wxMax( m_dragLastPos - rowTop, GetRowMinimalAcceptableHeight() ) );
 
         if ( !GetBatchCount() )
         {
@@ -7552,14 +7552,14 @@
 int wxGrid::YToRow( int y )
 {
     return CoordToRowOrCol(y, m_defaultRowHeight,
-                           WXGRID_MIN_ROW_HEIGHT, m_rowBottoms, m_numRows, FALSE);
+                           GetRowMinimalAcceptableHeight(), m_rowBottoms, m_numRows, FALSE);
 }
 
 
 int wxGrid::XToCol( int x )
 {
     return CoordToRowOrCol(x, m_defaultColWidth,
-                           WXGRID_MIN_COL_WIDTH, m_colRights, m_numCols, FALSE);
+                           GetColMinimalAcceptableWidth(), m_colRights, m_numCols, FALSE);
 }
 
 
@@ -9120,7 +9120,7 @@
 
 void wxGrid::SetDefaultRowSize( int height, bool resizeExistingRows )
 {
-    m_defaultRowHeight = wxMax( height, WXGRID_MIN_ROW_HEIGHT );
+    m_defaultRowHeight = wxMax( height, GetRowMinimalAcceptableHeight() );
 
     if ( resizeExistingRows )
     {
@@ -9160,7 +9160,7 @@
 
 void wxGrid::SetDefaultColSize( int width, bool resizeExistingCols )
 {
-    m_defaultColWidth = wxMax( width, WXGRID_MIN_COL_WIDTH );
+    m_defaultColWidth = wxMax( width, GetColMinimalAcceptableWidth() );
 
     if ( resizeExistingCols )
     {
@@ -9214,13 +9214,13 @@
 int wxGrid::GetColMinimalWidth(int col) const
 {
     long value = m_colMinWidths.Get(col);
-    return value != wxNOT_FOUND ? (int)value : WXGRID_MIN_COL_WIDTH;
+    return value != wxNOT_FOUND ? (int)value : GetColMinimalAcceptableWidth();
 }
 
 int wxGrid::GetRowMinimalHeight(int row) const
 {
     long value = m_rowMinHeights.Get(row);
-    return value != wxNOT_FOUND ? (int)value : WXGRID_MIN_ROW_HEIGHT;
+    return value != wxNOT_FOUND ? (int)value : GetRowMinimalAcceptableHeight();
 }
 
 // ----------------------------------------------------------------------------
@@ -9765,6 +9765,48 @@
     rect.SetBottom( wxMin(ch, bottom) );
 
     return rect;
+}
+
+/* We may be overly precise here, but: a static global variable is not good
+ * enough here. In theory, a wxGrid may be created from within the constructor
+ * of a global class variable. In that case there is no guarantee that global
+ * width/heght variables have been initialised already. Therefore we use this
+ * typical Singleton pattern. The static rowsize variable in the function below
+ * will be initialised when the function is first called.
+ *
+ * The same holds for the wxGridGlobalMinColWidth() function below.
+ */
+static inline int& wxGridGlobalMinRowHeight()
+{
+    static int rowsize=WXGRID_MIN_ROW_HEIGHT;
+    return rowsize;
+}
+
+void wxGrid::SetRowMinimalAcceptableHeight( int height )
+{
+    ::wxGridGlobalMinRowHeight()=height;
+}
+
+int wxGrid::GetRowMinimalAcceptableHeight() const
+{
+    return ::wxGridGlobalMinRowHeight();
+}
+
+static inline int& wxGridGlobalMinColWidth()
+{
+    static int colwidth=WXGRID_MIN_COL_WIDTH;
+    return colwidth;
+}
+
+void wxGrid::SetColMinimalAcceptableWidth( int width )
+{
+    ::wxGridGlobalMinColWidth()=width;
+}
+
+
+int wxGrid::GetColMinimalAcceptableWidth() const
+{
+    return ::wxGridGlobalMinColWidth();
 }
 
 

 	  	 

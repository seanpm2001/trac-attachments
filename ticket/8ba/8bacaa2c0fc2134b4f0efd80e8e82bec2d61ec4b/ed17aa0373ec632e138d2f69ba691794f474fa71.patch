Index: C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/window.mm
===================================================================
--- C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/window.mm	(revision 3557)
+++ C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/window.mm	(revision 3593)
@@ -883,6 +883,8 @@
 
 BOOL wxOSX_becomeFirstResponder(NSView* self, SEL _cmd)
 {
+    wxLogTrace(wxT("LowLevelFocus"), wxT("becomeFirstResponder %p (%s)"), self, class_getName([self class]));
+
     wxWidgetCocoaImpl* impl = (wxWidgetCocoaImpl* ) wxWidgetImpl::FindFromWXWidget( self );
     if (impl == NULL)
         return NO;
@@ -892,6 +894,8 @@
 
 BOOL wxOSX_resignFirstResponder(NSView* self, SEL _cmd)
 {
+    wxLogTrace(wxT("LowLevelFocus"), wxT("resignFirstResponder %p (%s)"), self, class_getName([self class]));
+
     wxWidgetCocoaImpl* impl = (wxWidgetCocoaImpl* ) wxWidgetImpl::FindFromWXWidget( self );
     if (impl == NULL)
         return NO;
@@ -1245,15 +1249,19 @@
 bool wxWidgetCocoaImpl::becomeFirstResponder(WXWidget slf, void *_cmd)
 {
     wxOSX_FocusHandlerPtr superimpl = (wxOSX_FocusHandlerPtr) [[slf superclass] instanceMethodForSelector:(SEL)_cmd];
-    // get the current focus before running becomeFirstResponder
-    NSView* otherView = FindFocus();
 
-    wxWidgetImpl* otherWindow = FindFromWXWidget(otherView);
-    wxLogTrace(wxT("Focus"), wxT("becomeFirstResponder %p:%s(%s)"), static_cast<void*>(GetWXPeer()),
+    NSWindow *containerWindow = [slf window];
+    wxNSWindow *wx_containerWindow = [containerWindow isKindOfClass:[wxNSWindow class]] ? (wxNSWindow *)containerWindow : nil;
+
+    wxWidgetImpl* otherWindow = NULL;
+    if (wx_containerWindow)
+        otherWindow = FindFromWXWidget ([wx_containerWindow WX_aboutToResignFirstResponderView]);
+
+    wxLogTrace(wxT("Focus"), wxT("becomeFirstResponder %p:%s(label: %s)"), static_cast<void*>(GetWXPeer()),
         GetWXPeer()->GetClassInfo()->GetClassName(),
         GetWXPeer()->GetLabel().wx_str());
     if (otherWindow)
-        wxLogTrace(wxT("Focus"), wxT("previous first responder was %p:%s(%s)"), static_cast<void*>(otherWindow->GetWXPeer()),
+        wxLogTrace(wxT("Focus"), wxT("previous first responder was %p:%s(label: %s)"), static_cast<void*>(otherWindow->GetWXPeer()),
             otherWindow->GetWXPeer()->GetClassInfo()->GetClassName(),
             otherWindow->GetWXPeer()->GetLabel().wx_str());
 
@@ -1270,16 +1278,20 @@
 {
     wxOSX_FocusHandlerPtr superimpl = (wxOSX_FocusHandlerPtr) [[slf superclass] instanceMethodForSelector:(SEL)_cmd];
     BOOL r = superimpl(slf, (SEL)_cmd);
-    // get the current focus after running resignFirstResponder
-    // note that this value isn't reliable, it might return the same view that
-    // is resigning
-    NSView* otherView = FindFocus();
-    wxWidgetImpl* otherWindow = FindFromWXWidget(otherView);
-    wxLogTrace(wxT("Focus"), wxT("resignFirstResponder(%p) %s(%s)"), static_cast<void*>(GetWXPeer()),
+
+
+    NSWindow *containerWindow = [slf window];
+    wxNSWindow *wx_containerWindow = [containerWindow isKindOfClass:[wxNSWindow class]] ? (wxNSWindow *)containerWindow : nil;
+
+    wxWidgetImpl* otherWindow = NULL;
+    if (wx_containerWindow)
+        otherWindow = FindFromWXWidget ([wx_containerWindow WX_aboutToBecomeFirstResponderView]);
+
+    wxLogTrace(wxT("Focus"), wxT("resignFirstResponder(%p) %s(label: %s)"), static_cast<void*>(GetWXPeer()),
         GetWXPeer()->GetClassInfo()->GetClassName(),
         GetWXPeer()->GetLabel().wx_str());
     if (otherWindow)
-        wxLogTrace(wxT("Focus"), wxT("about to be first responder is %p:%s(%s)"), static_cast<void*>(otherWindow->GetWXPeer()),
+        wxLogTrace(wxT("Focus"), wxT("about to be first responder is %p:%s(label: %s)"), static_cast<void*>(otherWindow->GetWXPeer()),
             otherWindow->GetWXPeer()->GetClassInfo()->GetClassName(),
             otherWindow->GetWXPeer()->GetLabel().wx_str());
 
Index: C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/textctrl.mm
===================================================================
--- C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/textctrl.mm	(revision 3557)
+++ C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/textctrl.mm	(revision 3593)
@@ -513,6 +513,8 @@
     wxNSTextScrollView* sv = (wxNSTextScrollView*) w;
     m_scrollView = sv;
 
+    m_hasEditor = true;
+
     [m_scrollView setHasVerticalScroller:YES];
     [m_scrollView setHasHorizontalScroller:NO];
     [m_scrollView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
Index: C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/nonownedwnd.mm
===================================================================
--- C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/nonownedwnd.mm	(revision 3557)
+++ C:/temp/dev-fix-restore-test/2.5.x/dev/sdk/wxWidgets-ec/src/osx/cocoa/nonownedwnd.mm	(revision 3593)
@@ -21,6 +21,8 @@
 
 #include "wx/osx/private.h"
 
+#include <objc/objc-runtime.h>
+
 NSScreen* wxOSXGetMenuScreen()
 {
     if ( [NSScreen screens] == nil )
@@ -101,7 +103,6 @@
 - (wxNonOwnedWindowCocoaImpl*) WX_implementation;
 
 - (bool) WX_filterSendEvent:(NSEvent *) event;
-
 @end
 
 @implementation NSWindow (wxNSWindowSupport)
@@ -145,15 +146,6 @@
 // wx native implementation 
 //
 
-@interface wxNSWindow : NSWindow
-{
-}
-
-- (void) sendEvent:(NSEvent *)event;
-- (NSRect)constrainFrameRect:(NSRect)frameRect toScreen:(NSScreen *)screen;
-- (void)noResponderFor: (SEL) selector;
-@end
-
 @implementation wxNSWindow
 
 - (void)sendEvent:(NSEvent *) event
@@ -206,6 +198,46 @@
     return YES;
 }
 
+- (BOOL)makeFirstResponder: (NSResponder*) responder
+{
+    wxLogTrace(wxT("LowLevelFocus"), wxT("makeFirstResponder %p (%s)"), responder, responder ? class_getName([responder class]) : "nil");
+
+    aboutToBecomeFirstResponder = responder;
+
+    NSWindow *keyWindow = [[NSApplication sharedApplication] keyWindow];
+    if ( keyWindow )
+        aboutToResignFirstResponder = [keyWindow firstResponder];
+    else
+        aboutToResignFirstResponder = nil;
+
+    [super makeFirstResponder:responder];
+
+    aboutToBecomeFirstResponder = aboutToResignFirstResponder = nil;
+}
+
+- (NSResponder *) WX_aboutToBecomeFirstResponder
+{
+    return aboutToBecomeFirstResponder;
+}
+
+- (NSResponder *) WX_aboutToResignFirstResponder
+{
+    return aboutToResignFirstResponder;
+}
+
+- (NSView *) WX_aboutToBecomeFirstResponderView
+{
+    return aboutToBecomeFirstResponder && 
+           [aboutToBecomeFirstResponder isKindOfClass: [NSView class]] ? (NSView*)aboutToBecomeFirstResponder : nil;
+}
+
+- (NSView *) WX_aboutToResignFirstResponderView
+{
+    return aboutToResignFirstResponder && 
+           [aboutToResignFirstResponder isKindOfClass: [NSView class]] ? (NSView*)aboutToResignFirstResponder : nil;
+}
+
+
 @end
 
 @interface wxNSPanel : NSPanel

? cocoa_patch
Index: NSButton.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSButton.mm,v
retrieving revision 1.4
diff -u -d -b -w -b -u -2 -r1.4 NSButton.mm
--- NSButton.mm	2003/09/02 19:15:44	1.4
+++ NSButton.mm	2004/01/21 08:28:16
@@ -48,7 +48,7 @@
 - (void)wxNSButtonAction: (id)sender
 {
-    wxASSERT_MSG((id)self==sender,"Received wxNSButtonAction from another object");
+    wxASSERT_MSG((id)self==sender,wxT("Received wxNSButtonAction from another object"));
     wxCocoaNSButton *button = wxCocoaNSButton::GetFromCocoa(self);
-    wxCHECK_RET(button,"wxNSButtonAction received without associated wx object");
+    wxCHECK_RET(button,wxT("wxNSButtonAction received without associated wx object"));
     button->Cocoa_wxNSButtonAction();
 }
Index: NSControl.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSControl.mm,v
retrieving revision 1.2
diff -u -d -b -w -b -u -2 -r1.2 NSControl.mm
--- NSControl.mm	2003/09/08 19:00:45	1.2
+++ NSControl.mm	2004/01/21 08:28:16
@@ -41,7 +41,7 @@
 - (void)wxNSControlAction: (id)sender
 {
-    wxLogDebug("wxNSControlAction");
+    wxLogDebug(wxT("wxNSControlAction"));
     wxCocoaNSControl *wxcontrol = wxCocoaNSControl::GetFromCocoa(sender);
-    wxCHECK_RET(wxcontrol,"wxNSControlAction received but no wxCocoaNSControl exists!");
+    wxCHECK_RET(wxcontrol,wxT("wxNSControlAction received but no wxCocoaNSControl exists!"));
     wxcontrol->CocoaTarget_action();
 }
Index: NSMenu.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSMenu.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 NSMenu.mm
--- NSMenu.mm	2003/09/05 15:09:02	1.5
+++ NSMenu.mm	2004/01/21 08:28:16
@@ -59,5 +59,5 @@
 {
     wxCocoaNSMenu *menu = wxCocoaNSMenu::GetFromCocoa([notification object]);
-    wxCHECK_RET(menu,"menuDidAddItem received but no wxMenu exists");
+    wxCHECK_RET(menu,wxT("menuDidAddItem received but no wxMenu exists"));
     menu->CocoaNotification_menuDidAddItem(notification);
 }
@@ -66,5 +66,5 @@
 {
     wxCocoaNSMenu *menu = wxCocoaNSMenu::GetFromCocoa([notification object]);
-    wxCHECK_RET(menu,"menuDidChangeItem received but no wxMenu exists");
+    wxCHECK_RET(menu,wxT("menuDidChangeItem received but no wxMenu exists"));
     menu->CocoaNotification_menuDidChangeItem(notification);
 }
@@ -73,5 +73,5 @@
 {
     wxCocoaNSMenu *menu = wxCocoaNSMenu::GetFromCocoa([notification object]);
-    wxCHECK_RET(menu,"menuDidRemoveItem received but no wxMenu exists");
+    wxCHECK_RET(menu,wxT("menuDidRemoveItem received but no wxMenu exists"));
     menu->CocoaNotification_menuDidRemoveItem(notification);
 }
@@ -80,5 +80,5 @@
 {
     wxCocoaNSMenu *menu = wxCocoaNSMenu::GetFromCocoa([notification object]);
-    wxCHECK_RET(menu,"menuDidSendAction received but no wxMenu exists");
+    wxCHECK_RET(menu,wxT("menuDidSendAction received but no wxMenu exists"));
     menu->CocoaNotification_menuDidSendAction(notification);
 }
@@ -87,5 +87,5 @@
 {
     wxCocoaNSMenu *menu = wxCocoaNSMenu::GetFromCocoa([notification object]);
-    wxCHECK_RET(menu,"menuWillSendAction received but no wxMenu exists");
+    wxCHECK_RET(menu,wxT("menuWillSendAction received but no wxMenu exists"));
     menu->CocoaNotification_menuWillSendAction(notification);
 }
Index: NSPanel.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSPanel.mm,v
retrieving revision 1.1
diff -u -d -b -w -b -u -2 -r1.1 NSPanel.mm
--- NSPanel.mm	2003/03/21 20:25:09	1.1
+++ NSPanel.mm	2004/01/21 08:28:16
@@ -25,5 +25,5 @@
 #include "wx/cocoa/NSPanel.h"
 
-#import <Appkit/NSPanel.h>
+#import <AppKit/NSPanel.h>
 
 // ----------------------------------------------------------------------------
Index: NSTableView.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSTableView.mm,v
retrieving revision 1.1
diff -u -d -b -w -b -u -2 -r1.1 NSTableView.mm
--- NSTableView.mm	2003/08/18 02:12:42	1.1
+++ NSTableView.mm	2004/01/21 08:28:16
@@ -42,5 +42,5 @@
 {
     wxCocoaNSTableView *wxView = wxCocoaNSTableView::GetFromCocoa(tableView);
-    wxCHECK_MSG(wxView, 0, "No associated wx object");
+    wxCHECK_MSG(wxView, 0, wxT("No associated wx object"));
     return wxView->CocoaDataSource_numberOfRows();
 }
@@ -51,5 +51,5 @@
 {
     wxCocoaNSTableView *wxView = wxCocoaNSTableView::GetFromCocoa(tableView);
-    wxCHECK_MSG(wxView, nil, "No associated wx object");
+    wxCHECK_MSG(wxView, nil, wxT("No associated wx object"));
     return wxView->CocoaDataSource_objectForTableColumn(tableColumn,rowIndex);
 }
Index: NSView.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSView.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 NSView.mm
--- NSView.mm	2003/07/11 17:47:57	1.5
+++ NSView.mm	2004/01/21 08:28:16
@@ -26,5 +26,5 @@
 #include "wx/cocoa/NSView.h"
 
-#import <Appkit/NSView.h>
+#import <AppKit/NSView.h>
 #import <Foundation/NSNotification.h>
 #import <Foundation/NSString.h>
@@ -190,5 +190,5 @@
 {
     wxCocoaNSView *win = wxCocoaNSView::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"notificationFrameChanged received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("notificationFrameChanged received but no wxWindow exists"));
     win->Cocoa_FrameChanged();
 }
Index: NSWindow.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/NSWindow.mm,v
retrieving revision 1.12
diff -u -d -b -w -b -u -2 -r1.12 NSWindow.mm
--- NSWindow.mm	2003/11/06 20:37:16	1.12
+++ NSWindow.mm	2004/01/21 08:28:16
@@ -27,5 +27,5 @@
 #include "wx/cocoa/NSWindow.h"
 
-#import <Appkit/NSWindow.h>
+#import <AppKit/NSWindow.h>
 #import <Foundation/NSNotification.h>
 #import <Foundation/NSString.h>
@@ -51,5 +51,5 @@
 {
     wxCocoaNSWindow *win = wxCocoaNSWindow::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"notificationDidBecomeKey received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("notificationDidBecomeKey received but no wxWindow exists"));
     win->CocoaDelegate_windowDidBecomeKey();
 }
@@ -58,5 +58,5 @@
 {
     wxCocoaNSWindow *win = wxCocoaNSWindow::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"notificationDidResignKey received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("notificationDidResignKey received but no wxWindow exists"));
     win->CocoaDelegate_windowDidResignKey();
 }
@@ -65,5 +65,5 @@
 {
     wxCocoaNSWindow *win = wxCocoaNSWindow::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"notificationDidBecomeMain received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("notificationDidBecomeMain received but no wxWindow exists"));
     win->CocoaDelegate_windowDidBecomeMain();
 }
@@ -72,5 +72,5 @@
 {
     wxCocoaNSWindow *win = wxCocoaNSWindow::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"notificationDidResignMain received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("notificationDidResignMain received but no wxWindow exists"));
     win->CocoaDelegate_windowDidResignMain();
 }
@@ -78,12 +78,12 @@
 - (BOOL)windowShouldClose: (id)sender
 {
-    wxLogDebug("windowShouldClose");
+    wxLogDebug(wxT("windowShouldClose"));
     wxCocoaNSWindow *tlw = wxCocoaNSWindow::GetFromCocoa(sender);
     if(tlw && !tlw->CocoaDelegate_windowShouldClose())
     {
-        wxLogDebug("Window will not be closed");
+        wxLogDebug(wxT("Window will not be closed"));
         return NO;
     }
-    wxLogDebug("Window will be closed");
+    wxLogDebug(wxT("Window will be closed"));
     return YES;
 }
@@ -92,5 +92,5 @@
 {
     wxCocoaNSWindow *win = wxCocoaNSWindow::GetFromCocoa([notification object]);
-    wxCHECK_RET(win,"windowWillClose received but no wxWindow exists");
+    wxCHECK_RET(win,wxT("windowWillClose received but no wxWindow exists"));
     win->CocoaDelegate_windowWillClose();
 }
Index: app.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/app.mm,v
retrieving revision 1.38
diff -u -d -b -w -b -u -2 -r1.38 app.mm
--- app.mm	2004/01/14 04:44:37	1.38
+++ app.mm	2004/01/21 08:28:16
@@ -89,5 +89,5 @@
     {
         sg_needIdle = false;
-        wxLogDebug("Processing idle events");
+        wxLogDebug(wxT("Processing idle events"));
         while(wxTheApp->ProcessIdle())
         {
@@ -98,11 +98,11 @@
                 return event;
             // we didn't get one, do some idle work
-            wxLogDebug("Looping idle events");
+            wxLogDebug(wxT("Looping idle events"));
         }
         // No more idle work requested, block
-        wxLogDebug("Finished idle processing");
+        wxLogDebug(wxT("Finished idle processing"));
     }
     else
-        wxLogDebug("Avoiding idle processing sg_needIdle=%d",sg_needIdle);
+        wxLogDebug(wxT("Avoiding idle processing sg_needIdle=%d"),sg_needIdle);
     return [super nextEventMatchingMask:mask untilDate:expiration inMode:mode dequeue:flag];
 }
@@ -110,5 +110,5 @@
 - (void)sendEvent: (NSEvent*)anEvent
 {
-    wxLogDebug("SendEvent");
+    wxLogDebug(wxT("SendEvent"));
     sg_needIdle = true;
     [super sendEvent: anEvent];
Index: bitmap.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/bitmap.mm,v
retrieving revision 1.10
diff -u -d -b -w -b -u -2 -r1.10 bitmap.mm
--- bitmap.mm	2003/12/15 19:30:54	1.10
+++ bitmap.mm	2004/01/21 08:28:16
@@ -297,5 +297,5 @@
             bitsPerPixel: 0];
 
-    wxLogDebug("M_BITMAPDATA=%p NSBitmapImageRep bitmapData=%p", M_BITMAPDATA, [M_BITMAPDATA->m_cocoaNSBitmapImageRep bitmapData]);
+    wxLogDebug(wxT("M_BITMAPDATA=%p NSBitmapImageRep bitmapData=%p"), M_BITMAPDATA, [M_BITMAPDATA->m_cocoaNSBitmapImageRep bitmapData]);
     M_BITMAPDATA->m_ok = true;
     M_BITMAPDATA->m_numColors = 0;
@@ -511,5 +511,5 @@
 static bool wxMask_CreateFromBitmapData(PixelData srcData, const wxColour& colour, unsigned char *dstData)
 {
-    wxCHECK_MSG(dstData,false,"Couldn't access mask data");
+    wxCHECK_MSG(dstData,false,wxT("Couldn't access mask data"));
     class PixelData::Iterator p(srcData);
     const int nRows = srcData.GetHeight();
@@ -582,5 +582,5 @@
     // We need the source NSBitmapImageRep to detemine its pixel format
     NSBitmapImageRep *srcBitmapRep = const_cast<wxBitmap&>(bitmap).GetNSBitmapImageRep();
-    wxCHECK_MSG(srcBitmapRep,false,"Can't create mask for an uninitialized bitmap");
+    wxCHECK_MSG(srcBitmapRep,false,wxT("Can't create mask for an uninitialized bitmap"));
 
     // Get a pointer to the destination data
@@ -593,5 +593,5 @@
         wxPixelData<wxBitmap,wxNativePixelFormat> pixelData(const_cast<wxBitmap&>(bitmap));
         wxCHECK_MSG(wxMask_CreateFromBitmapData(pixelData, colour, dstData),
-            false, "Unable to access raw data");
+            false, wxT("Unable to access raw data"));
     }
     // 32-bpp RGBx (x=throw away, no alpha)
@@ -601,5 +601,5 @@
         wxPixelData<wxBitmap,PixelFormat> pixelData(const_cast<wxBitmap&>(bitmap));
         wxCHECK_MSG(wxMask_CreateFromBitmapData(pixelData, colour, dstData),
-            false, "Unable to access raw data");
+            false, wxT("Unable to access raw data"));
     }
     // 32-bpp RGBA
@@ -608,8 +608,8 @@
         wxPixelData<wxBitmap,wxAlphaPixelFormat> pixelData(const_cast<wxBitmap&>(bitmap));
         wxCHECK_MSG(wxMask_CreateFromBitmapData(pixelData, colour, dstData),
-            false, "Unable to access raw data");
+            false, wxT("Unable to access raw data"));
     }
     else
-    {   wxCHECK_MSG(false,false,"Unimplemented pixel format"); }
+    {   wxCHECK_MSG(false,false,wxT("Unimplemented pixel format")); }
 
     // maskRep was autoreleased in case we had to exit quickly
Index: bmpbuttn.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/bmpbuttn.mm,v
retrieving revision 1.7
diff -u -d -b -w -b -u -2 -r1.7 bmpbuttn.mm
--- bmpbuttn.mm	2004/01/15 13:48:38	1.7
+++ bmpbuttn.mm	2004/01/21 08:28:16
@@ -33,8 +33,8 @@
 {
     wxAutoNSAutoreleasePool pool;
-    wxLogDebug("Creating control with id=%d",winid);
+    wxLogDebug(wxT("Creating control with id=%d"),winid);
     if(!CreateControl(parent,winid,pos,size,style,validator,name))
         return false;
-    wxLogDebug("Created control with id=%d",GetId());
+    wxLogDebug(wxT("Created control with id=%d"),GetId());
     m_cocoaNSView = NULL;
     SetNSButton([[NSButton alloc] initWithFrame: MakeDefaultNSRect(size)]);
@@ -61,5 +61,5 @@
 void wxBitmapButton::Cocoa_wxNSButtonAction(void)
 {
-    wxLogDebug("YAY!");
+    wxLogDebug(wxT("YAY!"));
     wxCommandEvent event(wxEVT_COMMAND_BUTTON_CLICKED, GetId());
     InitCommandEvent(event); //    event.SetEventObject(this);
Index: button.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/button.mm,v
retrieving revision 1.11
diff -u -d -b -w -b -u -2 -r1.11 button.mm
--- button.mm	2004/01/15 13:48:38	1.11
+++ button.mm	2004/01/21 08:28:16
@@ -33,8 +33,8 @@
 {
     wxAutoNSAutoreleasePool pool;
-    wxLogDebug("Creating control with id=%d",winid);
+    wxLogDebug(wxT("Creating control with id=%d"),winid);
     if(!CreateControl(parent,winid,pos,size,style,validator,name))
         return false;
-    wxLogDebug("Created control with id=%d",GetId());
+    wxLogDebug(wxT("Created control with id=%d"),GetId());
     m_cocoaNSView = NULL;
     SetNSButton([[NSButton alloc] initWithFrame: MakeDefaultNSRect(size)]);
@@ -61,5 +61,5 @@
 void wxButton::Cocoa_wxNSButtonAction(void)
 {
-    wxLogDebug("YAY!");
+    wxLogDebug(wxT("YAY!"));
     wxCommandEvent event(wxEVT_COMMAND_BUTTON_CLICKED, GetId());
     InitCommandEvent(event); //    event.SetEventObject(this);
Index: checkbox.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/checkbox.mm,v
retrieving revision 1.9
diff -u -d -b -w -b -u -2 -r1.9 checkbox.mm
--- checkbox.mm	2004/01/14 03:52:50	1.9
+++ checkbox.mm	2004/01/21 08:28:16
@@ -79,5 +79,5 @@
 void wxCheckBox::Cocoa_wxNSButtonAction(void)
 {
-    wxLogDebug("Checkbox");
+    wxLogDebug(wxT("Checkbox"));
     wxCommandEvent event(wxEVT_COMMAND_CHECKBOX_CLICKED, GetId());
     InitCommandEvent(event); //    event.SetEventObject(this);
Index: choice.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/choice.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 choice.mm
--- choice.mm	2003/09/06 00:33:02	1.5
+++ choice.mm	2004/01/21 08:28:16
@@ -108,5 +108,5 @@
     int index = [[(NSPopUpButton*)m_cocoaNSView menu] indexOfItem: menuitem];
     int selectedItem = [(NSPopUpButton*)m_cocoaNSView indexOfSelectedItem];
-    wxLogDebug("menuDidSendAction, index=%d, selectedItem=%d", index, selectedItem);
+    wxLogDebug(wxT("menuDidSendAction, index=%d, selectedItem=%d"), index, selectedItem);
     wxCommandEvent event(wxEVT_COMMAND_CHOICE_SELECTED, m_windowId);
     event.SetInt(index);
Index: control.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/control.mm,v
retrieving revision 1.8
diff -u -d -b -w -b -u -2 -r1.8 control.mm
--- control.mm	2003/09/08 18:14:57	1.8
+++ control.mm	2004/01/21 08:28:16
@@ -46,8 +46,8 @@
             const wxValidator& validator, const wxString& name)
 {
-    wxLogDebug("Creating control with id=%d",winid);
+    wxLogDebug(wxT("Creating control with id=%d"),winid);
     if(!CreateControl(parent,winid,pos,size,style,validator,name))
         return false;
-    wxLogDebug("Created control with id=%d",GetId());
+    wxLogDebug(wxT("Created control with id=%d"),GetId());
     m_cocoaNSView = NULL;
     SetNSControl([[wxNonControlNSControl alloc] initWithFrame: MakeDefaultNSRect(size)]);
@@ -79,5 +79,5 @@
     wxSize size((int)cocoaRect.size.width+10,(int)cocoaRect.size.height);
     [m_cocoaNSView setFrame: storedRect];
-    wxLogDebug("wxControl=%p::DoGetBestSize()==(%d,%d)",this,size.x,size.y);
+    wxLogDebug(wxT("wxControl=%p::DoGetBestSize()==(%d,%d)"),this,size.x,size.y);
     return size;
 }
Index: dc.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/dc.mm,v
retrieving revision 1.16
diff -u -d -b -w -b -u -2 -r1.16 dc.mm
--- dc.mm	2003/12/15 21:07:44	1.16
+++ dc.mm	2004/01/21 08:28:16
@@ -25,5 +25,5 @@
 #import <AppKit/NSAffineTransform.h>
 #import <AppKit/NSColor.h>
-#import <AppKit/NSTypeSetter.h>
+#import <AppKit/NSTypesetter.h>
 #import <AppKit/NSImage.h>
 
@@ -71,5 +71,5 @@
 void wxDC::CocoaInitializeTextSystem()
 {
-    wxASSERT_MSG(!sm_cocoaNSTextStorage && !sm_cocoaNSLayoutManager && !sm_cocoaNSTextContainer,"Text system already initalized!  BAD PROGRAMMER!");
+    wxASSERT_MSG(!sm_cocoaNSTextStorage && !sm_cocoaNSLayoutManager && !sm_cocoaNSTextContainer,wxT("Text system already initalized!  BAD PROGRAMMER!"));
 
     sm_cocoaNSTextStorage = [[NSTextStorage alloc] init];
@@ -109,5 +109,5 @@
             if(!dc->CocoaUnlockFocus())
             {
-                wxFAIL_MSG("Unable to unlock focus on higher-level DC!");
+                wxFAIL_MSG(wxT("Unable to unlock focus on higher-level DC!"));
             }
             sm_cocoaDCStack.DeleteNode(node);
@@ -206,5 +206,5 @@
     wxAutoNSAutoreleasePool pool;
 // FIXME: Cache this so it can be used for DoDrawText
-    wxASSERT_MSG(sm_cocoaNSTextStorage && sm_cocoaNSLayoutManager && sm_cocoaNSTextContainer, "Text system has not been initialized.  BAD PROGRAMMER!");
+    wxASSERT_MSG(sm_cocoaNSTextStorage && sm_cocoaNSLayoutManager && sm_cocoaNSTextContainer, wxT("Text system has not been initialized.  BAD PROGRAMMER!"));
     NSAttributedString *attributedString = [[NSAttributedString alloc]
             initWithString:[NSString stringWithCString:text.c_str()]];
@@ -227,5 +227,5 @@
 {
     if(!CocoaTakeFocus()) return;
-    wxASSERT_MSG(sm_cocoaNSTextStorage && sm_cocoaNSLayoutManager && sm_cocoaNSTextContainer, "Text system has not been initialized.  BAD PROGRAMMER!");
+    wxASSERT_MSG(sm_cocoaNSTextStorage && sm_cocoaNSLayoutManager && sm_cocoaNSTextContainer, wxT("Text system has not been initialized.  BAD PROGRAMMER!"));
     NSAttributedString *attributedString = [[NSAttributedString alloc]
             initWithString:[NSString stringWithCString:text.c_str()]];
@@ -253,5 +253,5 @@
     if(!glyphRange.length)
         return;
-    wxASSERT_MSG(glyphRange.location==0,"glyphRange must begin at zero");
+    wxASSERT_MSG(glyphRange.location==0,wxT("glyphRange must begin at zero"));
 
     NSAffineTransform *transform = [NSAffineTransform transform];
@@ -275,5 +275,5 @@
     #if 0
     // Draw+fill a rectangle so we can see where the shit is supposed to be.
-    wxLogDebug("(%f,%f) (%fx%f)",usedRect.origin.x,usedRect.origin.y,usedRect.size.width,usedRect.size.height);
+    wxLogDebug(wxT("(%f,%f) (%fx%f)"),usedRect.origin.x,usedRect.origin.y,usedRect.size.width,usedRect.size.height);
     NSBezierPath *bezpath = [NSBezierPath bezierPathWithRect:NSMakeRect(0,0,usedRect.size.width,usedRect.size.height)];
     [[NSColor blackColor] set];
@@ -455,5 +455,5 @@
 #if 0
     // Draw a rect so we can see where it's supposed to be
-    wxLogDebug("image at (%d,%d) size %dx%d",x,y,bmp.GetWidth(),bmp.GetHeight());
+    wxLogDebug(wxT("image at (%d,%d) size %dx%d"),x,y,bmp.GetWidth(),bmp.GetHeight());
     NSBezierPath *bezpath = [NSBezierPath bezierPathWithRect:NSMakeRect(x,y,bmp.GetWidth(),bmp.GetHeight())];
     [[NSColor blackColor] set];
Index: dcclient.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/dcclient.mm,v
retrieving revision 1.8
diff -u -d -b -w -b -u -2 -r1.8 dcclient.mm
--- dcclient.mm	2003/09/08 15:42:40	1.8
+++ dcclient.mm	2004/01/21 08:28:16
@@ -39,5 +39,5 @@
 ,   m_lockedNSView(NULL)
 {
-    wxLogDebug("non-client window DC's are not supported, oh well");
+    wxLogDebug(wxT("non-client window DC's are not supported, oh well"));
 };
 
@@ -58,5 +58,5 @@
         return true;
     }
-    wxLogDebug("focus lock failed!");
+    wxLogDebug(wxT("focus lock failed!"));
     return false;
 }
@@ -72,5 +72,5 @@
 bool wxWindowDC::CocoaLockFocus()
 {
-    wxLogDebug("Locking focus on wxWindowDC=%p, NSView=%p",this, m_window->GetNonClientNSView());
+    wxLogDebug(wxT("Locking focus on wxWindowDC=%p, NSView=%p"),this, m_window->GetNonClientNSView());
     return CocoaLockFocusOnNSView(m_window->GetNonClientNSView());
 }
@@ -78,5 +78,5 @@
 bool wxWindowDC::CocoaUnlockFocus()
 {
-    wxLogDebug("Unlocking focus on wxWindowDC=%p, NSView=%p",this, m_window->GetNonClientNSView());
+    wxLogDebug(wxT("Unlocking focus on wxWindowDC=%p, NSView=%p"),this, m_window->GetNonClientNSView());
     return CocoaUnlockFocusOnNSView();
 }
@@ -116,5 +116,5 @@
 bool wxClientDC::CocoaLockFocus()
 {
-    wxLogDebug("Locking focus on wxClientDC=%p, NSView=%p",this, m_window->GetNSView());
+    wxLogDebug(wxT("Locking focus on wxClientDC=%p, NSView=%p"),this, m_window->GetNSView());
     return CocoaLockFocusOnNSView(m_window->GetNSView());
 }
@@ -122,5 +122,5 @@
 bool wxClientDC::CocoaUnlockFocus()
 {
-    wxLogDebug("Unlocking focus on wxClientDC=%p, NSView=%p",this, m_window->GetNSView());
+    wxLogDebug(wxT("Unlocking focus on wxClientDC=%p, NSView=%p"),this, m_window->GetNSView());
     return CocoaUnlockFocusOnNSView();
 }
@@ -138,5 +138,5 @@
 {
     m_window = window;
-    wxASSERT_MSG([NSView focusView]==window->GetNSView(), "PaintDC's NSView does not have focus.  Please use wxPaintDC only as the first DC created in a paint handler");
+    wxASSERT_MSG([NSView focusView]==window->GetNSView(), wxT("PaintDC's NSView does not have focus.  Please use wxPaintDC only as the first DC created in a paint handler"));
     sm_cocoaDCStack.Insert(this);
     m_lockedNSView = window->GetNSView();
@@ -153,5 +153,5 @@
 bool wxPaintDC::CocoaLockFocus()
 {
-    wxFAIL_MSG("wxPaintDC cannot be asked to lock focus!");
+    wxFAIL_MSG(wxT("wxPaintDC cannot be asked to lock focus!"));
     return false;
 }
Index: dcmemory.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/dcmemory.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 dcmemory.mm
--- dcmemory.mm	2003/09/02 19:03:22	1.5
+++ dcmemory.mm	2004/01/21 08:28:16
@@ -139,5 +139,5 @@
     [flipTransform concat];
 
-    wxLogDebug("[m_cocoaNSImage isFlipped]=%d", [m_cocoaNSImage isFlipped]);
+    wxLogDebug(wxT("[m_cocoaNSImage isFlipped]=%d"), [m_cocoaNSImage isFlipped]);
     [m_cocoaNSImage drawAtPoint: NSMakePoint(0,0)
         fromRect: NSMakeRect(xsrc,
Index: dialog.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/dialog.mm,v
retrieving revision 1.9
diff -u -d -b -w -b -u -2 -r1.9 dialog.mm
--- dialog.mm	2003/10/06 19:17:11	1.9
+++ dialog.mm	2004/01/21 08:28:17
@@ -76,5 +76,5 @@
     // above alloc and thus the retain count will be 1.
     [m_cocoaNSWindow release];
-    wxLogDebug("wxDialog m_cocoaNSWindow retainCount=%d",[m_cocoaNSWindow retainCount]);
+    wxLogDebug(wxT("wxDialog m_cocoaNSWindow retainCount=%d"),[m_cocoaNSWindow retainCount]);
     [m_cocoaNSWindow setTitle:wxNSStringWithWxString(title)];
     [m_cocoaNSWindow setHidesOnDeactivate:NO];
@@ -85,5 +85,5 @@
 wxDialog::~wxDialog()
 {
-    wxLogDebug("Destroying");
+    wxLogDebug(wxT("Destroying"));
     // setReleasedWhenClosed: NO
     [m_cocoaNSWindow close];
@@ -95,5 +95,5 @@
     m_closed = true;
     /* Actually, this isn't true anymore */
-    wxLogDebug("Woah: Dialogs are not generally closed");
+    wxLogDebug(wxT("Woah: Dialogs are not generally closed"));
 }
 
@@ -125,5 +125,5 @@
             wxAutoNSAutoreleasePool pool;
             wxModalDialogs.Append(this);
-            wxLogDebug("runModal");
+            wxLogDebug(wxT("runModal"));
             NSApplication *theNSApp = wxTheApp->GetNSApplication();
             // If the app hasn't started, flush the event queue
@@ -142,9 +142,9 @@
             }
             [wxTheApp->GetNSApplication() runModalForWindow:m_cocoaNSWindow];
-            wxLogDebug("runModal END");
+            wxLogDebug(wxT("runModal END"));
         }
         else
         {
-            wxLogDebug("abortModal");
+            wxLogDebug(wxT("abortModal"));
             [wxTheApp->GetNSApplication() abortModal];
             wxModalDialogs.DeleteObject(this);
@@ -199,5 +199,5 @@
     if ( closing.Member(this) )
     {
-        wxLogDebug("WARNING: Attempting to recursively call Close for dialog");
+        wxLogDebug(wxT("WARNING: Attempting to recursively call Close for dialog"));
         return;
     }
@@ -205,5 +205,5 @@
     closing.Append(this);
     
-    wxLogDebug("Sending Cancel Event");
+    wxLogDebug(wxT("Sending Cancel Event"));
     wxCommandEvent cancelEvent(wxEVT_COMMAND_BUTTON_CLICKED, wxID_CANCEL);
     cancelEvent.SetEventObject( this );
@@ -231,5 +231,5 @@
 void wxDialog::OnCancel(wxCommandEvent& event)
 {
-    wxLogDebug("Cancelled!");
+    wxLogDebug(wxT("Cancelled!"));
     EndModal(wxID_CANCEL);
 }
Index: evtloop.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/evtloop.mm,v
retrieving revision 1.4
diff -u -d -b -w -b -u -2 -r1.4 evtloop.mm
--- evtloop.mm	2003/12/15 15:57:42	1.4
+++ evtloop.mm	2004/01/21 08:28:17
@@ -89,5 +89,5 @@
 
     NSApplication *cocoaApp = [NSApplication sharedApplication];
-    wxLogDebug("wxEventLoop::Exit isRunning=%d", (int)[cocoaApp isRunning]);
+    wxLogDebug(wxT("wxEventLoop::Exit isRunning=%d"), (int)[cocoaApp isRunning]);
     wxTheApp->WakeUpIdle();
     /* Notes:
Index: frame.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/frame.mm,v
retrieving revision 1.15
diff -u -d -b -w -b -u -2 -r1.15 frame.mm
--- frame.mm	2003/12/16 19:30:41	1.15
+++ frame.mm	2004/01/21 08:28:17
@@ -166,5 +166,5 @@
         sbarheight = sbarRect.size.height;
     }
-    wxLogDebug("frame height=%f, tbar=%f, sbar=%f",frameRect.size.height,tbarheight,sbarheight);
+    wxLogDebug(wxT("frame height=%f, tbar=%f, sbar=%f"),frameRect.size.height,tbarheight,sbarheight);
     NSRect innerRect = [m_cocoaNSView frame];
     innerRect.size.height = frameRect.size.height - tbarheight - sbarheight;
Index: mbarman.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/mbarman.mm,v
retrieving revision 1.8
diff -u -d -b -w -b -u -2 -r1.8 mbarman.mm
--- mbarman.mm	2003/11/13 14:23:07	1.8
+++ mbarman.mm	2004/01/21 08:28:17
@@ -50,5 +50,5 @@
 - (id)init
 {
-    wxFAIL_MSG("[wxMenuBarManagerObserver -init] should never be called!");
+    wxFAIL_MSG(wxT("[wxMenuBarManagerObserver -init] should never be called!"));
     m_mbarman = NULL;
     return self;
@@ -274,5 +274,5 @@
     m_windowCurrent = win;
     wxMenuBar *menubar = win->GetAppMenuBar(win);
-    wxLogDebug("Found menubar=%p for window=%p.",menubar,win);
+    wxLogDebug(wxT("Found menubar=%p for window=%p."),menubar,win);
     SetMenuBar(menubar);
 }
Index: mdi.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/mdi.mm,v
retrieving revision 1.1
diff -u -d -b -w -b -u -2 -r1.1 mdi.mm
--- mdi.mm	2003/11/13 16:03:08	1.1
+++ mdi.mm	2004/01/21 08:28:17
@@ -45,5 +45,5 @@
 - (id)init
 {
-    wxFAIL_MSG("[wxMDIParentFrameObserver -init] should never be called!");
+    wxFAIL_MSG(wxT("[wxMDIParentFrameObserver -init] should never be called!"));
     m_mdiParent = NULL;
     return self;
@@ -159,5 +159,5 @@
 void wxMDIParentFrame::CocoaDelegate_windowDidBecomeKey(void)
 {
-    wxLogDebug("wxMDIParentFrame=%p::CocoaDelegate_windowDidBecomeKey",this);
+    wxLogDebug(wxT("wxMDIParentFrame=%p::CocoaDelegate_windowDidBecomeKey"),this);
     if(sm_cocoaDeactivateWindow && sm_cocoaDeactivateWindow==m_currentChild)
     {
@@ -184,5 +184,5 @@
 void wxMDIParentFrame::CocoaDelegate_windowDidResignKey(void)
 {
-    wxLogDebug("wxMDIParentFrame=%p::CocoaDelegate_windowDidResignKey",this);
+    wxLogDebug(wxT("wxMDIParentFrame=%p::CocoaDelegate_windowDidResignKey"),this);
     if(m_closed)
         wxFrame::CocoaDelegate_windowDidResignKey();
@@ -281,5 +281,5 @@
 void wxMDIChildFrame::CocoaDelegate_windowDidBecomeKey(void)
 {
-    wxLogDebug("wxMDIChildFrame=%p::CocoaDelegate_windowDidBecomeKey",this);
+    wxLogDebug(wxT("wxMDIChildFrame=%p::CocoaDelegate_windowDidBecomeKey"),this);
     if(sm_cocoaDeactivateWindow && sm_cocoaDeactivateWindow==m_mdiParent)
     {
@@ -300,5 +300,5 @@
 void wxMDIChildFrame::CocoaDelegate_windowDidResignKey(void)
 {
-    wxLogDebug("wxMDIChildFrame=%p::CocoaDelegate_windowDidResignKey",this);
+    wxLogDebug(wxT("wxMDIChildFrame=%p::CocoaDelegate_windowDidResignKey"),this);
     sm_cocoaDeactivateWindow = this;
 }
Index: menu.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/menu.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 menu.mm
--- menu.mm	2003/09/05 14:00:53	1.5
+++ menu.mm	2004/01/21 08:28:17
@@ -106,5 +106,5 @@
 {
     wxAutoNSAutoreleasePool pool;
-    wxLogDebug("append menu=%p, title=%s",menu,title.c_str());
+    wxLogDebug(wxT("append menu=%p, title=%s"),menu,title.c_str());
     if(!wxMenuBarBase::Append(menu,title))
         return false;
@@ -126,5 +126,5 @@
 {
     wxAutoNSAutoreleasePool pool;
-    wxLogDebug("insert pos=%lu, menu=%p, title=%s",pos,menu,title.c_str());
+    wxLogDebug(wxT("insert pos=%lu, menu=%p, title=%s"),pos,menu,title.c_str());
     // Get the current menu at this position
     wxMenu *nextmenu = GetMenu(pos);
Index: menuitem.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/menuitem.mm,v
retrieving revision 1.5
diff -u -d -b -w -b -u -2 -r1.5 menuitem.mm
--- menuitem.mm	2003/11/06 18:14:39	1.5
+++ menuitem.mm	2004/01/21 08:28:17
@@ -55,15 +55,15 @@
 - (void)wxMenuItemAction: (id)sender
 {
-    wxLogDebug("wxMenuItemAction");
+    wxLogDebug(wxT("wxMenuItemAction"));
     wxMenuItem *item = wxMenuItem::GetFromCocoa(sender);
-    wxCHECK_RET(item,"wxMenuItemAction received but no wxMenuItem exists!");
+    wxCHECK_RET(item,wxT("wxMenuItemAction received but no wxMenuItem exists!"));
 
     wxMenu *menu = item->GetMenu();
-    wxCHECK_RET(menu,"wxMenuItemAction received but wxMenuItem is not in a wxMenu");
+    wxCHECK_RET(menu,wxT("wxMenuItemAction received but wxMenuItem is not in a wxMenu"));
     wxMenuBar *menubar = menu->GetMenuBar();
     if(menubar)
     {
         wxFrame *frame = menubar->GetFrame();
-        wxCHECK_RET(frame, "wxMenuBar MUST be attached to a wxFrame!");
+        wxCHECK_RET(frame, wxT("wxMenuBar MUST be attached to a wxFrame!"));
         frame->ProcessCommand(item->GetId());
     }
@@ -73,7 +73,7 @@
 {
     // TODO: Do wxWindows validation here and avoid sending during idle time
-    wxLogDebug("wxMenuItemAction");
+    wxLogDebug(wxT("wxMenuItemAction"));
     wxMenuItem *item = wxMenuItem::GetFromCocoa(menuItem);
-    wxCHECK_MSG(item,NO,"validateMenuItem received but no wxMenuItem exists!");
+    wxCHECK_MSG(item,NO,wxT("validateMenuItem received but no wxMenuItem exists!"));
     return item->IsEnabled();
 }
@@ -168,5 +168,5 @@
 void wxMenuItem::Check(bool bDoCheck)
 {
-    wxCHECK_RET( IsCheckable(), "only checkable items may be checked" );
+    wxCHECK_RET( IsCheckable(), wxT("only checkable items may be checked") );
     wxMenuItemBase::Check(bDoCheck);
 }
Index: radiobut.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/radiobut.mm,v
retrieving revision 1.9
diff -u -d -b -w -b -u -2 -r1.9 radiobut.mm
--- radiobut.mm	2003/09/02 19:15:44	1.9
+++ radiobut.mm	2004/01/21 08:28:17
@@ -61,5 +61,5 @@
                 m_radioMaster = radioButton->m_radioMaster;
                 wxASSERT_MSG(m_radioMaster,
-                    "Previous radio button should be part of a group");
+                    wxT("Previous radio button should be part of a group"));
                 // Don't crash, assume user meant wxRB_SINGLE
                 if(m_radioMaster)
@@ -141,5 +141,5 @@
 void wxRadioButton::Cocoa_wxNSButtonAction(void)
 {
-    wxLogDebug("wxRadioButton");
+    wxLogDebug(wxT("wxRadioButton"));
     if(m_radioMaster && ([GetNSButton() state] == NSOnState))
     {
Index: toolbar.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/toolbar.mm,v
retrieving revision 1.2
diff -u -d -b -w -b -u -2 -r1.2 toolbar.mm
--- toolbar.mm	2003/12/16 19:28:21	1.2
+++ toolbar.mm	2004/01/21 08:28:17
@@ -72,7 +72,7 @@
 - (void)wxNSActionCellAction: (id)sender
 {
-    wxLogDebug("wxNSActionCellAction");
+    wxLogDebug(wxT("wxNSActionCellAction"));
     wxCocoaNSActionCell *wxcontrol = wxCocoaNSActionCell::GetFromCocoa(sender);
-    wxCHECK_RET(wxcontrol,"wxNSActionCellAction received but no wxCocoaNSActionCell exists!");
+    wxCHECK_RET(wxcontrol,wxT("wxNSActionCellAction received but no wxCocoaNSActionCell exists!"));
     wxcontrol->CocoaTarget_wxNSActionCellAction();
 }
@@ -298,5 +298,5 @@
             {
                 m_mouseDownTool = NULL;
-                wxLogDebug("Button was clicked after drag!");
+                wxLogDebug(wxT("Button was clicked after drag!"));
             }
             [buttonCell setHighlighted: NO];
@@ -321,5 +321,5 @@
             {
                 m_mouseDownTool = NULL;
-                wxLogDebug("Button was clicked!");
+                wxLogDebug(wxT("Button was clicked!"));
             }
             [buttonCell setHighlighted: NO];
Index: toplevel.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/toplevel.mm,v
retrieving revision 1.24
diff -u -d -b -w -b -u -2 -r1.24 toplevel.mm
--- toplevel.mm	2003/12/15 15:57:42	1.24
+++ toplevel.mm	2004/01/21 08:28:17
@@ -169,5 +169,5 @@
 {
     bool need_debug = cocoaNSWindow || m_cocoaNSWindow;
-    if(need_debug) wxLogDebug("wxTopLevelWindowCocoa=%p::SetNSWindow [m_cocoaNSWindow=%p retainCount]=%d",this,m_cocoaNSWindow,[m_cocoaNSWindow retainCount]);
+    if(need_debug) wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::SetNSWindow [m_cocoaNSWindow=%p retainCount]=%d"),this,m_cocoaNSWindow,[m_cocoaNSWindow retainCount]);
     DisassociateNSWindow(m_cocoaNSWindow);
     [cocoaNSWindow retain];
@@ -179,5 +179,5 @@
         SetNSView(NULL);
     AssociateNSWindow(m_cocoaNSWindow);
-    if(need_debug) wxLogDebug("wxTopLevelWindowCocoa=%p::SetNSWindow [cocoaNSWindow=%p retainCount]=%d",this,cocoaNSWindow,[cocoaNSWindow retainCount]);
+    if(need_debug) wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::SetNSWindow [cocoaNSWindow=%p retainCount]=%d"),this,cocoaNSWindow,[cocoaNSWindow retainCount]);
 }
 
@@ -198,5 +198,5 @@
 {
     DeactivatePendingWindow();
-    wxLogDebug("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidBecomeKey",this);
+    wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidBecomeKey"),this);
     wxActivateEvent event(wxEVT_ACTIVATE, TRUE, GetId());
     event.SetEventObject(this);
@@ -206,5 +206,5 @@
 void wxTopLevelWindowCocoa::CocoaDelegate_windowDidResignKey(void)
 {
-    wxLogDebug("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidResignKey",this);
+    wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidResignKey"),this);
     wxActivateEvent event(wxEVT_ACTIVATE, FALSE, GetId());
     event.SetEventObject(this);
@@ -214,10 +214,10 @@
 void wxTopLevelWindowCocoa::CocoaDelegate_windowDidBecomeMain(void)
 {
-    wxLogDebug("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidBecomeMain",this);
+    wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidBecomeMain"),this);
 }
 
 void wxTopLevelWindowCocoa::CocoaDelegate_windowDidResignMain(void)
 {
-    wxLogDebug("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidResignMain",this);
+    wxLogDebug(wxT("wxTopLevelWindowCocoa=%p::CocoaDelegate_windowDidResignMain"),this);
 }
 
Index: window.mm
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/cocoa/window.mm,v
retrieving revision 1.34
diff -u -d -b -w -b -u -2 -r1.34 window.mm
--- window.mm	2003/12/15 16:23:29	1.34
+++ window.mm	2004/01/21 08:28:17
@@ -18,5 +18,5 @@
 #include "wx/cocoa/autorelease.h"
 
-#import <Appkit/NSView.h>
+#import <AppKit/NSView.h>
 #import <AppKit/NSEvent.h>
 #import <AppKit/NSScrollView.h>
@@ -217,5 +217,5 @@
 void wxWindowCocoaScroller::Cocoa_FrameChanged(void)
 {
-    wxLogDebug("Cocoa_FrameChanged");
+    wxLogDebug(wxT("Cocoa_FrameChanged"));
     wxSizeEvent event(m_owner->GetSize(), m_owner->GetId());
     event.SetEventObject(m_owner);
@@ -303,5 +303,5 @@
 {
     bool need_debug = cocoaNSView || m_cocoaNSView;
-    if(need_debug) wxLogDebug("wxWindowCocoa=%p::SetNSView [m_cocoaNSView=%p retainCount]=%d",this,m_cocoaNSView,[m_cocoaNSView retainCount]);
+    if(need_debug) wxLogDebug(wxT("wxWindowCocoa=%p::SetNSView [m_cocoaNSView=%p retainCount]=%d"),this,m_cocoaNSView,[m_cocoaNSView retainCount]);
     DisassociateNSView(m_cocoaNSView);
     [cocoaNSView retain];
@@ -309,5 +309,5 @@
     m_cocoaNSView = cocoaNSView;
     AssociateNSView(m_cocoaNSView);
-    if(need_debug) wxLogDebug("wxWindowCocoa=%p::SetNSView [cocoaNSView=%p retainCount]=%d",this,cocoaNSView,[cocoaNSView retainCount]);
+    if(need_debug) wxLogDebug(wxT("wxWindowCocoa=%p::SetNSView [cocoaNSView=%p retainCount]=%d"),this,cocoaNSView,[cocoaNSView retainCount]);
 }
 
@@ -330,5 +330,5 @@
 bool wxWindowCocoa::Cocoa_drawRect(const NSRect &rect)
 {
-    wxLogDebug("Cocoa_drawRect");
+    wxLogDebug(wxT("Cocoa_drawRect"));
     // Recursion can happen if the event loop runs from within the paint
     // handler.  For instance, if an assertion dialog is shown.
@@ -336,5 +336,5 @@
     if(m_isInPaint)
     {
-        wxLogDebug("Paint event recursion!");
+        wxLogDebug(wxT("Paint event recursion!"));
         return false;
     }
@@ -350,5 +350,5 @@
 void wxWindowCocoa::InitMouseEvent(wxMouseEvent& event, WX_NSEvent cocoaEvent)
 {
-    wxASSERT_MSG([m_cocoaNSView window]==[cocoaEvent window],"Mouse event for different NSWindow");
+    wxASSERT_MSG([m_cocoaNSView window]==[cocoaEvent window],wxT("Mouse event for different NSWindow"));
     NSPoint cocoaPoint = [m_cocoaNSView convertPoint:[(NSEvent*)cocoaEvent locationInWindow] fromView:nil];
     NSRect cocoaRect = [m_cocoaNSView frame];
@@ -371,5 +371,5 @@
     wxMouseEvent event(wxEVT_MOTION);
     InitMouseEvent(event,theEvent);
-    wxLogDebug("Mouse Drag @%d,%d",event.m_x,event.m_y);
+    wxLogDebug(wxT("Mouse Drag @%d,%d"),event.m_x,event.m_y);
     return GetEventHandler()->ProcessEvent(event);
 }
@@ -389,5 +389,5 @@
     wxMouseEvent event([theEvent clickCount]<2?wxEVT_LEFT_DOWN:wxEVT_LEFT_DCLICK);
     InitMouseEvent(event,theEvent);
-    wxLogDebug("Mouse Down @%d,%d num clicks=%d",event.m_x,event.m_y,[theEvent clickCount]);
+    wxLogDebug(wxT("Mouse Down @%d,%d num clicks=%d"),event.m_x,event.m_y,[theEvent clickCount]);
     return GetEventHandler()->ProcessEvent(event);
 }
@@ -398,5 +398,5 @@
     InitMouseEvent(event,theEvent);
     event.m_leftDown = true;
-    wxLogDebug("Mouse Drag @%d,%d",event.m_x,event.m_y);
+    wxLogDebug(wxT("Mouse Drag @%d,%d"),event.m_x,event.m_y);
     return GetEventHandler()->ProcessEvent(event);
 }
@@ -406,5 +406,5 @@
     wxMouseEvent event(wxEVT_LEFT_UP);
     InitMouseEvent(event,theEvent);
-    wxLogDebug("Mouse Up @%d,%d",event.m_x,event.m_y);
+    wxLogDebug(wxT("Mouse Up @%d,%d"),event.m_x,event.m_y);
     return GetEventHandler()->ProcessEvent(event);
 }
@@ -442,5 +442,5 @@
 void wxWindowCocoa::Cocoa_FrameChanged(void)
 {
-    wxLogDebug("Cocoa_FrameChanged");
+    wxLogDebug(wxT("Cocoa_FrameChanged"));
     wxSizeEvent event(GetSize(), m_windowId);
     event.SetEventObject(this);
@@ -494,5 +494,5 @@
     // If the window is marked hidden, then it should have a dummy view
     // wxSpinCtrl (generic) abuses m_isShown, don't use it for any logic
-//    wxASSERT_MSG( (m_isShown && !m_dummyNSView) || (!m_isShown && m_dummyNSView),"wxWindow: m_isShown does not agree with m_dummyNSView");
+//    wxASSERT_MSG( (m_isShown && !m_dummyNSView) || (!m_isShown && m_dummyNSView),wxT("wxWindow: m_isShown does not agree with m_dummyNSView"));
     // Return false if there isn't a window to show or hide
     NSView *cocoaView = GetNSViewForHiding();
@@ -574,5 +574,5 @@
     NSView *nsview = GetNSViewForSuperview();
     NSView *superview = [nsview superview];
-    wxCHECK_RET(superview,"NSView does not have a superview");
+    wxCHECK_RET(superview,wxT("NSView does not have a superview"));
     NSRect parentRect = [superview bounds];
 
@@ -587,5 +587,5 @@
     NSView *nsview = GetNSViewForSuperview();
     NSView *superview = [nsview superview];
-    wxCHECK_RET(superview,"NSView does not have a superview");
+    wxCHECK_RET(superview,wxT("NSView does not have a superview"));
     NSRect parentRect = [superview bounds];
     NSRect frameRect = [nsview frame];
@@ -622,5 +622,5 @@
     NSView *nsview = GetNSViewForSuperview();
     NSView *superview = [nsview superview];
-    wxCHECK_RET(superview,"NSView does not have a superview");
+    wxCHECK_RET(superview,wxT("NSView does not have a superview"));
     NSRect parentRect = [superview bounds];
 
@@ -673,5 +673,5 @@
 void wxWindow::DoGetClientSize(int *x, int *y) const
 {
-    wxLogDebug("DoGetClientSize:");
+    wxLogDebug(wxT("DoGetClientSize:"));
     if(m_cocoaScroller)
         m_cocoaScroller->DoGetClientSize(x,y);
@@ -682,5 +682,5 @@
 void wxWindow::DoSetClientSize(int width, int height)
 {
-    wxLogDebug("DoSetClientSize=(%d,%d)",width,height);
+    wxLogDebug(wxT("DoSetClientSize=(%d,%d)"),width,height);
     if(m_cocoaScroller)
         m_cocoaScroller->ClientSizeToSize(width,height);
? cocoa_incl_patch
Index: ObjcPose.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/cocoa/ObjcPose.h,v
retrieving revision 1.3
diff -u -d -b -w -b -u -2 -r1.3 ObjcPose.h
--- ObjcPose.h	2003/07/02 20:46:34	1.3
+++ ObjcPose.h	2004/01/21 09:24:29
@@ -18,5 +18,6 @@
 #ifdef __OBJC__
 #import <objc/objc-class.h>
-#import <Foundation/NSObjcRuntime.h>
+//#import <Foundation/NSObjcRuntime.h>
+#import <Foundation/NSObjCRuntime.h>
 
 class wxPoseAsInitializer
Index: font.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/cocoa/font.h,v
retrieving revision 1.3
diff -u -d -b -w -b -u -2 -r1.3 font.h
--- font.h	2003/09/24 01:23:20	1.3
+++ font.h	2004/01/21 09:24:29
@@ -28,9 +28,9 @@
         , m_weight(wxNORMAL)
         , m_underlined(FALSE)
-        , m_faceName("Geneva")
+        , m_faceName(wxT("Geneva"))
         , m_encoding(wxFONTENCODING_DEFAULT)
     {
         Init(10, wxDEFAULT, wxNORMAL, wxNORMAL, FALSE,
-             "Geneva", wxFONTENCODING_DEFAULT);
+             wxT("Geneva"), wxFONTENCODING_DEFAULT);
     }
 

 	  	 

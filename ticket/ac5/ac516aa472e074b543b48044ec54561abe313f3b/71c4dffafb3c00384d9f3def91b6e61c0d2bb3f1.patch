Index: docs/changes.txt
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/changes.txt,v
retrieving revision 1.862
diff -u -r1.862 changes.txt
--- docs/changes.txt	2006/05/08 23:47:26	1.862
+++ docs/changes.txt	2006/05/11 14:59:55
@@ -22,6 +22,9 @@
   wxHtmlCell::GetMouseCursor(); old code overriding GetCursor() will
   continue to work with WXWIN_COMPATIBILITY_2_6, but should be rewritten to
   use GetMouseCursor().
+- wxGLContext class has no 1:1 coupling to a wxGLCanvas class any more.
+  As a consequence, the class interface changed largely.
+  Code updates, if any are required at all, are easy to accomplish though.
 
 
 Deprecated methods since 2.6.x and their replacements
Index: docs/latex/wx/glcanvas.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/glcanvas.tex,v
retrieving revision 1.12
diff -u -r1.12 glcanvas.tex
--- docs/latex/wx/glcanvas.tex	2005/09/04 15:46:20	1.12
+++ docs/latex/wx/glcanvas.tex	2006/05/11 14:59:56
@@ -3,15 +3,25 @@
 wxGLCanvas is a class for displaying OpenGL graphics. There are
 wrappers for OpenGL on Windows, and GTK+ and Motif.
 
-To use this class, create a wxGLCanvas window, call \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent} 
+There are two ways to use this class:
+
+For the older (before wx 2.7.x) and simpler method, create a wxGLCanvas window using one of the three
+constructors that implicitly create a rendering context, call \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent} 
 to direct normal OpenGL commands to the window, and then call \helpref{wxGLCanvas::SwapBuffers}{wxglcanvasswapbuffers} 
 to show the OpenGL buffer on the window.
+
+For the newer (wx 2.7.x+) method, create a wxGLCanvas window using the constructor that does \emph{not} create an implicit rendering context,
+create an explicit instance of a \helpref{wxGLContext}{wxglcontext} that is initialized with the wxGLCanvas yourself,
+then use either \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent_rc} with the instance of the \helpref{wxGLContext}{wxglcontext}
+or \helpref{wxGLContext::SetCurrent}{wxglcontextsetcurrent} with the instance of the \helpref{wxGLCanvas}{wxglcanvas}
+to bind the OpenGL state that is represented by the rendering context to the canvas, and then call
+\helpref{wxGLCanvas::SwapBuffers}{wxglcanvasswapbuffers} to swap the buffers of the OpenGL canvas and thus show your current output.
 
-To set up the attributes for the rendering context (number of bits for the depth buffer,
+To set up the attributes for the canvas (number of bits for the depth buffer,
 number of bits for the stencil buffer and so on) you should set up the correct values of
 the {\it attribList} parameter. The values that should be set up and their meanings will be described below.
 
-To switch wxGLCanvas support on under Windows, edit setup.h and set
+To switch on wxGLCanvas support on under Windows, edit setup.h and set
 {\tt wxUSE\_GLCANVAS} to $1$. You may also need to have to add
 {\tt opengl32.lib} to the list of libraries your program is linked with. On
 Unix, pass {\tt --with-opengl} to configure to compile using OpenGL or Mesa.
@@ -81,8 +91,25 @@
  \param{long}{ style=0}, \param{const wxString\& }{name="GLCanvas"},
  \param{int*}{ attribList = 0}, \param{const wxPalette\&}{ palette = wxNullPalette}}
 
-Constructor.
+\func{void}{wxGLCanvas}{\param{wxWindow* }{parent}, \param{wxWindowID}{ id = wxID_ANY},
+ \param{int*}{ attribList = 0},
+ \param{const wxPoint\&}{ pos = wxDefaultPosition}, \param{const wxSize\&}{ size = wxDefaultSize},
+ \param{long}{ style=0}, \param{const wxString\& }{name="GLCanvas"},
+ \param{const wxPalette\&}{ palette = wxNullPalette}}
 
+Constructors.
+The first three constructors implicitly create an instance of \helpref{wxGLContext}{wxglcontext}.
+The fourth constructur is identical to the first, except for the fact that it does \emph{not}
+create such an implicit rendering context, which means that you have to create an explicit instance
+of \helpref{wxGLContext}{wxglcontext} yourself (highly recommended for future compatibility with wxWidgets
+and the flexibility of your own program!).
+
+Note that if you used one of the first three constructors, \helpref{wxGLCanvas::GetContext}{wxglcanvasgetcontext}
+returns the pointer to the implicitly created instance, and the \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent}
+method \emph{without} the parameter should be used.
+If however you used the fourth constructor, \helpref{wxGLCanvas::GetContext}{wxglcanvasgetcontext} always returns NULL
+and the \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent_rc} method \emph{with} the parameter must be used!
+
 \docparam{parent}{Pointer to a parent window.}
 
 \docparam{sharedContext}{Context to share object resources with.}
@@ -121,21 +148,39 @@
 
 \func{wxGLContext*}{GetContext}{\void}
 
-Obtains the context that is associated with this canvas.
+Obtains the context that is associated with this canvas if one was implicitly created (by use of one of the first three constructors).
+Always returns NULL if the canvas was constructed with the fourth constructor.
 
 
 \membersection{wxGLCanvas::SetCurrent}\label{wxglcanvassetcurrent}
 
 \func{void}{SetCurrent}{\void}
+
+If this canvas was created with one of the first three constructors,
+a call to this method makes the implicit rendering context of this canvas current with this canvas,
+so that subsequent OpenGL calls modify the OpenGL state of the implicit rendering context.
+
+If this canvas was created with the fourth constructor, this method should not be called
+(use the SetCurrent method below with the parameter instead)!
 
-Sets this canvas as the current recipient of OpenGL calls.
-Each canvas contains an OpenGL device context that has been created during
-the creation of this window. So this call sets the current device context
-as the target device context for OpenGL operations.
+Note that this function may only be called \emph{after} the window has been shown.
 
-Note that this function may only be called after the window has been shown.
 
+\membersection{wxGLCanvas::SetCurrent}\label{wxglcanvassetcurrent_rc}
 
+\func{void}{SetCurrent}{ \param{const wxGLContext&}{ RC} }
+
+If this canvas was created with one of the first three constructors,
+this method should not be called (use the SetCurrent above without the parameter instead)!
+
+If this canvas was created with the fourth constructor, a call to this method
+makes the OpenGL state that is represented by the OpenGL rendering context { \it RC } current with this canvas,
+and if { \it win } is an object of type wxGLCanvas, the statements { \it win.SetCurrent(RC); } and { \it RC.SetCurrent(win); } are equivalent,
+see \helpref{wxGLContext::SetCurrent}{wxglcontextsetcurrent}.
+
+Note that this function may only be called \emph{after} the window has been shown.
+
+
 \membersection{wxGLCanvas::SetColour}\label{wxglcanvassetcolour}
 
 \func{void}{SetColour}{\param{const char*}{ colour}}
@@ -146,6 +191,6 @@
 \membersection{wxGLCanvas::SwapBuffers}\label{wxglcanvasswapbuffers}
 
 \func{void}{SwapBuffers}{\void}
-
-Displays the previous OpenGL commands on the window.
 
+Swaps the double-buffer of this window, making the back-buffer the front-buffer and vice versa,
+so that the output of the previous OpenGL commands is displayed on the window.
Index: docs/latex/wx/glcontext.tex
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/docs/latex/wx/glcontext.tex,v
retrieving revision 1.5
diff -u -r1.5 glcontext.tex
--- docs/latex/wx/glcontext.tex	2005/04/08 14:33:34	1.5
+++ docs/latex/wx/glcontext.tex	2006/05/11 14:59:56
@@ -1,11 +1,18 @@
 \section{\class{wxGLContext}}\label{wxglcontext}
 
-wxGLContext is a class for sharing OpenGL data resources, such as display lists, with another \helpref{wxGLCanvas}{wxglcanvas}.
+An instance of a wxGLContext represents the state of an OpenGL state machine and the connection between OpenGL and the system.
 
-By sharing data resources, you can prevent code duplication, save memory, and ultimately help optimize your application.
+The OpenGL state includes everything that can be set with the OpenGL API: colors, rendering variables, display lists, texture objects, etc.
+Although it is possible to have multiple rendering contexts share display lists in order to save resources,
+this method is hardly used today any more, because display lists are only a tiny fraction of the overall state.
+
+Therefore, one rendering context is usually used with or bound to multiple output windows in turn,
+so that the application has access to the \emph{complete and identical} state while rendering into each window.
+
+Binding (making current) a rendering context with another instance of a wxGLCanvas however works only
+if the other wxGLCanvas was created with the same attributes as the wxGLCanvas from which the wxGLContext
+was initialized. (This applies to sharing display lists among contexts analogously.)
 
-As an example, let's say you want to draw a ball on two different windows that is identical on each one, but the dimensions of one is slightly different than the other one.  What you would do is create your display lists in the shared context, and then translate each ball on the individual canvas's context.  This way the actual data for the ball is only created once (in the shared context), and you won't have to duplicate your development efforts on the second ball.
-
 Note that some wxGLContext features are extremely platform-specific - its best to check your native platform's glcanvas header (on windows include/wx/msw/glcanvas.h) to see what features your native platform provides.
 
 \wxheading{Derived from}
@@ -22,41 +29,27 @@
 
 \latexignore{\rtfignore{\wxheading{Members}}}
 
-\membersection{wxGLContext::wxGLContext}\label{wxglcontextconstr}
 
-\func{void}{wxGLContext}{\param{bool }{isRGB}, \param{wxGLCanvas*}{ win}, \param{const wxPalette\&}{ palette = wxNullPalette}}
+\membersection{wxGLContext::wxGLContext}\label{wxglcontextconstr}
 
-\func{void}{wxGLContext}{\param{bool }{isRGB}, \param{wxGLCanvas*}{ win}, \param{const wxPalette\&}{ palette = wxNullPalette},
- \param{const wxGLContext*}{ other}}
+\func{ }{wxGLContext}{ \param{wxGLCanvas*}{ win}, \param{const wxGLContext*}{ other=NULL} }
 
-\docparam{win}{Canvas to associate this shared context with.}
+Constructor.
 
-\docparam{other}{Context to share data resources with.}
+\docparam{win}{The canvas that is used to initialize this context. This parameter is needed only temporarily,
+and the caller may do anything with it (e.g. destroy the window) after the constructor returned.
 
-\membersection{wxGLContext::GetWindow}\label{wxglcontextgetwindow}
+It will be possible to bind (make current) this context to any other wxGLCanvas that has been created
+with equivalent attributes as {\it win}.}
 
-\func{const wxWindow*}{GetWindow}{\void}
+\docparam{other}{Context to share display lists with or NULL (the default) for no sharing.}
 
-Obtains the window that is associated with this context.
 
 \membersection{wxGLContext::SetCurrent}\label{wxglcontextsetcurrent}
-
-\func{void}{SetCurrent}{\void}
-
-Sets this context as the current recipient of OpenGL calls.
-Each context contains an OpenGL device context that has been created during
-the creation of this window. So this call sets the current device context
-as the target device context for OpenGL operations.
-
-\membersection{wxGLContext::SetColour}\label{wxglcontextsetcolour}
-
-\func{void}{SetColour}{\param{const char*}{ colour}}
-
-Sets the current colour for this context, using the wxWidgets colour database to find a named colour.
-
-\membersection{wxGLContext::SwapBuffers}\label{wxglcontextswapbuffers}
-
-\func{void}{SwapBuffers}{\void}
 
-Displays the previous OpenGL commands on the associated window.
+\func{void}{SetCurrent}{\param{const wxGLCanvas&}{ win}}
 
+Makes the OpenGL state that is represented by this rendering context current with the wxGLCanvas {\it win}.
+Note that {\it win} can be a different wxGLCanvas window than the one that was passed to the constructor of this rendering context.
+If { \it RC } is an object of type wxGLContext, the statements { \it RC.SetCurrent(win); } and { \it win.SetCurrent(RC); } are equivalent,
+see \helpref{wxGLCanvas::SetCurrent}{wxglcanvassetcurrent_rc}.

 	  	 

Index: include/wx/gtk/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/gtk/glcanvas.h,v
retrieving revision 1.14
diff -u -r1.14 glcanvas.h
--- include/wx/gtk/glcanvas.h	2005/09/23 12:49:16	1.14
+++ include/wx/gtk/glcanvas.h	2006/04/18 15:31:06
@@ -52,46 +52,29 @@
 class WXDLLEXPORT wxGLContext;
 class WXDLLEXPORT wxGLCanvas;
 
+
 //---------------------------------------------------------------------------
 // wxGLContext
 //---------------------------------------------------------------------------
 
-
 class WXDLLEXPORT wxGLContext: public wxObject
 {
 public:
-    wxGLContext( bool isRGB, wxWindow *win, const wxPalette& palette = wxNullPalette );
-    wxGLContext(
-               bool WXUNUSED(isRGB), wxWindow *win,
-               const wxPalette& WXUNUSED(palette),
-               const wxGLContext *other        /* for sharing display lists */
-    );
+    wxGLContext(wxWindow* win, const wxGLContext* other=NULL /* for sharing display lists */);
     ~wxGLContext();
-
-    void SetCurrent();
-    void SetColour(const wxChar *colour);
-    void SwapBuffers();
-
-    void SetupPixelFormat();
-    void SetupPalette(const wxPalette& palette);
-    wxPalette CreateDefaultPalette();
-
-    inline wxPalette* GetPalette() const { return (wxPalette*) & m_palette; }
-    inline wxWindow* GetWindow() const { return m_window; }
-    inline GtkWidget* GetWidget() const { return m_widget; }
-    inline GLXContext GetContext() const { return m_glContext; }
 
-public:
-   GLXContext       m_glContext;
+    // The win wxGLCanvas needs not necessarily be the same as the wxGLCanvas with which this context was created!
+    void SetCurrent(const wxGLCanvas& win) const;
 
-   GtkWidget       *m_widget;
-   wxPalette        m_palette;
-   wxWindow*        m_window;
+    inline GLXContext GetContext() const { return m_glContext; }
 
 private:
-  DECLARE_CLASS(wxGLContext)
+    GLXContext m_glContext;
+
+    DECLARE_CLASS(wxGLContext)
 };
 
+
 //---------------------------------------------------------------------------
 // wxGLCanvas
 //---------------------------------------------------------------------------
@@ -99,19 +82,33 @@
 class WXDLLEXPORT wxGLCanvas: public wxWindow
 {
 public:
-   inline wxGLCanvas() {
-      m_glContext = (wxGLContext*) NULL;
-      m_sharedContext = (wxGLContext*) NULL;
-      m_glWidget = (GtkWidget*) NULL;
-      m_vi = (void*) NULL;
-      m_exposed = FALSE;
-   }
+    inline wxGLCanvas()
+        : m_createImplicitContext(false)
+    {
+        m_glContext = (wxGLContext*) NULL;
+        m_sharedContext = (wxGLContext*) NULL;
+        m_glWidget = (GtkWidget*) NULL;
+        m_vi = (void*) NULL;
+        m_exposed = FALSE;
+    }
+
+    // This ctor is identical to the next, except for the fact that it
+    // doesn't create an implicit wxGLContext.
+    // The attribList parameter has been moved to avoid overload clashes.
+    wxGLCanvas( wxWindow *parent, wxWindowID id = -1,
+        int *attribList = (int*) NULL,
+        const wxPoint& pos = wxDefaultPosition,
+        const wxSize& size = wxDefaultSize,
+        long style = 0, const wxString& name = wxGLCanvasName,
+        const wxPalette& palette = wxNullPalette );
+
    wxGLCanvas( wxWindow *parent, wxWindowID id = -1,
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
         long style = 0, const wxString& name = wxGLCanvasName,
         int *attribList = (int*) NULL,
         const wxPalette& palette = wxNullPalette );
+
    wxGLCanvas( wxWindow *parent, const wxGLContext *shared,
         wxWindowID id = -1,
         const wxPoint& pos = wxDefaultPosition,
@@ -119,6 +116,7 @@
         long style = 0, const wxString& name = wxGLCanvasName,
         int *attribList = (int*) NULL,
         const wxPalette& palette = wxNullPalette );
+
    wxGLCanvas( wxWindow *parent, const wxGLCanvas *shared,
         wxWindowID id = -1,
         const wxPoint& pos = wxDefaultPosition,
@@ -140,6 +138,7 @@
 
    ~wxGLCanvas();
 
+   void SetCurrent(const wxGLContext& RC) const;
    void SetCurrent();
    void SetColour(const wxChar *colour);
    void SwapBuffers();
@@ -155,6 +154,7 @@
     wxGLContext      *m_glContext,
                      *m_sharedContext;
     wxGLCanvas       *m_sharedContextOf;
+    const bool        m_createImplicitContext;
     void             *m_vi; // actually an XVisualInfo*
     GLXFBConfig      *m_fbc;
     bool              m_canFreeVi;
Index: include/wx/msw/glcanvas.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/msw/glcanvas.h,v
retrieving revision 1.16
diff -u -r1.16 glcanvas.h
--- include/wx/msw/glcanvas.h	2005/09/23 12:50:11	1.16
+++ include/wx/msw/glcanvas.h	2006/04/18 15:31:07
@@ -53,38 +53,33 @@
 class WXDLLIMPEXP_GL wxGLContext: public wxObject
 {
 public:
-    wxGLContext(bool isRGB, wxGLCanvas *win, const wxPalette& palette = wxNullPalette);
+    wxGLContext(wxGLCanvas *win, const wxGLContext* other=NULL /* for sharing display lists */ );
 
-    wxGLContext( bool isRGB, wxGLCanvas *win,
-        const wxPalette& WXUNUSED(palette),
-        const wxGLContext *other /* for sharing display lists */ );
-
     ~wxGLContext();
-
-
-    void SetCurrent();
-
-    void SetColour(const wxChar *colour);
-
-    void SwapBuffers();
-
-
-    inline wxWindow* GetWindow() const { return m_window; }
 
-    inline WXHDC GetHDC() const { return m_hDC; }
+    // The win wxGLCanvas needs not necessarily be the same as the wxGLCanvas with which this context was created!
+    void SetCurrent(const wxGLCanvas& win) const;
 
     inline HGLRC GetGLRC() const { return m_glContext; }
 
-public:
-    HGLRC            m_glContext;
-    WXHDC            m_hDC;
-    wxWindow*        m_window;
+protected:
+    HGLRC m_glContext;
 };
 
 class WXDLLIMPEXP_GL wxGLCanvas: public wxWindow
 {
     DECLARE_CLASS(wxGLCanvas)
 public:
+    // This ctor is identical to the next, except for the fact that it
+    // doesn't create an implicit wxGLContext.
+    // The attribList parameter has been moved to avoid overload clashes.
+    wxGLCanvas(wxWindow *parent, wxWindowID id = wxID_ANY,
+        int* attribList = 0,
+        const wxPoint& pos = wxDefaultPosition,
+        const wxSize& size = wxDefaultSize, long style = 0,
+        const wxString& name = wxGLCanvasName,
+        const wxPalette& palette = wxNullPalette);
+
     wxGLCanvas(wxWindow *parent, wxWindowID id = wxID_ANY,
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize, long style = 0,
@@ -119,6 +114,7 @@
         const wxPoint& pos, const wxSize& size,
         long style, const wxString& name);
 
+    void SetCurrent(const wxGLContext& RC) const;
     void SetCurrent();
 
 #ifdef __WXUNIVERSAL__
Index: src/gtk/glcanvas.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/gtk/glcanvas.cpp,v
retrieving revision 1.32
diff -u -r1.32 glcanvas.cpp
--- src/gtk/glcanvas.cpp	2006/03/10 00:05:02	1.32
+++ src/gtk/glcanvas.cpp	2006/04/18 15:31:13
@@ -53,40 +53,8 @@
 
 IMPLEMENT_CLASS(wxGLContext,wxObject)
 
-wxGLContext::wxGLContext( bool WXUNUSED(isRGB), wxWindow *win, const wxPalette& WXUNUSED(palette) )
+wxGLContext::wxGLContext(wxWindow* win, const wxGLContext* other)
 {
-    m_window = win;
-    m_widget = win->m_wxwindow;
-
-    wxGLCanvas *gc = (wxGLCanvas*) win;
-
-    if (wxGLCanvas::GetGLXVersion() >= 13)
-    {
-        // GLX >= 1.3
-        GLXFBConfig *fbc = gc->m_fbc;
-        wxCHECK_RET( fbc, _T("invalid GLXFBConfig for OpenGl") );
-        m_glContext = glXCreateNewContext( GDK_DISPLAY(), fbc[0], GLX_RGBA_TYPE, None, GL_TRUE );
-    }
-    else
-    {
-        // GLX <= 1.2
-        XVisualInfo *vi = (XVisualInfo *) gc->m_vi;
-        wxCHECK_RET( vi, _T("invalid visual for OpenGl") );
-        m_glContext = glXCreateContext( GDK_DISPLAY(), vi, None, GL_TRUE );
-    }
-
-    wxCHECK_RET( m_glContext, _T("Couldn't create OpenGl context") );
-}
-
-wxGLContext::wxGLContext(
-               bool WXUNUSED(isRGB), wxWindow *win,
-               const wxPalette& WXUNUSED(palette),
-               const wxGLContext *other        /* for sharing display lists */
-)
-{
-    m_window = win;
-    m_widget = win->m_wxwindow;
-
     wxGLCanvas *gc = (wxGLCanvas*) win;
 
     if (wxGLCanvas::GetGLXVersion() >= 13)
@@ -130,57 +98,23 @@
 
     glXDestroyContext( GDK_DISPLAY(), m_glContext );
 }
-
-void wxGLContext::SwapBuffers()
-{
-    if (m_glContext)
-    {
-        GdkWindow *window = GTK_PIZZA(m_widget)->bin_window;
-        glXSwapBuffers( GDK_DISPLAY(), GDK_WINDOW_XWINDOW( window ) );
-    }
-}
 
-void wxGLContext::SetCurrent()
+void wxGLContext::SetCurrent(const wxGLCanvas& win) const
 {
     if (m_glContext)
     {
-        GdkWindow *window = GTK_PIZZA(m_widget)->bin_window;
+        GdkWindow *window = GTK_PIZZA(win.m_wxwindow)->bin_window;
 
         if (wxGLCanvas::GetGLXVersion() >= 13)
             // GLX >= 1.3
-            glXMakeContextCurrent( GDK_DISPLAY(), GDK_WINDOW_XWINDOW(window),
-                                   GDK_WINDOW_XWINDOW(window), m_glContext );
+            glXMakeContextCurrent( GDK_DISPLAY(), GDK_WINDOW_XWINDOW(window), GDK_WINDOW_XWINDOW(window), m_glContext );
         else
             // GLX <= 1.2
             glXMakeCurrent( GDK_DISPLAY(), GDK_WINDOW_XWINDOW(window), m_glContext );
     }
 }
 
-void wxGLContext::SetColour(const wxChar *colour)
-{
-    wxColour col = wxTheColourDatabase->Find(colour);
-    if (col.Ok())
-    {
-        float r = (float)(col.Red()/256.0);
-        float g = (float)(col.Green()/256.0);
-        float b = (float)(col.Blue()/256.0);
-        glColor3f( r, g, b);
-    }
-}
-
-void wxGLContext::SetupPixelFormat()
-{
-}
 
-void wxGLContext::SetupPalette( const wxPalette& WXUNUSED(palette) )
-{
-}
-
-wxPalette wxGLContext::CreateDefaultPalette()
-{
-    return wxNullPalette;
-}
-
 //-----------------------------------------------------------------------------
 // "realize" from m_wxwindow
 //-----------------------------------------------------------------------------
@@ -189,13 +123,13 @@
 static gint
 gtk_glwindow_realized_callback( GtkWidget *WXUNUSED(widget), wxGLCanvas *win )
 {
-    if ( !win->m_glContext )
+    if (!win->m_glContext && win->m_createImplicitContext)
     {
         wxGLContext *share = win->m_sharedContext;
         if ( !share && win->m_sharedContextOf )
             share = win->m_sharedContextOf->GetContext();
 
-        win->m_glContext = new wxGLContext( TRUE, win, wxNullPalette, share );
+        win->m_glContext = new wxGLContext(win, share);
     }
 
     return FALSE;
@@ -210,7 +144,8 @@
 static gint
 gtk_glwindow_map_callback( GtkWidget * WXUNUSED(widget), wxGLCanvas *win )
 {
-    if (win->m_glContext/* && win->m_exposed*/)
+    // CF: Can the "if" line be removed, and the code unconditionally (always) be run?
+    if (win->m_glContext || !win->m_createImplicitContext)
     {
         wxPaintEvent event( win->GetId() );
         event.SetEventObject( win );
@@ -275,10 +210,21 @@
 END_EVENT_TABLE()
 
 wxGLCanvas::wxGLCanvas( wxWindow *parent, wxWindowID id,
+                        int *attribList,
                         const wxPoint& pos, const wxSize& size,
                         long style, const wxString& name,
+                        const wxPalette& palette )
+    : m_createImplicitContext(false)
+{
+    Create( parent, NULL, NULL, id, pos, size, style, name, attribList, palette );
+}
+
+wxGLCanvas::wxGLCanvas( wxWindow *parent, wxWindowID id,
+                        const wxPoint& pos, const wxSize& size,
+                        long style, const wxString& name,
                         int *attribList,
                         const wxPalette& palette )
+    : m_createImplicitContext(true)
 {
     Create( parent, NULL, NULL, id, pos, size, style, name, attribList, palette );
 }
@@ -290,6 +236,7 @@
                         long style, const wxString& name,
                         int *attribList,
                         const wxPalette& palette )
+    : m_createImplicitContext(true)
 {
     Create( parent, shared, NULL, id, pos, size, style, name, attribList, palette );
 }
@@ -301,6 +248,7 @@
                         long style, const wxString& name,
                         int *attribList,
                         const wxPalette& palette )
+    : m_createImplicitContext(true)
 {
     Create( parent, NULL, shared, id, pos, size, style, name, attribList, palette );
 }
@@ -405,18 +353,10 @@
 
     gtk_pizza_set_clear( GTK_PIZZA(m_wxwindow), FALSE );
 
-    g_signal_connect (m_wxwindow, "realize",
-                      G_CALLBACK (gtk_glwindow_realized_callback),
-                      this);
-    g_signal_connect (m_wxwindow, "map",
-                      G_CALLBACK (gtk_glwindow_map_callback),
-                      this);
-    g_signal_connect (m_wxwindow, "expose_event",
-                      G_CALLBACK (gtk_glwindow_expose_callback),
-                      this);
-    g_signal_connect (m_widget, "size_allocate",
-                      G_CALLBACK (gtk_glcanvas_size_callback),
-                      this);
+    g_signal_connect(m_wxwindow, "realize",       G_CALLBACK(gtk_glwindow_realized_callback), this);
+    g_signal_connect(m_wxwindow, "map",           G_CALLBACK(gtk_glwindow_map_callback),      this);
+    g_signal_connect(m_wxwindow, "expose_event",  G_CALLBACK(gtk_glwindow_expose_callback),   this);
+    g_signal_connect(m_widget,   "size_allocate", G_CALLBACK(gtk_glcanvas_size_callback),     this);
 
     if (gtk_check_version(2,2,0) != NULL)
     {
@@ -602,29 +542,40 @@
 
 void wxGLCanvas::SwapBuffers()
 {
-    if (m_glContext)
-        m_glContext->SwapBuffers();
+    GdkWindow *window = GTK_PIZZA(m_wxwindow)->bin_window;
+    glXSwapBuffers( GDK_DISPLAY(), GDK_WINDOW_XWINDOW( window ) );
 }
 
 void wxGLCanvas::OnSize(wxSizeEvent& WXUNUSED(event))
 {
 }
 
+void wxGLCanvas::SetCurrent(const wxGLContext& RC) const
+{
+    RC.SetCurrent(*this);
+}
+
 void wxGLCanvas::SetCurrent()
 {
     if (m_glContext)
-        m_glContext->SetCurrent();
+        m_glContext->SetCurrent(*this);
 }
 
 void wxGLCanvas::SetColour( const wxChar *colour )
 {
-    if (m_glContext)
-        m_glContext->SetColour( colour );
+    wxColour col = wxTheColourDatabase->Find(colour);
+    if (col.Ok())
+    {
+        float r = (float)(col.Red()/256.0);
+        float g = (float)(col.Green()/256.0);
+        float b = (float)(col.Blue()/256.0);
+        glColor3f( r, g, b);
+    }
 }
 
 void wxGLCanvas::OnInternalIdle()
 {
-    if (m_glContext && m_exposed)
+    if (/*m_glContext &&*/ m_exposed)
     {
         wxPaintEvent event( GetId() );
         event.SetEventObject( this );
Index: src/msw/glcanvas.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/msw/glcanvas.cpp,v
retrieving revision 1.34
diff -u -r1.34 glcanvas.cpp
--- src/msw/glcanvas.cpp	2005/09/23 12:54:58	1.34
+++ src/msw/glcanvas.cpp	2006/04/18 15:31:15
@@ -184,76 +184,27 @@
  * GLContext implementation
  */
 
-wxGLContext::wxGLContext(bool WXUNUSED(isRGB), wxGLCanvas *win, const wxPalette& WXUNUSED(palette))
+wxGLContext::wxGLContext(wxGLCanvas* win, const wxGLContext* other /* for sharing display lists */)
 {
-  m_window = win;
-
-  m_hDC = win->GetHDC();
-
-  m_glContext = wglCreateContext((HDC) m_hDC);
-  wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
-
-  wglMakeCurrent((HDC) m_hDC, m_glContext);
-}
-
-wxGLContext::wxGLContext(
-               bool WXUNUSED(isRGB), wxGLCanvas *win,
-               const wxPalette& WXUNUSED(palette),
-               const wxGLContext *other  /* for sharing display lists */
-             )
-{
-  m_window = win;
-
-  m_hDC = win->GetHDC();
-
-  m_glContext = wglCreateContext((HDC) m_hDC);
+  m_glContext = wglCreateContext((HDC) win->GetHDC());
   wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGL context") );
 
   if( other != 0 )
     wglShareLists( other->m_glContext, m_glContext );
-
-  wglMakeCurrent((HDC) m_hDC, m_glContext);
 }
 
 wxGLContext::~wxGLContext()
 {
-  if (m_glContext)
-  {
-    wglMakeCurrent(NULL, NULL);
+    // If this context happens to be the current context, wglDeleteContext() makes it un-current first.
     wglDeleteContext(m_glContext);
-  }
-}
-
-void wxGLContext::SwapBuffers()
-{
-  if (m_glContext)
-  {
-    wglMakeCurrent((HDC) m_hDC, m_glContext);
-    ::SwapBuffers((HDC) m_hDC);    //blits the backbuffer into DC
-  }
 }
 
-void wxGLContext::SetCurrent()
+void wxGLContext::SetCurrent(const wxGLCanvas& win) const
 {
-  if (m_glContext)
-  {
-    wglMakeCurrent((HDC) m_hDC, m_glContext);
-  }
+    wglMakeCurrent((HDC) win.GetHDC(), m_glContext);
 }
 
-void wxGLContext::SetColour(const wxChar *colour)
-{
-    wxColour col = wxTheColourDatabase->Find(colour);
-    if (col.Ok())
-    {
-        float r = (float)(col.Red()/256.0);
-        float g = (float)(col.Green()/256.0);
-        float b = (float)(col.Blue()/256.0);
-        glColor3f( r, g, b);
-    }
-}
 
-
 /*
  * wxGLCanvas implementation
  */
@@ -266,6 +217,26 @@
     EVT_QUERY_NEW_PALETTE(wxGLCanvas::OnQueryNewPalette)
 END_EVENT_TABLE()
 
+wxGLCanvas::wxGLCanvas(wxWindow *parent, wxWindowID id, int *attribList,
+    const wxPoint& pos, const wxSize& size, long style,
+    const wxString& name, const wxPalette& palette) : wxWindow()
+{
+    m_glContext = NULL;
+
+    if (Create(parent, id, pos, size, style, name))
+    {
+        SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
+    }
+
+    m_hDC = (WXHDC) ::GetDC((HWND) GetHWND());
+
+    SetupPixelFormat(attribList);
+    SetupPalette(palette);
+
+    // This ctor does *not* create an instance of wxGLContext,
+    // m_glContext intentionally remains NULL.
+}
+
 wxGLCanvas::wxGLCanvas(wxWindow *parent, wxWindowID id,
     const wxPoint& pos, const wxSize& size, long style, const wxString& name,
     int *attribList, const wxPalette& palette) : wxWindow()
@@ -284,7 +255,7 @@
   SetupPixelFormat(attribList);
   SetupPalette(palette);
 
-  m_glContext = new wxGLContext(true, this, palette);
+  m_glContext = new wxGLContext(this);
 }
 
 wxGLCanvas::wxGLCanvas( wxWindow *parent,
@@ -307,7 +278,7 @@
   SetupPixelFormat(attribList);
   SetupPalette(palette);
 
-  m_glContext = new wxGLContext(true, this, palette, shared );
+  m_glContext = new wxGLContext(this, shared);
 }
 
 // Not very useful for wxMSW, but this is to be wxGTK compliant
@@ -333,7 +304,7 @@
 
   wxGLContext *sharedContext=0;
   if (shared) sharedContext=shared->GetContext();
-  m_glContext = new wxGLContext(true, this, palette, sharedContext );
+  m_glContext = new wxGLContext(this, sharedContext);
 }
 
 wxGLCanvas::~wxGLCanvas()
@@ -567,14 +538,23 @@
 
 void wxGLCanvas::SwapBuffers()
 {
-  if (m_glContext)
-    m_glContext->SwapBuffers();
+    ::SwapBuffers((HDC) m_hDC);
 }
 
 void wxGLCanvas::OnSize(wxSizeEvent& WXUNUSED(event))
 {
 }
 
+void wxGLCanvas::SetCurrent(const wxGLContext& RC) const
+{
+    // although on MSW it works even if the window is still hidden, it doesn't
+  	// under wxGTK and documentation mentions that SetCurrent() can only be
+  	// called for a shown window, so check it
+  	wxASSERT_MSG( GetParent()->IsShown(), _T("can't make hidden GL canvas current") );
+
+    RC.SetCurrent(*this);
+}
+
 void wxGLCanvas::SetCurrent()
 {
   // although on MSW it works even if the window is still hidden, it doesn't
@@ -585,14 +565,21 @@
 
   if (m_glContext)
   {
-    m_glContext->SetCurrent();
+    m_glContext->SetCurrent(*this);
   }
 }
 
 void wxGLCanvas::SetColour(const wxChar *colour)
 {
-  if (m_glContext)
-    m_glContext->SetColour(colour);
+    wxColour col = wxTheColourDatabase->Find(colour);
+
+    if (col.Ok())
+    {
+        float r = (float)(col.Red()/256.0);
+        float g = (float)(col.Green()/256.0);
+        float b = (float)(col.Blue()/256.0);
+        glColor3f( r, g, b);
+    }
 }
 
 // TODO: Have to have this called by parent frame (?)
@@ -623,146 +610,6 @@
     ::RealizePalette((HDC) GetHDC());
     Refresh();
   }
-}
-
-/* Give extensions proper function names. */
-
-/* EXT_vertex_array */
-void glArrayElementEXT(GLint WXUNUSED(i))
-{
-}
-
-void glColorPointerEXT(GLint WXUNUSED(size), GLenum WXUNUSED(type), GLsizei WXUNUSED(stride), GLsizei WXUNUSED(count), const GLvoid *WXUNUSED(pointer))
-{
-}
-
-void glDrawArraysEXT(GLenum  WXUNUSED_WITHOUT_GL_EXT_vertex_array(mode),
-                     GLint   WXUNUSED_WITHOUT_GL_EXT_vertex_array(first),
-                     GLsizei WXUNUSED_WITHOUT_GL_EXT_vertex_array(count))
-{
-#ifdef GL_EXT_vertex_array
-    static PFNGLDRAWARRAYSEXTPROC proc = 0;
-
-    if ( !proc )
-    {
-        proc = (PFNGLDRAWARRAYSEXTPROC) wglGetProcAddress("glDrawArraysEXT");
-    }
-
-    if ( proc )
-        (* proc) (mode, first, count);
-#endif
-}
-
-void glEdgeFlagPointerEXT(GLsizei WXUNUSED(stride), GLsizei WXUNUSED(count), const GLboolean *WXUNUSED(pointer))
-{
-}
-
-void glGetPointervEXT(GLenum WXUNUSED(pname), GLvoid* *WXUNUSED(params))
-{
-}
-
-void glIndexPointerEXT(GLenum WXUNUSED(type), GLsizei WXUNUSED(stride), GLsizei WXUNUSED(count), const GLvoid *WXUNUSED(pointer))
-{
-}
-
-void glNormalPointerEXT(GLenum        WXUNUSED_WITHOUT_GL_EXT_vertex_array(type),
-                        GLsizei       WXUNUSED_WITHOUT_GL_EXT_vertex_array(stride),
-                        GLsizei       WXUNUSED_WITHOUT_GL_EXT_vertex_array(count),
-                        const GLvoid *WXUNUSED_WITHOUT_GL_EXT_vertex_array(pointer))
-{
-#ifdef GL_EXT_vertex_array
-  static PFNGLNORMALPOINTEREXTPROC proc = 0;
-
-  if ( !proc )
-  {
-    proc = (PFNGLNORMALPOINTEREXTPROC) wglGetProcAddress("glNormalPointerEXT");
-  }
-
-  if ( proc )
-    (* proc) (type, stride, count, pointer);
-#endif
-}
-
-void glTexCoordPointerEXT(GLint WXUNUSED(size), GLenum WXUNUSED(type), GLsizei WXUNUSED(stride), GLsizei WXUNUSED(count), const GLvoid *WXUNUSED(pointer))
-{
-}
-
-void glVertexPointerEXT(GLint         WXUNUSED_WITHOUT_GL_EXT_vertex_array(size),
-                        GLenum        WXUNUSED_WITHOUT_GL_EXT_vertex_array(type),
-                        GLsizei       WXUNUSED_WITHOUT_GL_EXT_vertex_array(stride),
-                        GLsizei       WXUNUSED_WITHOUT_GL_EXT_vertex_array(count),
-                        const GLvoid *WXUNUSED_WITHOUT_GL_EXT_vertex_array(pointer))
-{
-#ifdef GL_EXT_vertex_array
-  static PFNGLVERTEXPOINTEREXTPROC proc = 0;
-
-  if ( !proc )
-  {
-    proc = (PFNGLVERTEXPOINTEREXTPROC) wglGetProcAddress("glVertexPointerEXT");
-  }
-  if ( proc )
-    (* proc) (size, type, stride, count, pointer);
-#endif
-}
-
-/* EXT_color_subtable */
-void glColorSubtableEXT(GLenum WXUNUSED(target), GLsizei WXUNUSED(start), GLsizei WXUNUSED(count), GLenum WXUNUSED(format), GLenum WXUNUSED(type), const GLvoid *WXUNUSED(table))
-{
-}
-
-/* EXT_color_table */
-void glColorTableEXT(GLenum WXUNUSED(target), GLenum WXUNUSED(internalformat), GLsizei WXUNUSED(width), GLenum WXUNUSED(format), GLenum WXUNUSED(type), const GLvoid *WXUNUSED(table))
-{
-}
-
-void glCopyColorTableEXT(GLenum WXUNUSED(target), GLenum WXUNUSED(internalformat), GLint WXUNUSED(x), GLint WXUNUSED(y), GLsizei WXUNUSED(width))
-{
-}
-
-void glGetColorTableEXT(GLenum WXUNUSED(target), GLenum WXUNUSED(format), GLenum WXUNUSED(type), GLvoid *WXUNUSED(table))
-{
-}
-
-void glGetColorTableParamaterfvEXT(GLenum WXUNUSED(target), GLenum WXUNUSED(pname), GLfloat *WXUNUSED(params))
-{
-}
-
-void glGetColorTavleParameterivEXT(GLenum WXUNUSED(target), GLenum WXUNUSED(pname), GLint *WXUNUSED(params))
-{
-}
-
-/* SGI_compiled_vertex_array */
-void glLockArraysSGI(GLint WXUNUSED(first), GLsizei WXUNUSED(count))
-{
-}
-
-void glUnlockArraysSGI()
-{
-}
-
-
-/* SGI_cull_vertex */
-void glCullParameterdvSGI(GLenum WXUNUSED(pname), GLdouble* WXUNUSED(params))
-{
-}
-
-void glCullParameterfvSGI(GLenum WXUNUSED(pname), GLfloat* WXUNUSED(params))
-{
-}
-
-/* SGI_index_func */
-void glIndexFuncSGI(GLenum WXUNUSED(func), GLclampf WXUNUSED(ref))
-{
-}
-
-/* SGI_index_material */
-void glIndexMaterialSGI(GLenum WXUNUSED(face), GLenum WXUNUSED(mode))
-{
-}
-
-/* WIN_swap_hint */
-void glAddSwapHintRectWin(GLint WXUNUSED(x), GLint WXUNUSED(y), GLsizei WXUNUSED(width), GLsizei WXUNUSED(height))
-{
 }
 
 

 	  	 

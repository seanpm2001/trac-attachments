diff -rNbu2 wxWidgets/include/wx/hyperlink.h wxWidgetsNew/include/wx/hyperlink.h
--- wxWidgets/include/wx/hyperlink.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgetsNew/include/wx/hyperlink.h	2005-04-02 16:40:38.000000000 -0800
@@ -0,0 +1,163 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        hyperlink.h
+// Purpose:     Hyperlink control (wxAdv)
+// Author:      David Norris <danorris@gmail.com>
+// Modified by:
+// Created:     04/02/2005
+// RCS-ID:      $Id: utils.h,v 1.114 2005/01/21 18:48:22 ABX Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_HYPERLINKH__
+#define _WX_HYPERLINKH__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "hyperlink.h"
+#endif
+
+#include "wx/defs.h"
+
+#if wxUSE_HYPERLINK
+
+#include "wx/control.h"
+
+//
+// An event fired when the user clicks on the label in a hyperlink control.
+// See HyperlinkControl for details.
+//
+
+class wxHyperlinkEvent : public wxEvent
+{
+	public:
+
+		// Constructor.
+		wxHyperlinkEvent(wxWindowID id, const wxString& url);
+
+		// Returns a copy of this event.
+		virtual wxEvent *Clone() const;
+
+		// Returns the URL associated with the hyperlink control
+		// that the user clicked on.
+		const wxString& GetUrl() const;
+
+	private:
+
+		// URL associated with the hyperlink control that the used clicked on.
+		wxString m_url;
+};
+
+// Declare an event identifier.
+BEGIN_DECLARE_EVENT_TYPES()
+	DECLARE_EVENT_TYPE(wxEVT_HYPERLINK, 0)
+END_DECLARE_EVENT_TYPES()
+
+// Define a typedef for event handler functions.
+typedef void (wxEvtHandler::*wxHyperlinkEventFunction)(wxHyperlinkEvent&);
+
+// Define an event table macro.
+#define EVT_HYPERLINK(id, fn) DECLARE_EVENT_TABLE_ENTRY(wxEVT_HYPERLINK, \
+	id, id, (wxObjectEventFunction) (wxEventFunction) \
+	wxStaticCastEvent(wxHyperlinkEventFunction, &fn), (wxObject *) NULL),
+
+// Newer event macro
+#define wxHyperlinkEventHandler(func) \
+    (wxObjectEventFunction)(wxEventFunction)wxStaticCastEvent(wxHyperlinkEventFunction, &func)
+
+//
+// A static text control that emulates a hyperlink. The link is displayed
+// in an appropriate text style, derived from the control's normal font.
+// When the mouse rolls over the link, the cursor changes to a hand and the
+// link's color changes to the active color.
+//
+// Clicking on the link does not launch a web browser; instead, a
+// HyperlinkEvent is fired. The event propagates upward until it is caught,
+// just like a wxCommandEvent.
+//
+// Use the EVT_HYPERLINK() to catch link events.
+//
+
+class wxHyperlinkCtrl : public wxControl
+{
+public:
+	// Default constructor (for two-step construction).
+	wxHyperlinkCtrl() { }
+
+	// Constructor.
+	wxHyperlinkCtrl(wxWindow *parent, wxWindowID id,
+		const wxString& label, const wxString& url,
+		const wxPoint& pos = wxDefaultPosition,
+		const wxSize& size = wxDefaultSize, long style = 0,
+		const wxString& name = wxT(""));
+
+	// Creation function (for two-step construction).
+	bool Create(wxWindow *parent, wxWindowID id,
+		const wxString& label, const wxString& url,
+		const wxPoint& pos = wxDefaultPosition,
+		const wxSize& size = wxDefaultSize, long style = 0,
+		const wxString& name = wxT(""));
+
+	// Returns the best size for the window, which is the size needed
+	// to display the text label.
+	virtual wxSize DoGetBestSize() const;
+
+protected:
+	// Renders the hyperlink.
+	void OnPaint(wxPaintEvent& event);
+
+	// If the click originates inside the bounding box of the label,
+	// a flag is set so that an event will be fired when the left
+	// button is released.
+	void OnLeftDown(wxMouseEvent& event);
+
+	// If the click both originated and finished inside the bounding box
+	// of the label, a HyperlinkEvent is fired.
+	void OnLeftUp(wxMouseEvent& event);
+
+	// Changes the cursor to a hand, if the mouse is inside the label's
+	// bounding box.
+	void OnEnterWindow(wxMouseEvent& event);
+
+	// Changes the cursor back to the default, if necessary.
+	void OnLeaveWindow(wxMouseEvent& event);
+
+	// Changes the cursor to a hand, if the mouse is inside the label's
+	// bounding box; otherwise the cursor is reset to the default.
+	void OnMotion(wxMouseEvent& event);
+
+	// Calculates the bounding box of the label.
+	void CalculateExtent();
+
+private:
+	// Text to be displayed.
+	wxString m_label;
+
+	// URL associated with the link. This is transmitted inside
+	// the HyperlinkEvent fired when the user clicks on the label.
+	wxString m_url;
+
+	// Foreground colours for various link types.
+	wxColour m_unvisitedColour;
+	wxColour m_rolloverColour;
+
+	// Font to render the label in. This is the same as GetFont()
+	// except that underlining is forced. It's cached for efficiency.
+	wxFont m_font;
+
+	// Bounding box of the current label.
+	wxCoord m_width;
+	wxCoord m_height;
+
+	// True if the mouse cursor is inside the label's bounding box.
+	bool m_rollover;
+
+	// True if a click is in progress (left button down) and the click
+	// originated inside the label's bounding box.
+	bool m_clicking;
+
+    // wxWindows event table.
+    DECLARE_EVENT_TABLE()
+};
+
+#endif //wxUSE_HYPERLINK
+#endif //_WX_HYPERLINKH__
\ No newline at end of file
diff -rNbu2 wxWidgets/include/wx/xrc/xh_hyperlink.h wxWidgetsNew/include/wx/xrc/xh_hyperlink.h
--- wxWidgets/include/wx/xrc/xh_hyperlink.h	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgetsNew/include/wx/xrc/xh_hyperlink.h	2005-04-02 16:56:10.000000000 -0800
@@ -0,0 +1,44 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        xh_hyperlink.h
+// Purpose:     Hyperlink control (wxAdv)
+// Author:      David Norris <danorris@gmail.com>
+// Modified by:
+// Created:     04/02/2005
+// RCS-ID:      $Id: utils.h,v 1.114 2005/01/21 18:48:22 ABX Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_HYPERLINKH__
+#define _WX_XH_HYPERLINKH__
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+    #pragma interface "hyperlink.h"
+#endif
+
+#include "wx/defs.h"
+
+#if wxUSE_HYPERLINK
+
+#include "wx/hyperlink.h"
+#include "wx/xrc/xmlres.h"
+
+class WXDLLIMPEXP_XRC wxHyperlinkCtrlXmlHandler : public wxXmlResourceHandler
+{
+public:
+	// Constructor.
+	wxHyperlinkCtrlXmlHandler();
+
+	// Creates the control and returns a pointer to it.
+	virtual wxObject *DoCreateResource();
+
+	// Returns true if we know how to create a control for the given node.
+	virtual bool CanHandle(wxXmlNode *node);
+
+    // Register with wxWindows' dynamic class subsystem.
+    DECLARE_DYNAMIC_CLASS(wxHyperlinkCtrlXmlHandler)
+};
+
+#endif //wxUSE_HYPERLINK
+#endif //_WX_XH_HYPERLINKH__
+
diff -rNbu2 wxWidgets/samples/controls/controls.cpp wxWidgetsNew/samples/controls/controls.cpp
--- wxWidgets/samples/controls/controls.cpp	2005-04-03 18:14:10.000000000 -0700
+++ wxWidgetsNew/samples/controls/controls.cpp	2005-04-02 17:23:44.000000000 -0800
@@ -61,4 +61,9 @@
 #endif
 
+#ifdef wxUSE_HYPERLINK
+    #include "wx/hyperlink.h"
+    #include "wx/utils.h"
+#endif
+
 //----------------------------------------------------------------------
 // class definitions
@@ -123,4 +128,8 @@
     void OnSizerCheck (wxCommandEvent &event);
 
+#if wxUSE_HYPERLINK
+    void OnHyperlink(wxHyperlinkEvent& event);
+#endif
+
     wxListBox     *m_listbox,
                   *m_listboxSorted;
@@ -169,4 +178,8 @@
     wxButton      *m_bigBtn;
 
+#if wxUSE_HYPERLINK
+    wxHyperlinkCtrl *m_hyperlink;
+#endif
+
 private:
     wxLog *m_logTargetOld;
@@ -441,4 +454,6 @@
 const int  ID_SIZER_CHECKBIG    = 206;
 
+const int  ID_HYPERLINK         = 300;
+
 BEGIN_EVENT_TABLE(MyPanel, wxPanel)
 EVT_SIZE      (                         MyPanel::OnSize)
@@ -508,4 +523,7 @@
 EVT_BUTTON    (ID_BITMAP_BTN,           MyPanel::OnBmpButton)
 EVT_TOGGLEBUTTON(ID_BITMAP_BTN_ENABLE,  MyPanel::OnBmpButtonToggle)
+#if wxUSE_HYPERLINK
+EVT_HYPERLINK (ID_HYPERLINK,            MyPanel::OnHyperlink)
+#endif
 
 EVT_CHECKBOX  (ID_SIZER_CHECK1,         MyPanel::OnSizerCheck)
@@ -906,4 +924,15 @@
     m_book->AddPage(panel, _T("wxBitmapXXX"));
 
+    // hyperlink
+#ifdef wxUSE_HYPERLINK
+    panel = new wxPanel(m_book);
+    m_hyperlink = new wxHyperlinkCtrl(panel, ID_HYPERLINK, 
+                                        _T("Click here to go to Google!"),
+                                        _T("http://www.google.com"),
+                                        wxPoint(250, 60)
+                                     );
+    m_book->AddPage(panel, _T("wxHyperlinkCtrl"));
+#endif 
+
     // sizer
 
@@ -1539,4 +1568,13 @@
 #endif // wxUSE_SPINBTN
 
+#ifdef wxUSE_HYPERLINK
+void MyPanel::OnHyperlink(wxHyperlinkEvent& event)
+{
+    if(!wxLaunchDefaultBrowser(event.GetUrl()))
+        wxMessageBox(_T("Could not default browser!"));
+
+}
+#endif //wxUSE_HYPERLINK
+
 void MyPanel::OnSizerCheck( wxCommandEvent &event)
 {
diff -rNbu2 wxWidgets/src/generic/hyperlink.cpp wxWidgetsNew/src/generic/hyperlink.cpp
--- wxWidgets/src/generic/hyperlink.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgetsNew/src/generic/hyperlink.cpp	2005-04-02 17:16:00.000000000 -0800
@@ -0,0 +1,211 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        hyperlink.cpp
+// Purpose:     Hyperlink control (wxAdv)
+// Author:      David Norris <danorris@gmail.com>
+// Modified by:
+// Created:     04/02/2005
+// RCS-ID:      $Id: utils.h,v 1.114 2005/01/21 18:48:22 ABX Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+//===========================================================================
+//  DECLARATIONS
+//===========================================================================
+
+//---------------------------------------------------------------------------
+// Pre-compiled header stuff
+//---------------------------------------------------------------------------
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma implementation "hyperlink.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+//---------------------------------------------------------------------------
+// Includes
+//---------------------------------------------------------------------------
+#include "wx/hyperlink.h"
+#include "wx/utils.h" //wxLaunchDefaultBrowser
+
+//---------------------------------------------------------------------------
+// Compilation guard
+//---------------------------------------------------------------------------
+#if wxUSE_HYPERLINK
+
+//===========================================================================
+//  IMPLEMENTATION
+//===========================================================================
+
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
+// wxHyperlinkCtrl
+//
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+// wxWindows event table.
+BEGIN_EVENT_TABLE(wxHyperlinkCtrl, wxWindow)
+	EVT_PAINT(wxHyperlinkCtrl::OnPaint)
+	EVT_LEFT_DOWN(wxHyperlinkCtrl::OnLeftDown)
+	EVT_LEFT_UP(wxHyperlinkCtrl::OnLeftUp)
+	EVT_ENTER_WINDOW(wxHyperlinkCtrl::OnEnterWindow)
+	EVT_LEAVE_WINDOW(wxHyperlinkCtrl::OnLeaveWindow)
+	EVT_MOTION(wxHyperlinkCtrl::OnMotion)
+END_EVENT_TABLE()
+
+// Constructor.
+wxHyperlinkCtrl::wxHyperlinkCtrl(wxWindow *parent, wxWindowID id,
+	const wxString& label, const wxString& url, const wxPoint& pos,
+	const wxSize& size, long style, const wxString& name)
+{
+	Create(parent, id, label, url, pos, size, style, name);
+}
+
+// Creation function (for two-step construction).
+bool wxHyperlinkCtrl::Create(wxWindow *parent, wxWindowID id,
+	const wxString& label, const wxString& url, const wxPoint& pos,
+	const wxSize& size, long style, const wxString& name)
+{
+	if (!wxWindow::Create(parent, id, pos, size, style, name)) return false;
+
+	m_label = label;
+	m_url = url;
+
+	m_unvisitedColour = wxColour(0, 0, 255);
+	m_rolloverColour = wxColour(255, 0, 0);
+	m_rollover = false;
+	m_clicking = false;
+
+	m_font = GetFont();
+	m_font.SetUnderlined(true);
+
+	CalculateExtent();
+
+	return true;
+}
+
+// Returns the best size for the window, which is the size needed
+// to display the text label.
+wxSize wxHyperlinkCtrl::DoGetBestSize() const
+{
+	return wxSize(m_width, m_height);
+}
+
+// Renders the hyperlink.
+void wxHyperlinkCtrl::OnPaint(wxPaintEvent& WXUNUSED(event))
+{
+	wxPaintDC dc(this);
+	dc.BeginDrawing();
+	dc.SetTextForeground(m_rollover ? m_rolloverColour : m_unvisitedColour);
+	dc.SetFont(m_font);
+	dc.DrawText(m_label, 0, 0);
+	dc.EndDrawing();
+}
+
+// If the click originates inside the bounding box of the label,
+// a flag is set so that an event will be fired when the left
+// button is released.
+void wxHyperlinkCtrl::OnLeftDown(wxMouseEvent& event)
+{
+	if (event.m_x < m_width && event.m_y < m_height) m_clicking = true;
+}
+
+// If the click both originated and finished inside the bounding box
+// of the label, a wxHyperlinkEvent is fired.
+void wxHyperlinkCtrl::OnLeftUp(wxMouseEvent& event)
+{
+	if (!m_clicking) return;
+
+	if (event.m_x < m_width && event.m_y < m_height) {
+		wxHyperlinkEvent linkEvent(GetId(), m_url);
+		wxPostEvent(this, linkEvent);
+	}
+
+	m_clicking = false;
+}
+
+// Changes the cursor to a hand, if the mouse is inside the label's
+// bounding box.
+void wxHyperlinkCtrl::OnEnterWindow(wxMouseEvent& event)
+{
+	if (event.m_x < m_width && event.m_y < m_height && !m_rollover) {
+		SetCursor(wxCursor(wxCURSOR_HAND));
+		m_rollover = true;
+		Refresh();
+	}
+}
+
+// Changes the cursor back to the default, if necessary.
+void wxHyperlinkCtrl::OnLeaveWindow(wxMouseEvent& WXUNUSED(event))
+{
+	if (m_rollover) {
+		SetCursor(*wxSTANDARD_CURSOR);
+		m_rollover = false;
+		Refresh();
+	}
+}
+
+// Changes the cursor to a hand, if the mouse is inside the label's
+// bounding box; otherwise the cursor is reset to the default.
+void wxHyperlinkCtrl::OnMotion(wxMouseEvent& event)
+{
+	bool rollover = (event.m_x < m_width && event.m_y < m_height);
+	if (rollover && !m_rollover) {
+		SetCursor(wxCursor(wxCURSOR_HAND));
+		m_rollover = true;
+		Refresh();
+	} else if (!rollover && m_rollover) {
+		SetCursor(*wxSTANDARD_CURSOR);
+		m_rollover = false;
+		Refresh();
+	}
+}
+
+// Calculates the bounding box of the label.
+void wxHyperlinkCtrl::CalculateExtent()
+{
+	wxWindowDC dc(this);
+	dc.SetFont(m_font);
+	dc.GetTextExtent(m_label, &m_width, &m_height);
+}
+
+
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
+// wxHyperlinkEvent
+//
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+// Declare an event identifier.
+DEFINE_EVENT_TYPE(wxEVT_HYPERLINK)
+
+// Constructor.
+wxHyperlinkEvent::wxHyperlinkEvent(wxWindowID id, const wxString& url) :
+	wxEvent(id, wxEVT_HYPERLINK), m_url(url)
+{
+	m_propagationLevel = wxEVENT_PROPAGATE_MAX;
+}
+
+// Returns a copy of this event.
+wxEvent *wxHyperlinkEvent::Clone() const
+{
+	return new wxHyperlinkEvent(*this);
+}
+
+// Returns the URL associated with the hyperlink control
+// that the user clicked on.
+const wxString& wxHyperlinkEvent::GetUrl() const
+{
+	return m_url;
+}
+
+//---------------------------------------------------------------------------
+// End compilation guard
+//---------------------------------------------------------------------------
+#endif //wxUSE_HYPERLINK
diff -rNbu2 wxWidgets/src/xrc/xh_hyperlink.cpp wxWidgetsNew/src/xrc/xh_hyperlink.cpp
--- wxWidgets/src/xrc/xh_hyperlink.cpp	1969-12-31 16:00:00.000000000 -0800
+++ wxWidgetsNew/src/xrc/xh_hyperlink.cpp	2005-04-03 18:16:00.000000000 -0700
@@ -0,0 +1,85 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        hyperlink.cpp
+// Purpose:     Hyperlink control (wxAdv)
+// Author:      David Norris <danorris@gmail.com>
+// Modified by:
+// Created:     04/02/2005
+// RCS-ID:      $Id: utils.h,v 1.114 2005/01/21 18:48:22 ABX Exp $
+// Copyright:   (c) 2005 David Norris
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+//===========================================================================
+//  DECLARATIONS
+//===========================================================================
+
+//---------------------------------------------------------------------------
+// Pre-compiled header stuff
+//---------------------------------------------------------------------------
+
+#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
+#pragma implementation "hyperlink.h"
+#endif
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+#pragma hdrstop
+#endif
+
+//---------------------------------------------------------------------------
+// Includes
+//---------------------------------------------------------------------------
+#include "wx/hyperlink.h"
+#include "wx/utils.h" //wxLaunchDefaultBrowser
+#include "wx/xrc/xmlres.h"
+#include "wx/xrc/xh_hyperlink.h"
+
+//---------------------------------------------------------------------------
+// Compilation guard
+//---------------------------------------------------------------------------
+#if wxUSE_HYPERLINK
+
+//===========================================================================
+//  IMPLEMENTATION
+//===========================================================================
+
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+//
+// wxHyperlinkCtrlXmlHandler
+//
+//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+// Register with wxWindows' dynamic class subsystem.
+IMPLEMENT_DYNAMIC_CLASS(wxHyperlinkCtrlXmlHandler, wxXmlResourceHandler)
+
+// Constructor.
+wxHyperlinkCtrlXmlHandler::wxHyperlinkCtrlXmlHandler()
+{
+    AddWindowStyles();
+}
+
+// Creates the control and returns a pointer to it.
+wxObject *wxHyperlinkCtrlXmlHandler::DoCreateResource()
+{
+    XRC_MAKE_INSTANCE(control, wxHyperlinkCtrl)
+
+    SetupWindow(control);
+    control->Create(m_parentAsWindow, GetID(),
+		GetParamValue(wxT("label")), GetParamValue(wxT("target-url")),
+		GetPosition(), GetSize(), GetStyle());
+
+    return control;
+}
+
+// Returns true if we know how to create a control for the given node.
+bool wxHyperlinkCtrlXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return IsOfClass(node, wxT("HyperlinkControl"));
+}
+
+//---------------------------------------------------------------------------
+// End compilation guard
+//---------------------------------------------------------------------------
+#endif //wxUSE_HYPERLINK

 	  	 

--- treectlg-orig.cpp	2012-07-08 03:28:27.000000000 -0700
+++ treectlg.cpp	2012-09-17 16:51:57.000000000 -0700
@@ -3534,9 +3534,20 @@
         wxTreeEvent
             hevent(wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP,  this, hoverItem);
 
-        if ( GetEventHandler()->ProcessEvent(hevent) && hevent.IsAllowed() )
+        if ( GetEventHandler()->ProcessEvent(hevent) )
         {
-            SetToolTip(hevent.m_label);
+            if ( hevent.IsAllowed() )
+            {
+                SetToolTip(hevent.m_label);
+            }
+            else
+            {
+                if (GetToolTip() != NULL)
+                {
+                    // Event was vetoed, so clear any previous tooltip
+                    SetToolTip(wxT(""));
+                }
+            }
         }
     }
 #endif
@@ -4005,10 +4016,36 @@
 }
 
 // Process the tooltip event, to speed up event processing.
-// Doesn't actually get a tooltip.
+// 
 void wxGenericTreeCtrl::OnGetToolTip( wxTreeEvent &event )
 {
-    event.Veto();
+#if wxUSE_TOOLTIPS    
+    wxTreeItemId itemId = event.GetItem();
+    wxGenericTreeItem* pItem = (wxGenericTreeItem*)itemId.m_pItem;
+
+    // get the text extent of the the tree item
+    int widthItem = pItem->GetX() + pItem->GetWidth();
+    // get the width of the tree control client area
+    // (not counting the scroll bar)
+    int widthCtrl, heightCtrl;
+    GetClientSize(&widthCtrl, &heightCtrl);
+    
+    // check if the current tree item is clipped by the control's width,
+    // which triggers a tooltip
+    if (widthItem > widthCtrl)
+    { 
+        // tree item is wider than the control, so fetch the
+        // tooltip text into the event object and the set
+        // event state to 'allow'
+        event.m_label = GetItemText(itemId);
+        event.Allow();    
+    }
+    else
+#endif
+    {        
+        // veto processing the event, nixing any tooltip
+        event.Veto();
+    }
 }
 
 

Index: src/msw/choice.cpp
===================================================================
--- src/msw/choice.cpp	(revision 74977)
+++ src/msw/choice.cpp	(working copy)
@@ -436,6 +436,7 @@
 
 void* wxChoice::DoGetItemClientData(unsigned int n) const
 {
+    SetLastError(ERROR_SUCCESS);
     LPARAM rc = SendMessage(GetHwnd(), CB_GETITEMDATA, n, 0);
     if ( rc == CB_ERR && GetLastError() != ERROR_SUCCESS )
     {
Index: src/msw/listbox.cpp
===================================================================
--- src/msw/listbox.cpp	(revision 74977)
+++ src/msw/listbox.cpp	(working copy)
@@ -304,6 +304,7 @@
 
 void *wxListBox::DoGetItemClientData(unsigned int n) const
 {
+    SetLastError(ERROR_SUCCESS);
     LPARAM rc = SendMessage(GetHwnd(), LB_GETITEMDATA, n, 0);
     if ( rc == LB_ERR && GetLastError() != ERROR_SUCCESS )
     {
Index: tests/controls/choicetest.cpp
===================================================================
--- tests/controls/choicetest.cpp	(revision 74977)
+++ tests/controls/choicetest.cpp	(working copy)
@@ -36,9 +36,11 @@
     CPPUNIT_TEST_SUITE( ChoiceTestCase );
         wxITEM_CONTAINER_TESTS();
         CPPUNIT_TEST( Sort );
+        CPPUNIT_TEST( ClientData );
     CPPUNIT_TEST_SUITE_END();
 
     void Sort();
+    void ClientData();
 
     wxChoice* m_choice;
 
@@ -92,4 +94,22 @@
 #endif
 }
 
+void ChoiceTestCase::ClientData()
+{
+    const int ClientDataOffset = 5;
+    for (int ClientData = -ClientDataOffset; ClientData <= ClientDataOffset; ++ClientData) {
+        m_choice->Append(wxString::Format("ClientData%d", ClientData), (void*)ClientData);
+    }
+
+    for (int ItemIndex = 0; ItemIndex < m_choice->GetCount(); ++ItemIndex) {
+        #if defined(__WXMSW__)
+            SetLastError(ERROR_INVALID_DATA);
+        #endif
+
+        int ClientData = int(m_choice->GetClientData(ItemIndex));
+
+        CPPUNIT_ASSERT_EQUAL(ItemIndex-ClientDataOffset, ClientData);
+    }
+}
+
 #endif //wxUSE_CHOICE
Index: tests/controls/listboxtest.cpp
===================================================================
--- tests/controls/listboxtest.cpp	(revision 74977)
+++ tests/controls/listboxtest.cpp	(working copy)
@@ -42,6 +42,7 @@
         WXUISIM_TEST( ClickEvents );
         WXUISIM_TEST( ClickNotOnItem );
         CPPUNIT_TEST( HitTest );
+        CPPUNIT_TEST( ClientData );
         //We also run all tests as an ownerdrawn list box.  We do not need to
         //run the wxITEM_CONTAINER_TESTS as they are tested with wxCheckListBox
 #ifdef __WXMSW__
@@ -51,6 +52,7 @@
         WXUISIM_TEST( ClickEvents );
         WXUISIM_TEST( ClickNotOnItem );
         CPPUNIT_TEST( HitTest );
+        CPPUNIT_TEST( ClientData );
 #endif
     CPPUNIT_TEST_SUITE_END();
 
@@ -59,6 +61,7 @@
     void ClickEvents();
     void ClickNotOnItem();
     void HitTest();
+    void ClientData();
     void PseudoTest_OwnerDrawn() { ms_ownerdrawn = true; }
 
     static bool ms_ownerdrawn;
@@ -275,4 +278,22 @@
     CPPUNIT_ASSERT_EQUAL( wxNOT_FOUND, m_list->HitTest(290, 190) );
 }
 
+void ListBoxTestCase::ClientData()
+{
+    const int ClientDataOffset = 5;
+    for (int ClientData = -ClientDataOffset; ClientData <= ClientDataOffset; ++ClientData) {
+        m_list->Append(wxString::Format("ClientData%d", ClientData), (void*)ClientData);	
+    }
+
+    for (int ItemIndex = 0; ItemIndex < m_list->GetCount(); ++ItemIndex) {
+        #if defined(__WXMSW__)
+            SetLastError(ERROR_INVALID_DATA);
+        #endif
+
+        int ClientData = int(m_list->GetClientData(ItemIndex));
+
+        CPPUNIT_ASSERT_EQUAL(ItemIndex-ClientDataOffset, ClientData);
+    }
+}
+
 #endif //wxUSE_LISTBOX

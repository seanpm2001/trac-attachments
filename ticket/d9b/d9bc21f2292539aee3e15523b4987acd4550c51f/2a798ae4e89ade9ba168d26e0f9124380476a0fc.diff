--- /Users/davidsurovell/Documents/wxWorld/wxCheckout/wxWidgets/wxPython/contrib/gizmos/wxCode/src/treelistctrl.cpp	2005-09-23 09:04:43.000000000 -0700
+++ /Users/davidsurovell/ChandRoot/internal/wx/wxPython/contrib/gizmos/wxCode/src/treelistctrl.cpp	2005-10-11 06:17:09.000000000 -0700
@@ -2454,17 +2454,17 @@
         arr.Add(wxEmptyString);
     }
     arr[m_main_column] = text;
     wxTreeListItem *item =
         new wxTreeListItem( this, parent, arr, image, selImage, data );
 
     if ( data != NULL )
     {
-        data->SetId((long)item);
+        data->SetId((void*)item);
     }
 
     parent->Insert( item, previous );
 
     return item;
 }
 
 wxTreeItemId wxTreeListMainWindow::AddRoot(const wxString& text,
@@ -2491,17 +2491,17 @@
         // if root is hidden, make sure we can navigate
         // into children
         m_anchor->SetHasPlus();
         Expand(m_anchor);
     }
 #endif
     if ( data != NULL )
     {
-        data->SetId((long)m_anchor);
+        data->SetId((void*)m_anchor);
     }
 
     if (!HasFlag(wxTR_MULTIPLE))
     {
         m_current = m_key_current = m_anchor;
         m_current->SetHilight( TRUE );
     }
 
@@ -2566,17 +2566,17 @@
 
     return DoInsertItem( parent, parent->GetChildren().Count(), text,
                          image, selImage, data);
 }
 
 void wxTreeListMainWindow::SendDeleteEvent(wxTreeListItem *item)
 {
     wxTreeEvent event( wxEVT_COMMAND_TREE_DELETE_ITEM, m_owner->GetId() );
-    event.SetItem((long) item);
+    event.SetItem((void*)item);
     event.SetEventObject( /*this*/m_owner );
     m_owner->ProcessEvent( event );
 }
 
 void wxTreeListMainWindow::DeleteChildren(const wxTreeItemId& itemId)
 {
     m_dirty = TRUE;     // do this first so stuff below doesn't cause flicker
 
@@ -2643,17 +2643,17 @@
 
     if ( !item->HasPlus() )
         return;
 
     if ( item->IsExpanded() )
         return;
 
     wxTreeEvent event( wxEVT_COMMAND_TREE_ITEM_EXPANDING, m_owner->GetId() );
-    event.SetItem( (long) item );
+    event.SetItem( (void*)item );
     event.SetEventObject( /*this*/m_owner );
 
     if ( m_owner->ProcessEvent( event ) && !event.IsAllowed() )
     {
         // cancelled by program
         return;
     }
 
@@ -2689,17 +2689,17 @@
 void wxTreeListMainWindow::Collapse(const wxTreeItemId& itemId)
 {
     wxTreeListItem *item = (wxTreeListItem*) itemId.m_pItem;
 
     if ( !item->IsExpanded() )
         return;
 
     wxTreeEvent event( wxEVT_COMMAND_TREE_ITEM_COLLAPSING, m_owner->GetId() );
-    event.SetItem( (long) item );
+    event.SetItem( (void*)item );
     event.SetEventObject( /*this*/m_owner );
     if ( m_owner->ProcessEvent( event ) && !event.IsAllowed() )
     {
         // cancelled by program
         return;
     }
 
     item->Collapse();
@@ -2867,18 +2867,18 @@
     {
         // selection change if there is more than one item currently selected
         wxArrayTreeItemIds selected_items;
         if ( GetSelections(selected_items) == 1 )
             return;
     }
 
     wxTreeEvent event( wxEVT_COMMAND_TREE_SEL_CHANGING, m_owner->GetId() );
-    event.SetItem( (long) item );
-    event.SetOldItem( (long) m_current );
+    event.SetItem( (void*)item );
+    event.SetOldItem( (void*)m_current );
     event.SetEventObject( /*this*/m_owner );
     // TODO : Here we don't send any selection mode yet !
 
     if(m_owner->GetEventHandler()->ProcessEvent( event ) && !event.IsAllowed())
         return;
 
     wxTreeItemId parent = GetItemParent( itemId );
     while (parent.IsOk())
@@ -2927,17 +2927,17 @@
 }
 
 void wxTreeListMainWindow::SelectAll(bool extended_select)
 {
     wxCHECK_RET( GetWindowStyleFlag() & wxTR_MULTIPLE, wxT("invalid tree style") );
 
     wxTreeEvent event( wxEVT_COMMAND_TREE_SEL_CHANGING, m_owner->GetId() );
     event.SetItem( GetRootItem() );
-    event.SetOldItem( (long) m_current );
+    event.SetOldItem( (void*) m_current );
     event.SetEventObject( /*this*/m_owner );
     // TODO : Here we don't send any selection mode yet !
 
     if(m_owner->GetEventHandler()->ProcessEvent( event ) && !event.IsAllowed())
         return;
 
     // shift press
     if (!extended_select)
@@ -3792,17 +3792,17 @@
             break;
 #endif // __WXMSW__
 
         case ' ':
         case WXK_RETURN:
             {
                 wxTreeEvent event( wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                                    m_owner->GetId() );
-                event.SetItem( (long) m_current);
+                event.SetItem( (void*) m_current);
                 event.SetEventObject( /*this*/m_owner );
                 m_owner->GetEventHandler()->ProcessEvent( event );
             }
             break;
 
         // backspace goes to the parent, sends "root" activation
         case WXK_BACK:
             {
@@ -4063,17 +4063,17 @@
 
 void wxTreeListMainWindow::Edit( const wxTreeItemId& item )
 {
     if (!item.IsOk()) return;
 
     m_currentEdit = (wxTreeListItem*) item.m_pItem;
 
     wxTreeEvent te( wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT, m_owner->GetId() );
-    te.SetItem( (long) m_currentEdit);
+    te.SetItem( (void*) m_currentEdit);
     te.SetEventObject( /*this*/m_owner );
     m_owner->GetEventHandler()->ProcessEvent( te );
 
     if (!te.IsAllowed()) return;
 
     // We have to call this here because the label in
     // question might just have been added and no screen
     // update taken place.
@@ -4104,17 +4104,17 @@
 {
     Edit( m_current );
 }
 
 void wxTreeListMainWindow::OnRenameAccept()
 {
     // TODO if the validator fails this causes a crash
     wxTreeEvent le( wxEVT_COMMAND_TREE_END_LABEL_EDIT, m_owner->GetId() );
-    le.SetItem( (long) m_currentEdit );
+    le.SetItem( (void*)m_currentEdit );
     le.SetEventObject( /*this*/m_owner );
     le.SetLabel( m_renameRes );
     m_owner->GetEventHandler()->ProcessEvent( le );
 
     if (!le.IsAllowed()) return;
 
     SetItemText( m_currentEdit, m_renameRes );
 }
@@ -4214,17 +4214,17 @@
             return;
         }
 
         wxEventType command = event.RightIsDown()
                               ? wxEVT_COMMAND_TREE_BEGIN_RDRAG
                               : wxEVT_COMMAND_TREE_BEGIN_DRAG;
 
         wxTreeEvent nevent( command,/*ALB*/ m_owner->GetId() );
-        nevent.SetItem( (long) m_current);
+        nevent.SetItem( (void*)m_current);
         nevent.SetEventObject(/*this*/m_owner); // ALB
         nevent.SetPoint(pt);
 
         // by default the dragging is not supported, the user code must
         // explicitly allow the event for it to take place
         nevent.Veto();
 
         if ( m_owner->GetEventHandler()->ProcessEvent(nevent) &&
@@ -4277,17 +4277,17 @@
             m_oldSelection->SetHilight(TRUE);
             RefreshLine(m_oldSelection);
             m_oldSelection = (wxTreeListItem *)NULL;
         }
 
         // generate the drag end event
         wxTreeEvent event(wxEVT_COMMAND_TREE_END_DRAG,/*ALB*/m_owner->GetId());
 
-        event.SetItem( (long) item );
+        event.SetItem( (void*)item );
         event.SetPoint( wxPoint(x, y) );
         event.SetEventObject(/*this*/m_owner);
 
         (void)m_owner->GetEventHandler()->ProcessEvent(event);
 
         m_isDragging = FALSE;
         m_dropTarget = (wxTreeListItem *)NULL;
 
@@ -4305,17 +4305,17 @@
 
         if ( item == NULL ) return;  /* we hit the blank area */
 
         if ( event.RightDown() )
         {
             SetFocus();
             wxTreeEvent nevent(wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK,
                                m_owner->GetId());
-            nevent.SetItem( (long) item );
+            nevent.SetItem( (void*)item );
             int nx, ny;
             CalcScrolledPosition(x, y, &nx, &ny);
             nevent.SetPoint( wxPoint(nx, ny));
             nevent.SetEventObject(/*this*/m_owner);
             m_owner->GetEventHandler()->ProcessEvent(nevent);
         }
         else if ( event.LeftUp() )
         {
@@ -4372,17 +4372,17 @@
             {
                 // double clicking should not start editing the item label
                 m_renameTimer->Stop();
                 m_lastOnSame = FALSE;
 
                 // send activate event first
                 wxTreeEvent nevent( wxEVT_COMMAND_TREE_ITEM_ACTIVATED,
                                     m_owner->GetId() );
-                nevent.SetItem( (long) item );
+                nevent.SetItem( (void*)item );
                 int nx, ny;
                 CalcScrolledPosition(x, y, &nx, &ny);
                 nevent.SetPoint( wxPoint(nx, ny) );
                 nevent.SetEventObject( /*this*/m_owner );
                 if ( !m_owner->GetEventHandler()->ProcessEvent( nevent ) )
                 {
                     // if the user code didn't process the activate event,
                     // handle it ourselves by toggling the item when it is

 	  	 

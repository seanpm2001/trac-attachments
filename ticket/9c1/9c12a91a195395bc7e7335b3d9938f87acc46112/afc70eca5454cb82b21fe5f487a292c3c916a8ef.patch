Index: include/wx/colour.h
===================================================================
--- include/wx/colour.h	(revision 51327)
+++ include/wx/colour.h	(working copy)
@@ -35,7 +35,7 @@
     wxColour(const wchar_t *colourName) { Init(); Set(colourName); }
 
 
-// flags for wxColour -> wxString conversion (see wxColour::GetAsString)
+// flags for wxColour -> wxString conversion (see wxColour::ToString)
 #define wxC2S_NAME              1   // return colour name, when possible
 #define wxC2S_CSS_SYNTAX        2   // return colour in rgb(r,g,b) syntax
 #define wxC2S_HTML_SYNTAX       4   // return colour in #rrggbb syntax
@@ -113,7 +113,8 @@
         { return wxALPHA_OPAQUE ; }
 
     // implemented in colourcmn.cpp
-    virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;
+    virtual wxString ToString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;
+    wxDEPRECATED(inline wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const);
 
 #if !wxCOLOUR_IS_GDIOBJECT
     virtual bool IsOk() const= 0;
@@ -161,7 +162,12 @@
 #endif
 };
 
+inline wxString wxColourBase::GetAsString(long flags) const
+{
+   return ToString(flags);
+}
 
+
 // wxColour <-> wxString utilities, used by wxConfig, defined in colourcmn.cpp
 WXDLLIMPEXP_CORE wxString wxToString(const wxColourBase& col);
 WXDLLIMPEXP_CORE bool wxFromString(const wxString& str, wxColourBase* col);
Index: src/common/clrpickercmn.cpp
===================================================================
--- src/common/clrpickercmn.cpp	(revision 51327)
+++ src/common/clrpickercmn.cpp	(working copy)
@@ -55,7 +55,7 @@
                         long style, const wxValidator& validator,
                         const wxString &name )
 {
-    if (!wxPickerBase::CreateBase(parent, id, col.GetAsString(), pos, size,
+    if (!wxPickerBase::CreateBase(parent, id, col.ToString(), pos, size,
                                   style, validator, name))
         return false;
 
@@ -127,7 +127,7 @@
     //       which will trigger a unneeded UpdateFromTextCtrl(); thus before using
     //       SetValue() we set the m_bIgnoreNextTextCtrlUpdate flag...
     m_bIgnoreNextTextCtrlUpdate = true;
-    m_text->SetValue(M_PICKER->GetColour().GetAsString());
+    m_text->SetValue(M_PICKER->GetColour().ToString());
 }
 
 
Index: src/common/cmndata.cpp
===================================================================
--- src/common/cmndata.cpp	(revision 51327)
+++ src/common/cmndata.cpp	(working copy)
@@ -130,7 +130,7 @@
 
         const wxColour& clr = m_custColours[i];
         if ( clr.IsOk() )
-            str += clr.GetAsString(wxC2S_HTML_SYNTAX);
+            str += clr.ToString(wxC2S_HTML_SYNTAX);
     }
 
     return str;
Index: src/common/colourcmn.cpp
===================================================================
--- src/common/colourcmn.cpp	(revision 51327)
+++ src/common/colourcmn.cpp	(working copy)
@@ -99,7 +99,7 @@
     return false;
 }
 
-wxString wxColourBase::GetAsString(long flags) const
+wxString wxColourBase::ToString(long flags) const
 {
     wxString colName;
 
@@ -167,8 +167,8 @@
 // wxColour <-> wxString utilities, used by wxConfig
 wxString wxToString(const wxColourBase& col)
 {
-    return col.IsOk() ? col.GetAsString(wxC2S_CSS_SYNTAX)
-                      : wxString();
+    return col.IsOk() ? col.ToString(wxC2S_CSS_SYNTAX)
+                      : wxEmptyString;
 }
 
 bool wxFromString(const wxString& str, wxColourBase *col)
Index: src/msw/colour.cpp
===================================================================
--- src/msw/colour.cpp	(revision 51327)
+++ src/msw/colour.cpp	(working copy)
@@ -40,7 +40,7 @@
 
 template<> void wxStringWriteValue(wxString &s , const wxColour &data )
 {
-    s = data.GetAsString(wxC2S_HTML_SYNTAX);
+    s = data.ToString(wxC2S_HTML_SYNTAX);
 }
 
 wxTO_STRING_IMP( wxColour )

 	  	 

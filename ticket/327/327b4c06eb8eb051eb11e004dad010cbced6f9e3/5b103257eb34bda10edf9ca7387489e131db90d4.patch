Index: src/unix/gsocket.c
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWidgets/src/unix/gsocket.c,v
retrieving revision 1.84
diff -u -r1.84 gsocket.c
--- src/unix/gsocket.c	2004/04/18 16:27:29	1.84
+++ src/unix/gsocket.c	2004/04/19 22:06:37
@@ -800,27 +800,26 @@
 
   assert(socket != NULL);
 
-  /* When using CFSocket we MUST NOT reenable events until we finish reading */
-#ifndef __DARWIN__
-  /* Reenable INPUT events */
-  _GSocket_Enable(socket, GSOCK_INPUT);
-#endif
-
   if (socket->m_fd == INVALID_SOCKET || socket->m_server)
   {
     socket->m_error = GSOCK_INVSOCK;
     return -1;
   }
 
+  /* Disable events during query of socket status */
+  _GSocket_Disable(socket, GSOCK_INPUT);
+    
   /* If the socket is blocking, wait for data (with a timeout) */
   if (_GSocket_Input_Timeout(socket) == GSOCK_TIMEDOUT)
-    return -1;
-
-  /* Read the data */
-  if (socket->m_stream)
-    ret = _GSocket_Recv_Stream(socket, buffer, size);
-  else
-    ret = _GSocket_Recv_Dgram(socket, buffer, size);
+    /* We no longer return here immediately, otherwise socket events would not be re-enabled! */
+    ret = -1;
+  else {
+    /* Read the data */
+    if (socket->m_stream)
+      ret = _GSocket_Recv_Stream(socket, buffer, size);
+    else
+      ret = _GSocket_Recv_Dgram(socket, buffer, size);
+  }
     
   if (ret == -1)
   {
@@ -830,11 +829,9 @@
       socket->m_error = GSOCK_IOERR;
   }
   
-#ifdef __DARWIN__
-  /* Reenable INPUT events */
+  /* Enable events again now that we are done processing */
   _GSocket_Enable(socket, GSOCK_INPUT);
-#endif
-
+  
   return ret;
 }
 

 	  	 

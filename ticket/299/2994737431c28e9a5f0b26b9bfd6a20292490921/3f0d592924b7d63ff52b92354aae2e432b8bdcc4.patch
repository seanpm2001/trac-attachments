diff -urN wx2.3orig/include/wx/generic/gridctrl.h wx2.3/include/wx/generic/gridctrl.h
--- wx2.3orig/include/wx/generic/gridctrl.h	Sun Apr 29 12:27:32 2001
+++ wx2.3/include/wx/generic/gridctrl.h	Sat Apr 28 20:06:58 2001
@@ -98,4 +98,46 @@
     long int   m_startint;
 };
 
+
+class wxGridCellAutoWrapStringEditor : public wxGridCellTextEditor { 
+	public: 
+	wxGridCellAutoWrapStringEditor() : wxGridCellTextEditor() { } 
+    virtual void Create(wxWindow* parent,
+                        wxWindowID id,
+                        wxEvtHandler* evtHandler);
+    
+	virtual wxGridCellAutoWrapStringEditor *Clone() const
+        { return new wxGridCellAutoWrapStringEditor; }
+
+};
+
+
+class wxGridCellAutoWrapStringRenderer : public wxGridCellStringRenderer { 
+	public: 
+	wxGridCellAutoWrapStringRenderer() : wxGridCellStringRenderer() { } 
+    
+	virtual void Draw(wxGrid& grid,
+                      wxGridCellAttr& attr,
+                      wxDC& dc,
+                      const wxRect& rect,
+                      int row, int col,
+                      bool isSelected);
+
+    virtual wxSize GetBestSize(wxGrid& grid,
+                               wxGridCellAttr& attr,
+                               wxDC& dc,
+                               int row, int col);
+     
+    virtual wxGridCellAutoWrapStringRenderer *Clone() const
+        { return new wxGridCellAutoWrapStringRenderer; }
+
+	private:
+    		wxArrayString GetTextLines( wxGrid& grid,
+                      			    	wxDC& dc,
+                      			    	wxGridCellAttr& attr,
+					    				const wxRect& rect,
+					    				int row, int col);
+
+};
+
 #endif //__gridctrl_h__
diff -urN wx2.3orig/src/generic/gridctrl.cpp wx2.3/src/generic/gridctrl.cpp
--- wx2.3orig/src/generic/gridctrl.cpp	Sun Apr 29 12:27:32 2001
+++ wx2.3/src/generic/gridctrl.cpp	Sat Apr 28 20:06:47 2001
@@ -255,3 +255,120 @@
     }
     return changed;
 }
+
+
+void
+wxGridCellAutoWrapStringEditor::Create(wxWindow* parent,
+                                   wxWindowID id,
+                                   wxEvtHandler* evtHandler) {
+
+  
+  m_control = new wxTextCtrl(parent, id, wxEmptyString,
+                               wxDefaultPosition, wxDefaultSize
+                               , wxTE_MULTILINE ); 
+    
+
+  wxGridCellEditor::Create(parent, id, evtHandler);
+
+
+}
+
+void 
+wxGridCellAutoWrapStringRenderer::Draw(wxGrid& grid,
+                      wxGridCellAttr& attr,
+                      wxDC& dc,
+                      const wxRect& rectCell,
+                      int row, int col,
+                      bool isSelected) {
+
+
+    wxGridCellRenderer::Draw(grid, attr, dc, rectCell, row, col, isSelected);
+
+    // now we only have to draw the text
+    SetTextColoursAndFont(grid, attr, dc, isSelected);
+
+    int horizAlign, vertAlign;
+    attr.GetAlignment(&horizAlign, &vertAlign);
+
+    wxRect rect = rectCell;
+    rect.Inflate(-1);
+
+    grid.DrawTextRectangle(dc, GetTextLines(grid,dc,attr,rect,row,col),
+                           rect, horizAlign, vertAlign);
+}
+
+
+wxArrayString
+wxGridCellAutoWrapStringRenderer::GetTextLines( wxGrid& grid,
+               			    wxDC& dc,
+                      	           wxGridCellAttr& attr,
+				   const wxRect& rect,
+				   int row, int col) {
+	
+	wxString  data = grid.GetCellValue(row, col);
+
+	wxArrayString lines;
+    dc.SetFont(attr.GetFont());
+        
+    //Taken from wxGrid again!
+    wxCoord x = 0, y = 0, curr_x = 0;
+    wxCoord max_x = rect.GetWidth();
+    
+    dc.SetFont(attr.GetFont());
+    wxStringTokenizer tk(data , _T(" \n\t\r"));
+    wxString thisline("");
+    
+    while ( tk.HasMoreTokens() )
+    {
+    	wxString tok = tk.GetNextToken();
+    //FIXME: this causes us to print an extra unnecesary
+    //       space at the end of the line. But it
+    //       is invisible , simplifies the size calculation
+    //       and ensures tokens are seperated in the display
+	tok += _T(" ");
+	
+        dc.GetTextExtent(tok, &x, &y);
+        if ( curr_x + x > max_x) {
+            lines.Add( wxString(thisline) );
+	    thisline = tok;
+	    curr_x=x;
+	} else {
+            thisline+= tok;
+	    curr_x += x;
+	}
+	 
+    }
+    //Add last line
+    lines.Add( wxString(thisline) );
+
+    return lines;
+}
+
+
+wxSize 
+wxGridCellAutoWrapStringRenderer::GetBestSize(wxGrid& grid,
+                               wxGridCellAttr& attr,
+                               wxDC& dc,
+                               int row, int col) { 
+
+	
+	
+	int x,y, height , width = grid.GetColSize(col) -10;
+	int count =250; //Limit iterations..
+	
+	wxRect  rect(0,0,width,10);
+	//M is a nice large character 'y' gives descender!.
+    dc.GetTextExtent("My", &x, &y);	
+
+	do {
+		width+=10;
+		rect.SetWidth(width);
+		height = y *( GetTextLines(grid,dc,attr,rect,row,col).GetCount());
+		count--;
+	// Search for a shape no taller than the golden ratio.
+	} while (count && (width  < (height*1.68)) );
+
+	
+	return wxSize(width,height); 
+}
+
--- wx2.3orig/samples/newgrid/griddemo.cpp	Mon Jan  8 13:35:16 2001
+++ wx2.3/samples/newgrid/griddemo.cpp	Sun Apr 29 12:53:18 2001
@@ -35,6 +35,7 @@
 #include "wx/colordlg.h"
 
 #include "wx/grid.h"
+#include "wx/generic/gridctrl.h"
 
 #include "griddemo.h"
 
@@ -236,7 +237,10 @@
     grid->SetRowSize( 0, 60 );
     grid->SetCellValue( 0, 0, "Ctrl+Home\nwill go to\nthis cell" );
 
-    grid->SetCellValue( 0, 1, "Blah" );
+    grid->SetCellValue( 0, 1, "A long piece of text to demonstrate wrapping." );
+    grid->SetCellRenderer(0 , 1, new wxGridCellAutoWrapStringRenderer);
+    grid->SetCellEditor( 0,  1 , new wxGridCellAutoWrapStringEditor);
+    
     grid->SetCellValue( 0, 2, "Blah" );
     grid->SetCellValue( 0, 3, "Read only" );
     grid->SetReadOnly( 0, 3 );

 	  	 

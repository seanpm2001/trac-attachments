#!/usr/bin/env python
# generated by wxGlade 0.3.1 on C:\Documents and Settings\rzoerner\My Documents\RZA\test\textctrltest.py from source "Tue Jan 20 07:38:10 2004"

import os,string,sys
from wxPython.wx import *
from wxPython.help import *

# define variables
ID_Splitter=wxNewId()
ID_Notebook=wxNewId()
ID_Toolbar=wxNewId()

ID_New=wxNewId()
ID_Open=wxNewId()
ID_Close=wxNewId()
ID_Save=wxNewId()
ID_SaveAs=wxNewId()
ID_PageSetup=wxNewId()
ID_PrintPreview=wxNewId()
ID_Print=wxNewId()
ID_Exit=wxNewId()

CTRL={
    'new (1)'           : ""}
DIR={
    'new (1)'           : "none"}
FILE={
    'new (1)'           : "none"}
PANE={
    'pane'           : "none"}


class MainFrame(wxFrame):
    def __init__(self, *args, **kwds):
        # begin init: MainFrame.__init__
        kwds["style"] = wxDEFAULT_FRAME_STYLE
        wxFrame.__init__(self, *args, **kwds)
        self.window_1 = wxSplitterWindow(self, ID_Splitter, style=wxSP_3D|wxSP_FULLSASH)
        self.window_1_pane_1 = wxPanel(self.window_1, -1)
        
# Menu Bar init
        self.SetMenuBar(WriterMenu())
        # end Menu Bar
# Status Bar init
# Tool Bar init
# Displayed Panel init
        self.displaypanel = WriterPanel(self.window_1, -1)
        self.window_1_pane_2 = self.displaypanel
        # end Displayed Panel
        
        self.__set_properties()
        self.__do_layout()
        
# Universal event handling at the frame level 
        EVT_SPLITTER_SASH_POS_CHANGING(self, ID_Splitter, self.OnVeto)
        EVT_SPLITTER_DOUBLECLICKED(self, ID_Splitter, self.OnVeto)
        EVT_NOTEBOOK_PAGE_CHANGED(self, ID_Notebook, self.OnPageChanged)
        # end init
        

    def OnPageChanged(self, event):
        old = event.GetOldSelection()
        new = event.GetSelection()
        sel = self.notebook_1.GetSelection()
        event.Skip()
        
    def OnVeto(self, event):
        self.e = event
        self.e.Veto()
        
    def __set_properties(self):
        # begin properties: MainFrame.__set_properties

# Status Bar properties
# Notebook properties
#        self.notebook_1.SetSize((100, 166))
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 100)
        # end properties
        
    def __do_layout(self):
        # begin layout: MainFrame.__do_layout
        global PANEL
        sizer_1 = wxBoxSizer(wxVERTICAL)
        self.window_1_pane_1.SetAutoLayout(1)
        sizer_1.Add(self.window_1, 1, wxEXPAND, 3)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_1)
        self.SetSize((621, 461))
        self.Layout()
    # end MainFrame layout

# The SWAP definition is normally used to load panel, menu, toolbar, and event handlers - which are
# imported from outside modules. It is called by providing the path to the new (replacement)
# directory (package), script(pmod), panel(pclass), menu, toolbar and event handler to use.
##    def Swap(self, package='package', pmod='module', pclass='class', menubar='menubar', toolbar='toolbar', events='events'):
##        global PANEL
##        frame_1, window_1, = PANEL['frame'],PANEL['window']
##        if package != 'package':
##            PANEL['package'] = package
##        if pmod != 'module':
##            PANEL['module'] = pmod
##        if pclass != 'class':
##            self.oldpanel, PANEL['class'] = PANEL['panel'], pclass
##            exec 'import ' + PANEL['package'] + "." + PANEL['module']
##            self.newtarget = eval(PANEL['package'] + "." + PANEL['module'] + "." + PANEL['class'])
##            self.newpanel = self.newtarget(PANEL, window_1, -1)
##            PANEL['panel']= self.newpanel
##            window_1.ReplaceWindow(self.oldpanel, self.newpanel)
##            self.oldpanel.Destroy()
##        if menubar != 'menubar':
##            PANEL['menubar'] = menubar
##            exec 'import ' + PANEL['package'] + "." + PANEL['module']
##            self.newmenutarget = eval(PANEL['package'] + "." + PANEL['module'] + "." + PANEL['menubar'])
##            self.SetMenuBar(self.newmenutarget())
##        if toolbar != 'toolbar':
##            PANEL['toolbar'] = toolbar
##            exec 'import ' + PANEL['package'] + "." + PANEL['module']
##            self.newtooltarget = eval(PANEL['package'] + "." + PANEL['module'] + "." + PANEL['toolbar'])
##            self.toolbar = self.newtooltarget(self, ID_Toolbar)
##            self.SetToolBar(self.toolbar)
##            self.toolbar.Realize()
##        if events != 'events':
##            PANEL['events'] = events
##        frame_1.PopEventHandler()
##        self.neweventtarget = eval(PANEL['package'] + "." + PANEL['module'] + "." + PANEL['events'])
##        frame_1.PushEventHandler(self.neweventtarget(PANEL))
##        self.Layout()
        
# end of class MainFrame


class WriterMenu(wxMenuBar):
    def __init__(self, *args, **kwds):
        # begin menubar: WriterMenu.__init__
        wxMenuBar.__init__(self, *args, **kwds)
        self.File = wxMenu()
        FileNew=wxMenuItem(self.File, ID_New, "&New\t^N", "Create a new file", wxITEM_NORMAL)
        self.File.AppendItem(FileNew)
        FileOpen=wxMenuItem(self.File, ID_Open, "&Open\t^O", "Open a saved file", wxITEM_NORMAL)
        self.File.AppendItem(FileOpen)
        FileClose=wxMenuItem(self.File, ID_Close, "&Close", "Close the open file", wxITEM_NORMAL)
        self.File.AppendItem(FileClose)
        self.File.AppendSeparator()
        FileSave=wxMenuItem(self.File, ID_Save, "&Save\t^S", "Save the file to disk", wxITEM_NORMAL)
        self.File.AppendItem(FileSave)
        FileSaveAs=wxMenuItem(self.File, ID_SaveAs, "Save &As...", "Save using a different name", wxITEM_NORMAL)
        self.File.AppendItem(FileSaveAs)
        self.File.AppendSeparator()
        FilePageSetup=wxMenuItem(self.File, ID_PageSetup, "Page Set&up...", "Configure printing parameters", wxITEM_NORMAL)
        self.File.AppendItem(FilePageSetup)
        FilePrintPreview=wxMenuItem(self.File, ID_PrintPreview, "Print Pre&view", "Preview the printer image on-screen", wxITEM_NORMAL)
        self.File.AppendItem(FilePrintPreview)
        FilePrint=wxMenuItem(self.File, ID_Print, "&Print\t^P", "", wxITEM_NORMAL)
        self.File.AppendItem(FilePrint)
        self.File.AppendSeparator()
        FileExit=wxMenuItem(self.File, ID_Exit, "E&xit", "Exit the file", wxITEM_NORMAL)
        self.File.AppendItem(FileExit)
        self.Append(self.File, "&File")
        # end WriterMenu


class WriterEvents(wxEvtHandler):
    global CTRL, DIR, FILE, PANE
    def __init__(self, PANE):
        self.pane = PANE['pane']
        self.frame = PANE['frame']
        wxEvtHandler.__init__(self)
        self.path=os.path.dirname(__file__)
        # begin event-handling id assignments        
        EVT_MENU(self, ID_New, self.OnFileNew)
        EVT_MENU(self, ID_Open, self.OnFileOpen)
        EVT_MENU(self, ID_Close, self.OnFileClose)
        EVT_MENU(self, ID_Save, self.OnFileSave)
        EVT_MENU(self, ID_SaveAs, self.OnFileSaveAs)
        EVT_MENU(self, ID_Exit, self.OnFileExit)
        # end event-handling id assignments

# Menu Event-Handlers        

# File
    def OnFileNew(self, event):
        """File > New"""
        try:
            self.pages = self.pages + 1
        except:
            self.pages = 2 # the calling class creates a notebook with one
                           # page already in it named "new (1)". It can't
                           # create itself empty and call OnFileNew because
                           # of sequence-of-operation issues.
        self.notebook_1_pane_1 = wxPanel(self.pane.notebook_1, -1)
        self.text_ctrl = wxTextCtrl(self.notebook_1_pane_1, -1, "", style=wxTE_MULTILINE|wxTE_RICH)
        sizer_2 = wxBoxSizer(wxHORIZONTAL)
        sizer_2.Add(self.text_ctrl, 1, wxEXPAND, 0)
        self.notebook_1_pane_1.SetAutoLayout(1)
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_2.Fit(self.notebook_1_pane_1)
        sizer_2.SetSizeHints(self.notebook_1_pane_1)
        self.tab = "new (" + repr(self.pages) + ")"
        self.pane.notebook_1.AddPage(self.notebook_1_pane_1, self.tab)
        # assign variables - I really need to learn how to use arrays !!
        CTRL[self.tab] = self.text_ctrl
        DIR[self.tab] = "none"
        FILE[self.tab] = "none"
        
    def OnFileOpen(self, event):
        """File > Open file(s)"""
        defaultDir="" # os.path.join(PROG['root'],"data")
        dlg = wxFileDialog(self.frame, "Choose a file",
            defaultDir=defaultDir, defaultFile="",
            wildcard="Writer Files(*.wtr)|*.wtr|Text Files(*.txt;*.asc)|*.txt;*.asc|All files (*.*)|*.*",
            style=wxOPEN|wxMULTIPLE)
        if dlg.ShowModal() == wxID_OK:
            self.page = self.pane.notebook_1.GetSelection()
            self.tab = self.pane.notebook_1.GetPageText(self.page)
            self.ctrl = CTRL[self.tab]
            # if the current document is blank, replace it with the loaded file
            if self.ctrl.GetLastPosition() == 0:
                self.pane.notebook_1.RemovePage(self.page)
            fileList = dlg.GetPaths()
            for f in fileList:
                self.notebook_1_pane_1 = wxPanel(self.pane.notebook_1, -1)
                self.text_ctrl = wxTextCtrl(self.notebook_1_pane_1, -1, "", style=wxTE_MULTILINE|wxTE_RICH)
                sizer_2 = wxBoxSizer(wxHORIZONTAL)
                sizer_2.Add(self.text_ctrl, 1, wxEXPAND, 0)
                self.notebook_1_pane_1.SetAutoLayout(1)
                self.notebook_1_pane_1.SetSizer(sizer_2)
                sizer_2.Fit(self.notebook_1_pane_1)
                sizer_2.SetSizeHints(self.notebook_1_pane_1)
                self.name, self.ext = os.path.splitext(FILE[self.tab])
                self.pane.notebook_1.AddPage(self.notebook_1_pane_1, self.name)
                # assign variables
                CTRL[self.name] = self.text_ctrl
                DIR[self.name] = dlg.GetDirectory()
                FILE[self.name] = dlg.GetFilename()
                self.text_ctrl.LoadFile(f)
        dlg.Destroy()
        self.pane.notebook_1.Refresh()
        
    def OnFileClose(self,event):
        """File > Close file"""
        self.page = self.pane.notebook_1.GetSelection()
        self.pane.notebook_1.RemovePage(self.page)
        # need to test if last document is closed, either
        # auto-execute OnFileNew, or close the Writer app 
        
    def OnFileSave(self, event):
        """File > Save file"""
        self.page = self.pane.notebook_1.GetSelection()
        self.tab = self.pane.notebook_1.GetPageText(self.page)
        if FILE[self.tab]=="none":
            self.OnFileSaveAs(event)
        else:
            path = os.path.join(DIR[self.tab], FILE[self.tab])
            self.ctrl = CTRL[self.tab]
            self.ctrl.SaveFile(path)
        
    def OnFileSaveAs(self, event):
        """File > Save file as"""
        self.page = self.pane.notebook_1.GetSelection()
        self.tab = self.pane.notebook_1.GetPageText(self.page)
        self.ctrl = CTRL[self.tab]
        defaultDir="" #os.path.join(PROG['root'],"data")
        defaultFile=""
        dlg = wxFileDialog(self.frame, "Save As", defaultDir=defaultDir,defaultFile=defaultFile,
            wildcard="Writer Files(*.wtr)|*.wtr|Text Files(*.txt)|*.txt|All files (*.*)|*.*",
            style=wxSAVE|wxOVERWRITE_PROMPT|wxCHANGE_DIR)
        if dlg.ShowModal() == wxID_OK:
            path = dlg.GetPath()
            # assign variables
            DIR[self.tab] = dlg.GetDirectory()
            FILE[self.tab] = dlg.GetFilename()
            self.name, self.ext = os.path.splitext(FILE[self.tab])
            self.ctrl.SaveFile(path)
            self.pane.notebook_1.SetPageText(self.page, self.name)
        dlg.Destroy()
        self.pane.notebook_1.Refresh()
        
##    def OnFilePageSetup(self,event): # This part works (requires wiki demo "printer.py")
##        """File > Page Setup"""
##        self.frame.printer.PageSetup() 
##        
##    def OnFilePrintPreview(self,event): #This WIKI demo code doesn't work
##        """File > Print Preview"""
##        self.page = self.pane.notebook_1.GetSelection()
##        self.tab = self.pane.notebook_1.GetPageText(self.page)
##        self.ctrl = CTRL[self.tab]
##        self.end = self.ctrl.GetLastPosition()
##        self.printtext = self.ctrl.GetRange(0, self.end)
##        self.frame.printer.PreviewText(self.printtext, self.tab)
##        
##    def OnFilePrint(self,event): #This WIKI demo code doesn't work
##        """File > Print"""
##        self.page = self.pane.notebook_1.GetSelection()
##        self.tab = self.pane.notebook_1.GetPageText(self.page)
##        self.ctrl = CTRL[self.tab]
##        self.end = self.ctrl.GetLastPosition()
##        self.printtext = self.ctrl.GetRange(0, self.end)
##        self.frame.printer.Print(self.printtext,self.tab)
                
    def OnFileExit(self,event):
        """File > Exit"""
        self.Close()

class WriterPanel(wxPanel):
    def __init__(self, *args, **kwds):
        global CTRL, DIR, FILE
        # begin init: WriterPanel.__init__
        kwds["style"] = wxTAB_TRAVERSAL
        wxPanel.__init__(self, *args, **kwds)
        self.notebook_1 = wxNotebook(self, -1, style=0)
        self.notebook_1_pane_1 = wxPanel(self.notebook_1, -1)
        self.text_ctrl = wxTextCtrl(self.notebook_1_pane_1, -1, "", style=wxTE_MULTILINE|wxTE_RICH)

        self.__set_properties()
        self.__do_layout()
        # end init

    def __set_properties(self):
        # begin properties: WriterPanel.__set_properties
        pass
        # end properties

    def __do_layout(self):
        # begin layout: WriterPanel.__do_layout
        sizer_1 = wxBoxSizer(wxHORIZONTAL)
        sizer_2 = wxBoxSizer(wxHORIZONTAL)
        sizer_2.Add(self.text_ctrl, 1, wxEXPAND, 0)
        self.notebook_1_pane_1.SetAutoLayout(1)
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_2.Fit(self.notebook_1_pane_1)
        sizer_2.SetSizeHints(self.notebook_1_pane_1)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "new (1)")
        CTRL['new (1)'] = self.text_ctrl
        sizer_1.Add(wxNotebookSizer(self.notebook_1), 1, wxEXPAND, 0)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        # end layout

# end of class WriterPanel

class Main(wxApp):
    def OnInit(self):
        wxInitAllImageHandlers()
        frame_1 = MainFrame(None, -1, "")
        PANE['frame'] = frame_1
        PANE['pane'] = frame_1.window_1_pane_2
#        frame_1.Leftside()
# This normally sets up the left pane of the splitter-window
# with another notebook used to select modules from a database
        self.SetTopWindow(frame_1)
        frame_1.PushEventHandler(WriterEvents(PANE))# normally passes PANEL as a substitute for global variables
                                                        # since eventhandlers are normally in different scripts
        frame_1.Show(1)
        frame_1.Centre()
        frame_1.SetSize((630, 460))
        return 1

# end of class Main

if __name__ == "__main__":
    app = Main(0)
    app.MainLoop()


 	  	 

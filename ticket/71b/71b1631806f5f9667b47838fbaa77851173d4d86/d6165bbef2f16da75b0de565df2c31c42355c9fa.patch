cvs -z9 -Q diff -R -U2 include/wx/event.h 
Index: include/wx/event.h
===================================================================
RCS file: /home/wxcvs/wxWindows/include/wx/event.h,v
retrieving revision 1.146
diff -U2 -r1.146 event.h
--- include/wx/event.h	9 Jul 2002 23:33:28 -0000	1.146
+++ include/wx/event.h	19 Jul 2002 11:17:05 -0000
@@ -547,4 +547,7 @@
     wxScrollWinEvent(wxEventType commandType = wxEVT_NULL,
                      int pos = 0, int orient = 0);
+	wxScrollWinEvent(const wxScrollWinEvent & event) : wxEvent(event)
+		{	m_commandInt = event.m_commandInt;
+			m_extraLong = event.m_extraLong;	}
 
     int GetOrientation() const { return (int) m_extraLong ; }
@@ -604,10 +607,11 @@
 class WXDLLEXPORT wxMouseEvent : public wxEvent
 {
+private:
+    wxMouseEvent& operator=(const wxMouseEvent& event);
+	
 public:
     wxMouseEvent(wxEventType mouseType = wxEVT_NULL);
-    wxMouseEvent(const wxMouseEvent& event) { Assign(event); }
-
-    wxMouseEvent& operator=(const wxMouseEvent& event)
-        { Assign(event); return *this; }
+    wxMouseEvent(const wxMouseEvent& event)	: wxEvent(event)
+		{ Assign(event); }
 
     // Was it a button event? (*doesn't* mean: is any button *down*?)
@@ -777,4 +781,9 @@
         { }
 
+	wxSetCursorEvent(const wxSetCursorEvent & event) : wxEvent(event)
+		{	m_x = event.m_x;
+			m_y = event.m_y;
+			m_cursor = event.m_cursor;	}
+
     wxCoord GetX() const { return m_x; }
     wxCoord GetY() const { return m_y; }
@@ -807,4 +816,20 @@
 public:
     wxKeyEvent(wxEventType keyType = wxEVT_NULL);
+	wxKeyEvent(const wxKeyEvent& evt) : wxEvent(evt)
+    {
+        m_x = evt.m_x;
+        m_y = evt.m_y;
+		
+        m_keyCode = evt.m_keyCode;
+		
+        m_controlDown = evt.m_controlDown;
+        m_shiftDown = evt.m_shiftDown;
+        m_altDown = evt.m_altDown;
+        m_metaDown = evt.m_metaDown;
+        m_scanCode = evt.m_scanCode;
+        m_rawCode = evt.m_rawCode;
+        m_rawFlags = evt.m_rawFlags;
+    }
+	
 
     // Find state of shift/control keys
@@ -911,5 +936,9 @@
           m_size(sz)
         { }
-
+    wxSizeEvent(const wxSizeEvent & event)
+		: wxEvent(event),
+		  m_size(event.m_size)
+		{ }
+	
     wxSize GetSize() const { return m_size; }
 
@@ -939,5 +968,9 @@
           m_pos(pos)
         { }
-
+    wxMoveEvent(const wxMoveEvent& event)
+        : wxEvent(event),
+		  m_pos(event.m_pos)
+	{ }
+	
     wxPoint GetPosition() const { return m_pos; }
 
@@ -1093,5 +1126,8 @@
         : wxEvent(Id, type)
         { m_active = active; }
-
+    wxActivateEvent(const wxActivateEvent& event)
+        : wxEvent(event)
+	{ m_active = event.m_active; }
+	
     bool GetActive() const { return m_active; }
 
@@ -1136,5 +1172,8 @@
         : wxEvent(id, type)
         { m_menuId = id; }
-
+    wxMenuEvent(const wxMenuEvent & event)
+        : wxEvent(event)
+	{ m_menuId = event.m_menuId; }
+	
     // only for wxEVT_MENU_HIGHLIGHT
     int GetMenuId() const { return m_menuId; }
@@ -1171,5 +1210,15 @@
 #endif // WXWIN_COMPATIBILITY
     }
-
+    wxCloseEvent(const wxCloseEvent & event)
+        : wxEvent(event),
+		m_loggingOff(event.m_loggingOff),
+		m_veto(event.m_veto),
+		m_canVeto(event.m_canVeto)
+    {
+#if WXWIN_COMPATIBILITY
+        m_force = event.m_force;
+#endif // WXWIN_COMPATIBILITY
+	}
+	
     void SetLoggingOff(bool logOff) { m_loggingOff = logOff; }
     bool GetLoggingOff() const { return m_loggingOff; }
@@ -1221,5 +1270,8 @@
         : wxEvent(id, wxEVT_SHOW)
         { m_show = show; }
-
+    wxShowEvent(const wxShowEvent & event)
+        : wxEvent(event)
+	{ m_show = event.m_show; }
+	
     void SetShow(bool show) { m_show = show; }
     bool GetShow() const { return m_show; }
@@ -1244,5 +1296,8 @@
         : wxEvent(id, wxEVT_ICONIZE)
         { m_iconized = iconized; }
-
+    wxIconizeEvent(const wxIconizeEvent & event)
+        : wxEvent(event)
+	{ m_iconized = event.m_iconized; }
+	
     // return true if the frame was iconized, false if restored
     bool Iconized() const { return m_iconized; }
@@ -1319,5 +1374,13 @@
     {
     }
-
+    wxJoystickEvent(const wxJoystickEvent & event)
+		: wxEvent(event),
+		  m_pos(event.m_pos),
+		  m_zPosition(event.m_zPosition),
+		  m_buttonChange(event.m_buttonChange),
+		  m_buttonState(event.m_buttonState),
+		  m_joyStick(event.m_joyStick)
+    { }
+	
     wxPoint GetPosition() const { return m_pos; }
     int GetZPosition() const { return m_zPosition; }
@@ -1433,5 +1496,14 @@
         m_setChecked = FALSE;
     }
-
+    wxUpdateUIEvent(const wxUpdateUIEvent & event)
+        : wxCommandEvent(event),
+		  m_checked(event.m_checked),
+		  m_enabled(event.m_enabled),
+		  m_setEnabled(event.m_setEnabled),
+		  m_setText(event.m_setText),
+		  m_setChecked(event.m_setChecked),
+		  m_text(event.m_text)
+	{ }
+	
     bool GetChecked() const { return m_checked; }
     bool GetEnabled() const { return m_enabled; }
@@ -1568,5 +1640,9 @@
           m_paletteRealized(FALSE)
         { }
-
+    wxQueryNewPaletteEvent(const wxQueryNewPaletteEvent & event)
+        : wxEvent(event),
+		m_paletteRealized(event.m_paletteRealized)
+	{ }
+	
     // App sets this if it changes the palette.
     void SetPaletteRealized(bool realized) { m_paletteRealized = realized; }
@@ -1699,5 +1775,11 @@
           m_pos(pt), m_target(), m_link()
     { }
-
+    wxHelpEvent(const wxHelpEvent & event)
+        : wxCommandEvent(event),
+		  m_pos(event.m_pos),
+		  m_target(event.m_target),
+		  m_link(event.m_link)
+    { }
+	
     // Position of event (in screen coordinates)
     const wxPoint& GetPosition() const { return m_pos; }
@@ -1740,5 +1822,9 @@
           m_pos(pt)
     { }
-
+    wxContextMenuEvent(const wxContextMenuEvent & event)
+        : wxCommandEvent(event),
+		m_pos(event.m_pos)
+    { }
+	
     // Position of event (in screen coordinates)
     const wxPoint& GetPosition() const { return m_pos; }
@@ -1766,5 +1852,9 @@
           m_requestMore(FALSE)
         { }
-
+    wxIdleEvent(const wxIdleEvent & event)
+        : wxEvent(event),
+		m_requestMore(event.m_requestMore)
+	{ }
+	
     void RequestMore(bool needMore = TRUE) { m_requestMore = needMore; }
     bool MoreRequested() const { return m_requestMore; }


 	  	 

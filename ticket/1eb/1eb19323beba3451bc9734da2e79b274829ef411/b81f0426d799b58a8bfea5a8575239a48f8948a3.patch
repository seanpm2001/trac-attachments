diff -ru2 -xCVS -x'.#' -x'*.orig' -x'*.rej' -x'*~' wxWindows.orig/docs/latex/wx/tipprov.tex wxWindows/docs/latex/wx/tipprov.tex
--- wxWindows.orig/docs/latex/wx/tipprov.tex	Thu Aug  5 23:05:15 1999
+++ wxWindows/docs/latex/wx/tipprov.tex	Mon Aug 26 20:59:25 2002
@@ -39,9 +39,19 @@
 pure virtual, it should be implemented in the derived classes.
 
+\membersection{wxTipProvider::PreprocessTip}\label{wxtipproviderpreprocesstip}
+\funct{virtual wxString}{PreProcessTip}{\param{const wxString\&} {tip}}
+
+Returns a modified tip. This function will be called immediately after read,
+and before being check whether it is a comment, an empty string or a string 
+to translate. You can optionally override this in your custom user-derived class 
+to optionally to modify the tip as soon as it is read. You can return any 
+modification to the string. If you return wxEmptyString, then this tip is 
+skipped, and the next one is read.
+
 \membersection{wxCurrentTipProvider::GetCurrentTip}\label{wxtipprovidergetcurrenttip}
 
 \constfunc{size\_t}{GetCurrentTip}{\void}
 
-Returns the index of the current tip (i.e. the one which would be returned by
+Returns the index of the current tip (i.e. the one which would be returned by 
 GetTip).
 
@@ -50,3 +60,2 @@
 was passed to wxShowTip $+ 1$ because the user might have pressed the "Next"
 button in the tip dialog.
-
diff -ru2 -xCVS -x'.#' -x'*.orig' -x'*.rej' -x'*~' wxWindows.orig/docs/latex/wx/ttips.tex wxWindows/docs/latex/wx/ttips.tex
--- wxWindows.orig/docs/latex/wx/ttips.tex	Sat Jul 15 20:49:55 2000
+++ wxWindows/docs/latex/wx/ttips.tex	Mon Aug 26 21:14:27 2002
@@ -33,5 +33,5 @@
 - then you don't need wxCreateFileTipProvider at all.
 
-Finally, you will probably want to save somewhere the index of the tip last
+You will probably want to save somewhere the index of the tip last
 shown - so that the program doesn't always show the same tip on startup. As you
 also need to remember whether to show tips or not (you shouldn't do it if the
@@ -42,2 +42,25 @@
 telling whether to show the tips at startup at all.
 
+In a tips.txt file, lines that begin with a \# character are considered comments 
+and are automatically skipped. Blank lines and lines only having spaces are also 
+skipped.
+
+You can easily add runtime-translation capacity by placing each line of the 
+tips.txt file inside the usual translation macro. For example, your tips.txt 
+file would look like this:
+\begin{verbatim}
+_("This is my first tip")
+_("This is my second tip")
+\end{verbatim}
+Now add your tips.txt file into the list of files that gettext searches 
+for translatable strings. The tips will thus get included into your 
+generated .po file catalog and be translated at runtime along with the rest of 
+your aplication's translatable strings. 
+Note1: Each line in the tips.txt file needs to strictly begin with exactly the 
+3 characters of underscore-parenthesis-doublequote, and end with 
+doublequote-parenthesis, as shown above. 
+Note2: Remember to escape any doublequote characters within the tip string with
+a backslash-doublequote.
+
+See the dialogs program in your samples folder for a working example inside a 
+program.
diff -ru2 -xCVS -x'.#' -x'*.orig' -x'*.rej' -x'*~' wxWindows.orig/include/wx/tipdlg.h wxWindows/include/wx/tipdlg.h
--- wxWindows.orig/include/wx/tipdlg.h	Mon Jun 28 23:08:46 1999
+++ wxWindows/include/wx/tipdlg.h	Mon Aug 26 20:50:17 2002
@@ -44,5 +44,5 @@
     // get the current tip and update the internal state to return the next tip
     // when called for the next time
-    virtual wxString GetTip() = 0;
+    virtual wxString GetTip() = 0;  
 
     // get the current tip "index" (or whatever allows the tip provider to know
@@ -50,4 +50,9 @@
     size_t GetCurrentTip() const { return m_currentTip; }
 
+    // Allows any user-derived class to optionally override this function to 
+    // modify the tip as soon as it is read. If return wxEmptyString, then 
+    // the tip is skipped, and the next one is read.
+    virtual wxString PreprocessTip(const wxString& tip) { return tip; }
+
     // virtual dtor for the base class
     virtual ~wxTipProvider() { }
diff -ru2 -xCVS -x'.#' -x'*.orig' -x'*.rej' -x'*~' wxWindows.orig/samples/dialogs/tips.txt wxWindows/samples/dialogs/tips.txt
--- wxWindows.orig/samples/dialogs/tips.txt	Mon Jun 28 22:39:38 1999
+++ wxWindows/samples/dialogs/tips.txt	Mon Aug 26 21:16:39 2002
@@ -1,5 +1,18 @@
-Startup tips are documented in "Startup tips overview" section of wxWindows documentation.
-This is the first tip!
-And this is another great tip...
-And here is a very very very very very very very very very very very long one.
-If you have something useful to add to this file, please do.
+Startup tips are documented in the "Startup tips overview" section of wxWindows documentation.
+These tips are being read from the tips.txt text file in this directory. Each line of the file contains a single tip.
+If you close and open this tips dialog, you will notice that the tip numbers start at the point you were at when you closed the dialog last time. This allows easy cycling through the entire list of tips, instead of always showing the initial tips over and over.
+Often you will want to save to the application's wxConfig, the last tip that the user saw, as well as whether they want to see tips on startup.
+Comments in the tips file have a # as the first character. Comments are automatically skipped over. See the tips.txt file in this directory for the example.
+# This line is a comment since it started with a #, and is skipped.
+Blank lines in the tip file are also automatically skipped over. Lines with only spaces are also considered empty.
+The next line in this tip file is empty, so it will be automatically skipped.
+
+The next line in this tip file is just empty spaces, so it is considered empty too, and is also automatically skipped.
+  
+You can easily add translations to your startup tips via the usual gettext methods by wrapping a string in a gettext macro, which is _(""). See next tip for example.
+_("This tip is marked as a translatable string by wrapping it inside the usual gettext macro, so it can be collected by gettext and added to a translation catalog. Your application can then use this catalog and serve out a translated version of the tip.")
+Translatable strings must strictly begin with _(", not _( " or wxGetTranslation(" or something else.
+If you are using gettext translatable strings, don't forget to escape to replace any " characters within the tip with a \" instead
+_("This is a translatable tip with the quoted words \"Escape me\" properly escaped.")
+If you have very specialized needs, you can derive your own wxTipProvider and use that instead.
+If you want to modify the tip content at runtime for purposes other than translation (for example, variable expansion), one easy option is to use a custom tip provider derived from wxFileTipProvider. Your custom tip provider would contain a single virtual function to override: PreprocessTip().
diff -ru2 -xCVS -x'.#' -x'*.orig' -x'*.rej' -x'*~' wxWindows.orig/src/generic/tipdlg.cpp wxWindows/src/generic/tipdlg.cpp
--- wxWindows.orig/src/generic/tipdlg.cpp	Mon Apr 22 15:33:07 2002
+++ wxWindows/src/generic/tipdlg.cpp	Mon Aug 26 19:43:59 2002
@@ -137,15 +137,54 @@
     size_t count = m_textfile.GetLineCount();
     if ( !count )
-        return _("Tips not available, sorry!");
-
-    // notice that it may be greater, actually, if we remembered it from the
-    // last time and the number of tips changed
-    if ( m_currentTip == count )
     {
-        // wrap
-        m_currentTip = 0;
+        return _("Tips not available, sorry!");
     }
+    
+    wxString tip;
 
-    return m_textfile.GetLine(m_currentTip++);
+    // Comments start with a # symbol.
+    // Loop reading lines until get the first one that isn't a comment.
+    // The max number of loop executions is the number of lines in the 
+    // textfile so that can't go into an eternal loop in the [oddball] 
+    // case of a comment-only tips file, or the developer has vetoed 
+    // them all via PreprecessTip().
+    for ( size_t i=0; i < count; i++ )
+    {    
+        // The current tip may be at the last line of the textfile, (or 
+        // past it, if the number of lines in the textfile changed, such 
+        // as changing to a different textfile, with less tips). So check
+        // to see at last line of text file, (or past it)...
+        if ( m_currentTip >= count )
+        {
+            // .. and if so, wrap back to line 0.
+            m_currentTip = 0;
+        }  
+        
+        // Read the tip, and increment the current tip counter.
+        tip = m_textfile.GetLine(m_currentTip++);
+        
+        // Allow a derived class's overrided virtual to modify the tip 
+        // now if so desired.
+        tip = PreprocessTip(tip); 
+        
+        // Break if tip isn't a comment, and isn't an empty string
+        // (or only stray space characters).
+        if ( !tip.StartsWith(wxT("#")) && (tip.Trim() != wxEmptyString) )
+        {
+            break;
+        }
+    }
+        
+    // If tip starts with '_(', then it is a gettext string of format
+    // _("My \"global\" tip text") so first strip off the leading '_("'...
+    if ( tip.StartsWith(wxT("_(\"" ), &tip))
+    {
+        //...and strip off the trailing '")'...
+        tip = tip.BeforeLast(wxT('\"'));
+        // ...and replace escaped quotes     
+        tip.Replace(wxT("\\\""), wxT("\"")); 
+    } 
+    
+    return tip;    
 }
 

 	  	 

Index: include/wx/prntbase.h
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/include/wx/prntbase.h,v
retrieving revision 1.22.2.1
diff -r1.22.2.1 prntbase.h
87a88
>     DECLARE_NO_COPY_CLASS(wxPrinterBase)
152a154
>     DECLARE_NO_COPY_CLASS(wxPrintout)
171a174
>     void OnChar(wxKeyEvent &event);
180a184
>     DECLARE_NO_COPY_CLASS(wxPreviewCanvas)
203a208,210
> 
>     inline wxPreviewControlBar* GetControlBar() const { return m_controlBar; }
> 
205c212
<     wxWindow*             m_previewCanvas;
---
>     wxPreviewCanvas*      m_previewCanvas;
211a219
>     DECLARE_NO_COPY_CLASS(wxPreviewFrame)
252c260
<                         long style = 0,
---
>                         long style = wxTAB_TRAVERSAL,
262d269
<     void OnPrint(wxCommandEvent& event);
268a276,277
>     void OnPrint();
>     void OnPrintButton(wxCommandEvent& WXUNUSED(event)) { OnPrint(); }
274d282
<     void OnChar(wxKeyEvent &event);
291a300
>     DECLARE_NO_COPY_CLASS(wxPreviewControlBar)
320c329
<     void SetCanvas(wxWindow *canvas) { m_previewCanvas = canvas; };
---
>     void SetCanvas(wxPreviewCanvas *canvas) { m_previewCanvas = canvas; };
323c332
<     virtual wxWindow *GetCanvas() const { return m_previewCanvas; }
---
>     virtual wxPreviewCanvas *GetCanvas() const { return m_previewCanvas; }
326c335
<     virtual bool PaintPage(wxWindow *canvas, wxDC& dc);
---
>     virtual bool PaintPage(wxPreviewCanvas *canvas, wxDC& dc);
329c338,341
<     virtual bool DrawBlankPage(wxWindow *canvas, wxDC& dc);
---
>     virtual bool DrawBlankPage(wxPreviewCanvas *canvas, wxDC& dc);
> 
>     // Adjusts the scrollbars for the current scale
>     virtual void AdjustScrollbars(wxPreviewCanvas *canvas);
360c372
<     wxWindow*         m_previewCanvas;
---
>     wxPreviewCanvas*  m_previewCanvas;
379a392,393
> 
>     DECLARE_NO_COPY_CLASS(wxPrintPreviewBase)
402a417
>     DECLARE_NO_COPY_CLASS(wxPrintAbortDialog)
Index: src/common/cmndata.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/cmndata.cpp,v
retrieving revision 1.64.2.6
diff -r1.64.2.6 cmndata.cpp
993c993
<     m_printFromPage = 0;
---
>     m_printFromPage = 1;
995,996c995,996
<     m_printMinPage = 0;
<     m_printMaxPage = 0;
---
>     m_printMinPage = 1;
>     m_printMaxPage = 9999;
1144c1144
<     else if ( (!m_printAllPages) && (!m_printSelection) )
---
>     else if ( (!m_printAllPages) && (!m_printSelection) && (m_printFromPage != 0) && (m_printToPage != 0))
Index: src/common/prntbase.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/common/prntbase.cpp,v
retrieving revision 1.46.2.5
diff -r1.46.2.5 prntbase.cpp
72a73
>     EVT_CHAR(wxPreviewCanvas::OnChar)
193c194
<     SetScrollbars(15, 18, 100, 100);
---
>     SetScrollbars(10, 10, 100, 100);
227a229,268
> void wxPreviewCanvas::OnChar(wxKeyEvent &event)
> {
>     wxPreviewControlBar* controlBar = ((wxPreviewFrame*) GetParent())->GetControlBar();
>     if (event.GetKeyCode() == WXK_ESCAPE)
>     {
>         ((wxPreviewFrame*) GetParent())->Close(TRUE);
>         return;
>     }
>     else if (event.GetKeyCode() == WXK_TAB)
>     {
>         controlBar->OnGoto();
>         return;
>     }
>     else if (event.GetKeyCode() == WXK_RETURN)
>     {
>         controlBar->OnPrint();
>         return;
>     }
> 
>     if (!event.ControlDown())
>     {
>         event.Skip();
>         return;
>     }
> 
>     switch(event.GetKeyCode())
>     {
>     case WXK_NEXT:
>         controlBar->OnNext(); break;
>     case WXK_PRIOR:
>         controlBar->OnPrevious(); break;
>     case WXK_HOME:
>         controlBar->OnFirst(); break;
>     case WXK_END:
>         controlBar->OnLast(); break;
>     default:
>         event.Skip();
>     }
> }
> 
234c275
<     EVT_BUTTON(wxID_PREVIEW_PRINT,    wxPreviewControlBar::OnPrint)
---
>     EVT_BUTTON(wxID_PREVIEW_PRINT,    wxPreviewControlBar::OnPrintButton)
240d280
<     EVT_CHAR(wxPreviewControlBar::OnChar)
280c320
< void wxPreviewControlBar::OnPrint(wxCommandEvent& WXUNUSED(event))
---
> void wxPreviewControlBar::OnPrint(void)
286,304d325
< void wxPreviewControlBar::OnChar(wxKeyEvent &event)
< {
<    switch(event.KeyCode())
<    {
<    case WXK_NEXT:
<       OnNext(); break;
<    case WXK_PRIOR:
<       OnPrevious(); break;
<    case WXK_HOME:
<       OnFirst(); break;
<    case WXK_END:
<       OnLast(); break;
<    case WXK_TAB:
<       OnGoto(); break;
<    default:
<       event.Skip();
<    }
< }
< 
373c394
<             strPrompt.Printf( wxT("%d...%d"),
---
>             strPrompt.Printf( _("Enter a page number between %d and %d:"),
378c399
<                 wxGetTextFromUser( strPrompt, _("Goto Page"), strPage);
---
>                 wxGetTextFromUser( strPrompt, _("Goto Page"), strPage, GetParent());
674a696,699
> 
>     m_printPreview->AdjustScrollbars(m_previewCanvas);
>     m_previewCanvas->SetFocus();
>     m_controlBar->SetFocus();
736,742c761,762
< 
<     // Too soon! Moved to RenderPage.
<     // printout->OnPreparePrinting();
< 
<     // Get some parameters from the printout, if defined
<     int selFrom, selTo;
<     printout->GetPageInfo(&m_minPage, &m_maxPage, &selFrom, &selTo);
---
>     m_minPage = 1;
>     m_maxPage = 1;
768a789,790
>         AdjustScrollbars(m_previewCanvas);
> 
771a794
>         m_previewCanvas->SetFocus();
776c799
< bool wxPrintPreviewBase::PaintPage(wxWindow *canvas, wxDC& dc)
---
> bool wxPrintPreviewBase::PaintPage(wxPreviewCanvas *canvas, wxDC& dc)
811a835,857
> // Adjusts the scrollbars for the current scale
> void wxPrintPreviewBase::AdjustScrollbars(wxPreviewCanvas *canvas)
> {
>     if (!canvas)
>         return ;
> 
>     int canvasWidth, canvasHeight;
>     canvas->GetSize(&canvasWidth, &canvasHeight);
> 
>     double zoomScale = ((float)m_currentZoom/(float)100);
>     double actualWidth = (zoomScale*m_pageWidth*m_previewScale);
>     double actualHeight = (zoomScale*m_pageHeight*m_previewScale);
> 
>     // Set the scrollbars appropriately
>     int totalWidth = (int)(actualWidth + 2*m_leftMargin);
>     int totalHeight = (int)(actualHeight + 2*m_topMargin);
>     int scrollUnitsX = totalWidth/10;
>     int scrollUnitsY = totalHeight/10;
>     wxSize virtualSize = canvas->GetVirtualSize();
>     if (virtualSize.GetWidth() != totalWidth || virtualSize.GetHeight() != totalHeight)
>         canvas->SetScrollbars(10, 10, scrollUnitsX, scrollUnitsY, 0, 0, TRUE);
> }
> 
861a908,909
>         int selFrom, selTo;
>         m_previewPrintout->GetPageInfo(&m_minPage, &m_maxPage, &selFrom, &selTo);
899c947
< bool wxPrintPreviewBase::DrawBlankPage(wxWindow *canvas, wxDC& dc)
---
> bool wxPrintPreviewBase::DrawBlankPage(wxPreviewCanvas *canvas, wxDC& dc)
952a1001
>         AdjustScrollbars(m_previewCanvas);
956a1006
>         m_previewCanvas->SetFocus();
Index: src/msw/printwin.cpp
===================================================================
RCS file: /pack/cvsroots/wxwindows/wxWindows/src/msw/printwin.cpp,v
retrieving revision 1.24
diff -r1.24 printwin.cpp
110,146c110,113
<     // 4/9/99, JACS: this is a silly place to allow preparation, considering
<     // the DC and no parameters have been set in the printout object.
<     // Moved further down.
<     // printout->OnPreparePrinting();
< 
<     // Get some parameters from the printout, if defined
<     int fromPage, toPage;
<     int minPage, maxPage;
<     printout->GetPageInfo(&minPage, &maxPage, &fromPage, &toPage);
< 
<     if (maxPage == 0)
<     {
<         sm_lastError = wxPRINTER_ERROR;
<         return FALSE;
<     }
< 
<     m_printDialogData.SetMinPage(minPage);
<     m_printDialogData.SetMaxPage(maxPage);
<     if (fromPage != 0)
<         m_printDialogData.SetFromPage(fromPage);
<     if (toPage != 0)
<         m_printDialogData.SetToPage(toPage);
< 
<     if (minPage != 0)
<     {
<         m_printDialogData.EnablePageNumbers(TRUE);
<         if (m_printDialogData.GetFromPage() < m_printDialogData.GetMinPage())
<             m_printDialogData.SetFromPage(m_printDialogData.GetMinPage());
<         else if (m_printDialogData.GetFromPage() > m_printDialogData.GetMaxPage())
<             m_printDialogData.SetFromPage(m_printDialogData.GetMaxPage());
<         if (m_printDialogData.GetToPage() > m_printDialogData.GetMaxPage())
<             m_printDialogData.SetToPage(m_printDialogData.GetMaxPage());
<         else if (m_printDialogData.GetToPage() < m_printDialogData.GetMinPage())
<             m_printDialogData.SetToPage(m_printDialogData.GetMinPage());
<     }
<     else
<         m_printDialogData.EnablePageNumbers(FALSE);
---
>     if (m_printDialogData.GetMinPage() < 1)
>         m_printDialogData.SetMinPage(1);
>     if (m_printDialogData.GetMaxPage() < 1)
>         m_printDialogData.SetMaxPage(9999);
158d124
<         //      dc = new wxPrinterDC("", "", "", FALSE, m_printData.GetOrientation());
204a171,187
> 
>     // Get some parameters from the printout, if defined
>     int fromPage, toPage;
>     int minPage, maxPage;
>     printout->GetPageInfo(&minPage, &maxPage, &fromPage, &toPage);
>     
>     if (maxPage == 0)
>     {
>         sm_lastError = wxPRINTER_ERROR;
>         wxEndBusyCursor();
>         return FALSE;
>     }
>     
>     // Only set min and max, because from and to have been
>     // set by the user
>     m_printDialogData.SetMinPage(minPage);
>     m_printDialogData.SetMaxPage(maxPage);

 	  	 

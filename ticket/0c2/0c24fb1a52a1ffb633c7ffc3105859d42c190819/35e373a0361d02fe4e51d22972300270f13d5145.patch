diff -urN wx2.3orig/include/wx/generic/grid.h wx2.3/include/wx/generic/grid.h
--- wx2.3orig/include/wx/generic/grid.h	Wed Jan 31 17:16:39 2001
+++ wx2.3/include/wx/generic/grid.h	Sat Apr 28 19:45:47 2001
@@ -996,10 +996,10 @@
 
     // ------ display update functions
     //
-    void CalcRowLabelsExposed( const wxRegion& reg );
+    wxArrayInt CalcRowLabelsExposed( const wxRegion& reg );
 
-    void CalcColLabelsExposed( const wxRegion& reg );
-    void CalcCellsExposed( const wxRegion& reg );
+    wxArrayInt CalcColLabelsExposed( const wxRegion& reg );
+    wxGridCellCoordsArray CalcCellsExposed( const wxRegion& reg );
 
 
     // ------ event handlers
@@ -1026,21 +1026,21 @@
     bool AppendCols( int numCols = 1, bool updateLabels=TRUE );
     bool DeleteCols( int pos = 0, int numCols = 1, bool updateLabels=TRUE );
 
-    void DrawGridCellArea( wxDC& dc );
+    void DrawGridCellArea( wxDC& dc , const wxGridCellCoordsArray& cells );
     void DrawGridSpace( wxDC& dc );
     void DrawCellBorder( wxDC& dc, const wxGridCellCoords& );
     void DrawAllGridLines( wxDC& dc, const wxRegion & reg );
     void DrawCell( wxDC& dc, const wxGridCellCoords& );
-    void DrawHighlight(wxDC& dc);
+    void DrawHighlight(wxDC& dc, const wxGridCellCoordsArray& cells);
 
     // this function is called when the current cell highlight must be redrawn
     // and may be overridden by the user
     virtual void DrawCellHighlight( wxDC& dc, const wxGridCellAttr *attr );
 
-    void DrawRowLabels( wxDC& dc );
+    void DrawRowLabels( wxDC& dc, const wxArrayInt& rows );
     void DrawRowLabel( wxDC& dc, int row );
 
-    void DrawColLabels( wxDC& dc );
+    void DrawColLabels( wxDC& dc, const wxArrayInt& cols );
     void DrawColLabel( wxDC& dc, int col );
 
 
@@ -1658,12 +1658,6 @@
     wxGridCellAttr*     m_defaultCellAttr;
 
 
-    wxGridCellCoordsArray  m_cellsExposed;
-    wxArrayInt             m_rowsExposed;
-    wxArrayInt             m_colsExposed;
-    wxArrayInt             m_rowLabelsExposed;
-    wxArrayInt             m_colLabelsExposed;
-
     bool m_inOnKeyDown;
     int  m_batchCount;
 
@@ -1718,9 +1712,9 @@
     bool Redimension( wxGridTableMessage& );
 
 
-    bool SendEvent( const wxEventType, int row, int col, wxMouseEvent& );
-    bool SendEvent( const wxEventType, int row, int col );
-    bool SendEvent( const wxEventType type)
+    int SendEvent( const wxEventType, int row, int col, wxMouseEvent& );
+    int SendEvent( const wxEventType, int row, int col );
+    int SendEvent( const wxEventType type)
     {
         return SendEvent(type,
                          m_currentCellCoords.GetRow(),
diff -urN wx2.3orig/src/generic/grid.cpp wx2.3/src/generic/grid.cpp
--- wx2.3orig/src/generic/grid.cpp	Fri Apr 20 21:48:51 2001
+++ wx2.3/src/generic/grid.cpp	Sat Apr 28 19:45:47 2001
@@ -3129,8 +3129,8 @@
     m_owner->CalcUnscrolledPosition( 0, 0, &x, &y );
     dc.SetDeviceOrigin( 0, -y );
 
-    m_owner->CalcRowLabelsExposed( GetUpdateRegion() );
-    m_owner->DrawRowLabels( dc );
+    wxArrayInt rows = m_owner->CalcRowLabelsExposed( GetUpdateRegion() );
+    m_owner->DrawRowLabels( dc , rows );
 }
 
 
@@ -3188,8 +3188,8 @@
     m_owner->CalcUnscrolledPosition( 0, 0, &x, &y );
     dc.SetDeviceOrigin( -x, 0 );
 
-    m_owner->CalcColLabelsExposed( GetUpdateRegion() );
-    m_owner->DrawColLabels( dc );
+    wxArrayInt cols = m_owner->CalcColLabelsExposed( GetUpdateRegion() );
+    m_owner->DrawColLabels( dc , cols );
 }
 
 
@@ -3307,13 +3307,13 @@
     wxPaintDC dc( this );
     m_owner->PrepareDC( dc );
     wxRegion reg = GetUpdateRegion();
-    m_owner->CalcCellsExposed( reg );
-    m_owner->DrawGridCellArea( dc );
+    wxGridCellCoordsArray DirtyCells = m_owner->CalcCellsExposed( reg );
+    m_owner->DrawGridCellArea( dc , DirtyCells);
 #if WXGRID_DRAW_LINES
     m_owner->DrawAllGridLines( dc, reg );
 #endif
     m_owner->DrawGridSpace( dc );
-    m_owner->DrawHighlight( dc );
+    m_owner->DrawHighlight( dc , DirtyCells );
 }
 
 
@@ -4046,13 +4046,13 @@
 }
 
 
-void wxGrid::CalcRowLabelsExposed( const wxRegion& reg )
+wxArrayInt wxGrid::CalcRowLabelsExposed( const wxRegion& reg )
 {
     wxRegionIterator iter( reg );
     wxRect r;
 
-    m_rowLabelsExposed.Empty();
-
+    wxArrayInt  rowlabels;   	
+	
     int top, bottom;
     while ( iter )
     {
@@ -4087,20 +4087,22 @@
             if ( GetRowTop(row) > bottom )
                 break;
 
-            m_rowLabelsExposed.Add( row );
+            rowlabels.Add( row );
         }
 
         iter++ ;
     }
+
+    return rowlabels;
 }
 
 
-void wxGrid::CalcColLabelsExposed( const wxRegion& reg )
+wxArrayInt wxGrid::CalcColLabelsExposed( const wxRegion& reg )
 {
     wxRegionIterator iter( reg );
     wxRect r;
 
-    m_colLabelsExposed.Empty();
+    wxArrayInt colLabels;
 
     int left, right;
     while ( iter )
@@ -4136,22 +4138,21 @@
             if ( GetColLeft(col) > right )
                 break;
 
-            m_colLabelsExposed.Add( col );
+            colLabels.Add( col );
         }
 
         iter++ ;
     }
+    return colLabels;
 }
 
 
-void wxGrid::CalcCellsExposed( const wxRegion& reg )
+wxGridCellCoordsArray wxGrid::CalcCellsExposed( const wxRegion& reg )
 {
     wxRegionIterator iter( reg );
     wxRect r;
 
-    m_cellsExposed.Empty();
-    m_rowsExposed.Empty();
-    m_colsExposed.Empty();
+    wxGridCellCoordsArray  cellsExposed;
 
     int left, top, right, bottom;
     while ( iter )
@@ -4188,7 +4189,6 @@
             if ( GetRowTop(row) > bottom )
                 break;
 
-            m_rowsExposed.Add( row );
 
             for ( col = 0;  col < m_numCols;  col++ )
             {
@@ -4198,14 +4198,14 @@
                 if ( GetColLeft(col) > right )
                     break;
 
-                if ( m_colsExposed.Index( col ) == wxNOT_FOUND )
-                    m_colsExposed.Add( col );
-                m_cellsExposed.Add( wxGridCellCoords( row, col ) );
+                cellsExposed.Add( wxGridCellCoords( row, col ) );
             }
         }
 
         iter++;
     }
+
+    return cellsExposed;
 }
 
 
@@ -5298,11 +5298,14 @@
 // Generate a grid event based on a mouse event and
 // return the result of ProcessEvent()
 //
-bool wxGrid::SendEvent( const wxEventType type,
+int wxGrid::SendEvent( const wxEventType type,
                         int row, int col,
                         wxMouseEvent& mouseEv )
 {
-    if ( type == wxEVT_GRID_ROW_SIZE || type == wxEVT_GRID_COL_SIZE )
+   bool claimed;
+   bool vetoed= false;
+	
+	if ( type == wxEVT_GRID_ROW_SIZE || type == wxEVT_GRID_COL_SIZE )
     {
         int rowOrCol = (row == -1 ? col : row);
 
@@ -5316,7 +5319,10 @@
                                  mouseEv.ShiftDown(),
                                  mouseEv.AltDown(),
                                  mouseEv.MetaDown() );
-        return GetEventHandler()->ProcessEvent(gridEvt);
+    
+        claimed = GetEventHandler()->ProcessEvent(gridEvt);
+	vetoed = !gridEvt.IsAllowed();
+
     }
     else if ( type == wxEVT_GRID_RANGE_SELECT )
     {
@@ -5332,8 +5338,10 @@
                                         mouseEv.AltDown(),
                                         mouseEv.MetaDown() );
 
-        return GetEventHandler()->ProcessEvent(gridEvt);
-    }
+        claimed = GetEventHandler()->ProcessEvent(gridEvt);
+  	vetoed = !gridEvt.IsAllowed();
+	
+  }
     else
     {
         wxGridEvent gridEvt( GetId(),
@@ -5347,17 +5355,28 @@
                              mouseEv.ShiftDown(),
                              mouseEv.AltDown(),
                              mouseEv.MetaDown() );
-        return GetEventHandler()->ProcessEvent(gridEvt);
-    }
+         claimed = GetEventHandler()->ProcessEvent(gridEvt);
+     	 vetoed = !gridEvt.IsAllowed();
+ 	}
+ 
+  }
+  // A Veto'd event may not be `claimed' so test this first 
+  if (vetoed) return -1;
+  return claimed ? 1 : 0;
+
+    
 }
 
 
 // Generate a grid event of specified type and return the result
 // of ProcessEvent().
 //
-bool wxGrid::SendEvent( const wxEventType type,
+int wxGrid::SendEvent( const wxEventType type,
                         int row, int col )
 {
+   bool claimed;
+   bool vetoed= false;
+
     if ( type == wxEVT_GRID_ROW_SIZE || type == wxEVT_GRID_COL_SIZE )
     {
         int rowOrCol = (row == -1 ? col : row);
@@ -5367,7 +5386,8 @@
                                  this,
                                  rowOrCol );
 
-        return GetEventHandler()->ProcessEvent(gridEvt);
+        claimed = GetEventHandler()->ProcessEvent(gridEvt);
+        vetoed  = !gridEvt.IsAllowed();
     }
     else
     {
@@ -5376,8 +5396,14 @@
                              this,
                              row, col );
 
-        return GetEventHandler()->ProcessEvent(gridEvt);
-    }
+        claimed = GetEventHandler()->ProcessEvent(gridEvt);
+        vetoed  = !gridEvt.IsAllowed();
+     }
+
+	// A Veto'd event may not be `claimed' so test this first 
+	if (vetoed) return -1;
+	return claimed ? 1 : 0;
+
 }
 
 
@@ -5663,12 +5689,12 @@
                 r.height++;
             }
 
-            CalcCellsExposed( r );
+             wxGridCellCoordsArray cells = CalcCellsExposed( r );
 
             // Otherwise refresh redraws the highlight!
             m_currentCellCoords = coords;
 
-            DrawGridCellArea(dc);
+            DrawAllGridLines( dc, r );
             DrawAllGridLines( dc, r );
         }
     }
@@ -5859,16 +5885,16 @@
 // exposed cells (usually set from the update region by
 // CalcExposedCells)
 //
-void wxGrid::DrawGridCellArea( wxDC& dc )
+void wxGrid::DrawGridCellArea( wxDC& dc, const wxGridCellCoordsArray& cells )
 {
     if ( !m_numRows || !m_numCols ) return;
 
     size_t i;
-    size_t numCells = m_cellsExposed.GetCount();
+    size_t numCells = cells.GetCount();
 
     for ( i = 0;  i < numCells;  i++ )
     {
-        DrawCell( dc, m_cellsExposed[i] );
+        DrawCell( dc, cells[i] );
     }
 }
 
@@ -6006,7 +6032,7 @@
                  GetColRight(col), GetRowBottom(row) );
 }
 
-void wxGrid::DrawHighlight(wxDC& dc)
+void wxGrid::DrawHighlight(wxDC& dc,const  wxGridCellCoordsArray& cells)
 {
     // This if block was previously in wxGrid::OnPaint but that doesn't
     // seem to get called under wxGTK - MB
@@ -6025,10 +6051,10 @@
 
     // if the active cell was repainted, repaint its highlight too because it
     // might have been damaged by the grid lines
-    size_t count = m_cellsExposed.GetCount();
+    size_t count = cells.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
-        if ( m_cellsExposed[n] == m_currentCellCoords )
+        if ( cells[n] == m_currentCellCoords )
         {
             wxGridCellAttr* attr = GetCellAttr(m_currentCellCoords);
             DrawCellHighlight(dc, attr);
@@ -6120,16 +6146,16 @@
 }
 
 
-void wxGrid::DrawRowLabels( wxDC& dc )
+void wxGrid::DrawRowLabels( wxDC& dc ,const wxArrayInt& rows)
 {
     if ( !m_numRows ) return;
 
     size_t i;
-    size_t numLabels = m_rowLabelsExposed.GetCount();
+    size_t numLabels = rows.GetCount();
 
     for ( i = 0;  i < numLabels;  i++ )
     {
-        DrawRowLabel( dc, m_rowLabelsExposed[i] );
+        DrawRowLabel( dc, rows[i] );
     }
 }
 
@@ -6168,16 +6194,16 @@
 }
 
 
-void wxGrid::DrawColLabels( wxDC& dc )
+void wxGrid::DrawColLabels( wxDC& dc,const wxArrayInt& cols )
 {
     if ( !m_numCols ) return;
 
     size_t i;
-    size_t numLabels = m_colLabelsExposed.GetCount();
+    size_t numLabels = cols.GetCount();
 
     for ( i = 0;  i < numLabels;  i++ )
     {
-        DrawColLabel( dc, m_colLabelsExposed[i] );
+        DrawColLabel( dc, cols[i] );
     }
 }
 
@@ -6547,6 +6573,8 @@
         int row = m_currentCellCoords.GetRow();
         int col = m_currentCellCoords.GetCol();
 
+		wxString oldval = GetCellValue(row,col);
+
         wxGridCellAttr* attr = GetCellAttr(row, col);
         wxGridCellEditor* editor = attr->GetEditor(this, row, col);
         bool changed = editor->EndEdit(row, col, this);
@@ -6556,9 +6584,13 @@
 
         if (changed)
         {
-            SendEvent( wxEVT_GRID_CELL_CHANGE,
+            if ( SendEvent( wxEVT_GRID_CELL_CHANGE,
                        m_currentCellCoords.GetRow(),
-                       m_currentCellCoords.GetCol() );
+                       m_currentCellCoords.GetCol() ) < 0 ) {
+
+					//Event has been veto set the data back.
+					SetCellValue(row,col,oldval);
+			}
         }
     }
 }

 	  	 

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 75244)
+++ build/bakefiles/files.bkl	(working copy)
@@ -3690,6 +3690,7 @@
     src/aui/tabmdi.cpp
     src/aui/tabart.cpp
     src/xrc/xh_auinotbk.cpp
+    src/xrc/xh_auitoolb.cpp
     $(AUI_GTK_SRC)
 </set>
 <set var="AUI_HDR" hints="files">
@@ -3702,6 +3703,7 @@
     wx/aui/aui.h
     wx/aui/tabart.h
     wx/xrc/xh_auinotbk.h
+    wx/xrc/xh_auitoolb.h
     $(AUI_GTK_HDR)
 </set>
 
Index: docs/doxygen/overviews/xrc_format.h
===================================================================
--- docs/doxygen/overviews/xrc_format.h	(revision 75244)
+++ docs/doxygen/overviews/xrc_format.h	(working copy)
@@ -591,7 +591,24 @@
 @endcode
 to use it.
 
+@subsubsection xrc_wxauitoolbar wxAuiToolBar
 
+Building an XRC for wxAuiToolBar is quite similar to wxToolBar.
+The only significant differences are:
+@li the use of the class name wxAuiToolBar
+@li the styles supported are the ones described in the wxAuiToolBar class definition
+
+Refer to the section @ref xrc_wxtoolbar for more details.
+
+@note The XML Handler should be explicitly registered:
+@code
+    #include <wx/xrc/xh_auitoolb.h>
+
+    AddHandler(new wxAuiToolBarXmlHandler);
+@endcode
+
+@since 3.x.x
+
 @subsubsection xrc_wxbannerwindow wxBannerWindow
 
 @beginTable
Index: include/wx/xrc/xh_auitoolb.h
===================================================================
--- include/wx/xrc/xh_auitoolb.h	(revision 0)
+++ include/wx/xrc/xh_auitoolb.h	(working copy)
@@ -0,0 +1,50 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        wx/xrc/xh_toolb.h
+// Purpose:     XML resource handler for wxAuiToolBar
+// Author:      Vaclav Slavik
+// Created:     2000/08/11
+// Copyright:   (c) 2000 Vaclav Slavik
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+#ifndef _WX_XH_AUITOOLB_H_
+#define _WX_XH_AUITOOLB_H_
+
+#include "wx/aui/auibar.h"
+#include "wx/menu.h"
+#include "wx/xrc/xmlres.h"
+
+#if wxUSE_XRC && wxUSE_TOOLBAR
+
+class WXDLLIMPEXP_FWD_AUI wxAuiToolBar;
+
+class wxAuiToolBarXmlHandler : public wxXmlResourceHandler
+{
+    DECLARE_DYNAMIC_CLASS(wxAuiToolBarXmlHandler)
+
+public:
+    wxAuiToolBarXmlHandler();
+    virtual wxObject *DoCreateResource();
+    virtual bool CanHandle(wxXmlNode *node);
+
+private:
+    bool m_isInside;
+    wxAuiToolBar *m_toolbar;
+    wxSize m_toolSize;
+
+    class MenuHandler : public wxEvtHandler
+    {
+    public:
+        void OnDropDown(wxAuiToolBarEvent& event);
+        unsigned long RegisterMenu(wxAuiToolBar *toobar, int id, wxMenu *menu);
+
+    private:
+        wxArrayPtrVoid m_menus;
+    };
+
+    MenuHandler m_menu_handler;
+};
+
+#endif // wxUSE_XRC && wxUSE_TOOLBAR
+
+#endif // _WX_XH_AUITOOLB_H_
Index: misc/schema/xrc_schema.rnc
===================================================================
--- misc/schema/xrc_schema.rnc	(revision 75244)
+++ misc/schema/xrc_schema.rnc	(working copy)
@@ -154,6 +154,7 @@
     ( unknown
     | wxAnimationCtrl
     | wxAuiNotebook
+    | wxAuiToolBar
     | wxBannerWindow
     | wxBitmapButton
     | wxBitmapComboBox
@@ -242,6 +243,7 @@
 
     | "wxAnimationCtrl"
     | "wxAuiNotebook"
+    | "wxAuiToolBar"
     | "wxBannerWindow"
     | "wxBitmapButton"
     | "wxBitmapComboBox"
@@ -525,6 +527,25 @@
     }
 
 
+wxAuiToolBar =
+    element object {
+        attribute class { "wxAuiToolBar" } &
+        stdObjectNodeAttributes &
+        stdWindowProperties &
+        [xrc:p="o"] element bitmapsize        {_, t_size }* &
+        [xrc:p="o"] element margins           {_, t_size }* &
+        [xrc:p="o"] element packing           {_, t_integer }* &
+        [xrc:p="o"] element separation        {_, t_integer }* &
+        [xrc:p="o"] element dontattachtoframe {_, t_bool }* &
+        (
+            windowNode |
+            wxToolBar_tool |
+            element object { attribute class { "separator" }, platform } |
+            element object { attribute class { "space" },     platform }
+        )*
+    }
+
+
 wxBannerWindow =
     element object {
         attribute class { "wxBannerWindow" } &
Index: samples/xrc/myframe.cpp
===================================================================
--- samples/xrc/myframe.cpp	(revision 75244)
+++ samples/xrc/myframe.cpp	(working copy)
@@ -85,6 +85,7 @@
     EVT_MENU(XRCID("derived_tool_or_menuitem"), MyFrame::OnDerivedDialogToolOrMenuCommand)
     EVT_MENU(XRCID("controls_tool_or_menuitem"), MyFrame::OnControlsToolOrMenuCommand)
     EVT_MENU(XRCID("uncentered_tool_or_menuitem"), MyFrame::OnUncenteredToolOrMenuCommand)
+    EVT_MENU(XRCID("aui_demo_tool_or_menuitem"), MyFrame::OnAuiDemoToolOrMenuCommand)
     EVT_MENU(XRCID("obj_ref_tool_or_menuitem"), MyFrame::OnObjRefToolOrMenuCommand)
     EVT_MENU(XRCID("custom_class_tool_or_menuitem"), MyFrame::OnCustomClassToolOrMenuCommand)
     EVT_MENU(XRCID("platform_property_tool_or_menuitem"), MyFrame::OnPlatformPropertyToolOrMenuCommand)
@@ -270,6 +271,17 @@
     dlg.ShowModal();
 }
 
+void MyFrame::OnAuiDemoToolOrMenuCommand(wxCommandEvent& WXUNUSED(event))
+{
+#if wxUSE_AUI
+    wxDialog dlg;
+    wxXmlResource::Get()->LoadDialog(&dlg, this, wxT("aui_dialog"));
+    dlg.SetSize(-1,300);
+    dlg.ShowModal();
+#else
+    wxLogWarning("wxUSE_AUI must be set to 1 in 'setup.h' to view the AUI demo.");
+#endif
+}
 
 void MyFrame::OnObjRefToolOrMenuCommand(wxCommandEvent& WXUNUSED(event))
 {
Index: samples/xrc/myframe.h
===================================================================
--- samples/xrc/myframe.h	(revision 75244)
+++ samples/xrc/myframe.h	(working copy)
@@ -43,6 +43,7 @@
     void OnDerivedDialogToolOrMenuCommand(wxCommandEvent& event);
     void OnControlsToolOrMenuCommand(wxCommandEvent& event);
     void OnUncenteredToolOrMenuCommand(wxCommandEvent& event);
+    void OnAuiDemoToolOrMenuCommand(wxCommandEvent& event);
     void OnObjRefToolOrMenuCommand(wxCommandEvent& event);
     void OnCustomClassToolOrMenuCommand(wxCommandEvent& event);
     void OnPlatformPropertyToolOrMenuCommand(wxCommandEvent& event);
Index: samples/xrc/rc/aui.xpm
===================================================================
--- samples/xrc/rc/aui.xpm	(revision 0)
+++ samples/xrc/rc/aui.xpm	(working copy)
@@ -0,0 +1,161 @@
+/* XPM */
+static const char *const wxwin16x16_xpm[] = {
+"16 16 142 2",
+"  	c None",
+". 	c #7171C0",
+"+ 	c #7D7DC7",
+"@ 	c #8181CE",
+"# 	c #7979CE",
+"$ 	c #7171CE",
+"% 	c #6868CD",
+"& 	c #5050C0",
+"* 	c #7C7CCB",
+"= 	c #D3D3FC",
+"- 	c #C0C0FF",
+"; 	c #B1B1FF",
+"> 	c #A4A4FF",
+", 	c #9696FF",
+"' 	c #6B6BE3",
+") 	c #3E3EC0",
+"! 	c #7B7BD3",
+"~ 	c #CFCFFF",
+"{ 	c #A7A7FF",
+"] 	c #8989FF",
+"^ 	c #7B7BFF",
+"/ 	c #5E5EEB",
+"( 	c #3333BF",
+"_ 	c #6969D3",
+": 	c #BEBEFF",
+"< 	c #8E8EFF",
+"[ 	c #5E5EFF",
+"} 	c #4C4CFD",
+"| 	c #6464C6",
+"1 	c #A4A478",
+"2 	c #BFBF63",
+"3 	c #BFBF5C",
+"4 	c #BFBF56",
+"5 	c #BFBF51",
+"6 	c #C17474",
+"7 	c #BF7070",
+"8 	c #BF6969",
+"9 	c #BF6363",
+"0 	c #544AC7",
+"a 	c #A8A8FF",
+"b 	c #7070FF",
+"c 	c #5050FF",
+"d 	c #3F3FFF",
+"e 	c #8C8CBA",
+"f 	c #F6F6C8",
+"g 	c #FBFBBB",
+"h 	c #FBFBAE",
+"i 	c #FBFBA1",
+"j 	c #F9F993",
+"k 	c #D7D760",
+"l 	c #D28D8D",
+"m 	c #EEB8B8",
+"n 	c #EFAAAA",
+"o 	c #EF9E9E",
+"p 	c #7C5ABC",
+"q 	c #8D8DFF",
+"r 	c #4747FF",
+"s 	c #3535FF",
+"t 	c #2B2BFF",
+"u 	c #AAAAA7",
+"v 	c #FFFFD2",
+"w 	c #FFFFA9",
+"x 	c #FFFF9A",
+"y 	c #FFFF8D",
+"z 	c #FFFF80",
+"A 	c #E4E45B",
+"B 	c #E39F9F",
+"C 	c #FFCCCC",
+"D 	c #FFA9A9",
+"E 	c #FF9C9C",
+"F 	c #B469A0",
+"G 	c #3E3DE7",
+"H 	c #2828EF",
+"I 	c #1E1EEF",
+"J 	c #1515EF",
+"K 	c #A5A595",
+"L 	c #FFFFC2",
+"M 	c #FFFF8F",
+"N 	c #F7F765",
+"O 	c #F2F251",
+"P 	c #DBDB3A",
+"Q 	c #E48E8E",
+"R 	c #FFBABA",
+"S 	c #FF8E8E",
+"T 	c #FF8181",
+"U 	c #FF6868",
+"V 	c #E54D60",
+"W 	c #AC2E56",
+"X 	c #0B0BBF",
+"Y 	c #0606BF",
+"Z 	c #C8C85D",
+"` 	c #FEFEB1",
+" .	c #FEFE74",
+"..	c #F4F456",
+"+.	c #EFEF42",
+"@.	c #EFEF38",
+"#.	c #D7D725",
+"$.	c #E47676",
+"%.	c #FFA8A8",
+"&.	c #FF7373",
+"*.	c #FF5555",
+"=.	c #FF4343",
+"-.	c #FF3939",
+";.	c #DA2323",
+">.	c #CFCF3C",
+",.	c #F6F694",
+"'.	c #F0F047",
+").	c #EFEF2E",
+"!.	c #EFEF24",
+"~.	c #D7D715",
+"{.	c #E45757",
+"].	c #FF8888",
+"^.	c #FF4646",
+"/.	c #FF2F2F",
+"(.	c #FF2525",
+"_.	c #DA1414",
+":.	c #C3C328",
+"<.	c #EBEB55",
+"[.	c #ECEC2F",
+"}.	c #ECEC24",
+"|.	c #ECEC1A",
+"1.	c #EBEB10",
+"2.	c #CDCD06",
+"3.	c #DD3A3A",
+"4.	c #FF6060",
+"5.	c #FF1B1B",
+"6.	c #FE1111",
+"7.	c #D10707",
+"8.	c #B8B819",
+"9.	c #B7B715",
+"0.	c #B7B710",
+"a.	c #B7B70B",
+"b.	c #B7B706",
+"c.	c #B7B701",
+"d.	c #B7B700",
+"e.	c #BF1A1A",
+"f.	c #CC1919",
+"g.	c #CE1414",
+"h.	c #CE0E0E",
+"i.	c #CE0808",
+"j.	c #C90202",
+"k.	c #C00000",
+"                                ",
+"                                ",
+"        . + @ # $ % &           ",
+"        * = - ; > , ' )         ",
+"        ! ~ { , ] ^ / (         ",
+"        _ : < ^ [ } | 1 2 3 4 5 ",
+"6 7 8 9 0 a b c d e f g h i j k ",
+"l m n o p q r s t u v w x y z A ",
+"B C D E F G H I J K L M z N O P ",
+"Q R S T U V W X Y Z `  ...+.@.#.",
+"$.%.&.*.=.-.;.    >.,.'.@.).!.~.",
+"{.].^.-./.(._.    :.<.[.}.|.1.2.",
+"3.4./.(.5.6.7.    8.9.0.a.b.c.d.",
+"e.f.g.h.i.j.k.                  ",
+"                                ",
+"                                "};
Index: samples/xrc/rc/aui.xrc
===================================================================
--- samples/xrc/rc/aui.xrc	(revision 0)
+++ samples/xrc/rc/aui.xrc	(working copy)
@@ -0,0 +1,112 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<resource version="2.3.0.1" xmlns="http://www.wxwidgets.org/wxxrc">
+  <object class="wxDialog" name="aui_dialog">
+    <title>AUI XRC demo</title>
+    <centered>1</centered>
+    <style>wxCAPTION|wxRESIZE_BORDER</style>
+    <size>-1,300</size>
+    <object class="wxBoxSizer">
+      <orient>wxVERTICAL</orient>
+      <object class="sizeritem">
+        <object class="wxAuiToolBar" name="aui_toolbar">
+          <style>wxAUI_TB_TEXT|wxAUI_TB_GRIPPER</style>
+          <object class="tool" name="tool1">
+            <bitmap stock_id="wxART_NEW"/>
+            <label>Tool 1</label>
+          </object>
+          <object class="tool" name="tool2">
+            <bitmap stock_id="wxART_FILE_OPEN"/>
+            <label>Tool 2</label>
+          </object>
+          <object class="separator"/>
+          <object class="tool" name="dropdown">
+            <bitmap stock_id="wxART_FIND"/>
+            <label>Dropdown</label>
+            <dropdown>
+              <object class="wxMenu">
+                <object class="wxMenuItem">
+                  <label>A dropdown menu</label>
+                </object>
+                <object class="wxMenuItem">
+                  <label>in the aui toolbar</label>
+                </object>
+              </object>
+            </dropdown>
+          </object>
+          <object class="separator"/>
+          <object class="space"/>
+          <object class="wxComboBox">
+            <content>
+              <item>Just a</item>
+              <item>combobox in</item>
+              <item>the aui toolbar</item>
+            </content>
+          </object>
+          <object class="space"/>
+        </object>
+      </object>
+      <object class="sizeritem">
+        <option>1</option>
+        <flag>wxEXPAND</flag>
+        <object class="wxAuiNotebook" name="aui_notebook">
+          <object class="notebookpage">
+            <label>Page 1</label>
+            <bitmap stock_id="wxART_WARNING"/>
+            <object class="wxPanel" name="page1">
+              <object class="wxBoxSizer">
+                <object class="sizeritem">
+                  <object class="wxTextCtrl" name="description_text">
+                    <value>Notice the wxAuiToolBar added above this wxAuiNotebook</value>
+                    <style>wxTE_MULTILINE|wxTE_READONLY</style>
+                  </object>
+                  <option>1</option>
+                  <flag>wxEXPAND</flag>
+                </object>
+              </object>
+            </object>
+          </object>
+          <object class="notebookpage">
+            <label>Page 2</label>
+            <bitmap stock_id="wxART_INFORMATION"/>
+            <object class="wxPanel" name="page2">
+              <object class="wxBoxSizer">
+                <object class="sizeritem">
+                  <object class="wxTextCtrl" name="description_text">
+                    <value>The wxAuiNotebook pages are added by XRC</value>
+                    <style>wxTE_MULTILINE|wxTE_READONLY</style>
+                  </object>
+                  <option>1</option>
+                  <flag>wxEXPAND</flag>
+                </object>
+              </object>
+            </object>
+          </object>
+          <object class="notebookpage">
+            <label>Page 3</label>
+            <bitmap stock_id="wxART_QUESTION"/>
+            <object class="wxPanel" name="page3">
+              <object class="wxBoxSizer">
+                <object class="sizeritem">
+                  <object class="wxTextCtrl" name="description_text">
+                    <value></value>
+                    <style>wxTE_MULTILINE|wxTE_READONLY</style>
+                  </object>
+                  <option>1</option>
+                  <flag>wxEXPAND</flag>
+                </object>
+              </object>
+            </object>
+          </object>
+        </object>
+      </object>
+      <object class="sizeritem">
+        <object class="wxButton" name="wxID_OK">
+          <label>OK</label>
+          <default>1</default>
+        </object>
+        <flag>wxTOP|wxBOTTOM|wxALIGN_CENTRE</flag>
+        <border>10</border>
+      </object>
+    </object>
+  </object>
+</resource>
Index: samples/xrc/rc/menu.xrc
===================================================================
--- samples/xrc/rc/menu.xrc	(revision 75244)
+++ samples/xrc/rc/menu.xrc	(working copy)
@@ -49,6 +49,11 @@
     <object class="wxMenu" name="advanced_demos_menu">
         <label>_Advanced</label>
         <help>Advanced techniques with XRC</help>
+         <object class="wxMenuItem" name="aui_demo_tool_or_menuitem">
+            <label>_AUI</label>
+            <bitmap>aui.xpm</bitmap>
+            <help>Advanced User Interface classes and controls</help>
+        </object>
          <object class="wxMenuItem" name="obj_ref_tool_or_menuitem">
             <label>_Object References Example</label>
             <bitmap>objrefdlg.xpm</bitmap>
Index: samples/xrc/rc/toolbar.xrc
===================================================================
--- samples/xrc/rc/toolbar.xrc	(revision 75244)
+++ samples/xrc/rc/toolbar.xrc	(working copy)
@@ -26,6 +26,11 @@
         <longhelp>Disable autocentering of a dialog on its parent</longhelp>
     </object>  
     <object class="separator"/>
+     <object class="tool" name="aui_demo_tool_or_menuitem">
+        <bitmap>aui.xpm</bitmap>
+        <tooltip>wxAUI classes and controls</tooltip>
+        <longhelp>XRC construction of Advanced User Interface classes and controls</longhelp>
+    </object>
     <object class="tool" name="obj_ref_tool_or_menuitem">
       <bitmap>objrefdlg.xpm</bitmap>
       <tooltip>Object references and event ranges example</tooltip>
Index: samples/xrc/xrcdemo.bkl
===================================================================
--- samples/xrc/xrcdemo.bkl	(revision 75244)
+++ samples/xrc/xrcdemo.bkl	(working copy)
@@ -18,6 +18,7 @@
             custclas.h
             objrefdlg.h
         </headers>
+        <wx-lib>aui</wx-lib>
         <wx-lib>ribbon</wx-lib>
         <wx-lib>xrc</wx-lib>
         <wx-lib>html</wx-lib>
@@ -31,6 +32,7 @@
         <dstdir>$(BUILDDIR)/rc</dstdir>
         <srcdir>$(SRCDIR)/rc</srcdir>
         <files>
+            aui.xpm aui.xrc
             artprov.xpm artprov.xrc basicdlg.xpm
             basicdlg.xrc controls.xpm controls.xrc custclas.xpm custclas.xrc
             derivdlg.xpm derivdlg.xrc fileopen.gif filesave.gif frame.xrc
Index: samples/xrc/xrcdemo.cpp
===================================================================
--- samples/xrc/xrcdemo.cpp	(revision 75244)
+++ samples/xrc/xrcdemo.cpp	(working copy)
@@ -41,6 +41,11 @@
     #include "wx/xrc/xh_ribbon.h"
 #endif // wxUSE_RIBBON
 
+#if wxUSE_AUI
+    #include "wx/xrc/xh_auinotbk.h"
+    #include "wx/xrc/xh_auitoolb.h"
+#endif // wxUSE_AUI
+
 #include "wx/cshelp.h"              // wxSimpleHelpProvider for helptext
 
 #include "myframe.h"
@@ -85,6 +90,11 @@
     wxXmlResource::Get()->AddHandler(new wxRibbonXmlHandler);
 #endif
 
+#if wxUSE_AUI
+    wxXmlResource::Get()->AddHandler(new wxAuiNotebookXmlHandler);
+    wxXmlResource::Get()->AddHandler(new wxAuiToolBarXmlHandler);
+#endif
+
     // Load all of the XRC files that will be used. You can put everything
     // into one giant XRC file if you wanted, but then they become more
     // diffcult to manage, and harder to reuse in later projects.
Index: src/xrc/xh_auitoolb.cpp
===================================================================
--- src/xrc/xh_auitoolb.cpp	(revision 0)
+++ src/xrc/xh_auitoolb.cpp	(working copy)
@@ -0,0 +1,266 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/xrc/xh_toolb.cpp
+// Purpose:     XRC resource for wxAuiToolBar
+// Author:      Vaclav Slavik
+// Created:     2000/08/11
+// Copyright:   (c) 2000 Vaclav Slavik
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#if wxUSE_XRC && wxUSE_AUI
+
+#include "wx/bitmap.h"
+#include "wx/xml/xml.h"
+
+#ifndef WX_PRECOMP
+    #include "wx/frame.h"
+    #include "wx/log.h"
+    #include "wx/toolbar.h"
+#endif
+
+#include "wx/xrc/xh_auitoolb.h"
+
+IMPLEMENT_DYNAMIC_CLASS(wxAuiToolBarXmlHandler, wxXmlResourceHandler)
+
+wxAuiToolBarXmlHandler::wxAuiToolBarXmlHandler()
+    : wxXmlResourceHandler()
+    , m_isInside(false)
+    , m_toolbar(NULL)
+{
+    XRC_ADD_STYLE(wxAUI_TB_TEXT);
+    XRC_ADD_STYLE(wxAUI_TB_NO_TOOLTIPS);
+    XRC_ADD_STYLE(wxAUI_TB_NO_AUTORESIZE);
+    XRC_ADD_STYLE(wxAUI_TB_GRIPPER);
+    XRC_ADD_STYLE(wxAUI_TB_OVERFLOW);
+    XRC_ADD_STYLE(wxAUI_TB_VERTICAL);
+    XRC_ADD_STYLE(wxAUI_TB_HORZ_LAYOUT);
+    XRC_ADD_STYLE(wxAUI_TB_HORIZONTAL);
+    XRC_ADD_STYLE(wxAUI_TB_PLAIN_BACKGROUND);
+    XRC_ADD_STYLE(wxAUI_TB_HORZ_TEXT);
+
+    AddWindowStyles();
+}
+
+wxObject *wxAuiToolBarXmlHandler::DoCreateResource()
+{
+    if (m_class == wxT("tool"))
+    {
+        if ( !m_toolbar )
+        {
+            ReportError("tool only allowed inside a wxAuiToolBar");
+            return NULL;
+        }
+
+        wxItemKind kind = wxITEM_NORMAL;
+        if (GetBool(wxT("radio")))
+            kind = wxITEM_RADIO;
+
+        if (GetBool(wxT("toggle")))
+        {
+            if ( kind != wxITEM_NORMAL )
+            {
+                ReportParamError
+                (
+                    "toggle",
+                    "tool can't have both <radio> and <toggle> properties"
+                );
+            }
+
+            kind = wxITEM_CHECK;
+        }
+#if wxUSE_MENUS
+        // check whether we have dropdown tag inside
+        wxMenu *menu = NULL; // menu for drop down items
+        wxXmlNode * const nodeDropdown = GetParamNode("dropdown");
+        if ( nodeDropdown )
+        {
+            // also check for the menu specified inside dropdown (it is
+            // optional and may be absent for e.g. dynamically-created
+            // menus)
+            wxXmlNode * const nodeMenu = nodeDropdown->GetChildren();
+            if ( nodeMenu )
+            {
+                wxObject *res = CreateResFromNode(nodeMenu, NULL);
+                menu = wxDynamicCast(res, wxMenu);
+                if ( !menu )
+                {
+                    ReportError
+                    (
+                        nodeMenu,
+                        "drop-down tool contents can only be a wxMenu"
+                    );
+                }
+
+                if ( nodeMenu->GetNext() )
+                {
+                    ReportError
+                    (
+                        nodeMenu->GetNext(),
+                        "unexpected extra contents under drop-down tool"
+                    );
+                }
+            }
+        }
+#endif
+        wxAuiToolBarItem * const tool =
+            m_toolbar->AddTool
+                       (
+                          GetID(),
+                          GetText(wxT("label")),
+                          GetBitmap(wxT("bitmap"), wxART_TOOLBAR, m_toolSize),
+                          GetBitmap(wxT("bitmap2"), wxART_TOOLBAR, m_toolSize),
+                          kind,
+                          GetText(wxT("tooltip")),
+                          GetText(wxT("longhelp")),
+                          NULL
+                       );
+
+        if ( GetBool(wxT("disabled")) )
+            m_toolbar->EnableTool(GetID(), false);
+
+#if wxUSE_MENUS
+        if (menu) {
+            tool->SetHasDropDown(true);
+            tool->SetUserData(m_menu_handler.RegisterMenu(m_toolbar, GetID(), menu));
+        }
+#endif
+        
+        return m_toolbar; // must return non-NULL
+    }
+
+    else if (m_class == wxT("separator") || m_class == wxT("space"))
+    {
+        if ( !m_toolbar )
+        {
+            ReportError("separators only allowed inside wxAuiToolBar");
+            return NULL;
+        }
+
+        if ( m_class == wxT("separator") )
+            m_toolbar->AddSeparator();
+        else
+            m_toolbar->AddStretchSpacer();
+
+        return m_toolbar; // must return non-NULL
+    }
+
+    else /*<object class="wxAuiToolBar">*/
+    {
+        int style = GetStyle(wxT("style"), wxNO_BORDER | wxTB_HORIZONTAL);
+#ifdef __WXMSW__
+        if (!(style & wxNO_BORDER)) style |= wxNO_BORDER;
+#endif
+
+        XRC_MAKE_INSTANCE(toolbar, wxAuiToolBar)
+
+        toolbar->Create(m_parentAsWindow,
+                         GetID(),
+                         GetPosition(),
+                         GetSize(),
+                         style);
+        toolbar->SetName(GetName());
+        SetupWindow(toolbar);
+
+        m_toolSize = GetSize(wxT("bitmapsize"));
+        if (!(m_toolSize == wxDefaultSize))
+            toolbar->SetToolBitmapSize(m_toolSize);
+        wxSize margins = GetSize(wxT("margins"));
+        if (!(margins == wxDefaultSize))
+            toolbar->SetMargins(margins.x, margins.y);
+        long packing = GetLong(wxT("packing"), -1);
+        if (packing != -1)
+            toolbar->SetToolPacking(packing);
+        long separation = GetLong(wxT("separation"), -1);
+        if (separation != -1)
+            toolbar->SetToolSeparation(separation);
+
+        wxXmlNode *children_node = GetParamNode(wxT("object"));
+        if (!children_node)
+           children_node = GetParamNode(wxT("object_ref"));
+
+        if (children_node == NULL) return toolbar;
+
+        m_isInside = true;
+        m_toolbar = toolbar;
+
+        wxXmlNode *n = children_node;
+
+        while (n)
+        {
+            if ((n->GetType() == wxXML_ELEMENT_NODE) &&
+                (n->GetName() == wxT("object") || n->GetName() == wxT("object_ref")))
+            {
+                wxObject *created = CreateResFromNode(n, toolbar, NULL);
+                wxControl *control = wxDynamicCast(created, wxControl);
+                if (!IsOfClass(n, wxT("tool")) &&
+                    !IsOfClass(n, wxT("separator")) &&
+                    !IsOfClass(n, wxT("space")) &&
+                    control != NULL)
+                    toolbar->AddControl(control);
+            }
+            n = n->GetNext();
+        }
+
+        m_isInside = false;
+        m_toolbar = NULL;
+
+        toolbar->Realize();
+
+        return toolbar;
+    }
+}
+
+bool wxAuiToolBarXmlHandler::CanHandle(wxXmlNode *node)
+{
+    return ((!m_isInside && IsOfClass(node, wxT("wxAuiToolBar"))) ||
+            (m_isInside && IsOfClass(node, wxT("tool"))) ||
+            (m_isInside && IsOfClass(node, wxT("space"))) ||
+            (m_isInside && IsOfClass(node, wxT("separator"))));
+}
+
+void wxAuiToolBarXmlHandler::MenuHandler::OnDropDown(wxAuiToolBarEvent& event)
+{
+    if (event.IsDropDownClicked())
+    {
+        wxAuiToolBar *toobar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
+        if (toobar != NULL)
+        {
+            wxAuiToolBarItem *item = toobar->FindTool(event.GetId());
+            if (item != NULL)
+            {
+                wxMenu *menu = wxDynamicCast(m_menus[item->GetUserData()], wxMenu);
+                if (menu != NULL)
+                {
+                    wxRect rect = item->GetSizerItem()->GetRect();
+                    toobar->PopupMenu(menu, rect.GetRight() - 10, rect.GetBottom());
+                }
+            }
+        }
+    }
+    else
+    {
+        event.Skip();
+    }
+}
+
+unsigned long wxAuiToolBarXmlHandler::MenuHandler::RegisterMenu(wxAuiToolBar *toolbar,
+                                                                int id,
+                                                                wxMenu *menu)
+ {
+    m_menus.push_back(menu);
+    toolbar->Bind(wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN,
+                  &wxAuiToolBarXmlHandler::MenuHandler::OnDropDown,
+                  this,
+                  id);
+
+    return m_menus.Count() - 1;
+}
+
+#endif // wxUSE_XRC && wxUSE_TOOLBAR

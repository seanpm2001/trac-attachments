diff -uNr -x setup.h wxWidgets-trunk\include/wx/msw/tooltip.h wxWidgets-work\include/wx/msw/tooltip.h
--- wxWidgets-trunk\include/wx/msw/tooltip.h	2013-12-29 11:01:33.962608000 +0100
+++ wxWidgets-work\include/wx/msw/tooltip.h	2014-02-01 13:01:46.436664600 +0100
@@ -94,6 +94,9 @@
     // remove this tooltip from the tooltip control
     void Remove();
 
+    // adjust tooltip max width based on current tooltip text
+    bool AdjustMaxWidth();
+
     wxString  m_text;           // tooltip text
     wxWindow* m_window;         // main window we're associated with
     wxToolTipOtherWindows *m_others; // other windows associated with it or NULL
diff -uNr wxWidgets-trunk\src/msw/tooltip.cpp wxWidgets-work\src/msw/tooltip.cpp
--- wxWidgets-trunk\src/msw/tooltip.cpp	2013-12-29 11:00:43.078017600 +0100
+++ wxWidgets-work\src/msw/tooltip.cpp	2014-02-01 13:33:29.227664600 +0100
@@ -406,78 +406,7 @@
     }
 
 #ifdef TTM_SETMAXTIPWIDTH
-    if ( wxApp::GetComCtl32Version() >= 470 )
-    {
-        // use TTM_SETMAXTIPWIDTH to make tooltip multiline using the
-        // extent of its first line as max value
-        HFONT hfont = (HFONT)
-            SendTooltipMessage(GetToolTipCtrl(), WM_GETFONT, 0);
-
-        if ( !hfont )
-        {
-            hfont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
-            if ( !hfont )
-            {
-                wxLogLastError(wxT("GetStockObject(DEFAULT_GUI_FONT)"));
-            }
-        }
-
-        MemoryHDC hdc;
-        if ( !hdc )
-        {
-            wxLogLastError(wxT("CreateCompatibleDC(NULL)"));
-        }
-
-        if ( !SelectObject(hdc, hfont) )
-        {
-            wxLogLastError(wxT("SelectObject(hfont)"));
-        }
-
-        // find the width of the widest line
-        int maxWidth = 0;
-        wxStringTokenizer tokenizer(m_text, wxT("\n"));
-        while ( tokenizer.HasMoreTokens() )
-        {
-            const wxString token = tokenizer.GetNextToken();
-
-            SIZE sz;
-            if ( !::GetTextExtentPoint32(hdc, token.t_str(),
-                                         token.length(), &sz) )
-            {
-                wxLogLastError(wxT("GetTextExtentPoint32"));
-            }
-
-            if ( sz.cx > maxWidth )
-                maxWidth = sz.cx;
-        }
-
-        // limit size to ms_maxWidth, if set
-        if ( ms_maxWidth == 0 )
-        {
-            // this is more or less arbitrary but seems to work well
-            static const int DEFAULT_MAX_WIDTH = 400;
-
-            ms_maxWidth = wxGetClientDisplayRect().width / 2;
-
-            if ( ms_maxWidth > DEFAULT_MAX_WIDTH )
-                ms_maxWidth = DEFAULT_MAX_WIDTH;
-        }
-
-        if ( ms_maxWidth != -1 && maxWidth > ms_maxWidth )
-            maxWidth = ms_maxWidth;
-
-        // only set a new width if it is bigger than the current setting:
-        // otherwise adding a tooltip with shorter line(s) than a previous
-        // one would result in breaking the longer lines unnecessarily as
-        // all our tooltips share the same maximal width
-        if ( maxWidth > SendTooltipMessage(GetToolTipCtrl(),
-                                           TTM_GETMAXTIPWIDTH, 0) )
-        {
-            SendTooltipMessage(GetToolTipCtrl(), TTM_SETMAXTIPWIDTH,
-                               wxUIntToPtr(maxWidth));
-        }
-    }
-    else
+    if ( !AdjustMaxWidth() )
 #endif // TTM_SETMAXTIPWIDTH
     {
         // replace the '\n's with spaces because otherwise they appear as
@@ -546,6 +475,15 @@
 {
     m_text = tip;
 
+#ifdef TTM_SETMAXTIPWIDTH
+    if ( !AdjustMaxWidth() )
+#endif // TTM_SETMAXTIPWIDTH
+    {
+        // replace the '\n's with spaces because otherwise they appear as
+        // unprintable characters in the tooltip string
+        m_text.Replace(wxT("\n"), wxT(" "));
+    }
+
     DoForAllWindows(&wxToolTip::DoSetTip);
 }
 
@@ -564,6 +502,85 @@
     (void)SendTooltipMessage(GetToolTipCtrl(), TTM_UPDATETIPTEXT, &ti);
 }
 
+bool wxToolTip::AdjustMaxWidth()
+{
+    if ( wxApp::GetComCtl32Version() >= 470 )
+    {
+        // use TTM_SETMAXTIPWIDTH to make tooltip multiline using the
+        // extent of its first line as max value
+        HFONT hfont = (HFONT)
+            SendTooltipMessage(GetToolTipCtrl(), WM_GETFONT, 0);
+
+        if ( !hfont )
+        {
+            hfont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
+            if ( !hfont )
+            {
+                wxLogLastError(wxT("GetStockObject(DEFAULT_GUI_FONT)"));
+            }
+        }
+
+        MemoryHDC hdc;
+        if ( !hdc )
+        {
+            wxLogLastError(wxT("CreateCompatibleDC(NULL)"));
+        }
+
+        if ( !SelectObject(hdc, hfont) )
+        {
+            wxLogLastError(wxT("SelectObject(hfont)"));
+        }
+
+        // find the width of the widest line
+        int maxWidth = 0;
+        wxStringTokenizer tokenizer(m_text, wxT("\n"));
+        while ( tokenizer.HasMoreTokens() )
+        {
+            const wxString token = tokenizer.GetNextToken();
+
+            SIZE sz;
+            if ( !::GetTextExtentPoint32(hdc, token.t_str(),
+                                         token.length(), &sz) )
+            {
+                wxLogLastError(wxT("GetTextExtentPoint32"));
+            }
+
+            if ( sz.cx > maxWidth )
+                maxWidth = sz.cx;
+        }
+
+        // limit size to ms_maxWidth, if set
+        if ( ms_maxWidth == 0 )
+        {
+            // this is more or less arbitrary but seems to work well
+            static const int DEFAULT_MAX_WIDTH = 400;
+
+            ms_maxWidth = wxGetClientDisplayRect().width / 2;
+
+            if ( ms_maxWidth > DEFAULT_MAX_WIDTH )
+                ms_maxWidth = DEFAULT_MAX_WIDTH;
+        }
+
+        if ( ms_maxWidth != -1 && maxWidth > ms_maxWidth )
+            maxWidth = ms_maxWidth;
+
+        // only set a new width if it is bigger than the current setting:
+        // otherwise adding a tooltip with shorter line(s) than a previous
+        // one would result in breaking the longer lines unnecessarily as
+        // all our tooltips share the same maximal width
+        if ( maxWidth > SendTooltipMessage(GetToolTipCtrl(),
+                                           TTM_GETMAXTIPWIDTH, 0) )
+        {
+            SendTooltipMessage(GetToolTipCtrl(), TTM_SETMAXTIPWIDTH,
+                               wxUIntToPtr(maxWidth));
+        }
+
+        return true;
+    }
+
+    return false;
+}
+
 void wxToolTip::DoForAllWindows(void (wxToolTip::*func)(WXHWND))
 {
     if ( m_window )

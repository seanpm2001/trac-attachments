--- include/wx/mac/carbon/private.h	2006-12-08 10:01:45.000000000 -0500
+++ include/wx/mac/carbon/private.h	2007-04-20 12:22:57.000000000 -0400
@@ -640,6 +640,7 @@
     virtual OSStatus GetRegion( ControlPartCode partCode , RgnHandle region );
     virtual OSStatus SetZOrder( bool above , wxMacControl* other );
 
+    bool    IsCompositing() { return m_isCompositing; }
     bool    IsRootControl() { return m_isRootControl; }
 
     wxWindow* GetPeer() const
@@ -656,6 +657,7 @@
     long        m_windowStyle;
     wxWindow*   m_peer;
     bool        m_needsFocusRect;
+    bool        m_isCompositing;
     bool        m_isRootControl;
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxMacControl)
 };
--- include/wx/mac/carbon/toplevel.h	2006-08-11 00:01:55.000000000 -0400
+++ include/wx/mac/carbon/toplevel.h	2007-04-20 12:22:58.000000000 -0400
@@ -99,6 +99,7 @@
 
     virtual void MacSetBackgroundBrush( const wxBrush &brush ) ;
 
+    bool MacUsesCompositing() { return m_macUsesCompositing; }
     virtual void MacInstallTopLevelWindowEventHandler() ;
 
     bool MacGetMetalAppearance() const ;
@@ -125,6 +126,7 @@
     // should the frame be maximized when it will be shown? set by Maximize()
     // when it is called while the frame is hidden
     bool m_maximizeOnShow;
+    bool m_macUsesCompositing;
  
     WXWindow m_macWindow ;
 
--- src/mac/carbon/textctrl.cpp	2007-01-05 11:28:03.000000000 -0500
+++ src/mac/carbon/textctrl.cpp	2007-04-27 15:23:07.000000000 -0400
@@ -2444,6 +2444,7 @@
         wxMacWindowClipper cl( textctrl ) ;
 
 #ifdef __WXMAC_OSX__
+        bool isCompositing = textctrl->MacGetTopLevelWindow()->MacUsesCompositing() ;
         if ( m_sbHorizontal || m_sbVertical )
         {
             int w = bounds.right - bounds.left ;
@@ -2458,6 +2459,9 @@
                 sbBounds.right = w + 1 ;
                 sbBounds.bottom = h + 1 ;
 
+                if ( !isCompositing )
+                    OffsetRect( &sbBounds , m_txnControlBounds.left , m_txnControlBounds.top ) ;
+
                 SetControlBounds( m_sbHorizontal , &sbBounds ) ;
                 SetControlViewSize( m_sbHorizontal , w ) ;
             }
@@ -2471,6 +2475,9 @@
                 sbBounds.right = w + 1 ;
                 sbBounds.bottom = m_sbHorizontal ? h - 14 : h + 1 ;
 
+                if ( !isCompositing )
+                    OffsetRect( &sbBounds , m_txnControlBounds.left , m_txnControlBounds.top ) ;
+
                 SetControlBounds( m_sbVertical , &sbBounds ) ;
                 SetControlViewSize( m_sbVertical , h ) ;
             }
@@ -2559,11 +2566,13 @@
         else
         {
             // sometimes we get the coords also in control local coordinates, therefore test again
-            int x = 0 , y = 0 ;
-            textctrl->MacClientToRootWindow( &x , &y ) ;
-            where.h += x ;
-            where.v += y ;
-
+            if ( textctrl->MacGetTopLevelWindow()->MacUsesCompositing() )
+            {
+                int x = 0 , y = 0 ;
+                textctrl->MacClientToRootWindow( &x , &y ) ;
+                where.h += x ;
+                where.v += y ;
+            }
             if (PtInRect( where, &m_txnControlBounds ))
                 result = kControlEditTextPart ;
         }
@@ -2582,10 +2591,13 @@
         Point startPt = { y , x } ;
 
         // for compositing, we must convert these into toplevel window coordinates, because hittesting expects them
-        int x = 0 , y = 0 ;
-        textctrl->MacClientToRootWindow( &x , &y ) ;
-        startPt.h += x ;
-        startPt.v += y ;
+        if ( textctrl->MacGetTopLevelWindow()->MacUsesCompositing() )
+        {
+            int x = 0 , y = 0 ;
+            textctrl->MacClientToRootWindow( &x , &y ) ;
+            startPt.h += x ;
+            startPt.v += y ;
+        }
 
         switch (MacControlUserPaneHitTestProc( startPt.h , startPt.v ))
         {
--- src/mac/carbon/toolbar.cpp	2007-04-25 20:08:09.000000000 -0400
+++ src/mac/carbon/toolbar.cpp	2007-04-27 14:58:24.000000000 -0400
@@ -419,6 +407,15 @@
     int mac_x = position.x;
     int mac_y = position.y;
 
+    if ( ! GetToolBar()->MacGetTopLevelWindow()->MacUsesCompositing() )
+    {
+        int x , y ;
+        x = y = 0 ;
+        GetToolBar()->MacWindowToRootWindow( &x , &y ) ;
+        mac_x += x;
+        mac_y += y;
+    }
+
     if ( IsButton() )
     {
         Rect contrlRect;
--- src/mac/carbon/toplevel.cpp	2007-01-19 22:23:40.000000000 -0500
+++ src/mac/carbon/toplevel.cpp	2007-04-27 14:43:06.000000000 -0400
@@ -407,7 +418,7 @@
                     {
                         Point testLocation = location ;
 
-                        if ( toplevelWindow )
+                        if ( toplevelWindow && toplevelWindow->MacUsesCompositing() )
                         {
                             testLocation.h -= r.left ;
                             testLocation.v -= r.top ;
@@ -428,7 +439,7 @@
 ControlRef wxMacFindControlUnderMouse( wxTopLevelWindowMac* toplevelWindow , const Point& location , WindowRef window , ControlPartCode *outPart )
 {
 #if TARGET_API_MAC_OSX
-    if ( UMAGetSystemVersion() >= 0x1030 )
+    if ( UMAGetSystemVersion() >= 0x1030 && ( toplevelWindow == 0 || toplevelWindow->MacUsesCompositing() ) )
         return FindControlUnderMouse( location , window , outPart ) ;
 #endif
 
@@ -610,7 +621,8 @@
                     EventModifiers modifiers = cEvent.GetParameter<EventModifiers>(kEventParamKeyModifiers, typeUInt32) ;
                     Point clickLocation = windowMouseLocation ;
 
-                    currentMouseWindow->MacRootWindowToWindow( &clickLocation.h , &clickLocation.v ) ;
+                    if ( toplevelWindow->MacUsesCompositing() )
+                        currentMouseWindow->MacRootWindowToWindow( &clickLocation.h , &clickLocation.v ) ;
 
                     HandleControlClick( (ControlRef) currentMouseWindow->GetHandle() , clickLocation ,
                         modifiers , (ControlActionUPP ) -1 ) ;
@@ -654,15 +666,17 @@
         {
             EventModifiers modifiers = cEvent.GetParameter<EventModifiers>(kEventParamKeyModifiers, typeUInt32) ;
             Point clickLocation = windowMouseLocation ;
+            if ( toplevelWindow->MacUsesCompositing() )
+            {
 #if TARGET_API_MAC_OSX
-            HIPoint hiPoint ;
-            hiPoint.x = clickLocation.h ;
-            hiPoint.y = clickLocation.v ;
-            HIViewConvertPoint( &hiPoint , (ControlRef) toplevelWindow->GetHandle() , control  ) ;
-            clickLocation.h = (int)hiPoint.x ;
-            clickLocation.v = (int)hiPoint.y ;
+                HIPoint hiPoint ;
+                hiPoint.x = clickLocation.h ;
+                hiPoint.y = clickLocation.v ;
+                HIViewConvertPoint( &hiPoint , (ControlRef) toplevelWindow->GetHandle() , control  ) ;
+                clickLocation.h = (int)hiPoint.x ;
+                clickLocation.v = (int)hiPoint.y ;
 #endif // TARGET_API_MAC_OSX
-
+            }
             HandleControlClick( control , clickLocation , modifiers , (ControlActionUPP ) -1 ) ;
             result = noErr ;
         }
@@ -889,6 +903,7 @@
     m_iconized =
     m_maximizeOnShow = false;
     m_macWindow = NULL ;
+    m_macUsesCompositing = true ;
 
     m_macEventHandler = NULL ;
     m_macFullScreenData = NULL ;
@@ -1133,6 +1148,8 @@
     else if ( HasFlag( wxFRAME_DRAWER ) )
     {
         wclass = kDrawerWindowClass;
+        // we must force compositing on a drawer
+        m_macUsesCompositing = true ;
     }
 #endif  //10.2 and up
     else
@@ -1173,7 +1190,8 @@
     if ( HasFlag( wxFRAME_FLOAT_ON_PARENT ) )
         group = GetWindowGroupOfClass(kFloatingWindowClass) ;
         
-    attr |= kWindowCompositingAttribute;
+    if ( m_macUsesCompositing )
+        attr |= kWindowCompositingAttribute;
 #if 0 // wxMAC_USE_CORE_GRAPHICS ; TODO : decide on overall handling of high dpi screens (pixel vs userscale)
     attr |= kWindowFrameworkScaledAttribute;
 #endif
@@ -1215,14 +1233,17 @@
     UMASetWTitle( (WindowRef) m_macWindow , title , m_font.GetEncoding() ) ;
     m_peer = new wxMacControl(this , true /*isRootControl*/) ;
 
-    // There is a bug in 10.2.X for ::GetRootControl returning the window view instead of
-    // the content view, so we have to retrieve it explicitly
-    HIViewFindByID( HIViewGetRoot( (WindowRef) m_macWindow ) , kHIViewWindowContentID ,
-        m_peer->GetControlRefAddr() ) ;
-    if ( !m_peer->Ok() )
+    if ( m_macUsesCompositing )
     {
-        // compatibility mode fallback
-        GetRootControl( (WindowRef) m_macWindow , m_peer->GetControlRefAddr() ) ;
+        // There is a bug in 10.2.X for ::GetRootControl returning the window view instead of
+        // the content view, so we have to retrieve it explicitly
+        HIViewFindByID( HIViewGetRoot( (WindowRef) m_macWindow ) , kHIViewWindowContentID ,
+            m_peer->GetControlRefAddr() ) ;
+        if ( !m_peer->Ok() )
+        {
+            // compatibility mode fallback
+            GetRootControl( (WindowRef) m_macWindow , m_peer->GetControlRefAddr() ) ;
+        }
     }
 
     // the root control level handler
@@ -1447,7 +1468,7 @@
     wxTopLevelWindowBase::SetExtraStyle( exStyle ) ;
 
 #if TARGET_API_MAC_OSX
-    if ( m_macWindow != NULL )
+    if ( m_macUsesCompositing && m_macWindow != NULL )
     {
         bool metal = GetExtraStyle() & wxFRAME_EX_METAL ;
         if ( MacGetMetalAppearance() != metal )
@@ -1519,6 +1540,9 @@
 void wxTopLevelWindowMac::MacSetMetalAppearance( bool set )
 {
 #if TARGET_API_MAC_OSX
+    wxASSERT_MSG( m_macUsesCompositing ,
+        wxT("Cannot set metal appearance on a non-compositing window") ) ;
+
     MacChangeWindowAttributes( set ? kWindowMetalAttribute : kWindowNoAttributes ,
         set ? kWindowNoAttributes : kWindowMetalAttribute ) ;
 #endif
@@ -1548,31 +1572,48 @@
 
 void wxTopLevelWindowMac::MacPerformUpdates()
 {
+    if ( m_macUsesCompositing )
+    {
 #if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3
-    // for composited windows this also triggers a redraw of all
-    // invalid views in the window
-    if ( UMAGetSystemVersion() >= 0x1030 )
-        HIWindowFlush((WindowRef) m_macWindow) ;
-    else
+        // for composited windows this also triggers a redraw of all
+        // invalid views in the window
+        if ( UMAGetSystemVersion() >= 0x1030 )
+            HIWindowFlush((WindowRef) m_macWindow) ;
+        else
 #endif
-    {
-        // the only way to trigger the redrawing on earlier systems is to call
-        // ReceiveNextEvent
-
-        EventRef currentEvent = (EventRef) wxTheApp->MacGetCurrentEvent() ;
-        UInt32 currentEventClass = 0 ;
-        if ( currentEvent != NULL )
         {
-            currentEventClass = ::GetEventClass( currentEvent ) ;
-            ::GetEventKind( currentEvent ) ;
+            // the only way to trigger the redrawing on earlier systems is to call
+            // ReceiveNextEvent
+
+            EventRef currentEvent = (EventRef) wxTheApp->MacGetCurrentEvent() ;
+            UInt32 currentEventClass = 0 ;
+            if ( currentEvent != NULL )
+            {
+                currentEventClass = ::GetEventClass( currentEvent ) ;
+                ::GetEventKind( currentEvent ) ;
+            }
+
+            if ( currentEventClass != kEventClassMenu )
+            {
+                // when tracking a menu, strange redraw errors occur if we flush now, so leave..
+                EventRef theEvent;
+                ReceiveNextEvent( 0 , NULL , kEventDurationNoWait , false , &theEvent ) ;
+            }
         }
+    }
+    else
+    {
+        BeginUpdate( (WindowRef) m_macWindow ) ;
 
-        if ( currentEventClass != kEventClassMenu )
+        RgnHandle updateRgn = NewRgn();
+        if ( updateRgn )
         {
-            // when tracking a menu, strange redraw errors occur if we flush now, so leave..
-            EventRef theEvent;
-            ReceiveNextEvent( 0 , NULL , kEventDurationNoWait , false , &theEvent ) ;
+            GetPortVisibleRegion( GetWindowPort( (WindowRef)m_macWindow ), updateRgn );
+            UpdateControls(  (WindowRef)m_macWindow , updateRgn ) ;
+            DisposeRgn( updateRgn );
         }
+        EndUpdate( (WindowRef)m_macWindow ) ;
+        QDFlushPortBuffer( GetWindowPort( (WindowRef)m_macWindow ) , NULL ) ;
     }
 }
 
--- src/mac/carbon/uma.cpp	2006-10-14 11:24:58.000000000 -0400
+++ src/mac/carbon/uma.cpp	2007-04-20 12:23:15.000000000 -0400
@@ -750,7 +750,7 @@
     WindowRef tlwref = GetControlOwner( theControl ) ;
 
     wxTopLevelWindowMac* tlwwx = wxFindWinFromMacWindow( tlwref ) ;
-    if ( tlwwx != NULL )
+    if ( tlwwx != NULL && tlwwx->MacUsesCompositing() )
     {
         ControlRef rootControl = tlwwx->GetPeer()->GetControlRef() ;
         HIPoint hiPoint = CGPointMake( 0 , 0 ) ;
--- src/mac/carbon/utils.cpp	2007-02-05 17:01:43.000000000 -0500
+++ src/mac/carbon/utils.cpp	2007-04-20 12:23:15.000000000 -0400
@@ -833,12 +833,14 @@
     Init();
     m_peer = peer;
     m_isRootControl = isRootControl;
+    m_isCompositing = peer->MacGetTopLevelWindow()->MacUsesCompositing();
 }
 
 wxMacControl::wxMacControl( wxWindow* peer , ControlRef control )
 {
     Init();
     m_peer = peer;
+    m_isCompositing = peer->MacGetTopLevelWindow()->MacUsesCompositing();
     m_controlRef = control;
 }
 
@@ -846,6 +848,7 @@
 {
     Init();
     m_peer = peer;
+    m_isCompositing = peer->MacGetTopLevelWindow()->MacUsesCompositing();
     m_controlRef = (ControlRef) control;
 }
 
@@ -858,6 +861,7 @@
     m_peer = NULL;
     m_controlRef = NULL;
     m_needsFocusRect = false;
+    m_isCompositing = true;
     m_isRootControl = false;
 }
 
@@ -1126,7 +1131,21 @@
 
 bool wxMacControl::GetNeedsDisplay() const
 {
-    return HIViewGetNeedsDisplay( m_controlRef );
+    if ( m_isCompositing )
+        return HIViewGetNeedsDisplay( m_controlRef );
+    else
+    {
+        if ( !IsVisible() )
+            return false ;
+
+        Rect controlBounds ;
+        GetControlBounds( m_controlRef, &controlBounds ) ;
+        RgnHandle rgn = NewRgn() ;
+        GetWindowRegion ( GetControlOwner( m_controlRef ) , kWindowUpdateRgn , rgn ) ;
+        Boolean intersect = RectInRgn ( &controlBounds , rgn ) ;
+        DisposeRgn( rgn ) ;
+        return intersect ;
+    }
 }
 
 void wxMacControl::SetNeedsDisplay( RgnHandle where )
@@ -1134,7 +1153,17 @@
     if ( !IsVisible() )
         return;
 
-    HIViewSetNeedsDisplayInRegion( m_controlRef , where , true );
+    if ( m_isCompositing )
+        HIViewSetNeedsDisplayInRegion( m_controlRef , where , true );
+    else
+    {
+        Rect controlBounds ; 
+        GetControlBounds( m_controlRef, &controlBounds ) ;
+        RgnHandle update = NewRgn() ;
+        CopyRgn( where , update ) ;
+        OffsetRgn( update , controlBounds.left , controlBounds.top ) ;
+        InvalWindowRgn( GetControlOwner( m_controlRef) , update ) ; 
+    }
 }
 
 void wxMacControl::SetNeedsDisplay( Rect* where )
@@ -1142,41 +1171,127 @@
     if ( !IsVisible() )
         return;
 
-    if ( where != NULL )
+    if ( m_isCompositing )
     {
-        RgnHandle update = NewRgn();
-        RectRgn( update , where );
-        HIViewSetNeedsDisplayInRegion( m_controlRef , update , true );
-        DisposeRgn( update );
+        if ( where != NULL )
+        {
+            RgnHandle update = NewRgn();
+            RectRgn( update , where );
+            HIViewSetNeedsDisplayInRegion( m_controlRef , update , true );
+            DisposeRgn( update );
+        }
+        else
+            HIViewSetNeedsDisplay( m_controlRef , true );
     }
     else
-        HIViewSetNeedsDisplay( m_controlRef , true );
+    {
+        Rect controlBounds ; 
+        GetControlBounds( m_controlRef, &controlBounds ) ;
+        if ( where )
+        {
+            Rect whereLocal = *where ;
+            OffsetRect( &whereLocal , controlBounds.left , controlBounds.top ) ;
+            SectRect( &controlBounds , &whereLocal, &controlBounds ) ;
+        }
+        InvalWindowRect( GetControlOwner( m_controlRef) , &controlBounds ) ; 
+    }
 }
 
 void  wxMacControl::Convert( wxPoint *pt , wxMacControl *from , wxMacControl *to )
 {
-    HIPoint hiPoint;
+    if ( from->m_peer->MacGetTopLevelWindow()->MacUsesCompositing() )
+    {
+        HIPoint hiPoint;
 
-    hiPoint.x = pt->x;
-    hiPoint.y = pt->y;
-    HIViewConvertPoint( &hiPoint , from->m_controlRef , to->m_controlRef  );
-    pt->x = (int)hiPoint.x;
-    pt->y = (int)hiPoint.y;
+        hiPoint.x = pt->x;
+        hiPoint.y = pt->y;
+        HIViewConvertPoint( &hiPoint , from->m_controlRef , to->m_controlRef  );
+        pt->x = (int)hiPoint.x;
+        pt->y = (int)hiPoint.y;
+    }
+    else
+    {
+        Rect fromRect ;
+        Rect toRect ;
+        GetControlBounds( from->m_controlRef , &fromRect ) ;
+        GetControlBounds( to->m_controlRef , &toRect ) ;
+        if ( from->m_isRootControl )
+            fromRect.left = fromRect.top = 0 ;
+        if ( to->m_isRootControl )
+            toRect.left = toRect.top = 0 ; 
+                    
+        pt->x = pt->x + fromRect.left - toRect.left ;
+        pt->y = pt->y + fromRect.top - toRect.top ;
+    }
 }
 
 void wxMacControl::SetRect( Rect *r )
 {
+    if ( m_isCompositing )
+    {
         //A HIRect is actually a CGRect on OSX - which consists of two structures -
         //CGPoint and CGSize, which have two floats each
         HIRect hir = { { r->left , r->top }, { r->right - r->left , r->bottom - r->top } };
         HIViewSetFrame ( m_controlRef , &hir );
         // eventuall we might have to do a SetVisibility( false , true );
         // before and a SetVisibility( true , true ); after
+    }
+    else
+    {
+        bool vis = IsVisible() ;
+        if ( vis )
+        {
+            Rect former ;
+            GetControlBounds( m_controlRef , &former ) ;
+            InvalWindowRect( GetControlOwner( m_controlRef ) , &former ) ;
+        }
+        
+        Rect controlBounds = *r ;
+        
+        // since the rect passed in is always (even in non-compositing) relative
+        // to the (native) parent, we have to adjust to window relative here
+        wxMacControl* parent = m_peer->GetParent()->GetPeer() ;
+        if( parent->m_isRootControl == false )
+        {
+            Rect superRect ;
+            GetControlBounds( parent->m_controlRef , &superRect ) ;
+            OffsetRect( &controlBounds , superRect.left , superRect.top ) ;
+        }
+        
+        SetControlBounds( m_controlRef , &controlBounds ) ;
+        if ( vis )
+        {
+            InvalWindowRect( GetControlOwner( m_controlRef ) , &controlBounds ) ;
+        }
+    }
 }
 
 void wxMacControl::GetRect( Rect *r )
 {
     GetControlBounds( m_controlRef , r );
+    if ( m_isCompositing == false )
+    {
+        // correct the case of the root control 
+        if ( m_isRootControl )
+        {
+            WindowRef wr = GetControlOwner( m_controlRef ) ;
+            GetWindowBounds( wr , kWindowContentRgn , r ) ;
+            r->right -= r->left ;
+            r->bottom -= r->top ;
+            r->left = 0 ;
+            r->top = 0 ;
+        }
+        else 
+        {
+            wxMacControl* parent = m_peer->GetParent()->GetPeer() ;
+            if( parent->m_isRootControl == false )
+            {
+                Rect superRect ;
+                GetControlBounds( parent->m_controlRef , &superRect ) ;
+                OffsetRect( r , -superRect.left , -superRect.top ) ;
+            }
+        }
+    }
 }
 
 void wxMacControl::GetRectInWindowCoords( Rect *r )
@@ -1211,6 +1326,16 @@
 OSStatus wxMacControl::GetRegion( ControlPartCode partCode , RgnHandle region )
 {
     OSStatus err = GetControlRegion( m_controlRef , partCode , region );
+    if ( m_isCompositing == false )
+    {
+        if ( !m_isRootControl )
+        {
+            Rect r ;
+            GetControlBounds(m_controlRef, &r ) ;
+            if ( !EmptyRgn( region ) )
+                OffsetRgn( region , -r.left , -r.top ) ; 
+        }
+    }
     return err;
 }
 
@@ -1260,8 +1385,24 @@
 {
     wxASSERT( r != NULL );
 
-    HIRect scrollarea = CGRectMake( r->x , r->y , r->width , r->height);
-    HIViewScrollRect ( m_controlRef , &scrollarea , dx ,dy );
+    if ( m_isCompositing )
+    {
+        HIRect scrollarea = CGRectMake( r->x , r->y , r->width , r->height);
+        HIViewScrollRect ( m_controlRef , &scrollarea , dx ,dy );
+    }
+    else
+    {
+        Rect bounds ;
+        GetControlBounds( m_controlRef , &bounds ) ;
+        bounds.left += r->x ;
+        bounds.top += r->y ;
+        bounds.bottom = bounds.top + r->height ;
+        bounds.right = bounds.left + r->width ;
+        wxMacWindowClipper clip( m_peer ) ;
+        RgnHandle updateRgn = NewRgn() ;
+        ::ScrollRect( &bounds , dx , dy , updateRgn ) ;
+        InvalWindowRgn( GetControlOwner( m_controlRef )  ,  updateRgn ) ;
+    }
 }
 
 OSType wxMacCreator = 'WXMC';
--- src/mac/carbon/window.cpp	2007-04-07 07:41:12.000000000 -0400
+++ src/mac/carbon/window.cpp	2007-04-20 12:23:15.000000000 -0400
@@ -210,6 +210,18 @@
                 RgnHandle updateRgn = NULL ;
                 RgnHandle allocatedRgn = NULL ;
                 wxRegion visRegion = thisWindow->MacGetVisibleRegion() ;
+                Rect controlBounds ;
+                if ( thisWindow->GetPeer()->IsCompositing() == false )
+                {
+                    if ( thisWindow->GetPeer()->IsRootControl() == false )
+                    {
+                        GetControlBounds( thisWindow->GetPeer()->GetControlRef() , &controlBounds ) ;
+                    }
+                    else
+                    {
+                        thisWindow->GetPeer()->GetRect( &controlBounds ) ;
+                    }
+                }
 
                 if ( cEvent.GetParameter<RgnHandle>(kEventParamRgnHandle, &updateRgn) != noErr )
                 {
@@ -217,16 +229,28 @@
                 }
                 else
                 {
-                    if ( thisWindow->MacGetLeftBorderSize() != 0 || thisWindow->MacGetTopBorderSize() != 0 )
+                    if ( thisWindow->GetPeer()->IsCompositing() == false )
                     {
-                        // as this update region is in native window locals we must adapt it to wx window local
                         allocatedRgn = NewRgn() ;
                         CopyRgn( updateRgn , allocatedRgn ) ;
-
+                        OffsetRgn( allocatedRgn , -controlBounds.left , -controlBounds.top ) ;
                         // hide the given region by the new region that must be shifted
                         wxMacNativeToWindow( thisWindow , allocatedRgn ) ;
                         updateRgn = allocatedRgn ;
                     }
+                    else
+                    {
+                        if ( thisWindow->MacGetLeftBorderSize() != 0 || thisWindow->MacGetTopBorderSize() != 0 )
+                        {
+                            // as this update region is in native window locals we must adapt it to wx window local
+                            allocatedRgn = NewRgn() ;
+                            CopyRgn( updateRgn , allocatedRgn ) ;
+
+                            // hide the given region by the new region that must be shifted
+                            wxMacNativeToWindow( thisWindow , allocatedRgn ) ;
+                            updateRgn = allocatedRgn ;
+                        }
+                    }
                 }
 
                 Rect rgnBounds ;
@@ -260,7 +284,30 @@
                     bool created = false ;
                     CGContextRef cgContext = NULL ;
                     OSStatus err = cEvent.GetParameter<CGContextRef>(kEventParamCGContextRef, &cgContext) ;
-                    wxASSERT_MSG( err == noErr , wxT("Unable to retrieve CGContextRef") ) ;
+                    //wxASSERT_MSG( err == noErr , wxT("Unable to retrieve CGContextRef") ) ;
+                    if ( err != noErr )
+                    {
+                        wxASSERT( thisWindow->GetPeer()->IsCompositing() == false ) ;
+
+                        // this parameter is not provided on non-composited windows
+                        created = true ;
+                        // rest of the code expects this to be already transformed and clipped for local
+                        CGrafPtr port = GetWindowPort( (WindowRef) thisWindow->MacGetTopLevelWindowRef() ) ;
+                        Rect bounds ;
+                        GetPortBounds( port , &bounds ) ;
+                        CreateCGContextForPort( port , &cgContext ) ;
+
+                        wxMacWindowToNative( thisWindow , updateRgn ) ;
+                        OffsetRgn( updateRgn , controlBounds.left , controlBounds.top ) ;
+                        ClipCGContextToRegion( cgContext , &bounds , updateRgn ) ;
+                        wxMacNativeToWindow( thisWindow , updateRgn ) ;
+                        OffsetRgn( updateRgn , -controlBounds.left , -controlBounds.top ) ;
+
+                        CGContextTranslateCTM( cgContext , 0 , bounds.bottom - bounds.top ) ;
+                        CGContextScaleCTM( cgContext , 1 , -1 ) ;
+
+                        CGContextTranslateCTM( cgContext , controlBounds.left , controlBounds.top ) ;
+                    }
                     thisWindow->MacSetCGContextRef( cgContext ) ;
 
                     {
@@ -1408,6 +1455,8 @@
     int& x, int& y,
     int& w, int& h , bool adjustOrigin ) const
 {
+    bool isCompositing = MacGetTopLevelWindow()->MacUsesCompositing() ;
+
     // the desired size, minus the border pixels gives the correct size of the control
     x = (int)pos.x;
     y = (int)pos.y;
@@ -1416,6 +1465,9 @@
     w = wxMax(size.x, 0) ; // WidthDefault( size.x );
     h = wxMax(size.y, 0) ; // HeightDefault( size.y ) ;
 
+    if ( !isCompositing )
+        GetParent()->MacWindowToRootWindow( &x , &y ) ;
+
     x += MacGetLeftBorderSize() ;
     y += MacGetTopBorderSize() ;
     w -= MacGetLeftBorderSize() + MacGetRightBorderSize() ;
@@ -2388,7 +2440,8 @@
         return ;
 
 #if TARGET_API_MAC_OSX
-    if ( !m_macBackgroundBrush.Ok() || m_macBackgroundBrush.GetStyle() == wxTRANSPARENT )
+    if ( MacGetTopLevelWindow()->MacUsesCompositing() &&
+         ( !m_macBackgroundBrush.Ok() || m_macBackgroundBrush.GetStyle() == wxTRANSPARENT ) )
     {
         event.Skip() ;
     }
@@ -2663,7 +2716,13 @@
 #else
         // this would be the preferred version for fast drawing controls
 
-        HIViewRender(m_peer->GetControlRef()) ;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_3
+            if( UMAGetSystemVersion() >= 0x1030 && m_peer->IsCompositing() )
+                HIViewRender(m_peer->GetControlRef()) ;
+            else
+#endif
+                Update() ;
+
 #endif
     }
 

 	  	 

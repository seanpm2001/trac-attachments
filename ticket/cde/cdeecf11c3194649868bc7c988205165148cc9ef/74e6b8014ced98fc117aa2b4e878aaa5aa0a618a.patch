--- include/wx/checklst.h
+++ include/wx/checklst.h
@@ -37,6 +37,8 @@ public:
     virtual bool IsChecked(unsigned int item) const = 0;
     virtual void Check(unsigned int item, bool check = true) = 0;
 
+    virtual unsigned int GetCheckedItems(wxArrayInt& checkedItems) const;
+
     wxDECLARE_NO_COPY_CLASS(wxCheckListBoxBase);
 };
 
--- interface/wx/checklst.h
+++ interface/wx/checklst.h
@@ -151,6 +151,18 @@ public:
             Index of item whose check status is to be returned.
     */
     bool IsChecked(unsigned int item) const;
-    
+  
+    /** 
+        Fill an array of ints with the positions of the currently checked items.
+         
+        @param checkedItems
+        A reference to an wxArrayInt instance that is used to store the result of
+        the query.
+     
+        @return The number of checked items.
+     
+        @see wxCheckListBox::Check, wxCheckListBox::IsChecked
+    */
+    virtual unsigned int GetCheckedItems(wxArrayInt& checkedItems) const;
 };
 
--- src/common/checklstcmn.cpp
+++ src/common/checklstcmn.cpp
@@ -99,4 +99,21 @@ wxCONSTRUCTOR_4( wxCheckListBox, wxWindow*, Parent, wxWindowID, Id, \
                  wxPoint, Position, wxSize, Size )
 
 
+// ============================================================================
+// implementation
+// ============================================================================
+unsigned int wxCheckListBoxBase::GetCheckedItems(wxArrayInt& checkedItems) const
+{
+  unsigned int const numberOfItems = GetCount();
+
+
+  checkedItems.Empty();
+  for (unsigned int i=0; i<numberOfItems; ++i)
+  {
+    if (IsChecked(i))
+      checkedItems.Add(i);
+  }
+  return checkedItems.GetCount();
+}
+
 #endif

--- tests/controls/checklistboxtest.cpp
+++ tests/controls/checklistboxtest.cpp
@@ -67,6 +67,7 @@ void CheckListBoxTestCase::Check()
 {
     EventCounter toggled(m_check, wxEVT_COMMAND_CHECKLISTBOX_TOGGLED);
 
+    wxArrayInt checkedItems;
     wxArrayString testitems;
     testitems.Add("item 0");
     testitems.Add("item 1");
@@ -81,6 +82,7 @@ void CheckListBoxTestCase::Check()
 
     //We should not get any events when changing this from code
     CPPUNIT_ASSERT_EQUAL(0, toggled.GetCount());
+    CPPUNIT_ASSERT_EQUAL(1, m_check->GetCheckedItems(checkedItems));
     CPPUNIT_ASSERT_EQUAL(true, m_check->IsChecked(0));
     CPPUNIT_ASSERT_EQUAL(false, m_check->IsChecked(1));
 

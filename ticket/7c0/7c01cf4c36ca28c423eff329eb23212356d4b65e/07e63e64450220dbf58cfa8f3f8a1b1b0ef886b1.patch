Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 63822)
+++ include/wx/vector.h	(working copy)
@@ -18,6 +18,7 @@
 
 #include <vector>
 #define wxVector std::vector
+#define wxVectorSort std::sort
 
 #else // !wxUSE_STL
 
@@ -437,6 +438,67 @@
 }
 #endif // WXWIN_COMPATIBILITY_2_8
 
+
+
+namespace wxPrivate
+{
+    // These functions are helpers for the wxVectorSort function, and should
+    // not be used directly in user's code.
+
+template<typename T>
+size_t wxVectorSort_partition(T* array, size_t left, size_t right, size_t pivotIndex)
+{
+    size_t storeIndex = left;
+
+    // get the pivot value and move it to the end
+    T pivotValue = array[pivotIndex];
+    array[pivotIndex] = array[right];
+    array[right] = pivotValue;
+
+    // move those items that are < the pivot value
+    for ( size_t i = left; i < right; i++ )
+    {
+        if ( array[i] < pivotValue )
+        {
+            T temp = array[i];
+            array[i] = array[storeIndex];
+            array[storeIndex] = temp;
+            storeIndex += 1;
+        }
+    }
+    // move the pivot to its final place
+    array[right] = array[storeIndex];
+    array[storeIndex] = pivotValue;
+    
+    return storeIndex;
+}
+
+template<typename T>
+void wxVectorSort_quicksort(T* array, size_t left, size_t right)
+{
+    if (right > left)
+    {
+        size_t pivotInitial = (left + right) / 2;
+        size_t pivotNew = wxVectorSort_partition(array, left, right, pivotInitial);
+        wxVectorSort_quicksort(array, left, pivotNew);
+        wxVectorSort_quicksort(array, pivotNew+1, right);
+    }
+}
+
+}  // namespace wxPrivate
+
+
+
+template<typename T>
+void wxVectorSort(T* start, T* finish)
+{
+    wxCHECK_RET(start <= finish, "The start must be before finish.");
+    size_t numItems = finish - start;
+    if (numItems > 1)
+        wxPrivate::wxVectorSort_quicksort(start, 0, numItems-1);
+}
+
+
 #endif // wxUSE_STL/!wxUSE_STL
 
 #if WXWIN_COMPATIBILITY_2_8
Index: interface/wx/vector.h
===================================================================
--- interface/wx/vector.h	(revision 63822)
+++ interface/wx/vector.h	(working copy)
@@ -20,7 +20,7 @@
     @nolibrary
     @category{containers}
 
-    @see @ref overview_container, wxList<T>, wxArray<T>
+    @see @ref overview_container, wxList<T>, wxArray<T>, wxVectorSort<T>
 */
 template<typename T>
 class wxVector<T>
@@ -237,3 +237,24 @@
     size_type size() const;
 };
 
+
+/**
+   Sort the contents of a @c wxVector<T> between the @a start and @a finish
+   iterators (inclusive).  This function can be used with @c wxVector<T> just
+   like @c std::sort can be used with @c std::vector, in fact, when wxWidgets
+   is built in STL mode wxVectorSort will be compiled as std::sort.  To be
+   sortable the contained type must support the less-than and assignment
+   operators.
+
+   @code
+   wxVector<SomeClass> v;
+   ... // items are added to the vector v...
+
+   wxVectorSort(v.begin(), v.end());
+   @endcode
+   
+   
+   @see wxVector<T>
+*/
+template<typename T>
+void wxVectorSort(T* start, T* finish);

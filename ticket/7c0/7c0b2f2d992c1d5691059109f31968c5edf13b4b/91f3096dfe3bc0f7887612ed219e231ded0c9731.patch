--- wxWidgets/trunk/src/common/file.cpp	2009/07/23 20:30:22	61508
+++ wxWidgets/trunk/src/common/file.cpp	2009/09/11 20:30:22	63333
@@ -312,7 +312,8 @@
  if ( !buf )
      return false;

- const size_t size = strlen(buf); // FIXME: use buf.length() when available
+ const size_t size = (conv.GetMBNulLen() > 1) ? 
+                     (s.Length() * conv.GetMBNulLen()) : strlen(buf); 
  return Write(buf, size) == size;
}


--- wxWidgets/trunk/tests/mbconv/mbconvtest.cpp	2009/07/23 20:30:22	61508
+++ wxWidgets/trunk/tests/mbconv/mbconvtest.cpp	2009/09/11 20:30:22	63333
@@ -25,6 +25,7 @@
#include "wx/string.h"
#include "wx/txtstrm.h"
#include "wx/mstream.h"
+#include "wx/file.h"

#if defined wxHAVE_TCHAR_SUPPORT && !defined HAVE_WCHAR_H
    #define HAVE_WCHAR_H
@@ -79,6 +80,7 @@
        CPPUNIT_TEST( LibcTests );
        CPPUNIT_TEST( IconvTests );
        CPPUNIT_TEST( Latin1Tests );
+       CPPUNIT_TEST( OutStrTests );
        CPPUNIT_TEST( FontmapTests );
        CPPUNIT_TEST( BufSize );
#ifdef HAVE_WCHAR_H
@@ -118,6 +120,7 @@
    void IconvTests();
    void Latin1Tests();
+   void OutStrTests();

    // verifies that the specified multibyte sequence decodes to the specified wchar_t sequence
    void TestDecoder(
@@ -904,6 +907,49 @@
    CPPUNIT_ASSERT_EQUAL( mbLen, wcLen );
}

+void MBConvTestCase::OutStrTests()
+{
+   wxString strBuffer(_T("Test")), strIn;
+   wxCharBuffer buf(8);
+   wxFile outputFile16LE(_T("test16LE.txt"), wxFile::write);
+   outputFile16LE.Write("\xff\xfe", 2);   // BOM
+   wxMBConvUTF16LE UTF16LEConv;
+   outputFile16LE.Write(strBuffer, UTF16LEConv);
+   outputFile16LE.Close();
+   outputFile16LE.Open(_T("test16LE.txt"), wxFile::read);
+   outputFile16LE.Seek(2);
+   outputFile16LE.Read(buf.data(), strBuffer.Length() * 2);
+   outputFile16LE.Close();
+   strIn = wxString(buf, UTF16LEConv, strBuffer.Length() * 2);
+   CPPUNIT_ASSERT_EQUAL( strBuffer, strIn );
+   wxRemoveFile(_T("test16LE.txt"));
+
+   wxFile outputFile16BE(_T("test16BE.txt"), wxFile::write);
+   outputFile16BE.Write("\xfe\xff", 2);   // BOM
+   wxMBConvUTF16BE UTF16BEConv;
+   outputFile16BE.Write(strBuffer, UTF16BEConv);
+   outputFile16BE.Close();
+   outputFile16BE.Open(_T("test16BE.txt"), wxFile::read);
+   outputFile16BE.Seek(2);
+   outputFile16BE.Read(buf.data(), strBuffer.Length() * 2);
+   outputFile16BE.Close();
+   strIn = wxString(buf, UTF16BEConv, strBuffer.Length() * 2);
+   CPPUNIT_ASSERT_EQUAL( strBuffer, strIn );
+   wxRemoveFile(_T("test16BE.txt"));
+
+   wxFile outputFileUTF8(_T("testUTF8.txt"), wxFile::write);
+   outputFileUTF8.Write("\xef\xbb\xbf", 3);  // MS Windows specific, but not for XML files!
+   outputFileUTF8.Write(strBuffer, wxConvUTF8);
+   outputFileUTF8.Close();
+   outputFileUTF8.Open(_T("testUTF8.txt"), wxFile::read);
+   outputFileUTF8.Seek(3);
+   outputFileUTF8.Read(buf.data(), strBuffer.Length());
+   outputFileUTF8.Close();
+   strIn = wxString(buf, wxConvUTF8, strBuffer.Length());
+   CPPUNIT_ASSERT_EQUAL( strBuffer, strIn );
+   wxRemoveFile(_T("testUTF8.txt"));
+}
+
void MBConvTestCase::CP1252Tests()
{
    wxCSConv convCP1252( wxFONTENCODING_CP1252 );
 
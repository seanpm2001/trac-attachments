Index: include/wx/mac/carbon/glcanvas.h
===================================================================
--- include/wx/mac/carbon/glcanvas.h	(revision 58402)
+++ include/wx/mac/carbon/glcanvas.h	(working copy)
@@ -37,8 +37,11 @@
                const wxPalette& WXUNUSED(palette),
                const wxGLContext *other        /* for sharing display lists */
     );
+   wxGLContext(wxGLCanvas *win, const wxGLContext* other=NULL /* for sharing display lists */ );
+
    virtual ~wxGLContext();
 
+   void SetCurrent(const wxGLCanvas& win) const;
    void SetCurrent();
    void Update();  // must be called after window drag/grows/zoom or clut change
    void SetColour(const wxChar *colour);
@@ -58,6 +61,13 @@
 {
    DECLARE_CLASS(wxGLCanvas)
  public:
+     wxGLCanvas( wxWindow *parent, wxWindowID id = -1,
+        int *attribList = (int*) NULL,
+        const wxPoint& pos = wxDefaultPosition,
+	const wxSize& size = wxDefaultSize,
+	long style = 0, const wxString& name = wxGLCanvasName,
+	const wxPalette& palette = wxNullPalette );
+
    wxGLCanvas(wxWindow *parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize, long style = 0,
         const wxString& name = wxT("GLCanvas") , int *attribList = 0, const wxPalette& palette = wxNullPalette);
@@ -76,6 +86,7 @@
                const wxPoint& pos, const wxSize& size, long style, const wxString& name,
            int *attribList, const wxPalette& palette);
 
+   void SetCurrent(const wxGLContext& RC) const;
    void SetCurrent();
    void SetColour(const wxChar *colour);
    void SwapBuffers();
@@ -96,6 +107,8 @@
 
    inline wxGLContext* GetContext() const { return m_glContext; }
 
+   AGLPixelFormat m_fmt;
+
 protected:
     wxGLContext*   m_glContext;
     bool m_macCanvasIsShown ;
Index: src/mac/carbon/glcanvas.cpp
===================================================================
--- src/mac/carbon/glcanvas.cpp	(revision 58402)
+++ src/mac/carbon/glcanvas.cpp	(working copy)
@@ -63,6 +63,28 @@
     wxCHECK_RET( b, wxT("Couldn't activate OpenGl context") );
 }
 
+wxGLContext::wxGLContext(wxGLCanvas *win, const wxGLContext* other /* for sharing display lists */ )
+{
+    m_window = win;
+#ifndef __LP64__
+    m_drawable = (AGLDrawable) UMAGetWindowPort(MAC_WXHWND(win->MacGetTopLevelWindowRef()));
+#endif
+	
+    m_glContext = aglCreateContext(win->m_fmt, other ? other->m_glContext : NULL);
+    wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGl context") );
+	
+    GLboolean b;
+#ifndef __LP64__
+    b = aglSetDrawable(m_glContext, m_drawable);
+    aglEnable(m_glContext , AGL_BUFFER_RECT ) ;
+#else
+    b = aglSetHIViewRef(m_glContext, (HIViewRef) win->GetHandle());
+#endif
+    wxCHECK_RET( b, wxT("Couldn't bind OpenGl context") );
+    b = aglSetCurrentContext(m_glContext);
+    wxCHECK_RET( b, wxT("Couldn't activate OpenGl context") );
+}
+
 wxGLContext::~wxGLContext()
 {
     if (m_glContext)
@@ -88,6 +110,11 @@
     }
 }
 
+void wxGLContext::SetCurrent(const wxGLCanvas& win) const
+{
+    aglSetCurrentContext(win.GetContext()->m_glContext);
+}
+
 void wxGLContext::Update()
 {
     if (m_glContext)
@@ -119,6 +146,13 @@
     EVT_SIZE(wxGLCanvas::OnSize)
 END_EVENT_TABLE()
 
+wxGLCanvas::wxGLCanvas(wxWindow *parent, wxWindowID id, int *attribList,
+					   const wxPoint& pos, const wxSize& size, long style,
+					   const wxString& name, const wxPalette& palette)
+{
+    Create(parent, NULL, id, pos, size, style, name, attribList, palette);
+}
+
 wxGLCanvas::wxGLCanvas(wxWindow *parent, wxWindowID id,
                        const wxPoint& pos, const wxSize& size, long style, const wxString& name,
                        int *attribList, const wxPalette& palette)
@@ -143,6 +177,7 @@
 
 wxGLCanvas::~wxGLCanvas()
 {
+    aglDestroyPixelFormat(m_fmt);
     if (m_glContext != NULL) {
         delete m_glContext;
         m_glContext = NULL;
@@ -224,12 +259,11 @@
     m_glContext = 0 ;
     wxWindow::Create( parent, id, pos, size, style, name );
 
-    AGLPixelFormat fmt = ChoosePixelFormat(attribList);
-    wxCHECK_MSG( fmt, false, wxT("Couldn't create OpenGl pixel format") );
+    m_fmt = ChoosePixelFormat(attribList);
+    wxCHECK_MSG( m_fmt, false, wxT("Couldn't create OpenGl pixel format") );
 
-    m_glContext = new wxGLContext(fmt, this, palette, shared);
+    m_glContext = new wxGLContext(m_fmt, this, palette, shared);
     m_macCanvasIsShown = true ;
-    aglDestroyPixelFormat(fmt);
 
     return true;
 }
@@ -319,6 +353,11 @@
     wxWindow::MacTopLevelWindowChangedPosition() ;
 }
 
+void wxGLCanvas::SetCurrent(const wxGLContext& RC) const
+{
+    RC.SetCurrent(*this);
+}
+
 void wxGLCanvas::SetCurrent()
 {
     if (m_glContext)

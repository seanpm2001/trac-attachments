Index: include/wx/list.h
===================================================================
--- include/wx/list.h	(revision 56484)
+++ include/wx/list.h	(working copy)
@@ -1035,18 +1035,32 @@
         }                                                                   \
         iterator insert(const iterator& it, const_reference v = value_type())\
         {                                                                   \
-            Insert(it.m_node, (const_base_reference)v);                     \
-            return iterator(it.m_node->GetPrevious(), GetLast());           \
+            if (it == end()) {                                              \
+                push_back(v);                                               \
+                return iterator(GetLast(), GetLast());                      \
+            }else{                                                          \
+                Insert(it.m_node, (const_base_reference)v);                 \
+                return iterator(it.m_node->GetPrevious(), GetLast());       \
+            }                                                               \
         }                                                                   \
         void insert(const iterator& it, size_type n, const_reference v = value_type())\
         {                                                                   \
-            for(size_type i = 0; i < n; ++i)                                \
-                Insert(it.m_node, (const_base_reference)v);                 \
+            if (it == end()) {                                              \
+                for(size_type i = 0; i < n; ++i) push_back(v);              \
+            }else{                                                          \
+                for(size_type i = 0; i < n; ++i)                            \
+                    Insert(it.m_node, (const_base_reference)v);             \
+            }                                                               \
         }                                                                   \
-        void insert(const iterator& it, const_iterator first, const const_iterator& last)\
+        void insert(const iterator& it,                                     \
+                    const_iterator first, const const_iterator& last)       \
         {                                                                   \
-            for(; first != last; ++first)                                   \
-                Insert(it.m_node, (const_base_reference)*first);            \
+            if (it == end()) {                                              \
+                while(first != last) push_back(*(first++));                 \
+            }else{                                                          \
+                while(first != last)                                        \
+                    Insert(it.m_node, (const_base_reference)*(first++));    \
+            }                                                               \
         }                                                                   \
         iterator erase(const iterator& it)                                  \
         {                                                                   \
@@ -1055,7 +1069,8 @@
         }                                                                   \
         iterator erase(const iterator& first, const iterator& last)         \
         {                                                                   \
-            iterator next = last; ++next;                                   \
+            iterator next = last;                                           \
+            if(next != end()) ++next;                                       \
             DeleteNodes(first.m_node, last.m_node);                         \
             return next;                                                    \
         }                                                                   \
@@ -1068,7 +1083,11 @@
         {                                                                   \
             iterator tmp = first; ++tmp;                                    \
             if(it == first || it == tmp) return;                            \
-            insert(it, *first);                                             \
+            if(it == end()) {                                               \
+                push_back(*first);                                          \
+            }else{                                                          \
+                insert(it, *first);                                         \
+            }                                                               \
             l.erase(first);                                                 \
         }                                                                   \
         void remove(const_reference v)                                      \
Index: tests/lists/lists.cpp
===================================================================
--- tests/lists/lists.cpp	(revision 56484)
+++ tests/lists/lists.cpp	(working copy)
@@ -157,6 +157,126 @@
     {
         CPPUNIT_ASSERT( *it == i + &i );
     }
+
+    // 'i'nsert with end(), especially wxUSE_STL is zero in setup.h.
+    // Please note this test can't do with wxListInt, because
+    // wxListInt o; o.insert(o.end(), *it1) fails on runtime. But
+    // wxListInt o; o.insert(o.end(), 1, *it1) is available.
+    // When this test cannot pass, following wxListCtorTest() also
+    // may fail.
+    // Additionally, while debugging header files, make sure pre-
+    // compile header is cancelled (or clean before rebuild).
+    {
+        wxListBazs::iterator it1, it2;
+        wxListBazs list1;
+        wxListBazs list2;
+        wxListBazs list3;
+        wxListBazs list4;
+        for ( i = 1; i <= 10; ++i )
+        {
+            Baz* temp1 = new Baz(wxString::Format(_T("%d"), i*100));
+            Baz* temp2 = new Baz(wxString::Format(_T("%d"), i));
+            list1.push_back(temp1);
+            list2.push_back(temp2);
+            list3.push_back(temp1);
+        }
+        for ( it1 = list2.begin(); it1 != list2.end(); ++it1 )
+        {
+            // This may cause runtime error before debugging wx/list.h.
+            // (2008-10-21)
+            list3.insert(list3.end(), *it1); 
+        }
+        CPPUNIT_ASSERT( list1.size() + list2.size() == list3.size() );
+        for ( it1 = list1.begin(), it2 = list3.begin();
+              it1 != list1.end(); ++it1, ++it2 )
+        {
+            CPPUNIT_ASSERT( *it1 == *it2 );
+        }
+        // it2 is continuously used from previous test to next test.
+        for ( it1 = list2.begin(); it1 != list2.end(); ++it1, ++it2 )
+        {
+            CPPUNIT_ASSERT( *it1 == *it2 );
+        }
+        
+        list4.insert(list4.end(), list3.begin(), list3.end());
+        CPPUNIT_ASSERT( list4.size() == list3.size() );
+        for ( it1 = list3.begin(), it2 = list4.begin();
+              it1 != list3.end(); ++it1, ++it2 )
+        {
+            CPPUNIT_ASSERT( *it1 == *it2 );
+        }
+
+        list4.clear();
+        it2 = list1.end(); --it2; --it2;
+        list4.insert(list4.end(), list1.size()*2, *it2);
+        CPPUNIT_ASSERT( list4.size() == list1.size()*2 );
+        for ( it1 = list4.begin(); it1 != list4.end(); ++it1 )
+        {
+            CPPUNIT_ASSERT( *it1 == *it2 );
+            CPPUNIT_ASSERT( wxString(_T("900")) == (*it1)->GetName() );
+        }
+
+        // o1.splice(o1.end(), o2, o2it), especially wxUSE_STL is zero.
+        it2 = list3.end(); --it2; --it2; --it2; --it2;
+        list4.splice(list4.end(), list3, it2);
+        CPPUNIT_ASSERT( list3.size() == list1.size()+list2.size()-1 );
+        CPPUNIT_ASSERT( list4.size() == list1.size()*2+1 );
+        CPPUNIT_ASSERT( wxString(_T("7")) == list4.back()->GetName() );
+        
+        list1.DeleteContents(true);
+        list2.DeleteContents(true);
+    }
+
+    // 'i'nsert() and splice() with not end()
+    {
+        wxListBazs::iterator it1;
+        wxListBazs::reverse_iterator rit;
+        wxListBazs list1;
+        wxListBazs list2;
+        wxListBazs list3;
+        wxListBazs list4;
+        for ( i = 1; i <= 10; ++i )
+        {
+            list1.push_back(new Baz(wxString::Format(_T("%d"), i*20)));
+        }
+        for ( i = 1; i <= 3; ++i )
+        {
+            list2.push_back(new Baz(wxString::Format(_T("%d"), i*3)));
+            list3.push_back(new Baz(wxString::Format(_T("list3-%d"), i)));
+        }
+        list4.insert(list4.begin(), list3.begin(), list3.end());
+        it1 = list4.begin();
+        CPPUNIT_ASSERT( wxString(_T("list3-1")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("list3-2")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("list3-3")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( list4.size() == 3 );
+        list4.insert(++list4.begin(), list2.begin(), list2.end());
+        rit = list4.rbegin();
+        CPPUNIT_ASSERT( wxString(_T("list3-3")) == (*(rit++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("list3-2")) == (*(rit++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("9")) == (*(rit++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("6")) == (*(rit++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("3")) == (*(rit++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("list3-1")) == (*(rit++))->GetName() );
+        
+        it1 = list1.begin(); ++it1; ++it1; ++it1;
+        list1.splice(it1, list2);
+        it1 = list1.begin();
+        CPPUNIT_ASSERT( list1.size() == 13 );
+        CPPUNIT_ASSERT( wxString(_T("20")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("40")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("60")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("3")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("6")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("9")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("80")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("100")) == (*(it1++))->GetName() );
+        CPPUNIT_ASSERT( wxString(_T("200")) == list1.back()->GetName() );
+
+        list1.DeleteContents(true);
+        list2.DeleteContents(true); // Not required, because list2 is empty.
+        list3.DeleteContents(true);
+    }
 }
 
 void ListsTestCase::wxListCtorTest()

Index: include/wx/msw/dirdlg.h
===================================================================
--- include/wx/msw/dirdlg.h	(revision 70412)
+++ include/wx/msw/dirdlg.h	(working copy)
@@ -29,6 +29,9 @@
 
 private:
     DECLARE_DYNAMIC_CLASS_NO_COPY(wxDirDialog)
+
+    int ShowSHBrowseForFolder(WXWidget owner);
+    int ShowIFileDialog(WXWidget owner);
 };
 
 #endif
Index: src/msw/dirdlg.cpp
===================================================================
--- src/msw/dirdlg.cpp	(revision 70412)
+++ src/msw/dirdlg.cpp	(working copy)
@@ -30,6 +30,7 @@
     (defined(__HANDHELDPC__) && (_WIN32_WCE >= 500)))
 
 #include "wx/dirdlg.h"
+#include "wx/dynlib.h"
 
 #ifndef WX_PRECOMP
     #include "wx/utils.h"
@@ -38,6 +39,8 @@
     #include "wx/app.h"     // for GetComCtl32Version()
 #endif
 
+#include <initguid.h>
+
 #include "wx/msw/private.h"
 #include "wx/msw/wrapshl.h"
 
@@ -118,9 +121,25 @@
 int wxDirDialog::ShowModal()
 {
     wxWindow *parent = GetParent();
+    HWND hwndOwner = parent ? GetHwndOf(parent) : NULL;
+    int retCode;
 
+    // check if we're on Vista or newer
+    if ( wxPlatformInfo::Get().CheckOSVersion(6, 0) )
+        retCode = ShowIFileDialog(hwndOwner);
+    else
+        retCode = ShowSHBrowseForFolder(hwndOwner);
+
+    if ( retCode == wxID_OK && HasFlag(wxDD_CHANGE_DIR) )
+        wxSetWorkingDirectory(m_path);  // change current working directory if asked so
+
+    return retCode;
+}
+
+int wxDirDialog::ShowSHBrowseForFolder(WXWidget owner)
+{
     BROWSEINFO bi;
-    bi.hwndOwner      = parent ? GetHwndOf(parent) : NULL;
+    bi.hwndOwner      = owner;
     bi.pidlRoot       = NULL;
     bi.pszDisplayName = NULL;
     // Please don't change this without checking it compiles
@@ -181,14 +200,313 @@
 
     m_path = pidl.GetPath();
 
-    // change current working directory if asked so
-    if (HasFlag(wxDD_CHANGE_DIR))
-        wxSetWorkingDirectory(m_path);
-
     return m_path.empty() ? wxID_CANCEL : wxID_OK;
 }
 
+
+// IShellItem
+#ifndef __IShellItem_INTERFACE_DEFINED__
+
+#ifndef SIGDN_FILESYSPATH
+    #define SIGDN_FILESYSPATH 0x80058000
+#endif
+
+    struct IShellItem : public IUnknown
+    {
+        virtual HRESULT wxSTDCALL BindToHandler(IBindCtx*, REFGUID, REFIID, void**)=0;
+        virtual HRESULT wxSTDCALL GetParent(IShellItem**)=0;
+        virtual HRESULT wxSTDCALL GetDisplayName(DWORD, LPWSTR*)=0;
+        virtual HRESULT wxSTDCALL GetAttributes(ULONG, ULONG*)=0;
+        virtual HRESULT wxSTDCALL Compare(IShellItem*, DWORD, int*)=0;
+    };
+    DEFINE_GUID(IID_IShellItem,
+        0x43826D1E, 0xE718, 0x42EE, 0xBC, 0x55, 0xA1, 0xE2, 0x61, 0xC3, 0x7B, 0xFE);
+
+#endif // #ifndef __IShellItem_INTERFACE_DEFINED__
+
+// IShellItemFilter
+#ifndef __IShellItemFilter_INTERFACE_DEFINED__
+
+    struct IShellItemFilter;
+
+#endif // #ifndef __IShellItemFilter_INTERFACE_DEFINED__
+
+// IFileDialogEvents
+#ifndef __IFileDialogEvents_INTERFACE_DEFINED__
+
+    struct IFileDialogEvents;
+
+#endif // #ifndef __IFileDialogEvents_INTERFACE_DEFINED__
+
+// IModalWindow
+#ifndef __IModalWindow_INTERFACE_DEFINED__
+
+    struct IModalWindow : public IUnknown
+    {
+        virtual HRESULT wxSTDCALL Show(HWND)=0;
+    };
+
+#endif // #ifndef __IModalWindow_INTERFACE_DEFINED__
+
+// IFileDialog
+#ifndef __IFileDialog_INTERFACE_DEFINED__
+
+#ifndef FOS_PICKFOLDERS
+    #define FOS_PICKFOLDERS 0x20
+#endif
+
+#ifndef FOS_FORCEFILESYSTEM
+    #define FOS_FORCEFILESYSTEM 0x40
+#endif
+
+    struct COMDLG_FILTERSPEC;
+
+    struct IFileDialog : public IModalWindow
+    {
+        virtual HRESULT wxSTDCALL SetFileTypes(UINT, const COMDLG_FILTERSPEC*)=0;
+        virtual HRESULT wxSTDCALL SetFileTypeIndex(UINT)=0;
+        virtual HRESULT wxSTDCALL GetFileTypeIndex(UINT*)=0;
+        virtual HRESULT wxSTDCALL Advise(IFileDialogEvents*, DWORD*)=0;
+        virtual HRESULT wxSTDCALL Unadvise(DWORD)=0;
+        virtual HRESULT wxSTDCALL SetOptions(DWORD)=0;
+        virtual HRESULT wxSTDCALL GetOptions(DWORD*)=0;
+        virtual HRESULT wxSTDCALL SetDefaultFolder(IShellItem*)=0;
+        virtual HRESULT wxSTDCALL SetFolder(IShellItem*)=0;
+        virtual HRESULT wxSTDCALL GetFolder(IShellItem**)=0;
+        virtual HRESULT wxSTDCALL GetCurrentSelection(IShellItem**)=0;
+        virtual HRESULT wxSTDCALL SetFileName(LPCWSTR)=0;
+        virtual HRESULT wxSTDCALL GetFileName(LPWSTR*)=0;
+        virtual HRESULT wxSTDCALL SetTitle(LPCWSTR)=0;
+        virtual HRESULT wxSTDCALL SetOkButtonLabel(LPCWSTR)=0;
+        virtual HRESULT wxSTDCALL SetFileNameLabel(LPCWSTR)=0;
+        virtual HRESULT wxSTDCALL GetResult(IShellItem**)=0;
+        virtual HRESULT wxSTDCALL AddPlace(IShellItem*, DWORD)=0;
+        virtual HRESULT wxSTDCALL SetDefaultExtension(LPCWSTR)=0;
+        virtual HRESULT wxSTDCALL Close(HRESULT)=0;
+        virtual HRESULT wxSTDCALL SetClientGuid(REFGUID)=0;
+        virtual HRESULT wxSTDCALL ClearClientData()=0;
+        virtual HRESULT wxSTDCALL SetFilter(IShellItemFilter*)=0;
+    };
+
+    DEFINE_GUID(CLSID_FileOpenDialog,
+        0xDC1C5A9C, 0xE88A, 0x4dde, 0xA5, 0xA1, 0x60, 0xF8, 0x2A, 0x20, 0xAE, 0xF7);
+
+    DEFINE_GUID(IID_IFileDialog,
+        0x42F85136, 0xDB7E, 0x439C, 0x85, 0xF1, 0xE4, 0x07, 0x5D, 0x13, 0x5F, 0xC8);
+
+#endif // #ifndef __IFileDialog_INTERFACE_DEFINED__
+
 // ----------------------------------------------------------------------------
+// wxCOMPtr: A minimalistic implementation of a smart pointer for use with COM interfaces
+// ----------------------------------------------------------------------------
+
+template <class T>
+class wxCOMPtr
+{
+public:
+    typedef T element_type;
+
+    wxEXPLICIT wxCOMPtr( T* ptr = NULL )
+        : m_ptr(ptr)
+    {
+        if ( m_ptr )
+            m_ptr->AddRef();
+    }
+
+    wxCOMPtr( const wxCOMPtr& tocopy )
+        : m_ptr(tocopy.get())
+    {
+        if ( m_ptr )
+            m_ptr->AddRef();
+    }
+
+    ~wxCOMPtr()
+    {
+        if ( m_ptr )
+            m_ptr->Release();
+    }
+
+    wxCOMPtr& operator=( const wxCOMPtr& tocopy )
+    {
+        reset(tocopy.get());
+        return *this;
+    }
+
+    wxCOMPtr& operator=( T* ptr )
+    {
+        reset(ptr);
+        return *this;
+    }
+
+   operator T*() const
+   {
+        return m_ptr;
+   }
+
+    T& operator*() const
+    {
+        wxASSERT(m_ptr);
+        return *m_ptr;
+    }
+
+    T* operator->() const
+    {
+        wxASSERT(m_ptr);
+        return m_ptr;
+    }
+
+    T** operator&()
+    {
+        wxASSERT(!m_ptr);
+        return &m_ptr;
+    }
+
+    T* get() const
+    {
+        return m_ptr;
+    }
+
+    bool operator<( T* ptr) const
+    {
+        return get() < ptr;
+    }
+
+    void reset( T* ptr = NULL )
+    {
+        if ( m_ptr != ptr) {
+            if ( ptr )
+                ptr->AddRef();
+            if ( m_ptr )
+                m_ptr->Release();
+            m_ptr = ptr;
+        }
+    }
+
+private:
+    T* m_ptr;
+};
+
+
+
+int wxDirDialog::ShowIFileDialog(WXWidget owner)
+{
+
+// if !wxUSE_OLE then OleInitialize wasn't called, so COM calls are bound to fail
+// DynLib is needed for loading function SHCreateItemFromParsingName neecessary for setting the initial folder
+#if !wxUSE_OLE || !wxUSE_DYNLIB_CLASS
+    return ShowSHBrowseForFolder(owner); // fall back to the implementation using SHBrowseForFolder()
+#else
+    HRESULT hr;
+    wxCOMPtr<IFileDialog> fileDialog;
+
+    hr = CoCreateInstance(CLSID_FileOpenDialog, NULL, CLSCTX_INPROC_SERVER, IID_IFileDialog, (void**)&fileDialog);
+    if ( FAILED(hr) )
+    {
+        wxLogApiError("CoCreateInstance(CLSID_FileOpenDialog)", hr);
+        return ShowSHBrowseForFolder(owner); // fall back to the implementation using SHBrowseForFolder()
+    }
+
+    // allow user to select only a file system folder
+    hr = fileDialog->SetOptions(FOS_PICKFOLDERS | FOS_FORCEFILESYSTEM);
+    if ( FAILED(hr) )
+    {
+        wxLogApiError("IFileDialog::SetOptions", hr);
+        return ShowSHBrowseForFolder(owner); // fall back to the implementation using SHBrowseForFolder()
+    }
+
+    hr = fileDialog->SetTitle(m_message.wx_str());
+    if ( FAILED(hr) )
+    {   // the error is not serious, let's just log it and continue even without the title set
+        wxLogApiError("IFileDialog::SetTitle", hr);
+    }
+
+    // if m_path is not empty, try to set the initial folder displayed by the dialog,
+    // failing to do that is not considered a serious error and the execution continues
+    if ( !m_path.empty() )
+    {
+        // function SHCreateItemFromParsingName is only available on Vista and newer,
+        // so linking to it statically would prevent applications from loading on older OSes
+        typedef HRESULT (WINAPI *SHCreateItemFromParsingName_t)(PCWSTR, IBindCtx*, REFIID, void**);
+        wxDynamicLibrary dllShell32(("shell32.dll"), wxDL_VERBATIM | wxDL_QUIET);
+        wxDYNLIB_FUNCTION(SHCreateItemFromParsingName_t, SHCreateItemFromParsingName, dllShell32);
+
+        if ( !pfnSHCreateItemFromParsingName )
+        {
+            // shouldn't really ever get here, we've already checked in ShowModal() that we're on Vista or newer
+            wxLogLastError("wxDYNLIB_FUNCTION(SHCreateItemFromParsingName_t, SHCreateItemFromParsingName, dllShell32)");
+        }
+        else
+        {
+            wxCOMPtr<IShellItem> folder;
+            hr = (*pfnSHCreateItemFromParsingName)(m_path.wx_str(), NULL, IID_IShellItem, (void**)&folder);
+            if ( FAILED(hr) )
+            {
+                wxLogApiError("SHCreateItemFromParsingName", hr);
+            }
+            else
+            {
+                hr = fileDialog->SetFolder(folder);
+                if ( FAILED(hr) )
+                {
+                    wxLogApiError("FileDialog::SetFolder", hr);
+                }
+            }
+        }
+    }
+
+    wxString path;
+
+    hr = fileDialog->Show(owner);
+    if ( SUCCEEDED(hr) )
+    {
+        wxCOMPtr<IShellItem> folder;
+
+        hr = fileDialog->GetResult(&folder);
+        if ( SUCCEEDED(hr) )
+        {
+            LPOLESTR pathOLE = NULL;
+
+            hr = folder->GetDisplayName(SIGDN_FILESYSPATH, &pathOLE);
+            if ( FAILED(hr) )
+            {
+                wxLogApiError("IShellItem::GetDisplayName", hr);
+            }
+            else
+            {
+                path = pathOLE;
+                CoTaskMemFree(pathOLE);
+            }
+        }
+        else
+        {
+            wxLogApiError("IFileDialog::GetResult", hr);
+        }
+    }
+    else if ( hr == HRESULT_FROM_WIN32(ERROR_CANCELLED) )
+    {
+        return wxID_CANCEL; // the user cancelled the dialog
+    }
+    else
+    {
+        wxLogApiError("IFileDialog::Show", hr);
+    }
+
+    if ( path.empty() ) {
+        // the user didn't cancel the dialog and yet the path is empty
+        // it means there was an error, already logged by wxLogApiError()
+        // now report the error to the user and return
+        wxLogError(_("Couldn't show the folder browser dialog or obtain the selected folder."));
+        return wxID_CANCEL;
+    }
+
+    m_path = path;
+    return wxID_OK;
+
+#endif //#if !wxUSE_OLE || !wxUSE_DYNLIB_CLASS
+}
+
+
+// ----------------------------------------------------------------------------
 // private functions
 // ----------------------------------------------------------------------------
 

? combobox.patch
? grid_empty_line_in_multi_line_cell.patch
? odbc_to_msvc_setup.h.patch
? socket.patch
? treectrl_clientobhect_ud.patch
? treectrl_clientobject.patch
? treectrl_clientobject2.patch
? window_SetWindowStyleFlag.patch
? xml_encoding.patch
Index: include/wx/string.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/string.h,v
retrieving revision 1.221
diff -u -r1.221 string.h
--- include/wx/string.h	2006/11/08 00:08:57	1.221
+++ include/wx/string.h	2006/12/07 19:13:37
@@ -1285,6 +1285,19 @@
               const wxChar* sz, size_t nCount = npos) const;
 #endif // !defined HAVE_STD_STRING_COMPARE
 
+    // string comparison not case-sensitive!
+  int comparenocase(const wxStringBase& str) const;
+    // comparison with a substring not case-sensitive!
+  int comparenocase(size_t nStart, size_t nLen, const wxStringBase& str) const;
+    // comparison of 2 substrings not case-sensitive!
+  int comparenocase(size_t nStart, size_t nLen,
+              const wxStringBase& str, size_t nStart2, size_t nLen2) const;
+    // just like stricmp() not case-sensitive!
+  int comparenocase(const wxChar* sz) const;
+    // substring comparison with first nCount characters of sz not case-sensitive!
+  int comparenocase(size_t nStart, size_t nLen,
+              const wxChar* sz, size_t nCount = npos) const;
+
     // insert another string
   wxString& insert(size_t nPos, const wxString& str)
     { return (wxString&)wxStringBase::insert(nPos, str); }
Index: include/wx/xml/xml.h
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/include/wx/xml/xml.h,v
retrieving revision 1.9
diff -u -r1.9 xml.h
--- include/wx/xml/xml.h	2006/09/11 11:08:45	1.9
+++ include/wx/xml/xml.h	2006/12/07 19:16:22
@@ -28,6 +28,8 @@
     #define WXDLLIMPEXP_XML
 #endif
 
+extern const wxChar *  WXDLLIMPEXP_XML wxXML_ENCODING_UTF_8;
+
 class WXDLLIMPEXP_XML wxXmlNode;
 class WXDLLIMPEXP_XML wxXmlProperty;
 class WXDLLIMPEXP_XML wxXmlDocument;
@@ -92,7 +94,7 @@
 // with content="hi").
 //
 // If wxUSE_UNICODE is 0, all strings are encoded in the encoding given to Load
-// (default is UTF-8).
+// (default is UTF-8) (wxXML_ENCODING_UTF_8).
 
 class WXDLLIMPEXP_XML wxXmlNode
 {
@@ -186,9 +188,9 @@
 public:
     wxXmlDocument();
     wxXmlDocument(const wxString& filename,
-                  const wxString& encoding = wxT("UTF-8"));
+                  const wxString& encoding = wxXML_ENCODING_UTF_8);
     wxXmlDocument(wxInputStream& stream,
-                  const wxString& encoding = wxT("UTF-8"));
+                  const wxString& encoding = wxXML_ENCODING_UTF_8);
     virtual ~wxXmlDocument() { wxDELETE(m_root); }
 
     wxXmlDocument(const wxXmlDocument& doc);
@@ -197,9 +199,9 @@
     // Parses .xml file and loads data. Returns TRUE on success, FALSE
     // otherwise.
     virtual bool Load(const wxString& filename,
-                      const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE);
+                      const wxString& encoding = wxXML_ENCODING_UTF_8, int flags = wxXMLDOC_NONE);
     virtual bool Load(wxInputStream& stream,
-                      const wxString& encoding = wxT("UTF-8"), int flags = wxXMLDOC_NONE);
+                      const wxString& encoding = wxXML_ENCODING_UTF_8, int flags = wxXMLDOC_NONE);
     
     // Saves document as .xml file.
     virtual bool Save(const wxString& filename, int indentstep = 1) const;
Index: src/common/string.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/string.cpp,v
retrieving revision 1.288
diff -u -r1.288 string.cpp
--- src/common/string.cpp	2006/11/27 15:03:06	1.288
+++ src/common/string.cpp	2006/12/07 19:15:30
@@ -982,6 +982,56 @@
 
 #endif // !wxUSE_STL || !defined(HAVE_STD_STRING_COMPARE)
 
+// Not case-sensitive versions:
+
+static inline int wxDoCmpNoCase(const wxChar* s1, size_t l1,
+                                const wxChar* s2, size_t l2);
+
+int wxString::comparenocase(const wxStringBase& str) const
+{
+    return ::wxDoCmpNoCase(data(), length(), str.data(), str.length());
+}
+
+int wxString::comparenocase(size_t nStart, size_t nLen,
+                         const wxStringBase& str) const
+{
+    wxASSERT(nStart <= length());
+    size_type strLen = length() - nStart;
+    nLen = strLen < nLen ? strLen : nLen;
+    return ::wxDoCmpNoCase(data() + nStart, nLen, str.data(), str.length());
+}
+
+int wxString::comparenocase(size_t nStart, size_t nLen,
+                         const wxStringBase& str,
+                         size_t nStart2, size_t nLen2) const
+{
+    wxASSERT(nStart <= length());
+    wxASSERT(nStart2 <= str.length());
+    size_type strLen  =     length() - nStart,
+              strLen2 = str.length() - nStart2;
+    nLen  = strLen  < nLen  ? strLen  : nLen;
+    nLen2 = strLen2 < nLen2 ? strLen2 : nLen2;
+    return ::wxDoCmpNoCase(data() + nStart, nLen, str.data() + nStart2, nLen2);
+}
+
+int wxString::comparenocase(const wxChar* sz) const
+{
+    size_t nLen = wxStrlen(sz);
+    return ::wxDoCmpNoCase(data(), length(), sz, nLen);
+}
+
+int wxString::comparenocase(size_t nStart, size_t nLen,
+                         const wxChar* sz, size_t nCount) const
+{
+    wxASSERT(nStart <= length());
+    size_type strLen = length() - nStart;
+    nLen = strLen < nLen ? strLen : nLen;
+    if( nCount == npos )
+        nCount = wxStrlen(sz);
+
+    return ::wxDoCmpNoCase(data() + nStart, nLen, sz, nCount);
+}
+
 // ===========================================================================
 // wxString class core
 // ===========================================================================
Index: src/xml/xml.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/xml/xml.cpp,v
retrieving revision 1.32
diff -u -r1.32 xml.cpp
--- src/xml/xml.cpp	2006/11/26 18:41:43	1.32
+++ src/xml/xml.cpp	2006/12/07 19:54:52
@@ -35,6 +35,7 @@
 // DLL options compatibility check:
 WX_CHECK_BUILD_OPTIONS("wxXML")
 
+const wxChar * WXDLLIMPEXP_XML   wxXML_ENCODING_UTF_8 = wxT ( "UTF-8" );
 
 IMPLEMENT_CLASS(wxXmlDocument, wxObject)
 
@@ -341,10 +342,10 @@
 //-----------------------------------------------------------------------------
 
 wxXmlDocument::wxXmlDocument()
-    : m_version(wxT("1.0")), m_fileEncoding(wxT("utf-8")), m_root(NULL)
+    : m_version(wxT("1.0")), m_fileEncoding(wxXML_ENCODING_UTF_8), m_root(NULL)
 {
 #if !wxUSE_UNICODE
-    m_encoding = wxT("UTF-8");
+    m_encoding = wxXML_ENCODING_UTF_8;
 #endif
 }
 
@@ -633,10 +634,11 @@
     XML_Parser parser = XML_ParserCreate(NULL);
 
     ctx.root = ctx.node = NULL;
-    ctx.encoding = wxT("UTF-8"); // default in absence of encoding=""
+    ctx.encoding = wxXML_ENCODING_UTF_8; // default in absence of encoding=""
     ctx.conv = NULL;
 #if !wxUSE_UNICODE
-    if ( encoding != wxT("UTF-8") && encoding != wxT("utf-8") )
+//  if ( encoding != wxT("UTF-8") && encoding != wxT("utf-8") )
+    if ( encoding.comparenocase ( wxXML_ENCODING_UTF_8 ) != 0 )
         ctx.conv = new wxCSConv(encoding);
 #endif
     ctx.removeWhiteOnlyNodes = (flags & wxXMLDOC_KEEP_WHITESPACE_NODES) == 0;
@@ -859,7 +861,8 @@
     wxMBConv *convFile = new wxCSConv(GetFileEncoding());
 #else
     wxMBConv *convFile = NULL;
-    if ( GetFileEncoding() != GetEncoding() )
+//  if ( GetFileEncoding() != GetEncoding() )
+    if ( GetFileEncoding().comparenocase ( GetEncoding () ) != 0 )
     {
         convFile = new wxCSConv(GetFileEncoding());
         convMem = new wxCSConv(GetEncoding());

 	  	 

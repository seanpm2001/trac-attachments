From 2bc4ca5827b49647330c51677d1b275d02a579aa Mon Sep 17 00:00:00 2001
From: Martin Koegler <martin.koegler@chello.at>
Date: Wed, 22 Jul 2015 09:03:16 +0200
Subject: [PATCH 1/3] Define touch API

---
 include/wx/event.h    | 71 +++++++++++++++++++++++++++++++++++++++++++++++++++
 include/wx/window.h   |  3 +++
 interface/wx/event.h  | 71 +++++++++++++++++++++++++++++++++++++++++++++++++++
 interface/wx/window.h | 10 ++++++++
 src/common/event.cpp  | 19 ++++++++++++++
 5 files changed, 174 insertions(+)

diff --git a/include/wx/event.h b/include/wx/event.h
index 61ec19c..9e909a2 100644
--- a/include/wx/event.h
+++ b/include/wx/event.h
@@ -631,6 +631,7 @@ class WXDLLIMPEXP_FWD_BASE wxThreadEvent;
 class WXDLLIMPEXP_FWD_BASE wxAsyncMethodCallEvent;
 class WXDLLIMPEXP_FWD_CORE wxCommandEvent;
 class WXDLLIMPEXP_FWD_CORE wxMouseEvent;
+class WXDLLIMPEXP_FWD_CORE wxTouchEvent;
 class WXDLLIMPEXP_FWD_CORE wxFocusEvent;
 class WXDLLIMPEXP_FWD_CORE wxChildFocusEvent;
 class WXDLLIMPEXP_FWD_CORE wxKeyEvent;
@@ -717,6 +718,11 @@ wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_DOWN, wxMouseEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_UP, wxMouseEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_DCLICK, wxMouseEvent);
 
+    // Touch event types
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_DOWN, wxTouchEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_MOVE, wxTouchEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_UP, wxTouchEvent);
+
     // Character input event type
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_CHAR, wxKeyEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_CHAR_HOOK, wxKeyEvent);
@@ -1831,6 +1837,57 @@ private:
     DECLARE_DYNAMIC_CLASS(wxMouseEvent)
 };
 
+// Touch event class
+
+class WXDLLIMPEXP_CORE wxTouchEvent : public wxEvent
+{
+public:
+    wxTouchEvent(wxEventType type = wxEVT_NULL,
+                 wxPoint pos = wxDefaultPosition,
+                 void* sequence = NULL,
+                 bool primary = false)
+        : wxEvent(0, type),
+          m_pos(pos),
+          m_sequence(sequence),
+          m_primary(primary)
+	{
+	}
+
+    wxTouchEvent(const wxTouchEvent& event)
+        : wxEvent(event)
+    {
+        Assign(event);
+    }
+
+    void SetPosition(wxPoint pos) { m_pos = pos; }
+    void SetSequence(void* sequence) { m_sequence = sequence; }
+    void SetPrimary(bool primary) { m_primary = primary; }
+
+    wxPoint GetPosition() const { return m_pos; }
+    void* GetSequence() const { return m_sequence; }
+    bool IsPrimary() const { return m_primary; }
+
+    virtual wxEvent *Clone() const { return new wxTouchEvent(*this); }
+
+    wxTouchEvent& operator=(const wxTouchEvent& event)
+    {
+        if (&event != this)
+            Assign(event);
+        return *this;
+    }
+
+protected:
+    wxPoint m_pos;
+    void* m_sequence;
+    bool m_primary;
+
+    void Assign(const wxTouchEvent& evt);
+
+private:
+    wxDECLARE_DYNAMIC_CLASS(wxTouchEvent);
+};
+
+
 // Cursor set event
 
 /*
@@ -3873,6 +3930,7 @@ typedef void (wxEvtHandler::*wxPaintEventFunction)(wxPaintEvent&);
 typedef void (wxEvtHandler::*wxNcPaintEventFunction)(wxNcPaintEvent&);
 typedef void (wxEvtHandler::*wxEraseEventFunction)(wxEraseEvent&);
 typedef void (wxEvtHandler::*wxMouseEventFunction)(wxMouseEvent&);
+typedef void (wxEvtHandler::*wxTouchEventFunction)(wxTouchEvent&);
 typedef void (wxEvtHandler::*wxCharEventFunction)(wxKeyEvent&);
 typedef void (wxEvtHandler::*wxFocusEventFunction)(wxFocusEvent&);
 typedef void (wxEvtHandler::*wxChildFocusEventFunction)(wxChildFocusEvent&);
@@ -3920,6 +3978,8 @@ typedef void (wxEvtHandler::*wxClipboardTextEventFunction)(wxClipboardTextEvent&
     wxEVENT_HANDLER_CAST(wxEraseEventFunction, func)
 #define wxMouseEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxMouseEventFunction, func)
+#define wxTouchEventHandler(func) \
+    wxEVENT_HANDLER_CAST(wxTouchEventFunction, func)
 #define wxCharEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxCharEventFunction, func)
 #define wxKeyEventHandler(func) wxCharEventHandler(func)
@@ -4241,6 +4301,17 @@ typedef void (wxEvtHandler::*wxClipboardTextEventFunction)(wxClipboardTextEvent&
     EVT_ENTER_WINDOW(func) \
     EVT_MOUSEWHEEL(func)
 
+// Touch events
+#define EVT_TOUCH_DOWN(func) wx__DECLARE_EVT0(wxEVT_TOUCH_DOWN, wxTouchEventHandler(func))
+#define EVT_TOUCH_MOVE(func) wx__DECLARE_EVT0(wxEVT_TOUCH_MOVE, wxTouchEventHandler(func))
+#define EVT_TOUCH_UP(func) wx__DECLARE_EVT0(wxEVT_TOUCH_UP, wxTouchEventHandler(func))
+
+// All touch events
+#define EVT_TOUCH_EVENTS(func) \
+    EVT_TOUCH_DOWN(func) \
+    EVT_TOUCH_UP(func) \
+    EVT_TOUCH_UP(func)
+
 // Scrolling from wxWindow (sent to wxScrolledWindow)
 #define EVT_SCROLLWIN_TOP(func) wx__DECLARE_EVT0(wxEVT_SCROLLWIN_TOP, wxScrollWinEventHandler(func))
 #define EVT_SCROLLWIN_BOTTOM(func) wx__DECLARE_EVT0(wxEVT_SCROLLWIN_BOTTOM, wxScrollWinEventHandler(func))
diff --git a/include/wx/window.h b/include/wx/window.h
index 7dffad4..947390b 100644
--- a/include/wx/window.h
+++ b/include/wx/window.h
@@ -1511,7 +1511,10 @@ public:
     // returns false) but still are self-contained navigation domains as well.
     virtual bool IsTopNavigationDomain() const { return false; }
 
+    /*virtual*/ bool EnableTouchEvents() { return false; }
+    /*virtual*/ void DisableTouchEvents() { }
 
+    
 protected:
     // helper for the derived class Create() methods: the first overload, with
     // validator parameter, should be used for child windows while the second
diff --git a/interface/wx/event.h b/interface/wx/event.h
index 52bb609..89c57b2 100644
--- a/interface/wx/event.h
+++ b/interface/wx/event.h
@@ -2896,6 +2896,74 @@ public:
 
 
 /**
+    @class wxTouchEvent
+
+    This event class contains information about the events generated by touch devices:
+    they include press and release events and move events.
+
+    @beginEventTable{wxTouchEvent}
+    @event{EVT_TOUCH_DOWN(func)}
+        Process a @c wxEVT_TOUCH_DOWN event.
+    @event{EVT_TOUCH_MOVE(func)}
+        Process a @c wxEVT_TOUCH_MOVE event.
+    @event{EVT_TOUCH_EVENTS(func)}
+        Process all touch events.
+    @endEventTable
+
+    @library{wxcore}
+    @category{events}
+
+    @see wxKeyEvent
+*/
+class wxTouchEvent : public wxEvent
+{
+public:
+    /**
+        Constructor. Valid event types are:
+
+         @li @c wxEVT_TOUCH_DOWN
+         @li @c wxEVT_TOUCH_MOVE
+         @li @c wxEVT_TOUCH_UP
+    */
+    wxTouchEvent(wxEventType type = wxEVT_NULL,
+                 wxPoint pos = wxDefaultPosition,
+                 void* sequence = NULL,
+                 bool primary = false);
+
+    /**
+        Sets the position of the touch event.
+    */
+    void SetPosition(wxPoint pos);
+
+    /**
+        Sets the ID of the touch. This allows to track the move of an specific touch point.
+    */
+    void SetSequence(void* sequence);
+
+    /**
+        Sets if the event is a primary (mouse pointer emulating) event.
+    */
+    void SetPrimary(bool primary);
+
+    /**
+        Returns the position of the touch event.
+    */
+    wxPoint GetPosition() const;
+
+    /**
+        Returns the ID of the touch. This allows to track the move of an specific touch point.
+    */
+    void* GetSequence() const;
+
+    /**
+        Returns @true if the event is a primary (mouse pointer emulating) event.
+    */
+    bool IsPrimary() const;
+};
+
+
+
+/**
     @class wxDropFilesEvent
 
     This class is used for drop files events, that is, when files have been dropped
@@ -4658,6 +4726,9 @@ wxEventType wxEVT_MIDDLE_UP;
 wxEventType wxEVT_RIGHT_DOWN;
 wxEventType wxEVT_RIGHT_UP;
 wxEventType wxEVT_MOTION;
+wxEventType wxEVT_TOUCH_DOWN;
+wxEventType wxEVT_TOUCH_MOVE;
+wxEventType wxEVT_TOUCH_UP;
 wxEventType wxEVT_ENTER_WINDOW;
 wxEventType wxEVT_LEAVE_WINDOW;
 wxEventType wxEVT_LEFT_DCLICK;
diff --git a/interface/wx/window.h b/interface/wx/window.h
index 89eb222..94407a0 100644
--- a/interface/wx/window.h
+++ b/interface/wx/window.h
@@ -3760,6 +3760,16 @@ protected:
     */
     virtual bool ProcessEvent(wxEvent& event);
 
+    /**
+        This function trys to enable receiving touch events.
+    */
+    /*virtual*/ bool EnableTouchEvents();
+
+    /**
+        This function trys to disable receiving touch events.
+    */
+    /*virtual*/ void DisableTouchEvents();
+
     //@{
     /**
         See ProcessEvent() for more info about why you shouldn't use this function
diff --git a/src/common/event.cpp b/src/common/event.cpp
index b81c173..c2e45f0 100644
--- a/src/common/event.cpp
+++ b/src/common/event.cpp
@@ -72,6 +72,7 @@
     IMPLEMENT_DYNAMIC_CLASS(wxScrollEvent, wxCommandEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxScrollWinEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxMouseEvent, wxEvent)
+    IMPLEMENT_DYNAMIC_CLASS(wxTouchEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxKeyEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxSizeEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxPaintEvent, wxEvent)
@@ -207,6 +208,11 @@ wxDEFINE_EVENT( wxEVT_AUX2_DOWN, wxMouseEvent );
 wxDEFINE_EVENT( wxEVT_AUX2_UP, wxMouseEvent );
 wxDEFINE_EVENT( wxEVT_AUX2_DCLICK, wxMouseEvent );
 
+// Touch event types
+wxDEFINE_EVENT( wxEVT_TOUCH_DOWN, wxTouchEvent );
+wxDEFINE_EVENT( wxEVT_TOUCH_MOVE, wxTouchEvent );
+wxDEFINE_EVENT( wxEVT_TOUCH_UP, wxTouchEvent );
+
 // Character input event type
 wxDEFINE_EVENT( wxEVT_CHAR, wxKeyEvent );
 wxDEFINE_EVENT( wxEVT_AFTER_CHAR, wxKeyEvent );
@@ -742,6 +748,19 @@ wxPoint wxMouseEvent::GetLogicalPosition(const wxDC& dc) const
 }
 
 // ----------------------------------------------------------------------------
+// wxTouchEvent
+// ----------------------------------------------------------------------------
+
+void wxTouchEvent::Assign(const wxTouchEvent& event)
+{
+    wxEvent::operator=(event);
+
+    m_pos = event.m_pos;
+    m_sequence = event.m_sequence;
+    m_primary = event.m_primary;
+}
+
+// ----------------------------------------------------------------------------
 // wxKeyEvent
 // ----------------------------------------------------------------------------
 
-- 
2.1.4


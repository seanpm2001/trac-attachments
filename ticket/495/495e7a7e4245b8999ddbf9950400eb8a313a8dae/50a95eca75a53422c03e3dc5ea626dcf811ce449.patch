From 531f62559dbc2f6bf798c104f3b812c9fb8f2f64 Mon Sep 17 00:00:00 2001
From: Martin Koegler <martin.koegler@chello.at>
Date: Wed, 22 Jul 2015 09:03:16 +0200
Subject: [PATCH 1/3] Define touch API

---
 include/wx/event.h    |  82 +++++++++++++++++++++++++++++++++++++
 include/wx/window.h   |   3 ++
 interface/wx/event.h  | 110 ++++++++++++++++++++++++++++++++++++++++++++++++++
 interface/wx/window.h |  10 +++++
 src/common/event.cpp  |  20 +++++++++
 5 files changed, 225 insertions(+)

diff --git a/include/wx/event.h b/include/wx/event.h
index 61ec19c..53b83c9 100644
--- a/include/wx/event.h
+++ b/include/wx/event.h
@@ -23,6 +23,7 @@
 #endif
 
 #include "wx/dynarray.h"
+#include "wx/itemid.h"
 #include "wx/thread.h"
 #include "wx/tracker.h"
 #include "wx/typeinfo.h"
@@ -631,6 +632,7 @@ class WXDLLIMPEXP_FWD_BASE wxThreadEvent;
 class WXDLLIMPEXP_FWD_BASE wxAsyncMethodCallEvent;
 class WXDLLIMPEXP_FWD_CORE wxCommandEvent;
 class WXDLLIMPEXP_FWD_CORE wxMouseEvent;
+class WXDLLIMPEXP_FWD_CORE wxTouchEvent;
 class WXDLLIMPEXP_FWD_CORE wxFocusEvent;
 class WXDLLIMPEXP_FWD_CORE wxChildFocusEvent;
 class WXDLLIMPEXP_FWD_CORE wxKeyEvent;
@@ -717,6 +719,12 @@ wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_DOWN, wxMouseEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_UP, wxMouseEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_AUX2_DCLICK, wxMouseEvent);
 
+    // Touch event types
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_BEGIN, wxTouchEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_MOVE, wxTouchEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_END, wxTouchEvent);
+wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_TOUCH_CANCEL, wxTouchEvent);
+
     // Character input event type
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_CHAR, wxKeyEvent);
 wxDECLARE_EXPORTED_EVENT(WXDLLIMPEXP_CORE, wxEVT_CHAR_HOOK, wxKeyEvent);
@@ -1831,6 +1839,64 @@ private:
     DECLARE_DYNAMIC_CLASS(wxMouseEvent)
 };
 
+// Touch event class
+
+class wxTouchPointId : public wxItemId<void*>
+{
+public:
+    wxTouchPointId() : wxItemId<void*>() { }
+    wxEXPLICIT wxTouchPointId(void* pItem) : wxItemId<void*>(pItem) { }
+};
+
+class WXDLLIMPEXP_CORE wxTouchEvent : public wxEvent
+{
+public:
+    wxTouchEvent(wxEventType type = wxEVT_NULL,
+                 wxPoint pos = wxDefaultPosition,
+                 const wxTouchPointId& sequence = wxTouchPointId(),
+                 bool primary = false)
+        : wxEvent(0, type),
+          m_pos(pos),
+          m_sequence(sequence),
+          m_primary(primary)
+	{
+	}
+
+    wxTouchEvent(const wxTouchEvent& event)
+        : wxEvent(event)
+    {
+        Assign(event);
+    }
+
+    void SetPosition(wxPoint pos) { m_pos = pos; }
+    void SetSequence(const wxTouchPointId& sequence) { m_sequence = sequence; }
+    void SetPrimary(bool primary) { m_primary = primary; }
+
+    wxPoint GetPosition() const { return m_pos; }
+    const wxTouchPointId& GetSequence() const { return m_sequence; }
+    bool IsPrimary() const { return m_primary; }
+
+    virtual wxEvent *Clone() const { return new wxTouchEvent(*this); }
+
+    wxTouchEvent& operator=(const wxTouchEvent& event)
+    {
+        if (&event != this)
+            Assign(event);
+        return *this;
+    }
+
+protected:
+    wxPoint m_pos;
+    wxTouchPointId m_sequence;
+    bool m_primary;
+
+    void Assign(const wxTouchEvent& evt);
+
+private:
+    wxDECLARE_DYNAMIC_CLASS(wxTouchEvent);
+};
+
+
 // Cursor set event
 
 /*
@@ -3873,6 +3939,7 @@ typedef void (wxEvtHandler::*wxPaintEventFunction)(wxPaintEvent&);
 typedef void (wxEvtHandler::*wxNcPaintEventFunction)(wxNcPaintEvent&);
 typedef void (wxEvtHandler::*wxEraseEventFunction)(wxEraseEvent&);
 typedef void (wxEvtHandler::*wxMouseEventFunction)(wxMouseEvent&);
+typedef void (wxEvtHandler::*wxTouchEventFunction)(wxTouchEvent&);
 typedef void (wxEvtHandler::*wxCharEventFunction)(wxKeyEvent&);
 typedef void (wxEvtHandler::*wxFocusEventFunction)(wxFocusEvent&);
 typedef void (wxEvtHandler::*wxChildFocusEventFunction)(wxChildFocusEvent&);
@@ -3920,6 +3987,8 @@ typedef void (wxEvtHandler::*wxClipboardTextEventFunction)(wxClipboardTextEvent&
     wxEVENT_HANDLER_CAST(wxEraseEventFunction, func)
 #define wxMouseEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxMouseEventFunction, func)
+#define wxTouchEventHandler(func) \
+    wxEVENT_HANDLER_CAST(wxTouchEventFunction, func)
 #define wxCharEventHandler(func) \
     wxEVENT_HANDLER_CAST(wxCharEventFunction, func)
 #define wxKeyEventHandler(func) wxCharEventHandler(func)
@@ -4241,6 +4310,19 @@ typedef void (wxEvtHandler::*wxClipboardTextEventFunction)(wxClipboardTextEvent&
     EVT_ENTER_WINDOW(func) \
     EVT_MOUSEWHEEL(func)
 
+// Touch events
+#define EVT_TOUCH_BEGIN(func) wx__DECLARE_EVT0(wxEVT_TOUCH_BEGIN, wxTouchEventHandler(func))
+#define EVT_TOUCH_MOVE(func) wx__DECLARE_EVT0(wxEVT_TOUCH_MOVE, wxTouchEventHandler(func))
+#define EVT_TOUCH_END(func) wx__DECLARE_EVT0(wxEVT_TOUCH_END, wxTouchEventHandler(func))
+#define EVT_TOUCH_CANCEL(func) wx__DECLARE_EVT0(wxEVT_TOUCH_CANCEL, wxTouchEventHandler(func))
+
+// All touch events
+#define EVT_TOUCH_EVENTS(func) \
+    EVT_TOUCH_BEGIN(func) \
+    EVT_TOUCH_MOVE(func) \
+    EVT_TOUCH_END(func) \
+    EVT_TOUCH_CANCEL(func)
+
 // Scrolling from wxWindow (sent to wxScrolledWindow)
 #define EVT_SCROLLWIN_TOP(func) wx__DECLARE_EVT0(wxEVT_SCROLLWIN_TOP, wxScrollWinEventHandler(func))
 #define EVT_SCROLLWIN_BOTTOM(func) wx__DECLARE_EVT0(wxEVT_SCROLLWIN_BOTTOM, wxScrollWinEventHandler(func))
diff --git a/include/wx/window.h b/include/wx/window.h
index 7dffad4..a080bda 100644
--- a/include/wx/window.h
+++ b/include/wx/window.h
@@ -1511,7 +1511,10 @@ public:
     // returns false) but still are self-contained navigation domains as well.
     virtual bool IsTopNavigationDomain() const { return false; }
 
+    /*virtual*/ bool EnableTouchEvents(bool enable = true) { return false; }
+    bool DisableTouchEvents() { return EnableTouchEvents(false); }
 
+    
 protected:
     // helper for the derived class Create() methods: the first overload, with
     // validator parameter, should be used for child windows while the second
diff --git a/interface/wx/event.h b/interface/wx/event.h
index 52bb609..52d8a43 100644
--- a/interface/wx/event.h
+++ b/interface/wx/event.h
@@ -2894,6 +2894,112 @@ public:
 };
 
 
+/**
+    @class wxTouchPointId
+
+    wxTouchPointId is a small opaque class that represents the ID of a touch point.
+
+    It must hold a unique ID of type @e void* in its only field and can be converted
+    to and from it.
+
+    If the ID is @NULL the wxTouchPointId is invalid and wxTouchPointId::IsOk will
+    return @false.
+*/
+class wxTouchPointId
+{
+public:
+    //@{
+    /**
+        Constructor.
+    */
+    wxTouchPointId();
+    wxTouchPointId(const wxTouchPointId& item);
+    explicit wxTouchPointId(void* id);
+    //@}
+
+    /**
+        Returns the ID.
+    */
+    void* GetID() const;
+
+    /**
+        Returns @true if the ID is not @NULL.
+    */
+    bool IsOk() const;
+};
+
+/**
+    @class wxTouchEvent
+
+    This event class contains information about the events generated by touch devices:
+    they include press and release events and move events.
+
+    @beginEventTable{wxTouchEvent}
+    @event{EVT_TOUCH_BEGIN(func)}
+        Process a @c wxEVT_TOUCH_BEGIN event.
+    @event{EVT_TOUCH_MOVE(func)}
+        Process a @c wxEVT_TOUCH_MOVE event.
+    @event{EVT_TOUCH_END(func)}
+        Process a @c wxEVT_TOUCH_END event.
+    @event{EVT_TOUCH_CANCEL(func)}
+        Process a @c wxEVT_TOUCH_CANCEL event.
+    @event{EVT_TOUCH_EVENTS(func)}
+        Process all touch events.
+    @endEventTable
+
+    @library{wxcore}
+    @category{events}
+
+    @see wxKeyEvent
+*/
+class wxTouchEvent : public wxEvent
+{
+public:
+    /**
+        Constructor. Valid event types are:
+
+         @li @c wxEVT_TOUCH_BEGIN
+         @li @c wxEVT_TOUCH_MOVE
+         @li @c wxEVT_TOUCH_END
+         @li @c wxEVT_TOUCH_CANCEL
+    */
+    wxTouchEvent(wxEventType type = wxEVT_NULL,
+                 wxPoint pos = wxDefaultPosition,
+                 const wxTouchPointId& sequence = NULL,
+                 bool primary = false);
+
+    /**
+        Sets the position of the touch event.
+    */
+    void SetPosition(wxPoint pos);
+
+    /**
+        Sets the ID of the touch. This allows to track the move of an specific touch point.
+    */
+    void SetSequence(const wxTouchPointId& sequence);
+
+    /**
+        Sets if the event is a primary (mouse pointer emulating) event.
+    */
+    void SetPrimary(bool primary);
+
+    /**
+        Returns the position of the touch event.
+    */
+    wxPoint GetPosition() const;
+
+    /**
+        Returns the ID of the touch. This allows to track the move of an specific touch point.
+    */
+    const wxTouchPointId& GetSequence() const;
+
+    /**
+        Returns @true if the event is a primary (mouse pointer emulating) event.
+    */
+    bool IsPrimary() const;
+};
+
+
 
 /**
     @class wxDropFilesEvent
@@ -4658,6 +4764,10 @@ wxEventType wxEVT_MIDDLE_UP;
 wxEventType wxEVT_RIGHT_DOWN;
 wxEventType wxEVT_RIGHT_UP;
 wxEventType wxEVT_MOTION;
+wxEventType wxEVT_TOUCH_BEGIN;
+wxEventType wxEVT_TOUCH_MOVE;
+wxEventType wxEVT_TOUCH_END;
+wxEventType wxEVT_TOUCH_CANCEL;
 wxEventType wxEVT_ENTER_WINDOW;
 wxEventType wxEVT_LEAVE_WINDOW;
 wxEventType wxEVT_LEFT_DCLICK;
diff --git a/interface/wx/window.h b/interface/wx/window.h
index 89eb222..62779fd 100644
--- a/interface/wx/window.h
+++ b/interface/wx/window.h
@@ -3760,6 +3760,16 @@ protected:
     */
     virtual bool ProcessEvent(wxEvent& event);
 
+    /**
+        This function trys to enable receiving touch events.
+    */
+    /*virtual*/ bool EnableTouchEvents(bool enable = true);
+
+    /**
+        This function trys to disable receiving touch events.
+    */
+    bool DisableTouchEvents();
+
     //@{
     /**
         See ProcessEvent() for more info about why you shouldn't use this function
diff --git a/src/common/event.cpp b/src/common/event.cpp
index b81c173..06c5d82 100644
--- a/src/common/event.cpp
+++ b/src/common/event.cpp
@@ -72,6 +72,7 @@
     IMPLEMENT_DYNAMIC_CLASS(wxScrollEvent, wxCommandEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxScrollWinEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxMouseEvent, wxEvent)
+    IMPLEMENT_DYNAMIC_CLASS(wxTouchEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxKeyEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxSizeEvent, wxEvent)
     IMPLEMENT_DYNAMIC_CLASS(wxPaintEvent, wxEvent)
@@ -207,6 +208,12 @@ wxDEFINE_EVENT( wxEVT_AUX2_DOWN, wxMouseEvent );
 wxDEFINE_EVENT( wxEVT_AUX2_UP, wxMouseEvent );
 wxDEFINE_EVENT( wxEVT_AUX2_DCLICK, wxMouseEvent );
 
+// Touch event types
+wxDEFINE_EVENT( wxEVT_TOUCH_BEGIN, wxTouchEvent );
+wxDEFINE_EVENT( wxEVT_TOUCH_MOVE, wxTouchEvent );
+wxDEFINE_EVENT( wxEVT_TOUCH_END, wxTouchEvent );
+wxDEFINE_EVENT( wxEVT_TOUCH_CANCEL, wxTouchEvent );
+
 // Character input event type
 wxDEFINE_EVENT( wxEVT_CHAR, wxKeyEvent );
 wxDEFINE_EVENT( wxEVT_AFTER_CHAR, wxKeyEvent );
@@ -742,6 +749,19 @@ wxPoint wxMouseEvent::GetLogicalPosition(const wxDC& dc) const
 }
 
 // ----------------------------------------------------------------------------
+// wxTouchEvent
+// ----------------------------------------------------------------------------
+
+void wxTouchEvent::Assign(const wxTouchEvent& event)
+{
+    wxEvent::operator=(event);
+
+    m_pos = event.m_pos;
+    m_sequence = event.m_sequence;
+    m_primary = event.m_primary;
+}
+
+// ----------------------------------------------------------------------------
 // wxKeyEvent
 // ----------------------------------------------------------------------------
 
-- 
2.1.4


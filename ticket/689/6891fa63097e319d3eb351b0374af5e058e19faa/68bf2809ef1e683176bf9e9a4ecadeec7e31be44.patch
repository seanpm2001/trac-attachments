Index: gsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/gsocket.cpp,v
retrieving revision 1.33
diff -u -4 -r1.33 gsocket.cpp
--- gsocket.cpp	2005/02/04 05:52:32	1.33
+++ gsocket.cpp	2005/03/04 15:09:19
@@ -167,8 +167,13 @@
 #define UNMASK_SIGNAL()                     \
   signal(SIGPIPE, old_handler);             \
 }
 
+#ifdef MSG_NOSIGNAL
+#  define GSOCKET_MSG_NOSIGNAL MSG_NOSIGNAL
+#else /* MSG_NOSIGNAL not available (FreeBSD including OS X) */
+#  define GSOCKET_MSG_NOSIGNAL 0
+#endif /* MSG_NOSIGNAL */
 
 #ifndef __GSOCKET_STANDALONE__
 #  include "wx/unix/gsockunx.h"
 #  include "wx/gsocket.h"
@@ -490,8 +495,14 @@
   {
     m_error = GSOCK_IOERR;
     return GSOCK_IOERR;
   }
+
+  /* FreeBSD variants can't use MSG_NOSIGNAL, and instead use a socket option */
+#ifdef SO_NOSIGPIPE
+  setsockopt(m_fd, SOL_SOCKET, SO_NOSIGPIPE, (const char*)&arg, sizeof(u_long));
+#endif
+
   ioctl(m_fd, FIONBIO, &arg);
   gs_gui_functions->Enable_Events(this);
 
   /* allow a socket to re-bind if the socket is in the TIME_WAIT
@@ -539,10 +550,12 @@
   int arg = 1;
 
   assert(this);
 
+#ifndef __DARWIN__
   /* Reenable CONNECTION events */
   Enable(GSOCK_CONNECTION);
+#endif
 
   /* If the socket has already been created, we exit immediately */
   if (m_fd == INVALID_SOCKET || !m_server)
   {
@@ -568,8 +581,13 @@
   }
 
   connection->m_fd = accept(m_fd, &from, (SOCKLEN_T *) &fromlen);
 
+#ifdef __DARWIN__
+  /* Reenable CONNECTION events */
+  Enable(GSOCK_CONNECTION);
+#endif
+
   if (connection->m_fd == INVALID_SOCKET)
   {
     if (errno == EWOULDBLOCK)
       m_error = GSOCK_WOULDBLOCK;
@@ -679,18 +697,28 @@
   {
     m_error = GSOCK_IOERR;
     return GSOCK_IOERR;
   }
+
+  /* FreeBSD variants can't use MSG_NOSIGNAL, and instead use a socket option */
+#ifdef SO_NOSIGPIPE
+  setsockopt(m_fd, SOL_SOCKET, SO_NOSIGPIPE, (const char*)&arg, sizeof(u_long));
+#endif
+
 #if defined(__EMX__) || defined(__VISAGECPP__)
   ioctl(m_fd, FIONBIO, (char*)&arg, sizeof(arg));
 #else
   ioctl(m_fd, FIONBIO, &arg);
 #endif
-  gs_gui_functions->Enable_Events(this);
 
   /* Connect it to the peer address, with a timeout (see below) */
   ret = connect(m_fd, m_peer->m_addr, m_peer->m_len);
 
+  if (m_non_blocking)
+  {
+    gs_gui_functions->Enable_Events(this);
+  }
+
   if (ret == -1)
   {
     err = errno;
 
@@ -713,8 +741,10 @@
         SOCKOPTLEN_T len = sizeof(error);
 
         getsockopt(m_fd, SOL_SOCKET, SO_ERROR, (char*) &error, &len);
 
+        gs_gui_functions->Enable_Events(this);
+
         if (!error)
           return GSOCK_NOERROR;
       }
     }
@@ -840,9 +870,9 @@
   }
 
   if (ret == -1)
   {
-    if (errno == EWOULDBLOCK)
+    if ((errno == EWOULDBLOCK) || (errno == EAGAIN))
       m_error = GSOCK_WOULDBLOCK;
     else
       m_error = GSOCK_IOERR;
   }
@@ -884,9 +914,9 @@
   GSocket_Debug(( "GSocket_Write #4, size %d\n", size ));
 
   if (ret == -1)
   {
-    if (errno == EWOULDBLOCK)
+    if ((errno == EWOULDBLOCK) || (errno == EAGAIN))	  
     {
       m_error = GSOCK_WOULDBLOCK;
       GSocket_Debug(( "GSocket_Write error WOULDBLOCK\n" ));
     }
@@ -965,10 +995,12 @@
     /* Check for readability */
     if (FD_ISSET(m_fd, &readfds))
     {
       char c;
+
+      int num = recv(m_fd, &c, 1, MSG_PEEK | GSOCKET_MSG_NOSIGNAL);
 
-      if (recv(m_fd, &c, 1, MSG_PEEK) > 0)
+      if (num > 0)
       {
         result |= GSOCK_INPUT_FLAG;
       }
       else
@@ -977,9 +1009,9 @@
         {
           result |= GSOCK_CONNECTION_FLAG;
           m_detected |= GSOCK_CONNECTION_FLAG;
         }
-        else
+        else if ((errno != EWOULDBLOCK) && (errno != EAGAIN) && (errno != EINTR))
         {
           m_detected = GSOCK_LOST_FLAG;
           m_establishing = false;
 
@@ -1278,9 +1310,14 @@
 }
 
 int GSocket::Recv_Stream(char *buffer, int size)
 {
-  return recv(m_fd, buffer, size, 0);
+  int ret;
+  do 
+  {
+    ret = recv(m_fd, buffer, size, GSOCKET_MSG_NOSIGNAL);
+  } while (ret == -1 && errno == EINTR);
+  return ret;
 }
 
 int GSocket::Recv_Dgram(char *buffer, int size)
 {
@@ -1290,9 +1327,12 @@
   GSocketError err;
 
   fromlen = sizeof(from);
 
-  ret = recvfrom(m_fd, buffer, size, 0, &from, (SOCKLEN_T *) &fromlen);
+  do 
+  {
+    ret = recvfrom(m_fd, buffer, size, 0, &from, (SOCKLEN_T *) &fromlen);
+  } while (ret == -1 && errno == EINTR);
 
   if (ret == -1)
     return -1;
 
@@ -1322,13 +1362,16 @@
 {
   int ret;
 
 #ifndef __VISAGECPP__
-  MASK_SIGNAL();
-  ret = send(m_fd, buffer, size, 0);
+   MASK_SIGNAL();
+#endif 
+  do 
+  {
+    ret = send(m_fd, (char *)buffer, size, GSOCKET_MSG_NOSIGNAL);
+  } while (ret == -1 && errno == EINTR);
+#ifndef __VISAGECPP__
   UNMASK_SIGNAL();
-#else
-  ret = send(m_fd, (char *)buffer, size, 0);
 #endif
 
   return ret;
 }
@@ -1353,12 +1396,15 @@
   }
 
 #ifndef __VISAGECPP__
   MASK_SIGNAL();
-  ret = sendto(m_fd, buffer, size, 0, addr, len);
+#endif
+  do 
+  {
+    ret = sendto(m_fd, (char *)buffer, size, 0, addr, len);
+  } while (ret == -1 && errno == EINTR);
+#ifndef __VISAGECPP__
   UNMASK_SIGNAL();
-#else
-  ret = sendto(m_fd, (char *)buffer, size, 0, addr, len);
 #endif
 
   /* Frees memory allocated from _GAddress_translate_to */
   free(addr);
@@ -1369,8 +1415,14 @@
 void GSocket::Detected_Read()
 {
   char c;
 
+  /* Safeguard against straggling call to Detected_Read */
+  if (m_fd == INVALID_SOCKET)
+  {
+    return;
+  }
+
   /* If we have already detected a LOST event, then don't try
    * to do any further processing.
    */
   if ((m_detected & GSOCK_LOST_FLAG) != 0)
@@ -1380,10 +1432,12 @@
     CALL_CALLBACK(this, GSOCK_LOST);
     Shutdown();
     return;
   }
+
+  int num =  recv(m_fd, &c, 1, MSG_PEEK | GSOCKET_MSG_NOSIGNAL);
 
-  if (recv(m_fd, &c, 1, MSG_PEEK) > 0)
+  if (num > 0)
   {
     CALL_CALLBACK(this, GSOCK_INPUT);
   }
   else
@@ -1393,10 +1447,17 @@
       CALL_CALLBACK(this, GSOCK_CONNECTION);
     }
     else
     {
-      CALL_CALLBACK(this, GSOCK_LOST);
-      Shutdown();
+      if ((errno == EWOULDBLOCK) || (errno == EAGAIN) || (errno == EINTR)) 
+      {
+        CALL_CALLBACK(this, GSOCK_INPUT);
+      }
+      else 
+      {
+        CALL_CALLBACK(this, GSOCK_LOST);
+        Shutdown();
+      } 
     }
   }
 }
 

 	  	 

Index: src/unix/gsocket.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/unix/gsocket.cpp,v
retrieving revision 1.33
diff -b -u -3 -r1.33 gsocket.cpp
--- src/unix/gsocket.cpp	2005/02/04 05:52:32	1.33
+++ src/unix/gsocket.cpp	2005/03/04 01:33:35
@@ -841,7 +841,7 @@
 
   if (ret == -1)
   {
-    if (errno == EWOULDBLOCK)
+    if ((errno == EWOULDBLOCK) || (errno == EAGAIN))
       m_error = GSOCK_WOULDBLOCK;
     else
       m_error = GSOCK_IOERR;
@@ -885,7 +885,7 @@
 
   if (ret == -1)
   {
-    if (errno == EWOULDBLOCK)
+    if ((errno == EWOULDBLOCK) || (errno == EAGAIN))	  
     {
       m_error = GSOCK_WOULDBLOCK;
       GSocket_Debug(( "GSocket_Write error WOULDBLOCK\n" ));
@@ -1279,7 +1279,12 @@
 
 int GSocket::Recv_Stream(char *buffer, int size)
 {
-  return recv(m_fd, buffer, size, 0);
+  int ret;
+  do 
+  {
+    ret = recv(m_fd, buffer, size, 0);
+  } while (ret == -1 && errno == EINTR);
+  return ret;
 }
 
 int GSocket::Recv_Dgram(char *buffer, int size)
@@ -1291,7 +1296,10 @@
 
   fromlen = sizeof(from);
 
+  do 
+  {
   ret = recvfrom(m_fd, buffer, size, 0, &from, (SOCKLEN_T *) &fromlen);
+  } while (ret == -1 && errno == EINTR);
 
   if (ret == -1)
     return -1;
@@ -1324,10 +1332,13 @@
 
 #ifndef __VISAGECPP__
   MASK_SIGNAL();
-  ret = send(m_fd, buffer, size, 0);
-  UNMASK_SIGNAL();
-#else
+#endif 
+  do 
+  {
   ret = send(m_fd, (char *)buffer, size, 0);
+  } while (ret == -1 && errno == EINTR);
+#ifndef __VISAGECPP__
+  UNMASK_SIGNAL();
 #endif
 
   return ret;
@@ -1354,10 +1365,13 @@
 
 #ifndef __VISAGECPP__
   MASK_SIGNAL();
-  ret = sendto(m_fd, buffer, size, 0, addr, len);
-  UNMASK_SIGNAL();
-#else
+#endif
+  do 
+  {
   ret = sendto(m_fd, (char *)buffer, size, 0, addr, len);
+  } while (ret == -1 && errno == EINTR);
+#ifndef __VISAGECPP__
+  UNMASK_SIGNAL();
 #endif
 
   /* Frees memory allocated from _GAddress_translate_to */
@@ -1394,8 +1408,15 @@
     }
     else
     {
+      if ((errno == EWOULDBLOCK) || (errno == EAGAIN) || (errno == EINTR)) 
+      {
+        CALL_CALLBACK(this, GSOCK_INPUT);
+      }
+      else 
+      {
       CALL_CALLBACK(this, GSOCK_LOST);
       Shutdown();
+      } 
     }
   }
 }

 	  	 

Index: /src/common/intl.cpp
===================================================================
RCS file: /pack/cvsroots/wxwidgets/wxWidgets/src/common/intl.cpp,v
retrieving revision 1.153
diff -u -r1.153 /src/common/intl.cpp
--- /src/common/intl.cpp	2005/02/02 13:57:00	1.153
+++ /src/common/intl.cpp	2005/02/20 09:33:26
@@ -1028,10 +1028,10 @@
 static wxString GetFullSearchPath(const wxChar *lang)
 {
     wxString searchPath;
+    size_t n, count;
 
     // first take the entries explicitly added by the program
-    size_t count = s_searchPrefixes.Count();
-    for ( size_t n = 0; n < count; n++ )
+    for ( n = 0, count = s_searchPrefixes.Count(); n < count; n++ )
     {
         searchPath << GetAllMsgCatalogSubdirs(s_searchPrefixes[n], lang)
                    << wxPATH_SEP;
@@ -1058,17 +1058,27 @@
 
     // then take the current directory
     // FIXME it should be the directory of the executable
+    wxString current_directory;
+
 #if defined(__WXMAC__)
-    searchPath << GetAllMsgCatalogSubdirs(wxGetCwd(), lang);
+    current_directory = wxGetCwd();
     // generic search paths could be somewhere in the system folder preferences
 #elif defined(__WXMSW__)
     // look in the directory of the executable
-    wxString path;
-    wxSplitPath(wxGetFullModuleName(), &path, NULL, NULL);
-    searchPath << GetAllMsgCatalogSubdirs(path, lang);
+    wxSplitPath(wxGetFullModuleName(), &current_directory, NULL, NULL);
 #else // !Mac, !MSW
-    searchPath << GetAllMsgCatalogSubdirs(wxT("."), lang);
+    current_directory = wxT(".");
 #endif // platform
+
+    // then take the current directory + default prefix's
+    for ( n = 0, count = s_searchPrefixes.Count(); n < count; n++ )
+    {
+        searchPath << GetAllMsgCatalogSubdirs(current_directory + wxFILE_SEP_PATH + s_searchPrefixes[n], lang)
+                   << wxPATH_SEP;
+    }
+
+    // then take the current directory
+    searchPath << GetAllMsgCatalogSubdirs(current_directory, lang);
 
     return searchPath;
 }

 	  	 

--- minimal.cpp.orig	2009-08-29 00:08:47.000000000 +0400
+++ minimal.cpp	2009-10-06 23:13:43.000000000 +0400
@@ -16,10 +16,10 @@
 // ----------------------------------------------------------------------------
 // headers
 // ----------------------------------------------------------------------------
- 
+
 // For compilers that support precompilation, includes "wx/wx.h".
 #include "wx/wxprec.h"
- 
+
 #ifdef __BORLANDC__
     #pragma hdrstop
 #endif
@@ -37,7 +37,7 @@
 // the application icon (under Windows and OS/2 it is in resources and even
 // though we could still include the XPM here it would be unused)
 #if !defined(__WXMSW__) && !defined(__WXPM__)
-    #include "../sample.xpm"
+    #include "sample.xpm"
 #endif
 
 // ----------------------------------------------------------------------------
@@ -67,8 +67,10 @@
     // event handlers (these functions should _not_ be virtual)
     void OnQuit(wxCommandEvent& event);
     void OnAbout(wxCommandEvent& event);
+    void OnCheckGetStyle(wxCommandEvent& event);
 
 private:
+    wxTextCtrl *m_textCtrl;
     // any class wishing to process wxWidgets events must use this macro
     DECLARE_EVENT_TABLE()
 };
@@ -86,7 +88,10 @@
     // it is important for the id corresponding to the "About" command to have
     // this standard value as otherwise it won't be handled properly under Mac
     // (where it is special and put into the "Apple" menu)
-    Minimal_About = wxID_ABOUT
+    Minimal_About = wxID_ABOUT,
+
+    // id for custom handler
+    Minimal_CheckGetStyle = wxID_HIGHEST + 1
 };
 
 // ----------------------------------------------------------------------------
@@ -99,6 +104,7 @@
 BEGIN_EVENT_TABLE(MyFrame, wxFrame)
     EVT_MENU(Minimal_Quit,  MyFrame::OnQuit)
     EVT_MENU(Minimal_About, MyFrame::OnAbout)
+    EVT_MENU(Minimal_CheckGetStyle, MyFrame::OnCheckGetStyle)
 END_EVENT_TABLE()
 
 // Create a new application object: this macro will allow wxWidgets to create
@@ -156,6 +162,7 @@
     wxMenu *helpMenu = new wxMenu;
     helpMenu->Append(Minimal_About, "&About...\tF1", "Show about dialog");
 
+    fileMenu->Append(Minimal_CheckGetStyle, "&Check GetStyle", "Check wxTextCtrl::GetStyle");
     fileMenu->Append(Minimal_Quit, "E&xit\tAlt-X", "Quit this program");
 
     // now append the freshly created menu to the menu bar...
@@ -167,6 +174,25 @@
     SetMenuBar(menuBar);
 #endif // wxUSE_MENUS
 
+    m_textCtrl = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
+                                          wxTE_MULTILINE | wxTE_READONLY | wxTE_RICH | wxVSCROLL);
+    wxTextAttr textAttr;
+    wxFont font = wxSystemSettings::GetFont(wxSYS_SYSTEM_FONT);
+
+    // Add some strings using different colours for them
+    // (One will use italic style and bold weight)
+    textAttr.SetFont(font);
+    textAttr.SetTextColour(*wxRED);
+    m_textCtrl->SetDefaultStyle(textAttr);
+    m_textCtrl->AppendText("First line\n");
+
+    font.SetStyle(wxFONTSTYLE_ITALIC);
+    font.SetWeight(wxFONTWEIGHT_BOLD);
+    textAttr.SetFont(font);
+    textAttr.SetTextColour(*wxGREEN);
+    m_textCtrl->SetDefaultStyle(textAttr);
+    m_textCtrl->AppendText("Second line");
+
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
@@ -198,3 +224,45 @@
                  wxOK | wxICON_INFORMATION,
                  this);
 }
+
+void MyFrame::OnCheckGetStyle(wxCommandEvent& event)
+{
+    wxTextAttr textAttr;
+    int numberOfLines = m_textCtrl->GetNumberOfLines();
+    int position = 0;
+    bool getStyleStatus = true;
+
+    // Here we will store the fonts (one for each line)
+    wxFont fonts[numberOfLines];
+
+    for (int i = 0; i < numberOfLines; i++)
+    {
+        getStyleStatus = m_textCtrl->GetStyle(position, textAttr);
+
+        if (getStyleStatus)
+        {
+            wxLogMessage("Text on position %d in line number %d has text colour %s",
+                         position, i, wxTheColourDatabase->FindName( textAttr.GetTextColour() )
+                         );
+            fonts[i] = textAttr.GetFont();
+        }
+        else
+        {
+            wxLogMessage("GetStyle call failed");
+        }
+
+        // Note that GetLineLength doesn't take into account
+        // trailing newline characters
+        position += m_textCtrl->GetLineLength(i) + 1;
+    }
+
+    textAttr.SetTextColour(*wxBLACK);
+
+    textAttr.SetFont(fonts[0]);
+    m_textCtrl->SetDefaultStyle(textAttr);
+    m_textCtrl->AppendText("\nSame font as the first line has\n");
+
+    textAttr.SetFont(fonts[1]);
+    m_textCtrl->SetDefaultStyle(textAttr);
+    m_textCtrl->AppendText("Same font as the second line has\n");
+}

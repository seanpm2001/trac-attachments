Index: /home/johannes/workspace/wxWidgets/src/common/string.cpp
===================================================================
--- /home/johannes/workspace/wxWidgets/src/common/string.cpp	(revision 53135)
+++ /home/johannes/workspace/wxWidgets/src/common/string.cpp	(working copy)
@@ -35,7 +35,9 @@
 #include <string.h>
 #include <stdlib.h>
 
+
 #include "wx/hashmap.h"
+#include "wx/vector.h"
 
 // string handling functions used by wxString:
 #if wxUSE_UNICODE_UTF8
@@ -1240,32 +1242,71 @@
     size_t uiNewLen = strNew.length();
 
     size_t dwPos = 0;
-
-    while ( (*this)[dwPos] != wxT('\0') )
+    
+    //DO NOT USE STRSTR HERE
+    //this string can contain embedded null characters,
+    //so strstr will function incorrectly
+	
+	//If not all occurences should be replaced, just do a simple 
+	//replace from wxStringImpl and return 1.
+	if(!bReplaceAll)
+	{
+		dwPos = find(strOld, dwPos);
+		if(dwPos != npos) 
+		{
+			replace(dwPos, uiOldLen, strNew, uiNewLen);
+			uiCount = 1;
+		}
+	}
+	//If all occurences should be replaced allocate enough memory
+	//and then copy the string only once.
+    else
     {
-        //DO NOT USE STRSTR HERE
-        //this string can contain embedded null characters,
-        //so strstr will function incorrectly
-        dwPos = find(strOld, dwPos);
-        if ( dwPos == npos )
-            break;                  // exit the loop
-        else
-        {
-            //replace this occurance of the old string with the new one
-            replace(dwPos, uiOldLen, strNew, uiNewLen);
-
-            //move up pos past the string that was replaced
-            dwPos += uiNewLen;
-
-            //increase replace count
-            ++uiCount;
-
-            // stop now?
-            if ( !bReplaceAll )
-                break;                  // exit the loop
-        }
-    }
-
+    	//Difference between the old string and the replacement
+        int LenDiff = uiNewLen - uiOldLen;
+	    
+	    wxVector<size_t> replacePositions; // All positions of strOld
+	    
+	    dwPos = find(strOld, dwPos);
+	    while( dwPos != npos  )
+	    {
+	        //push the found position into the vector
+	        replacePositions.push_back(dwPos);
+	        
+	        //increase replace count
+		    ++uiCount;
+		    
+		    //move on searching strOld
+		    dwPos = find(strOld, dwPos + uiOldLen);
+	    }
+		
+		// if nothing is found stop
+		if(uiCount == 0) return 0;
+	
+		//allocate enough memory for the whole new string
+		wxString tmp;
+		tmp.Alloc(this->length() + uiCount*LenDiff);
+		
+		size_t rPos = 0;
+		for(dwPos = 0; dwPos<this->length();)
+		{
+			//Simply copy the old string on all not relevant positions
+			if(dwPos != replacePositions[rPos])
+			{
+			    tmp += (*this)[dwPos];
+			     ++dwPos;
+			}
+			//and insert strNew on the relevant positions
+			else
+			{
+				tmp += strNew;
+				dwPos += uiOldLen;
+				++rPos;
+			}
+		}
+		swap(tmp);
+	}
+		
     return uiCount;
 }
 

 	  	 

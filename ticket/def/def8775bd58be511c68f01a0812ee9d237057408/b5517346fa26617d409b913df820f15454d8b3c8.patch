Index: include/wx/effects.h
===================================================================
--- include/wx/effects.h	(revision 48841)
+++ include/wx/effects.h	(working copy)
@@ -59,7 +59,23 @@
     }
 
     // Draw a sunken edge
-    void DrawSunkenEdge(wxDC& dc, const wxRect& rect, int borderSize = 1);
+    void DrawSunkenEdge(wxDC& dc, const wxRect& rect, int borderSize = 2);
+    
+    // Draw a raised edge
+    void DrawRaisedEdge(wxDC& dc, const wxRect& rect, int borderSize = 2);
+    
+    // Draw an edge, used by DrawSunkenEdge/DrawRaisedEdge
+    void DrawEdge(wxDC& dc, const wxRect& rect, int borderSize = 2, bool raised = false);
+    
+    // Draw a sunken bevel
+    void DrawSunkenBevel(wxDC& dc, const wxRect& rect, int borderSize = 2);
+    
+    // Draw a raised bevel
+    void DrawRaisedBevel(wxDC& dc, const wxRect& rect, int borderSize = 2);
+    
+    // Draw a bevel
+    void DrawBevel(wxDC& dc, const wxRect& rect, int borderSize = 2, bool raised = false);
+    
 
     // Tile a bitmap
     bool TileBitmap(const wxRect& rect, wxDC& dc, const wxBitmap& bitmap);
Index: src/common/effects.cpp
===================================================================
--- src/common/effects.cpp	(revision 48841)
+++ src/common/effects.cpp	(working copy)
@@ -53,39 +53,193 @@
 }
 
 // Draw a sunken edge
-void wxEffects::DrawSunkenEdge(wxDC& dc, const wxRect& rect, int WXUNUSED(borderSize))
+void wxEffects::DrawSunkenEdge(wxDC& dc, const wxRect& rect, int borderSize)
 {
+    DrawEdge(dc, rect, borderSize, false);
+}
+
+// Draw a raised edge
+void wxEffects::DrawRaisedEdge(wxDC& dc, const wxRect& rect, int borderSize)
+{
+    DrawEdge(dc, rect, borderSize, true);
+}
+
+// Draw a raised or sunken edge inside the given rectangle
+void wxEffects::DrawEdge(wxDC& dc, const wxRect& rect, int borderSize, bool raised)
+{
     wxPen highlightPen(m_highlightColour, 1, wxSOLID);
     wxPen lightShadowPen(m_lightShadow, 1, wxSOLID);
-    wxPen facePen(m_faceColour, 1, wxSOLID);
+    // wxPen facePen(m_faceColour, 1, wxSOLID);
     wxPen mediumShadowPen(m_mediumShadow, 1, wxSOLID);
     wxPen darkShadowPen(m_darkShadow, 1, wxSOLID);
+    
+    // Where to swap at
+    int swapPos = borderSize / 2;
+    int pos;
+    
+    if(borderSize % 2 && raised == false)
+    {
+        swapPos++;
+    }
+    
+    // On Windows XP, using the Display applet to adjust the face color
+    // adjusts colors so that the light shadow color is the face color and the
+    // dark shadow color is the frame color.
+    // The above and the colors may need to be different on some platforms.
+    // This code has been adjusted so drawing a 1px border on a panel should work
+    // fine, but a 1px border directly on a frame would not.
+    
+    // A 2px or more border should work fine no matter on any platform
+    // (as long as the medium/dark shadow colors are different and the
+    // light shadow/highlight colors are different)
 
+
     //// LEFT AND TOP
     // Draw a medium shadow pen on left and top, followed by dark shadow line to
     // right and below of these lines
 
-    dc.SetPen(mediumShadowPen);
-    dc.DrawLine(rect.x, rect.y, rect.x+rect.width-1, rect.y); // Top
-    dc.DrawLine(rect.x, rect.y, rect.x, rect.y+rect.height-1); // Left
+    if(raised)
+      dc.SetPen(lightShadowPen);
+    else
+      dc.SetPen(mediumShadowPen);
+      
+    for(pos = 0; pos < borderSize; pos++)
+    {
+        // Update pen before
+        if(pos == swapPos)
+        {
+            if(raised)
+                dc.SetPen(highlightPen);
+            else
+                dc.SetPen(darkShadowPen);
+        }
+    
+        // Draw lines
+        dc.DrawLine(rect.x + pos, rect.y + pos,
+                    rect.x + rect.width - 1 - pos, rect.y + pos); // Top
+        
+        dc.DrawLine(rect.x + pos, rect.y + pos,
+                    rect.x + pos, rect.y + rect.height - 1 - pos); // Left
+    }
 
-    dc.SetPen(darkShadowPen);
-    dc.DrawLine(rect.x+1, rect.y+1, rect.x+rect.width-2, rect.y+1); // Top
-    dc.DrawLine(rect.x+1, rect.y+1, rect.x+1, rect.y+rect.height-1); // Left
+    //// RIGHT AND BOTTOM
 
+    if(raised)
+        dc.SetPen(darkShadowPen);
+    else
+        dc.SetPen(highlightPen);
+        
+    for(pos = 0; pos < borderSize; pos++)
+    {
+        // Update pen before
+        if(pos == swapPos)
+        {
+            if(raised)
+                dc.SetPen(mediumShadowPen);
+            else
+                dc.SetPen(lightShadowPen);
+        }
+
+        // Draw lines
+        dc.DrawLine(rect.x + rect.width - 1 - pos, rect.y + pos,
+                    rect.x + rect.width - 1 - pos, rect.y + rect.height - 1 - pos); // Right
+                    
+        dc.DrawLine(rect.x + pos, rect.y + rect.height - 1 - pos,
+                    rect.x + rect.width - pos, rect.y + rect.height - 1 - pos); // Bottom
+    }
+
+    dc.SetPen(wxNullPen);
+}
+
+// Draw a sunken bevel
+void wxEffects::DrawSunkenBevel(wxDC& dc, const wxRect& rect, int borderSize)
+{
+    DrawBevel(dc, rect, borderSize, false);
+}
+
+// Draw a raised bevel
+void wxEffects::DrawRaisedBevel(wxDC& dc, const wxRect& rect, int borderSize)
+{
+    DrawBevel(dc, rect, borderSize, true);
+}
+
+// Draw a raised or sunken bevel
+void wxEffects::DrawBevel(wxDC& dc, const wxRect& rect, int borderSize, bool raised)
+{
+    wxPen highlightPen(m_highlightColour, 1, wxSOLID);
+    wxPen mediumShadowPen(m_mediumShadow, 1, wxSOLID);
+    
+    // Where to swap at
+    int swapPos = borderSize / 2;
+    int pos;
+    
+    if(borderSize % 2 && raised == false)
+    {
+        swapPos++;
+    }
+    
+    // The border size for a bevel SHOULD be greater than 1
+    // else it will not be a bevel but may appear to be a raised or sunken edge
+    wxASSERT_MSG(borderSize > 1, wxT("The border size for a bevel should be greater than 1"));
+    
+    //// LEFT AND TOP
+    // Draw a medium shadow pen on left and top, followed by dark shadow line to
+    // right and below of these lines
+
+    if(raised)
+      dc.SetPen(highlightPen);
+    else
+      dc.SetPen(mediumShadowPen);
+      
+    for(pos = 0; pos < borderSize; pos++)
+    {
+        // Update pen before
+        if(pos == swapPos)
+        {
+            if(raised)
+                dc.SetPen(mediumShadowPen);
+            else
+                dc.SetPen(highlightPen);
+        }
+    
+        // Draw lines
+        dc.DrawLine(rect.x + pos, rect.y + pos,
+                    rect.x + rect.width - 1 - pos, rect.y + pos); // Top
+        
+        dc.DrawLine(rect.x + pos, rect.y + pos,
+                    rect.x + pos, rect.y + rect.height - 1 - pos); // Left
+    }
+
     //// RIGHT AND BOTTOM
 
-    dc.SetPen(highlightPen);
-    dc.DrawLine(rect.x+rect.width-1, rect.y, rect.x+rect.width-1, rect.y+rect.height-1); // Right
-    dc.DrawLine(rect.x, rect.y+rect.height-1, rect.x+rect.width, rect.y+rect.height-1); // Bottom
+    if(raised)
+        dc.SetPen(mediumShadowPen);
+    else
+        dc.SetPen(highlightPen);
+        
+    for(pos = 0; pos < borderSize; pos++)
+    {
+        // Update pen before
+        if(pos == swapPos)
+        {
+            if(raised)
+                dc.SetPen(highlightPen);
+            else
+                dc.SetPen(mediumShadowPen);
+        }
 
-    dc.SetPen(lightShadowPen);
-    dc.DrawLine(rect.x+rect.width-2, rect.y+1, rect.x+rect.width-2, rect.y+rect.height-2); // Right
-    dc.DrawLine(rect.x+1, rect.y+rect.height-2, rect.x+rect.width-1, rect.y+rect.height-2); // Bottom
+        // Draw lines
+        dc.DrawLine(rect.x + rect.width - 1 - pos, rect.y + pos,
+                    rect.x + rect.width - 1 - pos, rect.y + rect.height - 1 - pos); // Right
+                    
+        dc.DrawLine(rect.x + pos, rect.y + rect.height - 1 - pos,
+                    rect.x + rect.width - pos, rect.y + rect.height - 1 - pos); // Bottom
+    }
 
     dc.SetPen(wxNullPen);
 }
 
+// Tile a bitmap
 bool wxEffects::TileBitmap(const wxRect& rect, wxDC& dc, const wxBitmap& bitmap)
 {
     int w = bitmap.GetWidth();
@@ -108,7 +262,22 @@
     for (i = rect.x; i < rect.x + rect.width; i += w)
     {
         for (j = rect.y; j < rect.y + rect.height; j+= h)
-            dc.Blit(i, j, bitmap.GetWidth(), bitmap.GetHeight(), & dcMem, 0, 0);
+        {
+            // Clip the rectangle
+            int tw, th;
+            
+            if(bitmap.GetWidth() <= rect.x + rect.width - i)
+                tw = bitmap.GetWidth();
+            else
+                tw = rect.x + rect.width - i;
+              
+            if(bitmap.GetHeight() <= rect.y + rect.height - j)
+                th = bitmap.GetHeight();
+            else
+                th = rect.y + rect.height - j;
+            
+            dc.Blit(i, j, tw, th, & dcMem, 0, 0);
+        }
     }
     dcMem.SelectObject(wxNullBitmap);
 

 	  	 

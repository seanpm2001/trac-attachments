Index: include/wx/fs_mem.h
===================================================================
--- include/wx/fs_mem.h	(revision 53152)
+++ include/wx/fs_mem.h	(working copy)
@@ -99,11 +99,11 @@
 #if wxUSE_IMAGE
     static void AddFile(const wxString& filename,
                         const wxImage& image,
-                        long type);
+                        wxBitmapType type);
 
     static void AddFile(const wxString& filename,
                         const wxBitmap& bitmap,
-                        long type);
+                        wxBitmapType type);
 #endif // wxUSE_IMAGE
 
 };
Index: include/wx/iconbndl.h
===================================================================
--- include/wx/iconbndl.h	(revision 53152)
+++ include/wx/iconbndl.h	(working copy)
@@ -35,7 +35,7 @@
     wxIconBundle();
 
     // initializes the bundle with the icon(s) found in the file
-    wxIconBundle(const wxString& file, long type);
+    wxIconBundle(const wxString& file, wxBitmapType type);
 
     // initializes the bundle with a single icon
     wxIconBundle(const wxIcon& icon);
@@ -50,7 +50,7 @@
     // adds all the icons contained in the file to the collection,
     // if the collection already contains icons with the same
     // width and height, they are replaced
-    void AddIcon(const wxString& file, long type);
+    void AddIcon(const wxString& file, wxBitmapType type);
 
     // adds the icon to the collection, if the collection already
     // contains an icon with the same width and height, it is
Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 53152)
+++ include/wx/image.h	(working copy)
@@ -90,7 +90,7 @@
 {
 public:
     wxImageHandler()
-        : m_name(wxEmptyString), m_extension(wxEmptyString), m_mime(), m_type(0)
+        : m_name(wxEmptyString), m_extension(wxEmptyString), m_mime(), m_type(wxBITMAP_TYPE_INVALID)
         { }
 
 #if wxUSE_STREAMS
@@ -105,11 +105,11 @@
 
     void SetName(const wxString& name) { m_name = name; }
     void SetExtension(const wxString& ext) { m_extension = ext; }
-    void SetType(long type) { m_type = type; }
+    void SetType(wxBitmapType type) { m_type = type; }
     void SetMimeType(const wxString& type) { m_mime = type; }
     const wxString& GetName() const { return m_name; }
     const wxString& GetExtension() const { return m_extension; }
-    long GetType() const { return m_type; }
+    wxBitmapType GetType() const { return m_type; }
     const wxString& GetMimeType() const { return m_mime; }
 
 protected:
@@ -130,7 +130,7 @@
     wxString  m_name;
     wxString  m_extension;
     wxString  m_mime;
-    long      m_type;
+    wxBitmapType m_type;
 
 private:
     DECLARE_CLASS(wxImageHandler)
@@ -208,16 +208,16 @@
         double value;
     };
 
-    wxImage(){}
+    wxImage() {}
     wxImage( int width, int height, bool clear = true );
     wxImage( int width, int height, unsigned char* data, bool static_data = false );
     wxImage( int width, int height, unsigned char* data, unsigned char* alpha, bool static_data = false );
-    wxImage( const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1 );
+    wxImage( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
     wxImage( const wxString& name, const wxString& mimetype, int index = -1 );
     wxImage( const char* const* xpmData );
 
 #if wxUSE_STREAMS
-    wxImage( wxInputStream& stream, long type = wxBITMAP_TYPE_ANY, int index = -1 );
+    wxImage( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
     wxImage( wxInputStream& stream, const wxString& mimetype, int index = -1 );
 #endif // wxUSE_STREAMS
 
@@ -327,23 +327,23 @@
     bool ConvertColourToAlpha( unsigned char r, unsigned char g, unsigned char b );
 
     static bool CanRead( const wxString& name );
-    static int GetImageCount( const wxString& name, long type = wxBITMAP_TYPE_ANY );
-    virtual bool LoadFile( const wxString& name, long type = wxBITMAP_TYPE_ANY, int index = -1 );
+    static int GetImageCount( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY );
+    virtual bool LoadFile( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
     virtual bool LoadFile( const wxString& name, const wxString& mimetype, int index = -1 );
 
 #if wxUSE_STREAMS
     static bool CanRead( wxInputStream& stream );
-    static int GetImageCount( wxInputStream& stream, long type = wxBITMAP_TYPE_ANY );
-    virtual bool LoadFile( wxInputStream& stream, long type = wxBITMAP_TYPE_ANY, int index = -1 );
+    static int GetImageCount( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY );
+    virtual bool LoadFile( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 );
     virtual bool LoadFile( wxInputStream& stream, const wxString& mimetype, int index = -1 );
 #endif
 
     virtual bool SaveFile( const wxString& name ) const;
-    virtual bool SaveFile( const wxString& name, int type ) const;
+    virtual bool SaveFile( const wxString& name, wxBitmapType type ) const;
     virtual bool SaveFile( const wxString& name, const wxString& mimetype ) const;
 
 #if wxUSE_STREAMS
-    virtual bool SaveFile( wxOutputStream& stream, int type ) const;
+    virtual bool SaveFile( wxOutputStream& stream, wxBitmapType type ) const;
     virtual bool SaveFile( wxOutputStream& stream, const wxString& mimetype ) const;
 #endif
 
@@ -351,6 +351,9 @@
     bool IsOk() const;
     int GetWidth() const;
     int GetHeight() const;
+    
+    // the type of file found by LoadFile or specified with SaveFile
+    wxBitmapType LastType() const;
 
     // these functions provide fastest access to wxImage data but should be
     // used carefully as no checks are done
@@ -412,8 +415,8 @@
     static void InsertHandler( wxImageHandler *handler );
     static bool RemoveHandler( const wxString& name );
     static wxImageHandler *FindHandler( const wxString& name );
-    static wxImageHandler *FindHandler( const wxString& extension, long imageType );
-    static wxImageHandler *FindHandler( long imageType );
+    static wxImageHandler *FindHandler( const wxString& extension, wxBitmapType imageType );
+    static wxImageHandler *FindHandler( wxBitmapType imageType );
     static wxImageHandler *FindHandlerMime( const wxString& mimetype );
 
     static wxString GetImageExtWildcard();
@@ -426,7 +429,7 @@
 
 
 protected:
-    static wxList   sm_handlers;
+    static wxList     sm_handlers;
 
     // return the index of the point with the given coordinates or -1 if the
     // image is invalid of the coordinates are out of range
Index: src/common/fs_mem.cpp
===================================================================
--- src/common/fs_mem.cpp	(revision 53152)
+++ src/common/fs_mem.cpp	(working copy)
@@ -233,12 +233,12 @@
 /*static*/ void
 wxMemoryFSHandler::AddFile(const wxString& filename,
                            const wxImage& image,
-                           long type)
+                           wxBitmapType type)
 {
     if (!CheckHash(filename)) return;
 
     wxMemoryOutputStream mems;
-    if (image.Ok() && image.SaveFile(mems, (int)type))
+    if (image.Ok() && image.SaveFile(mems, type))
     {
         m_Hash->Put
                 (
@@ -262,7 +262,7 @@
 /*static*/ void
 wxMemoryFSHandler::AddFile(const wxString& filename,
                            const wxBitmap& bitmap,
-                           long type)
+                           wxBitmapType type)
 {
 #if !defined(__WXMSW__) || wxUSE_WXDIB
     wxImage img = bitmap.ConvertToImage();
Index: src/common/iconbndl.cpp
===================================================================
--- src/common/iconbndl.cpp	(revision 53152)
+++ src/common/iconbndl.cpp	(working copy)
@@ -68,7 +68,7 @@
 {
 }
 
-wxIconBundle::wxIconBundle(const wxString& file, long type)
+wxIconBundle::wxIconBundle(const wxString& file, wxBitmapType type)
             : wxGDIObject()
 {
     AddIcon(file, type);
@@ -101,7 +101,7 @@
     UnRef();
 }
 
-void wxIconBundle::AddIcon(const wxString& file, long type)
+void wxIconBundle::AddIcon(const wxString& file, wxBitmapType type)
 {
 #ifdef __WXMAC__
     // Deal with standard icons
Index: src/common/image.cpp
===================================================================
--- src/common/image.cpp	(revision 53152)
+++ src/common/image.cpp	(working copy)
@@ -80,6 +80,9 @@
     // same as m_static but for m_alpha
     bool            m_staticAlpha;
 
+    // the type of file found by LoadFile or specified with SaveFile
+    wxBitmapType m_type;
+
 #if wxUSE_PALETTE
     wxPalette       m_palette;
 #endif // wxUSE_PALETTE
@@ -105,6 +108,8 @@
     m_ok = false;
     m_static =
     m_staticAlpha = false;
+
+    m_type = wxBITMAP_TYPE_INVALID;
 }
 
 wxImageRefData::~wxImageRefData()
@@ -140,7 +145,7 @@
     Create( width, height, data, alpha, static_data );
 }
 
-wxImage::wxImage( const wxString& name, long type, int index )
+wxImage::wxImage( const wxString& name, wxBitmapType type, int index )
 {
     LoadFile( name, type, index );
 }
@@ -151,7 +156,7 @@
 }
 
 #if wxUSE_STREAMS
-wxImage::wxImage( wxInputStream& stream, long type, int index )
+wxImage::wxImage( wxInputStream& stream, wxBitmapType type, int index )
 {
     LoadFile( stream, type, index );
 }
@@ -164,7 +169,7 @@
 
 wxImage::wxImage(const char* const* xpmData)
 {
-    Create(xpmData);
+    if (Create(xpmData)) M_IMGDATA->m_type = wxBITMAP_TYPE_XPM;
 }
 
 bool wxImage::Create(const char* const* xpmData)
@@ -174,7 +179,7 @@
 
     wxXPMDecoder decoder;
     (*this) = decoder.ReadData(xpmData);
-    return Ok();
+    return IsOk();
 #else
     return false;
 #endif
@@ -207,7 +212,7 @@
 {
     UnRef();
 
-    wxCHECK_MSG( data, false, _T("NULL data in wxImage::Create") );
+    wxCHECK_MSG( data, false, wxT("NULL data in wxImage::Create") );
 
     m_refData = new wxImageRefData();
 
@@ -224,7 +229,7 @@
 {
     UnRef();
 
-    wxCHECK_MSG( data, false, _T("NULL data in wxImage::Create") );
+    wxCHECK_MSG( data, false, wxT("NULL data in wxImage::Create") );
 
     m_refData = new wxImageRefData();
 
@@ -282,7 +287,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     image.m_refData = CloneRefData(m_refData);
 
@@ -296,7 +301,7 @@
 
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     // can't scale to/from 0 size
     wxCHECK_MSG( (xFactor > 0) && (yFactor > 0), image,
@@ -414,7 +419,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     // can't scale to/from 0 size
     wxCHECK_MSG( (width > 0) && (height > 0), image,
@@ -984,7 +989,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     image.Create( M_IMGDATA->m_height, M_IMGDATA->m_width, false );
 
@@ -1049,7 +1054,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     image.Create( M_IMGDATA->m_width, M_IMGDATA->m_height, false );
 
@@ -1140,7 +1145,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     wxCHECK_MSG( (rect.GetLeft()>=0) && (rect.GetTop()>=0) &&
                  (rect.GetRight()<=GetWidth()) && (rect.GetBottom()<=GetHeight()),
@@ -1193,7 +1198,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
     wxCHECK_MSG( (size.GetWidth() > 0) && (size.GetHeight() > 0), image, wxT("invalid size") );
 
     int width = GetWidth(), height = GetHeight();
@@ -1232,8 +1237,8 @@
 
 void wxImage::Paste( const wxImage &image, int x, int y )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
-    wxCHECK_RET( image.Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
+    wxCHECK_RET( image.IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1336,7 +1341,7 @@
 void wxImage::Replace( unsigned char r1, unsigned char g1, unsigned char b1,
                        unsigned char r2, unsigned char g2, unsigned char b2 )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1362,7 +1367,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     image.Create(M_IMGDATA->m_width, M_IMGDATA->m_height, false);
 
@@ -1412,7 +1417,7 @@
 {
     wxImage image;
 
-    wxCHECK_MSG( Ok(), image, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), image, wxT("invalid image") );
 
     image.Create( M_IMGDATA->m_width, M_IMGDATA->m_height, false );
 
@@ -1447,21 +1452,21 @@
 
 int wxImage::GetWidth() const
 {
-    wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), 0, wxT("invalid image") );
 
     return M_IMGDATA->m_width;
 }
 
 int wxImage::GetHeight() const
 {
-    wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), 0, wxT("invalid image") );
 
     return M_IMGDATA->m_height;
 }
 
 long wxImage::XYToIndex(int x, int y) const
 {
-    if ( Ok() &&
+    if ( IsOk() &&
             x >= 0 && y >= 0 &&
                 x < M_IMGDATA->m_width && y < M_IMGDATA->m_height )
     {
@@ -1471,6 +1476,13 @@
     return -1;
 }
 
+wxBitmapType wxImage::LastType() const
+{
+    wxCHECK_MSG( IsOk(), wxBITMAP_TYPE_INVALID, wxT("invalid image") );
+
+    return M_IMGDATA->m_type;
+}
+
 void wxImage::SetRGB( int x, int y, unsigned char r, unsigned char g, unsigned char b )
 {
     long pos = XYToIndex(x, y);
@@ -1487,7 +1499,7 @@
 
 void wxImage::SetRGB( const wxRect& rect_, unsigned char r, unsigned char g, unsigned char b )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1563,14 +1575,14 @@
 
 unsigned char *wxImage::GetData() const
 {
-    wxCHECK_MSG( Ok(), (unsigned char *)NULL, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), (unsigned char *)NULL, wxT("invalid image") );
 
     return M_IMGDATA->m_data;
 }
 
 void wxImage::SetData( unsigned char *data, bool static_data  )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     wxImageRefData *newRefData = new wxImageRefData();
 
@@ -1671,7 +1683,7 @@
 
 void wxImage::SetAlpha( unsigned char *alpha, bool static_data )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1689,7 +1701,7 @@
 
 unsigned char *wxImage::GetAlpha() const
 {
-    wxCHECK_MSG( Ok(), (unsigned char *)NULL, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), (unsigned char *)NULL, wxT("invalid image") );
 
     return M_IMGDATA->m_alpha;
 }
@@ -1736,7 +1748,7 @@
 
 void wxImage::SetMaskColour( unsigned char r, unsigned char g, unsigned char b )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1748,7 +1760,7 @@
 
 bool wxImage::GetOrFindMaskColour( unsigned char *r, unsigned char *g, unsigned char *b ) const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     if (M_IMGDATA->m_hasMask)
     {
@@ -1766,28 +1778,28 @@
 
 unsigned char wxImage::GetMaskRed() const
 {
-    wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), 0, wxT("invalid image") );
 
     return M_IMGDATA->m_maskRed;
 }
 
 unsigned char wxImage::GetMaskGreen() const
 {
-    wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), 0, wxT("invalid image") );
 
     return M_IMGDATA->m_maskGreen;
 }
 
 unsigned char wxImage::GetMaskBlue() const
 {
-    wxCHECK_MSG( Ok(), 0, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), 0, wxT("invalid image") );
 
     return M_IMGDATA->m_maskBlue;
 }
 
 void wxImage::SetMask( bool mask )
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1796,7 +1808,7 @@
 
 bool wxImage::HasMask() const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     return M_IMGDATA->m_hasMask;
 }
@@ -1932,22 +1944,22 @@
 
 bool wxImage::HasPalette() const
 {
-    if (!Ok())
+    if (!IsOk())
         return false;
 
-    return M_IMGDATA->m_palette.Ok();
+    return M_IMGDATA->m_palette.IsOk();
 }
 
 const wxPalette& wxImage::GetPalette() const
 {
-    wxCHECK_MSG( Ok(), wxNullPalette, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), wxNullPalette, wxT("invalid image") );
 
     return M_IMGDATA->m_palette;
 }
 
 void wxImage::SetPalette(const wxPalette& palette)
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1962,7 +1974,7 @@
 
 void wxImage::SetOption(const wxString& name, const wxString& value)
 {
-    wxCHECK_RET( Ok(), wxT("invalid image") );
+    wxCHECK_RET( IsOk(), wxT("invalid image") );
 
     AllocExclusive();
 
@@ -1988,7 +2000,7 @@
 
 wxString wxImage::GetOption(const wxString& name) const
 {
-    wxCHECK_MSG( Ok(), wxEmptyString, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), wxEmptyString, wxT("invalid image") );
 
     int idx = M_IMGDATA->m_optionNames.Index(name, false);
     if (idx == wxNOT_FOUND)
@@ -2004,7 +2016,7 @@
 
 bool wxImage::HasOption(const wxString& name) const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     return (M_IMGDATA->m_optionNames.Index(name, false) != wxNOT_FOUND);
 }
@@ -2014,7 +2026,7 @@
 // ----------------------------------------------------------------------------
 
 bool wxImage::LoadFile( const wxString& WXUNUSED_UNLESS_STREAMS(filename),
-                        long WXUNUSED_UNLESS_STREAMS(type),
+                        wxBitmapType WXUNUSED_UNLESS_STREAMS(type),
                         int WXUNUSED_UNLESS_STREAMS(index) )
 {
 #if HAS_FILE_STREAMS
@@ -2061,25 +2073,23 @@
 
 bool wxImage::SaveFile( const wxString& filename ) const
 {
+    bool ok = false;
     wxString ext = filename.AfterLast('.').Lower();
 
-    wxImageHandler * pHandler = FindHandler(ext, -1);
+    wxImageHandler * pHandler = FindHandler(ext, wxBITMAP_TYPE_ANY);
     if (pHandler)
     {
-        SaveFile(filename, pHandler->GetType());
-        return true;
+        ok = SaveFile(filename, pHandler->GetType());
     }
-
-    wxLogError(_("Can't save image to file '%s': unknown extension."), filename.c_str());
-
-    return false;
+    if (!ok) wxLogError(_("Can't save image to file '%s': unknown extension."), filename.c_str());
+    return ok;
 }
 
 bool wxImage::SaveFile( const wxString& WXUNUSED_UNLESS_STREAMS(filename),
-                        int WXUNUSED_UNLESS_STREAMS(type) ) const
+                        wxBitmapType WXUNUSED_UNLESS_STREAMS(type) ) const
 {
 #if HAS_FILE_STREAMS
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     ((wxImage*)this)->SetOption(wxIMAGE_OPTION_FILENAME, filename);
 
@@ -2099,7 +2109,7 @@
                         const wxString& WXUNUSED_UNLESS_STREAMS(mimetype) ) const
 {
 #if HAS_FILE_STREAMS
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     ((wxImage*)this)->SetOption(wxIMAGE_OPTION_FILENAME, filename);
 
@@ -2126,11 +2136,11 @@
 }
 
 int wxImage::GetImageCount( const wxString& WXUNUSED_UNLESS_STREAMS(name),
-                            long WXUNUSED_UNLESS_STREAMS(type) )
+                            wxBitmapType WXUNUSED_UNLESS_STREAMS(type) )
 {
 #if HAS_FILE_STREAMS
     wxImageFileInputStream stream(name);
-    if (stream.Ok())
+    if (stream.IsOk())
         return GetImageCount(stream, type);
 #endif
 
@@ -2153,7 +2163,7 @@
     return false;
 }
 
-int wxImage::GetImageCount( wxInputStream &stream, long type )
+int wxImage::GetImageCount( wxInputStream &stream, wxBitmapType type )
 {
     wxImageHandler *handler;
 
@@ -2198,7 +2208,7 @@
     }
 }
 
-bool wxImage::LoadFile( wxInputStream& stream, long type, int index )
+bool wxImage::LoadFile( wxInputStream& stream, wxBitmapType type, int index )
 {
     UnRef();
 
@@ -2206,8 +2216,10 @@
 
     wxImageHandler *handler;
 
+    bool ok;
     if ( type == wxBITMAP_TYPE_ANY )
     {
+        ok = false;
         const wxList& list = GetHandlers();
         for ( wxList::compatibility_iterator node = list.GetFirst();
               node;
@@ -2217,32 +2229,35 @@
              if ( handler->CanRead(stream) &&
                     handler->LoadFile(this, stream, true/*verbose*/, index) )
              {
-                 return true;
+                 M_IMGDATA->m_type = handler->GetType();
+                 ok = true;
+                 break;
              }
 
         }
-
-        wxLogWarning( _("No handler found for image type.") );
-
-        return false;
+        if (!ok) wxLogWarning( _("No handler found for image type.") );
     }
-
-    handler = FindHandler(type);
-
-    if (handler == 0)
+    else
     {
-        wxLogWarning( _("No image handler for type %ld defined."), type );
+        handler = FindHandler(type);
 
-        return false;
+        if (handler == 0)
+        {
+            wxLogWarning( _("No image handler for type %ld defined."), type );
+            ok = false;
+        }
+        else if (stream.IsSeekable() && !handler->CanRead(stream))
+        {
+            wxLogError(_("Image file is not of type %ld."), type);
+            ok = false;
+        }
+        else
+        {
+            ok = handler->LoadFile(this, stream, true/*verbose*/, index);
+            if (ok) M_IMGDATA->m_type = handler->GetType();
+        }
     }
-
-    if (stream.IsSeekable() && !handler->CanRead(stream))
-    {
-        wxLogError(_("Image file is not of type %ld."), type);
-        return false;
-    }
-    else
-        return handler->LoadFile(this, stream, true/*verbose*/, index);
+    return ok;
 }
 
 bool wxImage::LoadFile( wxInputStream& stream, const wxString& mimetype, int index )
@@ -2253,50 +2268,62 @@
 
     wxImageHandler *handler = FindHandlerMime(mimetype);
 
+    bool ok;
     if (handler == 0)
     {
         wxLogWarning( _("No image handler for type %s defined."), mimetype.GetData() );
-
-        return false;
+        ok = false;
     }
-
-    if (stream.IsSeekable() && !handler->CanRead(stream))
+    else
     {
-        wxLogError(_("Image file is not of type %s."), mimetype);
-        return false;
+        if (stream.IsSeekable() && !handler->CanRead(stream))
+        {
+            wxLogError(_("Image file is not of type %s."), mimetype);
+            ok = false;
+        }
+        else
+        {
+            ok = handler->LoadFile( this, stream, true/*verbose*/, index );
+            if (ok) M_IMGDATA->m_type = handler->GetType();
+        }
     }
-    else
-        return handler->LoadFile( this, stream, true/*verbose*/, index );
+    return ok;
 }
 
-bool wxImage::SaveFile( wxOutputStream& stream, int type ) const
+bool wxImage::SaveFile( wxOutputStream& stream, wxBitmapType type ) const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     wxImageHandler *handler = FindHandler(type);
-    if ( !handler )
+    bool ok = (handler != NULL);
+    if (ok)
     {
+        ok = handler->SaveFile( (wxImage*)this, stream );
+        if (ok) M_IMGDATA->m_type = handler->GetType();
+    }
+    else
+    {
         wxLogWarning( _("No image handler for type %d defined."), type );
-
-        return false;
     }
-
-    return handler->SaveFile( (wxImage*)this, stream );
+    return ok;
 }
 
 bool wxImage::SaveFile( wxOutputStream& stream, const wxString& mimetype ) const
 {
-    wxCHECK_MSG( Ok(), false, wxT("invalid image") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid image") );
 
     wxImageHandler *handler = FindHandlerMime(mimetype);
-    if ( !handler )
+    bool ok = (handler != NULL);
+    if (ok)
     {
+        ok = handler->SaveFile( (wxImage*)this, stream );
+        if (ok) M_IMGDATA->m_type = handler->GetType();
+    }
+    else
+    {
         wxLogWarning( _("No image handler for type %s defined."), mimetype.GetData() );
-
-        return false;
     }
-
-    return handler->SaveFile( (wxImage*)this, stream );
+    return ok;
 }
 #endif // wxUSE_STREAMS
 
@@ -2319,7 +2346,7 @@
         // may) we should probably refcount the duplicates.
         //   also an issue in InsertHandler below.
 
-        wxLogDebug( _T("Adding duplicate image handler for '%s'"),
+        wxLogDebug( wxT("Adding duplicate image handler for '%s'"),
                     handler->GetName().c_str() );
         delete handler;
     }
@@ -2335,7 +2362,7 @@
     else
     {
         // see AddHandler for additional comments.
-        wxLogDebug( _T("Inserting duplicate image handler for '%s'"),
+        wxLogDebug( wxT("Inserting duplicate image handler for '%s'"),
                     handler->GetName().c_str() );
         delete handler;
     }
@@ -2367,21 +2394,23 @@
     return NULL;
 }
 
-wxImageHandler *wxImage::FindHandler( const wxString& extension, long bitmapType )
+wxImageHandler *wxImage::FindHandler( const wxString& extension, wxBitmapType bitmapType )
 {
     wxList::compatibility_iterator node = sm_handlers.GetFirst();
     while (node)
     {
         wxImageHandler *handler = (wxImageHandler*)node->GetData();
         if ( (handler->GetExtension().Cmp(extension) == 0) &&
-            (bitmapType == -1 || handler->GetType() == bitmapType) )
+             ( (bitmapType == wxBITMAP_TYPE_ANY) || (handler->GetType() == bitmapType)) )
+        {
             return handler;
+        }
         node = node->GetNext();
     }
     return NULL;
 }
 
-wxImageHandler *wxImage::FindHandler( long bitmapType )
+wxImageHandler *wxImage::FindHandler(wxBitmapType bitmapType )
 {
     wxList::compatibility_iterator node = sm_handlers.GetFirst();
     while (node)
@@ -2665,7 +2694,7 @@
     // restore the old position to be able to test other formats and so on
     if ( stream.SeekI(posOld) == wxInvalidOffset )
     {
-        wxLogDebug(_T("Failed to rewind the stream in wxImageHandler!"));
+        wxLogDebug(wxT("Failed to rewind the stream in wxImageHandler!"));
 
         // reading would fail anyhow as we're not at the right position
         return false;
@@ -2680,7 +2709,7 @@
 wxImageResolution
 wxImageHandler::GetResolutionFromOptions(const wxImage& image, int *x, int *y)
 {
-    wxCHECK_MSG( x && y, wxIMAGE_RESOLUTION_NONE, _T("NULL pointer") );
+    wxCHECK_MSG( x && y, wxIMAGE_RESOLUTION_NONE, wxT("NULL pointer") );
 
     if ( image.HasOption(wxIMAGE_OPTION_RESOLUTIONX) &&
          image.HasOption(wxIMAGE_OPTION_RESOLUTIONY) )

 	  	 

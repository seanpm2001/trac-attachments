Index: include/wx/univ/anybutton.h
===================================================================
--- include/wx/univ/anybutton.h	(版本 76178)
+++ include/wx/univ/anybutton.h	(工作副本)
@@ -10,6 +10,7 @@
 #ifndef _WX_UNIV_ANYBUTTON_H_
 #define _WX_UNIV_ANYBUTTON_H_
 
+#include "wx/univ/inphand.h" 
 // ----------------------------------------------------------------------------
 // Common button functionality
 // ----------------------------------------------------------------------------
@@ -20,6 +21,10 @@
     wxAnyButton() {}
 
     virtual ~wxAnyButton() {}
+    virtual bool PerformAction(const wxControlAction& WXUNUSED(action), 
+                             long WXUNUSED(numArg), 
+                             const wxString& WXUNUSED(strArg)) 
+    { return false; } 
 
 protected:
     // choose the default border for this window
@@ -29,4 +34,15 @@
     wxDECLARE_NO_COPY_CLASS(wxAnyButton);
 };
 
+// ---------------------------------------------------------------------------- 
+// wxStdAnyButtonInputHandler: The base input handler of button 
+// ---------------------------------------------------------------------------- 
+class WXDLLIMPEXP_CORE wxStdAnyButtonInputHandler : public wxStdInputHandler 
+{ 
+public: 
+    wxStdAnyButtonInputHandler(wxInputHandler *handler): wxStdInputHandler(handler) {}
+    virtual bool HandleFocus(wxInputConsumer *WXUNUSED(consumer), 
+                             const wxFocusEvent& WXUNUSED(event)){ return  false; }
+}; 
+
 #endif // _WX_UNIV_ANYBUTTON_H_
Index: include/wx/univ/button.h
===================================================================
--- include/wx/univ/button.h	(版本 76178)
+++ include/wx/univ/button.h	(工作副本)
@@ -11,8 +11,6 @@
 #ifndef _WX_UNIV_BUTTON_H_
 #define _WX_UNIV_BUTTON_H_
 
-class WXDLLIMPEXP_FWD_CORE wxInputHandler;
-
 #include "wx/bitmap.h"
 
 // ----------------------------------------------------------------------------
@@ -135,5 +133,27 @@
     DECLARE_DYNAMIC_CLASS(wxButton)
 };
 
+class WXDLLIMPEXP_CORE wxStdButtonInputHandler : public wxStdAnyButtonInputHandler 
+{ 
+public: 
+    wxStdButtonInputHandler(wxInputHandler *inphand); 
+ 
+    virtual bool HandleKey(wxInputConsumer *consumer, 
+                           const wxKeyEvent& event, 
+                           bool pressed); 
+    virtual bool HandleMouse(wxInputConsumer *consumer, 
+                             const wxMouseEvent& event); 
+    virtual bool HandleMouseMove(wxInputConsumer *consumer, 
+                                 const wxMouseEvent& event); 
+    virtual bool HandleFocus(wxInputConsumer * consumer,
+                             const wxFocusEvent& event);
+    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated); 
+	 
+private: 
+	    // the window ( button) which has capture or NULL and the flag telling if 
+	    // the mouse is inside the togglebutton which captured it or not 
+	    wxWindow *m_winCapture; 
+	    bool      m_winHasMouse; 
+}; 
 #endif // _WX_UNIV_BUTTON_H_
 
Index: include/wx/univ/tglbtn.h
===================================================================
--- include/wx/univ/tglbtn.h	(版本 76178)
+++ include/wx/univ/tglbtn.h	(工作副本)
@@ -11,36 +11,57 @@
 #ifndef _WX_UNIV_TGLBTN_H_
 #define _WX_UNIV_TGLBTN_H_
 
-#include "wx/button.h"
+// ----------------------------------------------------------------------------
+// the actions supported by this control 
+// ----------------------------------------------------------------------------
+#define wxACTION_BUTTON_TOGGLE  wxT("toggle")    // press/release the button 
+#define wxACTION_BUTTON_CLICK   wxT("click")     // generate button click event 
+	 
+class WXDLLIMPEXP_CORE wxStdToggleButtonInputHandler : public wxStdAnyButtonInputHandler 
+{
+public:
+    wxStdToggleButtonInputHandler(wxInputHandler *inphand);
+    virtual bool HandleKey(wxInputConsumer *consumer, 
+	                           const wxKeyEvent& event, 
+	                           bool pressed); 
+    virtual bool HandleMouse(wxInputConsumer *consumer, 
+                               const wxMouseEvent& event); 
+    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated); 
 
+private: 
+    // the window (togglebutton) which has capture or NULL and the flag telling if 
+    // the mouse is inside the togglebutton which captured it or not 
+    wxWindow *m_winCapture; 
+    bool      m_winHasMouse; 
+}; 
+
 // ----------------------------------------------------------------------------
-// wxToggleButton: a push button
+// wxToggleButton
 // ----------------------------------------------------------------------------
-
-class WXDLLIMPEXP_CORE wxToggleButton: public wxButton
+class WXDLLIMPEXP_CORE wxToggleButton: public wxToggleButtonBase 
 {
 public:
+    // construction/destruction
     wxToggleButton();
 
     wxToggleButton(wxWindow *parent,
              wxWindowID id,
-             const wxBitmap& bitmap,
              const wxString& label = wxEmptyString,
              const wxPoint& pos = wxDefaultPosition,
              const wxSize& size = wxDefaultSize,
              long style = 0,
              const wxValidator& validator = wxDefaultValidator,
              const wxString& name = wxCheckBoxNameStr);
+    // Create the control 
+    bool Create(wxWindow *parent, 
+                wxWindowID id, 
+                const wxString& label, 
+                const wxPoint& pos = wxDefaultPosition, 
+                const wxSize& size = wxDefaultSize,  
+                long style = 0, 
+                const wxValidator& validator = wxDefaultValidator, 
+                const wxString& name = wxCheckBoxNameStr); 
 
-    wxToggleButton(wxWindow *parent,
-             wxWindowID id,
-             const wxString& label = wxEmptyString,
-             const wxPoint& pos = wxDefaultPosition,
-             const wxSize& size = wxDefaultSize,
-             long style = 0,
-             const wxValidator& validator = wxDefaultValidator,
-             const wxString& name = wxCheckBoxNameStr);
-
     virtual ~wxToggleButton();
 
     virtual bool IsPressed() const { return m_isPressed || m_value; }
@@ -53,11 +74,28 @@
     void SetValue(bool state);
     bool GetValue() const { return m_value; }
 
+    virtual bool PerformAction(const wxControlAction& action, 
+                               long numArg = -1, 
+                               const wxString& strArg = wxEmptyString); 
+    static wxInputHandler *GetStdInputHandler(wxInputHandler *handlerDef); 
+    virtual wxInputHandler *DoGetStdInputHandler(wxInputHandler *handlerDef) 
+    { 
+        return GetStdInputHandler(handlerDef); 
+    } 
 protected:
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }
+    virtual bool DoDrawBackground(wxDC& dc); 
+    virtual void DoDraw(wxControlRenderer *renderer); 
+    virtual wxSize DoGetBestSize() const; 
+    static wxSize GetDefaultSize();
 
+    // the label 
+    wxBitmap m_bitmap; 
+    wxCoord  m_marginBmpX, 
+             m_marginBmpY; 
     // the current value
     bool m_value;
+    bool m_isPressed; 
 
 private:
     // common part of all ctors
Index: src/univ/button.cpp
===================================================================
--- src/univ/button.cpp	(版本 76178)
+++ src/univ/button.cpp	(工作副本)
@@ -39,34 +39,6 @@
 #include "wx/stockitem.h"
 
 // ----------------------------------------------------------------------------
-// wxStdButtonInputHandler: translates SPACE and ENTER keys and the left mouse
-// click into button press/release actions
-// ----------------------------------------------------------------------------
-
-class WXDLLEXPORT wxStdButtonInputHandler : public wxStdInputHandler
-{
-public:
-    wxStdButtonInputHandler(wxInputHandler *inphand);
-
-    virtual bool HandleKey(wxInputConsumer *consumer,
-                           const wxKeyEvent& event,
-                           bool pressed);
-    virtual bool HandleMouse(wxInputConsumer *consumer,
-                             const wxMouseEvent& event);
-    virtual bool HandleMouseMove(wxInputConsumer *consumer,
-                                 const wxMouseEvent& event);
-    virtual bool HandleFocus(wxInputConsumer *consumer,
-                             const wxFocusEvent& event);
-    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
-
-private:
-    // the window (button) which has capture or NULL and the flag telling if
-    // the mouse is inside the button which captured it or not
-    wxWindow *m_winCapture;
-    bool      m_winHasMouse;
-};
-
-// ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
@@ -342,7 +314,7 @@
 // ============================================================================
 
 wxStdButtonInputHandler::wxStdButtonInputHandler(wxInputHandler *handler)
-                       : wxStdInputHandler(handler)
+                       : wxStdAnyButtonInputHandler(handler)
 {
     m_winCapture = NULL;
     m_winHasMouse = false;
@@ -449,7 +421,7 @@
 }
 
 bool wxStdButtonInputHandler::HandleFocus(wxInputConsumer * WXUNUSED(consumer),
-                                          const wxFocusEvent& WXUNUSED(event))
+                                          const wxFocusEvent& WXUNUSED(event)i )
 {
     // buttons change appearance when they get/lose focus, so return true to
     // refresh
Index: src/univ/tglbtn.cpp
===================================================================
--- src/univ/tglbtn.cpp	(版本 76178)
+++ src/univ/tglbtn.cpp	(工作副本)
@@ -9,6 +9,9 @@
 /////////////////////////////////////////////////////////////////////////////
 
 #include "wx/wxprec.h"
+#include "wx/univ/renderer.h" 
+#include "wx/univ/theme.h" 
+#include "wx/univ/colschem.h" 
 
 #ifdef __BORLANDC__
     #pragma hdrstop
@@ -18,27 +21,30 @@
 
 #include "wx/tglbtn.h"
 
+ 
+// ============================================================================ 
+// implementation 
+// ============================================================================ 
+ 
+// ---------------------------------------------------------------------------- 
+// macros 
+// ---------------------------------------------------------------------------- 
 wxDEFINE_EVENT( wxEVT_TOGGLEBUTTON, wxCommandEvent );
 
-IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxButton)
+// ------------------------------------------------------------------------ 
+// wxToggleButton 
+// ------------------------------------------------------------------------ 
+IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxToggleButtonBase) 
 
-wxToggleButton::wxToggleButton()
+void wxToggleButton::Init()
 {
-    Init();
+    m_isPressed = 
+    m_value = false;
 }
 
-wxToggleButton::wxToggleButton(wxWindow *parent,
-                               wxWindowID id,
-                               const wxBitmap& bitmap,
-                               const wxString& label,
-                               const wxPoint& pos,
-                               const wxSize& size,
-                               long style,
-                               const wxValidator& validator,
-                               const wxString& name)
+wxToggleButton::wxToggleButton()
 {
     Init();
-    Create(parent, id, bitmap, label, pos, size, style, validator, name);
 }
 
 wxToggleButton::wxToggleButton(wxWindow *parent,
@@ -54,30 +60,123 @@
     Create(parent, id, label, pos, size, style, validator, name);
 }
 
+bool wxToggleButton::Create(wxWindow *parent, 
+                            wxWindowID id, 
+                            const wxString& lbl, 
+                            const wxPoint& pos, 
+                            const wxSize& size, long style, 
+                            const wxValidator& validator, 
+                            const wxString& name)
+{
+    wxString label(lbl); 
+    if (label.empty() && wxIsStockID(id)) 
+        label = wxGetStockLabel(id); 
+ 
+    long ctrl_style = style & ~wxBU_ALIGN_MASK; 
+    ctrl_style = ctrl_style & ~wxALIGN_MASK; 
+ 
+    if((style & wxBU_RIGHT) == wxBU_RIGHT) 
+        ctrl_style |= wxALIGN_RIGHT; 
+    else if((style & wxBU_LEFT) == wxBU_LEFT) 
+        ctrl_style |= wxALIGN_LEFT; 
+    else 
+        ctrl_style |= wxALIGN_CENTRE_HORIZONTAL; 
+ 
+    if((style & wxBU_TOP) == wxBU_TOP) 
+        ctrl_style |= wxALIGN_TOP; 
+    else if((style & wxBU_BOTTOM) == wxBU_BOTTOM) 
+        ctrl_style |= wxALIGN_BOTTOM; 
+    else 
+        ctrl_style |= wxALIGN_CENTRE_VERTICAL; 
+ 
+    //wxDefaultSize seems has bug, so here set the size by hardcode 
+    wxSize size1; 
+    if (size == wxDefaultSize) 
+        size1 = GetDefaultSize(); 
+    else 
+        size1 = wxDefaultSize; 
+    if ( !wxControl::Create(parent, id, pos, size1, ctrl_style, validator, name) ) 
+    { 
+        wxFAIL_MSG(wxT("wxToggleButton creation failed")); 
+        return false; 
+    }  
+    wxAnyButton::SetLabel(label); 
+    CreateInputHandler(wxINP_HANDLER_BUTTON); 
+    return true; 
+}
 wxToggleButton::~wxToggleButton()
 {
 }
 
-void wxToggleButton::Init()
-{
-    m_isPressed = false;
-    m_value = false;
+
+
+// ---------------------------------------------------------------------------- 
+// drawing 
+// ---------------------------------------------------------------------------- 
+
+void wxToggleButton::DoDraw(wxControlRenderer *renderer) 
+{ 
+    renderer->DrawButtonBorder(); 
+    renderer->DrawButtonLabel(m_bitmap, m_marginBmpX, m_marginBmpY); 
 }
 
+bool wxToggleButton::DoDrawBackground(wxDC& dc) 
+{ 
+ 
+    wxRect rect; 
+    wxSize size = GetSize(); 
+    rect.width = size.x; 
+    rect.height = size.y; 
+ 
+    m_renderer->DrawButtonSurface(dc, wxTHEME_BG_COLOUR(this), 
+                                      rect, GetStateFlags()); 
+ 
+    return true; 
+} 
+
+// ---------------------------------------------------------------------------- 
+// size management 
+// ---------------------------------------------------------------------------- 
+
+/* static */ 
+wxSize wxToggleButton::GetDefaultSize() 
+{ 
+    static wxSize s_sizeBtn; 
+	 
+    if ( s_sizeBtn.x == 0 ) 
+    { 
+        wxScreenDC dc; 
+ 
+        s_sizeBtn.x = dc.GetCharWidth()*6 + 2; 
+        s_sizeBtn.y = dc.GetCharHeight()*11/10 + 2; 
+    } 
+
+    return s_sizeBtn; 
+} 
+
+// Get the "best" size for this control. 
+wxSize wxToggleButton::DoGetBestSize() const 
+{ 
+    wxClientDC dc(wxConstCast(this, wxToggleButton)); 
+    wxCoord width, height; 
+    dc.GetMultiLineTextExtent(GetLabel(), &width, &height); 
+ 
+    return wxSize(width, height); 
+} 
+
+// ---------------------------------------------------------------------------- 
+// input processing 
+// ---------------------------------------------------------------------------- 
+ 
 void wxToggleButton::Toggle()
 {
     if ( m_isPressed )
-        Release();
+        m_isPressed = false; 
     else
-        Press();
-
-    if ( !m_isPressed )
-    {
-        // releasing button after it had been pressed generates a click event
-        // and toggles value
-        m_value = !m_value;
-        Click();
-    }
+        m_isPressed = true; 
+    Refresh();
+    m_value = !m_value;
+    Click();
 }
 
 void wxToggleButton::Click()
@@ -94,4 +193,95 @@
     Refresh();
 }
 
+bool wxToggleButton::PerformAction(const wxControlAction& action, 
+                             long numArg, 
+                             const wxString& strArg) 
+{ 
+    if ( action == wxACTION_BUTTON_TOGGLE ) 
+        Toggle(); 
+    else 
+        return wxControl::PerformAction(action, numArg, strArg); 
+ 
+    return true; 
+} 
+ 
+/* static */ 
+wxInputHandler *wxToggleButton::GetStdInputHandler(wxInputHandler *handlerDef) 
+{ 
+    static wxStdToggleButtonInputHandler s_handlerBtn(handlerDef); 
+ 
+    return &s_handlerBtn; 
+} 
+
+// ============================================================================ 
+// wxStdToggleButtonInputHandler 
+// ============================================================================ 
+ 
+wxStdToggleButtonInputHandler::wxStdToggleButtonInputHandler(wxInputHandler *handler) 
+                       : wxStdAnyButtonInputHandler(handler) 
+{ 
+    m_winCapture = NULL; 
+    m_winHasMouse = false; 
+} 
+
+bool wxStdToggleButtonInputHandler::HandleKey(wxInputConsumer *consumer, 
+                                       const wxKeyEvent& event, 
+                                       bool pressed) 
+{ 
+    int keycode = event.GetKeyCode(); 
+    if ( pressed && (keycode == WXK_SPACE || keycode == WXK_RETURN )) 
+    { 
+        consumer->PerformAction(wxACTION_BUTTON_TOGGLE); 
+ 
+        return true; 
+    } 
+ 
+    return wxStdInputHandler::HandleKey(consumer, event, pressed); 
+} 
+ 
+bool wxStdToggleButtonInputHandler::HandleMouse(wxInputConsumer *consumer, const wxMouseEvent& event) 
+{ 
+    // the button has 2 states: toggled and untoggled with the following 
+    // transitions between them: 
+    // 
+    //      untoggled -> left down -> capture mouse and go to toggled state 
+    //      toggled -> left down -> capture mouse and go to untoggled state 
+    //      left up well do nothing 
+    // 
+    // the other mouse buttons are ignored 
+    if ( event.Button(1) ) 
+    { 
+        if ( event.LeftDown() || event.LeftDClick() ) 
+        { 
+            m_winCapture = consumer->GetInputWindow(); 
+            m_winCapture->CaptureMouse(); 
+            m_winHasMouse = true; 
+ 
+            consumer->PerformAction(wxACTION_BUTTON_TOGGLE); 
+ 
+            return true; 
+        } 
+        else if ( event.LeftUp() ) 
+        { 
+            if ( m_winCapture ) 
+            { 
+                m_winCapture->ReleaseMouse(); 
+                m_winCapture = NULL; 
+            } 
+ 
+            return true; 
+        } 
+        //else: don't do anything special about the double click 
+    } 
+ 
+    return wxStdInputHandler::HandleMouse(consumer, event); 
+} 
+ 
+bool wxStdToggleButtonInputHandler::HandleActivation(wxInputConsumer *consumer, bool WXUNUSED(activated)) 
+{ 
+    // the togglebutton changes appearance when the app is [de]activated, so 
+    // return true to refresh 
+    return wxStaticCast(consumer->GetInputWindow(), wxToggleButton)->IsDefault(); 
+} 
+	 
 #endif // wxUSE_TOGGLEBTN

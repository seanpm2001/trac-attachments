Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(版本 76489)
+++ build/bakefiles/files.bkl	(工作副本)
@@ -2836,6 +2836,7 @@
     src/generic/mdig.cpp
     src/generic/prntdlgg.cpp
     src/univ/bmpbuttn.cpp
+    src/univ/anybutton.cpp
     src/univ/button.cpp
     src/univ/checkbox.cpp
     src/univ/checklst.cpp
Index: include/wx/univ/anybutton.h
===================================================================
--- include/wx/univ/anybutton.h	(版本 76489)
+++ include/wx/univ/anybutton.h	(工作副本)
@@ -9,7 +9,7 @@
 
 #ifndef _WX_UNIV_ANYBUTTON_H_
 #define _WX_UNIV_ANYBUTTON_H_
-
+#include "wx/univ/inphand.h"
 // ----------------------------------------------------------------------------
 // Common button functionality
 // ----------------------------------------------------------------------------
@@ -21,12 +21,69 @@
 
     virtual ~wxAnyButton() {}
 
+    // wxAnyButton actions
+    virtual void Toggle();
+    virtual void Press();
+    virtual void Release();
+    virtual void Click(){}
+
+    virtual bool PerformAction(const wxControlAction& action,
+                               long numArg = -1,
+                               const wxString& strArg = wxEmptyString) wxOVERRIDE;
+
+    static wxInputHandler *GetStdInputHandler(wxInputHandler *handlerDef);
+    virtual wxInputHandler *DoGetStdInputHandler(wxInputHandler *handlerDef) wxOVERRIDE
+    {
+        return GetStdInputHandler(handlerDef);
+    }
+
 protected:
     // choose the default border for this window
     virtual wxBorder GetDefaultBorder() const wxOVERRIDE { return wxBORDER_STATIC; }
 
+    virtual wxSize DoGetBestClientSize() const wxOVERRIDE;
+
+    virtual bool DoDrawBackground(wxDC& dc) wxOVERRIDE;
+    virtual void DoDraw(wxControlRenderer *renderer) wxOVERRIDE;
+    // current state
+    bool m_isPressed,
+         m_isDefault;
+
+    // the (optional) image to show and the margins around it
+    wxBitmap m_bitmap;
+    wxCoord  m_marginBmpX,
+             m_marginBmpY;
+
 private:
     wxDECLARE_NO_COPY_CLASS(wxAnyButton);
 };
 
+// ----------------------------------------------------------------------------
+// wxStdAnyButtonInputHandler: translates SPACE and ENTER keys and the left mouse
+// click into button press/release actions
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxStdAnyButtonInputHandler : public wxStdInputHandler
+{
+public:
+    wxStdAnyButtonInputHandler(wxInputHandler *inphand);
+
+    virtual bool HandleKey(wxInputConsumer *consumer,
+                           const wxKeyEvent& event,
+                           bool pressed);
+    virtual bool HandleMouse(wxInputConsumer *consumer,
+                             const wxMouseEvent& event);
+    virtual bool HandleMouseMove(wxInputConsumer *consumer,
+                                 const wxMouseEvent& event);
+    virtual bool HandleFocus(wxInputConsumer *consumer,
+                             const wxFocusEvent& event);
+    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
+
+private:
+    // the window (button) which has capture or NULL and the flag telling if
+    // the mouse is inside the button which captured it or not
+    wxWindow *m_winCapture;
+    bool      m_winHasMouse;
+};
+
 #endif // _WX_UNIV_ANYBUTTON_H_
Index: include/wx/univ/button.h
===================================================================
--- include/wx/univ/button.h	(版本 76489)
+++ include/wx/univ/button.h	(工作副本)
@@ -11,14 +11,12 @@
 #ifndef _WX_UNIV_BUTTON_H_
 #define _WX_UNIV_BUTTON_H_
 
-class WXDLLIMPEXP_FWD_CORE wxInputHandler;
-
 #include "wx/bitmap.h"
 
 // ----------------------------------------------------------------------------
 // the actions supported by this control
 // ----------------------------------------------------------------------------
-
+//checkbox.cpp needed it, so not move it to anybutton.h
 #define wxACTION_BUTTON_TOGGLE  wxT("toggle")    // press/release the button
 #define wxACTION_BUTTON_PRESS   wxT("press")     // press the button
 #define wxACTION_BUTTON_RELEASE wxT("release")   // release the button
@@ -91,46 +89,21 @@
     virtual bool IsPressed() const wxOVERRIDE { return m_isPressed; }
     virtual bool IsDefault() const wxOVERRIDE { return m_isDefault; }
 
+
     // wxButton actions
-    virtual void Toggle();
-    virtual void Press();
-    virtual void Release();
     virtual void Click();
 
-    virtual bool PerformAction(const wxControlAction& action,
-                               long numArg = -1,
-                               const wxString& strArg = wxEmptyString) wxOVERRIDE;
-
     virtual bool CanBeHighlighted() const wxOVERRIDE { return true; }
 
-    static wxInputHandler *GetStdInputHandler(wxInputHandler *handlerDef);
-    virtual wxInputHandler *DoGetStdInputHandler(wxInputHandler *handlerDef) wxOVERRIDE
-    {
-        return GetStdInputHandler(handlerDef);
-    }
 
 
 protected:
-    virtual wxSize DoGetBestClientSize() const wxOVERRIDE;
-
-    virtual bool DoDrawBackground(wxDC& dc) wxOVERRIDE;
-    virtual void DoDraw(wxControlRenderer *renderer) wxOVERRIDE;
-
     virtual void DoSetBitmap(const wxBitmap& bitmap, State which) wxOVERRIDE;
     virtual void DoSetBitmapMargins(wxCoord x, wxCoord y) wxOVERRIDE;
 
     // common part of all ctors
     void Init();
 
-    // current state
-    bool m_isPressed,
-         m_isDefault;
-
-    // the (optional) image to show and the margins around it
-    wxBitmap m_bitmap;
-    wxCoord  m_marginBmpX,
-             m_marginBmpY;
-
 private:
     DECLARE_DYNAMIC_CLASS(wxButton)
 };
Index: include/wx/univ/tglbtn.h
===================================================================
--- include/wx/univ/tglbtn.h	(版本 76489)
+++ include/wx/univ/tglbtn.h	(工作副本)
@@ -11,20 +11,17 @@
 #ifndef _WX_UNIV_TGLBTN_H_
 #define _WX_UNIV_TGLBTN_H_
 
-#include "wx/button.h"
-
 // ----------------------------------------------------------------------------
 // wxToggleButton: a push button
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxToggleButton: public wxButton
+class WXDLLIMPEXP_CORE wxToggleButton: public wxToggleButtonBase
 {
 public:
     wxToggleButton();
 
     wxToggleButton(wxWindow *parent,
              wxWindowID id,
-             const wxBitmap& bitmap,
              const wxString& label = wxEmptyString,
              const wxPoint& pos = wxDefaultPosition,
              const wxSize& size = wxDefaultSize,
@@ -32,17 +29,17 @@
              const wxValidator& validator = wxDefaultValidator,
              const wxString& name = wxCheckBoxNameStr);
 
-    wxToggleButton(wxWindow *parent,
-             wxWindowID id,
-             const wxString& label = wxEmptyString,
-             const wxPoint& pos = wxDefaultPosition,
-             const wxSize& size = wxDefaultSize,
-             long style = 0,
-             const wxValidator& validator = wxDefaultValidator,
-             const wxString& name = wxCheckBoxNameStr);
+    // Create the control
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label = wxEmptyString,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize, 
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxCheckBoxNameStr);
+    //virtual ~wxToggleButton();
 
-    virtual ~wxToggleButton();
-
     virtual bool IsPressed() const wxOVERRIDE { return m_isPressed || m_value; }
 
     // wxToggleButton actions
@@ -54,7 +51,7 @@
     bool GetValue() const { return m_value; }
 
 protected:
-    virtual wxBorder GetDefaultBorder() const wxOVERRIDE { return wxBORDER_NONE; }
+    virtual wxBorder GetDefaultBorder() const { return wxBORDER_DEFAULT; }
 
     // the current value
     bool m_value;
Index: src/univ/anybutton.cpp
===================================================================
--- src/univ/anybutton.cpp	(版本 0)
+++ src/univ/anybutton.cpp	(工作副本)
@@ -0,0 +1,292 @@
+///////////////////////////////////////////////////////////////////////////// 
+// Name:        src/univ/anybutton.cpp 
+// Purpose:     wxAnyButton 
+// Author:      Vadim Zeitlin 
+// Created:     2014-03-26 (extracted from button.cpp and tglbtn.cpp) 
+// Copyright:   (c) 2014 
+// Licence:     wxWindows licence 
+///////////////////////////////////////////////////////////////////////////// 
+
+// For compilers that support precompilation, includes "wx.h". 
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#include "wx/univ/renderer.h"
+#include "wx/univ/theme.h"
+#include "wx/univ/colschem.h"
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+
+void wxAnyButton::Press()
+{
+    if ( !m_isPressed )
+    {
+        m_isPressed = true;
+
+        Refresh();
+    }
+}
+
+void wxAnyButton::Release()
+{
+    if ( m_isPressed )
+    {
+        m_isPressed = false;
+
+        Refresh();
+    }
+}
+
+void wxAnyButton::Toggle()
+{
+    if ( m_isPressed )
+        Release();
+    else
+        Press();
+
+    if ( !m_isPressed )
+    {
+        // releasing button after it had been pressed generates a click event
+        Click();
+    }
+    Refresh();
+}
+
+bool wxAnyButton::PerformAction(const wxControlAction& action, 
+                             long numArg, 
+                             const wxString& strArg) 
+{ 
+    if ( action == wxACTION_BUTTON_TOGGLE ) 
+        Toggle(); 
+    else if ( action == wxACTION_BUTTON_CLICK )
+        Click();
+    else if ( action == wxACTION_BUTTON_PRESS )
+        Press();
+    else if ( action == wxACTION_BUTTON_RELEASE )
+        Release();
+    else
+        return wxControl::PerformAction(action, numArg, strArg);
+ 
+    return true; 
+} 
+
+/* static */
+wxInputHandler *wxAnyButton::GetStdInputHandler(wxInputHandler *handlerDef)
+{
+    static wxStdAnyButtonInputHandler s_handlerBtn(handlerDef);
+
+    return &s_handlerBtn;
+}
+
+// ----------------------------------------------------------------------------
+// size management
+// ----------------------------------------------------------------------------
+
+wxSize wxAnyButton::DoGetBestClientSize() const
+{
+    wxClientDC dc(wxConstCast(this, wxAnyButton));
+    wxCoord width, height;
+    dc.GetMultiLineTextExtent(GetLabel(), &width, &height);
+
+    if ( m_bitmap.IsOk() )
+    {
+        // allocate extra space for the bitmap
+        wxCoord heightBmp = m_bitmap.GetHeight() + 2*m_marginBmpY;
+        if ( height < heightBmp )
+            height = heightBmp;
+
+        width += m_bitmap.GetWidth() + 2*m_marginBmpX;
+    }
+
+    // The default size should not be adjusted, so the code is moved into the
+    // renderer. This is conceptual wrong but currently the only solution.
+    // (Otto Wyss, Patch 664399)
+
+/*
+    // for compatibility with other ports, the buttons default size is never
+    // less than the standard one, but not when display not PDAs.
+    if (wxSystemSettings::GetScreenType() > wxSYS_SCREEN_PDA)
+    {
+        if ( !(GetWindowStyle() & wxBU_EXACTFIT) )
+        {
+            wxSize szDef = GetDefaultSize();
+            if ( width < szDef.x )
+                width = szDef.x;
+        }
+    }
+*/
+    return wxSize(width, height);
+}
+
+// ----------------------------------------------------------------------------
+// drawing
+// ----------------------------------------------------------------------------
+
+void wxAnyButton::DoDraw(wxControlRenderer *renderer)
+{
+    if ( !(GetWindowStyle() & wxBORDER_NONE) )
+    {
+        renderer->DrawButtonBorder();
+    }
+
+    renderer->DrawButtonLabel(m_bitmap, m_marginBmpX, m_marginBmpY);
+}
+
+bool wxAnyButton::DoDrawBackground(wxDC& dc)
+{
+    wxRect rect;
+    wxSize size = GetSize();
+    rect.width = size.x;
+    rect.height = size.y;
+
+    if ( GetBackgroundBitmap().IsOk() )
+    {
+        // get the bitmap and the flags
+        int alignment;
+        wxStretch stretch;
+        wxBitmap bmp = GetBackgroundBitmap(&alignment, &stretch);
+        wxControlRenderer::DrawBitmap(dc, bmp, rect, alignment, stretch);
+    }
+    else
+    {
+        m_renderer->DrawButtonSurface(dc, wxTHEME_BG_COLOUR(this),
+                                      rect, GetStateFlags());
+    }
+
+    return true;
+}
+
+// ============================================================================
+// wxStdAnyButtonInputHandler
+// ============================================================================
+
+wxStdAnyButtonInputHandler::wxStdAnyButtonInputHandler(wxInputHandler *handler)
+                       : wxStdInputHandler(handler)
+{
+    m_winCapture = NULL;
+    m_winHasMouse = false;
+}
+
+bool wxStdAnyButtonInputHandler::HandleKey(wxInputConsumer *consumer,
+                                        const wxKeyEvent& event,
+                                        bool pressed)
+{
+    int keycode = event.GetKeyCode();
+    if ( keycode == WXK_SPACE || keycode == WXK_RETURN )
+    {
+        consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
+
+        return true;
+    }
+
+    return wxStdInputHandler::HandleKey(consumer, event, pressed);
+}
+
+bool wxStdAnyButtonInputHandler::HandleMouse(wxInputConsumer *consumer,
+                                          const wxMouseEvent& event)
+{
+    // the button has 2 states: pressed and normal with the following
+    // transitions between them:
+    //
+    //      normal -> left down -> capture mouse and go to pressed state
+    //      pressed -> left up inside -> generate click -> go to normal
+    //                         outside ------------------>
+    //
+    // the other mouse buttons are ignored
+    if ( event.Button(1) )
+    {
+        if ( event.LeftDown() || event.LeftDClick() )
+        {
+            m_winCapture = consumer->GetInputWindow();
+            m_winCapture->CaptureMouse();
+            m_winHasMouse = true;
+
+            consumer->PerformAction(wxACTION_BUTTON_PRESS);
+
+            return true;
+        }
+        else if ( event.LeftUp() )
+        {
+            if ( m_winCapture )
+            {
+                m_winCapture->ReleaseMouse();
+                m_winCapture = NULL;
+            }
+
+            if ( m_winHasMouse )
+            {
+                // this will generate a click event
+                consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
+
+                return true;
+            }
+            //else: the mouse was released outside the window, this doesn't
+            //      count as a click
+        }
+        //else: don't do anything special about the double click
+    }
+
+    return wxStdInputHandler::HandleMouse(consumer, event);
+}
+
+bool wxStdAnyButtonInputHandler::HandleMouseMove(wxInputConsumer *consumer,
+                                              const wxMouseEvent& event)
+{
+    // we only have to do something when the mouse leaves/enters the pressed
+    // button and don't care about the other ones
+    if ( event.GetEventObject() == m_winCapture )
+    {
+        // leaving the button should remove its pressed state
+        if ( event.Leaving() )
+        {
+            // remember that the mouse is now outside
+            m_winHasMouse = false;
+
+            // we do have a pressed button, so release it
+            consumer->GetInputWindow()->SetCurrent(false);
+            consumer->PerformAction(wxACTION_BUTTON_RELEASE);
+
+            return true;
+        }
+        // and entering it back should make it pressed again if it had been
+        // pressed
+        else if ( event.Entering() )
+        {
+            // the mouse is (back) inside the button
+            m_winHasMouse = true;
+
+            // we did have a pressed button which we released when leaving the
+            // window, press it again
+            consumer->GetInputWindow()->SetCurrent(true);
+            consumer->PerformAction(wxACTION_BUTTON_PRESS);
+
+            return true;
+        }
+    }
+
+    return wxStdInputHandler::HandleMouseMove(consumer, event);
+}
+
+bool wxStdAnyButtonInputHandler::HandleFocus(wxInputConsumer * WXUNUSED(consumer),
+                                          const wxFocusEvent& WXUNUSED(event))
+{
+    // buttons change appearance when they get/lose focus, so return true to
+    // refresh
+    return true;
+}
+
+bool wxStdAnyButtonInputHandler::HandleActivation(wxInputConsumer *consumer,
+                                               bool WXUNUSED(activated))
+{
+    // the default button changes appearance when the app is [de]activated, so
+    // return true to refresh
+    return wxStaticCast(consumer->GetInputWindow(), wxAnyButton)->IsDefault();
+}
+
+
Index: src/univ/button.cpp
===================================================================
--- src/univ/button.cpp	(版本 76489)
+++ src/univ/button.cpp	(工作副本)
@@ -32,41 +32,7 @@
     #include "wx/settings.h"
 #endif
 
-#include "wx/univ/renderer.h"
-#include "wx/univ/inphand.h"
-#include "wx/univ/theme.h"
-#include "wx/univ/colschem.h"
-#include "wx/stockitem.h"
-
 // ----------------------------------------------------------------------------
-// wxStdButtonInputHandler: translates SPACE and ENTER keys and the left mouse
-// click into button press/release actions
-// ----------------------------------------------------------------------------
-
-class WXDLLEXPORT wxStdButtonInputHandler : public wxStdInputHandler
-{
-public:
-    wxStdButtonInputHandler(wxInputHandler *inphand);
-
-    virtual bool HandleKey(wxInputConsumer *consumer,
-                           const wxKeyEvent& event,
-                           bool pressed);
-    virtual bool HandleMouse(wxInputConsumer *consumer,
-                             const wxMouseEvent& event);
-    virtual bool HandleMouseMove(wxInputConsumer *consumer,
-                                 const wxMouseEvent& event);
-    virtual bool HandleFocus(wxInputConsumer *consumer,
-                             const wxFocusEvent& event);
-    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
-
-private:
-    // the window (button) which has capture or NULL and the flag telling if
-    // the mouse is inside the button which captured it or not
-    wxWindow *m_winCapture;
-    bool      m_winHasMouse;
-};
-
-// ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
@@ -163,118 +129,11 @@
     return s_sizeBtn;
 }
 
-wxSize wxButton::DoGetBestClientSize() const
-{
-    wxClientDC dc(wxConstCast(this, wxButton));
-    wxCoord width, height;
-    dc.GetMultiLineTextExtent(GetLabel(), &width, &height);
 
-    if ( m_bitmap.IsOk() )
-    {
-        // allocate extra space for the bitmap
-        wxCoord heightBmp = m_bitmap.GetHeight() + 2*m_marginBmpY;
-        if ( height < heightBmp )
-            height = heightBmp;
-
-        width += m_bitmap.GetWidth() + 2*m_marginBmpX;
-    }
-
-    // The default size should not be adjusted, so the code is moved into the
-    // renderer. This is conceptual wrong but currently the only solution.
-    // (Otto Wyss, Patch 664399)
-
-/*
-    // for compatibility with other ports, the buttons default size is never
-    // less than the standard one, but not when display not PDAs.
-    if (wxSystemSettings::GetScreenType() > wxSYS_SCREEN_PDA)
-    {
-        if ( !(GetWindowStyle() & wxBU_EXACTFIT) )
-        {
-            wxSize szDef = GetDefaultSize();
-            if ( width < szDef.x )
-                width = szDef.x;
-        }
-    }
-*/
-    return wxSize(width, height);
-}
-
 // ----------------------------------------------------------------------------
-// drawing
-// ----------------------------------------------------------------------------
-
-void wxButton::DoDraw(wxControlRenderer *renderer)
-{
-    if ( !(GetWindowStyle() & wxBORDER_NONE) )
-    {
-        renderer->DrawButtonBorder();
-    }
-
-    renderer->DrawButtonLabel(m_bitmap, m_marginBmpX, m_marginBmpY);
-}
-
-bool wxButton::DoDrawBackground(wxDC& dc)
-{
-    wxRect rect;
-    wxSize size = GetSize();
-    rect.width = size.x;
-    rect.height = size.y;
-
-    if ( GetBackgroundBitmap().IsOk() )
-    {
-        // get the bitmap and the flags
-        int alignment;
-        wxStretch stretch;
-        wxBitmap bmp = GetBackgroundBitmap(&alignment, &stretch);
-        wxControlRenderer::DrawBitmap(dc, bmp, rect, alignment, stretch);
-    }
-    else
-    {
-        m_renderer->DrawButtonSurface(dc, wxTHEME_BG_COLOUR(this),
-                                      rect, GetStateFlags());
-    }
-
-    return true;
-}
-
-// ----------------------------------------------------------------------------
 // input processing
 // ----------------------------------------------------------------------------
 
-void wxButton::Press()
-{
-    if ( !m_isPressed )
-    {
-        m_isPressed = true;
-
-        Refresh();
-    }
-}
-
-void wxButton::Release()
-{
-    if ( m_isPressed )
-    {
-        m_isPressed = false;
-
-        Refresh();
-    }
-}
-
-void wxButton::Toggle()
-{
-    if ( m_isPressed )
-        Release();
-    else
-        Press();
-
-    if ( !m_isPressed )
-    {
-        // releasing button after it had been pressed generates a click event
-        Click();
-    }
-}
-
 void wxButton::Click()
 {
     wxCommandEvent event(wxEVT_BUTTON, GetId());
@@ -282,32 +141,6 @@
     Command(event);
 }
 
-bool wxButton::PerformAction(const wxControlAction& action,
-                             long numArg,
-                             const wxString& strArg)
-{
-    if ( action == wxACTION_BUTTON_TOGGLE )
-        Toggle();
-    else if ( action == wxACTION_BUTTON_CLICK )
-        Click();
-    else if ( action == wxACTION_BUTTON_PRESS )
-        Press();
-    else if ( action == wxACTION_BUTTON_RELEASE )
-        Release();
-    else
-        return wxControl::PerformAction(action, numArg, strArg);
-
-    return true;
-}
-
-/* static */
-wxInputHandler *wxButton::GetStdInputHandler(wxInputHandler *handlerDef)
-{
-    static wxStdButtonInputHandler s_handlerBtn(handlerDef);
-
-    return &s_handlerBtn;
-}
-
 // ----------------------------------------------------------------------------
 // misc
 // ----------------------------------------------------------------------------
@@ -337,132 +170,5 @@
     return wxButtonBase::SetDefault();
 }
 
-// ============================================================================
-// wxStdButtonInputHandler
-// ============================================================================
-
-wxStdButtonInputHandler::wxStdButtonInputHandler(wxInputHandler *handler)
-                       : wxStdInputHandler(handler)
-{
-    m_winCapture = NULL;
-    m_winHasMouse = false;
-}
-
-bool wxStdButtonInputHandler::HandleKey(wxInputConsumer *consumer,
-                                        const wxKeyEvent& event,
-                                        bool pressed)
-{
-    int keycode = event.GetKeyCode();
-    if ( keycode == WXK_SPACE || keycode == WXK_RETURN )
-    {
-        consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
-
-        return true;
-    }
-
-    return wxStdInputHandler::HandleKey(consumer, event, pressed);
-}
-
-bool wxStdButtonInputHandler::HandleMouse(wxInputConsumer *consumer,
-                                          const wxMouseEvent& event)
-{
-    // the button has 2 states: pressed and normal with the following
-    // transitions between them:
-    //
-    //      normal -> left down -> capture mouse and go to pressed state
-    //      pressed -> left up inside -> generate click -> go to normal
-    //                         outside ------------------>
-    //
-    // the other mouse buttons are ignored
-    if ( event.Button(1) )
-    {
-        if ( event.LeftDown() || event.LeftDClick() )
-        {
-            m_winCapture = consumer->GetInputWindow();
-            m_winCapture->CaptureMouse();
-            m_winHasMouse = true;
-
-            consumer->PerformAction(wxACTION_BUTTON_PRESS);
-
-            return true;
-        }
-        else if ( event.LeftUp() )
-        {
-            if ( m_winCapture )
-            {
-                m_winCapture->ReleaseMouse();
-                m_winCapture = NULL;
-            }
-
-            if ( m_winHasMouse )
-            {
-                // this will generate a click event
-                consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
-
-                return true;
-            }
-            //else: the mouse was released outside the window, this doesn't
-            //      count as a click
-        }
-        //else: don't do anything special about the double click
-    }
-
-    return wxStdInputHandler::HandleMouse(consumer, event);
-}
-
-bool wxStdButtonInputHandler::HandleMouseMove(wxInputConsumer *consumer,
-                                              const wxMouseEvent& event)
-{
-    // we only have to do something when the mouse leaves/enters the pressed
-    // button and don't care about the other ones
-    if ( event.GetEventObject() == m_winCapture )
-    {
-        // leaving the button should remove its pressed state
-        if ( event.Leaving() )
-        {
-            // remember that the mouse is now outside
-            m_winHasMouse = false;
-
-            // we do have a pressed button, so release it
-            consumer->GetInputWindow()->SetCurrent(false);
-            consumer->PerformAction(wxACTION_BUTTON_RELEASE);
-
-            return true;
-        }
-        // and entering it back should make it pressed again if it had been
-        // pressed
-        else if ( event.Entering() )
-        {
-            // the mouse is (back) inside the button
-            m_winHasMouse = true;
-
-            // we did have a pressed button which we released when leaving the
-            // window, press it again
-            consumer->GetInputWindow()->SetCurrent(true);
-            consumer->PerformAction(wxACTION_BUTTON_PRESS);
-
-            return true;
-        }
-    }
-
-    return wxStdInputHandler::HandleMouseMove(consumer, event);
-}
-
-bool wxStdButtonInputHandler::HandleFocus(wxInputConsumer * WXUNUSED(consumer),
-                                          const wxFocusEvent& WXUNUSED(event))
-{
-    // buttons change appearance when they get/lose focus, so return true to
-    // refresh
-    return true;
-}
-
-bool wxStdButtonInputHandler::HandleActivation(wxInputConsumer *consumer,
-                                               bool WXUNUSED(activated))
-{
-    // the default button changes appearance when the app is [de]activated, so
-    // return true to refresh
-    return wxStaticCast(consumer->GetInputWindow(), wxButton)->IsDefault();
-}
-
 #endif // wxUSE_BUTTON
 
Index: src/univ/tglbtn.cpp
===================================================================
--- src/univ/tglbtn.cpp	(版本 76489)
+++ src/univ/tglbtn.cpp	(工作副本)
@@ -17,10 +17,13 @@
 #if wxUSE_TOGGLEBTN
 
 #include "wx/tglbtn.h"
+#include "wx/univ/renderer.h"
+#include "wx/univ/colschem.h" 
+#include "wx/univ/theme.h"
 
 wxDEFINE_EVENT( wxEVT_TOGGLEBUTTON, wxCommandEvent );
 
-IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxButton)
+IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxToggleButtonBase)
 
 wxToggleButton::wxToggleButton()
 {
@@ -28,34 +31,51 @@
 }
 
 wxToggleButton::wxToggleButton(wxWindow *parent,
-                               wxWindowID id,
-                               const wxBitmap& bitmap,
-                               const wxString& label,
-                               const wxPoint& pos,
-                               const wxSize& size,
-                               long style,
-                               const wxValidator& validator,
-                               const wxString& name)
+                       wxWindowID id,
+                       const wxString& label,
+                       const wxPoint& pos,
+                       const wxSize& size,
+                       long style,
+                       const wxValidator& validator,
+                       const wxString& name)
 {
     Init();
-    Create(parent, id, bitmap, label, pos, size, style, validator, name);
+    Create(parent, id, label, pos, size, style, validator, name);
 }
 
-wxToggleButton::wxToggleButton(wxWindow *parent,
-                               wxWindowID id,
-                               const wxString& label,
-                               const wxPoint& pos,
-                               const wxSize& size,
-                               long style,
-                               const wxValidator& validator,
-                               const wxString& name)
+bool wxToggleButton::Create(wxWindow *parent,
+                            wxWindowID id,
+                            const wxString& label,
+                            const wxPoint& pos,
+                            const wxSize& size, long style,
+                            const wxValidator& validator,
+                            const wxString& name)
 {
-    Init();
-    Create(parent, id, label, pos, size, style, validator, name);
-}
+    long ctrl_style = style & ~wxBU_ALIGN_MASK;
+    ctrl_style = ctrl_style & ~wxALIGN_MASK;
 
-wxToggleButton::~wxToggleButton()
-{
+    if((style & wxBU_RIGHT) == wxBU_RIGHT)
+        ctrl_style |= wxALIGN_RIGHT;
+    else if((style & wxBU_LEFT) == wxBU_LEFT)
+        ctrl_style |= wxALIGN_LEFT;
+    else
+        ctrl_style |= wxALIGN_CENTRE_HORIZONTAL;
+
+    if((style & wxBU_TOP) == wxBU_TOP)
+        ctrl_style |= wxALIGN_TOP;
+    else if((style & wxBU_BOTTOM) == wxBU_BOTTOM)
+        ctrl_style |= wxALIGN_BOTTOM;
+    else
+        ctrl_style |= wxALIGN_CENTRE_VERTICAL;
+
+    if ( !wxToggleButtonBase::Create(parent, id, pos, size, ctrl_style, validator, name) )
+    {
+        wxFAIL_MSG(wxT("wxToggleButton creation failed"));
+        return false;
+    } 
+    wxAnyButton::SetLabel(label);
+    CreateInputHandler(wxINP_HANDLER_BUTTON);
+    return true;
 }
 
 void wxToggleButton::Init()

Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(版本 76148)
+++ build/bakefiles/files.bkl	(工作副本)
@@ -2834,6 +2834,7 @@
     src/generic/mdig.cpp
     src/generic/prntdlgg.cpp
     src/univ/bmpbuttn.cpp
+    src/univ/anybutton.cpp
     src/univ/button.cpp
     src/univ/checkbox.cpp
     src/univ/checklst.cpp
Index: include/wx/anybutton.h
===================================================================
--- include/wx/anybutton.h	(版本 76148)
+++ include/wx/anybutton.h	(工作副本)
@@ -1,9 +1,9 @@
 /////////////////////////////////////////////////////////////////////////////
 // Name:        wx/anybutton.h
 // Purpose:     wxAnyButtonBase class
-// Author:      Vadim Zeitlin
+// Author:      Vadim Zetlin
 // Created:     2000-08-15 (extracted from button.h)
-// Copyright:   (c) Vadim Zeitlin
+// Copyright:   (c) Vadim Zetlin
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
Index: include/wx/button.h
===================================================================
--- include/wx/button.h	(版本 76148)
+++ include/wx/button.h	(工作副本)
@@ -39,9 +39,8 @@
     // returns the old default item (possibly NULL)
     virtual wxWindow *SetDefault();
 
-    // returns the default button size for this platform
-    static wxSize GetDefaultSize();
 
+
 protected:
     wxDECLARE_NO_COPY_CLASS(wxButtonBase);
 };
Index: include/wx/univ/anybutton.h
===================================================================
--- include/wx/univ/anybutton.h	(版本 76148)
+++ include/wx/univ/anybutton.h	(工作副本)
@@ -9,9 +9,10 @@
 
 #ifndef _WX_UNIV_ANYBUTTON_H_
 #define _WX_UNIV_ANYBUTTON_H_
-
+class WXDLLIMPEXP_FWD_CORE wxInputHandler;
+#include "wx/univ/inphand.h"
 // ----------------------------------------------------------------------------
-// Common button functionality
+// wxAnyButton
 // ----------------------------------------------------------------------------
 
 class WXDLLIMPEXP_CORE wxAnyButton : public wxAnyButtonBase
@@ -20,13 +21,43 @@
     wxAnyButton() {}
 
     virtual ~wxAnyButton() {}
+    // returns the default button size for this platform
+    static wxSize GetDefaultSize();
 
+    virtual bool PerformAction(const wxControlAction& WXUNUSED(action),
+                             long WXUNUSED(numArg),
+                             const wxString& WXUNUSED(strArg))
+    {return false;}
 protected:
     // choose the default border for this window
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_STATIC; }
 
+    virtual void Init();
+
+    // the current state
+    bool m_state;
+    bool m_isPressed;
 private:
     wxDECLARE_NO_COPY_CLASS(wxAnyButton);
 };
 
+// ----------------------------------------------------------------------------
+// wxStdAnyButtonInputHandler: The base input handler of button
+// ----------------------------------------------------------------------------
+class WXDLLEXPORT wxStdAnyButtonInputHandler : public wxStdInputHandler
+{
+public:
+    wxStdAnyButtonInputHandler(wxInputHandler *handler);
+
+    virtual bool HandleKey(wxInputConsumer *WXUNUSED(consumer),
+                           const wxKeyEvent& WXUNUSED(event),
+                           bool WXUNUSED(pressed));
+
+    virtual bool HandleMouse(wxInputConsumer *WXUNUSED(consumer),
+                             const wxMouseEvent& WXUNUSED(event));
+    virtual bool HandleMouseMove(wxInputConsumer *WXUNUSED(consumer),
+                                 const wxMouseEvent& WXUNUSED(event));
+    virtual bool HandleFocus(wxInputConsumer *WXUNUSED(consumer),
+                             const wxFocusEvent& WXUNUSED(event));
+};
 #endif // _WX_UNIV_ANYBUTTON_H_
Index: include/wx/univ/button.h
===================================================================
--- include/wx/univ/button.h	(版本 76148)
+++ include/wx/univ/button.h	(工作副本)
@@ -14,6 +14,7 @@
 class WXDLLIMPEXP_FWD_CORE wxInputHandler;
 
 #include "wx/bitmap.h"
+#include "wx/univ/inphand.h"
 
 // ----------------------------------------------------------------------------
 // the actions supported by this control
@@ -92,6 +93,7 @@
     virtual bool IsDefault() const { return m_isDefault; }
 
     // wxButton actions
+
     virtual void Toggle();
     virtual void Press();
     virtual void Release();
@@ -135,5 +137,25 @@
     DECLARE_DYNAMIC_CLASS(wxButton)
 };
 
+class WXDLLEXPORT wxStdButtonInputHandler : public wxStdAnyButtonInputHandler
+{
+public:
+    wxStdButtonInputHandler(wxInputHandler *inphand);
+
+    virtual bool HandleKey(wxInputConsumer *consumer,
+                           const wxKeyEvent& event,
+                           bool pressed);
+    virtual bool HandleMouse(wxInputConsumer *consumer,
+                             const wxMouseEvent& event);
+    virtual bool HandleMouseMove(wxInputConsumer *consumer,
+                                 const wxMouseEvent& event);
+    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
+
+private:
+    // the window ( button) which has capture or NULL and the flag telling if
+    // the mouse is inside the togglebutton which captured it or not
+    wxWindow *m_winCapture;
+    bool      m_winHasMouse;
+};
 #endif // _WX_UNIV_BUTTON_H_
 
Index: include/wx/univ/tglbtn.h
===================================================================
--- include/wx/univ/tglbtn.h	(版本 76148)
+++ include/wx/univ/tglbtn.h	(工作副本)
@@ -2,36 +2,55 @@
 // Name:        wx/univ/tglbtn.h
 // Purpose:     wxToggleButton for wxUniversal
 // Author:      Vadim Zeitlin
-// Modified by: David Bjorkevik
+// Modified by: 孙波翔(Sun Boxiang)
 // Created:     16.05.06
-// Copyright:   (c) 2000 SciTech Software, Inc. (www.scitechsoft.com)
+// Copyright:   (c) 2014 孙波翔(Sun Boxiang)
 // Licence:     wxWindows licence
 ///////////////////////////////////////////////////////////////////////////////
 
 #ifndef _WX_UNIV_TGLBTN_H_
 #define _WX_UNIV_TGLBTN_H_
+class WXDLLIMPEXP_FWD_CORE wxInputHandler;
 
-#include "wx/button.h"
+//not use bitmap yet
+#include "wx/bitmap.h"
 
 // ----------------------------------------------------------------------------
-// wxToggleButton: a push button
+// the actions supported by this control
 // ----------------------------------------------------------------------------
 
-class WXDLLIMPEXP_CORE wxToggleButton: public wxButton
+#define wxACTION_BUTTON_TOGGLE  wxT("toggle")    // press/release the button
+#define wxACTION_BUTTON_CLICK   wxT("click")     // generate button click event
+
+class WXDLLEXPORT wxStdToggleButtonInputHandler : public wxStdAnyButtonInputHandler
 {
 public:
-    wxToggleButton();
+    wxStdToggleButtonInputHandler(wxInputHandler *inphand);
 
-    wxToggleButton(wxWindow *parent,
-             wxWindowID id,
-             const wxBitmap& bitmap,
-             const wxString& label = wxEmptyString,
-             const wxPoint& pos = wxDefaultPosition,
-             const wxSize& size = wxDefaultSize,
-             long style = 0,
-             const wxValidator& validator = wxDefaultValidator,
-             const wxString& name = wxCheckBoxNameStr);
+    virtual bool HandleKey(wxInputConsumer *consumer,
+                           const wxKeyEvent& event,
+                           bool pressed);
+    virtual bool HandleMouse(wxInputConsumer *consumer,
+                             const wxMouseEvent& event);
+    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
 
+private:
+    // the window (togglebutton) which has capture or NULL and the flag telling if
+    // the mouse is inside the togglebutton which captured it or not
+    wxWindow *m_winCapture;
+    bool      m_winHasMouse;
+};
+
+// ----------------------------------------------------------------------------
+// wxToggleButton
+// ----------------------------------------------------------------------------
+
+class WXDLLIMPEXP_CORE wxToggleButton: public wxToggleButtonBase
+{
+public:
+    // construction/destruction
+    wxToggleButton(){ Init(); }
+
     wxToggleButton(wxWindow *parent,
              wxWindowID id,
              const wxString& label = wxEmptyString,
@@ -41,28 +60,56 @@
              const wxValidator& validator = wxDefaultValidator,
              const wxString& name = wxCheckBoxNameStr);
 
+    // Create the control
+    bool Create(wxWindow *parent,
+                wxWindowID id,
+                const wxString& label,
+                const wxPoint& pos = wxDefaultPosition,
+                const wxSize& size = wxDefaultSize, 
+                long style = 0,
+                const wxValidator& validator = wxDefaultValidator,
+                const wxString& name = wxCheckBoxNameStr);
+
+    // Get/set the value
+    void SetValue(bool state);
+    bool GetValue() const { return m_state; }
+
     virtual ~wxToggleButton();
 
-    virtual bool IsPressed() const { return m_isPressed || m_value; }
+    virtual bool IsPressed() const { return m_isPressed || m_state; }
 
     // wxToggleButton actions
     virtual void Toggle();
     virtual void Click();
 
-    // Get/set the value
-    void SetValue(bool state);
-    bool GetValue() const { return m_value; }
+    virtual bool PerformAction(const wxControlAction& action,
+                               long numArg = -1,
+                               const wxString& strArg = wxEmptyString);
 
+    static wxInputHandler *GetStdInputHandler(wxInputHandler *handlerDef);
+    virtual wxInputHandler *DoGetStdInputHandler(wxInputHandler *handlerDef)
+    {
+        return GetStdInputHandler(handlerDef);
+    }
+
 protected:
+    virtual bool DoDrawBackground(wxDC& dc);
+    virtual void DoDraw(wxControlRenderer *renderer);
     virtual wxBorder GetDefaultBorder() const { return wxBORDER_NONE; }
+    virtual wxSize DoGetBestSize() const;
 
-    // the current value
-    bool m_value;
+    // the label
+    wxBitmap m_bitmap;
+    wxCoord  m_marginBmpX,
+             m_marginBmpY;
+    // the current state
+    bool m_state;
+    bool m_isPressed;
 
-private:
-    // common part of all ctors
     void Init();
 
+private:
+
     DECLARE_DYNAMIC_CLASS(wxToggleButton)
 };
 
Index: src/univ/anybutton.cpp
===================================================================
--- src/univ/anybutton.cpp	(版本 0)
+++ src/univ/anybutton.cpp	(工作副本)
@@ -0,0 +1,87 @@
+/////////////////////////////////////////////////////////////////////////////
+// Name:        src/univ/anybutton.cpp
+// Purpose:     wxAnyButton
+// Author:      Vadim Zeitlin
+// Created:     2014-03-13 (extracted from button.cpp and tglbtn.cpp)
+// Copyright:   (c) 2014
+// Licence:     wxWindows licence
+/////////////////////////////////////////////////////////////////////////////
+
+// For compilers that support precompilation, includes "wx.h".
+#include "wx/wxprec.h"
+
+#ifdef __BORLANDC__
+    #pragma hdrstop
+#endif
+
+#ifdef wxHAS_ANY_BUTTON
+
+#include "wx/univ/anybutton.h"
+
+// ----------------------------------------------------------------------------
+// Common button functionality
+// ----------------------------------------------------------------------------
+
+void wxAnyButton::Init()
+{
+    m_isPressed = 
+    m_state = false;
+}
+
+// ----------------------------------------------------------------------------
+// size management
+// ----------------------------------------------------------------------------
+
+/* static */
+wxSize wxAnyButton::GetDefaultSize()
+{
+    static wxSize s_sizeBtn;
+
+    if ( s_sizeBtn.x == 0 )
+    {
+        wxScreenDC dc;
+
+        // this corresponds more or less to wxMSW standard in Win32 theme (see
+        // wxWin32Renderer::AdjustSize())
+//        s_sizeBtn.x = 8*dc.GetCharWidth();
+//        s_sizeBtn.y = (11*dc.GetCharHeight())/10 + 2;
+        // Otto Wyss, Patch 664399
+        s_sizeBtn.x = dc.GetCharWidth()*6 + 2;
+        s_sizeBtn.y = dc.GetCharHeight()*11/10 + 2;
+    }
+
+    return s_sizeBtn;
+}
+
+
+// ============================================================================
+// wxStdAnyButtonInputHandler
+// ============================================================================
+wxStdAnyButtonInputHandler::wxStdAnyButtonInputHandler(wxInputHandler *handler)
+                       : wxStdInputHandler(handler)
+{
+}
+
+bool wxStdAnyButtonInputHandler::HandleKey(wxInputConsumer *WXUNUSED(consumer), const wxKeyEvent& WXUNUSED(event), bool WXUNUSED(pressed))
+{
+    return false;
+}
+
+bool wxStdAnyButtonInputHandler::HandleMouse(wxInputConsumer *WXUNUSED(consumer), const wxMouseEvent& WXUNUSED(event))
+{
+    return false;
+}
+
+bool wxStdAnyButtonInputHandler::HandleMouseMove(wxInputConsumer *WXUNUSED(consumer), const wxMouseEvent& WXUNUSED(event))
+{
+    return false;
+}
+
+bool wxStdAnyButtonInputHandler::HandleFocus(wxInputConsumer * WXUNUSED(consumer), const wxFocusEvent& WXUNUSED(event))
+{
+    // buttons change appearance when they get/lose focus, so return true to
+    // refresh
+    return true;
+}
+
+#endif // wxHAS_ANY_BUTTON
Index: src/univ/button.cpp
===================================================================
--- src/univ/button.cpp	(版本 76148)
+++ src/univ/button.cpp	(工作副本)
@@ -33,40 +33,11 @@
 #endif
 
 #include "wx/univ/renderer.h"
-#include "wx/univ/inphand.h"
 #include "wx/univ/theme.h"
 #include "wx/univ/colschem.h"
 #include "wx/stockitem.h"
 
 // ----------------------------------------------------------------------------
-// wxStdButtonInputHandler: translates SPACE and ENTER keys and the left mouse
-// click into button press/release actions
-// ----------------------------------------------------------------------------
-
-class WXDLLEXPORT wxStdButtonInputHandler : public wxStdInputHandler
-{
-public:
-    wxStdButtonInputHandler(wxInputHandler *inphand);
-
-    virtual bool HandleKey(wxInputConsumer *consumer,
-                           const wxKeyEvent& event,
-                           bool pressed);
-    virtual bool HandleMouse(wxInputConsumer *consumer,
-                             const wxMouseEvent& event);
-    virtual bool HandleMouseMove(wxInputConsumer *consumer,
-                                 const wxMouseEvent& event);
-    virtual bool HandleFocus(wxInputConsumer *consumer,
-                             const wxFocusEvent& event);
-    virtual bool HandleActivation(wxInputConsumer *consumer, bool activated);
-
-private:
-    // the window (button) which has capture or NULL and the flag telling if
-    // the mouse is inside the button which captured it or not
-    wxWindow *m_winCapture;
-    bool      m_winHasMouse;
-};
-
-// ----------------------------------------------------------------------------
 // constants
 // ----------------------------------------------------------------------------
 
@@ -84,8 +55,7 @@
 
 void wxButton::Init()
 {
-    m_isPressed =
-    m_isDefault = false;
+    wxAnyButton::Init();
 }
 
 bool wxButton::Create(wxWindow *parent,
@@ -142,27 +112,6 @@
 // size management
 // ----------------------------------------------------------------------------
 
-/* static */
-wxSize wxButtonBase::GetDefaultSize()
-{
-    static wxSize s_sizeBtn;
-
-    if ( s_sizeBtn.x == 0 )
-    {
-        wxScreenDC dc;
-
-        // this corresponds more or less to wxMSW standard in Win32 theme (see
-        // wxWin32Renderer::AdjustSize())
-//        s_sizeBtn.x = 8*dc.GetCharWidth();
-//        s_sizeBtn.y = (11*dc.GetCharHeight())/10 + 2;
-        // Otto Wyss, Patch 664399
-        s_sizeBtn.x = dc.GetCharWidth()*10 + 2;
-        s_sizeBtn.y = dc.GetCharHeight()*11/10 + 2;
-    }
-
-    return s_sizeBtn;
-}
-
 wxSize wxButton::DoGetBestClientSize() const
 {
     wxClientDC dc(wxConstCast(this, wxButton));
@@ -342,7 +291,7 @@
 // ============================================================================
 
 wxStdButtonInputHandler::wxStdButtonInputHandler(wxInputHandler *handler)
-                       : wxStdInputHandler(handler)
+                       : wxStdAnyButtonInputHandler(handler)
 {
     m_winCapture = NULL;
     m_winHasMouse = false;
@@ -448,14 +397,6 @@
     return wxStdInputHandler::HandleMouseMove(consumer, event);
 }
 
-bool wxStdButtonInputHandler::HandleFocus(wxInputConsumer * WXUNUSED(consumer),
-                                          const wxFocusEvent& WXUNUSED(event))
-{
-    // buttons change appearance when they get/lose focus, so return true to
-    // refresh
-    return true;
-}
-
 bool wxStdButtonInputHandler::HandleActivation(wxInputConsumer *consumer,
                                                bool WXUNUSED(activated))
 {
@@ -464,5 +405,6 @@
     return wxStaticCast(consumer->GetInputWindow(), wxButton)->IsDefault();
 }
 
+
 #endif // wxUSE_BUTTON
 
Index: src/univ/tglbtn.cpp
===================================================================
--- src/univ/tglbtn.cpp	(版本 76148)
+++ src/univ/tglbtn.cpp	(工作副本)
@@ -2,13 +2,17 @@
 // Name:        src/univ/tglbtn.cpp
 // Purpose:     wxToggleButton
 // Author:      Vadim Zeitlin
-// Modified by: David Bjorkevik
+// Modified by: 孙波翔(Sun Boxiang)
 // Created:     16.05.06
-// Copyright:   (c) 2000 SciTech Software, Inc. (www.scitechsoft.com)
+// Copyright:   (c) 2014 孙波翔(Sun Boxiang)
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
 
 #include "wx/wxprec.h"
+#include "wx/univ/renderer.h"
+#include "wx/univ/inphand.h"
+#include "wx/univ/theme.h"
+#include "wx/univ/colschem.h"
 
 #ifdef __BORLANDC__
     #pragma hdrstop
@@ -18,40 +22,84 @@
 
 #include "wx/tglbtn.h"
 
+
+// ============================================================================
+// implementation
+// ============================================================================
+
+// ----------------------------------------------------------------------------
+// macros
+// ----------------------------------------------------------------------------
 wxDEFINE_EVENT( wxEVT_TOGGLEBUTTON, wxCommandEvent );
 
-IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxButton)
+// ------------------------------------------------------------------------
+// wxToggleButton
+// ------------------------------------------------------------------------
 
-wxToggleButton::wxToggleButton()
+IMPLEMENT_DYNAMIC_CLASS(wxToggleButton, wxToggleButtonBase)
+
+void wxToggleButton::Init()
 {
-    Init();
+    wxAnyButton::Init();
 }
 
 wxToggleButton::wxToggleButton(wxWindow *parent,
-                               wxWindowID id,
-                               const wxBitmap& bitmap,
-                               const wxString& label,
-                               const wxPoint& pos,
-                               const wxSize& size,
-                               long style,
-                               const wxValidator& validator,
-                               const wxString& name)
+                       wxWindowID id,
+                       const wxString& label,
+                       const wxPoint& pos,
+                       const wxSize& size,
+                       long style,
+                       const wxValidator& validator,
+                       const wxString& name)
 {
     Init();
-    Create(parent, id, bitmap, label, pos, size, style, validator, name);
+    Create(parent, id, label, pos, size, style, validator, name);
 }
 
-wxToggleButton::wxToggleButton(wxWindow *parent,
-                               wxWindowID id,
-                               const wxString& label,
-                               const wxPoint& pos,
-                               const wxSize& size,
-                               long style,
-                               const wxValidator& validator,
-                               const wxString& name)
+bool wxToggleButton::Create(wxWindow *parent,
+                            wxWindowID id,
+                            const wxString& lbl,
+                            const wxPoint& pos,
+                            const wxSize& size, long style,
+                            const wxValidator& validator,
+                            const wxString& name)
 {
     Init();
-    Create(parent, id, label, pos, size, style, validator, name);
+    wxString label(lbl);
+    if (label.empty() && wxIsStockID(id))
+        label = wxGetStockLabel(id);
+
+    long ctrl_style = style & ~wxBU_ALIGN_MASK;
+    ctrl_style = ctrl_style & ~wxALIGN_MASK;
+
+    if((style & wxBU_RIGHT) == wxBU_RIGHT)
+        ctrl_style |= wxALIGN_RIGHT;
+    else if((style & wxBU_LEFT) == wxBU_LEFT)
+        ctrl_style |= wxALIGN_LEFT;
+    else
+        ctrl_style |= wxALIGN_CENTRE_HORIZONTAL;
+
+    if((style & wxBU_TOP) == wxBU_TOP)
+        ctrl_style |= wxALIGN_TOP;
+    else if((style & wxBU_BOTTOM) == wxBU_BOTTOM)
+        ctrl_style |= wxALIGN_BOTTOM;
+    else
+        ctrl_style |= wxALIGN_CENTRE_VERTICAL;
+
+    //wxDefaultSize seems has bug, so here set the size by hardcode
+    wxSize size1;
+    if (size == wxDefaultSize)
+	    size1 = wxAnyButton::GetDefaultSize();
+    else
+        size1 = wxDefaultSize;
+    if ( !wxControl::Create(parent, id, pos, size1, ctrl_style, validator, name) )
+    {
+        wxFAIL_MSG(wxT("wxToggleButton creation failed"));
+        return false;
+    } 
+    wxAnyButton::SetLabel(label);
+    CreateInputHandler(wxINP_HANDLER_BUTTON);
+    return true;
 }
 
 wxToggleButton::~wxToggleButton()
@@ -58,40 +106,165 @@
 {
 }
 
-void wxToggleButton::Init()
+// ----------------------------------------------------------------------------
+// drawing
+// ----------------------------------------------------------------------------
+
+void wxToggleButton::DoDraw(wxControlRenderer *renderer)
 {
-    m_isPressed = false;
-    m_value = false;
+    renderer->DrawButtonBorder();
+    renderer->DrawButtonLabel(m_bitmap, m_marginBmpX, m_marginBmpY);
 }
 
+bool wxToggleButton::DoDrawBackground(wxDC& dc)
+{
+
+    wxRect rect;
+    wxSize size = GetSize();
+    rect.width = size.x;
+    rect.height = size.y;
+
+    m_renderer->DrawButtonSurface(dc, wxTHEME_BG_COLOUR(this),
+                                      rect, GetStateFlags());
+
+    return true;
+}
+// ----------------------------------------------------------------------------
+// size management
+// ----------------------------------------------------------------------------
+
+// Get the "best" size for this control.
+wxSize wxToggleButton::DoGetBestSize() const
+{
+    wxClientDC dc(wxConstCast(this, wxToggleButton));
+    wxCoord width, height;
+    dc.GetMultiLineTextExtent(GetLabel(), &width, &height);
+
+    return wxSize(width, height);
+}
+// ----------------------------------------------------------------------------
+// input processing
+// ----------------------------------------------------------------------------
+
+
 void wxToggleButton::Toggle()
 {
     if ( m_isPressed )
-        Release();
+        m_isPressed = false;
     else
-        Press();
+        m_isPressed = true;
+    Refresh();
 
-    if ( !m_isPressed )
-    {
-        // releasing button after it had been pressed generates a click event
-        // and toggles value
-        m_value = !m_value;
-        Click();
-    }
+    m_state = !m_state;
+    Click();
 }
 
+
 void wxToggleButton::Click()
 {
     wxCommandEvent event(wxEVT_TOGGLEBUTTON, GetId());
     InitCommandEvent(event);
-    event.SetInt(GetValue());
     Command(event);
 }
 
+bool wxToggleButton::PerformAction(const wxControlAction& action,
+                             long numArg,
+                             const wxString& strArg)
+{
+    if ( action == wxACTION_BUTTON_TOGGLE )
+        Toggle();
+    else
+        return wxControl::PerformAction(action, numArg, strArg);
+
+    return true;
+}
+
+/* static */
+wxInputHandler *wxToggleButton::GetStdInputHandler(wxInputHandler *handlerDef)
+{
+    static wxStdToggleButtonInputHandler s_handlerBtn(handlerDef);
+
+    return &s_handlerBtn;
+}
+
 void wxToggleButton::SetValue(bool state)
 {
-    m_value = state;
+    m_state = state;
     Refresh();
 }
 
+
+// ============================================================================
+// wxStdToggleButtonInputHandler
+// ============================================================================
+
+wxStdToggleButtonInputHandler::wxStdToggleButtonInputHandler(wxInputHandler *handler)
+                       : wxStdAnyButtonInputHandler(handler)
+{
+    m_winCapture = NULL;
+    m_winHasMouse = false;
+}
+
+bool wxStdToggleButtonInputHandler::HandleKey(wxInputConsumer *consumer,
+                                        const wxKeyEvent& event,
+                                        bool pressed)
+{
+    int keycode = event.GetKeyCode();
+    if ( pressed && (keycode == WXK_SPACE || keycode == WXK_RETURN ))
+    {
+        consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
+
+        return true;
+    }
+
+    return wxStdInputHandler::HandleKey(consumer, event, pressed);
+}
+
+bool wxStdToggleButtonInputHandler::HandleMouse(wxInputConsumer *consumer,
+                                          const wxMouseEvent& event)
+{
+    // the button has 2 states: toggled and untoggled with the following
+    // transitions between them:
+    //
+    //      untoggled -> left down -> capture mouse and go to toggled state
+    //      toggled -> left down -> capture mouse and go to untoggled state
+    //      left up well do nothing
+    //
+    // the other mouse buttons are ignored
+    if ( event.Button(1) )
+    {
+        if ( event.LeftDown() || event.LeftDClick() )
+        {
+            m_winCapture = consumer->GetInputWindow();
+            m_winCapture->CaptureMouse();
+            m_winHasMouse = true;
+
+            consumer->PerformAction(wxACTION_BUTTON_TOGGLE);
+
+            return true;
+        }
+        else if ( event.LeftUp() )
+        {
+            if ( m_winCapture )
+            {
+                m_winCapture->ReleaseMouse();
+                m_winCapture = NULL;
+            }
+
+            return true;
+        }
+        //else: don't do anything special about the double click
+    }
+
+    return wxStdInputHandler::HandleMouse(consumer, event);
+}
+
+bool wxStdToggleButtonInputHandler::HandleActivation(wxInputConsumer *consumer,
+                                               bool WXUNUSED(activated))
+{
+    // the togglebutton changes appearance when the app is [de]activated, so
+    // return true to refresh
+    return wxStaticCast(consumer->GetInputWindow(), wxToggleButton)->IsDefault();
+}
+
 #endif // wxUSE_TOGGLEBTN

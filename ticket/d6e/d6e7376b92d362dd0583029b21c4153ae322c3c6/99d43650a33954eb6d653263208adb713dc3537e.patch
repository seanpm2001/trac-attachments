diff -cr wxGTK-2.8.10/include/wx/richtext/richtextbuffer.h wxGTK-2.8.10-new//include/wx/richtext/richtextbuffer.h
*** wxGTK-2.8.10/include/wx/richtext/richtextbuffer.h	2009-03-06 13:17:42.000000000 +0100
--- wxGTK-2.8.10-new//include/wx/richtext/richtextbuffer.h	2010-04-23 23:20:03.000000000 +0200
***************
*** 881,888 ****
  // Accessors
  
      /// Get the children
!     wxRichTextObjectList& GetChildren() { return m_children; }
!     const wxRichTextObjectList& GetChildren() const { return m_children; }
  
      /// Get the child count
      size_t GetChildCount() const ;
--- 881,888 ----
  // Accessors
  
      /// Get the children
!     wxRichTextObjectList& GetChildren() { return (!m_cached)?m_children:m_children_cached; }
!     const wxRichTextObjectList& GetChildren() const { return (!m_cached)?m_children:m_children_cached; }
  
      /// Get the child count
      size_t GetChildCount() const ;
***************
*** 900,905 ****
--- 900,907 ----
      /// Returns true if the buffer is empty
      virtual bool IsEmpty() const { return GetChildCount() == 0; }
  
+     virtual void EnableCached(bool enable = true);
+     void SetCached(wxRichTextObjectList::compatibility_iterator first, wxRichTextObjectList::compatibility_iterator last);
  // Operations
  
      /// Copy
***************
*** 925,930 ****
--- 927,934 ----
  
  protected:
      wxRichTextObjectList    m_children;
+     wxRichTextObjectList    m_children_cached;
+     bool                    m_cached;
  };
  
  /*!
diff -cr wxGTK-2.8.10/include/wx/richtext/richtextctrl.h wxGTK-2.8.10-new//include/wx/richtext/richtextctrl.h
*** wxGTK-2.8.10/include/wx/richtext/richtextctrl.h	2009-03-06 13:17:42.000000000 +0100
--- wxGTK-2.8.10-new//include/wx/richtext/richtextctrl.h	2010-04-23 23:20:03.000000000 +0200
***************
*** 791,796 ****
--- 791,799 ----
      /// Get the first visible point in the window
      wxPoint GetFirstVisiblePoint() const;
  
+     wxRichTextObjectList::compatibility_iterator GetFirstVisibleObject() { return m_firstVisibleObject; }
+     wxRichTextObjectList::compatibility_iterator GetLastVisibleObject() { return m_lastVisibleObject; }
+ 
  // Implementation
  
       /// Font names take a long time to retrieve, so cache them (on demand)
***************
*** 864,869 ****
--- 867,877 ----
      wxCursor                m_textCursor;
      wxCursor                m_urlCursor;
  
+     /// Save the iterator of first and last visible object
+     wxRichTextObjectList::compatibility_iterator m_firstVisibleObject;
+     wxRichTextObjectList::compatibility_iterator m_lastVisibleObject;
+     int                    m_screenOffset;
+ 
      static wxArrayString    sm_availableFontNames;
  };
  
***************
*** 919,924 ****
--- 927,959 ----
      DECLARE_DYNAMIC_CLASS_NO_ASSIGN(wxRichTextEvent)
  };
  
+ class WXDLLIMPEXP_RICHTEXT wxRichTextObjectEvent : public wxNotifyEvent
+ {
+ private:
+     wxRichTextObject *m_object;
+ public:
+     wxRichTextObjectEvent(wxEventType commandType = wxEVT_NULL, wxRichTextObject * object = NULL): wxNotifyEvent(commandType)
+     {
+         m_object = object;
+     }
+ 
+     wxRichTextObjectEvent(const wxRichTextObjectEvent &event)
+     {
+         this->m_eventType = event.m_eventType;
+         this->m_object = event.m_object;
+     }
+ 
+     wxRichTextObject * GetObject()
+     {
+         return m_object;
+     }
+ 
+     virtual wxEvent *Clone() const
+     {
+         return new wxRichTextObjectEvent(*this);
+     }
+ };
+ 
  /*!
   * wxRichTextCtrl event macros
   */
***************
*** 945,953 ****
--- 980,992 ----
  #if wxABI_VERSION >= 20808
      DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_RICHTEXT, wxEVT_COMMAND_RICHTEXT_BUFFER_RESET, 2617)
  #endif
+ 
+     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_RICHTEXT, wxEVT_COMMAND_RICHTEXT_OBJECT_LEFT_CLICK, 2618)
+     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_RICHTEXT, wxEVT_COMMAND_RICHTEXT_OBJECT_RIGHT_CLICK, 2619)
  END_DECLARE_EVENT_TYPES()
  
  typedef void (wxEvtHandler::*wxRichTextEventFunction)(wxRichTextEvent&);
+ typedef void (wxEvtHandler::*wxRichTextObjectEventFunction)(wxRichTextObjectEvent&);
  
  #define wxRichTextEventHandler(func) \
      (wxObjectEventFunction)(wxEventFunction)wxStaticCastEvent(wxRichTextEventFunction, &func)
***************
*** 971,976 ****
--- 1010,1019 ----
  #define EVT_RICHTEXT_SELECTION_CHANGED(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxRichTextEventFunction, & fn ), NULL ),
  #define EVT_RICHTEXT_BUFFER_RESET(id, fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_RICHTEXT_BUFFER_RESET, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxRichTextEventFunction, & fn ), NULL ),
  
+ #define EVT_RICHTEXT_OBJECT_LEFT_CLICK_EVENT(fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_RICHTEXT_OBJECT_LEFT_CLICK, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) wxStaticCastEvent( wxRichTextObjectEventFunction, & fn ), (wxObject *) NULL ),
+ #define EVT_RICHTEXT_OBJECT_RIGHT_CLICK_EVENT(fn) DECLARE_EVENT_TABLE_ENTRY( wxEVT_COMMAND_RICHTEXT_OBJECT_RIGHT_CLICK, wxID_ANY, wxID_ANY, (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) wxStaticCastEvent( wxRichTextObjectEventFunction, & fn ), (wxObject *) NULL ),
+ 
+ 
  #endif
      // wxUSE_RICHTEXT
  
diff -cr wxGTK-2.8.10/src/richtext/richtextbuffer.cpp wxGTK-2.8.10-new//src/richtext/richtextbuffer.cpp
*** wxGTK-2.8.10/src/richtext/richtextbuffer.cpp	2009-03-06 13:17:41.000000000 +0100
--- wxGTK-2.8.10-new//src/richtext/richtextbuffer.cpp	2010-04-23 23:20:02.000000000 +0200
***************
*** 252,257 ****
--- 252,258 ----
  wxRichTextCompositeObject::wxRichTextCompositeObject(wxRichTextObject* parent):
      wxRichTextObject(parent)
  {
+     m_cached = false;
  }
  
  wxRichTextCompositeObject::~wxRichTextCompositeObject()
***************
*** 262,278 ****
  /// Get the nth child
  wxRichTextObject* wxRichTextCompositeObject::GetChild(size_t n) const
  {
!     wxASSERT ( n < m_children.GetCount() );
  
!     return m_children.Item(n)->GetData();
  }
  
  /// Append a child, returning the position
  size_t wxRichTextCompositeObject::AppendChild(wxRichTextObject* child)
  {
!     m_children.Append(child);
      child->SetParent(this);
!     return m_children.GetCount() - 1;
  }
  
  /// Insert the child in front of the given object, or at the beginning
--- 263,288 ----
  /// Get the nth child
  wxRichTextObject* wxRichTextCompositeObject::GetChild(size_t n) const
  {
!     if(!m_cached)
!     {
!         wxASSERT ( n < GetChildren().GetCount() );
  
!         return GetChildren().Item(n)->GetData();
!     }
!     else
!     {
!         wxASSERT ( n < m_children_cached.GetCount() );
! 
!         return m_children_cached.Item(n)->GetData();
!     }
  }
  
  /// Append a child, returning the position
  size_t wxRichTextCompositeObject::AppendChild(wxRichTextObject* child)
  {
!     GetChildren().Append(child);
      child->SetParent(this);
!     return GetChildren().GetCount() - 1;
  }
  
  /// Insert the child in front of the given object, or at the beginning
***************
*** 280,290 ****
  {
      if (inFrontOf)
      {
!         wxRichTextObjectList::compatibility_iterator node = m_children.Find(inFrontOf);
!         m_children.Insert(node, child);
      }
      else
!         m_children.Insert(child);
      child->SetParent(this);
  
      return true;
--- 290,300 ----
  {
      if (inFrontOf)
      {
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().Find(inFrontOf);
!         GetChildren().Insert(node, child);
      }
      else
!         GetChildren().Insert(child);
      child->SetParent(this);
  
      return true;
***************
*** 293,303 ****
  /// Delete the child
  bool wxRichTextCompositeObject::RemoveChild(wxRichTextObject* child, bool deleteChild)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.Find(child);
      if (node)
      {
          wxRichTextObject* obj = node->GetData();
!         m_children.Erase(node);
          if (deleteChild)
              delete obj;
  
--- 303,313 ----
  /// Delete the child
  bool wxRichTextCompositeObject::RemoveChild(wxRichTextObject* child, bool deleteChild)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().Find(child);
      if (node)
      {
          wxRichTextObject* obj = node->GetData();
!         GetChildren().Erase(node);
          if (deleteChild)
              delete obj;
  
***************
*** 309,315 ****
  /// Delete all children
  bool wxRichTextCompositeObject::DeleteChildren()
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObjectList::compatibility_iterator oldNode = node;
--- 319,325 ----
  /// Delete all children
  bool wxRichTextCompositeObject::DeleteChildren()
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObjectList::compatibility_iterator oldNode = node;
***************
*** 318,324 ****
          child->Dereference(); // Only delete if reference count is zero
  
          node = node->GetNext();
!         m_children.Erase(oldNode);
      }
  
      return true;
--- 328,334 ----
          child->Dereference(); // Only delete if reference count is zero
  
          node = node->GetNext();
!         GetChildren().Erase(oldNode);
      }
  
      return true;
***************
*** 327,333 ****
  /// Get the child count
  size_t wxRichTextCompositeObject::GetChildCount() const
  {
!     return m_children.GetCount();
  }
  
  /// Copy
--- 337,346 ----
  /// Get the child count
  size_t wxRichTextCompositeObject::GetChildCount() const
  {
!     if(!m_cached)
!         return GetChildren().GetCount();
!     else
!         return m_children_cached.GetCount();
  }
  
  /// Copy
***************
*** 337,349 ****
  
      DeleteChildren();
  
!     wxRichTextObjectList::compatibility_iterator node = obj.m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
          wxRichTextObject* newChild = child->Clone();
          newChild->SetParent(this);
!         m_children.Append(newChild);
  
          node = node->GetNext();
      }
--- 350,362 ----
  
      DeleteChildren();
  
!     wxRichTextObjectList::compatibility_iterator node = obj.GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
          wxRichTextObject* newChild = child->Clone();
          newChild->SetParent(this);
!         GetChildren().Append(newChild);
  
          node = node->GetNext();
      }
***************
*** 353,359 ****
  /// information about position
  int wxRichTextCompositeObject::HitTest(wxDC& dc, const wxPoint& pt, long& textPosition)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 366,373 ----
  /// information about position
  int wxRichTextCompositeObject::HitTest(wxDC& dc, const wxPoint& pt, long& textPosition)
  {
!     wxRichTextObjectList::compatibility_iterator node;
! 
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 372,378 ****
  /// Finds the absolute position and row height for the given character position
  bool wxRichTextCompositeObject::FindPosition(wxDC& dc, long index, wxPoint& pt, int* height, bool forceLineStart)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 386,392 ----
  /// Finds the absolute position and row height for the given character position
  bool wxRichTextCompositeObject::FindPosition(wxDC& dc, long index, wxPoint& pt, int* height, bool forceLineStart)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 392,398 ****
      long current = start;
      long lastEnd = current;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 406,412 ----
      long current = start;
      long lastEnd = current;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 409,415 ****
      end = lastEnd;
  
      // An object with no children has zero length
!     if (m_children.GetCount() == 0)
          end --;
  
      m_range.SetRange(start, end);
--- 423,429 ----
      end = lastEnd;
  
      // An object with no children has zero length
!     if (GetChildren().GetCount() == 0)
          end --;
  
      m_range.SetRange(start, end);
***************
*** 418,424 ****
  /// Delete range from layout.
  bool wxRichTextCompositeObject::DeleteRange(const wxRichTextRange& range)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
  
      while (node)
      {
--- 432,438 ----
  /// Delete range from layout.
  bool wxRichTextCompositeObject::DeleteRange(const wxRichTextRange& range)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
  
      while (node)
      {
***************
*** 458,464 ****
  wxString wxRichTextCompositeObject::GetTextForRange(const wxRichTextRange& range) const
  {
      wxString text;
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 472,478 ----
  wxString wxRichTextCompositeObject::GetTextForRange(const wxRichTextRange& range) const
  {
      wxString text;
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 477,486 ****
      return text;
  }
  
  /// Recursively merge all pieces that can be merged.
  bool wxRichTextCompositeObject::Defragment()
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 491,521 ----
      return text;
  }
  
+ // Enable the cached children
+ void wxRichTextCompositeObject::EnableCached(bool enable)
+ {
+     m_cached = enable;
+ }
+ 
+ // Set the cached children range
+ void wxRichTextCompositeObject::SetCached(wxRichTextObjectList::compatibility_iterator first, wxRichTextObjectList::compatibility_iterator last)
+ {
+     m_children_cached.clear();
+     while( first )
+     {
+         m_children_cached.Append(first->GetData());
+ 
+         if( first == last )
+             break;
+ 
+         first = first->GetNext();
+     }
+ }
+ 
  /// Recursively merge all pieces that can be merged.
  bool wxRichTextCompositeObject::Defragment()
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 494,500 ****
              if (child->CanMerge(nextChild) && child->Merge(nextChild))
              {
                  nextChild->Dereference();
!                 m_children.Erase(node->GetNext());
  
                  // Don't set node -- we'll see if we can merge again with the next
                  // child.
--- 529,535 ----
              if (child->CanMerge(nextChild) && child->Merge(nextChild))
              {
                  nextChild->Dereference();
!                 GetChildren().Erase(node->GetNext());
  
                  // Don't set node -- we'll see if we can merge again with the next
                  // child.
***************
*** 514,520 ****
  /// Dump to output stream for debugging
  void wxRichTextCompositeObject::Dump(wxTextOutputStream& stream)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 549,555 ----
  /// Dump to output stream for debugging
  void wxRichTextCompositeObject::Dump(wxTextOutputStream& stream)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 539,545 ****
  /// Draw the item
  bool wxRichTextBox::Draw(wxDC& dc, const wxRichTextRange& range, const wxRichTextRange& selectionRange, const wxRect& WXUNUSED(rect), int descent, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 574,580 ----
  /// Draw the item
  bool wxRichTextBox::Draw(wxDC& dc, const wxRichTextRange& range, const wxRichTextRange& selectionRange, const wxRect& WXUNUSED(rect), int descent, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 555,561 ****
  /// Lay the item out
  bool wxRichTextBox::Layout(wxDC& dc, const wxRect& rect, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 590,596 ----
  /// Lay the item out
  bool wxRichTextBox::Layout(wxDC& dc, const wxRect& rect, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 570,576 ****
  /// Get/set the size for the given range. Assume only has one child.
  bool wxRichTextBox::GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, int flags, wxPoint position) const
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      if (node)
      {
          wxRichTextObject* child = node->GetData();
--- 605,611 ----
  /// Get/set the size for the given range. Assume only has one child.
  bool wxRichTextBox::GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, int flags, wxPoint position) const
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      if (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 619,625 ****
  /// Draw the item
  bool wxRichTextParagraphLayoutBox::Draw(wxDC& dc, const wxRichTextRange& range, const wxRichTextRange& selectionRange, const wxRect& rect, int descent, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 654,661 ----
  /// Draw the item
  bool wxRichTextParagraphLayoutBox::Draw(wxDC& dc, const wxRichTextRange& range, const wxRichTextRange& selectionRange, const wxRect& rect, int descent, int style)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
! 
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 684,690 ****
  
      int maxWidth = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
  
      bool layoutAll = true;
  
--- 720,726 ----
  
      int maxWidth = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
  
      bool layoutAll = true;
  
***************
*** 702,708 ****
          wxRichTextParagraph* firstParagraph = GetParagraphAtPosition(invalidRange.GetStart());
          if (firstParagraph)
          {
!             wxRichTextObjectList::compatibility_iterator firstNode = m_children.Find(firstParagraph);
              wxRichTextObjectList::compatibility_iterator previousNode;
              if ( firstNode )
                  previousNode = firstNode->GetPrevious();
--- 738,744 ----
          wxRichTextParagraph* firstParagraph = GetParagraphAtPosition(invalidRange.GetStart());
          if (firstParagraph)
          {
!             wxRichTextObjectList::compatibility_iterator firstNode = GetChildren().Find(firstParagraph);
              wxRichTextObjectList::compatibility_iterator previousNode;
              if ( firstNode )
                  previousNode = firstNode->GetPrevious();
***************
*** 807,813 ****
      wxRichTextObjectList::compatibility_iterator endPara = wxRichTextObjectList::compatibility_iterator();
  
      // First find the first paragraph whose starting position is within the range.
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          // child is a paragraph
--- 843,849 ----
      wxRichTextObjectList::compatibility_iterator endPara = wxRichTextObjectList::compatibility_iterator();
  
      // First find the first paragraph whose starting position is within the range.
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          // child is a paragraph
***************
*** 824,830 ****
      }
  
      // Next find the last paragraph containing part of the range
!     node = m_children.GetFirst();
      while (node)
      {
          // child is a paragraph
--- 860,866 ----
      }
  
      // Next find the last paragraph containing part of the range
!     node = GetChildren().GetFirst();
      while (node)
      {
          // child is a paragraph
***************
*** 877,884 ****
      if (caretPosition)
          pos ++;
  
!     // First find the first paragraph whose starting position is within the range.
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          // child is a paragraph
--- 913,920 ----
      if (caretPosition)
          pos ++;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
! 
      while (node)
      {
          // child is a paragraph
***************
*** 903,910 ****
      if (caretPosition)
          pos ++;
  
!     // First find the first paragraph whose starting position is within the range.
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* obj = (wxRichTextObject*) node->GetData();
--- 939,946 ----
      if (caretPosition)
          pos ++;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
! 
      while (node)
      {
          wxRichTextObject* obj = (wxRichTextObject*) node->GetData();
***************
*** 945,951 ****
  /// Get the line at the given y pixel position, or the last line.
  wxRichTextLine* wxRichTextParagraphLayoutBox::GetLineAtYPosition(int y) const
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 981,987 ----
  /// Get the line at the given y pixel position, or the last line.
  wxRichTextLine* wxRichTextParagraphLayoutBox::GetLineAtYPosition(int y) const
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 980,986 ****
  {
      int count = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 1016,1022 ----
  {
      int count = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 1171,1177 ****
      {
          wxTextAttrEx originalAttr = para->GetAttributes();
  
!         wxRichTextObjectList::compatibility_iterator node = m_children.Find(para);
  
          // Now split at this position, returning the object to insert the new
          // ones in front of.
--- 1207,1213 ----
      {
          wxTextAttrEx originalAttr = para->GetAttributes();
  
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().Find(para);
  
          // Now split at this position, returning the object to insert the new
          // ones in front of.
***************
*** 1419,1425 ****
  
      int lineCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 1455,1461 ----
  
      int lineCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 1467,1473 ****
  {
      int lineCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 1503,1509 ----
  {
      int lineCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 1501,1507 ****
  /// Delete range from layout.
  bool wxRichTextParagraphLayoutBox::DeleteRange(const wxRichTextRange& range)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
  
      wxRichTextParagraph* firstPara = NULL;
      while (node)
--- 1537,1543 ----
  /// Delete range from layout.
  bool wxRichTextParagraphLayoutBox::DeleteRange(const wxRichTextRange& range)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
  
      wxRichTextParagraph* firstPara = NULL;
      while (node)
***************
*** 1608,1614 ****
  {
      int lineCount = 0;
      wxString text;
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 1644,1650 ----
  {
      int lineCount = 0;
      wxString text;
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 1686,1692 ****
      if (para)
      {
          int count = 0;
!         wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
          while (node)
          {
              wxRichTextObject* child = node->GetData();
--- 1722,1728 ----
      if (para)
      {
          int count = 0;
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
          while (node)
          {
              wxRichTextObject* child = node->GetData();
***************
*** 1781,1787 ****
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 1817,1823 ----
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 2976,2982 ****
      int foundCount = 0;
      int matchingCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 3012,3018 ----
      int foundCount = 0;
      int matchingCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 3030,3036 ****
      int foundCount = 0;
      int matchingCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 3066,3072 ----
      int foundCount = 0;
      int matchingCount = 0;
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 3161,3167 ****
          }
      }
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 3197,3203 ----
          }
      }
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 3264,3270 ****
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 3300,3306 ----
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 3426,3432 ****
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
--- 3462,3468 ----
          action->SetPosition(GetRichTextCtrl()->GetCaretPosition());
      }
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextParagraph* para = wxDynamicCast(node->GetData(), wxRichTextParagraph);
***************
*** 3767,3773 ****
              int maxDescent = line->GetDescent();
  
              // Loop through objects until we get to the one within range
!             wxRichTextObjectList::compatibility_iterator node2 = m_children.GetFirst();
  
              int i = 0;
              while (node2)
--- 3803,3809 ----
              int maxDescent = line->GetDescent();
  
              // Loop through objects until we get to the one within range
!             wxRichTextObjectList::compatibility_iterator node2 = GetChildren().GetFirst();
  
              int i = 0;
              while (node2)
***************
*** 3904,3910 ****
      GetRangeSize(GetRange(), paraSize, paraDescent, dc, wxRICHTEXT_UNFORMATTED|wxRICHTEXT_CACHE_SIZE, wxPoint(0,0));
      g_UseGlobalPartialTextExtents = false;
  #else
!     node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 3940,3946 ----
      GetRangeSize(GetRange(), paraSize, paraDescent, dc, wxRICHTEXT_UNFORMATTED|wxRICHTEXT_CACHE_SIZE, wxPoint(0,0));
      g_UseGlobalPartialTextExtents = false;
  #else
!     node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 3923,3929 ****
      // find the child corresponding to the start position of the string, and
      // continue.
  
!     node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 3959,3965 ----
      // find the child corresponding to the start position of the string, and
      // continue.
  
!     node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 4049,4055 ****
              // May need to set the node back to a previous one, due to searching back in wrapping
              wxRichTextObject* childAfterWrapPosition = FindObjectAtPosition(wrapPosition+1);
              if (childAfterWrapPosition)
!                 node = m_children.Find(childAfterWrapPosition);
              else
                  node = node->GetNext();
          }
--- 4085,4091 ----
              // May need to set the node back to a previous one, due to searching back in wrapping
              wxRichTextObject* childAfterWrapPosition = FindObjectAtPosition(wrapPosition+1);
              if (childAfterWrapPosition)
!                 node = GetChildren().Find(childAfterWrapPosition);
              else
                  node = node->GetNext();
          }
***************
*** 4123,4129 ****
          wxRichTextRange lineRange = line->GetAbsoluteRange();
  
          // Loop through objects until we get to the one within range
!         wxRichTextObjectList::compatibility_iterator node2 = m_children.GetFirst();
  
          while (node2)
          {
--- 4159,4165 ----
          wxRichTextRange lineRange = line->GetAbsoluteRange();
  
          // Loop through objects until we get to the one within range
!         wxRichTextObjectList::compatibility_iterator node2 = GetChildren().GetFirst();
  
          while (node2)
          {
***************
*** 4202,4208 ****
      wxRichTextObject* childToUse = NULL;
      wxRichTextObjectList::compatibility_iterator nodeToUse = wxRichTextObjectList::compatibility_iterator();
  
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 4238,4244 ----
      wxRichTextObject* childToUse = NULL;
      wxRichTextObjectList::compatibility_iterator nodeToUse = wxRichTextObjectList::compatibility_iterator();
  
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 4291,4297 ****
  
          wxSize sz;
  
!         wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
          while (node)
          {
              wxRichTextObject* child = node->GetData();
--- 4327,4333 ----
  
          wxSize sz;
  
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
          while (node)
          {
              wxRichTextObject* child = node->GetData();
***************
*** 4353,4359 ****
              {
                  wxSize lineSize;
  
!                 wxRichTextObjectList::compatibility_iterator node2 = m_children.GetFirst();
                  while (node2)
                  {
                      wxRichTextObject* child = node2->GetData();
--- 4389,4395 ----
              {
                  wxSize lineSize;
  
!                 wxRichTextObjectList::compatibility_iterator node2 = GetChildren().GetFirst();
                  while (node2)
                  {
                      wxRichTextObject* child = node2->GetData();
***************
*** 4593,4599 ****
  /// the previous object, or NULL if inserting at beginning.
  wxRichTextObject* wxRichTextParagraph::SplitAt(long pos, wxRichTextObject** previousObject)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 4629,4635 ----
  /// the previous object, or NULL if inserting at beginning.
  wxRichTextObject* wxRichTextParagraph::SplitAt(long pos, wxRichTextObject** previousObject)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 4627,4635 ****
              {
                  // Insert the new object after 'child'
                  if (node->GetNext())
!                     m_children.Insert(node->GetNext(), newObject);
                  else
!                     m_children.Append(newObject);
                  newObject->SetParent(this);
  
                  if (previousObject)
--- 4663,4671 ----
              {
                  // Insert the new object after 'child'
                  if (node->GetNext())
!                     GetChildren().Insert(node->GetNext(), newObject);
                  else
!                     GetChildren().Append(newObject);
                  newObject->SetParent(this);
  
                  if (previousObject)
***************
*** 4649,4655 ****
  /// Move content to a list from obj on
  void wxRichTextParagraph::MoveToList(wxRichTextObject* obj, wxList& list)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.Find(obj);
      while (node)
      {
          wxRichTextObject* child = node->GetData();
--- 4685,4691 ----
  /// Move content to a list from obj on
  void wxRichTextParagraph::MoveToList(wxRichTextObject* obj, wxList& list)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().Find(obj);
      while (node)
      {
          wxRichTextObject* child = node->GetData();
***************
*** 4659,4665 ****
  
          node = node->GetNext();
  
!         m_children.DeleteNode(oldNode);
      }
  }
  
--- 4695,4701 ----
  
          node = node->GetNext();
  
!         GetChildren().DeleteNode(oldNode);
      }
  }
  
***************
*** 4686,4692 ****
  /// Find the object at the given position
  wxRichTextObject* wxRichTextParagraph::FindObjectAtPosition(long position)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* obj = node->GetData();
--- 4722,4728 ----
  /// Find the object at the given position
  wxRichTextObject* wxRichTextParagraph::FindObjectAtPosition(long position)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* obj = node->GetData();
***************
*** 4706,4712 ****
  
      if (fromStart)
      {
!         wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
          while (node)
          {
              wxRichTextObject* obj = node->GetData();
--- 4742,4748 ----
  
      if (fromStart)
      {
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
          while (node)
          {
              wxRichTextObject* obj = node->GetData();
***************
*** 4728,4734 ****
      }
      else
      {
!         wxRichTextObjectList::compatibility_iterator node = m_children.GetLast();
          while (node)
          {
              wxRichTextObject* obj = node->GetData();
--- 4764,4770 ----
      }
      else
      {
!         wxRichTextObjectList::compatibility_iterator node = GetChildren().GetLast();
          while (node)
          {
              wxRichTextObject* obj = node->GetData();
***************
*** 5016,5022 ****
  /// Get the first position from pos that has a line break character.
  long wxRichTextParagraph::GetFirstLineBreakPosition(long pos)
  {
!     wxRichTextObjectList::compatibility_iterator node = m_children.GetFirst();
      while (node)
      {
          wxRichTextObject* obj = node->GetData();
--- 5052,5058 ----
  /// Get the first position from pos that has a line break character.
  long wxRichTextParagraph::GetFirstLineBreakPosition(long pos)
  {
!     wxRichTextObjectList::compatibility_iterator node = GetChildren().GetFirst();
      while (node)
      {
          wxRichTextObject* obj = node->GetData();
diff -cr wxGTK-2.8.10/src/richtext/richtextctrl.cpp wxGTK-2.8.10-new//src/richtext/richtextctrl.cpp
*** wxGTK-2.8.10/src/richtext/richtextctrl.cpp	2009-03-06 13:17:41.000000000 +0100
--- wxGTK-2.8.10-new//src/richtext/richtextctrl.cpp	2010-04-23 23:20:02.000000000 +0200
***************
*** 61,66 ****
--- 61,69 ----
  DEFINE_EVENT_TYPE(wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED)
  DEFINE_EVENT_TYPE(wxEVT_COMMAND_RICHTEXT_BUFFER_RESET)
  
+ DEFINE_EVENT_TYPE(wxEVT_COMMAND_RICHTEXT_OBJECT_LEFT_CLICK)
+ DEFINE_EVENT_TYPE(wxEVT_COMMAND_RICHTEXT_OBJECT_RIGHT_CLICK)
+ 
  #if wxRICHTEXT_USE_OWN_CARET
  
  /*!
***************
*** 308,313 ****
--- 311,319 ----
      m_fullLayoutSavedPosition = 0;
      m_delayedLayoutThreshold = wxRICHTEXT_DEFAULT_DELAYED_LAYOUT_THRESHOLD;
      m_caretPositionForDefaultStyle = -2;
+     m_firstVisibleObject = NULL;
+     m_lastVisibleObject = NULL;
+     m_screenOffset = 0;
  }
  
  /// Call Freeze to prevent refresh
***************
*** 399,406 ****
          clipRect.SetPosition(GetLogicalPoint(clipRect.GetPosition()));
          dc.SetClippingRegion(clipRect);
  
!         GetBuffer().Draw(dc, GetBuffer().GetRange(), GetInternalSelectionRange(), drawingArea, 0 /* descent */, 0 /* flags */);
  
          dc.DestroyClippingRegion();
  
  #if wxRICHTEXT_USE_OWN_CARET
--- 405,472 ----
          clipRect.SetPosition(GetLogicalPoint(clipRect.GetPosition()));
          dc.SetClippingRegion(clipRect);
  
!         bool down;
!         wxRichTextObjectList::compatibility_iterator node;
!         wxRichTextRange range = GetBuffer().GetRange();
!         int style = 0; /* flags */
!         wxRect area = GetClientRect();
!         area.SetPosition(GetLogicalPoint(area.GetPosition()));
! 
!         /* Which wise? */
!         if (m_firstVisibleObject == NULL) m_firstVisibleObject = GetBuffer().GetChildren().GetFirst();
!         if (m_screenOffset <= drawingArea.GetTop())
!         {
!             down = true;
!             node = m_firstVisibleObject;
!         }
!         else
!         {
!             down = false;
!             node = m_lastVisibleObject;
!         }
!         m_screenOffset = drawingArea.GetTop();
  
+         /* Compute the screen objects */
+         while(node)
+         {
+             wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
+             wxASSERT (child != NULL);
+ 
+             if (child && !child->GetRange().IsOutside(range))
+             {
+                 wxRect childRect(child->GetPosition(), child->GetCachedSize());
+ 
+                 if (((style & wxRICHTEXT_DRAW_IGNORE_CACHE) == 0) && childRect.GetTop() > area.GetBottom())
+                 {
+                     if(down)
+                         break;
+                     else
+                         m_lastVisibleObject = node;
+                 }
+                 else if (((style & wxRICHTEXT_DRAW_IGNORE_CACHE) == 0) && childRect.GetBottom() < area.GetTop())
+                 {
+                     if (!down)
+                         break;
+                     else
+                         m_firstVisibleObject = node;
+                 }
+                 else
+                 {
+                     if (down)
+                         m_lastVisibleObject = node;
+                     else
+                         m_firstVisibleObject = node;
+                 }
+             }
+             if (down)
+                 node = node->GetNext();
+             else
+                 node = node->GetPrevious();
+         }
+         GetBuffer().SetCached(m_firstVisibleObject, m_lastVisibleObject);
+         GetBuffer().EnableCached(true);
+         GetBuffer().Draw(dc, range, GetInternalSelectionRange(), drawingArea, 0 /* descent */, style);
+         GetBuffer().EnableCached(false);
          dc.DestroyClippingRegion();
  
  #if wxRICHTEXT_USE_OWN_CARET
***************
*** 413,421 ****
--- 479,489 ----
      }
  
  #if !wxRICHTEXT_USE_OWN_CARET
+     GetBuffer().EnableCached(true);
      if (GetCaret())
          GetCaret()->Show();
      PositionCaret();
+     GetBuffer().EnableCached(false);
  #endif
  }
  
***************
*** 471,478 ****
      PrepareDC(dc);
      dc.SetFont(GetFont());
  
      long position = 0;
!     int hit = GetBuffer().HitTest(dc, event.GetLogicalPosition(dc), position);
  
      if (hit != wxRICHTEXT_HITTEST_NONE)
      {
--- 539,548 ----
      PrepareDC(dc);
      dc.SetFont(GetFont());
  
+     GetBuffer().EnableCached( true );
+ 
      long position = 0;
!     int hit = GetBuffer().HitTest(dc, event.GetLogicalPosition(dc), position, m_firstVisibleObject, m_lastVisibleObject);
  
      if (hit != wxRICHTEXT_HITTEST_NONE)
      {
***************
*** 509,516 ****
--- 579,598 ----
          }
          else
              SelectNone();
+ 
+         wxRichTextObject * obj = GetBuffer().GetLeafObjectAtPosition( position );
+         if( obj != NULL)
+         {
+             wxRichTextObjectEvent event( wxEVT_COMMAND_RICHTEXT_OBJECT_LEFT_CLICK, obj );
+             if( GetEventHandler()->ProcessEvent( event ) )
+             {
+                 GetBuffer().EnableCached( false );
+                 return;
+             }
+         }
      }
  
+     GetBuffer().EnableCached( false );
      event.Skip();
  }
  
***************
*** 528,533 ****
--- 610,617 ----
          PrepareDC(dc);
          dc.SetFont(GetFont());
  
+         GetBuffer().EnableCached( true );
+ 
          long position = 0;
          wxPoint logicalPt = event.GetLogicalPosition(dc);
          int hit = GetBuffer().HitTest(dc, logicalPt, position);
***************
*** 562,567 ****
--- 646,652 ----
                  }
              }
          }
+         GetBuffer().EnableCached( false );
      }
  }
  
***************
*** 572,577 ****
--- 657,664 ----
      PrepareDC(dc);
      dc.SetFont(GetFont());
  
+     GetBuffer().EnableCached( true );
+ 
      long position = 0;
      wxPoint logicalPt = event.GetLogicalPosition(dc);
      int hit = GetBuffer().HitTest(dc, logicalPt, position);
***************
*** 600,605 ****
--- 687,693 ----
  
      if (!event.Dragging())
      {
+         GetBuffer().EnableCached( false );
          event.Skip();
          return;
      }
***************
*** 631,649 ****
--- 719,759 ----
              SetDefaultStyleToCursorStyle();
          }
      }
+     GetBuffer().EnableCached( false );
  }
  
  /// Right-click
  void wxRichTextCtrl::OnRightClick(wxMouseEvent& event)
  {
      SetFocus();
+ 
+     GetBuffer().EnableCached( true );
+ 
+     long position = 0;
+     int hit = HitTest( event.GetPosition(), &position );
+     if ( hit != wxRICHTEXT_HITTEST_NONE )
+     {
+         wxRichTextObject * obj = GetBuffer().GetLeafObjectAtPosition( position );
+         if( obj != NULL)
+         {
+             wxRichTextObjectEvent event( wxEVT_COMMAND_RICHTEXT_OBJECT_RIGHT_CLICK, obj );
+             if( GetEventHandler()->ProcessEvent( event ) )
+             {
+                 GetBuffer().EnableCached( false );
+                 return;
+             }
+         }
+     }
+     GetBuffer().EnableCached( false );
      event.Skip();
  }
  
  /// Left-double-click
  void wxRichTextCtrl::OnLeftDClick(wxMouseEvent& event)
  {
+     GetBuffer().EnableCached( true );
      SelectWord(GetCaretPosition()+1);
+     GetBuffer().EnableCached( false );
      event.Skip();
  }
  
***************
*** 1239,1249 ****
      wxSize clientSize = GetClientSize();
      clientSize.y -= GetBuffer().GetBottomMargin();
  
!     if (GetWindowStyle() & wxRE_CENTRE_CARET)
      {
          int y = rect.y - GetClientSize().y/2;
          int yUnits = (int) (0.5 + ((float) y)/(float) ppuY);
!         if (y >= 0 && (y + clientSize.y) < GetBuffer().GetCachedSize().y)
          {
              if (startYUnits != yUnits)
              {
--- 1349,1361 ----
      wxSize clientSize = GetClientSize();
      clientSize.y -= GetBuffer().GetBottomMargin();
  
!     /* Alloc center when keyCode is undifined */
!     if (GetWindowStyle() & wxRE_CENTRE_CARET || keyCode == 0)
      {
          int y = rect.y - GetClientSize().y/2;
+         if (y < 0) y = 0; // Scroll even if center the view is not possible
          int yUnits = (int) (0.5 + ((float) y)/(float) ppuY);
!         if ( (y + clientSize.y) < GetBuffer().GetCachedSize().y)
          {
              if (startYUnits != yUnits)
              {
***************
*** 2010,2024 ****
      wxSize clientSize = GetClientSize();
  
      int maxHeight = GetBuffer().GetCachedSize().y + GetBuffer().GetTopMargin();
! 
      // Round up so we have at least maxHeight pixels
      int unitsY = (int) (((float)maxHeight/(float)pixelsPerUnit) + 0.5);
! 
      int startX = 0, startY = 0;
      if (!atTop)
          GetViewStart(& startX, & startY);
  
!     int maxPositionX = 0; // wxMax(sz.x - clientSize.x, 0);
      int maxPositionY = (int) ((((float)(wxMax((unitsY*pixelsPerUnit) - clientSize.y, 0)))/((float)pixelsPerUnit)) + 0.5);
  
      int newStartX = wxMin(maxPositionX, startX);
--- 2122,2138 ----
      wxSize clientSize = GetClientSize();
  
      int maxHeight = GetBuffer().GetCachedSize().y + GetBuffer().GetTopMargin();
!     int maxWidth = GetBuffer().GetCachedSize().x + GetBuffer().GetLeftMargin();
!     
      // Round up so we have at least maxHeight pixels
      int unitsY = (int) (((float)maxHeight/(float)pixelsPerUnit) + 0.5);
!     int unitsX = (int) (((float)maxWidth/(float)pixelsPerUnit) + 0.5);
!     
      int startX = 0, startY = 0;
      if (!atTop)
          GetViewStart(& startX, & startY);
  
!     int maxPositionX = (int) ((((float)(wxMax((unitsX*pixelsPerUnit) - clientSize.x, 0)))/((float)pixelsPerUnit)) + 0.5);
      int maxPositionY = (int) ((((float)(wxMax((unitsY*pixelsPerUnit) - clientSize.y, 0)))/((float)pixelsPerUnit)) + 0.5);
  
      int newStartX = wxMin(maxPositionX, startX);
***************
*** 2038,2044 ****
  
      // Move to previous scroll position if
      // possible
!     SetScrollbars(0, pixelsPerUnit, 0, unitsY, newStartX, newStartY);
  }
  
  /// Paint the background
--- 2152,2158 ----
  
      // Move to previous scroll position if
      // possible
!     SetScrollbars(pixelsPerUnit, pixelsPerUnit, unitsX, unitsY, newStartX, newStartY);
  }
  
  /// Paint the background
***************
*** 3019,3027 ****
  wxRichTextLine* wxRichTextCtrl::GetVisibleLineForCaretPosition(long caretPosition) const
  {
      wxRichTextLine* line = GetBuffer().GetLineAtPosition(caretPosition, true);
-     wxRichTextParagraph* para = GetBuffer().GetParagraphAtPosition(caretPosition, true);
      if (line)
      {
          wxRichTextRange lineRange = line->GetAbsoluteRange();
          if (caretPosition == lineRange.GetStart()-1 &&
              (para->GetRange().GetStart() != lineRange.GetStart()))
--- 3133,3141 ----
  wxRichTextLine* wxRichTextCtrl::GetVisibleLineForCaretPosition(long caretPosition) const
  {
      wxRichTextLine* line = GetBuffer().GetLineAtPosition(caretPosition, true);
      if (line)
      {
+         wxRichTextParagraph* para = GetBuffer().GetParagraphAtPosition(caretPosition, true);
          wxRichTextRange lineRange = line->GetAbsoluteRange();
          if (caretPosition == lineRange.GetStart()-1 &&
              (para->GetRange().GetStart() != lineRange.GetStart()))

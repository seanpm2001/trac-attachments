--- src/gtk/window-svn.cpp	2008-03-30 04:11:38.000000000 +0200
+++ src/gtk/window.cpp	2008-03-30 21:59:54.000000000 +0200
@@ -934,17 +934,14 @@
 #endif
             }
 
-            // Implement OnCharHook by checking ancestor top level windows
-            wxWindow *parent = win;
-            while (parent && !parent->IsTopLevel())
-                parent = parent->GetParent();
-            if (parent)
-            {
+            // Generate EVT_CHAR_HOOK event, and then continue with EVT_CHAR if 
+            // either unprocessed or explicitely allowed by the EVT_CHAR_HOOK handler.
                 event.SetEventType( wxEVT_CHAR_HOOK );
-                ret = parent->HandleWindowEvent( event );
-            }
+            event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+            ret = win->HandleWindowEvent( event );
+            event.StopPropagation( );
 
-            if (!ret)
+            if (!ret || event.GetAllowNextKeyEvent())
             {
                 event.SetEventType(wxEVT_CHAR);
                 ret = win->HandleWindowEvent( event );
--- src/generic/listctrl-svn.cpp	2008-03-30 22:10:54.000000000 +0200
+++ src/generic/listctrl.cpp	2008-03-30 22:13:31.000000000 +0200
@@ -607,6 +607,7 @@
     // called to switch the selection from the current item to newCurrent,
     void OnArrowChar( size_t newCurrent, const wxKeyEvent& event );
 
+    void OnCharHook( wxKeyEvent &event );
     void OnChar( wxKeyEvent &event );
     void OnKeyDown( wxKeyEvent &event );
     void OnKeyUp( wxKeyEvent &event );
@@ -2242,6 +2243,7 @@
 BEGIN_EVENT_TABLE(wxListMainWindow,wxScrolledWindow)
   EVT_PAINT          (wxListMainWindow::OnPaint)
   EVT_MOUSE_EVENTS   (wxListMainWindow::OnMouse)
+  EVT_CHAR_HOOK      (wxListMainWindow::OnCharHook)
   EVT_CHAR           (wxListMainWindow::OnChar)
   EVT_KEY_DOWN       (wxListMainWindow::OnKeyDown)
   EVT_KEY_UP         (wxListMainWindow::OnKeyUp)
@@ -3428,6 +3430,24 @@
     event.Skip();
 }
 
+void wxListMainWindow::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key 
+    // event or if the event should be blocked. This is to allow label 
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape. 
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textctrlWrapper )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxListMainWindow::OnChar( wxKeyEvent &event )
 {
     wxWindow *parent = GetParent();
--- include/wx/generic/treectlg-svn.h	2008-03-31 18:27:24.000000000 +0200
+++ include/wx/generic/treectlg.h	2008-03-31 18:30:08.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Robert Roebling
 // Modified by:
 // Created:     01/02/97
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: treectlg.h 51018 2008-01-05 00:21:31Z VZ $
 // Copyright:   (c) 1997,1998 Robert Roebling
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -207,6 +207,7 @@
     void OnSetFocus( wxFocusEvent &event );
     void OnKillFocus( wxFocusEvent &event );
     void OnChar( wxKeyEvent &event );
+    void OnCharHook( wxKeyEvent &event );
     void OnMouse( wxMouseEvent &event );
     void OnGetToolTip( wxTreeEvent &event );
     void OnSize( wxSizeEvent &event );
--- src/mac/carbon/listctrl_mac-svn.cpp	2008-03-30 22:21:34.000000000 +0200
+++ src/mac/carbon/listctrl_mac.cpp	2008-03-30 22:39:10.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by: Agron Selimaj
 // Created:     04/01/98
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: listctrl_mac.cpp 50577 2007-12-08 17:48:58Z SC $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -511,6 +511,7 @@
     EVT_MIDDLE_DOWN(wxListCtrl::OnMiddleDown)
     EVT_RIGHT_DOWN(wxListCtrl::OnRightDown)
     EVT_CHAR(wxListCtrl::OnChar)
+    EVT_CHAR_HOOK(wxListCtrl::OnCharHook)
 END_EVENT_TABLE()
 
 // ============================================================================
@@ -703,6 +704,24 @@
     }
     event.Skip();
 }
+
+void wxListCtrl::OnCharHook(wxKeyEvent& event)
+{
+    // Come here to determine if we should generate an ordinary key 
+    // event or if the event should be blocked. This is to allow label 
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape. 
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textctrlWrapper )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
 #endif
 
 bool wxListCtrl::Create(wxWindow *parent,
--- src/mac/carbon/app-svn.cpp	2008-03-30 22:46:14.000000000 +0200
+++ src/mac/carbon/app.cpp	2008-03-30 22:54:37.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Stefan Csomor
 // Modified by:
 // Created:     1998-01-01
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: app.cpp 52009 2008-02-22 20:37:43Z RD $
 // Copyright:   (c) Stefan Csomor
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -1472,15 +1472,16 @@
 
     bool handled = false ;
 
-    wxNonOwnedWindow *tlw = focus->MacGetTopLevelWindow() ;
-
-    if (tlw)
-    {
+    // This will give a child window the first go at a char hook event, and 
+    // then let it propagate up to a TLW. If not handled, or if control 
+    // explicitely allows resumed processing, then do so.
         event.SetEventType( wxEVT_CHAR_HOOK );
-        handled = tlw->HandleWindowEvent( event );
-        if ( handled && event.GetSkipped() )
+    event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+    handled = focus->HandleWindowEvent( event );
+    event.StopPropagation( );
+    
+    if ( handled && (event.GetSkipped() || event.GetAllowNextKeyEvent()) )
             handled = false ;
-    }
 
     if ( !handled )
     {
--- include/wx/mac/carbon/listctrl-svn.h	2008-03-30 22:41:30.000000000 +0200
+++ include/wx/mac/carbon/listctrl.h	2008-03-30 22:44:14.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Stefan Csomor
 // Modified by:
 // Created:     1998-01-01
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: listctrl.h 45934 2007-05-10 01:53:21Z VZ $
 // Copyright:   (c) Stefan Csomor
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -348,6 +348,7 @@
   void OnRightDown(wxMouseEvent& event);
   void OnMiddleDown(wxMouseEvent& event);
   void OnChar(wxKeyEvent& event);
+  void OnCharHook(wxKeyEvent& event);
   virtual void SetFocus();
   void FireMouseEvent(wxEventType eventType, wxPoint position);
 
--- src/motif/window-svn.cpp	2008-03-31 18:39:16.000000000 +0200
+++ src/motif/window.cpp	2008-03-31 18:42:04.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Julian Smart
 // Modified by:
 // Created:     17/09/98
-// RCS-ID:      $Id$
+// RCS-ID:      $Id: window.cpp 51784 2008-02-14 11:08:49Z JS $
 // Copyright:   (c) Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -2006,24 +2006,18 @@
             wxKeyEvent event (wxEVT_CHAR);
             if (wxTranslateKeyEvent (event, canvas, (Widget) 0, xevent))
             {
-                // Implement wxFrame::OnCharHook by checking ancestor.
-                wxWindow *parent = canvas;
-                while (parent && !parent->IsTopLevel())
-                    parent = parent->GetParent();
-
-                if (parent)
-                {
                     event.SetEventType(wxEVT_CHAR_HOOK);
-                    if (parent->HandleWindowEvent(event))
+                event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+                if (canvas->HandleWindowEvent(event) && !event.GetAllowNextKeyEvent())
                         return;
-                }
+                event.StopPropagation( );
 
                 // For simplicity, OnKeyDown is the same as OnChar
                 // TODO: filter modifier key presses from OnChar
                 event.SetEventType(wxEVT_KEY_DOWN);
 
                 // Only process OnChar if OnKeyDown didn't swallow it
-                if (!canvas->HandleWindowEvent (event))
+                if (!canvas->HandleWindowEvent (event) || event.GetAllowNextKeyEvent() )
                 {
                     event.SetEventType(wxEVT_CHAR);
                     canvas->HandleWindowEvent (event);
--- src/msw/window-svn.cpp	2008-03-31 18:08:44.000000000 +0200
+++ src/msw/window.cpp	2008-03-31 18:15:01.000000000 +0200
@@ -6314,10 +6314,14 @@
             event.m_keyCode = id;
             event.m_shiftDown = wxIsShiftDown();
             event.m_controlDown = wxIsCtrlDown();
+            event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
 #ifndef __WXWINCE__
             event.SetTimestamp(::GetMessageTime());
 #endif
-            wxWindow *win = wxGetActiveWindow();
+            // Event sent to window with keyboard focus and propagates up from 
+            // there unless handled. 
+            //wxWindow *win = wxGetActiveWindow();
+			wxWindow *win = wxWindow::FindFocus();
             wxEvtHandler *handler;
             if ( win )
             {
@@ -6330,7 +6334,8 @@
                 event.SetId(wxID_ANY);
             }
 
-            if ( handler && handler->ProcessEvent(event) )
+            if ( handler && handler->ProcessEvent(event) && 
+                 !event.GetAllowNextKeyEvent() )
             {
                 // processed
                 return 1;
--- src/generic/treectlg-svn.cpp	2008-03-31 18:20:46.000000000 +0200
+++ src/generic/treectlg.cpp	2008-03-31 18:24:53.000000000 +0200
@@ -4,7 +4,7 @@
 // Author:      Robert Roebling
 // Created:     01/02/97
 // Modified:    22/10/98 - almost total rewrite, simpler interface (VZ)
-// Id:          $Id$
+// Id:          $Id: treectlg.cpp 51744 2008-02-12 23:06:09Z VZ $
 // Copyright:   (c) 1998 Robert Roebling and Julian Smart
 // Licence:     wxWindows licence
 /////////////////////////////////////////////////////////////////////////////
@@ -442,6 +442,24 @@
         m_owner->SetFocus();
 }
 
+void wxTreeTextCtrl::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key 
+    // event or if the event should be blocked. This is to allow label 
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape. 
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textCtrl )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxTreeTextCtrl::OnChar( wxKeyEvent &event )
 {
     switch ( event.m_keyCode )
@@ -712,6 +730,7 @@
     EVT_PAINT          (wxGenericTreeCtrl::OnPaint)
     EVT_SIZE           (wxGenericTreeCtrl::OnSize)
     EVT_MOUSE_EVENTS   (wxGenericTreeCtrl::OnMouse)
+    EVT_CHAR_HOOK      (wxGenericTreeCtrl::OnCharHook)
     EVT_CHAR           (wxGenericTreeCtrl::OnChar)
     EVT_SET_FOCUS      (wxGenericTreeCtrl::OnSetFocus)
     EVT_KILL_FOCUS     (wxGenericTreeCtrl::OnKillFocus)
--- src/generic/datavgen-svn.cpp	2008-03-31 23:11:49.000000000 +0200
+++ src/generic/datavgen.cpp	2008-04-01 00:33:22.000000000 +0200
@@ -464,6 +464,7 @@
 
     void OnPaint( wxPaintEvent &event );
     void OnArrowChar(unsigned int newCurrent, const wxKeyEvent& event);
+    void OnCharHook( wxKeyEvent &event );
     void OnChar( wxKeyEvent &event );
     void OnMouse( wxMouseEvent &event );
     void OnSetFocus( wxFocusEvent &event );
@@ -1938,6 +1939,7 @@
     EVT_MOUSE_EVENTS  (wxDataViewMainWindow::OnMouse)
     EVT_SET_FOCUS     (wxDataViewMainWindow::OnSetFocus)
     EVT_KILL_FOCUS    (wxDataViewMainWindow::OnKillFocus)
+    EVT_CHAR_HOOK     (wxDataViewMainWindow::OnCharHook)
     EVT_CHAR          (wxDataViewMainWindow::OnChar)
 END_EVENT_TABLE()
 
@@ -3395,6 +3397,27 @@
     }
 }
 
+void wxDataViewMainWindow::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key 
+    // event or if the event should be blocked. This is to allow label 
+    // editing when this control is used inside dialogs, without closing 
+    // the whole dialog when pressing escape / enter. 
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        wxWindow *wnd = wxWindow::FindFocus();
+        if( wnd && wnd->GetParent()==this )
+        {
+            // In place child editor has focus. The next key event must be 
+            // generated and not 'stolen' by dialog base class. 
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxDataViewMainWindow::OnChar( wxKeyEvent &event )
 {
     if ( HandleAsNavigationKey(event) )

 	  	 

Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 54084)
+++ include/wx/event.h	(working copy)
@@ -958,6 +958,11 @@
         return *this;
     }
 
+    // For wxEVT_CHAR_HOOK and wxEVT_KEY_DOWN, indicate that the next
+    // event should be generated, even if the current one is processed.
+    void DoAllowNextKeyEvent() { m_allowNext = true; }
+    bool GetAllowNextKeyEvent() const { return m_allowNext; }
+
 public:
     wxCoord       m_x, m_y;
 
@@ -971,6 +976,7 @@
 
     // FIXME: what is this for? relation to m_rawXXX?
     bool          m_scanCode;
+    bool          m_allowNext;
 
 #if wxUSE_UNICODE
     // This contains the full Unicode character
Index: include/wx/generic/treectlg.h
===================================================================
--- include/wx/generic/treectlg.h	(revision 54084)
+++ include/wx/generic/treectlg.h	(working copy)
@@ -207,6 +207,7 @@
     void OnSetFocus( wxFocusEvent &event );
     void OnKillFocus( wxFocusEvent &event );
     void OnChar( wxKeyEvent &event );
+    void OnCharHook( wxKeyEvent &event );
     void OnMouse( wxMouseEvent &event );
     void OnGetToolTip( wxTreeEvent &event );
     void OnSize( wxSizeEvent &event );
Index: include/wx/mac/carbon/listctrl.h
===================================================================
--- include/wx/mac/carbon/listctrl.h	(revision 54084)
+++ include/wx/mac/carbon/listctrl.h	(working copy)
@@ -348,6 +348,7 @@
   void OnRightDown(wxMouseEvent& event);
   void OnMiddleDown(wxMouseEvent& event);
   void OnChar(wxKeyEvent& event);
+  void OnCharHook(wxKeyEvent& event);
   virtual void SetFocus();
   void FireMouseEvent(wxEventType eventType, wxPoint position);
 
Index: src/generic/datavgen.cpp
===================================================================
--- src/generic/datavgen.cpp	(revision 54084)
+++ src/generic/datavgen.cpp	(working copy)
@@ -475,6 +475,7 @@
 
     void OnPaint( wxPaintEvent &event );
     void OnArrowChar(unsigned int newCurrent, const wxKeyEvent& event);
+    void OnCharHook( wxKeyEvent &event );
     void OnChar( wxKeyEvent &event );
     void OnMouse( wxMouseEvent &event );
     void OnSetFocus( wxFocusEvent &event );
@@ -1992,6 +1993,7 @@
     EVT_MOUSE_EVENTS  (wxDataViewMainWindow::OnMouse)
     EVT_SET_FOCUS     (wxDataViewMainWindow::OnSetFocus)
     EVT_KILL_FOCUS    (wxDataViewMainWindow::OnKillFocus)
+    EVT_CHAR_HOOK     (wxDataViewMainWindow::OnCharHook)
     EVT_CHAR          (wxDataViewMainWindow::OnChar)
 END_EVENT_TABLE()
 
@@ -3600,6 +3602,27 @@
     }
 }
 
+void wxDataViewMainWindow::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key
+    // event or if the event should be blocked. This is to allow label
+    // editing when this control is used inside dialogs, without closing
+    // the whole dialog when pressing escape / enter.
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        wxWindow *wnd = wxWindow::FindFocus();
+        if( wnd && wnd->GetParent()==this )
+        {
+            // In place child editor has focus. The next key event must be
+            // generated and not 'stolen' by dialog base class.
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxDataViewMainWindow::OnChar( wxKeyEvent &event )
 {
     if ( HandleAsNavigationKey(event) )
Index: src/generic/listctrl.cpp
===================================================================
--- src/generic/listctrl.cpp	(revision 54084)
+++ src/generic/listctrl.cpp	(working copy)
@@ -606,6 +606,7 @@
     // called to switch the selection from the current item to newCurrent,
     void OnArrowChar( size_t newCurrent, const wxKeyEvent& event );
 
+    void OnCharHook( wxKeyEvent &event );
     void OnChar( wxKeyEvent &event );
     void OnKeyDown( wxKeyEvent &event );
     void OnKeyUp( wxKeyEvent &event );
@@ -2236,6 +2237,7 @@
 BEGIN_EVENT_TABLE(wxListMainWindow,wxScrolledCanvas)
   EVT_PAINT          (wxListMainWindow::OnPaint)
   EVT_MOUSE_EVENTS   (wxListMainWindow::OnMouse)
+  EVT_CHAR_HOOK      (wxListMainWindow::OnCharHook)
   EVT_CHAR           (wxListMainWindow::OnChar)
   EVT_KEY_DOWN       (wxListMainWindow::OnKeyDown)
   EVT_KEY_UP         (wxListMainWindow::OnKeyUp)
@@ -3422,6 +3424,24 @@
     event.Skip();
 }
 
+void wxListMainWindow::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key
+    // event or if the event should be blocked. This is to allow label
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape.
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textctrlWrapper )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxListMainWindow::OnChar( wxKeyEvent &event )
 {
     wxWindow *parent = GetParent();
Index: src/generic/treectlg.cpp
===================================================================
--- src/generic/treectlg.cpp	(revision 54084)
+++ src/generic/treectlg.cpp	(working copy)
@@ -442,6 +442,24 @@
         m_owner->SetFocus();
 }
 
+void wxTreeTextCtrl::OnCharHook( wxKeyEvent &event )
+{
+    // Come here to determine if we should generate an ordinary key
+    // event or if the event should be blocked. This is to allow label
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape.
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textCtrl )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
+
 void wxTreeTextCtrl::OnChar( wxKeyEvent &event )
 {
     switch ( event.m_keyCode )
@@ -712,6 +730,7 @@
     EVT_PAINT          (wxGenericTreeCtrl::OnPaint)
     EVT_SIZE           (wxGenericTreeCtrl::OnSize)
     EVT_MOUSE_EVENTS   (wxGenericTreeCtrl::OnMouse)
+    EVT_CHAR_HOOK      (wxGenericTreeCtrl::OnCharHook)
     EVT_CHAR           (wxGenericTreeCtrl::OnChar)
     EVT_SET_FOCUS      (wxGenericTreeCtrl::OnSetFocus)
     EVT_KILL_FOCUS     (wxGenericTreeCtrl::OnKillFocus)
Index: src/gtk/window.cpp
===================================================================
--- src/gtk/window.cpp	(revision 54084)
+++ src/gtk/window.cpp	(working copy)
@@ -910,17 +910,14 @@
 #endif
             }
 
-            // Implement OnCharHook by checking ancestor top level windows
-            wxWindow *parent = win;
-            while (parent && !parent->IsTopLevel())
-                parent = parent->GetParent();
-            if (parent)
-            {
+            // Generate EVT_CHAR_HOOK event, and then continue with EVT_CHAR if
+            // either unprocessed or explicitly allowed by the EVT_CHAR_HOOK handler.
                 event.SetEventType( wxEVT_CHAR_HOOK );
-                ret = parent->HandleWindowEvent( event );
-            }
+            event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+            ret = win->HandleWindowEvent( event );
+            event.StopPropagation( );
 
-            if (!ret)
+            if (!ret || event.GetAllowNextKeyEvent())
             {
                 event.SetEventType(wxEVT_CHAR);
                 ret = win->HandleWindowEvent( event );
Index: src/mac/carbon/app.cpp
===================================================================
--- src/mac/carbon/app.cpp	(revision 54084)
+++ src/mac/carbon/app.cpp	(working copy)
@@ -1472,15 +1472,16 @@
 
     bool handled = false ;
 
-    wxNonOwnedWindow *tlw = focus->MacGetTopLevelWindow() ;
+    // This will give a child window the first go at a char hook event, and
+    // then let it propagate up to a TLW. If not handled, or if control
+    // explicitely allows resumed processing, then do so.
+        event.SetEventType( wxEVT_CHAR_HOOK );
+    event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+    handled = focus->HandleWindowEvent( event );
+    event.StopPropagation( );
 
-    if (tlw)
-    {
-        event.SetEventType( wxEVT_CHAR_HOOK );
-        handled = tlw->HandleWindowEvent( event );
-        if ( handled && event.GetSkipped() )
+    if ( handled && (event.GetSkipped() || event.GetAllowNextKeyEvent()) )
             handled = false ;
-    }
 
     if ( !handled )
     {
Index: src/mac/carbon/listctrl_mac.cpp
===================================================================
--- src/mac/carbon/listctrl_mac.cpp	(revision 54084)
+++ src/mac/carbon/listctrl_mac.cpp	(working copy)
@@ -511,6 +511,7 @@
     EVT_MIDDLE_DOWN(wxListCtrl::OnMiddleDown)
     EVT_RIGHT_DOWN(wxListCtrl::OnRightDown)
     EVT_CHAR(wxListCtrl::OnChar)
+    EVT_CHAR_HOOK(wxListCtrl::OnCharHook)
 END_EVENT_TABLE()
 
 // ============================================================================
@@ -703,6 +704,24 @@
     }
     event.Skip();
 }
+
+void wxListCtrl::OnCharHook(wxKeyEvent& event)
+{
+    // Come here to determine if we should generate an ordinary key
+    // event or if the event should be blocked. This is to allow label
+    // editing in list controls inside dialogs, without closing the whole
+    // dialog when pressing escape.
+    event.Skip(true);
+    if ( event.GetKeyCode()==WXK_ESCAPE || event.GetKeyCode()==WXK_RETURN )
+    {
+        // The next key event must be generated if we have a popup text ctrl
+        if( m_textctrlWrapper )
+        {
+            event.DoAllowNextKeyEvent( );
+            event.Skip(false);
+        }
+    }
+}
 #endif
 
 bool wxListCtrl::Create(wxWindow *parent,
Index: src/motif/window.cpp
===================================================================
--- src/motif/window.cpp	(revision 54084)
+++ src/motif/window.cpp	(working copy)
@@ -2006,24 +2006,18 @@
             wxKeyEvent event (wxEVT_CHAR);
             if (wxTranslateKeyEvent (event, canvas, (Widget) 0, xevent))
             {
-                // Implement wxFrame::OnCharHook by checking ancestor.
-                wxWindow *parent = canvas;
-                while (parent && !parent->IsTopLevel())
-                    parent = parent->GetParent();
-
-                if (parent)
-                {
                     event.SetEventType(wxEVT_CHAR_HOOK);
-                    if (parent->HandleWindowEvent(event))
+                event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
+                if (canvas->HandleWindowEvent(event) && !event.GetAllowNextKeyEvent())
                         return;
-                }
+                event.StopPropagation( );
 
                 // For simplicity, OnKeyDown is the same as OnChar
                 // TODO: filter modifier key presses from OnChar
                 event.SetEventType(wxEVT_KEY_DOWN);
 
                 // Only process OnChar if OnKeyDown didn't swallow it
-                if (!canvas->HandleWindowEvent (event))
+                if (!canvas->HandleWindowEvent (event) || event.GetAllowNextKeyEvent() )
                 {
                     event.SetEventType(wxEVT_CHAR);
                     canvas->HandleWindowEvent (event);
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 54084)
+++ src/msw/window.cpp	(working copy)
@@ -6325,10 +6325,14 @@
             event.m_keyCode = id;
             event.m_shiftDown = wxIsShiftDown();
             event.m_controlDown = wxIsCtrlDown();
+            event.ResumePropagation( wxEVENT_PROPAGATE_MAX );
 #ifndef __WXWINCE__
             event.SetTimestamp(::GetMessageTime());
 #endif
-            wxWindow *win = wxGetActiveWindow();
+            // Event sent to window with keyboard focus and propagates up from
+            // there unless handled.
+            //wxWindow *win = wxGetActiveWindow();
+            wxWindow *win = wxWindow::FindFocus();
             wxEvtHandler *handler;
             if ( win )
             {
@@ -6341,7 +6345,8 @@
                 event.SetId(wxID_ANY);
             }
 
-            if ( handler && handler->ProcessEvent(event) )
+            if ( handler && handler->ProcessEvent(event) &&
+                 !event.GetAllowNextKeyEvent() )
             {
                 // processed
                 return 1;

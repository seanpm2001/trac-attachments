Index: src/jpeg/jmemmgr.c
===================================================================
--- src/jpeg/jmemmgr.c	(revision 57034)
+++ src/jpeg/jmemmgr.c	(working copy)
@@ -30,6 +30,10 @@
 #include "jpeglib.h"
 #include "jmemsys.h"		/* import the system-dependent declarations */
 
+#if !defined (NO_GETENV) && defined(__MINGW32CE__)
+#define NO_GETENV
+#endif
+
 #ifndef NO_GETENV
 #ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
 extern char * getenv JPP((const char * name));
Index: src/jpeg/jconfig.vc
===================================================================
--- src/jpeg/jconfig.vc	(revision 57034)
+++ src/jpeg/jconfig.vc	(working copy)
@@ -43,3 +43,8 @@
 #undef PROGRESS_REPORT		/* optional */
 
 #endif /* JPEG_CJPEG_DJPEG */
+
+#ifdef _WIN32_WCE
+#define NO_GETENV 1
+#endif
+
Index: src/zlib/zutil.h
===================================================================
--- src/zlib/zutil.h	(revision 57034)
+++ src/zlib/zutil.h	(working copy)
@@ -151,7 +151,7 @@
 #  define fdopen(fd,mode) NULL /* No fdopen() */
 #endif
 
-#if (defined(_MSC_VER) && (_MSC_VER > 600))
+#if (defined(_MSC_VER) && (_MSC_VER > 600)) || defined (__MINGW32CE__)
 #  if defined(_WIN32_WCE)
 #    define fdopen(fd,mode) NULL /* No fdopen() */
 #    ifndef _PTRDIFF_T_DEFINED
Index: src/common/msgout.cpp
===================================================================
--- src/common/msgout.cpp	(revision 57034)
+++ src/common/msgout.cpp	(working copy)
@@ -110,11 +110,17 @@
 #ifdef __WINDOWS__
     // decide whether to use console output or not
     wxAppTraits * const traits = wxTheApp ? wxTheApp->GetTraits() : NULL;
+#ifdef __WXWINCE__
+    const bool hasStderr = false;
+#else
     const bool hasStderr = traits ? traits->CanUseStderr() : false;
+#endif
 
     if ( !(m_flags & wxMSGOUT_PREFER_MSGBOX) )
     {
+#ifndef __WXWINCE__
         if ( hasStderr && traits->WriteToStderr(AppendLineFeedIfNeeded(str)) )
+#endif
             return;
     }
 
Index: src/common/filename.cpp
===================================================================
--- src/common/filename.cpp	(revision 57034)
+++ src/common/filename.cpp	(working copy)
@@ -90,7 +90,10 @@
 
 #ifdef __WXWINCE__
 #include "wx/msw/private.h"
+#ifdef __MINGW32CE__
+#include <fcntl.h>
 #endif
+#endif
 
 #if defined(__WXMAC__)
   #include  "wx/osx/private.h"  // includes mac headers
Index: src/common/appbase.cpp
===================================================================
--- src/common/appbase.cpp	(revision 57034)
+++ src/common/appbase.cpp	(working copy)
@@ -56,7 +56,9 @@
   #include  <signal.h>      // for SIGTRAP used by wxTrap()
 #endif  //Win/Unix
 
+#ifndef __MINGW32CE__
 #include <locale.h>
+#endif // __MINGW32CE__
 #endif // ! __WXPALMOS5__
 
 #if wxUSE_FONTMAP
Index: src/common/filefn.cpp
===================================================================
--- src/common/filefn.cpp	(revision 57034)
+++ src/common/filefn.cpp	(working copy)
@@ -50,7 +50,7 @@
 #include <stdlib.h>
 #include <string.h>
 #if !wxONLY_WATCOM_EARLIER_THAN(1,4)
-    #if !(defined(_MSC_VER) && (_MSC_VER > 800))
+    #if !(defined(_MSC_VER) && (_MSC_VER > 800)) && !defined(__WXWINCE__)
         #include <errno.h>
     #endif
 #endif
Index: src/common/datetime.cpp
===================================================================
--- src/common/datetime.cpp	(revision 57034)
+++ src/common/datetime.cpp	(working copy)
@@ -141,7 +141,7 @@
 #if !defined(WX_TIMEZONE) && !defined(WX_GMTOFF_IN_TM)
     #if defined(__WXPALMOS__)
         #define WX_GMTOFF_IN_TM
-    #elif defined(__BORLANDC__) || defined(__MINGW32__) || defined(__VISAGECPP__)
+    #elif defined(__BORLANDC__) || (defined(__MINGW32__) && !defined(__MINGW32CE__)) || defined(__VISAGECPP__)
         #define WX_TIMEZONE _timezone
     #elif defined(__MWERKS__)
         long wxmw_timezone = 28800;
@@ -163,7 +163,7 @@
         #define WX_TIMEZONE wxGetTimeZone()
     #elif defined(__DARWIN__)
         #define WX_GMTOFF_IN_TM
-    #elif defined(__WXWINCE__) && defined(__VISUALC8__)
+    #elif defined(__WXWINCE__) && (defined(__VISUALC8__) || defined(__MINGW32CE__))
         // _timezone is not present in dynamic run-time library
         #if 0
         // Solution (1): use the function equivalent of _timezone
Index: src/common/utilscmn.cpp
===================================================================
--- src/common/utilscmn.cpp	(revision 57034)
+++ src/common/utilscmn.cpp	(working copy)
@@ -63,7 +63,7 @@
 #include <string.h>
 
 #if !wxONLY_WATCOM_EARLIER_THAN(1,4)
-    #if !(defined(_MSC_VER) && (_MSC_VER > 800))
+    #if !(defined(_MSC_VER) && (_MSC_VER > 800)) && !defined(__WXWINCE__)
         #include <errno.h>
     #endif
 #endif
Index: src/msw/settings.cpp
===================================================================
--- src/msw/settings.cpp	(revision 57034)
+++ src/msw/settings.cpp	(working copy)
@@ -41,6 +41,11 @@
 
 #include "wx/fontutil.h"
 
+// WARNING! This normally should be defined in winuser.h!
+#ifndef SYS_COLOR_INDEX_FLAG
+#define SYS_COLOR_INDEX_FLAG 0x40000000
+#endif
+
 // ----------------------------------------------------------------------------
 // private classes
 // ----------------------------------------------------------------------------
Index: src/msw/window.cpp
===================================================================
--- src/msw/window.cpp	(revision 57034)
+++ src/msw/window.cpp	(working copy)
@@ -147,7 +147,7 @@
     #define AW_BLEND        0x00080000
 #endif
 
-#if defined(TME_LEAVE) && defined(WM_MOUSELEAVE) && wxUSE_DYNLIB_CLASS
+#if defined(TME_LEAVE) && defined(WM_MOUSELEAVE) && wxUSE_DYNLIB_CLASS && !defined (__WXWINCE__)
     #define HAVE_TRACKMOUSEEVENT
 #endif // everything needed for TrackMouseEvent()
 
Index: src/msw/notebook.cpp
===================================================================
--- src/msw/notebook.cpp	(revision 57034)
+++ src/msw/notebook.cpp	(working copy)
@@ -16,6 +16,10 @@
     #pragma hdrstop
 #endif
 
+#ifdef __WXWINCE__
+    #include <aygshell.h>
+#endif
+
 #if wxUSE_NOTEBOOK
 
 #include "wx/notebook.h"
Index: src/msw/utilsgui.cpp
===================================================================
--- src/msw/utilsgui.cpp	(revision 57034)
+++ src/msw/utilsgui.cpp	(working copy)
@@ -117,13 +117,21 @@
     if ( hData == 0 )
         return NULL;
 
+#if !defined (__MINGW32CE__)
     wxChar *theText = (wxChar *)::LockResource(hData);
+#else
+    wxChar *theText = (wxChar *)LockResource(hData);
+#endif
     if ( !theText )
         return NULL;
 
     // Not all compilers put a zero at the end of the resource (e.g. BC++ doesn't).
     // so we need to find the length of the resource.
+#if !defined (__MINGW32CE__)
     int len = ::SizeofResource(wxGetInstance(), hResource) + 1;
+#else
+    int len = SizeofResource(wxGetInstance(), hResource) + 1;
+#endif
     wxChar *s = new wxChar[len];
     wxStrlcpy(s, theText, len);
 
Index: src/msw/font.cpp
===================================================================
--- src/msw/font.cpp	(revision 57034)
+++ src/msw/font.cpp	(working copy)
@@ -90,6 +90,10 @@
     IMPLEMENT_DYNAMIC_CLASS(wxFont, wxGDIObject)
 #endif
 
+// according to wingdi.h
+#ifndef CLEARTYPE_QUALITY
+#define CLEARTYPE_QUALITY 5
+#endif
 
 // ----------------------------------------------------------------------------
 // constants
Index: src/msw/basemsw.cpp
===================================================================
--- src/msw/basemsw.cpp	(revision 57034)
+++ src/msw/basemsw.cpp	(working copy)
@@ -107,7 +107,10 @@
     return DoSimpleWaitForThread(hThread);
 }
 
+#ifndef __WXWINCE__
 bool wxConsoleAppTraits::WriteToStderr(const wxString& text)
 {
     return wxFprintf(stderr, "%s", text) != -1;
 }
+#endif
+
Index: src/msw/thread.cpp
===================================================================
--- src/msw/thread.cpp	(revision 57034)
+++ src/msw/thread.cpp	(working copy)
@@ -933,7 +933,13 @@
 
 bool wxThread::IsMain()
 {
+// strangely enough, mingw32ce-g++ complains here
+#if !defined (__MINGW32CE__)
     return ::GetCurrentThreadId() == gs_idMainThread || gs_idMainThread == 0;
+#else
+
+    return GetCurrentThreadId() == gs_idMainThread || gs_idMainThread == 0;
+#endif
 }
 
 void wxThread::Yield()
@@ -953,7 +959,12 @@
 
 unsigned long wxThread::GetCurrentId()
 {
+#if !defined (__MINGW32CE__)
     return (unsigned long)::GetCurrentThreadId();
+#else
+
+    return (unsigned long)GetCurrentThreadId();
+#endif
 }
 
 bool wxThread::SetConcurrency(size_t WXUNUSED_IN_WINCE(level))
@@ -1253,7 +1264,11 @@
 bool wxThreadModule::OnInit()
 {
     // allocate TLS index for storing the pointer to the current thread
+#if !defined (__MINGW32CE__)
     gs_tlsThisThread = ::TlsAlloc();
+#else
+    gs_tlsThisThread = TlsAlloc();
+#endif
     if ( gs_tlsThisThread == 0xFFFFFFFF )
     {
         // in normal circumstances it will only happen if all other
@@ -1266,9 +1281,17 @@
 
     // main thread doesn't have associated wxThread object, so store 0 in the
     // TLS instead
+#if !defined (__MINGW32CE__)
     if ( !::TlsSetValue(gs_tlsThisThread, (LPVOID)0) )
+#else
+    if ( !TlsSetValue(gs_tlsThisThread, (LPVOID)0) )
+#endif
     {
+#if !defined (__MINGW32CE__)
         ::TlsFree(gs_tlsThisThread);
+#else
+        TlsFree(gs_tlsThisThread);
+#endif
         gs_tlsThisThread = 0xFFFFFFFF;
 
         wxLogSysError(_("Thread module initialization failed: can not store value in thread local storage"));
@@ -1284,14 +1307,22 @@
     gs_critsectThreadDelete = new wxCriticalSection;
 
     // no error return for GetCurrentThreadId()
+#if !defined (__MINGW32CE__)
     gs_idMainThread = ::GetCurrentThreadId();
+#else
+    gs_idMainThread = GetCurrentThreadId();
+#endif
 
     return true;
 }
 
 void wxThreadModule::OnExit()
 {
+#if !defined (__MINGW32CE__)
     if ( !::TlsFree(gs_tlsThisThread) )
+#else
+    if ( !TlsFree(gs_tlsThisThread) )
+#endif
     {
         wxLogLastError(wxT("TlsFree failed."));
     }
Index: src/msw/display.cpp
===================================================================
--- src/msw/display.cpp	(revision 57034)
+++ src/msw/display.cpp	(working copy)
@@ -516,6 +516,9 @@
 
 wxDisplayFactoryWin32Base::wxDisplayFactoryWin32Base()
 {
+#ifdef __WXWINCE__
+    ms_supportsMultimon = 0;
+#else
     if ( ms_supportsMultimon == -1 )
     {
         ms_supportsMultimon = 0;
@@ -532,6 +535,7 @@
         // we can safely let dllDisplay go out of scope, the DLL itself will
         // still remain loaded as all programs link to it statically anyhow
     }
+#endif
 }
 
 void wxDisplayFactoryWin32Base::Clear()
@@ -586,6 +590,9 @@
 
 wxDisplayFactoryMultimon::wxDisplayFactoryMultimon()
 {
+#ifdef __WXWINCE__
+    return;
+#else
     if ( !ms_supportsMultimon )
         return;
 
@@ -603,6 +610,7 @@
     {
         wxLogLastError(wxT("EnumDisplayMonitors"));
     }
+#endif
 }
 
 /* static */
Index: src/msw/msgdlg.cpp
===================================================================
--- src/msw/msgdlg.cpp	(revision 57034)
+++ src/msw/msgdlg.cpp	(working copy)
@@ -52,6 +52,8 @@
     #include "wx/msw/wince/missing.h"
 #endif
 
+#include "wx/fontutil.h"
+
 IMPLEMENT_CLASS(wxMessageDialog, wxDialog)
 
 #if wxUSE_MSGBOX_HOOK
Index: src/msw/utilsexc.cpp
===================================================================
--- src/msw/utilsexc.cpp	(revision 57034)
+++ src/msw/utilsexc.cpp	(working copy)
@@ -71,7 +71,7 @@
 #include <stdlib.h>
 #include <string.h>
 #ifndef __WATCOMC__
-    #if !(defined(_MSC_VER) && (_MSC_VER > 800))
+#if !(defined(_MSC_VER) && (_MSC_VER > 800)) && !defined(__WXWINCE__)
         #include <errno.h>
     #endif
 #endif
Index: src/msw/textentry.cpp
===================================================================
--- src/msw/textentry.cpp	(revision 57034)
+++ src/msw/textentry.cpp	(working copy)
@@ -42,7 +42,8 @@
 // ----------------------------------------------------------------------------
 
 // standard VC6 SDK (WINVER == 0x0400) does not know about IAutoComplete
-#if wxUSE_OLE && (WINVER >= 0x0500)
+// mingw32ce has declarations, but hasn't library
+#if wxUSE_OLE && (WINVER >= 0x0500) && !defined(__MINGW32CE__)
     #define HAS_AUTOCOMPLETE
 #endif
 
Index: src/msw/wince/time.cpp
===================================================================
--- src/msw/wince/time.cpp	(revision 57034)
+++ src/msw/wince/time.cpp	(working copy)
@@ -29,6 +29,7 @@
 #endif
 
 #include "wx/msw/wince/time.h"
+#include "wx/longlong.h"
 
 #if defined(__VISUALC__) && (__VISUALC__ >= 1400)
 
@@ -169,6 +170,7 @@
 	return _add(buf, pt, ptlim);
 }
 
+long timezone;
 
 static char *
 _fmt(const char * format, const struct tm * const t, char * pt, const char * const ptlim, int * warnp)
@@ -552,17 +554,13 @@
 #define DO_GMTIME                   0
 #define DO_LOCALTIME                1
 
-
-long timezone ; // global variable
-
-
 ////////////////////////////////////////////////////////////////////////
 // Common code for localtime and gmtime (static)
 ////////////////////////////////////////////////////////////////////////
 
 static struct tm * __cdecl common_localtime(const time_t *t, BOOL bLocal)
 {
-    wxLongLong i64;
+    wxLongLong i64, i64_2;
     FILETIME   ft;
     wxString str ;
     SYSTEMTIME SystemTime;
@@ -583,7 +581,9 @@
     else
     {
         i64 = *t;
-        i64 = i64 * 10000000 + 116444736000000000;
+	i64_2 = 1164447360;
+	i64_2 *= 100000000;
+	i64 = i64 * 10000000 + i64_2;
 
         ft.dwLowDateTime  = i64.GetLo();
         ft.dwHighDateTime = i64.GetHi();
Index: src/msw/wince/filefnwce.cpp
===================================================================
--- src/msw/wince/filefnwce.cpp	(revision 57034)
+++ src/msw/wince/filefnwce.cpp	(working copy)
@@ -24,6 +24,7 @@
     #pragma hdrstop
 #endif
 
+#include "wx/wxchar.h"
 #include "wx/file.h"
 
 #include <ctype.h>
Index: src/msw/wince/net.cpp
===================================================================
--- src/msw/wince/net.cpp	(revision 57034)
+++ src/msw/wince/net.cpp	(working copy)
@@ -42,12 +42,20 @@
 
 static struct protoent RgProtoEnt[] =
 {
+#if !defined (__MINGW32CE__)
  { "tcp", {NULL}, 6 },
  { "udp", {NULL}, 17 },
  { "icmp", {NULL}, 1 },
  { "ip", {NULL}, 0 },
  { NULL, {NULL}, 0 }
-};
+#else
+ { "tcp", NULL, 6 },
+ { "udp", NULL, 17 },
+ { "icmp", NULL, 1 },
+ { "ip", NULL, 0 },
+ { NULL, NULL, 0 }
+#endif
+} ;
 
 
 #define CCH_MAX_SERV 8
@@ -62,6 +70,7 @@
 
 static struct servent RgServEnt[] =
 {
+#if !defined (__MINGW32CE__)
  { "ftp", {NULL}, 21, "tcp" },
  { "ftp-data", {NULL}, 20, "tcp" },
  { "telnet", {NULL}, 23, "tcp" },
@@ -88,6 +97,34 @@
  { "qotd", {NULL}, 17, "tcp" },
  { "qotd", {NULL}, 17, "udp" },
  { NULL, {NULL}, 0, NULL }
+#else
+ { "ftp", NULL, 21, "tcp" },
+ { "ftp-data", NULL, 20, "tcp" },
+ { "telnet", NULL, 23, "tcp" },
+ { "smtp", NULL, 25, "tcp" },
+ { "http", NULL, 80, "tcp" },
+ { "http", NULL, 80, "udp" },
+ { "pop", NULL, 109, "tcp" },
+ { "pop2", NULL, 109, "tcp" },
+ { "pop3", NULL, 110, "tcp" },
+ { "nntp", NULL, 119, "tcp" },
+ { "finger", NULL, 79, "tcp" },
+ /* include most of the simple TCP services for testing */
+ { "echo", NULL, 7, "tcp" },
+ { "echo", NULL, 7, "udp" },
+ { "discard", NULL, 9, "tcp" },
+ { "discard", NULL, 9, "udp" },
+ { "chargen", NULL, 19, "tcp" },
+ { "chargen", NULL, 19, "udp" },
+ { "systat", NULL, 11, "tcp" },
+ { "systat", NULL, 11, "udp" },
+ { "daytime", NULL, 13, "tcp" },
+ { "daytime", NULL, 13, "udp" },
+ { "netstat", NULL, 15, "tcp" },
+ { "qotd", NULL, 17, "tcp" },
+ { "qotd", NULL, 17, "udp" },
+ { NULL, NULL, 0, NULL }
+#endif
 };
 
 // Since table kept in host byte order,
@@ -107,8 +144,11 @@
  } szDst[i] = 0;
 }
 
-
+#if defined (__MINGW32CE__)
+struct servent * WINAPI getservbyport(int port, const char * proto)
+#else
 struct servent * WINSOCKAPI getservbyport(int port, const char * proto)
+#endif
 {
 
  port = ntohs((unsigned short)port); // arrives in network byte order
@@ -139,9 +179,13 @@
  } return NULL;
 }
 
-
+#if defined (__MINGW32CE__)
+struct servent * WINAPI getservbyname(const char * name,
+                                      const char * proto)
+#else
 struct servent * WINSOCKAPI getservbyname(const char * name,
                                           const char * proto)
+#endif
 {
  struct servent *ps = &RgServEnt[0];
  BOOL fFoundOnce = FALSE; // flag to short-circuit search through rest of db
@@ -172,8 +216,11 @@
  } return NULL;
 }
 
-
+#if defined (__MINGW32CE__)
+struct protoent * WINAPI getprotobynumber(int proto)
+#else
 struct protoent * WINSOCKAPI getprotobynumber(int proto)
+#endif
 {
  struct protoent *pr = &RgProtoEnt[0];
  while (NULL != pr->p_name)
Index: src/msw/wince/helpwce.cpp
===================================================================
--- src/msw/wince/helpwce.cpp	(revision 57034)
+++ src/msw/wince/helpwce.cpp	(working copy)
@@ -116,7 +116,12 @@
         url = url + wxT("#") + topic;
 
     return CreateProcess(wxT("peghelp.exe"),
-        url, NULL, NULL, FALSE, 0, NULL,
+#if !defined (__MINGW32CE__)
+        url, 
+#else
+	(WCHAR*)(const wchar_t*)url,
+#endif
+	NULL, NULL, FALSE, 0, NULL,
         NULL, NULL, NULL) != 0 ;
 }
 
Index: src/msw/wince/tbarwce.cpp
===================================================================
--- src/msw/wince/tbarwce.cpp	(revision 57034)
+++ src/msw/wince/tbarwce.cpp	(working copy)
@@ -368,7 +368,7 @@
 #endif // 0
 
     bool lastWasRadio = false;
-    wxToolBarToolsList::Node* node;
+    wxToolBarToolsList::compatibility_iterator node;
     for ( node = m_tools.GetFirst(); node; node = node->GetNext() )
     {
         wxToolMenuBarTool *tool = (wxToolMenuBarTool*) node->GetData();
Index: src/msw/stdpaths.cpp
===================================================================
--- src/msw/stdpaths.cpp	(revision 57034)
+++ src/msw/stdpaths.cpp	(working copy)
@@ -131,7 +131,7 @@
 
 #if wxUSE_UNICODE
     #ifdef __WXWINCE__
-        static const wchar_t UNICODE_SUFFIX = L''; // WinCE SH functions don't seem to have 'W'
+        static const wchar_t UNICODE_SUFFIX = L'\0'; // WinCE SH functions don't seem to have 'W'
     #else
         static const wchar_t UNICODE_SUFFIX = L'W';
     #endif
Index: src/msw/gsockmsw.cpp
===================================================================
--- src/msw/gsockmsw.cpp	(revision 57034)
+++ src/msw/gsockmsw.cpp	(working copy)
@@ -87,10 +87,12 @@
 #else
 /* Typedef the needed function prototypes and the WSANETWORKEVENTS structure
 */
+#ifndef __MINGW32CE__
 typedef struct _WSANETWORKEVENTS {
        long lNetworkEvents;
        int iErrorCode[10];
 } WSANETWORKEVENTS, FAR * LPWSANETWORKEVENTS;
+#endif
 typedef HANDLE (PASCAL *WSACreateEventFunc)();
 typedef int (PASCAL *WSAEventSelectFunc)(SOCKET,HANDLE,long);
 typedef int (PASCAL *WSAWaitForMultipleEventsFunc)(long,HANDLE,BOOL,long,BOOL);
Index: src/msw/utils.cpp
===================================================================
--- src/msw/utils.cpp	(revision 57034)
+++ src/msw/utils.cpp	(working copy)
@@ -96,7 +96,7 @@
 #endif
 
 #ifndef __WATCOMC__
-    #if !(defined(_MSC_VER) && (_MSC_VER > 800))
+    #if !(defined(_MSC_VER) && (_MSC_VER > 800)) && !defined(__WXWINCE__)
         #include <errno.h>
     #endif
 #endif
@@ -1016,13 +1016,21 @@
 
 unsigned long wxGetProcessId()
 {
+#if !defined (__MINGW32CE__)
     return ::GetCurrentProcessId();
+#else
+    return GetCurrentProcessId();
+#endif
 }
 
 // Emit a beeeeeep
 void wxBell()
 {
+#if !defined (__MINGW32CE__)
     ::MessageBeep((UINT)-1);        // default sound
+#else
+    MessageBeep((UINT)-1);        // default sound
+#endif
 }
 
 bool wxIsDebuggerRunning()
@@ -1227,7 +1235,11 @@
     BOOL wow64 = FALSE;
     if ( pfnIsWow64Process )
     {
+#if !defined (__MINGW32CE__)
         pfnIsWow64Process(::GetCurrentProcess(), &wow64);
+#else
+        pfnIsWow64Process(GetCurrentProcess(), &wow64);
+#endif
     }
     //else: running under a system without Win64 support
 
Index: src/msw/toolbar.cpp
===================================================================
--- src/msw/toolbar.cpp	(revision 57034)
+++ src/msw/toolbar.cpp	(working copy)
@@ -1705,6 +1705,7 @@
     return true;
 }
 
+#ifndef __WXWINCE__
 bool wxToolBar::HandlePaint(WXWPARAM wParam, WXLPARAM lParam)
 {
     // erase any dummy separators which were used
@@ -1848,7 +1849,9 @@
 
     return true;
 }
+#endif
 
+
 void wxToolBar::HandleMouseMove(WXWPARAM WXUNUSED(wParam), WXLPARAM lParam)
 {
     wxCoord x = GET_X_LPARAM(lParam),
Index: src/msw/printdlg.cpp
===================================================================
--- src/msw/printdlg.cpp	(revision 57034)
+++ src/msw/printdlg.cpp	(working copy)
@@ -191,11 +191,13 @@
     } else {
         data.SetBin(wxPRINTBIN_DEFAULT);
     }
+#if !defined (__MINGW32CE__)
     if (devMode->dmFields & DM_MEDIATYPE)
     {
         wxASSERT( (int)devMode->dmMediaType != wxPRINTMEDIA_DEFAULT );
         data.SetMedia(devMode->dmMediaType);
     }
+#endif
     //// Printer name
     if (devMode->dmDeviceName[0] != 0)
         // This syntax fixes a crash when using VS 7.1
@@ -534,11 +536,13 @@
 
             devMode->dmFields |= DM_DEFAULTSOURCE;
         }
+#if !defined (__MINGW32CE__)
         if (data.GetMedia() != wxPRINTMEDIA_DEFAULT)
         {
             devMode->dmMediaType = data.GetMedia();
             devMode->dmFields |= DM_MEDIATYPE;
         }
+#endif
     }
 
     if ( m_devNames )
Index: src/generic/dcpsg.cpp
===================================================================
--- src/generic/dcpsg.cpp	(revision 57034)
+++ src/generic/dcpsg.cpp	(working copy)
@@ -35,7 +35,7 @@
 #include "wx/filefn.h"
 #include "wx/stdpaths.h"
 
-#ifdef __WXMSW__
+#if (defined (__WXMSW__) || defined(__WXWINCE__)) && !defined(__MINGW32CE__)
 
 #ifdef DrawText
 #undef DrawText
Index: src/generic/fontdlgg.cpp
===================================================================
--- src/generic/fontdlgg.cpp	(revision 57034)
+++ src/generic/fontdlgg.cpp	(working copy)
@@ -34,6 +34,7 @@
     #include "wx/settings.h"
     #include "wx/cmndata.h"
     #include "wx/sizer.h"
+    #include "wx/textctrl.h"
 #endif
 
 #include <string.h>
Index: include/wx/msw/winundef.h
===================================================================
--- include/wx/msw/winundef.h	(revision 57034)
+++ include/wx/msw/winundef.h	(working copy)
@@ -133,7 +133,7 @@
 
 // GetCharWidth
 
-#ifdef GetCharWidth
+#if defined (GetCharWidth) && !defined(__WXWINCE__)
    #undef GetCharWidth
    inline BOOL  GetCharWidth(HDC dc, UINT first, UINT last, LPINT buffer)
    {
Index: include/wx/msw/wince/net.h
===================================================================
--- include/wx/msw/wince/net.h	(revision 57034)
+++ include/wx/msw/wince/net.h	(working copy)
@@ -12,9 +12,17 @@
 
 */
 
+#ifdef __MINGW32CE__
+struct servent * WINAPI getservbyport(int port, const char * proto) ;
+
+struct servent * WINAPI getservbyname(const char * name,
+                                          const char * proto) ;
+struct protoent * WINAPI getprotobynumber(int proto) ;
+#else
 struct servent * WINSOCKAPI getservbyport(int port, const char * proto) ;
 
 struct servent * WINSOCKAPI getservbyname(const char * name,
                                           const char * proto) ;
 struct protoent * WINSOCKAPI getprotobynumber(int proto) ;
+#endif
 
Index: include/wx/html/htmlcell.h
===================================================================
--- include/wx/html/htmlcell.h	(revision 57034)
+++ include/wx/html/htmlcell.h	(working copy)
@@ -627,8 +627,11 @@
     DECLARE_NO_COPY_CLASS(wxHtmlWidgetCell)
 };
 
+#if defined(__MINGW32CE__) && defined(SetEvent)
+// SetEvent is a macro defined in mingw32ce's kfuncs.h
+#undef SetEvent
+#endif
 
-
 //--------------------------------------------------------------------------------
 // wxHtmlLinkInfo
 //                  Internal data structure. It represents hypertext link
Index: include/wx/wxcrtbase.h
===================================================================
--- include/wx/wxcrtbase.h	(revision 57034)
+++ include/wx/wxcrtbase.h	(working copy)
@@ -510,8 +510,8 @@
 /* there are no env vars at all under CE, so no _tgetenv neither */
 #ifdef __WXWINCE__
     /* can't define as inline function as this is a C file... */
-    #define wxCRT_GetenvA(name)     (name, NULL)
-    #define wxCRT_GetenvW(name)     (name, NULL)
+    #define wxCRT_GetenvA(name)     ((name, (char*)NULL))
+    #define wxCRT_GetenvW(name)     ((name, (wchar_t*)NULL))
 #else
     #define wxCRT_GetenvA           getenv
     #ifdef _tgetenv
@@ -553,6 +553,25 @@
     /* wcstoi doesn't exist */
 #endif
 
+#if defined (__MINGW32CE__)
+    #ifdef wxCRT_AtoiW
+        #undef wxCRT_AtoiW
+    #endif
+
+    #ifdef wxCRT_AtofW
+        #undef wxCRT_AtofW
+    #endif
+
+    #ifdef wxCRT_AtolW
+        #undef wxCRT_AtolW         
+    #endif
+
+    #define wxCRT_AtoiW(s)            (int)wcstol(s, NULL, 10)
+    #define wxCRT_AtofW(s)            wcstod(s, NULL)
+    #define wxCRT_AtolW(s)            wcstol(s, NULL, 10)
+
+#endif
+
 /*
     There are 2 unrelated problems with these functions under Mac:
         a) Metrowerks MSL CRT implements them strictly in C99 sense and
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 57034)
+++ include/wx/defs.h	(working copy)
@@ -44,6 +44,7 @@
          !defined(__WXMGL__)   && \
          !defined(__WXDFB__)   && \
          !defined(__WXX11__)   && \
+         !defined(__WXWINCE__) && \
           wxUSE_GUI
 #       ifdef __UNIX__
 #           error "No Target! You should use wx-config program for compilation flags!"
Index: configure.in
===================================================================
--- configure.in	(revision 57034)
+++ configure.in	(working copy)
@@ -94,7 +94,7 @@
 dnl the list of all available toolkits
 dnl
 dnl update NUM_TOOLKITS calculation below when adding a new toolkit here!
-ALL_TOOLKITS="COCOA GTK OSX_CARBON OSX_COCOA MGL MICROWIN MOTIF MSW PM X11 DFB"
+ALL_TOOLKITS="COCOA GTK OSX_CARBON OSX_COCOA MGL MICROWIN MOTIF MSW PM X11 DFB WINCE"
 
 dnl NB: these wxUSE_XXX constants have value of 0 or 1 unlike all the other ones
 dnl     which are either yes or no
@@ -109,6 +109,7 @@
 DEFAULT_wxUSE_PM=0
 DEFAULT_wxUSE_X11=0
 DEFAULT_wxUSE_DFB=0
+DEFAULT_wxUSE_WINCE=0
 
 dnl these are the values which are really default for the given platform:
 dnl they're used if no --with-<toolkit> options were given to detect the
@@ -124,6 +125,7 @@
 DEFAULT_DEFAULT_wxUSE_PM=0
 DEFAULT_DEFAULT_wxUSE_X11=0
 DEFAULT_DEFAULT_wxUSE_DFB=0
+DEFAULT_DEFAULT_wxUSE_WINCE=0
 
 PROGRAM_EXT=
 SAMPLES_RPATH_FLAG=
@@ -256,6 +258,12 @@
     AC_DEFINE(__UNIXWARE__)
   ;;
 
+  *-*-mingw32ce*)
+    SO_SUFFIX=dll
+    PROGRAM_EXT=".exe"
+    DEFAULT_DEFAULT_wxUSE_WINCE=1
+  ;;
+
   *-*-cygwin* | *-*-mingw32* )
     dnl MBN: some of the defines have been moved after toolkit detection
     dnl      because for wxMotif/wxGTK/wxX11 to build on Cygwin
@@ -456,6 +464,10 @@
 AC_ARG_WITH(directfb,      [  --with-directfb         use DirectFB], [wxUSE_DFB="$withval" wxUSE_UNIVERSAL="yes" CACHE_DFB=1 TOOLKIT_GIVEN=1])
 AC_ARG_WITH(microwin,      [  --with-microwin         use MicroWindows], [wxUSE_MICROWIN="$withval" CACHE_MICROWIN=1 TOOLKIT_GIVEN=1])
 AC_ARG_WITH(x11,           [  --with-x11              use X11], [wxUSE_X11="$withval" wxUSE_UNIVERSAL="yes" CACHE_X11=1 TOOLKIT_GIVEN=1])
+AC_ARG_WITH(wince,         [  --with-wince            use WinCE], [wxUSE_WINCE="$withval" CACHE_WINCE=1 TOOLKIT_GIVEN=1])
+AC_ARG_WITH(winceversion,  [  --with-winceversion=420 use specified WinCE version], [wxWINCE_VERSION="$withval"])
+AC_ARG_WITH(winceplatform, [  --with-winceplatform=pocketpc    or smartphone or handheldpc], [wxWINCE_PLATFORM="$withval"])
+AC_ARG_WITH(winceie,       [  --with-winceie=400      use specified IE version], [wxWINCE_IE="$withval"])
 WX_ARG_ENABLE(nanox,       [  --enable-nanox          use NanoX], wxUSE_NANOX)
 
 AC_ARG_ENABLE(gtk2,        [  --disable-gtk2          use GTK+ 1.2 instead of 2.0], [wxUSE_GTK2="$enableval"])
@@ -512,7 +524,7 @@
     dnl this? what about using ALL_TOOLKITS? TODO)
     NUM_TOOLKITS=`expr ${wxUSE_COCOA:-0} + ${wxUSE_GTK:-0} + ${wxUSE_OSX_CARBON:-0} \
                   + ${wxUSE_OSX_COCOA:-0} + ${wxUSE_MGL:-0} + ${wxUSE_DFB:-0} \
-                  + ${wxUSE_MICROWIN:-0} + ${wxUSE_MOTIF:-0} + ${wxUSE_MSW:-0} + ${wxUSE_X11:-0}`
+                  + ${wxUSE_MICROWIN:-0} + ${wxUSE_MOTIF:-0} + ${wxUSE_MSW:-0} + ${wxUSE_X11:-0} + ${wxUSE_WINCE:-0}`
 
     dnl Allow wxUSE_PM only for OS/2 with EMX.
     case "${host}" in
@@ -2691,6 +2703,9 @@
 TOOLKIT_INCLUDE=
 WIDGET_SET=
 
+WXWINCE_VERSION=
+WXWINCE_IEVERSION=
+
 dnl are we building for a win32 target environment?
 dnl If so, setup common stuff needed for both GUI and Base libs.
 if test "$USE_WIN32" = 1 ; then
@@ -2704,6 +2719,11 @@
     dnl --- FIXME: This is still a somewhat random list of libs,
     dnl ---        some of them should probably be included conditionally.
     case "${host}" in
+        *-*-mingw32ce*)
+            if test "$wxUSE_WINCE" = 1; then
+                LIBS="$LIBS -lcommctrl -lcommdlg -lws2 -lceshell -laygshell"
+            fi
+        ;;
 	x86_64-*-mingw32* )
             dnl --- For mingw-w64 lctl3d32's name has changed
             LIBS="$LIBS -lwinspool -lwinmm -lshell32 -lcomctl32 -lcomdlg32 -lwctl3d32 -ladvapi32 -lwsock32 -lgdi32"
@@ -2716,6 +2736,52 @@
         LIBS="$LIBS -loleacc"
     fi
 
+    if test "$wxUSE_WINCE" = 1 ; then
+
+        case "${wxWINCE_IE}" in
+            ''|default )
+                WXWINCE_IEVERSION=0x400
+            ;;
+            * )
+                WXWINCE_IEVERSION=0x${wxWINCE_IE}
+            ;;
+        esac
+
+        case "${wxWINCE_PLATFORM}" in
+            ''|default )
+                WXWINCE_PLATFORM="__POCKETPC__"
+            ;;
+            smartphone )
+                WXWINCE_PLATFORM="__SMARTPHONE__"
+            ;;
+            handheldpc )
+                WXWINCE_PLATFORM="__HANDHELDPC__"
+            ;;
+            * )
+                WXWINCE_PLATFORM="__POCKETPC__"
+            ;;
+        esac
+
+        case "${wxWINCE_VERSION}" in
+            ''|default )
+                WXWINCE_VERSION=0x420
+            ;;
+            * )
+                WXWINCE_VERSION=0x${wxWINCE_VERSION}
+            ;;
+        esac
+
+        TOOLKIT=WINCE
+        GUIDIST=WINCE_DIST
+        dnl _WIN32_WCE and _WIN32_IE defines are added automatically
+        dnl as they are also needed for resource compiler
+        dnl We save WXWINCE_PLATFORM for wx-config here: it's no good
+        dnl building apps for smartphone with wxWinCE built for pocketpc...
+        CPPFLAGS="${CPPFLAGS} -D${WXWINCE_PLATFORM}"
+        WXCONFIG_CPPFLAGS="${WXCONFIG_CPPFLAGS} -D${WXWINCE_PLATFORM}"
+
+    fi
+
     case "${host}" in
         *-*-cygwin* )
             dnl Cygwin doesn't include these by default
@@ -4673,7 +4739,7 @@
 dnl ---------------------------------------------------------------------------
 
 dnl under MSW (except mingw32) we always have thread support
-if test "$TOOLKIT" != "MSW" -a "$USE_OS2" != 1; then
+if test "$TOOLKIT" != "MSW" -a "$USE_OS2" != 1 -a "$TOOLKIT" != "WINCE" ; then
 
     dnl the code below:
     dnl
@@ -5299,7 +5365,7 @@
 dnl ------------------------------------------------------------------------
 
 dnl under MSW we always have LoadLibrary/GetProcAddress
-if test "$TOOLKIT" != "MSW" -a "$USE_OS2" != 1; then
+if test "$TOOLKIT" != "MSW" -a "$USE_OS2" != 1 -a "$TOOLKIT" != "WINCE"; then
 
     HAVE_DL_FUNCS=0
     HAVE_SHL_FUNCS=0
@@ -5704,6 +5770,10 @@
   fi
 fi
 
+if test "$wxUSE_WINCE" = 1 ; then
+    wxUSE_INTL="no"
+fi
+
 if test "$wxUSE_INTL" = "yes" ; then
   if test "$wxUSE_FILE" != "yes"; then
     AC_MSG_WARN(I18n code requires wxFile... disabled)
@@ -5714,6 +5784,11 @@
   fi
 fi
 
+
+if test "$wxUSE_WINCE" = 1 ; then
+    wxUSE_XLOCALE="no"
+fi
+
 if test "$wxUSE_XLOCALE" = "yes" ; then
     AC_DEFINE(wxUSE_XLOCALE)
     AC_CHECK_TYPES(locale_t,,,
@@ -5997,7 +6072,7 @@
 
 if test "$wxUSE_SOCKETS" = "yes"; then
     dnl under MSW we always have sockets
-    if test "$TOOLKIT" != "MSW"; then
+    if test "$TOOLKIT" != "MSW" -a "$TOOLKIT" != "WINCE"; then
         dnl under Solaris and OS/2, socket functions live in -lsocket
         AC_CHECK_FUNC(socket,,
             [
@@ -6019,7 +6094,7 @@
     dnl this test may be appropriate if building under cygwin
     dnl right now I'm assuming it also uses the winsock stuff
     dnl like mingw does..  -- RL
-    if test "$TOOLKIT" != "MSW"; then
+    if test "$TOOLKIT" != "MSW" -a "$TOOLKIT" != "WINCE"; then
         dnl determine the type of third argument for getsockname
         dnl This test needs to be done in C++ mode since gsocket.cpp now
         dnl is C++ code and pointer cast that are possible even without
@@ -6319,6 +6394,11 @@
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS layout"
 fi
 
+if test "$wxUSE_WINCE" = 1 ; then
+    wxUSE_MDI="no"
+    wxUSE_MDI_ARCHITECTURE="no"
+fi
+
 if test "$wxUSE_MDI" = "yes"; then
     AC_DEFINE(wxUSE_MDI)
 
@@ -6404,7 +6484,12 @@
                            [AC_MSG_RESULT(no)],
                            [AC_MSG_RESULT(yes)
                             WXCONFIG_CXXFLAGS="$WXCONFIG_CXXFLAGS -fvtable-thunks"])
-            LIBS=" -lrpcrt4 -loleaut32 -lole32 -luuid$LIBS"
+            if test "$wxUSE_WINCE" = 1 ; then
+                LIBS=" -loleaut32 -lole32 -luuid$LIBS"
+            else
+                LIBS=" -lrpcrt4 -loleaut32 -lole32 -luuid$LIBS"
+            fi
+
             if test "$wxUSE_OLE" = "yes" ; then
                 AC_DEFINE(wxUSE_OLE)
                 AC_DEFINE(wxUSE_OLE_AUTOMATION)
@@ -6906,6 +6991,7 @@
 fi
 
 USE_HTML=0
+
 if test "$wxUSE_HTML" = "yes"; then
     AC_DEFINE(wxUSE_HTML)
     USE_HTML=1
@@ -6952,6 +7038,11 @@
 fi
 
 USE_AUI=0
+
+if test "$wxUSE_WINCE" = 1 ; then
+    wxUSE_AUI="no"
+fi
+
 if test "$wxUSE_AUI" = "yes"; then
    AC_DEFINE(wxUSE_AUI)
    USE_AUI=1
@@ -7025,6 +7116,16 @@
     SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS richtext"
 fi
 
+if test "$wxUSE_WINCE" = 1 ; then
+    if test "$wxUSE_DIB" = "yes"; then
+        AC_DEFINE(wxUSE_WXDIB)
+    fi
+
+    if test "$wxUSE_REGKEY" = "yes"; then
+        AC_DEFINE(wxUSE_REGKEY)
+    fi
+fi
+
 dnl ---------------------------------------------------------------------------
 dnl wxImage options
 dnl ---------------------------------------------------------------------------
@@ -7757,6 +7858,14 @@
     RESCOMP="$WINDRES"
 fi
 
+if test "$wxUSE_WINCE" = 1 ; then
+    if test "x$WINDRES" = "x"; then
+        AC_MSG_ERROR([Required windres program not found])
+    fi
+
+    RESCOMP="$WINDRES"
+fi
+
 if test "$wxUSE_MAC" = 1 -o "$wxUSE_COCOA" = 1; then
     dnl base name of the resource file for wxMac must be the same
     dnl as library installation base name (-install_name)
@@ -7989,6 +8098,8 @@
 AC_SUBST(GCC)
 AC_SUBST(DLLTOOL)
 
+AC_SUBST(WXWINCE_VERSION)
+AC_SUBST(WXWINCE_IEVERSION)
 
 dnl MAKE_SET will be replaced with "MAKE=..." or nothing if make sets MAKE
 dnl itself (this macro is required if SUBDIRS variable is used in Makefile.am
Index: build/bakefiles/build_cfg.bkl
===================================================================
--- build/bakefiles/build_cfg.bkl	(revision 57034)
+++ build/bakefiles/build_cfg.bkl	(working copy)
@@ -9,7 +9,7 @@
     -->
 
     <if cond="FORMAT not in ['autoconf','msvc6prj','msevc4prj','msvs2003prj','msvs2005prj','msvs2008prj'] and
-              TOOLKIT in ['PM','MSW','MGL','MOTIF']">
+              TOOLKIT in ['PM','MSW','MGL','MOTIF', 'WINCE']">
 
         <set var="BUILD_CFG_FILE" make_var="1">
             $(SETUPHDIR)$(DIRSEP)build.cfg
Index: build/bakefiles/common.bkl
===================================================================
--- build/bakefiles/common.bkl	(revision 57034)
+++ build/bakefiles/common.bkl	(working copy)
@@ -278,6 +278,14 @@
         <if cond="FORMAT=='dmars' or FORMAT=='dmars_smake'">_WIN32_WINNT=0x0400</if>
     </set>
 
+    <set var="WIN32_WCE">
+       <if cond="FORMAT=='autoconf' and TOOLKIT=='WINCE'">_WIN32_WCE=$(WXWINCE_VERSION)</if>
+    </set>
+
+    <set var="WIN32_IE">
+       <if cond="FORMAT=='autoconf' and TOOLKIT=='WINCE'">_WIN32_IE=$(WXWINCE_IEVERSION)</if>
+    </set>
+
     <set var="UNICOWS_LIB">
         <if cond="MSLU=='1'">unicows</if>
     </set>
@@ -305,12 +313,14 @@
         <threading>$(THREADSFLAG)</threading>
         <runtime-libs>$(RUNTIME_LIBS)</runtime-libs>
         <cxx-rtti>$(RTTIFLAG)</cxx-rtti>
-        <cxx-exceptions>$(EXCEPTIONSFLAG)</cxx-exceptions>
+        <cxx-exceptions>$(EXCEPTIONSFLAG)</cxx-exceptions>
         <if cond="FORMAT!='autoconf'">
             <cppflags>$(EXTRACFLAGS)</cppflags>
         </if>
         <define>$(NO_VC_CRTDBG)</define>
-        <define>$(WIN32_WINNT)</define>
+        <define>$(WIN32_WINNT)</define>
+        <define>$(WIN32_WCE)</define>
+        <define>$(WIN32_IE)</define>
         <if cond="FORMAT=='msvc'">
             <ldflags>$(LINK_TARGET_CPU)</ldflags>
         </if>
@@ -470,7 +480,7 @@
         <define>$(RTTI_DEFINE)</define>
         <define>$(THREAD_DEFINE)</define>
         <define>$(UNICODE_DEFINE)</define>
-        <define>$(MSLU_DEFINE)</define>
+        <define>$(MSLU_DEFINE)</define>
         <if cond="FORMAT!='autoconf'"><define>$(GFXCTX_DEFINE)</define></if>
         <include cond="FORMAT!='autoconf'">$(SETUPHDIR)</include>
         <include cond="FORMAT!='autoconf'">$(TOP_SRCDIR)include</include>
Index: build/bakefiles/files.bkl
===================================================================
--- build/bakefiles/files.bkl	(revision 57034)
+++ build/bakefiles/files.bkl	(working copy)
@@ -143,9 +143,12 @@
     src/msw/volume.cpp
 </set>
 <set var="BASE_WINCE_SRC" hints="files">
-    <if cond="TOOLKIT=='WINCE'">src/msw/wince/time.cpp</if>
+    src/msw/wince/time.cpp
+    src/msw/wince/filefnwce.cpp
+    src/msw/wince/crt.cpp
 </set>
 <set var="BASE_WIN32_HDR" hints="files">
+    wx/generic/dirdlgg.h
     wx/msw/apptrait.h
     wx/msw/apptbase.h
     wx/msw/chkconf.h
@@ -169,6 +172,7 @@
 </set>
 <set var="BASE_WINCE_HDR" hints="files">
     <if cond="TOOLKIT=='WINCE'">
+        wx/msw/wince/wince.rc
         wx/msw/wince/time.h
         wx/msw/wince/chkconf.h
     </if>
@@ -1814,15 +1818,14 @@
     src/generic/fontdlgg.cpp
     src/msw/wince/checklst.cpp
     src/msw/wince/choicece.cpp
-    src/msw/wince/crt.cpp
     src/msw/wince/filedlgwce.cpp
-    src/msw/wince/filefnwce.cpp
     src/msw/wince/helpwce.cpp
     src/msw/wince/menuce.cpp
     src/msw/wince/tbarwce.cpp
     src/msw/wince/textctrlce.cpp
 </set>
 <set var="WINCE_HDR" hints="files">
+    wx/generic/dirdlgg.h
     wx/generic/fdrepdlg.h
     wx/generic/filedlgg.h
     wx/generic/fontdlgg.h
@@ -1834,6 +1837,9 @@
     wx/msw/wince/tbarwce.h
     wx/msw/wince/textctrlce.h
     wx/msw/wince/resources.h
+
+    wx/msw/wince/wince.rc
+    wx/msw/wince/smartphone.rc
 </set>
 
 
Index: build/bakefiles/config.bkl
===================================================================
--- build/bakefiles/config.bkl	(revision 57034)
+++ build/bakefiles/config.bkl	(working copy)
@@ -363,7 +363,9 @@
         <option name="CXXWARNINGS"/>
         <option name="HOST_SUFFIX"/>
         <option name="SAMPLES_RPATH_FLAG"/>
-        <option name="SAMPLES_RPATH_POSTLINK"/>
+        <option name="SAMPLES_RPATH_POSTLINK"/>
+        <option name="WXWINCE_VERSION"/>
+        <option name="WXWINCE_IEVERSION"/>
 
         <set var="TOP_SRCDIR">$(top_srcdir)/</set>
         <set var="RUNTIME_LIBS">dynamic</set>

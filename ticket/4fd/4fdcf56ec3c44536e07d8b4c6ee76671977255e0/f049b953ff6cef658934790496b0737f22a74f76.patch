Index: src/common/dynload.cpp
===================================================================
--- src/common/dynload.cpp	(revision 71338)
+++ src/common/dynload.cpp	(working copy)
@@ -80,6 +80,16 @@
     Load( libname, flags );
     m_after = wxClassInfo::GetFirst();
 
+	// emulate m_before = m_before->GetPrevious();
+	for(const wxClassInfo* info = m_after; info; info = info->GetNext())
+	{
+		if (info->GetNext() == m_before)
+		{
+			m_before = info;
+			break;
+		}
+	}
+
     if( m_handle != 0 )
     {
         UpdateClasses();
@@ -130,7 +140,7 @@
 
 void wxPluginLibrary::UpdateClasses()
 {
-    for (const wxClassInfo *info = m_after; info != m_before; info = info->GetNext())
+    for (const wxClassInfo *info = m_after; info != m_before->GetNext(); info = info->GetNext())
     {
         if( info->GetClassName() )
         {
@@ -147,7 +157,7 @@
     if (!ms_classes)
         return;
 
-    for(const wxClassInfo *info = m_after; info != m_before; info = info->GetNext())
+    for(const wxClassInfo *info = m_after; info != m_before->GetNext(); info = info->GetNext())
     {
         ms_classes->erase(ms_classes->find(info->GetClassName()));
     }
@@ -166,7 +176,7 @@
     wxASSERT_MSG( m_linkcount == 1,
                   wxT("RegisterModules should only be called for the first load") );
 
-    for ( const wxClassInfo *info = m_after; info != m_before; info = info->GetNext())
+    for ( const wxClassInfo *info = m_after; info != m_before->GetNext(); info = info->GetNext())
     {
         if( info->IsKindOf(CLASSINFO(wxModule)) )
         {

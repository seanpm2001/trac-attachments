Index: include/wx/dynload.h
===================================================================
--- include/wx/dynload.h	(revision 71338)
+++ include/wx/dynload.h	(working copy)
@@ -32,6 +32,15 @@
                                      class WXDLLIMPEXP_BASE);
 typedef wxDLManifest wxDLImports;
 
+// ticket 14261
+// The way UpdateClasses() and RestoreClasses() use m_before and m_after 
+// enforce an undocumented requirement that wxPluginLibrary files be unloaded
+// strictly in the reverse order that they are loaded otherwise m_before may
+// become NULL because a previous m_after had unloaded the class
+// ms_classes doesn't seem to be used for anything anywhere so relevant
+// code has now been enclosed with wxUSE_DYNAMIC_LOADER_MS_CLASSES
+//#define wxUSE_DYNAMIC_LOADER_MS_CLASSES
+
 // ---------------------------------------------------------------------------
 // wxPluginLibrary
 // ---------------------------------------------------------------------------
@@ -48,7 +57,9 @@
 {
 public:
 
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
     static wxDLImports* ms_classes;  // Static hash of all imported classes.
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
 
     wxPluginLibrary( const wxString &libname, int flags = wxDL_DEFAULT );
     ~wxPluginLibrary();
@@ -89,8 +100,10 @@
     size_t          m_objcount;     // ..and (pluggable) object instantiations.
     wxModuleList    m_wxmodules;    // any wxModules that we initialised.
 
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
     void    UpdateClasses();        // Update ms_classes
     void    RestoreClasses();       // Removes this library from ms_classes
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
     void    RegisterModules();      // Init any wxModules in the lib.
     void    UnregisterModules();    // Cleanup any wxModules we installed.
 
Index: src/common/dynload.cpp
===================================================================
--- src/common/dynload.cpp	(revision 71338)
+++ src/common/dynload.cpp	(working copy)
@@ -44,7 +44,9 @@
 // ---------------------------------------------------------------------------
 
 
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
 wxDLImports*  wxPluginLibrary::ms_classes = NULL;
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
 
 class wxPluginLibraryModule : public wxModule
 {
@@ -54,14 +56,18 @@
     // TODO: create ms_classes on demand, why always preallocate it?
     virtual bool OnInit()
     {
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
         wxPluginLibrary::ms_classes = new wxDLImports;
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
         wxPluginManager::CreateManifest();
         return true;
     }
 
     virtual void OnExit()
     {
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
         wxDELETE(wxPluginLibrary::ms_classes);
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
         wxPluginManager::ClearManifest();
     }
 
@@ -82,7 +88,9 @@
 
     if( m_handle != 0 )
     {
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
         UpdateClasses();
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
         RegisterModules();
     }
     else
@@ -97,7 +105,9 @@
     if( m_handle != 0 )
     {
         UnregisterModules();
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
         RestoreClasses();
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
     }
 }
 
@@ -128,6 +138,7 @@
 // Private methods
 // ------------------------
 
+#ifdef wxUSE_DYNAMIC_LOADER_MS_CLASSES
 void wxPluginLibrary::UpdateClasses()
 {
     for (const wxClassInfo *info = m_after; info != m_before; info = info->GetNext())
@@ -152,6 +163,7 @@
         ms_classes->erase(ms_classes->find(info->GetClassName()));
     }
 }
+#endif//wxUSE_DYNAMIC_LOADER_MS_CLASSES
 
 void wxPluginLibrary::RegisterModules()
 {

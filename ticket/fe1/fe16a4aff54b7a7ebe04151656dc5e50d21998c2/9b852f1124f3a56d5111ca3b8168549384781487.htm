<HTML>
<head><title>wxNumberValidator</title></head>

<BODY BGCOLOR=#FFFFFF>
<BODY>

<H2>wxNumberValidator</H2>
<P>
This is a validator used for numbers. You define a 'style' (or 'mask' or 'pattern' or whatever you like to name it)
to tell the validator the way you will enter data and it will check it all.</P>

<P>To learn about this 'style' please see <a href="wxFormatStringAsNumber.htm">wxFormatStringAsNumber</a>.</P>
<P>For more information, please see Validator overview.</P>
<P>This validator only works with text controls, but not multi-line's ones.</P>

<P>There are several behaviors you can set for this validator, specially when and how to validate. 
See <A HREF="#wxNVNumberValidator">wxNumberValidator constructor</A> for details</P>

<B><FONT COLOR="#FF0000">Derived from</FONT></B><P>
wxValidator<BR>
wxEvtHandler<BR>
wxObject<P>

<B><FONT COLOR="#FF0000">Include files</FONT></B><P>
valnum.h<P>
<B><FONT COLOR="#FF0000">See also</FONT></B><P>
Validator overview, wxValidator, wxGenericValidator, wxTextValidator<P>

<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<A HREF="#wxNVNumberValidator">wxNumberValidator::wxNumberValidator</A><BR>
<A HREF="#wxNVdestructor">wxNumberValidator::~wxNumberValidator</A><BR>
<A HREF="#wxNVclone">wxNumberValidator::Clone</A><BR>
<A HREF="#wxNVgetbehavior">wxNumberValidator::GetBehavior</A><BR>
<A HREF="#wxNVgetdecsep">wxNumberValidator::GetDecSep</A><BR>
<A HREF="#wxNVgetlasterror">wxNumberValidator::GetLastError</A><BR>
<A HREF="#wxNVgetstyle">wxNumberValidator::GetStyle</A><BR>
<A HREF="#wxNVonchar">wxNumberValidator::OnChar</A><BR>
<A HREF="#wxNVonkillfocus">wxNumberValidator::OnKillFocus</A><BR>
<A HREF="#wxNVsetbehavior">wxNumberValidator::SetBehavior</A><BR>
<A HREF="#wxNVsetstyle">wxNumberValidator::SetStyle</A><BR>
<A HREF="#wxNVtransferfromwindow">wxNumberValidator::TransferFromWindow</A><BR>
<A HREF="#wxNVtransfertowindow">wxNumberValidator::TransferToWindow</A><BR>
<A HREF="#wxNVvalidate">wxNumberValidator::Validate</A><BR>
<P>

<HR>
<A NAME="wxNVNumberValidator"></A>
<H3>wxNumberValidator::wxNumberValidator</H3><P>
<B>wxNumberValidator</B>(<B>const wxNumberValidator&amp;</B><I> validator</I>)<P>
Copy constructor.<P>
<B>wxNumberValidator</B>(<B>const wxString&amp; </B><I>valStyle = "-[#].'.'#E-###"</I>,
 <B>int </B><I>behavior = wxVAL_DEFAULT</I>, <B>wxString* </B><I>valPtr = NULL</I>)<P>
Constructor, taking a style, behavior and optional pointer to a wxString variable.<P>
<B><FONT COLOR="#FF0000">Parameters</FONT></B><P>
<I>valStyle</I><UL>
This is how you hope the string will be written.
 See <a href="wxFormatStringAsNumber.htm">wxFormatStringAsNumber</a>.</P>
</UL>
<P>

<I>behavior</I><UL>
You can combine any of this flags:<P>

<TABLE>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxUF_BESTRICT</B>
</TD>

<TD VALIGN=TOP>
Strict validation. The whole string must be correctly formatted.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxUF_NOSTRICT</B>
</TD>

<TD VALIGN=TOP>
Tolerant validation. Most errors will be dismissed.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxTZ_LEFT</B>
</TD>

<TD VALIGN=TOP>
Trim zeroes at left when transfer and wxTRANSFER_UNFORMATTED flag is set.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxTZ_RIGHT</B>
</TD>

<TD VALIGN=TOP>
Trim zeroes at right when transfer and wxTRANSFER_UNFORMATTED flag is set.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxTZ_BOTH</B>
</TD>

<TD VALIGN=TOP>
Defined as wxTZ_LEFT | wxTZ_RIGHT.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxVAL_ON_CHAR</B>
</TD>

<TD VALIGN=TOP>
Test if the char may be written. If the event's key-code is WXK_NUMPAD_DECIMAL, the whole decimal separator is written.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxVAL_ON_ENTER_TAB</B>
</TD>

<TD VALIGN=TOP>
The string at text control is tested if you press ENTER or TAB.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxVAL_ON_KILL_FOCUS</B>
</TD>

<TD VALIGN=TOP>
The string at text control is tested when control lose focus.
 If it is invalid, the focus returns to the control.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxTRANSFER_UNFORMATTED</B>
</TD>

<TD VALIGN=TOP>
When the string is transferred from/to variable format/unformat is done.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxTRANSFER_UNFORMATTED_NO_ZEROS</B>
</TD>

<TD VALIGN=TOP>
Defined as wxTRANSFER_UNFORMATTED | wxTZ_BOTH.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxVAL_DEFAULT</B>
</TD>

<TD VALIGN=TOP>
Defined as wxUF_BESTRICT | wxVAL_ON_ENTER_TAB.
</TD></TR>


<TR><TD VALIGN=TOP WIDTH=198>
<B>wxVAL_ON_EDIT</B>
</TD>

<TD VALIGN=TOP>
Defined as wxUF_NOSTRICT | wxVAL_ON_CHAR | wxVAL_ON_ENTER_TAB.
</TD></TR>


</TABLE>

</UL>
<P>
<I>valPtr</I><UL>
A pointer to a wxString variable that contains the value. This variable
should have a lifetime equal to or longer than the validator lifetime (which is usually
determined by the lifetime of the window). If NULL, the validator uses its own internal
storage for the value.</UL>
<P>

<B><FONT COLOR="#FF0000">Remarks</FONT></B><P>
As you can try on the sample, wxVAL_ON_CHAR and (possibly) wxVAL_ON_KILL_FOCUS are only useful
 if <I>valStyle</I> doesn't use 'forced' digits nor digits that are really chars (1,2,...),
 and wxUF_NOSTRICT is set. Otherwise copy & paste may help.<P>
On the other hand, a simple style (with thousands separator) helps you in writting large numbers.
<P>


<HR>
<A NAME="wxNVdestructor"></A>
<H3>wxNumberValidator::~wxNumberValidator</H3><P>
<B>~wxNumberValidator</B>()<P>
Destructor.<P>


<HR>
<A NAME="wxNVclone"></A>
<H3>wxNumberValidator::Clone</H3>
<P>
<B>virtual wxValidator*</B> <B>Clone</B>() <B>const</B><P>
Clones the number validator using the copy constructor.<P>
wxWindow uses it when the validator is associated with the text control.<P>


<HR>
<A NAME="wxNVgetbehavior"></A>
<H3>wxNumberValidator::GetBehavior</H3><P>
<B>int</B> <B>GetBehavior</B>()  <B>const</B><P>
Returns the validator behavior.<P>


<HR>
<A NAME="wxNVgetdecsep"></A>
<H3>wxNumberValidator::GetDecSep</H3><P>
<B>wxString</B> <B>GetDecSep</B>()<P>
Returns the decimal separator stored in the first sub-style.<P>


<HR>
<A NAME="wxNVgetlasterror"></A>
<H3>wxNumberValidator::GetLastError</H3><P>
<B>wxString</B> <B>GetLastError</B>()<P>
Returns the last error message, wxEmptyString if none.<P>


<HR>
<A NAME="wxNVgetstyle"></A>
<H3>wxNumberValidator::GetStyle</H3><P>
<B>wxString</B> <B>GetStyle</B>()<P>
Returns the current stored style.<P>


<HR>
<A NAME="wxNVonchar"></A>
<H3>wxNumberValidator::OnChar</H3><P>
<B>void</B> <B>OnChar</B>(<B>wxKeyEvent&amp;</B><I> event</I>)<P>
Receives character input from the window and test it according to the
current validator style.<P>
If no errors, the string at window is re-formated.<P>
If the event key-code is WXK_ESCAPE or WXK_CANCEL, TransferToWindow() is called,
 so the window is replaced with the string at <I>valPtr</I>.<P>
If the event's key-code is WXK_NUMPAD_DECIMAL, the whole decimal separator is written.<P>


<HR>
<A NAME="wxNVonkillfocus"></A>
<H3>wxNumberValidator::OnKillFocus</H3><P>
<B>void</B> <B>OnKillFocus</B>(<B>wxFocusEvent&amp;</B><I> event</I>)<P>
Validate (and formats) the window. Retains focus if there is an error.<P>



<HR>
<A NAME="wxNVsetbehavior"></A>
<H3>wxNumberValidator::SetBehavior</H3><P>
<B>void</B> <B>SetBehavior</B>(<B>int </B><I>behavior</I>)<P>
Sets the validator behavior.<P>


<HR>
<A NAME="wxNVsetstyle"></A>
<H3>wxNumberValidator::SetStyle</H3><P>
<B>int</B> <B>SetStyle</B>(<B>const wxString&amp; </B><I>valstyle</I>)<P>
Set the validator style.<P>
Returns -1 if no errors or the position (0-based) where first error.<P>
See <a href="wxFormatStringAsNumber.htm">wxFormatStringAsNumber</a>.<P>


<HR>
<A NAME="wxNVtransferfromwindow"></A>
<H3>wxNumberValidator::TransferFromWindow</H3>
<P>
<B>virtual bool</B> <B>TransferFromWindow</B>()<P>
Transfers the string value at <I>valPtr</I> to the window.<P>


<HR>
<A NAME="wxNVtransfertowindow"></A>
<H3>wxNumberValidator::TransferToWindow</H3>
<P>
<B>virtual bool</B> <B>TransferToWindow</B>()<P>
Transfers the window value to the string at <I>valPtr</I>.<P>


<HR>
<A NAME="wxNVvalidate"></A>
<H3>wxNumberValidator::Validate</H3>
<P>
<B>virtual bool</B> <B>Validate</B>(<B>wxWindow*</B><I> parent</I>)<P>
Validates the window contents against the validator style and behavior.<P>

</BODY></HTML>

 	  	 

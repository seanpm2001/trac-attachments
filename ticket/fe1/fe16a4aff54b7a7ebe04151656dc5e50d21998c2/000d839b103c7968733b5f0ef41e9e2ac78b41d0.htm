<HTML>
<head><title>wxFormatStringAsNumber</title></head>

<BODY BGCOLOR=#FFFFFF>
<BODY>

<H2>wxFormatStringAsNumber</H2>
<P>
This class takes a wxString as input and formats it as if it was a number, storing the result in another wxString. You can also do the backwards process, unformatting.</P>

<P>The formatting rules - let’s call them &quot;style&quot; -, include sub-styles for positive, negative and zero numbers.</P>

<P>This class is also used in <a href="wxNumberValidator.htm">wxNumberValidator</a></P>
<A NAME="wxFSANthestyle"></A><H3>The style</H3>
<P>You must specify a style to use. You do this by special chars meanning:</P>
<PRE>
     0     Sets '0' (zero) if no digit, or the digit if any.

     #     Sets the digit if any; if decimal digit, show all existing digits.
           Where in decimal part, no '0' '#' or 'b' is allowed after '#'.

     b     Sets next char in style (tipically blank ' ') if no digit.

     .     Next char marks the beginning of the decimal separator.
           The same char marks end of this separator.
           Tipically this char would be "'".
           The decimal-part is only used if both number and style have decimal separator.

     [     Init of a group to repeat. Only one group is allowed.
           No digits (#0b) are allowed before (at left) group.
           No sign is allowed inside group.
           No decimal separator is allowed inside group.
           No exponential is allowed inside group.

     ]     End of group.

     +     Set always the sign. Only one sign is allowed.

     -     Set the sign if the number is negative.

     @     Next char is literal; usefull for showing  a command-character, such as '#'.

     E     Exponential.

     e     Same. Use lowletter 'e' instead of  'E'.
           One digit needed at least before exponential.
           Groups not allowed after exponential.
           Exponential is only used if both number and style have it.

     ;     Styles separator. May be styles for positive, negative and zero values
           (in this order). If only one style is provided, it is used for all numbers.
           If two styles, the first is used for positive and zero, the second for negative.
</PRE>
<H3>Some samples</H3>
<PRE>
   input                    style                            output

1234567890.1234        [,###].'.'#                      1,234,567,890.1234
12345678.1234          [mM000].'d'#                     012mM345mM678d1234
-1234.56e98            -#0.','#E-###                    -34,56E98
-1234.5678             num is= [#].' and '00+           num is= 1234 and 56-
12345678E+98           @#[b 0 ]@-000e+bxbxbx0+@#        # 1 23 45 -678e+xx98+#
12.3                   +[#].'.'#;(000.','00)            +12.3
-12.3                  +[#].'.'#;(000.','00)            (012,30)
</PRE>

<H3>NOTES:</H3>
<P>- Remember no roundings or calculations are done.
<P>- No sign is allowed inside a group, but you can use it as a literal character (@+ or @-).
<P>- If number (well, the string) has more decimal digits than style, they will be TRUNCATED.
<P>- If number has more digits before decimal than style, they will be TRUNCATED.
<P>- When reached the last (right to left) digit to fill the group, everything from group's init
 to first required number will be skipped.
<P>- If number has more digits at exponential-part than style, an error is returned.
<P>- If style has two signs, after 'E' or 'e', first sign is intended for exponential and second for number.
</P>
<P>CHARS BETWEEN DIGITS
<P>The rules are:
<P>- Any char at left of the left-most digit (#, b, 0) is a prefix, so it is written.
<P>- Any char at right of the right-most digit (#, b, 0) is a suffix, so it is written.
<P>- A char between digits is written if more digits (given or forced) will be written.
<P>i.e. with "aa###c#0d##f" "5" becomes "aa0d5f" and "123456" becomes "aa12c34d56f".
</P>
<P>THE DECIMAL PART:
<P>Like exponential, to use the decimal part, BOTH style and number must have decimal separator.
<P> #  means 'all decimal digits'.
<P>00  means 'just and only two digits'.
<P>0#  means 'at least one digit'.
<P>Once # is used, no '#' 'b' or '0' is allowed. So, #0  is not allowed. If you need an extra 0, use #@0
</P>
<A NAME="wxFSANtunformatting"></A><H3>Unformatting</H3>
<P>Well, first at all, you must know this is not as exact as formatting. 
We must find some topics in order to construct the number: sign, integer part, decimal part, 
exponential sign and exponential digits.
<P>Sign is achived proving all sub-styles and getting the one that matches the best. If there´s only one sub-style,
we'll get the sign directly.
<P>The esential parts are extracted searching for their delimitiers, specified in style.
But, the string may have several 'e'. So, wich one is exponential?<P>
Consider this exotic but tricky situation:
<PRE>
     formatted                                   style
dist.=1,234,567.89e+12 kilometers       dist@.=[,###].'.'#e+### kilometers
</PRE>
Or even worse, with some 'e' and '.' between digits.<P>
Another trick-increasing factor is to use this class in <a href="wxNumberValidator.htm"> wxNumberValidator</a>, which is designed
to take a <I>strictly</I> formatted input or a <I>non-strict</I> one to bypass some "typos".<BR>
<A HREF="#wxFSANunformatstr">UnFormatStr</A> takes this into consideration, using the flag <I>beStrict</I>.
<P>To cope with all of this, by now (Mar-03) I have not a better idea than getting the first 'e' at left of the
first digit, searching in formatted input from finish to beguinning (right to left). 
If in not strict mode, just get the first 'e' from the right. 
To find decimal separator (in strict & !strict modes) we just get its first ocurrence (from left to right).<BR>
I know this can't cope with all cases, but 90% (100% of "normal", no exotic).
</P>
<P>PAY ATTENTION, PLEASE:
<P>Digits (1,2,...) and command-characters (#,+,e,...) used as chars in style must be considered carefully, because unformatting may get confused.
<P>This is specially true with <I>non-strict</I> mode. It should be used only with simple styles.
</P>

<B><FONT COLOR="#FF0000">Derived from</FONT></B><P>
No base class<P>
<B><FONT COLOR="#FF0000">Include files</FONT></B><P>
&lt;forstrnu.h&gt;<P>
<B><FONT COLOR="#FF0000">Members</FONT></B><P>
<A HREF="#wxFSANformatstr">wxFormatStringAsNumber::FormatStr</A><BR>
<A HREF="#wxFSANgetdecsep">wxFormatStringAsNumber::GetDecSep</A><BR>
<A HREF="#wxFSANgetlasterror">wxFormatStringAsNumber::GetLastError</A><BR>
<A HREF="#wxFSANgetstyle">wxFormatStringAsNumber::GetStyle</A><BR>
<A HREF="#wxFSANqcheck">wxFormatStringAsNumber::QCheck</A><BR>
<A HREF="#wxFSANsetstyle">wxFormatStringAsNumber::SetStyle</A><BR>
<A HREF="#wxFSANtrimzeros">wxFormatStringAsNumber::TrimZeros</A><BR>
<A HREF="#wxFSANunformatstr">wxFormatStringAsNumber::UnFormatStr</A><BR>
<P>

<HR>
<A NAME="wxFSANformatstr"></A>
<H3>wxFormatStringAsNumber::FormatStr</H3><P>
<B>int</B> <B>FormatStr</B>(<B>const wxString&amp; </B><I>strNumIn</I>, <B>wxString&amp; </B><I>strNumOut</I>)<P>
Formats <I>strNumIn</I> into <I>strNumOut</I>. Returns -1 if no errors or the position (0-based) where first error<P>

<HR>
<A NAME="wxFSANgetdecsep"></A>
<H3>wxFormatStringAsNumber::GetDecSep</H3><P>
<B>wxString</B> <B>GetDecSep</B>()<P>
Returns the decimal separator stored in the first sub-style.<P>

<HR>
<A NAME="wxFSANgetlasterror"></A>
<H3>wxFormatStringAsNumber::GetLastError</H3><P>
<B>wxString</B> <B>GetLastError</B>()<P>
Returns the last error message, wxEmptyString if none.<P>

<HR>
<A NAME="wxFSANgetstyle"></A>
<H3>wxFormatStringAsNumber::GetStyle</H3><P>
<B>wxString</B> <B>GetStyle</B>()<P>
Returns the current stored style.<P>

<HR>
<A NAME="wxFSANqcheck"></A>
<H3>wxFormatStringAsNumber::QCheck</H3><P>
<B>int</B> <B>QCheck</B>(<B>const wxString&amp; </B><I>strNum</I>)<P>
Analize strNum to be a computer-style number. 
Because there´s no format, it is quick<P>
Before using it, be sure strNum has no tabs, blanks, etc.<P>
Returns '-1' if no errors or the position (0-based) where first error.<P>

<HR>
<A NAME="wxFSANsetstyle"></A>
<H3>wxFormatStringAsNumber::SetStyle</H3><P>
<B>int</B> <B>SetStyle</B>(<B>const wxString&amp; </B><I>formatStyle</I>)<P>
Analyze the style, formed with at most three substyles. 
If the [sub]style[s] are OK, current stored style is replaced. 
Returns -1 if no errors or the position (0-based) where first error.<P>
See <A HREF="#wxFSANthestyle">The style</A> for details.<P>

<HR>
<A NAME="#wxFSANtrimzeros"></A>
<H3>wxFormatStringAsNumber::TrimZeros</H3><P>
<B>void</B> <B>TrimZeros</B>(<B>wxString&amp; </B><I>strNum</I>, <B>int</B> <I>atside = wxTZ_LEFT</I>)<P>
As a result from unformatting, you can get somethig like '-002.45000E+089' <P>
This function changes <I>strNum</I> <P>
<PRE>
<I>atside = wxTZ_LEFT</I>  (default)  to get '-2.45000E+089'<P>
<I>atside = wxTZ_RIGHT</I>            to get '-002.45E+089' <P>
<I>atside = wxTZ_BOTH</I>             to get '-2.45E+089' <P>
</PRE>
Notes:<P>
- The exponential part is not modified.<P>
- One '0' is set before decimal separator (i.e. '0000.12' becomes '0.12').<P>
- If number is a real zero (i.e. -0.0000E+12) <I>strNum</I> becomes '0'.<P>

<HR>
<A NAME="wxFSANunformatstr"></A>
<H3>wxFormatStringAsNumber::UnFormatStr</H3><P>
<B>int</B> <B>UnFormatStr</B>(<B>const wxString&amp; </B><I>strIn</I>, <B>wxString&amp; </B><I>strOut</I>, <B>int</B> <I>beStrict = wxUF_BESTRICT</I>)<P>
Unformats <I>strIn</I> into <I>strOut</I>. Returns -1 if no errors or the position (0-based) where first error.<P>
Use <I>beStrict=wxUF_BESTRICT</I> (default) if <I>strIn</I> is supposed to be <I>perfectly well style-formatted</I>.<BR>
<I>beStrict=wxUF_NOSTRICT</I> is tolerant, stripping anything but digits, signs, decimal char and exponential char.<P>
<I>beStrict=wxUF_NOSTRICT</I> only uses the first sub-style.<P>
See <A HREF="#wxFSANtunformatting">Unformatting</A> for special precautions.<P>

</BODY></HTML>

 	  	 

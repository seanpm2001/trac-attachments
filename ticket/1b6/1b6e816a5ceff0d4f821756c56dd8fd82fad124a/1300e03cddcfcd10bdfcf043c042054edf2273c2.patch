Index: src/msw/ole/oleutils.cpp
===================================================================
--- src/msw/ole/oleutils.cpp	(revision 72357)
+++ src/msw/ole/oleutils.cpp	(working copy)
@@ -448,6 +448,96 @@
     return true;
 }
 
+namespace {
+
+// converts SAFEARRAY data to a wxVariant with the list type 
+template <typename T>
+class SafeArrayDataToVariant
+{
+public:
+    bool Convert(const void* data, size_t count, wxVariant& variant)
+    {
+        const T* elements = static_cast<const T*>(data);
+
+        variant.ClearList();
+        for ( size_t i = 0; i < count; i++ )
+        {
+            variant.Append(elements[i]);
+        }
+        return true;
+    }
+};
+
+// Release any IDispatches that may be in the variant
+void ReleaseVariantDispatch(wxVariant& variant)
+{
+    if ( variant.GetType() == wxS("void*") )
+    {
+        IDispatch* dispatch = (IDispatch*)variant.GetVoidPtr();
+        if ( dispatch )
+        {
+            dispatch->Release();
+            variant = (void*)NULL;
+        }
+    }
+    else if ( variant.GetType() == wxS("list") )
+    {
+        for ( size_t i = 0; i < variant.GetCount(); i++ )
+        {
+            ReleaseVariantDispatch(variant[i]);
+        }
+    }
+}
+
+// converts SAFEARRAY data to a wxVariant with the list type, VARIANTARG specialization
+template <>
+class SafeArrayDataToVariant<VARIANTARG>
+{
+public:
+    bool Convert(const void* data, size_t count, wxVariant& variant)
+    {
+        const VARIANTARG* elements = static_cast<const VARIANTARG*>(data);    
+
+        variant.ClearList();
+        for ( size_t i = 0; i < count; i++ )
+        {        
+            wxVariant vTmp;
+
+            if ( !wxConvertOleToVariant(elements[i], vTmp) )
+            {            
+                // we need to release IDispatches here (if any)
+                // because after that the pointers will not be accessible
+                ReleaseVariantDispatch(variant);
+                return false;                        
+            }
+            variant.Append(vTmp);
+        }    
+        return true;
+    }
+};
+
+// converts SAFEARRAY data to a wxVariant with the arrstring type 
+template <>
+class SafeArrayDataToVariant<BSTR>
+{
+public:
+    bool Convert(const void* data, size_t count, wxVariant& variant)
+    {
+        const BSTR* elements = static_cast<const BSTR*>(data);
+        wxArrayString strings;
+
+        strings.reserve(count);
+        for ( size_t i = 0; i < count; i++ )
+        {
+            strings.push_back(wxConvertStringFromOle(elements[i]));
+        }
+        variant = strings;
+        return true;
+    }
+};
+
+} // unnamed namespace
+
 #ifndef VT_TYPEMASK
 #define VT_TYPEMASK 0xfff
 #endif
@@ -472,49 +562,49 @@
 
         switch (oleVariant.vt & VT_TYPEMASK)
         {
-            case VT_VARIANT:
-                {
-                    variant.ClearList();
-                    VARIANTARG *variant_data=(VARIANTARG*)pvdata;
-                    for ( int i = 0; i < cElements; i++ )
-                    {
-                        VARIANTARG& oleElement = variant_data[i];
-                        wxVariant vElement;
-                        if ( !wxConvertOleToVariant(oleElement, vElement) )
-                        {
-                            ok = false;
-                            variant.ClearList();
-                            break;
-                        }
+            case VT_VARIANT: 
+                ok = SafeArrayDataToVariant<VARIANTARG>().Convert(pvdata, cElements, variant);
+                break;
+            
+            case VT_BSTR: 
+                SafeArrayDataToVariant<BSTR>().Convert(pvdata, cElements, variant);
+                break;
+            
+            case VT_I4:
+                SafeArrayDataToVariant<wxInt32>().Convert(pvdata, cElements, variant);
+                break;
 
-                        variant.Append(vElement);
-                    }
-                }
+            case VT_I2:
+                SafeArrayDataToVariant<wxInt16>().Convert(pvdata, cElements, variant);
                 break;
 
-            case VT_BSTR:
-                {
-                    wxArrayString strings;
-                    BSTR *string_val=(BSTR*)pvdata;
-                    for ( int i = 0; i < cElements; ++i )
-                    {
-                        wxString str=wxConvertStringFromOle(*string_val);
-                        strings.Add(str);
-                        ++string_val;
-                    }
-                    variant=strings;
-                }
+            case VT_R4:
+                if ( sizeof(float) == 4 )
+                    SafeArrayDataToVariant<float>().Convert(pvdata, cElements, variant);
+                else
+                    ok = false;
                 break;
 
-            default:
-                wxLogDebug(wxT("unhandled VT_ARRAY type %x in wxConvertOleToVariant"),
-                           oleVariant.vt & VT_TYPEMASK);
-                variant = wxVariant();
+            case VT_R8:
+                if ( sizeof(double) == 8 )
+                    SafeArrayDataToVariant<double>().Convert(pvdata, cElements, variant);
+                else
+                    ok = false;
+                break;            
+
+            default:            
                 ok = false;
                 break;
         }
 
         SafeArrayUnaccessData(oleVariant.parray);
+
+        if ( !ok )    
+        {
+            wxLogDebug(wxT("unhandled VT_ARRAY type %x in wxConvertOleToVariant"),
+                        oleVariant.vt & VT_TYPEMASK);
+            variant = wxVariant();
+        }
     }
     else if ( oleVariant.vt & VT_BYREF )
     {
